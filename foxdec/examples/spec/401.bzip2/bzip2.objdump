
bzip2:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	endbr64 
    1004:	sub    rsp,0x8
    1008:	mov    rax,QWORD PTR [rip+0xffc1]        # 10fd0 <__gmon_start__>
    100f:	test   rax,rax
    1012:	je     1016 <_init+0x16>
    1014:	call   rax
    1016:	add    rsp,0x8
    101a:	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	push   QWORD PTR [rip+0xfef2]        # 10f18 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	bnd jmp QWORD PTR [rip+0xfef3]        # 10f20 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	nop    DWORD PTR [rax]
    1030:	endbr64 
    1034:	push   0x0
    1039:	bnd jmp 1020 <.plt>
    103f:	nop
    1040:	endbr64 
    1044:	push   0x1
    1049:	bnd jmp 1020 <.plt>
    104f:	nop
    1050:	endbr64 
    1054:	push   0x2
    1059:	bnd jmp 1020 <.plt>
    105f:	nop
    1060:	endbr64 
    1064:	push   0x3
    1069:	bnd jmp 1020 <.plt>
    106f:	nop
    1070:	endbr64 
    1074:	push   0x4
    1079:	bnd jmp 1020 <.plt>
    107f:	nop
    1080:	endbr64 
    1084:	push   0x5
    1089:	bnd jmp 1020 <.plt>
    108f:	nop
    1090:	endbr64 
    1094:	push   0x6
    1099:	bnd jmp 1020 <.plt>
    109f:	nop
    10a0:	endbr64 
    10a4:	push   0x7
    10a9:	bnd jmp 1020 <.plt>
    10af:	nop
    10b0:	endbr64 
    10b4:	push   0x8
    10b9:	bnd jmp 1020 <.plt>
    10bf:	nop
    10c0:	endbr64 
    10c4:	push   0x9
    10c9:	bnd jmp 1020 <.plt>
    10cf:	nop
    10d0:	endbr64 
    10d4:	push   0xa
    10d9:	bnd jmp 1020 <.plt>
    10df:	nop
    10e0:	endbr64 
    10e4:	push   0xb
    10e9:	bnd jmp 1020 <.plt>
    10ef:	nop
    10f0:	endbr64 
    10f4:	push   0xc
    10f9:	bnd jmp 1020 <.plt>
    10ff:	nop
    1100:	endbr64 
    1104:	push   0xd
    1109:	bnd jmp 1020 <.plt>
    110f:	nop
    1110:	endbr64 
    1114:	push   0xe
    1119:	bnd jmp 1020 <.plt>
    111f:	nop
    1120:	endbr64 
    1124:	push   0xf
    1129:	bnd jmp 1020 <.plt>
    112f:	nop
    1130:	endbr64 
    1134:	push   0x10
    1139:	bnd jmp 1020 <.plt>
    113f:	nop
    1140:	endbr64 
    1144:	push   0x11
    1149:	bnd jmp 1020 <.plt>
    114f:	nop
    1150:	endbr64 
    1154:	push   0x12
    1159:	bnd jmp 1020 <.plt>
    115f:	nop

Disassembly of section .plt.got:

0000000000001160 <__cxa_finalize@plt>:
    1160:	endbr64 
    1164:	bnd jmp QWORD PTR [rip+0xfe75]        # 10fe0 <__cxa_finalize@GLIBC_2.2.5>
    116b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

0000000000001170 <free@plt>:
    1170:	endbr64 
    1174:	bnd jmp QWORD PTR [rip+0xfdad]        # 10f28 <free@GLIBC_2.2.5>
    117b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001180 <__errno_location@plt>:
    1180:	endbr64 
    1184:	bnd jmp QWORD PTR [rip+0xfda5]        # 10f30 <__errno_location@GLIBC_2.2.5>
    118b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001190 <puts@plt>:
    1190:	endbr64 
    1194:	bnd jmp QWORD PTR [rip+0xfd9d]        # 10f38 <puts@GLIBC_2.2.5>
    119b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011a0 <__stack_chk_fail@plt>:
    11a0:	endbr64 
    11a4:	bnd jmp QWORD PTR [rip+0xfd95]        # 10f40 <__stack_chk_fail@GLIBC_2.4>
    11ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011b0 <memset@plt>:
    11b0:	endbr64 
    11b4:	bnd jmp QWORD PTR [rip+0xfd8d]        # 10f48 <memset@GLIBC_2.2.5>
    11bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011c0 <close@plt>:
    11c0:	endbr64 
    11c4:	bnd jmp QWORD PTR [rip+0xfd85]        # 10f50 <close@GLIBC_2.2.5>
    11cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011d0 <fputc@plt>:
    11d0:	endbr64 
    11d4:	bnd jmp QWORD PTR [rip+0xfd7d]        # 10f58 <fputc@GLIBC_2.2.5>
    11db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011e0 <read@plt>:
    11e0:	endbr64 
    11e4:	bnd jmp QWORD PTR [rip+0xfd75]        # 10f60 <read@GLIBC_2.2.5>
    11eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011f0 <strtol@plt>:
    11f0:	endbr64 
    11f4:	bnd jmp QWORD PTR [rip+0xfd6d]        # 10f68 <strtol@GLIBC_2.2.5>
    11fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001200 <memcpy@plt>:
    1200:	endbr64 
    1204:	bnd jmp QWORD PTR [rip+0xfd65]        # 10f70 <memcpy@GLIBC_2.14>
    120b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001210 <malloc@plt>:
    1210:	endbr64 
    1214:	bnd jmp QWORD PTR [rip+0xfd5d]        # 10f78 <malloc@GLIBC_2.2.5>
    121b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001220 <__printf_chk@plt>:
    1220:	endbr64 
    1224:	bnd jmp QWORD PTR [rip+0xfd55]        # 10f80 <__printf_chk@GLIBC_2.3.4>
    122b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001230 <open@plt>:
    1230:	endbr64 
    1234:	bnd jmp QWORD PTR [rip+0xfd4d]        # 10f88 <open@GLIBC_2.2.5>
    123b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001240 <perror@plt>:
    1240:	endbr64 
    1244:	bnd jmp QWORD PTR [rip+0xfd45]        # 10f90 <perror@GLIBC_2.2.5>
    124b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001250 <exit@plt>:
    1250:	endbr64 
    1254:	bnd jmp QWORD PTR [rip+0xfd3d]        # 10f98 <exit@GLIBC_2.2.5>
    125b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001260 <fwrite@plt>:
    1260:	endbr64 
    1264:	bnd jmp QWORD PTR [rip+0xfd35]        # 10fa0 <fwrite@GLIBC_2.2.5>
    126b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001270 <__fprintf_chk@plt>:
    1270:	endbr64 
    1274:	bnd jmp QWORD PTR [rip+0xfd2d]        # 10fa8 <__fprintf_chk@GLIBC_2.3.4>
    127b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001280 <strerror@plt>:
    1280:	endbr64 
    1284:	bnd jmp QWORD PTR [rip+0xfd25]        # 10fb0 <strerror@GLIBC_2.2.5>
    128b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001290 <__ctype_b_loc@plt>:
    1290:	endbr64 
    1294:	bnd jmp QWORD PTR [rip+0xfd1d]        # 10fb8 <__ctype_b_loc@GLIBC_2.3>
    129b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000000012a0 <main>:
    12a0:	endbr64 
    12a4:	push   r14
    12a6:	mov    QWORD PTR [rip+0x1098f],0xa        # 11c40 <seedi>
    12b1:	push   r13
    12b3:	push   r12
    12b5:	push   rbp
    12b6:	push   rbx
    12b7:	cmp    edi,0x1
    12ba:	jle    152f <main+0x28f>
    12c0:	mov    rbp,QWORD PTR [rsi+0x8]
    12c4:	mov    ebx,edi
    12c6:	mov    r13,rsi
    12c9:	cmp    edi,0x2
    12cc:	je     1495 <main+0x1f5>
    12d2:	mov    rdi,QWORD PTR [rsi+0x10]
    12d6:	mov    edx,0xa
    12db:	xor    esi,esi
    12dd:	call   11f0 <strtol@plt>
    12e2:	mov    r12d,eax
    12e5:	cmp    ebx,0x3
    12e8:	je     12fa <main+0x5a>
    12ea:	mov    rdi,QWORD PTR [r13+0x18]
    12ee:	mov    edx,0xa
    12f3:	xor    esi,esi
    12f5:	call   11f0 <strtol@plt>
    12fa:	shl    eax,0x14
    12fd:	mov    r14d,r12d
    1300:	shl    r14d,0x14
    1304:	mov    DWORD PTR [rip+0x1096e],eax        # 11c78 <spec_fd+0x18>
    130a:	xor    eax,eax
    130c:	mov    DWORD PTR [rip+0x1094d],r14d        # 11c60 <spec_fd>
    1313:	mov    DWORD PTR [rip+0x10976],r14d        # 11c90 <spec_fd+0x30>
    131a:	call   1730 <spec_init>
    131f:	cmp    DWORD PTR [rip+0xfcea],0x2        # 11010 <dbglvl>
    1326:	jg     15a9 <main+0x309>
    132c:	xor    edi,edi
    132e:	mov    edx,r14d
    1331:	mov    rsi,rbp
    1334:	call   1a50 <spec_load>
    1339:	cmp    DWORD PTR [rip+0xfcd0],0x3        # 11010 <dbglvl>
    1340:	jg     158b <main+0x2eb>
    1346:	mov    edi,r12d
    1349:	shl    edi,0xa
    134c:	movsxd rdi,edi
    134f:	call   1210 <malloc@plt>
    1354:	mov    rbx,rax
    1357:	test   rax,rax
    135a:	je     15ba <main+0x31a>
    1360:	test   r14d,r14d
    1363:	jle    138e <main+0xee>
    1365:	mov    rsi,QWORD PTR [rip+0x10904]        # 11c70 <spec_fd+0x10>
    136c:	mov    rdx,rax
    136f:	xor    eax,eax
    1371:	nop    DWORD PTR [rax+0x0]
    1378:	movzx  ecx,BYTE PTR [rsi+rax*1]
    137c:	add    rax,0x403
    1382:	add    rdx,0x1
    1386:	mov    BYTE PTR [rdx-0x1],cl
    1389:	cmp    r14d,eax
    138c:	jg     1378 <main+0xd8>
    138e:	mov    BYTE PTR [rip+0x1115f],0x0        # 124f4 <smallMode>
    1395:	mov    ebp,0x5
    139a:	lea    r13,[rip+0xbf57]        # d2f8 <_IO_stdin_used+0x2f8>
    13a1:	mov    DWORD PTR [rip+0x10d21],0x0        # 120cc <verbosity>
    13ab:	mov    DWORD PTR [rip+0x11157],0x9        # 1250c <blockSize100k>
    13b5:	mov    DWORD PTR [rip+0x1112d],0x1e        # 124ec <workFactor>
    13bf:	cmp    DWORD PTR [rip+0xfc4a],0x2        # 11010 <dbglvl>
    13c6:	jg     1575 <main+0x2d5>
    13cc:	xor    edi,edi
    13ce:	mov    esi,0x1
    13d3:	mov    DWORD PTR [rip+0x11133],ebp        # 1250c <blockSize100k>
    13d9:	call   4480 <compressStream>
    13de:	cmp    DWORD PTR [rip+0xfc2b],0x3        # 11010 <dbglvl>
    13e5:	jg     1557 <main+0x2b7>
    13eb:	movsxd rdx,DWORD PTR [rip+0x10872]        # 11c64 <spec_fd+0x4>
    13f2:	mov    rdi,QWORD PTR [rip+0x10877]        # 11c70 <spec_fd+0x10>
    13f9:	xor    esi,esi
    13fb:	call   11b0 <memset@plt>
    1400:	cmp    DWORD PTR [rip+0xfc09],0x2        # 11010 <dbglvl>
    1407:	mov    QWORD PTR [rip+0x10852],0x0        # 11c64 <spec_fd+0x4>
    1412:	mov    DWORD PTR [rip+0x10864],0x0        # 11c80 <spec_fd+0x20>
    141c:	jg     1546 <main+0x2a6>
    1422:	xor    esi,esi
    1424:	mov    edi,0x1
    1429:	mov    DWORD PTR [rip+0x110d9],0x0        # 1250c <blockSize100k>
    1433:	call   47c0 <uncompressStream>
    1438:	cmp    DWORD PTR [rip+0xfbd1],0x3        # 11010 <dbglvl>
    143f:	jg     14a5 <main+0x205>
    1441:	test   r14d,r14d
    1444:	jle    14d8 <main+0x238>
    144a:	mov    rcx,QWORD PTR [rip+0x1081f]        # 11c70 <spec_fd+0x10>
    1451:	mov    rdx,rbx
    1454:	xor    eax,eax
    1456:	jmp    146f <main+0x1cf>
    1458:	nop    DWORD PTR [rax+rax*1+0x0]
    1460:	add    rax,0x403
    1466:	add    rdx,0x1
    146a:	cmp    r14d,eax
    146d:	jle    14c3 <main+0x223>
    146f:	movzx  edi,BYTE PTR [rcx+rax*1]
    1473:	cmp    BYTE PTR [rdx],dil
    1476:	je     1460 <main+0x1c0>
    1478:	mov    edi,0x1
    147d:	mov    edx,r12d
    1480:	lea    rsi,[rip+0xbee9]        # d370 <_IO_stdin_used+0x370>
    1487:	xor    eax,eax
    1489:	call   1220 <__printf_chk@plt>
    148e:	xor    edi,edi
    1490:	call   1250 <exit@plt>
    1495:	mov    r12d,0x40
    149b:	mov    eax,0x40
    14a0:	jmp    12fa <main+0x5a>
    14a5:	mov    edx,DWORD PTR [rip+0x107b9]        # 11c64 <spec_fd+0x4>
    14ab:	xor    eax,eax
    14ad:	mov    edi,0x1
    14b2:	lea    rsi,[rip+0xbe8f]        # d348 <_IO_stdin_used+0x348>
    14b9:	call   1220 <__printf_chk@plt>
    14be:	test   r14d,r14d
    14c1:	jg     144a <main+0x1aa>
    14c3:	cmp    DWORD PTR [rip+0xfb46],0x3        # 11010 <dbglvl>
    14ca:	jle    14d8 <main+0x238>
    14cc:	lea    rdi,[rip+0xbec5]        # d398 <_IO_stdin_used+0x398>
    14d3:	call   1190 <puts@plt>
    14d8:	movsxd rdx,DWORD PTR [rip+0x1079d]        # 11c7c <spec_fd+0x1c>
    14df:	mov    rdi,QWORD PTR [rip+0x107a2]        # 11c88 <spec_fd+0x28>
    14e6:	xor    esi,esi
    14e8:	add    ebp,0x2
    14eb:	call   11b0 <memset@plt>
    14f0:	mov    QWORD PTR [rip+0x10781],0x0        # 11c7c <spec_fd+0x1c>
    14fb:	mov    DWORD PTR [rip+0x10763],0x0        # 11c68 <spec_fd+0x8>
    1505:	cmp    ebp,0xb
    1508:	jne    13bf <main+0x11f>
    150e:	mov    edx,r12d
    1511:	lea    rsi,[rip+0xbc4e]        # d166 <_IO_stdin_used+0x166>
    1518:	mov    edi,0x1
    151d:	xor    eax,eax
    151f:	call   1220 <__printf_chk@plt>
    1524:	pop    rbx
    1525:	xor    eax,eax
    1527:	pop    rbp
    1528:	pop    r12
    152a:	pop    r13
    152c:	pop    r14
    152e:	ret    
    152f:	lea    rbp,[rip+0xbbdd]        # d113 <_IO_stdin_used+0x113>
    1536:	mov    r12d,0x40
    153c:	mov    eax,0x40
    1541:	jmp    12fa <main+0x5a>
    1546:	lea    rdi,[rip+0xbc06]        # d153 <_IO_stdin_used+0x153>
    154d:	call   1190 <puts@plt>
    1552:	jmp    1422 <main+0x182>
    1557:	mov    edx,DWORD PTR [rip+0x1071f]        # 11c7c <spec_fd+0x1c>
    155d:	lea    rsi,[rip+0xbdbc]        # d320 <_IO_stdin_used+0x320>
    1564:	mov    edi,0x1
    1569:	xor    eax,eax
    156b:	call   1220 <__printf_chk@plt>
    1570:	jmp    13eb <main+0x14b>
    1575:	mov    edx,ebp
    1577:	mov    rsi,r13
    157a:	mov    edi,0x1
    157f:	xor    eax,eax
    1581:	call   1220 <__printf_chk@plt>
    1586:	jmp    13cc <main+0x12c>
    158b:	mov    edx,DWORD PTR [rip+0x106d3]        # 11c64 <spec_fd+0x4>
    1591:	lea    rsi,[rip+0xbd40]        # d2d8 <_IO_stdin_used+0x2d8>
    1598:	mov    edi,0x1
    159d:	xor    eax,eax
    159f:	call   1220 <__printf_chk@plt>
    15a4:	jmp    1346 <main+0xa6>
    15a9:	lea    rdi,[rip+0xbb72]        # d122 <_IO_stdin_used+0x122>
    15b0:	call   1190 <puts@plt>
    15b5:	jmp    132c <main+0x8c>
    15ba:	lea    rdi,[rip+0xbb74]        # d135 <_IO_stdin_used+0x135>
    15c1:	call   1190 <puts@plt>
    15c6:	xor    edi,edi
    15c8:	call   1250 <exit@plt>
    15cd:	nop    DWORD PTR [rax]

00000000000015d0 <_start>:
    15d0:	endbr64 
    15d4:	xor    ebp,ebp
    15d6:	mov    r9,rdx
    15d9:	pop    rsi
    15da:	mov    rdx,rsp
    15dd:	and    rsp,0xfffffffffffffff0
    15e1:	push   rax
    15e2:	push   rsp
    15e3:	lea    r8,[rip+0xb476]        # ca60 <__libc_csu_fini>
    15ea:	lea    rcx,[rip+0xb3ff]        # c9f0 <__libc_csu_init>
    15f1:	lea    rdi,[rip+0xfffffffffffffca8]        # 12a0 <main>
    15f8:	call   QWORD PTR [rip+0xf9ca]        # 10fc8 <__libc_start_main@GLIBC_2.2.5>
    15fe:	hlt    
    15ff:	nop

0000000000001600 <deregister_tm_clones>:
    1600:	lea    rdi,[rip+0x10619]        # 11c20 <stderr@@GLIBC_2.2.5>
    1607:	lea    rax,[rip+0x10612]        # 11c20 <stderr@@GLIBC_2.2.5>
    160e:	cmp    rax,rdi
    1611:	je     1628 <deregister_tm_clones+0x28>
    1613:	mov    rax,QWORD PTR [rip+0xf9a6]        # 10fc0 <_ITM_deregisterTMCloneTable>
    161a:	test   rax,rax
    161d:	je     1628 <deregister_tm_clones+0x28>
    161f:	jmp    rax
    1621:	nop    DWORD PTR [rax+0x0]
    1628:	ret    
    1629:	nop    DWORD PTR [rax+0x0]

0000000000001630 <register_tm_clones>:
    1630:	lea    rdi,[rip+0x105e9]        # 11c20 <stderr@@GLIBC_2.2.5>
    1637:	lea    rsi,[rip+0x105e2]        # 11c20 <stderr@@GLIBC_2.2.5>
    163e:	sub    rsi,rdi
    1641:	mov    rax,rsi
    1644:	shr    rsi,0x3f
    1648:	sar    rax,0x3
    164c:	add    rsi,rax
    164f:	sar    rsi,1
    1652:	je     1668 <register_tm_clones+0x38>
    1654:	mov    rax,QWORD PTR [rip+0xf97d]        # 10fd8 <_ITM_registerTMCloneTable>
    165b:	test   rax,rax
    165e:	je     1668 <register_tm_clones+0x38>
    1660:	jmp    rax
    1662:	nop    WORD PTR [rax+rax*1+0x0]
    1668:	ret    
    1669:	nop    DWORD PTR [rax+0x0]

0000000000001670 <__do_global_dtors_aux>:
    1670:	endbr64 
    1674:	cmp    BYTE PTR [rip+0x105ad],0x0        # 11c28 <completed.8061>
    167b:	jne    16a8 <__do_global_dtors_aux+0x38>
    167d:	push   rbp
    167e:	cmp    QWORD PTR [rip+0xf95a],0x0        # 10fe0 <__cxa_finalize@GLIBC_2.2.5>
    1686:	mov    rbp,rsp
    1689:	je     1697 <__do_global_dtors_aux+0x27>
    168b:	mov    rdi,QWORD PTR [rip+0xf976]        # 11008 <__dso_handle>
    1692:	call   1160 <__cxa_finalize@plt>
    1697:	call   1600 <deregister_tm_clones>
    169c:	mov    BYTE PTR [rip+0x10585],0x1        # 11c28 <completed.8061>
    16a3:	pop    rbp
    16a4:	ret    
    16a5:	nop    DWORD PTR [rax]
    16a8:	ret    
    16a9:	nop    DWORD PTR [rax+0x0]

00000000000016b0 <frame_dummy>:
    16b0:	endbr64 
    16b4:	jmp    1630 <register_tm_clones>
    16b9:	nop    DWORD PTR [rax+0x0]

00000000000016c0 <ran>:
    16c0:	endbr64 
    16c4:	mov    rcx,QWORD PTR [rip+0x10575]        # 11c40 <seedi>
    16cb:	pxor   xmm0,xmm0
    16cf:	movabs rdx,0x41a705af1fe3fb79
    16d9:	mov    rax,rcx
    16dc:	imul   rdx
    16df:	mov    rax,rcx
    16e2:	sar    rax,0x3f
    16e6:	sar    rdx,0xf
    16ea:	sub    rdx,rax
    16ed:	imul   rax,rdx,0x1f31d
    16f4:	imul   rdx,rdx,0xfffffffffffff4ec
    16fb:	sub    rcx,rax
    16fe:	imul   rax,rcx,0x41a7
    1705:	add    rax,rdx
    1708:	lea    rdx,[rax+0x7fffffff]
    170f:	test   rax,rax
    1712:	cmovle rax,rdx
    1716:	cvtsi2ss xmm0,rax
    171b:	mulss  xmm0,DWORD PTR [rip+0xbc9d]        # d3c0 <_IO_stdin_used+0x3c0>
    1723:	mov    QWORD PTR [rip+0x10516],rax        # 11c40 <seedi>
    172a:	cvtss2sd xmm0,xmm0
    172e:	ret    
    172f:	nop

0000000000001730 <spec_init>:
    1730:	endbr64 
    1734:	cmp    DWORD PTR [rip+0xf8d5],0x3        # 11010 <dbglvl>
    173b:	push   r12
    173d:	push   rbp
    173e:	push   rbx
    173f:	jg     17a8 <spec_init+0x78>
    1741:	lea    rbx,[rip+0x10518]        # 11c60 <spec_fd>
    1748:	lea    r12,[rbx+0x48]
    174c:	mov    ebp,DWORD PTR [rbx]
    174e:	pxor   xmm0,xmm0
    1752:	mov    QWORD PTR [rbx+0x10],0x0
    175a:	movups XMMWORD PTR [rbx],xmm0
    175d:	lea    edi,[rbp+0x100000]
    1763:	mov    DWORD PTR [rbx],ebp
    1765:	movsxd rdi,edi
    1768:	call   1210 <malloc@plt>
    176d:	mov    QWORD PTR [rbx+0x10],rax
    1771:	test   rax,rax
    1774:	je     17b6 <spec_init+0x86>
    1776:	xor    edx,edx
    1778:	test   ebp,ebp
    177a:	jg     1784 <spec_init+0x54>
    177c:	jmp    1793 <spec_init+0x63>
    177e:	xchg   ax,ax
    1780:	mov    rax,QWORD PTR [rbx+0x10]
    1784:	mov    BYTE PTR [rax+rdx*1],0x0
    1788:	add    rdx,0x400
    178f:	cmp    ebp,edx
    1791:	jg     1780 <spec_init+0x50>
    1793:	add    rbx,0x18
    1797:	cmp    r12,rbx
    179a:	jne    174c <spec_init+0x1c>
    179c:	pop    rbx
    179d:	xor    eax,eax
    179f:	pop    rbp
    17a0:	pop    r12
    17a2:	ret    
    17a3:	nop    DWORD PTR [rax+rax*1+0x0]
    17a8:	lea    rdi,[rip+0xb855]        # d004 <_IO_stdin_used+0x4>
    17af:	call   1190 <puts@plt>
    17b4:	jmp    1741 <spec_init+0x11>
    17b6:	lea    rdi,[rip+0xb9c3]        # d180 <_IO_stdin_used+0x180>
    17bd:	call   1190 <puts@plt>
    17c2:	xor    edi,edi
    17c4:	call   1250 <exit@plt>
    17c9:	nop    DWORD PTR [rax+0x0]

00000000000017d0 <spec_random_load>:
    17d0:	endbr64 
    17d4:	push   r15
    17d6:	push   r14
    17d8:	push   r13
    17da:	push   r12
    17dc:	push   rbp
    17dd:	push   rbx
    17de:	lea    r11,[rsp-0x400000]
    17e6:	sub    rsp,0x1000
    17ed:	or     QWORD PTR [rsp],0x0
    17f2:	cmp    rsp,r11
    17f5:	jne    17e6 <spec_random_load+0x16>
    17f7:	sub    rsp,0x18
    17fb:	mov    rax,QWORD PTR fs:0x28
    1804:	mov    QWORD PTR [rsp+0x400008],rax
    180c:	xor    eax,eax
    180e:	movsxd r15,edi
    1811:	mov    edi,DWORD PTR [rip+0xf7f9]        # 11010 <dbglvl>
    1817:	cmp    edi,0x4
    181a:	jg     1a14 <spec_random_load+0x244>
    1820:	movss  xmm1,DWORD PTR [rip+0xbb98]        # d3c0 <_IO_stdin_used+0x3c0>
    1828:	movsd  xmm2,QWORD PTR [rip+0xbb98]        # d3c8 <_IO_stdin_used+0x3c8>
    1830:	lea    rbp,[rsp+0x20000]
    1838:	xor    r13d,r13d
    183b:	movabs r12,0x41a705af1fe3fb79
    1845:	nop    DWORD PTR [rax]
    1848:	cmp    edi,0x5
    184b:	jg     19df <spec_random_load+0x20f>
    1851:	mov    rcx,QWORD PTR [rip+0x103e8]        # 11c40 <seedi>
    1858:	lea    rsi,[rbp-0x20000]
    185f:	nop
    1860:	mov    rax,rcx
    1863:	pxor   xmm0,xmm0
    1867:	imul   r12
    186a:	mov    rax,rcx
    186d:	sar    rax,0x3f
    1871:	sar    rdx,0xf
    1875:	sub    rdx,rax
    1878:	imul   rax,rdx,0x1f31d
    187f:	imul   rdx,rdx,0xfffffffffffff4ec
    1886:	sub    rcx,rax
    1889:	imul   rcx,rcx,0x41a7
    1890:	add    rcx,rdx
    1893:	lea    rax,[rcx+0x7fffffff]
    189a:	test   rcx,rcx
    189d:	cmovle rcx,rax
    18a1:	add    rsi,0x1
    18a5:	cvtsi2ss xmm0,rcx
    18aa:	mulss  xmm0,xmm1
    18ae:	cvtss2sd xmm0,xmm0
    18b2:	mulsd  xmm0,xmm2
    18b6:	cvttsd2si eax,xmm0
    18ba:	mov    BYTE PTR [rsi-0x1],al
    18bd:	cmp    rbp,rsi
    18c0:	jne    1860 <spec_random_load+0x90>
    18c2:	add    r13d,0x1
    18c6:	mov    QWORD PTR [rip+0x10373],rcx        # 11c40 <seedi>
    18cd:	add    rbp,0x20000
    18d4:	cmp    r13d,0x20
    18d8:	jne    1848 <spec_random_load+0x78>
    18de:	cmp    edi,0x4
    18e1:	jg     1a2b <spec_random_load+0x25b>
    18e7:	lea    rax,[r15+r15*2]
    18eb:	lea    rbp,[rip+0x1036e]        # 11c60 <spec_fd>
    18f2:	xor    ebx,ebx
    18f4:	mov    r13,rsp
    18f7:	movabs r12,0x41a705af1fe3fb79
    1901:	lea    r14,[rbp+rax*8+0x0]
    1906:	mov    eax,DWORD PTR [r14]
    1909:	test   eax,eax
    190b:	jle    19ac <spec_random_load+0x1dc>
    1911:	mov    rcx,QWORD PTR [rip+0x10328]        # 11c40 <seedi>
    1918:	pxor   xmm0,xmm0
    191c:	mov    rdi,QWORD PTR [r14+0x10]
    1920:	mov    rax,rcx
    1923:	imul   r12
    1926:	mov    rax,rcx
    1929:	sar    rax,0x3f
    192d:	sar    rdx,0xf
    1931:	sub    rdx,rax
    1934:	imul   rax,rdx,0x1f31d
    193b:	imul   rdx,rdx,0xfffffffffffff4ec
    1942:	sub    rcx,rax
    1945:	imul   rax,rcx,0x41a7
    194c:	add    rax,rdx
    194f:	test   rax,rax
    1952:	lea    rdx,[rax+0x7fffffff]
    1959:	cmovle rax,rdx
    195d:	add    rdi,rbx
    1960:	mov    edx,0x20000
    1965:	add    rbx,0x20000
    196c:	cvtsi2ss xmm0,rax
    1971:	mov    QWORD PTR [rip+0x102c8],rax        # 11c40 <seedi>
    1978:	mulss  xmm0,xmm1
    197c:	cvtss2sd xmm0,xmm0
    1980:	mulsd  xmm0,QWORD PTR [rip+0xba48]        # d3d0 <_IO_stdin_used+0x3d0>
    1988:	cvttsd2si esi,xmm0
    198c:	movsxd rsi,esi
    198f:	shl    rsi,0x11
    1993:	add    rsi,r13
    1996:	call   1200 <memcpy@plt>
    199b:	cmp    DWORD PTR [r14],ebx
    199e:	movss  xmm1,DWORD PTR [rip+0xba1a]        # d3c0 <_IO_stdin_used+0x3c0>
    19a6:	jg     1911 <spec_random_load+0x141>
    19ac:	lea    rax,[r15+r15*2]
    19b0:	mov    DWORD PTR [rbp+rax*8+0x4],0x100000
    19b8:	mov    rax,QWORD PTR [rsp+0x400008]
    19c0:	xor    rax,QWORD PTR fs:0x28
    19c9:	jne    1a44 <spec_random_load+0x274>
    19cb:	add    rsp,0x400018
    19d2:	xor    eax,eax
    19d4:	pop    rbx
    19d5:	pop    rbp
    19d6:	pop    r12
    19d8:	pop    r13
    19da:	pop    r14
    19dc:	pop    r15
    19de:	ret    
    19df:	mov    edi,0x1
    19e4:	mov    edx,r13d
    19e7:	lea    rsi,[rip+0xb630]        # d01e <_IO_stdin_used+0x1e>
    19ee:	xor    eax,eax
    19f0:	call   1220 <__printf_chk@plt>
    19f5:	mov    rax,QWORD PTR [rip+0xb9cc]        # d3c8 <_IO_stdin_used+0x3c8>
    19fc:	mov    edi,DWORD PTR [rip+0xf60e]        # 11010 <dbglvl>
    1a02:	movss  xmm1,DWORD PTR [rip+0xb9b6]        # d3c0 <_IO_stdin_used+0x3c0>
    1a0a:	movq   xmm2,rax
    1a0f:	jmp    1851 <spec_random_load+0x81>
    1a14:	lea    rdi,[rip+0xb5f3]        # d00e <_IO_stdin_used+0xe>
    1a1b:	call   1190 <puts@plt>
    1a20:	mov    edi,DWORD PTR [rip+0xf5ea]        # 11010 <dbglvl>
    1a26:	jmp    1820 <spec_random_load+0x50>
    1a2b:	lea    rdi,[rip+0xb5ff]        # d031 <_IO_stdin_used+0x31>
    1a32:	call   1190 <puts@plt>
    1a37:	movss  xmm1,DWORD PTR [rip+0xb981]        # d3c0 <_IO_stdin_used+0x3c0>
    1a3f:	jmp    18e7 <spec_random_load+0x117>
    1a44:	call   11a0 <__stack_chk_fail@plt>
    1a49:	nop    DWORD PTR [rax+0x0]

0000000000001a50 <spec_load>:
    1a50:	endbr64 
    1a54:	push   r15
    1a56:	xor    eax,eax
    1a58:	push   r14
    1a5a:	push   r13
    1a5c:	push   r12
    1a5e:	push   rbp
    1a5f:	mov    ebp,edx
    1a61:	push   rbx
    1a62:	movsxd rbx,edi
    1a65:	mov    rdi,rsi
    1a68:	sub    rsp,0x18
    1a6c:	mov    QWORD PTR [rsp+0x8],rsi
    1a71:	xor    esi,esi
    1a73:	call   1230 <open@plt>
    1a78:	test   eax,eax
    1a7a:	js     1b50 <spec_load+0x100>
    1a80:	mov    r13d,eax
    1a83:	lea    r12,[rip+0x101d6]        # 11c60 <spec_fd>
    1a8a:	lea    rax,[rbx+rbx*2]
    1a8e:	lea    r15,[r12+rax*8]
    1a92:	mov    QWORD PTR [r15+0x4],0x0
    1a9a:	test   ebp,ebp
    1a9c:	jle    1ad2 <spec_load+0x82>
    1a9e:	xor    r14d,r14d
    1aa1:	jmp    1aba <spec_load+0x6a>
    1aa3:	nop    DWORD PTR [rax+rax*1+0x0]
    1aa8:	js     1b88 <spec_load+0x138>
    1aae:	add    r14d,eax
    1ab1:	add    DWORD PTR [r15+0x4],eax
    1ab5:	cmp    ebp,r14d
    1ab8:	jle    1ad2 <spec_load+0x82>
    1aba:	movsxd rsi,r14d
    1abd:	mov    edx,0x20000
    1ac2:	add    rsi,QWORD PTR [r15+0x10]
    1ac6:	mov    edi,r13d
    1ac9:	call   11e0 <read@plt>
    1ace:	test   eax,eax
    1ad0:	jne    1aa8 <spec_load+0x58>
    1ad2:	lea    r14,[rbx+rbx*2]
    1ad6:	mov    edi,r13d
    1ad9:	call   11c0 <close@plt>
    1ade:	shl    r14,0x3
    1ae2:	mov    eax,DWORD PTR [r12+r14*1+0x4]
    1ae7:	cmp    ebp,eax
    1ae9:	jg     1b3a <spec_load+0xea>
    1aeb:	add    rsp,0x18
    1aef:	xor    eax,eax
    1af1:	pop    rbx
    1af2:	pop    rbp
    1af3:	pop    r12
    1af5:	pop    r13
    1af7:	pop    r14
    1af9:	pop    r15
    1afb:	ret    
    1afc:	nop    DWORD PTR [rax+0x0]
    1b00:	mov    edx,ebx
    1b02:	lea    rsi,[rip+0xb56e]        # d077 <_IO_stdin_used+0x77>
    1b09:	mov    edi,0x1
    1b0e:	xor    eax,eax
    1b10:	call   1220 <__printf_chk@plt>
    1b15:	lea    r13,[r12+r14*1]
    1b19:	movsxd rdx,ebx
    1b1c:	mov    rsi,QWORD PTR [r13+0x10]
    1b20:	movsxd rdi,DWORD PTR [r13+0x4]
    1b24:	add    rdi,rsi
    1b27:	call   1200 <memcpy@plt>
    1b2c:	mov    eax,DWORD PTR [r13+0x4]
    1b30:	add    eax,ebx
    1b32:	mov    DWORD PTR [r13+0x4],eax
    1b36:	cmp    eax,ebp
    1b38:	jge    1aeb <spec_load+0x9b>
    1b3a:	mov    ebx,ebp
    1b3c:	sub    ebx,eax
    1b3e:	cmp    ebx,eax
    1b40:	cmovg  ebx,eax
    1b43:	cmp    DWORD PTR [rip+0xf4c6],0x3        # 11010 <dbglvl>
    1b4a:	jle    1b15 <spec_load+0xc5>
    1b4c:	jmp    1b00 <spec_load+0xb0>
    1b4e:	xchg   ax,ax
    1b50:	call   1180 <__errno_location@plt>
    1b55:	mov    edi,DWORD PTR [rax]
    1b57:	call   1280 <strerror@plt>
    1b5c:	mov    rcx,QWORD PTR [rsp+0x8]
    1b61:	lea    rdx,[rip+0xb4dc]        # d044 <_IO_stdin_used+0x44>
    1b68:	mov    r8,rax
    1b6b:	mov    rdi,QWORD PTR [rip+0x100ae]        # 11c20 <stderr@@GLIBC_2.2.5>
    1b72:	mov    esi,0x1
    1b77:	xor    eax,eax
    1b79:	call   1270 <__fprintf_chk@plt>
    1b7e:	xor    edi,edi
    1b80:	call   1250 <exit@plt>
    1b85:	nop    DWORD PTR [rax]
    1b88:	call   1180 <__errno_location@plt>
    1b8d:	mov    edi,DWORD PTR [rax]
    1b8f:	call   1280 <strerror@plt>
    1b94:	mov    rcx,QWORD PTR [rsp+0x8]
    1b99:	lea    rdx,[rip+0xb4bc]        # d05c <_IO_stdin_used+0x5c>
    1ba0:	mov    r8,rax
    1ba3:	jmp    1b6b <spec_load+0x11b>
    1ba5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000001bb0 <spec_read>:
    1bb0:	endbr64 
    1bb4:	push   r13
    1bb6:	mov    r13,rsi
    1bb9:	push   r12
    1bbb:	movsxd r12,edi
    1bbe:	push   rbp
    1bbf:	push   rbx
    1bc0:	mov    ebx,edx
    1bc2:	sub    rsp,0x8
    1bc6:	cmp    DWORD PTR [rip+0xf443],0x4        # 11010 <dbglvl>
    1bcd:	jg     1c80 <spec_read+0xd0>
    1bd3:	cmp    r12d,0x3
    1bd7:	jg     1c58 <spec_read+0xa8>
    1bd9:	lea    rax,[rip+0x10080]        # 11c60 <spec_fd>
    1be0:	lea    rdx,[r12+r12*2]
    1be4:	lea    rbp,[rax+rdx*8]
    1be8:	movsxd rsi,DWORD PTR [rbp+0x8]
    1bec:	mov    eax,DWORD PTR [rbp+0x4]
    1bef:	cmp    esi,eax
    1bf1:	jge    1ca1 <spec_read+0xf1>
    1bf7:	lea    edx,[rsi+rbx*1]
    1bfa:	mov    r12d,eax
    1bfd:	mov    rdi,r13
    1c00:	sub    r12d,esi
    1c03:	cmp    eax,edx
    1c05:	cmovg  r12d,ebx
    1c09:	add    rsi,QWORD PTR [rbp+0x10]
    1c0d:	movsxd rdx,r12d
    1c10:	call   1200 <memcpy@plt>
    1c15:	add    DWORD PTR [rbp+0x8],r12d
    1c19:	cmp    DWORD PTR [rip+0xf3f0],0x4        # 11010 <dbglvl>
    1c20:	jg     1c30 <spec_read+0x80>
    1c22:	add    rsp,0x8
    1c26:	mov    eax,r12d
    1c29:	pop    rbx
    1c2a:	pop    rbp
    1c2b:	pop    r12
    1c2d:	pop    r13
    1c2f:	ret    
    1c30:	mov    edx,r12d
    1c33:	lea    rsi,[rip+0xb3f3]        # d02d <_IO_stdin_used+0x2d>
    1c3a:	mov    edi,0x1
    1c3f:	xor    eax,eax
    1c41:	call   1220 <__printf_chk@plt>
    1c46:	add    rsp,0x8
    1c4a:	mov    eax,r12d
    1c4d:	pop    rbx
    1c4e:	pop    rbp
    1c4f:	pop    r12
    1c51:	pop    r13
    1c53:	ret    
    1c54:	nop    DWORD PTR [rax+0x0]
    1c58:	mov    rdi,QWORD PTR [rip+0xffc1]        # 11c20 <stderr@@GLIBC_2.2.5>
    1c5f:	mov    ecx,r12d
    1c62:	mov    esi,0x1
    1c67:	xor    eax,eax
    1c69:	lea    rdx,[rip+0xb538]        # d1a8 <_IO_stdin_used+0x1a8>
    1c70:	call   1270 <__fprintf_chk@plt>
    1c75:	xor    edi,edi
    1c77:	call   1250 <exit@plt>
    1c7c:	nop    DWORD PTR [rax+0x0]
    1c80:	mov    r8d,edx
    1c83:	mov    rcx,rsi
    1c86:	mov    edx,r12d
    1c89:	mov    edi,0x1
    1c8e:	lea    rsi,[rip+0xb3f8]        # d08d <_IO_stdin_used+0x8d>
    1c95:	xor    eax,eax
    1c97:	call   1220 <__printf_chk@plt>
    1c9c:	jmp    1bd3 <spec_read+0x23>
    1ca1:	cmp    DWORD PTR [rip+0xf368],0x4        # 11010 <dbglvl>
    1ca8:	mov    r12d,0xffffffff
    1cae:	jle    1c22 <spec_read+0x72>
    1cb4:	lea    rdi,[rip+0xbddc]        # da97 <incs+0x557>
    1cbb:	call   1190 <puts@plt>
    1cc0:	jmp    1c22 <spec_read+0x72>
    1cc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000001cd0 <spec_fread>:
    1cd0:	endbr64 
    1cd4:	cmp    DWORD PTR [rip+0xf335],0x4        # 11010 <dbglvl>
    1cdb:	push   r14
    1cdd:	push   r13
    1cdf:	mov    r13d,esi
    1ce2:	push   r12
    1ce4:	mov    r12d,ecx
    1ce7:	push   rbp
    1ce8:	mov    rbp,rdi
    1ceb:	push   rbx
    1cec:	mov    ebx,edx
    1cee:	jg     1da0 <spec_fread+0xd0>
    1cf4:	cmp    r12d,0x3
    1cf8:	jg     1dc8 <spec_fread+0xf8>
    1cfe:	movsxd r9,r12d
    1d01:	lea    rcx,[rip+0xff58]        # 11c60 <spec_fd>
    1d08:	lea    rax,[r9+r9*2]
    1d0c:	lea    rax,[rcx+rax*8]
    1d10:	movsxd rsi,DWORD PTR [rax+0x8]
    1d14:	mov    eax,DWORD PTR [rax+0x4]
    1d17:	cmp    esi,eax
    1d19:	jge    1dec <spec_fread+0x11c>
    1d1f:	mov    r14d,r13d
    1d22:	mov    r12d,ebx
    1d25:	imul   r14d,ebx
    1d29:	lea    edx,[rsi+r14*1]
    1d2d:	cmp    eax,edx
    1d2f:	jg     1d41 <spec_fread+0x71>
    1d31:	sub    eax,esi
    1d33:	mov    r14d,r13d
    1d36:	cdq    
    1d37:	idiv   r13d
    1d3a:	imul   r14d,eax
    1d3e:	mov    r12d,eax
    1d41:	lea    rax,[r9+r9*2]
    1d45:	movsxd rdx,r12d
    1d48:	mov    rdi,rbp
    1d4b:	lea    rbx,[rcx+rax*8]
    1d4f:	add    rsi,QWORD PTR [rbx+0x10]
    1d53:	call   1200 <memcpy@plt>
    1d58:	add    DWORD PTR [rbx+0x8],r14d
    1d5c:	cmp    DWORD PTR [rip+0xf2ad],0x4        # 11010 <dbglvl>
    1d63:	jg     1d78 <spec_fread+0xa8>
    1d65:	pop    rbx
    1d66:	mov    eax,r12d
    1d69:	pop    rbp
    1d6a:	pop    r12
    1d6c:	pop    r13
    1d6e:	pop    r14
    1d70:	ret    
    1d71:	nop    DWORD PTR [rax+0x0]
    1d78:	mov    edx,r14d
    1d7b:	lea    rsi,[rip+0xb2ab]        # d02d <_IO_stdin_used+0x2d>
    1d82:	mov    edi,0x1
    1d87:	xor    eax,eax
    1d89:	call   1220 <__printf_chk@plt>
    1d8e:	pop    rbx
    1d8f:	mov    eax,r12d
    1d92:	pop    rbp
    1d93:	pop    r12
    1d95:	pop    r13
    1d97:	pop    r14
    1d99:	ret    
    1d9a:	nop    WORD PTR [rax+rax*1+0x0]
    1da0:	mov    r9d,ecx
    1da3:	mov    r8d,edx
    1da6:	mov    ecx,esi
    1da8:	mov    rdx,rdi
    1dab:	xor    eax,eax
    1dad:	lea    rsi,[rip+0xb41c]        # d1d0 <_IO_stdin_used+0x1d0>
    1db4:	mov    edi,0x1
    1db9:	call   1220 <__printf_chk@plt>
    1dbe:	cmp    r12d,0x3
    1dc2:	jle    1cfe <spec_fread+0x2e>
    1dc8:	mov    rdi,QWORD PTR [rip+0xfe51]        # 11c20 <stderr@@GLIBC_2.2.5>
    1dcf:	mov    ecx,r12d
    1dd2:	mov    esi,0x1
    1dd7:	xor    eax,eax
    1dd9:	lea    rdx,[rip+0xb418]        # d1f8 <_IO_stdin_used+0x1f8>
    1de0:	call   1270 <__fprintf_chk@plt>
    1de5:	xor    edi,edi
    1de7:	call   1250 <exit@plt>
    1dec:	cmp    DWORD PTR [rip+0xf21d],0x4        # 11010 <dbglvl>
    1df3:	mov    r12d,0xffffffff
    1df9:	jle    1d65 <spec_fread+0x95>
    1dff:	lea    rdi,[rip+0xbc91]        # da97 <incs+0x557>
    1e06:	call   1190 <puts@plt>
    1e0b:	jmp    1d65 <spec_fread+0x95>

0000000000001e10 <spec_getc>:
    1e10:	endbr64 
    1e14:	cmp    DWORD PTR [rip+0xf1f5],0x4        # 11010 <dbglvl>
    1e1b:	push   r12
    1e1d:	movsxd r12,edi
    1e20:	jg     1eb8 <spec_getc+0xa8>
    1e26:	cmp    r12d,0x3
    1e2a:	jg     1e90 <spec_getc+0x80>
    1e2c:	lea    rax,[rip+0xfe2d]        # 11c60 <spec_fd>
    1e33:	lea    rdx,[r12+r12*2]
    1e37:	mov    ecx,DWORD PTR [rip+0xf1d3]        # 11010 <dbglvl>
    1e3d:	lea    rdx,[rax+rdx*8]
    1e41:	movsxd rax,DWORD PTR [rdx+0x8]
    1e45:	cmp    eax,DWORD PTR [rdx+0x4]
    1e48:	jge    1ed3 <spec_getc+0xc3>
    1e4e:	mov    rsi,QWORD PTR [rdx+0x10]
    1e52:	lea    edi,[rax+0x1]
    1e55:	mov    DWORD PTR [rdx+0x8],edi
    1e58:	movzx  r12d,BYTE PTR [rsi+rax*1]
    1e5d:	cmp    ecx,0x4
    1e60:	jg     1e70 <spec_getc+0x60>
    1e62:	mov    eax,r12d
    1e65:	pop    r12
    1e67:	ret    
    1e68:	nop    DWORD PTR [rax+rax*1+0x0]
    1e70:	mov    edx,r12d
    1e73:	lea    rsi,[rip+0xb1b3]        # d02d <_IO_stdin_used+0x2d>
    1e7a:	mov    edi,0x1
    1e7f:	xor    eax,eax
    1e81:	call   1220 <__printf_chk@plt>
    1e86:	mov    eax,r12d
    1e89:	pop    r12
    1e8b:	ret    
    1e8c:	nop    DWORD PTR [rax+0x0]
    1e90:	mov    rdi,QWORD PTR [rip+0xfd89]        # 11c20 <stderr@@GLIBC_2.2.5>
    1e97:	mov    ecx,r12d
    1e9a:	mov    esi,0x1
    1e9f:	xor    eax,eax
    1ea1:	lea    rdx,[rip+0xb300]        # d1a8 <_IO_stdin_used+0x1a8>
    1ea8:	call   1270 <__fprintf_chk@plt>
    1ead:	xor    edi,edi
    1eaf:	call   1250 <exit@plt>
    1eb4:	nop    DWORD PTR [rax+0x0]
    1eb8:	mov    edx,r12d
    1ebb:	lea    rsi,[rip+0xb1e4]        # d0a6 <_IO_stdin_used+0xa6>
    1ec2:	mov    edi,0x1
    1ec7:	xor    eax,eax
    1ec9:	call   1220 <__printf_chk@plt>
    1ece:	jmp    1e26 <spec_getc+0x16>
    1ed3:	mov    r12d,0xffffffff
    1ed9:	cmp    ecx,0x4
    1edc:	jle    1e62 <spec_getc+0x52>
    1ede:	lea    rdi,[rip+0xbbb2]        # da97 <incs+0x557>
    1ee5:	call   1190 <puts@plt>
    1eea:	jmp    1e62 <spec_getc+0x52>
    1eef:	nop

0000000000001ef0 <spec_ungetc>:
    1ef0:	endbr64 
    1ef4:	push   r12
    1ef6:	movsxd r12,esi
    1ef9:	push   rbx
    1efa:	mov    ebx,edi
    1efc:	sub    rsp,0x8
    1f00:	cmp    DWORD PTR [rip+0xf109],0x4        # 11010 <dbglvl>
    1f07:	jg     1f98 <spec_ungetc+0xa8>
    1f0d:	mov    ecx,r12d
    1f10:	lea    rdx,[rip+0xb291]        # d1a8 <_IO_stdin_used+0x1a8>
    1f17:	cmp    r12d,0x3
    1f1b:	jg     1f77 <spec_ungetc+0x87>
    1f1d:	lea    rdx,[r12+r12*2]
    1f21:	lea    rax,[rip+0xfd38]        # 11c60 <spec_fd>
    1f28:	lea    rax,[rax+rdx*8]
    1f2c:	mov    ecx,DWORD PTR [rax+0x8]
    1f2f:	test   ecx,ecx
    1f31:	jle    1f70 <spec_ungetc+0x80>
    1f33:	sub    ecx,0x1
    1f36:	mov    rdx,QWORD PTR [rax+0x10]
    1f3a:	mov    DWORD PTR [rax+0x8],ecx
    1f3d:	movsxd rcx,ecx
    1f40:	cmp    BYTE PTR [rdx+rcx*1],bl
    1f43:	je     1fb8 <spec_ungetc+0xc8>
    1f45:	mov    rcx,QWORD PTR [rip+0xfcd4]        # 11c20 <stderr@@GLIBC_2.2.5>
    1f4c:	mov    edx,0x47
    1f51:	mov    esi,0x1
    1f56:	lea    rdi,[rip+0xb2c3]        # d220 <_IO_stdin_used+0x220>
    1f5d:	call   1260 <fwrite@plt>
    1f62:	xor    edi,edi
    1f64:	call   1250 <exit@plt>
    1f69:	nop    DWORD PTR [rax+0x0]
    1f70:	lea    rdx,[rip+0xb153]        # d0ca <_IO_stdin_used+0xca>
    1f77:	mov    rdi,QWORD PTR [rip+0xfca2]        # 11c20 <stderr@@GLIBC_2.2.5>
    1f7e:	mov    esi,0x1
    1f83:	xor    eax,eax
    1f85:	call   1270 <__fprintf_chk@plt>
    1f8a:	xor    edi,edi
    1f8c:	call   1250 <exit@plt>
    1f91:	nop    DWORD PTR [rax+0x0]
    1f98:	mov    edx,r12d
    1f9b:	lea    rsi,[rip+0xb115]        # d0b7 <_IO_stdin_used+0xb7>
    1fa2:	mov    edi,0x1
    1fa7:	xor    eax,eax
    1fa9:	call   1220 <__printf_chk@plt>
    1fae:	jmp    1f0d <spec_ungetc+0x1d>
    1fb3:	nop    DWORD PTR [rax+rax*1+0x0]
    1fb8:	cmp    DWORD PTR [rip+0xf051],0x4        # 11010 <dbglvl>
    1fbf:	jg     1fd0 <spec_ungetc+0xe0>
    1fc1:	add    rsp,0x8
    1fc5:	movzx  eax,bl
    1fc8:	pop    rbx
    1fc9:	pop    r12
    1fcb:	ret    
    1fcc:	nop    DWORD PTR [rax+0x0]
    1fd0:	xor    edx,edx
    1fd2:	lea    rsi,[rip+0xb054]        # d02d <_IO_stdin_used+0x2d>
    1fd9:	mov    edi,0x1
    1fde:	xor    eax,eax
    1fe0:	call   1220 <__printf_chk@plt>
    1fe5:	jmp    1fc1 <spec_ungetc+0xd1>
    1fe7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000001ff0 <spec_rewind>:
    1ff0:	endbr64 
    1ff4:	movsxd rdi,edi
    1ff7:	lea    rax,[rip+0xfc62]        # 11c60 <spec_fd>
    1ffe:	lea    rdx,[rdi+rdi*2]
    2002:	mov    DWORD PTR [rax+rdx*8+0x8],0x0
    200a:	xor    eax,eax
    200c:	ret    
    200d:	nop    DWORD PTR [rax]

0000000000002010 <spec_reset>:
    2010:	endbr64 
    2014:	movsxd rdi,edi
    2017:	lea    rax,[rip+0xfc42]        # 11c60 <spec_fd>
    201e:	push   rbx
    201f:	xor    esi,esi
    2021:	lea    rdx,[rdi+rdi*2]
    2025:	lea    rbx,[rax+rdx*8]
    2029:	movsxd rdx,DWORD PTR [rbx+0x4]
    202d:	mov    rdi,QWORD PTR [rbx+0x10]
    2031:	call   11b0 <memset@plt>
    2036:	mov    QWORD PTR [rbx+0x4],0x0
    203e:	xor    eax,eax
    2040:	pop    rbx
    2041:	ret    
    2042:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    204d:	nop    DWORD PTR [rax]

0000000000002050 <spec_write>:
    2050:	endbr64 
    2054:	cmp    DWORD PTR [rip+0xefb5],0x4        # 11010 <dbglvl>
    205b:	push   r13
    205d:	mov    r13d,edx
    2060:	push   r12
    2062:	movsxd r12,edi
    2065:	push   rbp
    2066:	mov    rbp,rsi
    2069:	jg     20e0 <spec_write+0x90>
    206b:	cmp    r12d,0x3
    206f:	jle    2098 <spec_write+0x48>
    2071:	mov    rdi,QWORD PTR [rip+0xfba8]        # 11c20 <stderr@@GLIBC_2.2.5>
    2078:	mov    ecx,r12d
    207b:	mov    esi,0x1
    2080:	xor    eax,eax
    2082:	lea    rdx,[rip+0xb1df]        # d268 <_IO_stdin_used+0x268>
    2089:	call   1270 <__fprintf_chk@plt>
    208e:	xor    edi,edi
    2090:	call   1250 <exit@plt>
    2095:	nop    DWORD PTR [rax]
    2098:	lea    rdx,[r12+r12*2]
    209c:	lea    rax,[rip+0xfbbd]        # 11c60 <spec_fd>
    20a3:	mov    rsi,rbp
    20a6:	lea    r12,[rax+rdx*8]
    20aa:	movsxd rdx,r13d
    20ad:	movsxd rdi,DWORD PTR [r12+0x8]
    20b2:	add    rdi,QWORD PTR [r12+0x10]
    20b7:	call   1200 <memcpy@plt>
    20bc:	add    DWORD PTR [r12+0x4],r13d
    20c1:	add    DWORD PTR [r12+0x8],r13d
    20c6:	cmp    DWORD PTR [rip+0xef43],0x4        # 11010 <dbglvl>
    20cd:	jg     2108 <spec_write+0xb8>
    20cf:	mov    eax,r13d
    20d2:	pop    rbp
    20d3:	pop    r12
    20d5:	pop    r13
    20d7:	ret    
    20d8:	nop    DWORD PTR [rax+rax*1+0x0]
    20e0:	mov    r8d,edx
    20e3:	mov    rcx,rsi
    20e6:	mov    edx,r12d
    20e9:	mov    edi,0x1
    20ee:	lea    rsi,[rip+0xafef]        # d0e4 <_IO_stdin_used+0xe4>
    20f5:	xor    eax,eax
    20f7:	call   1220 <__printf_chk@plt>
    20fc:	jmp    206b <spec_write+0x1b>
    2101:	nop    DWORD PTR [rax+0x0]
    2108:	mov    edx,r13d
    210b:	lea    rsi,[rip+0xaf1b]        # d02d <_IO_stdin_used+0x2d>
    2112:	mov    edi,0x1
    2117:	xor    eax,eax
    2119:	call   1220 <__printf_chk@plt>
    211e:	mov    eax,r13d
    2121:	pop    rbp
    2122:	pop    r12
    2124:	pop    r13
    2126:	ret    
    2127:	nop    WORD PTR [rax+rax*1+0x0]

0000000000002130 <spec_fwrite>:
    2130:	endbr64 
    2134:	push   r13
    2136:	mov    r13d,edx
    2139:	push   r12
    213b:	movsxd r12,ecx
    213e:	push   rbp
    213f:	mov    rbp,rdi
    2142:	push   rbx
    2143:	mov    ebx,esi
    2145:	sub    rsp,0x8
    2149:	cmp    DWORD PTR [rip+0xeec0],0x4        # 11010 <dbglvl>
    2150:	jg     21d0 <spec_fwrite+0xa0>
    2152:	cmp    r12d,0x3
    2156:	jle    2180 <spec_fwrite+0x50>
    2158:	mov    rdi,QWORD PTR [rip+0xfac1]        # 11c20 <stderr@@GLIBC_2.2.5>
    215f:	mov    ecx,r12d
    2162:	mov    esi,0x1
    2167:	xor    eax,eax
    2169:	lea    rdx,[rip+0xb140]        # d2b0 <_IO_stdin_used+0x2b0>
    2170:	call   1270 <__fprintf_chk@plt>
    2175:	xor    edi,edi
    2177:	call   1250 <exit@plt>
    217c:	nop    DWORD PTR [rax+0x0]
    2180:	imul   ebx,r13d
    2184:	lea    rdx,[r12+r12*2]
    2188:	mov    rsi,rbp
    218b:	lea    rax,[rip+0xface]        # 11c60 <spec_fd>
    2192:	lea    r12,[rax+rdx*8]
    2196:	movsxd rdi,DWORD PTR [r12+0x8]
    219b:	movsxd rdx,ebx
    219e:	add    rdi,QWORD PTR [r12+0x10]
    21a3:	call   1200 <memcpy@plt>
    21a8:	add    DWORD PTR [r12+0x4],ebx
    21ad:	add    DWORD PTR [r12+0x8],ebx
    21b2:	cmp    DWORD PTR [rip+0xee57],0x4        # 11010 <dbglvl>
    21b9:	jg     21f8 <spec_fwrite+0xc8>
    21bb:	add    rsp,0x8
    21bf:	mov    eax,r13d
    21c2:	pop    rbx
    21c3:	pop    rbp
    21c4:	pop    r12
    21c6:	pop    r13
    21c8:	ret    
    21c9:	nop    DWORD PTR [rax+0x0]
    21d0:	mov    r8d,edx
    21d3:	mov    ecx,esi
    21d5:	mov    rdx,rdi
    21d8:	mov    r9d,r12d
    21db:	lea    rsi,[rip+0xb0ae]        # d290 <_IO_stdin_used+0x290>
    21e2:	mov    edi,0x1
    21e7:	xor    eax,eax
    21e9:	call   1220 <__printf_chk@plt>
    21ee:	jmp    2152 <spec_fwrite+0x22>
    21f3:	nop    DWORD PTR [rax+rax*1+0x0]
    21f8:	mov    edx,r13d
    21fb:	lea    rsi,[rip+0xae2b]        # d02d <_IO_stdin_used+0x2d>
    2202:	mov    edi,0x1
    2207:	xor    eax,eax
    2209:	call   1220 <__printf_chk@plt>
    220e:	add    rsp,0x8
    2212:	mov    eax,r13d
    2215:	pop    rbx
    2216:	pop    rbp
    2217:	pop    r12
    2219:	pop    r13
    221b:	ret    
    221c:	nop    DWORD PTR [rax+0x0]

0000000000002220 <spec_putc>:
    2220:	endbr64 
    2224:	push   r12
    2226:	movsxd r12,esi
    2229:	push   rbx
    222a:	mov    ebx,edi
    222c:	sub    rsp,0x8
    2230:	cmp    DWORD PTR [rip+0xedd9],0x4        # 11010 <dbglvl>
    2237:	jg     2270 <spec_putc+0x50>
    2239:	cmp    r12d,0x3
    223d:	jg     2290 <spec_putc+0x70>
    223f:	lea    rdx,[r12+r12*2]
    2243:	lea    rax,[rip+0xfa16]        # 11c60 <spec_fd>
    224a:	lea    rax,[rax+rdx*8]
    224e:	movsxd rdx,DWORD PTR [rax+0x8]
    2252:	mov    rcx,QWORD PTR [rax+0x10]
    2256:	lea    esi,[rdx+0x1]
    2259:	mov    DWORD PTR [rax+0x8],esi
    225c:	mov    BYTE PTR [rcx+rdx*1],bl
    225f:	add    DWORD PTR [rax+0x4],0x1
    2263:	add    rsp,0x8
    2267:	movzx  eax,bl
    226a:	pop    rbx
    226b:	pop    r12
    226d:	ret    
    226e:	xchg   ax,ax
    2270:	movzx  edx,dil
    2274:	xor    eax,eax
    2276:	mov    ecx,r12d
    2279:	mov    edi,0x1
    227e:	lea    rsi,[rip+0xae79]        # d0fe <_IO_stdin_used+0xfe>
    2285:	call   1220 <__printf_chk@plt>
    228a:	cmp    r12d,0x3
    228e:	jle    223f <spec_putc+0x1f>
    2290:	mov    rdi,QWORD PTR [rip+0xf989]        # 11c20 <stderr@@GLIBC_2.2.5>
    2297:	mov    ecx,r12d
    229a:	mov    esi,0x1
    229f:	xor    eax,eax
    22a1:	lea    rdx,[rip+0xafc0]        # d268 <_IO_stdin_used+0x268>
    22a8:	call   1270 <__fprintf_chk@plt>
    22ad:	xor    edi,edi
    22af:	call   1250 <exit@plt>
    22b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    22bf:	nop

00000000000022c0 <spec_initbufs>:
    22c0:	endbr64 
    22c4:	mov    BYTE PTR [rip+0x10229],0x0        # 124f4 <smallMode>
    22cb:	mov    DWORD PTR [rip+0xfdf7],0x0        # 120cc <verbosity>
    22d5:	mov    DWORD PTR [rip+0x1022d],0x9        # 1250c <blockSize100k>
    22df:	mov    DWORD PTR [rip+0x10203],0x1e        # 124ec <workFactor>
    22e9:	ret    
    22ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000000022f0 <spec_compress>:
    22f0:	endbr64 
    22f4:	mov    DWORD PTR [rip+0x10212],edx        # 1250c <blockSize100k>
    22fa:	jmp    4480 <compressStream>
    22ff:	nop

0000000000002300 <spec_uncompress>:
    2300:	endbr64 
    2304:	mov    DWORD PTR [rip+0x101fe],0x0        # 1250c <blockSize100k>
    230e:	jmp    47c0 <uncompressStream>
    2313:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    231e:	xchg   ax,ax

0000000000002320 <debug_time>:
    2320:	endbr64 
    2324:	xor    eax,eax
    2326:	ret    
    2327:	nop    WORD PTR [rax+rax*1+0x0]

0000000000002330 <fallbackSort>:
    2330:	push   r15
    2332:	push   r14
    2334:	mov    r14,rdi
    2337:	push   r13
    2339:	mov    r13,rdx
    233c:	push   r12
    233e:	mov    r12,rsi
    2341:	push   rbp
    2342:	push   rbx
    2343:	sub    rsp,0xb88
    234a:	mov    DWORD PTR [rsp+0x18],ecx
    234e:	mov    DWORD PTR [rsp+0x40],r8d
    2353:	mov    rbx,QWORD PTR fs:0x28
    235c:	mov    QWORD PTR [rsp+0xb78],rbx
    2364:	xor    ebx,ebx
    2366:	cmp    r8d,0x3
    236a:	jg     2cfa <fallbackSort+0x9ca>
    2370:	lea    rcx,[rsp+0x770]
    2378:	lea    rsi,[rsp+0xb74]
    2380:	mov    rdx,rcx
    2383:	mov    rax,rcx
    2386:	nop    WORD PTR cs:[rax+rax*1+0x0]
    2390:	mov    DWORD PTR [rax],0x0
    2396:	add    rax,0x4
    239a:	cmp    rsi,rax
    239d:	jne    2390 <fallbackSort+0x60>
    239f:	mov    edi,DWORD PTR [rsp+0x18]
    23a3:	test   edi,edi
    23a5:	jle    23d4 <fallbackSort+0xa4>
    23a7:	mov    ebx,DWORD PTR [rsp+0x18]
    23ab:	mov    rax,r12
    23ae:	lea    edi,[rbx-0x1]
    23b1:	lea    r8,[r12+rdi*1+0x1]
    23b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    23c0:	movzx  edi,BYTE PTR [rax]
    23c3:	add    rax,0x1
    23c7:	add    DWORD PTR [rsp+rdi*4+0x770],0x1
    23cf:	cmp    r8,rax
    23d2:	jne    23c0 <fallbackSort+0x90>
    23d4:	lea    r8,[rsp+0x370]
    23dc:	xor    eax,eax
    23de:	mov    QWORD PTR [rsp+0x48],r8
    23e3:	nop    DWORD PTR [rax+rax*1+0x0]
    23e8:	mov    edi,DWORD PTR [rcx+rax*1]
    23eb:	mov    DWORD PTR [r8+rax*1],edi
    23ef:	add    rax,0x4
    23f3:	cmp    rax,0x400
    23f9:	jne    23e8 <fallbackSort+0xb8>
    23fb:	lea    rax,[rsp+0x774]
    2403:	nop    DWORD PTR [rax+rax*1+0x0]
    2408:	mov    edi,DWORD PTR [rax-0x4]
    240b:	add    DWORD PTR [rax],edi
    240d:	add    rax,0x4
    2411:	cmp    rsi,rax
    2414:	jne    2408 <fallbackSort+0xd8>
    2416:	mov    eax,DWORD PTR [rsp+0x18]
    241a:	test   eax,eax
    241c:	lea    r8d,[rax+0x1f]
    2420:	cmovns r8d,eax
    2424:	sar    r8d,0x5
    2428:	add    r8d,0x2
    242c:	test   eax,eax
    242e:	jle    2d6c <fallbackSort+0xa3c>
    2434:	lea    r9d,[rax-0x1]
    2438:	xor    esi,esi
    243a:	nop    WORD PTR [rax+rax*1+0x0]
    2440:	movzx  edi,BYTE PTR [r12+rsi*1]
    2445:	mov    eax,DWORD PTR [rsp+rdi*4+0x770]
    244c:	sub    eax,0x1
    244f:	mov    DWORD PTR [rsp+rdi*4+0x770],eax
    2456:	cdqe   
    2458:	mov    DWORD PTR [r14+rax*4],esi
    245c:	mov    rax,rsi
    245f:	add    rsi,0x1
    2463:	cmp    r9,rax
    2466:	jne    2440 <fallbackSort+0x110>
    2468:	xor    eax,eax
    246a:	nop    WORD PTR [rax+rax*1+0x0]
    2470:	mov    DWORD PTR [r13+rax*4+0x0],0x0
    2479:	add    rax,0x1
    247d:	cmp    r8d,eax
    2480:	jg     2470 <fallbackSort+0x140>
    2482:	lea    rdi,[rcx+0x400]
    2489:	mov    esi,0x1
    248e:	xchg   ax,ax
    2490:	mov    ecx,DWORD PTR [rdx]
    2492:	mov    ebx,esi
    2494:	add    rdx,0x4
    2498:	mov    eax,ecx
    249a:	shl    ebx,cl
    249c:	sar    eax,0x5
    249f:	cdqe   
    24a1:	or     DWORD PTR [r13+rax*4+0x0],ebx
    24a6:	cmp    rdi,rdx
    24a9:	jne    2490 <fallbackSort+0x160>
    24ab:	mov    eax,DWORD PTR [rsp+0x18]
    24af:	mov    esi,0x1
    24b4:	lea    edi,[rax+0x40]
    24b7:	nop    WORD PTR [rax+rax*1+0x0]
    24c0:	mov    edx,eax
    24c2:	mov    ecx,eax
    24c4:	mov    ebx,esi
    24c6:	sar    edx,0x5
    24c9:	shl    ebx,cl
    24cb:	lea    ecx,[rax+0x1]
    24ce:	add    eax,0x2
    24d1:	movsxd rdx,edx
    24d4:	or     DWORD PTR [r13+rdx*4+0x0],ebx
    24d9:	mov    edx,ecx
    24db:	mov    ebx,esi
    24dd:	sar    edx,0x5
    24e0:	shl    ebx,cl
    24e2:	movsxd rdx,edx
    24e5:	mov    ecx,ebx
    24e7:	not    ecx
    24e9:	and    DWORD PTR [r13+rdx*4+0x0],ecx
    24ee:	cmp    edi,eax
    24f0:	jne    24c0 <fallbackSort+0x190>
    24f2:	mov    eax,DWORD PTR [rsp+0x18]
    24f6:	mov    DWORD PTR [rsp+0x34],0x1
    24fe:	mov    r15,r14
    2501:	mov    r14,r13
    2504:	mov    r13,r12
    2507:	sub    eax,0x1
    250a:	mov    DWORD PTR [rsp+0x44],eax
    250e:	xchg   ax,ax
    2510:	cmp    DWORD PTR [rsp+0x40],0x3
    2515:	jg     2cbf <fallbackSort+0x98f>
    251b:	mov    ecx,DWORD PTR [rsp+0x18]
    251f:	test   ecx,ecx
    2521:	jle    2576 <fallbackSort+0x246>
    2523:	mov    edi,DWORD PTR [rsp+0x44]
    2527:	mov    r9d,DWORD PTR [rsp+0x34]
    252c:	xor    ecx,ecx
    252e:	xor    edx,edx
    2530:	mov    r10d,DWORD PTR [rsp+0x18]
    2535:	mov    esi,0x1
    253a:	jmp    2543 <fallbackSort+0x213>
    253c:	nop    DWORD PTR [rax+0x0]
    2540:	mov    rcx,rax
    2543:	mov    eax,ecx
    2545:	mov    r8d,esi
    2548:	sar    eax,0x5
    254b:	shl    r8d,cl
    254e:	cdqe   
    2550:	test   DWORD PTR [r14+rax*4],r8d
    2554:	mov    eax,DWORD PTR [r15+rcx*4]
    2558:	cmovne edx,ecx
    255b:	sub    eax,r9d
    255e:	lea    r8d,[rax+r10*1]
    2562:	cmovs  eax,r8d
    2566:	cdqe   
    2568:	mov    DWORD PTR [r13+rax*4+0x0],edx
    256d:	lea    rax,[rcx+0x1]
    2571:	cmp    rdi,rcx
    2574:	jne    2540 <fallbackSort+0x210>
    2576:	mov    DWORD PTR [rsp+0x30],0x0
    257e:	mov    r12,r14
    2581:	mov    ebp,0x1
    2586:	mov    r14,r15
    2589:	mov    DWORD PTR [rsp+0x10],0xffffffff
    2591:	nop    DWORD PTR [rax+0x0]
    2598:	mov    eax,DWORD PTR [rsp+0x10]
    259c:	mov    ebx,ebp
    259e:	add    eax,0x1
    25a1:	mov    edx,eax
    25a3:	mov    ecx,eax
    25a5:	mov    esi,eax
    25a7:	sar    edx,0x5
    25aa:	shl    ebx,cl
    25ac:	and    esi,0x1f
    25af:	movsxd rdx,edx
    25b2:	mov    edx,DWORD PTR [r12+rdx*4]
    25b6:	test   ebx,edx
    25b8:	je     2ca1 <fallbackSort+0x971>
    25be:	test   esi,esi
    25c0:	je     279f <fallbackSort+0x46f>
    25c6:	mov    ecx,eax
    25c8:	jmp    25d8 <fallbackSort+0x2a8>
    25ca:	nop    WORD PTR [rax+rax*1+0x0]
    25d0:	test   esi,esi
    25d2:	je     2b48 <fallbackSort+0x818>
    25d8:	mov    edi,ecx
    25da:	add    ecx,0x1
    25dd:	mov    eax,ecx
    25df:	mov    esi,ecx
    25e1:	sar    eax,0x5
    25e4:	and    esi,0x1f
    25e7:	cdqe   
    25e9:	mov    edx,DWORD PTR [r12+rax*4]
    25ed:	mov    eax,ebp
    25ef:	shl    eax,cl
    25f1:	test   eax,edx
    25f3:	jne    25d0 <fallbackSort+0x2a0>
    25f5:	mov    DWORD PTR [rsp+0x1c],edi
    25f9:	mov    eax,ecx
    25fb:	mov    edi,DWORD PTR [rsp+0x1c]
    25ff:	cmp    DWORD PTR [rsp+0x18],edi
    2603:	jle    27e8 <fallbackSort+0x4b8>
    2609:	mov    ecx,eax
    260b:	test   al,0x1f
    260d:	jne    2620 <fallbackSort+0x2f0>
    260f:	jmp    2cae <fallbackSort+0x97e>
    2614:	nop    DWORD PTR [rax+0x0]
    2618:	test   edi,edi
    261a:	je     28e7 <fallbackSort+0x5b7>
    2620:	mov    r8d,ecx
    2623:	add    ecx,0x1
    2626:	mov    esi,ebp
    2628:	mov    edx,ecx
    262a:	mov    edi,ecx
    262c:	shl    esi,cl
    262e:	sar    edx,0x5
    2631:	and    edi,0x1f
    2634:	movsxd rdx,edx
    2637:	mov    edx,DWORD PTR [r12+rdx*4]
    263b:	test   esi,edx
    263d:	je     2618 <fallbackSort+0x2e8>
    263f:	mov    DWORD PTR [rsp+0x10],r8d
    2644:	mov    edi,DWORD PTR [rsp+0x10]
    2648:	cmp    DWORD PTR [rsp+0x18],edi
    264c:	jle    27e8 <fallbackSort+0x4b8>
    2652:	cmp    ecx,eax
    2654:	jle    2598 <fallbackSort+0x268>
    265a:	sub    ecx,eax
    265c:	mov    eax,DWORD PTR [rsp+0x30]
    2660:	mov    DWORD PTR [rsp+0x1e0],edi
    2667:	mov    r15d,edi
    266a:	mov    DWORD PTR [rsp+0x24],0x0
    2672:	lea    eax,[rax+rcx*1+0x1]
    2676:	mov    DWORD PTR [rsp+0xc],0x1
    267e:	mov    DWORD PTR [rsp+0x30],eax
    2682:	mov    eax,DWORD PTR [rsp+0x1c]
    2686:	mov    QWORD PTR [rsp+0x38],r12
    268b:	mov    DWORD PTR [rsp+0x50],eax
    268f:	mov    DWORD PTR [rsp+0x8],eax
    2693:	nop    DWORD PTR [rax+rax*1+0x0]
    2698:	mov    eax,DWORD PTR [rsp+0xc]
    269c:	sub    eax,0x1
    269f:	mov    DWORD PTR [rsp+0x14],eax
    26a3:	mov    eax,r15d
    26a6:	sub    eax,DWORD PTR [rsp+0x8]
    26aa:	cmp    eax,0x9
    26ad:	jle    29c0 <fallbackSort+0x690>
    26b3:	imul   eax,DWORD PTR [rsp+0x24],0x1dc5
    26bb:	mov    edi,0xaaaaaaab
    26c0:	add    eax,0x1
    26c3:	and    eax,0x7fff
    26c8:	mov    DWORD PTR [rsp+0x24],eax
    26cc:	mov    ebx,eax
    26ce:	imul   rax,rdi
    26d2:	shr    rax,0x21
    26d6:	lea    eax,[rax+rax*2]
    26d9:	sub    ebx,eax
    26db:	jne    2b50 <fallbackSort+0x820>
    26e1:	movsxd rax,DWORD PTR [rsp+0x8]
    26e6:	mov    eax,DWORD PTR [r14+rax*4]
    26ea:	mov    ebx,DWORD PTR [r13+rax*4+0x0]
    26ef:	mov    r12d,DWORD PTR [rsp+0x8]
    26f4:	mov    eax,r12d
    26f7:	cmp    r12d,r15d
    26fa:	jg     2943 <fallbackSort+0x613>
    2700:	movsxd rdi,r12d
    2703:	mov    r8d,r15d
    2706:	mov    ecx,r15d
    2709:	lea    r11,[r14+rdi*4]
    270d:	mov    QWORD PTR [rsp+0x28],rdi
    2712:	mov    rdi,r11
    2715:	nop    DWORD PTR [rax]
    2718:	mov    edx,DWORD PTR [rdi]
    271a:	mov    r10d,eax
    271d:	mov    rsi,rdx
    2720:	mov    edx,DWORD PTR [r13+rdx*4+0x0]
    2725:	sub    edx,ebx
    2727:	test   edx,edx
    2729:	je     2990 <fallbackSort+0x660>
    272f:	jle    29b0 <fallbackSort+0x680>
    2735:	cmp    ecx,eax
    2737:	jl     293a <fallbackSort+0x60a>
    273d:	movsxd rdx,ecx
    2740:	mov    DWORD PTR [rsp+0x20],eax
    2744:	lea    rdx,[r14+rdx*4]
    2748:	jmp    2762 <fallbackSort+0x432>
    274a:	nop    WORD PTR [rax+rax*1+0x0]
    2750:	js     2920 <fallbackSort+0x5f0>
    2756:	sub    rdx,0x4
    275a:	cmp    eax,ecx
    275c:	jg     2d7a <fallbackSort+0xa4a>
    2762:	mov    r9d,DWORD PTR [rdx]
    2765:	sub    ecx,0x1
    2768:	mov    rsi,r9
    276b:	cmp    DWORD PTR [r13+r9*4+0x0],ebx
    2770:	jne    2750 <fallbackSort+0x420>
    2772:	movsxd r9,r8d
    2775:	sub    r8d,0x1
    2779:	lea    r9,[r14+r9*4]
    277d:	mov    r10d,DWORD PTR [r9]
    2780:	mov    DWORD PTR [rdx],r10d
    2783:	mov    DWORD PTR [r9],esi
    2786:	jmp    2756 <fallbackSort+0x426>
    2788:	nop    DWORD PTR [rax+rax*1+0x0]
    2790:	add    eax,0x20
    2793:	mov    edx,eax
    2795:	sar    edx,0x5
    2798:	movsxd rdx,edx
    279b:	mov    edx,DWORD PTR [r12+rdx*4]
    279f:	cmp    edx,0xffffffff
    27a2:	je     2790 <fallbackSort+0x460>
    27a4:	mov    ebx,ebp
    27a6:	mov    ecx,eax
    27a8:	shl    ebx,cl
    27aa:	test   ebx,edx
    27ac:	je     2ce2 <fallbackSort+0x9b2>
    27b2:	mov    ecx,eax
    27b4:	nop    DWORD PTR [rax+0x0]
    27b8:	mov    esi,ecx
    27ba:	add    ecx,0x1
    27bd:	mov    edx,ebp
    27bf:	mov    eax,ecx
    27c1:	shl    edx,cl
    27c3:	sar    eax,0x5
    27c6:	cdqe   
    27c8:	test   DWORD PTR [r12+rax*4],edx
    27cc:	jne    27b8 <fallbackSort+0x488>
    27ce:	mov    DWORD PTR [rsp+0x1c],esi
    27d2:	mov    eax,ecx
    27d4:	mov    edi,DWORD PTR [rsp+0x1c]
    27d8:	cmp    DWORD PTR [rsp+0x18],edi
    27dc:	jg     2609 <fallbackSort+0x2d9>
    27e2:	nop    WORD PTR [rax+rax*1+0x0]
    27e8:	cmp    DWORD PTR [rsp+0x40],0x3
    27ed:	mov    r15,r14
    27f0:	mov    r14,r12
    27f3:	jle    2813 <fallbackSort+0x4e3>
    27f5:	mov    ecx,DWORD PTR [rsp+0x30]
    27f9:	mov    rdi,QWORD PTR [rip+0xf420]        # 11c20 <stderr@@GLIBC_2.2.5>
    2800:	lea    rdx,[rip+0xac04]        # d40b <_IO_stdin_used+0x40b>
    2807:	xor    eax,eax
    2809:	mov    esi,0x1
    280e:	call   1270 <__fprintf_chk@plt>
    2813:	shl    DWORD PTR [rsp+0x34],1
    2817:	mov    eax,DWORD PTR [rsp+0x34]
    281b:	cmp    DWORD PTR [rsp+0x18],eax
    281f:	jl     282d <fallbackSort+0x4fd>
    2821:	mov    edx,DWORD PTR [rsp+0x30]
    2825:	test   edx,edx
    2827:	jne    2510 <fallbackSort+0x1e0>
    282d:	cmp    DWORD PTR [rsp+0x40],0x3
    2832:	mov    r14,r15
    2835:	mov    r12,r13
    2838:	jg     2d4a <fallbackSort+0xa1a>
    283e:	mov    eax,DWORD PTR [rsp+0x18]
    2842:	test   eax,eax
    2844:	jle    28a8 <fallbackSort+0x578>
    2846:	mov    edx,DWORD PTR [rsp+0x370]
    284d:	mov    r8d,DWORD PTR [rsp+0x18]
    2852:	xor    esi,esi
    2854:	xor    ecx,ecx
    2856:	mov    rdi,QWORD PTR [rsp+0x48]
    285b:	nop    DWORD PTR [rax+rax*1+0x0]
    2860:	lea    eax,[rcx+0x1]
    2863:	cdqe   
    2865:	test   edx,edx
    2867:	jne    287e <fallbackSort+0x54e>
    2869:	nop    DWORD PTR [rax+0x0]
    2870:	mov    ecx,eax
    2872:	add    rax,0x1
    2876:	mov    edx,DWORD PTR [rdi+rax*4-0x4]
    287a:	test   edx,edx
    287c:	je     2870 <fallbackSort+0x540>
    287e:	movsxd rax,ecx
    2881:	sub    edx,0x1
    2884:	mov    DWORD PTR [rsp+rax*4+0x370],edx
    288b:	mov    eax,DWORD PTR [r14+rsi*4]
    288f:	add    rsi,0x1
    2893:	mov    BYTE PTR [r12+rax*1],cl
    2897:	cmp    r8d,esi
    289a:	jg     2860 <fallbackSort+0x530>
    289c:	cmp    ecx,0xff
    28a2:	jg     2d1c <fallbackSort+0x9ec>
    28a8:	mov    rax,QWORD PTR [rsp+0xb78]
    28b0:	xor    rax,QWORD PTR fs:0x28
    28b9:	jne    2d84 <fallbackSort+0xa54>
    28bf:	add    rsp,0xb88
    28c6:	pop    rbx
    28c7:	pop    rbp
    28c8:	pop    r12
    28ca:	pop    r13
    28cc:	pop    r14
    28ce:	pop    r15
    28d0:	ret    
    28d1:	nop    DWORD PTR [rax+0x0]
    28d8:	add    ecx,0x20
    28db:	mov    edx,ecx
    28dd:	sar    edx,0x5
    28e0:	movsxd rdx,edx
    28e3:	mov    edx,DWORD PTR [r12+rdx*4]
    28e7:	test   edx,edx
    28e9:	je     28d8 <fallbackSort+0x5a8>
    28eb:	mov    esi,ebp
    28ed:	shl    esi,cl
    28ef:	test   esi,edx
    28f1:	jne    2cee <fallbackSort+0x9be>
    28f7:	nop    WORD PTR [rax+rax*1+0x0]
    2900:	mov    edi,ecx
    2902:	add    ecx,0x1
    2905:	mov    esi,ebp
    2907:	mov    edx,ecx
    2909:	shl    esi,cl
    290b:	sar    edx,0x5
    290e:	movsxd rdx,edx
    2911:	test   DWORD PTR [r12+rdx*4],esi
    2915:	je     2900 <fallbackSort+0x5d0>
    2917:	mov    DWORD PTR [rsp+0x10],edi
    291b:	jmp    2644 <fallbackSort+0x314>
    2920:	mov    r9d,DWORD PTR [rdi]
    2923:	mov    DWORD PTR [rdi],esi
    2925:	add    eax,0x1
    2928:	mov    r10d,eax
    292b:	mov    DWORD PTR [rdx],r9d
    292e:	add    rdi,0x4
    2932:	cmp    eax,ecx
    2934:	jle    2718 <fallbackSort+0x3e8>
    293a:	cmp    r12d,r8d
    293d:	jle    2b70 <fallbackSort+0x840>
    2943:	mov    ebx,DWORD PTR [rsp+0x14]
    2947:	test   ebx,ebx
    2949:	je     2aba <fallbackSort+0x78a>
    294f:	mov    eax,DWORD PTR [rsp+0xc]
    2953:	mov    DWORD PTR [rsp+0xc],ebx
    2957:	sub    eax,0x2
    295a:	cdqe   
    295c:	mov    edi,DWORD PTR [rsp+rax*4+0x50]
    2960:	mov    r15d,DWORD PTR [rsp+rax*4+0x1e0]
    2968:	mov    DWORD PTR [rsp+0x8],edi
    296c:	cmp    DWORD PTR [rsp+0xc],0x63
    2971:	jle    2698 <fallbackSort+0x368>
    2977:	mov    edi,0x3ec
    297c:	call   5120 <BZ2_bz__AssertH__fail>
    2981:	jmp    2698 <fallbackSort+0x368>
    2986:	nop    WORD PTR cs:[rax+rax*1+0x0]
    2990:	movsxd rax,r12d
    2993:	add    r12d,0x1
    2997:	lea    rax,[r14+rax*4]
    299b:	mov    edx,DWORD PTR [rax]
    299d:	mov    DWORD PTR [rdi],edx
    299f:	mov    DWORD PTR [rax],esi
    29a1:	lea    eax,[r10+0x1]
    29a5:	mov    r10d,eax
    29a8:	jmp    292e <fallbackSort+0x5fe>
    29aa:	nop    WORD PTR [rax+rax*1+0x0]
    29b0:	lea    eax,[rax+0x1]
    29b3:	mov    r10d,eax
    29b6:	jmp    292e <fallbackSort+0x5fe>
    29bb:	nop    DWORD PTR [rax+rax*1+0x0]
    29c0:	cmp    DWORD PTR [rsp+0x8],r15d
    29c5:	je     2943 <fallbackSort+0x613>
    29cb:	cmp    eax,0x3
    29ce:	jle    2a42 <fallbackSort+0x712>
    29d0:	mov    ebx,DWORD PTR [rsp+0x8]
    29d4:	lea    eax,[r15-0x4]
    29d8:	cmp    eax,ebx
    29da:	jl     2a42 <fallbackSort+0x712>
    29dc:	cdqe   
    29de:	mov    r9d,r15d
    29e1:	add    ebx,0x3
    29e4:	lea    r10,[r14+rax*4]
    29e8:	nop    DWORD PTR [rax+rax*1+0x0]
    29f0:	movsxd rax,DWORD PTR [r10]
    29f3:	mov    rsi,r10
    29f6:	mov    edx,r9d
    29f9:	mov    r8d,DWORD PTR [r13+rax*4+0x0]
    29fe:	mov    r11,rax
    2a01:	cmp    r9d,r15d
    2a04:	jg     2a32 <fallbackSort+0x702>
    2a06:	movsxd rax,r9d
    2a09:	lea    rax,[r14+rax*4-0x10]
    2a0e:	jmp    2a22 <fallbackSort+0x6f2>
    2a10:	add    edx,0x4
    2a13:	mov    DWORD PTR [rax],ecx
    2a15:	lea    rax,[rsi+0x10]
    2a19:	cmp    edx,r15d
    2a1c:	jg     2b20 <fallbackSort+0x7f0>
    2a22:	mov    edi,DWORD PTR [rax+0x10]
    2a25:	mov    rsi,rax
    2a28:	mov    rcx,rdi
    2a2b:	cmp    r8d,DWORD PTR [r13+rdi*4+0x0]
    2a30:	ja     2a10 <fallbackSort+0x6e0>
    2a32:	sub    r9d,0x1
    2a36:	mov    DWORD PTR [rsi],r11d
    2a39:	sub    r10,0x4
    2a3d:	cmp    ebx,r9d
    2a40:	jne    29f0 <fallbackSort+0x6c0>
    2a42:	lea    eax,[r15-0x1]
    2a46:	cmp    eax,DWORD PTR [rsp+0x8]
    2a4a:	jl     2943 <fallbackSort+0x613>
    2a50:	cdqe   
    2a52:	mov    ebx,DWORD PTR [rsp+0x8]
    2a56:	mov    r8d,r15d
    2a59:	lea    r10,[r14+rax*4]
    2a5d:	nop    DWORD PTR [rax]
    2a60:	movsxd rax,DWORD PTR [r10]
    2a63:	mov    rsi,r10
    2a66:	mov    edx,r8d
    2a69:	mov    r9d,DWORD PTR [r13+rax*4+0x0]
    2a6e:	mov    r11,rax
    2a71:	cmp    r8d,r15d
    2a74:	jg     2a9e <fallbackSort+0x76e>
    2a76:	movsxd rax,r8d
    2a79:	lea    rax,[r14+rax*4-0x4]
    2a7e:	jmp    2a8e <fallbackSort+0x75e>
    2a80:	add    edx,0x1
    2a83:	mov    DWORD PTR [rax],ecx
    2a85:	lea    rax,[rsi+0x4]
    2a89:	cmp    edx,r15d
    2a8c:	jg     2b00 <fallbackSort+0x7d0>
    2a8e:	mov    edi,DWORD PTR [rax+0x4]
    2a91:	mov    rsi,rax
    2a94:	mov    rcx,rdi
    2a97:	cmp    r9d,DWORD PTR [r13+rdi*4+0x0]
    2a9c:	ja     2a80 <fallbackSort+0x750>
    2a9e:	sub    r8d,0x1
    2aa2:	mov    DWORD PTR [rsi],r11d
    2aa5:	sub    r10,0x4
    2aa9:	cmp    ebx,r8d
    2aac:	jne    2a60 <fallbackSort+0x730>
    2aae:	mov    ebx,DWORD PTR [rsp+0x14]
    2ab2:	test   ebx,ebx
    2ab4:	jne    294f <fallbackSort+0x61f>
    2aba:	mov    r12,QWORD PTR [rsp+0x38]
    2abf:	movsxd rcx,DWORD PTR [rsp+0x1c]
    2ac4:	mov    edx,0xffffffff
    2ac9:	mov    edi,DWORD PTR [rsp+0x10]
    2acd:	nop    DWORD PTR [rax]
    2ad0:	mov    eax,edx
    2ad2:	mov    edx,DWORD PTR [r14+rcx*4]
    2ad6:	mov    edx,DWORD PTR [r13+rdx*4+0x0]
    2adb:	cmp    edx,eax
    2add:	je     2aee <fallbackSort+0x7be>
    2adf:	mov    eax,ecx
    2ae1:	mov    esi,ebp
    2ae3:	sar    eax,0x5
    2ae6:	shl    esi,cl
    2ae8:	cdqe   
    2aea:	or     DWORD PTR [r12+rax*4],esi
    2aee:	add    rcx,0x1
    2af2:	cmp    edi,ecx
    2af4:	jge    2ad0 <fallbackSort+0x7a0>
    2af6:	jmp    2598 <fallbackSort+0x268>
    2afb:	nop    DWORD PTR [rax+rax*1+0x0]
    2b00:	movsxd rdx,edx
    2b03:	sub    r8d,0x1
    2b07:	sub    r10,0x4
    2b0b:	lea    rsi,[r14+rdx*4-0x4]
    2b10:	mov    DWORD PTR [rsi],r11d
    2b13:	cmp    ebx,r8d
    2b16:	jne    2a60 <fallbackSort+0x730>
    2b1c:	jmp    2aae <fallbackSort+0x77e>
    2b1e:	xchg   ax,ax
    2b20:	movsxd rdx,edx
    2b23:	sub    r9d,0x1
    2b27:	sub    r10,0x4
    2b2b:	lea    rsi,[r14+rdx*4-0x10]
    2b30:	mov    DWORD PTR [rsi],r11d
    2b33:	cmp    ebx,r9d
    2b36:	jne    29f0 <fallbackSort+0x6c0>
    2b3c:	jmp    2a42 <fallbackSort+0x712>
    2b41:	nop    DWORD PTR [rax+0x0]
    2b48:	mov    eax,ecx
    2b4a:	jmp    279f <fallbackSort+0x46f>
    2b4f:	nop
    2b50:	cmp    ebx,0x1
    2b53:	je     2c88 <fallbackSort+0x958>
    2b59:	movsxd rax,r15d
    2b5c:	mov    eax,DWORD PTR [r14+rax*4]
    2b60:	mov    ebx,DWORD PTR [r13+rax*4+0x0]
    2b65:	jmp    26ef <fallbackSort+0x3bf>
    2b6a:	nop    WORD PTR [rax+rax*1+0x0]
    2b70:	mov    eax,r10d
    2b73:	mov    edx,r12d
    2b76:	sub    edx,DWORD PTR [rsp+0x8]
    2b7a:	sub    eax,r12d
    2b7d:	cmp    eax,edx
    2b7f:	cmovle edx,eax
    2b82:	mov    eax,r10d
    2b85:	sub    eax,edx
    2b87:	test   edx,edx
    2b89:	jle    2bb7 <fallbackSort+0x887>
    2b8b:	mov    rbx,QWORD PTR [rsp+0x28]
    2b90:	sub    edx,0x1
    2b93:	cdqe   
    2b95:	add    rdx,rbx
    2b98:	sub    rax,rbx
    2b9b:	lea    rdx,[r14+rdx*4+0x4]
    2ba0:	mov    esi,DWORD PTR [r11]
    2ba3:	mov    edi,DWORD PTR [r11+rax*4]
    2ba7:	mov    DWORD PTR [r11],edi
    2baa:	mov    DWORD PTR [r11+rax*4],esi
    2bae:	add    r11,0x4
    2bb2:	cmp    rdx,r11
    2bb5:	jne    2ba0 <fallbackSort+0x870>
    2bb7:	mov    esi,r8d
    2bba:	mov    edi,r15d
    2bbd:	mov    edx,r15d
    2bc0:	sub    esi,ecx
    2bc2:	sub    edi,r8d
    2bc5:	cmp    edi,esi
    2bc7:	cmovg  edi,esi
    2bca:	sub    edx,edi
    2bcc:	test   edi,edi
    2bce:	jle    2c07 <fallbackSort+0x8d7>
    2bd0:	movsxd rcx,r10d
    2bd3:	sub    edi,0x1
    2bd6:	movsxd rdx,edx
    2bd9:	add    rdi,rcx
    2bdc:	lea    rax,[r14+rcx*4]
    2be0:	sub    rdx,rcx
    2be3:	lea    rdi,[r14+rdi*4+0x4]
    2be8:	nop    DWORD PTR [rax+rax*1+0x0]
    2bf0:	mov    ecx,DWORD PTR [rax]
    2bf2:	mov    r8d,DWORD PTR [rax+rdx*4+0x4]
    2bf7:	mov    DWORD PTR [rax],r8d
    2bfa:	mov    DWORD PTR [rax+rdx*4+0x4],ecx
    2bfe:	add    rax,0x4
    2c02:	cmp    rdi,rax
    2c05:	jne    2bf0 <fallbackSort+0x8c0>
    2c07:	mov    ebx,DWORD PTR [rsp+0x8]
    2c0b:	mov    edx,r15d
    2c0e:	mov    edi,DWORD PTR [rsp+0xc]
    2c12:	mov    ecx,r15d
    2c15:	sub    edx,esi
    2c17:	add    r10d,ebx
    2c1a:	add    edx,0x1
    2c1d:	add    edi,0x1
    2c20:	sub    r10d,r12d
    2c23:	sub    ecx,edx
    2c25:	lea    eax,[r10-0x1]
    2c29:	mov    esi,eax
    2c2b:	sub    esi,ebx
    2c2d:	cmp    esi,ecx
    2c2f:	jle    2c60 <fallbackSort+0x930>
    2c31:	movsxd rcx,DWORD PTR [rsp+0x14]
    2c36:	mov    DWORD PTR [rsp+0x8],edx
    2c3a:	mov    DWORD PTR [rsp+rcx*4+0x1e0],eax
    2c41:	movsxd rax,DWORD PTR [rsp+0xc]
    2c46:	mov    DWORD PTR [rsp+rax*4+0x50],edx
    2c4a:	mov    DWORD PTR [rsp+rax*4+0x1e0],r15d
    2c52:	mov    DWORD PTR [rsp+0xc],edi
    2c56:	jmp    296c <fallbackSort+0x63c>
    2c5b:	nop    DWORD PTR [rax+rax*1+0x0]
    2c60:	movsxd rcx,DWORD PTR [rsp+0x14]
    2c65:	mov    ebx,DWORD PTR [rsp+0x8]
    2c69:	mov    r15d,eax
    2c6c:	mov    DWORD PTR [rsp+rcx*4+0x50],edx
    2c70:	movsxd rdx,DWORD PTR [rsp+0xc]
    2c75:	mov    DWORD PTR [rsp+rdx*4+0x50],ebx
    2c79:	mov    DWORD PTR [rsp+rdx*4+0x1e0],eax
    2c80:	jmp    2c52 <fallbackSort+0x922>
    2c82:	nop    WORD PTR [rax+rax*1+0x0]
    2c88:	mov    eax,DWORD PTR [rsp+0x8]
    2c8c:	add    eax,r15d
    2c8f:	sar    eax,1
    2c91:	cdqe   
    2c93:	mov    eax,DWORD PTR [r14+rax*4]
    2c97:	mov    ebx,DWORD PTR [r13+rax*4+0x0]
    2c9c:	jmp    26ef <fallbackSort+0x3bf>
    2ca1:	mov    ebx,DWORD PTR [rsp+0x10]
    2ca5:	mov    DWORD PTR [rsp+0x1c],ebx
    2ca9:	jmp    25fb <fallbackSort+0x2cb>
    2cae:	mov    edx,eax
    2cb0:	sar    edx,0x5
    2cb3:	movsxd rdx,edx
    2cb6:	mov    edx,DWORD PTR [r12+rdx*4]
    2cba:	jmp    28e7 <fallbackSort+0x5b7>
    2cbf:	mov    ecx,DWORD PTR [rsp+0x34]
    2cc3:	mov    rdi,QWORD PTR [rip+0xef56]        # 11c20 <stderr@@GLIBC_2.2.5>
    2cca:	lea    rdx,[rip+0xa723]        # d3f4 <_IO_stdin_used+0x3f4>
    2cd1:	xor    eax,eax
    2cd3:	mov    esi,0x1
    2cd8:	call   1270 <__fprintf_chk@plt>
    2cdd:	jmp    251b <fallbackSort+0x1eb>
    2ce2:	lea    ebx,[rax-0x1]
    2ce5:	mov    DWORD PTR [rsp+0x1c],ebx
    2ce9:	jmp    25fb <fallbackSort+0x2cb>
    2cee:	lea    ebx,[rcx-0x1]
    2cf1:	mov    DWORD PTR [rsp+0x10],ebx
    2cf5:	jmp    2644 <fallbackSort+0x314>
    2cfa:	mov    rcx,QWORD PTR [rip+0xef1f]        # 11c20 <stderr@@GLIBC_2.2.5>
    2d01:	mov    edx,0x1b
    2d06:	mov    esi,0x1
    2d0b:	lea    rdi,[rip+0xa6c6]        # d3d8 <_IO_stdin_used+0x3d8>
    2d12:	call   1260 <fwrite@plt>
    2d17:	jmp    2370 <fallbackSort+0x40>
    2d1c:	mov    rax,QWORD PTR [rsp+0xb78]
    2d24:	xor    rax,QWORD PTR fs:0x28
    2d2d:	jne    2d84 <fallbackSort+0xa54>
    2d2f:	add    rsp,0xb88
    2d36:	mov    edi,0x3ed
    2d3b:	pop    rbx
    2d3c:	pop    rbp
    2d3d:	pop    r12
    2d3f:	pop    r13
    2d41:	pop    r14
    2d43:	pop    r15
    2d45:	jmp    5120 <BZ2_bz__AssertH__fail>
    2d4a:	mov    rcx,QWORD PTR [rip+0xeecf]        # 11c20 <stderr@@GLIBC_2.2.5>
    2d51:	mov    edx,0x21
    2d56:	mov    esi,0x1
    2d5b:	lea    rdi,[rip+0xa6c6]        # d428 <_IO_stdin_used+0x428>
    2d62:	call   1260 <fwrite@plt>
    2d67:	jmp    283e <fallbackSort+0x50e>
    2d6c:	test   r8d,r8d
    2d6f:	jle    2482 <fallbackSort+0x152>
    2d75:	jmp    2468 <fallbackSort+0x138>
    2d7a:	mov    r10d,DWORD PTR [rsp+0x20]
    2d7f:	jmp    293a <fallbackSort+0x60a>
    2d84:	call   11a0 <__stack_chk_fail@plt>
    2d89:	nop    DWORD PTR [rax+0x0]

0000000000002d90 <mainGtU>:
    2d90:	mov    eax,esi
    2d92:	mov    r10d,edi
    2d95:	movzx  eax,BYTE PTR [rdx+rax*1]
    2d99:	cmp    BYTE PTR [rdx+r10*1],al
    2d9d:	jne    2db1 <mainGtU+0x21>
    2d9f:	lea    r10d,[rsi+0x1]
    2da3:	lea    eax,[rdi+0x1]
    2da6:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2dab:	cmp    BYTE PTR [rdx+rax*1],r11b
    2daf:	je     2db8 <mainGtU+0x28>
    2db1:	seta   al
    2db4:	ret    
    2db5:	nop    DWORD PTR [rax]
    2db8:	lea    r10d,[rsi+0x2]
    2dbc:	lea    eax,[rdi+0x2]
    2dbf:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2dc4:	cmp    BYTE PTR [rdx+rax*1],r11b
    2dc8:	jne    2db1 <mainGtU+0x21>
    2dca:	lea    r10d,[rsi+0x3]
    2dce:	lea    eax,[rdi+0x3]
    2dd1:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2dd6:	cmp    BYTE PTR [rdx+rax*1],r11b
    2dda:	jne    2db1 <mainGtU+0x21>
    2ddc:	lea    r10d,[rsi+0x4]
    2de0:	lea    eax,[rdi+0x4]
    2de3:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2de8:	cmp    BYTE PTR [rdx+rax*1],r11b
    2dec:	jne    2db1 <mainGtU+0x21>
    2dee:	lea    r10d,[rsi+0x5]
    2df2:	lea    eax,[rdi+0x5]
    2df5:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2dfa:	cmp    BYTE PTR [rdx+rax*1],r11b
    2dfe:	jne    2db1 <mainGtU+0x21>
    2e00:	lea    r10d,[rsi+0x6]
    2e04:	lea    eax,[rdi+0x6]
    2e07:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2e0c:	cmp    BYTE PTR [rdx+rax*1],r11b
    2e10:	jne    2db1 <mainGtU+0x21>
    2e12:	lea    r10d,[rsi+0x7]
    2e16:	lea    eax,[rdi+0x7]
    2e19:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2e1e:	cmp    BYTE PTR [rdx+rax*1],r11b
    2e22:	jne    2db1 <mainGtU+0x21>
    2e24:	lea    r10d,[rsi+0x8]
    2e28:	lea    eax,[rdi+0x8]
    2e2b:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2e30:	cmp    BYTE PTR [rdx+rax*1],r11b
    2e34:	jne    2db1 <mainGtU+0x21>
    2e3a:	lea    r10d,[rsi+0x9]
    2e3e:	lea    eax,[rdi+0x9]
    2e41:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2e46:	cmp    BYTE PTR [rdx+rax*1],r11b
    2e4a:	jne    2db1 <mainGtU+0x21>
    2e50:	lea    r10d,[rsi+0xa]
    2e54:	lea    eax,[rdi+0xa]
    2e57:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2e5c:	cmp    BYTE PTR [rdx+rax*1],r11b
    2e60:	jne    2db1 <mainGtU+0x21>
    2e66:	lea    r10d,[rsi+0xb]
    2e6a:	lea    eax,[rdi+0xb]
    2e6d:	movzx  r11d,BYTE PTR [rdx+r10*1]
    2e72:	cmp    BYTE PTR [rdx+rax*1],r11b
    2e76:	jne    2db1 <mainGtU+0x21>
    2e7c:	push   rbx
    2e7d:	add    edi,0xc
    2e80:	add    esi,0xc
    2e83:	lea    eax,[r8+0x8]
    2e87:	mov    r10d,esi
    2e8a:	mov    r11d,edi
    2e8d:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2e92:	cmp    BYTE PTR [rdx+r11*1],bl
    2e96:	jne    2fcc <mainGtU+0x23c>
    2e9c:	movzx  ebx,WORD PTR [rcx+r10*2]
    2ea1:	cmp    WORD PTR [rcx+r11*2],bx
    2ea6:	jne    2fcc <mainGtU+0x23c>
    2eac:	lea    r10d,[rsi+0x1]
    2eb0:	lea    r11d,[rdi+0x1]
    2eb4:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2eb9:	cmp    BYTE PTR [rdx+r11*1],bl
    2ebd:	jne    2fcc <mainGtU+0x23c>
    2ec3:	movzx  ebx,WORD PTR [rcx+r10*2]
    2ec8:	cmp    WORD PTR [rcx+r11*2],bx
    2ecd:	jne    2fcc <mainGtU+0x23c>
    2ed3:	lea    r10d,[rsi+0x2]
    2ed7:	lea    r11d,[rdi+0x2]
    2edb:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2ee0:	cmp    BYTE PTR [rdx+r11*1],bl
    2ee4:	jne    2fcc <mainGtU+0x23c>
    2eea:	movzx  ebx,WORD PTR [rcx+r10*2]
    2eef:	cmp    WORD PTR [rcx+r11*2],bx
    2ef4:	jne    2fcc <mainGtU+0x23c>
    2efa:	lea    r10d,[rsi+0x3]
    2efe:	lea    r11d,[rdi+0x3]
    2f02:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2f07:	cmp    BYTE PTR [rdx+r11*1],bl
    2f0b:	jne    2fcc <mainGtU+0x23c>
    2f11:	movzx  ebx,WORD PTR [rcx+r10*2]
    2f16:	cmp    WORD PTR [rcx+r11*2],bx
    2f1b:	jne    2fcc <mainGtU+0x23c>
    2f21:	lea    r10d,[rsi+0x4]
    2f25:	lea    r11d,[rdi+0x4]
    2f29:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2f2e:	cmp    BYTE PTR [rdx+r11*1],bl
    2f32:	jne    2fcc <mainGtU+0x23c>
    2f38:	movzx  ebx,WORD PTR [rcx+r10*2]
    2f3d:	cmp    WORD PTR [rcx+r11*2],bx
    2f42:	jne    2fcc <mainGtU+0x23c>
    2f48:	lea    r10d,[rsi+0x5]
    2f4c:	lea    r11d,[rdi+0x5]
    2f50:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2f55:	cmp    BYTE PTR [rdx+r11*1],bl
    2f59:	jne    2fcc <mainGtU+0x23c>
    2f5b:	movzx  ebx,WORD PTR [rcx+r10*2]
    2f60:	cmp    WORD PTR [rcx+r11*2],bx
    2f65:	jne    2fcc <mainGtU+0x23c>
    2f67:	lea    r10d,[rsi+0x6]
    2f6b:	lea    r11d,[rdi+0x6]
    2f6f:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2f74:	cmp    BYTE PTR [rdx+r11*1],bl
    2f78:	jne    2fcc <mainGtU+0x23c>
    2f7a:	movzx  ebx,WORD PTR [rcx+r10*2]
    2f7f:	cmp    WORD PTR [rcx+r11*2],bx
    2f84:	jne    2fcc <mainGtU+0x23c>
    2f86:	lea    r10d,[rsi+0x7]
    2f8a:	lea    r11d,[rdi+0x7]
    2f8e:	movzx  ebx,BYTE PTR [rdx+r10*1]
    2f93:	cmp    BYTE PTR [rdx+r11*1],bl
    2f97:	jne    2fcc <mainGtU+0x23c>
    2f99:	movzx  ebx,WORD PTR [rcx+r10*2]
    2f9e:	cmp    WORD PTR [rcx+r11*2],bx
    2fa3:	jne    2fcc <mainGtU+0x23c>
    2fa5:	add    edi,0x8
    2fa8:	add    esi,0x8
    2fab:	cmp    r8d,edi
    2fae:	ja     2fb3 <mainGtU+0x223>
    2fb0:	sub    edi,r8d
    2fb3:	cmp    r8d,esi
    2fb6:	ja     2fbb <mainGtU+0x22b>
    2fb8:	sub    esi,r8d
    2fbb:	sub    DWORD PTR [r9],0x1
    2fbf:	sub    eax,0x8
    2fc2:	jns    2e87 <mainGtU+0xf7>
    2fc8:	xor    eax,eax
    2fca:	pop    rbx
    2fcb:	ret    
    2fcc:	seta   al
    2fcf:	pop    rbx
    2fd0:	ret    
    2fd1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    2fdc:	nop    DWORD PTR [rax+0x0]

0000000000002fe0 <mainSort>:
    2fe0:	push   r15
    2fe2:	push   r14
    2fe4:	push   r13
    2fe6:	push   r12
    2fe8:	push   rbp
    2fe9:	push   rbx
    2fea:	sub    rsp,0x1000
    2ff1:	or     QWORD PTR [rsp],0x0
    2ff6:	sub    rsp,0x288
    2ffd:	mov    r13,QWORD PTR [rsp+0x12c0]
    3005:	mov    QWORD PTR [rsp+0x60],rdi
    300a:	mov    r15,rsi
    300d:	mov    QWORD PTR [rsp+0x90],rdx
    3015:	mov    QWORD PTR [rsp+0x68],rcx
    301a:	mov    DWORD PTR [rsp+0x8c],r8d
    3022:	mov    DWORD PTR [rsp+0xa0],r9d
    302a:	mov    rbx,QWORD PTR fs:0x28
    3033:	mov    QWORD PTR [rsp+0x1278],rbx
    303b:	xor    ebx,ebx
    303d:	cmp    r9d,0x3
    3041:	jg     3f76 <mainSort+0xf96>
    3047:	mov    rcx,QWORD PTR [rsp+0x68]
    304c:	lea    rax,[rcx+0x40000]
    3053:	mov    QWORD PTR [rsp+0xb8],rax
    305b:	nop    DWORD PTR [rax+rax*1+0x0]
    3060:	mov    rdx,rax
    3063:	mov    DWORD PTR [rax],0x0
    3069:	sub    rax,0x4
    306d:	cmp    rcx,rdx
    3070:	jne    3060 <mainSort+0x80>
    3072:	mov    ebx,DWORD PTR [rsp+0x8c]
    3079:	movzx  eax,BYTE PTR [r15]
    307d:	sub    ebx,0x1
    3080:	shl    eax,0x8
    3083:	mov    DWORD PTR [rsp+0xa4],ebx
    308a:	cmp    ebx,0x2
    308d:	jle    3fec <mainSort+0x100c>
    3093:	mov    rdi,QWORD PTR [rsp+0x90]
    309b:	mov    rsi,QWORD PTR [rsp+0x68]
    30a0:	movsxd rdx,ebx
    30a3:	nop    DWORD PTR [rax+rax*1+0x0]
    30a8:	xor    ebx,ebx
    30aa:	sar    eax,0x8
    30ad:	xor    ebp,ebp
    30af:	xor    r12d,r12d
    30b2:	mov    WORD PTR [rdi+rdx*2],bx
    30b6:	movzx  ecx,BYTE PTR [r15+rdx*1]
    30bb:	xor    r14d,r14d
    30be:	shl    ecx,0x8
    30c1:	or     eax,ecx
    30c3:	movsxd rcx,eax
    30c6:	sar    eax,0x8
    30c9:	add    DWORD PTR [rsi+rcx*4],0x1
    30cd:	mov    ecx,eax
    30cf:	mov    WORD PTR [rdi+rdx*2-0x2],bp
    30d4:	movzx  eax,BYTE PTR [r15+rdx*1-0x1]
    30da:	shl    eax,0x8
    30dd:	or     eax,ecx
    30df:	movsxd rcx,eax
    30e2:	sar    eax,0x8
    30e5:	add    DWORD PTR [rsi+rcx*4],0x1
    30e9:	mov    ecx,eax
    30eb:	mov    WORD PTR [rdi+rdx*2-0x4],r12w
    30f1:	movzx  eax,BYTE PTR [r15+rdx*1-0x2]
    30f7:	shl    eax,0x8
    30fa:	or     eax,ecx
    30fc:	movsxd rcx,eax
    30ff:	sar    eax,0x8
    3102:	add    DWORD PTR [rsi+rcx*4],0x1
    3106:	mov    ecx,eax
    3108:	mov    WORD PTR [rdi+rdx*2-0x6],r14w
    310e:	movzx  eax,BYTE PTR [r15+rdx*1-0x3]
    3114:	sub    rdx,0x4
    3118:	shl    eax,0x8
    311b:	or     eax,ecx
    311d:	movsxd rcx,eax
    3120:	add    DWORD PTR [rsi+rcx*4],0x1
    3124:	cmp    edx,0x2
    3127:	jg     30a8 <mainSort+0xc8>
    312d:	mov    ebx,DWORD PTR [rsp+0x8c]
    3134:	lea    edx,[rbx-0x4]
    3137:	lea    ecx,[rbx-0x5]
    313a:	and    edx,0xfffffffc
    313d:	sub    ecx,edx
    313f:	movsxd rdx,ecx
    3142:	test   ecx,ecx
    3144:	js     3177 <mainSort+0x197>
    3146:	mov    rdi,QWORD PTR [rsp+0x90]
    314e:	mov    rsi,QWORD PTR [rsp+0x68]
    3153:	xor    r11d,r11d
    3156:	sar    eax,0x8
    3159:	mov    WORD PTR [rdi+rdx*2],r11w
    315e:	movzx  ecx,BYTE PTR [r15+rdx*1]
    3163:	sub    rdx,0x1
    3167:	shl    ecx,0x8
    316a:	or     eax,ecx
    316c:	movsxd rcx,eax
    316f:	add    DWORD PTR [rsi+rcx*4],0x1
    3173:	test   edx,edx
    3175:	jns    3153 <mainSort+0x173>
    3177:	movsxd rdx,DWORD PTR [rsp+0x8c]
    317f:	mov    rax,QWORD PTR [rsp+0x90]
    3187:	lea    rcx,[r15+rdx*1]
    318b:	lea    rsi,[rax+rdx*2]
    318f:	xor    eax,eax
    3191:	nop    DWORD PTR [rax+0x0]
    3198:	movzx  edx,BYTE PTR [r15+rax*1]
    319d:	xor    r10d,r10d
    31a0:	mov    BYTE PTR [rcx+rax*1],dl
    31a3:	mov    WORD PTR [rsi+rax*2],r10w
    31a8:	add    rax,0x1
    31ac:	cmp    rax,0x22
    31b0:	jne    3198 <mainSort+0x1b8>
    31b2:	cmp    DWORD PTR [rsp+0xa0],0x3
    31ba:	jg     3f98 <mainSort+0xfb8>
    31c0:	mov    rbx,QWORD PTR [rsp+0x68]
    31c5:	lea    rax,[rbx+0x4]
    31c9:	lea    rcx,[rbx+0x40004]
    31d0:	mov    edx,DWORD PTR [rax-0x4]
    31d3:	add    DWORD PTR [rax],edx
    31d5:	add    rax,0x4
    31d9:	cmp    rcx,rax
    31dc:	jne    31d0 <mainSort+0x1f0>
    31de:	movzx  eax,BYTE PTR [r15]
    31e2:	mov    ebx,DWORD PTR [rsp+0xa4]
    31e9:	shl    eax,0x8
    31ec:	cmp    ebx,0x2
    31ef:	jle    3fe0 <mainSort+0x1000>
    31f5:	mov    rdi,QWORD PTR [rsp+0x60]
    31fa:	mov    r8,QWORD PTR [rsp+0x68]
    31ff:	movsxd rsi,ebx
    3202:	nop    WORD PTR [rax+rax*1+0x0]
    3208:	movzx  ecx,BYTE PTR [r15+rsi*1]
    320d:	shr    ax,0x8
    3211:	shl    ecx,0x8
    3214:	or     eax,ecx
    3216:	movzx  edx,ax
    3219:	shr    ax,0x8
    321d:	lea    rcx,[r8+rdx*4]
    3221:	mov    ebx,DWORD PTR [rcx]
    3223:	lea    edx,[rbx-0x1]
    3226:	mov    DWORD PTR [rcx],edx
    3228:	movsxd rdx,edx
    322b:	mov    DWORD PTR [rdi+rdx*4],esi
    322e:	movzx  ecx,BYTE PTR [r15+rsi*1-0x1]
    3234:	shl    ecx,0x8
    3237:	or     ecx,eax
    3239:	movzx  eax,cx
    323c:	lea    rdx,[r8+rax*4]
    3240:	mov    eax,DWORD PTR [rdx]
    3242:	sub    eax,0x1
    3245:	mov    DWORD PTR [rdx],eax
    3247:	lea    edx,[rsi-0x1]
    324a:	cdqe   
    324c:	mov    DWORD PTR [rdi+rax*4],edx
    324f:	movzx  edx,BYTE PTR [r15+rsi*1-0x2]
    3255:	mov    eax,edx
    3257:	mov    edx,ecx
    3259:	shl    eax,0x8
    325c:	shr    dx,0x8
    3260:	or     edx,eax
    3262:	movzx  eax,dx
    3265:	lea    rcx,[r8+rax*4]
    3269:	mov    eax,DWORD PTR [rcx]
    326b:	sub    eax,0x1
    326e:	mov    DWORD PTR [rcx],eax
    3270:	lea    ecx,[rsi-0x2]
    3273:	cdqe   
    3275:	mov    DWORD PTR [rdi+rax*4],ecx
    3278:	movzx  eax,BYTE PTR [r15+rsi*1-0x3]
    327e:	shl    eax,0x8
    3281:	mov    ecx,eax
    3283:	mov    eax,edx
    3285:	shr    ax,0x8
    3289:	or     eax,ecx
    328b:	movzx  edx,ax
    328e:	lea    rcx,[r8+rdx*4]
    3292:	mov    ebx,DWORD PTR [rcx]
    3294:	lea    edx,[rbx-0x1]
    3297:	mov    DWORD PTR [rcx],edx
    3299:	lea    ecx,[rsi-0x3]
    329c:	movsxd rdx,edx
    329f:	sub    rsi,0x4
    32a3:	mov    DWORD PTR [rdi+rdx*4],ecx
    32a6:	cmp    esi,0x2
    32a9:	jg     3208 <mainSort+0x228>
    32af:	mov    ebx,DWORD PTR [rsp+0x8c]
    32b6:	lea    ecx,[rbx-0x4]
    32b9:	lea    edx,[rbx-0x5]
    32bc:	and    ecx,0xfffffffc
    32bf:	sub    edx,ecx
    32c1:	movsxd rcx,edx
    32c4:	test   edx,edx
    32c6:	js     32fc <mainSort+0x31c>
    32c8:	mov    rdi,QWORD PTR [rsp+0x60]
    32cd:	mov    r8,QWORD PTR [rsp+0x68]
    32d2:	movzx  edx,BYTE PTR [r15+rcx*1]
    32d7:	shr    ax,0x8
    32db:	shl    edx,0x8
    32de:	or     eax,edx
    32e0:	movzx  edx,ax
    32e3:	lea    rsi,[r8+rdx*4]
    32e7:	mov    ebx,DWORD PTR [rsi]
    32e9:	lea    edx,[rbx-0x1]
    32ec:	mov    DWORD PTR [rsi],edx
    32ee:	movsxd rdx,edx
    32f1:	mov    DWORD PTR [rdi+rdx*4],ecx
    32f4:	sub    rcx,0x1
    32f8:	test   ecx,ecx
    32fa:	jns    32d2 <mainSort+0x2f2>
    32fc:	lea    rcx,[rsp+0x570]
    3304:	xor    eax,eax
    3306:	lea    rdx,[rsp+0x1170]
    330e:	mov    QWORD PTR [rsp+0x10],rcx
    3313:	nop    DWORD PTR [rax+rax*1+0x0]
    3318:	mov    BYTE PTR [rdx+rax*1],0x0
    331c:	mov    DWORD PTR [rcx+rax*4],eax
    331f:	add    rax,0x1
    3323:	cmp    rax,0x100
    3329:	jne    3318 <mainSort+0x338>
    332b:	mov    eax,0x5
    3330:	mov    edx,0x1
    3335:	lea    edx,[rdx+rdx*2+0x1]
    3339:	sub    eax,0x1
    333c:	jne    3335 <mainSort+0x355>
    333e:	mov    DWORD PTR [rsp+0x8],edx
    3342:	mov    r9,QWORD PTR [rsp+0x68]
    3347:	mov    QWORD PTR [rsp+0x18],r15
    334c:	mov    QWORD PTR [rsp+0x20],r13
    3351:	nop    DWORD PTR [rax+0x0]
    3358:	movsxd r10,DWORD PTR [rsp+0x8]
    335d:	mov    rax,r10
    3360:	imul   r10,r10,0x55555556
    3367:	cdq    
    3368:	shr    r10,0x20
    336c:	sub    r10d,edx
    336f:	mov    DWORD PTR [rsp+0x8],r10d
    3374:	cmp    eax,0x2ff
    3379:	jg     3429 <mainSort+0x449>
    337f:	movsxd r12,r10d
    3382:	mov    rbx,QWORD PTR [rsp+0x10]
    3387:	xor    r15d,r15d
    338a:	mov    rax,r12
    338d:	neg    eax
    338f:	lea    r13,[rbx+r12*4]
    3393:	movsxd rbp,eax
    3396:	shl    rbp,0x2
    339a:	nop    WORD PTR [rax+rax*1+0x0]
    33a0:	mov    ebx,DWORD PTR [r13+0x0]
    33a4:	mov    r11,r15
    33a7:	mov    esi,r12d
    33aa:	mov    rcx,r13
    33ad:	sub    r11,r12
    33b0:	lea    eax,[rbx+0x1]
    33b3:	mov    edx,ebx
    33b5:	shl    eax,0x8
    33b8:	shl    edx,0x8
    33bb:	cdqe   
    33bd:	movsxd rdx,edx
    33c0:	mov    r8d,DWORD PTR [r9+rax*4]
    33c4:	sub    r8d,DWORD PTR [r9+rdx*4]
    33c8:	jmp    33de <mainSort+0x3fe>
    33ca:	nop    WORD PTR [rax+rax*1+0x0]
    33d0:	mov    DWORD PTR [rcx],edx
    33d2:	add    rcx,rbp
    33d5:	cmp    esi,r10d
    33d8:	jl     3ba0 <mainSort+0xbc0>
    33de:	mov    edx,DWORD PTR [rcx+r11*4]
    33e2:	movsxd rdi,esi
    33e5:	mov    esi,edi
    33e7:	lea    eax,[rdx+0x1]
    33ea:	mov    r14d,edx
    33ed:	sub    esi,r10d
    33f0:	shl    eax,0x8
    33f3:	shl    r14d,0x8
    33f7:	cdqe   
    33f9:	movsxd r14,r14d
    33fc:	mov    eax,DWORD PTR [r9+rax*4]
    3400:	sub    eax,DWORD PTR [r9+r14*4]
    3404:	cmp    eax,r8d
    3407:	ja     33d0 <mainSort+0x3f0>
    3409:	add    r12,0x1
    340d:	mov    DWORD PTR [rsp+rdi*4+0x570],ebx
    3414:	add    r15,0x1
    3418:	add    r13,0x4
    341c:	cmp    r12d,0xff
    3423:	jle    33a0 <mainSort+0x3c0>
    3429:	cmp    r10d,0x1
    342d:	jne    3358 <mainSort+0x378>
    3433:	mov    rax,QWORD PTR [rsp+0x10]
    3438:	mov    r15,QWORD PTR [rsp+0x18]
    343d:	mov    QWORD PTR [rsp+0x68],r9
    3442:	mov    DWORD PTR [rsp+0x84],0x0
    344d:	mov    r13,QWORD PTR [rsp+0x20]
    3452:	mov    QWORD PTR [rsp+0x98],rax
    345a:	lea    rax,[rsp+0x970]
    3462:	mov    QWORD PTR [rsp+0xa8],rax
    346a:	lea    rax,[rsp+0x96c]
    3472:	mov    QWORD PTR [rsp+0xb0],rax
    347a:	mov    rax,QWORD PTR [rsp+0x98]
    3482:	mov    DWORD PTR [rsp+0x48],0x0
    348a:	mov    r14,r15
    348d:	mov    QWORD PTR [rsp+0x78],r13
    3492:	mov    eax,DWORD PTR [rax]
    3494:	mov    DWORD PTR [rsp+0x70],eax
    3498:	shl    eax,0x8
    349b:	mov    DWORD PTR [rsp+0x80],eax
    34a2:	nop    WORD PTR [rax+rax*1+0x0]
    34a8:	mov    ebx,DWORD PTR [rsp+0x48]
    34ac:	cmp    DWORD PTR [rsp+0x70],ebx
    34b0:	je     388b <mainSort+0x8ab>
    34b6:	mov    eax,DWORD PTR [rsp+0x80]
    34bd:	mov    rcx,QWORD PTR [rsp+0x68]
    34c2:	add    eax,ebx
    34c4:	cdqe   
    34c6:	shl    rax,0x2
    34ca:	lea    rbx,[rcx+rax*1]
    34ce:	mov    edx,DWORD PTR [rbx]
    34d0:	mov    QWORD PTR [rsp+0x50],rbx
    34d5:	test   edx,0x200000
    34db:	jne    387e <mainSort+0x89e>
    34e1:	mov    eax,DWORD PTR [rcx+rax*1+0x4]
    34e5:	mov    ebx,edx
    34e7:	and    ebx,0xffdfffff
    34ed:	and    eax,0xffdfffff
    34f2:	mov    DWORD PTR [rsp+0x4c],ebx
    34f6:	sub    eax,0x1
    34f9:	mov    DWORD PTR [rsp+0x18],eax
    34fd:	cmp    ebx,eax
    34ff:	jge    387e <mainSort+0x89e>
    3505:	sub    eax,ebx
    3507:	cmp    DWORD PTR [rsp+0xa0],0x3
    350f:	mov    DWORD PTR [rsp+0x88],eax
    3516:	jg     3d6c <mainSort+0xd8c>
    351c:	mov    eax,DWORD PTR [rsp+0x4c]
    3520:	mov    ebp,0x2
    3525:	mov    r12,r14
    3528:	mov    DWORD PTR [rsp+0x3e0],0x2
    3533:	mov    DWORD PTR [rsp+0x10],0x1
    353b:	mov    r14d,ebp
    353e:	mov    DWORD PTR [rsp+0xc0],eax
    3545:	mov    eax,DWORD PTR [rsp+0x18]
    3549:	mov    DWORD PTR [rsp+0x74],0x0
    3551:	mov    DWORD PTR [rsp+0x250],eax
    3558:	mov    esi,DWORD PTR [rsp+0x18]
    355c:	sub    esi,DWORD PTR [rsp+0x4c]
    3560:	cmp    esi,0x13
    3563:	jle    356f <mainSort+0x58f>
    3565:	cmp    r14d,0xe
    3569:	jle    3bb0 <mainSort+0xbd0>
    356f:	add    esi,0x1
    3572:	xor    eax,eax
    3574:	mov    ecx,0x4
    3579:	cmp    esi,0x1
    357c:	jg     3592 <mainSort+0x5b2>
    357e:	jmp    3831 <mainSort+0x851>
    3583:	nop    DWORD PTR [rax+rax*1+0x0]
    3588:	lea    rbx,[rip+0x9fb5]        # d544 <incs+0x4>
    358f:	mov    ecx,DWORD PTR [rbx+rax*4]
    3592:	movsxd rdi,eax
    3595:	add    rax,0x1
    3599:	cmp    esi,ecx
    359b:	jg     3588 <mainSort+0x5a8>
    359d:	movsxd r15,DWORD PTR [rsp+0x4c]
    35a2:	mov    r9,QWORD PTR [rsp+0x78]
    35a7:	mov    rdx,r12
    35aa:	lea    rax,[rip+0x9f8f]        # d540 <incs>
    35b1:	lea    rax,[rax+rdi*4]
    35b5:	mov    rcx,QWORD PTR [rsp+0x90]
    35bd:	mov    r8d,DWORD PTR [rsp+0x8c]
    35c5:	mov    QWORD PTR [rsp+0x40],rax
    35ca:	lea    rax,[r15*4+0x0]
    35d2:	mov    QWORD PTR [rsp+0x58],rax
    35d7:	mov    rax,QWORD PTR [rsp+0x40]
    35dc:	mov    r13d,DWORD PTR [rsp+0x4c]
    35e1:	mov    rdi,QWORD PTR [rsp+0x60]
    35e6:	mov    esi,DWORD PTR [rax]
    35e8:	add    r13d,esi
    35eb:	mov    DWORD PTR [rsp+0x20],esi
    35ef:	movsxd rax,r13d
    35f2:	mov    DWORD PTR [rsp+0x30],r13d
    35f7:	lea    rbx,[rdi+rax*4]
    35fb:	mov    eax,esi
    35fd:	add    rdi,QWORD PTR [rsp+0x58]
    3602:	mov    DWORD PTR [rsp+0x10],r13d
    3607:	neg    eax
    3609:	mov    QWORD PTR [rsp+0x8],rdi
    360e:	mov    r13d,r14d
    3611:	cdqe   
    3613:	shl    rax,0x2
    3617:	mov    QWORD PTR [rsp+0x28],rax
    361c:	nop    DWORD PTR [rax+0x0]
    3620:	mov    r12d,DWORD PTR [rsp+0x10]
    3625:	mov    eax,DWORD PTR [rsp+0x18]
    3629:	cmp    r12d,eax
    362c:	jg     3810 <mainSort+0x830>
    3632:	mov    r15d,DWORD PTR [rbx]
    3635:	mov    r10d,r12d
    3638:	mov    rbp,QWORD PTR [rsp+0x8]
    363d:	mov    r14,rbx
    3640:	lea    esi,[r15+r13*1]
    3644:	mov    r12d,esi
    3647:	jmp    366d <mainSort+0x68d>
    3649:	nop    DWORD PTR [rax+0x0]
    3650:	mov    esi,DWORD PTR [rbp+0x0]
    3653:	mov    rdi,QWORD PTR [rsp+0x28]
    3658:	mov    DWORD PTR [r14],esi
    365b:	add    rbp,rdi
    365e:	lea    r14,[rax+rdi*1]
    3662:	cmp    DWORD PTR [rsp+0x30],r10d
    3667:	jg     37e0 <mainSort+0x800>
    366d:	mov    edi,DWORD PTR [rbp+0x0]
    3670:	sub    r10d,DWORD PTR [rsp+0x20]
    3675:	mov    esi,r12d
    3678:	mov    QWORD PTR [rsp+0x38],rbp
    367d:	mov    DWORD PTR [rsp+0x34],r10d
    3682:	add    edi,r13d
    3685:	call   2d90 <mainGtU>
    368a:	mov    r10d,DWORD PTR [rsp+0x34]
    368f:	mov    r11d,eax
    3692:	mov    rax,r14
    3695:	test   r11b,r11b
    3698:	jne    3650 <mainSort+0x670>
    369a:	mov    DWORD PTR [rax],r15d
    369d:	mov    eax,DWORD PTR [rsp+0x10]
    36a1:	lea    r12d,[rax+0x1]
    36a5:	cmp    r12d,DWORD PTR [rsp+0x18]
    36aa:	jg     3810 <mainSort+0x830>
    36b0:	mov    r15d,DWORD PTR [rbx+0x4]
    36b4:	mov    rax,QWORD PTR [rsp+0x8]
    36b9:	mov    r10d,r12d
    36bc:	lea    r14,[rbx+0x4]
    36c0:	lea    esi,[r15+r13*1]
    36c4:	lea    rbp,[rax+0x4]
    36c8:	mov    r12d,esi
    36cb:	jmp    36ed <mainSort+0x70d>
    36cd:	nop    DWORD PTR [rax]
    36d0:	mov    esi,DWORD PTR [rbp+0x0]
    36d3:	mov    DWORD PTR [r14],esi
    36d6:	mov    rsi,QWORD PTR [rsp+0x28]
    36db:	lea    r14,[rax+rsi*1]
    36df:	add    rbp,rsi
    36e2:	cmp    DWORD PTR [rsp+0x30],r10d
    36e7:	jg     37f0 <mainSort+0x810>
    36ed:	mov    edi,DWORD PTR [rbp+0x0]
    36f0:	sub    r10d,DWORD PTR [rsp+0x20]
    36f5:	mov    esi,r12d
    36f8:	mov    QWORD PTR [rsp+0x38],rbp
    36fd:	mov    DWORD PTR [rsp+0x34],r10d
    3702:	add    edi,r13d
    3705:	call   2d90 <mainGtU>
    370a:	mov    r10d,DWORD PTR [rsp+0x34]
    370f:	mov    r11d,eax
    3712:	mov    rax,r14
    3715:	test   r11b,r11b
    3718:	jne    36d0 <mainSort+0x6f0>
    371a:	mov    DWORD PTR [rax],r15d
    371d:	mov    eax,DWORD PTR [rsp+0x10]
    3721:	lea    r12d,[rax+0x2]
    3725:	cmp    r12d,DWORD PTR [rsp+0x18]
    372a:	jg     3810 <mainSort+0x830>
    3730:	mov    r15d,DWORD PTR [rbx+0x8]
    3734:	mov    rax,QWORD PTR [rsp+0x8]
    3739:	mov    r10d,r12d
    373c:	lea    r14,[rbx+0x8]
    3740:	lea    esi,[r15+r13*1]
    3744:	lea    rbp,[rax+0x8]
    3748:	mov    r12d,esi
    374b:	jmp    376d <mainSort+0x78d>
    374d:	nop    DWORD PTR [rax]
    3750:	mov    esi,DWORD PTR [rbp+0x0]
    3753:	mov    rdi,QWORD PTR [rsp+0x28]
    3758:	mov    DWORD PTR [r14],esi
    375b:	add    rbp,rdi
    375e:	lea    r14,[rax+rdi*1]
    3762:	cmp    DWORD PTR [rsp+0x30],r10d
    3767:	jg     3800 <mainSort+0x820>
    376d:	mov    edi,DWORD PTR [rbp+0x0]
    3770:	sub    r10d,DWORD PTR [rsp+0x20]
    3775:	mov    esi,r12d
    3778:	mov    QWORD PTR [rsp+0x38],rbp
    377d:	mov    DWORD PTR [rsp+0x34],r10d
    3782:	add    edi,r13d
    3785:	call   2d90 <mainGtU>
    378a:	mov    r10d,DWORD PTR [rsp+0x34]
    378f:	mov    r11d,eax
    3792:	mov    rax,r14
    3795:	test   r11b,r11b
    3798:	jne    3750 <mainSort+0x770>
    379a:	mov    DWORD PTR [rax],r15d
    379d:	mov    esi,DWORD PTR [r9]
    37a0:	add    rbx,0xc
    37a4:	add    DWORD PTR [rsp+0x10],0x3
    37a9:	add    QWORD PTR [rsp+0x8],0xc
    37af:	test   esi,esi
    37b1:	jns    3620 <mainSort+0x640>
    37b7:	mov    rax,QWORD PTR [rsp+0x1278]
    37bf:	xor    rax,QWORD PTR fs:0x28
    37c8:	jne    400c <mainSort+0x102c>
    37ce:	add    rsp,0x1288
    37d5:	pop    rbx
    37d6:	pop    rbp
    37d7:	pop    r12
    37d9:	pop    r13
    37db:	pop    r14
    37dd:	pop    r15
    37df:	ret    
    37e0:	mov    rax,QWORD PTR [rsp+0x38]
    37e5:	jmp    369a <mainSort+0x6ba>
    37ea:	nop    WORD PTR [rax+rax*1+0x0]
    37f0:	mov    rax,QWORD PTR [rsp+0x38]
    37f5:	jmp    371a <mainSort+0x73a>
    37fa:	nop    WORD PTR [rax+rax*1+0x0]
    3800:	mov    rax,QWORD PTR [rsp+0x38]
    3805:	jmp    379a <mainSort+0x7ba>
    3807:	nop    WORD PTR [rax+rax*1+0x0]
    3810:	sub    QWORD PTR [rsp+0x40],0x4
    3816:	mov    rax,QWORD PTR [rsp+0x40]
    381b:	lea    rbx,[rip+0x9d1a]        # d53c <_IO_stdin_used+0x53c>
    3822:	mov    r14d,r13d
    3825:	cmp    rbx,rax
    3828:	jne    35d7 <mainSort+0x5f7>
    382e:	mov    r12,rdx
    3831:	mov    rax,QWORD PTR [rsp+0x78]
    3836:	mov    edi,DWORD PTR [rax]
    3838:	test   edi,edi
    383a:	js     37b7 <mainSort+0x7d7>
    3840:	mov    edx,DWORD PTR [rsp+0x74]
    3844:	test   edx,edx
    3846:	jne    3ff8 <mainSort+0x1018>
    384c:	mov    eax,DWORD PTR [rsp+0x84]
    3853:	mov    ebx,DWORD PTR [rsp+0x88]
    385a:	mov    r14,r12
    385d:	lea    eax,[rax+rbx*1+0x1]
    3861:	mov    DWORD PTR [rsp+0x84],eax
    3868:	mov    rax,QWORD PTR [rsp+0x78]
    386d:	mov    eax,DWORD PTR [rax]
    386f:	test   eax,eax
    3871:	js     37b7 <mainSort+0x7d7>
    3877:	mov    rax,QWORD PTR [rsp+0x50]
    387c:	mov    edx,DWORD PTR [rax]
    387e:	mov    rax,QWORD PTR [rsp+0x50]
    3883:	or     edx,0x200000
    3889:	mov    DWORD PTR [rax],edx
    388b:	add    DWORD PTR [rsp+0x48],0x1
    3890:	mov    eax,DWORD PTR [rsp+0x48]
    3894:	cmp    eax,0x100
    3899:	jne    34a8 <mainSort+0x4c8>
    389f:	movsxd rbp,DWORD PTR [rsp+0x70]
    38a4:	mov    r13,QWORD PTR [rsp+0x78]
    38a9:	mov    r15,r14
    38ac:	cmp    BYTE PTR [rsp+rbp*1+0x1170],0x0
    38b4:	jne    3fba <mainSort+0xfda>
    38ba:	mov    rax,QWORD PTR [rsp+0x68]
    38bf:	lea    r14,[rbp*4+0x0]
    38c7:	xor    edx,edx
    38c9:	mov    rdi,QWORD PTR [rsp+0xa8]
    38d1:	lea    rsi,[rsp+0xd70]
    38d9:	lea    rbx,[rax+r14*1]
    38dd:	mov    rcx,rbx
    38e0:	mov    eax,DWORD PTR [rcx]
    38e2:	add    rcx,0x400
    38e9:	and    eax,0xffdfffff
    38ee:	mov    DWORD PTR [rdi+rdx*1],eax
    38f1:	mov    eax,DWORD PTR [rcx-0x3fc]
    38f7:	and    eax,0xffdfffff
    38fc:	sub    eax,0x1
    38ff:	mov    DWORD PTR [rsi+rdx*1],eax
    3902:	add    rdx,0x4
    3906:	cmp    rdx,0x400
    390d:	jne    38e0 <mainSort+0x900>
    390f:	mov    rdx,QWORD PTR [rsp+0x68]
    3914:	movsxd rax,DWORD PTR [rsp+0x80]
    391c:	mov    edi,DWORD PTR [rsp+rbp*4+0x970]
    3923:	lea    r12,[rdx+rax*4]
    3927:	mov    edx,DWORD PTR [r12]
    392b:	and    edx,0xffdfffff
    3931:	cmp    edx,edi
    3933:	jge    398d <mainSort+0x9ad>
    3935:	mov    r8,QWORD PTR [rsp+0x60]
    393a:	mov    r9d,DWORD PTR [rsp+0x8c]
    3942:	movsxd rdx,edx
    3945:	nop    DWORD PTR [rax]
    3948:	mov    eax,DWORD PTR [r8+rdx*4]
    394c:	sub    eax,0x1
    394f:	lea    ecx,[rax+r9*1]
    3953:	cmovs  eax,ecx
    3956:	movsxd rcx,eax
    3959:	movzx  ecx,BYTE PTR [r15+rcx*1]
    395e:	cmp    BYTE PTR [rsp+rcx*1+0x1170],0x0
    3966:	jne    397e <mainSort+0x99e>
    3968:	movsxd rsi,DWORD PTR [rsp+rcx*4+0x970]
    3970:	lea    edi,[rsi+0x1]
    3973:	mov    DWORD PTR [r8+rsi*4],eax
    3977:	mov    DWORD PTR [rsp+rcx*4+0x970],edi
    397e:	mov    edi,DWORD PTR [rsp+rbp*4+0x970]
    3985:	add    rdx,0x1
    3989:	cmp    edi,edx
    398b:	jg     3948 <mainSort+0x968>
    398d:	mov    eax,DWORD PTR [rsp+0x70]
    3991:	mov    rdx,QWORD PTR [rsp+0x68]
    3996:	add    eax,0x1
    3999:	shl    eax,0x8
    399c:	cdqe   
    399e:	lea    r9,[rdx+rax*4]
    39a2:	mov    eax,DWORD PTR [rsp+rbp*4+0xd70]
    39a9:	mov    edx,DWORD PTR [r9]
    39ac:	and    edx,0xffdfffff
    39b2:	sub    edx,0x1
    39b5:	cmp    edx,eax
    39b7:	jle    3a17 <mainSort+0xa37>
    39b9:	mov    r8,QWORD PTR [rsp+0x60]
    39be:	mov    r10d,DWORD PTR [rsp+0x8c]
    39c6:	movsxd rdx,edx
    39c9:	nop    DWORD PTR [rax+0x0]
    39d0:	mov    eax,DWORD PTR [r8+rdx*4]
    39d4:	sub    eax,0x1
    39d7:	lea    ecx,[rax+r10*1]
    39db:	cmovs  eax,ecx
    39de:	movsxd rcx,eax
    39e1:	movzx  ecx,BYTE PTR [r15+rcx*1]
    39e6:	cmp    BYTE PTR [rsp+rcx*1+0x1170],0x0
    39ee:	jne    3a08 <mainSort+0xa28>
    39f0:	movsxd rsi,DWORD PTR [rsp+rcx*4+0xd70]
    39f8:	lea    r11d,[rsi-0x1]
    39fc:	mov    DWORD PTR [r8+rsi*4],eax
    3a00:	mov    DWORD PTR [rsp+rcx*4+0xd70],r11d
    3a08:	mov    eax,DWORD PTR [rsp+rbp*4+0xd70]
    3a0f:	sub    rdx,0x1
    3a13:	cmp    eax,edx
    3a15:	jl     39d0 <mainSort+0x9f0>
    3a17:	lea    edx,[rdi-0x1]
    3a1a:	cmp    edx,eax
    3a1c:	je     3a3f <mainSort+0xa5f>
    3a1e:	test   edi,edi
    3a20:	jne    3a2b <mainSort+0xa4b>
    3a22:	cmp    DWORD PTR [rsp+0xa4],eax
    3a29:	je     3a3f <mainSort+0xa5f>
    3a2b:	mov    edi,0x3ef
    3a30:	mov    QWORD PTR [rsp+0x8],r9
    3a35:	call   5120 <BZ2_bz__AssertH__fail>
    3a3a:	mov    r9,QWORD PTR [rsp+0x8]
    3a3f:	add    r14,QWORD PTR [rsp+0xb8]
    3a47:	nop    WORD PTR [rax+rax*1+0x0]
    3a50:	or     DWORD PTR [rbx],0x200000
    3a56:	add    rbx,0x400
    3a5d:	cmp    r14,rbx
    3a60:	jne    3a50 <mainSort+0xa70>
    3a62:	mov    BYTE PTR [rsp+rbp*1+0x1170],0x1
    3a6a:	mov    rbx,QWORD PTR [rsp+0x98]
    3a72:	cmp    QWORD PTR [rsp+0xb0],rbx
    3a7a:	je     3b2f <mainSort+0xb4f>
    3a80:	mov    esi,DWORD PTR [r12]
    3a84:	mov    eax,DWORD PTR [r9]
    3a87:	and    esi,0xffdfffff
    3a8d:	and    eax,0xffdfffff
    3a92:	sub    eax,esi
    3a94:	lea    edi,[rax-0x1]
    3a97:	cmp    eax,0xfffe
    3a9c:	jle    3fc9 <mainSort+0xfe9>
    3aa2:	xor    ecx,ecx
    3aa4:	add    ecx,0x1
    3aa7:	mov    edx,eax
    3aa9:	sar    edx,cl
    3aab:	cmp    edx,0xfffe
    3ab1:	jg     3aa4 <mainSort+0xac4>
    3ab3:	mov    rax,QWORD PTR [rsp+0x60]
    3ab8:	movsxd rsi,esi
    3abb:	movsxd rdx,edi
    3abe:	mov    r10,QWORD PTR [rsp+0x90]
    3ac6:	mov    r11d,DWORD PTR [rsp+0x8c]
    3ace:	lea    rsi,[rax+rsi*4]
    3ad2:	movsxd r9,DWORD PTR [rsi+rdx*4]
    3ad6:	mov    r8d,edx
    3ad9:	sar    r8d,cl
    3adc:	mov    WORD PTR [r10+r9*2],r8w
    3ae1:	mov    rax,r9
    3ae4:	cmp    r9d,0x21
    3ae8:	jg     3af4 <mainSort+0xb14>
    3aea:	add    eax,r11d
    3aed:	cdqe   
    3aef:	mov    WORD PTR [r10+rax*2],r8w
    3af4:	sub    rdx,0x1
    3af8:	test   edx,edx
    3afa:	jns    3ad2 <mainSort+0xaf2>
    3afc:	sar    edi,cl
    3afe:	cmp    edi,0xffff
    3b04:	jle    3b10 <mainSort+0xb30>
    3b06:	mov    edi,0x3ea
    3b0b:	call   5120 <BZ2_bz__AssertH__fail>
    3b10:	add    QWORD PTR [rsp+0x98],0x4
    3b19:	mov    rax,QWORD PTR [rsp+0x98]
    3b21:	cmp    QWORD PTR [rsp+0xa8],rax
    3b29:	jne    347a <mainSort+0x49a>
    3b2f:	cmp    DWORD PTR [rsp+0xa0],0x3
    3b37:	jle    37b7 <mainSort+0x7d7>
    3b3d:	mov    rax,QWORD PTR [rsp+0x1278]
    3b45:	xor    rax,QWORD PTR fs:0x28
    3b4e:	jne    400c <mainSort+0x102c>
    3b54:	mov    ecx,DWORD PTR [rsp+0x8c]
    3b5b:	mov    eax,DWORD PTR [rsp+0x84]
    3b62:	lea    rdx,[rip+0x993f]        # d4a8 <_IO_stdin_used+0x4a8>
    3b69:	mov    esi,0x1
    3b6e:	mov    rdi,QWORD PTR [rip+0xe0ab]        # 11c20 <stderr@@GLIBC_2.2.5>
    3b75:	add    rsp,0x1288
    3b7c:	mov    r9d,ecx
    3b7f:	pop    rbx
    3b80:	mov    r8d,eax
    3b83:	pop    rbp
    3b84:	sub    r9d,eax
    3b87:	pop    r12
    3b89:	xor    eax,eax
    3b8b:	pop    r13
    3b8d:	pop    r14
    3b8f:	pop    r15
    3b91:	jmp    1270 <__fprintf_chk@plt>
    3b96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    3ba0:	movsxd rdi,esi
    3ba3:	jmp    3409 <mainSort+0x429>
    3ba8:	nop    DWORD PTR [rax+rax*1+0x0]
    3bb0:	movsxd r15,DWORD PTR [rsp+0x4c]
    3bb5:	mov    esi,DWORD PTR [rsp+0x18]
    3bb9:	mov    ecx,r14d
    3bbc:	mov    rdx,QWORD PTR [rsp+0x60]
    3bc1:	mov    eax,r15d
    3bc4:	add    eax,esi
    3bc6:	lea    rbp,[rdx+r15*4]
    3bca:	sar    eax,1
    3bcc:	cdqe   
    3bce:	add    ecx,DWORD PTR [rdx+rax*4]
    3bd1:	movsxd rax,esi
    3bd4:	mov    esi,r14d
    3bd7:	add    esi,DWORD PTR [rdx+rax*4]
    3bda:	movzx  ecx,BYTE PTR [r12+rcx*1]
    3bdf:	movzx  r11d,BYTE PTR [r12+rsi*1]
    3be4:	mov    esi,DWORD PTR [rbp+0x0]
    3be7:	lea    eax,[r14+rsi*1]
    3beb:	movzx  eax,BYTE PTR [r12+rax*1]
    3bf0:	mov    edi,eax
    3bf2:	cmp    r11b,al
    3bf5:	jae    3bfe <mainSort+0xc1e>
    3bf7:	mov    edi,r11d
    3bfa:	movzx  r11d,al
    3bfe:	cmp    cl,r11b
    3c01:	jae    3c0d <mainSort+0xc2d>
    3c03:	cmp    cl,dil
    3c06:	cmovae edi,ecx
    3c09:	movzx  r11d,dil
    3c0d:	mov    r13d,DWORD PTR [rsp+0x4c]
    3c12:	mov    edx,DWORD PTR [rsp+0x18]
    3c16:	cmp    r13d,edx
    3c19:	jg     3d0e <mainSort+0xd2e>
    3c1f:	mov    r8d,r13d
    3c22:	sub    eax,r11d
    3c25:	mov    QWORD PTR [rsp+0x8],rbp
    3c2a:	mov    rbx,rbp
    3c2d:	mov    r10d,edx
    3c30:	mov    ecx,edx
    3c32:	mov    rbp,QWORD PTR [rsp+0x60]
    3c37:	mov    edx,r8d
    3c3a:	test   eax,eax
    3c3c:	je     3cd4 <mainSort+0xcf4>
    3c42:	nop    WORD PTR [rax+rax*1+0x0]
    3c48:	jle    3d60 <mainSort+0xd80>
    3c4e:	cmp    r8d,ecx
    3c51:	jg     3d00 <mainSort+0xd20>
    3c57:	movsxd rax,ecx
    3c5a:	lea    rax,[rbp+rax*4+0x0]
    3c5f:	jmp    3c77 <mainSort+0xc97>
    3c61:	nop    DWORD PTR [rax+0x0]
    3c68:	js     3ca0 <mainSort+0xcc0>
    3c6a:	sub    rax,0x4
    3c6e:	cmp    r8d,ecx
    3c71:	jg     3d00 <mainSort+0xd20>
    3c77:	mov    esi,DWORD PTR [rax]
    3c79:	sub    ecx,0x1
    3c7c:	lea    edi,[r14+rsi*1]
    3c80:	movzx  edi,BYTE PTR [r12+rdi*1]
    3c85:	cmp    edi,r11d
    3c88:	jne    3c68 <mainSort+0xc88>
    3c8a:	movsxd rdi,r10d
    3c8d:	sub    r10d,0x1
    3c91:	lea    rdi,[rbp+rdi*4+0x0]
    3c96:	mov    r9d,DWORD PTR [rdi]
    3c99:	mov    DWORD PTR [rax],r9d
    3c9c:	mov    DWORD PTR [rdi],esi
    3c9e:	jmp    3c6a <mainSort+0xc8a>
    3ca0:	mov    edx,DWORD PTR [rbx]
    3ca2:	add    r8d,0x1
    3ca6:	mov    DWORD PTR [rbx],esi
    3ca8:	mov    DWORD PTR [rax],edx
    3caa:	mov    edx,r8d
    3cad:	add    rbx,0x4
    3cb1:	cmp    r8d,ecx
    3cb4:	jg     3d00 <mainSort+0xd20>
    3cb6:	movsxd rax,r8d
    3cb9:	mov    edx,r8d
    3cbc:	mov    esi,DWORD PTR [rbp+rax*4+0x0]
    3cc0:	lea    eax,[r14+rsi*1]
    3cc4:	movzx  eax,BYTE PTR [r12+rax*1]
    3cc9:	sub    eax,r11d
    3ccc:	test   eax,eax
    3cce:	jne    3c48 <mainSort+0xc68>
    3cd4:	movsxd rax,r13d
    3cd7:	lea    r8d,[r8+0x1]
    3cdb:	add    r13d,0x1
    3cdf:	add    rbx,0x4
    3ce3:	lea    rax,[rbp+rax*4+0x0]
    3ce8:	mov    edx,r8d
    3ceb:	mov    edi,DWORD PTR [rax]
    3ced:	mov    DWORD PTR [rbx-0x4],edi
    3cf0:	mov    DWORD PTR [rax],esi
    3cf2:	cmp    r8d,ecx
    3cf5:	jle    3cb6 <mainSort+0xcd6>
    3cf7:	nop    WORD PTR [rax+rax*1+0x0]
    3d00:	mov    rbp,QWORD PTR [rsp+0x8]
    3d05:	cmp    r13d,r10d
    3d08:	jle    3db8 <mainSort+0xdd8>
    3d0e:	movsxd rax,DWORD PTR [rsp+0x74]
    3d13:	lea    ecx,[r14+0x1]
    3d17:	mov    DWORD PTR [rsp+rax*4+0x3e0],ecx
    3d1e:	movsxd rax,DWORD PTR [rsp+0x74]
    3d23:	mov    ebx,DWORD PTR [rsp+rax*4+0x250]
    3d2a:	mov    r14d,DWORD PTR [rsp+rax*4+0x3e0]
    3d32:	mov    DWORD PTR [rsp+0x18],ebx
    3d36:	mov    ebx,DWORD PTR [rsp+rax*4+0xc0]
    3d3d:	mov    DWORD PTR [rsp+0x4c],ebx
    3d41:	cmp    DWORD PTR [rsp+0x10],0x63
    3d46:	jle    3558 <mainSort+0x578>
    3d4c:	mov    edi,0x3e9
    3d51:	call   5120 <BZ2_bz__AssertH__fail>
    3d56:	jmp    3558 <mainSort+0x578>
    3d5b:	nop    DWORD PTR [rax+rax*1+0x0]
    3d60:	lea    r8d,[r8+0x1]
    3d64:	mov    edx,r8d
    3d67:	jmp    3cad <mainSort+0xccd>
    3d6c:	sub    rsp,0x8
    3d70:	mov    rdi,QWORD PTR [rip+0xdea9]        # 11c20 <stderr@@GLIBC_2.2.5>
    3d77:	mov    esi,0x1
    3d7c:	lea    rdx,[rip+0x96f5]        # d478 <_IO_stdin_used+0x478>
    3d83:	mov    eax,DWORD PTR [rsp+0x90]
    3d8a:	add    eax,0x1
    3d8d:	push   rax
    3d8e:	mov    r9d,DWORD PTR [rsp+0x94]
    3d96:	xor    eax,eax
    3d98:	mov    r8d,DWORD PTR [rsp+0x58]
    3d9d:	mov    ecx,DWORD PTR [rsp+0x80]
    3da4:	call   1270 <__fprintf_chk@plt>
    3da9:	pop    r8
    3dab:	pop    r9
    3dad:	jmp    351c <mainSort+0x53c>
    3db2:	nop    WORD PTR [rax+rax*1+0x0]
    3db8:	mov    eax,edx
    3dba:	mov    esi,r13d
    3dbd:	sub    esi,DWORD PTR [rsp+0x4c]
    3dc1:	sub    eax,r13d
    3dc4:	cmp    eax,esi
    3dc6:	cmovle esi,eax
    3dc9:	mov    eax,edx
    3dcb:	sub    eax,esi
    3dcd:	test   esi,esi
    3dcf:	jle    3e09 <mainSort+0xe29>
    3dd1:	mov    rbx,QWORD PTR [rsp+0x60]
    3dd6:	sub    esi,0x1
    3dd9:	cdqe   
    3ddb:	add    rsi,r15
    3dde:	sub    rax,r15
    3de1:	lea    rsi,[rbx+rsi*4+0x4]
    3de6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    3df0:	mov    edi,DWORD PTR [rbp+0x0]
    3df3:	mov    r8d,DWORD PTR [rbp+rax*4+0x0]
    3df8:	mov    DWORD PTR [rbp+0x0],r8d
    3dfc:	mov    DWORD PTR [rbp+rax*4+0x0],edi
    3e00:	add    rbp,0x4
    3e04:	cmp    rsi,rbp
    3e07:	jne    3df0 <mainSort+0xe10>
    3e09:	mov    eax,r10d
    3e0c:	sub    eax,ecx
    3e0e:	mov    ecx,eax
    3e10:	mov    eax,DWORD PTR [rsp+0x18]
    3e14:	mov    r8d,eax
    3e17:	sub    r8d,r10d
    3e1a:	cmp    r8d,ecx
    3e1d:	cmovg  r8d,ecx
    3e21:	sub    eax,r8d
    3e24:	movsxd rsi,eax
    3e27:	test   r8d,r8d
    3e2a:	jle    3e67 <mainSort+0xe87>
    3e2c:	movsxd rdi,edx
    3e2f:	mov    rbx,QWORD PTR [rsp+0x60]
    3e34:	sub    r8d,0x1
    3e38:	add    r8,rdi
    3e3b:	sub    rsi,rdi
    3e3e:	lea    rax,[rbx+rdi*4]
    3e42:	lea    r8,[rbx+r8*4+0x4]
    3e47:	nop    WORD PTR [rax+rax*1+0x0]
    3e50:	mov    edi,DWORD PTR [rax]
    3e52:	mov    r10d,DWORD PTR [rax+rsi*4+0x4]
    3e57:	mov    DWORD PTR [rax],r10d
    3e5a:	mov    DWORD PTR [rax+rsi*4+0x4],edi
    3e5e:	add    rax,0x4
    3e62:	cmp    r8,rax
    3e65:	jne    3e50 <mainSort+0xe70>
    3e67:	mov    r9d,DWORD PTR [rsp+0x4c]
    3e6c:	mov    r15d,DWORD PTR [rsp+0x18]
    3e71:	lea    edi,[r14+0x1]
    3e75:	lea    eax,[rdx+r9*1]
    3e79:	mov    r11d,r15d
    3e7c:	mov    ebx,r15d
    3e7f:	sub    eax,r13d
    3e82:	lea    r8d,[rax-0x1]
    3e86:	mov    edx,eax
    3e88:	mov    eax,r15d
    3e8b:	sub    eax,ecx
    3e8d:	mov    esi,r8d
    3e90:	lea    ecx,[rax+0x1]
    3e93:	sub    esi,r9d
    3e96:	sub    r11d,ecx
    3e99:	cmp    esi,r11d
    3e9c:	jl     3eb8 <mainSort+0xed8>
    3e9e:	mov    r10d,esi
    3ea1:	mov    esi,r11d
    3ea4:	mov    ebx,r8d
    3ea7:	mov    r8d,r15d
    3eaa:	mov    r11d,r10d
    3ead:	mov    r10d,ecx
    3eb0:	mov    ecx,r9d
    3eb3:	mov    DWORD PTR [rsp+0x4c],r10d
    3eb8:	mov    r10d,eax
    3ebb:	sub    r10d,edx
    3ebe:	cmp    r10d,esi
    3ec1:	jg     3f69 <mainSort+0xf89>
    3ec7:	mov    r10d,esi
    3eca:	mov    esi,edx
    3ecc:	mov    edx,DWORD PTR [rsp+0x4c]
    3ed0:	mov    DWORD PTR [rsp+0x18],eax
    3ed4:	mov    DWORD PTR [rsp+0x4c],esi
    3ed8:	mov    ebp,edi
    3eda:	mov    eax,r8d
    3edd:	mov    edi,r14d
    3ee0:	cmp    r11d,r10d
    3ee3:	jge    3ef9 <mainSort+0xf19>
    3ee5:	mov    esi,r14d
    3ee8:	mov    r14d,edi
    3eeb:	mov    edi,esi
    3eed:	mov    esi,ebx
    3eef:	mov    ebx,eax
    3ef1:	mov    eax,esi
    3ef3:	mov    esi,ecx
    3ef5:	mov    ecx,edx
    3ef7:	mov    edx,esi
    3ef9:	movsxd rsi,DWORD PTR [rsp+0x74]
    3efe:	mov    DWORD PTR [rsp+rsi*4+0xc0],ecx
    3f05:	movsxd rcx,DWORD PTR [rsp+0x10]
    3f0a:	mov    DWORD PTR [rsp+rsi*4+0x250],ebx
    3f11:	mov    DWORD PTR [rsp+rcx*4+0xc0],edx
    3f18:	mov    edx,DWORD PTR [rsp+0x4c]
    3f1c:	mov    rbx,rcx
    3f1f:	mov    DWORD PTR [rsp+rcx*4+0x250],eax
    3f26:	lea    eax,[rcx+0x1]
    3f29:	add    ebx,0x2
    3f2c:	cdqe   
    3f2e:	mov    DWORD PTR [rsp+rsi*4+0x3e0],r14d
    3f36:	mov    r14d,ebp
    3f39:	mov    DWORD PTR [rsp+rax*4+0xc0],edx
    3f40:	mov    edx,DWORD PTR [rsp+0x18]
    3f44:	mov    DWORD PTR [rsp+rcx*4+0x3e0],edi
    3f4b:	mov    DWORD PTR [rsp+rax*4+0x250],edx
    3f52:	mov    DWORD PTR [rsp+rax*4+0x3e0],ebp
    3f59:	lea    eax,[rbx-0x1]
    3f5c:	mov    DWORD PTR [rsp+0x10],ebx
    3f60:	mov    DWORD PTR [rsp+0x74],eax
    3f64:	jmp    3d41 <mainSort+0xd61>
    3f69:	mov    DWORD PTR [rsp+0x18],r8d
    3f6e:	mov    ebp,r14d
    3f71:	jmp    3ee0 <mainSort+0xf00>
    3f76:	mov    rcx,QWORD PTR [rip+0xdca3]        # 11c20 <stderr@@GLIBC_2.2.5>
    3f7d:	mov    edx,0x21
    3f82:	mov    esi,0x1
    3f87:	lea    rdi,[rip+0x94c2]        # d450 <_IO_stdin_used+0x450>
    3f8e:	call   1260 <fwrite@plt>
    3f93:	jmp    3047 <mainSort+0x67>
    3f98:	mov    rcx,QWORD PTR [rip+0xdc81]        # 11c20 <stderr@@GLIBC_2.2.5>
    3f9f:	mov    edx,0x1b
    3fa4:	mov    esi,0x1
    3fa9:	lea    rdi,[rip+0x9428]        # d3d8 <_IO_stdin_used+0x3d8>
    3fb0:	call   1260 <fwrite@plt>
    3fb5:	jmp    31c0 <mainSort+0x1e0>
    3fba:	mov    edi,0x3ee
    3fbf:	call   5120 <BZ2_bz__AssertH__fail>
    3fc4:	jmp    38ba <mainSort+0x8da>
    3fc9:	test   edi,edi
    3fcb:	js     3b10 <mainSort+0xb30>
    3fd1:	xor    ecx,ecx
    3fd3:	jmp    3ab3 <mainSort+0xad3>
    3fd8:	nop    DWORD PTR [rax+rax*1+0x0]
    3fe0:	mov    edx,DWORD PTR [rsp+0xa4]
    3fe7:	jmp    32c1 <mainSort+0x2e1>
    3fec:	mov    ecx,DWORD PTR [rsp+0xa4]
    3ff3:	jmp    313f <mainSort+0x15f>
    3ff8:	mov    eax,DWORD PTR [rsp+0x74]
    3ffc:	mov    DWORD PTR [rsp+0x10],eax
    4000:	sub    eax,0x1
    4003:	mov    DWORD PTR [rsp+0x74],eax
    4007:	jmp    3d1e <mainSort+0xd3e>
    400c:	call   11a0 <__stack_chk_fail@plt>
    4011:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    401c:	nop    DWORD PTR [rax+0x0]

0000000000004020 <BZ2_blockSort>:
    4020:	endbr64 
    4024:	push   r15
    4026:	push   r14
    4028:	push   r13
    402a:	push   r12
    402c:	push   rbp
    402d:	push   rbx
    402e:	mov    rbx,rdi
    4031:	sub    rsp,0x18
    4035:	mov    r13d,DWORD PTR [rdi+0x6c]
    4039:	mov    rbp,QWORD PTR [rdi+0x38]
    403d:	mov    rax,QWORD PTR fs:0x28
    4046:	mov    QWORD PTR [rsp+0x8],rax
    404b:	xor    eax,eax
    404d:	mov    r14,QWORD PTR [rdi+0x28]
    4051:	mov    r15d,DWORD PTR [rdi+0x290]
    4058:	cmp    r13d,0x270f
    405f:	jle    40e5 <BZ2_blockSort+0xc5>
    4065:	mov    edx,r13d
    4068:	mov    eax,0x64
    406d:	mov    ecx,0x1
    4072:	mov    r8d,r13d
    4075:	and    edx,0x1
    4078:	cmp    DWORD PTR [rdi+0x58],0x64
    407c:	cmovle eax,DWORD PTR [rdi+0x58]
    4080:	mov    r9d,r15d
    4083:	mov    rsi,QWORD PTR [rdi+0x40]
    4087:	lea    edx,[rdx+r13*1+0x22]
    408c:	mov    rdi,rbp
    408f:	test   eax,eax
    4091:	movsxd rdx,edx
    4094:	cmovle eax,ecx
    4097:	mov    ecx,0xaaaaaaab
    409c:	sub    rsp,0x8
    40a0:	add    rdx,rsi
    40a3:	lea    r12d,[rax-0x1]
    40a7:	imul   r12,rcx
    40ab:	mov    rcx,r14
    40ae:	shr    r12,0x21
    40b2:	imul   r12d,r13d
    40b6:	mov    DWORD PTR [rsp+0xc],r12d
    40bb:	lea    rax,[rsp+0xc]
    40c0:	push   rax
    40c1:	call   2fe0 <mainSort>
    40c6:	pop    rdi
    40c7:	pop    r8
    40c9:	cmp    r15d,0x2
    40cd:	jg     4160 <BZ2_blockSort+0x140>
    40d3:	mov    ecx,DWORD PTR [rsp+0x4]
    40d7:	test   ecx,ecx
    40d9:	jns    40fb <BZ2_blockSort+0xdb>
    40db:	cmp    r15d,0x2
    40df:	je     41ac <BZ2_blockSort+0x18c>
    40e5:	mov    rsi,QWORD PTR [rbx+0x20]
    40e9:	mov    rdi,QWORD PTR [rbx+0x18]
    40ed:	mov    r8d,r15d
    40f0:	mov    ecx,r13d
    40f3:	mov    rdx,r14
    40f6:	call   2330 <fallbackSort>
    40fb:	mov    eax,DWORD PTR [rbx+0x6c]
    40fe:	mov    DWORD PTR [rbx+0x30],0xffffffff
    4105:	test   eax,eax
    4107:	jle    41d0 <BZ2_blockSort+0x1b0>
    410d:	lea    ecx,[rax-0x1]
    4110:	xor    eax,eax
    4112:	jmp    4128 <BZ2_blockSort+0x108>
    4114:	nop    DWORD PTR [rax+0x0]
    4118:	lea    rdx,[rax+0x1]
    411c:	cmp    rcx,rax
    411f:	je     41d0 <BZ2_blockSort+0x1b0>
    4125:	mov    rax,rdx
    4128:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    412c:	test   edx,edx
    412e:	jne    4118 <BZ2_blockSort+0xf8>
    4130:	mov    DWORD PTR [rbx+0x30],eax
    4133:	mov    rax,QWORD PTR [rsp+0x8]
    4138:	xor    rax,QWORD PTR fs:0x28
    4141:	jne    41df <BZ2_blockSort+0x1bf>
    4147:	add    rsp,0x18
    414b:	pop    rbx
    414c:	pop    rbp
    414d:	pop    r12
    414f:	pop    r13
    4151:	pop    r14
    4153:	pop    r15
    4155:	ret    
    4156:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4160:	mov    ecx,r12d
    4163:	pxor   xmm0,xmm0
    4167:	sub    ecx,DWORD PTR [rsp+0x4]
    416b:	mov    esi,0x1
    4170:	pxor   xmm1,xmm1
    4174:	cvtsi2ss xmm0,ecx
    4178:	mov    r8d,r13d
    417b:	mov    eax,0x1
    4180:	cvtsi2ss xmm1,r13d
    4185:	mov    rdi,QWORD PTR [rip+0xda94]        # 11c20 <stderr@@GLIBC_2.2.5>
    418c:	lea    rdx,[rip+0x9345]        # d4d8 <_IO_stdin_used+0x4d8>
    4193:	divss  xmm0,xmm1
    4197:	cvtss2sd xmm0,xmm0
    419b:	call   1270 <__fprintf_chk@plt>
    41a0:	mov    esi,DWORD PTR [rsp+0x4]
    41a4:	test   esi,esi
    41a6:	jns    40fb <BZ2_blockSort+0xdb>
    41ac:	mov    rcx,QWORD PTR [rip+0xda6d]        # 11c20 <stderr@@GLIBC_2.2.5>
    41b3:	mov    edx,0x35
    41b8:	mov    esi,0x1
    41bd:	lea    rdi,[rip+0x933c]        # d500 <_IO_stdin_used+0x500>
    41c4:	call   1260 <fwrite@plt>
    41c9:	jmp    40e5 <BZ2_blockSort+0xc5>
    41ce:	xchg   ax,ax
    41d0:	mov    edi,0x3eb
    41d5:	call   5120 <BZ2_bz__AssertH__fail>
    41da:	jmp    4133 <BZ2_blockSort+0x113>
    41df:	call   11a0 <__stack_chk_fail@plt>
    41e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
    41ee:	xchg   ax,ax

00000000000041f0 <myfeof>:
    41f0:	push   rbp
    41f1:	mov    ebp,edi
    41f3:	call   1e10 <spec_getc>
    41f8:	mov    r8d,0x1
    41fe:	cmp    eax,0xffffffff
    4201:	je     4210 <myfeof+0x20>
    4203:	movzx  edi,al
    4206:	mov    esi,ebp
    4208:	call   1ef0 <spec_ungetc>
    420d:	xor    r8d,r8d
    4210:	mov    eax,r8d
    4213:	pop    rbp
    4214:	ret    
    4215:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000004220 <configError>:
    4220:	push   rax
    4221:	pop    rax
    4222:	lea    rdi,[rip+0x934f]        # d578 <incs+0x38>
    4229:	mov    edx,0xeb
    422e:	mov    esi,0x1
    4233:	sub    rsp,0x8
    4237:	mov    rcx,QWORD PTR [rip+0xd9e2]        # 11c20 <stderr@@GLIBC_2.2.5>
    423e:	call   1260 <fwrite@plt>
    4243:	xor    edi,edi
    4245:	mov    DWORD PTR [rip+0xe2c1],0x0        # 12510 <exitValue>
    424f:	call   1250 <exit@plt>
    4254:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    425f:	nop

0000000000004260 <uInt64_toAscii.isra.0>:
    4260:	push   r13
    4262:	mov    r10d,0xcccccccd
    4268:	push   r12
    426a:	push   rbp
    426b:	xor    ebp,ebp
    426d:	push   rbx
    426e:	sub    rsp,0x48
    4272:	mov    rax,QWORD PTR fs:0x28
    427b:	mov    QWORD PTR [rsp+0x38],rax
    4280:	xor    eax,eax
    4282:	mov    QWORD PTR [rsp+0x8],rsi
    4287:	lea    rbx,[rsp+0x10]
    428c:	lea    r9,[rsp+0x8]
    4291:	mov    r12,rbx
    4294:	lea    r13,[rsp+0xf]
    4299:	mov    r11,rbx
    429c:	mov    rcx,r13
    429f:	mov    rsi,r9
    42a2:	xor    edx,edx
    42a4:	nop    DWORD PTR [rax+0x0]
    42a8:	movzx  eax,BYTE PTR [rcx]
    42ab:	shl    edx,0x8
    42ae:	mov    r8,rcx
    42b1:	sub    rcx,0x1
    42b5:	add    eax,edx
    42b7:	mov    rdx,rax
    42ba:	imul   rax,r10
    42be:	shr    rax,0x23
    42c2:	mov    BYTE PTR [rcx+0x1],al
    42c5:	lea    eax,[rax+rax*4]
    42c8:	add    eax,eax
    42ca:	sub    edx,eax
    42cc:	cmp    r8,r9
    42cf:	jne    42a8 <uInt64_toAscii.isra.0+0x48>
    42d1:	add    edx,0x30
    42d4:	lea    eax,[rbp+0x1]
    42d7:	mov    BYTE PTR [r12],dl
    42db:	nop    DWORD PTR [rax+rax*1+0x0]
    42e0:	cmp    BYTE PTR [rsi],0x0
    42e3:	jne    4330 <uInt64_toAscii.isra.0+0xd0>
    42e5:	add    rsi,0x1
    42e9:	cmp    r11,rsi
    42ec:	jne    42e0 <uInt64_toAscii.isra.0+0x80>
    42ee:	cdqe   
    42f0:	mov    BYTE PTR [rdi+rax*1],0x0
    42f4:	add    rbx,rax
    42f7:	movsxd rax,ebp
    42fa:	add    rax,rdi
    42fd:	jmp    4308 <uInt64_toAscii.isra.0+0xa8>
    42ff:	nop
    4300:	movzx  edx,BYTE PTR [rbx-0x1]
    4304:	add    rdi,0x1
    4308:	mov    BYTE PTR [rdi],dl
    430a:	sub    rbx,0x1
    430e:	cmp    rax,rdi
    4311:	jne    4300 <uInt64_toAscii.isra.0+0xa0>
    4313:	mov    rax,QWORD PTR [rsp+0x38]
    4318:	xor    rax,QWORD PTR fs:0x28
    4321:	jne    433b <uInt64_toAscii.isra.0+0xdb>
    4323:	add    rsp,0x48
    4327:	pop    rbx
    4328:	pop    rbp
    4329:	pop    r12
    432b:	pop    r13
    432d:	ret    
    432e:	xchg   ax,ax
    4330:	add    r12,0x1
    4334:	mov    ebp,eax
    4336:	jmp    429c <uInt64_toAscii.isra.0+0x3c>
    433b:	call   11a0 <__stack_chk_fail@plt>

0000000000004340 <cadvise.part.0>:
    4340:	mov    rcx,QWORD PTR [rip+0xd8d9]        # 11c20 <stderr@@GLIBC_2.2.5>
    4347:	mov    edx,0xf0
    434c:	mov    esi,0x1
    4351:	lea    rdi,[rip+0x9310]        # d668 <incs+0x128>
    4358:	jmp    1260 <fwrite@plt>
    435d:	nop    DWORD PTR [rax]

0000000000004360 <showFileNames.part.0>:
    4360:	mov    rdi,QWORD PTR [rip+0xd8b9]        # 11c20 <stderr@@GLIBC_2.2.5>
    4367:	lea    r8,[rip+0xe1b2]        # 12520 <outName>
    436e:	xor    eax,eax
    4370:	lea    rcx,[rip+0xe5c9]        # 12940 <inName>
    4377:	lea    rdx,[rip+0x93e2]        # d760 <incs+0x220>
    437e:	mov    esi,0x1
    4383:	jmp    1270 <__fprintf_chk@plt>
    4388:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004390 <cleanUpAndFail.isra.0>:
    4390:	push   rax
    4391:	pop    rax
    4392:	xor    edi,edi
    4394:	sub    rsp,0x8
    4398:	mov    DWORD PTR [rip+0xe16e],0x0        # 12510 <exitValue>
    43a2:	call   1250 <exit@plt>
    43a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000043b0 <outOfMemory>:
    43b0:	push   rax
    43b1:	pop    rax
    43b2:	xor    eax,eax
    43b4:	lea    rdx,[rip+0x93cd]        # d788 <incs+0x248>
    43bb:	mov    esi,0x1
    43c0:	sub    rsp,0x8
    43c4:	mov    rcx,QWORD PTR [rip+0xe98d]        # 12d58 <progName>
    43cb:	mov    rdi,QWORD PTR [rip+0xd84e]        # 11c20 <stderr@@GLIBC_2.2.5>
    43d2:	call   1270 <__fprintf_chk@plt>
    43d7:	cmp    BYTE PTR [rip+0xe136],0x0        # 12514 <noisy>
    43de:	jne    43e5 <outOfMemory+0x35>
    43e0:	call   4390 <cleanUpAndFail.isra.0>
    43e5:	call   4360 <showFileNames.part.0>
    43ea:	jmp    43e0 <outOfMemory+0x30>
    43ec:	nop    DWORD PTR [rax+0x0]

00000000000043f0 <panic>:
    43f0:	push   rax
    43f1:	pop    rax
    43f2:	xor    eax,eax
    43f4:	lea    rdx,[rip+0x93b5]        # d7b0 <incs+0x270>
    43fb:	mov    esi,0x1
    4400:	sub    rsp,0x8
    4404:	mov    r8,rdi
    4407:	mov    rcx,QWORD PTR [rip+0xe94a]        # 12d58 <progName>
    440e:	mov    rdi,QWORD PTR [rip+0xd80b]        # 11c20 <stderr@@GLIBC_2.2.5>
    4415:	call   1270 <__fprintf_chk@plt>
    441a:	cmp    BYTE PTR [rip+0xe0f3],0x0        # 12514 <noisy>
    4421:	jne    4428 <panic+0x38>
    4423:	call   4390 <cleanUpAndFail.isra.0>
    4428:	call   4360 <showFileNames.part.0>
    442d:	jmp    4423 <panic+0x33>
    442f:	nop

0000000000004430 <ioError>:
    4430:	push   rax
    4431:	pop    rax
    4432:	lea    rdx,[rip+0x940f]        # d848 <incs+0x308>
    4439:	mov    esi,0x1
    443e:	xor    eax,eax
    4440:	sub    rsp,0x8
    4444:	mov    rcx,QWORD PTR [rip+0xe90d]        # 12d58 <progName>
    444b:	mov    rdi,QWORD PTR [rip+0xd7ce]        # 11c20 <stderr@@GLIBC_2.2.5>
    4452:	call   1270 <__fprintf_chk@plt>
    4457:	mov    rdi,QWORD PTR [rip+0xe8fa]        # 12d58 <progName>
    445e:	call   1240 <perror@plt>
    4463:	cmp    BYTE PTR [rip+0xe0aa],0x0        # 12514 <noisy>
    446a:	jne    4471 <ioError+0x41>
    446c:	call   4390 <cleanUpAndFail.isra.0>
    4471:	call   4360 <showFileNames.part.0>
    4476:	jmp    446c <ioError+0x3c>
    4478:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004480 <compressStream>:
    4480:	endbr64 
    4484:	push   r15
    4486:	push   r14
    4488:	push   r13
    448a:	push   r12
    448c:	push   rbp
    448d:	push   rbx
    448e:	sub    rsp,0x1000
    4495:	or     QWORD PTR [rsp],0x0
    449a:	sub    rsp,0x418
    44a1:	mov    r8d,DWORD PTR [rip+0xe044]        # 124ec <workFactor>
    44a8:	mov    ecx,DWORD PTR [rip+0xdc1e]        # 120cc <verbosity>
    44ae:	mov    edx,DWORD PTR [rip+0xe058]        # 1250c <blockSize100k>
    44b4:	mov    rax,QWORD PTR fs:0x28
    44bd:	mov    QWORD PTR [rsp+0x1408],rax
    44c5:	xor    eax,eax
    44c7:	lea    r13,[rsp+0x28]
    44cc:	mov    ebx,edi
    44ce:	mov    rdi,r13
    44d1:	call   6690 <BZ2_bzWriteOpen>
    44d6:	mov    r11d,DWORD PTR [rsp+0x28]
    44db:	mov    r12,rax
    44de:	test   r11d,r11d
    44e1:	jne    4708 <compressStream+0x288>
    44e7:	cmp    DWORD PTR [rip+0xdbde],0x1        # 120cc <verbosity>
    44ee:	jg     4760 <compressStream+0x2e0>
    44f4:	lea    rbp,[rsp+0x80]
    44fc:	jmp    4536 <compressStream+0xb6>
    44fe:	xchg   ax,ax
    4500:	mov    ecx,ebx
    4502:	mov    edx,0x1388
    4507:	mov    esi,0x1
    450c:	mov    rdi,rbp
    450f:	call   1cd0 <spec_fread>
    4514:	mov    ecx,eax
    4516:	test   eax,eax
    4518:	jle    4528 <compressStream+0xa8>
    451a:	mov    rdx,rbp
    451d:	mov    rsi,r12
    4520:	mov    rdi,r13
    4523:	call   6820 <BZ2_bzWrite>
    4528:	mov    r10d,DWORD PTR [rsp+0x28]
    452d:	test   r10d,r10d
    4530:	jne    4708 <compressStream+0x288>
    4536:	mov    edi,ebx
    4538:	call   41f0 <myfeof>
    453d:	test   al,al
    453f:	je     4500 <compressStream+0x80>
    4541:	lea    rbp,[rsp+0x20]
    4546:	lea    rbx,[rsp+0x1c]
    454b:	mov    rdi,r13
    454e:	xor    edx,edx
    4550:	lea    r14,[rsp+0x18]
    4555:	sub    rsp,0x8
    4559:	mov    r9,rbp
    455c:	mov    r8,rbx
    455f:	lea    r15,[rsp+0x2c]
    4564:	mov    rcx,r14
    4567:	mov    rsi,r12
    456a:	push   r15
    456c:	call   69b0 <BZ2_bzWriteClose64>
    4571:	pop    rdi
    4572:	pop    r8
    4574:	mov    r9d,DWORD PTR [rsp+0x28]
    4579:	test   r9d,r9d
    457c:	jne    471c <compressStream+0x29c>
    4582:	mov    DWORD PTR [rip+0xdf6c],0x0        # 124f8 <outputHandleJustInCase>
    458c:	mov    esi,DWORD PTR [rip+0xdb3a]        # 120cc <verbosity>
    4592:	test   esi,esi
    4594:	jle    46da <compressStream+0x25a>
    459a:	mov    eax,DWORD PTR [rsp+0x18]
    459e:	mov    edx,DWORD PTR [rsp+0x1c]
    45a2:	mov    ebx,eax
    45a4:	or     ebx,edx
    45a6:	je     4795 <compressStream+0x315>
    45ac:	mov    ecx,DWORD PTR [rsp+0x20]
    45b0:	mov    DWORD PTR [rsp+0x34],edx
    45b4:	movzx  edx,al
    45b7:	lea    rsi,[rsp+0x38]
    45bc:	mov    DWORD PTR [rsp+0x30],eax
    45c0:	movsd  xmm2,QWORD PTR [rip+0x9438]        # da00 <incs+0x4c0>
    45c8:	pxor   xmm4,xmm4
    45cc:	mov    eax,DWORD PTR [rsp+0x24]
    45d0:	movsd  xmm5,QWORD PTR [rip+0x8df0]        # d3c8 <_IO_stdin_used+0x3c8>
    45d8:	mov    DWORD PTR [rsp+0x38],ecx
    45dc:	movapd xmm1,xmm2
    45e0:	mov    DWORD PTR [rsp+0x3c],eax
    45e4:	movzx  eax,cl
    45e7:	lea    rcx,[rsp+0x31]
    45ec:	jmp    45f7 <compressStream+0x177>
    45ee:	xchg   ax,ax
    45f0:	movzx  edx,BYTE PTR [rcx]
    45f3:	add    rcx,0x1
    45f7:	pxor   xmm0,xmm0
    45fb:	cvtsi2sd xmm0,edx
    45ff:	mulsd  xmm0,xmm1
    4603:	mulsd  xmm1,xmm5
    4607:	addsd  xmm4,xmm0
    460b:	cmp    rcx,rsi
    460e:	jne    45f0 <compressStream+0x170>
    4610:	lea    r12,[rsp+0x39]
    4615:	lea    rdx,[rsp+0x40]
    461a:	movapd xmm1,xmm2
    461e:	pxor   xmm3,xmm3
    4622:	jmp    4631 <compressStream+0x1b1>
    4624:	nop    DWORD PTR [rax+0x0]
    4628:	movzx  eax,BYTE PTR [r12]
    462d:	add    r12,0x1
    4631:	pxor   xmm0,xmm0
    4635:	cvtsi2sd xmm0,eax
    4639:	mulsd  xmm0,xmm1
    463d:	mulsd  xmm1,xmm5
    4641:	addsd  xmm3,xmm0
    4645:	cmp    r12,rdx
    4648:	jne    4628 <compressStream+0x1a8>
    464a:	mov    rsi,QWORD PTR [rsp+0x30]
    464f:	mov    rdi,r12
    4652:	movsd  QWORD PTR [rsp+0x8],xmm4
    4658:	lea    rbx,[rsp+0x60]
    465d:	movsd  QWORD PTR [rsp],xmm3
    4662:	call   4260 <uInt64_toAscii.isra.0>
    4667:	mov    rsi,QWORD PTR [rsp+0x38]
    466c:	mov    rdi,rbx
    466f:	call   4260 <uInt64_toAscii.isra.0>
    4674:	movsd  xmm3,QWORD PTR [rsp]
    4679:	mov    r8,rbx
    467c:	mov    rcx,r12
    467f:	movsd  xmm4,QWORD PTR [rsp+0x8]
    4685:	movsd  xmm1,QWORD PTR [rip+0x9383]        # da10 <incs+0x4d0>
    468d:	lea    rdx,[rip+0x91fc]        # d890 <incs+0x350>
    4694:	mov    esi,0x1
    4699:	movapd xmm0,xmm3
    469d:	mov    rax,QWORD PTR [rip+0x935c]        # da00 <incs+0x4c0>
    46a4:	mov    rdi,QWORD PTR [rip+0xd575]        # 11c20 <stderr@@GLIBC_2.2.5>
    46ab:	divsd  xmm0,xmm4
    46af:	mulsd  xmm1,xmm3
    46b3:	movq   xmm2,rax
    46b8:	mov    eax,0x3
    46bd:	divsd  xmm1,xmm4
    46c1:	subsd  xmm2,xmm0
    46c5:	mulsd  xmm2,QWORD PTR [rip+0x933b]        # da08 <incs+0x4c8>
    46cd:	movapd xmm0,xmm4
    46d1:	divsd  xmm0,xmm3
    46d5:	call   1270 <__fprintf_chk@plt>
    46da:	mov    rax,QWORD PTR [rsp+0x1408]
    46e2:	xor    rax,QWORD PTR fs:0x28
    46eb:	jne    47b7 <compressStream+0x337>
    46f1:	add    rsp,0x1418
    46f8:	pop    rbx
    46f9:	pop    rbp
    46fa:	pop    r12
    46fc:	pop    r13
    46fe:	pop    r14
    4700:	pop    r15
    4702:	ret    
    4703:	nop    DWORD PTR [rax+rax*1+0x0]
    4708:	lea    rbp,[rsp+0x20]
    470d:	lea    rbx,[rsp+0x1c]
    4712:	lea    r14,[rsp+0x18]
    4717:	lea    r15,[rsp+0x24]
    471c:	lea    rdi,[rsp+0x2c]
    4721:	sub    rsp,0x8
    4725:	mov    rcx,r14
    4728:	mov    r9,rbp
    472b:	push   r15
    472d:	mov    edx,0x1
    4732:	mov    r8,rbx
    4735:	mov    rsi,r12
    4738:	call   69b0 <BZ2_bzWriteClose64>
    473d:	mov    eax,DWORD PTR [rsp+0x38]
    4741:	pop    rdx
    4742:	pop    rcx
    4743:	cmp    eax,0xfffffffa
    4746:	je     4780 <compressStream+0x300>
    4748:	cmp    eax,0xfffffffd
    474b:	je     4788 <compressStream+0x308>
    474d:	cmp    eax,0xfffffff7
    4750:	je     4790 <compressStream+0x310>
    4752:	lea    rdi,[rip+0x926d]        # d9c6 <incs+0x486>
    4759:	call   43f0 <panic>
    475e:	xchg   ax,ax
    4760:	mov    rsi,QWORD PTR [rip+0xd4b9]        # 11c20 <stderr@@GLIBC_2.2.5>
    4767:	mov    edi,0xa
    476c:	call   11d0 <fputc@plt>
    4771:	jmp    44f4 <compressStream+0x74>
    4776:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4780:	call   4430 <ioError>
    4785:	nop    DWORD PTR [rax]
    4788:	call   43b0 <outOfMemory>
    478d:	nop    DWORD PTR [rax]
    4790:	call   4220 <configError>
    4795:	mov    rcx,QWORD PTR [rip+0xd484]        # 11c20 <stderr@@GLIBC_2.2.5>
    479c:	mov    edx,0x15
    47a1:	mov    esi,0x1
    47a6:	lea    rdi,[rip+0x91e0]        # d98d <incs+0x44d>
    47ad:	call   1260 <fwrite@plt>
    47b2:	jmp    46da <compressStream+0x25a>
    47b7:	call   11a0 <__stack_chk_fail@plt>
    47bc:	nop    DWORD PTR [rax+0x0]

00000000000047c0 <uncompressStream>:
    47c0:	endbr64 
    47c4:	push   r15
    47c6:	push   r14
    47c8:	push   r13
    47ca:	push   r12
    47cc:	push   rbp
    47cd:	push   rbx
    47ce:	sub    rsp,0x1000
    47d5:	or     QWORD PTR [rsp],0x0
    47da:	sub    rsp,0x1000
    47e1:	or     QWORD PTR [rsp],0x0
    47e6:	sub    rsp,0x758
    47ed:	xor    r9d,r9d
    47f0:	mov    rax,QWORD PTR fs:0x28
    47f9:	mov    QWORD PTR [rsp+0x2748],rax
    4801:	xor    eax,eax
    4803:	mov    DWORD PTR [rsp+0x24],0x0
    480b:	mov    r12d,edi
    480e:	mov    r14d,esi
    4811:	mov    DWORD PTR [rsp+0xc],0x0
    4819:	lea    rbp,[rsp+0x1c]
    481e:	lea    rbx,[rsp+0x30]
    4823:	lea    r13,[rsp+0x13c0]
    482b:	movzx  ecx,BYTE PTR [rip+0xdcc2]        # 124f4 <smallMode>
    4832:	mov    r8,r13
    4835:	mov    esi,r12d
    4838:	mov    rdi,rbp
    483b:	mov    edx,DWORD PTR [rip+0xd88b]        # 120cc <verbosity>
    4841:	call   6bf0 <BZ2_bzReadOpen>
    4846:	mov    r15,rax
    4849:	test   rax,rax
    484c:	je     495d <uncompressStream+0x19d>
    4852:	mov    ecx,DWORD PTR [rsp+0x1c]
    4856:	test   ecx,ecx
    4858:	jne    495d <uncompressStream+0x19d>
    485e:	add    DWORD PTR [rsp+0xc],0x1
    4863:	nop    DWORD PTR [rax+rax*1+0x0]
    4868:	test   ecx,ecx
    486a:	jne    48b8 <uncompressStream+0xf8>
    486c:	mov    ecx,0x1388
    4871:	mov    rdx,rbx
    4874:	mov    rsi,r15
    4877:	mov    rdi,rbp
    487a:	call   6fe0 <BZ2_bzRead>
    487f:	mov    ecx,DWORD PTR [rsp+0x1c]
    4883:	cmp    ecx,0xfffffffb
    4886:	je     4950 <uncompressStream+0x190>
    488c:	test   ecx,0xfffffffb
    4892:	jne    4868 <uncompressStream+0xa8>
    4894:	test   eax,eax
    4896:	jle    4868 <uncompressStream+0xa8>
    4898:	mov    ecx,r14d
    489b:	mov    edx,eax
    489d:	mov    esi,0x1
    48a2:	mov    rdi,rbx
    48a5:	call   2130 <spec_fwrite>
    48aa:	mov    ecx,DWORD PTR [rsp+0x1c]
    48ae:	test   ecx,ecx
    48b0:	je     486c <uncompressStream+0xac>
    48b2:	nop    WORD PTR [rax+rax*1+0x0]
    48b8:	cmp    ecx,0x4
    48bb:	jne    495d <uncompressStream+0x19d>
    48c1:	lea    rdx,[rsp+0x28]
    48c6:	lea    rcx,[rsp+0x24]
    48cb:	mov    rsi,r15
    48ce:	mov    rdi,rbp
    48d1:	call   7250 <BZ2_bzReadGetUnused>
    48d6:	mov    edx,DWORD PTR [rsp+0x1c]
    48da:	test   edx,edx
    48dc:	jne    4b25 <uncompressStream+0x365>
    48e2:	mov    edx,DWORD PTR [rsp+0x24]
    48e6:	mov    rsi,QWORD PTR [rsp+0x28]
    48eb:	xor    eax,eax
    48ed:	lea    ecx,[rdx-0x1]
    48f0:	test   edx,edx
    48f2:	jle    490d <uncompressStream+0x14d>
    48f4:	nop    DWORD PTR [rax+0x0]
    48f8:	movzx  edx,BYTE PTR [rsi+rax*1]
    48fc:	mov    BYTE PTR [r13+rax*1+0x0],dl
    4901:	mov    rdx,rax
    4904:	add    rax,0x1
    4908:	cmp    rcx,rdx
    490b:	jne    48f8 <uncompressStream+0x138>
    490d:	mov    rsi,r15
    4910:	mov    rdi,rbp
    4913:	call   6f50 <BZ2_bzReadClose>
    4918:	mov    eax,DWORD PTR [rsp+0x1c]
    491c:	test   eax,eax
    491e:	jne    4b25 <uncompressStream+0x365>
    4924:	mov    r9d,DWORD PTR [rsp+0x24]
    4929:	test   r9d,r9d
    492c:	jne    482b <uncompressStream+0x6b>
    4932:	mov    edi,r12d
    4935:	call   41f0 <myfeof>
    493a:	test   al,al
    493c:	jne    4a35 <uncompressStream+0x275>
    4942:	mov    r9d,DWORD PTR [rsp+0x24]
    4947:	jmp    482b <uncompressStream+0x6b>
    494c:	nop    DWORD PTR [rax+0x0]
    4950:	cmp    BYTE PTR [rip+0xe3f4],0x0        # 12d4b <forceOverwrite>
    4957:	jne    4a00 <uncompressStream+0x240>
    495d:	lea    rdi,[rsp+0x20]
    4962:	mov    rsi,r15
    4965:	call   6f50 <BZ2_bzReadClose>
    496a:	mov    eax,DWORD PTR [rsp+0x1c]
    496e:	add    eax,0x9
    4971:	cmp    eax,0x6
    4974:	ja     4b19 <uncompressStream+0x359>
    497a:	lea    rdx,[rip+0x905f]        # d9e0 <incs+0x4a0>
    4981:	movsxd rax,DWORD PTR [rdx+rax*4]
    4985:	add    rax,rdx
    4988:	notrack jmp rax
    498b:	xor    eax,eax
    498d:	cmp    DWORD PTR [rsp+0xc],0x1
    4992:	je     49a2 <uncompressStream+0x1e2>
    4994:	cmp    BYTE PTR [rip+0xdb79],0x0        # 12514 <noisy>
    499b:	jne    49d0 <uncompressStream+0x210>
    499d:	mov    eax,0x1
    49a2:	mov    rbx,QWORD PTR [rsp+0x2748]
    49aa:	xor    rbx,QWORD PTR fs:0x28
    49b3:	jne    4b31 <uncompressStream+0x371>
    49b9:	add    rsp,0x2758
    49c0:	pop    rbx
    49c1:	pop    rbp
    49c2:	pop    r12
    49c4:	pop    r13
    49c6:	pop    r14
    49c8:	pop    r15
    49ca:	ret    
    49cb:	nop    DWORD PTR [rax+rax*1+0x0]
    49d0:	mov    rcx,QWORD PTR [rip+0xe381]        # 12d58 <progName>
    49d7:	mov    rdi,QWORD PTR [rip+0xd242]        # 11c20 <stderr@@GLIBC_2.2.5>
    49de:	lea    r8,[rip+0xdf5b]        # 12940 <inName>
    49e5:	lea    rdx,[rip+0x8f74]        # d960 <incs+0x420>
    49ec:	mov    esi,0x1
    49f1:	call   1270 <__fprintf_chk@plt>
    49f6:	mov    eax,0x1
    49fb:	jmp    49a2 <uncompressStream+0x1e2>
    49fd:	nop    DWORD PTR [rax]
    4a00:	mov    edi,r12d
    4a03:	call   1ff0 <spec_rewind>
    4a08:	jmp    4a29 <uncompressStream+0x269>
    4a0a:	nop    WORD PTR [rax+rax*1+0x0]
    4a10:	mov    ecx,r12d
    4a13:	mov    edx,0x1388
    4a18:	mov    esi,0x1
    4a1d:	mov    rdi,rbx
    4a20:	call   1cd0 <spec_fread>
    4a25:	test   eax,eax
    4a27:	jg     4a73 <uncompressStream+0x2b3>
    4a29:	mov    edi,r12d
    4a2c:	call   41f0 <myfeof>
    4a31:	test   al,al
    4a33:	je     4a10 <uncompressStream+0x250>
    4a35:	cmp    DWORD PTR [rip+0xd690],0x1        # 120cc <verbosity>
    4a3c:	mov    DWORD PTR [rip+0xdab2],0x0        # 124f8 <outputHandleJustInCase>
    4a46:	jle    499d <uncompressStream+0x1dd>
    4a4c:	mov    rcx,QWORD PTR [rip+0xd1cd]        # 11c20 <stderr@@GLIBC_2.2.5>
    4a53:	mov    edx,0x5
    4a58:	mov    esi,0x1
    4a5d:	lea    rdi,[rip+0x8f5a]        # d9be <incs+0x47e>
    4a64:	call   1260 <fwrite@plt>
    4a69:	mov    eax,0x1
    4a6e:	jmp    49a2 <uncompressStream+0x1e2>
    4a73:	mov    ecx,r14d
    4a76:	mov    edx,eax
    4a78:	mov    esi,0x1
    4a7d:	mov    rdi,rbx
    4a80:	call   2130 <spec_fwrite>
    4a85:	jmp    4a29 <uncompressStream+0x269>
    4a87:	call   4220 <configError>
    4a8c:	call   43b0 <outOfMemory>
    4a91:	mov    rcx,QWORD PTR [rip+0xe2c0]        # 12d58 <progName>
    4a98:	mov    rdi,QWORD PTR [rip+0xd181]        # 11c20 <stderr@@GLIBC_2.2.5>
    4a9f:	xor    eax,eax
    4aa1:	lea    rdx,[rip+0x8e28]        # d8d0 <incs+0x390>
    4aa8:	mov    esi,0x1
    4aad:	call   1270 <__fprintf_chk@plt>
    4ab2:	cmp    BYTE PTR [rip+0xda5b],0x0        # 12514 <noisy>
    4ab9:	jne    4b04 <uncompressStream+0x344>
    4abb:	call   4390 <cleanUpAndFail.isra.0>
    4ac0:	call   4430 <ioError>
    4ac5:	cmp    BYTE PTR [rip+0xda48],0x0        # 12514 <noisy>
    4acc:	je     4abb <uncompressStream+0x2fb>
    4ace:	mov    rcx,QWORD PTR [rip+0xe283]        # 12d58 <progName>
    4ad5:	mov    rdi,QWORD PTR [rip+0xd144]        # 11c20 <stderr@@GLIBC_2.2.5>
    4adc:	lea    rdx,[rip+0x8e1d]        # d900 <incs+0x3c0>
    4ae3:	xor    eax,eax
    4ae5:	mov    esi,0x1
    4aea:	call   1270 <__fprintf_chk@plt>
    4aef:	mov    rdi,QWORD PTR [rip+0xe262]        # 12d58 <progName>
    4af6:	call   1240 <perror@plt>
    4afb:	cmp    BYTE PTR [rip+0xda12],0x0        # 12514 <noisy>
    4b02:	je     4abb <uncompressStream+0x2fb>
    4b04:	call   4360 <showFileNames.part.0>
    4b09:	cmp    BYTE PTR [rip+0xda04],0x0        # 12514 <noisy>
    4b10:	je     4abb <uncompressStream+0x2fb>
    4b12:	call   4340 <cadvise.part.0>
    4b17:	jmp    4abb <uncompressStream+0x2fb>
    4b19:	lea    rdi,[rip+0x8ea4]        # d9c4 <incs+0x484>
    4b20:	call   43f0 <panic>
    4b25:	lea    rdi,[rip+0x8e77]        # d9a3 <incs+0x463>
    4b2c:	call   43f0 <panic>
    4b31:	call   11a0 <__stack_chk_fail@plt>
    4b36:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004b40 <add_pair_to_block>:
    4b40:	mov    esi,DWORD PTR [rdi+0x60]
    4b43:	mov    r10d,DWORD PTR [rdi+0x5c]
    4b47:	test   esi,esi
    4b49:	jle    4c70 <add_pair_to_block+0x130>
    4b4f:	mov    edx,DWORD PTR [rdi+0x288]
    4b55:	movzx  r9d,r10b
    4b59:	xor    ecx,ecx
    4b5b:	lea    r8,[rip+0xc4be]        # 11020 <BZ2_crc32Table>
    4b62:	nop    WORD PTR [rax+rax*1+0x0]
    4b68:	mov    eax,edx
    4b6a:	add    ecx,0x1
    4b6d:	shl    edx,0x8
    4b70:	shr    eax,0x18
    4b73:	xor    eax,r9d
    4b76:	xor    edx,DWORD PTR [r8+rax*4]
    4b7a:	cmp    ecx,esi
    4b7c:	jne    4b68 <add_pair_to_block+0x28>
    4b7e:	mov    eax,r10d
    4b81:	mov    DWORD PTR [rdi+0x288],edx
    4b87:	mov    BYTE PTR [rdi+rax*1+0x80],0x1
    4b8f:	movsxd rax,DWORD PTR [rdi+0x6c]
    4b93:	add    rax,QWORD PTR [rdi+0x40]
    4b97:	cmp    ecx,0x2
    4b9a:	je     4c20 <add_pair_to_block+0xe0>
    4ba0:	cmp    esi,0x3
    4ba3:	je     4c50 <add_pair_to_block+0x110>
    4ba9:	cmp    esi,0x1
    4bac:	je     4c40 <add_pair_to_block+0x100>
    4bb2:	sub    esi,0x4
    4bb5:	movsxd rsi,esi
    4bb8:	mov    BYTE PTR [rdi+rsi*1+0x80],0x1
    4bc0:	mov    BYTE PTR [rax],r10b
    4bc3:	mov    eax,DWORD PTR [rdi+0x6c]
    4bc6:	mov    rdx,QWORD PTR [rdi+0x40]
    4bca:	add    eax,0x1
    4bcd:	mov    DWORD PTR [rdi+0x6c],eax
    4bd0:	cdqe   
    4bd2:	mov    BYTE PTR [rdx+rax*1],r10b
    4bd6:	mov    eax,DWORD PTR [rdi+0x6c]
    4bd9:	mov    rdx,QWORD PTR [rdi+0x40]
    4bdd:	add    eax,0x1
    4be0:	mov    DWORD PTR [rdi+0x6c],eax
    4be3:	cdqe   
    4be5:	mov    BYTE PTR [rdx+rax*1],r10b
    4be9:	mov    eax,DWORD PTR [rdi+0x6c]
    4bec:	mov    rdx,QWORD PTR [rdi+0x40]
    4bf0:	add    eax,0x1
    4bf3:	mov    DWORD PTR [rdi+0x6c],eax
    4bf6:	cdqe   
    4bf8:	mov    BYTE PTR [rdx+rax*1],r10b
    4bfc:	mov    eax,DWORD PTR [rdi+0x6c]
    4bff:	movzx  esi,BYTE PTR [rdi+0x60]
    4c03:	mov    rcx,QWORD PTR [rdi+0x40]
    4c07:	add    eax,0x1
    4c0a:	mov    DWORD PTR [rdi+0x6c],eax
    4c0d:	lea    edx,[rsi-0x4]
    4c10:	cdqe   
    4c12:	mov    BYTE PTR [rcx+rax*1],dl
    4c15:	add    DWORD PTR [rdi+0x6c],0x1
    4c19:	ret    
    4c1a:	nop    WORD PTR [rax+rax*1+0x0]
    4c20:	mov    BYTE PTR [rax],r10b
    4c23:	mov    eax,DWORD PTR [rdi+0x6c]
    4c26:	mov    rdx,QWORD PTR [rdi+0x40]
    4c2a:	add    eax,0x1
    4c2d:	mov    DWORD PTR [rdi+0x6c],eax
    4c30:	cdqe   
    4c32:	mov    BYTE PTR [rdx+rax*1],r10b
    4c36:	add    DWORD PTR [rdi+0x6c],0x1
    4c3a:	ret    
    4c3b:	nop    DWORD PTR [rax+rax*1+0x0]
    4c40:	mov    BYTE PTR [rax],r10b
    4c43:	add    DWORD PTR [rdi+0x6c],0x1
    4c47:	ret    
    4c48:	nop    DWORD PTR [rax+rax*1+0x0]
    4c50:	mov    BYTE PTR [rax],r10b
    4c53:	mov    eax,DWORD PTR [rdi+0x6c]
    4c56:	mov    rdx,QWORD PTR [rdi+0x40]
    4c5a:	add    eax,0x1
    4c5d:	mov    DWORD PTR [rdi+0x6c],eax
    4c60:	cdqe   
    4c62:	mov    BYTE PTR [rdx+rax*1],r10b
    4c66:	jmp    4c23 <add_pair_to_block+0xe3>
    4c68:	nop    DWORD PTR [rax+rax*1+0x0]
    4c70:	mov    eax,r10d
    4c73:	mov    BYTE PTR [rdi+rax*1+0x80],0x1
    4c7b:	movsxd rax,DWORD PTR [rdi+0x6c]
    4c7f:	add    rax,QWORD PTR [rdi+0x40]
    4c83:	jmp    4ba0 <add_pair_to_block+0x60>
    4c88:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004c90 <default_bzfree>:
    4c90:	endbr64 
    4c94:	mov    rdi,rsi
    4c97:	test   rsi,rsi
    4c9a:	je     4ca8 <default_bzfree+0x18>
    4c9c:	jmp    1170 <free@plt>
    4ca1:	nop    DWORD PTR [rax+0x0]
    4ca8:	ret    
    4ca9:	nop    DWORD PTR [rax+0x0]

0000000000004cb0 <default_bzalloc>:
    4cb0:	endbr64 
    4cb4:	imul   esi,edx
    4cb7:	movsxd rdi,esi
    4cba:	jmp    1210 <malloc@plt>
    4cbf:	nop

0000000000004cc0 <handle_compress.isra.0>:
    4cc0:	push   r13
    4cc2:	xor    r13d,r13d
    4cc5:	push   r12
    4cc7:	lea    r12,[rip+0xc352]        # 11020 <BZ2_crc32Table>
    4cce:	push   rbp
    4ccf:	xor    ebp,ebp
    4cd1:	push   rbx
    4cd2:	mov    rbx,rdi
    4cd5:	sub    rsp,0x8
    4cd9:	mov    eax,DWORD PTR [rdi+0xc]
    4cdc:	jmp    4ce9 <handle_compress.isra.0+0x29>
    4cde:	xchg   ax,ax
    4ce0:	cmp    eax,0x2
    4ce3:	je     50e4 <handle_compress.isra.0+0x424>
    4ce9:	cmp    eax,0x1
    4cec:	jne    4ce0 <handle_compress.isra.0+0x20>
    4cee:	mov    rax,QWORD PTR [rbx]
    4cf1:	mov    edx,DWORD PTR [rbx+0x78]
    4cf4:	xor    edi,edi
    4cf6:	mov    ecx,DWORD PTR [rax+0x20]
    4cf9:	jmp    4d49 <handle_compress.isra.0+0x89>
    4cfb:	nop    DWORD PTR [rax+rax*1+0x0]
    4d00:	cmp    edx,esi
    4d02:	jge    4f31 <handle_compress.isra.0+0x271>
    4d08:	mov    rcx,QWORD PTR [rbx+0x50]
    4d0c:	movsxd rdx,edx
    4d0f:	mov    rax,QWORD PTR [rax+0x18]
    4d13:	movzx  edx,BYTE PTR [rcx+rdx*1]
    4d17:	mov    BYTE PTR [rax],dl
    4d19:	mov    eax,DWORD PTR [rbx+0x78]
    4d1c:	lea    edx,[rax+0x1]
    4d1f:	mov    rax,QWORD PTR [rbx]
    4d22:	mov    DWORD PTR [rbx+0x78],edx
    4d25:	mov    edi,DWORD PTR [rax+0x20]
    4d28:	add    QWORD PTR [rax+0x18],0x1
    4d2d:	lea    ecx,[rdi-0x1]
    4d30:	mov    edi,DWORD PTR [rax+0x24]
    4d33:	mov    DWORD PTR [rax+0x20],ecx
    4d36:	lea    esi,[rdi+0x1]
    4d39:	mov    edi,0x1
    4d3e:	mov    DWORD PTR [rax+0x24],esi
    4d41:	test   esi,esi
    4d43:	je     4f72 <handle_compress.isra.0+0x2b2>
    4d49:	mov    esi,DWORD PTR [rbx+0x74]
    4d4c:	test   ecx,ecx
    4d4e:	jne    4d00 <handle_compress.isra.0+0x40>
    4d50:	or     ebp,edi
    4d52:	cmp    edx,esi
    4d54:	jl     4ea8 <handle_compress.isra.0+0x1e8>
    4d5a:	mov    ecx,DWORD PTR [rbx+0x8]
    4d5d:	cmp    ecx,0x4
    4d60:	jne    4d88 <handle_compress.isra.0+0xc8>
    4d62:	mov    r8d,DWORD PTR [rbx+0x10]
    4d66:	test   r8d,r8d
    4d69:	jne    4d88 <handle_compress.isra.0+0xc8>
    4d6b:	cmp    DWORD PTR [rbx+0x5c],0xff
    4d72:	ja     4ea8 <handle_compress.isra.0+0x1e8>
    4d78:	mov    edi,DWORD PTR [rbx+0x60]
    4d7b:	test   edi,edi
    4d7d:	jle    4ea8 <handle_compress.isra.0+0x1e8>
    4d83:	nop    DWORD PTR [rax+rax*1+0x0]
    4d88:	mov    DWORD PTR [rbx+0x6c],0x0
    4d8f:	lea    rax,[rbx+0x80]
    4d96:	lea    rdx,[rbx+0x180]
    4d9d:	mov    QWORD PTR [rbx+0x74],0x0
    4da5:	mov    DWORD PTR [rbx+0x288],0xffffffff
    4daf:	nop
    4db0:	mov    BYTE PTR [rax],0x0
    4db3:	add    rax,0x1
    4db7:	cmp    rdx,rax
    4dba:	jne    4db0 <handle_compress.isra.0+0xf0>
    4dbc:	add    DWORD PTR [rbx+0x294],0x1
    4dc3:	xor    edx,edx
    4dc5:	mov    DWORD PTR [rbx+0xc],0x2
    4dcc:	cmp    ecx,0x3
    4dcf:	je     4e89 <handle_compress.isra.0+0x1c9>
    4dd5:	mov    r9d,DWORD PTR [rbx+0x70]
    4dd9:	cmp    ecx,0x2
    4ddc:	je     4f7b <handle_compress.isra.0+0x2bb>
    4de2:	cmp    r9d,edx
    4de5:	jle    4f45 <handle_compress.isra.0+0x285>
    4deb:	mov    rax,QWORD PTR [rbx]
    4dee:	xor    esi,esi
    4df0:	mov    edi,DWORD PTR [rax+0x8]
    4df3:	jmp    4e48 <handle_compress.isra.0+0x188>
    4df5:	nop    DWORD PTR [rax]
    4df8:	cmp    r9d,0x1
    4dfc:	je     4ec0 <handle_compress.isra.0+0x200>
    4e02:	cmp    r8d,0xff
    4e09:	jbe    4f18 <handle_compress.isra.0+0x258>
    4e0f:	mov    DWORD PTR [rbx+0x5c],r11d
    4e13:	mov    edx,DWORD PTR [rbx+0x6c]
    4e16:	mov    DWORD PTR [rbx+0x60],0x1
    4e1d:	add    rsi,0x1
    4e21:	sub    edi,0x1
    4e24:	add    DWORD PTR [rax+0xc],0x1
    4e28:	mov    QWORD PTR [rax],rsi
    4e2b:	mov    DWORD PTR [rax+0x8],edi
    4e2e:	jne    4e34 <handle_compress.isra.0+0x174>
    4e30:	add    DWORD PTR [rax+0x10],0x1
    4e34:	sub    ecx,0x1
    4e37:	mov    esi,0x1
    4e3c:	mov    DWORD PTR [rbx+0x10],ecx
    4e3f:	cmp    DWORD PTR [rbx+0x70],edx
    4e42:	jle    5075 <handle_compress.isra.0+0x3b5>
    4e48:	test   edi,edi
    4e4a:	je     50ef <handle_compress.isra.0+0x42f>
    4e50:	mov    ecx,DWORD PTR [rbx+0x10]
    4e53:	test   ecx,ecx
    4e55:	je     509d <handle_compress.isra.0+0x3dd>
    4e5b:	mov    rsi,QWORD PTR [rax]
    4e5e:	mov    r8d,DWORD PTR [rbx+0x5c]
    4e62:	mov    r9d,DWORD PTR [rbx+0x60]
    4e66:	movzx  r11d,BYTE PTR [rsi]
    4e6a:	cmp    r11d,r8d
    4e6d:	jne    4df8 <handle_compress.isra.0+0x138>
    4e6f:	cmp    r9d,0xff
    4e76:	je     4f18 <handle_compress.isra.0+0x258>
    4e7c:	add    r9d,0x1
    4e80:	mov    edx,DWORD PTR [rbx+0x6c]
    4e83:	mov    DWORD PTR [rbx+0x60],r9d
    4e87:	jmp    4e1d <handle_compress.isra.0+0x15d>
    4e89:	mov    esi,DWORD PTR [rbx+0x10]
    4e8c:	test   esi,esi
    4e8e:	jne    50d9 <handle_compress.isra.0+0x419>
    4e94:	cmp    DWORD PTR [rbx+0x5c],0xff
    4e9b:	ja     4ea8 <handle_compress.isra.0+0x1e8>
    4e9d:	mov    ecx,DWORD PTR [rbx+0x60]
    4ea0:	test   ecx,ecx
    4ea2:	jg     50d9 <handle_compress.isra.0+0x419>
    4ea8:	or     r13b,bpl
    4eab:	setne  al
    4eae:	add    rsp,0x8
    4eb2:	pop    rbx
    4eb3:	pop    rbp
    4eb4:	pop    r12
    4eb6:	pop    r13
    4eb8:	ret    
    4eb9:	nop    DWORD PTR [rax+0x0]
    4ec0:	mov    eax,DWORD PTR [rbx+0x288]
    4ec6:	movsxd rdx,edx
    4ec9:	mov    ecx,eax
    4ecb:	shl    eax,0x8
    4ece:	shr    ecx,0x18
    4ed1:	xor    ecx,r8d
    4ed4:	movzx  ecx,cl
    4ed7:	xor    eax,DWORD PTR [r12+rcx*4]
    4edb:	mov    DWORD PTR [rbx+0x288],eax
    4ee1:	mov    eax,r8d
    4ee4:	mov    BYTE PTR [rbx+rax*1+0x80],0x1
    4eec:	mov    rax,QWORD PTR [rbx+0x40]
    4ef0:	mov    BYTE PTR [rax+rdx*1],r8b
    4ef4:	mov    eax,DWORD PTR [rbx+0x6c]
    4ef7:	mov    DWORD PTR [rbx+0x5c],r11d
    4efb:	mov    ecx,DWORD PTR [rbx+0x10]
    4efe:	lea    edx,[rax+0x1]
    4f01:	mov    rax,QWORD PTR [rbx]
    4f04:	mov    DWORD PTR [rbx+0x6c],edx
    4f07:	mov    rsi,QWORD PTR [rax]
    4f0a:	mov    edi,DWORD PTR [rax+0x8]
    4f0d:	jmp    4e1d <handle_compress.isra.0+0x15d>
    4f12:	nop    WORD PTR [rax+rax*1+0x0]
    4f18:	mov    rdi,rbx
    4f1b:	call   4b40 <add_pair_to_block>
    4f20:	mov    rax,QWORD PTR [rbx]
    4f23:	mov    ecx,DWORD PTR [rbx+0x10]
    4f26:	mov    rsi,QWORD PTR [rax]
    4f29:	mov    edi,DWORD PTR [rax+0x8]
    4f2c:	jmp    4e0f <handle_compress.isra.0+0x14f>
    4f31:	or     ebp,edi
    4f33:	jmp    4d5a <handle_compress.isra.0+0x9a>
    4f38:	or     r13d,esi
    4f3b:	cmp    DWORD PTR [rbx+0x8],0x2
    4f3f:	je     4ea8 <handle_compress.isra.0+0x1e8>
    4f45:	mov    edx,DWORD PTR [rbx+0x10]
    4f48:	test   edx,edx
    4f4a:	je     50aa <handle_compress.isra.0+0x3ea>
    4f50:	mov    eax,DWORD PTR [rbx+0x70]
    4f53:	cmp    DWORD PTR [rbx+0x6c],eax
    4f56:	jge    5087 <handle_compress.isra.0+0x3c7>
    4f5c:	mov    rax,QWORD PTR [rbx]
    4f5f:	mov    eax,DWORD PTR [rax+0x8]
    4f62:	test   eax,eax
    4f64:	je     4ea8 <handle_compress.isra.0+0x1e8>
    4f6a:	mov    eax,DWORD PTR [rbx+0xc]
    4f6d:	jmp    4ce9 <handle_compress.isra.0+0x29>
    4f72:	add    DWORD PTR [rax+0x28],0x1
    4f76:	jmp    4d49 <handle_compress.isra.0+0x89>
    4f7b:	xor    esi,esi
    4f7d:	jmp    4fc0 <handle_compress.isra.0+0x300>
    4f7f:	nop
    4f80:	cmp    r8d,0x1
    4f84:	je     5000 <handle_compress.isra.0+0x340>
    4f86:	cmp    edi,0xff
    4f8c:	jbe    5058 <handle_compress.isra.0+0x398>
    4f92:	mov    DWORD PTR [rbx+0x5c],r11d
    4f96:	mov    DWORD PTR [rbx+0x60],0x1
    4f9d:	mov    edi,DWORD PTR [rax+0xc]
    4fa0:	sub    ecx,0x1
    4fa3:	add    rsi,0x1
    4fa7:	mov    DWORD PTR [rax+0x8],ecx
    4faa:	lea    ecx,[rdi+0x1]
    4fad:	mov    QWORD PTR [rax],rsi
    4fb0:	mov    esi,0x1
    4fb5:	mov    DWORD PTR [rax+0xc],ecx
    4fb8:	test   ecx,ecx
    4fba:	je     5101 <handle_compress.isra.0+0x441>
    4fc0:	cmp    edx,r9d
    4fc3:	jge    507a <handle_compress.isra.0+0x3ba>
    4fc9:	mov    rax,QWORD PTR [rbx]
    4fcc:	mov    ecx,DWORD PTR [rax+0x8]
    4fcf:	test   ecx,ecx
    4fd1:	je     4f38 <handle_compress.isra.0+0x278>
    4fd7:	mov    rsi,QWORD PTR [rax]
    4fda:	mov    edi,DWORD PTR [rbx+0x5c]
    4fdd:	mov    r8d,DWORD PTR [rbx+0x60]
    4fe1:	movzx  r11d,BYTE PTR [rsi]
    4fe5:	cmp    r11d,edi
    4fe8:	jne    4f80 <handle_compress.isra.0+0x2c0>
    4fea:	cmp    r8d,0xff
    4ff1:	je     5058 <handle_compress.isra.0+0x398>
    4ff3:	add    r8d,0x1
    4ff7:	mov    DWORD PTR [rbx+0x60],r8d
    4ffb:	jmp    4f9d <handle_compress.isra.0+0x2dd>
    4ffd:	nop    DWORD PTR [rax]
    5000:	mov    eax,DWORD PTR [rbx+0x288]
    5006:	movsxd rdx,edx
    5009:	mov    ecx,eax
    500b:	shl    eax,0x8
    500e:	shr    ecx,0x18
    5011:	xor    ecx,edi
    5013:	movzx  ecx,cl
    5016:	xor    eax,DWORD PTR [r12+rcx*4]
    501a:	mov    DWORD PTR [rbx+0x288],eax
    5020:	mov    eax,edi
    5022:	mov    BYTE PTR [rbx+rax*1+0x80],0x1
    502a:	mov    rax,QWORD PTR [rbx+0x40]
    502e:	mov    BYTE PTR [rax+rdx*1],dil
    5032:	mov    eax,DWORD PTR [rbx+0x6c]
    5035:	mov    DWORD PTR [rbx+0x5c],r11d
    5039:	mov    r9d,DWORD PTR [rbx+0x70]
    503d:	lea    edx,[rax+0x1]
    5040:	mov    rax,QWORD PTR [rbx]
    5043:	mov    DWORD PTR [rbx+0x6c],edx
    5046:	mov    rsi,QWORD PTR [rax]
    5049:	mov    ecx,DWORD PTR [rax+0x8]
    504c:	jmp    4f9d <handle_compress.isra.0+0x2dd>
    5051:	nop    DWORD PTR [rax+0x0]
    5058:	mov    rdi,rbx
    505b:	call   4b40 <add_pair_to_block>
    5060:	mov    rax,QWORD PTR [rbx]
    5063:	mov    edx,DWORD PTR [rbx+0x6c]
    5066:	mov    r9d,DWORD PTR [rbx+0x70]
    506a:	mov    rsi,QWORD PTR [rax]
    506d:	mov    ecx,DWORD PTR [rax+0x8]
    5070:	jmp    4f92 <handle_compress.isra.0+0x2d2>
    5075:	mov    esi,0x1
    507a:	or     r13d,esi
    507d:	cmp    DWORD PTR [rbx+0x8],0x2
    5081:	jne    4f45 <handle_compress.isra.0+0x285>
    5087:	xor    esi,esi
    5089:	mov    rdi,rbx
    508c:	call   7830 <BZ2_compressBlock>
    5091:	mov    DWORD PTR [rbx+0xc],0x1
    5098:	jmp    4cee <handle_compress.isra.0+0x2e>
    509d:	or     r13d,esi
    50a0:	cmp    DWORD PTR [rbx+0x8],0x2
    50a4:	je     4f50 <handle_compress.isra.0+0x290>
    50aa:	cmp    DWORD PTR [rbx+0x5c],0xff
    50b1:	jbe    510a <handle_compress.isra.0+0x44a>
    50b3:	mov    QWORD PTR [rbx+0x5c],0x100
    50bb:	xor    esi,esi
    50bd:	cmp    DWORD PTR [rbx+0x8],0x4
    50c1:	mov    rdi,rbx
    50c4:	sete   sil
    50c8:	call   7830 <BZ2_compressBlock>
    50cd:	mov    DWORD PTR [rbx+0xc],0x1
    50d4:	jmp    4cee <handle_compress.isra.0+0x2e>
    50d9:	mov    r9d,DWORD PTR [rbx+0x70]
    50dd:	xor    edx,edx
    50df:	jmp    4de2 <handle_compress.isra.0+0x122>
    50e4:	mov    edx,DWORD PTR [rbx+0x6c]
    50e7:	mov    ecx,DWORD PTR [rbx+0x8]
    50ea:	jmp    4dd5 <handle_compress.isra.0+0x115>
    50ef:	or     r13d,esi
    50f2:	cmp    DWORD PTR [rbx+0x8],0x2
    50f6:	jne    4f45 <handle_compress.isra.0+0x285>
    50fc:	jmp    4f50 <handle_compress.isra.0+0x290>
    5101:	add    DWORD PTR [rax+0x10],0x1
    5105:	jmp    4fc0 <handle_compress.isra.0+0x300>
    510a:	mov    rdi,rbx
    510d:	call   4b40 <add_pair_to_block>
    5112:	jmp    50b3 <handle_compress.isra.0+0x3f3>
    5114:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    511f:	nop

0000000000005120 <BZ2_bz__AssertH__fail>:
    5120:	endbr64 
    5124:	push   rbx
    5125:	mov    ecx,edi
    5127:	mov    ebx,edi
    5129:	mov    rdi,QWORD PTR [rip+0xcaf0]        # 11c20 <stderr@@GLIBC_2.2.5>
    5130:	xor    eax,eax
    5132:	lea    r8,[rip+0x88df]        # da18 <incs+0x4d8>
    5139:	mov    esi,0x1
    513e:	lea    rdx,[rip+0x897b]        # dac0 <incs+0x580>
    5145:	call   1270 <__fprintf_chk@plt>
    514a:	cmp    ebx,0x3ef
    5150:	je     5159 <BZ2_bz__AssertH__fail+0x39>
    5152:	xor    edi,edi
    5154:	call   1250 <exit@plt>
    5159:	mov    rcx,QWORD PTR [rip+0xcac0]        # 11c20 <stderr@@GLIBC_2.2.5>
    5160:	mov    edx,0x420
    5165:	mov    esi,0x1
    516a:	lea    rdi,[rip+0x8a5f]        # dbd0 <incs+0x690>
    5171:	call   1260 <fwrite@plt>
    5176:	jmp    5152 <BZ2_bz__AssertH__fail+0x32>
    5178:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005180 <BZ2_bzCompressInit>:
    5180:	endbr64 
    5184:	lea    eax,[rsi-0x1]
    5187:	cmp    eax,0x8
    518a:	ja     53b7 <BZ2_bzCompressInit+0x237>
    5190:	push   r15
    5192:	push   r14
    5194:	push   r13
    5196:	push   r12
    5198:	push   rbp
    5199:	push   rbx
    519a:	mov    rbx,rdi
    519d:	sub    rsp,0x8
    51a1:	test   rdi,rdi
    51a4:	je     5365 <BZ2_bzCompressInit+0x1e5>
    51aa:	mov    r12d,ecx
    51ad:	cmp    ecx,0xfa
    51b3:	ja     5365 <BZ2_bzCompressInit+0x1e5>
    51b9:	mov    eax,0x1e
    51be:	test   ecx,ecx
    51c0:	mov    r15d,esi
    51c3:	mov    r14d,edx
    51c6:	cmove  r12d,eax
    51ca:	mov    rax,QWORD PTR [rdi+0x38]
    51ce:	test   rax,rax
    51d1:	je     533f <BZ2_bzCompressInit+0x1bf>
    51d7:	cmp    QWORD PTR [rbx+0x40],0x0
    51dc:	je     5355 <BZ2_bzCompressInit+0x1d5>
    51e2:	mov    rdi,QWORD PTR [rbx+0x48]
    51e6:	mov    edx,0x1
    51eb:	mov    esi,0xd9d8
    51f0:	call   rax
    51f2:	mov    rbp,rax
    51f5:	test   rax,rax
    51f8:	je     53ad <BZ2_bzCompressInit+0x22d>
    51fe:	imul   r13d,r15d,0x186a0
    5205:	mov    rdi,QWORD PTR [rbx+0x48]
    5209:	mov    edx,0x1
    520e:	mov    QWORD PTR [rax],rbx
    5211:	mov    QWORD PTR [rax+0x18],0x0
    5219:	mov    QWORD PTR [rax+0x20],0x0
    5221:	lea    esi,[r13*4+0x0]
    5229:	mov    QWORD PTR [rax+0x28],0x0
    5231:	call   QWORD PTR [rbx+0x38]
    5234:	mov    rdi,QWORD PTR [rbx+0x48]
    5238:	lea    esi,[r13*4+0x88]
    5240:	mov    edx,0x1
    5245:	mov    QWORD PTR [rbp+0x18],rax
    5249:	call   QWORD PTR [rbx+0x38]
    524c:	mov    esi,0x40004
    5251:	mov    rdi,QWORD PTR [rbx+0x48]
    5255:	mov    edx,0x1
    525a:	mov    QWORD PTR [rbp+0x20],rax
    525e:	call   QWORD PTR [rbx+0x38]
    5261:	mov    rsi,QWORD PTR [rbp+0x18]
    5265:	mov    QWORD PTR [rbp+0x28],rax
    5269:	test   rsi,rsi
    526c:	je     5373 <BZ2_bzCompressInit+0x1f3>
    5272:	mov    rdx,QWORD PTR [rbp+0x20]
    5276:	test   rdx,rdx
    5279:	je     536c <BZ2_bzCompressInit+0x1ec>
    527f:	test   rax,rax
    5282:	je     536c <BZ2_bzCompressInit+0x1ec>
    5288:	movabs rax,0x200000002
    5292:	sub    r13d,0x13
    5296:	mov    QWORD PTR [rbp+0x40],rdx
    529a:	lea    rdx,[rbp+0x180]
    52a1:	mov    QWORD PTR [rbp+0x8],rax
    52a5:	lea    rax,[rbp+0x80]
    52ac:	mov    DWORD PTR [rbp+0x28c],0x0
    52b6:	mov    DWORD PTR [rbp+0x298],r15d
    52bd:	mov    DWORD PTR [rbp+0x70],r13d
    52c1:	mov    DWORD PTR [rbp+0x290],r14d
    52c8:	mov    DWORD PTR [rbp+0x58],r12d
    52cc:	mov    QWORD PTR [rbp+0x48],rsi
    52d0:	mov    QWORD PTR [rbp+0x50],0x0
    52d8:	mov    QWORD PTR [rbp+0x38],rsi
    52dc:	mov    QWORD PTR [rbx+0x30],rbp
    52e0:	mov    QWORD PTR [rbx+0xc],0x0
    52e8:	mov    QWORD PTR [rbx+0x24],0x0
    52f0:	mov    QWORD PTR [rbp+0x5c],0x100
    52f8:	mov    DWORD PTR [rbp+0x6c],0x0
    52ff:	mov    QWORD PTR [rbp+0x74],0x0
    5307:	mov    DWORD PTR [rbp+0x288],0xffffffff
    5311:	nop    DWORD PTR [rax+0x0]
    5318:	mov    BYTE PTR [rax],0x0
    531b:	add    rax,0x1
    531f:	cmp    rax,rdx
    5322:	jne    5318 <BZ2_bzCompressInit+0x198>
    5324:	mov    DWORD PTR [rbp+0x294],0x1
    532e:	xor    eax,eax
    5330:	add    rsp,0x8
    5334:	pop    rbx
    5335:	pop    rbp
    5336:	pop    r12
    5338:	pop    r13
    533a:	pop    r14
    533c:	pop    r15
    533e:	ret    
    533f:	lea    rax,[rip+0xfffffffffffff96a]        # 4cb0 <default_bzalloc>
    5346:	cmp    QWORD PTR [rbx+0x40],0x0
    534b:	mov    QWORD PTR [rdi+0x38],rax
    534f:	jne    51e2 <BZ2_bzCompressInit+0x62>
    5355:	lea    rcx,[rip+0xfffffffffffff934]        # 4c90 <default_bzfree>
    535c:	mov    QWORD PTR [rbx+0x40],rcx
    5360:	jmp    51e2 <BZ2_bzCompressInit+0x62>
    5365:	mov    eax,0xfffffffe
    536a:	jmp    5330 <BZ2_bzCompressInit+0x1b0>
    536c:	mov    rdi,QWORD PTR [rbx+0x48]
    5370:	call   QWORD PTR [rbx+0x40]
    5373:	mov    rsi,QWORD PTR [rbp+0x20]
    5377:	mov    rax,QWORD PTR [rbx+0x40]
    537b:	mov    rdi,QWORD PTR [rbx+0x48]
    537f:	test   rsi,rsi
    5382:	je     538e <BZ2_bzCompressInit+0x20e>
    5384:	call   rax
    5386:	mov    rax,QWORD PTR [rbx+0x40]
    538a:	mov    rdi,QWORD PTR [rbx+0x48]
    538e:	mov    rsi,QWORD PTR [rbp+0x28]
    5392:	test   rsi,rsi
    5395:	je     53a1 <BZ2_bzCompressInit+0x221>
    5397:	call   rax
    5399:	mov    rax,QWORD PTR [rbx+0x40]
    539d:	mov    rdi,QWORD PTR [rbx+0x48]
    53a1:	mov    rsi,rbp
    53a4:	call   rax
    53a6:	mov    eax,0xfffffffd
    53ab:	jmp    5330 <BZ2_bzCompressInit+0x1b0>
    53ad:	mov    eax,0xfffffffd
    53b2:	jmp    5330 <BZ2_bzCompressInit+0x1b0>
    53b7:	mov    eax,0xfffffffe
    53bc:	ret    
    53bd:	nop    DWORD PTR [rax]

00000000000053c0 <BZ2_bzCompress>:
    53c0:	endbr64 
    53c4:	push   r12
    53c6:	push   rbp
    53c7:	sub    rsp,0x8
    53cb:	test   rdi,rdi
    53ce:	je     5570 <BZ2_bzCompress+0x1b0>
    53d4:	mov    rbp,QWORD PTR [rdi+0x30]
    53d8:	test   rbp,rbp
    53db:	je     5570 <BZ2_bzCompress+0x1b0>
    53e1:	cmp    QWORD PTR [rbp+0x0],rdi
    53e5:	jne    5570 <BZ2_bzCompress+0x1b0>
    53eb:	xor    eax,eax
    53ed:	mov    r12d,DWORD PTR [rbp+0x8]
    53f1:	cmp    esi,0x1
    53f4:	setne  al
    53f7:	add    eax,0x3
    53fa:	cmp    r12d,0x3
    53fe:	je     5450 <BZ2_bzCompress+0x90>
    5400:	jg     54b0 <BZ2_bzCompress+0xf0>
    5406:	cmp    r12d,0x1
    540a:	je     5500 <BZ2_bzCompress+0x140>
    5410:	cmp    r12d,0x2
    5414:	jne    5518 <BZ2_bzCompress+0x158>
    541a:	test   esi,esi
    541c:	je     555a <BZ2_bzCompress+0x19a>
    5422:	cmp    esi,0x1
    5425:	je     5548 <BZ2_bzCompress+0x188>
    542b:	cmp    esi,0x2
    542e:	jne    5570 <BZ2_bzCompress+0x1b0>
    5434:	mov    edx,DWORD PTR [rdi+0x8]
    5437:	mov    DWORD PTR [rbp+0x8],0x4
    543e:	mov    DWORD PTR [rbp+0x10],edx
    5441:	mov    r12d,eax
    5444:	cmp    r12d,0x3
    5448:	jne    5400 <BZ2_bzCompress+0x40>
    544a:	nop    WORD PTR [rax+rax*1+0x0]
    5450:	cmp    esi,0x1
    5453:	jne    5500 <BZ2_bzCompress+0x140>
    5459:	mov    eax,DWORD PTR [rdi+0x8]
    545c:	cmp    DWORD PTR [rbp+0x10],eax
    545f:	jne    5500 <BZ2_bzCompress+0x140>
    5465:	mov    rdi,rbp
    5468:	mov    r12d,0x2
    546e:	call   4cc0 <handle_compress.isra.0>
    5473:	mov    esi,DWORD PTR [rbp+0x10]
    5476:	test   esi,esi
    5478:	jne    5506 <BZ2_bzCompress+0x146>
    547e:	cmp    DWORD PTR [rbp+0x5c],0xff
    5485:	ja     548e <BZ2_bzCompress+0xce>
    5487:	mov    ecx,DWORD PTR [rbp+0x60]
    548a:	test   ecx,ecx
    548c:	jg     5506 <BZ2_bzCompress+0x146>
    548e:	mov    eax,DWORD PTR [rbp+0x74]
    5491:	mov    r12d,0x2
    5497:	cmp    DWORD PTR [rbp+0x78],eax
    549a:	jl     5506 <BZ2_bzCompress+0x146>
    549c:	mov    DWORD PTR [rbp+0x8],0x2
    54a3:	mov    r12d,0x1
    54a9:	jmp    5506 <BZ2_bzCompress+0x146>
    54ab:	nop    DWORD PTR [rax+rax*1+0x0]
    54b0:	cmp    r12d,0x4
    54b4:	jne    5518 <BZ2_bzCompress+0x158>
    54b6:	cmp    esi,0x2
    54b9:	jne    5500 <BZ2_bzCompress+0x140>
    54bb:	mov    eax,DWORD PTR [rdi+0x8]
    54be:	cmp    DWORD PTR [rbp+0x10],eax
    54c1:	jne    5500 <BZ2_bzCompress+0x140>
    54c3:	mov    rdi,rbp
    54c6:	call   4cc0 <handle_compress.isra.0>
    54cb:	test   al,al
    54cd:	je     5500 <BZ2_bzCompress+0x140>
    54cf:	mov    edx,DWORD PTR [rbp+0x10]
    54d2:	test   edx,edx
    54d4:	jne    54e6 <BZ2_bzCompress+0x126>
    54d6:	cmp    DWORD PTR [rbp+0x5c],0xff
    54dd:	ja     5530 <BZ2_bzCompress+0x170>
    54df:	mov    eax,DWORD PTR [rbp+0x60]
    54e2:	test   eax,eax
    54e4:	jle    5530 <BZ2_bzCompress+0x170>
    54e6:	mov    r12d,0x3
    54ec:	add    rsp,0x8
    54f0:	mov    eax,r12d
    54f3:	pop    rbp
    54f4:	pop    r12
    54f6:	ret    
    54f7:	nop    WORD PTR [rax+rax*1+0x0]
    5500:	mov    r12d,0xffffffff
    5506:	add    rsp,0x8
    550a:	mov    eax,r12d
    550d:	pop    rbp
    550e:	pop    r12
    5510:	ret    
    5511:	nop    DWORD PTR [rax+0x0]
    5518:	xor    r12d,r12d
    551b:	add    rsp,0x8
    551f:	mov    eax,r12d
    5522:	pop    rbp
    5523:	pop    r12
    5525:	ret    
    5526:	nop    WORD PTR cs:[rax+rax*1+0x0]
    5530:	mov    eax,DWORD PTR [rbp+0x74]
    5533:	cmp    DWORD PTR [rbp+0x78],eax
    5536:	jl     54e6 <BZ2_bzCompress+0x126>
    5538:	mov    DWORD PTR [rbp+0x8],0x1
    553f:	jmp    5506 <BZ2_bzCompress+0x146>
    5541:	nop    DWORD PTR [rax+0x0]
    5548:	mov    edx,DWORD PTR [rdi+0x8]
    554b:	mov    DWORD PTR [rbp+0x8],0x3
    5552:	mov    DWORD PTR [rbp+0x10],edx
    5555:	jmp    5441 <BZ2_bzCompress+0x81>
    555a:	mov    rdi,rbp
    555d:	mov    r12d,0x1
    5563:	call   4cc0 <handle_compress.isra.0>
    5568:	test   al,al
    556a:	jne    5506 <BZ2_bzCompress+0x146>
    556c:	nop    DWORD PTR [rax+0x0]
    5570:	mov    r12d,0xfffffffe
    5576:	jmp    5506 <BZ2_bzCompress+0x146>
    5578:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005580 <BZ2_bzCompressEnd>:
    5580:	endbr64 
    5584:	test   rdi,rdi
    5587:	je     5607 <BZ2_bzCompressEnd+0x87>
    5589:	push   rbp
    558a:	push   rbx
    558b:	mov    rbx,rdi
    558e:	sub    rsp,0x8
    5592:	mov    rbp,QWORD PTR [rdi+0x30]
    5596:	test   rbp,rbp
    5599:	je     5600 <BZ2_bzCompressEnd+0x80>
    559b:	cmp    QWORD PTR [rbp+0x0],rdi
    559f:	jne    5600 <BZ2_bzCompressEnd+0x80>
    55a1:	mov    rsi,QWORD PTR [rbp+0x18]
    55a5:	mov    rax,QWORD PTR [rdi+0x40]
    55a9:	mov    rdi,QWORD PTR [rdi+0x48]
    55ad:	test   rsi,rsi
    55b0:	je     55bc <BZ2_bzCompressEnd+0x3c>
    55b2:	call   rax
    55b4:	mov    rax,QWORD PTR [rbx+0x40]
    55b8:	mov    rdi,QWORD PTR [rbx+0x48]
    55bc:	mov    rsi,QWORD PTR [rbp+0x20]
    55c0:	test   rsi,rsi
    55c3:	je     55cf <BZ2_bzCompressEnd+0x4f>
    55c5:	call   rax
    55c7:	mov    rax,QWORD PTR [rbx+0x40]
    55cb:	mov    rdi,QWORD PTR [rbx+0x48]
    55cf:	mov    rsi,QWORD PTR [rbp+0x28]
    55d3:	test   rsi,rsi
    55d6:	je     55e2 <BZ2_bzCompressEnd+0x62>
    55d8:	call   rax
    55da:	mov    rax,QWORD PTR [rbx+0x40]
    55de:	mov    rdi,QWORD PTR [rbx+0x48]
    55e2:	mov    rsi,QWORD PTR [rbx+0x30]
    55e6:	call   rax
    55e8:	mov    QWORD PTR [rbx+0x30],0x0
    55f0:	xor    eax,eax
    55f2:	add    rsp,0x8
    55f6:	pop    rbx
    55f7:	pop    rbp
    55f8:	ret    
    55f9:	nop    DWORD PTR [rax+0x0]
    5600:	mov    eax,0xfffffffe
    5605:	jmp    55f2 <BZ2_bzCompressEnd+0x72>
    5607:	mov    eax,0xfffffffe
    560c:	ret    
    560d:	nop    DWORD PTR [rax]

0000000000005610 <BZ2_bzDecompressInit>:
    5610:	endbr64 
    5614:	test   rdi,rdi
    5617:	je     5707 <BZ2_bzDecompressInit+0xf7>
    561d:	push   r12
    561f:	push   rbp
    5620:	mov    ebp,edx
    5622:	push   rbx
    5623:	cmp    edx,0x1
    5626:	ja     5700 <BZ2_bzDecompressInit+0xf0>
    562c:	mov    r12d,esi
    562f:	cmp    esi,0x4
    5632:	ja     5700 <BZ2_bzDecompressInit+0xf0>
    5638:	mov    rax,QWORD PTR [rdi+0x38]
    563c:	mov    rbx,rdi
    563f:	test   rax,rax
    5642:	je     56d8 <BZ2_bzDecompressInit+0xc8>
    5648:	cmp    QWORD PTR [rbx+0x40],0x0
    564d:	je     56ee <BZ2_bzDecompressInit+0xde>
    5653:	mov    rdi,QWORD PTR [rbx+0x48]
    5657:	mov    edx,0x1
    565c:	mov    esi,0xfa90
    5661:	call   rax
    5663:	test   rax,rax
    5666:	je     570d <BZ2_bzDecompressInit+0xfd>
    566c:	mov    QWORD PTR [rax],rbx
    566f:	mov    QWORD PTR [rbx+0x30],rax
    5673:	mov    DWORD PTR [rax+0x8],0xa
    567a:	mov    QWORD PTR [rax+0x20],0x0
    5682:	mov    DWORD PTR [rax+0xc74],0x0
    568c:	mov    QWORD PTR [rbx+0xc],0x0
    5694:	mov    QWORD PTR [rbx+0x24],0x0
    569c:	mov    BYTE PTR [rax+0x2c],bpl
    56a0:	mov    QWORD PTR [rax+0xc60],0x0
    56ab:	mov    QWORD PTR [rax+0xc58],0x0
    56b6:	mov    QWORD PTR [rax+0xc50],0x0
    56c1:	mov    DWORD PTR [rax+0x30],0x0
    56c8:	mov    DWORD PTR [rax+0x34],r12d
    56cc:	xor    eax,eax
    56ce:	pop    rbx
    56cf:	pop    rbp
    56d0:	pop    r12
    56d2:	ret    
    56d3:	nop    DWORD PTR [rax+rax*1+0x0]
    56d8:	lea    rax,[rip+0xfffffffffffff5d1]        # 4cb0 <default_bzalloc>
    56df:	cmp    QWORD PTR [rbx+0x40],0x0
    56e4:	mov    QWORD PTR [rdi+0x38],rax
    56e8:	jne    5653 <BZ2_bzDecompressInit+0x43>
    56ee:	lea    rcx,[rip+0xfffffffffffff59b]        # 4c90 <default_bzfree>
    56f5:	mov    QWORD PTR [rbx+0x40],rcx
    56f9:	jmp    5653 <BZ2_bzDecompressInit+0x43>
    56fe:	xchg   ax,ax
    5700:	mov    eax,0xfffffffe
    5705:	jmp    56ce <BZ2_bzDecompressInit+0xbe>
    5707:	mov    eax,0xfffffffe
    570c:	ret    
    570d:	mov    eax,0xfffffffd
    5712:	jmp    56ce <BZ2_bzDecompressInit+0xbe>
    5714:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    571f:	nop

0000000000005720 <BZ2_indexIntoF>:
    5720:	endbr64 
    5724:	mov    edx,0x100
    5729:	xor    r8d,r8d
    572c:	nop    DWORD PTR [rax+0x0]
    5730:	lea    eax,[r8+rdx*1]
    5734:	sar    eax,1
    5736:	movsxd rcx,eax
    5739:	cmp    DWORD PTR [rsi+rcx*4],edi
    573c:	cmovg  edx,eax
    573f:	cmovle r8d,eax
    5743:	mov    eax,edx
    5745:	sub    eax,r8d
    5748:	cmp    eax,0x1
    574b:	jne    5730 <BZ2_indexIntoF+0x10>
    574d:	mov    eax,r8d
    5750:	ret    
    5751:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    575c:	nop    DWORD PTR [rax+0x0]

0000000000005760 <BZ2_bzDecompress>:
    5760:	endbr64 
    5764:	push   r15
    5766:	push   r14
    5768:	push   r13
    576a:	push   r12
    576c:	push   rbp
    576d:	push   rbx
    576e:	sub    rsp,0x18
    5772:	test   rdi,rdi
    5775:	je     6596 <BZ2_bzDecompress+0xe36>
    577b:	mov    rbx,QWORD PTR [rdi+0x30]
    577f:	test   rbx,rbx
    5782:	je     6596 <BZ2_bzDecompress+0xe36>
    5788:	cmp    QWORD PTR [rbx],rdi
    578b:	jne    6596 <BZ2_bzDecompress+0xe36>
    5791:	mov    eax,DWORD PTR [rbx+0x8]
    5794:	lea    r14,[rip+0xb885]        # 11020 <BZ2_crc32Table>
    579b:	jmp    57a9 <BZ2_bzDecompress+0x49>
    579d:	nop    DWORD PTR [rax]
    57a0:	cmp    eax,0x9
    57a3:	jg     5988 <BZ2_bzDecompress+0x228>
    57a9:	cmp    eax,0x1
    57ac:	je     63d1 <BZ2_bzDecompress+0xc71>
    57b2:	cmp    eax,0x2
    57b5:	jne    57a0 <BZ2_bzDecompress+0x40>
    57b7:	mov    rax,QWORD PTR [rbx]
    57ba:	cmp    BYTE PTR [rbx+0x2c],0x0
    57be:	movzx  edx,BYTE PTR [rbx+0x14]
    57c2:	mov    r9d,DWORD PTR [rax+0x20]
    57c6:	je     59b0 <BZ2_bzDecompress+0x250>
    57cc:	test   dl,dl
    57ce:	jne    5d80 <BZ2_bzDecompress+0x620>
    57d4:	lea    rdx,[rbx+0x448]
    57db:	test   r9d,r9d
    57de:	jne    5836 <BZ2_bzDecompress+0xd6>
    57e0:	jmp    5908 <BZ2_bzDecompress+0x1a8>
    57e5:	nop    DWORD PTR [rax]
    57e8:	mov    rax,QWORD PTR [rax+0x18]
    57ec:	movzx  ecx,BYTE PTR [rbx+0xc]
    57f0:	mov    BYTE PTR [rax],cl
    57f2:	mov    eax,DWORD PTR [rbx+0xc70]
    57f8:	mov    esi,eax
    57fa:	shl    eax,0x8
    57fd:	shr    esi,0x18
    5800:	xor    ecx,esi
    5802:	movzx  ecx,cl
    5805:	xor    eax,DWORD PTR [r14+rcx*4]
    5809:	sub    DWORD PTR [rbx+0x10],0x1
    580d:	mov    DWORD PTR [rbx+0xc70],eax
    5813:	mov    rax,QWORD PTR [rbx]
    5816:	add    QWORD PTR [rax+0x18],0x1
    581b:	mov    edi,DWORD PTR [rax+0x20]
    581e:	add    DWORD PTR [rax+0x24],0x1
    5822:	lea    esi,[rdi-0x1]
    5825:	mov    DWORD PTR [rax+0x20],esi
    5828:	jne    582e <BZ2_bzDecompress+0xce>
    582a:	add    DWORD PTR [rax+0x28],0x1
    582e:	test   esi,esi
    5830:	je     5908 <BZ2_bzDecompress+0x1a8>
    5836:	mov    r9d,DWORD PTR [rbx+0x10]
    583a:	test   r9d,r9d
    583d:	jne    57e8 <BZ2_bzDecompress+0x88>
    583f:	mov    r10d,DWORD PTR [rbx+0xfa50]
    5846:	mov    r11d,DWORD PTR [rbx+0x444]
    584d:	lea    edi,[r10+0x1]
    5851:	mov    DWORD PTR [rsp+0x4],edi
    5855:	cmp    r11d,edi
    5858:	je     592c <BZ2_bzDecompress+0x1cc>
    585e:	jg     6070 <BZ2_bzDecompress+0x910>
    5864:	mov    ebp,DWORD PTR [rbx+0x40]
    5867:	mov    esi,DWORD PTR [rbx+0x3c]
    586a:	mov    DWORD PTR [rbx+0x10],0x1
    5871:	xor    r8d,r8d
    5874:	mov    edi,0x100
    5879:	mov    BYTE PTR [rbx+0xc],bpl
    587d:	nop    DWORD PTR [rax]
    5880:	lea    ecx,[r8+rdi*1]
    5884:	sar    ecx,1
    5886:	movsxd r12,ecx
    5889:	cmp    esi,DWORD PTR [rdx+r12*4]
    588d:	cmovl  edi,ecx
    5890:	cmovge r8d,ecx
    5894:	mov    ecx,edi
    5896:	sub    ecx,r8d
    5899:	cmp    ecx,0x1
    589c:	jne    5880 <BZ2_bzDecompress+0x120>
    589e:	mov    ecx,esi
    58a0:	mov    r13,QWORD PTR [rbx+0xc60]
    58a7:	mov    r12,QWORD PTR [rbx+0xc58]
    58ae:	shr    ecx,1
    58b0:	movzx  edi,BYTE PTR [r13+rcx*1+0x0]
    58b6:	lea    ecx,[rsi*4+0x0]
    58bd:	and    ecx,0x4
    58c0:	shr    edi,cl
    58c2:	movzx  ecx,WORD PTR [r12+rsi*2]
    58c7:	mov    esi,DWORD PTR [rax+0x20]
    58ca:	shl    edi,0x10
    58cd:	and    edi,0xf0000
    58d3:	or     edi,ecx
    58d5:	lea    ecx,[r11+0x1]
    58d9:	mov    DWORD PTR [rbx+0x3c],edi
    58dc:	mov    DWORD PTR [rbx+0x444],ecx
    58e2:	cmp    r11d,r10d
    58e5:	je     582e <BZ2_bzDecompress+0xce>
    58eb:	movzx  r8d,r8b
    58ef:	cmp    ebp,r8d
    58f2:	je     5f00 <BZ2_bzDecompress+0x7a0>
    58f8:	mov    DWORD PTR [rbx+0x40],r8d
    58fc:	test   esi,esi
    58fe:	jne    5836 <BZ2_bzDecompress+0xd6>
    5904:	nop    DWORD PTR [rax+0x0]
    5908:	mov    r10d,DWORD PTR [rbx+0x444]
    590f:	mov    eax,DWORD PTR [rbx+0xfa50]
    5915:	add    eax,0x1
    5918:	cmp    eax,r10d
    591b:	jne    5c5c <BZ2_bzDecompress+0x4fc>
    5921:	mov    eax,DWORD PTR [rbx+0x10]
    5924:	test   eax,eax
    5926:	jne    5c5c <BZ2_bzDecompress+0x4fc>
    592c:	mov    r8d,DWORD PTR [rbx+0xc70]
    5933:	mov    eax,DWORD PTR [rbx+0x34]
    5936:	not    r8d
    5939:	mov    DWORD PTR [rbx+0xc70],r8d
    5940:	cmp    eax,0x2
    5943:	jg     5c68 <BZ2_bzDecompress+0x508>
    5949:	cmp    eax,0x1
    594c:	jle    595f <BZ2_bzDecompress+0x1ff>
    594e:	mov    rsi,QWORD PTR [rip+0xc2cb]        # 11c20 <stderr@@GLIBC_2.2.5>
    5955:	mov    edi,0x5d
    595a:	call   11d0 <fputc@plt>
    595f:	mov    edx,DWORD PTR [rbx+0xc70]
    5965:	cmp    edx,DWORD PTR [rbx+0xc68]
    596b:	jne    6070 <BZ2_bzDecompress+0x910>
    5971:	mov    eax,DWORD PTR [rbx+0xc74]
    5977:	mov    DWORD PTR [rbx+0x8],0xe
    597e:	rol    eax,1
    5980:	xor    eax,edx
    5982:	mov    DWORD PTR [rbx+0xc74],eax
    5988:	mov    rdi,rbx
    598b:	call   9ac0 <BZ2_decompress>
    5990:	mov    r12d,eax
    5993:	cmp    eax,0x4
    5996:	je     604a <BZ2_bzDecompress+0x8ea>
    599c:	cmp    DWORD PTR [rbx+0x8],0x2
    59a0:	je     57b7 <BZ2_bzDecompress+0x57>
    59a6:	jmp    6076 <BZ2_bzDecompress+0x916>
    59ab:	nop    DWORD PTR [rax+rax*1+0x0]
    59b0:	test   dl,dl
    59b2:	je     5c90 <BZ2_bzDecompress+0x530>
    59b8:	xor    esi,esi
    59ba:	test   r9d,r9d
    59bd:	jne    5a17 <BZ2_bzDecompress+0x2b7>
    59bf:	jmp    5908 <BZ2_bzDecompress+0x1a8>
    59c4:	nop    DWORD PTR [rax+0x0]
    59c8:	mov    rax,QWORD PTR [rax+0x18]
    59cc:	movzx  edx,BYTE PTR [rbx+0xc]
    59d0:	mov    BYTE PTR [rax],dl
    59d2:	mov    eax,DWORD PTR [rbx+0xc70]
    59d8:	mov    edx,eax
    59da:	shl    eax,0x8
    59dd:	shr    edx,0x18
    59e0:	xor    dl,BYTE PTR [rbx+0xc]
    59e3:	movzx  edx,dl
    59e6:	xor    eax,DWORD PTR [r14+rdx*4]
    59ea:	sub    DWORD PTR [rbx+0x10],0x1
    59ee:	mov    DWORD PTR [rbx+0xc70],eax
    59f4:	mov    rax,QWORD PTR [rbx]
    59f7:	mov    edi,DWORD PTR [rax+0x20]
    59fa:	add    QWORD PTR [rax+0x18],0x1
    59ff:	sub    edi,0x1
    5a02:	add    DWORD PTR [rax+0x24],0x1
    5a06:	mov    DWORD PTR [rax+0x20],edi
    5a09:	jne    5a0f <BZ2_bzDecompress+0x2af>
    5a0b:	add    DWORD PTR [rax+0x28],0x1
    5a0f:	test   edi,edi
    5a11:	je     5908 <BZ2_bzDecompress+0x1a8>
    5a17:	mov    edx,DWORD PTR [rbx+0x10]
    5a1a:	test   edx,edx
    5a1c:	jne    59c8 <BZ2_bzDecompress+0x268>
    5a1e:	mov    r12d,DWORD PTR [rbx+0xfa50]
    5a25:	mov    r8d,DWORD PTR [rbx+0x444]
    5a2c:	lea    r10d,[r12+0x1]
    5a31:	cmp    r8d,r10d
    5a34:	je     592c <BZ2_bzDecompress+0x1cc>
    5a3a:	jg     6070 <BZ2_bzDecompress+0x910>
    5a40:	mov    edx,DWORD PTR [rbx+0x3c]
    5a43:	mov    ebp,DWORD PTR [rbx+0x40]
    5a46:	mov    DWORD PTR [rbx+0x10],0x1
    5a4d:	mov    r11,QWORD PTR [rbx+0xc50]
    5a54:	mov    BYTE PTR [rbx+0xc],bpl
    5a58:	mov    edi,DWORD PTR [r11+rdx*4]
    5a5c:	mov    edx,DWORD PTR [rbx+0x18]
    5a5f:	mov    r9d,edi
    5a62:	shr    r9d,0x8
    5a66:	mov    DWORD PTR [rbx+0x3c],r9d
    5a6a:	test   edx,edx
    5a6c:	jne    5a93 <BZ2_bzDecompress+0x333>
    5a6e:	movsxd rdx,DWORD PTR [rbx+0x1c]
    5a72:	lea    rcx,[rip+0xb9a7]        # 11420 <BZ2_rNums>
    5a79:	mov    r13,rdx
    5a7c:	mov    edx,DWORD PTR [rcx+rdx*4]
    5a7f:	cmp    r13d,0x1ff
    5a86:	lea    ecx,[r13+0x1]
    5a8a:	cmove  ecx,esi
    5a8d:	mov    DWORD PTR [rbx+0x18],edx
    5a90:	mov    DWORD PTR [rbx+0x1c],ecx
    5a93:	sub    edx,0x1
    5a96:	cmp    edx,0x1
    5a99:	mov    DWORD PTR [rbx+0x18],edx
    5a9c:	sete   cl
    5a9f:	xor    ecx,edi
    5aa1:	lea    edi,[r8+0x1]
    5aa5:	mov    DWORD PTR [rbx+0x444],edi
    5aab:	mov    edi,DWORD PTR [rax+0x20]
    5aae:	cmp    r8d,r12d
    5ab1:	je     5a0f <BZ2_bzDecompress+0x2af>
    5ab7:	movzx  ecx,cl
    5aba:	cmp    ebp,ecx
    5abc:	je     5ad0 <BZ2_bzDecompress+0x370>
    5abe:	mov    DWORD PTR [rbx+0x40],ecx
    5ac1:	jmp    5a0f <BZ2_bzDecompress+0x2af>
    5ac6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    5ad0:	mov    DWORD PTR [rbx+0x10],0x2
    5ad7:	mov    r12d,DWORD PTR [r11+r9*4]
    5adb:	mov    ebp,r12d
    5ade:	shr    ebp,0x8
    5ae1:	mov    DWORD PTR [rbx+0x3c],ebp
    5ae4:	test   edx,edx
    5ae6:	jne    5b10 <BZ2_bzDecompress+0x3b0>
    5ae8:	movsxd rdx,DWORD PTR [rbx+0x1c]
    5aec:	lea    r15,[rip+0xb92d]        # 11420 <BZ2_rNums>
    5af3:	mov    r13,rdx
    5af6:	mov    edx,DWORD PTR [r15+rdx*4]
    5afa:	lea    r9d,[r13+0x1]
    5afe:	cmp    r13d,0x1ff
    5b05:	cmove  r9d,esi
    5b09:	mov    DWORD PTR [rbx+0x18],edx
    5b0c:	mov    DWORD PTR [rbx+0x1c],r9d
    5b10:	sub    edx,0x1
    5b13:	cmp    edx,0x1
    5b16:	mov    DWORD PTR [rbx+0x18],edx
    5b19:	sete   r9b
    5b1d:	xor    r9d,r12d
    5b20:	lea    r12d,[r8+0x2]
    5b24:	mov    DWORD PTR [rbx+0x444],r12d
    5b2b:	cmp    r10d,r12d
    5b2e:	je     5a0f <BZ2_bzDecompress+0x2af>
    5b34:	movzx  r9d,r9b
    5b38:	cmp    ecx,r9d
    5b3b:	jne    5c50 <BZ2_bzDecompress+0x4f0>
    5b41:	mov    r9d,ebp
    5b44:	mov    DWORD PTR [rbx+0x10],0x3
    5b4b:	mov    r12d,DWORD PTR [r11+r9*4]
    5b4f:	mov    ebp,r12d
    5b52:	shr    ebp,0x8
    5b55:	mov    DWORD PTR [rbx+0x3c],ebp
    5b58:	test   edx,edx
    5b5a:	je     6090 <BZ2_bzDecompress+0x930>
    5b60:	sub    edx,0x1
    5b63:	cmp    edx,0x1
    5b66:	mov    DWORD PTR [rbx+0x18],edx
    5b69:	sete   r9b
    5b6d:	xor    r9d,r12d
    5b70:	lea    r12d,[r8+0x3]
    5b74:	mov    DWORD PTR [rbx+0x444],r12d
    5b7b:	cmp    r10d,r12d
    5b7e:	je     5a0f <BZ2_bzDecompress+0x2af>
    5b84:	movzx  r9d,r9b
    5b88:	cmp    ecx,r9d
    5b8b:	jne    5c50 <BZ2_bzDecompress+0x4f0>
    5b91:	mov    r10d,DWORD PTR [r11+rbp*4]
    5b95:	mov    r9d,r10d
    5b98:	shr    r9d,0x8
    5b9c:	mov    DWORD PTR [rbx+0x3c],r9d
    5ba0:	test   edx,edx
    5ba2:	jne    5bc7 <BZ2_bzDecompress+0x467>
    5ba4:	movsxd rdx,DWORD PTR [rbx+0x1c]
    5ba8:	lea    rcx,[rip+0xb871]        # 11420 <BZ2_rNums>
    5baf:	mov    rbp,rdx
    5bb2:	mov    edx,DWORD PTR [rcx+rdx*4]
    5bb5:	cmp    ebp,0x1ff
    5bbb:	lea    ecx,[rbp+0x1]
    5bbe:	cmove  ecx,esi
    5bc1:	mov    DWORD PTR [rbx+0x18],edx
    5bc4:	mov    DWORD PTR [rbx+0x1c],ecx
    5bc7:	sub    edx,0x1
    5bca:	lea    ecx,[r8+0x4]
    5bce:	cmp    edx,0x1
    5bd1:	mov    DWORD PTR [rbx+0x444],ecx
    5bd7:	sete   cl
    5bda:	mov    DWORD PTR [rbx+0x18],edx
    5bdd:	xor    ecx,r10d
    5be0:	movzx  ecx,cl
    5be3:	add    ecx,0x4
    5be6:	mov    DWORD PTR [rbx+0x10],ecx
    5be9:	mov    ecx,DWORD PTR [r11+r9*4]
    5bed:	movzx  r9d,cl
    5bf1:	shr    ecx,0x8
    5bf4:	mov    DWORD PTR [rbx+0x40],r9d
    5bf8:	mov    DWORD PTR [rbx+0x3c],ecx
    5bfb:	test   edx,edx
    5bfd:	jne    5c24 <BZ2_bzDecompress+0x4c4>
    5bff:	movsxd rdx,DWORD PTR [rbx+0x1c]
    5c03:	lea    rcx,[rip+0xb816]        # 11420 <BZ2_rNums>
    5c0a:	mov    r10,rdx
    5c0d:	mov    edx,DWORD PTR [rcx+rdx*4]
    5c10:	cmp    r10d,0x1ff
    5c17:	lea    ecx,[r10+0x1]
    5c1b:	cmove  ecx,esi
    5c1e:	mov    DWORD PTR [rbx+0x18],edx
    5c21:	mov    DWORD PTR [rbx+0x1c],ecx
    5c24:	sub    edx,0x1
    5c27:	cmp    edx,0x1
    5c2a:	mov    DWORD PTR [rbx+0x18],edx
    5c2d:	sete   dl
    5c30:	movzx  edx,dl
    5c33:	xor    edx,r9d
    5c36:	mov    DWORD PTR [rbx+0x40],edx
    5c39:	lea    edx,[r8+0x5]
    5c3d:	mov    DWORD PTR [rbx+0x444],edx
    5c43:	jmp    5a0f <BZ2_bzDecompress+0x2af>
    5c48:	nop    DWORD PTR [rax+rax*1+0x0]
    5c50:	mov    DWORD PTR [rbx+0x40],r9d
    5c54:	test   edi,edi
    5c56:	jne    5a17 <BZ2_bzDecompress+0x2b7>
    5c5c:	xor    r12d,r12d
    5c5f:	jmp    6076 <BZ2_bzDecompress+0x916>
    5c64:	nop    DWORD PTR [rax+0x0]
    5c68:	mov    ecx,DWORD PTR [rbx+0xc68]
    5c6e:	mov    rdi,QWORD PTR [rip+0xbfab]        # 11c20 <stderr@@GLIBC_2.2.5>
    5c75:	lea    rdx,[rip+0x7daf]        # da2b <incs+0x4eb>
    5c7c:	xor    eax,eax
    5c7e:	mov    esi,0x1
    5c83:	call   1270 <__fprintf_chk@plt>
    5c88:	mov    eax,DWORD PTR [rbx+0x34]
    5c8b:	jmp    5949 <BZ2_bzDecompress+0x1e9>
    5c90:	mov    rcx,QWORD PTR [rax+0x18]
    5c94:	mov    eax,DWORD PTR [rbx+0xfa50]
    5c9a:	mov    edx,DWORD PTR [rbx+0xc70]
    5ca0:	movzx  ebp,BYTE PTR [rbx+0xc]
    5ca4:	mov    esi,DWORD PTR [rbx+0x10]
    5ca7:	mov    r10d,DWORD PTR [rbx+0x444]
    5cae:	mov    DWORD PTR [rsp+0x8],eax
    5cb2:	add    eax,0x1
    5cb5:	mov    r12d,DWORD PTR [rbx+0x40]
    5cb9:	mov    r13,QWORD PTR [rbx+0xc50]
    5cc0:	mov    DWORD PTR [rsp+0x4],eax
    5cc4:	mov    eax,r9d
    5cc7:	mov    r11d,DWORD PTR [rbx+0x3c]
    5ccb:	test   esi,esi
    5ccd:	jg     60f8 <BZ2_bzDecompress+0x998>
    5cd3:	mov    r15d,DWORD PTR [rsp+0x4]
    5cd8:	cmp    r15d,r10d
    5cdb:	jl     6070 <BZ2_bzDecompress+0x910>
    5ce1:	je     65a1 <BZ2_bzDecompress+0xe41>
    5ce7:	mov    esi,DWORD PTR [r13+r11*4+0x0]
    5cec:	mov    ebp,r12d
    5cef:	mov    r11d,esi
    5cf2:	movzx  esi,sil
    5cf6:	shr    r11d,0x8
    5cfa:	cmp    r12d,esi
    5cfd:	jne    63e0 <BZ2_bzDecompress+0xc80>
    5d03:	cmp    DWORD PTR [rsp+0x8],r10d
    5d08:	je     63dc <BZ2_bzDecompress+0xc7c>
    5d0e:	mov    esi,DWORD PTR [r13+r11*4+0x0]
    5d13:	lea    edi,[r10+0x2]
    5d17:	mov    r11d,esi
    5d1a:	shr    r11d,0x8
    5d1e:	cmp    r15d,edi
    5d21:	je     6195 <BZ2_bzDecompress+0xa35>
    5d27:	movzx  esi,sil
    5d2b:	cmp    r12d,esi
    5d2e:	jne    6192 <BZ2_bzDecompress+0xa32>
    5d34:	mov    esi,DWORD PTR [r13+r11*4+0x0]
    5d39:	lea    edi,[r10+0x3]
    5d3d:	mov    r11d,esi
    5d40:	shr    r11d,0x8
    5d44:	cmp    r15d,edi
    5d47:	je     641b <BZ2_bzDecompress+0xcbb>
    5d4d:	movzx  esi,sil
    5d51:	cmp    r12d,esi
    5d54:	jne    6418 <BZ2_bzDecompress+0xcb8>
    5d5a:	mov    edi,DWORD PTR [r13+r11*4+0x0]
    5d5f:	movzx  esi,dil
    5d63:	shr    edi,0x8
    5d66:	mov    r11d,DWORD PTR [r13+rdi*4+0x0]
    5d6b:	add    esi,0x4
    5d6e:	lea    edi,[r10+0x5]
    5d72:	movzx  r12d,r11b
    5d76:	shr    r11d,0x8
    5d7a:	jmp    619a <BZ2_bzDecompress+0xa3a>
    5d7f:	nop
    5d80:	lea    r12,[rbx+0x448]
    5d87:	test   r9d,r9d
    5d8a:	jne    5de6 <BZ2_bzDecompress+0x686>
    5d8c:	jmp    5908 <BZ2_bzDecompress+0x1a8>
    5d91:	nop    DWORD PTR [rax+0x0]
    5d98:	mov    rax,QWORD PTR [rax+0x18]
    5d9c:	movzx  edx,BYTE PTR [rbx+0xc]
    5da0:	mov    BYTE PTR [rax],dl
    5da2:	mov    eax,DWORD PTR [rbx+0xc70]
    5da8:	mov    ecx,eax
    5daa:	shl    eax,0x8
    5dad:	shr    ecx,0x18
    5db0:	xor    edx,ecx
    5db2:	movzx  edx,dl
    5db5:	xor    eax,DWORD PTR [r14+rdx*4]
    5db9:	sub    DWORD PTR [rbx+0x10],0x1
    5dbd:	mov    DWORD PTR [rbx+0xc70],eax
    5dc3:	mov    rax,QWORD PTR [rbx]
    5dc6:	add    QWORD PTR [rax+0x18],0x1
    5dcb:	mov    edi,DWORD PTR [rax+0x20]
    5dce:	add    DWORD PTR [rax+0x24],0x1
    5dd2:	lea    edx,[rdi-0x1]
    5dd5:	mov    DWORD PTR [rax+0x20],edx
    5dd8:	jne    5dde <BZ2_bzDecompress+0x67e>
    5dda:	add    DWORD PTR [rax+0x28],0x1
    5dde:	test   edx,edx
    5de0:	je     5908 <BZ2_bzDecompress+0x1a8>
    5de6:	mov    r8d,DWORD PTR [rbx+0x10]
    5dea:	test   r8d,r8d
    5ded:	jne    5d98 <BZ2_bzDecompress+0x638>
    5def:	mov    r9d,DWORD PTR [rbx+0xfa50]
    5df6:	mov    ebp,DWORD PTR [rbx+0x444]
    5dfc:	lea    esi,[r9+0x1]
    5e00:	mov    DWORD PTR [rsp+0x4],esi
    5e04:	cmp    ebp,esi
    5e06:	je     592c <BZ2_bzDecompress+0x1cc>
    5e0c:	jg     6070 <BZ2_bzDecompress+0x910>
    5e12:	mov    edi,DWORD PTR [rbx+0x40]
    5e15:	mov    r10d,DWORD PTR [rbx+0x3c]
    5e19:	xor    r11d,r11d
    5e1c:	mov    ecx,0x100
    5e21:	mov    DWORD PTR [rbx+0x10],0x1
    5e28:	mov    BYTE PTR [rbx+0xc],dil
    5e2c:	nop    DWORD PTR [rax+0x0]
    5e30:	lea    edx,[rcx+r11*1]
    5e34:	sar    edx,1
    5e36:	movsxd rsi,edx
    5e39:	cmp    r10d,DWORD PTR [r12+rsi*4]
    5e3d:	cmovl  ecx,edx
    5e40:	cmovge r11d,edx
    5e44:	mov    edx,ecx
    5e46:	sub    edx,r11d
    5e49:	cmp    edx,0x1
    5e4c:	jne    5e30 <BZ2_bzDecompress+0x6d0>
    5e4e:	mov    rsi,QWORD PTR [rbx+0xc60]
    5e55:	mov    edx,r10d
    5e58:	lea    ecx,[r10*4+0x0]
    5e60:	mov    r13,QWORD PTR [rbx+0xc58]
    5e67:	shr    edx,1
    5e69:	and    ecx,0x4
    5e6c:	mov    QWORD PTR [rsp+0x8],rsi
    5e71:	movzx  esi,BYTE PTR [rsi+rdx*1]
    5e75:	movzx  edx,WORD PTR [r13+r10*2+0x0]
    5e7b:	mov    r10d,DWORD PTR [rbx+0x18]
    5e7f:	shr    esi,cl
    5e81:	shl    esi,0x10
    5e84:	and    esi,0xf0000
    5e8a:	or     esi,edx
    5e8c:	mov    DWORD PTR [rbx+0x3c],esi
    5e8f:	test   r10d,r10d
    5e92:	jne    5ebe <BZ2_bzDecompress+0x75e>
    5e94:	movsxd rdx,DWORD PTR [rbx+0x1c]
    5e98:	lea    r15,[rip+0xb581]        # 11420 <BZ2_rNums>
    5e9f:	mov    rcx,rdx
    5ea2:	mov    r10d,DWORD PTR [r15+rdx*4]
    5ea6:	lea    edx,[rdx+0x1]
    5ea9:	cmp    ecx,0x1ff
    5eaf:	mov    ecx,0x0
    5eb4:	cmove  edx,ecx
    5eb7:	mov    DWORD PTR [rbx+0x18],r10d
    5ebb:	mov    DWORD PTR [rbx+0x1c],edx
    5ebe:	sub    r10d,0x1
    5ec2:	cmp    r10d,0x1
    5ec6:	mov    DWORD PTR [rbx+0x18],r10d
    5eca:	sete   dl
    5ecd:	xor    r11d,edx
    5ed0:	lea    edx,[rbp+0x1]
    5ed3:	mov    DWORD PTR [rbx+0x444],edx
    5ed9:	mov    edx,DWORD PTR [rax+0x20]
    5edc:	cmp    ebp,r9d
    5edf:	je     5dde <BZ2_bzDecompress+0x67e>
    5ee5:	movzx  r11d,r11b
    5ee9:	cmp    edi,r11d
    5eec:	je     5f98 <BZ2_bzDecompress+0x838>
    5ef2:	mov    DWORD PTR [rbx+0x40],r11d
    5ef6:	jmp    5dde <BZ2_bzDecompress+0x67e>
    5efb:	nop    DWORD PTR [rax+rax*1+0x0]
    5f00:	mov    DWORD PTR [rbx+0x10],0x2
    5f07:	xor    r8d,r8d
    5f0a:	mov    r10d,0x100
    5f10:	lea    ecx,[r8+r10*1]
    5f14:	sar    ecx,1
    5f16:	movsxd r15,ecx
    5f19:	cmp    edi,DWORD PTR [rdx+r15*4]
    5f1d:	cmovl  r10d,ecx
    5f21:	cmovge r8d,ecx
    5f25:	mov    ecx,r10d
    5f28:	sub    ecx,r8d
    5f2b:	cmp    ecx,0x1
    5f2e:	jne    5f10 <BZ2_bzDecompress+0x7b0>
    5f30:	mov    ecx,edi
    5f32:	shr    ecx,1
    5f34:	movzx  r10d,BYTE PTR [r13+rcx*1+0x0]
    5f3a:	lea    ecx,[rdi*4+0x0]
    5f41:	and    ecx,0x4
    5f44:	shr    r10d,cl
    5f47:	mov    ecx,edi
    5f49:	movzx  edi,WORD PTR [r12+rcx*2]
    5f4e:	shl    r10d,0x10
    5f52:	lea    ecx,[r11+0x2]
    5f56:	and    r10d,0xf0000
    5f5d:	mov    DWORD PTR [rbx+0x444],ecx
    5f63:	or     edi,r10d
    5f66:	mov    DWORD PTR [rbx+0x3c],edi
    5f69:	cmp    DWORD PTR [rsp+0x4],ecx
    5f6d:	je     582e <BZ2_bzDecompress+0xce>
    5f73:	movzx  r8d,r8b
    5f77:	cmp    ebp,r8d
    5f7a:	je     6272 <BZ2_bzDecompress+0xb12>
    5f80:	mov    DWORD PTR [rbx+0x40],r8d
    5f84:	test   esi,esi
    5f86:	jne    5836 <BZ2_bzDecompress+0xd6>
    5f8c:	jmp    5c5c <BZ2_bzDecompress+0x4fc>
    5f91:	nop    DWORD PTR [rax+0x0]
    5f98:	mov    DWORD PTR [rbx+0x10],0x2
    5f9f:	xor    edi,edi
    5fa1:	mov    r9d,0x100
    5fa7:	nop    WORD PTR [rax+rax*1+0x0]
    5fb0:	lea    ecx,[rdi+r9*1]
    5fb4:	sar    ecx,1
    5fb6:	movsxd r15,ecx
    5fb9:	cmp    esi,DWORD PTR [r12+r15*4]
    5fbd:	cmovl  r9d,ecx
    5fc1:	cmovge edi,ecx
    5fc4:	mov    ecx,r9d
    5fc7:	sub    ecx,edi
    5fc9:	cmp    ecx,0x1
    5fcc:	jne    5fb0 <BZ2_bzDecompress+0x850>
    5fce:	mov    ecx,esi
    5fd0:	mov    r15,QWORD PTR [rsp+0x8]
    5fd5:	shr    ecx,1
    5fd7:	movzx  r9d,BYTE PTR [r15+rcx*1]
    5fdc:	lea    ecx,[rsi*4+0x0]
    5fe3:	movzx  esi,WORD PTR [r13+rsi*2+0x0]
    5fe9:	and    ecx,0x4
    5fec:	shr    r9d,cl
    5fef:	shl    r9d,0x10
    5ff3:	and    r9d,0xf0000
    5ffa:	or     esi,r9d
    5ffd:	mov    DWORD PTR [rbx+0x3c],esi
    6000:	test   r10d,r10d
    6003:	je     60c0 <BZ2_bzDecompress+0x960>
    6009:	lea    r15d,[r10-0x1]
    600d:	cmp    r15d,0x1
    6011:	mov    DWORD PTR [rbx+0x18],r15d
    6015:	sete   cl
    6018:	xor    edi,ecx
    601a:	lea    ecx,[rbp+0x2]
    601d:	mov    DWORD PTR [rbx+0x444],ecx
    6023:	cmp    DWORD PTR [rsp+0x4],ecx
    6027:	je     5dde <BZ2_bzDecompress+0x67e>
    602d:	movzx  edi,dil
    6031:	cmp    r11d,edi
    6034:	je     61a2 <BZ2_bzDecompress+0xa42>
    603a:	mov    DWORD PTR [rbx+0x40],edi
    603d:	test   edx,edx
    603f:	jne    5de6 <BZ2_bzDecompress+0x686>
    6045:	jmp    5c5c <BZ2_bzDecompress+0x4fc>
    604a:	cmp    DWORD PTR [rbx+0x34],0x2
    604e:	mov    r8d,DWORD PTR [rbx+0xc74]
    6055:	mov    ecx,DWORD PTR [rbx+0xc6c]
    605b:	jg     65b7 <BZ2_bzDecompress+0xe57>
    6061:	cmp    r8d,ecx
    6064:	je     6076 <BZ2_bzDecompress+0x916>
    6066:	nop    WORD PTR cs:[rax+rax*1+0x0]
    6070:	mov    r12d,0xfffffffc
    6076:	add    rsp,0x18
    607a:	mov    eax,r12d
    607d:	pop    rbx
    607e:	pop    rbp
    607f:	pop    r12
    6081:	pop    r13
    6083:	pop    r14
    6085:	pop    r15
    6087:	ret    
    6088:	nop    DWORD PTR [rax+rax*1+0x0]
    6090:	movsxd rdx,DWORD PTR [rbx+0x1c]
    6094:	lea    r15,[rip+0xb385]        # 11420 <BZ2_rNums>
    609b:	mov    r13,rdx
    609e:	mov    edx,DWORD PTR [r15+rdx*4]
    60a2:	lea    r9d,[r13+0x1]
    60a6:	cmp    r13d,0x1ff
    60ad:	cmove  r9d,esi
    60b1:	mov    DWORD PTR [rbx+0x18],edx
    60b4:	mov    DWORD PTR [rbx+0x1c],r9d
    60b8:	jmp    5b60 <BZ2_bzDecompress+0x400>
    60bd:	nop    DWORD PTR [rax]
    60c0:	movsxd rcx,DWORD PTR [rbx+0x1c]
    60c4:	lea    r15,[rip+0xb355]        # 11420 <BZ2_rNums>
    60cb:	mov    r9,rcx
    60ce:	mov    r10d,DWORD PTR [r15+rcx*4]
    60d2:	lea    ecx,[rcx+0x1]
    60d5:	mov    r15d,0x0
    60db:	cmp    r9d,0x1ff
    60e2:	cmove  ecx,r15d
    60e6:	mov    DWORD PTR [rbx+0x18],r10d
    60ea:	mov    DWORD PTR [rbx+0x1c],ecx
    60ed:	jmp    6009 <BZ2_bzDecompress+0x8a9>
    60f2:	nop    WORD PTR [rax+rax*1+0x0]
    60f8:	test   eax,eax
    60fa:	je     65a8 <BZ2_bzDecompress+0xe48>
    6100:	movzx  r15d,bpl
    6104:	cmp    esi,0x1
    6107:	je     65af <BZ2_bzDecompress+0xe4f>
    610d:	lea    r8d,[rax+0x1]
    6111:	sub    r8d,esi
    6114:	sub    esi,eax
    6116:	lea    edi,[rsi-0x1]
    6119:	jmp    6129 <BZ2_bzDecompress+0x9c9>
    611b:	nop    DWORD PTR [rax+rax*1+0x0]
    6120:	cmp    eax,r8d
    6123:	je     63f2 <BZ2_bzDecompress+0xc92>
    6129:	mov    esi,edx
    612b:	shr    edx,0x18
    612e:	mov    BYTE PTR [rcx],bpl
    6131:	add    rcx,0x1
    6135:	xor    edx,r15d
    6138:	shl    esi,0x8
    613b:	xor    esi,DWORD PTR [r14+rdx*4]
    613f:	mov    edx,esi
    6141:	lea    esi,[rdi+rax*1]
    6144:	sub    eax,0x1
    6147:	jne    6120 <BZ2_bzDecompress+0x9c0>
    6149:	mov    rdi,QWORD PTR [rbx]
    614c:	mov    r8d,DWORD PTR [rdi+0x24]
    6150:	add    r9d,r8d
    6153:	sub    r9d,eax
    6156:	mov    DWORD PTR [rdi+0x24],r9d
    615a:	cmp    r8d,r9d
    615d:	jbe    6163 <BZ2_bzDecompress+0xa03>
    615f:	add    DWORD PTR [rdi+0x28],0x1
    6163:	mov    DWORD PTR [rbx+0xc70],edx
    6169:	mov    BYTE PTR [rbx+0xc],bpl
    616d:	mov    DWORD PTR [rbx+0x10],esi
    6170:	mov    DWORD PTR [rbx+0x444],r10d
    6177:	mov    DWORD PTR [rbx+0x40],r12d
    617b:	mov    QWORD PTR [rbx+0xc50],r13
    6182:	mov    DWORD PTR [rbx+0x3c],r11d
    6186:	mov    QWORD PTR [rdi+0x18],rcx
    618a:	mov    DWORD PTR [rdi+0x20],eax
    618d:	jmp    590f <BZ2_bzDecompress+0x1af>
    6192:	mov    r12d,esi
    6195:	mov    esi,0x2
    619a:	mov    r10d,edi
    619d:	jmp    5ccb <BZ2_bzDecompress+0x56b>
    61a2:	mov    DWORD PTR [rbx+0x10],0x3
    61a9:	xor    edi,edi
    61ab:	mov    r9d,0x100
    61b1:	nop    DWORD PTR [rax+0x0]
    61b8:	lea    ecx,[rdi+r9*1]
    61bc:	sar    ecx,1
    61be:	movsxd r10,ecx
    61c1:	cmp    esi,DWORD PTR [r12+r10*4]
    61c5:	cmovl  r9d,ecx
    61c9:	cmovge edi,ecx
    61cc:	mov    ecx,r9d
    61cf:	sub    ecx,edi
    61d1:	cmp    ecx,0x1
    61d4:	jne    61b8 <BZ2_bzDecompress+0xa58>
    61d6:	mov    ecx,esi
    61d8:	mov    r9,QWORD PTR [rsp+0x8]
    61dd:	shr    ecx,1
    61df:	movzx  r9d,BYTE PTR [r9+rcx*1]
    61e4:	lea    ecx,[rsi*4+0x0]
    61eb:	movzx  esi,WORD PTR [r13+rsi*2+0x0]
    61f1:	and    ecx,0x4
    61f4:	shr    r9d,cl
    61f7:	shl    r9d,0x10
    61fb:	and    r9d,0xf0000
    6202:	or     esi,r9d
    6205:	mov    DWORD PTR [rbx+0x3c],esi
    6208:	test   r15d,r15d
    620b:	jne    623a <BZ2_bzDecompress+0xada>
    620d:	movsxd rcx,DWORD PTR [rbx+0x1c]
    6211:	lea    r15,[rip+0xb208]        # 11420 <BZ2_rNums>
    6218:	mov    r9,rcx
    621b:	mov    r15d,DWORD PTR [r15+rcx*4]
    621f:	lea    ecx,[rcx+0x1]
    6222:	cmp    r9d,0x1ff
    6229:	mov    r9d,0x0
    622f:	cmove  ecx,r9d
    6233:	mov    DWORD PTR [rbx+0x18],r15d
    6237:	mov    DWORD PTR [rbx+0x1c],ecx
    623a:	lea    r10d,[r15-0x1]
    623e:	cmp    r10d,0x1
    6242:	mov    DWORD PTR [rbx+0x18],r10d
    6246:	sete   cl
    6249:	xor    ecx,edi
    624b:	lea    edi,[rbp+0x3]
    624e:	mov    DWORD PTR [rbx+0x444],edi
    6254:	cmp    DWORD PTR [rsp+0x4],edi
    6258:	je     5dde <BZ2_bzDecompress+0x67e>
    625e:	movzx  ecx,cl
    6261:	cmp    r11d,ecx
    6264:	je     6434 <BZ2_bzDecompress+0xcd4>
    626a:	mov    DWORD PTR [rbx+0x40],ecx
    626d:	jmp    603d <BZ2_bzDecompress+0x8dd>
    6272:	mov    DWORD PTR [rbx+0x10],0x3
    6279:	xor    r8d,r8d
    627c:	mov    r10d,0x100
    6282:	nop    WORD PTR [rax+rax*1+0x0]
    6288:	lea    ecx,[r8+r10*1]
    628c:	sar    ecx,1
    628e:	movsxd r15,ecx
    6291:	cmp    edi,DWORD PTR [rdx+r15*4]
    6295:	cmovl  r10d,ecx
    6299:	cmovge r8d,ecx
    629d:	mov    ecx,r10d
    62a0:	sub    ecx,r8d
    62a3:	cmp    ecx,0x1
    62a6:	jne    6288 <BZ2_bzDecompress+0xb28>
    62a8:	mov    ecx,edi
    62aa:	shr    ecx,1
    62ac:	movzx  r10d,BYTE PTR [r13+rcx*1+0x0]
    62b2:	lea    ecx,[rdi*4+0x0]
    62b9:	movzx  edi,WORD PTR [r12+rdi*2]
    62be:	and    ecx,0x4
    62c1:	shr    r10d,cl
    62c4:	lea    ecx,[r11+0x3]
    62c8:	shl    r10d,0x10
    62cc:	mov    DWORD PTR [rbx+0x444],ecx
    62d2:	and    r10d,0xf0000
    62d9:	or     edi,r10d
    62dc:	mov    DWORD PTR [rbx+0x3c],edi
    62df:	cmp    DWORD PTR [rsp+0x4],ecx
    62e3:	je     582e <BZ2_bzDecompress+0xce>
    62e9:	movzx  r8d,r8b
    62ed:	cmp    ebp,r8d
    62f0:	jne    5f80 <BZ2_bzDecompress+0x820>
    62f6:	xor    r8d,r8d
    62f9:	mov    r10d,0x100
    62ff:	nop
    6300:	lea    ecx,[r8+r10*1]
    6304:	sar    ecx,1
    6306:	movsxd rbp,ecx
    6309:	cmp    edi,DWORD PTR [rdx+rbp*4]
    630c:	cmovl  r10d,ecx
    6310:	cmovge r8d,ecx
    6314:	mov    ecx,r10d
    6317:	sub    ecx,r8d
    631a:	cmp    ecx,0x1
    631d:	jne    6300 <BZ2_bzDecompress+0xba0>
    631f:	mov    ecx,edi
    6321:	shr    ecx,1
    6323:	movzx  r10d,BYTE PTR [r13+rcx*1+0x0]
    6329:	lea    ecx,[rdi*4+0x0]
    6330:	and    ecx,0x4
    6333:	shr    r10d,cl
    6336:	mov    ecx,edi
    6338:	movzx  edi,WORD PTR [r12+rcx*2]
    633d:	shl    r10d,0x10
    6341:	lea    ecx,[r11+0x4]
    6345:	mov    DWORD PTR [rbx+0x444],ecx
    634b:	and    r10d,0xf0000
    6352:	movzx  ecx,r8b
    6356:	mov    r8d,0x100
    635c:	or     edi,r10d
    635f:	add    ecx,0x4
    6362:	mov    DWORD PTR [rbx+0x3c],edi
    6365:	mov    DWORD PTR [rbx+0x10],ecx
    6368:	nop    DWORD PTR [rax+rax*1+0x0]
    6370:	lea    ecx,[r9+r8*1]
    6374:	sar    ecx,1
    6376:	movsxd r10,ecx
    6379:	cmp    edi,DWORD PTR [rdx+r10*4]
    637d:	cmovl  r8d,ecx
    6381:	cmovge r9d,ecx
    6385:	mov    ecx,r8d
    6388:	sub    ecx,r9d
    638b:	cmp    ecx,0x1
    638e:	jne    6370 <BZ2_bzDecompress+0xc10>
    6390:	mov    ecx,edi
    6392:	mov    DWORD PTR [rbx+0x40],r9d
    6396:	add    r11d,0x5
    639a:	shr    ecx,1
    639c:	movzx  r8d,BYTE PTR [r13+rcx*1+0x0]
    63a2:	lea    ecx,[rdi*4+0x0]
    63a9:	movzx  edi,WORD PTR [r12+rdi*2]
    63ae:	mov    DWORD PTR [rbx+0x444],r11d
    63b5:	and    ecx,0x4
    63b8:	shr    r8d,cl
    63bb:	mov    ecx,r8d
    63be:	shl    ecx,0x10
    63c1:	and    ecx,0xf0000
    63c7:	or     ecx,edi
    63c9:	mov    DWORD PTR [rbx+0x3c],ecx
    63cc:	jmp    582e <BZ2_bzDecompress+0xce>
    63d1:	mov    r12d,0xffffffff
    63d7:	jmp    6076 <BZ2_bzDecompress+0x916>
    63dc:	mov    esi,r12d
    63df:	nop
    63e0:	add    r10d,0x1
    63e4:	test   eax,eax
    63e6:	je     6425 <BZ2_bzDecompress+0xcc5>
    63e8:	movzx  r15d,r12b
    63ec:	mov    r8d,eax
    63ef:	mov    r12d,esi
    63f2:	mov    eax,edx
    63f4:	mov    esi,edx
    63f6:	mov    BYTE PTR [rcx],bpl
    63f9:	add    rcx,0x1
    63fd:	shr    eax,0x18
    6400:	shl    esi,0x8
    6403:	xor    r15d,eax
    6406:	mov    eax,r15d
    6409:	xor    esi,DWORD PTR [r14+rax*4]
    640d:	lea    eax,[r8-0x1]
    6411:	mov    edx,esi
    6413:	jmp    5cd3 <BZ2_bzDecompress+0x573>
    6418:	mov    r12d,esi
    641b:	mov    esi,0x3
    6420:	jmp    619a <BZ2_bzDecompress+0xa3a>
    6425:	mov    r12d,esi
    6428:	xor    eax,eax
    642a:	mov    esi,0x1
    642f:	jmp    6149 <BZ2_bzDecompress+0x9e9>
    6434:	xor    edi,edi
    6436:	mov    r9d,0x100
    643c:	nop    DWORD PTR [rax+0x0]
    6440:	lea    ecx,[rdi+r9*1]
    6444:	sar    ecx,1
    6446:	movsxd r11,ecx
    6449:	cmp    esi,DWORD PTR [r12+r11*4]
    644d:	cmovl  r9d,ecx
    6451:	cmovge edi,ecx
    6454:	mov    ecx,r9d
    6457:	sub    ecx,edi
    6459:	cmp    ecx,0x1
    645c:	jne    6440 <BZ2_bzDecompress+0xce0>
    645e:	mov    ecx,esi
    6460:	mov    r15,QWORD PTR [rsp+0x8]
    6465:	shr    ecx,1
    6467:	movzx  r9d,BYTE PTR [r15+rcx*1]
    646c:	lea    ecx,[rsi*4+0x0]
    6473:	and    ecx,0x4
    6476:	shr    r9d,cl
    6479:	mov    ecx,esi
    647b:	movzx  esi,WORD PTR [r13+rcx*2+0x0]
    6481:	shl    r9d,0x10
    6485:	and    r9d,0xf0000
    648c:	or     esi,r9d
    648f:	mov    DWORD PTR [rbx+0x3c],esi
    6492:	test   r10d,r10d
    6495:	jne    64c4 <BZ2_bzDecompress+0xd64>
    6497:	movsxd rcx,DWORD PTR [rbx+0x1c]
    649b:	lea    r15,[rip+0xaf7e]        # 11420 <BZ2_rNums>
    64a2:	mov    r9,rcx
    64a5:	mov    r10d,DWORD PTR [r15+rcx*4]
    64a9:	lea    ecx,[rcx+0x1]
    64ac:	mov    r15d,0x0
    64b2:	cmp    r9d,0x1ff
    64b9:	cmove  ecx,r15d
    64bd:	mov    DWORD PTR [rbx+0x18],r10d
    64c1:	mov    DWORD PTR [rbx+0x1c],ecx
    64c4:	sub    r10d,0x1
    64c8:	lea    ecx,[rbp+0x4]
    64cb:	cmp    r10d,0x1
    64cf:	mov    DWORD PTR [rbx+0x444],ecx
    64d5:	sete   cl
    64d8:	mov    DWORD PTR [rbx+0x18],r10d
    64dc:	xor    ecx,edi
    64de:	mov    edi,0x100
    64e3:	movzx  ecx,cl
    64e6:	add    ecx,0x4
    64e9:	mov    DWORD PTR [rbx+0x10],ecx
    64ec:	nop    DWORD PTR [rax+0x0]
    64f0:	lea    ecx,[r8+rdi*1]
    64f4:	sar    ecx,1
    64f6:	movsxd r9,ecx
    64f9:	cmp    esi,DWORD PTR [r12+r9*4]
    64fd:	cmovl  edi,ecx
    6500:	cmovge r8d,ecx
    6504:	mov    ecx,edi
    6506:	sub    ecx,r8d
    6509:	cmp    ecx,0x1
    650c:	jne    64f0 <BZ2_bzDecompress+0xd90>
    650e:	mov    ecx,esi
    6510:	mov    rdi,QWORD PTR [rsp+0x8]
    6515:	mov    DWORD PTR [rbx+0x40],r8d
    6519:	shr    ecx,1
    651b:	movzx  edi,BYTE PTR [rdi+rcx*1]
    651f:	lea    ecx,[rsi*4+0x0]
    6526:	movzx  esi,WORD PTR [r13+rsi*2+0x0]
    652c:	and    ecx,0x4
    652f:	shr    edi,cl
    6531:	mov    ecx,edi
    6533:	shl    ecx,0x10
    6536:	and    ecx,0xf0000
    653c:	or     ecx,esi
    653e:	mov    DWORD PTR [rbx+0x3c],ecx
    6541:	test   r10d,r10d
    6544:	jne    6570 <BZ2_bzDecompress+0xe10>
    6546:	movsxd rcx,DWORD PTR [rbx+0x1c]
    654a:	lea    rdi,[rip+0xaecf]        # 11420 <BZ2_rNums>
    6551:	mov    rsi,rcx
    6554:	mov    r10d,DWORD PTR [rdi+rcx*4]
    6558:	lea    ecx,[rcx+0x1]
    655b:	mov    edi,0x0
    6560:	cmp    esi,0x1ff
    6566:	cmove  ecx,edi
    6569:	mov    DWORD PTR [rbx+0x18],r10d
    656d:	mov    DWORD PTR [rbx+0x1c],ecx
    6570:	sub    r10d,0x1
    6574:	xor    ecx,ecx
    6576:	cmp    r10d,0x1
    657a:	mov    DWORD PTR [rbx+0x18],r10d
    657e:	sete   cl
    6581:	add    ebp,0x5
    6584:	xor    r8d,ecx
    6587:	mov    DWORD PTR [rbx+0x444],ebp
    658d:	mov    DWORD PTR [rbx+0x40],r8d
    6591:	jmp    5dde <BZ2_bzDecompress+0x67e>
    6596:	mov    r12d,0xfffffffe
    659c:	jmp    6076 <BZ2_bzDecompress+0x916>
    65a1:	xor    esi,esi
    65a3:	jmp    6149 <BZ2_bzDecompress+0x9e9>
    65a8:	xor    eax,eax
    65aa:	jmp    6149 <BZ2_bzDecompress+0x9e9>
    65af:	mov    r8d,eax
    65b2:	jmp    63f2 <BZ2_bzDecompress+0xc92>
    65b7:	mov    rdi,QWORD PTR [rip+0xb662]        # 11c20 <stderr@@GLIBC_2.2.5>
    65be:	lea    rdx,[rip+0x7a33]        # dff8 <incs+0xab8>
    65c5:	mov    esi,0x1
    65ca:	xor    eax,eax
    65cc:	call   1270 <__fprintf_chk@plt>
    65d1:	mov    r8d,DWORD PTR [rbx+0xc74]
    65d8:	mov    ecx,DWORD PTR [rbx+0xc6c]
    65de:	jmp    6061 <BZ2_bzDecompress+0x901>
    65e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    65ee:	xchg   ax,ax

00000000000065f0 <BZ2_bzDecompressEnd>:
    65f0:	endbr64 
    65f4:	test   rdi,rdi
    65f7:	je     6687 <BZ2_bzDecompressEnd+0x97>
    65fd:	push   rbp
    65fe:	push   rbx
    65ff:	mov    rbx,rdi
    6602:	sub    rsp,0x8
    6606:	mov    rbp,QWORD PTR [rdi+0x30]
    660a:	test   rbp,rbp
    660d:	je     6680 <BZ2_bzDecompressEnd+0x90>
    660f:	cmp    QWORD PTR [rbp+0x0],rdi
    6613:	jne    6680 <BZ2_bzDecompressEnd+0x90>
    6615:	mov    rsi,QWORD PTR [rbp+0xc50]
    661c:	mov    rax,QWORD PTR [rdi+0x40]
    6620:	mov    rdi,QWORD PTR [rdi+0x48]
    6624:	test   rsi,rsi
    6627:	je     6633 <BZ2_bzDecompressEnd+0x43>
    6629:	call   rax
    662b:	mov    rax,QWORD PTR [rbx+0x40]
    662f:	mov    rdi,QWORD PTR [rbx+0x48]
    6633:	mov    rsi,QWORD PTR [rbp+0xc58]
    663a:	test   rsi,rsi
    663d:	je     6649 <BZ2_bzDecompressEnd+0x59>
    663f:	call   rax
    6641:	mov    rax,QWORD PTR [rbx+0x40]
    6645:	mov    rdi,QWORD PTR [rbx+0x48]
    6649:	mov    rsi,QWORD PTR [rbp+0xc60]
    6650:	test   rsi,rsi
    6653:	je     665f <BZ2_bzDecompressEnd+0x6f>
    6655:	call   rax
    6657:	mov    rax,QWORD PTR [rbx+0x40]
    665b:	mov    rdi,QWORD PTR [rbx+0x48]
    665f:	mov    rsi,QWORD PTR [rbx+0x30]
    6663:	call   rax
    6665:	mov    QWORD PTR [rbx+0x30],0x0
    666d:	xor    eax,eax
    666f:	add    rsp,0x8
    6673:	pop    rbx
    6674:	pop    rbp
    6675:	ret    
    6676:	nop    WORD PTR cs:[rax+rax*1+0x0]
    6680:	mov    eax,0xfffffffe
    6685:	jmp    666f <BZ2_bzDecompressEnd+0x7f>
    6687:	mov    eax,0xfffffffe
    668c:	ret    
    668d:	nop    DWORD PTR [rax]

0000000000006690 <BZ2_bzWriteOpen>:
    6690:	endbr64 
    6694:	push   r15
    6696:	mov    r15d,ecx
    6699:	push   r14
    669b:	mov    r14d,edx
    669e:	push   r13
    66a0:	mov    r13d,r8d
    66a3:	push   r12
    66a5:	push   rbp
    66a6:	mov    ebp,esi
    66a8:	push   rbx
    66a9:	mov    rbx,rdi
    66ac:	sub    rsp,0x8
    66b0:	test   rdi,rdi
    66b3:	je     67b8 <BZ2_bzWriteOpen+0x128>
    66b9:	mov    DWORD PTR [rdi],0x0
    66bf:	test   esi,esi
    66c1:	je     67a8 <BZ2_bzWriteOpen+0x118>
    66c7:	lea    eax,[rdx-0x1]
    66ca:	cmp    eax,0x8
    66cd:	ja     67a8 <BZ2_bzWriteOpen+0x118>
    66d3:	cmp    ecx,0x4
    66d6:	ja     67a8 <BZ2_bzWriteOpen+0x118>
    66dc:	cmp    r8d,0xfa
    66e3:	ja     67a8 <BZ2_bzWriteOpen+0x118>
    66e9:	mov    edi,0x13f0
    66ee:	call   1210 <malloc@plt>
    66f3:	mov    r12,rax
    66f6:	test   rax,rax
    66f9:	je     6809 <BZ2_bzWriteOpen+0x179>
    66ff:	mov    DWORD PTR [rbx],0x0
    6705:	test   r13d,r13d
    6708:	mov    eax,0x1e
    670d:	mov    DWORD PTR [r12],ebp
    6711:	mov    edx,r15d
    6714:	cmove  r13d,eax
    6718:	mov    esi,r14d
    671b:	mov    DWORD PTR [r12+0x13e8],0x0
    6727:	lea    rdi,[r12+0x1398]
    672f:	mov    BYTE PTR [r12+0x13ec],0x0
    6738:	mov    DWORD PTR [r12+0x138c],0x0
    6744:	mov    ecx,r13d
    6747:	mov    BYTE PTR [r12+0x1390],0x1
    6750:	mov    QWORD PTR [r12+0x13d0],0x0
    675c:	mov    QWORD PTR [r12+0x13d8],0x0
    6768:	mov    QWORD PTR [r12+0x13e0],0x0
    6774:	call   5180 <BZ2_bzCompressInit>
    6779:	test   eax,eax
    677b:	jne    67f8 <BZ2_bzWriteOpen+0x168>
    677d:	mov    DWORD PTR [r12+0x13a0],0x0
    6789:	mov    BYTE PTR [r12+0x13ec],0x1
    6792:	add    rsp,0x8
    6796:	mov    rax,r12
    6799:	pop    rbx
    679a:	pop    rbp
    679b:	pop    r12
    679d:	pop    r13
    679f:	pop    r14
    67a1:	pop    r15
    67a3:	ret    
    67a4:	nop    DWORD PTR [rax+0x0]
    67a8:	mov    DWORD PTR [rbx],0xfffffffe
    67ae:	xor    r12d,r12d
    67b1:	jmp    6792 <BZ2_bzWriteOpen+0x102>
    67b3:	nop    DWORD PTR [rax+rax*1+0x0]
    67b8:	test   esi,esi
    67ba:	je     67f0 <BZ2_bzWriteOpen+0x160>
    67bc:	lea    eax,[rdx-0x1]
    67bf:	cmp    eax,0x8
    67c2:	ja     67f0 <BZ2_bzWriteOpen+0x160>
    67c4:	cmp    r8d,0xfa
    67cb:	ja     67f0 <BZ2_bzWriteOpen+0x160>
    67cd:	cmp    ecx,0x4
    67d0:	ja     67f0 <BZ2_bzWriteOpen+0x160>
    67d2:	mov    edi,0x13f0
    67d7:	call   1210 <malloc@plt>
    67dc:	mov    r12,rax
    67df:	test   rax,rax
    67e2:	jne    6705 <BZ2_bzWriteOpen+0x75>
    67e8:	nop    DWORD PTR [rax+rax*1+0x0]
    67f0:	xor    r12d,r12d
    67f3:	jmp    6792 <BZ2_bzWriteOpen+0x102>
    67f5:	nop    DWORD PTR [rax]
    67f8:	test   rbx,rbx
    67fb:	je     67ff <BZ2_bzWriteOpen+0x16f>
    67fd:	mov    DWORD PTR [rbx],eax
    67ff:	mov    rdi,r12
    6802:	call   1170 <free@plt>
    6807:	jmp    67f0 <BZ2_bzWriteOpen+0x160>
    6809:	mov    DWORD PTR [rbx],0xfffffffd
    680f:	jmp    6792 <BZ2_bzWriteOpen+0x102>
    6811:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    681c:	nop    DWORD PTR [rax+0x0]

0000000000006820 <BZ2_bzWrite>:
    6820:	endbr64 
    6824:	push   r14
    6826:	push   r13
    6828:	push   r12
    682a:	push   rbp
    682b:	mov    rbp,rdi
    682e:	push   rbx
    682f:	mov    rbx,rsi
    6832:	test   rdi,rdi
    6835:	je     6910 <BZ2_bzWrite+0xf0>
    683b:	mov    DWORD PTR [rdi],0x0
    6841:	test   rsi,rsi
    6844:	je     6948 <BZ2_bzWrite+0x128>
    684a:	mov    DWORD PTR [rsi+0x13e8],0x0
    6854:	test   rdx,rdx
    6857:	je     6975 <BZ2_bzWrite+0x155>
    685d:	test   ecx,ecx
    685f:	js     6970 <BZ2_bzWrite+0x150>
    6865:	cmp    BYTE PTR [rbx+0x1390],0x0
    686c:	je     6980 <BZ2_bzWrite+0x160>
    6872:	test   ecx,ecx
    6874:	je     6950 <BZ2_bzWrite+0x130>
    687a:	mov    DWORD PTR [rbx+0x13a0],ecx
    6880:	lea    r12,[rbx+0x4]
    6884:	lea    r13,[rbx+0x1398]
    688b:	mov    QWORD PTR [rbx+0x1398],rdx
    6892:	jmp    68a6 <BZ2_bzWrite+0x86>
    6894:	nop    DWORD PTR [rax+0x0]
    6898:	mov    eax,DWORD PTR [rbx+0x13a0]
    689e:	test   eax,eax
    68a0:	je     6950 <BZ2_bzWrite+0x130>
    68a6:	mov    DWORD PTR [rbx+0x13b8],0x1388
    68b0:	xor    esi,esi
    68b2:	mov    rdi,r13
    68b5:	mov    QWORD PTR [rbx+0x13b0],r12
    68bc:	call   53c0 <BZ2_bzCompress>
    68c1:	cmp    eax,0x1
    68c4:	jne    69a0 <BZ2_bzWrite+0x180>
    68ca:	mov    eax,DWORD PTR [rbx+0x13b8]
    68d0:	cmp    eax,0x1387
    68d5:	ja     6898 <BZ2_bzWrite+0x78>
    68d7:	mov    r14d,0x1388
    68dd:	mov    ecx,DWORD PTR [rbx]
    68df:	mov    esi,0x1
    68e4:	mov    rdi,r12
    68e7:	sub    r14d,eax
    68ea:	mov    edx,r14d
    68ed:	call   2130 <spec_fwrite>
    68f2:	cmp    r14d,eax
    68f5:	je     6898 <BZ2_bzWrite+0x78>
    68f7:	test   rbp,rbp
    68fa:	je     6903 <BZ2_bzWrite+0xe3>
    68fc:	mov    DWORD PTR [rbp+0x0],0xfffffffa
    6903:	mov    DWORD PTR [rbx+0x13e8],0xfffffffa
    690d:	jmp    693a <BZ2_bzWrite+0x11a>
    690f:	nop
    6910:	test   rsi,rsi
    6913:	je     693a <BZ2_bzWrite+0x11a>
    6915:	mov    DWORD PTR [rsi+0x13e8],0x0
    691f:	test   rdx,rdx
    6922:	jne    685d <BZ2_bzWrite+0x3d>
    6928:	nop    DWORD PTR [rax+rax*1+0x0]
    6930:	mov    DWORD PTR [rbx+0x13e8],0xfffffffe
    693a:	pop    rbx
    693b:	pop    rbp
    693c:	pop    r12
    693e:	pop    r13
    6940:	pop    r14
    6942:	ret    
    6943:	nop    DWORD PTR [rax+rax*1+0x0]
    6948:	mov    DWORD PTR [rdi],0xfffffffe
    694e:	jmp    693a <BZ2_bzWrite+0x11a>
    6950:	test   rbp,rbp
    6953:	je     695c <BZ2_bzWrite+0x13c>
    6955:	mov    DWORD PTR [rbp+0x0],0x0
    695c:	mov    DWORD PTR [rbx+0x13e8],0x0
    6966:	pop    rbx
    6967:	pop    rbp
    6968:	pop    r12
    696a:	pop    r13
    696c:	pop    r14
    696e:	ret    
    696f:	nop
    6970:	test   rbp,rbp
    6973:	je     6930 <BZ2_bzWrite+0x110>
    6975:	mov    DWORD PTR [rbp+0x0],0xfffffffe
    697c:	jmp    6930 <BZ2_bzWrite+0x110>
    697e:	xchg   ax,ax
    6980:	test   rbp,rbp
    6983:	je     698c <BZ2_bzWrite+0x16c>
    6985:	mov    DWORD PTR [rbp+0x0],0xffffffff
    698c:	mov    DWORD PTR [rbx+0x13e8],0xffffffff
    6996:	pop    rbx
    6997:	pop    rbp
    6998:	pop    r12
    699a:	pop    r13
    699c:	pop    r14
    699e:	ret    
    699f:	nop
    69a0:	test   rbp,rbp
    69a3:	je     69a8 <BZ2_bzWrite+0x188>
    69a5:	mov    DWORD PTR [rbp+0x0],eax
    69a8:	mov    DWORD PTR [rbx+0x13e8],eax
    69ae:	jmp    693a <BZ2_bzWrite+0x11a>

00000000000069b0 <BZ2_bzWriteClose64>:
    69b0:	endbr64 
    69b4:	push   r15
    69b6:	push   r14
    69b8:	push   r13
    69ba:	push   r12
    69bc:	push   rbp
    69bd:	push   rbx
    69be:	sub    rsp,0x28
    69c2:	mov    QWORD PTR [rsp+0x10],rdi
    69c7:	mov    r14,QWORD PTR [rsp+0x60]
    69cc:	test   rsi,rsi
    69cf:	je     6b90 <BZ2_bzWriteClose64+0x1e0>
    69d5:	cmp    BYTE PTR [rsi+0x1390],0x0
    69dc:	mov    r15,rsi
    69df:	je     6b60 <BZ2_bzWriteClose64+0x1b0>
    69e5:	mov    r12,rcx
    69e8:	mov    rbp,r8
    69eb:	mov    rbx,r9
    69ee:	test   rcx,rcx
    69f1:	je     69f9 <BZ2_bzWriteClose64+0x49>
    69f3:	mov    DWORD PTR [rcx],0x0
    69f9:	test   rbp,rbp
    69fc:	je     6a05 <BZ2_bzWriteClose64+0x55>
    69fe:	mov    DWORD PTR [rbp+0x0],0x0
    6a05:	test   rbx,rbx
    6a08:	je     6a10 <BZ2_bzWriteClose64+0x60>
    6a0a:	mov    DWORD PTR [rbx],0x0
    6a10:	test   r14,r14
    6a13:	je     6a1c <BZ2_bzWriteClose64+0x6c>
    6a15:	mov    DWORD PTR [r14],0x0
    6a1c:	lea    r13,[r15+0x1398]
    6a23:	test   edx,edx
    6a25:	je     6aa0 <BZ2_bzWriteClose64+0xf0>
    6a27:	test   r12,r12
    6a2a:	je     6a37 <BZ2_bzWriteClose64+0x87>
    6a2c:	mov    eax,DWORD PTR [r15+0x13a4]
    6a33:	mov    DWORD PTR [r12],eax
    6a37:	test   rbp,rbp
    6a3a:	je     6a46 <BZ2_bzWriteClose64+0x96>
    6a3c:	mov    eax,DWORD PTR [r15+0x13a8]
    6a43:	mov    DWORD PTR [rbp+0x0],eax
    6a46:	test   rbx,rbx
    6a49:	je     6a54 <BZ2_bzWriteClose64+0xa4>
    6a4b:	mov    eax,DWORD PTR [r15+0x13bc]
    6a52:	mov    DWORD PTR [rbx],eax
    6a54:	test   r14,r14
    6a57:	je     6a63 <BZ2_bzWriteClose64+0xb3>
    6a59:	mov    eax,DWORD PTR [r15+0x13c0]
    6a60:	mov    DWORD PTR [r14],eax
    6a63:	mov    rax,QWORD PTR [rsp+0x10]
    6a68:	test   rax,rax
    6a6b:	je     6a73 <BZ2_bzWriteClose64+0xc3>
    6a6d:	mov    DWORD PTR [rax],0x0
    6a73:	mov    DWORD PTR [r15+0x13e8],0x0
    6a7e:	mov    rdi,r13
    6a81:	call   5580 <BZ2_bzCompressEnd>
    6a86:	add    rsp,0x28
    6a8a:	mov    rdi,r15
    6a8d:	pop    rbx
    6a8e:	pop    rbp
    6a8f:	pop    r12
    6a91:	pop    r13
    6a93:	pop    r14
    6a95:	pop    r15
    6a97:	jmp    1170 <free@plt>
    6a9c:	nop    DWORD PTR [rax+0x0]
    6aa0:	mov    eax,DWORD PTR [r15+0x13e8]
    6aa7:	test   eax,eax
    6aa9:	jne    6a27 <BZ2_bzWriteClose64+0x77>
    6aaf:	lea    rax,[r15+0x4]
    6ab3:	mov    QWORD PTR [rsp+0x8],rax
    6ab8:	jmp    6aca <BZ2_bzWriteClose64+0x11a>
    6aba:	nop    WORD PTR [rax+rax*1+0x0]
    6ac0:	cmp    r8d,0x4
    6ac4:	je     6a27 <BZ2_bzWriteClose64+0x77>
    6aca:	mov    rax,QWORD PTR [rsp+0x8]
    6acf:	mov    esi,0x2
    6ad4:	mov    rdi,r13
    6ad7:	mov    DWORD PTR [r15+0x13b8],0x1388
    6ae2:	mov    QWORD PTR [r15+0x13b0],rax
    6ae9:	call   53c0 <BZ2_bzCompress>
    6aee:	mov    r8d,eax
    6af1:	lea    eax,[rax-0x3]
    6af4:	cmp    eax,0x1
    6af7:	ja     6bb0 <BZ2_bzWriteClose64+0x200>
    6afd:	mov    eax,DWORD PTR [r15+0x13b8]
    6b04:	cmp    eax,0x1387
    6b09:	ja     6ac0 <BZ2_bzWriteClose64+0x110>
    6b0b:	mov    ecx,DWORD PTR [r15]
    6b0e:	mov    rdi,QWORD PTR [rsp+0x8]
    6b13:	mov    edx,0x1388
    6b18:	mov    esi,0x1
    6b1d:	sub    edx,eax
    6b1f:	mov    DWORD PTR [rsp+0x1c],r8d
    6b24:	mov    DWORD PTR [rsp+0x18],edx
    6b28:	call   2130 <spec_fwrite>
    6b2d:	mov    edx,DWORD PTR [rsp+0x18]
    6b31:	mov    r8d,DWORD PTR [rsp+0x1c]
    6b36:	cmp    edx,eax
    6b38:	je     6ac0 <BZ2_bzWriteClose64+0x110>
    6b3a:	mov    rax,QWORD PTR [rsp+0x10]
    6b3f:	test   rax,rax
    6b42:	je     6b4a <BZ2_bzWriteClose64+0x19a>
    6b44:	mov    DWORD PTR [rax],0xfffffffa
    6b4a:	mov    DWORD PTR [r15+0x13e8],0xfffffffa
    6b55:	jmp    6b7b <BZ2_bzWriteClose64+0x1cb>
    6b57:	nop    WORD PTR [rax+rax*1+0x0]
    6b60:	mov    rax,QWORD PTR [rsp+0x10]
    6b65:	test   rax,rax
    6b68:	je     6b70 <BZ2_bzWriteClose64+0x1c0>
    6b6a:	mov    DWORD PTR [rax],0xffffffff
    6b70:	mov    DWORD PTR [r15+0x13e8],0xffffffff
    6b7b:	add    rsp,0x28
    6b7f:	pop    rbx
    6b80:	pop    rbp
    6b81:	pop    r12
    6b83:	pop    r13
    6b85:	pop    r14
    6b87:	pop    r15
    6b89:	ret    
    6b8a:	nop    WORD PTR [rax+rax*1+0x0]
    6b90:	test   rdi,rdi
    6b93:	je     6b7b <BZ2_bzWriteClose64+0x1cb>
    6b95:	mov    DWORD PTR [rdi],0x0
    6b9b:	add    rsp,0x28
    6b9f:	pop    rbx
    6ba0:	pop    rbp
    6ba1:	pop    r12
    6ba3:	pop    r13
    6ba5:	pop    r14
    6ba7:	pop    r15
    6ba9:	ret    
    6baa:	nop    WORD PTR [rax+rax*1+0x0]
    6bb0:	mov    rax,QWORD PTR [rsp+0x10]
    6bb5:	test   rax,rax
    6bb8:	je     6bbd <BZ2_bzWriteClose64+0x20d>
    6bba:	mov    DWORD PTR [rax],r8d
    6bbd:	mov    DWORD PTR [r15+0x13e8],r8d
    6bc4:	jmp    6b7b <BZ2_bzWriteClose64+0x1cb>
    6bc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006bd0 <BZ2_bzWriteClose>:
    6bd0:	endbr64 
    6bd4:	sub    rsp,0x10
    6bd8:	mov    r9,r8
    6bdb:	xor    r8d,r8d
    6bde:	push   0x0
    6be0:	call   69b0 <BZ2_bzWriteClose64>
    6be5:	add    rsp,0x18
    6be9:	ret    
    6bea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000006bf0 <BZ2_bzReadOpen>:
    6bf0:	endbr64 
    6bf4:	push   r15
    6bf6:	mov    r15d,edx
    6bf9:	mov    edx,ecx
    6bfb:	push   r14
    6bfd:	mov    r14d,esi
    6c00:	push   r13
    6c02:	mov    r13d,r9d
    6c05:	push   r12
    6c07:	push   rbp
    6c08:	mov    rbp,rdi
    6c0b:	push   rbx
    6c0c:	mov    rbx,r8
    6c0f:	sub    rsp,0x18
    6c13:	test   esi,esi
    6c15:	sete   al
    6c18:	cmp    ecx,0x1
    6c1b:	seta   cl
    6c1e:	or     eax,ecx
    6c20:	test   rdi,rdi
    6c23:	je     6d78 <BZ2_bzReadOpen+0x188>
    6c29:	mov    DWORD PTR [rdi],0x0
    6c2f:	test   al,al
    6c31:	jne    6d55 <BZ2_bzReadOpen+0x165>
    6c37:	cmp    r15d,0x4
    6c3b:	ja     6d55 <BZ2_bzReadOpen+0x165>
    6c41:	test   r8,r8
    6c44:	jne    6d48 <BZ2_bzReadOpen+0x158>
    6c4a:	test   r9d,r9d
    6c4d:	jne    6d55 <BZ2_bzReadOpen+0x165>
    6c53:	test   r8,r8
    6c56:	jne    6d48 <BZ2_bzReadOpen+0x158>
    6c5c:	mov    edi,0x13f0
    6c61:	mov    DWORD PTR [rsp+0xc],edx
    6c65:	call   1210 <malloc@plt>
    6c6a:	mov    edx,DWORD PTR [rsp+0xc]
    6c6e:	test   rax,rax
    6c71:	mov    r12,rax
    6c74:	je     6dc2 <BZ2_bzReadOpen+0x1d2>
    6c7a:	test   rbp,rbp
    6c7d:	je     6c86 <BZ2_bzReadOpen+0x96>
    6c7f:	mov    DWORD PTR [rbp+0x0],0x0
    6c86:	mov    DWORD PTR [r12+0x13e8],0x0
    6c92:	mov    BYTE PTR [r12+0x13ec],0x0
    6c9b:	mov    DWORD PTR [r12],r14d
    6c9f:	mov    DWORD PTR [r12+0x138c],0x0
    6cab:	mov    BYTE PTR [r12+0x1390],0x0
    6cb4:	mov    QWORD PTR [r12+0x13d0],0x0
    6cc0:	mov    QWORD PTR [r12+0x13d8],0x0
    6ccc:	mov    QWORD PTR [r12+0x13e0],0x0
    6cd8:	test   r13d,r13d
    6cdb:	jle    6d05 <BZ2_bzReadOpen+0x115>
    6cdd:	lea    ecx,[r13-0x1]
    6ce1:	xor    eax,eax
    6ce3:	nop    DWORD PTR [rax+rax*1+0x0]
    6ce8:	movzx  edi,BYTE PTR [rbx+rax*1]
    6cec:	mov    BYTE PTR [r12+rax*1+0x4],dil
    6cf1:	mov    rdi,rax
    6cf4:	add    rax,0x1
    6cf8:	cmp    rdi,rcx
    6cfb:	jne    6ce8 <BZ2_bzReadOpen+0xf8>
    6cfd:	mov    DWORD PTR [r12+0x138c],r13d
    6d05:	lea    rdi,[r12+0x1398]
    6d0d:	mov    esi,r15d
    6d10:	call   5610 <BZ2_bzDecompressInit>
    6d15:	test   eax,eax
    6d17:	jne    6db0 <BZ2_bzReadOpen+0x1c0>
    6d1d:	mov    eax,DWORD PTR [r12+0x138c]
    6d25:	mov    BYTE PTR [r12+0x13ec],0x1
    6d2e:	mov    DWORD PTR [r12+0x13a0],eax
    6d36:	lea    rax,[r12+0x4]
    6d3b:	mov    QWORD PTR [r12+0x1398],rax
    6d43:	jmp    6d5f <BZ2_bzReadOpen+0x16f>
    6d45:	nop    DWORD PTR [rax]
    6d48:	cmp    r13d,0x1388
    6d4f:	jbe    6c5c <BZ2_bzReadOpen+0x6c>
    6d55:	mov    DWORD PTR [rbp+0x0],0xfffffffe
    6d5c:	xor    r12d,r12d
    6d5f:	add    rsp,0x18
    6d63:	mov    rax,r12
    6d66:	pop    rbx
    6d67:	pop    rbp
    6d68:	pop    r12
    6d6a:	pop    r13
    6d6c:	pop    r14
    6d6e:	pop    r15
    6d70:	ret    
    6d71:	nop    DWORD PTR [rax+0x0]
    6d78:	test   al,al
    6d7a:	jne    6da2 <BZ2_bzReadOpen+0x1b2>
    6d7c:	cmp    r15d,0x4
    6d80:	ja     6da2 <BZ2_bzReadOpen+0x1b2>
    6d82:	test   r8,r8
    6d85:	jne    6d95 <BZ2_bzReadOpen+0x1a5>
    6d87:	test   r9d,r9d
    6d8a:	jne    6da2 <BZ2_bzReadOpen+0x1b2>
    6d8c:	test   r8,r8
    6d8f:	je     6c5c <BZ2_bzReadOpen+0x6c>
    6d95:	cmp    r13d,0x1388
    6d9c:	jbe    6c5c <BZ2_bzReadOpen+0x6c>
    6da2:	xor    r12d,r12d
    6da5:	jmp    6d5f <BZ2_bzReadOpen+0x16f>
    6da7:	nop    WORD PTR [rax+rax*1+0x0]
    6db0:	test   rbp,rbp
    6db3:	je     6db8 <BZ2_bzReadOpen+0x1c8>
    6db5:	mov    DWORD PTR [rbp+0x0],eax
    6db8:	mov    rdi,r12
    6dbb:	call   1170 <free@plt>
    6dc0:	jmp    6da2 <BZ2_bzReadOpen+0x1b2>
    6dc2:	test   rbp,rbp
    6dc5:	je     6da2 <BZ2_bzReadOpen+0x1b2>
    6dc7:	mov    DWORD PTR [rbp+0x0],0xfffffffd
    6dce:	jmp    6d5f <BZ2_bzReadOpen+0x16f>

0000000000006dd0 <bzopen_or_bzdopen.isra.0>:
    6dd0:	push   r15
    6dd2:	xor    ecx,ecx
    6dd4:	push   r14
    6dd6:	push   r13
    6dd8:	push   r12
    6dda:	push   rbp
    6ddb:	push   rbx
    6ddc:	sub    rsp,0x28
    6de0:	mov    rax,QWORD PTR fs:0x28
    6de9:	mov    QWORD PTR [rsp+0x18],rax
    6dee:	xor    eax,eax
    6df0:	mov    WORD PTR [rsp+0x16],cx
    6df5:	mov    QWORD PTR [rsp+0xe],0x0
    6dfe:	test   rsi,rsi
    6e01:	je     6eb5 <bzopen_or_bzdopen.isra.0+0xe5>
    6e07:	movsx  ebx,BYTE PTR [rsi]
    6e0a:	mov    r12,rdi
    6e0d:	mov    rbp,rsi
    6e10:	mov    r13d,edx
    6e13:	test   bl,bl
    6e15:	je     6f28 <bzopen_or_bzdopen.isra.0+0x158>
    6e1b:	xor    r14d,r14d
    6e1e:	mov    r15d,0x9
    6e24:	jmp    6e5d <bzopen_or_bzdopen.isra.0+0x8d>
    6e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
    6e30:	cmp    bl,0x72
    6e33:	je     6ee0 <bzopen_or_bzdopen.isra.0+0x110>
    6e39:	call   1290 <__ctype_b_loc@plt>
    6e3e:	movsx  rdx,bl
    6e42:	sub    ebx,0x30
    6e45:	mov    rax,QWORD PTR [rax]
    6e48:	test   BYTE PTR [rax+rdx*2+0x1],0x8
    6e4d:	cmovne r15d,ebx
    6e51:	movsx  ebx,BYTE PTR [rbp+0x1]
    6e55:	add    rbp,0x1
    6e59:	test   bl,bl
    6e5b:	je     6e79 <bzopen_or_bzdopen.isra.0+0xa9>
    6e5d:	cmp    bl,0x73
    6e60:	je     6e51 <bzopen_or_bzdopen.isra.0+0x81>
    6e62:	cmp    bl,0x77
    6e65:	jne    6e30 <bzopen_or_bzdopen.isra.0+0x60>
    6e67:	movsx  ebx,BYTE PTR [rbp+0x1]
    6e6b:	add    rbp,0x1
    6e6f:	mov    r14d,0x1
    6e75:	test   bl,bl
    6e77:	jne    6e5d <bzopen_or_bzdopen.isra.0+0x8d>
    6e79:	test   r14d,r14d
    6e7c:	lea    rax,[rip+0x6bba]        # da3d <incs+0x4fd>
    6e83:	lea    rdx,[rip+0x6b54]        # d9de <incs+0x49e>
    6e8a:	cmove  rax,rdx
    6e8e:	movzx  eax,BYTE PTR [rax]
    6e91:	mov    BYTE PTR [rsp+0xe],al
    6e95:	mov    eax,0x62
    6e9a:	mov    WORD PTR [rsp+0xf],ax
    6e9f:	test   r13d,r13d
    6ea2:	jne    6eb5 <bzopen_or_bzdopen.isra.0+0xe5>
    6ea4:	test   r12,r12
    6ea7:	je     6eb0 <bzopen_or_bzdopen.isra.0+0xe0>
    6ea9:	cmp    BYTE PTR [r12],0x0
    6eae:	jne    6eb5 <bzopen_or_bzdopen.isra.0+0xe5>
    6eb0:	test   r14d,r14d
    6eb3:	jne    6ef0 <bzopen_or_bzdopen.isra.0+0x120>
    6eb5:	xor    eax,eax
    6eb7:	mov    rcx,QWORD PTR [rsp+0x18]
    6ebc:	xor    rcx,QWORD PTR fs:0x28
    6ec5:	jne    6f3d <bzopen_or_bzdopen.isra.0+0x16d>
    6ec7:	add    rsp,0x28
    6ecb:	pop    rbx
    6ecc:	pop    rbp
    6ecd:	pop    r12
    6ecf:	pop    r13
    6ed1:	pop    r14
    6ed3:	pop    r15
    6ed5:	ret    
    6ed6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    6ee0:	xor    r14d,r14d
    6ee3:	jmp    6e51 <bzopen_or_bzdopen.isra.0+0x81>
    6ee8:	nop    DWORD PTR [rax+rax*1+0x0]
    6ef0:	cmp    r15d,0x9
    6ef4:	mov    edx,0x9
    6ef9:	lea    rdi,[rsp+0x8]
    6efe:	mov    r8d,0x1e
    6f04:	cmovg  r15d,edx
    6f08:	mov    edx,0x1
    6f0d:	mov    esi,0x1
    6f12:	test   r15d,r15d
    6f15:	cmovg  edx,r15d
    6f19:	xor    ecx,ecx
    6f1b:	call   6690 <BZ2_bzWriteOpen>
    6f20:	jmp    6eb7 <bzopen_or_bzdopen.isra.0+0xe7>
    6f22:	nop    WORD PTR [rax+rax*1+0x0]
    6f28:	mov    r15d,0x9
    6f2e:	xor    r14d,r14d
    6f31:	lea    rax,[rip+0x6aa6]        # d9de <incs+0x49e>
    6f38:	jmp    6e8e <bzopen_or_bzdopen.isra.0+0xbe>
    6f3d:	call   11a0 <__stack_chk_fail@plt>
    6f42:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    6f4d:	nop    DWORD PTR [rax]

0000000000006f50 <BZ2_bzReadClose>:
    6f50:	endbr64 
    6f54:	push   rbp
    6f55:	mov    rbp,rsi
    6f58:	test   rdi,rdi
    6f5b:	je     6fa8 <BZ2_bzReadClose+0x58>
    6f5d:	mov    DWORD PTR [rdi],0x0
    6f63:	test   rsi,rsi
    6f66:	je     6fa0 <BZ2_bzReadClose+0x50>
    6f68:	cmp    BYTE PTR [rsi+0x1390],0x0
    6f6f:	mov    DWORD PTR [rsi+0x13e8],0x0
    6f79:	jne    6f90 <BZ2_bzReadClose+0x40>
    6f7b:	cmp    BYTE PTR [rbp+0x13ec],0x0
    6f82:	jne    6fc9 <BZ2_bzReadClose+0x79>
    6f84:	mov    rdi,rbp
    6f87:	pop    rbp
    6f88:	jmp    1170 <free@plt>
    6f8d:	nop    DWORD PTR [rax]
    6f90:	mov    DWORD PTR [rdi],0xffffffff
    6f96:	mov    DWORD PTR [rbp+0x13e8],0xffffffff
    6fa0:	pop    rbp
    6fa1:	ret    
    6fa2:	nop    WORD PTR [rax+rax*1+0x0]
    6fa8:	test   rsi,rsi
    6fab:	je     6fa0 <BZ2_bzReadClose+0x50>
    6fad:	cmp    BYTE PTR [rsi+0x1390],0x0
    6fb4:	mov    DWORD PTR [rsi+0x13e8],0x0
    6fbe:	jne    6f96 <BZ2_bzReadClose+0x46>
    6fc0:	cmp    BYTE PTR [rbp+0x13ec],0x0
    6fc7:	je     6f84 <BZ2_bzReadClose+0x34>
    6fc9:	lea    rdi,[rbp+0x1398]
    6fd0:	call   65f0 <BZ2_bzDecompressEnd>
    6fd5:	mov    rdi,rbp
    6fd8:	pop    rbp
    6fd9:	jmp    1170 <free@plt>
    6fde:	xchg   ax,ax

0000000000006fe0 <BZ2_bzRead>:
    6fe0:	endbr64 
    6fe4:	push   r15
    6fe6:	mov    r15,rsi
    6fe9:	push   r14
    6feb:	push   r13
    6fed:	push   r12
    6fef:	push   rbp
    6ff0:	mov    ebp,ecx
    6ff2:	push   rbx
    6ff3:	mov    rbx,rdi
    6ff6:	sub    rsp,0x18
    6ffa:	test   rdi,rdi
    6ffd:	je     7158 <BZ2_bzRead+0x178>
    7003:	mov    DWORD PTR [rdi],0x0
    7009:	test   rsi,rsi
    700c:	je     7190 <BZ2_bzRead+0x1b0>
    7012:	mov    DWORD PTR [rsi+0x13e8],0x0
    701c:	test   rdx,rdx
    701f:	je     71a5 <BZ2_bzRead+0x1c5>
    7025:	test   ebp,ebp
    7027:	js     71a0 <BZ2_bzRead+0x1c0>
    702d:	cmp    BYTE PTR [r15+0x1390],0x0
    7035:	jne    71b0 <BZ2_bzRead+0x1d0>
    703b:	test   ebp,ebp
    703d:	je     71d0 <BZ2_bzRead+0x1f0>
    7043:	mov    DWORD PTR [r15+0x13b8],ebp
    704a:	lea    r13,[r15+0x1398]
    7051:	lea    r14,[r15+0x4]
    7055:	mov    QWORD PTR [r15+0x13b0],rdx
    705c:	jmp    7092 <BZ2_bzRead+0xb2>
    705e:	xchg   ax,ax
    7060:	mov    rdi,r13
    7063:	call   5760 <BZ2_bzDecompress>
    7068:	mov    r12d,eax
    706b:	test   eax,0xfffffffb
    7070:	jne    71f0 <BZ2_bzRead+0x210>
    7076:	test   eax,eax
    7078:	je     70f0 <BZ2_bzRead+0x110>
    707a:	cmp    eax,0x4
    707d:	je     7210 <BZ2_bzRead+0x230>
    7083:	mov    eax,DWORD PTR [r15+0x13b8]
    708a:	test   eax,eax
    708c:	je     7136 <BZ2_bzRead+0x156>
    7092:	mov    esi,DWORD PTR [r15+0x13a0]
    7099:	test   esi,esi
    709b:	jne    7060 <BZ2_bzRead+0x80>
    709d:	mov    r12d,DWORD PTR [r15]
    70a0:	mov    edi,r12d
    70a3:	call   1e10 <spec_getc>
    70a8:	cmp    eax,0xffffffff
    70ab:	je     7060 <BZ2_bzRead+0x80>
    70ad:	movzx  edi,al
    70b0:	mov    esi,r12d
    70b3:	call   1ef0 <spec_ungetc>
    70b8:	mov    ecx,DWORD PTR [r15]
    70bb:	mov    edx,0x1388
    70c0:	mov    rdi,r14
    70c3:	mov    esi,0x1
    70c8:	call   1cd0 <spec_fread>
    70cd:	mov    QWORD PTR [r15+0x1398],r14
    70d4:	mov    DWORD PTR [r15+0x138c],eax
    70db:	mov    DWORD PTR [r15+0x13a0],eax
    70e2:	jmp    7060 <BZ2_bzRead+0x80>
    70e7:	nop    WORD PTR [rax+rax*1+0x0]
    70f0:	mov    esi,DWORD PTR [r15]
    70f3:	mov    edi,esi
    70f5:	mov    DWORD PTR [rsp+0xc],esi
    70f9:	call   1e10 <spec_getc>
    70fe:	cmp    eax,0xffffffff
    7101:	je     7118 <BZ2_bzRead+0x138>
    7103:	mov    esi,DWORD PTR [rsp+0xc]
    7107:	movzx  edi,al
    710a:	call   1ef0 <spec_ungetc>
    710f:	jmp    7083 <BZ2_bzRead+0xa3>
    7114:	nop    DWORD PTR [rax+0x0]
    7118:	mov    ecx,DWORD PTR [r15+0x13a0]
    711f:	test   ecx,ecx
    7121:	jne    7083 <BZ2_bzRead+0xa3>
    7127:	mov    edx,DWORD PTR [r15+0x13b8]
    712e:	test   edx,edx
    7130:	jne    7235 <BZ2_bzRead+0x255>
    7136:	test   rbx,rbx
    7139:	je     7141 <BZ2_bzRead+0x161>
    713b:	mov    DWORD PTR [rbx],0x0
    7141:	mov    DWORD PTR [r15+0x13e8],0x0
    714c:	mov    r12d,ebp
    714f:	jmp    717e <BZ2_bzRead+0x19e>
    7151:	nop    DWORD PTR [rax+0x0]
    7158:	test   rsi,rsi
    715b:	je     717b <BZ2_bzRead+0x19b>
    715d:	mov    DWORD PTR [rsi+0x13e8],0x0
    7167:	test   rdx,rdx
    716a:	jne    7025 <BZ2_bzRead+0x45>
    7170:	mov    DWORD PTR [r15+0x13e8],0xfffffffe
    717b:	xor    r12d,r12d
    717e:	add    rsp,0x18
    7182:	mov    eax,r12d
    7185:	pop    rbx
    7186:	pop    rbp
    7187:	pop    r12
    7189:	pop    r13
    718b:	pop    r14
    718d:	pop    r15
    718f:	ret    
    7190:	mov    DWORD PTR [rdi],0xfffffffe
    7196:	jmp    717b <BZ2_bzRead+0x19b>
    7198:	nop    DWORD PTR [rax+rax*1+0x0]
    71a0:	test   rbx,rbx
    71a3:	je     7170 <BZ2_bzRead+0x190>
    71a5:	mov    DWORD PTR [rbx],0xfffffffe
    71ab:	jmp    7170 <BZ2_bzRead+0x190>
    71ad:	nop    DWORD PTR [rax]
    71b0:	test   rbx,rbx
    71b3:	je     71bb <BZ2_bzRead+0x1db>
    71b5:	mov    DWORD PTR [rbx],0xffffffff
    71bb:	mov    DWORD PTR [r15+0x13e8],0xffffffff
    71c6:	xor    r12d,r12d
    71c9:	jmp    717e <BZ2_bzRead+0x19e>
    71cb:	nop    DWORD PTR [rax+rax*1+0x0]
    71d0:	test   rbx,rbx
    71d3:	je     71db <BZ2_bzRead+0x1fb>
    71d5:	mov    DWORD PTR [rbx],0x0
    71db:	mov    DWORD PTR [r15+0x13e8],0x0
    71e6:	xor    r12d,r12d
    71e9:	jmp    717e <BZ2_bzRead+0x19e>
    71eb:	nop    DWORD PTR [rax+rax*1+0x0]
    71f0:	test   rbx,rbx
    71f3:	je     71f7 <BZ2_bzRead+0x217>
    71f5:	mov    DWORD PTR [rbx],eax
    71f7:	mov    DWORD PTR [r15+0x13e8],r12d
    71fe:	xor    r12d,r12d
    7201:	jmp    717e <BZ2_bzRead+0x19e>
    7206:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7210:	test   rbx,rbx
    7213:	je     721b <BZ2_bzRead+0x23b>
    7215:	mov    DWORD PTR [rbx],0x4
    721b:	sub    ebp,DWORD PTR [r15+0x13b8]
    7222:	mov    DWORD PTR [r15+0x13e8],0x4
    722d:	mov    r12d,ebp
    7230:	jmp    717e <BZ2_bzRead+0x19e>
    7235:	test   rbx,rbx
    7238:	je     7240 <BZ2_bzRead+0x260>
    723a:	mov    DWORD PTR [rbx],0xfffffff9
    7240:	mov    DWORD PTR [r15+0x13e8],0xfffffff9
    724b:	jmp    717e <BZ2_bzRead+0x19e>

0000000000007250 <BZ2_bzReadGetUnused>:
    7250:	endbr64 
    7254:	test   rsi,rsi
    7257:	je     72b8 <BZ2_bzReadGetUnused+0x68>
    7259:	cmp    DWORD PTR [rsi+0x13e8],0x4
    7260:	je     7280 <BZ2_bzReadGetUnused+0x30>
    7262:	test   rdi,rdi
    7265:	je     726d <BZ2_bzReadGetUnused+0x1d>
    7267:	mov    DWORD PTR [rdi],0xffffffff
    726d:	mov    DWORD PTR [rsi+0x13e8],0xffffffff
    7277:	ret    
    7278:	nop    DWORD PTR [rax+rax*1+0x0]
    7280:	test   rdx,rdx
    7283:	je     72c8 <BZ2_bzReadGetUnused+0x78>
    7285:	test   rcx,rcx
    7288:	je     72c8 <BZ2_bzReadGetUnused+0x78>
    728a:	test   rdi,rdi
    728d:	je     7295 <BZ2_bzReadGetUnused+0x45>
    728f:	mov    DWORD PTR [rdi],0x0
    7295:	mov    DWORD PTR [rsi+0x13e8],0x0
    729f:	mov    eax,DWORD PTR [rsi+0x13a0]
    72a5:	mov    DWORD PTR [rcx],eax
    72a7:	mov    rax,QWORD PTR [rsi+0x1398]
    72ae:	mov    QWORD PTR [rdx],rax
    72b1:	ret    
    72b2:	nop    WORD PTR [rax+rax*1+0x0]
    72b8:	test   rdi,rdi
    72bb:	je     72b1 <BZ2_bzReadGetUnused+0x61>
    72bd:	mov    DWORD PTR [rdi],0xfffffffe
    72c3:	ret    
    72c4:	nop    DWORD PTR [rax+0x0]
    72c8:	test   rdi,rdi
    72cb:	je     72d3 <BZ2_bzReadGetUnused+0x83>
    72cd:	mov    DWORD PTR [rdi],0xfffffffe
    72d3:	mov    DWORD PTR [rsi+0x13e8],0xfffffffe
    72dd:	ret    
    72de:	xchg   ax,ax

00000000000072e0 <BZ2_bzBuffToBuffCompress>:
    72e0:	endbr64 
    72e4:	push   r15
    72e6:	push   r14
    72e8:	push   r13
    72ea:	push   r12
    72ec:	push   rbp
    72ed:	mov    ebp,ecx
    72ef:	push   rbx
    72f0:	sub    rsp,0x68
    72f4:	mov    rax,QWORD PTR fs:0x28
    72fd:	mov    QWORD PTR [rsp+0x58],rax
    7302:	xor    eax,eax
    7304:	mov    ecx,DWORD PTR [rsp+0xa0]
    730b:	test   rdi,rdi
    730e:	je     7410 <BZ2_bzBuffToBuffCompress+0x130>
    7314:	mov    rbx,rsi
    7317:	test   rsi,rsi
    731a:	je     7410 <BZ2_bzBuffToBuffCompress+0x130>
    7320:	lea    eax,[r8-0x1]
    7324:	mov    esi,r8d
    7327:	cmp    eax,0x8
    732a:	ja     7410 <BZ2_bzBuffToBuffCompress+0x130>
    7330:	mov    r14,rdx
    7333:	test   rdx,rdx
    7336:	je     7410 <BZ2_bzBuffToBuffCompress+0x130>
    733c:	cmp    ecx,0xfa
    7342:	ja     7410 <BZ2_bzBuffToBuffCompress+0x130>
    7348:	mov    edx,r9d
    734b:	cmp    r9d,0x4
    734f:	ja     7410 <BZ2_bzBuffToBuffCompress+0x130>
    7355:	test   ecx,ecx
    7357:	mov    eax,0x1e
    735c:	mov    r15,rsp
    735f:	mov    r13,rdi
    7362:	mov    QWORD PTR [rsp+0x38],0x0
    736b:	cmove  ecx,eax
    736e:	mov    rdi,r15
    7371:	mov    QWORD PTR [rsp+0x40],0x0
    737a:	mov    QWORD PTR [rsp+0x48],0x0
    7383:	call   5180 <BZ2_bzCompressInit>
    7388:	mov    r12d,eax
    738b:	test   eax,eax
    738d:	je     73b8 <BZ2_bzBuffToBuffCompress+0xd8>
    738f:	mov    rax,QWORD PTR [rsp+0x58]
    7394:	xor    rax,QWORD PTR fs:0x28
    739d:	jne    742e <BZ2_bzBuffToBuffCompress+0x14e>
    73a3:	add    rsp,0x68
    73a7:	mov    eax,r12d
    73aa:	pop    rbx
    73ab:	pop    rbp
    73ac:	pop    r12
    73ae:	pop    r13
    73b0:	pop    r14
    73b2:	pop    r15
    73b4:	ret    
    73b5:	nop    DWORD PTR [rax]
    73b8:	mov    eax,DWORD PTR [rbx]
    73ba:	mov    esi,0x2
    73bf:	mov    rdi,r15
    73c2:	mov    DWORD PTR [rsp+0x8],ebp
    73c6:	mov    QWORD PTR [rsp],r14
    73ca:	mov    QWORD PTR [rsp+0x18],r13
    73cf:	mov    DWORD PTR [rsp+0x20],eax
    73d3:	call   53c0 <BZ2_bzCompress>
    73d8:	mov    ebp,eax
    73da:	cmp    eax,0x3
    73dd:	je     741b <BZ2_bzBuffToBuffCompress+0x13b>
    73df:	cmp    eax,0x4
    73e2:	je     73f8 <BZ2_bzBuffToBuffCompress+0x118>
    73e4:	mov    rdi,r15
    73e7:	mov    r12d,ebp
    73ea:	call   5580 <BZ2_bzCompressEnd>
    73ef:	jmp    738f <BZ2_bzBuffToBuffCompress+0xaf>
    73f1:	nop    DWORD PTR [rax+0x0]
    73f8:	mov    eax,DWORD PTR [rsp+0x20]
    73fc:	sub    DWORD PTR [rbx],eax
    73fe:	mov    rdi,r15
    7401:	call   5580 <BZ2_bzCompressEnd>
    7406:	jmp    738f <BZ2_bzBuffToBuffCompress+0xaf>
    7408:	nop    DWORD PTR [rax+rax*1+0x0]
    7410:	mov    r12d,0xfffffffe
    7416:	jmp    738f <BZ2_bzBuffToBuffCompress+0xaf>
    741b:	mov    rdi,r15
    741e:	mov    r12d,0xfffffff8
    7424:	call   5580 <BZ2_bzCompressEnd>
    7429:	jmp    738f <BZ2_bzBuffToBuffCompress+0xaf>
    742e:	call   11a0 <__stack_chk_fail@plt>
    7433:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    743e:	xchg   ax,ax

0000000000007440 <BZ2_bzBuffToBuffDecompress>:
    7440:	endbr64 
    7444:	push   r15
    7446:	push   r14
    7448:	push   r13
    744a:	push   r12
    744c:	push   rbp
    744d:	push   rbx
    744e:	sub    rsp,0x68
    7452:	mov    rax,QWORD PTR fs:0x28
    745b:	mov    QWORD PTR [rsp+0x58],rax
    7460:	xor    eax,eax
    7462:	test   rdi,rdi
    7465:	je     7578 <BZ2_bzBuffToBuffDecompress+0x138>
    746b:	mov    rbx,rsi
    746e:	test   rsi,rsi
    7471:	je     7578 <BZ2_bzBuffToBuffDecompress+0x138>
    7477:	mov    r14,rdx
    747a:	test   rdx,rdx
    747d:	je     7578 <BZ2_bzBuffToBuffDecompress+0x138>
    7483:	mov    edx,r8d
    7486:	cmp    r8d,0x1
    748a:	ja     7578 <BZ2_bzBuffToBuffDecompress+0x138>
    7490:	mov    esi,r9d
    7493:	cmp    r9d,0x4
    7497:	ja     7578 <BZ2_bzBuffToBuffDecompress+0x138>
    749d:	mov    r15,rsp
    74a0:	mov    r13,rdi
    74a3:	mov    ebp,ecx
    74a5:	mov    QWORD PTR [rsp+0x38],0x0
    74ae:	mov    QWORD PTR [rsp+0x40],0x0
    74b7:	mov    rdi,r15
    74ba:	mov    QWORD PTR [rsp+0x48],0x0
    74c3:	call   5610 <BZ2_bzDecompressInit>
    74c8:	mov    r12d,eax
    74cb:	test   eax,eax
    74cd:	je     74f8 <BZ2_bzBuffToBuffDecompress+0xb8>
    74cf:	mov    rax,QWORD PTR [rsp+0x58]
    74d4:	xor    rax,QWORD PTR fs:0x28
    74dd:	jne    7583 <BZ2_bzBuffToBuffDecompress+0x143>
    74e3:	add    rsp,0x68
    74e7:	mov    eax,r12d
    74ea:	pop    rbx
    74eb:	pop    rbp
    74ec:	pop    r12
    74ee:	pop    r13
    74f0:	pop    r14
    74f2:	pop    r15
    74f4:	ret    
    74f5:	nop    DWORD PTR [rax]
    74f8:	mov    eax,DWORD PTR [rbx]
    74fa:	mov    rdi,r15
    74fd:	mov    DWORD PTR [rsp+0x8],ebp
    7501:	mov    QWORD PTR [rsp],r14
    7505:	mov    QWORD PTR [rsp+0x18],r13
    750a:	mov    DWORD PTR [rsp+0x20],eax
    750e:	call   5760 <BZ2_bzDecompress>
    7513:	mov    ebp,eax
    7515:	test   eax,eax
    7517:	je     7540 <BZ2_bzBuffToBuffDecompress+0x100>
    7519:	cmp    eax,0x4
    751c:	je     7530 <BZ2_bzBuffToBuffDecompress+0xf0>
    751e:	mov    rdi,r15
    7521:	mov    r12d,ebp
    7524:	call   65f0 <BZ2_bzDecompressEnd>
    7529:	jmp    74cf <BZ2_bzBuffToBuffDecompress+0x8f>
    752b:	nop    DWORD PTR [rax+rax*1+0x0]
    7530:	mov    eax,DWORD PTR [rsp+0x20]
    7534:	sub    DWORD PTR [rbx],eax
    7536:	mov    rdi,r15
    7539:	call   65f0 <BZ2_bzDecompressEnd>
    753e:	jmp    74cf <BZ2_bzBuffToBuffDecompress+0x8f>
    7540:	mov    eax,DWORD PTR [rsp+0x20]
    7544:	test   eax,eax
    7546:	je     7560 <BZ2_bzBuffToBuffDecompress+0x120>
    7548:	mov    rdi,r15
    754b:	mov    r12d,0xfffffff9
    7551:	call   65f0 <BZ2_bzDecompressEnd>
    7556:	jmp    74cf <BZ2_bzBuffToBuffDecompress+0x8f>
    755b:	nop    DWORD PTR [rax+rax*1+0x0]
    7560:	mov    rdi,r15
    7563:	mov    r12d,0xfffffff8
    7569:	call   65f0 <BZ2_bzDecompressEnd>
    756e:	jmp    74cf <BZ2_bzBuffToBuffDecompress+0x8f>
    7573:	nop    DWORD PTR [rax+rax*1+0x0]
    7578:	mov    r12d,0xfffffffe
    757e:	jmp    74cf <BZ2_bzBuffToBuffDecompress+0x8f>
    7583:	call   11a0 <__stack_chk_fail@plt>
    7588:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000007590 <BZ2_bzlibVersion>:
    7590:	endbr64 
    7594:	lea    rax,[rip+0x647d]        # da18 <incs+0x4d8>
    759b:	ret    
    759c:	nop    DWORD PTR [rax+0x0]

00000000000075a0 <BZ2_bzopen>:
    75a0:	endbr64 
    75a4:	xor    edx,edx
    75a6:	jmp    6dd0 <bzopen_or_bzdopen.isra.0>
    75ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000075b0 <BZ2_bzdopen>:
    75b0:	endbr64 
    75b4:	mov    edx,0x1
    75b9:	xor    edi,edi
    75bb:	jmp    6dd0 <bzopen_or_bzdopen.isra.0>

00000000000075c0 <BZ2_bzread>:
    75c0:	endbr64 
    75c4:	sub    rsp,0x18
    75c8:	mov    rax,QWORD PTR fs:0x28
    75d1:	mov    QWORD PTR [rsp+0x8],rax
    75d6:	xor    eax,eax
    75d8:	cmp    DWORD PTR [rdi+0x13e8],0x4
    75df:	je     7606 <BZ2_bzread+0x46>
    75e1:	mov    r8,rdi
    75e4:	mov    ecx,edx
    75e6:	lea    rdi,[rsp+0x4]
    75eb:	mov    rdx,rsi
    75ee:	mov    rsi,r8
    75f1:	call   6fe0 <BZ2_bzRead>
    75f6:	test   DWORD PTR [rsp+0x4],0xfffffffb
    75fe:	mov    edx,0xffffffff
    7603:	cmovne eax,edx
    7606:	mov    rcx,QWORD PTR [rsp+0x8]
    760b:	xor    rcx,QWORD PTR fs:0x28
    7614:	jne    761b <BZ2_bzread+0x5b>
    7616:	add    rsp,0x18
    761a:	ret    
    761b:	call   11a0 <__stack_chk_fail@plt>

0000000000007620 <BZ2_bzwrite>:
    7620:	endbr64 
    7624:	push   r12
    7626:	mov    r8,rdi
    7629:	mov    r12d,edx
    762c:	mov    ecx,edx
    762e:	mov    rdx,rsi
    7631:	mov    rsi,r8
    7634:	sub    rsp,0x10
    7638:	mov    rax,QWORD PTR fs:0x28
    7641:	mov    QWORD PTR [rsp+0x8],rax
    7646:	xor    eax,eax
    7648:	lea    rdi,[rsp+0x4]
    764d:	call   6820 <BZ2_bzWrite>
    7652:	mov    eax,DWORD PTR [rsp+0x4]
    7656:	test   eax,eax
    7658:	mov    eax,0xffffffff
    765d:	cmovne r12d,eax
    7661:	mov    rax,QWORD PTR [rsp+0x8]
    7666:	xor    rax,QWORD PTR fs:0x28
    766f:	jne    767b <BZ2_bzwrite+0x5b>
    7671:	add    rsp,0x10
    7675:	mov    eax,r12d
    7678:	pop    r12
    767a:	ret    
    767b:	call   11a0 <__stack_chk_fail@plt>

0000000000007680 <BZ2_bzflush>:
    7680:	endbr64 
    7684:	xor    eax,eax
    7686:	ret    
    7687:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007690 <BZ2_bzclose>:
    7690:	endbr64 
    7694:	push   rbp
    7695:	mov    rbp,rdi
    7698:	sub    rsp,0x10
    769c:	mov    rax,QWORD PTR fs:0x28
    76a5:	mov    QWORD PTR [rsp+0x8],rax
    76aa:	xor    eax,eax
    76ac:	cmp    BYTE PTR [rdi+0x1390],0x0
    76b3:	lea    rdi,[rsp+0x4]
    76b8:	je     76f8 <BZ2_bzclose+0x68>
    76ba:	sub    rsp,0x8
    76be:	xor    ecx,ecx
    76c0:	mov    rsi,rbp
    76c3:	xor    r9d,r9d
    76c6:	push   0x0
    76c8:	xor    r8d,r8d
    76cb:	xor    edx,edx
    76cd:	call   69b0 <BZ2_bzWriteClose64>
    76d2:	pop    rcx
    76d3:	pop    rsi
    76d4:	mov    edi,DWORD PTR [rsp+0x4]
    76d8:	test   edi,edi
    76da:	jne    7708 <BZ2_bzclose+0x78>
    76dc:	mov    rax,QWORD PTR [rsp+0x8]
    76e1:	xor    rax,QWORD PTR fs:0x28
    76ea:	jne    7729 <BZ2_bzclose+0x99>
    76ec:	add    rsp,0x10
    76f0:	pop    rbp
    76f1:	ret    
    76f2:	nop    WORD PTR [rax+rax*1+0x0]
    76f8:	mov    rsi,rbp
    76fb:	call   6f50 <BZ2_bzReadClose>
    7700:	jmp    76dc <BZ2_bzclose+0x4c>
    7702:	nop    WORD PTR [rax+rax*1+0x0]
    7708:	sub    rsp,0x8
    770c:	mov    edx,0x1
    7711:	xor    r9d,r9d
    7714:	xor    r8d,r8d
    7717:	push   0x0
    7719:	xor    ecx,ecx
    771b:	mov    rsi,rbp
    771e:	xor    edi,edi
    7720:	call   69b0 <BZ2_bzWriteClose64>
    7725:	pop    rax
    7726:	pop    rdx
    7727:	jmp    76dc <BZ2_bzclose+0x4c>
    7729:	call   11a0 <__stack_chk_fail@plt>
    772e:	xchg   ax,ax

0000000000007730 <BZ2_bzerror>:
    7730:	endbr64 
    7734:	mov    eax,DWORD PTR [rdi+0x13e8]
    773a:	mov    edx,0x0
    773f:	test   eax,eax
    7741:	cmovg  eax,edx
    7744:	lea    rdx,[rip+0x9555]        # 10ca0 <bzerrorstrings>
    774b:	mov    DWORD PTR [rsi],eax
    774d:	neg    eax
    774f:	cdqe   
    7751:	mov    rax,QWORD PTR [rdx+rax*8]
    7755:	ret    
    7756:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000007760 <bsW>:
    7760:	mov    r8d,DWORD PTR [rdi+0x284]
    7767:	mov    eax,DWORD PTR [rdi+0x280]
    776d:	cmp    r8d,0x7
    7771:	jle    77be <bsW+0x5e>
    7773:	mov    ecx,DWORD PTR [rdi+0x74]
    7776:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7780:	mov    r9,QWORD PTR [rdi+0x50]
    7784:	movsxd rcx,ecx
    7787:	shr    eax,0x18
    778a:	mov    BYTE PTR [r9+rcx*1],al
    778e:	mov    eax,DWORD PTR [rdi+0x74]
    7791:	mov    r10d,DWORD PTR [rdi+0x284]
    7798:	lea    ecx,[rax+0x1]
    779b:	mov    eax,DWORD PTR [rdi+0x280]
    77a1:	lea    r8d,[r10-0x8]
    77a5:	mov    DWORD PTR [rdi+0x74],ecx
    77a8:	shl    eax,0x8
    77ab:	mov    DWORD PTR [rdi+0x284],r8d
    77b2:	mov    DWORD PTR [rdi+0x280],eax
    77b8:	cmp    r8d,0x7
    77bc:	jg     7780 <bsW+0x20>
    77be:	mov    ecx,0x20
    77c3:	sub    ecx,r8d
    77c6:	sub    ecx,esi
    77c8:	add    esi,r8d
    77cb:	shl    edx,cl
    77cd:	mov    DWORD PTR [rdi+0x284],esi
    77d3:	or     eax,edx
    77d5:	mov    DWORD PTR [rdi+0x280],eax
    77db:	ret    
    77dc:	nop    DWORD PTR [rax+0x0]

00000000000077e0 <bsPutUInt32>:
    77e0:	push   rbx
    77e1:	mov    edx,esi
    77e3:	mov    ebx,esi
    77e5:	mov    esi,0x8
    77ea:	shr    edx,0x18
    77ed:	call   7760 <bsW>
    77f2:	mov    edx,ebx
    77f4:	mov    esi,0x8
    77f9:	shr    edx,0x10
    77fc:	movzx  edx,dl
    77ff:	call   7760 <bsW>
    7804:	movzx  edx,bh
    7807:	mov    esi,0x8
    780c:	call   7760 <bsW>
    7811:	movzx  edx,bl
    7814:	mov    esi,0x8
    7819:	pop    rbx
    781a:	jmp    7760 <bsW>
    781f:	nop

0000000000007820 <BZ2_bsInitWrite>:
    7820:	endbr64 
    7824:	mov    QWORD PTR [rdi+0x280],0x0
    782f:	ret    

0000000000007830 <BZ2_compressBlock>:
    7830:	endbr64 
    7834:	push   r15
    7836:	push   r14
    7838:	push   r13
    783a:	push   r12
    783c:	push   rbp
    783d:	push   rbx
    783e:	mov    rbx,rdi
    7841:	sub    rsp,0x1e8
    7848:	mov    ecx,DWORD PTR [rdi+0x294]
    784e:	mov    DWORD PTR [rsp+0x6c],esi
    7852:	mov    rax,QWORD PTR fs:0x28
    785b:	mov    QWORD PTR [rsp+0x1d8],rax
    7863:	xor    eax,eax
    7865:	mov    eax,DWORD PTR [rdi+0x6c]
    7868:	test   eax,eax
    786a:	jle    78b7 <BZ2_compressBlock+0x87>
    786c:	mov    r8d,DWORD PTR [rdi+0x288]
    7873:	mov    r9d,DWORD PTR [rdi+0x28c]
    787a:	not    r8d
    787d:	rol    r9d,1
    7880:	xor    r9d,r8d
    7883:	mov    DWORD PTR [rdi+0x288],r8d
    788a:	mov    DWORD PTR [rdi+0x28c],r9d
    7891:	cmp    ecx,0x1
    7894:	jle    789d <BZ2_compressBlock+0x6d>
    7896:	mov    DWORD PTR [rdi+0x74],0x0
    789d:	cmp    DWORD PTR [rbx+0x290],0x1
    78a4:	jg     7908 <BZ2_compressBlock+0xd8>
    78a6:	mov    rdi,rbx
    78a9:	call   4020 <BZ2_blockSort>
    78ae:	mov    eax,DWORD PTR [rbx+0x6c]
    78b1:	mov    ecx,DWORD PTR [rbx+0x294]
    78b7:	movsxd rdx,eax
    78ba:	add    rdx,QWORD PTR [rbx+0x20]
    78be:	mov    QWORD PTR [rbx+0x50],rdx
    78c2:	cmp    ecx,0x1
    78c5:	je     98d0 <BZ2_compressBlock+0x20a0>
    78cb:	test   eax,eax
    78cd:	jg     7930 <BZ2_compressBlock+0x100>
    78cf:	cmp    BYTE PTR [rsp+0x6c],0x0
    78d4:	jne    7cc0 <BZ2_compressBlock+0x490>
    78da:	mov    rax,QWORD PTR [rsp+0x1d8]
    78e2:	xor    rax,QWORD PTR fs:0x28
    78eb:	jne    9ab2 <BZ2_compressBlock+0x2282>
    78f1:	add    rsp,0x1e8
    78f8:	pop    rbx
    78f9:	pop    rbp
    78fa:	pop    r12
    78fc:	pop    r13
    78fe:	pop    r14
    7900:	pop    r15
    7902:	ret    
    7903:	nop    DWORD PTR [rax+rax*1+0x0]
    7908:	sub    rsp,0x8
    790c:	mov    rdi,QWORD PTR [rip+0xa30d]        # 11c20 <stderr@@GLIBC_2.2.5>
    7913:	mov    esi,0x1
    7918:	lea    rdx,[rip+0x6711]        # e030 <incs+0xaf0>
    791f:	push   rax
    7920:	xor    eax,eax
    7922:	call   1270 <__fprintf_chk@plt>
    7927:	pop    rax
    7928:	pop    rdx
    7929:	jmp    78a6 <BZ2_compressBlock+0x76>
    792e:	xchg   ax,ax
    7930:	mov    rdi,rbx
    7933:	mov    edx,0x31
    7938:	mov    esi,0x8
    793d:	call   7760 <bsW>
    7942:	mov    edx,0x41
    7947:	mov    esi,0x8
    794c:	call   7760 <bsW>
    7951:	mov    edx,0x59
    7956:	mov    esi,0x8
    795b:	call   7760 <bsW>
    7960:	mov    edx,0x26
    7965:	mov    esi,0x8
    796a:	call   7760 <bsW>
    796f:	mov    edx,0x53
    7974:	mov    esi,0x8
    7979:	call   7760 <bsW>
    797e:	mov    edx,0x59
    7983:	mov    esi,0x8
    7988:	call   7760 <bsW>
    798d:	mov    esi,DWORD PTR [rbx+0x288]
    7993:	call   77e0 <bsPutUInt32>
    7998:	xor    edx,edx
    799a:	mov    esi,0x1
    799f:	call   7760 <bsW>
    79a4:	mov    edx,DWORD PTR [rbx+0x30]
    79a7:	mov    esi,0x18
    79ac:	call   7760 <bsW>
    79b1:	mov    rcx,QWORD PTR [rbx+0x38]
    79b5:	mov    r11,QWORD PTR [rbx+0x40]
    79b9:	xor    r9d,r9d
    79bc:	lea    rax,[rbx+0x80]
    79c3:	mov    DWORD PTR [rbx+0x7c],0x0
    79ca:	mov    r12,QWORD PTR [rbx+0x48]
    79ce:	lea    rdi,[rbx+0x180]
    79d5:	mov    QWORD PTR [rsp+0x88],rax
    79dd:	mov    QWORD PTR [rsp+0x78],rbx
    79e2:	nop    WORD PTR [rax+rax*1+0x0]
    79e8:	cmp    BYTE PTR [rax],0x0
    79eb:	lea    edx,[r9+0x1]
    79ef:	je     7a04 <BZ2_compressBlock+0x1d4>
    79f1:	lea    esi,[r9+0x2]
    79f5:	mov    BYTE PTR [rax+0x100],r9b
    79fc:	mov    r9d,edx
    79ff:	mov    DWORD PTR [rbx+0x7c],edx
    7a02:	mov    edx,esi
    7a04:	add    rax,0x1
    7a08:	cmp    rax,rdi
    7a0b:	jne    79e8 <BZ2_compressBlock+0x1b8>
    7a0d:	xor    eax,eax
    7a0f:	nop
    7a10:	mov    DWORD PTR [rbx+rax*4+0x2a0],0x0
    7a1b:	add    rax,0x1
    7a1f:	lea    esi,[rax-0x1]
    7a22:	cmp    r9d,esi
    7a25:	jge    7a10 <BZ2_compressBlock+0x1e0>
    7a27:	test   r9d,r9d
    7a2a:	je     9aa0 <BZ2_compressBlock+0x2270>
    7a30:	lea    r8,[rsp+0xd0]
    7a38:	lea    edi,[r9-0x1]
    7a3c:	xor    eax,eax
    7a3e:	mov    QWORD PTR [rsp+0x48],r8
    7a43:	nop    DWORD PTR [rax+rax*1+0x0]
    7a48:	mov    rsi,rax
    7a4b:	mov    BYTE PTR [r8+rax*1],al
    7a4f:	add    rax,0x1
    7a53:	cmp    rsi,rdi
    7a56:	jne    7a48 <BZ2_compressBlock+0x218>
    7a58:	mov    r10d,DWORD PTR [rbx+0x6c]
    7a5c:	test   r10d,r10d
    7a5f:	jle    9a90 <BZ2_compressBlock+0x2260>
    7a65:	lea    eax,[r10-0x1]
    7a69:	mov    rdi,QWORD PTR [rsp+0x48]
    7a6e:	xor    r13d,r13d
    7a71:	xor    esi,esi
    7a73:	lea    rbp,[rcx+rax*4+0x4]
    7a78:	jmp    7a90 <BZ2_compressBlock+0x260>
    7a7a:	nop    WORD PTR [rax+rax*1+0x0]
    7a80:	add    rcx,0x4
    7a84:	add    esi,0x1
    7a87:	cmp    rcx,rbp
    7a8a:	je     7b31 <BZ2_compressBlock+0x301>
    7a90:	mov    eax,DWORD PTR [rcx]
    7a92:	sub    eax,0x1
    7a95:	lea    r8d,[rax+r10*1]
    7a99:	cmovs  eax,r8d
    7a9d:	cdqe   
    7a9f:	movzx  eax,BYTE PTR [r11+rax*1]
    7aa4:	movzx  r8d,BYTE PTR [rbx+rax*1+0x180]
    7aad:	movzx  eax,BYTE PTR [rsp+0xd0]
    7ab5:	cmp    r8b,al
    7ab8:	je     7a80 <BZ2_compressBlock+0x250>
    7aba:	test   esi,esi
    7abc:	jne    7c60 <BZ2_compressBlock+0x430>
    7ac2:	movzx  esi,BYTE PTR [rsp+0xd1]
    7aca:	mov    BYTE PTR [rsp+0xd1],al
    7ad1:	cmp    r8b,sil
    7ad4:	je     9970 <BZ2_compressBlock+0x2140>
    7ada:	lea    rax,[rsp+0xd1]
    7ae2:	nop    WORD PTR [rax+rax*1+0x0]
    7ae8:	add    rax,0x1
    7aec:	mov    r14d,esi
    7aef:	movzx  esi,BYTE PTR [rax]
    7af2:	mov    BYTE PTR [rax],r14b
    7af5:	cmp    r8b,sil
    7af8:	jne    7ae8 <BZ2_compressBlock+0x2b8>
    7afa:	sub    rax,rdi
    7afd:	lea    r8d,[rax+0x1]
    7b01:	add    eax,0x1
    7b04:	mov    BYTE PTR [rsp+0xd0],sil
    7b0c:	cdqe   
    7b0e:	movsxd rsi,r13d
    7b11:	add    rcx,0x4
    7b15:	mov    WORD PTR [r12+rsi*2],r8w
    7b1a:	add    r13d,0x1
    7b1e:	xor    esi,esi
    7b20:	add    DWORD PTR [rbx+rax*4+0x2a0],0x1
    7b28:	cmp    rcx,rbp
    7b2b:	jne    7a90 <BZ2_compressBlock+0x260>
    7b31:	lea    eax,[rsi-0x1]
    7b34:	movsxd rcx,r13d
    7b37:	test   esi,esi
    7b39:	jne    7b5f <BZ2_compressBlock+0x32f>
    7b3b:	jmp    9a40 <BZ2_compressBlock+0x2210>
    7b40:	mov    ebp,0x1
    7b45:	mov    WORD PTR [r12+rcx*2],bp
    7b4a:	add    rcx,0x1
    7b4e:	add    DWORD PTR [rbx+0x2a4],0x1
    7b55:	cmp    eax,0x1
    7b58:	jle    7b80 <BZ2_compressBlock+0x350>
    7b5a:	sub    eax,0x2
    7b5d:	sar    eax,1
    7b5f:	mov    edi,ecx
    7b61:	lea    esi,[rcx+0x1]
    7b64:	test   al,0x1
    7b66:	jne    7b40 <BZ2_compressBlock+0x310>
    7b68:	xor    r11d,r11d
    7b6b:	mov    WORD PTR [r12+rcx*2],r11w
    7b70:	add    rcx,0x1
    7b74:	add    DWORD PTR [rbx+0x2a0],0x1
    7b7b:	cmp    eax,0x1
    7b7e:	jg     7b5a <BZ2_compressBlock+0x32a>
    7b80:	movsxd rsi,esi
    7b83:	lea    r11d,[rdi+0x2]
    7b87:	lea    rax,[r12+rsi*2]
    7b8b:	mov    WORD PTR [rax],dx
    7b8e:	movsxd rdx,edx
    7b91:	add    DWORD PTR [rbx+rdx*4+0x2a0],0x1
    7b99:	cmp    DWORD PTR [rbx+0x290],0x2
    7ba0:	mov    DWORD PTR [rbx+0x29c],r11d
    7ba7:	jg     9a10 <BZ2_compressBlock+0x21e0>
    7bad:	lea    r8d,[r9+0x2]
    7bb1:	lea    eax,[r9+0x1]
    7bb5:	mov    rdx,rbx
    7bb8:	mov    DWORD PTR [rsp],r8d
    7bbc:	lea    rdi,[rbx+0x60c]
    7bc3:	mov    r14,rax
    7bc6:	lea    rsi,[rax+0x1]
    7bca:	nop    WORD PTR [rax+rax*1+0x0]
    7bd0:	mov    rax,rdx
    7bd3:	lea    rcx,[rsi+rdx*1]
    7bd7:	test   r8d,r8d
    7bda:	jle    7bf0 <BZ2_compressBlock+0x3c0>
    7bdc:	nop    DWORD PTR [rax+0x0]
    7be0:	mov    BYTE PTR [rax+0x934c],0xf
    7be7:	add    rax,0x1
    7beb:	cmp    rax,rcx
    7bee:	jne    7be0 <BZ2_compressBlock+0x3b0>
    7bf0:	add    rdx,0x102
    7bf7:	cmp    rdx,rdi
    7bfa:	jne    7bd0 <BZ2_compressBlock+0x3a0>
    7bfc:	test   r11d,r11d
    7bff:	jle    9a50 <BZ2_compressBlock+0x2220>
    7c05:	cmp    r11d,0xc7
    7c0c:	jle    7d90 <BZ2_compressBlock+0x560>
    7c12:	cmp    r11d,0x257
    7c19:	jle    9958 <BZ2_compressBlock+0x2128>
    7c1f:	cmp    r11d,0x4af
    7c26:	jle    9a70 <BZ2_compressBlock+0x2240>
    7c2c:	cmp    r11d,0x960
    7c33:	setge  al
    7c36:	setge  dil
    7c3a:	movzx  edi,dil
    7c3e:	movzx  eax,al
    7c41:	add    edi,0x5
    7c44:	add    eax,0x5
    7c47:	mov    DWORD PTR [rsp+0x94],edi
    7c4e:	mov    DWORD PTR [rsp+0x68],eax
    7c52:	jmp    7da3 <BZ2_compressBlock+0x573>
    7c57:	nop    WORD PTR [rax+rax*1+0x0]
    7c60:	movsxd rax,r13d
    7c63:	sub    esi,0x1
    7c66:	lea    rax,[r12+rax*2]
    7c6a:	jmp    7c90 <BZ2_compressBlock+0x460>
    7c6c:	nop    DWORD PTR [rax+0x0]
    7c70:	mov    r15d,0x1
    7c76:	add    rax,0x2
    7c7a:	mov    WORD PTR [rax-0x2],r15w
    7c7f:	add    DWORD PTR [rbx+0x2a4],0x1
    7c86:	cmp    esi,0x1
    7c89:	jle    7cb2 <BZ2_compressBlock+0x482>
    7c8b:	sub    esi,0x2
    7c8e:	sar    esi,1
    7c90:	add    r13d,0x1
    7c94:	test   sil,0x1
    7c98:	jne    7c70 <BZ2_compressBlock+0x440>
    7c9a:	xor    r14d,r14d
    7c9d:	add    rax,0x2
    7ca1:	mov    WORD PTR [rax-0x2],r14w
    7ca6:	add    DWORD PTR [rbx+0x2a0],0x1
    7cad:	cmp    esi,0x1
    7cb0:	jg     7c8b <BZ2_compressBlock+0x45b>
    7cb2:	movzx  eax,BYTE PTR [rsp+0xd0]
    7cba:	jmp    7ac2 <BZ2_compressBlock+0x292>
    7cbf:	nop
    7cc0:	mov    rdi,rbx
    7cc3:	mov    edx,0x17
    7cc8:	mov    esi,0x8
    7ccd:	call   7760 <bsW>
    7cd2:	mov    edx,0x72
    7cd7:	mov    esi,0x8
    7cdc:	call   7760 <bsW>
    7ce1:	mov    edx,0x45
    7ce6:	mov    esi,0x8
    7ceb:	call   7760 <bsW>
    7cf0:	mov    edx,0x38
    7cf5:	mov    esi,0x8
    7cfa:	call   7760 <bsW>
    7cff:	mov    edx,0x50
    7d04:	mov    esi,0x8
    7d09:	call   7760 <bsW>
    7d0e:	mov    edx,0x90
    7d13:	mov    esi,0x8
    7d18:	call   7760 <bsW>
    7d1d:	mov    esi,DWORD PTR [rbx+0x28c]
    7d23:	call   77e0 <bsPutUInt32>
    7d28:	cmp    DWORD PTR [rbx+0x290],0x1
    7d2f:	jg     9930 <BZ2_compressBlock+0x2100>
    7d35:	mov    eax,DWORD PTR [rbx+0x284]
    7d3b:	test   eax,eax
    7d3d:	jle    78da <BZ2_compressBlock+0xaa>
    7d43:	mov    edx,DWORD PTR [rbx+0x280]
    7d49:	mov    eax,DWORD PTR [rbx+0x74]
    7d4c:	nop    DWORD PTR [rax+0x0]
    7d50:	mov    rcx,QWORD PTR [rbx+0x50]
    7d54:	cdqe   
    7d56:	shr    edx,0x18
    7d59:	mov    BYTE PTR [rcx+rax*1],dl
    7d5c:	mov    eax,DWORD PTR [rbx+0x74]
    7d5f:	mov    edx,DWORD PTR [rbx+0x280]
    7d65:	mov    edi,DWORD PTR [rbx+0x284]
    7d6b:	add    eax,0x1
    7d6e:	shl    edx,0x8
    7d71:	lea    ecx,[rdi-0x8]
    7d74:	mov    DWORD PTR [rbx+0x74],eax
    7d77:	mov    DWORD PTR [rbx+0x280],edx
    7d7d:	mov    DWORD PTR [rbx+0x284],ecx
    7d83:	test   ecx,ecx
    7d85:	jg     7d50 <BZ2_compressBlock+0x520>
    7d87:	jmp    78da <BZ2_compressBlock+0xaa>
    7d8c:	nop    DWORD PTR [rax+0x0]
    7d90:	mov    DWORD PTR [rsp+0x94],0x2
    7d9b:	mov    DWORD PTR [rsp+0x68],0x2
    7da3:	movsxd rdx,DWORD PTR [rsp+0x68]
    7da8:	mov    QWORD PTR [rsp+0x20],r12
    7dad:	mov    r10d,r14d
    7db0:	xor    r8d,r8d
    7db3:	mov    r14,rbx
    7db6:	mov    rax,rdx
    7db9:	mov    ebp,edx
    7dbb:	shl    rax,0x7
    7dbf:	add    rax,rdx
    7dc2:	lea    r13,[rbx+rax*2-0x102]
    7dca:	mov    rbx,r13
    7dcd:	mov    r13d,r11d
    7dd0:	mov    eax,r13d
    7dd3:	lea    r12d,[r8-0x1]
    7dd7:	cdq    
    7dd8:	idiv   ebp
    7dda:	cmp    DWORD PTR [rsp+0x68],ebp
    7dde:	setne  cl
    7de1:	cmp    ebp,0x1
    7de4:	setne  r9b
    7de8:	test   eax,eax
    7dea:	jle    97b8 <BZ2_compressBlock+0x1f88>
    7df0:	cmp    r12d,r10d
    7df3:	jge    97b8 <BZ2_compressBlock+0x1f88>
    7df9:	mov    esi,r10d
    7dfc:	movsxd rdx,r8d
    7dff:	xor    r15d,r15d
    7e02:	sub    esi,r8d
    7e05:	lea    rdi,[rdx+rsi*1+0x1]
    7e0a:	jmp    7e19 <BZ2_compressBlock+0x5e9>
    7e0c:	nop    DWORD PTR [rax+0x0]
    7e10:	add    rdx,0x1
    7e14:	cmp    rdx,rdi
    7e17:	je     7e2e <BZ2_compressBlock+0x5fe>
    7e19:	mov    esi,DWORD PTR [r14+rdx*4+0x2a0]
    7e21:	mov    r12d,edx
    7e24:	add    esi,r15d
    7e27:	mov    r15d,esi
    7e2a:	cmp    eax,esi
    7e2c:	jg     7e10 <BZ2_compressBlock+0x5e0>
    7e2e:	and    ecx,r9d
    7e31:	cmp    r12d,r8d
    7e34:	setg   r9b
    7e38:	and    ecx,r9d
    7e3b:	test   cl,cl
    7e3d:	jne    7eb8 <BZ2_compressBlock+0x688>
    7e3f:	cmp    DWORD PTR [r14+0x290],0x2
    7e47:	lea    r11d,[r12+0x1]
    7e4c:	jg     7ef0 <BZ2_compressBlock+0x6c0>
    7e52:	mov    edi,DWORD PTR [rsp]
    7e55:	sub    ebp,0x1
    7e58:	mov    rdx,rbx
    7e5b:	xor    eax,eax
    7e5d:	test   edi,edi
    7e5f:	jg     7e7b <BZ2_compressBlock+0x64b>
    7e61:	jmp    7e98 <BZ2_compressBlock+0x668>
    7e63:	nop    DWORD PTR [rax+rax*1+0x0]
    7e68:	mov    BYTE PTR [rdx+0x934c],0x0
    7e6f:	add    eax,0x1
    7e72:	add    rdx,0x1
    7e76:	cmp    eax,DWORD PTR [rsp]
    7e79:	je     7e98 <BZ2_compressBlock+0x668>
    7e7b:	cmp    eax,r8d
    7e7e:	jl     7e85 <BZ2_compressBlock+0x655>
    7e80:	cmp    r12d,eax
    7e83:	jge    7e68 <BZ2_compressBlock+0x638>
    7e85:	mov    BYTE PTR [rdx+0x934c],0xf
    7e8c:	add    eax,0x1
    7e8f:	add    rdx,0x1
    7e93:	cmp    eax,DWORD PTR [rsp]
    7e96:	jne    7e7b <BZ2_compressBlock+0x64b>
    7e98:	sub    r13d,r15d
    7e9b:	sub    rbx,0x102
    7ea2:	test   ebp,ebp
    7ea4:	je     7f70 <BZ2_compressBlock+0x740>
    7eaa:	mov    r8d,r11d
    7ead:	jmp    7dd0 <BZ2_compressBlock+0x5a0>
    7eb2:	nop    WORD PTR [rax+rax*1+0x0]
    7eb8:	mov    eax,DWORD PTR [rsp+0x68]
    7ebc:	sub    eax,ebp
    7ebe:	test   al,0x1
    7ec0:	je     7e3f <BZ2_compressBlock+0x60f>
    7ec6:	movsxd rax,r12d
    7ec9:	mov    r11d,r12d
    7ecc:	sub    r12d,0x1
    7ed0:	sub    esi,DWORD PTR [r14+rax*4+0x2a0]
    7ed8:	cmp    DWORD PTR [r14+0x290],0x2
    7ee0:	mov    r15d,esi
    7ee3:	jle    7e52 <BZ2_compressBlock+0x622>
    7ee9:	nop    DWORD PTR [rax+0x0]
    7ef0:	pxor   xmm0,xmm0
    7ef4:	pxor   xmm1,xmm1
    7ef8:	mov    DWORD PTR [rsp+0x18],r10d
    7efd:	mov    r9d,r12d
    7f00:	cvtsi2ss xmm0,r15d
    7f05:	mov    DWORD PTR [rsp+0x10],r11d
    7f0a:	sub    rsp,0x8
    7f0e:	mov    ecx,ebp
    7f10:	cvtsi2ss xmm1,DWORD PTR [r14+0x29c]
    7f19:	push   r15
    7f1b:	mov    esi,0x1
    7f20:	mov    rdi,QWORD PTR [rip+0x9cf9]        # 11c20 <stderr@@GLIBC_2.2.5>
    7f27:	lea    rdx,[rip+0x6182]        # e0b0 <incs+0xb70>
    7f2e:	mov    eax,0x1
    7f33:	cvtss2sd xmm0,xmm0
    7f37:	mulsd  xmm0,QWORD PTR [rip+0x5ac9]        # da08 <incs+0x4c8>
    7f3f:	mov    DWORD PTR [rsp+0x18],r8d
    7f44:	cvtss2sd xmm1,xmm1
    7f48:	divsd  xmm0,xmm1
    7f4c:	call   1270 <__fprintf_chk@plt>
    7f51:	pop    r8
    7f53:	pop    r9
    7f55:	mov    r10d,DWORD PTR [rsp+0x18]
    7f5a:	mov    r11d,DWORD PTR [rsp+0x10]
    7f5f:	mov    r8d,DWORD PTR [rsp+0x8]
    7f64:	jmp    7e52 <BZ2_compressBlock+0x622>
    7f69:	nop    DWORD PTR [rax+0x0]
    7f70:	lea    rax,[rsp+0xb0]
    7f78:	mov    r12,QWORD PTR [rsp+0x20]
    7f7d:	mov    DWORD PTR [rsp+0x90],ebp
    7f84:	mov    rbx,r14
    7f87:	mov    QWORD PTR [rsp+0x50],rax
    7f8c:	mov    eax,DWORD PTR [rsp+0x68]
    7f90:	mov    DWORD PTR [rsp+0x20],0x0
    7f98:	lea    edx,[rax-0x1]
    7f9b:	lea    rax,[rsp+rdx*4+0xb4]
    7fa3:	mov    QWORD PTR [rsp+0x30],rax
    7fa8:	mov    rax,rdx
    7fab:	shl    rax,0x7
    7faf:	add    rax,rdx
    7fb2:	lea    rdi,[r14+rax*8+0x408]
    7fba:	add    rax,rax
    7fbd:	mov    QWORD PTR [rsp+0x38],rdi
    7fc2:	mov    edi,r10d
    7fc5:	mov    rcx,rdi
    7fc8:	mov    QWORD PTR [rsp+0x80],rax
    7fd0:	lea    rax,[r14+rax*1+0x944e]
    7fd8:	shl    rcx,0x4
    7fdc:	mov    QWORD PTR [rsp+0x28],rax
    7fe1:	lea    rax,[r14+0x934c]
    7fe8:	lea    rcx,[r14+rcx*1+0xc9c8]
    7ff0:	mov    QWORD PTR [rsp+0x58],rax
    7ff5:	lea    rax,[r14+0xb188]
    7ffc:	mov    QWORD PTR [rsp+0x98],rcx
    8004:	lea    rcx,[rsp+0xa4]
    800c:	mov    QWORD PTR [rsp+0x8],rcx
    8011:	lea    rcx,[rsp+rdx*2+0xa6]
    8019:	mov    QWORD PTR [rsp+0x60],rax
    801e:	lea    rax,[rdi*4+0x4]
    8026:	mov    QWORD PTR [rsp+0x70],rdi
    802b:	mov    QWORD PTR [rsp+0x10],rcx
    8030:	mov    QWORD PTR [rsp+0x40],rax
    8035:	mov    rax,QWORD PTR [rsp+0x50]
    803a:	nop    WORD PTR [rax+rax*1+0x0]
    8040:	mov    DWORD PTR [rax],0x0
    8046:	add    rax,0x4
    804a:	cmp    rax,QWORD PTR [rsp+0x30]
    804f:	jne    8040 <BZ2_compressBlock+0x810>
    8051:	mov    rax,rbx
    8054:	nop    DWORD PTR [rax+0x0]
    8058:	mov    rdi,QWORD PTR [rsp+0x40]
    805d:	mov    esi,DWORD PTR [rsp]
    8060:	mov    rdx,rax
    8063:	lea    rcx,[rdi+rax*1]
    8067:	test   esi,esi
    8069:	jle    8083 <BZ2_compressBlock+0x853>
    806b:	nop    DWORD PTR [rax+rax*1+0x0]
    8070:	mov    DWORD PTR [rdx+0xb188],0x0
    807a:	add    rdx,0x4
    807e:	cmp    rdx,rcx
    8081:	jne    8070 <BZ2_compressBlock+0x840>
    8083:	add    rax,0x408
    8089:	cmp    rax,QWORD PTR [rsp+0x38]
    808e:	jne    8058 <BZ2_compressBlock+0x828>
    8090:	cmp    DWORD PTR [rsp+0x68],0x6
    8095:	je     97c0 <BZ2_compressBlock+0x1f90>
    809b:	mov    r9d,DWORD PTR [rbx+0x29c]
    80a2:	test   r9d,r9d
    80a5:	jle    9840 <BZ2_compressBlock+0x2010>
    80ab:	lea    eax,[r9-0x1]
    80af:	xor    r8d,r8d
    80b2:	xor    ecx,ecx
    80b4:	mov    r10d,0x1
    80ba:	mov    DWORD PTR [rsp+0x18],eax
    80be:	lea    rbp,[r12+0x2]
    80c3:	nop    DWORD PTR [rax+rax*1+0x0]
    80c8:	lea    edi,[rcx+0x31]
    80cb:	lea    r11d,[rcx+0x32]
    80cf:	cmp    edi,r9d
    80d2:	jl     80db <BZ2_compressBlock+0x8ab>
    80d4:	mov    edi,DWORD PTR [rsp+0x18]
    80d8:	mov    r11d,r9d
    80db:	mov    rax,QWORD PTR [rsp+0x8]
    80e0:	xor    edx,edx
    80e2:	add    rax,0x2
    80e6:	mov    WORD PTR [rax-0x2],dx
    80ea:	cmp    rax,QWORD PTR [rsp+0x10]
    80ef:	jne    80e0 <BZ2_compressBlock+0x8b0>
    80f1:	cmp    DWORD PTR [rsp+0x68],0x6
    80f6:	jne    8cf8 <BZ2_compressBlock+0x14c8>
    80fc:	mov    eax,edi
    80fe:	sub    eax,ecx
    8100:	cmp    eax,0x31
    8103:	jne    8cf8 <BZ2_compressBlock+0x14c8>
    8109:	movsxd rsi,ecx
    810c:	movzx  r15d,WORD PTR [r12+rsi*2+0x2]
    8112:	movzx  edx,WORD PTR [r12+rsi*2+0x4]
    8118:	movzx  r14d,WORD PTR [r12+rsi*2]
    811d:	mov    r13,r15
    8120:	mov    rax,rdx
    8123:	shl    r15,0x4
    8127:	shl    r13,0x4
    812b:	shl    rax,0x4
    812f:	add    r15,rbx
    8132:	mov    eax,DWORD PTR [rax+rbx*1+0xc9b8]
    8139:	shl    rdx,0x4
    813d:	add    eax,DWORD PTR [rbx+r13*1+0xc9b8]
    8145:	mov    r13,r14
    8148:	shl    r14,0x4
    814c:	shl    r13,0x4
    8150:	add    rdx,rbx
    8153:	add    r14,rbx
    8156:	add    eax,DWORD PTR [rbx+r13*1+0xc9b8]
    815e:	mov    r13d,DWORD PTR [rdx+0xc9bc]
    8165:	mov    edx,DWORD PTR [rdx+0xc9c0]
    816b:	add    r13d,DWORD PTR [r15+0xc9bc]
    8172:	add    edx,DWORD PTR [r15+0xc9c0]
    8179:	add    r13d,DWORD PTR [r14+0xc9bc]
    8180:	add    edx,DWORD PTR [r14+0xc9c0]
    8187:	movzx  r14d,WORD PTR [r12+rsi*2+0x6]
    818d:	mov    r15,r14
    8190:	shl    r15,0x4
    8194:	mov    r14,r15
    8197:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    819f:	add    r14,rbx
    81a2:	add    r13d,DWORD PTR [r14+0xc9bc]
    81a9:	add    edx,DWORD PTR [r14+0xc9c0]
    81b0:	movzx  r14d,WORD PTR [r12+rsi*2+0x8]
    81b6:	mov    r15,r14
    81b9:	shl    r15,0x4
    81bd:	mov    r14,r15
    81c0:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    81c8:	add    r14,rbx
    81cb:	add    r13d,DWORD PTR [r14+0xc9bc]
    81d2:	add    edx,DWORD PTR [r14+0xc9c0]
    81d9:	movzx  r14d,WORD PTR [r12+rsi*2+0xa]
    81df:	mov    r15,r14
    81e2:	shl    r15,0x4
    81e6:	mov    r14,r15
    81e9:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    81f1:	add    r14,rbx
    81f4:	add    r13d,DWORD PTR [r14+0xc9bc]
    81fb:	add    edx,DWORD PTR [r14+0xc9c0]
    8202:	movzx  r14d,WORD PTR [r12+rsi*2+0xc]
    8208:	mov    r15,r14
    820b:	shl    r15,0x4
    820f:	mov    r14,r15
    8212:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    821a:	add    r14,rbx
    821d:	add    r13d,DWORD PTR [r14+0xc9bc]
    8224:	add    edx,DWORD PTR [r14+0xc9c0]
    822b:	movzx  r14d,WORD PTR [r12+rsi*2+0xe]
    8231:	mov    r15,r14
    8234:	shl    r15,0x4
    8238:	mov    r14,r15
    823b:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8243:	add    r14,rbx
    8246:	add    r13d,DWORD PTR [r14+0xc9bc]
    824d:	add    edx,DWORD PTR [r14+0xc9c0]
    8254:	movzx  r14d,WORD PTR [r12+rsi*2+0x10]
    825a:	mov    r15,r14
    825d:	shl    r15,0x4
    8261:	mov    r14,r15
    8264:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    826c:	add    r14,rbx
    826f:	add    r13d,DWORD PTR [r14+0xc9bc]
    8276:	add    edx,DWORD PTR [r14+0xc9c0]
    827d:	movzx  r14d,WORD PTR [r12+rsi*2+0x12]
    8283:	mov    r15,r14
    8286:	shl    r15,0x4
    828a:	mov    r14,r15
    828d:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8295:	add    r14,rbx
    8298:	add    r13d,DWORD PTR [r14+0xc9bc]
    829f:	add    edx,DWORD PTR [r14+0xc9c0]
    82a6:	movzx  r14d,WORD PTR [r12+rsi*2+0x14]
    82ac:	mov    r15,r14
    82af:	shl    r15,0x4
    82b3:	mov    r14,r15
    82b6:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    82be:	add    r14,rbx
    82c1:	add    r13d,DWORD PTR [r14+0xc9bc]
    82c8:	add    edx,DWORD PTR [r14+0xc9c0]
    82cf:	movzx  r14d,WORD PTR [r12+rsi*2+0x16]
    82d5:	mov    r15,r14
    82d8:	shl    r15,0x4
    82dc:	mov    r14,r15
    82df:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    82e7:	add    r14,rbx
    82ea:	add    r13d,DWORD PTR [r14+0xc9bc]
    82f1:	add    edx,DWORD PTR [r14+0xc9c0]
    82f8:	movzx  r14d,WORD PTR [r12+rsi*2+0x18]
    82fe:	mov    r15,r14
    8301:	shl    r15,0x4
    8305:	mov    r14,r15
    8308:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8310:	add    r14,rbx
    8313:	add    r13d,DWORD PTR [r14+0xc9bc]
    831a:	add    edx,DWORD PTR [r14+0xc9c0]
    8321:	movzx  r14d,WORD PTR [r12+rsi*2+0x1a]
    8327:	mov    r15,r14
    832a:	shl    r15,0x4
    832e:	mov    r14,r15
    8331:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8339:	add    r14,rbx
    833c:	add    r13d,DWORD PTR [r14+0xc9bc]
    8343:	add    edx,DWORD PTR [r14+0xc9c0]
    834a:	movzx  r14d,WORD PTR [r12+rsi*2+0x1c]
    8350:	mov    r15,r14
    8353:	shl    r15,0x4
    8357:	mov    r14,r15
    835a:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8362:	add    r14,rbx
    8365:	add    r13d,DWORD PTR [r14+0xc9bc]
    836c:	add    edx,DWORD PTR [r14+0xc9c0]
    8373:	movzx  r14d,WORD PTR [r12+rsi*2+0x1e]
    8379:	mov    r15,r14
    837c:	shl    r15,0x4
    8380:	mov    r14,r15
    8383:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    838b:	add    r14,rbx
    838e:	add    r13d,DWORD PTR [r14+0xc9bc]
    8395:	add    edx,DWORD PTR [r14+0xc9c0]
    839c:	movzx  r14d,WORD PTR [r12+rsi*2+0x20]
    83a2:	mov    r15,r14
    83a5:	shl    r15,0x4
    83a9:	mov    r14,r15
    83ac:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    83b4:	add    r14,rbx
    83b7:	add    r13d,DWORD PTR [r14+0xc9bc]
    83be:	add    edx,DWORD PTR [r14+0xc9c0]
    83c5:	movzx  r14d,WORD PTR [r12+rsi*2+0x22]
    83cb:	mov    r15,r14
    83ce:	shl    r15,0x4
    83d2:	mov    r14,r15
    83d5:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    83dd:	add    r14,rbx
    83e0:	add    r13d,DWORD PTR [r14+0xc9bc]
    83e7:	add    edx,DWORD PTR [r14+0xc9c0]
    83ee:	movzx  r14d,WORD PTR [r12+rsi*2+0x24]
    83f4:	mov    r15,r14
    83f7:	shl    r15,0x4
    83fb:	mov    r14,r15
    83fe:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8406:	add    r14,rbx
    8409:	add    r13d,DWORD PTR [r14+0xc9bc]
    8410:	add    edx,DWORD PTR [r14+0xc9c0]
    8417:	movzx  r14d,WORD PTR [r12+rsi*2+0x26]
    841d:	mov    r15,r14
    8420:	shl    r15,0x4
    8424:	mov    r14,r15
    8427:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    842f:	add    r14,rbx
    8432:	add    r13d,DWORD PTR [r14+0xc9bc]
    8439:	add    edx,DWORD PTR [r14+0xc9c0]
    8440:	movzx  r14d,WORD PTR [r12+rsi*2+0x28]
    8446:	mov    r15,r14
    8449:	shl    r15,0x4
    844d:	mov    r14,r15
    8450:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8458:	add    r14,rbx
    845b:	add    r13d,DWORD PTR [r14+0xc9bc]
    8462:	add    edx,DWORD PTR [r14+0xc9c0]
    8469:	movzx  r14d,WORD PTR [r12+rsi*2+0x2a]
    846f:	mov    r15,r14
    8472:	shl    r15,0x4
    8476:	mov    r14,r15
    8479:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8481:	add    r14,rbx
    8484:	add    r13d,DWORD PTR [r14+0xc9bc]
    848b:	add    edx,DWORD PTR [r14+0xc9c0]
    8492:	movzx  r14d,WORD PTR [r12+rsi*2+0x2c]
    8498:	mov    r15,r14
    849b:	shl    r15,0x4
    849f:	mov    r14,r15
    84a2:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    84aa:	add    r14,rbx
    84ad:	add    r13d,DWORD PTR [r14+0xc9bc]
    84b4:	add    edx,DWORD PTR [r14+0xc9c0]
    84bb:	movzx  r14d,WORD PTR [r12+rsi*2+0x2e]
    84c1:	mov    r15,r14
    84c4:	shl    r15,0x4
    84c8:	mov    r14,r15
    84cb:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    84d3:	add    r14,rbx
    84d6:	add    r13d,DWORD PTR [r14+0xc9bc]
    84dd:	add    edx,DWORD PTR [r14+0xc9c0]
    84e4:	movzx  r14d,WORD PTR [r12+rsi*2+0x30]
    84ea:	mov    r15,r14
    84ed:	shl    r15,0x4
    84f1:	mov    r14,r15
    84f4:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    84fc:	add    r14,rbx
    84ff:	add    edx,DWORD PTR [r14+0xc9c0]
    8506:	add    r13d,DWORD PTR [r14+0xc9bc]
    850d:	movzx  r14d,WORD PTR [r12+rsi*2+0x32]
    8513:	mov    r15,r14
    8516:	shl    r15,0x4
    851a:	mov    r14,r15
    851d:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8525:	add    r14,rbx
    8528:	add    r13d,DWORD PTR [r14+0xc9bc]
    852f:	add    edx,DWORD PTR [r14+0xc9c0]
    8536:	movzx  r14d,WORD PTR [r12+rsi*2+0x34]
    853c:	mov    r15,r14
    853f:	shl    r15,0x4
    8543:	mov    r14,r15
    8546:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    854e:	add    r14,rbx
    8551:	add    r13d,DWORD PTR [r14+0xc9bc]
    8558:	add    edx,DWORD PTR [r14+0xc9c0]
    855f:	movzx  r14d,WORD PTR [r12+rsi*2+0x36]
    8565:	mov    r15,r14
    8568:	shl    r15,0x4
    856c:	mov    r14,r15
    856f:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8577:	add    r14,rbx
    857a:	add    r13d,DWORD PTR [r14+0xc9bc]
    8581:	add    edx,DWORD PTR [r14+0xc9c0]
    8588:	movzx  r14d,WORD PTR [r12+rsi*2+0x38]
    858e:	mov    r15,r14
    8591:	shl    r15,0x4
    8595:	mov    r14,r15
    8598:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    85a0:	add    r14,rbx
    85a3:	add    r13d,DWORD PTR [r14+0xc9bc]
    85aa:	add    edx,DWORD PTR [r14+0xc9c0]
    85b1:	movzx  r14d,WORD PTR [r12+rsi*2+0x3a]
    85b7:	mov    r15,r14
    85ba:	shl    r15,0x4
    85be:	mov    r14,r15
    85c1:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    85c9:	add    r14,rbx
    85cc:	add    r13d,DWORD PTR [r14+0xc9bc]
    85d3:	add    edx,DWORD PTR [r14+0xc9c0]
    85da:	movzx  r14d,WORD PTR [r12+rsi*2+0x3c]
    85e0:	mov    r15,r14
    85e3:	shl    r15,0x4
    85e7:	mov    r14,r15
    85ea:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    85f2:	add    r14,rbx
    85f5:	add    r13d,DWORD PTR [r14+0xc9bc]
    85fc:	add    edx,DWORD PTR [r14+0xc9c0]
    8603:	movzx  r14d,WORD PTR [r12+rsi*2+0x3e]
    8609:	mov    r15,r14
    860c:	shl    r15,0x4
    8610:	mov    r14,r15
    8613:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    861b:	add    r14,rbx
    861e:	add    r13d,DWORD PTR [r14+0xc9bc]
    8625:	add    edx,DWORD PTR [r14+0xc9c0]
    862c:	movzx  r14d,WORD PTR [r12+rsi*2+0x40]
    8632:	mov    r15,r14
    8635:	shl    r15,0x4
    8639:	mov    r14,r15
    863c:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8644:	add    r14,rbx
    8647:	add    r13d,DWORD PTR [r14+0xc9bc]
    864e:	add    edx,DWORD PTR [r14+0xc9c0]
    8655:	movzx  r14d,WORD PTR [r12+rsi*2+0x42]
    865b:	mov    r15,r14
    865e:	shl    r15,0x4
    8662:	mov    r14,r15
    8665:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    866d:	add    r14,rbx
    8670:	add    r13d,DWORD PTR [r14+0xc9bc]
    8677:	add    edx,DWORD PTR [r14+0xc9c0]
    867e:	movzx  r14d,WORD PTR [r12+rsi*2+0x44]
    8684:	mov    r15,r14
    8687:	shl    r15,0x4
    868b:	mov    r14,r15
    868e:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8696:	add    r14,rbx
    8699:	add    r13d,DWORD PTR [r14+0xc9bc]
    86a0:	add    edx,DWORD PTR [r14+0xc9c0]
    86a7:	movzx  r14d,WORD PTR [r12+rsi*2+0x46]
    86ad:	mov    r15,r14
    86b0:	shl    r15,0x4
    86b4:	mov    r14,r15
    86b7:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    86bf:	add    r14,rbx
    86c2:	add    r13d,DWORD PTR [r14+0xc9bc]
    86c9:	add    edx,DWORD PTR [r14+0xc9c0]
    86d0:	movzx  r14d,WORD PTR [r12+rsi*2+0x48]
    86d6:	mov    r15,r14
    86d9:	shl    r15,0x4
    86dd:	mov    r14,r15
    86e0:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    86e8:	add    r14,rbx
    86eb:	add    r13d,DWORD PTR [r14+0xc9bc]
    86f2:	add    edx,DWORD PTR [r14+0xc9c0]
    86f9:	movzx  r14d,WORD PTR [r12+rsi*2+0x4a]
    86ff:	mov    r15,r14
    8702:	shl    r15,0x4
    8706:	mov    r14,r15
    8709:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8711:	add    r14,rbx
    8714:	add    r13d,DWORD PTR [r14+0xc9bc]
    871b:	add    edx,DWORD PTR [r14+0xc9c0]
    8722:	movzx  r14d,WORD PTR [r12+rsi*2+0x4c]
    8728:	mov    r15,r14
    872b:	shl    r15,0x4
    872f:	mov    r14,r15
    8732:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    873a:	add    r14,rbx
    873d:	add    r13d,DWORD PTR [r14+0xc9bc]
    8744:	add    edx,DWORD PTR [r14+0xc9c0]
    874b:	movzx  r14d,WORD PTR [r12+rsi*2+0x4e]
    8751:	mov    r15,r14
    8754:	shl    r15,0x4
    8758:	mov    r14,r15
    875b:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8763:	add    r14,rbx
    8766:	add    r13d,DWORD PTR [r14+0xc9bc]
    876d:	add    edx,DWORD PTR [r14+0xc9c0]
    8774:	movzx  r14d,WORD PTR [r12+rsi*2+0x50]
    877a:	mov    r15,r14
    877d:	shl    r15,0x4
    8781:	mov    r14,r15
    8784:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    878c:	add    r14,rbx
    878f:	add    r13d,DWORD PTR [r14+0xc9bc]
    8796:	add    edx,DWORD PTR [r14+0xc9c0]
    879d:	movzx  r14d,WORD PTR [r12+rsi*2+0x52]
    87a3:	mov    r15,r14
    87a6:	shl    r15,0x4
    87aa:	mov    r14,r15
    87ad:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    87b5:	add    r14,rbx
    87b8:	add    r13d,DWORD PTR [r14+0xc9bc]
    87bf:	add    edx,DWORD PTR [r14+0xc9c0]
    87c6:	movzx  r14d,WORD PTR [r12+rsi*2+0x54]
    87cc:	mov    r15,r14
    87cf:	shl    r15,0x4
    87d3:	mov    r14,r15
    87d6:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    87de:	add    r14,rbx
    87e1:	add    r13d,DWORD PTR [r14+0xc9bc]
    87e8:	add    edx,DWORD PTR [r14+0xc9c0]
    87ef:	movzx  r14d,WORD PTR [r12+rsi*2+0x56]
    87f5:	mov    r15,r14
    87f8:	shl    r15,0x4
    87fc:	mov    r14,r15
    87ff:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8807:	add    r14,rbx
    880a:	add    r13d,DWORD PTR [r14+0xc9bc]
    8811:	add    edx,DWORD PTR [r14+0xc9c0]
    8818:	movzx  r14d,WORD PTR [r12+rsi*2+0x58]
    881e:	mov    r15,r14
    8821:	shl    r15,0x4
    8825:	mov    r14,r15
    8828:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8830:	add    r14,rbx
    8833:	add    r13d,DWORD PTR [r14+0xc9bc]
    883a:	add    edx,DWORD PTR [r14+0xc9c0]
    8841:	movzx  r14d,WORD PTR [r12+rsi*2+0x5a]
    8847:	mov    r15,r14
    884a:	shl    r15,0x4
    884e:	mov    r14,r15
    8851:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8859:	add    r14,rbx
    885c:	add    r13d,DWORD PTR [r14+0xc9bc]
    8863:	add    edx,DWORD PTR [r14+0xc9c0]
    886a:	movzx  r14d,WORD PTR [r12+rsi*2+0x5c]
    8870:	mov    r15,r14
    8873:	shl    r15,0x4
    8877:	mov    r14,r15
    887a:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    8882:	add    r14,rbx
    8885:	add    r13d,DWORD PTR [r14+0xc9bc]
    888c:	add    edx,DWORD PTR [r14+0xc9c0]
    8893:	movzx  r14d,WORD PTR [r12+rsi*2+0x5e]
    8899:	mov    r15,r14
    889c:	shl    r15,0x4
    88a0:	mov    r14,r15
    88a3:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    88ab:	add    r14,rbx
    88ae:	add    r13d,DWORD PTR [r14+0xc9bc]
    88b5:	add    edx,DWORD PTR [r14+0xc9c0]
    88bc:	movzx  r14d,WORD PTR [r12+rsi*2+0x60]
    88c2:	movzx  esi,WORD PTR [r12+rsi*2+0x62]
    88c8:	mov    r15,r14
    88cb:	shl    r15,0x4
    88cf:	mov    r14,r15
    88d2:	add    eax,DWORD PTR [rbx+r15*1+0xc9b8]
    88da:	add    r14,rbx
    88dd:	add    r13d,DWORD PTR [r14+0xc9bc]
    88e4:	add    edx,DWORD PTR [r14+0xc9c0]
    88eb:	mov    r14,rsi
    88ee:	shl    r14,0x4
    88f2:	mov    rsi,r14
    88f5:	add    eax,DWORD PTR [rbx+r14*1+0xc9b8]
    88fd:	add    rsi,rbx
    8900:	mov    DWORD PTR [rsp+0xa4],eax
    8907:	add    r13d,DWORD PTR [rsi+0xc9bc]
    890e:	add    edx,DWORD PTR [rsi+0xc9c0]
    8914:	movzx  esi,ax
    8917:	mov    DWORD PTR [rsp+0xa8],r13d
    891f:	mov    DWORD PTR [rsp+0xac],edx
    8926:	xor    edx,edx
    8928:	mov    eax,0x1
    892d:	jmp    8948 <BZ2_compressBlock+0x1118>
    892f:	nop
    8930:	mov    r15,QWORD PTR [rsp+0x8]
    8935:	movzx  r13d,WORD PTR [r15+rax*2]
    893a:	cmp    r13d,esi
    893d:	jge    8944 <BZ2_compressBlock+0x1114>
    893f:	mov    esi,r13d
    8942:	mov    edx,eax
    8944:	add    rax,0x1
    8948:	cmp    DWORD PTR [rsp+0x68],eax
    894c:	jg     8930 <BZ2_compressBlock+0x1100>
    894e:	movsxd rax,edx
    8951:	add    r8d,esi
    8954:	mov    BYTE PTR [rbx+r10*1+0x6a7],dl
    895c:	mov    r13d,r10d
    895f:	add    DWORD PTR [rsp+rax*4+0xb0],0x1
    8967:	cmp    DWORD PTR [rsp+0x68],0x6
    896c:	jne    8d70 <BZ2_compressBlock+0x1540>
    8972:	mov    edx,edi
    8974:	sub    edx,ecx
    8976:	cmp    edx,0x31
    8979:	jne    8d70 <BZ2_compressBlock+0x1540>
    897f:	mov    rdx,rax
    8982:	shl    rdx,0x7
    8986:	add    rax,rdx
    8989:	movzx  edx,WORD PTR [r12+rcx*2]
    898e:	add    rax,rax
    8991:	add    rdx,rax
    8994:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    899c:	movzx  edx,WORD PTR [r12+rcx*2+0x2]
    89a2:	add    rdx,rax
    89a5:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    89ad:	movzx  edx,WORD PTR [r12+rcx*2+0x4]
    89b3:	add    rdx,rax
    89b6:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    89be:	movzx  edx,WORD PTR [r12+rcx*2+0x6]
    89c4:	add    rdx,rax
    89c7:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    89cf:	movzx  edx,WORD PTR [r12+rcx*2+0x8]
    89d5:	add    rdx,rax
    89d8:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    89e0:	movzx  edx,WORD PTR [r12+rcx*2+0xa]
    89e6:	add    rdx,rax
    89e9:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    89f1:	movzx  edx,WORD PTR [r12+rcx*2+0xc]
    89f7:	add    rdx,rax
    89fa:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a02:	movzx  edx,WORD PTR [r12+rcx*2+0xe]
    8a08:	add    rdx,rax
    8a0b:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a13:	movzx  edx,WORD PTR [r12+rcx*2+0x10]
    8a19:	add    rdx,rax
    8a1c:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a24:	movzx  edx,WORD PTR [r12+rcx*2+0x12]
    8a2a:	add    rdx,rax
    8a2d:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a35:	movzx  edx,WORD PTR [r12+rcx*2+0x14]
    8a3b:	add    rdx,rax
    8a3e:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a46:	movzx  edx,WORD PTR [r12+rcx*2+0x16]
    8a4c:	add    rdx,rax
    8a4f:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a57:	movzx  edx,WORD PTR [r12+rcx*2+0x18]
    8a5d:	add    rdx,rax
    8a60:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a68:	movzx  edx,WORD PTR [r12+rcx*2+0x1a]
    8a6e:	add    rdx,rax
    8a71:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a79:	movzx  edx,WORD PTR [r12+rcx*2+0x1c]
    8a7f:	add    rdx,rax
    8a82:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a8a:	movzx  edx,WORD PTR [r12+rcx*2+0x1e]
    8a90:	add    rdx,rax
    8a93:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8a9b:	movzx  edx,WORD PTR [r12+rcx*2+0x20]
    8aa1:	add    rdx,rax
    8aa4:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8aac:	movzx  edx,WORD PTR [r12+rcx*2+0x22]
    8ab2:	add    rdx,rax
    8ab5:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8abd:	movzx  edx,WORD PTR [r12+rcx*2+0x24]
    8ac3:	add    rdx,rax
    8ac6:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8ace:	movzx  edx,WORD PTR [r12+rcx*2+0x26]
    8ad4:	add    rdx,rax
    8ad7:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8adf:	movzx  edx,WORD PTR [r12+rcx*2+0x28]
    8ae5:	add    rdx,rax
    8ae8:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8af0:	movzx  edx,WORD PTR [r12+rcx*2+0x2a]
    8af6:	add    rdx,rax
    8af9:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b01:	movzx  edx,WORD PTR [r12+rcx*2+0x2c]
    8b07:	add    rdx,rax
    8b0a:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b12:	movzx  edx,WORD PTR [r12+rcx*2+0x2e]
    8b18:	add    rdx,rax
    8b1b:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b23:	movzx  edx,WORD PTR [r12+rcx*2+0x30]
    8b29:	add    rdx,rax
    8b2c:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b34:	movzx  edx,WORD PTR [r12+rcx*2+0x32]
    8b3a:	add    rdx,rax
    8b3d:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b45:	movzx  edx,WORD PTR [r12+rcx*2+0x34]
    8b4b:	add    rdx,rax
    8b4e:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b56:	movzx  edx,WORD PTR [r12+rcx*2+0x36]
    8b5c:	add    rdx,rax
    8b5f:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b67:	movzx  edx,WORD PTR [r12+rcx*2+0x38]
    8b6d:	add    rdx,rax
    8b70:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b78:	movzx  edx,WORD PTR [r12+rcx*2+0x3a]
    8b7e:	add    rdx,rax
    8b81:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b89:	movzx  edx,WORD PTR [r12+rcx*2+0x3c]
    8b8f:	add    rdx,rax
    8b92:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8b9a:	movzx  edx,WORD PTR [r12+rcx*2+0x3e]
    8ba0:	add    rdx,rax
    8ba3:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8bab:	movzx  edx,WORD PTR [r12+rcx*2+0x40]
    8bb1:	add    rdx,rax
    8bb4:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8bbc:	movzx  edx,WORD PTR [r12+rcx*2+0x42]
    8bc2:	add    rdx,rax
    8bc5:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8bcd:	movzx  edx,WORD PTR [r12+rcx*2+0x44]
    8bd3:	add    rdx,rax
    8bd6:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8bde:	movzx  edx,WORD PTR [r12+rcx*2+0x46]
    8be4:	add    rdx,rax
    8be7:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8bef:	movzx  edx,WORD PTR [r12+rcx*2+0x48]
    8bf5:	add    rdx,rax
    8bf8:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c00:	movzx  edx,WORD PTR [r12+rcx*2+0x4a]
    8c06:	add    rdx,rax
    8c09:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c11:	movzx  edx,WORD PTR [r12+rcx*2+0x4c]
    8c17:	add    rdx,rax
    8c1a:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c22:	movzx  edx,WORD PTR [r12+rcx*2+0x4e]
    8c28:	add    rdx,rax
    8c2b:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c33:	movzx  edx,WORD PTR [r12+rcx*2+0x50]
    8c39:	add    rdx,rax
    8c3c:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c44:	movzx  edx,WORD PTR [r12+rcx*2+0x52]
    8c4a:	add    rdx,rax
    8c4d:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c55:	movzx  edx,WORD PTR [r12+rcx*2+0x54]
    8c5b:	add    rdx,rax
    8c5e:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c66:	movzx  edx,WORD PTR [r12+rcx*2+0x56]
    8c6c:	add    rdx,rax
    8c6f:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c77:	movzx  edx,WORD PTR [r12+rcx*2+0x58]
    8c7d:	add    rdx,rax
    8c80:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c88:	movzx  edx,WORD PTR [r12+rcx*2+0x5a]
    8c8e:	add    rdx,rax
    8c91:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8c99:	movzx  edx,WORD PTR [r12+rcx*2+0x5c]
    8c9f:	add    rdx,rax
    8ca2:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8caa:	movzx  edx,WORD PTR [r12+rcx*2+0x5e]
    8cb0:	add    rdx,rax
    8cb3:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8cbb:	movzx  edx,WORD PTR [r12+rcx*2+0x60]
    8cc1:	add    rdx,rax
    8cc4:	add    DWORD PTR [rbx+rdx*4+0xb188],0x1
    8ccc:	movzx  edx,WORD PTR [r12+rcx*2+0x62]
    8cd2:	add    rax,rdx
    8cd5:	add    DWORD PTR [rbx+rax*4+0xb188],0x1
    8cdd:	add    r10,0x1
    8ce1:	cmp    r9d,r11d
    8ce4:	jle    8dc4 <BZ2_compressBlock+0x1594>
    8cea:	movsxd rcx,r11d
    8ced:	jmp    80c8 <BZ2_compressBlock+0x898>
    8cf2:	nop    WORD PTR [rax+rax*1+0x0]
    8cf8:	movzx  esi,WORD PTR [rsp+0xa4]
    8d00:	cmp    edi,ecx
    8d02:	jl     8926 <BZ2_compressBlock+0x10f6>
    8d08:	mov    eax,edi
    8d0a:	movsxd rdx,ecx
    8d0d:	sub    eax,ecx
    8d0f:	lea    r14,[r12+rdx*2]
    8d13:	add    rax,rdx
    8d16:	lea    r15,[rbp+rax*2+0x0]
    8d1b:	nop    DWORD PTR [rax+rax*1+0x0]
    8d20:	movzx  edx,WORD PTR [r14]
    8d24:	mov    rax,QWORD PTR [rsp+0x8]
    8d29:	add    rdx,rbx
    8d2c:	jmp    8d33 <BZ2_compressBlock+0x1503>
    8d2e:	xchg   ax,ax
    8d30:	movzx  esi,WORD PTR [rax]
    8d33:	movzx  r13d,BYTE PTR [rdx+0x934c]
    8d3b:	add    rax,0x2
    8d3f:	add    rdx,0x102
    8d46:	add    esi,r13d
    8d49:	mov    WORD PTR [rax-0x2],si
    8d4d:	cmp    rax,QWORD PTR [rsp+0x10]
    8d52:	jne    8d30 <BZ2_compressBlock+0x1500>
    8d54:	add    r14,0x2
    8d58:	movzx  esi,WORD PTR [rsp+0xa4]
    8d60:	cmp    r14,r15
    8d63:	jne    8d20 <BZ2_compressBlock+0x14f0>
    8d65:	jmp    8926 <BZ2_compressBlock+0x10f6>
    8d6a:	nop    WORD PTR [rax+rax*1+0x0]
    8d70:	cmp    edi,ecx
    8d72:	jl     8cdd <BZ2_compressBlock+0x14ad>
    8d78:	movsxd rsi,ecx
    8d7b:	sub    edi,ecx
    8d7d:	add    rdi,rsi
    8d80:	lea    rdx,[r12+rsi*2]
    8d84:	mov    rsi,rax
    8d87:	shl    rsi,0x7
    8d8b:	lea    rcx,[rbp+rdi*2+0x0]
    8d90:	add    rax,rsi
    8d93:	add    rax,rax
    8d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8da0:	movzx  esi,WORD PTR [rdx]
    8da3:	add    rdx,0x2
    8da7:	add    rsi,rax
    8daa:	add    DWORD PTR [rbx+rsi*4+0xb188],0x1
    8db2:	cmp    rcx,rdx
    8db5:	jne    8da0 <BZ2_compressBlock+0x1570>
    8db7:	add    r10,0x1
    8dbb:	cmp    r9d,r11d
    8dbe:	jg     8cea <BZ2_compressBlock+0x14ba>
    8dc4:	add    DWORD PTR [rsp+0x20],0x1
    8dc9:	cmp    DWORD PTR [rbx+0x290],0x2
    8dd0:	jg     9860 <BZ2_compressBlock+0x2030>
    8dd6:	mov    r14,QWORD PTR [rsp+0x58]
    8ddb:	mov    r15,QWORD PTR [rsp+0x60]
    8de0:	mov    rbp,r14
    8de3:	nop    DWORD PTR [rax+rax*1+0x0]
    8de8:	mov    edx,DWORD PTR [rsp]
    8deb:	mov    rsi,r15
    8dee:	mov    rdi,r14
    8df1:	mov    ecx,0x11
    8df6:	add    r14,0x102
    8dfd:	add    r15,0x408
    8e04:	call   c3b0 <BZ2_hbMakeCodeLengths>
    8e09:	cmp    QWORD PTR [rsp+0x28],r14
    8e0e:	jne    8de8 <BZ2_compressBlock+0x15b8>
    8e10:	cmp    DWORD PTR [rsp+0x20],0x4
    8e15:	jne    8035 <BZ2_compressBlock+0x805>
    8e1b:	mov    DWORD PTR [rsp+0x10],r13d
    8e20:	mov    edx,DWORD PTR [rsp+0x68]
    8e24:	mov    r10,rbp
    8e27:	xor    eax,eax
    8e29:	mov    rcx,QWORD PTR [rsp+0x48]
    8e2e:	xchg   ax,ax
    8e30:	mov    BYTE PTR [rcx+rax*1],al
    8e33:	add    rax,0x1
    8e37:	cmp    edx,eax
    8e39:	jg     8e30 <BZ2_compressBlock+0x1600>
    8e3b:	mov    eax,DWORD PTR [rsp+0x10]
    8e3f:	test   eax,eax
    8e41:	je     8ea5 <BZ2_compressBlock+0x1675>
    8e43:	sub    eax,0x1
    8e46:	movzx  esi,BYTE PTR [rsp+0xd0]
    8e4e:	mov    r11,QWORD PTR [rsp+0x48]
    8e53:	lea    rdx,[rbx+0x6a8]
    8e5a:	lea    r9,[rbx+rax*1+0x6a9]
    8e62:	nop    WORD PTR [rax+rax*1+0x0]
    8e68:	movzx  edi,BYTE PTR [rdx]
    8e6b:	cmp    dil,sil
    8e6e:	je     9090 <BZ2_compressBlock+0x1860>
    8e74:	mov    rcx,r11
    8e77:	xor    eax,eax
    8e79:	nop    DWORD PTR [rax+0x0]
    8e80:	mov    r8d,esi
    8e83:	movzx  esi,BYTE PTR [rcx+0x1]
    8e87:	add    eax,0x1
    8e8a:	add    rcx,0x1
    8e8e:	mov    BYTE PTR [rcx],r8b
    8e91:	cmp    dil,sil
    8e94:	jne    8e80 <BZ2_compressBlock+0x1650>
    8e96:	mov    BYTE PTR [rdx+0x4652],al
    8e9c:	add    rdx,0x1
    8ea0:	cmp    r9,rdx
    8ea3:	jne    8e68 <BZ2_compressBlock+0x1638>
    8ea5:	mov    rax,QWORD PTR [rsp+0x70]
    8eaa:	lea    r13,[rbx+0x9958]
    8eb1:	mov    QWORD PTR [rsp+0x18],r12
    8eb6:	mov    r15d,DWORD PTR [rsp]
    8eba:	mov    r12,r13
    8ebd:	mov    QWORD PTR [rsp+0x20],rbx
    8ec2:	mov    rbx,r10
    8ec5:	lea    rbp,[rax-0x934b]
    8ecc:	mov    r13,rbp
    8ecf:	mov    rbp,QWORD PTR [rsp+0x28]
    8ed4:	nop    DWORD PTR [rax+0x0]
    8ed8:	xor    ecx,ecx
    8eda:	mov    r14d,0x20
    8ee0:	test   r15d,r15d
    8ee3:	jle    8f3c <BZ2_compressBlock+0x170c>
    8ee5:	lea    rdx,[rbx-0x934c]
    8eec:	xor    ecx,ecx
    8eee:	mov    r14d,0x20
    8ef4:	lea    rsi,[r13+rbx*1+0x0]
    8ef9:	nop    DWORD PTR [rax+0x0]
    8f00:	movzx  eax,BYTE PTR [rdx+0x934c]
    8f07:	cmp    ecx,eax
    8f09:	cmovl  ecx,eax
    8f0c:	cmp    r14d,eax
    8f0f:	cmovg  r14d,eax
    8f13:	add    rdx,0x1
    8f17:	cmp    rdx,rsi
    8f1a:	jne    8f00 <BZ2_compressBlock+0x16d0>
    8f1c:	cmp    ecx,0x11
    8f1f:	jle    8f33 <BZ2_compressBlock+0x1703>
    8f21:	mov    edi,0xbbc
    8f26:	mov    DWORD PTR [rsp+0x8],ecx
    8f2a:	call   5120 <BZ2_bz__AssertH__fail>
    8f2f:	mov    ecx,DWORD PTR [rsp+0x8]
    8f33:	test   r14d,r14d
    8f36:	je     9078 <BZ2_compressBlock+0x1848>
    8f3c:	mov    rsi,rbx
    8f3f:	mov    rdi,r12
    8f42:	mov    r8d,r15d
    8f45:	mov    edx,r14d
    8f48:	add    rbx,0x102
    8f4f:	add    r12,0x408
    8f56:	call   c860 <BZ2_hbAssignCodes>
    8f5b:	cmp    rbx,rbp
    8f5e:	jne    8ed8 <BZ2_compressBlock+0x16a8>
    8f64:	mov    rbx,QWORD PTR [rsp+0x20]
    8f69:	mov    rax,QWORD PTR [rsp+0x48]
    8f6e:	lea    r14,[rsp+0xe0]
    8f76:	xor    ecx,ecx
    8f78:	mov    r12,QWORD PTR [rsp+0x18]
    8f7d:	mov    r8,QWORD PTR [rsp+0x88]
    8f85:	mov    rbp,rax
    8f88:	lea    rsi,[rbx+0x90]
    8f8f:	nop
    8f90:	mov    BYTE PTR [rax],0x0
    8f93:	lea    rdx,[r8+rcx*1]
    8f97:	lea    rdi,[rsi+rcx*1]
    8f9b:	nop    DWORD PTR [rax+rax*1+0x0]
    8fa0:	cmp    BYTE PTR [rdx],0x0
    8fa3:	je     8fa8 <BZ2_compressBlock+0x1778>
    8fa5:	mov    BYTE PTR [rax],0x1
    8fa8:	add    rdx,0x1
    8fac:	mov    r11,rsi
    8faf:	cmp    rdi,rdx
    8fb2:	jne    8fa0 <BZ2_compressBlock+0x1770>
    8fb4:	add    rax,0x1
    8fb8:	add    rcx,0x10
    8fbc:	cmp    r14,rax
    8fbf:	jne    8f90 <BZ2_compressBlock+0x1760>
    8fc1:	mov    r13d,DWORD PTR [rbx+0x74]
    8fc5:	jmp    8feb <BZ2_compressBlock+0x17bb>
    8fc7:	nop    WORD PTR [rax+rax*1+0x0]
    8fd0:	mov    edx,0x1
    8fd5:	mov    esi,0x1
    8fda:	mov    rdi,rbx
    8fdd:	add    rbp,0x1
    8fe1:	call   7760 <bsW>
    8fe6:	cmp    r14,rbp
    8fe9:	je     9009 <BZ2_compressBlock+0x17d9>
    8feb:	cmp    BYTE PTR [rbp+0x0],0x0
    8fef:	jne    8fd0 <BZ2_compressBlock+0x17a0>
    8ff1:	xor    edx,edx
    8ff3:	mov    esi,0x1
    8ff8:	mov    rdi,rbx
    8ffb:	add    rbp,0x1
    8fff:	call   7760 <bsW>
    9004:	cmp    r14,rbp
    9007:	jne    8feb <BZ2_compressBlock+0x17bb>
    9009:	mov    r15,QWORD PTR [rsp+0x48]
    900e:	xor    ebp,ebp
    9010:	jmp    902a <BZ2_compressBlock+0x17fa>
    9012:	nop    WORD PTR [rax+rax*1+0x0]
    9018:	add    rbp,0x1
    901c:	add    r11,0x10
    9020:	cmp    rbp,0x10
    9024:	je     90b0 <BZ2_compressBlock+0x1880>
    902a:	cmp    BYTE PTR [r15+rbp*1],0x0
    902f:	je     9018 <BZ2_compressBlock+0x17e8>
    9031:	lea    r14,[r11-0x10]
    9035:	jmp    905b <BZ2_compressBlock+0x182b>
    9037:	nop    WORD PTR [rax+rax*1+0x0]
    9040:	mov    edx,0x1
    9045:	mov    esi,0x1
    904a:	mov    rdi,rbx
    904d:	call   7760 <bsW>
    9052:	add    r14,0x1
    9056:	cmp    r11,r14
    9059:	je     9018 <BZ2_compressBlock+0x17e8>
    905b:	cmp    BYTE PTR [r14],0x0
    905f:	jne    9040 <BZ2_compressBlock+0x1810>
    9061:	xor    edx,edx
    9063:	mov    esi,0x1
    9068:	mov    rdi,rbx
    906b:	call   7760 <bsW>
    9070:	jmp    9052 <BZ2_compressBlock+0x1822>
    9072:	nop    WORD PTR [rax+rax*1+0x0]
    9078:	mov    edi,0xbbd
    907d:	mov    DWORD PTR [rsp+0x8],ecx
    9081:	call   5120 <BZ2_bz__AssertH__fail>
    9086:	mov    ecx,DWORD PTR [rsp+0x8]
    908a:	jmp    8f3c <BZ2_compressBlock+0x170c>
    908f:	nop
    9090:	xor    eax,eax
    9092:	add    rdx,0x1
    9096:	mov    BYTE PTR [rdx+0x4651],al
    909c:	cmp    r9,rdx
    909f:	jne    8e68 <BZ2_compressBlock+0x1638>
    90a5:	jmp    8ea5 <BZ2_compressBlock+0x1675>
    90aa:	nop    WORD PTR [rax+rax*1+0x0]
    90b0:	cmp    DWORD PTR [rbx+0x290],0x2
    90b7:	mov    r11d,DWORD PTR [rbx+0x74]
    90bb:	jg     9980 <BZ2_compressBlock+0x2150>
    90c1:	mov    edx,DWORD PTR [rsp+0x94]
    90c8:	mov    esi,0x3
    90cd:	mov    rdi,rbx
    90d0:	call   7760 <bsW>
    90d5:	mov    r15d,DWORD PTR [rsp+0x10]
    90da:	mov    esi,0xf
    90df:	mov    edx,r15d
    90e2:	call   7760 <bsW>
    90e7:	mov    eax,r15d
    90ea:	test   r15d,r15d
    90ed:	je     914f <BZ2_compressBlock+0x191f>
    90ef:	sub    eax,0x1
    90f2:	lea    r14,[rbx+0x4cfa]
    90f9:	lea    rbp,[rbx+rax*1+0x4cfb]
    9101:	nop    DWORD PTR [rax+0x0]
    9108:	xor    r13d,r13d
    910b:	cmp    BYTE PTR [r14],0x0
    910f:	je     9137 <BZ2_compressBlock+0x1907>
    9111:	nop    DWORD PTR [rax+0x0]
    9118:	mov    edx,0x1
    911d:	mov    esi,0x1
    9122:	mov    rdi,rbx
    9125:	add    r13d,0x1
    9129:	call   7760 <bsW>
    912e:	movzx  eax,BYTE PTR [r14]
    9132:	cmp    r13d,eax
    9135:	jl     9118 <BZ2_compressBlock+0x18e8>
    9137:	xor    edx,edx
    9139:	mov    esi,0x1
    913e:	mov    rdi,rbx
    9141:	add    r14,0x1
    9145:	call   7760 <bsW>
    914a:	cmp    rbp,r14
    914d:	jne    9108 <BZ2_compressBlock+0x18d8>
    914f:	mov    eax,DWORD PTR [rbx+0x74]
    9152:	cmp    DWORD PTR [rbx+0x290],0x2
    9159:	mov    DWORD PTR [rsp+0x18],eax
    915d:	jg     99e0 <BZ2_compressBlock+0x21b0>
    9163:	mov    rax,QWORD PTR [rsp+0x80]
    916b:	mov    QWORD PTR [rsp+0x8],r12
    9170:	mov    rdi,rbx
    9173:	mov    r14,QWORD PTR [rsp+0x78]
    9178:	lea    r13,[rbx+rax*1+0x102]
    9180:	mov    rax,QWORD PTR [rsp+0x70]
    9185:	lea    rbp,[rax+0x1]
    9189:	mov    rbx,rbp
    918c:	mov    ebp,DWORD PTR [rsp]
    918f:	nop
    9190:	movzx  r11d,BYTE PTR [r14+0x934c]
    9198:	mov    esi,0x5
    919d:	mov    r12,r14
    91a0:	lea    r15,[rbx+r14*1]
    91a4:	mov    edx,r11d
    91a7:	call   7760 <bsW>
    91ac:	test   ebp,ebp
    91ae:	jg     91cb <BZ2_compressBlock+0x199b>
    91b0:	jmp    9216 <BZ2_compressBlock+0x19e6>
    91b2:	nop    WORD PTR [rax+rax*1+0x0]
    91b8:	mov    edx,0x2
    91bd:	mov    esi,0x2
    91c2:	call   7760 <bsW>
    91c7:	add    r11d,0x1
    91cb:	movzx  eax,BYTE PTR [r12+0x934c]
    91d4:	cmp    r11d,eax
    91d7:	jl     91b8 <BZ2_compressBlock+0x1988>
    91d9:	cmp    r11d,eax
    91dc:	jle    9201 <BZ2_compressBlock+0x19d1>
    91de:	xchg   ax,ax
    91e0:	mov    edx,0x3
    91e5:	mov    esi,0x2
    91ea:	call   7760 <bsW>
    91ef:	movzx  eax,BYTE PTR [r12+0x934c]
    91f8:	sub    r11d,0x1
    91fc:	cmp    r11d,eax
    91ff:	jg     91e0 <BZ2_compressBlock+0x19b0>
    9201:	xor    edx,edx
    9203:	mov    esi,0x1
    9208:	add    r12,0x1
    920c:	call   7760 <bsW>
    9211:	cmp    r15,r12
    9214:	jne    91cb <BZ2_compressBlock+0x199b>
    9216:	add    r14,0x102
    921d:	cmp    r13,r14
    9220:	jne    9190 <BZ2_compressBlock+0x1960>
    9226:	mov    eax,DWORD PTR [rdi+0x74]
    9229:	cmp    DWORD PTR [rdi+0x290],0x2
    9230:	mov    rbx,rdi
    9233:	mov    r12,QWORD PTR [rsp+0x8]
    9238:	mov    DWORD PTR [rsp+0x20],eax
    923c:	jg     99b0 <BZ2_compressBlock+0x2180>
    9242:	mov    eax,DWORD PTR [rbx+0x29c]
    9248:	test   eax,eax
    924a:	jle    976a <BZ2_compressBlock+0x1f3a>
    9250:	lea    rdi,[r12+0x2]
    9255:	movsxd rdx,DWORD PTR [rsp+0x90]
    925d:	mov    r14d,0x1
    9263:	mov    r15,rbx
    9266:	mov    QWORD PTR [rsp],rdi
    926a:	nop    WORD PTR [rax+rax*1+0x0]
    9270:	lea    ebp,[rdx+0x31]
    9273:	lea    r13d,[rdx+0x32]
    9277:	cmp    ebp,eax
    9279:	jl     9281 <BZ2_compressBlock+0x1a51>
    927b:	lea    ebp,[rax-0x1]
    927e:	mov    r13d,eax
    9281:	movzx  eax,BYTE PTR [r15+r14*1+0x6a7]
    928a:	cmp    DWORD PTR [rsp+0x68],eax
    928e:	jle    9328 <BZ2_compressBlock+0x1af8>
    9294:	cmp    DWORD PTR [rsp+0x68],0x6
    9299:	jne    92a8 <BZ2_compressBlock+0x1a78>
    929b:	mov    eax,ebp
    929d:	sub    eax,edx
    929f:	cmp    eax,0x31
    92a2:	je     9340 <BZ2_compressBlock+0x1b10>
    92a8:	cmp    ebp,edx
    92aa:	jl     9305 <BZ2_compressBlock+0x1ad5>
    92ac:	movsxd rax,edx
    92af:	sub    ebp,edx
    92b1:	add    rbp,rax
    92b4:	lea    rbx,[r12+rax*2]
    92b8:	mov    rax,QWORD PTR [rsp]
    92bc:	lea    r11,[rax+rbp*2]
    92c0:	movzx  esi,BYTE PTR [r15+r14*1+0x6a7]
    92c9:	movzx  edx,WORD PTR [rbx]
    92cc:	mov    rdi,r15
    92cf:	add    rbx,0x2
    92d3:	mov    rax,rsi
    92d6:	shl    rax,0x7
    92da:	add    rax,rsi
    92dd:	add    rax,rax
    92e0:	lea    rsi,[rdx+rax*1+0x2654]
    92e8:	add    rax,r15
    92eb:	mov    r9d,DWORD PTR [r15+rsi*4+0x8]
    92f0:	movzx  esi,BYTE PTR [rdx+rax*1+0x934c]
    92f8:	mov    edx,r9d
    92fb:	call   7760 <bsW>
    9300:	cmp    r11,rbx
    9303:	jne    92c0 <BZ2_compressBlock+0x1a90>
    9305:	mov    eax,DWORD PTR [r15+0x29c]
    930c:	mov    edx,r14d
    930f:	add    r14,0x1
    9313:	cmp    eax,r13d
    9316:	jle    9760 <BZ2_compressBlock+0x1f30>
    931c:	movsxd rdx,r13d
    931f:	jmp    9270 <BZ2_compressBlock+0x1a40>
    9324:	nop    DWORD PTR [rax+0x0]
    9328:	mov    edi,0xbbe
    932d:	mov    DWORD PTR [rsp+0x8],edx
    9331:	call   5120 <BZ2_bz__AssertH__fail>
    9336:	movsxd rdx,DWORD PTR [rsp+0x8]
    933b:	jmp    9294 <BZ2_compressBlock+0x1a64>
    9340:	movzx  esi,BYTE PTR [r15+r14*1+0x6a7]
    9349:	lea    rbx,[rdx+rdx*1]
    934d:	mov    rdi,r15
    9350:	mov    rax,rsi
    9353:	shl    rax,0x7
    9357:	add    rax,rsi
    935a:	lea    r11,[r15+rax*2+0x934c]
    9362:	lea    rbp,[r15+rax*8+0x9958]
    936a:	movzx  eax,WORD PTR [r12+rdx*2]
    936f:	movzx  esi,BYTE PTR [r11+rax*1]
    9374:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9378:	call   7760 <bsW>
    937d:	movzx  eax,WORD PTR [r12+rbx*1+0x2]
    9383:	movzx  esi,BYTE PTR [r11+rax*1]
    9388:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    938c:	call   7760 <bsW>
    9391:	movzx  eax,WORD PTR [r12+rbx*1+0x4]
    9397:	movzx  esi,BYTE PTR [r11+rax*1]
    939c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    93a0:	call   7760 <bsW>
    93a5:	movzx  eax,WORD PTR [r12+rbx*1+0x6]
    93ab:	movzx  esi,BYTE PTR [r11+rax*1]
    93b0:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    93b4:	call   7760 <bsW>
    93b9:	movzx  eax,WORD PTR [r12+rbx*1+0x8]
    93bf:	movzx  esi,BYTE PTR [r11+rax*1]
    93c4:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    93c8:	call   7760 <bsW>
    93cd:	movzx  eax,WORD PTR [r12+rbx*1+0xa]
    93d3:	movzx  esi,BYTE PTR [r11+rax*1]
    93d8:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    93dc:	call   7760 <bsW>
    93e1:	movzx  eax,WORD PTR [r12+rbx*1+0xc]
    93e7:	movzx  esi,BYTE PTR [r11+rax*1]
    93ec:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    93f0:	call   7760 <bsW>
    93f5:	movzx  eax,WORD PTR [r12+rbx*1+0xe]
    93fb:	movzx  esi,BYTE PTR [r11+rax*1]
    9400:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9404:	call   7760 <bsW>
    9409:	movzx  eax,WORD PTR [r12+rbx*1+0x10]
    940f:	movzx  esi,BYTE PTR [r11+rax*1]
    9414:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9418:	call   7760 <bsW>
    941d:	movzx  eax,WORD PTR [r12+rbx*1+0x12]
    9423:	movzx  esi,BYTE PTR [r11+rax*1]
    9428:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    942c:	call   7760 <bsW>
    9431:	movzx  eax,WORD PTR [r12+rbx*1+0x14]
    9437:	movzx  esi,BYTE PTR [r11+rax*1]
    943c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9440:	call   7760 <bsW>
    9445:	movzx  eax,WORD PTR [r12+rbx*1+0x16]
    944b:	movzx  esi,BYTE PTR [r11+rax*1]
    9450:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9454:	call   7760 <bsW>
    9459:	movzx  eax,WORD PTR [r12+rbx*1+0x18]
    945f:	movzx  esi,BYTE PTR [r11+rax*1]
    9464:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9468:	call   7760 <bsW>
    946d:	movzx  eax,WORD PTR [r12+rbx*1+0x1a]
    9473:	movzx  esi,BYTE PTR [r11+rax*1]
    9478:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    947c:	call   7760 <bsW>
    9481:	movzx  eax,WORD PTR [r12+rbx*1+0x1c]
    9487:	movzx  esi,BYTE PTR [r11+rax*1]
    948c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9490:	call   7760 <bsW>
    9495:	movzx  eax,WORD PTR [r12+rbx*1+0x1e]
    949b:	movzx  esi,BYTE PTR [r11+rax*1]
    94a0:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    94a4:	call   7760 <bsW>
    94a9:	movzx  eax,WORD PTR [r12+rbx*1+0x20]
    94af:	movzx  esi,BYTE PTR [r11+rax*1]
    94b4:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    94b8:	call   7760 <bsW>
    94bd:	movzx  eax,WORD PTR [r12+rbx*1+0x22]
    94c3:	movzx  esi,BYTE PTR [r11+rax*1]
    94c8:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    94cc:	call   7760 <bsW>
    94d1:	movzx  eax,WORD PTR [r12+rbx*1+0x24]
    94d7:	movzx  esi,BYTE PTR [r11+rax*1]
    94dc:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    94e0:	call   7760 <bsW>
    94e5:	movzx  eax,WORD PTR [r12+rbx*1+0x26]
    94eb:	movzx  esi,BYTE PTR [r11+rax*1]
    94f0:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    94f4:	call   7760 <bsW>
    94f9:	movzx  eax,WORD PTR [r12+rbx*1+0x28]
    94ff:	movzx  esi,BYTE PTR [r11+rax*1]
    9504:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9508:	call   7760 <bsW>
    950d:	movzx  eax,WORD PTR [r12+rbx*1+0x2a]
    9513:	movzx  esi,BYTE PTR [r11+rax*1]
    9518:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    951c:	call   7760 <bsW>
    9521:	movzx  eax,WORD PTR [r12+rbx*1+0x2c]
    9527:	movzx  esi,BYTE PTR [r11+rax*1]
    952c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9530:	call   7760 <bsW>
    9535:	movzx  eax,WORD PTR [r12+rbx*1+0x2e]
    953b:	movzx  esi,BYTE PTR [r11+rax*1]
    9540:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9544:	call   7760 <bsW>
    9549:	movzx  eax,WORD PTR [r12+rbx*1+0x30]
    954f:	movzx  esi,BYTE PTR [r11+rax*1]
    9554:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9558:	call   7760 <bsW>
    955d:	movzx  eax,WORD PTR [r12+rbx*1+0x32]
    9563:	movzx  esi,BYTE PTR [r11+rax*1]
    9568:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    956c:	call   7760 <bsW>
    9571:	movzx  eax,WORD PTR [r12+rbx*1+0x34]
    9577:	movzx  esi,BYTE PTR [r11+rax*1]
    957c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9580:	call   7760 <bsW>
    9585:	movzx  eax,WORD PTR [r12+rbx*1+0x36]
    958b:	movzx  esi,BYTE PTR [r11+rax*1]
    9590:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9594:	call   7760 <bsW>
    9599:	movzx  eax,WORD PTR [r12+rbx*1+0x38]
    959f:	movzx  esi,BYTE PTR [r11+rax*1]
    95a4:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    95a8:	call   7760 <bsW>
    95ad:	movzx  eax,WORD PTR [r12+rbx*1+0x3a]
    95b3:	movzx  esi,BYTE PTR [r11+rax*1]
    95b8:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    95bc:	call   7760 <bsW>
    95c1:	movzx  eax,WORD PTR [r12+rbx*1+0x3c]
    95c7:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    95cb:	movzx  esi,BYTE PTR [r11+rax*1]
    95d0:	call   7760 <bsW>
    95d5:	movzx  eax,WORD PTR [r12+rbx*1+0x3e]
    95db:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    95df:	movzx  esi,BYTE PTR [r11+rax*1]
    95e4:	call   7760 <bsW>
    95e9:	movzx  eax,WORD PTR [r12+rbx*1+0x40]
    95ef:	movzx  esi,BYTE PTR [r11+rax*1]
    95f4:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    95f8:	call   7760 <bsW>
    95fd:	movzx  eax,WORD PTR [r12+rbx*1+0x42]
    9603:	movzx  esi,BYTE PTR [r11+rax*1]
    9608:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    960c:	call   7760 <bsW>
    9611:	movzx  eax,WORD PTR [r12+rbx*1+0x44]
    9617:	movzx  esi,BYTE PTR [r11+rax*1]
    961c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9620:	call   7760 <bsW>
    9625:	movzx  eax,WORD PTR [r12+rbx*1+0x46]
    962b:	movzx  esi,BYTE PTR [r11+rax*1]
    9630:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9634:	call   7760 <bsW>
    9639:	movzx  eax,WORD PTR [r12+rbx*1+0x48]
    963f:	movzx  esi,BYTE PTR [r11+rax*1]
    9644:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9648:	call   7760 <bsW>
    964d:	movzx  eax,WORD PTR [r12+rbx*1+0x4a]
    9653:	movzx  esi,BYTE PTR [r11+rax*1]
    9658:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    965c:	call   7760 <bsW>
    9661:	movzx  eax,WORD PTR [r12+rbx*1+0x4c]
    9667:	movzx  esi,BYTE PTR [r11+rax*1]
    966c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9670:	call   7760 <bsW>
    9675:	movzx  eax,WORD PTR [r12+rbx*1+0x4e]
    967b:	movzx  esi,BYTE PTR [r11+rax*1]
    9680:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9684:	call   7760 <bsW>
    9689:	movzx  eax,WORD PTR [r12+rbx*1+0x50]
    968f:	movzx  esi,BYTE PTR [r11+rax*1]
    9694:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9698:	call   7760 <bsW>
    969d:	movzx  eax,WORD PTR [r12+rbx*1+0x52]
    96a3:	movzx  esi,BYTE PTR [r11+rax*1]
    96a8:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    96ac:	call   7760 <bsW>
    96b1:	movzx  eax,WORD PTR [r12+rbx*1+0x54]
    96b7:	movzx  esi,BYTE PTR [r11+rax*1]
    96bc:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    96c0:	call   7760 <bsW>
    96c5:	movzx  eax,WORD PTR [r12+rbx*1+0x56]
    96cb:	movzx  esi,BYTE PTR [r11+rax*1]
    96d0:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    96d4:	call   7760 <bsW>
    96d9:	movzx  eax,WORD PTR [r12+rbx*1+0x58]
    96df:	movzx  esi,BYTE PTR [r11+rax*1]
    96e4:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    96e8:	call   7760 <bsW>
    96ed:	movzx  eax,WORD PTR [r12+rbx*1+0x5a]
    96f3:	movzx  esi,BYTE PTR [r11+rax*1]
    96f8:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    96fc:	call   7760 <bsW>
    9701:	movzx  eax,WORD PTR [r12+rbx*1+0x5c]
    9707:	movzx  esi,BYTE PTR [r11+rax*1]
    970c:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9710:	call   7760 <bsW>
    9715:	movzx  eax,WORD PTR [r12+rbx*1+0x5e]
    971b:	movzx  esi,BYTE PTR [r11+rax*1]
    9720:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9724:	call   7760 <bsW>
    9729:	movzx  eax,WORD PTR [r12+rbx*1+0x60]
    972f:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9733:	movzx  esi,BYTE PTR [r11+rax*1]
    9738:	call   7760 <bsW>
    973d:	movzx  eax,WORD PTR [r12+rbx*1+0x62]
    9743:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
    9747:	movzx  esi,BYTE PTR [r11+rax*1]
    974c:	call   7760 <bsW>
    9751:	jmp    9305 <BZ2_compressBlock+0x1ad5>
    9756:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9760:	mov    DWORD PTR [rsp+0x90],edx
    9767:	mov    rbx,r15
    976a:	mov    edi,DWORD PTR [rsp+0x90]
    9771:	cmp    DWORD PTR [rsp+0x10],edi
    9775:	je     9781 <BZ2_compressBlock+0x1f51>
    9777:	mov    edi,0xbbf
    977c:	call   5120 <BZ2_bz__AssertH__fail>
    9781:	cmp    DWORD PTR [rbx+0x290],0x2
    9788:	jle    78cf <BZ2_compressBlock+0x9f>
    978e:	mov    rdi,QWORD PTR [rip+0x848b]        # 11c20 <stderr@@GLIBC_2.2.5>
    9795:	mov    ecx,DWORD PTR [rbx+0x74]
    9798:	mov    esi,0x1
    979d:	xor    eax,eax
    979f:	sub    ecx,DWORD PTR [rsp+0x20]
    97a3:	lea    rdx,[rip+0x49d9]        # e183 <incs+0xc43>
    97aa:	call   1270 <__fprintf_chk@plt>
    97af:	jmp    78cf <BZ2_compressBlock+0x9f>
    97b4:	nop    DWORD PTR [rax+0x0]
    97b8:	xor    r15d,r15d
    97bb:	jmp    7e3f <BZ2_compressBlock+0x60f>
    97c0:	mov    ecx,DWORD PTR [rsp]
    97c3:	test   ecx,ecx
    97c5:	jle    809b <BZ2_compressBlock+0x86b>
    97cb:	mov    rax,QWORD PTR [rsp+0x58]
    97d0:	mov    rdi,QWORD PTR [rsp+0x98]
    97d8:	lea    rdx,[rbx+0xc9b8]
    97df:	nop
    97e0:	movzx  ecx,BYTE PTR [rax+0x102]
    97e7:	movzx  esi,BYTE PTR [rax]
    97ea:	add    rdx,0x10
    97ee:	add    rax,0x1
    97f2:	shl    ecx,0x10
    97f5:	or     ecx,esi
    97f7:	mov    DWORD PTR [rdx-0x10],ecx
    97fa:	movzx  ecx,BYTE PTR [rax+0x305]
    9801:	movzx  esi,BYTE PTR [rax+0x203]
    9808:	shl    ecx,0x10
    980b:	or     ecx,esi
    980d:	mov    DWORD PTR [rdx-0xc],ecx
    9810:	movzx  ecx,BYTE PTR [rax+0x509]
    9817:	movzx  esi,BYTE PTR [rax+0x407]
    981e:	shl    ecx,0x10
    9821:	or     ecx,esi
    9823:	mov    DWORD PTR [rdx-0x8],ecx
    9826:	cmp    rdi,rdx
    9829:	jne    97e0 <BZ2_compressBlock+0x1fb0>
    982b:	mov    r9d,DWORD PTR [rbx+0x29c]
    9832:	test   r9d,r9d
    9835:	jg     80ab <BZ2_compressBlock+0x87b>
    983b:	nop    DWORD PTR [rax+rax*1+0x0]
    9840:	add    DWORD PTR [rsp+0x20],0x1
    9845:	xor    r13d,r13d
    9848:	xor    r8d,r8d
    984b:	cmp    DWORD PTR [rbx+0x290],0x2
    9852:	jle    8dd6 <BZ2_compressBlock+0x15a6>
    9858:	nop    DWORD PTR [rax+rax*1+0x0]
    9860:	mov    ecx,DWORD PTR [rsp+0x20]
    9864:	sar    r8d,0x3
    9868:	mov    esi,0x1
    986d:	xor    eax,eax
    986f:	mov    rdi,QWORD PTR [rip+0x83aa]        # 11c20 <stderr@@GLIBC_2.2.5>
    9876:	lea    rdx,[rip+0x4873]        # e0f0 <incs+0xbb0>
    987d:	call   1270 <__fprintf_chk@plt>
    9882:	mov    rbp,QWORD PTR [rsp+0x50]
    9887:	mov    r14,QWORD PTR [rsp+0x30]
    988c:	nop    DWORD PTR [rax+0x0]
    9890:	mov    ecx,DWORD PTR [rbp+0x0]
    9893:	mov    rdi,QWORD PTR [rip+0x8386]        # 11c20 <stderr@@GLIBC_2.2.5>
    989a:	xor    eax,eax
    989c:	add    rbp,0x4
    98a0:	lea    rdx,[rip+0x489d]        # e144 <incs+0xc04>
    98a7:	mov    esi,0x1
    98ac:	call   1270 <__fprintf_chk@plt>
    98b1:	cmp    rbp,r14
    98b4:	jne    9890 <BZ2_compressBlock+0x2060>
    98b6:	mov    rsi,QWORD PTR [rip+0x8363]        # 11c20 <stderr@@GLIBC_2.2.5>
    98bd:	mov    edi,0xa
    98c2:	call   11d0 <fputc@plt>
    98c7:	jmp    8dd6 <BZ2_compressBlock+0x15a6>
    98cc:	nop    DWORD PTR [rax+0x0]
    98d0:	mov    rdi,rbx
    98d3:	mov    edx,0x42
    98d8:	mov    esi,0x8
    98dd:	mov    QWORD PTR [rbx+0x280],0x0
    98e8:	call   7760 <bsW>
    98ed:	mov    edx,0x5a
    98f2:	mov    esi,0x8
    98f7:	call   7760 <bsW>
    98fc:	mov    edx,0x68
    9901:	mov    esi,0x8
    9906:	call   7760 <bsW>
    990b:	movzx  eax,BYTE PTR [rbx+0x298]
    9912:	mov    esi,0x8
    9917:	lea    edx,[rax+0x30]
    991a:	movzx  edx,dl
    991d:	call   7760 <bsW>
    9922:	mov    eax,DWORD PTR [rbx+0x6c]
    9925:	jmp    78cb <BZ2_compressBlock+0x9b>
    992a:	nop    WORD PTR [rax+rax*1+0x0]
    9930:	mov    ecx,DWORD PTR [rbx+0x28c]
    9936:	mov    rdi,QWORD PTR [rip+0x82e3]        # 11c20 <stderr@@GLIBC_2.2.5>
    993d:	lea    rdx,[rip+0x47dc]        # e120 <incs+0xbe0>
    9944:	xor    eax,eax
    9946:	mov    esi,0x1
    994b:	call   1270 <__fprintf_chk@plt>
    9950:	jmp    7d35 <BZ2_compressBlock+0x505>
    9955:	nop    DWORD PTR [rax]
    9958:	mov    DWORD PTR [rsp+0x94],0x3
    9963:	mov    DWORD PTR [rsp+0x68],0x3
    996b:	jmp    7da3 <BZ2_compressBlock+0x573>
    9970:	mov    eax,0x2
    9975:	mov    r8d,0x2
    997b:	jmp    7b04 <BZ2_compressBlock+0x2d4>
    9980:	mov    ecx,r11d
    9983:	mov    rdi,QWORD PTR [rip+0x8296]        # 11c20 <stderr@@GLIBC_2.2.5>
    998a:	lea    rdx,[rip+0x47b7]        # e148 <incs+0xc08>
    9991:	xor    eax,eax
    9993:	sub    ecx,r13d
    9996:	mov    esi,0x1
    999b:	call   1270 <__fprintf_chk@plt>
    99a0:	mov    r11d,DWORD PTR [rbx+0x74]
    99a4:	jmp    90c1 <BZ2_compressBlock+0x1891>
    99a9:	nop    DWORD PTR [rax+0x0]
    99b0:	mov    rdi,QWORD PTR [rip+0x8269]        # 11c20 <stderr@@GLIBC_2.2.5>
    99b7:	mov    ecx,eax
    99b9:	xor    eax,eax
    99bb:	sub    ecx,DWORD PTR [rsp+0x18]
    99bf:	lea    rdx,[rip+0x47ab]        # e171 <incs+0xc31>
    99c6:	mov    esi,0x1
    99cb:	call   1270 <__fprintf_chk@plt>
    99d0:	mov    eax,DWORD PTR [rbx+0x74]
    99d3:	mov    DWORD PTR [rsp+0x20],eax
    99d7:	jmp    9242 <BZ2_compressBlock+0x1a12>
    99dc:	nop    DWORD PTR [rax+0x0]
    99e0:	mov    ecx,eax
    99e2:	mov    rdi,QWORD PTR [rip+0x8237]        # 11c20 <stderr@@GLIBC_2.2.5>
    99e9:	lea    rdx,[rip+0x4772]        # e162 <incs+0xc22>
    99f0:	xor    eax,eax
    99f2:	sub    ecx,r11d
    99f5:	mov    esi,0x1
    99fa:	call   1270 <__fprintf_chk@plt>
    99ff:	mov    eax,DWORD PTR [rbx+0x74]
    9a02:	mov    DWORD PTR [rsp+0x18],eax
    9a06:	jmp    9163 <BZ2_compressBlock+0x1933>
    9a0b:	nop    DWORD PTR [rax+rax*1+0x0]
    9a10:	mov    rdi,QWORD PTR [rip+0x8209]        # 11c20 <stderr@@GLIBC_2.2.5>
    9a17:	mov    r8d,r11d
    9a1a:	mov    ecx,r10d
    9a1d:	xor    eax,eax
    9a1f:	lea    rdx,[rip+0x464a]        # e070 <incs+0xb30>
    9a26:	mov    esi,0x1
    9a2b:	call   1270 <__fprintf_chk@plt>
    9a30:	mov    r9d,DWORD PTR [rbx+0x7c]
    9a34:	mov    r11d,DWORD PTR [rbx+0x29c]
    9a3b:	jmp    7bad <BZ2_compressBlock+0x37d>
    9a40:	lea    rax,[r12+rcx*2]
    9a44:	lea    r11d,[r13+0x1]
    9a48:	jmp    7b8b <BZ2_compressBlock+0x35b>
    9a4d:	nop    DWORD PTR [rax]
    9a50:	mov    edi,0xbb9
    9a55:	call   5120 <BZ2_bz__AssertH__fail>
    9a5a:	mov    r11d,DWORD PTR [rbx+0x29c]
    9a61:	jmp    7c05 <BZ2_compressBlock+0x3d5>
    9a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9a70:	mov    DWORD PTR [rsp+0x94],0x4
    9a7b:	mov    DWORD PTR [rsp+0x68],0x4
    9a83:	jmp    7da3 <BZ2_compressBlock+0x573>
    9a88:	nop    DWORD PTR [rax+rax*1+0x0]
    9a90:	mov    rax,r12
    9a93:	mov    r11d,0x1
    9a99:	jmp    7b8b <BZ2_compressBlock+0x35b>
    9a9e:	xchg   ax,ax
    9aa0:	lea    rax,[rsp+0xd0]
    9aa8:	mov    QWORD PTR [rsp+0x48],rax
    9aad:	jmp    7a58 <BZ2_compressBlock+0x228>
    9ab2:	call   11a0 <__stack_chk_fail@plt>
    9ab7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000009ac0 <BZ2_decompress>:
    9ac0:	endbr64 
    9ac4:	push   r15
    9ac6:	push   r14
    9ac8:	push   r13
    9aca:	push   r12
    9acc:	push   rbp
    9acd:	push   rbx
    9ace:	mov    rbx,rdi
    9ad1:	sub    rsp,0x88
    9ad8:	mov    r9,QWORD PTR [rdi]
    9adb:	mov    rax,QWORD PTR fs:0x28
    9ae4:	mov    QWORD PTR [rsp+0x78],rax
    9ae9:	xor    eax,eax
    9aeb:	mov    eax,DWORD PTR [rdi+0x8]
    9aee:	cmp    eax,0xa
    9af1:	je     9bf8 <BZ2_decompress+0x138>
    9af7:	mov    ecx,DWORD PTR [rdi+0xfa2c]
    9afd:	mov    r8d,DWORD PTR [rdi+0xfa24]
    9b04:	sub    eax,0xb
    9b07:	mov    r15d,DWORD PTR [rdi+0xfa28]
    9b0e:	mov    r14d,DWORD PTR [rdi+0xfa34]
    9b15:	mov    DWORD PTR [rsp+0x1c],ecx
    9b19:	mov    ecx,DWORD PTR [rdi+0xfa30]
    9b1f:	mov    r11d,DWORD PTR [rdi+0xfa50]
    9b26:	mov    ebp,DWORD PTR [rbx+0xfa64]
    9b2c:	mov    DWORD PTR [rsp+0x34],ecx
    9b30:	mov    ecx,DWORD PTR [rdi+0xfa38]
    9b36:	mov    r12d,DWORD PTR [rbx+0xfa68]
    9b3d:	mov    r13d,DWORD PTR [rbx+0xfa6c]
    9b44:	mov    DWORD PTR [rsp+0x18],ecx
    9b48:	mov    ecx,DWORD PTR [rdi+0xfa3c]
    9b4e:	mov    DWORD PTR [rsp+0x4c],ecx
    9b52:	mov    ecx,DWORD PTR [rdi+0xfa40]
    9b58:	mov    DWORD PTR [rsp+0x48],ecx
    9b5c:	mov    ecx,DWORD PTR [rdi+0xfa44]
    9b62:	mov    DWORD PTR [rsp+0x44],ecx
    9b66:	mov    ecx,DWORD PTR [rdi+0xfa48]
    9b6c:	mov    DWORD PTR [rsp+0x30],ecx
    9b70:	mov    ecx,DWORD PTR [rdi+0xfa4c]
    9b76:	mov    DWORD PTR [rsp+0x38],ecx
    9b7a:	mov    ecx,DWORD PTR [rdi+0xfa54]
    9b80:	mov    DWORD PTR [rsp+0x40],ecx
    9b84:	mov    ecx,DWORD PTR [rdi+0xfa58]
    9b8a:	mov    DWORD PTR [rsp+0x54],ecx
    9b8e:	mov    ecx,DWORD PTR [rdi+0xfa5c]
    9b94:	mov    edi,DWORD PTR [rdi+0xfa60]
    9b9a:	mov    DWORD PTR [rsp+0xc],ecx
    9b9e:	mov    ecx,DWORD PTR [rbx+0xfa70]
    9ba4:	mov    DWORD PTR [rsp+0x5c],edi
    9ba8:	mov    DWORD PTR [rsp+0x58],ecx
    9bac:	mov    edi,DWORD PTR [rbx+0xfa74]
    9bb2:	mov    rcx,QWORD PTR [rbx+0xfa78]
    9bb9:	mov    DWORD PTR [rsp+0x50],edi
    9bbd:	mov    rdi,QWORD PTR [rbx+0xfa80]
    9bc4:	mov    QWORD PTR [rsp+0x10],rcx
    9bc9:	mov    rcx,QWORD PTR [rbx+0xfa88]
    9bd0:	mov    QWORD PTR [rsp+0x20],rdi
    9bd5:	mov    QWORD PTR [rsp+0x28],rcx
    9bda:	cmp    eax,0x27
    9bdd:	ja     b7d9 <BZ2_decompress+0x1d19>
    9be3:	lea    rdx,[rip+0x45be]        # e1a8 <incs+0xc68>
    9bea:	movsxd rax,DWORD PTR [rdx+rax*4]
    9bee:	add    rax,rdx
    9bf1:	notrack jmp rax
    9bf4:	nop    DWORD PTR [rax+0x0]
    9bf8:	mov    DWORD PTR [rdi+0xfa24],0x0
    9c02:	mov    ecx,DWORD PTR [rdi+0x24]
    9c05:	mov    QWORD PTR [rdi+0xfa28],0x0
    9c10:	mov    QWORD PTR [rdi+0xfa30],0x0
    9c1b:	mov    QWORD PTR [rdi+0xfa38],0x0
    9c26:	mov    QWORD PTR [rdi+0xfa40],0x0
    9c31:	mov    QWORD PTR [rdi+0xfa48],0x0
    9c3c:	mov    QWORD PTR [rdi+0xfa50],0x0
    9c47:	mov    QWORD PTR [rdi+0xfa58],0x0
    9c52:	mov    QWORD PTR [rdi+0xfa60],0x0
    9c5d:	mov    QWORD PTR [rdi+0xfa68],0x0
    9c68:	mov    QWORD PTR [rdi+0xfa70],0x0
    9c73:	mov    QWORD PTR [rdi+0xfa78],0x0
    9c7e:	mov    QWORD PTR [rdi+0xfa80],0x0
    9c89:	mov    QWORD PTR [rdi+0xfa88],0x0
    9c94:	jmp    9cdc <BZ2_decompress+0x21c>
    9c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9ca0:	mov    edx,DWORD PTR [r9+0x8]
    9ca4:	test   edx,edx
    9ca6:	je     ba54 <BZ2_decompress+0x1f94>
    9cac:	mov    rsi,QWORD PTR [r9]
    9caf:	mov    eax,DWORD PTR [rbx+0x20]
    9cb2:	add    ecx,0x8
    9cb5:	sub    edx,0x1
    9cb8:	movzx  edi,BYTE PTR [rsi]
    9cbb:	shl    eax,0x8
    9cbe:	mov    DWORD PTR [rbx+0x24],ecx
    9cc1:	add    rsi,0x1
    9cc5:	or     eax,edi
    9cc7:	mov    DWORD PTR [rbx+0x20],eax
    9cca:	add    DWORD PTR [r9+0xc],0x1
    9ccf:	mov    QWORD PTR [r9],rsi
    9cd2:	mov    DWORD PTR [r9+0x8],edx
    9cd6:	je     bafa <BZ2_decompress+0x203a>
    9cdc:	cmp    ecx,0x7
    9cdf:	jle    9ca0 <BZ2_decompress+0x1e0>
    9ce1:	mov    eax,DWORD PTR [rbx+0x20]
    9ce4:	sub    ecx,0x8
    9ce7:	mov    DWORD PTR [rbx+0x24],ecx
    9cea:	shr    eax,cl
    9cec:	cmp    al,0x42
    9cee:	jne    c012 <BZ2_decompress+0x2552>
    9cf4:	mov    DWORD PTR [rsp+0x50],0x0
    9cfc:	xor    r13d,r13d
    9cff:	xor    r12d,r12d
    9d02:	xor    ebp,ebp
    9d04:	mov    QWORD PTR [rsp+0x28],0x0
    9d0d:	xor    r11d,r11d
    9d10:	xor    r14d,r14d
    9d13:	xor    r15d,r15d
    9d16:	mov    QWORD PTR [rsp+0x20],0x0
    9d1f:	xor    r8d,r8d
    9d22:	mov    QWORD PTR [rsp+0x10],0x0
    9d2b:	mov    DWORD PTR [rsp+0x58],0x0
    9d33:	mov    DWORD PTR [rsp+0x5c],0x0
    9d3b:	mov    DWORD PTR [rsp+0xc],0x0
    9d43:	mov    DWORD PTR [rsp+0x54],0x0
    9d4b:	mov    DWORD PTR [rsp+0x40],0x0
    9d53:	mov    DWORD PTR [rsp+0x38],0x0
    9d5b:	mov    DWORD PTR [rsp+0x30],0x0
    9d63:	mov    DWORD PTR [rsp+0x44],0x0
    9d6b:	mov    DWORD PTR [rsp+0x48],0x0
    9d73:	mov    DWORD PTR [rsp+0x4c],0x0
    9d7b:	mov    DWORD PTR [rsp+0x18],0x0
    9d83:	mov    DWORD PTR [rsp+0x34],0x0
    9d8b:	mov    DWORD PTR [rsp+0x1c],0x0
    9d93:	jmp    b753 <BZ2_decompress+0x1c93>
    9d98:	mov    DWORD PTR [rsp+0x68],r11d
    9d9d:	lea    esi,[rax*4+0x0]
    9da4:	mov    edx,0x1
    9da9:	mov    DWORD PTR [rsp+0x60],r8d
    9dae:	call   rcx
    9db0:	mov    r8d,DWORD PTR [rsp+0x60]
    9db5:	mov    r11d,DWORD PTR [rsp+0x68]
    9dba:	test   rax,rax
    9dbd:	mov    QWORD PTR [rbx+0xc50],rax
    9dc4:	je     b348 <BZ2_decompress+0x1888>
    9dca:	mov    DWORD PTR [rbx+0x8],0xe
    9dd1:	mov    ecx,DWORD PTR [rbx+0x24]
    9dd4:	jmp    9e1e <BZ2_decompress+0x35e>
    9dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9de0:	mov    rax,QWORD PTR [rbx]
    9de3:	mov    esi,DWORD PTR [rax+0x8]
    9de6:	test   esi,esi
    9de8:	je     b7b8 <BZ2_decompress+0x1cf8>
    9dee:	mov    rdi,QWORD PTR [rax]
    9df1:	mov    edx,DWORD PTR [rbx+0x20]
    9df4:	add    ecx,0x8
    9df7:	sub    esi,0x1
    9dfa:	movzx  r9d,BYTE PTR [rdi]
    9dfe:	shl    edx,0x8
    9e01:	mov    DWORD PTR [rbx+0x24],ecx
    9e04:	add    rdi,0x1
    9e08:	or     edx,r9d
    9e0b:	mov    DWORD PTR [rbx+0x20],edx
    9e0e:	add    DWORD PTR [rax+0xc],0x1
    9e12:	mov    QWORD PTR [rax],rdi
    9e15:	mov    DWORD PTR [rax+0x8],esi
    9e18:	je     b910 <BZ2_decompress+0x1e50>
    9e1e:	cmp    ecx,0x7
    9e21:	jle    9de0 <BZ2_decompress+0x320>
    9e23:	mov    eax,DWORD PTR [rbx+0x20]
    9e26:	sub    ecx,0x8
    9e29:	mov    DWORD PTR [rbx+0x24],ecx
    9e2c:	shr    eax,cl
    9e2e:	cmp    al,0x17
    9e30:	je     b363 <BZ2_decompress+0x18a3>
    9e36:	cmp    al,0x31
    9e38:	je     acc3 <BZ2_decompress+0x1203>
    9e3e:	jmp    ada5 <BZ2_decompress+0x12e5>
    9e43:	nop    DWORD PTR [rax+rax*1+0x0]
    9e48:	mov    r13d,DWORD PTR [rbx+0x20]
    9e4c:	lea    ecx,[rdi-0x1]
    9e4f:	add    r12d,r12d
    9e52:	mov    DWORD PTR [rbx+0x24],ecx
    9e55:	shr    r13d,cl
    9e58:	and    r13d,0x1
    9e5c:	or     r12d,r13d
    9e5f:	cmp    ebp,0x14
    9e62:	jg     ada5 <BZ2_decompress+0x12e5>
    9e68:	mov    rcx,QWORD PTR [rsp+0x10]
    9e6d:	movsxd rax,ebp
    9e70:	cmp    DWORD PTR [rcx+rax*4],r12d
    9e74:	jge    a420 <BZ2_decompress+0x960>
    9e7a:	add    ebp,0x1
    9e7d:	mov    DWORD PTR [rbx+0x8],0x25
    9e84:	mov    edi,DWORD PTR [rbx+0x24]
    9e87:	jmp    9ece <BZ2_decompress+0x40e>
    9e89:	nop    DWORD PTR [rax+0x0]
    9e90:	mov    rax,QWORD PTR [rbx]
    9e93:	mov    ecx,DWORD PTR [rax+0x8]
    9e96:	test   ecx,ecx
    9e98:	je     b7b8 <BZ2_decompress+0x1cf8>
    9e9e:	mov    rsi,QWORD PTR [rax]
    9ea1:	mov    edx,DWORD PTR [rbx+0x20]
    9ea4:	add    edi,0x8
    9ea7:	sub    ecx,0x1
    9eaa:	movzx  r9d,BYTE PTR [rsi]
    9eae:	shl    edx,0x8
    9eb1:	mov    DWORD PTR [rbx+0x24],edi
    9eb4:	add    rsi,0x1
    9eb8:	or     edx,r9d
    9ebb:	mov    DWORD PTR [rbx+0x20],edx
    9ebe:	add    DWORD PTR [rax+0xc],0x1
    9ec2:	mov    QWORD PTR [rax],rsi
    9ec5:	mov    DWORD PTR [rax+0x8],ecx
    9ec8:	je     b9e0 <BZ2_decompress+0x1f20>
    9ece:	test   edi,edi
    9ed0:	jle    9e90 <BZ2_decompress+0x3d0>
    9ed2:	jmp    9e48 <BZ2_decompress+0x388>
    9ed7:	nop    WORD PTR [rax+rax*1+0x0]
    9ee0:	mov    eax,DWORD PTR [rbx+0x24]
    9ee3:	mov    DWORD PTR [rbx+0x8],0x23
    9eea:	jmp    9f2e <BZ2_decompress+0x46e>
    9eec:	nop    DWORD PTR [rax+0x0]
    9ef0:	mov    rdx,QWORD PTR [rbx]
    9ef3:	mov    esi,DWORD PTR [rdx+0x8]
    9ef6:	test   esi,esi
    9ef8:	je     b7b8 <BZ2_decompress+0x1cf8>
    9efe:	mov    rdi,QWORD PTR [rdx]
    9f01:	mov    ecx,DWORD PTR [rbx+0x20]
    9f04:	add    eax,0x8
    9f07:	sub    esi,0x1
    9f0a:	movzx  r9d,BYTE PTR [rdi]
    9f0e:	shl    ecx,0x8
    9f11:	mov    DWORD PTR [rbx+0x24],eax
    9f14:	add    rdi,0x1
    9f18:	or     ecx,r9d
    9f1b:	mov    DWORD PTR [rbx+0x20],ecx
    9f1e:	add    DWORD PTR [rdx+0xc],0x1
    9f22:	mov    QWORD PTR [rdx],rdi
    9f25:	mov    DWORD PTR [rdx+0x8],esi
    9f28:	je     b9c0 <BZ2_decompress+0x1f00>
    9f2e:	test   eax,eax
    9f30:	jle    9ef0 <BZ2_decompress+0x430>
    9f32:	lea    ecx,[rax-0x1]
    9f35:	mov    eax,DWORD PTR [rbx+0x20]
    9f38:	mov    DWORD PTR [rbx+0x24],ecx
    9f3b:	shr    eax,cl
    9f3d:	mov    ecx,DWORD PTR [rsp+0xc]
    9f41:	lea    edx,[rcx-0x1]
    9f44:	add    ecx,0x1
    9f47:	test   al,0x1
    9f49:	cmove  edx,ecx
    9f4c:	mov    DWORD PTR [rsp+0xc],edx
    9f50:	mov    eax,DWORD PTR [rsp+0xc]
    9f54:	sub    eax,0x1
    9f57:	cmp    eax,0x13
    9f5a:	ja     ada5 <BZ2_decompress+0x12e5>
    9f60:	mov    DWORD PTR [rbx+0x8],0x22
    9f67:	mov    eax,DWORD PTR [rbx+0x24]
    9f6a:	jmp    9fae <BZ2_decompress+0x4ee>
    9f6c:	nop    DWORD PTR [rax+0x0]
    9f70:	mov    rdx,QWORD PTR [rbx]
    9f73:	mov    esi,DWORD PTR [rdx+0x8]
    9f76:	test   esi,esi
    9f78:	je     b7b8 <BZ2_decompress+0x1cf8>
    9f7e:	mov    rdi,QWORD PTR [rdx]
    9f81:	mov    ecx,DWORD PTR [rbx+0x20]
    9f84:	add    eax,0x8
    9f87:	sub    esi,0x1
    9f8a:	movzx  r9d,BYTE PTR [rdi]
    9f8e:	shl    ecx,0x8
    9f91:	mov    DWORD PTR [rbx+0x24],eax
    9f94:	add    rdi,0x1
    9f98:	or     ecx,r9d
    9f9b:	mov    DWORD PTR [rbx+0x20],ecx
    9f9e:	add    DWORD PTR [rdx+0xc],0x1
    9fa2:	mov    QWORD PTR [rdx],rdi
    9fa5:	mov    DWORD PTR [rdx+0x8],esi
    9fa8:	je     b9d0 <BZ2_decompress+0x1f10>
    9fae:	test   eax,eax
    9fb0:	jle    9f70 <BZ2_decompress+0x4b0>
    9fb2:	mov    edx,DWORD PTR [rbx+0x20]
    9fb5:	sub    eax,0x1
    9fb8:	mov    DWORD PTR [rbx+0x24],eax
    9fbb:	bt     edx,eax
    9fbe:	jb     9ee3 <BZ2_decompress+0x423>
    9fc4:	movsxd rdx,DWORD PTR [rsp+0x1c]
    9fc9:	movzx  esi,BYTE PTR [rsp+0xc]
    9fce:	movsxd rcx,r8d
    9fd1:	add    r8d,0x1
    9fd5:	mov    rax,rdx
    9fd8:	shl    rax,0x7
    9fdc:	add    rax,rdx
    9fdf:	lea    rax,[rbx+rax*2]
    9fe3:	mov    BYTE PTR [rcx+rax*1+0xab70],sil
    9feb:	cmp    r8d,DWORD PTR [rsp+0x34]
    9ff0:	jl     9f50 <BZ2_decompress+0x490>
    9ff6:	add    DWORD PTR [rsp+0x1c],0x1
    9ffb:	cmp    DWORD PTR [rsp+0x1c],r14d
    a000:	jl     a3b0 <BZ2_decompress+0x8f0>
    a006:	test   r14d,r14d
    a009:	jle    c000 <BZ2_decompress+0x2540>
    a00f:	mov    esi,DWORD PTR [rsp+0x34]
    a013:	mov    DWORD PTR [rsp+0x48],ebp
    a017:	xor    r10d,r10d
    a01a:	lea    rdi,[rbx+0xb17c]
    a021:	lea    rcx,[rbx+0xab70]
    a028:	mov    DWORD PTR [rsp+0x44],r15d
    a02d:	lea    eax,[rsi-0x1]
    a030:	mov    DWORD PTR [rsp+0x1c],r14d
    a035:	mov    r15d,esi
    a038:	mov    r14,rdi
    a03b:	lea    rax,[rbx+rax*1+0x1]
    a040:	mov    DWORD PTR [rsp+0x4c],r12d
    a045:	mov    DWORD PTR [rsp+0x60],r13d
    a04a:	mov    r12,rax
    a04d:	mov    r13,rcx
    a050:	mov    QWORD PTR [rsp+0x38],rbx
    a055:	mov    rbx,r10
    a058:	nop    DWORD PTR [rax+rax*1+0x0]
    a060:	lea    rsi,[r13-0xab70]
    a067:	xor    r9d,r9d
    a06a:	mov    ebp,0x20
    a06f:	test   r15d,r15d
    a072:	jle    a094 <BZ2_decompress+0x5d4>
    a074:	nop    DWORD PTR [rax+0x0]
    a078:	movzx  eax,BYTE PTR [rsi+0xab70]
    a07f:	cmp    r9d,eax
    a082:	cmovl  r9d,eax
    a086:	cmp    ebp,eax
    a088:	cmovg  ebp,eax
    a08b:	add    rsi,0x1
    a08f:	cmp    r12,rsi
    a092:	jne    a078 <BZ2_decompress+0x5b8>
    a094:	sub    rsp,0x8
    a098:	mov    rdi,r14
    a09b:	mov    r8d,ebp
    a09e:	mov    rcx,r13
    a0a1:	push   r15
    a0a3:	lea    rdx,[r14+0x3060]
    a0aa:	lea    rsi,[r14+0x1830]
    a0b1:	add    r13,0x102
    a0b8:	add    r14,0x408
    a0bf:	add    r12,0x102
    a0c6:	call   c8b0 <BZ2_hbCreateDecodeTables>
    a0cb:	mov    rax,QWORD PTR [rsp+0x48]
    a0d0:	mov    DWORD PTR [rax+rbx*4+0xfa0c],ebp
    a0d7:	add    rbx,0x1
    a0db:	pop    rdi
    a0dc:	pop    r8
    a0de:	cmp    DWORD PTR [rsp+0x1c],ebx
    a0e2:	jg     a060 <BZ2_decompress+0x5a0>
    a0e8:	mov    r15d,DWORD PTR [rsp+0x44]
    a0ed:	mov    r14d,DWORD PTR [rsp+0x1c]
    a0f2:	mov    ebp,DWORD PTR [rsp+0x48]
    a0f6:	mov    r12d,DWORD PTR [rsp+0x4c]
    a0fb:	mov    r13d,DWORD PTR [rsp+0x60]
    a100:	mov    rbx,QWORD PTR [rsp+0x38]
    a105:	mov    eax,DWORD PTR [rbx+0xc78]
    a10b:	lea    rdx,[rbx+0x444]
    a112:	add    eax,0x1
    a115:	mov    DWORD PTR [rsp+0x4c],eax
    a119:	imul   eax,DWORD PTR [rbx+0x28],0x186a0
    a120:	mov    DWORD PTR [rsp+0x38],eax
    a124:	lea    rax,[rbx+0x44]
    a128:	nop    DWORD PTR [rax+rax*1+0x0]
    a130:	mov    DWORD PTR [rax],0x0
    a136:	add    rax,0x4
    a13a:	cmp    rdx,rax
    a13d:	jne    a130 <BZ2_decompress+0x670>
    a13f:	lea    r9,[rbx+0x1ec8]
    a146:	lea    r8,[rbx+0xfff]
    a14d:	mov    edi,0xff0
    a152:	lea    rsi,[rbx+0xfef]
    a159:	nop    DWORD PTR [rax+0x0]
    a160:	lea    ecx,[rdi+0xf]
    a163:	mov    rax,r8
    a166:	sub    ecx,r8d
    a169:	nop    DWORD PTR [rax+0x0]
    a170:	lea    edx,[rcx+rax*1]
    a173:	sub    rax,0x1
    a177:	mov    BYTE PTR [rax+0xe8d],dl
    a17d:	cmp    rsi,rax
    a180:	jne    a170 <BZ2_decompress+0x6b0>
    a182:	mov    DWORD PTR [r9],edi
    a185:	sub    edi,0x10
    a188:	sub    r9,0x4
    a18c:	sub    r8,0x10
    a190:	sub    rsi,0x10
    a194:	cmp    edi,0xef0
    a19a:	jne    a160 <BZ2_decompress+0x6a0>
    a19c:	mov    esi,DWORD PTR [rsp+0x18]
    a1a0:	test   esi,esi
    a1a2:	jle    c381 <BZ2_decompress+0x28c1>
    a1a8:	movzx  ecx,BYTE PTR [rbx+0x1ecc]
    a1af:	mov    DWORD PTR [rsp+0x44],0x31
    a1b7:	xor    r11d,r11d
    a1ba:	mov    r8d,0x100
    a1c0:	mov    DWORD PTR [rsp+0x48],0x0
    a1c8:	movzx  edx,cl
    a1cb:	mov    DWORD PTR [rsp+0x58],ecx
    a1cf:	mov    rax,rdx
    a1d2:	mov    ebp,DWORD PTR [rbx+rdx*4+0xfa0c]
    a1d9:	shl    rax,0x7
    a1dd:	add    rax,rdx
    a1e0:	mov    DWORD PTR [rsp+0x50],ebp
    a1e4:	shl    rax,0x3
    a1e8:	lea    rcx,[rbx+rax*1+0xb17c]
    a1f0:	mov    QWORD PTR [rsp+0x10],rcx
    a1f5:	lea    rcx,[rbx+rax*1+0xe1dc]
    a1fd:	lea    rax,[rbx+rax*1+0xc9ac]
    a205:	mov    QWORD PTR [rsp+0x28],rcx
    a20a:	mov    QWORD PTR [rsp+0x20],rax
    a20f:	nop
    a210:	mov    DWORD PTR [rbx+0x8],0x24
    a217:	mov    ecx,DWORD PTR [rbx+0x24]
    a21a:	jmp    a25e <BZ2_decompress+0x79e>
    a21c:	nop    DWORD PTR [rax+0x0]
    a220:	mov    rax,QWORD PTR [rbx]
    a223:	mov    esi,DWORD PTR [rax+0x8]
    a226:	test   esi,esi
    a228:	je     b7b8 <BZ2_decompress+0x1cf8>
    a22e:	mov    rdi,QWORD PTR [rax]
    a231:	mov    edx,DWORD PTR [rbx+0x20]
    a234:	add    ecx,0x8
    a237:	sub    esi,0x1
    a23a:	movzx  r9d,BYTE PTR [rdi]
    a23e:	shl    edx,0x8
    a241:	mov    DWORD PTR [rbx+0x24],ecx
    a244:	add    rdi,0x1
    a248:	or     edx,r9d
    a24b:	mov    DWORD PTR [rbx+0x20],edx
    a24e:	add    DWORD PTR [rax+0xc],0x1
    a252:	mov    QWORD PTR [rax],rdi
    a255:	mov    DWORD PTR [rax+0x8],esi
    a258:	je     ba20 <BZ2_decompress+0x1f60>
    a25e:	cmp    ebp,ecx
    a260:	jg     a220 <BZ2_decompress+0x760>
    a262:	mov    r12d,DWORD PTR [rbx+0x20]
    a266:	sub    ecx,ebp
    a268:	mov    eax,0x1
    a26d:	mov    edx,ecx
    a26f:	shr    r12d,cl
    a272:	mov    ecx,ebp
    a274:	mov    DWORD PTR [rbx+0x24],edx
    a277:	shl    eax,cl
    a279:	sub    eax,0x1
    a27c:	and    r12d,eax
    a27f:	jmp    9e5f <BZ2_decompress+0x39f>
    a284:	nop    DWORD PTR [rax+0x0]
    a288:	mov    r13d,DWORD PTR [rbx+0x20]
    a28c:	lea    ecx,[rdi-0x1]
    a28f:	add    r12d,r12d
    a292:	mov    DWORD PTR [rbx+0x24],ecx
    a295:	shr    r13d,cl
    a298:	and    r13d,0x1
    a29c:	or     r12d,r13d
    a29f:	cmp    ebp,0x14
    a2a2:	jg     ada5 <BZ2_decompress+0x12e5>
    a2a8:	mov    rcx,QWORD PTR [rsp+0x10]
    a2ad:	movsxd rax,ebp
    a2b0:	cmp    DWORD PTR [rcx+rax*4],r12d
    a2b4:	jge    a420 <BZ2_decompress+0x960>
    a2ba:	add    ebp,0x1
    a2bd:	mov    DWORD PTR [rbx+0x8],0x29
    a2c4:	mov    edi,DWORD PTR [rbx+0x24]
    a2c7:	jmp    a30e <BZ2_decompress+0x84e>
    a2c9:	nop    DWORD PTR [rax+0x0]
    a2d0:	mov    rax,QWORD PTR [rbx]
    a2d3:	mov    ecx,DWORD PTR [rax+0x8]
    a2d6:	test   ecx,ecx
    a2d8:	je     b7b8 <BZ2_decompress+0x1cf8>
    a2de:	mov    rsi,QWORD PTR [rax]
    a2e1:	mov    edx,DWORD PTR [rbx+0x20]
    a2e4:	add    edi,0x8
    a2e7:	sub    ecx,0x1
    a2ea:	movzx  r9d,BYTE PTR [rsi]
    a2ee:	shl    edx,0x8
    a2f1:	mov    DWORD PTR [rbx+0x24],edi
    a2f4:	add    rsi,0x1
    a2f8:	or     edx,r9d
    a2fb:	mov    DWORD PTR [rbx+0x20],edx
    a2fe:	add    DWORD PTR [rax+0xc],0x1
    a302:	mov    QWORD PTR [rax],rsi
    a305:	mov    DWORD PTR [rax+0x8],ecx
    a308:	je     b9f0 <BZ2_decompress+0x1f30>
    a30e:	test   edi,edi
    a310:	jle    a2d0 <BZ2_decompress+0x810>
    a312:	jmp    a288 <BZ2_decompress+0x7c8>
    a317:	nop    WORD PTR [rax+rax*1+0x0]
    a320:	mov    r13d,DWORD PTR [rbx+0x20]
    a324:	lea    ecx,[rdi-0x1]
    a327:	add    r12d,r12d
    a32a:	mov    DWORD PTR [rbx+0x24],ecx
    a32d:	shr    r13d,cl
    a330:	and    r13d,0x1
    a334:	or     r12d,r13d
    a337:	cmp    ebp,0x14
    a33a:	jg     ada5 <BZ2_decompress+0x12e5>
    a340:	mov    rcx,QWORD PTR [rsp+0x10]
    a345:	movsxd rax,ebp
    a348:	cmp    DWORD PTR [rcx+rax*4],r12d
    a34c:	jge    bbc3 <BZ2_decompress+0x2103>
    a352:	add    ebp,0x1
    a355:	mov    DWORD PTR [rbx+0x8],0x27
    a35c:	mov    edi,DWORD PTR [rbx+0x24]
    a35f:	jmp    a3a6 <BZ2_decompress+0x8e6>
    a361:	nop    DWORD PTR [rax+0x0]
    a368:	mov    rax,QWORD PTR [rbx]
    a36b:	mov    ecx,DWORD PTR [rax+0x8]
    a36e:	test   ecx,ecx
    a370:	je     b7b8 <BZ2_decompress+0x1cf8>
    a376:	mov    rsi,QWORD PTR [rax]
    a379:	mov    edx,DWORD PTR [rbx+0x20]
    a37c:	add    edi,0x8
    a37f:	sub    ecx,0x1
    a382:	movzx  r9d,BYTE PTR [rsi]
    a386:	shl    edx,0x8
    a389:	mov    DWORD PTR [rbx+0x24],edi
    a38c:	add    rsi,0x1
    a390:	or     edx,r9d
    a393:	mov    DWORD PTR [rbx+0x20],edx
    a396:	add    DWORD PTR [rax+0xc],0x1
    a39a:	mov    QWORD PTR [rax],rsi
    a39d:	mov    DWORD PTR [rax+0x8],ecx
    a3a0:	je     ba00 <BZ2_decompress+0x1f40>
    a3a6:	test   edi,edi
    a3a8:	jle    a368 <BZ2_decompress+0x8a8>
    a3aa:	jmp    a320 <BZ2_decompress+0x860>
    a3af:	nop
    a3b0:	mov    DWORD PTR [rbx+0x8],0x21
    a3b7:	mov    edi,DWORD PTR [rbx+0x24]
    a3ba:	jmp    a3fe <BZ2_decompress+0x93e>
    a3bc:	nop    DWORD PTR [rax+0x0]
    a3c0:	mov    rax,QWORD PTR [rbx]
    a3c3:	mov    ecx,DWORD PTR [rax+0x8]
    a3c6:	test   ecx,ecx
    a3c8:	je     b7b8 <BZ2_decompress+0x1cf8>
    a3ce:	mov    rsi,QWORD PTR [rax]
    a3d1:	mov    edx,DWORD PTR [rbx+0x20]
    a3d4:	add    edi,0x8
    a3d7:	sub    ecx,0x1
    a3da:	movzx  r9d,BYTE PTR [rsi]
    a3de:	shl    edx,0x8
    a3e1:	mov    DWORD PTR [rbx+0x24],edi
    a3e4:	add    rsi,0x1
    a3e8:	or     edx,r9d
    a3eb:	mov    DWORD PTR [rbx+0x20],edx
    a3ee:	add    DWORD PTR [rax+0xc],0x1
    a3f2:	mov    QWORD PTR [rax],rsi
    a3f5:	mov    DWORD PTR [rax+0x8],ecx
    a3f8:	je     ba30 <BZ2_decompress+0x1f70>
    a3fe:	cmp    edi,0x4
    a401:	jle    a3c0 <BZ2_decompress+0x900>
    a403:	mov    eax,DWORD PTR [rbx+0x20]
    a406:	lea    ecx,[rdi-0x5]
    a409:	xor    r8d,r8d
    a40c:	mov    DWORD PTR [rbx+0x24],ecx
    a40f:	shr    eax,cl
    a411:	and    eax,0x1f
    a414:	mov    DWORD PTR [rsp+0xc],eax
    a418:	jmp    9feb <BZ2_decompress+0x52b>
    a41d:	nop    DWORD PTR [rax]
    a420:	mov    rsi,QWORD PTR [rsp+0x20]
    a425:	mov    ecx,r12d
    a428:	sub    ecx,DWORD PTR [rsi+rax*4]
    a42b:	movsxd rax,ecx
    a42e:	cmp    eax,0x101
    a433:	ja     ada5 <BZ2_decompress+0x12e5>
    a439:	mov    rcx,QWORD PTR [rsp+0x28]
    a43e:	mov    eax,DWORD PTR [rcx+rax*4]
    a441:	mov    DWORD PTR [rsp+0x30],eax
    a445:	mov    eax,DWORD PTR [rsp+0x30]
    a449:	cmp    DWORD PTR [rsp+0x4c],eax
    a44d:	je     bc72 <BZ2_decompress+0x21b2>
    a453:	cmp    eax,0x1
    a456:	jbe    be30 <BZ2_decompress+0x2370>
    a45c:	cmp    DWORD PTR [rsp+0x38],r11d
    a461:	jle    ada5 <BZ2_decompress+0x12e5>
    a467:	mov    edi,DWORD PTR [rsp+0x30]
    a46b:	lea    eax,[rdi-0x1]
    a46e:	mov    edx,eax
    a470:	cmp    eax,0xf
    a473:	ja     be4a <BZ2_decompress+0x238a>
    a479:	movsxd rsi,DWORD PTR [rbx+0x1e8c]
    a480:	lea    ecx,[rsi+rax*1]
    a483:	movzx  ecx,BYTE PTR [rbx+rcx*1+0xe8c]
    a48b:	mov    BYTE PTR [rsp+0x68],cl
    a48f:	cmp    eax,0x3
    a492:	jbe    a50f <BZ2_decompress+0xa4f>
    a494:	lea    eax,[rdi+rsi*1-0x2]
    a498:	mov    edi,0x1
    a49d:	sub    edi,esi
    a49f:	movsxd r9,eax
    a4a2:	lea    edx,[rax+0x1]
    a4a5:	movzx  ecx,BYTE PTR [rbx+r9*1+0xe8c]
    a4ae:	movsxd rdx,edx
    a4b1:	mov    BYTE PTR [rbx+rdx*1+0xe8c],cl
    a4b8:	lea    ecx,[rax-0x1]
    a4bb:	movsxd rcx,ecx
    a4be:	movzx  edx,BYTE PTR [rbx+rcx*1+0xe8c]
    a4c6:	mov    BYTE PTR [rbx+r9*1+0xe8c],dl
    a4ce:	lea    edx,[rax-0x2]
    a4d1:	movsxd rdx,edx
    a4d4:	movzx  r9d,BYTE PTR [rbx+rdx*1+0xe8c]
    a4dd:	mov    BYTE PTR [rbx+rcx*1+0xe8c],r9b
    a4e5:	lea    ecx,[rax-0x3]
    a4e8:	sub    eax,0x4
    a4eb:	movsxd rcx,ecx
    a4ee:	movzx  ecx,BYTE PTR [rbx+rcx*1+0xe8c]
    a4f6:	mov    BYTE PTR [rbx+rdx*1+0xe8c],cl
    a4fd:	lea    edx,[rdi+rax*1]
    a500:	cmp    edx,0x3
    a503:	ja     a49f <BZ2_decompress+0x9df>
    a505:	mov    eax,DWORD PTR [rsp+0x30]
    a509:	lea    edx,[rax-0x5]
    a50c:	and    edx,0x3
    a50f:	lea    eax,[rdx+rsi*1]
    a512:	test   edx,edx
    a514:	je     a531 <BZ2_decompress+0xa71>
    a516:	lea    ecx,[rax-0x1]
    a519:	mov    rdx,rcx
    a51c:	movzx  ecx,BYTE PTR [rbx+rcx*1+0xe8c]
    a524:	mov    BYTE PTR [rbx+rax*1+0xe8c],cl
    a52b:	mov    eax,edx
    a52d:	cmp    esi,eax
    a52f:	jne    a516 <BZ2_decompress+0xa56>
    a531:	movzx  eax,BYTE PTR [rsp+0x68]
    a536:	mov    BYTE PTR [rbx+rsi*1+0xe8c],al
    a53d:	movzx  eax,BYTE PTR [rsp+0x68]
    a542:	movzx  edx,BYTE PTR [rbx+rax*1+0xd8c]
    a54a:	add    DWORD PTR [rbx+rdx*4+0x44],0x1
    a54f:	cmp    BYTE PTR [rbx+0x2c],0x0
    a553:	mov    rax,rdx
    a556:	movsxd rdx,r11d
    a559:	je     bfd4 <BZ2_decompress+0x2514>
    a55f:	mov    rcx,QWORD PTR [rbx+0xc58]
    a566:	mov    WORD PTR [rcx+rdx*2],ax
    a56a:	mov    eax,DWORD PTR [rsp+0x44]
    a56e:	add    r11d,0x1
    a572:	test   eax,eax
    a574:	je     bf68 <BZ2_decompress+0x24a8>
    a57a:	sub    eax,0x1
    a57d:	mov    ebp,DWORD PTR [rsp+0x50]
    a581:	mov    DWORD PTR [rsp+0x44],eax
    a585:	mov    DWORD PTR [rsp+0x50],ebp
    a589:	nop    DWORD PTR [rax+0x0]
    a590:	mov    DWORD PTR [rbx+0x8],0x28
    a597:	mov    ecx,DWORD PTR [rbx+0x24]
    a59a:	jmp    a5de <BZ2_decompress+0xb1e>
    a59c:	nop    DWORD PTR [rax+0x0]
    a5a0:	mov    rax,QWORD PTR [rbx]
    a5a3:	mov    esi,DWORD PTR [rax+0x8]
    a5a6:	test   esi,esi
    a5a8:	je     b7b8 <BZ2_decompress+0x1cf8>
    a5ae:	mov    rdi,QWORD PTR [rax]
    a5b1:	mov    edx,DWORD PTR [rbx+0x20]
    a5b4:	add    ecx,0x8
    a5b7:	sub    esi,0x1
    a5ba:	movzx  r9d,BYTE PTR [rdi]
    a5be:	shl    edx,0x8
    a5c1:	mov    DWORD PTR [rbx+0x24],ecx
    a5c4:	add    rdi,0x1
    a5c8:	or     edx,r9d
    a5cb:	mov    DWORD PTR [rbx+0x20],edx
    a5ce:	add    DWORD PTR [rax+0xc],0x1
    a5d2:	mov    QWORD PTR [rax],rdi
    a5d5:	mov    DWORD PTR [rax+0x8],esi
    a5d8:	je     ba39 <BZ2_decompress+0x1f79>
    a5de:	cmp    ebp,ecx
    a5e0:	jg     a5a0 <BZ2_decompress+0xae0>
    a5e2:	mov    r12d,DWORD PTR [rbx+0x20]
    a5e6:	sub    ecx,ebp
    a5e8:	mov    eax,0x1
    a5ed:	mov    edx,ecx
    a5ef:	shr    r12d,cl
    a5f2:	mov    ecx,ebp
    a5f4:	mov    DWORD PTR [rbx+0x24],edx
    a5f7:	shl    eax,cl
    a5f9:	sub    eax,0x1
    a5fc:	and    r12d,eax
    a5ff:	jmp    a29f <BZ2_decompress+0x7df>
    a604:	mov    eax,DWORD PTR [rsp+0x54]
    a608:	lea    edx,[rax+rax*1]
    a60b:	mov    ecx,DWORD PTR [rsp+0x30]
    a60f:	test   ecx,ecx
    a611:	jne    bfec <BZ2_decompress+0x252c>
    a617:	mov    ecx,DWORD PTR [rsp+0x54]
    a61b:	add    DWORD PTR [rsp+0x40],ecx
    a61f:	mov    eax,DWORD PTR [rsp+0x44]
    a623:	test   eax,eax
    a625:	jne    bfe3 <BZ2_decompress+0x2523>
    a62b:	add    DWORD PTR [rsp+0x48],0x1
    a630:	movsxd rax,DWORD PTR [rsp+0x48]
    a635:	cmp    DWORD PTR [rsp+0x18],eax
    a639:	jle    c373 <BZ2_decompress+0x28b3>
    a63f:	movzx  ecx,BYTE PTR [rbx+rax*1+0x1ecc]
    a647:	mov    DWORD PTR [rsp+0x44],0x32
    a64f:	mov    DWORD PTR [rsp+0x58],ecx
    a653:	movzx  ecx,cl
    a656:	imul   rax,rcx,0x408
    a65d:	mov    ebp,DWORD PTR [rbx+rcx*4+0xfa0c]
    a664:	lea    rcx,[rbx+rax*1+0xb17c]
    a66c:	mov    QWORD PTR [rsp+0x10],rcx
    a671:	lea    rcx,[rbx+rax*1+0xe1dc]
    a679:	lea    rax,[rbx+rax*1+0xc9ac]
    a681:	mov    QWORD PTR [rsp+0x28],rcx
    a686:	mov    QWORD PTR [rsp+0x20],rax
    a68b:	sub    DWORD PTR [rsp+0x44],0x1
    a690:	mov    DWORD PTR [rsp+0x50],ebp
    a694:	mov    DWORD PTR [rsp+0x54],edx
    a698:	nop    DWORD PTR [rax+rax*1+0x0]
    a6a0:	mov    DWORD PTR [rbx+0x8],0x26
    a6a7:	mov    ecx,DWORD PTR [rbx+0x24]
    a6aa:	jmp    a6ee <BZ2_decompress+0xc2e>
    a6ac:	nop    DWORD PTR [rax+0x0]
    a6b0:	mov    rax,QWORD PTR [rbx]
    a6b3:	mov    esi,DWORD PTR [rax+0x8]
    a6b6:	test   esi,esi
    a6b8:	je     b7b8 <BZ2_decompress+0x1cf8>
    a6be:	mov    rdi,QWORD PTR [rax]
    a6c1:	mov    edx,DWORD PTR [rbx+0x20]
    a6c4:	add    ecx,0x8
    a6c7:	sub    esi,0x1
    a6ca:	movzx  r9d,BYTE PTR [rdi]
    a6ce:	shl    edx,0x8
    a6d1:	mov    DWORD PTR [rbx+0x24],ecx
    a6d4:	add    rdi,0x1
    a6d8:	or     edx,r9d
    a6db:	mov    DWORD PTR [rbx+0x20],edx
    a6de:	add    DWORD PTR [rax+0xc],0x1
    a6e2:	mov    QWORD PTR [rax],rdi
    a6e5:	mov    DWORD PTR [rax+0x8],esi
    a6e8:	je     ba42 <BZ2_decompress+0x1f82>
    a6ee:	cmp    ebp,ecx
    a6f0:	jg     a6b0 <BZ2_decompress+0xbf0>
    a6f2:	mov    r12d,DWORD PTR [rbx+0x20]
    a6f6:	sub    ecx,ebp
    a6f8:	mov    eax,0x1
    a6fd:	mov    edx,ecx
    a6ff:	shr    r12d,cl
    a702:	mov    ecx,ebp
    a704:	mov    DWORD PTR [rbx+0x24],edx
    a707:	shl    eax,cl
    a709:	sub    eax,0x1
    a70c:	and    r12d,eax
    a70f:	jmp    a337 <BZ2_decompress+0x877>
    a714:	nop    DWORD PTR [rax+0x0]
    a718:	mov    ecx,DWORD PTR [rbx+0x24]
    a71b:	mov    DWORD PTR [rbx+0x8],0x17
    a722:	jmp    a766 <BZ2_decompress+0xca6>
    a724:	nop    DWORD PTR [rax+0x0]
    a728:	mov    rax,QWORD PTR [rbx]
    a72b:	mov    esi,DWORD PTR [rax+0x8]
    a72e:	test   esi,esi
    a730:	je     b7b8 <BZ2_decompress+0x1cf8>
    a736:	mov    rdi,QWORD PTR [rax]
    a739:	mov    edx,DWORD PTR [rbx+0x20]
    a73c:	add    ecx,0x8
    a73f:	sub    esi,0x1
    a742:	movzx  r9d,BYTE PTR [rdi]
    a746:	shl    edx,0x8
    a749:	mov    DWORD PTR [rbx+0x24],ecx
    a74c:	add    rdi,0x1
    a750:	or     edx,r9d
    a753:	mov    DWORD PTR [rbx+0x20],edx
    a756:	add    DWORD PTR [rax+0xc],0x1
    a75a:	mov    QWORD PTR [rax],rdi
    a75d:	mov    DWORD PTR [rax+0x8],esi
    a760:	je     b850 <BZ2_decompress+0x1d90>
    a766:	cmp    ecx,0x7
    a769:	jle    a728 <BZ2_decompress+0xc68>
    a76b:	mov    eax,DWORD PTR [rbx+0x20]
    a76e:	sub    ecx,0x8
    a771:	mov    DWORD PTR [rbx+0x24],ecx
    a774:	shr    eax,cl
    a776:	movzx  edx,al
    a779:	mov    eax,DWORD PTR [rbx+0xc68]
    a77f:	shl    eax,0x8
    a782:	or     eax,edx
    a784:	mov    DWORD PTR [rbx+0xc68],eax
    a78a:	mov    DWORD PTR [rbx+0x8],0x18
    a791:	jmp    a7d6 <BZ2_decompress+0xd16>
    a793:	nop    DWORD PTR [rax+rax*1+0x0]
    a798:	mov    rax,QWORD PTR [rbx]
    a79b:	mov    esi,DWORD PTR [rax+0x8]
    a79e:	test   esi,esi
    a7a0:	je     b7b8 <BZ2_decompress+0x1cf8>
    a7a6:	mov    rdi,QWORD PTR [rax]
    a7a9:	mov    edx,DWORD PTR [rbx+0x20]
    a7ac:	add    ecx,0x8
    a7af:	sub    esi,0x1
    a7b2:	movzx  r9d,BYTE PTR [rdi]
    a7b6:	shl    edx,0x8
    a7b9:	mov    DWORD PTR [rbx+0x24],ecx
    a7bc:	add    rdi,0x1
    a7c0:	or     edx,r9d
    a7c3:	mov    DWORD PTR [rbx+0x20],edx
    a7c6:	add    DWORD PTR [rax+0xc],0x1
    a7ca:	mov    QWORD PTR [rax],rdi
    a7cd:	mov    DWORD PTR [rax+0x8],esi
    a7d0:	je     b810 <BZ2_decompress+0x1d50>
    a7d6:	test   ecx,ecx
    a7d8:	jle    a798 <BZ2_decompress+0xcd8>
    a7da:	mov    eax,DWORD PTR [rbx+0x20]
    a7dd:	sub    ecx,0x1
    a7e0:	mov    DWORD PTR [rbx+0x38],0x0
    a7e7:	mov    DWORD PTR [rbx+0x24],ecx
    a7ea:	shr    eax,cl
    a7ec:	and    eax,0x1
    a7ef:	mov    BYTE PTR [rbx+0x14],al
    a7f2:	mov    DWORD PTR [rbx+0x8],0x19
    a7f9:	jmp    a83e <BZ2_decompress+0xd7e>
    a7fb:	nop    DWORD PTR [rax+rax*1+0x0]
    a800:	mov    rax,QWORD PTR [rbx]
    a803:	mov    esi,DWORD PTR [rax+0x8]
    a806:	test   esi,esi
    a808:	je     b7b8 <BZ2_decompress+0x1cf8>
    a80e:	mov    rdi,QWORD PTR [rax]
    a811:	mov    edx,DWORD PTR [rbx+0x20]
    a814:	add    ecx,0x8
    a817:	sub    esi,0x1
    a81a:	movzx  r9d,BYTE PTR [rdi]
    a81e:	shl    edx,0x8
    a821:	mov    DWORD PTR [rbx+0x24],ecx
    a824:	add    rdi,0x1
    a828:	or     edx,r9d
    a82b:	mov    DWORD PTR [rbx+0x20],edx
    a82e:	add    DWORD PTR [rax+0xc],0x1
    a832:	mov    QWORD PTR [rax],rdi
    a835:	mov    DWORD PTR [rax+0x8],esi
    a838:	je     b820 <BZ2_decompress+0x1d60>
    a83e:	cmp    ecx,0x7
    a841:	jle    a800 <BZ2_decompress+0xd40>
    a843:	mov    eax,DWORD PTR [rbx+0x20]
    a846:	sub    ecx,0x8
    a849:	mov    DWORD PTR [rbx+0x24],ecx
    a84c:	shr    eax,cl
    a84e:	movzx  edx,al
    a851:	mov    eax,DWORD PTR [rbx+0x38]
    a854:	shl    eax,0x8
    a857:	or     eax,edx
    a859:	mov    DWORD PTR [rbx+0x38],eax
    a85c:	mov    DWORD PTR [rbx+0x8],0x1a
    a863:	jmp    a8a6 <BZ2_decompress+0xde6>
    a865:	nop    DWORD PTR [rax]
    a868:	mov    rax,QWORD PTR [rbx]
    a86b:	mov    esi,DWORD PTR [rax+0x8]
    a86e:	test   esi,esi
    a870:	je     b7b8 <BZ2_decompress+0x1cf8>
    a876:	mov    rdi,QWORD PTR [rax]
    a879:	mov    edx,DWORD PTR [rbx+0x20]
    a87c:	add    ecx,0x8
    a87f:	sub    esi,0x1
    a882:	movzx  r9d,BYTE PTR [rdi]
    a886:	shl    edx,0x8
    a889:	mov    DWORD PTR [rbx+0x24],ecx
    a88c:	add    rdi,0x1
    a890:	or     edx,r9d
    a893:	mov    DWORD PTR [rbx+0x20],edx
    a896:	add    DWORD PTR [rax+0xc],0x1
    a89a:	mov    QWORD PTR [rax],rdi
    a89d:	mov    DWORD PTR [rax+0x8],esi
    a8a0:	je     b830 <BZ2_decompress+0x1d70>
    a8a6:	cmp    ecx,0x7
    a8a9:	jle    a868 <BZ2_decompress+0xda8>
    a8ab:	mov    eax,DWORD PTR [rbx+0x20]
    a8ae:	sub    ecx,0x8
    a8b1:	mov    DWORD PTR [rbx+0x24],ecx
    a8b4:	shr    eax,cl
    a8b6:	movzx  edx,al
    a8b9:	mov    eax,DWORD PTR [rbx+0x38]
    a8bc:	shl    eax,0x8
    a8bf:	or     eax,edx
    a8c1:	mov    DWORD PTR [rbx+0x38],eax
    a8c4:	mov    DWORD PTR [rbx+0x8],0x1b
    a8cb:	jmp    a90e <BZ2_decompress+0xe4e>
    a8cd:	nop    DWORD PTR [rax]
    a8d0:	mov    rax,QWORD PTR [rbx]
    a8d3:	mov    esi,DWORD PTR [rax+0x8]
    a8d6:	test   esi,esi
    a8d8:	je     b7b8 <BZ2_decompress+0x1cf8>
    a8de:	mov    rdi,QWORD PTR [rax]
    a8e1:	mov    edx,DWORD PTR [rbx+0x20]
    a8e4:	add    ecx,0x8
    a8e7:	sub    esi,0x1
    a8ea:	movzx  r9d,BYTE PTR [rdi]
    a8ee:	shl    edx,0x8
    a8f1:	mov    DWORD PTR [rbx+0x24],ecx
    a8f4:	add    rdi,0x1
    a8f8:	or     edx,r9d
    a8fb:	mov    DWORD PTR [rbx+0x20],edx
    a8fe:	add    DWORD PTR [rax+0xc],0x1
    a902:	mov    QWORD PTR [rax],rdi
    a905:	mov    DWORD PTR [rax+0x8],esi
    a908:	je     b840 <BZ2_decompress+0x1d80>
    a90e:	cmp    ecx,0x7
    a911:	jle    a8d0 <BZ2_decompress+0xe10>
    a913:	mov    eax,DWORD PTR [rbx+0x20]
    a916:	sub    ecx,0x8
    a919:	mov    DWORD PTR [rbx+0x24],ecx
    a91c:	shr    eax,cl
    a91e:	movzx  edx,al
    a921:	mov    eax,DWORD PTR [rbx+0x38]
    a924:	shl    eax,0x8
    a927:	or     eax,edx
    a929:	mov    DWORD PTR [rbx+0x38],eax
    a92c:	js     ada5 <BZ2_decompress+0x12e5>
    a932:	imul   edx,DWORD PTR [rbx+0x28],0x186a0
    a939:	add    edx,0xa
    a93c:	cmp    eax,edx
    a93e:	jg     ada5 <BZ2_decompress+0x12e5>
    a944:	xor    r8d,r8d
    a947:	movsxd r9,r8d
    a94a:	mov    DWORD PTR [rbx+0x8],0x1c
    a951:	mov    r8d,r9d
    a954:	jmp    a99e <BZ2_decompress+0xede>
    a956:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a960:	mov    rax,QWORD PTR [rbx]
    a963:	mov    esi,DWORD PTR [rax+0x8]
    a966:	test   esi,esi
    a968:	je     b7b8 <BZ2_decompress+0x1cf8>
    a96e:	mov    rdi,QWORD PTR [rax]
    a971:	mov    edx,DWORD PTR [rbx+0x20]
    a974:	add    ecx,0x8
    a977:	sub    esi,0x1
    a97a:	movzx  r10d,BYTE PTR [rdi]
    a97e:	shl    edx,0x8
    a981:	mov    DWORD PTR [rbx+0x24],ecx
    a984:	add    rdi,0x1
    a988:	or     edx,r10d
    a98b:	mov    DWORD PTR [rbx+0x20],edx
    a98e:	add    DWORD PTR [rax+0xc],0x1
    a992:	mov    QWORD PTR [rax],rdi
    a995:	mov    DWORD PTR [rax+0x8],esi
    a998:	je     b7c0 <BZ2_decompress+0x1d00>
    a99e:	test   ecx,ecx
    a9a0:	jle    a960 <BZ2_decompress+0xea0>
    a9a2:	mov    eax,DWORD PTR [rbx+0x20]
    a9a5:	sub    ecx,0x1
    a9a8:	mov    DWORD PTR [rbx+0x24],ecx
    a9ab:	shr    eax,cl
    a9ad:	and    eax,0x1
    a9b0:	mov    BYTE PTR [rbx+r9*1+0xd7c],al
    a9b8:	add    r9,0x1
    a9bc:	cmp    r9d,0xf
    a9c0:	jle    a94a <BZ2_decompress+0xe8a>
    a9c2:	lea    rax,[rbx+0xc7c]
    a9c9:	lea    rdx,[rbx+0xd7c]
    a9d0:	mov    BYTE PTR [rax],0x0
    a9d3:	add    rax,0x1
    a9d7:	cmp    rdx,rax
    a9da:	jne    a9d0 <BZ2_decompress+0xf10>
    a9dc:	xor    r8d,r8d
    a9df:	movsxd rax,r8d
    a9e2:	cmp    BYTE PTR [rbx+rax*1+0xd7c],0x0
    a9ea:	je     aa78 <BZ2_decompress+0xfb8>
    a9f0:	xor    r15d,r15d
    a9f3:	nop    DWORD PTR [rax+rax*1+0x0]
    a9f8:	mov    r10d,r8d
    a9fb:	mov    edi,DWORD PTR [rbx+0x24]
    a9fe:	shl    r10d,0x4
    aa02:	mov    DWORD PTR [rbx+0x8],0x1d
    aa09:	jmp    aa4e <BZ2_decompress+0xf8e>
    aa0b:	nop    DWORD PTR [rax+rax*1+0x0]
    aa10:	mov    rax,QWORD PTR [rbx]
    aa13:	mov    ecx,DWORD PTR [rax+0x8]
    aa16:	test   ecx,ecx
    aa18:	je     b7b8 <BZ2_decompress+0x1cf8>
    aa1e:	mov    rsi,QWORD PTR [rax]
    aa21:	mov    edx,DWORD PTR [rbx+0x20]
    aa24:	add    edi,0x8
    aa27:	sub    ecx,0x1
    aa2a:	movzx  r9d,BYTE PTR [rsi]
    aa2e:	shl    edx,0x8
    aa31:	mov    DWORD PTR [rbx+0x24],edi
    aa34:	add    rsi,0x1
    aa38:	or     edx,r9d
    aa3b:	mov    DWORD PTR [rbx+0x20],edx
    aa3e:	add    DWORD PTR [rax+0xc],0x1
    aa42:	mov    QWORD PTR [rax],rsi
    aa45:	mov    DWORD PTR [rax+0x8],ecx
    aa48:	je     b8d0 <BZ2_decompress+0x1e10>
    aa4e:	test   edi,edi
    aa50:	jle    aa10 <BZ2_decompress+0xf50>
    aa52:	mov    eax,DWORD PTR [rbx+0x20]
    aa55:	sub    edi,0x1
    aa58:	mov    DWORD PTR [rbx+0x24],edi
    aa5b:	bt     eax,edi
    aa5e:	jae    aa6e <BZ2_decompress+0xfae>
    aa60:	lea    eax,[r15+r10*1]
    aa64:	cdqe   
    aa66:	mov    BYTE PTR [rbx+rax*1+0xc7c],0x1
    aa6e:	add    r15d,0x1
    aa72:	cmp    r15d,0xf
    aa76:	jle    aa02 <BZ2_decompress+0xf42>
    aa78:	add    r8d,0x1
    aa7c:	cmp    r8d,0xf
    aa80:	jle    a9df <BZ2_decompress+0xf1f>
    aa86:	mov    DWORD PTR [rbx+0xc78],0x0
    aa90:	xor    eax,eax
    aa92:	xor    edx,edx
    aa94:	nop    DWORD PTR [rax+0x0]
    aa98:	cmp    BYTE PTR [rbx+rax*1+0xc7c],0x0
    aaa0:	je     aab5 <BZ2_decompress+0xff5>
    aaa2:	movsxd rcx,edx
    aaa5:	add    edx,0x1
    aaa8:	mov    BYTE PTR [rbx+rcx*1+0xd8c],al
    aaaf:	mov    DWORD PTR [rbx+0xc78],edx
    aab5:	add    rax,0x1
    aab9:	cmp    rax,0x100
    aabf:	jne    aa98 <BZ2_decompress+0xfd8>
    aac1:	test   edx,edx
    aac3:	je     ada5 <BZ2_decompress+0x12e5>
    aac9:	lea    eax,[rdx+0x2]
    aacc:	mov    DWORD PTR [rsp+0x34],eax
    aad0:	mov    DWORD PTR [rbx+0x8],0x1e
    aad7:	mov    ecx,DWORD PTR [rbx+0x24]
    aada:	jmp    ab1e <BZ2_decompress+0x105e>
    aadc:	nop    DWORD PTR [rax+0x0]
    aae0:	mov    rax,QWORD PTR [rbx]
    aae3:	mov    esi,DWORD PTR [rax+0x8]
    aae6:	test   esi,esi
    aae8:	je     b7b8 <BZ2_decompress+0x1cf8>
    aaee:	mov    rdi,QWORD PTR [rax]
    aaf1:	mov    edx,DWORD PTR [rbx+0x20]
    aaf4:	add    ecx,0x8
    aaf7:	sub    esi,0x1
    aafa:	movzx  r9d,BYTE PTR [rdi]
    aafe:	shl    edx,0x8
    ab01:	mov    DWORD PTR [rbx+0x24],ecx
    ab04:	add    rdi,0x1
    ab08:	or     edx,r9d
    ab0b:	mov    DWORD PTR [rbx+0x20],edx
    ab0e:	add    DWORD PTR [rax+0xc],0x1
    ab12:	mov    QWORD PTR [rax],rdi
    ab15:	mov    DWORD PTR [rax+0x8],esi
    ab18:	je     ba4b <BZ2_decompress+0x1f8b>
    ab1e:	cmp    ecx,0x2
    ab21:	jle    aae0 <BZ2_decompress+0x1020>
    ab23:	mov    r14d,DWORD PTR [rbx+0x20]
    ab27:	sub    ecx,0x3
    ab2a:	mov    DWORD PTR [rbx+0x24],ecx
    ab2d:	shr    r14d,cl
    ab30:	and    r14d,0x7
    ab34:	lea    eax,[r14-0x2]
    ab38:	cmp    eax,0x4
    ab3b:	jbe    aec3 <BZ2_decompress+0x1403>
    ab41:	jmp    ada5 <BZ2_decompress+0x12e5>
    ab46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ab50:	mov    ecx,DWORD PTR [rbx+0x24]
    ab53:	mov    DWORD PTR [rbx+0x8],0x14
    ab5a:	jmp    ab9e <BZ2_decompress+0x10de>
    ab5c:	nop    DWORD PTR [rax+0x0]
    ab60:	mov    rax,QWORD PTR [rbx]
    ab63:	mov    esi,DWORD PTR [rax+0x8]
    ab66:	test   esi,esi
    ab68:	je     b7b8 <BZ2_decompress+0x1cf8>
    ab6e:	mov    rdi,QWORD PTR [rax]
    ab71:	mov    edx,DWORD PTR [rbx+0x20]
    ab74:	add    ecx,0x8
    ab77:	sub    esi,0x1
    ab7a:	movzx  r9d,BYTE PTR [rdi]
    ab7e:	shl    edx,0x8
    ab81:	mov    DWORD PTR [rbx+0x24],ecx
    ab84:	add    rdi,0x1
    ab88:	or     edx,r9d
    ab8b:	mov    DWORD PTR [rbx+0x20],edx
    ab8e:	add    DWORD PTR [rax+0xc],0x1
    ab92:	mov    QWORD PTR [rax],rdi
    ab95:	mov    DWORD PTR [rax+0x8],esi
    ab98:	je     b8b0 <BZ2_decompress+0x1df0>
    ab9e:	cmp    ecx,0x7
    aba1:	jle    ab60 <BZ2_decompress+0x10a0>
    aba3:	mov    eax,DWORD PTR [rbx+0x20]
    aba6:	sub    ecx,0x8
    aba9:	mov    DWORD PTR [rbx+0x24],ecx
    abac:	shr    eax,cl
    abae:	movzx  edx,al
    abb1:	mov    eax,DWORD PTR [rbx+0xc68]
    abb7:	shl    eax,0x8
    abba:	or     eax,edx
    abbc:	mov    DWORD PTR [rbx+0xc68],eax
    abc2:	jmp    b043 <BZ2_decompress+0x1583>
    abc7:	nop    WORD PTR [rax+rax*1+0x0]
    abd0:	mov    ecx,DWORD PTR [rbx+0x24]
    abd3:	mov    DWORD PTR [rbx+0x8],0x16
    abda:	jmp    ac1e <BZ2_decompress+0x115e>
    abdc:	nop    DWORD PTR [rax+0x0]
    abe0:	mov    rax,QWORD PTR [rbx]
    abe3:	mov    esi,DWORD PTR [rax+0x8]
    abe6:	test   esi,esi
    abe8:	je     b7b8 <BZ2_decompress+0x1cf8>
    abee:	mov    rdi,QWORD PTR [rax]
    abf1:	mov    edx,DWORD PTR [rbx+0x20]
    abf4:	add    ecx,0x8
    abf7:	sub    esi,0x1
    abfa:	movzx  r9d,BYTE PTR [rdi]
    abfe:	shl    edx,0x8
    ac01:	mov    DWORD PTR [rbx+0x24],ecx
    ac04:	add    rdi,0x1
    ac08:	or     edx,r9d
    ac0b:	mov    DWORD PTR [rbx+0x20],edx
    ac0e:	add    DWORD PTR [rax+0xc],0x1
    ac12:	mov    QWORD PTR [rax],rdi
    ac15:	mov    DWORD PTR [rax+0x8],esi
    ac18:	je     b870 <BZ2_decompress+0x1db0>
    ac1e:	cmp    ecx,0x7
    ac21:	jle    abe0 <BZ2_decompress+0x1120>
    ac23:	mov    eax,DWORD PTR [rbx+0x20]
    ac26:	sub    ecx,0x8
    ac29:	mov    DWORD PTR [rbx+0x24],ecx
    ac2c:	shr    eax,cl
    ac2e:	movzx  edx,al
    ac31:	mov    eax,DWORD PTR [rbx+0xc68]
    ac37:	shl    eax,0x8
    ac3a:	or     eax,edx
    ac3c:	mov    DWORD PTR [rbx+0xc68],eax
    ac42:	jmp    a71b <BZ2_decompress+0xc5b>
    ac47:	nop    WORD PTR [rax+rax*1+0x0]
    ac50:	mov    ecx,DWORD PTR [rbx+0x24]
    ac53:	mov    DWORD PTR [rbx+0x8],0x10
    ac5a:	jmp    ac9e <BZ2_decompress+0x11de>
    ac5c:	nop    DWORD PTR [rax+0x0]
    ac60:	mov    rax,QWORD PTR [rbx]
    ac63:	mov    esi,DWORD PTR [rax+0x8]
    ac66:	test   esi,esi
    ac68:	je     b7b8 <BZ2_decompress+0x1cf8>
    ac6e:	mov    rdi,QWORD PTR [rax]
    ac71:	mov    edx,DWORD PTR [rbx+0x20]
    ac74:	add    ecx,0x8
    ac77:	sub    esi,0x1
    ac7a:	movzx  r9d,BYTE PTR [rdi]
    ac7e:	shl    edx,0x8
    ac81:	mov    DWORD PTR [rbx+0x24],ecx
    ac84:	add    rdi,0x1
    ac88:	or     edx,r9d
    ac8b:	mov    DWORD PTR [rbx+0x20],edx
    ac8e:	add    DWORD PTR [rax+0xc],0x1
    ac92:	mov    QWORD PTR [rax],rdi
    ac95:	mov    DWORD PTR [rax+0x8],esi
    ac98:	je     b940 <BZ2_decompress+0x1e80>
    ac9e:	cmp    ecx,0x7
    aca1:	jle    ac60 <BZ2_decompress+0x11a0>
    aca3:	mov    eax,DWORD PTR [rbx+0x20]
    aca6:	sub    ecx,0x8
    aca9:	mov    DWORD PTR [rbx+0x24],ecx
    acac:	shr    eax,cl
    acae:	cmp    al,0x59
    acb0:	je     afb3 <BZ2_decompress+0x14f3>
    acb6:	jmp    ada5 <BZ2_decompress+0x12e5>
    acbb:	nop    DWORD PTR [rax+rax*1+0x0]
    acc0:	mov    ecx,DWORD PTR [rbx+0x24]
    acc3:	mov    DWORD PTR [rbx+0x8],0xf
    acca:	jmp    ad0e <BZ2_decompress+0x124e>
    accc:	nop    DWORD PTR [rax+0x0]
    acd0:	mov    rax,QWORD PTR [rbx]
    acd3:	mov    esi,DWORD PTR [rax+0x8]
    acd6:	test   esi,esi
    acd8:	je     b7b8 <BZ2_decompress+0x1cf8>
    acde:	mov    rdi,QWORD PTR [rax]
    ace1:	mov    edx,DWORD PTR [rbx+0x20]
    ace4:	add    ecx,0x8
    ace7:	sub    esi,0x1
    acea:	movzx  r9d,BYTE PTR [rdi]
    acee:	shl    edx,0x8
    acf1:	mov    DWORD PTR [rbx+0x24],ecx
    acf4:	add    rdi,0x1
    acf8:	or     edx,r9d
    acfb:	mov    DWORD PTR [rbx+0x20],edx
    acfe:	add    DWORD PTR [rax+0xc],0x1
    ad02:	mov    QWORD PTR [rax],rdi
    ad05:	mov    DWORD PTR [rax+0x8],esi
    ad08:	je     b970 <BZ2_decompress+0x1eb0>
    ad0e:	cmp    ecx,0x7
    ad11:	jle    acd0 <BZ2_decompress+0x1210>
    ad13:	mov    eax,DWORD PTR [rbx+0x20]
    ad16:	sub    ecx,0x8
    ad19:	mov    DWORD PTR [rbx+0x24],ecx
    ad1c:	shr    eax,cl
    ad1e:	cmp    al,0x41
    ad20:	je     ac53 <BZ2_decompress+0x1193>
    ad26:	jmp    ada5 <BZ2_decompress+0x12e5>
    ad28:	nop    DWORD PTR [rax+rax*1+0x0]
    ad30:	mov    ecx,DWORD PTR [rbx+0x24]
    ad33:	movsxd r10,r8d
    ad36:	mov    r8d,r10d
    ad39:	mov    DWORD PTR [rbx+0x8],0x20
    ad40:	jmp    ad86 <BZ2_decompress+0x12c6>
    ad42:	nop    WORD PTR [rax+rax*1+0x0]
    ad48:	mov    rax,QWORD PTR [rbx]
    ad4b:	mov    esi,DWORD PTR [rax+0x8]
    ad4e:	test   esi,esi
    ad50:	je     b7b8 <BZ2_decompress+0x1cf8>
    ad56:	mov    rdi,QWORD PTR [rax]
    ad59:	mov    edx,DWORD PTR [rbx+0x20]
    ad5c:	add    ecx,0x8
    ad5f:	sub    esi,0x1
    ad62:	movzx  r9d,BYTE PTR [rdi]
    ad66:	shl    edx,0x8
    ad69:	mov    DWORD PTR [rbx+0x24],ecx
    ad6c:	add    rdi,0x1
    ad70:	or     edx,r9d
    ad73:	mov    DWORD PTR [rbx+0x20],edx
    ad76:	add    DWORD PTR [rax+0xc],0x1
    ad7a:	mov    QWORD PTR [rax],rdi
    ad7d:	mov    DWORD PTR [rax+0x8],esi
    ad80:	je     b7d0 <BZ2_decompress+0x1d10>
    ad86:	test   ecx,ecx
    ad88:	jle    ad48 <BZ2_decompress+0x1288>
    ad8a:	mov    eax,DWORD PTR [rbx+0x20]
    ad8d:	sub    ecx,0x1
    ad90:	mov    DWORD PTR [rbx+0x24],ecx
    ad93:	bt     eax,ecx
    ad96:	jae    bb04 <BZ2_decompress+0x2044>
    ad9c:	add    r15d,0x1
    ada0:	cmp    r15d,r14d
    ada3:	jl     ad39 <BZ2_decompress+0x1279>
    ada5:	mov    eax,0xfffffffc
    adaa:	nop    WORD PTR [rax+rax*1+0x0]
    adb0:	mov    edi,DWORD PTR [rsp+0x1c]
    adb4:	mov    esi,DWORD PTR [rsp+0x34]
    adb8:	mov    DWORD PTR [rbx+0xfa24],r8d
    adbf:	mov    ecx,DWORD PTR [rsp+0x18]
    adc3:	mov    DWORD PTR [rbx+0xfa28],r15d
    adca:	mov    DWORD PTR [rbx+0xfa2c],edi
    add0:	mov    edi,DWORD PTR [rsp+0x4c]
    add4:	mov    DWORD PTR [rbx+0xfa30],esi
    adda:	mov    esi,DWORD PTR [rsp+0x48]
    adde:	mov    DWORD PTR [rbx+0xfa38],ecx
    ade4:	mov    ecx,DWORD PTR [rsp+0x44]
    ade8:	mov    DWORD PTR [rbx+0xfa3c],edi
    adee:	mov    edi,DWORD PTR [rsp+0x30]
    adf2:	mov    DWORD PTR [rbx+0xfa40],esi
    adf8:	mov    esi,DWORD PTR [rsp+0x38]
    adfc:	mov    DWORD PTR [rbx+0xfa44],ecx
    ae02:	mov    ecx,DWORD PTR [rsp+0x40]
    ae06:	mov    DWORD PTR [rbx+0xfa48],edi
    ae0c:	mov    edi,DWORD PTR [rsp+0x54]
    ae10:	mov    DWORD PTR [rbx+0xfa4c],esi
    ae16:	mov    esi,DWORD PTR [rsp+0xc]
    ae1a:	mov    DWORD PTR [rbx+0xfa54],ecx
    ae20:	mov    ecx,DWORD PTR [rsp+0x5c]
    ae24:	mov    DWORD PTR [rbx+0xfa58],edi
    ae2a:	mov    edi,DWORD PTR [rsp+0x58]
    ae2e:	mov    DWORD PTR [rbx+0xfa5c],esi
    ae34:	mov    DWORD PTR [rbx+0xfa60],ecx
    ae3a:	mov    DWORD PTR [rbx+0xfa34],r14d
    ae41:	mov    DWORD PTR [rbx+0xfa50],r11d
    ae48:	mov    DWORD PTR [rbx+0xfa64],ebp
    ae4e:	mov    DWORD PTR [rbx+0xfa68],r12d
    ae55:	mov    DWORD PTR [rbx+0xfa6c],r13d
    ae5c:	mov    DWORD PTR [rbx+0xfa70],edi
    ae62:	mov    esi,DWORD PTR [rsp+0x50]
    ae66:	mov    rcx,QWORD PTR [rsp+0x10]
    ae6b:	mov    rdi,QWORD PTR [rsp+0x20]
    ae70:	mov    DWORD PTR [rbx+0xfa74],esi
    ae76:	mov    rsi,QWORD PTR [rsp+0x28]
    ae7b:	mov    QWORD PTR [rbx+0xfa78],rcx
    ae82:	mov    QWORD PTR [rbx+0xfa80],rdi
    ae89:	mov    QWORD PTR [rbx+0xfa88],rsi
    ae90:	mov    rcx,QWORD PTR [rsp+0x78]
    ae95:	xor    rcx,QWORD PTR fs:0x28
    ae9e:	jne    c00d <BZ2_decompress+0x254d>
    aea4:	add    rsp,0x88
    aeab:	pop    rbx
    aeac:	pop    rbp
    aead:	pop    r12
    aeaf:	pop    r13
    aeb1:	pop    r14
    aeb3:	pop    r15
    aeb5:	ret    
    aeb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    aec0:	mov    ecx,DWORD PTR [rbx+0x24]
    aec3:	mov    DWORD PTR [rbx+0x8],0x1f
    aeca:	jmp    af0e <BZ2_decompress+0x144e>
    aecc:	nop    DWORD PTR [rax+0x0]
    aed0:	mov    rax,QWORD PTR [rbx]
    aed3:	mov    esi,DWORD PTR [rax+0x8]
    aed6:	test   esi,esi
    aed8:	je     b7b8 <BZ2_decompress+0x1cf8>
    aede:	mov    rdi,QWORD PTR [rax]
    aee1:	mov    edx,DWORD PTR [rbx+0x20]
    aee4:	add    ecx,0x8
    aee7:	sub    esi,0x1
    aeea:	movzx  r9d,BYTE PTR [rdi]
    aeee:	shl    edx,0x8
    aef1:	mov    DWORD PTR [rbx+0x24],ecx
    aef4:	add    rdi,0x1
    aef8:	or     edx,r9d
    aefb:	mov    DWORD PTR [rbx+0x20],edx
    aefe:	add    DWORD PTR [rax+0xc],0x1
    af02:	mov    QWORD PTR [rax],rdi
    af05:	mov    DWORD PTR [rax+0x8],esi
    af08:	je     b9a0 <BZ2_decompress+0x1ee0>
    af0e:	cmp    ecx,0xe
    af11:	jle    aed0 <BZ2_decompress+0x1410>
    af13:	mov    eax,DWORD PTR [rbx+0x20]
    af16:	sub    ecx,0xf
    af19:	mov    DWORD PTR [rbx+0x24],ecx
    af1c:	shr    eax,cl
    af1e:	and    eax,0x7fff
    af23:	mov    DWORD PTR [rsp+0x18],eax
    af27:	je     ada5 <BZ2_decompress+0x12e5>
    af2d:	xor    r15d,r15d
    af30:	xor    r8d,r8d
    af33:	jmp    ad33 <BZ2_decompress+0x1273>
    af38:	nop    DWORD PTR [rax+rax*1+0x0]
    af40:	mov    ecx,DWORD PTR [rbx+0x24]
    af43:	mov    DWORD PTR [rbx+0x8],0x12
    af4a:	jmp    af8e <BZ2_decompress+0x14ce>
    af4c:	nop    DWORD PTR [rax+0x0]
    af50:	mov    rax,QWORD PTR [rbx]
    af53:	mov    esi,DWORD PTR [rax+0x8]
    af56:	test   esi,esi
    af58:	je     b7b8 <BZ2_decompress+0x1cf8>
    af5e:	mov    rdi,QWORD PTR [rax]
    af61:	mov    edx,DWORD PTR [rbx+0x20]
    af64:	add    ecx,0x8
    af67:	sub    esi,0x1
    af6a:	movzx  r9d,BYTE PTR [rdi]
    af6e:	shl    edx,0x8
    af71:	mov    DWORD PTR [rbx+0x24],ecx
    af74:	add    rdi,0x1
    af78:	or     edx,r9d
    af7b:	mov    DWORD PTR [rbx+0x20],edx
    af7e:	add    DWORD PTR [rax+0xc],0x1
    af82:	mov    QWORD PTR [rax],rdi
    af85:	mov    DWORD PTR [rax+0x8],esi
    af88:	je     b8f0 <BZ2_decompress+0x1e30>
    af8e:	cmp    ecx,0x7
    af91:	jle    af50 <BZ2_decompress+0x1490>
    af93:	mov    eax,DWORD PTR [rbx+0x20]
    af96:	sub    ecx,0x8
    af99:	mov    DWORD PTR [rbx+0x24],ecx
    af9c:	shr    eax,cl
    af9e:	cmp    al,0x53
    afa0:	je     b0c3 <BZ2_decompress+0x1603>
    afa6:	jmp    ada5 <BZ2_decompress+0x12e5>
    afab:	nop    DWORD PTR [rax+rax*1+0x0]
    afb0:	mov    ecx,DWORD PTR [rbx+0x24]
    afb3:	mov    DWORD PTR [rbx+0x8],0x11
    afba:	jmp    affe <BZ2_decompress+0x153e>
    afbc:	nop    DWORD PTR [rax+0x0]
    afc0:	mov    rax,QWORD PTR [rbx]
    afc3:	mov    esi,DWORD PTR [rax+0x8]
    afc6:	test   esi,esi
    afc8:	je     b7b8 <BZ2_decompress+0x1cf8>
    afce:	mov    rdi,QWORD PTR [rax]
    afd1:	mov    edx,DWORD PTR [rbx+0x20]
    afd4:	add    ecx,0x8
    afd7:	sub    esi,0x1
    afda:	movzx  r9d,BYTE PTR [rdi]
    afde:	shl    edx,0x8
    afe1:	mov    DWORD PTR [rbx+0x24],ecx
    afe4:	add    rdi,0x1
    afe8:	or     edx,r9d
    afeb:	mov    DWORD PTR [rbx+0x20],edx
    afee:	add    DWORD PTR [rax+0xc],0x1
    aff2:	mov    QWORD PTR [rax],rdi
    aff5:	mov    DWORD PTR [rax+0x8],esi
    aff8:	je     b920 <BZ2_decompress+0x1e60>
    affe:	cmp    ecx,0x7
    b001:	jle    afc0 <BZ2_decompress+0x1500>
    b003:	mov    eax,DWORD PTR [rbx+0x20]
    b006:	sub    ecx,0x8
    b009:	mov    DWORD PTR [rbx+0x24],ecx
    b00c:	shr    eax,cl
    b00e:	cmp    al,0x26
    b010:	je     af43 <BZ2_decompress+0x1483>
    b016:	jmp    ada5 <BZ2_decompress+0x12e5>
    b01b:	nop    DWORD PTR [rax+rax*1+0x0]
    b020:	mov    ecx,DWORD PTR [rbx+0x24]
    b023:	jmp    a8c4 <BZ2_decompress+0xe04>
    b028:	nop    DWORD PTR [rax+rax*1+0x0]
    b030:	mov    ecx,DWORD PTR [rbx+0x24]
    b033:	jmp    a85c <BZ2_decompress+0xd9c>
    b038:	nop    DWORD PTR [rax+rax*1+0x0]
    b040:	mov    ecx,DWORD PTR [rbx+0x24]
    b043:	mov    DWORD PTR [rbx+0x8],0x15
    b04a:	jmp    b08e <BZ2_decompress+0x15ce>
    b04c:	nop    DWORD PTR [rax+0x0]
    b050:	mov    rax,QWORD PTR [rbx]
    b053:	mov    esi,DWORD PTR [rax+0x8]
    b056:	test   esi,esi
    b058:	je     b7b8 <BZ2_decompress+0x1cf8>
    b05e:	mov    rdi,QWORD PTR [rax]
    b061:	mov    edx,DWORD PTR [rbx+0x20]
    b064:	add    ecx,0x8
    b067:	sub    esi,0x1
    b06a:	movzx  r9d,BYTE PTR [rdi]
    b06e:	shl    edx,0x8
    b071:	mov    DWORD PTR [rbx+0x24],ecx
    b074:	add    rdi,0x1
    b078:	or     edx,r9d
    b07b:	mov    DWORD PTR [rbx+0x20],edx
    b07e:	add    DWORD PTR [rax+0xc],0x1
    b082:	mov    QWORD PTR [rax],rdi
    b085:	mov    DWORD PTR [rax+0x8],esi
    b088:	je     b880 <BZ2_decompress+0x1dc0>
    b08e:	cmp    ecx,0x7
    b091:	jle    b050 <BZ2_decompress+0x1590>
    b093:	mov    eax,DWORD PTR [rbx+0x20]
    b096:	sub    ecx,0x8
    b099:	mov    DWORD PTR [rbx+0x24],ecx
    b09c:	shr    eax,cl
    b09e:	movzx  edx,al
    b0a1:	mov    eax,DWORD PTR [rbx+0xc68]
    b0a7:	shl    eax,0x8
    b0aa:	or     eax,edx
    b0ac:	mov    DWORD PTR [rbx+0xc68],eax
    b0b2:	jmp    abd3 <BZ2_decompress+0x1113>
    b0b7:	nop    WORD PTR [rax+rax*1+0x0]
    b0c0:	mov    ecx,DWORD PTR [rbx+0x24]
    b0c3:	mov    DWORD PTR [rbx+0x8],0x13
    b0ca:	jmp    b10e <BZ2_decompress+0x164e>
    b0cc:	nop    DWORD PTR [rax+0x0]
    b0d0:	mov    rax,QWORD PTR [rbx]
    b0d3:	mov    esi,DWORD PTR [rax+0x8]
    b0d6:	test   esi,esi
    b0d8:	je     b7b8 <BZ2_decompress+0x1cf8>
    b0de:	mov    rdi,QWORD PTR [rax]
    b0e1:	mov    edx,DWORD PTR [rbx+0x20]
    b0e4:	add    ecx,0x8
    b0e7:	sub    esi,0x1
    b0ea:	movzx  r9d,BYTE PTR [rdi]
    b0ee:	shl    edx,0x8
    b0f1:	mov    DWORD PTR [rbx+0x24],ecx
    b0f4:	add    rdi,0x1
    b0f8:	or     edx,r9d
    b0fb:	mov    DWORD PTR [rbx+0x20],edx
    b0fe:	add    DWORD PTR [rax+0xc],0x1
    b102:	mov    QWORD PTR [rax],rdi
    b105:	mov    DWORD PTR [rax+0x8],esi
    b108:	je     b8c0 <BZ2_decompress+0x1e00>
    b10e:	cmp    ecx,0x7
    b111:	jle    b0d0 <BZ2_decompress+0x1610>
    b113:	mov    eax,DWORD PTR [rbx+0x20]
    b116:	sub    ecx,0x8
    b119:	mov    DWORD PTR [rbx+0x24],ecx
    b11c:	shr    eax,cl
    b11e:	cmp    al,0x59
    b120:	jne    ada5 <BZ2_decompress+0x12e5>
    b126:	mov    eax,DWORD PTR [rbx+0x30]
    b129:	cmp    DWORD PTR [rbx+0x34],0x1
    b12d:	lea    r9d,[rax+0x1]
    b131:	mov    DWORD PTR [rbx+0x30],r9d
    b135:	jle    b16b <BZ2_decompress+0x16ab>
    b137:	mov    ecx,r9d
    b13a:	mov    esi,0x1
    b13f:	xor    eax,eax
    b141:	mov    DWORD PTR [rsp+0x68],r11d
    b146:	mov    rdi,QWORD PTR [rip+0x6ad3]        # 11c20 <stderr@@GLIBC_2.2.5>
    b14d:	lea    rdx,[rip+0x3039]        # e18d <incs+0xc4d>
    b154:	mov    DWORD PTR [rsp+0x60],r8d
    b159:	call   1270 <__fprintf_chk@plt>
    b15e:	mov    ecx,DWORD PTR [rbx+0x24]
    b161:	mov    r11d,DWORD PTR [rsp+0x68]
    b166:	mov    r8d,DWORD PTR [rsp+0x60]
    b16b:	mov    DWORD PTR [rbx+0xc68],0x0
    b175:	jmp    ab53 <BZ2_decompress+0x1093>
    b17a:	nop    WORD PTR [rax+rax*1+0x0]
    b180:	mov    ecx,DWORD PTR [rbx+0x24]
    b183:	mov    DWORD PTR [rbx+0x8],0x2c
    b18a:	jmp    b1ce <BZ2_decompress+0x170e>
    b18c:	nop    DWORD PTR [rax+0x0]
    b190:	mov    rax,QWORD PTR [rbx]
    b193:	mov    esi,DWORD PTR [rax+0x8]
    b196:	test   esi,esi
    b198:	je     b7b8 <BZ2_decompress+0x1cf8>
    b19e:	mov    rdi,QWORD PTR [rax]
    b1a1:	mov    edx,DWORD PTR [rbx+0x20]
    b1a4:	add    ecx,0x8
    b1a7:	sub    esi,0x1
    b1aa:	movzx  r9d,BYTE PTR [rdi]
    b1ae:	shl    edx,0x8
    b1b1:	mov    DWORD PTR [rbx+0x24],ecx
    b1b4:	add    rdi,0x1
    b1b8:	or     edx,r9d
    b1bb:	mov    DWORD PTR [rbx+0x20],edx
    b1be:	add    DWORD PTR [rax+0xc],0x1
    b1c2:	mov    QWORD PTR [rax],rdi
    b1c5:	mov    DWORD PTR [rax+0x8],esi
    b1c8:	je     b960 <BZ2_decompress+0x1ea0>
    b1ce:	cmp    ecx,0x7
    b1d1:	jle    b190 <BZ2_decompress+0x16d0>
    b1d3:	mov    eax,DWORD PTR [rbx+0x20]
    b1d6:	sub    ecx,0x8
    b1d9:	mov    DWORD PTR [rbx+0x24],ecx
    b1dc:	shr    eax,cl
    b1de:	cmp    al,0x38
    b1e0:	je     b66b <BZ2_decompress+0x1bab>
    b1e6:	jmp    ada5 <BZ2_decompress+0x12e5>
    b1eb:	nop    DWORD PTR [rax+rax*1+0x0]
    b1f0:	mov    ecx,DWORD PTR [rbx+0x24]
    b1f3:	mov    DWORD PTR [rbx+0x8],0x2b
    b1fa:	jmp    b23e <BZ2_decompress+0x177e>
    b1fc:	nop    DWORD PTR [rax+0x0]
    b200:	mov    rax,QWORD PTR [rbx]
    b203:	mov    esi,DWORD PTR [rax+0x8]
    b206:	test   esi,esi
    b208:	je     b7b8 <BZ2_decompress+0x1cf8>
    b20e:	mov    rdi,QWORD PTR [rax]
    b211:	mov    edx,DWORD PTR [rbx+0x20]
    b214:	add    ecx,0x8
    b217:	sub    esi,0x1
    b21a:	movzx  r9d,BYTE PTR [rdi]
    b21e:	shl    edx,0x8
    b221:	mov    DWORD PTR [rbx+0x24],ecx
    b224:	add    rdi,0x1
    b228:	or     edx,r9d
    b22b:	mov    DWORD PTR [rbx+0x20],edx
    b22e:	add    DWORD PTR [rax+0xc],0x1
    b232:	mov    QWORD PTR [rax],rdi
    b235:	mov    DWORD PTR [rax+0x8],esi
    b238:	je     b990 <BZ2_decompress+0x1ed0>
    b23e:	cmp    ecx,0x7
    b241:	jle    b200 <BZ2_decompress+0x1740>
    b243:	mov    eax,DWORD PTR [rbx+0x20]
    b246:	sub    ecx,0x8
    b249:	mov    DWORD PTR [rbx+0x24],ecx
    b24c:	shr    eax,cl
    b24e:	cmp    al,0x45
    b250:	je     b183 <BZ2_decompress+0x16c3>
    b256:	jmp    ada5 <BZ2_decompress+0x12e5>
    b25b:	nop    DWORD PTR [rax+rax*1+0x0]
    b260:	mov    ecx,DWORD PTR [rbx+0x24]
    b263:	mov    DWORD PTR [rbx+0x8],0xd
    b26a:	jmp    b2ac <BZ2_decompress+0x17ec>
    b26c:	nop    DWORD PTR [rax+0x0]
    b270:	mov    edx,DWORD PTR [r9+0x8]
    b274:	test   edx,edx
    b276:	je     b7b8 <BZ2_decompress+0x1cf8>
    b27c:	mov    rsi,QWORD PTR [r9]
    b27f:	mov    eax,DWORD PTR [rbx+0x20]
    b282:	add    ecx,0x8
    b285:	sub    edx,0x1
    b288:	movzx  edi,BYTE PTR [rsi]
    b28b:	shl    eax,0x8
    b28e:	mov    DWORD PTR [rbx+0x24],ecx
    b291:	add    rsi,0x1
    b295:	or     eax,edi
    b297:	mov    DWORD PTR [rbx+0x20],eax
    b29a:	add    DWORD PTR [r9+0xc],0x1
    b29f:	mov    QWORD PTR [r9],rsi
    b2a2:	mov    DWORD PTR [r9+0x8],edx
    b2a6:	je     b950 <BZ2_decompress+0x1e90>
    b2ac:	cmp    ecx,0x7
    b2af:	jle    b270 <BZ2_decompress+0x17b0>
    b2b1:	mov    eax,DWORD PTR [rbx+0x20]
    b2b4:	sub    ecx,0x8
    b2b7:	mov    DWORD PTR [rbx+0x24],ecx
    b2ba:	shr    eax,cl
    b2bc:	movzx  eax,al
    b2bf:	lea    edx,[rax-0x31]
    b2c2:	cmp    edx,0x8
    b2c5:	ja     c0bb <BZ2_decompress+0x25fb>
    b2cb:	sub    eax,0x30
    b2ce:	mov    rcx,QWORD PTR [r9+0x38]
    b2d2:	mov    rdi,QWORD PTR [r9+0x48]
    b2d6:	mov    QWORD PTR [rsp+0x60],r9
    b2db:	mov    DWORD PTR [rbx+0x28],eax
    b2de:	imul   eax,eax,0x186a0
    b2e4:	cmp    BYTE PTR [rbx+0x2c],0x0
    b2e8:	je     9d98 <BZ2_decompress+0x2d8>
    b2ee:	mov    DWORD PTR [rsp+0x6c],r11d
    b2f3:	lea    esi,[rax+rax*1]
    b2f6:	mov    edx,0x1
    b2fb:	mov    DWORD PTR [rsp+0x68],r8d
    b300:	call   rcx
    b302:	imul   esi,DWORD PTR [rbx+0x28],0x186a0
    b309:	mov    r9,QWORD PTR [rsp+0x60]
    b30e:	mov    edx,0x1
    b313:	mov    QWORD PTR [rbx+0xc58],rax
    b31a:	mov    rdi,QWORD PTR [r9+0x48]
    b31e:	sar    esi,1
    b320:	call   QWORD PTR [r9+0x38]
    b324:	mov    r8d,DWORD PTR [rsp+0x68]
    b329:	mov    r11d,DWORD PTR [rsp+0x6c]
    b32e:	cmp    QWORD PTR [rbx+0xc58],0x0
    b336:	mov    QWORD PTR [rbx+0xc60],rax
    b33d:	je     b348 <BZ2_decompress+0x1888>
    b33f:	test   rax,rax
    b342:	jne    9dca <BZ2_decompress+0x30a>
    b348:	mov    eax,0xfffffffd
    b34d:	jmp    adb0 <BZ2_decompress+0x12f0>
    b352:	nop    WORD PTR [rax+rax*1+0x0]
    b358:	mov    ecx,DWORD PTR [rbx+0x24]
    b35b:	jmp    a947 <BZ2_decompress+0xe87>
    b360:	mov    ecx,DWORD PTR [rbx+0x24]
    b363:	mov    DWORD PTR [rbx+0x8],0x2a
    b36a:	jmp    b3ae <BZ2_decompress+0x18ee>
    b36c:	nop    DWORD PTR [rax+0x0]
    b370:	mov    rax,QWORD PTR [rbx]
    b373:	mov    esi,DWORD PTR [rax+0x8]
    b376:	test   esi,esi
    b378:	je     b7b8 <BZ2_decompress+0x1cf8>
    b37e:	mov    rdi,QWORD PTR [rax]
    b381:	mov    edx,DWORD PTR [rbx+0x20]
    b384:	add    ecx,0x8
    b387:	sub    esi,0x1
    b38a:	movzx  r9d,BYTE PTR [rdi]
    b38e:	shl    edx,0x8
    b391:	mov    DWORD PTR [rbx+0x24],ecx
    b394:	add    rdi,0x1
    b398:	or     edx,r9d
    b39b:	mov    DWORD PTR [rbx+0x20],edx
    b39e:	add    DWORD PTR [rax+0xc],0x1
    b3a2:	mov    QWORD PTR [rax],rdi
    b3a5:	mov    DWORD PTR [rax+0x8],esi
    b3a8:	je     ba10 <BZ2_decompress+0x1f50>
    b3ae:	cmp    ecx,0x7
    b3b1:	jle    b370 <BZ2_decompress+0x18b0>
    b3b3:	mov    eax,DWORD PTR [rbx+0x20]
    b3b6:	sub    ecx,0x8
    b3b9:	mov    DWORD PTR [rbx+0x24],ecx
    b3bc:	shr    eax,cl
    b3be:	cmp    al,0x72
    b3c0:	je     b1f3 <BZ2_decompress+0x1733>
    b3c6:	jmp    ada5 <BZ2_decompress+0x12e5>
    b3cb:	nop    DWORD PTR [rax+rax*1+0x0]
    b3d0:	mov    ecx,DWORD PTR [rbx+0x24]
    b3d3:	jmp    a7f2 <BZ2_decompress+0xd32>
    b3d8:	nop    DWORD PTR [rax+rax*1+0x0]
    b3e0:	mov    ecx,DWORD PTR [rbx+0x24]
    b3e3:	jmp    a78a <BZ2_decompress+0xcca>
    b3e8:	nop    DWORD PTR [rax+rax*1+0x0]
    b3f0:	mov    ecx,DWORD PTR [rbx+0x24]
    b3f3:	mov    DWORD PTR [rbx+0x8],0x32
    b3fa:	jmp    b43e <BZ2_decompress+0x197e>
    b3fc:	nop    DWORD PTR [rax+0x0]
    b400:	mov    rax,QWORD PTR [rbx]
    b403:	mov    esi,DWORD PTR [rax+0x8]
    b406:	test   esi,esi
    b408:	je     b7b8 <BZ2_decompress+0x1cf8>
    b40e:	mov    rdi,QWORD PTR [rax]
    b411:	mov    edx,DWORD PTR [rbx+0x20]
    b414:	add    ecx,0x8
    b417:	sub    esi,0x1
    b41a:	movzx  r9d,BYTE PTR [rdi]
    b41e:	shl    edx,0x8
    b421:	mov    DWORD PTR [rbx+0x24],ecx
    b424:	add    rdi,0x1
    b428:	or     edx,r9d
    b42b:	mov    DWORD PTR [rbx+0x20],edx
    b42e:	add    DWORD PTR [rax+0xc],0x1
    b432:	mov    QWORD PTR [rax],rdi
    b435:	mov    DWORD PTR [rax+0x8],esi
    b438:	je     b860 <BZ2_decompress+0x1da0>
    b43e:	cmp    ecx,0x7
    b441:	jle    b400 <BZ2_decompress+0x1940>
    b443:	mov    eax,DWORD PTR [rbx+0x20]
    b446:	sub    ecx,0x8
    b449:	mov    DWORD PTR [rbx+0x8],0x1
    b450:	mov    DWORD PTR [rbx+0x24],ecx
    b453:	shr    eax,cl
    b455:	movzx  edx,al
    b458:	mov    eax,DWORD PTR [rbx+0xc6c]
    b45e:	shl    eax,0x8
    b461:	or     eax,edx
    b463:	mov    DWORD PTR [rbx+0xc6c],eax
    b469:	mov    eax,0x4
    b46e:	jmp    adb0 <BZ2_decompress+0x12f0>
    b473:	nop    DWORD PTR [rax+rax*1+0x0]
    b478:	mov    ecx,DWORD PTR [rbx+0x24]
    b47b:	mov    DWORD PTR [rbx+0x8],0x31
    b482:	jmp    b4c6 <BZ2_decompress+0x1a06>
    b484:	nop    DWORD PTR [rax+0x0]
    b488:	mov    rax,QWORD PTR [rbx]
    b48b:	mov    esi,DWORD PTR [rax+0x8]
    b48e:	test   esi,esi
    b490:	je     b7b8 <BZ2_decompress+0x1cf8>
    b496:	mov    rdi,QWORD PTR [rax]
    b499:	mov    edx,DWORD PTR [rbx+0x20]
    b49c:	add    ecx,0x8
    b49f:	sub    esi,0x1
    b4a2:	movzx  r9d,BYTE PTR [rdi]
    b4a6:	shl    edx,0x8
    b4a9:	mov    DWORD PTR [rbx+0x24],ecx
    b4ac:	add    rdi,0x1
    b4b0:	or     edx,r9d
    b4b3:	mov    DWORD PTR [rbx+0x20],edx
    b4b6:	add    DWORD PTR [rax+0xc],0x1
    b4ba:	mov    QWORD PTR [rax],rdi
    b4bd:	mov    DWORD PTR [rax+0x8],esi
    b4c0:	je     b890 <BZ2_decompress+0x1dd0>
    b4c6:	cmp    ecx,0x7
    b4c9:	jle    b488 <BZ2_decompress+0x19c8>
    b4cb:	mov    eax,DWORD PTR [rbx+0x20]
    b4ce:	sub    ecx,0x8
    b4d1:	mov    DWORD PTR [rbx+0x24],ecx
    b4d4:	shr    eax,cl
    b4d6:	movzx  edx,al
    b4d9:	mov    eax,DWORD PTR [rbx+0xc6c]
    b4df:	shl    eax,0x8
    b4e2:	or     eax,edx
    b4e4:	mov    DWORD PTR [rbx+0xc6c],eax
    b4ea:	jmp    b3f3 <BZ2_decompress+0x1933>
    b4ef:	nop
    b4f0:	mov    ecx,DWORD PTR [rbx+0x24]
    b4f3:	mov    DWORD PTR [rbx+0x8],0x30
    b4fa:	jmp    b53e <BZ2_decompress+0x1a7e>
    b4fc:	nop    DWORD PTR [rax+0x0]
    b500:	mov    rax,QWORD PTR [rbx]
    b503:	mov    esi,DWORD PTR [rax+0x8]
    b506:	test   esi,esi
    b508:	je     b7b8 <BZ2_decompress+0x1cf8>
    b50e:	mov    rdi,QWORD PTR [rax]
    b511:	mov    edx,DWORD PTR [rbx+0x20]
    b514:	add    ecx,0x8
    b517:	sub    esi,0x1
    b51a:	movzx  r9d,BYTE PTR [rdi]
    b51e:	shl    edx,0x8
    b521:	mov    DWORD PTR [rbx+0x24],ecx
    b524:	add    rdi,0x1
    b528:	or     edx,r9d
    b52b:	mov    DWORD PTR [rbx+0x20],edx
    b52e:	add    DWORD PTR [rax+0xc],0x1
    b532:	mov    QWORD PTR [rax],rdi
    b535:	mov    DWORD PTR [rax+0x8],esi
    b538:	je     b8a0 <BZ2_decompress+0x1de0>
    b53e:	cmp    ecx,0x7
    b541:	jle    b500 <BZ2_decompress+0x1a40>
    b543:	mov    eax,DWORD PTR [rbx+0x20]
    b546:	sub    ecx,0x8
    b549:	mov    DWORD PTR [rbx+0x24],ecx
    b54c:	shr    eax,cl
    b54e:	movzx  edx,al
    b551:	mov    eax,DWORD PTR [rbx+0xc6c]
    b557:	shl    eax,0x8
    b55a:	or     eax,edx
    b55c:	mov    DWORD PTR [rbx+0xc6c],eax
    b562:	jmp    b47b <BZ2_decompress+0x19bb>
    b567:	nop    WORD PTR [rax+rax*1+0x0]
    b570:	mov    ecx,DWORD PTR [rbx+0x24]
    b573:	mov    DWORD PTR [rbx+0x8],0x2f
    b57a:	jmp    b5be <BZ2_decompress+0x1afe>
    b57c:	nop    DWORD PTR [rax+0x0]
    b580:	mov    rax,QWORD PTR [rbx]
    b583:	mov    esi,DWORD PTR [rax+0x8]
    b586:	test   esi,esi
    b588:	je     b7b8 <BZ2_decompress+0x1cf8>
    b58e:	mov    rdi,QWORD PTR [rax]
    b591:	mov    edx,DWORD PTR [rbx+0x20]
    b594:	add    ecx,0x8
    b597:	sub    esi,0x1
    b59a:	movzx  r9d,BYTE PTR [rdi]
    b59e:	shl    edx,0x8
    b5a1:	mov    DWORD PTR [rbx+0x24],ecx
    b5a4:	add    rdi,0x1
    b5a8:	or     edx,r9d
    b5ab:	mov    DWORD PTR [rbx+0x20],edx
    b5ae:	add    DWORD PTR [rax+0xc],0x1
    b5b2:	mov    QWORD PTR [rax],rdi
    b5b5:	mov    DWORD PTR [rax+0x8],esi
    b5b8:	je     b8e0 <BZ2_decompress+0x1e20>
    b5be:	cmp    ecx,0x7
    b5c1:	jle    b580 <BZ2_decompress+0x1ac0>
    b5c3:	mov    eax,DWORD PTR [rbx+0x20]
    b5c6:	sub    ecx,0x8
    b5c9:	mov    DWORD PTR [rbx+0x24],ecx
    b5cc:	shr    eax,cl
    b5ce:	movzx  edx,al
    b5d1:	mov    eax,DWORD PTR [rbx+0xc6c]
    b5d7:	shl    eax,0x8
    b5da:	or     eax,edx
    b5dc:	mov    DWORD PTR [rbx+0xc6c],eax
    b5e2:	jmp    b4f3 <BZ2_decompress+0x1a33>
    b5e7:	nop    WORD PTR [rax+rax*1+0x0]
    b5f0:	mov    ecx,DWORD PTR [rbx+0x24]
    b5f3:	mov    DWORD PTR [rbx+0x8],0x2e
    b5fa:	jmp    b63e <BZ2_decompress+0x1b7e>
    b5fc:	nop    DWORD PTR [rax+0x0]
    b600:	mov    rax,QWORD PTR [rbx]
    b603:	mov    esi,DWORD PTR [rax+0x8]
    b606:	test   esi,esi
    b608:	je     b7b8 <BZ2_decompress+0x1cf8>
    b60e:	mov    rdi,QWORD PTR [rax]
    b611:	mov    edx,DWORD PTR [rbx+0x20]
    b614:	add    ecx,0x8
    b617:	sub    esi,0x1
    b61a:	movzx  r9d,BYTE PTR [rdi]
    b61e:	shl    edx,0x8
    b621:	mov    DWORD PTR [rbx+0x24],ecx
    b624:	add    rdi,0x1
    b628:	or     edx,r9d
    b62b:	mov    DWORD PTR [rbx+0x20],edx
    b62e:	add    DWORD PTR [rax+0xc],0x1
    b632:	mov    QWORD PTR [rax],rdi
    b635:	mov    DWORD PTR [rax+0x8],esi
    b638:	je     b900 <BZ2_decompress+0x1e40>
    b63e:	cmp    ecx,0x7
    b641:	jle    b600 <BZ2_decompress+0x1b40>
    b643:	mov    eax,DWORD PTR [rbx+0x20]
    b646:	sub    ecx,0x8
    b649:	mov    DWORD PTR [rbx+0x24],ecx
    b64c:	shr    eax,cl
    b64e:	cmp    al,0x90
    b650:	jne    ada5 <BZ2_decompress+0x12e5>
    b656:	mov    DWORD PTR [rbx+0xc6c],0x0
    b660:	jmp    b573 <BZ2_decompress+0x1ab3>
    b665:	nop    DWORD PTR [rax]
    b668:	mov    ecx,DWORD PTR [rbx+0x24]
    b66b:	mov    DWORD PTR [rbx+0x8],0x2d
    b672:	jmp    b6b6 <BZ2_decompress+0x1bf6>
    b674:	nop    DWORD PTR [rax+0x0]
    b678:	mov    rax,QWORD PTR [rbx]
    b67b:	mov    esi,DWORD PTR [rax+0x8]
    b67e:	test   esi,esi
    b680:	je     b7b8 <BZ2_decompress+0x1cf8>
    b686:	mov    rdi,QWORD PTR [rax]
    b689:	mov    edx,DWORD PTR [rbx+0x20]
    b68c:	add    ecx,0x8
    b68f:	sub    esi,0x1
    b692:	movzx  r9d,BYTE PTR [rdi]
    b696:	shl    edx,0x8
    b699:	mov    DWORD PTR [rbx+0x24],ecx
    b69c:	add    rdi,0x1
    b6a0:	or     edx,r9d
    b6a3:	mov    DWORD PTR [rbx+0x20],edx
    b6a6:	add    DWORD PTR [rax+0xc],0x1
    b6aa:	mov    QWORD PTR [rax],rdi
    b6ad:	mov    DWORD PTR [rax+0x8],esi
    b6b0:	je     b930 <BZ2_decompress+0x1e70>
    b6b6:	cmp    ecx,0x7
    b6b9:	jle    b678 <BZ2_decompress+0x1bb8>
    b6bb:	mov    eax,DWORD PTR [rbx+0x20]
    b6be:	sub    ecx,0x8
    b6c1:	mov    DWORD PTR [rbx+0x24],ecx
    b6c4:	shr    eax,cl
    b6c6:	cmp    al,0x50
    b6c8:	je     b5f3 <BZ2_decompress+0x1b33>
    b6ce:	jmp    ada5 <BZ2_decompress+0x12e5>
    b6d3:	nop    DWORD PTR [rax+rax*1+0x0]
    b6d8:	mov    ecx,DWORD PTR [rbx+0x24]
    b6db:	mov    DWORD PTR [rbx+0x8],0xc
    b6e2:	jmp    b724 <BZ2_decompress+0x1c64>
    b6e4:	nop    DWORD PTR [rax+0x0]
    b6e8:	mov    edx,DWORD PTR [r9+0x8]
    b6ec:	test   edx,edx
    b6ee:	je     b7b8 <BZ2_decompress+0x1cf8>
    b6f4:	mov    rsi,QWORD PTR [r9]
    b6f7:	mov    eax,DWORD PTR [rbx+0x20]
    b6fa:	add    ecx,0x8
    b6fd:	sub    edx,0x1
    b700:	movzx  edi,BYTE PTR [rsi]
    b703:	shl    eax,0x8
    b706:	mov    DWORD PTR [rbx+0x24],ecx
    b709:	add    rsi,0x1
    b70d:	or     eax,edi
    b70f:	mov    DWORD PTR [rbx+0x20],eax
    b712:	add    DWORD PTR [r9+0xc],0x1
    b717:	mov    QWORD PTR [r9],rsi
    b71a:	mov    DWORD PTR [r9+0x8],edx
    b71e:	je     b980 <BZ2_decompress+0x1ec0>
    b724:	cmp    ecx,0x7
    b727:	jle    b6e8 <BZ2_decompress+0x1c28>
    b729:	mov    eax,DWORD PTR [rbx+0x20]
    b72c:	sub    ecx,0x8
    b72f:	mov    DWORD PTR [rbx+0x24],ecx
    b732:	shr    eax,cl
    b734:	cmp    al,0x68
    b736:	je     b263 <BZ2_decompress+0x17a3>
    b73c:	mov    eax,0xfffffffb
    b741:	jmp    adb0 <BZ2_decompress+0x12f0>
    b746:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b750:	mov    ecx,DWORD PTR [rbx+0x24]
    b753:	mov    DWORD PTR [rbx+0x8],0xb
    b75a:	jmp    b798 <BZ2_decompress+0x1cd8>
    b75c:	nop    DWORD PTR [rax+0x0]
    b760:	mov    edx,DWORD PTR [r9+0x8]
    b764:	test   edx,edx
    b766:	je     b7b8 <BZ2_decompress+0x1cf8>
    b768:	mov    rsi,QWORD PTR [r9]
    b76b:	mov    eax,DWORD PTR [rbx+0x20]
    b76e:	add    ecx,0x8
    b771:	sub    edx,0x1
    b774:	movzx  edi,BYTE PTR [rsi]
    b777:	shl    eax,0x8
    b77a:	mov    DWORD PTR [rbx+0x24],ecx
    b77d:	add    rsi,0x1
    b781:	or     eax,edi
    b783:	mov    DWORD PTR [rbx+0x20],eax
    b786:	add    DWORD PTR [r9+0xc],0x1
    b78b:	mov    QWORD PTR [r9],rsi
    b78e:	mov    DWORD PTR [r9+0x8],edx
    b792:	je     b9b0 <BZ2_decompress+0x1ef0>
    b798:	cmp    ecx,0x7
    b79b:	jle    b760 <BZ2_decompress+0x1ca0>
    b79d:	mov    eax,DWORD PTR [rbx+0x20]
    b7a0:	sub    ecx,0x8
    b7a3:	mov    DWORD PTR [rbx+0x24],ecx
    b7a6:	shr    eax,cl
    b7a8:	cmp    al,0x5a
    b7aa:	je     b6db <BZ2_decompress+0x1c1b>
    b7b0:	jmp    b73c <BZ2_decompress+0x1c7c>
    b7b2:	nop    WORD PTR [rax+rax*1+0x0]
    b7b8:	xor    eax,eax
    b7ba:	jmp    adb0 <BZ2_decompress+0x12f0>
    b7bf:	nop
    b7c0:	add    DWORD PTR [rax+0x10],0x1
    b7c4:	jmp    a99e <BZ2_decompress+0xede>
    b7c9:	nop    DWORD PTR [rax+0x0]
    b7d0:	add    DWORD PTR [rax+0x10],0x1
    b7d4:	jmp    ad86 <BZ2_decompress+0x12c6>
    b7d9:	mov    edi,0xfa1
    b7de:	mov    DWORD PTR [rsp+0x68],r11d
    b7e3:	mov    DWORD PTR [rsp+0x60],r8d
    b7e8:	call   5120 <BZ2_bz__AssertH__fail>
    b7ed:	mov    edi,0xfa2
    b7f2:	call   5120 <BZ2_bz__AssertH__fail>
    b7f7:	mov    r8d,DWORD PTR [rsp+0x60]
    b7fc:	mov    r11d,DWORD PTR [rsp+0x68]
    b801:	xor    eax,eax
    b803:	jmp    adb0 <BZ2_decompress+0x12f0>
    b808:	nop    DWORD PTR [rax+rax*1+0x0]
    b810:	add    DWORD PTR [rax+0x10],0x1
    b814:	jmp    a7d6 <BZ2_decompress+0xd16>
    b819:	nop    DWORD PTR [rax+0x0]
    b820:	add    DWORD PTR [rax+0x10],0x1
    b824:	jmp    a83e <BZ2_decompress+0xd7e>
    b829:	nop    DWORD PTR [rax+0x0]
    b830:	add    DWORD PTR [rax+0x10],0x1
    b834:	jmp    a8a6 <BZ2_decompress+0xde6>
    b839:	nop    DWORD PTR [rax+0x0]
    b840:	add    DWORD PTR [rax+0x10],0x1
    b844:	jmp    a90e <BZ2_decompress+0xe4e>
    b849:	nop    DWORD PTR [rax+0x0]
    b850:	add    DWORD PTR [rax+0x10],0x1
    b854:	jmp    a766 <BZ2_decompress+0xca6>
    b859:	nop    DWORD PTR [rax+0x0]
    b860:	add    DWORD PTR [rax+0x10],0x1
    b864:	jmp    b43e <BZ2_decompress+0x197e>
    b869:	nop    DWORD PTR [rax+0x0]
    b870:	add    DWORD PTR [rax+0x10],0x1
    b874:	jmp    ac1e <BZ2_decompress+0x115e>
    b879:	nop    DWORD PTR [rax+0x0]
    b880:	add    DWORD PTR [rax+0x10],0x1
    b884:	jmp    b08e <BZ2_decompress+0x15ce>
    b889:	nop    DWORD PTR [rax+0x0]
    b890:	add    DWORD PTR [rax+0x10],0x1
    b894:	jmp    b4c6 <BZ2_decompress+0x1a06>
    b899:	nop    DWORD PTR [rax+0x0]
    b8a0:	add    DWORD PTR [rax+0x10],0x1
    b8a4:	jmp    b53e <BZ2_decompress+0x1a7e>
    b8a9:	nop    DWORD PTR [rax+0x0]
    b8b0:	add    DWORD PTR [rax+0x10],0x1
    b8b4:	jmp    ab9e <BZ2_decompress+0x10de>
    b8b9:	nop    DWORD PTR [rax+0x0]
    b8c0:	add    DWORD PTR [rax+0x10],0x1
    b8c4:	jmp    b10e <BZ2_decompress+0x164e>
    b8c9:	nop    DWORD PTR [rax+0x0]
    b8d0:	add    DWORD PTR [rax+0x10],0x1
    b8d4:	jmp    aa4e <BZ2_decompress+0xf8e>
    b8d9:	nop    DWORD PTR [rax+0x0]
    b8e0:	add    DWORD PTR [rax+0x10],0x1
    b8e4:	jmp    b5be <BZ2_decompress+0x1afe>
    b8e9:	nop    DWORD PTR [rax+0x0]
    b8f0:	add    DWORD PTR [rax+0x10],0x1
    b8f4:	jmp    af8e <BZ2_decompress+0x14ce>
    b8f9:	nop    DWORD PTR [rax+0x0]
    b900:	add    DWORD PTR [rax+0x10],0x1
    b904:	jmp    b63e <BZ2_decompress+0x1b7e>
    b909:	nop    DWORD PTR [rax+0x0]
    b910:	add    DWORD PTR [rax+0x10],0x1
    b914:	jmp    9e1e <BZ2_decompress+0x35e>
    b919:	nop    DWORD PTR [rax+0x0]
    b920:	add    DWORD PTR [rax+0x10],0x1
    b924:	jmp    affe <BZ2_decompress+0x153e>
    b929:	nop    DWORD PTR [rax+0x0]
    b930:	add    DWORD PTR [rax+0x10],0x1
    b934:	jmp    b6b6 <BZ2_decompress+0x1bf6>
    b939:	nop    DWORD PTR [rax+0x0]
    b940:	add    DWORD PTR [rax+0x10],0x1
    b944:	jmp    ac9e <BZ2_decompress+0x11de>
    b949:	nop    DWORD PTR [rax+0x0]
    b950:	add    DWORD PTR [r9+0x10],0x1
    b955:	jmp    b2ac <BZ2_decompress+0x17ec>
    b95a:	nop    WORD PTR [rax+rax*1+0x0]
    b960:	add    DWORD PTR [rax+0x10],0x1
    b964:	jmp    b1ce <BZ2_decompress+0x170e>
    b969:	nop    DWORD PTR [rax+0x0]
    b970:	add    DWORD PTR [rax+0x10],0x1
    b974:	jmp    ad0e <BZ2_decompress+0x124e>
    b979:	nop    DWORD PTR [rax+0x0]
    b980:	add    DWORD PTR [r9+0x10],0x1
    b985:	jmp    b724 <BZ2_decompress+0x1c64>
    b98a:	nop    WORD PTR [rax+rax*1+0x0]
    b990:	add    DWORD PTR [rax+0x10],0x1
    b994:	jmp    b23e <BZ2_decompress+0x177e>
    b999:	nop    DWORD PTR [rax+0x0]
    b9a0:	add    DWORD PTR [rax+0x10],0x1
    b9a4:	jmp    af0e <BZ2_decompress+0x144e>
    b9a9:	nop    DWORD PTR [rax+0x0]
    b9b0:	add    DWORD PTR [r9+0x10],0x1
    b9b5:	jmp    b798 <BZ2_decompress+0x1cd8>
    b9ba:	nop    WORD PTR [rax+rax*1+0x0]
    b9c0:	add    DWORD PTR [rdx+0x10],0x1
    b9c4:	jmp    9f2e <BZ2_decompress+0x46e>
    b9c9:	nop    DWORD PTR [rax+0x0]
    b9d0:	add    DWORD PTR [rdx+0x10],0x1
    b9d4:	jmp    9fae <BZ2_decompress+0x4ee>
    b9d9:	nop    DWORD PTR [rax+0x0]
    b9e0:	add    DWORD PTR [rax+0x10],0x1
    b9e4:	jmp    9ece <BZ2_decompress+0x40e>
    b9e9:	nop    DWORD PTR [rax+0x0]
    b9f0:	add    DWORD PTR [rax+0x10],0x1
    b9f4:	jmp    a30e <BZ2_decompress+0x84e>
    b9f9:	nop    DWORD PTR [rax+0x0]
    ba00:	add    DWORD PTR [rax+0x10],0x1
    ba04:	jmp    a3a6 <BZ2_decompress+0x8e6>
    ba09:	nop    DWORD PTR [rax+0x0]
    ba10:	add    DWORD PTR [rax+0x10],0x1
    ba14:	jmp    b3ae <BZ2_decompress+0x18ee>
    ba19:	nop    DWORD PTR [rax+0x0]
    ba20:	add    DWORD PTR [rax+0x10],0x1
    ba24:	jmp    a25e <BZ2_decompress+0x79e>
    ba29:	nop    DWORD PTR [rax+0x0]
    ba30:	add    DWORD PTR [rax+0x10],0x1
    ba34:	jmp    a3fe <BZ2_decompress+0x93e>
    ba39:	add    DWORD PTR [rax+0x10],0x1
    ba3d:	jmp    a5de <BZ2_decompress+0xb1e>
    ba42:	add    DWORD PTR [rax+0x10],0x1
    ba46:	jmp    a6ee <BZ2_decompress+0xc2e>
    ba4b:	add    DWORD PTR [rax+0x10],0x1
    ba4f:	jmp    ab1e <BZ2_decompress+0x105e>
    ba54:	mov    DWORD PTR [rsp+0x5c],0x0
    ba5c:	xor    r13d,r13d
    ba5f:	xor    r12d,r12d
    ba62:	xor    ebp,ebp
    ba64:	mov    DWORD PTR [rsp+0x50],0x0
    ba6c:	xor    r11d,r11d
    ba6f:	xor    r14d,r14d
    ba72:	xor    eax,eax
    ba74:	mov    QWORD PTR [rsp+0x28],0x0
    ba7d:	xor    r15d,r15d
    ba80:	xor    r8d,r8d
    ba83:	mov    QWORD PTR [rsp+0x20],0x0
    ba8c:	mov    QWORD PTR [rsp+0x10],0x0
    ba95:	mov    DWORD PTR [rsp+0x58],0x0
    ba9d:	mov    DWORD PTR [rsp+0xc],0x0
    baa5:	mov    DWORD PTR [rsp+0x54],0x0
    baad:	mov    DWORD PTR [rsp+0x40],0x0
    bab5:	mov    DWORD PTR [rsp+0x38],0x0
    babd:	mov    DWORD PTR [rsp+0x30],0x0
    bac5:	mov    DWORD PTR [rsp+0x44],0x0
    bacd:	mov    DWORD PTR [rsp+0x48],0x0
    bad5:	mov    DWORD PTR [rsp+0x4c],0x0
    badd:	mov    DWORD PTR [rsp+0x18],0x0
    bae5:	mov    DWORD PTR [rsp+0x34],0x0
    baed:	mov    DWORD PTR [rsp+0x1c],0x0
    baf5:	jmp    adb0 <BZ2_decompress+0x12f0>
    bafa:	add    DWORD PTR [r9+0x10],0x1
    baff:	jmp    9cdc <BZ2_decompress+0x21c>
    bb04:	mov    BYTE PTR [rbx+r10*1+0x651e],r15b
    bb0c:	add    r10,0x1
    bb10:	cmp    DWORD PTR [rsp+0x18],r10d
    bb15:	jg     c3a4 <BZ2_decompress+0x28e4>
    bb1b:	xor    edx,edx
    bb1d:	xor    eax,eax
    bb1f:	test   r14d,r14d
    bb22:	jle    bb37 <BZ2_decompress+0x2077>
    bb24:	nop    DWORD PTR [rax+0x0]
    bb28:	mov    BYTE PTR [rsp+rax*1+0x72],dl
    bb2c:	add    edx,0x1
    bb2f:	movzx  eax,dl
    bb32:	cmp    eax,r14d
    bb35:	jl     bb28 <BZ2_decompress+0x2068>
    bb37:	mov    r9d,DWORD PTR [rsp+0x18]
    bb3c:	xor    r8d,r8d
    bb3f:	test   r9d,r9d
    bb42:	jle    bbb6 <BZ2_decompress+0x20f6>
    bb44:	mov    eax,DWORD PTR [rsp+0x18]
    bb48:	lea    r10,[rsp+0x72]
    bb4d:	lea    r9,[rsp+0x71]
    bb52:	lea    rsi,[rbx+0x1ecc]
    bb59:	sub    eax,0x1
    bb5c:	lea    r8,[rbx+rax*1+0x1ecd]
    bb64:	nop    DWORD PTR [rax+0x0]
    bb68:	movzx  eax,BYTE PTR [rsi+0x4652]
    bb6f:	movzx  edi,BYTE PTR [rsp+rax*1+0x72]
    bb74:	mov    rdx,rax
    bb77:	test   al,al
    bb79:	je     bba0 <BZ2_decompress+0x20e0>
    bb7b:	movzx  ecx,al
    bb7e:	sub    edx,0x1
    bb81:	lea    rax,[r10+rcx*1]
    bb85:	movzx  edx,dl
    bb88:	add    rcx,r9
    bb8b:	sub    rcx,rdx
    bb8e:	xchg   ax,ax
    bb90:	movzx  edx,BYTE PTR [rax-0x1]
    bb94:	sub    rax,0x1
    bb98:	mov    BYTE PTR [rax+0x1],dl
    bb9b:	cmp    rcx,rax
    bb9e:	jne    bb90 <BZ2_decompress+0x20d0>
    bba0:	mov    BYTE PTR [rsi],dil
    bba3:	add    rsi,0x1
    bba7:	mov    BYTE PTR [rsp+0x72],dil
    bbac:	cmp    r8,rsi
    bbaf:	jne    bb68 <BZ2_decompress+0x20a8>
    bbb1:	mov    r8d,DWORD PTR [rsp+0x18]
    bbb6:	mov    DWORD PTR [rsp+0x1c],0x0
    bbbe:	jmp    9ffb <BZ2_decompress+0x53b>
    bbc3:	mov    rsi,QWORD PTR [rsp+0x20]
    bbc8:	mov    ecx,r12d
    bbcb:	sub    ecx,DWORD PTR [rsi+rax*4]
    bbce:	movsxd rax,ecx
    bbd1:	cmp    eax,0x101
    bbd6:	ja     ada5 <BZ2_decompress+0x12e5>
    bbdc:	mov    rcx,QWORD PTR [rsp+0x28]
    bbe1:	mov    eax,DWORD PTR [rcx+rax*4]
    bbe4:	mov    DWORD PTR [rsp+0x30],eax
    bbe8:	cmp    eax,0x1
    bbeb:	jbe    a604 <BZ2_decompress+0xb44>
    bbf1:	movsxd rax,DWORD PTR [rbx+0x1e8c]
    bbf8:	add    DWORD PTR [rsp+0x40],0x1
    bbfd:	mov    esi,DWORD PTR [rsp+0x40]
    bc01:	movzx  eax,BYTE PTR [rbx+rax*1+0xe8c]
    bc09:	movzx  edx,BYTE PTR [rbx+rax*1+0xd8c]
    bc11:	add    DWORD PTR [rbx+rdx*4+0x44],esi
    bc15:	cmp    BYTE PTR [rbx+0x2c],0x0
    bc19:	mov    rax,rdx
    bc1c:	jne    bdeb <BZ2_decompress+0x232b>
    bc22:	test   esi,esi
    bc24:	jle    a445 <BZ2_decompress+0x985>
    bc2a:	cmp    DWORD PTR [rsp+0x38],r11d
    bc2f:	jle    ada5 <BZ2_decompress+0x12e5>
    bc35:	mov    rcx,QWORD PTR [rbx+0xc50]
    bc3c:	movsxd rdx,r11d
    bc3f:	lea    rdx,[rcx+rdx*4]
    bc43:	mov    ecx,esi
    bc45:	mov    DWORD PTR [rdx],eax
    bc47:	add    r11d,0x1
    bc4b:	sub    ecx,0x1
    bc4e:	je     bde2 <BZ2_decompress+0x2322>
    bc54:	add    rdx,0x4
    bc58:	cmp    DWORD PTR [rsp+0x38],r11d
    bc5d:	jne    bc45 <BZ2_decompress+0x2185>
    bc5f:	mov    DWORD PTR [rsp+0x40],ecx
    bc63:	mov    r11d,DWORD PTR [rsp+0x38]
    bc68:	mov    eax,0xfffffffc
    bc6d:	jmp    adb0 <BZ2_decompress+0x12f0>
    bc72:	mov    eax,DWORD PTR [rbx+0x38]
    bc75:	test   eax,eax
    bc77:	js     ada5 <BZ2_decompress+0x12e5>
    bc7d:	cmp    eax,r11d
    bc80:	jge    ada5 <BZ2_decompress+0x12e5>
    bc86:	mov    DWORD PTR [rbx+0x448],0x0
    bc90:	lea    rax,[rbx+0x44]
    bc94:	lea    rcx,[rbx+0x444]
    bc9b:	nop    DWORD PTR [rax+rax*1+0x0]
    bca0:	mov    edx,DWORD PTR [rax]
    bca2:	add    rax,0x4
    bca6:	mov    DWORD PTR [rax+0x404],edx
    bcac:	cmp    rcx,rax
    bcaf:	jne    bca0 <BZ2_decompress+0x21e0>
    bcb1:	lea    rax,[rbx+0x44c]
    bcb8:	lea    rcx,[rbx+0x848]
    bcbf:	xor    edx,edx
    bcc1:	jmp    bccc <BZ2_decompress+0x220c>
    bcc3:	nop    DWORD PTR [rax+rax*1+0x0]
    bcc8:	add    rax,0x4
    bccc:	add    edx,DWORD PTR [rax]
    bcce:	mov    DWORD PTR [rax],edx
    bcd0:	cmp    rcx,rax
    bcd3:	jne    bcc8 <BZ2_decompress+0x2208>
    bcd5:	xor    eax,eax
    bcd7:	xor    edx,edx
    bcd9:	jmp    bce7 <BZ2_decompress+0x2227>
    bcdb:	nop    DWORD PTR [rax+rax*1+0x0]
    bce0:	mov    edx,DWORD PTR [rbx+rax*4+0x448]
    bce7:	mov    r8d,eax
    bcea:	test   edx,edx
    bcec:	js     ada5 <BZ2_decompress+0x12e5>
    bcf2:	cmp    r11d,edx
    bcf5:	jl     ada5 <BZ2_decompress+0x12e5>
    bcfb:	add    rax,0x1
    bcff:	cmp    rax,0x101
    bd05:	jne    bce0 <BZ2_decompress+0x2220>
    bd07:	cmp    DWORD PTR [rbx+0x34],0x1
    bd0b:	mov    BYTE PTR [rbx+0xc],0x0
    bd0f:	mov    DWORD PTR [rbx+0x10],0x0
    bd16:	mov    DWORD PTR [rbx+0xc70],0xffffffff
    bd20:	mov    DWORD PTR [rbx+0x8],0x2
    bd27:	jle    bd50 <BZ2_decompress+0x2290>
    bd29:	mov    edx,0x6
    bd2e:	mov    rcx,QWORD PTR [rip+0x5eeb]        # 11c20 <stderr@@GLIBC_2.2.5>
    bd35:	mov    esi,0x1
    bd3a:	lea    rdi,[rip+0x2460]        # e1a1 <incs+0xc61>
    bd41:	mov    DWORD PTR [rsp+0x60],r11d
    bd46:	call   1260 <fwrite@plt>
    bd4b:	mov    r11d,DWORD PTR [rsp+0x60]
    bd50:	cmp    BYTE PTR [rbx+0x2c],0x0
    bd54:	je     c0c8 <BZ2_decompress+0x2608>
    bd5a:	lea    r9,[rbx+0x448]
    bd61:	lea    rcx,[rbx+0x84c]
    bd68:	mov    rax,r9
    bd6b:	nop    DWORD PTR [rax+rax*1+0x0]
    bd70:	mov    edx,DWORD PTR [rax]
    bd72:	add    rax,0x4
    bd76:	mov    DWORD PTR [rax+0x400],edx
    bd7c:	cmp    rcx,rax
    bd7f:	jne    bd70 <BZ2_decompress+0x22b0>
    bd81:	xor    ecx,ecx
    bd83:	jmp    bda3 <BZ2_decompress+0x22e3>
    bd85:	and    edi,0xfffffff0
    bd88:	sar    edx,0x10
    bd8b:	or     edx,edi
    bd8d:	mov    BYTE PTR [rax],dl
    bd8f:	add    rcx,0x1
    bd93:	add    DWORD PTR [rsi+0x84c],0x1
    bd9a:	cmp    r11d,ecx
    bd9d:	jle    c171 <BZ2_decompress+0x26b1>
    bda3:	mov    rax,QWORD PTR [rbx+0xc58]
    bdaa:	lea    rax,[rax+rcx*2]
    bdae:	movzx  edx,BYTE PTR [rax]
    bdb1:	lea    rsi,[rbx+rdx*4]
    bdb5:	mov    edx,DWORD PTR [rsi+0x84c]
    bdbb:	mov    WORD PTR [rax],dx
    bdbe:	mov    eax,ecx
    bdc0:	sar    eax,1
    bdc2:	cdqe   
    bdc4:	add    rax,QWORD PTR [rbx+0xc60]
    bdcb:	movzx  edi,BYTE PTR [rax]
    bdce:	test   cl,0x1
    bdd1:	je     bd85 <BZ2_decompress+0x22c5>
    bdd3:	sar    edx,0x10
    bdd6:	and    edi,0xf
    bdd9:	shl    edx,0x4
    bddc:	or     edx,edi
    bdde:	mov    BYTE PTR [rax],dl
    bde0:	jmp    bd8f <BZ2_decompress+0x22cf>
    bde2:	mov    DWORD PTR [rsp+0x40],ecx
    bde6:	jmp    a445 <BZ2_decompress+0x985>
    bdeb:	mov    esi,DWORD PTR [rsp+0x40]
    bdef:	test   esi,esi
    bdf1:	jle    a445 <BZ2_decompress+0x985>
    bdf7:	cmp    DWORD PTR [rsp+0x38],r11d
    bdfc:	jle    ada5 <BZ2_decompress+0x12e5>
    be02:	mov    rcx,QWORD PTR [rbx+0xc58]
    be09:	movsxd rdx,r11d
    be0c:	lea    rdx,[rcx+rdx*2]
    be10:	mov    ecx,esi
    be12:	mov    WORD PTR [rdx],ax
    be15:	add    r11d,0x1
    be19:	sub    ecx,0x1
    be1c:	je     bde2 <BZ2_decompress+0x2322>
    be1e:	add    rdx,0x2
    be22:	cmp    DWORD PTR [rsp+0x38],r11d
    be27:	jne    be12 <BZ2_decompress+0x2352>
    be29:	jmp    bc5f <BZ2_decompress+0x219f>
    be2e:	xchg   ax,ax
    be30:	mov    DWORD PTR [rsp+0x54],0x1
    be38:	mov    edx,0x2
    be3d:	mov    DWORD PTR [rsp+0x40],0xffffffff
    be45:	jmp    a60b <BZ2_decompress+0xb4b>
    be4a:	mov    esi,eax
    be4c:	shr    eax,0x4
    be4f:	lea    r9,[rbx+rax*4]
    be53:	and    esi,0xf
    be56:	mov    edi,DWORD PTR [r9+0x1e8c]
    be5d:	lea    edx,[rdi+rsi*1]
    be60:	movsxd rcx,edx
    be63:	movzx  r10d,BYTE PTR [rbx+rcx*1+0xe8c]
    be6c:	mov    BYTE PTR [rsp+0x68],r10b
    be71:	cmp    edi,edx
    be73:	jge    be9b <BZ2_decompress+0x23db>
    be75:	lea    rdx,[rbx+rcx*1+0xe8b]
    be7d:	sub    esi,0x1
    be80:	lea    rcx,[rbx+rcx*1+0xe8a]
    be88:	sub    rcx,rsi
    be8b:	movzx  esi,BYTE PTR [rdx]
    be8e:	sub    rdx,0x1
    be92:	mov    BYTE PTR [rdx+0x2],sil
    be96:	cmp    rcx,rdx
    be99:	jne    be8b <BZ2_decompress+0x23cb>
    be9b:	add    edi,0x1
    be9e:	mov    DWORD PTR [r9+0x1e8c],edi
    bea5:	lea    edx,[rdi-0x1]
    bea8:	mov    edi,DWORD PTR [rbx+rax*4+0x1e88]
    beaf:	mov    DWORD PTR [rbx+rax*4+0x1e8c],edx
    beb6:	movsxd rdx,edx
    beb9:	sub    rax,0x1
    bebd:	lea    ecx,[rdi+0xf]
    bec0:	movsxd rcx,ecx
    bec3:	movzx  ecx,BYTE PTR [rbx+rcx*1+0xe8c]
    becb:	mov    BYTE PTR [rbx+rdx*1+0xe8c],cl
    bed2:	test   eax,eax
    bed4:	jne    bea5 <BZ2_decompress+0x23e5>
    bed6:	mov    eax,DWORD PTR [rbx+0x1e8c]
    bedc:	movzx  ecx,BYTE PTR [rsp+0x68]
    bee1:	sub    eax,0x1
    bee4:	movsxd rdx,eax
    bee7:	mov    DWORD PTR [rbx+0x1e8c],eax
    beed:	mov    BYTE PTR [rbx+rdx*1+0xe8c],cl
    bef4:	jne    a53d <BZ2_decompress+0xa7d>
    befa:	mov    DWORD PTR [rsp+0x6c],r8d
    beff:	lea    r9,[rbx+0x1ec8]
    bf06:	mov    ecx,0xfff
    bf0b:	lea    r10,[rbx+0xe8b]
    bf12:	movsxd rsi,DWORD PTR [r9]
    bf15:	mov    DWORD PTR [rsp+0x60],ecx
    bf19:	lea    rax,[rbx+rsi*1+0xe9b]
    bf21:	lea    rdi,[r10+rsi*1]
    bf25:	nop    DWORD PTR [rax]
    bf28:	movzx  r8d,BYTE PTR [rax]
    bf2c:	mov    rdx,rax
    bf2f:	sub    rax,0x1
    bf33:	sub    rdx,rsi
    bf36:	mov    BYTE PTR [rdx+rcx*1-0xf],r8b
    bf3b:	cmp    rdi,rax
    bf3e:	jne    bf28 <BZ2_decompress+0x2468>
    bf40:	mov    r8d,DWORD PTR [rsp+0x60]
    bf45:	sub    rcx,0x10
    bf49:	sub    r9,0x4
    bf4d:	sub    r8d,0xf
    bf51:	mov    DWORD PTR [r9+0x4],r8d
    bf55:	cmp    rcx,0xeff
    bf5c:	jne    bf12 <BZ2_decompress+0x2452>
    bf5e:	mov    r8d,DWORD PTR [rsp+0x6c]
    bf63:	jmp    a53d <BZ2_decompress+0xa7d>
    bf68:	add    DWORD PTR [rsp+0x48],0x1
    bf6d:	movsxd rax,DWORD PTR [rsp+0x48]
    bf72:	cmp    DWORD PTR [rsp+0x18],eax
    bf76:	jle    ada5 <BZ2_decompress+0x12e5>
    bf7c:	movzx  ecx,BYTE PTR [rbx+rax*1+0x1ecc]
    bf84:	mov    DWORD PTR [rsp+0x44],0x31
    bf8c:	movzx  edx,cl
    bf8f:	mov    DWORD PTR [rsp+0x58],ecx
    bf93:	mov    rax,rdx
    bf96:	mov    ebp,DWORD PTR [rbx+rdx*4+0xfa0c]
    bf9d:	shl    rax,0x7
    bfa1:	add    rax,rdx
    bfa4:	shl    rax,0x3
    bfa8:	lea    rcx,[rbx+rax*1+0xb17c]
    bfb0:	mov    QWORD PTR [rsp+0x10],rcx
    bfb5:	lea    rcx,[rbx+rax*1+0xe1dc]
    bfbd:	lea    rax,[rbx+rax*1+0xc9ac]
    bfc5:	mov    QWORD PTR [rsp+0x28],rcx
    bfca:	mov    QWORD PTR [rsp+0x20],rax
    bfcf:	jmp    a585 <BZ2_decompress+0xac5>
    bfd4:	mov    rcx,QWORD PTR [rbx+0xc50]
    bfdb:	mov    DWORD PTR [rcx+rdx*4],eax
    bfde:	jmp    a56a <BZ2_decompress+0xaaa>
    bfe3:	mov    ebp,DWORD PTR [rsp+0x50]
    bfe7:	jmp    a68b <BZ2_decompress+0xbcb>
    bfec:	cmp    DWORD PTR [rsp+0x30],0x1
    bff1:	jne    a61f <BZ2_decompress+0xb5f>
    bff7:	add    DWORD PTR [rsp+0x40],edx
    bffb:	jmp    a61f <BZ2_decompress+0xb5f>
    c000:	mov    DWORD PTR [rsp+0x1c],0x0
    c008:	jmp    a105 <BZ2_decompress+0x645>
    c00d:	call   11a0 <__stack_chk_fail@plt>
    c012:	mov    DWORD PTR [rsp+0x5c],0x0
    c01a:	xor    r13d,r13d
    c01d:	xor    r12d,r12d
    c020:	xor    ebp,ebp
    c022:	mov    QWORD PTR [rsp+0x28],0x0
    c02b:	xor    r11d,r11d
    c02e:	xor    r14d,r14d
    c031:	xor    r15d,r15d
    c034:	mov    DWORD PTR [rsp+0x50],0x0
    c03c:	xor    r8d,r8d
    c03f:	mov    eax,0xfffffffb
    c044:	mov    QWORD PTR [rsp+0x20],0x0
    c04d:	mov    QWORD PTR [rsp+0x10],0x0
    c056:	mov    DWORD PTR [rsp+0x58],0x0
    c05e:	mov    DWORD PTR [rsp+0xc],0x0
    c066:	mov    DWORD PTR [rsp+0x54],0x0
    c06e:	mov    DWORD PTR [rsp+0x40],0x0
    c076:	mov    DWORD PTR [rsp+0x38],0x0
    c07e:	mov    DWORD PTR [rsp+0x30],0x0
    c086:	mov    DWORD PTR [rsp+0x44],0x0
    c08e:	mov    DWORD PTR [rsp+0x48],0x0
    c096:	mov    DWORD PTR [rsp+0x4c],0x0
    c09e:	mov    DWORD PTR [rsp+0x18],0x0
    c0a6:	mov    DWORD PTR [rsp+0x34],0x0
    c0ae:	mov    DWORD PTR [rsp+0x1c],0x0
    c0b6:	jmp    adb0 <BZ2_decompress+0x12f0>
    c0bb:	mov    DWORD PTR [rbx+0x28],eax
    c0be:	mov    eax,0xfffffffb
    c0c3:	jmp    adb0 <BZ2_decompress+0x12f0>
    c0c8:	mov    rdx,QWORD PTR [rbx+0xc50]
    c0cf:	xor    eax,eax
    c0d1:	movzx  ecx,BYTE PTR [rdx+rax*4]
    c0d5:	mov    edi,eax
    c0d7:	add    rax,0x1
    c0db:	shl    edi,0x8
    c0de:	lea    rcx,[rbx+rcx*4]
    c0e2:	movsxd rsi,DWORD PTR [rcx+0x448]
    c0e9:	or     DWORD PTR [rdx+rsi*4],edi
    c0ec:	add    DWORD PTR [rcx+0x448],0x1
    c0f3:	cmp    r11d,eax
    c0f6:	jg     c0d1 <BZ2_decompress+0x2611>
    c0f8:	movsxd rax,DWORD PTR [rbx+0x38]
    c0fc:	test   r11d,r11d
    c0ff:	mov    r8d,0x1
    c105:	cmovg  r8d,r11d
    c109:	mov    eax,DWORD PTR [rdx+rax*4]
    c10c:	mov    DWORD PTR [rbx+0x444],0x0
    c116:	shr    eax,0x8
    c119:	cmp    BYTE PTR [rbx+0x14],0x0
    c11d:	mov    DWORD PTR [rbx+0x3c],eax
    c120:	lea    rax,[rdx+rax*4]
    c124:	je     c354 <BZ2_decompress+0x2894>
    c12a:	mov    QWORD PTR [rbx+0x18],0x0
    c132:	mov    eax,DWORD PTR [rax]
    c134:	mov    DWORD PTR [rbx+0x444],0x1
    c13e:	mov    edx,eax
    c140:	movzx  eax,al
    c143:	shr    edx,0x8
    c146:	mov    DWORD PTR [rbx+0x3c],edx
    c149:	mov    edx,DWORD PTR [rip+0x52d1]        # 11420 <BZ2_rNums>
    c14f:	mov    DWORD PTR [rbx+0x1c],0x1
    c156:	sub    edx,0x1
    c159:	mov    DWORD PTR [rbx+0x18],edx
    c15c:	sub    edx,0x1
    c15f:	sete   dl
    c162:	movzx  edx,dl
    c165:	xor    eax,edx
    c167:	mov    DWORD PTR [rbx+0x40],eax
    c16a:	xor    eax,eax
    c16c:	jmp    adb0 <BZ2_decompress+0x12f0>
    c171:	mov    eax,DWORD PTR [rbx+0x38]
    c174:	mov    rsi,QWORD PTR [rbx+0xc60]
    c17b:	mov    edx,eax
    c17d:	lea    ecx,[rax*4+0x0]
    c184:	sar    edx,1
    c186:	and    ecx,0x4
    c189:	movsxd rdx,edx
    c18c:	movzx  r15d,BYTE PTR [rsi+rdx*1]
    c191:	mov    rdx,QWORD PTR [rbx+0xc58]
    c198:	shr    r15d,cl
    c19b:	movsxd rcx,eax
    c19e:	movzx  ecx,WORD PTR [rdx+rcx*2]
    c1a2:	shl    r15d,0x10
    c1a6:	and    r15d,0xf0000
    c1ad:	or     r15d,ecx
    c1b0:	jmp    c1d0 <BZ2_decompress+0x2710>
    c1b2:	and    eax,0xfffffff0
    c1b5:	or     eax,edx
    c1b7:	mov    BYTE PTR [rsi],al
    c1b9:	mov    eax,r8d
    c1bc:	cmp    DWORD PTR [rbx+0x38],r8d
    c1c0:	je     c224 <BZ2_decompress+0x2764>
    c1c2:	mov    rdx,QWORD PTR [rbx+0xc58]
    c1c9:	mov    rsi,QWORD PTR [rbx+0xc60]
    c1d0:	movsxd rcx,r15d
    c1d3:	mov    r8d,r15d
    c1d6:	lea    rdi,[rdx+rcx*2]
    c1da:	mov    edx,r15d
    c1dd:	lea    ecx,[r15*4+0x0]
    c1e5:	sar    edx,1
    c1e7:	and    ecx,0x4
    c1ea:	movsxd rdx,edx
    c1ed:	add    rsi,rdx
    c1f0:	movzx  edx,BYTE PTR [rsi]
    c1f3:	shr    edx,cl
    c1f5:	mov    r15d,edx
    c1f8:	movzx  edx,WORD PTR [rdi]
    c1fb:	mov    WORD PTR [rdi],ax
    c1fe:	sar    eax,0x10
    c201:	shl    r15d,0x10
    c205:	and    r15d,0xf0000
    c20c:	or     r15d,edx
    c20f:	mov    edx,eax
    c211:	movzx  eax,BYTE PTR [rsi]
    c214:	test   r8b,0x1
    c218:	je     c1b2 <BZ2_decompress+0x26f2>
    c21a:	and    eax,0xf
    c21d:	shl    edx,0x4
    c220:	or     eax,edx
    c222:	jmp    c1b7 <BZ2_decompress+0x26f7>
    c224:	cmp    BYTE PTR [rbx+0x14],0x0
    c228:	mov    DWORD PTR [rbx+0x3c],r8d
    c22c:	mov    DWORD PTR [rbx+0x444],0x0
    c236:	mov    DWORD PTR [rsp+0x68],r11d
    c23b:	je     c2f3 <BZ2_decompress+0x2833>
    c241:	mov    QWORD PTR [rbx+0x18],0x0
    c249:	mov    edi,r8d
    c24c:	mov    rsi,r9
    c24f:	mov    DWORD PTR [rsp+0x60],r8d
    c254:	call   5720 <BZ2_indexIntoF>
    c259:	mov    edi,DWORD PTR [rbx+0x3c]
    c25c:	mov    r8d,DWORD PTR [rsp+0x60]
    c261:	mov    DWORD PTR [rbx+0x40],eax
    c264:	mov    rdx,QWORD PTR [rbx+0xc60]
    c26b:	mov    esi,eax
    c26d:	mov    eax,edi
    c26f:	lea    ecx,[rdi*4+0x0]
    c276:	mov    r11d,DWORD PTR [rsp+0x68]
    c27b:	shr    eax,1
    c27d:	and    ecx,0x4
    c280:	movzx  eax,BYTE PTR [rdx+rax*1]
    c284:	shr    eax,cl
    c286:	mov    rcx,QWORD PTR [rbx+0xc58]
    c28d:	shl    eax,0x10
    c290:	mov    edx,eax
    c292:	mov    eax,edi
    c294:	movzx  eax,WORD PTR [rcx+rax*2]
    c298:	and    edx,0xf0000
    c29e:	add    DWORD PTR [rbx+0x444],0x1
    c2a5:	or     eax,edx
    c2a7:	cmp    DWORD PTR [rbx+0x18],0x0
    c2ab:	mov    DWORD PTR [rbx+0x3c],eax
    c2ae:	jne    c2d5 <BZ2_decompress+0x2815>
    c2b0:	movsxd rcx,DWORD PTR [rbx+0x1c]
    c2b4:	lea    rax,[rip+0x5165]        # 11420 <BZ2_rNums>
    c2bb:	mov    edx,0x0
    c2c0:	mov    eax,DWORD PTR [rax+rcx*4]
    c2c3:	cmp    ecx,0x1ff
    c2c9:	mov    DWORD PTR [rbx+0x18],eax
    c2cc:	lea    eax,[rcx+0x1]
    c2cf:	cmove  eax,edx
    c2d2:	mov    DWORD PTR [rbx+0x1c],eax
    c2d5:	mov    eax,DWORD PTR [rbx+0x18]
    c2d8:	sub    eax,0x1
    c2db:	mov    DWORD PTR [rbx+0x18],eax
    c2de:	sub    eax,0x1
    c2e1:	sete   al
    c2e4:	movzx  eax,al
    c2e7:	xor    esi,eax
    c2e9:	xor    eax,eax
    c2eb:	mov    DWORD PTR [rbx+0x40],esi
    c2ee:	jmp    adb0 <BZ2_decompress+0x12f0>
    c2f3:	mov    edi,r8d
    c2f6:	mov    rsi,r9
    c2f9:	mov    DWORD PTR [rsp+0x60],r8d
    c2fe:	call   5720 <BZ2_indexIntoF>
    c303:	mov    edx,DWORD PTR [rbx+0x3c]
    c306:	mov    r8d,DWORD PTR [rsp+0x60]
    c30b:	mov    rcx,QWORD PTR [rbx+0xc60]
    c312:	mov    r11d,DWORD PTR [rsp+0x68]
    c317:	mov    DWORD PTR [rbx+0x40],eax
    c31a:	mov    eax,edx
    c31c:	shr    eax,1
    c31e:	movzx  eax,BYTE PTR [rcx+rax*1]
    c322:	lea    ecx,[rdx*4+0x0]
    c329:	and    ecx,0x4
    c32c:	shr    eax,cl
    c32e:	mov    rcx,QWORD PTR [rbx+0xc58]
    c335:	shl    eax,0x10
    c338:	movzx  edx,WORD PTR [rcx+rdx*2]
    c33c:	and    eax,0xf0000
    c341:	add    DWORD PTR [rbx+0x444],0x1
    c348:	or     eax,edx
    c34a:	mov    DWORD PTR [rbx+0x3c],eax
    c34d:	xor    eax,eax
    c34f:	jmp    adb0 <BZ2_decompress+0x12f0>
    c354:	mov    eax,DWORD PTR [rax]
    c356:	mov    DWORD PTR [rbx+0x444],0x1
    c360:	movzx  edx,al
    c363:	shr    eax,0x8
    c366:	mov    DWORD PTR [rbx+0x3c],eax
    c369:	xor    eax,eax
    c36b:	mov    DWORD PTR [rbx+0x40],edx
    c36e:	jmp    adb0 <BZ2_decompress+0x12f0>
    c373:	mov    DWORD PTR [rsp+0x54],edx
    c377:	mov    eax,0xfffffffc
    c37c:	jmp    adb0 <BZ2_decompress+0x12f0>
    c381:	mov    DWORD PTR [rsp+0x44],0x0
    c389:	xor    r11d,r11d
    c38c:	mov    eax,0xfffffffc
    c391:	mov    r8d,0x100
    c397:	mov    DWORD PTR [rsp+0x48],0x0
    c39f:	jmp    adb0 <BZ2_decompress+0x12f0>
    c3a4:	xor    r15d,r15d
    c3a7:	jmp    ad36 <BZ2_decompress+0x1276>
    c3ac:	nop    DWORD PTR [rax+0x0]

000000000000c3b0 <BZ2_hbMakeCodeLengths>:
    c3b0:	endbr64 
    c3b4:	push   r15
    c3b6:	push   r14
    c3b8:	push   r13
    c3ba:	push   r12
    c3bc:	push   rbp
    c3bd:	push   rbx
    c3be:	sub    rsp,0x1000
    c3c5:	or     QWORD PTR [rsp],0x0
    c3ca:	sub    rsp,0x498
    c3d1:	mov    QWORD PTR [rsp+0x20],rdi
    c3d6:	mov    DWORD PTR [rsp+0x28],edx
    c3da:	mov    DWORD PTR [rsp+0x2c],ecx
    c3de:	mov    rax,QWORD PTR fs:0x28
    c3e7:	mov    QWORD PTR [rsp+0x1488],rax
    c3ef:	xor    eax,eax
    c3f1:	test   edx,edx
    c3f3:	jle    c851 <BZ2_hbMakeCodeLengths+0x4a1>
    c3f9:	mov    eax,DWORD PTR [rsp+0x28]
    c3fd:	lea    r8,[rsp+0x460]
    c405:	mov    edi,0x100
    c40a:	lea    r10d,[rax-0x1]
    c40e:	xor    eax,eax
    c410:	mov    r9d,r10d
    c413:	jmp    c41b <BZ2_hbMakeCodeLengths+0x6b>
    c415:	nop    DWORD PTR [rax]
    c418:	mov    rax,rdx
    c41b:	mov    ecx,DWORD PTR [rsi+rax*4]
    c41e:	mov    edx,ecx
    c420:	shl    edx,0x8
    c423:	test   ecx,ecx
    c425:	cmove  edx,edi
    c428:	mov    DWORD PTR [r8+rax*4+0x4],edx
    c42d:	lea    rdx,[rax+0x1]
    c431:	cmp    rax,r9
    c434:	jne    c418 <BZ2_hbMakeCodeLengths+0x68>
    c436:	movsxd rax,DWORD PTR [rsp+0x28]
    c43b:	lea    rdi,[rsp+0x50]
    c440:	mov    QWORD PTR [rsp+0x30],rdi
    c445:	mov    rbx,rax
    c448:	lea    rax,[rdi+rax*4]
    c44c:	mov    QWORD PTR [rsp+0x18],rax
    c451:	lea    rax,[rsp+r10*4+0x468]
    c459:	mov    QWORD PTR [rsp+0x48],rax
    c45e:	lea    rax,[r10+0x2]
    c462:	mov    QWORD PTR [rsp+0x38],rax
    c467:	lea    eax,[rbx+0x1]
    c46a:	mov    DWORD PTR [rsp+0x40],eax
    c46e:	lea    eax,[rbx+rbx*1-0x1]
    c472:	mov    DWORD PTR [rsp+0x44],eax
    c476:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c480:	mov    eax,DWORD PTR [rsp+0x28]
    c484:	mov    DWORD PTR [rsp+0x50],0x0
    c48c:	mov    DWORD PTR [rsp+0x460],0x0
    c497:	mov    DWORD PTR [rsp+0xc70],0xfffffffe
    c4a2:	test   eax,eax
    c4a4:	jle    c82c <BZ2_hbMakeCodeLengths+0x47c>
    c4aa:	mov    rbp,QWORD PTR [rsp+0x30]
    c4af:	mov    r12,QWORD PTR [rsp+0x38]
    c4b4:	lea    rbx,[rsp+0x460]
    c4bc:	lea    r11,[rsp+0xc70]
    c4c4:	mov    QWORD PTR [rsp+0x10],rbx
    c4c9:	mov    r8d,0x1
    c4cf:	mov    QWORD PTR [rsp+0x8],r11
    c4d4:	nop    DWORD PTR [rax+0x0]
    c4d8:	mov    edx,r8d
    c4db:	mov    DWORD PTR [rbp+r8*4+0x0],r8d
    c4e0:	mov    r9d,DWORD PTR [rbx+r8*4]
    c4e4:	mov    r10d,r8d
    c4e7:	sar    edx,1
    c4e9:	mov    DWORD PTR [r11+r8*4],0xffffffff
    c4f1:	movsxd rax,edx
    c4f4:	movsxd rax,DWORD PTR [rsp+rax*4+0x50]
    c4f9:	mov    rcx,rax
    c4fc:	cmp    r9d,DWORD PTR [rsp+rax*4+0x460]
    c504:	jge    c810 <BZ2_hbMakeCodeLengths+0x460>
    c50a:	movsxd rax,r8d
    c50d:	jmp    c512 <BZ2_hbMakeCodeLengths+0x162>
    c50f:	nop
    c510:	mov    edx,esi
    c512:	mov    esi,edx
    c514:	mov    DWORD PTR [rsp+rax*4+0x50],ecx
    c518:	sar    esi,1
    c51a:	movsxd rax,esi
    c51d:	movsxd rdi,DWORD PTR [rsp+rax*4+0x50]
    c522:	movsxd rax,edx
    c525:	mov    rcx,rdi
    c528:	cmp    DWORD PTR [rsp+rdi*4+0x460],r9d
    c530:	jg     c510 <BZ2_hbMakeCodeLengths+0x160>
    c532:	movsxd rdx,edx
    c535:	add    r8,0x1
    c539:	mov    DWORD PTR [rsp+rdx*4+0x50],r10d
    c53e:	cmp    r8,r12
    c541:	jne    c4d8 <BZ2_hbMakeCodeLengths+0x128>
    c543:	mov    eax,DWORD PTR [rsp+0x28]
    c547:	cmp    eax,0x1
    c54a:	je     c763 <BZ2_hbMakeCodeLengths+0x3b3>
    c550:	movsxd rbp,DWORD PTR [rsp+0x40]
    c555:	mov    r12,QWORD PTR [rsp+0x18]
    c55a:	lea    r9d,[rax-0x2]
    c55e:	mov    r8d,eax
    c561:	nop    DWORD PTR [rax+0x0]
    c568:	mov    r13d,DWORD PTR [r12]
    c56c:	sub    r8d,0x1
    c570:	movsxd r14,DWORD PTR [rsp+0x54]
    c575:	mov    DWORD PTR [rsp+0x54],r13d
    c57a:	cmp    r8d,0x1
    c57e:	je     c818 <BZ2_hbMakeCodeLengths+0x468>
    c584:	movsxd rax,r13d
    c587:	mov    edx,0x2
    c58c:	mov    ecx,0x1
    c591:	mov    ebx,DWORD PTR [rsp+rax*4+0x460]
    c598:	jmp    c5b5 <BZ2_hbMakeCodeLengths+0x205>
    c59a:	nop    WORD PTR [rax+rax*1+0x0]
    c5a0:	mov    eax,edx
    c5a2:	cmp    ebx,esi
    c5a4:	jl     c5f8 <BZ2_hbMakeCodeLengths+0x248>
    c5a6:	lea    edx,[rax+rax*1]
    c5a9:	mov    DWORD PTR [rsp+rcx*4+0x50],edi
    c5ad:	movsxd rcx,eax
    c5b0:	cmp    r8d,edx
    c5b3:	jl     c5f8 <BZ2_hbMakeCodeLengths+0x248>
    c5b5:	movsxd rax,edx
    c5b8:	movsxd rax,DWORD PTR [rsp+rax*4+0x50]
    c5bd:	mov    esi,DWORD PTR [rsp+rax*4+0x460]
    c5c4:	mov    rdi,rax
    c5c7:	mov    eax,edx
    c5c9:	cmp    r8d,edx
    c5cc:	jle    c5a2 <BZ2_hbMakeCodeLengths+0x1f2>
    c5ce:	add    eax,0x1
    c5d1:	movsxd r10,eax
    c5d4:	movsxd r11,DWORD PTR [rsp+r10*4+0x50]
    c5d9:	mov    r10,r11
    c5dc:	mov    r11d,DWORD PTR [rsp+r11*4+0x460]
    c5e4:	cmp    r11d,esi
    c5e7:	jge    c5a0 <BZ2_hbMakeCodeLengths+0x1f0>
    c5e9:	mov    esi,r11d
    c5ec:	mov    edi,r10d
    c5ef:	cmp    ebx,esi
    c5f1:	jge    c5a6 <BZ2_hbMakeCodeLengths+0x1f6>
    c5f3:	nop    DWORD PTR [rax+rax*1+0x0]
    c5f8:	mov    DWORD PTR [rsp+rcx*4+0x50],r13d
    c5fd:	mov    r15d,DWORD PTR [r12-0x4]
    c602:	movsxd r13,DWORD PTR [rsp+0x54]
    c607:	mov    DWORD PTR [rsp+0x54],r15d
    c60c:	cmp    r9d,0x1
    c610:	jle    c822 <BZ2_hbMakeCodeLengths+0x472>
    c616:	movsxd rax,r15d
    c619:	mov    edx,0x2
    c61e:	mov    ecx,0x1
    c623:	mov    ebx,DWORD PTR [rsp+rax*4+0x460]
    c62a:	jmp    c645 <BZ2_hbMakeCodeLengths+0x295>
    c62c:	nop    DWORD PTR [rax+0x0]
    c630:	mov    eax,edx
    c632:	cmp    ebx,esi
    c634:	jl     c688 <BZ2_hbMakeCodeLengths+0x2d8>
    c636:	lea    edx,[rax+rax*1]
    c639:	mov    DWORD PTR [rsp+rcx*4+0x50],edi
    c63d:	movsxd rcx,eax
    c640:	cmp    r9d,edx
    c643:	jl     c688 <BZ2_hbMakeCodeLengths+0x2d8>
    c645:	movsxd rax,edx
    c648:	movsxd rax,DWORD PTR [rsp+rax*4+0x50]
    c64d:	mov    esi,DWORD PTR [rsp+rax*4+0x460]
    c654:	mov    rdi,rax
    c657:	mov    eax,edx
    c659:	cmp    r9d,edx
    c65c:	jle    c632 <BZ2_hbMakeCodeLengths+0x282>
    c65e:	add    eax,0x1
    c661:	movsxd r10,eax
    c664:	movsxd r11,DWORD PTR [rsp+r10*4+0x50]
    c669:	mov    r10,r11
    c66c:	mov    r11d,DWORD PTR [rsp+r11*4+0x460]
    c674:	cmp    r11d,esi
    c677:	jge    c630 <BZ2_hbMakeCodeLengths+0x280>
    c679:	mov    esi,r11d
    c67c:	mov    edi,r10d
    c67f:	cmp    ebx,esi
    c681:	jge    c636 <BZ2_hbMakeCodeLengths+0x286>
    c683:	nop    DWORD PTR [rax+rax*1+0x0]
    c688:	mov    DWORD PTR [rsp+rcx*4+0x50],r15d
    c68d:	mov    eax,DWORD PTR [rsp+r14*4+0x460]
    c695:	mov    edi,ebp
    c697:	mov    ecx,DWORD PTR [rsp+r13*4+0x460]
    c69f:	mov    DWORD PTR [rsp+r13*4+0xc70],ebp
    c6a7:	movzx  r10d,al
    c6ab:	mov    DWORD PTR [rsp+r14*4+0xc70],ebp
    c6b3:	movzx  edx,cl
    c6b6:	mov    DWORD PTR [r12-0x4],ebp
    c6bb:	cmp    edx,r10d
    c6be:	cmovge r10d,edx
    c6c2:	xor    cl,cl
    c6c4:	xor    al,al
    c6c6:	mov    edx,r8d
    c6c9:	add    eax,ecx
    c6cb:	sar    edx,1
    c6cd:	add    r10d,0x1
    c6d1:	or     r10d,eax
    c6d4:	mov    rax,QWORD PTR [rsp+0x10]
    c6d9:	mov    DWORD PTR [rax+rbp*4],r10d
    c6dd:	mov    rax,QWORD PTR [rsp+0x8]
    c6e2:	mov    DWORD PTR [rax+rbp*4],0xffffffff
    c6e9:	movsxd rax,edx
    c6ec:	movsxd rax,DWORD PTR [rsp+rax*4+0x50]
    c6f1:	mov    rcx,rax
    c6f4:	cmp    r10d,DWORD PTR [rsp+rax*4+0x460]
    c6fc:	jge    c800 <BZ2_hbMakeCodeLengths+0x450>
    c702:	movsxd rax,r8d
    c705:	jmp    c712 <BZ2_hbMakeCodeLengths+0x362>
    c707:	nop    WORD PTR [rax+rax*1+0x0]
    c710:	mov    edx,esi
    c712:	mov    esi,edx
    c714:	mov    DWORD PTR [rsp+rax*4+0x50],ecx
    c718:	sar    esi,1
    c71a:	movsxd rax,esi
    c71d:	movsxd r11,DWORD PTR [rsp+rax*4+0x50]
    c722:	movsxd rax,edx
    c725:	mov    rcx,r11
    c728:	cmp    r10d,DWORD PTR [rsp+r11*4+0x460]
    c730:	jl     c710 <BZ2_hbMakeCodeLengths+0x360>
    c732:	movsxd rdx,edx
    c735:	add    rbp,0x1
    c739:	sub    r12,0x4
    c73d:	sub    r9d,0x1
    c741:	mov    DWORD PTR [rsp+rdx*4+0x50],edi
    c745:	cmp    r8d,0x1
    c749:	jne    c568 <BZ2_hbMakeCodeLengths+0x1b8>
    c74f:	cmp    DWORD PTR [rsp+0x44],0x203
    c757:	jle    c763 <BZ2_hbMakeCodeLengths+0x3b3>
    c759:	mov    edi,0x7d2
    c75e:	call   5120 <BZ2_bz__AssertH__fail>
    c763:	mov    r8,QWORD PTR [rsp+0x20]
    c768:	mov    r9d,DWORD PTR [rsp+0x28]
    c76d:	mov    ecx,0x1
    c772:	xor    esi,esi
    c774:	mov    r10d,DWORD PTR [rsp+0x2c]
    c779:	mov    r11,QWORD PTR [rsp+0x8]
    c77e:	mov    edi,0x1
    c783:	nop    DWORD PTR [rax+rax*1+0x0]
    c788:	movsxd rax,DWORD PTR [r11+rcx*4]
    c78c:	xor    edx,edx
    c78e:	test   eax,eax
    c790:	js     c7f8 <BZ2_hbMakeCodeLengths+0x448>
    c792:	nop    WORD PTR [rax+rax*1+0x0]
    c798:	movsxd rax,DWORD PTR [rsp+rax*4+0xc70]
    c7a0:	add    edx,0x1
    c7a3:	test   eax,eax
    c7a5:	jns    c798 <BZ2_hbMakeCodeLengths+0x3e8>
    c7a7:	mov    eax,edx
    c7a9:	cmp    r10d,edx
    c7ac:	mov    BYTE PTR [r8+rcx*1-0x1],al
    c7b1:	cmovl  esi,edi
    c7b4:	add    rcx,0x1
    c7b8:	cmp    r9d,ecx
    c7bb:	jge    c788 <BZ2_hbMakeCodeLengths+0x3d8>
    c7bd:	test   sil,sil
    c7c0:	je     c82c <BZ2_hbMakeCodeLengths+0x47c>
    c7c2:	mov    rsi,QWORD PTR [rsp+0x48]
    c7c7:	lea    rdx,[rsp+0x464]
    c7cf:	nop
    c7d0:	mov    eax,DWORD PTR [rdx]
    c7d2:	add    rdx,0x4
    c7d6:	mov    ecx,eax
    c7d8:	shr    eax,0x1f
    c7db:	sar    ecx,0x8
    c7de:	add    eax,ecx
    c7e0:	sar    eax,1
    c7e2:	add    eax,0x1
    c7e5:	shl    eax,0x8
    c7e8:	mov    DWORD PTR [rdx-0x4],eax
    c7eb:	cmp    rsi,rdx
    c7ee:	jne    c7d0 <BZ2_hbMakeCodeLengths+0x420>
    c7f0:	jmp    c480 <BZ2_hbMakeCodeLengths+0xd0>
    c7f5:	nop    DWORD PTR [rax]
    c7f8:	xor    eax,eax
    c7fa:	jmp    c7a9 <BZ2_hbMakeCodeLengths+0x3f9>
    c7fc:	nop    DWORD PTR [rax+0x0]
    c800:	mov    edx,r8d
    c803:	jmp    c732 <BZ2_hbMakeCodeLengths+0x382>
    c808:	nop    DWORD PTR [rax+rax*1+0x0]
    c810:	mov    edx,r8d
    c813:	jmp    c532 <BZ2_hbMakeCodeLengths+0x182>
    c818:	mov    ecx,0x1
    c81d:	jmp    c5f8 <BZ2_hbMakeCodeLengths+0x248>
    c822:	mov    ecx,0x1
    c827:	jmp    c688 <BZ2_hbMakeCodeLengths+0x2d8>
    c82c:	mov    rax,QWORD PTR [rsp+0x1488]
    c834:	xor    rax,QWORD PTR fs:0x28
    c83d:	jne    c85a <BZ2_hbMakeCodeLengths+0x4aa>
    c83f:	add    rsp,0x1498
    c846:	pop    rbx
    c847:	pop    rbp
    c848:	pop    r12
    c84a:	pop    r13
    c84c:	pop    r14
    c84e:	pop    r15
    c850:	ret    
    c851:	lea    r10d,[rdx-0x1]
    c855:	jmp    c436 <BZ2_hbMakeCodeLengths+0x86>
    c85a:	call   11a0 <__stack_chk_fail@plt>
    c85f:	nop

000000000000c860 <BZ2_hbAssignCodes>:
    c860:	endbr64 
    c864:	cmp    edx,ecx
    c866:	jg     c8af <BZ2_hbAssignCodes+0x4f>
    c868:	lea    r11d,[rcx+0x1]
    c86c:	xor    r9d,r9d
    c86f:	lea    r10d,[r8-0x1]
    c873:	nop    DWORD PTR [rax+rax*1+0x0]
    c878:	xor    eax,eax
    c87a:	test   r8d,r8d
    c87d:	jg     c88b <BZ2_hbAssignCodes+0x2b>
    c87f:	jmp    c8a4 <BZ2_hbAssignCodes+0x44>
    c881:	nop    DWORD PTR [rax+0x0]
    c888:	mov    rax,rcx
    c88b:	movzx  ecx,BYTE PTR [rsi+rax*1]
    c88f:	cmp    ecx,edx
    c891:	jne    c89b <BZ2_hbAssignCodes+0x3b>
    c893:	mov    DWORD PTR [rdi+rax*4],r9d
    c897:	add    r9d,0x1
    c89b:	lea    rcx,[rax+0x1]
    c89f:	cmp    r10,rax
    c8a2:	jne    c888 <BZ2_hbAssignCodes+0x28>
    c8a4:	add    edx,0x1
    c8a7:	add    r9d,r9d
    c8aa:	cmp    edx,r11d
    c8ad:	jne    c878 <BZ2_hbAssignCodes+0x18>
    c8af:	ret    

000000000000c8b0 <BZ2_hbCreateDecodeTables>:
    c8b0:	endbr64 
    c8b4:	push   r13
    c8b6:	push   r12
    c8b8:	push   rbp
    c8b9:	push   rbx
    c8ba:	mov    ebx,r8d
    c8bd:	mov    r12d,DWORD PTR [rsp+0x28]
    c8c2:	cmp    r8d,r9d
    c8c5:	jg     c91a <BZ2_hbCreateDecodeTables+0x6a>
    c8c7:	mov    rbp,rdx
    c8ca:	mov    r11d,r8d
    c8cd:	lea    r13d,[r9+0x1]
    c8d1:	xor    edx,edx
    c8d3:	lea    r8d,[r12-0x1]
    c8d8:	nop    DWORD PTR [rax+rax*1+0x0]
    c8e0:	xor    eax,eax
    c8e2:	test   r12d,r12d
    c8e5:	jg     c8f3 <BZ2_hbCreateDecodeTables+0x43>
    c8e7:	jmp    c911 <BZ2_hbCreateDecodeTables+0x61>
    c8e9:	nop    DWORD PTR [rax+0x0]
    c8f0:	mov    rax,r10
    c8f3:	movzx  r10d,BYTE PTR [rcx+rax*1]
    c8f8:	cmp    r10d,r11d
    c8fb:	jne    c908 <BZ2_hbCreateDecodeTables+0x58>
    c8fd:	movsxd r10,edx
    c900:	add    edx,0x1
    c903:	mov    DWORD PTR [rbp+r10*4+0x0],eax
    c908:	lea    r10,[rax+0x1]
    c90c:	cmp    r8,rax
    c90f:	jne    c8f0 <BZ2_hbCreateDecodeTables+0x40>
    c911:	add    r11d,0x1
    c915:	cmp    r11d,r13d
    c918:	jne    c8e0 <BZ2_hbCreateDecodeTables+0x30>
    c91a:	mov    rax,rsi
    c91d:	lea    rdx,[rsi+0x5c]
    c921:	nop    DWORD PTR [rax+0x0]
    c928:	mov    DWORD PTR [rax],0x0
    c92e:	add    rax,0x4
    c932:	cmp    rdx,rax
    c935:	jne    c928 <BZ2_hbCreateDecodeTables+0x78>
    c937:	test   r12d,r12d
    c93a:	jle    c961 <BZ2_hbCreateDecodeTables+0xb1>
    c93c:	lea    eax,[r12-0x1]
    c941:	lea    r8,[rcx+rax*1+0x1]
    c946:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c950:	movzx  eax,BYTE PTR [rcx]
    c953:	add    rcx,0x1
    c957:	add    DWORD PTR [rsi+rax*4+0x4],0x1
    c95c:	cmp    r8,rcx
    c95f:	jne    c950 <BZ2_hbCreateDecodeTables+0xa0>
    c961:	lea    rax,[rsi+0x4]
    c965:	nop    DWORD PTR [rax]
    c968:	mov    ecx,DWORD PTR [rax-0x4]
    c96b:	add    DWORD PTR [rax],ecx
    c96d:	add    rax,0x4
    c971:	cmp    rdx,rax
    c974:	jne    c968 <BZ2_hbCreateDecodeTables+0xb8>
    c976:	mov    rax,rdi
    c979:	lea    rdx,[rdi+0x5c]
    c97d:	nop    DWORD PTR [rax]
    c980:	mov    DWORD PTR [rax],0x0
    c986:	add    rax,0x4
    c98a:	cmp    rdx,rax
    c98d:	jne    c980 <BZ2_hbCreateDecodeTables+0xd0>
    c98f:	cmp    ebx,r9d
    c992:	jg     c9b8 <BZ2_hbCreateDecodeTables+0x108>
    c994:	movsxd rdx,ebx
    c997:	xor    eax,eax
    c999:	nop    DWORD PTR [rax+0x0]
    c9a0:	add    eax,DWORD PTR [rsi+rdx*4+0x4]
    c9a4:	sub    eax,DWORD PTR [rsi+rdx*4]
    c9a7:	lea    ecx,[rax-0x1]
    c9aa:	add    eax,eax
    c9ac:	mov    DWORD PTR [rdi+rdx*4],ecx
    c9af:	add    rdx,0x1
    c9b3:	cmp    r9d,edx
    c9b6:	jge    c9a0 <BZ2_hbCreateDecodeTables+0xf0>
    c9b8:	lea    eax,[rbx+0x1]
    c9bb:	cmp    r9d,eax
    c9be:	jl     c9df <BZ2_hbCreateDecodeTables+0x12f>
    c9c0:	cdqe   
    c9c2:	nop    WORD PTR [rax+rax*1+0x0]
    c9c8:	mov    edx,DWORD PTR [rdi+rax*4-0x4]
    c9cc:	lea    edx,[rdx+rdx*1+0x2]
    c9d0:	sub    edx,DWORD PTR [rsi+rax*4]
    c9d3:	mov    DWORD PTR [rsi+rax*4],edx
    c9d6:	add    rax,0x1
    c9da:	cmp    r9d,eax
    c9dd:	jge    c9c8 <BZ2_hbCreateDecodeTables+0x118>
    c9df:	pop    rbx
    c9e0:	pop    rbp
    c9e1:	pop    r12
    c9e3:	pop    r13
    c9e5:	ret    
    c9e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000c9f0 <__libc_csu_init>:
    c9f0:	endbr64 
    c9f4:	push   r15
    c9f6:	lea    r15,[rip+0x4293]        # 10c90 <__frame_dummy_init_array_entry>
    c9fd:	push   r14
    c9ff:	mov    r14,rdx
    ca02:	push   r13
    ca04:	mov    r13,rsi
    ca07:	push   r12
    ca09:	mov    r12d,edi
    ca0c:	push   rbp
    ca0d:	lea    rbp,[rip+0x4284]        # 10c98 <__do_global_dtors_aux_fini_array_entry>
    ca14:	push   rbx
    ca15:	sub    rbp,r15
    ca18:	sub    rsp,0x8
    ca1c:	call   1000 <_init>
    ca21:	sar    rbp,0x3
    ca25:	je     ca46 <__libc_csu_init+0x56>
    ca27:	xor    ebx,ebx
    ca29:	nop    DWORD PTR [rax+0x0]
    ca30:	mov    rdx,r14
    ca33:	mov    rsi,r13
    ca36:	mov    edi,r12d
    ca39:	call   QWORD PTR [r15+rbx*8]
    ca3d:	add    rbx,0x1
    ca41:	cmp    rbp,rbx
    ca44:	jne    ca30 <__libc_csu_init+0x40>
    ca46:	add    rsp,0x8
    ca4a:	pop    rbx
    ca4b:	pop    rbp
    ca4c:	pop    r12
    ca4e:	pop    r13
    ca50:	pop    r14
    ca52:	pop    r15
    ca54:	ret    
    ca55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000ca60 <__libc_csu_fini>:
    ca60:	endbr64 
    ca64:	ret    

Disassembly of section .fini:

000000000000ca68 <_fini>:
    ca68:	endbr64 
    ca6c:	sub    rsp,0x8
    ca70:	add    rsp,0x8
    ca74:	ret    
