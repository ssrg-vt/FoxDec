
hmmer:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	endbr64 
    3004:	sub    rsp,0x8
    3008:	mov    rax,QWORD PTR [rip+0x49fd9]        # 4cfe8 <__gmon_start__>
    300f:	test   rax,rax
    3012:	je     3016 <_init+0x16>
    3014:	call   rax
    3016:	add    rsp,0x8
    301a:	ret    

Disassembly of section .plt:

0000000000003020 <.plt>:
    3020:	push   QWORD PTR [rip+0x49da2]        # 4cdc8 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	bnd jmp QWORD PTR [rip+0x49da3]        # 4cdd0 <_GLOBAL_OFFSET_TABLE_+0x10>
    302d:	nop    DWORD PTR [rax]
    3030:	endbr64 
    3034:	push   0x0
    3039:	bnd jmp 3020 <.plt>
    303f:	nop
    3040:	endbr64 
    3044:	push   0x1
    3049:	bnd jmp 3020 <.plt>
    304f:	nop
    3050:	endbr64 
    3054:	push   0x2
    3059:	bnd jmp 3020 <.plt>
    305f:	nop
    3060:	endbr64 
    3064:	push   0x3
    3069:	bnd jmp 3020 <.plt>
    306f:	nop
    3070:	endbr64 
    3074:	push   0x4
    3079:	bnd jmp 3020 <.plt>
    307f:	nop
    3080:	endbr64 
    3084:	push   0x5
    3089:	bnd jmp 3020 <.plt>
    308f:	nop
    3090:	endbr64 
    3094:	push   0x6
    3099:	bnd jmp 3020 <.plt>
    309f:	nop
    30a0:	endbr64 
    30a4:	push   0x7
    30a9:	bnd jmp 3020 <.plt>
    30af:	nop
    30b0:	endbr64 
    30b4:	push   0x8
    30b9:	bnd jmp 3020 <.plt>
    30bf:	nop
    30c0:	endbr64 
    30c4:	push   0x9
    30c9:	bnd jmp 3020 <.plt>
    30cf:	nop
    30d0:	endbr64 
    30d4:	push   0xa
    30d9:	bnd jmp 3020 <.plt>
    30df:	nop
    30e0:	endbr64 
    30e4:	push   0xb
    30e9:	bnd jmp 3020 <.plt>
    30ef:	nop
    30f0:	endbr64 
    30f4:	push   0xc
    30f9:	bnd jmp 3020 <.plt>
    30ff:	nop
    3100:	endbr64 
    3104:	push   0xd
    3109:	bnd jmp 3020 <.plt>
    310f:	nop
    3110:	endbr64 
    3114:	push   0xe
    3119:	bnd jmp 3020 <.plt>
    311f:	nop
    3120:	endbr64 
    3124:	push   0xf
    3129:	bnd jmp 3020 <.plt>
    312f:	nop
    3130:	endbr64 
    3134:	push   0x10
    3139:	bnd jmp 3020 <.plt>
    313f:	nop
    3140:	endbr64 
    3144:	push   0x11
    3149:	bnd jmp 3020 <.plt>
    314f:	nop
    3150:	endbr64 
    3154:	push   0x12
    3159:	bnd jmp 3020 <.plt>
    315f:	nop
    3160:	endbr64 
    3164:	push   0x13
    3169:	bnd jmp 3020 <.plt>
    316f:	nop
    3170:	endbr64 
    3174:	push   0x14
    3179:	bnd jmp 3020 <.plt>
    317f:	nop
    3180:	endbr64 
    3184:	push   0x15
    3189:	bnd jmp 3020 <.plt>
    318f:	nop
    3190:	endbr64 
    3194:	push   0x16
    3199:	bnd jmp 3020 <.plt>
    319f:	nop
    31a0:	endbr64 
    31a4:	push   0x17
    31a9:	bnd jmp 3020 <.plt>
    31af:	nop
    31b0:	endbr64 
    31b4:	push   0x18
    31b9:	bnd jmp 3020 <.plt>
    31bf:	nop
    31c0:	endbr64 
    31c4:	push   0x19
    31c9:	bnd jmp 3020 <.plt>
    31cf:	nop
    31d0:	endbr64 
    31d4:	push   0x1a
    31d9:	bnd jmp 3020 <.plt>
    31df:	nop
    31e0:	endbr64 
    31e4:	push   0x1b
    31e9:	bnd jmp 3020 <.plt>
    31ef:	nop
    31f0:	endbr64 
    31f4:	push   0x1c
    31f9:	bnd jmp 3020 <.plt>
    31ff:	nop
    3200:	endbr64 
    3204:	push   0x1d
    3209:	bnd jmp 3020 <.plt>
    320f:	nop
    3210:	endbr64 
    3214:	push   0x1e
    3219:	bnd jmp 3020 <.plt>
    321f:	nop
    3220:	endbr64 
    3224:	push   0x1f
    3229:	bnd jmp 3020 <.plt>
    322f:	nop
    3230:	endbr64 
    3234:	push   0x20
    3239:	bnd jmp 3020 <.plt>
    323f:	nop
    3240:	endbr64 
    3244:	push   0x21
    3249:	bnd jmp 3020 <.plt>
    324f:	nop
    3250:	endbr64 
    3254:	push   0x22
    3259:	bnd jmp 3020 <.plt>
    325f:	nop
    3260:	endbr64 
    3264:	push   0x23
    3269:	bnd jmp 3020 <.plt>
    326f:	nop
    3270:	endbr64 
    3274:	push   0x24
    3279:	bnd jmp 3020 <.plt>
    327f:	nop
    3280:	endbr64 
    3284:	push   0x25
    3289:	bnd jmp 3020 <.plt>
    328f:	nop
    3290:	endbr64 
    3294:	push   0x26
    3299:	bnd jmp 3020 <.plt>
    329f:	nop
    32a0:	endbr64 
    32a4:	push   0x27
    32a9:	bnd jmp 3020 <.plt>
    32af:	nop
    32b0:	endbr64 
    32b4:	push   0x28
    32b9:	bnd jmp 3020 <.plt>
    32bf:	nop
    32c0:	endbr64 
    32c4:	push   0x29
    32c9:	bnd jmp 3020 <.plt>
    32cf:	nop
    32d0:	endbr64 
    32d4:	push   0x2a
    32d9:	bnd jmp 3020 <.plt>
    32df:	nop
    32e0:	endbr64 
    32e4:	push   0x2b
    32e9:	bnd jmp 3020 <.plt>
    32ef:	nop
    32f0:	endbr64 
    32f4:	push   0x2c
    32f9:	bnd jmp 3020 <.plt>
    32ff:	nop
    3300:	endbr64 
    3304:	push   0x2d
    3309:	bnd jmp 3020 <.plt>
    330f:	nop
    3310:	endbr64 
    3314:	push   0x2e
    3319:	bnd jmp 3020 <.plt>
    331f:	nop
    3320:	endbr64 
    3324:	push   0x2f
    3329:	bnd jmp 3020 <.plt>
    332f:	nop
    3330:	endbr64 
    3334:	push   0x30
    3339:	bnd jmp 3020 <.plt>
    333f:	nop
    3340:	endbr64 
    3344:	push   0x31
    3349:	bnd jmp 3020 <.plt>
    334f:	nop
    3350:	endbr64 
    3354:	push   0x32
    3359:	bnd jmp 3020 <.plt>
    335f:	nop
    3360:	endbr64 
    3364:	push   0x33
    3369:	bnd jmp 3020 <.plt>
    336f:	nop
    3370:	endbr64 
    3374:	push   0x34
    3379:	bnd jmp 3020 <.plt>
    337f:	nop
    3380:	endbr64 
    3384:	push   0x35
    3389:	bnd jmp 3020 <.plt>
    338f:	nop
    3390:	endbr64 
    3394:	push   0x36
    3399:	bnd jmp 3020 <.plt>
    339f:	nop
    33a0:	endbr64 
    33a4:	push   0x37
    33a9:	bnd jmp 3020 <.plt>
    33af:	nop
    33b0:	endbr64 
    33b4:	push   0x38
    33b9:	bnd jmp 3020 <.plt>
    33bf:	nop
    33c0:	endbr64 
    33c4:	push   0x39
    33c9:	bnd jmp 3020 <.plt>
    33cf:	nop
    33d0:	endbr64 
    33d4:	push   0x3a
    33d9:	bnd jmp 3020 <.plt>
    33df:	nop
    33e0:	endbr64 
    33e4:	push   0x3b
    33e9:	bnd jmp 3020 <.plt>
    33ef:	nop
    33f0:	endbr64 
    33f4:	push   0x3c
    33f9:	bnd jmp 3020 <.plt>
    33ff:	nop
    3400:	endbr64 
    3404:	push   0x3d
    3409:	bnd jmp 3020 <.plt>
    340f:	nop
    3410:	endbr64 
    3414:	push   0x3e
    3419:	bnd jmp 3020 <.plt>
    341f:	nop
    3420:	endbr64 
    3424:	push   0x3f
    3429:	bnd jmp 3020 <.plt>
    342f:	nop

Disassembly of section .plt.got:

0000000000003430 <__cxa_finalize@plt>:
    3430:	endbr64 
    3434:	bnd jmp QWORD PTR [rip+0x49bbd]        # 4cff8 <__cxa_finalize@GLIBC_2.2.5>
    343b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

0000000000003440 <__ctype_toupper_loc@plt>:
    3440:	endbr64 
    3444:	bnd jmp QWORD PTR [rip+0x4998d]        # 4cdd8 <__ctype_toupper_loc@GLIBC_2.3>
    344b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003450 <getenv@plt>:
    3450:	endbr64 
    3454:	bnd jmp QWORD PTR [rip+0x49985]        # 4cde0 <getenv@GLIBC_2.2.5>
    345b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003460 <free@plt>:
    3460:	endbr64 
    3464:	bnd jmp QWORD PTR [rip+0x4997d]        # 4cde8 <free@GLIBC_2.2.5>
    346b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003470 <putchar@plt>:
    3470:	endbr64 
    3474:	bnd jmp QWORD PTR [rip+0x49975]        # 4cdf0 <putchar@GLIBC_2.2.5>
    347b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003480 <localtime@plt>:
    3480:	endbr64 
    3484:	bnd jmp QWORD PTR [rip+0x4996d]        # 4cdf8 <localtime@GLIBC_2.2.5>
    348b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003490 <__vfprintf_chk@plt>:
    3490:	endbr64 
    3494:	bnd jmp QWORD PTR [rip+0x49965]        # 4ce00 <__vfprintf_chk@GLIBC_2.3.4>
    349b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000034a0 <abort@plt>:
    34a0:	endbr64 
    34a4:	bnd jmp QWORD PTR [rip+0x4995d]        # 4ce08 <abort@GLIBC_2.2.5>
    34ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000034b0 <strncpy@plt>:
    34b0:	endbr64 
    34b4:	bnd jmp QWORD PTR [rip+0x49955]        # 4ce10 <strncpy@GLIBC_2.2.5>
    34bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000034c0 <remove@plt>:
    34c0:	endbr64 
    34c4:	bnd jmp QWORD PTR [rip+0x4994d]        # 4ce18 <remove@GLIBC_2.2.5>
    34cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000034d0 <strncmp@plt>:
    34d0:	endbr64 
    34d4:	bnd jmp QWORD PTR [rip+0x49945]        # 4ce20 <strncmp@GLIBC_2.2.5>
    34db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000034e0 <strcpy@plt>:
    34e0:	endbr64 
    34e4:	bnd jmp QWORD PTR [rip+0x4993d]        # 4ce28 <strcpy@GLIBC_2.2.5>
    34eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000034f0 <puts@plt>:
    34f0:	endbr64 
    34f4:	bnd jmp QWORD PTR [rip+0x49935]        # 4ce30 <puts@GLIBC_2.2.5>
    34fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003500 <fread@plt>:
    3500:	endbr64 
    3504:	bnd jmp QWORD PTR [rip+0x4992d]        # 4ce38 <fread@GLIBC_2.2.5>
    350b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003510 <strtod@plt>:
    3510:	endbr64 
    3514:	bnd jmp QWORD PTR [rip+0x49925]        # 4ce40 <strtod@GLIBC_2.2.5>
    351b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003520 <pow@plt>:
    3520:	endbr64 
    3524:	bnd jmp QWORD PTR [rip+0x4991d]        # 4ce48 <pow@GLIBC_2.29>
    352b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003530 <fclose@plt>:
    3530:	endbr64 
    3534:	bnd jmp QWORD PTR [rip+0x49915]        # 4ce50 <fclose@GLIBC_2.2.5>
    353b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003540 <ctime@plt>:
    3540:	endbr64 
    3544:	bnd jmp QWORD PTR [rip+0x4990d]        # 4ce58 <ctime@GLIBC_2.2.5>
    354b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003550 <stpcpy@plt>:
    3550:	endbr64 
    3554:	bnd jmp QWORD PTR [rip+0x49905]        # 4ce60 <stpcpy@GLIBC_2.2.5>
    355b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003560 <strlen@plt>:
    3560:	endbr64 
    3564:	bnd jmp QWORD PTR [rip+0x498fd]        # 4ce68 <strlen@GLIBC_2.2.5>
    356b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003570 <__stack_chk_fail@plt>:
    3570:	endbr64 
    3574:	bnd jmp QWORD PTR [rip+0x498f5]        # 4ce70 <__stack_chk_fail@GLIBC_2.4>
    357b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003580 <system@plt>:
    3580:	endbr64 
    3584:	bnd jmp QWORD PTR [rip+0x498ed]        # 4ce78 <system@GLIBC_2.2.5>
    358b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003590 <strchr@plt>:
    3590:	endbr64 
    3594:	bnd jmp QWORD PTR [rip+0x498e5]        # 4ce80 <strchr@GLIBC_2.2.5>
    359b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000035a0 <rewind@plt>:
    35a0:	endbr64 
    35a4:	bnd jmp QWORD PTR [rip+0x498dd]        # 4ce88 <rewind@GLIBC_2.2.5>
    35ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000035b0 <strrchr@plt>:
    35b0:	endbr64 
    35b4:	bnd jmp QWORD PTR [rip+0x498d5]        # 4ce90 <strrchr@GLIBC_2.2.5>
    35bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000035c0 <fputs@plt>:
    35c0:	endbr64 
    35c4:	bnd jmp QWORD PTR [rip+0x498cd]        # 4ce98 <fputs@GLIBC_2.2.5>
    35cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000035d0 <memset@plt>:
    35d0:	endbr64 
    35d4:	bnd jmp QWORD PTR [rip+0x498c5]        # 4cea0 <memset@GLIBC_2.2.5>
    35db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000035e0 <log@plt>:
    35e0:	endbr64 
    35e4:	bnd jmp QWORD PTR [rip+0x498bd]        # 4cea8 <log@GLIBC_2.29>
    35eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000035f0 <strspn@plt>:
    35f0:	endbr64 
    35f4:	bnd jmp QWORD PTR [rip+0x498b5]        # 4ceb0 <strspn@GLIBC_2.2.5>
    35fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003600 <fputc@plt>:
    3600:	endbr64 
    3604:	bnd jmp QWORD PTR [rip+0x498ad]        # 4ceb8 <fputc@GLIBC_2.2.5>
    360b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003610 <strcspn@plt>:
    3610:	endbr64 
    3614:	bnd jmp QWORD PTR [rip+0x498a5]        # 4cec0 <strcspn@GLIBC_2.2.5>
    361b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003620 <fgets@plt>:
    3620:	endbr64 
    3624:	bnd jmp QWORD PTR [rip+0x4989d]        # 4cec8 <fgets@GLIBC_2.2.5>
    362b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003630 <calloc@plt>:
    3630:	endbr64 
    3634:	bnd jmp QWORD PTR [rip+0x49895]        # 4ced0 <calloc@GLIBC_2.2.5>
    363b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003640 <strcmp@plt>:
    3640:	endbr64 
    3644:	bnd jmp QWORD PTR [rip+0x4988d]        # 4ced8 <strcmp@GLIBC_2.2.5>
    364b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003650 <ftell@plt>:
    3650:	endbr64 
    3654:	bnd jmp QWORD PTR [rip+0x49885]        # 4cee0 <ftell@GLIBC_2.2.5>
    365b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003660 <feof@plt>:
    3660:	endbr64 
    3664:	bnd jmp QWORD PTR [rip+0x4987d]        # 4cee8 <feof@GLIBC_2.2.5>
    366b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003670 <strtol@plt>:
    3670:	endbr64 
    3674:	bnd jmp QWORD PTR [rip+0x49875]        # 4cef0 <strtol@GLIBC_2.2.5>
    367b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003680 <memcpy@plt>:
    3680:	endbr64 
    3684:	bnd jmp QWORD PTR [rip+0x4986d]        # 4cef8 <memcpy@GLIBC_2.14>
    368b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003690 <time@plt>:
    3690:	endbr64 
    3694:	bnd jmp QWORD PTR [rip+0x49865]        # 4cf00 <time@GLIBC_2.2.5>
    369b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036a0 <sqrtf@plt>:
    36a0:	endbr64 
    36a4:	bnd jmp QWORD PTR [rip+0x4985d]        # 4cf08 <sqrtf@GLIBC_2.2.5>
    36ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036b0 <malloc@plt>:
    36b0:	endbr64 
    36b4:	bnd jmp QWORD PTR [rip+0x49855]        # 4cf10 <malloc@GLIBC_2.2.5>
    36bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036c0 <fflush@plt>:
    36c0:	endbr64 
    36c4:	bnd jmp QWORD PTR [rip+0x4984d]        # 4cf18 <fflush@GLIBC_2.2.5>
    36cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036d0 <strpbrk@plt>:
    36d0:	endbr64 
    36d4:	bnd jmp QWORD PTR [rip+0x49845]        # 4cf20 <strpbrk@GLIBC_2.2.5>
    36db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036e0 <fseek@plt>:
    36e0:	endbr64 
    36e4:	bnd jmp QWORD PTR [rip+0x4983d]        # 4cf28 <fseek@GLIBC_2.2.5>
    36eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036f0 <realloc@plt>:
    36f0:	endbr64 
    36f4:	bnd jmp QWORD PTR [rip+0x49835]        # 4cf30 <realloc@GLIBC_2.2.5>
    36fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003700 <__strcpy_chk@plt>:
    3700:	endbr64 
    3704:	bnd jmp QWORD PTR [rip+0x4982d]        # 4cf38 <__strcpy_chk@GLIBC_2.3.4>
    370b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003710 <__printf_chk@plt>:
    3710:	endbr64 
    3714:	bnd jmp QWORD PTR [rip+0x49825]        # 4cf40 <__printf_chk@GLIBC_2.3.4>
    371b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003720 <__fread_chk@plt>:
    3720:	endbr64 
    3724:	bnd jmp QWORD PTR [rip+0x4981d]        # 4cf48 <__fread_chk@GLIBC_2.7>
    372b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003730 <strftime@plt>:
    3730:	endbr64 
    3734:	bnd jmp QWORD PTR [rip+0x49815]        # 4cf50 <strftime@GLIBC_2.2.5>
    373b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003740 <memmove@plt>:
    3740:	endbr64 
    3744:	bnd jmp QWORD PTR [rip+0x4980d]        # 4cf58 <memmove@GLIBC_2.2.5>
    374b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003750 <fopen@plt>:
    3750:	endbr64 
    3754:	bnd jmp QWORD PTR [rip+0x49805]        # 4cf60 <fopen@GLIBC_2.2.5>
    375b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003760 <perror@plt>:
    3760:	endbr64 
    3764:	bnd jmp QWORD PTR [rip+0x497fd]        # 4cf68 <perror@GLIBC_2.2.5>
    376b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003770 <strtok@plt>:
    3770:	endbr64 
    3774:	bnd jmp QWORD PTR [rip+0x497f5]        # 4cf70 <strtok@GLIBC_2.2.5>
    377b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003780 <strtoul@plt>:
    3780:	endbr64 
    3784:	bnd jmp QWORD PTR [rip+0x497ed]        # 4cf78 <strtoul@GLIBC_2.2.5>
    378b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003790 <strcat@plt>:
    3790:	endbr64 
    3794:	bnd jmp QWORD PTR [rip+0x497e5]        # 4cf80 <strcat@GLIBC_2.2.5>
    379b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037a0 <exit@plt>:
    37a0:	endbr64 
    37a4:	bnd jmp QWORD PTR [rip+0x497dd]        # 4cf88 <exit@GLIBC_2.2.5>
    37ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037b0 <fwrite@plt>:
    37b0:	endbr64 
    37b4:	bnd jmp QWORD PTR [rip+0x497d5]        # 4cf90 <fwrite@GLIBC_2.2.5>
    37bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037c0 <__fprintf_chk@plt>:
    37c0:	endbr64 
    37c4:	bnd jmp QWORD PTR [rip+0x497cd]        # 4cf98 <__fprintf_chk@GLIBC_2.3.4>
    37cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037d0 <__strncat_chk@plt>:
    37d0:	endbr64 
    37d4:	bnd jmp QWORD PTR [rip+0x497c5]        # 4cfa0 <__strncat_chk@GLIBC_2.3.4>
    37db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037e0 <sqrt@plt>:
    37e0:	endbr64 
    37e4:	bnd jmp QWORD PTR [rip+0x497bd]        # 4cfa8 <sqrt@GLIBC_2.2.5>
    37eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037f0 <strstr@plt>:
    37f0:	endbr64 
    37f4:	bnd jmp QWORD PTR [rip+0x497b5]        # 4cfb0 <strstr@GLIBC_2.2.5>
    37fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003800 <exp@plt>:
    3800:	endbr64 
    3804:	bnd jmp QWORD PTR [rip+0x497ad]        # 4cfb8 <exp@GLIBC_2.29>
    380b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003810 <__ctype_tolower_loc@plt>:
    3810:	endbr64 
    3814:	bnd jmp QWORD PTR [rip+0x497a5]        # 4cfc0 <__ctype_tolower_loc@GLIBC_2.3>
    381b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003820 <__ctype_b_loc@plt>:
    3820:	endbr64 
    3824:	bnd jmp QWORD PTR [rip+0x4979d]        # 4cfc8 <__ctype_b_loc@GLIBC_2.3>
    382b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003830 <__sprintf_chk@plt>:
    3830:	endbr64 
    3834:	bnd jmp QWORD PTR [rip+0x49795]        # 4cfd0 <__sprintf_chk@GLIBC_2.3.4>
    383b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000003840 <sqd_regcomp.cold>:
    3840:	movzx  eax,BYTE PTR ds:0x0
    3848:	ud2    

000000000000384a <regmatch.cold>:
    384a:	movzx  eax,BYTE PTR ds:0x0
    3852:	ud2    

0000000000003854 <write_offset.cold>:
    3854:	call   34a0 <abort@plt>

0000000000003859 <SSIGetFilePosition.cold>:
    3859:	call   34a0 <abort@plt>

000000000000385e <SSIAddPrimaryKeyToIndex.cold>:
    385e:	call   34a0 <abort@plt>
    3863:	nop    WORD PTR cs:[rax+rax*1+0x0]
    386d:	nop    DWORD PTR [rax]

0000000000003870 <main>:
    3870:	endbr64 
    3874:	push   r15
    3876:	push   r14
    3878:	push   r13
    387a:	push   r12
    387c:	push   rbp
    387d:	mov    rbp,rsi
    3880:	push   rbx
    3881:	sub    rsp,0x288
    3888:	mov    rax,QWORD PTR fs:0x28
    3891:	mov    QWORD PTR [rsp+0x278],rax
    3899:	xor    eax,eax
    389b:	cmp    edi,0x3
    389e:	jne    4335 <main+0xac5>
    38a4:	mov    rax,QWORD PTR [rip+0x3b3f5]        # 3eca0 <_IO_stdin_used+0x1ca0>
    38ab:	movss  xmm0,DWORD PTR [rip+0x3ae59]        # 3e70c <_IO_stdin_used+0x170c>
    38b3:	mov    QWORD PTR [rsp+0x100],0x0
    38bf:	xor    r15d,r15d
    38c2:	mov    DWORD PTR [rsp+0x10],0x0
    38ca:	lea    r14,[rsp+0xa4]
    38d2:	lea    r13,[rsp+0xc8]
    38da:	mov    QWORD PTR [rsp+0xe8],rax
    38e2:	mov    rax,QWORD PTR [rip+0x3b3bf]        # 3eca8 <_IO_stdin_used+0x1ca8>
    38e9:	lea    rbx,[rsp+0xc0]
    38f1:	mov    DWORD PTR [rsp+0x40],0x0
    38f9:	mov    QWORD PTR [rsp+0xf8],rax
    3901:	mov    DWORD PTR [rsp+0x4],0x0
    3909:	mov    DWORD PTR [rsp+0x18],0x0
    3911:	mov    DWORD PTR [rsp+0x8],0x0
    3919:	mov    DWORD PTR [rsp+0x48],0x1
    3921:	mov    DWORD PTR [rsp],0x7fffffff
    3928:	movss  DWORD PTR [rsp+0xe0],xmm0
    3931:	movss  DWORD PTR [rsp+0xf0],xmm0
    393a:	nop    WORD PTR [rax+rax*1+0x0]
    3940:	push   r13
    3942:	mov    ecx,0x11
    3947:	mov    r9,r14
    394a:	mov    rsi,rbp
    394d:	push   rbx
    394e:	lea    rdx,[rip+0x49eeb]        # 4d840 <OPTIONS>
    3955:	mov    edi,0x3
    395a:	lea    r8,[rip+0x49d1f]        # 4d680 <usage>
    3961:	call   278d0 <Getopt>
    3966:	pop    rdx
    3967:	pop    rcx
    3968:	test   eax,eax
    396a:	je     3af8 <main+0x288>
    3970:	mov    r12,QWORD PTR [rsp+0xc0]
    3978:	movzx  eax,BYTE PTR [r12]
    397d:	cmp    eax,0x2d
    3980:	je     39f0 <main+0x180>
    3982:	mov    ecx,0x9
    3987:	mov    rsi,r12
    398a:	lea    rdi,[rip+0x3ad8a]        # 3e71b <_IO_stdin_used+0x171b>
    3991:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    3993:	seta   al
    3996:	sbb    al,0x0
    3998:	test   al,al
    399a:	je     3ae8 <main+0x278>
    39a0:	mov    ecx,0x6
    39a5:	mov    rsi,r12
    39a8:	lea    rdi,[rip+0x3a924]        # 3e2d3 <_IO_stdin_used+0x12d3>
    39af:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    39b1:	seta   al
    39b4:	sbb    al,0x0
    39b6:	test   al,al
    39b8:	je     4286 <main+0xa16>
    39be:	mov    ecx,0x9
    39c3:	mov    rsi,r12
    39c6:	lea    rdi,[rip+0x3ad57]        # 3e724 <_IO_stdin_used+0x1724>
    39cd:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    39cf:	seta   al
    39d2:	sbb    al,0x0
    39d4:	test   al,al
    39d6:	jne    3f60 <main+0x6f0>
    39dc:	mov    DWORD PTR [rsp+0x100],0x1
    39e7:	jmp    3940 <main+0xd0>
    39ec:	nop    DWORD PTR [rax+0x0]
    39f0:	cmp    BYTE PTR [r12+0x1],0x41
    39f6:	je     3a60 <main+0x1f0>
    39f8:	cmp    eax,0x2d
    39fb:	jne    3982 <main+0x112>
    39fd:	cmp    BYTE PTR [r12+0x1],0x45
    3a03:	je     3a88 <main+0x218>
    3a09:	cmp    eax,0x2d
    3a0c:	jne    3982 <main+0x112>
    3a12:	cmp    BYTE PTR [r12+0x1],0x54
    3a18:	je     3ab8 <main+0x248>
    3a1e:	cmp    eax,0x2d
    3a21:	jne    3982 <main+0x112>
    3a27:	cmp    BYTE PTR [r12+0x1],0x5a
    3a2d:	jne    3982 <main+0x112>
    3a33:	cmp    BYTE PTR [r12+0x2],0x0
    3a39:	jne    3982 <main+0x112>
    3a3f:	mov    rdi,QWORD PTR [rsp+0xc8]
    3a47:	mov    edx,0xa
    3a4c:	xor    esi,esi
    3a4e:	call   3670 <strtol@plt>
    3a53:	mov    DWORD PTR [rsp+0x104],eax
    3a5a:	jmp    3940 <main+0xd0>
    3a5f:	nop
    3a60:	cmp    BYTE PTR [r12+0x2],0x0
    3a66:	jne    39f8 <main+0x188>
    3a68:	mov    rdi,QWORD PTR [rsp+0xc8]
    3a70:	mov    edx,0xa
    3a75:	xor    esi,esi
    3a77:	call   3670 <strtol@plt>
    3a7c:	mov    DWORD PTR [rsp],eax
    3a7f:	jmp    3940 <main+0xd0>
    3a84:	nop    DWORD PTR [rax+0x0]
    3a88:	cmp    BYTE PTR [r12+0x2],0x0
    3a8e:	jne    3a09 <main+0x199>
    3a94:	mov    rdi,QWORD PTR [rsp+0xc8]
    3a9c:	xor    esi,esi
    3a9e:	call   3510 <strtod@plt>
    3aa3:	movsd  QWORD PTR [rsp+0xe8],xmm0
    3aac:	jmp    3940 <main+0xd0>
    3ab1:	nop    DWORD PTR [rax+0x0]
    3ab8:	cmp    BYTE PTR [r12+0x2],0x0
    3abe:	jne    3a1e <main+0x1ae>
    3ac4:	mov    rdi,QWORD PTR [rsp+0xc8]
    3acc:	xor    esi,esi
    3ace:	call   3510 <strtod@plt>
    3ad3:	cvtsd2ss xmm0,xmm0
    3ad7:	movss  DWORD PTR [rsp+0xe0],xmm0
    3ae0:	jmp    3940 <main+0xd0>
    3ae5:	nop    DWORD PTR [rax]
    3ae8:	mov    DWORD PTR [rsp+0x40],0x1
    3af0:	jmp    3940 <main+0xd0>
    3af5:	nop    DWORD PTR [rax]
    3af8:	cmp    DWORD PTR [rsp+0xa4],0x1
    3b00:	mov    r12d,eax
    3b03:	jne    3fe9 <main+0x779>
    3b09:	movsxd rdx,DWORD PTR [rsp+0xa4]
    3b11:	mov    rax,rdx
    3b14:	mov    r14,QWORD PTR [rbp+rdx*8+0x0]
    3b19:	mov    r13,QWORD PTR [rbp+rdx*8+0x8]
    3b1e:	add    eax,0x2
    3b21:	mov    DWORD PTR [rsp+0xa4],eax
    3b28:	mov    eax,DWORD PTR [rsp+0x4]
    3b2c:	test   eax,eax
    3b2e:	jne    4001 <main+0x791>
    3b34:	mov    eax,DWORD PTR [rsp+0x10]
    3b38:	test   eax,eax
    3b3a:	jne    403b <main+0x7cb>
    3b40:	test   r15d,r15d
    3b43:	je     4014 <main+0x7a4>
    3b49:	lea    rdx,[rip+0x3ac29]        # 3e779 <_IO_stdin_used+0x1779>
    3b50:	mov    esi,r15d
    3b53:	mov    rdi,r13
    3b56:	call   34320 <SeqfileOpen>
    3b5b:	mov    rbp,rax
    3b5e:	test   rax,rax
    3b61:	je     46d2 <main+0xe62>
    3b67:	lea    rsi,[rip+0x3ac13]        # 3e781 <_IO_stdin_used+0x1781>
    3b6e:	mov    rdi,r14
    3b71:	call   15570 <HMMFileOpen>
    3b76:	mov    QWORD PTR [rsp+0x68],rax
    3b7b:	test   rax,rax
    3b7e:	je     46a1 <main+0xe31>
    3b84:	mov    rdi,QWORD PTR [rsp+0x68]
    3b89:	lea    rsi,[rsp+0xa8]
    3b91:	call   154e0 <HMMFileRead>
    3b96:	test   eax,eax
    3b98:	je     404e <main+0x7de>
    3b9e:	cmp    QWORD PTR [rsp+0xa8],0x0
    3ba7:	je     46bc <main+0xe4c>
    3bad:	mov    esi,DWORD PTR [rsp+0x8]
    3bb1:	mov    rdi,QWORD PTR [rsp+0xa8]
    3bb9:	xor    esi,0x1
    3bbc:	call   1ca40 <P7Logoddsify>
    3bc1:	mov    r15d,DWORD PTR [rsp+0x18]
    3bc6:	test   r15d,r15d
    3bc9:	je     3bd8 <main+0x368>
    3bcb:	cmp    DWORD PTR [rip+0x5e4ae],0x2        # 62080 <Alphabet_type>
    3bd2:	je     468e <main+0xe1e>
    3bd8:	lea    rax,[rsp+0xe0]
    3be0:	mov    rsi,QWORD PTR [rsp+0xa8]
    3be8:	mov    rdi,rax
    3beb:	mov    QWORD PTR [rsp+0x50],rax
    3bf0:	call   18960 <SetAutocuts>
    3bf5:	test   eax,eax
    3bf7:	je     4062 <main+0x7f2>
    3bfd:	mov    rdi,QWORD PTR [rip+0x4a6fc]        # 4e300 <stdout@@GLIBC_2.2.5>
    3c04:	lea    rsi,[rip+0x49bf5]        # 4d800 <banner>
    3c0b:	call   18700 <HMMERBanner>
    3c10:	mov    rax,QWORD PTR [rsp+0xa8]
    3c18:	mov    rdx,r14
    3c1b:	lea    rsi,[rip+0x3ae9e]        # 3eac0 <_IO_stdin_used+0x1ac0>
    3c22:	mov    edi,0x1
    3c27:	mov    rcx,QWORD PTR [rax]
    3c2a:	xor    eax,eax
    3c2c:	call   3710 <__printf_chk@plt>
    3c31:	mov    rdx,r13
    3c34:	mov    edi,0x1
    3c39:	xor    eax,eax
    3c3b:	lea    rsi,[rip+0x3aea6]        # 3eae8 <_IO_stdin_used+0x1ae8>
    3c42:	call   3710 <__printf_chk@plt>
    3c47:	mov    ebx,DWORD PTR [rsp+0x4]
    3c4b:	test   ebx,ebx
    3c4d:	jne    4080 <main+0x810>
    3c53:	xor    eax,eax
    3c55:	lea    rsi,[rip+0x3ab4b]        # 3e7a7 <_IO_stdin_used+0x17a7>
    3c5c:	mov    edi,0x1
    3c61:	call   3710 <__printf_chk@plt>
    3c66:	movss  xmm0,DWORD PTR [rsp+0xe0]
    3c6f:	ucomiss xmm0,DWORD PTR [rip+0x3aa96]        # 3e70c <_IO_stdin_used+0x170c>
    3c76:	jp     3f9e <main+0x72e>
    3c7c:	jne    3f9e <main+0x72e>
    3c82:	lea    rdi,[rip+0x3aa8b]        # 3e714 <_IO_stdin_used+0x1714>
    3c89:	call   34f0 <puts@plt>
    3c8e:	xor    eax,eax
    3c90:	lea    rsi,[rip+0x3ab4a]        # 3e7e1 <_IO_stdin_used+0x17e1>
    3c97:	mov    edi,0x1
    3c9c:	call   3710 <__printf_chk@plt>
    3ca1:	movss  xmm0,DWORD PTR [rsp+0xf0]
    3caa:	ucomiss xmm0,DWORD PTR [rip+0x3aa5b]        # 3e70c <_IO_stdin_used+0x170c>
    3cb1:	jp     42a3 <main+0xa33>
    3cb7:	jne    42a3 <main+0xa33>
    3cbd:	lea    rdi,[rip+0x3aa50]        # 3e714 <_IO_stdin_used+0x1714>
    3cc4:	call   34f0 <puts@plt>
    3cc9:	xor    eax,eax
    3ccb:	lea    rsi,[rip+0x3ab41]        # 3e813 <_IO_stdin_used+0x1813>
    3cd2:	mov    edi,0x1
    3cd7:	call   3710 <__printf_chk@plt>
    3cdc:	movsd  xmm0,QWORD PTR [rsp+0xe8]
    3ce5:	ucomisd xmm0,QWORD PTR [rip+0x3afbb]        # 3eca8 <_IO_stdin_used+0x1ca8>
    3ced:	jp     4309 <main+0xa99>
    3cf3:	jne    4309 <main+0xa99>
    3cf9:	lea    rdi,[rip+0x3aa14]        # 3e714 <_IO_stdin_used+0x1714>
    3d00:	call   34f0 <puts@plt>
    3d05:	xor    eax,eax
    3d07:	lea    rsi,[rip+0x3ab2e]        # 3e83c <_IO_stdin_used+0x183c>
    3d0e:	mov    edi,0x1
    3d13:	call   3710 <__printf_chk@plt>
    3d18:	movsd  xmm0,QWORD PTR [rsp+0xf8]
    3d21:	ucomisd xmm0,QWORD PTR [rip+0x3af7f]        # 3eca8 <_IO_stdin_used+0x1ca8>
    3d29:	jp     42ee <main+0xa7e>
    3d2f:	jne    42ee <main+0xa7e>
    3d35:	lea    rdi,[rip+0x3a9d8]        # 3e714 <_IO_stdin_used+0x1714>
    3d3c:	call   34f0 <puts@plt>
    3d41:	lea    rdi,[rip+0x3ade8]        # 3eb30 <_IO_stdin_used+0x1b30>
    3d48:	lea    r14,[rsp+0x110]
    3d50:	call   34f0 <puts@plt>
    3d55:	mov    edx,0x64
    3d5a:	mov    esi,0xc8
    3d5f:	mov    edi,0xffffff38
    3d64:	call   f1b0 <AllocHistogram>
    3d69:	mov    edi,0xc8
    3d6e:	lea    r15,[rsp+0xd8]
    3d76:	mov    QWORD PTR [rsp+0x10],rax
    3d7b:	call   20100 <AllocTophits>
    3d80:	mov    edi,0xc8
    3d85:	mov    QWORD PTR [rsp+0x38],rax
    3d8a:	call   20100 <AllocTophits>
    3d8f:	mov    rbx,QWORD PTR [rsp+0xa8]
    3d97:	xor    ecx,ecx
    3d99:	mov    edx,0x19
    3d9e:	mov    edi,0x1
    3da3:	mov    QWORD PTR [rsp+0x30],rax
    3da8:	mov    esi,DWORD PTR [rbx+0x88]
    3dae:	call   5350 <CreatePlan7Matrix>
    3db3:	mov    QWORD PTR [rsp+0x20],rax
    3db8:	lea    rax,[rsp+0xd0]
    3dc0:	mov    QWORD PTR [rsp+0x28],rax
    3dc5:	nop    DWORD PTR [rax]
    3dc8:	mov    esi,DWORD PTR [rbp+0x90]
    3dce:	mov    rcx,r14
    3dd1:	mov    rdx,r15
    3dd4:	mov    rdi,rbp
    3dd7:	call   327a0 <ReadSeq>
    3ddc:	test   eax,eax
    3dde:	je     4118 <main+0x8a8>
    3de4:	mov    esi,DWORD PTR [rsp+0x254]
    3deb:	test   esi,esi
    3ded:	je     3dc8 <main+0x558>
    3def:	mov    rdi,QWORD PTR [rsp+0xd8]
    3df7:	add    r12d,0x1
    3dfb:	call   4f00 <DigitizeSequence>
    3e00:	mov    r11d,DWORD PTR [rsp+0x18]
    3e05:	mov    edi,DWORD PTR [rsp+0x254]
    3e0c:	mov    r13,rax
    3e0f:	test   r11d,r11d
    3e12:	je     3e21 <main+0x5b1>
    3e14:	cmp    DWORD PTR [rip+0x5e265],0x3        # 62080 <Alphabet_type>
    3e1b:	je     4342 <main+0xad2>
    3e21:	mov    esi,DWORD PTR [rbx+0x88]
    3e27:	call   5b10 <P7ViterbiSize>
    3e2c:	mov    r8,QWORD PTR [rsp+0x28]
    3e31:	mov    rdx,rbx
    3e34:	mov    rdi,r13
    3e37:	mov    rcx,QWORD PTR [rsp+0x20]
    3e3c:	mov    esi,DWORD PTR [rsp+0x254]
    3e43:	cmp    eax,0x3e8
    3e48:	jg     4098 <main+0x828>
    3e4e:	call   ec90 <P7Viterbi>
    3e53:	mov    r10d,DWORD PTR [rsp+0x8]
    3e58:	movaps xmm1,xmm0
    3e5b:	test   r10d,r10d
    3e5e:	jne    40ae <main+0x83e>
    3e64:	movaps xmm0,xmm1
    3e67:	mov    rdi,rbx
    3e6a:	movss  DWORD PTR [rsp+0x4],xmm1
    3e70:	call   17840 <PValue>
    3e75:	mov    eax,DWORD PTR [rsp+0x104]
    3e7c:	movss  xmm1,DWORD PTR [rsp+0x4]
    3e82:	test   eax,eax
    3e84:	je     4100 <main+0x890>
    3e8a:	pxor   xmm2,xmm2
    3e8e:	cvtsi2sd xmm2,eax
    3e92:	mulsd  xmm0,xmm2
    3e96:	comiss xmm1,DWORD PTR [rsp+0xe0]
    3e9e:	jb     3f29 <main+0x6b9>
    3ea4:	movsd  xmm2,QWORD PTR [rsp+0xe8]
    3ead:	comisd xmm2,xmm0
    3eb1:	jb     3f29 <main+0x6b9>
    3eb3:	mov    esi,DWORD PTR [rsp+0x110]
    3eba:	xor    ecx,ecx
    3ebc:	movaps xmm0,xmm1
    3ebf:	mov    r8,r13
    3ec2:	lea    rdx,[rsp+0x1d4]
    3eca:	lea    rax,[rsp+0x194]
    3ed2:	test   sil,0x8
    3ed6:	cmove  rdx,rcx
    3eda:	and    esi,0x4
    3edd:	cmove  rax,rcx
    3ee1:	sub    rsp,0x8
    3ee5:	push   0x0
    3ee7:	push   QWORD PTR [rsp+0x60]
    3eeb:	mov    ecx,DWORD PTR [rsp+0x60]
    3eef:	push   rcx
    3ef0:	mov    ecx,DWORD PTR [rsp+0x28]
    3ef4:	push   rcx
    3ef5:	mov    rcx,rbx
    3ef8:	push   rdx
    3ef9:	push   rax
    3efa:	lea    rax,[rsp+0x14c]
    3f02:	push   rax
    3f03:	mov    r9d,DWORD PTR [rsp+0x294]
    3f0b:	mov    rdx,QWORD PTR [rsp+0x110]
    3f13:	mov    rsi,QWORD PTR [rsp+0x70]
    3f18:	mov    rdi,QWORD PTR [rsp+0x78]
    3f1d:	call   abe0 <PostprocessSignificantHit>
    3f22:	add    rsp,0x40
    3f26:	movaps xmm1,xmm0
    3f29:	mov    rdi,QWORD PTR [rsp+0x10]
    3f2e:	movaps xmm0,xmm1
    3f31:	call   f2d0 <AddToHistogram>
    3f36:	mov    rdi,QWORD PTR [rsp+0xd8]
    3f3e:	mov    rsi,r14
    3f41:	call   32400 <FreeSequence>
    3f46:	mov    rdi,QWORD PTR [rsp+0xd0]
    3f4e:	call   20af0 <P7FreeTrace>
    3f53:	mov    rdi,r13
    3f56:	call   3460 <free@plt>
    3f5b:	jmp    3dc8 <main+0x558>
    3f60:	lea    rsi,[rip+0x3a7c6]        # 3e72d <_IO_stdin_used+0x172d>
    3f67:	mov    rdi,r12
    3f6a:	call   3640 <strcmp@plt>
    3f6f:	test   eax,eax
    3f71:	je     463d <main+0xdcd>
    3f77:	lea    rsi,[rip+0x3a7b8]        # 3e736 <_IO_stdin_used+0x1736>
    3f7e:	mov    rdi,r12
    3f81:	call   3640 <strcmp@plt>
    3f86:	test   eax,eax
    3f88:	jne    4727 <main+0xeb7>
    3f8e:	mov    DWORD PTR [rsp+0x100],0x3
    3f99:	jmp    3940 <main+0xd0>
    3f9e:	lea    rsi,[rip+0x3a81f]        # 3e7c4 <_IO_stdin_used+0x17c4>
    3fa5:	mov    edi,0x1
    3faa:	mov    eax,0x1
    3faf:	cvtss2sd xmm0,xmm0
    3fb3:	call   3710 <__printf_chk@plt>
    3fb8:	mov    eax,DWORD PTR [rsp+0x100]
    3fbf:	cmp    eax,0x1
    3fc2:	je     483b <main+0xfcb>
    3fc8:	cmp    eax,0x2
    3fcb:	je     486e <main+0xffe>
    3fd1:	cmp    eax,0x3
    3fd4:	je     467d <main+0xe0d>
    3fda:	mov    edi,0xa
    3fdf:	call   3470 <putchar@plt>
    3fe4:	jmp    3c8e <main+0x41e>
    3fe9:	lea    rsi,[rip+0x49690]        # 4d680 <usage>
    3ff0:	lea    rdi,[rip+0x3a421]        # 3e418 <_IO_stdin_used+0x1418>
    3ff7:	call   317f0 <Die>
    3ffc:	jmp    3b09 <main+0x299>
    4001:	lea    rdi,[rip+0x3a8f8]        # 3e900 <_IO_stdin_used+0x1900>
    4008:	xor    eax,eax
    400a:	call   317f0 <Die>
    400f:	jmp    3b34 <main+0x2c4>
    4014:	xor    edx,edx
    4016:	mov    rsi,r13
    4019:	lea    rdi,[rip+0x3a750]        # 3e770 <_IO_stdin_used+0x1770>
    4020:	call   2a780 <Strparse>
    4025:	mov    r15d,eax
    4028:	test   eax,eax
    402a:	je     464d <main+0xddd>
    4030:	mov    r15d,0x7
    4036:	jmp    3b49 <main+0x2d9>
    403b:	lea    rdi,[rip+0x3a90e]        # 3e950 <_IO_stdin_used+0x1950>
    4042:	xor    eax,eax
    4044:	call   317f0 <Die>
    4049:	jmp    3b40 <main+0x2d0>
    404e:	mov    rsi,r14
    4051:	lea    rdi,[rip+0x3a978]        # 3e9d0 <_IO_stdin_used+0x19d0>
    4058:	call   317f0 <Die>
    405d:	jmp    3b9e <main+0x32e>
    4062:	mov    rax,QWORD PTR [rsp+0xa8]
    406a:	lea    rdi,[rip+0x3aa0f]        # 3ea80 <_IO_stdin_used+0x1a80>
    4071:	mov    rsi,QWORD PTR [rax]
    4074:	xor    eax,eax
    4076:	call   317f0 <Die>
    407b:	jmp    3bfd <main+0x38d>
    4080:	lea    rdi,[rip+0x3aa81]        # 3eb08 <_IO_stdin_used+0x1b08>
    4087:	call   34f0 <puts@plt>
    408c:	jmp    3c53 <main+0x3e3>
    4091:	nop    DWORD PTR [rax+0x0]
    4098:	call   8c40 <P7SmallViterbi>
    409d:	mov    r10d,DWORD PTR [rsp+0x8]
    40a2:	movaps xmm1,xmm0
    40a5:	test   r10d,r10d
    40a8:	je     3e64 <main+0x5f4>
    40ae:	mov    esi,DWORD PTR [rsp+0x254]
    40b5:	xor    ecx,ecx
    40b7:	mov    rdx,rbx
    40ba:	mov    rdi,r13
    40bd:	call   5c20 <P7Forward>
    40c2:	mov    r9d,DWORD PTR [rsp+0x48]
    40c7:	movaps xmm1,xmm0
    40ca:	test   r9d,r9d
    40cd:	je     3e64 <main+0x5f4>
    40d3:	mov    rsi,QWORD PTR [rsp+0xd0]
    40db:	mov    rdx,r13
    40de:	mov    rdi,rbx
    40e1:	movss  DWORD PTR [rsp+0x4],xmm0
    40e7:	call   184f0 <TraceScoreCorrection>
    40ec:	movss  xmm1,DWORD PTR [rsp+0x4]
    40f2:	subss  xmm1,xmm0
    40f6:	jmp    3e64 <main+0x5f4>
    40fb:	nop    DWORD PTR [rax+rax*1+0x0]
    4100:	pxor   xmm2,xmm2
    4104:	cvtsi2sd xmm2,r12d
    4109:	mulsd  xmm0,xmm2
    410d:	jmp    3e96 <main+0x626>
    4112:	nop    WORD PTR [rax+rax*1+0x0]
    4118:	mov    rdi,QWORD PTR [rsp+0x20]
    411d:	mov    r13d,eax
    4120:	call   5810 <FreePlan7Matrix>
    4125:	mov    rax,QWORD PTR [rsp+0xa8]
    412d:	test   BYTE PTR [rax+0x1c8],0x80
    4134:	jne    45ff <main+0xd8f>
    413a:	mov    r8d,DWORD PTR [rsp+0x104]
    4142:	test   r8d,r8d
    4145:	jne    414f <main+0x8df>
    4147:	mov    DWORD PTR [rsp+0x104],r12d
    414f:	mov    edi,DWORD PTR [rsp+0x40]
    4153:	mov    rdx,QWORD PTR [rax]
    4156:	test   edi,edi
    4158:	je     4358 <main+0xae8>
    415e:	mov    ecx,DWORD PTR [rax+0x1c8]
    4164:	lea    r8,[rip+0x3d2c5]        # 41430 <gki_primes+0x9b0>
    416b:	test   cl,0x2
    416e:	je     4174 <main+0x904>
    4170:	mov    r8,QWORD PTR [rax+0x10]
    4174:	lea    r9,[rip+0x3d2b5]        # 41430 <gki_primes+0x9b0>
    417b:	and    ch,0x2
    417e:	je     4184 <main+0x914>
    4180:	mov    r9,QWORD PTR [rax+0x8]
    4184:	mov    rcx,r9
    4187:	lea    rsi,[rip+0x3a6d6]        # 3e864 <_IO_stdin_used+0x1864>
    418e:	mov    edi,0x1
    4193:	xor    eax,eax
    4195:	call   3710 <__printf_chk@plt>
    419a:	mov    rax,QWORD PTR [rsp+0xa8]
    41a2:	test   BYTE PTR [rax+0x1c8],0x80
    41a9:	je     4324 <main+0xab4>
    41af:	lea    rdi,[rip+0x3a9ba]        # 3eb70 <_IO_stdin_used+0x1b70>
    41b6:	call   34f0 <puts@plt>
    41bb:	mov    rbx,QWORD PTR [rsp+0x38]
    41c0:	mov    rdi,rbx
    41c3:	call   20720 <FullSortTophits>
    41c8:	mov    rdi,rbx
    41cb:	call   206c0 <TophitsMaxName>
    41d0:	cmp    eax,0x7
    41d3:	jg     43ce <main+0xb5e>
    41d9:	mov    rbx,QWORD PTR [rsp+0x30]
    41de:	mov    rdi,rbx
    41e1:	call   20720 <FullSortTophits>
    41e6:	mov    rdi,rbx
    41e9:	call   206c0 <TophitsMaxName>
    41ee:	cmp    eax,0x7
    41f1:	jg     45f0 <main+0xd80>
    41f7:	mov    esi,DWORD PTR [rsp]
    41fa:	test   esi,esi
    41fc:	jne    43dd <main+0xb6d>
    4202:	mov    edx,r12d
    4205:	lea    rsi,[rip+0x3aa74]        # 3ec80 <_IO_stdin_used+0x1c80>
    420c:	mov    edi,0x1
    4211:	xor    eax,eax
    4213:	call   3710 <__printf_chk@plt>
    4218:	mov    rdi,QWORD PTR [rsp+0x10]
    421d:	call   f270 <FreeHistogram>
    4222:	mov    rdi,QWORD PTR [rsp+0x68]
    4227:	call   15540 <HMMFileClose>
    422c:	mov    rdi,rbp
    422f:	call   32370 <SeqfileClose>
    4234:	mov    rdi,QWORD PTR [rsp+0x38]
    4239:	call   202b0 <FreeTophits>
    423e:	mov    rdi,QWORD PTR [rsp+0x30]
    4243:	call   202b0 <FreeTophits>
    4248:	mov    rdi,QWORD PTR [rsp+0xa8]
    4250:	call   1aed0 <FreePlan7>
    4255:	call   29160 <SqdClean>
    425a:	mov    rax,QWORD PTR [rsp+0x278]
    4262:	xor    rax,QWORD PTR fs:0x28
    426b:	jne    4924 <main+0x10b4>
    4271:	add    rsp,0x288
    4278:	mov    eax,r13d
    427b:	pop    rbx
    427c:	pop    rbp
    427d:	pop    r12
    427f:	pop    r13
    4281:	pop    r14
    4283:	pop    r15
    4285:	ret    
    4286:	mov    rdi,QWORD PTR [rsp+0xc8]
    428e:	mov    edx,0xa
    4293:	xor    esi,esi
    4295:	call   3670 <strtol@plt>
    429a:	mov    DWORD PTR [rsp+0x10],eax
    429e:	jmp    3940 <main+0xd0>
    42a3:	lea    rsi,[rip+0x3a51a]        # 3e7c4 <_IO_stdin_used+0x17c4>
    42aa:	mov    edi,0x1
    42af:	mov    eax,0x1
    42b4:	cvtss2sd xmm0,xmm0
    42b8:	call   3710 <__printf_chk@plt>
    42bd:	mov    eax,DWORD PTR [rsp+0x100]
    42c4:	cmp    eax,0x1
    42c7:	je     484c <main+0xfdc>
    42cd:	cmp    eax,0x2
    42d0:	je     485d <main+0xfed>
    42d6:	cmp    eax,0x3
    42d9:	je     466c <main+0xdfc>
    42df:	mov    edi,0xa
    42e4:	call   3470 <putchar@plt>
    42e9:	jmp    3cc9 <main+0x459>
    42ee:	lea    rsi,[rip+0x3a564]        # 3e859 <_IO_stdin_used+0x1859>
    42f5:	mov    edi,0x1
    42fa:	mov    eax,0x1
    42ff:	call   3710 <__printf_chk@plt>
    4304:	jmp    3d41 <main+0x4d1>
    4309:	lea    rsi,[rip+0x3a520]        # 3e830 <_IO_stdin_used+0x1830>
    4310:	mov    edi,0x1
    4315:	mov    eax,0x1
    431a:	call   3710 <__printf_chk@plt>
    431f:	jmp    3d05 <main+0x495>
    4324:	lea    rdi,[rip+0x3a885]        # 3ebb0 <_IO_stdin_used+0x1bb0>
    432b:	call   34f0 <puts@plt>
    4330:	jmp    41bb <main+0x94b>
    4335:	call   16a80 <hmmcalibrate>
    433a:	mov    r13d,eax
    433d:	jmp    425a <main+0x9ea>
    4342:	mov    esi,edi
    4344:	mov    rdi,rax
    4347:	call   18290 <XNU>
    434c:	mov    edi,DWORD PTR [rsp+0x254]
    4353:	jmp    3e21 <main+0x5b1>
    4358:	lea    rsi,[rip+0x3a51b]        # 3e87a <_IO_stdin_used+0x187a>
    435f:	mov    edi,0x1
    4364:	xor    eax,eax
    4366:	call   3710 <__printf_chk@plt>
    436b:	mov    rax,QWORD PTR [rsp+0xa8]
    4373:	lea    rdx,[rip+0x3a39a]        # 3e714 <_IO_stdin_used+0x1714>
    437a:	test   BYTE PTR [rax+0x1c9],0x2
    4381:	je     4387 <main+0xb17>
    4383:	mov    rdx,QWORD PTR [rax+0x8]
    4387:	lea    rsi,[rip+0x3a4fe]        # 3e88c <_IO_stdin_used+0x188c>
    438e:	mov    edi,0x1
    4393:	xor    eax,eax
    4395:	call   3710 <__printf_chk@plt>
    439a:	mov    rax,QWORD PTR [rsp+0xa8]
    43a2:	lea    rdx,[rip+0x3a36b]        # 3e714 <_IO_stdin_used+0x1714>
    43a9:	test   BYTE PTR [rax+0x1c8],0x2
    43b0:	je     43b6 <main+0xb46>
    43b2:	mov    rdx,QWORD PTR [rax+0x10]
    43b6:	lea    rsi,[rip+0x3a4e0]        # 3e89d <_IO_stdin_used+0x189d>
    43bd:	mov    edi,0x1
    43c2:	xor    eax,eax
    43c4:	call   3710 <__printf_chk@plt>
    43c9:	jmp    419a <main+0x92a>
    43ce:	mov    rdi,QWORD PTR [rsp+0x38]
    43d3:	call   206c0 <TophitsMaxName>
    43d8:	jmp    41d9 <main+0x969>
    43dd:	lea    rdi,[rip+0x3a804]        # 3ebe8 <_IO_stdin_used+0x1be8>
    43e4:	call   34f0 <puts@plt>
    43e9:	mov    rax,QWORD PTR [rsp+0x30]
    43ee:	cmp    DWORD PTR [rax+0x14],0x0
    43f2:	jle    4706 <main+0xe96>
    43f8:	lea    rcx,[rsp+0xb0]
    4400:	xor    ebx,ebx
    4402:	lea    rax,[rsp+0xd0]
    440a:	mov    DWORD PTR [rsp+0x78],r12d
    440f:	mov    QWORD PTR [rsp+0x58],rcx
    4414:	lea    rcx,[rsp+0xa0]
    441c:	lea    rdi,[rsp+0x80]
    4424:	mov    r12d,ebx
    4427:	mov    QWORD PTR [rsp+0x50],rcx
    442c:	lea    rcx,[rsp+0x9c]
    4434:	lea    rdx,[rsp+0xb8]
    443c:	mov    rbx,rax
    443f:	mov    QWORD PTR [rsp+0x48],rcx
    4444:	lea    rcx,[rsp+0x94]
    444c:	lea    r14,[rsp+0x84]
    4454:	mov    QWORD PTR [rsp+0x28],rcx
    4459:	lea    rcx,[rsp+0x90]
    4461:	mov    QWORD PTR [rsp+0x20],rcx
    4466:	lea    rcx,[rsp+0x98]
    446e:	mov    QWORD PTR [rsp+0x40],rcx
    4473:	lea    rcx,[rsp+0x8c]
    447b:	mov    QWORD PTR [rsp+0x18],rcx
    4480:	lea    rcx,[rsp+0x88]
    4488:	mov    QWORD PTR [rsp+0x70],rbp
    448d:	mov    rbp,rdi
    4490:	mov    DWORD PTR [rsp+0x7c],r13d
    4495:	mov    r13,rdx
    4498:	mov    QWORD PTR [rsp+0x60],r15
    449d:	mov    r15,QWORD PTR [rsp+0x30]
    44a2:	mov    DWORD PTR [rsp+0x4],0x0
    44aa:	mov    QWORD PTR [rsp+0x8],rcx
    44af:	jmp    44d3 <main+0xc63>
    44b1:	nop    DWORD PTR [rax+0x0]
    44b8:	add    r12d,0x1
    44bc:	cmp    DWORD PTR [r15+0x14],r12d
    44c0:	jle    46ef <main+0xe7f>
    44c6:	mov    ecx,DWORD PTR [rsp]
    44c9:	cmp    DWORD PTR [rsp+0x4],ecx
    44cd:	je     4811 <main+0xfa1>
    44d3:	push   QWORD PTR [rsp+0x58]
    44d7:	mov    r9,r14
    44da:	mov    r8,rbx
    44dd:	mov    rcx,rbp
    44e0:	push   QWORD PTR [rsp+0x58]
    44e4:	mov    rdx,r13
    44e7:	mov    esi,r12d
    44ea:	mov    rdi,r15
    44ed:	push   QWORD PTR [rsp+0x58]
    44f1:	push   0x0
    44f3:	push   QWORD PTR [rsp+0x48]
    44f7:	push   QWORD PTR [rsp+0x48]
    44fb:	push   QWORD PTR [rsp+0x70]
    44ff:	push   QWORD PTR [rsp+0x50]
    4503:	push   QWORD PTR [rsp+0x48]
    4507:	push   0x0
    4509:	push   0x0
    450b:	push   QWORD PTR [rsp+0xb8]
    4512:	call   204e0 <GetRankedHit>
    4517:	pxor   xmm1,xmm1
    451b:	movsd  xmm0,QWORD PTR [rsp+0x130]
    4524:	cvtsi2sd xmm1,DWORD PTR [rsp+0x164]
    452d:	add    rsp,0x60
    4531:	mulsd  xmm0,xmm1
    4535:	comisd xmm0,QWORD PTR [rsp+0xe8]
    453e:	ja     44b8 <main+0xc48>
    4544:	movss  xmm0,DWORD PTR [rsp+0xe0]
    454d:	comiss xmm0,DWORD PTR [rsp+0x84]
    4555:	ja     44b8 <main+0xc48>
    455b:	mulsd  xmm1,QWORD PTR [rsp+0xb8]
    4564:	movsd  xmm0,QWORD PTR [rsp+0xf8]
    456d:	comisd xmm0,xmm1
    4571:	jb     44b8 <main+0xc48>
    4577:	movss  xmm0,DWORD PTR [rsp+0x80]
    4580:	comiss xmm0,DWORD PTR [rsp+0xf0]
    4588:	jb     44b8 <main+0xc48>
    458e:	push   rax
    458f:	mov    eax,DWORD PTR [rsp+0x94]
    4596:	lea    rsi,[rip+0x3a673]        # 3ec10 <_IO_stdin_used+0x1c10>
    459d:	cvtss2sd xmm0,xmm0
    45a1:	mov    edi,0x1
    45a6:	push   rax
    45a7:	mov    r9d,DWORD PTR [rsp+0x98]
    45af:	mov    eax,0x2
    45b4:	mov    r8d,DWORD PTR [rsp+0xb0]
    45bc:	mov    ecx,DWORD PTR [rsp+0xac]
    45c3:	mov    rdx,QWORD PTR [rsp+0xe8]
    45cb:	call   3710 <__printf_chk@plt>
    45d0:	mov    rsi,QWORD PTR [rsp+0xc0]
    45d8:	mov    rdi,QWORD PTR [rip+0x49d21]        # 4e300 <stdout@@GLIBC_2.2.5>
    45df:	call   22720 <PrintFancyAli>
    45e4:	add    DWORD PTR [rsp+0x14],0x1
    45e9:	pop    rdx
    45ea:	pop    rcx
    45eb:	jmp    44b8 <main+0xc48>
    45f0:	mov    rdi,QWORD PTR [rsp+0x30]
    45f5:	call   206c0 <TophitsMaxName>
    45fa:	jmp    41f7 <main+0x987>
    45ff:	mov    rbx,QWORD PTR [rsp+0x10]
    4604:	pxor   xmm3,xmm3
    4608:	pxor   xmm2,xmm2
    460c:	xor    esi,esi
    460e:	movss  xmm0,DWORD PTR [rax+0x1c0]
    4616:	movss  xmm1,DWORD PTR [rax+0x1c4]
    461e:	cvtsi2ss xmm3,DWORD PTR [rbx+0x10]
    4623:	mov    rdi,rbx
    4626:	cvtsi2ss xmm2,DWORD PTR [rbx+0x14]
    462b:	call   105e0 <ExtremeValueSetHistogram>
    4630:	mov    rax,QWORD PTR [rsp+0xa8]
    4638:	jmp    413a <main+0x8ca>
    463d:	mov    DWORD PTR [rsp+0x100],0x2
    4648:	jmp    3940 <main+0xd0>
    464d:	lea    rsi,[rip+0x39546]        # 3db9a <_IO_stdin_used+0xb9a>
    4654:	mov    rdi,r13
    4657:	call   3640 <strcmp@plt>
    465c:	test   eax,eax
    465e:	mov    eax,0x7
    4663:	cmove  r15d,eax
    4667:	jmp    3b49 <main+0x2d9>
    466c:	lea    rdi,[rip+0x3a199]        # 3e80c <_IO_stdin_used+0x180c>
    4673:	call   34f0 <puts@plt>
    4678:	jmp    3cc9 <main+0x459>
    467d:	lea    rdi,[rip+0x3a156]        # 3e7da <_IO_stdin_used+0x17da>
    4684:	call   34f0 <puts@plt>
    4689:	jmp    3c8e <main+0x41e>
    468e:	lea    rdi,[rip+0x3a3a3]        # 3ea38 <_IO_stdin_used+0x1a38>
    4695:	xor    eax,eax
    4697:	call   317f0 <Die>
    469c:	jmp    3bd8 <main+0x368>
    46a1:	lea    rdx,[rip+0x48fd8]        # 4d680 <usage>
    46a8:	mov    rsi,r14
    46ab:	lea    rdi,[rip+0x3a0d7]        # 3e789 <_IO_stdin_used+0x1789>
    46b2:	call   317f0 <Die>
    46b7:	jmp    3b84 <main+0x314>
    46bc:	mov    rsi,r14
    46bf:	lea    rdi,[rip+0x3a332]        # 3e9f8 <_IO_stdin_used+0x19f8>
    46c6:	xor    eax,eax
    46c8:	call   317f0 <Die>
    46cd:	jmp    3bad <main+0x33d>
    46d2:	lea    rdx,[rip+0x48fa7]        # 4d680 <usage>
    46d9:	mov    rsi,r13
    46dc:	lea    rdi,[rip+0x3a2bd]        # 3e9a0 <_IO_stdin_used+0x19a0>
    46e3:	xor    eax,eax
    46e5:	call   317f0 <Die>
    46ea:	jmp    3b67 <main+0x2f7>
    46ef:	mov    eax,DWORD PTR [rsp+0x4]
    46f3:	mov    r12d,DWORD PTR [rsp+0x78]
    46f8:	mov    rbp,QWORD PTR [rsp+0x70]
    46fd:	mov    r13d,DWORD PTR [rsp+0x7c]
    4702:	test   eax,eax
    4704:	jne    4717 <main+0xea7>
    4706:	lea    rdi,[rip+0x3a1a1]        # 3e8ae <_IO_stdin_used+0x18ae>
    470d:	call   34f0 <puts@plt>
    4712:	jmp    4202 <main+0x992>
    4717:	mov    ebx,DWORD PTR [rsp]
    471a:	cmp    eax,ebx
    471c:	jne    4202 <main+0x992>
    4722:	jmp    4820 <main+0xfb0>
    4727:	lea    rsi,[rip+0x3a011]        # 3e73f <_IO_stdin_used+0x173f>
    472e:	mov    rdi,r12
    4731:	call   3640 <strcmp@plt>
    4736:	test   eax,eax
    4738:	je     48a0 <main+0x1030>
    473e:	lea    rsi,[rip+0x3a001]        # 3e746 <_IO_stdin_used+0x1746>
    4745:	mov    rdi,r12
    4748:	call   3640 <strcmp@plt>
    474d:	test   eax,eax
    474f:	je     487f <main+0x100f>
    4755:	lea    rsi,[rip+0x39ff1]        # 3e74d <_IO_stdin_used+0x174d>
    475c:	mov    rdi,r12
    475f:	call   3640 <strcmp@plt>
    4764:	test   eax,eax
    4766:	je     48bd <main+0x104d>
    476c:	lea    rsi,[rip+0x39fe4]        # 3e757 <_IO_stdin_used+0x1757>
    4773:	mov    rdi,r12
    4776:	call   3640 <strcmp@plt>
    477b:	test   eax,eax
    477d:	je     48ca <main+0x105a>
    4783:	lea    rsi,[rip+0x39b6f]        # 3e2f9 <_IO_stdin_used+0x12f9>
    478a:	mov    rdi,r12
    478d:	call   3640 <strcmp@plt>
    4792:	test   eax,eax
    4794:	je     48d7 <main+0x1067>
    479a:	lea    rsi,[rip+0x39fbe]        # 3e75f <_IO_stdin_used+0x175f>
    47a1:	mov    rdi,r12
    47a4:	call   3640 <strcmp@plt>
    47a9:	test   eax,eax
    47ab:	je     48e4 <main+0x1074>
    47b1:	lea    rsi,[rip+0x39fad]        # 3e765 <_IO_stdin_used+0x1765>
    47b8:	mov    rdi,r12
    47bb:	call   3640 <strcmp@plt>
    47c0:	test   eax,eax
    47c2:	je     48f1 <main+0x1081>
    47c8:	lea    rsi,[rip+0x39c42]        # 3e411 <_IO_stdin_used+0x1411>
    47cf:	mov    rdi,r12
    47d2:	call   3640 <strcmp@plt>
    47d7:	test   eax,eax
    47d9:	jne    3940 <main+0xd0>
    47df:	mov    rdi,QWORD PTR [rip+0x49b1a]        # 4e300 <stdout@@GLIBC_2.2.5>
    47e6:	lea    rsi,[rip+0x49013]        # 4d800 <banner>
    47ed:	call   18700 <HMMERBanner>
    47f2:	lea    rdi,[rip+0x48e87]        # 4d680 <usage>
    47f9:	call   34f0 <puts@plt>
    47fe:	lea    rdi,[rip+0x48b7b]        # 4d380 <experts>
    4805:	call   34f0 <puts@plt>
    480a:	xor    edi,edi
    480c:	call   37a0 <exit@plt>
    4811:	mov    r12d,DWORD PTR [rsp+0x78]
    4816:	mov    rbp,QWORD PTR [rsp+0x70]
    481b:	mov    r13d,DWORD PTR [rsp+0x7c]
    4820:	mov    edx,DWORD PTR [rsp]
    4823:	lea    rsi,[rip+0x3a426]        # 3ec50 <_IO_stdin_used+0x1c50>
    482a:	mov    edi,0x1
    482f:	xor    eax,eax
    4831:	call   3710 <__printf_chk@plt>
    4836:	jmp    4202 <main+0x992>
    483b:	lea    rdi,[rip+0x39f8a]        # 3e7cc <_IO_stdin_used+0x17cc>
    4842:	call   34f0 <puts@plt>
    4847:	jmp    3c8e <main+0x41e>
    484c:	lea    rdi,[rip+0x39fab]        # 3e7fe <_IO_stdin_used+0x17fe>
    4853:	call   34f0 <puts@plt>
    4858:	jmp    3cc9 <main+0x459>
    485d:	lea    rdi,[rip+0x39fa1]        # 3e805 <_IO_stdin_used+0x1805>
    4864:	call   34f0 <puts@plt>
    4869:	jmp    3cc9 <main+0x459>
    486e:	lea    rdi,[rip+0x39f5e]        # 3e7d3 <_IO_stdin_used+0x17d3>
    4875:	call   34f0 <puts@plt>
    487a:	jmp    3c8e <main+0x41e>
    487f:	mov    rdi,QWORD PTR [rsp+0xc8]
    4887:	xor    esi,esi
    4889:	call   3510 <strtod@plt>
    488e:	cvtsd2ss xmm0,xmm0
    4892:	movss  DWORD PTR [rsp+0xf0],xmm0
    489b:	jmp    3940 <main+0xd0>
    48a0:	mov    rdi,QWORD PTR [rsp+0xc8]
    48a8:	xor    esi,esi
    48aa:	call   3510 <strtod@plt>
    48af:	movsd  QWORD PTR [rsp+0xf8],xmm0
    48b8:	jmp    3940 <main+0xd0>
    48bd:	mov    DWORD PTR [rsp+0x8],0x1
    48c5:	jmp    3940 <main+0xd0>
    48ca:	mov    DWORD PTR [rsp+0x48],0x0
    48d2:	jmp    3940 <main+0xd0>
    48d7:	mov    DWORD PTR [rsp+0x4],0x1
    48df:	jmp    3940 <main+0xd0>
    48e4:	mov    DWORD PTR [rsp+0x18],0x1
    48ec:	jmp    3940 <main+0xd0>
    48f1:	mov    rdi,QWORD PTR [rsp+0xc8]
    48f9:	call   35180 <String2SeqfileFormat>
    48fe:	mov    r15d,eax
    4901:	test   eax,eax
    4903:	jne    3940 <main+0xd0>
    4909:	mov    rsi,QWORD PTR [rsp+0xc8]
    4911:	lea    rdi,[rip+0x39fc0]        # 3e8d8 <_IO_stdin_used+0x18d8>
    4918:	xor    eax,eax
    491a:	call   317f0 <Die>
    491f:	jmp    3940 <main+0xd0>
    4924:	call   3570 <__stack_chk_fail@plt>
    4929:	nop    DWORD PTR [rax+0x0]

0000000000004930 <_start>:
    4930:	endbr64 
    4934:	xor    ebp,ebp
    4936:	mov    r9,rdx
    4939:	pop    rsi
    493a:	mov    rdx,rsp
    493d:	and    rsp,0xfffffffffffffff0
    4941:	push   rax
    4942:	push   rsp
    4943:	lea    r8,[rip+0x381c6]        # 3cb10 <__libc_csu_fini>
    494a:	lea    rcx,[rip+0x3814f]        # 3caa0 <__libc_csu_init>
    4951:	lea    rdi,[rip+0xffffffffffffef18]        # 3870 <main>
    4958:	call   QWORD PTR [rip+0x48682]        # 4cfe0 <__libc_start_main@GLIBC_2.2.5>
    495e:	hlt    
    495f:	nop

0000000000004960 <deregister_tm_clones>:
    4960:	lea    rdi,[rip+0x49981]        # 4e2e8 <__TMC_END__>
    4967:	lea    rax,[rip+0x4997a]        # 4e2e8 <__TMC_END__>
    496e:	cmp    rax,rdi
    4971:	je     4988 <deregister_tm_clones+0x28>
    4973:	mov    rax,QWORD PTR [rip+0x4865e]        # 4cfd8 <_ITM_deregisterTMCloneTable>
    497a:	test   rax,rax
    497d:	je     4988 <deregister_tm_clones+0x28>
    497f:	jmp    rax
    4981:	nop    DWORD PTR [rax+0x0]
    4988:	ret    
    4989:	nop    DWORD PTR [rax+0x0]

0000000000004990 <register_tm_clones>:
    4990:	lea    rdi,[rip+0x49951]        # 4e2e8 <__TMC_END__>
    4997:	lea    rsi,[rip+0x4994a]        # 4e2e8 <__TMC_END__>
    499e:	sub    rsi,rdi
    49a1:	mov    rax,rsi
    49a4:	shr    rsi,0x3f
    49a8:	sar    rax,0x3
    49ac:	add    rsi,rax
    49af:	sar    rsi,1
    49b2:	je     49c8 <register_tm_clones+0x38>
    49b4:	mov    rax,QWORD PTR [rip+0x48635]        # 4cff0 <_ITM_registerTMCloneTable>
    49bb:	test   rax,rax
    49be:	je     49c8 <register_tm_clones+0x38>
    49c0:	jmp    rax
    49c2:	nop    WORD PTR [rax+rax*1+0x0]
    49c8:	ret    
    49c9:	nop    DWORD PTR [rax+0x0]

00000000000049d0 <__do_global_dtors_aux>:
    49d0:	endbr64 
    49d4:	cmp    BYTE PTR [rip+0x4994d],0x0        # 4e328 <completed.8061>
    49db:	jne    4a08 <__do_global_dtors_aux+0x38>
    49dd:	push   rbp
    49de:	cmp    QWORD PTR [rip+0x48612],0x0        # 4cff8 <__cxa_finalize@GLIBC_2.2.5>
    49e6:	mov    rbp,rsp
    49e9:	je     49f7 <__do_global_dtors_aux+0x27>
    49eb:	mov    rdi,QWORD PTR [rip+0x48616]        # 4d008 <__dso_handle>
    49f2:	call   3430 <__cxa_finalize@plt>
    49f7:	call   4960 <deregister_tm_clones>
    49fc:	mov    BYTE PTR [rip+0x49925],0x1        # 4e328 <completed.8061>
    4a03:	pop    rbp
    4a04:	ret    
    4a05:	nop    DWORD PTR [rax]
    4a08:	ret    
    4a09:	nop    DWORD PTR [rax+0x0]

0000000000004a10 <frame_dummy>:
    4a10:	endbr64 
    4a14:	jmp    4990 <register_tm_clones>
    4a19:	nop    DWORD PTR [rax+0x0]

0000000000004a20 <set_degenerate>:
    4a20:	push   r15
    4a22:	mov    r15,rsi
    4a25:	push   r14
    4a27:	mov    r14d,edi
    4a2a:	mov    rdi,rsi
    4a2d:	push   r13
    4a2f:	movsx  r14d,r14b
    4a33:	push   r12
    4a35:	lea    r12,[rip+0x5d844]        # 62280 <Alphabet>
    4a3c:	push   rbp
    4a3d:	push   rbx
    4a3e:	sub    rsp,0x8
    4a42:	call   3560 <strlen@plt>
    4a47:	mov    esi,r14d
    4a4a:	lea    rdi,[rip+0x5d82f]        # 62280 <Alphabet>
    4a51:	mov    rbx,rax
    4a54:	call   3590 <strchr@plt>
    4a59:	lea    rcx,[rip+0x5d840]        # 622a0 <DegenCount>
    4a60:	sub    rax,r12
    4a63:	mov    DWORD PTR [rcx+rax*4],ebx
    4a66:	movzx  ebp,BYTE PTR [r15]
    4a6a:	test   bpl,bpl
    4a6d:	je     4ab8 <set_degenerate+0x98>
    4a6f:	mov    r13,r12
    4a72:	nop    WORD PTR [rax+rax*1+0x0]
    4a78:	mov    esi,r14d
    4a7b:	mov    rdi,r13
    4a7e:	add    r15,0x1
    4a82:	call   3590 <strchr@plt>
    4a87:	movsx  esi,bpl
    4a8b:	mov    rdi,r13
    4a8e:	mov    rbx,rax
    4a91:	call   3590 <strchr@plt>
    4a96:	sub    rbx,r12
    4a99:	lea    rdx,[rip+0x5d600]        # 620a0 <Degenerate>
    4aa0:	lea    rcx,[rbx+rbx*4]
    4aa4:	sub    rax,r12
    4aa7:	lea    rcx,[rdx+rcx*4]
    4aab:	mov    BYTE PTR [rcx+rax*1],0x1
    4aaf:	movzx  ebp,BYTE PTR [r15]
    4ab3:	test   bpl,bpl
    4ab6:	jne    4a78 <set_degenerate+0x58>
    4ab8:	add    rsp,0x8
    4abc:	pop    rbx
    4abd:	pop    rbp
    4abe:	pop    r12
    4ac0:	pop    r13
    4ac2:	pop    r14
    4ac4:	pop    r15
    4ac6:	ret    
    4ac7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004ad0 <SetAlphabet>:
    4ad0:	endbr64 
    4ad4:	mov    eax,DWORD PTR [rip+0x5d5a6]        # 62080 <Alphabet_type>
    4ada:	test   eax,eax
    4adc:	jne    4d68 <SetAlphabet+0x298>
    4ae2:	sub    rsp,0x8
    4ae6:	cmp    edi,0x2
    4ae9:	je     4bf8 <SetAlphabet+0x128>
    4aef:	cmp    edi,0x3
    4af2:	jne    4be0 <SetAlphabet+0x110>
    4af8:	movdqa xmm0,XMMWORD PTR [rip+0x386a0]        # 3d1a0 <_IO_stdin_used+0x1a0>
    4b00:	mov    DWORD PTR [rip+0x5d576],0x3        # 62080 <Alphabet_type>
    4b0a:	movabs rax,0x585a425559575654
    4b14:	lea    rdx,[rip+0x5d585]        # 620a0 <Degenerate>
    4b1b:	mov    BYTE PTR [rip+0x5d776],0x0        # 62298 <Alphabet+0x18>
    4b22:	lea    rcx,[rdx+0x1e0]
    4b29:	mov    DWORD PTR [rip+0x5d7cd],0x14        # 62300 <Alphabet_size>
    4b33:	mov    DWORD PTR [rip+0x5d75f],0x18        # 6229c <Alphabet_iupac>
    4b3d:	mov    QWORD PTR [rip+0x5d74c],rax        # 62290 <Alphabet+0x10>
    4b44:	mov    rax,rdx
    4b47:	movups XMMWORD PTR [rip+0x5d732],xmm0        # 62280 <Alphabet>
    4b4e:	xchg   ax,ax
    4b50:	pxor   xmm0,xmm0
    4b54:	mov    DWORD PTR [rax+0x10],0x0
    4b5b:	add    rax,0x14
    4b5f:	movups XMMWORD PTR [rax-0x14],xmm0
    4b63:	cmp    rax,rcx
    4b66:	jne    4b50 <SetAlphabet+0x80>
    4b68:	lea    rax,[rip+0x5d731]        # 622a0 <DegenCount>
    4b6f:	lea    rcx,[rip+0x5d6ce]        # 62244 <Degenerate+0x1a4>
    4b76:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4b80:	mov    BYTE PTR [rdx],0x1
    4b83:	add    rdx,0x15
    4b87:	add    rax,0x4
    4b8b:	mov    DWORD PTR [rax-0x4],0x1
    4b92:	cmp    rdx,rcx
    4b95:	jne    4b80 <SetAlphabet+0xb0>
    4b97:	lea    rsi,[rip+0x3cd0c]        # 418aa <CSWTCH.18+0x1ea>
    4b9e:	mov    edi,0x55
    4ba3:	call   4a20 <set_degenerate>
    4ba8:	lea    rsi,[rip+0x38596]        # 3d145 <_IO_stdin_used+0x145>
    4baf:	mov    edi,0x42
    4bb4:	call   4a20 <set_degenerate>
    4bb9:	lea    rsi,[rip+0x38588]        # 3d148 <_IO_stdin_used+0x148>
    4bc0:	mov    edi,0x5a
    4bc5:	call   4a20 <set_degenerate>
    4bca:	lea    rsi,[rip+0x3857a]        # 3d14b <_IO_stdin_used+0x14b>
    4bd1:	mov    edi,0x58
    4bd6:	add    rsp,0x8
    4bda:	jmp    4a20 <set_degenerate>
    4bdf:	nop
    4be0:	lea    rdi,[rip+0x38491]        # 3d078 <_IO_stdin_used+0x78>
    4be7:	xor    eax,eax
    4be9:	add    rsp,0x8
    4bed:	jmp    317f0 <Die>
    4bf2:	nop    WORD PTR [rax+rax*1+0x0]
    4bf8:	mov    eax,0x58
    4bfd:	movdqa xmm0,XMMWORD PTR [rip+0x385ab]        # 3d1b0 <_IO_stdin_used+0x1b0>
    4c05:	mov    DWORD PTR [rip+0x5d471],0x2        # 62080 <Alphabet_type>
    4c0f:	mov    DWORD PTR [rip+0x5d6e7],0x4        # 62300 <Alphabet_size>
    4c19:	mov    DWORD PTR [rip+0x5d679],0x11        # 6229c <Alphabet_iupac>
    4c23:	mov    WORD PTR [rip+0x5d666],ax        # 62290 <Alphabet+0x10>
    4c2a:	lea    rax,[rip+0x5d46f]        # 620a0 <Degenerate>
    4c31:	movups XMMWORD PTR [rip+0x5d648],xmm0        # 62280 <Alphabet>
    4c38:	lea    rdx,[rax+0x154]
    4c3f:	nop
    4c40:	mov    DWORD PTR [rax],0x0
    4c46:	add    rax,0x14
    4c4a:	cmp    rdx,rax
    4c4d:	jne    4c40 <SetAlphabet+0x170>
    4c4f:	movabs rax,0x100000001
    4c59:	lea    rsi,[rip+0x39c71]        # 3e8d1 <_IO_stdin_used+0x18d1>
    4c60:	mov    edi,0x55
    4c65:	mov    BYTE PTR [rip+0x5d434],0x1        # 620a0 <Degenerate>
    4c6c:	mov    QWORD PTR [rip+0x5d62d],rax        # 622a0 <DegenCount>
    4c73:	mov    QWORD PTR [rip+0x5d62e],rax        # 622a8 <DegenCount+0x8>
    4c7a:	mov    BYTE PTR [rip+0x5d434],0x1        # 620b5 <Degenerate+0x15>
    4c81:	mov    BYTE PTR [rip+0x5d442],0x1        # 620ca <Degenerate+0x2a>
    4c88:	mov    BYTE PTR [rip+0x5d450],0x1        # 620df <Degenerate+0x3f>
    4c8f:	call   4a20 <set_degenerate>
    4c94:	lea    rsi,[rip+0x384c5]        # 3d160 <_IO_stdin_used+0x160>
    4c9b:	mov    edi,0x4e
    4ca0:	call   4a20 <set_degenerate>
    4ca5:	lea    rsi,[rip+0x384b4]        # 3d160 <_IO_stdin_used+0x160>
    4cac:	mov    edi,0x58
    4cb1:	call   4a20 <set_degenerate>
    4cb6:	lea    rsi,[rip+0x384a8]        # 3d165 <_IO_stdin_used+0x165>
    4cbd:	mov    edi,0x52
    4cc2:	call   4a20 <set_degenerate>
    4cc7:	lea    rsi,[rip+0x3849b]        # 3d169 <_IO_stdin_used+0x169>
    4cce:	mov    edi,0x59
    4cd3:	call   4a20 <set_degenerate>
    4cd8:	lea    rsi,[rip+0x3cc0b]        # 418ea <CSWTCH.18+0x22a>
    4cdf:	mov    edi,0x4d
    4ce4:	call   4a20 <set_degenerate>
    4ce9:	lea    rsi,[rip+0x38481]        # 3d171 <_IO_stdin_used+0x171>
    4cf0:	mov    edi,0x4b
    4cf5:	call   4a20 <set_degenerate>
    4cfa:	lea    rsi,[rip+0x3846c]        # 3d16d <_IO_stdin_used+0x16d>
    4d01:	mov    edi,0x53
    4d06:	call   4a20 <set_degenerate>
    4d0b:	lea    rsi,[rip+0x3acf9]        # 3fa0b <xpam120+0xcab>
    4d12:	mov    edi,0x57
    4d17:	call   4a20 <set_degenerate>
    4d1c:	lea    rsi,[rip+0x38445]        # 3d168 <_IO_stdin_used+0x168>
    4d23:	mov    edi,0x48
    4d28:	call   4a20 <set_degenerate>
    4d2d:	lea    rsi,[rip+0x3842d]        # 3d161 <_IO_stdin_used+0x161>
    4d34:	mov    edi,0x42
    4d39:	call   4a20 <set_degenerate>
    4d3e:	lea    rsi,[rip+0x38427]        # 3d16c <_IO_stdin_used+0x16c>
    4d45:	mov    edi,0x56
    4d4a:	call   4a20 <set_degenerate>
    4d4f:	lea    rsi,[rip+0x3841a]        # 3d170 <_IO_stdin_used+0x170>
    4d56:	mov    edi,0x44
    4d5b:	add    rsp,0x8
    4d5f:	jmp    4a20 <set_degenerate>
    4d64:	nop    DWORD PTR [rax+0x0]
    4d68:	cmp    eax,edi
    4d6a:	jne    4d70 <SetAlphabet+0x2a0>
    4d6c:	ret    
    4d6d:	nop    DWORD PTR [rax]
    4d70:	lea    rdi,[rip+0x38291]        # 3d008 <_IO_stdin_used+0x8>
    4d77:	xor    eax,eax
    4d79:	jmp    317f0 <Die>
    4d7e:	xchg   ax,ax

0000000000004d80 <DetermineAlphabet>:
    4d80:	endbr64 
    4d84:	push   r15
    4d86:	push   r14
    4d88:	push   r13
    4d8a:	push   r12
    4d8c:	mov    r12d,esi
    4d8f:	push   rbp
    4d90:	push   rbx
    4d91:	sub    rsp,0x8
    4d95:	test   esi,esi
    4d97:	jle    4e98 <DetermineAlphabet+0x118>
    4d9d:	lea    eax,[rsi-0x1]
    4da0:	mov    r15,rdi
    4da3:	xor    r14d,r14d
    4da6:	xor    ebx,ebx
    4da8:	lea    rbp,[rdi+rax*8+0x8]
    4dad:	xor    r13d,r13d
    4db0:	jmp    4dcb <DetermineAlphabet+0x4b>
    4db2:	nop    WORD PTR [rax+rax*1+0x0]
    4db8:	jne    4e50 <DetermineAlphabet+0xd0>
    4dbe:	add    r13d,0x1
    4dc2:	add    r15,0x8
    4dc6:	cmp    r15,rbp
    4dc9:	je     4de8 <DetermineAlphabet+0x68>
    4dcb:	mov    rdi,QWORD PTR [r15]
    4dce:	call   338c0 <Seqtype>
    4dd3:	cmp    eax,0x2
    4dd6:	jg     4e40 <DetermineAlphabet+0xc0>
    4dd8:	test   eax,eax
    4dda:	jle    4db8 <DetermineAlphabet+0x38>
    4ddc:	add    r15,0x8
    4de0:	add    ebx,0x1
    4de3:	cmp    r15,rbp
    4de6:	jne    4dcb <DetermineAlphabet+0x4b>
    4de8:	mov    ebp,0x2
    4ded:	cmp    r12d,ebx
    4df0:	je     4e24 <DetermineAlphabet+0xa4>
    4df2:	mov    ebp,0x3
    4df7:	cmp    r12d,r14d
    4dfa:	je     4e24 <DetermineAlphabet+0xa4>
    4dfc:	cmp    r13d,r14d
    4dff:	mov    eax,r14d
    4e02:	cmovge eax,r13d
    4e06:	cmp    eax,ebx
    4e08:	jl     4e80 <DetermineAlphabet+0x100>
    4e0a:	cmp    r13d,ebx
    4e0d:	cmovge ebx,r13d
    4e11:	cmp    ebx,r14d
    4e14:	jge    4e68 <DetermineAlphabet+0xe8>
    4e16:	lea    rdi,[rip+0x382c3]        # 3d0e0 <_IO_stdin_used+0xe0>
    4e1d:	xor    eax,eax
    4e1f:	call   318f0 <Warn>
    4e24:	add    rsp,0x8
    4e28:	mov    edi,ebp
    4e2a:	pop    rbx
    4e2b:	pop    rbp
    4e2c:	pop    r12
    4e2e:	pop    r13
    4e30:	pop    r14
    4e32:	pop    r15
    4e34:	jmp    4ad0 <SetAlphabet>
    4e39:	nop    DWORD PTR [rax+0x0]
    4e40:	cmp    eax,0x3
    4e43:	jne    4e50 <DetermineAlphabet+0xd0>
    4e45:	add    r14d,0x1
    4e49:	jmp    4dc2 <DetermineAlphabet+0x42>
    4e4e:	xchg   ax,ax
    4e50:	lea    rdi,[rip+0x3831d]        # 3d174 <_IO_stdin_used+0x174>
    4e57:	xor    eax,eax
    4e59:	call   317f0 <Die>
    4e5e:	jmp    4dc2 <DetermineAlphabet+0x42>
    4e63:	nop    DWORD PTR [rax+rax*1+0x0]
    4e68:	lea    rdi,[rip+0x382a9]        # 3d118 <_IO_stdin_used+0x118>
    4e6f:	xor    eax,eax
    4e71:	xor    ebp,ebp
    4e73:	call   317f0 <Die>
    4e78:	jmp    4e24 <DetermineAlphabet+0xa4>
    4e7a:	nop    WORD PTR [rax+rax*1+0x0]
    4e80:	lea    rdi,[rip+0x38221]        # 3d0a8 <_IO_stdin_used+0xa8>
    4e87:	xor    eax,eax
    4e89:	mov    ebp,0x2
    4e8e:	call   318f0 <Warn>
    4e93:	jmp    4e24 <DetermineAlphabet+0xa4>
    4e95:	nop    DWORD PTR [rax]
    4e98:	xor    r14d,r14d
    4e9b:	xor    ebx,ebx
    4e9d:	xor    r13d,r13d
    4ea0:	jmp    4de8 <DetermineAlphabet+0x68>
    4ea5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000004eb0 <SymbolIndex>:
    4eb0:	endbr64 
    4eb4:	push   rbx
    4eb5:	movsx  rbx,dil
    4eb9:	call   3440 <__ctype_toupper_loc@plt>
    4ebe:	lea    rdi,[rip+0x5d3bb]        # 62280 <Alphabet>
    4ec5:	mov    rax,QWORD PTR [rax]
    4ec8:	movsx  esi,BYTE PTR [rax+rbx*4]
    4ecc:	call   3590 <strchr@plt>
    4ed1:	lea    rdx,[rip+0x5d3a8]        # 62280 <Alphabet>
    4ed8:	mov    r8d,eax
    4edb:	sub    r8d,edx
    4ede:	test   rax,rax
    4ee1:	je     4ef0 <SymbolIndex+0x40>
    4ee3:	mov    eax,r8d
    4ee6:	pop    rbx
    4ee7:	ret    
    4ee8:	nop    DWORD PTR [rax+rax*1+0x0]
    4ef0:	mov    eax,DWORD PTR [rip+0x5d3a6]        # 6229c <Alphabet_iupac>
    4ef6:	pop    rbx
    4ef7:	lea    r8d,[rax-0x1]
    4efb:	mov    eax,r8d
    4efe:	ret    
    4eff:	nop

0000000000004f00 <DigitizeSequence>:
    4f00:	endbr64 
    4f04:	push   r13
    4f06:	lea    edx,[rsi+0x2]
    4f09:	push   r12
    4f0b:	movsxd rdx,edx
    4f0e:	push   rbp
    4f0f:	mov    rbp,rdi
    4f12:	lea    rdi,[rip+0x38271]        # 3d18a <_IO_stdin_used+0x18a>
    4f19:	push   rbx
    4f1a:	mov    ebx,esi
    4f1c:	mov    esi,0xd7
    4f21:	sub    rsp,0x8
    4f25:	call   36810 <sre_malloc>
    4f2a:	movsxd rdx,ebx
    4f2d:	mov    r12,rax
    4f30:	mov    eax,DWORD PTR [rip+0x5d366]        # 6229c <Alphabet_iupac>
    4f36:	mov    BYTE PTR [r12+rdx*1+0x1],al
    4f3b:	mov    BYTE PTR [r12],al
    4f3f:	test   ebx,ebx
    4f41:	jle    4f6b <DigitizeSequence+0x6b>
    4f43:	lea    r13d,[rbx-0x1]
    4f47:	xor    ebx,ebx
    4f49:	nop    DWORD PTR [rax+0x0]
    4f50:	movsx  edi,BYTE PTR [rbp+rbx*1+0x0]
    4f55:	call   4eb0 <SymbolIndex>
    4f5a:	mov    BYTE PTR [r12+rbx*1+0x1],al
    4f5f:	mov    rax,rbx
    4f62:	add    rbx,0x1
    4f66:	cmp    rax,r13
    4f69:	jne    4f50 <DigitizeSequence+0x50>
    4f6b:	add    rsp,0x8
    4f6f:	mov    rax,r12
    4f72:	pop    rbx
    4f73:	pop    rbp
    4f74:	pop    r12
    4f76:	pop    r13
    4f78:	ret    
    4f79:	nop    DWORD PTR [rax+0x0]

0000000000004f80 <DedigitizeSequence>:
    4f80:	endbr64 
    4f84:	push   rbp
    4f85:	movsxd rbp,esi
    4f88:	mov    esi,0xeb
    4f8d:	push   rbx
    4f8e:	lea    edx,[rbp+0x1]
    4f91:	mov    rbx,rdi
    4f94:	lea    rdi,[rip+0x381ef]        # 3d18a <_IO_stdin_used+0x18a>
    4f9b:	movsxd rdx,edx
    4f9e:	sub    rsp,0x8
    4fa2:	call   36810 <sre_malloc>
    4fa7:	test   ebp,ebp
    4fa9:	jle    4fd6 <DedigitizeSequence+0x56>
    4fab:	lea    esi,[rbp-0x1]
    4fae:	mov    edx,0x1
    4fb3:	lea    rdi,[rip+0x5d2c6]        # 62280 <Alphabet>
    4fba:	add    rsi,0x2
    4fbe:	xchg   ax,ax
    4fc0:	movsx  rcx,BYTE PTR [rbx+rdx*1]
    4fc5:	movzx  ecx,BYTE PTR [rdi+rcx*1]
    4fc9:	mov    BYTE PTR [rax+rdx*1-0x1],cl
    4fcd:	add    rdx,0x1
    4fd1:	cmp    rsi,rdx
    4fd4:	jne    4fc0 <DedigitizeSequence+0x40>
    4fd6:	mov    BYTE PTR [rax+rbp*1],0x0
    4fda:	add    rsp,0x8
    4fde:	pop    rbx
    4fdf:	pop    rbp
    4fe0:	ret    
    4fe1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4fec:	nop    DWORD PTR [rax+0x0]

0000000000004ff0 <DigitizeAlignment>:
    4ff0:	endbr64 
    4ff4:	push   r15
    4ff6:	xor    r15d,r15d
    4ff9:	push   r14
    4ffb:	push   r13
    4ffd:	mov    r13,rdi
    5000:	push   r12
    5002:	push   rbp
    5003:	movabs rbp,0x8000000000006001
    500d:	push   rbx
    500e:	sub    rsp,0x28
    5012:	movsxd rdx,DWORD PTR [rdi+0x1c]
    5016:	lea    rdi,[rip+0x3816d]        # 3d18a <_IO_stdin_used+0x18a>
    501d:	mov    QWORD PTR [rsp+0x18],rsi
    5022:	mov    esi,0x108
    5027:	shl    rdx,0x3
    502b:	call   36810 <sre_malloc>
    5030:	mov    edx,DWORD PTR [r13+0x1c]
    5034:	mov    r12,rax
    5037:	test   edx,edx
    5039:	jle    511b <DigitizeAlignment+0x12b>
    503f:	nop
    5040:	mov    eax,DWORD PTR [r13+0x18]
    5044:	mov    esi,0x10a
    5049:	lea    rdi,[rip+0x3813a]        # 3d18a <_IO_stdin_used+0x18a>
    5050:	lea    r14,[r15*8+0x0]
    5058:	lea    edx,[rax+0x2]
    505b:	movsxd rdx,edx
    505e:	call   36810 <sre_malloc>
    5063:	mov    edx,DWORD PTR [rip+0x5d233]        # 6229c <Alphabet_iupac>
    5069:	mov    QWORD PTR [r12+r15*8],rax
    506d:	mov    BYTE PTR [rax],dl
    506f:	mov    eax,DWORD PTR [r13+0x18]
    5073:	test   eax,eax
    5075:	jle    5138 <DigitizeAlignment+0x148>
    507b:	xor    ebx,ebx
    507d:	mov    esi,0x1
    5082:	mov    edx,0x1
    5087:	jmp    509a <DigitizeAlignment+0xaa>
    5089:	nop    DWORD PTR [rax+0x0]
    5090:	add    rbx,0x1
    5094:	cmp    DWORD PTR [r13+0x18],ebx
    5098:	jle    5100 <DigitizeAlignment+0x110>
    509a:	mov    rax,QWORD PTR [r13+0x0]
    509e:	mov    rax,QWORD PTR [rax+r14*1]
    50a2:	movsx  edi,BYTE PTR [rax+rbx*1]
    50a6:	mov    eax,0x1
    50ab:	lea    ecx,[rdi-0x20]
    50ae:	cmp    cl,0x3f
    50b1:	ja     50bf <DigitizeAlignment+0xcf>
    50b3:	mov    rax,rbp
    50b6:	shr    rax,cl
    50b9:	not    rax
    50bc:	and    eax,0x1
    50bf:	mov    rcx,rdx
    50c2:	cmp    dil,0x7e
    50c6:	je     5090 <DigitizeAlignment+0xa0>
    50c8:	test   al,al
    50ca:	je     5090 <DigitizeAlignment+0xa0>
    50cc:	mov    QWORD PTR [rsp+0x10],rdx
    50d1:	add    rbx,0x1
    50d5:	mov    DWORD PTR [rsp+0xc],esi
    50d9:	call   4eb0 <SymbolIndex>
    50de:	mov    esi,DWORD PTR [rsp+0xc]
    50e2:	mov    rcx,QWORD PTR [r12+r15*8]
    50e6:	mov    rdx,QWORD PTR [rsp+0x10]
    50eb:	add    esi,0x1
    50ee:	mov    BYTE PTR [rcx+rdx*1],al
    50f1:	movsxd rdx,esi
    50f4:	mov    rcx,rdx
    50f7:	cmp    DWORD PTR [r13+0x18],ebx
    50fb:	jg     509a <DigitizeAlignment+0xaa>
    50fd:	nop    DWORD PTR [rax]
    5100:	mov    rax,QWORD PTR [r12+r15*8]
    5104:	mov    edx,DWORD PTR [rip+0x5d192]        # 6229c <Alphabet_iupac>
    510a:	add    r15,0x1
    510e:	mov    BYTE PTR [rax+rcx*1],dl
    5111:	cmp    DWORD PTR [r13+0x1c],r15d
    5115:	jg     5040 <DigitizeAlignment+0x50>
    511b:	mov    rax,QWORD PTR [rsp+0x18]
    5120:	mov    QWORD PTR [rax],r12
    5123:	add    rsp,0x28
    5127:	pop    rbx
    5128:	pop    rbp
    5129:	pop    r12
    512b:	pop    r13
    512d:	pop    r14
    512f:	pop    r15
    5131:	ret    
    5132:	nop    WORD PTR [rax+rax*1+0x0]
    5138:	mov    ecx,0x1
    513d:	jmp    5100 <DigitizeAlignment+0x110>
    513f:	nop

0000000000005140 <P7CountSymbol>:
    5140:	endbr64 
    5144:	mov    edx,DWORD PTR [rip+0x5d1b6]        # 62300 <Alphabet_size>
    514a:	movsx  rax,sil
    514e:	movsx  rsi,sil
    5152:	cmp    esi,edx
    5154:	jl     51b8 <P7CountSymbol+0x78>
    5156:	test   edx,edx
    5158:	jle    51c8 <P7CountSymbol+0x88>
    515a:	lea    r8d,[rdx-0x1]
    515e:	lea    rdx,[rax+rax*4]
    5162:	lea    rax,[rip+0x5cf37]        # 620a0 <Degenerate>
    5169:	lea    r9,[rip+0x5d130]        # 622a0 <DegenCount>
    5170:	lea    rcx,[rax+rdx*4]
    5174:	xor    eax,eax
    5176:	jmp    5183 <P7CountSymbol+0x43>
    5178:	nop    DWORD PTR [rax+rax*1+0x0]
    5180:	mov    rax,rdx
    5183:	cmp    BYTE PTR [rcx+rax*1],0x0
    5187:	je     51a8 <P7CountSymbol+0x68>
    5189:	pxor   xmm1,xmm1
    518d:	movaps xmm2,xmm0
    5190:	cvtsi2ss xmm1,DWORD PTR [r9+rsi*4]
    5196:	divss  xmm2,xmm1
    519a:	movss  xmm1,DWORD PTR [rdi+rax*4]
    519f:	addss  xmm1,xmm2
    51a3:	movss  DWORD PTR [rdi+rax*4],xmm1
    51a8:	lea    rdx,[rax+0x1]
    51ac:	cmp    rax,r8
    51af:	jne    5180 <P7CountSymbol+0x40>
    51b1:	ret    
    51b2:	nop    WORD PTR [rax+rax*1+0x0]
    51b8:	lea    rax,[rdi+rax*4]
    51bc:	addss  xmm0,DWORD PTR [rax]
    51c0:	movss  DWORD PTR [rax],xmm0
    51c4:	ret    
    51c5:	nop    DWORD PTR [rax]
    51c8:	ret    
    51c9:	nop    DWORD PTR [rax+0x0]

00000000000051d0 <DefaultGeneticCode>:
    51d0:	endbr64 
    51d4:	push   r13
    51d6:	lea    r13,[rip+0x5d0a3]        # 62280 <Alphabet>
    51dd:	push   r12
    51df:	push   rbp
    51e0:	mov    rbp,rdi
    51e3:	push   rbx
    51e4:	lea    rbx,[rip+0x48ad5]        # 4dcc0 <stdcode1>
    51eb:	lea    r12,[rbx+0x200]
    51f2:	sub    rsp,0x8
    51f6:	jmp    521b <DefaultGeneticCode+0x4b>
    51f8:	nop    DWORD PTR [rax+rax*1+0x0]
    5200:	mov    rdi,r13
    5203:	add    rbx,0x8
    5207:	add    rbp,0x4
    520b:	call   3590 <strchr@plt>
    5210:	sub    rax,r13
    5213:	mov    DWORD PTR [rbp-0x4],eax
    5216:	cmp    r12,rbx
    5219:	je     523b <DefaultGeneticCode+0x6b>
    521b:	mov    rax,QWORD PTR [rbx]
    521e:	movsx  esi,BYTE PTR [rax]
    5221:	cmp    sil,0x2a
    5225:	jne    5200 <DefaultGeneticCode+0x30>
    5227:	add    rbx,0x8
    522b:	mov    DWORD PTR [rbp+0x0],0xffffffff
    5232:	add    rbp,0x4
    5236:	cmp    r12,rbx
    5239:	jne    521b <DefaultGeneticCode+0x4b>
    523b:	add    rsp,0x8
    523f:	pop    rbx
    5240:	pop    rbp
    5241:	pop    r12
    5243:	pop    r13
    5245:	ret    
    5246:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000005250 <DefaultCodonBias>:
    5250:	endbr64 
    5254:	movabs rax,0x3e8000003e800000
    525e:	movabs rsi,0x3eaaaaab3eaaaaab
    5268:	movabs rdx,0x3e2aaaab3e2aaaab
    5272:	movabs rcx,0x3f0000003f000000
    527c:	mov    QWORD PTR [rdi+0x10],rax
    5280:	mov    QWORD PTR [rdi+0x18],rax
    5284:	mov    QWORD PTR [rdi+0x50],rax
    5288:	mov    QWORD PTR [rdi+0x58],rax
    528c:	mov    QWORD PTR [rdi+0x90],rax
    5293:	mov    QWORD PTR [rdi+0x98],rax
    529a:	mov    QWORD PTR [rdi+0xa0],rax
    52a1:	mov    QWORD PTR [rdi+0xa8],rax
    52a8:	mov    QWORD PTR [rdi+0xb0],rax
    52af:	mov    QWORD PTR [rdi+0xb8],rax
    52b6:	movabs rax,0x3f00000000000000
    52c0:	mov    QWORD PTR [rdi+0xc0],rax
    52c7:	mov    QWORD PTR [rdi+0xc8],rax
    52ce:	mov    QWORD PTR [rdi+0xe0],rax
    52d5:	add    rax,0x3f800000
    52db:	mov    QWORD PTR [rdi+0x30],rsi
    52df:	add    rsi,0xd55555
    52e6:	mov    QWORD PTR [rdi+0xe8],rax
    52ed:	sub    rax,0x1555555
    52f3:	mov    QWORD PTR [rdi],rcx
    52f6:	mov    QWORD PTR [rdi+0x8],rcx
    52fa:	mov    QWORD PTR [rdi+0x20],rdx
    52fe:	mov    QWORD PTR [rdi+0x28],rdx
    5302:	mov    QWORD PTR [rdi+0x38],rsi
    5306:	mov    QWORD PTR [rdi+0x40],rcx
    530a:	mov    QWORD PTR [rdi+0x48],rcx
    530e:	mov    QWORD PTR [rdi+0x60],rdx
    5312:	mov    QWORD PTR [rdi+0x68],rdx
    5316:	mov    QWORD PTR [rdi+0x70],rdx
    531a:	mov    QWORD PTR [rdi+0x78],rdx
    531e:	mov    QWORD PTR [rdi+0x80],rcx
    5325:	mov    QWORD PTR [rdi+0x88],rcx
    532c:	mov    QWORD PTR [rdi+0xd0],rdx
    5333:	mov    QWORD PTR [rdi+0xd8],rdx
    533a:	mov    QWORD PTR [rdi+0xf0],rax
    5341:	mov    QWORD PTR [rdi+0xf8],rax
    5348:	ret    
    5349:	nop    DWORD PTR [rax+0x0]

0000000000005350 <CreatePlan7Matrix>:
    5350:	endbr64 
    5354:	push   r15
    5356:	push   r14
    5358:	mov    r14d,ecx
    535b:	push   r13
    535d:	push   r12
    535f:	push   rbp
    5360:	mov    ebp,edi
    5362:	lea    rdi,[rip+0x37e57]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5369:	push   rbx
    536a:	lea    r15d,[rbp+0x1]
    536e:	mov    ebx,esi
    5370:	mov    esi,0x42
    5375:	sub    rsp,0x18
    5379:	mov    DWORD PTR [rsp+0x8],edx
    537d:	mov    edx,0x50
    5382:	call   36810 <sre_malloc>
    5387:	movsxd rdx,r15d
    538a:	mov    esi,0x43
    538f:	lea    rdi,[rip+0x37e2a]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5396:	lea    r13,[rdx*8+0x0]
    539e:	mov    r12,rax
    53a1:	mov    rdx,r13
    53a4:	call   36810 <sre_malloc>
    53a9:	mov    rdx,r13
    53ac:	mov    esi,0x44
    53b1:	lea    rdi,[rip+0x37e08]        # 3d1c0 <_IO_stdin_used+0x1c0>
    53b8:	mov    QWORD PTR [r12],rax
    53bc:	call   36810 <sre_malloc>
    53c1:	mov    rdx,r13
    53c4:	mov    esi,0x45
    53c9:	lea    rdi,[rip+0x37df0]        # 3d1c0 <_IO_stdin_used+0x1c0>
    53d0:	mov    QWORD PTR [r12+0x8],rax
    53d5:	call   36810 <sre_malloc>
    53da:	mov    rdx,r13
    53dd:	mov    esi,0x46
    53e2:	lea    rdi,[rip+0x37dd7]        # 3d1c0 <_IO_stdin_used+0x1c0>
    53e9:	mov    QWORD PTR [r12+0x10],rax
    53ee:	call   36810 <sre_malloc>
    53f3:	lea    edx,[r15+r15*4]
    53f7:	mov    esi,0x47
    53fc:	lea    rdi,[rip+0x37dbd]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5403:	mov    QWORD PTR [r12+0x18],rax
    5408:	movsxd rdx,edx
    540b:	shl    rdx,0x2
    540f:	call   36810 <sre_malloc>
    5414:	lea    r11d,[rbx+0x2]
    5418:	mov    esi,0x48
    541d:	lea    rdi,[rip+0x37d9c]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5424:	imul   r15d,r11d
    5428:	mov    QWORD PTR [r12+0x20],rax
    542d:	mov    DWORD PTR [rsp+0xc],r11d
    5432:	movsxd r15,r15d
    5435:	shl    r15,0x2
    5439:	mov    rdx,r15
    543c:	call   36810 <sre_malloc>
    5441:	mov    rdx,r15
    5444:	mov    esi,0x49
    5449:	lea    rdi,[rip+0x37d70]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5450:	mov    QWORD PTR [r12+0x28],rax
    5455:	call   36810 <sre_malloc>
    545a:	lea    rdi,[rip+0x37d5f]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5461:	mov    rdx,r15
    5464:	mov    esi,0x4a
    5469:	mov    QWORD PTR [r12+0x30],rax
    546e:	call   36810 <sre_malloc>
    5473:	mov    rdi,QWORD PTR [r12]
    5477:	mov    r8,QWORD PTR [r12+0x8]
    547c:	mov    r9,QWORD PTR [r12+0x10]
    5481:	mov    rcx,QWORD PTR [r12+0x18]
    5486:	mov    QWORD PTR [r12+0x38],rax
    548b:	mov    rax,QWORD PTR [r12+0x20]
    5490:	mov    QWORD PTR [rdi],rax
    5493:	mov    rax,QWORD PTR [r12+0x28]
    5498:	mov    QWORD PTR [r8],rax
    549b:	mov    rax,QWORD PTR [r12+0x30]
    54a0:	mov    QWORD PTR [r9],rax
    54a3:	mov    rax,QWORD PTR [r12+0x38]
    54a8:	mov    QWORD PTR [rcx],rax
    54ab:	test   ebp,ebp
    54ad:	jle    5508 <CreatePlan7Matrix+0x1b8>
    54af:	movsxd r11,DWORD PTR [rsp+0xc]
    54b4:	lea    r15d,[rbp-0x1]
    54b8:	mov    esi,0x14
    54bd:	mov    eax,0x1
    54c2:	add    r15,0x2
    54c6:	shl    r11,0x2
    54ca:	mov    rdx,r11
    54cd:	nop    DWORD PTR [rax]
    54d0:	mov    r10,QWORD PTR [rdi]
    54d3:	add    r10,rsi
    54d6:	add    rsi,0x14
    54da:	mov    QWORD PTR [rdi+rax*8],r10
    54de:	mov    r10,QWORD PTR [r8]
    54e1:	add    r10,rdx
    54e4:	mov    QWORD PTR [r8+rax*8],r10
    54e8:	mov    r10,QWORD PTR [r9]
    54eb:	add    r10,rdx
    54ee:	mov    QWORD PTR [r9+rax*8],r10
    54f2:	mov    r10,QWORD PTR [rcx]
    54f5:	add    r10,rdx
    54f8:	add    rdx,r11
    54fb:	mov    QWORD PTR [rcx+rax*8],r10
    54ff:	add    rax,0x1
    5503:	cmp    rax,r15
    5506:	jne    54d0 <CreatePlan7Matrix+0x180>
    5508:	test   r14d,r14d
    550b:	jle    5515 <CreatePlan7Matrix+0x1c5>
    550d:	mov    eax,DWORD PTR [rsp+0x8]
    5511:	test   eax,eax
    5513:	jg     5540 <CreatePlan7Matrix+0x1f0>
    5515:	mov    eax,DWORD PTR [rsp+0x8]
    5519:	mov    DWORD PTR [r12+0x40],ebp
    551e:	mov    DWORD PTR [r12+0x44],ebx
    5523:	mov    DWORD PTR [r12+0x48],eax
    5528:	mov    rax,r12
    552b:	mov    DWORD PTR [r12+0x4c],r14d
    5530:	add    rsp,0x18
    5534:	pop    rbx
    5535:	pop    rbp
    5536:	pop    r12
    5538:	pop    r13
    553a:	pop    r14
    553c:	pop    r15
    553e:	ret    
    553f:	nop
    5540:	lea    rdi,[rip+0x37cd9]        # 3d220 <_IO_stdin_used+0x220>
    5547:	xor    eax,eax
    5549:	call   317f0 <Die>
    554e:	jmp    5515 <CreatePlan7Matrix+0x1c5>

0000000000005550 <ResizePlan7Matrix>:
    5550:	endbr64 
    5554:	push   r15
    5556:	mov    r15,r9
    5559:	push   r14
    555b:	push   r13
    555d:	push   r12
    555f:	mov    r12d,esi
    5562:	push   rbp
    5563:	mov    ebp,edx
    5565:	push   rbx
    5566:	mov    rbx,rdi
    5569:	sub    rsp,0x18
    556d:	mov    QWORD PTR [rsp],rcx
    5571:	mov    QWORD PTR [rsp+0x8],r8
    5576:	cmp    DWORD PTR [rdi+0x40],esi
    5579:	jl     5700 <ResizePlan7Matrix+0x1b0>
    557f:	lea    r13d,[rsi+0x1]
    5583:	cmp    DWORD PTR [rdi+0x44],edx
    5586:	jge    56a8 <ResizePlan7Matrix+0x158>
    558c:	add    ebp,DWORD PTR [rbx+0x4c]
    558f:	mov    DWORD PTR [rbx+0x44],ebp
    5592:	lea    ecx,[r13+r13*4+0x0]
    5597:	mov    rdx,QWORD PTR [rbx+0x20]
    559b:	mov    esi,0x90
    55a0:	add    ebp,0x2
    55a3:	movsxd rcx,ecx
    55a6:	lea    rdi,[rip+0x37c13]        # 3d1c0 <_IO_stdin_used+0x1c0>
    55ad:	shl    rcx,0x2
    55b1:	call   36860 <sre_realloc>
    55b6:	mov    r8d,r13d
    55b9:	mov    rdx,QWORD PTR [rbx+0x28]
    55bd:	mov    esi,0x91
    55c2:	imul   r8d,ebp
    55c6:	mov    QWORD PTR [rbx+0x20],rax
    55ca:	lea    rdi,[rip+0x37bef]        # 3d1c0 <_IO_stdin_used+0x1c0>
    55d1:	movsxd rcx,r8d
    55d4:	lea    r13,[rcx*4+0x0]
    55dc:	mov    rcx,r13
    55df:	call   36860 <sre_realloc>
    55e4:	mov    rdx,QWORD PTR [rbx+0x30]
    55e8:	mov    rcx,r13
    55eb:	mov    esi,0x92
    55f0:	mov    QWORD PTR [rbx+0x28],rax
    55f4:	lea    rdi,[rip+0x37bc5]        # 3d1c0 <_IO_stdin_used+0x1c0>
    55fb:	call   36860 <sre_realloc>
    5600:	mov    rdx,QWORD PTR [rbx+0x38]
    5604:	mov    esi,0x93
    5609:	mov    rcx,r13
    560c:	mov    QWORD PTR [rbx+0x30],rax
    5610:	lea    rdi,[rip+0x37ba9]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5617:	call   36860 <sre_realloc>
    561c:	mov    rsi,QWORD PTR [rbx]
    561f:	mov    rdi,QWORD PTR [rbx+0x8]
    5623:	mov    r8,QWORD PTR [rbx+0x10]
    5627:	mov    r9,QWORD PTR [rbx+0x18]
    562b:	mov    QWORD PTR [rbx+0x38],rax
    562f:	mov    rax,QWORD PTR [rbx+0x20]
    5633:	mov    QWORD PTR [rsi],rax
    5636:	mov    rax,QWORD PTR [rbx+0x28]
    563a:	mov    QWORD PTR [rdi],rax
    563d:	mov    rax,QWORD PTR [rbx+0x30]
    5641:	mov    QWORD PTR [r8],rax
    5644:	mov    rax,QWORD PTR [rbx+0x38]
    5648:	mov    QWORD PTR [r9],rax
    564b:	test   r12d,r12d
    564e:	jle    56a8 <ResizePlan7Matrix+0x158>
    5650:	movsxd rbp,ebp
    5653:	lea    r11d,[r12-0x1]
    5658:	mov    ecx,0x14
    565d:	mov    eax,0x1
    5662:	shl    rbp,0x2
    5666:	add    r11,0x2
    566a:	mov    rdx,rbp
    566d:	nop    DWORD PTR [rax]
    5670:	mov    r10,QWORD PTR [rsi]
    5673:	add    r10,rcx
    5676:	add    rcx,0x14
    567a:	mov    QWORD PTR [rsi+rax*8],r10
    567e:	mov    r10,QWORD PTR [rdi]
    5681:	add    r10,rdx
    5684:	mov    QWORD PTR [rdi+rax*8],r10
    5688:	mov    r10,QWORD PTR [r8]
    568b:	add    r10,rdx
    568e:	mov    QWORD PTR [r8+rax*8],r10
    5692:	mov    r10,QWORD PTR [r9]
    5695:	add    r10,rdx
    5698:	add    rdx,rbp
    569b:	mov    QWORD PTR [r9+rax*8],r10
    569f:	add    rax,0x1
    56a3:	cmp    r11,rax
    56a6:	jne    5670 <ResizePlan7Matrix+0x120>
    56a8:	cmp    QWORD PTR [rsp],0x0
    56ad:	je     56b9 <ResizePlan7Matrix+0x169>
    56af:	mov    rax,QWORD PTR [rbx]
    56b2:	mov    rdi,QWORD PTR [rsp]
    56b6:	mov    QWORD PTR [rdi],rax
    56b9:	mov    rsi,QWORD PTR [rsp+0x8]
    56be:	test   rsi,rsi
    56c1:	je     56ca <ResizePlan7Matrix+0x17a>
    56c3:	mov    rax,QWORD PTR [rbx+0x8]
    56c7:	mov    QWORD PTR [rsi],rax
    56ca:	test   r15,r15
    56cd:	je     56d6 <ResizePlan7Matrix+0x186>
    56cf:	mov    rax,QWORD PTR [rbx+0x10]
    56d3:	mov    QWORD PTR [r15],rax
    56d6:	cmp    QWORD PTR [rsp+0x50],0x0
    56dc:	je     56ea <ResizePlan7Matrix+0x19a>
    56de:	mov    rax,QWORD PTR [rbx+0x18]
    56e2:	mov    rdi,QWORD PTR [rsp+0x50]
    56e7:	mov    QWORD PTR [rdi],rax
    56ea:	add    rsp,0x18
    56ee:	pop    rbx
    56ef:	pop    rbp
    56f0:	pop    r12
    56f2:	pop    r13
    56f4:	pop    r14
    56f6:	pop    r15
    56f8:	ret    
    56f9:	nop    DWORD PTR [rax+0x0]
    5700:	add    r12d,DWORD PTR [rdi+0x48]
    5704:	mov    rdx,QWORD PTR [rdi]
    5707:	mov    esi,0x85
    570c:	lea    r13d,[r12+0x1]
    5711:	mov    DWORD PTR [rdi+0x40],r12d
    5715:	lea    rdi,[rip+0x37aa4]        # 3d1c0 <_IO_stdin_used+0x1c0>
    571c:	movsxd rcx,r13d
    571f:	lea    r14,[rcx*8+0x0]
    5727:	mov    rcx,r14
    572a:	call   36860 <sre_realloc>
    572f:	mov    rdx,QWORD PTR [rbx+0x8]
    5733:	mov    rcx,r14
    5736:	mov    esi,0x86
    573b:	mov    QWORD PTR [rbx],rax
    573e:	lea    rdi,[rip+0x37a7b]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5745:	call   36860 <sre_realloc>
    574a:	mov    rdx,QWORD PTR [rbx+0x10]
    574e:	mov    rcx,r14
    5751:	mov    esi,0x87
    5756:	mov    QWORD PTR [rbx+0x8],rax
    575a:	lea    rdi,[rip+0x37a5f]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5761:	call   36860 <sre_realloc>
    5766:	mov    rdx,QWORD PTR [rbx+0x18]
    576a:	mov    rcx,r14
    576d:	mov    esi,0x88
    5772:	mov    QWORD PTR [rbx+0x10],rax
    5776:	lea    rdi,[rip+0x37a43]        # 3d1c0 <_IO_stdin_used+0x1c0>
    577d:	call   36860 <sre_realloc>
    5782:	mov    QWORD PTR [rbx+0x18],rax
    5786:	cmp    DWORD PTR [rbx+0x44],ebp
    5789:	jge    5592 <ResizePlan7Matrix+0x42>
    578f:	jmp    558c <ResizePlan7Matrix+0x3c>
    5794:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    579f:	nop

00000000000057a0 <AllocPlan7Matrix>:
    57a0:	endbr64 
    57a4:	push   r13
    57a6:	sub    edi,0x1
    57a9:	mov    r13,r8
    57ac:	push   r12
    57ae:	mov    r12,rdx
    57b1:	xor    edx,edx
    57b3:	push   rbp
    57b4:	mov    rbp,rcx
    57b7:	xor    ecx,ecx
    57b9:	push   rbx
    57ba:	mov    rbx,r9
    57bd:	sub    rsp,0x8
    57c1:	call   5350 <CreatePlan7Matrix>
    57c6:	test   r12,r12
    57c9:	je     57d2 <AllocPlan7Matrix+0x32>
    57cb:	mov    rdx,QWORD PTR [rax]
    57ce:	mov    QWORD PTR [r12],rdx
    57d2:	test   rbp,rbp
    57d5:	je     57df <AllocPlan7Matrix+0x3f>
    57d7:	mov    rdx,QWORD PTR [rax+0x8]
    57db:	mov    QWORD PTR [rbp+0x0],rdx
    57df:	test   r13,r13
    57e2:	je     57ec <AllocPlan7Matrix+0x4c>
    57e4:	mov    rdx,QWORD PTR [rax+0x10]
    57e8:	mov    QWORD PTR [r13+0x0],rdx
    57ec:	test   rbx,rbx
    57ef:	je     57f8 <AllocPlan7Matrix+0x58>
    57f1:	mov    rdx,QWORD PTR [rax+0x18]
    57f5:	mov    QWORD PTR [rbx],rdx
    57f8:	add    rsp,0x8
    57fc:	pop    rbx
    57fd:	pop    rbp
    57fe:	pop    r12
    5800:	pop    r13
    5802:	ret    
    5803:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    580e:	xchg   ax,ax

0000000000005810 <FreePlan7Matrix>:
    5810:	endbr64 
    5814:	push   rbp
    5815:	mov    rbp,rdi
    5818:	mov    rdi,QWORD PTR [rdi+0x20]
    581c:	call   3460 <free@plt>
    5821:	mov    rdi,QWORD PTR [rbp+0x28]
    5825:	call   3460 <free@plt>
    582a:	mov    rdi,QWORD PTR [rbp+0x30]
    582e:	call   3460 <free@plt>
    5833:	mov    rdi,QWORD PTR [rbp+0x38]
    5837:	call   3460 <free@plt>
    583c:	mov    rdi,QWORD PTR [rbp+0x0]
    5840:	call   3460 <free@plt>
    5845:	mov    rdi,QWORD PTR [rbp+0x8]
    5849:	call   3460 <free@plt>
    584e:	mov    rdi,QWORD PTR [rbp+0x10]
    5852:	call   3460 <free@plt>
    5857:	mov    rdi,QWORD PTR [rbp+0x18]
    585b:	call   3460 <free@plt>
    5860:	mov    rdi,rbp
    5863:	pop    rbp
    5864:	jmp    3460 <free@plt>
    5869:	nop    DWORD PTR [rax+0x0]

0000000000005870 <AllocShadowMatrix>:
    5870:	endbr64 
    5874:	push   r15
    5876:	mov    r15,r8
    5879:	push   r14
    587b:	push   r13
    587d:	movsxd r13,edi
    5880:	lea    rdi,[rip+0x37939]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5887:	push   r12
    5889:	lea    r14,[r13*8+0x0]
    5891:	push   rbp
    5892:	mov    rbp,r13
    5895:	push   rbx
    5896:	mov    ebx,esi
    5898:	mov    esi,0xf4
    589d:	add    ebx,0x2
    58a0:	sub    rsp,0x28
    58a4:	mov    QWORD PTR [rsp],rdx
    58a8:	mov    edx,0x28
    58ad:	mov    QWORD PTR [rsp+0x18],r9
    58b2:	mov    QWORD PTR [rsp+0x8],rcx
    58b7:	call   36810 <sre_malloc>
    58bc:	mov    rdx,r14
    58bf:	mov    esi,0xf5
    58c4:	lea    rdi,[rip+0x378f5]        # 3d1c0 <_IO_stdin_used+0x1c0>
    58cb:	mov    r12,rax
    58ce:	call   36810 <sre_malloc>
    58d3:	mov    rdx,r14
    58d6:	mov    esi,0xf6
    58db:	lea    rdi,[rip+0x378de]        # 3d1c0 <_IO_stdin_used+0x1c0>
    58e2:	mov    QWORD PTR [r12],rax
    58e6:	call   36810 <sre_malloc>
    58eb:	mov    rdx,r14
    58ee:	mov    esi,0xf7
    58f3:	lea    rdi,[rip+0x378c6]        # 3d1c0 <_IO_stdin_used+0x1c0>
    58fa:	mov    QWORD PTR [r12+0x8],rax
    58ff:	call   36810 <sre_malloc>
    5904:	mov    rdx,r14
    5907:	mov    esi,0xf8
    590c:	lea    rdi,[rip+0x378ad]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5913:	mov    QWORD PTR [r12+0x10],rax
    5918:	call   36810 <sre_malloc>
    591d:	lea    rdx,[r13*4+0x0]
    5925:	mov    esi,0xf9
    592a:	lea    rdi,[rip+0x3788f]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5931:	mov    QWORD PTR [r12+0x18],rax
    5936:	call   36810 <sre_malloc>
    593b:	lea    edx,[rbp+rbp*4+0x0]
    593f:	mov    esi,0xfa
    5944:	lea    rdi,[rip+0x37875]        # 3d1c0 <_IO_stdin_used+0x1c0>
    594b:	mov    QWORD PTR [r12+0x20],rax
    5950:	movsxd rdx,edx
    5953:	mov    r13,QWORD PTR [r12]
    5957:	call   36810 <sre_malloc>
    595c:	mov    edx,ebx
    595e:	mov    rcx,QWORD PTR [r12+0x8]
    5963:	mov    esi,0xfb
    5968:	imul   edx,ebp
    596b:	mov    QWORD PTR [r13+0x0],rax
    596f:	lea    rdi,[rip+0x3784a]        # 3d1c0 <_IO_stdin_used+0x1c0>
    5976:	mov    QWORD PTR [rsp+0x10],rcx
    597b:	movsxd r13,edx
    597e:	mov    rdx,r13
    5981:	call   36810 <sre_malloc>
    5986:	mov    rcx,QWORD PTR [rsp+0x10]
    598b:	mov    rdx,r13
    598e:	mov    esi,0xfc
    5993:	lea    rdi,[rip+0x37826]        # 3d1c0 <_IO_stdin_used+0x1c0>
    599a:	mov    QWORD PTR [rcx],rax
    599d:	mov    rcx,QWORD PTR [r12+0x10]
    59a2:	mov    QWORD PTR [rsp+0x10],rcx
    59a7:	call   36810 <sre_malloc>
    59ac:	mov    rcx,QWORD PTR [rsp+0x10]
    59b1:	mov    rdx,r13
    59b4:	mov    esi,0xfd
    59b9:	lea    rdi,[rip+0x37800]        # 3d1c0 <_IO_stdin_used+0x1c0>
    59c0:	mov    QWORD PTR [rcx],rax
    59c3:	mov    rcx,QWORD PTR [r12+0x18]
    59c8:	mov    QWORD PTR [rsp+0x10],rcx
    59cd:	call   36810 <sre_malloc>
    59d2:	mov    rcx,QWORD PTR [rsp+0x10]
    59d7:	cmp    ebp,0x1
    59da:	mov    r9,QWORD PTR [rsp+0x18]
    59df:	mov    QWORD PTR [rcx],rax
    59e2:	jle    5a45 <AllocShadowMatrix+0x1d5>
    59e4:	movsxd rbx,ebx
    59e7:	lea    r11d,[rbp-0x2]
    59eb:	mov    r10,QWORD PTR [r12]
    59ef:	mov    r8,QWORD PTR [r12+0x8]
    59f4:	mov    rdi,QWORD PTR [r12+0x10]
    59f9:	mov    rcx,QWORD PTR [r12+0x18]
    59fe:	add    r11,0x2
    5a02:	mov    rdx,rbx
    5a05:	mov    eax,0x1
    5a0a:	nop    WORD PTR [rax+rax*1+0x0]
    5a10:	lea    rsi,[rax+rax*4]
    5a14:	add    rsi,QWORD PTR [r10]
    5a17:	mov    QWORD PTR [r10+rax*8],rsi
    5a1b:	mov    rsi,QWORD PTR [r8]
    5a1e:	add    rsi,rdx
    5a21:	mov    QWORD PTR [r8+rax*8],rsi
    5a25:	mov    rsi,QWORD PTR [rdi]
    5a28:	add    rsi,rdx
    5a2b:	mov    QWORD PTR [rdi+rax*8],rsi
    5a2f:	mov    rsi,QWORD PTR [rcx]
    5a32:	add    rsi,rdx
    5a35:	add    rdx,rbx
    5a38:	mov    QWORD PTR [rcx+rax*8],rsi
    5a3c:	add    rax,0x1
    5a40:	cmp    r11,rax
    5a43:	jne    5a10 <AllocShadowMatrix+0x1a0>
    5a45:	mov    rbx,QWORD PTR [rsp]
    5a49:	test   rbx,rbx
    5a4c:	je     5a55 <AllocShadowMatrix+0x1e5>
    5a4e:	mov    rax,QWORD PTR [r12]
    5a52:	mov    QWORD PTR [rbx],rax
    5a55:	mov    rbx,QWORD PTR [rsp+0x8]
    5a5a:	test   rbx,rbx
    5a5d:	je     5a67 <AllocShadowMatrix+0x1f7>
    5a5f:	mov    rax,QWORD PTR [r12+0x8]
    5a64:	mov    QWORD PTR [rbx],rax
    5a67:	test   r15,r15
    5a6a:	je     5a74 <AllocShadowMatrix+0x204>
    5a6c:	mov    rax,QWORD PTR [r12+0x10]
    5a71:	mov    QWORD PTR [r15],rax
    5a74:	test   r9,r9
    5a77:	je     5a81 <AllocShadowMatrix+0x211>
    5a79:	mov    rax,QWORD PTR [r12+0x18]
    5a7e:	mov    QWORD PTR [r9],rax
    5a81:	add    rsp,0x28
    5a85:	mov    rax,r12
    5a88:	pop    rbx
    5a89:	pop    rbp
    5a8a:	pop    r12
    5a8c:	pop    r13
    5a8e:	pop    r14
    5a90:	pop    r15
    5a92:	ret    
    5a93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    5a9e:	xchg   ax,ax

0000000000005aa0 <FreeShadowMatrix>:
    5aa0:	endbr64 
    5aa4:	push   rbp
    5aa5:	mov    rax,QWORD PTR [rdi]
    5aa8:	mov    rbp,rdi
    5aab:	mov    rdi,QWORD PTR [rax]
    5aae:	call   3460 <free@plt>
    5ab3:	mov    rax,QWORD PTR [rbp+0x8]
    5ab7:	mov    rdi,QWORD PTR [rax]
    5aba:	call   3460 <free@plt>
    5abf:	mov    rax,QWORD PTR [rbp+0x10]
    5ac3:	mov    rdi,QWORD PTR [rax]
    5ac6:	call   3460 <free@plt>
    5acb:	mov    rax,QWORD PTR [rbp+0x18]
    5acf:	mov    rdi,QWORD PTR [rax]
    5ad2:	call   3460 <free@plt>
    5ad7:	mov    rdi,QWORD PTR [rbp+0x20]
    5adb:	call   3460 <free@plt>
    5ae0:	mov    rdi,QWORD PTR [rbp+0x0]
    5ae4:	call   3460 <free@plt>
    5ae9:	mov    rdi,QWORD PTR [rbp+0x8]
    5aed:	call   3460 <free@plt>
    5af2:	mov    rdi,QWORD PTR [rbp+0x10]
    5af6:	call   3460 <free@plt>
    5afb:	mov    rdi,QWORD PTR [rbp+0x18]
    5aff:	call   3460 <free@plt>
    5b04:	mov    rdi,rbp
    5b07:	pop    rbp
    5b08:	jmp    3460 <free@plt>
    5b0d:	nop    DWORD PTR [rax]

0000000000005b10 <P7ViterbiSize>:
    5b10:	endbr64 
    5b14:	add    edi,0x1
    5b17:	pxor   xmm2,xmm2
    5b1b:	pxor   xmm1,xmm1
    5b1f:	add    esi,0x2
    5b22:	cvtsi2ss xmm2,edi
    5b26:	movsd  xmm0,QWORD PTR [rip+0x3782a]        # 3d358 <_IO_stdin_used+0x358>
    5b2e:	cvtsi2ss xmm1,esi
    5b32:	cvtss2sd xmm2,xmm2
    5b36:	mulsd  xmm0,xmm2
    5b3a:	movapd xmm3,xmm2
    5b3e:	cvtss2sd xmm1,xmm1
    5b42:	mulsd  xmm2,QWORD PTR [rip+0x3782e]        # 3d378 <_IO_stdin_used+0x378>
    5b4a:	mulsd  xmm1,xmm0
    5b4e:	movsd  xmm0,QWORD PTR [rip+0x3780a]        # 3d360 <_IO_stdin_used+0x360>
    5b56:	mulsd  xmm3,xmm0
    5b5a:	mulsd  xmm3,QWORD PTR [rip+0x3780e]        # 3d370 <_IO_stdin_used+0x370>
    5b62:	mulsd  xmm2,xmm0
    5b66:	mulsd  xmm1,xmm0
    5b6a:	pxor   xmm0,xmm0
    5b6e:	addsd  xmm1,QWORD PTR [rip+0x377f2]        # 3d368 <_IO_stdin_used+0x368>
    5b76:	cvtsd2ss xmm1,xmm1
    5b7a:	cvtss2sd xmm1,xmm1
    5b7e:	addsd  xmm1,xmm3
    5b82:	cvtsd2ss xmm1,xmm1
    5b86:	cvtss2sd xmm0,xmm1
    5b8a:	addsd  xmm0,xmm2
    5b8e:	cvtsd2ss xmm0,xmm0
    5b92:	mulss  xmm0,DWORD PTR [rip+0x377fe]        # 3d398 <_IO_stdin_used+0x398>
    5b9a:	cvttss2si eax,xmm0
    5b9e:	ret    
    5b9f:	nop

0000000000005ba0 <P7SmallViterbiSize>:
    5ba0:	endbr64 
    5ba4:	lea    eax,[rsi+rsi*2+0x6]
    5ba8:	lea    edx,[rdi+rdi*1+0x2]
    5bac:	movabs rcx,0x431bde82d7b634db
    5bb6:	shl    eax,0x2
    5bb9:	movsxd rdx,edx
    5bbc:	cdqe   
    5bbe:	lea    rdx,[rdx+rax*1+0x5c]
    5bc3:	shl    rdx,0x2
    5bc7:	mov    rax,rdx
    5bca:	mul    rcx
    5bcd:	mov    rax,rdx
    5bd0:	shr    rax,0x12
    5bd4:	ret    
    5bd5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000005be0 <P7WeeViterbiSize>:
    5be0:	endbr64 
    5be4:	add    edi,0x2
    5be7:	lea    eax,[rsi+rsi*2+0x6]
    5beb:	movsxd rcx,edi
    5bee:	add    edi,edi
    5bf0:	shl    eax,0x2
    5bf3:	movsxd rdi,edi
    5bf6:	cdqe   
    5bf8:	lea    rdx,[rcx+rdi*1+0x5c]
    5bfd:	add    rax,rdx
    5c00:	lea    rdx,[rcx+rax*4]
    5c04:	movabs rcx,0x431bde82d7b634db
    5c0e:	mov    rax,rdx
    5c11:	mul    rcx
    5c14:	mov    rax,rdx
    5c17:	shr    rax,0x12
    5c1b:	ret    
    5c1c:	nop    DWORD PTR [rax+0x0]

0000000000005c20 <P7Forward>:
    5c20:	endbr64 
    5c24:	push   r15
    5c26:	mov    r15,rdx
    5c29:	push   r14
    5c2b:	mov    r14,rdi
    5c2e:	mov    edi,esi
    5c30:	push   r13
    5c32:	push   r12
    5c34:	push   rbp
    5c35:	push   rbx
    5c36:	sub    rsp,0x48
    5c3a:	mov    DWORD PTR [rsp+0x24],esi
    5c3e:	mov    esi,DWORD PTR [rdx+0x88]
    5c44:	xor    edx,edx
    5c46:	mov    QWORD PTR [rsp+0x38],rcx
    5c4b:	xor    ecx,ecx
    5c4d:	call   5350 <CreatePlan7Matrix>
    5c52:	mov    rcx,QWORD PTR [rax]
    5c55:	mov    rbx,QWORD PTR [rax+0x8]
    5c59:	mov    QWORD PTR [rsp+0x30],rax
    5c5e:	mov    rbp,QWORD PTR [rax+0x10]
    5c62:	mov    r13,QWORD PTR [rax+0x18]
    5c66:	mov    rdi,QWORD PTR [rcx]
    5c69:	mov    QWORD PTR [rsp+0x28],rcx
    5c6e:	mov    DWORD PTR [rdi+0x10],0x0
    5c75:	mov    eax,DWORD PTR [r15+0x150]
    5c7c:	mov    DWORD PTR [rdi+0xc],0xc521974f
    5c83:	mov    DWORD PTR [rdi],eax
    5c85:	movabs rax,0xc521974fc521974f
    5c8f:	mov    QWORD PTR [rdi+0x4],rax
    5c93:	mov    ecx,DWORD PTR [r15+0x88]
    5c9a:	test   ecx,ecx
    5c9c:	js     5cd2 <P7Forward+0xb2>
    5c9e:	mov    rsi,QWORD PTR [r13+0x0]
    5ca2:	mov    rcx,QWORD PTR [rbp+0x0]
    5ca6:	xor    eax,eax
    5ca8:	mov    rdx,QWORD PTR [rbx]
    5cab:	nop    DWORD PTR [rax+rax*1+0x0]
    5cb0:	mov    DWORD PTR [rsi+rax*4],0xc521974f
    5cb7:	mov    DWORD PTR [rcx+rax*4],0xc521974f
    5cbe:	mov    DWORD PTR [rdx+rax*4],0xc521974f
    5cc5:	add    rax,0x1
    5cc9:	cmp    DWORD PTR [r15+0x88],eax
    5cd0:	jge    5cb0 <P7Forward+0x90>
    5cd2:	mov    eax,DWORD PTR [rsp+0x24]
    5cd6:	test   eax,eax
    5cd8:	jle    60b0 <P7Forward+0x490>
    5cde:	mov    rcx,QWORD PTR [rsp+0x28]
    5ce3:	sub    eax,0x1
    5ce6:	mov    QWORD PTR [rsp],r14
    5cea:	add    rbx,0x8
    5cee:	add    rax,r14
    5cf1:	mov    QWORD PTR [rsp+0x10],rcx
    5cf6:	mov    QWORD PTR [rsp+0x18],rax
    5cfb:	nop    DWORD PTR [rax+rax*1+0x0]
    5d00:	mov    rax,QWORD PTR [r13+0x8]
    5d04:	mov    DWORD PTR [rax],0xc521974f
    5d0a:	mov    rax,QWORD PTR [rbp+0x8]
    5d0e:	mov    DWORD PTR [rax],0xc521974f
    5d14:	mov    rax,QWORD PTR [rbx]
    5d17:	mov    DWORD PTR [rax],0xc521974f
    5d1d:	movsxd rax,DWORD PTR [r15+0x88]
    5d24:	cmp    eax,0x1
    5d27:	jle    5eb4 <P7Forward+0x294>
    5d2d:	mov    rax,r13
    5d30:	xor    ecx,ecx
    5d32:	mov    r13,rbp
    5d35:	mov    r14,rcx
    5d38:	mov    rbp,rax
    5d3b:	jmp    5d48 <P7Forward+0x128>
    5d3d:	nop    DWORD PTR [rax]
    5d40:	mov    rax,QWORD PTR [rsp+0x10]
    5d45:	mov    rdi,QWORD PTR [rax]
    5d48:	mov    rax,QWORD PTR [r15+0x138]
    5d4f:	add    r14,0x1
    5d53:	mov    rsi,QWORD PTR [rbp+0x0]
    5d57:	lea    r12,[r14*4+0x0]
    5d5f:	mov    edi,DWORD PTR [rdi]
    5d61:	mov    rax,QWORD PTR [rax+0x28]
    5d65:	mov    esi,DWORD PTR [rsi+r12*1-0x4]
    5d6a:	add    esi,DWORD PTR [rax+r12*1-0x4]
    5d6f:	mov    rax,QWORD PTR [r15+0x170]
    5d76:	add    edi,DWORD PTR [rax+r14*4]
    5d7a:	call   179b0 <ILogsum>
    5d7f:	mov    rdi,QWORD PTR [r13+0x0]
    5d83:	mov    r9,QWORD PTR [rbx-0x8]
    5d87:	mov    DWORD PTR [rsp+0x20],eax
    5d8b:	mov    rax,QWORD PTR [r15+0x138]
    5d92:	mov    rsi,QWORD PTR [rax+0x18]
    5d96:	mov    rax,QWORD PTR [rax]
    5d99:	mov    esi,DWORD PTR [rsi+r12*1-0x4]
    5d9e:	add    esi,DWORD PTR [rdi+r12*1-0x4]
    5da3:	mov    edi,DWORD PTR [rax+r12*1-0x4]
    5da8:	add    edi,DWORD PTR [r9+r12*1-0x4]
    5dad:	call   179b0 <ILogsum>
    5db2:	mov    r8d,DWORD PTR [rsp+0x20]
    5db7:	mov    r9,QWORD PTR [rbx]
    5dba:	mov    edi,eax
    5dbc:	add    r9,r12
    5dbf:	mov    esi,r8d
    5dc2:	mov    QWORD PTR [rsp+0x8],r9
    5dc7:	call   179b0 <ILogsum>
    5dcc:	mov    r9,QWORD PTR [rsp+0x8]
    5dd1:	mov    rdx,QWORD PTR [rsp]
    5dd5:	mov    rsi,QWORD PTR [r15+0x140]
    5ddc:	mov    DWORD PTR [r9],eax
    5ddf:	movsx  rdi,BYTE PTR [rdx+0x1]
    5de4:	mov    rax,QWORD PTR [rbx]
    5de7:	mov    rsi,QWORD PTR [rsi+rdi*8]
    5deb:	mov    rdi,QWORD PTR [r15+0x138]
    5df2:	mov    esi,DWORD PTR [rsi+r14*4]
    5df6:	mov    r9,QWORD PTR [rdi+0x30]
    5dfa:	add    DWORD PTR [rax+r12*1],esi
    5dfe:	mov    rsi,QWORD PTR [rbp+0x8]
    5e02:	lea    r8,[rsi+r12*1]
    5e06:	mov    esi,DWORD PTR [rsi+r12*1-0x4]
    5e0b:	add    esi,DWORD PTR [r9+r12*1-0x4]
    5e10:	mov    r9,QWORD PTR [rdi+0x10]
    5e14:	mov    edi,DWORD PTR [rax+r12*1-0x4]
    5e19:	mov    QWORD PTR [rsp+0x8],r8
    5e1e:	add    edi,DWORD PTR [r9+r12*1-0x4]
    5e23:	call   179b0 <ILogsum>
    5e28:	mov    r8,QWORD PTR [rsp+0x8]
    5e2d:	mov    rdi,QWORD PTR [r13+0x0]
    5e31:	mov    r9,QWORD PTR [rbx-0x8]
    5e35:	mov    DWORD PTR [r8],eax
    5e38:	mov    rax,QWORD PTR [r15+0x138]
    5e3f:	mov    r8,QWORD PTR [r13+0x8]
    5e43:	mov    rsi,QWORD PTR [rax+0x20]
    5e47:	mov    rax,QWORD PTR [rax+0x8]
    5e4b:	add    r8,r12
    5e4e:	mov    esi,DWORD PTR [rsi+r14*4]
    5e52:	add    esi,DWORD PTR [rdi+r14*4]
    5e56:	mov    QWORD PTR [rsp+0x8],r8
    5e5b:	mov    edi,DWORD PTR [rax+r14*4]
    5e5f:	add    edi,DWORD PTR [r9+r14*4]
    5e63:	call   179b0 <ILogsum>
    5e68:	mov    r8,QWORD PTR [rsp+0x8]
    5e6d:	mov    rdx,QWORD PTR [rsp]
    5e71:	add    r12,QWORD PTR [r13+0x8]
    5e75:	mov    DWORD PTR [r8],eax
    5e78:	mov    rax,QWORD PTR [r15+0x148]
    5e7f:	movsx  rsi,BYTE PTR [rdx+0x1]
    5e84:	mov    rax,QWORD PTR [rax+rsi*8]
    5e88:	lea    esi,[r14+0x1]
    5e8c:	mov    eax,DWORD PTR [rax+r14*4]
    5e90:	add    DWORD PTR [r12],eax
    5e94:	movsxd rax,DWORD PTR [r15+0x88]
    5e9b:	cmp    eax,esi
    5e9d:	jg     5d40 <P7Forward+0x120>
    5ea3:	mov    rcx,rbp
    5ea6:	mov    rbp,r13
    5ea9:	mov    r13,rcx
    5eac:	mov    rcx,QWORD PTR [rsp+0x10]
    5eb1:	mov    rdi,QWORD PTR [rcx]
    5eb4:	mov    rdx,QWORD PTR [r15+0x138]
    5ebb:	mov    rcx,QWORD PTR [r13+0x0]
    5ebf:	shl    rax,0x2
    5ec3:	mov    edi,DWORD PTR [rdi]
    5ec5:	mov    rdx,QWORD PTR [rdx+0x28]
    5ec9:	mov    esi,DWORD PTR [rcx+rax*1-0x4]
    5ecd:	add    esi,DWORD PTR [rdx+rax*1-0x4]
    5ed1:	mov    rdx,QWORD PTR [r15+0x170]
    5ed8:	add    edi,DWORD PTR [rdx+rax*1-0x4]
    5edc:	call   179b0 <ILogsum>
    5ee1:	mov    rdx,QWORD PTR [r15+0x138]
    5ee8:	mov    rcx,QWORD PTR [rbp+0x0]
    5eec:	mov    DWORD PTR [rsp+0x20],eax
    5ef0:	movsxd rax,DWORD PTR [r15+0x88]
    5ef7:	mov    rsi,QWORD PTR [rdx+0x18]
    5efb:	mov    rdx,QWORD PTR [rdx]
    5efe:	shl    rax,0x2
    5f02:	mov    esi,DWORD PTR [rsi+rax*1-0x4]
    5f06:	add    esi,DWORD PTR [rcx+rax*1-0x4]
    5f0a:	mov    rcx,QWORD PTR [rbx-0x8]
    5f0e:	mov    edi,DWORD PTR [rdx+rax*1-0x4]
    5f12:	add    edi,DWORD PTR [rcx+rax*1-0x4]
    5f16:	call   179b0 <ILogsum>
    5f1b:	mov    r9d,DWORD PTR [rsp+0x20]
    5f20:	movsxd rdx,DWORD PTR [r15+0x88]
    5f27:	mov    edi,eax
    5f29:	mov    rax,QWORD PTR [rbx]
    5f2c:	mov    esi,r9d
    5f2f:	lea    rdx,[rax+rdx*4]
    5f33:	mov    QWORD PTR [rsp+0x8],rdx
    5f38:	call   179b0 <ILogsum>
    5f3d:	mov    rdx,QWORD PTR [rsp+0x8]
    5f42:	mov    rcx,QWORD PTR [rsp]
    5f46:	mov    r14,QWORD PTR [rsp+0x10]
    5f4b:	mov    DWORD PTR [rdx],eax
    5f4d:	movsx  rsi,BYTE PTR [rcx+0x1]
    5f52:	mov    rcx,QWORD PTR [r15+0x140]
    5f59:	movsxd rdx,DWORD PTR [r15+0x88]
    5f60:	mov    rax,QWORD PTR [rbx]
    5f63:	mov    r9,QWORD PTR [r14]
    5f66:	mov    rcx,QWORD PTR [rcx+rsi*8]
    5f6a:	mov    ecx,DWORD PTR [rcx+rdx*4]
    5f6d:	add    DWORD PTR [rax+rdx*4],ecx
    5f70:	mov    rcx,QWORD PTR [r14+0x8]
    5f74:	mov    edx,DWORD PTR [r15+0x154]
    5f7b:	add    edx,DWORD PTR [r9+0x10]
    5f7f:	mov    DWORD PTR [rcx+0x10],edx
    5f82:	mov    DWORD PTR [rcx+0x4],0xc521974f
    5f89:	mov    edx,DWORD PTR [r15+0x88]
    5f90:	test   edx,edx
    5f92:	jle    60f0 <P7Forward+0x4d0>
    5f98:	xor    edx,edx
    5f9a:	mov    QWORD PTR [rsp+0x8],rbp
    5f9f:	mov    edi,0xc521974f
    5fa4:	mov    rbp,r15
    5fa7:	mov    r12,rdx
    5faa:	mov    r15,rcx
    5fad:	jmp    5fbb <P7Forward+0x39b>
    5faf:	nop
    5fb0:	mov    r15,QWORD PTR [r14+0x8]
    5fb4:	mov    rax,QWORD PTR [rbx]
    5fb7:	mov    edi,DWORD PTR [r15+0x4]
    5fbb:	mov    rcx,QWORD PTR [rbp+0x178]
    5fc2:	add    r12,0x1
    5fc6:	mov    esi,DWORD PTR [rax+r12*4]
    5fca:	add    esi,DWORD PTR [rcx+r12*4]
    5fce:	call   179b0 <ILogsum>
    5fd3:	mov    DWORD PTR [r15+0x4],eax
    5fd7:	lea    eax,[r12+0x1]
    5fdc:	cmp    DWORD PTR [rbp+0x88],eax
    5fe2:	jge    5fb0 <P7Forward+0x390>
    5fe4:	mov    rax,QWORD PTR [rsp+0x10]
    5fe9:	mov    r15,rbp
    5fec:	mov    rbp,QWORD PTR [rsp+0x8]
    5ff1:	mov    rcx,QWORD PTR [rax+0x8]
    5ff5:	mov    r9,QWORD PTR [rax]
    5ff8:	mov    esi,DWORD PTR [rcx+0x4]
    5ffb:	mov    edi,DWORD PTR [r15+0x16c]
    6002:	add    edi,DWORD PTR [r9+0xc]
    6006:	add    r13,0x8
    600a:	add    rbp,0x8
    600e:	add    esi,DWORD PTR [r15+0x15c]
    6015:	mov    QWORD PTR [rsp+0x8],rcx
    601a:	add    rbx,0x8
    601e:	call   179b0 <ILogsum>
    6023:	mov    r14,QWORD PTR [rsp+0x10]
    6028:	mov    rcx,QWORD PTR [rsp+0x8]
    602d:	mov    rdx,QWORD PTR [r14+0x8]
    6031:	mov    DWORD PTR [rcx+0xc],eax
    6034:	add    r14,0x8
    6038:	mov    esi,DWORD PTR [r15+0x168]
    603f:	mov    edi,DWORD PTR [r15+0x150]
    6046:	add    esi,DWORD PTR [rdx+0xc]
    6049:	add    edi,DWORD PTR [rdx+0x10]
    604c:	mov    QWORD PTR [rsp+0x8],rdx
    6051:	call   179b0 <ILogsum>
    6056:	mov    rdx,QWORD PTR [rsp+0x8]
    605b:	mov    DWORD PTR [rdx],eax
    605d:	mov    rdx,QWORD PTR [r14]
    6060:	mov    rax,QWORD PTR [r14-0x8]
    6064:	mov    esi,DWORD PTR [r15+0x158]
    606b:	mov    edi,DWORD PTR [r15+0x164]
    6072:	add    esi,DWORD PTR [rdx+0x4]
    6075:	mov    QWORD PTR [rsp+0x8],rdx
    607a:	add    edi,DWORD PTR [rax+0x8]
    607d:	call   179b0 <ILogsum>
    6082:	mov    rdx,QWORD PTR [rsp+0x8]
    6087:	mov    QWORD PTR [rsp+0x10],r14
    608c:	mov    DWORD PTR [rdx+0x8],eax
    608f:	mov    rax,QWORD PTR [rsp]
    6093:	cmp    QWORD PTR [rsp+0x18],rax
    6098:	je     60b0 <P7Forward+0x490>
    609a:	add    rax,0x1
    609e:	mov    rdi,QWORD PTR [r14]
    60a1:	mov    QWORD PTR [rsp],rax
    60a5:	jmp    5d00 <P7Forward+0xe0>
    60aa:	nop    WORD PTR [rax+rax*1+0x0]
    60b0:	movsxd rax,DWORD PTR [rsp+0x24]
    60b5:	mov    rcx,QWORD PTR [rsp+0x28]
    60ba:	mov    ebp,DWORD PTR [r15+0x160]
    60c1:	mov    rax,QWORD PTR [rcx+rax*8]
    60c5:	add    ebp,DWORD PTR [rax+0x8]
    60c8:	mov    rax,QWORD PTR [rsp+0x38]
    60cd:	test   rax,rax
    60d0:	je     60fa <P7Forward+0x4da>
    60d2:	mov    rcx,QWORD PTR [rsp+0x30]
    60d7:	mov    QWORD PTR [rax],rcx
    60da:	add    rsp,0x48
    60de:	mov    edi,ebp
    60e0:	pop    rbx
    60e1:	pop    rbp
    60e2:	pop    r12
    60e4:	pop    r13
    60e6:	pop    r14
    60e8:	pop    r15
    60ea:	jmp    17820 <Scorify>
    60ef:	nop
    60f0:	mov    esi,0xc521974f
    60f5:	jmp    5ffb <P7Forward+0x3db>
    60fa:	mov    rdi,QWORD PTR [rsp+0x30]
    60ff:	call   5810 <FreePlan7Matrix>
    6104:	jmp    60da <P7Forward+0x4ba>
    6106:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006110 <P7ViterbiTrace>:
    6110:	endbr64 
    6114:	push   r15
    6116:	mov    r15,rdi
    6119:	push   r14
    611b:	push   r13
    611d:	mov    r13d,edx
    6120:	push   r12
    6122:	lea    r12d,[rdx+rdx*1+0x6]
    6127:	push   rbp
    6128:	mov    edi,r12d
    612b:	mov    rbp,rcx
    612e:	push   rbx
    612f:	sub    rsp,0x68
    6133:	mov    QWORD PTR [rsp+0x28],rsi
    6138:	lea    rsi,[rsp+0x50]
    613d:	mov    DWORD PTR [rsp+0x24],edx
    6141:	mov    QWORD PTR [rsp+0x40],r8
    6146:	mov    rax,QWORD PTR fs:0x28
    614f:	mov    QWORD PTR [rsp+0x58],rax
    6154:	xor    eax,eax
    6156:	call   209f0 <P7AllocTrace>
    615b:	mov    rax,QWORD PTR [rbp+0x0]
    615f:	mov    QWORD PTR [rsp+0x8],rax
    6164:	mov    rax,QWORD PTR [rbp+0x8]
    6168:	mov    QWORD PTR [rsp+0x10],rax
    616d:	mov    rax,QWORD PTR [rbp+0x10]
    6171:	mov    QWORD PTR [rsp+0x18],rax
    6176:	mov    rax,QWORD PTR [rbp+0x18]
    617a:	mov    ebp,0x2
    617f:	mov    QWORD PTR [rsp+0x30],rax
    6184:	mov    rax,QWORD PTR [rsp+0x50]
    6189:	mov    rax,QWORD PTR [rax+0x8]
    618d:	mov    BYTE PTR [rax],0x9
    6190:	mov    rax,QWORD PTR [rsp+0x50]
    6195:	mov    rdx,QWORD PTR [rax+0x10]
    6199:	mov    DWORD PTR [rdx],0x0
    619f:	mov    rdx,QWORD PTR [rax+0x18]
    61a3:	mov    rax,QWORD PTR [rax+0x8]
    61a7:	mov    DWORD PTR [rdx],0x0
    61ad:	mov    BYTE PTR [rax+0x1],0x8
    61b1:	mov    rdi,QWORD PTR [rsp+0x50]
    61b6:	mov    rax,QWORD PTR [rdi+0x10]
    61ba:	mov    rdx,QWORD PTR [rdi+0x8]
    61be:	mov    DWORD PTR [rax+0x4],0x0
    61c5:	mov    rax,QWORD PTR [rdi+0x18]
    61c9:	mov    DWORD PTR [rax+0x4],0x0
    61d0:	movzx  ecx,BYTE PTR [rdx+0x1]
    61d4:	cmp    cl,0x4
    61d7:	je     6230 <P7ViterbiTrace+0x120>
    61d9:	mov    eax,0x2
    61de:	lea    r14,[rip+0x370cb]        # 3d2b0 <_IO_stdin_used+0x2b0>
    61e5:	nop    DWORD PTR [rax]
    61e8:	cmp    cl,0xa
    61eb:	ja     6200 <P7ViterbiTrace+0xf0>
    61ed:	movsxd rcx,DWORD PTR [r14+rcx*4]
    61f1:	add    rcx,r14
    61f4:	notrack jmp rcx
    61f7:	je     6213 <P7ViterbiTrace+0x103>
    61f9:	nop    DWORD PTR [rax+0x0]
    6200:	lea    rdi,[rip+0x36fcb]        # 3d1d2 <_IO_stdin_used+0x1d2>
    6207:	xor    eax,eax
    6209:	call   317f0 <Die>
    620e:	mov    rdi,QWORD PTR [rsp+0x50]
    6213:	add    ebp,0x1
    6216:	cmp    r12d,ebp
    6219:	je     62ee <P7ViterbiTrace+0x1de>
    621f:	mov    rdx,QWORD PTR [rdi+0x8]
    6223:	movsxd rax,ebp
    6226:	movzx  ecx,BYTE PTR [rdx+rax*1-0x1]
    622b:	cmp    cl,0x4
    622e:	jne    61e8 <P7ViterbiTrace+0xd8>
    6230:	mov    DWORD PTR [rdi],ebp
    6232:	call   20bf0 <P7ReverseTrace>
    6237:	mov    rax,QWORD PTR [rsp+0x50]
    623c:	mov    rbx,QWORD PTR [rsp+0x40]
    6241:	mov    QWORD PTR [rbx],rax
    6244:	mov    rax,QWORD PTR [rsp+0x58]
    6249:	xor    rax,QWORD PTR fs:0x28
    6252:	jne    6986 <P7ViterbiTrace+0x876>
    6258:	add    rsp,0x68
    625c:	pop    rbx
    625d:	pop    rbp
    625e:	pop    r12
    6260:	pop    r13
    6262:	pop    r14
    6264:	pop    r15
    6266:	ret    
    6267:	nop    WORD PTR [rax+rax*1+0x0]
    6270:	mov    rsi,QWORD PTR [rsp+0x8]
    6275:	movsxd rcx,r13d
    6278:	lea    r8,[rcx*8+0x0]
    6280:	mov    rsi,QWORD PTR [rsi+rcx*8]
    6284:	mov    ecx,DWORD PTR [rsi+0xc]
    6287:	cmp    ecx,0xc5219750
    628d:	jl     6818 <P7ViterbiTrace+0x708>
    6293:	mov    rdi,QWORD PTR [rsp+0x8]
    6298:	mov    rdi,QWORD PTR [rdi+r8*1-0x8]
    629d:	mov    r8d,DWORD PTR [r15+0x16c]
    62a4:	add    r8d,DWORD PTR [rdi+0xc]
    62a8:	cmp    ecx,r8d
    62ab:	je     67a0 <P7ViterbiTrace+0x690>
    62b1:	mov    edi,DWORD PTR [r15+0x15c]
    62b8:	add    edi,DWORD PTR [rsi+0x4]
    62bb:	cmp    ecx,edi
    62bd:	jne    6693 <P7ViterbiTrace+0x583>
    62c3:	mov    BYTE PTR [rdx+rax*1],0x7
    62c7:	mov    rdi,QWORD PTR [rsp+0x50]
    62cc:	add    ebp,0x1
    62cf:	mov    rdx,QWORD PTR [rdi+0x10]
    62d3:	mov    DWORD PTR [rdx+rax*4],0x0
    62da:	mov    rdx,QWORD PTR [rdi+0x18]
    62de:	mov    DWORD PTR [rdx+rax*4],0x0
    62e5:	cmp    r12d,ebp
    62e8:	jne    621f <P7ViterbiTrace+0x10f>
    62ee:	add    r12d,DWORD PTR [rsp+0x24]
    62f3:	mov    esi,r12d
    62f6:	call   20a70 <P7ReallocTrace>
    62fb:	mov    rdi,QWORD PTR [rsp+0x50]
    6300:	jmp    621f <P7ViterbiTrace+0x10f>
    6305:	nop    DWORD PTR [rax]
    6308:	test   r13d,r13d
    630b:	jne    6728 <P7ViterbiTrace+0x618>
    6311:	mov    rsi,QWORD PTR [rsp+0x8]
    6316:	mov    rcx,QWORD PTR [rsi]
    6319:	mov    ecx,DWORD PTR [rcx+0x10]
    631c:	test   ecx,ecx
    631e:	jne    6200 <P7ViterbiTrace+0xf0>
    6324:	mov    BYTE PTR [rdx+rax*1],0x4
    6328:	jmp    62c7 <P7ViterbiTrace+0x1b7>
    632a:	nop    WORD PTR [rax+rax*1+0x0]
    6330:	movsxd r9,r13d
    6333:	mov    r11,QWORD PTR [rsp+0x18]
    6338:	movsxd rcx,ebx
    633b:	lea    r8,[r9+0x1]
    633f:	lea    rsi,[r8*8+0x0]
    6347:	mov    r8,QWORD PTR [r11+r8*8]
    634b:	mov    r11,QWORD PTR [rsp+0x28]
    6350:	movsx  r10,BYTE PTR [r11+r9*1+0x1]
    6356:	mov    r9,QWORD PTR [r15+0x148]
    635d:	mov    r8d,DWORD PTR [r8+rcx*4]
    6361:	mov    r9,QWORD PTR [r9+r10*8]
    6365:	sub    r8d,DWORD PTR [r9+rcx*4]
    6369:	cmp    r8d,0xc5219750
    6370:	jl     6818 <P7ViterbiTrace+0x708>
    6376:	mov    rdi,QWORD PTR [rsp+0x10]
    637b:	mov    r9,QWORD PTR [r15+0x138]
    6382:	mov    r10,QWORD PTR [rdi+rsi*1-0x8]
    6387:	mov    rdi,QWORD PTR [r9+0x8]
    638b:	mov    edi,DWORD PTR [rdi+rcx*4]
    638e:	add    edi,DWORD PTR [r10+rcx*4]
    6392:	cmp    edi,r8d
    6395:	je     6700 <P7ViterbiTrace+0x5f0>
    639b:	mov    rdi,QWORD PTR [rsp+0x18]
    63a0:	mov    rsi,QWORD PTR [rdi+rsi*1-0x8]
    63a5:	mov    rdi,QWORD PTR [r9+0x20]
    63a9:	mov    edi,DWORD PTR [rdi+rcx*4]
    63ac:	add    edi,DWORD PTR [rsi+rcx*4]
    63af:	cmp    edi,r8d
    63b2:	jne    6200 <P7ViterbiTrace+0xf0>
    63b8:	mov    BYTE PTR [rdx+rax*1],0x3
    63bc:	mov    rdi,QWORD PTR [rsp+0x50]
    63c1:	mov    rdx,QWORD PTR [rdi+0x10]
    63c5:	mov    DWORD PTR [rdx+rax*4],ebx
    63c8:	mov    rdx,QWORD PTR [rdi+0x18]
    63cc:	mov    DWORD PTR [rdx+rax*4],r13d
    63d0:	sub    r13d,0x1
    63d4:	jmp    6213 <P7ViterbiTrace+0x103>
    63d9:	nop    DWORD PTR [rax+0x0]
    63e0:	mov    rbx,QWORD PTR [rsp+0x8]
    63e5:	movsxd rax,r13d
    63e8:	mov    rdx,QWORD PTR [rbx+rax*8]
    63ec:	mov    esi,DWORD PTR [rdx+0x4]
    63ef:	cmp    esi,0xc5219750
    63f5:	jl     6818 <P7ViterbiTrace+0x708>
    63fb:	mov    ebx,DWORD PTR [r15+0x88]
    6402:	test   ebx,ebx
    6404:	jle    61f7 <P7ViterbiTrace+0xe7>
    640a:	mov    rdx,QWORD PTR [rsp+0x10]
    640f:	mov    r8,QWORD PTR [r15+0x178]
    6416:	mov    r9,QWORD PTR [rdx+rax*8]
    641a:	movsxd rdx,ebx
    641d:	shl    rdx,0x2
    6421:	jmp    6434 <P7ViterbiTrace+0x324>
    6423:	nop    DWORD PTR [rax+rax*1+0x0]
    6428:	sub    rdx,0x4
    642c:	test   ebx,ebx
    642e:	je     6213 <P7ViterbiTrace+0x103>
    6434:	mov    eax,DWORD PTR [r8+rdx*1]
    6438:	add    eax,DWORD PTR [r9+rdx*1]
    643c:	mov    ecx,ebx
    643e:	sub    ebx,0x1
    6441:	cmp    esi,eax
    6443:	jne    6428 <P7ViterbiTrace+0x318>
    6445:	mov    rax,QWORD PTR [r15+0xd8]
    644c:	movss  xmm1,DWORD PTR [rip+0x36f48]        # 3d39c <_IO_stdin_used+0x39c>
    6454:	mov    DWORD PTR [rsp+0x48],ecx
    6458:	mov    QWORD PTR [rsp+0x38],rdx
    645d:	movss  xmm0,DWORD PTR [rax+rdx*1]
    6462:	call   17710 <Prob2Score>
    6467:	pxor   xmm0,xmm0
    646b:	mov    rdx,QWORD PTR [rsp+0x38]
    6470:	pxor   xmm1,xmm1
    6474:	cvtsi2sd xmm0,eax
    6478:	mov    rax,QWORD PTR [r15+0x178]
    647f:	addsd  xmm0,QWORD PTR [rip+0x36ef9]        # 3d380 <_IO_stdin_used+0x380>
    6487:	mov    rdi,QWORD PTR [rsp+0x50]
    648c:	mov    ecx,DWORD PTR [rsp+0x48]
    6490:	cvtsi2sd xmm1,DWORD PTR [rax+rdx*1]
    6495:	comisd xmm1,xmm0
    6499:	jae    6830 <P7ViterbiTrace+0x720>
    649f:	mov    rdx,QWORD PTR [rdi+0x8]
    64a3:	movsxd rax,ebp
    64a6:	mov    BYTE PTR [rdx+rax*1],0x1
    64aa:	mov    rdi,QWORD PTR [rsp+0x50]
    64af:	mov    rdx,QWORD PTR [rdi+0x10]
    64b3:	mov    DWORD PTR [rdx+rax*4],ecx
    64b6:	mov    rdx,QWORD PTR [rdi+0x18]
    64ba:	mov    DWORD PTR [rdx+rax*4],r13d
    64be:	sub    r13d,0x1
    64c2:	jmp    6213 <P7ViterbiTrace+0x103>
    64c7:	nop    WORD PTR [rax+rax*1+0x0]
    64d0:	mov    rcx,QWORD PTR [rsp+0x30]
    64d5:	movsxd rsi,r13d
    64d8:	movsxd r8,ebx
    64db:	add    r8,0x1
    64df:	mov    r9,QWORD PTR [rcx+rsi*8]
    64e3:	lea    rcx,[r8*4+0x0]
    64eb:	mov    r8d,DWORD PTR [r9+r8*4]
    64ef:	cmp    r8d,0xc5219750
    64f6:	jl     6818 <P7ViterbiTrace+0x708>
    64fc:	mov    rdi,QWORD PTR [r15+0x138]
    6503:	mov    r11,QWORD PTR [rsp+0x10]
    6508:	mov    r10,QWORD PTR [r11+rsi*8]
    650c:	mov    rsi,QWORD PTR [rdi+0x10]
    6510:	mov    esi,DWORD PTR [rsi+rcx*1-0x4]
    6514:	add    esi,DWORD PTR [r10+rcx*1-0x4]
    6519:	cmp    r8d,esi
    651c:	je     6700 <P7ViterbiTrace+0x5f0>
    6522:	mov    rsi,QWORD PTR [rdi+0x30]
    6526:	mov    edi,DWORD PTR [r9+rcx*1-0x4]
    652b:	add    edi,DWORD PTR [rsi+rcx*1-0x4]
    652f:	cmp    r8d,edi
    6532:	jne    6200 <P7ViterbiTrace+0xf0>
    6538:	mov    BYTE PTR [rdx+rax*1],0x2
    653c:	mov    rdi,QWORD PTR [rsp+0x50]
    6541:	mov    rdx,QWORD PTR [rdi+0x10]
    6545:	mov    DWORD PTR [rdx+rax*4],ebx
    6548:	mov    rdx,QWORD PTR [rdi+0x18]
    654c:	sub    ebx,0x1
    654f:	mov    DWORD PTR [rdx+rax*4],0x0
    6556:	jmp    6213 <P7ViterbiTrace+0x103>
    655b:	nop    DWORD PTR [rax+rax*1+0x0]
    6560:	movsxd r10,r13d
    6563:	mov    r11,QWORD PTR [rsp+0x10]
    6568:	movsxd rcx,ebx
    656b:	lea    r9,[r10+0x1]
    656f:	add    rcx,0x1
    6573:	lea    r8,[r9*8+0x0]
    657b:	mov    r9,QWORD PTR [r11+r9*8]
    657f:	mov    r11,QWORD PTR [rsp+0x28]
    6584:	lea    rsi,[rcx*4+0x0]
    658c:	movsx  r11,BYTE PTR [r11+r10*1+0x1]
    6592:	mov    r10,QWORD PTR [r15+0x140]
    6599:	mov    r9d,DWORD PTR [r9+rcx*4]
    659d:	mov    r10,QWORD PTR [r10+r11*8]
    65a1:	sub    r9d,DWORD PTR [r10+rcx*4]
    65a5:	cmp    r9d,0xc5219750
    65ac:	jl     6818 <P7ViterbiTrace+0x708>
    65b2:	mov    rdi,QWORD PTR [rsp+0x8]
    65b7:	mov    r10,QWORD PTR [rdi+r8*1-0x8]
    65bc:	mov    rdi,QWORD PTR [r15+0x170]
    65c3:	mov    edi,DWORD PTR [rdi+rcx*4]
    65c6:	add    edi,DWORD PTR [r10]
    65c9:	cmp    edi,r9d
    65cc:	je     67b0 <P7ViterbiTrace+0x6a0>
    65d2:	mov    rcx,QWORD PTR [rsp+0x10]
    65d7:	mov    rdi,QWORD PTR [r15+0x138]
    65de:	mov    r10,QWORD PTR [rcx+r8*1-0x8]
    65e3:	mov    rcx,QWORD PTR [rdi]
    65e6:	mov    ecx,DWORD PTR [rcx+rsi*1-0x4]
    65ea:	add    ecx,DWORD PTR [r10+rsi*1-0x4]
    65ef:	cmp    ecx,r9d
    65f2:	je     6700 <P7ViterbiTrace+0x5f0>
    65f8:	mov    rcx,QWORD PTR [rsp+0x18]
    65fd:	mov    r10,QWORD PTR [rcx+r8*1-0x8]
    6602:	mov    rcx,QWORD PTR [rdi+0x18]
    6606:	mov    ecx,DWORD PTR [rcx+rsi*1-0x4]
    660a:	add    ecx,DWORD PTR [r10+rsi*1-0x4]
    660f:	cmp    ecx,r9d
    6612:	je     63b8 <P7ViterbiTrace+0x2a8>
    6618:	mov    rcx,QWORD PTR [rsp+0x30]
    661d:	mov    rdi,QWORD PTR [rdi+0x28]
    6621:	mov    rcx,QWORD PTR [rcx+r8*1-0x8]
    6626:	mov    edi,DWORD PTR [rdi+rsi*1-0x4]
    662a:	add    edi,DWORD PTR [rcx+rsi*1-0x4]
    662e:	cmp    edi,r9d
    6631:	je     6538 <P7ViterbiTrace+0x428>
    6637:	jmp    6200 <P7ViterbiTrace+0xf0>
    663c:	nop    DWORD PTR [rax+0x0]
    6640:	mov    rsi,QWORD PTR [rsp+0x8]
    6645:	movsxd rcx,r13d
    6648:	lea    r8,[rcx*8+0x0]
    6650:	mov    rsi,QWORD PTR [rsi+rcx*8]
    6654:	mov    ecx,DWORD PTR [rsi+0x8]
    6657:	cmp    ecx,0xc5219750
    665d:	jl     6818 <P7ViterbiTrace+0x708>
    6663:	mov    rdi,QWORD PTR [rsp+0x8]
    6668:	mov    rdi,QWORD PTR [rdi+r8*1-0x8]
    666d:	mov    r8d,DWORD PTR [r15+0x164]
    6674:	add    r8d,DWORD PTR [rdi+0x8]
    6678:	cmp    ecx,r8d
    667b:	je     6798 <P7ViterbiTrace+0x688>
    6681:	mov    edi,DWORD PTR [r15+0x158]
    6688:	add    edi,DWORD PTR [rsi+0x4]
    668b:	cmp    ecx,edi
    668d:	je     62c3 <P7ViterbiTrace+0x1b3>
    6693:	lea    rdi,[rip+0x36b49]        # 3d1e3 <_IO_stdin_used+0x1e3>
    669a:	xor    eax,eax
    669c:	call   317f0 <Die>
    66a1:	mov    rdi,QWORD PTR [rsp+0x50]
    66a6:	jmp    6213 <P7ViterbiTrace+0x103>
    66ab:	nop    DWORD PTR [rax+rax*1+0x0]
    66b0:	mov    rsi,QWORD PTR [rsp+0x8]
    66b5:	movsxd rcx,r13d
    66b8:	mov    rsi,QWORD PTR [rsi+rcx*8]
    66bc:	mov    ecx,DWORD PTR [rsi]
    66be:	cmp    ecx,0xc5219750
    66c4:	jl     6818 <P7ViterbiTrace+0x708>
    66ca:	mov    edi,DWORD PTR [r15+0x150]
    66d1:	add    edi,DWORD PTR [rsi+0x10]
    66d4:	cmp    ecx,edi
    66d6:	je     6788 <P7ViterbiTrace+0x678>
    66dc:	mov    edi,DWORD PTR [r15+0x168]
    66e3:	add    edi,DWORD PTR [rsi+0xc]
    66e6:	cmp    ecx,edi
    66e8:	jne    6200 <P7ViterbiTrace+0xf0>
    66ee:	mov    BYTE PTR [rdx+rax*1],0xa
    66f2:	jmp    62c7 <P7ViterbiTrace+0x1b7>
    66f7:	nop    WORD PTR [rax+rax*1+0x0]
    6700:	mov    BYTE PTR [rdx+rax*1],0x1
    6704:	mov    rdi,QWORD PTR [rsp+0x50]
    6709:	mov    rdx,QWORD PTR [rdi+0x10]
    670d:	mov    DWORD PTR [rdx+rax*4],ebx
    6710:	mov    rdx,QWORD PTR [rdi+0x18]
    6714:	sub    ebx,0x1
    6717:	mov    DWORD PTR [rdx+rax*4],r13d
    671b:	sub    r13d,0x1
    671f:	jmp    6213 <P7ViterbiTrace+0x103>
    6724:	nop    DWORD PTR [rax+0x0]
    6728:	jle    6200 <P7ViterbiTrace+0xf0>
    672e:	mov    rdi,QWORD PTR [rsp+0x8]
    6733:	movsxd rsi,r13d
    6736:	add    rsi,0x1
    673a:	mov    rcx,QWORD PTR [rdi+rsi*8]
    673e:	mov    rsi,QWORD PTR [rdi+rsi*8-0x8]
    6743:	mov    edi,DWORD PTR [r15+0x154]
    674a:	add    edi,DWORD PTR [rsi+0x10]
    674d:	cmp    DWORD PTR [rcx+0x10],edi
    6750:	jne    6200 <P7ViterbiTrace+0xf0>
    6756:	mov    BYTE PTR [rdx+rax*1],0x5
    675a:	mov    rdi,QWORD PTR [rsp+0x50]
    675f:	mov    rdx,QWORD PTR [rdi+0x10]
    6763:	mov    DWORD PTR [rdx+rax*4],0x0
    676a:	mov    rdx,QWORD PTR [rdi+0x18]
    676e:	mov    DWORD PTR [rdx+rax*4-0x4],r13d
    6773:	sub    r13d,0x1
    6777:	mov    DWORD PTR [rdx+rax*4],0x0
    677e:	jmp    6213 <P7ViterbiTrace+0x103>
    6783:	nop    DWORD PTR [rax+rax*1+0x0]
    6788:	mov    BYTE PTR [rdx+rax*1],0x5
    678c:	jmp    62c7 <P7ViterbiTrace+0x1b7>
    6791:	nop    DWORD PTR [rax+0x0]
    6798:	mov    BYTE PTR [rdx+rax*1],0x8
    679c:	jmp    675a <P7ViterbiTrace+0x64a>
    679e:	xchg   ax,ax
    67a0:	mov    BYTE PTR [rdx+rax*1],0xa
    67a4:	jmp    675a <P7ViterbiTrace+0x64a>
    67a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    67b0:	mov    rax,QWORD PTR [r15+0xd0]
    67b7:	mov    QWORD PTR [rsp+0x38],rcx
    67bc:	movss  xmm1,DWORD PTR [r15+0x130]
    67c5:	movss  xmm0,DWORD PTR [rax+rcx*4]
    67ca:	call   17710 <Prob2Score>
    67cf:	pxor   xmm0,xmm0
    67d3:	mov    rcx,QWORD PTR [rsp+0x38]
    67d8:	pxor   xmm1,xmm1
    67dc:	cvtsi2sd xmm0,eax
    67e0:	mov    rax,QWORD PTR [r15+0x170]
    67e7:	mov    rdi,QWORD PTR [rsp+0x50]
    67ec:	addsd  xmm0,QWORD PTR [rip+0x36b8c]        # 3d380 <_IO_stdin_used+0x380>
    67f4:	cvtsi2sd xmm1,DWORD PTR [rax+rcx*4]
    67f9:	comisd xmm1,xmm0
    67fd:	jae    68e3 <P7ViterbiTrace+0x7d3>
    6803:	mov    rdx,QWORD PTR [rdi+0x8]
    6807:	movsxd rax,ebp
    680a:	mov    BYTE PTR [rdx+rax*1],0x6
    680e:	jmp    62c7 <P7ViterbiTrace+0x1b7>
    6813:	nop    DWORD PTR [rax+rax*1+0x0]
    6818:	call   20af0 <P7FreeTrace>
    681d:	mov    rax,QWORD PTR [rsp+0x40]
    6822:	mov    QWORD PTR [rax],0x0
    6829:	jmp    6244 <P7ViterbiTrace+0x134>
    682e:	xchg   ax,ax
    6830:	mov    esi,DWORD PTR [r15+0x88]
    6837:	mov    rdi,QWORD PTR [rsp+0x50]
    683c:	cmp    esi,ecx
    683e:	jle    649f <P7ViterbiTrace+0x38f>
    6844:	movsxd rax,ebp
    6847:	lea    r8d,[rsi-0x1]
    684b:	add    ebp,esi
    684d:	mov    DWORD PTR [rsp+0x38],r13d
    6852:	lea    rdx,[rax+0x1]
    6856:	sub    r8d,ecx
    6859:	mov    DWORD PTR [rsp+0x48],ebx
    685d:	mov    r13d,ebp
    6860:	add    r8,rdx
    6863:	mov    ebx,r12d
    6866:	mov    DWORD PTR [rsp+0x4c],ecx
    686a:	mov    r12,rdx
    686d:	mov    rbp,r8
    6870:	jmp    6884 <P7ViterbiTrace+0x774>
    6872:	nop    WORD PTR [rax+rax*1+0x0]
    6878:	mov    rax,r12
    687b:	cmp    r12,rbp
    687e:	je     68c9 <P7ViterbiTrace+0x7b9>
    6880:	add    r12,0x1
    6884:	mov    rdx,QWORD PTR [rdi+0x8]
    6888:	mov    r9d,r13d
    688b:	sub    r9d,eax
    688e:	mov    BYTE PTR [rdx+rax*1],0x2
    6892:	mov    rdi,QWORD PTR [rsp+0x50]
    6897:	mov    rdx,QWORD PTR [rdi+0x10]
    689b:	mov    DWORD PTR [rdx+rax*4],r9d
    689f:	mov    rdx,QWORD PTR [rdi+0x18]
    68a3:	mov    DWORD PTR [rdx+rax*4],0x0
    68aa:	add    eax,0x1
    68ad:	cmp    eax,ebx
    68af:	jne    6878 <P7ViterbiTrace+0x768>
    68b1:	add    ebx,DWORD PTR [rsp+0x24]
    68b5:	mov    esi,ebx
    68b7:	call   20a70 <P7ReallocTrace>
    68bc:	mov    rdi,QWORD PTR [rsp+0x50]
    68c1:	mov    rax,r12
    68c4:	cmp    r12,rbp
    68c7:	jne    6880 <P7ViterbiTrace+0x770>
    68c9:	mov    ecx,DWORD PTR [rsp+0x4c]
    68cd:	mov    ebp,r13d
    68d0:	mov    r12d,ebx
    68d3:	mov    r13d,DWORD PTR [rsp+0x38]
    68d8:	mov    ebx,DWORD PTR [rsp+0x48]
    68dc:	sub    ebp,ecx
    68de:	jmp    649f <P7ViterbiTrace+0x38f>
    68e3:	test   ebx,ebx
    68e5:	jle    6803 <P7ViterbiTrace+0x6f3>
    68eb:	lea    ecx,[rbp+rbx*1+0x0]
    68ef:	movsxd rdx,ebp
    68f2:	mov    DWORD PTR [rsp+0x38],r13d
    68f7:	mov    DWORD PTR [rsp+0x48],ebp
    68fb:	mov    r13d,ecx
    68fe:	mov    ebp,r12d
    6901:	mov    r12d,ebx
    6904:	mov    DWORD PTR [rsp+0x4c],ebx
    6908:	mov    rbx,rdx
    690b:	jmp    6919 <P7ViterbiTrace+0x809>
    690d:	nop    DWORD PTR [rax]
    6910:	add    rbx,0x1
    6914:	test   r12d,r12d
    6917:	je     6962 <P7ViterbiTrace+0x852>
    6919:	mov    rdx,QWORD PTR [rdi+0x8]
    691d:	mov    esi,r12d
    6920:	sub    r12d,0x1
    6924:	mov    BYTE PTR [rdx+rbx*1],0x2
    6928:	mov    rdi,QWORD PTR [rsp+0x50]
    692d:	mov    rdx,QWORD PTR [rdi+0x10]
    6931:	mov    DWORD PTR [rdx+rbx*4],esi
    6934:	mov    rdx,QWORD PTR [rdi+0x18]
    6938:	mov    DWORD PTR [rdx+rbx*4],0x0
    693f:	mov    edx,r13d
    6942:	sub    edx,r12d
    6945:	cmp    edx,ebp
    6947:	jne    6910 <P7ViterbiTrace+0x800>
    6949:	add    ebp,DWORD PTR [rsp+0x24]
    694d:	add    rbx,0x1
    6951:	mov    esi,ebp
    6953:	call   20a70 <P7ReallocTrace>
    6958:	mov    rdi,QWORD PTR [rsp+0x50]
    695d:	test   r12d,r12d
    6960:	jne    6919 <P7ViterbiTrace+0x809>
    6962:	mov    ebx,DWORD PTR [rsp+0x4c]
    6966:	mov    r12d,ebp
    6969:	mov    ebp,DWORD PTR [rsp+0x48]
    696d:	mov    rdx,QWORD PTR [rdi+0x8]
    6971:	mov    r13d,DWORD PTR [rsp+0x38]
    6976:	add    ebp,ebx
    6978:	xor    ebx,ebx
    697a:	movsxd rax,ebp
    697d:	mov    BYTE PTR [rdx+rax*1],0x6
    6981:	jmp    62c7 <P7ViterbiTrace+0x1b7>
    6986:	call   3570 <__stack_chk_fail@plt>
    698b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000006990 <P7ParsingViterbi>:
    6990:	endbr64 
    6994:	push   r15
    6996:	mov    r15d,esi
    6999:	push   r14
    699b:	push   r13
    699d:	push   r12
    699f:	lea    r12d,[r15+0x1]
    69a3:	push   rbp
    69a4:	mov    rbp,rdx
    69a7:	movsxd r12,r12d
    69aa:	push   rbx
    69ab:	mov    rbx,rdi
    69ae:	mov    edi,0x1
    69b3:	shl    r12,0x2
    69b7:	sub    rsp,0x108
    69be:	mov    DWORD PTR [rsp+0xd4],esi
    69c5:	mov    esi,DWORD PTR [rdx+0x88]
    69cb:	xor    edx,edx
    69cd:	mov    QWORD PTR [rsp+0xe8],rcx
    69d5:	xor    ecx,ecx
    69d7:	mov    rax,QWORD PTR fs:0x28
    69e0:	mov    QWORD PTR [rsp+0xf8],rax
    69e8:	xor    eax,eax
    69ea:	call   5350 <CreatePlan7Matrix>
    69ef:	mov    esi,DWORD PTR [rbp+0x88]
    69f5:	xor    ecx,ecx
    69f7:	xor    edx,edx
    69f9:	mov    rdi,QWORD PTR [rax+0x8]
    69fd:	mov    r14,QWORD PTR [rax]
    6a00:	mov    QWORD PTR [rsp+0xe0],rax
    6a08:	mov    QWORD PTR [rsp+0x98],rdi
    6a10:	mov    rdi,QWORD PTR [rax+0x10]
    6a14:	mov    rax,QWORD PTR [rax+0x18]
    6a18:	mov    QWORD PTR [rsp+0xb0],r14
    6a20:	mov    QWORD PTR [rsp+0xa0],rdi
    6a28:	mov    edi,0x1
    6a2d:	mov    QWORD PTR [rsp+0xa8],rax
    6a35:	call   5350 <CreatePlan7Matrix>
    6a3a:	mov    rdx,r12
    6a3d:	mov    esi,0x43b
    6a42:	mov    rdi,QWORD PTR [rax]
    6a45:	mov    r13,QWORD PTR [rax+0x8]
    6a49:	mov    QWORD PTR [rsp+0xd8],rax
    6a51:	mov    QWORD PTR [rsp+0x90],rdi
    6a59:	mov    rdi,QWORD PTR [rax+0x10]
    6a5d:	mov    rax,QWORD PTR [rax+0x18]
    6a61:	mov    QWORD PTR [rsp+0x70],rdi
    6a66:	lea    rdi,[rip+0x36753]        # 3d1c0 <_IO_stdin_used+0x1c0>
    6a6d:	mov    QWORD PTR [rsp+0x28],rax
    6a72:	call   36810 <sre_malloc>
    6a77:	lea    rdi,[rip+0x36742]        # 3d1c0 <_IO_stdin_used+0x1c0>
    6a7e:	mov    rdx,r12
    6a81:	mov    esi,0x43c
    6a86:	mov    r15,rax
    6a89:	mov    QWORD PTR [rsp+0xb8],rax
    6a91:	call   36810 <sre_malloc>
    6a96:	mov    rdi,QWORD PTR [r14]
    6a99:	mov    rcx,rax
    6a9c:	mov    QWORD PTR [rsp+0xc0],rax
    6aa4:	mov    DWORD PTR [rdi+0x10],0x0
    6aab:	mov    eax,DWORD PTR [rbp+0x150]
    6ab1:	mov    QWORD PTR [rsp+0x20],rdi
    6ab6:	mov    DWORD PTR [rdi],eax
    6ab8:	movabs rax,0xc521974fc521974f
    6ac2:	mov    DWORD PTR [r15],0x0
    6ac9:	mov    QWORD PTR [rdi+0x4],rax
    6acd:	mov    DWORD PTR [rdi+0xc],0xc521974f
    6ad4:	mov    DWORD PTR [rcx],0xffffffff
    6ada:	mov    ecx,DWORD PTR [rbp+0x88]
    6ae0:	test   ecx,ecx
    6ae2:	js     6b31 <P7ParsingViterbi+0x1a1>
    6ae4:	mov    rax,QWORD PTR [rsp+0xa8]
    6aec:	mov    rsi,QWORD PTR [rax]
    6aef:	mov    rax,QWORD PTR [rsp+0xa0]
    6af7:	mov    rcx,QWORD PTR [rax]
    6afa:	mov    rax,QWORD PTR [rsp+0x98]
    6b02:	mov    rdx,QWORD PTR [rax]
    6b05:	xor    eax,eax
    6b07:	nop    WORD PTR [rax+rax*1+0x0]
    6b10:	mov    DWORD PTR [rsi+rax*4],0xc521974f
    6b17:	mov    DWORD PTR [rcx+rax*4],0xc521974f
    6b1e:	mov    DWORD PTR [rdx+rax*4],0xc521974f
    6b25:	add    rax,0x1
    6b29:	cmp    DWORD PTR [rbp+0x88],eax
    6b2f:	jge    6b10 <P7ParsingViterbi+0x180>
    6b31:	mov    eax,DWORD PTR [rsp+0xd4]
    6b38:	test   eax,eax
    6b3a:	jle    70f7 <P7ParsingViterbi+0x767>
    6b40:	mov    QWORD PTR [rsp+0x58],0x0
    6b49:	add    rbx,0x1
    6b4d:	sub    eax,0x1
    6b50:	mov    QWORD PTR [rsp+0x8],rbx
    6b55:	mov    QWORD PTR [rsp+0xc8],rax
    6b5d:	nop    DWORD PTR [rax]
    6b60:	mov    rbx,QWORD PTR [rsp+0x58]
    6b65:	mov    rcx,QWORD PTR [rsp+0xa8]
    6b6d:	lea    edi,[rbx+0x1]
    6b70:	and    ebx,0x1
    6b73:	mov    eax,edi
    6b75:	mov    DWORD PTR [rsp+0xd0],edi
    6b7c:	and    eax,0x1
    6b7f:	mov    QWORD PTR [rsp+0x88],rbx
    6b87:	mov    r8,QWORD PTR [rcx+rax*8]
    6b8b:	mov    rcx,QWORD PTR [rsp+0xa0]
    6b93:	mov    QWORD PTR [rsp+0x80],rax
    6b9b:	lea    rdi,[rax*8+0x0]
    6ba3:	mov    r9,QWORD PTR [rcx+rax*8]
    6ba7:	mov    rcx,QWORD PTR [rsp+0x98]
    6baf:	mov    DWORD PTR [r8],0xc521974f
    6bb6:	mov    rcx,QWORD PTR [rcx+rax*8]
    6bba:	mov    DWORD PTR [r9],0xc521974f
    6bc1:	lea    rax,[rbx*8+0x0]
    6bc9:	mov    DWORD PTR [rcx],0xc521974f
    6bcf:	mov    edx,DWORD PTR [rbp+0x88]
    6bd5:	test   edx,edx
    6bd7:	jle    6ec8 <P7ParsingViterbi+0x538>
    6bdd:	mov    rbx,QWORD PTR [rsp+0x88]
    6be5:	mov    rdx,QWORD PTR [rsp+0x98]
    6bed:	mov    r10,QWORD PTR [rbp+0x138]
    6bf4:	mov    r14,QWORD PTR [rbp+0x170]
    6bfb:	mov    rdx,QWORD PTR [rdx+rbx*8]
    6bff:	mov    r12,QWORD PTR [r10+0x28]
    6c03:	mov    r11,QWORD PTR [r10+0x30]
    6c07:	mov    QWORD PTR [rsp+0x50],r10
    6c0c:	mov    QWORD PTR [rsp+0x10],rdx
    6c11:	mov    rdx,QWORD PTR [r10]
    6c14:	mov    QWORD PTR [rsp+0x30],rdx
    6c19:	lea    rdx,[r13+rax*1+0x0]
    6c1e:	mov    QWORD PTR [rsp+0x60],rdx
    6c23:	mov    rdx,QWORD PTR [rsp+0xa0]
    6c2b:	mov    rdx,QWORD PTR [rdx+rbx*8]
    6c2f:	mov    QWORD PTR [rsp+0x18],rdx
    6c34:	mov    rdx,QWORD PTR [r10+0x18]
    6c38:	mov    QWORD PTR [rsp+0x38],rdx
    6c3d:	mov    rdx,QWORD PTR [rsp+0x70]
    6c42:	add    rdx,rax
    6c45:	add    rax,QWORD PTR [rsp+0x28]
    6c4a:	mov    QWORD PTR [rsp+0x68],rdx
    6c4f:	mov    rdx,QWORD PTR [rsp+0xa8]
    6c57:	mov    QWORD PTR [rsp+0x78],rax
    6c5c:	mov    rax,QWORD PTR [rbp+0x140]
    6c63:	mov    rbx,QWORD PTR [rdx+rbx*8]
    6c67:	mov    QWORD PTR [rsp+0x48],rax
    6c6c:	mov    eax,0x1
    6c71:	mov    QWORD PTR [rsp+0x40],rbx
    6c76:	mov    rbx,QWORD PTR [r10+0x10]
    6c7a:	jmp    6c96 <P7ParsingViterbi+0x306>
    6c7c:	nop    DWORD PTR [rax+0x0]
    6c80:	add    DWORD PTR [r9+rax*4],edx
    6c84:	mov    esi,DWORD PTR [rbp+0x88]
    6c8a:	add    rax,0x1
    6c8e:	cmp    esi,eax
    6c90:	jl     6ec8 <P7ParsingViterbi+0x538>
    6c96:	mov    rsi,QWORD PTR [rsp+0x30]
    6c9b:	mov    DWORD PTR [rcx+rax*4],0xc521974f
    6ca2:	lea    rdx,[rax*4+0x0]
    6caa:	mov    r15d,DWORD PTR [rsi+rax*4-0x4]
    6caf:	mov    rsi,QWORD PTR [rsp+0x10]
    6cb4:	add    r15d,DWORD PTR [rsi+rax*4-0x4]
    6cb9:	mov    esi,0xc521974f
    6cbe:	cmp    r15d,0xc5219750
    6cc5:	jl     6ce4 <P7ParsingViterbi+0x354>
    6cc7:	mov    rsi,QWORD PTR [rsp+0x60]
    6ccc:	mov    DWORD PTR [rcx+rax*4],r15d
    6cd0:	mov    rsi,QWORD PTR [rsi]
    6cd3:	mov    r15d,DWORD PTR [rsi+rdx*1-0x4]
    6cd8:	mov    rsi,QWORD PTR [r13+rdi*1+0x0]
    6cdd:	mov    DWORD PTR [rsi+rax*4],r15d
    6ce1:	mov    esi,DWORD PTR [rcx+rax*4]
    6ce4:	mov    r15,QWORD PTR [rsp+0x38]
    6ce9:	mov    r10,QWORD PTR [rsp+0x18]
    6cee:	mov    r15d,DWORD PTR [r15+rax*4-0x4]
    6cf3:	add    r15d,DWORD PTR [r10+rax*4-0x4]
    6cf8:	cmp    r15d,esi
    6cfb:	jle    6d1a <P7ParsingViterbi+0x38a>
    6cfd:	mov    rsi,QWORD PTR [rsp+0x68]
    6d02:	mov    DWORD PTR [rcx+rax*4],r15d
    6d06:	mov    rsi,QWORD PTR [rsi]
    6d09:	mov    r15d,DWORD PTR [rsi+rdx*1-0x4]
    6d0e:	mov    rsi,QWORD PTR [r13+rdi*1+0x0]
    6d13:	mov    DWORD PTR [rsi+rdx*1],r15d
    6d17:	mov    esi,DWORD PTR [rcx+rax*4]
    6d1a:	mov    r10,QWORD PTR [rsp+0x20]
    6d1f:	mov    r15d,DWORD PTR [r14+rax*4]
    6d23:	add    r15d,DWORD PTR [r10]
    6d26:	cmp    r15d,esi
    6d29:	jle    6d40 <P7ParsingViterbi+0x3b0>
    6d2b:	mov    rsi,QWORD PTR [r13+rdi*1+0x0]
    6d30:	mov    r10d,DWORD PTR [rsp+0x58]
    6d35:	mov    DWORD PTR [rcx+rax*4],r15d
    6d39:	mov    DWORD PTR [rsi+rdx*1],r10d
    6d3d:	mov    esi,DWORD PTR [rcx+rax*4]
    6d40:	mov    r10,QWORD PTR [rsp+0x40]
    6d45:	mov    r15d,DWORD PTR [r12+rax*4-0x4]
    6d4a:	add    r15d,DWORD PTR [r10+rax*4-0x4]
    6d4f:	cmp    r15d,esi
    6d52:	jle    6d6e <P7ParsingViterbi+0x3de>
    6d54:	mov    rsi,QWORD PTR [rsp+0x78]
    6d59:	mov    DWORD PTR [rcx+rax*4],r15d
    6d5d:	mov    rsi,QWORD PTR [rsi]
    6d60:	mov    r15d,DWORD PTR [rsi+rdx*1-0x4]
    6d65:	mov    rsi,QWORD PTR [r13+rdi*1+0x0]
    6d6a:	mov    DWORD PTR [rsi+rdx*1],r15d
    6d6e:	mov    rsi,QWORD PTR [rsp+0x8]
    6d73:	mov    r10,QWORD PTR [rsp+0x48]
    6d78:	movsx  rsi,BYTE PTR [rsi]
    6d7c:	mov    rsi,QWORD PTR [r10+rsi*8]
    6d80:	mov    esi,DWORD PTR [rsi+rdx*1]
    6d83:	cmp    esi,0xc521974f
    6d89:	je     6d8e <P7ParsingViterbi+0x3fe>
    6d8b:	add    esi,DWORD PTR [rcx+rax*4]
    6d8e:	mov    DWORD PTR [rcx+rax*4],esi
    6d91:	mov    r15d,0xc521974f
    6d97:	mov    DWORD PTR [r8+rax*4],0xc521974f
    6d9f:	mov    esi,DWORD PTR [rbx+rax*4-0x4]
    6da3:	add    esi,DWORD PTR [rcx+rax*4-0x4]
    6da7:	cmp    esi,0xc5219750
    6dad:	jl     6dce <P7ParsingViterbi+0x43e>
    6daf:	mov    DWORD PTR [r8+rax*4],esi
    6db3:	mov    rsi,QWORD PTR [r13+rdi*1+0x0]
    6db8:	mov    r15d,DWORD PTR [rsi+rdx*1-0x4]
    6dbd:	mov    rsi,QWORD PTR [rsp+0x28]
    6dc2:	mov    rsi,QWORD PTR [rsi+rdi*1]
    6dc6:	mov    DWORD PTR [rsi+rdx*1],r15d
    6dca:	mov    r15d,DWORD PTR [r8+rax*4]
    6dce:	mov    esi,DWORD PTR [r11+rax*4-0x4]
    6dd3:	add    esi,DWORD PTR [r8+rax*4-0x4]
    6dd8:	cmp    esi,r15d
    6ddb:	jle    6df3 <P7ParsingViterbi+0x463>
    6ddd:	mov    DWORD PTR [r8+rax*4],esi
    6de1:	mov    rsi,QWORD PTR [rsp+0x28]
    6de6:	mov    rsi,QWORD PTR [rsi+rdi*1]
    6dea:	mov    r15d,DWORD PTR [rsi+rdx*1-0x4]
    6def:	mov    DWORD PTR [rsi+rdx*1],r15d
    6df3:	mov    esi,DWORD PTR [rbp+0x88]
    6df9:	cmp    esi,eax
    6dfb:	jle    6c8a <P7ParsingViterbi+0x2fa>
    6e01:	mov    rsi,QWORD PTR [rsp+0x50]
    6e06:	mov    r10,QWORD PTR [rsp+0x10]
    6e0b:	mov    DWORD PTR [r9+rax*4],0xc521974f
    6e13:	mov    rsi,QWORD PTR [rsi+0x8]
    6e17:	mov    r15d,DWORD PTR [r10+rax*4]
    6e1b:	add    r15d,DWORD PTR [rsi+rdx*1]
    6e1f:	mov    esi,r15d
    6e22:	mov    r15d,0xc521974f
    6e28:	cmp    esi,0xc5219750
    6e2e:	jl     6e51 <P7ParsingViterbi+0x4c1>
    6e30:	mov    DWORD PTR [r9+rax*4],esi
    6e34:	mov    rsi,QWORD PTR [rsp+0x60]
    6e39:	mov    rsi,QWORD PTR [rsi]
    6e3c:	mov    r15d,DWORD PTR [rsi+rdx*1]
    6e40:	mov    rsi,QWORD PTR [rsp+0x70]
    6e45:	mov    rsi,QWORD PTR [rsi+rdi*1]
    6e49:	mov    DWORD PTR [rsi+rdx*1],r15d
    6e4d:	mov    r15d,DWORD PTR [r9+rax*4]
    6e51:	mov    r10,QWORD PTR [rsp+0x50]
    6e56:	mov    rsi,QWORD PTR [rsp+0x18]
    6e5b:	mov    r10,QWORD PTR [r10+0x20]
    6e5f:	mov    esi,DWORD PTR [rsi+rax*4]
    6e62:	add    esi,DWORD PTR [r10+rdx*1]
    6e66:	cmp    esi,r15d
    6e69:	jle    6e88 <P7ParsingViterbi+0x4f8>
    6e6b:	mov    DWORD PTR [r9+rax*4],esi
    6e6f:	mov    rsi,QWORD PTR [rsp+0x68]
    6e74:	mov    rsi,QWORD PTR [rsi]
    6e77:	mov    r15d,DWORD PTR [rsi+rdx*1]
    6e7b:	mov    rsi,QWORD PTR [rsp+0x70]
    6e80:	mov    rsi,QWORD PTR [rsi+rdi*1]
    6e84:	mov    DWORD PTR [rsi+rdx*1],r15d
    6e88:	mov    rsi,QWORD PTR [rsp+0x8]
    6e8d:	movsx  r15,BYTE PTR [rsi]
    6e91:	mov    rsi,QWORD PTR [rbp+0x148]
    6e98:	mov    rsi,QWORD PTR [rsi+r15*8]
    6e9c:	mov    edx,DWORD PTR [rsi+rdx*1]
    6e9f:	cmp    edx,0xc521974f
    6ea5:	jne    6c80 <P7ParsingViterbi+0x2f0>
    6eab:	mov    DWORD PTR [r9+rax*4],0xc521974f
    6eb3:	mov    esi,DWORD PTR [rbp+0x88]
    6eb9:	add    rax,0x1
    6ebd:	cmp    esi,eax
    6ebf:	jge    6c96 <P7ParsingViterbi+0x306>
    6ec5:	nop    DWORD PTR [rax]
    6ec8:	mov    rax,QWORD PTR [rsp+0xb0]
    6ed0:	mov    rbx,QWORD PTR [rsp+0x20]
    6ed5:	lea    r10,[rax+rdi*1]
    6ed9:	mov    rsi,QWORD PTR [r10]
    6edc:	mov    DWORD PTR [rsi+0x10],0xc521974f
    6ee3:	mov    eax,DWORD PTR [rbp+0x154]
    6ee9:	add    eax,DWORD PTR [rbx+0x10]
    6eec:	mov    ebx,0xc521974f
    6ef1:	mov    DWORD PTR [rsi+0x4],0xc521974f
    6ef8:	cmp    eax,0xc521974f
    6efd:	cmovle eax,ebx
    6f00:	mov    DWORD PTR [rsi+0x10],eax
    6f03:	mov    eax,DWORD PTR [rbp+0x88]
    6f09:	test   eax,eax
    6f0b:	jle    6f5c <P7ParsingViterbi+0x5cc>
    6f0d:	mov    rbx,QWORD PTR [rsp+0x58]
    6f12:	mov    eax,0x1
    6f17:	mov    r9,QWORD PTR [rbp+0x178]
    6f1e:	mov    r8d,0xc521974f
    6f24:	mov    r11,QWORD PTR [rsp+0xc0]
    6f2c:	jmp    6f34 <P7ParsingViterbi+0x5a4>
    6f2e:	xchg   ax,ax
    6f30:	mov    r8d,DWORD PTR [rsi+0x4]
    6f34:	mov    edx,DWORD PTR [r9+rax*4]
    6f38:	add    edx,DWORD PTR [rcx+rax*4]
    6f3b:	cmp    edx,r8d
    6f3e:	jle    6f50 <P7ParsingViterbi+0x5c0>
    6f40:	mov    DWORD PTR [rsi+0x4],edx
    6f43:	mov    rdx,QWORD PTR [r13+rdi*1+0x0]
    6f48:	mov    edx,DWORD PTR [rdx+rax*4]
    6f4b:	mov    DWORD PTR [r11+rbx*4+0x4],edx
    6f50:	add    rax,0x1
    6f54:	cmp    DWORD PTR [rbp+0x88],eax
    6f5a:	jge    6f30 <P7ParsingViterbi+0x5a0>
    6f5c:	mov    rbx,QWORD PTR [rsp+0x20]
    6f61:	mov    DWORD PTR [rsi+0xc],0xc521974f
    6f68:	mov    edx,0xc521974f
    6f6d:	mov    eax,DWORD PTR [rbp+0x16c]
    6f73:	add    eax,DWORD PTR [rbx+0xc]
    6f76:	cmp    eax,0xc5219750
    6f7b:	jl     6fa9 <P7ParsingViterbi+0x619>
    6f7d:	mov    DWORD PTR [rsi+0xc],eax
    6f80:	mov    rbx,QWORD PTR [rsp+0x90]
    6f88:	mov    rax,QWORD PTR [rsp+0x88]
    6f90:	mov    rax,QWORD PTR [rbx+rax*8]
    6f94:	mov    edx,DWORD PTR [rax+0xc]
    6f97:	mov    rax,QWORD PTR [rsp+0x80]
    6f9f:	mov    rax,QWORD PTR [rbx+rax*8]
    6fa3:	mov    DWORD PTR [rax+0xc],edx
    6fa6:	mov    edx,DWORD PTR [rsi+0xc]
    6fa9:	mov    eax,DWORD PTR [rbp+0x15c]
    6faf:	add    eax,DWORD PTR [rsi+0x4]
    6fb2:	cmp    eax,edx
    6fb4:	jle    6fd7 <P7ParsingViterbi+0x647>
    6fb6:	mov    DWORD PTR [rsi+0xc],eax
    6fb9:	mov    rbx,QWORD PTR [rsp+0x80]
    6fc1:	mov    rax,QWORD PTR [rsp+0x90]
    6fc9:	mov    edi,DWORD PTR [rsp+0xd0]
    6fd0:	mov    rax,QWORD PTR [rax+rbx*8]
    6fd4:	mov    DWORD PTR [rax+0xc],edi
    6fd7:	mov    DWORD PTR [rsi],0xc521974f
    6fdd:	mov    eax,DWORD PTR [rbp+0x150]
    6fe3:	mov    edx,0xc521974f
    6fe8:	add    eax,DWORD PTR [rsi+0x10]
    6feb:	cmp    eax,0xc5219750
    6ff0:	jl     700b <P7ParsingViterbi+0x67b>
    6ff2:	mov    DWORD PTR [rsi],eax
    6ff4:	mov    rbx,QWORD PTR [rsp+0x58]
    6ff9:	mov    rax,QWORD PTR [rsp+0xb8]
    7001:	mov    DWORD PTR [rax+rbx*4+0x4],0x0
    7009:	mov    edx,DWORD PTR [rsi]
    700b:	mov    eax,DWORD PTR [rbp+0x168]
    7011:	add    eax,DWORD PTR [rsi+0xc]
    7014:	cmp    eax,edx
    7016:	jle    7042 <P7ParsingViterbi+0x6b2>
    7018:	mov    DWORD PTR [rsi],eax
    701a:	mov    rdi,QWORD PTR [rsp+0x80]
    7022:	mov    rax,QWORD PTR [rsp+0x90]
    702a:	mov    rbx,QWORD PTR [rsp+0xb8]
    7032:	mov    rax,QWORD PTR [rax+rdi*8]
    7036:	mov    rdi,QWORD PTR [rsp+0x58]
    703b:	mov    eax,DWORD PTR [rax+0xc]
    703e:	mov    DWORD PTR [rbx+rdi*4+0x4],eax
    7042:	mov    rbx,QWORD PTR [rsp+0x20]
    7047:	mov    DWORD PTR [rsi+0x8],0xc521974f
    704e:	mov    edx,0xc521974f
    7053:	mov    eax,DWORD PTR [rbp+0x164]
    7059:	add    eax,DWORD PTR [rbx+0x8]
    705c:	cmp    eax,0xc5219750
    7061:	jl     708f <P7ParsingViterbi+0x6ff>
    7063:	mov    DWORD PTR [rsi+0x8],eax
    7066:	mov    rdi,QWORD PTR [rsp+0x90]
    706e:	mov    rax,QWORD PTR [rsp+0x88]
    7076:	mov    rax,QWORD PTR [rdi+rax*8]
    707a:	mov    edx,DWORD PTR [rax+0x8]
    707d:	mov    rax,QWORD PTR [rsp+0x80]
    7085:	mov    rax,QWORD PTR [rdi+rax*8]
    7089:	mov    DWORD PTR [rax+0x8],edx
    708c:	mov    edx,DWORD PTR [rsi+0x8]
    708f:	mov    eax,DWORD PTR [rbp+0x158]
    7095:	add    eax,DWORD PTR [rsi+0x4]
    7098:	cmp    eax,edx
    709a:	jle    70bd <P7ParsingViterbi+0x72d>
    709c:	mov    DWORD PTR [rsi+0x8],eax
    709f:	mov    rbx,QWORD PTR [rsp+0x80]
    70a7:	mov    rax,QWORD PTR [rsp+0x90]
    70af:	mov    edi,DWORD PTR [rsp+0xd0]
    70b6:	mov    rax,QWORD PTR [rax+rbx*8]
    70ba:	mov    DWORD PTR [rax+0x8],edi
    70bd:	mov    rbx,QWORD PTR [rsp+0x58]
    70c2:	add    QWORD PTR [rsp+0x8],0x1
    70c8:	lea    rax,[rbx+0x1]
    70cc:	cmp    QWORD PTR [rsp+0xc8],rbx
    70d4:	je     7100 <P7ParsingViterbi+0x770>
    70d6:	mov    rdi,QWORD PTR [rsp+0xb0]
    70de:	mov    rdx,rax
    70e1:	mov    QWORD PTR [rsp+0x58],rax
    70e6:	and    edx,0x1
    70e9:	mov    rdi,QWORD PTR [rdi+rdx*8]
    70ed:	mov    QWORD PTR [rsp+0x20],rdi
    70f2:	jmp    6b60 <P7ParsingViterbi+0x1d0>
    70f7:	mov    r10,QWORD PTR [rsp+0xb0]
    70ff:	nop
    7100:	mov    rax,QWORD PTR [r10]
    7103:	mov    edi,0x2
    7108:	lea    rsi,[rsp+0xf0]
    7110:	mov    ebp,DWORD PTR [rbp+0x160]
    7116:	add    ebp,DWORD PTR [rax+0x8]
    7119:	call   209f0 <P7AllocTrace>
    711e:	mov    rax,QWORD PTR [rsp+0xf0]
    7126:	mov    rbx,QWORD PTR [rsp+0x90]
    712e:	mov    rax,QWORD PTR [rax+0x8]
    7132:	mov    BYTE PTR [rax],0x9
    7135:	mov    rdi,QWORD PTR [rsp+0xf0]
    713d:	mov    rax,QWORD PTR [rdi+0x18]
    7141:	mov    DWORD PTR [rax],0x0
    7147:	mov    eax,DWORD PTR [rsp+0xd4]
    714e:	mov    edx,eax
    7150:	shr    edx,0x1f
    7153:	add    eax,edx
    7155:	and    eax,0x1
    7158:	sub    eax,edx
    715a:	cdqe   
    715c:	mov    rax,QWORD PTR [rbx+rax*8]
    7160:	movsxd r12,DWORD PTR [rax+0x8]
    7164:	test   r12d,r12d
    7167:	jle    7282 <P7ParsingViterbi+0x8f2>
    716d:	mov    r13,QWORD PTR [rsp+0xb8]
    7175:	mov    r14,QWORD PTR [rsp+0xc0]
    717d:	mov    ebx,0x2
    7182:	nop    WORD PTR [rax+rax*1+0x0]
    7188:	lea    esi,[rbx+0x2]
    718b:	call   20a70 <P7ReallocTrace>
    7190:	mov    rax,QWORD PTR [rsp+0xf0]
    7198:	mov    ecx,ebx
    719a:	mov    rax,QWORD PTR [rax+0x8]
    719e:	mov    BYTE PTR [rax+rbx*1-0x1],0x7
    71a3:	mov    rdx,QWORD PTR [rsp+0xf0]
    71ab:	mov    rax,QWORD PTR [rdx+0x18]
    71af:	mov    rdx,QWORD PTR [rdx+0x8]
    71b3:	mov    DWORD PTR [rax+rbx*4-0x4],r12d
    71b8:	movsxd rax,DWORD PTR [r14+r12*4]
    71bc:	mov    BYTE PTR [rdx+rbx*1],0x6
    71c0:	mov    rdi,QWORD PTR [rsp+0xf0]
    71c8:	mov    rdx,QWORD PTR [rdi+0x18]
    71cc:	mov    DWORD PTR [rdx+rbx*4],eax
    71cf:	movsxd r12,DWORD PTR [r13+rax*4+0x0]
    71d4:	add    rbx,0x2
    71d8:	test   r12d,r12d
    71db:	jg     7188 <P7ParsingViterbi+0x7f8>
    71dd:	lea    eax,[rcx+0x1]
    71e0:	add    ecx,0x2
    71e3:	cdqe   
    71e5:	lea    rdx,[rax*4+0x0]
    71ed:	mov    rsi,QWORD PTR [rdi+0x8]
    71f1:	mov    BYTE PTR [rsi+rax*1],0x4
    71f5:	mov    rdi,QWORD PTR [rsp+0xf0]
    71fd:	mov    rax,QWORD PTR [rdi+0x18]
    7201:	mov    DWORD PTR [rax+rdx*1],0x0
    7208:	mov    DWORD PTR [rdi],ecx
    720a:	call   20bf0 <P7ReverseTrace>
    720f:	mov    rdi,QWORD PTR [rsp+0xe0]
    7217:	call   5810 <FreePlan7Matrix>
    721c:	mov    rdi,QWORD PTR [rsp+0xd8]
    7224:	call   5810 <FreePlan7Matrix>
    7229:	mov    rdi,QWORD PTR [rsp+0xb8]
    7231:	call   3460 <free@plt>
    7236:	mov    rdi,QWORD PTR [rsp+0xc0]
    723e:	call   3460 <free@plt>
    7243:	mov    rax,QWORD PTR [rsp+0xf0]
    724b:	mov    rbx,QWORD PTR [rsp+0xe8]
    7253:	mov    edi,ebp
    7255:	mov    QWORD PTR [rbx],rax
    7258:	call   17820 <Scorify>
    725d:	mov    rax,QWORD PTR [rsp+0xf8]
    7265:	xor    rax,QWORD PTR fs:0x28
    726e:	jne    7296 <P7ParsingViterbi+0x906>
    7270:	add    rsp,0x108
    7277:	pop    rbx
    7278:	pop    rbp
    7279:	pop    r12
    727b:	pop    r13
    727d:	pop    r14
    727f:	pop    r15
    7281:	ret    
    7282:	mov    ecx,0x2
    7287:	mov    edx,0x4
    728c:	mov    eax,0x1
    7291:	jmp    71ed <P7ParsingViterbi+0x85d>
    7296:	call   3570 <__stack_chk_fail@plt>
    729b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000072a0 <P7WeeViterbi>:
    72a0:	endbr64 
    72a4:	push   r15
    72a6:	push   r14
    72a8:	mov    r14d,esi
    72ab:	push   r13
    72ad:	mov    r13,rdx
    72b0:	push   r12
    72b2:	lea    r12d,[rsi+0x1]
    72b6:	push   rbp
    72b7:	movsxd r12,r12d
    72ba:	push   rbx
    72bb:	lea    rbx,[r12*4+0x0]
    72c3:	mov    rdx,rbx
    72c6:	sub    rsp,0x148
    72cd:	mov    QWORD PTR [rsp+0x120],rcx
    72d5:	mov    QWORD PTR [rsp+0x18],rdi
    72da:	lea    rdi,[rip+0x35edf]        # 3d1c0 <_IO_stdin_used+0x1c0>
    72e1:	mov    DWORD PTR [rsp+0x114],esi
    72e8:	mov    esi,0x502
    72ed:	mov    rax,QWORD PTR fs:0x28
    72f6:	mov    QWORD PTR [rsp+0x138],rax
    72fe:	xor    eax,eax
    7300:	call   36810 <sre_malloc>
    7305:	mov    rdx,r12
    7308:	mov    esi,0x503
    730d:	lea    rdi,[rip+0x35eac]        # 3d1c0 <_IO_stdin_used+0x1c0>
    7314:	mov    r15,rax
    7317:	mov    QWORD PTR [rsp+0xd8],rax
    731f:	call   36810 <sre_malloc>
    7324:	mov    rdx,rbx
    7327:	mov    esi,0x504
    732c:	lea    rdi,[rip+0x35e8d]        # 3d1c0 <_IO_stdin_used+0x1c0>
    7333:	mov    rbp,rax
    7336:	mov    QWORD PTR [rsp+0xd0],rax
    733e:	call   36810 <sre_malloc>
    7343:	mov    rdx,rbx
    7346:	mov    esi,0x505
    734b:	lea    rdi,[rip+0x35e6e]        # 3d1c0 <_IO_stdin_used+0x1c0>
    7352:	mov    r12,rax
    7355:	mov    QWORD PTR [rsp+0xe0],rax
    735d:	call   36810 <sre_malloc>
    7362:	mov    DWORD PTR [rsp+0x5c],0x0
    736a:	pxor   xmm2,xmm2
    736e:	mov    DWORD PTR [rax],0x1
    7374:	mov    QWORD PTR [rsp+0xe8],rax
    737c:	lea    rax,[r15+rbx*1-0x4]
    7381:	mov    DWORD PTR [r12],r14d
    7385:	mov    rbx,rax
    7388:	mov    DWORD PTR [r15+0x4],0x1
    7390:	mov    QWORD PTR [rsp+0x128],rax
    7398:	mov    eax,DWORD PTR [r13+0x88]
    739f:	movss  DWORD PTR [rsp+0x110],xmm2
    73a8:	mov    DWORD PTR [rbx],eax
    73aa:	movsxd rax,r14d
    73ad:	mov    r14d,0xc521974f
    73b3:	add    rax,rbp
    73b6:	mov    BYTE PTR [rbp+0x1],0x4
    73ba:	mov    QWORD PTR [rsp+0x118],rax
    73c2:	mov    BYTE PTR [rax],0x9
    73c5:	nop    DWORD PTR [rax]
    73c8:	movsxd rax,DWORD PTR [rsp+0x5c]
    73cd:	mov    rbx,QWORD PTR [rsp+0xe8]
    73d5:	mov    r15,QWORD PTR [rsp+0xd8]
    73dd:	mov    rcx,QWORD PTR [rsp+0xd0]
    73e5:	mov    r9,rax
    73e8:	shl    rax,0x2
    73ec:	add    rbx,rax
    73ef:	add    rax,QWORD PTR [rsp+0xe0]
    73f7:	movsxd rdx,DWORD PTR [rbx]
    73fa:	mov    QWORD PTR [rsp+0xf8],rbx
    7402:	mov    QWORD PTR [rsp+0x100],rax
    740a:	lea    rbx,[r15+rdx*4]
    740e:	mov    rdi,rdx
    7411:	mov    DWORD PTR [rsp+0x64],edx
    7415:	add    rdx,rcx
    7418:	mov    QWORD PTR [rsp+0x68],rbx
    741d:	mov    ebx,DWORD PTR [rbx]
    741f:	movzx  r11d,BYTE PTR [rdx]
    7423:	mov    QWORD PTR [rsp+0x70],rdx
    7428:	mov    DWORD PTR [rsp+0x8],ebx
    742c:	movsxd rbx,DWORD PTR [rax]
    742f:	mov    BYTE PTR [rsp+0x63],r11b
    7434:	lea    rdx,[r15+rbx*4]
    7438:	mov    rax,rbx
    743b:	mov    DWORD PTR [rsp+0x28],ebx
    743f:	mov    esi,DWORD PTR [rdx]
    7441:	mov    QWORD PTR [rsp+0x108],rbx
    7449:	sub    eax,edi
    744b:	mov    DWORD PTR [rsp],esi
    744e:	mov    rsi,rcx
    7451:	add    rsi,rbx
    7454:	movzx  ebx,BYTE PTR [rsi]
    7457:	mov    BYTE PTR [rsp+0x62],bl
    745b:	lea    ebx,[r9-0x1]
    745f:	mov    DWORD PTR [rsp+0xf0],ebx
    7466:	mov    ebx,eax
    7468:	shr    eax,0x1f
    746b:	add    eax,ebx
    746d:	sar    eax,1
    746f:	add    eax,edi
    7471:	mov    DWORD PTR [rsp+0x10],eax
    7475:	cmp    ebx,0x1
    7478:	je     87a0 <P7WeeViterbi+0x1500>
    747e:	cdqe   
    7480:	xor    r12d,r12d
    7483:	lea    rbx,[r15+rax*4]
    7487:	add    rax,rcx
    748a:	mov    QWORD PTR [rsp+0x68],rbx
    748f:	mov    ebx,0x1
    7494:	mov    QWORD PTR [rsp+0x70],rax
    7499:	cmp    r11b,0x4
    749d:	je     74be <P7WeeViterbi+0x21e>
    749f:	mov    ebx,DWORD PTR [rsp+0x64]
    74a3:	mov    eax,ebx
    74a5:	shr    eax,0x1f
    74a8:	lea    ecx,[rbx+rax*1]
    74ab:	add    ebx,0x1
    74ae:	and    ecx,0x1
    74b1:	sub    ecx,eax
    74b3:	movsxd rcx,ecx
    74b6:	lea    r12,[rcx*8+0x0]
    74be:	mov    esi,DWORD PTR [r13+0x88]
    74c5:	xor    ecx,ecx
    74c7:	xor    edx,edx
    74c9:	mov    edi,0x1
    74ce:	movabs r15,0xc521974fc521974f
    74d8:	call   5350 <CreatePlan7Matrix>
    74dd:	mov    r11d,DWORD PTR [rsp+0x8]
    74e2:	mov    r9d,DWORD PTR [rsp]
    74e6:	mov    rcx,QWORD PTR [rax]
    74e9:	mov    rdx,QWORD PTR [rax+0x8]
    74ed:	mov    QWORD PTR [rsp+0x50],rax
    74f2:	mov    rdi,QWORD PTR [rax+0x10]
    74f6:	mov    rax,QWORD PTR [rax+0x18]
    74fa:	lea    rbp,[rcx+r12*1]
    74fe:	mov    QWORD PTR [rsp+0x40],rcx
    7503:	mov    rcx,QWORD PTR [rbp+0x0]
    7507:	mov    QWORD PTR [rsp+0x30],rdx
    750c:	mov    QWORD PTR [rsp+0x20],rdi
    7511:	mov    QWORD PTR [rsp+0x38],rax
    7516:	mov    rsi,rcx
    7519:	mov    DWORD PTR [rcx+0x10],0xc521974f
    7520:	mov    QWORD PTR [rcx],r15
    7523:	mov    DWORD PTR [rcx+0x8],0xc521974f
    752a:	cmp    r11d,r9d
    752d:	jg     755f <P7WeeViterbi+0x2bf>
    752f:	mov    rdi,QWORD PTR [rdi+r12*1]
    7533:	mov    rdx,QWORD PTR [rdx+r12*1]
    7537:	mov    r8,QWORD PTR [rax+r12*1]
    753b:	movsxd rax,r11d
    753e:	xchg   ax,ax
    7540:	mov    DWORD PTR [r8+rax*4],0xc521974f
    7548:	mov    DWORD PTR [rdi+rax*4],0xc521974f
    754f:	mov    DWORD PTR [rdx+rax*4],0xc521974f
    7556:	add    rax,0x1
    755a:	cmp    DWORD PTR [rsp],eax
    755d:	jge    7540 <P7WeeViterbi+0x2a0>
    755f:	movzx  eax,BYTE PTR [rsp+0x63]
    7564:	cmp    al,0x8
    7566:	ja     8c10 <P7WeeViterbi+0x1970>
    756c:	lea    rdx,[rip+0x35d69]        # 3d2dc <_IO_stdin_used+0x2dc>
    7573:	movsxd rax,DWORD PTR [rdx+rax*4]
    7577:	add    rax,rdx
    757a:	notrack jmp rax
    757d:	nop    DWORD PTR [rax]
    7580:	mov    DWORD PTR [rcx+0x10],0x0
    7587:	mov    eax,DWORD PTR [rcx+0x4]
    758a:	xor    edx,edx
    758c:	mov    DWORD PTR [rsi],0xc521974f
    7592:	add    edx,DWORD PTR [r13+0x150]
    7599:	cmp    edx,0xc521974f
    759f:	mov    DWORD PTR [rsi+0x8],0xc521974f
    75a6:	cmovle edx,r14d
    75aa:	mov    DWORD PTR [rsi],edx
    75ac:	add    eax,DWORD PTR [r13+0x158]
    75b3:	cmp    eax,0xc521974f
    75b8:	cmovle eax,r14d
    75bc:	mov    DWORD PTR [rsi+0x8],eax
    75bf:	cmp    DWORD PTR [rsp+0x10],ebx
    75c3:	jl     7a05 <P7WeeViterbi+0x765>
    75c9:	movsxd rax,DWORD PTR [rsp+0x8]
    75ce:	movsxd rbx,ebx
    75d1:	mov    QWORD PTR [rsp+0xb0],rax
    75d9:	lea    r10,[rax*4+0x0]
    75e1:	lea    eax,[rax+0x1]
    75e4:	mov    DWORD PTR [rsp+0xc4],eax
    75eb:	cdqe   
    75ed:	mov    QWORD PTR [rsp+0xc8],rax
    75f5:	shl    rax,0x2
    75f9:	mov    QWORD PTR [rsp+0xb8],rax
    7601:	nop    DWORD PTR [rax+0x0]
    7608:	mov    edx,ebx
    760a:	mov    rdi,QWORD PTR [rsp+0x38]
    760f:	mov    r11,QWORD PTR [rsp+0x30]
    7614:	mov    esi,ebx
    7616:	shr    edx,0x1f
    7619:	not    esi
    761b:	lea    eax,[rdx+rbx*1]
    761e:	and    esi,0x1
    7621:	and    eax,0x1
    7624:	sub    eax,edx
    7626:	lea    rdx,[rsi*8+0x0]
    762e:	cdqe   
    7630:	mov    r8,QWORD PTR [rdi+rax*8]
    7634:	mov    r12,QWORD PTR [r11+rax*8]
    7638:	mov    QWORD PTR [rsp+0x98],rax
    7640:	mov    rdi,QWORD PTR [rsp+0x20]
    7645:	lea    rcx,[r12+r10*1]
    7649:	mov    DWORD PTR [r8+r10*1],0xc521974f
    7651:	mov    r9,QWORD PTR [rdi+rax*8]
    7655:	mov    eax,DWORD PTR [rsp+0x8]
    7659:	lea    rdi,[r9+r10*1]
    765d:	mov    DWORD PTR [rdi],0xc521974f
    7663:	mov    DWORD PTR [rcx],0xc521974f
    7669:	cmp    eax,DWORD PTR [r13+0x88]
    7670:	jge    76e0 <P7WeeViterbi+0x440>
    7672:	mov    rbp,QWORD PTR [r13+0x138]
    7679:	mov    r11,QWORD PTR [r11+rsi*8]
    767d:	mov    rax,QWORD PTR [rbp+0x8]
    7681:	mov    eax,DWORD PTR [rax+r10*1]
    7685:	add    eax,DWORD PTR [r11+r10*1]
    7689:	mov    r11d,eax
    768c:	cmp    eax,0xc5219750
    7691:	jge    7696 <P7WeeViterbi+0x3f6>
    7693:	mov    r11d,DWORD PTR [rdi]
    7696:	mov    rax,QWORD PTR [rsp+0x20]
    769b:	mov    DWORD PTR [rdi],r11d
    769e:	mov    r15,QWORD PTR [rax+rsi*8]
    76a2:	mov    rax,QWORD PTR [rbp+0x20]
    76a6:	mov    eax,DWORD PTR [rax+r10*1]
    76aa:	add    eax,DWORD PTR [r15+r10*1]
    76ae:	cmp    eax,r11d
    76b1:	mov    r15,QWORD PTR [rsp+0x18]
    76b6:	cmovl  eax,r11d
    76ba:	mov    DWORD PTR [rdi],eax
    76bc:	movsx  rbp,BYTE PTR [r15+rbx*1]
    76c1:	mov    r11,QWORD PTR [r13+0x148]
    76c8:	mov    r11,QWORD PTR [r11+rbp*8]
    76cc:	mov    r11d,DWORD PTR [r11+r10*1]
    76d0:	add    eax,r11d
    76d3:	cmp    r11d,0xc521974f
    76da:	cmove  eax,r14d
    76de:	mov    DWORD PTR [rdi],eax
    76e0:	mov    rax,QWORD PTR [rsp+0x40]
    76e5:	mov    r15,QWORD PTR [rax+rsi*8]
    76e9:	mov    rax,QWORD PTR [r13+0x170]
    76f0:	mov    rdi,rax
    76f3:	mov    QWORD PTR [rsp+0x48],rax
    76f8:	mov    eax,DWORD PTR [r15]
    76fb:	add    eax,DWORD PTR [rdi+r10*1]
    76ff:	cmp    eax,0xc5219750
    7704:	jge    7708 <P7WeeViterbi+0x468>
    7706:	mov    eax,DWORD PTR [rcx]
    7708:	mov    rsi,QWORD PTR [rsp+0x18]
    770d:	mov    DWORD PTR [rcx],eax
    770f:	mov    rdi,QWORD PTR [r13+0x140]
    7716:	movsx  rsi,BYTE PTR [rsi+rbx*1]
    771b:	mov    QWORD PTR [rsp+0x78],rdi
    7720:	mov    rsi,QWORD PTR [rdi+rsi*8]
    7724:	mov    esi,DWORD PTR [rsi+r10*1]
    7728:	add    eax,esi
    772a:	cmp    esi,0xc521974f
    7730:	cmovne esi,eax
    7733:	mov    DWORD PTR [rcx],esi
    7735:	mov    ecx,DWORD PTR [rsp+0xc4]
    773c:	cmp    DWORD PTR [rsp],ecx
    773f:	jl     7933 <P7WeeViterbi+0x693>
    7745:	mov    rax,QWORD PTR [rsp+0x30]
    774a:	mov    rcx,QWORD PTR [rsp+0xb8]
    7752:	mov    QWORD PTR [rsp+0xa8],r12
    775a:	mov    QWORD PTR [rsp+0xa0],r10
    7762:	add    rax,rdx
    7765:	add    rcx,r12
    7768:	mov    QWORD PTR [rsp+0x80],rax
    7770:	mov    rax,QWORD PTR [rsp+0x20]
    7775:	add    rax,rdx
    7778:	add    rdx,QWORD PTR [rsp+0x38]
    777d:	mov    QWORD PTR [rsp+0x90],rdx
    7785:	mov    QWORD PTR [rsp+0x88],rax
    778d:	mov    rax,QWORD PTR [rsp+0xc8]
    7795:	nop    DWORD PTR [rax]
    7798:	mov    rsi,QWORD PTR [rsp+0x80]
    77a0:	lea    rdx,[rax*4+0x0]
    77a8:	mov    DWORD PTR [rcx],0xc521974f
    77ae:	mov    DWORD PTR [rsp+0xf4],eax
    77b5:	mov    rbp,QWORD PTR [rsi]
    77b8:	mov    rsi,QWORD PTR [r13+0x138]
    77bf:	mov    r10,QWORD PTR [rsi]
    77c2:	mov    edi,DWORD PTR [rbp+rdx*1-0x4]
    77c6:	add    edi,DWORD PTR [r10+rdx*1-0x4]
    77cb:	cmp    edi,0xc521974f
    77d1:	cmovle edi,r14d
    77d5:	mov    DWORD PTR [rcx],edi
    77d7:	mov    r10d,edi
    77da:	mov    rdi,QWORD PTR [rsp+0x88]
    77e2:	mov    r12,QWORD PTR [rsi+0x18]
    77e6:	mov    r11,QWORD PTR [rdi]
    77e9:	mov    edi,DWORD PTR [r11+rdx*1-0x4]
    77ee:	add    edi,DWORD PTR [r12+rdx*1-0x4]
    77f3:	cmp    edi,r10d
    77f6:	cmovl  edi,r10d
    77fa:	mov    r10,QWORD PTR [rsp+0x48]
    77ff:	mov    DWORD PTR [rcx],edi
    7801:	mov    r10d,DWORD PTR [r10+rax*4]
    7805:	add    r10d,DWORD PTR [r15]
    7808:	cmp    r10d,edi
    780b:	cmovl  r10d,edi
    780f:	mov    rdi,QWORD PTR [rsp+0x90]
    7817:	mov    DWORD PTR [rcx],r10d
    781a:	mov    r12,QWORD PTR [rdi]
    781d:	mov    rdi,QWORD PTR [rsi+0x28]
    7821:	mov    edi,DWORD PTR [rdi+rdx*1-0x4]
    7825:	add    edi,DWORD PTR [r12+rdx*1-0x4]
    782a:	cmp    edi,r10d
    782d:	mov    r12,QWORD PTR [rsp+0x78]
    7832:	cmovl  edi,r10d
    7836:	mov    r10,QWORD PTR [rsp+0x18]
    783b:	mov    DWORD PTR [rcx],edi
    783d:	movsx  r10,BYTE PTR [r10+rbx*1]
    7842:	mov    r10,QWORD PTR [r12+r10*8]
    7846:	mov    r10d,DWORD PTR [r10+rax*4]
    784a:	add    edi,r10d
    784d:	cmp    r10d,0xc521974f
    7854:	cmovne r10d,edi
    7858:	mov    DWORD PTR [rcx],r10d
    785b:	mov    DWORD PTR [r8+rax*4],0xc521974f
    7863:	cmp    DWORD PTR [r13+0x88],eax
    786a:	jle    78a2 <P7WeeViterbi+0x602>
    786c:	mov    rdi,QWORD PTR [rsi+0x10]
    7870:	mov    r10d,DWORD PTR [rcx-0x4]
    7874:	add    r10d,DWORD PTR [rdi+rdx*1-0x4]
    7879:	cmp    r10d,0xc521974f
    7880:	mov    edi,r10d
    7883:	mov    r10d,DWORD PTR [r8+rax*4-0x4]
    7888:	cmovle edi,r14d
    788c:	mov    DWORD PTR [r8+rax*4],edi
    7890:	mov    r12,QWORD PTR [rsi+0x30]
    7894:	add    r10d,DWORD PTR [r12+rdx*1-0x4]
    7899:	cmp    r10d,edi
    789c:	jle    78a2 <P7WeeViterbi+0x602>
    789e:	mov    DWORD PTR [r8+rax*4],r10d
    78a2:	mov    DWORD PTR [r9+rax*4],0xc521974f
    78aa:	cmp    DWORD PTR [r13+0x88],eax
    78b1:	jle    7912 <P7WeeViterbi+0x672>
    78b3:	mov    rdi,QWORD PTR [rsi+0x8]
    78b7:	mov    r10d,DWORD PTR [rbp+rdx*1+0x0]
    78bc:	add    r10d,DWORD PTR [rdi+rdx*1]
    78c0:	cmp    r10d,0xc521974f
    78c7:	mov    edi,r10d
    78ca:	cmovle edi,r14d
    78ce:	mov    DWORD PTR [r9+rax*4],edi
    78d2:	mov    rsi,QWORD PTR [rsi+0x20]
    78d6:	mov    r10d,DWORD PTR [r11+rdx*1]
    78da:	add    r10d,DWORD PTR [rsi+rdx*1]
    78de:	mov    rsi,QWORD PTR [rsp+0x18]
    78e3:	cmp    r10d,edi
    78e6:	cmovl  r10d,edi
    78ea:	mov    DWORD PTR [r9+rax*4],r10d
    78ee:	movsx  rdi,BYTE PTR [rsi+rbx*1]
    78f3:	mov    rsi,QWORD PTR [r13+0x148]
    78fa:	mov    rsi,QWORD PTR [rsi+rdi*8]
    78fe:	mov    edx,DWORD PTR [rsi+rdx*1]
    7901:	add    r10d,edx
    7904:	cmp    edx,0xc521974f
    790a:	cmove  r10d,r14d
    790e:	mov    DWORD PTR [r9+rax*4],r10d
    7912:	add    rax,0x1
    7916:	add    rcx,0x4
    791a:	cmp    DWORD PTR [rsp],eax
    791d:	jge    7798 <P7WeeViterbi+0x4f8>
    7923:	mov    r10,QWORD PTR [rsp+0xa0]
    792b:	mov    r12,QWORD PTR [rsp+0xa8]
    7933:	mov    rax,QWORD PTR [rsp+0x40]
    7938:	mov    r9d,DWORD PTR [rsp]
    793c:	mov    ecx,0xc521974f
    7941:	mov    rdi,QWORD PTR [rsp+0x98]
    7949:	mov    rsi,QWORD PTR [rsp+0xb0]
    7951:	mov    rdx,QWORD PTR [rax+rdi*8]
    7955:	mov    DWORD PTR [rdx+0x10],0xc521974f
    795c:	mov    eax,DWORD PTR [r13+0x154]
    7963:	add    eax,DWORD PTR [r15+0x10]
    7967:	mov    DWORD PTR [rdx+0x4],0xc521974f
    796e:	cmp    eax,0xc521974f
    7973:	cmovle eax,r14d
    7977:	mov    DWORD PTR [rdx+0x10],eax
    797a:	cmp    DWORD PTR [rsp+0x8],r9d
    797f:	jle    79a9 <P7WeeViterbi+0x709>
    7981:	jmp    79b2 <P7WeeViterbi+0x712>
    7983:	nop    DWORD PTR [rax+rax*1+0x0]
    7988:	mov    r8,QWORD PTR [r13+0x178]
    798f:	mov    edi,DWORD PTR [r12+rsi*4]
    7993:	add    edi,DWORD PTR [r8+rsi*4]
    7997:	cmp    edi,ecx
    7999:	jle    79a0 <P7WeeViterbi+0x700>
    799b:	mov    DWORD PTR [rdx+0x4],edi
    799e:	mov    ecx,edi
    79a0:	add    rsi,0x1
    79a4:	cmp    DWORD PTR [rsp],esi
    79a7:	jl     79b2 <P7WeeViterbi+0x712>
    79a9:	cmp    DWORD PTR [r13+0x88],esi
    79b0:	jge    7988 <P7WeeViterbi+0x6e8>
    79b2:	mov    DWORD PTR [rdx],0xc521974f
    79b8:	add    eax,DWORD PTR [r13+0x150]
    79bf:	cmp    eax,0xc521974f
    79c4:	mov    DWORD PTR [rdx+0x8],0xc521974f
    79cb:	cmovle eax,r14d
    79cf:	mov    DWORD PTR [rdx],eax
    79d1:	mov    eax,DWORD PTR [r13+0x164]
    79d8:	add    eax,DWORD PTR [r15+0x8]
    79dc:	cmp    eax,0xc521974f
    79e1:	cmovle eax,r14d
    79e5:	mov    DWORD PTR [rdx+0x8],eax
    79e8:	add    ecx,DWORD PTR [r13+0x158]
    79ef:	cmp    ecx,eax
    79f1:	cmovl  ecx,eax
    79f4:	add    rbx,0x1
    79f8:	mov    DWORD PTR [rdx+0x8],ecx
    79fb:	cmp    DWORD PTR [rsp+0x10],ebx
    79ff:	jge    7608 <P7WeeViterbi+0x368>
    7a05:	mov    esi,DWORD PTR [r13+0x88]
    7a0c:	xor    ecx,ecx
    7a0e:	xor    edx,edx
    7a10:	mov    edi,0x1
    7a15:	call   5350 <CreatePlan7Matrix>
    7a1a:	mov    ebx,DWORD PTR [rsp+0x28]
    7a1e:	mov    rcx,QWORD PTR [rax]
    7a21:	mov    r15,rax
    7a24:	mov    rax,QWORD PTR [rax+0x8]
    7a28:	mov    QWORD PTR [rsp+0x20],rax
    7a2d:	mov    rax,QWORD PTR [r15+0x10]
    7a31:	mov    QWORD PTR [rsp+0xa0],rcx
    7a39:	mov    QWORD PTR [rsp+0x30],rax
    7a3e:	mov    rax,QWORD PTR [r15+0x18]
    7a42:	mov    QWORD PTR [rsp+0x48],rax
    7a47:	mov    eax,ebx
    7a49:	shr    eax,0x1f
    7a4c:	lea    edx,[rbx+rax*1]
    7a4f:	and    edx,0x1
    7a52:	sub    edx,eax
    7a54:	movabs rax,0xc521974fc521974f
    7a5e:	movsxd rdx,edx
    7a61:	mov    rcx,QWORD PTR [rcx+rdx*8]
    7a65:	mov    QWORD PTR [rcx],rax
    7a68:	mov    eax,DWORD PTR [rsp]
    7a6b:	mov    DWORD PTR [rcx+0x10],0xc521974f
    7a72:	mov    DWORD PTR [rcx+0x8],0xc521974f
    7a79:	lea    edi,[rax+0x1]
    7a7c:	cmp    DWORD PTR [rsp+0x8],edi
    7a80:	jg     7ad4 <P7WeeViterbi+0x834>
    7a82:	mov    rax,QWORD PTR [rsp+0x48]
    7a87:	movsxd rsi,DWORD PTR [rsp+0x8]
    7a8c:	mov    r10,QWORD PTR [rax+rdx*8]
    7a90:	mov    rax,QWORD PTR [rsp+0x30]
    7a95:	sub    edi,esi
    7a97:	mov    r9,QWORD PTR [rax+rdx*8]
    7a9b:	mov    rax,QWORD PTR [rsp+0x20]
    7aa0:	mov    r8,QWORD PTR [rax+rdx*8]
    7aa4:	lea    rax,[rsi+0x1]
    7aa8:	add    rdi,rax
    7aab:	jmp    7ab4 <P7WeeViterbi+0x814>
    7aad:	nop    DWORD PTR [rax]
    7ab0:	add    rax,0x1
    7ab4:	mov    DWORD PTR [r10+rsi*4],0xc521974f
    7abc:	mov    DWORD PTR [r9+rsi*4],0xc521974f
    7ac4:	mov    DWORD PTR [r8+rsi*4],0xc521974f
    7acc:	mov    rsi,rax
    7acf:	cmp    rdi,rax
    7ad2:	jne    7ab0 <P7WeeViterbi+0x810>
    7ad4:	mov    eax,DWORD PTR [rsp+0x28]
    7ad8:	mov    r9,QWORD PTR [rsp+0x48]
    7add:	movsxd rsi,DWORD PTR [rsp]
    7ae1:	not    eax
    7ae3:	and    eax,0x1
    7ae6:	lea    rdi,[rsi+0x1]
    7aea:	mov    r8,QWORD PTR [r9+rax*8]
    7aee:	mov    r9,QWORD PTR [rsp+0x30]
    7af3:	lea    rbx,[rdi*4+0x0]
    7afb:	mov    DWORD PTR [r8+rdi*4],0xc521974f
    7b03:	mov    r8,QWORD PTR [r9+rax*8]
    7b07:	mov    r9,QWORD PTR [rsp+0x20]
    7b0c:	mov    DWORD PTR [r8+rdi*4],0xc521974f
    7b14:	mov    rax,QWORD PTR [r9+rax*8]
    7b18:	mov    DWORD PTR [rax+rdi*4],0xc521974f
    7b1f:	movzx  eax,BYTE PTR [rsp+0x62]
    7b24:	cmp    al,0x9
    7b26:	ja     7b40 <P7WeeViterbi+0x8a0>
    7b28:	lea    rdi,[rip+0x357d1]        # 3d300 <_IO_stdin_used+0x300>
    7b2f:	movsxd rax,DWORD PTR [rdi+rax*4]
    7b33:	add    rax,rdi
    7b36:	notrack jmp rax
    7b39:	nop    DWORD PTR [rax+0x0]
    7b40:	movsx  edi,BYTE PTR [rsp+0x62]
    7b45:	call   b100 <Statetype>
    7b4a:	lea    rdi,[rip+0x3570f]        # 3d260 <_IO_stdin_used+0x260>
    7b51:	mov    rsi,rax
    7b54:	xor    eax,eax
    7b56:	call   317f0 <Die>
    7b5b:	nop    DWORD PTR [rax+rax*1+0x0]
    7b60:	sub    rbx,0x4
    7b64:	mov    eax,DWORD PTR [rsp+0x28]
    7b68:	mov    QWORD PTR [rsp+0x90],rbx
    7b70:	mov    ebx,DWORD PTR [rsp+0x8]
    7b74:	sub    eax,0x1
    7b77:	sub    ebx,0x1
    7b7a:	movsxd rbp,eax
    7b7d:	mov    DWORD PTR [rsp+0x98],ebx
    7b84:	cmp    DWORD PTR [rsp+0x10],eax
    7b88:	jg     80c6 <P7WeeViterbi+0xe26>
    7b8e:	mov    QWORD PTR [rsp+0xa8],r15
    7b96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7ba0:	mov    edx,ebp
    7ba2:	mov    ecx,ebp
    7ba4:	mov    rbx,QWORD PTR [rsp+0xa0]
    7bac:	mov    esi,DWORD PTR [rsp]
    7baf:	shr    edx,0x1f
    7bb2:	not    ecx
    7bb4:	lea    eax,[rdx+rbp*1]
    7bb7:	and    ecx,0x1
    7bba:	and    eax,0x1
    7bbd:	mov    r9,QWORD PTR [rbx+rcx*8]
    7bc1:	sub    eax,edx
    7bc3:	cdqe   
    7bc5:	mov    rdx,QWORD PTR [rbx+rax*8]
    7bc9:	lea    r8,[rax*8+0x0]
    7bd1:	mov    ebx,DWORD PTR [rsp+0x8]
    7bd5:	lea    rax,[rcx*8+0x0]
    7bdd:	mov    QWORD PTR [rsp+0x78],rax
    7be2:	mov    DWORD PTR [rdx+0x8],0xc521974f
    7be9:	mov    eax,DWORD PTR [r13+0x164]
    7bf0:	add    eax,DWORD PTR [r9+0x8]
    7bf4:	mov    DWORD PTR [rdx],0xc521974f
    7bfa:	cmp    eax,0xc521974f
    7bff:	cmovle eax,r14d
    7c03:	mov    DWORD PTR [rdx+0x8],eax
    7c06:	cmp    ebx,esi
    7c08:	jg     8698 <P7WeeViterbi+0x13f8>
    7c0e:	mov    rsi,QWORD PTR [rsp+0x20]
    7c13:	mov    r10,QWORD PTR [r13+0x170]
    7c1a:	mov    r11,QWORD PTR [rsi+rcx*8]
    7c1e:	movsxd rsi,ebx
    7c21:	mov    ecx,0xc521974f
    7c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7c30:	mov    edi,DWORD PTR [r10+rsi*4]
    7c34:	add    edi,DWORD PTR [r11+rsi*4]
    7c38:	cmp    edi,ecx
    7c3a:	jle    7c40 <P7WeeViterbi+0x9a0>
    7c3c:	mov    DWORD PTR [rdx],edi
    7c3e:	mov    ecx,edi
    7c40:	add    rsi,0x1
    7c44:	cmp    DWORD PTR [rsp],esi
    7c47:	jge    7c30 <P7WeeViterbi+0x990>
    7c49:	mov    DWORD PTR [rdx+0x4],0xc521974f
    7c50:	add    eax,DWORD PTR [r13+0x158]
    7c57:	cmp    eax,0xc521974f
    7c5c:	mov    DWORD PTR [rdx+0x10],0xc521974f
    7c63:	mov    ebx,DWORD PTR [rsp]
    7c66:	cmovle eax,r14d
    7c6a:	mov    DWORD PTR [rdx+0x4],eax
    7c6d:	add    ecx,DWORD PTR [r13+0x150]
    7c74:	cmp    ecx,0xc521974f
    7c7a:	cmovle ecx,r14d
    7c7e:	mov    DWORD PTR [rdx+0x10],ecx
    7c81:	mov    eax,DWORD PTR [r13+0x154]
    7c88:	add    eax,DWORD PTR [r9+0x10]
    7c8c:	cmp    eax,ecx
    7c8e:	cmovge ecx,eax
    7c91:	mov    DWORD PTR [rdx+0x10],ecx
    7c94:	cmp    DWORD PTR [rsp+0x8],ebx
    7c98:	jg     80b0 <P7WeeViterbi+0xe10>
    7c9e:	mov    rax,QWORD PTR [rsp+0x20]
    7ca3:	mov    r10d,DWORD PTR [rsp]
    7ca7:	mov    DWORD PTR [rsp+0x88],ebp
    7cae:	mov    QWORD PTR [rsp+0x40],rdx
    7cb3:	add    rax,r8
    7cb6:	mov    QWORD PTR [rsp+0x80],rax
    7cbe:	mov    rax,QWORD PTR [rsp+0x48]
    7cc3:	lea    r15,[rax+r8*1]
    7cc7:	add    r8,QWORD PTR [rsp+0x30]
    7ccc:	mov    rax,QWORD PTR [rsp+0x90]
    7cd4:	mov    QWORD PTR [rsp+0x38],r8
    7cd9:	jmp    7e46 <P7WeeViterbi+0xba6>
    7cde:	xchg   ax,ax
    7ce0:	mov    rdi,QWORD PTR [r13+0x178]
    7ce7:	mov    rbx,QWORD PTR [rsp+0x40]
    7cec:	mov    DWORD PTR [rcx],0xc521974f
    7cf2:	lea    r9,[rax+0x4]
    7cf6:	mov    r12,QWORD PTR [rsp+0x78]
    7cfb:	mov    esi,DWORD PTR [rbx+0x4]
    7cfe:	add    esi,DWORD PTR [rdi+rax*1]
    7d01:	cmp    esi,0xc521974f
    7d07:	mov    rbx,QWORD PTR [rsp+0x20]
    7d0c:	cmovle esi,r14d
    7d10:	mov    DWORD PTR [rcx],esi
    7d12:	mov    rdi,QWORD PTR [r13+0x138]
    7d19:	mov    r8d,esi
    7d1c:	mov    r11,QWORD PTR [rbx+r12*1]
    7d20:	mov    rbx,QWORD PTR [rdi]
    7d23:	add    r11,r9
    7d26:	mov    esi,DWORD PTR [r11]
    7d29:	add    esi,DWORD PTR [rbx+rax*1]
    7d2c:	cmp    esi,r8d
    7d2f:	cmovl  esi,r8d
    7d33:	mov    r8,QWORD PTR [rsp+0x30]
    7d38:	mov    DWORD PTR [rcx],esi
    7d3a:	mov    rbx,QWORD PTR [r8+r12*1]
    7d3e:	mov    r8,QWORD PTR [rdi+0x8]
    7d42:	add    rbx,rax
    7d45:	mov    r12d,DWORD PTR [rbx]
    7d48:	add    r12d,DWORD PTR [r8+rax*1]
    7d4c:	cmp    r12d,esi
    7d4f:	cmovge esi,r12d
    7d53:	mov    DWORD PTR [rcx],esi
    7d55:	mov    r8,QWORD PTR [r15]
    7d58:	mov    rdx,QWORD PTR [rdi+0x10]
    7d5c:	add    r9,r8
    7d5f:	mov    r12d,DWORD PTR [r9]
    7d62:	add    r12d,DWORD PTR [rdx+rax*1]
    7d66:	cmp    r12d,esi
    7d69:	cmovge esi,r12d
    7d6d:	mov    DWORD PTR [rcx],esi
    7d6f:	cmp    DWORD PTR [rsp+0x10],ebp
    7d73:	je     7d90 <P7WeeViterbi+0xaf0>
    7d75:	mov    rdx,QWORD PTR [rsp+0x18]
    7d7a:	movsx  r12,BYTE PTR [rdx+rbp*1]
    7d7f:	mov    rdx,QWORD PTR [r13+0x140]
    7d86:	mov    r12,QWORD PTR [rdx+r12*8]
    7d8a:	add    esi,DWORD PTR [r12+rax*1]
    7d8e:	mov    DWORD PTR [rcx],esi
    7d90:	mov    rsi,QWORD PTR [rdi+0x28]
    7d94:	add    r8,rax
    7d97:	mov    edx,DWORD PTR [rsp+0x88]
    7d9e:	mov    DWORD PTR [r8],0xc521974f
    7da5:	mov    ecx,DWORD PTR [r11]
    7da8:	add    ecx,DWORD PTR [rsi+rax*1]
    7dab:	cmp    ecx,0xc521974f
    7db1:	cmovle ecx,r14d
    7db5:	mov    DWORD PTR [r8],ecx
    7db8:	mov    rsi,QWORD PTR [rdi+0x30]
    7dbc:	mov    r9d,DWORD PTR [r9]
    7dbf:	add    r9d,DWORD PTR [rsi+rax*1]
    7dc3:	mov    rsi,QWORD PTR [rsp+0x38]
    7dc8:	cmp    r9d,ecx
    7dcb:	cmovl  r9d,ecx
    7dcf:	mov    DWORD PTR [r8],r9d
    7dd2:	mov    rcx,QWORD PTR [rsi]
    7dd5:	mov    rsi,QWORD PTR [rdi+0x18]
    7dd9:	add    rcx,rax
    7ddc:	mov    DWORD PTR [rcx],0xc521974f
    7de2:	mov    r8d,DWORD PTR [r11]
    7de5:	add    r8d,DWORD PTR [rsi+rax*1]
    7de9:	cmp    r8d,0xc521974f
    7df0:	mov    esi,r8d
    7df3:	cmovle esi,r14d
    7df7:	mov    DWORD PTR [rcx],esi
    7df9:	mov    rdi,QWORD PTR [rdi+0x20]
    7dfd:	mov    r8d,DWORD PTR [rbx]
    7e00:	add    r8d,DWORD PTR [rdi+rax*1]
    7e04:	cmp    r8d,esi
    7e07:	cmovl  r8d,esi
    7e0b:	mov    DWORD PTR [rcx],r8d
    7e0e:	cmp    DWORD PTR [rsp+0x10],edx
    7e12:	je     7e30 <P7WeeViterbi+0xb90>
    7e14:	mov    rbx,QWORD PTR [rsp+0x18]
    7e19:	mov    rsi,QWORD PTR [r13+0x148]
    7e20:	movsx  rdi,BYTE PTR [rbx+rbp*1]
    7e25:	mov    rsi,QWORD PTR [rsi+rdi*8]
    7e29:	add    r8d,DWORD PTR [rsi+rax*1]
    7e2d:	mov    DWORD PTR [rcx],r8d
    7e30:	sub    r10d,0x1
    7e34:	sub    rax,0x4
    7e38:	cmp    r10d,DWORD PTR [rsp+0x98]
    7e40:	je     80b0 <P7WeeViterbi+0xe10>
    7e46:	mov    rbx,QWORD PTR [rsp+0x80]
    7e4e:	mov    rcx,QWORD PTR [rbx]
    7e51:	add    rcx,rax
    7e54:	cmp    DWORD PTR [r13+0x88],r10d
    7e5b:	jne    7ce0 <P7WeeViterbi+0xa40>
    7e61:	mov    rbx,QWORD PTR [rsp+0x40]
    7e66:	mov    esi,DWORD PTR [rbx+0x4]
    7e69:	mov    rbx,QWORD PTR [rsp+0x38]
    7e6e:	mov    DWORD PTR [rcx],esi
    7e70:	mov    rsi,QWORD PTR [r15]
    7e73:	mov    DWORD PTR [rsi+rax*1],0xc521974f
    7e7a:	mov    rsi,QWORD PTR [rbx]
    7e7d:	mov    DWORD PTR [rsi+rax*1],0xc521974f
    7e84:	cmp    DWORD PTR [rsp+0x10],ebp
    7e88:	je     7e30 <P7WeeViterbi+0xb90>
    7e8a:	mov    rbx,QWORD PTR [rsp+0x18]
    7e8f:	mov    rsi,QWORD PTR [r13+0x140]
    7e96:	movsx  rdi,BYTE PTR [rbx+rbp*1]
    7e9b:	mov    rsi,QWORD PTR [rsi+rdi*8]
    7e9f:	mov    esi,DWORD PTR [rsi+rax*1]
    7ea2:	add    DWORD PTR [rcx],esi
    7ea4:	jmp    7e30 <P7WeeViterbi+0xb90>
    7ea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7eb0:	mov    rax,QWORD PTR [rsp+0x30]
    7eb5:	movsxd r11,DWORD PTR [rsp+0x8]
    7eba:	lea    r9,[rax+r12*1]
    7ebe:	mov    rax,r11
    7ec1:	mov    rdx,QWORD PTR [r9]
    7ec4:	add    eax,0x1
    7ec7:	mov    DWORD PTR [rdx+r11*4],0x0
    7ecf:	cmp    DWORD PTR [rsp],eax
    7ed2:	jl     7f49 <P7WeeViterbi+0xca9>
    7ed4:	mov    esi,DWORD PTR [rsp]
    7ed7:	mov    rcx,QWORD PTR [rsp+0x38]
    7edc:	cdqe   
    7ede:	shl    rax,0x2
    7ee2:	sub    esi,0x1
    7ee5:	sub    esi,DWORD PTR [rsp+0x8]
    7ee9:	add    rcx,r12
    7eec:	lea    r10,[r11+rsi*1+0x2]
    7ef1:	shl    r10,0x2
    7ef5:	nop    DWORD PTR [rax]
    7ef8:	mov    r8,QWORD PTR [r13+0x138]
    7eff:	mov    rsi,QWORD PTR [rcx]
    7f02:	mov    r12,QWORD PTR [r8+0x10]
    7f06:	lea    rdi,[rsi+rax*1]
    7f0a:	mov    DWORD PTR [rdi],0xc521974f
    7f10:	mov    edx,DWORD PTR [rdx+rax*1-0x4]
    7f14:	add    edx,DWORD PTR [r12+rax*1-0x4]
    7f19:	cmp    edx,0xc521974f
    7f1f:	cmovle edx,r14d
    7f23:	mov    DWORD PTR [rdi],edx
    7f25:	mov    r8,QWORD PTR [r8+0x30]
    7f29:	mov    esi,DWORD PTR [rsi+rax*1-0x4]
    7f2d:	add    esi,DWORD PTR [r8+rax*1-0x4]
    7f32:	cmp    esi,edx
    7f34:	cmovge edx,esi
    7f37:	add    rax,0x4
    7f3b:	mov    DWORD PTR [rdi],edx
    7f3d:	mov    rdx,QWORD PTR [r9]
    7f40:	cmp    r10,rax
    7f43:	jne    7ef8 <P7WeeViterbi+0xc58>
    7f45:	mov    rcx,QWORD PTR [rbp+0x0]
    7f49:	mov    rdi,QWORD PTR [r13+0x178]
    7f50:	mov    DWORD PTR [rcx+0x4],0xc521974f
    7f57:	mov    rsi,rcx
    7f5a:	mov    eax,DWORD PTR [rdx+r11*4]
    7f5e:	mov    edx,DWORD PTR [rcx+0x10]
    7f61:	add    eax,DWORD PTR [rdi+r11*4]
    7f65:	cmp    eax,0xc5219750
    7f6a:	jl     8818 <P7WeeViterbi+0x1578>
    7f70:	mov    DWORD PTR [rcx+0x4],eax
    7f73:	jmp    758c <P7WeeViterbi+0x2ec>
    7f78:	nop    DWORD PTR [rax+rax*1+0x0]
    7f80:	mov    rdi,QWORD PTR [rsp+0x20]
    7f85:	movsxd rax,DWORD PTR [rsp+0x8]
    7f8a:	mov    rdx,QWORD PTR [rdi+r12*1]
    7f8e:	mov    DWORD PTR [rdx+rax*4],0x0
    7f95:	mov    edx,DWORD PTR [rcx+0x10]
    7f98:	mov    eax,DWORD PTR [rcx+0x4]
    7f9b:	jmp    758c <P7WeeViterbi+0x2ec>
    7fa0:	mov    edx,DWORD PTR [rcx+0x10]
    7fa3:	mov    eax,DWORD PTR [rcx+0x4]
    7fa6:	mov    DWORD PTR [rcx+0x8],0x0
    7fad:	jmp    758c <P7WeeViterbi+0x2ec>
    7fb2:	nop    WORD PTR [rax+rax*1+0x0]
    7fb8:	mov    eax,DWORD PTR [r13+0x160]
    7fbf:	mov    r9d,DWORD PTR [rsp]
    7fc3:	mov    DWORD PTR [rcx+0x8],eax
    7fc6:	add    eax,DWORD PTR [r13+0x158]
    7fcd:	mov    DWORD PTR [rcx+0x4],eax
    7fd0:	cmp    DWORD PTR [rsp+0x8],r9d
    7fd5:	jg     7b60 <P7WeeViterbi+0x8c0>
    7fdb:	mov    rdi,QWORD PTR [rsp+0x20]
    7fe0:	mov    r8d,DWORD PTR [rsp]
    7fe4:	sub    r8d,DWORD PTR [rsp+0x8]
    7fe9:	mov    r10,QWORD PTR [r13+0x178]
    7ff0:	sub    rsi,r8
    7ff3:	mov    rdi,QWORD PTR [rdi+rdx*8]
    7ff7:	mov    ebp,DWORD PTR [rsp+0x10]
    7ffb:	lea    rdx,[rbx-0x4]
    7fff:	mov    r11,QWORD PTR [rsp+0x108]
    8007:	mov    r12,QWORD PTR [rsp+0x18]
    800c:	shl    rsi,0x2
    8010:	jmp    801e <P7WeeViterbi+0xd7e>
    8012:	nop    WORD PTR [rax+rax*1+0x0]
    8018:	mov    eax,DWORD PTR [rcx+0x4]
    801b:	mov    rdx,r8
    801e:	add    eax,DWORD PTR [r10+rdx*1]
    8022:	mov    DWORD PTR [rdi+rdx*1],eax
    8025:	cmp    DWORD PTR [rsp+0x28],ebp
    8029:	je     8042 <P7WeeViterbi+0xda2>
    802b:	movsx  r9,BYTE PTR [r12+r11*1]
    8030:	mov    r8,QWORD PTR [r13+0x140]
    8037:	mov    r8,QWORD PTR [r8+r9*8]
    803b:	add    eax,DWORD PTR [r8+rdx*1]
    803f:	mov    DWORD PTR [rdi+rdx*1],eax
    8042:	lea    r8,[rdx-0x4]
    8046:	cmp    rsi,rdx
    8049:	jne    8018 <P7WeeViterbi+0xd78>
    804b:	jmp    7b60 <P7WeeViterbi+0x8c0>
    8050:	mov    DWORD PTR [rcx+0x8],0x0
    8057:	jmp    7b60 <P7WeeViterbi+0x8c0>
    805c:	nop    DWORD PTR [rax+0x0]
    8060:	mov    DWORD PTR [rcx+0x10],0x0
    8067:	jmp    7b60 <P7WeeViterbi+0x8c0>
    806c:	nop    DWORD PTR [rax+0x0]
    8070:	mov    rax,QWORD PTR [rsp+0x30]
    8075:	mov    rax,QWORD PTR [rax+rdx*8]
    8079:	mov    DWORD PTR [rax+rbx*1-0x4],0x0
    8081:	jmp    7b60 <P7WeeViterbi+0x8c0>
    8086:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8090:	mov    rax,QWORD PTR [rsp+0x20]
    8095:	mov    rax,QWORD PTR [rax+rdx*8]
    8099:	mov    DWORD PTR [rax+rbx*1-0x4],0x0
    80a1:	jmp    7b60 <P7WeeViterbi+0x8c0>
    80a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    80b0:	sub    rbp,0x1
    80b4:	cmp    DWORD PTR [rsp+0x10],ebp
    80b8:	jle    7ba0 <P7WeeViterbi+0x900>
    80be:	mov    r15,QWORD PTR [rsp+0xa8]
    80c6:	mov    ebx,DWORD PTR [rsp+0x10]
    80ca:	mov    ebp,0xc521974f
    80cf:	mov    eax,ebx
    80d1:	shr    eax,0x1f
    80d4:	lea    edx,[rbx+rax*1]
    80d7:	mov    ebx,DWORD PTR [rsp]
    80da:	and    edx,0x1
    80dd:	sub    edx,eax
    80df:	movsxd rdx,edx
    80e2:	cmp    DWORD PTR [rsp+0x8],ebx
    80e6:	jg     8174 <P7WeeViterbi+0xed4>
    80ec:	mov    rbx,QWORD PTR [rsp+0x50]
    80f1:	mov    r12d,DWORD PTR [rsp]
    80f5:	mov    ebp,0xc521974f
    80fa:	mov    r10d,DWORD PTR [rsp+0xc0]
    8102:	movzx  r11d,BYTE PTR [rsp+0x5b]
    8108:	mov    rax,QWORD PTR [rbx+0x8]
    810c:	mov    r9,QWORD PTR [rax+rdx*8]
    8110:	mov    rax,QWORD PTR [r15+0x8]
    8114:	mov    r8,QWORD PTR [rax+rdx*8]
    8118:	mov    rax,QWORD PTR [rbx+0x10]
    811c:	mov    rdi,QWORD PTR [rax+rdx*8]
    8120:	mov    rax,QWORD PTR [r15+0x10]
    8124:	mov    rsi,QWORD PTR [rax+rdx*8]
    8128:	movsxd rax,DWORD PTR [rsp+0x8]
    812d:	nop    DWORD PTR [rax]
    8130:	mov    ecx,DWORD PTR [r8+rax*4]
    8134:	add    ecx,DWORD PTR [r9+rax*4]
    8138:	mov    ebx,eax
    813a:	cmp    ecx,ebp
    813c:	jle    8149 <P7WeeViterbi+0xea9>
    813e:	mov    ebp,ecx
    8140:	mov    r10d,eax
    8143:	mov    r11d,0x1
    8149:	mov    ecx,DWORD PTR [rsi+rax*4]
    814c:	add    ecx,DWORD PTR [rdi+rax*4]
    814f:	cmp    ecx,ebp
    8151:	jle    815e <P7WeeViterbi+0xebe>
    8153:	mov    ebp,ecx
    8155:	mov    r10d,ebx
    8158:	mov    r11d,0x3
    815e:	add    rax,0x1
    8162:	cmp    r12d,eax
    8165:	jge    8130 <P7WeeViterbi+0xe90>
    8167:	mov    DWORD PTR [rsp+0xc0],r10d
    816f:	mov    BYTE PTR [rsp+0x5b],r11b
    8174:	mov    rax,QWORD PTR [rsp+0x50]
    8179:	mov    rcx,QWORD PTR [r15]
    817c:	mov    rax,QWORD PTR [rax]
    817f:	mov    rcx,QWORD PTR [rcx+rdx*8]
    8183:	mov    rax,QWORD PTR [rax+rdx*8]
    8187:	mov    edx,DWORD PTR [rcx+0x10]
    818a:	add    edx,DWORD PTR [rax+0x10]
    818d:	cmp    edx,ebp
    818f:	jle    81a3 <P7WeeViterbi+0xf03>
    8191:	mov    BYTE PTR [rsp+0x5b],0x5
    8196:	mov    ebp,edx
    8198:	mov    DWORD PTR [rsp+0xc0],0x1
    81a3:	mov    r12d,DWORD PTR [rcx+0x8]
    81a7:	add    r12d,DWORD PTR [rax+0x8]
    81ab:	cmp    r12d,ebp
    81ae:	jle    86a8 <P7WeeViterbi+0x1408>
    81b4:	mov    rdi,QWORD PTR [rsp+0x50]
    81b9:	mov    ebx,DWORD PTR [r13+0x88]
    81c0:	call   5810 <FreePlan7Matrix>
    81c5:	mov    rdi,r15
    81c8:	call   5810 <FreePlan7Matrix>
    81cd:	mov    edi,r12d
    81d0:	call   17820 <Scorify>
    81d5:	mov    rax,QWORD PTR [rsp+0x68]
    81da:	cmp    BYTE PTR [rsp+0x63],0x4
    81df:	mov    BYTE PTR [rsp+0x5b],0x8
    81e4:	sete   dl
    81e7:	cmp    BYTE PTR [rsp+0x62],0x9
    81ec:	mov    DWORD PTR [rax],ebx
    81ee:	mov    rax,QWORD PTR [rsp+0x70]
    81f3:	mov    ecx,edx
    81f5:	mov    BYTE PTR [rax],0x8
    81f8:	sete   al
    81fb:	and    cl,al
    81fd:	je     820c <P7WeeViterbi+0xf6c>
    81ff:	movss  DWORD PTR [rsp+0x110],xmm0
    8208:	mov    eax,ecx
    820a:	mov    edx,ecx
    820c:	mov    ecx,DWORD PTR [rsp+0x10]
    8210:	sub    ecx,DWORD PTR [rsp+0x64]
    8214:	cmp    ecx,0x1
    8217:	jle    87e0 <P7WeeViterbi+0x1540>
    821d:	mov    rbx,QWORD PTR [rsp+0xf8]
    8225:	mov    ecx,DWORD PTR [rsp+0x64]
    8229:	mov    DWORD PTR [rbx],ecx
    822b:	mov    rbx,QWORD PTR [rsp+0x100]
    8233:	mov    ecx,DWORD PTR [rsp+0x10]
    8237:	mov    DWORD PTR [rbx],ecx
    8239:	mov    ebx,DWORD PTR [rsp+0x5c]
    823d:	mov    DWORD PTR [rsp+0xf0],ebx
    8244:	cmp    BYTE PTR [rsp+0x5b],0x8
    8249:	jne    8709 <P7WeeViterbi+0x1469>
    824f:	movsxd rax,DWORD PTR [rsp+0x10]
    8254:	cmp    DWORD PTR [rsp+0x28],eax
    8258:	jl     8286 <P7WeeViterbi+0xfe6>
    825a:	mov    rcx,QWORD PTR [rsp+0xd8]
    8262:	mov    rsi,QWORD PTR [rsp+0xd0]
    826a:	mov    edi,DWORD PTR [rsp+0x28]
    826e:	xchg   ax,ax
    8270:	mov    edx,DWORD PTR [r13+0x88]
    8277:	mov    DWORD PTR [rcx+rax*4],edx
    827a:	mov    BYTE PTR [rsi+rax*1],0x8
    827e:	add    rax,0x1
    8282:	cmp    edi,eax
    8284:	jge    8270 <P7WeeViterbi+0xfd0>
    8286:	mov    eax,DWORD PTR [rsp+0xf0]
    828d:	mov    DWORD PTR [rsp+0x5c],eax
    8291:	nop    DWORD PTR [rax+0x0]
    8298:	cmp    DWORD PTR [rsp+0x5c],0xffffffff
    829d:	jne    73c8 <P7WeeViterbi+0x128>
    82a3:	mov    eax,DWORD PTR [rsp+0x114]
    82aa:	lea    edi,[rax+0x6]
    82ad:	cmp    eax,0x1
    82b0:	jle    8328 <P7WeeViterbi+0x1088>
    82b2:	lea    ecx,[rax-0x2]
    82b5:	mov    r8,QWORD PTR [rsp+0xd8]
    82bd:	mov    rsi,QWORD PTR [rsp+0xd0]
    82c5:	mov    eax,0x2
    82ca:	add    rcx,0x3
    82ce:	jmp    82f1 <P7WeeViterbi+0x1051>
    82d0:	cmp    dl,0x5
    82d3:	jne    82e8 <P7WeeViterbi+0x1048>
    82d5:	cmp    BYTE PTR [rsi+rax*1],0x1
    82d9:	jne    82e8 <P7WeeViterbi+0x1048>
    82db:	mov    edx,DWORD PTR [r8+rax*4]
    82df:	lea    edi,[rdi+rdx*1-0x1]
    82e3:	nop    DWORD PTR [rax+rax*1+0x0]
    82e8:	add    rax,0x1
    82ec:	cmp    rcx,rax
    82ef:	je     8328 <P7WeeViterbi+0x1088>
    82f1:	movzx  edx,BYTE PTR [rsi+rax*1-0x1]
    82f6:	cmp    dl,0x1
    82f9:	jne    82d0 <P7WeeViterbi+0x1030>
    82fb:	movzx  edx,BYTE PTR [rsi+rax*1]
    82ff:	cmp    dl,0x1
    8302:	je     88e8 <P7WeeViterbi+0x1648>
    8308:	cmp    dl,0x8
    830b:	jne    82e8 <P7WeeViterbi+0x1048>
    830d:	add    edi,DWORD PTR [r13+0x88]
    8314:	sub    edi,DWORD PTR [r8+rax*4-0x4]
    8319:	add    rax,0x1
    831d:	cmp    rcx,rax
    8320:	jne    82f1 <P7WeeViterbi+0x1051>
    8322:	nop    WORD PTR [rax+rax*1+0x0]
    8328:	mov    rax,QWORD PTR [rsp+0xd0]
    8330:	cmp    BYTE PTR [rax+0x1],0x1
    8334:	jne    8345 <P7WeeViterbi+0x10a5>
    8336:	mov    rax,QWORD PTR [rsp+0xd8]
    833e:	mov    eax,DWORD PTR [rax+0x4]
    8341:	lea    edi,[rdi+rax*1-0x1]
    8345:	mov    rax,QWORD PTR [rsp+0x118]
    834d:	cmp    BYTE PTR [rax],0x1
    8350:	jne    8363 <P7WeeViterbi+0x10c3>
    8352:	mov    rax,QWORD PTR [rsp+0x128]
    835a:	add    edi,DWORD PTR [r13+0x88]
    8361:	sub    edi,DWORD PTR [rax]
    8363:	lea    rsi,[rsp+0x130]
    836b:	call   209f0 <P7AllocTrace>
    8370:	mov    rax,QWORD PTR [rsp+0x130]
    8378:	mov    ebx,DWORD PTR [rsp+0x114]
    837f:	mov    rax,QWORD PTR [rax+0x8]
    8383:	mov    BYTE PTR [rax],0x4
    8386:	mov    rax,QWORD PTR [rsp+0x130]
    838e:	mov    rdx,QWORD PTR [rax+0x10]
    8392:	mov    DWORD PTR [rdx],0x0
    8398:	mov    rdx,QWORD PTR [rax+0x18]
    839c:	mov    rax,QWORD PTR [rax+0x8]
    83a0:	mov    DWORD PTR [rdx],0x0
    83a6:	mov    BYTE PTR [rax+0x1],0x5
    83aa:	mov    rax,QWORD PTR [rsp+0x130]
    83b2:	mov    rdx,QWORD PTR [rax+0x10]
    83b6:	mov    DWORD PTR [rdx+0x4],0x0
    83bd:	mov    rdx,QWORD PTR [rax+0x18]
    83c1:	mov    DWORD PTR [rdx+0x4],0x0
    83c8:	test   ebx,ebx
    83ca:	jle    8b82 <P7WeeViterbi+0x18e2>
    83d0:	lea    ecx,[rbx-0x1]
    83d3:	mov    r10,r13
    83d6:	mov    ebx,0x1
    83db:	mov    r11d,0x2
    83e1:	mov    r9,QWORD PTR [rsp+0xd8]
    83e9:	mov    r8,QWORD PTR [rsp+0xd0]
    83f1:	add    rcx,0x2
    83f5:	mov    r14d,r11d
    83f8:	jmp    8451 <P7WeeViterbi+0x11b1>
    83fa:	nop    WORD PTR [rax+rax*1+0x0]
    8400:	cmp    dil,0x3
    8404:	jne    88a0 <P7WeeViterbi+0x1600>
    840a:	mov    rax,QWORD PTR [rsp+0x130]
    8412:	mov    rax,QWORD PTR [rax+0x8]
    8416:	mov    BYTE PTR [rax+rbp*1],0x3
    841a:	mov    rax,QWORD PTR [rsp+0x130]
    8422:	mov    esi,DWORD PTR [r9+rbx*4]
    8426:	mov    rdx,QWORD PTR [rax+0x10]
    842a:	mov    DWORD PTR [rdx+r12*1],esi
    842e:	mov    rax,QWORD PTR [rax+0x18]
    8432:	lea    edx,[r14+0x2]
    8436:	movsxd rbp,r15d
    8439:	mov    r14d,r15d
    843c:	mov    DWORD PTR [rax+r12*1],ebx
    8440:	add    r12,0x4
    8444:	add    rbx,0x1
    8448:	cmp    rcx,rbx
    844b:	je     85f0 <P7WeeViterbi+0x1350>
    8451:	movsx  edi,BYTE PTR [r8+rbx*1]
    8456:	movsxd rbp,r14d
    8459:	lea    r15d,[r14+0x1]
    845d:	mov    esi,ebx
    845f:	lea    r12,[rbp*4+0x0]
    8467:	mov    r13d,r15d
    846a:	cmp    dil,0x5
    846e:	je     8860 <P7WeeViterbi+0x15c0>
    8474:	jg     8828 <P7WeeViterbi+0x1588>
    847a:	cmp    dil,0x1
    847e:	jne    8400 <P7WeeViterbi+0x1160>
    8480:	mov    rax,QWORD PTR [rsp+0x130]
    8488:	lea    rdi,[r12+0x4]
    848d:	lea    edx,[r14+0x2]
    8491:	mov    rax,QWORD PTR [rax+0x8]
    8495:	movzx  r11d,BYTE PTR [rax+rbp*1-0x1]
    849b:	add    rax,rbp
    849e:	movsxd rbp,r15d
    84a1:	cmp    r11b,0x5
    84a5:	je     8a20 <P7WeeViterbi+0x1780>
    84ab:	mov    BYTE PTR [rax],0x1
    84ae:	mov    rax,QWORD PTR [rsp+0x130]
    84b6:	mov    r14d,DWORD PTR [r9+rbx*4]
    84ba:	mov    r11,QWORD PTR [rax+0x10]
    84be:	mov    DWORD PTR [r11+r12*1],r14d
    84c2:	mov    r11,QWORD PTR [rax+0x18]
    84c6:	mov    DWORD PTR [r11+r12*1],esi
    84ca:	cmp    DWORD PTR [rsp+0x114],ebx
    84d1:	jle    8970 <P7WeeViterbi+0x16d0>
    84d7:	movzx  esi,BYTE PTR [r8+rbx*1+0x1]
    84dd:	cmp    sil,0x1
    84e1:	je     8990 <P7WeeViterbi+0x16f0>
    84e7:	mov    r12,rdi
    84ea:	mov    r14d,r13d
    84ed:	cmp    sil,0x8
    84f1:	jne    8444 <P7WeeViterbi+0x11a4>
    84f7:	movsxd rsi,DWORD PTR [r9+rbx*4-0x4]
    84fc:	mov    rax,QWORD PTR [r10+0xd8]
    8503:	mov    DWORD PTR [rsp+0x20],edx
    8507:	movss  xmm1,DWORD PTR [rip+0x34e8d]        # 3d39c <_IO_stdin_used+0x39c>
    850f:	mov    QWORD PTR [rsp+0x18],rcx
    8514:	movss  xmm0,DWORD PTR [rax+rsi*4]
    8519:	mov    QWORD PTR [rsp+0x10],r8
    851e:	mov    QWORD PTR [rsp+0x8],r9
    8523:	mov    QWORD PTR [rsp],r10
    8527:	call   17710 <Prob2Score>
    852c:	mov    r9,QWORD PTR [rsp+0x8]
    8531:	mov    r10,QWORD PTR [rsp]
    8535:	pxor   xmm0,xmm0
    8539:	cvtsi2sd xmm0,eax
    853d:	pxor   xmm1,xmm1
    8541:	mov    r8,QWORD PTR [rsp+0x10]
    8546:	addsd  xmm0,QWORD PTR [rip+0x34e32]        # 3d380 <_IO_stdin_used+0x380>
    854e:	movsxd rsi,DWORD PTR [r9+rbx*4-0x4]
    8553:	mov    rax,QWORD PTR [r10+0x178]
    855a:	mov    rcx,QWORD PTR [rsp+0x18]
    855f:	mov    edx,DWORD PTR [rsp+0x20]
    8563:	cvtsi2sd xmm1,DWORD PTR [rax+rsi*4]
    8568:	mov    rsi,QWORD PTR [rsp+0x130]
    8570:	comisd xmm1,xmm0
    8574:	jae    8b10 <P7WeeViterbi+0x1870>
    857a:	mov    rax,QWORD PTR [rsi+0x8]
    857e:	movsxd rdx,edx
    8581:	lea    r14d,[r13+0x2]
    8585:	add    rbx,0x1
    8589:	mov    BYTE PTR [rax+rbp*1],0x7
    858d:	mov    rax,QWORD PTR [rsp+0x130]
    8595:	movsxd rbp,r14d
    8598:	mov    rsi,QWORD PTR [rax+0x10]
    859c:	mov    DWORD PTR [rsi+r12*1],0x0
    85a4:	mov    rsi,QWORD PTR [rax+0x18]
    85a8:	mov    rax,QWORD PTR [rax+0x8]
    85ac:	mov    DWORD PTR [rsi+r12*1],0x0
    85b4:	lea    r12,[rbp*4+0x0]
    85bc:	mov    BYTE PTR [rax+rdx*1],0x8
    85c0:	mov    rax,QWORD PTR [rsp+0x130]
    85c8:	mov    rsi,QWORD PTR [rax+0x10]
    85cc:	mov    rax,QWORD PTR [rax+0x18]
    85d0:	mov    DWORD PTR [rsi+rdx*4],0x0
    85d7:	mov    DWORD PTR [rax+rdx*4],0x0
    85de:	lea    edx,[r13+0x3]
    85e2:	cmp    rcx,rbx
    85e5:	jne    8451 <P7WeeViterbi+0x11b1>
    85eb:	nop    DWORD PTR [rax+rax*1+0x0]
    85f0:	mov    rax,QWORD PTR [rsp+0x130]
    85f8:	mov    rax,QWORD PTR [rax+0x8]
    85fc:	mov    rbx,QWORD PTR [rsp+0x120]
    8604:	mov    rdi,QWORD PTR [rsp+0xd8]
    860c:	mov    BYTE PTR [rax+rbp*1],0x9
    8610:	mov    rax,QWORD PTR [rsp+0x130]
    8618:	mov    rcx,QWORD PTR [rax+0x10]
    861c:	mov    DWORD PTR [rcx+r12*1],0x0
    8624:	mov    rcx,QWORD PTR [rax+0x18]
    8628:	mov    DWORD PTR [rcx+r12*1],0x0
    8630:	mov    DWORD PTR [rax],edx
    8632:	mov    QWORD PTR [rbx],rax
    8635:	call   3460 <free@plt>
    863a:	mov    rdi,QWORD PTR [rsp+0xd0]
    8642:	call   3460 <free@plt>
    8647:	mov    rdi,QWORD PTR [rsp+0xe8]
    864f:	call   3460 <free@plt>
    8654:	mov    rdi,QWORD PTR [rsp+0xe0]
    865c:	call   3460 <free@plt>
    8661:	mov    rax,QWORD PTR [rsp+0x138]
    8669:	xor    rax,QWORD PTR fs:0x28
    8672:	jne    8c3a <P7WeeViterbi+0x199a>
    8678:	movss  xmm0,DWORD PTR [rsp+0x110]
    8681:	add    rsp,0x148
    8688:	pop    rbx
    8689:	pop    rbp
    868a:	pop    r12
    868c:	pop    r13
    868e:	pop    r14
    8690:	pop    r15
    8692:	ret    
    8693:	nop    DWORD PTR [rax+rax*1+0x0]
    8698:	mov    ecx,0xc521974f
    869d:	jmp    7c49 <P7WeeViterbi+0x9a9>
    86a2:	nop    WORD PTR [rax+rax*1+0x0]
    86a8:	mov    rdi,QWORD PTR [rsp+0x50]
    86ad:	call   5810 <FreePlan7Matrix>
    86b2:	mov    rdi,r15
    86b5:	call   5810 <FreePlan7Matrix>
    86ba:	mov    edi,ebp
    86bc:	call   17820 <Scorify>
    86c1:	mov    rax,QWORD PTR [rsp+0x68]
    86c6:	cmp    BYTE PTR [rsp+0x63],0x4
    86cb:	mov    ebx,DWORD PTR [rsp+0xc0]
    86d2:	sete   dl
    86d5:	cmp    BYTE PTR [rsp+0x62],0x9
    86da:	mov    ecx,edx
    86dc:	mov    DWORD PTR [rax],ebx
    86de:	mov    rax,QWORD PTR [rsp+0x70]
    86e3:	movzx  ebx,BYTE PTR [rsp+0x5b]
    86e8:	mov    BYTE PTR [rax],bl
    86ea:	sete   al
    86ed:	and    cl,al
    86ef:	je     86fe <P7WeeViterbi+0x145e>
    86f1:	movss  DWORD PTR [rsp+0x110],xmm0
    86fa:	mov    eax,ecx
    86fc:	mov    edx,ecx
    86fe:	cmp    BYTE PTR [rsp+0x5b],0x5
    8703:	jne    820c <P7WeeViterbi+0xf6c>
    8709:	mov    edx,DWORD PTR [rsp+0x28]
    870d:	sub    edx,DWORD PTR [rsp+0x10]
    8711:	cmp    edx,0x1
    8714:	jle    87f8 <P7WeeViterbi+0x1558>
    871a:	mov    eax,DWORD PTR [rsp+0xf0]
    8721:	mov    rbx,QWORD PTR [rsp+0xe8]
    8729:	mov    ecx,DWORD PTR [rsp+0x10]
    872d:	add    eax,0x1
    8730:	mov    DWORD PTR [rsp+0x5c],eax
    8734:	cdqe   
    8736:	mov    DWORD PTR [rbx+rax*4],ecx
    8739:	mov    rbx,QWORD PTR [rsp+0xe0]
    8741:	mov    ecx,DWORD PTR [rsp+0x28]
    8745:	mov    DWORD PTR [rbx+rax*4],ecx
    8748:	cmp    BYTE PTR [rsp+0x5b],0x5
    874d:	jne    8298 <P7WeeViterbi+0xff8>
    8753:	movsxd rax,DWORD PTR [rsp+0x10]
    8758:	cmp    DWORD PTR [rsp+0x64],eax
    875c:	jg     8298 <P7WeeViterbi+0xff8>
    8762:	mov    rdx,QWORD PTR [rsp+0xd8]
    876a:	mov    rcx,QWORD PTR [rsp+0xd0]
    8772:	mov    esi,DWORD PTR [rsp+0x64]
    8776:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8780:	mov    DWORD PTR [rdx+rax*4],0x1
    8787:	mov    BYTE PTR [rcx+rax*1],0x5
    878b:	sub    rax,0x1
    878f:	cmp    esi,eax
    8791:	jle    8780 <P7WeeViterbi+0x14e0>
    8793:	jmp    8298 <P7WeeViterbi+0xff8>
    8798:	nop    DWORD PTR [rax+rax*1+0x0]
    87a0:	cmp    BYTE PTR [rsp+0x63],0x4
    87a5:	je     8900 <P7WeeViterbi+0x1660>
    87ab:	cmp    BYTE PTR [rsp+0x62],0x9
    87b0:	je     8938 <P7WeeViterbi+0x1698>
    87b6:	movsxd rax,DWORD PTR [rsp+0x10]
    87bb:	mov    rbx,QWORD PTR [rsp+0xd8]
    87c3:	lea    rbx,[rbx+rax*4]
    87c7:	add    rax,QWORD PTR [rsp+0xd0]
    87cf:	mov    QWORD PTR [rsp+0x68],rbx
    87d4:	mov    QWORD PTR [rsp+0x70],rax
    87d9:	jmp    749f <P7WeeViterbi+0x1ff>
    87de:	xchg   ax,ax
    87e0:	jne    8244 <P7WeeViterbi+0xfa4>
    87e6:	test   dl,dl
    87e8:	je     8244 <P7WeeViterbi+0xfa4>
    87ee:	jmp    821d <P7WeeViterbi+0xf7d>
    87f3:	nop    DWORD PTR [rax+rax*1+0x0]
    87f8:	jne    8802 <P7WeeViterbi+0x1562>
    87fa:	test   al,al
    87fc:	jne    871a <P7WeeViterbi+0x147a>
    8802:	mov    eax,DWORD PTR [rsp+0xf0]
    8809:	mov    DWORD PTR [rsp+0x5c],eax
    880d:	jmp    8748 <P7WeeViterbi+0x14a8>
    8812:	nop    WORD PTR [rax+rax*1+0x0]
    8818:	mov    eax,0xc521974f
    881d:	jmp    758c <P7WeeViterbi+0x2ec>
    8822:	nop    WORD PTR [rax+rax*1+0x0]
    8828:	cmp    dil,0x8
    882c:	jne    88a0 <P7WeeViterbi+0x1600>
    882e:	mov    rax,QWORD PTR [rsp+0x130]
    8836:	mov    rax,QWORD PTR [rax+0x8]
    883a:	mov    BYTE PTR [rax+rbp*1],0x8
    883e:	mov    rax,QWORD PTR [rsp+0x130]
    8846:	mov    rdx,QWORD PTR [rax+0x10]
    884a:	mov    DWORD PTR [rdx+r12*1],0x0
    8852:	jmp    842e <P7WeeViterbi+0x118e>
    8857:	nop    WORD PTR [rax+rax*1+0x0]
    8860:	mov    rax,QWORD PTR [rsp+0x130]
    8868:	add    r12,0x4
    886c:	mov    rax,QWORD PTR [rax+0x8]
    8870:	mov    BYTE PTR [rax+rbp*1],0x5
    8874:	mov    rax,QWORD PTR [rsp+0x130]
    887c:	mov    rdx,QWORD PTR [rax+0x10]
    8880:	mov    rax,QWORD PTR [rax+0x18]
    8884:	mov    DWORD PTR [rdx+rbp*4],0x0
    888b:	lea    edx,[r14+0x2]
    888f:	mov    r14d,r15d
    8892:	mov    DWORD PTR [rax+rbp*4],ebx
    8895:	movsxd rbp,r15d
    8898:	jmp    8444 <P7WeeViterbi+0x11a4>
    889d:	nop    DWORD PTR [rax]
    88a0:	mov    QWORD PTR [rsp+0x18],r10
    88a5:	mov    QWORD PTR [rsp+0x10],rcx
    88aa:	mov    QWORD PTR [rsp+0x8],r8
    88af:	mov    QWORD PTR [rsp],r9
    88b3:	call   b100 <Statetype>
    88b8:	lea    rdi,[rip+0x34936]        # 3d1f5 <_IO_stdin_used+0x1f5>
    88bf:	mov    rsi,rax
    88c2:	xor    eax,eax
    88c4:	call   317f0 <Die>
    88c9:	mov    r10,QWORD PTR [rsp+0x18]
    88ce:	mov    r9,QWORD PTR [rsp]
    88d2:	mov    edx,r15d
    88d5:	mov    rcx,QWORD PTR [rsp+0x10]
    88da:	mov    r8,QWORD PTR [rsp+0x8]
    88df:	jmp    8444 <P7WeeViterbi+0x11a4>
    88e4:	nop    DWORD PTR [rax+0x0]
    88e8:	mov    edx,DWORD PTR [r8+rax*4]
    88ec:	sub    edx,DWORD PTR [r8+rax*4-0x4]
    88f1:	lea    edi,[rdi+rdx*1-0x1]
    88f5:	jmp    82e8 <P7WeeViterbi+0x1048>
    88fa:	nop    WORD PTR [rax+rax*1+0x0]
    8900:	movzx  eax,BYTE PTR [rsp+0x62]
    8905:	cmp    al,0x9
    8907:	mov    eax,DWORD PTR [rsp+0x28]
    890b:	cmovne rsi,QWORD PTR [rsp+0x70]
    8911:	cmovne rdx,QWORD PTR [rsp+0x68]
    8917:	cmovne eax,DWORD PTR [rsp+0x64]
    891c:	xor    r12d,r12d
    891f:	mov    QWORD PTR [rsp+0x70],rsi
    8924:	mov    QWORD PTR [rsp+0x68],rdx
    8929:	mov    DWORD PTR [rsp+0x10],eax
    892d:	jmp    74be <P7WeeViterbi+0x21e>
    8932:	nop    WORD PTR [rax+rax*1+0x0]
    8938:	mov    ebx,DWORD PTR [rsp+0x64]
    893c:	mov    QWORD PTR [rsp+0x70],rsi
    8941:	mov    QWORD PTR [rsp+0x68],rdx
    8946:	mov    eax,ebx
    8948:	shr    eax,0x1f
    894b:	lea    ecx,[rbx+rax*1]
    894e:	add    ebx,0x1
    8951:	and    ecx,0x1
    8954:	sub    ecx,eax
    8956:	mov    eax,DWORD PTR [rsp+0x28]
    895a:	movsxd rcx,ecx
    895d:	mov    DWORD PTR [rsp+0x10],eax
    8961:	lea    r12,[rcx*8+0x0]
    8969:	jmp    74be <P7WeeViterbi+0x21e>
    896e:	xchg   ax,ax
    8970:	je     8980 <P7WeeViterbi+0x16e0>
    8972:	movzx  esi,BYTE PTR [r8+rbx*1+0x1]
    8978:	jmp    84e7 <P7WeeViterbi+0x1247>
    897d:	nop    DWORD PTR [rax]
    8980:	mov    r12,rdi
    8983:	jmp    84f7 <P7WeeViterbi+0x1257>
    8988:	nop    DWORD PTR [rax+rax*1+0x0]
    8990:	mov    r11d,DWORD PTR [r9+rbx*4+0x4]
    8995:	mov    esi,DWORD PTR [r9+rbx*4]
    8999:	mov    r12,rdi
    899c:	mov    r14d,r13d
    899f:	mov    r15d,r11d
    89a2:	sub    r15d,esi
    89a5:	cmp    r15d,0x1
    89a9:	jle    8444 <P7WeeViterbi+0x11a4>
    89af:	lea    edi,[rsi+0x1]
    89b2:	cmp    r11d,edi
    89b5:	jle    8444 <P7WeeViterbi+0x11a4>
    89bb:	movsxd rdx,r13d
    89be:	sub    r13d,esi
    89c1:	nop    DWORD PTR [rax+0x0]
    89c8:	mov    rax,QWORD PTR [rax+0x8]
    89cc:	lea    r11d,[r13+rdi*1+0x0]
    89d1:	mov    BYTE PTR [rax+rdx*1],0x2
    89d5:	mov    rax,QWORD PTR [rsp+0x130]
    89dd:	mov    rsi,QWORD PTR [rax+0x10]
    89e1:	mov    DWORD PTR [rsi+rdx*4],edi
    89e4:	mov    rsi,QWORD PTR [rax+0x18]
    89e8:	add    edi,0x1
    89eb:	mov    DWORD PTR [rsi+rdx*4],0x0
    89f2:	add    rdx,0x1
    89f6:	cmp    DWORD PTR [r9+rbx*4+0x4],edi
    89fb:	jg     89c8 <P7WeeViterbi+0x1728>
    89fd:	movsxd rbp,r11d
    8a00:	movzx  esi,BYTE PTR [r8+rbx*1+0x1]
    8a06:	lea    edx,[r11+0x1]
    8a0a:	mov    r13d,r11d
    8a0d:	lea    rdi,[rbp*4+0x0]
    8a15:	jmp    84e7 <P7WeeViterbi+0x1247>
    8a1a:	nop    WORD PTR [rax+rax*1+0x0]
    8a20:	mov    BYTE PTR [rax],0x6
    8a23:	mov    rax,QWORD PTR [rsp+0x130]
    8a2b:	add    r14d,0x3
    8a2f:	movss  xmm1,DWORD PTR [r10+0x130]
    8a38:	mov    DWORD PTR [rsp+0x30],edx
    8a3c:	mov    r11,QWORD PTR [rax+0x10]
    8a40:	mov    rax,QWORD PTR [rax+0x18]
    8a44:	mov    QWORD PTR [rsp+0x28],rcx
    8a49:	mov    QWORD PTR [rsp+0x20],r8
    8a4e:	mov    DWORD PTR [r11+r12*1],0x0
    8a56:	mov    DWORD PTR [rax+r12*1],0x0
    8a5e:	mov    rax,QWORD PTR [r10+0xd0]
    8a65:	movsxd r11,DWORD PTR [r9+rbx*4]
    8a69:	mov    QWORD PTR [rsp+0x18],rdi
    8a6e:	mov    QWORD PTR [rsp+0x8],r9
    8a73:	movss  xmm0,DWORD PTR [rax+r11*4]
    8a79:	mov    QWORD PTR [rsp],r10
    8a7d:	mov    DWORD PTR [rsp+0x10],ebx
    8a81:	call   17710 <Prob2Score>
    8a86:	mov    r9,QWORD PTR [rsp+0x8]
    8a8b:	mov    r10,QWORD PTR [rsp]
    8a8f:	pxor   xmm0,xmm0
    8a93:	cvtsi2sd xmm0,eax
    8a97:	lea    rcx,[r12+0x8]
    8a9c:	pxor   xmm1,xmm1
    8aa0:	movsxd r11,DWORD PTR [rsp+0x30]
    8aa5:	mov    r13d,DWORD PTR [r9+rbx*4]
    8aa9:	mov    esi,DWORD PTR [rsp+0x10]
    8aad:	mov    QWORD PTR [rsp+0x8],rcx
    8ab2:	mov    rax,QWORD PTR [r10+0x170]
    8ab9:	addsd  xmm0,QWORD PTR [rip+0x348bf]        # 3d380 <_IO_stdin_used+0x380>
    8ac1:	mov    rdx,r11
    8ac4:	movsxd r12,r13d
    8ac7:	mov    rdi,QWORD PTR [rsp+0x18]
    8acc:	mov    r8,QWORD PTR [rsp+0x20]
    8ad1:	cvtsi2sd xmm1,DWORD PTR [rax+r12*4]
    8ad7:	mov    rcx,QWORD PTR [rsp+0x28]
    8adc:	mov    rax,QWORD PTR [rsp+0x130]
    8ae4:	comisd xmm1,xmm0
    8ae8:	jae    8b97 <P7WeeViterbi+0x18f7>
    8aee:	add    rbp,QWORD PTR [rax+0x8]
    8af2:	mov    rax,rbp
    8af5:	mov    r13d,edx
    8af8:	mov    r12,rdi
    8afb:	mov    rbp,r11
    8afe:	mov    rdi,QWORD PTR [rsp+0x8]
    8b03:	mov    edx,r14d
    8b06:	jmp    84ab <P7WeeViterbi+0x120b>
    8b0b:	nop    DWORD PTR [rax+rax*1+0x0]
    8b10:	mov    edi,DWORD PTR [r9+rbx*4]
    8b14:	mov    rsi,QWORD PTR [rsp+0x130]
    8b1c:	lea    eax,[rdi+0x1]
    8b1f:	cmp    eax,DWORD PTR [r10+0x88]
    8b26:	jg     857a <P7WeeViterbi+0x12da>
    8b2c:	mov    r11d,r13d
    8b2f:	movsxd rdx,r13d
    8b32:	sub    r11d,edi
    8b35:	nop    DWORD PTR [rax]
    8b38:	mov    rsi,QWORD PTR [rsi+0x8]
    8b3c:	lea    r13d,[r11+rax*1]
    8b40:	mov    BYTE PTR [rsi+rdx*1],0x2
    8b44:	mov    rsi,QWORD PTR [rsp+0x130]
    8b4c:	mov    rdi,QWORD PTR [rsi+0x10]
    8b50:	mov    DWORD PTR [rdi+rdx*4],eax
    8b53:	mov    rdi,QWORD PTR [rsi+0x18]
    8b57:	add    eax,0x1
    8b5a:	mov    DWORD PTR [rdi+rdx*4],0x0
    8b61:	add    rdx,0x1
    8b65:	cmp    DWORD PTR [r10+0x88],eax
    8b6c:	jge    8b38 <P7WeeViterbi+0x1898>
    8b6e:	movsxd rbp,r13d
    8b71:	lea    edx,[r13+0x1]
    8b75:	lea    r12,[rbp*4+0x0]
    8b7d:	jmp    857a <P7WeeViterbi+0x12da>
    8b82:	mov    edx,0x3
    8b87:	mov    r12d,0x8
    8b8d:	mov    ebp,0x2
    8b92:	jmp    85f8 <P7WeeViterbi+0x1358>
    8b97:	mov    rax,QWORD PTR [rax+0x8]
    8b9b:	mov    r12d,0x1
    8ba1:	cmp    r13d,0x1
    8ba5:	jg     8bb4 <P7WeeViterbi+0x1914>
    8ba7:	jmp    8c08 <P7WeeViterbi+0x1968>
    8ba9:	nop    DWORD PTR [rax+0x0]
    8bb0:	mov    rax,QWORD PTR [r11+0x8]
    8bb4:	mov    BYTE PTR [rax+rbp*1],0x2
    8bb8:	mov    r11,QWORD PTR [rsp+0x130]
    8bc0:	lea    edx,[r15+r12*1]
    8bc4:	mov    rax,QWORD PTR [r11+0x10]
    8bc8:	mov    DWORD PTR [rax+rbp*4],r12d
    8bcc:	mov    rax,QWORD PTR [r11+0x18]
    8bd0:	add    r12d,0x1
    8bd4:	mov    DWORD PTR [rax+rbp*4],0x0
    8bdb:	add    rbp,0x1
    8bdf:	cmp    DWORD PTR [r9+rbx*4],r12d
    8be3:	jg     8bb0 <P7WeeViterbi+0x1910>
    8be5:	movsxd rax,edx
    8be8:	lea    r13d,[rdx+0x1]
    8bec:	add    edx,0x2
    8bef:	lea    r12,[rax*4+0x0]
    8bf7:	movsxd rbp,r13d
    8bfa:	add    rax,QWORD PTR [r11+0x8]
    8bfe:	lea    rdi,[r12+0x4]
    8c03:	jmp    84ab <P7WeeViterbi+0x120b>
    8c08:	add    rax,rbp
    8c0b:	jmp    8af5 <P7WeeViterbi+0x1855>
    8c10:	movsx  edi,BYTE PTR [rsp+0x63]
    8c15:	call   b100 <Statetype>
    8c1a:	lea    rdi,[rip+0x3463f]        # 3d260 <_IO_stdin_used+0x260>
    8c21:	mov    rsi,rax
    8c24:	xor    eax,eax
    8c26:	call   317f0 <Die>
    8c2b:	mov    rsi,QWORD PTR [rbp+0x0]
    8c2f:	mov    edx,DWORD PTR [rsi+0x10]
    8c32:	mov    eax,DWORD PTR [rsi+0x4]
    8c35:	jmp    758c <P7WeeViterbi+0x2ec>
    8c3a:	call   3570 <__stack_chk_fail@plt>
    8c3f:	nop

0000000000008c40 <P7SmallViterbi>:
    8c40:	endbr64 
    8c44:	push   r15
    8c46:	mov    r15,rdx
    8c49:	push   r14
    8c4b:	push   r13
    8c4d:	push   r12
    8c4f:	push   rbp
    8c50:	push   rbx
    8c51:	mov    rbx,r8
    8c54:	sub    rsp,0x68
    8c58:	mov    QWORD PTR [rsp],rdi
    8c5c:	mov    QWORD PTR [rsp+0x10],rcx
    8c61:	lea    rcx,[rsp+0x48]
    8c66:	mov    DWORD PTR [rsp+0x20],esi
    8c6a:	mov    QWORD PTR [rsp+0x30],r8
    8c6f:	mov    rax,QWORD PTR fs:0x28
    8c78:	mov    QWORD PTR [rsp+0x58],rax
    8c7d:	xor    eax,eax
    8c7f:	call   6990 <P7ParsingViterbi>
    8c84:	mov    rdi,QWORD PTR [rsp+0x48]
    8c89:	movss  DWORD PTR [rsp+0x28],xmm0
    8c8f:	test   rbx,rbx
    8c92:	je     91e7 <P7SmallViterbi+0x5a7>
    8c98:	test   rdi,rdi
    8c9b:	je     91e7 <P7SmallViterbi+0x5a7>
    8ca1:	mov    edx,DWORD PTR [rdi]
    8ca3:	mov    esi,0x3a2
    8ca8:	lea    rdi,[rip+0x34511]        # 3d1c0 <_IO_stdin_used+0x1c0>
    8caf:	mov    eax,edx
    8cb1:	shr    eax,0x1f
    8cb4:	add    eax,edx
    8cb6:	sar    eax,1
    8cb8:	lea    r14d,[rax-0x1]
    8cbc:	mov    DWORD PTR [rsp+0x24],eax
    8cc0:	mov    ebx,eax
    8cc2:	movsxd rax,r14d
    8cc5:	mov    DWORD PTR [rsp+0x2c],r14d
    8cca:	lea    rdx,[rax*8+0x0]
    8cd2:	mov    QWORD PTR [rsp+0x38],rax
    8cd7:	call   36810 <sre_malloc>
    8cdc:	mov    QWORD PTR [rsp+0x18],rax
    8ce1:	test   r14d,r14d
    8ce4:	jle    9202 <P7SmallViterbi+0x5c2>
    8cea:	mov    rbp,rax
    8ced:	lea    eax,[rbx-0x2]
    8cf0:	mov    r14d,0x8
    8cf6:	xor    ebx,ebx
    8cf8:	lea    rax,[rax*8+0x10]
    8d00:	mov    r13,rbp
    8d03:	movsd  xmm3,QWORD PTR [rip+0x34655]        # 3d360 <_IO_stdin_used+0x360>
    8d0b:	mov    ebp,ebx
    8d0d:	mov    QWORD PTR [rsp+0x8],rax
    8d12:	mov    rbx,r14
    8d15:	xor    r12d,r12d
    8d18:	mov    r14,r15
    8d1b:	jmp    8d5a <P7SmallViterbi+0x11a>
    8d1d:	nop    DWORD PTR [rax]
    8d20:	mov    rcx,r13
    8d23:	mov    rdx,r14
    8d26:	mov    esi,r15d
    8d29:	call   72a0 <P7WeeViterbi>
    8d2e:	mov    rax,QWORD PTR [rip+0x3462b]        # 3d360 <_IO_stdin_used+0x360>
    8d35:	movq   xmm3,rax
    8d3a:	mov    rcx,QWORD PTR [r13+0x0]
    8d3e:	add    r12d,r15d
    8d41:	add    rbx,0x8
    8d45:	add    r13,0x8
    8d49:	mov    ecx,DWORD PTR [rcx]
    8d4b:	lea    ebp,[rbp+rcx*1-0x4]
    8d4f:	cmp    QWORD PTR [rsp+0x8],rbx
    8d54:	je     8e38 <P7SmallViterbi+0x1f8>
    8d5a:	mov    rcx,QWORD PTR [rsp+0x48]
    8d5f:	pxor   xmm2,xmm2
    8d63:	pxor   xmm1,xmm1
    8d67:	mov    eax,DWORD PTR [r14+0x88]
    8d6e:	movsd  xmm0,QWORD PTR [rip+0x345e2]        # 3d358 <_IO_stdin_used+0x358>
    8d76:	mov    rcx,QWORD PTR [rcx+0x18]
    8d7a:	movsxd rdi,DWORD PTR [rcx+rbx*1-0x4]
    8d7f:	mov    r15d,DWORD PTR [rcx+rbx*1]
    8d83:	sub    r15d,edi
    8d86:	add    rdi,QWORD PTR [rsp]
    8d8a:	lea    ecx,[r15+0x1]
    8d8e:	cvtsi2ss xmm2,ecx
    8d92:	lea    ecx,[rax+0x2]
    8d95:	cvtsi2ss xmm1,ecx
    8d99:	cvtss2sd xmm2,xmm2
    8d9d:	mulsd  xmm0,xmm2
    8da1:	cvtss2sd xmm1,xmm1
    8da5:	mulsd  xmm1,xmm0
    8da9:	movapd xmm0,xmm2
    8dad:	mulsd  xmm0,xmm3
    8db1:	mulsd  xmm0,QWORD PTR [rip+0x345b7]        # 3d370 <_IO_stdin_used+0x370>
    8db9:	mulsd  xmm1,xmm3
    8dbd:	addsd  xmm1,QWORD PTR [rip+0x345a3]        # 3d368 <_IO_stdin_used+0x368>
    8dc5:	cvtsd2ss xmm1,xmm1
    8dc9:	cvtss2sd xmm1,xmm1
    8dcd:	addsd  xmm1,xmm0
    8dd1:	movsd  xmm0,QWORD PTR [rip+0x3459f]        # 3d378 <_IO_stdin_used+0x378>
    8dd9:	mulsd  xmm0,xmm2
    8ddd:	cvtsd2ss xmm1,xmm1
    8de1:	movapd xmm2,xmm0
    8de5:	pxor   xmm0,xmm0
    8de9:	mulsd  xmm2,xmm3
    8ded:	cvtss2sd xmm0,xmm1
    8df1:	addsd  xmm0,xmm2
    8df5:	cvtsd2ss xmm0,xmm0
    8df9:	mulss  xmm0,DWORD PTR [rip+0x34597]        # 3d398 <_IO_stdin_used+0x398>
    8e01:	cvttss2si ecx,xmm0
    8e05:	cmp    ecx,0x3e8
    8e0b:	jg     8d20 <P7SmallViterbi+0xe0>
    8e11:	mov    rcx,QWORD PTR [rsp+0x10]
    8e16:	mov    r8,r13
    8e19:	mov    rdx,r14
    8e1c:	mov    esi,r15d
    8e1f:	call   ec90 <P7Viterbi>
    8e24:	mov    rax,QWORD PTR [rip+0x34535]        # 3d360 <_IO_stdin_used+0x360>
    8e2b:	movq   xmm3,rax
    8e30:	jmp    8d3a <P7SmallViterbi+0xfa>
    8e35:	nop    DWORD PTR [rax]
    8e38:	mov    eax,DWORD PTR [rsp+0x20]
    8e3c:	mov    ebx,ebp
    8e3e:	sub    eax,r12d
    8e41:	mov    esi,DWORD PTR [rsp+0x24]
    8e45:	lea    r12d,[rax+rsi*1+0x2]
    8e4a:	lea    rsi,[rsp+0x50]
    8e4f:	add    r12d,ebx
    8e52:	mov    edi,r12d
    8e55:	call   209f0 <P7AllocTrace>
    8e5a:	mov    rax,QWORD PTR [rsp+0x50]
    8e5f:	mov    DWORD PTR [rax],r12d
    8e62:	mov    rax,QWORD PTR [rax+0x8]
    8e66:	mov    BYTE PTR [rax],0x4
    8e69:	mov    rax,QWORD PTR [rsp+0x50]
    8e6e:	mov    rdx,QWORD PTR [rax+0x10]
    8e72:	mov    DWORD PTR [rdx],0x0
    8e78:	mov    rdx,QWORD PTR [rax+0x18]
    8e7c:	mov    rax,QWORD PTR [rax+0x8]
    8e80:	mov    DWORD PTR [rdx],0x0
    8e86:	mov    BYTE PTR [rax+0x1],0x5
    8e8a:	mov    rax,QWORD PTR [rsp+0x50]
    8e8f:	mov    rsi,QWORD PTR [rsp+0x48]
    8e94:	mov    rdx,QWORD PTR [rax+0x10]
    8e98:	mov    DWORD PTR [rdx+0x4],0x0
    8e9f:	mov    rdx,QWORD PTR [rax+0x18]
    8ea3:	mov    DWORD PTR [rdx+0x4],0x0
    8eaa:	mov    rdx,QWORD PTR [rsi+0x18]
    8eae:	mov    r9d,DWORD PTR [rdx+0x4]
    8eb2:	test   r9d,r9d
    8eb5:	jle    91ee <P7SmallViterbi+0x5ae>
    8ebb:	mov    ecx,0x2
    8ec0:	mov    edx,0x1
    8ec5:	nop    DWORD PTR [rax]
    8ec8:	mov    rax,QWORD PTR [rax+0x8]
    8ecc:	lea    edi,[rdx+0x2]
    8ecf:	mov    BYTE PTR [rax+rcx*1],0x5
    8ed3:	mov    rax,QWORD PTR [rsp+0x50]
    8ed8:	mov    rsi,QWORD PTR [rax+0x10]
    8edc:	mov    DWORD PTR [rsi+rcx*4],0x0
    8ee3:	mov    rsi,QWORD PTR [rax+0x18]
    8ee7:	mov    DWORD PTR [rsi+rcx*4],edx
    8eea:	mov    rsi,QWORD PTR [rsp+0x48]
    8eef:	add    edx,0x1
    8ef2:	add    rcx,0x1
    8ef6:	mov    r8,QWORD PTR [rsi+0x18]
    8efa:	cmp    DWORD PTR [r8+0x4],edx
    8efe:	jge    8ec8 <P7SmallViterbi+0x288>
    8f00:	movsxd rdx,edi
    8f03:	lea    rcx,[rdx*4+0x0]
    8f0b:	mov    r8d,DWORD PTR [rsp+0x2c]
    8f10:	test   r8d,r8d
    8f13:	jle    90db <P7SmallViterbi+0x49b>
    8f19:	mov    ebx,DWORD PTR [rsp+0x24]
    8f1d:	mov    edx,0x8
    8f22:	mov    r13d,0x4
    8f28:	xor    r11d,r11d
    8f2b:	lea    r14d,[rbx-0x2]
    8f2f:	mov    rbx,QWORD PTR [rsp+0x18]
    8f34:	mov    r12,r14
    8f37:	sub    rdx,rbx
    8f3a:	mov    r8,rbx
    8f3d:	sub    r13,rbx
    8f40:	mov    rbp,rdx
    8f43:	mov    edx,0xc
    8f48:	sub    rdx,rbx
    8f4b:	mov    r15,rdx
    8f4e:	xchg   ax,ax
    8f50:	mov    rcx,QWORD PTR [r8]
    8f53:	mov    r9d,edi
    8f56:	cmp    DWORD PTR [rcx],0x4
    8f59:	jle    8fe8 <P7SmallViterbi+0x3a8>
    8f5f:	lea    rbx,[r13+r8*1+0x0]
    8f64:	movsxd rsi,edi
    8f67:	lea    r10d,[rdi-0x1]
    8f6b:	mov    edx,0x2
    8f70:	jmp    8fa2 <P7SmallViterbi+0x362>
    8f72:	nop    WORD PTR [rax+rax*1+0x0]
    8f78:	mov    r9,QWORD PTR [rsp+0x48]
    8f7d:	mov    r9,QWORD PTR [r9+0x18]
    8f81:	add    edi,DWORD PTR [r9+rbx*1]
    8f85:	mov    r9,QWORD PTR [rax+0x18]
    8f89:	mov    DWORD PTR [r9+rsi*4],edi
    8f8d:	mov    edi,DWORD PTR [rcx]
    8f8f:	lea    r9d,[r10+rdx*1]
    8f93:	add    rdx,0x1
    8f97:	add    rsi,0x1
    8f9b:	sub    edi,0x2
    8f9e:	cmp    edi,edx
    8fa0:	jle    8fe8 <P7SmallViterbi+0x3a8>
    8fa2:	mov    rcx,QWORD PTR [rcx+0x8]
    8fa6:	mov    rax,QWORD PTR [rax+0x8]
    8faa:	movzx  ecx,BYTE PTR [rcx+rdx*1]
    8fae:	mov    BYTE PTR [rax+rsi*1],cl
    8fb1:	mov    rcx,QWORD PTR [r8]
    8fb4:	mov    rax,QWORD PTR [rsp+0x50]
    8fb9:	mov    rdi,QWORD PTR [rcx+0x10]
    8fbd:	mov    r9d,DWORD PTR [rdi+rdx*4]
    8fc1:	mov    rdi,QWORD PTR [rax+0x10]
    8fc5:	mov    DWORD PTR [rdi+rsi*4],r9d
    8fc9:	mov    rdi,QWORD PTR [rcx+0x18]
    8fcd:	mov    edi,DWORD PTR [rdi+rdx*4]
    8fd0:	test   edi,edi
    8fd2:	jg     8f78 <P7SmallViterbi+0x338>
    8fd4:	mov    rdi,QWORD PTR [rax+0x18]
    8fd8:	mov    DWORD PTR [rdi+rsi*4],0x0
    8fdf:	jmp    8f8d <P7SmallViterbi+0x34d>
    8fe1:	nop    DWORD PTR [rax+0x0]
    8fe8:	mov    rbx,QWORD PTR [rax+0x8]
    8fec:	movsxd rdx,r9d
    8fef:	lea    edi,[r9+0x1]
    8ff3:	add    rbx,rdx
    8ff6:	cmp    r12d,r11d
    8ff9:	je     90a0 <P7SmallViterbi+0x460>
    8fff:	mov    BYTE PTR [rbx],0xa
    9002:	mov    rax,QWORD PTR [rsp+0x50]
    9007:	lea    r10,[r15+r8*1]
    900b:	mov    rcx,QWORD PTR [rax+0x10]
    900f:	mov    DWORD PTR [rcx+rdx*4],0x0
    9016:	mov    rcx,QWORD PTR [rax+0x18]
    901a:	mov    DWORD PTR [rcx+rdx*4],0x0
    9021:	mov    rdx,QWORD PTR [rsp+0x48]
    9026:	movsxd rcx,edi
    9029:	mov    QWORD PTR [rsp],rcx
    902d:	mov    ecx,0x1
    9032:	mov    rsi,QWORD PTR [rdx+0x18]
    9036:	lea    rdx,[rsi+r8*1]
    903a:	mov    ebx,DWORD PTR [rdx+rbp*1]
    903d:	sub    ecx,ebx
    903f:	lea    edx,[rbx+0x1]
    9042:	add    r9d,ecx
    9045:	mov    rcx,QWORD PTR [rsp]
    9049:	cmp    DWORD PTR [rsi+r10*1],edx
    904d:	jl     9089 <P7SmallViterbi+0x449>
    904f:	nop
    9050:	mov    rax,QWORD PTR [rax+0x8]
    9054:	lea    edi,[r9+rdx*1]
    9058:	mov    BYTE PTR [rax+rcx*1],0xa
    905c:	mov    rax,QWORD PTR [rsp+0x50]
    9061:	mov    rsi,QWORD PTR [rax+0x10]
    9065:	mov    DWORD PTR [rsi+rcx*4],0x0
    906c:	mov    rsi,QWORD PTR [rax+0x18]
    9070:	mov    DWORD PTR [rsi+rcx*4],edx
    9073:	mov    rsi,QWORD PTR [rsp+0x48]
    9078:	add    edx,0x1
    907b:	add    rcx,0x1
    907f:	mov    rsi,QWORD PTR [rsi+0x18]
    9083:	cmp    DWORD PTR [rsi+r10*1],edx
    9087:	jge    9050 <P7SmallViterbi+0x410>
    9089:	lea    rdx,[r11+0x1]
    908d:	add    r8,0x8
    9091:	cmp    r14,r11
    9094:	je     90cb <P7SmallViterbi+0x48b>
    9096:	mov    r11,rdx
    9099:	jmp    8f50 <P7SmallViterbi+0x310>
    909e:	xchg   ax,ax
    90a0:	mov    BYTE PTR [rbx],0x8
    90a3:	mov    rax,QWORD PTR [rsp+0x50]
    90a8:	add    r8,0x8
    90ac:	mov    rcx,QWORD PTR [rax+0x10]
    90b0:	mov    DWORD PTR [rcx+rdx*4],0x0
    90b7:	mov    rcx,QWORD PTR [rax+0x18]
    90bb:	mov    DWORD PTR [rcx+rdx*4],0x0
    90c2:	lea    rdx,[r11+0x1]
    90c6:	cmp    r14,r11
    90c9:	jne    9096 <P7SmallViterbi+0x456>
    90cb:	movsxd rdx,edi
    90ce:	mov    rsi,QWORD PTR [rsp+0x48]
    90d3:	lea    rcx,[rdx*4+0x0]
    90db:	mov    rbx,QWORD PTR [rsp+0x38]
    90e0:	mov    rsi,QWORD PTR [rsi+0x18]
    90e4:	mov    r10d,DWORD PTR [rsi+rbx*8]
    90e8:	mov    ebx,DWORD PTR [rsp+0x20]
    90ec:	cmp    r10d,ebx
    90ef:	jge    9150 <P7SmallViterbi+0x510>
    90f1:	lea    ecx,[rbx-0x1]
    90f4:	movsxd rdx,edi
    90f7:	lea    r8d,[r10+0x1]
    90fb:	sub    ecx,r10d
    90fe:	sub    r8d,edi
    9101:	lea    r9,[rdx+rcx*1+0x1]
    9106:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9110:	mov    rax,QWORD PTR [rax+0x8]
    9114:	lea    esi,[r8+rdx*1]
    9118:	mov    BYTE PTR [rax+rdx*1],0x8
    911c:	mov    rax,QWORD PTR [rsp+0x50]
    9121:	mov    rcx,QWORD PTR [rax+0x10]
    9125:	mov    DWORD PTR [rcx+rdx*4],0x0
    912c:	mov    rcx,QWORD PTR [rax+0x18]
    9130:	mov    DWORD PTR [rcx+rdx*4],esi
    9133:	add    rdx,0x1
    9137:	cmp    r9,rdx
    913a:	jne    9110 <P7SmallViterbi+0x4d0>
    913c:	mov    ebx,DWORD PTR [rsp+0x20]
    9140:	sub    ebx,r10d
    9143:	add    edi,ebx
    9145:	movsxd rdx,edi
    9148:	lea    rcx,[rdx*4+0x0]
    9150:	mov    rax,QWORD PTR [rax+0x8]
    9154:	mov    BYTE PTR [rax+rdx*1],0x9
    9158:	mov    rax,QWORD PTR [rsp+0x50]
    915d:	mov    rdx,QWORD PTR [rax+0x10]
    9161:	mov    rax,QWORD PTR [rax+0x18]
    9165:	mov    DWORD PTR [rdx+rcx*1],0x0
    916c:	mov    DWORD PTR [rax+rcx*1],0x0
    9173:	mov    eax,DWORD PTR [rsp+0x2c]
    9177:	test   eax,eax
    9179:	jle    91a1 <P7SmallViterbi+0x561>
    917b:	mov    eax,DWORD PTR [rsp+0x24]
    917f:	mov    rsi,QWORD PTR [rsp+0x18]
    9184:	sub    eax,0x2
    9187:	mov    rbx,rsi
    918a:	lea    r12,[rsi+rax*8+0x8]
    918f:	nop
    9190:	mov    rdi,QWORD PTR [rbx]
    9193:	add    rbx,0x8
    9197:	call   20af0 <P7FreeTrace>
    919c:	cmp    r12,rbx
    919f:	jne    9190 <P7SmallViterbi+0x550>
    91a1:	mov    rdi,QWORD PTR [rsp+0x18]
    91a6:	call   3460 <free@plt>
    91ab:	mov    rdi,QWORD PTR [rsp+0x48]
    91b0:	call   20af0 <P7FreeTrace>
    91b5:	mov    rax,QWORD PTR [rsp+0x50]
    91ba:	mov    rbx,QWORD PTR [rsp+0x30]
    91bf:	mov    QWORD PTR [rbx],rax
    91c2:	mov    rax,QWORD PTR [rsp+0x58]
    91c7:	xor    rax,QWORD PTR fs:0x28
    91d0:	jne    920d <P7SmallViterbi+0x5cd>
    91d2:	movss  xmm0,DWORD PTR [rsp+0x28]
    91d8:	add    rsp,0x68
    91dc:	pop    rbx
    91dd:	pop    rbp
    91de:	pop    r12
    91e0:	pop    r13
    91e2:	pop    r14
    91e4:	pop    r15
    91e6:	ret    
    91e7:	call   20af0 <P7FreeTrace>
    91ec:	jmp    91c2 <P7SmallViterbi+0x582>
    91ee:	mov    ecx,0x8
    91f3:	mov    edx,0x2
    91f8:	mov    edi,0x2
    91fd:	jmp    8f0b <P7SmallViterbi+0x2cb>
    9202:	mov    eax,DWORD PTR [rsp+0x20]
    9206:	xor    ebx,ebx
    9208:	jmp    8e41 <P7SmallViterbi+0x201>
    920d:	call   3570 <__stack_chk_fail@plt>
    9212:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    921d:	nop    DWORD PTR [rax]

0000000000009220 <Plan7ESTViterbi>:
    9220:	endbr64 
    9224:	push   r15
    9226:	push   r14
    9228:	mov    r14,rdx
    922b:	push   r13
    922d:	push   r12
    922f:	push   rbp
    9230:	push   rbx
    9231:	mov    rbx,rdi
    9234:	mov    edi,esi
    9236:	sub    rsp,0x78
    923a:	mov    DWORD PTR [rsp+0x5c],esi
    923e:	mov    esi,DWORD PTR [rdx+0x88]
    9244:	xor    edx,edx
    9246:	mov    QWORD PTR [rsp+0x60],rcx
    924b:	xor    ecx,ecx
    924d:	mov    DWORD PTR [rsp],r11d
    9251:	call   5350 <CreatePlan7Matrix>
    9256:	mov    r11d,DWORD PTR [rsp]
    925a:	mov    rdi,QWORD PTR [rax]
    925d:	mov    rdx,QWORD PTR [rax+0x8]
    9261:	mov    QWORD PTR [rsp+0x68],rax
    9266:	mov    rcx,QWORD PTR [rax+0x10]
    926a:	mov    rsi,QWORD PTR [rax+0x18]
    926e:	mov    r10,QWORD PTR [rdi]
    9271:	mov    QWORD PTR [rsp+0x50],rdi
    9276:	mov    DWORD PTR [r10+0x10],0x0
    927e:	mov    eax,DWORD PTR [r14+0x150]
    9285:	mov    DWORD PTR [r10+0xc],0xc521974f
    928d:	mov    DWORD PTR [r10],eax
    9290:	movabs rax,0xc521974fc521974f
    929a:	mov    QWORD PTR [r10+0x4],rax
    929e:	mov    r8d,DWORD PTR [r14+0x88]
    92a5:	test   r8d,r8d
    92a8:	js     98f6 <Plan7ESTViterbi+0x6d6>
    92ae:	mov    r9,QWORD PTR [rsi]
    92b1:	mov    r8,QWORD PTR [rcx]
    92b4:	xor    eax,eax
    92b6:	mov    rdi,QWORD PTR [rdx]
    92b9:	nop    DWORD PTR [rax+0x0]
    92c0:	mov    DWORD PTR [r9+rax*4],0xc521974f
    92c8:	mov    DWORD PTR [r8+rax*4],0xc521974f
    92d0:	mov    DWORD PTR [rdi+rax*4],0xc521974f
    92d7:	add    rax,0x1
    92db:	cmp    DWORD PTR [r14+0x88],eax
    92e2:	jge    92c0 <Plan7ESTViterbi+0xa0>
    92e4:	mov    eax,DWORD PTR [r10+0x10]
    92e8:	mov    rdi,QWORD PTR [rsp+0x50]
    92ed:	add    eax,DWORD PTR [r14+0x154]
    92f4:	mov    rdi,QWORD PTR [rdi+0x8]
    92f8:	mov    DWORD PTR [rdi+0x10],eax
    92fb:	add    eax,DWORD PTR [r14+0x150]
    9302:	mov    DWORD PTR [rdi],eax
    9304:	movabs rax,0xc521974fc521974f
    930e:	mov    QWORD PTR [r10+0x4],rax
    9312:	mov    DWORD PTR [r10+0xc],0xc521974f
    931a:	mov    edi,DWORD PTR [r14+0x88]
    9321:	test   edi,edi
    9323:	js     9354 <Plan7ESTViterbi+0x134>
    9325:	mov    r9,QWORD PTR [rsi]
    9328:	mov    r8,QWORD PTR [rcx]
    932b:	xor    eax,eax
    932d:	mov    rdi,QWORD PTR [rdx]
    9330:	mov    DWORD PTR [r9+rax*4],0xc521974f
    9338:	mov    DWORD PTR [r8+rax*4],0xc521974f
    9340:	mov    DWORD PTR [rdi+rax*4],0xc521974f
    9347:	add    rax,0x1
    934b:	cmp    DWORD PTR [r14+0x88],eax
    9352:	jge    9330 <Plan7ESTViterbi+0x110>
    9354:	cmp    DWORD PTR [rsp+0x5c],0x1
    9359:	jle    98a8 <Plan7ESTViterbi+0x688>
    935f:	mov    rax,QWORD PTR [rsi+0x10]
    9363:	mov    r13,QWORD PTR [rcx+0x10]
    9367:	mov    r12,rcx
    936a:	mov    r15,rdx
    936d:	mov    DWORD PTR [rsp],0x2
    9374:	mov    DWORD PTR [rax],0xc521974f
    937a:	mov    rbp,r13
    937d:	mov    QWORD PTR [rsp+0x38],rax
    9382:	mov    rax,QWORD PTR [rdx+0x10]
    9386:	mov    DWORD PTR [r13+0x0],0xc521974f
    938e:	mov    QWORD PTR [rsp+0x40],rax
    9393:	mov    DWORD PTR [rax],0xc521974f
    9399:	lea    rax,[rbx+0x1]
    939d:	mov    rbx,QWORD PTR [rsp+0x50]
    93a2:	mov    QWORD PTR [rsp+0x48],rax
    93a7:	mov    eax,DWORD PTR [rsp+0x5c]
    93ab:	mov    r13,rbx
    93ae:	mov    rbx,rsi
    93b1:	add    eax,0x1
    93b4:	mov    DWORD PTR [rsp+0x58],eax
    93b8:	nop    DWORD PTR [rax+rax*1+0x0]
    93c0:	mov    edx,DWORD PTR [r14+0x88]
    93c7:	test   edx,edx
    93c9:	jle    9768 <Plan7ESTViterbi+0x548>
    93cf:	movsxd r11,r11d
    93d2:	mov    QWORD PTR [rsp+0x8],r13
    93d7:	mov    r13,rbx
    93da:	lea    rax,[r11*8+0x0]
    93e2:	mov    DWORD PTR [rsp+0x4],0x1
    93ea:	mov    QWORD PTR [rsp+0x20],rax
    93ef:	mov    rax,QWORD PTR [rsp+0x40]
    93f4:	lea    rcx,[rax+0x4]
    93f8:	mov    eax,0x4
    93fd:	jmp    95c2 <Plan7ESTViterbi+0x3a2>
    9402:	nop    WORD PTR [rax+rax*1+0x0]
    9408:	mov    r9,QWORD PTR [r15-0x10]
    940c:	mov    rbx,QWORD PTR [rsp+0x28]
    9411:	mov    r8d,DWORD PTR [r14+0x1bc]
    9418:	mov    edi,DWORD PTR [rbx]
    941a:	add    edi,DWORD PTR [r9+rsi*1]
    941e:	mov    r9d,DWORD PTR [rcx]
    9421:	add    edi,r8d
    9424:	cmp    r9d,edi
    9427:	jge    9435 <Plan7ESTViterbi+0x215>
    9429:	mov    DWORD PTR [rcx],edi
    942b:	mov    r8d,DWORD PTR [r14+0x1bc]
    9432:	mov    r9d,edi
    9435:	mov    rbx,QWORD PTR [rsp+0x30]
    943a:	mov    edi,DWORD PTR [rbx]
    943c:	mov    rbx,QWORD PTR [r12-0x10]
    9441:	add    edi,DWORD PTR [rbx+rsi*1]
    9444:	add    edi,r8d
    9447:	cmp    edi,r9d
    944a:	jle    9458 <Plan7ESTViterbi+0x238>
    944c:	mov    DWORD PTR [rcx],edi
    944e:	mov    r8d,DWORD PTR [r14+0x1bc]
    9455:	mov    r9d,edi
    9458:	mov    rbx,QWORD PTR [rsp+0x8]
    945d:	mov    edi,DWORD PTR [r11]
    9460:	mov    rbx,QWORD PTR [rbx-0x10]
    9464:	add    edi,DWORD PTR [rbx]
    9466:	add    edi,r8d
    9469:	cmp    edi,r9d
    946c:	jle    947a <Plan7ESTViterbi+0x25a>
    946e:	mov    DWORD PTR [rcx],edi
    9470:	mov    r8d,DWORD PTR [r14+0x1bc]
    9477:	mov    r9d,edi
    947a:	mov    r11,QWORD PTR [r13-0x10]
    947e:	mov    edi,DWORD PTR [r10]
    9481:	add    edi,DWORD PTR [r11+rsi*1]
    9485:	add    r8d,edi
    9488:	cmp    r8d,r9d
    948b:	jle    971a <Plan7ESTViterbi+0x4fa>
    9491:	mov    rdi,QWORD PTR [rdx+0x10]
    9495:	mov    rbx,QWORD PTR [rsp+0x38]
    949a:	mov    DWORD PTR [rcx],r8d
    949d:	mov    r8d,DWORD PTR [rcx-0x4]
    94a1:	add    r8d,DWORD PTR [rdi+rsi*1]
    94a5:	mov    r9d,DWORD PTR [rbx+rax*1-0x4]
    94aa:	mov    DWORD PTR [rbx+rax*1],r8d
    94ae:	mov    edi,r8d
    94b1:	mov    r8,QWORD PTR [rdx+0x30]
    94b5:	add    r9d,DWORD PTR [r8+rsi*1]
    94b9:	cmp    edi,r9d
    94bc:	jge    94c7 <Plan7ESTViterbi+0x2a7>
    94be:	mov    rbx,QWORD PTR [rsp+0x38]
    94c3:	mov    DWORD PTR [rbx+rax*1],r9d
    94c7:	mov    rdi,QWORD PTR [r15-0x8]
    94cb:	mov    rsi,QWORD PTR [rdx+0x8]
    94cf:	mov    r8,QWORD PTR [r12-0x8]
    94d4:	mov    rbx,QWORD PTR [rsp+0x20]
    94d9:	mov    esi,DWORD PTR [rsi+rax*1]
    94dc:	add    esi,DWORD PTR [rdi+rax*1]
    94df:	mov    DWORD PTR [rbp+rax*1+0x0],esi
    94e3:	mov    edi,esi
    94e5:	mov    rsi,QWORD PTR [rdx+0x20]
    94e9:	mov    esi,DWORD PTR [rsi+rax*1]
    94ec:	add    esi,DWORD PTR [r8+rax*1]
    94f0:	cmp    esi,edi
    94f2:	cmovl  esi,edi
    94f5:	mov    DWORD PTR [rbp+rax*1+0x0],esi
    94f9:	mov    rdi,QWORD PTR [r14+0x1b0]
    9500:	mov    rdi,QWORD PTR [rdi+rbx*1]
    9504:	add    esi,DWORD PTR [rdi+rax*1]
    9507:	mov    DWORD PTR [rbp+rax*1+0x0],esi
    950b:	mov    r8,QWORD PTR [rdx+0x8]
    950f:	mov    rbx,QWORD PTR [rsp+0x10]
    9514:	mov    edi,DWORD PTR [r14+0x1b8]
    951b:	mov    r9d,DWORD PTR [rbp+rax*1+0x0]
    9520:	add    r8,rax
    9523:	mov    esi,DWORD PTR [r8]
    9526:	add    esi,DWORD PTR [rbx+rax*1]
    9529:	add    esi,edi
    952b:	cmp    r9d,esi
    952e:	jge    953e <Plan7ESTViterbi+0x31e>
    9530:	mov    DWORD PTR [rbp+rax*1+0x0],esi
    9534:	mov    edi,DWORD PTR [r14+0x1b8]
    953b:	mov    r9d,esi
    953e:	mov    rsi,QWORD PTR [rdx+0x20]
    9542:	mov    rbx,QWORD PTR [rsp+0x18]
    9547:	add    rsi,rax
    954a:	mov    rdx,rsi
    954d:	mov    esi,DWORD PTR [rsi]
    954f:	add    esi,DWORD PTR [rbx+rax*1]
    9552:	add    edi,esi
    9554:	cmp    edi,r9d
    9557:	jle    955d <Plan7ESTViterbi+0x33d>
    9559:	mov    DWORD PTR [rbp+rax*1+0x0],edi
    955d:	cmp    DWORD PTR [rsp],0x4
    9561:	jle    95a4 <Plan7ESTViterbi+0x384>
    9563:	mov    r9,QWORD PTR [r15-0x10]
    9567:	mov    edi,DWORD PTR [r14+0x1bc]
    956e:	mov    esi,DWORD PTR [r8]
    9571:	mov    r8d,DWORD PTR [rbp+rax*1+0x0]
    9576:	add    esi,DWORD PTR [r9+rax*1]
    957a:	add    esi,edi
    957c:	cmp    r8d,esi
    957f:	jge    958f <Plan7ESTViterbi+0x36f>
    9581:	mov    DWORD PTR [rbp+rax*1+0x0],esi
    9585:	mov    edi,DWORD PTR [r14+0x1bc]
    958c:	mov    r8d,esi
    958f:	mov    rsi,QWORD PTR [r12-0x10]
    9594:	mov    edx,DWORD PTR [rdx]
    9596:	add    edx,DWORD PTR [rsi+rax*1]
    9599:	add    edi,edx
    959b:	cmp    edi,r8d
    959e:	jle    95a4 <Plan7ESTViterbi+0x384>
    95a0:	mov    DWORD PTR [rbp+rax*1+0x0],edi
    95a4:	add    DWORD PTR [rsp+0x4],0x1
    95a9:	add    rax,0x4
    95ad:	mov    edx,DWORD PTR [rsp+0x4]
    95b1:	add    rcx,0x4
    95b5:	cmp    DWORD PTR [r14+0x88],edx
    95bc:	jl     9760 <Plan7ESTViterbi+0x540>
    95c2:	mov    rdx,QWORD PTR [r14+0x138]
    95c9:	cmp    DWORD PTR [rsp],0x2
    95cd:	lea    rsi,[rax-0x4]
    95d1:	mov    r11,QWORD PTR [rdx]
    95d4:	mov    r10,QWORD PTR [rdx+0x18]
    95d8:	je     9668 <Plan7ESTViterbi+0x448>
    95de:	mov    rdi,QWORD PTR [r15-0x8]
    95e2:	mov    r8d,DWORD PTR [r11+rax*1-0x4]
    95e7:	mov    rbx,QWORD PTR [rsp+0x8]
    95ec:	mov    r9d,DWORD PTR [rdi+rax*1-0x4]
    95f1:	mov    rdi,QWORD PTR [r12-0x8]
    95f6:	add    r9d,r8d
    95f9:	mov    DWORD PTR [rcx],r9d
    95fc:	mov    r8d,DWORD PTR [r10+rax*1-0x4]
    9601:	add    r8d,DWORD PTR [rdi+rax*1-0x4]
    9606:	cmp    r8d,r9d
    9609:	cmovl  r8d,r9d
    960d:	mov    DWORD PTR [rcx],r8d
    9610:	mov    r9,QWORD PTR [r14+0x170]
    9617:	mov    rdi,QWORD PTR [rbx-0x8]
    961b:	mov    rbx,QWORD PTR [rsp+0x20]
    9620:	mov    edi,DWORD PTR [rdi]
    9622:	add    edi,DWORD PTR [r9+rax*1]
    9626:	cmp    edi,r8d
    9629:	cmovl  edi,r8d
    962d:	mov    DWORD PTR [rcx],edi
    962f:	mov    rdx,QWORD PTR [rdx+0x28]
    9633:	mov    r9,QWORD PTR [r13-0x8]
    9637:	mov    r8d,DWORD PTR [rdx+rax*1-0x4]
    963c:	add    r8d,DWORD PTR [r9+rax*1-0x4]
    9641:	cmp    r8d,edi
    9644:	cmovge edi,r8d
    9648:	mov    DWORD PTR [rcx],edi
    964a:	mov    rdx,QWORD PTR [r14+0x1a8]
    9651:	mov    rdx,QWORD PTR [rdx+rbx*1]
    9655:	add    edi,DWORD PTR [rdx+rax*1]
    9658:	mov    rdx,QWORD PTR [r14+0x138]
    965f:	mov    DWORD PTR [rcx],edi
    9661:	mov    r11,QWORD PTR [rdx]
    9664:	mov    r10,QWORD PTR [rdx+0x18]
    9668:	mov    r8,QWORD PTR [r15]
    966b:	lea    rdi,[r11+rsi*1]
    966f:	mov    r9d,DWORD PTR [r14+0x1b8]
    9676:	mov    QWORD PTR [rsp+0x28],rdi
    967b:	mov    edi,DWORD PTR [rdi]
    967d:	mov    QWORD PTR [rsp+0x10],r8
    9682:	add    edi,DWORD PTR [r8+rsi*1]
    9686:	mov    r8d,DWORD PTR [rcx]
    9689:	add    edi,r9d
    968c:	cmp    r8d,edi
    968f:	jge    969d <Plan7ESTViterbi+0x47d>
    9691:	mov    DWORD PTR [rcx],edi
    9693:	mov    r9d,DWORD PTR [r14+0x1b8]
    969a:	mov    r8d,edi
    969d:	mov    r11,QWORD PTR [r12]
    96a1:	lea    rdi,[r10+rsi*1]
    96a5:	mov    QWORD PTR [rsp+0x30],rdi
    96aa:	mov    edi,DWORD PTR [rdi]
    96ac:	add    edi,DWORD PTR [r11+rsi*1]
    96b0:	mov    QWORD PTR [rsp+0x18],r11
    96b5:	add    edi,r9d
    96b8:	cmp    edi,r8d
    96bb:	jle    96c9 <Plan7ESTViterbi+0x4a9>
    96bd:	mov    DWORD PTR [rcx],edi
    96bf:	mov    r9d,DWORD PTR [r14+0x1b8]
    96c6:	mov    r8d,edi
    96c9:	mov    rbx,QWORD PTR [rsp+0x8]
    96ce:	mov    r11,QWORD PTR [r14+0x170]
    96d5:	mov    r10,QWORD PTR [rbx]
    96d8:	add    r11,rax
    96db:	mov    edi,DWORD PTR [r11]
    96de:	add    edi,DWORD PTR [r10]
    96e1:	add    edi,r9d
    96e4:	cmp    edi,r8d
    96e7:	jle    96f5 <Plan7ESTViterbi+0x4d5>
    96e9:	mov    DWORD PTR [rcx],edi
    96eb:	mov    r9d,DWORD PTR [r14+0x1b8]
    96f2:	mov    r8d,edi
    96f5:	mov    r10,QWORD PTR [rdx+0x28]
    96f9:	mov    rbx,QWORD PTR [r13+0x0]
    96fd:	add    r10,rsi
    9700:	mov    edi,DWORD PTR [r10]
    9703:	add    edi,DWORD PTR [rbx+rsi*1]
    9706:	add    edi,r9d
    9709:	cmp    edi,r8d
    970c:	jle    9710 <Plan7ESTViterbi+0x4f0>
    970e:	mov    DWORD PTR [rcx],edi
    9710:	cmp    DWORD PTR [rsp],0x3
    9714:	jg     9408 <Plan7ESTViterbi+0x1e8>
    971a:	mov    rdi,QWORD PTR [rdx+0x10]
    971e:	mov    r10,QWORD PTR [rsp+0x38]
    9723:	mov    r8d,DWORD PTR [rcx-0x4]
    9727:	add    r8d,DWORD PTR [rdi+rsi*1]
    972b:	mov    r9d,DWORD PTR [r10+rax*1-0x4]
    9730:	mov    DWORD PTR [r10+rax*1],r8d
    9734:	mov    edi,r8d
    9737:	mov    r8,QWORD PTR [rdx+0x30]
    973b:	add    r9d,DWORD PTR [r8+rsi*1]
    973f:	cmp    r9d,edi
    9742:	cmovge edi,r9d
    9746:	cmp    DWORD PTR [rsp],0x2
    974a:	mov    DWORD PTR [r10+rax*1],edi
    974e:	jne    94c7 <Plan7ESTViterbi+0x2a7>
    9754:	jmp    950b <Plan7ESTViterbi+0x2eb>
    9759:	nop    DWORD PTR [rax+0x0]
    9760:	mov    rbx,r13
    9763:	mov    r13,QWORD PTR [rsp+0x8]
    9768:	mov    r8,QWORD PTR [r13+0x8]
    976c:	mov    rsi,QWORD PTR [r13+0x10]
    9770:	mov    edi,DWORD PTR [r14+0x154]
    9777:	mov    rcx,QWORD PTR [rsp+0x38]
    977c:	add    edi,DWORD PTR [r8+0x10]
    9780:	mov    DWORD PTR [rsi+0x10],edi
    9783:	movsxd rax,DWORD PTR [r14+0x88]
    978a:	mov    ecx,DWORD PTR [rcx+rax*4]
    978d:	mov    DWORD PTR [rsi+0x4],ecx
    9790:	mov    eax,DWORD PTR [r14+0x88]
    9797:	test   eax,eax
    9799:	jle    97ce <Plan7ESTViterbi+0x5ae>
    979b:	mov    r9,QWORD PTR [r14+0x178]
    97a2:	mov    r10,QWORD PTR [rsp+0x40]
    97a7:	mov    eax,0x1
    97ac:	nop    DWORD PTR [rax+0x0]
    97b0:	mov    edx,DWORD PTR [r9+rax*4]
    97b4:	add    edx,DWORD PTR [r10+rax*4]
    97b8:	cmp    edx,ecx
    97ba:	jle    97c1 <Plan7ESTViterbi+0x5a1>
    97bc:	mov    DWORD PTR [rsi+0x4],edx
    97bf:	mov    ecx,edx
    97c1:	add    rax,0x1
    97c5:	cmp    DWORD PTR [r14+0x88],eax
    97cc:	jge    97b0 <Plan7ESTViterbi+0x590>
    97ce:	mov    eax,DWORD PTR [r14+0x16c]
    97d5:	add    eax,DWORD PTR [r8+0xc]
    97d9:	mov    DWORD PTR [rsi+0xc],eax
    97dc:	mov    edx,eax
    97de:	mov    eax,DWORD PTR [r14+0x15c]
    97e5:	add    eax,ecx
    97e7:	cmp    eax,edx
    97e9:	cmovl  eax,edx
    97ec:	mov    DWORD PTR [rsi+0xc],eax
    97ef:	add    edi,DWORD PTR [r14+0x150]
    97f6:	mov    DWORD PTR [rsi],edi
    97f8:	add    eax,DWORD PTR [r14+0x168]
    97ff:	cmp    eax,edi
    9801:	cmovl  eax,edi
    9804:	mov    DWORD PTR [rsi],eax
    9806:	mov    eax,DWORD PTR [r14+0x164]
    980d:	add    eax,DWORD PTR [r8+0x8]
    9811:	mov    DWORD PTR [rsi+0x8],eax
    9814:	add    ecx,DWORD PTR [r14+0x158]
    981b:	cmp    ecx,eax
    981d:	cmovl  ecx,eax
    9820:	add    DWORD PTR [rsp],0x1
    9824:	mov    eax,DWORD PTR [rsp]
    9827:	mov    DWORD PTR [rsi+0x8],ecx
    982a:	cmp    eax,DWORD PTR [rsp+0x58]
    982e:	je     98a8 <Plan7ESTViterbi+0x688>
    9830:	mov    rax,QWORD PTR [rbx+0x18]
    9834:	mov    rbp,QWORD PTR [r12+0x18]
    9839:	mov    r11d,0x40
    983f:	mov    rcx,QWORD PTR [rsp+0x48]
    9844:	mov    DWORD PTR [rax],0xc521974f
    984a:	mov    QWORD PTR [rsp+0x38],rax
    984f:	mov    rax,QWORD PTR [r15+0x18]
    9853:	mov    DWORD PTR [rbp+0x0],0xc521974f
    985a:	mov    QWORD PTR [rsp+0x40],rax
    985f:	mov    DWORD PTR [rax],0xc521974f
    9865:	movsx  eax,BYTE PTR [rcx]
    9868:	cmp    al,0x3
    986a:	jg     9888 <Plan7ESTViterbi+0x668>
    986c:	movsx  edx,BYTE PTR [rcx+0x1]
    9870:	cmp    dl,0x3
    9873:	jg     9888 <Plan7ESTViterbi+0x668>
    9875:	movsx  ecx,BYTE PTR [rcx+0x2]
    9879:	cmp    cl,0x3
    987c:	jg     9888 <Plan7ESTViterbi+0x668>
    987e:	lea    eax,[rdx+rax*4]
    9881:	lea    r11d,[rcx+rax*4]
    9885:	nop    DWORD PTR [rax]
    9888:	add    rbx,0x8
    988c:	add    r12,0x8
    9890:	add    r15,0x8
    9894:	add    r13,0x8
    9898:	add    QWORD PTR [rsp+0x48],0x1
    989e:	jmp    93c0 <Plan7ESTViterbi+0x1a0>
    98a3:	nop    DWORD PTR [rax+rax*1+0x0]
    98a8:	movsxd rax,DWORD PTR [rsp+0x5c]
    98ad:	mov    rcx,QWORD PTR [rsp+0x50]
    98b2:	mov    ebp,DWORD PTR [r14+0x160]
    98b9:	mov    rax,QWORD PTR [rcx+rax*8]
    98bd:	add    ebp,DWORD PTR [rax+0x8]
    98c0:	cmp    QWORD PTR [rsp+0x60],0x0
    98c6:	je     98ea <Plan7ESTViterbi+0x6ca>
    98c8:	mov    rax,QWORD PTR [rsp+0x60]
    98cd:	mov    rcx,QWORD PTR [rsp+0x68]
    98d2:	mov    QWORD PTR [rax],rcx
    98d5:	add    rsp,0x78
    98d9:	mov    edi,ebp
    98db:	pop    rbx
    98dc:	pop    rbp
    98dd:	pop    r12
    98df:	pop    r13
    98e1:	pop    r14
    98e3:	pop    r15
    98e5:	jmp    17820 <Scorify>
    98ea:	mov    rdi,QWORD PTR [rsp+0x68]
    98ef:	call   5810 <FreePlan7Matrix>
    98f4:	jmp    98d5 <Plan7ESTViterbi+0x6b5>
    98f6:	xor    eax,eax
    98f8:	jmp    92e8 <Plan7ESTViterbi+0xc8>
    98fd:	nop    DWORD PTR [rax]

0000000000009900 <ShadowTrace>:
    9900:	endbr64 
    9904:	push   r15
    9906:	lea    r15,[rip+0x33a1b]        # 3d328 <_IO_stdin_used+0x328>
    990d:	push   r14
    990f:	mov    r14d,0x8
    9915:	push   r13
    9917:	push   r12
    9919:	push   rbp
    991a:	push   rbx
    991b:	mov    ebx,edx
    991d:	sub    rsp,0x58
    9921:	mov    QWORD PTR [rsp+0x18],rdi
    9926:	mov    QWORD PTR [rsp],rsi
    992a:	lea    rsi,[rsp+0x40]
    992f:	mov    DWORD PTR [rsp+0xc],edx
    9933:	lea    edx,[rdx+rdx*1+0x6]
    9937:	mov    edi,edx
    9939:	mov    rax,QWORD PTR fs:0x28
    9942:	mov    QWORD PTR [rsp+0x48],rax
    9947:	xor    eax,eax
    9949:	mov    DWORD PTR [rsp+0x10],edx
    994d:	call   209f0 <P7AllocTrace>
    9952:	mov    rax,QWORD PTR [rsp+0x40]
    9957:	mov    edx,DWORD PTR [rsp+0x10]
    995b:	xor    r10d,r10d
    995e:	mov    r9,QWORD PTR [rsp+0x18]
    9963:	mov    rax,QWORD PTR [rax+0x8]
    9967:	mov    ebp,edx
    9969:	mov    BYTE PTR [rax],0x9
    996c:	mov    rax,QWORD PTR [rsp+0x40]
    9971:	mov    rcx,QWORD PTR [rax+0x10]
    9975:	mov    rax,QWORD PTR [rax+0x18]
    9979:	mov    DWORD PTR [rcx],0x0
    997f:	mov    ecx,ebx
    9981:	mov    ebx,0x1
    9986:	mov    DWORD PTR [rax],0x0
    998c:	nop    DWORD PTR [rax+0x0]
    9990:	movsxd r12,ebx
    9993:	lea    r8d,[rbx+0x1]
    9997:	lea    r13,[r12*4+0x0]
    999f:	cmp    r14b,0xa
    99a3:	ja     9de0 <ShadowTrace+0x4e0>
    99a9:	movzx  eax,r14b
    99ad:	movsxd rax,DWORD PTR [r15+rax*4]
    99b1:	add    rax,r15
    99b4:	notrack jmp rax
    99b7:	nop    WORD PTR [rax+rax*1+0x0]
    99c0:	mov    rax,QWORD PTR [rsp+0x40]
    99c5:	movsxd r14,ecx
    99c8:	mov    rax,QWORD PTR [rax+0x8]
    99cc:	mov    BYTE PTR [rax+r12*1],0xa
    99d1:	mov    rax,QWORD PTR [r9]
    99d4:	mov    rdi,QWORD PTR [rsp+0x40]
    99d9:	mov    rax,QWORD PTR [rax+r14*8]
    99dd:	movzx  r14d,BYTE PTR [rax+0x3]
    99e2:	mov    rax,QWORD PTR [rdi+0x10]
    99e6:	mov    DWORD PTR [rax+r13*1],0x0
    99ee:	xor    eax,eax
    99f0:	cmp    r14b,0xa
    99f4:	je     9aba <ShadowTrace+0x1ba>
    99fa:	mov    rsi,QWORD PTR [rdi+0x18]
    99fe:	movsxd r12,r8d
    9a01:	mov    DWORD PTR [rsi+r13*1],eax
    9a05:	lea    eax,[rbx+0x2]
    9a08:	add    r13,0x4
    9a0c:	mov    ebx,r8d
    9a0f:	cmp    ebp,ebx
    9a11:	je     9be0 <ShadowTrace+0x2e0>
    9a17:	cmp    r14b,0x4
    9a1b:	jne    9990 <ShadowTrace+0x90>
    9a21:	mov    rdx,QWORD PTR [rsp+0x40]
    9a26:	mov    rdx,QWORD PTR [rdx+0x8]
    9a2a:	mov    BYTE PTR [rdx+r12*1],0x4
    9a2f:	mov    rdi,QWORD PTR [rsp+0x40]
    9a34:	mov    rdx,QWORD PTR [rdi+0x10]
    9a38:	mov    DWORD PTR [rdx+r13*1],0x0
    9a40:	mov    rdx,QWORD PTR [rdi+0x18]
    9a44:	mov    DWORD PTR [rdx+r13*1],0x0
    9a4c:	mov    DWORD PTR [rdi],eax
    9a4e:	call   20bf0 <P7ReverseTrace>
    9a53:	mov    rax,QWORD PTR [rsp+0x40]
    9a58:	mov    rsi,QWORD PTR [rsp+0x48]
    9a5d:	xor    rsi,QWORD PTR fs:0x28
    9a66:	jne    a073 <ShadowTrace+0x773>
    9a6c:	add    rsp,0x58
    9a70:	pop    rbx
    9a71:	pop    rbp
    9a72:	pop    r12
    9a74:	pop    r13
    9a76:	pop    r14
    9a78:	pop    r15
    9a7a:	ret    
    9a7b:	nop    DWORD PTR [rax+rax*1+0x0]
    9a80:	mov    rax,QWORD PTR [rsp+0x40]
    9a85:	movsxd r14,ecx
    9a88:	mov    rax,QWORD PTR [rax+0x8]
    9a8c:	mov    BYTE PTR [rax+r12*1],0x8
    9a91:	mov    rax,QWORD PTR [r9]
    9a94:	mov    rdi,QWORD PTR [rsp+0x40]
    9a99:	mov    rax,QWORD PTR [rax+r14*8]
    9a9d:	movzx  r14d,BYTE PTR [rax+0x2]
    9aa2:	mov    rax,QWORD PTR [rdi+0x10]
    9aa6:	mov    DWORD PTR [rax+r13*1],0x0
    9aae:	xor    eax,eax
    9ab0:	cmp    r14b,0x8
    9ab4:	jne    99fa <ShadowTrace+0xfa>
    9aba:	mov    eax,ecx
    9abc:	sub    ecx,0x1
    9abf:	jmp    99fa <ShadowTrace+0xfa>
    9ac4:	nop    DWORD PTR [rax+0x0]
    9ac8:	mov    rax,QWORD PTR [rsp+0x40]
    9acd:	movsxd r14,ecx
    9ad0:	mov    DWORD PTR [rsp+0x30],r8d
    9ad5:	movss  xmm1,DWORD PTR [rip+0x338bf]        # 3d39c <_IO_stdin_used+0x39c>
    9add:	mov    DWORD PTR [rsp+0x28],ecx
    9ae1:	mov    rax,QWORD PTR [rax+0x8]
    9ae5:	mov    QWORD PTR [rsp+0x20],r9
    9aea:	mov    BYTE PTR [rax+r12*1],0x7
    9aef:	mov    rax,QWORD PTR [rsp+0x40]
    9af4:	mov    rsi,QWORD PTR [rax+0x10]
    9af8:	mov    rax,QWORD PTR [rax+0x18]
    9afc:	mov    DWORD PTR [rsi+r13*1],0x0
    9b04:	mov    DWORD PTR [rax+r13*1],0x0
    9b0c:	mov    rax,QWORD PTR [r9+0x20]
    9b10:	mov    r13,QWORD PTR [rsp]
    9b14:	movsxd r10,DWORD PTR [rax+r14*4]
    9b18:	mov    rax,QWORD PTR [r13+0xd8]
    9b1f:	mov    DWORD PTR [rsp+0x18],r10d
    9b24:	movss  xmm0,DWORD PTR [rax+r10*4]
    9b2a:	mov    QWORD PTR [rsp+0x10],r10
    9b2f:	call   17710 <Prob2Score>
    9b34:	pxor   xmm0,xmm0
    9b38:	mov    r10,QWORD PTR [rsp+0x10]
    9b3d:	pxor   xmm1,xmm1
    9b41:	cvtsi2sd xmm0,eax
    9b45:	mov    rax,QWORD PTR [r13+0x178]
    9b4c:	mov    r11d,DWORD PTR [rsp+0x18]
    9b51:	addsd  xmm0,QWORD PTR [rip+0x33827]        # 3d380 <_IO_stdin_used+0x380>
    9b59:	mov    r9,QWORD PTR [rsp+0x20]
    9b5e:	cvtsi2sd xmm1,DWORD PTR [rax+r10*4]
    9b64:	mov    ecx,DWORD PTR [rsp+0x28]
    9b68:	mov    r8d,DWORD PTR [rsp+0x30]
    9b6d:	comisd xmm1,xmm0
    9b71:	jae    9e30 <ShadowTrace+0x530>
    9b77:	cmp    r8d,ebp
    9b7a:	je     9fd0 <ShadowTrace+0x6d0>
    9b80:	movsxd r12,r8d
    9b83:	mov    rdi,QWORD PTR [rsp+0x40]
    9b88:	add    ebx,0x2
    9b8b:	lea    r13,[r12*4+0x0]
    9b93:	mov    rax,QWORD PTR [rdi+0x8]
    9b97:	mov    BYTE PTR [rax+r12*1],0x1
    9b9c:	mov    rax,QWORD PTR [r9+0x8]
    9ba0:	movsxd r12,ebx
    9ba3:	mov    rdi,QWORD PTR [rsp+0x40]
    9ba8:	mov    rax,QWORD PTR [rax+r14*8]
    9bac:	movzx  r14d,BYTE PTR [rax+r10*1]
    9bb1:	mov    rax,QWORD PTR [rdi+0x10]
    9bb5:	lea    r10d,[r11-0x1]
    9bb9:	mov    DWORD PTR [rax+r13*1],r11d
    9bbd:	mov    rax,QWORD PTR [rdi+0x18]
    9bc1:	mov    DWORD PTR [rax+r13*1],ecx
    9bc5:	lea    r13,[r12*4+0x0]
    9bcd:	lea    eax,[rbx+0x1]
    9bd0:	sub    ecx,0x1
    9bd3:	cmp    ebp,ebx
    9bd5:	jne    9a17 <ShadowTrace+0x117>
    9bdb:	nop    DWORD PTR [rax+rax*1+0x0]
    9be0:	add    ebp,DWORD PTR [rsp+0xc]
    9be4:	mov    rdi,QWORD PTR [rsp+0x40]
    9be9:	mov    DWORD PTR [rsp+0x28],eax
    9bed:	mov    esi,ebp
    9bef:	mov    QWORD PTR [rsp+0x20],r9
    9bf4:	mov    DWORD PTR [rsp+0x18],r10d
    9bf9:	mov    DWORD PTR [rsp+0x10],ecx
    9bfd:	call   20a70 <P7ReallocTrace>
    9c02:	mov    eax,DWORD PTR [rsp+0x28]
    9c06:	mov    r9,QWORD PTR [rsp+0x20]
    9c0b:	mov    r10d,DWORD PTR [rsp+0x18]
    9c10:	mov    ecx,DWORD PTR [rsp+0x10]
    9c14:	jmp    9a17 <ShadowTrace+0x117>
    9c19:	nop    DWORD PTR [rax+0x0]
    9c20:	mov    rsi,QWORD PTR [rsp]
    9c24:	movsxd r14,r10d
    9c27:	mov    QWORD PTR [rsp+0x28],r9
    9c2c:	add    r14,0x1
    9c30:	mov    DWORD PTR [rsp+0x20],ecx
    9c34:	mov    rax,QWORD PTR [rsi+0xd0]
    9c3b:	movss  xmm1,DWORD PTR [rsi+0x130]
    9c43:	mov    DWORD PTR [rsp+0x18],r8d
    9c48:	mov    DWORD PTR [rsp+0x10],r10d
    9c4d:	movss  xmm0,DWORD PTR [rax+r14*4]
    9c53:	call   17710 <Prob2Score>
    9c58:	mov    rsi,QWORD PTR [rsp]
    9c5c:	pxor   xmm0,xmm0
    9c60:	pxor   xmm1,xmm1
    9c64:	cvtsi2sd xmm0,eax
    9c68:	mov    rdi,QWORD PTR [rsp+0x40]
    9c6d:	mov    r10d,DWORD PTR [rsp+0x10]
    9c72:	mov    rax,QWORD PTR [rsi+0x170]
    9c79:	addsd  xmm0,QWORD PTR [rip+0x336ff]        # 3d380 <_IO_stdin_used+0x380>
    9c81:	mov    r8d,DWORD PTR [rsp+0x18]
    9c86:	mov    ecx,DWORD PTR [rsp+0x20]
    9c8a:	cvtsi2sd xmm1,DWORD PTR [rax+r14*4]
    9c90:	mov    r9,QWORD PTR [rsp+0x28]
    9c95:	comisd xmm1,xmm0
    9c99:	jae    9f20 <ShadowTrace+0x620>
    9c9f:	mov    ebx,r8d
    9ca2:	mov    rax,QWORD PTR [rdi+0x8]
    9ca6:	movsxd r14,ecx
    9ca9:	mov    BYTE PTR [rax+r12*1],0x6
    9cae:	mov    rax,QWORD PTR [r9]
    9cb1:	movsxd r12,ebx
    9cb4:	mov    rdi,QWORD PTR [rsp+0x40]
    9cb9:	mov    rax,QWORD PTR [rax+r14*8]
    9cbd:	movzx  r14d,BYTE PTR [rax]
    9cc1:	mov    rax,QWORD PTR [rdi+0x10]
    9cc5:	mov    DWORD PTR [rax+r13*1],0x0
    9ccd:	mov    rax,QWORD PTR [rdi+0x18]
    9cd1:	mov    DWORD PTR [rax+r13*1],0x0
    9cd9:	lea    r13,[r12*4+0x0]
    9ce1:	lea    eax,[rbx+0x1]
    9ce4:	jmp    9a0f <ShadowTrace+0x10f>
    9ce9:	nop    DWORD PTR [rax+0x0]
    9cf0:	mov    rax,QWORD PTR [rsp+0x40]
    9cf5:	movsxd r14,ecx
    9cf8:	mov    rax,QWORD PTR [rax+0x8]
    9cfc:	mov    BYTE PTR [rax+r12*1],0x5
    9d01:	mov    rax,QWORD PTR [r9]
    9d04:	mov    rdi,QWORD PTR [rsp+0x40]
    9d09:	mov    rax,QWORD PTR [rax+r14*8]
    9d0d:	movzx  r14d,BYTE PTR [rax+0x4]
    9d12:	mov    rax,QWORD PTR [rdi+0x10]
    9d16:	mov    DWORD PTR [rax+r13*1],0x0
    9d1e:	xor    eax,eax
    9d20:	cmp    r14b,0x5
    9d24:	jne    99fa <ShadowTrace+0xfa>
    9d2a:	mov    eax,ecx
    9d2c:	sub    ecx,0x1
    9d2f:	jmp    99fa <ShadowTrace+0xfa>
    9d34:	nop    DWORD PTR [rax+0x0]
    9d38:	mov    rax,QWORD PTR [rsp+0x40]
    9d3d:	movsxd rdi,ecx
    9d40:	mov    rax,QWORD PTR [rax+0x8]
    9d44:	mov    BYTE PTR [rax+r12*1],0x3
    9d49:	mov    rsi,QWORD PTR [r9+0x10]
    9d4d:	movsxd rax,r10d
    9d50:	movsxd r12,r8d
    9d53:	mov    rsi,QWORD PTR [rsi+rdi*8]
    9d57:	mov    rdi,QWORD PTR [rsp+0x40]
    9d5c:	movzx  r14d,BYTE PTR [rsi+rax*1]
    9d61:	mov    rax,QWORD PTR [rdi+0x10]
    9d65:	mov    DWORD PTR [rax+r13*1],r10d
    9d69:	mov    rax,QWORD PTR [rdi+0x18]
    9d6d:	mov    DWORD PTR [rax+r13*1],ecx
    9d71:	lea    eax,[rbx+0x2]
    9d74:	add    r13,0x4
    9d78:	sub    ecx,0x1
    9d7b:	mov    ebx,r8d
    9d7e:	jmp    9a0f <ShadowTrace+0x10f>
    9d83:	nop    DWORD PTR [rax+rax*1+0x0]
    9d88:	mov    rax,QWORD PTR [rsp+0x40]
    9d8d:	movsxd r14,ecx
    9d90:	mov    rax,QWORD PTR [rax+0x8]
    9d94:	mov    BYTE PTR [rax+r12*1],0x2
    9d99:	mov    rsi,QWORD PTR [r9+0x18]
    9d9d:	movsxd rax,r10d
    9da0:	movsxd r12,r8d
    9da3:	mov    rdi,QWORD PTR [rsp+0x40]
    9da8:	mov    rsi,QWORD PTR [rsi+r14*8]
    9dac:	movzx  r14d,BYTE PTR [rsi+rax*1]
    9db1:	mov    rax,QWORD PTR [rdi+0x10]
    9db5:	mov    DWORD PTR [rax+r13*1],r10d
    9db9:	mov    rax,QWORD PTR [rdi+0x18]
    9dbd:	sub    r10d,0x1
    9dc1:	mov    DWORD PTR [rax+r13*1],0x0
    9dc9:	lea    eax,[rbx+0x2]
    9dcc:	add    r13,0x4
    9dd0:	mov    ebx,r8d
    9dd3:	jmp    9a0f <ShadowTrace+0x10f>
    9dd8:	nop    DWORD PTR [rax+rax*1+0x0]
    9de0:	movsx  edi,r14b
    9de4:	mov    QWORD PTR [rsp+0x28],r9
    9de9:	mov    DWORD PTR [rsp+0x20],r10d
    9dee:	mov    DWORD PTR [rsp+0x18],ecx
    9df2:	mov    DWORD PTR [rsp+0x10],r8d
    9df7:	call   b100 <Statetype>
    9dfc:	lea    rdi,[rip+0x33485]        # 3d288 <_IO_stdin_used+0x288>
    9e03:	mov    rsi,rax
    9e06:	xor    eax,eax
    9e08:	call   317f0 <Die>
    9e0d:	mov    r8d,DWORD PTR [rsp+0x10]
    9e12:	mov    r9,QWORD PTR [rsp+0x28]
    9e17:	mov    r10d,DWORD PTR [rsp+0x20]
    9e1c:	mov    ecx,DWORD PTR [rsp+0x18]
    9e20:	mov    eax,r8d
    9e23:	jmp    9a0f <ShadowTrace+0x10f>
    9e28:	nop    DWORD PTR [rax+rax*1+0x0]
    9e30:	mov    rax,QWORD PTR [rsp]
    9e34:	mov    eax,DWORD PTR [rax+0x88]
    9e3a:	cmp    r11d,eax
    9e3d:	jge    9b77 <ShadowTrace+0x277>
    9e43:	movsxd r13,r8d
    9e46:	lea    ebx,[rbx+rax*1+0x2]
    9e4a:	mov    DWORD PTR [rsp+0x10],ecx
    9e4e:	mov    rdi,QWORD PTR [rsp+0x40]
    9e53:	mov    QWORD PTR [rsp+0x30],r14
    9e58:	mov    r12,r13
    9e5b:	mov    r14d,ebx
    9e5e:	mov    r13d,r11d
    9e61:	mov    ebx,ebp
    9e63:	mov    DWORD PTR [rsp+0x18],eax
    9e67:	mov    ebp,eax
    9e69:	mov    DWORD PTR [rsp+0x20],r8d
    9e6e:	mov    QWORD PTR [rsp+0x28],r9
    9e73:	mov    QWORD PTR [rsp+0x38],r10
    9e78:	jmp    9e8c <ShadowTrace+0x58c>
    9e7a:	nop    WORD PTR [rax+rax*1+0x0]
    9e80:	sub    ebp,0x1
    9e83:	add    r12,0x1
    9e87:	cmp    r13d,ebp
    9e8a:	je     9ed3 <ShadowTrace+0x5d3>
    9e8c:	mov    rcx,QWORD PTR [rdi+0x8]
    9e90:	mov    BYTE PTR [rcx+r12*1],0x2
    9e95:	mov    rdi,QWORD PTR [rsp+0x40]
    9e9a:	mov    rcx,QWORD PTR [rdi+0x10]
    9e9e:	mov    DWORD PTR [rcx+r12*4],ebp
    9ea2:	mov    rcx,QWORD PTR [rdi+0x18]
    9ea6:	mov    DWORD PTR [rcx+r12*4],0x0
    9eae:	mov    ecx,r14d
    9eb1:	sub    ecx,ebp
    9eb3:	cmp    ebx,ecx
    9eb5:	jne    9e80 <ShadowTrace+0x580>
    9eb7:	add    ebx,DWORD PTR [rsp+0xc]
    9ebb:	sub    ebp,0x1
    9ebe:	add    r12,0x1
    9ec2:	mov    esi,ebx
    9ec4:	call   20a70 <P7ReallocTrace>
    9ec9:	mov    rdi,QWORD PTR [rsp+0x40]
    9ece:	cmp    r13d,ebp
    9ed1:	jne    9e8c <ShadowTrace+0x58c>
    9ed3:	mov    eax,DWORD PTR [rsp+0x18]
    9ed7:	mov    r8d,DWORD PTR [rsp+0x20]
    9edc:	mov    ebp,ebx
    9ede:	mov    r11d,r13d
    9ee1:	mov    ecx,DWORD PTR [rsp+0x10]
    9ee5:	mov    r9,QWORD PTR [rsp+0x28]
    9eea:	add    r8d,eax
    9eed:	mov    r14,QWORD PTR [rsp+0x30]
    9ef2:	mov    r10,QWORD PTR [rsp+0x38]
    9ef7:	sub    r8d,r13d
    9efa:	cmp    ebx,r8d
    9efd:	je     a02a <ShadowTrace+0x72a>
    9f03:	movsxd r12,r8d
    9f06:	lea    ebx,[r8+0x1]
    9f0a:	lea    r13,[r12*4+0x0]
    9f12:	jmp    9b93 <ShadowTrace+0x293>
    9f17:	nop    WORD PTR [rax+rax*1+0x0]
    9f20:	test   r10d,r10d
    9f23:	jle    9c9f <ShadowTrace+0x39f>
    9f29:	add    ebx,r10d
    9f2c:	mov    QWORD PTR [rsp+0x20],r9
    9f31:	mov    r13d,r10d
    9f34:	mov    r14d,ecx
    9f37:	mov    eax,ebx
    9f39:	mov    ebx,ebp
    9f3b:	mov    rbp,r12
    9f3e:	mov    r12d,eax
    9f41:	jmp    9f51 <ShadowTrace+0x651>
    9f43:	nop    DWORD PTR [rax+rax*1+0x0]
    9f48:	add    rbp,0x1
    9f4c:	test   r13d,r13d
    9f4f:	je     9f9a <ShadowTrace+0x69a>
    9f51:	mov    rdx,QWORD PTR [rdi+0x8]
    9f55:	mov    ecx,r13d
    9f58:	sub    r13d,0x1
    9f5c:	mov    BYTE PTR [rdx+rbp*1],0x2
    9f60:	mov    rdi,QWORD PTR [rsp+0x40]
    9f65:	mov    rdx,QWORD PTR [rdi+0x10]
    9f69:	mov    DWORD PTR [rdx+rbp*4],ecx
    9f6c:	mov    rdx,QWORD PTR [rdi+0x18]
    9f70:	mov    DWORD PTR [rdx+rbp*4],0x0
    9f77:	mov    edx,r12d
    9f7a:	sub    edx,r13d
    9f7d:	cmp    ebx,edx
    9f7f:	jne    9f48 <ShadowTrace+0x648>
    9f81:	add    ebx,DWORD PTR [rsp+0xc]
    9f85:	add    rbp,0x1
    9f89:	mov    esi,ebx
    9f8b:	call   20a70 <P7ReallocTrace>
    9f90:	mov    rdi,QWORD PTR [rsp+0x40]
    9f95:	test   r13d,r13d
    9f98:	jne    9f51 <ShadowTrace+0x651>
    9f9a:	mov    r10d,DWORD PTR [rsp+0x10]
    9f9f:	mov    r8d,DWORD PTR [rsp+0x18]
    9fa4:	mov    ebp,ebx
    9fa6:	mov    ecx,r14d
    9fa9:	mov    r9,QWORD PTR [rsp+0x20]
    9fae:	lea    ebx,[r10+r8*1-0x1]
    9fb3:	xor    r10d,r10d
    9fb6:	movsxd r12,ebx
    9fb9:	add    ebx,0x1
    9fbc:	lea    r13,[r12*4+0x0]
    9fc4:	jmp    9ca2 <ShadowTrace+0x3a2>
    9fc9:	nop    DWORD PTR [rax+0x0]
    9fd0:	mov    eax,DWORD PTR [rsp+0xc]
    9fd4:	mov    rdi,QWORD PTR [rsp+0x40]
    9fd9:	mov    DWORD PTR [rsp+0x28],ecx
    9fdd:	movsxd r12,ebp
    9fe0:	mov    QWORD PTR [rsp+0x30],r9
    9fe5:	lea    ebx,[rbp+0x1]
    9fe8:	lea    r13,[r12*4+0x0]
    9ff0:	add    eax,ebp
    9ff2:	mov    QWORD PTR [rsp+0x20],r10
    9ff7:	mov    esi,eax
    9ff9:	mov    DWORD PTR [rsp+0x18],r11d
    9ffe:	mov    DWORD PTR [rsp+0x10],eax
    a002:	call   20a70 <P7ReallocTrace>
    a007:	mov    eax,DWORD PTR [rsp+0x10]
    a00b:	mov    rdi,QWORD PTR [rsp+0x40]
    a010:	mov    r11d,DWORD PTR [rsp+0x18]
    a015:	mov    r10,QWORD PTR [rsp+0x20]
    a01a:	mov    ecx,DWORD PTR [rsp+0x28]
    a01e:	mov    r9,QWORD PTR [rsp+0x30]
    a023:	mov    ebp,eax
    a025:	jmp    9b93 <ShadowTrace+0x293>
    a02a:	add    ebp,DWORD PTR [rsp+0xc]
    a02e:	movsxd r12,ebx
    a031:	mov    DWORD PTR [rsp+0x20],ecx
    a035:	lea    ebx,[rbx+0x1]
    a038:	mov    esi,ebp
    a03a:	mov    QWORD PTR [rsp+0x28],r9
    a03f:	mov    QWORD PTR [rsp+0x18],r10
    a044:	mov    DWORD PTR [rsp+0x10],r13d
    a049:	lea    r13,[r12*4+0x0]
    a051:	call   20a70 <P7ReallocTrace>
    a056:	mov    rdi,QWORD PTR [rsp+0x40]
    a05b:	mov    r11d,DWORD PTR [rsp+0x10]
    a060:	mov    r10,QWORD PTR [rsp+0x18]
    a065:	mov    ecx,DWORD PTR [rsp+0x20]
    a069:	mov    r9,QWORD PTR [rsp+0x28]
    a06e:	jmp    9b93 <ShadowTrace+0x293>
    a073:	call   3570 <__stack_chk_fail@plt>
    a078:	movsxd r10,r10d
    a07b:	mov    rdi,QWORD PTR [rsp+0x40]
    a080:	mov    ebx,r8d
    a083:	movsxd r14,ecx
    a086:	mov    r11,r10
    a089:	jmp    9b93 <ShadowTrace+0x293>
    a08e:	xchg   ax,ax

000000000000a090 <P7ViterbiAlignAlignment>:
    a090:	endbr64 
    a094:	push   r15
    a096:	mov    r15,rdi
    a099:	push   r14
    a09b:	mov    r14,rsi
    a09e:	mov    esi,0x7fc
    a0a3:	push   r13
    a0a5:	push   r12
    a0a7:	push   rbp
    a0a8:	push   rbx
    a0a9:	sub    rsp,0xa8
    a0b0:	mov    rax,QWORD PTR fs:0x28
    a0b9:	mov    QWORD PTR [rsp+0x98],rax
    a0c1:	xor    eax,eax
    a0c3:	mov    eax,DWORD PTR [rdi+0x18]
    a0c6:	lea    rdi,[rip+0x330f3]        # 3d1c0 <_IO_stdin_used+0x1c0>
    a0cd:	lea    edx,[rax+0x1]
    a0d0:	movsxd rdx,edx
    a0d3:	shl    rdx,0x3
    a0d7:	call   36810 <sre_malloc>
    a0dc:	mov    esi,0x7fd
    a0e1:	lea    rdi,[rip+0x330d8]        # 3d1c0 <_IO_stdin_used+0x1c0>
    a0e8:	mov    QWORD PTR [rsp+0x60],rax
    a0ed:	mov    eax,DWORD PTR [r15+0x18]
    a0f1:	lea    edx,[rax+0x1]
    a0f4:	movsxd rdx,edx
    a0f7:	shl    rdx,0x2
    a0fb:	call   36810 <sre_malloc>
    a100:	mov    ebx,DWORD PTR [r15+0x18]
    a104:	mov    QWORD PTR [rsp+0x20],rax
    a109:	test   ebx,ebx
    a10b:	jle    a15d <P7ViterbiAlignAlignment+0xcd>
    a10d:	mov    rbp,QWORD PTR [rsp+0x60]
    a112:	mov    ebx,0x1
    a117:	nop    WORD PTR [rax+rax*1+0x0]
    a120:	movsxd rdx,DWORD PTR [rip+0x581d9]        # 62300 <Alphabet_size>
    a127:	mov    esi,0x7ff
    a12c:	lea    rdi,[rip+0x3308d]        # 3d1c0 <_IO_stdin_used+0x1c0>
    a133:	shl    rdx,0x2
    a137:	call   36810 <sre_malloc>
    a13c:	mov    esi,DWORD PTR [rip+0x581be]        # 62300 <Alphabet_size>
    a142:	pxor   xmm0,xmm0
    a146:	mov    QWORD PTR [rbp+rbx*8+0x0],rax
    a14b:	mov    rdi,rax
    a14e:	add    rbx,0x1
    a152:	call   3ad60 <FSet>
    a157:	cmp    DWORD PTR [r15+0x18],ebx
    a15b:	jge    a120 <P7ViterbiAlignAlignment+0x90>
    a15d:	mov    rax,QWORD PTR [rsp+0x20]
    a162:	mov    esi,DWORD PTR [r15+0x1c]
    a166:	mov    r13d,0x1
    a16c:	movabs rbp,0x8000000000006001
    a176:	mov    rdi,QWORD PTR [r15+0x10]
    a17a:	mov    DWORD PTR [rax],0xc61c3c00
    a180:	call   3ae20 <FSum>
    a185:	mov    r11d,DWORD PTR [r15+0x18]
    a189:	movss  DWORD PTR [rsp+0x8],xmm0
    a18f:	test   r11d,r11d
    a192:	jle    a247 <P7ViterbiAlignAlignment+0x1b7>
    a198:	mov    r12,QWORD PTR [rsp+0x60]
    a19d:	mov    QWORD PTR [rsp+0x10],r14
    a1a2:	mov    r14,r13
    a1a5:	nop    DWORD PTR [rax]
    a1a8:	mov    r10d,DWORD PTR [r15+0x1c]
    a1ac:	lea    r13,[r14-0x1]
    a1b0:	xor    ebx,ebx
    a1b2:	test   r10d,r10d
    a1b5:	jle    a1fd <P7ViterbiAlignAlignment+0x16d>
    a1b7:	nop    WORD PTR [rax+rax*1+0x0]
    a1c0:	mov    rax,QWORD PTR [r15]
    a1c3:	mov    rax,QWORD PTR [rax+rbx*8]
    a1c7:	movsx  esi,BYTE PTR [rax+r13*1]
    a1cc:	mov    eax,0x1
    a1d1:	lea    ecx,[rsi-0x20]
    a1d4:	cmp    cl,0x3f
    a1d7:	ja     a1e5 <P7ViterbiAlignAlignment+0x155>
    a1d9:	mov    rax,rbp
    a1dc:	shr    rax,cl
    a1df:	not    rax
    a1e2:	and    eax,0x1
    a1e5:	cmp    sil,0x7e
    a1e9:	je     a1f3 <P7ViterbiAlignAlignment+0x163>
    a1eb:	test   al,al
    a1ed:	jne    ab90 <P7ViterbiAlignAlignment+0xb00>
    a1f3:	add    rbx,0x1
    a1f7:	cmp    DWORD PTR [r15+0x1c],ebx
    a1fb:	jg     a1c0 <P7ViterbiAlignAlignment+0x130>
    a1fd:	mov    rdi,QWORD PTR [r12+r14*8]
    a201:	mov    esi,DWORD PTR [rip+0x580f9]        # 62300 <Alphabet_size>
    a207:	movss  xmm0,DWORD PTR [rip+0x3318d]        # 3d39c <_IO_stdin_used+0x39c>
    a20f:	divss  xmm0,DWORD PTR [rsp+0x8]
    a215:	call   3adb0 <FScale>
    a21a:	mov    rdi,QWORD PTR [r12+r14*8]
    a21e:	mov    esi,DWORD PTR [rip+0x580dc]        # 62300 <Alphabet_size>
    a224:	call   3ae20 <FSum>
    a229:	mov    rax,QWORD PTR [rsp+0x20]
    a22e:	movss  DWORD PTR [rax+r14*4],xmm0
    a234:	add    r14,0x1
    a238:	cmp    DWORD PTR [r15+0x18],r14d
    a23c:	jge    a1a8 <P7ViterbiAlignAlignment+0x118>
    a242:	mov    r14,QWORD PTR [rsp+0x10]
    a247:	mov    esi,DWORD PTR [r14+0x88]
    a24e:	xor    ecx,ecx
    a250:	xor    edx,edx
    a252:	mov    edi,0x1
    a257:	call   5350 <CreatePlan7Matrix>
    a25c:	mov    esi,DWORD PTR [r14+0x88]
    a263:	lea    rdx,[rsp+0x78]
    a268:	lea    r9,[rsp+0x90]
    a270:	mov    rdi,QWORD PTR [rax+0x8]
    a274:	mov    rbx,QWORD PTR [rax]
    a277:	mov    QWORD PTR [rsp+0x68],rax
    a27c:	lea    rcx,[rsp+0x80]
    a284:	lea    r8,[rsp+0x88]
    a28c:	mov    QWORD PTR [rsp+0x30],rdi
    a291:	mov    rdi,QWORD PTR [rax+0x10]
    a295:	mov    rax,QWORD PTR [rax+0x18]
    a299:	mov    QWORD PTR [rsp+0x28],rbx
    a29e:	mov    QWORD PTR [rsp+0x38],rdi
    a2a3:	mov    QWORD PTR [rsp+0x40],rax
    a2a8:	mov    eax,DWORD PTR [r15+0x18]
    a2ac:	lea    edi,[rax+0x1]
    a2af:	call   5870 <AllocShadowMatrix>
    a2b4:	mov    rdi,rax
    a2b7:	mov    QWORD PTR [rsp+0x58],rax
    a2bc:	mov    rax,QWORD PTR [rbx]
    a2bf:	mov    DWORD PTR [rax+0x10],0x0
    a2c6:	mov    rax,QWORD PTR [rsp+0x78]
    a2cb:	mov    rax,QWORD PTR [rax]
    a2ce:	mov    BYTE PTR [rax+0x4],0x4
    a2d2:	mov    rax,QWORD PTR [rbx]
    a2d5:	mov    edx,DWORD PTR [r14+0x150]
    a2dc:	mov    DWORD PTR [rax],edx
    a2de:	mov    rax,QWORD PTR [rsp+0x78]
    a2e3:	mov    rax,QWORD PTR [rax]
    a2e6:	mov    BYTE PTR [rax],0x5
    a2e9:	mov    rax,QWORD PTR [rbx]
    a2ec:	movabs rbx,0xc521974fc521974f
    a2f6:	mov    QWORD PTR [rax+0x4],rbx
    a2fa:	mov    DWORD PTR [rax+0xc],0xc521974f
    a301:	mov    rax,QWORD PTR [rdi+0x20]
    a305:	mov    DWORD PTR [rax],0x0
    a30b:	mov    rax,QWORD PTR [rsp+0x78]
    a310:	mov    rax,QWORD PTR [rax]
    a313:	mov    BYTE PTR [rax+0x3],0x0
    a317:	mov    rax,QWORD PTR [rsp+0x78]
    a31c:	mov    rax,QWORD PTR [rax]
    a31f:	mov    BYTE PTR [rax+0x2],0x0
    a323:	mov    r9d,DWORD PTR [r14+0x88]
    a32a:	xor    eax,eax
    a32c:	test   r9d,r9d
    a32f:	js     a398 <P7ViterbiAlignAlignment+0x308>
    a331:	mov    rcx,QWORD PTR [rsp+0x30]
    a336:	mov    rsi,QWORD PTR [rsp+0x38]
    a33b:	mov    rdi,QWORD PTR [rsp+0x40]
    a340:	mov    rdx,QWORD PTR [rdi]
    a343:	mov    DWORD PTR [rdx+rax*4],0xc521974f
    a34a:	mov    rdx,QWORD PTR [rsi]
    a34d:	mov    DWORD PTR [rdx+rax*4],0xc521974f
    a354:	mov    rdx,QWORD PTR [rcx]
    a357:	mov    DWORD PTR [rdx+rax*4],0xc521974f
    a35e:	mov    rdx,QWORD PTR [rsp+0x90]
    a366:	mov    rdx,QWORD PTR [rdx]
    a369:	mov    BYTE PTR [rdx+rax*1],0x0
    a36d:	mov    rdx,QWORD PTR [rsp+0x88]
    a375:	mov    rdx,QWORD PTR [rdx]
    a378:	mov    BYTE PTR [rdx+rax*1],0x0
    a37c:	mov    rdx,QWORD PTR [rsp+0x80]
    a384:	mov    rdx,QWORD PTR [rdx]
    a387:	mov    BYTE PTR [rdx+rax*1],0x0
    a38b:	add    rax,0x1
    a38f:	cmp    DWORD PTR [r14+0x88],eax
    a396:	jge    a340 <P7ViterbiAlignAlignment+0x2b0>
    a398:	mov    rax,QWORD PTR [rsp+0x60]
    a39d:	mov    edx,DWORD PTR [r15+0x18]
    a3a1:	pxor   xmm3,xmm3
    a3a5:	mov    QWORD PTR [rsp+0x10],0x1
    a3ae:	movaps xmm4,xmm3
    a3b1:	add    rax,0x8
    a3b5:	mov    QWORD PTR [rsp+0x8],rax
    a3ba:	test   edx,edx
    a3bc:	jle    a966 <P7ViterbiAlignAlignment+0x8d6>
    a3c2:	mov    QWORD PTR [rsp+0x50],r15
    a3c7:	nop    WORD PTR [rax+rax*1+0x0]
    a3d0:	mov    rdi,QWORD PTR [rsp+0x10]
    a3d5:	mov    rbx,QWORD PTR [rsp+0x40]
    a3da:	mov    r10,QWORD PTR [rsp+0x30]
    a3df:	mov    rax,rdi
    a3e2:	mov    ebp,edi
    a3e4:	lea    r11,[rdi*8+0x0]
    a3ec:	and    eax,0x1
    a3ef:	not    ebp
    a3f1:	lea    rcx,[rax*8+0x0]
    a3f9:	and    ebp,0x1
    a3fc:	add    rbx,rcx
    a3ff:	add    r10,rcx
    a402:	shl    rbp,0x3
    a406:	mov    QWORD PTR [rsp+0x48],rcx
    a40b:	mov    rax,QWORD PTR [rbx]
    a40e:	mov    DWORD PTR [rax],0xc521974f
    a414:	mov    rax,QWORD PTR [rsp+0x38]
    a419:	add    rax,rcx
    a41c:	mov    QWORD PTR [rsp+0x18],rax
    a421:	mov    rax,QWORD PTR [rax]
    a424:	mov    DWORD PTR [rax],0xc521974f
    a42a:	mov    rax,QWORD PTR [r10]
    a42d:	mov    DWORD PTR [rax],0xc521974f
    a433:	mov    rax,QWORD PTR [rsp+0x90]
    a43b:	mov    rax,QWORD PTR [rax+rdi*8]
    a43f:	mov    BYTE PTR [rax],0x0
    a442:	mov    rax,QWORD PTR [rsp+0x88]
    a44a:	mov    rax,QWORD PTR [rax+rdi*8]
    a44e:	mov    BYTE PTR [rax],0x0
    a451:	mov    rax,QWORD PTR [rsp+0x80]
    a459:	mov    rax,QWORD PTR [rax+rdi*8]
    a45d:	mov    BYTE PTR [rax],0x0
    a460:	mov    rax,QWORD PTR [rsp+0x28]
    a465:	mov    r8d,DWORD PTR [r14+0x88]
    a46c:	lea    r15,[rax+rbp*1]
    a470:	test   r8d,r8d
    a473:	jle    a73d <P7ViterbiAlignAlignment+0x6ad>
    a479:	mov    rax,QWORD PTR [rsp+0x30]
    a47e:	mov    r9d,0x1
    a484:	lea    r13,[rax+rbp*1]
    a488:	mov    rax,QWORD PTR [rsp+0x38]
    a48d:	lea    r12,[rax+rbp*1]
    a491:	add    rbp,QWORD PTR [rsp+0x40]
    a496:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a4a0:	mov    rax,QWORD PTR [r10]
    a4a3:	lea    rcx,[r9*4+0x0]
    a4ab:	mov    DWORD PTR [rax+r9*4],0xc521974f
    a4b3:	mov    rax,QWORD PTR [rsp+0x80]
    a4bb:	mov    rax,QWORD PTR [rax+r11*1]
    a4bf:	mov    BYTE PTR [rax+r9*1],0x0
    a4c4:	mov    rax,QWORD PTR [r13+0x0]
    a4c8:	mov    edx,DWORD PTR [rax+rcx*1-0x4]
    a4cc:	cmp    edx,0xc5219750
    a4d2:	jl     a510 <P7ViterbiAlignAlignment+0x480>
    a4d4:	mov    rax,QWORD PTR [r14+0x138]
    a4db:	mov    rax,QWORD PTR [rax]
    a4de:	mov    edi,DWORD PTR [rax+rcx*1-0x4]
    a4e2:	mov    rax,QWORD PTR [r10]
    a4e5:	add    rax,rcx
    a4e8:	mov    esi,DWORD PTR [rax]
    a4ea:	cmp    edi,0xc5219750
    a4f0:	jl     a518 <P7ViterbiAlignAlignment+0x488>
    a4f2:	add    edx,edi
    a4f4:	cmp    edx,esi
    a4f6:	jle    a518 <P7ViterbiAlignAlignment+0x488>
    a4f8:	mov    DWORD PTR [rax],edx
    a4fa:	mov    rax,QWORD PTR [rsp+0x80]
    a502:	mov    rax,QWORD PTR [rax+r11*1]
    a506:	mov    BYTE PTR [rax+r9*1],0x1
    a50b:	nop    DWORD PTR [rax+rax*1+0x0]
    a510:	mov    rax,QWORD PTR [r10]
    a513:	add    rax,rcx
    a516:	mov    esi,DWORD PTR [rax]
    a518:	mov    rdx,QWORD PTR [r12]
    a51c:	mov    edx,DWORD PTR [rdx+rcx*1-0x4]
    a520:	cmp    edx,0xc5219750
    a526:	jl     a590 <P7ViterbiAlignAlignment+0x500>
    a528:	mov    rdi,QWORD PTR [r14+0x138]
    a52f:	mov    rdi,QWORD PTR [rdi+0x18]
    a533:	mov    edi,DWORD PTR [rdi+rcx*1-0x4]
    a537:	cmp    edi,0xc5219750
    a53d:	jl     a590 <P7ViterbiAlignAlignment+0x500>
    a53f:	pxor   xmm0,xmm0
    a543:	mov    r8,QWORD PTR [rsp+0x10]
    a548:	cvtsi2ss xmm0,edi
    a54c:	mov    rdi,QWORD PTR [rsp+0x20]
    a551:	movss  xmm1,DWORD PTR [rdi+r8*4-0x4]
    a558:	mulss  xmm1,xmm0
    a55c:	pxor   xmm0,xmm0
    a560:	cvtsi2ss xmm0,edx
    a564:	addss  xmm0,xmm1
    a568:	cvttss2si edx,xmm0
    a56c:	cmp    edx,esi
    a56e:	jle    a590 <P7ViterbiAlignAlignment+0x500>
    a570:	mov    DWORD PTR [rax],edx
    a572:	mov    rax,QWORD PTR [rsp+0x80]
    a57a:	mov    rax,QWORD PTR [rax+r11*1]
    a57e:	mov    BYTE PTR [rax+r9*1],0x3
    a583:	mov    rax,QWORD PTR [r10]
    a586:	add    rax,rcx
    a589:	mov    esi,DWORD PTR [rax]
    a58b:	nop    DWORD PTR [rax+rax*1+0x0]
    a590:	mov    rdi,QWORD PTR [r14+0x170]
    a597:	mov    rdx,QWORD PTR [r15]
    a59a:	mov    edx,DWORD PTR [rdx]
    a59c:	add    edx,DWORD PTR [rdi+rcx*1]
    a59f:	cmp    edx,esi
    a5a1:	jle    a5b6 <P7ViterbiAlignAlignment+0x526>
    a5a3:	mov    DWORD PTR [rax],edx
    a5a5:	mov    rax,QWORD PTR [rsp+0x80]
    a5ad:	mov    rax,QWORD PTR [rax+r11*1]
    a5b1:	mov    BYTE PTR [rax+r9*1],0x6
    a5b6:	mov    rax,QWORD PTR [rbp+0x0]
    a5ba:	mov    eax,DWORD PTR [rax+rcx*1-0x4]
    a5be:	cmp    eax,0xc5219750
    a5c3:	jl     a600 <P7ViterbiAlignAlignment+0x570>
    a5c5:	mov    rdx,QWORD PTR [r14+0x138]
    a5cc:	mov    rdx,QWORD PTR [rdx+0x28]
    a5d0:	mov    edx,DWORD PTR [rdx+rcx*1-0x4]
    a5d4:	cmp    edx,0xc5219750
    a5da:	jl     a600 <P7ViterbiAlignAlignment+0x570>
    a5dc:	add    eax,edx
    a5de:	mov    rdx,QWORD PTR [r10]
    a5e1:	add    rdx,rcx
    a5e4:	cmp    DWORD PTR [rdx],eax
    a5e6:	jge    a600 <P7ViterbiAlignAlignment+0x570>
    a5e8:	mov    DWORD PTR [rdx],eax
    a5ea:	mov    rax,QWORD PTR [rsp+0x80]
    a5f2:	mov    rax,QWORD PTR [rax+r11*1]
    a5f6:	mov    BYTE PTR [rax+r9*1],0x2
    a5fb:	nop    DWORD PTR [rax+rax*1+0x0]
    a600:	mov    edi,DWORD PTR [rip+0x57cfa]        # 62300 <Alphabet_size>
    a606:	test   edi,edi
    a608:	jle    a670 <P7ViterbiAlignAlignment+0x5e0>
    a60a:	mov    rax,QWORD PTR [rsp+0x8]
    a60f:	mov    rsi,QWORD PTR [r10]
    a612:	mov    rdi,QWORD PTR [r14+0x140]
    a619:	mov    r8,QWORD PTR [rax]
    a61c:	add    rsi,rcx
    a61f:	xor    eax,eax
    a621:	nop    DWORD PTR [rax+0x0]
    a628:	movss  xmm2,DWORD PTR [r8+rax*4]
    a62e:	mov    rdx,QWORD PTR [rdi+rax*8]
    a632:	comiss xmm2,xmm3
    a635:	mov    edx,DWORD PTR [rdx+rcx*1]
    a638:	jbe    a646 <P7ViterbiAlignAlignment+0x5b6>
    a63a:	cmp    edx,0xc521974f
    a640:	je     a9f8 <P7ViterbiAlignAlignment+0x968>
    a646:	pxor   xmm0,xmm0
    a64a:	pxor   xmm1,xmm1
    a64e:	add    rax,0x1
    a652:	cvtsi2ss xmm0,edx
    a656:	cvtsi2ss xmm1,DWORD PTR [rsi]
    a65a:	mulss  xmm0,xmm2
    a65e:	addss  xmm0,xmm1
    a662:	cvttss2si edx,xmm0
    a666:	mov    DWORD PTR [rsi],edx
    a668:	cmp    DWORD PTR [rip+0x57c92],eax        # 62300 <Alphabet_size>
    a66e:	jg     a628 <P7ViterbiAlignAlignment+0x598>
    a670:	mov    rax,QWORD PTR [rbx]
    a673:	mov    DWORD PTR [rax+rcx*1],0xc521974f
    a67a:	mov    rax,QWORD PTR [rsp+0x90]
    a682:	mov    rax,QWORD PTR [rax+r11*1]
    a686:	mov    BYTE PTR [rax+r9*1],0x0
    a68b:	mov    rax,QWORD PTR [r10]
    a68e:	mov    edx,DWORD PTR [rax+rcx*1-0x4]
    a692:	cmp    edx,0xc5219750
    a698:	jl     a6d8 <P7ViterbiAlignAlignment+0x648>
    a69a:	mov    rax,QWORD PTR [r14+0x138]
    a6a1:	mov    rax,QWORD PTR [rax+0x10]
    a6a5:	mov    esi,DWORD PTR [rax+rcx*1-0x4]
    a6a9:	mov    rax,QWORD PTR [rbx]
    a6ac:	cmp    esi,0xc5219750
    a6b2:	jl     a6db <P7ViterbiAlignAlignment+0x64b>
    a6b4:	add    edx,esi
    a6b6:	lea    rsi,[rax+rcx*1]
    a6ba:	cmp    DWORD PTR [rsi],edx
    a6bc:	jge    a6db <P7ViterbiAlignAlignment+0x64b>
    a6be:	mov    rax,QWORD PTR [rsp+0x90]
    a6c6:	mov    DWORD PTR [rsi],edx
    a6c8:	mov    rax,QWORD PTR [rax+r11*1]
    a6cc:	mov    BYTE PTR [rax+r9*1],0x1
    a6d1:	nop    DWORD PTR [rax+0x0]
    a6d8:	mov    rax,QWORD PTR [rbx]
    a6db:	mov    edx,DWORD PTR [rax+rcx*1-0x4]
    a6df:	cmp    edx,0xc5219750
    a6e5:	jl     a720 <P7ViterbiAlignAlignment+0x690>
    a6e7:	mov    rsi,QWORD PTR [r14+0x138]
    a6ee:	mov    rsi,QWORD PTR [rsi+0x30]
    a6f2:	mov    esi,DWORD PTR [rsi+rcx*1-0x4]
    a6f6:	cmp    esi,0xc5219750
    a6fc:	jl     a720 <P7ViterbiAlignAlignment+0x690>
    a6fe:	add    rax,rcx
    a701:	add    edx,esi
    a703:	cmp    DWORD PTR [rax],edx
    a705:	jge    a720 <P7ViterbiAlignAlignment+0x690>
    a707:	mov    DWORD PTR [rax],edx
    a709:	mov    rax,QWORD PTR [rsp+0x90]
    a711:	mov    rax,QWORD PTR [rax+r11*1]
    a715:	mov    BYTE PTR [rax+r9*1],0x2
    a71a:	nop    WORD PTR [rax+rax*1+0x0]
    a720:	mov    eax,DWORD PTR [r14+0x88]
    a727:	cmp    eax,r9d
    a72a:	jg     aa08 <P7ViterbiAlignAlignment+0x978>
    a730:	add    r9,0x1
    a734:	cmp    eax,r9d
    a737:	jge    a4a0 <P7ViterbiAlignAlignment+0x410>
    a73d:	mov    rdi,QWORD PTR [rsp+0x48]
    a742:	add    rdi,QWORD PTR [rsp+0x28]
    a747:	mov    rax,QWORD PTR [rdi]
    a74a:	mov    DWORD PTR [rax+0x10],0xc521974f
    a751:	mov    rax,QWORD PTR [rsp+0x78]
    a756:	mov    rax,QWORD PTR [rax+r11*1]
    a75a:	mov    BYTE PTR [rax+0x4],0x0
    a75e:	mov    rax,QWORD PTR [r15]
    a761:	mov    eax,DWORD PTR [rax+0x10]
    a764:	cmp    eax,0xc5219750
    a769:	jl     a7bf <P7ViterbiAlignAlignment+0x72f>
    a76b:	mov    rdx,QWORD PTR [rsp+0x78]
    a770:	mov    esi,DWORD PTR [r14+0x154]
    a777:	mov    rcx,QWORD PTR [rdi]
    a77a:	mov    rdx,QWORD PTR [rdx+r11*1]
    a77e:	cmp    esi,0xc5219750
    a784:	jl     a7cb <P7ViterbiAlignAlignment+0x73b>
    a786:	pxor   xmm0,xmm0
    a78a:	mov    rbx,QWORD PTR [rsp+0x20]
    a78f:	cvtsi2ss xmm0,esi
    a793:	mov    rsi,QWORD PTR [rsp+0x10]
    a798:	movss  xmm1,DWORD PTR [rbx+rsi*4]
    a79d:	mulss  xmm1,xmm0
    a7a1:	pxor   xmm0,xmm0
    a7a5:	cvtsi2ss xmm0,eax
    a7a9:	addss  xmm0,xmm1
    a7ad:	cvttss2si eax,xmm0
    a7b1:	cmp    eax,0xc5219750
    a7b6:	jl     a7cb <P7ViterbiAlignAlignment+0x73b>
    a7b8:	mov    DWORD PTR [rcx+0x10],eax
    a7bb:	mov    BYTE PTR [rdx+0x4],0x5
    a7bf:	mov    rax,QWORD PTR [rsp+0x78]
    a7c4:	mov    rcx,QWORD PTR [rdi]
    a7c7:	mov    rdx,QWORD PTR [rax+r11*1]
    a7cb:	mov    DWORD PTR [rcx+0x4],0xc521974f
    a7d2:	mov    BYTE PTR [rdx+0x1],0x0
    a7d6:	mov    edx,DWORD PTR [r14+0x88]
    a7dd:	test   edx,edx
    a7df:	jle    abd2 <P7ViterbiAlignAlignment+0xb42>
    a7e5:	mov    rax,QWORD PTR [rsp+0x10]
    a7ea:	mov    rsi,QWORD PTR [r10]
    a7ed:	mov    r8,QWORD PTR [rdi]
    a7f0:	mov    r10,QWORD PTR [rsp+0x58]
    a7f5:	lea    r9,[rax*4+0x0]
    a7fd:	mov    eax,0x1
    a802:	nop    WORD PTR [rax+rax*1+0x0]
    a808:	mov    edx,DWORD PTR [rsi+rax*4]
    a80b:	cmp    edx,0xc5219750
    a811:	jl     a840 <P7ViterbiAlignAlignment+0x7b0>
    a813:	mov    rcx,QWORD PTR [r14+0x178]
    a81a:	mov    ecx,DWORD PTR [rcx+rax*4]
    a81d:	cmp    ecx,0xc5219750
    a823:	jl     a840 <P7ViterbiAlignAlignment+0x7b0>
    a825:	add    edx,ecx
    a827:	cmp    DWORD PTR [r8+0x4],edx
    a82b:	jge    a840 <P7ViterbiAlignAlignment+0x7b0>
    a82d:	mov    DWORD PTR [r8+0x4],edx
    a831:	mov    rdx,QWORD PTR [r10+0x20]
    a835:	mov    DWORD PTR [rdx+r9*1],eax
    a839:	nop    DWORD PTR [rax+0x0]
    a840:	add    rax,0x1
    a844:	cmp    DWORD PTR [r14+0x88],eax
    a84b:	jge    a808 <P7ViterbiAlignAlignment+0x778>
    a84d:	mov    rax,QWORD PTR [rsp+0x78]
    a852:	mov    DWORD PTR [r8],0xc521974f
    a859:	mov    rax,QWORD PTR [rax+r11*1]
    a85d:	mov    BYTE PTR [rax],0x0
    a860:	mov    rax,QWORD PTR [rdi]
    a863:	mov    edx,DWORD PTR [rax+0x10]
    a866:	cmp    edx,0xc5219750
    a86c:	jl     a894 <P7ViterbiAlignAlignment+0x804>
    a86e:	mov    rcx,QWORD PTR [rsp+0x78]
    a873:	mov    esi,DWORD PTR [r14+0x150]
    a87a:	mov    rcx,QWORD PTR [rcx+r11*1]
    a87e:	cmp    esi,0xc5219750
    a884:	jl     a89d <P7ViterbiAlignAlignment+0x80d>
    a886:	add    edx,esi
    a888:	cmp    DWORD PTR [rax],edx
    a88a:	jge    a89d <P7ViterbiAlignAlignment+0x80d>
    a88c:	mov    DWORD PTR [rax],edx
    a88e:	mov    BYTE PTR [rcx],0x5
    a891:	mov    rax,QWORD PTR [rdi]
    a894:	mov    rdx,QWORD PTR [rsp+0x78]
    a899:	mov    rcx,QWORD PTR [rdx+r11*1]
    a89d:	mov    DWORD PTR [rax+0x8],0xc521974f
    a8a4:	mov    BYTE PTR [rcx+0x2],0x0
    a8a8:	mov    rax,QWORD PTR [r15]
    a8ab:	mov    eax,DWORD PTR [rax+0x8]
    a8ae:	cmp    eax,0xc5219750
    a8b3:	jl     a905 <P7ViterbiAlignAlignment+0x875>
    a8b5:	mov    ecx,DWORD PTR [r14+0x164]
    a8bc:	mov    rdx,QWORD PTR [rdi]
    a8bf:	cmp    ecx,0xc5219750
    a8c5:	jl     a908 <P7ViterbiAlignAlignment+0x878>
    a8c7:	pxor   xmm0,xmm0
    a8cb:	mov    rbx,QWORD PTR [rsp+0x20]
    a8d0:	pxor   xmm1,xmm1
    a8d4:	cvtsi2ss xmm0,ecx
    a8d8:	mov    rcx,QWORD PTR [rsp+0x10]
    a8dd:	cvtsi2ss xmm1,eax
    a8e1:	mulss  xmm0,DWORD PTR [rbx+rcx*4]
    a8e6:	addss  xmm0,xmm1
    a8ea:	cvttss2si eax,xmm0
    a8ee:	cmp    eax,0xc5219750
    a8f3:	jl     a908 <P7ViterbiAlignAlignment+0x878>
    a8f5:	mov    DWORD PTR [rdx+0x8],eax
    a8f8:	mov    rax,QWORD PTR [rsp+0x78]
    a8fd:	mov    rax,QWORD PTR [rax+r11*1]
    a901:	mov    BYTE PTR [rax+0x2],0x8
    a905:	mov    rdx,QWORD PTR [rdi]
    a908:	mov    eax,DWORD PTR [rdx+0x4]
    a90b:	cmp    eax,0xc5219750
    a910:	jl     a940 <P7ViterbiAlignAlignment+0x8b0>
    a912:	mov    ecx,DWORD PTR [r14+0x158]
    a919:	cmp    ecx,0xc5219750
    a91f:	jl     a940 <P7ViterbiAlignAlignment+0x8b0>
    a921:	add    eax,ecx
    a923:	cmp    DWORD PTR [rdx+0x8],eax
    a926:	jge    a940 <P7ViterbiAlignAlignment+0x8b0>
    a928:	mov    DWORD PTR [rdx+0x8],eax
    a92b:	mov    rax,QWORD PTR [rsp+0x78]
    a930:	mov    rax,QWORD PTR [rax+r11*1]
    a934:	mov    BYTE PTR [rax+0x2],0x7
    a938:	nop    DWORD PTR [rax+rax*1+0x0]
    a940:	mov    rax,QWORD PTR [rsp+0x50]
    a945:	add    QWORD PTR [rsp+0x10],0x1
    a94b:	add    QWORD PTR [rsp+0x8],0x8
    a951:	mov    edx,DWORD PTR [rax+0x18]
    a954:	mov    rax,QWORD PTR [rsp+0x10]
    a959:	cmp    edx,eax
    a95b:	jge    a3d0 <P7ViterbiAlignAlignment+0x340>
    a961:	mov    r15,QWORD PTR [rsp+0x50]
    a966:	mov    rbx,QWORD PTR [rsp+0x58]
    a96b:	mov    rsi,r14
    a96e:	mov    rdi,rbx
    a971:	call   9900 <ShadowTrace>
    a976:	mov    rdi,QWORD PTR [rsp+0x68]
    a97b:	mov    r12,rax
    a97e:	call   5810 <FreePlan7Matrix>
    a983:	mov    rdi,rbx
    a986:	mov    ebx,0x1
    a98b:	call   5aa0 <FreeShadowMatrix>
    a990:	mov    eax,DWORD PTR [r15+0x18]
    a994:	mov    rbp,QWORD PTR [rsp+0x60]
    a999:	test   eax,eax
    a99b:	jle    a9b4 <P7ViterbiAlignAlignment+0x924>
    a99d:	nop    DWORD PTR [rax]
    a9a0:	mov    rdi,QWORD PTR [rbp+rbx*8+0x0]
    a9a5:	add    rbx,0x1
    a9a9:	call   3460 <free@plt>
    a9ae:	cmp    DWORD PTR [r15+0x18],ebx
    a9b2:	jge    a9a0 <P7ViterbiAlignAlignment+0x910>
    a9b4:	mov    rdi,QWORD PTR [rsp+0x60]
    a9b9:	call   3460 <free@plt>
    a9be:	mov    rdi,QWORD PTR [rsp+0x20]
    a9c3:	call   3460 <free@plt>
    a9c8:	mov    rax,QWORD PTR [rsp+0x98]
    a9d0:	xor    rax,QWORD PTR fs:0x28
    a9d9:	jne    abda <P7ViterbiAlignAlignment+0xb4a>
    a9df:	add    rsp,0xa8
    a9e6:	mov    rax,r12
    a9e9:	pop    rbx
    a9ea:	pop    rbp
    a9eb:	pop    r12
    a9ed:	pop    r13
    a9ef:	pop    r14
    a9f1:	pop    r15
    a9f3:	ret    
    a9f4:	nop    DWORD PTR [rax+0x0]
    a9f8:	mov    DWORD PTR [rsi],0xc521974f
    a9fe:	jmp    a670 <P7ViterbiAlignAlignment+0x5e0>
    aa03:	nop    DWORD PTR [rax+rax*1+0x0]
    aa08:	mov    rdi,QWORD PTR [rsp+0x18]
    aa0d:	mov    rax,QWORD PTR [rdi]
    aa10:	mov    DWORD PTR [rax+rcx*1],0xc521974f
    aa17:	mov    rax,QWORD PTR [rsp+0x88]
    aa1f:	mov    rax,QWORD PTR [rax+r11*1]
    aa23:	mov    BYTE PTR [rax+r9*1],0x0
    aa28:	mov    rax,QWORD PTR [r13+0x0]
    aa2c:	mov    eax,DWORD PTR [rax+rcx*1]
    aa2f:	cmp    eax,0xc5219750
    aa34:	jl     aa98 <P7ViterbiAlignAlignment+0xa08>
    aa36:	mov    rdx,QWORD PTR [r14+0x138]
    aa3d:	mov    rdx,QWORD PTR [rdx+0x8]
    aa41:	mov    edx,DWORD PTR [rdx+rcx*1]
    aa44:	cmp    edx,0xc5219750
    aa4a:	jl     aa98 <P7ViterbiAlignAlignment+0xa08>
    aa4c:	pxor   xmm0,xmm0
    aa50:	mov    rsi,QWORD PTR [rsp+0x20]
    aa55:	cvtsi2ss xmm0,edx
    aa59:	mov    rdx,QWORD PTR [rsp+0x10]
    aa5e:	movss  xmm1,DWORD PTR [rsi+rdx*4]
    aa63:	mov    rdx,QWORD PTR [rdi]
    aa66:	mulss  xmm1,xmm0
    aa6a:	pxor   xmm0,xmm0
    aa6e:	add    rdx,rcx
    aa71:	cvtsi2ss xmm0,eax
    aa75:	addss  xmm0,xmm1
    aa79:	cvttss2si eax,xmm0
    aa7d:	cmp    DWORD PTR [rdx],eax
    aa7f:	jge    aa98 <P7ViterbiAlignAlignment+0xa08>
    aa81:	mov    DWORD PTR [rdx],eax
    aa83:	mov    rax,QWORD PTR [rsp+0x88]
    aa8b:	mov    rax,QWORD PTR [rax+r11*1]
    aa8f:	mov    BYTE PTR [rax+r9*1],0x1
    aa94:	nop    DWORD PTR [rax+0x0]
    aa98:	mov    rax,QWORD PTR [r12]
    aa9c:	mov    eax,DWORD PTR [rax+rcx*1]
    aa9f:	cmp    eax,0xc5219750
    aaa4:	jl     ab10 <P7ViterbiAlignAlignment+0xa80>
    aaa6:	mov    rdx,QWORD PTR [r14+0x138]
    aaad:	mov    rdx,QWORD PTR [rdx+0x20]
    aab1:	mov    edx,DWORD PTR [rdx+rcx*1]
    aab4:	cmp    edx,0xc5219750
    aaba:	jl     ab10 <P7ViterbiAlignAlignment+0xa80>
    aabc:	mov    rdi,QWORD PTR [rsp+0x20]
    aac1:	mov    rsi,QWORD PTR [rsp+0x10]
    aac6:	pxor   xmm0,xmm0
    aaca:	pxor   xmm1,xmm1
    aace:	cvtsi2ss xmm0,edx
    aad2:	mulss  xmm0,DWORD PTR [rdi+rsi*4-0x4]
    aad8:	cvtsi2ss xmm1,eax
    aadc:	mulss  xmm0,DWORD PTR [rdi+rsi*4]
    aae1:	mov    rdi,QWORD PTR [rsp+0x18]
    aae6:	mov    rdx,QWORD PTR [rdi]
    aae9:	add    rdx,rcx
    aaec:	addss  xmm0,xmm1
    aaf0:	cvttss2si eax,xmm0
    aaf4:	cmp    DWORD PTR [rdx],eax
    aaf6:	jge    ab10 <P7ViterbiAlignAlignment+0xa80>
    aaf8:	mov    DWORD PTR [rdx],eax
    aafa:	mov    rax,QWORD PTR [rsp+0x88]
    ab02:	mov    rax,QWORD PTR [rax+r11*1]
    ab06:	mov    BYTE PTR [rax+r9*1],0x3
    ab0b:	nop    DWORD PTR [rax+rax*1+0x0]
    ab10:	mov    esi,DWORD PTR [rip+0x577ea]        # 62300 <Alphabet_size>
    ab16:	test   esi,esi
    ab18:	jle    ab84 <P7ViterbiAlignAlignment+0xaf4>
    ab1a:	mov    rax,QWORD PTR [rsp+0x8]
    ab1f:	mov    rdi,QWORD PTR [r14+0x148]
    ab26:	mov    r8,QWORD PTR [rax]
    ab29:	mov    rax,QWORD PTR [rsp+0x18]
    ab2e:	mov    rsi,QWORD PTR [rax]
    ab31:	xor    eax,eax
    ab33:	add    rsi,rcx
    ab36:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ab40:	movss  xmm2,DWORD PTR [r8+rax*4]
    ab46:	mov    rdx,QWORD PTR [rdi+rax*8]
    ab4a:	comiss xmm2,xmm4
    ab4d:	mov    edx,DWORD PTR [rdx+rcx*1]
    ab50:	jbe    ab5a <P7ViterbiAlignAlignment+0xaca>
    ab52:	cmp    edx,0xc521974f
    ab58:	je     abc0 <P7ViterbiAlignAlignment+0xb30>
    ab5a:	pxor   xmm0,xmm0
    ab5e:	pxor   xmm1,xmm1
    ab62:	add    rax,0x1
    ab66:	cvtsi2ss xmm0,edx
    ab6a:	cvtsi2ss xmm1,DWORD PTR [rsi]
    ab6e:	mulss  xmm0,xmm2
    ab72:	addss  xmm0,xmm1
    ab76:	cvttss2si edx,xmm0
    ab7a:	mov    DWORD PTR [rsi],edx
    ab7c:	cmp    DWORD PTR [rip+0x5777e],eax        # 62300 <Alphabet_size>
    ab82:	jg     ab40 <P7ViterbiAlignAlignment+0xab0>
    ab84:	mov    eax,DWORD PTR [r14+0x88]
    ab8b:	jmp    a730 <P7ViterbiAlignAlignment+0x6a0>
    ab90:	lea    rdi,[rip+0x576e9]        # 62280 <Alphabet>
    ab97:	call   3590 <strchr@plt>
    ab9c:	mov    rcx,QWORD PTR [r15+0x10]
    aba0:	mov    rdi,QWORD PTR [r12+r14*8]
    aba4:	movss  xmm0,DWORD PTR [rcx+rbx*4]
    aba9:	lea    rcx,[rip+0x576d0]        # 62280 <Alphabet>
    abb0:	sub    rax,rcx
    abb3:	movsx  esi,al
    abb6:	call   5140 <P7CountSymbol>
    abbb:	jmp    a1f3 <P7ViterbiAlignAlignment+0x163>
    abc0:	mov    DWORD PTR [rsi],0xc521974f
    abc6:	mov    eax,DWORD PTR [r14+0x88]
    abcd:	jmp    a730 <P7ViterbiAlignAlignment+0x6a0>
    abd2:	mov    r8,QWORD PTR [rdi]
    abd5:	jmp    a84d <P7ViterbiAlignAlignment+0x7bd>
    abda:	call   3570 <__stack_chk_fail@plt>
    abdf:	nop

000000000000abe0 <PostprocessSignificantHit>:
    abe0:	endbr64 
    abe4:	push   r15
    abe6:	push   r14
    abe8:	push   r13
    abea:	push   r12
    abec:	push   rbp
    abed:	push   rbx
    abee:	sub    rsp,0x88
    abf5:	mov    rax,QWORD PTR [rsp+0xc0]
    abfd:	mov    QWORD PTR [rsp+0x40],rdi
    ac02:	mov    QWORD PTR [rsp+0x30],rsi
    ac07:	mov    r14,QWORD PTR [rsp+0xe8]
    ac0f:	mov    QWORD PTR [rsp+0x10],rax
    ac14:	mov    rax,QWORD PTR [rsp+0xc8]
    ac1c:	mov    DWORD PTR [rsp+0x3c],r9d
    ac21:	mov    QWORD PTR [rsp+0x20],rax
    ac26:	mov    rax,QWORD PTR [rsp+0xd0]
    ac2e:	movss  DWORD PTR [rsp+0x8],xmm0
    ac34:	mov    QWORD PTR [rsp+0x28],rax
    ac39:	mov    rax,QWORD PTR fs:0x28
    ac42:	mov    QWORD PTR [rsp+0x78],rax
    ac47:	xor    eax,eax
    ac49:	movss  DWORD PTR [rsp+0x4],xmm0
    ac4f:	test   rdx,rdx
    ac52:	je     af02 <PostprocessSignificantHit+0x322>
    ac58:	mov    rdi,rdx
    ac5b:	lea    rsi,[rsp+0x70]
    ac60:	lea    rdx,[rsp+0x5c]
    ac65:	mov    rbx,rcx
    ac68:	mov    r13,r8
    ac6b:	call   22990 <TraceDecompose>
    ac70:	movsxd rdx,DWORD PTR [rsp+0x5c]
    ac75:	test   edx,edx
    ac77:	je     af98 <PostprocessSignificantHit+0x3b8>
    ac7d:	shl    rdx,0x2
    ac81:	mov    esi,0x9b0
    ac86:	lea    rdi,[rip+0x32533]        # 3d1c0 <_IO_stdin_used+0x1c0>
    ac8d:	call   36810 <sre_malloc>
    ac92:	movsxd rdx,DWORD PTR [rsp+0x5c]
    ac97:	mov    esi,0x9b1
    ac9c:	lea    rdi,[rip+0x3251d]        # 3d1c0 <_IO_stdin_used+0x1c0>
    aca3:	mov    rbp,rax
    aca6:	shl    rdx,0x2
    acaa:	call   36810 <sre_malloc>
    acaf:	mov    esi,DWORD PTR [rsp+0x5c]
    acb3:	mov    r12,rax
    acb6:	test   esi,esi
    acb8:	jle    afb0 <PostprocessSignificantHit+0x3d0>
    acbe:	xor    r15d,r15d
    acc1:	mov    QWORD PTR [rsp+0x18],r14
    acc6:	mov    DWORD PTR [rsp+0x4],0x0
    acce:	mov    r14,r15
    acd1:	mov    r15d,DWORD PTR [rsp+0xe0]
    acd9:	mov    DWORD PTR [rsp+0x38],0x0
    ace1:	jmp    ad0e <PostprocessSignificantHit+0x12e>
    ace3:	nop    DWORD PTR [rax+rax*1+0x0]
    ace8:	addss  xmm0,DWORD PTR [rsp+0x4]
    acee:	mov    DWORD PTR [r12+r14*4],0x1
    acf6:	add    r14,0x1
    acfa:	mov    esi,DWORD PTR [rsp+0x5c]
    acfe:	add    DWORD PTR [rsp+0x38],0x1
    ad03:	movss  DWORD PTR [rsp+0x4],xmm0
    ad09:	cmp    esi,r14d
    ad0c:	jle    ad50 <PostprocessSignificantHit+0x170>
    ad0e:	mov    rdx,QWORD PTR [rsp+0x70]
    ad13:	mov    rsi,r13
    ad16:	mov    rdi,rbx
    ad19:	mov    rdx,QWORD PTR [rdx+r14*8]
    ad1d:	call   21fe0 <P7TraceScore>
    ad22:	movss  DWORD PTR [rbp+r14*4+0x0],xmm0
    ad29:	test   r15d,r15d
    ad2c:	jne    af30 <PostprocessSignificantHit+0x350>
    ad32:	pxor   xmm5,xmm5
    ad36:	comiss xmm0,xmm5
    ad39:	ja     ace8 <PostprocessSignificantHit+0x108>
    ad3b:	mov    DWORD PTR [r12+r14*4],0x0
    ad43:	mov    esi,DWORD PTR [rsp+0x5c]
    ad47:	add    r14,0x1
    ad4b:	cmp    esi,r14d
    ad4e:	jg     ad0e <PostprocessSignificantHit+0x12e>
    ad50:	mov    r9d,DWORD PTR [rsp+0x38]
    ad55:	mov    r14,QWORD PTR [rsp+0x18]
    ad5a:	test   r9d,r9d
    ad5d:	je     afb0 <PostprocessSignificantHit+0x3d0>
    ad63:	mov    r8d,DWORD PTR [rsp+0xd8]
    ad6b:	test   r8d,r8d
    ad6e:	jne    af80 <PostprocessSignificantHit+0x3a0>
    ad74:	movss  xmm0,DWORD PTR [rsp+0x4]
    ad7a:	mov    rdi,rbx
    ad7d:	xor    r15d,r15d
    ad80:	call   17840 <PValue>
    ad85:	mov    edi,DWORD PTR [rsp+0x5c]
    ad89:	mov    eax,0x1
    ad8e:	movsd  QWORD PTR [rsp+0x18],xmm0
    ad94:	test   edi,edi
    ad96:	jle    ae17 <PostprocessSignificantHit+0x237>
    ad98:	mov    QWORD PTR [rsp+0x48],r13
    ad9d:	mov    r13d,eax
    ada0:	mov    ecx,DWORD PTR [r12+r15*4]
    ada4:	test   ecx,ecx
    ada6:	je     ae0c <PostprocessSignificantHit+0x22c>
    ada8:	lea    rax,[r15*8+0x0]
    adb0:	lea    rcx,[rsp+0x60]
    adb5:	mov    QWORD PTR [rsp+0x8],rax
    adba:	mov    rax,QWORD PTR [rsp+0x70]
    adbf:	lea    rdx,[rsp+0x6c]
    adc4:	lea    rsi,[rsp+0x68]
    adc9:	lea    r8,[rsp+0x64]
    adce:	mov    rdi,QWORD PTR [rax+r15*8]
    add2:	call   22c50 <TraceSimpleBounds>
    add7:	movss  xmm0,DWORD PTR [rbp+r15*4+0x0]
    adde:	mov    rdi,rbx
    ade1:	call   17840 <PValue>
    ade6:	movapd xmm1,xmm0
    adea:	movsd  xmm0,QWORD PTR [r14+0x18]
    adf0:	comisd xmm0,xmm1
    adf4:	jb     ae08 <PostprocessSignificantHit+0x228>
    adf6:	movss  xmm0,DWORD PTR [rbp+r15*4+0x0]
    adfd:	comiss xmm0,DWORD PTR [r14+0x10]
    ae02:	jae    aff0 <PostprocessSignificantHit+0x410>
    ae08:	add    r13d,0x1
    ae0c:	add    r15,0x1
    ae10:	cmp    DWORD PTR [rsp+0x5c],r15d
    ae15:	jg     ada0 <PostprocessSignificantHit+0x1c0>
    ae17:	mov    esi,DWORD PTR [rsp+0xf0]
    ae1e:	test   esi,esi
    ae20:	je     af60 <PostprocessSignificantHit+0x380>
    ae26:	movsd  xmm4,QWORD PTR [rsp+0x18]
    ae2c:	comisd xmm4,QWORD PTR [rip+0x32554]        # 3d388 <_IO_stdin_used+0x388>
    ae34:	ja     b0e0 <PostprocessSignificantHit+0x500>
    ae3a:	pxor   xmm0,xmm0
    ae3e:	cvtss2sd xmm0,DWORD PTR [rsp+0x4]
    ae44:	addsd  xmm0,QWORD PTR [rip+0x32544]        # 3d390 <_IO_stdin_used+0x390>
    ae4c:	movss  xmm4,DWORD PTR [rsp+0x4]
    ae52:	comiss xmm4,DWORD PTR [r14]
    ae56:	jb     aec1 <PostprocessSignificantHit+0x2e1>
    ae58:	mov    rax,QWORD PTR [rbx+0x10]
    ae5c:	mov    QWORD PTR [rsp+0x28],rax
    ae61:	mov    rax,QWORD PTR [rbx+0x8]
    ae65:	mov    QWORD PTR [rsp+0x20],rax
    ae6a:	mov    rax,QWORD PTR [rbx]
    ae6d:	mov    QWORD PTR [rsp+0x10],rax
    ae72:	sub    rsp,0x8
    ae76:	xor    r9d,r9d
    ae79:	pxor   xmm4,xmm4
    ae7d:	xor    r8d,r8d
    ae80:	push   0x0
    ae82:	mov    eax,DWORD PTR [rsp+0x48]
    ae86:	pxor   xmm3,xmm3
    ae8a:	push   rax
    ae8b:	push   0x0
    ae8d:	push   0x0
    ae8f:	push   0x0
    ae91:	push   0x0
    ae93:	push   0x0
    ae95:	mov    rcx,QWORD PTR [rsp+0x68]
    ae9a:	mov    rdx,QWORD PTR [rsp+0x60]
    ae9f:	mov    rsi,QWORD PTR [rsp+0x50]
    aea4:	movss  xmm2,DWORD PTR [rsp+0x44]
    aeaa:	movsd  xmm1,QWORD PTR [rsp+0x58]
    aeb0:	mov    rdi,QWORD PTR [rsp+0x80]
    aeb8:	call   20370 <RegisterHit>
    aebd:	add    rsp,0x40
    aec1:	mov    eax,DWORD PTR [rsp+0x5c]
    aec5:	xor    ebx,ebx
    aec7:	test   eax,eax
    aec9:	jle    aee8 <PostprocessSignificantHit+0x308>
    aecb:	nop    DWORD PTR [rax+rax*1+0x0]
    aed0:	mov    rax,QWORD PTR [rsp+0x70]
    aed5:	mov    rdi,QWORD PTR [rax+rbx*8]
    aed9:	add    rbx,0x1
    aedd:	call   20af0 <P7FreeTrace>
    aee2:	cmp    DWORD PTR [rsp+0x5c],ebx
    aee6:	jg     aed0 <PostprocessSignificantHit+0x2f0>
    aee8:	mov    rdi,QWORD PTR [rsp+0x70]
    aeed:	call   3460 <free@plt>
    aef2:	mov    rdi,rbp
    aef5:	call   3460 <free@plt>
    aefa:	mov    rdi,r12
    aefd:	call   3460 <free@plt>
    af02:	mov    rax,QWORD PTR [rsp+0x78]
    af07:	xor    rax,QWORD PTR fs:0x28
    af10:	jne    b0f6 <PostprocessSignificantHit+0x516>
    af16:	movss  xmm0,DWORD PTR [rsp+0x4]
    af1c:	add    rsp,0x88
    af23:	pop    rbx
    af24:	pop    rbp
    af25:	pop    r12
    af27:	pop    r13
    af29:	pop    r14
    af2b:	pop    r15
    af2d:	ret    
    af2e:	xchg   ax,ax
    af30:	mov    rdx,QWORD PTR [rsp+0x70]
    af35:	mov    rdi,rbx
    af38:	mov    rsi,QWORD PTR [rdx+r14*8]
    af3c:	mov    rdx,r13
    af3f:	call   184f0 <TraceScoreCorrection>
    af44:	movss  xmm1,DWORD PTR [rbp+r14*4+0x0]
    af4b:	subss  xmm1,xmm0
    af4f:	movaps xmm0,xmm1
    af52:	movss  DWORD PTR [rbp+r14*4+0x0],xmm1
    af59:	jmp    ad32 <PostprocessSignificantHit+0x152>
    af5e:	xchg   ax,ax
    af60:	movss  xmm3,DWORD PTR [rsp+0x4]
    af66:	comiss xmm3,DWORD PTR [r14]
    af6a:	jb     aec1 <PostprocessSignificantHit+0x2e1>
    af70:	pxor   xmm0,xmm0
    af74:	cvtss2sd xmm0,xmm3
    af78:	jmp    ae72 <PostprocessSignificantHit+0x292>
    af7d:	nop    DWORD PTR [rax]
    af80:	movss  xmm2,DWORD PTR [rsp+0x8]
    af86:	movss  DWORD PTR [rsp+0x4],xmm2
    af8c:	jmp    ad74 <PostprocessSignificantHit+0x194>
    af91:	nop    DWORD PTR [rax+0x0]
    af98:	lea    rdi,[rip+0x32265]        # 3d204 <_IO_stdin_used+0x204>
    af9f:	xor    eax,eax
    afa1:	call   317f0 <Die>
    afa6:	movsxd rdx,DWORD PTR [rsp+0x5c]
    afab:	jmp    ac7d <PostprocessSignificantHit+0x9d>
    afb0:	mov    rdi,rbp
    afb3:	call   3b110 <FArgMax>
    afb8:	mov    r8d,DWORD PTR [rsp+0xd8]
    afc0:	mov    DWORD PTR [rsp+0x38],0x1
    afc8:	cdqe   
    afca:	movss  xmm3,DWORD PTR [rbp+rax*4+0x0]
    afd0:	mov    DWORD PTR [r12+rax*4],0x1
    afd8:	movss  DWORD PTR [rsp+0x4],xmm3
    afde:	test   r8d,r8d
    afe1:	je     ad74 <PostprocessSignificantHit+0x194>
    afe7:	jmp    af80 <PostprocessSignificantHit+0x3a0>
    afe9:	nop    DWORD PTR [rax+0x0]
    aff0:	mov    rax,QWORD PTR [rsp+0x70]
    aff5:	lea    rcx,[r15*8+0x0]
    affd:	mov    rdx,QWORD PTR [rsp+0x48]
    b002:	mov    rsi,rbx
    b005:	movsd  QWORD PTR [rsp+0x8],xmm1
    b00b:	mov    rdi,QWORD PTR [rax+rcx*1]
    b00f:	mov    rcx,QWORD PTR [rsp+0x10]
    b014:	call   220a0 <CreateFancyAli>
    b019:	mov    edx,DWORD PTR [rsp+0xf0]
    b020:	movsd  xmm1,QWORD PTR [rsp+0x8]
    b026:	test   edx,edx
    b028:	je     b0a0 <PostprocessSignificantHit+0x4c0>
    b02a:	mov    r8d,DWORD PTR [rsp+0x68]
    b02f:	pxor   xmm0,xmm0
    b033:	mov    r10d,DWORD PTR [rbx+0x88]
    b03a:	mov    r11d,DWORD PTR [rsp+0x64]
    b03f:	mov    edi,DWORD PTR [rsp+0x60]
    b043:	cvtsi2sd xmm0,r8d
    b048:	mov    r9d,DWORD PTR [rsp+0x6c]
    b04d:	xorpd  xmm0,XMMWORD PTR [rip+0x3234b]        # 3d3a0 <_IO_stdin_used+0x3a0>
    b055:	mov    rcx,QWORD PTR [rbx+0x10]
    b059:	mov    rdx,QWORD PTR [rbx+0x8]
    b05d:	mov    rsi,QWORD PTR [rbx]
    b060:	movss  xmm2,DWORD PTR [rbp+r15*4+0x0]
    b067:	sub    rsp,0x8
    b06b:	push   rax
    b06c:	mov    eax,DWORD PTR [rsp+0x48]
    b070:	push   rax
    b071:	push   r13
    b073:	push   r10
    b075:	push   r11
    b077:	push   rdi
    b078:	mov    eax,DWORD PTR [rsp+0x74]
    b07c:	push   rax
    b07d:	movss  xmm4,DWORD PTR [rsp+0x44]
    b083:	movsd  xmm3,QWORD PTR [rsp+0x58]
    b089:	mov    rdi,QWORD PTR [rsp+0x70]
    b08e:	call   20370 <RegisterHit>
    b093:	add    rsp,0x40
    b097:	jmp    ae08 <PostprocessSignificantHit+0x228>
    b09c:	nop    DWORD PTR [rax+0x0]
    b0a0:	movss  xmm2,DWORD PTR [rbp+r15*4+0x0]
    b0a7:	pxor   xmm0,xmm0
    b0ab:	mov    r10d,DWORD PTR [rbx+0x88]
    b0b2:	mov    r11d,DWORD PTR [rsp+0x64]
    b0b7:	mov    edi,DWORD PTR [rsp+0x60]
    b0bb:	mov    r9d,DWORD PTR [rsp+0x6c]
    b0c0:	mov    r8d,DWORD PTR [rsp+0x68]
    b0c5:	cvtss2sd xmm0,xmm2
    b0c9:	mov    rdx,QWORD PTR [rsp+0x20]
    b0ce:	mov    rcx,QWORD PTR [rsp+0x28]
    b0d3:	mov    rsi,QWORD PTR [rsp+0x10]
    b0d8:	jmp    b067 <PostprocessSignificantHit+0x487>
    b0da:	nop    WORD PTR [rax+rax*1+0x0]
    b0e0:	movapd xmm0,xmm4
    b0e4:	call   35e0 <log@plt>
    b0e9:	xorpd  xmm0,XMMWORD PTR [rip+0x322af]        # 3d3a0 <_IO_stdin_used+0x3a0>
    b0f1:	jmp    ae4c <PostprocessSignificantHit+0x26c>
    b0f6:	call   3570 <__stack_chk_fail@plt>
    b0fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000b100 <Statetype>:
    b100:	endbr64 
    b104:	movzx  edx,dil
    b108:	cmp    dil,0xa
    b10c:	ja     b1b8 <Statetype+0xb8>
    b112:	lea    rcx,[rip+0x3236f]        # 3d488 <_IO_stdin_used+0x488>
    b119:	movsxd rax,DWORD PTR [rcx+rdx*4]
    b11d:	add    rax,rcx
    b120:	notrack jmp rax
    b123:	nop    DWORD PTR [rax+rax*1+0x0]
    b128:	lea    rax,[rip+0x36b87]        # 41cb6 <CSWTCH.18+0x5f6>
    b12f:	ret    
    b130:	lea    rax,[rip+0x36773]        # 418aa <CSWTCH.18+0x1ea>
    b137:	ret    
    b138:	nop    DWORD PTR [rax+rax*1+0x0]
    b140:	lea    rax,[rip+0x34768]        # 3f8af <xpam120+0xb4f>
    b147:	ret    
    b148:	nop    DWORD PTR [rax+rax*1+0x0]
    b150:	lea    rax,[rip+0x33630]        # 3e787 <_IO_stdin_used+0x1787>
    b157:	ret    
    b158:	nop    DWORD PTR [rax+rax*1+0x0]
    b160:	lea    rax,[rip+0x3632a]        # 41491 <gki_primes+0xa11>
    b167:	ret    
    b168:	nop    DWORD PTR [rax+rax*1+0x0]
    b170:	lea    rax,[rip+0x3676f]        # 418e6 <CSWTCH.18+0x226>
    b177:	ret    
    b178:	nop    DWORD PTR [rax+rax*1+0x0]
    b180:	lea    rax,[rip+0x33747]        # 3e8ce <_IO_stdin_used+0x18ce>
    b187:	ret    
    b188:	nop    DWORD PTR [rax+rax*1+0x0]
    b190:	lea    rax,[rip+0x36754]        # 418eb <CSWTCH.18+0x22b>
    b197:	ret    
    b198:	nop    DWORD PTR [rax+rax*1+0x0]
    b1a0:	lea    rax,[rip+0x3372a]        # 3e8d1 <_IO_stdin_used+0x18d1>
    b1a7:	ret    
    b1a8:	nop    DWORD PTR [rax+rax*1+0x0]
    b1b0:	lea    rax,[rip+0x321ff]        # 3d3b6 <_IO_stdin_used+0x3b6>
    b1b7:	ret    
    b1b8:	lea    rax,[rip+0x321f1]        # 3d3b0 <_IO_stdin_used+0x3b0>
    b1bf:	ret    

000000000000b1c0 <AlphabetType2String>:
    b1c0:	endbr64 
    b1c4:	lea    rax,[rip+0x321ed]        # 3d3b8 <_IO_stdin_used+0x3b8>
    b1cb:	cmp    edi,0x2
    b1ce:	je     b1f0 <AlphabetType2String+0x30>
    b1d0:	lea    rax,[rip+0x321ee]        # 3d3c5 <_IO_stdin_used+0x3c5>
    b1d7:	cmp    edi,0x3
    b1da:	je     b1f0 <AlphabetType2String+0x30>
    b1dc:	test   edi,edi
    b1de:	lea    rax,[rip+0x321cb]        # 3d3b0 <_IO_stdin_used+0x3b0>
    b1e5:	lea    rdx,[rip+0x321e1]        # 3d3cd <_IO_stdin_used+0x3cd>
    b1ec:	cmove  rax,rdx
    b1f0:	ret    
    b1f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    b1fc:	nop    DWORD PTR [rax+0x0]

000000000000b200 <P7PrintTrace>:
    b200:	endbr64 
    b204:	push   r15
    b206:	push   r14
    b208:	push   r13
    b20a:	push   r12
    b20c:	push   rbp
    b20d:	mov    rbp,rdi
    b210:	push   rbx
    b211:	sub    rsp,0x18
    b215:	mov    QWORD PTR [rsp],rcx
    b219:	test   rsi,rsi
    b21c:	je     b610 <P7PrintTrace+0x410>
    b222:	mov    r13,rsi
    b225:	mov    r12,rdx
    b228:	test   rdx,rdx
    b22b:	je     b580 <P7PrintTrace+0x380>
    b231:	test   BYTE PTR [rdx+0x1c8],0x1
    b238:	je     b568 <P7PrintTrace+0x368>
    b23e:	mov    ecx,DWORD PTR [r13+0x0]
    b242:	lea    rdx,[rip+0x322ff]        # 3d548 <_IO_stdin_used+0x548>
    b249:	mov    rdi,rbp
    b24c:	xor    eax,eax
    b24e:	mov    esi,0x1
    b253:	call   37c0 <__fprintf_chk@plt>
    b258:	mov    rcx,rbp
    b25b:	mov    edx,0x22
    b260:	mov    esi,0x1
    b265:	lea    rdi,[rip+0x32314]        # 3d580 <_IO_stdin_used+0x580>
    b26c:	call   37b0 <fwrite@plt>
    b271:	mov    eax,DWORD PTR [r13+0x0]
    b275:	test   eax,eax
    b277:	jle    b640 <P7PrintTrace+0x440>
    b27d:	mov    DWORD PTR [rsp+0xc],0x0
    b285:	mov    r14,r13
    b288:	xor    r15d,r15d
    b28b:	mov    r13,r12
    b28e:	xchg   ax,ax
    b290:	mov    rsi,QWORD PTR [rsp]
    b294:	lea    rbx,[r15*4+0x0]
    b29c:	test   rsi,rsi
    b29f:	je     b2b1 <P7PrintTrace+0xb1>
    b2a1:	mov    rdx,QWORD PTR [r14+0x18]
    b2a5:	movsxd rdx,DWORD PTR [rdx+r15*4]
    b2a9:	movsx  edi,BYTE PTR [rsi+rdx*1]
    b2ad:	mov    DWORD PTR [rsp+0x8],edi
    b2b1:	mov    rdx,QWORD PTR [r14+0x10]
    b2b5:	mov    rcx,QWORD PTR [r14+0x8]
    b2b9:	sub    eax,0x1
    b2bc:	mov    r12d,r15d
    b2bf:	xor    r8d,r8d
    b2c2:	mov    r10d,DWORD PTR [rdx+rbx*1]
    b2c6:	movsx  edi,BYTE PTR [rcx+r15*1]
    b2cb:	cmp    eax,r15d
    b2ce:	jg     b3f8 <P7PrintTrace+0x1f8>
    b2d4:	call   b100 <Statetype>
    b2d9:	sub    rsp,0x8
    b2dd:	mov    esi,0x1
    b2e2:	mov    rdi,rbp
    b2e5:	mov    rcx,rax
    b2e8:	mov    rax,QWORD PTR [r14+0x18]
    b2ec:	lea    rdx,[rip+0x32115]        # 3d408 <_IO_stdin_used+0x408>
    b2f3:	mov    r9d,DWORD PTR [rax+rbx*1]
    b2f7:	push   r8
    b2f9:	xor    eax,eax
    b2fb:	mov    r8d,r10d
    b2fe:	call   37c0 <__fprintf_chk@plt>
    b303:	mov    eax,DWORD PTR [r14]
    b306:	pop    rdx
    b307:	pop    rcx
    b308:	sub    eax,0x1
    b30b:	cmp    eax,r12d
    b30e:	jg     b430 <P7PrintTrace+0x230>
    b314:	cmp    QWORD PTR [rsp],0x0
    b319:	je     b466 <P7PrintTrace+0x266>
    b31f:	mov    rdx,QWORD PTR [r14+0x8]
    b323:	movzx  eax,BYTE PTR [rdx+r15*1]
    b328:	cmp    al,0x1
    b32a:	je     b500 <P7PrintTrace+0x300>
    b330:	cmp    al,0x3
    b332:	je     b490 <P7PrintTrace+0x290>
    b338:	cmp    al,0x5
    b33a:	je     b3b0 <P7PrintTrace+0x1b0>
    b33c:	cmp    al,0x8
    b33e:	je     b550 <P7PrintTrace+0x350>
    b344:	cmp    al,0xa
    b346:	jne    b350 <P7PrintTrace+0x150>
    b348:	cmp    BYTE PTR [rdx+r15*1-0x1],0xa
    b34e:	je     b3b8 <P7PrintTrace+0x1b8>
    b350:	mov    rsi,rbp
    b353:	mov    edi,0xa
    b358:	add    r15,0x1
    b35c:	call   3600 <fputc@plt>
    b361:	mov    eax,DWORD PTR [r14]
    b364:	cmp    eax,r15d
    b367:	jg     b290 <P7PrintTrace+0x90>
    b36d:	mov    rcx,rbp
    b370:	mov    edx,0x22
    b375:	mov    esi,0x1
    b37a:	lea    rdi,[rip+0x32227]        # 3d5a8 <_IO_stdin_used+0x5a8>
    b381:	call   37b0 <fwrite@plt>
    b386:	mov    ecx,DWORD PTR [rsp+0xc]
    b38a:	add    rsp,0x18
    b38e:	mov    rdi,rbp
    b391:	pop    rbx
    b392:	lea    rdx,[rip+0x32091]        # 3d42a <_IO_stdin_used+0x42a>
    b399:	pop    rbp
    b39a:	mov    esi,0x1
    b39f:	pop    r12
    b3a1:	xor    eax,eax
    b3a3:	pop    r13
    b3a5:	pop    r14
    b3a7:	pop    r15
    b3a9:	jmp    37c0 <__fprintf_chk@plt>
    b3ae:	xchg   ax,ax
    b3b0:	cmp    BYTE PTR [rdx+r15*1-0x1],0x5
    b3b6:	jne    b350 <P7PrintTrace+0x150>
    b3b8:	call   3810 <__ctype_tolower_loc@plt>
    b3bd:	movsxd rdx,DWORD PTR [rsp+0x8]
    b3c2:	xor    ecx,ecx
    b3c4:	mov    rdi,rbp
    b3c7:	lea    rbx,[rip+0x56eb2]        # 62280 <Alphabet>
    b3ce:	mov    rax,QWORD PTR [rax]
    b3d1:	mov    esi,0x1
    b3d6:	movsx  rdx,BYTE PTR [rbx+rdx*1]
    b3db:	movsx  r8d,BYTE PTR [rax+rdx*4]
    b3e0:	lea    rdx,[rip+0x32033]        # 3d41a <_IO_stdin_used+0x41a>
    b3e7:	xor    eax,eax
    b3e9:	call   37c0 <__fprintf_chk@plt>
    b3ee:	jmp    b350 <P7PrintTrace+0x150>
    b3f3:	nop    DWORD PTR [rax+rax*1+0x0]
    b3f8:	mov    r8d,DWORD PTR [rdx+rbx*1+0x4]
    b3fd:	movsx  ecx,BYTE PTR [rcx+r15*1+0x1]
    b403:	mov    edx,r10d
    b406:	mov    esi,edi
    b408:	mov    rdi,r13
    b40b:	call   21c20 <TransitionScoreLookup>
    b410:	mov    r8d,eax
    b413:	mov    rax,QWORD PTR [r14+0x10]
    b417:	mov    r10d,DWORD PTR [rax+rbx*1]
    b41b:	mov    rax,QWORD PTR [r14+0x8]
    b41f:	movsx  edi,BYTE PTR [rax+r15*1]
    b424:	jmp    b2d4 <P7PrintTrace+0xd4>
    b429:	nop    DWORD PTR [rax+0x0]
    b430:	mov    rax,QWORD PTR [r14+0x10]
    b434:	mov    rdx,QWORD PTR [r14+0x8]
    b438:	mov    rdi,r13
    b43b:	mov    r9d,DWORD PTR [rax+rbx*1]
    b43f:	movsx  ecx,BYTE PTR [rdx+r15*1+0x1]
    b445:	movsx  esi,BYTE PTR [rdx+r15*1]
    b44a:	mov    r8d,DWORD PTR [rax+rbx*1+0x4]
    b44f:	mov    edx,r9d
    b452:	call   21c20 <TransitionScoreLookup>
    b457:	add    DWORD PTR [rsp+0xc],eax
    b45b:	cmp    QWORD PTR [rsp],0x0
    b460:	jne    b31f <P7PrintTrace+0x11f>
    b466:	mov    r8d,0x2d
    b46c:	mov    esi,0x1
    b471:	mov    rdi,rbp
    b474:	xor    eax,eax
    b476:	lea    rcx,[rip+0x3271d]        # 3db9a <_IO_stdin_used+0xb9a>
    b47d:	lea    rdx,[rip+0x31f9e]        # 3d422 <_IO_stdin_used+0x422>
    b484:	call   37c0 <__fprintf_chk@plt>
    b489:	jmp    b350 <P7PrintTrace+0x150>
    b48e:	xchg   ax,ax
    b490:	call   3810 <__ctype_tolower_loc@plt>
    b495:	movsxd r12,DWORD PTR [rsp+0x8]
    b49a:	mov    rsi,QWORD PTR [r14+0x10]
    b49e:	mov    rdi,rbp
    b4a1:	lea    rcx,[rip+0x56dd8]        # 62280 <Alphabet>
    b4a8:	mov    rax,QWORD PTR [rax]
    b4ab:	movsx  rdx,BYTE PTR [rcx+r12*1]
    b4b0:	mov    rcx,QWORD PTR [r13+0x148]
    b4b7:	movsxd rsi,DWORD PTR [rsi+rbx*1]
    b4bb:	mov    rcx,QWORD PTR [rcx+r12*8]
    b4bf:	movsx  r8d,BYTE PTR [rax+rdx*4]
    b4c4:	lea    rdx,[rip+0x31f4f]        # 3d41a <_IO_stdin_used+0x41a>
    b4cb:	xor    eax,eax
    b4cd:	mov    ecx,DWORD PTR [rcx+rsi*4]
    b4d0:	mov    esi,0x1
    b4d5:	call   37c0 <__fprintf_chk@plt>
    b4da:	mov    rax,QWORD PTR [r13+0x148]
    b4e1:	mov    rdx,QWORD PTR [r14+0x10]
    b4e5:	mov    rax,QWORD PTR [rax+r12*8]
    b4e9:	movsxd rdx,DWORD PTR [rdx+rbx*1]
    b4ed:	mov    eax,DWORD PTR [rax+rdx*4]
    b4f0:	add    DWORD PTR [rsp+0xc],eax
    b4f4:	jmp    b350 <P7PrintTrace+0x150>
    b4f9:	nop    DWORD PTR [rax+0x0]
    b500:	movsxd r12,DWORD PTR [rsp+0x8]
    b505:	mov    rax,QWORD PTR [r13+0x140]
    b50c:	mov    esi,0x1
    b511:	mov    rdi,rbp
    b514:	mov    rdx,QWORD PTR [r14+0x10]
    b518:	mov    rax,QWORD PTR [rax+r12*8]
    b51c:	movsxd rdx,DWORD PTR [rdx+rbx*1]
    b520:	mov    ecx,DWORD PTR [rax+rdx*4]
    b523:	lea    rax,[rip+0x56d56]        # 62280 <Alphabet>
    b52a:	lea    rdx,[rip+0x31ee9]        # 3d41a <_IO_stdin_used+0x41a>
    b531:	movsx  r8d,BYTE PTR [rax+r12*1]
    b536:	xor    eax,eax
    b538:	call   37c0 <__fprintf_chk@plt>
    b53d:	mov    rax,QWORD PTR [r13+0x140]
    b544:	jmp    b4e1 <P7PrintTrace+0x2e1>
    b546:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b550:	cmp    BYTE PTR [rdx+r15*1-0x1],0x8
    b556:	jne    b350 <P7PrintTrace+0x150>
    b55c:	jmp    b3b8 <P7PrintTrace+0x1b8>
    b561:	nop    DWORD PTR [rax+0x0]
    b568:	lea    rdi,[rip+0x31f99]        # 3d508 <_IO_stdin_used+0x508>
    b56f:	xor    eax,eax
    b571:	call   317f0 <Die>
    b576:	jmp    b23e <P7PrintTrace+0x3e>
    b57b:	nop    DWORD PTR [rax+rax*1+0x0]
    b580:	mov    ecx,DWORD PTR [rsi]
    b582:	lea    rdx,[rip+0x31f57]        # 3d4e0 <_IO_stdin_used+0x4e0>
    b589:	mov    esi,0x1
    b58e:	xor    eax,eax
    b590:	xor    ebx,ebx
    b592:	lea    r12,[rip+0x31e61]        # 3d3fa <_IO_stdin_used+0x3fa>
    b599:	call   37c0 <__fprintf_chk@plt>
    b59e:	mov    esi,0x1
    b5a3:	mov    rcx,rbp
    b5a6:	mov    edx,0x10
    b5ab:	lea    rdi,[rip+0x31e37]        # 3d3e9 <_IO_stdin_used+0x3e9>
    b5b2:	call   37b0 <fwrite@plt>
    b5b7:	mov    esi,DWORD PTR [r13+0x0]
    b5bb:	test   esi,esi
    b5bd:	jle    b5fc <P7PrintTrace+0x3fc>
    b5bf:	nop
    b5c0:	mov    rax,QWORD PTR [r13+0x8]
    b5c4:	movsx  edi,BYTE PTR [rax+rbx*1]
    b5c8:	call   b100 <Statetype>
    b5cd:	mov    rdx,QWORD PTR [r13+0x18]
    b5d1:	mov    esi,0x1
    b5d6:	mov    rdi,rbp
    b5d9:	mov    rcx,rax
    b5dc:	mov    rax,QWORD PTR [r13+0x10]
    b5e0:	mov    r9d,DWORD PTR [rdx+rbx*4]
    b5e4:	mov    rdx,r12
    b5e7:	mov    r8d,DWORD PTR [rax+rbx*4]
    b5eb:	xor    eax,eax
    b5ed:	add    rbx,0x1
    b5f1:	call   37c0 <__fprintf_chk@plt>
    b5f6:	cmp    DWORD PTR [r13+0x0],ebx
    b5fa:	jg     b5c0 <P7PrintTrace+0x3c0>
    b5fc:	add    rsp,0x18
    b600:	pop    rbx
    b601:	pop    rbp
    b602:	pop    r12
    b604:	pop    r13
    b606:	pop    r14
    b608:	pop    r15
    b60a:	ret    
    b60b:	nop    DWORD PTR [rax+rax*1+0x0]
    b610:	add    rsp,0x18
    b614:	mov    rcx,rdi
    b617:	mov    edx,0x13
    b61c:	mov    esi,0x1
    b621:	pop    rbx
    b622:	lea    rdi,[rip+0x31dac]        # 3d3d5 <_IO_stdin_used+0x3d5>
    b629:	pop    rbp
    b62a:	pop    r12
    b62c:	pop    r13
    b62e:	pop    r14
    b630:	pop    r15
    b632:	jmp    37b0 <fwrite@plt>
    b637:	nop    WORD PTR [rax+rax*1+0x0]
    b640:	mov    DWORD PTR [rsp+0xc],0x0
    b648:	jmp    b36d <P7PrintTrace+0x16d>
    b64d:	nop    DWORD PTR [rax]

000000000000b650 <P7PrintPrior>:
    b650:	endbr64 
    b654:	push   r15
    b656:	push   r14
    b658:	push   r13
    b65a:	mov    r13,rsi
    b65d:	push   r12
    b65f:	push   rbp
    b660:	mov    rbp,rdi
    b663:	push   rbx
    b664:	sub    rsp,0x8
    b668:	mov    eax,DWORD PTR [rsi]
    b66a:	test   eax,eax
    b66c:	je     b92e <P7PrintPrior+0x2de>
    b672:	cmp    eax,0x1
    b675:	je     b8e8 <P7PrintPrior+0x298>
    b67b:	lea    rdi,[rip+0x31dd0]        # 3d452 <_IO_stdin_used+0x452>
    b682:	xor    eax,eax
    b684:	call   317f0 <Die>
    b689:	mov    eax,DWORD PTR [rip+0x569f1]        # 62080 <Alphabet_type>
    b68f:	cmp    eax,0x3
    b692:	je     b910 <P7PrintPrior+0x2c0>
    b698:	cmp    eax,0x2
    b69b:	je     b94c <P7PrintPrior+0x2fc>
    b6a1:	mov    ecx,DWORD PTR [r13+0x4]
    b6a5:	mov    rdi,rbp
    b6a8:	lea    rdx,[rip+0x31dc5]        # 3d474 <_IO_stdin_used+0x474>
    b6af:	xor    eax,eax
    b6b1:	mov    esi,0x1
    b6b6:	call   37c0 <__fprintf_chk@plt>
    b6bb:	mov    edi,DWORD PTR [r13+0x4]
    b6bf:	test   edi,edi
    b6c1:	jle    b748 <P7PrintPrior+0xf8>
    b6c7:	mov    r12,r13
    b6ca:	xor    r15d,r15d
    b6cd:	lea    r14,[rip+0x31dab]        # 3d47f <_IO_stdin_used+0x47f>
    b6d4:	nop    DWORD PTR [rax+0x0]
    b6d8:	pxor   xmm0,xmm0
    b6dc:	lea    rdx,[rip+0x31d96]        # 3d479 <_IO_stdin_used+0x479>
    b6e3:	mov    rdi,rbp
    b6e6:	xor    ebx,ebx
    b6e8:	mov    esi,0x1
    b6ed:	mov    eax,0x1
    b6f2:	cvtss2sd xmm0,DWORD PTR [r13+r15*4+0x8]
    b6f9:	call   37c0 <__fprintf_chk@plt>
    b6fe:	xchg   ax,ax
    b700:	pxor   xmm0,xmm0
    b704:	mov    rdx,r14
    b707:	mov    esi,0x1
    b70c:	mov    rdi,rbp
    b70f:	cvtss2sd xmm0,DWORD PTR [r12+rbx*4+0x328]
    b719:	mov    eax,0x1
    b71e:	add    rbx,0x1
    b722:	call   37c0 <__fprintf_chk@plt>
    b727:	cmp    rbx,0x7
    b72b:	jne    b700 <P7PrintPrior+0xb0>
    b72d:	mov    rsi,rbp
    b730:	mov    edi,0xa
    b735:	add    r15,0x1
    b739:	add    r12,0x1c
    b73d:	call   3600 <fputc@plt>
    b742:	cmp    DWORD PTR [r13+0x4],r15d
    b746:	jg     b6d8 <P7PrintPrior+0x88>
    b748:	mov    ecx,DWORD PTR [r13+0x1908]
    b74f:	mov    esi,0x1
    b754:	mov    rdi,rbp
    b757:	xor    eax,eax
    b759:	lea    rdx,[rip+0x31d14]        # 3d474 <_IO_stdin_used+0x474>
    b760:	call   37c0 <__fprintf_chk@plt>
    b765:	mov    esi,DWORD PTR [r13+0x1908]
    b76c:	test   esi,esi
    b76e:	jle    b811 <P7PrintPrior+0x1c1>
    b774:	mov    r12,r13
    b777:	xor    r15d,r15d
    b77a:	lea    r14,[rip+0x31cfe]        # 3d47f <_IO_stdin_used+0x47f>
    b781:	nop    DWORD PTR [rax+0x0]
    b788:	pxor   xmm0,xmm0
    b78c:	mov    esi,0x1
    b791:	mov    rdi,rbp
    b794:	mov    eax,0x1
    b799:	lea    rdx,[rip+0x31cd9]        # 3d479 <_IO_stdin_used+0x479>
    b7a0:	cvtss2sd xmm0,DWORD PTR [r13+r15*4+0x190c]
    b7aa:	call   37c0 <__fprintf_chk@plt>
    b7af:	mov    ecx,DWORD PTR [rip+0x56b4b]        # 62300 <Alphabet_size>
    b7b5:	test   ecx,ecx
    b7b7:	jle    b7ef <P7PrintPrior+0x19f>
    b7b9:	xor    ebx,ebx
    b7bb:	nop    DWORD PTR [rax+rax*1+0x0]
    b7c0:	pxor   xmm0,xmm0
    b7c4:	mov    rdx,r14
    b7c7:	mov    esi,0x1
    b7cc:	mov    rdi,rbp
    b7cf:	cvtss2sd xmm0,DWORD PTR [r12+rbx*4+0x1c2c]
    b7d9:	mov    eax,0x1
    b7de:	add    rbx,0x1
    b7e2:	call   37c0 <__fprintf_chk@plt>
    b7e7:	cmp    DWORD PTR [rip+0x56b13],ebx        # 62300 <Alphabet_size>
    b7ed:	jg     b7c0 <P7PrintPrior+0x170>
    b7ef:	mov    rsi,rbp
    b7f2:	mov    edi,0xa
    b7f7:	add    r15,0x1
    b7fb:	add    r12,0x50
    b7ff:	call   3600 <fputc@plt>
    b804:	cmp    DWORD PTR [r13+0x1908],r15d
    b80b:	jg     b788 <P7PrintPrior+0x138>
    b811:	mov    ecx,DWORD PTR [r13+0x5aac]
    b818:	lea    rdx,[rip+0x31c55]        # 3d474 <_IO_stdin_used+0x474>
    b81f:	mov    rdi,rbp
    b822:	xor    eax,eax
    b824:	mov    esi,0x1
    b829:	call   37c0 <__fprintf_chk@plt>
    b82e:	mov    edx,DWORD PTR [r13+0x5aac]
    b835:	test   edx,edx
    b837:	jle    b8d9 <P7PrintPrior+0x289>
    b83d:	mov    r12,r13
    b840:	xor    r15d,r15d
    b843:	lea    r14,[rip+0x31c35]        # 3d47f <_IO_stdin_used+0x47f>
    b84a:	nop    WORD PTR [rax+rax*1+0x0]
    b850:	pxor   xmm0,xmm0
    b854:	mov    esi,0x1
    b859:	mov    rdi,rbp
    b85c:	mov    eax,0x1
    b861:	lea    rdx,[rip+0x31c11]        # 3d479 <_IO_stdin_used+0x479>
    b868:	cvtss2sd xmm0,DWORD PTR [r13+r15*4+0x5ab0]
    b872:	call   37c0 <__fprintf_chk@plt>
    b877:	mov    eax,DWORD PTR [rip+0x56a83]        # 62300 <Alphabet_size>
    b87d:	test   eax,eax
    b87f:	jle    b8b7 <P7PrintPrior+0x267>
    b881:	xor    ebx,ebx
    b883:	nop    DWORD PTR [rax+rax*1+0x0]
    b888:	pxor   xmm0,xmm0
    b88c:	mov    rdx,r14
    b88f:	mov    esi,0x1
    b894:	mov    rdi,rbp
    b897:	cvtss2sd xmm0,DWORD PTR [r12+rbx*4+0x5dd0]
    b8a1:	mov    eax,0x1
    b8a6:	add    rbx,0x1
    b8aa:	call   37c0 <__fprintf_chk@plt>
    b8af:	cmp    DWORD PTR [rip+0x56a4b],ebx        # 62300 <Alphabet_size>
    b8b5:	jg     b888 <P7PrintPrior+0x238>
    b8b7:	mov    rsi,rbp
    b8ba:	mov    edi,0xa
    b8bf:	add    r15,0x1
    b8c3:	add    r12,0x50
    b8c7:	call   3600 <fputc@plt>
    b8cc:	cmp    DWORD PTR [r13+0x5aac],r15d
    b8d3:	jg     b850 <P7PrintPrior+0x200>
    b8d9:	add    rsp,0x8
    b8dd:	pop    rbx
    b8de:	pop    rbp
    b8df:	pop    r12
    b8e1:	pop    r13
    b8e3:	pop    r14
    b8e5:	pop    r15
    b8e7:	ret    
    b8e8:	mov    rcx,rdi
    b8eb:	mov    edx,0x4
    b8f0:	mov    esi,0x1
    b8f5:	lea    rdi,[rip+0x31b51]        # 3d44d <_IO_stdin_used+0x44d>
    b8fc:	call   37b0 <fwrite@plt>
    b901:	mov    eax,DWORD PTR [rip+0x56779]        # 62080 <Alphabet_type>
    b907:	cmp    eax,0x3
    b90a:	jne    b698 <P7PrintPrior+0x48>
    b910:	mov    rcx,rbp
    b913:	mov    edx,0x6
    b918:	mov    esi,0x1
    b91d:	lea    rdi,[rip+0x31b40]        # 3d464 <_IO_stdin_used+0x464>
    b924:	call   37b0 <fwrite@plt>
    b929:	jmp    b6a1 <P7PrintPrior+0x51>
    b92e:	mov    rcx,rdi
    b931:	mov    edx,0xa
    b936:	mov    esi,0x1
    b93b:	lea    rdi,[rip+0x31b00]        # 3d442 <_IO_stdin_used+0x442>
    b942:	call   37b0 <fwrite@plt>
    b947:	jmp    b689 <P7PrintPrior+0x39>
    b94c:	mov    rcx,rbp
    b94f:	mov    edx,0x8
    b954:	mov    esi,0x1
    b959:	lea    rdi,[rip+0x31b0b]        # 3d46b <_IO_stdin_used+0x46b>
    b960:	call   37b0 <fwrite@plt>
    b965:	jmp    b6a1 <P7PrintPrior+0x51>
    b96a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000b970 <TraceVerify>:
    b970:	endbr64 
    b974:	mov    rax,QWORD PTR [rdi+0x8]
    b978:	push   r15
    b97a:	xor    r8d,r8d
    b97d:	push   r14
    b97f:	push   r13
    b981:	push   r12
    b983:	push   rbp
    b984:	push   rbx
    b985:	movzx  r13d,BYTE PTR [rax]
    b989:	cmp    r13b,0x4
    b98d:	jne    b995 <TraceVerify+0x25>
    b98f:	cmp    BYTE PTR [rax+0x1],0x5
    b993:	je     b9a8 <TraceVerify+0x38>
    b995:	pop    rbx
    b996:	mov    eax,r8d
    b999:	pop    rbp
    b99a:	pop    r12
    b99c:	pop    r13
    b99e:	pop    r14
    b9a0:	pop    r15
    b9a2:	ret    
    b9a3:	nop    DWORD PTR [rax+rax*1+0x0]
    b9a8:	movsxd rcx,DWORD PTR [rdi]
    b9ab:	cmp    BYTE PTR [rax+rcx*1-0x2],0x8
    b9b0:	jne    b995 <TraceVerify+0x25>
    b9b2:	cmp    BYTE PTR [rax+rcx*1-0x1],0x9
    b9b7:	jne    b995 <TraceVerify+0x25>
    b9b9:	mov    rbx,QWORD PTR [rdi+0x18]
    b9bd:	mov    r15d,DWORD PTR [rbx+0x4]
    b9c1:	test   r15d,r15d
    b9c4:	jne    b995 <TraceVerify+0x25>
    b9c6:	test   ecx,ecx
    b9c8:	jle    bc90 <TraceVerify+0x320>
    b9ce:	lea    ebp,[rcx-0x1]
    b9d1:	mov    DWORD PTR [rsp-0x14],0x0
    b9d9:	xor    r15d,r15d
    b9dc:	xor    ecx,ecx
    b9de:	mov    DWORD PTR [rsp-0xc],ebp
    b9e2:	xor    r12d,r12d
    b9e5:	xor    r10d,r10d
    b9e8:	xor    r11d,r11d
    b9eb:	mov    DWORD PTR [rsp-0x10],0x0
    b9f3:	lea    r9,[rip+0x31aba]        # 3d4b4 <_IO_stdin_used+0x4b4>
    b9fa:	mov    DWORD PTR [rsp-0x8],edx
    b9fe:	cmp    r13b,0xa
    ba02:	ja     bc53 <TraceVerify+0x2e3>
    ba08:	movsxd r8,DWORD PTR [r9+r13*4]
    ba0c:	add    r8,r9
    ba0f:	notrack jmp r8
    ba13:	nop    DWORD PTR [rax+rax*1+0x0]
    ba18:	mov    rdx,QWORD PTR [rdi+0x10]
    ba1c:	mov    r8d,DWORD PTR [rdx+rcx*4]
    ba20:	test   r8d,r8d
    ba23:	jne    bc53 <TraceVerify+0x2e3>
    ba29:	mov    edx,DWORD PTR [rbx+rcx*4]
    ba2c:	test   r12d,r12d
    ba2f:	je     bc5b <TraceVerify+0x2eb>
    ba35:	add    r10d,0x1
    ba39:	cmp    r10d,edx
    ba3c:	jne    b995 <TraceVerify+0x25>
    ba42:	add    r12d,0x1
    ba46:	mov    r10d,edx
    ba49:	nop    DWORD PTR [rax+0x0]
    ba50:	lea    rdx,[rcx+0x1]
    ba54:	cmp    rcx,rbp
    ba57:	je     bc90 <TraceVerify+0x320>
    ba5d:	movzx  r13d,BYTE PTR [rax+rcx*1+0x1]
    ba63:	mov    rcx,rdx
    ba66:	jmp    b9fe <TraceVerify+0x8e>
    ba68:	nop    DWORD PTR [rax+rax*1+0x0]
    ba70:	cmp    DWORD PTR [rsp-0xc],ecx
    ba74:	jne    bc53 <TraceVerify+0x2e3>
    ba7a:	mov    rdx,QWORD PTR [rdi+0x10]
    ba7e:	mov    r8d,DWORD PTR [rdx+rcx*4]
    ba82:	test   r8d,r8d
    ba85:	jne    bc53 <TraceVerify+0x2e3>
    ba8b:	mov    edx,DWORD PTR [rbx+rcx*4]
    ba8e:	test   edx,edx
    ba90:	jne    b995 <TraceVerify+0x25>
    ba96:	cmp    DWORD PTR [rsp-0x8],r10d
    ba9b:	je     ba50 <TraceVerify+0xe0>
    ba9d:	jmp    b995 <TraceVerify+0x25>
    baa2:	nop    WORD PTR [rax+rax*1+0x0]
    baa8:	mov    rdx,QWORD PTR [rdi+0x10]
    baac:	mov    r8d,DWORD PTR [rdx+rcx*4]
    bab0:	test   r8d,r8d
    bab3:	jne    bc53 <TraceVerify+0x2e3>
    bab9:	mov    r13d,DWORD PTR [rsp-0x14]
    babe:	mov    edx,DWORD PTR [rbx+rcx*4]
    bac1:	test   r13d,r13d
    bac4:	je     bc6b <TraceVerify+0x2fb>
    baca:	add    r10d,0x1
    bace:	cmp    r10d,edx
    bad1:	jne    b995 <TraceVerify+0x25>
    bad7:	add    DWORD PTR [rsp-0x14],0x1
    badc:	mov    r10d,edx
    badf:	jmp    ba50 <TraceVerify+0xe0>
    bae4:	nop    DWORD PTR [rax+0x0]
    bae8:	mov    rdx,QWORD PTR [rdi+0x10]
    baec:	mov    r8d,DWORD PTR [rdx+rcx*4]
    baf0:	test   r8d,r8d
    baf3:	jne    bc53 <TraceVerify+0x2e3>
    baf9:	mov    r12d,DWORD PTR [rbx+rcx*4]
    bafd:	test   r12d,r12d
    bb00:	je     ba50 <TraceVerify+0xe0>
    bb06:	jmp    b995 <TraceVerify+0x25>
    bb0b:	nop    DWORD PTR [rax+rax*1+0x0]
    bb10:	mov    rdx,QWORD PTR [rdi+0x10]
    bb14:	mov    r8d,DWORD PTR [rdx+rcx*4]
    bb18:	test   r8d,r8d
    bb1b:	jne    bc53 <TraceVerify+0x2e3>
    bb21:	mov    r15d,DWORD PTR [rbx+rcx*4]
    bb25:	test   r15d,r15d
    bb28:	je     ba50 <TraceVerify+0xe0>
    bb2e:	jmp    b995 <TraceVerify+0x25>
    bb33:	nop    DWORD PTR [rax+rax*1+0x0]
    bb38:	mov    rdx,QWORD PTR [rdi+0x10]
    bb3c:	or     r11d,DWORD PTR [rdx+rcx*4]
    bb40:	jne    bc53 <TraceVerify+0x2e3>
    bb46:	mov    r14d,DWORD PTR [rsp-0x10]
    bb4b:	mov    edx,DWORD PTR [rbx+rcx*4]
    bb4e:	test   r14d,r14d
    bb51:	je     bc7b <TraceVerify+0x30b>
    bb57:	add    r10d,0x1
    bb5b:	cmp    r10d,edx
    bb5e:	jne    bc53 <TraceVerify+0x2e3>
    bb64:	add    DWORD PTR [rsp-0x10],0x1
    bb69:	mov    r10d,edx
    bb6c:	jmp    ba50 <TraceVerify+0xe0>
    bb71:	nop    DWORD PTR [rax+0x0]
    bb78:	mov    r8,QWORD PTR [rdi+0x10]
    bb7c:	mov    r8d,DWORD PTR [r8+rcx*4]
    bb80:	test   r8d,r8d
    bb83:	jne    bc53 <TraceVerify+0x2e3>
    bb89:	or     r11d,r10d
    bb8c:	or     r11d,DWORD PTR [rbx+rcx*4]
    bb90:	or     r11d,ecx
    bb93:	jne    b995 <TraceVerify+0x25>
    bb99:	xor    r10d,r10d
    bb9c:	jmp    ba50 <TraceVerify+0xe0>
    bba1:	nop    DWORD PTR [rax+0x0]
    bba8:	mov    r8d,DWORD PTR [rbx+rcx*4]
    bbac:	test   r8d,r8d
    bbaf:	jne    bc53 <TraceVerify+0x2e3>
    bbb5:	mov    rdx,QWORD PTR [rdi+0x10]
    bbb9:	add    r11d,0x1
    bbbd:	mov    edx,DWORD PTR [rdx+rcx*4]
    bbc0:	cmp    edx,r11d
    bbc3:	setne  BYTE PTR [rsp-0x1]
    bbc8:	test   edx,edx
    bbca:	movzx  r14d,BYTE PTR [rsp-0x1]
    bbd0:	setle  r13b
    bbd4:	or     r14b,r13b
    bbd7:	jne    b995 <TraceVerify+0x25>
    bbdd:	cmp    edx,esi
    bbdf:	jle    ba50 <TraceVerify+0xe0>
    bbe5:	jmp    b995 <TraceVerify+0x25>
    bbea:	nop    WORD PTR [rax+rax*1+0x0]
    bbf0:	add    r10d,0x1
    bbf4:	cmp    DWORD PTR [rbx+rcx*4],r10d
    bbf8:	jne    bc53 <TraceVerify+0x2e3>
    bbfa:	mov    rdx,QWORD PTR [rdi+0x10]
    bbfe:	mov    edx,DWORD PTR [rdx+rcx*4]
    bc01:	test   edx,edx
    bc03:	jle    bc53 <TraceVerify+0x2e3>
    bc05:	cmp    edx,esi
    bc07:	jg     bc53 <TraceVerify+0x2e3>
    bc09:	test   r15d,r15d
    bc0c:	je     bc17 <TraceVerify+0x2a7>
    bc0e:	add    r11d,0x1
    bc12:	cmp    edx,r11d
    bc15:	jne    bc53 <TraceVerify+0x2e3>
    bc17:	add    r15d,0x1
    bc1b:	mov    r11d,edx
    bc1e:	jmp    ba50 <TraceVerify+0xe0>
    bc23:	nop    DWORD PTR [rax+rax*1+0x0]
    bc28:	add    r10d,0x1
    bc2c:	cmp    DWORD PTR [rbx+rcx*4],r10d
    bc30:	jne    bc53 <TraceVerify+0x2e3>
    bc32:	mov    rdx,QWORD PTR [rdi+0x10]
    bc36:	mov    edx,DWORD PTR [rdx+rcx*4]
    bc39:	test   edx,edx
    bc3b:	setle  r13b
    bc3f:	cmp    edx,r11d
    bc42:	setne  r8b
    bc46:	or     r13b,r8b
    bc49:	jne    bc53 <TraceVerify+0x2e3>
    bc4b:	cmp    edx,esi
    bc4d:	jl     ba50 <TraceVerify+0xe0>
    bc53:	xor    r8d,r8d
    bc56:	jmp    b995 <TraceVerify+0x25>
    bc5b:	test   edx,edx
    bc5d:	jne    b995 <TraceVerify+0x25>
    bc63:	mov    edx,r10d
    bc66:	jmp    ba42 <TraceVerify+0xd2>
    bc6b:	test   edx,edx
    bc6d:	jne    b995 <TraceVerify+0x25>
    bc73:	mov    edx,r10d
    bc76:	jmp    bad7 <TraceVerify+0x167>
    bc7b:	or     edx,r10d
    bc7e:	je     bb64 <TraceVerify+0x1f4>
    bc84:	jmp    bc53 <TraceVerify+0x2e3>
    bc86:	nop    WORD PTR cs:[rax+rax*1+0x0]
    bc90:	mov    r8d,0x1
    bc96:	jmp    b995 <TraceVerify+0x25>
    bc9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bca0 <TraceCompare>:
    bca0:	endbr64 
    bca4:	mov    eax,DWORD PTR [rdi]
    bca6:	xor    r8d,r8d
    bca9:	cmp    eax,DWORD PTR [rsi]
    bcab:	jne    bd02 <TraceCompare+0x62>
    bcad:	test   eax,eax
    bcaf:	jle    bd10 <TraceCompare+0x70>
    bcb1:	lea    r10d,[rax-0x1]
    bcb5:	mov    r9,QWORD PTR [rdi+0x8]
    bcb9:	mov    r8,QWORD PTR [rsi+0x8]
    bcbd:	xor    eax,eax
    bcbf:	jmp    bcf4 <TraceCompare+0x54>
    bcc1:	nop    DWORD PTR [rax+0x0]
    bcc8:	mov    rdx,QWORD PTR [rsi+0x10]
    bccc:	mov    rcx,QWORD PTR [rdi+0x10]
    bcd0:	mov    edx,DWORD PTR [rdx+rax*4]
    bcd3:	cmp    DWORD PTR [rcx+rax*4],edx
    bcd6:	jne    bcff <TraceCompare+0x5f>
    bcd8:	mov    rdx,QWORD PTR [rsi+0x18]
    bcdc:	mov    rcx,QWORD PTR [rdi+0x18]
    bce0:	mov    edx,DWORD PTR [rdx+rax*4]
    bce3:	cmp    DWORD PTR [rcx+rax*4],edx
    bce6:	jne    bcff <TraceCompare+0x5f>
    bce8:	lea    rdx,[rax+0x1]
    bcec:	cmp    rax,r10
    bcef:	je     bd10 <TraceCompare+0x70>
    bcf1:	mov    rax,rdx
    bcf4:	movzx  ecx,BYTE PTR [r8+rax*1]
    bcf9:	cmp    BYTE PTR [r9+rax*1],cl
    bcfd:	je     bcc8 <TraceCompare+0x28>
    bcff:	xor    r8d,r8d
    bd02:	mov    eax,r8d
    bd05:	ret    
    bd06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    bd10:	mov    r8d,0x1
    bd16:	mov    eax,r8d
    bd19:	ret    
    bd1a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000bd20 <DisplayPlan7Matrix>:
    bd20:	endbr64 
    bd24:	push   r15
    bd26:	xor    eax,eax
    bd28:	push   r14
    bd2a:	push   r13
    bd2c:	mov    r13d,esi
    bd2f:	lea    rsi,[rip+0x31895]        # 3d5cb <_IO_stdin_used+0x5cb>
    bd36:	push   r12
    bd38:	push   rbp
    bd39:	mov    rbp,rdi
    bd3c:	mov    edi,0x1
    bd41:	push   rbx
    bd42:	mov    rbx,rcx
    bd45:	sub    rsp,0x28
    bd49:	mov    QWORD PTR [rsp+0x10],rdx
    bd4e:	call   3710 <__printf_chk@plt>
    bd53:	test   r13d,r13d
    bd56:	jle    c178 <DisplayPlan7Matrix+0x458>
    bd5c:	lea    eax,[r13-0x1]
    bd60:	lea    r15,[rbp+0x1]
    bd64:	lea    r14,[rbp+rax*1+0x2]
    bd69:	lea    r12,[rip+0x56510]        # 62280 <Alphabet>
    bd70:	lea    rbp,[rip+0x31865]        # 3d5dc <_IO_stdin_used+0x5dc>
    bd77:	nop    WORD PTR [rax+rax*1+0x0]
    bd80:	movsx  rax,BYTE PTR [r15]
    bd84:	mov    rsi,rbp
    bd87:	mov    edi,0x1
    bd8c:	add    r15,0x1
    bd90:	movsx  edx,BYTE PTR [r12+rax*1]
    bd95:	xor    eax,eax
    bd97:	call   3710 <__printf_chk@plt>
    bd9c:	cmp    r14,r15
    bd9f:	jne    bd80 <DisplayPlan7Matrix+0x60>
    bda1:	lea    rsi,[rip+0x31841]        # 3d5e9 <_IO_stdin_used+0x5e9>
    bda8:	mov    edi,0x1
    bdad:	xor    eax,eax
    bdaf:	xor    ebp,ebp
    bdb1:	call   3710 <__printf_chk@plt>
    bdb6:	movsd  xmm7,QWORD PTR [rip+0x3191a]        # 3d6d8 <_IO_stdin_used+0x6d8>
    bdbe:	lea    r12,[rip+0x3182b]        # 3d5f0 <_IO_stdin_used+0x5f0>
    bdc5:	movsd  QWORD PTR [rsp+0x8],xmm7
    bdcb:	nop    DWORD PTR [rax+rax*1+0x0]
    bdd0:	mov    rax,QWORD PTR [rbx]
    bdd3:	pxor   xmm0,xmm0
    bdd7:	mov    rsi,r12
    bdda:	mov    edi,0x1
    bddf:	mov    rax,QWORD PTR [rax+rbp*8]
    bde3:	add    rbp,0x1
    bde7:	cvtsi2sd xmm0,DWORD PTR [rax+0x10]
    bdec:	mov    eax,0x1
    bdf1:	divsd  xmm0,QWORD PTR [rsp+0x8]
    bdf7:	call   3710 <__printf_chk@plt>
    bdfc:	cmp    r13d,ebp
    bdff:	jge    bdd0 <DisplayPlan7Matrix+0xb0>
    be01:	mov    rax,QWORD PTR [rsp+0x10]
    be06:	mov    eax,DWORD PTR [rax+0x88]
    be0c:	test   eax,eax
    be0e:	jle    bf4e <DisplayPlan7Matrix+0x22e>
    be14:	mov    eax,r13d
    be17:	mov    DWORD PTR [rsp+0x8],0x1
    be1f:	mov    ebp,0x4
    be24:	lea    r12,[rip+0x317c5]        # 3d5f0 <_IO_stdin_used+0x5f0>
    be2b:	mov    QWORD PTR [rsp+0x18],rax
    be30:	lea    r14,[rax*8+0x8]
    be38:	nop    DWORD PTR [rax+rax*1+0x0]
    be40:	mov    edx,DWORD PTR [rsp+0x8]
    be44:	lea    rsi,[rip+0x317af]        # 3d5fa <_IO_stdin_used+0x5fa>
    be4b:	xor    eax,eax
    be4d:	xor    r15d,r15d
    be50:	mov    edi,0x1
    be55:	call   3710 <__printf_chk@plt>
    be5a:	test   r13d,r13d
    be5d:	js     be94 <DisplayPlan7Matrix+0x174>
    be5f:	nop
    be60:	mov    rax,QWORD PTR [rbx+0x8]
    be64:	pxor   xmm0,xmm0
    be68:	mov    rsi,r12
    be6b:	mov    edi,0x1
    be70:	mov    rax,QWORD PTR [rax+r15*1]
    be74:	add    r15,0x8
    be78:	cvtsi2sd xmm0,DWORD PTR [rax+rbp*1]
    be7d:	mov    eax,0x1
    be82:	divsd  xmm0,QWORD PTR [rip+0x3184e]        # 3d6d8 <_IO_stdin_used+0x6d8>
    be8a:	call   3710 <__printf_chk@plt>
    be8f:	cmp    r14,r15
    be92:	jne    be60 <DisplayPlan7Matrix+0x140>
    be94:	mov    rax,QWORD PTR [rsp+0x10]
    be99:	add    DWORD PTR [rsp+0x8],0x1
    be9e:	add    rbp,0x4
    bea2:	mov    ecx,DWORD PTR [rsp+0x8]
    bea6:	mov    eax,DWORD PTR [rax+0x88]
    beac:	cmp    eax,ecx
    beae:	jge    be40 <DisplayPlan7Matrix+0x120>
    beb0:	cmp    eax,0x1
    beb3:	jle    bf4e <DisplayPlan7Matrix+0x22e>
    beb9:	mov    rax,QWORD PTR [rsp+0x18]
    bebe:	mov    DWORD PTR [rsp+0x8],0x1
    bec6:	mov    ebp,0x4
    becb:	lea    r12,[rip+0x3171e]        # 3d5f0 <_IO_stdin_used+0x5f0>
    bed2:	lea    r14,[rax*8+0x8]
    beda:	nop    WORD PTR [rax+rax*1+0x0]
    bee0:	mov    edx,DWORD PTR [rsp+0x8]
    bee4:	lea    rsi,[rip+0x3171e]        # 3d609 <_IO_stdin_used+0x609>
    beeb:	xor    eax,eax
    beed:	xor    r15d,r15d
    bef0:	mov    edi,0x1
    bef5:	call   3710 <__printf_chk@plt>
    befa:	test   r13d,r13d
    befd:	js     bf34 <DisplayPlan7Matrix+0x214>
    beff:	nop
    bf00:	mov    rax,QWORD PTR [rbx+0x10]
    bf04:	pxor   xmm0,xmm0
    bf08:	mov    rsi,r12
    bf0b:	mov    edi,0x1
    bf10:	mov    rax,QWORD PTR [rax+r15*1]
    bf14:	add    r15,0x8
    bf18:	cvtsi2sd xmm0,DWORD PTR [rax+rbp*1]
    bf1d:	mov    eax,0x1
    bf22:	divsd  xmm0,QWORD PTR [rip+0x317ae]        # 3d6d8 <_IO_stdin_used+0x6d8>
    bf2a:	call   3710 <__printf_chk@plt>
    bf2f:	cmp    r14,r15
    bf32:	jne    bf00 <DisplayPlan7Matrix+0x1e0>
    bf34:	mov    rdx,QWORD PTR [rsp+0x10]
    bf39:	add    DWORD PTR [rsp+0x8],0x1
    bf3e:	add    rbp,0x4
    bf42:	mov    eax,DWORD PTR [rsp+0x8]
    bf46:	cmp    DWORD PTR [rdx+0x88],eax
    bf4c:	jg     bee0 <DisplayPlan7Matrix+0x1c0>
    bf4e:	xor    eax,eax
    bf50:	lea    rsi,[rip+0x316ab]        # 3d602 <_IO_stdin_used+0x602>
    bf57:	mov    edi,0x1
    bf5c:	call   3710 <__printf_chk@plt>
    bf61:	test   r13d,r13d
    bf64:	js     c1d0 <DisplayPlan7Matrix+0x4b0>
    bf6a:	movsd  xmm6,QWORD PTR [rip+0x31766]        # 3d6d8 <_IO_stdin_used+0x6d8>
    bf72:	movsxd rax,r13d
    bf75:	xor    ebp,ebp
    bf77:	lea    r14,[rip+0x31672]        # 3d5f0 <_IO_stdin_used+0x5f0>
    bf7e:	lea    r12,[rax*8+0x8]
    bf86:	movsd  QWORD PTR [rsp+0x8],xmm6
    bf8c:	nop    DWORD PTR [rax+0x0]
    bf90:	mov    rax,QWORD PTR [rbx]
    bf93:	pxor   xmm0,xmm0
    bf97:	mov    rsi,r14
    bf9a:	mov    edi,0x1
    bf9f:	mov    rax,QWORD PTR [rax+rbp*1]
    bfa3:	add    rbp,0x8
    bfa7:	cvtsi2sd xmm0,DWORD PTR [rax+0x4]
    bfac:	mov    eax,0x1
    bfb1:	divsd  xmm0,QWORD PTR [rsp+0x8]
    bfb7:	call   3710 <__printf_chk@plt>
    bfbc:	cmp    r12,rbp
    bfbf:	jne    bf90 <DisplayPlan7Matrix+0x270>
    bfc1:	lea    rsi,[rip+0x3165f]        # 3d627 <_IO_stdin_used+0x627>
    bfc8:	mov    edi,0x1
    bfcd:	xor    eax,eax
    bfcf:	xor    ebp,ebp
    bfd1:	call   3710 <__printf_chk@plt>
    bfd6:	lea    r14,[rip+0x31613]        # 3d5f0 <_IO_stdin_used+0x5f0>
    bfdd:	nop    DWORD PTR [rax]
    bfe0:	mov    rax,QWORD PTR [rbx]
    bfe3:	pxor   xmm0,xmm0
    bfe7:	mov    rsi,r14
    bfea:	mov    edi,0x1
    bfef:	mov    rax,QWORD PTR [rax+rbp*1]
    bff3:	add    rbp,0x8
    bff7:	cvtsi2sd xmm0,DWORD PTR [rax+0x8]
    bffc:	mov    eax,0x1
    c001:	divsd  xmm0,QWORD PTR [rsp+0x8]
    c007:	call   3710 <__printf_chk@plt>
    c00c:	cmp    r12,rbp
    c00f:	jne    bfe0 <DisplayPlan7Matrix+0x2c0>
    c011:	lea    rsi,[rip+0x31608]        # 3d620 <_IO_stdin_used+0x620>
    c018:	mov    edi,0x1
    c01d:	xor    eax,eax
    c01f:	xor    ebp,ebp
    c021:	call   3710 <__printf_chk@plt>
    c026:	lea    r14,[rip+0x315c3]        # 3d5f0 <_IO_stdin_used+0x5f0>
    c02d:	nop    DWORD PTR [rax]
    c030:	mov    rax,QWORD PTR [rbx]
    c033:	pxor   xmm0,xmm0
    c037:	mov    rsi,r14
    c03a:	mov    edi,0x1
    c03f:	mov    rax,QWORD PTR [rax+rbp*1]
    c043:	add    rbp,0x8
    c047:	cvtsi2sd xmm0,DWORD PTR [rax+0xc]
    c04c:	mov    eax,0x1
    c051:	divsd  xmm0,QWORD PTR [rsp+0x8]
    c057:	call   3710 <__printf_chk@plt>
    c05c:	cmp    r12,rbp
    c05f:	jne    c030 <DisplayPlan7Matrix+0x310>
    c061:	lea    rsi,[rip+0x315b1]        # 3d619 <_IO_stdin_used+0x619>
    c068:	mov    edi,0x1
    c06d:	xor    eax,eax
    c06f:	xor    ebp,ebp
    c071:	call   3710 <__printf_chk@plt>
    c076:	lea    r14,[rip+0x31573]        # 3d5f0 <_IO_stdin_used+0x5f0>
    c07d:	nop    DWORD PTR [rax]
    c080:	mov    rax,QWORD PTR [rbx]
    c083:	pxor   xmm0,xmm0
    c087:	mov    rsi,r14
    c08a:	mov    edi,0x1
    c08f:	mov    rax,QWORD PTR [rax+rbp*1]
    c093:	add    rbp,0x8
    c097:	cvtsi2sd xmm0,DWORD PTR [rax]
    c09b:	mov    eax,0x1
    c0a0:	divsd  xmm0,QWORD PTR [rsp+0x8]
    c0a6:	call   3710 <__printf_chk@plt>
    c0ab:	cmp    r12,rbp
    c0ae:	jne    c080 <DisplayPlan7Matrix+0x360>
    c0b0:	mov    rax,QWORD PTR [rsp+0x10]
    c0b5:	cmp    DWORD PTR [rax+0x88],0x2
    c0bc:	jle    c15e <DisplayPlan7Matrix+0x43e>
    c0c2:	mov    DWORD PTR [rsp+0x8],0x2
    c0ca:	mov    eax,r13d
    c0cd:	mov    ebp,0x8
    c0d2:	lea    r12,[rip+0x31517]        # 3d5f0 <_IO_stdin_used+0x5f0>
    c0d9:	lea    r14,[rax*8+0x8]
    c0e1:	nop    DWORD PTR [rax+0x0]
    c0e8:	mov    edx,DWORD PTR [rsp+0x8]
    c0ec:	lea    rsi,[rip+0x3151e]        # 3d611 <_IO_stdin_used+0x611>
    c0f3:	xor    eax,eax
    c0f5:	xor    r15d,r15d
    c0f8:	mov    edi,0x1
    c0fd:	call   3710 <__printf_chk@plt>
    c102:	test   r13d,r13d
    c105:	js     c144 <DisplayPlan7Matrix+0x424>
    c107:	nop    WORD PTR [rax+rax*1+0x0]
    c110:	mov    rax,QWORD PTR [rbx+0x18]
    c114:	pxor   xmm0,xmm0
    c118:	mov    rsi,r12
    c11b:	mov    edi,0x1
    c120:	mov    rax,QWORD PTR [rax+r15*1]
    c124:	add    r15,0x8
    c128:	cvtsi2sd xmm0,DWORD PTR [rax+rbp*1]
    c12d:	mov    eax,0x1
    c132:	divsd  xmm0,QWORD PTR [rip+0x3159e]        # 3d6d8 <_IO_stdin_used+0x6d8>
    c13a:	call   3710 <__printf_chk@plt>
    c13f:	cmp    r15,r14
    c142:	jne    c110 <DisplayPlan7Matrix+0x3f0>
    c144:	mov    rdx,QWORD PTR [rsp+0x10]
    c149:	add    DWORD PTR [rsp+0x8],0x1
    c14e:	add    rbp,0x4
    c152:	mov    eax,DWORD PTR [rsp+0x8]
    c156:	cmp    DWORD PTR [rdx+0x88],eax
    c15c:	jg     c0e8 <DisplayPlan7Matrix+0x3c8>
    c15e:	add    rsp,0x28
    c162:	lea    rdi,[rip+0x35b65]        # 41cce <CSWTCH.18+0x60e>
    c169:	pop    rbx
    c16a:	pop    rbp
    c16b:	pop    r12
    c16d:	pop    r13
    c16f:	pop    r14
    c171:	pop    r15
    c173:	jmp    34f0 <puts@plt>
    c178:	xor    eax,eax
    c17a:	lea    rsi,[rip+0x31468]        # 3d5e9 <_IO_stdin_used+0x5e9>
    c181:	mov    edi,0x1
    c186:	call   3710 <__printf_chk@plt>
    c18b:	test   r13d,r13d
    c18e:	jne    be01 <DisplayPlan7Matrix+0xe1>
    c194:	mov    rax,QWORD PTR [rbx]
    c197:	pxor   xmm0,xmm0
    c19b:	movsd  xmm6,QWORD PTR [rip+0x31535]        # 3d6d8 <_IO_stdin_used+0x6d8>
    c1a3:	lea    rsi,[rip+0x31446]        # 3d5f0 <_IO_stdin_used+0x5f0>
    c1aa:	mov    edi,0x1
    c1af:	mov    rax,QWORD PTR [rax]
    c1b2:	cvtsi2sd xmm0,DWORD PTR [rax+0x10]
    c1b7:	mov    eax,0x1
    c1bc:	divsd  xmm0,xmm6
    c1c0:	call   3710 <__printf_chk@plt>
    c1c5:	jmp    be01 <DisplayPlan7Matrix+0xe1>
    c1ca:	nop    WORD PTR [rax+rax*1+0x0]
    c1d0:	lea    rsi,[rip+0x31450]        # 3d627 <_IO_stdin_used+0x627>
    c1d7:	mov    edi,0x1
    c1dc:	xor    eax,eax
    c1de:	call   3710 <__printf_chk@plt>
    c1e3:	lea    rsi,[rip+0x31436]        # 3d620 <_IO_stdin_used+0x620>
    c1ea:	mov    edi,0x1
    c1ef:	xor    eax,eax
    c1f1:	call   3710 <__printf_chk@plt>
    c1f6:	lea    rsi,[rip+0x3141c]        # 3d619 <_IO_stdin_used+0x619>
    c1fd:	mov    edi,0x1
    c202:	xor    eax,eax
    c204:	call   3710 <__printf_chk@plt>
    c209:	jmp    c0b0 <DisplayPlan7Matrix+0x390>
    c20e:	xchg   ax,ax

000000000000c210 <PrintIscore>:
    c210:	endbr64 
    c214:	pxor   xmm0,xmm0
    c218:	lea    rsi,[rip+0x313d1]        # 3d5f0 <_IO_stdin_used+0x5f0>
    c21f:	mov    eax,0x1
    c224:	cvtsi2sd xmm0,edi
    c228:	mov    edi,0x1
    c22d:	divsd  xmm0,QWORD PTR [rip+0x314a3]        # 3d6d8 <_IO_stdin_used+0x6d8>
    c235:	jmp    3710 <__printf_chk@plt>
    c23a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000c240 <PrintTransition>:
    c240:	endbr64 
    c244:	push   r15
    c246:	push   r14
    c248:	push   r13
    c24a:	push   r12
    c24c:	push   rbp
    c24d:	push   rbx
    c24e:	sub    rsp,0x78
    c252:	mov    rax,QWORD PTR [rsp+0xb8]
    c25a:	mov    DWORD PTR [rsp+0x8],edi
    c25e:	mov    DWORD PTR [rsp+0x14],esi
    c262:	mov    r13,QWORD PTR [rsp+0xc8]
    c26a:	mov    QWORD PTR [rsp+0x40],rax
    c26f:	mov    rax,QWORD PTR [rsp+0xc0]
    c277:	mov    DWORD PTR [rsp+0x10],edx
    c27b:	mov    QWORD PTR [rsp+0x38],rax
    c280:	mov    rax,QWORD PTR [rsp+0xd0]
    c288:	mov    DWORD PTR [rsp+0x48],ecx
    c28c:	mov    QWORD PTR [rsp+0x28],rax
    c291:	mov    eax,DWORD PTR [rsp+0xd8]
    c298:	mov    DWORD PTR [rsp+0x24],r8d
    c29d:	mov    DWORD PTR [rsp+0x20],r9d
    c2a2:	mov    BYTE PTR [rsp+0xf],cl
    c2a6:	mov    rbx,QWORD PTR fs:0x28
    c2af:	mov    QWORD PTR [rsp+0x68],rbx
    c2b4:	xor    ebx,ebx
    c2b6:	test   eax,eax
    c2b8:	jle    c4a9 <PrintTransition+0x269>
    c2be:	sub    eax,0x1
    c2c1:	mov    edx,edi
    c2c3:	xor    r14d,r14d
    c2c6:	mov    QWORD PTR [rsp+0x18],0x0
    c2cf:	mov    DWORD PTR [rsp+0x4c],eax
    c2d3:	mov    QWORD PTR [rsp+0x30],rax
    c2d8:	nop    DWORD PTR [rax+rax*1+0x0]
    c2e0:	mov    rax,QWORD PTR [rsp+0x28]
    c2e5:	mov    rbx,QWORD PTR [rsp+0x18]
    c2ea:	mov    DWORD PTR [rax+rbx*4],0x0
    c2f1:	mov    rax,QWORD PTR [rsp+0x38]
    c2f6:	movsxd rax,DWORD PTR [rax+rbx*4]
    c2fa:	cmp    eax,DWORD PTR [r13+0x0]
    c2fe:	jg     c438 <PrintTransition+0x1f8>
    c304:	mov    rdi,QWORD PTR [rsp+0x40]
    c309:	xor    r8d,r8d
    c30c:	mov    r11,QWORD PTR [rdi+rbx*8]
    c310:	mov    rbp,QWORD PTR [r11+0x18]
    c314:	mov    rbx,QWORD PTR [r11+0x8]
    c318:	jmp    c36f <PrintTransition+0x12f>
    c31a:	nop    WORD PTR [rax+rax*1+0x0]
    c320:	cmp    dil,BYTE PTR [rsp+0xf]
    c325:	je     c3b0 <PrintTransition+0x170>
    c32b:	mov    esi,DWORD PTR [r11]
    c32e:	lea    r15d,[rax+0x1]
    c332:	lea    r9,[rax+0x1]
    c336:	lea    ecx,[rsi-0x1]
    c339:	cmp    ecx,eax
    c33b:	jle    c362 <PrintTransition+0x122>
    c33d:	mov    r10,r9
    c340:	cmp    dil,0x6
    c344:	je     c460 <PrintTransition+0x220>
    c34a:	mov    eax,DWORD PTR [rbp+r10*4+0x0]
    c34f:	lea    rcx,[r10*4+0x0]
    c357:	test   eax,eax
    c359:	cmove  eax,r8d
    c35d:	cmp    dil,dl
    c360:	je     c3d8 <PrintTransition+0x198>
    c362:	mov    rax,r9
    c365:	cmp    DWORD PTR [r13+0x0],r9d
    c369:	jl     c438 <PrintTransition+0x1f8>
    c36f:	mov    ecx,DWORD PTR [rbp+rax*4+0x0]
    c373:	movzx  edi,BYTE PTR [rbx+rax*1]
    c377:	lea    r12,[rax*4+0x0]
    c37f:	test   ecx,ecx
    c381:	cmovne r8d,ecx
    c385:	cmp    dil,dl
    c388:	jne    c320 <PrintTransition+0xe0>
    c38a:	mov    rcx,QWORD PTR [r11+0x10]
    c38e:	mov    esi,DWORD PTR [rsp+0x10]
    c392:	cmp    DWORD PTR [rcx+rax*4],esi
    c395:	jne    c320 <PrintTransition+0xe0>
    c397:	cmp    r8d,DWORD PTR [rsp+0x14]
    c39c:	mov    esi,0x1
    c3a1:	cmove  r14d,esi
    c3a5:	cmp    dil,BYTE PTR [rsp+0xf]
    c3aa:	jne    c32b <PrintTransition+0xeb>
    c3b0:	mov    rcx,QWORD PTR [r11+0x10]
    c3b4:	mov    esi,DWORD PTR [rsp+0x20]
    c3b8:	cmp    DWORD PTR [rcx+r12*1],esi
    c3bc:	jne    c32b <PrintTransition+0xeb>
    c3c2:	cmp    r8d,DWORD PTR [rsp+0x24]
    c3c7:	mov    esi,0x1
    c3cc:	cmove  r14d,esi
    c3d0:	jmp    c32b <PrintTransition+0xeb>
    c3d5:	nop    DWORD PTR [rax]
    c3d8:	mov    rsi,QWORD PTR [r11+0x10]
    c3dc:	mov    edi,DWORD PTR [rsp+0x10]
    c3e0:	cmp    DWORD PTR [rsi+r12*1],edi
    c3e4:	jne    c362 <PrintTransition+0x122>
    c3ea:	cmp    r8d,DWORD PTR [rsp+0x14]
    c3ef:	jne    c362 <PrintTransition+0x122>
    c3f5:	movzx  edi,BYTE PTR [rsp+0xf]
    c3fa:	cmp    BYTE PTR [rbx+r10*1],dil
    c3fe:	jne    c362 <PrintTransition+0x122>
    c404:	mov    edi,DWORD PTR [rsp+0x20]
    c408:	cmp    DWORD PTR [rsi+rcx*1],edi
    c40b:	jne    c362 <PrintTransition+0x122>
    c411:	cmp    eax,DWORD PTR [rsp+0x24]
    c415:	jne    c362 <PrintTransition+0x122>
    c41b:	mov    rax,QWORD PTR [rsp+0x28]
    c420:	mov    rdi,QWORD PTR [rsp+0x18]
    c425:	mov    DWORD PTR [rax+rdi*4],0x1
    c42c:	jmp    c362 <PrintTransition+0x122>
    c431:	nop    DWORD PTR [rax+0x0]
    c438:	mov    rbx,QWORD PTR [rsp+0x18]
    c43d:	add    r13,0x4
    c441:	lea    rax,[rbx+0x1]
    c445:	cmp    rbx,QWORD PTR [rsp+0x30]
    c44a:	je     c4d0 <PrintTransition+0x290>
    c450:	mov    QWORD PTR [rsp+0x18],rax
    c455:	jmp    c2e0 <PrintTransition+0xa0>
    c45a:	nop    WORD PTR [rax+rax*1+0x0]
    c460:	cmp    BYTE PTR [rbx+rax*1+0x1],0x2
    c465:	jne    c34a <PrintTransition+0x10a>
    c46b:	cmp    ecx,r15d
    c46e:	jle    c34a <PrintTransition+0x10a>
    c474:	lea    eax,[rax+0x2]
    c477:	cdqe   
    c479:	nop    DWORD PTR [rax+0x0]
    c480:	cmp    BYTE PTR [rbx+rax*1],0x2
    c484:	mov    r10,rax
    c487:	sete   r15b
    c48b:	cmp    ecx,eax
    c48d:	setg   sil
    c491:	add    rax,0x1
    c495:	test   r15b,sil
    c498:	jne    c480 <PrintTransition+0x240>
    c49a:	jmp    c34a <PrintTransition+0x10a>
    c49f:	mov    edi,0xa
    c4a4:	call   3470 <putchar@plt>
    c4a9:	mov    rax,QWORD PTR [rsp+0x68]
    c4ae:	xor    rax,QWORD PTR fs:0x28
    c4b7:	jne    c781 <PrintTransition+0x541>
    c4bd:	add    rsp,0x78
    c4c1:	pop    rbx
    c4c2:	pop    rbp
    c4c3:	pop    r12
    c4c5:	pop    r13
    c4c7:	pop    r14
    c4c9:	pop    r15
    c4cb:	ret    
    c4cc:	nop    DWORD PTR [rax+0x0]
    c4d0:	test   r14d,r14d
    c4d3:	je     c4a9 <PrintTransition+0x269>
    c4d5:	cmp    BYTE PTR [rsp+0x8],0xa
    c4da:	ja     c520 <PrintTransition+0x2e0>
    c4dc:	lea    rcx,[rip+0x3117d]        # 3d660 <_IO_stdin_used+0x660>
    c4e3:	movzx  edx,dl
    c4e6:	movsxd rax,DWORD PTR [rcx+rdx*4]
    c4ea:	add    rax,rcx
    c4ed:	notrack jmp rax
    c4f0:	mov    ebx,0x4a
    c4f5:	lea    r12,[rsp+0x5c]
    c4fa:	mov    WORD PTR [rsp+0x5c],bx
    c4ff:	cmp    BYTE PTR [rsp+0x48],0xa
    c504:	ja     c769 <PrintTransition+0x529>
    c50a:	movzx  eax,BYTE PTR [rsp+0xf]
    c50f:	lea    rdx,[rip+0x31176]        # 3d68c <_IO_stdin_used+0x68c>
    c516:	movsxd rax,DWORD PTR [rdx+rax*4]
    c51a:	add    rax,rdx
    c51d:	notrack jmp rax
    c520:	lea    rdi,[rip+0x31113]        # 3d63a <_IO_stdin_used+0x63a>
    c527:	xor    eax,eax
    c529:	lea    r12,[rsp+0x5c]
    c52e:	call   317f0 <Die>
    c533:	jmp    c4ff <PrintTransition+0x2bf>
    c535:	mov    r8d,DWORD PTR [rsp+0x10]
    c53a:	lea    r12,[rsp+0x5c]
    c53f:	lea    rcx,[rip+0x310e8]        # 3d62e <_IO_stdin_used+0x62e>
    c546:	mov    edx,0x6
    c54b:	mov    esi,0x1
    c550:	mov    rdi,r12
    c553:	xor    eax,eax
    c555:	call   3830 <__sprintf_chk@plt>
    c55a:	jmp    c4ff <PrintTransition+0x2bf>
    c55c:	mov    r8d,DWORD PTR [rsp+0x10]
    c561:	lea    r12,[rsp+0x5c]
    c566:	lea    rcx,[rip+0x310c5]        # 3d632 <_IO_stdin_used+0x632>
    c56d:	jmp    c546 <PrintTransition+0x306>
    c56f:	mov    r8d,DWORD PTR [rsp+0x10]
    c574:	lea    r12,[rsp+0x5c]
    c579:	lea    rcx,[rip+0x310b6]        # 3d636 <_IO_stdin_used+0x636>
    c580:	jmp    c546 <PrintTransition+0x306>
    c582:	mov    r15d,0x53
    c588:	lea    r12,[rsp+0x5c]
    c58d:	mov    WORD PTR [rsp+0x5c],r15w
    c593:	jmp    c4ff <PrintTransition+0x2bf>
    c598:	mov    r14d,0x4e
    c59e:	lea    r12,[rsp+0x5c]
    c5a3:	mov    WORD PTR [rsp+0x5c],r14w
    c5a9:	jmp    c4ff <PrintTransition+0x2bf>
    c5ae:	mov    r13d,0x42
    c5b4:	lea    r12,[rsp+0x5c]
    c5b9:	mov    WORD PTR [rsp+0x5c],r13w
    c5bf:	jmp    c4ff <PrintTransition+0x2bf>
    c5c4:	mov    r12d,0x45
    c5ca:	mov    WORD PTR [rsp+0x5c],r12w
    c5d0:	lea    r12,[rsp+0x5c]
    c5d5:	jmp    c4ff <PrintTransition+0x2bf>
    c5da:	mov    ebp,0x43
    c5df:	lea    r12,[rsp+0x5c]
    c5e4:	mov    WORD PTR [rsp+0x5c],bp
    c5e9:	jmp    c4ff <PrintTransition+0x2bf>
    c5ee:	mov    r11d,0x54
    c5f4:	lea    r12,[rsp+0x5c]
    c5f9:	mov    WORD PTR [rsp+0x5c],r11w
    c5ff:	jmp    c4ff <PrintTransition+0x2bf>
    c604:	mov    ecx,0x4a
    c609:	lea    rbx,[rsp+0x62]
    c60e:	mov    WORD PTR [rsp+0x62],cx
    c613:	mov    edi,DWORD PTR [rsp+0xb0]
    c61a:	movss  xmm0,DWORD PTR [rip+0x30d7a]        # 3d39c <_IO_stdin_used+0x39c>
    c622:	call   177c0 <Score2Prob>
    c627:	mov    r8d,DWORD PTR [rsp+0x24]
    c62c:	mov    r9,rbx
    c62f:	mov    rcx,r12
    c632:	mov    edx,DWORD PTR [rsp+0x14]
    c636:	mov    edi,0x1
    c63b:	mov    eax,0x1
    c640:	xor    ebx,ebx
    c642:	lea    rsi,[rip+0x31000]        # 3d649 <_IO_stdin_used+0x649>
    c649:	cvtss2sd xmm0,xmm0
    c64d:	call   3710 <__printf_chk@plt>
    c652:	mov    rbp,QWORD PTR [rsp+0x30]
    c657:	mov    r12,QWORD PTR [rsp+0x28]
    c65c:	mov    r13d,DWORD PTR [rsp+0x4c]
    c661:	jmp    c687 <PrintTransition+0x447>
    c663:	nop    DWORD PTR [rax+rax*1+0x0]
    c668:	cmp    r13d,ebx
    c66b:	jle    c677 <PrintTransition+0x437>
    c66d:	mov    edi,0x9
    c672:	call   3470 <putchar@plt>
    c677:	lea    rax,[rbx+0x1]
    c67b:	cmp    rbx,rbp
    c67e:	je     c49f <PrintTransition+0x25f>
    c684:	mov    rbx,rax
    c687:	mov    eax,DWORD PTR [r12+rbx*4]
    c68b:	test   eax,eax
    c68d:	je     c668 <PrintTransition+0x428>
    c68f:	mov    edi,0x2a
    c694:	call   3470 <putchar@plt>
    c699:	jmp    c668 <PrintTransition+0x428>
    c69b:	mov    edx,0x54
    c6a0:	lea    rbx,[rsp+0x62]
    c6a5:	mov    WORD PTR [rsp+0x62],dx
    c6aa:	jmp    c613 <PrintTransition+0x3d3>
    c6af:	mov    esi,0x43
    c6b4:	lea    rbx,[rsp+0x62]
    c6b9:	mov    WORD PTR [rsp+0x62],si
    c6be:	jmp    c613 <PrintTransition+0x3d3>
    c6c3:	mov    edi,0x45
    c6c8:	lea    rbx,[rsp+0x62]
    c6cd:	mov    WORD PTR [rsp+0x62],di
    c6d2:	jmp    c613 <PrintTransition+0x3d3>
    c6d7:	mov    r8d,0x42
    c6dd:	lea    rbx,[rsp+0x62]
    c6e2:	mov    WORD PTR [rsp+0x62],r8w
    c6e8:	jmp    c613 <PrintTransition+0x3d3>
    c6ed:	mov    r9d,0x4e
    c6f3:	lea    rbx,[rsp+0x62]
    c6f8:	mov    WORD PTR [rsp+0x62],r9w
    c6fe:	jmp    c613 <PrintTransition+0x3d3>
    c703:	mov    r10d,0x53
    c709:	lea    rbx,[rsp+0x62]
    c70e:	mov    WORD PTR [rsp+0x62],r10w
    c714:	jmp    c613 <PrintTransition+0x3d3>
    c719:	mov    r8d,DWORD PTR [rsp+0x20]
    c71e:	lea    rbx,[rsp+0x62]
    c723:	lea    rcx,[rip+0x30f0c]        # 3d636 <_IO_stdin_used+0x636>
    c72a:	mov    edx,0x6
    c72f:	mov    esi,0x1
    c734:	mov    rdi,rbx
    c737:	xor    eax,eax
    c739:	call   3830 <__sprintf_chk@plt>
    c73e:	jmp    c613 <PrintTransition+0x3d3>
    c743:	mov    r8d,DWORD PTR [rsp+0x20]
    c748:	lea    rbx,[rsp+0x62]
    c74d:	lea    rcx,[rip+0x30ede]        # 3d632 <_IO_stdin_used+0x632>
    c754:	jmp    c72a <PrintTransition+0x4ea>
    c756:	mov    r8d,DWORD PTR [rsp+0x20]
    c75b:	lea    rbx,[rsp+0x62]
    c760:	lea    rcx,[rip+0x30ec7]        # 3d62e <_IO_stdin_used+0x62e>
    c767:	jmp    c72a <PrintTransition+0x4ea>
    c769:	lea    rdi,[rip+0x30eca]        # 3d63a <_IO_stdin_used+0x63a>
    c770:	xor    eax,eax
    c772:	lea    rbx,[rsp+0x62]
    c777:	call   317f0 <Die>
    c77c:	jmp    c613 <PrintTransition+0x3d3>
    c781:	call   3570 <__stack_chk_fail@plt>
    c786:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000c790 <DisplayPlan7PostAlign>:
    c790:	endbr64 
    c794:	push   r15
    c796:	mov    r15,rsi
    c799:	push   r14
    c79b:	push   r13
    c79d:	mov    r13,rdx
    c7a0:	movsxd rdx,edi
    c7a3:	push   r12
    c7a5:	push   rbp
    c7a6:	movsxd rbp,r9d
    c7a9:	push   rbx
    c7aa:	mov    ebx,edi
    c7ac:	sub    rsp,0x88
    c7b3:	mov    rax,QWORD PTR [r13+0x0]
    c7b7:	mov    DWORD PTR [rsp+0x50],edi
    c7bb:	mov    rdi,rbp
    c7be:	mov    rdx,QWORD PTR [rax+rdx*8]
    c7c2:	mov    eax,DWORD PTR [rsi+0x160]
    c7c8:	mov    esi,0x4
    c7cd:	mov    QWORD PTR [rsp+0x40],rcx
    c7d2:	mov    QWORD PTR [rsp+0x28],r8
    c7d7:	add    eax,DWORD PTR [rdx+0x8]
    c7da:	mov    DWORD PTR [rsp+0x3c],r9d
    c7df:	mov    DWORD PTR [rsp+0x38],eax
    c7e3:	call   3630 <calloc@plt>
    c7e8:	mov    esi,0x4
    c7ed:	mov    rdi,rbp
    c7f0:	mov    QWORD PTR [rsp+0x18],rax
    c7f5:	call   3630 <calloc@plt>
    c7fa:	mov    esi,0x4
    c7ff:	mov    rdi,rbp
    c802:	mov    QWORD PTR [rsp+0x20],rax
    c807:	call   3630 <calloc@plt>
    c80c:	mov    QWORD PTR [rsp+0x30],rax
    c811:	test   ebx,ebx
    c813:	js     ce2b <DisplayPlan7PostAlign+0x69b>
    c819:	mov    eax,DWORD PTR [rsp+0x50]
    c81d:	mov    rbx,QWORD PTR [rsp+0x18]
    c822:	mov    r14,r15
    c825:	mov    DWORD PTR [rsp+0x70],0xffffffff
    c82d:	mov    QWORD PTR [rsp+0x48],0x0
    c836:	add    eax,0x1
    c839:	mov    DWORD PTR [rsp+0x54],0x0
    c841:	mov    DWORD PTR [rsp+0x74],eax
    c845:	mov    eax,DWORD PTR [rsp+0x3c]
    c849:	sub    eax,0x1
    c84c:	lea    rax,[rbx+rax*4+0x4]
    c851:	mov    QWORD PTR [rsp+0x78],rax
    c856:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c860:	mov    r10d,DWORD PTR [rsp+0x54]
    c865:	mov    eax,DWORD PTR [rsp+0x3c]
    c869:	mov    r15d,r10d
    c86c:	add    r10d,0x1
    c870:	mov    DWORD PTR [rsp+0x54],r10d
    c875:	test   eax,eax
    c877:	jle    c90a <DisplayPlan7PostAlign+0x17a>
    c87d:	mov    r8,QWORD PTR [rsp+0x28]
    c882:	mov    rdi,QWORD PTR [rsp+0x20]
    c887:	mov    rsi,QWORD PTR [rsp+0x18]
    c88c:	mov    r11d,DWORD PTR [rsp+0x70]
    c891:	mov    rbx,QWORD PTR [rsp+0x78]
    c896:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c8a0:	mov    r9,QWORD PTR [r8]
    c8a3:	movsxd rax,DWORD PTR [rsi]
    c8a6:	mov    rcx,QWORD PTR [r9+0x18]
    c8aa:	cmp    DWORD PTR [rcx+rax*4],r11d
    c8ae:	jl     c8c7 <DisplayPlan7PostAlign+0x137>
    c8b0:	jmp    c8d1 <DisplayPlan7PostAlign+0x141>
    c8b2:	nop    WORD PTR [rax+rax*1+0x0]
    c8b8:	lea    edx,[rax+0x1]
    c8bb:	add    rax,0x1
    c8bf:	mov    DWORD PTR [rsi],edx
    c8c1:	cmp    DWORD PTR [rcx+rax*4],r11d
    c8c5:	jge    c8d1 <DisplayPlan7PostAlign+0x141>
    c8c7:	mov    edx,DWORD PTR [r9]
    c8ca:	sub    edx,0x1
    c8cd:	cmp    edx,eax
    c8cf:	jg     c8b8 <DisplayPlan7PostAlign+0x128>
    c8d1:	movsxd rax,DWORD PTR [rdi]
    c8d4:	cmp    DWORD PTR [rcx+rax*4],r10d
    c8d8:	jle    c8ef <DisplayPlan7PostAlign+0x15f>
    c8da:	jmp    c8f9 <DisplayPlan7PostAlign+0x169>
    c8dc:	nop    DWORD PTR [rax+0x0]
    c8e0:	lea    edx,[rax+0x1]
    c8e3:	add    rax,0x1
    c8e7:	mov    DWORD PTR [rdi],edx
    c8e9:	cmp    DWORD PTR [rcx+rax*4],r10d
    c8ed:	jg     c8f9 <DisplayPlan7PostAlign+0x169>
    c8ef:	mov    edx,DWORD PTR [r9]
    c8f2:	sub    edx,0x1
    c8f5:	cmp    edx,eax
    c8f7:	jg     c8e0 <DisplayPlan7PostAlign+0x150>
    c8f9:	add    rsi,0x4
    c8fd:	add    r8,0x8
    c901:	add    rdi,0x4
    c905:	cmp    rbx,rsi
    c908:	jne    c8a0 <DisplayPlan7PostAlign+0x110>
    c90a:	mov    rax,QWORD PTR [rsp+0x48]
    c90f:	mov    r12d,0x1
    c915:	mov    r11,r13
    c918:	shl    rax,0x3
    c91c:	mov    QWORD PTR [rsp+0x8],rax
    c921:	add    rax,0x8
    c925:	mov    QWORD PTR [rsp+0x58],rax
    c92a:	mov    rax,r14
    c92d:	mov    r14d,r15d
    c930:	mov    r15,rax
    c933:	cmp    r12b,0x1
    c937:	je     cf3e <DisplayPlan7PostAlign+0x7ae>
    c93d:	nop    DWORD PTR [rax]
    c940:	cmp    r12b,0x6
    c944:	je     cf3e <DisplayPlan7PostAlign+0x7ae>
    c94a:	cmp    r12b,0x2
    c94e:	je     d330 <DisplayPlan7PostAlign+0xba0>
    c954:	mov    DWORD PTR [rsp+0x10],0x0
    c95c:	xor    ebp,ebp
    c95e:	cmp    r12b,0x3
    c962:	je     d360 <DisplayPlan7PostAlign+0xbd0>
    c968:	movsxd rbx,ebp
    c96b:	mov    r13,r15
    c96e:	mov    r15,r11
    c971:	shl    rbx,0x2
    c975:	jmp    caad <DisplayPlan7PostAlign+0x31d>
    c97a:	nop    WORD PTR [rax+rax*1+0x0]
    c980:	cmp    r12b,0x2
    c984:	jne    cb54 <DisplayPlan7PostAlign+0x3c4>
    c98a:	mov    rax,QWORD PTR [r15+0x18]
    c98e:	mov    rsi,QWORD PTR [rsp+0x8]
    c993:	mov    r9,QWORD PTR [r13+0x138]
    c99a:	mov    r10d,DWORD PTR [rsp+0x48]
    c99f:	mov    rax,QWORD PTR [rax+rsi*1]
    c9a3:	mov    ecx,DWORD PTR [rax+rbx*1]
    c9a6:	lea    rax,[rbx+0x4]
    c9aa:	cmp    DWORD PTR [rsp+0x50],r10d
    c9af:	jle    ca3d <DisplayPlan7PostAlign+0x2ad>
    c9b5:	mov    QWORD PTR [rsp+0x68],rax
    c9ba:	mov    eax,DWORD PTR [rsp+0x3c]
    c9be:	mov    esi,r14d
    c9c1:	push   rax
    c9c2:	push   QWORD PTR [rsp+0x38]
    c9c6:	push   QWORD PTR [rsp+0x30]
    c9ca:	push   QWORD PTR [rsp+0x30]
    c9ce:	push   QWORD PTR [rsp+0x48]
    c9d2:	mov    rax,QWORD PTR [rsp+0x68]
    c9d7:	mov    r8,QWORD PTR [r9+0x28]
    c9db:	mov    r9d,ebp
    c9de:	mov    rdi,QWORD PTR [rax+0x8]
    c9e2:	mov    rax,QWORD PTR [rsp+0x80]
    c9ea:	add    ecx,DWORD PTR [r8+rbx*1]
    c9ee:	mov    rdi,QWORD PTR [rdi+rax*1]
    c9f2:	add    ecx,DWORD PTR [rdi+rbx*1+0x4]
    c9f6:	sub    ecx,DWORD PTR [rsp+0x60]
    c9fa:	mov    edi,0x2
    c9ff:	push   rcx
    ca00:	mov    r8d,DWORD PTR [rsp+0x84]
    ca08:	mov    ecx,0x1
    ca0d:	mov    DWORD PTR [rsp+0x90],edx
    ca14:	call   c240 <PrintTransition>
    ca19:	mov    rsi,QWORD PTR [rsp+0x38]
    ca1e:	mov    rcx,QWORD PTR [r15+0x18]
    ca22:	add    rsp,0x30
    ca26:	mov    r9,QWORD PTR [r13+0x138]
    ca2d:	mov    rax,QWORD PTR [rsp+0x68]
    ca32:	mov    rcx,QWORD PTR [rcx+rsi*1]
    ca36:	mov    edx,DWORD PTR [rsp+0x60]
    ca3a:	mov    ecx,DWORD PTR [rcx+rbx*1]
    ca3d:	mov    esi,DWORD PTR [rsp+0x3c]
    ca41:	push   rsi
    ca42:	push   QWORD PTR [rsp+0x38]
    ca46:	push   QWORD PTR [rsp+0x30]
    ca4a:	push   QWORD PTR [rsp+0x30]
    ca4e:	push   QWORD PTR [rsp+0x48]
    ca52:	mov    rsi,QWORD PTR [rsp+0x68]
    ca57:	mov    rdi,QWORD PTR [rsi+0x18]
    ca5b:	mov    rsi,QWORD PTR [rsp+0x30]
    ca60:	mov    QWORD PTR [rsp+0x88],rax
    ca68:	mov    r8,QWORD PTR [rdi+rsi*1]
    ca6c:	mov    rdi,QWORD PTR [r9+0x30]
    ca70:	mov    esi,r14d
    ca73:	mov    r9d,ebp
    ca76:	add    ecx,DWORD PTR [rdi+rbx*1]
    ca79:	add    ecx,DWORD PTR [r8+rax*1]
    ca7d:	mov    edi,0x2
    ca82:	mov    r8d,r14d
    ca85:	sub    ecx,DWORD PTR [rsp+0x60]
    ca89:	push   rcx
    ca8a:	mov    ecx,0x2
    ca8f:	call   c240 <PrintTransition>
    ca94:	mov    rax,QWORD PTR [rsp+0x90]
    ca9c:	add    rsp,0x30
    caa0:	mov    rbx,rax
    caa3:	cmp    DWORD PTR [rsp+0x10],ebp
    caa7:	jl     cb65 <DisplayPlan7PostAlign+0x3d5>
    caad:	mov    edx,ebp
    caaf:	add    ebp,0x1
    cab2:	cmp    r12b,0x3
    cab6:	je     cc30 <DisplayPlan7PostAlign+0x4a0>
    cabc:	jg     cb90 <DisplayPlan7PostAlign+0x400>
    cac2:	cmp    r12b,0x1
    cac6:	jne    c980 <DisplayPlan7PostAlign+0x1f0>
    cacc:	mov    rax,QWORD PTR [r15+0x8]
    cad0:	mov    rsi,QWORD PTR [rsp+0x8]
    cad5:	mov    ecx,DWORD PTR [r13+0x88]
    cadc:	mov    edi,DWORD PTR [rsp+0x48]
    cae0:	mov    rax,QWORD PTR [rax+rsi*1]
    cae4:	cmp    DWORD PTR [rsp+0x50],edi
    cae8:	jle    caf2 <DisplayPlan7PostAlign+0x362>
    caea:	cmp    edx,ecx
    caec:	jl     d190 <DisplayPlan7PostAlign+0xa00>
    caf2:	mov    eax,DWORD PTR [rax+rbx*1]
    caf5:	sub    ecx,0x1
    caf8:	cmp    ecx,edx
    cafa:	jg     d2ac <DisplayPlan7PostAlign+0xb1c>
    cb00:	mov    esi,DWORD PTR [rsp+0x3c]
    cb04:	xor    r9d,r9d
    cb07:	mov    r8d,r14d
    cb0a:	mov    edi,0x1
    cb0f:	push   rsi
    cb10:	push   QWORD PTR [rsp+0x38]
    cb14:	push   QWORD PTR [rsp+0x30]
    cb18:	push   QWORD PTR [rsp+0x30]
    cb1c:	push   QWORD PTR [rsp+0x48]
    cb20:	mov    rsi,QWORD PTR [rsp+0x68]
    cb25:	mov    rcx,QWORD PTR [r13+0x178]
    cb2c:	add    eax,DWORD PTR [rcx+rbx*1]
    cb2f:	mov    rcx,QWORD PTR [rsi]
    cb32:	mov    rsi,QWORD PTR [rsp+0x30]
    cb37:	mov    rcx,QWORD PTR [rcx+rsi*1]
    cb3b:	mov    esi,r14d
    cb3e:	add    eax,DWORD PTR [rcx+0x4]
    cb41:	sub    eax,DWORD PTR [rsp+0x60]
    cb45:	mov    ecx,0x7
    cb4a:	push   rax
    cb4b:	call   c240 <PrintTransition>
    cb50:	add    rsp,0x30
    cb54:	lea    rax,[rbx+0x4]
    cb58:	mov    rbx,rax
    cb5b:	cmp    DWORD PTR [rsp+0x10],ebp
    cb5f:	jge    caad <DisplayPlan7PostAlign+0x31d>
    cb65:	lea    edx,[r12-0x4]
    cb6a:	mov    r11,r15
    cb6d:	mov    r15,r13
    cb70:	cmp    dl,0x6
    cb73:	ja     cf68 <DisplayPlan7PostAlign+0x7d8>
    cb79:	lea    rax,[rip+0x30b38]        # 3d6b8 <_IO_stdin_used+0x6b8>
    cb80:	movzx  edx,dl
    cb83:	movsxd rdx,DWORD PTR [rax+rdx*4]
    cb87:	add    rdx,rax
    cb8a:	notrack jmp rdx
    cb8d:	nop    DWORD PTR [rax]
    cb90:	lea    rax,[rbx+0x4]
    cb94:	cmp    r12b,0x6
    cb98:	jne    caa0 <DisplayPlan7PostAlign+0x310>
    cb9e:	mov    esi,DWORD PTR [rsp+0x48]
    cba2:	cmp    DWORD PTR [rsp+0x50],esi
    cba6:	jle    caa0 <DisplayPlan7PostAlign+0x310>
    cbac:	mov    QWORD PTR [rsp+0x60],rax
    cbb1:	mov    eax,DWORD PTR [rsp+0x3c]
    cbb5:	mov    r9d,edx
    cbb8:	mov    esi,r14d
    cbbb:	xor    edx,edx
    cbbd:	push   rax
    cbbe:	push   QWORD PTR [rsp+0x38]
    cbc2:	push   QWORD PTR [rsp+0x30]
    cbc6:	push   QWORD PTR [rsp+0x30]
    cbca:	push   QWORD PTR [rsp+0x48]
    cbce:	mov    rax,QWORD PTR [rsp+0x30]
    cbd3:	mov    rcx,QWORD PTR [r15]
    cbd6:	mov    rdi,QWORD PTR [rcx+rax*1]
    cbda:	mov    rax,QWORD PTR [rsp+0x68]
    cbdf:	mov    rcx,QWORD PTR [r13+0x170]
    cbe6:	mov    ecx,DWORD PTR [rcx+rbx*1]
    cbe9:	add    ecx,DWORD PTR [rdi]
    cbeb:	mov    rdi,QWORD PTR [rax+0x8]
    cbef:	mov    rax,QWORD PTR [rsp+0x80]
    cbf7:	mov    rdi,QWORD PTR [rdi+rax*1]
    cbfb:	add    ecx,DWORD PTR [rdi+rbx*1]
    cbfe:	sub    ecx,DWORD PTR [rsp+0x60]
    cc02:	mov    edi,0x6
    cc07:	push   rcx
    cc08:	mov    r8d,DWORD PTR [rsp+0x84]
    cc10:	mov    ecx,0x1
    cc15:	call   c240 <PrintTransition>
    cc1a:	add    rsp,0x30
    cc1e:	mov    rax,QWORD PTR [rsp+0x60]
    cc23:	jmp    caa0 <DisplayPlan7PostAlign+0x310>
    cc28:	nop    DWORD PTR [rax+rax*1+0x0]
    cc30:	mov    esi,DWORD PTR [rsp+0x48]
    cc34:	lea    rax,[rbx+0x4]
    cc38:	cmp    DWORD PTR [rsp+0x50],esi
    cc3c:	jle    caa0 <DisplayPlan7PostAlign+0x310>
    cc42:	mov    QWORD PTR [rsp+0x68],rax
    cc47:	mov    eax,DWORD PTR [rsp+0x3c]
    cc4b:	mov    r9d,ebp
    cc4e:	push   rax
    cc4f:	push   QWORD PTR [rsp+0x38]
    cc53:	push   QWORD PTR [rsp+0x30]
    cc57:	push   QWORD PTR [rsp+0x30]
    cc5b:	push   QWORD PTR [rsp+0x48]
    cc5f:	mov    rdi,QWORD PTR [rsp+0x30]
    cc64:	mov    rcx,QWORD PTR [r15+0x10]
    cc68:	mov    rsi,QWORD PTR [rsp+0x68]
    cc6d:	mov    r10,QWORD PTR [rsp+0x80]
    cc75:	mov    rdi,QWORD PTR [rcx+rdi*1]
    cc79:	mov    rcx,QWORD PTR [r13+0x138]
    cc80:	mov    rcx,QWORD PTR [rcx+0x18]
    cc84:	mov    ecx,DWORD PTR [rcx+rbx*1]
    cc87:	add    ecx,DWORD PTR [rdi+rbx*1]
    cc8a:	mov    rdi,QWORD PTR [rsi+0x8]
    cc8e:	mov    esi,r14d
    cc91:	mov    rdi,QWORD PTR [rdi+r10*1]
    cc95:	add    ecx,DWORD PTR [rdi+rbx*1+0x4]
    cc99:	sub    ecx,DWORD PTR [rsp+0x60]
    cc9d:	mov    edi,0x3
    cca2:	push   rcx
    cca3:	mov    r8d,DWORD PTR [rsp+0x84]
    ccab:	mov    ecx,0x1
    ccb0:	mov    DWORD PTR [rsp+0x90],edx
    ccb7:	call   c240 <PrintTransition>
    ccbc:	mov    eax,DWORD PTR [rsp+0x6c]
    ccc0:	add    rsp,0x30
    ccc4:	push   rax
    ccc5:	push   QWORD PTR [rsp+0x38]
    ccc9:	push   QWORD PTR [rsp+0x30]
    cccd:	push   QWORD PTR [rsp+0x30]
    ccd1:	push   QWORD PTR [rsp+0x48]
    ccd5:	mov    rdi,QWORD PTR [rsp+0x30]
    ccda:	mov    rcx,QWORD PTR [r15+0x10]
    ccde:	mov    rsi,QWORD PTR [rsp+0x68]
    cce3:	mov    r10,QWORD PTR [rsp+0x80]
    cceb:	mov    rdi,QWORD PTR [rcx+rdi*1]
    ccef:	mov    rcx,QWORD PTR [r13+0x138]
    ccf6:	mov    rcx,QWORD PTR [rcx+0x20]
    ccfa:	mov    ecx,DWORD PTR [rcx+rbx*1]
    ccfd:	add    ecx,DWORD PTR [rdi+rbx*1]
    cd00:	mov    rdi,QWORD PTR [rsi+0x10]
    cd04:	mov    esi,r14d
    cd07:	mov    rdi,QWORD PTR [rdi+r10*1]
    cd0b:	add    ecx,DWORD PTR [rdi+rbx*1]
    cd0e:	sub    ecx,DWORD PTR [rsp+0x60]
    cd12:	mov    edi,0x3
    cd17:	push   rcx
    cd18:	mov    edx,DWORD PTR [rsp+0x90]
    cd1f:	mov    ecx,0x3
    cd24:	mov    r8d,DWORD PTR [rsp+0x84]
    cd2c:	mov    r9d,edx
    cd2f:	call   c240 <PrintTransition>
    cd34:	add    rsp,0x30
    cd38:	mov    rax,QWORD PTR [rsp+0x68]
    cd3d:	jmp    caa0 <DisplayPlan7PostAlign+0x310>
    cd42:	nop    WORD PTR [rax+rax*1+0x0]
    cd48:	mov    ebp,DWORD PTR [rsp+0x3c]
    cd4c:	mov    rax,r15
    cd4f:	mov    r15d,r14d
    cd52:	xor    r9d,r9d
    cd55:	mov    r14,rax
    cd58:	mov    esi,r15d
    cd5b:	mov    r8d,r15d
    cd5e:	mov    ecx,0x6
    cd63:	push   rbp
    cd64:	mov    edi,0xa
    cd69:	mov    r13,r11
    cd6c:	push   QWORD PTR [rsp+0x38]
    cd70:	push   QWORD PTR [rsp+0x30]
    cd74:	push   QWORD PTR [rsp+0x30]
    cd78:	push   QWORD PTR [rsp+0x48]
    cd7c:	mov    rbx,QWORD PTR [rsp+0x30]
    cd81:	mov    rax,QWORD PTR [r11]
    cd84:	mov    r12,QWORD PTR [rsp+0x68]
    cd89:	mov    rdx,QWORD PTR [rax+rbx*1]
    cd8d:	mov    eax,DWORD PTR [r14+0x168]
    cd94:	add    eax,DWORD PTR [rdx+0xc]
    cd97:	mov    rdx,QWORD PTR [r12]
    cd9b:	mov    rdx,QWORD PTR [rdx+rbx*1]
    cd9f:	add    eax,DWORD PTR [rdx]
    cda1:	sub    eax,DWORD PTR [rsp+0x60]
    cda5:	xor    edx,edx
    cda7:	push   rax
    cda8:	call   c240 <PrintTransition>
    cdad:	add    rsp,0x30
    cdb1:	mov    esi,DWORD PTR [rsp+0x48]
    cdb5:	cmp    DWORD PTR [rsp+0x50],esi
    cdb9:	jle    ce12 <DisplayPlan7PostAlign+0x682>
    cdbb:	push   rbp
    cdbc:	xor    r9d,r9d
    cdbf:	mov    ecx,0xa
    cdc4:	mov    esi,r15d
    cdc7:	push   QWORD PTR [rsp+0x38]
    cdcb:	mov    edi,0xa
    cdd0:	push   QWORD PTR [rsp+0x30]
    cdd4:	push   QWORD PTR [rsp+0x30]
    cdd8:	push   QWORD PTR [rsp+0x48]
    cddc:	mov    rax,QWORD PTR [r13+0x0]
    cde0:	mov    rdx,QWORD PTR [rax+rbx*1]
    cde4:	mov    eax,DWORD PTR [r14+0x16c]
    cdeb:	add    eax,DWORD PTR [rdx+0xc]
    cdee:	mov    rdx,QWORD PTR [r12]
    cdf2:	mov    rdx,QWORD PTR [rdx+rbx*1+0x8]
    cdf7:	add    eax,DWORD PTR [rdx+0xc]
    cdfa:	sub    eax,DWORD PTR [rsp+0x60]
    cdfe:	xor    edx,edx
    ce00:	push   rax
    ce01:	mov    r8d,DWORD PTR [rsp+0x84]
    ce09:	call   c240 <PrintTransition>
    ce0e:	add    rsp,0x30
    ce12:	add    QWORD PTR [rsp+0x48],0x1
    ce18:	mov    ebx,DWORD PTR [rsp+0x54]
    ce1c:	add    DWORD PTR [rsp+0x70],0x1
    ce21:	cmp    DWORD PTR [rsp+0x74],ebx
    ce25:	jne    c860 <DisplayPlan7PostAlign+0xd0>
    ce2b:	mov    rdi,QWORD PTR [rsp+0x18]
    ce30:	call   3460 <free@plt>
    ce35:	mov    rdi,QWORD PTR [rsp+0x20]
    ce3a:	call   3460 <free@plt>
    ce3f:	mov    rdi,QWORD PTR [rsp+0x30]
    ce44:	add    rsp,0x88
    ce4b:	pop    rbx
    ce4c:	pop    rbp
    ce4d:	pop    r12
    ce4f:	pop    r13
    ce51:	pop    r14
    ce53:	pop    r15
    ce55:	jmp    3460 <free@plt>
    ce5a:	nop    WORD PTR [rax+rax*1+0x0]
    ce60:	mov    ebx,DWORD PTR [rsp+0x3c]
    ce64:	xor    r9d,r9d
    ce67:	mov    edi,0x8
    ce6c:	mov    r8d,r14d
    ce6f:	mov    esi,r14d
    ce72:	push   rbx
    ce73:	push   QWORD PTR [rsp+0x38]
    ce77:	push   QWORD PTR [rsp+0x30]
    ce7b:	push   QWORD PTR [rsp+0x30]
    ce7f:	push   QWORD PTR [rsp+0x48]
    ce83:	mov    rbp,QWORD PTR [rsp+0x30]
    ce88:	mov    rdx,QWORD PTR [r11]
    ce8b:	mov    r13d,DWORD PTR [rsp+0x60]
    ce90:	mov    QWORD PTR [rsp+0x38],r11
    ce95:	mov    rcx,QWORD PTR [rdx+rbp*1]
    ce99:	mov    edx,DWORD PTR [r15+0x160]
    cea0:	add    edx,DWORD PTR [rcx+0x8]
    cea3:	mov    ecx,0x9
    cea8:	sub    edx,r13d
    ceab:	push   rdx
    ceac:	xor    edx,edx
    ceae:	call   c240 <PrintTransition>
    ceb3:	add    rsp,0x30
    ceb7:	mov    edi,DWORD PTR [rsp+0x48]
    cebb:	mov    r11,QWORD PTR [rsp+0x10]
    cec0:	cmp    DWORD PTR [rsp+0x50],edi
    cec4:	jle    cf30 <DisplayPlan7PostAlign+0x7a0>
    cec6:	push   rbx
    cec7:	xor    r9d,r9d
    ceca:	mov    esi,r14d
    cecd:	mov    edi,0x8
    ced2:	push   QWORD PTR [rsp+0x38]
    ced6:	push   QWORD PTR [rsp+0x30]
    ceda:	push   QWORD PTR [rsp+0x30]
    cede:	push   QWORD PTR [rsp+0x48]
    cee2:	mov    rdx,QWORD PTR [r11]
    cee5:	mov    rax,QWORD PTR [rsp+0x68]
    ceea:	mov    rcx,QWORD PTR [rdx+rbp*1]
    ceee:	mov    edx,DWORD PTR [r15+0x164]
    cef5:	mov    QWORD PTR [rsp+0x38],r11
    cefa:	add    edx,DWORD PTR [rcx+0x8]
    cefd:	mov    rcx,QWORD PTR [rax]
    cf00:	mov    rax,QWORD PTR [rsp+0x80]
    cf08:	mov    rcx,QWORD PTR [rcx+rax*1]
    cf0c:	add    edx,DWORD PTR [rcx+0x8]
    cf0f:	mov    ecx,0x8
    cf14:	sub    edx,r13d
    cf17:	push   rdx
    cf18:	mov    r8d,DWORD PTR [rsp+0x84]
    cf20:	xor    edx,edx
    cf22:	call   c240 <PrintTransition>
    cf27:	mov    r11,QWORD PTR [rsp+0x40]
    cf2c:	add    rsp,0x30
    cf30:	add    r12d,0x1
    cf34:	cmp    r12b,0x1
    cf38:	jne    c940 <DisplayPlan7PostAlign+0x1b0>
    cf3e:	mov    eax,DWORD PTR [r15+0x88]
    cf45:	mov    ebp,0x1
    cf4a:	mov    DWORD PTR [rsp+0x10],eax
    cf4e:	test   eax,eax
    cf50:	jg     c968 <DisplayPlan7PostAlign+0x1d8>
    cf56:	lea    edx,[r12-0x4]
    cf5b:	cmp    dl,0x6
    cf5e:	jbe    cb79 <DisplayPlan7PostAlign+0x3e9>
    cf64:	nop    DWORD PTR [rax+0x0]
    cf68:	cmp    r12b,0xa
    cf6c:	jne    cf30 <DisplayPlan7PostAlign+0x7a0>
    cf6e:	mov    r14,r15
    cf71:	mov    r13,r11
    cf74:	jmp    ce12 <DisplayPlan7PostAlign+0x682>
    cf79:	nop    DWORD PTR [rax+0x0]
    cf80:	mov    ebp,DWORD PTR [rsp+0x3c]
    cf84:	xor    r9d,r9d
    cf87:	mov    r8d,r14d
    cf8a:	mov    esi,r14d
    cf8d:	mov    edi,0x7
    cf92:	push   rbp
    cf93:	push   QWORD PTR [rsp+0x38]
    cf97:	push   QWORD PTR [rsp+0x30]
    cf9b:	push   QWORD PTR [rsp+0x30]
    cf9f:	push   QWORD PTR [rsp+0x48]
    cfa3:	mov    rbx,QWORD PTR [rsp+0x30]
    cfa8:	mov    rdx,QWORD PTR [r11]
    cfab:	mov    r13,QWORD PTR [rsp+0x68]
    cfb0:	mov    QWORD PTR [rsp+0x38],r11
    cfb5:	mov    rcx,QWORD PTR [rdx+rbx*1]
    cfb9:	mov    edx,DWORD PTR [r15+0x158]
    cfc0:	add    edx,DWORD PTR [rcx+0x4]
    cfc3:	mov    rcx,QWORD PTR [r13+0x0]
    cfc7:	mov    rcx,QWORD PTR [rcx+rbx*1]
    cfcb:	add    edx,DWORD PTR [rcx+0x8]
    cfce:	sub    edx,DWORD PTR [rsp+0x60]
    cfd2:	mov    ecx,0x8
    cfd7:	push   rdx
    cfd8:	xor    edx,edx
    cfda:	call   c240 <PrintTransition>
    cfdf:	add    rsp,0x30
    cfe3:	xor    r9d,r9d
    cfe6:	mov    r8d,r14d
    cfe9:	push   rbp
    cfea:	mov    esi,r14d
    cfed:	mov    edi,0x7
    cff2:	push   QWORD PTR [rsp+0x38]
    cff6:	push   QWORD PTR [rsp+0x30]
    cffa:	push   QWORD PTR [rsp+0x30]
    cffe:	push   QWORD PTR [rsp+0x48]
    d002:	mov    r11,QWORD PTR [rsp+0x38]
    d007:	mov    rdx,QWORD PTR [r11]
    d00a:	mov    rcx,QWORD PTR [rdx+rbx*1]
    d00e:	mov    edx,DWORD PTR [r15+0x15c]
    d015:	add    edx,DWORD PTR [rcx+0x4]
    d018:	mov    rcx,QWORD PTR [r13+0x0]
    d01c:	mov    rcx,QWORD PTR [rcx+rbx*1]
    d020:	add    edx,DWORD PTR [rcx+0xc]
    d023:	sub    edx,DWORD PTR [rsp+0x60]
    d027:	mov    ecx,0xa
    d02c:	push   rdx
    d02d:	xor    edx,edx
    d02f:	call   c240 <PrintTransition>
    d034:	add    rsp,0x30
    d038:	mov    r11,QWORD PTR [rsp+0x10]
    d03d:	jmp    cf30 <DisplayPlan7PostAlign+0x7a0>
    d042:	nop    WORD PTR [rax+rax*1+0x0]
    d048:	mov    ebp,DWORD PTR [rsp+0x3c]
    d04c:	xor    r9d,r9d
    d04f:	mov    esi,r14d
    d052:	mov    r8d,r14d
    d055:	mov    edi,0x5
    d05a:	push   rbp
    d05b:	push   QWORD PTR [rsp+0x38]
    d05f:	push   QWORD PTR [rsp+0x30]
    d063:	push   QWORD PTR [rsp+0x30]
    d067:	push   QWORD PTR [rsp+0x48]
    d06b:	mov    rbx,QWORD PTR [rsp+0x30]
    d070:	mov    rdx,QWORD PTR [r11]
    d073:	mov    r13,QWORD PTR [rsp+0x68]
    d078:	mov    QWORD PTR [rsp+0x38],r11
    d07d:	mov    rcx,QWORD PTR [rdx+rbx*1]
    d081:	mov    edx,DWORD PTR [r15+0x150]
    d088:	add    edx,DWORD PTR [rcx+0x10]
    d08b:	mov    rcx,QWORD PTR [r13+0x0]
    d08f:	mov    rcx,QWORD PTR [rcx+rbx*1]
    d093:	add    edx,DWORD PTR [rcx]
    d095:	sub    edx,DWORD PTR [rsp+0x60]
    d099:	mov    ecx,0x6
    d09e:	push   rdx
    d09f:	xor    edx,edx
    d0a1:	call   c240 <PrintTransition>
    d0a6:	add    rsp,0x30
    d0aa:	mov    esi,DWORD PTR [rsp+0x48]
    d0ae:	mov    r11,QWORD PTR [rsp+0x10]
    d0b3:	cmp    DWORD PTR [rsp+0x50],esi
    d0b7:	jle    cf30 <DisplayPlan7PostAlign+0x7a0>
    d0bd:	push   rbp
    d0be:	xor    r9d,r9d
    d0c1:	mov    esi,r14d
    d0c4:	mov    edi,0x5
    d0c9:	push   QWORD PTR [rsp+0x38]
    d0cd:	push   QWORD PTR [rsp+0x30]
    d0d1:	push   QWORD PTR [rsp+0x30]
    d0d5:	push   QWORD PTR [rsp+0x48]
    d0d9:	mov    rdx,QWORD PTR [r11]
    d0dc:	mov    rcx,QWORD PTR [rdx+rbx*1]
    d0e0:	mov    edx,DWORD PTR [r15+0x154]
    d0e7:	mov    QWORD PTR [rsp+0x38],r11
    d0ec:	mov    rbx,QWORD PTR [rsp+0x80]
    d0f4:	add    edx,DWORD PTR [rcx+0x10]
    d0f7:	mov    rcx,QWORD PTR [r13+0x0]
    d0fb:	mov    rcx,QWORD PTR [rcx+rbx*1]
    d0ff:	add    edx,DWORD PTR [rcx+0x10]
    d102:	sub    edx,DWORD PTR [rsp+0x60]
    d106:	mov    ecx,0x5
    d10b:	push   rdx
    d10c:	mov    r8d,DWORD PTR [rsp+0x84]
    d114:	xor    edx,edx
    d116:	call   c240 <PrintTransition>
    d11b:	add    rsp,0x30
    d11f:	mov    r11,QWORD PTR [rsp+0x10]
    d124:	jmp    cf30 <DisplayPlan7PostAlign+0x7a0>
    d129:	nop    DWORD PTR [rax+0x0]
    d130:	cmp    QWORD PTR [rsp+0x48],0x0
    d136:	jne    cf30 <DisplayPlan7PostAlign+0x7a0>
    d13c:	mov    eax,DWORD PTR [rsp+0x3c]
    d140:	mov    QWORD PTR [rsp+0x10],r11
    d145:	xor    r9d,r9d
    d148:	xor    r8d,r8d
    d14b:	mov    ecx,0x5
    d150:	xor    esi,esi
    d152:	mov    edi,0x4
    d157:	push   rax
    d158:	push   QWORD PTR [rsp+0x38]
    d15c:	push   QWORD PTR [rsp+0x30]
    d160:	push   QWORD PTR [rsp+0x30]
    d164:	push   QWORD PTR [rsp+0x48]
    d168:	mov    rax,QWORD PTR [rsp+0x68]
    d16d:	mov    rdx,QWORD PTR [rax]
    d170:	mov    rdx,QWORD PTR [rdx]
    d173:	mov    edx,DWORD PTR [rdx+0x10]
    d176:	sub    edx,DWORD PTR [rsp+0x60]
    d17a:	push   rdx
    d17b:	xor    edx,edx
    d17d:	call   c240 <PrintTransition>
    d182:	add    rsp,0x30
    d186:	mov    r11,QWORD PTR [rsp+0x10]
    d18b:	jmp    cf30 <DisplayPlan7PostAlign+0x7a0>
    d190:	mov    edi,DWORD PTR [rsp+0x3c]
    d194:	mov    r9d,ebp
    d197:	push   rdi
    d198:	mov    edi,0x1
    d19d:	push   QWORD PTR [rsp+0x38]
    d1a1:	push   QWORD PTR [rsp+0x30]
    d1a5:	push   QWORD PTR [rsp+0x30]
    d1a9:	push   QWORD PTR [rsp+0x48]
    d1ad:	mov    rcx,QWORD PTR [r13+0x138]
    d1b4:	mov    rsi,QWORD PTR [rsp+0x68]
    d1b9:	mov    r10,QWORD PTR [rsp+0x80]
    d1c1:	mov    rcx,QWORD PTR [rcx]
    d1c4:	mov    eax,DWORD PTR [rax+rbx*1]
    d1c7:	add    eax,DWORD PTR [rcx+rbx*1]
    d1ca:	mov    rcx,QWORD PTR [rsi+0x8]
    d1ce:	mov    esi,r14d
    d1d1:	mov    rcx,QWORD PTR [rcx+r10*1]
    d1d5:	add    eax,DWORD PTR [rcx+rbx*1+0x4]
    d1d9:	sub    eax,DWORD PTR [rsp+0x60]
    d1dd:	mov    ecx,0x1
    d1e2:	push   rax
    d1e3:	mov    r8d,DWORD PTR [rsp+0x84]
    d1eb:	mov    DWORD PTR [rsp+0x90],edx
    d1f2:	call   c240 <PrintTransition>
    d1f7:	mov    rdx,QWORD PTR [rsp+0x38]
    d1fc:	mov    rax,QWORD PTR [r15+0x8]
    d200:	add    rsp,0x30
    d204:	mov    ecx,DWORD PTR [r13+0x88]
    d20b:	mov    rax,QWORD PTR [rax+rdx*1]
    d20f:	mov    edx,DWORD PTR [rsp+0x60]
    d213:	mov    eax,DWORD PTR [rax+rbx*1]
    d216:	cmp    edx,ecx
    d218:	jge    caf5 <DisplayPlan7PostAlign+0x365>
    d21e:	mov    edi,DWORD PTR [rsp+0x3c]
    d222:	mov    r9d,edx
    d225:	push   rdi
    d226:	mov    edi,0x1
    d22b:	push   QWORD PTR [rsp+0x38]
    d22f:	push   QWORD PTR [rsp+0x30]
    d233:	push   QWORD PTR [rsp+0x30]
    d237:	push   QWORD PTR [rsp+0x48]
    d23b:	mov    rcx,QWORD PTR [r13+0x138]
    d242:	mov    rsi,QWORD PTR [rsp+0x68]
    d247:	mov    r10,QWORD PTR [rsp+0x80]
    d24f:	mov    rcx,QWORD PTR [rcx+0x8]
    d253:	add    eax,DWORD PTR [rcx+rbx*1]
    d256:	mov    rcx,QWORD PTR [rsi+0x10]
    d25a:	mov    esi,r14d
    d25d:	mov    rcx,QWORD PTR [rcx+r10*1]
    d261:	add    eax,DWORD PTR [rcx+rbx*1]
    d264:	sub    eax,DWORD PTR [rsp+0x60]
    d268:	mov    ecx,0x3
    d26d:	push   rax
    d26e:	mov    r8d,DWORD PTR [rsp+0x84]
    d276:	mov    DWORD PTR [rsp+0x90],edx
    d27d:	call   c240 <PrintTransition>
    d282:	mov    rdx,QWORD PTR [rsp+0x38]
    d287:	mov    rax,QWORD PTR [r15+0x8]
    d28b:	add    rsp,0x30
    d28f:	mov    ecx,DWORD PTR [r13+0x88]
    d296:	mov    rax,QWORD PTR [rax+rdx*1]
    d29a:	mov    edx,DWORD PTR [rsp+0x60]
    d29e:	sub    ecx,0x1
    d2a1:	mov    eax,DWORD PTR [rax+rbx*1]
    d2a4:	cmp    ecx,edx
    d2a6:	jle    cb00 <DisplayPlan7PostAlign+0x370>
    d2ac:	mov    edi,DWORD PTR [rsp+0x3c]
    d2b0:	mov    r9d,ebp
    d2b3:	mov    r8d,r14d
    d2b6:	push   rdi
    d2b7:	push   QWORD PTR [rsp+0x38]
    d2bb:	push   QWORD PTR [rsp+0x30]
    d2bf:	push   QWORD PTR [rsp+0x30]
    d2c3:	push   QWORD PTR [rsp+0x48]
    d2c7:	mov    rsi,QWORD PTR [rsp+0x68]
    d2cc:	mov    rdi,QWORD PTR [rsp+0x30]
    d2d1:	mov    rcx,QWORD PTR [rsi+0x18]
    d2d5:	mov    esi,r14d
    d2d8:	mov    rcx,QWORD PTR [rcx+rdi*1]
    d2dc:	mov    rdi,QWORD PTR [r13+0x138]
    d2e3:	mov    rdi,QWORD PTR [rdi+0x10]
    d2e7:	add    eax,DWORD PTR [rdi+rbx*1]
    d2ea:	add    eax,DWORD PTR [rcx+rbx*1+0x4]
    d2ee:	mov    edi,0x1
    d2f3:	mov    ecx,0x2
    d2f8:	sub    eax,DWORD PTR [rsp+0x60]
    d2fc:	push   rax
    d2fd:	mov    DWORD PTR [rsp+0x90],edx
    d304:	call   c240 <PrintTransition>
    d309:	mov    rdi,QWORD PTR [rsp+0x38]
    d30e:	mov    rax,QWORD PTR [r15+0x8]
    d312:	add    rsp,0x30
    d316:	mov    edx,DWORD PTR [rsp+0x60]
    d31a:	mov    rax,QWORD PTR [rax+rdi*1]
    d31e:	mov    eax,DWORD PTR [rax+rbx*1]
    d321:	jmp    cb00 <DisplayPlan7PostAlign+0x370>
    d326:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d330:	mov    eax,DWORD PTR [r15+0x88]
    d337:	mov    ebp,0x2
    d33c:	sub    eax,0x1
    d33f:	mov    DWORD PTR [rsp+0x10],eax
    d343:	cmp    ebp,DWORD PTR [rsp+0x10]
    d347:	jle    c968 <DisplayPlan7PostAlign+0x1d8>
    d34d:	cmp    r12b,0xa
    d351:	jne    cf30 <DisplayPlan7PostAlign+0x7a0>
    d357:	jmp    cf6e <DisplayPlan7PostAlign+0x7de>
    d35c:	nop    DWORD PTR [rax+0x0]
    d360:	mov    eax,DWORD PTR [r15+0x88]
    d367:	mov    ebp,0x1
    d36c:	sub    eax,0x1
    d36f:	mov    DWORD PTR [rsp+0x10],eax
    d373:	jmp    d343 <DisplayPlan7PostAlign+0xbb3>
    d375:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000d380 <DisplayPlan7Posteriors>:
    d380:	endbr64 
    d384:	sub    rsp,0x28
    d388:	mov    rax,QWORD PTR fs:0x28
    d391:	mov    QWORD PTR [rsp+0x18],rax
    d396:	xor    eax,eax
    d398:	mov    QWORD PTR [rsp],r8
    d39c:	mov    r8,rsp
    d39f:	mov    QWORD PTR [rsp+0x8],r9
    d3a4:	mov    r9d,0x2
    d3aa:	call   c790 <DisplayPlan7PostAlign>
    d3af:	mov    rax,QWORD PTR [rsp+0x18]
    d3b4:	xor    rax,QWORD PTR fs:0x28
    d3bd:	jne    d3c4 <DisplayPlan7Posteriors+0x44>
    d3bf:	add    rsp,0x28
    d3c3:	ret    
    d3c4:	call   3570 <__stack_chk_fail@plt>
    d3c9:	nop    DWORD PTR [rax+0x0]

000000000000d3d0 <EmitSequence>:
    d3d0:	endbr64 
    d3d4:	push   r15
    d3d6:	push   r14
    d3d8:	mov    r14,rdi
    d3db:	mov    edi,0x40
    d3e0:	push   r13
    d3e2:	mov    r13d,0x1
    d3e8:	push   r12
    d3ea:	xor    r12d,r12d
    d3ed:	push   rbp
    d3ee:	mov    ebp,0x2
    d3f3:	push   rbx
    d3f4:	mov    r15d,ebp
    d3f7:	sub    rsp,0x88
    d3fe:	mov    QWORD PTR [rsp+0x38],rcx
    d403:	mov    QWORD PTR [rsp+0x28],rsi
    d408:	lea    rsi,[rsp+0x58]
    d40d:	mov    QWORD PTR [rsp+0x30],rdx
    d412:	mov    rax,QWORD PTR fs:0x28
    d41b:	mov    QWORD PTR [rsp+0x78],rax
    d420:	xor    eax,eax
    d422:	call   209f0 <P7AllocTrace>
    d427:	mov    edx,0x40
    d42c:	mov    esi,0x3b
    d431:	lea    rdi,[rip+0x302a8]        # 3d6e0 <_IO_stdin_used+0x6e0>
    d438:	call   36810 <sre_malloc>
    d43d:	mov    rdi,QWORD PTR [rsp+0x58]
    d442:	xor    r8d,r8d
    d445:	xor    ecx,ecx
    d447:	mov    edx,0x4
    d44c:	xor    esi,esi
    d44e:	mov    rbx,rax
    d451:	mov    QWORD PTR [rsp+0x8],rax
    d456:	call   20b30 <TraceSet>
    d45b:	mov    rdi,QWORD PTR [rsp+0x58]
    d460:	xor    r8d,r8d
    d463:	xor    ecx,ecx
    d465:	mov    edx,0x5
    d46a:	mov    esi,0x1
    d46f:	call   20b30 <TraceSet>
    d474:	mov    eax,DWORD PTR [rip+0x54e22]        # 6229c <Alphabet_iupac>
    d47a:	mov    DWORD PTR [rsp+0x48],0x40
    d482:	mov    r10d,0x5
    d488:	mov    DWORD PTR [rsp+0x1c],0x40
    d490:	mov    ebp,r10d
    d493:	mov    BYTE PTR [rbx],al
    d495:	mov    DWORD PTR [rsp+0x18],0x1
    d49d:	nop    DWORD PTR [rax]
    d4a0:	mov    rax,QWORD PTR [rsp+0x8]
    d4a5:	mov    QWORD PTR [rsp+0x10],r13
    d4aa:	lea    ebx,[r15+0x1]
    d4ae:	add    rax,r13
    d4b1:	mov    QWORD PTR [rsp],rax
    d4b5:	cmp    bpl,0xa
    d4b9:	ja     d4d0 <EmitSequence+0x100>
    d4bb:	lea    rcx,[rip+0x30242]        # 3d704 <_IO_stdin_used+0x704>
    d4c2:	movzx  eax,bpl
    d4c6:	movsxd rax,DWORD PTR [rcx+rax*4]
    d4ca:	add    rax,rcx
    d4cd:	notrack jmp rax
    d4d0:	xor    eax,eax
    d4d2:	lea    rdi,[rip+0x3021c]        # 3d6f5 <_IO_stdin_used+0x6f5>
    d4d9:	call   317f0 <Die>
    d4de:	cmp    bpl,0x1
    d4e2:	je     d78e <EmitSequence+0x3be>
    d4e8:	cmp    bpl,0x3
    d4ec:	je     dbf8 <EmitSequence+0x828>
    d4f2:	cmp    bpl,0x5
    d4f6:	jne    dd90 <EmitSequence+0x9c0>
    d4fc:	mov    rdi,QWORD PTR [rsp+0x58]
    d501:	movsxd rax,r15d
    d504:	mov    rdx,QWORD PTR [rdi+0x8]
    d508:	movzx  ebp,BYTE PTR [rdx+rax*1-0x1]
    d50d:	cmp    bpl,0x5
    d511:	je     da40 <EmitSequence+0x670>
    d517:	xor    r8d,r8d
    d51a:	mov    ecx,r12d
    d51d:	mov    edx,0x5
    d522:	mov    esi,r15d
    d525:	call   20b30 <TraceSet>
    d52a:	mov    ebp,0x5
    d52f:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d533:	jne    d590 <EmitSequence+0x1c0>
    d535:	add    DWORD PTR [rsp+0x1c],0x40
    d53a:	mov    eax,DWORD PTR [rsp+0x1c]
    d53e:	mov    r15d,ebx
    d541:	mov    rdi,QWORD PTR [rsp+0x58]
    d546:	mov    esi,eax
    d548:	call   20a70 <P7ReallocTrace>
    d54d:	jmp    d4a0 <EmitSequence+0xd0>
    d552:	nop    WORD PTR [rax+rax*1+0x0]
    d558:	cmp    DWORD PTR [r14+0x88],r12d
    d55f:	jg     dbb0 <EmitSequence+0x7e0>
    d565:	mov    rdi,QWORD PTR [rsp+0x58]
    d56a:	xor    r8d,r8d
    d56d:	xor    ecx,ecx
    d56f:	mov    edx,0x7
    d574:	mov    esi,r15d
    d577:	xor    r12d,r12d
    d57a:	mov    ebp,0x7
    d57f:	call   20b30 <TraceSet>
    d584:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d588:	je     d535 <EmitSequence+0x165>
    d58a:	nop    WORD PTR [rax+rax*1+0x0]
    d590:	mov    r15d,ebx
    d593:	cmp    bpl,0x9
    d597:	je     d841 <EmitSequence+0x471>
    d59d:	movsxd r13,DWORD PTR [rsp+0x18]
    d5a2:	jmp    d4a0 <EmitSequence+0xd0>
    d5a7:	nop    WORD PTR [rax+rax*1+0x0]
    d5b0:	cmp    DWORD PTR [r14+0x88],r12d
    d5b7:	jle    d565 <EmitSequence+0x195>
    d5b9:	mov    rax,QWORD PTR [r14+0x90]
    d5c0:	movsxd rsi,r12d
    d5c3:	lea    rdi,[rsp+0x60]
    d5c8:	mov    edx,0x3
    d5cd:	mov    QWORD PTR [rsp+0x20],rsi
    d5d2:	lea    rbp,[rsi*8+0x0]
    d5da:	mov    rsi,QWORD PTR [rax+rsi*8]
    d5de:	mov    QWORD PTR [rsp+0x40],rdi
    d5e3:	call   3aef0 <FCopy>
    d5e8:	mov    rsi,QWORD PTR [rsp+0x20]
    d5ed:	mov    rdi,QWORD PTR [rsp+0x40]
    d5f2:	mov    rax,QWORD PTR [r14+0xd8]
    d5f9:	movss  xmm0,DWORD PTR [rax+rsi*4]
    d5fe:	mov    esi,0x4
    d603:	movss  DWORD PTR [rsp+0x6c],xmm0
    d609:	call   36600 <FChoose>
    d60e:	cmp    eax,0x2
    d611:	je     dd60 <EmitSequence+0x990>
    d617:	jg     db10 <EmitSequence+0x740>
    d61d:	test   eax,eax
    d61f:	je     dc58 <EmitSequence+0x888>
    d625:	cmp    eax,0x1
    d628:	jne    db19 <EmitSequence+0x749>
    d62e:	mov    rax,QWORD PTR [r14+0xa0]
    d635:	mov    esi,DWORD PTR [rip+0x54cc5]        # 62300 <Alphabet_size>
    d63b:	mov    rdi,QWORD PTR [rax+rbp*1]
    d63f:	call   36600 <FChoose>
    d644:	mov    r13d,eax
    d647:	cmp    eax,0xffffffff
    d64a:	je     db48 <EmitSequence+0x778>
    d650:	mov    r8d,DWORD PTR [rsp+0x18]
    d655:	mov    rdi,QWORD PTR [rsp+0x58]
    d65a:	mov    esi,r15d
    d65d:	mov    ecx,r12d
    d660:	mov    edx,0x3
    d665:	call   20b30 <TraceSet>
    d66a:	mov    eax,DWORD PTR [rsp+0x18]
    d66e:	lea    r8d,[rax+0x1]
    d672:	lea    r15d,[rax+0x2]
    d676:	movsxd rax,r8d
    d679:	mov    QWORD PTR [rsp+0x10],rax
    d67e:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d682:	je     dcb0 <EmitSequence+0x8e0>
    d688:	mov    rcx,QWORD PTR [rsp]
    d68c:	mov    BYTE PTR [rcx],r13b
    d68f:	cmp    DWORD PTR [rsp+0x48],r15d
    d694:	je     dd10 <EmitSequence+0x940>
    d69a:	mov    rsi,QWORD PTR [rsp+0x8]
    d69f:	mov    r15d,ebx
    d6a2:	mov    DWORD PTR [rsp+0x18],r8d
    d6a7:	add    ebx,0x1
    d6aa:	add    rsi,rax
    d6ad:	mov    QWORD PTR [rsp],rsi
    d6b1:	jmp    dac8 <EmitSequence+0x6f8>
    d6b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d6c0:	lea    rdi,[r14+0xbc]
    d6c7:	mov    esi,0x2
    d6cc:	call   36600 <FChoose>
    d6d1:	cmp    eax,0x1
    d6d4:	je     d8de <EmitSequence+0x50e>
    d6da:	mov    rdi,QWORD PTR [rsp+0x58]
    d6df:	xor    r8d,r8d
    d6e2:	xor    ecx,ecx
    d6e4:	mov    edx,0x9
    d6e9:	mov    esi,r15d
    d6ec:	call   20b30 <TraceSet>
    d6f1:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d6f5:	je     dc40 <EmitSequence+0x870>
    d6fb:	xor    r12d,r12d
    d6fe:	mov    ebp,0x9
    d703:	jmp    d590 <EmitSequence+0x1c0>
    d708:	nop    DWORD PTR [rax+rax*1+0x0]
    d710:	lea    rdi,[r14+0xac]
    d717:	mov    esi,0x2
    d71c:	call   36600 <FChoose>
    d721:	cmp    eax,0x1
    d724:	je     db98 <EmitSequence+0x7c8>
    d72a:	mov    rdi,QWORD PTR [rsp+0x58]
    d72f:	xor    r8d,r8d
    d732:	xor    ecx,ecx
    d734:	mov    edx,0x6
    d739:	mov    esi,r15d
    d73c:	xor    r12d,r12d
    d73f:	mov    ebp,0x6
    d744:	call   20b30 <TraceSet>
    d749:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d74d:	jne    d590 <EmitSequence+0x1c0>
    d753:	jmp    d535 <EmitSequence+0x165>
    d758:	nop    DWORD PTR [rax+rax*1+0x0]
    d760:	mov    rdi,QWORD PTR [r14+0xd0]
    d767:	mov    eax,DWORD PTR [r14+0x88]
    d76e:	movss  xmm0,DWORD PTR [r14+0xa8]
    d777:	lea    esi,[rax+0x1]
    d77a:	movss  DWORD PTR [rdi],xmm0
    d77e:	call   36600 <FChoose>
    d783:	mov    r12d,eax
    d786:	test   eax,eax
    d788:	je     da88 <EmitSequence+0x6b8>
    d78e:	movsxd rax,r12d
    d791:	mov    r13d,r15d
    d794:	mov    r15d,ebx
    d797:	lea    rbp,[rax*8+0x0]
    d79f:	mov    rax,QWORD PTR [r14+0x98]
    d7a6:	mov    esi,DWORD PTR [rip+0x54b54]        # 62300 <Alphabet_size>
    d7ac:	mov    rdi,QWORD PTR [rax+rbp*1]
    d7b0:	mov    ebp,0x1
    d7b5:	call   36600 <FChoose>
    d7ba:	mov    rdi,QWORD PTR [rsp+0x58]
    d7bf:	mov    edx,0x1
    d7c4:	cmp    eax,0xffffffff
    d7c7:	je     da08 <EmitSequence+0x638>
    d7cd:	mov    r10d,DWORD PTR [rsp+0x18]
    d7d2:	mov    r8d,DWORD PTR [rsp+0x18]
    d7d7:	mov    ecx,r12d
    d7da:	mov    esi,r13d
    d7dd:	mov    DWORD PTR [rsp+0x40],r10d
    d7e2:	mov    DWORD PTR [rsp+0x20],eax
    d7e6:	call   20b30 <TraceSet>
    d7eb:	cmp    DWORD PTR [rsp+0x1c],ebx
    d7ef:	mov    eax,DWORD PTR [rsp+0x20]
    d7f3:	mov    r10d,DWORD PTR [rsp+0x40]
    d7f8:	je     de2a <EmitSequence+0xa5a>
    d7fe:	cmp    eax,0xffffffff
    d801:	je     de5b <EmitSequence+0xa8b>
    d807:	mov    rsi,QWORD PTR [rsp]
    d80b:	mov    BYTE PTR [rsi],al
    d80d:	lea    eax,[r10+0x1]
    d811:	movsxd rdx,eax
    d814:	mov    DWORD PTR [rsp+0x18],eax
    d818:	lea    eax,[r10+0x2]
    d81c:	mov    QWORD PTR [rsp+0x10],rdx
    d821:	cmp    eax,DWORD PTR [rsp+0x48]
    d825:	je     d9d0 <EmitSequence+0x600>
    d82b:	mov    rax,QWORD PTR [rsp+0x8]
    d830:	add    rax,rdx
    d833:	mov    QWORD PTR [rsp],rax
    d837:	cmp    bpl,0x9
    d83b:	jne    d59d <EmitSequence+0x1cd>
    d841:	mov    rax,QWORD PTR [rsp+0x58]
    d846:	mov    DWORD PTR [rax],ebx
    d848:	mov    eax,DWORD PTR [rip+0x54a4e]        # 6229c <Alphabet_iupac>
    d84e:	mov    rbx,QWORD PTR [rsp]
    d852:	mov    BYTE PTR [rbx],al
    d854:	mov    rbx,QWORD PTR [rsp+0x10]
    d859:	mov    rax,QWORD PTR [rsp+0x8]
    d85e:	mov    BYTE PTR [rax+rbx*1+0x1],0x0
    d863:	mov    rbx,QWORD PTR [rsp+0x28]
    d868:	test   rbx,rbx
    d86b:	je     dc80 <EmitSequence+0x8b0>
    d871:	mov    QWORD PTR [rbx],rax
    d874:	mov    rax,QWORD PTR [rsp+0x30]
    d879:	test   rax,rax
    d87c:	je     d887 <EmitSequence+0x4b7>
    d87e:	mov    ebp,DWORD PTR [rsp+0x18]
    d882:	sub    ebp,0x1
    d885:	mov    DWORD PTR [rax],ebp
    d887:	mov    rax,QWORD PTR [rsp+0x38]
    d88c:	mov    rdi,QWORD PTR [rsp+0x58]
    d891:	test   rax,rax
    d894:	je     dc70 <EmitSequence+0x8a0>
    d89a:	mov    QWORD PTR [rax],rdi
    d89d:	mov    rax,QWORD PTR [rsp+0x78]
    d8a2:	xor    rax,QWORD PTR fs:0x28
    d8ab:	jne    de56 <EmitSequence+0xa86>
    d8b1:	add    rsp,0x88
    d8b8:	pop    rbx
    d8b9:	pop    rbp
    d8ba:	pop    r12
    d8bc:	pop    r13
    d8be:	pop    r14
    d8c0:	pop    r15
    d8c2:	ret    
    d8c3:	nop    DWORD PTR [rax+rax*1+0x0]
    d8c8:	lea    rdi,[r14+0xb4]
    d8cf:	mov    esi,0x2
    d8d4:	call   36600 <FChoose>
    d8d9:	cmp    eax,0x1
    d8dc:	je     d928 <EmitSequence+0x558>
    d8de:	xor    r12d,r12d
    d8e1:	mov    rdi,QWORD PTR [rsp+0x58]
    d8e6:	movsxd rax,r15d
    d8e9:	mov    rdx,QWORD PTR [rdi+0x8]
    d8ed:	movzx  ebp,BYTE PTR [rdx+rax*1-0x1]
    d8f2:	cmp    bpl,0x8
    d8f6:	je     db38 <EmitSequence+0x768>
    d8fc:	xor    r8d,r8d
    d8ff:	mov    ecx,r12d
    d902:	mov    edx,0x8
    d907:	mov    esi,r15d
    d90a:	call   20b30 <TraceSet>
    d90f:	mov    ebp,0x8
    d914:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d918:	jne    d590 <EmitSequence+0x1c0>
    d91e:	jmp    d535 <EmitSequence+0x165>
    d923:	nop    DWORD PTR [rax+rax*1+0x0]
    d928:	mov    r10,QWORD PTR [rsp+0x58]
    d92d:	xor    r12d,r12d
    d930:	mov    rdx,QWORD PTR [r10+0x8]
    d934:	movsxd rax,r15d
    d937:	movzx  ebp,BYTE PTR [rdx+rax*1-0x1]
    d93c:	cmp    bpl,0xa
    d940:	je     dba0 <EmitSequence+0x7d0>
    d946:	xor    r8d,r8d
    d949:	mov    ecx,r12d
    d94c:	mov    edx,0xa
    d951:	mov    esi,r15d
    d954:	mov    rdi,r10
    d957:	call   20b30 <TraceSet>
    d95c:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d960:	je     dc90 <EmitSequence+0x8c0>
    d966:	mov    rax,QWORD PTR [rsp+0x8]
    d96b:	mov    QWORD PTR [rsp+0x10],r13
    d970:	mov    r15d,ebx
    d973:	add    ebx,0x1
    d976:	add    rax,r13
    d979:	mov    QWORD PTR [rsp],rax
    d97d:	lea    rdi,[r14+0xc4]
    d984:	mov    esi,0x2
    d989:	mov    ebp,0xa
    d98e:	xor    r12d,r12d
    d991:	call   36600 <FChoose>
    d996:	cmp    eax,0x1
    d999:	je     dd9a <EmitSequence+0x9ca>
    d99f:	mov    rdi,QWORD PTR [rsp+0x58]
    d9a4:	xor    r8d,r8d
    d9a7:	xor    ecx,ecx
    d9a9:	mov    edx,0x6
    d9ae:	mov    esi,r15d
    d9b1:	mov    ebp,0x6
    d9b6:	call   20b30 <TraceSet>
    d9bb:	cmp    ebx,DWORD PTR [rsp+0x1c]
    d9bf:	jne    d590 <EmitSequence+0x1c0>
    d9c5:	jmp    d535 <EmitSequence+0x165>
    d9ca:	nop    WORD PTR [rax+rax*1+0x0]
    d9d0:	lea    eax,[r10+0x42]
    d9d4:	mov    rdx,QWORD PTR [rsp+0x8]
    d9d9:	mov    esi,0x92
    d9de:	lea    rdi,[rip+0x2fcfb]        # 3d6e0 <_IO_stdin_used+0x6e0>
    d9e5:	movsxd rcx,eax
    d9e8:	mov    DWORD PTR [rsp+0x48],eax
    d9ec:	call   36860 <sre_realloc>
    d9f1:	mov    QWORD PTR [rsp+0x8],rax
    d9f6:	add    rax,QWORD PTR [rsp+0x10]
    d9fb:	mov    QWORD PTR [rsp],rax
    d9ff:	jmp    d593 <EmitSequence+0x1c3>
    da04:	nop    DWORD PTR [rax+0x0]
    da08:	xor    r8d,r8d
    da0b:	mov    ecx,r12d
    da0e:	mov    esi,r13d
    da11:	call   20b30 <TraceSet>
    da16:	cmp    ebx,DWORD PTR [rsp+0x1c]
    da1a:	jne    d590 <EmitSequence+0x1c0>
    da20:	add    DWORD PTR [rsp+0x1c],0x40
    da25:	mov    eax,DWORD PTR [rsp+0x1c]
    da29:	mov    rdi,QWORD PTR [rsp+0x58]
    da2e:	mov    esi,eax
    da30:	call   20a70 <P7ReallocTrace>
    da35:	movsxd r13,DWORD PTR [rsp+0x18]
    da3a:	jmp    d4a0 <EmitSequence+0xd0>
    da3f:	nop
    da40:	mov    edx,0x5
    da45:	mov    esi,DWORD PTR [rip+0x548b5]        # 62300 <Alphabet_size>
    da4b:	lea    rdi,[r14+0xe0]
    da52:	mov    DWORD PTR [rsp+0x20],edx
    da56:	mov    r13d,r15d
    da59:	mov    r15d,ebx
    da5c:	call   36600 <FChoose>
    da61:	mov    rdi,QWORD PTR [rsp+0x58]
    da66:	mov    edx,DWORD PTR [rsp+0x20]
    da6a:	cmp    eax,0xffffffff
    da6d:	jne    d7cd <EmitSequence+0x3fd>
    da73:	mov    r10d,DWORD PTR [rsp+0x18]
    da78:	mov    DWORD PTR [rsp+0x18],0x0
    da80:	jmp    d7d2 <EmitSequence+0x402>
    da85:	nop    DWORD PTR [rax]
    da88:	mov    rdi,QWORD PTR [rsp+0x58]
    da8d:	xor    r8d,r8d
    da90:	mov    ecx,0x1
    da95:	mov    esi,r15d
    da98:	mov    edx,0x2
    da9d:	mov    r12d,0x1
    daa3:	mov    ebp,0x2
    daa8:	call   20b30 <TraceSet>
    daad:	cmp    ebx,DWORD PTR [rsp+0x1c]
    dab1:	jne    d590 <EmitSequence+0x1c0>
    dab7:	jmp    d535 <EmitSequence+0x165>
    dabc:	nop    DWORD PTR [rax+0x0]
    dac0:	movsxd rax,r12d
    dac3:	mov    QWORD PTR [rsp+0x20],rax
    dac8:	mov    rax,QWORD PTR [rsp+0x20]
    dacd:	lea    rbp,[rax*8+0x0]
    dad5:	mov    rax,QWORD PTR [r14+0x90]
    dadc:	mov    esi,0x2
    dae1:	mov    rdi,QWORD PTR [rax+rbp*1]
    dae5:	add    rdi,0xc
    dae9:	call   36600 <FChoose>
    daee:	test   eax,eax
    daf0:	jne    d62e <EmitSequence+0x25e>
    daf6:	add    r12d,0x1
    dafa:	mov    r13d,r15d
    dafd:	mov    r15d,ebx
    db00:	movsxd rax,r12d
    db03:	lea    rbp,[rax*8+0x0]
    db0b:	jmp    d79f <EmitSequence+0x3cf>
    db10:	cmp    eax,0x3
    db13:	je     d565 <EmitSequence+0x195>
    db19:	lea    rdi,[rip+0x2fbc7]        # 3d6e7 <_IO_stdin_used+0x6e7>
    db20:	xor    eax,eax
    db22:	mov    r13d,r15d
    db25:	mov    r15d,ebx
    db28:	call   317f0 <Die>
    db2d:	jmp    d79f <EmitSequence+0x3cf>
    db32:	nop    WORD PTR [rax+rax*1+0x0]
    db38:	mov    edx,0x8
    db3d:	jmp    da45 <EmitSequence+0x675>
    db42:	nop    WORD PTR [rax+rax*1+0x0]
    db48:	mov    rdi,QWORD PTR [rsp+0x58]
    db4d:	xor    r8d,r8d
    db50:	mov    ecx,r12d
    db53:	mov    edx,0x3
    db58:	mov    esi,r15d
    db5b:	mov    ebp,0x3
    db60:	call   20b30 <TraceSet>
    db65:	cmp    ebx,DWORD PTR [rsp+0x1c]
    db69:	jne    d590 <EmitSequence+0x1c0>
    db6f:	add    DWORD PTR [rsp+0x1c],0x40
    db74:	mov    eax,DWORD PTR [rsp+0x1c]
    db78:	mov    r15d,ebx
    db7b:	mov    rdi,QWORD PTR [rsp+0x58]
    db80:	mov    esi,eax
    db82:	call   20a70 <P7ReallocTrace>
    db87:	movsxd r13,DWORD PTR [rsp+0x18]
    db8c:	jmp    d4a0 <EmitSequence+0xd0>
    db91:	nop    DWORD PTR [rax+0x0]
    db98:	xor    r12d,r12d
    db9b:	jmp    d4fc <EmitSequence+0x12c>
    dba0:	mov    edx,0xa
    dba5:	jmp    da45 <EmitSequence+0x675>
    dbaa:	nop    WORD PTR [rax+rax*1+0x0]
    dbb0:	mov    rdx,QWORD PTR [r14+0x90]
    dbb7:	movsxd rax,r12d
    dbba:	add    r12d,0x1
    dbbe:	lea    rsi,[rax*8+0x0]
    dbc6:	mov    rdi,QWORD PTR [rdx+rax*8]
    dbca:	mov    QWORD PTR [rsp+0x20],rsi
    dbcf:	mov    esi,0x2
    dbd4:	add    rdi,0x14
    dbd8:	call   36600 <FChoose>
    dbdd:	test   eax,eax
    dbdf:	jne    dc10 <EmitSequence+0x840>
    dbe1:	mov    rbp,QWORD PTR [rsp+0x20]
    dbe6:	mov    r13d,r15d
    dbe9:	mov    r15d,ebx
    dbec:	add    rbp,0x8
    dbf0:	jmp    d79f <EmitSequence+0x3cf>
    dbf5:	nop    DWORD PTR [rax]
    dbf8:	movsxd rax,r12d
    dbfb:	mov    QWORD PTR [rsp+0x20],rax
    dc00:	lea    rbp,[rax*8+0x0]
    dc08:	jmp    d62e <EmitSequence+0x25e>
    dc0d:	nop    DWORD PTR [rax]
    dc10:	mov    rdi,QWORD PTR [rsp+0x58]
    dc15:	xor    r8d,r8d
    dc18:	mov    ecx,r12d
    dc1b:	mov    edx,0x2
    dc20:	mov    esi,r15d
    dc23:	call   20b30 <TraceSet>
    dc28:	cmp    ebx,DWORD PTR [rsp+0x1c]
    dc2c:	jne    d590 <EmitSequence+0x1c0>
    dc32:	jmp    d535 <EmitSequence+0x165>
    dc37:	nop    WORD PTR [rax+rax*1+0x0]
    dc40:	mov    rdi,QWORD PTR [rsp+0x58]
    dc45:	lea    esi,[rbx+0x40]
    dc48:	call   20a70 <P7ReallocTrace>
    dc4d:	jmp    d841 <EmitSequence+0x471>
    dc52:	nop    WORD PTR [rax+rax*1+0x0]
    dc58:	mov    r13d,r15d
    dc5b:	add    r12d,0x1
    dc5f:	add    rbp,0x8
    dc63:	mov    r15d,ebx
    dc66:	jmp    d79f <EmitSequence+0x3cf>
    dc6b:	nop    DWORD PTR [rax+rax*1+0x0]
    dc70:	call   20af0 <P7FreeTrace>
    dc75:	jmp    d89d <EmitSequence+0x4cd>
    dc7a:	nop    WORD PTR [rax+rax*1+0x0]
    dc80:	mov    rdi,QWORD PTR [rsp+0x8]
    dc85:	call   3460 <free@plt>
    dc8a:	jmp    d874 <EmitSequence+0x4a4>
    dc8f:	nop
    dc90:	lea    ebp,[rbx+0x40]
    dc93:	mov    rdi,QWORD PTR [rsp+0x58]
    dc98:	add    ebx,0x1
    dc9b:	mov    esi,ebp
    dc9d:	call   20a70 <P7ReallocTrace>
    dca2:	mov    r15d,DWORD PTR [rsp+0x1c]
    dca7:	mov    DWORD PTR [rsp+0x1c],ebp
    dcab:	jmp    d97d <EmitSequence+0x5ad>
    dcb0:	lea    r11d,[rbx+0x40]
    dcb4:	mov    rdi,QWORD PTR [rsp+0x58]
    dcb9:	mov    DWORD PTR [rsp+0x4c],r8d
    dcbe:	add    ebx,0x1
    dcc1:	mov    esi,r11d
    dcc4:	mov    DWORD PTR [rsp+0x40],r11d
    dcc9:	call   20a70 <P7ReallocTrace>
    dcce:	mov    rax,QWORD PTR [rsp]
    dcd2:	cmp    DWORD PTR [rsp+0x48],r15d
    dcd7:	mov    r11d,DWORD PTR [rsp+0x40]
    dcdc:	mov    r8d,DWORD PTR [rsp+0x4c]
    dce1:	mov    BYTE PTR [rax],r13b
    dce4:	je     ddd0 <EmitSequence+0xa00>
    dcea:	mov    rax,QWORD PTR [rsp+0x8]
    dcef:	add    rax,QWORD PTR [rsp+0x10]
    dcf4:	mov    DWORD PTR [rsp+0x18],r8d
    dcf9:	mov    r15d,DWORD PTR [rsp+0x1c]
    dcfe:	mov    QWORD PTR [rsp],rax
    dd02:	mov    DWORD PTR [rsp+0x1c],r11d
    dd07:	jmp    dad5 <EmitSequence+0x705>
    dd0c:	nop    DWORD PTR [rax+0x0]
    dd10:	mov    eax,DWORD PTR [rsp+0x18]
    dd14:	mov    rdx,QWORD PTR [rsp+0x8]
    dd19:	lea    r13d,[rbx+0x1]
    dd1d:	mov    r15d,ebx
    dd20:	mov    esi,0x92
    dd25:	lea    rdi,[rip+0x2f9b4]        # 3d6e0 <_IO_stdin_used+0x6e0>
    dd2c:	mov    DWORD PTR [rsp+0x40],r8d
    dd31:	mov    ebx,r13d
    dd34:	add    eax,0x42
    dd37:	movsxd rcx,eax
    dd3a:	mov    DWORD PTR [rsp+0x48],eax
    dd3e:	call   36860 <sre_realloc>
    dd43:	mov    r8d,DWORD PTR [rsp+0x40]
    dd48:	mov    QWORD PTR [rsp+0x8],rax
    dd4d:	add    rax,QWORD PTR [rsp+0x10]
    dd52:	mov    QWORD PTR [rsp],rax
    dd56:	mov    DWORD PTR [rsp+0x18],r8d
    dd5b:	jmp    dad5 <EmitSequence+0x705>
    dd60:	mov    rdi,QWORD PTR [rsp+0x58]
    dd65:	add    r12d,0x1
    dd69:	xor    r8d,r8d
    dd6c:	mov    esi,r15d
    dd6f:	mov    ecx,r12d
    dd72:	mov    edx,0x2
    dd77:	mov    ebp,0x2
    dd7c:	call   20b30 <TraceSet>
    dd81:	cmp    ebx,DWORD PTR [rsp+0x1c]
    dd85:	jne    d590 <EmitSequence+0x1c0>
    dd8b:	jmp    d535 <EmitSequence+0x165>
    dd90:	cmp    bpl,0x8
    dd94:	je     d8e1 <EmitSequence+0x511>
    dd9a:	mov    rdi,QWORD PTR [rsp+0x58]
    dd9f:	mov    r10,rdi
    dda2:	cmp    bpl,0xa
    dda6:	je     d930 <EmitSequence+0x560>
    ddac:	mov    r10d,DWORD PTR [rsp+0x18]
    ddb1:	mov    r13d,r15d
    ddb4:	movsx  edx,bpl
    ddb8:	mov    r15d,ebx
    ddbb:	mov    DWORD PTR [rsp+0x18],0x0
    ddc3:	or     eax,0xffffffff
    ddc6:	jmp    d7d2 <EmitSequence+0x402>
    ddcb:	nop    DWORD PTR [rax+rax*1+0x0]
    ddd0:	mov    eax,DWORD PTR [rsp+0x18]
    ddd4:	mov    rdx,QWORD PTR [rsp+0x8]
    ddd9:	mov    esi,0x92
    ddde:	lea    rdi,[rip+0x2f8fb]        # 3d6e0 <_IO_stdin_used+0x6e0>
    dde5:	mov    DWORD PTR [rsp+0x4c],r8d
    ddea:	add    eax,0x42
    dded:	mov    DWORD PTR [rsp+0x40],r11d
    ddf2:	movsxd rcx,eax
    ddf5:	mov    DWORD PTR [rsp+0x48],eax
    ddf9:	call   36860 <sre_realloc>
    ddfe:	mov    r11d,DWORD PTR [rsp+0x40]
    de03:	mov    r8d,DWORD PTR [rsp+0x4c]
    de08:	mov    QWORD PTR [rsp+0x8],rax
    de0d:	add    rax,QWORD PTR [rsp+0x10]
    de12:	mov    r15d,DWORD PTR [rsp+0x1c]
    de17:	mov    QWORD PTR [rsp],rax
    de1b:	mov    DWORD PTR [rsp+0x1c],r11d
    de20:	mov    DWORD PTR [rsp+0x18],r8d
    de25:	jmp    dad5 <EmitSequence+0x705>
    de2a:	add    DWORD PTR [rsp+0x1c],0x40
    de2f:	mov    rdi,QWORD PTR [rsp+0x58]
    de34:	mov    DWORD PTR [rsp+0x18],eax
    de38:	mov    eax,DWORD PTR [rsp+0x1c]
    de3c:	mov    DWORD PTR [rsp+0x20],r10d
    de41:	mov    esi,eax
    de43:	call   20a70 <P7ReallocTrace>
    de48:	mov    r10d,DWORD PTR [rsp+0x20]
    de4d:	mov    eax,DWORD PTR [rsp+0x18]
    de51:	jmp    d7fe <EmitSequence+0x42e>
    de56:	call   3570 <__stack_chk_fail@plt>
    de5b:	mov    DWORD PTR [rsp+0x18],r10d
    de60:	jmp    d593 <EmitSequence+0x1c3>
    de65:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000de70 <StateOccupancy>:
    de70:	endbr64 
    de74:	push   r15
    de76:	mov    r15,rdi
    de79:	push   r14
    de7b:	mov    r14,rcx
    de7e:	push   r13
    de80:	mov    r13,rdx
    de83:	push   r12
    de85:	mov    r12,rsi
    de88:	mov    esi,0x19e
    de8d:	push   rbp
    de8e:	push   rbx
    de8f:	sub    rsp,0x8
    de93:	mov    eax,DWORD PTR [rdi+0x88]
    de99:	lea    rdi,[rip+0x2f840]        # 3d6e0 <_IO_stdin_used+0x6e0>
    dea0:	lea    edx,[rax+0x1]
    dea3:	movsxd rdx,edx
    dea6:	shl    rdx,0x2
    deaa:	call   36810 <sre_malloc>
    deaf:	movsxd rdx,DWORD PTR [r15+0x88]
    deb6:	mov    esi,0x19f
    debb:	lea    rdi,[rip+0x2f81e]        # 3d6e0 <_IO_stdin_used+0x6e0>
    dec2:	mov    rbx,rax
    dec5:	shl    rdx,0x2
    dec9:	call   36810 <sre_malloc>
    dece:	lea    rdi,[rip+0x2f80b]        # 3d6e0 <_IO_stdin_used+0x6e0>
    ded5:	mov    esi,0x1a0
    deda:	mov    rbp,rax
    dedd:	mov    eax,DWORD PTR [r15+0x88]
    dee4:	lea    edx,[rax+0x1]
    dee7:	movsxd rdx,edx
    deea:	shl    rdx,0x2
    deee:	call   36810 <sre_malloc>
    def3:	mov    rcx,QWORD PTR [r15+0xd0]
    defa:	movss  xmm0,DWORD PTR [r15+0xa8]
    df03:	mov    rdi,QWORD PTR [r15+0x90]
    df0a:	mov    r8d,DWORD PTR [r15+0x88]
    df11:	movss  DWORD PTR [rax+0x4],xmm0
    df16:	movss  xmm0,DWORD PTR [rcx+0x4]
    df1b:	mov    rdx,QWORD PTR [rdi+0x8]
    df1f:	movss  DWORD PTR [rbx+0x4],xmm0
    df24:	mulss  xmm0,DWORD PTR [rdx+0x4]
    df29:	movss  DWORD PTR [rbp+0x4],xmm0
    df2e:	cmp    r8d,0x1
    df32:	jle    dfe5 <StateOccupancy+0x175>
    df38:	lea    r9d,[r8-0x2]
    df3c:	mov    edx,0x2
    df41:	add    r9,0x3
    df45:	nop    DWORD PTR [rax]
    df48:	mov    rsi,QWORD PTR [rdi+rdx*8-0x8]
    df4d:	movss  xmm2,DWORD PTR [rbx+rdx*4-0x4]
    df53:	movss  xmm0,DWORD PTR [rax+rdx*4-0x4]
    df59:	movss  xmm1,DWORD PTR [rsi]
    df5d:	mulss  xmm0,DWORD PTR [rsi+0x14]
    df62:	mulss  xmm1,xmm2
    df66:	addss  xmm1,DWORD PTR [rbp+rdx*4-0x4]
    df6c:	addss  xmm1,xmm0
    df70:	addss  xmm1,DWORD PTR [rcx+rdx*4]
    df75:	movss  DWORD PTR [rbx+rdx*4],xmm1
    df7a:	mulss  xmm2,DWORD PTR [rsi+0x8]
    df7f:	movss  xmm0,DWORD PTR [rax+rdx*4-0x4]
    df85:	mulss  xmm0,DWORD PTR [rsi+0x18]
    df8a:	addss  xmm0,xmm2
    df8e:	movss  DWORD PTR [rax+rdx*4],xmm0
    df93:	cmp    r8d,edx
    df96:	jle    dfb1 <StateOccupancy+0x141>
    df98:	mov    rsi,QWORD PTR [rdi+rdx*8]
    df9c:	movss  xmm0,DWORD PTR [rsi+0x4]
    dfa1:	mulss  xmm0,DWORD PTR [rbx+rdx*4]
    dfa6:	movss  DWORD PTR [rbp+rdx*4+0x0],xmm0
    dfac:	movss  xmm0,DWORD PTR [rax+rdx*4]
    dfb1:	movss  xmm1,DWORD PTR [rbx+rdx*4]
    dfb6:	addss  xmm0,xmm1
    dfba:	divss  xmm1,xmm0
    dfbe:	movss  DWORD PTR [rbx+rdx*4],xmm1
    dfc3:	movaps xmm0,xmm1
    dfc6:	movss  xmm1,DWORD PTR [rax+rdx*4]
    dfcb:	addss  xmm0,xmm1
    dfcf:	divss  xmm1,xmm0
    dfd3:	movss  DWORD PTR [rax+rdx*4],xmm1
    dfd8:	add    rdx,0x1
    dfdc:	cmp    r9,rdx
    dfdf:	jne    df48 <StateOccupancy+0xd8>
    dfe5:	mov    QWORD PTR [r12],rbx
    dfe9:	mov    QWORD PTR [r14],rax
    dfec:	mov    QWORD PTR [r13+0x0],rbp
    dff0:	add    rsp,0x8
    dff4:	pop    rbx
    dff5:	pop    rbp
    dff6:	pop    r12
    dff8:	pop    r13
    dffa:	pop    r14
    dffc:	pop    r15
    dffe:	ret    
    dfff:	nop

000000000000e000 <EmitConsensusSequence>:
    e000:	endbr64 
    e004:	push   r15
    e006:	push   r14
    e008:	push   r13
    e00a:	mov    r13,rdi
    e00d:	push   r12
    e00f:	push   rbp
    e010:	push   rbx
    e011:	sub    rsp,0x98
    e018:	movss  xmm5,DWORD PTR [rip+0x2f710]        # 3d730 <_IO_stdin_used+0x730>
    e020:	mov    QWORD PTR [rsp+0x38],rsi
    e025:	mov    QWORD PTR [rsp+0x40],rdx
    e02a:	mov    QWORD PTR [rsp+0x48],rcx
    e02f:	mov    QWORD PTR [rsp+0x50],r8
    e034:	mov    rax,QWORD PTR fs:0x28
    e03d:	mov    QWORD PTR [rsp+0x88],rax
    e045:	xor    eax,eax
    e047:	cmp    DWORD PTR [rip+0x54032],0x3        # 62080 <Alphabet_type>
    e04e:	movss  DWORD PTR [rsp+0x34],xmm5
    e054:	je     e064 <EmitConsensusSequence+0x64>
    e056:	movss  xmm6,DWORD PTR [rip+0x2f6d6]        # 3d734 <_IO_stdin_used+0x734>
    e05e:	movss  DWORD PTR [rsp+0x34],xmm6
    e064:	lea    rcx,[rsp+0x80]
    e06c:	lea    rdx,[rsp+0x78]
    e071:	mov    rdi,r13
    e074:	lea    rsi,[rsp+0x70]
    e079:	call   de70 <StateOccupancy>
    e07e:	mov    ecx,DWORD PTR [r13+0x88]
    e085:	test   ecx,ecx
    e087:	jle    e550 <EmitConsensusSequence+0x550>
    e08d:	lea    esi,[rcx-0x1]
    e090:	mov    r8,QWORD PTR [rsp+0x70]
    e095:	mov    r11,QWORD PTR [rsp+0x78]
    e09a:	xor    r10d,r10d
    e09d:	movss  xmm1,DWORD PTR [rip+0x2f2f7]        # 3d39c <_IO_stdin_used+0x39c>
    e0a5:	add    rsi,0x2
    e0a9:	xor    edi,edi
    e0ab:	xor    edx,edx
    e0ad:	mov    eax,0x1
    e0b2:	jmp    e0fa <EmitConsensusSequence+0xfa>
    e0b4:	nop    DWORD PTR [rax+0x0]
    e0b8:	add    edx,0x1
    e0bb:	cmp    ecx,eax
    e0bd:	jle    e0f1 <EmitConsensusSequence+0xf1>
    e0bf:	movss  xmm0,DWORD PTR [r11+rax*4]
    e0c5:	comiss xmm0,DWORD PTR [rip+0x2f664]        # 3d730 <_IO_stdin_used+0x730>
    e0cc:	jb     e0f1 <EmitConsensusSequence+0xf1>
    e0ce:	mov    r9,QWORD PTR [r13+0x90]
    e0d5:	movaps xmm0,xmm1
    e0d8:	movaps xmm3,xmm1
    e0db:	mov    r9,QWORD PTR [r9+rax*8]
    e0df:	subss  xmm0,DWORD PTR [r9+0x10]
    e0e5:	divss  xmm3,xmm0
    e0e9:	cvttss2si r9d,xmm3
    e0ee:	add    r10d,r9d
    e0f1:	add    rax,0x1
    e0f5:	cmp    rsi,rax
    e0f8:	je     e110 <EmitConsensusSequence+0x110>
    e0fa:	movss  xmm0,DWORD PTR [r8+rax*4]
    e100:	comiss xmm0,DWORD PTR [rip+0x2f629]        # 3d730 <_IO_stdin_used+0x730>
    e107:	jae    e0b8 <EmitConsensusSequence+0xb8>
    e109:	add    edi,0x1
    e10c:	jmp    e0bb <EmitConsensusSequence+0xbb>
    e10e:	xchg   ax,ax
    e110:	lea    edi,[rdx+rdi*1+0x6]
    e114:	add    edx,r10d
    e117:	lea    r14d,[rdx+0x3]
    e11b:	add    edx,0x1
    e11e:	add    edi,r10d
    e121:	movsxd r14,r14d
    e124:	movsxd r12,edx
    e127:	lea    rsi,[rsp+0x68]
    e12c:	call   209f0 <P7AllocTrace>
    e131:	mov    rdx,r14
    e134:	mov    esi,0x147
    e139:	lea    rdi,[rip+0x2f5a0]        # 3d6e0 <_IO_stdin_used+0x6e0>
    e140:	call   36810 <sre_malloc>
    e145:	mov    rdx,r12
    e148:	mov    esi,0x148
    e14d:	lea    rdi,[rip+0x2f58c]        # 3d6e0 <_IO_stdin_used+0x6e0>
    e154:	mov    rbx,rax
    e157:	mov    QWORD PTR [rsp+0x8],rax
    e15c:	call   36810 <sre_malloc>
    e161:	mov    rdi,QWORD PTR [rsp+0x68]
    e166:	xor    r8d,r8d
    e169:	xor    ecx,ecx
    e16b:	mov    edx,0x4
    e170:	xor    esi,esi
    e172:	mov    QWORD PTR [rsp+0x28],rax
    e177:	call   20b30 <TraceSet>
    e17c:	mov    rdi,QWORD PTR [rsp+0x68]
    e181:	xor    r8d,r8d
    e184:	xor    ecx,ecx
    e186:	mov    edx,0x5
    e18b:	mov    esi,0x1
    e190:	call   20b30 <TraceSet>
    e195:	mov    rdi,QWORD PTR [rsp+0x68]
    e19a:	xor    r8d,r8d
    e19d:	xor    ecx,ecx
    e19f:	mov    edx,0x6
    e1a4:	mov    esi,0x2
    e1a9:	call   20b30 <TraceSet>
    e1ae:	mov    eax,DWORD PTR [rip+0x540e8]        # 6229c <Alphabet_iupac>
    e1b4:	mov    BYTE PTR [rbx],al
    e1b6:	mov    eax,DWORD PTR [r13+0x88]
    e1bd:	test   eax,eax
    e1bf:	jle    e570 <EmitConsensusSequence+0x570>
    e1c5:	xor    r15d,r15d
    e1c8:	mov    r14d,0x1
    e1ce:	mov    ebx,0x4
    e1d3:	mov    DWORD PTR [rsp+0x30],0x0
    e1db:	mov    r9,r15
    e1de:	mov    r12d,0x3
    e1e4:	mov    r15,r13
    e1e7:	mov    r13d,r14d
    e1ea:	jmp    e2cf <EmitConsensusSequence+0x2cf>
    e1ef:	nop
    e1f0:	mov    rax,QWORD PTR [r15+0x98]
    e1f7:	mov    esi,DWORD PTR [rip+0x54103]        # 62300 <Alphabet_size>
    e1fd:	mov    QWORD PTR [rsp+0x20],r10
    e202:	mov    QWORD PTR [rsp+0x18],r9
    e207:	mov    rdi,QWORD PTR [rax+rbx*2]
    e20b:	call   3b110 <FArgMax>
    e210:	add    DWORD PTR [rsp+0x30],0x1
    e215:	mov    ecx,r13d
    e218:	mov    esi,r12d
    e21b:	mov    DWORD PTR [rsp+0x10],eax
    e21f:	mov    eax,DWORD PTR [rsp+0x30]
    e223:	mov    edx,0x1
    e228:	mov    rdi,QWORD PTR [rsp+0x68]
    e22d:	mov    r8d,eax
    e230:	call   20b30 <TraceSet>
    e235:	movsxd rdx,DWORD PTR [rsp+0x10]
    e23a:	mov    r10,QWORD PTR [rsp+0x20]
    e23f:	lea    rcx,[rip+0x5403a]        # 62280 <Alphabet>
    e246:	mov    r9,QWORD PTR [rsp+0x18]
    e24b:	add    r9,QWORD PTR [rsp+0x28]
    e250:	movzx  esi,BYTE PTR [rcx+rdx*1]
    e254:	movss  xmm2,DWORD PTR [rsp+0x34]
    e25a:	mov    QWORD PTR [rsp+0x10],r9
    e25f:	mov    BYTE PTR [r9],sil
    e262:	mov    BYTE PTR [r10],dl
    e265:	mov    rax,QWORD PTR [r15+0x98]
    e26c:	mov    rax,QWORD PTR [rax+rbx*2]
    e270:	comiss xmm2,DWORD PTR [rax+rdx*4]
    e274:	jbe    e28d <EmitConsensusSequence+0x28d>
    e276:	call   3810 <__ctype_tolower_loc@plt>
    e27b:	mov    r9,QWORD PTR [rsp+0x10]
    e280:	mov    rax,QWORD PTR [rax]
    e283:	movsx  rdx,BYTE PTR [r9]
    e287:	mov    eax,DWORD PTR [rax+rdx*4]
    e28a:	mov    BYTE PTR [r9],al
    e28d:	movsxd r9,DWORD PTR [rsp+0x30]
    e292:	mov    rax,QWORD PTR [rsp+0x8]
    e297:	lea    r10,[rax+r9*1+0x1]
    e29c:	mov    eax,DWORD PTR [r15+0x88]
    e2a3:	cmp    eax,r13d
    e2a6:	jle    e2bb <EmitConsensusSequence+0x2bb>
    e2a8:	mov    rdx,QWORD PTR [rsp+0x78]
    e2ad:	movss  xmm0,DWORD PTR [rdx+rbx*1]
    e2b2:	comiss xmm0,DWORD PTR [rip+0x2f477]        # 3d730 <_IO_stdin_used+0x730>
    e2b9:	jae    e330 <EmitConsensusSequence+0x330>
    e2bb:	add    r13d,0x1
    e2bf:	mov    r12d,r14d
    e2c2:	add    rbx,0x4
    e2c6:	cmp    r13d,eax
    e2c9:	jg     e420 <EmitConsensusSequence+0x420>
    e2cf:	mov    rax,QWORD PTR [rsp+0x8]
    e2d4:	lea    r14d,[r12+0x1]
    e2d9:	mov    ebp,r14d
    e2dc:	lea    r10,[rax+r9*1+0x1]
    e2e1:	mov    rax,QWORD PTR [rsp+0x70]
    e2e6:	movss  xmm0,DWORD PTR [rax+rbx*1]
    e2eb:	comiss xmm0,DWORD PTR [rip+0x2f43e]        # 3d730 <_IO_stdin_used+0x730>
    e2f2:	jae    e1f0 <EmitConsensusSequence+0x1f0>
    e2f8:	mov    rdi,QWORD PTR [rsp+0x68]
    e2fd:	xor    r8d,r8d
    e300:	mov    ecx,r13d
    e303:	mov    edx,0x2
    e308:	mov    esi,r12d
    e30b:	mov    QWORD PTR [rsp+0x18],r10
    e310:	mov    QWORD PTR [rsp+0x10],r9
    e315:	call   20b30 <TraceSet>
    e31a:	mov    r10,QWORD PTR [rsp+0x18]
    e31f:	mov    r9,QWORD PTR [rsp+0x10]
    e324:	jmp    e29c <EmitConsensusSequence+0x29c>
    e329:	nop    DWORD PTR [rax+0x0]
    e330:	mov    rdx,QWORD PTR [r15+0x90]
    e337:	movss  xmm0,DWORD PTR [rip+0x2f05d]        # 3d39c <_IO_stdin_used+0x39c>
    e33f:	movss  xmm4,DWORD PTR [rip+0x2f055]        # 3d39c <_IO_stdin_used+0x39c>
    e347:	mov    rdx,QWORD PTR [rdx+rbx*2]
    e34b:	subss  xmm0,DWORD PTR [rdx+0x10]
    e350:	divss  xmm4,xmm0
    e354:	cvttss2si edx,xmm4
    e358:	lea    ecx,[rdx-0x1]
    e35b:	mov    DWORD PTR [rsp+0x10],ecx
    e35f:	test   edx,edx
    e361:	je     e2bb <EmitConsensusSequence+0x2bb>
    e367:	mov    eax,DWORD PTR [rsp+0x30]
    e36b:	mov    DWORD PTR [rsp+0x18],r12d
    e370:	add    r14d,edx
    e373:	mov    QWORD PTR [rsp+0x20],rbx
    e378:	mov    r12,QWORD PTR [rsp+0x8]
    e37d:	mov    ebx,ebp
    e37f:	add    eax,0x1
    e382:	mov    rbp,QWORD PTR [rsp+0x28]
    e387:	mov    QWORD PTR [rsp+0x58],r15
    e38c:	mov    DWORD PTR [rsp+0x30],eax
    e390:	cdqe   
    e392:	mov    r15,rax
    e395:	nop    DWORD PTR [rax]
    e398:	mov    rdi,QWORD PTR [rsp+0x68]
    e39d:	mov    r8d,r15d
    e3a0:	mov    edx,0x3
    e3a5:	mov    esi,ebx
    e3a7:	mov    ecx,r13d
    e3aa:	add    ebx,0x1
    e3ad:	call   20b30 <TraceSet>
    e3b2:	mov    BYTE PTR [rbp+r15*1-0x1],0x78
    e3b8:	movzx  eax,BYTE PTR [rip+0x53edd]        # 6229c <Alphabet_iupac>
    e3bf:	lea    edx,[rax-0x1]
    e3c2:	mov    BYTE PTR [r12+r15*1],dl
    e3c6:	add    r15,0x1
    e3ca:	cmp    r14d,ebx
    e3cd:	jne    e398 <EmitConsensusSequence+0x398>
    e3cf:	mov    eax,DWORD PTR [rsp+0x30]
    e3d3:	mov    ecx,DWORD PTR [rsp+0x10]
    e3d7:	add    r13d,0x1
    e3db:	mov    r15,QWORD PTR [rsp+0x58]
    e3e0:	mov    r12d,DWORD PTR [rsp+0x18]
    e3e5:	add    eax,ecx
    e3e7:	mov    rbx,QWORD PTR [rsp+0x20]
    e3ec:	movsxd r9,eax
    e3ef:	mov    DWORD PTR [rsp+0x30],eax
    e3f3:	mov    rax,QWORD PTR [rsp+0x8]
    e3f8:	lea    r12d,[r12+rcx*1+0x2]
    e3fd:	add    rbx,0x4
    e401:	lea    r10,[rax+r9*1+0x1]
    e406:	mov    eax,DWORD PTR [r15+0x88]
    e40d:	cmp    r13d,eax
    e410:	jle    e2cf <EmitConsensusSequence+0x2cf>
    e416:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e420:	lea    r13d,[r12+0x1]
    e425:	lea    ebp,[r12+0x2]
    e42a:	mov    rdi,QWORD PTR [rsp+0x68]
    e42f:	xor    r8d,r8d
    e432:	xor    ecx,ecx
    e434:	mov    edx,0x7
    e439:	mov    esi,r12d
    e43c:	mov    QWORD PTR [rsp+0x10],r10
    e441:	call   20b30 <TraceSet>
    e446:	mov    rdi,QWORD PTR [rsp+0x68]
    e44b:	xor    r8d,r8d
    e44e:	xor    ecx,ecx
    e450:	mov    edx,0x8
    e455:	mov    esi,r13d
    e458:	call   20b30 <TraceSet>
    e45d:	mov    rdi,QWORD PTR [rsp+0x68]
    e462:	xor    r8d,r8d
    e465:	xor    ecx,ecx
    e467:	mov    edx,0x9
    e46c:	mov    esi,ebp
    e46e:	call   20b30 <TraceSet>
    e473:	mov    eax,DWORD PTR [rip+0x53e23]        # 6229c <Alphabet_iupac>
    e479:	mov    r10,QWORD PTR [rsp+0x10]
    e47e:	mov    BYTE PTR [r10],al
    e481:	mov    rdi,QWORD PTR [rsp+0x70]
    e486:	call   3460 <free@plt>
    e48b:	mov    rdi,QWORD PTR [rsp+0x78]
    e490:	call   3460 <free@plt>
    e495:	mov    rdi,QWORD PTR [rsp+0x80]
    e49d:	call   3460 <free@plt>
    e4a2:	mov    rax,QWORD PTR [rsp+0x38]
    e4a7:	test   rax,rax
    e4aa:	je     e518 <EmitConsensusSequence+0x518>
    e4ac:	mov    rsi,QWORD PTR [rsp+0x28]
    e4b1:	mov    QWORD PTR [rax],rsi
    e4b4:	mov    rax,QWORD PTR [rsp+0x40]
    e4b9:	test   rax,rax
    e4bc:	je     e530 <EmitConsensusSequence+0x530>
    e4be:	mov    rcx,QWORD PTR [rsp+0x8]
    e4c3:	mov    QWORD PTR [rax],rcx
    e4c6:	mov    rax,QWORD PTR [rsp+0x48]
    e4cb:	test   rax,rax
    e4ce:	je     e4d6 <EmitConsensusSequence+0x4d6>
    e4d0:	mov    esi,DWORD PTR [rsp+0x30]
    e4d4:	mov    DWORD PTR [rax],esi
    e4d6:	mov    rax,QWORD PTR [rsp+0x50]
    e4db:	mov    rdi,QWORD PTR [rsp+0x68]
    e4e0:	test   rax,rax
    e4e3:	je     e540 <EmitConsensusSequence+0x540>
    e4e5:	mov    QWORD PTR [rax],rdi
    e4e8:	mov    rax,QWORD PTR [rsp+0x88]
    e4f0:	xor    rax,QWORD PTR fs:0x28
    e4f9:	jne    e597 <EmitConsensusSequence+0x597>
    e4ff:	add    rsp,0x98
    e506:	pop    rbx
    e507:	pop    rbp
    e508:	pop    r12
    e50a:	pop    r13
    e50c:	pop    r14
    e50e:	pop    r15
    e510:	ret    
    e511:	nop    DWORD PTR [rax+0x0]
    e518:	mov    rdi,QWORD PTR [rsp+0x28]
    e51d:	call   3460 <free@plt>
    e522:	mov    rax,QWORD PTR [rsp+0x40]
    e527:	test   rax,rax
    e52a:	jne    e4be <EmitConsensusSequence+0x4be>
    e52c:	nop    DWORD PTR [rax+0x0]
    e530:	mov    rdi,QWORD PTR [rsp+0x8]
    e535:	call   3460 <free@plt>
    e53a:	jmp    e4c6 <EmitConsensusSequence+0x4c6>
    e53c:	nop    DWORD PTR [rax+0x0]
    e540:	call   20af0 <P7FreeTrace>
    e545:	jmp    e4e8 <EmitConsensusSequence+0x4e8>
    e547:	nop    WORD PTR [rax+rax*1+0x0]
    e550:	mov    r12d,0x1
    e556:	mov    r14d,0x3
    e55c:	mov    edi,0x6
    e561:	jmp    e127 <EmitConsensusSequence+0x127>
    e566:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e570:	mov    rax,QWORD PTR [rsp+0x8]
    e575:	mov    DWORD PTR [rsp+0x30],0x0
    e57d:	mov    ebp,0x5
    e582:	mov    r13d,0x4
    e588:	mov    r12d,0x3
    e58e:	lea    r10,[rax+0x1]
    e592:	jmp    e42a <EmitConsensusSequence+0x42a>
    e597:	call   3570 <__stack_chk_fail@plt>
    e59c:	nop    DWORD PTR [rax+0x0]

000000000000e5a0 <WriteProfile>:
    e5a0:	endbr64 
    e5a4:	push   r15
    e5a6:	mov    r15,rsi
    e5a9:	mov    esi,0x1
    e5ae:	push   r14
    e5b0:	push   r13
    e5b2:	push   r12
    e5b4:	mov    r12,rdi
    e5b7:	mov    rdi,r15
    e5ba:	push   rbp
    e5bb:	push   rbx
    e5bc:	mov    ebx,edx
    e5be:	sub    rsp,0x18
    e5c2:	mov    DWORD PTR [rsp+0x8],edx
    e5c6:	call   1ca40 <P7Logoddsify>
    e5cb:	cmp    DWORD PTR [r15+0x88],0x3e8
    e5d6:	jle    e5e2 <WriteProfile+0x42>
    e5d8:	mov    eax,ebx
    e5da:	test   ebx,ebx
    e5dc:	je     ec4f <WriteProfile+0x6af>
    e5e2:	mov    eax,DWORD PTR [rip+0x53a98]        # 62080 <Alphabet_type>
    e5e8:	cmp    eax,0x3
    e5eb:	je     ec31 <WriteProfile+0x691>
    e5f1:	cmp    eax,0x2
    e5f4:	je     ebeb <WriteProfile+0x64b>
    e5fa:	lea    rdi,[rip+0x2f22f]        # 3d830 <_IO_stdin_used+0x830>
    e601:	xor    eax,eax
    e603:	call   317f0 <Die>
    e608:	mov    eax,DWORD PTR [rip+0x53a72]        # 62080 <Alphabet_type>
    e60e:	cmp    eax,0x3
    e611:	je     ec13 <WriteProfile+0x673>
    e617:	cmp    eax,0x2
    e61a:	je     ec63 <WriteProfile+0x6c3>
    e620:	mov    eax,DWORD PTR [r15+0x1c8]
    e627:	lea    rcx,[rip+0x32e02]        # 41430 <gki_primes+0x9b0>
    e62e:	test   al,0x2
    e630:	je     e636 <WriteProfile+0x96>
    e632:	mov    rcx,QWORD PTR [r15+0x10]
    e636:	lea    rdx,[rip+0x32df3]        # 41430 <gki_primes+0x9b0>
    e63d:	test   ah,0x2
    e640:	je     e646 <WriteProfile+0xa6>
    e642:	mov    rdx,QWORD PTR [r15+0x8]
    e646:	push   rcx
    e647:	mov    r9,QWORD PTR [r15]
    e64a:	lea    rcx,[rip+0x2f124]        # 3d775 <_IO_stdin_used+0x775>
    e651:	mov    esi,0x1
    e656:	push   rdx
    e657:	mov    r8d,DWORD PTR [r15+0x88]
    e65e:	mov    rdi,r12
    e661:	xor    eax,eax
    e663:	lea    rdx,[rip+0x2f1fe]        # 3d868 <_IO_stdin_used+0x868>
    e66a:	call   37c0 <__fprintf_chk@plt>
    e66f:	pop    rbp
    e670:	pop    r13
    e672:	lea    rcx,[rip+0x2f0fc]        # 3d775 <_IO_stdin_used+0x775>
    e679:	mov    r14d,DWORD PTR [rsp+0x8]
    e67e:	mov    esi,0x1
    e683:	mov    rdi,r12
    e686:	xor    eax,eax
    e688:	lea    rdx,[rip+0x2f201]        # 3d890 <_IO_stdin_used+0x890>
    e68f:	test   r14d,r14d
    e692:	je     e7d1 <WriteProfile+0x231>
    e698:	call   37c0 <__fprintf_chk@plt>
    e69d:	mov    rcx,r12
    e6a0:	mov    edx,0x29
    e6a5:	mov    esi,0x1
    e6aa:	lea    rdi,[rip+0x2f227]        # 3d8d8 <_IO_stdin_used+0x8d8>
    e6b1:	call   37b0 <fwrite@plt>
    e6b6:	mov    rcx,r12
    e6b9:	mov    edx,0x50
    e6be:	mov    esi,0x1
    e6c3:	lea    rdi,[rip+0x2f23e]        # 3d908 <_IO_stdin_used+0x908>
    e6ca:	call   37b0 <fwrite@plt>
    e6cf:	mov    rcx,r12
    e6d2:	mov    edx,0x58
    e6d7:	mov    esi,0x1
    e6dc:	lea    rdi,[rip+0x2f27d]        # 3d960 <_IO_stdin_used+0x960>
    e6e3:	call   37b0 <fwrite@plt>
    e6e8:	mov    rcx,r12
    e6eb:	mov    edx,0x3f
    e6f0:	mov    esi,0x1
    e6f5:	lea    rdi,[rip+0x2f2c4]        # 3d9c0 <_IO_stdin_used+0x9c0>
    e6fc:	call   37b0 <fwrite@plt>
    e701:	mov    rcx,r12
    e704:	mov    edx,0x4b
    e709:	mov    esi,0x1
    e70e:	lea    rdi,[rip+0x2f2eb]        # 3da00 <_IO_stdin_used+0xa00>
    e715:	call   37b0 <fwrite@plt>
    e71a:	mov    rcx,r12
    e71d:	mov    edx,0x49
    e722:	mov    esi,0x1
    e727:	lea    rdi,[rip+0x2f322]        # 3da50 <_IO_stdin_used+0xa50>
    e72e:	call   37b0 <fwrite@plt>
    e733:	mov    rcx,r12
    e736:	mov    edx,0x4e
    e73b:	mov    esi,0x1
    e740:	lea    rdi,[rip+0x2f359]        # 3daa0 <_IO_stdin_used+0xaa0>
    e747:	call   37b0 <fwrite@plt>
    e74c:	mov    rcx,r12
    e74f:	mov    edx,0x4
    e754:	mov    esi,0x1
    e759:	lea    rdi,[rip+0x2f019]        # 3d779 <_IO_stdin_used+0x779>
    e760:	call   37b0 <fwrite@plt>
    e765:	mov    ebx,DWORD PTR [rip+0x53b31]        # 6229c <Alphabet_iupac>
    e76b:	test   ebx,ebx
    e76d:	jle    e7b3 <WriteProfile+0x213>
    e76f:	lea    rbp,[rip+0x53b0a]        # 62280 <Alphabet>
    e776:	lea    r13,[rip+0x2f01d]        # 3d79a <_IO_stdin_used+0x79a>
    e77d:	mov    rbx,rbp
    e780:	movsx  ecx,BYTE PTR [rbx]
    e783:	xor    eax,eax
    e785:	add    rbx,0x1
    e789:	mov    rdx,r13
    e78c:	mov    esi,0x1
    e791:	mov    rdi,r12
    e794:	call   37c0 <__fprintf_chk@plt>
    e799:	mov    eax,ebx
    e79b:	sub    eax,ebp
    e79d:	cmp    DWORD PTR [rip+0x53af9],eax        # 6229c <Alphabet_iupac>
    e7a3:	jg     e780 <WriteProfile+0x1e0>
    e7a5:	mov    r10d,DWORD PTR [rsp+0x8]
    e7aa:	test   r10d,r10d
    e7ad:	je     e895 <WriteProfile+0x2f5>
    e7b3:	mov    rcx,r12
    e7b6:	mov    edx,0x1b
    e7bb:	mov    esi,0x1
    e7c0:	lea    rdi,[rip+0x2efb7]        # 3d77e <_IO_stdin_used+0x77e>
    e7c7:	call   37b0 <fwrite@plt>
    e7cc:	jmp    e8ae <WriteProfile+0x30e>
    e7d1:	call   37c0 <__fprintf_chk@plt>
    e7d6:	mov    rcx,r12
    e7d9:	mov    edx,0x43
    e7de:	mov    esi,0x1
    e7e3:	lea    rdi,[rip+0x2f306]        # 3daf0 <_IO_stdin_used+0xaf0>
    e7ea:	call   37b0 <fwrite@plt>
    e7ef:	mov    rcx,r12
    e7f2:	mov    edx,0x3c
    e7f7:	mov    esi,0x1
    e7fc:	lea    rdi,[rip+0x2f335]        # 3db38 <_IO_stdin_used+0xb38>
    e803:	call   37b0 <fwrite@plt>
    e808:	mov    rcx,r12
    e80b:	mov    edx,0x3f
    e810:	mov    esi,0x1
    e815:	lea    rdi,[rip+0x2f1a4]        # 3d9c0 <_IO_stdin_used+0x9c0>
    e81c:	call   37b0 <fwrite@plt>
    e821:	mov    rcx,r12
    e824:	mov    edx,0x4b
    e829:	mov    esi,0x1
    e82e:	lea    rdi,[rip+0x2f1cb]        # 3da00 <_IO_stdin_used+0xa00>
    e835:	call   37b0 <fwrite@plt>
    e83a:	mov    rcx,r12
    e83d:	mov    edx,0x49
    e842:	mov    esi,0x1
    e847:	lea    rdi,[rip+0x2f202]        # 3da50 <_IO_stdin_used+0xa50>
    e84e:	call   37b0 <fwrite@plt>
    e853:	mov    rcx,r12
    e856:	mov    edx,0x4e
    e85b:	mov    esi,0x1
    e860:	lea    rdi,[rip+0x2f239]        # 3daa0 <_IO_stdin_used+0xaa0>
    e867:	call   37b0 <fwrite@plt>
    e86c:	mov    rcx,r12
    e86f:	mov    edx,0x4
    e874:	mov    esi,0x1
    e879:	lea    rdi,[rip+0x2eef9]        # 3d779 <_IO_stdin_used+0x779>
    e880:	call   37b0 <fwrite@plt>
    e885:	mov    r11d,DWORD PTR [rip+0x53a10]        # 6229c <Alphabet_iupac>
    e88c:	test   r11d,r11d
    e88f:	jg     e76f <WriteProfile+0x1cf>
    e895:	mov    rcx,r12
    e898:	mov    edx,0xf
    e89d:	mov    esi,0x1
    e8a2:	lea    rdi,[rip+0x2eefe]        # 3d7a7 <_IO_stdin_used+0x7a7>
    e8a9:	call   37b0 <fwrite@plt>
    e8ae:	mov    r9d,DWORD PTR [r15+0x88]
    e8b5:	mov    ebx,0x4
    e8ba:	mov    ebp,0x1
    e8bf:	lea    r13,[rip+0x2f7ec]        # 3e0b2 <_IO_stdin_used+0x10b2>
    e8c6:	test   r9d,r9d
    e8c9:	jle    eaa2 <WriteProfile+0x502>
    e8cf:	nop
    e8d0:	mov    rax,QWORD PTR [r15+0x98]
    e8d7:	mov    esi,DWORD PTR [rip+0x53a23]        # 62300 <Alphabet_size>
    e8dd:	xor    r14d,r14d
    e8e0:	mov    rdi,QWORD PTR [rax+rbx*2]
    e8e4:	call   3b110 <FArgMax>
    e8e9:	lea    rdi,[rip+0x53990]        # 62280 <Alphabet>
    e8f0:	mov    esi,0x1
    e8f5:	lea    rdx,[rip+0x2eec1]        # 3d7bd <_IO_stdin_used+0x7bd>
    e8fc:	cdqe   
    e8fe:	movsx  ecx,BYTE PTR [rdi+rax*1]
    e902:	mov    rdi,r12
    e905:	xor    eax,eax
    e907:	call   37c0 <__fprintf_chk@plt>
    e90c:	mov    edi,DWORD PTR [rip+0x5398a]        # 6229c <Alphabet_iupac>
    e912:	test   edi,edi
    e914:	jle    e97a <WriteProfile+0x3da>
    e916:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e920:	mov    rax,QWORD PTR [r15+0x140]
    e927:	mov    rax,QWORD PTR [rax+r14*8]
    e92b:	mov    eax,DWORD PTR [rax+rbx*1]
    e92e:	cmp    DWORD PTR [r15+0x88],ebp
    e935:	jle    e944 <WriteProfile+0x3a4>
    e937:	mov    rdx,QWORD PTR [r15+0x138]
    e93e:	mov    rdx,QWORD PTR [rdx]
    e941:	add    eax,DWORD PTR [rdx+rbx*1]
    e944:	imul   eax,eax,0x64
    e947:	pxor   xmm0,xmm0
    e94b:	mov    rdx,r13
    e94e:	mov    esi,0x1
    e953:	mov    rdi,r12
    e956:	add    r14,0x1
    e95a:	cvtsi2sd xmm0,eax
    e95e:	divsd  xmm0,QWORD PTR [rip+0x2ea1a]        # 3d380 <_IO_stdin_used+0x380>
    e966:	xor    eax,eax
    e968:	cvttsd2si ecx,xmm0
    e96c:	call   37c0 <__fprintf_chk@plt>
    e971:	cmp    DWORD PTR [rip+0x53924],r14d        # 6229c <Alphabet_iupac>
    e978:	jg     e920 <WriteProfile+0x380>
    e97a:	cmp    ebp,0x1
    e97d:	je     eba8 <WriteProfile+0x608>
    e983:	mov    rdx,QWORD PTR [r15+0x138]
    e98a:	pxor   xmm0,xmm0
    e98e:	mov    rcx,QWORD PTR [rdx]
    e991:	mov    rax,QWORD PTR [rdx+0x20]
    e995:	mov    rdi,QWORD PTR [rdx+0x8]
    e999:	mov    esi,DWORD PTR [rcx+rbx*1-0x4]
    e99d:	mov    rcx,QWORD PTR [rdx+0x18]
    e9a1:	mov    eax,DWORD PTR [rax+rbx*1-0x4]
    e9a5:	mov    ecx,DWORD PTR [rcx+rbx*1-0x4]
    e9a9:	add    ecx,DWORD PTR [rdi+rbx*1-0x4]
    e9ad:	sub    ecx,esi
    e9af:	mov    edi,eax
    e9b1:	sub    edi,ecx
    e9b3:	imul   eax,eax,0xffffff9c
    e9b6:	imul   ecx,edi,0x64
    e9b9:	mov    rdi,QWORD PTR [rdx+0x28]
    e9bd:	cvtsi2sd xmm0,ecx
    e9c1:	divsd  xmm0,QWORD PTR [rip+0x2f1af]        # 3db78 <_IO_stdin_used+0xb78>
    e9c9:	cvttsd2si ecx,xmm0
    e9cd:	pxor   xmm0,xmm0
    e9d1:	cvtsi2sd xmm0,eax
    e9d5:	mov    rax,QWORD PTR [rdx+0x30]
    e9d9:	mov    rdx,QWORD PTR [rdx+0x10]
    e9dd:	divsd  xmm0,QWORD PTR [rip+0x2e99b]        # 3d380 <_IO_stdin_used+0x380>
    e9e5:	cvttsd2si r8d,xmm0
    e9ea:	pxor   xmm0,xmm0
    e9ee:	mov    eax,DWORD PTR [rax+rbx*1-0x4]
    e9f2:	mov    edx,DWORD PTR [rdx+rbx*1-0x4]
    e9f6:	add    edx,DWORD PTR [rdi+rbx*1-0x4]
    e9fa:	sub    edx,esi
    e9fc:	mov    edi,eax
    e9fe:	sub    edi,edx
    ea00:	imul   eax,eax,0xffffff9c
    ea03:	imul   edx,edi,0x64
    ea06:	cvtsi2sd xmm0,edx
    ea0a:	divsd  xmm0,QWORD PTR [rip+0x2f166]        # 3db78 <_IO_stdin_used+0xb78>
    ea12:	cvttsd2si r9d,xmm0
    ea17:	pxor   xmm0,xmm0
    ea1b:	cvtsi2sd xmm0,eax
    ea1f:	divsd  xmm0,QWORD PTR [rip+0x2e959]        # 3d380 <_IO_stdin_used+0x380>
    ea27:	cvttsd2si eax,xmm0
    ea2b:	mov    esi,DWORD PTR [rsp+0x8]
    ea2f:	test   esi,esi
    ea31:	je     ea80 <WriteProfile+0x4e0>
    ea33:	sub    rsp,0x8
    ea37:	lea    rdx,[rip+0x2ed85]        # 3d7c3 <_IO_stdin_used+0x7c3>
    ea3e:	mov    esi,0x1
    ea43:	mov    rdi,r12
    ea46:	push   rax
    ea47:	xor    eax,eax
    ea49:	call   37c0 <__fprintf_chk@plt>
    ea4e:	pop    rax
    ea4f:	lea    ecx,[rbp+0x1]
    ea52:	pop    rdx
    ea53:	cmp    DWORD PTR [r15+0x88],ecx
    ea5a:	jl     eaa2 <WriteProfile+0x502>
    ea5c:	imul   ebp,ebp,0xcccccccd
    ea62:	ror    ebp,1
    ea64:	cmp    ebp,0x19999999
    ea6a:	ja     ea75 <WriteProfile+0x4d5>
    ea6c:	cmp    ecx,0xa
    ea6f:	jg     ebc8 <WriteProfile+0x628>
    ea75:	add    rbx,0x4
    ea79:	mov    ebp,ecx
    ea7b:	jmp    e8d0 <WriteProfile+0x330>
    ea80:	lea    rdx,[rip+0x2ed44]        # 3d7cb <_IO_stdin_used+0x7cb>
    ea87:	mov    esi,0x1
    ea8c:	mov    rdi,r12
    ea8f:	xor    eax,eax
    ea91:	call   37c0 <__fprintf_chk@plt>
    ea96:	lea    ecx,[rbp+0x1]
    ea99:	cmp    DWORD PTR [r15+0x88],ecx
    eaa0:	jge    ea5c <WriteProfile+0x4bc>
    eaa2:	mov    rcx,r12
    eaa5:	mov    edx,0x4
    eaaa:	mov    esi,0x1
    eaaf:	xor    ebp,ebp
    eab1:	lea    rdi,[rip+0x2ecea]        # 3d7a2 <_IO_stdin_used+0x7a2>
    eab8:	lea    rbx,[rip+0x2f5f3]        # 3e0b2 <_IO_stdin_used+0x10b2>
    eabf:	xor    r13d,r13d
    eac2:	call   37b0 <fwrite@plt>
    eac7:	mov    r8d,DWORD PTR [rip+0x53832]        # 62300 <Alphabet_size>
    eace:	test   r8d,r8d
    ead1:	jle    eb55 <WriteProfile+0x5b5>
    ead7:	nop    WORD PTR [rax+rax*1+0x0]
    eae0:	mov    edx,DWORD PTR [r15+0x88]
    eae7:	pxor   xmm0,xmm0
    eaeb:	test   edx,edx
    eaed:	jle    eb21 <WriteProfile+0x581>
    eaef:	mov    rcx,QWORD PTR [r15+0x98]
    eaf6:	sub    edx,0x1
    eaf9:	lea    rsi,[rbp*4+0x0]
    eb01:	pxor   xmm0,xmm0
    eb05:	lea    rax,[rcx+0x8]
    eb09:	lea    rcx,[rcx+rdx*8+0x10]
    eb0e:	xchg   ax,ax
    eb10:	mov    rdx,QWORD PTR [rax]
    eb13:	add    rax,0x8
    eb17:	addss  xmm0,DWORD PTR [rdx+rsi*1]
    eb1c:	cmp    rax,rcx
    eb1f:	jne    eb10 <WriteProfile+0x570>
    eb21:	pxor   xmm1,xmm1
    eb25:	xor    eax,eax
    eb27:	mov    rdx,rbx
    eb2a:	mov    esi,0x1
    eb2f:	cvtsi2ss xmm1,DWORD PTR [r15+0x38]
    eb35:	mov    rdi,r12
    eb38:	lea    r13d,[rbp+0x1]
    eb3c:	add    rbp,0x1
    eb40:	mulss  xmm0,xmm1
    eb44:	cvttss2si ecx,xmm0
    eb48:	call   37c0 <__fprintf_chk@plt>
    eb4d:	cmp    DWORD PTR [rip+0x537ad],ebp        # 62300 <Alphabet_size>
    eb53:	jg     eae0 <WriteProfile+0x540>
    eb55:	cmp    DWORD PTR [rip+0x53740],r13d        # 6229c <Alphabet_iupac>
    eb5c:	lea    rbx,[rip+0x2f54f]        # 3e0b2 <_IO_stdin_used+0x10b2>
    eb63:	jle    eb89 <WriteProfile+0x5e9>
    eb65:	nop    DWORD PTR [rax]
    eb68:	xor    ecx,ecx
    eb6a:	xor    eax,eax
    eb6c:	mov    rdx,rbx
    eb6f:	mov    esi,0x1
    eb74:	mov    rdi,r12
    eb77:	add    r13d,0x1
    eb7b:	call   37c0 <__fprintf_chk@plt>
    eb80:	cmp    DWORD PTR [rip+0x53715],r13d        # 6229c <Alphabet_iupac>
    eb87:	jg     eb68 <WriteProfile+0x5c8>
    eb89:	add    rsp,0x18
    eb8d:	mov    rsi,r12
    eb90:	mov    edi,0xa
    eb95:	pop    rbx
    eb96:	pop    rbp
    eb97:	pop    r12
    eb99:	pop    r13
    eb9b:	pop    r14
    eb9d:	pop    r15
    eb9f:	jmp    3600 <fputc@plt>
    eba4:	nop    DWORD PTR [rax+0x0]
    eba8:	mov    r9d,0x64
    ebae:	mov    r8d,0x64
    ebb4:	mov    ecx,0x64
    ebb9:	mov    eax,0x64
    ebbe:	jmp    ea2b <WriteProfile+0x48b>
    ebc3:	nop    DWORD PTR [rax+rax*1+0x0]
    ebc8:	lea    rdx,[rip+0x2ebe8]        # 3d7b7 <_IO_stdin_used+0x7b7>
    ebcf:	mov    rdi,r12
    ebd2:	xor    eax,eax
    ebd4:	mov    DWORD PTR [rsp+0xc],ecx
    ebd8:	mov    esi,0x1
    ebdd:	call   37c0 <__fprintf_chk@plt>
    ebe2:	mov    ecx,DWORD PTR [rsp+0xc]
    ebe6:	jmp    ea75 <WriteProfile+0x4d5>
    ebeb:	mov    rcx,r12
    ebee:	mov    edx,0x11
    ebf3:	mov    esi,0x1
    ebf8:	lea    rdi,[rip+0x2eb4b]        # 3d74a <_IO_stdin_used+0x74a>
    ebff:	call   37b0 <fwrite@plt>
    ec04:	mov    eax,DWORD PTR [rip+0x53476]        # 62080 <Alphabet_type>
    ec0a:	cmp    eax,0x3
    ec0d:	jne    e617 <WriteProfile+0x77>
    ec13:	mov    rcx,r12
    ec16:	mov    edx,0xa
    ec1b:	mov    esi,0x1
    ec20:	lea    rdi,[rip+0x2eb35]        # 3d75c <_IO_stdin_used+0x75c>
    ec27:	call   37b0 <fwrite@plt>
    ec2c:	jmp    e620 <WriteProfile+0x80>
    ec31:	mov    rcx,r12
    ec34:	mov    edx,0x11
    ec39:	mov    esi,0x1
    ec3e:	lea    rdi,[rip+0x2eaf3]        # 3d738 <_IO_stdin_used+0x738>
    ec45:	call   37b0 <fwrite@plt>
    ec4a:	jmp    e608 <WriteProfile+0x68>
    ec4f:	mov    rsi,QWORD PTR [r15]
    ec52:	lea    rdi,[rip+0x2eb7f]        # 3d7d8 <_IO_stdin_used+0x7d8>
    ec59:	call   318f0 <Warn>
    ec5e:	jmp    e5e2 <WriteProfile+0x42>
    ec63:	mov    rcx,r12
    ec66:	mov    edx,0xd
    ec6b:	mov    esi,0x1
    ec70:	lea    rdi,[rip+0x2eaf0]        # 3d767 <_IO_stdin_used+0x767>
    ec77:	call   37b0 <fwrite@plt>
    ec7c:	jmp    e620 <WriteProfile+0x80>
    ec81:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ec8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ec90 <P7Viterbi>:
    ec90:	endbr64 
    ec94:	push   r15
    ec96:	push   r14
    ec98:	mov    r14,rdx
    ec9b:	push   r13
    ec9d:	push   r12
    ec9f:	push   rbp
    eca0:	push   rbx
    eca1:	sub    rsp,0xe8
    eca8:	mov    edx,DWORD PTR [rdx+0x88]
    ecae:	mov    QWORD PTR [rsp+0x98],rdi
    ecb6:	mov    rdi,rcx
    ecb9:	mov    QWORD PTR [rsp+0xa8],rcx
    ecc1:	lea    rcx,[rsp+0xb8]
    ecc9:	sub    rsp,0x8
    eccd:	mov    DWORD PTR [rsp+0x9c],esi
    ecd4:	mov    QWORD PTR [rsp+0xa8],r8
    ecdc:	mov    rax,QWORD PTR fs:0x28
    ece5:	mov    QWORD PTR [rsp+0xe0],rax
    eced:	xor    eax,eax
    ecef:	lea    rax,[rsp+0xd8]
    ecf7:	push   rax
    ecf8:	lea    r9,[rsp+0xd8]
    ed00:	lea    r8,[rsp+0xd0]
    ed08:	call   5550 <ResizePlan7Matrix>
    ed0d:	mov    rax,QWORD PTR [rsp+0xc8]
    ed15:	mov    rbx,QWORD PTR [rax]
    ed18:	mov    QWORD PTR [rsp+0x68],rax
    ed1d:	mov    DWORD PTR [rbx+0x10],0x0
    ed24:	mov    eax,DWORD PTR [r14+0x150]
    ed2b:	mov    DWORD PTR [rbx+0xc],0xc521974f
    ed32:	mov    DWORD PTR [rbx],eax
    ed34:	movabs rax,0xc521974fc521974f
    ed3e:	mov    QWORD PTR [rbx+0x4],rax
    ed42:	mov    eax,DWORD PTR [r14+0x88]
    ed49:	mov    QWORD PTR [rsp+0x58],rbx
    ed4e:	mov    DWORD PTR [rsp+0x1c],eax
    ed52:	pop    rcx
    ed53:	pop    rsi
    ed54:	test   eax,eax
    ed56:	js     eda8 <P7Viterbi+0x118>
    ed58:	mov    rax,QWORD PTR [rsp+0xd0]
    ed60:	mov    rsi,QWORD PTR [rax]
    ed63:	mov    rax,QWORD PTR [rsp+0xc8]
    ed6b:	mov    rcx,QWORD PTR [rax]
    ed6e:	mov    rax,QWORD PTR [rsp+0xc0]
    ed76:	mov    rdx,QWORD PTR [rax]
    ed79:	xor    eax,eax
    ed7b:	nop    DWORD PTR [rax+rax*1+0x0]
    ed80:	mov    DWORD PTR [rsi+rax*4],0xc521974f
    ed87:	mov    DWORD PTR [rcx+rax*4],0xc521974f
    ed8e:	mov    DWORD PTR [rdx+rax*4],0xc521974f
    ed95:	mov    edi,DWORD PTR [r14+0x88]
    ed9c:	add    rax,0x1
    eda0:	cmp    edi,eax
    eda2:	jge    ed80 <P7Viterbi+0xf0>
    eda4:	mov    DWORD PTR [rsp+0xc],edi
    eda8:	mov    rax,QWORD PTR [r14+0x138]
    edaf:	mov    rdi,QWORD PTR [rax+0x8]
    edb3:	mov    rbp,QWORD PTR [rax]
    edb6:	mov    r12,QWORD PTR [rax+0x18]
    edba:	mov    r13,QWORD PTR [rax+0x28]
    edbe:	mov    rbx,QWORD PTR [rax+0x10]
    edc2:	mov    r11,QWORD PTR [rax+0x30]
    edc6:	mov    QWORD PTR [rsp+0x40],rdi
    edcb:	mov    rax,QWORD PTR [rax+0x20]
    edcf:	mov    QWORD PTR [rsp+0x88],rax
    edd7:	mov    rax,QWORD PTR [r14+0x170]
    edde:	mov    QWORD PTR [rsp+0x20],rax
    ede3:	mov    eax,DWORD PTR [rsp+0x94]
    edea:	test   eax,eax
    edec:	jle    f120 <P7Viterbi+0x490>
    edf2:	sub    eax,0x1
    edf5:	mov    rdi,QWORD PTR [rsp+0x98]
    edfd:	mov    QWORD PTR [rsp+0x50],0x0
    ee06:	shl    rax,0x3
    ee0a:	mov    QWORD PTR [rsp+0x80],rax
    ee12:	mov    eax,DWORD PTR [rsp+0xc]
    ee16:	add    rdi,0x1
    ee1a:	mov    QWORD PTR [rsp+0x60],rdi
    ee1f:	mov    edi,0xc521974f
    ee24:	sub    eax,0x1
    ee27:	add    rax,0x2
    ee2b:	mov    QWORD PTR [rsp+0x28],rax
    ee30:	mov    r9,QWORD PTR [rsp+0x50]
    ee35:	mov    rcx,QWORD PTR [rsp+0xc0]
    ee3d:	mov    rax,QWORD PTR [rsp+0xc8]
    ee45:	mov    rdx,QWORD PTR [rsp+0xd0]
    ee4d:	lea    rsi,[r9+0x8]
    ee51:	mov    r15,QWORD PTR [rcx+r9*1+0x8]
    ee56:	mov    r10,QWORD PTR [rcx+r9*1]
    ee5a:	mov    r8,QWORD PTR [rax+r9*1+0x8]
    ee5f:	mov    QWORD PTR [rsp+0x68],rsi
    ee64:	mov    rsi,QWORD PTR [rdx+r9*1+0x8]
    ee69:	mov    rdx,QWORD PTR [rdx+r9*1]
    ee6d:	mov    QWORD PTR [rsp+0x70],r15
    ee72:	mov    r9,QWORD PTR [rax+r9*1]
    ee76:	mov    rax,QWORD PTR [rsp+0x48]
    ee7b:	mov    QWORD PTR [rsp+0x10],rdx
    ee80:	mov    rdx,QWORD PTR [r14+0x140]
    ee87:	mov    eax,DWORD PTR [rax]
    ee89:	mov    DWORD PTR [rsp+0x90],eax
    ee90:	mov    rax,QWORD PTR [rsp+0x60]
    ee95:	movsx  rax,BYTE PTR [rax]
    ee99:	mov    rcx,QWORD PTR [rdx+rax*8]
    ee9d:	mov    rdx,QWORD PTR [r14+0x148]
    eea4:	mov    rax,QWORD PTR [rdx+rax*8]
    eea8:	mov    edx,DWORD PTR [rsp+0xc]
    eeac:	mov    QWORD PTR [rsp+0x18],rcx
    eeb1:	lea    rcx,[r15+0x4]
    eeb5:	mov    DWORD PTR [r15],0xc521974f
    eebc:	mov    QWORD PTR [rsp+0x30],rax
    eec1:	mov    eax,0x1
    eec6:	mov    DWORD PTR [rsi],0xc521974f
    eecc:	mov    DWORD PTR [r8],0xc521974f
    eed3:	test   edx,edx
    eed5:	jle    efd8 <P7Viterbi+0x348>
    eedb:	mov    rdx,QWORD PTR [rsp+0x88]
    eee3:	mov    QWORD PTR [rsp+0x78],r14
    eee8:	mov    QWORD PTR [rsp+0x38],rdx
    eeed:	nop    DWORD PTR [rax]
    eef0:	mov    edx,DWORD PTR [rbp+rax*4-0x4]
    eef4:	add    edx,DWORD PTR [r10+rax*4-0x4]
    eef9:	mov    DWORD PTR [rcx],edx
    eefb:	mov    r15d,DWORD PTR [r12+rax*4-0x4]
    ef00:	add    r15d,DWORD PTR [r9+rax*4-0x4]
    ef05:	mov    r14,QWORD PTR [rsp+0x10]
    ef0a:	cmp    r15d,edx
    ef0d:	cmovge edx,r15d
    ef11:	mov    DWORD PTR [rcx],edx
    ef13:	mov    r15d,DWORD PTR [r13+rax*4-0x4]
    ef18:	add    r15d,DWORD PTR [r14+rax*4-0x4]
    ef1d:	mov    r14,QWORD PTR [rsp+0x20]
    ef22:	cmp    r15d,edx
    ef25:	cmovl  r15d,edx
    ef29:	mov    edx,DWORD PTR [rsp+0x90]
    ef30:	mov    DWORD PTR [rcx],r15d
    ef33:	add    edx,DWORD PTR [r14+rax*4]
    ef37:	cmp    edx,r15d
    ef3a:	mov    r14,QWORD PTR [rsp+0x18]
    ef3f:	cmovl  edx,r15d
    ef43:	mov    DWORD PTR [rcx],edx
    ef45:	add    edx,DWORD PTR [r14+rax*4]
    ef49:	cmp    edx,0xc521974f
    ef4f:	cmovl  edx,edi
    ef52:	mov    DWORD PTR [rcx],edx
    ef54:	mov    r15d,DWORD PTR [r11+rax*4-0x4]
    ef59:	add    r15d,DWORD PTR [rsi+rax*4-0x4]
    ef5e:	mov    DWORD PTR [rsi+rax*4],r15d
    ef62:	mov    edx,DWORD PTR [rbx+rax*4-0x4]
    ef66:	add    edx,DWORD PTR [rcx-0x4]
    ef69:	cmp    edx,r15d
    ef6c:	cmovl  edx,r15d
    ef70:	cmp    edx,0xc521974f
    ef76:	cmovl  edx,edi
    ef79:	mov    DWORD PTR [rsi+rax*4],edx
    ef7c:	cmp    DWORD PTR [rsp+0xc],eax
    ef80:	jle    efc0 <P7Viterbi+0x330>
    ef82:	mov    rdx,QWORD PTR [rsp+0x40]
    ef87:	mov    r14,QWORD PTR [rsp+0x30]
    ef8c:	mov    r15d,DWORD PTR [rdx+rax*4]
    ef90:	mov    rdx,QWORD PTR [rsp+0x38]
    ef95:	add    r15d,DWORD PTR [r10+rax*4]
    ef99:	mov    DWORD PTR [r8+rax*4],r15d
    ef9d:	mov    edx,DWORD PTR [rdx+rax*4]
    efa0:	add    edx,DWORD PTR [r9+rax*4]
    efa4:	cmp    edx,r15d
    efa7:	cmovl  edx,r15d
    efab:	mov    DWORD PTR [r8+rax*4],edx
    efaf:	add    edx,DWORD PTR [r14+rax*4]
    efb3:	cmp    edx,0xc521974f
    efb9:	cmovl  edx,edi
    efbc:	mov    DWORD PTR [r8+rax*4],edx
    efc0:	add    rax,0x1
    efc4:	add    rcx,0x4
    efc8:	cmp    QWORD PTR [rsp+0x28],rax
    efcd:	jne    eef0 <P7Viterbi+0x260>
    efd3:	mov    r14,QWORD PTR [rsp+0x78]
    efd8:	mov    rax,QWORD PTR [rsp+0x58]
    efdd:	mov    rsi,QWORD PTR [rsp+0x50]
    efe2:	mov    ecx,0xc521974f
    efe7:	mov    r8,QWORD PTR [rax+rsi*1+0x8]
    efec:	mov    rax,QWORD PTR [rsp+0x48]
    eff1:	mov    DWORD PTR [r8+0x10],0xc521974f
    eff9:	mov    esi,DWORD PTR [r14+0x154]
    f000:	add    esi,DWORD PTR [rax+0x10]
    f003:	cmp    esi,0xc521974f
    f009:	cmovle esi,edi
    f00c:	mov    DWORD PTR [r8+0x10],esi
    f010:	mov    eax,DWORD PTR [r14+0x88]
    f017:	mov    r10,QWORD PTR [r14+0x178]
    f01e:	test   eax,eax
    f020:	jle    f056 <P7Viterbi+0x3c6>
    f022:	lea    r9d,[rax-0x1]
    f026:	mov    r15,QWORD PTR [rsp+0x70]
    f02b:	mov    eax,0x1
    f030:	mov    ecx,0xc521974f
    f035:	add    r9,0x2
    f039:	nop    DWORD PTR [rax+0x0]
    f040:	mov    edx,DWORD PTR [r10+rax*4]
    f044:	add    edx,DWORD PTR [r15+rax*4]
    f048:	cmp    ecx,edx
    f04a:	cmovl  ecx,edx
    f04d:	add    rax,0x1
    f051:	cmp    r9,rax
    f054:	jne    f040 <P7Viterbi+0x3b0>
    f056:	mov    r10,QWORD PTR [rsp+0x48]
    f05b:	mov    DWORD PTR [r8+0xc],0xc521974f
    f063:	mov    DWORD PTR [r8+0x4],ecx
    f067:	mov    eax,DWORD PTR [r14+0x16c]
    f06e:	add    eax,DWORD PTR [r10+0xc]
    f072:	cmp    eax,0xc521974f
    f077:	cmovle eax,edi
    f07a:	mov    DWORD PTR [r8+0xc],eax
    f07e:	mov    edx,DWORD PTR [r14+0x15c]
    f085:	mov    DWORD PTR [r8],0xc521974f
    f08c:	add    edx,ecx
    f08e:	cmp    edx,eax
    f090:	cmovge eax,edx
    f093:	mov    DWORD PTR [r8+0xc],eax
    f097:	add    esi,DWORD PTR [r14+0x150]
    f09e:	cmp    esi,0xc521974f
    f0a4:	cmovle esi,edi
    f0a7:	mov    DWORD PTR [r8],esi
    f0aa:	add    eax,DWORD PTR [r14+0x168]
    f0b1:	cmp    eax,esi
    f0b3:	mov    DWORD PTR [r8+0x8],0xc521974f
    f0bb:	cmovl  eax,esi
    f0be:	mov    DWORD PTR [r8],eax
    f0c1:	mov    eax,DWORD PTR [r14+0x164]
    f0c8:	add    eax,DWORD PTR [r10+0x8]
    f0cc:	cmp    eax,0xc521974f
    f0d1:	cmovle eax,edi
    f0d4:	mov    DWORD PTR [r8+0x8],eax
    f0d8:	add    ecx,DWORD PTR [r14+0x158]
    f0df:	cmp    ecx,eax
    f0e1:	cmovl  ecx,eax
    f0e4:	add    QWORD PTR [rsp+0x60],0x1
    f0ea:	mov    rax,QWORD PTR [rsp+0x50]
    f0ef:	mov    DWORD PTR [r8+0x8],ecx
    f0f3:	cmp    QWORD PTR [rsp+0x80],rax
    f0fb:	je     f120 <P7Viterbi+0x490>
    f0fd:	mov    rsi,QWORD PTR [rsp+0x58]
    f102:	mov    rax,QWORD PTR [rsi+rax*1+0x8]
    f107:	mov    QWORD PTR [rsp+0x48],rax
    f10c:	mov    rax,QWORD PTR [rsp+0x68]
    f111:	mov    QWORD PTR [rsp+0x50],rax
    f116:	jmp    ee30 <P7Viterbi+0x1a0>
    f11b:	nop    DWORD PTR [rax+rax*1+0x0]
    f120:	movsxd rax,DWORD PTR [rsp+0x94]
    f128:	mov    rbx,QWORD PTR [rsp+0x58]
    f12d:	mov    ebp,DWORD PTR [r14+0x160]
    f134:	mov    rdx,rax
    f137:	mov    rax,QWORD PTR [rbx+rax*8]
    f13b:	mov    rbx,QWORD PTR [rsp+0xa0]
    f143:	add    ebp,DWORD PTR [rax+0x8]
    f146:	test   rbx,rbx
    f149:	je     f176 <P7Viterbi+0x4e6>
    f14b:	mov    rcx,QWORD PTR [rsp+0xa8]
    f153:	mov    rsi,QWORD PTR [rsp+0x98]
    f15b:	lea    r8,[rsp+0xb0]
    f163:	mov    rdi,r14
    f166:	call   6110 <P7ViterbiTrace>
    f16b:	mov    rax,QWORD PTR [rsp+0xb0]
    f173:	mov    QWORD PTR [rbx],rax
    f176:	mov    edi,ebp
    f178:	call   17820 <Scorify>
    f17d:	mov    rax,QWORD PTR [rsp+0xd8]
    f185:	xor    rax,QWORD PTR fs:0x28
    f18e:	jne    f1a2 <P7Viterbi+0x512>
    f190:	add    rsp,0xe8
    f197:	pop    rbx
    f198:	pop    rbp
    f199:	pop    r12
    f19b:	pop    r13
    f19d:	pop    r14
    f19f:	pop    r15
    f1a1:	ret    
    f1a2:	call   3570 <__stack_chk_fail@plt>
    f1a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000000f1b0 <AllocHistogram>:
    f1b0:	endbr64 
    f1b4:	push   r15
    f1b6:	mov    r15d,edx
    f1b9:	mov    edx,0x40
    f1be:	push   r14
    f1c0:	mov    r14d,esi
    f1c3:	push   r13
    f1c5:	sub    r14d,edi
    f1c8:	push   r12
    f1ca:	lea    r13d,[r14+0x1]
    f1ce:	push   rbp
    f1cf:	mov    ebp,edi
    f1d1:	lea    rdi,[rip+0x2e9a8]        # 3db80 <_IO_stdin_used+0xb80>
    f1d8:	push   rbx
    f1d9:	mov    ebx,esi
    f1db:	mov    esi,0x44
    f1e0:	sub    rsp,0x8
    f1e4:	call   36810 <sre_malloc>
    f1e9:	movsxd rdx,r13d
    f1ec:	mov    esi,0x4b
    f1f1:	lea    rdi,[rip+0x2e988]        # 3db80 <_IO_stdin_used+0xb80>
    f1f8:	mov    DWORD PTR [rax+0x8],ebp
    f1fb:	mov    r12,rax
    f1fe:	shl    rdx,0x2
    f202:	mov    DWORD PTR [rax+0xc],ebx
    f205:	mov    DWORD PTR [rax+0x1c],0x0
    f20c:	movabs rax,0x7fffffff80000000
    f216:	mov    QWORD PTR [r12+0x10],rax
    f21b:	mov    DWORD PTR [r12+0x18],r15d
    f220:	call   36810 <sre_malloc>
    f225:	mov    QWORD PTR [r12],rax
    f229:	test   r13d,r13d
    f22c:	jle    f247 <AllocHistogram+0x97>
    f22e:	lea    rdx,[rax+r14*4+0x4]
    f233:	nop    DWORD PTR [rax+rax*1+0x0]
    f238:	mov    DWORD PTR [rax],0x0
    f23e:	add    rax,0x4
    f242:	cmp    rax,rdx
    f245:	jne    f238 <AllocHistogram+0x88>
    f247:	mov    QWORD PTR [r12+0x20],0x0
    f250:	mov    rax,r12
    f253:	mov    DWORD PTR [r12+0x28],0x0
    f25c:	add    rsp,0x8
    f260:	pop    rbx
    f261:	pop    rbp
    f262:	pop    r12
    f264:	pop    r13
    f266:	pop    r14
    f268:	pop    r15
    f26a:	ret    
    f26b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000f270 <FreeHistogram>:
    f270:	endbr64 
    f274:	push   rbp
    f275:	mov    rbp,rdi
    f278:	mov    rdi,QWORD PTR [rdi]
    f27b:	call   3460 <free@plt>
    f280:	mov    rdi,QWORD PTR [rbp+0x20]
    f284:	test   rdi,rdi
    f287:	je     f28e <FreeHistogram+0x1e>
    f289:	call   3460 <free@plt>
    f28e:	mov    rdi,rbp
    f291:	pop    rbp
    f292:	jmp    3460 <free@plt>
    f297:	nop    WORD PTR [rax+rax*1+0x0]

000000000000f2a0 <UnfitHistogram>:
    f2a0:	endbr64 
    f2a4:	push   rbx
    f2a5:	mov    rbx,rdi
    f2a8:	mov    rdi,QWORD PTR [rdi+0x20]
    f2ac:	test   rdi,rdi
    f2af:	je     f2b6 <UnfitHistogram+0x16>
    f2b1:	call   3460 <free@plt>
    f2b6:	mov    QWORD PTR [rbx+0x20],0x0
    f2be:	mov    DWORD PTR [rbx+0x28],0x0
    f2c5:	pop    rbx
    f2c6:	ret    
    f2c7:	nop    WORD PTR [rax+rax*1+0x0]

000000000000f2d0 <AddToHistogram>:
    f2d0:	endbr64 
    f2d4:	push   r15
    f2d6:	push   r14
    f2d8:	push   r13
    f2da:	push   r12
    f2dc:	push   rbp
    f2dd:	mov    rbp,rdi
    f2e0:	push   rbx
    f2e1:	sub    rsp,0x18
    f2e5:	mov    eax,DWORD PTR [rdi+0x28]
    f2e8:	test   eax,eax
    f2ea:	jne    f480 <AddToHistogram+0x1b0>
    f2f0:	movss  xmm2,DWORD PTR [rip+0x2eac8]        # 3ddc0 <_IO_stdin_used+0xdc0>
    f2f8:	movss  xmm3,DWORD PTR [rip+0x2ea98]        # 3dd98 <_IO_stdin_used+0xd98>
    f300:	movaps xmm1,xmm0
    f303:	andps  xmm1,xmm2
    f306:	ucomiss xmm3,xmm1
    f309:	jbe    f337 <AddToHistogram+0x67>
    f30b:	cvttss2si eax,xmm0
    f30f:	pxor   xmm1,xmm1
    f313:	movss  xmm4,DWORD PTR [rip+0x2e081]        # 3d39c <_IO_stdin_used+0x39c>
    f31b:	andnps xmm2,xmm0
    f31e:	cvtsi2ss xmm1,eax
    f322:	movaps xmm3,xmm1
    f325:	cmpnless xmm3,xmm0
    f32a:	movaps xmm0,xmm2
    f32d:	andps  xmm3,xmm4
    f330:	subss  xmm1,xmm3
    f334:	orps   xmm0,xmm1
    f337:	cvttss2si ebx,xmm0
    f33b:	mov    eax,DWORD PTR [rbp+0x8]
    f33e:	mov    r13d,DWORD PTR [rbp+0xc]
    f342:	mov    rdx,QWORD PTR [rbp+0x0]
    f346:	cmp    eax,ebx
    f348:	jg     f3f0 <AddToHistogram+0x120>
    f34e:	cmp    ebx,r13d
    f351:	jg     f388 <AddToHistogram+0xb8>
    f353:	mov    esi,ebx
    f355:	sub    esi,eax
    f357:	movsxd rax,esi
    f35a:	add    DWORD PTR [rdx+rax*4],0x1
    f35e:	add    DWORD PTR [rbp+0x1c],0x1
    f362:	cmp    DWORD PTR [rbp+0x14],ebx
    f365:	jle    f36a <AddToHistogram+0x9a>
    f367:	mov    DWORD PTR [rbp+0x14],ebx
    f36a:	cmp    DWORD PTR [rbp+0x10],ebx
    f36d:	jge    f372 <AddToHistogram+0xa2>
    f36f:	mov    DWORD PTR [rbp+0x10],ebx
    f372:	add    rsp,0x18
    f376:	pop    rbx
    f377:	pop    rbp
    f378:	pop    r12
    f37a:	pop    r13
    f37c:	pop    r14
    f37e:	pop    r15
    f380:	ret    
    f381:	nop    DWORD PTR [rax+0x0]
    f388:	mov    r15d,DWORD PTR [rbp+0x18]
    f38c:	mov    ecx,r13d
    f38f:	mov    esi,0x9f
    f394:	lea    rdi,[rip+0x2e7e5]        # 3db80 <_IO_stdin_used+0xb80>
    f39b:	sub    ecx,eax
    f39d:	add    r15d,ebx
    f3a0:	lea    r12d,[rcx+0x1]
    f3a4:	mov    r14d,r15d
    f3a7:	mov    DWORD PTR [rbp+0xc],r15d
    f3ab:	sub    r14d,eax
    f3ae:	lea    ecx,[r14+0x1]
    f3b2:	movsxd rcx,ecx
    f3b5:	shl    rcx,0x2
    f3b9:	call   36860 <sre_realloc>
    f3be:	movsxd rcx,r12d
    f3c1:	mov    QWORD PTR [rbp+0x0],rax
    f3c5:	mov    rdx,rax
    f3c8:	cmp    r15d,r13d
    f3cb:	jle    f3e3 <AddToHistogram+0x113>
    f3cd:	nop    DWORD PTR [rax]
    f3d0:	mov    DWORD PTR [rdx+rcx*4],0x0
    f3d7:	add    rcx,0x1
    f3db:	lea    eax,[rcx-0x1]
    f3de:	cmp    r14d,eax
    f3e1:	jg     f3d0 <AddToHistogram+0x100>
    f3e3:	mov    eax,DWORD PTR [rbp+0x8]
    f3e6:	jmp    f353 <AddToHistogram+0x83>
    f3eb:	nop    DWORD PTR [rax+rax*1+0x0]
    f3f0:	mov    r12d,eax
    f3f3:	sub    r13d,eax
    f3f6:	mov    esi,0x94
    f3fb:	sub    r12d,ebx
    f3fe:	add    r12d,DWORD PTR [rbp+0x18]
    f402:	add    r13d,0x1
    f406:	sub    eax,r12d
    f409:	lea    ecx,[r13+r12*1+0x0]
    f40e:	lea    rdi,[rip+0x2e76b]        # 3db80 <_IO_stdin_used+0xb80>
    f415:	movsxd r13,r13d
    f418:	mov    DWORD PTR [rbp+0x8],eax
    f41b:	movsxd rcx,ecx
    f41e:	shl    rcx,0x2
    f422:	call   36860 <sre_realloc>
    f427:	lea    rdx,[r13*4+0x0]
    f42f:	mov    QWORD PTR [rbp+0x0],rax
    f433:	mov    rsi,rax
    f436:	movsxd rax,r12d
    f439:	lea    rdi,[rsi+rax*4]
    f43d:	call   3740 <memmove@plt>
    f442:	mov    rdx,QWORD PTR [rbp+0x0]
    f446:	test   r12d,r12d
    f449:	jle    f3e3 <AddToHistogram+0x113>
    f44b:	lea    eax,[r12-0x1]
    f450:	mov    rcx,rdx
    f453:	lea    rax,[rdx+rax*4+0x4]
    f458:	nop    DWORD PTR [rax+rax*1+0x0]
    f460:	mov    DWORD PTR [rcx],0x0
    f466:	add    rcx,0x4
    f46a:	cmp    rax,rcx
    f46d:	jne    f460 <AddToHistogram+0x190>
    f46f:	mov    eax,DWORD PTR [rbp+0x8]
    f472:	jmp    f353 <AddToHistogram+0x83>
    f477:	nop    WORD PTR [rax+rax*1+0x0]
    f480:	lea    rdi,[rip+0x2e811]        # 3dc98 <_IO_stdin_used+0xc98>
    f487:	xor    eax,eax
    f489:	movss  DWORD PTR [rsp+0xc],xmm0
    f48f:	call   317f0 <Die>
    f494:	movss  xmm0,DWORD PTR [rsp+0xc]
    f49a:	jmp    f2f0 <AddToHistogram+0x20>
    f49f:	nop

000000000000f4a0 <PrintASCIIHistogram>:
    f4a0:	endbr64 
    f4a4:	push   r15
    f4a6:	push   r14
    f4a8:	mov    r14,rsi
    f4ab:	push   r13
    f4ad:	push   r12
    f4af:	push   rbp
    f4b0:	push   rbx
    f4b1:	sub    rsp,0x88
    f4b8:	mov    r10d,DWORD PTR [rsi+0x14]
    f4bc:	mov    r8d,DWORD PTR [rsi+0x10]
    f4c0:	mov    QWORD PTR [rsp+0x8],rdi
    f4c5:	mov    r9d,DWORD PTR [rsi+0x8]
    f4c9:	mov    ecx,r10d
    f4cc:	mov    edx,r8d
    f4cf:	sub    ecx,r9d
    f4d2:	sub    edx,r9d
    f4d5:	mov    rax,QWORD PTR fs:0x28
    f4de:	mov    QWORD PTR [rsp+0x78],rax
    f4e3:	xor    eax,eax
    f4e5:	cmp    r10d,r8d
    f4e8:	jg     fb0c <PrintASCIIHistogram+0x66c>
    f4ee:	mov    r11,QWORD PTR [rsi]
    f4f1:	movsxd rax,ecx
    f4f4:	xor    esi,esi
    f4f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f500:	mov    edi,DWORD PTR [r11+rax*4]
    f504:	cmp    edi,esi
    f506:	jle    f50e <PrintASCIIHistogram+0x6e>
    f508:	lea    r12d,[r9+rax*1]
    f50c:	mov    esi,edi
    f50e:	add    rax,0x1
    f512:	cmp    edx,eax
    f514:	jge    f500 <PrintASCIIHistogram+0x60>
    f516:	cmp    r10d,r12d
    f519:	jge    fb13 <PrintASCIIHistogram+0x673>
    f51f:	mov    r11,QWORD PTR [r14]
    f522:	movsxd rdi,r9d
    f525:	movsxd rax,r12d
    f528:	neg    rdi
    f52b:	lea    r11,[r11+rdi*4]
    f52f:	xor    edi,edi
    f531:	jmp    f551 <PrintASCIIHistogram+0xb1>
    f533:	nop    DWORD PTR [rax+rax*1+0x0]
    f538:	add    edi,0x1
    f53b:	cmp    edi,0x3
    f53e:	je     f968 <PrintASCIIHistogram+0x4c8>
    f544:	sub    rax,0x1
    f548:	sub    r13d,0x1
    f54c:	cmp    r10d,eax
    f54f:	jge    f56b <PrintASCIIHistogram+0xcb>
    f551:	mov    ebp,DWORD PTR [r11+rax*4]
    f555:	mov    r13d,eax
    f558:	test   ebp,ebp
    f55a:	jle    f538 <PrintASCIIHistogram+0x98>
    f55c:	sub    rax,0x1
    f560:	xor    edi,edi
    f562:	sub    r13d,0x1
    f566:	cmp    r10d,eax
    f569:	jl     f551 <PrintASCIIHistogram+0xb1>
    f56b:	cmp    r12d,r8d
    f56e:	jge    f5bb <PrintASCIIHistogram+0x11b>
    f570:	mov    r11,QWORD PTR [r14]
    f573:	movsxd rdi,r9d
    f576:	movsxd rax,r12d
    f579:	neg    rdi
    f57c:	lea    r11,[r11+rdi*4]
    f580:	xor    edi,edi
    f582:	jmp    f5a1 <PrintASCIIHistogram+0x101>
    f584:	nop    DWORD PTR [rax+0x0]
    f588:	add    edi,0x1
    f58b:	cmp    edi,0x3
    f58e:	je     f930 <PrintASCIIHistogram+0x490>
    f594:	add    rax,0x1
    f598:	add    r12d,0x1
    f59c:	cmp    r8d,eax
    f59f:	jle    f5bb <PrintASCIIHistogram+0x11b>
    f5a1:	mov    ebx,DWORD PTR [r11+rax*4]
    f5a5:	mov    r12d,eax
    f5a8:	test   ebx,ebx
    f5aa:	jle    f588 <PrintASCIIHistogram+0xe8>
    f5ac:	add    rax,0x1
    f5b0:	xor    edi,edi
    f5b2:	add    r12d,0x1
    f5b6:	cmp    r8d,eax
    f5b9:	jg     f5a1 <PrintASCIIHistogram+0x101>
    f5bb:	mov    edi,r13d
    f5be:	sub    edi,r9d
    f5c1:	cmp    r10d,r13d
    f5c4:	jg     f943 <PrintASCIIHistogram+0x4a3>
    f5ca:	mov    r10,QWORD PTR [r14]
    f5cd:	movsxd rax,ecx
    f5d0:	xor    r15d,r15d
    f5d3:	nop    DWORD PTR [rax+rax*1+0x0]
    f5d8:	add    r15d,DWORD PTR [r10+rax*4]
    f5dc:	add    rax,0x1
    f5e0:	cmp    edi,eax
    f5e2:	jge    f5d8 <PrintASCIIHistogram+0x138>
    f5e4:	mov    ecx,r12d
    f5e7:	sub    ecx,r9d
    f5ea:	cmp    r12d,r8d
    f5ed:	jg     f955 <PrintASCIIHistogram+0x4b5>
    f5f3:	mov    rdi,QWORD PTR [r14]
    f5f6:	movsxd rax,edx
    f5f9:	xor    edx,edx
    f5fb:	nop    DWORD PTR [rax+rax*1+0x0]
    f600:	add    edx,DWORD PTR [rdi+rax*4]
    f603:	sub    rax,0x1
    f607:	cmp    ecx,eax
    f609:	jle    f600 <PrintASCIIHistogram+0x160>
    f60b:	mov    DWORD PTR [rsp+0x18],edx
    f60f:	cmp    r15d,esi
    f612:	mov    eax,DWORD PTR [rsp+0x18]
    f616:	lea    r9,[rip+0x31712]        # 40d2f <gki_primes+0x2af>
    f61d:	lea    r8,[rip+0x2e568]        # 3db8c <_IO_stdin_used+0xb8c>
    f624:	cmovge esi,r15d
    f628:	lea    rcx,[rip+0x2e561]        # 3db90 <_IO_stdin_used+0xb90>
    f62f:	lea    rdx,[rip+0x2e69a]        # 3dcd0 <_IO_stdin_used+0xcd0>
    f636:	cmp    esi,eax
    f638:	cmovl  esi,eax
    f63b:	sub    rsp,0x8
    f63f:	sub    esi,0x1
    f642:	movsxd rax,esi
    f645:	sar    esi,0x1f
    f648:	imul   rax,rax,0x22b63cbf
    f64f:	sar    rax,0x23
    f653:	sub    eax,esi
    f655:	mov    esi,0x1
    f65a:	add    eax,0x1
    f65d:	mov    DWORD PTR [rsp+0x1c],eax
    f661:	push   rax
    f662:	mov    rbx,QWORD PTR [rsp+0x18]
    f667:	xor    eax,eax
    f669:	mov    rdi,rbx
    f66c:	call   37c0 <__fprintf_chk@plt>
    f671:	mov    rdi,rbx
    f674:	mov    esi,0x1
    f679:	xor    eax,eax
    f67b:	lea    r9,[rip+0x2e516]        # 3db98 <_IO_stdin_used+0xb98>
    f682:	lea    rcx,[rip+0x2e50d]        # 3db96 <_IO_stdin_used+0xb96>
    f689:	lea    rdx,[rip+0x2e50c]        # 3db9c <_IO_stdin_used+0xb9c>
    f690:	mov    r8,r9
    f693:	call   37c0 <__fprintf_chk@plt>
    f698:	mov    eax,0xa
    f69d:	mov    ebp,DWORD PTR [r14+0x14]
    f6a1:	mov    WORD PTR [rsp+0x7f],ax
    f6a6:	mov    eax,DWORD PTR [r14+0x10]
    f6aa:	pop    rdx
    f6ab:	pop    rcx
    f6ac:	lea    rbx,[rsp+0x20]
    f6b1:	cmp    eax,ebp
    f6b3:	jl     f8e8 <PrintASCIIHistogram+0x448>
    f6b9:	movabs r10,0x2020202020202020
    f6c3:	mov    DWORD PTR [rsp+0x1c],r15d
    f6c8:	movabs r11,0x2020202020202020
    f6d2:	jmp    f793 <PrintASCIIHistogram+0x2f3>
    f6d7:	nop    WORD PTR [rax+rax*1+0x0]
    f6e0:	mov    rax,QWORD PTR [r14+0x20]
    f6e4:	sub    rsp,0x8
    f6e8:	mov    r8d,ebp
    f6eb:	lea    rcx,[rip+0x2e4d8]        # 3dbca <_IO_stdin_used+0xbca>
    f6f2:	cvttss2si eax,DWORD PTR [rax+r15*4]
    f6f8:	push   rax
    f6f9:	mov    edx,0x51
    f6fe:	mov    esi,0x1
    f703:	mov    rdi,rbx
    f706:	xor    eax,eax
    f708:	call   3830 <__sprintf_chk@plt>
    f70d:	mov    rax,QWORD PTR [r14]
    f710:	pop    rdx
    f711:	pop    rcx
    f712:	mov    BYTE PTR [rsp+0x34],0x20
    f717:	mov    eax,DWORD PTR [rax+r15*4]
    f71b:	test   eax,eax
    f71d:	jg     f8b8 <PrintASCIIHistogram+0x418>
    f723:	mov    eax,DWORD PTR [r14+0x28]
    f727:	test   eax,eax
    f729:	je     f763 <PrintASCIIHistogram+0x2c3>
    f72b:	mov    rax,QWORD PTR [r14+0x20]
    f72f:	movss  xmm0,DWORD PTR [rax+r15*4]
    f735:	cvttss2si eax,xmm0
    f739:	test   eax,eax
    f73b:	jle    f763 <PrintASCIIHistogram+0x2c3>
    f73d:	subss  xmm0,DWORD PTR [rip+0x2dc57]        # 3d39c <_IO_stdin_used+0x39c>
    f745:	cvttss2si eax,xmm0
    f749:	cdq    
    f74a:	idiv   DWORD PTR [rsp+0x14]
    f74e:	mov    edx,0x4e
    f753:	add    eax,0x14
    f756:	cmp    eax,0x4e
    f759:	cmovg  eax,edx
    f75c:	cdqe   
    f75e:	mov    BYTE PTR [rsp+rax*1+0x20],0x2a
    f763:	mov    rsi,QWORD PTR [rsp+0x8]
    f768:	mov    rdi,rbx
    f76b:	call   35c0 <fputs@plt>
    f770:	mov    eax,DWORD PTR [r14+0x10]
    f774:	movabs r10,0x2020202020202020
    f77e:	movabs r11,0x2020202020202020
    f788:	add    ebp,0x1
    f78b:	cmp    eax,ebp
    f78d:	jl     f8e8 <PrintASCIIHistogram+0x448>
    f793:	movabs rdx,0x2020202020202020
    f79d:	mov    r15d,0x2020
    f7a3:	mov    QWORD PTR [rbx],r10
    f7a6:	mov    QWORD PTR [rbx+0x8],r11
    f7aa:	mov    QWORD PTR [rbx+0x10],r10
    f7ae:	mov    QWORD PTR [rbx+0x18],r11
    f7b2:	mov    QWORD PTR [rbx+0x20],r10
    f7b6:	mov    QWORD PTR [rbx+0x28],r11
    f7ba:	mov    QWORD PTR [rbx+0x30],r10
    f7be:	mov    QWORD PTR [rbx+0x38],r11
    f7c2:	mov    QWORD PTR [rbx+0x40],rdx
    f7c6:	mov    DWORD PTR [rbx+0x48],0x20202020
    f7cd:	mov    WORD PTR [rbx+0x4c],r15w
    f7d2:	mov    BYTE PTR [rbx+0x4e],0x20
    f7d6:	cmp    r12d,ebp
    f7d9:	jl     f788 <PrintASCIIHistogram+0x2e8>
    f7db:	cmp    r13d,ebp
    f7de:	jg     f788 <PrintASCIIHistogram+0x2e8>
    f7e0:	je     f830 <PrintASCIIHistogram+0x390>
    f7e2:	cmp    r12d,ebp
    f7e5:	jne    f7ef <PrintASCIIHistogram+0x34f>
    f7e7:	cmp    ebp,eax
    f7e9:	jne    f978 <PrintASCIIHistogram+0x4d8>
    f7ef:	mov    eax,ebp
    f7f1:	sub    eax,DWORD PTR [r14+0x8]
    f7f5:	mov    esi,DWORD PTR [r14+0x28]
    f7f9:	movsxd r15,eax
    f7fc:	mov    rax,QWORD PTR [r14]
    f7ff:	mov    r9d,DWORD PTR [rax+r15*4]
    f803:	test   esi,esi
    f805:	jne    f6e0 <PrintASCIIHistogram+0x240>
    f80b:	sub    rsp,0x8
    f80f:	lea    rax,[rip+0x2e384]        # 3db9a <_IO_stdin_used+0xb9a>
    f816:	mov    r8d,ebp
    f819:	push   rax
    f81a:	lea    rcx,[rip+0x2e3b6]        # 3dbd7 <_IO_stdin_used+0xbd7>
    f821:	jmp    f6f9 <PrintASCIIHistogram+0x259>
    f826:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f830:	cmp    DWORD PTR [r14+0x14],r13d
    f834:	je     f7e2 <PrintASCIIHistogram+0x342>
    f836:	sub    rsp,0x8
    f83a:	lea    r8d,[r13+0x1]
    f83e:	mov    edx,0x51
    f843:	mov    rdi,rbx
    f846:	lea    rax,[rip+0x2e34d]        # 3db9a <_IO_stdin_used+0xb9a>
    f84d:	lea    rcx,[rip+0x2e355]        # 3dba9 <_IO_stdin_used+0xba9>
    f854:	mov    esi,0x1
    f859:	push   rax
    f85a:	mov    r15d,DWORD PTR [rsp+0x2c]
    f85f:	xor    eax,eax
    f861:	mov    r9d,r15d
    f864:	call   3830 <__sprintf_chk@plt>
    f869:	pop    r9
    f86b:	pop    r10
    f86d:	test   r15d,r15d
    f870:	jle    f763 <PrintASCIIHistogram+0x2c3>
    f876:	mov    eax,DWORD PTR [rsp+0x1c]
    f87a:	sub    eax,0x1
    f87d:	cdq    
    f87e:	idiv   DWORD PTR [rsp+0x14]
    f882:	mov    r15d,eax
    f885:	cmp    eax,0x3b
    f888:	jg     fb1b <PrintASCIIHistogram+0x67b>
    f88e:	movsxd rcx,r15d
    f891:	lea    rdx,[rsp+0x34]
    f896:	lea    rax,[rsp+rcx*1+0x35]
    f89b:	nop    DWORD PTR [rax+rax*1+0x0]
    f8a0:	mov    BYTE PTR [rdx],0x3d
    f8a3:	add    rdx,0x1
    f8a7:	cmp    rax,rdx
    f8aa:	jne    f8a0 <PrintASCIIHistogram+0x400>
    f8ac:	jmp    f763 <PrintASCIIHistogram+0x2c3>
    f8b1:	nop    DWORD PTR [rax+0x0]
    f8b8:	sub    eax,0x1
    f8bb:	lea    rcx,[rsp+0x34]
    f8c0:	cdq    
    f8c1:	idiv   DWORD PTR [rsp+0x14]
    f8c5:	cdqe   
    f8c7:	lea    rax,[rsp+rax*1+0x35]
    f8cc:	nop    DWORD PTR [rax+0x0]
    f8d0:	mov    BYTE PTR [rcx],0x3d
    f8d3:	add    rcx,0x1
    f8d7:	cmp    rax,rcx
    f8da:	jne    f8d0 <PrintASCIIHistogram+0x430>
    f8dc:	jmp    f723 <PrintASCIIHistogram+0x283>
    f8e1:	nop    DWORD PTR [rax+0x0]
    f8e8:	mov    eax,DWORD PTR [r14+0x28]
    f8ec:	cmp    eax,0x1
    f8ef:	je     fab8 <PrintASCIIHistogram+0x618>
    f8f5:	cmp    eax,0x2
    f8f8:	je     fa08 <PrintASCIIHistogram+0x568>
    f8fe:	test   eax,eax
    f900:	je     f9e8 <PrintASCIIHistogram+0x548>
    f906:	mov    rax,QWORD PTR [rsp+0x78]
    f90b:	xor    rax,QWORD PTR fs:0x28
    f914:	jne    fb2e <PrintASCIIHistogram+0x68e>
    f91a:	add    rsp,0x88
    f921:	pop    rbx
    f922:	pop    rbp
    f923:	pop    r12
    f925:	pop    r13
    f927:	pop    r14
    f929:	pop    r15
    f92b:	ret    
    f92c:	nop    DWORD PTR [rax+0x0]
    f930:	mov    edi,r13d
    f933:	sub    r12d,0x3
    f937:	sub    edi,r9d
    f93a:	cmp    r10d,r13d
    f93d:	jle    f5ca <PrintASCIIHistogram+0x12a>
    f943:	mov    ecx,r12d
    f946:	xor    r15d,r15d
    f949:	sub    ecx,r9d
    f94c:	cmp    r12d,r8d
    f94f:	jle    f5f3 <PrintASCIIHistogram+0x153>
    f955:	mov    DWORD PTR [rsp+0x18],0x0
    f95d:	jmp    f60f <PrintASCIIHistogram+0x16f>
    f962:	nop    WORD PTR [rax+rax*1+0x0]
    f968:	add    r13d,0x3
    f96c:	jmp    f56b <PrintASCIIHistogram+0xcb>
    f971:	nop    DWORD PTR [rax+0x0]
    f978:	sub    rsp,0x8
    f97c:	mov    r8d,ebp
    f97f:	mov    rdi,rbx
    f982:	mov    edx,0x51
    f987:	lea    rax,[rip+0x2e20c]        # 3db9a <_IO_stdin_used+0xb9a>
    f98e:	lea    rcx,[rip+0x2e227]        # 3dbbc <_IO_stdin_used+0xbbc>
    f995:	mov    esi,0x1
    f99a:	push   rax
    f99b:	mov    r15d,DWORD PTR [rsp+0x28]
    f9a0:	xor    eax,eax
    f9a2:	mov    r9d,r15d
    f9a5:	call   3830 <__sprintf_chk@plt>
    f9aa:	pop    rdi
    f9ab:	pop    r8
    f9ad:	test   r15d,r15d
    f9b0:	jle    f763 <PrintASCIIHistogram+0x2c3>
    f9b6:	mov    eax,DWORD PTR [rsp+0x18]
    f9ba:	lea    rcx,[rsp+0x34]
    f9bf:	sub    eax,0x1
    f9c2:	cdq    
    f9c3:	idiv   DWORD PTR [rsp+0x14]
    f9c7:	cdqe   
    f9c9:	lea    rax,[rsp+rax*1+0x35]
    f9ce:	xchg   ax,ax
    f9d0:	mov    BYTE PTR [rcx],0x3d
    f9d3:	add    rcx,0x1
    f9d7:	cmp    rax,rcx
    f9da:	jne    f9d0 <PrintASCIIHistogram+0x530>
    f9dc:	jmp    f763 <PrintASCIIHistogram+0x2c3>
    f9e1:	nop    DWORD PTR [rax+0x0]
    f9e8:	mov    rdi,QWORD PTR [rsp+0x8]
    f9ed:	lea    rdx,[rip+0x2e30c]        # 3dd00 <_IO_stdin_used+0xd00>
    f9f4:	mov    esi,0x1
    f9f9:	xor    eax,eax
    f9fb:	call   37c0 <__fprintf_chk@plt>
    fa00:	jmp    f906 <PrintASCIIHistogram+0x466>
    fa05:	nop    DWORD PTR [rax]
    fa08:	mov    rbx,QWORD PTR [rsp+0x8]
    fa0d:	lea    rdx,[rip+0x2e34c]        # 3dd60 <_IO_stdin_used+0xd60>
    fa14:	mov    esi,0x1
    fa19:	xor    eax,eax
    fa1b:	mov    rdi,rbx
    fa1e:	call   37c0 <__fprintf_chk@plt>
    fa23:	lea    rdx,[rip+0x2e226]        # 3dc50 <_IO_stdin_used+0xc50>
    fa2a:	pxor   xmm0,xmm0
    fa2e:	mov    rdi,rbx
    fa31:	mov    esi,0x1
    fa36:	mov    eax,0x1
    fa3b:	cvtss2sd xmm0,DWORD PTR [r14+0x2c]
    fa41:	call   37c0 <__fprintf_chk@plt>
    fa46:	pxor   xmm0,xmm0
    fa4a:	lea    rdx,[rip+0x2e21a]        # 3dc6b <_IO_stdin_used+0xc6b>
    fa51:	cvtss2sd xmm0,DWORD PTR [r14+0x30]
    fa57:	mov    rdi,rbx
    fa5a:	mov    esi,0x1
    fa5f:	mov    eax,0x1
    fa64:	call   37c0 <__fprintf_chk@plt>
    fa69:	mov    rdi,rbx
    fa6c:	lea    rdx,[rip+0x2e1a7]        # 3dc1a <_IO_stdin_used+0xc1a>
    fa73:	mov    esi,0x1
    fa78:	pxor   xmm0,xmm0
    fa7c:	mov    eax,0x1
    fa81:	cvtss2sd xmm0,DWORD PTR [r14+0x38]
    fa87:	call   37c0 <__fprintf_chk@plt>
    fa8c:	pxor   xmm0,xmm0
    fa90:	lea    rdx,[rip+0x2e19e]        # 3dc35 <_IO_stdin_used+0xc35>
    fa97:	mov    esi,0x1
    fa9c:	mov    rdi,rbx
    fa9f:	mov    eax,0x1
    faa4:	cvtss2sd xmm0,DWORD PTR [r14+0x3c]
    faaa:	call   37c0 <__fprintf_chk@plt>
    faaf:	jmp    f906 <PrintASCIIHistogram+0x466>
    fab4:	nop    DWORD PTR [rax+0x0]
    fab8:	mov    rbx,QWORD PTR [rsp+0x8]
    fabd:	lea    rdx,[rip+0x2e264]        # 3dd28 <_IO_stdin_used+0xd28>
    fac4:	mov    esi,0x1
    fac9:	xor    eax,eax
    facb:	mov    rdi,rbx
    face:	call   37c0 <__fprintf_chk@plt>
    fad3:	lea    rdx,[rip+0x2e10a]        # 3dbe4 <_IO_stdin_used+0xbe4>
    fada:	pxor   xmm0,xmm0
    fade:	mov    rdi,rbx
    fae1:	mov    esi,0x1
    fae6:	mov    eax,0x1
    faeb:	cvtss2sd xmm0,DWORD PTR [r14+0x2c]
    faf1:	call   37c0 <__fprintf_chk@plt>
    faf6:	pxor   xmm0,xmm0
    fafa:	lea    rdx,[rip+0x2e0fe]        # 3dbff <_IO_stdin_used+0xbff>
    fb01:	cvtss2sd xmm0,DWORD PTR [r14+0x30]
    fb07:	jmp    fa57 <PrintASCIIHistogram+0x5b7>
    fb0c:	xor    esi,esi
    fb0e:	jmp    f516 <PrintASCIIHistogram+0x76>
    fb13:	mov    r13d,r12d
    fb16:	jmp    f56b <PrintASCIIHistogram+0xcb>
    fb1b:	lea    rdi,[rip+0x2e095]        # 3dbb7 <_IO_stdin_used+0xbb7>
    fb22:	xor    eax,eax
    fb24:	call   317f0 <Die>
    fb29:	jmp    f88e <PrintASCIIHistogram+0x3ee>
    fb2e:	call   3570 <__stack_chk_fail@plt>
    fb33:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    fb3e:	xchg   ax,ax

000000000000fb40 <GaussianFitHistogram>:
    fb40:	endbr64 
    fb44:	push   r12
    fb46:	push   rbp
    fb47:	push   rbx
    fb48:	mov    rbx,rdi
    fb4b:	sub    rsp,0x10
    fb4f:	mov    rdi,QWORD PTR [rdi+0x20]
    fb53:	test   rdi,rdi
    fb56:	je     fb5d <GaussianFitHistogram+0x1d>
    fb58:	call   3460 <free@plt>
    fb5d:	mov    ecx,DWORD PTR [rbx+0x1c]
    fb60:	mov    QWORD PTR [rbx+0x20],0x0
    fb68:	xor    eax,eax
    fb6a:	mov    DWORD PTR [rbx+0x28],0x0
    fb71:	cmp    ecx,0x3e7
    fb77:	jle    fdc4 <GaussianFitHistogram+0x284>
    fb7d:	movsxd rax,DWORD PTR [rbx+0x14]
    fb81:	mov    edx,DWORD PTR [rbx+0x10]
    fb84:	cmp    eax,edx
    fb86:	jg     fe10 <GaussianFitHistogram+0x2d0>
    fb8c:	movsxd rsi,DWORD PTR [rbx+0x8]
    fb90:	mov    rdi,QWORD PTR [rbx]
    fb93:	pxor   xmm5,xmm5
    fb97:	movss  xmm4,DWORD PTR [rip+0x2db91]        # 3d730 <_IO_stdin_used+0x730>
    fb9f:	movaps xmm0,xmm5
    fba2:	movaps xmm3,xmm5
    fba5:	neg    rsi
    fba8:	lea    rsi,[rdi+rsi*4]
    fbac:	nop    DWORD PTR [rax+0x0]
    fbb0:	pxor   xmm1,xmm1
    fbb4:	cvtsi2ss xmm1,eax
    fbb8:	movaps xmm2,xmm1
    fbbb:	pxor   xmm1,xmm1
    fbbf:	cvtsi2ss xmm1,DWORD PTR [rsi+rax*4]
    fbc4:	addss  xmm2,xmm4
    fbc8:	add    rax,0x1
    fbcc:	mulss  xmm1,xmm2
    fbd0:	addss  xmm3,xmm1
    fbd4:	mulss  xmm1,xmm2
    fbd8:	addss  xmm0,xmm1
    fbdc:	cmp    edx,eax
    fbde:	jge    fbb0 <GaussianFitHistogram+0x70>
    fbe0:	movaps xmm1,xmm3
    fbe3:	mulss  xmm1,xmm3
    fbe7:	pxor   xmm2,xmm2
    fbeb:	mov    DWORD PTR [rbx+0x28],0x2
    fbf2:	cvtsi2ss xmm2,ecx
    fbf6:	sub    ecx,0x1
    fbf9:	divss  xmm1,xmm2
    fbfd:	divss  xmm3,xmm2
    fc01:	subss  xmm0,xmm1
    fc05:	pxor   xmm1,xmm1
    fc09:	cvtsi2ss xmm1,ecx
    fc0d:	divss  xmm0,xmm1
    fc11:	movss  DWORD PTR [rbx+0x2c],xmm3
    fc16:	ucomiss xmm5,xmm0
    fc19:	movaps xmm1,xmm0
    fc1c:	sqrtss xmm1,xmm1
    fc20:	ja     fe22 <GaussianFitHistogram+0x2e2>
    fc26:	mov    ebp,DWORD PTR [rbx+0xc]
    fc29:	sub    ebp,DWORD PTR [rbx+0x8]
    fc2c:	movss  DWORD PTR [rbx+0x30],xmm1
    fc31:	mov    esi,0x316
    fc36:	lea    r12d,[rbp+0x1]
    fc3a:	lea    rdi,[rip+0x2df3f]        # 3db80 <_IO_stdin_used+0xb80>
    fc41:	movsxd rdx,r12d
    fc44:	shl    rdx,0x2
    fc48:	call   36810 <sre_malloc>
    fc4d:	mov    QWORD PTR [rbx+0x20],rax
    fc51:	lea    rdx,[rax+rbp*4+0x4]
    fc56:	test   r12d,r12d
    fc59:	jle    fc6f <GaussianFitHistogram+0x12f>
    fc5b:	nop    DWORD PTR [rax+rax*1+0x0]
    fc60:	mov    DWORD PTR [rax],0x0
    fc66:	add    rax,0x4
    fc6a:	cmp    rdx,rax
    fc6d:	jne    fc60 <GaussianFitHistogram+0x120>
    fc6f:	mov    ebp,DWORD PTR [rbx+0x8]
    fc72:	cmp    ebp,DWORD PTR [rbx+0xc]
    fc75:	jg     fd3a <GaussianFitHistogram+0x1fa>
    fc7b:	nop    DWORD PTR [rax+rax*1+0x0]
    fc80:	pxor   xmm0,xmm0
    fc84:	pxor   xmm6,xmm6
    fc88:	pxor   xmm2,xmm2
    fc8c:	cvtsi2ss xmm0,DWORD PTR [rbx+0x1c]
    fc91:	cvtss2sd xmm2,DWORD PTR [rbx+0x2c]
    fc96:	pxor   xmm1,xmm1
    fc9a:	cvtss2sd xmm1,DWORD PTR [rbx+0x30]
    fc9f:	movsd  QWORD PTR [rsp+0x8],xmm1
    fca5:	cvtss2sd xmm6,xmm0
    fca9:	pxor   xmm0,xmm0
    fcad:	movsd  QWORD PTR [rsp],xmm6
    fcb2:	cvtsi2ss xmm0,ebp
    fcb6:	cvtss2sd xmm0,xmm0
    fcba:	addsd  xmm0,QWORD PTR [rip+0x2e11e]        # 3dde0 <_IO_stdin_used+0xde0>
    fcc2:	subsd  xmm0,xmm2
    fcc6:	cvtsd2ss xmm0,xmm0
    fcca:	cvtss2sd xmm0,xmm0
    fcce:	movapd xmm2,xmm0
    fcd2:	xorpd  xmm2,XMMWORD PTR [rip+0x2d6c6]        # 3d3a0 <_IO_stdin_used+0x3a0>
    fcda:	mulsd  xmm0,xmm2
    fcde:	movapd xmm2,xmm1
    fce2:	addsd  xmm2,xmm1
    fce6:	mulsd  xmm2,xmm1
    fcea:	divsd  xmm0,xmm2
    fcee:	call   3800 <exp@plt>
    fcf3:	movsd  xmm1,QWORD PTR [rsp+0x8]
    fcf9:	mov    eax,ebp
    fcfb:	mov    rdx,QWORD PTR [rbx+0x20]
    fcff:	mulsd  xmm1,QWORD PTR [rip+0x2e0e1]        # 3dde8 <_IO_stdin_used+0xde8>
    fd07:	movapd xmm2,xmm0
    fd0b:	sub    eax,DWORD PTR [rbx+0x8]
    fd0e:	add    ebp,0x1
    fd11:	movsd  xmm0,QWORD PTR [rip+0x2e0d7]        # 3ddf0 <_IO_stdin_used+0xdf0>
    fd19:	cdqe   
    fd1b:	divsd  xmm0,xmm1
    fd1f:	mulsd  xmm0,xmm2
    fd23:	mulsd  xmm0,QWORD PTR [rsp]
    fd28:	cvtsd2ss xmm0,xmm0
    fd2c:	movss  DWORD PTR [rdx+rax*4],xmm0
    fd31:	cmp    DWORD PTR [rbx+0xc],ebp
    fd34:	jge    fc80 <GaussianFitHistogram+0x140>
    fd3a:	mov    edi,DWORD PTR [rbx+0x14]
    fd3d:	mov    edx,DWORD PTR [rbx+0x10]
    fd40:	mov    DWORD PTR [rbx+0x38],0x0
    fd47:	cmp    edx,edi
    fd49:	jl     fdb8 <GaussianFitHistogram+0x278>
    fd4b:	movsxd r8,DWORD PTR [rbx+0x8]
    fd4f:	movsxd rcx,edi
    fd52:	sub    edx,edi
    fd54:	mov    rsi,QWORD PTR [rbx+0x20]
    fd58:	mov    rax,rcx
    fd5b:	xor    edi,edi
    fd5d:	sub    rcx,r8
    fd60:	sub    rax,r8
    fd63:	lea    rcx,[rcx+rdx*1+0x1]
    fd68:	shl    rax,0x2
    fd6c:	shl    rcx,0x2
    fd70:	movss  xmm1,DWORD PTR [rsi+rax*1]
    fd75:	comiss xmm1,DWORD PTR [rip+0x2e020]        # 3dd9c <_IO_stdin_used+0xd9c>
    fd7c:	jb     fdaa <GaussianFitHistogram+0x26a>
    fd7e:	mov    rdx,QWORD PTR [rbx]
    fd81:	mov    edx,DWORD PTR [rdx+rax*1]
    fd84:	cmp    edx,0x4
    fd87:	jle    fdaa <GaussianFitHistogram+0x26a>
    fd89:	pxor   xmm0,xmm0
    fd8d:	add    edi,0x1
    fd90:	cvtsi2ss xmm0,edx
    fd94:	subss  xmm0,xmm1
    fd98:	mulss  xmm0,xmm0
    fd9c:	divss  xmm0,xmm1
    fda0:	addss  xmm0,DWORD PTR [rbx+0x38]
    fda5:	movss  DWORD PTR [rbx+0x38],xmm0
    fdaa:	add    rax,0x4
    fdae:	cmp    rcx,rax
    fdb1:	jne    fd70 <GaussianFitHistogram+0x230>
    fdb3:	cmp    edi,0x3
    fdb6:	jg     fdd0 <GaussianFitHistogram+0x290>
    fdb8:	mov    DWORD PTR [rbx+0x3c],0x0
    fdbf:	mov    eax,0x1
    fdc4:	add    rsp,0x10
    fdc8:	pop    rbx
    fdc9:	pop    rbp
    fdca:	pop    r12
    fdcc:	ret    
    fdcd:	nop    DWORD PTR [rax]
    fdd0:	sub    edi,0x3
    fdd3:	pxor   xmm0,xmm0
    fdd7:	movsd  xmm1,QWORD PTR [rip+0x2e001]        # 3dde0 <_IO_stdin_used+0xde0>
    fddf:	pxor   xmm2,xmm2
    fde3:	cvtsi2sd xmm0,edi
    fde7:	cvtss2sd xmm2,DWORD PTR [rbx+0x38]
    fdec:	mulsd  xmm0,xmm1
    fdf0:	mulsd  xmm1,xmm2
    fdf4:	call   35d80 <IncompleteGamma>
    fdf9:	mov    eax,0x1
    fdfe:	cvtsd2ss xmm0,xmm0
    fe02:	movss  DWORD PTR [rbx+0x3c],xmm0
    fe07:	add    rsp,0x10
    fe0b:	pop    rbx
    fe0c:	pop    rbp
    fe0d:	pop    r12
    fe0f:	ret    
    fe10:	pxor   xmm5,xmm5
    fe14:	movaps xmm1,xmm5
    fe17:	movaps xmm0,xmm5
    fe1a:	movaps xmm3,xmm5
    fe1d:	jmp    fbe7 <GaussianFitHistogram+0xa7>
    fe22:	movss  DWORD PTR [rsp],xmm1
    fe27:	call   36a0 <sqrtf@plt>
    fe2c:	movss  xmm1,DWORD PTR [rsp]
    fe31:	jmp    fc26 <GaussianFitHistogram+0xe6>
    fe36:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000fe40 <GaussianSetHistogram>:
    fe40:	endbr64 
    fe44:	push   r12
    fe46:	push   rbp
    fe47:	push   rbx
    fe48:	mov    rbx,rdi
    fe4b:	sub    rsp,0x10
    fe4f:	mov    rdi,QWORD PTR [rdi+0x20]
    fe53:	test   rdi,rdi
    fe56:	je     fe73 <GaussianSetHistogram+0x33>
    fe58:	movss  DWORD PTR [rsp+0x8],xmm1
    fe5e:	movss  DWORD PTR [rsp],xmm0
    fe63:	call   3460 <free@plt>
    fe68:	movss  xmm1,DWORD PTR [rsp+0x8]
    fe6e:	movss  xmm0,DWORD PTR [rsp]
    fe73:	mov    ebp,DWORD PTR [rbx+0xc]
    fe76:	sub    ebp,DWORD PTR [rbx+0x8]
    fe79:	movss  DWORD PTR [rbx+0x2c],xmm0
    fe7e:	mov    esi,0x34d
    fe83:	lea    r12d,[rbp+0x1]
    fe87:	mov    QWORD PTR [rbx+0x20],0x0
    fe8f:	lea    rdi,[rip+0x2dcea]        # 3db80 <_IO_stdin_used+0xb80>
    fe96:	mov    DWORD PTR [rbx+0x28],0x2
    fe9d:	movsxd rdx,r12d
    fea0:	movss  DWORD PTR [rbx+0x30],xmm1
    fea5:	shl    rdx,0x2
    fea9:	call   36810 <sre_malloc>
    feae:	mov    QWORD PTR [rbx+0x20],rax
    feb2:	test   r12d,r12d
    feb5:	jle    fecf <GaussianSetHistogram+0x8f>
    feb7:	lea    rdx,[rax+rbp*4+0x4]
    febc:	nop    DWORD PTR [rax+0x0]
    fec0:	mov    DWORD PTR [rax],0x0
    fec6:	add    rax,0x4
    feca:	cmp    rdx,rax
    fecd:	jne    fec0 <GaussianSetHistogram+0x80>
    fecf:	mov    ebp,DWORD PTR [rbx+0x8]
    fed2:	cmp    ebp,DWORD PTR [rbx+0xc]
    fed5:	jg     ff9a <GaussianSetHistogram+0x15a>
    fedb:	nop    DWORD PTR [rax+rax*1+0x0]
    fee0:	pxor   xmm0,xmm0
    fee4:	pxor   xmm3,xmm3
    fee8:	pxor   xmm2,xmm2
    feec:	cvtsi2ss xmm0,DWORD PTR [rbx+0x1c]
    fef1:	cvtss2sd xmm2,DWORD PTR [rbx+0x2c]
    fef6:	pxor   xmm1,xmm1
    fefa:	cvtss2sd xmm1,DWORD PTR [rbx+0x30]
    feff:	movsd  QWORD PTR [rsp+0x8],xmm1
    ff05:	cvtss2sd xmm3,xmm0
    ff09:	pxor   xmm0,xmm0
    ff0d:	movsd  QWORD PTR [rsp],xmm3
    ff12:	cvtsi2ss xmm0,ebp
    ff16:	cvtss2sd xmm0,xmm0
    ff1a:	addsd  xmm0,QWORD PTR [rip+0x2debe]        # 3dde0 <_IO_stdin_used+0xde0>
    ff22:	subsd  xmm0,xmm2
    ff26:	cvtsd2ss xmm0,xmm0
    ff2a:	cvtss2sd xmm0,xmm0
    ff2e:	movapd xmm2,xmm0
    ff32:	xorpd  xmm2,XMMWORD PTR [rip+0x2d466]        # 3d3a0 <_IO_stdin_used+0x3a0>
    ff3a:	mulsd  xmm0,xmm2
    ff3e:	movapd xmm2,xmm1
    ff42:	addsd  xmm2,xmm1
    ff46:	mulsd  xmm2,xmm1
    ff4a:	divsd  xmm0,xmm2
    ff4e:	call   3800 <exp@plt>
    ff53:	movsd  xmm1,QWORD PTR [rsp+0x8]
    ff59:	mov    eax,ebp
    ff5b:	mov    rdx,QWORD PTR [rbx+0x20]
    ff5f:	mulsd  xmm1,QWORD PTR [rip+0x2de81]        # 3dde8 <_IO_stdin_used+0xde8>
    ff67:	movapd xmm2,xmm0
    ff6b:	sub    eax,DWORD PTR [rbx+0x8]
    ff6e:	add    ebp,0x1
    ff71:	movsd  xmm0,QWORD PTR [rip+0x2de77]        # 3ddf0 <_IO_stdin_used+0xdf0>
    ff79:	cdqe   
    ff7b:	divsd  xmm0,xmm1
    ff7f:	mulsd  xmm0,xmm2
    ff83:	mulsd  xmm0,QWORD PTR [rsp]
    ff88:	cvtsd2ss xmm0,xmm0
    ff8c:	movss  DWORD PTR [rdx+rax*4],xmm0
    ff91:	cmp    DWORD PTR [rbx+0xc],ebp
    ff94:	jge    fee0 <GaussianSetHistogram+0xa0>
    ff9a:	mov    edi,DWORD PTR [rbx+0x14]
    ff9d:	mov    edx,DWORD PTR [rbx+0x10]
    ffa0:	mov    DWORD PTR [rbx+0x38],0x0
    ffa7:	cmp    edi,edx
    ffa9:	jg     10018 <GaussianSetHistogram+0x1d8>
    ffab:	movsxd r8,DWORD PTR [rbx+0x8]
    ffaf:	movsxd rcx,edi
    ffb2:	sub    edx,edi
    ffb4:	mov    rsi,QWORD PTR [rbx+0x20]
    ffb8:	mov    rax,rcx
    ffbb:	xor    edi,edi
    ffbd:	sub    rcx,r8
    ffc0:	sub    rax,r8
    ffc3:	lea    rcx,[rcx+rdx*1+0x1]
    ffc8:	shl    rax,0x2
    ffcc:	shl    rcx,0x2
    ffd0:	movss  xmm1,DWORD PTR [rsi+rax*1]
    ffd5:	comiss xmm1,DWORD PTR [rip+0x2ddc0]        # 3dd9c <_IO_stdin_used+0xd9c>
    ffdc:	jb     1000a <GaussianSetHistogram+0x1ca>
    ffde:	mov    rdx,QWORD PTR [rbx]
    ffe1:	mov    edx,DWORD PTR [rdx+rax*1]
    ffe4:	cmp    edx,0x4
    ffe7:	jle    1000a <GaussianSetHistogram+0x1ca>
    ffe9:	pxor   xmm0,xmm0
    ffed:	add    edi,0x1
    fff0:	cvtsi2ss xmm0,edx
    fff4:	subss  xmm0,xmm1
    fff8:	mulss  xmm0,xmm0
    fffc:	divss  xmm0,xmm1
   10000:	addss  xmm0,DWORD PTR [rbx+0x38]
   10005:	movss  DWORD PTR [rbx+0x38],xmm0
   1000a:	add    rax,0x4
   1000e:	cmp    rax,rcx
   10011:	jne    ffd0 <GaussianSetHistogram+0x190>
   10013:	cmp    edi,0x1
   10016:	jg     10030 <GaussianSetHistogram+0x1f0>
   10018:	mov    DWORD PTR [rbx+0x3c],0x0
   1001f:	add    rsp,0x10
   10023:	pop    rbx
   10024:	pop    rbp
   10025:	pop    r12
   10027:	ret    
   10028:	nop    DWORD PTR [rax+rax*1+0x0]
   10030:	sub    edi,0x1
   10033:	pxor   xmm0,xmm0
   10037:	movsd  xmm1,QWORD PTR [rip+0x2dda1]        # 3dde0 <_IO_stdin_used+0xde0>
   1003f:	pxor   xmm2,xmm2
   10043:	cvtsi2sd xmm0,edi
   10047:	cvtss2sd xmm2,DWORD PTR [rbx+0x38]
   1004c:	mulsd  xmm0,xmm1
   10050:	mulsd  xmm1,xmm2
   10054:	call   35d80 <IncompleteGamma>
   10059:	cvtsd2ss xmm0,xmm0
   1005d:	movss  DWORD PTR [rbx+0x3c],xmm0
   10062:	add    rsp,0x10
   10066:	pop    rbx
   10067:	pop    rbp
   10068:	pop    r12
   1006a:	ret    
   1006b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000010070 <EVDDensity>:
   10070:	endbr64 
   10074:	movaps xmm3,xmm0
   10077:	sub    rsp,0x18
   1007b:	cvtss2sd xmm2,xmm2
   1007f:	movapd xmm0,xmm2
   10083:	subss  xmm3,xmm1
   10087:	pxor   xmm1,xmm1
   1008b:	xorpd  xmm0,XMMWORD PTR [rip+0x2d30d]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10093:	movsd  QWORD PTR [rsp+0x8],xmm2
   10099:	cvtss2sd xmm1,xmm3
   1009d:	mulsd  xmm1,xmm0
   100a1:	movapd xmm0,xmm1
   100a5:	movsd  QWORD PTR [rsp],xmm1
   100aa:	call   3800 <exp@plt>
   100af:	movsd  xmm1,QWORD PTR [rsp]
   100b4:	subsd  xmm1,xmm0
   100b8:	movapd xmm0,xmm1
   100bc:	call   3800 <exp@plt>
   100c1:	movsd  xmm2,QWORD PTR [rsp+0x8]
   100c7:	add    rsp,0x18
   100cb:	mulsd  xmm0,xmm2
   100cf:	ret    

00000000000100d0 <EVDDistribution>:
   100d0:	endbr64 
   100d4:	movaps xmm3,xmm0
   100d7:	pxor   xmm0,xmm0
   100db:	sub    rsp,0x8
   100df:	subss  xmm3,xmm1
   100e3:	cvtss2sd xmm0,xmm2
   100e7:	movq   xmm2,QWORD PTR [rip+0x2d2b1]        # 3d3a0 <_IO_stdin_used+0x3a0>
   100ef:	xorpd  xmm0,xmm2
   100f3:	cvtss2sd xmm3,xmm3
   100f7:	mulsd  xmm0,xmm3
   100fb:	call   3800 <exp@plt>
   10100:	movq   xmm2,QWORD PTR [rip+0x2d298]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10108:	add    rsp,0x8
   1010c:	xorpd  xmm0,xmm2
   10110:	jmp    3800 <exp@plt>
   10115:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000010120 <ExtremeValueP>:
   10120:	endbr64 
   10124:	subss  xmm0,xmm1
   10128:	movaps xmm3,xmm0
   1012b:	movaps xmm1,xmm0
   1012e:	movsd  xmm0,QWORD PTR [rip+0x2dcc2]        # 3ddf8 <_IO_stdin_used+0xdf8>
   10136:	mulss  xmm3,xmm2
   1013a:	cvtss2sd xmm3,xmm3
   1013e:	comisd xmm0,xmm3
   10142:	jae    101a0 <ExtremeValueP+0x80>
   10144:	comisd xmm3,QWORD PTR [rip+0x2dcb4]        # 3de00 <_IO_stdin_used+0xe00>
   1014c:	pxor   xmm0,xmm0
   10150:	jb     10158 <ExtremeValueP+0x38>
   10152:	ret    
   10153:	nop    DWORD PTR [rax+rax*1+0x0]
   10158:	sub    rsp,0x8
   1015c:	movq   xmm3,QWORD PTR [rip+0x2d23c]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10164:	cvtss2sd xmm2,xmm2
   10168:	cvtss2sd xmm1,xmm1
   1016c:	xorpd  xmm2,xmm3
   10170:	movapd xmm0,xmm2
   10174:	mulsd  xmm0,xmm1
   10178:	call   3800 <exp@plt>
   1017d:	movsd  xmm1,QWORD PTR [rip+0x2dc83]        # 3de08 <_IO_stdin_used+0xe08>
   10185:	movq   xmm3,QWORD PTR [rip+0x2d213]        # 3d3a0 <_IO_stdin_used+0x3a0>
   1018d:	comisd xmm1,xmm0
   10191:	jbe    101b0 <ExtremeValueP+0x90>
   10193:	add    rsp,0x8
   10197:	ret    
   10198:	nop    DWORD PTR [rax+rax*1+0x0]
   101a0:	movsd  xmm0,QWORD PTR [rip+0x2dc48]        # 3ddf0 <_IO_stdin_used+0xdf0>
   101a8:	ret    
   101a9:	nop    DWORD PTR [rax+0x0]
   101b0:	xorpd  xmm0,xmm3
   101b4:	call   3800 <exp@plt>
   101b9:	movsd  xmm1,QWORD PTR [rip+0x2dc2f]        # 3ddf0 <_IO_stdin_used+0xdf0>
   101c1:	add    rsp,0x8
   101c5:	subsd  xmm1,xmm0
   101c9:	movapd xmm0,xmm1
   101cd:	ret    
   101ce:	xchg   ax,ax

00000000000101d0 <PrintXMGRHistogram>:
   101d0:	endbr64 
   101d4:	push   r13
   101d6:	push   r12
   101d8:	mov    r12,rdi
   101db:	push   rbp
   101dc:	push   rbx
   101dd:	mov    rbx,rsi
   101e0:	sub    rsp,0x18
   101e4:	mov    ebp,DWORD PTR [rsi+0x14]
   101e7:	cmp    ebp,DWORD PTR [rsi+0x10]
   101ea:	jg     10241 <PrintXMGRHistogram+0x71>
   101ec:	lea    r13,[rip+0x2da93]        # 3dc86 <_IO_stdin_used+0xc86>
   101f3:	nop    DWORD PTR [rax+rax*1+0x0]
   101f8:	mov    rdx,QWORD PTR [rbx]
   101fb:	mov    eax,ebp
   101fd:	sub    eax,DWORD PTR [rbx+0x8]
   10200:	cdqe   
   10202:	mov    eax,DWORD PTR [rdx+rax*4]
   10205:	test   eax,eax
   10207:	jle    10239 <PrintXMGRHistogram+0x69>
   10209:	pxor   xmm0,xmm0
   1020d:	pxor   xmm1,xmm1
   10211:	mov    ecx,ebp
   10213:	mov    rdx,r13
   10216:	cvtsi2ss xmm0,eax
   1021a:	mov    esi,0x1
   1021f:	mov    rdi,r12
   10222:	mov    eax,0x1
   10227:	cvtsi2ss xmm1,DWORD PTR [rbx+0x1c]
   1022c:	divss  xmm0,xmm1
   10230:	cvtss2sd xmm0,xmm0
   10234:	call   37c0 <__fprintf_chk@plt>
   10239:	add    ebp,0x1
   1023c:	cmp    DWORD PTR [rbx+0x10],ebp
   1023f:	jge    101f8 <PrintXMGRHistogram+0x28>
   10241:	mov    rcx,r12
   10244:	mov    edx,0x2
   10249:	mov    esi,0x1
   1024e:	lea    rdi,[rip+0x2da3a]        # 3dc8f <_IO_stdin_used+0xc8f>
   10255:	call   37b0 <fwrite@plt>
   1025a:	mov    eax,DWORD PTR [rbx+0x28]
   1025d:	test   eax,eax
   1025f:	je     10338 <PrintXMGRHistogram+0x168>
   10265:	mov    ebp,DWORD PTR [rbx+0x14]
   10268:	cmp    ebp,DWORD PTR [rbx+0x10]
   1026b:	jg     1030e <PrintXMGRHistogram+0x13e>
   10271:	lea    r13,[rip+0x2da0e]        # 3dc86 <_IO_stdin_used+0xc86>
   10278:	nop    DWORD PTR [rax+rax*1+0x0]
   10280:	pxor   xmm3,xmm3
   10284:	movss  xmm2,DWORD PTR [rbx+0x30]
   10289:	movss  xmm1,DWORD PTR [rbx+0x2c]
   1028e:	cvtsi2ss xmm3,ebp
   10292:	movss  xmm0,DWORD PTR [rip+0x2d102]        # 3d39c <_IO_stdin_used+0x39c>
   1029a:	addss  xmm0,xmm3
   1029e:	movss  DWORD PTR [rsp+0xc],xmm3
   102a4:	call   10120 <ExtremeValueP>
   102a9:	movss  xmm3,DWORD PTR [rsp+0xc]
   102af:	movss  xmm2,DWORD PTR [rbx+0x30]
   102b4:	movss  xmm1,DWORD PTR [rbx+0x2c]
   102b9:	movsd  QWORD PTR [rsp],xmm0
   102be:	movaps xmm0,xmm3
   102c1:	call   10120 <ExtremeValueP>
   102c6:	mov    ecx,ebp
   102c8:	mov    rdx,r13
   102cb:	mov    esi,0x1
   102d0:	movapd xmm1,xmm0
   102d4:	mov    rdi,r12
   102d7:	mov    eax,0x1
   102dc:	add    ebp,0x1
   102df:	movsd  xmm5,QWORD PTR [rip+0x2db09]        # 3ddf0 <_IO_stdin_used+0xdf0>
   102e7:	movsd  xmm4,QWORD PTR [rip+0x2db01]        # 3ddf0 <_IO_stdin_used+0xdf0>
   102ef:	subsd  xmm4,QWORD PTR [rsp]
   102f4:	subsd  xmm5,xmm1
   102f8:	movapd xmm0,xmm4
   102fc:	subsd  xmm0,xmm5
   10300:	call   37c0 <__fprintf_chk@plt>
   10305:	cmp    DWORD PTR [rbx+0x10],ebp
   10308:	jge    10280 <PrintXMGRHistogram+0xb0>
   1030e:	add    rsp,0x18
   10312:	mov    rcx,r12
   10315:	mov    edx,0x2
   1031a:	mov    esi,0x1
   1031f:	pop    rbx
   10320:	lea    rdi,[rip+0x2d968]        # 3dc8f <_IO_stdin_used+0xc8f>
   10327:	pop    rbp
   10328:	pop    r12
   1032a:	pop    r13
   1032c:	jmp    37b0 <fwrite@plt>
   10331:	nop    DWORD PTR [rax+0x0]
   10338:	add    rsp,0x18
   1033c:	pop    rbx
   1033d:	pop    rbp
   1033e:	pop    r12
   10340:	pop    r13
   10342:	ret    
   10343:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1034e:	xchg   ax,ax

0000000000010350 <PrintXMGRDistribution>:
   10350:	endbr64 
   10354:	push   r14
   10356:	push   r13
   10358:	push   r12
   1035a:	mov    r12,rdi
   1035d:	push   rbp
   1035e:	push   rbx
   1035f:	mov    rbx,rsi
   10362:	mov    ebp,DWORD PTR [rsi+0x14]
   10365:	cmp    ebp,DWORD PTR [rsi+0x10]
   10368:	jg     103bf <PrintXMGRDistribution+0x6f>
   1036a:	xor    r14d,r14d
   1036d:	lea    r13,[rip+0x2d912]        # 3dc86 <_IO_stdin_used+0xc86>
   10374:	nop    DWORD PTR [rax+0x0]
   10378:	mov    rdx,QWORD PTR [rbx]
   1037b:	mov    eax,ebp
   1037d:	sub    eax,DWORD PTR [rbx+0x8]
   10380:	pxor   xmm0,xmm0
   10384:	cdqe   
   10386:	pxor   xmm1,xmm1
   1038a:	add    ebp,0x1
   1038d:	mov    esi,0x1
   10392:	add    r14d,DWORD PTR [rdx+rax*4]
   10396:	cvtsi2ss xmm1,DWORD PTR [rbx+0x1c]
   1039b:	mov    ecx,ebp
   1039d:	mov    rdx,r13
   103a0:	cvtsi2ss xmm0,r14d
   103a5:	mov    rdi,r12
   103a8:	mov    eax,0x1
   103ad:	divss  xmm0,xmm1
   103b1:	cvtss2sd xmm0,xmm0
   103b5:	call   37c0 <__fprintf_chk@plt>
   103ba:	cmp    ebp,DWORD PTR [rbx+0x10]
   103bd:	jle    10378 <PrintXMGRDistribution+0x28>
   103bf:	mov    rcx,r12
   103c2:	mov    edx,0x2
   103c7:	mov    esi,0x1
   103cc:	lea    rdi,[rip+0x2d8bc]        # 3dc8f <_IO_stdin_used+0xc8f>
   103d3:	call   37b0 <fwrite@plt>
   103d8:	mov    eax,DWORD PTR [rbx+0x28]
   103db:	test   eax,eax
   103dd:	je     10460 <PrintXMGRDistribution+0x110>
   103e3:	mov    ebp,DWORD PTR [rbx+0x14]
   103e6:	cmp    ebp,DWORD PTR [rbx+0x10]
   103e9:	jg     1043e <PrintXMGRDistribution+0xee>
   103eb:	lea    r13,[rip+0x2d894]        # 3dc86 <_IO_stdin_used+0xc86>
   103f2:	nop    WORD PTR [rax+rax*1+0x0]
   103f8:	pxor   xmm0,xmm0
   103fc:	movss  xmm2,DWORD PTR [rbx+0x30]
   10401:	movss  xmm1,DWORD PTR [rbx+0x2c]
   10406:	cvtsi2ss xmm0,ebp
   1040a:	call   10120 <ExtremeValueP>
   1040f:	mov    ecx,ebp
   10411:	mov    rdx,r13
   10414:	mov    esi,0x1
   10419:	movsd  xmm3,QWORD PTR [rip+0x2d9cf]        # 3ddf0 <_IO_stdin_used+0xdf0>
   10421:	mov    rdi,r12
   10424:	mov    eax,0x1
   10429:	add    ebp,0x1
   1042c:	subsd  xmm3,xmm0
   10430:	movapd xmm0,xmm3
   10434:	call   37c0 <__fprintf_chk@plt>
   10439:	cmp    DWORD PTR [rbx+0x10],ebp
   1043c:	jge    103f8 <PrintXMGRDistribution+0xa8>
   1043e:	pop    rbx
   1043f:	mov    rcx,r12
   10442:	pop    rbp
   10443:	mov    edx,0x2
   10448:	pop    r12
   1044a:	mov    esi,0x1
   1044f:	lea    rdi,[rip+0x2d839]        # 3dc8f <_IO_stdin_used+0xc8f>
   10456:	pop    r13
   10458:	pop    r14
   1045a:	jmp    37b0 <fwrite@plt>
   1045f:	nop
   10460:	pop    rbx
   10461:	pop    rbp
   10462:	pop    r12
   10464:	pop    r13
   10466:	pop    r14
   10468:	ret    
   10469:	nop    DWORD PTR [rax+0x0]

0000000000010470 <PrintXMGRRegressionLine>:
   10470:	endbr64 
   10474:	push   r14
   10476:	push   r13
   10478:	mov    r13,rdi
   1047b:	push   r12
   1047d:	push   rbp
   1047e:	push   rbx
   1047f:	mov    rbx,rsi
   10482:	sub    rsp,0x10
   10486:	mov    ebp,DWORD PTR [rsi+0x14]
   10489:	cmp    ebp,DWORD PTR [rsi+0x10]
   1048c:	jg     1050d <PrintXMGRRegressionLine+0x9d>
   1048e:	movq   xmm6,QWORD PTR [rip+0x2cf0a]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10496:	xor    r12d,r12d
   10499:	lea    r14,[rip+0x2d7e6]        # 3dc86 <_IO_stdin_used+0xc86>
   104a0:	movaps XMMWORD PTR [rsp],xmm6
   104a4:	jmp    104b5 <PrintXMGRRegressionLine+0x45>
   104a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   104b0:	cmp    DWORD PTR [rbx+0x10],ebp
   104b3:	jl     1050d <PrintXMGRRegressionLine+0x9d>
   104b5:	mov    rdx,QWORD PTR [rbx]
   104b8:	mov    eax,ebp
   104ba:	sub    eax,DWORD PTR [rbx+0x8]
   104bd:	pxor   xmm0,xmm0
   104c1:	cdqe   
   104c3:	pxor   xmm1,xmm1
   104c7:	add    ebp,0x1
   104ca:	add    r12d,DWORD PTR [rdx+rax*4]
   104ce:	cvtsi2sd xmm1,DWORD PTR [rbx+0x1c]
   104d3:	cvtsi2sd xmm0,r12d
   104d8:	divsd  xmm0,xmm1
   104dc:	call   35e0 <log@plt>
   104e1:	xorpd  xmm0,XMMWORD PTR [rsp]
   104e6:	call   35e0 <log@plt>
   104eb:	cmp    DWORD PTR [rbx+0x1c],r12d
   104ef:	jle    104b0 <PrintXMGRRegressionLine+0x40>
   104f1:	mov    ecx,ebp
   104f3:	mov    rdx,r14
   104f6:	mov    esi,0x1
   104fb:	mov    rdi,r13
   104fe:	mov    eax,0x1
   10503:	call   37c0 <__fprintf_chk@plt>
   10508:	cmp    DWORD PTR [rbx+0x10],ebp
   1050b:	jge    104b5 <PrintXMGRRegressionLine+0x45>
   1050d:	mov    rcx,r13
   10510:	mov    edx,0x2
   10515:	mov    esi,0x1
   1051a:	lea    rdi,[rip+0x2d76e]        # 3dc8f <_IO_stdin_used+0xc8f>
   10521:	call   37b0 <fwrite@plt>
   10526:	mov    eax,DWORD PTR [rbx+0x28]
   10529:	test   eax,eax
   1052b:	je     105d0 <PrintXMGRRegressionLine+0x160>
   10531:	mov    ebp,DWORD PTR [rbx+0x14]
   10534:	cmp    ebp,DWORD PTR [rbx+0x10]
   10537:	jg     105a5 <PrintXMGRRegressionLine+0x135>
   10539:	movq   xmm7,QWORD PTR [rip+0x2ce5f]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10541:	lea    r12,[rip+0x2d73e]        # 3dc86 <_IO_stdin_used+0xc86>
   10548:	movaps XMMWORD PTR [rsp],xmm7
   1054c:	nop    DWORD PTR [rax+0x0]
   10550:	pxor   xmm0,xmm0
   10554:	movss  xmm2,DWORD PTR [rbx+0x30]
   10559:	movss  xmm1,DWORD PTR [rbx+0x2c]
   1055e:	cvtsi2ss xmm0,ebp
   10562:	call   10120 <ExtremeValueP>
   10567:	movsd  xmm4,QWORD PTR [rip+0x2d881]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1056f:	subsd  xmm4,xmm0
   10573:	movapd xmm0,xmm4
   10577:	call   35e0 <log@plt>
   1057c:	xorpd  xmm0,XMMWORD PTR [rsp]
   10581:	call   35e0 <log@plt>
   10586:	mov    ecx,ebp
   10588:	mov    rdx,r12
   1058b:	mov    esi,0x1
   10590:	mov    rdi,r13
   10593:	mov    eax,0x1
   10598:	add    ebp,0x1
   1059b:	call   37c0 <__fprintf_chk@plt>
   105a0:	cmp    DWORD PTR [rbx+0x10],ebp
   105a3:	jge    10550 <PrintXMGRRegressionLine+0xe0>
   105a5:	add    rsp,0x10
   105a9:	mov    rcx,r13
   105ac:	mov    edx,0x2
   105b1:	mov    esi,0x1
   105b6:	pop    rbx
   105b7:	lea    rdi,[rip+0x2d6d1]        # 3dc8f <_IO_stdin_used+0xc8f>
   105be:	pop    rbp
   105bf:	pop    r12
   105c1:	pop    r13
   105c3:	pop    r14
   105c5:	jmp    37b0 <fwrite@plt>
   105ca:	nop    WORD PTR [rax+rax*1+0x0]
   105d0:	add    rsp,0x10
   105d4:	pop    rbx
   105d5:	pop    rbp
   105d6:	pop    r12
   105d8:	pop    r13
   105da:	pop    r14
   105dc:	ret    
   105dd:	nop    DWORD PTR [rax]

00000000000105e0 <ExtremeValueSetHistogram>:
   105e0:	endbr64 
   105e4:	push   r13
   105e6:	mov    r13d,esi
   105e9:	push   r12
   105eb:	push   rbp
   105ec:	push   rbx
   105ed:	mov    rbx,rdi
   105f0:	sub    rsp,0x28
   105f4:	mov    rdi,QWORD PTR [rdi+0x20]
   105f8:	movss  DWORD PTR [rsp+0x1c],xmm2
   105fe:	movss  DWORD PTR [rsp+0x18],xmm3
   10604:	test   rdi,rdi
   10607:	je     10624 <ExtremeValueSetHistogram+0x44>
   10609:	movss  DWORD PTR [rsp+0xc],xmm1
   1060f:	movss  DWORD PTR [rsp],xmm0
   10614:	call   3460 <free@plt>
   10619:	movss  xmm1,DWORD PTR [rsp+0xc]
   1061f:	movss  xmm0,DWORD PTR [rsp]
   10624:	mov    ebp,DWORD PTR [rbx+0xc]
   10627:	sub    ebp,DWORD PTR [rbx+0x8]
   1062a:	movss  DWORD PTR [rbx+0x30],xmm1
   1062f:	mov    esi,0x2b8
   10634:	lea    r12d,[rbp+0x1]
   10638:	mov    QWORD PTR [rbx+0x20],0x0
   10640:	lea    rdi,[rip+0x2d539]        # 3db80 <_IO_stdin_used+0xb80>
   10647:	mov    DWORD PTR [rbx+0x28],0x1
   1064e:	movsxd rdx,r12d
   10651:	movss  DWORD PTR [rbx+0x2c],xmm0
   10656:	shl    rdx,0x2
   1065a:	call   36810 <sre_malloc>
   1065f:	mov    QWORD PTR [rbx+0x20],rax
   10663:	test   r12d,r12d
   10666:	jle    1067f <ExtremeValueSetHistogram+0x9f>
   10668:	lea    rdx,[rax+rbp*4+0x4]
   1066d:	nop    DWORD PTR [rax]
   10670:	mov    DWORD PTR [rax],0x0
   10676:	add    rax,0x4
   1067a:	cmp    rdx,rax
   1067d:	jne    10670 <ExtremeValueSetHistogram+0x90>
   1067f:	mov    r12d,DWORD PTR [rbx+0x8]
   10683:	cmp    r12d,DWORD PTR [rbx+0xc]
   10687:	jg     10738 <ExtremeValueSetHistogram+0x158>
   1068d:	pxor   xmm4,xmm4
   10691:	cvtsi2ss xmm4,r12d
   10696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   106a0:	pxor   xmm5,xmm5
   106a4:	movss  xmm2,DWORD PTR [rbx+0x30]
   106a9:	movaps xmm0,xmm4
   106ac:	mov    ebp,r12d
   106af:	cvtsi2sd xmm5,DWORD PTR [rbx+0x1c]
   106b4:	movss  xmm1,DWORD PTR [rbx+0x2c]
   106b9:	add    r12d,0x1
   106bd:	movsd  QWORD PTR [rsp],xmm5
   106c2:	call   10120 <ExtremeValueP>
   106c7:	movsd  xmm3,QWORD PTR [rsp]
   106cc:	pxor   xmm4,xmm4
   106d0:	pxor   xmm6,xmm6
   106d4:	cvtsi2ss xmm4,r12d
   106d9:	movss  xmm2,DWORD PTR [rbx+0x30]
   106de:	movss  xmm1,DWORD PTR [rbx+0x2c]
   106e3:	mulsd  xmm3,xmm0
   106e7:	cvtsi2sd xmm6,DWORD PTR [rbx+0x1c]
   106ec:	movaps xmm0,xmm4
   106ef:	movss  DWORD PTR [rsp+0xc],xmm4
   106f5:	movsd  QWORD PTR [rsp],xmm6
   106fa:	movsd  QWORD PTR [rsp+0x10],xmm3
   10700:	call   10120 <ExtremeValueP>
   10705:	mulsd  xmm0,QWORD PTR [rsp]
   1070a:	mov    rdx,QWORD PTR [rbx+0x20]
   1070e:	mov    eax,ebp
   10710:	movsd  xmm3,QWORD PTR [rsp+0x10]
   10716:	sub    eax,DWORD PTR [rbx+0x8]
   10719:	cdqe   
   1071b:	cmp    r12d,DWORD PTR [rbx+0xc]
   1071f:	movss  xmm4,DWORD PTR [rsp+0xc]
   10725:	subsd  xmm3,xmm0
   10729:	cvtsd2ss xmm3,xmm3
   1072d:	movss  DWORD PTR [rdx+rax*4],xmm3
   10732:	jle    106a0 <ExtremeValueSetHistogram+0xc0>
   10738:	cvttss2si ecx,DWORD PTR [rsp+0x1c]
   1073e:	pxor   xmm0,xmm0
   10742:	movss  xmm5,DWORD PTR [rsp+0x18]
   10748:	mov    DWORD PTR [rbx+0x38],0x0
   1074f:	cvtsi2ss xmm0,ecx
   10753:	comiss xmm5,xmm0
   10756:	jb     10820 <ExtremeValueSetHistogram+0x240>
   1075c:	movsxd rdx,DWORD PTR [rbx+0x8]
   10760:	movsxd rax,ecx
   10763:	mov    rdi,QWORD PTR [rbx+0x20]
   10767:	xor    esi,esi
   10769:	sub    rax,rdx
   1076c:	shl    rax,0x2
   10770:	movss  xmm1,DWORD PTR [rdi+rax*1]
   10775:	comiss xmm1,DWORD PTR [rip+0x2d620]        # 3dd9c <_IO_stdin_used+0xd9c>
   1077c:	jb     107aa <ExtremeValueSetHistogram+0x1ca>
   1077e:	mov    rdx,QWORD PTR [rbx]
   10781:	mov    edx,DWORD PTR [rdx+rax*1]
   10784:	cmp    edx,0x4
   10787:	jle    107aa <ExtremeValueSetHistogram+0x1ca>
   10789:	pxor   xmm0,xmm0
   1078d:	add    esi,0x1
   10790:	cvtsi2ss xmm0,edx
   10794:	subss  xmm0,xmm1
   10798:	mulss  xmm0,xmm0
   1079c:	divss  xmm0,xmm1
   107a0:	addss  xmm0,DWORD PTR [rbx+0x38]
   107a5:	movss  DWORD PTR [rbx+0x38],xmm0
   107aa:	add    ecx,0x1
   107ad:	pxor   xmm0,xmm0
   107b1:	movss  xmm7,DWORD PTR [rsp+0x18]
   107b7:	add    rax,0x4
   107bb:	cvtsi2ss xmm0,ecx
   107bf:	comiss xmm7,xmm0
   107c2:	jae    10770 <ExtremeValueSetHistogram+0x190>
   107c4:	lea    eax,[r13+0x1]
   107c8:	cmp    eax,esi
   107ca:	jl     107e0 <ExtremeValueSetHistogram+0x200>
   107cc:	mov    DWORD PTR [rbx+0x3c],0x0
   107d3:	add    rsp,0x28
   107d7:	pop    rbx
   107d8:	pop    rbp
   107d9:	pop    r12
   107db:	pop    r13
   107dd:	ret    
   107de:	xchg   ax,ax
   107e0:	sub    esi,0x1
   107e3:	pxor   xmm0,xmm0
   107e7:	movsd  xmm1,QWORD PTR [rip+0x2d5f1]        # 3dde0 <_IO_stdin_used+0xde0>
   107ef:	pxor   xmm2,xmm2
   107f3:	sub    esi,r13d
   107f6:	cvtss2sd xmm2,DWORD PTR [rbx+0x38]
   107fb:	cvtsi2sd xmm0,esi
   107ff:	mulsd  xmm0,xmm1
   10803:	mulsd  xmm1,xmm2
   10807:	call   35d80 <IncompleteGamma>
   1080c:	cvtsd2ss xmm0,xmm0
   10810:	movss  DWORD PTR [rbx+0x3c],xmm0
   10815:	add    rsp,0x28
   10819:	pop    rbx
   1081a:	pop    rbp
   1081b:	pop    r12
   1081d:	pop    r13
   1081f:	ret    
   10820:	xor    esi,esi
   10822:	jmp    107c4 <ExtremeValueSetHistogram+0x1e4>
   10824:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1082f:	nop

0000000000010830 <EVDBasicFit>:
   10830:	endbr64 
   10834:	push   r15
   10836:	mov    esi,0x1ec
   1083b:	push   r14
   1083d:	mov    r14,rdi
   10840:	push   r13
   10842:	push   r12
   10844:	push   rbp
   10845:	push   rbx
   10846:	sub    rsp,0x28
   1084a:	mov    r12d,DWORD PTR [rdi+0x10]
   1084e:	sub    r12d,DWORD PTR [rdi+0x14]
   10852:	lea    rdi,[rip+0x2d327]        # 3db80 <_IO_stdin_used+0xb80>
   10859:	mov    rax,QWORD PTR fs:0x28
   10862:	mov    QWORD PTR [rsp+0x18],rax
   10867:	xor    eax,eax
   10869:	lea    ebx,[r12+0x1]
   1086e:	movsxd r15,ebx
   10871:	shl    r15,0x2
   10875:	mov    rdx,r15
   10878:	call   36810 <sre_malloc>
   1087d:	mov    rdx,r15
   10880:	mov    esi,0x1ed
   10885:	lea    rdi,[rip+0x2d2f4]        # 3db80 <_IO_stdin_used+0xb80>
   1088c:	mov    r13,rax
   1088f:	call   36810 <sre_malloc>
   10894:	mov    rbp,rax
   10897:	test   ebx,ebx
   10899:	jle    108ca <EVDBasicFit+0x9a>
   1089b:	mov    eax,r12d
   1089e:	lea    rdx,[rax*4+0x4]
   108a6:	xor    eax,eax
   108a8:	nop    DWORD PTR [rax+rax*1+0x0]
   108b0:	mov    DWORD PTR [rbp+rax*1+0x0],0x0
   108b8:	mov    DWORD PTR [r13+rax*1+0x0],0x0
   108c1:	add    rax,0x4
   108c5:	cmp    rdx,rax
   108c8:	jne    108b0 <EVDBasicFit+0x80>
   108ca:	mov    edx,DWORD PTR [r14+0x14]
   108ce:	mov    r9d,DWORD PTR [r14+0x10]
   108d2:	cmp    edx,r9d
   108d5:	jg     10999 <EVDBasicFit+0x169>
   108db:	mov    ecx,r9d
   108de:	movsxd rsi,edx
   108e1:	pxor   xmm1,xmm1
   108e5:	mov    rdi,QWORD PTR [r14]
   108e8:	sub    ecx,edx
   108ea:	cvtsi2ss xmm1,DWORD PTR [r14+0x1c]
   108f0:	lea    eax,[rdx+0x1]
   108f3:	lea    r10,[rsi+rcx*1+0x2]
   108f8:	movsxd rcx,DWORD PTR [r14+0x8]
   108fc:	neg    rsi
   108ff:	cdqe   
   10901:	shl    rsi,0x2
   10905:	neg    rcx
   10908:	lea    r8,[rdi+rcx*4]
   1090c:	lea    rdi,[r13+rsi*1+0x0]
   10911:	xor    ecx,ecx
   10913:	add    rsi,rbp
   10916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10920:	add    ecx,DWORD PTR [r8+rax*4-0x4]
   10925:	pxor   xmm0,xmm0
   10929:	cvtsi2ss xmm0,ecx
   1092d:	divss  xmm0,xmm1
   10931:	movss  DWORD PTR [rdi+rax*4-0x4],xmm0
   10937:	pxor   xmm0,xmm0
   1093b:	cvtsi2ss xmm0,eax
   1093f:	movss  DWORD PTR [rsi+rax*4-0x4],xmm0
   10945:	add    rax,0x1
   10949:	cmp    r10,rax
   1094c:	jne    10920 <EVDBasicFit+0xf0>
   1094e:	cmp    edx,r9d
   10951:	jge    10999 <EVDBasicFit+0x169>
   10953:	mov    ebx,edx
   10955:	nop    DWORD PTR [rax]
   10958:	mov    eax,ebx
   1095a:	pxor   xmm0,xmm0
   1095e:	sub    eax,edx
   10960:	cdqe   
   10962:	cvtss2sd xmm0,DWORD PTR [r13+rax*4+0x0]
   10969:	call   35e0 <log@plt>
   1096e:	xorpd  xmm0,XMMWORD PTR [rip+0x2ca2a]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10976:	call   35e0 <log@plt>
   1097b:	mov    edx,DWORD PTR [r14+0x14]
   1097f:	mov    eax,ebx
   10981:	add    ebx,0x1
   10984:	cvtsd2ss xmm0,xmm0
   10988:	sub    eax,edx
   1098a:	cdqe   
   1098c:	movss  DWORD PTR [r13+rax*4+0x0],xmm0
   10993:	cmp    DWORD PTR [r14+0x10],ebx
   10997:	jg     10958 <EVDBasicFit+0x128>
   10999:	lea    rcx,[rsp+0x10]
   1099e:	lea    r9,[rsp+0x14]
   109a3:	mov    edx,r12d
   109a6:	mov    rsi,r13
   109a9:	lea    r8,[rsp+0xc]
   109ae:	mov    rdi,rbp
   109b1:	call   35790 <Linefit>
   109b6:	movss  xmm0,DWORD PTR [rsp+0x10]
   109bc:	movss  xmm2,DWORD PTR [rsp+0xc]
   109c2:	mov    rdi,r14
   109c5:	movss  xmm3,DWORD PTR [rip+0x2d403]        # 3ddd0 <_IO_stdin_used+0xdd0>
   109cd:	mov    esi,0x2
   109d2:	xorps  xmm0,xmm3
   109d5:	movaps xmm1,xmm2
   109d8:	divss  xmm0,xmm2
   109dc:	xorps  xmm1,xmm3
   109df:	pxor   xmm2,xmm2
   109e3:	pxor   xmm3,xmm3
   109e7:	cvtsi2ss xmm2,DWORD PTR [r14+0x14]
   109ed:	cvtsi2ss xmm3,DWORD PTR [r14+0x10]
   109f3:	call   105e0 <ExtremeValueSetHistogram>
   109f8:	mov    rdi,rbp
   109fb:	call   3460 <free@plt>
   10a00:	mov    rdi,r13
   10a03:	call   3460 <free@plt>
   10a08:	mov    rax,QWORD PTR [rsp+0x18]
   10a0d:	xor    rax,QWORD PTR fs:0x28
   10a16:	jne    10a27 <EVDBasicFit+0x1f7>
   10a18:	add    rsp,0x28
   10a1c:	pop    rbx
   10a1d:	pop    rbp
   10a1e:	pop    r12
   10a20:	pop    r13
   10a22:	pop    r14
   10a24:	pop    r15
   10a26:	ret    
   10a27:	call   3570 <__stack_chk_fail@plt>
   10a2c:	nop    DWORD PTR [rax+0x0]

0000000000010a30 <ExtremeValueP2>:
   10a30:	endbr64 
   10a34:	push   rbx
   10a35:	mov    ebx,edi
   10a37:	call   10120 <ExtremeValueP>
   10a3c:	movapd xmm1,xmm0
   10a40:	pxor   xmm0,xmm0
   10a44:	cvtsi2sd xmm0,ebx
   10a48:	mulsd  xmm0,xmm1
   10a4c:	movsd  xmm1,QWORD PTR [rip+0x2d3b4]        # 3de08 <_IO_stdin_used+0xe08>
   10a54:	comisd xmm1,xmm0
   10a58:	jbe    10a60 <ExtremeValueP2+0x30>
   10a5a:	pop    rbx
   10a5b:	ret    
   10a5c:	nop    DWORD PTR [rax+0x0]
   10a60:	xorpd  xmm0,XMMWORD PTR [rip+0x2c938]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10a68:	call   3800 <exp@plt>
   10a6d:	movsd  xmm1,QWORD PTR [rip+0x2d37b]        # 3ddf0 <_IO_stdin_used+0xdf0>
   10a75:	pop    rbx
   10a76:	subsd  xmm1,xmm0
   10a7a:	movapd xmm0,xmm1
   10a7e:	ret    
   10a7f:	nop

0000000000010a80 <ExtremeValueE>:
   10a80:	endbr64 
   10a84:	push   rbx
   10a85:	mov    ebx,edi
   10a87:	call   10120 <ExtremeValueP>
   10a8c:	movapd xmm1,xmm0
   10a90:	pxor   xmm0,xmm0
   10a94:	cvtsi2sd xmm0,ebx
   10a98:	pop    rbx
   10a99:	mulsd  xmm0,xmm1
   10a9d:	ret    
   10a9e:	xchg   ax,ax

0000000000010aa0 <EVDrandom>:
   10aa0:	endbr64 
   10aa4:	push   rbx
   10aa5:	xor    ebx,ebx
   10aa7:	sub    rsp,0x10
   10aab:	movss  DWORD PTR [rsp+0x8],xmm0
   10ab1:	movss  DWORD PTR [rsp+0xc],xmm1
   10ab7:	nop    WORD PTR [rax+rax*1+0x0]
   10ac0:	call   36060 <sre_random>
   10ac5:	pxor   xmm3,xmm3
   10ac9:	cvtsd2ss xmm0,xmm0
   10acd:	ucomiss xmm0,xmm3
   10ad0:	setnp  al
   10ad3:	cmovne eax,ebx
   10ad6:	test   al,al
   10ad8:	jne    10ac0 <EVDrandom+0x20>
   10ada:	ucomiss xmm0,DWORD PTR [rip+0x2c8bb]        # 3d39c <_IO_stdin_used+0x39c>
   10ae1:	setnp  dl
   10ae4:	cmove  eax,edx
   10ae7:	test   al,al
   10ae9:	jne    10ac0 <EVDrandom+0x20>
   10aeb:	cvtss2sd xmm0,xmm0
   10aef:	call   35e0 <log@plt>
   10af4:	xorpd  xmm0,XMMWORD PTR [rip+0x2c8a4]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10afc:	call   35e0 <log@plt>
   10b01:	pxor   xmm2,xmm2
   10b05:	pxor   xmm1,xmm1
   10b09:	cvtss2sd xmm2,DWORD PTR [rsp+0xc]
   10b0f:	divsd  xmm0,xmm2
   10b13:	cvtss2sd xmm1,DWORD PTR [rsp+0x8]
   10b19:	add    rsp,0x10
   10b1d:	pop    rbx
   10b1e:	subsd  xmm1,xmm0
   10b22:	pxor   xmm0,xmm0
   10b26:	cvtsd2ss xmm0,xmm1
   10b2a:	ret    
   10b2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000010b30 <Lawless416>:
   10b30:	endbr64 
   10b34:	push   r15
   10b36:	pxor   xmm7,xmm7
   10b3a:	mov    r15,rcx
   10b3d:	push   r14
   10b3f:	cvtss2sd xmm7,xmm0
   10b43:	mov    r14,r8
   10b46:	push   r13
   10b48:	push   r12
   10b4a:	push   rbp
   10b4b:	push   rbx
   10b4c:	sub    rsp,0x68
   10b50:	movss  DWORD PTR [rsp+0x5c],xmm0
   10b56:	movsd  QWORD PTR [rsp+0x50],xmm7
   10b5c:	test   edx,edx
   10b5e:	jle    10d30 <Lawless416+0x200>
   10b64:	xorpd  xmm7,XMMWORD PTR [rip+0x2c834]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10b6c:	mov    rbp,rdi
   10b6f:	mov    r12,rsi
   10b72:	xor    ebx,ebx
   10b74:	movsd  xmm6,QWORD PTR [rip+0x2d274]        # 3ddf0 <_IO_stdin_used+0xdf0>
   10b7c:	pxor   xmm3,xmm3
   10b80:	lea    r13d,[rdx-0x1]
   10b84:	movsd  QWORD PTR [rsp+0x8],xmm7
   10b8a:	movapd xmm4,xmm3
   10b8e:	movapd xmm5,xmm3
   10b92:	movsd  QWORD PTR [rsp+0x18],xmm3
   10b98:	movsd  QWORD PTR [rsp+0x10],xmm3
   10b9e:	movsd  QWORD PTR [rsp+0x48],xmm6
   10ba4:	jmp    10bb3 <Lawless416+0x83>
   10ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10bb0:	mov    rbx,rax
   10bb3:	movsd  xmm1,QWORD PTR [rsp+0x48]
   10bb9:	test   r12,r12
   10bbc:	je     10bc8 <Lawless416+0x98>
   10bbe:	pxor   xmm1,xmm1
   10bc2:	cvtsi2sd xmm1,DWORD PTR [r12+rbx*4]
   10bc8:	pxor   xmm0,xmm0
   10bcc:	movsd  QWORD PTR [rsp+0x40],xmm3
   10bd2:	cvtss2sd xmm0,DWORD PTR [rbp+rbx*4+0x0]
   10bd8:	movapd xmm2,xmm0
   10bdc:	movsd  QWORD PTR [rsp+0x38],xmm5
   10be2:	mulsd  xmm2,xmm1
   10be6:	movsd  QWORD PTR [rsp+0x30],xmm1
   10bec:	mulsd  xmm0,QWORD PTR [rsp+0x8]
   10bf2:	addsd  xmm4,xmm2
   10bf6:	movsd  QWORD PTR [rsp+0x20],xmm2
   10bfc:	movsd  QWORD PTR [rsp+0x28],xmm4
   10c02:	call   3800 <exp@plt>
   10c07:	movsd  xmm2,QWORD PTR [rsp+0x20]
   10c0d:	mulsd  xmm2,xmm0
   10c11:	movsd  xmm0,QWORD PTR [rsp+0x8]
   10c17:	addsd  xmm2,QWORD PTR [rsp+0x10]
   10c1d:	movsd  QWORD PTR [rsp+0x10],xmm2
   10c23:	pxor   xmm2,xmm2
   10c27:	cvtss2sd xmm2,DWORD PTR [rbp+rbx*4+0x0]
   10c2d:	mulsd  xmm0,xmm2
   10c31:	movsd  QWORD PTR [rsp+0x20],xmm2
   10c37:	call   3800 <exp@plt>
   10c3c:	movsd  xmm2,QWORD PTR [rsp+0x20]
   10c42:	movsd  xmm1,QWORD PTR [rsp+0x30]
   10c48:	movapd xmm6,xmm0
   10c4c:	movapd xmm5,xmm2
   10c50:	movsd  QWORD PTR [rsp+0x20],xmm1
   10c56:	mulsd  xmm5,xmm1
   10c5a:	movapd xmm0,xmm5
   10c5e:	mulsd  xmm0,xmm2
   10c62:	mulsd  xmm0,xmm6
   10c66:	movsd  xmm6,QWORD PTR [rsp+0x18]
   10c6c:	addsd  xmm6,xmm0
   10c70:	pxor   xmm0,xmm0
   10c74:	cvtss2sd xmm0,DWORD PTR [rbp+rbx*4+0x0]
   10c7a:	mulsd  xmm0,QWORD PTR [rsp+0x8]
   10c80:	movsd  QWORD PTR [rsp+0x18],xmm6
   10c86:	call   3800 <exp@plt>
   10c8b:	movsd  xmm1,QWORD PTR [rsp+0x20]
   10c91:	cmp    r13,rbx
   10c94:	lea    rax,[rbx+0x1]
   10c98:	movsd  xmm5,QWORD PTR [rsp+0x38]
   10c9e:	movsd  xmm3,QWORD PTR [rsp+0x40]
   10ca4:	mulsd  xmm0,xmm1
   10ca8:	movsd  xmm4,QWORD PTR [rsp+0x28]
   10cae:	addsd  xmm3,xmm1
   10cb2:	addsd  xmm5,xmm0
   10cb6:	jne    10bb0 <Lawless416+0x80>
   10cbc:	divsd  xmm4,xmm3
   10cc0:	movsd  xmm0,QWORD PTR [rsp+0x10]
   10cc6:	movsd  xmm7,QWORD PTR [rsp+0x48]
   10ccc:	movapd xmm1,xmm7
   10cd0:	divsd  xmm1,QWORD PTR [rsp+0x50]
   10cd6:	divsd  xmm0,xmm5
   10cda:	subsd  xmm1,xmm4
   10cde:	addsd  xmm1,xmm0
   10ce2:	mulsd  xmm0,xmm0
   10ce6:	cvtsd2ss xmm1,xmm1
   10cea:	movss  DWORD PTR [r15],xmm1
   10cef:	movsd  xmm1,QWORD PTR [rsp+0x18]
   10cf5:	divsd  xmm1,xmm5
   10cf9:	subsd  xmm0,xmm1
   10cfd:	movss  xmm1,DWORD PTR [rsp+0x5c]
   10d03:	mulss  xmm1,xmm1
   10d07:	cvtss2sd xmm1,xmm1
   10d0b:	divsd  xmm7,xmm1
   10d0f:	subsd  xmm0,xmm7
   10d13:	cvtsd2ss xmm0,xmm0
   10d17:	movss  DWORD PTR [r14],xmm0
   10d1c:	add    rsp,0x68
   10d20:	pop    rbx
   10d21:	pop    rbp
   10d22:	pop    r12
   10d24:	pop    r13
   10d26:	pop    r14
   10d28:	pop    r15
   10d2a:	ret    
   10d2b:	nop    DWORD PTR [rax+rax*1+0x0]
   10d30:	movsd  xmm6,QWORD PTR [rip+0x2d0b8]        # 3ddf0 <_IO_stdin_used+0xdf0>
   10d38:	pxor   xmm3,xmm3
   10d3c:	movapd xmm4,xmm3
   10d40:	movsd  QWORD PTR [rsp+0x18],xmm3
   10d46:	movapd xmm5,xmm3
   10d4a:	movsd  QWORD PTR [rsp+0x10],xmm3
   10d50:	movsd  QWORD PTR [rsp+0x48],xmm6
   10d56:	jmp    10cbc <Lawless416+0x18c>
   10d5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000010d60 <Lawless422>:
   10d60:	endbr64 
   10d64:	push   r15
   10d66:	pxor   xmm5,xmm5
   10d6a:	mov    r15,r8
   10d6d:	push   r14
   10d6f:	cvtss2sd xmm5,xmm1
   10d73:	mov    r14,r9
   10d76:	push   r13
   10d78:	push   r12
   10d7a:	push   rbp
   10d7b:	push   rbx
   10d7c:	sub    rsp,0x78
   10d80:	movsd  QWORD PTR [rsp+0x50],xmm5
   10d86:	xorpd  xmm5,XMMWORD PTR [rip+0x2c612]        # 3d3a0 <_IO_stdin_used+0x3a0>
   10d8e:	mov    DWORD PTR [rsp+0x5c],ecx
   10d92:	movss  DWORD PTR [rsp+0x60],xmm0
   10d98:	movss  DWORD PTR [rsp+0x64],xmm1
   10d9e:	movsd  QWORD PTR [rsp+0x10],xmm5
   10da4:	test   edx,edx
   10da6:	jle    11030 <Lawless422+0x2d0>
   10dac:	pxor   xmm2,xmm2
   10db0:	mov    rbx,rdi
   10db3:	mov    rbp,rsi
   10db6:	xor    r12d,r12d
   10db9:	movsd  xmm7,QWORD PTR [rip+0x2d02f]        # 3ddf0 <_IO_stdin_used+0xdf0>
   10dc1:	lea    r13d,[rdx-0x1]
   10dc5:	movsd  QWORD PTR [rsp+0x18],xmm2
   10dcb:	movsd  QWORD PTR [rsp+0x30],xmm2
   10dd1:	movsd  QWORD PTR [rsp+0x28],xmm2
   10dd7:	movsd  QWORD PTR [rsp+0x20],xmm2
   10ddd:	movsd  QWORD PTR [rsp+0x48],xmm7
   10de3:	jmp    10deb <Lawless422+0x8b>
   10de5:	nop    DWORD PTR [rax]
   10de8:	mov    r12,rdx
   10deb:	movsd  xmm7,QWORD PTR [rsp+0x48]
   10df1:	movsd  QWORD PTR [rsp+0x8],xmm7
   10df7:	test   rbp,rbp
   10dfa:	je     10e0d <Lawless422+0xad>
   10dfc:	pxor   xmm3,xmm3
   10e00:	cvtsi2sd xmm3,DWORD PTR [rbp+r12*4+0x0]
   10e07:	movsd  QWORD PTR [rsp+0x8],xmm3
   10e0d:	movsd  xmm1,QWORD PTR [rsp+0x8]
   10e13:	pxor   xmm0,xmm0
   10e17:	movsd  xmm5,QWORD PTR [rsp+0x18]
   10e1d:	movsd  QWORD PTR [rsp+0x40],xmm2
   10e23:	cvtss2sd xmm0,DWORD PTR [rbx+r12*4]
   10e29:	mulsd  xmm1,xmm0
   10e2d:	mulsd  xmm0,QWORD PTR [rsp+0x10]
   10e33:	addsd  xmm5,xmm1
   10e37:	movsd  QWORD PTR [rsp+0x18],xmm5
   10e3d:	call   3800 <exp@plt>
   10e42:	mulsd  xmm0,QWORD PTR [rsp+0x8]
   10e48:	movsd  xmm4,QWORD PTR [rsp+0x20]
   10e4e:	pxor   xmm1,xmm1
   10e52:	cvtss2sd xmm1,DWORD PTR [rbx+r12*4]
   10e58:	movsd  QWORD PTR [rsp+0x38],xmm1
   10e5e:	addsd  xmm4,xmm0
   10e62:	movsd  xmm0,QWORD PTR [rsp+0x10]
   10e68:	mulsd  xmm0,xmm1
   10e6c:	movsd  QWORD PTR [rsp+0x20],xmm4
   10e72:	call   3800 <exp@plt>
   10e77:	movsd  xmm1,QWORD PTR [rsp+0x38]
   10e7d:	mulsd  xmm1,QWORD PTR [rsp+0x8]
   10e83:	mulsd  xmm1,xmm0
   10e87:	movsd  xmm0,QWORD PTR [rsp+0x10]
   10e8d:	addsd  xmm1,QWORD PTR [rsp+0x28]
   10e93:	movsd  QWORD PTR [rsp+0x28],xmm1
   10e99:	pxor   xmm1,xmm1
   10e9d:	cvtss2sd xmm1,DWORD PTR [rbx+r12*4]
   10ea3:	mulsd  xmm0,xmm1
   10ea7:	movsd  QWORD PTR [rsp+0x38],xmm1
   10ead:	call   3800 <exp@plt>
   10eb2:	movsd  xmm6,QWORD PTR [rsp+0x8]
   10eb8:	movsd  xmm1,QWORD PTR [rsp+0x38]
   10ebe:	lea    rdx,[r12+0x1]
   10ec3:	movapd xmm3,xmm0
   10ec7:	movsd  xmm2,QWORD PTR [rsp+0x40]
   10ecd:	movapd xmm0,xmm6
   10ed1:	mulsd  xmm0,xmm1
   10ed5:	addsd  xmm2,xmm6
   10ed9:	mulsd  xmm0,xmm1
   10edd:	mulsd  xmm0,xmm3
   10ee1:	addsd  xmm0,QWORD PTR [rsp+0x30]
   10ee7:	movsd  QWORD PTR [rsp+0x30],xmm0
   10eed:	cmp    r12,r13
   10ef0:	jne    10de8 <Lawless422+0x88>
   10ef6:	movsd  xmm1,QWORD PTR [rsp+0x10]
   10efc:	pxor   xmm3,xmm3
   10f00:	pxor   xmm4,xmm4
   10f04:	movsd  QWORD PTR [rsp+0x68],xmm2
   10f0a:	cvtss2sd xmm3,DWORD PTR [rsp+0x60]
   10f10:	cvtsi2sd xmm4,DWORD PTR [rsp+0x5c]
   10f16:	movsd  QWORD PTR [rsp+0x8],xmm3
   10f1c:	mulsd  xmm1,xmm3
   10f20:	movsd  QWORD PTR [rsp+0x38],xmm4
   10f26:	movapd xmm0,xmm1
   10f2a:	movsd  QWORD PTR [rsp+0x10],xmm1
   10f30:	call   3800 <exp@plt>
   10f35:	movsd  xmm4,QWORD PTR [rsp+0x38]
   10f3b:	movsd  xmm1,QWORD PTR [rsp+0x10]
   10f41:	movapd xmm5,xmm0
   10f45:	mulsd  xmm5,xmm4
   10f49:	movapd xmm0,xmm1
   10f4d:	mulsd  xmm4,QWORD PTR [rsp+0x8]
   10f53:	addsd  xmm5,QWORD PTR [rsp+0x20]
   10f59:	movsd  QWORD PTR [rsp+0x20],xmm1
   10f5f:	movsd  QWORD PTR [rsp+0x40],xmm5
   10f65:	movsd  QWORD PTR [rsp+0x38],xmm4
   10f6b:	call   3800 <exp@plt>
   10f70:	movsd  xmm1,QWORD PTR [rsp+0x20]
   10f76:	movsd  QWORD PTR [rsp+0x10],xmm0
   10f7c:	movapd xmm0,xmm1
   10f80:	call   3800 <exp@plt>
   10f85:	movsd  xmm4,QWORD PTR [rsp+0x38]
   10f8b:	movsd  xmm3,QWORD PTR [rsp+0x10]
   10f91:	movsd  xmm1,QWORD PTR [rsp+0x18]
   10f97:	movsd  xmm2,QWORD PTR [rsp+0x68]
   10f9d:	movapd xmm7,xmm0
   10fa1:	movsd  xmm0,QWORD PTR [rsp+0x8]
   10fa7:	mulsd  xmm3,xmm4
   10fab:	movsd  xmm5,QWORD PTR [rsp+0x40]
   10fb1:	divsd  xmm1,xmm2
   10fb5:	addsd  xmm3,QWORD PTR [rsp+0x28]
   10fbb:	movsd  xmm8,QWORD PTR [rsp+0x48]
   10fc2:	mulsd  xmm0,xmm4
   10fc6:	movapd xmm6,xmm8
   10fcb:	divsd  xmm6,QWORD PTR [rsp+0x50]
   10fd1:	mulsd  xmm0,xmm7
   10fd5:	addsd  xmm0,QWORD PTR [rsp+0x30]
   10fdb:	divsd  xmm3,xmm5
   10fdf:	subsd  xmm6,xmm1
   10fe3:	movapd xmm1,xmm6
   10fe7:	divsd  xmm0,xmm5
   10feb:	addsd  xmm1,xmm3
   10fef:	mulsd  xmm3,xmm3
   10ff3:	cvtsd2ss xmm1,xmm1
   10ff7:	movss  DWORD PTR [r15],xmm1
   10ffc:	subsd  xmm3,xmm0
   11000:	movss  xmm0,DWORD PTR [rsp+0x64]
   11006:	mulss  xmm0,xmm0
   1100a:	cvtss2sd xmm0,xmm0
   1100e:	divsd  xmm8,xmm0
   11013:	subsd  xmm3,xmm8
   11018:	cvtsd2ss xmm3,xmm3
   1101c:	movss  DWORD PTR [r14],xmm3
   11021:	add    rsp,0x78
   11025:	pop    rbx
   11026:	pop    rbp
   11027:	pop    r12
   11029:	pop    r13
   1102b:	pop    r14
   1102d:	pop    r15
   1102f:	ret    
   11030:	movsd  xmm7,QWORD PTR [rip+0x2cdb8]        # 3ddf0 <_IO_stdin_used+0xdf0>
   11038:	pxor   xmm2,xmm2
   1103c:	movsd  QWORD PTR [rsp+0x18],xmm2
   11042:	movsd  QWORD PTR [rsp+0x30],xmm2
   11048:	movsd  QWORD PTR [rsp+0x28],xmm2
   1104e:	movsd  QWORD PTR [rsp+0x20],xmm2
   11054:	movsd  QWORD PTR [rsp+0x48],xmm7
   1105a:	jmp    10ef6 <Lawless422+0x196>
   1105f:	nop

0000000000011060 <EVDMaxLikelyFit>:
   11060:	endbr64 
   11064:	push   r15
   11066:	push   r14
   11068:	push   r13
   1106a:	mov    r13d,edx
   1106d:	push   r12
   1106f:	mov    r12,rdi
   11072:	push   rbp
   11073:	mov    rbp,rsi
   11076:	push   rbx
   11077:	mov    ebx,0x64
   1107c:	sub    rsp,0x48
   11080:	movss  xmm1,DWORD PTR [rip+0x2cd18]        # 3dda0 <_IO_stdin_used+0xda0>
   11088:	mov    QWORD PTR [rsp+0x20],rcx
   1108d:	lea    r15,[rsp+0x34]
   11092:	lea    r14,[rsp+0x30]
   11097:	mov    QWORD PTR [rsp+0x28],r8
   1109c:	mov    rax,QWORD PTR fs:0x28
   110a5:	mov    QWORD PTR [rsp+0x38],rax
   110aa:	xor    eax,eax
   110ac:	jmp    110d4 <EVDMaxLikelyFit+0x74>
   110ae:	xchg   ax,ax
   110b0:	divss  xmm0,DWORD PTR [rsp+0x34]
   110b6:	subss  xmm1,xmm0
   110ba:	pxor   xmm6,xmm6
   110be:	comiss xmm6,xmm1
   110c1:	jb     110cb <EVDMaxLikelyFit+0x6b>
   110c3:	movss  xmm1,DWORD PTR [rip+0x2ccd9]        # 3dda4 <_IO_stdin_used+0xda4>
   110cb:	sub    ebx,0x1
   110ce:	je     11220 <EVDMaxLikelyFit+0x1c0>
   110d4:	movaps xmm0,xmm1
   110d7:	mov    r8,r15
   110da:	mov    rcx,r14
   110dd:	mov    edx,r13d
   110e0:	mov    rsi,rbp
   110e3:	mov    rdi,r12
   110e6:	movss  DWORD PTR [rsp+0x18],xmm1
   110ec:	call   10b30 <Lawless416>
   110f1:	movss  xmm0,DWORD PTR [rsp+0x30]
   110f7:	movss  xmm5,DWORD PTR [rip+0x2ccb5]        # 3ddb4 <_IO_stdin_used+0xdb4>
   110ff:	movss  xmm1,DWORD PTR [rsp+0x18]
   11105:	movaps xmm2,xmm0
   11108:	andps  xmm2,XMMWORD PTR [rip+0x2ccb1]        # 3ddc0 <_IO_stdin_used+0xdc0>
   1110f:	comiss xmm5,xmm2
   11112:	jbe    110b0 <EVDMaxLikelyFit+0x50>
   11114:	test   r13d,r13d
   11117:	jle    113d2 <EVDMaxLikelyFit+0x372>
   1111d:	movaps xmm7,xmm1
   11120:	xorps  xmm7,XMMWORD PTR [rip+0x2cca9]        # 3ddd0 <_IO_stdin_used+0xdd0>
   11127:	pxor   xmm4,xmm4
   1112b:	xor    ebx,ebx
   1112d:	sub    r13d,0x1
   11131:	movapd xmm3,xmm4
   11135:	movss  DWORD PTR [rsp+0x1c],xmm7
   1113b:	jmp    11143 <EVDMaxLikelyFit+0xe3>
   1113d:	nop    DWORD PTR [rax]
   11140:	mov    rbx,rax
   11143:	mov    rax,QWORD PTR [rip+0x2cca6]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1114a:	movq   xmm2,rax
   1114f:	test   rbp,rbp
   11152:	je     1115e <EVDMaxLikelyFit+0xfe>
   11154:	pxor   xmm2,xmm2
   11158:	cvtsi2sd xmm2,DWORD PTR [rbp+rbx*4+0x0]
   1115e:	movss  xmm0,DWORD PTR [rsp+0x1c]
   11164:	mulss  xmm0,DWORD PTR [r12+rbx*4]
   1116a:	movsd  QWORD PTR [rsp+0x10],xmm4
   11170:	movsd  QWORD PTR [rsp+0x8],xmm3
   11176:	movsd  QWORD PTR [rsp],xmm2
   1117b:	movss  DWORD PTR [rsp+0x18],xmm1
   11181:	cvtss2sd xmm0,xmm0
   11185:	call   3800 <exp@plt>
   1118a:	cmp    rbx,r13
   1118d:	lea    rax,[rbx+0x1]
   11191:	movsd  xmm2,QWORD PTR [rsp]
   11196:	movsd  xmm3,QWORD PTR [rsp+0x8]
   1119c:	movsd  xmm4,QWORD PTR [rsp+0x10]
   111a2:	movss  xmm1,DWORD PTR [rsp+0x18]
   111a8:	mulsd  xmm0,xmm2
   111ac:	addsd  xmm4,xmm2
   111b0:	addsd  xmm3,xmm0
   111b4:	jne    11140 <EVDMaxLikelyFit+0xe0>
   111b6:	divsd  xmm3,xmm4
   111ba:	movss  DWORD PTR [rsp+0x18],xmm1
   111c0:	movapd xmm0,xmm3
   111c4:	call   35e0 <log@plt>
   111c9:	mov    rax,QWORD PTR [rsp+0x28]
   111ce:	movss  xmm1,DWORD PTR [rsp+0x18]
   111d4:	xorpd  xmm0,XMMWORD PTR [rip+0x2c1c4]        # 3d3a0 <_IO_stdin_used+0x3a0>
   111dc:	movss  DWORD PTR [rax],xmm1
   111e0:	cvtss2sd xmm1,xmm1
   111e4:	mov    rax,QWORD PTR [rsp+0x20]
   111e9:	divsd  xmm0,xmm1
   111ed:	cvtsd2ss xmm0,xmm0
   111f1:	movss  DWORD PTR [rax],xmm0
   111f5:	mov    eax,0x1
   111fa:	mov    rdx,QWORD PTR [rsp+0x38]
   111ff:	xor    rdx,QWORD PTR fs:0x28
   11208:	jne    113f4 <EVDMaxLikelyFit+0x394>
   1120e:	add    rsp,0x48
   11212:	pop    rbx
   11213:	pop    rbp
   11214:	pop    r12
   11216:	pop    r13
   11218:	pop    r14
   1121a:	pop    r15
   1121c:	ret    
   1121d:	nop    DWORD PTR [rax]
   11220:	mov    r8,r15
   11223:	mov    rcx,r14
   11226:	mov    edx,r13d
   11229:	mov    rsi,rbp
   1122c:	movss  xmm0,DWORD PTR [rip+0x2cb6c]        # 3dda0 <_IO_stdin_used+0xda0>
   11234:	mov    rdi,r12
   11237:	call   10b30 <Lawless416>
   1123c:	pxor   xmm7,xmm7
   11240:	mov    r8,r15
   11243:	mov    rcx,r14
   11246:	comiss xmm7,DWORD PTR [rsp+0x30]
   1124b:	ja     1137b <EVDMaxLikelyFit+0x31b>
   11251:	mov    edx,r13d
   11254:	mov    rsi,rbp
   11257:	mov    rdi,r12
   1125a:	mov    ebx,0x3e6
   1125f:	movss  xmm0,DWORD PTR [rip+0x2cb49]        # 3ddb0 <_IO_stdin_used+0xdb0>
   11267:	call   10b30 <Lawless416>
   1126c:	movss  xmm2,DWORD PTR [rip+0x2cb3c]        # 3ddb0 <_IO_stdin_used+0xdb0>
   11274:	jmp    112bc <EVDMaxLikelyFit+0x25c>
   11276:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11280:	cvtss2sd xmm2,xmm2
   11284:	mov    r8,r15
   11287:	mov    rcx,r14
   1128a:	mov    edx,r13d
   1128d:	addsd  xmm2,QWORD PTR [rip+0x2cb7b]        # 3de10 <_IO_stdin_used+0xe10>
   11295:	mov    rsi,rbp
   11298:	mov    rdi,r12
   1129b:	cvtsd2ss xmm2,xmm2
   1129f:	movaps xmm0,xmm2
   112a2:	movss  DWORD PTR [rsp+0x18],xmm2
   112a8:	call   10b30 <Lawless416>
   112ad:	sub    ebx,0x1
   112b0:	movss  xmm2,DWORD PTR [rsp+0x18]
   112b6:	je     113cb <EVDMaxLikelyFit+0x36b>
   112bc:	movss  xmm0,DWORD PTR [rsp+0x30]
   112c2:	pxor   xmm7,xmm7
   112c6:	comiss xmm0,xmm7
   112c9:	ja     11280 <EVDMaxLikelyFit+0x220>
   112cb:	movss  xmm3,DWORD PTR [rip+0x2cacd]        # 3dda0 <_IO_stdin_used+0xda0>
   112d3:	mov    ebx,0x64
   112d8:	jmp    11318 <EVDMaxLikelyFit+0x2b8>
   112da:	nop    WORD PTR [rax+rax*1+0x0]
   112e0:	pxor   xmm7,xmm7
   112e4:	movss  xmm3,DWORD PTR [rsp+0x8]
   112ea:	movss  xmm2,DWORD PTR [rsp]
   112ef:	cmpltss xmm7,xmm0
   112f4:	movaps xmm0,xmm7
   112f7:	movaps xmm4,xmm7
   112fa:	andps  xmm2,xmm7
   112fd:	andnps xmm0,xmm3
   11300:	andnps xmm4,xmm1
   11303:	andps  xmm1,xmm7
   11306:	movaps xmm3,xmm0
   11309:	orps   xmm2,xmm4
   1130c:	orps   xmm3,xmm1
   1130f:	sub    ebx,0x1
   11312:	je     113cb <EVDMaxLikelyFit+0x36b>
   11318:	movaps xmm1,xmm3
   1131b:	mov    r8,r15
   1131e:	mov    rcx,r14
   11321:	mov    edx,r13d
   11324:	addss  xmm1,xmm2
   11328:	mov    rsi,rbp
   1132b:	mov    rdi,r12
   1132e:	movss  DWORD PTR [rsp+0x8],xmm3
   11334:	mulss  xmm1,DWORD PTR [rip+0x2c3f4]        # 3d730 <_IO_stdin_used+0x730>
   1133c:	movss  DWORD PTR [rsp],xmm2
   11341:	movaps xmm0,xmm1
   11344:	movss  DWORD PTR [rsp+0x18],xmm1
   1134a:	call   10b30 <Lawless416>
   1134f:	movss  xmm0,DWORD PTR [rsp+0x30]
   11355:	movss  xmm7,DWORD PTR [rip+0x2ca57]        # 3ddb4 <_IO_stdin_used+0xdb4>
   1135d:	movss  xmm1,DWORD PTR [rsp+0x18]
   11363:	movaps xmm4,xmm0
   11366:	andps  xmm4,XMMWORD PTR [rip+0x2ca53]        # 3ddc0 <_IO_stdin_used+0xdc0>
   1136d:	comiss xmm7,xmm4
   11370:	jbe    112e0 <EVDMaxLikelyFit+0x280>
   11376:	jmp    11114 <EVDMaxLikelyFit+0xb4>
   1137b:	movss  xmm0,DWORD PTR [rip+0x2ca25]        # 3dda8 <_IO_stdin_used+0xda8>
   11383:	mov    edx,r13d
   11386:	mov    rsi,rbp
   11389:	mov    rdi,r12
   1138c:	call   10b30 <Lawless416>
   11391:	pxor   xmm7,xmm7
   11395:	comiss xmm7,DWORD PTR [rsp+0x30]
   1139a:	jbe    113df <EVDMaxLikelyFit+0x37f>
   1139c:	mov    r8,r15
   1139f:	mov    rcx,r14
   113a2:	mov    edx,r13d
   113a5:	mov    rsi,rbp
   113a8:	movss  xmm0,DWORD PTR [rip+0x2c9fc]        # 3ddac <_IO_stdin_used+0xdac>
   113b0:	mov    rdi,r12
   113b3:	call   10b30 <Lawless416>
   113b8:	pxor   xmm7,xmm7
   113bc:	comiss xmm7,DWORD PTR [rsp+0x30]
   113c1:	movss  xmm3,DWORD PTR [rip+0x2c9e3]        # 3ddac <_IO_stdin_used+0xdac>
   113c9:	jbe    113e7 <EVDMaxLikelyFit+0x387>
   113cb:	xor    eax,eax
   113cd:	jmp    111fa <EVDMaxLikelyFit+0x19a>
   113d2:	pxor   xmm4,xmm4
   113d6:	movapd xmm3,xmm4
   113da:	jmp    111b6 <EVDMaxLikelyFit+0x156>
   113df:	movss  xmm3,DWORD PTR [rip+0x2c9c1]        # 3dda8 <_IO_stdin_used+0xda8>
   113e7:	movss  xmm2,DWORD PTR [rip+0x2c9b1]        # 3dda0 <_IO_stdin_used+0xda0>
   113ef:	jmp    112d3 <EVDMaxLikelyFit+0x273>
   113f4:	call   3570 <__stack_chk_fail@plt>
   113f9:	nop    DWORD PTR [rax+0x0]

0000000000011400 <EVDCensoredFit>:
   11400:	endbr64 
   11404:	push   r15
   11406:	push   r14
   11408:	mov    r14d,edx
   1140b:	push   r13
   1140d:	mov    r13,rdi
   11410:	push   r12
   11412:	mov    r12d,ecx
   11415:	push   rbp
   11416:	mov    rbp,rsi
   11419:	push   rbx
   1141a:	sub    rsp,0x58
   1141e:	movss  xmm2,DWORD PTR [rip+0x2c97a]        # 3dda0 <_IO_stdin_used+0xda0>
   11426:	mov    QWORD PTR [rsp+0x28],r8
   1142b:	lea    rbx,[rsp+0x44]
   11430:	lea    r15,[rsp+0x40]
   11435:	mov    QWORD PTR [rsp+0x30],r9
   1143a:	movss  DWORD PTR [rsp+0x10],xmm0
   11440:	mov    rax,QWORD PTR fs:0x28
   11449:	mov    QWORD PTR [rsp+0x48],rax
   1144e:	xor    eax,eax
   11450:	mov    DWORD PTR [rsp+0x8],0x64
   11458:	jmp    11486 <EVDCensoredFit+0x86>
   1145a:	nop    WORD PTR [rax+rax*1+0x0]
   11460:	divss  xmm0,DWORD PTR [rsp+0x44]
   11466:	subss  xmm2,xmm0
   1146a:	pxor   xmm6,xmm6
   1146e:	comiss xmm6,xmm2
   11471:	jb     1147b <EVDCensoredFit+0x7b>
   11473:	movss  xmm2,DWORD PTR [rip+0x2c929]        # 3dda4 <_IO_stdin_used+0xda4>
   1147b:	sub    DWORD PTR [rsp+0x8],0x1
   11480:	je     11610 <EVDCensoredFit+0x210>
   11486:	movss  xmm0,DWORD PTR [rsp+0x10]
   1148c:	movaps xmm1,xmm2
   1148f:	mov    r9,rbx
   11492:	mov    r8,r15
   11495:	mov    ecx,r12d
   11498:	mov    edx,r14d
   1149b:	mov    rsi,rbp
   1149e:	mov    rdi,r13
   114a1:	movss  DWORD PTR [rsp],xmm2
   114a6:	call   10d60 <Lawless422>
   114ab:	movss  xmm0,DWORD PTR [rsp+0x40]
   114b1:	movss  xmm2,DWORD PTR [rsp]
   114b6:	movss  xmm5,DWORD PTR [rip+0x2c8f6]        # 3ddb4 <_IO_stdin_used+0xdb4>
   114be:	movaps xmm1,xmm0
   114c1:	andps  xmm1,XMMWORD PTR [rip+0x2c8f8]        # 3ddc0 <_IO_stdin_used+0xdc0>
   114c8:	comiss xmm5,xmm1
   114cb:	jbe    11460 <EVDCensoredFit+0x60>
   114cd:	pxor   xmm5,xmm5
   114d1:	cvtss2sd xmm5,xmm2
   114d5:	movsd  QWORD PTR [rsp+0x38],xmm5
   114db:	xorpd  xmm5,XMMWORD PTR [rip+0x2bebd]        # 3d3a0 <_IO_stdin_used+0x3a0>
   114e3:	movsd  QWORD PTR [rsp+0x20],xmm5
   114e9:	test   r14d,r14d
   114ec:	jle    117f3 <EVDCensoredFit+0x3f3>
   114f2:	pxor   xmm3,xmm3
   114f6:	lea    ebx,[r14-0x1]
   114fa:	xor    r14d,r14d
   114fd:	movsd  QWORD PTR [rsp+0x8],xmm3
   11503:	movsd  QWORD PTR [rsp],xmm3
   11508:	jmp    11513 <EVDCensoredFit+0x113>
   1150a:	nop    WORD PTR [rax+rax*1+0x0]
   11510:	mov    r14,rax
   11513:	mov    rax,QWORD PTR [rip+0x2c8d6]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1151a:	movq   xmm1,rax
   1151f:	test   rbp,rbp
   11522:	je     1152f <EVDCensoredFit+0x12f>
   11524:	pxor   xmm1,xmm1
   11528:	cvtsi2sd xmm1,DWORD PTR [rbp+r14*4+0x0]
   1152f:	pxor   xmm0,xmm0
   11533:	movsd  QWORD PTR [rsp+0x18],xmm1
   11539:	cvtss2sd xmm0,DWORD PTR [r13+r14*4+0x0]
   11540:	mulsd  xmm0,QWORD PTR [rsp+0x20]
   11546:	movss  DWORD PTR [rsp+0x14],xmm2
   1154c:	call   3800 <exp@plt>
   11551:	movsd  xmm1,QWORD PTR [rsp+0x18]
   11557:	cmp    rbx,r14
   1155a:	lea    rax,[r14+0x1]
   1155e:	movss  xmm2,DWORD PTR [rsp+0x14]
   11564:	mulsd  xmm0,xmm1
   11568:	addsd  xmm1,QWORD PTR [rsp+0x8]
   1156e:	addsd  xmm0,QWORD PTR [rsp]
   11573:	movsd  QWORD PTR [rsp+0x8],xmm1
   11579:	movsd  QWORD PTR [rsp],xmm0
   1157e:	jne    11510 <EVDCensoredFit+0x110>
   11580:	pxor   xmm0,xmm0
   11584:	movss  DWORD PTR [rsp+0x14],xmm2
   1158a:	cvtss2sd xmm0,DWORD PTR [rsp+0x10]
   11590:	mulsd  xmm0,QWORD PTR [rsp+0x20]
   11596:	call   3800 <exp@plt>
   1159b:	movapd xmm1,xmm0
   1159f:	pxor   xmm0,xmm0
   115a3:	cvtsi2sd xmm0,r12d
   115a8:	mulsd  xmm0,xmm1
   115ac:	addsd  xmm0,QWORD PTR [rsp]
   115b1:	divsd  xmm0,QWORD PTR [rsp+0x8]
   115b7:	call   35e0 <log@plt>
   115bc:	mov    rax,QWORD PTR [rsp+0x30]
   115c1:	movss  xmm2,DWORD PTR [rsp+0x14]
   115c7:	xorpd  xmm0,XMMWORD PTR [rip+0x2bdd1]        # 3d3a0 <_IO_stdin_used+0x3a0>
   115cf:	divsd  xmm0,QWORD PTR [rsp+0x38]
   115d5:	cvtsd2ss xmm0,xmm0
   115d9:	movss  DWORD PTR [rax],xmm2
   115dd:	mov    rax,QWORD PTR [rsp+0x28]
   115e2:	movss  DWORD PTR [rax],xmm0
   115e6:	mov    eax,0x1
   115eb:	mov    rdx,QWORD PTR [rsp+0x48]
   115f0:	xor    rdx,QWORD PTR fs:0x28
   115f9:	jne    11814 <EVDCensoredFit+0x414>
   115ff:	add    rsp,0x58
   11603:	pop    rbx
   11604:	pop    rbp
   11605:	pop    r12
   11607:	pop    r13
   11609:	pop    r14
   1160b:	pop    r15
   1160d:	ret    
   1160e:	xchg   ax,ax
   11610:	movss  xmm0,DWORD PTR [rsp+0x10]
   11616:	mov    r9,rbx
   11619:	mov    r8,r15
   1161c:	mov    ecx,r12d
   1161f:	movss  xmm1,DWORD PTR [rip+0x2c779]        # 3dda0 <_IO_stdin_used+0xda0>
   11627:	mov    edx,r14d
   1162a:	mov    rsi,rbp
   1162d:	mov    rdi,r13
   11630:	call   10d60 <Lawless422>
   11635:	pxor   xmm6,xmm6
   11639:	comiss xmm6,DWORD PTR [rsp+0x40]
   1163e:	ja     11793 <EVDCensoredFit+0x393>
   11644:	movss  xmm0,DWORD PTR [rsp+0x10]
   1164a:	mov    r9,rbx
   1164d:	mov    r8,r15
   11650:	mov    ecx,r12d
   11653:	movss  xmm1,DWORD PTR [rip+0x2c745]        # 3dda0 <_IO_stdin_used+0xda0>
   1165b:	mov    edx,r14d
   1165e:	mov    rsi,rbp
   11661:	mov    rdi,r13
   11664:	call   10d60 <Lawless422>
   11669:	mov    DWORD PTR [rsp+0x8],0x3e6
   11671:	movss  xmm3,DWORD PTR [rip+0x2c737]        # 3ddb0 <_IO_stdin_used+0xdb0>
   11679:	jmp    116ca <EVDCensoredFit+0x2ca>
   1167b:	nop    DWORD PTR [rax+rax*1+0x0]
   11680:	cvtss2sd xmm3,xmm3
   11684:	mov    r9,rbx
   11687:	mov    r8,r15
   1168a:	mov    ecx,r12d
   1168d:	movss  xmm0,DWORD PTR [rsp+0x10]
   11693:	mov    edx,r14d
   11696:	mov    rsi,rbp
   11699:	mov    rdi,r13
   1169c:	addsd  xmm3,QWORD PTR [rip+0x2c76c]        # 3de10 <_IO_stdin_used+0xe10>
   116a4:	movss  xmm1,DWORD PTR [rip+0x2c6f4]        # 3dda0 <_IO_stdin_used+0xda0>
   116ac:	cvtsd2ss xmm3,xmm3
   116b0:	movss  DWORD PTR [rsp],xmm3
   116b5:	call   10d60 <Lawless422>
   116ba:	sub    DWORD PTR [rsp+0x8],0x1
   116bf:	movss  xmm3,DWORD PTR [rsp]
   116c4:	je     117ec <EVDCensoredFit+0x3ec>
   116ca:	movss  xmm0,DWORD PTR [rsp+0x40]
   116d0:	pxor   xmm6,xmm6
   116d4:	comiss xmm0,xmm6
   116d7:	ja     11680 <EVDCensoredFit+0x280>
   116d9:	movss  xmm1,DWORD PTR [rip+0x2c6bf]        # 3dda0 <_IO_stdin_used+0xda0>
   116e1:	mov    DWORD PTR [rsp+0x18],0x64
   116e9:	jmp    1172b <EVDCensoredFit+0x32b>
   116eb:	nop    DWORD PTR [rax+rax*1+0x0]
   116f0:	pxor   xmm3,xmm3
   116f4:	movss  xmm1,DWORD PTR [rsp+0x8]
   116fa:	sub    DWORD PTR [rsp+0x18],0x1
   116ff:	cmpltss xmm3,xmm0
   11704:	movaps xmm0,xmm3
   11707:	movss  xmm3,DWORD PTR [rsp+0x14]
   1170d:	movaps xmm4,xmm0
   11710:	andps  xmm3,xmm0
   11713:	andnps xmm4,xmm2
   11716:	andps  xmm2,xmm0
   11719:	andnps xmm0,xmm1
   1171c:	orps   xmm3,xmm4
   1171f:	movaps xmm1,xmm0
   11722:	orps   xmm1,xmm2
   11725:	je     117ec <EVDCensoredFit+0x3ec>
   1172b:	movaps xmm2,xmm1
   1172e:	movss  xmm0,DWORD PTR [rsp+0x10]
   11734:	mov    r9,rbx
   11737:	mov    r8,r15
   1173a:	addss  xmm2,xmm3
   1173e:	mov    ecx,r12d
   11741:	mov    edx,r14d
   11744:	mov    rsi,rbp
   11747:	mulss  xmm2,DWORD PTR [rip+0x2bfe1]        # 3d730 <_IO_stdin_used+0x730>
   1174f:	mov    rdi,r13
   11752:	movss  DWORD PTR [rsp+0x14],xmm3
   11758:	movss  DWORD PTR [rsp+0x8],xmm1
   1175e:	movss  DWORD PTR [rsp],xmm2
   11763:	call   10d60 <Lawless422>
   11768:	movss  xmm0,DWORD PTR [rsp+0x40]
   1176e:	movss  xmm2,DWORD PTR [rsp]
   11773:	movss  xmm7,DWORD PTR [rip+0x2c639]        # 3ddb4 <_IO_stdin_used+0xdb4>
   1177b:	movaps xmm4,xmm0
   1177e:	andps  xmm4,XMMWORD PTR [rip+0x2c63b]        # 3ddc0 <_IO_stdin_used+0xdc0>
   11785:	comiss xmm7,xmm4
   11788:	jbe    116f0 <EVDCensoredFit+0x2f0>
   1178e:	jmp    114cd <EVDCensoredFit+0xcd>
   11793:	mov    DWORD PTR [rsp+0x8],0x6
   1179b:	movss  xmm1,DWORD PTR [rip+0x2c615]        # 3ddb8 <_IO_stdin_used+0xdb8>
   117a3:	movss  xmm0,DWORD PTR [rsp+0x10]
   117a9:	mov    r9,rbx
   117ac:	mov    r8,r15
   117af:	mov    ecx,r12d
   117b2:	mov    edx,r14d
   117b5:	mov    rsi,rbp
   117b8:	mov    rdi,r13
   117bb:	movss  DWORD PTR [rsp],xmm1
   117c0:	call   10d60 <Lawless422>
   117c5:	pxor   xmm7,xmm7
   117c9:	comiss xmm7,DWORD PTR [rsp+0x40]
   117ce:	movss  xmm1,DWORD PTR [rsp]
   117d3:	jbe    11807 <EVDCensoredFit+0x407>
   117d5:	sub    DWORD PTR [rsp+0x8],0x1
   117da:	cvtss2sd xmm1,xmm1
   117de:	subsd  xmm1,QWORD PTR [rip+0x2c632]        # 3de18 <_IO_stdin_used+0xe18>
   117e6:	cvtsd2ss xmm1,xmm1
   117ea:	jne    117a3 <EVDCensoredFit+0x3a3>
   117ec:	xor    eax,eax
   117ee:	jmp    115eb <EVDCensoredFit+0x1eb>
   117f3:	pxor   xmm6,xmm6
   117f7:	movsd  QWORD PTR [rsp+0x8],xmm6
   117fd:	movsd  QWORD PTR [rsp],xmm6
   11802:	jmp    11580 <EVDCensoredFit+0x180>
   11807:	movss  xmm3,DWORD PTR [rip+0x2c591]        # 3dda0 <_IO_stdin_used+0xda0>
   1180f:	jmp    116e1 <EVDCensoredFit+0x2e1>
   11814:	call   3570 <__stack_chk_fail@plt>
   11819:	nop    DWORD PTR [rax+0x0]

0000000000011820 <ExtremeValueFitHistogram>:
   11820:	endbr64 
   11824:	push   r15
   11826:	push   r14
   11828:	mov    r14,rdi
   1182b:	push   r13
   1182d:	push   r12
   1182f:	push   rbp
   11830:	push   rbx
   11831:	sub    rsp,0x48
   11835:	mov    r8d,DWORD PTR [rdi+0x14]
   11839:	mov    ecx,DWORD PTR [rdi+0x10]
   1183c:	mov    DWORD PTR [rsp+0x14],esi
   11840:	mov    rax,QWORD PTR fs:0x28
   11849:	mov    QWORD PTR [rsp+0x38],rax
   1184e:	xor    eax,eax
   11850:	mov    DWORD PTR [rsp+0x10],r8d
   11855:	test   esi,esi
   11857:	je     11891 <ExtremeValueFitHistogram+0x71>
   11859:	cmp    r8d,ecx
   1185c:	jg     11891 <ExtremeValueFitHistogram+0x71>
   1185e:	movsxd rdx,DWORD PTR [rdi+0x8]
   11862:	mov    rsi,QWORD PTR [rdi]
   11865:	movsxd rax,r8d
   11868:	neg    rdx
   1186b:	lea    rdi,[rsi+rdx*4]
   1186f:	mov    esi,0xffffffff
   11874:	nop    DWORD PTR [rax+0x0]
   11878:	mov    edx,DWORD PTR [rdi+rax*4]
   1187b:	cmp    edx,esi
   1187d:	jle    11884 <ExtremeValueFitHistogram+0x64>
   1187f:	mov    esi,edx
   11881:	mov    r8d,eax
   11884:	add    rax,0x1
   11888:	cmp    ecx,eax
   1188a:	jge    11878 <ExtremeValueFitHistogram+0x58>
   1188c:	mov    DWORD PTR [rsp+0x10],r8d
   11891:	pxor   xmm1,xmm1
   11895:	cvtsi2ss xmm1,ecx
   11899:	comiss xmm1,xmm0
   1189c:	jbe    11bbb <ExtremeValueFitHistogram+0x39b>
   118a2:	cvttss2si ebp,xmm0
   118a6:	movsxd rax,DWORD PTR [rsp+0x10]
   118ab:	mov    DWORD PTR [rsp+0x4],0x0
   118b3:	mov    QWORD PTR [rsp+0x18],rax
   118b8:	neg    rax
   118bb:	shl    rax,0x2
   118bf:	mov    QWORD PTR [rsp+0x20],rax
   118c4:	nop    DWORD PTR [rax+0x0]
   118c8:	mov    r11d,ebp
   118cb:	sub    r11d,DWORD PTR [rsp+0x10]
   118d0:	add    r11d,0x1
   118d4:	cmp    r11d,0x4
   118d8:	jle    11bc4 <ExtremeValueFitHistogram+0x3a4>
   118de:	movsxd rbx,r11d
   118e1:	mov    esi,0x258
   118e6:	mov    DWORD PTR [rsp+0x8],r11d
   118eb:	lea    rdi,[rip+0x2c28e]        # 3db80 <_IO_stdin_used+0xb80>
   118f2:	lea    r15,[rbx*4+0x0]
   118fa:	mov    rdx,r15
   118fd:	call   36810 <sre_malloc>
   11902:	mov    rdx,r15
   11905:	mov    esi,0x259
   1190a:	lea    rdi,[rip+0x2c26f]        # 3db80 <_IO_stdin_used+0xb80>
   11911:	mov    r13,rax
   11914:	call   36810 <sre_malloc>
   11919:	mov    r15,rax
   1191c:	cmp    DWORD PTR [rsp+0x10],ebp
   11920:	jg     11b00 <ExtremeValueFitHistogram+0x2e0>
   11926:	mov    rax,QWORD PTR [rsp+0x20]
   1192b:	mov    rdi,QWORD PTR [r14]
   1192e:	xor    ecx,ecx
   11930:	mov    edx,DWORD PTR [r14+0x8]
   11934:	mov    r11d,DWORD PTR [rsp+0x8]
   11939:	lea    r9,[r13+rax*1+0x0]
   1193e:	lea    r8,[r15+rax*1]
   11942:	movss  xmm3,DWORD PTR [rip+0x2bde6]        # 3d730 <_IO_stdin_used+0x730>
   1194a:	mov    rax,QWORD PTR [rsp+0x18]
   1194f:	nop
   11950:	pxor   xmm0,xmm0
   11954:	mov    ebx,eax
   11956:	mov    esi,eax
   11958:	cvtsi2ss xmm0,eax
   1195c:	sub    ebx,edx
   1195e:	movsxd rdx,ebx
   11961:	mov    edx,DWORD PTR [rdi+rdx*4]
   11964:	addss  xmm0,xmm3
   11968:	movss  DWORD PTR [r9+rax*4],xmm0
   1196e:	mov    DWORD PTR [r8+rax*4],edx
   11972:	mov    edx,DWORD PTR [r14+0x8]
   11976:	add    rax,0x1
   1197a:	sub    esi,edx
   1197c:	movsxd rsi,esi
   1197f:	add    ecx,DWORD PTR [rdi+rsi*4]
   11982:	mov    ebx,ecx
   11984:	cmp    ebp,eax
   11986:	jge    11950 <ExtremeValueFitHistogram+0x130>
   11988:	cmp    ecx,0x63
   1198b:	jle    11b00 <ExtremeValueFitHistogram+0x2e0>
   11991:	mov    edx,DWORD PTR [rsp+0x14]
   11995:	test   edx,edx
   11997:	je     11ae0 <ExtremeValueFitHistogram+0x2c0>
   1199d:	mov    eax,DWORD PTR [rsp+0x4]
   119a1:	test   eax,eax
   119a3:	jne    11b48 <ExtremeValueFitHistogram+0x328>
   119a9:	pxor   xmm0,xmm0
   119ad:	mov    eax,DWORD PTR [r14+0x1c]
   119b1:	pxor   xmm4,xmm4
   119b5:	cvtsi2ss xmm0,ecx
   119b9:	sub    eax,ecx
   119bb:	cvtsi2ss xmm4,DWORD PTR [rsp+0x10]
   119c1:	cvtss2sd xmm0,xmm0
   119c5:	mulsd  xmm0,QWORD PTR [rip+0x2c453]        # 3de20 <_IO_stdin_used+0xe20>
   119cd:	cvttsd2si r12d,xmm0
   119d2:	cmp    r12d,eax
   119d5:	cmovg  r12d,eax
   119d9:	lea    r9,[rsp+0x30]
   119de:	lea    r8,[rsp+0x34]
   119e3:	mov    ecx,r12d
   119e6:	movaps xmm0,xmm4
   119e9:	mov    edx,r11d
   119ec:	mov    rsi,r15
   119ef:	mov    rdi,r13
   119f2:	call   11400 <EVDCensoredFit>
   119f7:	test   eax,eax
   119f9:	je     11b00 <ExtremeValueFitHistogram+0x2e0>
   119ff:	pxor   xmm0,xmm0
   11a03:	pxor   xmm2,xmm2
   11a07:	pxor   xmm1,xmm1
   11a0b:	add    ebx,r12d
   11a0e:	cvtsi2sd xmm2,ebx
   11a12:	lea    eax,[rbx-0x1]
   11a15:	cvtss2sd xmm1,DWORD PTR [rsp+0x34]
   11a1b:	movsd  QWORD PTR [rsp+0x8],xmm1
   11a21:	cvtsi2sd xmm0,eax
   11a25:	divsd  xmm0,xmm2
   11a29:	call   35e0 <log@plt>
   11a2e:	xorpd  xmm0,XMMWORD PTR [rip+0x2b96a]        # 3d3a0 <_IO_stdin_used+0x3a0>
   11a36:	call   35e0 <log@plt>
   11a3b:	pxor   xmm2,xmm2
   11a3f:	movsd  xmm1,QWORD PTR [rsp+0x8]
   11a45:	mov    rdi,r13
   11a48:	cvtss2sd xmm2,DWORD PTR [rsp+0x30]
   11a4e:	divsd  xmm0,xmm2
   11a52:	subsd  xmm1,xmm0
   11a56:	cvttsd2si ebx,xmm1
   11a5a:	call   3460 <free@plt>
   11a5f:	mov    rdi,r15
   11a62:	call   3460 <free@plt>
   11a67:	cmp    ebx,ebp
   11a69:	jge    11a7f <ExtremeValueFitHistogram+0x25f>
   11a6b:	add    DWORD PTR [rsp+0x4],0x1
   11a70:	mov    eax,DWORD PTR [rsp+0x4]
   11a74:	mov    ebp,ebx
   11a76:	cmp    eax,0x64
   11a79:	jne    118c8 <ExtremeValueFitHistogram+0xa8>
   11a7f:	pxor   xmm3,xmm3
   11a83:	pxor   xmm2,xmm2
   11a87:	mov    esi,0x1
   11a8c:	mov    rdi,r14
   11a8f:	cvtsi2ss xmm3,ebp
   11a93:	movss  xmm1,DWORD PTR [rsp+0x30]
   11a99:	movss  xmm0,DWORD PTR [rsp+0x34]
   11a9f:	mov    r12d,0x1
   11aa5:	cvtsi2ss xmm2,DWORD PTR [rsp+0x10]
   11aab:	call   105e0 <ExtremeValueSetHistogram>
   11ab0:	mov    rax,QWORD PTR [rsp+0x38]
   11ab5:	xor    rax,QWORD PTR fs:0x28
   11abe:	jne    11bea <ExtremeValueFitHistogram+0x3ca>
   11ac4:	add    rsp,0x48
   11ac8:	mov    eax,r12d
   11acb:	pop    rbx
   11acc:	pop    rbp
   11acd:	pop    r12
   11acf:	pop    r13
   11ad1:	pop    r14
   11ad3:	pop    r15
   11ad5:	ret    
   11ad6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11ae0:	lea    rcx,[rsp+0x34]
   11ae5:	lea    r8,[rsp+0x30]
   11aea:	mov    edx,r11d
   11aed:	mov    rsi,r15
   11af0:	mov    rdi,r13
   11af3:	call   11060 <EVDMaxLikelyFit>
   11af8:	test   eax,eax
   11afa:	jne    119ff <ExtremeValueFitHistogram+0x1df>
   11b00:	mov    rdi,QWORD PTR [r14+0x20]
   11b04:	test   rdi,rdi
   11b07:	je     11b0e <ExtremeValueFitHistogram+0x2ee>
   11b09:	call   3460 <free@plt>
   11b0e:	mov    QWORD PTR [r14+0x20],0x0
   11b16:	mov    DWORD PTR [r14+0x28],0x0
   11b1e:	test   r13,r13
   11b21:	je     11b2b <ExtremeValueFitHistogram+0x30b>
   11b23:	mov    rdi,r13
   11b26:	call   3460 <free@plt>
   11b2b:	xor    r12d,r12d
   11b2e:	test   r15,r15
   11b31:	je     11ab0 <ExtremeValueFitHistogram+0x290>
   11b37:	mov    rdi,r15
   11b3a:	call   3460 <free@plt>
   11b3f:	jmp    11ab0 <ExtremeValueFitHistogram+0x290>
   11b44:	nop    DWORD PTR [rax+0x0]
   11b48:	pxor   xmm4,xmm4
   11b4c:	movss  xmm1,DWORD PTR [rsp+0x34]
   11b52:	movss  xmm2,DWORD PTR [rsp+0x30]
   11b58:	mov    DWORD PTR [rsp+0x2c],ecx
   11b5c:	cvtsi2ss xmm4,DWORD PTR [rsp+0x10]
   11b62:	mov    DWORD PTR [rsp+0x28],r11d
   11b67:	movaps xmm0,xmm4
   11b6a:	movss  DWORD PTR [rsp+0x8],xmm4
   11b70:	call   100d0 <EVDDistribution>
   11b75:	mov    ecx,DWORD PTR [rsp+0x2c]
   11b79:	mov    eax,DWORD PTR [r14+0x1c]
   11b7d:	movapd xmm1,xmm0
   11b81:	pxor   xmm0,xmm0
   11b85:	movss  xmm4,DWORD PTR [rsp+0x8]
   11b8b:	movsd  xmm5,QWORD PTR [rip+0x2c25d]        # 3ddf0 <_IO_stdin_used+0xdf0>
   11b93:	cvtsi2sd xmm0,ecx
   11b97:	sub    eax,ecx
   11b99:	mov    r11d,DWORD PTR [rsp+0x28]
   11b9e:	subsd  xmm5,xmm1
   11ba2:	mulsd  xmm0,xmm1
   11ba6:	divsd  xmm0,xmm5
   11baa:	cvttsd2si r12d,xmm0
   11baf:	cmp    r12d,eax
   11bb2:	cmovg  r12d,eax
   11bb6:	jmp    119d9 <ExtremeValueFitHistogram+0x1b9>
   11bbb:	cvttss2si ebp,xmm1
   11bbf:	jmp    118a6 <ExtremeValueFitHistogram+0x86>
   11bc4:	mov    rdi,QWORD PTR [r14+0x20]
   11bc8:	test   rdi,rdi
   11bcb:	je     11bda <ExtremeValueFitHistogram+0x3ba>
   11bcd:	call   3460 <free@plt>
   11bd2:	mov    QWORD PTR [r14+0x20],0x0
   11bda:	mov    DWORD PTR [r14+0x28],0x0
   11be2:	xor    r12d,r12d
   11be5:	jmp    11ab0 <ExtremeValueFitHistogram+0x290>
   11bea:	call   3570 <__stack_chk_fail@plt>
   11bef:	nop

0000000000011bf0 <read_asc10hmm>:
   11bf0:	endbr64 
   11bf4:	sub    rsp,0x8
   11bf8:	xor    eax,eax
   11bfa:	lea    rdi,[rip+0x2c227]        # 3de28 <_IO_stdin_used+0xe28>
   11c01:	call   317f0 <Die>
   11c06:	mov    eax,0x1
   11c0b:	add    rsp,0x8
   11c0f:	ret    

0000000000011c10 <read_asc11hmm>:
   11c10:	endbr64 
   11c14:	sub    rsp,0x8
   11c18:	xor    eax,eax
   11c1a:	lea    rdi,[rip+0x2c222]        # 3de43 <_IO_stdin_used+0xe43>
   11c21:	call   317f0 <Die>
   11c26:	mov    eax,0x1
   11c2b:	add    rsp,0x8
   11c2f:	ret    

0000000000011c30 <read_bin_string>:
   11c30:	push   r13
   11c32:	push   r12
   11c34:	mov    r12,rdi
   11c37:	push   rbp
   11c38:	mov    rcx,r12
   11c3b:	mov    rbp,rdx
   11c3e:	mov    edx,0x1
   11c43:	push   rbx
   11c44:	mov    ebx,esi
   11c46:	mov    esi,0x4
   11c4b:	sub    rsp,0x18
   11c4f:	mov    rax,QWORD PTR fs:0x28
   11c58:	mov    QWORD PTR [rsp+0x8],rax
   11c5d:	xor    eax,eax
   11c5f:	lea    rdi,[rsp+0x4]
   11c64:	call   3500 <fread@plt>
   11c69:	mov    r8,rax
   11c6c:	xor    eax,eax
   11c6e:	test   r8,r8
   11c71:	je     11cb3 <read_bin_string+0x83>
   11c73:	test   ebx,ebx
   11c75:	jne    11cd0 <read_bin_string+0xa0>
   11c77:	movsxd rdx,DWORD PTR [rsp+0x4]
   11c7c:	mov    esi,0x55a
   11c81:	lea    rdi,[rip+0x2c1d6]        # 3de5e <_IO_stdin_used+0xe5e>
   11c88:	call   36810 <sre_malloc>
   11c8d:	movsxd rdx,DWORD PTR [rsp+0x4]
   11c92:	mov    rcx,r12
   11c95:	mov    esi,0x1
   11c9a:	mov    rdi,rax
   11c9d:	mov    r13,rax
   11ca0:	call   3500 <fread@plt>
   11ca5:	test   rax,rax
   11ca8:	je     11cf0 <read_bin_string+0xc0>
   11caa:	mov    QWORD PTR [rbp+0x0],r13
   11cae:	mov    eax,0x1
   11cb3:	mov    rcx,QWORD PTR [rsp+0x8]
   11cb8:	xor    rcx,QWORD PTR fs:0x28
   11cc1:	jne    11cfc <read_bin_string+0xcc>
   11cc3:	add    rsp,0x18
   11cc7:	pop    rbx
   11cc8:	pop    rbp
   11cc9:	pop    r12
   11ccb:	pop    r13
   11ccd:	ret    
   11cce:	xchg   ax,ax
   11cd0:	movzx  eax,BYTE PTR [rsp+0x7]
   11cd5:	movzx  edx,BYTE PTR [rsp+0x4]
   11cda:	rol    WORD PTR [rsp+0x5],0x8
   11ce0:	mov    BYTE PTR [rsp+0x7],dl
   11ce4:	mov    BYTE PTR [rsp+0x4],al
   11ce8:	jmp    11c77 <read_bin_string+0x47>
   11cea:	nop    WORD PTR [rax+rax*1+0x0]
   11cf0:	mov    rdi,r13
   11cf3:	call   3460 <free@plt>
   11cf8:	xor    eax,eax
   11cfa:	jmp    11cb3 <read_bin_string+0x83>
   11cfc:	call   3570 <__stack_chk_fail@plt>
   11d01:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   11d0c:	nop    DWORD PTR [rax+0x0]

0000000000011d10 <read_plan9_binhmm>:
   11d10:	push   r15
   11d12:	push   r14
   11d14:	mov    r14d,edx
   11d17:	mov    edx,0x1
   11d1c:	push   r13
   11d1e:	mov    r13d,esi
   11d21:	mov    esi,0x4
   11d26:	push   r12
   11d28:	push   rbp
   11d29:	mov    rbp,rdi
   11d2c:	push   rbx
   11d2d:	mov    rcx,rbp
   11d30:	sub    rsp,0x38
   11d34:	mov    rax,QWORD PTR fs:0x28
   11d3d:	mov    QWORD PTR [rsp+0x28],rax
   11d42:	xor    eax,eax
   11d44:	mov    rdi,rsp
   11d47:	call   3500 <fread@plt>
   11d4c:	test   rax,rax
   11d4f:	je     11e98 <read_plan9_binhmm+0x188>
   11d55:	lea    rdi,[rsp+0x8]
   11d5a:	mov    rcx,rbp
   11d5d:	mov    edx,0x1
   11d62:	mov    esi,0x4
   11d67:	call   3500 <fread@plt>
   11d6c:	test   rax,rax
   11d6f:	je     11e98 <read_plan9_binhmm+0x188>
   11d75:	test   r14d,r14d
   11d78:	je     11da8 <read_plan9_binhmm+0x98>
   11d7a:	movzx  eax,BYTE PTR [rsp+0x3]
   11d7f:	movzx  edx,BYTE PTR [rsp]
   11d83:	rol    WORD PTR [rsp+0x1],0x8
   11d89:	rol    WORD PTR [rsp+0x9],0x8
   11d8f:	mov    BYTE PTR [rsp+0x3],dl
   11d93:	movzx  edx,BYTE PTR [rsp+0x8]
   11d98:	mov    BYTE PTR [rsp],al
   11d9b:	movzx  eax,BYTE PTR [rsp+0xb]
   11da0:	mov    BYTE PTR [rsp+0xb],dl
   11da4:	mov    BYTE PTR [rsp+0x8],al
   11da8:	mov    esi,DWORD PTR [rsp+0x8]
   11dac:	cmp    esi,0x4
   11daf:	je     11ec1 <read_plan9_binhmm+0x1b1>
   11db5:	cmp    esi,0x14
   11db8:	jne    122e0 <read_plan9_binhmm+0x5d0>
   11dbe:	mov    eax,DWORD PTR [rip+0x502bc]        # 62080 <Alphabet_type>
   11dc4:	mov    DWORD PTR [rsp+0xc],0x3
   11dcc:	mov    edi,0x3
   11dd1:	test   eax,eax
   11dd3:	jne    11edc <read_plan9_binhmm+0x1cc>
   11dd9:	call   4ad0 <SetAlphabet>
   11dde:	mov    edi,DWORD PTR [rsp]
   11de1:	call   1d090 <P9AllocHMM>
   11de6:	mov    r12,rax
   11de9:	test   rax,rax
   11dec:	jne    11f1b <read_plan9_binhmm+0x20b>
   11df2:	xor    eax,eax
   11df4:	lea    rdi,[rip+0x2c375]        # 3e170 <_IO_stdin_used+0x1170>
   11dfb:	call   317f0 <Die>
   11e00:	cmp    r13d,0x7
   11e04:	jne    11f25 <read_plan9_binhmm+0x215>
   11e0a:	lea    rdi,[rsp+0x4]
   11e0f:	mov    rcx,rbp
   11e12:	mov    edx,0x1
   11e17:	mov    esi,0x4
   11e1c:	call   3500 <fread@plt>
   11e21:	test   rax,rax
   11e24:	je     11e98 <read_plan9_binhmm+0x188>
   11e26:	test   r14d,r14d
   11e29:	je     11e43 <read_plan9_binhmm+0x133>
   11e2b:	movzx  eax,BYTE PTR [rsp+0x7]
   11e30:	movzx  edx,BYTE PTR [rsp+0x4]
   11e35:	rol    WORD PTR [rsp+0x5],0x8
   11e3b:	mov    BYTE PTR [rsp+0x7],dl
   11e3f:	mov    BYTE PTR [rsp+0x4],al
   11e43:	mov    eax,DWORD PTR [rsp+0x4]
   11e47:	mov    rdx,QWORD PTR [r12+0x70]
   11e4c:	mov    esi,0x5c3
   11e51:	lea    rdi,[rip+0x2c006]        # 3de5e <_IO_stdin_used+0xe5e>
   11e58:	lea    ecx,[rax+0x1]
   11e5b:	movsxd rcx,ecx
   11e5e:	call   36860 <sre_realloc>
   11e63:	movsxd rdx,DWORD PTR [rsp+0x4]
   11e68:	mov    rcx,rbp
   11e6b:	mov    esi,0x1
   11e70:	mov    QWORD PTR [r12+0x70],rax
   11e75:	mov    rdi,rax
   11e78:	call   3500 <fread@plt>
   11e7d:	test   rax,rax
   11e80:	je     11e98 <read_plan9_binhmm+0x188>
   11e82:	movsxd rax,DWORD PTR [rsp+0x4]
   11e87:	mov    rdx,QWORD PTR [r12+0x70]
   11e8c:	mov    BYTE PTR [rdx+rax*1],0x0
   11e90:	jmp    11f25 <read_plan9_binhmm+0x215>
   11e95:	nop    DWORD PTR [rax]
   11e98:	xor    r12d,r12d
   11e9b:	mov    rax,QWORD PTR [rsp+0x28]
   11ea0:	xor    rax,QWORD PTR fs:0x28
   11ea9:	jne    12519 <read_plan9_binhmm+0x809>
   11eaf:	add    rsp,0x38
   11eb3:	mov    rax,r12
   11eb6:	pop    rbx
   11eb7:	pop    rbp
   11eb8:	pop    r12
   11eba:	pop    r13
   11ebc:	pop    r14
   11ebe:	pop    r15
   11ec0:	ret    
   11ec1:	mov    DWORD PTR [rsp+0xc],0x2
   11ec9:	mov    edi,0x2
   11ece:	mov    eax,DWORD PTR [rip+0x501ac]        # 62080 <Alphabet_type>
   11ed4:	test   eax,eax
   11ed6:	je     11dd9 <read_plan9_binhmm+0xc9>
   11edc:	cmp    eax,edi
   11ede:	je     11f07 <read_plan9_binhmm+0x1f7>
   11ee0:	call   b1c0 <AlphabetType2String>
   11ee5:	mov    edi,DWORD PTR [rip+0x50195]        # 62080 <Alphabet_type>
   11eeb:	mov    r12,rax
   11eee:	call   b1c0 <AlphabetType2String>
   11ef3:	mov    rdx,r12
   11ef6:	lea    rdi,[rip+0x2c213]        # 3e110 <_IO_stdin_used+0x1110>
   11efd:	mov    rsi,rax
   11f00:	xor    eax,eax
   11f02:	call   317f0 <Die>
   11f07:	mov    edi,DWORD PTR [rsp]
   11f0a:	call   1d090 <P9AllocHMM>
   11f0f:	mov    r12,rax
   11f12:	test   rax,rax
   11f15:	je     11df2 <read_plan9_binhmm+0xe2>
   11f1b:	cmp    r13d,0x7
   11f1f:	je     11e0a <read_plan9_binhmm+0xfa>
   11f25:	lea    rdi,[rsp+0xc]
   11f2a:	mov    rcx,rbp
   11f2d:	mov    edx,0x1
   11f32:	mov    esi,0x4
   11f37:	call   3500 <fread@plt>
   11f3c:	test   rax,rax
   11f3f:	je     11e98 <read_plan9_binhmm+0x188>
   11f45:	movsxd rcx,DWORD PTR [rip+0x503b4]        # 62300 <Alphabet_size>
   11f4c:	lea    rdi,[rsp+0x10]
   11f51:	mov    r8,rbp
   11f54:	mov    edx,0x1
   11f59:	mov    esi,0x14
   11f5e:	call   3720 <__fread_chk@plt>
   11f63:	test   rax,rax
   11f66:	je     11e98 <read_plan9_binhmm+0x188>
   11f6c:	cmp    r13d,0x1
   11f70:	je     124ef <read_plan9_binhmm+0x7df>
   11f76:	mov    eax,r13d
   11f79:	lea    r15,[r12+0x20]
   11f7e:	and    eax,0xfffffffd
   11f81:	cmp    eax,0x5
   11f84:	jne    1250c <read_plan9_binhmm+0x7fc>
   11f8a:	lea    rdi,[r12+0x90]
   11f92:	mov    rcx,rbp
   11f95:	mov    edx,0x1
   11f9a:	mov    esi,0x4
   11f9f:	call   3500 <fread@plt>
   11fa4:	test   rax,rax
   11fa7:	je     11e98 <read_plan9_binhmm+0x188>
   11fad:	test   r14d,r14d
   11fb0:	je     11fde <read_plan9_binhmm+0x2ce>
   11fb2:	movzx  eax,BYTE PTR [r12+0x93]
   11fbb:	movzx  edx,BYTE PTR [r12+0x90]
   11fc4:	rol    WORD PTR [r12+0x91],0x8
   11fce:	mov    BYTE PTR [r12+0x93],dl
   11fd6:	mov    BYTE PTR [r12+0x90],al
   11fde:	movsxd rax,DWORD PTR [r12]
   11fe2:	mov    rdi,QWORD PTR [r12+0x78]
   11fe7:	test   BYTE PTR [r12+0x90],0x1
   11ff0:	je     12017 <read_plan9_binhmm+0x307>
   11ff2:	add    eax,0x1
   11ff5:	mov    rcx,rbp
   11ff8:	mov    esi,0x1
   11ffd:	movsxd rdx,eax
   12000:	call   3500 <fread@plt>
   12005:	test   rax,rax
   12008:	je     11e98 <read_plan9_binhmm+0x188>
   1200e:	mov    rdi,QWORD PTR [r12+0x78]
   12013:	movsxd rax,DWORD PTR [r12]
   12017:	mov    BYTE PTR [rdi+rax*1+0x1],0x0
   1201c:	test   BYTE PTR [r12+0x90],0x2
   12025:	je     1204f <read_plan9_binhmm+0x33f>
   12027:	mov    eax,DWORD PTR [r12]
   1202b:	mov    rdi,QWORD PTR [r12+0x80]
   12033:	mov    rcx,rbp
   12036:	mov    esi,0x1
   1203b:	lea    edx,[rax+0x1]
   1203e:	movsxd rdx,edx
   12041:	call   3500 <fread@plt>
   12046:	test   rax,rax
   12049:	je     11e98 <read_plan9_binhmm+0x188>
   1204f:	movsxd rax,DWORD PTR [r12]
   12053:	mov    rdx,QWORD PTR [r12+0x80]
   1205b:	lea    r15,[r12+0x20]
   12060:	mov    BYTE PTR [rdx+rax*1+0x1],0x0
   12065:	cmp    r13d,0x7
   12069:	jne    1250c <read_plan9_binhmm+0x7fc>
   1206f:	movsxd rdx,DWORD PTR [rip+0x5028a]        # 62300 <Alphabet_size>
   12076:	mov    rcx,rbp
   12079:	mov    esi,0x4
   1207e:	mov    rdi,r15
   12081:	call   3500 <fread@plt>
   12086:	test   rax,rax
   12089:	je     11e98 <read_plan9_binhmm+0x188>
   1208f:	test   r14d,r14d
   12092:	je     120d2 <read_plan9_binhmm+0x3c2>
   12094:	mov    esi,DWORD PTR [rip+0x50266]        # 62300 <Alphabet_size>
   1209a:	test   esi,esi
   1209c:	jle    120d2 <read_plan9_binhmm+0x3c2>
   1209e:	mov    rdi,r15
   120a1:	xor    eax,eax
   120a3:	nop    DWORD PTR [rax+rax*1+0x0]
   120a8:	movzx  edx,BYTE PTR [rdi+0x3]
   120ac:	movzx  ecx,BYTE PTR [rdi]
   120af:	add    eax,0x1
   120b2:	add    rdi,0x4
   120b6:	mov    BYTE PTR [rdi-0x1],cl
   120b9:	movzx  ecx,BYTE PTR [rdi-0x3]
   120bd:	mov    BYTE PTR [rdi-0x4],dl
   120c0:	movzx  edx,BYTE PTR [rdi-0x2]
   120c4:	mov    BYTE PTR [rdi-0x2],cl
   120c7:	mov    BYTE PTR [rdi-0x3],dl
   120ca:	cmp    DWORD PTR [rip+0x50230],eax        # 62300 <Alphabet_size>
   120d0:	jg     120a8 <read_plan9_binhmm+0x398>
   120d2:	mov    ecx,DWORD PTR [r12]
   120d6:	test   ecx,ecx
   120d8:	js     122d3 <read_plan9_binhmm+0x5c3>
   120de:	xor    ebx,ebx
   120e0:	xor    r15d,r15d
   120e3:	mov    rdi,QWORD PTR [r12+0x10]
   120e8:	mov    rcx,rbp
   120eb:	mov    edx,0x1
   120f0:	mov    esi,0x4
   120f5:	add    rdi,rbx
   120f8:	call   3500 <fread@plt>
   120fd:	test   rax,rax
   12100:	je     11e98 <read_plan9_binhmm+0x188>
   12106:	mov    rdi,QWORD PTR [r12+0x10]
   1210b:	mov    rcx,rbp
   1210e:	mov    edx,0x1
   12113:	mov    esi,0x4
   12118:	add    rdi,rbx
   1211b:	add    rdi,0x8
   1211f:	call   3500 <fread@plt>
   12124:	test   rax,rax
   12127:	je     11e98 <read_plan9_binhmm+0x188>
   1212d:	mov    rdi,QWORD PTR [r12+0x10]
   12132:	mov    rcx,rbp
   12135:	mov    edx,0x1
   1213a:	mov    esi,0x4
   1213f:	add    rdi,rbx
   12142:	add    rdi,0x4
   12146:	call   3500 <fread@plt>
   1214b:	test   rax,rax
   1214e:	je     11e98 <read_plan9_binhmm+0x188>
   12154:	mov    rdi,QWORD PTR [r12+0x10]
   12159:	movsxd rdx,DWORD PTR [rip+0x501a0]        # 62300 <Alphabet_size>
   12160:	mov    rcx,rbp
   12163:	mov    esi,0x4
   12168:	add    rdi,rbx
   1216b:	add    rdi,0xc
   1216f:	call   3500 <fread@plt>
   12174:	test   rax,rax
   12177:	je     11e98 <read_plan9_binhmm+0x188>
   1217d:	test   r14d,r14d
   12180:	jne    12300 <read_plan9_binhmm+0x5f0>
   12186:	cmp    r13d,0x1
   1218a:	je     1239d <read_plan9_binhmm+0x68d>
   12190:	mov    rdi,QWORD PTR [r12+0x18]
   12195:	mov    rcx,rbp
   12198:	mov    edx,0x1
   1219d:	mov    esi,0x4
   121a2:	add    rdi,rbx
   121a5:	call   3500 <fread@plt>
   121aa:	test   rax,rax
   121ad:	je     11e98 <read_plan9_binhmm+0x188>
   121b3:	mov    rdi,QWORD PTR [r12+0x18]
   121b8:	mov    rcx,rbp
   121bb:	mov    edx,0x1
   121c0:	mov    esi,0x4
   121c5:	add    rdi,rbx
   121c8:	add    rdi,0x8
   121cc:	call   3500 <fread@plt>
   121d1:	test   rax,rax
   121d4:	je     11e98 <read_plan9_binhmm+0x188>
   121da:	mov    rdi,QWORD PTR [r12+0x18]
   121df:	mov    rcx,rbp
   121e2:	mov    edx,0x1
   121e7:	mov    esi,0x4
   121ec:	add    rdi,rbx
   121ef:	add    rdi,0x4
   121f3:	call   3500 <fread@plt>
   121f8:	test   rax,rax
   121fb:	je     11e98 <read_plan9_binhmm+0x188>
   12201:	test   r14d,r14d
   12204:	jne    123c0 <read_plan9_binhmm+0x6b0>
   1220a:	cmp    r13d,0x1
   1220e:	je     12419 <read_plan9_binhmm+0x709>
   12214:	mov    rdi,QWORD PTR [r12+0x8]
   12219:	mov    rcx,rbp
   1221c:	mov    edx,0x1
   12221:	mov    esi,0x4
   12226:	add    rdi,rbx
   12229:	call   3500 <fread@plt>
   1222e:	test   rax,rax
   12231:	je     11e98 <read_plan9_binhmm+0x188>
   12237:	mov    rdi,QWORD PTR [r12+0x8]
   1223c:	mov    rcx,rbp
   1223f:	mov    edx,0x1
   12244:	mov    esi,0x4
   12249:	add    rdi,rbx
   1224c:	add    rdi,0x8
   12250:	call   3500 <fread@plt>
   12255:	test   rax,rax
   12258:	je     11e98 <read_plan9_binhmm+0x188>
   1225e:	mov    rdi,QWORD PTR [r12+0x8]
   12263:	mov    rcx,rbp
   12266:	mov    edx,0x1
   1226b:	mov    esi,0x4
   12270:	add    rdi,rbx
   12273:	add    rdi,0x4
   12277:	call   3500 <fread@plt>
   1227c:	test   rax,rax
   1227f:	je     11e98 <read_plan9_binhmm+0x188>
   12285:	mov    rdi,QWORD PTR [r12+0x8]
   1228a:	movsxd rdx,DWORD PTR [rip+0x5006f]        # 62300 <Alphabet_size>
   12291:	mov    rcx,rbp
   12294:	mov    esi,0x4
   12299:	add    rdi,rbx
   1229c:	add    rdi,0xc
   122a0:	call   3500 <fread@plt>
   122a5:	test   rax,rax
   122a8:	je     11e98 <read_plan9_binhmm+0x188>
   122ae:	test   r14d,r14d
   122b1:	jne    12430 <read_plan9_binhmm+0x720>
   122b7:	cmp    r13d,0x1
   122bb:	je     124cd <read_plan9_binhmm+0x7bd>
   122c1:	add    r15d,0x1
   122c5:	add    rbx,0x5c
   122c9:	cmp    DWORD PTR [r12],r15d
   122cd:	jge    120e3 <read_plan9_binhmm+0x3d3>
   122d3:	mov    rdi,r12
   122d6:	call   1d1a0 <P9Renormalize>
   122db:	jmp    11e9b <read_plan9_binhmm+0x18b>
   122e0:	lea    rdi,[rip+0x2bde1]        # 3e0c8 <_IO_stdin_used+0x10c8>
   122e7:	xor    eax,eax
   122e9:	call   317f0 <Die>
   122ee:	mov    edi,DWORD PTR [rsp+0xc]
   122f2:	jmp    11ece <read_plan9_binhmm+0x1be>
   122f7:	nop    WORD PTR [rax+rax*1+0x0]
   12300:	mov    rax,QWORD PTR [r12+0x10]
   12305:	add    rax,rbx
   12308:	movzx  edx,BYTE PTR [rax+0x3]
   1230c:	movzx  ecx,BYTE PTR [rax]
   1230f:	rol    WORD PTR [rax+0x1],0x8
   12314:	mov    BYTE PTR [rax+0x3],cl
   12317:	mov    BYTE PTR [rax],dl
   12319:	mov    rax,QWORD PTR [r12+0x10]
   1231e:	add    rax,rbx
   12321:	movzx  edx,BYTE PTR [rax+0xb]
   12325:	movzx  ecx,BYTE PTR [rax+0x8]
   12329:	rol    WORD PTR [rax+0x9],0x8
   1232e:	mov    BYTE PTR [rax+0xb],cl
   12331:	mov    BYTE PTR [rax+0x8],dl
   12334:	mov    rax,QWORD PTR [r12+0x10]
   12339:	add    rax,rbx
   1233c:	movzx  edx,BYTE PTR [rax+0x7]
   12340:	movzx  ecx,BYTE PTR [rax+0x4]
   12344:	rol    WORD PTR [rax+0x5],0x8
   12349:	mov    BYTE PTR [rax+0x4],dl
   1234c:	mov    edx,DWORD PTR [rip+0x4ffae]        # 62300 <Alphabet_size>
   12352:	mov    BYTE PTR [rax+0x7],cl
   12355:	test   edx,edx
   12357:	jle    12186 <read_plan9_binhmm+0x476>
   1235d:	mov    ecx,0xc
   12362:	xor    edx,edx
   12364:	nop    DWORD PTR [rax+0x0]
   12368:	lea    rax,[rbx+rcx*1]
   1236c:	add    rax,QWORD PTR [r12+0x10]
   12371:	add    edx,0x1
   12374:	add    rcx,0x4
   12378:	movzx  esi,BYTE PTR [rax+0x3]
   1237c:	movzx  edi,BYTE PTR [rax]
   1237f:	rol    WORD PTR [rax+0x1],0x8
   12384:	mov    BYTE PTR [rax+0x3],dil
   12388:	mov    BYTE PTR [rax],sil
   1238b:	cmp    DWORD PTR [rip+0x4ff6f],edx        # 62300 <Alphabet_size>
   12391:	jg     12368 <read_plan9_binhmm+0x658>
   12393:	cmp    r13d,0x1
   12397:	jne    12190 <read_plan9_binhmm+0x480>
   1239d:	mov    eax,DWORD PTR [rip+0x4ff5d]        # 62300 <Alphabet_size>
   123a3:	mov    edx,0x1
   123a8:	mov    rdi,rbp
   123ab:	lea    esi,[rax+0x3]
   123ae:	movsxd rsi,esi
   123b1:	shl    rsi,0x2
   123b5:	call   36e0 <fseek@plt>
   123ba:	jmp    12190 <read_plan9_binhmm+0x480>
   123bf:	nop
   123c0:	mov    rax,QWORD PTR [r12+0x18]
   123c5:	add    rax,rbx
   123c8:	movzx  edx,BYTE PTR [rax+0x3]
   123cc:	movzx  ecx,BYTE PTR [rax]
   123cf:	rol    WORD PTR [rax+0x1],0x8
   123d4:	mov    BYTE PTR [rax+0x3],cl
   123d7:	mov    BYTE PTR [rax],dl
   123d9:	mov    rax,QWORD PTR [r12+0x18]
   123de:	add    rax,rbx
   123e1:	movzx  edx,BYTE PTR [rax+0xb]
   123e5:	movzx  ecx,BYTE PTR [rax+0x8]
   123e9:	rol    WORD PTR [rax+0x9],0x8
   123ee:	mov    BYTE PTR [rax+0xb],cl
   123f1:	mov    BYTE PTR [rax+0x8],dl
   123f4:	mov    rax,QWORD PTR [r12+0x18]
   123f9:	add    rax,rbx
   123fc:	movzx  edx,BYTE PTR [rax+0x7]
   12400:	movzx  ecx,BYTE PTR [rax+0x4]
   12404:	rol    WORD PTR [rax+0x5],0x8
   12409:	mov    BYTE PTR [rax+0x7],cl
   1240c:	mov    BYTE PTR [rax+0x4],dl
   1240f:	cmp    r13d,0x1
   12413:	jne    12214 <read_plan9_binhmm+0x504>
   12419:	mov    edx,0x1
   1241e:	mov    esi,0xc
   12423:	mov    rdi,rbp
   12426:	call   36e0 <fseek@plt>
   1242b:	jmp    12214 <read_plan9_binhmm+0x504>
   12430:	mov    rax,QWORD PTR [r12+0x8]
   12435:	add    rax,rbx
   12438:	movzx  edx,BYTE PTR [rax+0x3]
   1243c:	movzx  ecx,BYTE PTR [rax]
   1243f:	rol    WORD PTR [rax+0x1],0x8
   12444:	mov    BYTE PTR [rax+0x3],cl
   12447:	mov    BYTE PTR [rax],dl
   12449:	mov    rax,QWORD PTR [r12+0x8]
   1244e:	add    rax,rbx
   12451:	movzx  edx,BYTE PTR [rax+0xb]
   12455:	movzx  ecx,BYTE PTR [rax+0x8]
   12459:	rol    WORD PTR [rax+0x9],0x8
   1245e:	mov    BYTE PTR [rax+0xb],cl
   12461:	mov    BYTE PTR [rax+0x8],dl
   12464:	mov    rax,QWORD PTR [r12+0x8]
   12469:	add    rax,rbx
   1246c:	movzx  edx,BYTE PTR [rax+0x7]
   12470:	movzx  ecx,BYTE PTR [rax+0x4]
   12474:	rol    WORD PTR [rax+0x5],0x8
   12479:	mov    BYTE PTR [rax+0x7],cl
   1247c:	mov    BYTE PTR [rax+0x4],dl
   1247f:	mov    eax,DWORD PTR [rip+0x4fe7b]        # 62300 <Alphabet_size>
   12485:	test   eax,eax
   12487:	jle    122b7 <read_plan9_binhmm+0x5a7>
   1248d:	mov    ecx,0xc
   12492:	xor    edx,edx
   12494:	nop    DWORD PTR [rax+0x0]
   12498:	lea    rax,[rbx+rcx*1]
   1249c:	add    rax,QWORD PTR [r12+0x8]
   124a1:	add    edx,0x1
   124a4:	add    rcx,0x4
   124a8:	movzx  esi,BYTE PTR [rax+0x3]
   124ac:	movzx  edi,BYTE PTR [rax]
   124af:	rol    WORD PTR [rax+0x1],0x8
   124b4:	mov    BYTE PTR [rax+0x3],dil
   124b8:	mov    BYTE PTR [rax],sil
   124bb:	cmp    DWORD PTR [rip+0x4fe3f],edx        # 62300 <Alphabet_size>
   124c1:	jg     12498 <read_plan9_binhmm+0x788>
   124c3:	cmp    r13d,0x1
   124c7:	jne    122c1 <read_plan9_binhmm+0x5b1>
   124cd:	mov    eax,DWORD PTR [rip+0x4fe2d]        # 62300 <Alphabet_size>
   124d3:	mov    edx,0x1
   124d8:	mov    rdi,rbp
   124db:	lea    esi,[rax+0x3]
   124de:	movsxd rsi,esi
   124e1:	shl    rsi,0x2
   124e5:	call   36e0 <fseek@plt>
   124ea:	jmp    122c1 <read_plan9_binhmm+0x5b1>
   124ef:	movsxd rsi,DWORD PTR [rip+0x4fe0a]        # 62300 <Alphabet_size>
   124f6:	mov    edx,0x1
   124fb:	mov    rdi,rbp
   124fe:	lea    r15,[r12+0x20]
   12503:	shl    rsi,0x2
   12507:	call   36e0 <fseek@plt>
   1250c:	mov    rdi,r15
   1250f:	call   1d250 <P9DefaultNullModel>
   12514:	jmp    120d2 <read_plan9_binhmm+0x3c2>
   12519:	call   3570 <__stack_chk_fail@plt>
   1251e:	xchg   ax,ax

0000000000012520 <read_bin20hmm>:
   12520:	endbr64 
   12524:	push   r14
   12526:	push   r13
   12528:	push   r12
   1252a:	xor    r12d,r12d
   1252d:	push   rbp
   1252e:	mov    rbp,rsi
   12531:	push   rbx
   12532:	mov    rbx,rdi
   12535:	sub    rsp,0x10
   12539:	mov    rdi,QWORD PTR [rdi]
   1253c:	mov    rax,QWORD PTR fs:0x28
   12545:	mov    QWORD PTR [rsp+0x8],rax
   1254a:	xor    eax,eax
   1254c:	call   3660 <feof@plt>
   12551:	test   eax,eax
   12553:	je     12580 <read_bin20hmm+0x60>
   12555:	mov    rax,QWORD PTR [rsp+0x8]
   1255a:	xor    rax,QWORD PTR fs:0x28
   12563:	jne    12fbf <read_bin20hmm+0xa9f>
   12569:	add    rsp,0x10
   1256d:	mov    eax,r12d
   12570:	pop    rbx
   12571:	pop    rbp
   12572:	pop    r12
   12574:	pop    r13
   12576:	pop    r14
   12578:	ret    
   12579:	nop    DWORD PTR [rax+0x0]
   12580:	mov    rcx,QWORD PTR [rbx]
   12583:	lea    rdi,[rsp+0x4]
   12588:	mov    edx,0x1
   1258d:	mov    r12d,eax
   12590:	mov    esi,0x4
   12595:	call   3500 <fread@plt>
   1259a:	test   rax,rax
   1259d:	je     12555 <read_bin20hmm+0x35>
   1259f:	mov    r9d,DWORD PTR [rbx+0x1c]
   125a3:	test   r9d,r9d
   125a6:	jne    125c8 <read_bin20hmm+0xa8>
   125a8:	mov    eax,DWORD PTR [rip+0x3aa62]        # 4d010 <v20magic>
   125ae:	cmp    DWORD PTR [rsp+0x4],eax
   125b2:	je     125ec <read_bin20hmm+0xcc>
   125b4:	mov    QWORD PTR [rbp+0x0],0x0
   125bc:	mov    r12d,0x1
   125c2:	jmp    12555 <read_bin20hmm+0x35>
   125c4:	nop    DWORD PTR [rax+0x0]
   125c8:	movzx  eax,BYTE PTR [rsp+0x7]
   125cd:	movzx  edx,BYTE PTR [rsp+0x4]
   125d2:	rol    WORD PTR [rsp+0x5],0x8
   125d8:	mov    BYTE PTR [rsp+0x4],al
   125dc:	mov    eax,DWORD PTR [rip+0x3aa2e]        # 4d010 <v20magic>
   125e2:	mov    BYTE PTR [rsp+0x7],dl
   125e6:	cmp    DWORD PTR [rsp+0x4],eax
   125ea:	jne    125b4 <read_bin20hmm+0x94>
   125ec:	call   1a920 <AllocPlan7Shell>
   125f1:	mov    rcx,QWORD PTR [rbx]
   125f4:	mov    edx,0x1
   125f9:	mov    esi,0x4
   125fe:	lea    rdi,[rax+0x1c8]
   12605:	mov    r12,rax
   12608:	call   3500 <fread@plt>
   1260d:	test   rax,rax
   12610:	je     12f18 <read_bin20hmm+0x9f8>
   12616:	mov    r8d,DWORD PTR [rbx+0x1c]
   1261a:	test   r8d,r8d
   1261d:	jne    12ec0 <read_bin20hmm+0x9a0>
   12623:	mov    rdi,QWORD PTR [rbx]
   12626:	xor    esi,esi
   12628:	mov    rdx,r12
   1262b:	call   11c30 <read_bin_string>
   12630:	test   eax,eax
   12632:	je     12f18 <read_bin20hmm+0x9f8>
   12638:	mov    eax,DWORD PTR [r12+0x1c8]
   12640:	mov    rcx,QWORD PTR [rbx]
   12643:	test   ah,0x2
   12646:	jne    12f28 <read_bin20hmm+0xa08>
   1264c:	test   al,0x2
   1264e:	jne    12f4c <read_bin20hmm+0xa2c>
   12654:	lea    rdi,[r12+0x88]
   1265c:	mov    edx,0x1
   12661:	mov    esi,0x4
   12666:	call   3500 <fread@plt>
   1266b:	test   rax,rax
   1266e:	je     12f08 <read_bin20hmm+0x9e8>
   12674:	mov    edi,DWORD PTR [rbx+0x1c]
   12677:	test   edi,edi
   12679:	je     126a7 <read_bin20hmm+0x187>
   1267b:	movzx  eax,BYTE PTR [r12+0x8b]
   12684:	movzx  edx,BYTE PTR [r12+0x88]
   1268d:	rol    WORD PTR [r12+0x89],0x8
   12697:	mov    BYTE PTR [r12+0x8b],dl
   1269f:	mov    BYTE PTR [r12+0x88],al
   126a7:	mov    rcx,QWORD PTR [rbx]
   126aa:	mov    rdi,rsp
   126ad:	mov    edx,0x1
   126b2:	mov    esi,0x4
   126b7:	call   3500 <fread@plt>
   126bc:	test   rax,rax
   126bf:	je     12f08 <read_bin20hmm+0x9e8>
   126c5:	mov    esi,DWORD PTR [rbx+0x1c]
   126c8:	test   esi,esi
   126ca:	je     126e2 <read_bin20hmm+0x1c2>
   126cc:	movzx  eax,BYTE PTR [rsp+0x3]
   126d1:	movzx  edx,BYTE PTR [rsp]
   126d5:	rol    WORD PTR [rsp+0x1],0x8
   126db:	mov    BYTE PTR [rsp+0x3],dl
   126df:	mov    BYTE PTR [rsp],al
   126e2:	mov    eax,DWORD PTR [rip+0x4f998]        # 62080 <Alphabet_type>
   126e8:	mov    edi,DWORD PTR [rsp]
   126eb:	test   eax,eax
   126ed:	je     12f68 <read_bin20hmm+0xa48>
   126f3:	cmp    eax,edi
   126f5:	je     1271e <read_bin20hmm+0x1fe>
   126f7:	call   b1c0 <AlphabetType2String>
   126fc:	mov    edi,DWORD PTR [rip+0x4f97e]        # 62080 <Alphabet_type>
   12702:	mov    r13,rax
   12705:	call   b1c0 <AlphabetType2String>
   1270a:	mov    rdx,r13
   1270d:	lea    rdi,[rip+0x2b9fc]        # 3e110 <_IO_stdin_used+0x1110>
   12714:	mov    rsi,rax
   12717:	xor    eax,eax
   12719:	call   317f0 <Die>
   1271e:	mov    esi,DWORD PTR [r12+0x88]
   12726:	mov    rdi,r12
   12729:	call   1aab0 <AllocPlan7Body>
   1272e:	test   BYTE PTR [r12+0x1c8],0x4
   12737:	je     12762 <read_bin20hmm+0x242>
   12739:	mov    eax,DWORD PTR [r12+0x88]
   12741:	mov    rdi,QWORD PTR [r12+0x18]
   12746:	mov    esi,0x1
   1274b:	mov    rcx,QWORD PTR [rbx]
   1274e:	lea    edx,[rax+0x1]
   12751:	movsxd rdx,edx
   12754:	call   3500 <fread@plt>
   12759:	test   rax,rax
   1275c:	je     12f08 <read_bin20hmm+0x9e8>
   12762:	movsxd rax,DWORD PTR [r12+0x88]
   1276a:	mov    rdx,QWORD PTR [r12+0x18]
   1276f:	mov    BYTE PTR [rdx+rax*1+0x1],0x0
   12774:	test   BYTE PTR [r12+0x1c8],0x8
   1277d:	je     127a8 <read_bin20hmm+0x288>
   1277f:	mov    eax,DWORD PTR [r12+0x88]
   12787:	mov    rdi,QWORD PTR [r12+0x20]
   1278c:	mov    esi,0x1
   12791:	mov    rcx,QWORD PTR [rbx]
   12794:	lea    edx,[rax+0x1]
   12797:	movsxd rdx,edx
   1279a:	call   3500 <fread@plt>
   1279f:	test   rax,rax
   127a2:	je     12f08 <read_bin20hmm+0x9e8>
   127a8:	movsxd rax,DWORD PTR [r12+0x88]
   127b0:	mov    rdx,QWORD PTR [r12+0x20]
   127b5:	mov    BYTE PTR [rdx+rax*1+0x1],0x0
   127ba:	test   BYTE PTR [r12+0x1c9],0x1
   127c3:	je     127ee <read_bin20hmm+0x2ce>
   127c5:	mov    eax,DWORD PTR [r12+0x88]
   127cd:	mov    rdi,QWORD PTR [r12+0x48]
   127d2:	mov    esi,0x4
   127d7:	mov    rcx,QWORD PTR [rbx]
   127da:	lea    edx,[rax+0x1]
   127dd:	movsxd rdx,edx
   127e0:	call   3500 <fread@plt>
   127e5:	test   rax,rax
   127e8:	je     12f08 <read_bin20hmm+0x9e8>
   127ee:	mov    esi,DWORD PTR [rbx+0x1c]
   127f1:	test   esi,esi
   127f3:	je     1283f <read_bin20hmm+0x31f>
   127f5:	mov    ecx,DWORD PTR [r12+0x88]
   127fd:	test   ecx,ecx
   127ff:	jle    1283f <read_bin20hmm+0x31f>
   12801:	mov    ecx,0x4
   12806:	mov    edx,0x1
   1280b:	nop    DWORD PTR [rax+rax*1+0x0]
   12810:	mov    rax,QWORD PTR [r12+0x48]
   12815:	add    edx,0x1
   12818:	add    rax,rcx
   1281b:	add    rcx,0x4
   1281f:	movzx  esi,BYTE PTR [rax+0x3]
   12823:	movzx  edi,BYTE PTR [rax]
   12826:	rol    WORD PTR [rax+0x1],0x8
   1282b:	mov    BYTE PTR [rax+0x3],dil
   1282f:	mov    BYTE PTR [rax],sil
   12832:	cmp    edx,DWORD PTR [r12+0x88]
   1283a:	jle    12810 <read_bin20hmm+0x2f0>
   1283c:	mov    esi,DWORD PTR [rbx+0x1c]
   1283f:	mov    rdi,QWORD PTR [rbx]
   12842:	lea    rdx,[r12+0x30]
   12847:	call   11c30 <read_bin_string>
   1284c:	test   eax,eax
   1284e:	je     12f08 <read_bin20hmm+0x9e8>
   12854:	mov    rcx,QWORD PTR [rbx]
   12857:	lea    rdi,[r12+0x38]
   1285c:	mov    edx,0x1
   12861:	mov    esi,0x4
   12866:	call   3500 <fread@plt>
   1286b:	test   rax,rax
   1286e:	je     12f08 <read_bin20hmm+0x9e8>
   12874:	mov    esi,DWORD PTR [rbx+0x1c]
   12877:	test   esi,esi
   12879:	je     1289b <read_bin20hmm+0x37b>
   1287b:	movzx  eax,BYTE PTR [r12+0x3b]
   12881:	movzx  edx,BYTE PTR [r12+0x38]
   12887:	rol    WORD PTR [r12+0x39],0x8
   1288e:	mov    BYTE PTR [r12+0x3b],dl
   12893:	mov    BYTE PTR [r12+0x38],al
   12898:	mov    esi,DWORD PTR [rbx+0x1c]
   1289b:	mov    rdi,QWORD PTR [rbx]
   1289e:	lea    rdx,[r12+0x40]
   128a3:	call   11c30 <read_bin_string>
   128a8:	test   eax,eax
   128aa:	je     12f08 <read_bin20hmm+0x9e8>
   128b0:	mov    rcx,QWORD PTR [rbx]
   128b3:	lea    rdi,[r12+0x50]
   128b8:	mov    edx,0x1
   128bd:	mov    esi,0x4
   128c2:	call   3500 <fread@plt>
   128c7:	test   rax,rax
   128ca:	je     12f08 <read_bin20hmm+0x9e8>
   128d0:	mov    edx,DWORD PTR [rbx+0x1c]
   128d3:	test   edx,edx
   128d5:	je     128f4 <read_bin20hmm+0x3d4>
   128d7:	movzx  eax,BYTE PTR [r12+0x53]
   128dd:	movzx  edx,BYTE PTR [r12+0x50]
   128e3:	rol    WORD PTR [r12+0x51],0x8
   128ea:	mov    BYTE PTR [r12+0x53],dl
   128ef:	mov    BYTE PTR [r12+0x50],al
   128f4:	mov    eax,DWORD PTR [r12+0x1c8]
   128fc:	test   ah,0x4
   128ff:	je     1298d <read_bin20hmm+0x46d>
   12905:	mov    rcx,QWORD PTR [rbx]
   12908:	lea    rdi,[r12+0x70]
   1290d:	mov    edx,0x1
   12912:	mov    esi,0x4
   12917:	call   3500 <fread@plt>
   1291c:	test   rax,rax
   1291f:	je     12f08 <read_bin20hmm+0x9e8>
   12925:	mov    rcx,QWORD PTR [rbx]
   12928:	lea    rdi,[r12+0x74]
   1292d:	mov    edx,0x1
   12932:	mov    esi,0x4
   12937:	call   3500 <fread@plt>
   1293c:	test   rax,rax
   1293f:	je     12f08 <read_bin20hmm+0x9e8>
   12945:	cmp    DWORD PTR [rbx+0x1c],0x0
   12949:	je     12985 <read_bin20hmm+0x465>
   1294b:	movzx  eax,BYTE PTR [r12+0x73]
   12951:	movzx  edx,BYTE PTR [r12+0x70]
   12957:	rol    WORD PTR [r12+0x71],0x8
   1295e:	rol    WORD PTR [r12+0x75],0x8
   12965:	mov    BYTE PTR [r12+0x73],dl
   1296a:	movzx  edx,BYTE PTR [r12+0x74]
   12970:	mov    BYTE PTR [r12+0x70],al
   12975:	movzx  eax,BYTE PTR [r12+0x77]
   1297b:	mov    BYTE PTR [r12+0x77],dl
   12980:	mov    BYTE PTR [r12+0x74],al
   12985:	mov    eax,DWORD PTR [r12+0x1c8]
   1298d:	test   ah,0x8
   12990:	je     12a1e <read_bin20hmm+0x4fe>
   12996:	mov    rcx,QWORD PTR [rbx]
   12999:	lea    rdi,[r12+0x78]
   1299e:	mov    edx,0x1
   129a3:	mov    esi,0x4
   129a8:	call   3500 <fread@plt>
   129ad:	test   rax,rax
   129b0:	je     12f08 <read_bin20hmm+0x9e8>
   129b6:	mov    rcx,QWORD PTR [rbx]
   129b9:	lea    rdi,[r12+0x7c]
   129be:	mov    edx,0x1
   129c3:	mov    esi,0x4
   129c8:	call   3500 <fread@plt>
   129cd:	test   rax,rax
   129d0:	je     12f08 <read_bin20hmm+0x9e8>
   129d6:	cmp    DWORD PTR [rbx+0x1c],0x0
   129da:	je     12a16 <read_bin20hmm+0x4f6>
   129dc:	movzx  eax,BYTE PTR [r12+0x7b]
   129e2:	movzx  edx,BYTE PTR [r12+0x78]
   129e8:	rol    WORD PTR [r12+0x79],0x8
   129ef:	rol    WORD PTR [r12+0x7d],0x8
   129f6:	mov    BYTE PTR [r12+0x7b],dl
   129fb:	movzx  edx,BYTE PTR [r12+0x7c]
   12a01:	mov    BYTE PTR [r12+0x78],al
   12a06:	movzx  eax,BYTE PTR [r12+0x7f]
   12a0c:	mov    BYTE PTR [r12+0x7f],dl
   12a11:	mov    BYTE PTR [r12+0x7c],al
   12a16:	mov    eax,DWORD PTR [r12+0x1c8]
   12a1e:	test   ah,0x10
   12a21:	je     12acb <read_bin20hmm+0x5ab>
   12a27:	mov    rcx,QWORD PTR [rbx]
   12a2a:	mov    edx,0x1
   12a2f:	mov    esi,0x4
   12a34:	lea    rdi,[r12+0x80]
   12a3c:	call   3500 <fread@plt>
   12a41:	test   rax,rax
   12a44:	je     12f08 <read_bin20hmm+0x9e8>
   12a4a:	mov    rcx,QWORD PTR [rbx]
   12a4d:	mov    edx,0x1
   12a52:	mov    esi,0x4
   12a57:	lea    rdi,[r12+0x84]
   12a5f:	call   3500 <fread@plt>
   12a64:	test   rax,rax
   12a67:	je     12f08 <read_bin20hmm+0x9e8>
   12a6d:	cmp    DWORD PTR [rbx+0x1c],0x0
   12a71:	je     12acb <read_bin20hmm+0x5ab>
   12a73:	movzx  eax,BYTE PTR [r12+0x83]
   12a7c:	movzx  edx,BYTE PTR [r12+0x80]
   12a85:	rol    WORD PTR [r12+0x81],0x8
   12a8f:	rol    WORD PTR [r12+0x85],0x8
   12a99:	mov    BYTE PTR [r12+0x83],dl
   12aa1:	movzx  edx,BYTE PTR [r12+0x84]
   12aaa:	mov    BYTE PTR [r12+0x80],al
   12ab2:	movzx  eax,BYTE PTR [r12+0x87]
   12abb:	mov    BYTE PTR [r12+0x87],dl
   12ac3:	mov    BYTE PTR [r12+0x84],al
   12acb:	lea    r13,[r12+0xac]
   12ad3:	lea    r14,[r12+0xcc]
   12adb:	mov    rcx,QWORD PTR [rbx]
   12ade:	mov    edx,0x2
   12ae3:	mov    esi,0x4
   12ae8:	mov    rdi,r13
   12aeb:	call   3500 <fread@plt>
   12af0:	test   rax,rax
   12af3:	je     12f08 <read_bin20hmm+0x9e8>
   12af9:	mov    eax,DWORD PTR [rbx+0x1c]
   12afc:	test   eax,eax
   12afe:	jne    12f72 <read_bin20hmm+0xa52>
   12b04:	add    r13,0x8
   12b08:	cmp    r14,r13
   12b0b:	jne    12adb <read_bin20hmm+0x5bb>
   12b0d:	mov    rcx,QWORD PTR [rbx]
   12b10:	mov    edx,0x1
   12b15:	mov    esi,0x4
   12b1a:	lea    rdi,[r12+0x130]
   12b22:	call   3500 <fread@plt>
   12b27:	test   rax,rax
   12b2a:	je     12f08 <read_bin20hmm+0x9e8>
   12b30:	movsxd rdx,DWORD PTR [rip+0x4f7c9]        # 62300 <Alphabet_size>
   12b37:	mov    rcx,QWORD PTR [rbx]
   12b3a:	mov    esi,0x4
   12b3f:	lea    rdi,[r12+0xe0]
   12b47:	call   3500 <fread@plt>
   12b4c:	test   rax,rax
   12b4f:	je     12f08 <read_bin20hmm+0x9e8>
   12b55:	test   BYTE PTR [r12+0x1c8],0x80
   12b5e:	je     12c08 <read_bin20hmm+0x6e8>
   12b64:	mov    rcx,QWORD PTR [rbx]
   12b67:	mov    edx,0x1
   12b6c:	mov    esi,0x4
   12b71:	lea    rdi,[r12+0x1c0]
   12b79:	call   3500 <fread@plt>
   12b7e:	test   rax,rax
   12b81:	je     12f08 <read_bin20hmm+0x9e8>
   12b87:	mov    rcx,QWORD PTR [rbx]
   12b8a:	mov    edx,0x1
   12b8f:	mov    esi,0x4
   12b94:	lea    rdi,[r12+0x1c4]
   12b9c:	call   3500 <fread@plt>
   12ba1:	test   rax,rax
   12ba4:	je     12f08 <read_bin20hmm+0x9e8>
   12baa:	cmp    DWORD PTR [rbx+0x1c],0x0
   12bae:	je     12c08 <read_bin20hmm+0x6e8>
   12bb0:	movzx  eax,BYTE PTR [r12+0x1c3]
   12bb9:	movzx  edx,BYTE PTR [r12+0x1c0]
   12bc2:	rol    WORD PTR [r12+0x1c1],0x8
   12bcc:	rol    WORD PTR [r12+0x1c5],0x8
   12bd6:	mov    BYTE PTR [r12+0x1c3],dl
   12bde:	movzx  edx,BYTE PTR [r12+0x1c4]
   12be7:	mov    BYTE PTR [r12+0x1c0],al
   12bef:	movzx  eax,BYTE PTR [r12+0x1c7]
   12bf8:	mov    BYTE PTR [r12+0x1c7],dl
   12c00:	mov    BYTE PTR [r12+0x1c4],al
   12c08:	mov    rcx,QWORD PTR [rbx]
   12c0b:	mov    edx,0x1
   12c10:	mov    esi,0x4
   12c15:	lea    rdi,[r12+0xa8]
   12c1d:	call   3500 <fread@plt>
   12c22:	test   rax,rax
   12c25:	je     12f08 <read_bin20hmm+0x9e8>
   12c2b:	mov    eax,DWORD PTR [r12+0x88]
   12c33:	mov    rcx,QWORD PTR [rbx]
   12c36:	mov    esi,0x4
   12c3b:	mov    rdi,QWORD PTR [r12+0xd0]
   12c43:	lea    edx,[rax+0x1]
   12c46:	movsxd rdx,edx
   12c49:	call   3500 <fread@plt>
   12c4e:	test   rax,rax
   12c51:	je     12f08 <read_bin20hmm+0x9e8>
   12c57:	mov    eax,DWORD PTR [r12+0x88]
   12c5f:	mov    rcx,QWORD PTR [rbx]
   12c62:	mov    esi,0x4
   12c67:	mov    rdi,QWORD PTR [r12+0xd8]
   12c6f:	lea    edx,[rax+0x1]
   12c72:	movsxd rdx,edx
   12c75:	call   3500 <fread@plt>
   12c7a:	test   rax,rax
   12c7d:	je     12f08 <read_bin20hmm+0x9e8>
   12c83:	xor    eax,eax
   12c85:	jmp    12cba <read_bin20hmm+0x79a>
   12c87:	lea    r13,[rax+0x1]
   12c8b:	mov    rax,QWORD PTR [r12+0x98]
   12c93:	mov    rcx,QWORD PTR [rbx]
   12c96:	mov    esi,0x4
   12c9b:	movsxd rdx,DWORD PTR [rip+0x4f65e]        # 62300 <Alphabet_size>
   12ca2:	mov    rdi,QWORD PTR [rax+r13*8]
   12ca6:	call   3500 <fread@plt>
   12cab:	mov    r8,rax
   12cae:	mov    rax,r13
   12cb1:	test   r8,r8
   12cb4:	je     12f08 <read_bin20hmm+0x9e8>
   12cba:	lea    edx,[rax+0x1]
   12cbd:	cmp    DWORD PTR [r12+0x88],edx
   12cc5:	jge    12c87 <read_bin20hmm+0x767>
   12cc7:	xor    eax,eax
   12cc9:	jmp    12cfe <read_bin20hmm+0x7de>
   12ccb:	lea    r13,[rax+0x1]
   12ccf:	mov    rax,QWORD PTR [r12+0xa0]
   12cd7:	mov    rcx,QWORD PTR [rbx]
   12cda:	mov    esi,0x4
   12cdf:	movsxd rdx,DWORD PTR [rip+0x4f61a]        # 62300 <Alphabet_size>
   12ce6:	mov    rdi,QWORD PTR [rax+r13*8]
   12cea:	call   3500 <fread@plt>
   12cef:	mov    r8,rax
   12cf2:	mov    rax,r13
   12cf5:	test   r8,r8
   12cf8:	je     12f08 <read_bin20hmm+0x9e8>
   12cfe:	lea    edx,[rax+0x1]
   12d01:	cmp    DWORD PTR [r12+0x88],edx
   12d09:	jg     12ccb <read_bin20hmm+0x7ab>
   12d0b:	xor    eax,eax
   12d0d:	jmp    12d40 <read_bin20hmm+0x820>
   12d0f:	lea    r13,[rax+0x1]
   12d13:	mov    rax,QWORD PTR [r12+0x90]
   12d1b:	mov    rcx,QWORD PTR [rbx]
   12d1e:	mov    edx,0x7
   12d23:	mov    esi,0x4
   12d28:	mov    rdi,QWORD PTR [rax+r13*8]
   12d2c:	call   3500 <fread@plt>
   12d31:	mov    r8,rax
   12d34:	mov    rax,r13
   12d37:	test   r8,r8
   12d3a:	je     12f08 <read_bin20hmm+0x9e8>
   12d40:	lea    edx,[rax+0x1]
   12d43:	cmp    DWORD PTR [r12+0x88],edx
   12d4b:	jg     12d0f <read_bin20hmm+0x7ef>
   12d4d:	cmp    DWORD PTR [rbx+0x1c],0x0
   12d51:	je     12fc4 <read_bin20hmm+0xaa4>
   12d57:	xor    eax,eax
   12d59:	jmp    12da3 <read_bin20hmm+0x883>
   12d5b:	movzx  edx,BYTE PTR [r12+rax*4+0xe3]
   12d64:	movzx  ecx,BYTE PTR [r12+rax*4+0xe0]
   12d6d:	mov    BYTE PTR [r12+rax*4+0xe0],dl
   12d75:	movzx  edx,BYTE PTR [r12+rax*4+0xe2]
   12d7e:	mov    BYTE PTR [r12+rax*4+0xe3],cl
   12d86:	movzx  ecx,BYTE PTR [r12+rax*4+0xe1]
   12d8f:	mov    BYTE PTR [r12+rax*4+0xe1],dl
   12d97:	mov    BYTE PTR [r12+rax*4+0xe2],cl
   12d9f:	add    rax,0x1
   12da3:	cmp    DWORD PTR [rip+0x4f557],eax        # 62300 <Alphabet_size>
   12da9:	jg     12d5b <read_bin20hmm+0x83b>
   12dab:	movzx  edx,BYTE PTR [r12+0x130]
   12db4:	mov    ecx,0x1
   12db9:	movzx  eax,BYTE PTR [r12+0x133]
   12dc2:	rol    WORD PTR [r12+0x131],0x8
   12dcc:	rol    WORD PTR [r12+0xa9],0x8
   12dd6:	mov    BYTE PTR [r12+0x133],dl
   12dde:	movzx  edx,BYTE PTR [r12+0xa8]
   12de7:	mov    BYTE PTR [r12+0x130],al
   12def:	movzx  eax,BYTE PTR [r12+0xab]
   12df8:	mov    BYTE PTR [r12+0xab],dl
   12e00:	mov    BYTE PTR [r12+0xa8],al
   12e08:	mov    eax,0x4
   12e0d:	cmp    ecx,DWORD PTR [r12+0x88]
   12e15:	jg     12fc4 <read_bin20hmm+0xaa4>
   12e1b:	lea    rdi,[rax+rax*1]
   12e1f:	xor    esi,esi
   12e21:	jmp    12e4c <read_bin20hmm+0x92c>
   12e23:	mov    rdx,QWORD PTR [r12+0x98]
   12e2b:	mov    rdx,QWORD PTR [rdx+rdi*1]
   12e2f:	lea    rdx,[rdx+rsi*4]
   12e33:	add    rsi,0x1
   12e37:	movzx  r8d,BYTE PTR [rdx+0x3]
   12e3c:	movzx  r9d,BYTE PTR [rdx]
   12e40:	rol    WORD PTR [rdx+0x1],0x8
   12e45:	mov    BYTE PTR [rdx+0x3],r9b
   12e49:	mov    BYTE PTR [rdx],r8b
   12e4c:	cmp    DWORD PTR [rip+0x4f4ae],esi        # 62300 <Alphabet_size>
   12e52:	jg     12e23 <read_bin20hmm+0x903>
   12e54:	cmp    ecx,DWORD PTR [r12+0x88]
   12e5c:	jl     12fe9 <read_bin20hmm+0xac9>
   12e62:	mov    rdx,QWORD PTR [r12+0xd0]
   12e6a:	add    rdx,rax
   12e6d:	movzx  esi,BYTE PTR [rdx+0x3]
   12e71:	movzx  r8d,BYTE PTR [rdx]
   12e75:	rol    WORD PTR [rdx+0x1],0x8
   12e7a:	mov    BYTE PTR [rdx+0x3],r8b
   12e7e:	mov    BYTE PTR [rdx],sil
   12e81:	mov    rdx,QWORD PTR [r12+0xd8]
   12e89:	add    rdx,rax
   12e8c:	movzx  esi,BYTE PTR [rdx+0x3]
   12e90:	movzx  r8d,BYTE PTR [rdx]
   12e94:	rol    WORD PTR [rdx+0x1],0x8
   12e99:	mov    BYTE PTR [rdx+0x3],r8b
   12e9d:	mov    BYTE PTR [rdx],sil
   12ea0:	cmp    ecx,DWORD PTR [r12+0x88]
   12ea8:	jl     13023 <read_bin20hmm+0xb03>
   12eae:	add    ecx,0x1
   12eb1:	add    rax,0x4
   12eb5:	jmp    12e0d <read_bin20hmm+0x8ed>
   12eba:	nop    WORD PTR [rax+rax*1+0x0]
   12ec0:	movzx  edx,BYTE PTR [r12+0x1c8]
   12ec9:	movzx  eax,BYTE PTR [r12+0x1cb]
   12ed2:	rol    WORD PTR [r12+0x1c9],0x8
   12edc:	mov    BYTE PTR [r12+0x1cb],dl
   12ee4:	mov    rdx,r12
   12ee7:	mov    BYTE PTR [r12+0x1c8],al
   12eef:	mov    esi,DWORD PTR [rbx+0x1c]
   12ef2:	mov    rdi,QWORD PTR [rbx]
   12ef5:	call   11c30 <read_bin_string>
   12efa:	test   eax,eax
   12efc:	jne    12638 <read_bin20hmm+0x118>
   12f02:	nop    WORD PTR [rax+rax*1+0x0]
   12f08:	mov    rdi,r12
   12f0b:	call   1aed0 <FreePlan7>
   12f10:	jmp    125b4 <read_bin20hmm+0x94>
   12f15:	nop    DWORD PTR [rax]
   12f18:	test   r12,r12
   12f1b:	je     125b4 <read_bin20hmm+0x94>
   12f21:	jmp    12f08 <read_bin20hmm+0x9e8>
   12f23:	nop    DWORD PTR [rax+rax*1+0x0]
   12f28:	mov    esi,DWORD PTR [rbx+0x1c]
   12f2b:	lea    rdx,[r12+0x8]
   12f30:	mov    rdi,rcx
   12f33:	call   11c30 <read_bin_string>
   12f38:	test   eax,eax
   12f3a:	je     12f08 <read_bin20hmm+0x9e8>
   12f3c:	mov    eax,DWORD PTR [r12+0x1c8]
   12f44:	mov    rcx,QWORD PTR [rbx]
   12f47:	jmp    1264c <read_bin20hmm+0x12c>
   12f4c:	mov    esi,DWORD PTR [rbx+0x1c]
   12f4f:	lea    rdx,[r12+0x10]
   12f54:	mov    rdi,rcx
   12f57:	call   11c30 <read_bin_string>
   12f5c:	test   eax,eax
   12f5e:	je     12f08 <read_bin20hmm+0x9e8>
   12f60:	mov    rcx,QWORD PTR [rbx]
   12f63:	jmp    12654 <read_bin20hmm+0x134>
   12f68:	call   4ad0 <SetAlphabet>
   12f6d:	jmp    1271e <read_bin20hmm+0x1fe>
   12f72:	movzx  eax,BYTE PTR [r13+0x3]
   12f77:	movzx  edx,BYTE PTR [r13+0x0]
   12f7c:	mov    BYTE PTR [r13+0x0],al
   12f80:	movzx  eax,BYTE PTR [r13+0x2]
   12f85:	mov    BYTE PTR [r13+0x3],dl
   12f89:	movzx  edx,BYTE PTR [r13+0x1]
   12f8e:	mov    BYTE PTR [r13+0x1],al
   12f92:	movzx  eax,BYTE PTR [r13+0x7]
   12f97:	mov    BYTE PTR [r13+0x2],dl
   12f9b:	movzx  edx,BYTE PTR [r13+0x4]
   12fa0:	mov    BYTE PTR [r13+0x4],al
   12fa4:	movzx  eax,BYTE PTR [r13+0x6]
   12fa9:	mov    BYTE PTR [r13+0x7],dl
   12fad:	movzx  edx,BYTE PTR [r13+0x5]
   12fb2:	mov    BYTE PTR [r13+0x5],al
   12fb6:	mov    BYTE PTR [r13+0x6],dl
   12fba:	jmp    12b04 <read_bin20hmm+0x5e4>
   12fbf:	call   3570 <__stack_chk_fail@plt>
   12fc4:	mov    eax,DWORD PTR [r12+0x1c8]
   12fcc:	and    eax,0xfffffffe
   12fcf:	or     eax,0x20
   12fd2:	mov    DWORD PTR [r12+0x1c8],eax
   12fda:	mov    QWORD PTR [rbp+0x0],r12
   12fde:	mov    r12d,0x1
   12fe4:	jmp    12555 <read_bin20hmm+0x35>
   12fe9:	xor    esi,esi
   12feb:	jmp    13016 <read_bin20hmm+0xaf6>
   12fed:	mov    rdx,QWORD PTR [r12+0xa0]
   12ff5:	mov    rdx,QWORD PTR [rdx+rdi*1]
   12ff9:	lea    rdx,[rdx+rsi*4]
   12ffd:	add    rsi,0x1
   13001:	movzx  r8d,BYTE PTR [rdx+0x3]
   13006:	movzx  r9d,BYTE PTR [rdx]
   1300a:	rol    WORD PTR [rdx+0x1],0x8
   1300f:	mov    BYTE PTR [rdx+0x3],r9b
   13013:	mov    BYTE PTR [rdx],r8b
   13016:	cmp    DWORD PTR [rip+0x4f2e4],esi        # 62300 <Alphabet_size>
   1301c:	jg     12fed <read_bin20hmm+0xacd>
   1301e:	jmp    12e62 <read_bin20hmm+0x942>
   13023:	xor    esi,esi
   13025:	mov    rdx,QWORD PTR [r12+0x90]
   1302d:	mov    rbx,QWORD PTR [rdx+rdi*1]
   13031:	add    rbx,rsi
   13034:	add    rsi,0x4
   13038:	movzx  r8d,BYTE PTR [rbx+0x3]
   1303d:	movzx  r9d,BYTE PTR [rbx]
   13041:	rol    WORD PTR [rbx+0x1],0x8
   13046:	mov    BYTE PTR [rbx+0x3],r9b
   1304a:	mov    BYTE PTR [rbx],r8b
   1304d:	cmp    rsi,0x1c
   13051:	jne    13025 <read_bin20hmm+0xb05>
   13053:	jmp    12eae <read_bin20hmm+0x98e>
   13058:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000013060 <ascii2prob.part.0>:
   13060:	sub    rsp,0x18
   13064:	mov    edx,0xa
   13069:	xor    esi,esi
   1306b:	movss  DWORD PTR [rsp+0xc],xmm0
   13071:	call   3670 <strtol@plt>
   13076:	movss  xmm0,DWORD PTR [rsp+0xc]
   1307c:	add    rsp,0x18
   13080:	mov    rdi,rax
   13083:	jmp    177c0 <Score2Prob>
   13088:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000013090 <read_asc19hmm>:
   13090:	endbr64 
   13094:	push   r15
   13096:	push   r14
   13098:	push   r13
   1309a:	push   r12
   1309c:	push   rbp
   1309d:	mov    rbp,rsi
   130a0:	push   rbx
   130a1:	mov    rbx,rdi
   130a4:	sub    rsp,0x228
   130ab:	mov    r12,QWORD PTR [rdi]
   130ae:	mov    rax,QWORD PTR fs:0x28
   130b7:	mov    QWORD PTR [rsp+0x218],rax
   130bf:	xor    eax,eax
   130c1:	mov    rdi,r12
   130c4:	call   3660 <feof@plt>
   130c9:	test   eax,eax
   130cb:	je     13100 <read_asc19hmm+0x70>
   130cd:	xor    eax,eax
   130cf:	mov    rcx,QWORD PTR [rsp+0x218]
   130d7:	xor    rcx,QWORD PTR fs:0x28
   130e0:	jne    13902 <read_asc19hmm+0x872>
   130e6:	add    rsp,0x228
   130ed:	pop    rbx
   130ee:	pop    rbp
   130ef:	pop    r12
   130f1:	pop    r13
   130f3:	pop    r14
   130f5:	pop    r15
   130f7:	ret    
   130f8:	nop    DWORD PTR [rax+rax*1+0x0]
   13100:	lea    r13,[rsp+0x10]
   13105:	mov    rdx,r12
   13108:	mov    esi,0x200
   1310d:	mov    rdi,r13
   13110:	call   3620 <fgets@plt>
   13115:	test   rax,rax
   13118:	je     130cd <read_asc19hmm+0x3d>
   1311a:	movabs rax,0x31762052454d4d48
   13124:	cmp    QWORD PTR [rsp+0x10],rax
   13129:	je     13140 <read_asc19hmm+0xb0>
   1312b:	mov    QWORD PTR [rbp+0x0],0x0
   13133:	mov    eax,0x1
   13138:	jmp    130cf <read_asc19hmm+0x3f>
   1313a:	nop    WORD PTR [rax+rax*1+0x0]
   13140:	cmp    WORD PTR [r13+0x8],0x392e
   13147:	jne    1312b <read_asc19hmm+0x9b>
   13149:	call   1a920 <AllocPlan7Shell>
   1314e:	mov    rdi,r12
   13151:	mov    esi,0x1
   13156:	mov    r13,rax
   13159:	call   187a0 <Getword>
   1315e:	mov    rdi,rax
   13161:	test   rax,rax
   13164:	je     13390 <read_asc19hmm+0x300>
   1316a:	xor    esi,esi
   1316c:	mov    edx,0xa
   13171:	call   3670 <strtol@plt>
   13176:	mov    esi,0x1
   1317b:	mov    rdi,r12
   1317e:	mov    r14,rax
   13181:	call   187a0 <Getword>
   13186:	test   rax,rax
   13189:	je     13390 <read_asc19hmm+0x300>
   1318f:	mov    esi,0x4
   13194:	mov    rdi,r12
   13197:	call   187a0 <Getword>
   1319c:	mov    rsi,rax
   1319f:	test   rax,rax
   131a2:	je     13390 <read_asc19hmm+0x300>
   131a8:	mov    rdi,r13
   131ab:	call   1b1f0 <Plan7SetName>
   131b0:	mov    esi,0x4
   131b5:	mov    rdi,r12
   131b8:	call   187a0 <Getword>
   131bd:	mov    r15,rax
   131c0:	test   rax,rax
   131c3:	je     13390 <read_asc19hmm+0x300>
   131c9:	mov    rdi,rax
   131cc:	call   367e0 <s2upper>
   131d1:	mov    ecx,0x6
   131d6:	lea    rdi,[rip+0x2ac94]        # 3de71 <_IO_stdin_used+0xe71>
   131dd:	mov    rsi,r15
   131e0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   131e2:	seta   al
   131e5:	sbb    al,0x0
   131e7:	test   al,al
   131e9:	je     133b0 <read_asc19hmm+0x320>
   131ef:	lea    rdi,[rip+0x2ac81]        # 3de77 <_IO_stdin_used+0xe77>
   131f6:	mov    ecx,0x8
   131fb:	mov    rsi,r15
   131fe:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   13200:	mov    edi,0x2
   13205:	seta   al
   13208:	sbb    al,0x0
   1320a:	test   al,al
   1320c:	jne    13390 <read_asc19hmm+0x300>
   13212:	mov    eax,DWORD PTR [rip+0x4ee68]        # 62080 <Alphabet_type>
   13218:	test   eax,eax
   1321a:	je     133c0 <read_asc19hmm+0x330>
   13220:	cmp    eax,edi
   13222:	je     1324b <read_asc19hmm+0x1bb>
   13224:	call   b1c0 <AlphabetType2String>
   13229:	mov    edi,DWORD PTR [rip+0x4ee51]        # 62080 <Alphabet_type>
   1322f:	mov    r15,rax
   13232:	call   b1c0 <AlphabetType2String>
   13237:	mov    rdx,r15
   1323a:	lea    rdi,[rip+0x2aecf]        # 3e110 <_IO_stdin_used+0x1110>
   13241:	mov    rsi,rax
   13244:	xor    eax,eax
   13246:	call   317f0 <Die>
   1324b:	mov    rdi,r12
   1324e:	mov    esi,0x4
   13253:	call   187a0 <Getword>
   13258:	mov    rdi,rax
   1325b:	test   rax,rax
   1325e:	je     13390 <read_asc19hmm+0x300>
   13264:	movsxd rdx,DWORD PTR [rip+0x4f095]        # 62300 <Alphabet_size>
   1326b:	lea    rsi,[rip+0x4f00e]        # 62280 <Alphabet>
   13272:	call   34d0 <strncmp@plt>
   13277:	mov    DWORD PTR [rsp],eax
   1327a:	test   eax,eax
   1327c:	jne    13390 <read_asc19hmm+0x300>
   13282:	mov    esi,0x4
   13287:	mov    rdi,r12
   1328a:	call   187a0 <Getword>
   1328f:	mov    rsi,rax
   13292:	test   rax,rax
   13295:	je     13390 <read_asc19hmm+0x300>
   1329b:	lea    r15,[rip+0x2abdd]        # 3de7f <_IO_stdin_used+0xe7f>
   132a2:	mov    ecx,0x4
   132a7:	mov    rdi,r15
   132aa:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   132ac:	seta   al
   132af:	sbb    al,0x0
   132b1:	test   al,al
   132b3:	jne    133ca <read_asc19hmm+0x33a>
   132b9:	or     DWORD PTR [r13+0x1c8],0x4
   132c1:	mov    esi,0x4
   132c6:	mov    rdi,r12
   132c9:	call   187a0 <Getword>
   132ce:	mov    rsi,rax
   132d1:	test   rax,rax
   132d4:	je     13399 <read_asc19hmm+0x309>
   132da:	mov    ecx,0x4
   132df:	mov    rdi,r15
   132e2:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   132e4:	seta   al
   132e7:	sbb    al,0x0
   132e9:	test   al,al
   132eb:	jne    133e5 <read_asc19hmm+0x355>
   132f1:	or     DWORD PTR [r13+0x1c8],0x8
   132f9:	mov    esi,0x4
   132fe:	mov    rdi,r12
   13301:	call   187a0 <Getword>
   13306:	mov    rsi,rax
   13309:	test   rax,rax
   1330c:	je     13399 <read_asc19hmm+0x309>
   13312:	mov    ecx,0x5
   13317:	lea    rdi,[rip+0x2ab65]        # 3de83 <_IO_stdin_used+0xe83>
   1331e:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   13320:	seta   al
   13323:	sbb    al,0x0
   13325:	test   al,al
   13327:	jne    13399 <read_asc19hmm+0x309>
   13329:	mov    edx,DWORD PTR [rip+0x4efd1]        # 62300 <Alphabet_size>
   1332f:	xor    r15d,r15d
   13332:	test   edx,edx
   13334:	jg     13371 <read_asc19hmm+0x2e1>
   13336:	jmp    1341a <read_asc19hmm+0x38a>
   1333b:	nop    DWORD PTR [rax+rax*1+0x0]
   13340:	cmp    BYTE PTR [rax],0x2a
   13343:	pxor   xmm0,xmm0
   13347:	je     13356 <read_asc19hmm+0x2c6>
   13349:	movss  xmm0,DWORD PTR [rip+0x2a04b]        # 3d39c <_IO_stdin_used+0x39c>
   13351:	call   13060 <ascii2prob.part.0>
   13356:	movss  DWORD PTR [r13+r15*4+0xe0],xmm0
   13360:	add    r15,0x1
   13364:	cmp    DWORD PTR [rip+0x4ef95],r15d        # 62300 <Alphabet_size>
   1336b:	jle    1341a <read_asc19hmm+0x38a>
   13371:	mov    rdi,r12
   13374:	mov    esi,0x1
   13379:	call   187a0 <Getword>
   1337e:	mov    rdi,rax
   13381:	test   rax,rax
   13384:	jne    13340 <read_asc19hmm+0x2b0>
   13386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13390:	test   r13,r13
   13393:	je     1312b <read_asc19hmm+0x9b>
   13399:	mov    rdi,r13
   1339c:	call   1aed0 <FreePlan7>
   133a1:	jmp    1312b <read_asc19hmm+0x9b>
   133a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   133b0:	mov    edi,0x3
   133b5:	jmp    13212 <read_asc19hmm+0x182>
   133ba:	nop    WORD PTR [rax+rax*1+0x0]
   133c0:	call   4ad0 <SetAlphabet>
   133c5:	jmp    1324b <read_asc19hmm+0x1bb>
   133ca:	mov    esi,0x4
   133cf:	mov    rdi,r12
   133d2:	call   187a0 <Getword>
   133d7:	mov    rsi,rax
   133da:	test   rax,rax
   133dd:	jne    132da <read_asc19hmm+0x24a>
   133e3:	jmp    13390 <read_asc19hmm+0x300>
   133e5:	mov    esi,0x4
   133ea:	mov    rdi,r12
   133ed:	call   187a0 <Getword>
   133f2:	mov    rsi,rax
   133f5:	test   rax,rax
   133f8:	je     13390 <read_asc19hmm+0x300>
   133fa:	mov    ecx,0x5
   133ff:	lea    rdi,[rip+0x2aa7d]        # 3de83 <_IO_stdin_used+0xe83>
   13406:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   13408:	seta   al
   1340b:	sbb    al,0x0
   1340d:	test   al,al
   1340f:	je     13329 <read_asc19hmm+0x299>
   13415:	jmp    13390 <read_asc19hmm+0x300>
   1341a:	cmp    DWORD PTR [rip+0x4ec5f],0x3        # 62080 <Alphabet_type>
   13421:	movss  xmm0,DWORD PTR [rip+0x2ae93]        # 3e2bc <_IO_stdin_used+0x12bc>
   13429:	je     13433 <read_asc19hmm+0x3a3>
   1342b:	movss  xmm0,DWORD PTR [rip+0x2ae8d]        # 3e2c0 <_IO_stdin_used+0x12c0>
   13433:	movss  DWORD PTR [r13+0x130],xmm0
   1343c:	mov    rdi,QWORD PTR [rbx]
   1343f:	call   3660 <feof@plt>
   13444:	test   r14d,r14d
   13447:	jle    13399 <read_asc19hmm+0x309>
   1344d:	test   eax,eax
   1344f:	jne    13399 <read_asc19hmm+0x309>
   13455:	cmp    QWORD PTR [r13+0x0],0x0
   1345a:	je     13399 <read_asc19hmm+0x309>
   13460:	mov    eax,DWORD PTR [rip+0x4ec1a]        # 62080 <Alphabet_type>
   13466:	test   eax,eax
   13468:	je     13399 <read_asc19hmm+0x309>
   1346e:	mov    esi,r14d
   13471:	mov    rdi,r13
   13474:	call   1aab0 <AllocPlan7Body>
   13479:	mov    rdi,r13
   1347c:	call   1b0d0 <ZeroPlan7>
   13481:	mov    rdi,r13
   13484:	call   1b900 <Plan7LSConfig>
   13489:	mov    esi,0x1
   1348e:	mov    rdi,r12
   13491:	call   187a0 <Getword>
   13496:	test   rax,rax
   13499:	je     13399 <read_asc19hmm+0x309>
   1349f:	cmp    DWORD PTR [rip+0x4ee5a],0x0        # 62300 <Alphabet_size>
   134a6:	jle    134cd <read_asc19hmm+0x43d>
   134a8:	mov    esi,0x1
   134ad:	mov    rdi,r12
   134b0:	call   187a0 <Getword>
   134b5:	test   rax,rax
   134b8:	je     13399 <read_asc19hmm+0x309>
   134be:	add    DWORD PTR [rsp],0x1
   134c2:	mov    eax,DWORD PTR [rsp]
   134c5:	cmp    DWORD PTR [rip+0x4ee35],eax        # 62300 <Alphabet_size>
   134cb:	jg     134a8 <read_asc19hmm+0x418>
   134cd:	mov    rdi,r12
   134d0:	mov    esi,0x1
   134d5:	call   187a0 <Getword>
   134da:	mov    rdi,rax
   134dd:	test   rax,rax
   134e0:	je     13399 <read_asc19hmm+0x309>
   134e6:	cmp    BYTE PTR [rax],0x2a
   134e9:	mov    rbx,QWORD PTR [r13+0xd0]
   134f0:	pxor   xmm0,xmm0
   134f4:	je     13503 <read_asc19hmm+0x473>
   134f6:	movss  xmm0,DWORD PTR [rip+0x29e9e]        # 3d39c <_IO_stdin_used+0x39c>
   134fe:	call   13060 <ascii2prob.part.0>
   13503:	mov    rdi,r12
   13506:	movss  DWORD PTR [rbx+0x4],xmm0
   1350b:	mov    esi,0x1
   13510:	call   187a0 <Getword>
   13515:	mov    rdi,rax
   13518:	test   rax,rax
   1351b:	je     13399 <read_asc19hmm+0x309>
   13521:	cmp    BYTE PTR [rax],0x2a
   13524:	pxor   xmm1,xmm1
   13528:	je     1353a <read_asc19hmm+0x4aa>
   1352a:	movss  xmm0,DWORD PTR [rip+0x29e6a]        # 3d39c <_IO_stdin_used+0x39c>
   13532:	call   13060 <ascii2prob.part.0>
   13537:	movaps xmm1,xmm0
   1353a:	mov    rax,QWORD PTR [r13+0xd0]
   13541:	mov    ebx,0x7
   13546:	movss  DWORD PTR [r13+0xa8],xmm1
   1354f:	movss  xmm0,DWORD PTR [rax+0x4]
   13554:	addss  xmm1,xmm0
   13558:	divss  xmm0,xmm1
   1355c:	movss  DWORD PTR [rax+0x4],xmm0
   13561:	movss  xmm1,DWORD PTR [r13+0xa8]
   1356a:	addss  xmm0,xmm1
   1356e:	divss  xmm1,xmm0
   13572:	movss  DWORD PTR [r13+0xa8],xmm1
   1357b:	mov    esi,0x1
   13580:	mov    rdi,r12
   13583:	call   187a0 <Getword>
   13588:	test   rax,rax
   1358b:	je     13399 <read_asc19hmm+0x309>
   13591:	sub    ebx,0x1
   13594:	jne    1357b <read_asc19hmm+0x4eb>
   13596:	mov    esi,0x4
   1359b:	mov    rdi,r12
   1359e:	call   187a0 <Getword>
   135a3:	test   rax,rax
   135a6:	je     13399 <read_asc19hmm+0x309>
   135ac:	mov    esi,0x4
   135b1:	mov    rdi,r12
   135b4:	call   187a0 <Getword>
   135b9:	test   rax,rax
   135bc:	je     13399 <read_asc19hmm+0x309>
   135c2:	mov    r14d,0x1
   135c8:	mov    r15d,r14d
   135cb:	cmp    DWORD PTR [r13+0x88],r14d
   135d2:	jl     13907 <read_asc19hmm+0x877>
   135d8:	mov    esi,0x1
   135dd:	mov    rdi,r12
   135e0:	call   187a0 <Getword>
   135e5:	test   rax,rax
   135e8:	je     13399 <read_asc19hmm+0x309>
   135ee:	lea    rbx,[r14*8+0x0]
   135f6:	xor    edx,edx
   135f8:	jmp    13658 <read_asc19hmm+0x5c8>
   135fa:	mov    rdi,r12
   135fd:	mov    esi,0x1
   13602:	mov    QWORD PTR [rsp],rdx
   13606:	call   187a0 <Getword>
   1360b:	mov    rdi,rax
   1360e:	test   rax,rax
   13611:	je     13399 <read_asc19hmm+0x309>
   13617:	mov    rax,QWORD PTR [r13+0x98]
   1361e:	mov    rdx,QWORD PTR [rsp]
   13622:	pxor   xmm0,xmm0
   13626:	cmp    BYTE PTR [rdi],0x2a
   13629:	mov    rax,QWORD PTR [rax+rbx*1]
   1362d:	lea    rax,[rax+rdx*4]
   13631:	je     13650 <read_asc19hmm+0x5c0>
   13633:	movss  xmm0,DWORD PTR [r13+rdx*4+0xe0]
   1363d:	mov    QWORD PTR [rsp+0x8],rax
   13642:	call   13060 <ascii2prob.part.0>
   13647:	mov    rax,QWORD PTR [rsp+0x8]
   1364c:	mov    rdx,QWORD PTR [rsp]
   13650:	movss  DWORD PTR [rax],xmm0
   13654:	add    rdx,0x1
   13658:	cmp    DWORD PTR [rip+0x4eca2],edx        # 62300 <Alphabet_size>
   1365e:	jg     135fa <read_asc19hmm+0x56a>
   13660:	mov    rdi,r12
   13663:	mov    esi,0x1
   13668:	call   187a0 <Getword>
   1366d:	mov    rdi,rax
   13670:	test   rax,rax
   13673:	je     13399 <read_asc19hmm+0x309>
   13679:	cmp    DWORD PTR [r13+0x88],r15d
   13680:	jle    136af <read_asc19hmm+0x61f>
   13682:	mov    rax,QWORD PTR [r13+0x90]
   13689:	cmp    BYTE PTR [rdi],0x2a
   1368c:	pxor   xmm0,xmm0
   13690:	mov    rax,QWORD PTR [rax+rbx*1]
   13694:	je     136ab <read_asc19hmm+0x61b>
   13696:	movss  xmm0,DWORD PTR [rip+0x29cfe]        # 3d39c <_IO_stdin_used+0x39c>
   1369e:	mov    QWORD PTR [rsp],rax
   136a2:	call   13060 <ascii2prob.part.0>
   136a7:	mov    rax,QWORD PTR [rsp]
   136ab:	movss  DWORD PTR [rax],xmm0
   136af:	mov    rdi,r12
   136b2:	mov    esi,0x1
   136b7:	call   187a0 <Getword>
   136bc:	mov    rdi,rax
   136bf:	test   rax,rax
   136c2:	je     13399 <read_asc19hmm+0x309>
   136c8:	cmp    DWORD PTR [r13+0x88],r15d
   136cf:	jle    136f7 <read_asc19hmm+0x667>
   136d1:	cmp    BYTE PTR [rax],0x2a
   136d4:	pxor   xmm0,xmm0
   136d8:	je     136e7 <read_asc19hmm+0x657>
   136da:	movss  xmm0,DWORD PTR [rip+0x29cba]        # 3d39c <_IO_stdin_used+0x39c>
   136e2:	call   13060 <ascii2prob.part.0>
   136e7:	mov    rax,QWORD PTR [r13+0x90]
   136ee:	mov    rax,QWORD PTR [rax+rbx*1]
   136f2:	movss  DWORD PTR [rax+0x8],xmm0
   136f7:	mov    rdi,r12
   136fa:	mov    esi,0x1
   136ff:	call   187a0 <Getword>
   13704:	mov    rdi,rax
   13707:	test   rax,rax
   1370a:	je     13399 <read_asc19hmm+0x309>
   13710:	cmp    DWORD PTR [r13+0x88],r15d
   13717:	jle    13747 <read_asc19hmm+0x6b7>
   13719:	mov    rax,QWORD PTR [r13+0x90]
   13720:	cmp    BYTE PTR [rdi],0x2a
   13723:	pxor   xmm0,xmm0
   13727:	mov    rax,QWORD PTR [rax+rbx*1]
   1372b:	je     13742 <read_asc19hmm+0x6b2>
   1372d:	movss  xmm0,DWORD PTR [rip+0x29c67]        # 3d39c <_IO_stdin_used+0x39c>
   13735:	mov    QWORD PTR [rsp],rax
   13739:	call   13060 <ascii2prob.part.0>
   1373e:	mov    rax,QWORD PTR [rsp]
   13742:	movss  DWORD PTR [rax+0x4],xmm0
   13747:	mov    rdi,r12
   1374a:	mov    esi,0x1
   1374f:	call   187a0 <Getword>
   13754:	mov    rdi,rax
   13757:	test   rax,rax
   1375a:	je     13399 <read_asc19hmm+0x309>
   13760:	cmp    DWORD PTR [r13+0x88],r15d
   13767:	jle    13797 <read_asc19hmm+0x707>
   13769:	mov    rax,QWORD PTR [r13+0x90]
   13770:	cmp    BYTE PTR [rdi],0x2a
   13773:	pxor   xmm0,xmm0
   13777:	mov    rax,QWORD PTR [rax+rbx*1]
   1377b:	je     13792 <read_asc19hmm+0x702>
   1377d:	movss  xmm0,DWORD PTR [rip+0x29c17]        # 3d39c <_IO_stdin_used+0x39c>
   13785:	mov    QWORD PTR [rsp],rax
   13789:	call   13060 <ascii2prob.part.0>
   1378e:	mov    rax,QWORD PTR [rsp]
   13792:	movss  DWORD PTR [rax+0x14],xmm0
   13797:	mov    rdi,r12
   1379a:	mov    esi,0x1
   1379f:	call   187a0 <Getword>
   137a4:	mov    rdi,rax
   137a7:	test   rax,rax
   137aa:	je     13399 <read_asc19hmm+0x309>
   137b0:	cmp    DWORD PTR [r13+0x88],r15d
   137b7:	jle    137df <read_asc19hmm+0x74f>
   137b9:	cmp    BYTE PTR [rax],0x2a
   137bc:	pxor   xmm0,xmm0
   137c0:	je     137cf <read_asc19hmm+0x73f>
   137c2:	movss  xmm0,DWORD PTR [rip+0x29bd2]        # 3d39c <_IO_stdin_used+0x39c>
   137ca:	call   13060 <ascii2prob.part.0>
   137cf:	mov    rax,QWORD PTR [r13+0x90]
   137d6:	mov    rax,QWORD PTR [rax+rbx*1]
   137da:	movss  DWORD PTR [rax+0x18],xmm0
   137df:	mov    esi,0x1
   137e4:	mov    rdi,r12
   137e7:	call   187a0 <Getword>
   137ec:	test   rax,rax
   137ef:	je     13399 <read_asc19hmm+0x309>
   137f5:	mov    rdi,r12
   137f8:	mov    esi,0x1
   137fd:	call   187a0 <Getword>
   13802:	mov    rdi,rax
   13805:	test   rax,rax
   13808:	je     13399 <read_asc19hmm+0x309>
   1380e:	cmp    DWORD PTR [r13+0x88],r15d
   13815:	jle    13845 <read_asc19hmm+0x7b5>
   13817:	mov    rax,QWORD PTR [r13+0x90]
   1381e:	cmp    BYTE PTR [rdi],0x2a
   13821:	pxor   xmm0,xmm0
   13825:	mov    rax,QWORD PTR [rax+rbx*1]
   13829:	je     13840 <read_asc19hmm+0x7b0>
   1382b:	movss  xmm0,DWORD PTR [rip+0x29b69]        # 3d39c <_IO_stdin_used+0x39c>
   13833:	mov    QWORD PTR [rsp],rax
   13837:	call   13060 <ascii2prob.part.0>
   1383c:	mov    rax,QWORD PTR [rsp]
   13840:	movss  DWORD PTR [rax+0xc],xmm0
   13845:	mov    esi,0x1
   1384a:	mov    rdi,r12
   1384d:	call   187a0 <Getword>
   13852:	test   rax,rax
   13855:	je     13399 <read_asc19hmm+0x309>
   1385b:	mov    rdi,r12
   1385e:	mov    esi,0x1
   13863:	call   187a0 <Getword>
   13868:	mov    rdi,rax
   1386b:	test   rax,rax
   1386e:	je     13399 <read_asc19hmm+0x309>
   13874:	cmp    DWORD PTR [r13+0x88],r15d
   1387b:	jle    138a3 <read_asc19hmm+0x813>
   1387d:	mov    rax,QWORD PTR [r13+0x90]
   13884:	cmp    BYTE PTR [rdi],0x2a
   13887:	pxor   xmm0,xmm0
   1388b:	mov    rbx,QWORD PTR [rax+rbx*1]
   1388f:	je     1389e <read_asc19hmm+0x80e>
   13891:	movss  xmm0,DWORD PTR [rip+0x29b03]        # 3d39c <_IO_stdin_used+0x39c>
   13899:	call   13060 <ascii2prob.part.0>
   1389e:	movss  DWORD PTR [rbx+0x10],xmm0
   138a3:	mov    esi,0x4
   138a8:	mov    rdi,r12
   138ab:	call   187a0 <Getword>
   138b0:	test   rax,rax
   138b3:	je     13399 <read_asc19hmm+0x309>
   138b9:	test   BYTE PTR [r13+0x1c8],0x4
   138c1:	je     138ce <read_asc19hmm+0x83e>
   138c3:	movzx  edx,BYTE PTR [rax]
   138c6:	mov    rax,QWORD PTR [r13+0x18]
   138ca:	mov    BYTE PTR [rax+r14*1],dl
   138ce:	mov    esi,0x4
   138d3:	mov    rdi,r12
   138d6:	call   187a0 <Getword>
   138db:	test   rax,rax
   138de:	je     13399 <read_asc19hmm+0x309>
   138e4:	test   BYTE PTR [r13+0x1c8],0x8
   138ec:	je     138f9 <read_asc19hmm+0x869>
   138ee:	movzx  edx,BYTE PTR [rax]
   138f1:	mov    rax,QWORD PTR [r13+0x20]
   138f5:	mov    BYTE PTR [rax+r14*1],dl
   138f9:	add    r14,0x1
   138fd:	jmp    135c8 <read_asc19hmm+0x538>
   13902:	call   3570 <__stack_chk_fail@plt>
   13907:	xor    ebx,ebx
   13909:	mov    r14d,ebx
   1390c:	cmp    DWORD PTR [r13+0x88],ebx
   13913:	jl     139b6 <read_asc19hmm+0x926>
   13919:	mov    esi,0x1
   1391e:	mov    rdi,r12
   13921:	call   187a0 <Getword>
   13926:	test   rax,rax
   13929:	je     13399 <read_asc19hmm+0x309>
   1392f:	lea    rax,[rbx*8+0x0]
   13937:	xor    r15d,r15d
   1393a:	mov    QWORD PTR [rsp],rax
   1393e:	jmp    139a4 <read_asc19hmm+0x914>
   13940:	mov    rdi,r12
   13943:	mov    esi,0x1
   13948:	call   187a0 <Getword>
   1394d:	mov    rdi,rax
   13950:	test   rax,rax
   13953:	je     13399 <read_asc19hmm+0x309>
   13959:	test   r14d,r14d
   1395c:	je     139a0 <read_asc19hmm+0x910>
   1395e:	cmp    DWORD PTR [r13+0x88],r14d
   13965:	jle    139a0 <read_asc19hmm+0x910>
   13967:	mov    rax,QWORD PTR [r13+0xa0]
   1396e:	mov    rdx,QWORD PTR [rsp]
   13972:	pxor   xmm0,xmm0
   13976:	cmp    BYTE PTR [rdi],0x2a
   13979:	mov    rax,QWORD PTR [rax+rdx*1]
   1397d:	lea    rax,[rax+r15*4]
   13981:	je     1399c <read_asc19hmm+0x90c>
   13983:	movss  xmm0,DWORD PTR [r13+r15*4+0xe0]
   1398d:	mov    QWORD PTR [rsp+0x8],rax
   13992:	call   13060 <ascii2prob.part.0>
   13997:	mov    rax,QWORD PTR [rsp+0x8]
   1399c:	movss  DWORD PTR [rax],xmm0
   139a0:	add    r15,0x1
   139a4:	cmp    DWORD PTR [rip+0x4e955],r15d        # 62300 <Alphabet_size>
   139ab:	jg     13940 <read_asc19hmm+0x8b0>
   139ad:	add    rbx,0x1
   139b1:	jmp    13909 <read_asc19hmm+0x879>
   139b6:	mov    eax,DWORD PTR [r13+0x1c8]
   139bd:	mov    rdi,r13
   139c0:	and    eax,0xfffffffe
   139c3:	or     eax,0x20
   139c6:	mov    DWORD PTR [r13+0x1c8],eax
   139cd:	call   1b490 <Plan7Renormalize>
   139d2:	lea    rdi,[rip+0x2a7bf]        # 3e198 <_IO_stdin_used+0x1198>
   139d9:	call   36670 <Strdup>
   139de:	mov    rdi,r13
   139e1:	mov    QWORD PTR [r13+0x30],rax
   139e5:	call   1b3e0 <Plan7SetCtime>
   139ea:	mov    QWORD PTR [rbp+0x0],r13
   139ee:	mov    eax,0x1
   139f3:	jmp    130cf <read_asc19hmm+0x3f>
   139f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000013a00 <read_asc20hmm>:
   13a00:	endbr64 
   13a04:	push   r15
   13a06:	push   r14
   13a08:	push   r13
   13a0a:	push   r12
   13a0c:	mov    r12,rsi
   13a0f:	push   rbp
   13a10:	push   rbx
   13a11:	mov    rbx,rdi
   13a14:	sub    rsp,0x238
   13a1b:	mov    rdi,QWORD PTR [rdi]
   13a1e:	mov    rax,QWORD PTR fs:0x28
   13a27:	mov    QWORD PTR [rsp+0x228],rax
   13a2f:	xor    eax,eax
   13a31:	call   3660 <feof@plt>
   13a36:	test   eax,eax
   13a38:	je     13a68 <read_asc20hmm+0x68>
   13a3a:	xor    eax,eax
   13a3c:	mov    rcx,QWORD PTR [rsp+0x228]
   13a44:	xor    rcx,QWORD PTR fs:0x28
   13a4d:	jne    1478c <read_asc20hmm+0xd8c>
   13a53:	add    rsp,0x238
   13a5a:	pop    rbx
   13a5b:	pop    rbp
   13a5c:	pop    r12
   13a5e:	pop    r13
   13a60:	pop    r14
   13a62:	pop    r15
   13a64:	ret    
   13a65:	nop    DWORD PTR [rax]
   13a68:	lea    r15,[rsp+0x20]
   13a6d:	mov    rdx,QWORD PTR [rbx]
   13a70:	mov    esi,0x200
   13a75:	mov    rdi,r15
   13a78:	call   3620 <fgets@plt>
   13a7d:	test   rax,rax
   13a80:	je     13a3a <read_asc20hmm+0x3a>
   13a82:	movabs rax,0x302e3252454d4d48
   13a8c:	cmp    QWORD PTR [rsp+0x20],rax
   13a91:	je     13aa8 <read_asc20hmm+0xa8>
   13a93:	mov    QWORD PTR [r12],0x0
   13a9b:	mov    eax,0x1
   13aa0:	jmp    13a3c <read_asc20hmm+0x3c>
   13aa2:	nop    WORD PTR [rax+rax*1+0x0]
   13aa8:	call   1a920 <AllocPlan7Shell>
   13aad:	mov    r13d,0xffffffff
   13ab3:	mov    rbp,rax
   13ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13ac0:	mov    rdx,QWORD PTR [rbx]
   13ac3:	mov    esi,0x200
   13ac8:	mov    rdi,r15
   13acb:	call   3620 <fgets@plt>
   13ad0:	test   rax,rax
   13ad3:	je     13bf0 <read_asc20hmm+0x1f0>
   13ad9:	cmp    DWORD PTR [r15],0x454d414e
   13ae0:	je     13c30 <read_asc20hmm+0x230>
   13ae6:	cmp    DWORD PTR [r15],0x20434341
   13aed:	je     13c50 <read_asc20hmm+0x250>
   13af3:	cmp    DWORD PTR [r15],0x43534544
   13afa:	je     13c70 <read_asc20hmm+0x270>
   13b00:	cmp    DWORD PTR [r15],0x474e454c
   13b07:	je     13c90 <read_asc20hmm+0x290>
   13b0d:	cmp    DWORD PTR [r15],0x5145534e
   13b14:	je     13cb8 <read_asc20hmm+0x2b8>
   13b1a:	cmp    DWORD PTR [r15],0x48504c41
   13b21:	je     13ce0 <read_asc20hmm+0x2e0>
   13b27:	cmp    DWORD PTR [r15],0x20204652
   13b2e:	je     13d60 <read_asc20hmm+0x360>
   13b34:	cmp    DWORD PTR [r15],0x20205343
   13b3b:	je     13dc8 <read_asc20hmm+0x3c8>
   13b41:	cmp    DWORD PTR [r15],0x2050414d
   13b48:	je     13df8 <read_asc20hmm+0x3f8>
   13b4e:	cmp    DWORD PTR [r15],0x204d4f43
   13b55:	je     13ef0 <read_asc20hmm+0x4f0>
   13b5b:	cmp    DWORD PTR [r15],0x45544144
   13b62:	je     13f90 <read_asc20hmm+0x590>
   13b68:	cmp    DWORD PTR [r15],0x20204147
   13b6f:	je     14428 <read_asc20hmm+0xa28>
   13b75:	cmp    DWORD PTR [r15],0x20204354
   13b7c:	je     14499 <read_asc20hmm+0xa99>
   13b82:	cmp    DWORD PTR [r15],0x2020434e
   13b89:	je     1417e <read_asc20hmm+0x77e>
   13b8f:	cmp    DWORD PTR [r15],0x20205458
   13b96:	je     13e25 <read_asc20hmm+0x425>
   13b9c:	cmp    DWORD PTR [r15],0x544c554e
   13ba3:	je     1451b <read_asc20hmm+0xb1b>
   13ba9:	cmp    DWORD PTR [r15],0x454c554e
   13bb0:	je     145ba <read_asc20hmm+0xbba>
   13bb6:	cmp    DWORD PTR [r15],0x20445645
   13bbd:	je     1466b <read_asc20hmm+0xc6b>
   13bc3:	cmp    DWORD PTR [r15],0x55534b43
   13bca:	je     146e2 <read_asc20hmm+0xce2>
   13bd0:	cmp    DWORD PTR [r15],0x204d4d48
   13bd7:	jne    13ac0 <read_asc20hmm+0xc0>
   13bdd:	cmp    BYTE PTR [r15+0x4],0x20
   13be2:	jne    13ac0 <read_asc20hmm+0xc0>
   13be8:	nop    DWORD PTR [rax+rax*1+0x0]
   13bf0:	mov    rdi,QWORD PTR [rbx]
   13bf3:	call   3660 <feof@plt>
   13bf8:	test   r13d,r13d
   13bfb:	jle    13ed8 <read_asc20hmm+0x4d8>
   13c01:	test   eax,eax
   13c03:	jne    13ed8 <read_asc20hmm+0x4d8>
   13c09:	cmp    QWORD PTR [rbp+0x0],0x0
   13c0e:	je     13c1e <read_asc20hmm+0x21e>
   13c10:	mov    esi,DWORD PTR [rip+0x4e46a]        # 62080 <Alphabet_type>
   13c16:	test   esi,esi
   13c18:	jne    13fb9 <read_asc20hmm+0x5b9>
   13c1e:	mov    rdi,rbp
   13c21:	call   1aed0 <FreePlan7>
   13c26:	jmp    13a93 <read_asc20hmm+0x93>
   13c2b:	nop    DWORD PTR [rax+rax*1+0x0]
   13c30:	cmp    BYTE PTR [r15+0x4],0x20
   13c35:	jne    13ae6 <read_asc20hmm+0xe6>
   13c3b:	lea    rsi,[rsp+0x26]
   13c40:	mov    rdi,rbp
   13c43:	call   1b1f0 <Plan7SetName>
   13c48:	jmp    13ac0 <read_asc20hmm+0xc0>
   13c4d:	nop    DWORD PTR [rax]
   13c50:	cmp    BYTE PTR [r15+0x4],0x20
   13c55:	jne    13af3 <read_asc20hmm+0xf3>
   13c5b:	lea    rsi,[rsp+0x26]
   13c60:	mov    rdi,rbp
   13c63:	call   1b230 <Plan7SetAccession>
   13c68:	jmp    13ac0 <read_asc20hmm+0xc0>
   13c6d:	nop    DWORD PTR [rax]
   13c70:	cmp    BYTE PTR [r15+0x4],0x20
   13c75:	jne    13b00 <read_asc20hmm+0x100>
   13c7b:	lea    rsi,[rsp+0x26]
   13c80:	mov    rdi,rbp
   13c83:	call   1b280 <Plan7SetDescription>
   13c88:	jmp    13ac0 <read_asc20hmm+0xc0>
   13c8d:	nop    DWORD PTR [rax]
   13c90:	cmp    BYTE PTR [r15+0x4],0x20
   13c95:	jne    13b0d <read_asc20hmm+0x10d>
   13c9b:	lea    rdi,[rsp+0x26]
   13ca0:	mov    edx,0xa
   13ca5:	xor    esi,esi
   13ca7:	call   3670 <strtol@plt>
   13cac:	mov    r13d,eax
   13caf:	jmp    13ac0 <read_asc20hmm+0xc0>
   13cb4:	nop    DWORD PTR [rax+0x0]
   13cb8:	cmp    BYTE PTR [r15+0x4],0x20
   13cbd:	jne    13b1a <read_asc20hmm+0x11a>
   13cc3:	lea    rdi,[rsp+0x26]
   13cc8:	mov    edx,0xa
   13ccd:	xor    esi,esi
   13ccf:	call   3670 <strtol@plt>
   13cd4:	mov    DWORD PTR [rbp+0x38],eax
   13cd7:	jmp    13ac0 <read_asc20hmm+0xc0>
   13cdc:	nop    DWORD PTR [rax+0x0]
   13ce0:	cmp    BYTE PTR [r15+0x4],0x20
   13ce5:	jne    13b27 <read_asc20hmm+0x127>
   13ceb:	lea    r14,[rsp+0x26]
   13cf0:	mov    rdi,r14
   13cf3:	call   367e0 <s2upper>
   13cf8:	mov    ecx,0x5
   13cfd:	lea    rdi,[rip+0x2a16d]        # 3de71 <_IO_stdin_used+0xe71>
   13d04:	mov    rsi,r14
   13d07:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   13d09:	seta   al
   13d0c:	sbb    al,0x0
   13d0e:	test   al,al
   13d10:	jne    13d8a <read_asc20hmm+0x38a>
   13d12:	mov    eax,DWORD PTR [rip+0x4e368]        # 62080 <Alphabet_type>
   13d18:	mov    edi,0x3
   13d1d:	test   eax,eax
   13d1f:	je     13dbb <read_asc20hmm+0x3bb>
   13d25:	cmp    eax,edi
   13d27:	je     13ac0 <read_asc20hmm+0xc0>
   13d2d:	call   b1c0 <AlphabetType2String>
   13d32:	mov    edi,DWORD PTR [rip+0x4e348]        # 62080 <Alphabet_type>
   13d38:	mov    r14,rax
   13d3b:	call   b1c0 <AlphabetType2String>
   13d40:	mov    rdx,r14
   13d43:	lea    rdi,[rip+0x2a3c6]        # 3e110 <_IO_stdin_used+0x1110>
   13d4a:	mov    rsi,rax
   13d4d:	xor    eax,eax
   13d4f:	call   317f0 <Die>
   13d54:	jmp    13ac0 <read_asc20hmm+0xc0>
   13d59:	nop    DWORD PTR [rax+0x0]
   13d60:	cmp    BYTE PTR [r15+0x4],0x20
   13d65:	jne    13b34 <read_asc20hmm+0x134>
   13d6b:	movsx  edi,BYTE PTR [rsp+0x26]
   13d70:	call   35740 <sre_toupper>
   13d75:	cmp    eax,0x59
   13d78:	jne    13ac0 <read_asc20hmm+0xc0>
   13d7e:	or     DWORD PTR [rbp+0x1c8],0x4
   13d85:	jmp    13ac0 <read_asc20hmm+0xc0>
   13d8a:	mov    ecx,0x7
   13d8f:	lea    rdi,[rip+0x2a0e1]        # 3de77 <_IO_stdin_used+0xe77>
   13d96:	mov    rsi,r14
   13d99:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   13d9b:	seta   al
   13d9e:	sbb    al,0x0
   13da0:	test   al,al
   13da2:	jne    13ed8 <read_asc20hmm+0x4d8>
   13da8:	mov    eax,DWORD PTR [rip+0x4e2d2]        # 62080 <Alphabet_type>
   13dae:	mov    edi,0x2
   13db3:	test   eax,eax
   13db5:	jne    13d25 <read_asc20hmm+0x325>
   13dbb:	call   4ad0 <SetAlphabet>
   13dc0:	jmp    13ac0 <read_asc20hmm+0xc0>
   13dc5:	nop    DWORD PTR [rax]
   13dc8:	cmp    BYTE PTR [r15+0x4],0x20
   13dcd:	jne    13b41 <read_asc20hmm+0x141>
   13dd3:	movsx  edi,BYTE PTR [rsp+0x26]
   13dd8:	call   35740 <sre_toupper>
   13ddd:	cmp    eax,0x59
   13de0:	jne    13ac0 <read_asc20hmm+0xc0>
   13de6:	or     DWORD PTR [rbp+0x1c8],0x8
   13ded:	jmp    13ac0 <read_asc20hmm+0xc0>
   13df2:	nop    WORD PTR [rax+rax*1+0x0]
   13df8:	cmp    BYTE PTR [r15+0x4],0x20
   13dfd:	jne    13b4e <read_asc20hmm+0x14e>
   13e03:	movsx  edi,BYTE PTR [rsp+0x26]
   13e08:	call   35740 <sre_toupper>
   13e0d:	cmp    eax,0x59
   13e10:	jne    13ac0 <read_asc20hmm+0xc0>
   13e16:	or     DWORD PTR [rbp+0x1c8],0x100
   13e20:	jmp    13ac0 <read_asc20hmm+0xc0>
   13e25:	cmp    BYTE PTR [r15+0x4],0x20
   13e2a:	jne    13b9c <read_asc20hmm+0x19c>
   13e30:	lea    rdi,[rsp+0x26]
   13e35:	lea    rsi,[rip+0x2de90]        # 41ccc <CSWTCH.18+0x60c>
   13e3c:	call   3770 <strtok@plt>
   13e41:	mov    rdi,rax
   13e44:	test   rax,rax
   13e47:	je     13ed8 <read_asc20hmm+0x4d8>
   13e4d:	lea    rax,[rbp+0xcc]
   13e54:	lea    r14,[rbp+0xac]
   13e5b:	mov    QWORD PTR [rsp+0x8],rax
   13e60:	cmp    BYTE PTR [rdi],0x2a
   13e63:	pxor   xmm0,xmm0
   13e67:	je     13e76 <read_asc20hmm+0x476>
   13e69:	movss  xmm0,DWORD PTR [rip+0x2952b]        # 3d39c <_IO_stdin_used+0x39c>
   13e71:	call   13060 <ascii2prob.part.0>
   13e76:	xor    edi,edi
   13e78:	movss  DWORD PTR [r14],xmm0
   13e7d:	lea    rsi,[rip+0x2de48]        # 41ccc <CSWTCH.18+0x60c>
   13e84:	call   3770 <strtok@plt>
   13e89:	mov    rdi,rax
   13e8c:	test   rax,rax
   13e8f:	je     13ed8 <read_asc20hmm+0x4d8>
   13e91:	cmp    BYTE PTR [rdi],0x2a
   13e94:	pxor   xmm0,xmm0
   13e98:	je     13ea7 <read_asc20hmm+0x4a7>
   13e9a:	movss  xmm0,DWORD PTR [rip+0x294fa]        # 3d39c <_IO_stdin_used+0x39c>
   13ea2:	call   13060 <ascii2prob.part.0>
   13ea7:	movss  DWORD PTR [r14+0x4],xmm0
   13ead:	xor    edi,edi
   13eaf:	lea    rsi,[rip+0x2de16]        # 41ccc <CSWTCH.18+0x60c>
   13eb6:	add    r14,0x8
   13eba:	call   3770 <strtok@plt>
   13ebf:	mov    rdi,rax
   13ec2:	cmp    r14,QWORD PTR [rsp+0x8]
   13ec7:	je     13ac0 <read_asc20hmm+0xc0>
   13ecd:	test   rax,rax
   13ed0:	jne    13e60 <read_asc20hmm+0x460>
   13ed2:	nop    WORD PTR [rax+rax*1+0x0]
   13ed8:	test   rbp,rbp
   13edb:	je     13a93 <read_asc20hmm+0x93>
   13ee1:	jmp    13c1e <read_asc20hmm+0x21e>
   13ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13ef0:	cmp    BYTE PTR [r15+0x4],0x20
   13ef5:	jne    13b5b <read_asc20hmm+0x15b>
   13efb:	lea    r8,[rsp+0x26]
   13f00:	mov    rdi,r8
   13f03:	mov    QWORD PTR [rsp+0x8],r8
   13f08:	call   366d0 <StringChop>
   13f0d:	mov    rdx,QWORD PTR [rbp+0x30]
   13f11:	mov    r8,QWORD PTR [rsp+0x8]
   13f16:	test   rdx,rdx
   13f19:	je     1450a <read_asc20hmm+0xb0a>
   13f1f:	mov    rdi,rdx
   13f22:	mov    QWORD PTR [rsp+0x10],rdx
   13f27:	mov    QWORD PTR [rsp+0x8],r8
   13f2c:	call   3560 <strlen@plt>
   13f31:	mov    r8,QWORD PTR [rsp+0x8]
   13f36:	mov    r14,rax
   13f39:	mov    rdi,r8
   13f3c:	call   3560 <strlen@plt>
   13f41:	mov    rdx,QWORD PTR [rsp+0x10]
   13f46:	mov    esi,0x26f
   13f4b:	lea    rdi,[rip+0x29f0c]        # 3de5e <_IO_stdin_used+0xe5e>
   13f52:	lea    rcx,[r14+rax*1+0x1]
   13f57:	shl    rcx,0x3
   13f5b:	call   36860 <sre_realloc>
   13f60:	mov    QWORD PTR [rbp+0x30],rax
   13f64:	mov    rdi,rax
   13f67:	mov    r14,rax
   13f6a:	call   3560 <strlen@plt>
   13f6f:	mov    r8d,0xa
   13f75:	mov    WORD PTR [r14+rax*1],r8w
   13f7a:	mov    r8,QWORD PTR [rsp+0x8]
   13f7f:	mov    rdi,QWORD PTR [rbp+0x30]
   13f83:	mov    rsi,r8
   13f86:	call   3790 <strcat@plt>
   13f8b:	jmp    13ac0 <read_asc20hmm+0xc0>
   13f90:	cmp    BYTE PTR [r15+0x4],0x20
   13f95:	jne    13b68 <read_asc20hmm+0x168>
   13f9b:	lea    r14,[rsp+0x26]
   13fa0:	mov    rdi,r14
   13fa3:	call   366d0 <StringChop>
   13fa8:	mov    rdi,r14
   13fab:	call   36670 <Strdup>
   13fb0:	mov    QWORD PTR [rbp+0x40],rax
   13fb4:	jmp    13ac0 <read_asc20hmm+0xc0>
   13fb9:	mov    esi,r13d
   13fbc:	mov    rdi,rbp
   13fbf:	call   1aab0 <AllocPlan7Body>
   13fc4:	mov    rdx,QWORD PTR [rbx]
   13fc7:	mov    esi,0x200
   13fcc:	mov    rdi,r15
   13fcf:	call   3620 <fgets@plt>
   13fd4:	test   rax,rax
   13fd7:	je     13c1e <read_asc20hmm+0x21e>
   13fdd:	mov    rdx,QWORD PTR [rbx]
   13fe0:	mov    esi,0x200
   13fe5:	mov    rdi,r15
   13fe8:	call   3620 <fgets@plt>
   13fed:	test   rax,rax
   13ff0:	je     13c1e <read_asc20hmm+0x21e>
   13ff6:	mov    rdi,r15
   13ff9:	lea    rsi,[rip+0x2dccc]        # 41ccc <CSWTCH.18+0x60c>
   14000:	call   3770 <strtok@plt>
   14005:	mov    rdi,rax
   14008:	test   rax,rax
   1400b:	je     13c1e <read_asc20hmm+0x21e>
   14011:	pxor   xmm3,xmm3
   14015:	cmp    BYTE PTR [rax],0x2a
   14018:	movss  DWORD PTR [rsp+0x8],xmm3
   1401e:	je     14033 <read_asc20hmm+0x633>
   14020:	movss  xmm0,DWORD PTR [rip+0x29374]        # 3d39c <_IO_stdin_used+0x39c>
   14028:	call   13060 <ascii2prob.part.0>
   1402d:	movss  DWORD PTR [rsp+0x8],xmm0
   14033:	xor    edi,edi
   14035:	lea    rsi,[rip+0x2dc90]        # 41ccc <CSWTCH.18+0x60c>
   1403c:	call   3770 <strtok@plt>
   14041:	test   rax,rax
   14044:	je     13c1e <read_asc20hmm+0x21e>
   1404a:	xor    edi,edi
   1404c:	lea    rsi,[rip+0x2dc79]        # 41ccc <CSWTCH.18+0x60c>
   14053:	call   3770 <strtok@plt>
   14058:	mov    rdi,rax
   1405b:	test   rax,rax
   1405e:	je     13c1e <read_asc20hmm+0x21e>
   14064:	cmp    BYTE PTR [rax],0x2a
   14067:	pxor   xmm0,xmm0
   1406b:	je     1407a <read_asc20hmm+0x67a>
   1406d:	movss  xmm0,DWORD PTR [rip+0x29327]        # 3d39c <_IO_stdin_used+0x39c>
   14075:	call   13060 <ascii2prob.part.0>
   1407a:	movss  xmm1,DWORD PTR [rsp+0x8]
   14080:	mov    ecx,DWORD PTR [rbp+0x88]
   14086:	addss  xmm1,xmm0
   1408a:	divss  xmm0,xmm1
   1408e:	movss  DWORD PTR [rbp+0xa8],xmm0
   14096:	test   ecx,ecx
   14098:	jle    143e0 <read_asc20hmm+0x9e0>
   1409e:	mov    r13d,0x1
   140a4:	mov    rdx,QWORD PTR [rbx]
   140a7:	mov    esi,0x200
   140ac:	mov    rdi,r15
   140af:	call   3620 <fgets@plt>
   140b4:	test   rax,rax
   140b7:	je     13c1e <read_asc20hmm+0x21e>
   140bd:	mov    rdi,r15
   140c0:	lea    rsi,[rip+0x2dc05]        # 41ccc <CSWTCH.18+0x60c>
   140c7:	call   3770 <strtok@plt>
   140cc:	mov    rdi,rax
   140cf:	test   rax,rax
   140d2:	je     13c1e <read_asc20hmm+0x21e>
   140d8:	mov    edx,0xa
   140dd:	xor    esi,esi
   140df:	call   3670 <strtol@plt>
   140e4:	mov    DWORD PTR [rsp+0x1c],r13d
   140e9:	cmp    r13d,eax
   140ec:	jne    13c1e <read_asc20hmm+0x21e>
   140f2:	mov    edx,DWORD PTR [rip+0x4e208]        # 62300 <Alphabet_size>
   140f8:	lea    rax,[r13*8+0x0]
   14100:	xor    r14d,r14d
   14103:	mov    QWORD PTR [rsp+0x8],rax
   14108:	test   edx,edx
   1410a:	jg     14163 <read_asc20hmm+0x763>
   1410c:	jmp    141f5 <read_asc20hmm+0x7f5>
   14111:	nop    DWORD PTR [rax+0x0]
   14118:	mov    rax,QWORD PTR [rbp+0x98]
   1411f:	mov    rcx,QWORD PTR [rsp+0x8]
   14124:	pxor   xmm0,xmm0
   14128:	cmp    BYTE PTR [rdi],0x2a
   1412b:	mov    rax,QWORD PTR [rax+rcx*1]
   1412f:	lea    rax,[rax+r14*4]
   14133:	je     1414e <read_asc20hmm+0x74e>
   14135:	movss  xmm0,DWORD PTR [rbp+r14*4+0xe0]
   1413f:	mov    QWORD PTR [rsp+0x10],rax
   14144:	call   13060 <ascii2prob.part.0>
   14149:	mov    rax,QWORD PTR [rsp+0x10]
   1414e:	add    r14,0x1
   14152:	cmp    DWORD PTR [rip+0x4e1a7],r14d        # 62300 <Alphabet_size>
   14159:	movss  DWORD PTR [rax],xmm0
   1415d:	jle    141f5 <read_asc20hmm+0x7f5>
   14163:	xor    edi,edi
   14165:	lea    rsi,[rip+0x2db60]        # 41ccc <CSWTCH.18+0x60c>
   1416c:	call   3770 <strtok@plt>
   14171:	mov    rdi,rax
   14174:	test   rax,rax
   14177:	jne    14118 <read_asc20hmm+0x718>
   14179:	jmp    13c1e <read_asc20hmm+0x21e>
   1417e:	cmp    BYTE PTR [r15+0x4],0x20
   14183:	jne    13b8f <read_asc20hmm+0x18f>
   14189:	lea    rdi,[rsp+0x26]
   1418e:	lea    rsi,[rip+0x2db37]        # 41ccc <CSWTCH.18+0x60c>
   14195:	call   3770 <strtok@plt>
   1419a:	mov    rdi,rax
   1419d:	test   rax,rax
   141a0:	je     13ed8 <read_asc20hmm+0x4d8>
   141a6:	xor    esi,esi
   141a8:	call   3510 <strtod@plt>
   141ad:	xor    edi,edi
   141af:	lea    rsi,[rip+0x2db16]        # 41ccc <CSWTCH.18+0x60c>
   141b6:	cvtsd2ss xmm0,xmm0
   141ba:	movss  DWORD PTR [rbp+0x80],xmm0
   141c2:	call   3770 <strtok@plt>
   141c7:	mov    rdi,rax
   141ca:	test   rax,rax
   141cd:	je     13c1e <read_asc20hmm+0x21e>
   141d3:	xor    esi,esi
   141d5:	call   3510 <strtod@plt>
   141da:	or     DWORD PTR [rbp+0x1c8],0x1000
   141e4:	cvtsd2ss xmm0,xmm0
   141e8:	movss  DWORD PTR [rbp+0x84],xmm0
   141f0:	jmp    13ac0 <read_asc20hmm+0xc0>
   141f5:	test   BYTE PTR [rbp+0x1c9],0x1
   141fc:	je     1422f <read_asc20hmm+0x82f>
   141fe:	xor    edi,edi
   14200:	lea    rsi,[rip+0x2dac5]        # 41ccc <CSWTCH.18+0x60c>
   14207:	call   3770 <strtok@plt>
   1420c:	mov    rdi,rax
   1420f:	test   rax,rax
   14212:	je     13c1e <read_asc20hmm+0x21e>
   14218:	mov    rax,QWORD PTR [rbp+0x48]
   1421c:	mov    edx,0xa
   14221:	xor    esi,esi
   14223:	lea    r14,[rax+r13*4]
   14227:	call   3670 <strtol@plt>
   1422c:	mov    DWORD PTR [r14],eax
   1422f:	mov    rdx,QWORD PTR [rbx]
   14232:	mov    esi,0x200
   14237:	mov    rdi,r15
   1423a:	call   3620 <fgets@plt>
   1423f:	test   rax,rax
   14242:	je     13c1e <read_asc20hmm+0x21e>
   14248:	lea    rsi,[rip+0x2da7d]        # 41ccc <CSWTCH.18+0x60c>
   1424f:	mov    rdi,r15
   14252:	call   3770 <strtok@plt>
   14257:	test   rax,rax
   1425a:	je     13c1e <read_asc20hmm+0x21e>
   14260:	test   BYTE PTR [rbp+0x1c8],0x4
   14267:	je     14274 <read_asc20hmm+0x874>
   14269:	movzx  edx,BYTE PTR [rax]
   1426c:	mov    rax,QWORD PTR [rbp+0x18]
   14270:	mov    BYTE PTR [rax+r13*1],dl
   14274:	mov    eax,DWORD PTR [rsp+0x1c]
   14278:	cmp    DWORD PTR [rbp+0x88],eax
   1427e:	jg     14706 <read_asc20hmm+0xd06>
   14284:	mov    rdx,QWORD PTR [rbx]
   14287:	mov    esi,0x200
   1428c:	mov    rdi,r15
   1428f:	call   3620 <fgets@plt>
   14294:	test   rax,rax
   14297:	je     13c1e <read_asc20hmm+0x21e>
   1429d:	lea    rsi,[rip+0x2da28]        # 41ccc <CSWTCH.18+0x60c>
   142a4:	mov    rdi,r15
   142a7:	call   3770 <strtok@plt>
   142ac:	test   rax,rax
   142af:	je     13c1e <read_asc20hmm+0x21e>
   142b5:	test   BYTE PTR [rbp+0x1c8],0x8
   142bc:	je     142c9 <read_asc20hmm+0x8c9>
   142be:	movzx  edx,BYTE PTR [rax]
   142c1:	mov    rax,QWORD PTR [rbp+0x20]
   142c5:	mov    BYTE PTR [rax+r13*1],dl
   142c9:	lea    rax,[r13*8+0x0]
   142d1:	xor    r14d,r14d
   142d4:	mov    QWORD PTR [rsp+0x8],rax
   142d9:	xor    edi,edi
   142db:	lea    rsi,[rip+0x2d9ea]        # 41ccc <CSWTCH.18+0x60c>
   142e2:	call   3770 <strtok@plt>
   142e7:	mov    rdi,rax
   142ea:	test   rax,rax
   142ed:	je     13c1e <read_asc20hmm+0x21e>
   142f3:	mov    eax,DWORD PTR [rsp+0x1c]
   142f7:	cmp    DWORD PTR [rbp+0x88],eax
   142fd:	jle    14339 <read_asc20hmm+0x939>
   142ff:	mov    rax,QWORD PTR [rbp+0x90]
   14306:	mov    rdx,QWORD PTR [rsp+0x8]
   1430b:	pxor   xmm0,xmm0
   1430f:	mov    rcx,QWORD PTR [rax+rdx*1]
   14313:	add    rcx,r14
   14316:	cmp    BYTE PTR [rdi],0x2a
   14319:	mov    rax,rcx
   1431c:	je     14335 <read_asc20hmm+0x935>
   1431e:	movss  xmm0,DWORD PTR [rip+0x29076]        # 3d39c <_IO_stdin_used+0x39c>
   14326:	mov    QWORD PTR [rsp+0x10],rcx
   1432b:	call   13060 <ascii2prob.part.0>
   14330:	mov    rax,QWORD PTR [rsp+0x10]
   14335:	movss  DWORD PTR [rax],xmm0
   14339:	add    r14,0x4
   1433d:	cmp    r14,0x1c
   14341:	jne    142d9 <read_asc20hmm+0x8d9>
   14343:	xor    edi,edi
   14345:	lea    rsi,[rip+0x2d980]        # 41ccc <CSWTCH.18+0x60c>
   1434c:	call   3770 <strtok@plt>
   14351:	mov    rdi,rax
   14354:	test   rax,rax
   14357:	je     13c1e <read_asc20hmm+0x21e>
   1435d:	mov    rax,QWORD PTR [rbp+0xd0]
   14364:	lea    r14,[r13*4+0x0]
   1436c:	pxor   xmm0,xmm0
   14370:	add    rax,r14
   14373:	cmp    BYTE PTR [rdi],0x2a
   14376:	je     1438f <read_asc20hmm+0x98f>
   14378:	movss  xmm0,DWORD PTR [rip+0x2901c]        # 3d39c <_IO_stdin_used+0x39c>
   14380:	mov    QWORD PTR [rsp+0x8],rax
   14385:	call   13060 <ascii2prob.part.0>
   1438a:	mov    rax,QWORD PTR [rsp+0x8]
   1438f:	xor    edi,edi
   14391:	movss  DWORD PTR [rax],xmm0
   14395:	lea    rsi,[rip+0x2d930]        # 41ccc <CSWTCH.18+0x60c>
   1439c:	call   3770 <strtok@plt>
   143a1:	mov    rdi,rax
   143a4:	test   rax,rax
   143a7:	je     13c1e <read_asc20hmm+0x21e>
   143ad:	add    r14,QWORD PTR [rbp+0xd8]
   143b4:	cmp    BYTE PTR [rax],0x2a
   143b7:	pxor   xmm0,xmm0
   143bb:	je     143ca <read_asc20hmm+0x9ca>
   143bd:	movss  xmm0,DWORD PTR [rip+0x28fd7]        # 3d39c <_IO_stdin_used+0x39c>
   143c5:	call   13060 <ascii2prob.part.0>
   143ca:	movss  DWORD PTR [r14],xmm0
   143cf:	add    r13,0x1
   143d3:	cmp    DWORD PTR [rbp+0x88],r13d
   143da:	jge    140a4 <read_asc20hmm+0x6a4>
   143e0:	mov    rdx,QWORD PTR [rbx]
   143e3:	mov    esi,0x200
   143e8:	mov    rdi,r15
   143eb:	call   3620 <fgets@plt>
   143f0:	test   rax,rax
   143f3:	je     143fd <read_asc20hmm+0x9fd>
   143f5:	cmp    WORD PTR [r15],0x2f2f
   143fb:	jne    143e0 <read_asc20hmm+0x9e0>
   143fd:	mov    rdi,rbp
   14400:	call   1b490 <Plan7Renormalize>
   14405:	mov    eax,DWORD PTR [rbp+0x1c8]
   1440b:	and    eax,0xfffffffe
   1440e:	or     eax,0x20
   14411:	mov    DWORD PTR [rbp+0x1c8],eax
   14417:	mov    eax,0x1
   1441c:	mov    QWORD PTR [r12],rbp
   14420:	jmp    13a3c <read_asc20hmm+0x3c>
   14425:	nop    DWORD PTR [rax]
   14428:	cmp    BYTE PTR [r15+0x4],0x20
   1442d:	jne    13b75 <read_asc20hmm+0x175>
   14433:	lea    rdi,[rsp+0x26]
   14438:	lea    rsi,[rip+0x2d88d]        # 41ccc <CSWTCH.18+0x60c>
   1443f:	call   3770 <strtok@plt>
   14444:	mov    rdi,rax
   14447:	test   rax,rax
   1444a:	je     13ed8 <read_asc20hmm+0x4d8>
   14450:	xor    esi,esi
   14452:	call   3510 <strtod@plt>
   14457:	xor    edi,edi
   14459:	lea    rsi,[rip+0x2d86c]        # 41ccc <CSWTCH.18+0x60c>
   14460:	cvtsd2ss xmm0,xmm0
   14464:	movss  DWORD PTR [rbp+0x70],xmm0
   14469:	call   3770 <strtok@plt>
   1446e:	mov    rdi,rax
   14471:	test   rax,rax
   14474:	je     13c1e <read_asc20hmm+0x21e>
   1447a:	xor    esi,esi
   1447c:	call   3510 <strtod@plt>
   14481:	or     DWORD PTR [rbp+0x1c8],0x400
   1448b:	cvtsd2ss xmm0,xmm0
   1448f:	movss  DWORD PTR [rbp+0x74],xmm0
   14494:	jmp    13ac0 <read_asc20hmm+0xc0>
   14499:	cmp    BYTE PTR [r15+0x4],0x20
   1449e:	jne    13b82 <read_asc20hmm+0x182>
   144a4:	lea    rdi,[rsp+0x26]
   144a9:	lea    rsi,[rip+0x2d81c]        # 41ccc <CSWTCH.18+0x60c>
   144b0:	call   3770 <strtok@plt>
   144b5:	mov    rdi,rax
   144b8:	test   rax,rax
   144bb:	je     13ed8 <read_asc20hmm+0x4d8>
   144c1:	xor    esi,esi
   144c3:	call   3510 <strtod@plt>
   144c8:	xor    edi,edi
   144ca:	lea    rsi,[rip+0x2d7fb]        # 41ccc <CSWTCH.18+0x60c>
   144d1:	cvtsd2ss xmm0,xmm0
   144d5:	movss  DWORD PTR [rbp+0x78],xmm0
   144da:	call   3770 <strtok@plt>
   144df:	mov    rdi,rax
   144e2:	test   rax,rax
   144e5:	je     13c1e <read_asc20hmm+0x21e>
   144eb:	xor    esi,esi
   144ed:	call   3510 <strtod@plt>
   144f2:	or     DWORD PTR [rbp+0x1c8],0x800
   144fc:	cvtsd2ss xmm0,xmm0
   14500:	movss  DWORD PTR [rbp+0x7c],xmm0
   14505:	jmp    13ac0 <read_asc20hmm+0xc0>
   1450a:	mov    rdi,r8
   1450d:	call   36670 <Strdup>
   14512:	mov    QWORD PTR [rbp+0x30],rax
   14516:	jmp    13ac0 <read_asc20hmm+0xc0>
   1451b:	cmp    BYTE PTR [r15+0x4],0x20
   14520:	jne    13ba9 <read_asc20hmm+0x1a9>
   14526:	lea    rdi,[rsp+0x26]
   1452b:	lea    rsi,[rip+0x2d79a]        # 41ccc <CSWTCH.18+0x60c>
   14532:	call   3770 <strtok@plt>
   14537:	mov    rdi,rax
   1453a:	test   rax,rax
   1453d:	je     13ed8 <read_asc20hmm+0x4d8>
   14543:	cmp    BYTE PTR [rax],0x2a
   14546:	pxor   xmm0,xmm0
   1454a:	je     14559 <read_asc20hmm+0xb59>
   1454c:	movss  xmm0,DWORD PTR [rip+0x28e48]        # 3d39c <_IO_stdin_used+0x39c>
   14554:	call   13060 <ascii2prob.part.0>
   14559:	xor    edi,edi
   1455b:	movss  DWORD PTR [rbp+0x130],xmm0
   14563:	lea    rsi,[rip+0x2d762]        # 41ccc <CSWTCH.18+0x60c>
   1456a:	call   3770 <strtok@plt>
   1456f:	mov    rdi,rax
   14572:	test   rax,rax
   14575:	je     13c1e <read_asc20hmm+0x21e>
   1457b:	cmp    BYTE PTR [rax],0x2a
   1457e:	movss  xmm1,DWORD PTR [rbp+0x130]
   14586:	pxor   xmm0,xmm0
   1458a:	je     145a5 <read_asc20hmm+0xba5>
   1458c:	movss  xmm0,DWORD PTR [rip+0x28e08]        # 3d39c <_IO_stdin_used+0x39c>
   14594:	movss  DWORD PTR [rsp+0x8],xmm1
   1459a:	call   13060 <ascii2prob.part.0>
   1459f:	movss  xmm1,DWORD PTR [rsp+0x8]
   145a5:	addss  xmm0,xmm1
   145a9:	divss  xmm1,xmm0
   145ad:	movss  DWORD PTR [rbp+0x130],xmm1
   145b5:	jmp    13ac0 <read_asc20hmm+0xc0>
   145ba:	cmp    BYTE PTR [r15+0x4],0x20
   145bf:	jne    13bb6 <read_asc20hmm+0x1b6>
   145c5:	mov    edi,DWORD PTR [rip+0x4dab5]        # 62080 <Alphabet_type>
   145cb:	test   edi,edi
   145cd:	jne    145dd <read_asc20hmm+0xbdd>
   145cf:	lea    rdi,[rip+0x29bea]        # 3e1c0 <_IO_stdin_used+0x11c0>
   145d6:	xor    eax,eax
   145d8:	call   317f0 <Die>
   145dd:	lea    rdi,[rsp+0x26]
   145e2:	lea    rsi,[rip+0x2d6e3]        # 41ccc <CSWTCH.18+0x60c>
   145e9:	call   3770 <strtok@plt>
   145ee:	mov    rdi,rax
   145f1:	mov    eax,DWORD PTR [rip+0x4dd09]        # 62300 <Alphabet_size>
   145f7:	test   eax,eax
   145f9:	jle    13ac0 <read_asc20hmm+0xc0>
   145ff:	test   rdi,rdi
   14602:	je     13ed8 <read_asc20hmm+0x4d8>
   14608:	mov    r14d,0x1
   1460e:	cmp    BYTE PTR [rdi],0x2a
   14611:	pxor   xmm0,xmm0
   14615:	je     14633 <read_asc20hmm+0xc33>
   14617:	pxor   xmm0,xmm0
   1461b:	movss  xmm2,DWORD PTR [rip+0x28d79]        # 3d39c <_IO_stdin_used+0x39c>
   14623:	cvtsi2ss xmm0,eax
   14627:	divss  xmm2,xmm0
   1462b:	movaps xmm0,xmm2
   1462e:	call   13060 <ascii2prob.part.0>
   14633:	xor    edi,edi
   14635:	lea    rsi,[rip+0x2d690]        # 41ccc <CSWTCH.18+0x60c>
   1463c:	movss  DWORD PTR [rbp+r14*4+0xdc],xmm0
   14646:	call   3770 <strtok@plt>
   1464b:	mov    rdi,rax
   1464e:	mov    eax,DWORD PTR [rip+0x4dcac]        # 62300 <Alphabet_size>
   14654:	cmp    eax,r14d
   14657:	jle    13ac0 <read_asc20hmm+0xc0>
   1465d:	add    r14,0x1
   14661:	test   rdi,rdi
   14664:	jne    1460e <read_asc20hmm+0xc0e>
   14666:	jmp    13c1e <read_asc20hmm+0x21e>
   1466b:	cmp    BYTE PTR [r15+0x4],0x20
   14670:	jne    13bc3 <read_asc20hmm+0x1c3>
   14676:	or     DWORD PTR [rbp+0x1c8],0x80
   14680:	lea    rdi,[rsp+0x26]
   14685:	lea    rsi,[rip+0x2d640]        # 41ccc <CSWTCH.18+0x60c>
   1468c:	call   3770 <strtok@plt>
   14691:	mov    rdi,rax
   14694:	test   rax,rax
   14697:	je     13c1e <read_asc20hmm+0x21e>
   1469d:	xor    esi,esi
   1469f:	call   3510 <strtod@plt>
   146a4:	xor    edi,edi
   146a6:	lea    rsi,[rip+0x2d61f]        # 41ccc <CSWTCH.18+0x60c>
   146ad:	cvtsd2ss xmm0,xmm0
   146b1:	movss  DWORD PTR [rbp+0x1c0],xmm0
   146b9:	call   3770 <strtok@plt>
   146be:	mov    rdi,rax
   146c1:	test   rax,rax
   146c4:	je     13c1e <read_asc20hmm+0x21e>
   146ca:	xor    esi,esi
   146cc:	call   3510 <strtod@plt>
   146d1:	cvtsd2ss xmm0,xmm0
   146d5:	movss  DWORD PTR [rbp+0x1c4],xmm0
   146dd:	jmp    13ac0 <read_asc20hmm+0xc0>
   146e2:	cmp    BYTE PTR [r15+0x4],0x4d
   146e7:	jne    13bd0 <read_asc20hmm+0x1d0>
   146ed:	lea    rdi,[rsp+0x26]
   146f2:	mov    edx,0xa
   146f7:	xor    esi,esi
   146f9:	call   3670 <strtol@plt>
   146fe:	mov    DWORD PTR [rbp+0x50],eax
   14701:	jmp    13ac0 <read_asc20hmm+0xc0>
   14706:	mov    eax,DWORD PTR [rip+0x4dbf4]        # 62300 <Alphabet_size>
   1470c:	test   eax,eax
   1470e:	jle    14284 <read_asc20hmm+0x884>
   14714:	lea    rax,[r13*8+0x0]
   1471c:	xor    r14d,r14d
   1471f:	mov    QWORD PTR [rsp+0x8],rax
   14724:	jmp    14771 <read_asc20hmm+0xd71>
   14726:	mov    rax,QWORD PTR [rbp+0xa0]
   1472d:	mov    rcx,QWORD PTR [rsp+0x8]
   14732:	pxor   xmm0,xmm0
   14736:	cmp    BYTE PTR [rdi],0x2a
   14739:	mov    rax,QWORD PTR [rax+rcx*1]
   1473d:	lea    rax,[rax+r14*4]
   14741:	je     1475c <read_asc20hmm+0xd5c>
   14743:	movss  xmm0,DWORD PTR [rbp+r14*4+0xe0]
   1474d:	mov    QWORD PTR [rsp+0x10],rax
   14752:	call   13060 <ascii2prob.part.0>
   14757:	mov    rax,QWORD PTR [rsp+0x10]
   1475c:	add    r14,0x1
   14760:	cmp    DWORD PTR [rip+0x4db99],r14d        # 62300 <Alphabet_size>
   14767:	movss  DWORD PTR [rax],xmm0
   1476b:	jle    14284 <read_asc20hmm+0x884>
   14771:	xor    edi,edi
   14773:	lea    rsi,[rip+0x2d552]        # 41ccc <CSWTCH.18+0x60c>
   1477a:	call   3770 <strtok@plt>
   1477f:	mov    rdi,rax
   14782:	test   rax,rax
   14785:	jne    14726 <read_asc20hmm+0xd26>
   14787:	jmp    13c1e <read_asc20hmm+0x21e>
   1478c:	call   3570 <__stack_chk_fail@plt>
   14791:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1479c:	nop    DWORD PTR [rax+0x0]

00000000000147a0 <read_bin10hmm>:
   147a0:	endbr64 
   147a4:	push   r12
   147a6:	push   rbp
   147a7:	mov    rbp,rsi
   147aa:	push   rbx
   147ab:	mov    rbx,rdi
   147ae:	sub    rsp,0x20
   147b2:	mov    rdi,QWORD PTR [rdi]
   147b5:	mov    rax,QWORD PTR fs:0x28
   147be:	mov    QWORD PTR [rsp+0x18],rax
   147c3:	xor    eax,eax
   147c5:	call   3660 <feof@plt>
   147ca:	test   eax,eax
   147cc:	je     147f0 <read_bin10hmm+0x50>
   147ce:	xor    eax,eax
   147d0:	mov    rcx,QWORD PTR [rsp+0x18]
   147d5:	xor    rcx,QWORD PTR fs:0x28
   147de:	jne    1487a <read_bin10hmm+0xda>
   147e4:	add    rsp,0x20
   147e8:	pop    rbx
   147e9:	pop    rbp
   147ea:	pop    r12
   147ec:	ret    
   147ed:	nop    DWORD PTR [rax]
   147f0:	mov    rcx,QWORD PTR [rbx]
   147f3:	lea    rdi,[rsp+0xc]
   147f8:	mov    edx,0x1
   147fd:	mov    esi,0x4
   14802:	call   3500 <fread@plt>
   14807:	test   rax,rax
   1480a:	je     147ce <read_bin10hmm+0x2e>
   1480c:	mov    edx,DWORD PTR [rbx+0x1c]
   1480f:	mov    rdi,QWORD PTR [rbx]
   14812:	mov    esi,0x1
   14817:	call   11d10 <read_plan9_binhmm>
   1481c:	mov    r12,rax
   1481f:	test   rax,rax
   14822:	je     14870 <read_bin10hmm+0xd0>
   14824:	lea    rsi,[rsp+0x10]
   14829:	mov    rdi,rax
   1482c:	call   1ccb0 <Plan9toPlan7>
   14831:	mov    rbx,QWORD PTR [rsp+0x10]
   14836:	lea    rdi,[rip+0x2995b]        # 3e198 <_IO_stdin_used+0x1198>
   1483d:	call   36670 <Strdup>
   14842:	mov    rdi,QWORD PTR [rsp+0x10]
   14847:	mov    QWORD PTR [rbx+0x30],rax
   1484b:	call   1b3e0 <Plan7SetCtime>
   14850:	mov    rdi,r12
   14853:	call   1cf40 <P9FreeHMM>
   14858:	mov    rax,QWORD PTR [rsp+0x10]
   1485d:	mov    QWORD PTR [rbp+0x0],rax
   14861:	mov    eax,0x1
   14866:	jmp    147d0 <read_bin10hmm+0x30>
   1486b:	nop    DWORD PTR [rax+rax*1+0x0]
   14870:	mov    QWORD PTR [rbp+0x0],0x0
   14878:	jmp    14861 <read_bin10hmm+0xc1>
   1487a:	call   3570 <__stack_chk_fail@plt>
   1487f:	nop

0000000000014880 <read_bin11hmm>:
   14880:	endbr64 
   14884:	push   r12
   14886:	push   rbp
   14887:	mov    rbp,rsi
   1488a:	push   rbx
   1488b:	mov    rbx,rdi
   1488e:	sub    rsp,0x20
   14892:	mov    rdi,QWORD PTR [rdi]
   14895:	mov    rax,QWORD PTR fs:0x28
   1489e:	mov    QWORD PTR [rsp+0x18],rax
   148a3:	xor    eax,eax
   148a5:	call   3660 <feof@plt>
   148aa:	test   eax,eax
   148ac:	je     148d0 <read_bin11hmm+0x50>
   148ae:	xor    eax,eax
   148b0:	mov    rcx,QWORD PTR [rsp+0x18]
   148b5:	xor    rcx,QWORD PTR fs:0x28
   148be:	jne    1495a <read_bin11hmm+0xda>
   148c4:	add    rsp,0x20
   148c8:	pop    rbx
   148c9:	pop    rbp
   148ca:	pop    r12
   148cc:	ret    
   148cd:	nop    DWORD PTR [rax]
   148d0:	mov    rcx,QWORD PTR [rbx]
   148d3:	lea    rdi,[rsp+0xc]
   148d8:	mov    edx,0x1
   148dd:	mov    esi,0x4
   148e2:	call   3500 <fread@plt>
   148e7:	test   rax,rax
   148ea:	je     148ae <read_bin11hmm+0x2e>
   148ec:	mov    edx,DWORD PTR [rbx+0x1c]
   148ef:	mov    rdi,QWORD PTR [rbx]
   148f2:	mov    esi,0x3
   148f7:	call   11d10 <read_plan9_binhmm>
   148fc:	mov    r12,rax
   148ff:	test   rax,rax
   14902:	je     14950 <read_bin11hmm+0xd0>
   14904:	lea    rsi,[rsp+0x10]
   14909:	mov    rdi,rax
   1490c:	call   1ccb0 <Plan9toPlan7>
   14911:	mov    rbx,QWORD PTR [rsp+0x10]
   14916:	lea    rdi,[rip+0x2987b]        # 3e198 <_IO_stdin_used+0x1198>
   1491d:	call   36670 <Strdup>
   14922:	mov    rdi,QWORD PTR [rsp+0x10]
   14927:	mov    QWORD PTR [rbx+0x30],rax
   1492b:	call   1b3e0 <Plan7SetCtime>
   14930:	mov    rdi,r12
   14933:	call   1cf40 <P9FreeHMM>
   14938:	mov    rax,QWORD PTR [rsp+0x10]
   1493d:	mov    QWORD PTR [rbp+0x0],rax
   14941:	mov    eax,0x1
   14946:	jmp    148b0 <read_bin11hmm+0x30>
   1494b:	nop    DWORD PTR [rax+rax*1+0x0]
   14950:	mov    QWORD PTR [rbp+0x0],0x0
   14958:	jmp    14941 <read_bin11hmm+0xc1>
   1495a:	call   3570 <__stack_chk_fail@plt>
   1495f:	nop

0000000000014960 <read_bin17hmm>:
   14960:	endbr64 
   14964:	push   r12
   14966:	push   rbp
   14967:	mov    rbp,rsi
   1496a:	push   rbx
   1496b:	mov    rbx,rdi
   1496e:	sub    rsp,0x20
   14972:	mov    rdi,QWORD PTR [rdi]
   14975:	mov    rax,QWORD PTR fs:0x28
   1497e:	mov    QWORD PTR [rsp+0x18],rax
   14983:	xor    eax,eax
   14985:	call   3660 <feof@plt>
   1498a:	test   eax,eax
   1498c:	je     149b0 <read_bin17hmm+0x50>
   1498e:	xor    eax,eax
   14990:	mov    rcx,QWORD PTR [rsp+0x18]
   14995:	xor    rcx,QWORD PTR fs:0x28
   1499e:	jne    14a3a <read_bin17hmm+0xda>
   149a4:	add    rsp,0x20
   149a8:	pop    rbx
   149a9:	pop    rbp
   149aa:	pop    r12
   149ac:	ret    
   149ad:	nop    DWORD PTR [rax]
   149b0:	mov    rcx,QWORD PTR [rbx]
   149b3:	lea    rdi,[rsp+0xc]
   149b8:	mov    edx,0x1
   149bd:	mov    esi,0x4
   149c2:	call   3500 <fread@plt>
   149c7:	test   rax,rax
   149ca:	je     1498e <read_bin17hmm+0x2e>
   149cc:	mov    edx,DWORD PTR [rbx+0x1c]
   149cf:	mov    rdi,QWORD PTR [rbx]
   149d2:	mov    esi,0x5
   149d7:	call   11d10 <read_plan9_binhmm>
   149dc:	mov    r12,rax
   149df:	test   rax,rax
   149e2:	je     14a30 <read_bin17hmm+0xd0>
   149e4:	lea    rsi,[rsp+0x10]
   149e9:	mov    rdi,rax
   149ec:	call   1ccb0 <Plan9toPlan7>
   149f1:	mov    rbx,QWORD PTR [rsp+0x10]
   149f6:	lea    rdi,[rip+0x2979b]        # 3e198 <_IO_stdin_used+0x1198>
   149fd:	call   36670 <Strdup>
   14a02:	mov    rdi,QWORD PTR [rsp+0x10]
   14a07:	mov    QWORD PTR [rbx+0x30],rax
   14a0b:	call   1b3e0 <Plan7SetCtime>
   14a10:	mov    rdi,r12
   14a13:	call   1cf40 <P9FreeHMM>
   14a18:	mov    rax,QWORD PTR [rsp+0x10]
   14a1d:	mov    QWORD PTR [rbp+0x0],rax
   14a21:	mov    eax,0x1
   14a26:	jmp    14990 <read_bin17hmm+0x30>
   14a2b:	nop    DWORD PTR [rax+rax*1+0x0]
   14a30:	mov    QWORD PTR [rbp+0x0],0x0
   14a38:	jmp    14a21 <read_bin17hmm+0xc1>
   14a3a:	call   3570 <__stack_chk_fail@plt>
   14a3f:	nop

0000000000014a40 <read_bin19hmm>:
   14a40:	endbr64 
   14a44:	push   r12
   14a46:	push   rbp
   14a47:	mov    rbp,rsi
   14a4a:	push   rbx
   14a4b:	mov    rbx,rdi
   14a4e:	sub    rsp,0x20
   14a52:	mov    rdi,QWORD PTR [rdi]
   14a55:	mov    rax,QWORD PTR fs:0x28
   14a5e:	mov    QWORD PTR [rsp+0x18],rax
   14a63:	xor    eax,eax
   14a65:	call   3660 <feof@plt>
   14a6a:	test   eax,eax
   14a6c:	je     14a90 <read_bin19hmm+0x50>
   14a6e:	xor    eax,eax
   14a70:	mov    rcx,QWORD PTR [rsp+0x18]
   14a75:	xor    rcx,QWORD PTR fs:0x28
   14a7e:	jne    14b1a <read_bin19hmm+0xda>
   14a84:	add    rsp,0x20
   14a88:	pop    rbx
   14a89:	pop    rbp
   14a8a:	pop    r12
   14a8c:	ret    
   14a8d:	nop    DWORD PTR [rax]
   14a90:	mov    rcx,QWORD PTR [rbx]
   14a93:	lea    rdi,[rsp+0xc]
   14a98:	mov    edx,0x1
   14a9d:	mov    esi,0x4
   14aa2:	call   3500 <fread@plt>
   14aa7:	test   rax,rax
   14aaa:	je     14a6e <read_bin19hmm+0x2e>
   14aac:	mov    edx,DWORD PTR [rbx+0x1c]
   14aaf:	mov    rdi,QWORD PTR [rbx]
   14ab2:	mov    esi,0x7
   14ab7:	call   11d10 <read_plan9_binhmm>
   14abc:	mov    r12,rax
   14abf:	test   rax,rax
   14ac2:	je     14b10 <read_bin19hmm+0xd0>
   14ac4:	lea    rsi,[rsp+0x10]
   14ac9:	mov    rdi,rax
   14acc:	call   1ccb0 <Plan9toPlan7>
   14ad1:	mov    rbx,QWORD PTR [rsp+0x10]
   14ad6:	lea    rdi,[rip+0x296bb]        # 3e198 <_IO_stdin_used+0x1198>
   14add:	call   36670 <Strdup>
   14ae2:	mov    rdi,QWORD PTR [rsp+0x10]
   14ae7:	mov    QWORD PTR [rbx+0x30],rax
   14aeb:	call   1b3e0 <Plan7SetCtime>
   14af0:	mov    rdi,r12
   14af3:	call   1cf40 <P9FreeHMM>
   14af8:	mov    rax,QWORD PTR [rsp+0x10]
   14afd:	mov    QWORD PTR [rbp+0x0],rax
   14b01:	mov    eax,0x1
   14b06:	jmp    14a70 <read_bin19hmm+0x30>
   14b0b:	nop    DWORD PTR [rax+rax*1+0x0]
   14b10:	mov    QWORD PTR [rbp+0x0],0x0
   14b18:	jmp    14b01 <read_bin19hmm+0xc1>
   14b1a:	call   3570 <__stack_chk_fail@plt>
   14b1f:	nop

0000000000014b20 <prob2ascii.part.0>:
   14b20:	sub    rsp,0x8
   14b24:	call   17710 <Prob2Score>
   14b29:	mov    edx,0x8
   14b2e:	lea    rcx,[rip+0x293d7]        # 3df0c <_IO_stdin_used+0xf0c>
   14b35:	mov    esi,0x1
   14b3a:	mov    r8d,eax
   14b3d:	lea    rdi,[rip+0x397ec]        # 4e330 <buffer.7681>
   14b44:	xor    eax,eax
   14b46:	call   3830 <__sprintf_chk@plt>
   14b4b:	lea    rax,[rip+0x397de]        # 4e330 <buffer.7681>
   14b52:	add    rsp,0x8
   14b56:	ret    
   14b57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000014b60 <write_bin_string>:
   14b60:	push   r12
   14b62:	mov    r12,rdi
   14b65:	push   rbp
   14b66:	sub    rsp,0x18
   14b6a:	mov    rax,QWORD PTR fs:0x28
   14b73:	mov    QWORD PTR [rsp+0x8],rax
   14b78:	xor    eax,eax
   14b7a:	test   rsi,rsi
   14b7d:	je     14bd8 <write_bin_string+0x78>
   14b7f:	mov    rdi,rsi
   14b82:	mov    rbp,rsi
   14b85:	call   3560 <strlen@plt>
   14b8a:	lea    rdi,[rsp+0x4]
   14b8f:	mov    rcx,r12
   14b92:	mov    edx,0x1
   14b97:	add    eax,0x1
   14b9a:	mov    esi,0x4
   14b9f:	mov    DWORD PTR [rsp+0x4],eax
   14ba3:	call   37b0 <fwrite@plt>
   14ba8:	movsxd rdx,DWORD PTR [rsp+0x4]
   14bad:	mov    rcx,r12
   14bb0:	mov    rdi,rbp
   14bb3:	mov    esi,0x1
   14bb8:	call   37b0 <fwrite@plt>
   14bbd:	mov    rax,QWORD PTR [rsp+0x8]
   14bc2:	xor    rax,QWORD PTR fs:0x28
   14bcb:	jne    14bf9 <write_bin_string+0x99>
   14bcd:	add    rsp,0x18
   14bd1:	pop    rbp
   14bd2:	pop    r12
   14bd4:	ret    
   14bd5:	nop    DWORD PTR [rax]
   14bd8:	lea    rdi,[rsp+0x4]
   14bdd:	mov    rcx,r12
   14be0:	mov    edx,0x1
   14be5:	mov    esi,0x4
   14bea:	mov    DWORD PTR [rsp+0x4],0x0
   14bf2:	call   37b0 <fwrite@plt>
   14bf7:	jmp    14bbd <write_bin_string+0x5d>
   14bf9:	call   3570 <__stack_chk_fail@plt>
   14bfe:	xchg   ax,ax

0000000000014c00 <read_asc17hmm>:
   14c00:	endbr64 
   14c04:	push   r15
   14c06:	push   r14
   14c08:	push   r13
   14c0a:	push   r12
   14c0c:	push   rbp
   14c0d:	mov    rbp,rdi
   14c10:	push   rbx
   14c11:	mov    rbx,rsi
   14c14:	sub    rsp,0x438
   14c1b:	mov    rdi,QWORD PTR [rdi]
   14c1e:	mov    rax,QWORD PTR fs:0x28
   14c27:	mov    QWORD PTR [rsp+0x428],rax
   14c2f:	xor    eax,eax
   14c31:	call   3660 <feof@plt>
   14c36:	test   eax,eax
   14c38:	je     14c68 <read_asc17hmm+0x68>
   14c3a:	xor    eax,eax
   14c3c:	mov    rcx,QWORD PTR [rsp+0x428]
   14c44:	xor    rcx,QWORD PTR fs:0x28
   14c4d:	jne    154ce <read_asc17hmm+0x8ce>
   14c53:	add    rsp,0x438
   14c5a:	pop    rbx
   14c5b:	pop    rbp
   14c5c:	pop    r12
   14c5e:	pop    r13
   14c60:	pop    r14
   14c62:	pop    r15
   14c64:	ret    
   14c65:	nop    DWORD PTR [rax]
   14c68:	mov    rdx,QWORD PTR [rbp+0x0]
   14c6c:	lea    rdi,[rsp+0x20]
   14c71:	mov    esi,0x200
   14c76:	call   3620 <fgets@plt>
   14c7b:	test   rax,rax
   14c7e:	je     14c3a <read_asc17hmm+0x3a>
   14c80:	mov    r12,QWORD PTR [rbp+0x0]
   14c84:	lea    rbp,[rsp+0x220]
   14c8c:	mov    esi,0x200
   14c91:	mov    rdi,rbp
   14c94:	mov    rdx,r12
   14c97:	call   3620 <fgets@plt>
   14c9c:	test   rax,rax
   14c9f:	je     150e8 <read_asc17hmm+0x4e8>
   14ca5:	lea    rsi,[rip+0x2d020]        # 41ccc <CSWTCH.18+0x60c>
   14cac:	mov    rdi,rbp
   14caf:	call   3770 <strtok@plt>
   14cb4:	mov    r13,rax
   14cb7:	test   rax,rax
   14cba:	je     150e8 <read_asc17hmm+0x4e8>
   14cc0:	call   3820 <__ctype_b_loc@plt>
   14cc5:	movsx  rdx,BYTE PTR [r13+0x0]
   14cca:	mov    r14,rax
   14ccd:	mov    rax,QWORD PTR [rax]
   14cd0:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   14cd5:	je     150e8 <read_asc17hmm+0x4e8>
   14cdb:	xor    esi,esi
   14cdd:	mov    rdi,r13
   14ce0:	mov    edx,0xa
   14ce5:	call   3670 <strtol@plt>
   14cea:	mov    rdx,r12
   14ced:	mov    esi,0x200
   14cf2:	mov    rdi,rbp
   14cf5:	mov    r13,rax
   14cf8:	call   3620 <fgets@plt>
   14cfd:	test   rax,rax
   14d00:	je     150e8 <read_asc17hmm+0x4e8>
   14d06:	mov    rdi,rbp
   14d09:	lea    rsi,[rip+0x2cfbc]        # 41ccc <CSWTCH.18+0x60c>
   14d10:	call   3770 <strtok@plt>
   14d15:	mov    rdi,rax
   14d18:	test   rax,rax
   14d1b:	je     150e8 <read_asc17hmm+0x4e8>
   14d21:	movsx  rdx,BYTE PTR [rax]
   14d25:	mov    rax,QWORD PTR [r14]
   14d28:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   14d2d:	je     150e8 <read_asc17hmm+0x4e8>
   14d33:	mov    edx,0xa
   14d38:	xor    esi,esi
   14d3a:	mov    r15d,0x2
   14d40:	call   3670 <strtol@plt>
   14d45:	cmp    eax,0x4
   14d48:	je     14d59 <read_asc17hmm+0x159>
   14d4a:	cmp    eax,0x14
   14d4d:	jne    15130 <read_asc17hmm+0x530>
   14d53:	mov    r15d,0x3
   14d59:	mov    eax,DWORD PTR [rip+0x4d321]        # 62080 <Alphabet_type>
   14d5f:	test   eax,eax
   14d61:	je     151b0 <read_asc17hmm+0x5b0>
   14d67:	cmp    eax,r15d
   14d6a:	jne    15100 <read_asc17hmm+0x500>
   14d70:	mov    edi,r13d
   14d73:	call   1d090 <P9AllocHMM>
   14d78:	mov    r13,rax
   14d7b:	test   rax,rax
   14d7e:	je     152f8 <read_asc17hmm+0x6f8>
   14d84:	mov    rdx,r12
   14d87:	mov    esi,0x200
   14d8c:	mov    rdi,rbp
   14d8f:	call   3620 <fgets@plt>
   14d94:	test   rax,rax
   14d97:	je     150e8 <read_asc17hmm+0x4e8>
   14d9d:	lea    rsi,[rip+0x2cf28]        # 41ccc <CSWTCH.18+0x60c>
   14da4:	mov    rdi,rbp
   14da7:	call   3770 <strtok@plt>
   14dac:	test   rax,rax
   14daf:	je     150e8 <read_asc17hmm+0x4e8>
   14db5:	movsx  rdx,BYTE PTR [rax]
   14db9:	mov    rax,QWORD PTR [r14]
   14dbc:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   14dc1:	je     150e8 <read_asc17hmm+0x4e8>
   14dc7:	mov    rdx,r12
   14dca:	mov    esi,0x200
   14dcf:	mov    rdi,rbp
   14dd2:	call   3620 <fgets@plt>
   14dd7:	test   rax,rax
   14dda:	je     150e8 <read_asc17hmm+0x4e8>
   14de0:	lea    rsi,[rip+0x2cee5]        # 41ccc <CSWTCH.18+0x60c>
   14de7:	mov    rdi,rbp
   14dea:	call   3770 <strtok@plt>
   14def:	test   rax,rax
   14df2:	je     150e8 <read_asc17hmm+0x4e8>
   14df8:	mov    rdx,r12
   14dfb:	mov    esi,0x200
   14e00:	mov    rdi,rbp
   14e03:	call   3620 <fgets@plt>
   14e08:	test   rax,rax
   14e0b:	je     150e8 <read_asc17hmm+0x4e8>
   14e11:	cmp    WORD PTR [rbp+0x0],0x6579
   14e17:	je     15330 <read_asc17hmm+0x730>
   14e1d:	mov    rdx,r12
   14e20:	mov    esi,0x200
   14e25:	mov    rdi,rbp
   14e28:	call   3620 <fgets@plt>
   14e2d:	test   rax,rax
   14e30:	je     150e8 <read_asc17hmm+0x4e8>
   14e36:	cmp    WORD PTR [rsp+0x220],0x6579
   14e40:	je     15350 <read_asc17hmm+0x750>
   14e46:	mov    rdx,r12
   14e49:	mov    esi,0x200
   14e4e:	mov    rdi,rbp
   14e51:	call   3620 <fgets@plt>
   14e56:	test   rax,rax
   14e59:	je     15145 <read_asc17hmm+0x545>
   14e5f:	lea    rsi,[rip+0x2ce66]        # 41ccc <CSWTCH.18+0x60c>
   14e66:	mov    rdi,rbp
   14e69:	call   3770 <strtok@plt>
   14e6e:	mov    QWORD PTR [rsp],rax
   14e72:	mov    r15,rax
   14e75:	test   rax,rax
   14e78:	je     150e8 <read_asc17hmm+0x4e8>
   14e7e:	xor    edi,edi
   14e80:	lea    rsi,[rip+0x2ce45]        # 41ccc <CSWTCH.18+0x60c>
   14e87:	call   3770 <strtok@plt>
   14e8c:	mov    rdi,rax
   14e8f:	test   rax,rax
   14e92:	je     150e8 <read_asc17hmm+0x4e8>
   14e98:	movsx  rdx,BYTE PTR [rax]
   14e9c:	mov    rax,QWORD PTR [r14]
   14e9f:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   14ea4:	je     150e8 <read_asc17hmm+0x4e8>
   14eaa:	mov    edx,0xa
   14eaf:	xor    esi,esi
   14eb1:	call   3670 <strtol@plt>
   14eb6:	mov    QWORD PTR [rsp+0x8],rax
   14ebb:	mov    rcx,rax
   14ebe:	test   eax,eax
   14ec0:	js     150e8 <read_asc17hmm+0x4e8>
   14ec6:	mov    eax,DWORD PTR [r13+0x0]
   14eca:	add    eax,0x1
   14ecd:	cmp    ecx,eax
   14ecf:	jg     150e8 <read_asc17hmm+0x4e8>
   14ed5:	mov    rsi,r15
   14ed8:	mov    ecx,0xf
   14edd:	lea    rdi,[rip+0x2902c]        # 3df10 <_IO_stdin_used+0xf10>
   14ee4:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   14ee6:	seta   r15b
   14eea:	sbb    r15b,0x0
   14eee:	movsx  r15d,r15b
   14ef2:	test   r15d,r15d
   14ef5:	jne    151c0 <read_asc17hmm+0x5c0>
   14efb:	lea    rsi,[rip+0x2cdcc]        # 41cce <CSWTCH.18+0x60e>
   14f02:	xor    edi,edi
   14f04:	call   3770 <strtok@plt>
   14f09:	movzx  edx,BYTE PTR [rax]
   14f0c:	test   dl,dl
   14f0e:	je     15310 <read_asc17hmm+0x710>
   14f14:	cmp    dl,0x28
   14f17:	jne    14f28 <read_asc17hmm+0x328>
   14f19:	jmp    14f35 <read_asc17hmm+0x335>
   14f1b:	nop    DWORD PTR [rax+rax*1+0x0]
   14f20:	test   dl,dl
   14f22:	je     15310 <read_asc17hmm+0x710>
   14f28:	movzx  edx,BYTE PTR [rax+0x1]
   14f2c:	add    rax,0x1
   14f30:	cmp    dl,0x28
   14f33:	jne    14f20 <read_asc17hmm+0x320>
   14f35:	movsxd rcx,DWORD PTR [rsp+0x8]
   14f3a:	mov    rdx,QWORD PTR [r13+0x78]
   14f3e:	mov    rsi,rcx
   14f41:	mov    QWORD PTR [rsp],rcx
   14f45:	movzx  ecx,BYTE PTR [rax+0x1]
   14f49:	mov    BYTE PTR [rdx+rsi*1],cl
   14f4c:	movzx  edx,BYTE PTR [rax]
   14f4f:	test   dl,dl
   14f51:	je     15320 <read_asc17hmm+0x720>
   14f57:	cmp    dl,0x28
   14f5a:	jne    14f68 <read_asc17hmm+0x368>
   14f5c:	jmp    14f75 <read_asc17hmm+0x375>
   14f5e:	xchg   ax,ax
   14f60:	test   dl,dl
   14f62:	je     15320 <read_asc17hmm+0x720>
   14f68:	movzx  edx,BYTE PTR [rax+0x1]
   14f6c:	add    rax,0x1
   14f70:	cmp    dl,0x28
   14f73:	jne    14f60 <read_asc17hmm+0x360>
   14f75:	movzx  edx,BYTE PTR [rax+0x1]
   14f79:	mov    rcx,QWORD PTR [rsp]
   14f7d:	mov    esi,0x200
   14f82:	mov    rdi,rbp
   14f85:	mov    rax,QWORD PTR [r13+0x80]
   14f8c:	mov    BYTE PTR [rax+rcx*1],dl
   14f8f:	mov    rdx,r12
   14f92:	call   3620 <fgets@plt>
   14f97:	test   rax,rax
   14f9a:	je     150e8 <read_asc17hmm+0x4e8>
   14fa0:	mov    rdi,rbp
   14fa3:	lea    rsi,[rip+0x2cd22]        # 41ccc <CSWTCH.18+0x60c>
   14faa:	call   3770 <strtok@plt>
   14faf:	mov    rdi,rax
   14fb2:	test   rax,rax
   14fb5:	je     150e8 <read_asc17hmm+0x4e8>
   14fbb:	xor    esi,esi
   14fbd:	call   3510 <strtod@plt>
   14fc2:	imul   rcx,QWORD PTR [rsp],0x5c
   14fc7:	mov    rdx,r12
   14fca:	mov    rdi,rbp
   14fcd:	mov    rax,QWORD PTR [r13+0x10]
   14fd1:	cvtsd2ss xmm0,xmm0
   14fd5:	mov    esi,0x200
   14fda:	movss  DWORD PTR [rax+rcx*1],xmm0
   14fdf:	mov    QWORD PTR [rsp],rcx
   14fe3:	call   3620 <fgets@plt>
   14fe8:	test   rax,rax
   14feb:	je     150e8 <read_asc17hmm+0x4e8>
   14ff1:	mov    rdi,rbp
   14ff4:	lea    rsi,[rip+0x2ccd1]        # 41ccc <CSWTCH.18+0x60c>
   14ffb:	call   3770 <strtok@plt>
   15000:	mov    rdi,rax
   15003:	test   rax,rax
   15006:	je     150e8 <read_asc17hmm+0x4e8>
   1500c:	xor    esi,esi
   1500e:	call   3510 <strtod@plt>
   15013:	mov    rax,QWORD PTR [r13+0x10]
   15017:	mov    rcx,QWORD PTR [rsp]
   1501b:	mov    rdx,r12
   1501e:	cvtsd2ss xmm0,xmm0
   15022:	mov    esi,0x200
   15027:	mov    rdi,rbp
   1502a:	movss  DWORD PTR [rax+rcx*1+0x8],xmm0
   15030:	call   3620 <fgets@plt>
   15035:	test   rax,rax
   15038:	je     150e8 <read_asc17hmm+0x4e8>
   1503e:	mov    rdi,rbp
   15041:	lea    rsi,[rip+0x2cc84]        # 41ccc <CSWTCH.18+0x60c>
   15048:	call   3770 <strtok@plt>
   1504d:	mov    rdi,rax
   15050:	test   rax,rax
   15053:	je     150e8 <read_asc17hmm+0x4e8>
   15059:	xor    esi,esi
   1505b:	call   3510 <strtod@plt>
   15060:	mov    rax,QWORD PTR [r13+0x10]
   15064:	mov    rcx,QWORD PTR [rsp]
   15068:	mov    edi,DWORD PTR [rip+0x4d292]        # 62300 <Alphabet_size>
   1506e:	cvtsd2ss xmm0,xmm0
   15072:	movss  DWORD PTR [rax+rcx*1+0x4],xmm0
   15078:	test   edi,edi
   1507a:	jg     150d0 <read_asc17hmm+0x4d0>
   1507c:	jmp    14e46 <read_asc17hmm+0x246>
   15081:	nop    DWORD PTR [rax+0x0]
   15088:	mov    rdi,rbp
   1508b:	lea    rsi,[rip+0x2cc3a]        # 41ccc <CSWTCH.18+0x60c>
   15092:	call   3770 <strtok@plt>
   15097:	mov    rdi,rax
   1509a:	test   rax,rax
   1509d:	je     150e8 <read_asc17hmm+0x4e8>
   1509f:	xor    esi,esi
   150a1:	call   3510 <strtod@plt>
   150a6:	mov    rsi,QWORD PTR [r13+0x10]
   150aa:	movsxd rax,r15d
   150ad:	mov    rcx,QWORD PTR [rsp]
   150b1:	add    r15d,0x1
   150b5:	cmp    r15d,DWORD PTR [rip+0x4d244]        # 62300 <Alphabet_size>
   150bc:	cvtsd2ss xmm0,xmm0
   150c0:	lea    rax,[rsi+rax*4]
   150c4:	movss  DWORD PTR [rcx+rax*1+0xc],xmm0
   150ca:	jge    14e46 <read_asc17hmm+0x246>
   150d0:	mov    rdx,r12
   150d3:	mov    esi,0x200
   150d8:	mov    rdi,rbp
   150db:	call   3620 <fgets@plt>
   150e0:	test   rax,rax
   150e3:	jne    15088 <read_asc17hmm+0x488>
   150e5:	nop    DWORD PTR [rax]
   150e8:	mov    QWORD PTR [rbx],0x0
   150ef:	mov    eax,0x1
   150f4:	jmp    14c3c <read_asc17hmm+0x3c>
   150f9:	nop    DWORD PTR [rax+0x0]
   15100:	mov    edi,r15d
   15103:	call   b1c0 <AlphabetType2String>
   15108:	mov    edi,DWORD PTR [rip+0x4cf72]        # 62080 <Alphabet_type>
   1510e:	mov    r15,rax
   15111:	call   b1c0 <AlphabetType2String>
   15116:	mov    rdx,r15
   15119:	lea    rdi,[rip+0x28ff0]        # 3e110 <_IO_stdin_used+0x1110>
   15120:	mov    rsi,rax
   15123:	xor    eax,eax
   15125:	call   317f0 <Die>
   1512a:	jmp    14d70 <read_asc17hmm+0x170>
   1512f:	nop
   15130:	mov    esi,eax
   15132:	lea    rdi,[rip+0x28f8f]        # 3e0c8 <_IO_stdin_used+0x10c8>
   15139:	xor    eax,eax
   1513b:	call   317f0 <Die>
   15140:	jmp    14d59 <read_asc17hmm+0x159>
   15145:	lea    rdi,[r13+0x20]
   15149:	call   1d250 <P9DefaultNullModel>
   1514e:	mov    rdi,r13
   15151:	call   1d1a0 <P9Renormalize>
   15156:	test   r13,r13
   15159:	je     150e8 <read_asc17hmm+0x4e8>
   1515b:	lea    rsi,[rsp+0x18]
   15160:	mov    rdi,r13
   15163:	call   1ccb0 <Plan9toPlan7>
   15168:	mov    rbp,QWORD PTR [rsp+0x18]
   1516d:	lea    rdi,[rip+0x29024]        # 3e198 <_IO_stdin_used+0x1198>
   15174:	call   36670 <Strdup>
   15179:	mov    rdi,QWORD PTR [rsp+0x18]
   1517e:	mov    QWORD PTR [rbp+0x30],rax
   15182:	call   1b3e0 <Plan7SetCtime>
   15187:	mov    rdi,r13
   1518a:	call   1cf40 <P9FreeHMM>
   1518f:	mov    rdi,QWORD PTR [rsp+0x18]
   15194:	call   1b490 <Plan7Renormalize>
   15199:	mov    rax,QWORD PTR [rsp+0x18]
   1519e:	mov    QWORD PTR [rbx],rax
   151a1:	jmp    150ef <read_asc17hmm+0x4ef>
   151a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   151b0:	mov    edi,r15d
   151b3:	call   4ad0 <SetAlphabet>
   151b8:	jmp    14d70 <read_asc17hmm+0x170>
   151bd:	nop    DWORD PTR [rax]
   151c0:	mov    rsi,QWORD PTR [rsp]
   151c4:	mov    ecx,0x10
   151c9:	lea    rdi,[rip+0x28d4f]        # 3df1f <_IO_stdin_used+0xf1f>
   151d0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   151d2:	seta   r15b
   151d6:	sbb    r15b,0x0
   151da:	movsx  r15d,r15b
   151de:	test   r15d,r15d
   151e1:	je     15367 <read_asc17hmm+0x767>
   151e7:	mov    rsi,QWORD PTR [rsp]
   151eb:	mov    ecx,0x10
   151f0:	lea    rdi,[rip+0x28d38]        # 3df2f <_IO_stdin_used+0xf2f>
   151f7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   151f9:	seta   al
   151fc:	sbb    al,0x0
   151fe:	test   al,al
   15200:	jne    150e8 <read_asc17hmm+0x4e8>
   15206:	mov    rdx,r12
   15209:	mov    esi,0x200
   1520e:	mov    rdi,rbp
   15211:	call   3620 <fgets@plt>
   15216:	test   rax,rax
   15219:	je     150e8 <read_asc17hmm+0x4e8>
   1521f:	mov    rdi,rbp
   15222:	lea    rsi,[rip+0x2caa3]        # 41ccc <CSWTCH.18+0x60c>
   15229:	call   3770 <strtok@plt>
   1522e:	mov    rdi,rax
   15231:	test   rax,rax
   15234:	je     150e8 <read_asc17hmm+0x4e8>
   1523a:	xor    esi,esi
   1523c:	call   3510 <strtod@plt>
   15241:	movsxd r15,DWORD PTR [rsp+0x8]
   15246:	mov    rdx,r12
   15249:	mov    rdi,rbp
   1524c:	mov    rax,QWORD PTR [r13+0x18]
   15250:	cvtsd2ss xmm0,xmm0
   15254:	mov    esi,0x200
   15259:	imul   r15,r15,0x5c
   1525d:	movss  DWORD PTR [rax+r15*1],xmm0
   15263:	call   3620 <fgets@plt>
   15268:	test   rax,rax
   1526b:	je     150e8 <read_asc17hmm+0x4e8>
   15271:	mov    rdi,rbp
   15274:	lea    rsi,[rip+0x2ca51]        # 41ccc <CSWTCH.18+0x60c>
   1527b:	call   3770 <strtok@plt>
   15280:	mov    rdi,rax
   15283:	test   rax,rax
   15286:	je     150e8 <read_asc17hmm+0x4e8>
   1528c:	xor    esi,esi
   1528e:	call   3510 <strtod@plt>
   15293:	mov    rax,QWORD PTR [r13+0x18]
   15297:	mov    rdx,r12
   1529a:	mov    rdi,rbp
   1529d:	cvtsd2ss xmm0,xmm0
   152a1:	mov    esi,0x200
   152a6:	movss  DWORD PTR [rax+r15*1+0x8],xmm0
   152ad:	call   3620 <fgets@plt>
   152b2:	test   rax,rax
   152b5:	je     150e8 <read_asc17hmm+0x4e8>
   152bb:	mov    rdi,rbp
   152be:	lea    rsi,[rip+0x2ca07]        # 41ccc <CSWTCH.18+0x60c>
   152c5:	call   3770 <strtok@plt>
   152ca:	mov    rdi,rax
   152cd:	test   rax,rax
   152d0:	je     150e8 <read_asc17hmm+0x4e8>
   152d6:	xor    esi,esi
   152d8:	call   3510 <strtod@plt>
   152dd:	mov    rax,QWORD PTR [r13+0x18]
   152e1:	cvtsd2ss xmm0,xmm0
   152e5:	movss  DWORD PTR [rax+r15*1+0x4],xmm0
   152ec:	jmp    14e46 <read_asc17hmm+0x246>
   152f1:	nop    DWORD PTR [rax+0x0]
   152f8:	lea    rdi,[rip+0x28e71]        # 3e170 <_IO_stdin_used+0x1170>
   152ff:	xor    eax,eax
   15301:	call   317f0 <Die>
   15306:	jmp    14d84 <read_asc17hmm+0x184>
   1530b:	nop    DWORD PTR [rax+rax*1+0x0]
   15310:	cmp    dl,0x28
   15313:	je     14f35 <read_asc17hmm+0x335>
   15319:	jmp    150e8 <read_asc17hmm+0x4e8>
   1531e:	xchg   ax,ax
   15320:	cmp    dl,0x28
   15323:	je     14f75 <read_asc17hmm+0x375>
   15329:	jmp    150e8 <read_asc17hmm+0x4e8>
   1532e:	xchg   ax,ax
   15330:	cmp    BYTE PTR [rbp+0x2],0x73
   15334:	jne    14e1d <read_asc17hmm+0x21d>
   1533a:	or     DWORD PTR [r13+0x90],0x1
   15342:	jmp    14e1d <read_asc17hmm+0x21d>
   15347:	nop    WORD PTR [rax+rax*1+0x0]
   15350:	cmp    BYTE PTR [rbp+0x2],0x73
   15354:	jne    14e46 <read_asc17hmm+0x246>
   1535a:	or     DWORD PTR [r13+0x90],0x2
   15362:	jmp    14e46 <read_asc17hmm+0x246>
   15367:	mov    rdx,r12
   1536a:	mov    esi,0x200
   1536f:	mov    rdi,rbp
   15372:	call   3620 <fgets@plt>
   15377:	test   rax,rax
   1537a:	je     150e8 <read_asc17hmm+0x4e8>
   15380:	mov    rdi,rbp
   15383:	lea    rsi,[rip+0x2c942]        # 41ccc <CSWTCH.18+0x60c>
   1538a:	call   3770 <strtok@plt>
   1538f:	mov    rdi,rax
   15392:	test   rax,rax
   15395:	je     150e8 <read_asc17hmm+0x4e8>
   1539b:	xor    esi,esi
   1539d:	call   3510 <strtod@plt>
   153a2:	movsxd rax,DWORD PTR [rsp+0x8]
   153a7:	mov    rdx,r12
   153aa:	mov    rdi,rbp
   153ad:	cvtsd2ss xmm0,xmm0
   153b1:	mov    esi,0x200
   153b6:	imul   rcx,rax,0x5c
   153ba:	mov    rax,QWORD PTR [r13+0x8]
   153be:	movss  DWORD PTR [rax+rcx*1],xmm0
   153c3:	mov    QWORD PTR [rsp],rcx
   153c7:	call   3620 <fgets@plt>
   153cc:	test   rax,rax
   153cf:	je     150e8 <read_asc17hmm+0x4e8>
   153d5:	mov    rdi,rbp
   153d8:	lea    rsi,[rip+0x2c8ed]        # 41ccc <CSWTCH.18+0x60c>
   153df:	call   3770 <strtok@plt>
   153e4:	mov    rdi,rax
   153e7:	test   rax,rax
   153ea:	je     150e8 <read_asc17hmm+0x4e8>
   153f0:	xor    esi,esi
   153f2:	call   3510 <strtod@plt>
   153f7:	mov    rax,QWORD PTR [r13+0x8]
   153fb:	mov    rcx,QWORD PTR [rsp]
   153ff:	mov    rdx,r12
   15402:	cvtsd2ss xmm0,xmm0
   15406:	mov    esi,0x200
   1540b:	mov    rdi,rbp
   1540e:	movss  DWORD PTR [rax+rcx*1+0x8],xmm0
   15414:	call   3620 <fgets@plt>
   15419:	test   rax,rax
   1541c:	je     150e8 <read_asc17hmm+0x4e8>
   15422:	mov    rdi,rbp
   15425:	lea    rsi,[rip+0x2c8a0]        # 41ccc <CSWTCH.18+0x60c>
   1542c:	call   3770 <strtok@plt>
   15431:	mov    rdi,rax
   15434:	test   rax,rax
   15437:	je     150e8 <read_asc17hmm+0x4e8>
   1543d:	xor    esi,esi
   1543f:	call   3510 <strtod@plt>
   15444:	mov    rcx,QWORD PTR [rsp]
   15448:	mov    rax,QWORD PTR [r13+0x8]
   1544c:	cvtsd2ss xmm0,xmm0
   15450:	movss  DWORD PTR [rax+rcx*1+0x4],xmm0
   15456:	mov    ecx,DWORD PTR [rip+0x4cea4]        # 62300 <Alphabet_size>
   1545c:	test   ecx,ecx
   1545e:	jg     154b4 <read_asc17hmm+0x8b4>
   15460:	jmp    14e46 <read_asc17hmm+0x246>
   15465:	nop    DWORD PTR [rax]
   15468:	mov    rdi,rbp
   1546b:	lea    rsi,[rip+0x2c85a]        # 41ccc <CSWTCH.18+0x60c>
   15472:	call   3770 <strtok@plt>
   15477:	mov    rdi,rax
   1547a:	test   rax,rax
   1547d:	je     150e8 <read_asc17hmm+0x4e8>
   15483:	xor    esi,esi
   15485:	call   3510 <strtod@plt>
   1548a:	mov    rdx,QWORD PTR [r13+0x8]
   1548e:	movsxd rax,r15d
   15491:	mov    rcx,QWORD PTR [rsp]
   15495:	add    r15d,0x1
   15499:	cmp    r15d,DWORD PTR [rip+0x4ce60]        # 62300 <Alphabet_size>
   154a0:	cvtsd2ss xmm0,xmm0
   154a4:	lea    rax,[rdx+rax*4]
   154a8:	movss  DWORD PTR [rcx+rax*1+0xc],xmm0
   154ae:	jge    14e46 <read_asc17hmm+0x246>
   154b4:	mov    rdx,r12
   154b7:	mov    esi,0x200
   154bc:	mov    rdi,rbp
   154bf:	call   3620 <fgets@plt>
   154c4:	test   rax,rax
   154c7:	jne    15468 <read_asc17hmm+0x868>
   154c9:	jmp    150e8 <read_asc17hmm+0x4e8>
   154ce:	call   3570 <__stack_chk_fail@plt>
   154d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   154de:	xchg   ax,ax

00000000000154e0 <HMMFileRead>:
   154e0:	endbr64 
   154e4:	push   r12
   154e6:	mov    r12,rsi
   154e9:	push   rbp
   154ea:	mov    rbp,rdi
   154ed:	sub    rsp,0x8
   154f1:	mov    eax,DWORD PTR [rdi+0x20]
   154f4:	test   eax,eax
   154f6:	jne    15510 <HMMFileRead+0x30>
   154f8:	mov    rax,QWORD PTR [rbp+0x10]
   154fc:	add    rsp,0x8
   15500:	mov    rsi,r12
   15503:	mov    rdi,rbp
   15506:	pop    rbp
   15507:	pop    r12
   15509:	jmp    rax
   1550b:	nop    DWORD PTR [rax+rax*1+0x0]
   15510:	mov    esi,DWORD PTR [rdi+0x24]
   15513:	lea    rdx,[rdi+0x28]
   15517:	mov    rdi,QWORD PTR [rdi]
   1551a:	call   37de0 <SSIGetFilePosition>
   1551f:	test   eax,eax
   15521:	je     154f8 <HMMFileRead+0x18>
   15523:	lea    rdi,[rip+0x28a15]        # 3df3f <_IO_stdin_used+0xf3f>
   1552a:	xor    eax,eax
   1552c:	call   317f0 <Die>
   15531:	jmp    154f8 <HMMFileRead+0x18>
   15533:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1553e:	xchg   ax,ax

0000000000015540 <HMMFileClose>:
   15540:	endbr64 
   15544:	push   rbp
   15545:	mov    rbp,rdi
   15548:	mov    rdi,QWORD PTR [rdi]
   1554b:	test   rdi,rdi
   1554e:	je     15555 <HMMFileClose+0x15>
   15550:	call   3530 <fclose@plt>
   15555:	mov    rdi,QWORD PTR [rbp+0x8]
   15559:	test   rdi,rdi
   1555c:	je     15563 <HMMFileClose+0x23>
   1555e:	call   37db0 <SSIClose>
   15563:	mov    rdi,rbp
   15566:	pop    rbp
   15567:	jmp    3460 <free@plt>
   1556c:	nop    DWORD PTR [rax+0x0]

0000000000015570 <HMMFileOpen>:
   15570:	endbr64 
   15574:	push   r14
   15576:	mov    edx,0x38
   1557b:	push   r13
   1557d:	mov    r13,rsi
   15580:	mov    esi,0xa4
   15585:	push   r12
   15587:	push   rbp
   15588:	mov    rbp,rdi
   1558b:	lea    rdi,[rip+0x288cc]        # 3de5e <_IO_stdin_used+0xe5e>
   15592:	sub    rsp,0x228
   15599:	mov    rax,QWORD PTR fs:0x28
   155a2:	mov    QWORD PTR [rsp+0x218],rax
   155aa:	xor    eax,eax
   155ac:	call   36810 <sre_malloc>
   155b1:	lea    rsi,[rip+0x2b996]        # 40f4e <gki_primes+0x4ce>
   155b8:	mov    rdi,rbp
   155bb:	mov    QWORD PTR [rax],0x0
   155c2:	mov    r12,rax
   155c5:	mov    QWORD PTR [rax+0x8],0x0
   155cd:	mov    QWORD PTR [rax+0x10],0x0
   155d5:	mov    QWORD PTR [rax+0x18],0x0
   155dd:	mov    DWORD PTR [rax+0x20],0x1
   155e4:	call   3750 <fopen@plt>
   155e9:	mov    QWORD PTR [r12],rax
   155ed:	test   rax,rax
   155f0:	je     157e8 <HMMFileOpen+0x278>
   155f6:	mov    rdi,rbp
   155f9:	call   3560 <strlen@plt>
   155fe:	mov    esi,0xb5
   15603:	lea    rdi,[rip+0x28854]        # 3de5e <_IO_stdin_used+0xe5e>
   1560a:	lea    rdx,[rax+0x5]
   1560e:	call   36810 <sre_malloc>
   15613:	mov    r8,rbp
   15616:	mov    esi,0x1
   1561b:	lea    rcx,[rip+0x28939]        # 3df5b <_IO_stdin_used+0xf5b>
   15622:	mov    rdi,rax
   15625:	mov    rdx,0xffffffffffffffff
   1562c:	mov    r13,rax
   1562f:	xor    eax,eax
   15631:	call   3830 <__sprintf_chk@plt>
   15636:	mov    rdi,rbp
   15639:	call   37dd0 <SSIRecommendMode>
   1563e:	mov    DWORD PTR [r12+0x24],eax
   15643:	cmp    eax,0xffffffff
   15646:	je     15940 <HMMFileOpen+0x3d0>
   1564c:	lea    rsi,[r12+0x8]
   15651:	mov    rdi,r13
   15654:	call   37500 <SSIOpen>
   15659:	mov    rdi,r13
   1565c:	call   3460 <free@plt>
   15661:	mov    esi,DWORD PTR [r12+0x24]
   15666:	mov    rdi,QWORD PTR [r12]
   1566a:	lea    rdx,[r12+0x28]
   1566f:	call   37de0 <SSIGetFilePosition>
   15674:	test   eax,eax
   15676:	jne    157d0 <HMMFileOpen+0x260>
   1567c:	mov    rcx,QWORD PTR [r12]
   15680:	lea    rdi,[rsp+0x4]
   15685:	mov    edx,0x1
   1568a:	mov    esi,0x4
   1568f:	call   3500 <fread@plt>
   15694:	test   rax,rax
   15697:	je     15910 <HMMFileOpen+0x3a0>
   1569d:	mov    rdi,QWORD PTR [r12]
   156a1:	call   35a0 <rewind@plt>
   156a6:	mov    eax,DWORD PTR [rsp+0x4]
   156aa:	cmp    eax,DWORD PTR [rip+0x37960]        # 4d010 <v20magic>
   156b0:	je     15920 <HMMFileOpen+0x3b0>
   156b6:	cmp    eax,0xb5edede8
   156bb:	je     15890 <HMMFileOpen+0x320>
   156c1:	cmp    eax,0xe8ededb4
   156c6:	je     15958 <HMMFileOpen+0x3e8>
   156cc:	cmp    eax,0xb4edede8
   156d1:	je     15978 <HMMFileOpen+0x408>
   156d7:	cmp    eax,0xe8ededb3
   156dc:	je     159a0 <HMMFileOpen+0x430>
   156e2:	cmp    eax,0xb3edede8
   156e7:	je     158e0 <HMMFileOpen+0x370>
   156ed:	cmp    eax,0xe8ededb2
   156f2:	je     15a00 <HMMFileOpen+0x490>
   156f8:	cmp    eax,0xb2edede8
   156fd:	je     15a20 <HMMFileOpen+0x4b0>
   15703:	cmp    eax,0xe8ededb1
   15708:	je     15a40 <HMMFileOpen+0x4d0>
   1570e:	cmp    eax,0xb1edede8
   15713:	je     15a60 <HMMFileOpen+0x4f0>
   15719:	test   eax,eax
   1571b:	js     158fd <HMMFileOpen+0x38d>
   15721:	mov    rdx,QWORD PTR [r12]
   15725:	lea    rdi,[rsp+0x10]
   1572a:	mov    esi,0x200
   1572f:	call   3620 <fgets@plt>
   15734:	test   rax,rax
   15737:	je     15910 <HMMFileOpen+0x3a0>
   1573d:	mov    rdi,QWORD PTR [r12]
   15741:	call   35a0 <rewind@plt>
   15746:	movabs rax,0x302e3252454d4d48
   15750:	cmp    QWORD PTR [rsp+0x10],rax
   15755:	je     159d8 <HMMFileOpen+0x468>
   1575b:	movabs rax,0x31762052454d4d48
   15765:	cmp    QWORD PTR [rsp+0x10],rax
   1576a:	je     15a80 <HMMFileOpen+0x510>
   15770:	movabs rax,0x3176204d4d482023
   1577a:	cmp    QWORD PTR [rsp+0x10],rax
   1577f:	je     15aa0 <HMMFileOpen+0x530>
   15785:	movabs rax,0x3176204d4d482023
   1578f:	cmp    QWORD PTR [rsp+0x10],rax
   15794:	je     15abe <HMMFileOpen+0x54e>
   1579a:	movabs rax,0x3176204d4d482023
   157a4:	cmp    QWORD PTR [rsp+0x10],rax
   157a9:	jne    15910 <HMMFileOpen+0x3a0>
   157af:	cmp    WORD PTR [rsp+0x18],0x302e
   157b6:	jne    15910 <HMMFileOpen+0x3a0>
   157bc:	lea    rax,[rip+0xffffffffffffc42d]        # 11bf0 <read_asc10hmm>
   157c3:	mov    QWORD PTR [r12+0x10],rax
   157c8:	jmp    158b0 <HMMFileOpen+0x340>
   157cd:	nop    DWORD PTR [rax]
   157d0:	lea    rdi,[rip+0x28768]        # 3df3f <_IO_stdin_used+0xf3f>
   157d7:	xor    eax,eax
   157d9:	call   317f0 <Die>
   157de:	jmp    1567c <HMMFileOpen+0x10c>
   157e3:	nop    DWORD PTR [rax+rax*1+0x0]
   157e8:	lea    rdx,[rsp+0x8]
   157ed:	mov    rsi,r13
   157f0:	mov    rdi,rbp
   157f3:	call   27750 <EnvFileOpen>
   157f8:	mov    QWORD PTR [r12],rax
   157fc:	test   rax,rax
   157ff:	je     159f0 <HMMFileOpen+0x480>
   15805:	mov    rdi,QWORD PTR [rsp+0x8]
   1580a:	mov    rsi,rbp
   1580d:	call   275c0 <FileConcat>
   15812:	mov    rdi,rax
   15815:	mov    r14,rax
   15818:	call   3560 <strlen@plt>
   1581d:	mov    rdi,rbp
   15820:	mov    r13,rax
   15823:	call   3560 <strlen@plt>
   15828:	mov    esi,0xc0
   1582d:	lea    rdi,[rip+0x2862a]        # 3de5e <_IO_stdin_used+0xe5e>
   15834:	lea    rdx,[r13+rax*1+0x5]
   15839:	call   36810 <sre_malloc>
   1583e:	mov    r8,r14
   15841:	mov    esi,0x1
   15846:	lea    rcx,[rip+0x2870e]        # 3df5b <_IO_stdin_used+0xf5b>
   1584d:	mov    rdi,rax
   15850:	mov    rdx,0xffffffffffffffff
   15857:	mov    r13,rax
   1585a:	xor    eax,eax
   1585c:	call   3830 <__sprintf_chk@plt>
   15861:	mov    rdi,r14
   15864:	call   37dd0 <SSIRecommendMode>
   15869:	mov    DWORD PTR [r12+0x24],eax
   1586e:	cmp    eax,0xffffffff
   15871:	je     159c0 <HMMFileOpen+0x450>
   15877:	mov    rdi,r14
   1587a:	call   3460 <free@plt>
   1587f:	mov    rdi,QWORD PTR [rsp+0x8]
   15884:	call   3460 <free@plt>
   15889:	jmp    1564c <HMMFileOpen+0xdc>
   1588e:	xchg   ax,ax
   15890:	lea    rax,[rip+0xffffffffffffcc89]        # 12520 <read_bin20hmm>
   15897:	mov    QWORD PTR [r12+0x10],rax
   1589c:	movabs rax,0x100000001
   158a6:	mov    QWORD PTR [r12+0x18],rax
   158ab:	nop    DWORD PTR [rax+rax*1+0x0]
   158b0:	mov    rax,QWORD PTR [rsp+0x218]
   158b8:	xor    rax,QWORD PTR fs:0x28
   158c1:	jne    15adc <HMMFileOpen+0x56c>
   158c7:	add    rsp,0x228
   158ce:	mov    rax,r12
   158d1:	pop    rbp
   158d2:	pop    r12
   158d4:	pop    r13
   158d6:	pop    r14
   158d8:	ret    
   158d9:	nop    DWORD PTR [rax+0x0]
   158e0:	lea    rax,[rip+0xfffffffffffff079]        # 14960 <read_bin17hmm>
   158e7:	mov    QWORD PTR [r12+0x10],rax
   158ec:	movabs rax,0x100000001
   158f6:	mov    QWORD PTR [r12+0x18],rax
   158fb:	jmp    158b0 <HMMFileOpen+0x340>
   158fd:	mov    rsi,rbp
   15900:	lea    rdi,[rip+0x288e9]        # 3e1f0 <_IO_stdin_used+0x11f0>
   15907:	xor    eax,eax
   15909:	call   318f0 <Warn>
   1590e:	xchg   ax,ax
   15910:	mov    rdi,r12
   15913:	xor    r12d,r12d
   15916:	call   15540 <HMMFileClose>
   1591b:	jmp    158b0 <HMMFileOpen+0x340>
   1591d:	nop    DWORD PTR [rax]
   15920:	mov    DWORD PTR [r12+0x18],0x1
   15929:	lea    rax,[rip+0xffffffffffffcbf0]        # 12520 <read_bin20hmm>
   15930:	mov    QWORD PTR [r12+0x10],rax
   15935:	jmp    158b0 <HMMFileOpen+0x340>
   1593a:	nop    WORD PTR [rax+rax*1+0x0]
   15940:	lea    rdi,[rip+0x2861b]        # 3df62 <_IO_stdin_used+0xf62>
   15947:	xor    eax,eax
   15949:	call   317f0 <Die>
   1594e:	jmp    1564c <HMMFileOpen+0xdc>
   15953:	nop    DWORD PTR [rax+rax*1+0x0]
   15958:	mov    DWORD PTR [r12+0x18],0x1
   15961:	lea    rax,[rip+0xfffffffffffff0d8]        # 14a40 <read_bin19hmm>
   15968:	mov    QWORD PTR [r12+0x10],rax
   1596d:	jmp    158b0 <HMMFileOpen+0x340>
   15972:	nop    WORD PTR [rax+rax*1+0x0]
   15978:	lea    rax,[rip+0xfffffffffffff0c1]        # 14a40 <read_bin19hmm>
   1597f:	mov    QWORD PTR [r12+0x10],rax
   15984:	movabs rax,0x100000001
   1598e:	mov    QWORD PTR [r12+0x18],rax
   15993:	jmp    158b0 <HMMFileOpen+0x340>
   15998:	nop    DWORD PTR [rax+rax*1+0x0]
   159a0:	mov    DWORD PTR [r12+0x18],0x1
   159a9:	lea    rax,[rip+0xffffffffffffefb0]        # 14960 <read_bin17hmm>
   159b0:	mov    QWORD PTR [r12+0x10],rax
   159b5:	jmp    158b0 <HMMFileOpen+0x340>
   159ba:	nop    WORD PTR [rax+rax*1+0x0]
   159c0:	lea    rdi,[rip+0x2859b]        # 3df62 <_IO_stdin_used+0xf62>
   159c7:	xor    eax,eax
   159c9:	call   317f0 <Die>
   159ce:	jmp    15877 <HMMFileOpen+0x307>
   159d3:	nop    DWORD PTR [rax+rax*1+0x0]
   159d8:	lea    rax,[rip+0xffffffffffffe021]        # 13a00 <read_asc20hmm>
   159df:	mov    QWORD PTR [r12+0x10],rax
   159e4:	jmp    158b0 <HMMFileOpen+0x340>
   159e9:	nop    DWORD PTR [rax+0x0]
   159f0:	xor    r12d,r12d
   159f3:	jmp    158b0 <HMMFileOpen+0x340>
   159f8:	nop    DWORD PTR [rax+rax*1+0x0]
   15a00:	mov    DWORD PTR [r12+0x18],0x1
   15a09:	lea    rax,[rip+0xffffffffffffee70]        # 14880 <read_bin11hmm>
   15a10:	mov    QWORD PTR [r12+0x10],rax
   15a15:	jmp    158b0 <HMMFileOpen+0x340>
   15a1a:	nop    WORD PTR [rax+rax*1+0x0]
   15a20:	lea    rax,[rip+0xffffffffffffee59]        # 14880 <read_bin11hmm>
   15a27:	mov    QWORD PTR [r12+0x10],rax
   15a2c:	movabs rax,0x100000001
   15a36:	mov    QWORD PTR [r12+0x18],rax
   15a3b:	jmp    158b0 <HMMFileOpen+0x340>
   15a40:	mov    DWORD PTR [r12+0x18],0x1
   15a49:	lea    rax,[rip+0xffffffffffffed50]        # 147a0 <read_bin10hmm>
   15a50:	mov    QWORD PTR [r12+0x10],rax
   15a55:	jmp    158b0 <HMMFileOpen+0x340>
   15a5a:	nop    WORD PTR [rax+rax*1+0x0]
   15a60:	lea    rax,[rip+0xffffffffffffed39]        # 147a0 <read_bin10hmm>
   15a67:	mov    QWORD PTR [r12+0x10],rax
   15a6c:	movabs rax,0x100000001
   15a76:	mov    QWORD PTR [r12+0x18],rax
   15a7b:	jmp    158b0 <HMMFileOpen+0x340>
   15a80:	cmp    WORD PTR [rsp+0x18],0x392e
   15a87:	jne    15770 <HMMFileOpen+0x200>
   15a8d:	lea    rax,[rip+0xffffffffffffd5fc]        # 13090 <read_asc19hmm>
   15a94:	mov    QWORD PTR [r12+0x10],rax
   15a99:	jmp    158b0 <HMMFileOpen+0x340>
   15a9e:	xchg   ax,ax
   15aa0:	cmp    WORD PTR [rsp+0x18],0x372e
   15aa7:	jne    15785 <HMMFileOpen+0x215>
   15aad:	lea    rax,[rip+0xfffffffffffff14c]        # 14c00 <read_asc17hmm>
   15ab4:	mov    QWORD PTR [r12+0x10],rax
   15ab9:	jmp    158b0 <HMMFileOpen+0x340>
   15abe:	cmp    WORD PTR [rsp+0x18],0x312e
   15ac5:	jne    1579a <HMMFileOpen+0x22a>
   15acb:	lea    rax,[rip+0xffffffffffffc13e]        # 11c10 <read_asc11hmm>
   15ad2:	mov    QWORD PTR [r12+0x10],rax
   15ad7:	jmp    158b0 <HMMFileOpen+0x340>
   15adc:	call   3570 <__stack_chk_fail@plt>
   15ae1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   15aec:	nop    DWORD PTR [rax+0x0]

0000000000015af0 <HMMFileRewind>:
   15af0:	endbr64 
   15af4:	mov    rdi,QWORD PTR [rdi]
   15af7:	jmp    35a0 <rewind@plt>
   15afc:	nop    DWORD PTR [rax+0x0]

0000000000015b00 <HMMFilePositionByName>:
   15b00:	endbr64 
   15b04:	push   rbp
   15b05:	push   rbx
   15b06:	mov    rbx,rdi
   15b09:	sub    rsp,0x38
   15b0d:	mov    rdi,QWORD PTR [rdi+0x8]
   15b11:	mov    rax,QWORD PTR fs:0x28
   15b1a:	mov    QWORD PTR [rsp+0x28],rax
   15b1f:	xor    eax,eax
   15b21:	test   rdi,rdi
   15b24:	je     15b3c <HMMFilePositionByName+0x3c>
   15b26:	lea    rbp,[rsp+0x10]
   15b2b:	lea    rdx,[rsp+0xc]
   15b30:	mov    rcx,rbp
   15b33:	call   37900 <SSIGetOffsetByName>
   15b38:	test   eax,eax
   15b3a:	je     15b58 <HMMFilePositionByName+0x58>
   15b3c:	xor    eax,eax
   15b3e:	mov    rcx,QWORD PTR [rsp+0x28]
   15b43:	xor    rcx,QWORD PTR fs:0x28
   15b4c:	jne    15b6d <HMMFilePositionByName+0x6d>
   15b4e:	add    rsp,0x38
   15b52:	pop    rbx
   15b53:	pop    rbp
   15b54:	ret    
   15b55:	nop    DWORD PTR [rax]
   15b58:	mov    rdi,QWORD PTR [rbx]
   15b5b:	mov    rsi,rbp
   15b5e:	call   37d30 <SSISetFilePosition>
   15b63:	test   eax,eax
   15b65:	sete   al
   15b68:	movzx  eax,al
   15b6b:	jmp    15b3e <HMMFilePositionByName+0x3e>
   15b6d:	call   3570 <__stack_chk_fail@plt>
   15b72:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   15b7d:	nop    DWORD PTR [rax]

0000000000015b80 <HMMFilePositionByIndex>:
   15b80:	endbr64 
   15b84:	push   rbp
   15b85:	push   rbx
   15b86:	mov    rbx,rdi
   15b89:	sub    rsp,0x38
   15b8d:	mov    rdi,QWORD PTR [rdi+0x8]
   15b91:	mov    rax,QWORD PTR fs:0x28
   15b9a:	mov    QWORD PTR [rsp+0x28],rax
   15b9f:	xor    eax,eax
   15ba1:	test   rdi,rdi
   15ba4:	je     15bbc <HMMFilePositionByIndex+0x3c>
   15ba6:	lea    rbp,[rsp+0x10]
   15bab:	lea    rdx,[rsp+0xc]
   15bb0:	mov    rcx,rbp
   15bb3:	call   37a60 <SSIGetOffsetByNumber>
   15bb8:	test   eax,eax
   15bba:	je     15bd8 <HMMFilePositionByIndex+0x58>
   15bbc:	xor    eax,eax
   15bbe:	mov    rcx,QWORD PTR [rsp+0x28]
   15bc3:	xor    rcx,QWORD PTR fs:0x28
   15bcc:	jne    15bed <HMMFilePositionByIndex+0x6d>
   15bce:	add    rsp,0x38
   15bd2:	pop    rbx
   15bd3:	pop    rbp
   15bd4:	ret    
   15bd5:	nop    DWORD PTR [rax]
   15bd8:	mov    rdi,QWORD PTR [rbx]
   15bdb:	mov    rsi,rbp
   15bde:	call   37d30 <SSISetFilePosition>
   15be3:	test   eax,eax
   15be5:	sete   al
   15be8:	movzx  eax,al
   15beb:	jmp    15bbe <HMMFilePositionByIndex+0x3e>
   15bed:	call   3570 <__stack_chk_fail@plt>
   15bf2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   15bfd:	nop    DWORD PTR [rax]

0000000000015c00 <WriteAscHMM>:
   15c00:	endbr64 
   15c04:	push   r15
   15c06:	lea    rcx,[rip+0x27b68]        # 3d775 <_IO_stdin_used+0x775>
   15c0d:	lea    rdx,[rip+0x28397]        # 3dfab <_IO_stdin_used+0xfab>
   15c14:	xor    eax,eax
   15c16:	push   r14
   15c18:	push   r13
   15c1a:	push   r12
   15c1c:	mov    r12,rdi
   15c1f:	push   rbp
   15c20:	push   rbx
   15c21:	mov    rbx,rsi
   15c24:	mov    esi,0x1
   15c29:	sub    rsp,0x18
   15c2d:	call   37c0 <__fprintf_chk@plt>
   15c32:	mov    rcx,QWORD PTR [rbx]
   15c35:	mov    esi,0x1
   15c3a:	mov    rdi,r12
   15c3d:	lea    rdx,[rip+0x28377]        # 3dfbb <_IO_stdin_used+0xfbb>
   15c44:	xor    eax,eax
   15c46:	call   37c0 <__fprintf_chk@plt>
   15c4b:	mov    eax,DWORD PTR [rbx+0x1c8]
   15c51:	test   ah,0x2
   15c54:	jne    165d6 <WriteAscHMM+0x9d6>
   15c5a:	test   al,0x2
   15c5c:	jne    165b7 <WriteAscHMM+0x9b7>
   15c62:	mov    ecx,DWORD PTR [rbx+0x88]
   15c68:	mov    esi,0x1
   15c6d:	mov    rdi,r12
   15c70:	xor    eax,eax
   15c72:	lea    rdx,[rip+0x28360]        # 3dfd9 <_IO_stdin_used+0xfd9>
   15c79:	lea    r13,[rip+0x28320]        # 3dfa0 <_IO_stdin_used+0xfa0>
   15c80:	call   37c0 <__fprintf_chk@plt>
   15c85:	cmp    DWORD PTR [rip+0x4c3f4],0x3        # 62080 <Alphabet_type>
   15c8c:	mov    rdi,r12
   15c8f:	lea    rax,[rip+0x2830d]        # 3dfa3 <_IO_stdin_used+0xfa3>
   15c96:	lea    rcx,[rip+0x28300]        # 3df9d <_IO_stdin_used+0xf9d>
   15c9d:	lea    rdx,[rip+0x2833f]        # 3dfe3 <_IO_stdin_used+0xfe3>
   15ca4:	mov    esi,0x1
   15ca9:	cmovne rcx,rax
   15cad:	xor    eax,eax
   15caf:	lea    rbp,[rip+0x281c9]        # 3de7f <_IO_stdin_used+0xe7f>
   15cb6:	call   37c0 <__fprintf_chk@plt>
   15cbb:	mov    rcx,r13
   15cbe:	mov    esi,0x1
   15cc3:	mov    rdi,r12
   15cc6:	test   BYTE PTR [rbx+0x1c8],0x4
   15ccd:	lea    rdx,[rip+0x28319]        # 3dfed <_IO_stdin_used+0xfed>
   15cd4:	cmovne rcx,rbp
   15cd8:	xor    eax,eax
   15cda:	call   37c0 <__fprintf_chk@plt>
   15cdf:	mov    rcx,r13
   15ce2:	mov    esi,0x1
   15ce7:	mov    rdi,r12
   15cea:	test   BYTE PTR [rbx+0x1c8],0x8
   15cf1:	lea    rdx,[rip+0x282ff]        # 3dff7 <_IO_stdin_used+0xff7>
   15cf8:	cmovne rcx,rbp
   15cfc:	xor    eax,eax
   15cfe:	call   37c0 <__fprintf_chk@plt>
   15d03:	mov    rcx,r13
   15d06:	mov    rdi,r12
   15d09:	mov    esi,0x1
   15d0e:	test   BYTE PTR [rbx+0x1c9],0x1
   15d15:	lea    rdx,[rip+0x282e5]        # 3e001 <_IO_stdin_used+0x1001>
   15d1c:	cmovne rcx,rbp
   15d20:	xor    eax,eax
   15d22:	call   37c0 <__fprintf_chk@plt>
   15d27:	mov    rdi,QWORD PTR [rbx+0x30]
   15d2b:	test   rdi,rdi
   15d2e:	je     15d97 <WriteAscHMM+0x197>
   15d30:	call   36670 <Strdup>
   15d35:	lea    rsi,[rip+0x2bf92]        # 41cce <CSWTCH.18+0x60e>
   15d3c:	lea    r13,[rip+0x282c8]        # 3e00b <_IO_stdin_used+0x100b>
   15d43:	mov    rdi,rax
   15d46:	mov    rbp,rax
   15d49:	call   3770 <strtok@plt>
   15d4e:	mov    r8,rax
   15d51:	test   rax,rax
   15d54:	je     15d8f <WriteAscHMM+0x18f>
   15d56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15d60:	mov    rcx,r13
   15d63:	lea    rdx,[rip+0x282a8]        # 3e012 <_IO_stdin_used+0x1012>
   15d6a:	mov    rdi,r12
   15d6d:	xor    eax,eax
   15d6f:	mov    esi,0x1
   15d74:	call   37c0 <__fprintf_chk@plt>
   15d79:	lea    rsi,[rip+0x2bf4e]        # 41cce <CSWTCH.18+0x60e>
   15d80:	xor    edi,edi
   15d82:	call   3770 <strtok@plt>
   15d87:	mov    r8,rax
   15d8a:	test   rax,rax
   15d8d:	jne    15d60 <WriteAscHMM+0x160>
   15d8f:	mov    rdi,rbp
   15d92:	call   3460 <free@plt>
   15d97:	mov    ecx,DWORD PTR [rbx+0x38]
   15d9a:	lea    rdx,[rip+0x28277]        # 3e018 <_IO_stdin_used+0x1018>
   15da1:	mov    rdi,r12
   15da4:	xor    eax,eax
   15da6:	mov    esi,0x1
   15dab:	call   37c0 <__fprintf_chk@plt>
   15db0:	mov    rcx,QWORD PTR [rbx+0x40]
   15db4:	mov    esi,0x1
   15db9:	xor    eax,eax
   15dbb:	lea    rdx,[rip+0x28260]        # 3e022 <_IO_stdin_used+0x1022>
   15dc2:	mov    rdi,r12
   15dc5:	call   37c0 <__fprintf_chk@plt>
   15dca:	mov    ecx,DWORD PTR [rbx+0x50]
   15dcd:	mov    esi,0x1
   15dd2:	mov    rdi,r12
   15dd5:	lea    rdx,[rip+0x28250]        # 3e02c <_IO_stdin_used+0x102c>
   15ddc:	xor    eax,eax
   15dde:	call   37c0 <__fprintf_chk@plt>
   15de3:	mov    eax,DWORD PTR [rbx+0x1c8]
   15de9:	test   ah,0x4
   15dec:	jne    16581 <WriteAscHMM+0x981>
   15df2:	test   ah,0x8
   15df5:	jne    1654b <WriteAscHMM+0x94b>
   15dfb:	test   ah,0x10
   15dfe:	jne    164df <WriteAscHMM+0x8df>
   15e04:	mov    rcx,r12
   15e07:	mov    edx,0x7
   15e0c:	mov    esi,0x1
   15e11:	lea    rdi,[rip+0x2821e]        # 3e036 <_IO_stdin_used+0x1036>
   15e18:	lea    rbp,[rbx+0xac]
   15e1f:	call   37b0 <fwrite@plt>
   15e24:	lea    r14,[rbx+0xcc]
   15e2b:	lea    r13,[rip+0x2b14c]        # 40f7e <gki_primes+0x4fe>
   15e32:	movss  xmm0,DWORD PTR [rbp+0x0]
   15e37:	pxor   xmm7,xmm7
   15e3b:	ucomiss xmm0,xmm7
   15e3e:	jp     15fe8 <WriteAscHMM+0x3e8>
   15e44:	jne    15fe8 <WriteAscHMM+0x3e8>
   15e4a:	mov    rcx,r13
   15e4d:	xor    eax,eax
   15e4f:	lea    rdx,[rip+0x28252]        # 3e0a8 <_IO_stdin_used+0x10a8>
   15e56:	mov    esi,0x1
   15e5b:	mov    rdi,r12
   15e5e:	call   37c0 <__fprintf_chk@plt>
   15e63:	movss  xmm0,DWORD PTR [rbp+0x4]
   15e68:	pxor   xmm2,xmm2
   15e6c:	ucomiss xmm0,xmm2
   15e6f:	jp     15fd0 <WriteAscHMM+0x3d0>
   15e75:	jne    15fd0 <WriteAscHMM+0x3d0>
   15e7b:	mov    rcx,r13
   15e7e:	lea    rdx,[rip+0x28223]        # 3e0a8 <_IO_stdin_used+0x10a8>
   15e85:	mov    rdi,r12
   15e88:	xor    eax,eax
   15e8a:	add    rbp,0x8
   15e8e:	mov    esi,0x1
   15e93:	call   37c0 <__fprintf_chk@plt>
   15e98:	cmp    rbp,r14
   15e9b:	jne    15e32 <WriteAscHMM+0x232>
   15e9d:	mov    rsi,r12
   15ea0:	mov    edi,0xa
   15ea5:	call   3600 <fputc@plt>
   15eaa:	mov    rcx,r12
   15ead:	mov    edx,0x6
   15eb2:	mov    esi,0x1
   15eb7:	lea    rdi,[rip+0x28180]        # 3e03e <_IO_stdin_used+0x103e>
   15ebe:	call   37b0 <fwrite@plt>
   15ec3:	movss  xmm0,DWORD PTR [rbx+0x130]
   15ecb:	pxor   xmm7,xmm7
   15ecf:	ucomiss xmm0,xmm7
   15ed2:	jp     1648b <WriteAscHMM+0x88b>
   15ed8:	jne    1648b <WriteAscHMM+0x88b>
   15ede:	lea    rcx,[rip+0x2b099]        # 40f7e <gki_primes+0x4fe>
   15ee5:	xor    eax,eax
   15ee7:	lea    rdx,[rip+0x281ba]        # 3e0a8 <_IO_stdin_used+0x10a8>
   15eee:	mov    esi,0x1
   15ef3:	mov    rdi,r12
   15ef6:	call   37c0 <__fprintf_chk@plt>
   15efb:	movss  xmm0,DWORD PTR [rip+0x27499]        # 3d39c <_IO_stdin_used+0x39c>
   15f03:	pxor   xmm7,xmm7
   15f07:	subss  xmm0,DWORD PTR [rbx+0x130]
   15f0f:	ucomiss xmm0,xmm7
   15f12:	jp     164ca <WriteAscHMM+0x8ca>
   15f18:	jne    164ca <WriteAscHMM+0x8ca>
   15f1e:	lea    rcx,[rip+0x2b059]        # 40f7e <gki_primes+0x4fe>
   15f25:	lea    rdx,[rip+0x27c78]        # 3dba4 <_IO_stdin_used+0xba4>
   15f2c:	mov    esi,0x1
   15f31:	xor    eax,eax
   15f33:	xor    ebp,ebp
   15f35:	mov    rdi,r12
   15f38:	lea    r13,[rip+0x2b03f]        # 40f7e <gki_primes+0x4fe>
   15f3f:	call   37c0 <__fprintf_chk@plt>
   15f44:	mov    rcx,r12
   15f47:	mov    edx,0x6
   15f4c:	mov    esi,0x1
   15f51:	lea    rdi,[rip+0x280ed]        # 3e045 <_IO_stdin_used+0x1045>
   15f58:	call   37b0 <fwrite@plt>
   15f5d:	mov    eax,DWORD PTR [rip+0x4c39d]        # 62300 <Alphabet_size>
   15f63:	test   eax,eax
   15f65:	jg     15f99 <WriteAscHMM+0x399>
   15f67:	jmp    16000 <WriteAscHMM+0x400>
   15f6c:	nop    DWORD PTR [rax+0x0]
   15f70:	jne    15fab <WriteAscHMM+0x3ab>
   15f72:	mov    rcx,r13
   15f75:	lea    rdx,[rip+0x2812c]        # 3e0a8 <_IO_stdin_used+0x10a8>
   15f7c:	mov    rdi,r12
   15f7f:	xor    eax,eax
   15f81:	add    rbp,0x1
   15f85:	mov    esi,0x1
   15f8a:	call   37c0 <__fprintf_chk@plt>
   15f8f:	mov    eax,DWORD PTR [rip+0x4c36b]        # 62300 <Alphabet_size>
   15f95:	cmp    eax,ebp
   15f97:	jle    16000 <WriteAscHMM+0x400>
   15f99:	movss  xmm2,DWORD PTR [rbx+rbp*4+0xe0]
   15fa2:	pxor   xmm6,xmm6
   15fa6:	ucomiss xmm2,xmm6
   15fa9:	jnp    15f70 <WriteAscHMM+0x370>
   15fab:	pxor   xmm0,xmm0
   15faf:	movss  xmm1,DWORD PTR [rip+0x273e5]        # 3d39c <_IO_stdin_used+0x39c>
   15fb7:	cvtsi2ss xmm0,eax
   15fbb:	divss  xmm1,xmm0
   15fbf:	movaps xmm0,xmm2
   15fc2:	call   14b20 <prob2ascii.part.0>
   15fc7:	mov    rcx,rax
   15fca:	jmp    15f75 <WriteAscHMM+0x375>
   15fcc:	nop    DWORD PTR [rax+0x0]
   15fd0:	movss  xmm1,DWORD PTR [rip+0x273c4]        # 3d39c <_IO_stdin_used+0x39c>
   15fd8:	call   14b20 <prob2ascii.part.0>
   15fdd:	mov    rcx,rax
   15fe0:	jmp    15e7e <WriteAscHMM+0x27e>
   15fe5:	nop    DWORD PTR [rax]
   15fe8:	movss  xmm1,DWORD PTR [rip+0x273ac]        # 3d39c <_IO_stdin_used+0x39c>
   15ff0:	call   14b20 <prob2ascii.part.0>
   15ff5:	mov    rcx,rax
   15ff8:	jmp    15e4d <WriteAscHMM+0x24d>
   15ffd:	nop    DWORD PTR [rax]
   16000:	mov    rsi,r12
   16003:	mov    edi,0xa
   16008:	call   3600 <fputc@plt>
   1600d:	test   BYTE PTR [rbx+0x1c8],0x80
   16014:	jne    16515 <WriteAscHMM+0x915>
   1601a:	mov    esi,0x1
   1601f:	mov    rcx,r12
   16022:	mov    edx,0x9
   16027:	lea    rdi,[rip+0x2802f]        # 3e05d <_IO_stdin_used+0x105d>
   1602e:	lea    r13,[rip+0x4c24b]        # 62280 <Alphabet>
   16035:	call   37b0 <fwrite@plt>
   1603a:	mov    esi,DWORD PTR [rip+0x4c2c0]        # 62300 <Alphabet_size>
   16040:	mov    rbp,r13
   16043:	lea    r14,[rip+0x2804a]        # 3e094 <_IO_stdin_used+0x1094>
   1604a:	test   esi,esi
   1604c:	jle    16077 <WriteAscHMM+0x477>
   1604e:	xchg   ax,ax
   16050:	movsx  ecx,BYTE PTR [rbp+0x0]
   16054:	xor    eax,eax
   16056:	add    rbp,0x1
   1605a:	mov    rdx,r14
   1605d:	mov    esi,0x1
   16062:	mov    rdi,r12
   16065:	call   37c0 <__fprintf_chk@plt>
   1606a:	mov    eax,ebp
   1606c:	sub    eax,r13d
   1606f:	cmp    DWORD PTR [rip+0x4c28b],eax        # 62300 <Alphabet_size>
   16075:	jg     16050 <WriteAscHMM+0x450>
   16077:	mov    rsi,r12
   1607a:	mov    edi,0xa
   1607f:	call   3600 <fputc@plt>
   16084:	lea    rax,[rip+0x27feb]        # 3e076 <_IO_stdin_used+0x1076>
   1608b:	mov    rdi,r12
   1608e:	lea    r9,[rip+0x27fd2]        # 3e067 <_IO_stdin_used+0x1067>
   16095:	push   rax
   16096:	lea    rax,[rip+0x27fde]        # 3e07b <_IO_stdin_used+0x107b>
   1609d:	lea    r8,[rip+0x27fc8]        # 3e06c <_IO_stdin_used+0x106c>
   160a4:	mov    esi,0x1
   160a9:	push   rax
   160aa:	lea    rax,[rip+0x27fcf]        # 3e080 <_IO_stdin_used+0x1080>
   160b1:	lea    rcx,[rip+0x27fb9]        # 3e071 <_IO_stdin_used+0x1071>
   160b8:	push   rax
   160b9:	lea    rax,[rip+0x27fc5]        # 3e085 <_IO_stdin_used+0x1085>
   160c0:	lea    rdx,[rip+0x281c9]        # 3e290 <_IO_stdin_used+0x1290>
   160c7:	push   rax
   160c8:	lea    rax,[rip+0x27fbb]        # 3e08a <_IO_stdin_used+0x108a>
   160cf:	push   rax
   160d0:	lea    rax,[rip+0x27fb8]        # 3e08f <_IO_stdin_used+0x108f>
   160d7:	push   rax
   160d8:	xor    eax,eax
   160da:	call   37c0 <__fprintf_chk@plt>
   160df:	pxor   xmm7,xmm7
   160e3:	add    rsp,0x30
   160e7:	movss  xmm0,DWORD PTR [rip+0x272ad]        # 3d39c <_IO_stdin_used+0x39c>
   160ef:	subss  xmm0,DWORD PTR [rbx+0xa8]
   160f7:	ucomiss xmm0,xmm7
   160fa:	jp     164b5 <WriteAscHMM+0x8b5>
   16100:	jne    164b5 <WriteAscHMM+0x8b5>
   16106:	lea    rcx,[rip+0x2ae71]        # 40f7e <gki_primes+0x4fe>
   1610d:	xor    eax,eax
   1610f:	lea    r8,[rip+0x2ae68]        # 40f7e <gki_primes+0x4fe>
   16116:	mov    esi,0x1
   1611b:	mov    rdi,r12
   1611e:	lea    rdx,[rip+0x27f78]        # 3e09d <_IO_stdin_used+0x109d>
   16125:	call   37c0 <__fprintf_chk@plt>
   1612a:	movss  xmm0,DWORD PTR [rbx+0xa8]
   16132:	pxor   xmm2,xmm2
   16136:	ucomiss xmm0,xmm2
   16139:	jp     164a0 <WriteAscHMM+0x8a0>
   1613f:	jne    164a0 <WriteAscHMM+0x8a0>
   16145:	lea    rcx,[rip+0x2ae32]        # 40f7e <gki_primes+0x4fe>
   1614c:	mov    esi,0x1
   16151:	mov    rdi,r12
   16154:	xor    eax,eax
   16156:	mov    r14d,0x1
   1615c:	lea    rdx,[rip+0x27a41]        # 3dba4 <_IO_stdin_used+0xba4>
   16163:	lea    r13,[rip+0x2ae14]        # 40f7e <gki_primes+0x4fe>
   1616a:	call   37c0 <__fprintf_chk@plt>
   1616f:	movss  xmm7,DWORD PTR [rip+0x27225]        # 3d39c <_IO_stdin_used+0x39c>
   16177:	mov    ecx,DWORD PTR [rbx+0x88]
   1617d:	movss  DWORD PTR [rsp+0xc],xmm7
   16183:	test   ecx,ecx
   16185:	jle    1640e <WriteAscHMM+0x80e>
   1618b:	nop    DWORD PTR [rax+rax*1+0x0]
   16190:	lea    rdx,[rip+0x27f1a]        # 3e0b1 <_IO_stdin_used+0x10b1>
   16197:	mov    ecx,r14d
   1619a:	mov    rdi,r12
   1619d:	xor    eax,eax
   1619f:	mov    esi,0x1
   161a4:	lea    r15,[r14*8+0x0]
   161ac:	xor    ebp,ebp
   161ae:	call   37c0 <__fprintf_chk@plt>
   161b3:	mov    edx,DWORD PTR [rip+0x4c147]        # 62300 <Alphabet_size>
   161b9:	test   edx,edx
   161bb:	jg     161e7 <WriteAscHMM+0x5e7>
   161bd:	jmp    16218 <WriteAscHMM+0x618>
   161bf:	nop
   161c0:	jne    16200 <WriteAscHMM+0x600>
   161c2:	mov    rcx,r13
   161c5:	xor    eax,eax
   161c7:	lea    rdx,[rip+0x27eda]        # 3e0a8 <_IO_stdin_used+0x10a8>
   161ce:	mov    rdi,r12
   161d1:	add    rbp,0x1
   161d5:	mov    esi,0x1
   161da:	call   37c0 <__fprintf_chk@plt>
   161df:	cmp    DWORD PTR [rip+0x4c11b],ebp        # 62300 <Alphabet_size>
   161e5:	jle    16218 <WriteAscHMM+0x618>
   161e7:	mov    rax,QWORD PTR [rbx+0x98]
   161ee:	pxor   xmm3,xmm3
   161f2:	mov    rax,QWORD PTR [rax+r15*1]
   161f6:	movss  xmm0,DWORD PTR [rax+rbp*4]
   161fb:	ucomiss xmm0,xmm3
   161fe:	jnp    161c0 <WriteAscHMM+0x5c0>
   16200:	movss  xmm1,DWORD PTR [rbx+rbp*4+0xe0]
   16209:	call   14b20 <prob2ascii.part.0>
   1620e:	mov    rcx,rax
   16211:	jmp    161c5 <WriteAscHMM+0x5c5>
   16213:	nop    DWORD PTR [rax+rax*1+0x0]
   16218:	lea    rax,[r14*4+0x0]
   16220:	mov    QWORD PTR [rsp],rax
   16224:	test   BYTE PTR [rbx+0x1c9],0x1
   1622b:	jne    16468 <WriteAscHMM+0x868>
   16231:	mov    rsi,r12
   16234:	mov    edi,0xa
   16239:	call   3600 <fputc@plt>
   1623e:	mov    ecx,0x2d
   16243:	test   BYTE PTR [rbx+0x1c8],0x4
   1624a:	je     16255 <WriteAscHMM+0x655>
   1624c:	mov    rax,QWORD PTR [rbx+0x18]
   16250:	movsx  ecx,BYTE PTR [rax+r14*1]
   16255:	lea    rdx,[rip+0x27e5f]        # 3e0bb <_IO_stdin_used+0x10bb>
   1625c:	mov    esi,0x1
   16261:	xor    eax,eax
   16263:	xor    ebp,ebp
   16265:	mov    rdi,r12
   16268:	call   37c0 <__fprintf_chk@plt>
   1626d:	mov    eax,DWORD PTR [rip+0x4c08d]        # 62300 <Alphabet_size>
   16273:	test   eax,eax
   16275:	jg     162a4 <WriteAscHMM+0x6a4>
   16277:	jmp    162e0 <WriteAscHMM+0x6e0>
   16279:	nop    DWORD PTR [rax+0x0]
   16280:	jne    162c9 <WriteAscHMM+0x6c9>
   16282:	xor    eax,eax
   16284:	lea    rdx,[rip+0x27e1d]        # 3e0a8 <_IO_stdin_used+0x10a8>
   1628b:	mov    rdi,r12
   1628e:	add    rbp,0x1
   16292:	mov    esi,0x1
   16297:	call   37c0 <__fprintf_chk@plt>
   1629c:	cmp    DWORD PTR [rip+0x4c05e],ebp        # 62300 <Alphabet_size>
   162a2:	jle    162e0 <WriteAscHMM+0x6e0>
   162a4:	mov    rcx,r13
   162a7:	cmp    DWORD PTR [rbx+0x88],r14d
   162ae:	jle    16282 <WriteAscHMM+0x682>
   162b0:	mov    rax,QWORD PTR [rbx+0xa0]
   162b7:	pxor   xmm4,xmm4
   162bb:	mov    rax,QWORD PTR [rax+r15*1]
   162bf:	movss  xmm0,DWORD PTR [rax+rbp*4]
   162c4:	ucomiss xmm0,xmm4
   162c7:	jnp    16280 <WriteAscHMM+0x680>
   162c9:	movss  xmm1,DWORD PTR [rbx+rbp*4+0xe0]
   162d2:	call   14b20 <prob2ascii.part.0>
   162d7:	mov    rcx,rax
   162da:	jmp    16282 <WriteAscHMM+0x682>
   162dc:	nop    DWORD PTR [rax+0x0]
   162e0:	mov    rsi,r12
   162e3:	mov    edi,0xa
   162e8:	call   3600 <fputc@plt>
   162ed:	mov    ecx,0x2d
   162f2:	test   BYTE PTR [rbx+0x1c8],0x8
   162f9:	je     16304 <WriteAscHMM+0x704>
   162fb:	mov    rax,QWORD PTR [rbx+0x20]
   162ff:	movsx  ecx,BYTE PTR [rax+r14*1]
   16304:	lea    rdx,[rip+0x27db0]        # 3e0bb <_IO_stdin_used+0x10bb>
   1630b:	mov    esi,0x1
   16310:	xor    eax,eax
   16312:	xor    ebp,ebp
   16314:	mov    rdi,r12
   16317:	call   37c0 <__fprintf_chk@plt>
   1631c:	jmp    16342 <WriteAscHMM+0x742>
   1631e:	xchg   ax,ax
   16320:	jne    16367 <WriteAscHMM+0x767>
   16322:	lea    rdx,[rip+0x27d7f]        # 3e0a8 <_IO_stdin_used+0x10a8>
   16329:	mov    rdi,r12
   1632c:	xor    eax,eax
   1632e:	add    rbp,0x4
   16332:	mov    esi,0x1
   16337:	call   37c0 <__fprintf_chk@plt>
   1633c:	cmp    rbp,0x1c
   16340:	je     16380 <WriteAscHMM+0x780>
   16342:	mov    rcx,r13
   16345:	cmp    DWORD PTR [rbx+0x88],r14d
   1634c:	jle    16322 <WriteAscHMM+0x722>
   1634e:	mov    rax,QWORD PTR [rbx+0x90]
   16355:	pxor   xmm5,xmm5
   16359:	mov    rax,QWORD PTR [rax+r15*1]
   1635d:	movss  xmm0,DWORD PTR [rax+rbp*1]
   16362:	ucomiss xmm0,xmm5
   16365:	jnp    16320 <WriteAscHMM+0x720>
   16367:	movss  xmm1,DWORD PTR [rip+0x2702d]        # 3d39c <_IO_stdin_used+0x39c>
   1636f:	call   14b20 <prob2ascii.part.0>
   16374:	mov    rcx,rax
   16377:	jmp    16322 <WriteAscHMM+0x722>
   16379:	nop    DWORD PTR [rax+0x0]
   16380:	mov    rax,QWORD PTR [rbx+0xd0]
   16387:	mov    rdx,QWORD PTR [rsp]
   1638b:	pxor   xmm7,xmm7
   1638f:	movss  xmm0,DWORD PTR [rax+rdx*1]
   16394:	ucomiss xmm0,xmm7
   16397:	jp     16450 <WriteAscHMM+0x850>
   1639d:	jne    16450 <WriteAscHMM+0x850>
   163a3:	mov    rcx,r13
   163a6:	lea    rdx,[rip+0x27cfb]        # 3e0a8 <_IO_stdin_used+0x10a8>
   163ad:	xor    eax,eax
   163af:	mov    esi,0x1
   163b4:	mov    rdi,r12
   163b7:	call   37c0 <__fprintf_chk@plt>
   163bc:	mov    rax,QWORD PTR [rbx+0xd8]
   163c3:	mov    rdx,QWORD PTR [rsp]
   163c7:	pxor   xmm6,xmm6
   163cb:	movss  xmm0,DWORD PTR [rax+rdx*1]
   163d0:	ucomiss xmm0,xmm6
   163d3:	jp     16438 <WriteAscHMM+0x838>
   163d5:	jne    16438 <WriteAscHMM+0x838>
   163d7:	mov    rcx,r13
   163da:	lea    rdx,[rip+0x27cc7]        # 3e0a8 <_IO_stdin_used+0x10a8>
   163e1:	mov    rdi,r12
   163e4:	xor    eax,eax
   163e6:	add    r14,0x1
   163ea:	mov    esi,0x1
   163ef:	call   37c0 <__fprintf_chk@plt>
   163f4:	mov    rsi,r12
   163f7:	mov    edi,0xa
   163fc:	call   3600 <fputc@plt>
   16401:	cmp    DWORD PTR [rbx+0x88],r14d
   16408:	jge    16190 <WriteAscHMM+0x590>
   1640e:	add    rsp,0x18
   16412:	mov    rcx,r12
   16415:	mov    edx,0x3
   1641a:	mov    esi,0x1
   1641f:	pop    rbx
   16420:	lea    rdi,[rip+0x27c86]        # 3e0ad <_IO_stdin_used+0x10ad>
   16427:	pop    rbp
   16428:	pop    r12
   1642a:	pop    r13
   1642c:	pop    r14
   1642e:	pop    r15
   16430:	jmp    37b0 <fwrite@plt>
   16435:	nop    DWORD PTR [rax]
   16438:	movss  xmm1,DWORD PTR [rip+0x26f5c]        # 3d39c <_IO_stdin_used+0x39c>
   16440:	call   14b20 <prob2ascii.part.0>
   16445:	mov    rcx,rax
   16448:	jmp    163da <WriteAscHMM+0x7da>
   1644a:	nop    WORD PTR [rax+rax*1+0x0]
   16450:	movss  xmm1,DWORD PTR [rsp+0xc]
   16456:	call   14b20 <prob2ascii.part.0>
   1645b:	mov    rcx,rax
   1645e:	jmp    163a6 <WriteAscHMM+0x7a6>
   16463:	nop    DWORD PTR [rax+rax*1+0x0]
   16468:	mov    rax,QWORD PTR [rbx+0x48]
   1646c:	lea    rdx,[rip+0x27c44]        # 3e0b7 <_IO_stdin_used+0x10b7>
   16473:	mov    esi,0x1
   16478:	mov    rdi,r12
   1647b:	mov    ecx,DWORD PTR [rax+r14*4]
   1647f:	xor    eax,eax
   16481:	call   37c0 <__fprintf_chk@plt>
   16486:	jmp    16231 <WriteAscHMM+0x631>
   1648b:	movss  xmm1,DWORD PTR [rip+0x26f09]        # 3d39c <_IO_stdin_used+0x39c>
   16493:	call   14b20 <prob2ascii.part.0>
   16498:	mov    rcx,rax
   1649b:	jmp    15ee5 <WriteAscHMM+0x2e5>
   164a0:	movss  xmm1,DWORD PTR [rip+0x26ef4]        # 3d39c <_IO_stdin_used+0x39c>
   164a8:	call   14b20 <prob2ascii.part.0>
   164ad:	mov    rcx,rax
   164b0:	jmp    1614c <WriteAscHMM+0x54c>
   164b5:	movss  xmm1,DWORD PTR [rip+0x26edf]        # 3d39c <_IO_stdin_used+0x39c>
   164bd:	call   14b20 <prob2ascii.part.0>
   164c2:	mov    rcx,rax
   164c5:	jmp    1610d <WriteAscHMM+0x50d>
   164ca:	movss  xmm1,DWORD PTR [rip+0x26eca]        # 3d39c <_IO_stdin_used+0x39c>
   164d2:	call   14b20 <prob2ascii.part.0>
   164d7:	mov    rcx,rax
   164da:	jmp    15f25 <WriteAscHMM+0x325>
   164df:	pxor   xmm0,xmm0
   164e3:	pxor   xmm1,xmm1
   164e7:	mov    esi,0x1
   164ec:	mov    rdi,r12
   164ef:	lea    rdx,[rip+0x2c89f]        # 42d95 <cof.6115+0x595>
   164f6:	mov    eax,0x2
   164fb:	cvtss2sd xmm0,DWORD PTR [rbx+0x80]
   16503:	cvtss2sd xmm1,DWORD PTR [rbx+0x84]
   1650b:	call   37c0 <__fprintf_chk@plt>
   16510:	jmp    15e04 <WriteAscHMM+0x204>
   16515:	pxor   xmm0,xmm0
   16519:	pxor   xmm1,xmm1
   1651d:	mov    esi,0x1
   16522:	mov    rdi,r12
   16525:	lea    rdx,[rip+0x27b20]        # 3e04c <_IO_stdin_used+0x104c>
   1652c:	mov    eax,0x2
   16531:	cvtss2sd xmm0,DWORD PTR [rbx+0x1c0]
   16539:	cvtss2sd xmm1,DWORD PTR [rbx+0x1c4]
   16541:	call   37c0 <__fprintf_chk@plt>
   16546:	jmp    1601a <WriteAscHMM+0x41a>
   1654b:	pxor   xmm0,xmm0
   1654f:	pxor   xmm1,xmm1
   16553:	mov    esi,0x1
   16558:	mov    rdi,r12
   1655b:	mov    eax,0x2
   16560:	cvtss2sd xmm0,DWORD PTR [rbx+0x78]
   16565:	cvtss2sd xmm1,DWORD PTR [rbx+0x7c]
   1656a:	lea    rdx,[rip+0x2c84b]        # 42dbc <cof.6115+0x5bc>
   16571:	call   37c0 <__fprintf_chk@plt>
   16576:	mov    eax,DWORD PTR [rbx+0x1c8]
   1657c:	jmp    15dfb <WriteAscHMM+0x1fb>
   16581:	pxor   xmm0,xmm0
   16585:	pxor   xmm1,xmm1
   16589:	mov    esi,0x1
   1658e:	mov    rdi,r12
   16591:	mov    eax,0x2
   16596:	cvtss2sd xmm0,DWORD PTR [rbx+0x70]
   1659b:	cvtss2sd xmm1,DWORD PTR [rbx+0x74]
   165a0:	lea    rdx,[rip+0x2c7c7]        # 42d6e <cof.6115+0x56e>
   165a7:	call   37c0 <__fprintf_chk@plt>
   165ac:	mov    eax,DWORD PTR [rbx+0x1c8]
   165b2:	jmp    15df2 <WriteAscHMM+0x1f2>
   165b7:	mov    rcx,QWORD PTR [rbx+0x10]
   165bb:	lea    rdx,[rip+0x27a0d]        # 3dfcf <_IO_stdin_used+0xfcf>
   165c2:	mov    rdi,r12
   165c5:	xor    eax,eax
   165c7:	mov    esi,0x1
   165cc:	call   37c0 <__fprintf_chk@plt>
   165d1:	jmp    15c62 <WriteAscHMM+0x62>
   165d6:	mov    rcx,QWORD PTR [rbx+0x8]
   165da:	lea    rdx,[rip+0x279e4]        # 3dfc5 <_IO_stdin_used+0xfc5>
   165e1:	mov    rdi,r12
   165e4:	xor    eax,eax
   165e6:	mov    esi,0x1
   165eb:	call   37c0 <__fprintf_chk@plt>
   165f0:	mov    eax,DWORD PTR [rbx+0x1c8]
   165f6:	jmp    15c5a <WriteAscHMM+0x5a>
   165fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000016600 <WriteBinHMM>:
   16600:	endbr64 
   16604:	push   r13
   16606:	mov    rcx,rdi
   16609:	mov    edx,0x1
   1660e:	push   r12
   16610:	push   rbp
   16611:	mov    rbp,rdi
   16614:	lea    rdi,[rip+0x369f5]        # 4d010 <v20magic>
   1661b:	push   rbx
   1661c:	mov    rbx,rsi
   1661f:	mov    esi,0x4
   16624:	sub    rsp,0x8
   16628:	call   37b0 <fwrite@plt>
   1662d:	lea    rdi,[rbx+0x1c8]
   16634:	mov    rcx,rbp
   16637:	mov    edx,0x1
   1663c:	mov    esi,0x4
   16641:	call   37b0 <fwrite@plt>
   16646:	mov    rsi,QWORD PTR [rbx]
   16649:	mov    rdi,rbp
   1664c:	call   14b60 <write_bin_string>
   16651:	mov    eax,DWORD PTR [rbx+0x1c8]
   16657:	test   ah,0x2
   1665a:	jne    168d8 <WriteBinHMM+0x2d8>
   16660:	test   al,0x2
   16662:	jne    168f2 <WriteBinHMM+0x2f2>
   16668:	lea    rdi,[rbx+0x88]
   1666f:	mov    rcx,rbp
   16672:	mov    edx,0x1
   16677:	mov    esi,0x4
   1667c:	call   37b0 <fwrite@plt>
   16681:	mov    rcx,rbp
   16684:	mov    edx,0x1
   16689:	mov    esi,0x4
   1668e:	lea    rdi,[rip+0x4b9eb]        # 62080 <Alphabet_type>
   16695:	call   37b0 <fwrite@plt>
   1669a:	mov    eax,DWORD PTR [rbx+0x1c8]
   166a0:	test   al,0x4
   166a2:	jne    16a50 <WriteBinHMM+0x450>
   166a8:	test   al,0x8
   166aa:	jne    16a28 <WriteBinHMM+0x428>
   166b0:	test   ah,0x1
   166b3:	jne    16a00 <WriteBinHMM+0x400>
   166b9:	mov    rsi,QWORD PTR [rbx+0x30]
   166bd:	mov    rdi,rbp
   166c0:	call   14b60 <write_bin_string>
   166c5:	mov    rcx,rbp
   166c8:	mov    edx,0x1
   166cd:	lea    rdi,[rbx+0x38]
   166d1:	mov    esi,0x4
   166d6:	call   37b0 <fwrite@plt>
   166db:	mov    rsi,QWORD PTR [rbx+0x40]
   166df:	mov    rdi,rbp
   166e2:	call   14b60 <write_bin_string>
   166e7:	lea    rdi,[rbx+0x50]
   166eb:	mov    rcx,rbp
   166ee:	mov    edx,0x1
   166f3:	mov    esi,0x4
   166f8:	call   37b0 <fwrite@plt>
   166fd:	mov    eax,DWORD PTR [rbx+0x1c8]
   16703:	test   ah,0x4
   16706:	jne    169c0 <WriteBinHMM+0x3c0>
   1670c:	test   ah,0x8
   1670f:	jne    16980 <WriteBinHMM+0x380>
   16715:	test   ah,0x10
   16718:	jne    16940 <WriteBinHMM+0x340>
   1671e:	lea    r12,[rbx+0xac]
   16725:	lea    r13,[rbx+0xcc]
   1672c:	mov    rdi,r12
   1672f:	mov    rcx,rbp
   16732:	mov    edx,0x2
   16737:	mov    esi,0x4
   1673c:	call   37b0 <fwrite@plt>
   16741:	add    r12,0x8
   16745:	cmp    r13,r12
   16748:	jne    1672c <WriteBinHMM+0x12c>
   1674a:	lea    rdi,[rbx+0x130]
   16751:	mov    rcx,rbp
   16754:	mov    edx,0x1
   16759:	mov    esi,0x4
   1675e:	call   37b0 <fwrite@plt>
   16763:	movsxd rdx,DWORD PTR [rip+0x4bb96]        # 62300 <Alphabet_size>
   1676a:	mov    rcx,rbp
   1676d:	lea    rdi,[rbx+0xe0]
   16774:	mov    esi,0x4
   16779:	call   37b0 <fwrite@plt>
   1677e:	test   BYTE PTR [rbx+0x1c8],0x80
   16785:	jne    16908 <WriteBinHMM+0x308>
   1678b:	lea    rdi,[rbx+0xa8]
   16792:	mov    rcx,rbp
   16795:	mov    edx,0x1
   1679a:	mov    esi,0x4
   1679f:	call   37b0 <fwrite@plt>
   167a4:	mov    eax,DWORD PTR [rbx+0x88]
   167aa:	mov    rcx,rbp
   167ad:	mov    rdi,QWORD PTR [rbx+0xd0]
   167b4:	mov    esi,0x4
   167b9:	lea    edx,[rax+0x1]
   167bc:	movsxd rdx,edx
   167bf:	call   37b0 <fwrite@plt>
   167c4:	mov    eax,DWORD PTR [rbx+0x88]
   167ca:	mov    rcx,rbp
   167cd:	mov    rdi,QWORD PTR [rbx+0xd8]
   167d4:	mov    esi,0x4
   167d9:	lea    edx,[rax+0x1]
   167dc:	movsxd rdx,edx
   167df:	call   37b0 <fwrite@plt>
   167e4:	mov    eax,DWORD PTR [rbx+0x88]
   167ea:	test   eax,eax
   167ec:	jle    168c6 <WriteBinHMM+0x2c6>
   167f2:	mov    r13d,0x8
   167f8:	mov    r12d,0x1
   167fe:	xchg   ax,ax
   16800:	mov    rax,QWORD PTR [rbx+0x98]
   16807:	movsxd rdx,DWORD PTR [rip+0x4baf2]        # 62300 <Alphabet_size>
   1680e:	mov    rcx,rbp
   16811:	add    r12d,0x1
   16815:	mov    esi,0x4
   1681a:	mov    rdi,QWORD PTR [rax+r13*1]
   1681e:	add    r13,0x8
   16822:	call   37b0 <fwrite@plt>
   16827:	mov    eax,DWORD PTR [rbx+0x88]
   1682d:	cmp    eax,r12d
   16830:	jge    16800 <WriteBinHMM+0x200>
   16832:	cmp    eax,0x1
   16835:	jle    168c6 <WriteBinHMM+0x2c6>
   1683b:	mov    r13d,0x8
   16841:	mov    r12d,0x1
   16847:	nop    WORD PTR [rax+rax*1+0x0]
   16850:	mov    rax,QWORD PTR [rbx+0xa0]
   16857:	movsxd rdx,DWORD PTR [rip+0x4baa2]        # 62300 <Alphabet_size>
   1685e:	mov    rcx,rbp
   16861:	add    r12d,0x1
   16865:	mov    esi,0x4
   1686a:	mov    rdi,QWORD PTR [rax+r13*1]
   1686e:	add    r13,0x8
   16872:	call   37b0 <fwrite@plt>
   16877:	mov    eax,DWORD PTR [rbx+0x88]
   1687d:	cmp    eax,r12d
   16880:	jg     16850 <WriteBinHMM+0x250>
   16882:	cmp    eax,0x1
   16885:	jle    168c6 <WriteBinHMM+0x2c6>
   16887:	mov    r13d,0x8
   1688d:	mov    r12d,0x1
   16893:	nop    DWORD PTR [rax+rax*1+0x0]
   16898:	mov    rax,QWORD PTR [rbx+0x90]
   1689f:	mov    rcx,rbp
   168a2:	mov    edx,0x7
   168a7:	mov    esi,0x4
   168ac:	add    r12d,0x1
   168b0:	mov    rdi,QWORD PTR [rax+r13*1]
   168b4:	add    r13,0x8
   168b8:	call   37b0 <fwrite@plt>
   168bd:	cmp    DWORD PTR [rbx+0x88],r12d
   168c4:	jg     16898 <WriteBinHMM+0x298>
   168c6:	add    rsp,0x8
   168ca:	pop    rbx
   168cb:	pop    rbp
   168cc:	pop    r12
   168ce:	pop    r13
   168d0:	ret    
   168d1:	nop    DWORD PTR [rax+0x0]
   168d8:	mov    rsi,QWORD PTR [rbx+0x8]
   168dc:	mov    rdi,rbp
   168df:	call   14b60 <write_bin_string>
   168e4:	mov    eax,DWORD PTR [rbx+0x1c8]
   168ea:	test   al,0x2
   168ec:	je     16668 <WriteBinHMM+0x68>
   168f2:	mov    rsi,QWORD PTR [rbx+0x10]
   168f6:	mov    rdi,rbp
   168f9:	call   14b60 <write_bin_string>
   168fe:	jmp    16668 <WriteBinHMM+0x68>
   16903:	nop    DWORD PTR [rax+rax*1+0x0]
   16908:	lea    rdi,[rbx+0x1c0]
   1690f:	mov    rcx,rbp
   16912:	mov    edx,0x1
   16917:	mov    esi,0x4
   1691c:	call   37b0 <fwrite@plt>
   16921:	lea    rdi,[rbx+0x1c4]
   16928:	mov    rcx,rbp
   1692b:	mov    edx,0x1
   16930:	mov    esi,0x4
   16935:	call   37b0 <fwrite@plt>
   1693a:	jmp    1678b <WriteBinHMM+0x18b>
   1693f:	nop
   16940:	lea    rdi,[rbx+0x80]
   16947:	mov    rcx,rbp
   1694a:	mov    edx,0x1
   1694f:	mov    esi,0x4
   16954:	call   37b0 <fwrite@plt>
   16959:	lea    rdi,[rbx+0x84]
   16960:	mov    rcx,rbp
   16963:	mov    edx,0x1
   16968:	mov    esi,0x4
   1696d:	call   37b0 <fwrite@plt>
   16972:	jmp    1671e <WriteBinHMM+0x11e>
   16977:	nop    WORD PTR [rax+rax*1+0x0]
   16980:	lea    rdi,[rbx+0x78]
   16984:	mov    rcx,rbp
   16987:	mov    edx,0x1
   1698c:	mov    esi,0x4
   16991:	call   37b0 <fwrite@plt>
   16996:	lea    rdi,[rbx+0x7c]
   1699a:	mov    rcx,rbp
   1699d:	mov    edx,0x1
   169a2:	mov    esi,0x4
   169a7:	call   37b0 <fwrite@plt>
   169ac:	mov    eax,DWORD PTR [rbx+0x1c8]
   169b2:	jmp    16715 <WriteBinHMM+0x115>
   169b7:	nop    WORD PTR [rax+rax*1+0x0]
   169c0:	lea    rdi,[rbx+0x70]
   169c4:	mov    rcx,rbp
   169c7:	mov    edx,0x1
   169cc:	mov    esi,0x4
   169d1:	call   37b0 <fwrite@plt>
   169d6:	lea    rdi,[rbx+0x74]
   169da:	mov    rcx,rbp
   169dd:	mov    edx,0x1
   169e2:	mov    esi,0x4
   169e7:	call   37b0 <fwrite@plt>
   169ec:	mov    eax,DWORD PTR [rbx+0x1c8]
   169f2:	jmp    1670c <WriteBinHMM+0x10c>
   169f7:	nop    WORD PTR [rax+rax*1+0x0]
   16a00:	mov    eax,DWORD PTR [rbx+0x88]
   16a06:	mov    rdi,QWORD PTR [rbx+0x48]
   16a0a:	mov    rcx,rbp
   16a0d:	mov    esi,0x4
   16a12:	lea    edx,[rax+0x1]
   16a15:	movsxd rdx,edx
   16a18:	call   37b0 <fwrite@plt>
   16a1d:	jmp    166b9 <WriteBinHMM+0xb9>
   16a22:	nop    WORD PTR [rax+rax*1+0x0]
   16a28:	mov    eax,DWORD PTR [rbx+0x88]
   16a2e:	mov    rdi,QWORD PTR [rbx+0x20]
   16a32:	mov    rcx,rbp
   16a35:	mov    esi,0x1
   16a3a:	lea    edx,[rax+0x1]
   16a3d:	movsxd rdx,edx
   16a40:	call   37b0 <fwrite@plt>
   16a45:	mov    eax,DWORD PTR [rbx+0x1c8]
   16a4b:	jmp    166b0 <WriteBinHMM+0xb0>
   16a50:	mov    eax,DWORD PTR [rbx+0x88]
   16a56:	mov    rdi,QWORD PTR [rbx+0x18]
   16a5a:	mov    rcx,rbp
   16a5d:	mov    esi,0x1
   16a62:	lea    edx,[rax+0x1]
   16a65:	movsxd rdx,edx
   16a68:	call   37b0 <fwrite@plt>
   16a6d:	mov    eax,DWORD PTR [rbx+0x1c8]
   16a73:	jmp    166a8 <WriteBinHMM+0xa8>
   16a78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000016a80 <hmmcalibrate>:
   16a80:	endbr64 
   16a84:	push   r15
   16a86:	push   r14
   16a88:	xor    r14d,r14d
   16a8b:	push   r13
   16a8d:	lea    r13,[rip+0x2783f]        # 3e2d3 <_IO_stdin_used+0x12d3>
   16a94:	push   r12
   16a96:	push   rbp
   16a97:	push   rbx
   16a98:	sub    rsp,0x138
   16a9f:	mov    DWORD PTR [rsp+0x24],edi
   16aa3:	xor    edi,edi
   16aa5:	lea    r12,[rsp+0xb0]
   16aad:	lea    rbp,[rsp+0xc8]
   16ab5:	mov    QWORD PTR [rsp+0x28],rsi
   16aba:	lea    rbx,[rsp+0xc0]
   16ac2:	mov    rax,QWORD PTR fs:0x28
   16acb:	mov    QWORD PTR [rsp+0x128],rax
   16ad3:	xor    eax,eax
   16ad5:	call   3690 <time@plt>
   16ada:	movss  xmm6,DWORD PTR [rip+0x27c22]        # 3e704 <_IO_stdin_used+0x1704>
   16ae2:	movss  xmm7,DWORD PTR [rip+0x27c1e]        # 3e708 <_IO_stdin_used+0x1708>
   16aea:	mov    DWORD PTR [rsp+0x54],0x0
   16af2:	mov    DWORD PTR [rsp+0x8c],eax
   16af9:	mov    DWORD PTR [rsp+0x70],0x0
   16b01:	mov    DWORD PTR [rsp+0x44],0x0
   16b09:	mov    DWORD PTR [rsp+0x40],0x1388
   16b11:	movss  DWORD PTR [rsp+0x88],xmm6
   16b1a:	movss  DWORD PTR [rsp+0x74],xmm7
   16b20:	push   rbp
   16b21:	mov    r9,r12
   16b24:	lea    r8,[rip+0x366d5]        # 4d200 <usage>
   16b2b:	mov    ecx,0x9
   16b30:	push   rbx
   16b31:	mov    rsi,QWORD PTR [rsp+0x38]
   16b36:	lea    rdx,[rip+0x367a3]        # 4d2e0 <OPTIONS>
   16b3d:	mov    edi,DWORD PTR [rsp+0x34]
   16b41:	call   278d0 <Getopt>
   16b46:	pop    r9
   16b48:	pop    r10
   16b4a:	test   eax,eax
   16b4c:	je     16d08 <hmmcalibrate+0x288>
   16b52:	mov    rdx,QWORD PTR [rsp+0xc0]
   16b5a:	mov    ecx,0x6
   16b5f:	mov    rdi,r13
   16b62:	mov    rsi,rdx
   16b65:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16b67:	seta   al
   16b6a:	sbb    al,0x0
   16b6c:	test   al,al
   16b6e:	je     16bb8 <hmmcalibrate+0x138>
   16b70:	mov    ecx,0x8
   16b75:	mov    rsi,rdx
   16b78:	lea    rdi,[rip+0x2775a]        # 3e2d9 <_IO_stdin_used+0x12d9>
   16b7f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16b81:	seta   al
   16b84:	sbb    al,0x0
   16b86:	test   al,al
   16b88:	je     16cc0 <hmmcalibrate+0x240>
   16b8e:	mov    ecx,0xb
   16b93:	mov    rsi,rdx
   16b96:	lea    rdi,[rip+0x27744]        # 3e2e1 <_IO_stdin_used+0x12e1>
   16b9d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16b9f:	seta   al
   16ba2:	sbb    al,0x0
   16ba4:	test   al,al
   16ba6:	jne    16bd8 <hmmcalibrate+0x158>
   16ba8:	mov    r14,QWORD PTR [rsp+0xc8]
   16bb0:	jmp    16b20 <hmmcalibrate+0xa0>
   16bb5:	nop    DWORD PTR [rax]
   16bb8:	mov    rdi,QWORD PTR [rsp+0xc8]
   16bc0:	mov    edx,0xa
   16bc5:	xor    esi,esi
   16bc7:	call   3670 <strtol@plt>
   16bcc:	mov    DWORD PTR [rsp+0x54],eax
   16bd0:	jmp    16b20 <hmmcalibrate+0xa0>
   16bd5:	nop    DWORD PTR [rax]
   16bd8:	mov    ecx,0x7
   16bdd:	mov    rsi,rdx
   16be0:	lea    rdi,[rip+0x27705]        # 3e2ec <_IO_stdin_used+0x12ec>
   16be7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16be9:	seta   al
   16bec:	sbb    al,0x0
   16bee:	test   al,al
   16bf0:	je     16ce0 <hmmcalibrate+0x260>
   16bf6:	mov    ecx,0x6
   16bfb:	lea    rdi,[rip+0x276f1]        # 3e2f3 <_IO_stdin_used+0x12f3>
   16c02:	mov    rsi,rdx
   16c05:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16c07:	seta   al
   16c0a:	sbb    al,0x0
   16c0c:	test   al,al
   16c0e:	je     17140 <hmmcalibrate+0x6c0>
   16c14:	mov    ecx,0x6
   16c19:	lea    rdi,[rip+0x276d9]        # 3e2f9 <_IO_stdin_used+0x12f9>
   16c20:	mov    rsi,rdx
   16c23:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16c25:	seta   al
   16c28:	sbb    al,0x0
   16c2a:	test   al,al
   16c2c:	je     17130 <hmmcalibrate+0x6b0>
   16c32:	mov    ecx,0x5
   16c37:	lea    rdi,[rip+0x276c1]        # 3e2ff <_IO_stdin_used+0x12ff>
   16c3e:	mov    rsi,rdx
   16c41:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16c43:	seta   al
   16c46:	sbb    al,0x0
   16c48:	test   al,al
   16c4a:	je     17678 <hmmcalibrate+0xbf8>
   16c50:	mov    ecx,0x7
   16c55:	lea    rdi,[rip+0x276a8]        # 3e304 <_IO_stdin_used+0x1304>
   16c5c:	mov    rsi,rdx
   16c5f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   16c61:	seta   al
   16c64:	sbb    al,0x0
   16c66:	test   al,al
   16c68:	je     176a0 <hmmcalibrate+0xc20>
   16c6e:	cmp    BYTE PTR [rdx],0x2d
   16c71:	jne    16b20 <hmmcalibrate+0xa0>
   16c77:	cmp    BYTE PTR [rdx+0x1],0x68
   16c7b:	jne    16b20 <hmmcalibrate+0xa0>
   16c81:	cmp    BYTE PTR [rdx+0x2],0x0
   16c85:	jne    16b20 <hmmcalibrate+0xa0>
   16c8b:	mov    rdi,QWORD PTR [rip+0x3766e]        # 4e300 <stdout@@GLIBC_2.2.5>
   16c92:	lea    rsi,[rip+0x36607]        # 4d2a0 <banner>
   16c99:	call   18700 <HMMERBanner>
   16c9e:	lea    rdi,[rip+0x3655b]        # 4d200 <usage>
   16ca5:	call   34f0 <puts@plt>
   16caa:	lea    rdi,[rip+0x3636f]        # 4d020 <experts>
   16cb1:	call   34f0 <puts@plt>
   16cb6:	xor    edi,edi
   16cb8:	call   37a0 <exit@plt>
   16cbd:	nop    DWORD PTR [rax]
   16cc0:	mov    rdi,QWORD PTR [rsp+0xc8]
   16cc8:	mov    edx,0xa
   16ccd:	xor    esi,esi
   16ccf:	call   3670 <strtol@plt>
   16cd4:	mov    DWORD PTR [rsp+0x44],eax
   16cd8:	jmp    16b20 <hmmcalibrate+0xa0>
   16cdd:	nop    DWORD PTR [rax]
   16ce0:	mov    rdi,QWORD PTR [rsp+0xc8]
   16ce8:	xor    esi,esi
   16cea:	call   3510 <strtod@plt>
   16cef:	pxor   xmm5,xmm5
   16cf3:	cvtsd2ss xmm5,xmm0
   16cf7:	movss  DWORD PTR [rsp+0x74],xmm5
   16cfd:	jmp    16b20 <hmmcalibrate+0xa0>
   16d02:	nop    WORD PTR [rax+rax*1+0x0]
   16d08:	movsxd rax,DWORD PTR [rsp+0xb0]
   16d10:	mov    edx,DWORD PTR [rsp+0x24]
   16d14:	sub    edx,eax
   16d16:	cmp    edx,0x1
   16d19:	je     16d38 <hmmcalibrate+0x2b8>
   16d1b:	xor    eax,eax
   16d1d:	lea    rsi,[rip+0x364dc]        # 4d200 <usage>
   16d24:	lea    rdi,[rip+0x276ed]        # 3e418 <_IO_stdin_used+0x1418>
   16d2b:	call   317f0 <Die>
   16d30:	movsxd rax,DWORD PTR [rsp+0xb0]
   16d38:	mov    rcx,QWORD PTR [rsp+0x28]
   16d3d:	lea    edx,[rax+0x1]
   16d40:	mov    r8d,DWORD PTR [rsp+0x70]
   16d45:	mov    DWORD PTR [rsp+0xb0],edx
   16d4c:	mov    rax,QWORD PTR [rcx+rax*8]
   16d50:	mov    QWORD PTR [rsp+0x90],rax
   16d58:	test   r8d,r8d
   16d5b:	jne    17618 <hmmcalibrate+0xb98>
   16d61:	mov    edi,DWORD PTR [rsp+0x54]
   16d65:	test   edi,edi
   16d67:	jne    17632 <hmmcalibrate+0xbb2>
   16d6d:	mov    rdi,QWORD PTR [rsp+0x90]
   16d75:	xor    esi,esi
   16d77:	call   15570 <HMMFileOpen>
   16d7c:	mov    QWORD PTR [rsp+0x68],rax
   16d81:	test   rax,rax
   16d84:	je     176d4 <hmmcalibrate+0xc54>
   16d8a:	mov    QWORD PTR [rsp+0x80],0x0
   16d96:	test   r14,r14
   16d99:	je     16dbb <hmmcalibrate+0x33b>
   16d9b:	lea    rsi,[rip+0x2b1d8]        # 41f7a <CSWTCH.18+0x8ba>
   16da2:	mov    rdi,r14
   16da5:	call   3750 <fopen@plt>
   16daa:	mov    QWORD PTR [rsp+0x80],rax
   16db2:	test   rax,rax
   16db5:	je     176c0 <hmmcalibrate+0xc40>
   16dbb:	mov    rbx,QWORD PTR [rsp+0x90]
   16dc3:	mov    rdi,rbx
   16dc6:	call   3560 <strlen@plt>
   16dcb:	mov    esi,0x109
   16dd0:	lea    rdi,[rip+0x27534]        # 3e30b <_IO_stdin_used+0x130b>
   16dd7:	lea    rdx,[rax+0x5]
   16ddb:	call   36810 <sre_malloc>
   16de0:	mov    rsi,rbx
   16de3:	mov    rdi,rax
   16de6:	mov    rbx,rax
   16de9:	mov    QWORD PTR [rsp+0xa0],rax
   16df1:	call   3550 <stpcpy@plt>
   16df6:	mov    rdi,rbx
   16df9:	mov    DWORD PTR [rax],0x77656e2e
   16dff:	mov    BYTE PTR [rax+0x4],0x0
   16e03:	call   278a0 <FileExists>
   16e08:	test   eax,eax
   16e0a:	jne    17648 <hmmcalibrate+0xbc8>
   16e10:	mov    rax,QWORD PTR [rsp+0x68]
   16e15:	lea    rdx,[rip+0x274a8]        # 3e2c4 <_IO_stdin_used+0x12c4>
   16e1c:	mov    rdi,QWORD PTR [rip+0x374dd]        # 4e300 <stdout@@GLIBC_2.2.5>
   16e23:	mov    esi,DWORD PTR [rax+0x18]
   16e26:	lea    rax,[rip+0x2b14d]        # 41f7a <CSWTCH.18+0x8ba>
   16e2d:	test   esi,esi
   16e2f:	lea    rsi,[rip+0x3646a]        # 4d2a0 <banner>
   16e36:	cmovne rax,rdx
   16e3a:	mov    QWORD PTR [rsp+0xa8],rax
   16e42:	call   18700 <HMMERBanner>
   16e47:	mov    rdx,QWORD PTR [rsp+0x90]
   16e4f:	lea    rsi,[rip+0x274c4]        # 3e31a <_IO_stdin_used+0x131a>
   16e56:	xor    eax,eax
   16e58:	mov    edi,0x1
   16e5d:	call   3710 <__printf_chk@plt>
   16e62:	mov    edx,DWORD PTR [rsp+0x44]
   16e66:	test   edx,edx
   16e68:	jne    17160 <hmmcalibrate+0x6e0>
   16e6e:	lea    rsi,[rip+0x276bb]        # 3e530 <_IO_stdin_used+0x1530>
   16e75:	mov    edi,0x1
   16e7a:	pxor   xmm0,xmm0
   16e7e:	mov    eax,0x1
   16e83:	cvtss2sd xmm0,DWORD PTR [rsp+0x74]
   16e89:	call   3710 <__printf_chk@plt>
   16e8e:	pxor   xmm0,xmm0
   16e92:	lea    rsi,[rip+0x276b7]        # 3e550 <_IO_stdin_used+0x1550>
   16e99:	mov    edi,0x1
   16e9e:	mov    eax,0x1
   16ea3:	cvtss2sd xmm0,DWORD PTR [rsp+0x88]
   16eac:	call   3710 <__printf_chk@plt>
   16eb1:	mov    edx,DWORD PTR [rsp+0x40]
   16eb5:	lea    rsi,[rip+0x2749a]        # 3e356 <_IO_stdin_used+0x1356>
   16ebc:	mov    edi,0x1
   16ec1:	xor    eax,eax
   16ec3:	call   3710 <__printf_chk@plt>
   16ec8:	mov    edx,DWORD PTR [rsp+0x8c]
   16ecf:	lea    rsi,[rip+0x2749e]        # 3e374 <_IO_stdin_used+0x1374>
   16ed6:	xor    eax,eax
   16ed8:	mov    edi,0x1
   16edd:	call   3710 <__printf_chk@plt>
   16ee2:	test   r14,r14
   16ee5:	mov    edi,0x1
   16eea:	lea    rax,[rip+0x273d6]        # 3e2c7 <_IO_stdin_used+0x12c7>
   16ef1:	cmove  r14,rax
   16ef5:	lea    rsi,[rip+0x27496]        # 3e392 <_IO_stdin_used+0x1392>
   16efc:	xor    eax,eax
   16efe:	mov    rdx,r14
   16f01:	call   3710 <__printf_chk@plt>
   16f06:	mov    ecx,DWORD PTR [rsp+0x70]
   16f0a:	test   ecx,ecx
   16f0c:	jne    17600 <hmmcalibrate+0xb80>
   16f12:	mov    eax,DWORD PTR [rsp+0x54]
   16f16:	test   eax,eax
   16f18:	jle    16f2f <hmmcalibrate+0x4af>
   16f1a:	mov    edx,eax
   16f1c:	lea    rsi,[rip+0x2748d]        # 3e3b0 <_IO_stdin_used+0x13b0>
   16f23:	mov    edi,0x1
   16f28:	xor    eax,eax
   16f2a:	call   3710 <__printf_chk@plt>
   16f2f:	lea    rdi,[rip+0x2872a]        # 3f660 <xpam120+0x900>
   16f36:	call   34f0 <puts@plt>
   16f3b:	mov    edx,0x190
   16f40:	mov    esi,0x134
   16f45:	lea    rdi,[rip+0x273bf]        # 3e30b <_IO_stdin_used+0x130b>
   16f4c:	call   36810 <sre_malloc>
   16f51:	mov    edx,0x190
   16f56:	mov    esi,0x135
   16f5b:	lea    rdi,[rip+0x273a9]        # 3e30b <_IO_stdin_used+0x130b>
   16f62:	mov    QWORD PTR [rsp+0x58],rax
   16f67:	call   36810 <sre_malloc>
   16f6c:	mov    QWORD PTR [rsp+0x30],0x0
   16f75:	mov    QWORD PTR [rsp+0x60],rax
   16f7a:	lea    rax,[rsp+0xb8]
   16f82:	mov    QWORD PTR [rsp+0x78],rax
   16f87:	lea    rax,[rsp+0xb4]
   16f8f:	mov    QWORD PTR [rsp+0x98],rax
   16f97:	nop    WORD PTR [rax+rax*1+0x0]
   16fa0:	mov    rax,QWORD PTR [rsp+0x30]
   16fa5:	mov    rsi,QWORD PTR [rsp+0x78]
   16faa:	mov    rdi,QWORD PTR [rsp+0x68]
   16faf:	mov    DWORD PTR [rsp+0x50],eax
   16fb3:	mov    ebx,eax
   16fb5:	call   154e0 <HMMFileRead>
   16fba:	test   eax,eax
   16fbc:	je     173e0 <hmmcalibrate+0x960>
   16fc2:	cmp    QWORD PTR [rsp+0xb8],0x0
   16fcb:	je     173c8 <hmmcalibrate+0x948>
   16fd1:	mov    r13d,DWORD PTR [rsp+0x70]
   16fd6:	or     r13d,DWORD PTR [rsp+0x54]
   16fdb:	jne    171d0 <hmmcalibrate+0x750>
   16fe1:	mov    rbx,QWORD PTR [rsp+0xb8]
   16fe9:	mov    edi,DWORD PTR [rsp+0x8c]
   16ff0:	call   36230 <sre_srandom>
   16ff5:	mov    esi,0x1
   16ffa:	mov    rdi,rbx
   16ffd:	call   1ca40 <P7Logoddsify>
   17002:	lea    rax,[rsp+0xd0]
   1700a:	mov    rsi,QWORD PTR [rsp+0x98]
   17012:	mov    rdi,rax
   17015:	mov    QWORD PTR [rsp+0x48],rax
   1701a:	call   1f4b0 <P7DefaultNullModel>
   1701f:	mov    edx,0x64
   17024:	mov    esi,0xc8
   17029:	mov    edi,0xffffff38
   1702e:	call   f1b0 <AllocHistogram>
   17033:	mov    esi,DWORD PTR [rbx+0x88]
   17039:	mov    edx,0x19
   1703e:	xor    ecx,ecx
   17040:	mov    edi,0x1
   17045:	mov    r15,rax
   17048:	call   5350 <CreatePlan7Matrix>
   1704d:	mov    edx,DWORD PTR [rsp+0x40]
   17051:	mov    r14,rax
   17054:	test   edx,edx
   17056:	jle    175b0 <hmmcalibrate+0xb30>
   1705c:	movss  xmm4,DWORD PTR [rip+0x276a8]        # 3e70c <_IO_stdin_used+0x170c>
   17064:	mov    QWORD PTR [rsp+0x38],r15
   17069:	movss  DWORD PTR [rsp+0x8],xmm4
   1706f:	jmp    170be <hmmcalibrate+0x63e>
   17071:	nop    DWORD PTR [rax+0x0]
   17078:	call   ec90 <P7Viterbi>
   1707d:	mov    rdi,QWORD PTR [rsp+0x38]
   17082:	movss  DWORD PTR [rsp+0x10],xmm0
   17088:	add    r13d,0x1
   1708c:	call   f2d0 <AddToHistogram>
   17091:	movss  xmm0,DWORD PTR [rsp+0x10]
   17097:	mov    rdi,rbp
   1709a:	maxss  xmm0,DWORD PTR [rsp+0x8]
   170a0:	movss  DWORD PTR [rsp+0x8],xmm0
   170a6:	call   3460 <free@plt>
   170ab:	mov    rdi,r12
   170ae:	call   3460 <free@plt>
   170b3:	cmp    DWORD PTR [rsp+0x40],r13d
   170b8:	je     17340 <hmmcalibrate+0x8c0>
   170be:	mov    eax,DWORD PTR [rsp+0x44]
   170c2:	mov    r15d,eax
   170c5:	test   eax,eax
   170c7:	je     17180 <hmmcalibrate+0x700>
   170cd:	mov    edx,DWORD PTR [rip+0x4b22d]        # 62300 <Alphabet_size>
   170d3:	mov    rsi,QWORD PTR [rsp+0x48]
   170d8:	mov    ecx,r15d
   170db:	lea    rdi,[rip+0x4b19e]        # 62280 <Alphabet>
   170e2:	call   369c0 <RandomSequence>
   170e7:	mov    esi,r15d
   170ea:	mov    rdi,rax
   170ed:	mov    r12,rax
   170f0:	call   4f00 <DigitizeSequence>
   170f5:	mov    esi,DWORD PTR [rbx+0x88]
   170fb:	mov    edi,r15d
   170fe:	mov    rbp,rax
   17101:	call   5b10 <P7ViterbiSize>
   17106:	xor    r8d,r8d
   17109:	mov    rcx,r14
   1710c:	mov    rdx,rbx
   1710f:	mov    esi,r15d
   17112:	mov    rdi,rbp
   17115:	cmp    eax,0x3e8
   1711a:	jle    17078 <hmmcalibrate+0x5f8>
   17120:	call   8c40 <P7SmallViterbi>
   17125:	jmp    1707d <hmmcalibrate+0x5fd>
   1712a:	nop    WORD PTR [rax+rax*1+0x0]
   17130:	mov    DWORD PTR [rsp+0x70],0x1
   17138:	jmp    16b20 <hmmcalibrate+0xa0>
   1713d:	nop    DWORD PTR [rax]
   17140:	mov    rdi,QWORD PTR [rsp+0xc8]
   17148:	mov    edx,0xa
   1714d:	xor    esi,esi
   1714f:	call   3670 <strtol@plt>
   17154:	mov    DWORD PTR [rsp+0x40],eax
   17158:	jmp    16b20 <hmmcalibrate+0xa0>
   1715d:	nop    DWORD PTR [rax]
   17160:	lea    rsi,[rip+0x271d1]        # 3e338 <_IO_stdin_used+0x1338>
   17167:	mov    edi,0x1
   1716c:	xor    eax,eax
   1716e:	call   3710 <__printf_chk@plt>
   17173:	jmp    16eb1 <hmmcalibrate+0x431>
   17178:	nop    DWORD PTR [rax+rax*1+0x0]
   17180:	pxor   xmm2,xmm2
   17184:	pxor   xmm1,xmm1
   17188:	cvtss2sd xmm1,DWORD PTR [rsp+0x88]
   17191:	cvtss2sd xmm2,DWORD PTR [rsp+0x74]
   17197:	nop    WORD PTR [rax+rax*1+0x0]
   171a0:	movapd xmm0,xmm2
   171a4:	movsd  QWORD PTR [rsp+0x18],xmm1
   171aa:	movsd  QWORD PTR [rsp+0x10],xmm2
   171b0:	call   362a0 <Gaussrandom>
   171b5:	movsd  xmm2,QWORD PTR [rsp+0x10]
   171bb:	movsd  xmm1,QWORD PTR [rsp+0x18]
   171c1:	cvttsd2si r15d,xmm0
   171c6:	test   r15d,r15d
   171c9:	jle    171a0 <hmmcalibrate+0x720>
   171cb:	jmp    170cd <hmmcalibrate+0x64d>
   171d0:	lea    rdi,[rip+0x27401]        # 3e5d8 <_IO_stdin_used+0x15d8>
   171d7:	xor    eax,eax
   171d9:	call   317f0 <Die>
   171de:	movss  xmm0,DWORD PTR [rip+0x2752a]        # 3e710 <_IO_stdin_used+0x1710>
   171e6:	mov    esi,0x1
   171eb:	mov    rdi,r15
   171ee:	call   11820 <ExtremeValueFitHistogram>
   171f3:	test   eax,eax
   171f5:	je     173b0 <hmmcalibrate+0x930>
   171fb:	movss  xmm0,DWORD PTR [r15+0x2c]
   17201:	mov    rax,QWORD PTR [rsp+0x30]
   17206:	mov    rcx,QWORD PTR [rsp+0x58]
   1720b:	mov    rdx,QWORD PTR [rsp+0x60]
   17210:	movss  DWORD PTR [rcx+rax*4],xmm0
   17215:	movss  xmm0,DWORD PTR [r15+0x30]
   1721b:	movss  DWORD PTR [rdx+rax*4],xmm0
   17220:	mov    eax,DWORD PTR [rsp+0x50]
   17224:	add    eax,0x1
   17227:	imul   eax,eax,0xc28f5c29
   1722d:	add    eax,0x51eb850
   17232:	ror    eax,0x2
   17235:	cmp    eax,0x28f5c28
   1723a:	jbe    17358 <hmmcalibrate+0x8d8>
   17240:	mov    rax,QWORD PTR [rsp+0xb8]
   17248:	lea    rsi,[rip+0x2717f]        # 3e3ce <_IO_stdin_used+0x13ce>
   1724f:	mov    edi,0x1
   17254:	mov    rdx,QWORD PTR [rax]
   17257:	xor    eax,eax
   17259:	call   3710 <__printf_chk@plt>
   1725e:	lea    rsi,[rip+0x27176]        # 3e3db <_IO_stdin_used+0x13db>
   17265:	mov    edi,0x1
   1726a:	pxor   xmm0,xmm0
   1726e:	mov    eax,0x1
   17273:	cvtss2sd xmm0,DWORD PTR [r15+0x2c]
   17279:	call   3710 <__printf_chk@plt>
   1727e:	lea    rsi,[rip+0x27165]        # 3e3ea <_IO_stdin_used+0x13ea>
   17285:	mov    edi,0x1
   1728a:	pxor   xmm0,xmm0
   1728e:	mov    eax,0x1
   17293:	cvtss2sd xmm0,DWORD PTR [r15+0x30]
   17299:	call   3710 <__printf_chk@plt>
   1729e:	lea    rsi,[rip+0x27154]        # 3e3f9 <_IO_stdin_used+0x13f9>
   172a5:	mov    edi,0x1
   172aa:	pxor   xmm0,xmm0
   172ae:	mov    eax,0x1
   172b3:	cvtss2sd xmm0,DWORD PTR [rsp+0x8]
   172b9:	call   3710 <__printf_chk@plt>
   172be:	lea    rdi,[rip+0x26c44]        # 3df09 <_IO_stdin_used+0xf09>
   172c5:	call   34f0 <puts@plt>
   172ca:	mov    rbx,QWORD PTR [rsp+0x80]
   172d2:	test   rbx,rbx
   172d5:	je     1731c <hmmcalibrate+0x89c>
   172d7:	mov    rax,QWORD PTR [rsp+0xb8]
   172df:	lea    rdx,[rip+0x27122]        # 3e408 <_IO_stdin_used+0x1408>
   172e6:	mov    esi,0x1
   172eb:	mov    rdi,rbx
   172ee:	mov    rcx,QWORD PTR [rax]
   172f1:	xor    eax,eax
   172f3:	call   37c0 <__fprintf_chk@plt>
   172f8:	mov    rsi,r15
   172fb:	mov    rdi,rbx
   172fe:	call   f4a0 <PrintASCIIHistogram>
   17303:	mov    rcx,rbx
   17306:	mov    edx,0x3
   1730b:	mov    esi,0x1
   17310:	lea    rdi,[rip+0x26d96]        # 3e0ad <_IO_stdin_used+0x10ad>
   17317:	call   37b0 <fwrite@plt>
   1731c:	mov    rdi,r15
   1731f:	call   f270 <FreeHistogram>
   17324:	mov    rdi,QWORD PTR [rsp+0xb8]
   1732c:	call   1aed0 <FreePlan7>
   17331:	add    QWORD PTR [rsp+0x30],0x1
   17337:	jmp    16fa0 <hmmcalibrate+0x520>
   1733c:	nop    DWORD PTR [rax+0x0]
   17340:	mov    r15,QWORD PTR [rsp+0x38]
   17345:	mov    rdi,r14
   17348:	call   5810 <FreePlan7Matrix>
   1734d:	jmp    171de <hmmcalibrate+0x75e>
   17352:	nop    WORD PTR [rax+rax*1+0x0]
   17358:	mov    r12d,DWORD PTR [rsp+0x50]
   1735d:	mov    rdx,QWORD PTR [rsp+0x58]
   17362:	mov    esi,0x15c
   17367:	lea    rdi,[rip+0x26f9d]        # 3e30b <_IO_stdin_used+0x130b>
   1736e:	add    r12d,0x65
   17372:	movsxd r12,r12d
   17375:	shl    r12,0x2
   17379:	mov    rcx,r12
   1737c:	call   36860 <sre_realloc>
   17381:	mov    rdx,QWORD PTR [rsp+0x60]
   17386:	mov    rcx,r12
   17389:	mov    esi,0x15d
   1738e:	lea    rdi,[rip+0x26f76]        # 3e30b <_IO_stdin_used+0x130b>
   17395:	mov    QWORD PTR [rsp+0x58],rax
   1739a:	call   36860 <sre_realloc>
   1739f:	mov    QWORD PTR [rsp+0x60],rax
   173a4:	jmp    17240 <hmmcalibrate+0x7c0>
   173a9:	nop    DWORD PTR [rax+0x0]
   173b0:	lea    rdi,[rip+0x27251]        # 3e608 <_IO_stdin_used+0x1608>
   173b7:	call   317f0 <Die>
   173bc:	jmp    171fb <hmmcalibrate+0x77b>
   173c1:	nop    DWORD PTR [rax+0x0]
   173c8:	lea    rdi,[rip+0x271c9]        # 3e598 <_IO_stdin_used+0x1598>
   173cf:	xor    eax,eax
   173d1:	call   317f0 <Die>
   173d6:	jmp    16fd1 <hmmcalibrate+0x551>
   173db:	nop    DWORD PTR [rax+rax*1+0x0]
   173e0:	mov    rdi,QWORD PTR [rsp+0x68]
   173e5:	call   15af0 <HMMFileRewind>
   173ea:	mov    rdi,QWORD PTR [rsp+0xa0]
   173f2:	call   278a0 <FileExists>
   173f7:	test   eax,eax
   173f9:	jne    175e0 <hmmcalibrate+0xb60>
   173ff:	mov    rsi,QWORD PTR [rsp+0xa8]
   17407:	mov    rdi,QWORD PTR [rsp+0xa0]
   1740f:	call   3750 <fopen@plt>
   17414:	mov    r12,rax
   17417:	test   rax,rax
   1741a:	je     176ed <hmmcalibrate+0xc6d>
   17420:	test   ebx,ebx
   17422:	je     17530 <hmmcalibrate+0xab0>
   17428:	mov    rax,QWORD PTR [rsp+0x30]
   1742d:	mov    rcx,QWORD PTR [rsp+0x58]
   17432:	lea    r14,[rip+0x2726f]        # 3e6a8 <_IO_stdin_used+0x16a8>
   17439:	mov    rbp,QWORD PTR [rsp+0x60]
   1743e:	mov    r15,QWORD PTR [rsp+0x78]
   17443:	sub    eax,0x1
   17446:	mov    rbx,rcx
   17449:	lea    r13,[rcx+rax*4+0x4]
   1744e:	mov    QWORD PTR [rsp+0x8],r13
   17453:	mov    r13,QWORD PTR [rsp+0x68]
   17458:	jmp    17485 <hmmcalibrate+0xa05>
   1745a:	nop    WORD PTR [rax+rax*1+0x0]
   17460:	call   16600 <WriteBinHMM>
   17465:	mov    rdi,QWORD PTR [rsp+0xb8]
   1746d:	add    rbx,0x4
   17471:	add    rbp,0x4
   17475:	call   1aed0 <FreePlan7>
   1747a:	cmp    rbx,QWORD PTR [rsp+0x8]
   1747f:	je     17530 <hmmcalibrate+0xab0>
   17485:	mov    rsi,r15
   17488:	mov    rdi,r13
   1748b:	call   154e0 <HMMFileRead>
   17490:	test   eax,eax
   17492:	je     174f8 <hmmcalibrate+0xa78>
   17494:	mov    rdi,QWORD PTR [rsp+0xb8]
   1749c:	test   rdi,rdi
   1749f:	je     1750d <hmmcalibrate+0xa8d>
   174a1:	movss  xmm0,DWORD PTR [rbx]
   174a5:	mov    esi,DWORD PTR [rsp+0x24]
   174a9:	mov    rdx,QWORD PTR [rsp+0x28]
   174ae:	movss  DWORD PTR [rdi+0x1c0],xmm0
   174b6:	movss  xmm0,DWORD PTR [rbp+0x0]
   174bb:	or     DWORD PTR [rdi+0x1c8],0x80
   174c5:	movss  DWORD PTR [rdi+0x1c4],xmm0
   174cd:	call   1b2c0 <Plan7ComlogAppend>
   174d2:	mov    eax,DWORD PTR [r13+0x18]
   174d6:	mov    rsi,QWORD PTR [rsp+0xb8]
   174de:	mov    rdi,r12
   174e1:	test   eax,eax
   174e3:	jne    17460 <hmmcalibrate+0x9e0>
   174e9:	call   15c00 <WriteAscHMM>
   174ee:	jmp    17465 <hmmcalibrate+0x9e5>
   174f3:	nop    DWORD PTR [rax+rax*1+0x0]
   174f8:	mov    rdi,r14
   174fb:	call   317f0 <Die>
   17500:	mov    rdi,QWORD PTR [rsp+0xb8]
   17508:	test   rdi,rdi
   1750b:	jne    174a1 <hmmcalibrate+0xa21>
   1750d:	mov    rsi,QWORD PTR [rsp+0x90]
   17515:	lea    rdi,[rip+0x271b4]        # 3e6d0 <_IO_stdin_used+0x16d0>
   1751c:	xor    eax,eax
   1751e:	call   317f0 <Die>
   17523:	mov    rdi,QWORD PTR [rsp+0xb8]
   1752b:	jmp    174a1 <hmmcalibrate+0xa21>
   17530:	mov    rdi,QWORD PTR [rsp+0x68]
   17535:	call   15540 <HMMFileClose>
   1753a:	mov    rdi,r12
   1753d:	call   3530 <fclose@plt>
   17542:	test   eax,eax
   17544:	jne    175c8 <hmmcalibrate+0xb48>
   1754a:	mov    rdi,QWORD PTR [rsp+0xa0]
   17552:	call   3460 <free@plt>
   17557:	mov    rdi,QWORD PTR [rsp+0x58]
   1755c:	call   3460 <free@plt>
   17561:	mov    rdi,QWORD PTR [rsp+0x60]
   17566:	call   3460 <free@plt>
   1756b:	mov    rax,QWORD PTR [rsp+0x80]
   17573:	test   rax,rax
   17576:	je     17580 <hmmcalibrate+0xb00>
   17578:	mov    rdi,rax
   1757b:	call   3530 <fclose@plt>
   17580:	call   29160 <SqdClean>
   17585:	mov    rax,QWORD PTR [rsp+0x128]
   1758d:	xor    rax,QWORD PTR fs:0x28
   17596:	jne    17708 <hmmcalibrate+0xc88>
   1759c:	add    rsp,0x138
   175a3:	xor    eax,eax
   175a5:	pop    rbx
   175a6:	pop    rbp
   175a7:	pop    r12
   175a9:	pop    r13
   175ab:	pop    r14
   175ad:	pop    r15
   175af:	ret    
   175b0:	movss  xmm6,DWORD PTR [rip+0x27154]        # 3e70c <_IO_stdin_used+0x170c>
   175b8:	movss  DWORD PTR [rsp+0x8],xmm6
   175be:	jmp    17345 <hmmcalibrate+0x8c5>
   175c3:	nop    DWORD PTR [rax+rax*1+0x0]
   175c8:	mov    esi,0x19f
   175cd:	lea    rdi,[rip+0x26d37]        # 3e30b <_IO_stdin_used+0x130b>
   175d4:	call   31a00 <Panic>
   175d9:	jmp    1754a <hmmcalibrate+0xaca>
   175de:	xchg   ax,ax
   175e0:	mov    rsi,QWORD PTR [rsp+0xa0]
   175e8:	lea    rdi,[rip+0x27049]        # 3e638 <_IO_stdin_used+0x1638>
   175ef:	xor    eax,eax
   175f1:	call   317f0 <Die>
   175f6:	jmp    173ff <hmmcalibrate+0x97f>
   175fb:	nop    DWORD PTR [rax+rax*1+0x0]
   17600:	lea    rdi,[rip+0x26f69]        # 3e570 <_IO_stdin_used+0x1570>
   17607:	call   34f0 <puts@plt>
   1760c:	jmp    16f2f <hmmcalibrate+0x4af>
   17611:	nop    DWORD PTR [rax+0x0]
   17618:	lea    rdi,[rip+0x26e21]        # 3e440 <_IO_stdin_used+0x1440>
   1761f:	xor    eax,eax
   17621:	call   317f0 <Die>
   17626:	mov    edi,DWORD PTR [rsp+0x54]
   1762a:	test   edi,edi
   1762c:	je     16d6d <hmmcalibrate+0x2ed>
   17632:	lea    rdi,[rip+0x26e47]        # 3e480 <_IO_stdin_used+0x1480>
   17639:	xor    eax,eax
   1763b:	call   317f0 <Die>
   17640:	jmp    16d6d <hmmcalibrate+0x2ed>
   17645:	nop    DWORD PTR [rax]
   17648:	mov    rdi,QWORD PTR [rsp+0xa0]
   17650:	call   34c0 <remove@plt>
   17655:	test   eax,eax
   17657:	je     16e10 <hmmcalibrate+0x390>
   1765d:	mov    esi,0x10e
   17662:	lea    rdi,[rip+0x26ca2]        # 3e30b <_IO_stdin_used+0x130b>
   17669:	call   31a00 <Panic>
   1766e:	jmp    16e10 <hmmcalibrate+0x390>
   17673:	nop    DWORD PTR [rax+rax*1+0x0]
   17678:	mov    rdi,QWORD PTR [rsp+0xc8]
   17680:	xor    esi,esi
   17682:	call   3510 <strtod@plt>
   17687:	pxor   xmm7,xmm7
   1768b:	cvtsd2ss xmm7,xmm0
   1768f:	movss  DWORD PTR [rsp+0x88],xmm7
   17698:	jmp    16b20 <hmmcalibrate+0xa0>
   1769d:	nop    DWORD PTR [rax]
   176a0:	mov    rdi,QWORD PTR [rsp+0xc8]
   176a8:	mov    edx,0xa
   176ad:	xor    esi,esi
   176af:	call   3670 <strtol@plt>
   176b4:	mov    DWORD PTR [rsp+0x8c],eax
   176bb:	jmp    16b20 <hmmcalibrate+0xa0>
   176c0:	mov    rsi,r14
   176c3:	lea    rdi,[rip+0x26e2e]        # 3e4f8 <_IO_stdin_used+0x14f8>
   176ca:	call   317f0 <Die>
   176cf:	jmp    16dbb <hmmcalibrate+0x33b>
   176d4:	mov    rsi,QWORD PTR [rsp+0x90]
   176dc:	lea    rdi,[rip+0x26ded]        # 3e4d0 <_IO_stdin_used+0x14d0>
   176e3:	call   317f0 <Die>
   176e8:	jmp    16d8a <hmmcalibrate+0x30a>
   176ed:	mov    rsi,QWORD PTR [rsp+0xa0]
   176f5:	lea    rdi,[rip+0x26f74]        # 3e670 <_IO_stdin_used+0x1670>
   176fc:	xor    eax,eax
   176fe:	call   317f0 <Die>
   17703:	jmp    17420 <hmmcalibrate+0x9a0>
   17708:	call   3570 <__stack_chk_fail@plt>
   1770d:	nop    DWORD PTR [rax]

0000000000017710 <Prob2Score>:
   17710:	endbr64 
   17714:	pxor   xmm2,xmm2
   17718:	ucomiss xmm0,xmm2
   1771b:	jnp    177b0 <Prob2Score+0xa0>
   17721:	divss  xmm0,xmm1
   17725:	comiss xmm0,xmm2
   17728:	ja     17730 <Prob2Score+0x20>
   1772a:	mov    eax,0xff676d68
   1772f:	ret    
   17730:	sub    rsp,0x8
   17734:	cvtss2sd xmm0,xmm0
   17738:	call   35e0 <log@plt>
   1773d:	mulsd  xmm0,QWORD PTR [rip+0x2759b]        # 3ece0 <_IO_stdin_used+0x1ce0>
   17745:	movsd  xmm2,QWORD PTR [rip+0x275e3]        # 3ed30 <_IO_stdin_used+0x1d30>
   1774d:	mulsd  xmm0,QWORD PTR [rip+0x25c2b]        # 3d380 <_IO_stdin_used+0x380>
   17755:	movsd  xmm3,QWORD PTR [rip+0x2758b]        # 3ece8 <_IO_stdin_used+0x1ce8>
   1775d:	addsd  xmm0,QWORD PTR [rip+0x2667b]        # 3dde0 <_IO_stdin_used+0xde0>
   17765:	movapd xmm1,xmm0
   17769:	andpd  xmm1,xmm2
   1776d:	ucomisd xmm3,xmm1
   17771:	jbe    177a6 <Prob2Score+0x96>
   17773:	cvttsd2si rax,xmm0
   17778:	pxor   xmm1,xmm1
   1777c:	movsd  xmm4,QWORD PTR [rip+0x2666c]        # 3ddf0 <_IO_stdin_used+0xdf0>
   17784:	andnpd xmm2,xmm0
   17788:	cvtsi2sd xmm1,rax
   1778d:	movapd xmm3,xmm1
   17791:	cmpnlesd xmm3,xmm0
   17796:	movapd xmm0,xmm2
   1779a:	andpd  xmm3,xmm4
   1779e:	subsd  xmm1,xmm3
   177a2:	orpd   xmm0,xmm1
   177a6:	cvttsd2si eax,xmm0
   177aa:	add    rsp,0x8
   177ae:	ret    
   177af:	nop
   177b0:	mov    eax,0xc521974f
   177b5:	jne    17721 <Prob2Score+0x11>
   177bb:	ret    
   177bc:	nop    DWORD PTR [rax+0x0]

00000000000177c0 <Score2Prob>:
   177c0:	endbr64 
   177c4:	sub    rsp,0x18
   177c8:	movss  DWORD PTR [rsp+0xc],xmm0
   177ce:	pxor   xmm0,xmm0
   177d2:	cmp    edi,0xc521974f
   177d8:	je     17815 <Score2Prob+0x55>
   177da:	pxor   xmm0,xmm0
   177de:	cvtsi2ss xmm0,edi
   177e2:	cvtss2sd xmm0,xmm0
   177e6:	divsd  xmm0,QWORD PTR [rip+0x25b92]        # 3d380 <_IO_stdin_used+0x380>
   177ee:	mulsd  xmm0,QWORD PTR [rip+0x274fa]        # 3ecf0 <_IO_stdin_used+0x1cf0>
   177f6:	call   3800 <exp@plt>
   177fb:	movss  xmm1,DWORD PTR [rsp+0xc]
   17801:	movapd xmm2,xmm0
   17805:	pxor   xmm0,xmm0
   17809:	cvtss2sd xmm0,xmm1
   1780d:	mulsd  xmm0,xmm2
   17811:	cvtsd2ss xmm0,xmm0
   17815:	add    rsp,0x18
   17819:	ret    
   1781a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000017820 <Scorify>:
   17820:	endbr64 
   17824:	pxor   xmm0,xmm0
   17828:	cvtsi2ss xmm0,edi
   1782c:	divss  xmm0,DWORD PTR [rip+0x2750c]        # 3ed40 <_IO_stdin_used+0x1d40>
   17834:	ret    
   17835:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000017840 <PValue>:
   17840:	endbr64 
   17844:	sub    rsp,0x28
   17848:	movaps xmm3,xmm0
   1784b:	cvtss2sd xmm0,xmm0
   1784f:	pxor   xmm4,xmm4
   17853:	comisd xmm0,QWORD PTR [rip+0x2749d]        # 3ecf8 <_IO_stdin_used+0x1cf8>
   1785b:	jae    17873 <PValue+0x33>
   1785d:	movsd  xmm1,QWORD PTR [rip+0x2749b]        # 3ed00 <_IO_stdin_used+0x1d00>
   17865:	movsd  xmm4,QWORD PTR [rip+0x26583]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1786d:	comisd xmm1,xmm0
   17871:	jb     178c8 <PValue+0x88>
   17873:	test   rdi,rdi
   17876:	je     17881 <PValue+0x41>
   17878:	test   BYTE PTR [rdi+0x1c8],0x80
   1787f:	jne    17890 <PValue+0x50>
   17881:	movapd xmm0,xmm4
   17885:	add    rsp,0x28
   17889:	ret    
   1788a:	nop    WORD PTR [rax+rax*1+0x0]
   17890:	movss  xmm2,DWORD PTR [rdi+0x1c4]
   17898:	movaps xmm0,xmm3
   1789b:	movss  xmm1,DWORD PTR [rdi+0x1c0]
   178a3:	movsd  QWORD PTR [rsp+0x8],xmm4
   178a9:	call   10120 <ExtremeValueP>
   178ae:	movsd  xmm4,QWORD PTR [rsp+0x8]
   178b4:	add    rsp,0x28
   178b8:	minsd  xmm0,xmm4
   178bc:	movapd xmm4,xmm0
   178c0:	movapd xmm0,xmm4
   178c4:	ret    
   178c5:	nop    DWORD PTR [rax]
   178c8:	mulsd  xmm0,QWORD PTR [rip+0x27420]        # 3ecf0 <_IO_stdin_used+0x1cf0>
   178d0:	mov    QWORD PTR [rsp+0x10],rdi
   178d5:	movss  DWORD PTR [rsp+0x1c],xmm3
   178db:	movsd  QWORD PTR [rsp+0x8],xmm4
   178e1:	call   3800 <exp@plt>
   178e6:	movsd  xmm4,QWORD PTR [rsp+0x8]
   178ec:	movss  xmm3,DWORD PTR [rsp+0x1c]
   178f2:	mov    rdi,QWORD PTR [rsp+0x10]
   178f7:	addsd  xmm0,xmm4
   178fb:	divsd  xmm4,xmm0
   178ff:	jmp    17873 <PValue+0x33>
   17904:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1790f:	nop

0000000000017910 <LogSum>:
   17910:	endbr64 
   17914:	sub    rsp,0x18
   17918:	comiss xmm0,xmm1
   1791b:	jbe    17940 <LogSum+0x30>
   1791d:	movaps xmm3,xmm0
   17920:	movaps xmm2,xmm0
   17923:	subss  xmm3,xmm1
   17927:	comiss xmm3,DWORD PTR [rip+0x27416]        # 3ed44 <_IO_stdin_used+0x1d44>
   1792e:	jbe    17990 <LogSum+0x80>
   17930:	movaps xmm0,xmm2
   17933:	add    rsp,0x18
   17937:	ret    
   17938:	nop    DWORD PTR [rax+rax*1+0x0]
   17940:	movaps xmm3,xmm1
   17943:	movaps xmm2,xmm1
   17946:	subss  xmm3,xmm0
   1794a:	comiss xmm3,DWORD PTR [rip+0x273f3]        # 3ed44 <_IO_stdin_used+0x1d44>
   17951:	ja     17930 <LogSum+0x20>
   17953:	subss  xmm0,xmm1
   17957:	movss  DWORD PTR [rsp+0xc],xmm1
   1795d:	cvtss2sd xmm0,xmm0
   17961:	call   3800 <exp@plt>
   17966:	addsd  xmm0,QWORD PTR [rip+0x26482]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1796e:	call   35e0 <log@plt>
   17973:	movss  xmm2,DWORD PTR [rsp+0xc]
   17979:	add    rsp,0x18
   1797d:	cvtss2sd xmm2,xmm2
   17981:	addsd  xmm2,xmm0
   17985:	cvtsd2ss xmm2,xmm2
   17989:	movaps xmm0,xmm2
   1798c:	ret    
   1798d:	nop    DWORD PTR [rax]
   17990:	subss  xmm1,xmm0
   17994:	movss  DWORD PTR [rsp+0xc],xmm0
   1799a:	pxor   xmm0,xmm0
   1799e:	cvtss2sd xmm0,xmm1
   179a2:	jmp    17961 <LogSum+0x51>
   179a4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   179af:	nop

00000000000179b0 <ILogsum>:
   179b0:	endbr64 
   179b4:	push   r13
   179b6:	push   r12
   179b8:	push   rbp
   179b9:	mov    ebp,esi
   179bb:	push   rbx
   179bc:	mov    ebx,edi
   179be:	sub    rsp,0x8
   179c2:	mov    eax,DWORD PTR [rip+0x35f88]        # 4d950 <firsttime.6940>
   179c8:	test   eax,eax
   179ca:	jne    17a10 <ILogsum+0x60>
   179cc:	mov    eax,ebx
   179ce:	mov    r8d,ebx
   179d1:	sub    eax,ebp
   179d3:	cmp    eax,0x4e1f
   179d8:	jg     179fb <ILogsum+0x4b>
   179da:	mov    r8d,ebp
   179dd:	cmp    eax,0xffffb1e1
   179e2:	jl     179fb <ILogsum+0x4b>
   179e4:	test   eax,eax
   179e6:	jle    17a80 <ILogsum+0xd0>
   179ec:	cdqe   
   179ee:	lea    rdx,[rip+0x3694b]        # 4e340 <ilogsum_lookup>
   179f5:	add    ebx,DWORD PTR [rdx+rax*4]
   179f8:	mov    r8d,ebx
   179fb:	add    rsp,0x8
   179ff:	mov    eax,r8d
   17a02:	pop    rbx
   17a03:	pop    rbp
   17a04:	pop    r12
   17a06:	pop    r13
   17a08:	ret    
   17a09:	nop    DWORD PTR [rax+0x0]
   17a10:	lea    r13,[rip+0x36929]        # 4e340 <ilogsum_lookup>
   17a17:	xor    r12d,r12d
   17a1a:	nop    WORD PTR [rax+rax*1+0x0]
   17a20:	pxor   xmm0,xmm0
   17a24:	add    r13,0x4
   17a28:	cvtsi2ss xmm0,r12d
   17a2d:	sub    r12d,0x1
   17a31:	cvtss2sd xmm0,xmm0
   17a35:	mulsd  xmm0,QWORD PTR [rip+0x272b3]        # 3ecf0 <_IO_stdin_used+0x1cf0>
   17a3d:	divsd  xmm0,QWORD PTR [rip+0x2593b]        # 3d380 <_IO_stdin_used+0x380>
   17a45:	call   3800 <exp@plt>
   17a4a:	addsd  xmm0,QWORD PTR [rip+0x2639e]        # 3ddf0 <_IO_stdin_used+0xdf0>
   17a52:	call   35e0 <log@plt>
   17a57:	mulsd  xmm0,QWORD PTR [rip+0x272a9]        # 3ed08 <_IO_stdin_used+0x1d08>
   17a5f:	cvttsd2si eax,xmm0
   17a63:	mov    DWORD PTR [r13-0x4],eax
   17a67:	cmp    r12d,0xffffb1e0
   17a6e:	jne    17a20 <ILogsum+0x70>
   17a70:	mov    DWORD PTR [rip+0x35ed6],0x0        # 4d950 <firsttime.6940>
   17a7a:	jmp    179cc <ILogsum+0x1c>
   17a7f:	nop
   17a80:	mov    eax,ebp
   17a82:	lea    rdx,[rip+0x368b7]        # 4e340 <ilogsum_lookup>
   17a89:	sub    eax,ebx
   17a8b:	cdqe   
   17a8d:	add    r8d,DWORD PTR [rdx+rax*4]
   17a91:	add    rsp,0x8
   17a95:	pop    rbx
   17a96:	mov    eax,r8d
   17a99:	pop    rbp
   17a9a:	pop    r12
   17a9c:	pop    r13
   17a9e:	ret    
   17a9f:	nop

0000000000017aa0 <LogNorm>:
   17aa0:	endbr64 
   17aa4:	test   esi,esi
   17aa6:	jle    17be0 <LogNorm+0x140>
   17aac:	push   r12
   17aae:	lea    eax,[rsi-0x1]
   17ab1:	push   rbp
   17ab2:	lea    r12,[rdi+rax*4+0x4]
   17ab7:	mov    rbp,rdi
   17aba:	mov    rax,rdi
   17abd:	push   rbx
   17abe:	mov    rbx,rdi
   17ac1:	sub    rsp,0x10
   17ac5:	movss  xmm1,DWORD PTR [rip+0x2727b]        # 3ed48 <_IO_stdin_used+0x1d48>
   17acd:	nop    DWORD PTR [rax]
   17ad0:	movss  xmm0,DWORD PTR [rax]
   17ad4:	add    rax,0x4
   17ad8:	maxss  xmm0,xmm1
   17adc:	movaps xmm1,xmm0
   17adf:	cmp    rax,r12
   17ae2:	jne    17ad0 <LogNorm+0x30>
   17ae4:	pxor   xmm2,xmm2
   17ae8:	pxor   xmm5,xmm5
   17aec:	cvtss2sd xmm2,xmm0
   17af0:	movss  DWORD PTR [rsp],xmm5
   17af5:	subsd  xmm2,QWORD PTR [rip+0x27213]        # 3ed10 <_IO_stdin_used+0x1d10>
   17afd:	jmp    17b09 <LogNorm+0x69>
   17aff:	nop
   17b00:	add    rbp,0x4
   17b04:	cmp    rbp,r12
   17b07:	je     17b77 <LogNorm+0xd7>
   17b09:	movss  xmm0,DWORD PTR [rbp+0x0]
   17b0e:	pxor   xmm3,xmm3
   17b12:	cvtss2sd xmm3,xmm0
   17b16:	comisd xmm3,xmm2
   17b1a:	jbe    17b00 <LogNorm+0x60>
   17b1c:	subss  xmm0,xmm1
   17b20:	movsd  QWORD PTR [rsp+0x8],xmm2
   17b26:	movss  DWORD PTR [rsp+0x4],xmm1
   17b2c:	cvtss2sd xmm0,xmm0
   17b30:	call   3800 <exp@plt>
   17b35:	pxor   xmm4,xmm4
   17b39:	movsd  xmm2,QWORD PTR [rsp+0x8]
   17b3f:	movapd xmm3,xmm0
   17b43:	pxor   xmm0,xmm0
   17b47:	movss  xmm1,DWORD PTR [rsp+0x4]
   17b4d:	cvtss2sd xmm0,DWORD PTR [rsp]
   17b52:	addsd  xmm0,xmm3
   17b56:	cvtsd2ss xmm4,xmm0
   17b5a:	movss  DWORD PTR [rsp],xmm4
   17b5f:	jmp    17b00 <LogNorm+0x60>
   17b61:	nop    DWORD PTR [rax+0x0]
   17b68:	mov    DWORD PTR [rbx],0x0
   17b6e:	add    rbx,0x4
   17b72:	cmp    rbx,r12
   17b75:	je     17bcd <LogNorm+0x12d>
   17b77:	movss  xmm0,DWORD PTR [rbx]
   17b7b:	pxor   xmm3,xmm3
   17b7f:	cvtss2sd xmm3,xmm0
   17b83:	comisd xmm3,xmm2
   17b87:	jbe    17b68 <LogNorm+0xc8>
   17b89:	subss  xmm0,xmm1
   17b8d:	movsd  QWORD PTR [rsp+0x8],xmm2
   17b93:	add    rbx,0x4
   17b97:	movss  DWORD PTR [rsp+0x4],xmm1
   17b9d:	cvtss2sd xmm0,xmm0
   17ba1:	call   3800 <exp@plt>
   17ba6:	pxor   xmm3,xmm3
   17baa:	movss  xmm1,DWORD PTR [rsp+0x4]
   17bb0:	cvtss2sd xmm3,DWORD PTR [rsp]
   17bb5:	divsd  xmm0,xmm3
   17bb9:	movsd  xmm2,QWORD PTR [rsp+0x8]
   17bbf:	cvtsd2ss xmm0,xmm0
   17bc3:	movss  DWORD PTR [rbx-0x4],xmm0
   17bc8:	cmp    rbx,r12
   17bcb:	jne    17b77 <LogNorm+0xd7>
   17bcd:	add    rsp,0x10
   17bd1:	pop    rbx
   17bd2:	pop    rbp
   17bd3:	pop    r12
   17bd5:	ret    
   17bd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17be0:	ret    
   17be1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   17bec:	nop    DWORD PTR [rax+0x0]

0000000000017bf0 <Logp_cvec>:
   17bf0:	endbr64 
   17bf4:	push   r12
   17bf6:	push   rbp
   17bf7:	push   rbx
   17bf8:	sub    rsp,0x20
   17bfc:	test   esi,esi
   17bfe:	jle    17d90 <Logp_cvec+0x1a0>
   17c04:	pxor   xmm3,xmm3
   17c08:	lea    eax,[rsi-0x1]
   17c0b:	mov    rbx,rdi
   17c0e:	mov    rbp,rdx
   17c11:	movsd  xmm6,QWORD PTR [rip+0x261d7]        # 3ddf0 <_IO_stdin_used+0xdf0>
   17c19:	lea    r12,[rdi+rax*4+0x4]
   17c1e:	movss  DWORD PTR [rsp],xmm3
   17c23:	movaps xmm2,xmm3
   17c26:	movss  DWORD PTR [rsp+0x8],xmm3
   17c2c:	movsd  QWORD PTR [rsp+0x18],xmm6
   17c32:	nop    WORD PTR [rax+rax*1+0x0]
   17c38:	movss  xmm1,DWORD PTR [rbx]
   17c3c:	movss  xmm4,DWORD PTR [rbp+0x0]
   17c41:	add    rbx,0x4
   17c45:	add    rbp,0x4
   17c49:	movaps xmm0,xmm1
   17c4c:	addss  xmm3,xmm1
   17c50:	addss  xmm0,xmm4
   17c54:	addss  xmm4,DWORD PTR [rsp]
   17c59:	movss  DWORD PTR [rsp+0x10],xmm3
   17c5f:	addss  xmm2,xmm0
   17c63:	movss  DWORD PTR [rsp],xmm4
   17c68:	cvtss2sd xmm0,xmm0
   17c6c:	movss  DWORD PTR [rsp+0x14],xmm2
   17c72:	call   35a50 <Gammln>
   17c77:	pxor   xmm1,xmm1
   17c7b:	cvtss2sd xmm1,DWORD PTR [rsp+0x8]
   17c81:	addsd  xmm1,xmm0
   17c85:	pxor   xmm0,xmm0
   17c89:	cvtss2sd xmm0,DWORD PTR [rbx-0x4]
   17c8e:	addsd  xmm0,QWORD PTR [rsp+0x18]
   17c94:	movsd  QWORD PTR [rsp+0x8],xmm1
   17c9a:	call   35a50 <Gammln>
   17c9f:	movsd  xmm1,QWORD PTR [rsp+0x8]
   17ca5:	cvtsd2ss xmm1,xmm1
   17ca9:	cvtss2sd xmm1,xmm1
   17cad:	subsd  xmm1,xmm0
   17cb1:	pxor   xmm0,xmm0
   17cb5:	cvtss2sd xmm0,DWORD PTR [rbp-0x4]
   17cba:	movsd  QWORD PTR [rsp+0x8],xmm1
   17cc0:	call   35a50 <Gammln>
   17cc5:	movsd  xmm1,QWORD PTR [rsp+0x8]
   17ccb:	pxor   xmm7,xmm7
   17ccf:	cmp    rbx,r12
   17cd2:	movss  xmm3,DWORD PTR [rsp+0x10]
   17cd8:	movss  xmm2,DWORD PTR [rsp+0x14]
   17cde:	cvtsd2ss xmm1,xmm1
   17ce2:	cvtss2sd xmm1,xmm1
   17ce6:	subsd  xmm1,xmm0
   17cea:	cvtsd2ss xmm7,xmm1
   17cee:	movss  DWORD PTR [rsp+0x8],xmm7
   17cf4:	jne    17c38 <Logp_cvec+0x48>
   17cfa:	pxor   xmm0,xmm0
   17cfe:	cvtss2sd xmm0,xmm2
   17d02:	movss  DWORD PTR [rsp+0x10],xmm3
   17d08:	call   35a50 <Gammln>
   17d0d:	pxor   xmm2,xmm2
   17d11:	cvtss2sd xmm2,DWORD PTR [rsp+0x8]
   17d17:	subsd  xmm2,xmm0
   17d1b:	pxor   xmm0,xmm0
   17d1f:	cvtss2sd xmm0,DWORD PTR [rsp]
   17d24:	movsd  QWORD PTR [rsp+0x8],xmm2
   17d2a:	call   35a50 <Gammln>
   17d2f:	movsd  xmm2,QWORD PTR [rsp+0x8]
   17d35:	movss  xmm3,DWORD PTR [rsp+0x10]
   17d3b:	pxor   xmm1,xmm1
   17d3f:	cvtsd2ss xmm2,xmm2
   17d43:	cvtss2sd xmm1,xmm2
   17d47:	addsd  xmm1,xmm0
   17d4b:	pxor   xmm0,xmm0
   17d4f:	cvtss2sd xmm0,xmm3
   17d53:	addsd  xmm0,QWORD PTR [rsp+0x18]
   17d59:	movsd  QWORD PTR [rsp],xmm1
   17d5e:	call   35a50 <Gammln>
   17d63:	movsd  xmm1,QWORD PTR [rsp]
   17d68:	add    rsp,0x20
   17d6c:	movapd xmm2,xmm0
   17d70:	pxor   xmm0,xmm0
   17d74:	pop    rbx
   17d75:	pop    rbp
   17d76:	cvtsd2ss xmm1,xmm1
   17d7a:	cvtss2sd xmm0,xmm1
   17d7e:	addsd  xmm0,xmm2
   17d82:	pop    r12
   17d84:	cvtsd2ss xmm0,xmm0
   17d88:	ret    
   17d89:	nop    DWORD PTR [rax+0x0]
   17d90:	movsd  xmm7,QWORD PTR [rip+0x26058]        # 3ddf0 <_IO_stdin_used+0xdf0>
   17d98:	pxor   xmm3,xmm3
   17d9c:	pxor   xmm0,xmm0
   17da0:	movss  DWORD PTR [rsp],xmm3
   17da5:	movss  DWORD PTR [rsp+0x8],xmm3
   17dab:	movsd  QWORD PTR [rsp+0x18],xmm7
   17db1:	jmp    17d02 <Logp_cvec+0x112>
   17db6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000017dc0 <SampleGamma>:
   17dc0:	endbr64 
   17dc4:	sub    rsp,0x58
   17dc8:	comiss xmm0,DWORD PTR [rip+0x255cd]        # 3d39c <_IO_stdin_used+0x39c>
   17dcf:	movss  DWORD PTR [rsp+0x10],xmm0
   17dd5:	jae    17f28 <SampleGamma+0x168>
   17ddb:	movss  xmm5,DWORD PTR [rsp+0x10]
   17de1:	pxor   xmm6,xmm6
   17de5:	comiss xmm5,xmm6
   17de8:	jbe    18080 <SampleGamma+0x2c0>
   17dee:	pxor   xmm4,xmm4
   17df2:	cvtss2sd xmm4,xmm5
   17df6:	movsd  xmm5,QWORD PTR [rip+0x25ff2]        # 3ddf0 <_IO_stdin_used+0xdf0>
   17dfe:	movsd  QWORD PTR [rsp+0x10],xmm4
   17e04:	movsd  QWORD PTR [rsp+0x8],xmm5
   17e0a:	nop    WORD PTR [rax+rax*1+0x0]
   17e10:	call   36060 <sre_random>
   17e15:	movsd  xmm4,QWORD PTR [rsp+0x10]
   17e1b:	movsd  xmm1,QWORD PTR [rsp+0x8]
   17e21:	cvtsd2ss xmm0,xmm0
   17e25:	cvtss2sd xmm0,xmm0
   17e29:	movapd xmm2,xmm4
   17e2d:	divsd  xmm2,QWORD PTR [rip+0x26eeb]        # 3ed20 <_IO_stdin_used+0x1d20>
   17e35:	addsd  xmm1,xmm2
   17e39:	mulsd  xmm1,xmm0
   17e3d:	cvtsd2ss xmm1,xmm1
   17e41:	comiss xmm1,DWORD PTR [rip+0x25554]        # 3d39c <_IO_stdin_used+0x39c>
   17e48:	jbe    17ec0 <SampleGamma+0x100>
   17e4a:	movss  xmm7,DWORD PTR [rip+0x2554a]        # 3d39c <_IO_stdin_used+0x39c>
   17e52:	pxor   xmm0,xmm0
   17e56:	subss  xmm7,xmm1
   17e5a:	cvtss2sd xmm0,xmm7
   17e5e:	addsd  xmm0,xmm2
   17e62:	divsd  xmm0,xmm4
   17e66:	call   35e0 <log@plt>
   17e6b:	cvtsd2ss xmm0,xmm0
   17e6f:	xorps  xmm0,XMMWORD PTR [rip+0x25f5a]        # 3ddd0 <_IO_stdin_used+0xdd0>
   17e76:	movss  DWORD PTR [rsp+0x1c],xmm0
   17e7c:	call   36060 <sre_random>
   17e81:	movsd  xmm1,QWORD PTR [rsp+0x10]
   17e87:	subsd  xmm1,QWORD PTR [rsp+0x8]
   17e8d:	movsd  QWORD PTR [rsp+0x20],xmm0
   17e93:	pxor   xmm0,xmm0
   17e97:	cvtss2sd xmm0,DWORD PTR [rsp+0x1c]
   17e9d:	call   3520 <pow@plt>
   17ea2:	comisd xmm0,QWORD PTR [rsp+0x20]
   17ea8:	jb     17e10 <SampleGamma+0x50>
   17eae:	movss  xmm0,DWORD PTR [rsp+0x1c]
   17eb4:	add    rsp,0x58
   17eb8:	ret    
   17eb9:	nop    DWORD PTR [rax+0x0]
   17ec0:	pxor   xmm0,xmm0
   17ec4:	cvtss2sd xmm0,xmm1
   17ec8:	movsd  xmm1,QWORD PTR [rsp+0x8]
   17ece:	divsd  xmm1,QWORD PTR [rsp+0x10]
   17ed4:	call   3520 <pow@plt>
   17ed9:	pxor   xmm5,xmm5
   17edd:	cvtsd2ss xmm5,xmm0
   17ee1:	movss  DWORD PTR [rsp+0x1c],xmm5
   17ee7:	call   36060 <sre_random>
   17eec:	movss  xmm5,DWORD PTR [rsp+0x1c]
   17ef2:	xorps  xmm5,XMMWORD PTR [rip+0x25ed7]        # 3ddd0 <_IO_stdin_used+0xdd0>
   17ef9:	movsd  QWORD PTR [rsp+0x20],xmm0
   17eff:	pxor   xmm0,xmm0
   17f03:	cvtss2sd xmm0,xmm5
   17f07:	call   3800 <exp@plt>
   17f0c:	comisd xmm0,QWORD PTR [rsp+0x20]
   17f12:	jb     17e10 <SampleGamma+0x50>
   17f18:	movss  xmm0,DWORD PTR [rsp+0x1c]
   17f1e:	add    rsp,0x58
   17f22:	ret    
   17f23:	nop    DWORD PTR [rax+rax*1+0x0]
   17f28:	cvtss2sd xmm0,xmm0
   17f2c:	movsd  QWORD PTR [rsp+0x48],xmm0
   17f32:	addsd  xmm0,xmm0
   17f36:	pxor   xmm6,xmm6
   17f3a:	movsd  xmm7,QWORD PTR [rip+0x25eae]        # 3ddf0 <_IO_stdin_used+0xdf0>
   17f42:	subsd  xmm0,xmm7
   17f46:	movsd  QWORD PTR [rsp+0x8],xmm7
   17f4c:	movsd  QWORD PTR [rsp+0x40],xmm0
   17f52:	sqrtsd xmm0,xmm0
   17f56:	cvtsd2ss xmm6,xmm0
   17f5a:	movss  DWORD PTR [rsp+0x20],xmm6
   17f60:	pxor   xmm4,xmm4
   17f64:	ucomisd xmm4,QWORD PTR [rsp+0x40]
   17f6a:	ja     180a1 <SampleGamma+0x2e1>
   17f70:	call   36060 <sre_random>
   17f75:	pxor   xmm3,xmm3
   17f79:	movss  xmm1,DWORD PTR [rip+0x2541b]        # 3d39c <_IO_stdin_used+0x39c>
   17f81:	divss  xmm1,DWORD PTR [rsp+0x20]
   17f87:	cvtsd2ss xmm3,xmm0
   17f8b:	movss  xmm0,DWORD PTR [rip+0x25409]        # 3d39c <_IO_stdin_used+0x39c>
   17f93:	cvtss2sd xmm1,xmm1
   17f97:	subss  xmm0,xmm3
   17f9b:	divss  xmm3,xmm0
   17f9f:	cvtss2sd xmm3,xmm3
   17fa3:	movapd xmm0,xmm3
   17fa7:	movsd  QWORD PTR [rsp+0x28],xmm3
   17fad:	call   3520 <pow@plt>
   17fb2:	mulsd  xmm0,QWORD PTR [rsp+0x48]
   17fb8:	pxor   xmm5,xmm5
   17fbc:	cvtsd2ss xmm5,xmm0
   17fc0:	movss  xmm0,DWORD PTR [rsp+0x10]
   17fc6:	movss  DWORD PTR [rsp+0x1c],xmm5
   17fcc:	subss  xmm0,xmm5
   17fd0:	cvtss2sd xmm0,xmm0
   17fd4:	call   3800 <exp@plt>
   17fd9:	movsd  xmm3,QWORD PTR [rsp+0x28]
   17fdf:	movss  xmm1,DWORD PTR [rsp+0x10]
   17fe5:	divss  xmm1,DWORD PTR [rsp+0x20]
   17feb:	cvtss2sd xmm1,xmm1
   17fef:	addsd  xmm1,QWORD PTR [rsp+0x8]
   17ff5:	movsd  QWORD PTR [rsp+0x38],xmm0
   17ffb:	movapd xmm0,xmm3
   17fff:	movsd  QWORD PTR [rsp+0x30],xmm3
   18005:	call   3520 <pow@plt>
   1800a:	movsd  xmm6,QWORD PTR [rsp+0x8]
   18010:	movsd  xmm3,QWORD PTR [rsp+0x30]
   18016:	movsd  QWORD PTR [rsp+0x28],xmm0
   1801c:	movapd xmm1,xmm6
   18020:	divsd  xmm1,xmm3
   18024:	addsd  xmm1,xmm6
   18028:	movsd  QWORD PTR [rsp+0x30],xmm1
   1802e:	call   36060 <sre_random>
   18033:	movsd  xmm6,QWORD PTR [rip+0x26cdd]        # 3ed18 <_IO_stdin_used+0x1d18>
   1803b:	movsd  xmm2,QWORD PTR [rsp+0x38]
   18041:	movapd xmm3,xmm0
   18045:	movsd  xmm1,QWORD PTR [rsp+0x30]
   1804b:	movsd  xmm0,QWORD PTR [rsp+0x28]
   18051:	mulsd  xmm6,xmm2
   18055:	mulsd  xmm1,xmm1
   18059:	mulsd  xmm0,xmm6
   1805d:	mulsd  xmm0,xmm1
   18061:	cvtsd2ss xmm0,xmm0
   18065:	cvtss2sd xmm0,xmm0
   18069:	comisd xmm0,xmm3
   1806d:	jb     17f60 <SampleGamma+0x1a0>
   18073:	movss  xmm0,DWORD PTR [rsp+0x1c]
   18079:	add    rsp,0x58
   1807d:	ret    
   1807e:	xchg   ax,ax
   18080:	lea    rdi,[rip+0x26c29]        # 3ecb0 <_IO_stdin_used+0x1cb0>
   18087:	xor    eax,eax
   18089:	call   317f0 <Die>
   1808e:	mov    DWORD PTR [rsp+0x1c],0x0
   18096:	movss  xmm0,DWORD PTR [rsp+0x1c]
   1809c:	add    rsp,0x58
   180a0:	ret    
   180a1:	movsd  xmm0,QWORD PTR [rsp+0x40]
   180a7:	call   37e0 <sqrt@plt>
   180ac:	jmp    17f70 <SampleGamma+0x1b0>
   180b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   180bc:	nop    DWORD PTR [rax+0x0]

00000000000180c0 <SampleDirichlet>:
   180c0:	endbr64 
   180c4:	push   r14
   180c6:	push   r13
   180c8:	mov    r13d,esi
   180cb:	push   r12
   180cd:	push   rbp
   180ce:	mov    rbp,rdx
   180d1:	push   rbx
   180d2:	test   esi,esi
   180d4:	jle    180fd <SampleDirichlet+0x3d>
   180d6:	mov    r12,rdi
   180d9:	lea    r14d,[rsi-0x1]
   180dd:	xor    ebx,ebx
   180df:	nop
   180e0:	movss  xmm0,DWORD PTR [r12+rbx*4]
   180e6:	call   17dc0 <SampleGamma>
   180eb:	mov    rax,rbx
   180ee:	movss  DWORD PTR [rbp+rbx*4+0x0],xmm0
   180f4:	add    rbx,0x1
   180f8:	cmp    rax,r14
   180fb:	jne    180e0 <SampleDirichlet+0x20>
   180fd:	pop    rbx
   180fe:	mov    esi,r13d
   18101:	mov    rdi,rbp
   18104:	pop    rbp
   18105:	pop    r12
   18107:	pop    r13
   18109:	pop    r14
   1810b:	jmp    3b290 <FNorm>

0000000000018110 <SampleCountvector>:
   18110:	endbr64 
   18114:	push   r14
   18116:	pxor   xmm0,xmm0
   1811a:	push   r13
   1811c:	mov    r13,rdi
   1811f:	mov    rdi,rcx
   18122:	push   r12
   18124:	mov    r12,rcx
   18127:	push   rbp
   18128:	mov    ebp,edx
   1812a:	push   rbx
   1812b:	mov    ebx,esi
   1812d:	call   3ad60 <FSet>
   18132:	test   ebp,ebp
   18134:	jle    18169 <SampleCountvector+0x59>
   18136:	xor    r14d,r14d
   18139:	nop    DWORD PTR [rax+0x0]
   18140:	mov    esi,ebx
   18142:	mov    rdi,r13
   18145:	add    r14d,0x1
   18149:	call   36600 <FChoose>
   1814e:	movss  xmm0,DWORD PTR [rip+0x25246]        # 3d39c <_IO_stdin_used+0x39c>
   18156:	cdqe   
   18158:	lea    rax,[r12+rax*4]
   1815c:	addss  xmm0,DWORD PTR [rax]
   18160:	movss  DWORD PTR [rax],xmm0
   18164:	cmp    ebp,r14d
   18167:	jne    18140 <SampleCountvector+0x30>
   18169:	pop    rbx
   1816a:	pop    rbp
   1816b:	pop    r12
   1816d:	pop    r13
   1816f:	pop    r14
   18171:	ret    
   18172:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1817d:	nop    DWORD PTR [rax]

0000000000018180 <P_PvecGivenDirichlet>:
   18180:	endbr64 
   18184:	push   r12
   18186:	push   rbp
   18187:	push   rbx
   18188:	sub    rsp,0x20
   1818c:	test   esi,esi
   1818e:	jle    18280 <P_PvecGivenDirichlet+0x100>
   18194:	pxor   xmm2,xmm2
   18198:	lea    eax,[rsi-0x1]
   1819b:	mov    rbx,rdi
   1819e:	mov    rbp,rdx
   181a1:	lea    r12,[rdi+rax*4+0x4]
   181a6:	movss  DWORD PTR [rsp+0x8],xmm2
   181ac:	movaps xmm3,xmm2
   181af:	nop
   181b0:	movss  xmm0,DWORD PTR [rbx]
   181b4:	comiss xmm0,xmm2
   181b7:	jbe    1823e <P_PvecGivenDirichlet+0xbe>
   181bd:	pxor   xmm1,xmm1
   181c1:	movss  DWORD PTR [rsp+0x1c],xmm3
   181c7:	cvtss2sd xmm0,xmm0
   181cb:	cvtss2sd xmm1,DWORD PTR [rbp+0x0]
   181d0:	subsd  xmm1,QWORD PTR [rip+0x25c18]        # 3ddf0 <_IO_stdin_used+0xdf0>
   181d8:	movsd  QWORD PTR [rsp+0x10],xmm1
   181de:	call   35e0 <log@plt>
   181e3:	movsd  xmm1,QWORD PTR [rsp+0x10]
   181e9:	mulsd  xmm1,xmm0
   181ed:	pxor   xmm0,xmm0
   181f1:	cvtss2sd xmm0,DWORD PTR [rsp+0x8]
   181f7:	addsd  xmm1,xmm0
   181fb:	pxor   xmm0,xmm0
   181ff:	cvtss2sd xmm0,DWORD PTR [rbp+0x0]
   18204:	movsd  QWORD PTR [rsp+0x8],xmm1
   1820a:	call   35a50 <Gammln>
   1820f:	movsd  xmm1,QWORD PTR [rsp+0x8]
   18215:	movss  xmm3,DWORD PTR [rsp+0x1c]
   1821b:	pxor   xmm4,xmm4
   1821f:	addss  xmm3,DWORD PTR [rbp+0x0]
   18224:	pxor   xmm2,xmm2
   18228:	cvtsd2ss xmm1,xmm1
   1822c:	cvtss2sd xmm1,xmm1
   18230:	subsd  xmm1,xmm0
   18234:	cvtsd2ss xmm4,xmm1
   18238:	movss  DWORD PTR [rsp+0x8],xmm4
   1823e:	add    rbx,0x4
   18242:	add    rbp,0x4
   18246:	cmp    rbx,r12
   18249:	jne    181b0 <P_PvecGivenDirichlet+0x30>
   1824f:	pxor   xmm0,xmm0
   18253:	cvtss2sd xmm0,xmm3
   18257:	call   35a50 <Gammln>
   1825c:	movapd xmm1,xmm0
   18260:	pxor   xmm0,xmm0
   18264:	cvtss2sd xmm0,DWORD PTR [rsp+0x8]
   1826a:	addsd  xmm0,xmm1
   1826e:	add    rsp,0x20
   18272:	pop    rbx
   18273:	pop    rbp
   18274:	pop    r12
   18276:	cvtsd2ss xmm0,xmm0
   1827a:	ret    
   1827b:	nop    DWORD PTR [rax+rax*1+0x0]
   18280:	pxor   xmm5,xmm5
   18284:	pxor   xmm0,xmm0
   18288:	movss  DWORD PTR [rsp+0x8],xmm5
   1828e:	jmp    18257 <P_PvecGivenDirichlet+0xd7>

0000000000018290 <XNU>:
   18290:	endbr64 
   18294:	push   r15
   18296:	push   r14
   18298:	push   r13
   1829a:	push   r12
   1829c:	mov    r12d,esi
   1829f:	push   rbp
   182a0:	push   rbx
   182a1:	sub    rsp,0x28
   182a5:	mov    QWORD PTR [rsp+0x10],rdi
   182aa:	test   esi,esi
   182ac:	jne    182c0 <XNU+0x30>
   182ae:	add    rsp,0x28
   182b2:	mov    eax,r12d
   182b5:	pop    rbx
   182b6:	pop    rbp
   182b7:	pop    r12
   182b9:	pop    r13
   182bb:	pop    r14
   182bd:	pop    r15
   182bf:	ret    
   182c0:	lea    ebx,[rsi+0x1]
   182c3:	lea    rdi,[rip+0x26a82]        # 3ed4c <_IO_stdin_used+0x1d4c>
   182ca:	mov    esi,0x64
   182cf:	movsxd rdx,ebx
   182d2:	shl    rdx,0x2
   182d6:	call   36810 <sre_malloc>
   182db:	mov    QWORD PTR [rsp+0x8],rax
   182e0:	test   r12d,r12d
   182e3:	jle    1830f <XNU+0x7f>
   182e5:	mov    rcx,QWORD PTR [rsp+0x8]
   182ea:	lea    edx,[r12-0x1]
   182ef:	lea    rax,[rcx+0x4]
   182f3:	lea    rdx,[rcx+rdx*4+0x8]
   182f8:	nop    DWORD PTR [rax+rax*1+0x0]
   18300:	mov    DWORD PTR [rax],0x0
   18306:	add    rax,0x4
   1830a:	cmp    rax,rdx
   1830d:	jne    18300 <XNU+0x70>
   1830f:	mov    rax,QWORD PTR [rsp+0x8]
   18314:	mov    r13d,0x1
   1831a:	mov    r11,0xfffffffffffffffc
   18321:	mov    r15d,0x1
   18327:	lea    r14,[rip+0x26a32]        # 3ed60 <xpam120>
   1832e:	add    rax,0x4
   18332:	mov    QWORD PTR [rsp+0x18],rax
   18337:	mov    ebp,r15d
   1833a:	add    r15d,0x1
   1833e:	cmp    r12d,r15d
   18341:	jl     183fe <XNU+0x16e>
   18347:	mov    rax,QWORD PTR [rsp+0x10]
   1834c:	xor    edi,edi
   1834e:	xor    r8d,r8d
   18351:	xor    edx,edx
   18353:	lea    rcx,[rax+0x1]
   18357:	mov    eax,r15d
   1835a:	nop    WORD PTR [rax+rax*1+0x0]
   18360:	movsx  r9,BYTE PTR [rcx+r13*1]
   18365:	movsx  rsi,BYTE PTR [rcx]
   18369:	lea    r10,[r9+r9*2]
   1836d:	lea    rsi,[rsi+r10*8]
   18371:	sub    rsi,r9
   18374:	mov    r9d,eax
   18377:	add    eax,0x1
   1837a:	add    edx,DWORD PTR [r14+rsi*4]
   1837e:	mov    esi,edx
   18380:	cmp    edx,edi
   18382:	jg     18470 <XNU+0x1e0>
   18388:	mov    r9d,edi
   1838b:	sub    r9d,edx
   1838e:	cmp    edi,0x14
   18391:	jle    18488 <XNU+0x1f8>
   18397:	cmp    r9d,0xe
   1839b:	jle    18498 <XNU+0x208>
   183a1:	cmp    ebp,r8d
   183a4:	jg     183e0 <XNU+0x150>
   183a6:	mov    rdi,QWORD PTR [rsp+0x8]
   183ab:	movsxd rsi,ebp
   183ae:	sub    r8d,ebp
   183b1:	add    r8,rsi
   183b4:	lea    rdx,[rdi+rsi*4]
   183b8:	mov    rdi,QWORD PTR [rsp+0x18]
   183bd:	lea    rsi,[rdi+r8*4]
   183c1:	nop    DWORD PTR [rax+0x0]
   183c8:	mov    DWORD PTR [rdx+r11*1],0x1
   183d0:	add    rdx,0x4
   183d4:	mov    DWORD PTR [rdx-0x4],0x1
   183db:	cmp    rdx,rsi
   183de:	jne    183c8 <XNU+0x138>
   183e0:	mov    r8d,eax
   183e3:	mov    ebp,eax
   183e5:	xor    edi,edi
   183e7:	xor    edx,edx
   183e9:	add    rcx,0x1
   183ed:	cmp    ebx,eax
   183ef:	jne    18360 <XNU+0xd0>
   183f5:	cmp    edi,0x14
   183f8:	jg     184a0 <XNU+0x210>
   183fe:	sub    r11,0x4
   18402:	add    r13,0x1
   18406:	cmp    r15d,0x5
   1840a:	jne    18337 <XNU+0xa7>
   18410:	test   r12d,r12d
   18413:	jle    184e5 <XNU+0x255>
   18419:	lea    ecx,[r12-0x1]
   1841e:	mov    rsi,QWORD PTR [rsp+0x8]
   18423:	mov    rdi,QWORD PTR [rsp+0x10]
   18428:	xor    r12d,r12d
   1842b:	add    rcx,0x2
   1842f:	mov    eax,0x1
   18434:	nop    DWORD PTR [rax+0x0]
   18438:	mov    edx,DWORD PTR [rsi+rax*4]
   1843b:	test   edx,edx
   1843d:	je     18450 <XNU+0x1c0>
   1843f:	movzx  ebx,BYTE PTR [rip+0x49e56]        # 6229c <Alphabet_iupac>
   18446:	add    r12d,0x1
   1844a:	lea    edx,[rbx-0x1]
   1844d:	mov    BYTE PTR [rdi+rax*1],dl
   18450:	add    rax,0x1
   18454:	cmp    rcx,rax
   18457:	jne    18438 <XNU+0x1a8>
   18459:	mov    rdi,QWORD PTR [rsp+0x8]
   1845e:	call   3460 <free@plt>
   18463:	jmp    182ae <XNU+0x1e>
   18468:	nop    DWORD PTR [rax+rax*1+0x0]
   18470:	mov    edi,edx
   18472:	mov    r8d,r9d
   18475:	test   esi,esi
   18477:	js     183e0 <XNU+0x150>
   1847d:	jmp    183e9 <XNU+0x159>
   18482:	nop    WORD PTR [rax+rax*1+0x0]
   18488:	cmp    r9d,0xe
   1848c:	jg     183e0 <XNU+0x150>
   18492:	nop    WORD PTR [rax+rax*1+0x0]
   18498:	mov    r9d,r8d
   1849b:	jmp    18472 <XNU+0x1e2>
   1849d:	nop    DWORD PTR [rax]
   184a0:	cmp    ebp,r8d
   184a3:	jg     183fe <XNU+0x16e>
   184a9:	movsxd rdx,ebp
   184ac:	mov    rax,QWORD PTR [rsp+0x8]
   184b1:	mov    rcx,QWORD PTR [rsp+0x18]
   184b6:	sub    r8d,ebp
   184b9:	add    r8,rdx
   184bc:	lea    rax,[rax+rdx*4]
   184c0:	lea    rdx,[rcx+r8*4]
   184c4:	nop    DWORD PTR [rax+0x0]
   184c8:	mov    DWORD PTR [rax+r11*1],0x1
   184d0:	add    rax,0x4
   184d4:	mov    DWORD PTR [rax-0x4],0x1
   184db:	cmp    rdx,rax
   184de:	jne    184c8 <XNU+0x238>
   184e0:	jmp    183fe <XNU+0x16e>
   184e5:	xor    r12d,r12d
   184e8:	jmp    18459 <XNU+0x1c9>
   184ed:	nop    DWORD PTR [rax]

00000000000184f0 <TraceScoreCorrection>:
   184f0:	endbr64 
   184f4:	push   r15
   184f6:	pxor   xmm0,xmm0
   184fa:	push   r14
   184fc:	push   r13
   184fe:	push   r12
   18500:	push   rbp
   18501:	push   rbx
   18502:	sub    rsp,0xc8
   18509:	mov    rax,QWORD PTR fs:0x28
   18512:	mov    QWORD PTR [rsp+0xb8],rax
   1851a:	xor    eax,eax
   1851c:	test   rsi,rsi
   1851f:	je     1868c <TraceScoreCorrection+0x19c>
   18525:	mov    r15,rsi
   18528:	mov    r13,rsp
   1852b:	mov    esi,DWORD PTR [rip+0x49dcf]        # 62300 <Alphabet_size>
   18531:	mov    r12,rdi
   18534:	mov    rdi,r13
   18537:	mov    rbp,rdx
   1853a:	call   3ad60 <FSet>
   1853f:	mov    eax,DWORD PTR [r15]
   18542:	mov    edx,DWORD PTR [rip+0x49db8]        # 62300 <Alphabet_size>
   18548:	test   eax,eax
   1854a:	jle    185a0 <TraceScoreCorrection+0xb0>
   1854c:	xor    ebx,ebx
   1854e:	jmp    18561 <TraceScoreCorrection+0x71>
   18550:	cmp    al,0x3
   18552:	je     186b8 <TraceScoreCorrection+0x1c8>
   18558:	add    rbx,0x1
   1855c:	cmp    DWORD PTR [r15],ebx
   1855f:	jle    185a0 <TraceScoreCorrection+0xb0>
   18561:	mov    rax,QWORD PTR [r15+0x8]
   18565:	movzx  eax,BYTE PTR [rax+rbx*1]
   18569:	cmp    al,0x1
   1856b:	jne    18550 <TraceScoreCorrection+0x60>
   1856d:	mov    rax,QWORD PTR [r15+0x10]
   18571:	mov    rdi,r13
   18574:	movsxd rcx,DWORD PTR [rax+rbx*4]
   18578:	mov    rax,QWORD PTR [r12+0x98]
   18580:	add    rbx,0x1
   18584:	mov    rsi,QWORD PTR [rax+rcx*8]
   18588:	call   3ae90 <FAdd>
   1858d:	mov    edx,DWORD PTR [rip+0x49d6d]        # 62300 <Alphabet_size>
   18593:	cmp    DWORD PTR [r15],ebx
   18596:	jg     18561 <TraceScoreCorrection+0x71>
   18598:	nop    DWORD PTR [rax+rax*1+0x0]
   185a0:	mov    esi,edx
   185a2:	mov    rdi,r13
   185a5:	call   3b290 <FNorm>
   185aa:	mov    eax,DWORD PTR [rip+0x49d50]        # 62300 <Alphabet_size>
   185b0:	test   eax,eax
   185b2:	jle    185e8 <TraceScoreCorrection+0xf8>
   185b4:	xor    ebx,ebx
   185b6:	lea    r14,[rsp+0x50]
   185bb:	nop    DWORD PTR [rax+rax*1+0x0]
   185c0:	movss  xmm0,DWORD PTR [r13+rbx*4+0x0]
   185c7:	movss  xmm1,DWORD PTR [r12+rbx*4+0xe0]
   185d1:	call   17710 <Prob2Score>
   185d6:	mov    DWORD PTR [r14+rbx*4],eax
   185da:	mov    eax,DWORD PTR [rip+0x49d20]        # 62300 <Alphabet_size>
   185e0:	add    rbx,0x1
   185e4:	cmp    eax,ebx
   185e6:	jg     185c0 <TraceScoreCorrection+0xd0>
   185e8:	add    r12,0xe0
   185ef:	cmp    DWORD PTR [rip+0x49ca7],eax        # 6229c <Alphabet_iupac>
   185f5:	movsxd rbx,eax
   185f8:	lea    r14,[rsp+0x50]
   185fd:	jle    1861d <TraceScoreCorrection+0x12d>
   185ff:	nop
   18600:	mov    edx,ebx
   18602:	mov    rsi,r12
   18605:	mov    rdi,r13
   18608:	call   1bf50 <DegenerateSymbolScore>
   1860d:	mov    DWORD PTR [r14+rbx*4],eax
   18611:	add    rbx,0x1
   18615:	cmp    DWORD PTR [rip+0x49c81],ebx        # 6229c <Alphabet_iupac>
   1861b:	jg     18600 <TraceScoreCorrection+0x110>
   1861d:	mov    eax,DWORD PTR [r15]
   18620:	mov    esi,0xffffe0c0
   18625:	test   eax,eax
   18627:	jle    1867e <TraceScoreCorrection+0x18e>
   18629:	lea    esi,[rax-0x1]
   1862c:	mov    rdi,QWORD PTR [r15+0x8]
   18630:	xor    eax,eax
   18632:	xor    ecx,ecx
   18634:	jmp    18643 <TraceScoreCorrection+0x153>
   18636:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18640:	mov    rax,rdx
   18643:	movzx  edx,BYTE PTR [rdi+rax*1]
   18647:	and    edx,0xfffffffd
   1864a:	cmp    dl,0x1
   1864d:	jne    18661 <TraceScoreCorrection+0x171>
   1864f:	mov    rdx,QWORD PTR [r15+0x18]
   18653:	movsxd rdx,DWORD PTR [rdx+rax*4]
   18657:	movsx  rdx,BYTE PTR [rbp+rdx*1+0x0]
   1865d:	add    ecx,DWORD PTR [rsp+rdx*4+0x50]
   18661:	lea    rdx,[rax+0x1]
   18665:	cmp    rax,rsi
   18668:	jne    18640 <TraceScoreCorrection+0x150>
   1866a:	pxor   xmm0,xmm0
   1866e:	cvtsi2sd xmm0,ecx
   18672:	subsd  xmm0,QWORD PTR [rip+0x26f2e]        # 3f5a8 <xpam120+0x848>
   1867a:	cvttsd2si esi,xmm0
   1867e:	xor    edi,edi
   18680:	call   179b0 <ILogsum>
   18685:	mov    edi,eax
   18687:	call   17820 <Scorify>
   1868c:	mov    rax,QWORD PTR [rsp+0xb8]
   18694:	xor    rax,QWORD PTR fs:0x28
   1869d:	jne    186df <TraceScoreCorrection+0x1ef>
   1869f:	add    rsp,0xc8
   186a6:	pop    rbx
   186a7:	pop    rbp
   186a8:	pop    r12
   186aa:	pop    r13
   186ac:	pop    r14
   186ae:	pop    r15
   186b0:	ret    
   186b1:	nop    DWORD PTR [rax+0x0]
   186b8:	mov    rax,QWORD PTR [r15+0x10]
   186bc:	mov    rdi,r13
   186bf:	movsxd rcx,DWORD PTR [rax+rbx*4]
   186c3:	mov    rax,QWORD PTR [r12+0xa0]
   186cb:	mov    rsi,QWORD PTR [rax+rcx*8]
   186cf:	call   3ae90 <FAdd>
   186d4:	mov    edx,DWORD PTR [rip+0x49c26]        # 62300 <Alphabet_size>
   186da:	jmp    18558 <TraceScoreCorrection+0x68>
   186df:	call   3570 <__stack_chk_fail@plt>
   186e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   186ef:	nop

00000000000186f0 <SantaCruzCorrection>:
   186f0:	endbr64 
   186f4:	pxor   xmm0,xmm0
   186f8:	ret    
   186f9:	nop    DWORD PTR [rax+0x0]

0000000000018700 <HMMERBanner>:
   18700:	endbr64 
   18704:	push   r12
   18706:	mov    rcx,rsi
   18709:	mov    r12,rdi
   1870c:	lea    rdx,[rip+0x2a212]        # 42925 <cof.6115+0x125>
   18713:	mov    esi,0x1
   18718:	xor    eax,eax
   1871a:	call   37c0 <__fprintf_chk@plt>
   1871f:	lea    r9,[rip+0x26e8a]        # 3f5b0 <xpam120+0x850>
   18726:	mov    rdi,r12
   18729:	xor    eax,eax
   1872b:	lea    r8,[rip+0x25043]        # 3d775 <_IO_stdin_used+0x775>
   18732:	lea    rcx,[rip+0x26e80]        # 3f5b9 <xpam120+0x859>
   18739:	mov    esi,0x1
   1873e:	lea    rdx,[rip+0x26e7a]        # 3f5bf <xpam120+0x85f>
   18745:	call   37c0 <__fprintf_chk@plt>
   1874a:	mov    rdi,r12
   1874d:	mov    esi,0x1
   18752:	xor    eax,eax
   18754:	lea    rcx,[rip+0x26e75]        # 3f5d0 <xpam120+0x870>
   1875b:	lea    rdx,[rip+0x2a1c3]        # 42925 <cof.6115+0x125>
   18762:	call   37c0 <__fprintf_chk@plt>
   18767:	mov    rdi,r12
   1876a:	mov    esi,0x1
   1876f:	xor    eax,eax
   18771:	lea    rcx,[rip+0x26ea0]        # 3f618 <xpam120+0x8b8>
   18778:	lea    rdx,[rip+0x2a1a6]        # 42925 <cof.6115+0x125>
   1877f:	call   37c0 <__fprintf_chk@plt>
   18784:	mov    rcx,r12
   18787:	pop    r12
   18789:	mov    edx,0x48
   1878e:	mov    esi,0x1
   18793:	lea    rdi,[rip+0x26ebe]        # 3f658 <xpam120+0x8f8>
   1879a:	jmp    37b0 <fwrite@plt>
   1879f:	nop

00000000000187a0 <Getword>:
   187a0:	endbr64 
   187a4:	cmp    QWORD PTR [rip+0x49614],0x0        # 61dc0 <sptr.6614>
   187ac:	push   r12
   187ae:	mov    r12d,esi
   187b1:	push   rbp
   187b2:	mov    rbp,rdi
   187b5:	push   rbx
   187b6:	je     187d2 <Getword+0x32>
   187b8:	lea    rsi,[rip+0x2950d]        # 41ccc <CSWTCH.18+0x60c>
   187bf:	xor    edi,edi
   187c1:	call   3770 <strtok@plt>
   187c6:	mov    QWORD PTR [rip+0x495f3],rax        # 61dc0 <sptr.6614>
   187cd:	test   rax,rax
   187d0:	jne    18838 <Getword+0x98>
   187d2:	lea    rbx,[rip+0x493e7]        # 61bc0 <buffer.6613>
   187d9:	jmp    18810 <Getword+0x70>
   187db:	nop    DWORD PTR [rax+rax*1+0x0]
   187e0:	mov    esi,0x23
   187e5:	mov    rdi,rbx
   187e8:	call   3590 <strchr@plt>
   187ed:	test   rax,rax
   187f0:	je     187f5 <Getword+0x55>
   187f2:	mov    BYTE PTR [rax],0x0
   187f5:	lea    rsi,[rip+0x294d0]        # 41ccc <CSWTCH.18+0x60c>
   187fc:	mov    rdi,rbx
   187ff:	call   3770 <strtok@plt>
   18804:	mov    QWORD PTR [rip+0x495b5],rax        # 61dc0 <sptr.6614>
   1880b:	test   rax,rax
   1880e:	jne    18838 <Getword+0x98>
   18810:	mov    rdx,rbp
   18813:	mov    esi,0x200
   18818:	mov    rdi,rbx
   1881b:	call   3620 <fgets@plt>
   18820:	mov    QWORD PTR [rip+0x49599],rax        # 61dc0 <sptr.6614>
   18827:	test   rax,rax
   1882a:	jne    187e0 <Getword+0x40>
   1882c:	pop    rbx
   1882d:	pop    rbp
   1882e:	pop    r12
   18830:	ret    
   18831:	nop    DWORD PTR [rax+0x0]
   18838:	cmp    r12d,0x2
   1883c:	je     188c0 <Getword+0x120>
   18842:	cmp    r12d,0x4
   18846:	je     18860 <Getword+0xc0>
   18848:	cmp    r12d,0x1
   1884c:	je     18888 <Getword+0xe8>
   1884e:	pop    rbx
   1884f:	mov    rax,QWORD PTR [rip+0x4956a]        # 61dc0 <sptr.6614>
   18856:	pop    rbp
   18857:	pop    r12
   18859:	ret    
   1885a:	nop    WORD PTR [rax+rax*1+0x0]
   18860:	cmp    BYTE PTR [rax],0x0
   18863:	jne    1884e <Getword+0xae>
   18865:	xor    eax,eax
   18867:	lea    rdi,[rip+0x26e3a]        # 3f6a8 <xpam120+0x948>
   1886e:	call   318f0 <Warn>
   18873:	xor    eax,eax
   18875:	mov    QWORD PTR [rip+0x49540],0x0        # 61dc0 <sptr.6614>
   18880:	jmp    1882c <Getword+0x8c>
   18882:	nop    WORD PTR [rax+rax*1+0x0]
   18888:	mov    rdi,rax
   1888b:	call   3aa60 <IsInt>
   18890:	test   eax,eax
   18892:	jne    1884e <Getword+0xae>
   18894:	mov    rsi,QWORD PTR [rip+0x49525]        # 61dc0 <sptr.6614>
   1889b:	xor    eax,eax
   1889d:	lea    rdi,[rip+0x26e34]        # 3f6d8 <xpam120+0x978>
   188a4:	call   318f0 <Warn>
   188a9:	xor    eax,eax
   188ab:	mov    QWORD PTR [rip+0x4950a],0x0        # 61dc0 <sptr.6614>
   188b6:	jmp    1882c <Getword+0x8c>
   188bb:	nop    DWORD PTR [rax+rax*1+0x0]
   188c0:	mov    rdi,rax
   188c3:	call   3ab70 <IsReal>
   188c8:	test   eax,eax
   188ca:	jne    1884e <Getword+0xae>
   188cc:	mov    rsi,QWORD PTR [rip+0x494ed]        # 61dc0 <sptr.6614>
   188d3:	xor    eax,eax
   188d5:	lea    rdi,[rip+0x26e24]        # 3f700 <xpam120+0x9a0>
   188dc:	call   318f0 <Warn>
   188e1:	xor    eax,eax
   188e3:	mov    QWORD PTR [rip+0x494d2],0x0        # 61dc0 <sptr.6614>
   188ee:	jmp    1882c <Getword+0x8c>
   188f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   188fe:	xchg   ax,ax

0000000000018900 <Getline>:
   18900:	endbr64 
   18904:	push   r12
   18906:	mov    r12d,esi
   18909:	push   rbp
   1890a:	mov    rbp,rdx
   1890d:	push   rbx
   1890e:	mov    rbx,rdi
   18911:	nop    DWORD PTR [rax+0x0]
   18918:	mov    rdx,rbp
   1891b:	mov    esi,r12d
   1891e:	mov    rdi,rbx
   18921:	call   3620 <fgets@plt>
   18926:	test   rax,rax
   18929:	je     1895b <Getline+0x5b>
   1892b:	call   3820 <__ctype_b_loc@plt>
   18930:	mov    rsi,QWORD PTR [rax]
   18933:	mov    rax,rbx
   18936:	jmp    18944 <Getline+0x44>
   18938:	nop    DWORD PTR [rax+rax*1+0x0]
   18940:	add    rax,0x1
   18944:	movsx  rcx,BYTE PTR [rax]
   18948:	test   BYTE PTR [rsi+rcx*2+0x1],0x20
   1894d:	jne    18940 <Getline+0x40>
   1894f:	cmp    cl,0x23
   18952:	je     18918 <Getline+0x18>
   18954:	test   cl,cl
   18956:	je     18918 <Getline+0x18>
   18958:	mov    rax,rbx
   1895b:	pop    rbx
   1895c:	pop    rbp
   1895d:	pop    r12
   1895f:	ret    

0000000000018960 <SetAutocuts>:
   18960:	endbr64 
   18964:	mov    edx,DWORD PTR [rdi+0x20]
   18967:	cmp    edx,0x1
   1896a:	je     189a8 <SetAutocuts+0x48>
   1896c:	cmp    edx,0x2
   1896f:	je     18980 <SetAutocuts+0x20>
   18971:	mov    eax,0x1
   18976:	cmp    edx,0x3
   18979:	je     189e0 <SetAutocuts+0x80>
   1897b:	ret    
   1897c:	nop    DWORD PTR [rax+0x0]
   18980:	mov    eax,DWORD PTR [rsi+0x1c8]
   18986:	and    eax,0x1000
   1898b:	je     1897b <SetAutocuts+0x1b>
   1898d:	movss  xmm0,DWORD PTR [rsi+0x80]
   18995:	movss  DWORD PTR [rdi],xmm0
   18999:	movss  xmm0,DWORD PTR [rsi+0x84]
   189a1:	jmp    189c3 <SetAutocuts+0x63>
   189a3:	nop    DWORD PTR [rax+rax*1+0x0]
   189a8:	mov    eax,DWORD PTR [rsi+0x1c8]
   189ae:	and    eax,0x400
   189b3:	je     1897b <SetAutocuts+0x1b>
   189b5:	movss  xmm0,DWORD PTR [rsi+0x70]
   189ba:	movss  DWORD PTR [rdi],xmm0
   189be:	movss  xmm0,DWORD PTR [rsi+0x74]
   189c3:	movss  DWORD PTR [rdi+0x10],xmm0
   189c8:	movsd  xmm0,QWORD PTR [rip+0x262d8]        # 3eca8 <_IO_stdin_used+0x1ca8>
   189d0:	mov    eax,0x1
   189d5:	movsd  QWORD PTR [rdi+0x18],xmm0
   189da:	movsd  QWORD PTR [rdi+0x8],xmm0
   189df:	ret    
   189e0:	mov    eax,DWORD PTR [rsi+0x1c8]
   189e6:	and    eax,0x800
   189eb:	je     1897b <SetAutocuts+0x1b>
   189ed:	movss  xmm0,DWORD PTR [rsi+0x78]
   189f2:	movss  DWORD PTR [rdi],xmm0
   189f6:	movss  xmm0,DWORD PTR [rsi+0x7c]
   189fb:	jmp    189c3 <SetAutocuts+0x63>
   189fd:	nop    DWORD PTR [rax]

0000000000018a00 <matassign2hmm>:
   18a00:	push   r15
   18a02:	push   r14
   18a04:	push   r13
   18a06:	push   r12
   18a08:	mov    r12,rdx
   18a0b:	push   rbp
   18a0c:	mov    rbp,rdi
   18a0f:	push   rbx
   18a10:	lea    rbx,[rdx+0x4]
   18a14:	sub    rsp,0x48
   18a18:	mov    r13d,DWORD PTR [rdi+0x18]
   18a1c:	mov    QWORD PTR [rsp+0x30],rsi
   18a21:	mov    QWORD PTR [rsp+0x28],rcx
   18a26:	mov    QWORD PTR [rsp+0x18],r8
   18a2b:	test   r13d,r13d
   18a2e:	jle    196c0 <matassign2hmm+0xcc0>
   18a34:	lea    edx,[r13-0x1]
   18a38:	mov    rax,rbx
   18a3b:	xor    esi,esi
   18a3d:	lea    rcx,[r12+rdx*4+0x8]
   18a42:	nop    WORD PTR [rax+rax*1+0x0]
   18a48:	mov    edx,DWORD PTR [rax]
   18a4a:	and    edx,0x1
   18a4d:	cmp    edx,0x1
   18a50:	sbb    esi,0xffffffff
   18a53:	add    rax,0x4
   18a57:	cmp    rcx,rax
   18a5a:	jne    18a48 <matassign2hmm+0x48>
   18a5c:	mov    DWORD PTR [rsp+0x24],esi
   18a60:	test   esi,esi
   18a62:	je     196c0 <matassign2hmm+0xcc0>
   18a68:	mov    eax,DWORD PTR [r12+0x4]
   18a6d:	mov    rdx,rbx
   18a70:	mov    ecx,0x1
   18a75:	test   al,0x8
   18a77:	jne    18a9b <matassign2hmm+0x9b>
   18a79:	jmp    19640 <matassign2hmm+0xc40>
   18a7e:	xchg   ax,ax
   18a80:	or     eax,0x10
   18a83:	add    rdx,0x4
   18a87:	add    ecx,0x1
   18a8a:	mov    DWORD PTR [rdx-0x4],eax
   18a8d:	mov    eax,DWORD PTR [rdx]
   18a8f:	mov    r13d,DWORD PTR [rbp+0x18]
   18a93:	test   al,0x8
   18a95:	je     19640 <matassign2hmm+0xc40>
   18a9b:	cmp    ecx,r13d
   18a9e:	jle    18a80 <matassign2hmm+0x80>
   18aa0:	movsxd rcx,r13d
   18aa3:	lea    rdx,[r12+rcx*4]
   18aa7:	mov    eax,DWORD PTR [rdx]
   18aa9:	test   al,0x8
   18aab:	je     18add <matassign2hmm+0xdd>
   18aad:	test   r13d,r13d
   18ab0:	jle    18aeb <matassign2hmm+0xeb>
   18ab2:	lea    rcx,[r12+rcx*4-0x4]
   18ab7:	jmp    18ac9 <matassign2hmm+0xc9>
   18ab9:	nop    DWORD PTR [rax+0x0]
   18ac0:	sub    rcx,0x4
   18ac4:	test   r13d,r13d
   18ac7:	je     18ae7 <matassign2hmm+0xe7>
   18ac9:	or     eax,0x20
   18acc:	sub    r13d,0x1
   18ad0:	sub    rdx,0x4
   18ad4:	mov    DWORD PTR [rdx+0x4],eax
   18ad7:	mov    eax,DWORD PTR [rcx]
   18ad9:	test   al,0x8
   18adb:	jne    18ac0 <matassign2hmm+0xc0>
   18add:	test   r13d,r13d
   18ae0:	jle    18ae7 <matassign2hmm+0xe7>
   18ae2:	or     eax,0x4
   18ae5:	mov    DWORD PTR [rdx],eax
   18ae7:	mov    r13d,DWORD PTR [rbp+0x18]
   18aeb:	movsxd rdx,DWORD PTR [rbp+0x1c]
   18aef:	mov    esi,0x25f
   18af4:	lea    rdi,[rip+0x26d9c]        # 3f897 <xpam120+0xb37>
   18afb:	mov    r14,QWORD PTR [rbp+0x0]
   18aff:	mov    r15,rdx
   18b02:	shl    rdx,0x3
   18b06:	call   36810 <sre_malloc>
   18b0b:	mov    QWORD PTR [rsp+0x10],rax
   18b10:	test   r15d,r15d
   18b13:	jle    18f82 <matassign2hmm+0x582>
   18b19:	mov    rdi,QWORD PTR [rsp+0x10]
   18b1e:	lea    eax,[r13+0x6]
   18b22:	mov    QWORD PTR [rsp+0x38],rbp
   18b27:	mov    rbp,r14
   18b2a:	mov    DWORD PTR [rsp+0x20],eax
   18b2e:	lea    eax,[r15-0x1]
   18b32:	lea    rax,[rdi+rax*8+0x8]
   18b37:	mov    rbx,rdi
   18b3a:	mov    QWORD PTR [rsp+0x8],rax
   18b3f:	nop
   18b40:	mov    edi,DWORD PTR [rsp+0x20]
   18b44:	mov    rsi,rbx
   18b47:	call   209f0 <P7AllocTrace>
   18b4c:	mov    rax,QWORD PTR [rbx]
   18b4f:	mov    rax,QWORD PTR [rax+0x8]
   18b53:	mov    BYTE PTR [rax],0x4
   18b56:	mov    rax,QWORD PTR [rbx]
   18b59:	mov    rdx,QWORD PTR [rax+0x10]
   18b5d:	mov    DWORD PTR [rdx],0x0
   18b63:	mov    rdx,QWORD PTR [rax+0x18]
   18b67:	mov    rax,QWORD PTR [rax+0x8]
   18b6b:	mov    DWORD PTR [rdx],0x0
   18b71:	mov    BYTE PTR [rax+0x1],0x5
   18b75:	mov    rax,QWORD PTR [rbx]
   18b78:	mov    rdx,QWORD PTR [rax+0x10]
   18b7c:	mov    DWORD PTR [rdx+0x4],0x0
   18b83:	mov    rdx,QWORD PTR [rax+0x18]
   18b87:	mov    DWORD PTR [rdx+0x4],0x0
   18b8e:	test   r13d,r13d
   18b91:	jle    19610 <matassign2hmm+0xc10>
   18b97:	mov    rsi,QWORD PTR [rax+0x8]
   18b9b:	mov    DWORD PTR [rsp],r13d
   18b9f:	lea    r15d,[r13-0x1]
   18ba3:	xor    r11d,r11d
   18ba6:	mov    r14d,0x1
   18bac:	xor    r8d,r8d
   18baf:	mov    eax,0x2
   18bb4:	mov    edx,0x2
   18bb9:	jmp    18c66 <matassign2hmm+0x266>
   18bbe:	xchg   ax,ax
   18bc0:	mov    rsi,QWORD PTR [rbx]
   18bc3:	mov    rcx,QWORD PTR [rbp+0x0]
   18bc7:	mov    rsi,QWORD PTR [rsi+0x8]
   18bcb:	movzx  r10d,BYTE PTR [rcx+r11*1]
   18bd0:	cmp    r10b,0x7e
   18bd4:	lea    ecx,[r10-0x20]
   18bd8:	setne  r10b
   18bdc:	test   r9b,0x1
   18be0:	je     18cb8 <matassign2hmm+0x2b8>
   18be6:	cmp    cl,0x3f
   18be9:	ja     18c01 <matassign2hmm+0x201>
   18beb:	movabs r13,0x8000000000006001
   18bf5:	shr    r13,cl
   18bf8:	mov    rcx,r13
   18bfb:	not    rcx
   18bfe:	and    r10d,ecx
   18c01:	add    r8d,0x1
   18c05:	lea    rcx,[rsi+rdx*1]
   18c09:	test   r10b,r10b
   18c0c:	jne    194f0 <matassign2hmm+0xaf0>
   18c12:	cmp    BYTE PTR [rsi+rdx*1-0x1],0x6
   18c17:	je     18df8 <matassign2hmm+0x3f8>
   18c1d:	mov    BYTE PTR [rcx],0x2
   18c20:	mov    rcx,QWORD PTR [rbx]
   18c23:	mov    rsi,QWORD PTR [rcx+0x10]
   18c27:	mov    DWORD PTR [rsi+rdx*4],r8d
   18c2b:	mov    rsi,QWORD PTR [rcx+0x18]
   18c2f:	mov    DWORD PTR [rsi+rdx*4],0x0
   18c36:	add    eax,0x1
   18c39:	mov    r9d,DWORD PTR [r12+r11*4+0x4]
   18c3e:	mov    rsi,QWORD PTR [rcx+0x8]
   18c42:	movsxd rdx,eax
   18c45:	mov    rdi,rdx
   18c48:	and    r9d,0x4
   18c4c:	jne    18d70 <matassign2hmm+0x370>
   18c52:	lea    rcx,[rsi+rdx*1]
   18c56:	lea    rdi,[r11+0x1]
   18c5a:	cmp    r15,r11
   18c5d:	je     18e10 <matassign2hmm+0x410>
   18c63:	mov    r11,rdi
   18c66:	mov    BYTE PTR [rsi+rdx*1],0x0
   18c6a:	mov    r9d,DWORD PTR [r12+r11*4+0x4]
   18c6f:	mov    rdi,rdx
   18c72:	test   r9b,0x2
   18c76:	je     18bc0 <matassign2hmm+0x1c0>
   18c7c:	mov    rcx,QWORD PTR [rbx]
   18c7f:	add    eax,0x1
   18c82:	mov    rcx,QWORD PTR [rcx+0x8]
   18c86:	mov    BYTE PTR [rcx+rdx*1],0x6
   18c8a:	mov    rsi,QWORD PTR [rbx]
   18c8d:	mov    rcx,QWORD PTR [rsi+0x10]
   18c91:	mov    DWORD PTR [rcx+rdx*4],0x0
   18c98:	mov    rcx,QWORD PTR [rsi+0x18]
   18c9c:	mov    DWORD PTR [rcx+rdx*4],0x0
   18ca3:	movsxd rdx,eax
   18ca6:	mov    r9d,DWORD PTR [r12+r11*4+0x4]
   18cab:	mov    rdi,rdx
   18cae:	jmp    18bc3 <matassign2hmm+0x1c3>
   18cb3:	nop    DWORD PTR [rax+rax*1+0x0]
   18cb8:	test   r9b,0x10
   18cbc:	je     18cdc <matassign2hmm+0x2dc>
   18cbe:	cmp    cl,0x3f
   18cc1:	ja     18cd3 <matassign2hmm+0x2d3>
   18cc3:	movabs r13,0x8000000000006001
   18ccd:	bt     r13,rcx
   18cd1:	jb     18cdc <matassign2hmm+0x2dc>
   18cd3:	test   r10b,r10b
   18cd6:	jne    195f0 <matassign2hmm+0xbf0>
   18cdc:	test   r9b,0x20
   18ce0:	je     18d38 <matassign2hmm+0x338>
   18ce2:	cmp    cl,0x3f
   18ce5:	ja     18cfd <matassign2hmm+0x2fd>
   18ce7:	movabs r13,0x8000000000006001
   18cf1:	shr    r13,cl
   18cf4:	mov    rcx,r13
   18cf7:	not    rcx
   18cfa:	and    r10d,ecx
   18cfd:	test   r10b,r10b
   18d00:	je     18c48 <matassign2hmm+0x248>
   18d06:	mov    BYTE PTR [rsi+rdx*1],0x8
   18d0a:	mov    rcx,QWORD PTR [rbx]
   18d0d:	mov    rsi,QWORD PTR [rcx+0x10]
   18d11:	mov    DWORD PTR [rsi+rdx*4],0x0
   18d18:	nop    DWORD PTR [rax+rax*1+0x0]
   18d20:	mov    rsi,QWORD PTR [rcx+0x18]
   18d24:	mov    DWORD PTR [rsi+rdx*4],r14d
   18d28:	add    r14d,0x1
   18d2c:	jmp    18c36 <matassign2hmm+0x236>
   18d31:	nop    DWORD PTR [rax+0x0]
   18d38:	cmp    cl,0x3f
   18d3b:	ja     18d53 <matassign2hmm+0x353>
   18d3d:	movabs r13,0x8000000000006001
   18d47:	shr    r13,cl
   18d4a:	mov    rcx,r13
   18d4d:	not    rcx
   18d50:	and    r10d,ecx
   18d53:	test   r10b,r10b
   18d56:	je     18c48 <matassign2hmm+0x248>
   18d5c:	mov    BYTE PTR [rsi+rdx*1],0x3
   18d60:	mov    rcx,QWORD PTR [rbx]
   18d63:	mov    rsi,QWORD PTR [rcx+0x10]
   18d67:	mov    DWORD PTR [rsi+rdx*4],r8d
   18d6b:	jmp    18d20 <matassign2hmm+0x320>
   18d6d:	nop    DWORD PTR [rax]
   18d70:	cmp    BYTE PTR [rsi+rdx*1-0x1],0x2
   18d75:	jne    1974e <matassign2hmm+0xd4e>
   18d7b:	sub    eax,0x1
   18d7e:	mov    r13d,DWORD PTR [rsp]
   18d82:	movsxd rdx,eax
   18d85:	nop    DWORD PTR [rax]
   18d88:	mov    rdi,rdx
   18d8b:	lea    r9d,[rdx+0x1]
   18d8f:	mov    eax,edx
   18d91:	cmp    BYTE PTR [rsi+rdi*1-0x1],0x2
   18d96:	lea    rdx,[rdi-0x1]
   18d9a:	je     18d88 <matassign2hmm+0x388>
   18d9c:	mov    DWORD PTR [rsp],r13d
   18da0:	lea    rcx,[rsi+rdi*1]
   18da4:	mov    BYTE PTR [rcx],0x7
   18da7:	mov    rdx,QWORD PTR [rbx]
   18daa:	add    eax,0x2
   18dad:	mov    rcx,QWORD PTR [rdx+0x10]
   18db1:	mov    DWORD PTR [rcx+rdi*4],0x0
   18db8:	mov    rcx,QWORD PTR [rdx+0x18]
   18dbc:	mov    rdx,QWORD PTR [rdx+0x8]
   18dc0:	mov    DWORD PTR [rcx+rdi*4],0x0
   18dc7:	movsxd rcx,r9d
   18dca:	mov    BYTE PTR [rdx+rcx*1],0x8
   18dce:	mov    rdx,QWORD PTR [rbx]
   18dd1:	mov    rsi,QWORD PTR [rdx+0x10]
   18dd5:	mov    DWORD PTR [rsi+rcx*4],0x0
   18ddc:	mov    rsi,QWORD PTR [rdx+0x18]
   18de0:	mov    DWORD PTR [rsi+rcx*4],0x0
   18de7:	mov    rsi,QWORD PTR [rdx+0x8]
   18deb:	movsxd rdx,eax
   18dee:	jmp    18c52 <matassign2hmm+0x252>
   18df3:	nop    DWORD PTR [rax+rax*1+0x0]
   18df8:	and    r9d,0x4
   18dfc:	je     18c56 <matassign2hmm+0x256>
   18e02:	lea    r9d,[rax+0x1]
   18e06:	jmp    18da4 <matassign2hmm+0x3a4>
   18e08:	nop    DWORD PTR [rax+rax*1+0x0]
   18e10:	mov    BYTE PTR [rcx],0x9
   18e13:	mov    rcx,QWORD PTR [rbx]
   18e16:	add    eax,0x1
   18e19:	mov    r13d,DWORD PTR [rsp]
   18e1d:	mov    rsi,QWORD PTR [rcx+0x10]
   18e21:	mov    DWORD PTR [rsi+rdx*4],0x0
   18e28:	mov    rsi,QWORD PTR [rcx+0x18]
   18e2c:	mov    DWORD PTR [rsi+rdx*4],0x0
   18e33:	xor    esi,esi
   18e35:	mov    DWORD PTR [rcx],eax
   18e37:	test   eax,eax
   18e39:	jle    18f68 <matassign2hmm+0x568>
   18e3f:	xor    esi,esi
   18e41:	xor    edx,edx
   18e43:	jmp    18ea3 <matassign2hmm+0x4a3>
   18e45:	nop    DWORD PTR [rax]
   18e48:	cmp    r11b,0x3
   18e4c:	je     18f08 <matassign2hmm+0x508>
   18e52:	cmp    r11b,0x6
   18e56:	jne    18ee0 <matassign2hmm+0x4e0>
   18e5c:	add    edx,0x1
   18e5f:	add    esi,0x1
   18e62:	cmp    BYTE PTR [r9+rax*1+0x1],0x7
   18e68:	lea    r10,[rax*4+0x0]
   18e70:	je     19500 <matassign2hmm+0xb00>
   18e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18e80:	mov    BYTE PTR [r14],r11b
   18e83:	mov    rax,QWORD PTR [rcx+0x10]
   18e87:	mov    r9d,DWORD PTR [rax+r10*1]
   18e8b:	mov    DWORD PTR [rax+rdi*4],r9d
   18e8f:	mov    rax,QWORD PTR [rcx+0x18]
   18e93:	mov    r9d,DWORD PTR [rax+r10*1]
   18e97:	mov    DWORD PTR [rax+rdi*4],r9d
   18e9b:	cmp    edx,DWORD PTR [rcx]
   18e9d:	jge    18f68 <matassign2hmm+0x568>
   18ea3:	mov    r9,QWORD PTR [rcx+0x8]
   18ea7:	movsxd rax,edx
   18eaa:	movsxd rdi,esi
   18ead:	lea    r15,[rdi*4+0x0]
   18eb5:	movzx  r11d,BYTE PTR [r9+rax*1]
   18eba:	lea    r14,[r9+rdi*1]
   18ebe:	cmp    r11b,0x2
   18ec2:	jne    18e48 <matassign2hmm+0x448>
   18ec4:	add    esi,0x1
   18ec7:	cmp    BYTE PTR [r9+rax*1+0x1],0x3
   18ecd:	lea    r10,[rax*4+0x0]
   18ed5:	je     19478 <matassign2hmm+0xa78>
   18edb:	add    edx,0x1
   18ede:	jmp    18e80 <matassign2hmm+0x480>
   18ee0:	cmp    r11b,0x7
   18ee4:	jne    18ef2 <matassign2hmm+0x4f2>
   18ee6:	cmp    BYTE PTR [r9+rax*1-0x1],0x6
   18eec:	je     19568 <matassign2hmm+0xb68>
   18ef2:	lea    r10,[rax*4+0x0]
   18efa:	add    edx,0x1
   18efd:	add    esi,0x1
   18f00:	jmp    18e80 <matassign2hmm+0x480>
   18f05:	nop    DWORD PTR [rax]
   18f08:	movzx  r15d,BYTE PTR [r9+rax*1+0x1]
   18f0e:	lea    r10,[rax*4+0x0]
   18f16:	add    esi,0x1
   18f19:	cmp    r15b,0x2
   18f1d:	je     194a0 <matassign2hmm+0xaa0>
   18f23:	add    edx,0x1
   18f26:	cmp    BYTE PTR [r9+rax*1-0x1],0x6
   18f2c:	je     194c8 <matassign2hmm+0xac8>
   18f32:	cmp    r15b,0x7
   18f36:	jne    18e80 <matassign2hmm+0x480>
   18f3c:	mov    BYTE PTR [r14],0x1
   18f40:	mov    r10,QWORD PTR [rcx+0x10]
   18f44:	mov    r14d,DWORD PTR [r10+rax*4]
   18f48:	lea    r9d,[r14+0x1]
   18f4c:	mov    DWORD PTR [r10+rdi*4],r9d
   18f50:	mov    r9,QWORD PTR [rcx+0x18]
   18f54:	mov    eax,DWORD PTR [r9+rax*4]
   18f58:	mov    DWORD PTR [r9+rdi*4],eax
   18f5c:	cmp    edx,DWORD PTR [rcx]
   18f5e:	jl     18ea3 <matassign2hmm+0x4a3>
   18f64:	nop    DWORD PTR [rax+0x0]
   18f68:	mov    DWORD PTR [rcx],esi
   18f6a:	add    rbx,0x8
   18f6e:	add    rbp,0x8
   18f72:	cmp    QWORD PTR [rsp+0x8],rbx
   18f77:	jne    18b40 <matassign2hmm+0x140>
   18f7d:	mov    rbp,QWORD PTR [rsp+0x38]
   18f82:	mov    edi,DWORD PTR [rsp+0x24]
   18f86:	xor    ebx,ebx
   18f88:	call   1aea0 <AllocPlan7>
   18f8d:	mov    rdi,rax
   18f90:	mov    r15,rax
   18f93:	call   1b0d0 <ZeroPlan7>
   18f98:	mov    eax,DWORD PTR [rbp+0x1c]
   18f9b:	test   eax,eax
   18f9d:	jle    18fd3 <matassign2hmm+0x5d3>
   18f9f:	mov    r13,QWORD PTR [rsp+0x10]
   18fa4:	mov    r14,QWORD PTR [rsp+0x30]
   18fa9:	nop    DWORD PTR [rax+0x0]
   18fb0:	mov    rax,QWORD PTR [rbp+0x10]
   18fb4:	mov    rdx,QWORD PTR [r13+rbx*8+0x0]
   18fb9:	mov    rdi,r15
   18fbc:	mov    rsi,QWORD PTR [r14+rbx*8]
   18fc0:	movss  xmm0,DWORD PTR [rax+rbx*4]
   18fc5:	add    rbx,0x1
   18fc9:	call   20cd0 <P7TraceCount>
   18fce:	cmp    DWORD PTR [rbp+0x1c],ebx
   18fd1:	jg     18fb0 <matassign2hmm+0x5b0>
   18fd3:	cmp    QWORD PTR [rbp+0x58],0x0
   18fd8:	je     19040 <matassign2hmm+0x640>
   18fda:	mov    rax,QWORD PTR [r15+0x18]
   18fde:	mov    BYTE PTR [rax],0x20
   18fe1:	mov    r10d,DWORD PTR [rbp+0x18]
   18fe5:	test   r10d,r10d
   18fe8:	jle    1973a <matassign2hmm+0xd3a>
   18fee:	mov    eax,0x1
   18ff3:	mov    ecx,0x1
   18ff8:	mov    r8d,0x2e
   18ffe:	xchg   ax,ax
   19000:	test   BYTE PTR [r12+rax*4],0x1
   19005:	je     19024 <matassign2hmm+0x624>
   19007:	mov    rdx,QWORD PTR [rbp+0x58]
   1900b:	mov    rdi,QWORD PTR [r15+0x18]
   1900f:	movsxd rsi,ecx
   19012:	movzx  edx,BYTE PTR [rdx+rax*1-0x1]
   19017:	cmp    dl,0x20
   1901a:	cmove  edx,r8d
   1901e:	add    ecx,0x1
   19021:	mov    BYTE PTR [rdi+rsi*1],dl
   19024:	add    rax,0x1
   19028:	cmp    DWORD PTR [rbp+0x18],eax
   1902b:	jge    19000 <matassign2hmm+0x600>
   1902d:	movsxd rcx,ecx
   19030:	mov    rax,QWORD PTR [r15+0x18]
   19034:	mov    BYTE PTR [rax+rcx*1],0x0
   19038:	or     DWORD PTR [r15+0x1c8],0x4
   19040:	cmp    QWORD PTR [rbp+0x48],0x0
   19045:	je     190b0 <matassign2hmm+0x6b0>
   19047:	mov    rax,QWORD PTR [r15+0x20]
   1904b:	mov    BYTE PTR [rax],0x20
   1904e:	mov    r9d,DWORD PTR [rbp+0x18]
   19052:	test   r9d,r9d
   19055:	jle    19744 <matassign2hmm+0xd44>
   1905b:	mov    eax,0x1
   19060:	mov    ecx,0x1
   19065:	mov    r8d,0x2e
   1906b:	nop    DWORD PTR [rax+rax*1+0x0]
   19070:	test   BYTE PTR [r12+rax*4],0x1
   19075:	je     19094 <matassign2hmm+0x694>
   19077:	mov    rdx,QWORD PTR [rbp+0x48]
   1907b:	mov    rdi,QWORD PTR [r15+0x20]
   1907f:	movsxd rsi,ecx
   19082:	movzx  edx,BYTE PTR [rdx+rax*1-0x1]
   19087:	cmp    dl,0x20
   1908a:	cmove  edx,r8d
   1908e:	add    ecx,0x1
   19091:	mov    BYTE PTR [rdi+rsi*1],dl
   19094:	add    rax,0x1
   19098:	cmp    DWORD PTR [rbp+0x18],eax
   1909b:	jge    19070 <matassign2hmm+0x670>
   1909d:	movsxd rcx,ecx
   190a0:	mov    rax,QWORD PTR [r15+0x20]
   190a4:	mov    BYTE PTR [rax+rcx*1],0x0
   190a8:	or     DWORD PTR [r15+0x1c8],0x8
   190b0:	cmp    QWORD PTR [rbp+0x50],0x0
   190b5:	je     19123 <matassign2hmm+0x723>
   190b7:	mov    rax,QWORD PTR [r15+0x28]
   190bb:	mov    BYTE PTR [rax],0x20
   190be:	mov    r8d,DWORD PTR [rbp+0x18]
   190c2:	test   r8d,r8d
   190c5:	jle    19730 <matassign2hmm+0xd30>
   190cb:	mov    eax,0x1
   190d0:	mov    ecx,0x1
   190d5:	mov    r8d,0x2e
   190db:	nop    DWORD PTR [rax+rax*1+0x0]
   190e0:	test   BYTE PTR [r12+rax*4],0x1
   190e5:	je     19104 <matassign2hmm+0x704>
   190e7:	mov    rdx,QWORD PTR [rbp+0x50]
   190eb:	mov    rdi,QWORD PTR [r15+0x28]
   190ef:	movsxd rsi,ecx
   190f2:	movzx  edx,BYTE PTR [rdx+rax*1-0x1]
   190f7:	cmp    dl,0x20
   190fa:	cmove  edx,r8d
   190fe:	add    ecx,0x1
   19101:	mov    BYTE PTR [rdi+rsi*1],dl
   19104:	add    rax,0x1
   19108:	cmp    DWORD PTR [rbp+0x18],eax
   1910b:	jge    190e0 <matassign2hmm+0x6e0>
   1910d:	movsxd rcx,ecx
   19110:	mov    rax,QWORD PTR [r15+0x28]
   19114:	mov    BYTE PTR [rax+rcx*1],0x0
   19118:	or     DWORD PTR [r15+0x1c8],0x2000
   19123:	mov    edi,DWORD PTR [rbp+0x18]
   19126:	mov    eax,0x1
   1912b:	mov    edx,0x1
   19130:	test   edi,edi
   19132:	jle    19155 <matassign2hmm+0x755>
   19134:	nop    DWORD PTR [rax+0x0]
   19138:	test   BYTE PTR [r12+rax*4],0x1
   1913d:	je     1914c <matassign2hmm+0x74c>
   1913f:	mov    rcx,QWORD PTR [r15+0x48]
   19143:	movsxd rsi,edx
   19146:	add    edx,0x1
   19149:	mov    DWORD PTR [rcx+rsi*4],eax
   1914c:	add    rax,0x1
   19150:	cmp    DWORD PTR [rbp+0x18],eax
   19153:	jge    19138 <matassign2hmm+0x738>
   19155:	or     DWORD PTR [r15+0x1c8],0x100
   19160:	lea    rsi,[rip+0x2673e]        # 3f8a5 <xpam120+0xb45>
   19167:	mov    rdi,rbp
   1916a:	call   2bbf0 <MSAGetGC>
   1916f:	mov    rbx,rax
   19172:	test   rax,rax
   19175:	je     19232 <matassign2hmm+0x832>
   1917b:	mov    eax,DWORD PTR [r15+0x88]
   19182:	mov    esi,0x380
   19187:	lea    rdi,[rip+0x26709]        # 3f897 <xpam120+0xb37>
   1918e:	lea    edx,[rax+0x1]
   19191:	movsxd rdx,edx
   19194:	shl    rdx,0x2
   19198:	call   36810 <sre_malloc>
   1919d:	mov    esi,DWORD PTR [rbp+0x18]
   191a0:	mov    QWORD PTR [r15+0x60],rax
   191a4:	test   esi,esi
   191a6:	jle    19232 <matassign2hmm+0x832>
   191ac:	mov    r14d,0x1
   191b2:	mov    QWORD PTR [rsp],r15
   191b6:	mov    r13d,0x1
   191bc:	mov    r15,r12
   191bf:	mov    r12,rbp
   191c2:	mov    ebp,r14d
   191c5:	mov    r14,rax
   191c8:	jmp    191e3 <matassign2hmm+0x7e3>
   191ca:	nop    WORD PTR [rax+rax*1+0x0]
   191d0:	sub    eax,0x30
   191d3:	mov    DWORD PTR [rcx],eax
   191d5:	add    ebp,0x1
   191d8:	add    r13,0x1
   191dc:	cmp    DWORD PTR [r12+0x18],r13d
   191e1:	jl     19228 <matassign2hmm+0x828>
   191e3:	test   BYTE PTR [r15+r13*4],0x1
   191e8:	je     191d8 <matassign2hmm+0x7d8>
   191ea:	call   3820 <__ctype_b_loc@plt>
   191ef:	movsx  rsi,BYTE PTR [rbx+r13*1-0x1]
   191f5:	mov    r8,rax
   191f8:	mov    rcx,QWORD PTR [r8]
   191fb:	mov    rax,rsi
   191fe:	movzx  esi,WORD PTR [rcx+rsi*2]
   19202:	movsxd rcx,ebp
   19205:	lea    rcx,[r14+rcx*4]
   19209:	test   si,0x800
   1920e:	jne    191d0 <matassign2hmm+0x7d0>
   19210:	test   si,0x200
   19215:	je     19680 <matassign2hmm+0xc80>
   1921b:	sub    eax,0x57
   1921e:	mov    DWORD PTR [rcx],eax
   19220:	jmp    191d5 <matassign2hmm+0x7d5>
   19222:	nop    WORD PTR [rax+rax*1+0x0]
   19228:	mov    rbp,r12
   1922b:	mov    r12,r15
   1922e:	mov    r15,QWORD PTR [rsp]
   19232:	lea    rsi,[rip+0x26672]        # 3f8ab <xpam120+0xb4b>
   19239:	mov    rdi,rbp
   1923c:	call   2bbf0 <MSAGetGC>
   19241:	mov    rbx,rax
   19244:	test   rax,rax
   19247:	je     19302 <matassign2hmm+0x902>
   1924d:	mov    eax,DWORD PTR [r15+0x88]
   19254:	mov    esi,0x38f
   19259:	lea    rdi,[rip+0x26637]        # 3f897 <xpam120+0xb37>
   19260:	lea    edx,[rax+0x1]
   19263:	movsxd rdx,edx
   19266:	shl    rdx,0x2
   1926a:	call   36810 <sre_malloc>
   1926f:	mov    ecx,DWORD PTR [rbp+0x18]
   19272:	mov    QWORD PTR [r15+0x68],rax
   19276:	test   ecx,ecx
   19278:	jle    19302 <matassign2hmm+0x902>
   1927e:	mov    r14d,0x1
   19284:	mov    QWORD PTR [rsp],r15
   19288:	mov    r13d,0x1
   1928e:	mov    r15,r12
   19291:	mov    r12,rbp
   19294:	mov    ebp,r14d
   19297:	mov    r14,rax
   1929a:	jmp    192b3 <matassign2hmm+0x8b3>
   1929c:	nop    DWORD PTR [rax+0x0]
   192a0:	sub    eax,0x30
   192a3:	mov    DWORD PTR [rcx],eax
   192a5:	add    ebp,0x1
   192a8:	add    r13,0x1
   192ac:	cmp    DWORD PTR [r12+0x18],r13d
   192b1:	jl     192f8 <matassign2hmm+0x8f8>
   192b3:	test   BYTE PTR [r15+r13*4],0x1
   192b8:	je     192a8 <matassign2hmm+0x8a8>
   192ba:	call   3820 <__ctype_b_loc@plt>
   192bf:	movsx  rsi,BYTE PTR [rbx+r13*1-0x1]
   192c5:	mov    r8,rax
   192c8:	mov    rcx,QWORD PTR [r8]
   192cb:	mov    rax,rsi
   192ce:	movzx  esi,WORD PTR [rcx+rsi*2]
   192d2:	movsxd rcx,ebp
   192d5:	lea    rcx,[r14+rcx*4]
   192d9:	test   si,0x800
   192de:	jne    192a0 <matassign2hmm+0x8a0>
   192e0:	test   si,0x200
   192e5:	je     196a0 <matassign2hmm+0xca0>
   192eb:	sub    eax,0x57
   192ee:	mov    DWORD PTR [rcx],eax
   192f0:	jmp    192a5 <matassign2hmm+0x8a5>
   192f2:	nop    WORD PTR [rax+rax*1+0x0]
   192f8:	mov    rbp,r12
   192fb:	mov    r12,r15
   192fe:	mov    r15,QWORD PTR [rsp]
   19302:	lea    rsi,[rip+0x265a8]        # 3f8b1 <xpam120+0xb51>
   19309:	mov    rdi,rbp
   1930c:	call   2bbf0 <MSAGetGC>
   19311:	mov    rbx,rax
   19314:	test   rax,rax
   19317:	je     193d2 <matassign2hmm+0x9d2>
   1931d:	mov    eax,DWORD PTR [r15+0x88]
   19324:	mov    esi,0x39e
   19329:	lea    rdi,[rip+0x26567]        # 3f897 <xpam120+0xb37>
   19330:	lea    edx,[rax+0x1]
   19333:	movsxd rdx,edx
   19336:	shl    rdx,0x2
   1933a:	call   36810 <sre_malloc>
   1933f:	mov    edx,DWORD PTR [rbp+0x18]
   19342:	mov    QWORD PTR [r15+0x58],rax
   19346:	test   edx,edx
   19348:	jle    193d2 <matassign2hmm+0x9d2>
   1934e:	mov    r14d,0x1
   19354:	mov    QWORD PTR [rsp],r15
   19358:	mov    r13d,0x1
   1935e:	mov    r15,r12
   19361:	mov    r12,rbp
   19364:	mov    ebp,r14d
   19367:	mov    r14,rax
   1936a:	jmp    19383 <matassign2hmm+0x983>
   1936c:	nop    DWORD PTR [rax+0x0]
   19370:	sub    eax,0x30
   19373:	mov    DWORD PTR [rcx],eax
   19375:	add    ebp,0x1
   19378:	add    r13,0x1
   1937c:	cmp    DWORD PTR [r12+0x18],r13d
   19381:	jl     193c8 <matassign2hmm+0x9c8>
   19383:	test   BYTE PTR [r15+r13*4],0x1
   19388:	je     19378 <matassign2hmm+0x978>
   1938a:	call   3820 <__ctype_b_loc@plt>
   1938f:	movsx  rsi,BYTE PTR [rbx+r13*1-0x1]
   19395:	mov    r8,rax
   19398:	mov    rcx,QWORD PTR [r8]
   1939b:	mov    rax,rsi
   1939e:	movzx  esi,WORD PTR [rcx+rsi*2]
   193a2:	movsxd rcx,ebp
   193a5:	lea    rcx,[r14+rcx*4]
   193a9:	test   si,0x800
   193ae:	jne    19370 <matassign2hmm+0x970>
   193b0:	test   si,0x200
   193b5:	je     19660 <matassign2hmm+0xc60>
   193bb:	sub    eax,0x57
   193be:	mov    DWORD PTR [rcx],eax
   193c0:	jmp    19375 <matassign2hmm+0x975>
   193c2:	nop    WORD PTR [rax+rax*1+0x0]
   193c8:	mov    rbp,r12
   193cb:	mov    r12,r15
   193ce:	mov    r15,QWORD PTR [rsp]
   193d2:	mov    rdi,QWORD PTR [rbp+0x58]
   193d6:	test   rdi,rdi
   193d9:	je     193e0 <matassign2hmm+0x9e0>
   193db:	call   3460 <free@plt>
   193e0:	mov    eax,DWORD PTR [rbp+0x18]
   193e3:	mov    esi,0x234
   193e8:	lea    rdi,[rip+0x264a8]        # 3f897 <xpam120+0xb37>
   193ef:	lea    edx,[rax+0x1]
   193f2:	movsxd rdx,edx
   193f5:	call   36810 <sre_malloc>
   193fa:	movsxd rdx,DWORD PTR [rbp+0x18]
   193fe:	mov    QWORD PTR [rbp+0x58],rax
   19402:	test   edx,edx
   19404:	jle    19436 <matassign2hmm+0xa36>
   19406:	xor    ecx,ecx
   19408:	nop    DWORD PTR [rax+rax*1+0x0]
   19410:	mov    edx,DWORD PTR [r12+rcx*4+0x4]
   19415:	and    edx,0x1
   19418:	cmp    edx,0x1
   1941b:	sbb    edx,edx
   1941d:	and    edx,0xffffffb6
   19420:	add    edx,0x78
   19423:	mov    BYTE PTR [rax+rcx*1],dl
   19426:	movsxd rdx,DWORD PTR [rbp+0x18]
   1942a:	add    rcx,0x1
   1942e:	mov    rax,QWORD PTR [rbp+0x58]
   19432:	cmp    edx,ecx
   19434:	jg     19410 <matassign2hmm+0xa10>
   19436:	cmp    QWORD PTR [rsp+0x18],0x0
   1943c:	mov    BYTE PTR [rax+rdx*1],0x0
   19440:	je     196e0 <matassign2hmm+0xce0>
   19446:	mov    rax,QWORD PTR [rsp+0x18]
   1944b:	mov    rbx,QWORD PTR [rsp+0x10]
   19450:	mov    QWORD PTR [rax],rbx
   19453:	mov    rax,QWORD PTR [rsp+0x28]
   19458:	test   rax,rax
   1945b:	je     1971a <matassign2hmm+0xd1a>
   19461:	mov    QWORD PTR [rax],r15
   19464:	add    rsp,0x48
   19468:	pop    rbx
   19469:	pop    rbp
   1946a:	pop    r12
   1946c:	pop    r13
   1946e:	pop    r14
   19470:	pop    r15
   19472:	ret    
   19473:	nop    DWORD PTR [rax+rax*1+0x0]
   19478:	mov    BYTE PTR [r14],0x1
   1947c:	mov    r9,QWORD PTR [rcx+0x10]
   19480:	add    edx,0x2
   19483:	mov    eax,DWORD PTR [r9+rax*4]
   19487:	mov    DWORD PTR [r9+rdi*4],eax
   1948b:	mov    rax,QWORD PTR [rcx+0x18]
   1948f:	mov    r9d,DWORD PTR [rax+r10*1+0x4]
   19494:	mov    DWORD PTR [rax+rdi*4],r9d
   19498:	jmp    18e9b <matassign2hmm+0x49b>
   1949d:	nop    DWORD PTR [rax]
   194a0:	mov    BYTE PTR [r14],0x1
   194a4:	mov    r9,QWORD PTR [rcx+0x10]
   194a8:	add    edx,0x2
   194ab:	mov    r10d,DWORD PTR [r9+r10*1+0x4]
   194b0:	mov    DWORD PTR [r9+rdi*4],r10d
   194b4:	mov    r9,QWORD PTR [rcx+0x18]
   194b8:	mov    eax,DWORD PTR [r9+rax*4]
   194bc:	mov    DWORD PTR [r9+rdi*4],eax
   194c0:	jmp    18e9b <matassign2hmm+0x49b>
   194c5:	nop    DWORD PTR [rax]
   194c8:	mov    BYTE PTR [r14],0x1
   194cc:	mov    r9,QWORD PTR [rcx+0x10]
   194d0:	mov    r10d,DWORD PTR [r9+rax*4]
   194d4:	mov    DWORD PTR [r9+rdi*4],r10d
   194d8:	mov    r9,QWORD PTR [rcx+0x18]
   194dc:	mov    eax,DWORD PTR [r9+rax*4]
   194e0:	mov    DWORD PTR [r9+rdi*4],eax
   194e4:	jmp    18e9b <matassign2hmm+0x49b>
   194e9:	nop    DWORD PTR [rax+0x0]
   194f0:	mov    BYTE PTR [rcx],0x1
   194f3:	jmp    18d60 <matassign2hmm+0x360>
   194f8:	nop    DWORD PTR [rax+rax*1+0x0]
   19500:	cmp    BYTE PTR [r9+rax*1-0x1],0x5
   19506:	jne    18e80 <matassign2hmm+0x480>
   1950c:	mov    rax,QWORD PTR [rcx+0x18]
   19510:	mov    eax,DWORD PTR [rax+r10*1-0x4]
   19515:	test   eax,eax
   19517:	jle    18e80 <matassign2hmm+0x480>
   1951d:	mov    BYTE PTR [r14],0x1
   19521:	mov    rax,QWORD PTR [rcx+0x10]
   19525:	mov    DWORD PTR [rax+rdi*4],0x1
   1952c:	mov    rax,QWORD PTR [rcx+0x18]
   19530:	mov    r9d,DWORD PTR [rax+r10*1-0x4]
   19535:	mov    DWORD PTR [rax+rdi*4],r9d
   19539:	mov    rax,QWORD PTR [rcx+0x8]
   1953d:	mov    BYTE PTR [rax+rdi*1-0x1],0x6
   19542:	mov    rax,QWORD PTR [rcx+0x10]
   19546:	mov    DWORD PTR [rax+r15*1-0x4],0x0
   1954f:	mov    rax,QWORD PTR [rcx+0x18]
   19553:	mov    DWORD PTR [rax+r15*1-0x4],0x0
   1955c:	jmp    18e9b <matassign2hmm+0x49b>
   19561:	nop    DWORD PTR [rax+0x0]
   19568:	cmp    BYTE PTR [r9+rax*1+0x1],0x8
   1956e:	jne    18ef2 <matassign2hmm+0x4f2>
   19574:	cmp    BYTE PTR [r9+rax*1+0x2],0x8
   1957a:	lea    r10,[rax+0x2]
   1957e:	jne    18ef2 <matassign2hmm+0x4f2>
   19584:	mov    BYTE PTR [r14],0x1
   19588:	mov    rax,QWORD PTR [rcx+0x10]
   1958c:	add    edx,0x3
   1958f:	add    esi,0x3
   19592:	mov    DWORD PTR [rax+rdi*4],r8d
   19596:	mov    rax,QWORD PTR [rcx+0x18]
   1959a:	mov    r9d,DWORD PTR [rax+r10*4]
   1959e:	mov    DWORD PTR [rax+rdi*4],r9d
   195a2:	mov    rax,QWORD PTR [rcx+0x8]
   195a6:	mov    BYTE PTR [rax+rdi*1+0x1],0x7
   195ab:	mov    rax,QWORD PTR [rcx+0x10]
   195af:	mov    DWORD PTR [rax+r15*1+0x4],0x0
   195b8:	mov    rax,QWORD PTR [rcx+0x18]
   195bc:	mov    DWORD PTR [rax+r15*1+0x4],0x0
   195c5:	mov    rax,QWORD PTR [rcx+0x8]
   195c9:	mov    BYTE PTR [rax+rdi*1+0x2],0x8
   195ce:	mov    rax,QWORD PTR [rcx+0x10]
   195d2:	mov    DWORD PTR [rax+r15*1+0x8],0x0
   195db:	mov    rax,QWORD PTR [rcx+0x18]
   195df:	mov    DWORD PTR [rax+r15*1+0x8],0x0
   195e8:	jmp    18e9b <matassign2hmm+0x49b>
   195ed:	nop    DWORD PTR [rax]
   195f0:	mov    BYTE PTR [rsi+rdx*1],0x5
   195f4:	mov    rcx,QWORD PTR [rbx]
   195f7:	mov    rsi,QWORD PTR [rcx+0x10]
   195fb:	mov    DWORD PTR [rsi+rdx*4],0x0
   19602:	jmp    18d20 <matassign2hmm+0x320>
   19607:	nop    WORD PTR [rax+rax*1+0x0]
   19610:	mov    rax,QWORD PTR [rax+0x8]
   19614:	xor    r8d,r8d
   19617:	mov    BYTE PTR [rax+0x2],0x9
   1961b:	mov    rcx,QWORD PTR [rbx]
   1961e:	mov    rax,QWORD PTR [rcx+0x10]
   19622:	mov    DWORD PTR [rax+0x8],0x0
   19629:	mov    rax,QWORD PTR [rcx+0x18]
   1962d:	mov    DWORD PTR [rax+0x8],0x0
   19634:	mov    DWORD PTR [rcx],0x3
   1963a:	jmp    18e3f <matassign2hmm+0x43f>
   1963f:	nop
   19640:	cmp    ecx,r13d
   19643:	jg     18aa0 <matassign2hmm+0xa0>
   19649:	or     eax,0x2
   1964c:	mov    DWORD PTR [rdx],eax
   1964e:	mov    r13d,DWORD PTR [rbp+0x18]
   19652:	jmp    18aa0 <matassign2hmm+0xa0>
   19657:	nop    WORD PTR [rax+rax*1+0x0]
   19660:	sub    eax,0x37
   19663:	mov    edi,0xffffffff
   19668:	test   si,0x100
   1966d:	cmove  eax,edi
   19670:	mov    DWORD PTR [rcx],eax
   19672:	jmp    19375 <matassign2hmm+0x975>
   19677:	nop    WORD PTR [rax+rax*1+0x0]
   19680:	sub    eax,0x37
   19683:	mov    edi,0xffffffff
   19688:	test   si,0x100
   1968d:	cmove  eax,edi
   19690:	mov    DWORD PTR [rcx],eax
   19692:	jmp    191d5 <matassign2hmm+0x7d5>
   19697:	nop    WORD PTR [rax+rax*1+0x0]
   196a0:	sub    eax,0x37
   196a3:	mov    edi,0xffffffff
   196a8:	test   si,0x100
   196ad:	cmove  eax,edi
   196b0:	mov    DWORD PTR [rcx],eax
   196b2:	jmp    192a5 <matassign2hmm+0x8a5>
   196b7:	nop    WORD PTR [rax+rax*1+0x0]
   196c0:	lea    rdi,[rip+0x26069]        # 3f730 <xpam120+0x9d0>
   196c7:	xor    eax,eax
   196c9:	call   317f0 <Die>
   196ce:	mov    DWORD PTR [rsp+0x24],0x0
   196d6:	mov    r13d,DWORD PTR [rbp+0x18]
   196da:	jmp    18a68 <matassign2hmm+0x68>
   196df:	nop
   196e0:	mov    eax,DWORD PTR [rbp+0x1c]
   196e3:	mov    r12,QWORD PTR [rsp+0x10]
   196e8:	xor    ebx,ebx
   196ea:	test   eax,eax
   196ec:	jle    19702 <matassign2hmm+0xd02>
   196ee:	xchg   ax,ax
   196f0:	mov    rdi,QWORD PTR [r12+rbx*8]
   196f4:	add    rbx,0x1
   196f8:	call   20af0 <P7FreeTrace>
   196fd:	cmp    DWORD PTR [rbp+0x1c],ebx
   19700:	jg     196f0 <matassign2hmm+0xcf0>
   19702:	mov    rdi,QWORD PTR [rsp+0x10]
   19707:	call   3460 <free@plt>
   1970c:	mov    rax,QWORD PTR [rsp+0x28]
   19711:	test   rax,rax
   19714:	jne    19461 <matassign2hmm+0xa61>
   1971a:	add    rsp,0x48
   1971e:	mov    rdi,r15
   19721:	pop    rbx
   19722:	pop    rbp
   19723:	pop    r12
   19725:	pop    r13
   19727:	pop    r14
   19729:	pop    r15
   1972b:	jmp    1aed0 <FreePlan7>
   19730:	mov    ecx,0x1
   19735:	jmp    19110 <matassign2hmm+0x710>
   1973a:	mov    ecx,0x1
   1973f:	jmp    19030 <matassign2hmm+0x630>
   19744:	mov    ecx,0x1
   19749:	jmp    190a0 <matassign2hmm+0x6a0>
   1974e:	lea    r9d,[rax+0x1]
   19752:	lea    rcx,[rsi+rdx*1]
   19756:	jmp    18da4 <matassign2hmm+0x3a4>
   1975b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000019760 <P7Handmodelmaker>:
   19760:	endbr64 
   19764:	push   r14
   19766:	mov    r14,rdx
   19769:	push   r13
   1976b:	mov    r13,rsi
   1976e:	push   r12
   19770:	mov    r12,rdi
   19773:	push   rbp
   19774:	push   rbx
   19775:	cmp    QWORD PTR [rdi+0x58],0x0
   1977a:	mov    rbx,rcx
   1977d:	je     19840 <P7Handmodelmaker+0xe0>
   19783:	mov    eax,DWORD PTR [r12+0x18]
   19788:	mov    esi,0x6f
   1978d:	lea    rdi,[rip+0x26103]        # 3f897 <xpam120+0xb37>
   19794:	lea    edx,[rax+0x1]
   19797:	movsxd rdx,edx
   1979a:	shl    rdx,0x2
   1979e:	call   36810 <sre_malloc>
   197a3:	mov    DWORD PTR [rax],0x0
   197a9:	mov    rbp,rax
   197ac:	mov    eax,DWORD PTR [r12+0x18]
   197b1:	test   eax,eax
   197b3:	jle    1981a <P7Handmodelmaker+0xba>
   197b5:	mov    r8,QWORD PTR [r12+0x58]
   197ba:	xor    edx,edx
   197bc:	movabs r9,0x8000000000006001
   197c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   197d0:	mov    DWORD PTR [rbp+rdx*4+0x4],0x0
   197d8:	movzx  edi,BYTE PTR [r8+rdx*1]
   197dd:	mov    esi,0x1
   197e2:	lea    ecx,[rdi-0x20]
   197e5:	cmp    cl,0x3f
   197e8:	ja     197f6 <P7Handmodelmaker+0x96>
   197ea:	mov    rsi,r9
   197ed:	shr    rsi,cl
   197f0:	not    rsi
   197f3:	and    esi,0x1
   197f6:	cmp    dil,0x7e
   197fa:	je     19806 <P7Handmodelmaker+0xa6>
   197fc:	mov    eax,0x1
   19801:	test   sil,sil
   19804:	jne    1980b <P7Handmodelmaker+0xab>
   19806:	mov    eax,0x8
   1980b:	mov    DWORD PTR [rbp+rdx*4+0x4],eax
   1980f:	add    rdx,0x1
   19813:	cmp    DWORD PTR [r12+0x18],edx
   19818:	jg     197d0 <P7Handmodelmaker+0x70>
   1981a:	mov    rdi,r12
   1981d:	mov    r8,rbx
   19820:	mov    rcx,r14
   19823:	mov    rdx,rbp
   19826:	mov    rsi,r13
   19829:	call   18a00 <matassign2hmm>
   1982e:	pop    rbx
   1982f:	mov    rdi,rbp
   19832:	pop    rbp
   19833:	pop    r12
   19835:	pop    r13
   19837:	pop    r14
   19839:	jmp    3460 <free@plt>
   1983e:	xchg   ax,ax
   19840:	lea    rdi,[rip+0x26019]        # 3f860 <xpam120+0xb00>
   19847:	xor    eax,eax
   19849:	call   317f0 <Die>
   1984e:	jmp    19783 <P7Handmodelmaker+0x23>
   19853:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1985e:	xchg   ax,ax

0000000000019860 <P7Fastmodelmaker>:
   19860:	endbr64 
   19864:	push   r15
   19866:	push   r14
   19868:	push   r13
   1986a:	push   r12
   1986c:	mov    r12,rdx
   1986f:	push   rbp
   19870:	mov    rbp,rdi
   19873:	push   rbx
   19874:	mov    rbx,rcx
   19877:	sub    rsp,0x18
   1987b:	mov    eax,DWORD PTR [rdi+0x18]
   1987e:	lea    rdi,[rip+0x26012]        # 3f897 <xpam120+0xb37>
   19885:	mov    QWORD PTR [rsp],rsi
   19889:	mov    esi,0xac
   1988e:	lea    edx,[rax+0x1]
   19891:	movss  DWORD PTR [rsp+0xc],xmm0
   19897:	movsxd rdx,edx
   1989a:	shl    rdx,0x2
   1989e:	call   36810 <sre_malloc>
   198a3:	mov    DWORD PTR [rax],0x0
   198a9:	mov    r13,rax
   198ac:	mov    eax,DWORD PTR [rbp+0x18]
   198af:	test   eax,eax
   198b1:	jle    1997c <P7Fastmodelmaker+0x11c>
   198b7:	movss  xmm0,DWORD PTR [rsp+0xc]
   198bd:	xor    r10d,r10d
   198c0:	movabs rax,0x8000000000006001
   198ca:	mov    r15d,0x8
   198d0:	mov    r14d,0x1
   198d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   198e0:	mov    DWORD PTR [r13+r10*4+0x4],0x0
   198e9:	mov    r11d,DWORD PTR [rbp+0x1c]
   198ed:	test   r11d,r11d
   198f0:	jle    199b0 <P7Fastmodelmaker+0x150>
   198f6:	mov    rdx,QWORD PTR [rbp+0x0]
   198fa:	lea    ecx,[r11-0x1]
   198fe:	xor    r8d,r8d
   19901:	lea    rsi,[rdx+0x8]
   19905:	lea    r9,[rsi+rcx*8]
   19909:	jmp    19914 <P7Fastmodelmaker+0xb4>
   1990b:	nop    DWORD PTR [rax+rax*1+0x0]
   19910:	add    rsi,0x8
   19914:	mov    rdx,QWORD PTR [rdx]
   19917:	movzx  edi,BYTE PTR [rdx+r10*1]
   1991c:	mov    rdx,rax
   1991f:	lea    ecx,[rdi-0x20]
   19922:	shr    rdx,cl
   19925:	and    edx,0x1
   19928:	cmp    cl,0x40
   1992b:	mov    ecx,0x0
   19930:	cmovae edx,ecx
   19933:	cmp    dil,0x7e
   19937:	je     1993d <P7Fastmodelmaker+0xdd>
   19939:	test   dl,dl
   1993b:	je     19941 <P7Fastmodelmaker+0xe1>
   1993d:	add    r8d,0x1
   19941:	mov    rdx,rsi
   19944:	cmp    r9,rsi
   19947:	jne    19910 <P7Fastmodelmaker+0xb0>
   19949:	pxor   xmm1,xmm1
   1994d:	cvtsi2ss xmm1,r8d
   19952:	pxor   xmm2,xmm2
   19956:	mov    edx,r14d
   19959:	cvtsi2ss xmm2,r11d
   1995e:	divss  xmm1,xmm2
   19962:	comiss xmm1,xmm0
   19965:	cmova  edx,r15d
   19969:	mov    DWORD PTR [r13+r10*4+0x4],edx
   1996e:	add    r10,0x1
   19972:	cmp    DWORD PTR [rbp+0x18],r10d
   19976:	jg     198e0 <P7Fastmodelmaker+0x80>
   1997c:	mov    rsi,QWORD PTR [rsp]
   19980:	mov    rdi,rbp
   19983:	mov    r8,rbx
   19986:	mov    rcx,r12
   19989:	mov    rdx,r13
   1998c:	call   18a00 <matassign2hmm>
   19991:	add    rsp,0x18
   19995:	mov    rdi,r13
   19998:	pop    rbx
   19999:	pop    rbp
   1999a:	pop    r12
   1999c:	pop    r13
   1999e:	pop    r14
   199a0:	pop    r15
   199a2:	jmp    3460 <free@plt>
   199a7:	nop    WORD PTR [rax+rax*1+0x0]
   199b0:	pxor   xmm1,xmm1
   199b4:	jmp    19952 <P7Fastmodelmaker+0xf2>
   199b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000199c0 <P7Maxmodelmaker>:
   199c0:	endbr64 
   199c4:	push   r15
   199c6:	push   r14
   199c8:	push   r13
   199ca:	mov    r13,rdi
   199cd:	push   r12
   199cf:	push   rbp
   199d0:	push   rbx
   199d1:	sub    rsp,0x1f8
   199d8:	mov    QWORD PTR [rsp+0x88],rcx
   199e0:	mov    QWORD PTR [rsp+0xa0],r8
   199e8:	mov    QWORD PTR [rsp+0xa8],r9
   199f0:	mov    QWORD PTR [rsp+0x98],rsi
   199f8:	mov    esi,0xff
   199fd:	mov    QWORD PTR [rsp+0x58],rdx
   19a02:	movss  DWORD PTR [rsp+0x48],xmm1
   19a08:	movss  DWORD PTR [rsp+0x10],xmm2
   19a0e:	mov    rax,QWORD PTR fs:0x28
   19a17:	mov    QWORD PTR [rsp+0x1e8],rax
   19a1f:	xor    eax,eax
   19a21:	mov    eax,DWORD PTR [rdi+0x18]
   19a24:	lea    rdi,[rip+0x25e6c]        # 3f897 <xpam120+0xb37>
   19a2b:	lea    edx,[rax+0x1]
   19a2e:	movsxd rdx,edx
   19a31:	shl    rdx,0x3
   19a35:	call   36810 <sre_malloc>
   19a3a:	mov    esi,0x100
   19a3f:	lea    rdi,[rip+0x25e51]        # 3f897 <xpam120+0xb37>
   19a46:	mov    QWORD PTR [rsp+0x18],rax
   19a4b:	mov    rbp,rax
   19a4e:	mov    eax,DWORD PTR [r13+0x18]
   19a52:	lea    edx,[rax+0x2]
   19a55:	movsxd rdx,edx
   19a58:	shl    rdx,0x2
   19a5c:	call   36810 <sre_malloc>
   19a61:	mov    esi,0x101
   19a66:	lea    rdi,[rip+0x25e2a]        # 3f897 <xpam120+0xb37>
   19a6d:	mov    QWORD PTR [rsp+0x40],rax
   19a72:	mov    eax,DWORD PTR [r13+0x18]
   19a76:	lea    edx,[rax+0x2]
   19a79:	movsxd rdx,edx
   19a7c:	shl    rdx,0x2
   19a80:	call   36810 <sre_malloc>
   19a85:	mov    esi,0x102
   19a8a:	lea    rdi,[rip+0x25e06]        # 3f897 <xpam120+0xb37>
   19a91:	mov    QWORD PTR [rsp+0x70],rax
   19a96:	mov    eax,DWORD PTR [r13+0x18]
   19a9a:	lea    edx,[rax+0x1]
   19a9d:	movsxd rdx,edx
   19aa0:	shl    rdx,0x2
   19aa4:	call   36810 <sre_malloc>
   19aa9:	movsxd rdx,DWORD PTR [r13+0x1c]
   19aad:	mov    esi,0x103
   19ab2:	lea    rdi,[rip+0x25dde]        # 3f897 <xpam120+0xb37>
   19ab9:	mov    QWORD PTR [rsp+0x90],rax
   19ac1:	shl    rdx,0x2
   19ac5:	call   36810 <sre_malloc>
   19aca:	mov    r12,rax
   19acd:	mov    eax,DWORD PTR [r13+0x18]
   19ad1:	test   eax,eax
   19ad3:	jle    19b8e <P7Maxmodelmaker+0x1ce>
   19ad9:	xor    ebx,ebx
   19adb:	nop    DWORD PTR [rax+rax*1+0x0]
   19ae0:	movsxd rdx,DWORD PTR [rip+0x48819]        # 62300 <Alphabet_size>
   19ae7:	mov    esi,0x105
   19aec:	lea    rdi,[rip+0x25da4]        # 3f897 <xpam120+0xb37>
   19af3:	shl    rdx,0x2
   19af7:	call   36810 <sre_malloc>
   19afc:	mov    esi,DWORD PTR [rip+0x487fe]        # 62300 <Alphabet_size>
   19b02:	pxor   xmm0,xmm0
   19b06:	mov    QWORD PTR [rbp+rbx*8+0x8],rax
   19b0b:	mov    rdi,rax
   19b0e:	add    rbx,0x1
   19b12:	call   3ad60 <FSet>
   19b17:	mov    eax,DWORD PTR [r13+0x18]
   19b1b:	cmp    eax,ebx
   19b1d:	jg     19ae0 <P7Maxmodelmaker+0x120>
   19b1f:	test   eax,eax
   19b21:	jle    19b8e <P7Maxmodelmaker+0x1ce>
   19b23:	mov    r15,QWORD PTR [rsp+0x18]
   19b28:	xor    ebp,ebp
   19b2a:	movabs r14,0x8000000000006001
   19b34:	nop    DWORD PTR [rax+0x0]
   19b38:	mov    eax,DWORD PTR [r13+0x1c]
   19b3c:	xor    ebx,ebx
   19b3e:	test   eax,eax
   19b40:	jle    19b84 <P7Maxmodelmaker+0x1c4>
   19b42:	nop    WORD PTR [rax+rax*1+0x0]
   19b48:	mov    rax,QWORD PTR [r13+0x0]
   19b4c:	mov    rax,QWORD PTR [rax+rbx*8]
   19b50:	movzx  edx,BYTE PTR [rax+rbp*1]
   19b54:	mov    eax,0x1
   19b59:	lea    ecx,[rdx-0x20]
   19b5c:	cmp    cl,0x3f
   19b5f:	ja     19b6d <P7Maxmodelmaker+0x1ad>
   19b61:	mov    rax,r14
   19b64:	shr    rax,cl
   19b67:	not    rax
   19b6a:	and    eax,0x1
   19b6d:	cmp    dl,0x7e
   19b70:	je     19b7a <P7Maxmodelmaker+0x1ba>
   19b72:	test   al,al
   19b74:	jne    19c68 <P7Maxmodelmaker+0x2a8>
   19b7a:	add    rbx,0x1
   19b7e:	cmp    DWORD PTR [r13+0x1c],ebx
   19b82:	jg     19b48 <P7Maxmodelmaker+0x188>
   19b84:	add    rbp,0x1
   19b88:	cmp    DWORD PTR [r13+0x18],ebp
   19b8c:	jg     19b38 <P7Maxmodelmaker+0x178>
   19b8e:	movss  xmm4,DWORD PTR [rsp+0x10]
   19b94:	pxor   xmm1,xmm1
   19b98:	comiss xmm4,xmm1
   19b9b:	ja     1a869 <P7Maxmodelmaker+0xea9>
   19ba1:	movss  xmm4,DWORD PTR [rip+0x25d0f]        # 3f8b8 <xpam120+0xb58>
   19ba9:	movss  DWORD PTR [rsp+0x28],xmm4
   19baf:	mov    rax,QWORD PTR [rsp+0x58]
   19bb4:	mov    edx,DWORD PTR [rip+0x48746]        # 62300 <Alphabet_size>
   19bba:	lea    rsi,[rax+0x5dd0]
   19bc1:	lea    rax,[rsp+0x140]
   19bc9:	mov    rdi,rax
   19bcc:	mov    rbx,rax
   19bcf:	mov    QWORD PTR [rsp+0x60],rax
   19bd4:	call   3aef0 <FCopy>
   19bd9:	mov    esi,DWORD PTR [rip+0x48721]        # 62300 <Alphabet_size>
   19bdf:	mov    rdi,rbx
   19be2:	xor    ebx,ebx
   19be4:	call   3b290 <FNorm>
   19be9:	mov    esi,DWORD PTR [r13+0x1c]
   19bed:	mov    rdi,QWORD PTR [r13+0x10]
   19bf1:	call   3ae20 <FSum>
   19bf6:	mov    r14d,DWORD PTR [rip+0x48703]        # 62300 <Alphabet_size>
   19bfd:	movss  DWORD PTR [rsp+0x3c],xmm0
   19c03:	test   r14d,r14d
   19c06:	jle    19c97 <P7Maxmodelmaker+0x2d7>
   19c0c:	mov    r14,QWORD PTR [rsp+0x88]
   19c14:	mov    rbp,QWORD PTR [rsp+0x60]
   19c19:	jmp    19c35 <P7Maxmodelmaker+0x275>
   19c1b:	movss  xmm0,DWORD PTR [rip+0x25c95]        # 3f8b8 <xpam120+0xb58>
   19c23:	movss  DWORD PTR [rbp+rbx*4+0x0],xmm0
   19c29:	add    rbx,0x1
   19c2d:	cmp    DWORD PTR [rip+0x486cd],ebx        # 62300 <Alphabet_size>
   19c33:	jle    19c97 <P7Maxmodelmaker+0x2d7>
   19c35:	pxor   xmm1,xmm1
   19c39:	movss  xmm0,DWORD PTR [rbp+rbx*4+0x0]
   19c3f:	divss  xmm0,DWORD PTR [r14+rbx*4]
   19c45:	comiss xmm0,xmm1
   19c48:	jbe    19c1b <P7Maxmodelmaker+0x25b>
   19c4a:	cvtss2sd xmm0,xmm0
   19c4e:	call   35e0 <log@plt>
   19c53:	mulsd  xmm0,QWORD PTR [rip+0x25085]        # 3ece0 <_IO_stdin_used+0x1ce0>
   19c5b:	cvtsd2ss xmm0,xmm0
   19c5f:	jmp    19c23 <P7Maxmodelmaker+0x263>
   19c61:	nop    DWORD PTR [rax+0x0]
   19c68:	mov    rax,QWORD PTR [r13+0x10]
   19c6c:	movsx  edi,dl
   19c6f:	movss  xmm0,DWORD PTR [rax+rbx*4]
   19c74:	movss  DWORD PTR [rsp+0x8],xmm0
   19c7a:	call   4eb0 <SymbolIndex>
   19c7f:	mov    rdi,QWORD PTR [r15+rbp*8+0x8]
   19c84:	movss  xmm0,DWORD PTR [rsp+0x8]
   19c8a:	movsx  esi,al
   19c8d:	call   5140 <P7CountSymbol>
   19c92:	jmp    19b7a <P7Maxmodelmaker+0x1ba>
   19c97:	mov    ebp,DWORD PTR [r13+0x1c]
   19c9b:	pxor   xmm2,xmm2
   19c9f:	movaps xmm1,xmm2
   19ca2:	test   ebp,ebp
   19ca4:	jle    19d14 <P7Maxmodelmaker+0x354>
   19ca6:	pxor   xmm2,xmm2
   19caa:	mov    rax,QWORD PTR [r13+0x10]
   19cae:	xor    ebx,ebx
   19cb0:	movss  DWORD PTR [rsp+0x8],xmm2
   19cb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19cc0:	movss  xmm6,DWORD PTR [rax+rbx*4]
   19cc5:	mov    rax,QWORD PTR [r13+0x0]
   19cc9:	movss  DWORD PTR [rsp+0x20],xmm2
   19ccf:	mov    rdi,QWORD PTR [rax+rbx*8]
   19cd3:	movss  DWORD PTR [rsp+0x10],xmm6
   19cd9:	call   25030 <DealignedLength>
   19cde:	pxor   xmm0,xmm0
   19ce2:	movss  xmm2,DWORD PTR [rsp+0x20]
   19ce8:	cvtsi2ss xmm0,eax
   19cec:	mulss  xmm0,DWORD PTR [rsp+0x10]
   19cf2:	mov    rax,QWORD PTR [r13+0x10]
   19cf6:	addss  xmm0,DWORD PTR [rsp+0x8]
   19cfc:	addss  xmm2,DWORD PTR [rax+rbx*4]
   19d01:	add    rbx,0x1
   19d05:	movss  DWORD PTR [rsp+0x8],xmm0
   19d0b:	cmp    DWORD PTR [r13+0x1c],ebx
   19d0f:	jg     19cc0 <P7Maxmodelmaker+0x300>
   19d11:	movaps xmm1,xmm0
   19d14:	divss  xmm1,xmm2
   19d18:	pxor   xmm0,xmm0
   19d1c:	pxor   xmm4,xmm4
   19d20:	cvttss2si eax,xmm1
   19d24:	movss  xmm1,DWORD PTR [rip+0x23a04]        # 3d730 <_IO_stdin_used+0x730>
   19d2c:	movaps xmm2,xmm1
   19d2f:	sub    eax,0x1
   19d32:	cvtsi2ss xmm0,eax
   19d36:	divss  xmm2,xmm0
   19d3a:	movaps xmm0,xmm1
   19d3d:	divss  xmm0,DWORD PTR [rsp+0x48]
   19d43:	comiss xmm0,xmm4
   19d46:	ja     1a831 <P7Maxmodelmaker+0xe71>
   19d4c:	movss  xmm5,DWORD PTR [rip+0x25b64]        # 3f8b8 <xpam120+0xb58>
   19d54:	movss  DWORD PTR [rsp+0x6c],xmm5
   19d5a:	pxor   xmm5,xmm5
   19d5e:	divss  xmm2,DWORD PTR [rsp+0x48]
   19d64:	comiss xmm2,xmm5
   19d67:	ja     1a801 <P7Maxmodelmaker+0xe41>
   19d6d:	movss  xmm4,DWORD PTR [rip+0x25b43]        # 3f8b8 <xpam120+0xb58>
   19d75:	movss  DWORD PTR [rsp+0x4c],xmm4
   19d7b:	movsxd rbp,DWORD PTR [r13+0x18]
   19d7f:	mov    DWORD PTR [rsp+0x38],ebp
   19d83:	test   ebp,ebp
   19d85:	jle    1a8e5 <P7Maxmodelmaker+0xf25>
   19d8b:	mov    r10d,DWORD PTR [r13+0x1c]
   19d8f:	pxor   xmm2,xmm2
   19d93:	movsxd r8,ebp
   19d96:	movabs r9,0x8000000000006001
   19da0:	sub    r8,0x1
   19da4:	cvtsi2ss xmm2,r10d
   19da9:	lea    ebx,[r10-0x1]
   19dad:	shl    rbx,0x3
   19db1:	nop    DWORD PTR [rax+0x0]
   19db8:	pxor   xmm0,xmm0
   19dbc:	test   r10d,r10d
   19dbf:	jle    19e18 <P7Maxmodelmaker+0x458>
   19dc1:	mov    rax,QWORD PTR [r13+0x0]
   19dc5:	xor    edi,edi
   19dc7:	lea    rdx,[rax+0x8]
   19dcb:	lea    r11,[rdx+rbx*1]
   19dcf:	jmp    19ddc <P7Maxmodelmaker+0x41c>
   19dd1:	nop    DWORD PTR [rax+0x0]
   19dd8:	add    rdx,0x8
   19ddc:	mov    rax,QWORD PTR [rax]
   19ddf:	movzx  esi,BYTE PTR [rax+r8*1]
   19de4:	mov    rax,r9
   19de7:	lea    ecx,[rsi-0x20]
   19dea:	shr    rax,cl
   19ded:	and    eax,0x1
   19df0:	cmp    cl,0x40
   19df3:	mov    ecx,0x0
   19df8:	cmovae eax,ecx
   19dfb:	cmp    sil,0x7e
   19dff:	je     19e05 <P7Maxmodelmaker+0x445>
   19e01:	test   al,al
   19e03:	je     19e08 <P7Maxmodelmaker+0x448>
   19e05:	add    edi,0x1
   19e08:	mov    rax,rdx
   19e0b:	cmp    r11,rdx
   19e0e:	jne    19dd8 <P7Maxmodelmaker+0x418>
   19e10:	pxor   xmm0,xmm0
   19e14:	cvtsi2ss xmm0,edi
   19e18:	divss  xmm0,xmm2
   19e1c:	lea    r11d,[rbp-0x1]
   19e20:	comiss xmm1,xmm0
   19e23:	jae    19e37 <P7Maxmodelmaker+0x477>
   19e25:	sub    r8,0x1
   19e29:	test   r11d,r11d
   19e2c:	je     1a891 <P7Maxmodelmaker+0xed1>
   19e32:	movsxd rbp,r11d
   19e35:	jmp    19db8 <P7Maxmodelmaker+0x3f8>
   19e37:	mov    rax,QWORD PTR [rsp+0x40]
   19e3c:	mov    DWORD PTR [rsp+0x38],ebp
   19e40:	mov    DWORD PTR [rax+rbp*4],0x0
   19e47:	mov    rax,QWORD PTR [rsp+0x70]
   19e4c:	mov    DWORD PTR [rax+rbp*4],0x0
   19e53:	mov    r9d,DWORD PTR [r13+0x1c]
   19e57:	test   r9d,r9d
   19e5a:	jle    19edd <P7Maxmodelmaker+0x51d>
   19e60:	mov    r14d,DWORD PTR [rsp+0x38]
   19e65:	lea    r10,[rbp-0x2]
   19e69:	xor    ebx,ebx
   19e6b:	movabs r9,0x8000000000006001
   19e75:	lea    eax,[r14-0x1]
   19e79:	sub    r10,rax
   19e7c:	nop    DWORD PTR [rax+0x0]
   19e80:	test   r14d,r14d
   19e83:	jle    19ed3 <P7Maxmodelmaker+0x513>
   19e85:	lea    r8,[rbx*8+0x0]
   19e8d:	lea    rdx,[rbp-0x1]
   19e91:	nop    DWORD PTR [rax+0x0]
   19e98:	mov    rax,QWORD PTR [r13+0x0]
   19e9c:	mov    rdi,QWORD PTR [rax+r8*1]
   19ea0:	mov    rax,r9
   19ea3:	add    rdi,rdx
   19ea6:	movzx  esi,BYTE PTR [rdi]
   19ea9:	lea    ecx,[rsi-0x20]
   19eac:	shr    rax,cl
   19eaf:	and    eax,0x1
   19eb2:	cmp    cl,0x40
   19eb5:	mov    ecx,0x0
   19eba:	cmovae eax,ecx
   19ebd:	cmp    sil,0x7e
   19ec1:	je     19ec7 <P7Maxmodelmaker+0x507>
   19ec3:	test   al,al
   19ec5:	je     19ed3 <P7Maxmodelmaker+0x513>
   19ec7:	sub    rdx,0x1
   19ecb:	mov    BYTE PTR [rdi],0x5f
   19ece:	cmp    r10,rdx
   19ed1:	jne    19e98 <P7Maxmodelmaker+0x4d8>
   19ed3:	add    rbx,0x1
   19ed7:	cmp    DWORD PTR [r13+0x1c],ebx
   19edb:	jg     19e80 <P7Maxmodelmaker+0x4c0>
   19edd:	test   r11d,r11d
   19ee0:	jle    1a4d2 <P7Maxmodelmaker+0xb12>
   19ee6:	mov    rax,QWORD PTR [rsp+0x58]
   19eeb:	movss  xmm5,DWORD PTR [rsp+0x28]
   19ef1:	movabs r14,0x8000000000006001
   19efb:	mulss  xmm5,DWORD PTR [rsp+0x3c]
   19f01:	lea    rbx,[rax+0x1c2c]
   19f08:	add    rax,0x190c
   19f0e:	mov    QWORD PTR [rsp+0x80],rax
   19f16:	lea    eax,[r11-0x1]
   19f1a:	movsxd rbp,eax
   19f1d:	lea    eax,[r11+0x1]
   19f21:	mov    QWORD PTR [rsp+0x78],rbx
   19f26:	mov    DWORD PTR [rsp+0x24],eax
   19f2a:	lea    rax,[rsp+0xf0]
   19f32:	mov    QWORD PTR [rsp+0x50],rax
   19f37:	lea    rax,[rsp+0x190]
   19f3f:	mov    QWORD PTR [rsp+0x30],rax
   19f44:	movss  DWORD PTR [rsp+0x68],xmm5
   19f4a:	nop    WORD PTR [rax+rax*1+0x0]
   19f50:	mov    rax,QWORD PTR [rsp+0x18]
   19f55:	mov    rbx,QWORD PTR [rsp+0x50]
   19f5a:	mov    edx,DWORD PTR [rip+0x483a0]        # 62300 <Alphabet_size>
   19f60:	mov    rsi,QWORD PTR [rax+rbp*8+0x8]
   19f65:	mov    rdi,rbx
   19f68:	call   3aef0 <FCopy>
   19f6d:	mov    rsi,QWORD PTR [rsp+0x58]
   19f72:	xor    r9d,r9d
   19f75:	mov    rdi,rbx
   19f78:	mov    r8,QWORD PTR [rsp+0x78]
   19f7d:	mov    rcx,QWORD PTR [rsp+0x80]
   19f85:	mov    QWORD PTR [rsp+0x50],rbx
   19f8a:	mov    edx,DWORD PTR [rsi+0x1908]
   19f90:	call   1f700 <P7PriorifyEmissionVector>
   19f95:	mov    esi,DWORD PTR [rip+0x48365]        # 62300 <Alphabet_size>
   19f9b:	test   esi,esi
   19f9d:	jle    1a011 <P7Maxmodelmaker+0x651>
   19f9f:	mov    QWORD PTR [rsp+0x8],rbp
   19fa4:	mov    r15,QWORD PTR [rsp+0x88]
   19fac:	xor    ebx,ebx
   19fae:	mov    rbp,QWORD PTR [rsp+0x50]
   19fb3:	jmp    19fce <P7Maxmodelmaker+0x60e>
   19fb5:	nop    DWORD PTR [rax]
   19fb8:	movss  xmm0,DWORD PTR [rip+0x258f8]        # 3f8b8 <xpam120+0xb58>
   19fc0:	movss  DWORD PTR [rbp+rbx*4+0x0],xmm0
   19fc6:	add    rbx,0x1
   19fca:	cmp    esi,ebx
   19fcc:	jle    1a00c <P7Maxmodelmaker+0x64c>
   19fce:	pxor   xmm3,xmm3
   19fd2:	movss  xmm0,DWORD PTR [rbp+rbx*4+0x0]
   19fd8:	divss  xmm0,DWORD PTR [r15+rbx*4]
   19fde:	comiss xmm0,xmm3
   19fe1:	jbe    19fb8 <P7Maxmodelmaker+0x5f8>
   19fe3:	cvtss2sd xmm0,xmm0
   19fe7:	call   35e0 <log@plt>
   19fec:	mov    esi,DWORD PTR [rip+0x4830e]        # 62300 <Alphabet_size>
   19ff2:	mulsd  xmm0,QWORD PTR [rip+0x24ce6]        # 3ece0 <_IO_stdin_used+0x1ce0>
   19ffa:	cvtsd2ss xmm0,xmm0
   19ffe:	movss  DWORD PTR [rbp+rbx*4+0x0],xmm0
   1a004:	add    rbx,0x1
   1a008:	cmp    esi,ebx
   1a00a:	jg     19fce <P7Maxmodelmaker+0x60e>
   1a00c:	mov    rbp,QWORD PTR [rsp+0x8]
   1a011:	mov    rdi,QWORD PTR [rsp+0x30]
   1a016:	pxor   xmm0,xmm0
   1a01a:	call   3ad60 <FSet>
   1a01f:	mov    edi,DWORD PTR [r13+0x1c]
   1a023:	xor    eax,eax
   1a025:	test   edi,edi
   1a027:	jle    1a042 <P7Maxmodelmaker+0x682>
   1a029:	nop    DWORD PTR [rax+0x0]
   1a030:	mov    DWORD PTR [r12+rax*4],0x0
   1a038:	add    rax,0x1
   1a03c:	cmp    DWORD PTR [r13+0x1c],eax
   1a040:	jg     1a030 <P7Maxmodelmaker+0x670>
   1a042:	mov    rax,QWORD PTR [rsp+0x40]
   1a047:	mov    r15,rbp
   1a04a:	mov    DWORD PTR [rax+rbp*4+0x4],0xff7fffff
   1a052:	movsxd rax,DWORD PTR [rsp+0x24]
   1a057:	mov    QWORD PTR [rsp+0x8],rax
   1a05c:	mov    rdi,rax
   1a05f:	lea    rbx,[rax-0x1]
   1a063:	lea    rax,[rsp+0xb0]
   1a06b:	mov    QWORD PTR [rsp+0x28],rax
   1a070:	cmp    DWORD PTR [rsp+0x38],edi
   1a074:	jl     1a48b <P7Maxmodelmaker+0xacb>
   1a07a:	nop    WORD PTR [rax+rax*1+0x0]
   1a080:	mov    eax,DWORD PTR [rsp+0x8]
   1a084:	mov    r9,QWORD PTR [r13+0x0]
   1a088:	pxor   xmm0,xmm0
   1a08c:	mov    esi,0x8
   1a091:	mov    rdi,QWORD PTR [rsp+0x28]
   1a096:	mov    rbp,QWORD PTR [r13+0x10]
   1a09a:	mov    DWORD PTR [rsp+0x3c],eax
   1a09e:	mov    eax,DWORD PTR [r13+0x1c]
   1a0a2:	mov    QWORD PTR [rsp+0x10],r9
   1a0a7:	mov    DWORD PTR [rsp+0x20],eax
   1a0ab:	call   3ad60 <FSet>
   1a0b0:	mov    eax,DWORD PTR [rsp+0x20]
   1a0b4:	mov    r9,QWORD PTR [rsp+0x10]
   1a0b9:	test   eax,eax
   1a0bb:	jle    1a20c <P7Maxmodelmaker+0x84c>
   1a0c1:	lea    r10d,[rax-0x1]
   1a0c5:	xor    eax,eax
   1a0c7:	jmp    1a181 <P7Maxmodelmaker+0x7c1>
   1a0cc:	nop    DWORD PTR [rax+0x0]
   1a0d0:	mov    rdx,r14
   1a0d3:	mov    esi,0x0
   1a0d8:	shr    rdx,cl
   1a0db:	and    edx,0x1
   1a0de:	cmp    cl,0x40
   1a0e1:	cmovb  esi,edx
   1a0e4:	cmp    r11b,0x7e
   1a0e8:	sete   dl
   1a0eb:	or     dl,sil
   1a0ee:	jne    1a488 <P7Maxmodelmaker+0xac8>
   1a0f4:	movzx  r8d,BYTE PTR [r8+rbx*1]
   1a0f9:	mov    rsi,r14
   1a0fc:	lea    ecx,[r8-0x20]
   1a100:	shr    rsi,cl
   1a103:	and    esi,0x1
   1a106:	cmp    cl,0x40
   1a109:	cmovb  edx,esi
   1a10c:	cmp    r8b,0x7e
   1a110:	je     1a3e8 <P7Maxmodelmaker+0xa28>
   1a116:	test   dl,dl
   1a118:	jne    1a3e8 <P7Maxmodelmaker+0xa28>
   1a11e:	movss  xmm0,DWORD PTR [rsp+0xb4]
   1a127:	addss  xmm0,DWORD PTR [rbp+rax*4+0x0]
   1a12d:	sub    edi,0x1
   1a130:	movss  DWORD PTR [rsp+0xb4],xmm0
   1a139:	pxor   xmm0,xmm0
   1a13d:	cvtsi2ss xmm0,edi
   1a141:	mulss  xmm0,DWORD PTR [rbp+rax*4+0x0]
   1a147:	addss  xmm0,DWORD PTR [rsp+0xc0]
   1a150:	movss  DWORD PTR [rsp+0xc0],xmm0
   1a159:	movss  xmm0,DWORD PTR [rsp+0xbc]
   1a162:	addss  xmm0,DWORD PTR [rbp+rax*4+0x0]
   1a168:	movss  DWORD PTR [rsp+0xbc],xmm0
   1a171:	lea    rdx,[rax+0x1]
   1a175:	cmp    r10,rax
   1a178:	je     1a20c <P7Maxmodelmaker+0x84c>
   1a17e:	mov    rax,rdx
   1a181:	mov    r8,QWORD PTR [r9+rax*8]
   1a185:	mov    edi,DWORD PTR [r12+rax*4]
   1a189:	movzx  r11d,BYTE PTR [r8+r15*1]
   1a18e:	lea    ecx,[r11-0x20]
   1a192:	test   edi,edi
   1a194:	jg     1a0d0 <P7Maxmodelmaker+0x710>
   1a19a:	mov    esi,0x1
   1a19f:	cmp    cl,0x3f
   1a1a2:	ja     1a1b0 <P7Maxmodelmaker+0x7f0>
   1a1a4:	mov    rsi,r14
   1a1a7:	shr    rsi,cl
   1a1aa:	not    rsi
   1a1ad:	and    esi,0x1
   1a1b0:	movzx  edx,BYTE PTR [r8+rbx*1]
   1a1b5:	cmp    r11b,0x7e
   1a1b9:	je     1a1c4 <P7Maxmodelmaker+0x804>
   1a1bb:	test   sil,sil
   1a1be:	jne    1a6f0 <P7Maxmodelmaker+0xd30>
   1a1c4:	cmp    dl,0x5f
   1a1c7:	je     1a171 <P7Maxmodelmaker+0x7b1>
   1a1c9:	cmp    dl,0x20
   1a1cc:	movss  xmm0,DWORD PTR [rbp+rax*4+0x0]
   1a1d2:	sete   sil
   1a1d6:	cmp    dl,0x7e
   1a1d9:	sete   cl
   1a1dc:	or     sil,cl
   1a1df:	jne    1a1ed <P7Maxmodelmaker+0x82d>
   1a1e1:	sub    edx,0x2d
   1a1e4:	cmp    dl,0x1
   1a1e7:	ja     1a6d0 <P7Maxmodelmaker+0xd10>
   1a1ed:	addss  xmm0,DWORD PTR [rsp+0xc8]
   1a1f6:	lea    rdx,[rax+0x1]
   1a1fa:	movss  DWORD PTR [rsp+0xc8],xmm0
   1a203:	cmp    r10,rax
   1a206:	jne    1a17e <P7Maxmodelmaker+0x7be>
   1a20c:	lea    rbp,[rsp+0xd0]
   1a214:	mov    rsi,QWORD PTR [rsp+0x28]
   1a219:	mov    edx,0x7
   1a21e:	mov    rdi,rbp
   1a221:	call   3aef0 <FCopy>
   1a226:	mov    rsi,QWORD PTR [rsp+0x58]
   1a22b:	mov    rdi,rbp
   1a22e:	lea    rdx,[rsi+0x8]
   1a232:	call   1f9a0 <P7PriorifyTransitionVector>
   1a237:	mov    esi,0x3
   1a23c:	mov    rdi,rbp
   1a23f:	call   3b290 <FNorm>
   1a244:	pxor   xmm6,xmm6
   1a248:	movss  xmm0,DWORD PTR [rsp+0xd0]
   1a251:	divss  xmm0,DWORD PTR [rsp+0x48]
   1a257:	comiss xmm0,xmm6
   1a25a:	ja     1a7d0 <P7Maxmodelmaker+0xe10>
   1a260:	movss  xmm0,DWORD PTR [rip+0x25650]        # 3f8b8 <xpam120+0xb58>
   1a268:	movss  DWORD PTR [rsp+0xd0],xmm0
   1a271:	pxor   xmm2,xmm2
   1a275:	movss  xmm0,DWORD PTR [rsp+0xd4]
   1a27e:	divss  xmm0,DWORD PTR [rsp+0x48]
   1a284:	comiss xmm0,xmm2
   1a287:	ja     1a7b6 <P7Maxmodelmaker+0xdf6>
   1a28d:	movss  xmm0,DWORD PTR [rip+0x25623]        # 3f8b8 <xpam120+0xb58>
   1a295:	movss  DWORD PTR [rsp+0xd4],xmm0
   1a29e:	pxor   xmm1,xmm1
   1a2a2:	movss  xmm0,DWORD PTR [rsp+0xd8]
   1a2ab:	comiss xmm0,xmm1
   1a2ae:	ja     1a79c <P7Maxmodelmaker+0xddc>
   1a2b4:	movss  xmm0,DWORD PTR [rip+0x255fc]        # 3f8b8 <xpam120+0xb58>
   1a2bc:	movss  DWORD PTR [rsp+0xd8],xmm0
   1a2c5:	pxor   xmm7,xmm7
   1a2c9:	movss  xmm0,DWORD PTR [rsp+0xdc]
   1a2d2:	divss  xmm0,DWORD PTR [rsp+0x48]
   1a2d8:	comiss xmm0,xmm7
   1a2db:	ja     1a782 <P7Maxmodelmaker+0xdc2>
   1a2e1:	movss  xmm0,DWORD PTR [rip+0x255cf]        # 3f8b8 <xpam120+0xb58>
   1a2e9:	movss  DWORD PTR [rsp+0xdc],xmm0
   1a2f2:	pxor   xmm5,xmm5
   1a2f6:	movss  xmm0,DWORD PTR [rsp+0xe0]
   1a2ff:	divss  xmm0,DWORD PTR [rsp+0x48]
   1a305:	comiss xmm0,xmm5
   1a308:	ja     1a768 <P7Maxmodelmaker+0xda8>
   1a30e:	movss  xmm0,DWORD PTR [rip+0x255a2]        # 3f8b8 <xpam120+0xb58>
   1a316:	movss  DWORD PTR [rsp+0xe0],xmm0
   1a31f:	pxor   xmm6,xmm6
   1a323:	movss  xmm0,DWORD PTR [rsp+0xe4]
   1a32c:	divss  xmm0,DWORD PTR [rsp+0x48]
   1a332:	comiss xmm0,xmm6
   1a335:	ja     1a74e <P7Maxmodelmaker+0xd8e>
   1a33b:	movss  xmm0,DWORD PTR [rip+0x25575]        # 3f8b8 <xpam120+0xb58>
   1a343:	movss  DWORD PTR [rsp+0xe4],xmm0
   1a34c:	pxor   xmm7,xmm7
   1a350:	movss  xmm0,DWORD PTR [rsp+0xe8]
   1a359:	comiss xmm0,xmm7
   1a35c:	ja     1a734 <P7Maxmodelmaker+0xd74>
   1a362:	movss  xmm0,DWORD PTR [rip+0x2554e]        # 3f8b8 <xpam120+0xb58>
   1a36a:	mov    rax,QWORD PTR [rsp+0x40]
   1a36f:	mov    rdi,QWORD PTR [rsp+0x8]
   1a374:	movss  DWORD PTR [rsp+0xe8],xmm0
   1a37d:	mov    edx,0x7
   1a382:	mov    rsi,QWORD PTR [rsp+0x28]
   1a387:	movss  xmm2,DWORD PTR [rax+rdi*4]
   1a38c:	mov    rdi,rbp
   1a38f:	movss  DWORD PTR [rsp+0x10],xmm2
   1a395:	call   3af70 <FDot>
   1a39a:	addss  xmm0,DWORD PTR [rsp+0x10]
   1a3a0:	mov    edx,DWORD PTR [rip+0x47f5a]        # 62300 <Alphabet_size>
   1a3a6:	mov    rsi,QWORD PTR [rsp+0x30]
   1a3ab:	mov    rdi,QWORD PTR [rsp+0x60]
   1a3b0:	movss  DWORD PTR [rsp+0x10],xmm0
   1a3b6:	call   3af70 <FDot>
   1a3bb:	mov    rax,QWORD PTR [rsp+0x40]
   1a3c0:	addss  xmm0,DWORD PTR [rsp+0x10]
   1a3c6:	comiss xmm0,DWORD PTR [rax+r15*4+0x4]
   1a3cc:	jbe    1a3e8 <P7Maxmodelmaker+0xa28>
   1a3ce:	movss  DWORD PTR [rax+r15*4+0x4],xmm0
   1a3d5:	mov    edi,DWORD PTR [rsp+0x3c]
   1a3d9:	mov    rax,QWORD PTR [rsp+0x70]
   1a3de:	mov    DWORD PTR [rax+r15*4+0x4],edi
   1a3e3:	nop    DWORD PTR [rax+rax*1+0x0]
   1a3e8:	mov    rdi,QWORD PTR [rsp+0x8]
   1a3ed:	mov    rax,QWORD PTR [rsp+0x18]
   1a3f2:	mov    edx,DWORD PTR [rip+0x47f08]        # 62300 <Alphabet_size>
   1a3f8:	mov    rsi,QWORD PTR [rax+rdi*8]
   1a3fc:	mov    rdi,QWORD PTR [rsp+0x30]
   1a401:	call   3ae90 <FAdd>
   1a406:	mov    esi,DWORD PTR [r13+0x1c]
   1a40a:	test   esi,esi
   1a40c:	jle    1a468 <P7Maxmodelmaker+0xaa8>
   1a40e:	mov    rdi,QWORD PTR [r13+0x0]
   1a412:	xor    eax,eax
   1a414:	jmp    1a42a <P7Maxmodelmaker+0xa6a>
   1a416:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a420:	add    rax,0x1
   1a424:	cmp    DWORD PTR [r13+0x1c],eax
   1a428:	jle    1a468 <P7Maxmodelmaker+0xaa8>
   1a42a:	mov    rdx,QWORD PTR [rdi+rax*8]
   1a42e:	movzx  esi,BYTE PTR [rdx+rbx*1]
   1a432:	mov    edx,0x1
   1a437:	lea    ecx,[rsi-0x20]
   1a43a:	cmp    cl,0x3f
   1a43d:	ja     1a44b <P7Maxmodelmaker+0xa8b>
   1a43f:	mov    rdx,r14
   1a442:	shr    rdx,cl
   1a445:	not    rdx
   1a448:	and    edx,0x1
   1a44b:	cmp    sil,0x7e
   1a44f:	je     1a420 <P7Maxmodelmaker+0xa60>
   1a451:	test   dl,dl
   1a453:	je     1a420 <P7Maxmodelmaker+0xa60>
   1a455:	add    DWORD PTR [r12+rax*4],0x1
   1a45a:	add    rax,0x1
   1a45e:	cmp    DWORD PTR [r13+0x1c],eax
   1a462:	jg     1a42a <P7Maxmodelmaker+0xa6a>
   1a464:	nop    DWORD PTR [rax+0x0]
   1a468:	add    QWORD PTR [rsp+0x8],0x1
   1a46e:	add    rbx,0x1
   1a472:	mov    rax,QWORD PTR [rsp+0x8]
   1a477:	cmp    DWORD PTR [rsp+0x38],eax
   1a47b:	jge    1a080 <P7Maxmodelmaker+0x6c0>
   1a481:	nop    DWORD PTR [rax+0x0]
   1a488:	mov    rbp,r15
   1a48b:	mov    rax,QWORD PTR [rsp+0x18]
   1a490:	mov    edx,DWORD PTR [rip+0x47e6a]        # 62300 <Alphabet_size>
   1a496:	mov    rdi,QWORD PTR [rsp+0x50]
   1a49b:	mov    rsi,QWORD PTR [rax+rbp*8+0x8]
   1a4a0:	call   3af70 <FDot>
   1a4a5:	mov    rax,QWORD PTR [rsp+0x40]
   1a4aa:	addss  xmm0,DWORD PTR [rsp+0x68]
   1a4b0:	sub    DWORD PTR [rsp+0x24],0x1
   1a4b5:	addss  xmm0,DWORD PTR [rax+rbp*4+0x4]
   1a4bb:	movss  DWORD PTR [rax+rbp*4+0x4],xmm0
   1a4c1:	mov    eax,DWORD PTR [rsp+0x24]
   1a4c5:	sub    rbp,0x1
   1a4c9:	cmp    eax,0x1
   1a4cc:	jne    19f50 <P7Maxmodelmaker+0x590>
   1a4d2:	mov    r8d,DWORD PTR [rsp+0x38]
   1a4d7:	test   r8d,r8d
   1a4da:	jle    1a8c3 <P7Maxmodelmaker+0xf03>
   1a4e0:	mov    eax,DWORD PTR [rsp+0x38]
   1a4e4:	mov    ebx,DWORD PTR [r13+0x1c]
   1a4e8:	mov    QWORD PTR [rsp+0x8],r12
   1a4ed:	xor    r9d,r9d
   1a4f0:	movss  xmm1,DWORD PTR [rip+0x24214]        # 3e70c <_IO_stdin_used+0x170c>
   1a4f8:	mov    r12,QWORD PTR [rsp+0x40]
   1a4fd:	mov    r11d,0x1
   1a503:	movabs r10,0x8000000000006001
   1a50d:	lea    r14d,[rax-0x1]
   1a511:	lea    eax,[rbx-0x1]
   1a514:	add    r14,0x2
   1a518:	lea    r15,[rax*8+0x0]
   1a520:	movss  xmm0,DWORD PTR [r12+r11*4]
   1a526:	movsxd rbp,r11d
   1a529:	test   ebx,ebx
   1a52b:	jle    1a590 <P7Maxmodelmaker+0xbd0>
   1a52d:	mov    rax,QWORD PTR [r13+0x0]
   1a531:	lea    r8,[r11-0x1]
   1a535:	lea    rdx,[rax+0x8]
   1a539:	lea    rdi,[rdx+r15*1]
   1a53d:	jmp    1a552 <P7Maxmodelmaker+0xb92>
   1a53f:	nop
   1a540:	addss  xmm0,DWORD PTR [rsp+0x4c]
   1a546:	mov    rax,rdx
   1a549:	cmp    rdx,rdi
   1a54c:	je     1a590 <P7Maxmodelmaker+0xbd0>
   1a54e:	add    rdx,0x8
   1a552:	mov    rax,QWORD PTR [rax]
   1a555:	movzx  esi,BYTE PTR [rax+r8*1]
   1a55a:	mov    rax,r10
   1a55d:	lea    ecx,[rsi-0x20]
   1a560:	shr    rax,cl
   1a563:	and    eax,0x1
   1a566:	cmp    cl,0x40
   1a569:	mov    ecx,0x0
   1a56e:	cmovae eax,ecx
   1a571:	cmp    sil,0x7e
   1a575:	je     1a540 <P7Maxmodelmaker+0xb80>
   1a577:	test   al,al
   1a579:	jne    1a540 <P7Maxmodelmaker+0xb80>
   1a57b:	addss  xmm0,DWORD PTR [rsp+0x6c]
   1a581:	mov    rax,rdx
   1a584:	cmp    rdx,rdi
   1a587:	jne    1a54e <P7Maxmodelmaker+0xb8e>
   1a589:	nop    DWORD PTR [rax+0x0]
   1a590:	comiss xmm0,xmm1
   1a593:	maxss  xmm0,xmm1
   1a597:	cmova  r9,rbp
   1a59b:	add    r11,0x1
   1a59f:	movaps xmm1,xmm0
   1a5a2:	cmp    r14,r11
   1a5a5:	jne    1a520 <P7Maxmodelmaker+0xb60>
   1a5ab:	mov    rax,QWORD PTR [rsp+0x90]
   1a5b3:	mov    r12,QWORD PTR [rsp+0x8]
   1a5b8:	mov    DWORD PTR [rax],0x0
   1a5be:	mov    eax,DWORD PTR [r13+0x18]
   1a5c2:	test   eax,eax
   1a5c4:	jle    1a5e9 <P7Maxmodelmaker+0xc29>
   1a5c6:	mov    rdx,QWORD PTR [rsp+0x90]
   1a5ce:	mov    eax,0x1
   1a5d3:	nop    DWORD PTR [rax+rax*1+0x0]
   1a5d8:	mov    DWORD PTR [rdx+rax*4],0x8
   1a5df:	add    rax,0x1
   1a5e3:	cmp    DWORD PTR [r13+0x18],eax
   1a5e7:	jge    1a5d8 <P7Maxmodelmaker+0xc18>
   1a5e9:	test   r9d,r9d
   1a5ec:	je     1a617 <P7Maxmodelmaker+0xc57>
   1a5ee:	mov    rcx,QWORD PTR [rsp+0x70]
   1a5f3:	mov    rsi,QWORD PTR [rsp+0x90]
   1a5fb:	nop    DWORD PTR [rax+rax*1+0x0]
   1a600:	lea    rdx,[rsi+r9*4]
   1a604:	mov    eax,DWORD PTR [rdx]
   1a606:	and    eax,0xfffffff7
   1a609:	or     eax,0x1
   1a60c:	mov    DWORD PTR [rdx],eax
   1a60e:	movsxd r9,DWORD PTR [rcx+r9*4]
   1a612:	test   r9d,r9d
   1a615:	jne    1a600 <P7Maxmodelmaker+0xc40>
   1a617:	mov    rdx,QWORD PTR [rsp+0x90]
   1a61f:	mov    rdi,r13
   1a622:	mov    ebx,0x1
   1a627:	mov    r8,QWORD PTR [rsp+0xa8]
   1a62f:	mov    rcx,QWORD PTR [rsp+0xa0]
   1a637:	mov    rsi,QWORD PTR [rsp+0x98]
   1a63f:	call   18a00 <matassign2hmm>
   1a644:	mov    edx,DWORD PTR [r13+0x18]
   1a648:	mov    rbp,QWORD PTR [rsp+0x18]
   1a64d:	test   edx,edx
   1a64f:	jle    1a66c <P7Maxmodelmaker+0xcac>
   1a651:	nop    DWORD PTR [rax+0x0]
   1a658:	mov    rdi,QWORD PTR [rbp+rbx*8+0x0]
   1a65d:	add    rbx,0x1
   1a661:	call   3460 <free@plt>
   1a666:	cmp    DWORD PTR [r13+0x18],ebx
   1a66a:	jge    1a658 <P7Maxmodelmaker+0xc98>
   1a66c:	mov    rdi,QWORD PTR [rsp+0x18]
   1a671:	call   3460 <free@plt>
   1a676:	mov    rdi,QWORD PTR [rsp+0x40]
   1a67b:	call   3460 <free@plt>
   1a680:	mov    rdi,QWORD PTR [rsp+0x70]
   1a685:	call   3460 <free@plt>
   1a68a:	mov    rdi,QWORD PTR [rsp+0x90]
   1a692:	call   3460 <free@plt>
   1a697:	mov    rdi,r12
   1a69a:	call   3460 <free@plt>
   1a69f:	mov    rax,QWORD PTR [rsp+0x1e8]
   1a6a7:	xor    rax,QWORD PTR fs:0x28
   1a6b0:	jne    1a918 <P7Maxmodelmaker+0xf58>
   1a6b6:	add    rsp,0x1f8
   1a6bd:	pop    rbx
   1a6be:	pop    rbp
   1a6bf:	pop    r12
   1a6c1:	pop    r13
   1a6c3:	pop    r14
   1a6c5:	pop    r15
   1a6c7:	ret    
   1a6c8:	nop    DWORD PTR [rax+rax*1+0x0]
   1a6d0:	addss  xmm0,DWORD PTR [rsp+0xc4]
   1a6d9:	movss  DWORD PTR [rsp+0xc4],xmm0
   1a6e2:	jmp    1a171 <P7Maxmodelmaker+0x7b1>
   1a6e7:	nop    WORD PTR [rax+rax*1+0x0]
   1a6f0:	cmp    dl,0x5f
   1a6f3:	je     1a171 <P7Maxmodelmaker+0x7b1>
   1a6f9:	cmp    dl,0x20
   1a6fc:	movss  xmm0,DWORD PTR [rbp+rax*4+0x0]
   1a702:	sete   sil
   1a706:	cmp    dl,0x7e
   1a709:	sete   cl
   1a70c:	or     sil,cl
   1a70f:	jne    1a71d <P7Maxmodelmaker+0xd5d>
   1a711:	sub    edx,0x2d
   1a714:	cmp    dl,0x1
   1a717:	ja     1a7ea <P7Maxmodelmaker+0xe2a>
   1a71d:	addss  xmm0,DWORD PTR [rsp+0xb8]
   1a726:	movss  DWORD PTR [rsp+0xb8],xmm0
   1a72f:	jmp    1a171 <P7Maxmodelmaker+0x7b1>
   1a734:	cvtss2sd xmm0,xmm0
   1a738:	call   35e0 <log@plt>
   1a73d:	mulsd  xmm0,QWORD PTR [rip+0x2459b]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a745:	cvtsd2ss xmm0,xmm0
   1a749:	jmp    1a36a <P7Maxmodelmaker+0x9aa>
   1a74e:	cvtss2sd xmm0,xmm0
   1a752:	call   35e0 <log@plt>
   1a757:	mulsd  xmm0,QWORD PTR [rip+0x24581]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a75f:	cvtsd2ss xmm0,xmm0
   1a763:	jmp    1a343 <P7Maxmodelmaker+0x983>
   1a768:	cvtss2sd xmm0,xmm0
   1a76c:	call   35e0 <log@plt>
   1a771:	mulsd  xmm0,QWORD PTR [rip+0x24567]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a779:	cvtsd2ss xmm0,xmm0
   1a77d:	jmp    1a316 <P7Maxmodelmaker+0x956>
   1a782:	cvtss2sd xmm0,xmm0
   1a786:	call   35e0 <log@plt>
   1a78b:	mulsd  xmm0,QWORD PTR [rip+0x2454d]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a793:	cvtsd2ss xmm0,xmm0
   1a797:	jmp    1a2e9 <P7Maxmodelmaker+0x929>
   1a79c:	cvtss2sd xmm0,xmm0
   1a7a0:	call   35e0 <log@plt>
   1a7a5:	mulsd  xmm0,QWORD PTR [rip+0x24533]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a7ad:	cvtsd2ss xmm0,xmm0
   1a7b1:	jmp    1a2bc <P7Maxmodelmaker+0x8fc>
   1a7b6:	cvtss2sd xmm0,xmm0
   1a7ba:	call   35e0 <log@plt>
   1a7bf:	mulsd  xmm0,QWORD PTR [rip+0x24519]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a7c7:	cvtsd2ss xmm0,xmm0
   1a7cb:	jmp    1a295 <P7Maxmodelmaker+0x8d5>
   1a7d0:	cvtss2sd xmm0,xmm0
   1a7d4:	call   35e0 <log@plt>
   1a7d9:	mulsd  xmm0,QWORD PTR [rip+0x244ff]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a7e1:	cvtsd2ss xmm0,xmm0
   1a7e5:	jmp    1a268 <P7Maxmodelmaker+0x8a8>
   1a7ea:	addss  xmm0,DWORD PTR [rsp+0xb0]
   1a7f3:	movss  DWORD PTR [rsp+0xb0],xmm0
   1a7fc:	jmp    1a171 <P7Maxmodelmaker+0x7b1>
   1a801:	pxor   xmm0,xmm0
   1a805:	cvtss2sd xmm0,xmm2
   1a809:	call   35e0 <log@plt>
   1a80e:	pxor   xmm1,xmm1
   1a812:	mulsd  xmm0,QWORD PTR [rip+0x244c6]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a81a:	cvtsd2ss xmm1,xmm0
   1a81e:	movss  DWORD PTR [rsp+0x4c],xmm1
   1a824:	movss  xmm1,DWORD PTR [rip+0x22f04]        # 3d730 <_IO_stdin_used+0x730>
   1a82c:	jmp    19d7b <P7Maxmodelmaker+0x3bb>
   1a831:	movss  DWORD PTR [rsp+0x8],xmm2
   1a837:	cvtss2sd xmm0,xmm0
   1a83b:	call   35e0 <log@plt>
   1a840:	pxor   xmm1,xmm1
   1a844:	movss  xmm2,DWORD PTR [rsp+0x8]
   1a84a:	mulsd  xmm0,QWORD PTR [rip+0x2448e]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a852:	cvtsd2ss xmm1,xmm0
   1a856:	movss  DWORD PTR [rsp+0x6c],xmm1
   1a85c:	movss  xmm1,DWORD PTR [rip+0x22ecc]        # 3d730 <_IO_stdin_used+0x730>
   1a864:	jmp    19d5a <P7Maxmodelmaker+0x39a>
   1a869:	pxor   xmm0,xmm0
   1a86d:	cvtss2sd xmm0,xmm4
   1a871:	call   35e0 <log@plt>
   1a876:	pxor   xmm1,xmm1
   1a87a:	mulsd  xmm0,QWORD PTR [rip+0x2445e]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1a882:	cvtsd2ss xmm1,xmm0
   1a886:	movss  DWORD PTR [rsp+0x28],xmm1
   1a88c:	jmp    19baf <P7Maxmodelmaker+0x1ef>
   1a891:	mov    rax,QWORD PTR [rsp+0x40]
   1a896:	mov    DWORD PTR [rsp+0x38],0x0
   1a89e:	mov    r11d,0xffffffff
   1a8a4:	xor    ebp,ebp
   1a8a6:	mov    DWORD PTR [rax],0x0
   1a8ac:	mov    rax,QWORD PTR [rsp+0x70]
   1a8b1:	mov    DWORD PTR [rax],0x0
   1a8b7:	mov    ebx,DWORD PTR [r13+0x1c]
   1a8bb:	test   ebx,ebx
   1a8bd:	jg     19e60 <P7Maxmodelmaker+0x4a0>
   1a8c3:	mov    rax,QWORD PTR [rsp+0x90]
   1a8cb:	xor    r9d,r9d
   1a8ce:	mov    DWORD PTR [rax],0x0
   1a8d4:	mov    ecx,DWORD PTR [r13+0x18]
   1a8d8:	test   ecx,ecx
   1a8da:	jg     1a5c6 <P7Maxmodelmaker+0xc06>
   1a8e0:	jmp    1a617 <P7Maxmodelmaker+0xc57>
   1a8e5:	movsxd rbp,DWORD PTR [rsp+0x38]
   1a8ea:	mov    rax,QWORD PTR [rsp+0x40]
   1a8ef:	mov    DWORD PTR [rax+rbp*4],0x0
   1a8f6:	mov    rax,QWORD PTR [rsp+0x70]
   1a8fb:	lea    r11d,[rbp-0x1]
   1a8ff:	mov    DWORD PTR [rax+rbp*4],0x0
   1a906:	mov    r10d,DWORD PTR [r13+0x1c]
   1a90a:	test   r10d,r10d
   1a90d:	jg     19e60 <P7Maxmodelmaker+0x4a0>
   1a913:	jmp    1a4d2 <P7Maxmodelmaker+0xb12>
   1a918:	call   3570 <__stack_chk_fail@plt>
   1a91d:	nop    DWORD PTR [rax]

000000000001a920 <AllocPlan7Shell>:
   1a920:	endbr64 
   1a924:	sub    rsp,0x8
   1a928:	mov    edx,0x1d0
   1a92d:	mov    esi,0x36
   1a932:	lea    rdi,[rip+0x24f83]        # 3f8bc <xpam120+0xb5c>
   1a939:	call   36810 <sre_malloc>
   1a93e:	movabs rcx,0xc521974fc521974f
   1a948:	mov    QWORD PTR [rax],0x0
   1a94f:	mov    QWORD PTR [rax+0x8],0x0
   1a957:	mov    QWORD PTR [rax+0x10],0x0
   1a95f:	mov    QWORD PTR [rax+0x18],0x0
   1a967:	mov    QWORD PTR [rax+0x20],0x0
   1a96f:	mov    QWORD PTR [rax+0x28],0x0
   1a977:	mov    QWORD PTR [rax+0x30],0x0
   1a97f:	mov    DWORD PTR [rax+0x38],0x0
   1a986:	mov    QWORD PTR [rax+0x40],0x0
   1a98e:	mov    QWORD PTR [rax+0x48],0x0
   1a996:	mov    DWORD PTR [rax+0x50],0x0
   1a99d:	mov    QWORD PTR [rax+0x58],0x0
   1a9a5:	mov    QWORD PTR [rax+0x60],0x0
   1a9ad:	mov    QWORD PTR [rax+0x68],0x0
   1a9b5:	mov    QWORD PTR [rax+0x70],0x0
   1a9bd:	mov    QWORD PTR [rax+0x78],0x0
   1a9c5:	mov    QWORD PTR [rax+0x80],0x0
   1a9d0:	mov    DWORD PTR [rax+0x88],0x0
   1a9da:	mov    QWORD PTR [rax+0x90],0x0
   1a9e5:	mov    QWORD PTR [rax+0x98],0x0
   1a9f0:	mov    QWORD PTR [rax+0xa0],0x0
   1a9fb:	mov    QWORD PTR [rax+0x148],0x0
   1aa06:	mov    QWORD PTR [rax+0x140],0x0
   1aa11:	mov    QWORD PTR [rax+0x138],0x0
   1aa1c:	mov    QWORD PTR [rax+0x188],0x0
   1aa27:	mov    QWORD PTR [rax+0x180],0x0
   1aa32:	mov    QWORD PTR [rax+0xd0],0x0
   1aa3d:	mov    QWORD PTR [rax+0xd8],0x0
   1aa48:	mov    QWORD PTR [rax+0x170],0x0
   1aa53:	mov    QWORD PTR [rax+0x178],0x0
   1aa5e:	mov    QWORD PTR [rax+0x198],0x0
   1aa69:	mov    QWORD PTR [rax+0x1a0],0x0
   1aa74:	mov    QWORD PTR [rax+0x1a8],0x0
   1aa7f:	mov    QWORD PTR [rax+0x1b0],0x0
   1aa8a:	mov    QWORD PTR [rax+0x1b8],rcx
   1aa91:	mov    QWORD PTR [rax+0x1c0],0x0
   1aa9c:	mov    DWORD PTR [rax+0x1c8],0x0
   1aaa6:	add    rsp,0x8
   1aaaa:	ret    
   1aaab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001aab0 <AllocPlan7Body>:
   1aab0:	endbr64 
   1aab4:	push   r15
   1aab6:	push   r14
   1aab8:	push   r13
   1aaba:	movsxd r13,esi
   1aabd:	mov    esi,0x6f
   1aac2:	push   r12
   1aac4:	lea    r12d,[r13+0x2]
   1aac8:	lea    r15d,[r13+0x1]
   1aacc:	push   rbp
   1aacd:	movsxd r12,r12d
   1aad0:	mov    rbp,r13
   1aad3:	push   rbx
   1aad4:	mov    rdx,r12
   1aad7:	mov    rbx,rdi
   1aada:	lea    r14d,[rbp*8+0x0]
   1aae2:	sub    r14d,ebp
   1aae5:	movsxd r14,r14d
   1aae8:	sub    rsp,0x18
   1aaec:	mov    DWORD PTR [rdi+0x88],r13d
   1aaf3:	shl    r13,0x3
   1aaf7:	lea    rdi,[rip+0x24dbe]        # 3f8bc <xpam120+0xb5c>
   1aafe:	shl    r14,0x2
   1ab02:	call   36810 <sre_malloc>
   1ab07:	mov    rdx,r12
   1ab0a:	mov    esi,0x70
   1ab0f:	lea    rdi,[rip+0x24da6]        # 3f8bc <xpam120+0xb5c>
   1ab16:	mov    QWORD PTR [rbx+0x18],rax
   1ab1a:	call   36810 <sre_malloc>
   1ab1f:	mov    rdx,r12
   1ab22:	movsxd r12,r15d
   1ab25:	mov    esi,0x71
   1ab2a:	mov    QWORD PTR [rbx+0x20],rax
   1ab2e:	lea    rdi,[rip+0x24d87]        # 3f8bc <xpam120+0xb5c>
   1ab35:	shl    r12,0x2
   1ab39:	call   36810 <sre_malloc>
   1ab3e:	mov    rdx,r12
   1ab41:	mov    esi,0x72
   1ab46:	lea    rdi,[rip+0x24d6f]        # 3f8bc <xpam120+0xb5c>
   1ab4d:	mov    QWORD PTR [rbx+0x28],rax
   1ab51:	call   36810 <sre_malloc>
   1ab56:	mov    rdx,r13
   1ab59:	mov    esi,0x74
   1ab5e:	lea    rdi,[rip+0x24d57]        # 3f8bc <xpam120+0xb5c>
   1ab65:	mov    QWORD PTR [rbx+0x48],rax
   1ab69:	call   36810 <sre_malloc>
   1ab6e:	lea    rdx,[r13+0x8]
   1ab72:	mov    esi,0x75
   1ab77:	lea    rdi,[rip+0x24d3e]        # 3f8bc <xpam120+0xb5c>
   1ab7e:	mov    QWORD PTR [rbx+0x90],rax
   1ab85:	call   36810 <sre_malloc>
   1ab8a:	mov    rdx,r13
   1ab8d:	mov    esi,0x76
   1ab92:	lea    rdi,[rip+0x24d23]        # 3f8bc <xpam120+0xb5c>
   1ab99:	mov    QWORD PTR [rbx+0x98],rax
   1aba0:	call   36810 <sre_malloc>
   1aba5:	mov    r13,QWORD PTR [rbx+0x90]
   1abac:	mov    rdx,r14
   1abaf:	mov    esi,0x77
   1abb4:	mov    QWORD PTR [rbx+0xa0],rax
   1abbb:	lea    rdi,[rip+0x24cfa]        # 3f8bc <xpam120+0xb5c>
   1abc2:	call   36810 <sre_malloc>
   1abc7:	mov    rcx,QWORD PTR [rbx+0x98]
   1abce:	mov    esi,0x78
   1abd3:	lea    rdi,[rip+0x24ce2]        # 3f8bc <xpam120+0xb5c>
   1abda:	mov    QWORD PTR [r13+0x0],rax
   1abde:	lea    r13d,[r15+r15*4]
   1abe2:	shl    r13d,0x2
   1abe6:	mov    QWORD PTR [rsp+0x8],rcx
   1abeb:	movsxd r13,r13d
   1abee:	shl    r13,0x2
   1abf2:	mov    rdx,r13
   1abf5:	call   36810 <sre_malloc>
   1abfa:	mov    rcx,QWORD PTR [rsp+0x8]
   1abff:	lea    rdx,[r13-0x50]
   1ac03:	mov    esi,0x79
   1ac08:	lea    rdi,[rip+0x24cad]        # 3f8bc <xpam120+0xb5c>
   1ac0f:	lea    r13d,[r15+r15*2]
   1ac13:	mov    QWORD PTR [rcx],rax
   1ac16:	mov    rcx,QWORD PTR [rbx+0xa0]
   1ac1d:	shl    r13d,0x3
   1ac21:	movsxd r13,r13d
   1ac24:	mov    QWORD PTR [rsp+0x8],rcx
   1ac29:	shl    r13,0x2
   1ac2d:	call   36810 <sre_malloc>
   1ac32:	mov    rcx,QWORD PTR [rsp+0x8]
   1ac37:	mov    edx,0x38
   1ac3c:	mov    esi,0x7b
   1ac41:	lea    rdi,[rip+0x24c74]        # 3f8bc <xpam120+0xb5c>
   1ac48:	mov    QWORD PTR [rcx],rax
   1ac4b:	call   36810 <sre_malloc>
   1ac50:	mov    edx,0xc0
   1ac55:	mov    esi,0x7c
   1ac5a:	lea    rdi,[rip+0x24c5b]        # 3f8bc <xpam120+0xb5c>
   1ac61:	mov    QWORD PTR [rbx+0x138],rax
   1ac68:	call   36810 <sre_malloc>
   1ac6d:	mov    edx,0xc0
   1ac72:	mov    esi,0x7d
   1ac77:	lea    rdi,[rip+0x24c3e]        # 3f8bc <xpam120+0xb5c>
   1ac7e:	mov    QWORD PTR [rbx+0x140],rax
   1ac85:	call   36810 <sre_malloc>
   1ac8a:	mov    rdx,r14
   1ac8d:	mov    esi,0x7e
   1ac92:	lea    rdi,[rip+0x24c23]        # 3f8bc <xpam120+0xb5c>
   1ac99:	mov    QWORD PTR [rbx+0x148],rax
   1aca0:	call   36810 <sre_malloc>
   1aca5:	mov    rdx,r13
   1aca8:	mov    esi,0x7f
   1acad:	lea    rdi,[rip+0x24c08]        # 3f8bc <xpam120+0xb5c>
   1acb4:	mov    QWORD PTR [rbx+0x180],rax
   1acbb:	call   36810 <sre_malloc>
   1acc0:	mov    esi,0x80
   1acc5:	lea    rdi,[rip+0x24bf0]        # 3f8bc <xpam120+0xb5c>
   1accc:	lea    rdx,[r13-0x60]
   1acd0:	mov    QWORD PTR [rbx+0x188],rax
   1acd7:	call   36810 <sre_malloc>
   1acdc:	mov    r10,QWORD PTR [rbx+0x138]
   1ace3:	mov    rsi,QWORD PTR [rbx+0x140]
   1acea:	mov    QWORD PTR [rbx+0x190],rax
   1acf1:	mov    rax,QWORD PTR [rbx+0x180]
   1acf8:	mov    rdi,QWORD PTR [rbx+0x148]
   1acff:	mov    QWORD PTR [r10],rax
   1ad02:	mov    rax,QWORD PTR [rbx+0x188]
   1ad09:	mov    QWORD PTR [rsi],rax
   1ad0c:	mov    rax,QWORD PTR [rbx+0x190]
   1ad13:	mov    QWORD PTR [rdi],rax
   1ad16:	test   ebp,ebp
   1ad18:	jle    1ad82 <AllocPlan7Body+0x2d2>
   1ad1a:	lea    r11d,[rbp-0x1]
   1ad1e:	mov    edx,0x50
   1ad23:	mov    eax,0x1
   1ad28:	mov    r8,QWORD PTR [rbx+0x98]
   1ad2f:	add    r11,0x2
   1ad33:	nop    DWORD PTR [rax+rax*1+0x0]
   1ad38:	mov    r9,QWORD PTR [r8]
   1ad3b:	lea    rcx,[rax*8+0x0]
   1ad43:	add    r9,rdx
   1ad46:	mov    QWORD PTR [r8+rax*8],r9
   1ad4a:	cmp    ebp,eax
   1ad4c:	jle    1ad75 <AllocPlan7Body+0x2c5>
   1ad4e:	mov    r9,QWORD PTR [rbx+0xa0]
   1ad55:	sub    rcx,rax
   1ad58:	mov    r13,QWORD PTR [r9]
   1ad5b:	add    r13,rdx
   1ad5e:	mov    QWORD PTR [r9+rax*8],r13
   1ad62:	mov    r9,QWORD PTR [rbx+0x90]
   1ad69:	mov    r13,QWORD PTR [r9]
   1ad6c:	lea    rcx,[r13+rcx*4+0x0]
   1ad71:	mov    QWORD PTR [r9+rax*8],rcx
   1ad75:	add    rax,0x1
   1ad79:	add    rdx,0x50
   1ad7d:	cmp    r11,rax
   1ad80:	jne    1ad38 <AllocPlan7Body+0x288>
   1ad82:	lea    r9,[r12-0x4]
   1ad87:	mov    rdx,r12
   1ad8a:	mov    eax,0x8
   1ad8f:	mov    rcx,r9
   1ad92:	nop    WORD PTR [rax+rax*1+0x0]
   1ad98:	mov    r8,QWORD PTR [rsi]
   1ad9b:	add    r8,rdx
   1ad9e:	add    rdx,r12
   1ada1:	mov    QWORD PTR [rsi+rax*1],r8
   1ada5:	mov    r8,QWORD PTR [rdi]
   1ada8:	add    r8,rcx
   1adab:	add    rcx,r9
   1adae:	mov    QWORD PTR [rdi+rax*1],r8
   1adb2:	add    rax,0x8
   1adb6:	cmp    rax,0xc0
   1adbc:	jne    1ad98 <AllocPlan7Body+0x2e8>
   1adbe:	mov    rdx,r10
   1adc1:	lea    rsi,[r10+0x38]
   1adc5:	mov    rax,r10
   1adc8:	xor    ecx,ecx
   1adca:	nop    WORD PTR [rax+rax*1+0x0]
   1add0:	mov    rdi,QWORD PTR [r10]
   1add3:	add    rax,0x8
   1add7:	add    rdi,rcx
   1adda:	add    rcx,r9
   1addd:	mov    QWORD PTR [rax-0x8],rdi
   1ade1:	cmp    rsi,rax
   1ade4:	jne    1add0 <AllocPlan7Body+0x320>
   1ade6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1adf0:	mov    rax,QWORD PTR [rdx]
   1adf3:	add    rdx,0x8
   1adf7:	mov    DWORD PTR [rax],0xc521974f
   1adfd:	cmp    rsi,rdx
   1ae00:	jne    1adf0 <AllocPlan7Body+0x340>
   1ae02:	mov    rdx,r12
   1ae05:	mov    esi,0x9d
   1ae0a:	lea    rdi,[rip+0x24aab]        # 3f8bc <xpam120+0xb5c>
   1ae11:	call   36810 <sre_malloc>
   1ae16:	mov    rdx,r12
   1ae19:	mov    esi,0x9e
   1ae1e:	lea    rdi,[rip+0x24a97]        # 3f8bc <xpam120+0xb5c>
   1ae25:	mov    QWORD PTR [rbx+0xd0],rax
   1ae2c:	call   36810 <sre_malloc>
   1ae31:	mov    rdx,r12
   1ae34:	mov    esi,0xa0
   1ae39:	lea    rdi,[rip+0x24a7c]        # 3f8bc <xpam120+0xb5c>
   1ae40:	mov    QWORD PTR [rbx+0xd8],rax
   1ae47:	call   36810 <sre_malloc>
   1ae4c:	mov    rdx,r12
   1ae4f:	mov    esi,0xa1
   1ae54:	lea    rdi,[rip+0x24a61]        # 3f8bc <xpam120+0xb5c>
   1ae5b:	mov    QWORD PTR [rbx+0x198],rax
   1ae62:	call   36810 <sre_malloc>
   1ae67:	mov    rdx,QWORD PTR [rbx+0x198]
   1ae6e:	mov    QWORD PTR [rbx+0x1a0],rax
   1ae75:	mov    QWORD PTR [rbx+0x170],rdx
   1ae7c:	mov    QWORD PTR [rbx+0x178],rax
   1ae83:	add    rsp,0x18
   1ae87:	pop    rbx
   1ae88:	pop    rbp
   1ae89:	pop    r12
   1ae8b:	pop    r13
   1ae8d:	pop    r14
   1ae8f:	pop    r15
   1ae91:	ret    
   1ae92:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1ae9d:	nop    DWORD PTR [rax]

000000000001aea0 <AllocPlan7>:
   1aea0:	endbr64 
   1aea4:	push   r12
   1aea6:	push   rbp
   1aea7:	mov    ebp,edi
   1aea9:	sub    rsp,0x8
   1aead:	call   1a920 <AllocPlan7Shell>
   1aeb2:	mov    esi,ebp
   1aeb4:	mov    rdi,rax
   1aeb7:	mov    r12,rax
   1aeba:	call   1aab0 <AllocPlan7Body>
   1aebf:	add    rsp,0x8
   1aec3:	mov    rax,r12
   1aec6:	pop    rbp
   1aec7:	pop    r12
   1aec9:	ret    
   1aeca:	nop    WORD PTR [rax+rax*1+0x0]

000000000001aed0 <FreePlan7>:
   1aed0:	endbr64 
   1aed4:	push   rbp
   1aed5:	mov    rbp,rdi
   1aed8:	mov    rdi,QWORD PTR [rdi]
   1aedb:	test   rdi,rdi
   1aede:	je     1aee5 <FreePlan7+0x15>
   1aee0:	call   3460 <free@plt>
   1aee5:	mov    rdi,QWORD PTR [rbp+0x8]
   1aee9:	test   rdi,rdi
   1aeec:	je     1aef3 <FreePlan7+0x23>
   1aeee:	call   3460 <free@plt>
   1aef3:	mov    rdi,QWORD PTR [rbp+0x10]
   1aef7:	test   rdi,rdi
   1aefa:	je     1af01 <FreePlan7+0x31>
   1aefc:	call   3460 <free@plt>
   1af01:	mov    rdi,QWORD PTR [rbp+0x18]
   1af05:	test   rdi,rdi
   1af08:	je     1af0f <FreePlan7+0x3f>
   1af0a:	call   3460 <free@plt>
   1af0f:	mov    rdi,QWORD PTR [rbp+0x20]
   1af13:	test   rdi,rdi
   1af16:	je     1af1d <FreePlan7+0x4d>
   1af18:	call   3460 <free@plt>
   1af1d:	mov    rdi,QWORD PTR [rbp+0x28]
   1af21:	test   rdi,rdi
   1af24:	je     1af2b <FreePlan7+0x5b>
   1af26:	call   3460 <free@plt>
   1af2b:	mov    rdi,QWORD PTR [rbp+0x30]
   1af2f:	test   rdi,rdi
   1af32:	je     1af39 <FreePlan7+0x69>
   1af34:	call   3460 <free@plt>
   1af39:	mov    rdi,QWORD PTR [rbp+0x40]
   1af3d:	test   rdi,rdi
   1af40:	je     1af47 <FreePlan7+0x77>
   1af42:	call   3460 <free@plt>
   1af47:	mov    rdi,QWORD PTR [rbp+0x48]
   1af4b:	test   rdi,rdi
   1af4e:	je     1af55 <FreePlan7+0x85>
   1af50:	call   3460 <free@plt>
   1af55:	mov    rdi,QWORD PTR [rbp+0x58]
   1af59:	test   rdi,rdi
   1af5c:	je     1af63 <FreePlan7+0x93>
   1af5e:	call   3460 <free@plt>
   1af63:	mov    rdi,QWORD PTR [rbp+0x60]
   1af67:	test   rdi,rdi
   1af6a:	je     1af71 <FreePlan7+0xa1>
   1af6c:	call   3460 <free@plt>
   1af71:	mov    rdi,QWORD PTR [rbp+0x68]
   1af75:	test   rdi,rdi
   1af78:	je     1af7f <FreePlan7+0xaf>
   1af7a:	call   3460 <free@plt>
   1af7f:	mov    rdi,QWORD PTR [rbp+0x198]
   1af86:	test   rdi,rdi
   1af89:	je     1af90 <FreePlan7+0xc0>
   1af8b:	call   3460 <free@plt>
   1af90:	mov    rdi,QWORD PTR [rbp+0xd0]
   1af97:	test   rdi,rdi
   1af9a:	je     1afa1 <FreePlan7+0xd1>
   1af9c:	call   3460 <free@plt>
   1afa1:	mov    rdi,QWORD PTR [rbp+0x1a0]
   1afa8:	test   rdi,rdi
   1afab:	je     1afb2 <FreePlan7+0xe2>
   1afad:	call   3460 <free@plt>
   1afb2:	mov    rdi,QWORD PTR [rbp+0xd8]
   1afb9:	test   rdi,rdi
   1afbc:	je     1afc3 <FreePlan7+0xf3>
   1afbe:	call   3460 <free@plt>
   1afc3:	mov    rdi,QWORD PTR [rbp+0x188]
   1afca:	test   rdi,rdi
   1afcd:	je     1afd4 <FreePlan7+0x104>
   1afcf:	call   3460 <free@plt>
   1afd4:	mov    rdi,QWORD PTR [rbp+0x190]
   1afdb:	test   rdi,rdi
   1afde:	je     1afe5 <FreePlan7+0x115>
   1afe0:	call   3460 <free@plt>
   1afe5:	mov    rdi,QWORD PTR [rbp+0x180]
   1afec:	test   rdi,rdi
   1afef:	je     1aff6 <FreePlan7+0x126>
   1aff1:	call   3460 <free@plt>
   1aff6:	mov    rax,QWORD PTR [rbp+0x98]
   1affd:	test   rax,rax
   1b000:	je     1b00a <FreePlan7+0x13a>
   1b002:	mov    rdi,QWORD PTR [rax]
   1b005:	call   3460 <free@plt>
   1b00a:	mov    rax,QWORD PTR [rbp+0xa0]
   1b011:	test   rax,rax
   1b014:	je     1b01e <FreePlan7+0x14e>
   1b016:	mov    rdi,QWORD PTR [rax]
   1b019:	call   3460 <free@plt>
   1b01e:	mov    rax,QWORD PTR [rbp+0x90]
   1b025:	test   rax,rax
   1b028:	je     1b032 <FreePlan7+0x162>
   1b02a:	mov    rdi,QWORD PTR [rax]
   1b02d:	call   3460 <free@plt>
   1b032:	mov    rdi,QWORD PTR [rbp+0x140]
   1b039:	test   rdi,rdi
   1b03c:	je     1b043 <FreePlan7+0x173>
   1b03e:	call   3460 <free@plt>
   1b043:	mov    rdi,QWORD PTR [rbp+0x148]
   1b04a:	test   rdi,rdi
   1b04d:	je     1b054 <FreePlan7+0x184>
   1b04f:	call   3460 <free@plt>
   1b054:	mov    rdi,QWORD PTR [rbp+0x138]
   1b05b:	test   rdi,rdi
   1b05e:	je     1b065 <FreePlan7+0x195>
   1b060:	call   3460 <free@plt>
   1b065:	mov    rdi,QWORD PTR [rbp+0x98]
   1b06c:	test   rdi,rdi
   1b06f:	je     1b076 <FreePlan7+0x1a6>
   1b071:	call   3460 <free@plt>
   1b076:	mov    rdi,QWORD PTR [rbp+0xa0]
   1b07d:	test   rdi,rdi
   1b080:	je     1b087 <FreePlan7+0x1b7>
   1b082:	call   3460 <free@plt>
   1b087:	mov    rdi,QWORD PTR [rbp+0x90]
   1b08e:	test   rdi,rdi
   1b091:	je     1b098 <FreePlan7+0x1c8>
   1b093:	call   3460 <free@plt>
   1b098:	mov    rdi,QWORD PTR [rbp+0x1a8]
   1b09f:	test   rdi,rdi
   1b0a2:	je     1b0a9 <FreePlan7+0x1d9>
   1b0a4:	call   3460 <free@plt>
   1b0a9:	mov    rdi,QWORD PTR [rbp+0x1b0]
   1b0b0:	test   rdi,rdi
   1b0b3:	je     1b0ba <FreePlan7+0x1ea>
   1b0b5:	call   3460 <free@plt>
   1b0ba:	mov    rdi,rbp
   1b0bd:	pop    rbp
   1b0be:	jmp    3460 <free@plt>
   1b0c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b0ce:	xchg   ax,ax

000000000001b0d0 <ZeroPlan7>:
   1b0d0:	endbr64 
   1b0d4:	push   r12
   1b0d6:	push   rbp
   1b0d7:	mov    rbp,rdi
   1b0da:	push   rbx
   1b0db:	sub    rsp,0x10
   1b0df:	movsxd rax,DWORD PTR [rdi+0x88]
   1b0e6:	cmp    eax,0x1
   1b0e9:	jle    1b14f <ZeroPlan7+0x7f>
   1b0eb:	xor    ebx,ebx
   1b0ed:	nop    DWORD PTR [rax]
   1b0f0:	mov    rax,QWORD PTR [rbp+0x90]
   1b0f7:	add    rbx,0x1
   1b0fb:	pxor   xmm0,xmm0
   1b0ff:	mov    esi,0x7
   1b104:	mov    rdi,QWORD PTR [rax+rbx*8]
   1b108:	call   3ad60 <FSet>
   1b10d:	mov    rax,QWORD PTR [rbp+0x98]
   1b114:	mov    esi,DWORD PTR [rip+0x471e6]        # 62300 <Alphabet_size>
   1b11a:	pxor   xmm0,xmm0
   1b11e:	mov    rdi,QWORD PTR [rax+rbx*8]
   1b122:	call   3ad60 <FSet>
   1b127:	mov    rax,QWORD PTR [rbp+0xa0]
   1b12e:	mov    esi,DWORD PTR [rip+0x471cc]        # 62300 <Alphabet_size>
   1b134:	pxor   xmm0,xmm0
   1b138:	mov    rdi,QWORD PTR [rax+rbx*8]
   1b13c:	call   3ad60 <FSet>
   1b141:	movsxd rax,DWORD PTR [rbp+0x88]
   1b148:	lea    edx,[rbx+0x1]
   1b14b:	cmp    eax,edx
   1b14d:	jg     1b0f0 <ZeroPlan7+0x20>
   1b14f:	mov    rdx,QWORD PTR [rbp+0x98]
   1b156:	mov    esi,DWORD PTR [rip+0x471a4]        # 62300 <Alphabet_size>
   1b15c:	pxor   xmm0,xmm0
   1b160:	lea    rbx,[rbp+0xac]
   1b167:	lea    r12,[rbp+0xcc]
   1b16e:	mov    rdi,QWORD PTR [rdx+rax*8]
   1b172:	call   3ad60 <FSet>
   1b177:	mov    rax,QWORD PTR [rbp+0xd0]
   1b17e:	mov    esi,DWORD PTR [rbp+0x88]
   1b184:	mov    DWORD PTR [rbp+0xa8],0x0
   1b18e:	pxor   xmm0,xmm0
   1b192:	lea    rdi,[rax+0x4]
   1b196:	call   3ad60 <FSet>
   1b19b:	mov    rax,QWORD PTR [rbp+0xd8]
   1b1a2:	mov    esi,DWORD PTR [rbp+0x88]
   1b1a8:	pxor   xmm0,xmm0
   1b1ac:	lea    rdi,[rax+0x4]
   1b1b0:	call   3ad60 <FSet>
   1b1b5:	mov    DWORD PTR [rsp+0xc],0x0
   1b1bd:	mov    rdi,rbx
   1b1c0:	pxor   xmm0,xmm0
   1b1c4:	mov    esi,0x2
   1b1c9:	add    rbx,0x8
   1b1cd:	call   3ad60 <FSet>
   1b1d2:	cmp    r12,rbx
   1b1d5:	jne    1b1bd <ZeroPlan7+0xed>
   1b1d7:	and    DWORD PTR [rbp+0x1c8],0xffffffde
   1b1de:	add    rsp,0x10
   1b1e2:	pop    rbx
   1b1e3:	pop    rbp
   1b1e4:	pop    r12
   1b1e6:	ret    
   1b1e7:	nop    WORD PTR [rax+rax*1+0x0]

000000000001b1f0 <Plan7SetName>:
   1b1f0:	endbr64 
   1b1f4:	push   rbp
   1b1f5:	mov    rbp,rsi
   1b1f8:	push   rbx
   1b1f9:	mov    rbx,rdi
   1b1fc:	sub    rsp,0x8
   1b200:	mov    rdi,QWORD PTR [rdi]
   1b203:	test   rdi,rdi
   1b206:	je     1b20d <Plan7SetName+0x1d>
   1b208:	call   3460 <free@plt>
   1b20d:	mov    rdi,rbp
   1b210:	call   36670 <Strdup>
   1b215:	mov    QWORD PTR [rbx],rax
   1b218:	add    rsp,0x8
   1b21c:	mov    rdi,rax
   1b21f:	pop    rbx
   1b220:	pop    rbp
   1b221:	jmp    366d0 <StringChop>
   1b226:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b230 <Plan7SetAccession>:
   1b230:	endbr64 
   1b234:	push   rbp
   1b235:	mov    rbp,rsi
   1b238:	push   rbx
   1b239:	mov    rbx,rdi
   1b23c:	sub    rsp,0x8
   1b240:	mov    rdi,QWORD PTR [rdi+0x8]
   1b244:	test   rdi,rdi
   1b247:	je     1b24e <Plan7SetAccession+0x1e>
   1b249:	call   3460 <free@plt>
   1b24e:	mov    rdi,rbp
   1b251:	call   36670 <Strdup>
   1b256:	mov    QWORD PTR [rbx+0x8],rax
   1b25a:	mov    rdi,rax
   1b25d:	call   366d0 <StringChop>
   1b262:	or     DWORD PTR [rbx+0x1c8],0x200
   1b26c:	add    rsp,0x8
   1b270:	pop    rbx
   1b271:	pop    rbp
   1b272:	ret    
   1b273:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b27e:	xchg   ax,ax

000000000001b280 <Plan7SetDescription>:
   1b280:	endbr64 
   1b284:	push   rbp
   1b285:	mov    rbp,rsi
   1b288:	push   rbx
   1b289:	mov    rbx,rdi
   1b28c:	sub    rsp,0x8
   1b290:	mov    rdi,QWORD PTR [rdi+0x10]
   1b294:	test   rdi,rdi
   1b297:	je     1b29e <Plan7SetDescription+0x1e>
   1b299:	call   3460 <free@plt>
   1b29e:	mov    rdi,rbp
   1b2a1:	call   36670 <Strdup>
   1b2a6:	mov    QWORD PTR [rbx+0x10],rax
   1b2aa:	mov    rdi,rax
   1b2ad:	call   366d0 <StringChop>
   1b2b2:	or     DWORD PTR [rbx+0x1c8],0x2
   1b2b9:	add    rsp,0x8
   1b2bd:	pop    rbx
   1b2be:	pop    rbp
   1b2bf:	ret    

000000000001b2c0 <Plan7ComlogAppend>:
   1b2c0:	endbr64 
   1b2c4:	push   r15
   1b2c6:	push   r14
   1b2c8:	mov    r14d,esi
   1b2cb:	push   r13
   1b2cd:	mov    r13,rdx
   1b2d0:	push   r12
   1b2d2:	mov    r12,rdi
   1b2d5:	push   rbp
   1b2d6:	push   rbx
   1b2d7:	sub    rsp,0x8
   1b2db:	test   esi,esi
   1b2dd:	jle    1b3d8 <Plan7ComlogAppend+0x118>
   1b2e3:	lea    eax,[rsi-0x1]
   1b2e6:	mov    rbx,rdx
   1b2e9:	mov    ebp,esi
   1b2eb:	lea    r15,[rdx+rax*8+0x8]
   1b2f0:	mov    rdi,QWORD PTR [rbx]
   1b2f3:	add    rbx,0x8
   1b2f7:	call   3560 <strlen@plt>
   1b2fc:	add    ebp,eax
   1b2fe:	cmp    r15,rbx
   1b301:	jne    1b2f0 <Plan7ComlogAppend+0x30>
   1b303:	mov    r15,QWORD PTR [r12+0x30]
   1b308:	test   r15,r15
   1b30b:	je     1b3a8 <Plan7ComlogAppend+0xe8>
   1b311:	mov    rdi,r15
   1b314:	call   3560 <strlen@plt>
   1b319:	mov    rdx,r15
   1b31c:	mov    esi,0x128
   1b321:	lea    rdi,[rip+0x24594]        # 3f8bc <xpam120+0xb5c>
   1b328:	lea    ecx,[rbp+rax*1+0x1]
   1b32c:	movsxd rcx,ecx
   1b32f:	call   36860 <sre_realloc>
   1b334:	mov    QWORD PTR [r12+0x30],rax
   1b339:	mov    rbx,rax
   1b33c:	mov    rdi,rbx
   1b33f:	lea    r15d,[r14-0x1]
   1b343:	call   3560 <strlen@plt>
   1b348:	mov    ecx,0xa
   1b34d:	mov    rbp,r15
   1b350:	mov    WORD PTR [rbx+rax*1],cx
   1b354:	xor    ebx,ebx
   1b356:	test   r14d,r14d
   1b359:	jg     1b363 <Plan7ComlogAppend+0xa3>
   1b35b:	jmp    1b396 <Plan7ComlogAppend+0xd6>
   1b35d:	nop    DWORD PTR [rax]
   1b360:	mov    rbx,rax
   1b363:	mov    rsi,QWORD PTR [r13+rbx*8+0x0]
   1b368:	mov    rdi,QWORD PTR [r12+0x30]
   1b36d:	call   3790 <strcat@plt>
   1b372:	cmp    ebp,ebx
   1b374:	jle    1b38d <Plan7ComlogAppend+0xcd>
   1b376:	mov    r14,QWORD PTR [r12+0x30]
   1b37b:	mov    rdi,r14
   1b37e:	call   3560 <strlen@plt>
   1b383:	mov    edx,0x20
   1b388:	mov    WORD PTR [r14+rax*1],dx
   1b38d:	lea    rax,[rbx+0x1]
   1b391:	cmp    r15,rbx
   1b394:	jne    1b360 <Plan7ComlogAppend+0xa0>
   1b396:	add    rsp,0x8
   1b39a:	pop    rbx
   1b39b:	pop    rbp
   1b39c:	pop    r12
   1b39e:	pop    r13
   1b3a0:	pop    r14
   1b3a2:	pop    r15
   1b3a4:	ret    
   1b3a5:	nop    DWORD PTR [rax]
   1b3a8:	lea    edx,[rbp+0x1]
   1b3ab:	mov    esi,0x12c
   1b3b0:	lea    rdi,[rip+0x24505]        # 3f8bc <xpam120+0xb5c>
   1b3b7:	movsxd rdx,edx
   1b3ba:	call   36810 <sre_malloc>
   1b3bf:	mov    QWORD PTR [r12+0x30],rax
   1b3c4:	mov    BYTE PTR [rax],0x0
   1b3c7:	mov    rbx,QWORD PTR [r12+0x30]
   1b3cc:	jmp    1b33c <Plan7ComlogAppend+0x7c>
   1b3d1:	nop    DWORD PTR [rax+0x0]
   1b3d8:	mov    ebp,esi
   1b3da:	jmp    1b303 <Plan7ComlogAppend+0x43>
   1b3df:	nop

000000000001b3e0 <Plan7SetCtime>:
   1b3e0:	endbr64 
   1b3e4:	push   rbx
   1b3e5:	mov    rbx,rdi
   1b3e8:	xor    edi,edi
   1b3ea:	sub    rsp,0x10
   1b3ee:	mov    rax,QWORD PTR fs:0x28
   1b3f7:	mov    QWORD PTR [rsp+0x8],rax
   1b3fc:	xor    eax,eax
   1b3fe:	call   3690 <time@plt>
   1b403:	mov    rdi,QWORD PTR [rbx+0x40]
   1b407:	mov    QWORD PTR [rsp],rax
   1b40b:	test   rdi,rdi
   1b40e:	je     1b415 <Plan7SetCtime+0x35>
   1b410:	call   3460 <free@plt>
   1b415:	mov    rdi,rsp
   1b418:	call   3540 <ctime@plt>
   1b41d:	mov    rdi,rax
   1b420:	call   36670 <Strdup>
   1b425:	mov    QWORD PTR [rbx+0x40],rax
   1b429:	mov    rdi,rax
   1b42c:	call   366d0 <StringChop>
   1b431:	mov    rax,QWORD PTR [rsp+0x8]
   1b436:	xor    rax,QWORD PTR fs:0x28
   1b43f:	jne    1b447 <Plan7SetCtime+0x67>
   1b441:	add    rsp,0x10
   1b445:	pop    rbx
   1b446:	ret    
   1b447:	call   3570 <__stack_chk_fail@plt>
   1b44c:	nop    DWORD PTR [rax+0x0]

000000000001b450 <Plan7SetNullModel>:
   1b450:	endbr64 
   1b454:	mov    eax,DWORD PTR [rip+0x46ea6]        # 62300 <Alphabet_size>
   1b45a:	test   eax,eax
   1b45c:	jle    1b482 <Plan7SetNullModel+0x32>
   1b45e:	lea    ecx,[rax-0x1]
   1b461:	xor    eax,eax
   1b463:	nop    DWORD PTR [rax+rax*1+0x0]
   1b468:	movss  xmm1,DWORD PTR [rsi+rax*4]
   1b46d:	mov    rdx,rax
   1b470:	movss  DWORD PTR [rdi+rax*4+0xe0],xmm1
   1b479:	add    rax,0x1
   1b47d:	cmp    rdx,rcx
   1b480:	jne    1b468 <Plan7SetNullModel+0x18>
   1b482:	movss  DWORD PTR [rdi+0x130],xmm0
   1b48a:	ret    
   1b48b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001b490 <Plan7Renormalize>:
   1b490:	endbr64 
   1b494:	push   r12
   1b496:	push   rbp
   1b497:	push   rbx
   1b498:	mov    rbx,rdi
   1b49b:	sub    rsp,0x10
   1b49f:	mov    esi,DWORD PTR [rdi+0x88]
   1b4a5:	test   esi,esi
   1b4a7:	jle    1b512 <Plan7Renormalize+0x82>
   1b4a9:	xor    eax,eax
   1b4ab:	nop    DWORD PTR [rax+rax*1+0x0]
   1b4b0:	lea    rbp,[rax+0x1]
   1b4b4:	mov    rax,QWORD PTR [rbx+0x98]
   1b4bb:	mov    esi,DWORD PTR [rip+0x46e3f]        # 62300 <Alphabet_size>
   1b4c1:	mov    rdi,QWORD PTR [rax+rbp*8]
   1b4c5:	call   3b290 <FNorm>
   1b4ca:	mov    esi,DWORD PTR [rbx+0x88]
   1b4d0:	lea    edx,[rbp+0x1]
   1b4d3:	mov    rax,rbp
   1b4d6:	cmp    esi,edx
   1b4d8:	jge    1b4b0 <Plan7Renormalize+0x20>
   1b4da:	cmp    esi,0x1
   1b4dd:	jle    1b512 <Plan7Renormalize+0x82>
   1b4df:	xor    eax,eax
   1b4e1:	nop    DWORD PTR [rax+0x0]
   1b4e8:	lea    rbp,[rax+0x1]
   1b4ec:	mov    rax,QWORD PTR [rbx+0xa0]
   1b4f3:	mov    esi,DWORD PTR [rip+0x46e07]        # 62300 <Alphabet_size>
   1b4f9:	mov    rdi,QWORD PTR [rax+rbp*8]
   1b4fd:	call   3b290 <FNorm>
   1b502:	mov    esi,DWORD PTR [rbx+0x88]
   1b508:	lea    edx,[rbp+0x1]
   1b50b:	mov    rax,rbp
   1b50e:	cmp    esi,edx
   1b510:	jg     1b4e8 <Plan7Renormalize+0x58>
   1b512:	mov    rax,QWORD PTR [rbx+0xd0]
   1b519:	xor    ebp,ebp
   1b51b:	lea    rdi,[rax+0x4]
   1b51f:	call   3ae20 <FSum>
   1b524:	movss  xmm1,DWORD PTR [rbx+0xa8]
   1b52c:	mov    rax,QWORD PTR [rbx+0xd0]
   1b533:	mov    esi,DWORD PTR [rbx+0x88]
   1b539:	addss  xmm1,xmm0
   1b53d:	movss  xmm0,DWORD PTR [rip+0x21e57]        # 3d39c <_IO_stdin_used+0x39c>
   1b545:	lea    rdi,[rax+0x4]
   1b549:	divss  xmm0,xmm1
   1b54d:	movss  DWORD PTR [rsp+0xc],xmm1
   1b553:	call   3adb0 <FScale>
   1b558:	movss  xmm0,DWORD PTR [rbx+0xa8]
   1b560:	movss  xmm1,DWORD PTR [rsp+0xc]
   1b566:	cmp    DWORD PTR [rbx+0x88],0x1
   1b56d:	divss  xmm0,xmm1
   1b571:	movss  DWORD PTR [rbx+0xa8],xmm0
   1b579:	jle    1b635 <Plan7Renormalize+0x1a5>
   1b57f:	nop
   1b580:	mov    rax,QWORD PTR [rbx+0x90]
   1b587:	add    rbp,0x1
   1b58b:	mov    esi,0x3
   1b590:	lea    r12,[rbp*4+0x0]
   1b598:	mov    rdi,QWORD PTR [rax+rbp*8]
   1b59c:	call   3ae20 <FSum>
   1b5a1:	mov    rax,QWORD PTR [rbx+0xd8]
   1b5a8:	mov    esi,0x3
   1b5ad:	movss  xmm1,DWORD PTR [rax+rbp*4]
   1b5b2:	mov    rax,QWORD PTR [rbx+0x90]
   1b5b9:	addss  xmm1,xmm0
   1b5bd:	movss  xmm0,DWORD PTR [rip+0x21dd7]        # 3d39c <_IO_stdin_used+0x39c>
   1b5c5:	mov    rdi,QWORD PTR [rax+rbp*8]
   1b5c9:	divss  xmm0,xmm1
   1b5cd:	movss  DWORD PTR [rsp+0xc],xmm1
   1b5d3:	call   3adb0 <FScale>
   1b5d8:	movss  xmm1,DWORD PTR [rsp+0xc]
   1b5de:	mov    esi,0x2
   1b5e3:	mov    rax,QWORD PTR [rbx+0xd8]
   1b5ea:	add    rax,r12
   1b5ed:	movss  xmm0,DWORD PTR [rax]
   1b5f1:	divss  xmm0,xmm1
   1b5f5:	movss  DWORD PTR [rax],xmm0
   1b5f9:	mov    rax,QWORD PTR [rbx+0x90]
   1b600:	mov    rdi,QWORD PTR [rax+rbp*8]
   1b604:	add    rdi,0xc
   1b608:	call   3b290 <FNorm>
   1b60d:	mov    rax,QWORD PTR [rbx+0x90]
   1b614:	mov    esi,0x2
   1b619:	mov    rdi,QWORD PTR [rax+rbp*8]
   1b61d:	add    rdi,0x14
   1b621:	call   3b290 <FNorm>
   1b626:	lea    eax,[rbp+0x1]
   1b629:	cmp    DWORD PTR [rbx+0x88],eax
   1b62f:	jg     1b580 <Plan7Renormalize+0xf0>
   1b635:	mov    esi,DWORD PTR [rip+0x46cc5]        # 62300 <Alphabet_size>
   1b63b:	lea    rdi,[rbx+0xe0]
   1b642:	call   3b290 <FNorm>
   1b647:	lea    rdi,[rbx+0xac]
   1b64e:	mov    esi,0x2
   1b653:	call   3b290 <FNorm>
   1b658:	lea    rdi,[rbx+0xb4]
   1b65f:	mov    esi,0x2
   1b664:	call   3b290 <FNorm>
   1b669:	lea    rdi,[rbx+0xbc]
   1b670:	mov    esi,0x2
   1b675:	call   3b290 <FNorm>
   1b67a:	lea    rdi,[rbx+0xc4]
   1b681:	mov    esi,0x2
   1b686:	call   3b290 <FNorm>
   1b68b:	mov    rax,QWORD PTR [rbx+0x90]
   1b692:	mov    rax,QWORD PTR [rax]
   1b695:	mov    QWORD PTR [rax+0x14],0x0
   1b69d:	mov    eax,DWORD PTR [rbx+0x1c8]
   1b6a3:	and    eax,0xfffffffe
   1b6a6:	or     eax,0x20
   1b6a9:	mov    DWORD PTR [rbx+0x1c8],eax
   1b6af:	add    rsp,0x10
   1b6b3:	pop    rbx
   1b6b4:	pop    rbp
   1b6b5:	pop    r12
   1b6b7:	ret    
   1b6b8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001b6c0 <Plan7RenormalizeExits>:
   1b6c0:	endbr64 
   1b6c4:	cmp    DWORD PTR [rdi+0x88],0x1
   1b6cb:	jle    1b750 <Plan7RenormalizeExits+0x90>
   1b6d1:	push   rbp
   1b6d2:	mov    rbp,rdi
   1b6d5:	push   rbx
   1b6d6:	xor    ebx,ebx
   1b6d8:	sub    rsp,0x8
   1b6dc:	nop    DWORD PTR [rax+0x0]
   1b6e0:	mov    rax,QWORD PTR [rbp+0x90]
   1b6e7:	add    rbx,0x1
   1b6eb:	mov    esi,0x3
   1b6f0:	mov    rdi,QWORD PTR [rax+rbx*8]
   1b6f4:	call   3ae20 <FSum>
   1b6f9:	mov    rax,QWORD PTR [rbp+0xd8]
   1b700:	mov    esi,0x3
   1b705:	movss  xmm2,DWORD PTR [rip+0x21c8f]        # 3d39c <_IO_stdin_used+0x39c>
   1b70d:	movaps xmm1,xmm0
   1b710:	movss  xmm0,DWORD PTR [rax+rbx*4]
   1b715:	mov    rax,QWORD PTR [rbp+0x90]
   1b71c:	mulss  xmm0,xmm1
   1b720:	mov    rdi,QWORD PTR [rax+rbx*8]
   1b724:	addss  xmm0,xmm1
   1b728:	divss  xmm2,xmm0
   1b72c:	movaps xmm0,xmm2
   1b72f:	call   3adb0 <FScale>
   1b734:	lea    eax,[rbx+0x1]
   1b737:	cmp    DWORD PTR [rbp+0x88],eax
   1b73d:	jg     1b6e0 <Plan7RenormalizeExits+0x20>
   1b73f:	add    rsp,0x8
   1b743:	pop    rbx
   1b744:	pop    rbp
   1b745:	ret    
   1b746:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b750:	ret    
   1b751:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b75c:	nop    DWORD PTR [rax+0x0]

000000000001b760 <Plan7NakedConfig>:
   1b760:	endbr64 
   1b764:	movabs rax,0x3f80000000000000
   1b76e:	push   rbx
   1b76f:	pxor   xmm0,xmm0
   1b773:	mov    rbx,rdi
   1b776:	mov    QWORD PTR [rdi+0xc4],rax
   1b77d:	mov    eax,DWORD PTR [rdi+0x88]
   1b783:	mov    QWORD PTR [rdi+0xac],0x3f800000
   1b78e:	mov    QWORD PTR [rdi+0xb4],0x3f800000
   1b799:	lea    esi,[rax-0x1]
   1b79c:	mov    rax,QWORD PTR [rdi+0xd0]
   1b7a3:	mov    QWORD PTR [rdi+0xbc],0x3f800000
   1b7ae:	lea    rdi,[rax+0x8]
   1b7b2:	call   3ad60 <FSet>
   1b7b7:	movss  xmm0,DWORD PTR [rip+0x21bdd]        # 3d39c <_IO_stdin_used+0x39c>
   1b7bf:	subss  xmm0,DWORD PTR [rbx+0xa8]
   1b7c7:	mov    rax,QWORD PTR [rbx+0xd0]
   1b7ce:	movss  DWORD PTR [rax+0x4],xmm0
   1b7d3:	mov    eax,DWORD PTR [rbx+0x88]
   1b7d9:	pxor   xmm0,xmm0
   1b7dd:	lea    esi,[rax-0x1]
   1b7e0:	mov    rax,QWORD PTR [rbx+0xd8]
   1b7e7:	lea    rdi,[rax+0x4]
   1b7eb:	call   3ad60 <FSet>
   1b7f0:	movsxd rdx,DWORD PTR [rbx+0x88]
   1b7f7:	mov    rax,QWORD PTR [rbx+0xd8]
   1b7fe:	mov    rdi,rbx
   1b801:	mov    DWORD PTR [rax+rdx*4],0x3f800000
   1b808:	call   1b6c0 <Plan7RenormalizeExits>
   1b80d:	and    DWORD PTR [rbx+0x1c8],0xfffffffe
   1b814:	pop    rbx
   1b815:	ret    
   1b816:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b820 <Plan7GlobalConfig>:
   1b820:	endbr64 
   1b824:	push   rbx
   1b825:	mov    rbx,rdi
   1b828:	movss  xmm0,DWORD PTR [rdi+0x130]
   1b830:	movabs rax,0x3f80000000000000
   1b83a:	movss  xmm1,DWORD PTR [rip+0x21b5a]        # 3d39c <_IO_stdin_used+0x39c>
   1b842:	mov    QWORD PTR [rdi+0xc4],rax
   1b849:	mov    eax,DWORD PTR [rdi+0x88]
   1b84f:	movss  DWORD PTR [rdi+0xb0],xmm0
   1b857:	subss  xmm1,xmm0
   1b85b:	movss  DWORD PTR [rdi+0xc0],xmm0
   1b863:	pxor   xmm0,xmm0
   1b867:	mov    QWORD PTR [rdi+0xb4],0x3f800000
   1b872:	lea    esi,[rax-0x1]
   1b875:	mov    rax,QWORD PTR [rdi+0xd0]
   1b87c:	movss  DWORD PTR [rdi+0xac],xmm1
   1b884:	movss  DWORD PTR [rdi+0xbc],xmm1
   1b88c:	lea    rdi,[rax+0x8]
   1b890:	call   3ad60 <FSet>
   1b895:	movss  xmm0,DWORD PTR [rip+0x21aff]        # 3d39c <_IO_stdin_used+0x39c>
   1b89d:	subss  xmm0,DWORD PTR [rbx+0xa8]
   1b8a5:	mov    rax,QWORD PTR [rbx+0xd0]
   1b8ac:	movss  DWORD PTR [rax+0x4],xmm0
   1b8b1:	mov    eax,DWORD PTR [rbx+0x88]
   1b8b7:	pxor   xmm0,xmm0
   1b8bb:	lea    esi,[rax-0x1]
   1b8be:	mov    rax,QWORD PTR [rbx+0xd8]
   1b8c5:	lea    rdi,[rax+0x4]
   1b8c9:	call   3ad60 <FSet>
   1b8ce:	movsxd rdx,DWORD PTR [rbx+0x88]
   1b8d5:	mov    rax,QWORD PTR [rbx+0xd8]
   1b8dc:	mov    rdi,rbx
   1b8df:	mov    DWORD PTR [rax+rdx*4],0x3f800000
   1b8e6:	call   1b6c0 <Plan7RenormalizeExits>
   1b8eb:	and    DWORD PTR [rbx+0x1c8],0xfffffffe
   1b8f2:	pop    rbx
   1b8f3:	ret    
   1b8f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b8ff:	nop

000000000001b900 <Plan7LSConfig>:
   1b900:	endbr64 
   1b904:	push   rbx
   1b905:	mov    rbx,rdi
   1b908:	movss  xmm0,DWORD PTR [rdi+0x130]
   1b910:	movabs rax,0x3f0000003f000000
   1b91a:	movss  xmm1,DWORD PTR [rip+0x21a7a]        # 3d39c <_IO_stdin_used+0x39c>
   1b922:	mov    QWORD PTR [rdi+0xb4],rax
   1b929:	mov    eax,DWORD PTR [rdi+0x88]
   1b92f:	movss  DWORD PTR [rdi+0xb0],xmm0
   1b937:	subss  xmm1,xmm0
   1b93b:	movss  DWORD PTR [rdi+0xc0],xmm0
   1b943:	lea    esi,[rax-0x1]
   1b946:	mov    rax,QWORD PTR [rdi+0xd0]
   1b94d:	movss  DWORD PTR [rdi+0xc8],xmm0
   1b955:	pxor   xmm0,xmm0
   1b959:	movss  DWORD PTR [rdi+0xac],xmm1
   1b961:	movss  DWORD PTR [rdi+0xbc],xmm1
   1b969:	movss  DWORD PTR [rdi+0xc4],xmm1
   1b971:	lea    rdi,[rax+0x8]
   1b975:	call   3ad60 <FSet>
   1b97a:	movss  xmm0,DWORD PTR [rip+0x21a1a]        # 3d39c <_IO_stdin_used+0x39c>
   1b982:	subss  xmm0,DWORD PTR [rbx+0xa8]
   1b98a:	mov    rax,QWORD PTR [rbx+0xd0]
   1b991:	movss  DWORD PTR [rax+0x4],xmm0
   1b996:	mov    eax,DWORD PTR [rbx+0x88]
   1b99c:	pxor   xmm0,xmm0
   1b9a0:	lea    esi,[rax-0x1]
   1b9a3:	mov    rax,QWORD PTR [rbx+0xd8]
   1b9aa:	lea    rdi,[rax+0x4]
   1b9ae:	call   3ad60 <FSet>
   1b9b3:	movsxd rdx,DWORD PTR [rbx+0x88]
   1b9ba:	mov    rax,QWORD PTR [rbx+0xd8]
   1b9c1:	mov    rdi,rbx
   1b9c4:	mov    DWORD PTR [rax+rdx*4],0x3f800000
   1b9cb:	call   1b6c0 <Plan7RenormalizeExits>
   1b9d0:	and    DWORD PTR [rbx+0x1c8],0xfffffffe
   1b9d7:	pop    rbx
   1b9d8:	ret    
   1b9d9:	nop    DWORD PTR [rax+0x0]

000000000001b9e0 <Plan7SWConfig>:
   1b9e0:	endbr64 
   1b9e4:	push   rbx
   1b9e5:	pxor   xmm4,xmm4
   1b9e9:	mov    rbx,rdi
   1b9ec:	cvtss2sd xmm4,xmm0
   1b9f0:	pxor   xmm0,xmm0
   1b9f4:	sub    rsp,0x10
   1b9f8:	movss  xmm2,DWORD PTR [rdi+0x130]
   1ba00:	mov    eax,DWORD PTR [rbx+0x88]
   1ba06:	mov    QWORD PTR [rdi+0xb4],0x3f800000
   1ba11:	movss  xmm3,DWORD PTR [rip+0x21983]        # 3d39c <_IO_stdin_used+0x39c>
   1ba19:	movss  DWORD PTR [rsp+0xc],xmm1
   1ba1f:	mov    QWORD PTR [rdi+0xc4],0x3f800000
   1ba2a:	lea    esi,[rax-0x1]
   1ba2d:	subss  xmm3,xmm2
   1ba31:	movss  DWORD PTR [rdi+0xb0],xmm2
   1ba39:	movss  DWORD PTR [rdi+0xc0],xmm2
   1ba41:	movsd  xmm2,QWORD PTR [rip+0x223a7]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1ba49:	cvtss2sd xmm0,DWORD PTR [rbx+0xa8]
   1ba51:	movss  DWORD PTR [rdi+0xac],xmm3
   1ba59:	movapd xmm7,xmm2
   1ba5d:	movss  DWORD PTR [rdi+0xbc],xmm3
   1ba65:	movapd xmm3,xmm2
   1ba69:	mov    rdi,QWORD PTR [rdi+0xd0]
   1ba70:	subsd  xmm3,xmm0
   1ba74:	movapd xmm0,xmm2
   1ba78:	subsd  xmm0,xmm4
   1ba7c:	add    rdi,0x8
   1ba80:	mulsd  xmm3,xmm0
   1ba84:	pxor   xmm0,xmm0
   1ba88:	cvtsd2ss xmm3,xmm3
   1ba8c:	movss  DWORD PTR [rdi-0x4],xmm3
   1ba91:	pxor   xmm3,xmm3
   1ba95:	cvtss2sd xmm0,DWORD PTR [rbx+0xa8]
   1ba9d:	cvtsi2ss xmm3,esi
   1baa1:	subsd  xmm7,xmm0
   1baa5:	movapd xmm0,xmm7
   1baa9:	mulsd  xmm0,xmm4
   1baad:	cvtss2sd xmm3,xmm3
   1bab1:	divsd  xmm0,xmm3
   1bab5:	cvtsd2ss xmm0,xmm0
   1bab9:	call   3ad60 <FSet>
   1babe:	movsxd rdx,DWORD PTR [rbx+0x88]
   1bac5:	mov    rcx,QWORD PTR [rbx+0xd8]
   1bacc:	pxor   xmm0,xmm0
   1bad0:	movss  xmm1,DWORD PTR [rsp+0xc]
   1bad6:	mov    rdi,QWORD PTR [rip+0x22313]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1badd:	mov    rax,rdx
   1bae0:	mov    DWORD PTR [rcx+rdx*4],0x3f800000
   1bae7:	sub    edx,0x1
   1baea:	cvtsi2ss xmm0,edx
   1baee:	cmp    eax,0x1
   1baf1:	divss  xmm1,xmm0
   1baf5:	jle    1bb4a <Plan7SWConfig+0x16a>
   1baf7:	pxor   xmm3,xmm3
   1bafb:	lea    esi,[rax-0x2]
   1bafe:	movq   xmm2,rdi
   1bb03:	xor    eax,eax
   1bb05:	cvtss2sd xmm3,xmm1
   1bb09:	nop    DWORD PTR [rax+0x0]
   1bb10:	pxor   xmm0,xmm0
   1bb14:	movapd xmm5,xmm2
   1bb18:	movapd xmm6,xmm3
   1bb1c:	mov    rdx,rax
   1bb1f:	cvtsi2ss xmm0,eax
   1bb23:	mulss  xmm0,xmm1
   1bb27:	cvtss2sd xmm0,xmm0
   1bb2b:	subsd  xmm5,xmm0
   1bb2f:	pxor   xmm0,xmm0
   1bb33:	divsd  xmm6,xmm5
   1bb37:	cvtsd2ss xmm0,xmm6
   1bb3b:	movss  DWORD PTR [rcx+rax*4+0x4],xmm0
   1bb41:	add    rax,0x1
   1bb45:	cmp    rdx,rsi
   1bb48:	jne    1bb10 <Plan7SWConfig+0x130>
   1bb4a:	mov    rdi,rbx
   1bb4d:	call   1b6c0 <Plan7RenormalizeExits>
   1bb52:	and    DWORD PTR [rbx+0x1c8],0xfffffffe
   1bb59:	add    rsp,0x10
   1bb5d:	pop    rbx
   1bb5e:	ret    
   1bb5f:	nop

000000000001bb60 <Plan7FSConfig>:
   1bb60:	endbr64 
   1bb64:	movabs rax,0x3f0000003f000000
   1bb6e:	push   rbx
   1bb6f:	pxor   xmm4,xmm4
   1bb73:	mov    rbx,rdi
   1bb76:	cvtss2sd xmm4,xmm0
   1bb7a:	pxor   xmm0,xmm0
   1bb7e:	sub    rsp,0x10
   1bb82:	movss  xmm2,DWORD PTR [rdi+0x130]
   1bb8a:	movss  xmm3,DWORD PTR [rip+0x2180a]        # 3d39c <_IO_stdin_used+0x39c>
   1bb92:	mov    QWORD PTR [rdi+0xb4],rax
   1bb99:	mov    eax,DWORD PTR [rbx+0x88]
   1bb9f:	movss  DWORD PTR [rsp+0xc],xmm1
   1bba5:	subss  xmm3,xmm2
   1bba9:	movss  DWORD PTR [rdi+0xb0],xmm2
   1bbb1:	movss  DWORD PTR [rdi+0xc0],xmm2
   1bbb9:	cvtss2sd xmm0,DWORD PTR [rbx+0xa8]
   1bbc1:	lea    esi,[rax-0x1]
   1bbc4:	movss  DWORD PTR [rdi+0xc8],xmm2
   1bbcc:	movsd  xmm2,QWORD PTR [rip+0x2221c]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1bbd4:	movss  DWORD PTR [rdi+0xac],xmm3
   1bbdc:	movss  DWORD PTR [rdi+0xbc],xmm3
   1bbe4:	movapd xmm7,xmm2
   1bbe8:	movss  DWORD PTR [rdi+0xc4],xmm3
   1bbf0:	movapd xmm3,xmm2
   1bbf4:	mov    rdi,QWORD PTR [rdi+0xd0]
   1bbfb:	subsd  xmm3,xmm0
   1bbff:	movapd xmm0,xmm2
   1bc03:	subsd  xmm0,xmm4
   1bc07:	add    rdi,0x8
   1bc0b:	mulsd  xmm3,xmm0
   1bc0f:	pxor   xmm0,xmm0
   1bc13:	cvtsd2ss xmm3,xmm3
   1bc17:	movss  DWORD PTR [rdi-0x4],xmm3
   1bc1c:	pxor   xmm3,xmm3
   1bc20:	cvtss2sd xmm0,DWORD PTR [rbx+0xa8]
   1bc28:	cvtsi2ss xmm3,esi
   1bc2c:	subsd  xmm7,xmm0
   1bc30:	movapd xmm0,xmm7
   1bc34:	mulsd  xmm0,xmm4
   1bc38:	cvtss2sd xmm3,xmm3
   1bc3c:	divsd  xmm0,xmm3
   1bc40:	cvtsd2ss xmm0,xmm0
   1bc44:	call   3ad60 <FSet>
   1bc49:	movsxd rdx,DWORD PTR [rbx+0x88]
   1bc50:	mov    rcx,QWORD PTR [rbx+0xd8]
   1bc57:	pxor   xmm0,xmm0
   1bc5b:	movss  xmm1,DWORD PTR [rsp+0xc]
   1bc61:	mov    rdi,QWORD PTR [rip+0x22188]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1bc68:	mov    rax,rdx
   1bc6b:	mov    DWORD PTR [rcx+rdx*4],0x3f800000
   1bc72:	sub    edx,0x1
   1bc75:	cvtsi2ss xmm0,edx
   1bc79:	cmp    eax,0x1
   1bc7c:	divss  xmm1,xmm0
   1bc80:	jle    1bcd2 <Plan7FSConfig+0x172>
   1bc82:	pxor   xmm3,xmm3
   1bc86:	lea    esi,[rax-0x2]
   1bc89:	movq   xmm2,rdi
   1bc8e:	xor    eax,eax
   1bc90:	cvtss2sd xmm3,xmm1
   1bc94:	nop    DWORD PTR [rax+0x0]
   1bc98:	pxor   xmm0,xmm0
   1bc9c:	movapd xmm5,xmm2
   1bca0:	movapd xmm6,xmm3
   1bca4:	mov    rdx,rax
   1bca7:	cvtsi2ss xmm0,eax
   1bcab:	mulss  xmm0,xmm1
   1bcaf:	cvtss2sd xmm0,xmm0
   1bcb3:	subsd  xmm5,xmm0
   1bcb7:	pxor   xmm0,xmm0
   1bcbb:	divsd  xmm6,xmm5
   1bcbf:	cvtsd2ss xmm0,xmm6
   1bcc3:	movss  DWORD PTR [rcx+rax*4+0x4],xmm0
   1bcc9:	add    rax,0x1
   1bccd:	cmp    rdx,rsi
   1bcd0:	jne    1bc98 <Plan7FSConfig+0x138>
   1bcd2:	mov    rdi,rbx
   1bcd5:	call   1b6c0 <Plan7RenormalizeExits>
   1bcda:	and    DWORD PTR [rbx+0x1c8],0xfffffffe
   1bce1:	add    rsp,0x10
   1bce5:	pop    rbx
   1bce6:	ret    
   1bce7:	nop    WORD PTR [rax+rax*1+0x0]

000000000001bcf0 <Plan7ESTConfig>:
   1bcf0:	endbr64 
   1bcf4:	movabs rax,0x3f7f454a3b3ab656
   1bcfe:	push   r15
   1bd00:	mov    r15,rdi
   1bd03:	push   r14
   1bd05:	mov    r14,rdx
   1bd08:	push   r13
   1bd0a:	mov    r13,rsi
   1bd0d:	push   r12
   1bd0f:	push   rbp
   1bd10:	push   rbx
   1bd11:	sub    rsp,0x28
   1bd15:	mov    edx,DWORD PTR [rdi+0x88]
   1bd1b:	movsd  xmm3,QWORD PTR [rip+0x220bd]        # 3dde0 <_IO_stdin_used+0xde0>
   1bd23:	mov    QWORD PTR [rdi+0xac],rax
   1bd2a:	movss  DWORD PTR [rsp+0x14],xmm0
   1bd30:	pxor   xmm0,xmm0
   1bd34:	cvtsi2ss xmm0,edx
   1bd38:	lea    esi,[rdx-0x1]
   1bd3b:	mov    QWORD PTR [rdi+0xbc],rax
   1bd42:	mov    rax,QWORD PTR [rdi+0xd0]
   1bd49:	mov    QWORD PTR [rdi+0xb4],0x3f800000
   1bd54:	mov    QWORD PTR [rdi+0xc4],0x3f800000
   1bd5f:	lea    rdi,[rax+0x8]
   1bd63:	mov    DWORD PTR [rax+0x4],0x3f000000
   1bd6a:	cvtss2sd xmm0,xmm0
   1bd6e:	subsd  xmm0,QWORD PTR [rip+0x2207a]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1bd76:	movss  DWORD PTR [rsp+0x18],xmm1
   1bd7c:	divsd  xmm3,xmm0
   1bd80:	pxor   xmm0,xmm0
   1bd84:	cvtsd2ss xmm0,xmm3
   1bd88:	call   3ad60 <FSet>
   1bd8d:	movsxd rdx,DWORD PTR [r15+0x88]
   1bd94:	pxor   xmm0,xmm0
   1bd98:	movsd  xmm4,QWORD PTR [rip+0x22040]        # 3dde0 <_IO_stdin_used+0xde0>
   1bda0:	mov    rdi,QWORD PTR [r15+0xd8]
   1bda7:	cvtsi2ss xmm0,edx
   1bdab:	lea    esi,[rdx-0x1]
   1bdae:	mov    DWORD PTR [rdi+rdx*4],0x3f800000
   1bdb5:	cvtss2sd xmm0,xmm0
   1bdb9:	subsd  xmm0,QWORD PTR [rip+0x2202f]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1bdc1:	divsd  xmm4,xmm0
   1bdc5:	pxor   xmm0,xmm0
   1bdc9:	cvtsd2ss xmm0,xmm4
   1bdcd:	call   3ad60 <FSet>
   1bdd2:	mov    eax,DWORD PTR [r15+0x88]
   1bdd9:	test   eax,eax
   1bddb:	jle    1bf3e <Plan7ESTConfig+0x24e>
   1bde1:	movsd  xmm5,QWORD PTR [rip+0x22007]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1bde9:	pxor   xmm0,xmm0
   1bded:	pxor   xmm1,xmm1
   1bdf1:	mov    DWORD PTR [rsp+0x10],0x1
   1bdf9:	cvtss2sd xmm0,DWORD PTR [rsp+0x14]
   1bdff:	cvtss2sd xmm1,DWORD PTR [rsp+0x18]
   1be05:	mov    ebp,0x4
   1be0a:	mov    DWORD PTR [rsp+0x1c],0x3f800000
   1be12:	subsd  xmm5,xmm0
   1be16:	movapd xmm0,xmm5
   1be1a:	subsd  xmm0,xmm1
   1be1e:	movsd  QWORD PTR [rsp],xmm0
   1be23:	nop    DWORD PTR [rax+rax*1+0x0]
   1be28:	lea    r12,[rbp+rbp*1+0x0]
   1be2d:	xor    ebx,ebx
   1be2f:	nop
   1be30:	movsxd rax,DWORD PTR [r13+rbx*1+0x0]
   1be35:	mov    rsi,QWORD PTR [r15+0x98]
   1be3c:	mov    rdx,QWORD PTR [r15+0x1a8]
   1be43:	movss  xmm1,DWORD PTR [rbx]
   1be47:	mov    rdi,QWORD PTR [rsi+r12*1]
   1be4b:	mov    rsi,QWORD PTR [r14+rax*8]
   1be4f:	mov    rcx,QWORD PTR [rdx+rbx*2]
   1be53:	movss  xmm0,DWORD PTR [rdi+rax*4]
   1be58:	mulss  xmm0,DWORD PTR [rsi+rbx*1]
   1be5d:	add    rcx,rbp
   1be60:	mov    QWORD PTR [rsp+0x8],rcx
   1be65:	cvtss2sd xmm0,xmm0
   1be69:	mulsd  xmm0,QWORD PTR [rsp]
   1be6e:	cvtsd2ss xmm0,xmm0
   1be72:	call   17710 <Prob2Score>
   1be77:	mov    rdx,QWORD PTR [rsp+0x8]
   1be7c:	mov    rsi,QWORD PTR [r15+0xa0]
   1be83:	movss  xmm1,DWORD PTR [rbx]
   1be87:	mov    DWORD PTR [rdx],eax
   1be89:	movsxd rax,DWORD PTR [r13+rbx*1+0x0]
   1be8e:	mov    rdi,QWORD PTR [rsi+r12*1]
   1be92:	mov    rdx,QWORD PTR [r15+0x1b0]
   1be99:	mov    rsi,QWORD PTR [r14+rax*8]
   1be9d:	movss  xmm0,DWORD PTR [rdi+rax*4]
   1bea2:	mov    rcx,QWORD PTR [rdx+rbx*2]
   1bea6:	mulss  xmm0,DWORD PTR [rsi+rbx*1]
   1beab:	add    rbx,0x4
   1beaf:	add    rcx,rbp
   1beb2:	mov    QWORD PTR [rsp+0x8],rcx
   1beb7:	cvtss2sd xmm0,xmm0
   1bebb:	mulsd  xmm0,QWORD PTR [rsp]
   1bec0:	cvtsd2ss xmm0,xmm0
   1bec4:	call   17710 <Prob2Score>
   1bec9:	mov    rdx,QWORD PTR [rsp+0x8]
   1bece:	mov    DWORD PTR [rdx],eax
   1bed0:	cmp    rbx,0x100
   1bed7:	jne    1be30 <Plan7ESTConfig+0x140>
   1bedd:	mov    rax,QWORD PTR [r15+0x1a8]
   1bee4:	movss  xmm1,DWORD PTR [rsp+0x1c]
   1beea:	movss  xmm0,DWORD PTR [rsp+0x14]
   1bef0:	mov    rax,QWORD PTR [rax+0x200]
   1bef7:	mov    DWORD PTR [rax+rbp*1],0x0
   1befe:	add    rbp,0x4
   1bf02:	call   17710 <Prob2Score>
   1bf07:	movss  xmm1,DWORD PTR [rip+0x2148d]        # 3d39c <_IO_stdin_used+0x39c>
   1bf0f:	movss  xmm0,DWORD PTR [rsp+0x18]
   1bf15:	mov    DWORD PTR [r15+0x1b8],eax
   1bf1c:	call   17710 <Prob2Score>
   1bf21:	add    DWORD PTR [rsp+0x10],0x1
   1bf26:	mov    DWORD PTR [r15+0x1bc],eax
   1bf2d:	mov    eax,DWORD PTR [rsp+0x10]
   1bf31:	cmp    DWORD PTR [r15+0x88],eax
   1bf38:	jge    1be28 <Plan7ESTConfig+0x138>
   1bf3e:	add    rsp,0x28
   1bf42:	pop    rbx
   1bf43:	pop    rbp
   1bf44:	pop    r12
   1bf46:	pop    r13
   1bf48:	pop    r14
   1bf4a:	pop    r15
   1bf4c:	ret    
   1bf4d:	nop    DWORD PTR [rax]

000000000001bf50 <DegenerateSymbolScore>:
   1bf50:	endbr64 
   1bf54:	mov    eax,DWORD PTR [rip+0x463a6]        # 62300 <Alphabet_size>
   1bf5a:	test   eax,eax
   1bf5c:	jle    1c058 <DegenerateSymbolScore+0x108>
   1bf62:	push   r13
   1bf64:	movsxd rdx,edx
   1bf67:	pxor   xmm5,xmm5
   1bf6b:	lea    rax,[rip+0x4612e]        # 620a0 <Degenerate>
   1bf72:	push   r12
   1bf74:	lea    rdx,[rdx+rdx*4]
   1bf78:	mov    r13,rdi
   1bf7b:	mov    r12,rsi
   1bf7e:	push   rbp
   1bf7f:	movaps xmm4,xmm5
   1bf82:	lea    rbp,[rax+rdx*4]
   1bf86:	movaps xmm1,xmm5
   1bf89:	push   rbx
   1bf8a:	xor    ebx,ebx
   1bf8c:	sub    rsp,0x18
   1bf90:	jmp    1bfc4 <DegenerateSymbolScore+0x74>
   1bf92:	nop    WORD PTR [rax+rax*1+0x0]
   1bf98:	mov    rax,QWORD PTR [rip+0x23999]        # 3f938 <xpam120+0xbd8>
   1bf9f:	movq   xmm0,rax
   1bfa4:	mulsd  xmm2,xmm0
   1bfa8:	cvtss2sd xmm1,xmm1
   1bfac:	addss  xmm4,xmm3
   1bfb0:	addsd  xmm1,xmm2
   1bfb4:	cvtsd2ss xmm1,xmm1
   1bfb8:	add    rbx,0x1
   1bfbc:	cmp    DWORD PTR [rip+0x4633e],ebx        # 62300 <Alphabet_size>
   1bfc2:	jle    1c030 <DegenerateSymbolScore+0xe0>
   1bfc4:	cmp    BYTE PTR [rbp+rbx*1+0x0],0x0
   1bfc9:	je     1bfb8 <DegenerateSymbolScore+0x68>
   1bfcb:	movss  xmm3,DWORD PTR [r12+rbx*4]
   1bfd1:	movss  xmm0,DWORD PTR [r13+rbx*4+0x0]
   1bfd8:	pxor   xmm2,xmm2
   1bfdc:	divss  xmm0,xmm3
   1bfe0:	cvtss2sd xmm2,xmm3
   1bfe4:	comiss xmm0,xmm5
   1bfe7:	jbe    1bf98 <DegenerateSymbolScore+0x48>
   1bfe9:	movss  DWORD PTR [rsp+0xc],xmm4
   1bfef:	cvtss2sd xmm0,xmm0
   1bff3:	movss  DWORD PTR [rsp+0x8],xmm1
   1bff9:	movsd  QWORD PTR [rsp],xmm2
   1bffe:	call   35e0 <log@plt>
   1c003:	movss  xmm3,DWORD PTR [r12+rbx*4]
   1c009:	movsd  xmm2,QWORD PTR [rsp]
   1c00e:	pxor   xmm5,xmm5
   1c012:	mulsd  xmm0,QWORD PTR [rip+0x22cc6]        # 3ece0 <_IO_stdin_used+0x1ce0>
   1c01a:	movss  xmm1,DWORD PTR [rsp+0x8]
   1c020:	movss  xmm4,DWORD PTR [rsp+0xc]
   1c026:	jmp    1bfa4 <DegenerateSymbolScore+0x54>
   1c02b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c030:	cvtss2sd xmm1,xmm1
   1c034:	mulsd  xmm1,QWORD PTR [rip+0x21344]        # 3d380 <_IO_stdin_used+0x380>
   1c03c:	cvtss2sd xmm4,xmm4
   1c040:	add    rsp,0x18
   1c044:	pop    rbx
   1c045:	pop    rbp
   1c046:	pop    r12
   1c048:	pop    r13
   1c04a:	divsd  xmm1,xmm4
   1c04e:	cvttsd2si eax,xmm1
   1c052:	ret    
   1c053:	nop    DWORD PTR [rax+rax*1+0x0]
   1c058:	pxor   xmm4,xmm4
   1c05c:	movapd xmm1,xmm4
   1c060:	divsd  xmm1,xmm4
   1c064:	cvttsd2si eax,xmm1
   1c068:	ret    
   1c069:	nop    DWORD PTR [rax+0x0]

000000000001c070 <P7Logoddsify.part.0>:
   1c070:	push   r15
   1c072:	push   r14
   1c074:	lea    r14,[rdi+0xe0]
   1c07b:	push   r13
   1c07d:	push   r12
   1c07f:	mov    r12d,0x1
   1c085:	push   rbp
   1c086:	mov    ebp,0x4
   1c08b:	push   rbx
   1c08c:	mov    rbx,rdi
   1c08f:	sub    rsp,0x28
   1c093:	mov    ecx,DWORD PTR [rdi+0x88]
   1c099:	mov    DWORD PTR [rsp+0x18],esi
   1c09d:	test   ecx,ecx
   1c09f:	jle    1c3a7 <P7Logoddsify.part.0+0x337>
   1c0a5:	nop    DWORD PTR [rax]
   1c0a8:	mov    r15d,DWORD PTR [rip+0x46251]        # 62300 <Alphabet_size>
   1c0af:	lea    rax,[rbp+rbp*1+0x0]
   1c0b4:	xor    r13d,r13d
   1c0b7:	mov    QWORD PTR [rsp+0x8],rax
   1c0bc:	test   r15d,r15d
   1c0bf:	jg     1c0e4 <P7Logoddsify.part.0+0x74>
   1c0c1:	jmp    1c16d <P7Logoddsify.part.0+0xfd>
   1c0c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c0d0:	mov    r15d,DWORD PTR [rip+0x46229]        # 62300 <Alphabet_size>
   1c0d7:	add    r13,0x1
   1c0db:	cmp    r15d,r13d
   1c0de:	jle    1c16d <P7Logoddsify.part.0+0xfd>
   1c0e4:	mov    rax,QWORD PTR [rbx+0x140]
   1c0eb:	mov    rcx,QWORD PTR [rsp+0x8]
   1c0f0:	movss  xmm1,DWORD PTR [rbx+r13*4+0xe0]
   1c0fa:	mov    r15,QWORD PTR [rax+r13*8]
   1c0fe:	mov    rax,QWORD PTR [rbx+0x98]
   1c105:	mov    rax,QWORD PTR [rax+rcx*1]
   1c109:	add    r15,rbp
   1c10c:	movss  xmm0,DWORD PTR [rax+r13*4]
   1c112:	call   17710 <Prob2Score>
   1c117:	mov    DWORD PTR [r15],eax
   1c11a:	cmp    DWORD PTR [rbx+0x88],r12d
   1c121:	jle    1c0d0 <P7Logoddsify.part.0+0x60>
   1c123:	mov    rax,QWORD PTR [rbx+0x148]
   1c12a:	mov    rdx,QWORD PTR [rsp+0x8]
   1c12f:	movss  xmm1,DWORD PTR [rbx+r13*4+0xe0]
   1c139:	mov    r15,QWORD PTR [rax+r13*8]
   1c13d:	mov    rax,QWORD PTR [rbx+0xa0]
   1c144:	mov    rax,QWORD PTR [rax+rdx*1]
   1c148:	add    r15,rbp
   1c14b:	movss  xmm0,DWORD PTR [rax+r13*4]
   1c151:	add    r13,0x1
   1c155:	call   17710 <Prob2Score>
   1c15a:	mov    DWORD PTR [r15],eax
   1c15d:	mov    r15d,DWORD PTR [rip+0x4619c]        # 62300 <Alphabet_size>
   1c164:	cmp    r15d,r13d
   1c167:	jg     1c0e4 <P7Logoddsify.part.0+0x74>
   1c16d:	lea    rax,[rbp+rbp*1+0x0]
   1c172:	movsxd r8,r15d
   1c175:	cmp    r15d,DWORD PTR [rip+0x46120]        # 6229c <Alphabet_iupac>
   1c17c:	mov    QWORD PTR [rsp+0x10],rax
   1c181:	lea    r13,[r8*8+0x0]
   1c189:	jl     1c1a1 <P7Logoddsify.part.0+0x131>
   1c18b:	jmp    1c220 <P7Logoddsify.part.0+0x1b0>
   1c190:	add    r15d,0x1
   1c194:	add    r13,0x8
   1c198:	cmp    r15d,DWORD PTR [rip+0x460fd]        # 6229c <Alphabet_iupac>
   1c19f:	jge    1c220 <P7Logoddsify.part.0+0x1b0>
   1c1a1:	mov    rax,QWORD PTR [rbx+0x140]
   1c1a8:	mov    rsi,QWORD PTR [rsp+0x10]
   1c1ad:	mov    edx,r15d
   1c1b0:	mov    r9,QWORD PTR [rax+r13*1]
   1c1b4:	mov    rax,QWORD PTR [rbx+0x98]
   1c1bb:	mov    rdi,QWORD PTR [rax+rsi*1]
   1c1bf:	add    r9,rbp
   1c1c2:	mov    rsi,r14
   1c1c5:	mov    QWORD PTR [rsp+0x8],r9
   1c1ca:	call   1bf50 <DegenerateSymbolScore>
   1c1cf:	mov    r9,QWORD PTR [rsp+0x8]
   1c1d4:	mov    DWORD PTR [r9],eax
   1c1d7:	cmp    DWORD PTR [rbx+0x88],r12d
   1c1de:	jle    1c190 <P7Logoddsify.part.0+0x120>
   1c1e0:	mov    rax,QWORD PTR [rbx+0x148]
   1c1e7:	mov    rcx,QWORD PTR [rsp+0x10]
   1c1ec:	mov    edx,r15d
   1c1ef:	mov    rsi,r14
   1c1f2:	mov    r9,QWORD PTR [rax+r13*1]
   1c1f6:	mov    rax,QWORD PTR [rbx+0xa0]
   1c1fd:	mov    rdi,QWORD PTR [rax+rcx*1]
   1c201:	add    r9,rbp
   1c204:	mov    QWORD PTR [rsp+0x8],r9
   1c209:	call   1bf50 <DegenerateSymbolScore>
   1c20e:	mov    r9,QWORD PTR [rsp+0x8]
   1c213:	mov    DWORD PTR [r9],eax
   1c216:	jmp    1c190 <P7Logoddsify.part.0+0x120>
   1c21b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c220:	mov    eax,DWORD PTR [rbx+0x88]
   1c226:	add    r12d,0x1
   1c22a:	add    rbp,0x4
   1c22e:	cmp    r12d,eax
   1c231:	jle    1c0a8 <P7Logoddsify.part.0+0x38>
   1c237:	cmp    eax,0x1
   1c23a:	jle    1c3a7 <P7Logoddsify.part.0+0x337>
   1c240:	xor    ebp,ebp
   1c242:	nop    WORD PTR [rax+rax*1+0x0]
   1c248:	mov    rax,QWORD PTR [rbx+0x138]
   1c24f:	add    rbp,0x1
   1c253:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c25b:	lea    r12,[rbp*4+0x0]
   1c263:	mov    r13,QWORD PTR [rax]
   1c266:	mov    rax,QWORD PTR [rbx+0x90]
   1c26d:	mov    rax,QWORD PTR [rax+rbp*8]
   1c271:	add    r13,r12
   1c274:	movss  xmm0,DWORD PTR [rax]
   1c278:	call   17710 <Prob2Score>
   1c27d:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c285:	mov    DWORD PTR [r13+0x0],eax
   1c289:	mov    rax,QWORD PTR [rbx+0x138]
   1c290:	mov    r13,QWORD PTR [rax+0x8]
   1c294:	mov    rax,QWORD PTR [rbx+0x90]
   1c29b:	mov    rax,QWORD PTR [rax+rbp*8]
   1c29f:	add    r13,r12
   1c2a2:	movss  xmm0,DWORD PTR [rax+0x4]
   1c2a7:	call   17710 <Prob2Score>
   1c2ac:	movss  xmm1,DWORD PTR [rip+0x210e8]        # 3d39c <_IO_stdin_used+0x39c>
   1c2b4:	mov    DWORD PTR [r13+0x0],eax
   1c2b8:	mov    rax,QWORD PTR [rbx+0x138]
   1c2bf:	mov    r13,QWORD PTR [rax+0x10]
   1c2c3:	mov    rax,QWORD PTR [rbx+0x90]
   1c2ca:	mov    rax,QWORD PTR [rax+rbp*8]
   1c2ce:	add    r13,r12
   1c2d1:	movss  xmm0,DWORD PTR [rax+0x8]
   1c2d6:	call   17710 <Prob2Score>
   1c2db:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c2e3:	mov    DWORD PTR [r13+0x0],eax
   1c2e7:	mov    rax,QWORD PTR [rbx+0x138]
   1c2ee:	mov    r13,QWORD PTR [rax+0x18]
   1c2f2:	mov    rax,QWORD PTR [rbx+0x90]
   1c2f9:	mov    rax,QWORD PTR [rax+rbp*8]
   1c2fd:	add    r13,r12
   1c300:	movss  xmm0,DWORD PTR [rax+0xc]
   1c305:	call   17710 <Prob2Score>
   1c30a:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c312:	mov    DWORD PTR [r13+0x0],eax
   1c316:	mov    rax,QWORD PTR [rbx+0x138]
   1c31d:	mov    r13,QWORD PTR [rax+0x20]
   1c321:	mov    rax,QWORD PTR [rbx+0x90]
   1c328:	mov    rax,QWORD PTR [rax+rbp*8]
   1c32c:	add    r13,r12
   1c32f:	movss  xmm0,DWORD PTR [rax+0x10]
   1c334:	call   17710 <Prob2Score>
   1c339:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c341:	mov    DWORD PTR [r13+0x0],eax
   1c345:	mov    rax,QWORD PTR [rbx+0x138]
   1c34c:	mov    r13,QWORD PTR [rax+0x28]
   1c350:	mov    rax,QWORD PTR [rbx+0x90]
   1c357:	mov    rax,QWORD PTR [rax+rbp*8]
   1c35b:	add    r13,r12
   1c35e:	movss  xmm0,DWORD PTR [rax+0x14]
   1c363:	call   17710 <Prob2Score>
   1c368:	movss  xmm1,DWORD PTR [rip+0x2102c]        # 3d39c <_IO_stdin_used+0x39c>
   1c370:	mov    DWORD PTR [r13+0x0],eax
   1c374:	mov    rax,QWORD PTR [rbx+0x138]
   1c37b:	add    r12,QWORD PTR [rax+0x30]
   1c37f:	mov    rax,QWORD PTR [rbx+0x90]
   1c386:	mov    rax,QWORD PTR [rax+rbp*8]
   1c38a:	movss  xmm0,DWORD PTR [rax+0x18]
   1c38f:	call   17710 <Prob2Score>
   1c394:	mov    DWORD PTR [r12],eax
   1c398:	lea    eax,[rbp+0x1]
   1c39b:	cmp    DWORD PTR [rbx+0x88],eax
   1c3a1:	jg     1c248 <P7Logoddsify.part.0+0x1d8>
   1c3a7:	movss  xmm0,DWORD PTR [rbx+0xa8]
   1c3af:	pxor   xmm7,xmm7
   1c3b3:	comiss xmm0,xmm7
   1c3b6:	ja     1c9a5 <P7Logoddsify.part.0+0x935>
   1c3bc:	movss  xmm4,DWORD PTR [rip+0x234f4]        # 3f8b8 <xpam120+0xb58>
   1c3c4:	movss  DWORD PTR [rsp+0x8],xmm4
   1c3ca:	movsxd rax,DWORD PTR [rbx+0x88]
   1c3d1:	test   eax,eax
   1c3d3:	jle    1c620 <P7Logoddsify.part.0+0x5b0>
   1c3d9:	mov    ebp,0x4
   1c3de:	mov    r12d,0x1
   1c3e4:	jmp    1c569 <P7Logoddsify.part.0+0x4f9>
   1c3e9:	nop    DWORD PTR [rax+0x0]
   1c3f0:	cmp    r12d,0x1
   1c3f4:	je     1c5c8 <P7Logoddsify.part.0+0x558>
   1c3fa:	movss  xmm6,DWORD PTR [rsp+0x8]
   1c400:	comiss xmm6,DWORD PTR [rip+0x234b1]        # 3f8b8 <xpam120+0xb58>
   1c407:	jbe    1c5c8 <P7Logoddsify.part.0+0x558>
   1c40d:	movss  xmm2,DWORD PTR [rip+0x234a3]        # 3f8b8 <xpam120+0xb58>
   1c415:	mov    rax,QWORD PTR [rbx+0x90]
   1c41c:	lea    r13,[rbp+rbp*1+0x0]
   1c421:	pxor   xmm5,xmm5
   1c425:	mov    rax,QWORD PTR [rax+r13*1-0x8]
   1c42a:	movss  xmm0,DWORD PTR [rax+0x14]
   1c42f:	comiss xmm0,xmm5
   1c432:	jbe    1c490 <P7Logoddsify.part.0+0x420>
   1c434:	mov    edx,DWORD PTR [rsp+0x18]
   1c438:	pxor   xmm7,xmm7
   1c43c:	movss  DWORD PTR [rsp+0x1c],xmm2
   1c442:	cvtss2sd xmm0,xmm0
   1c446:	cvtss2sd xmm7,DWORD PTR [rsp+0x8]
   1c44c:	movsd  QWORD PTR [rsp+0x10],xmm7
   1c452:	test   edx,edx
   1c454:	je     1c970 <P7Logoddsify.part.0+0x900>
   1c45a:	call   35e0 <log@plt>
   1c45f:	addsd  xmm0,QWORD PTR [rsp+0x10]
   1c465:	pxor   xmm1,xmm1
   1c469:	movss  xmm2,DWORD PTR [rsp+0x1c]
   1c46f:	mov    rax,QWORD PTR [rbx+0x90]
   1c476:	cvtss2sd xmm1,xmm2
   1c47a:	comisd xmm1,xmm0
   1c47e:	mov    rax,QWORD PTR [rax+r13*1-0x8]
   1c483:	jbe    1ca04 <P7Logoddsify.part.0+0x994>
   1c489:	nop    DWORD PTR [rax+0x0]
   1c490:	movss  xmm0,DWORD PTR [rax+0x18]
   1c495:	pxor   xmm6,xmm6
   1c499:	comiss xmm0,xmm6
   1c49c:	ja     1c5e0 <P7Logoddsify.part.0+0x570>
   1c4a2:	movss  xmm5,DWORD PTR [rip+0x2340e]        # 3f8b8 <xpam120+0xb58>
   1c4aa:	movss  DWORD PTR [rsp+0x8],xmm5
   1c4b0:	comiss xmm2,DWORD PTR [rip+0x23401]        # 3f8b8 <xpam120+0xb58>
   1c4b7:	movss  DWORD PTR [rsp+0x10],xmm2
   1c4bd:	jbe    1c5c8 <P7Logoddsify.part.0+0x558>
   1c4c3:	pxor   xmm0,xmm0
   1c4c7:	cvtss2sd xmm0,DWORD PTR [rbx+0x130]
   1c4cf:	call   35e0 <log@plt>
   1c4d4:	movss  xmm2,DWORD PTR [rsp+0x10]
   1c4da:	movsd  xmm1,QWORD PTR [rip+0x2284e]        # 3ed30 <_IO_stdin_used+0x1d30>
   1c4e2:	movsd  xmm3,QWORD PTR [rip+0x227fe]        # 3ece8 <_IO_stdin_used+0x1ce8>
   1c4ea:	cvtss2sd xmm2,xmm2
   1c4ee:	subsd  xmm2,xmm0
   1c4f2:	mulsd  xmm2,QWORD PTR [rip+0x2280e]        # 3ed08 <_IO_stdin_used+0x1d08>
   1c4fa:	addsd  xmm2,QWORD PTR [rip+0x218de]        # 3dde0 <_IO_stdin_used+0xde0>
   1c502:	movapd xmm0,xmm2
   1c506:	andpd  xmm0,xmm1
   1c50a:	ucomisd xmm3,xmm0
   1c50e:	jbe    1c543 <P7Logoddsify.part.0+0x4d3>
   1c510:	cvttsd2si rax,xmm2
   1c515:	pxor   xmm0,xmm0
   1c519:	movsd  xmm4,QWORD PTR [rip+0x218cf]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1c521:	andnpd xmm1,xmm2
   1c525:	cvtsi2sd xmm0,rax
   1c52a:	movapd xmm3,xmm0
   1c52e:	cmpnlesd xmm3,xmm2
   1c533:	movapd xmm2,xmm1
   1c537:	andpd  xmm3,xmm4
   1c53b:	subsd  xmm0,xmm3
   1c53f:	orpd   xmm2,xmm0
   1c543:	cvttsd2si eax,xmm2
   1c547:	mov    rdx,QWORD PTR [rbx+0x170]
   1c54e:	mov    DWORD PTR [rdx+rbp*1],eax
   1c551:	movsxd rax,DWORD PTR [rbx+0x88]
   1c558:	add    r12d,0x1
   1c55c:	add    rbp,0x4
   1c560:	cmp    r12d,eax
   1c563:	jg     1c620 <P7Logoddsify.part.0+0x5b0>
   1c569:	mov    rax,QWORD PTR [rbx+0xd0]
   1c570:	pxor   xmm6,xmm6
   1c574:	movss  xmm0,DWORD PTR [rax+rbp*1]
   1c579:	comiss xmm0,xmm6
   1c57c:	jbe    1c3f0 <P7Logoddsify.part.0+0x380>
   1c582:	cvtss2sd xmm0,xmm0
   1c586:	call   35e0 <log@plt>
   1c58b:	pxor   xmm2,xmm2
   1c58f:	cvtsd2ss xmm2,xmm0
   1c593:	cmp    r12d,0x1
   1c597:	je     1c4b0 <P7Logoddsify.part.0+0x440>
   1c59d:	movss  xmm4,DWORD PTR [rsp+0x8]
   1c5a3:	comiss xmm4,DWORD PTR [rip+0x2330e]        # 3f8b8 <xpam120+0xb58>
   1c5aa:	ja     1c415 <P7Logoddsify.part.0+0x3a5>
   1c5b0:	comiss xmm2,DWORD PTR [rip+0x23301]        # 3f8b8 <xpam120+0xb58>
   1c5b7:	movss  DWORD PTR [rsp+0x10],xmm2
   1c5bd:	ja     1c4c3 <P7Logoddsify.part.0+0x453>
   1c5c3:	nop    DWORD PTR [rax+rax*1+0x0]
   1c5c8:	mov    rax,QWORD PTR [rbx+0x170]
   1c5cf:	mov    DWORD PTR [rax+rbp*1],0xc521974f
   1c5d6:	jmp    1c551 <P7Logoddsify.part.0+0x4e1>
   1c5db:	nop    DWORD PTR [rax+rax*1+0x0]
   1c5e0:	movss  DWORD PTR [rsp+0x10],xmm2
   1c5e6:	cvtss2sd xmm0,xmm0
   1c5ea:	call   35e0 <log@plt>
   1c5ef:	pxor   xmm6,xmm6
   1c5f3:	movss  xmm2,DWORD PTR [rsp+0x10]
   1c5f9:	movapd xmm1,xmm0
   1c5fd:	pxor   xmm0,xmm0
   1c601:	cvtss2sd xmm0,DWORD PTR [rsp+0x8]
   1c607:	addsd  xmm0,xmm1
   1c60b:	cvtsd2ss xmm6,xmm0
   1c60f:	movss  DWORD PTR [rsp+0x8],xmm6
   1c615:	jmp    1c4b0 <P7Logoddsify.part.0+0x440>
   1c61a:	nop    WORD PTR [rax+rax*1+0x0]
   1c620:	mov    rdx,QWORD PTR [rbx+0x178]
   1c627:	mov    DWORD PTR [rdx+rax*4],0x0
   1c62e:	mov    ecx,DWORD PTR [rbx+0x88]
   1c634:	lea    eax,[rcx-0x1]
   1c637:	test   eax,eax
   1c639:	jle    1c838 <P7Logoddsify.part.0+0x7c8>
   1c63f:	cdqe   
   1c641:	pxor   xmm3,xmm3
   1c645:	lea    rbp,[rax*4+0x0]
   1c64d:	movsxd rax,ecx
   1c650:	sub    ecx,0x2
   1c653:	sub    rax,rcx
   1c656:	lea    r12,[rax*4-0x8]
   1c65e:	jmp    1c7d0 <P7Logoddsify.part.0+0x760>
   1c663:	nop    DWORD PTR [rax+rax*1+0x0]
   1c668:	comiss xmm3,DWORD PTR [rip+0x23249]        # 3f8b8 <xpam120+0xb58>
   1c66f:	mov    eax,0xc521974f
   1c674:	jbe    1c7c4 <P7Logoddsify.part.0+0x754>
   1c67a:	movss  xmm2,DWORD PTR [rip+0x23236]        # 3f8b8 <xpam120+0xb58>
   1c682:	mov    rax,QWORD PTR [rbx+0x90]
   1c689:	pxor   xmm5,xmm5
   1c68d:	lea    r13,[rbp+rbp*1+0x0]
   1c692:	mov    rax,QWORD PTR [rax+rbp*2]
   1c696:	movss  xmm0,DWORD PTR [rax+0x8]
   1c69b:	comiss xmm0,xmm5
   1c69e:	jbe    1c700 <P7Logoddsify.part.0+0x690>
   1c6a0:	mov    eax,DWORD PTR [rsp+0x18]
   1c6a4:	pxor   xmm7,xmm7
   1c6a8:	movss  DWORD PTR [rsp+0x1c],xmm3
   1c6ae:	cvtss2sd xmm0,xmm0
   1c6b2:	cvtss2sd xmm7,xmm3
   1c6b6:	movss  DWORD PTR [rsp+0x10],xmm2
   1c6bc:	test   eax,eax
   1c6be:	movsd  QWORD PTR [rsp+0x8],xmm7
   1c6c4:	je     1c930 <P7Logoddsify.part.0+0x8c0>
   1c6ca:	call   35e0 <log@plt>
   1c6cf:	addsd  xmm0,QWORD PTR [rsp+0x8]
   1c6d5:	pxor   xmm1,xmm1
   1c6d9:	movss  xmm2,DWORD PTR [rsp+0x10]
   1c6df:	movss  xmm3,DWORD PTR [rsp+0x1c]
   1c6e5:	cvtss2sd xmm1,xmm2
   1c6e9:	comisd xmm1,xmm0
   1c6ed:	jbe    1c9c1 <P7Logoddsify.part.0+0x951>
   1c6f3:	mov    rax,QWORD PTR [rbx+0x90]
   1c6fa:	mov    rax,QWORD PTR [rax+r13*1]
   1c6fe:	xchg   ax,ax
   1c700:	movss  xmm0,DWORD PTR [rax+0x18]
   1c705:	pxor   xmm5,xmm5
   1c709:	movss  DWORD PTR [rsp+0x8],xmm3
   1c70f:	movss  xmm3,DWORD PTR [rip+0x231a1]        # 3f8b8 <xpam120+0xb58>
   1c717:	comiss xmm0,xmm5
   1c71a:	jbe    1c743 <P7Logoddsify.part.0+0x6d3>
   1c71c:	movss  DWORD PTR [rsp+0x10],xmm2
   1c722:	cvtss2sd xmm0,xmm0
   1c726:	call   35e0 <log@plt>
   1c72b:	movss  xmm3,DWORD PTR [rsp+0x8]
   1c731:	movss  xmm2,DWORD PTR [rsp+0x10]
   1c737:	cvtss2sd xmm3,xmm3
   1c73b:	addsd  xmm3,xmm0
   1c73f:	cvtsd2ss xmm3,xmm3
   1c743:	comiss xmm2,DWORD PTR [rip+0x2316e]        # 3f8b8 <xpam120+0xb58>
   1c74a:	jbe    1c820 <P7Logoddsify.part.0+0x7b0>
   1c750:	pxor   xmm0,xmm0
   1c754:	movsd  xmm4,QWORD PTR [rip+0x2258c]        # 3ece8 <_IO_stdin_used+0x1ce8>
   1c75c:	cvtss2sd xmm0,xmm2
   1c760:	mulsd  xmm0,QWORD PTR [rip+0x225a0]        # 3ed08 <_IO_stdin_used+0x1d08>
   1c768:	movsd  xmm2,QWORD PTR [rip+0x225c0]        # 3ed30 <_IO_stdin_used+0x1d30>
   1c770:	addsd  xmm0,QWORD PTR [rip+0x21668]        # 3dde0 <_IO_stdin_used+0xde0>
   1c778:	movapd xmm1,xmm0
   1c77c:	andpd  xmm1,xmm2
   1c780:	ucomisd xmm4,xmm1
   1c784:	jbe    1c7b9 <P7Logoddsify.part.0+0x749>
   1c786:	cvttsd2si rax,xmm0
   1c78b:	pxor   xmm1,xmm1
   1c78f:	movsd  xmm5,QWORD PTR [rip+0x21659]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1c797:	andnpd xmm2,xmm0
   1c79b:	cvtsi2sd xmm1,rax
   1c7a0:	movapd xmm4,xmm1
   1c7a4:	cmpnlesd xmm4,xmm0
   1c7a9:	movapd xmm0,xmm2
   1c7ad:	andpd  xmm4,xmm5
   1c7b1:	subsd  xmm1,xmm4
   1c7b5:	orpd   xmm0,xmm1
   1c7b9:	cvttsd2si eax,xmm0
   1c7bd:	mov    rdx,QWORD PTR [rbx+0x178]
   1c7c4:	mov    DWORD PTR [rdx+rbp*1],eax
   1c7c7:	sub    rbp,0x4
   1c7cb:	cmp    r12,rbp
   1c7ce:	je     1c838 <P7Logoddsify.part.0+0x7c8>
   1c7d0:	mov    rax,QWORD PTR [rbx+0xd8]
   1c7d7:	pxor   xmm7,xmm7
   1c7db:	movss  xmm0,DWORD PTR [rax+rbp*1]
   1c7e0:	comiss xmm0,xmm7
   1c7e3:	jbe    1c668 <P7Logoddsify.part.0+0x5f8>
   1c7e9:	movss  DWORD PTR [rsp+0x8],xmm3
   1c7ef:	cvtss2sd xmm0,xmm0
   1c7f3:	call   35e0 <log@plt>
   1c7f8:	movss  xmm3,DWORD PTR [rsp+0x8]
   1c7fe:	pxor   xmm2,xmm2
   1c802:	comiss xmm3,DWORD PTR [rip+0x230af]        # 3f8b8 <xpam120+0xb58>
   1c809:	cvtsd2ss xmm2,xmm0
   1c80d:	ja     1c682 <P7Logoddsify.part.0+0x612>
   1c813:	comiss xmm2,DWORD PTR [rip+0x2309e]        # 3f8b8 <xpam120+0xb58>
   1c81a:	ja     1c750 <P7Logoddsify.part.0+0x6e0>
   1c820:	mov    rdx,QWORD PTR [rbx+0x178]
   1c827:	mov    eax,0xc521974f
   1c82c:	mov    DWORD PTR [rdx+rbp*1],eax
   1c82f:	sub    rbp,0x4
   1c833:	cmp    r12,rbp
   1c836:	jne    1c7d0 <P7Logoddsify.part.0+0x760>
   1c838:	movss  xmm0,DWORD PTR [rbx+0xb0]
   1c840:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c848:	call   17710 <Prob2Score>
   1c84d:	movss  xmm0,DWORD PTR [rbx+0xac]
   1c855:	movss  xmm1,DWORD PTR [rip+0x20b3f]        # 3d39c <_IO_stdin_used+0x39c>
   1c85d:	mov    DWORD PTR [rbx+0x154],eax
   1c863:	call   17710 <Prob2Score>
   1c868:	movss  xmm0,DWORD PTR [rbx+0xb8]
   1c870:	movss  xmm1,DWORD PTR [rip+0x20b24]        # 3d39c <_IO_stdin_used+0x39c>
   1c878:	mov    DWORD PTR [rbx+0x150],eax
   1c87e:	call   17710 <Prob2Score>
   1c883:	movss  xmm0,DWORD PTR [rbx+0xb4]
   1c88b:	movss  xmm1,DWORD PTR [rip+0x20b09]        # 3d39c <_IO_stdin_used+0x39c>
   1c893:	mov    DWORD PTR [rbx+0x15c],eax
   1c899:	call   17710 <Prob2Score>
   1c89e:	movss  xmm0,DWORD PTR [rbx+0xc0]
   1c8a6:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c8ae:	mov    DWORD PTR [rbx+0x158],eax
   1c8b4:	call   17710 <Prob2Score>
   1c8b9:	movss  xmm1,DWORD PTR [rip+0x20adb]        # 3d39c <_IO_stdin_used+0x39c>
   1c8c1:	subss  xmm1,DWORD PTR [rbx+0x130]
   1c8c9:	mov    DWORD PTR [rbx+0x164],eax
   1c8cf:	movss  xmm0,DWORD PTR [rbx+0xbc]
   1c8d7:	call   17710 <Prob2Score>
   1c8dc:	movss  xmm0,DWORD PTR [rbx+0xc8]
   1c8e4:	movss  xmm1,DWORD PTR [rbx+0x130]
   1c8ec:	mov    DWORD PTR [rbx+0x160],eax
   1c8f2:	call   17710 <Prob2Score>
   1c8f7:	movss  xmm0,DWORD PTR [rbx+0xc4]
   1c8ff:	movss  xmm1,DWORD PTR [rip+0x20a95]        # 3d39c <_IO_stdin_used+0x39c>
   1c907:	mov    DWORD PTR [rbx+0x16c],eax
   1c90d:	call   17710 <Prob2Score>
   1c912:	or     DWORD PTR [rbx+0x1c8],0x1
   1c919:	mov    DWORD PTR [rbx+0x168],eax
   1c91f:	add    rsp,0x28
   1c923:	pop    rbx
   1c924:	pop    rbp
   1c925:	pop    r12
   1c927:	pop    r13
   1c929:	pop    r14
   1c92b:	pop    r15
   1c92d:	ret    
   1c92e:	xchg   ax,ax
   1c930:	call   35e0 <log@plt>
   1c935:	addsd  xmm0,QWORD PTR [rsp+0x8]
   1c93b:	movss  xmm2,DWORD PTR [rsp+0x10]
   1c941:	pxor   xmm1,xmm1
   1c945:	cvtsd2ss xmm1,xmm0
   1c949:	movaps xmm0,xmm2
   1c94c:	call   17910 <LogSum>
   1c951:	mov    rax,QWORD PTR [rbx+0x90]
   1c958:	movss  xmm3,DWORD PTR [rsp+0x1c]
   1c95e:	movaps xmm2,xmm0
   1c961:	mov    rax,QWORD PTR [rax+r13*1]
   1c965:	jmp    1c700 <P7Logoddsify.part.0+0x690>
   1c96a:	nop    WORD PTR [rax+rax*1+0x0]
   1c970:	call   35e0 <log@plt>
   1c975:	addsd  xmm0,QWORD PTR [rsp+0x10]
   1c97b:	movss  xmm2,DWORD PTR [rsp+0x1c]
   1c981:	pxor   xmm1,xmm1
   1c985:	cvtsd2ss xmm1,xmm0
   1c989:	movaps xmm0,xmm2
   1c98c:	call   17910 <LogSum>
   1c991:	mov    rax,QWORD PTR [rbx+0x90]
   1c998:	movaps xmm2,xmm0
   1c99b:	mov    rax,QWORD PTR [rax+r13*1-0x8]
   1c9a0:	jmp    1c490 <P7Logoddsify.part.0+0x420>
   1c9a5:	cvtss2sd xmm0,xmm0
   1c9a9:	call   35e0 <log@plt>
   1c9ae:	pxor   xmm7,xmm7
   1c9b2:	cvtsd2ss xmm7,xmm0
   1c9b6:	movss  DWORD PTR [rsp+0x8],xmm7
   1c9bc:	jmp    1c3ca <P7Logoddsify.part.0+0x35a>
   1c9c1:	mov    rax,QWORD PTR [rbx+0x90]
   1c9c8:	pxor   xmm0,xmm0
   1c9cc:	movss  DWORD PTR [rsp+0x10],xmm3
   1c9d2:	mov    rax,QWORD PTR [rax+r13*1]
   1c9d6:	cvtss2sd xmm0,DWORD PTR [rax+0x8]
   1c9db:	call   35e0 <log@plt>
   1c9e0:	addsd  xmm0,QWORD PTR [rsp+0x8]
   1c9e6:	mov    rax,QWORD PTR [rbx+0x90]
   1c9ed:	pxor   xmm2,xmm2
   1c9f1:	movss  xmm3,DWORD PTR [rsp+0x10]
   1c9f7:	mov    rax,QWORD PTR [rax+r13*1]
   1c9fb:	cvtsd2ss xmm2,xmm0
   1c9ff:	jmp    1c700 <P7Logoddsify.part.0+0x690>
   1ca04:	pxor   xmm0,xmm0
   1ca08:	cvtss2sd xmm0,DWORD PTR [rax+0x14]
   1ca0d:	call   35e0 <log@plt>
   1ca12:	movsd  xmm2,QWORD PTR [rsp+0x10]
   1ca18:	mov    rax,QWORD PTR [rbx+0x90]
   1ca1f:	addsd  xmm2,xmm0
   1ca23:	mov    rax,QWORD PTR [rax+r13*1-0x8]
   1ca28:	cvtsd2ss xmm2,xmm2
   1ca2c:	jmp    1c490 <P7Logoddsify.part.0+0x420>
   1ca31:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1ca3c:	nop    DWORD PTR [rax+0x0]

000000000001ca40 <P7Logoddsify>:
   1ca40:	endbr64 
   1ca44:	test   BYTE PTR [rdi+0x1c8],0x1
   1ca4b:	jne    1ca58 <P7Logoddsify+0x18>
   1ca4d:	jmp    1c070 <P7Logoddsify.part.0>
   1ca52:	nop    WORD PTR [rax+rax*1+0x0]
   1ca58:	ret    
   1ca59:	nop    DWORD PTR [rax+0x0]

000000000001ca60 <PrintPlan7Stats>:
   1ca60:	endbr64 
   1ca64:	push   r15
   1ca66:	mov    r15,rdi
   1ca69:	push   r14
   1ca6b:	push   r13
   1ca6d:	push   r12
   1ca6f:	mov    r12,r8
   1ca72:	push   rbp
   1ca73:	mov    rbp,rdx
   1ca76:	push   rbx
   1ca77:	mov    rbx,rsi
   1ca7a:	sub    rsp,0x28
   1ca7e:	mov    DWORD PTR [rsp+0x1c],ecx
   1ca82:	test   BYTE PTR [rsi+0x1c8],0x1
   1ca89:	jne    1ca98 <PrintPlan7Stats+0x38>
   1ca8b:	mov    esi,0x1
   1ca90:	mov    rdi,rbx
   1ca93:	call   1c070 <P7Logoddsify.part.0>
   1ca98:	mov    rdx,QWORD PTR [r12]
   1ca9c:	mov    rsi,QWORD PTR [rbp+0x0]
   1caa0:	mov    rdi,rbx
   1caa3:	call   21fe0 <P7TraceScore>
   1caa8:	cmp    DWORD PTR [rsp+0x1c],0x1
   1caad:	movaps xmm2,xmm0
   1cab0:	movaps xmm1,xmm0
   1cab3:	mulss  xmm2,xmm0
   1cab7:	jle    1cc60 <PrintPlan7Stats+0x200>
   1cabd:	mov    eax,DWORD PTR [rsp+0x1c]
   1cac1:	movss  DWORD PTR [rsp+0xc],xmm0
   1cac7:	mov    r14d,0x1
   1cacd:	movss  DWORD PTR [rsp+0x8],xmm0
   1cad3:	lea    r13d,[rax-0x2]
   1cad7:	add    r13,0x2
   1cadb:	nop    DWORD PTR [rax+rax*1+0x0]
   1cae0:	mov    rdx,QWORD PTR [r12+r14*8]
   1cae4:	mov    rsi,QWORD PTR [rbp+r14*8+0x0]
   1cae9:	mov    rdi,rbx
   1caec:	movss  DWORD PTR [rsp+0x10],xmm2
   1caf2:	movss  DWORD PTR [rsp+0x18],xmm1
   1caf8:	add    r14,0x1
   1cafc:	call   21fe0 <P7TraceScore>
   1cb01:	movss  xmm1,DWORD PTR [rsp+0x18]
   1cb07:	movss  xmm2,DWORD PTR [rsp+0x10]
   1cb0d:	movaps xmm3,xmm0
   1cb10:	movaps xmm5,xmm0
   1cb13:	maxss  xmm5,DWORD PTR [rsp+0x8]
   1cb19:	mulss  xmm3,xmm0
   1cb1d:	addss  xmm1,xmm0
   1cb21:	minss  xmm0,DWORD PTR [rsp+0xc]
   1cb27:	movss  DWORD PTR [rsp+0x8],xmm5
   1cb2d:	movss  DWORD PTR [rsp+0xc],xmm0
   1cb33:	addss  xmm2,xmm3
   1cb37:	cmp    r14,r13
   1cb3a:	jne    1cae0 <PrintPlan7Stats+0x80>
   1cb3c:	movaps xmm0,xmm1
   1cb3f:	pxor   xmm3,xmm3
   1cb43:	pxor   xmm4,xmm4
   1cb47:	mulss  xmm0,xmm1
   1cb4b:	cvtsi2ss xmm3,DWORD PTR [rsp+0x1c]
   1cb51:	divss  xmm0,xmm3
   1cb55:	subss  xmm2,xmm0
   1cb59:	pxor   xmm0,xmm0
   1cb5d:	cvtss2sd xmm0,xmm2
   1cb61:	pxor   xmm2,xmm2
   1cb65:	cvtss2sd xmm2,xmm3
   1cb69:	subsd  xmm2,QWORD PTR [rip+0x2127f]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1cb71:	divsd  xmm0,xmm2
   1cb75:	cvtsd2ss xmm0,xmm0
   1cb79:	comiss xmm0,xmm4
   1cb7c:	ja     1cc30 <PrintPlan7Stats+0x1d0>
   1cb82:	mov    DWORD PTR [rsp+0x18],0x0
   1cb8a:	divss  xmm1,xmm3
   1cb8e:	mov    rdi,r15
   1cb91:	pxor   xmm0,xmm0
   1cb95:	mov    esi,0x1
   1cb9a:	lea    rdx,[rip+0x22d23]        # 3f8c4 <xpam120+0xb64>
   1cba1:	mov    eax,0x1
   1cba6:	cvtss2sd xmm0,xmm1
   1cbaa:	call   37c0 <__fprintf_chk@plt>
   1cbaf:	mov    rdi,r15
   1cbb2:	lea    rdx,[rip+0x22d28]        # 3f8e1 <xpam120+0xb81>
   1cbb9:	mov    esi,0x1
   1cbbe:	pxor   xmm0,xmm0
   1cbc2:	mov    eax,0x1
   1cbc7:	cvtss2sd xmm0,DWORD PTR [rsp+0xc]
   1cbcd:	call   37c0 <__fprintf_chk@plt>
   1cbd2:	mov    rdi,r15
   1cbd5:	lea    rdx,[rip+0x22d22]        # 3f8fe <xpam120+0xb9e>
   1cbdc:	mov    esi,0x1
   1cbe1:	pxor   xmm0,xmm0
   1cbe5:	mov    eax,0x1
   1cbea:	cvtss2sd xmm0,DWORD PTR [rsp+0x8]
   1cbf0:	call   37c0 <__fprintf_chk@plt>
   1cbf5:	pxor   xmm0,xmm0
   1cbf9:	mov    rdi,r15
   1cbfc:	cvtss2sd xmm0,DWORD PTR [rsp+0x18]
   1cc02:	add    rsp,0x28
   1cc06:	mov    esi,0x1
   1cc0b:	lea    rdx,[rip+0x22d09]        # 3f91b <xpam120+0xbbb>
   1cc12:	pop    rbx
   1cc13:	mov    eax,0x1
   1cc18:	pop    rbp
   1cc19:	pop    r12
   1cc1b:	pop    r13
   1cc1d:	pop    r14
   1cc1f:	pop    r15
   1cc21:	jmp    37c0 <__fprintf_chk@plt>
   1cc26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1cc30:	pxor   xmm4,xmm4
   1cc34:	cvtss2sd xmm0,xmm0
   1cc38:	movapd xmm2,xmm0
   1cc3c:	ucomisd xmm4,xmm0
   1cc40:	sqrtsd xmm2,xmm2
   1cc44:	ja     1cc85 <PrintPlan7Stats+0x225>
   1cc46:	pxor   xmm4,xmm4
   1cc4a:	cvtsd2ss xmm4,xmm2
   1cc4e:	movss  DWORD PTR [rsp+0x18],xmm4
   1cc54:	jmp    1cb8a <PrintPlan7Stats+0x12a>
   1cc59:	nop    DWORD PTR [rax+0x0]
   1cc60:	pxor   xmm3,xmm3
   1cc64:	pxor   xmm4,xmm4
   1cc68:	movss  DWORD PTR [rsp+0xc],xmm0
   1cc6e:	cvtsi2ss xmm3,DWORD PTR [rsp+0x1c]
   1cc74:	movss  DWORD PTR [rsp+0x8],xmm0
   1cc7a:	movss  DWORD PTR [rsp+0x18],xmm4
   1cc80:	jmp    1cb8a <PrintPlan7Stats+0x12a>
   1cc85:	movss  DWORD PTR [rsp+0x1c],xmm1
   1cc8b:	movsd  QWORD PTR [rsp+0x10],xmm2
   1cc91:	movss  DWORD PTR [rsp+0x18],xmm3
   1cc97:	call   37e0 <sqrt@plt>
   1cc9c:	movss  xmm1,DWORD PTR [rsp+0x1c]
   1cca2:	movsd  xmm2,QWORD PTR [rsp+0x10]
   1cca8:	movss  xmm3,DWORD PTR [rsp+0x18]
   1ccae:	jmp    1cc46 <PrintPlan7Stats+0x1e6>

000000000001ccb0 <Plan9toPlan7>:
   1ccb0:	endbr64 
   1ccb4:	push   r13
   1ccb6:	push   r12
   1ccb8:	mov    r12,rdi
   1ccbb:	push   rbp
   1ccbc:	push   rbx
   1ccbd:	mov    rbx,rsi
   1ccc0:	sub    rsp,0x8
   1ccc4:	mov    r13d,DWORD PTR [rdi]
   1ccc7:	call   1a920 <AllocPlan7Shell>
   1cccc:	mov    rdi,rax
   1cccf:	mov    esi,r13d
   1ccd2:	mov    rbp,rax
   1ccd5:	call   1aab0 <AllocPlan7Body>
   1ccda:	mov    r11d,DWORD PTR [r12]
   1ccde:	mov    r8,QWORD PTR [r12+0x10]
   1cce3:	cmp    r11d,0x1
   1cce7:	jle    1cf29 <Plan9toPlan7+0x279>
   1cced:	mov    rax,QWORD PTR [rbp+0x90]
   1ccf4:	lea    edx,[r11-0x2]
   1ccf8:	mov    rdi,QWORD PTR [r12+0x18]
   1ccfd:	mov    rsi,QWORD PTR [r12+0x8]
   1cd02:	lea    rcx,[rax+0x8]
   1cd06:	lea    r9,[rax+rdx*8+0x10]
   1cd0b:	mov    eax,0x5c
   1cd10:	movss  xmm0,DWORD PTR [r8+rax*1]
   1cd16:	mov    rdx,QWORD PTR [rcx]
   1cd19:	add    rcx,0x8
   1cd1d:	movss  DWORD PTR [rdx],xmm0
   1cd21:	movss  xmm0,DWORD PTR [r8+rax*1+0x8]
   1cd28:	movss  DWORD PTR [rdx+0x8],xmm0
   1cd2d:	movss  xmm0,DWORD PTR [r8+rax*1+0x4]
   1cd34:	movss  DWORD PTR [rdx+0x4],xmm0
   1cd39:	movss  xmm0,DWORD PTR [rdi+rax*1]
   1cd3e:	movss  DWORD PTR [rdx+0x14],xmm0
   1cd43:	movss  xmm0,DWORD PTR [rdi+rax*1+0x8]
   1cd49:	movss  DWORD PTR [rdx+0x18],xmm0
   1cd4e:	movss  xmm0,DWORD PTR [rsi+rax*1]
   1cd53:	movss  DWORD PTR [rdx+0xc],xmm0
   1cd58:	movss  xmm0,DWORD PTR [rsi+rax*1+0x4]
   1cd5e:	add    rax,0x5c
   1cd62:	movss  DWORD PTR [rdx+0x10],xmm0
   1cd67:	cmp    r9,rcx
   1cd6a:	jne    1cd10 <Plan9toPlan7+0x60>
   1cd6c:	lea    rcx,[r8+0x5c]
   1cd70:	mov    r9d,DWORD PTR [rip+0x45589]        # 62300 <Alphabet_size>
   1cd77:	mov    r13d,0x8
   1cd7d:	mov    r10d,0x1
   1cd83:	lea    edi,[r9-0x1]
   1cd87:	nop    WORD PTR [rax+rax*1+0x0]
   1cd90:	test   r9d,r9d
   1cd93:	jle    1cdbf <Plan9toPlan7+0x10f>
   1cd95:	mov    rax,QWORD PTR [rbp+0x98]
   1cd9c:	mov    rsi,QWORD PTR [rax+r13*1]
   1cda0:	xor    eax,eax
   1cda2:	nop    WORD PTR [rax+rax*1+0x0]
   1cda8:	movss  xmm0,DWORD PTR [rcx+rax*4+0xc]
   1cdae:	mov    rdx,rax
   1cdb1:	movss  DWORD PTR [rsi+rax*4],xmm0
   1cdb6:	add    rax,0x1
   1cdba:	cmp    rdi,rdx
   1cdbd:	jne    1cda8 <Plan9toPlan7+0xf8>
   1cdbf:	add    r10d,0x1
   1cdc3:	add    rcx,0x5c
   1cdc7:	add    r13,0x8
   1cdcb:	cmp    r10d,r11d
   1cdce:	jle    1cd90 <Plan9toPlan7+0xe0>
   1cdd0:	cmp    r11d,0x1
   1cdd4:	jle    1ce3c <Plan9toPlan7+0x18c>
   1cdd6:	lea    eax,[r11-0x2]
   1cdda:	mov    r10d,0x8
   1cde0:	mov    r11d,0x5c
   1cde6:	lea    r13,[rax*8+0x10]
   1cdee:	lea    edi,[r9-0x1]
   1cdf2:	nop    WORD PTR [rax+rax*1+0x0]
   1cdf8:	test   r9d,r9d
   1cdfb:	jle    1ce2f <Plan9toPlan7+0x17f>
   1cdfd:	mov    rax,QWORD PTR [rbp+0xa0]
   1ce04:	mov    rsi,QWORD PTR [r12+0x8]
   1ce09:	mov    rcx,QWORD PTR [rax+r10*1]
   1ce0d:	add    rsi,r11
   1ce10:	xor    eax,eax
   1ce12:	nop    WORD PTR [rax+rax*1+0x0]
   1ce18:	movss  xmm0,DWORD PTR [rsi+rax*4+0xc]
   1ce1e:	mov    rdx,rax
   1ce21:	movss  DWORD PTR [rcx+rax*4],xmm0
   1ce26:	add    rax,0x1
   1ce2a:	cmp    rdi,rdx
   1ce2d:	jne    1ce18 <Plan9toPlan7+0x168>
   1ce2f:	add    r10,0x8
   1ce33:	add    r11,0x5c
   1ce37:	cmp    r13,r10
   1ce3a:	jne    1cdf8 <Plan9toPlan7+0x148>
   1ce3c:	movss  xmm0,DWORD PTR [r8+0x8]
   1ce42:	movss  xmm1,DWORD PTR [r8]
   1ce47:	lea    rsi,[rbp+0x130]
   1ce4e:	lea    rdi,[rbp+0xe0]
   1ce55:	addss  xmm1,xmm0
   1ce59:	divss  xmm0,xmm1
   1ce5d:	movss  DWORD PTR [rbp+0xa8],xmm0
   1ce65:	call   1f4b0 <P7DefaultNullModel>
   1ce6a:	mov    edx,DWORD PTR [rip+0x45490]        # 62300 <Alphabet_size>
   1ce70:	xor    eax,eax
   1ce72:	lea    ecx,[rdx-0x1]
   1ce75:	test   edx,edx
   1ce77:	jle    1ce9c <Plan9toPlan7+0x1ec>
   1ce79:	nop    DWORD PTR [rax+0x0]
   1ce80:	movss  xmm0,DWORD PTR [r12+rax*4+0x20]
   1ce87:	mov    rdx,rax
   1ce8a:	movss  DWORD PTR [rbp+rax*4+0xe0],xmm0
   1ce93:	add    rax,0x1
   1ce97:	cmp    rcx,rdx
   1ce9a:	jne    1ce80 <Plan9toPlan7+0x1d0>
   1ce9c:	mov    rsi,QWORD PTR [r12+0x70]
   1cea1:	test   rsi,rsi
   1cea4:	je     1ceae <Plan9toPlan7+0x1fe>
   1cea6:	mov    rdi,rbp
   1cea9:	call   1b1f0 <Plan7SetName>
   1ceae:	mov    eax,DWORD PTR [r12+0x90]
   1ceb6:	test   al,0x1
   1ceb8:	jne    1ceee <Plan9toPlan7+0x23e>
   1ceba:	test   al,0x2
   1cebc:	jne    1cf0f <Plan9toPlan7+0x25f>
   1cebe:	mov    rdi,rbp
   1cec1:	call   1b900 <Plan7LSConfig>
   1cec6:	mov    rdi,rbp
   1cec9:	call   1b490 <Plan7Renormalize>
   1cece:	mov    eax,DWORD PTR [rbp+0x1c8]
   1ced4:	and    eax,0xfffffffe
   1ced7:	or     eax,0x20
   1ceda:	mov    DWORD PTR [rbp+0x1c8],eax
   1cee0:	mov    QWORD PTR [rbx],rbp
   1cee3:	add    rsp,0x8
   1cee7:	pop    rbx
   1cee8:	pop    rbp
   1cee9:	pop    r12
   1ceeb:	pop    r13
   1ceed:	ret    
   1ceee:	mov    rsi,QWORD PTR [r12+0x78]
   1cef3:	mov    rdi,QWORD PTR [rbp+0x18]
   1cef7:	call   34e0 <strcpy@plt>
   1cefc:	mov    eax,DWORD PTR [r12+0x90]
   1cf04:	or     DWORD PTR [rbp+0x1c8],0x4
   1cf0b:	test   al,0x2
   1cf0d:	je     1cebe <Plan9toPlan7+0x20e>
   1cf0f:	mov    rsi,QWORD PTR [r12+0x80]
   1cf17:	mov    rdi,QWORD PTR [rbp+0x20]
   1cf1b:	call   34e0 <strcpy@plt>
   1cf20:	or     DWORD PTR [rbp+0x1c8],0x8
   1cf27:	jmp    1cebe <Plan9toPlan7+0x20e>
   1cf29:	jne    1ce3c <Plan9toPlan7+0x18c>
   1cf2f:	jmp    1cd6c <Plan9toPlan7+0xbc>
   1cf34:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1cf3e:	xchg   ax,ax

000000000001cf40 <P9FreeHMM>:
   1cf40:	endbr64 
   1cf44:	test   rdi,rdi
   1cf47:	je     1cfb0 <P9FreeHMM+0x70>
   1cf49:	push   rbp
   1cf4a:	mov    rbp,rdi
   1cf4d:	mov    rdi,QWORD PTR [rdi+0x78]
   1cf51:	call   3460 <free@plt>
   1cf56:	mov    rdi,QWORD PTR [rbp+0x80]
   1cf5d:	call   3460 <free@plt>
   1cf62:	mov    rdi,QWORD PTR [rbp+0x88]
   1cf69:	call   3460 <free@plt>
   1cf6e:	mov    rdi,QWORD PTR [rbp+0x70]
   1cf72:	call   3460 <free@plt>
   1cf77:	mov    rdi,QWORD PTR [rbp+0x10]
   1cf7b:	test   rdi,rdi
   1cf7e:	je     1cf85 <P9FreeHMM+0x45>
   1cf80:	call   3460 <free@plt>
   1cf85:	mov    rdi,QWORD PTR [rbp+0x8]
   1cf89:	test   rdi,rdi
   1cf8c:	je     1cf93 <P9FreeHMM+0x53>
   1cf8e:	call   3460 <free@plt>
   1cf93:	mov    rdi,QWORD PTR [rbp+0x18]
   1cf97:	test   rdi,rdi
   1cf9a:	je     1cfa1 <P9FreeHMM+0x61>
   1cf9c:	call   3460 <free@plt>
   1cfa1:	mov    rdi,rbp
   1cfa4:	call   3460 <free@plt>
   1cfa9:	mov    eax,0x1
   1cfae:	pop    rbp
   1cfaf:	ret    
   1cfb0:	xor    eax,eax
   1cfb2:	ret    
   1cfb3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1cfbe:	xchg   ax,ax

000000000001cfc0 <P9ZeroHMM>:
   1cfc0:	endbr64 
   1cfc4:	mov    eax,DWORD PTR [rdi]
   1cfc6:	cmp    eax,0xffffffff
   1cfc9:	jl     1d080 <P9ZeroHMM+0xc0>
   1cfcf:	lea    r10d,[rax+0x1]
   1cfd3:	mov    r8,QWORD PTR [rdi+0x10]
   1cfd7:	mov    r11d,DWORD PTR [rip+0x45322]        # 62300 <Alphabet_size>
   1cfde:	imul   r10,r10,0x5c
   1cfe2:	mov    rsi,QWORD PTR [rdi+0x8]
   1cfe6:	mov    rcx,QWORD PTR [rdi+0x18]
   1cfea:	lea    r9,[r8+0x5c]
   1cfee:	lea    edi,[r11-0x1]
   1cff2:	add    r10,r9
   1cff5:	nop    DWORD PTR [rax]
   1cff8:	mov    DWORD PTR [r8],0x0
   1cfff:	mov    DWORD PTR [rsi],0x0
   1d005:	mov    DWORD PTR [rcx],0x0
   1d00b:	mov    DWORD PTR [r8+0x4],0x0
   1d013:	mov    DWORD PTR [rsi+0x4],0x0
   1d01a:	mov    DWORD PTR [rcx+0x4],0x0
   1d021:	mov    DWORD PTR [r8+0x8],0x0
   1d029:	mov    DWORD PTR [rsi+0x8],0x0
   1d030:	mov    DWORD PTR [rcx+0x8],0x0
   1d037:	test   r11d,r11d
   1d03a:	jle    1d065 <P9ZeroHMM+0xa5>
   1d03c:	xor    eax,eax
   1d03e:	xchg   ax,ax
   1d040:	mov    DWORD PTR [r8+rax*4+0xc],0x0
   1d049:	mov    rdx,rax
   1d04c:	mov    DWORD PTR [rsi+rax*4+0xc],0x0
   1d054:	mov    DWORD PTR [rcx+rax*4+0xc],0x0
   1d05c:	add    rax,0x1
   1d060:	cmp    rdi,rdx
   1d063:	jne    1d040 <P9ZeroHMM+0x80>
   1d065:	mov    r8,r9
   1d068:	add    rsi,0x5c
   1d06c:	add    rcx,0x5c
   1d070:	cmp    r9,r10
   1d073:	je     1d080 <P9ZeroHMM+0xc0>
   1d075:	add    r9,0x5c
   1d079:	jmp    1cff8 <P9ZeroHMM+0x38>
   1d07e:	xchg   ax,ax
   1d080:	ret    
   1d081:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1d08c:	nop    DWORD PTR [rax+0x0]

000000000001d090 <P9AllocHMM>:
   1d090:	endbr64 
   1d094:	push   r13
   1d096:	mov    edx,0x98
   1d09b:	mov    esi,0x23
   1d0a0:	push   r12
   1d0a2:	push   rbp
   1d0a3:	mov    ebp,edi
   1d0a5:	lea    rdi,[rip+0x22894]        # 3f940 <xpam120+0xbe0>
   1d0ac:	push   rbx
   1d0ad:	lea    ebx,[rbp+0x2]
   1d0b0:	movsxd rbx,ebx
   1d0b3:	imul   r13,rbx,0x5c
   1d0b7:	sub    rsp,0x8
   1d0bb:	call   36810 <sre_malloc>
   1d0c0:	mov    esi,0x24
   1d0c5:	lea    rdi,[rip+0x22874]        # 3f940 <xpam120+0xbe0>
   1d0cc:	mov    rdx,r13
   1d0cf:	mov    r12,rax
   1d0d2:	call   36810 <sre_malloc>
   1d0d7:	mov    rdx,r13
   1d0da:	mov    esi,0x25
   1d0df:	lea    rdi,[rip+0x2285a]        # 3f940 <xpam120+0xbe0>
   1d0e6:	mov    QWORD PTR [r12+0x8],rax
   1d0eb:	call   36810 <sre_malloc>
   1d0f0:	mov    rdx,r13
   1d0f3:	mov    esi,0x26
   1d0f8:	lea    rdi,[rip+0x22841]        # 3f940 <xpam120+0xbe0>
   1d0ff:	mov    QWORD PTR [r12+0x18],rax
   1d104:	call   36810 <sre_malloc>
   1d109:	mov    rdx,rbx
   1d10c:	mov    esi,0x27
   1d111:	lea    rdi,[rip+0x22828]        # 3f940 <xpam120+0xbe0>
   1d118:	mov    QWORD PTR [r12+0x10],rax
   1d11d:	call   36810 <sre_malloc>
   1d122:	mov    rdx,rbx
   1d125:	shl    rbx,0x4
   1d129:	mov    esi,0x28
   1d12e:	mov    QWORD PTR [r12+0x78],rax
   1d133:	lea    rdi,[rip+0x22806]        # 3f940 <xpam120+0xbe0>
   1d13a:	call   36810 <sre_malloc>
   1d13f:	mov    rdx,rbx
   1d142:	mov    esi,0x29
   1d147:	lea    rdi,[rip+0x227f2]        # 3f940 <xpam120+0xbe0>
   1d14e:	mov    QWORD PTR [r12+0x80],rax
   1d156:	call   36810 <sre_malloc>
   1d15b:	mov    DWORD PTR [r12],ebp
   1d15f:	lea    rdi,[rip+0x227e2]        # 3f948 <xpam120+0xbe8>
   1d166:	mov    QWORD PTR [r12+0x88],rax
   1d16e:	call   36670 <Strdup>
   1d173:	mov    rdi,r12
   1d176:	mov    DWORD PTR [r12+0x90],0x0
   1d182:	mov    QWORD PTR [r12+0x70],rax
   1d187:	call   1cfc0 <P9ZeroHMM>
   1d18c:	add    rsp,0x8
   1d190:	mov    rax,r12
   1d193:	pop    rbx
   1d194:	pop    rbp
   1d195:	pop    r12
   1d197:	pop    r13
   1d199:	ret    
   1d19a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001d1a0 <P9Renormalize>:
   1d1a0:	endbr64 
   1d1a4:	mov    eax,DWORD PTR [rdi]
   1d1a6:	test   eax,eax
   1d1a8:	js     1d240 <P9Renormalize+0xa0>
   1d1ae:	push   r12
   1d1b0:	xor    r12d,r12d
   1d1b3:	push   rbp
   1d1b4:	mov    rbp,rdi
   1d1b7:	push   rbx
   1d1b8:	jmp    1d1e0 <P9Renormalize+0x40>
   1d1ba:	nop    WORD PTR [rax+rax*1+0x0]
   1d1c0:	add    rbx,QWORD PTR [rbp+0x8]
   1d1c4:	mov    esi,DWORD PTR [rip+0x45136]        # 62300 <Alphabet_size>
   1d1ca:	add    r12,0x1
   1d1ce:	mov    rdi,rbx
   1d1d1:	add    rdi,0xc
   1d1d5:	call   3b290 <FNorm>
   1d1da:	cmp    DWORD PTR [rbp+0x0],r12d
   1d1de:	jl     1d238 <P9Renormalize+0x98>
   1d1e0:	imul   rbx,r12,0x5c
   1d1e4:	mov    rdi,QWORD PTR [rbp+0x10]
   1d1e8:	mov    esi,0x3
   1d1ed:	add    rdi,rbx
   1d1f0:	call   3b290 <FNorm>
   1d1f5:	mov    rdi,QWORD PTR [rbp+0x8]
   1d1f9:	mov    esi,0x3
   1d1fe:	add    rdi,rbx
   1d201:	call   3b290 <FNorm>
   1d206:	test   r12,r12
   1d209:	je     1d1c0 <P9Renormalize+0x20>
   1d20b:	mov    rdi,QWORD PTR [rbp+0x18]
   1d20f:	mov    esi,0x3
   1d214:	add    rdi,rbx
   1d217:	call   3b290 <FNorm>
   1d21c:	mov    rdi,QWORD PTR [rbp+0x10]
   1d220:	mov    esi,DWORD PTR [rip+0x450da]        # 62300 <Alphabet_size>
   1d226:	add    rdi,rbx
   1d229:	add    rdi,0xc
   1d22d:	call   3b290 <FNorm>
   1d232:	jmp    1d1c0 <P9Renormalize+0x20>
   1d234:	nop    DWORD PTR [rax+0x0]
   1d238:	pop    rbx
   1d239:	pop    rbp
   1d23a:	pop    r12
   1d23c:	ret    
   1d23d:	nop    DWORD PTR [rax]
   1d240:	ret    
   1d241:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1d24c:	nop    DWORD PTR [rax+0x0]

000000000001d250 <P9DefaultNullModel>:
   1d250:	endbr64 
   1d254:	mov    eax,DWORD PTR [rip+0x44e26]        # 62080 <Alphabet_type>
   1d25a:	cmp    eax,0x3
   1d25d:	je     1d2a8 <P9DefaultNullModel+0x58>
   1d25f:	cmp    eax,0x2
   1d262:	jne    1d290 <P9DefaultNullModel+0x40>
   1d264:	mov    eax,DWORD PTR [rip+0x45096]        # 62300 <Alphabet_size>
   1d26a:	test   eax,eax
   1d26c:	jle    1d2a0 <P9DefaultNullModel+0x50>
   1d26e:	sub    eax,0x1
   1d271:	movss  xmm0,DWORD PTR [rip+0x2270f]        # 3f988 <xpam120+0xc28>
   1d279:	lea    rax,[rdi+rax*4+0x4]
   1d27e:	xchg   ax,ax
   1d280:	movss  DWORD PTR [rdi],xmm0
   1d284:	add    rdi,0x4
   1d288:	cmp    rdi,rax
   1d28b:	jne    1d280 <P9DefaultNullModel+0x30>
   1d28d:	ret    
   1d28e:	xchg   ax,ax
   1d290:	lea    rdi,[rip+0x226b9]        # 3f950 <xpam120+0xbf0>
   1d297:	xor    eax,eax
   1d299:	jmp    317f0 <Die>
   1d29e:	xchg   ax,ax
   1d2a0:	ret    
   1d2a1:	nop    DWORD PTR [rax+0x0]
   1d2a8:	mov    edx,DWORD PTR [rip+0x45052]        # 62300 <Alphabet_size>
   1d2ae:	xor    eax,eax
   1d2b0:	lea    rcx,[rip+0x30789]        # 4da40 <aafq>
   1d2b7:	lea    esi,[rdx-0x1]
   1d2ba:	test   edx,edx
   1d2bc:	jle    1d2a0 <P9DefaultNullModel+0x50>
   1d2be:	xchg   ax,ax
   1d2c0:	movss  xmm0,DWORD PTR [rcx+rax*4]
   1d2c5:	mov    rdx,rax
   1d2c8:	movss  DWORD PTR [rdi+rax*4],xmm0
   1d2cd:	add    rax,0x1
   1d2d1:	cmp    rdx,rsi
   1d2d4:	jne    1d2c0 <P9DefaultNullModel+0x70>
   1d2d6:	ret    
   1d2d7:	nop    WORD PTR [rax+rax*1+0x0]

000000000001d2e0 <P7Backward>:
   1d2e0:	endbr64 
   1d2e4:	push   r15
   1d2e6:	push   r14
   1d2e8:	mov    r14,rdx
   1d2eb:	push   r13
   1d2ed:	push   r12
   1d2ef:	push   rbp
   1d2f0:	push   rbx
   1d2f1:	mov    ebx,esi
   1d2f3:	sub    rsp,0x68
   1d2f7:	mov    esi,DWORD PTR [r14+0x88]
   1d2fe:	mov    QWORD PTR [rsp],rdi
   1d302:	lea    r9,[rsp+0x50]
   1d307:	lea    r8,[rsp+0x48]
   1d30c:	mov    QWORD PTR [rsp+0x28],rcx
   1d311:	lea    edi,[rbx+0x1]
   1d314:	lea    rcx,[rsp+0x40]
   1d319:	mov    rdx,QWORD PTR fs:0x28
   1d322:	mov    QWORD PTR [rsp+0x58],rdx
   1d327:	xor    edx,edx
   1d329:	lea    rdx,[rsp+0x38]
   1d32e:	call   57a0 <AllocPlan7Matrix>
   1d333:	mov    rcx,QWORD PTR [rsp+0x38]
   1d338:	movsxd r9,ebx
   1d33b:	movabs rsi,0xc521974fc521974f
   1d345:	lea    rdx,[r9*8+0x0]
   1d34d:	mov    QWORD PTR [rsp+0x20],rax
   1d352:	mov    r8,QWORD PTR [rcx+r9*8]
   1d356:	mov    QWORD PTR [rsp+0x8],rdx
   1d35b:	mov    edx,DWORD PTR [r14+0x160]
   1d362:	mov    DWORD PTR [r8+0x8],edx
   1d366:	add    edx,DWORD PTR [r14+0x158]
   1d36d:	mov    DWORD PTR [r8+0x4],edx
   1d371:	mov    DWORD PTR [r8],0xc521974f
   1d378:	mov    QWORD PTR [r8+0xc],rsi
   1d37c:	movsxd r15,DWORD PTR [r14+0x88]
   1d383:	test   r15d,r15d
   1d386:	jle    1d416 <P7Backward+0x136>
   1d38c:	mov    rax,QWORD PTR [rsp+0x40]
   1d391:	movsxd rdi,r15d
   1d394:	sub    r15d,0x1
   1d398:	mov    r10,QWORD PTR [r14+0x178]
   1d39f:	mov    r13,QWORD PTR [r14+0x140]
   1d3a6:	mov    rsi,QWORD PTR [rax+r9*8]
   1d3aa:	mov    rax,QWORD PTR [rsp+0x50]
   1d3af:	mov    r12,QWORD PTR [rax+r9*8]
   1d3b3:	mov    rax,QWORD PTR [rsp+0x48]
   1d3b8:	mov    rbp,QWORD PTR [rax+r9*8]
   1d3bc:	mov    rax,QWORD PTR [rsp]
   1d3c0:	lea    r11,[rax+r9*1]
   1d3c4:	lea    rax,[rdi*4+0x0]
   1d3cc:	sub    rdi,r15
   1d3cf:	shl    rdi,0x2
   1d3d3:	jmp    1d3df <P7Backward+0xff>
   1d3d5:	nop    DWORD PTR [rax]
   1d3d8:	mov    edx,DWORD PTR [r8+0x4]
   1d3dc:	mov    rax,r15
   1d3df:	add    edx,DWORD PTR [r10+rax*1]
   1d3e3:	mov    DWORD PTR [rsi+rax*1],edx
   1d3e6:	movsx  r15,BYTE PTR [r11]
   1d3ea:	mov    r15,QWORD PTR [r13+r15*8+0x0]
   1d3ef:	add    edx,DWORD PTR [r15+rax*1]
   1d3f3:	lea    r15,[rax-0x4]
   1d3f7:	mov    DWORD PTR [rsi+rax*1],edx
   1d3fa:	mov    DWORD PTR [r12+rax*1],0xc521974f
   1d402:	mov    DWORD PTR [rbp+rax*1+0x0],0xc521974f
   1d40a:	cmp    rdi,rax
   1d40d:	jne    1d3d8 <P7Backward+0xf8>
   1d40f:	movsxd r15,DWORD PTR [r14+0x88]
   1d416:	mov    rax,QWORD PTR [r14+0x138]
   1d41d:	mov    rdx,QWORD PTR [rax+0x10]
   1d421:	mov    rax,QWORD PTR [rax+0x30]
   1d425:	mov    DWORD PTR [rdx+r15*4-0x4],0xc521974f
   1d42e:	movsxd rdx,DWORD PTR [r14+0x88]
   1d435:	mov    DWORD PTR [rax+rdx*4-0x4],0xc521974f
   1d43d:	mov    eax,ebx
   1d43f:	sub    eax,0x1
   1d442:	js     1d5c7 <P7Backward+0x2e7>
   1d448:	movsxd r13,eax
   1d44b:	mov    eax,eax
   1d44d:	mov    rbx,QWORD PTR [rsp+0x8]
   1d452:	add    r13,QWORD PTR [rsp]
   1d456:	sub    r9,rax
   1d459:	lea    rax,[r9*8+0x0]
   1d461:	sub    rbx,0x8
   1d465:	lea    rdx,[rax-0x10]
   1d469:	sub    rax,0x8
   1d46d:	mov    QWORD PTR [rsp+0x18],rdx
   1d472:	mov    QWORD PTR [rsp+0x10],rax
   1d477:	nop    WORD PTR [rax+rax*1+0x0]
   1d480:	mov    rdx,QWORD PTR [rcx+rbx*1+0x8]
   1d485:	mov    r12,QWORD PTR [rcx+rbx*1]
   1d489:	mov    edi,0xc521974f
   1d48e:	lea    rbp,[rbx+0x8]
   1d492:	mov    eax,DWORD PTR [r14+0x164]
   1d499:	mov    rcx,QWORD PTR [r14+0x170]
   1d4a0:	add    eax,DWORD PTR [rdx+0x8]
   1d4a3:	mov    rdx,QWORD PTR [rsp+0x40]
   1d4a8:	mov    DWORD PTR [r12],0xc521974f
   1d4b0:	mov    DWORD PTR [r12+0x8],eax
   1d4b5:	movsxd rax,DWORD PTR [r14+0x88]
   1d4bc:	mov    rdx,QWORD PTR [rdx+rbx*1+0x8]
   1d4c1:	mov    esi,DWORD PTR [rcx+rax*4-0x4]
   1d4c5:	add    esi,DWORD PTR [rdx+rax*4]
   1d4c8:	call   179b0 <ILogsum>
   1d4cd:	mov    DWORD PTR [r12],eax
   1d4d1:	mov    eax,DWORD PTR [r14+0x88]
   1d4d8:	lea    edx,[rax-0x1]
   1d4db:	test   edx,edx
   1d4dd:	jle    1d538 <P7Backward+0x258>
   1d4df:	movsxd rcx,eax
   1d4e2:	sub    eax,0x2
   1d4e5:	movsxd rdx,edx
   1d4e8:	sub    rcx,rax
   1d4eb:	lea    r15,[rdx*4+0x0]
   1d4f3:	lea    rax,[rcx*4-0x8]
   1d4fb:	mov    QWORD PTR [rsp],rax
   1d4ff:	nop
   1d500:	mov    rax,QWORD PTR [rsp+0x38]
   1d505:	mov    rsi,QWORD PTR [r14+0x170]
   1d50c:	mov    r12,QWORD PTR [rax+rbx*1]
   1d510:	mov    rax,QWORD PTR [rsp+0x40]
   1d515:	mov    esi,DWORD PTR [rsi+r15*1]
   1d519:	mov    rax,QWORD PTR [rax+rbp*1]
   1d51d:	mov    edi,DWORD PTR [r12]
   1d521:	add    esi,DWORD PTR [rax+r15*1]
   1d525:	sub    r15,0x4
   1d529:	call   179b0 <ILogsum>
   1d52e:	mov    DWORD PTR [r12],eax
   1d532:	cmp    QWORD PTR [rsp],r15
   1d536:	jne    1d500 <P7Backward+0x220>
   1d538:	mov    rax,QWORD PTR [rsp+0x38]
   1d53d:	mov    esi,DWORD PTR [r14+0x16c]
   1d544:	mov    edi,DWORD PTR [r14+0x168]
   1d54b:	mov    r12,QWORD PTR [rax+rbx*1]
   1d54f:	mov    rax,QWORD PTR [rax+rbp*1]
   1d553:	add    edi,DWORD PTR [r12]
   1d557:	add    esi,DWORD PTR [rax+0xc]
   1d55a:	call   179b0 <ILogsum>
   1d55f:	mov    DWORD PTR [r12+0xc],eax
   1d564:	mov    rax,QWORD PTR [rsp+0x38]
   1d569:	mov    esi,DWORD PTR [r14+0x15c]
   1d570:	mov    edi,DWORD PTR [r14+0x158]
   1d577:	mov    r12,QWORD PTR [rax+rbx*1]
   1d57b:	add    esi,DWORD PTR [r12+0xc]
   1d580:	add    edi,DWORD PTR [r12+0x8]
   1d585:	call   179b0 <ILogsum>
   1d58a:	mov    DWORD PTR [r12+0x4],eax
   1d58f:	mov    rax,QWORD PTR [rsp+0x38]
   1d594:	mov    esi,DWORD PTR [r14+0x154]
   1d59b:	mov    edi,DWORD PTR [r14+0x150]
   1d5a2:	mov    r12,QWORD PTR [rax+rbx*1]
   1d5a6:	mov    rax,QWORD PTR [rax+rbp*1]
   1d5aa:	add    edi,DWORD PTR [r12]
   1d5ae:	add    esi,DWORD PTR [rax+0x10]
   1d5b1:	call   179b0 <ILogsum>
   1d5b6:	mov    DWORD PTR [r12+0x10],eax
   1d5bb:	cmp    QWORD PTR [rsp+0x10],rbx
   1d5c0:	jne    1d610 <P7Backward+0x330>
   1d5c2:	mov    rcx,QWORD PTR [rsp+0x38]
   1d5c7:	mov    rax,QWORD PTR [rcx]
   1d5ca:	mov    ebp,DWORD PTR [rax+0x10]
   1d5cd:	mov    rax,QWORD PTR [rsp+0x28]
   1d5d2:	test   rax,rax
   1d5d5:	je     1d820 <P7Backward+0x540>
   1d5db:	mov    rdx,QWORD PTR [rsp+0x20]
   1d5e0:	mov    QWORD PTR [rax],rdx
   1d5e3:	mov    edi,ebp
   1d5e5:	call   17820 <Scorify>
   1d5ea:	mov    rax,QWORD PTR [rsp+0x58]
   1d5ef:	xor    rax,QWORD PTR fs:0x28
   1d5f8:	jne    1d82f <P7Backward+0x54f>
   1d5fe:	add    rsp,0x68
   1d602:	pop    rbx
   1d603:	pop    rbp
   1d604:	pop    r12
   1d606:	pop    r13
   1d608:	pop    r14
   1d60a:	pop    r15
   1d60c:	ret    
   1d60d:	nop    DWORD PTR [rax]
   1d610:	mov    rax,QWORD PTR [rsp+0x40]
   1d615:	mov    rcx,QWORD PTR [rsp+0x38]
   1d61a:	movsxd rdx,DWORD PTR [r14+0x88]
   1d621:	movsx  r9,BYTE PTR [r13+0x0]
   1d626:	mov    rsi,QWORD PTR [rax+rbx*1]
   1d62a:	mov    rdi,QWORD PTR [rcx+rbx*1]
   1d62e:	mov    rax,QWORD PTR [r14+0x178]
   1d635:	mov    eax,DWORD PTR [rax+rdx*4]
   1d638:	add    eax,DWORD PTR [rdi+0x4]
   1d63b:	mov    rdi,QWORD PTR [r14+0x140]
   1d642:	mov    rdi,QWORD PTR [rdi+r9*8]
   1d646:	add    eax,DWORD PTR [rdi+rdx*4]
   1d649:	mov    DWORD PTR [rsi+rdx*4],eax
   1d64c:	mov    rax,QWORD PTR [rsp+0x50]
   1d651:	mov    rsi,QWORD PTR [rax+rbx*1]
   1d655:	movsxd rax,DWORD PTR [r14+0x88]
   1d65c:	mov    DWORD PTR [rsi+rax*4],0xc521974f
   1d663:	mov    eax,DWORD PTR [r14+0x88]
   1d66a:	lea    edx,[rax-0x1]
   1d66d:	test   edx,edx
   1d66f:	jle    1d805 <P7Backward+0x525>
   1d675:	movsxd rcx,eax
   1d678:	sub    eax,0x2
   1d67b:	movsxd rdx,edx
   1d67e:	sub    rcx,rax
   1d681:	lea    r15,[rdx*4+0x0]
   1d689:	lea    rax,[rcx*4-0x8]
   1d691:	mov    QWORD PTR [rsp+0x8],rax
   1d696:	jmp    1d6a9 <P7Backward+0x3c9>
   1d698:	nop    DWORD PTR [rax+rax*1+0x0]
   1d6a0:	mov    rax,QWORD PTR [rsp+0x50]
   1d6a5:	mov    rsi,QWORD PTR [rax+rbx*1]
   1d6a9:	mov    rax,QWORD PTR [r14+0x138]
   1d6b0:	mov    esi,DWORD PTR [rsi+r15*1+0x4]
   1d6b5:	mov    rcx,QWORD PTR [rax+0x10]
   1d6b9:	mov    rax,QWORD PTR [rax+0x8]
   1d6bd:	add    esi,DWORD PTR [rcx+r15*1]
   1d6c1:	mov    rcx,QWORD PTR [rsp+0x48]
   1d6c6:	mov    edi,DWORD PTR [rax+r15*1]
   1d6ca:	mov    rcx,QWORD PTR [rcx+rbp*1]
   1d6ce:	add    edi,DWORD PTR [rcx+r15*1]
   1d6d2:	call   179b0 <ILogsum>
   1d6d7:	mov    rcx,QWORD PTR [r14+0x138]
   1d6de:	mov    DWORD PTR [rsp],eax
   1d6e1:	mov    rax,QWORD PTR [rsp+0x40]
   1d6e6:	mov    rcx,QWORD PTR [rcx]
   1d6e9:	mov    rax,QWORD PTR [rax+rbp*1]
   1d6ed:	mov    esi,DWORD PTR [rcx+r15*1]
   1d6f1:	mov    rcx,QWORD PTR [r14+0x178]
   1d6f8:	add    esi,DWORD PTR [rax+r15*1+0x4]
   1d6fd:	mov    rax,QWORD PTR [rsp+0x38]
   1d702:	mov    edi,DWORD PTR [rcx+r15*1]
   1d706:	mov    rax,QWORD PTR [rax+rbx*1]
   1d70a:	add    edi,DWORD PTR [rax+0x4]
   1d70d:	call   179b0 <ILogsum>
   1d712:	mov    r9d,DWORD PTR [rsp]
   1d716:	mov    edi,eax
   1d718:	mov    rax,QWORD PTR [rsp+0x40]
   1d71d:	mov    esi,r9d
   1d720:	mov    r12,QWORD PTR [rax+rbx*1]
   1d724:	call   179b0 <ILogsum>
   1d729:	mov    rsi,QWORD PTR [rsp+0x40]
   1d72e:	mov    rcx,QWORD PTR [r14+0x140]
   1d735:	add    r12,r15
   1d738:	mov    DWORD PTR [r12],eax
   1d73c:	movsx  rdi,BYTE PTR [r13+0x0]
   1d741:	mov    rax,QWORD PTR [rsi+rbx*1]
   1d745:	mov    r9,QWORD PTR [rsi+rbp*1]
   1d749:	mov    rcx,QWORD PTR [rcx+rdi*8]
   1d74d:	mov    rdi,QWORD PTR [rsp+0x48]
   1d752:	add    rax,r15
   1d755:	mov    ecx,DWORD PTR [rcx+r15*1]
   1d759:	add    DWORD PTR [rax],ecx
   1d75b:	mov    rax,QWORD PTR [r14+0x138]
   1d762:	mov    r12,QWORD PTR [rdi+rbx*1]
   1d766:	mov    rsi,QWORD PTR [rax+0x18]
   1d76a:	mov    rax,QWORD PTR [rax+0x20]
   1d76e:	add    r12,r15
   1d771:	mov    esi,DWORD PTR [rsi+r15*1]
   1d775:	add    esi,DWORD PTR [r9+r15*1+0x4]
   1d77a:	mov    r9,QWORD PTR [rdi+rbp*1]
   1d77e:	mov    edi,DWORD PTR [rax+r15*1]
   1d782:	add    edi,DWORD PTR [r9+r15*1]
   1d786:	call   179b0 <ILogsum>
   1d78b:	mov    rcx,QWORD PTR [r14+0x148]
   1d792:	mov    rdi,QWORD PTR [r14+0x138]
   1d799:	mov    DWORD PTR [r12],eax
   1d79d:	mov    rax,QWORD PTR [rsp+0x48]
   1d7a2:	movsx  rsi,BYTE PTR [r13+0x0]
   1d7a7:	mov    rdx,QWORD PTR [rax+rbx*1]
   1d7ab:	mov    rax,QWORD PTR [rsp+0x50]
   1d7b0:	mov    rcx,QWORD PTR [rcx+rsi*8]
   1d7b4:	mov    rsi,QWORD PTR [rsp+0x40]
   1d7b9:	add    rdx,r15
   1d7bc:	mov    rax,QWORD PTR [rax+rbx*1]
   1d7c0:	mov    r9,QWORD PTR [rsi+rbp*1]
   1d7c4:	mov    rsi,QWORD PTR [rdi+0x28]
   1d7c8:	mov    ecx,DWORD PTR [rcx+r15*1]
   1d7cc:	add    DWORD PTR [rdx],ecx
   1d7ce:	lea    r12,[rax+r15*1]
   1d7d2:	mov    esi,DWORD PTR [rsi+r15*1]
   1d7d6:	add    esi,DWORD PTR [r9+r15*1+0x4]
   1d7db:	mov    r9,QWORD PTR [rdi+0x30]
   1d7df:	mov    edi,DWORD PTR [rax+r15*1+0x4]
   1d7e4:	add    edi,DWORD PTR [r9+r15*1]
   1d7e8:	sub    r15,0x4
   1d7ec:	call   179b0 <ILogsum>
   1d7f1:	mov    DWORD PTR [r12],eax
   1d7f5:	cmp    r15,QWORD PTR [rsp+0x8]
   1d7fa:	jne    1d6a0 <P7Backward+0x3c0>
   1d800:	mov    rcx,QWORD PTR [rsp+0x38]
   1d805:	sub    rbx,0x8
   1d809:	sub    r13,0x1
   1d80d:	cmp    QWORD PTR [rsp+0x18],rbx
   1d812:	jne    1d480 <P7Backward+0x1a0>
   1d818:	jmp    1d5c7 <P7Backward+0x2e7>
   1d81d:	nop    DWORD PTR [rax]
   1d820:	mov    rdi,QWORD PTR [rsp+0x20]
   1d825:	call   5810 <FreePlan7Matrix>
   1d82a:	jmp    1d5e3 <P7Backward+0x303>
   1d82f:	call   3570 <__stack_chk_fail@plt>
   1d834:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1d83f:	nop

000000000001d840 <P7EmitterPosterior>:
   1d840:	endbr64 
   1d844:	push   r15
   1d846:	push   r14
   1d848:	push   r13
   1d84a:	push   r12
   1d84c:	mov    r12,rsi
   1d84f:	push   rbp
   1d850:	push   rbx
   1d851:	sub    rsp,0x38
   1d855:	mov    rax,QWORD PTR [rcx]
   1d858:	mov    rsi,QWORD PTR [rax]
   1d85b:	mov    ebx,DWORD PTR [rsi+0x10]
   1d85e:	mov    DWORD PTR [rsp+0xc],ebx
   1d862:	test   edi,edi
   1d864:	jle    1db90 <P7EmitterPosterior+0x350>
   1d86a:	movsxd r11,edi
   1d86d:	sub    edi,0x1
   1d870:	mov    rsi,QWORD PTR [r8+0x8]
   1d874:	mov    r13,r8
   1d877:	lea    r14,[r11*8-0x8]
   1d87f:	sub    r11,rdi
   1d882:	lea    rbx,[r11*8-0x10]
   1d88a:	mov    QWORD PTR [rsp+0x28],rbx
   1d88f:	nop
   1d890:	mov    rdi,QWORD PTR [rdx]
   1d893:	mov    rbx,QWORD PTR [rax+r14*1+0x8]
   1d898:	lea    r15,[r14+0x8]
   1d89c:	mov    rax,QWORD PTR [r13+0x0]
   1d8a0:	mov    r9d,DWORD PTR [rsp+0xc]
   1d8a5:	mov    rdi,QWORD PTR [rdi+r14*1]
   1d8a9:	mov    r11,QWORD PTR [rax+r14*1+0x8]
   1d8ae:	mov    eax,DWORD PTR [r12+0x164]
   1d8b6:	add    eax,DWORD PTR [rdi+0x8]
   1d8b9:	add    eax,DWORD PTR [rbx+0x8]
   1d8bc:	sub    eax,r9d
   1d8bf:	mov    DWORD PTR [r11+0x8],eax
   1d8c3:	mov    eax,DWORD PTR [r12+0x16c]
   1d8cb:	add    eax,DWORD PTR [rdi+0xc]
   1d8ce:	add    eax,DWORD PTR [rbx+0xc]
   1d8d1:	sub    eax,r9d
   1d8d4:	mov    DWORD PTR [r11+0xc],eax
   1d8d8:	mov    eax,DWORD PTR [r12+0x154]
   1d8e0:	add    eax,DWORD PTR [rdi+0x10]
   1d8e3:	add    eax,DWORD PTR [rbx+0x10]
   1d8e6:	sub    eax,r9d
   1d8e9:	mov    DWORD PTR [r11+0x10],eax
   1d8ed:	movabs rax,0xc521974fc521974f
   1d8f7:	mov    QWORD PTR [r11],rax
   1d8fa:	movsxd rax,DWORD PTR [r12+0x88]
   1d902:	cmp    eax,0x1
   1d905:	jle    1da69 <P7EmitterPosterior+0x229>
   1d90b:	xor    ebx,ebx
   1d90d:	jmp    1d917 <P7EmitterPosterior+0xd7>
   1d90f:	nop
   1d910:	mov    rax,QWORD PTR [rdx]
   1d913:	mov    rdi,QWORD PTR [rax+r14*1]
   1d917:	mov    rax,QWORD PTR [rcx+0x8]
   1d91b:	add    rbx,0x1
   1d91f:	mov    QWORD PTR [rsp+0x20],rcx
   1d924:	lea    rbp,[rbx*4+0x0]
   1d92c:	mov    QWORD PTR [rsp+0x10],rdx
   1d931:	mov    rax,QWORD PTR [rax+r15*1]
   1d935:	mov    r11d,DWORD PTR [rax+rbx*4]
   1d939:	mov    rax,QWORD PTR [rsi+r15*1]
   1d93d:	mov    rsi,QWORD PTR [r12+0x138]
   1d945:	mov    DWORD PTR [rax+rbx*4],r11d
   1d949:	mov    rax,QWORD PTR [rdx+0x18]
   1d94d:	mov    rsi,QWORD PTR [rsi+0x28]
   1d951:	mov    edi,DWORD PTR [rdi]
   1d953:	mov    rax,QWORD PTR [rax+r14*1]
   1d957:	mov    esi,DWORD PTR [rsi+rbp*1-0x4]
   1d95b:	add    esi,DWORD PTR [rax+rbp*1-0x4]
   1d95f:	mov    rax,QWORD PTR [r12+0x170]
   1d967:	add    edi,DWORD PTR [rax+rbx*4]
   1d96a:	call   179b0 <ILogsum>
   1d96f:	mov    rdx,QWORD PTR [rsp+0x10]
   1d974:	mov    rdi,QWORD PTR [r12+0x138]
   1d97c:	mov    DWORD PTR [rsp+0x18],eax
   1d980:	mov    rax,QWORD PTR [rdx+0x10]
   1d984:	mov    rsi,QWORD PTR [rdi+0x18]
   1d988:	mov    rdi,QWORD PTR [rdi]
   1d98b:	mov    rax,QWORD PTR [rax+r14*1]
   1d98f:	mov    esi,DWORD PTR [rsi+rbp*1-0x4]
   1d993:	mov    edi,DWORD PTR [rdi+rbp*1-0x4]
   1d997:	add    esi,DWORD PTR [rax+rbp*1-0x4]
   1d99b:	mov    rax,QWORD PTR [rdx+0x8]
   1d99f:	mov    rax,QWORD PTR [rax+r14*1]
   1d9a3:	add    edi,DWORD PTR [rax+rbp*1-0x4]
   1d9a7:	call   179b0 <ILogsum>
   1d9ac:	mov    r11d,DWORD PTR [rsp+0x18]
   1d9b1:	mov    edi,eax
   1d9b3:	mov    esi,r11d
   1d9b6:	call   179b0 <ILogsum>
   1d9bb:	mov    rsi,QWORD PTR [r13+0x8]
   1d9bf:	sub    eax,DWORD PTR [rsp+0xc]
   1d9c3:	mov    rdx,QWORD PTR [rsp+0x10]
   1d9c8:	mov    rcx,QWORD PTR [rsi+r15*1]
   1d9cc:	add    rcx,rbp
   1d9cf:	add    DWORD PTR [rcx],eax
   1d9d1:	mov    rcx,QWORD PTR [rsp+0x20]
   1d9d6:	mov    rax,QWORD PTR [rcx+0x10]
   1d9da:	mov    QWORD PTR [rsp+0x18],rcx
   1d9df:	mov    rax,QWORD PTR [rax+r15*1]
   1d9e3:	mov    esi,DWORD PTR [rax+rbx*4]
   1d9e6:	mov    rax,QWORD PTR [r13+0x10]
   1d9ea:	mov    rax,QWORD PTR [rax+r15*1]
   1d9ee:	mov    DWORD PTR [rax+rbx*4],esi
   1d9f1:	mov    rsi,QWORD PTR [rdx+0x10]
   1d9f5:	mov    rax,QWORD PTR [r12+0x138]
   1d9fd:	mov    rdi,QWORD PTR [rsi+r14*1]
   1da01:	mov    rsi,QWORD PTR [rax+0x20]
   1da05:	mov    rax,QWORD PTR [rax+0x8]
   1da09:	mov    esi,DWORD PTR [rsi+rbx*4]
   1da0c:	add    esi,DWORD PTR [rdi+rbx*4]
   1da0f:	mov    rdi,QWORD PTR [rdx+0x8]
   1da13:	mov    r11,QWORD PTR [rdi+r14*1]
   1da17:	mov    edi,DWORD PTR [rax+rbx*4]
   1da1a:	add    edi,DWORD PTR [r11+rbx*4]
   1da1e:	call   179b0 <ILogsum>
   1da23:	mov    rsi,QWORD PTR [r13+0x10]
   1da27:	sub    eax,DWORD PTR [rsp+0xc]
   1da2b:	mov    rdx,QWORD PTR [rsp+0x10]
   1da30:	mov    rcx,QWORD PTR [rsp+0x18]
   1da35:	add    rbp,QWORD PTR [rsi+r15*1]
   1da39:	lea    esi,[rbx+0x1]
   1da3c:	add    DWORD PTR [rbp+0x0],eax
   1da3f:	mov    rax,QWORD PTR [r13+0x18]
   1da43:	mov    rax,QWORD PTR [rax+r15*1]
   1da47:	mov    DWORD PTR [rax+rbx*4],0xc521974f
   1da4e:	movsxd rax,DWORD PTR [r12+0x88]
   1da56:	cmp    eax,esi
   1da58:	mov    rsi,QWORD PTR [r13+0x8]
   1da5c:	jg     1d910 <P7EmitterPosterior+0xd0>
   1da62:	mov    rdi,QWORD PTR [rdx]
   1da65:	mov    rdi,QWORD PTR [rdi+r14*1]
   1da69:	mov    r11,QWORD PTR [rcx+0x8]
   1da6d:	mov    rsi,QWORD PTR [rsi+r15*1]
   1da71:	mov    QWORD PTR [rsp+0x18],rcx
   1da76:	mov    QWORD PTR [rsp+0x10],rdx
   1da7b:	mov    r11,QWORD PTR [r11+r15*1]
   1da7f:	mov    r11d,DWORD PTR [r11+rax*4]
   1da83:	mov    DWORD PTR [rsi+rax*4],r11d
   1da87:	mov    rsi,QWORD PTR [rdx+0x18]
   1da8b:	mov    r11,QWORD PTR [r12+0x138]
   1da93:	movsxd rax,DWORD PTR [r12+0x88]
   1da9b:	mov    rsi,QWORD PTR [rsi+r14*1]
   1da9f:	mov    edi,DWORD PTR [rdi]
   1daa1:	mov    r11,QWORD PTR [r11+0x28]
   1daa5:	mov    esi,DWORD PTR [rsi+rax*4-0x4]
   1daa9:	add    esi,DWORD PTR [r11+rax*4-0x4]
   1daae:	mov    r11,QWORD PTR [r12+0x170]
   1dab6:	add    edi,DWORD PTR [r11+rax*4]
   1daba:	call   179b0 <ILogsum>
   1dabf:	mov    rdx,QWORD PTR [rsp+0x10]
   1dac4:	mov    rdi,QWORD PTR [r12+0x138]
   1dacc:	mov    ebp,eax
   1dace:	movsxd rax,DWORD PTR [r12+0x88]
   1dad6:	mov    rsi,QWORD PTR [rdx+0x10]
   1dada:	shl    rax,0x2
   1dade:	mov    r11,QWORD PTR [rsi+r14*1]
   1dae2:	mov    rsi,QWORD PTR [rdi+0x18]
   1dae6:	mov    rdi,QWORD PTR [rdi]
   1dae9:	mov    esi,DWORD PTR [rsi+rax*1-0x4]
   1daed:	add    esi,DWORD PTR [r11+rax*1-0x4]
   1daf2:	mov    r11,QWORD PTR [rdx+0x8]
   1daf6:	mov    edi,DWORD PTR [rdi+rax*1-0x4]
   1dafa:	mov    r11,QWORD PTR [r11+r14*1]
   1dafe:	sub    r14,0x8
   1db02:	add    edi,DWORD PTR [r11+rax*1-0x4]
   1db07:	call   179b0 <ILogsum>
   1db0c:	mov    esi,ebp
   1db0e:	mov    edi,eax
   1db10:	call   179b0 <ILogsum>
   1db15:	mov    rsi,QWORD PTR [r13+0x8]
   1db19:	mov    edx,DWORD PTR [rsp+0xc]
   1db1d:	movsxd rdi,DWORD PTR [r12+0x88]
   1db25:	mov    r11d,eax
   1db28:	mov    rax,QWORD PTR [rsi+r15*1]
   1db2c:	add    DWORD PTR [rax+rdi*4],r11d
   1db30:	movsxd rdi,DWORD PTR [r12+0x88]
   1db38:	sub    DWORD PTR [rax+rdi*4],edx
   1db3b:	mov    rax,QWORD PTR [r13+0x18]
   1db3f:	mov    rax,QWORD PTR [rax+r15*1]
   1db43:	mov    DWORD PTR [rax],0xc521974f
   1db49:	movsxd rdi,DWORD PTR [r12+0x88]
   1db51:	mov    DWORD PTR [rax+rdi*4],0xc521974f
   1db58:	mov    rax,QWORD PTR [r13+0x10]
   1db5c:	movsxd rdi,DWORD PTR [r12+0x88]
   1db64:	mov    rax,QWORD PTR [rax+r15*1]
   1db68:	mov    DWORD PTR [rax+rdi*4],0xc521974f
   1db6f:	cmp    QWORD PTR [rsp+0x28],r14
   1db74:	je     1db90 <P7EmitterPosterior+0x350>
   1db76:	mov    rcx,QWORD PTR [rsp+0x18]
   1db7b:	mov    rdx,QWORD PTR [rsp+0x10]
   1db80:	mov    rax,QWORD PTR [rcx]
   1db83:	jmp    1d890 <P7EmitterPosterior+0x50>
   1db88:	nop    DWORD PTR [rax+rax*1+0x0]
   1db90:	add    rsp,0x38
   1db94:	pop    rbx
   1db95:	pop    rbp
   1db96:	pop    r12
   1db98:	pop    r13
   1db9a:	pop    r14
   1db9c:	pop    r15
   1db9e:	ret    
   1db9f:	nop

000000000001dba0 <P7OptimalAccuracyTrace>:
   1dba0:	endbr64 
   1dba4:	push   r15
   1dba6:	mov    r15d,esi
   1dba9:	push   r14
   1dbab:	mov    r14d,edi
   1dbae:	push   r13
   1dbb0:	push   r12
   1dbb2:	lea    r12d,[rdi+rdi*1+0x6]
   1dbb7:	push   rbp
   1dbb8:	push   rbx
   1dbb9:	mov    rbx,rcx
   1dbbc:	sub    rsp,0x78
   1dbc0:	mov    DWORD PTR [rsp+0x34],edi
   1dbc4:	mov    edi,r12d
   1dbc7:	mov    DWORD PTR [rsp+0x30],esi
   1dbcb:	lea    rsi,[rsp+0x60]
   1dbd0:	mov    QWORD PTR [rsp+0x8],rdx
   1dbd5:	mov    QWORD PTR [rsp+0x48],r8
   1dbda:	mov    rax,QWORD PTR fs:0x28
   1dbe3:	mov    QWORD PTR [rsp+0x68],rax
   1dbe8:	xor    eax,eax
   1dbea:	call   209f0 <P7AllocTrace>
   1dbef:	mov    rax,QWORD PTR [rbx]
   1dbf2:	mov    QWORD PTR [rsp+0x10],rax
   1dbf7:	mov    rax,QWORD PTR [rbx+0x8]
   1dbfb:	mov    QWORD PTR [rsp+0x18],rax
   1dc00:	mov    rax,QWORD PTR [rbx+0x10]
   1dc04:	mov    QWORD PTR [rsp+0x20],rax
   1dc09:	mov    rax,QWORD PTR [rbx+0x18]
   1dc0d:	mov    QWORD PTR [rsp+0x38],rax
   1dc12:	mov    rax,QWORD PTR [rsp+0x60]
   1dc17:	mov    rax,QWORD PTR [rax+0x8]
   1dc1b:	mov    BYTE PTR [rax],0x9
   1dc1e:	mov    rax,QWORD PTR [rsp+0x60]
   1dc23:	mov    rdx,QWORD PTR [rax+0x10]
   1dc27:	mov    DWORD PTR [rdx],0x0
   1dc2d:	mov    rdx,QWORD PTR [rax+0x18]
   1dc31:	mov    rax,QWORD PTR [rax+0x8]
   1dc35:	mov    DWORD PTR [rdx],0x0
   1dc3b:	mov    BYTE PTR [rax+0x1],0x8
   1dc3f:	mov    rdi,QWORD PTR [rsp+0x60]
   1dc44:	mov    rax,QWORD PTR [rdi+0x10]
   1dc48:	mov    rcx,QWORD PTR [rdi+0x8]
   1dc4c:	mov    DWORD PTR [rax+0x4],0x0
   1dc53:	mov    rax,QWORD PTR [rdi+0x18]
   1dc57:	mov    DWORD PTR [rax+0x4],0x0
   1dc5e:	movzx  eax,BYTE PTR [rcx+0x1]
   1dc62:	cmp    al,0x4
   1dc64:	je     1e340 <P7OptimalAccuracyTrace+0x7a0>
   1dc6a:	movsxd rdx,r15d
   1dc6d:	mov    r13d,0x2
   1dc73:	mov    r15d,ebp
   1dc76:	lea    rbx,[rdx*4+0x0]
   1dc7e:	mov    QWORD PTR [rsp+0x58],rbx
   1dc83:	mov    ebx,r14d
   1dc86:	mov    r14,r13
   1dc89:	nop    DWORD PTR [rax+0x0]
   1dc90:	cmp    al,0xa
   1dc92:	ja     1dcd0 <P7OptimalAccuracyTrace+0x130>
   1dc94:	lea    rdx,[rip+0x21cfd]        # 3f998 <xpam120+0xc38>
   1dc9b:	movsxd rax,DWORD PTR [rdx+rax*4]
   1dc9f:	add    rax,rdx
   1dca2:	notrack jmp rax
   1dca5:	nop    DWORD PTR [rax]
   1dca8:	mov    rax,QWORD PTR [rsp+0x8]
   1dcad:	mov    rax,QWORD PTR [rax+0x10]
   1dcb1:	mov    rax,QWORD PTR [rax+r13*8]
   1dcb5:	mov    esi,DWORD PTR [rax+rcx*4]
   1dcb8:	mov    rax,QWORD PTR [rsp+0x20]
   1dcbd:	mov    rax,QWORD PTR [rax+r9*1-0x8]
   1dcc2:	mov    edi,DWORD PTR [rax+rcx*4]
   1dcc5:	call   179b0 <ILogsum>
   1dcca:	nop    WORD PTR [rax+rax*1+0x0]
   1dcd0:	lea    rdi,[rip+0x1f4fb]        # 3d1d2 <_IO_stdin_used+0x1d2>
   1dcd7:	xor    eax,eax
   1dcd9:	call   317f0 <Die>
   1dcde:	mov    rdi,QWORD PTR [rsp+0x60]
   1dce3:	lea    ebp,[r14+0x1]
   1dce7:	cmp    ebp,r12d
   1dcea:	je     1ddcb <P7OptimalAccuracyTrace+0x22b>
   1dcf0:	mov    rcx,QWORD PTR [rdi+0x8]
   1dcf4:	movzx  eax,BYTE PTR [rcx+r14*1]
   1dcf9:	add    r14,0x1
   1dcfd:	cmp    al,0x4
   1dcff:	jne    1dc90 <P7OptimalAccuracyTrace+0xf0>
   1dd01:	mov    r14d,ebp
   1dd04:	mov    DWORD PTR [rdi],r14d
   1dd07:	call   20bf0 <P7ReverseTrace>
   1dd0c:	mov    rax,QWORD PTR [rsp+0x60]
   1dd11:	mov    rbx,QWORD PTR [rsp+0x48]
   1dd16:	mov    QWORD PTR [rbx],rax
   1dd19:	mov    rax,QWORD PTR [rsp+0x68]
   1dd1e:	xor    rax,QWORD PTR fs:0x28
   1dd27:	jne    1e34b <P7OptimalAccuracyTrace+0x7ab>
   1dd2d:	add    rsp,0x78
   1dd31:	pop    rbx
   1dd32:	pop    rbp
   1dd33:	pop    r12
   1dd35:	pop    r13
   1dd37:	pop    r14
   1dd39:	pop    r15
   1dd3b:	ret    
   1dd3c:	nop    DWORD PTR [rax+0x0]
   1dd40:	mov    rdx,QWORD PTR [rsp+0x10]
   1dd45:	movsxd rcx,ebx
   1dd48:	lea    rax,[rcx*8+0x0]
   1dd50:	lea    r13,[rdx+rax*1]
   1dd54:	mov    rax,QWORD PTR [rdx+rax*1-0x8]
   1dd59:	mov    rsi,QWORD PTR [r13+0x0]
   1dd5d:	mov    edi,DWORD PTR [rax+0xc]
   1dd60:	mov    ebp,DWORD PTR [rsi+0xc]
   1dd63:	mov    rsi,QWORD PTR [rsp+0x8]
   1dd68:	mov    rsi,QWORD PTR [rsi]
   1dd6b:	mov    rcx,QWORD PTR [rsi+rcx*8]
   1dd6f:	mov    esi,DWORD PTR [rcx+0xc]
   1dd72:	call   179b0 <ILogsum>
   1dd77:	cmp    ebp,eax
   1dd79:	jne    1dd83 <P7OptimalAccuracyTrace+0x1e3>
   1dd7b:	test   ebx,ebx
   1dd7d:	jg     1e2f0 <P7OptimalAccuracyTrace+0x750>
   1dd83:	mov    rax,QWORD PTR [r13+0x0]
   1dd87:	mov    ecx,DWORD PTR [rax+0x4]
   1dd8a:	cmp    DWORD PTR [rax+0xc],ecx
   1dd8d:	jne    1de3b <P7OptimalAccuracyTrace+0x29b>
   1dd93:	mov    rax,QWORD PTR [rsp+0x60]
   1dd98:	mov    rax,QWORD PTR [rax+0x8]
   1dd9c:	mov    BYTE PTR [rax+r14*1],0x7
   1dda1:	mov    rdi,QWORD PTR [rsp+0x60]
   1dda6:	lea    ebp,[r14+0x1]
   1ddaa:	mov    rax,QWORD PTR [rdi+0x10]
   1ddae:	mov    DWORD PTR [rax+r14*4],0x0
   1ddb6:	mov    rax,QWORD PTR [rdi+0x18]
   1ddba:	mov    DWORD PTR [rax+r14*4],0x0
   1ddc2:	cmp    ebp,r12d
   1ddc5:	jne    1dcf0 <P7OptimalAccuracyTrace+0x150>
   1ddcb:	add    r12d,DWORD PTR [rsp+0x34]
   1ddd0:	mov    esi,r12d
   1ddd3:	call   20a70 <P7ReallocTrace>
   1ddd8:	mov    rdi,QWORD PTR [rsp+0x60]
   1dddd:	jmp    1dcf0 <P7OptimalAccuracyTrace+0x150>
   1dde2:	nop    WORD PTR [rax+rax*1+0x0]
   1dde8:	mov    rdx,QWORD PTR [rsp+0x10]
   1dded:	movsxd rcx,ebx
   1ddf0:	lea    rax,[rcx*8+0x0]
   1ddf8:	lea    r13,[rdx+rax*1]
   1ddfc:	mov    rax,QWORD PTR [rdx+rax*1-0x8]
   1de01:	mov    rsi,QWORD PTR [r13+0x0]
   1de05:	mov    edi,DWORD PTR [rax+0x8]
   1de08:	mov    ebp,DWORD PTR [rsi+0x8]
   1de0b:	mov    rsi,QWORD PTR [rsp+0x8]
   1de10:	mov    rsi,QWORD PTR [rsi]
   1de13:	mov    rcx,QWORD PTR [rsi+rcx*8]
   1de17:	mov    esi,DWORD PTR [rcx+0x8]
   1de1a:	call   179b0 <ILogsum>
   1de1f:	test   ebx,ebx
   1de21:	jle    1de2b <P7OptimalAccuracyTrace+0x28b>
   1de23:	cmp    ebp,eax
   1de25:	je     1e330 <P7OptimalAccuracyTrace+0x790>
   1de2b:	mov    rax,QWORD PTR [r13+0x0]
   1de2f:	mov    ecx,DWORD PTR [rax+0x4]
   1de32:	cmp    DWORD PTR [rax+0x8],ecx
   1de35:	je     1dd93 <P7OptimalAccuracyTrace+0x1f3>
   1de3b:	lea    rdi,[rip+0x1f3a1]        # 3d1e3 <_IO_stdin_used+0x1e3>
   1de42:	xor    eax,eax
   1de44:	call   317f0 <Die>
   1de49:	mov    rdi,QWORD PTR [rsp+0x60]
   1de4e:	jmp    1dce3 <P7OptimalAccuracyTrace+0x143>
   1de53:	nop    DWORD PTR [rax+rax*1+0x0]
   1de58:	test   ebx,ebx
   1de5a:	je     1e1a0 <P7OptimalAccuracyTrace+0x600>
   1de60:	jle    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1de66:	mov    rdi,QWORD PTR [rsp+0x10]
   1de6b:	movsxd rax,ebx
   1de6e:	add    rax,0x1
   1de72:	mov    rcx,QWORD PTR [rdi+rax*8]
   1de76:	mov    ebp,DWORD PTR [rcx+0x10]
   1de79:	mov    rcx,QWORD PTR [rsp+0x8]
   1de7e:	mov    rcx,QWORD PTR [rcx]
   1de81:	mov    rcx,QWORD PTR [rcx+rax*8]
   1de85:	mov    rax,QWORD PTR [rdi+rax*8-0x8]
   1de8a:	mov    esi,DWORD PTR [rcx+0x10]
   1de8d:	mov    edi,DWORD PTR [rax+0x10]
   1de90:	call   179b0 <ILogsum>
   1de95:	cmp    ebp,eax
   1de97:	jne    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1de9d:	mov    rax,QWORD PTR [rsp+0x60]
   1dea2:	mov    rax,QWORD PTR [rax+0x8]
   1dea6:	mov    BYTE PTR [rax+r14*1],0x5
   1deab:	jmp    1e2fe <P7OptimalAccuracyTrace+0x75e>
   1deb0:	mov    eax,DWORD PTR [rsp+0x30]
   1deb4:	mov    r15d,DWORD PTR [rsp+0x30]
   1deb9:	test   eax,eax
   1debb:	jle    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1dec1:	mov    rsi,QWORD PTR [rsp+0x10]
   1dec6:	movsxd rax,ebx
   1dec9:	mov    r11,QWORD PTR [rsp+0x18]
   1dece:	test   ebx,ebx
   1ded0:	setg   dil
   1ded4:	mov    r15d,DWORD PTR [rsp+0x30]
   1ded9:	mov    rdx,QWORD PTR [rsi+rax*8]
   1dedd:	mov    esi,DWORD PTR [rdx+0x4]
   1dee0:	mov    rdx,QWORD PTR [rsp+0x58]
   1dee5:	add    rdx,QWORD PTR [r11+rax*8]
   1dee9:	mov    rax,rdx
   1deec:	nop    DWORD PTR [rax+0x0]
   1def0:	mov    r9d,r15d
   1def3:	sub    r15d,0x1
   1def7:	cmp    DWORD PTR [rax],esi
   1def9:	jne    1df04 <P7OptimalAccuracyTrace+0x364>
   1defb:	test   dil,dil
   1defe:	jne    1e170 <P7OptimalAccuracyTrace+0x5d0>
   1df04:	sub    rax,0x4
   1df08:	test   r15d,r15d
   1df0b:	jne    1def0 <P7OptimalAccuracyTrace+0x350>
   1df0d:	jmp    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1df12:	nop    WORD PTR [rax+rax*1+0x0]
   1df18:	mov    rax,QWORD PTR [rsp+0x38]
   1df1d:	mov    rdx,QWORD PTR [rsp+0x18]
   1df22:	movsxd rsi,ebx
   1df25:	mov    r9,QWORD PTR [rax+rsi*8]
   1df29:	movsxd rax,r15d
   1df2c:	mov    rsi,QWORD PTR [rdx+rsi*8]
   1df30:	add    rax,0x1
   1df34:	mov    edi,DWORD PTR [r9+rax*4]
   1df38:	lea    r10,[rax*4+0x0]
   1df40:	cmp    edi,DWORD PTR [rsi+rax*4-0x4]
   1df44:	je     1e2d0 <P7OptimalAccuracyTrace+0x730>
   1df4a:	cmp    DWORD PTR [r9+r10*1-0x4],edi
   1df4f:	jne    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1df55:	cmp    r15d,0x1
   1df59:	jle    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1df5f:	mov    BYTE PTR [rcx+r14*1],0x2
   1df64:	mov    rdi,QWORD PTR [rsp+0x60]
   1df69:	mov    rax,QWORD PTR [rdi+0x10]
   1df6d:	mov    DWORD PTR [rax+r14*4],r15d
   1df71:	mov    rax,QWORD PTR [rdi+0x18]
   1df75:	sub    r15d,0x1
   1df79:	mov    DWORD PTR [rax+r14*4],0x0
   1df81:	jmp    1dce3 <P7OptimalAccuracyTrace+0x143>
   1df86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1df90:	mov    rdx,QWORD PTR [rsp+0x18]
   1df95:	movsxd r9,ebx
   1df98:	movsxd rcx,r15d
   1df9b:	mov    rdi,QWORD PTR [rsp+0x8]
   1dfa0:	add    r9,0x1
   1dfa4:	lea    r13,[rcx+0x1]
   1dfa8:	mov    rax,QWORD PTR [rdx+r9*8]
   1dfac:	lea    rbp,[r9*8+0x0]
   1dfb4:	mov    QWORD PTR [rsp+0x50],r9
   1dfb9:	lea    rcx,[r13*4+0x0]
   1dfc1:	mov    QWORD PTR [rsp+0x40],rcx
   1dfc6:	mov    eax,DWORD PTR [rax+r13*4]
   1dfca:	mov    DWORD PTR [rsp+0x28],eax
   1dfce:	mov    rax,QWORD PTR [rdi+0x8]
   1dfd2:	mov    rax,QWORD PTR [rax+r9*8]
   1dfd6:	mov    esi,DWORD PTR [rax+r13*4]
   1dfda:	mov    rax,QWORD PTR [rdx+rbp*1-0x8]
   1dfdf:	mov    edi,DWORD PTR [rax+rcx*1-0x4]
   1dfe3:	call   179b0 <ILogsum>
   1dfe8:	cmp    eax,DWORD PTR [rsp+0x28]
   1dfec:	mov    r9,QWORD PTR [rsp+0x50]
   1dff1:	jne    1e200 <P7OptimalAccuracyTrace+0x660>
   1dff7:	test   ebx,ebx
   1dff9:	jle    1e004 <P7OptimalAccuracyTrace+0x464>
   1dffb:	test   r15d,r15d
   1dffe:	jg     1e10d <P7OptimalAccuracyTrace+0x56d>
   1e004:	mov    rax,QWORD PTR [rsp+0x8]
   1e009:	mov    rcx,QWORD PTR [rsp+0x40]
   1e00e:	mov    QWORD PTR [rsp+0x50],r9
   1e013:	mov    rax,QWORD PTR [rax+0x8]
   1e017:	mov    rax,QWORD PTR [rax+r9*8]
   1e01b:	mov    esi,DWORD PTR [rax+r13*4]
   1e01f:	mov    rax,QWORD PTR [rsp+0x20]
   1e024:	mov    rax,QWORD PTR [rax+rbp*1-0x8]
   1e029:	mov    edi,DWORD PTR [rax+rcx*1-0x4]
   1e02d:	call   179b0 <ILogsum>
   1e032:	mov    r9,QWORD PTR [rsp+0x50]
   1e037:	mov    rax,QWORD PTR [rsp+0x8]
   1e03c:	mov    rcx,QWORD PTR [rsp+0x40]
   1e041:	mov    QWORD PTR [rsp+0x50],r9
   1e046:	mov    rax,QWORD PTR [rax+0x8]
   1e04a:	mov    rax,QWORD PTR [rax+r9*8]
   1e04e:	mov    esi,DWORD PTR [rax+r13*4]
   1e052:	mov    rax,QWORD PTR [rsp+0x38]
   1e057:	mov    rax,QWORD PTR [rax+rbp*1-0x8]
   1e05c:	mov    edi,DWORD PTR [rax+rcx*1-0x4]
   1e060:	call   179b0 <ILogsum>
   1e065:	cmp    eax,DWORD PTR [rsp+0x28]
   1e069:	mov    r9,QWORD PTR [rsp+0x50]
   1e06e:	jne    1e280 <P7OptimalAccuracyTrace+0x6e0>
   1e074:	test   ebx,ebx
   1e076:	jle    1e280 <P7OptimalAccuracyTrace+0x6e0>
   1e07c:	cmp    r15d,0x1
   1e080:	jle    1e280 <P7OptimalAccuracyTrace+0x6e0>
   1e086:	mov    rax,QWORD PTR [rsp+0x60]
   1e08b:	mov    rax,QWORD PTR [rax+0x8]
   1e08f:	mov    BYTE PTR [rax+r14*1],0x2
   1e094:	jmp    1df64 <P7OptimalAccuracyTrace+0x3c4>
   1e099:	nop    DWORD PTR [rax+0x0]
   1e0a0:	mov    rax,QWORD PTR [rsp+0x20]
   1e0a5:	movsxd r13,ebx
   1e0a8:	movsxd rcx,r15d
   1e0ab:	add    r13,0x1
   1e0af:	mov    QWORD PTR [rsp+0x28],rcx
   1e0b4:	mov    rax,QWORD PTR [rax+r13*8]
   1e0b8:	lea    r9,[r13*8+0x0]
   1e0c0:	mov    QWORD PTR [rsp+0x40],r9
   1e0c5:	mov    ebp,DWORD PTR [rax+rcx*4]
   1e0c8:	mov    rax,QWORD PTR [rsp+0x8]
   1e0cd:	mov    rax,QWORD PTR [rax+0x10]
   1e0d1:	mov    rax,QWORD PTR [rax+r13*8]
   1e0d5:	mov    esi,DWORD PTR [rax+rcx*4]
   1e0d8:	mov    rax,QWORD PTR [rsp+0x18]
   1e0dd:	mov    rax,QWORD PTR [rax+r9*1-0x8]
   1e0e2:	mov    edi,DWORD PTR [rax+rcx*4]
   1e0e5:	call   179b0 <ILogsum>
   1e0ea:	mov    rcx,QWORD PTR [rsp+0x28]
   1e0ef:	mov    r9,QWORD PTR [rsp+0x40]
   1e0f4:	cmp    eax,ebp
   1e0f6:	jne    1e1c0 <P7OptimalAccuracyTrace+0x620>
   1e0fc:	test   ebx,ebx
   1e0fe:	jle    1dca8 <P7OptimalAccuracyTrace+0x108>
   1e104:	test   r15d,r15d
   1e107:	jle    1dca8 <P7OptimalAccuracyTrace+0x108>
   1e10d:	mov    rax,QWORD PTR [rsp+0x60]
   1e112:	mov    rax,QWORD PTR [rax+0x8]
   1e116:	mov    BYTE PTR [rax+r14*1],0x1
   1e11b:	mov    rdi,QWORD PTR [rsp+0x60]
   1e120:	mov    rax,QWORD PTR [rdi+0x10]
   1e124:	mov    DWORD PTR [rax+r14*4],r15d
   1e128:	mov    rax,QWORD PTR [rdi+0x18]
   1e12c:	sub    r15d,0x1
   1e130:	mov    DWORD PTR [rax+r14*4],ebx
   1e134:	sub    ebx,0x1
   1e137:	jmp    1dce3 <P7OptimalAccuracyTrace+0x143>
   1e13c:	nop    DWORD PTR [rax+0x0]
   1e140:	mov    rsi,QWORD PTR [rsp+0x10]
   1e145:	movsxd rax,ebx
   1e148:	mov    rax,QWORD PTR [rsi+rax*8]
   1e14c:	mov    esi,DWORD PTR [rax]
   1e14e:	cmp    esi,DWORD PTR [rax+0x10]
   1e151:	je     1e2c0 <P7OptimalAccuracyTrace+0x720>
   1e157:	cmp    esi,DWORD PTR [rax+0xc]
   1e15a:	jne    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1e160:	mov    BYTE PTR [rcx+r14*1],0xa
   1e165:	jmp    1dda1 <P7OptimalAccuracyTrace+0x201>
   1e16a:	nop    WORD PTR [rax+rax*1+0x0]
   1e170:	mov    BYTE PTR [rcx+r14*1],0x1
   1e175:	mov    rdi,QWORD PTR [rsp+0x60]
   1e17a:	mov    rax,QWORD PTR [rdi+0x10]
   1e17e:	mov    rcx,QWORD PTR [rdi+0x18]
   1e182:	mov    DWORD PTR [rax+r14*4],r9d
   1e186:	lea    eax,[rbx-0x1]
   1e189:	mov    DWORD PTR [rcx+r14*4],ebx
   1e18d:	mov    ebx,eax
   1e18f:	test   r15d,r15d
   1e192:	jne    1dce3 <P7OptimalAccuracyTrace+0x143>
   1e198:	jmp    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1e19d:	nop    DWORD PTR [rax]
   1e1a0:	mov    rax,QWORD PTR [rsp+0x10]
   1e1a5:	mov    rax,QWORD PTR [rax]
   1e1a8:	cmp    DWORD PTR [rax+0x10],0xc521974f
   1e1af:	jne    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1e1b5:	mov    BYTE PTR [rcx+r14*1],0x4
   1e1ba:	jmp    1dda1 <P7OptimalAccuracyTrace+0x201>
   1e1bf:	nop
   1e1c0:	mov    rax,QWORD PTR [rsp+0x8]
   1e1c5:	mov    rax,QWORD PTR [rax+0x10]
   1e1c9:	mov    rax,QWORD PTR [rax+r13*8]
   1e1cd:	mov    esi,DWORD PTR [rax+rcx*4]
   1e1d0:	mov    rax,QWORD PTR [rsp+0x20]
   1e1d5:	mov    rax,QWORD PTR [rax+r9*1-0x8]
   1e1da:	mov    edi,DWORD PTR [rax+rcx*4]
   1e1dd:	call   179b0 <ILogsum>
   1e1e2:	cmp    eax,ebp
   1e1e4:	jne    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1e1ea:	test   ebx,ebx
   1e1ec:	jle    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1e1f2:	test   r15d,r15d
   1e1f5:	jg     1e24e <P7OptimalAccuracyTrace+0x6ae>
   1e1f7:	jmp    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1e1fc:	nop    DWORD PTR [rax+0x0]
   1e200:	mov    rax,QWORD PTR [rsp+0x8]
   1e205:	mov    rcx,QWORD PTR [rsp+0x40]
   1e20a:	mov    QWORD PTR [rsp+0x50],r9
   1e20f:	mov    rax,QWORD PTR [rax+0x8]
   1e213:	mov    rax,QWORD PTR [rax+r9*8]
   1e217:	mov    esi,DWORD PTR [rax+r13*4]
   1e21b:	mov    rax,QWORD PTR [rsp+0x20]
   1e220:	mov    rax,QWORD PTR [rax+rbp*1-0x8]
   1e225:	mov    edi,DWORD PTR [rax+rcx*1-0x4]
   1e229:	call   179b0 <ILogsum>
   1e22e:	cmp    eax,DWORD PTR [rsp+0x28]
   1e232:	mov    r9,QWORD PTR [rsp+0x50]
   1e237:	jne    1e037 <P7OptimalAccuracyTrace+0x497>
   1e23d:	test   ebx,ebx
   1e23f:	jle    1e037 <P7OptimalAccuracyTrace+0x497>
   1e245:	test   r15d,r15d
   1e248:	jle    1e037 <P7OptimalAccuracyTrace+0x497>
   1e24e:	mov    rax,QWORD PTR [rsp+0x60]
   1e253:	mov    rax,QWORD PTR [rax+0x8]
   1e257:	mov    BYTE PTR [rax+r14*1],0x3
   1e25c:	mov    rdi,QWORD PTR [rsp+0x60]
   1e261:	mov    rax,QWORD PTR [rdi+0x10]
   1e265:	mov    DWORD PTR [rax+r14*4],r15d
   1e269:	mov    rax,QWORD PTR [rdi+0x18]
   1e26d:	mov    DWORD PTR [rax+r14*4],ebx
   1e271:	sub    ebx,0x1
   1e274:	jmp    1dce3 <P7OptimalAccuracyTrace+0x143>
   1e279:	nop    DWORD PTR [rax+0x0]
   1e280:	mov    rax,QWORD PTR [rsp+0x8]
   1e285:	mov    rax,QWORD PTR [rax+0x8]
   1e289:	mov    rax,QWORD PTR [rax+r9*8]
   1e28d:	mov    esi,DWORD PTR [rax+r13*4]
   1e291:	mov    rax,QWORD PTR [rsp+0x10]
   1e296:	mov    rax,QWORD PTR [rax+rbp*1-0x8]
   1e29b:	mov    edi,DWORD PTR [rax]
   1e29d:	call   179b0 <ILogsum>
   1e2a2:	cmp    eax,DWORD PTR [rsp+0x28]
   1e2a6:	jne    1dcd0 <P7OptimalAccuracyTrace+0x130>
   1e2ac:	mov    rax,QWORD PTR [rsp+0x60]
   1e2b1:	mov    rax,QWORD PTR [rax+0x8]
   1e2b5:	mov    BYTE PTR [rax+r14*1],0x6
   1e2ba:	jmp    1dda1 <P7OptimalAccuracyTrace+0x201>
   1e2bf:	nop
   1e2c0:	mov    BYTE PTR [rcx+r14*1],0x5
   1e2c5:	jmp    1dda1 <P7OptimalAccuracyTrace+0x201>
   1e2ca:	nop    WORD PTR [rax+rax*1+0x0]
   1e2d0:	test   ebx,ebx
   1e2d2:	jle    1df4a <P7OptimalAccuracyTrace+0x3aa>
   1e2d8:	test   r15d,r15d
   1e2db:	jle    1df4a <P7OptimalAccuracyTrace+0x3aa>
   1e2e1:	mov    BYTE PTR [rcx+r14*1],0x1
   1e2e6:	jmp    1e11b <P7OptimalAccuracyTrace+0x57b>
   1e2eb:	nop    DWORD PTR [rax+rax*1+0x0]
   1e2f0:	mov    rax,QWORD PTR [rsp+0x60]
   1e2f5:	mov    rax,QWORD PTR [rax+0x8]
   1e2f9:	mov    BYTE PTR [rax+r14*1],0xa
   1e2fe:	mov    rdi,QWORD PTR [rsp+0x60]
   1e303:	mov    rax,QWORD PTR [rdi+0x10]
   1e307:	mov    DWORD PTR [rax+r14*4],0x0
   1e30f:	mov    rax,QWORD PTR [rdi+0x18]
   1e313:	mov    DWORD PTR [rax+r14*4-0x4],ebx
   1e318:	sub    ebx,0x1
   1e31b:	mov    DWORD PTR [rax+r14*4],0x0
   1e323:	jmp    1dce3 <P7OptimalAccuracyTrace+0x143>
   1e328:	nop    DWORD PTR [rax+rax*1+0x0]
   1e330:	mov    rax,QWORD PTR [rsp+0x60]
   1e335:	mov    rax,QWORD PTR [rax+0x8]
   1e339:	mov    BYTE PTR [rax+r14*1],0x8
   1e33e:	jmp    1e2fe <P7OptimalAccuracyTrace+0x75e>
   1e340:	mov    r14d,0x2
   1e346:	jmp    1dd04 <P7OptimalAccuracyTrace+0x164>
   1e34b:	call   3570 <__stack_chk_fail@plt>

000000000001e350 <P7FillOptimalAccuracy>:
   1e350:	endbr64 
   1e354:	push   r15
   1e356:	mov    r15,rdx
   1e359:	push   r14
   1e35b:	push   r13
   1e35d:	push   r12
   1e35f:	push   rbp
   1e360:	push   rbx
   1e361:	sub    rsp,0x78
   1e365:	mov    r9,QWORD PTR [rcx+0x8]
   1e369:	mov    r10,QWORD PTR [rcx+0x10]
   1e36d:	mov    QWORD PTR [rsp+0x58],rcx
   1e372:	mov    r13,QWORD PTR [rcx+0x18]
   1e376:	mov    DWORD PTR [rsp+0x44],edi
   1e37a:	mov    DWORD PTR [rsp+0x40],esi
   1e37e:	mov    QWORD PTR [rsp+0x50],r8
   1e383:	mov    rdx,QWORD PTR fs:0x28
   1e38c:	mov    QWORD PTR [rsp+0x68],rdx
   1e391:	xor    edx,edx
   1e393:	mov    rdx,QWORD PTR [rcx]
   1e396:	movabs rcx,0xc521974fc521974f
   1e3a0:	mov    rax,QWORD PTR [rdx]
   1e3a3:	mov    QWORD PTR [rsp+0x48],rdx
   1e3a8:	mov    QWORD PTR [rax],rcx
   1e3ab:	mov    QWORD PTR [rax+0x8],rcx
   1e3af:	mov    DWORD PTR [rax+0x10],0xc521974f
   1e3b6:	test   esi,esi
   1e3b8:	js     1e3f7 <P7FillOptimalAccuracy+0xa7>
   1e3ba:	movsxd rax,DWORD PTR [rsp+0x40]
   1e3bf:	mov    r8,QWORD PTR [r13+0x0]
   1e3c3:	mov    rdi,QWORD PTR [r10]
   1e3c6:	mov    rsi,QWORD PTR [r9]
   1e3c9:	lea    rcx,[rax*4+0x4]
   1e3d1:	xor    eax,eax
   1e3d3:	nop    DWORD PTR [rax+rax*1+0x0]
   1e3d8:	mov    DWORD PTR [r8+rax*1],0xc521974f
   1e3e0:	mov    DWORD PTR [rdi+rax*1],0xc521974f
   1e3e7:	mov    DWORD PTR [rsi+rax*1],0xc521974f
   1e3ee:	add    rax,0x4
   1e3f2:	cmp    rcx,rax
   1e3f5:	jne    1e3d8 <P7FillOptimalAccuracy+0x88>
   1e3f7:	mov    esi,DWORD PTR [rsp+0x44]
   1e3fb:	test   esi,esi
   1e3fd:	jle    1e703 <P7FillOptimalAccuracy+0x3b3>
   1e403:	lea    rax,[r13+0x8]
   1e407:	lea    rbp,[r9+0x8]
   1e40b:	mov    r13,r15
   1e40e:	mov    QWORD PTR [rsp+0x10],rax
   1e413:	mov    rax,QWORD PTR [rsp+0x48]
   1e418:	lea    r12,[rax+0x8]
   1e41c:	mov    eax,DWORD PTR [rsp+0x44]
   1e420:	mov    r15,r12
   1e423:	mov    r12,r10
   1e426:	sub    eax,0x1
   1e429:	lea    rax,[r10+rax*8]
   1e42d:	mov    QWORD PTR [rsp+0x28],rax
   1e432:	mov    eax,DWORD PTR [rsp+0x40]
   1e436:	lea    r14d,[rax-0x1]
   1e43a:	mov    eax,0x8
   1e43f:	lea    rcx,[r14*4+0x0]
   1e447:	sub    rax,r10
   1e44a:	mov    r14,rbp
   1e44d:	mov    QWORD PTR [rsp+0x30],rax
   1e452:	lea    rax,[rcx+0x8]
   1e456:	mov    QWORD PTR [rsp+0x20],rcx
   1e45b:	mov    QWORD PTR [rsp+0x38],rax
   1e460:	mov    rax,QWORD PTR [rsp+0x30]
   1e465:	mov    rdx,QWORD PTR [r14]
   1e468:	mov    ecx,DWORD PTR [rsp+0x40]
   1e46c:	add    rax,r12
   1e46f:	mov    QWORD PTR [rsp+0x8],rax
   1e474:	mov    rax,QWORD PTR [rsp+0x10]
   1e479:	mov    rax,QWORD PTR [rax]
   1e47c:	mov    DWORD PTR [rax],0xc521974f
   1e482:	mov    rax,QWORD PTR [r12+0x8]
   1e487:	mov    DWORD PTR [rax],0xc521974f
   1e48d:	mov    DWORD PTR [rdx],0xc521974f
   1e493:	test   ecx,ecx
   1e495:	jle    1e5c0 <P7FillOptimalAccuracy+0x270>
   1e49b:	mov    rbp,r13
   1e49e:	xor    ebx,ebx
   1e4a0:	mov    r13,r12
   1e4a3:	mov    rcx,r15
   1e4a6:	mov    r12,r14
   1e4a9:	mov    r14,rdx
   1e4ac:	jmp    1e4b7 <P7FillOptimalAccuracy+0x167>
   1e4ae:	xchg   ax,ax
   1e4b0:	mov    r14,QWORD PTR [r12]
   1e4b4:	mov    rbx,r15
   1e4b7:	mov    rax,QWORD PTR [r12-0x8]
   1e4bc:	lea    r15,[rbx+0x4]
   1e4c0:	mov    rdx,QWORD PTR [rsp+0x10]
   1e4c5:	mov    QWORD PTR [rsp+0x18],rcx
   1e4ca:	add    r14,r15
   1e4cd:	mov    rsi,QWORD PTR [rsp+0x8]
   1e4d2:	mov    DWORD PTR [r14],0xc521974f
   1e4d9:	mov    edi,DWORD PTR [rax+rbx*1]
   1e4dc:	mov    eax,0xc521974f
   1e4e1:	cmp    edi,0xc521974f
   1e4e7:	cmovle edi,eax
   1e4ea:	mov    DWORD PTR [r14],edi
   1e4ed:	mov    rax,QWORD PTR [r13+0x0]
   1e4f1:	cmp    DWORD PTR [rax+rbx*1],edi
   1e4f4:	cmovge edi,DWORD PTR [rax+rbx*1]
   1e4f8:	mov    DWORD PTR [r14],edi
   1e4fb:	mov    rax,QWORD PTR [rdx-0x8]
   1e4ff:	cmp    DWORD PTR [rax+rbx*1],edi
   1e502:	cmovge edi,DWORD PTR [rax+rbx*1]
   1e506:	mov    DWORD PTR [r14],edi
   1e509:	mov    rax,QWORD PTR [rcx-0x8]
   1e50d:	cmp    DWORD PTR [rax],edi
   1e50f:	cmovge edi,DWORD PTR [rax]
   1e512:	mov    DWORD PTR [r14],edi
   1e515:	mov    rax,QWORD PTR [rbp+0x8]
   1e519:	mov    rax,QWORD PTR [rax+rsi*1]
   1e51d:	mov    esi,DWORD PTR [rax+rbx*1+0x4]
   1e521:	call   179b0 <ILogsum>
   1e526:	mov    rdx,QWORD PTR [rsp+0x10]
   1e52b:	mov    ecx,0xc521974f
   1e530:	mov    DWORD PTR [r14],eax
   1e533:	mov    rax,QWORD PTR [r12]
   1e537:	mov    rdx,QWORD PTR [rdx]
   1e53a:	lea    rsi,[rdx+r15*1]
   1e53e:	mov    DWORD PTR [rsi],0xc521974f
   1e544:	mov    eax,DWORD PTR [rax+rbx*1]
   1e547:	cmp    eax,0xc521974f
   1e54c:	cmovle eax,ecx
   1e54f:	cmp    DWORD PTR [rdx+rbx*1],eax
   1e552:	cmovge eax,DWORD PTR [rdx+rbx*1]
   1e556:	mov    DWORD PTR [rsi],eax
   1e558:	mov    r14,QWORD PTR [r13+0x8]
   1e55c:	mov    rax,QWORD PTR [r12-0x8]
   1e561:	mov    rsi,QWORD PTR [rsp+0x8]
   1e566:	add    r14,r15
   1e569:	mov    DWORD PTR [r14],0xc521974f
   1e570:	mov    edi,DWORD PTR [rax+rbx*1+0x4]
   1e574:	cmp    edi,0xc521974f
   1e57a:	cmovle edi,ecx
   1e57d:	mov    DWORD PTR [r14],edi
   1e580:	mov    rax,QWORD PTR [r13+0x0]
   1e584:	cmp    DWORD PTR [rax+rbx*1+0x4],edi
   1e588:	cmovge edi,DWORD PTR [rax+rbx*1+0x4]
   1e58d:	mov    DWORD PTR [r14],edi
   1e590:	mov    rax,QWORD PTR [rbp+0x10]
   1e594:	mov    rax,QWORD PTR [rax+rsi*1]
   1e598:	mov    esi,DWORD PTR [rax+rbx*1+0x4]
   1e59c:	call   179b0 <ILogsum>
   1e5a1:	cmp    QWORD PTR [rsp+0x20],rbx
   1e5a6:	mov    rcx,QWORD PTR [rsp+0x18]
   1e5ab:	mov    DWORD PTR [r14],eax
   1e5ae:	jne    1e4b0 <P7FillOptimalAccuracy+0x160>
   1e5b4:	mov    r14,r12
   1e5b7:	mov    r15,rcx
   1e5ba:	mov    r12,r13
   1e5bd:	mov    r13,rbp
   1e5c0:	mov    rax,QWORD PTR [r15]
   1e5c3:	mov    rdx,QWORD PTR [rsp+0x8]
   1e5c8:	mov    DWORD PTR [rax+0x10],0xc521974f
   1e5cf:	mov    rax,QWORD PTR [r13+0x0]
   1e5d3:	mov    rax,QWORD PTR [rax+rdx*1]
   1e5d7:	mov    esi,DWORD PTR [rax+0x10]
   1e5da:	mov    rax,QWORD PTR [r15-0x8]
   1e5de:	mov    edi,DWORD PTR [rax+0x10]
   1e5e1:	call   179b0 <ILogsum>
   1e5e6:	mov    rsi,QWORD PTR [r15]
   1e5e9:	cmp    eax,0xc5219750
   1e5ee:	jl     1e5f3 <P7FillOptimalAccuracy+0x2a3>
   1e5f0:	mov    DWORD PTR [rsi+0x10],eax
   1e5f3:	mov    eax,DWORD PTR [rsp+0x40]
   1e5f7:	mov    DWORD PTR [rsi+0x4],0xc521974f
   1e5fe:	test   eax,eax
   1e600:	jle    1e62d <P7FillOptimalAccuracy+0x2dd>
   1e602:	mov    rdi,QWORD PTR [r14]
   1e605:	mov    ecx,0xc521974f
   1e60a:	lea    rax,[rdi+0x4]
   1e60e:	add    rdi,QWORD PTR [rsp+0x38]
   1e613:	jmp    1e61b <P7FillOptimalAccuracy+0x2cb>
   1e615:	nop    DWORD PTR [rax]
   1e618:	mov    ecx,DWORD PTR [rsi+0x4]
   1e61b:	mov    edx,DWORD PTR [rax]
   1e61d:	cmp    edx,ecx
   1e61f:	jle    1e624 <P7FillOptimalAccuracy+0x2d4>
   1e621:	mov    DWORD PTR [rsi+0x4],edx
   1e624:	add    rax,0x4
   1e628:	cmp    rdi,rax
   1e62b:	jne    1e618 <P7FillOptimalAccuracy+0x2c8>
   1e62d:	mov    rdx,QWORD PTR [rsp+0x8]
   1e632:	mov    rax,QWORD PTR [r13+0x0]
   1e636:	mov    DWORD PTR [rsi+0xc],0xc521974f
   1e63d:	mov    rax,QWORD PTR [rax+rdx*1]
   1e641:	mov    esi,DWORD PTR [rax+0xc]
   1e644:	mov    rax,QWORD PTR [r15-0x8]
   1e648:	mov    edi,DWORD PTR [rax+0xc]
   1e64b:	call   179b0 <ILogsum>
   1e650:	mov    rdx,QWORD PTR [r15]
   1e653:	cmp    eax,0xc5219750
   1e658:	jge    1e6f0 <P7FillOptimalAccuracy+0x3a0>
   1e65e:	mov    eax,DWORD PTR [rdx+0xc]
   1e661:	mov    ecx,DWORD PTR [rdx+0x4]
   1e664:	cmp    ecx,eax
   1e666:	jle    1e66b <P7FillOptimalAccuracy+0x31b>
   1e668:	mov    DWORD PTR [rdx+0xc],ecx
   1e66b:	mov    eax,DWORD PTR [rdx+0x10]
   1e66e:	mov    ecx,0xc521974f
   1e673:	mov    DWORD PTR [rdx+0x8],0xc521974f
   1e67a:	cmp    eax,0xc521974f
   1e67f:	cmovle eax,ecx
   1e682:	mov    ecx,DWORD PTR [rdx+0xc]
   1e685:	cmp    eax,ecx
   1e687:	cmovl  eax,ecx
   1e68a:	mov    DWORD PTR [rdx],eax
   1e68c:	mov    rdx,QWORD PTR [rsp+0x8]
   1e691:	mov    rax,QWORD PTR [r13+0x0]
   1e695:	mov    rax,QWORD PTR [rax+rdx*1]
   1e699:	mov    esi,DWORD PTR [rax+0x8]
   1e69c:	mov    rax,QWORD PTR [r15-0x8]
   1e6a0:	mov    edi,DWORD PTR [rax+0x8]
   1e6a3:	call   179b0 <ILogsum>
   1e6a8:	mov    rdx,QWORD PTR [r15]
   1e6ab:	cmp    eax,0xc5219750
   1e6b0:	jge    1e6e8 <P7FillOptimalAccuracy+0x398>
   1e6b2:	mov    eax,DWORD PTR [rdx+0x8]
   1e6b5:	mov    ecx,DWORD PTR [rdx+0x4]
   1e6b8:	cmp    ecx,eax
   1e6ba:	jle    1e6bf <P7FillOptimalAccuracy+0x36f>
   1e6bc:	mov    DWORD PTR [rdx+0x8],ecx
   1e6bf:	add    QWORD PTR [rsp+0x10],0x8
   1e6c5:	lea    rax,[r12+0x8]
   1e6ca:	add    r14,0x8
   1e6ce:	add    r15,0x8
   1e6d2:	cmp    r12,QWORD PTR [rsp+0x28]
   1e6d7:	je     1e700 <P7FillOptimalAccuracy+0x3b0>
   1e6d9:	mov    r12,rax
   1e6dc:	jmp    1e460 <P7FillOptimalAccuracy+0x110>
   1e6e1:	nop    DWORD PTR [rax+0x0]
   1e6e8:	mov    DWORD PTR [rdx+0x8],eax
   1e6eb:	jmp    1e6b5 <P7FillOptimalAccuracy+0x365>
   1e6ed:	nop    DWORD PTR [rax]
   1e6f0:	mov    DWORD PTR [rdx+0xc],eax
   1e6f3:	jmp    1e661 <P7FillOptimalAccuracy+0x311>
   1e6f8:	nop    DWORD PTR [rax+rax*1+0x0]
   1e700:	mov    r15,r13
   1e703:	movsxd rax,DWORD PTR [rsp+0x44]
   1e708:	mov    rdx,QWORD PTR [rsp+0x48]
   1e70d:	cmp    QWORD PTR [rsp+0x50],0x0
   1e713:	mov    rax,QWORD PTR [rdx+rax*8]
   1e717:	mov    ebp,DWORD PTR [rax+0x8]
   1e71a:	je     1e743 <P7FillOptimalAccuracy+0x3f3>
   1e71c:	mov    esi,DWORD PTR [rsp+0x40]
   1e720:	mov    edi,DWORD PTR [rsp+0x44]
   1e724:	mov    rdx,r15
   1e727:	lea    r8,[rsp+0x60]
   1e72c:	mov    rcx,QWORD PTR [rsp+0x58]
   1e731:	call   1dba0 <P7OptimalAccuracyTrace>
   1e736:	mov    rax,QWORD PTR [rsp+0x60]
   1e73b:	mov    rdx,QWORD PTR [rsp+0x50]
   1e740:	mov    QWORD PTR [rdx],rax
   1e743:	movss  xmm0,DWORD PTR [rip+0x1ec51]        # 3d39c <_IO_stdin_used+0x39c>
   1e74b:	mov    edi,ebp
   1e74d:	call   177c0 <Score2Prob>
   1e752:	mov    rax,QWORD PTR [rsp+0x68]
   1e757:	xor    rax,QWORD PTR fs:0x28
   1e760:	jne    1e771 <P7FillOptimalAccuracy+0x421>
   1e762:	add    rsp,0x78
   1e766:	pop    rbx
   1e767:	pop    rbp
   1e768:	pop    r12
   1e76a:	pop    r13
   1e76c:	pop    r14
   1e76e:	pop    r15
   1e770:	ret    
   1e771:	call   3570 <__stack_chk_fail@plt>
   1e776:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001e780 <P7OptimalAccuracy>:
   1e780:	endbr64 
   1e784:	push   r13
   1e786:	mov    r13,rcx
   1e789:	push   r12
   1e78b:	mov    r12,rdi
   1e78e:	push   rbp
   1e78f:	mov    ebp,esi
   1e791:	push   rbx
   1e792:	mov    rbx,rdx
   1e795:	sub    rsp,0x38
   1e799:	mov    rax,QWORD PTR fs:0x28
   1e7a2:	mov    QWORD PTR [rsp+0x28],rax
   1e7a7:	xor    eax,eax
   1e7a9:	lea    rcx,[rsp+0x18]
   1e7ae:	call   5c20 <P7Forward>
   1e7b3:	lea    rcx,[rsp+0x20]
   1e7b8:	mov    rdx,rbx
   1e7bb:	mov    esi,ebp
   1e7bd:	mov    rdi,r12
   1e7c0:	call   1d2e0 <P7Backward>
   1e7c5:	mov    rcx,QWORD PTR [rsp+0x20]
   1e7ca:	mov    rsi,rbx
   1e7cd:	mov    edi,ebp
   1e7cf:	mov    rdx,QWORD PTR [rsp+0x18]
   1e7d4:	mov    r8,rcx
   1e7d7:	call   1d840 <P7EmitterPosterior>
   1e7dc:	mov    esi,DWORD PTR [rbx+0x88]
   1e7e2:	mov    r8,r13
   1e7e5:	mov    edi,ebp
   1e7e7:	mov    rcx,QWORD PTR [rsp+0x18]
   1e7ec:	mov    rdx,QWORD PTR [rsp+0x20]
   1e7f1:	call   1e350 <P7FillOptimalAccuracy>
   1e7f6:	mov    rdi,QWORD PTR [rsp+0x18]
   1e7fb:	movss  DWORD PTR [rsp+0xc],xmm0
   1e801:	call   5810 <FreePlan7Matrix>
   1e806:	mov    rdi,QWORD PTR [rsp+0x20]
   1e80b:	call   5810 <FreePlan7Matrix>
   1e810:	movss  xmm0,DWORD PTR [rsp+0xc]
   1e816:	mov    rax,QWORD PTR [rsp+0x28]
   1e81b:	xor    rax,QWORD PTR fs:0x28
   1e824:	jne    1e831 <P7OptimalAccuracy+0xb1>
   1e826:	add    rsp,0x38
   1e82a:	pop    rbx
   1e82b:	pop    rbp
   1e82c:	pop    r12
   1e82e:	pop    r13
   1e830:	ret    
   1e831:	call   3570 <__stack_chk_fail@plt>
   1e836:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001e840 <PostalCode>:
   1e840:	endbr64 
   1e844:	push   r15
   1e846:	mov    r15,rdx
   1e849:	push   r14
   1e84b:	movsxd r14,edi
   1e84e:	lea    rdi,[rip+0x21137]        # 3f98c <xpam120+0xc2c>
   1e855:	push   r13
   1e857:	lea    edx,[r14+0x1]
   1e85b:	mov    r13,rsi
   1e85e:	mov    esi,0x2b4
   1e863:	push   r12
   1e865:	movsxd rdx,edx
   1e868:	push   rbp
   1e869:	push   rbx
   1e86a:	sub    rsp,0x18
   1e86e:	call   36810 <sre_malloc>
   1e873:	mov    r12,rax
   1e876:	mov    eax,DWORD PTR [r15]
   1e879:	test   eax,eax
   1e87b:	jle    1e90f <PostalCode+0xcf>
   1e881:	xor    ebx,ebx
   1e883:	lea    rbp,[rip+0x2113a]        # 3f9c4 <xpam120+0xc64>
   1e88a:	nop    WORD PTR [rax+rax*1+0x0]
   1e890:	mov    rax,QWORD PTR [r15+0x18]
   1e894:	movsxd rax,DWORD PTR [rax+rbx*4]
   1e898:	test   eax,eax
   1e89a:	je     1e906 <PostalCode+0xc6>
   1e89c:	mov    rdx,QWORD PTR [r15+0x10]
   1e8a0:	movsxd rcx,DWORD PTR [rdx+rbx*4]
   1e8a4:	mov    rdx,QWORD PTR [r15+0x8]
   1e8a8:	cmp    BYTE PTR [rdx+rbx*1],0xa
   1e8ac:	ja     1e906 <PostalCode+0xc6>
   1e8ae:	movzx  edx,BYTE PTR [rdx+rbx*1]
   1e8b2:	movsxd rdx,DWORD PTR [rbp+rdx*4+0x0]
   1e8b7:	add    rdx,rbp
   1e8ba:	notrack jmp rdx
   1e8bd:	nop    DWORD PTR [rax]
   1e8c0:	mov    rdx,QWORD PTR [r13+0x0]
   1e8c4:	lea    rcx,[r12+rax*1-0x1]
   1e8c9:	mov    QWORD PTR [rsp+0x8],rcx
   1e8ce:	mov    rax,QWORD PTR [rdx+rax*8]
   1e8d2:	mov    edi,DWORD PTR [rax+0xc]
   1e8d5:	movss  xmm0,DWORD PTR [rip+0x1eabf]        # 3d39c <_IO_stdin_used+0x39c>
   1e8dd:	call   177c0 <Score2Prob>
   1e8e2:	mov    rcx,QWORD PTR [rsp+0x8]
   1e8e7:	cvtss2sd xmm0,xmm0
   1e8eb:	mulsd  xmm0,QWORD PTR [rip+0x203ad]        # 3eca0 <_IO_stdin_used+0x1ca0>
   1e8f3:	cvttsd2si eax,xmm0
   1e8f7:	lea    edx,[rax+0x30]
   1e8fa:	cmp    al,0xa
   1e8fc:	mov    eax,0x2a
   1e901:	cmovl  eax,edx
   1e904:	mov    BYTE PTR [rcx],al
   1e906:	add    rbx,0x1
   1e90a:	cmp    DWORD PTR [r15],ebx
   1e90d:	jg     1e890 <PostalCode+0x50>
   1e90f:	mov    BYTE PTR [r12+r14*1],0x0
   1e914:	add    rsp,0x18
   1e918:	mov    rax,r12
   1e91b:	pop    rbx
   1e91c:	pop    rbp
   1e91d:	pop    r12
   1e91f:	pop    r13
   1e921:	pop    r14
   1e923:	pop    r15
   1e925:	ret    
   1e926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e930:	mov    rdx,QWORD PTR [r13+0x0]
   1e934:	lea    rcx,[r12+rax*1-0x1]
   1e939:	mov    QWORD PTR [rsp+0x8],rcx
   1e93e:	mov    rax,QWORD PTR [rdx+rax*8]
   1e942:	mov    edi,DWORD PTR [rax+0x8]
   1e945:	jmp    1e8d5 <PostalCode+0x95>
   1e947:	nop    WORD PTR [rax+rax*1+0x0]
   1e950:	mov    rdx,QWORD PTR [r13+0x0]
   1e954:	lea    rcx,[r12+rax*1-0x1]
   1e959:	mov    QWORD PTR [rsp+0x8],rcx
   1e95e:	mov    rax,QWORD PTR [rdx+rax*8]
   1e962:	mov    edi,DWORD PTR [rax+0x10]
   1e965:	jmp    1e8d5 <PostalCode+0x95>
   1e96a:	nop    WORD PTR [rax+rax*1+0x0]
   1e970:	lea    rsi,[r12+rax*1-0x1]
   1e975:	mov    rdx,QWORD PTR [r13+0x10]
   1e979:	mov    QWORD PTR [rsp+0x8],rsi
   1e97e:	mov    rax,QWORD PTR [rdx+rax*8]
   1e982:	movss  xmm0,DWORD PTR [rip+0x1ea12]        # 3d39c <_IO_stdin_used+0x39c>
   1e98a:	mov    edi,DWORD PTR [rax+rcx*4]
   1e98d:	call   177c0 <Score2Prob>
   1e992:	mov    rsi,QWORD PTR [rsp+0x8]
   1e997:	cvtss2sd xmm0,xmm0
   1e99b:	mulsd  xmm0,QWORD PTR [rip+0x202fd]        # 3eca0 <_IO_stdin_used+0x1ca0>
   1e9a3:	cvttsd2si eax,xmm0
   1e9a7:	cmp    al,0xa
   1e9a9:	lea    edx,[rax+0x30]
   1e9ac:	mov    eax,0x2a
   1e9b1:	cmovl  eax,edx
   1e9b4:	add    rbx,0x1
   1e9b8:	mov    BYTE PTR [rsi],al
   1e9ba:	cmp    DWORD PTR [r15],ebx
   1e9bd:	jg     1e890 <PostalCode+0x50>
   1e9c3:	jmp    1e90f <PostalCode+0xcf>
   1e9c8:	nop    DWORD PTR [rax+rax*1+0x0]
   1e9d0:	lea    rsi,[r12+rax*1-0x1]
   1e9d5:	mov    rdx,QWORD PTR [r13+0x8]
   1e9d9:	mov    QWORD PTR [rsp+0x8],rsi
   1e9de:	jmp    1e97e <PostalCode+0x13e>

000000000001e9e0 <P7AllocPrior>:
   1e9e0:	endbr64 
   1e9e4:	mov    edx,0x9c50
   1e9e9:	mov    esi,0x25
   1e9ee:	lea    rdi,[rip+0x20ffb]        # 3f9f0 <xpam120+0xc90>
   1e9f5:	jmp    36810 <sre_malloc>
   1e9fa:	nop    WORD PTR [rax+rax*1+0x0]

000000000001ea00 <P7FreePrior>:
   1ea00:	endbr64 
   1ea04:	jmp    3460 <free@plt>
   1ea09:	nop    DWORD PTR [rax+0x0]

000000000001ea10 <P7LaplacePrior>:
   1ea10:	endbr64 
   1ea14:	push   r12
   1ea16:	mov    edx,0x9c50
   1ea1b:	mov    esi,0x25
   1ea20:	lea    rdi,[rip+0x20fc9]        # 3f9f0 <xpam120+0xc90>
   1ea27:	push   rbx
   1ea28:	movabs rbx,0x3f80000000000001
   1ea32:	sub    rsp,0x8
   1ea36:	call   36810 <sre_malloc>
   1ea3b:	movss  xmm0,DWORD PTR [rip+0x1e959]        # 3d39c <_IO_stdin_used+0x39c>
   1ea43:	mov    esi,0x8
   1ea48:	mov    r12,rax
   1ea4b:	movabs rax,0x100000000
   1ea55:	mov    QWORD PTR [r12],rax
   1ea59:	lea    rdi,[r12+0x328]
   1ea61:	movss  DWORD PTR [r12+0x8],xmm0
   1ea68:	call   3ad60 <FSet>
   1ea6d:	mov    QWORD PTR [r12+0x1908],rbx
   1ea75:	movss  xmm0,DWORD PTR [rip+0x1e91f]        # 3d39c <_IO_stdin_used+0x39c>
   1ea7d:	lea    rdi,[r12+0x1c2c]
   1ea85:	mov    esi,DWORD PTR [rip+0x43875]        # 62300 <Alphabet_size>
   1ea8b:	call   3ad60 <FSet>
   1ea90:	mov    QWORD PTR [r12+0x5aac],rbx
   1ea98:	movss  xmm0,DWORD PTR [rip+0x1e8fc]        # 3d39c <_IO_stdin_used+0x39c>
   1eaa0:	lea    rdi,[r12+0x5dd0]
   1eaa8:	mov    esi,DWORD PTR [rip+0x43852]        # 62300 <Alphabet_size>
   1eaae:	call   3ad60 <FSet>
   1eab3:	add    rsp,0x8
   1eab7:	mov    rax,r12
   1eaba:	pop    rbx
   1eabb:	pop    r12
   1eabd:	ret    
   1eabe:	xchg   ax,ax

000000000001eac0 <P7DefaultPrior>:
   1eac0:	endbr64 
   1eac4:	push   r12
   1eac6:	push   rbx
   1eac7:	sub    rsp,0x8
   1eacb:	mov    eax,DWORD PTR [rip+0x435af]        # 62080 <Alphabet_type>
   1ead1:	cmp    eax,0x2
   1ead4:	je     1eaf8 <P7DefaultPrior+0x38>
   1ead6:	cmp    eax,0x3
   1ead9:	je     1ebe0 <P7DefaultPrior+0x120>
   1eadf:	test   eax,eax
   1eae1:	je     1ebc8 <P7DefaultPrior+0x108>
   1eae7:	xor    r12d,r12d
   1eaea:	add    rsp,0x8
   1eaee:	mov    rax,r12
   1eaf1:	pop    rbx
   1eaf2:	pop    r12
   1eaf4:	ret    
   1eaf5:	nop    DWORD PTR [rax]
   1eaf8:	mov    edx,0x9c50
   1eafd:	mov    esi,0x25
   1eb02:	lea    rdi,[rip+0x20ee7]        # 3f9f0 <xpam120+0xc90>
   1eb09:	movabs rbx,0x3f80000000000001
   1eb13:	call   36810 <sre_malloc>
   1eb18:	movss  xmm0,DWORD PTR [rip+0x1e87c]        # 3d39c <_IO_stdin_used+0x39c>
   1eb20:	mov    r12,rax
   1eb23:	movabs rax,0x100000000
   1eb2d:	mov    QWORD PTR [r12],rax
   1eb31:	mov    esi,DWORD PTR [rip+0x437c9]        # 62300 <Alphabet_size>
   1eb37:	movabs rax,0x3ce3bcd33f4b3d08
   1eb41:	lea    rdi,[r12+0x1c2c]
   1eb49:	mov    QWORD PTR [r12+0x328],rax
   1eb51:	movabs rax,0x3e1ed2893c5d2f1b
   1eb5b:	mov    QWORD PTR [r12+0x330],rax
   1eb63:	movabs rax,0x3f6673823e084b5e
   1eb6d:	mov    QWORD PTR [r12+0x338],rax
   1eb75:	mov    QWORD PTR [r12+0x1908],rbx
   1eb7d:	mov    DWORD PTR [r12+0x340],0x3f1020c5
   1eb89:	movss  DWORD PTR [r12+0x8],xmm0
   1eb90:	call   3ad60 <FSet>
   1eb95:	mov    QWORD PTR [r12+0x5aac],rbx
   1eb9d:	movss  xmm0,DWORD PTR [rip+0x1e7f7]        # 3d39c <_IO_stdin_used+0x39c>
   1eba5:	lea    rdi,[r12+0x5dd0]
   1ebad:	mov    esi,DWORD PTR [rip+0x4374d]        # 62300 <Alphabet_size>
   1ebb3:	call   3ad60 <FSet>
   1ebb8:	add    rsp,0x8
   1ebbc:	mov    rax,r12
   1ebbf:	pop    rbx
   1ebc0:	pop    r12
   1ebc2:	ret    
   1ebc3:	nop    DWORD PTR [rax+rax*1+0x0]
   1ebc8:	lea    rdi,[rip+0x20e99]        # 3fa68 <xpam120+0xd08>
   1ebcf:	xor    eax,eax
   1ebd1:	call   317f0 <Die>
   1ebd6:	jmp    1eae7 <P7DefaultPrior+0x27>
   1ebdb:	nop    DWORD PTR [rax+rax*1+0x0]
   1ebe0:	mov    edx,0x9c50
   1ebe5:	mov    esi,0x25
   1ebea:	lea    rdi,[rip+0x20dff]        # 3f9f0 <xpam120+0xc90>
   1ebf1:	call   36810 <sre_malloc>
   1ebf6:	lea    rdx,[rip+0x212e3]        # 3fee0 <defm.7319>
   1ebfd:	xor    ecx,ecx
   1ebff:	lea    rdi,[rip+0x215ba]        # 401c0 <defmq.7318>
   1ec06:	mov    r12,rax
   1ec09:	movss  xmm0,DWORD PTR [rip+0x215d3]        # 401e4 <defmq.7318+0x24>
   1ec11:	movabs rax,0x100000000
   1ec1b:	movss  xmm1,DWORD PTR [rip+0x215c5]        # 401e8 <defmq.7318+0x28>
   1ec23:	mov    QWORD PTR [r12],rax
   1ec27:	mov    rsi,r12
   1ec2a:	movabs rax,0x3ce3bcd33f4b3d08
   1ec34:	lea    r8,[rdx+0x2d0]
   1ec3b:	mov    QWORD PTR [r12+0x328],rax
   1ec43:	movabs rax,0x3e1ed2893c5d2f1b
   1ec4d:	mov    QWORD PTR [r12+0x330],rax
   1ec55:	movabs rax,0x3f6673823e084b5e
   1ec5f:	mov    DWORD PTR [r12+0x8],0x3f800000
   1ec68:	mov    QWORD PTR [r12+0x338],rax
   1ec70:	mov    DWORD PTR [r12+0x340],0x3f1020c5
   1ec7c:	mov    DWORD PTR [r12+0x1908],0x9
   1ec88:	nop    DWORD PTR [rax+rax*1+0x0]
   1ec90:	movss  DWORD PTR [r12+rcx*1+0x190c],xmm1
   1ec9a:	xor    eax,eax
   1ec9c:	jmp    1eca5 <P7DefaultPrior+0x1e5>
   1ec9e:	xchg   ax,ax
   1eca0:	movss  xmm0,DWORD PTR [rdx+rax*1]
   1eca5:	movss  DWORD PTR [rsi+rax*1+0x1c2c],xmm0
   1ecae:	add    rax,0x4
   1ecb2:	cmp    rax,0x50
   1ecb6:	jne    1eca0 <P7DefaultPrior+0x1e0>
   1ecb8:	add    rdx,0x50
   1ecbc:	add    rsi,0x50
   1ecc0:	add    rcx,0x4
   1ecc4:	cmp    rdx,r8
   1ecc7:	je     1ecd8 <P7DefaultPrior+0x218>
   1ecc9:	movss  xmm1,DWORD PTR [rdi+rcx*1]
   1ecce:	movss  xmm0,DWORD PTR [rdx]
   1ecd2:	jmp    1ec90 <P7DefaultPrior+0x1d0>
   1ecd4:	nop    DWORD PTR [rax+0x0]
   1ecd8:	movabs rax,0x3f80000000000001
   1ece2:	mov    QWORD PTR [r12+0x5aac],rax
   1ecea:	movabs rax,0x42f00000442a4000
   1ecf4:	mov    QWORD PTR [r12+0x5dd0],rax
   1ecfc:	movabs rax,0x4422c000441bc000
   1ed06:	mov    QWORD PTR [r12+0x5dd8],rax
   1ed0e:	movabs rax,0x44618000439c8000
   1ed18:	mov    QWORD PTR [r12+0x5de0],rax
   1ed20:	movabs rax,0x43b9800043710000
   1ed2a:	mov    QWORD PTR [r12+0x5de8],rax
   1ed32:	movabs rax,0x44290000442bc000
   1ed3c:	mov    QWORD PTR [r12+0x5df0],rax
   1ed44:	movabs rax,0x44090000430f0000
   1ed4e:	mov    QWORD PTR [r12+0x5df8],rax
   1ed56:	movabs rax,0x43cf80004421c000
   1ed60:	mov    QWORD PTR [r12+0x5e00],rax
   1ed68:	movabs rax,0x446780004409c000
   1ed72:	mov    QWORD PTR [r12+0x5e08],rax
   1ed7a:	movabs rax,0x43fc8000441bc000
   1ed84:	mov    QWORD PTR [r12+0x5e10],rax
   1ed8c:	movabs rax,0x4386800042cc0000
   1ed96:	mov    QWORD PTR [r12+0x5e18],rax
   1ed9e:	add    rsp,0x8
   1eda2:	mov    rax,r12
   1eda5:	pop    rbx
   1eda6:	pop    r12
   1eda8:	ret    
   1eda9:	nop    DWORD PTR [rax+0x0]

000000000001edb0 <P7ReadPrior>:
   1edb0:	endbr64 
   1edb4:	push   r14
   1edb6:	lea    rsi,[rip+0x22191]        # 40f4e <gki_primes+0x4ce>
   1edbd:	mov    r14,rdi
   1edc0:	push   r13
   1edc2:	push   r12
   1edc4:	push   rbp
   1edc5:	push   rbx
   1edc6:	call   3750 <fopen@plt>
   1edcb:	mov    rbp,rax
   1edce:	test   rax,rax
   1edd1:	je     1f1da <P7ReadPrior+0x42a>
   1edd7:	mov    edx,0x9c50
   1eddc:	mov    esi,0x25
   1ede1:	lea    rdi,[rip+0x20c08]        # 3f9f0 <xpam120+0xc90>
   1ede8:	call   36810 <sre_malloc>
   1eded:	mov    esi,0x4
   1edf2:	mov    rdi,rbp
   1edf5:	mov    r13,rax
   1edf8:	call   187a0 <Getword>
   1edfd:	mov    r12,rax
   1ee00:	mov    rdi,rax
   1ee03:	call   367e0 <s2upper>
   1ee08:	mov    ecx,0xa
   1ee0d:	lea    rdi,[rip+0x20be4]        # 3f9f8 <xpam120+0xc98>
   1ee14:	mov    rsi,r12
   1ee17:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1ee19:	seta   al
   1ee1c:	sbb    al,0x0
   1ee1e:	test   al,al
   1ee20:	jne    1f101 <P7ReadPrior+0x351>
   1ee26:	mov    DWORD PTR [r13+0x0],0x0
   1ee2e:	mov    esi,0x4
   1ee33:	mov    rdi,rbp
   1ee36:	call   187a0 <Getword>
   1ee3b:	mov    r12,rax
   1ee3e:	mov    rdi,rax
   1ee41:	call   367e0 <s2upper>
   1ee46:	mov    ecx,0x6
   1ee4b:	lea    rdi,[rip+0x1f01f]        # 3de71 <_IO_stdin_used+0xe71>
   1ee52:	mov    rsi,r12
   1ee55:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1ee57:	seta   al
   1ee5a:	sbb    al,0x0
   1ee5c:	test   al,al
   1ee5e:	jne    1f0ae <P7ReadPrior+0x2fe>
   1ee64:	cmp    DWORD PTR [rip+0x43215],0x3        # 62080 <Alphabet_type>
   1ee6b:	jne    1f0ed <P7ReadPrior+0x33d>
   1ee71:	mov    esi,0x1
   1ee76:	mov    rdi,rbp
   1ee79:	call   187a0 <Getword>
   1ee7e:	mov    edx,0xa
   1ee83:	xor    esi,esi
   1ee85:	mov    rdi,rax
   1ee88:	call   3670 <strtol@plt>
   1ee8d:	mov    DWORD PTR [r13+0x4],eax
   1ee91:	mov    edx,eax
   1ee93:	test   eax,eax
   1ee95:	js     1f18e <P7ReadPrior+0x3de>
   1ee9b:	cmp    edx,0xc8
   1eea1:	jg     1f158 <P7ReadPrior+0x3a8>
   1eea7:	mov    r12,r13
   1eeaa:	xor    r14d,r14d
   1eead:	test   edx,edx
   1eeaf:	jle    1ef1d <P7ReadPrior+0x16d>
   1eeb1:	nop    DWORD PTR [rax+0x0]
   1eeb8:	mov    esi,0x2
   1eebd:	mov    rdi,rbp
   1eec0:	xor    ebx,ebx
   1eec2:	call   187a0 <Getword>
   1eec7:	xor    esi,esi
   1eec9:	mov    rdi,rax
   1eecc:	call   3510 <strtod@plt>
   1eed1:	cvtsd2ss xmm0,xmm0
   1eed5:	movss  DWORD PTR [r13+r14*4+0x8],xmm0
   1eedc:	nop    DWORD PTR [rax+0x0]
   1eee0:	mov    esi,0x2
   1eee5:	mov    rdi,rbp
   1eee8:	call   187a0 <Getword>
   1eeed:	xor    esi,esi
   1eeef:	mov    rdi,rax
   1eef2:	call   3510 <strtod@plt>
   1eef7:	cvtsd2ss xmm0,xmm0
   1eefb:	movss  DWORD PTR [r12+rbx*4+0x328],xmm0
   1ef05:	add    rbx,0x1
   1ef09:	cmp    rbx,0x7
   1ef0d:	jne    1eee0 <P7ReadPrior+0x130>
   1ef0f:	add    r14,0x1
   1ef13:	add    r12,0x1c
   1ef17:	cmp    DWORD PTR [r13+0x4],r14d
   1ef1b:	jg     1eeb8 <P7ReadPrior+0x108>
   1ef1d:	mov    esi,0x1
   1ef22:	mov    rdi,rbp
   1ef25:	call   187a0 <Getword>
   1ef2a:	xor    esi,esi
   1ef2c:	mov    edx,0xa
   1ef31:	mov    rdi,rax
   1ef34:	call   3670 <strtol@plt>
   1ef39:	mov    DWORD PTR [r13+0x1908],eax
   1ef40:	mov    esi,eax
   1ef42:	test   eax,eax
   1ef44:	js     1f174 <P7ReadPrior+0x3c4>
   1ef4a:	cmp    esi,0xc8
   1ef50:	jg     1f139 <P7ReadPrior+0x389>
   1ef56:	mov    r12,r13
   1ef59:	xor    r14d,r14d
   1ef5c:	test   esi,esi
   1ef5e:	jle    1efda <P7ReadPrior+0x22a>
   1ef60:	mov    esi,0x2
   1ef65:	mov    rdi,rbp
   1ef68:	xor    ebx,ebx
   1ef6a:	call   187a0 <Getword>
   1ef6f:	xor    esi,esi
   1ef71:	mov    rdi,rax
   1ef74:	call   3510 <strtod@plt>
   1ef79:	mov    edx,DWORD PTR [rip+0x43381]        # 62300 <Alphabet_size>
   1ef7f:	cvtsd2ss xmm0,xmm0
   1ef83:	movss  DWORD PTR [r13+r14*4+0x190c],xmm0
   1ef8d:	test   edx,edx
   1ef8f:	jle    1efc9 <P7ReadPrior+0x219>
   1ef91:	nop    DWORD PTR [rax+0x0]
   1ef98:	mov    esi,0x2
   1ef9d:	mov    rdi,rbp
   1efa0:	call   187a0 <Getword>
   1efa5:	xor    esi,esi
   1efa7:	mov    rdi,rax
   1efaa:	call   3510 <strtod@plt>
   1efaf:	cvtsd2ss xmm0,xmm0
   1efb3:	movss  DWORD PTR [r12+rbx*4+0x1c2c],xmm0
   1efbd:	add    rbx,0x1
   1efc1:	cmp    DWORD PTR [rip+0x43339],ebx        # 62300 <Alphabet_size>
   1efc7:	jg     1ef98 <P7ReadPrior+0x1e8>
   1efc9:	add    r14,0x1
   1efcd:	add    r12,0x50
   1efd1:	cmp    DWORD PTR [r13+0x1908],r14d
   1efd8:	jg     1ef60 <P7ReadPrior+0x1b0>
   1efda:	mov    esi,0x1
   1efdf:	mov    rdi,rbp
   1efe2:	call   187a0 <Getword>
   1efe7:	xor    esi,esi
   1efe9:	mov    edx,0xa
   1efee:	mov    rdi,rax
   1eff1:	call   3670 <strtol@plt>
   1eff6:	mov    DWORD PTR [r13+0x5aac],eax
   1effd:	mov    esi,eax
   1efff:	test   eax,eax
   1f001:	js     1f1a7 <P7ReadPrior+0x3f7>
   1f007:	cmp    esi,0xc8
   1f00d:	jg     1f11a <P7ReadPrior+0x36a>
   1f013:	mov    r12,r13
   1f016:	xor    r14d,r14d
   1f019:	test   esi,esi
   1f01b:	jle    1f09a <P7ReadPrior+0x2ea>
   1f01d:	nop    DWORD PTR [rax]
   1f020:	mov    esi,0x2
   1f025:	mov    rdi,rbp
   1f028:	xor    ebx,ebx
   1f02a:	call   187a0 <Getword>
   1f02f:	xor    esi,esi
   1f031:	mov    rdi,rax
   1f034:	call   3510 <strtod@plt>
   1f039:	mov    eax,DWORD PTR [rip+0x432c1]        # 62300 <Alphabet_size>
   1f03f:	cvtsd2ss xmm0,xmm0
   1f043:	movss  DWORD PTR [r13+r14*4+0x5ab0],xmm0
   1f04d:	test   eax,eax
   1f04f:	jle    1f089 <P7ReadPrior+0x2d9>
   1f051:	nop    DWORD PTR [rax+0x0]
   1f058:	mov    esi,0x2
   1f05d:	mov    rdi,rbp
   1f060:	call   187a0 <Getword>
   1f065:	xor    esi,esi
   1f067:	mov    rdi,rax
   1f06a:	call   3510 <strtod@plt>
   1f06f:	cvtsd2ss xmm0,xmm0
   1f073:	movss  DWORD PTR [r12+rbx*4+0x5dd0],xmm0
   1f07d:	add    rbx,0x1
   1f081:	cmp    DWORD PTR [rip+0x43279],ebx        # 62300 <Alphabet_size>
   1f087:	jg     1f058 <P7ReadPrior+0x2a8>
   1f089:	add    r14,0x1
   1f08d:	add    r12,0x50
   1f091:	cmp    DWORD PTR [r13+0x5aac],r14d
   1f098:	jg     1f020 <P7ReadPrior+0x270>
   1f09a:	mov    rdi,rbp
   1f09d:	call   3530 <fclose@plt>
   1f0a2:	pop    rbx
   1f0a3:	mov    rax,r13
   1f0a6:	pop    rbp
   1f0a7:	pop    r12
   1f0a9:	pop    r13
   1f0ab:	pop    r14
   1f0ad:	ret    
   1f0ae:	mov    ecx,0x8
   1f0b3:	lea    rdi,[rip+0x1edbd]        # 3de77 <_IO_stdin_used+0xe77>
   1f0ba:	mov    rsi,r12
   1f0bd:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1f0bf:	seta   al
   1f0c2:	sbb    al,0x0
   1f0c4:	test   al,al
   1f0c6:	jne    1f1c1 <P7ReadPrior+0x411>
   1f0cc:	cmp    DWORD PTR [rip+0x42fad],0x2        # 62080 <Alphabet_type>
   1f0d3:	je     1ee71 <P7ReadPrior+0xc1>
   1f0d9:	mov    rsi,r14
   1f0dc:	lea    rdi,[rip+0x20a55]        # 3fb38 <xpam120+0xdd8>
   1f0e3:	call   317f0 <Die>
   1f0e8:	jmp    1ee71 <P7ReadPrior+0xc1>
   1f0ed:	mov    rsi,r14
   1f0f0:	lea    rdi,[rip+0x20a01]        # 3faf8 <xpam120+0xd98>
   1f0f7:	call   317f0 <Die>
   1f0fc:	jmp    1ee71 <P7ReadPrior+0xc1>
   1f101:	mov    rdx,r14
   1f104:	mov    rsi,r12
   1f107:	lea    rdi,[rip+0x209b2]        # 3fac0 <xpam120+0xd60>
   1f10e:	xor    eax,eax
   1f110:	call   317f0 <Die>
   1f115:	jmp    1ee2e <P7ReadPrior+0x7e>
   1f11a:	mov    edx,0xc8
   1f11f:	lea    rdi,[rip+0x20bba]        # 3fce0 <xpam120+0xf80>
   1f126:	xor    eax,eax
   1f128:	call   317f0 <Die>
   1f12d:	mov    esi,DWORD PTR [r13+0x5aac]
   1f134:	jmp    1f013 <P7ReadPrior+0x263>
   1f139:	mov    edx,0xc8
   1f13e:	lea    rdi,[rip+0x20b23]        # 3fc68 <xpam120+0xf08>
   1f145:	xor    eax,eax
   1f147:	call   317f0 <Die>
   1f14c:	mov    esi,DWORD PTR [r13+0x1908]
   1f153:	jmp    1ef56 <P7ReadPrior+0x1a6>
   1f158:	mov    esi,0xc8
   1f15d:	lea    rdi,[rip+0x20a84]        # 3fbe8 <xpam120+0xe88>
   1f164:	xor    eax,eax
   1f166:	call   317f0 <Die>
   1f16b:	mov    edx,DWORD PTR [r13+0x4]
   1f16f:	jmp    1eea7 <P7ReadPrior+0xf7>
   1f174:	lea    rdi,[rip+0x20aad]        # 3fc28 <xpam120+0xec8>
   1f17b:	xor    eax,eax
   1f17d:	call   317f0 <Die>
   1f182:	mov    esi,DWORD PTR [r13+0x1908]
   1f189:	jmp    1ef4a <P7ReadPrior+0x19a>
   1f18e:	mov    esi,eax
   1f190:	lea    rdi,[rip+0x20a11]        # 3fba8 <xpam120+0xe48>
   1f197:	xor    eax,eax
   1f199:	call   317f0 <Die>
   1f19e:	mov    edx,DWORD PTR [r13+0x4]
   1f1a2:	jmp    1ee9b <P7ReadPrior+0xeb>
   1f1a7:	lea    rdi,[rip+0x20af2]        # 3fca0 <xpam120+0xf40>
   1f1ae:	xor    eax,eax
   1f1b0:	call   317f0 <Die>
   1f1b5:	mov    esi,DWORD PTR [r13+0x5aac]
   1f1bc:	jmp    1f007 <P7ReadPrior+0x257>
   1f1c1:	mov    rdx,r14
   1f1c4:	mov    rsi,r12
   1f1c7:	lea    rdi,[rip+0x209aa]        # 3fb78 <xpam120+0xe18>
   1f1ce:	xor    eax,eax
   1f1d0:	call   317f0 <Die>
   1f1d5:	jmp    1ee71 <P7ReadPrior+0xc1>
   1f1da:	mov    rsi,r14
   1f1dd:	lea    rdi,[rip+0x208b4]        # 3fa98 <xpam120+0xd38>
   1f1e4:	xor    eax,eax
   1f1e6:	call   317f0 <Die>
   1f1eb:	jmp    1edd7 <P7ReadPrior+0x27>

000000000001f1f0 <PAMPrior>:
   1f1f0:	endbr64 
   1f1f4:	push   r15
   1f1f6:	push   r14
   1f1f8:	push   r13
   1f1fa:	push   r12
   1f1fc:	mov    r12,rdi
   1f1ff:	push   rbp
   1f200:	push   rbx
   1f201:	sub    rsp,0x48
   1f205:	mov    QWORD PTR [rsp+0x10],rsi
   1f20a:	movss  DWORD PTR [rsp+0x1c],xmm0
   1f210:	mov    rax,QWORD PTR fs:0x28
   1f219:	mov    QWORD PTR [rsp+0x38],rax
   1f21e:	xor    eax,eax
   1f220:	cmp    DWORD PTR [rip+0x42e59],0x3        # 62080 <Alphabet_type>
   1f227:	je     1f235 <PAMPrior+0x45>
   1f229:	lea    rdi,[rip+0x20ae8]        # 3fd18 <xpam120+0xfb8>
   1f230:	call   317f0 <Die>
   1f235:	mov    rax,QWORD PTR [rsp+0x10]
   1f23a:	mov    edx,DWORD PTR [rax]
   1f23c:	test   edx,edx
   1f23e:	jne    1f3b1 <PAMPrior+0x1c1>
   1f244:	mov    rax,QWORD PTR [rsp+0x10]
   1f249:	cmp    DWORD PTR [rax+0x5aac],0x1
   1f250:	je     1f260 <PAMPrior+0x70>
   1f252:	lea    rdi,[rip+0x20b2f]        # 3fd88 <xpam120+0x1028>
   1f259:	xor    eax,eax
   1f25b:	call   317f0 <Die>
   1f260:	mov    rsi,r12
   1f263:	lea    rdi,[rip+0x20798]        # 3fa02 <xpam120+0xca2>
   1f26a:	call   275c0 <FileConcat>
   1f26f:	lea    rsi,[rip+0x21cd8]        # 40f4e <gki_primes+0x4ce>
   1f276:	mov    rdi,r12
   1f279:	mov    r13,rax
   1f27c:	call   3750 <fopen@plt>
   1f281:	mov    rbp,rax
   1f284:	test   rax,rax
   1f287:	je     1f3d8 <PAMPrior+0x1e8>
   1f28d:	lea    rdx,[rsp+0x2c]
   1f292:	lea    rsi,[rsp+0x30]
   1f297:	mov    rdi,rbp
   1f29a:	call   26dc0 <ParsePAMFile>
   1f29f:	test   eax,eax
   1f2a1:	je     1f3c4 <PAMPrior+0x1d4>
   1f2a7:	mov    rdi,rbp
   1f2aa:	call   3530 <fclose@plt>
   1f2af:	mov    rdi,r13
   1f2b2:	call   3460 <free@plt>
   1f2b7:	mov    rbx,QWORD PTR [rsp+0x10]
   1f2bc:	mov    eax,DWORD PTR [rip+0x4303e]        # 62300 <Alphabet_size>
   1f2c2:	mov    DWORD PTR [rbx],0x1
   1f2c8:	mov    DWORD PTR [rbx+0x1908],0x14
   1f2d2:	test   eax,eax
   1f2d4:	jle    1f37f <PAMPrior+0x18f>
   1f2da:	lea    r12,[rip+0x42f9f]        # 62280 <Alphabet>
   1f2e1:	xor    r14d,r14d
   1f2e4:	lea    r13,[rip+0x2e755]        # 4da40 <aafq>
   1f2eb:	mov    rbp,r12
   1f2ee:	xchg   ax,ax
   1f2f0:	xor    r15d,r15d
   1f2f3:	nop    DWORD PTR [rax+rax*1+0x0]
   1f2f8:	movsx  ecx,BYTE PTR [rbp+0x0]
   1f2fc:	movsx  edx,BYTE PTR [r12+r15*1]
   1f301:	pxor   xmm0,xmm0
   1f305:	pxor   xmm1,xmm1
   1f309:	mov    rsi,QWORD PTR [rsp+0x30]
   1f30e:	cvtss2sd xmm1,DWORD PTR [r13+r15*4+0x0]
   1f315:	movsd  QWORD PTR [rsp+0x8],xmm1
   1f31b:	sub    ecx,0x41
   1f31e:	sub    edx,0x41
   1f321:	movsxd rcx,ecx
   1f324:	movsxd rdx,edx
   1f327:	mov    rcx,QWORD PTR [rsi+rcx*8]
   1f32b:	cvtsi2ss xmm0,DWORD PTR [rcx+rdx*4]
   1f330:	mulss  xmm0,DWORD PTR [rsp+0x2c]
   1f336:	cvtss2sd xmm0,xmm0
   1f33a:	call   3800 <exp@plt>
   1f33f:	mulsd  xmm0,QWORD PTR [rsp+0x8]
   1f345:	mov    esi,DWORD PTR [rip+0x42fb5]        # 62300 <Alphabet_size>
   1f34b:	cvtsd2ss xmm0,xmm0
   1f34f:	movss  DWORD PTR [rbx+r15*4+0x1c2c],xmm0
   1f359:	add    r15,0x1
   1f35d:	cmp    esi,r15d
   1f360:	jg     1f2f8 <PAMPrior+0x108>
   1f362:	add    r14d,0x1
   1f366:	add    rbp,0x1
   1f36a:	add    rbx,0x50
   1f36e:	cmp    esi,r14d
   1f371:	jle    1f42d <PAMPrior+0x23d>
   1f377:	test   esi,esi
   1f379:	jg     1f2f0 <PAMPrior+0x100>
   1f37f:	mov    rdi,QWORD PTR [rsp+0x30]
   1f384:	mov    esi,0x1b
   1f389:	call   368c0 <Free2DArray>
   1f38e:	mov    rax,QWORD PTR [rsp+0x38]
   1f393:	xor    rax,QWORD PTR fs:0x28
   1f39c:	jne    1f428 <PAMPrior+0x238>
   1f3a2:	add    rsp,0x48
   1f3a6:	pop    rbx
   1f3a7:	pop    rbp
   1f3a8:	pop    r12
   1f3aa:	pop    r13
   1f3ac:	pop    r14
   1f3ae:	pop    r15
   1f3b0:	ret    
   1f3b1:	lea    rdi,[rip+0x20990]        # 3fd48 <xpam120+0xfe8>
   1f3b8:	xor    eax,eax
   1f3ba:	call   317f0 <Die>
   1f3bf:	jmp    1f244 <PAMPrior+0x54>
   1f3c4:	mov    rsi,r12
   1f3c7:	lea    rdi,[rip+0x20a32]        # 3fe00 <xpam120+0x10a0>
   1f3ce:	call   317f0 <Die>
   1f3d3:	jmp    1f2a7 <PAMPrior+0xb7>
   1f3d8:	xor    edx,edx
   1f3da:	lea    rsi,[rip+0x20624]        # 3fa05 <xpam120+0xca5>
   1f3e1:	mov    rdi,r12
   1f3e4:	call   27750 <EnvFileOpen>
   1f3e9:	mov    rbp,rax
   1f3ec:	test   rax,rax
   1f3ef:	jne    1f28d <PAMPrior+0x9d>
   1f3f5:	xor    edx,edx
   1f3f7:	lea    rsi,[rip+0x20607]        # 3fa05 <xpam120+0xca5>
   1f3fe:	mov    rdi,r13
   1f401:	call   27750 <EnvFileOpen>
   1f406:	mov    rbp,rax
   1f409:	test   rax,rax
   1f40c:	jne    1f28d <PAMPrior+0x9d>
   1f412:	mov    rsi,r12
   1f415:	lea    rdi,[rip+0x209b4]        # 3fdd0 <xpam120+0x1070>
   1f41c:	xor    eax,eax
   1f41e:	call   317f0 <Die>
   1f423:	jmp    1f28d <PAMPrior+0x9d>
   1f428:	call   3570 <__stack_chk_fail@plt>
   1f42d:	test   esi,esi
   1f42f:	jle    1f37f <PAMPrior+0x18f>
   1f435:	mov    rax,QWORD PTR [rsp+0x10]
   1f43a:	xor    ebx,ebx
   1f43c:	lea    rbp,[rax+0x1c2c]
   1f443:	nop    DWORD PTR [rax+rax*1+0x0]
   1f448:	pxor   xmm0,xmm0
   1f44c:	movsd  xmm2,QWORD PTR [rip+0x1e99c]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1f454:	mov    rax,QWORD PTR [rsp+0x10]
   1f459:	mov    rdi,rbp
   1f45c:	cvtsi2sd xmm0,esi
   1f460:	divsd  xmm2,xmm0
   1f464:	pxor   xmm0,xmm0
   1f468:	cvtsd2ss xmm0,xmm2
   1f46c:	movss  DWORD PTR [rax+rbx*4+0x190c],xmm0
   1f475:	add    rbx,0x1
   1f479:	call   3b290 <FNorm>
   1f47e:	mov    esi,DWORD PTR [rip+0x42e7c]        # 62300 <Alphabet_size>
   1f484:	movss  xmm0,DWORD PTR [rsp+0x1c]
   1f48a:	mov    rdi,rbp
   1f48d:	add    rbp,0x50
   1f491:	call   3adb0 <FScale>
   1f496:	mov    esi,DWORD PTR [rip+0x42e64]        # 62300 <Alphabet_size>
   1f49c:	cmp    esi,ebx
   1f49e:	jg     1f448 <PAMPrior+0x258>
   1f4a0:	jmp    1f37f <PAMPrior+0x18f>
   1f4a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001f4b0 <P7DefaultNullModel>:
   1f4b0:	endbr64 
   1f4b4:	cmp    DWORD PTR [rip+0x42bc5],0x3        # 62080 <Alphabet_type>
   1f4bb:	mov    edx,DWORD PTR [rip+0x42e3f]        # 62300 <Alphabet_size>
   1f4c1:	je     1f500 <P7DefaultNullModel+0x50>
   1f4c3:	test   edx,edx
   1f4c5:	jle    1f4f5 <P7DefaultNullModel+0x45>
   1f4c7:	pxor   xmm1,xmm1
   1f4cb:	movss  xmm0,DWORD PTR [rip+0x1dec9]        # 3d39c <_IO_stdin_used+0x39c>
   1f4d3:	lea    eax,[rdx-0x1]
   1f4d6:	cvtsi2ss xmm1,edx
   1f4da:	lea    rax,[rdi+rax*4+0x4]
   1f4df:	divss  xmm0,xmm1
   1f4e3:	nop    DWORD PTR [rax+rax*1+0x0]
   1f4e8:	movss  DWORD PTR [rdi],xmm0
   1f4ec:	add    rdi,0x4
   1f4f0:	cmp    rdi,rax
   1f4f3:	jne    1f4e8 <P7DefaultNullModel+0x38>
   1f4f5:	mov    DWORD PTR [rsi],0x3f7fbe88
   1f4fb:	ret    
   1f4fc:	nop    DWORD PTR [rax+0x0]
   1f500:	lea    r8d,[rdx-0x1]
   1f504:	xor    eax,eax
   1f506:	lea    rcx,[rip+0x2e533]        # 4da40 <aafq>
   1f50d:	test   edx,edx
   1f50f:	jle    1f52e <P7DefaultNullModel+0x7e>
   1f511:	nop    DWORD PTR [rax+0x0]
   1f518:	movss  xmm0,DWORD PTR [rcx+rax*4]
   1f51d:	mov    rdx,rax
   1f520:	movss  DWORD PTR [rdi+rax*4],xmm0
   1f525:	add    rax,0x1
   1f529:	cmp    r8,rdx
   1f52c:	jne    1f518 <P7DefaultNullModel+0x68>
   1f52e:	mov    DWORD PTR [rsi],0x3f7f454a
   1f534:	ret    
   1f535:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001f540 <P7ReadNullModel>:
   1f540:	endbr64 
   1f544:	push   r15
   1f546:	push   r14
   1f548:	mov    r14,rdx
   1f54b:	push   r13
   1f54d:	mov    r13,rdi
   1f550:	push   r12
   1f552:	mov    r12,rsi
   1f555:	lea    rsi,[rip+0x219f2]        # 40f4e <gki_primes+0x4ce>
   1f55c:	push   rbp
   1f55d:	push   rbx
   1f55e:	sub    rsp,0x8
   1f562:	call   3750 <fopen@plt>
   1f567:	mov    rbp,rax
   1f56a:	test   rax,rax
   1f56d:	je     1f6e0 <P7ReadNullModel+0x1a0>
   1f573:	mov    esi,0x4
   1f578:	mov    rdi,rbp
   1f57b:	call   187a0 <Getword>
   1f580:	mov    r15,rax
   1f583:	test   rax,rax
   1f586:	je     1f632 <P7ReadNullModel+0xf2>
   1f58c:	mov    rdi,rax
   1f58f:	call   367e0 <s2upper>
   1f594:	mov    ecx,0x8
   1f599:	lea    rdi,[rip+0x1e8d7]        # 3de77 <_IO_stdin_used+0xe77>
   1f5a0:	mov    rsi,r15
   1f5a3:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1f5a5:	seta   al
   1f5a8:	sbb    al,0x0
   1f5aa:	test   al,al
   1f5ac:	je     1f660 <P7ReadNullModel+0x120>
   1f5b2:	lea    rdi,[rip+0x1e8b8]        # 3de71 <_IO_stdin_used+0xe71>
   1f5b9:	mov    ecx,0x6
   1f5be:	mov    rsi,r15
   1f5c1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1f5c3:	mov    edi,0x3
   1f5c8:	seta   al
   1f5cb:	sbb    al,0x0
   1f5cd:	test   al,al
   1f5cf:	jne    1f632 <P7ReadNullModel+0xf2>
   1f5d1:	mov    eax,DWORD PTR [rip+0x42aa9]        # 62080 <Alphabet_type>
   1f5d7:	test   eax,eax
   1f5d9:	je     1f673 <P7ReadNullModel+0x133>
   1f5df:	cmp    eax,edi
   1f5e1:	jne    1f6c0 <P7ReadNullModel+0x180>
   1f5e7:	mov    eax,DWORD PTR [rip+0x42d13]        # 62300 <Alphabet_size>
   1f5ed:	test   eax,eax
   1f5ef:	jle    1f680 <P7ReadNullModel+0x140>
   1f5f5:	xor    ebx,ebx
   1f5f7:	jmp    1f61d <P7ReadNullModel+0xdd>
   1f5f9:	nop    DWORD PTR [rax+0x0]
   1f600:	xor    esi,esi
   1f602:	call   3510 <strtod@plt>
   1f607:	cvtsd2ss xmm0,xmm0
   1f60b:	movss  DWORD PTR [r12+rbx*4],xmm0
   1f611:	add    rbx,0x1
   1f615:	cmp    DWORD PTR [rip+0x42ce5],ebx        # 62300 <Alphabet_size>
   1f61b:	jle    1f680 <P7ReadNullModel+0x140>
   1f61d:	mov    rdi,rbp
   1f620:	mov    esi,0x2
   1f625:	call   187a0 <Getword>
   1f62a:	mov    rdi,rax
   1f62d:	test   rax,rax
   1f630:	jne    1f600 <P7ReadNullModel+0xc0>
   1f632:	mov    rdi,rbp
   1f635:	call   3530 <fclose@plt>
   1f63a:	add    rsp,0x8
   1f63e:	mov    rsi,r13
   1f641:	xor    eax,eax
   1f643:	pop    rbx
   1f644:	lea    rdi,[rip+0x2084d]        # 3fe98 <xpam120+0x1138>
   1f64b:	pop    rbp
   1f64c:	pop    r12
   1f64e:	pop    r13
   1f650:	pop    r14
   1f652:	pop    r15
   1f654:	jmp    317f0 <Die>
   1f659:	nop    DWORD PTR [rax+0x0]
   1f660:	mov    eax,DWORD PTR [rip+0x42a1a]        # 62080 <Alphabet_type>
   1f666:	mov    edi,0x2
   1f66b:	test   eax,eax
   1f66d:	jne    1f5df <P7ReadNullModel+0x9f>
   1f673:	call   4ad0 <SetAlphabet>
   1f678:	jmp    1f5e7 <P7ReadNullModel+0xa7>
   1f67d:	nop    DWORD PTR [rax]
   1f680:	mov    rdi,rbp
   1f683:	mov    esi,0x2
   1f688:	call   187a0 <Getword>
   1f68d:	mov    rdi,rax
   1f690:	test   rax,rax
   1f693:	je     1f632 <P7ReadNullModel+0xf2>
   1f695:	xor    esi,esi
   1f697:	call   3510 <strtod@plt>
   1f69c:	mov    rdi,rbp
   1f69f:	cvtsd2ss xmm0,xmm0
   1f6a3:	movss  DWORD PTR [r14],xmm0
   1f6a8:	add    rsp,0x8
   1f6ac:	pop    rbx
   1f6ad:	pop    rbp
   1f6ae:	pop    r12
   1f6b0:	pop    r13
   1f6b2:	pop    r14
   1f6b4:	pop    r15
   1f6b6:	jmp    3530 <fclose@plt>
   1f6bb:	nop    DWORD PTR [rax+rax*1+0x0]
   1f6c0:	mov    rsi,r13
   1f6c3:	lea    rdi,[rip+0x2078e]        # 3fe58 <xpam120+0x10f8>
   1f6ca:	xor    eax,eax
   1f6cc:	call   317f0 <Die>
   1f6d1:	jmp    1f5e7 <P7ReadNullModel+0xa7>
   1f6d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f6e0:	mov    rsi,r13
   1f6e3:	lea    rdi,[rip+0x20746]        # 3fe30 <xpam120+0x10d0>
   1f6ea:	xor    eax,eax
   1f6ec:	call   317f0 <Die>
   1f6f1:	jmp    1f573 <P7ReadNullModel+0x33>
   1f6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001f700 <P7PriorifyEmissionVector>:
   1f700:	endbr64 
   1f704:	push   r15
   1f706:	push   r14
   1f708:	push   r13
   1f70a:	push   r12
   1f70c:	mov    r12d,edx
   1f70f:	push   rbp
   1f710:	push   rbx
   1f711:	sub    rsp,0x368
   1f718:	mov    QWORD PTR [rsp+0x28],rdi
   1f71d:	mov    QWORD PTR [rsp+0x10],r8
   1f722:	mov    QWORD PTR [rsp+0x20],r9
   1f727:	mov    rax,QWORD PTR fs:0x28
   1f730:	mov    QWORD PTR [rsp+0x358],rax
   1f738:	xor    eax,eax
   1f73a:	mov    eax,DWORD PTR [rsi]
   1f73c:	mov    DWORD PTR [rsp+0x30],0x3f800000
   1f744:	test   eax,eax
   1f746:	jne    1f931 <P7PriorifyEmissionVector+0x231>
   1f74c:	cmp    edx,0x1
   1f74f:	jle    1f7ee <P7PriorifyEmissionVector+0xee>
   1f755:	mov    rbx,rcx
   1f758:	lea    rbp,[rsp+0x30]
   1f75d:	lea    ecx,[rdx-0x1]
   1f760:	mov    r14,QWORD PTR [rsp+0x10]
   1f765:	pxor   xmm6,xmm6
   1f769:	mov    rax,rbp
   1f76c:	lea    r13,[rbx+rcx*4+0x4]
   1f771:	movss  DWORD PTR [rsp+0xc],xmm6
   1f777:	jmp    1f7c1 <P7PriorifyEmissionVector+0xc1>
   1f779:	nop    DWORD PTR [rax+0x0]
   1f780:	movss  xmm0,DWORD PTR [rip+0x20a64]        # 401ec <defmq.7318+0x2c>
   1f788:	mov    rdi,QWORD PTR [rsp+0x28]
   1f78d:	movss  DWORD PTR [rax],xmm0
   1f791:	mov    rdx,r14
   1f794:	add    rbx,0x4
   1f798:	mov    esi,DWORD PTR [rip+0x42b62]        # 62300 <Alphabet_size>
   1f79e:	mov    QWORD PTR [rsp],rax
   1f7a2:	add    r14,0x50
   1f7a6:	call   17bf0 <Logp_cvec>
   1f7ab:	mov    rax,QWORD PTR [rsp]
   1f7af:	addss  xmm0,DWORD PTR [rax]
   1f7b3:	add    rax,0x4
   1f7b7:	movss  DWORD PTR [rax-0x4],xmm0
   1f7bc:	cmp    rbx,r13
   1f7bf:	je     1f7e3 <P7PriorifyEmissionVector+0xe3>
   1f7c1:	movss  xmm0,DWORD PTR [rbx]
   1f7c5:	comiss xmm0,DWORD PTR [rsp+0xc]
   1f7ca:	jbe    1f780 <P7PriorifyEmissionVector+0x80>
   1f7cc:	mov    QWORD PTR [rsp],rax
   1f7d0:	cvtss2sd xmm0,xmm0
   1f7d4:	call   35e0 <log@plt>
   1f7d9:	mov    rax,QWORD PTR [rsp]
   1f7dd:	cvtsd2ss xmm0,xmm0
   1f7e1:	jmp    1f788 <P7PriorifyEmissionVector+0x88>
   1f7e3:	mov    esi,r12d
   1f7e6:	mov    rdi,rbp
   1f7e9:	call   17aa0 <LogNorm>
   1f7ee:	mov    esi,DWORD PTR [rip+0x42b0c]        # 62300 <Alphabet_size>
   1f7f4:	mov    r14,QWORD PTR [rsp+0x28]
   1f7f9:	mov    rdi,r14
   1f7fc:	call   3ae20 <FSum>
   1f801:	mov    esi,DWORD PTR [rip+0x42af9]        # 62300 <Alphabet_size>
   1f807:	movss  DWORD PTR [rsp+0x8],xmm0
   1f80d:	test   esi,esi
   1f80f:	jle    1f8b6 <P7PriorifyEmissionVector+0x1b6>
   1f815:	lea    eax,[r12-0x1]
   1f81a:	pxor   xmm5,xmm5
   1f81e:	xor    ebx,ebx
   1f820:	lea    rbp,[rax+rax*4]
   1f824:	lea    rax,[rsp+0x30]
   1f829:	movss  DWORD PTR [rsp+0xc],xmm5
   1f82f:	mov    QWORD PTR [rsp+0x18],rax
   1f834:	shl    rbp,0x4
   1f838:	add    rbp,QWORD PTR [rsp+0x10]
   1f83d:	nop    DWORD PTR [rax]
   1f840:	test   r12d,r12d
   1f843:	jle    1f928 <P7PriorifyEmissionVector+0x228>
   1f849:	mov    r15,QWORD PTR [rsp+0x18]
   1f84e:	mov    r13,QWORD PTR [rsp+0x10]
   1f853:	pxor   xmm2,xmm2
   1f857:	jmp    1f864 <P7PriorifyEmissionVector+0x164>
   1f859:	nop    DWORD PTR [rax+0x0]
   1f860:	add    r13,0x50
   1f864:	mov    rdi,r13
   1f867:	movss  DWORD PTR [rsp],xmm2
   1f86c:	add    r15,0x4
   1f870:	call   3ae20 <FSum>
   1f875:	movss  xmm1,DWORD PTR [r14]
   1f87a:	movss  xmm2,DWORD PTR [rsp]
   1f87f:	addss  xmm1,DWORD PTR [r13+rbx*4+0x0]
   1f886:	mulss  xmm1,DWORD PTR [r15-0x4]
   1f88c:	addss  xmm0,DWORD PTR [rsp+0x8]
   1f892:	mov    esi,DWORD PTR [rip+0x42a68]        # 62300 <Alphabet_size>
   1f898:	divss  xmm1,xmm0
   1f89c:	addss  xmm2,xmm1
   1f8a0:	cmp    r13,rbp
   1f8a3:	jne    1f860 <P7PriorifyEmissionVector+0x160>
   1f8a5:	add    rbx,0x1
   1f8a9:	movss  DWORD PTR [r14],xmm2
   1f8ae:	add    r14,0x4
   1f8b2:	cmp    esi,ebx
   1f8b4:	jg     1f840 <P7PriorifyEmissionVector+0x140>
   1f8b6:	mov    rdi,QWORD PTR [rsp+0x28]
   1f8bb:	call   3b290 <FNorm>
   1f8c0:	cmp    QWORD PTR [rsp+0x20],0x0
   1f8c6:	je     1f8fc <P7PriorifyEmissionVector+0x1fc>
   1f8c8:	test   r12d,r12d
   1f8cb:	jle    1f8fc <P7PriorifyEmissionVector+0x1fc>
   1f8cd:	lea    ecx,[r12-0x1]
   1f8d2:	xor    eax,eax
   1f8d4:	lea    rbp,[rsp+0x30]
   1f8d9:	nop    DWORD PTR [rax+0x0]
   1f8e0:	movss  xmm0,DWORD PTR [rbp+rax*4+0x0]
   1f8e6:	mov    rdx,QWORD PTR [rsp+0x20]
   1f8eb:	movss  DWORD PTR [rdx+rax*4],xmm0
   1f8f0:	mov    rdx,rax
   1f8f3:	add    rax,0x1
   1f8f7:	cmp    rcx,rdx
   1f8fa:	jne    1f8e0 <P7PriorifyEmissionVector+0x1e0>
   1f8fc:	mov    rax,QWORD PTR [rsp+0x358]
   1f904:	xor    rax,QWORD PTR fs:0x28
   1f90d:	jne    1f996 <P7PriorifyEmissionVector+0x296>
   1f913:	add    rsp,0x368
   1f91a:	pop    rbx
   1f91b:	pop    rbp
   1f91c:	pop    r12
   1f91e:	pop    r13
   1f920:	pop    r14
   1f922:	pop    r15
   1f924:	ret    
   1f925:	nop    DWORD PTR [rax]
   1f928:	pxor   xmm2,xmm2
   1f92c:	jmp    1f8a5 <P7PriorifyEmissionVector+0x1a5>
   1f931:	mov    esi,DWORD PTR [rip+0x429c9]        # 62300 <Alphabet_size>
   1f937:	cmp    edx,0x1
   1f93a:	jle    1f7f4 <P7PriorifyEmissionVector+0xf4>
   1f940:	cmp    eax,0x1
   1f943:	jne    1f7f4 <P7PriorifyEmissionVector+0xf4>
   1f949:	test   esi,esi
   1f94b:	jle    1f98f <P7PriorifyEmissionVector+0x28f>
   1f94d:	lea    ecx,[rsi-0x1]
   1f950:	xor    eax,eax
   1f952:	lea    rbp,[rsp+0x30]
   1f957:	nop    WORD PTR [rax+rax*1+0x0]
   1f960:	mov    rdx,QWORD PTR [rsp+0x28]
   1f965:	movss  xmm0,DWORD PTR [rdx+rax*4]
   1f96a:	mov    rdx,rax
   1f96d:	movss  DWORD PTR [rbp+rax*4+0x0],xmm0
   1f973:	add    rax,0x1
   1f977:	cmp    rdx,rcx
   1f97a:	jne    1f960 <P7PriorifyEmissionVector+0x260>
   1f97c:	mov    rdi,rbp
   1f97f:	call   3b290 <FNorm>
   1f984:	mov    esi,DWORD PTR [rip+0x42976]        # 62300 <Alphabet_size>
   1f98a:	jmp    1f7f4 <P7PriorifyEmissionVector+0xf4>
   1f98f:	lea    rbp,[rsp+0x30]
   1f994:	jmp    1f97c <P7PriorifyEmissionVector+0x27c>
   1f996:	call   3570 <__stack_chk_fail@plt>
   1f99b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001f9a0 <P7PriorifyTransitionVector>:
   1f9a0:	endbr64 
   1f9a4:	push   r15
   1f9a6:	mov    rax,rdi
   1f9a9:	mov    r15,rsi
   1f9ac:	push   r14
   1f9ae:	add    rax,0x14
   1f9b2:	push   r13
   1f9b4:	push   r12
   1f9b6:	push   rbp
   1f9b7:	push   rbx
   1f9b8:	sub    rsp,0x368
   1f9bf:	mov    QWORD PTR [rsp+0x18],rdi
   1f9c4:	mov    rcx,QWORD PTR fs:0x28
   1f9cd:	mov    QWORD PTR [rsp+0x358],rcx
   1f9d5:	xor    ecx,ecx
   1f9d7:	lea    rcx,[rdi+0xc]
   1f9db:	cmp    DWORD PTR [rsi],0x1
   1f9de:	mov    QWORD PTR [rsp+0x28],rax
   1f9e3:	mov    DWORD PTR [rsp+0x30],0x3f800000
   1f9eb:	mov    QWORD PTR [rsp+0x20],rcx
   1f9f0:	jbe    1fba5 <P7PriorifyTransitionVector+0x205>
   1f9f6:	mov    r14,QWORD PTR [rsp+0x18]
   1f9fb:	mov    esi,0x3
   1fa00:	xor    r12d,r12d
   1fa03:	mov    rdi,r14
   1fa06:	call   3ae20 <FSum>
   1fa0b:	movss  xmm4,DWORD PTR [r14+0x14]
   1fa11:	addss  xmm4,DWORD PTR [r14+0x18]
   1fa17:	movss  DWORD PTR [rsp+0x10],xmm0
   1fa1d:	movss  xmm0,DWORD PTR [r14+0xc]
   1fa23:	addss  xmm0,DWORD PTR [r14+0x10]
   1fa29:	movss  DWORD PTR [rsp+0x14],xmm0
   1fa2f:	nop
   1fa30:	mov    eax,DWORD PTR [r15+0x4]
   1fa34:	mov    edx,r12d
   1fa37:	pxor   xmm2,xmm2
   1fa3b:	test   eax,eax
   1fa3d:	jle    1fb0c <P7PriorifyTransitionVector+0x16c>
   1fa43:	lea    rbx,[r15+0x328]
   1fa4a:	pxor   xmm2,xmm2
   1fa4e:	lea    r13,[rsp+0x30]
   1fa53:	xor    ebp,ebp
   1fa55:	jmp    1fac8 <P7PriorifyTransitionVector+0x128>
   1fa57:	nop    WORD PTR [rax+rax*1+0x0]
   1fa60:	cmp    edx,0x2
   1fa63:	jg     1fb80 <P7PriorifyTransitionVector+0x1e0>
   1fa69:	addss  xmm1,xmm0
   1fa6d:	mov    esi,0x3
   1fa72:	mov    rdi,rbx
   1fa75:	mov    DWORD PTR [rsp+0xc],edx
   1fa79:	movss  DWORD PTR [rsp+0x8],xmm4
   1fa7f:	movss  DWORD PTR [rsp+0x4],xmm2
   1fa85:	mulss  xmm1,xmm3
   1fa89:	movss  DWORD PTR [rsp],xmm1
   1fa8e:	call   3ae20 <FSum>
   1fa93:	addss  xmm0,DWORD PTR [rsp+0x10]
   1fa99:	movss  xmm1,DWORD PTR [rsp]
   1fa9e:	movss  xmm2,DWORD PTR [rsp+0x4]
   1faa4:	movss  xmm4,DWORD PTR [rsp+0x8]
   1faaa:	mov    edx,DWORD PTR [rsp+0xc]
   1faae:	divss  xmm1,xmm0
   1fab2:	addss  xmm2,xmm1
   1fab6:	add    rbp,0x1
   1faba:	add    rbx,0x1c
   1fabe:	cmp    DWORD PTR [r15+0x4],ebp
   1fac2:	jle    1fb0c <P7PriorifyTransitionVector+0x16c>
   1fac4:	nop    DWORD PTR [rax+0x0]
   1fac8:	movss  xmm3,DWORD PTR [r13+rbp*4+0x0]
   1facf:	movss  xmm0,DWORD PTR [r14]
   1fad4:	movss  xmm1,DWORD PTR [rbx+r12*4]
   1fada:	cmp    r12,0x4
   1fade:	jbe    1fa60 <P7PriorifyTransitionVector+0xc0>
   1fae0:	addss  xmm0,xmm1
   1fae4:	movss  xmm1,DWORD PTR [rbx+0x14]
   1fae9:	add    rbp,0x1
   1faed:	add    rbx,0x1c
   1faf1:	addss  xmm1,xmm4
   1faf5:	addss  xmm1,DWORD PTR [rbx-0x4]
   1fafa:	mulss  xmm0,xmm3
   1fafe:	divss  xmm0,xmm1
   1fb02:	addss  xmm2,xmm0
   1fb06:	cmp    DWORD PTR [r15+0x4],ebp
   1fb0a:	jg     1fac8 <P7PriorifyTransitionVector+0x128>
   1fb0c:	add    r12,0x1
   1fb10:	movss  DWORD PTR [r14],xmm2
   1fb15:	add    r14,0x4
   1fb19:	cmp    r12,0x7
   1fb1d:	jne    1fa30 <P7PriorifyTransitionVector+0x90>
   1fb23:	mov    rdi,QWORD PTR [rsp+0x18]
   1fb28:	mov    esi,0x3
   1fb2d:	call   3b290 <FNorm>
   1fb32:	mov    rdi,QWORD PTR [rsp+0x20]
   1fb37:	mov    esi,0x2
   1fb3c:	call   3b290 <FNorm>
   1fb41:	mov    rdi,QWORD PTR [rsp+0x28]
   1fb46:	mov    esi,0x2
   1fb4b:	call   3b290 <FNorm>
   1fb50:	mov    rax,QWORD PTR [rsp+0x358]
   1fb58:	xor    rax,QWORD PTR fs:0x28
   1fb61:	jne    1fc99 <P7PriorifyTransitionVector+0x2f9>
   1fb67:	add    rsp,0x368
   1fb6e:	pop    rbx
   1fb6f:	pop    rbp
   1fb70:	pop    r12
   1fb72:	pop    r13
   1fb74:	pop    r14
   1fb76:	pop    r15
   1fb78:	ret    
   1fb79:	nop    DWORD PTR [rax+0x0]
   1fb80:	addss  xmm0,xmm1
   1fb84:	movss  xmm1,DWORD PTR [rsp+0x14]
   1fb8a:	addss  xmm1,DWORD PTR [rbx+0xc]
   1fb8f:	addss  xmm1,DWORD PTR [rbx+0x10]
   1fb94:	mulss  xmm0,xmm3
   1fb98:	divss  xmm0,xmm1
   1fb9c:	addss  xmm2,xmm0
   1fba0:	jmp    1fab6 <P7PriorifyTransitionVector+0x116>
   1fba5:	cmp    DWORD PTR [rsi+0x1908],0x1
   1fbac:	jle    1f9f6 <P7PriorifyTransitionVector+0x56>
   1fbb2:	mov    esi,DWORD PTR [rsi+0x4]
   1fbb5:	lea    r13,[rsp+0x30]
   1fbba:	test   esi,esi
   1fbbc:	jle    1fc8c <P7PriorifyTransitionVector+0x2ec>
   1fbc2:	lea    r13,[rsp+0x30]
   1fbc7:	mov    rbp,rdx
   1fbca:	lea    rbx,[r15+0x328]
   1fbd1:	xor    r14d,r14d
   1fbd4:	mov    r12,r13
   1fbd7:	jmp    1fc66 <P7PriorifyTransitionVector+0x2c6>
   1fbdc:	nop    DWORD PTR [rax+0x0]
   1fbe0:	movss  xmm0,DWORD PTR [rip+0x20604]        # 401ec <defmq.7318+0x2c>
   1fbe8:	mov    rdi,QWORD PTR [rsp+0x18]
   1fbed:	mov    rdx,rbx
   1fbf0:	add    r14,0x1
   1fbf4:	add    r12,0x4
   1fbf8:	mov    esi,0x3
   1fbfd:	movss  DWORD PTR [r12-0x4],xmm0
   1fc04:	call   17bf0 <Logp_cvec>
   1fc09:	addss  xmm0,DWORD PTR [r12-0x4]
   1fc10:	mov    rdi,QWORD PTR [rsp+0x20]
   1fc15:	lea    rdx,[rbx+0xc]
   1fc19:	mov    esi,0x2
   1fc1e:	movss  DWORD PTR [r12-0x4],xmm0
   1fc25:	call   17bf0 <Logp_cvec>
   1fc2a:	addss  xmm0,DWORD PTR [r12-0x4]
   1fc31:	mov    rdi,QWORD PTR [rsp+0x28]
   1fc36:	lea    rdx,[rbx+0x14]
   1fc3a:	mov    esi,0x2
   1fc3f:	add    rbx,0x1c
   1fc43:	movss  DWORD PTR [r12-0x4],xmm0
   1fc4a:	call   17bf0 <Logp_cvec>
   1fc4f:	addss  xmm0,DWORD PTR [r12-0x4]
   1fc56:	mov    esi,DWORD PTR [r15+0x4]
   1fc5a:	movss  DWORD PTR [r12-0x4],xmm0
   1fc61:	cmp    esi,r14d
   1fc64:	jle    1fc8c <P7PriorifyTransitionVector+0x2ec>
   1fc66:	movss  xmm0,DWORD PTR [rbp+r14*4+0x0]
   1fc6d:	pxor   xmm6,xmm6
   1fc71:	comiss xmm0,xmm6
   1fc74:	jbe    1fbe0 <P7PriorifyTransitionVector+0x240>
   1fc7a:	cvtss2sd xmm0,xmm0
   1fc7e:	call   35e0 <log@plt>
   1fc83:	cvtsd2ss xmm0,xmm0
   1fc87:	jmp    1fbe8 <P7PriorifyTransitionVector+0x248>
   1fc8c:	mov    rdi,r13
   1fc8f:	call   17aa0 <LogNorm>
   1fc94:	jmp    1f9f6 <P7PriorifyTransitionVector+0x56>
   1fc99:	call   3570 <__stack_chk_fail@plt>
   1fc9e:	xchg   ax,ax

000000000001fca0 <P7PriorifyHMM>:
   1fca0:	endbr64 
   1fca4:	push   r15
   1fca6:	pxor   xmm0,xmm0
   1fcaa:	mov    r15,rdi
   1fcad:	push   r14
   1fcaf:	push   r13
   1fcb1:	push   r12
   1fcb3:	push   rbp
   1fcb4:	mov    rbp,rsi
   1fcb7:	push   rbx
   1fcb8:	sub    rsp,0x998
   1fcbf:	mov    rax,QWORD PTR fs:0x28
   1fcc8:	mov    QWORD PTR [rsp+0x988],rax
   1fcd0:	xor    eax,eax
   1fcd2:	mov    eax,DWORD PTR [rdi+0x88]
   1fcd8:	lea    r12,[rsp+0x340]
   1fce0:	lea    esi,[rax-0x1]
   1fce3:	mov    rax,QWORD PTR [rdi+0xd0]
   1fcea:	lea    rdi,[rax+0x8]
   1fcee:	call   3ad60 <FSet>
   1fcf3:	mov    eax,DWORD PTR [r15+0x88]
   1fcfa:	pxor   xmm0,xmm0
   1fcfe:	lea    esi,[rax-0x1]
   1fd01:	mov    rax,QWORD PTR [r15+0xd8]
   1fd08:	lea    rdi,[rax+0x4]
   1fd0c:	call   3ad60 <FSet>
   1fd11:	mov    rax,QWORD PTR [r15+0xd0]
   1fd18:	movss  xmm0,DWORD PTR [r15+0xa8]
   1fd21:	movsd  xmm2,QWORD PTR [rip+0x1e0c7]        # 3ddf0 <_IO_stdin_used+0xdf0>
   1fd29:	movsxd rcx,DWORD PTR [r15+0x88]
   1fd30:	movss  xmm1,DWORD PTR [rax+0x4]
   1fd35:	mov    rdx,QWORD PTR [r15+0xd8]
   1fd3c:	addss  xmm1,xmm0
   1fd40:	cvtss2sd xmm0,xmm0
   1fd44:	addss  xmm1,DWORD PTR [rip+0x204a4]        # 401f0 <defmq.7318+0x30>
   1fd4c:	addsd  xmm0,xmm2
   1fd50:	cvtss2sd xmm1,xmm1
   1fd54:	divsd  xmm0,xmm1
   1fd58:	cvtsd2ss xmm0,xmm0
   1fd5c:	movss  DWORD PTR [r15+0xa8],xmm0
   1fd65:	pxor   xmm0,xmm0
   1fd69:	cvtss2sd xmm0,DWORD PTR [rax+0x4]
   1fd6e:	addsd  xmm0,xmm2
   1fd72:	divsd  xmm0,xmm1
   1fd76:	cvtsd2ss xmm0,xmm0
   1fd7a:	movss  DWORD PTR [rax+0x4],xmm0
   1fd7f:	mov    rax,rcx
   1fd82:	mov    DWORD PTR [rdx+rcx*4],0x3f800000
   1fd89:	lea    rcx,[rbp+0x1c2c]
   1fd90:	mov    QWORD PTR [rsp+0x8],rcx
   1fd95:	cmp    eax,0x1
   1fd98:	jle    1fff3 <P7PriorifyHMM+0x353>
   1fd9e:	lea    rax,[rbp+0x5dd0]
   1fda5:	mov    ebx,0x4
   1fdaa:	lea    r14,[rsp+0x20]
   1fdaf:	mov    DWORD PTR [rsp+0x4],0x1
   1fdb7:	lea    r13,[rsp+0x660]
   1fdbf:	mov    QWORD PTR [rsp+0x10],rax
   1fdc4:	lea    rax,[rbp+0x8]
   1fdc8:	mov    QWORD PTR [rsp+0x18],rax
   1fdcd:	mov    rax,r13
   1fdd0:	lea    r12,[rsp+0x340]
   1fdd8:	mov    r13,rbp
   1fddb:	mov    rbp,rax
   1fdde:	jmp    1ff1a <P7PriorifyHMM+0x27a>
   1fde3:	nop    DWORD PTR [rax+rax*1+0x0]
   1fde8:	cmp    eax,edx
   1fdea:	jge    1ff98 <P7PriorifyHMM+0x2f8>
   1fdf0:	mov    esi,edx
   1fdf2:	pxor   xmm0,xmm0
   1fdf6:	mov    rdi,r14
   1fdf9:	call   3ad60 <FSet>
   1fdfe:	mov    rax,QWORD PTR [r15+0x58]
   1fe02:	mov    edx,DWORD PTR [r13+0x1908]
   1fe09:	movsxd rax,DWORD PTR [rax+rbx*1]
   1fe0d:	mov    DWORD PTR [rsp+rax*4+0x20],0x3f800000
   1fe15:	mov    rax,QWORD PTR [r15+0x60]
   1fe19:	test   rax,rax
   1fe1c:	je     1ff58 <P7PriorifyHMM+0x2b8>
   1fe22:	mov    eax,DWORD PTR [rax+rbx*1]
   1fe25:	test   eax,eax
   1fe27:	js     1ff58 <P7PriorifyHMM+0x2b8>
   1fe2d:	cmp    eax,edx
   1fe2f:	jge    1ffd0 <P7PriorifyHMM+0x330>
   1fe35:	mov    esi,edx
   1fe37:	pxor   xmm0,xmm0
   1fe3b:	mov    rdi,r12
   1fe3e:	call   3ad60 <FSet>
   1fe43:	mov    rax,QWORD PTR [r15+0x60]
   1fe47:	mov    edx,DWORD PTR [r13+0x5aac]
   1fe4e:	movsxd rax,DWORD PTR [rax+rbx*1]
   1fe52:	mov    DWORD PTR [rsp+rax*4+0x340],0x3f800000
   1fe5d:	mov    rax,QWORD PTR [r15+0x68]
   1fe61:	test   rax,rax
   1fe64:	je     1ff80 <P7PriorifyHMM+0x2e0>
   1fe6a:	mov    eax,DWORD PTR [rax+rbx*1]
   1fe6d:	test   eax,eax
   1fe6f:	js     1ff80 <P7PriorifyHMM+0x2e0>
   1fe75:	cmp    eax,edx
   1fe77:	jge    1ffb0 <P7PriorifyHMM+0x310>
   1fe7d:	pxor   xmm0,xmm0
   1fe81:	mov    esi,edx
   1fe83:	mov    rdi,rbp
   1fe86:	call   3ad60 <FSet>
   1fe8b:	mov    rax,QWORD PTR [r15+0x68]
   1fe8f:	movsxd rax,DWORD PTR [rax+rbx*1]
   1fe93:	mov    DWORD PTR [rsp+rax*4+0x660],0x3f800000
   1fe9e:	mov    rax,QWORD PTR [r15+0x90]
   1fea5:	mov    rdx,r14
   1fea8:	mov    rsi,r13
   1feab:	mov    rdi,QWORD PTR [rax+rbx*2]
   1feaf:	call   1f9a0 <P7PriorifyTransitionVector>
   1feb4:	mov    r8,QWORD PTR [rsp+0x8]
   1feb9:	xor    r9d,r9d
   1febc:	mov    rcx,r12
   1febf:	mov    rax,QWORD PTR [r15+0x98]
   1fec6:	mov    edx,DWORD PTR [r13+0x1908]
   1fecd:	mov    rsi,r13
   1fed0:	mov    rdi,QWORD PTR [rax+rbx*2]
   1fed4:	call   1f700 <P7PriorifyEmissionVector>
   1fed9:	mov    r8,QWORD PTR [rsp+0x10]
   1fede:	mov    rcx,rbp
   1fee1:	xor    r9d,r9d
   1fee4:	mov    rax,QWORD PTR [r15+0xa0]
   1feeb:	mov    edx,DWORD PTR [r13+0x5aac]
   1fef2:	mov    rsi,r13
   1fef5:	mov    rdi,QWORD PTR [rax+rbx*2]
   1fef9:	add    rbx,0x4
   1fefd:	call   1f700 <P7PriorifyEmissionVector>
   1ff02:	add    DWORD PTR [rsp+0x4],0x1
   1ff07:	mov    ecx,DWORD PTR [rsp+0x4]
   1ff0b:	movsxd rax,DWORD PTR [r15+0x88]
   1ff12:	cmp    eax,ecx
   1ff14:	jle    1fff0 <P7PriorifyHMM+0x350>
   1ff1a:	mov    rax,QWORD PTR [r15+0x58]
   1ff1e:	mov    edx,DWORD PTR [r13+0x4]
   1ff22:	test   rax,rax
   1ff25:	je     1ff32 <P7PriorifyHMM+0x292>
   1ff27:	mov    eax,DWORD PTR [rax+rbx*1]
   1ff2a:	test   eax,eax
   1ff2c:	jns    1fde8 <P7PriorifyHMM+0x148>
   1ff32:	mov    rsi,QWORD PTR [rsp+0x18]
   1ff37:	mov    rdi,r14
   1ff3a:	call   3aef0 <FCopy>
   1ff3f:	mov    rax,QWORD PTR [r15+0x60]
   1ff43:	mov    edx,DWORD PTR [r13+0x1908]
   1ff4a:	test   rax,rax
   1ff4d:	jne    1fe22 <P7PriorifyHMM+0x182>
   1ff53:	nop    DWORD PTR [rax+rax*1+0x0]
   1ff58:	lea    rsi,[r13+0x190c]
   1ff5f:	mov    rdi,r12
   1ff62:	call   3aef0 <FCopy>
   1ff67:	mov    rax,QWORD PTR [r15+0x68]
   1ff6b:	mov    edx,DWORD PTR [r13+0x5aac]
   1ff72:	test   rax,rax
   1ff75:	jne    1fe6a <P7PriorifyHMM+0x1ca>
   1ff7b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ff80:	lea    rsi,[r13+0x5ab0]
   1ff87:	mov    rdi,rbp
   1ff8a:	call   3aef0 <FCopy>
   1ff8f:	jmp    1fe9e <P7PriorifyHMM+0x1fe>
   1ff94:	nop    DWORD PTR [rax+0x0]
   1ff98:	lea    rdi,[rip+0x1fa6f]        # 3fa0e <xpam120+0xcae>
   1ff9f:	xor    eax,eax
   1ffa1:	call   317f0 <Die>
   1ffa6:	mov    edx,DWORD PTR [r13+0x4]
   1ffaa:	jmp    1fdf0 <P7PriorifyHMM+0x150>
   1ffaf:	nop
   1ffb0:	lea    rdi,[rip+0x1fa93]        # 3fa4a <xpam120+0xcea>
   1ffb7:	xor    eax,eax
   1ffb9:	call   317f0 <Die>
   1ffbe:	mov    edx,DWORD PTR [r13+0x5aac]
   1ffc5:	jmp    1fe7d <P7PriorifyHMM+0x1dd>
   1ffca:	nop    WORD PTR [rax+rax*1+0x0]
   1ffd0:	lea    rdi,[rip+0x1fa55]        # 3fa2c <xpam120+0xccc>
   1ffd7:	xor    eax,eax
   1ffd9:	call   317f0 <Die>
   1ffde:	mov    edx,DWORD PTR [r13+0x1908]
   1ffe5:	jmp    1fe35 <P7PriorifyHMM+0x195>
   1ffea:	nop    WORD PTR [rax+rax*1+0x0]
   1fff0:	mov    rbp,r13
   1fff3:	mov    rdx,QWORD PTR [r15+0x60]
   1fff7:	mov    esi,DWORD PTR [rbp+0x1908]
   1fffd:	test   rdx,rdx
   20000:	je     20040 <P7PriorifyHMM+0x3a0>
   20002:	mov    eax,DWORD PTR [rdx+rax*4]
   20005:	test   eax,eax
   20007:	js     20040 <P7PriorifyHMM+0x3a0>
   20009:	cmp    eax,esi
   2000b:	jge    200b0 <P7PriorifyHMM+0x410>
   20011:	pxor   xmm0,xmm0
   20015:	mov    rdi,r12
   20018:	call   3ad60 <FSet>
   2001d:	movsxd rax,DWORD PTR [r15+0x88]
   20024:	mov    rdx,QWORD PTR [r15+0x60]
   20028:	movsxd rdx,DWORD PTR [rdx+rax*4]
   2002c:	mov    DWORD PTR [rsp+rdx*4+0x340],0x3f800000
   20037:	jmp    2005b <P7PriorifyHMM+0x3bb>
   20039:	nop    DWORD PTR [rax+0x0]
   20040:	lea    r8,[rbp+0x190c]
   20047:	mov    edx,esi
   20049:	mov    rdi,r12
   2004c:	mov    rsi,r8
   2004f:	call   3aef0 <FCopy>
   20054:	movsxd rax,DWORD PTR [r15+0x88]
   2005b:	mov    rcx,QWORD PTR [r15+0x98]
   20062:	mov    edx,DWORD PTR [rbp+0x1908]
   20068:	xor    r9d,r9d
   2006b:	mov    rsi,rbp
   2006e:	mov    r8,QWORD PTR [rsp+0x8]
   20073:	mov    rdi,QWORD PTR [rcx+rax*8]
   20077:	mov    rcx,r12
   2007a:	call   1f700 <P7PriorifyEmissionVector>
   2007f:	mov    rdi,r15
   20082:	call   1b490 <Plan7Renormalize>
   20087:	mov    rax,QWORD PTR [rsp+0x988]
   2008f:	xor    rax,QWORD PTR fs:0x28
   20098:	jne    200c9 <P7PriorifyHMM+0x429>
   2009a:	add    rsp,0x998
   200a1:	pop    rbx
   200a2:	pop    rbp
   200a3:	pop    r12
   200a5:	pop    r13
   200a7:	pop    r14
   200a9:	pop    r15
   200ab:	ret    
   200ac:	nop    DWORD PTR [rax+0x0]
   200b0:	lea    rdi,[rip+0x1f975]        # 3fa2c <xpam120+0xccc>
   200b7:	xor    eax,eax
   200b9:	call   317f0 <Die>
   200be:	mov    esi,DWORD PTR [rbp+0x1908]
   200c4:	jmp    20011 <P7PriorifyHMM+0x371>
   200c9:	call   3570 <__stack_chk_fail@plt>
   200ce:	xchg   ax,ax

00000000000200d0 <hit_comparison>:
   200d0:	endbr64 
   200d4:	mov    rax,QWORD PTR [rdi]
   200d7:	movsd  xmm1,QWORD PTR [rax]
   200db:	mov    rax,QWORD PTR [rsi]
   200de:	movsd  xmm0,QWORD PTR [rax]
   200e2:	mov    eax,0x1
   200e7:	comisd xmm0,xmm1
   200eb:	ja     200f8 <hit_comparison+0x28>
   200ed:	xor    eax,eax
   200ef:	comisd xmm1,xmm0
   200f3:	seta   al
   200f6:	neg    eax
   200f8:	ret    
   200f9:	nop    DWORD PTR [rax+0x0]

0000000000020100 <AllocTophits>:
   20100:	endbr64 
   20104:	push   r12
   20106:	mov    edx,0x20
   2010b:	mov    esi,0x52
   20110:	push   rbx
   20111:	mov    ebx,edi
   20113:	lea    rdi,[rip+0x200da]        # 401f4 <defmq.7318+0x34>
   2011a:	sub    rsp,0x8
   2011e:	call   36810 <sre_malloc>
   20123:	mov    esi,0x54
   20128:	lea    rdi,[rip+0x200c5]        # 401f4 <defmq.7318+0x34>
   2012f:	mov    r12,rax
   20132:	mov    QWORD PTR [rax],0x0
   20139:	movsxd rax,ebx
   2013c:	lea    rdx,[rax+rax*2]
   20140:	lea    rdx,[rax+rdx*4]
   20144:	shl    rdx,0x3
   20148:	call   36810 <sre_malloc>
   2014d:	mov    DWORD PTR [r12+0x10],ebx
   20152:	mov    QWORD PTR [r12+0x8],rax
   20157:	mov    rax,r12
   2015a:	mov    DWORD PTR [r12+0x14],0x0
   20163:	mov    DWORD PTR [r12+0x18],ebx
   20168:	add    rsp,0x8
   2016c:	pop    rbx
   2016d:	pop    r12
   2016f:	ret    

0000000000020170 <GrowTophits>:
   20170:	endbr64 
   20174:	push   rbx
   20175:	mov    eax,DWORD PTR [rdi+0x18]
   20178:	mov    rbx,rdi
   2017b:	mov    esi,0x5d
   20180:	add    eax,DWORD PTR [rdi+0x10]
   20183:	cdqe   
   20185:	lea    rdx,[rax+rax*2]
   20189:	lea    rcx,[rax+rdx*4]
   2018d:	mov    rdx,QWORD PTR [rdi+0x8]
   20191:	lea    rdi,[rip+0x2005c]        # 401f4 <defmq.7318+0x34>
   20198:	shl    rcx,0x3
   2019c:	call   36860 <sre_realloc>
   201a1:	mov    QWORD PTR [rbx+0x8],rax
   201a5:	mov    eax,DWORD PTR [rbx+0x18]
   201a8:	add    DWORD PTR [rbx+0x10],eax
   201ab:	pop    rbx
   201ac:	ret    
   201ad:	nop    DWORD PTR [rax]

00000000000201b0 <AllocFancyAli>:
   201b0:	endbr64 
   201b4:	sub    rsp,0x8
   201b8:	mov    edx,0x48
   201bd:	mov    esi,0x75
   201c2:	lea    rdi,[rip+0x2002b]        # 401f4 <defmq.7318+0x34>
   201c9:	call   36810 <sre_malloc>
   201ce:	mov    QWORD PTR [rax+0x20],0x0
   201d6:	mov    QWORD PTR [rax+0x18],0x0
   201de:	mov    QWORD PTR [rax+0x10],0x0
   201e6:	mov    QWORD PTR [rax+0x8],0x0
   201ee:	mov    QWORD PTR [rax],0x0
   201f5:	mov    QWORD PTR [rax+0x30],0x0
   201fd:	mov    QWORD PTR [rax+0x38],0x0
   20205:	mov    QWORD PTR [rax+0x40],0x0
   2020d:	add    rsp,0x8
   20211:	ret    
   20212:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2021d:	nop    DWORD PTR [rax]

0000000000020220 <FreeFancyAli>:
   20220:	endbr64 
   20224:	test   rdi,rdi
   20227:	je     202a0 <FreeFancyAli+0x80>
   20229:	push   rbp
   2022a:	mov    rbp,rdi
   2022d:	mov    rdi,QWORD PTR [rdi]
   20230:	test   rdi,rdi
   20233:	je     2023a <FreeFancyAli+0x1a>
   20235:	call   3460 <free@plt>
   2023a:	mov    rdi,QWORD PTR [rbp+0x8]
   2023e:	test   rdi,rdi
   20241:	je     20248 <FreeFancyAli+0x28>
   20243:	call   3460 <free@plt>
   20248:	mov    rdi,QWORD PTR [rbp+0x10]
   2024c:	test   rdi,rdi
   2024f:	je     20256 <FreeFancyAli+0x36>
   20251:	call   3460 <free@plt>
   20256:	mov    rdi,QWORD PTR [rbp+0x18]
   2025a:	test   rdi,rdi
   2025d:	je     20264 <FreeFancyAli+0x44>
   2025f:	call   3460 <free@plt>
   20264:	mov    rdi,QWORD PTR [rbp+0x20]
   20268:	test   rdi,rdi
   2026b:	je     20272 <FreeFancyAli+0x52>
   2026d:	call   3460 <free@plt>
   20272:	mov    rdi,QWORD PTR [rbp+0x30]
   20276:	test   rdi,rdi
   20279:	je     20280 <FreeFancyAli+0x60>
   2027b:	call   3460 <free@plt>
   20280:	mov    rdi,QWORD PTR [rbp+0x38]
   20284:	test   rdi,rdi
   20287:	je     2028e <FreeFancyAli+0x6e>
   20289:	call   3460 <free@plt>
   2028e:	mov    rdi,rbp
   20291:	pop    rbp
   20292:	jmp    3460 <free@plt>
   20297:	nop    WORD PTR [rax+rax*1+0x0]
   202a0:	ret    
   202a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   202ac:	nop    DWORD PTR [rax+0x0]

00000000000202b0 <FreeTophits>:
   202b0:	endbr64 
   202b4:	push   r12
   202b6:	push   rbp
   202b7:	mov    rbp,rdi
   202ba:	mov    eax,DWORD PTR [rbp+0x14]
   202bd:	push   rbx
   202be:	mov    rdi,QWORD PTR [rdi+0x8]
   202c2:	test   eax,eax
   202c4:	jle    20342 <FreeTophits+0x92>
   202c6:	xor    ebx,ebx
   202c8:	xor    r12d,r12d
   202cb:	nop    DWORD PTR [rax+rax*1+0x0]
   202d0:	lea    rax,[rdi+rbx*1]
   202d4:	mov    r8,QWORD PTR [rax+0x60]
   202d8:	test   r8,r8
   202db:	je     202ed <FreeTophits+0x3d>
   202dd:	mov    rdi,r8
   202e0:	call   20220 <FreeFancyAli>
   202e5:	mov    rdi,QWORD PTR [rbp+0x8]
   202e9:	lea    rax,[rdi+rbx*1]
   202ed:	mov    r8,QWORD PTR [rax+0x28]
   202f1:	test   r8,r8
   202f4:	je     20306 <FreeTophits+0x56>
   202f6:	mov    rdi,r8
   202f9:	call   3460 <free@plt>
   202fe:	mov    rdi,QWORD PTR [rbp+0x8]
   20302:	lea    rax,[rdi+rbx*1]
   20306:	mov    r8,QWORD PTR [rax+0x30]
   2030a:	test   r8,r8
   2030d:	je     2031f <FreeTophits+0x6f>
   2030f:	mov    rdi,r8
   20312:	call   3460 <free@plt>
   20317:	mov    rdi,QWORD PTR [rbp+0x8]
   2031b:	lea    rax,[rdi+rbx*1]
   2031f:	mov    r8,QWORD PTR [rax+0x38]
   20323:	test   r8,r8
   20326:	je     20334 <FreeTophits+0x84>
   20328:	mov    rdi,r8
   2032b:	call   3460 <free@plt>
   20330:	mov    rdi,QWORD PTR [rbp+0x8]
   20334:	add    r12d,0x1
   20338:	add    rbx,0x68
   2033c:	cmp    DWORD PTR [rbp+0x14],r12d
   20340:	jg     202d0 <FreeTophits+0x20>
   20342:	call   3460 <free@plt>
   20347:	mov    rdi,QWORD PTR [rbp+0x0]
   2034b:	test   rdi,rdi
   2034e:	je     20355 <FreeTophits+0xa5>
   20350:	call   3460 <free@plt>
   20355:	pop    rbx
   20356:	mov    rdi,rbp
   20359:	pop    rbp
   2035a:	pop    r12
   2035c:	jmp    3460 <free@plt>
   20361:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2036c:	nop    DWORD PTR [rax+0x0]

0000000000020370 <RegisterHit>:
   20370:	endbr64 
   20374:	push   r15
   20376:	mov    r15,rsi
   20379:	push   r14
   2037b:	mov    r14,rdx
   2037e:	push   r13
   20380:	mov    r13,rcx
   20383:	push   r12
   20385:	mov    r12d,r8d
   20388:	push   rbp
   20389:	mov    ebp,r9d
   2038c:	push   rbx
   2038d:	mov    rbx,rdi
   20390:	sub    rsp,0x38
   20394:	movsxd rax,DWORD PTR [rdi+0x14]
   20398:	movsd  QWORD PTR [rsp+0x8],xmm0
   2039e:	movsd  QWORD PTR [rsp+0x10],xmm1
   203a4:	movss  DWORD PTR [rsp+0x20],xmm2
   203aa:	movsd  QWORD PTR [rsp+0x18],xmm3
   203b0:	movss  DWORD PTR [rsp+0x24],xmm4
   203b6:	cmp    eax,DWORD PTR [rdi+0x10]
   203b9:	je     204d0 <RegisterHit+0x160>
   203bf:	lea    rdx,[rax+rax*2]
   203c3:	mov    rdi,r15
   203c6:	lea    rdx,[rax+rdx*4]
   203ca:	mov    rax,QWORD PTR [rbx+0x8]
   203ce:	lea    rdx,[rax+rdx*8]
   203d2:	mov    QWORD PTR [rsp+0x28],rdx
   203d7:	call   36670 <Strdup>
   203dc:	mov    rdx,QWORD PTR [rsp+0x28]
   203e1:	mov    rdi,r14
   203e4:	mov    QWORD PTR [rdx+0x28],rax
   203e8:	movsxd rax,DWORD PTR [rbx+0x14]
   203ec:	lea    rdx,[rax+rax*2]
   203f0:	lea    rdx,[rax+rdx*4]
   203f4:	mov    rax,QWORD PTR [rbx+0x8]
   203f8:	lea    r15,[rax+rdx*8]
   203fc:	call   36670 <Strdup>
   20401:	mov    rdi,r13
   20404:	mov    QWORD PTR [r15+0x30],rax
   20408:	movsxd rax,DWORD PTR [rbx+0x14]
   2040c:	lea    rdx,[rax+rax*2]
   20410:	lea    rdx,[rax+rdx*4]
   20414:	mov    rax,QWORD PTR [rbx+0x8]
   20418:	lea    r14,[rax+rdx*8]
   2041c:	call   36670 <Strdup>
   20421:	movsd  xmm5,QWORD PTR [rsp+0x8]
   20427:	movsd  xmm6,QWORD PTR [rsp+0x10]
   2042d:	mov    QWORD PTR [r14+0x38],rax
   20431:	movsxd rax,DWORD PTR [rbx+0x14]
   20435:	movss  xmm7,DWORD PTR [rsp+0x20]
   2043b:	lea    rcx,[rax+rax*2]
   2043f:	mov    rdx,rax
   20442:	lea    rcx,[rax+rcx*4]
   20446:	mov    rax,QWORD PTR [rbx+0x8]
   2044a:	add    edx,0x1
   2044d:	lea    rax,[rax+rcx*8]
   20451:	mov    ecx,DWORD PTR [rsp+0x70]
   20455:	movsd  QWORD PTR [rax],xmm5
   20459:	movsd  xmm5,QWORD PTR [rsp+0x18]
   2045f:	mov    DWORD PTR [rax+0x48],ecx
   20462:	mov    ecx,DWORD PTR [rsp+0x78]
   20466:	movsd  QWORD PTR [rax+0x10],xmm6
   2046b:	movss  xmm6,DWORD PTR [rsp+0x24]
   20471:	mov    DWORD PTR [rax+0x4c],ecx
   20474:	mov    ecx,DWORD PTR [rsp+0x80]
   2047b:	mov    DWORD PTR [rax+0x40],r12d
   2047f:	mov    DWORD PTR [rax+0x50],ecx
   20482:	mov    ecx,DWORD PTR [rsp+0x88]
   20489:	mov    DWORD PTR [rax+0x44],ebp
   2048c:	mov    DWORD PTR [rax+0x54],ecx
   2048f:	mov    ecx,DWORD PTR [rsp+0x90]
   20496:	movss  DWORD PTR [rax+0x8],xmm7
   2049b:	mov    DWORD PTR [rax+0x58],ecx
   2049e:	mov    ecx,DWORD PTR [rsp+0x98]
   204a5:	movsd  QWORD PTR [rax+0x20],xmm5
   204aa:	mov    DWORD PTR [rax+0x5c],ecx
   204ad:	mov    rcx,QWORD PTR [rsp+0xa0]
   204b5:	movss  DWORD PTR [rax+0x18],xmm6
   204ba:	mov    QWORD PTR [rax+0x60],rcx
   204be:	mov    DWORD PTR [rbx+0x14],edx
   204c1:	add    rsp,0x38
   204c5:	pop    rbx
   204c6:	pop    rbp
   204c7:	pop    r12
   204c9:	pop    r13
   204cb:	pop    r14
   204cd:	pop    r15
   204cf:	ret    
   204d0:	call   20170 <GrowTophits>
   204d5:	movsxd rax,DWORD PTR [rbx+0x14]
   204d9:	jmp    203bf <RegisterHit+0x4f>
   204de:	xchg   ax,ax

00000000000204e0 <GetRankedHit>:
   204e0:	endbr64 
   204e4:	push   r15
   204e6:	push   r14
   204e8:	push   r13
   204ea:	push   r12
   204ec:	push   rbp
   204ed:	push   rbx
   204ee:	mov    rax,QWORD PTR [rsp+0x90]
   204f6:	mov    r15,QWORD PTR [rsp+0x38]
   204fb:	mov    r14,QWORD PTR [rsp+0x40]
   20500:	mov    r13,QWORD PTR [rsp+0x48]
   20505:	mov    r12,QWORD PTR [rsp+0x50]
   2050a:	mov    rbp,QWORD PTR [rsp+0x58]
   2050f:	mov    QWORD PTR [rsp-0x8],rax
   20514:	mov    rbx,QWORD PTR [rsp+0x60]
   20519:	mov    r11,QWORD PTR [rsp+0x88]
   20521:	test   rdx,rdx
   20524:	je     20539 <GetRankedHit+0x59>
   20526:	mov    r10,QWORD PTR [rdi]
   20529:	movsxd rax,esi
   2052c:	mov    rax,QWORD PTR [r10+rax*8]
   20530:	movsd  xmm0,QWORD PTR [rax+0x10]
   20535:	movsd  QWORD PTR [rdx],xmm0
   20539:	test   rcx,rcx
   2053c:	je     20551 <GetRankedHit+0x71>
   2053e:	mov    rdx,QWORD PTR [rdi]
   20541:	movsxd rax,esi
   20544:	mov    rax,QWORD PTR [rdx+rax*8]
   20548:	movss  xmm0,DWORD PTR [rax+0x8]
   2054d:	movss  DWORD PTR [rcx],xmm0
   20551:	test   r8,r8
   20554:	je     2056a <GetRankedHit+0x8a>
   20556:	mov    rdx,QWORD PTR [rdi]
   20559:	movsxd rax,esi
   2055c:	mov    rax,QWORD PTR [rdx+rax*8]
   20560:	movsd  xmm0,QWORD PTR [rax+0x20]
   20565:	movsd  QWORD PTR [r8],xmm0
   2056a:	test   r9,r9
   2056d:	je     20583 <GetRankedHit+0xa3>
   2056f:	mov    rdx,QWORD PTR [rdi]
   20572:	movsxd rax,esi
   20575:	mov    rax,QWORD PTR [rdx+rax*8]
   20579:	movss  xmm0,DWORD PTR [rax+0x18]
   2057e:	movss  DWORD PTR [r9],xmm0
   20583:	test   r15,r15
   20586:	je     20599 <GetRankedHit+0xb9>
   20588:	mov    rdx,QWORD PTR [rdi]
   2058b:	movsxd rax,esi
   2058e:	mov    rax,QWORD PTR [rdx+rax*8]
   20592:	mov    rax,QWORD PTR [rax+0x28]
   20596:	mov    QWORD PTR [r15],rax
   20599:	test   r14,r14
   2059c:	je     205af <GetRankedHit+0xcf>
   2059e:	mov    rdx,QWORD PTR [rdi]
   205a1:	movsxd rax,esi
   205a4:	mov    rax,QWORD PTR [rdx+rax*8]
   205a8:	mov    rax,QWORD PTR [rax+0x30]
   205ac:	mov    QWORD PTR [r14],rax
   205af:	test   r13,r13
   205b2:	je     205c6 <GetRankedHit+0xe6>
   205b4:	mov    rdx,QWORD PTR [rdi]
   205b7:	movsxd rax,esi
   205ba:	mov    rax,QWORD PTR [rdx+rax*8]
   205be:	mov    rax,QWORD PTR [rax+0x38]
   205c2:	mov    QWORD PTR [r13+0x0],rax
   205c6:	test   r12,r12
   205c9:	je     205dc <GetRankedHit+0xfc>
   205cb:	mov    rdx,QWORD PTR [rdi]
   205ce:	movsxd rax,esi
   205d1:	mov    rax,QWORD PTR [rdx+rax*8]
   205d5:	mov    eax,DWORD PTR [rax+0x40]
   205d8:	mov    DWORD PTR [r12],eax
   205dc:	test   rbp,rbp
   205df:	je     205f1 <GetRankedHit+0x111>
   205e1:	mov    rdx,QWORD PTR [rdi]
   205e4:	movsxd rax,esi
   205e7:	mov    rax,QWORD PTR [rdx+rax*8]
   205eb:	mov    eax,DWORD PTR [rax+0x44]
   205ee:	mov    DWORD PTR [rbp+0x0],eax
   205f1:	test   rbx,rbx
   205f4:	je     20605 <GetRankedHit+0x125>
   205f6:	mov    rdx,QWORD PTR [rdi]
   205f9:	movsxd rax,esi
   205fc:	mov    rax,QWORD PTR [rdx+rax*8]
   20600:	mov    eax,DWORD PTR [rax+0x48]
   20603:	mov    DWORD PTR [rbx],eax
   20605:	cmp    QWORD PTR [rsp+0x68],0x0
   2060b:	je     20621 <GetRankedHit+0x141>
   2060d:	mov    rdx,QWORD PTR [rdi]
   20610:	movsxd rax,esi
   20613:	mov    rbx,QWORD PTR [rsp+0x68]
   20618:	mov    rax,QWORD PTR [rdx+rax*8]
   2061c:	mov    eax,DWORD PTR [rax+0x4c]
   2061f:	mov    DWORD PTR [rbx],eax
   20621:	cmp    QWORD PTR [rsp+0x70],0x0
   20627:	je     2063d <GetRankedHit+0x15d>
   20629:	mov    rdx,QWORD PTR [rdi]
   2062c:	movsxd rax,esi
   2062f:	mov    rbx,QWORD PTR [rsp+0x70]
   20634:	mov    rax,QWORD PTR [rdx+rax*8]
   20638:	mov    eax,DWORD PTR [rax+0x50]
   2063b:	mov    DWORD PTR [rbx],eax
   2063d:	cmp    QWORD PTR [rsp+0x78],0x0
   20643:	je     20659 <GetRankedHit+0x179>
   20645:	mov    rdx,QWORD PTR [rdi]
   20648:	movsxd rax,esi
   2064b:	mov    rbx,QWORD PTR [rsp+0x78]
   20650:	mov    rax,QWORD PTR [rdx+rax*8]
   20654:	mov    eax,DWORD PTR [rax+0x54]
   20657:	mov    DWORD PTR [rbx],eax
   20659:	cmp    QWORD PTR [rsp+0x80],0x0
   20662:	je     2067b <GetRankedHit+0x19b>
   20664:	mov    rdx,QWORD PTR [rdi]
   20667:	movsxd rax,esi
   2066a:	mov    rcx,QWORD PTR [rsp+0x80]
   20672:	mov    rax,QWORD PTR [rdx+rax*8]
   20676:	mov    eax,DWORD PTR [rax+0x58]
   20679:	mov    DWORD PTR [rcx],eax
   2067b:	test   r11,r11
   2067e:	je     20690 <GetRankedHit+0x1b0>
   20680:	mov    rdx,QWORD PTR [rdi]
   20683:	movsxd rax,esi
   20686:	mov    rax,QWORD PTR [rdx+rax*8]
   2068a:	mov    eax,DWORD PTR [rax+0x5c]
   2068d:	mov    DWORD PTR [r11],eax
   20690:	mov    rbx,QWORD PTR [rsp-0x8]
   20695:	test   rbx,rbx
   20698:	je     206ab <GetRankedHit+0x1cb>
   2069a:	mov    rax,QWORD PTR [rdi]
   2069d:	movsxd rsi,esi
   206a0:	mov    rax,QWORD PTR [rax+rsi*8]
   206a4:	mov    rax,QWORD PTR [rax+0x60]
   206a8:	mov    QWORD PTR [rbx],rax
   206ab:	pop    rbx
   206ac:	pop    rbp
   206ad:	pop    r12
   206af:	pop    r13
   206b1:	pop    r14
   206b3:	pop    r15
   206b5:	ret    
   206b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000206c0 <TophitsMaxName>:
   206c0:	endbr64 
   206c4:	push   r12
   206c6:	push   rbp
   206c7:	push   rbx
   206c8:	mov    eax,DWORD PTR [rdi+0x14]
   206cb:	test   eax,eax
   206cd:	jle    20710 <TophitsMaxName+0x50>
   206cf:	sub    eax,0x1
   206d2:	mov    rdx,QWORD PTR [rdi+0x8]
   206d6:	xor    r12d,r12d
   206d9:	lea    rcx,[rax+rax*2]
   206dd:	lea    rax,[rax+rcx*4]
   206e1:	lea    rbx,[rdx+0x28]
   206e5:	lea    rbp,[rdx+rax*8+0x90]
   206ed:	nop    DWORD PTR [rax]
   206f0:	mov    rdi,QWORD PTR [rbx]
   206f3:	call   3560 <strlen@plt>
   206f8:	cmp    r12d,eax
   206fb:	cmovl  r12d,eax
   206ff:	add    rbx,0x68
   20703:	cmp    rbx,rbp
   20706:	jne    206f0 <TophitsMaxName+0x30>
   20708:	mov    eax,r12d
   2070b:	pop    rbx
   2070c:	pop    rbp
   2070d:	pop    r12
   2070f:	ret    
   20710:	xor    r12d,r12d
   20713:	pop    rbx
   20714:	pop    rbp
   20715:	mov    eax,r12d
   20718:	pop    r12
   2071a:	ret    
   2071b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000020720 <FullSortTophits>:
   20720:	endbr64 
   20724:	movsxd rdx,DWORD PTR [rdi+0x14]
   20728:	test   edx,edx
   2072a:	jne    20730 <FullSortTophits+0x10>
   2072c:	ret    
   2072d:	nop    DWORD PTR [rax]
   20730:	push   rbx
   20731:	shl    rdx,0x3
   20735:	mov    rbx,rdi
   20738:	mov    esi,0x12c
   2073d:	lea    rdi,[rip+0x1fab0]        # 401f4 <defmq.7318+0x34>
   20744:	call   36810 <sre_malloc>
   20749:	mov    r9d,DWORD PTR [rbx+0x14]
   2074d:	mov    QWORD PTR [rbx],rax
   20750:	mov    rdi,rax
   20753:	test   r9d,r9d
   20756:	jle    2078e <FullSortTophits+0x6e>
   20758:	mov    rdx,rax
   2075b:	lea    eax,[r9-0x1]
   2075f:	xor    ecx,ecx
   20761:	lea    r8,[rdi+rax*8+0x8]
   20766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20770:	mov    rsi,QWORD PTR [rbx+0x8]
   20774:	add    rdx,0x8
   20778:	add    rsi,rcx
   2077b:	add    rcx,0x68
   2077f:	mov    QWORD PTR [rdx-0x8],rsi
   20783:	cmp    rdx,r8
   20786:	jne    20770 <FullSortTophits+0x50>
   20788:	cmp    r9d,0x1
   2078c:	jg     20790 <FullSortTophits+0x70>
   2078e:	pop    rbx
   2078f:	ret    
   20790:	lea    rcx,[rip+0xfffffffffffff939]        # 200d0 <hit_comparison>
   20797:	mov    edx,0x8
   2079c:	mov    esi,r9d
   2079f:	pop    rbx
   207a0:	xor    eax,eax
   207a2:	jmp    236d0 <specqsort>
   207a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000207b0 <TophitsReport>:
   207b0:	endbr64 
   207b4:	push   r15
   207b6:	mov    r15,rdi
   207b9:	push   r14
   207bb:	push   r13
   207bd:	push   r12
   207bf:	push   rbp
   207c0:	push   rbx
   207c1:	sub    rsp,0x18
   207c5:	imul   ebx,DWORD PTR [rdi+0x10],0x68
   207c9:	mov    eax,DWORD PTR [rdi+0x14]
   207cc:	mov    DWORD PTR [rsp+0xc],esi
   207d0:	movsd  QWORD PTR [rsp],xmm0
   207d5:	add    ebx,0x20
   207d8:	test   eax,eax
   207da:	jle    20958 <TophitsReport+0x1a8>
   207e0:	lea    r13d,[rax-0x1]
   207e4:	mov    rcx,QWORD PTR [rdi+0x8]
   207e8:	lea    rax,[r13+r13*2+0x0]
   207ed:	lea    rax,[r13+rax*4+0x0]
   207f2:	lea    r12,[rcx+0x28]
   207f6:	lea    r14,[rcx+rax*8+0x90]
   207fe:	xchg   ax,ax
   20800:	mov    rdi,QWORD PTR [r12]
   20804:	test   rdi,rdi
   20807:	je     20812 <TophitsReport+0x62>
   20809:	call   3560 <strlen@plt>
   2080e:	lea    ebx,[rbx+rax*1+0x1]
   20812:	mov    rdi,QWORD PTR [r12+0x8]
   20817:	test   rdi,rdi
   2081a:	je     20825 <TophitsReport+0x75>
   2081c:	call   3560 <strlen@plt>
   20821:	lea    ebx,[rbx+rax*1+0x1]
   20825:	mov    rdi,QWORD PTR [r12+0x10]
   2082a:	test   rdi,rdi
   2082d:	je     20838 <TophitsReport+0x88>
   2082f:	call   3560 <strlen@plt>
   20834:	lea    ebx,[rbx+rax*1+0x1]
   20838:	mov    rbp,QWORD PTR [r12+0x38]
   2083d:	test   rbp,rbp
   20840:	je     2089d <TophitsReport+0xed>
   20842:	xor    eax,eax
   20844:	cmp    QWORD PTR [rbp+0x0],0x0
   20849:	mov    esi,DWORD PTR [rbp+0x28]
   2084c:	setne  al
   2084f:	cmp    QWORD PTR [rbp+0x8],0x1
   20854:	mov    rdi,QWORD PTR [rbp+0x30]
   20858:	sbb    eax,0xffffffff
   2085b:	cmp    QWORD PTR [rbp+0x10],0x1
   20860:	lea    ecx,[rsi+0x1]
   20863:	sbb    eax,0xffffffff
   20866:	cmp    QWORD PTR [rbp+0x18],0x1
   2086b:	sbb    eax,0xffffffff
   2086e:	cmp    QWORD PTR [rbp+0x20],0x1
   20873:	sbb    eax,0xffffffff
   20876:	imul   eax,ecx
   20879:	lea    ebx,[rbx+rax*1+0x48]
   2087d:	test   rdi,rdi
   20880:	je     2088b <TophitsReport+0xdb>
   20882:	call   3560 <strlen@plt>
   20887:	lea    ebx,[rbx+rax*1+0x1]
   2088b:	mov    rdi,QWORD PTR [rbp+0x38]
   2088f:	test   rdi,rdi
   20892:	je     2089d <TophitsReport+0xed>
   20894:	call   3560 <strlen@plt>
   20899:	lea    ebx,[rbx+rax*1+0x1]
   2089d:	add    r12,0x68
   208a1:	cmp    r12,r14
   208a4:	jne    20800 <TophitsReport+0x50>
   208aa:	pxor   xmm1,xmm1
   208ae:	mov    rcx,QWORD PTR [r15]
   208b1:	xor    eax,eax
   208b3:	cvtsi2sd xmm1,DWORD PTR [rsp+0xc]
   208b9:	jmp    208d0 <TophitsReport+0x120>
   208bb:	nop    DWORD PTR [rax+rax*1+0x0]
   208c0:	lea    r12d,[rax+0x1]
   208c4:	lea    rdx,[rax+0x1]
   208c8:	cmp    rax,r13
   208cb:	je     208e7 <TophitsReport+0x137>
   208cd:	mov    rax,rdx
   208d0:	mov    rdx,QWORD PTR [rcx+rax*8]
   208d4:	mov    r12d,eax
   208d7:	movsd  xmm0,QWORD PTR [rdx+0x10]
   208dc:	mulsd  xmm0,xmm1
   208e0:	comisd xmm0,QWORD PTR [rsp]
   208e5:	jb     208c0 <TophitsReport+0x110>
   208e7:	lea    rdi,[rip+0x1f910]        # 401fe <defmq.7318+0x3e>
   208ee:	call   34f0 <puts@plt>
   208f3:	mov    edx,DWORD PTR [r15+0x14]
   208f7:	mov    edi,0x1
   208fc:	xor    eax,eax
   208fe:	lea    rsi,[rip+0x1f90b]        # 40210 <defmq.7318+0x50>
   20905:	call   3710 <__printf_chk@plt>
   2090a:	mov    edx,r12d
   2090d:	mov    edi,0x1
   20912:	xor    eax,eax
   20914:	lea    rsi,[rip+0x1f915]        # 40230 <defmq.7318+0x70>
   2091b:	call   3710 <__printf_chk@plt>
   20920:	movsxd rdx,ebx
   20923:	add    rsp,0x18
   20927:	sar    ebx,0x1f
   2092a:	imul   rdx,rdx,0x10624dd3
   20931:	lea    rsi,[rip+0x1f918]        # 40250 <defmq.7318+0x90>
   20938:	mov    edi,0x1
   2093d:	xor    eax,eax
   2093f:	sar    rdx,0x26
   20943:	sub    edx,ebx
   20945:	pop    rbx
   20946:	pop    rbp
   20947:	pop    r12
   20949:	pop    r13
   2094b:	pop    r14
   2094d:	pop    r15
   2094f:	jmp    3710 <__printf_chk@plt>
   20954:	nop    DWORD PTR [rax+0x0]
   20958:	xor    r12d,r12d
   2095b:	jmp    208e7 <TophitsReport+0x137>
   2095d:	nop    DWORD PTR [rax]

0000000000020960 <rightjustify>:
   20960:	movabs r9,0x8000000000006001
   2096a:	sub    esi,0x1
   2096d:	movsxd rdx,esi
   20970:	jns    20980 <rightjustify+0x20>
   20972:	jmp    209e4 <rightjustify+0x84>
   20974:	nop    DWORD PTR [rax+0x0]
   20978:	sub    rdx,0x1
   2097c:	test   edx,edx
   2097e:	js     209c0 <rightjustify+0x60>
   20980:	movzx  r8d,BYTE PTR [rdi+rdx*1]
   20985:	mov    rax,r9
   20988:	lea    ecx,[r8-0x20]
   2098c:	shr    rax,cl
   2098f:	and    eax,0x1
   20992:	cmp    cl,0x40
   20995:	mov    ecx,0x0
   2099a:	cmovae eax,ecx
   2099d:	cmp    r8b,0x7e
   209a1:	je     20978 <rightjustify+0x18>
   209a3:	test   al,al
   209a5:	jne    20978 <rightjustify+0x18>
   209a7:	movsxd rax,esi
   209aa:	sub    rdx,0x1
   209ae:	sub    esi,0x1
   209b1:	mov    BYTE PTR [rdi+rax*1],r8b
   209b5:	test   edx,edx
   209b7:	jns    20980 <rightjustify+0x20>
   209b9:	nop    DWORD PTR [rax+0x0]
   209c0:	test   esi,esi
   209c2:	js     209e4 <rightjustify+0x84>
   209c4:	movsxd rsi,esi
   209c7:	lea    rdx,[rdi+rsi*1-0x1]
   209cc:	lea    rax,[rdi+rsi*1]
   209d0:	sub    rdx,rsi
   209d3:	nop    DWORD PTR [rax+rax*1+0x0]
   209d8:	mov    BYTE PTR [rax],0x2e
   209db:	sub    rax,0x1
   209df:	cmp    rdx,rax
   209e2:	jne    209d8 <rightjustify+0x78>
   209e4:	ret    
   209e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000209f0 <P7AllocTrace>:
   209f0:	endbr64 
   209f4:	push   r12
   209f6:	mov    edx,0x20
   209fb:	movsxd r12,edi
   209fe:	lea    rdi,[rip+0x1f86b]        # 40270 <defmq.7318+0xb0>
   20a05:	push   rbp
   20a06:	mov    rbp,rsi
   20a09:	mov    esi,0x28
   20a0e:	push   rbx
   20a0f:	call   36810 <sre_malloc>
   20a14:	mov    rdx,r12
   20a17:	shl    r12,0x2
   20a1b:	mov    esi,0x29
   20a20:	lea    rdi,[rip+0x1f849]        # 40270 <defmq.7318+0xb0>
   20a27:	mov    rbx,rax
   20a2a:	call   36810 <sre_malloc>
   20a2f:	mov    rdx,r12
   20a32:	mov    esi,0x2a
   20a37:	lea    rdi,[rip+0x1f832]        # 40270 <defmq.7318+0xb0>
   20a3e:	mov    QWORD PTR [rbx+0x8],rax
   20a42:	call   36810 <sre_malloc>
   20a47:	mov    rdx,r12
   20a4a:	mov    esi,0x2b
   20a4f:	lea    rdi,[rip+0x1f81a]        # 40270 <defmq.7318+0xb0>
   20a56:	mov    QWORD PTR [rbx+0x10],rax
   20a5a:	call   36810 <sre_malloc>
   20a5f:	mov    QWORD PTR [rbx+0x18],rax
   20a63:	mov    QWORD PTR [rbp+0x0],rbx
   20a67:	pop    rbx
   20a68:	pop    rbp
   20a69:	pop    r12
   20a6b:	ret    
   20a6c:	nop    DWORD PTR [rax+0x0]

0000000000020a70 <P7ReallocTrace>:
   20a70:	endbr64 
   20a74:	push   r12
   20a76:	movsxd r12,esi
   20a79:	mov    esi,0x31
   20a7e:	push   rbx
   20a7f:	mov    rcx,r12
   20a82:	mov    rbx,rdi
   20a85:	shl    r12,0x2
   20a89:	sub    rsp,0x8
   20a8d:	mov    rdx,QWORD PTR [rdi+0x8]
   20a91:	lea    rdi,[rip+0x1f7d8]        # 40270 <defmq.7318+0xb0>
   20a98:	call   36860 <sre_realloc>
   20a9d:	mov    rdx,QWORD PTR [rbx+0x10]
   20aa1:	mov    rcx,r12
   20aa4:	mov    esi,0x32
   20aa9:	mov    QWORD PTR [rbx+0x8],rax
   20aad:	lea    rdi,[rip+0x1f7bc]        # 40270 <defmq.7318+0xb0>
   20ab4:	call   36860 <sre_realloc>
   20ab9:	mov    rdx,QWORD PTR [rbx+0x18]
   20abd:	mov    rcx,r12
   20ac0:	mov    esi,0x33
   20ac5:	mov    QWORD PTR [rbx+0x10],rax
   20ac9:	lea    rdi,[rip+0x1f7a0]        # 40270 <defmq.7318+0xb0>
   20ad0:	call   36860 <sre_realloc>
   20ad5:	mov    QWORD PTR [rbx+0x18],rax
   20ad9:	add    rsp,0x8
   20add:	pop    rbx
   20ade:	pop    r12
   20ae0:	ret    
   20ae1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   20aec:	nop    DWORD PTR [rax+0x0]

0000000000020af0 <P7FreeTrace>:
   20af0:	endbr64 
   20af4:	test   rdi,rdi
   20af7:	je     20b28 <P7FreeTrace+0x38>
   20af9:	push   rbp
   20afa:	mov    rbp,rdi
   20afd:	mov    rdi,QWORD PTR [rdi+0x18]
   20b01:	call   3460 <free@plt>
   20b06:	mov    rdi,QWORD PTR [rbp+0x10]
   20b0a:	call   3460 <free@plt>
   20b0f:	mov    rdi,QWORD PTR [rbp+0x8]
   20b13:	call   3460 <free@plt>
   20b18:	mov    rdi,rbp
   20b1b:	pop    rbp
   20b1c:	jmp    3460 <free@plt>
   20b21:	nop    DWORD PTR [rax+0x0]
   20b28:	ret    
   20b29:	nop    DWORD PTR [rax+0x0]

0000000000020b30 <TraceSet>:
   20b30:	endbr64 
   20b34:	mov    rax,QWORD PTR [rdi+0x8]
   20b38:	movsxd rsi,esi
   20b3b:	mov    BYTE PTR [rax+rsi*1],dl
   20b3e:	mov    rax,QWORD PTR [rdi+0x10]
   20b42:	mov    DWORD PTR [rax+rsi*4],ecx
   20b45:	mov    rax,QWORD PTR [rdi+0x18]
   20b49:	mov    DWORD PTR [rax+rsi*4],r8d
   20b4d:	ret    
   20b4e:	xchg   ax,ax

0000000000020b50 <MergeTraceArrays>:
   20b50:	endbr64 
   20b54:	push   r14
   20b56:	mov    r14d,ecx
   20b59:	push   r13
   20b5b:	mov    r13,rdi
   20b5e:	lea    rdi,[rip+0x1f70b]        # 40270 <defmq.7318+0xb0>
   20b65:	push   r12
   20b67:	push   rbp
   20b68:	mov    rbp,rdx
   20b6b:	push   rbx
   20b6c:	movsxd rbx,esi
   20b6f:	mov    esi,0x6e
   20b74:	lea    edx,[rbx+rcx*1]
   20b77:	movsxd rdx,edx
   20b7a:	shl    rdx,0x3
   20b7e:	call   36810 <sre_malloc>
   20b83:	mov    r12,rax
   20b86:	test   ebx,ebx
   20b88:	jle    20ba5 <MergeTraceArrays+0x55>
   20b8a:	lea    eax,[rbx-0x1]
   20b8d:	xor    edx,edx
   20b8f:	nop
   20b90:	mov    rsi,QWORD PTR [r13+rdx*8+0x0]
   20b95:	mov    QWORD PTR [r12+rdx*8],rsi
   20b99:	mov    rsi,rdx
   20b9c:	add    rdx,0x1
   20ba0:	cmp    rsi,rax
   20ba3:	jne    20b90 <MergeTraceArrays+0x40>
   20ba5:	test   r14d,r14d
   20ba8:	jle    20bcd <MergeTraceArrays+0x7d>
   20baa:	lea    esi,[r14-0x1]
   20bae:	lea    rax,[r12+rbx*8]
   20bb2:	xor    edx,edx
   20bb4:	nop    DWORD PTR [rax+0x0]
   20bb8:	mov    rcx,QWORD PTR [rbp+rdx*8+0x0]
   20bbd:	mov    QWORD PTR [rax+rdx*8],rcx
   20bc1:	mov    rcx,rdx
   20bc4:	add    rdx,0x1
   20bc8:	cmp    rsi,rcx
   20bcb:	jne    20bb8 <MergeTraceArrays+0x68>
   20bcd:	mov    rdi,r13
   20bd0:	call   3460 <free@plt>
   20bd5:	mov    rdi,rbp
   20bd8:	call   3460 <free@plt>
   20bdd:	pop    rbx
   20bde:	mov    rax,r12
   20be1:	pop    rbp
   20be2:	pop    r12
   20be4:	pop    r13
   20be6:	pop    r14
   20be8:	ret    
   20be9:	nop    DWORD PTR [rax+0x0]

0000000000020bf0 <P7ReverseTrace>:
   20bf0:	endbr64 
   20bf4:	push   r13
   20bf6:	mov    esi,0x95
   20bfb:	push   r12
   20bfd:	push   rbp
   20bfe:	push   rbx
   20bff:	mov    rbx,rdi
   20c02:	sub    rsp,0x8
   20c06:	movsxd rdx,DWORD PTR [rdi]
   20c09:	lea    rdi,[rip+0x1f660]        # 40270 <defmq.7318+0xb0>
   20c10:	call   36810 <sre_malloc>
   20c15:	movsxd rdx,DWORD PTR [rbx]
   20c18:	mov    esi,0x96
   20c1d:	lea    rdi,[rip+0x1f64c]        # 40270 <defmq.7318+0xb0>
   20c24:	mov    r12,rax
   20c27:	shl    rdx,0x2
   20c2b:	call   36810 <sre_malloc>
   20c30:	movsxd rdx,DWORD PTR [rbx]
   20c33:	mov    esi,0x97
   20c38:	lea    rdi,[rip+0x1f631]        # 40270 <defmq.7318+0xb0>
   20c3f:	mov    rbp,rax
   20c42:	shl    rdx,0x2
   20c46:	call   36810 <sre_malloc>
   20c4b:	mov    r13,rax
   20c4e:	mov    eax,DWORD PTR [rbx]
   20c50:	test   eax,eax
   20c52:	jle    20c8f <P7ReverseTrace+0x9f>
   20c54:	lea    ecx,[rax-0x1]
   20c57:	xor    edx,edx
   20c59:	movsxd rcx,ecx
   20c5c:	nop    DWORD PTR [rax+0x0]
   20c60:	mov    rsi,QWORD PTR [rbx+0x8]
   20c64:	movzx  esi,BYTE PTR [rsi+rcx*1]
   20c68:	mov    BYTE PTR [r12+rdx*1],sil
   20c6c:	mov    rsi,QWORD PTR [rbx+0x10]
   20c70:	mov    esi,DWORD PTR [rsi+rcx*4]
   20c73:	mov    DWORD PTR [rbp+rdx*4+0x0],esi
   20c77:	mov    rsi,QWORD PTR [rbx+0x18]
   20c7b:	mov    esi,DWORD PTR [rsi+rcx*4]
   20c7e:	sub    rcx,0x1
   20c82:	mov    DWORD PTR [r13+rdx*4+0x0],esi
   20c87:	add    rdx,0x1
   20c8b:	cmp    DWORD PTR [rbx],edx
   20c8d:	jg     20c60 <P7ReverseTrace+0x70>
   20c8f:	mov    rdi,QWORD PTR [rbx+0x8]
   20c93:	call   3460 <free@plt>
   20c98:	mov    rdi,QWORD PTR [rbx+0x10]
   20c9c:	call   3460 <free@plt>
   20ca1:	mov    rdi,QWORD PTR [rbx+0x18]
   20ca5:	call   3460 <free@plt>
   20caa:	mov    QWORD PTR [rbx+0x8],r12
   20cae:	mov    QWORD PTR [rbx+0x10],rbp
   20cb2:	mov    QWORD PTR [rbx+0x18],r13
   20cb6:	add    rsp,0x8
   20cba:	pop    rbx
   20cbb:	pop    rbp
   20cbc:	pop    r12
   20cbe:	pop    r13
   20cc0:	ret    
   20cc1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   20ccc:	nop    DWORD PTR [rax+0x0]

0000000000020cd0 <P7TraceCount>:
   20cd0:	endbr64 
   20cd4:	push   r15
   20cd6:	push   r14
   20cd8:	push   r13
   20cda:	push   r12
   20cdc:	push   rbp
   20cdd:	push   rbx
   20cde:	sub    rsp,0x18
   20ce2:	mov    eax,DWORD PTR [rdx]
   20ce4:	movss  DWORD PTR [rsp+0xc],xmm0
   20cea:	test   eax,eax
   20cec:	jle    20da6 <P7TraceCount+0xd6>
   20cf2:	mov    r14,rdi
   20cf5:	mov    r12,rsi
   20cf8:	mov    rbp,rdx
   20cfb:	xor    ebx,ebx
   20cfd:	lea    r13,[rip+0x1f6fc]        # 40400 <defmq.7318+0x240>
   20d04:	nop    DWORD PTR [rax+0x0]
   20d08:	mov    rdx,QWORD PTR [rbp+0x8]
   20d0c:	mov    rax,QWORD PTR [rbp+0x18]
   20d10:	lea    r15,[rbx*4+0x0]
   20d18:	movzx  edi,BYTE PTR [rdx+rbx*1]
   20d1c:	movsxd rax,DWORD PTR [rax+rbx*4]
   20d20:	cmp    dil,0x1
   20d24:	je     20fd0 <P7TraceCount+0x300>
   20d2a:	cmp    dil,0x3
   20d2e:	je     21000 <P7TraceCount+0x330>
   20d34:	cmp    dil,0xa
   20d38:	ja     21016 <P7TraceCount+0x346>
   20d3e:	movzx  eax,dil
   20d42:	movsxd rax,DWORD PTR [r13+rax*4+0x0]
   20d47:	add    rax,r13
   20d4a:	notrack jmp rax
   20d4d:	nop    DWORD PTR [rax]
   20d50:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20d55:	cmp    dil,0x2
   20d59:	je     211f0 <P7TraceCount+0x520>
   20d5f:	cmp    dil,0x7
   20d63:	je     20d99 <P7TraceCount+0xc9>
   20d65:	cmp    dil,0x1
   20d69:	je     211b8 <P7TraceCount+0x4e8>
   20d6f:	nop
   20d70:	call   b100 <Statetype>
   20d75:	mov    r15,rax
   20d78:	mov    rax,QWORD PTR [rbp+0x8]
   20d7c:	movsx  edi,BYTE PTR [rax+rbx*1]
   20d80:	call   b100 <Statetype>
   20d85:	mov    rdx,r15
   20d88:	lea    rdi,[rip+0x1f591]        # 40320 <defmq.7318+0x160>
   20d8f:	mov    rsi,rax
   20d92:	xor    eax,eax
   20d94:	call   317f0 <Die>
   20d99:	add    rbx,0x1
   20d9d:	cmp    DWORD PTR [rbp+0x0],ebx
   20da0:	jg     20d08 <P7TraceCount+0x38>
   20da6:	add    rsp,0x18
   20daa:	pop    rbx
   20dab:	pop    rbp
   20dac:	pop    r12
   20dae:	pop    r13
   20db0:	pop    r14
   20db2:	pop    r15
   20db4:	ret    
   20db5:	nop    DWORD PTR [rax]
   20db8:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20dbd:	cmp    dil,0x6
   20dc1:	je     210c0 <P7TraceCount+0x3f0>
   20dc7:	cmp    dil,0xa
   20dcb:	jne    20d70 <P7TraceCount+0xa0>
   20dcd:	movss  xmm0,DWORD PTR [rsp+0xc]
   20dd3:	add    rbx,0x1
   20dd7:	addss  xmm0,DWORD PTR [r14+0xc8]
   20de0:	movss  DWORD PTR [r14+0xc8],xmm0
   20de9:	cmp    DWORD PTR [rbp+0x0],ebx
   20dec:	jg     20d08 <P7TraceCount+0x38>
   20df2:	jmp    20da6 <P7TraceCount+0xd6>
   20df4:	nop    DWORD PTR [rax+0x0]
   20df8:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20dfd:	cmp    dil,0x1
   20e01:	je     21088 <P7TraceCount+0x3b8>
   20e07:	cmp    dil,0x3
   20e0b:	jne    20d70 <P7TraceCount+0xa0>
   20e11:	mov    rax,QWORD PTR [rbp+0x10]
   20e15:	movss  xmm0,DWORD PTR [rsp+0xc]
   20e1b:	add    rbx,0x1
   20e1f:	movsxd rdx,DWORD PTR [rax+r15*1]
   20e23:	mov    rax,QWORD PTR [r14+0x90]
   20e2a:	mov    rax,QWORD PTR [rax+rdx*8]
   20e2e:	addss  xmm0,DWORD PTR [rax+0x10]
   20e33:	movss  DWORD PTR [rax+0x10],xmm0
   20e38:	cmp    DWORD PTR [rbp+0x0],ebx
   20e3b:	jg     20d08 <P7TraceCount+0x38>
   20e41:	jmp    20da6 <P7TraceCount+0xd6>
   20e46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20e50:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20e55:	cmp    dil,0x8
   20e59:	je     21120 <P7TraceCount+0x450>
   20e5f:	cmp    dil,0x9
   20e63:	jne    20d70 <P7TraceCount+0xa0>
   20e69:	movss  xmm0,DWORD PTR [rsp+0xc]
   20e6f:	add    rbx,0x1
   20e73:	addss  xmm0,DWORD PTR [r14+0xbc]
   20e7c:	movss  DWORD PTR [r14+0xbc],xmm0
   20e85:	cmp    DWORD PTR [rbp+0x0],ebx
   20e88:	jg     20d08 <P7TraceCount+0x38>
   20e8e:	jmp    20da6 <P7TraceCount+0xd6>
   20e93:	nop    DWORD PTR [rax+rax*1+0x0]
   20e98:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20e9d:	cmp    dil,0x8
   20ea1:	je     210f0 <P7TraceCount+0x420>
   20ea7:	cmp    dil,0xa
   20eab:	jne    20d70 <P7TraceCount+0xa0>
   20eb1:	movss  xmm0,DWORD PTR [rsp+0xc]
   20eb7:	add    rbx,0x1
   20ebb:	addss  xmm0,DWORD PTR [r14+0xb8]
   20ec4:	movss  DWORD PTR [r14+0xb8],xmm0
   20ecd:	cmp    DWORD PTR [rbp+0x0],ebx
   20ed0:	jg     20d08 <P7TraceCount+0x38>
   20ed6:	jmp    20da6 <P7TraceCount+0xd6>
   20edb:	nop    DWORD PTR [rax+rax*1+0x0]
   20ee0:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20ee5:	cmp    dil,0x1
   20ee9:	je     21180 <P7TraceCount+0x4b0>
   20eef:	cmp    dil,0x2
   20ef3:	jne    20d70 <P7TraceCount+0xa0>
   20ef9:	movss  xmm0,DWORD PTR [rsp+0xc]
   20eff:	add    rbx,0x1
   20f03:	addss  xmm0,DWORD PTR [r14+0xa8]
   20f0c:	movss  DWORD PTR [r14+0xa8],xmm0
   20f15:	cmp    DWORD PTR [rbp+0x0],ebx
   20f18:	jg     20d08 <P7TraceCount+0x38>
   20f1e:	jmp    20da6 <P7TraceCount+0xd6>
   20f23:	nop    DWORD PTR [rax+rax*1+0x0]
   20f28:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20f2d:	cmp    dil,0x5
   20f31:	je     21150 <P7TraceCount+0x480>
   20f37:	cmp    dil,0x6
   20f3b:	jne    20d70 <P7TraceCount+0xa0>
   20f41:	movss  xmm0,DWORD PTR [rsp+0xc]
   20f47:	add    rbx,0x1
   20f4b:	addss  xmm0,DWORD PTR [r14+0xac]
   20f54:	movss  DWORD PTR [r14+0xac],xmm0
   20f5d:	cmp    DWORD PTR [rbp+0x0],ebx
   20f60:	jg     20d08 <P7TraceCount+0x38>
   20f66:	jmp    20da6 <P7TraceCount+0xd6>
   20f6b:	nop    DWORD PTR [rax+rax*1+0x0]
   20f70:	movsx  edi,BYTE PTR [rdx+rbx*1+0x1]
   20f75:	cmp    dil,0x3
   20f79:	je     21260 <P7TraceCount+0x590>
   20f7f:	jg     21048 <P7TraceCount+0x378>
   20f85:	cmp    dil,0x1
   20f89:	je     21228 <P7TraceCount+0x558>
   20f8f:	cmp    dil,0x2
   20f93:	jne    20d70 <P7TraceCount+0xa0>
   20f99:	mov    rax,QWORD PTR [rbp+0x10]
   20f9d:	movss  xmm0,DWORD PTR [rsp+0xc]
   20fa3:	add    rbx,0x1
   20fa7:	movsxd rdx,DWORD PTR [rax+r15*1]
   20fab:	mov    rax,QWORD PTR [r14+0x90]
   20fb2:	mov    rax,QWORD PTR [rax+rdx*8]
   20fb6:	addss  xmm0,DWORD PTR [rax+0x8]
   20fbb:	movss  DWORD PTR [rax+0x8],xmm0
   20fc0:	cmp    DWORD PTR [rbp+0x0],ebx
   20fc3:	jg     20d08 <P7TraceCount+0x38>
   20fc9:	jmp    20da6 <P7TraceCount+0xd6>
   20fce:	xchg   ax,ax
   20fd0:	movsx  esi,BYTE PTR [r12+rax*1]
   20fd5:	mov    rax,QWORD PTR [rbp+0x10]
   20fd9:	movsxd rdx,DWORD PTR [rax+rbx*4]
   20fdd:	mov    rax,QWORD PTR [r14+0x98]
   20fe4:	mov    rdi,QWORD PTR [rax+rdx*8]
   20fe8:	movss  xmm0,DWORD PTR [rsp+0xc]
   20fee:	call   5140 <P7CountSymbol>
   20ff3:	mov    rdx,QWORD PTR [rbp+0x8]
   20ff7:	movzx  edi,BYTE PTR [rdx+rbx*1]
   20ffb:	jmp    20d34 <P7TraceCount+0x64>
   21000:	movsx  esi,BYTE PTR [r12+rax*1]
   21005:	mov    rax,QWORD PTR [rbp+0x10]
   21009:	movsxd rdx,DWORD PTR [rax+r15*1]
   2100d:	mov    rax,QWORD PTR [r14+0xa0]
   21014:	jmp    20fe4 <P7TraceCount+0x314>
   21016:	movsx  edi,dil
   2101a:	add    rbx,0x1
   2101e:	call   b100 <Statetype>
   21023:	lea    rdi,[rip+0x1f24e]        # 40278 <defmq.7318+0xb8>
   2102a:	mov    rsi,rax
   2102d:	xor    eax,eax
   2102f:	call   317f0 <Die>
   21034:	cmp    DWORD PTR [rbp+0x0],ebx
   21037:	jg     20d08 <P7TraceCount+0x38>
   2103d:	jmp    20da6 <P7TraceCount+0xd6>
   21042:	nop    WORD PTR [rax+rax*1+0x0]
   21048:	cmp    dil,0x7
   2104c:	jne    20d70 <P7TraceCount+0xa0>
   21052:	mov    rax,QWORD PTR [rbp+0x10]
   21056:	movss  xmm0,DWORD PTR [rsp+0xc]
   2105c:	add    rbx,0x1
   21060:	movsxd rdx,DWORD PTR [rax+r15*1]
   21064:	mov    rax,QWORD PTR [r14+0xd8]
   2106b:	lea    rax,[rax+rdx*4]
   2106f:	addss  xmm0,DWORD PTR [rax]
   21073:	movss  DWORD PTR [rax],xmm0
   21077:	cmp    DWORD PTR [rbp+0x0],ebx
   2107a:	jg     20d08 <P7TraceCount+0x38>
   21080:	jmp    20da6 <P7TraceCount+0xd6>
   21085:	nop    DWORD PTR [rax]
   21088:	mov    rax,QWORD PTR [rbp+0x10]
   2108c:	movss  xmm0,DWORD PTR [rsp+0xc]
   21092:	add    rbx,0x1
   21096:	movsxd rdx,DWORD PTR [rax+r15*1]
   2109a:	mov    rax,QWORD PTR [r14+0x90]
   210a1:	mov    rax,QWORD PTR [rax+rdx*8]
   210a5:	addss  xmm0,DWORD PTR [rax+0xc]
   210aa:	movss  DWORD PTR [rax+0xc],xmm0
   210af:	cmp    DWORD PTR [rbp+0x0],ebx
   210b2:	jg     20d08 <P7TraceCount+0x38>
   210b8:	jmp    20da6 <P7TraceCount+0xd6>
   210bd:	nop    DWORD PTR [rax]
   210c0:	movss  xmm0,DWORD PTR [rsp+0xc]
   210c6:	add    rbx,0x1
   210ca:	addss  xmm0,DWORD PTR [r14+0xc4]
   210d3:	movss  DWORD PTR [r14+0xc4],xmm0
   210dc:	cmp    DWORD PTR [rbp+0x0],ebx
   210df:	jg     20d08 <P7TraceCount+0x38>
   210e5:	jmp    20da6 <P7TraceCount+0xd6>
   210ea:	nop    WORD PTR [rax+rax*1+0x0]
   210f0:	movss  xmm0,DWORD PTR [rsp+0xc]
   210f6:	add    rbx,0x1
   210fa:	addss  xmm0,DWORD PTR [r14+0xb4]
   21103:	movss  DWORD PTR [r14+0xb4],xmm0
   2110c:	cmp    DWORD PTR [rbp+0x0],ebx
   2110f:	jg     20d08 <P7TraceCount+0x38>
   21115:	jmp    20da6 <P7TraceCount+0xd6>
   2111a:	nop    WORD PTR [rax+rax*1+0x0]
   21120:	movss  xmm0,DWORD PTR [rsp+0xc]
   21126:	add    rbx,0x1
   2112a:	addss  xmm0,DWORD PTR [r14+0xc0]
   21133:	movss  DWORD PTR [r14+0xc0],xmm0
   2113c:	cmp    DWORD PTR [rbp+0x0],ebx
   2113f:	jg     20d08 <P7TraceCount+0x38>
   21145:	jmp    20da6 <P7TraceCount+0xd6>
   2114a:	nop    WORD PTR [rax+rax*1+0x0]
   21150:	movss  xmm0,DWORD PTR [rsp+0xc]
   21156:	add    rbx,0x1
   2115a:	addss  xmm0,DWORD PTR [r14+0xb0]
   21163:	movss  DWORD PTR [r14+0xb0],xmm0
   2116c:	cmp    DWORD PTR [rbp+0x0],ebx
   2116f:	jg     20d08 <P7TraceCount+0x38>
   21175:	jmp    20da6 <P7TraceCount+0xd6>
   2117a:	nop    WORD PTR [rax+rax*1+0x0]
   21180:	mov    rax,QWORD PTR [rbp+0x10]
   21184:	movss  xmm0,DWORD PTR [rsp+0xc]
   2118a:	add    rbx,0x1
   2118e:	movsxd rdx,DWORD PTR [rax+r15*1+0x4]
   21193:	mov    rax,QWORD PTR [r14+0xd0]
   2119a:	lea    rax,[rax+rdx*4]
   2119e:	addss  xmm0,DWORD PTR [rax]
   211a2:	movss  DWORD PTR [rax],xmm0
   211a6:	cmp    DWORD PTR [rbp+0x0],ebx
   211a9:	jg     20d08 <P7TraceCount+0x38>
   211af:	jmp    20da6 <P7TraceCount+0xd6>
   211b4:	nop    DWORD PTR [rax+0x0]
   211b8:	mov    rax,QWORD PTR [rbp+0x10]
   211bc:	movss  xmm0,DWORD PTR [rsp+0xc]
   211c2:	add    rbx,0x1
   211c6:	movsxd rdx,DWORD PTR [rax+r15*1]
   211ca:	mov    rax,QWORD PTR [r14+0x90]
   211d1:	mov    rax,QWORD PTR [rax+rdx*8]
   211d5:	addss  xmm0,DWORD PTR [rax+0x14]
   211da:	movss  DWORD PTR [rax+0x14],xmm0
   211df:	cmp    DWORD PTR [rbp+0x0],ebx
   211e2:	jg     20d08 <P7TraceCount+0x38>
   211e8:	jmp    20da6 <P7TraceCount+0xd6>
   211ed:	nop    DWORD PTR [rax]
   211f0:	mov    rax,QWORD PTR [rbp+0x10]
   211f4:	movss  xmm0,DWORD PTR [rsp+0xc]
   211fa:	add    rbx,0x1
   211fe:	movsxd rdx,DWORD PTR [rax+r15*1]
   21202:	mov    rax,QWORD PTR [r14+0x90]
   21209:	mov    rax,QWORD PTR [rax+rdx*8]
   2120d:	addss  xmm0,DWORD PTR [rax+0x18]
   21212:	movss  DWORD PTR [rax+0x18],xmm0
   21217:	cmp    DWORD PTR [rbp+0x0],ebx
   2121a:	jg     20d08 <P7TraceCount+0x38>
   21220:	jmp    20da6 <P7TraceCount+0xd6>
   21225:	nop    DWORD PTR [rax]
   21228:	mov    rax,QWORD PTR [rbp+0x10]
   2122c:	movss  xmm0,DWORD PTR [rsp+0xc]
   21232:	add    rbx,0x1
   21236:	movsxd rdx,DWORD PTR [rax+r15*1]
   2123a:	mov    rax,QWORD PTR [r14+0x90]
   21241:	mov    rax,QWORD PTR [rax+rdx*8]
   21245:	addss  xmm0,DWORD PTR [rax]
   21249:	movss  DWORD PTR [rax],xmm0
   2124d:	cmp    DWORD PTR [rbp+0x0],ebx
   21250:	jg     20d08 <P7TraceCount+0x38>
   21256:	jmp    20da6 <P7TraceCount+0xd6>
   2125b:	nop    DWORD PTR [rax+rax*1+0x0]
   21260:	mov    rax,QWORD PTR [rbp+0x10]
   21264:	movss  xmm0,DWORD PTR [rsp+0xc]
   2126a:	add    rbx,0x1
   2126e:	movsxd rdx,DWORD PTR [rax+r15*1]
   21272:	mov    rax,QWORD PTR [r14+0x90]
   21279:	mov    rax,QWORD PTR [rax+rdx*8]
   2127d:	addss  xmm0,DWORD PTR [rax+0x4]
   21282:	movss  DWORD PTR [rax+0x4],xmm0
   21287:	cmp    DWORD PTR [rbp+0x0],ebx
   2128a:	jg     20d08 <P7TraceCount+0x38>
   21290:	jmp    20da6 <P7TraceCount+0xd6>
   21295:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000212a0 <P7Traces2Alignment>:
   212a0:	endbr64 
   212a4:	push   r15
   212a6:	push   r14
   212a8:	mov    r14d,r8d
   212ab:	push   r13
   212ad:	push   r12
   212af:	push   rbp
   212b0:	push   rbx
   212b1:	lea    ebx,[r8+0x1]
   212b5:	movsxd rbx,ebx
   212b8:	lea    rax,[rbx*4+0x0]
   212c0:	sub    rsp,0x88
   212c7:	mov    QWORD PTR [rsp+0x28],rdi
   212cc:	lea    rdi,[rip+0x1ef9d]        # 40270 <defmq.7318+0xb0>
   212d3:	mov    QWORD PTR [rsp+0x70],rsi
   212d8:	mov    esi,0x198
   212dd:	mov    QWORD PTR [rsp+0x78],rdx
   212e2:	mov    rdx,rax
   212e5:	mov    DWORD PTR [rsp+0x68],ecx
   212e9:	mov    DWORD PTR [rsp+0xc],r8d
   212ee:	mov    QWORD PTR [rsp+0x18],r9
   212f3:	mov    QWORD PTR [rsp+0x10],rax
   212f8:	call   36810 <sre_malloc>
   212fd:	mov    QWORD PTR [rsp+0x50],rax
   21302:	test   r14d,r14d
   21305:	js     2132f <P7Traces2Alignment+0x8f>
   21307:	mov    rdi,QWORD PTR [rsp+0x50]
   2130c:	movsxd rdx,DWORD PTR [rsp+0xc]
   21311:	mov    rax,rdi
   21314:	lea    rdx,[rdi+rdx*4+0x4]
   21319:	nop    DWORD PTR [rax+0x0]
   21320:	mov    DWORD PTR [rax],0x0
   21326:	add    rax,0x4
   2132a:	cmp    rax,rdx
   2132d:	jne    21320 <P7Traces2Alignment+0x80>
   2132f:	mov    eax,DWORD PTR [rsp+0x68]
   21333:	test   eax,eax
   21335:	jle    213e6 <P7Traces2Alignment+0x146>
   2133b:	mov    rax,QWORD PTR [rsp+0x10]
   21340:	mov    r14,QWORD PTR [rsp+0x50]
   21345:	lea    r15,[rip+0x1f0e0]        # 4042c <defmq.7318+0x26c>
   2134c:	mov    rsi,QWORD PTR [rsp+0x18]
   21351:	lea    rbp,[r14+rax*1-0x4]
   21356:	mov    eax,DWORD PTR [rsp+0x68]
   2135a:	sub    eax,0x1
   2135d:	lea    r12,[rsi+rax*8+0x8]
   21362:	mov    QWORD PTR [rsp],r12
   21366:	mov    r12,rsi
   21369:	nop    DWORD PTR [rax+0x0]
   21370:	mov    rcx,QWORD PTR [r12]
   21374:	xor    ebx,ebx
   21376:	xor    r13d,r13d
   21379:	mov    eax,DWORD PTR [rcx]
   2137b:	test   eax,eax
   2137d:	jle    213dc <P7Traces2Alignment+0x13c>
   2137f:	nop
   21380:	mov    rdx,QWORD PTR [rcx+0x8]
   21384:	cmp    BYTE PTR [rdx+rbx*1],0xa
   21388:	ja     213b2 <P7Traces2Alignment+0x112>
   2138a:	movzx  eax,BYTE PTR [rdx+rbx*1]
   2138e:	movsxd rax,DWORD PTR [r15+rax*4]
   21392:	add    rax,r15
   21395:	notrack jmp rax
   21398:	nop    DWORD PTR [rax+rax*1+0x0]
   213a0:	lea    rdi,[rip+0x1efa9]        # 40350 <defmq.7318+0x190>
   213a7:	xor    eax,eax
   213a9:	call   317f0 <Die>
   213ae:	mov    rcx,QWORD PTR [r12]
   213b2:	mov    rax,QWORD PTR [rcx+0x8]
   213b6:	movsx  edi,BYTE PTR [rax+rbx*1]
   213ba:	call   b100 <Statetype>
   213bf:	lea    rdi,[rip+0x1efca]        # 40390 <defmq.7318+0x1d0>
   213c6:	mov    rsi,rax
   213c9:	xor    eax,eax
   213cb:	call   317f0 <Die>
   213d0:	mov    rcx,QWORD PTR [r12]
   213d4:	add    rbx,0x1
   213d8:	cmp    DWORD PTR [rcx],ebx
   213da:	jg     21380 <P7Traces2Alignment+0xe0>
   213dc:	add    r12,0x8
   213e0:	cmp    QWORD PTR [rsp],r12
   213e4:	jne    21370 <P7Traces2Alignment+0xd0>
   213e6:	mov    r15d,DWORD PTR [rsp+0xc0]
   213ee:	test   r15d,r15d
   213f1:	je     21424 <P7Traces2Alignment+0x184>
   213f3:	mov    esi,DWORD PTR [rsp+0xc]
   213f7:	test   esi,esi
   213f9:	js     21bf0 <P7Traces2Alignment+0x950>
   213ff:	mov    rdi,QWORD PTR [rsp+0x50]
   21404:	movsxd rdx,esi
   21407:	mov    rax,rdi
   2140a:	lea    rdx,[rdi+rdx*4+0x4]
   2140f:	nop
   21410:	cmp    DWORD PTR [rax],0x1
   21413:	jle    2141b <P7Traces2Alignment+0x17b>
   21415:	mov    DWORD PTR [rax],0x1
   2141b:	add    rax,0x4
   2141f:	cmp    rdx,rax
   21422:	jne    21410 <P7Traces2Alignment+0x170>
   21424:	mov    rdx,QWORD PTR [rsp+0x10]
   21429:	mov    esi,0x1c5
   2142e:	lea    rdi,[rip+0x1ee3b]        # 40270 <defmq.7318+0xb0>
   21435:	call   36810 <sre_malloc>
   2143a:	mov    r14d,DWORD PTR [rsp+0xc]
   2143f:	mov    DWORD PTR [rax],0xffffffff
   21445:	mov    rbp,rax
   21448:	mov    rax,QWORD PTR [rsp+0x50]
   2144d:	mov    eax,DWORD PTR [rax]
   2144f:	mov    DWORD PTR [rsp],eax
   21452:	test   r14d,r14d
   21455:	jle    21487 <P7Traces2Alignment+0x1e7>
   21457:	mov    eax,DWORD PTR [rsp+0xc]
   2145b:	mov    rdi,QWORD PTR [rsp+0x50]
   21460:	mov    edx,DWORD PTR [rsp]
   21463:	lea    ecx,[rax-0x1]
   21466:	mov    eax,0x1
   2146b:	add    rcx,0x2
   2146f:	nop
   21470:	mov    DWORD PTR [rbp+rax*4+0x0],edx
   21474:	mov    esi,DWORD PTR [rdi+rax*4]
   21477:	add    rax,0x1
   2147b:	lea    edx,[rdx+rsi*1+0x1]
   2147f:	cmp    rcx,rax
   21482:	jne    21470 <P7Traces2Alignment+0x1d0>
   21484:	mov    DWORD PTR [rsp],edx
   21487:	mov    ebx,DWORD PTR [rsp]
   2148a:	mov    r14d,DWORD PTR [rsp+0x68]
   2148f:	mov    esi,ebx
   21491:	mov    edi,r14d
   21494:	call   2aa20 <MSAAlloc>
   21499:	mov    r12,rax
   2149c:	movsxd rax,ebx
   2149f:	mov    QWORD PTR [rsp+0x20],rax
   214a4:	mov    rsi,rax
   214a7:	mov    eax,r14d
   214aa:	test   r14d,r14d
   214ad:	jle    21b9b <P7Traces2Alignment+0x8fb>
   214b3:	mov    rdi,QWORD PTR [rsp+0x10]
   214b8:	sub    eax,0x1
   214bb:	mov    r9,QWORD PTR [rsp+0x18]
   214c0:	xor    ebx,ebx
   214c2:	mov    QWORD PTR [rsp+0x48],rax
   214c7:	lea    rax,[rax*8+0x8]
   214cf:	lea    r11d,[rsi-0x1]
   214d3:	lea    rdi,[rbp+rdi*1-0x4]
   214d8:	mov    QWORD PTR [rsp+0x40],rax
   214dd:	mov    r14,r9
   214e0:	mov    r9,QWORD PTR [rsp+0x28]
   214e5:	mov    QWORD PTR [rsp+0x58],rdi
   214ea:	mov    edi,DWORD PTR [rsp+0xc]
   214ee:	lea    eax,[rdi-0x1]
   214f1:	lea    r15,[rbp+rax*4+0x8]
   214f6:	lea    eax,[rdi-0x2]
   214f9:	mov    DWORD PTR [rsp+0x6c],eax
   214fd:	mov    rax,r11
   21500:	mov    r11,rbp
   21503:	mov    rbp,rax
   21506:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21510:	mov    edx,DWORD PTR [rsp]
   21513:	xor    eax,eax
   21515:	test   edx,edx
   21517:	jle    21538 <P7Traces2Alignment+0x298>
   21519:	nop    DWORD PTR [rax+0x0]
   21520:	mov    rdx,QWORD PTR [r12]
   21524:	mov    rdx,QWORD PTR [rdx+rbx*1]
   21528:	mov    BYTE PTR [rdx+rax*1],0x2e
   2152c:	mov    rdx,rax
   2152f:	add    rax,0x1
   21533:	cmp    rbp,rdx
   21536:	jne    21520 <P7Traces2Alignment+0x280>
   21538:	mov    r13d,DWORD PTR [rsp+0xc]
   2153d:	lea    rax,[r11+0x4]
   21541:	test   r13d,r13d
   21544:	jle    21568 <P7Traces2Alignment+0x2c8>
   21546:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21550:	mov    rcx,QWORD PTR [r12]
   21554:	movsxd rdx,DWORD PTR [rax]
   21557:	add    rax,0x4
   2155b:	mov    rcx,QWORD PTR [rcx+rbx*1]
   2155f:	mov    BYTE PTR [rcx+rdx*1],0x2d
   21563:	cmp    r15,rax
   21566:	jne    21550 <P7Traces2Alignment+0x2b0>
   21568:	mov    rax,QWORD PTR [r12]
   2156c:	mov    rsi,QWORD PTR [rsp+0x20]
   21571:	xor    r13d,r13d
   21574:	xor    ecx,ecx
   21576:	mov    rax,QWORD PTR [rax+rbx*1]
   2157a:	mov    BYTE PTR [rax+rsi*1],0x0
   2157e:	mov    rax,QWORD PTR [r14]
   21581:	mov    r10d,DWORD PTR [rax]
   21584:	test   r10d,r10d
   21587:	jle    21661 <P7Traces2Alignment+0x3c1>
   2158d:	mov    QWORD PTR [rsp+0x10],rbp
   21592:	mov    rsi,r12
   21595:	mov    rbp,r11
   21598:	mov    QWORD PTR [rsp+0x18],r15
   2159d:	mov    r15,r14
   215a0:	mov    r14,rbx
   215a3:	mov    ebx,ecx
   215a5:	jmp    215f9 <P7Traces2Alignment+0x359>
   215a7:	nop    WORD PTR [rax+rax*1+0x0]
   215b0:	cmp    edx,0x2
   215b3:	je     218c0 <P7Traces2Alignment+0x620>
   215b9:	cmp    edx,0x3
   215bc:	je     218d0 <P7Traces2Alignment+0x630>
   215c2:	cmp    edx,0x5
   215c5:	sete   r8b
   215c9:	cmp    edx,0x8
   215cc:	sete   cl
   215cf:	or     r8b,cl
   215d2:	je     215dd <P7Traces2Alignment+0x33d>
   215d4:	test   r12d,r12d
   215d7:	jg     21960 <P7Traces2Alignment+0x6c0>
   215dd:	cmp    edx,0x7
   215e0:	jne    215f0 <P7Traces2Alignment+0x350>
   215e2:	mov    rdi,QWORD PTR [rsp+0x58]
   215e7:	mov    edi,DWORD PTR [rdi]
   215e9:	mov    DWORD PTR [rsp+0x28],edi
   215ed:	lea    ebx,[rdi+0x1]
   215f0:	add    r13,0x1
   215f4:	cmp    DWORD PTR [rax],r13d
   215f7:	jle    2164b <P7Traces2Alignment+0x3ab>
   215f9:	mov    rcx,QWORD PTR [rax+0x18]
   215fd:	mov    rdx,QWORD PTR [rax+0x8]
   21601:	movsxd r12,DWORD PTR [rcx+r13*4]
   21605:	movsx  edx,BYTE PTR [rdx+r13*1]
   2160a:	mov    rcx,QWORD PTR [rax+0x10]
   2160e:	movsxd rcx,DWORD PTR [rcx+r13*4]
   21612:	cmp    edx,0x1
   21615:	jne    215b0 <P7Traces2Alignment+0x310>
   21617:	mov    rax,QWORD PTR [r9+r14*1]
   2161b:	mov    rdx,QWORD PTR [rsi]
   2161e:	add    r13,0x1
   21622:	lea    rdi,[rip+0x40c57]        # 62280 <Alphabet>
   21629:	mov    ebx,DWORD PTR [rbp+rcx*4+0x0]
   2162d:	movsx  rax,BYTE PTR [rax+r12*1]
   21632:	mov    rdx,QWORD PTR [rdx+r14*1]
   21636:	movzx  ecx,BYTE PTR [rdi+rax*1]
   2163a:	movsxd rax,ebx
   2163d:	add    ebx,0x1
   21640:	mov    BYTE PTR [rdx+rax*1],cl
   21643:	mov    rax,QWORD PTR [r15]
   21646:	cmp    DWORD PTR [rax],r13d
   21649:	jg     215f9 <P7Traces2Alignment+0x359>
   2164b:	mov    r11,rbp
   2164e:	mov    rbx,r14
   21651:	mov    rbp,QWORD PTR [rsp+0x10]
   21656:	mov    r14,r15
   21659:	mov    r15,QWORD PTR [rsp+0x18]
   2165e:	mov    r12,rsi
   21661:	mov    r8d,DWORD PTR [rsp+0xc0]
   21669:	test   r8d,r8d
   2166c:	je     219b0 <P7Traces2Alignment+0x710>
   21672:	add    rbx,0x8
   21676:	add    r14,0x8
   2167a:	cmp    QWORD PTR [rsp+0x40],rbx
   2167f:	jne    21510 <P7Traces2Alignment+0x270>
   21685:	movsxd r15,DWORD PTR [rsp+0x68]
   2168a:	mov    eax,DWORD PTR [rsp]
   2168d:	mov    edx,0xa
   21692:	mov    rbp,r11
   21695:	mov    esi,0x211
   2169a:	lea    rdi,[rip+0x1ebcf]        # 40270 <defmq.7318+0xb0>
   216a1:	mov    DWORD PTR [r12+0x1c],r15d
   216a6:	mov    DWORD PTR [r12+0x18],eax
   216ab:	call   36810 <sre_malloc>
   216b0:	lea    r8,[rip+0x1c0be]        # 3d775 <_IO_stdin_used+0x775>
   216b7:	mov    esi,0x1
   216bc:	lea    rcx,[rip+0x1ebd3]        # 40296 <defmq.7318+0xd6>
   216c3:	mov    QWORD PTR [r12+0x40],rax
   216c8:	mov    rdi,rax
   216cb:	mov    rdx,0xffffffffffffffff
   216d2:	xor    eax,eax
   216d4:	call   3830 <__sprintf_chk@plt>
   216d9:	mov    r14,QWORD PTR [rsp+0x70]
   216de:	mov    QWORD PTR [rsp+0x28],rbp
   216e3:	lea    rax,[r15*8+0x0]
   216eb:	mov    QWORD PTR [rsp+0x18],rax
   216f0:	xor    r15d,r15d
   216f3:	mov    rax,r12
   216f6:	mov    rbp,QWORD PTR [rsp+0x78]
   216fb:	add    r14,0x4
   216ff:	mov    r12,r14
   21702:	mov    r14,r15
   21705:	mov    r15,rax
   21708:	jmp    217a1 <P7Traces2Alignment+0x501>
   2170d:	nop    DWORD PTR [rax]
   21710:	test   al,0x8
   21712:	jne    217f3 <P7Traces2Alignment+0x553>
   21718:	test   ah,0x2
   2171b:	je     2174a <P7Traces2Alignment+0x4aa>
   2171d:	mov    rax,QWORD PTR [r15+0x70]
   21721:	test   rax,rax
   21724:	je     21b5d <P7Traces2Alignment+0x8bd>
   2172a:	lea    rcx,[rax+rbx*1]
   2172e:	mov    rax,QWORD PTR [r15]
   21731:	mov    rdx,QWORD PTR [r12+0x154]
   21739:	mov    esi,DWORD PTR [rsp]
   2173c:	mov    rdi,QWORD PTR [rax+rbx*1]
   21740:	call   24e10 <MakeAlignedString>
   21745:	mov    eax,DWORD PTR [r12-0x4]
   2174a:	test   ah,0x4
   2174d:	je     21777 <P7Traces2Alignment+0x4d7>
   2174f:	mov    rax,QWORD PTR [r15+0x78]
   21753:	test   rax,rax
   21756:	je     21b7c <P7Traces2Alignment+0x8dc>
   2175c:	lea    rcx,[rax+rbx*1]
   21760:	mov    rax,QWORD PTR [r15]
   21763:	mov    rdx,QWORD PTR [r12+0x15c]
   2176b:	mov    esi,DWORD PTR [rsp]
   2176e:	mov    rdi,QWORD PTR [rax+rbx*1]
   21772:	call   24e10 <MakeAlignedString>
   21777:	mov    rax,QWORD PTR [r15+0x10]
   2177b:	movss  xmm0,DWORD PTR [rbp+r14*4+0x0]
   21782:	add    r12,0x168
   21789:	movss  DWORD PTR [rax+r14*4],xmm0
   2178f:	lea    rax,[r14+0x1]
   21793:	cmp    QWORD PTR [rsp+0x48],r14
   21798:	je     21ab0 <P7Traces2Alignment+0x810>
   2179e:	mov    r14,rax
   217a1:	mov    r13,QWORD PTR [r15+0x8]
   217a5:	mov    esi,0xffffffff
   217aa:	mov    rdi,r12
   217ad:	mov    DWORD PTR [rsp+0x10],r14d
   217b2:	call   36ce0 <sre_strdup>
   217b7:	lea    rbx,[r14*8+0x0]
   217bf:	add    r13,rbx
   217c2:	mov    QWORD PTR [r13+0x0],rax
   217c6:	mov    eax,DWORD PTR [r12-0x4]
   217cb:	test   al,0x4
   217cd:	je     21710 <P7Traces2Alignment+0x470>
   217d3:	lea    rdx,[r12+0x80]
   217db:	mov    esi,r14d
   217de:	mov    rdi,r15
   217e1:	call   2b410 <MSASetSeqAccession>
   217e6:	mov    eax,DWORD PTR [r12-0x4]
   217eb:	test   al,0x8
   217ed:	je     21718 <P7Traces2Alignment+0x478>
   217f3:	lea    rdx,[r12+0xc0]
   217fb:	mov    esi,r14d
   217fe:	mov    rdi,r15
   21801:	call   2b4a0 <MSASetSeqDescription>
   21806:	mov    eax,DWORD PTR [r12-0x4]
   2180b:	jmp    21718 <P7Traces2Alignment+0x478>
   21810:	mov    rax,QWORD PTR [rcx+0x10]
   21814:	movsxd rax,DWORD PTR [rax+rbx*4]
   21818:	lea    rax,[r14+rax*4-0x4]
   2181d:	cmp    DWORD PTR [rax],r13d
   21820:	jge    21948 <P7Traces2Alignment+0x6a8>
   21826:	mov    DWORD PTR [rax],r13d
   21829:	add    rbx,0x1
   2182d:	xor    r13d,r13d
   21830:	cmp    DWORD PTR [rcx],ebx
   21832:	jg     21380 <P7Traces2Alignment+0xe0>
   21838:	jmp    213dc <P7Traces2Alignment+0x13c>
   2183d:	nop    DWORD PTR [rax]
   21840:	cmp    BYTE PTR [rdx+rbx*1-0x1],0x8
   21845:	jne    213d4 <P7Traces2Alignment+0x134>
   2184b:	add    r13d,0x1
   2184f:	add    rbx,0x1
   21853:	cmp    DWORD PTR [rcx],ebx
   21855:	jg     21380 <P7Traces2Alignment+0xe0>
   2185b:	jmp    213dc <P7Traces2Alignment+0x13c>
   21860:	cmp    DWORD PTR [rbp+0x0],r13d
   21864:	jge    213d4 <P7Traces2Alignment+0x134>
   2186a:	mov    DWORD PTR [rbp+0x0],r13d
   2186e:	add    rbx,0x1
   21872:	cmp    DWORD PTR [rcx],ebx
   21874:	jg     21380 <P7Traces2Alignment+0xe0>
   2187a:	jmp    213dc <P7Traces2Alignment+0x13c>
   2187f:	nop
   21880:	cmp    DWORD PTR [r14],r13d
   21883:	jge    21948 <P7Traces2Alignment+0x6a8>
   21889:	mov    DWORD PTR [r14],r13d
   2188c:	add    rbx,0x1
   21890:	xor    r13d,r13d
   21893:	cmp    DWORD PTR [rcx],ebx
   21895:	jg     21380 <P7Traces2Alignment+0xe0>
   2189b:	jmp    213dc <P7Traces2Alignment+0x13c>
   218a0:	cmp    BYTE PTR [rdx+rbx*1-0x1],0x5
   218a5:	je     2184b <P7Traces2Alignment+0x5ab>
   218a7:	add    rbx,0x1
   218ab:	cmp    DWORD PTR [rcx],ebx
   218ad:	jg     21380 <P7Traces2Alignment+0xe0>
   218b3:	jmp    213dc <P7Traces2Alignment+0x13c>
   218b8:	nop    DWORD PTR [rax+rax*1+0x0]
   218c0:	mov    ebx,DWORD PTR [rbp+rcx*4+0x0]
   218c4:	add    ebx,0x1
   218c7:	jmp    215f0 <P7Traces2Alignment+0x350>
   218cc:	nop    DWORD PTR [rax+0x0]
   218d0:	mov    rdx,QWORD PTR [rsi]
   218d3:	mov    edi,DWORD PTR [rsp+0xc0]
   218da:	movsxd rax,ebx
   218dd:	add    rax,QWORD PTR [rdx+r14*1]
   218e1:	mov    rdx,rax
   218e4:	test   edi,edi
   218e6:	jne    21938 <P7Traces2Alignment+0x698>
   218e8:	mov    QWORD PTR [rsp+0x38],r9
   218ed:	mov    QWORD PTR [rsp+0x30],rsi
   218f2:	mov    QWORD PTR [rsp+0x28],rax
   218f7:	call   3810 <__ctype_tolower_loc@plt>
   218fc:	mov    r9,QWORD PTR [rsp+0x38]
   21901:	lea    rdi,[rip+0x40978]        # 62280 <Alphabet>
   21908:	mov    rcx,QWORD PTR [r9+r14*1]
   2190c:	movsx  rcx,BYTE PTR [rcx+r12*1]
   21911:	movsx  rcx,BYTE PTR [rdi+rcx*1]
   21916:	mov    rax,QWORD PTR [rax]
   21919:	mov    rdx,QWORD PTR [rsp+0x28]
   2191e:	add    ebx,0x1
   21921:	mov    eax,DWORD PTR [rax+rcx*4]
   21924:	mov    BYTE PTR [rdx],al
   21926:	mov    rax,QWORD PTR [r15]
   21929:	mov    rsi,QWORD PTR [rsp+0x30]
   2192e:	jmp    215f0 <P7Traces2Alignment+0x350>
   21933:	nop    DWORD PTR [rax+rax*1+0x0]
   21938:	mov    BYTE PTR [rdx],0x2a
   2193b:	mov    rax,QWORD PTR [r15]
   2193e:	jmp    215f0 <P7Traces2Alignment+0x350>
   21943:	nop    DWORD PTR [rax+rax*1+0x0]
   21948:	xor    r13d,r13d
   2194b:	add    rbx,0x1
   2194f:	cmp    DWORD PTR [rcx],ebx
   21951:	jg     21380 <P7Traces2Alignment+0xe0>
   21957:	jmp    213dc <P7Traces2Alignment+0x13c>
   2195c:	nop    DWORD PTR [rax+0x0]
   21960:	mov    rdx,QWORD PTR [rsi]
   21963:	mov    ecx,DWORD PTR [rsp+0xc0]
   2196a:	movsxd rax,ebx
   2196d:	add    rax,QWORD PTR [rdx+r14*1]
   21971:	mov    rdx,rax
   21974:	test   ecx,ecx
   21976:	jne    21938 <P7Traces2Alignment+0x698>
   21978:	mov    QWORD PTR [rsp+0x38],r9
   2197d:	mov    QWORD PTR [rsp+0x30],rsi
   21982:	mov    QWORD PTR [rsp+0x28],rax
   21987:	call   3810 <__ctype_tolower_loc@plt>
   2198c:	mov    r9,QWORD PTR [rsp+0x38]
   21991:	lea    rsi,[rip+0x408e8]        # 62280 <Alphabet>
   21998:	mov    rcx,QWORD PTR [r9+r14*1]
   2199c:	movsx  rcx,BYTE PTR [rcx+r12*1]
   219a1:	movsx  rcx,BYTE PTR [rsi+rcx*1]
   219a6:	jmp    21916 <P7Traces2Alignment+0x676>
   219ab:	nop    DWORD PTR [rax+rax*1+0x0]
   219b0:	mov    rax,QWORD PTR [r12]
   219b4:	mov    r13,QWORD PTR [rsp+0x50]
   219b9:	mov    QWORD PTR [rsp+0x10],r9
   219be:	mov    rdi,QWORD PTR [rax+rbx*1]
   219c2:	mov    esi,DWORD PTR [r13+0x0]
   219c6:	call   20960 <rightjustify>
   219cb:	cmp    DWORD PTR [rsp+0xc],0x1
   219d0:	mov    r9,QWORD PTR [rsp+0x10]
   219d5:	jle    21672 <P7Traces2Alignment+0x3d2>
   219db:	mov    eax,DWORD PTR [rsp+0x6c]
   219df:	mov    r8d,0x1
   219e5:	mov    QWORD PTR [rsp+0x28],r14
   219ea:	mov    QWORD PTR [rsp+0x18],rbx
   219ef:	mov    rbx,r8
   219f2:	add    rax,0x2
   219f6:	mov    QWORD PTR [rsp+0x10],r11
   219fb:	mov    QWORD PTR [rsp+0x30],rbp
   21a00:	mov    r14,rax
   21a03:	mov    QWORD PTR [rsp+0x38],r15
   21a08:	mov    QWORD PTR [rsp+0x60],r9
   21a0d:	jmp    21a19 <P7Traces2Alignment+0x779>
   21a0f:	nop
   21a10:	add    rbx,0x1
   21a14:	cmp    r14,rbx
   21a17:	je     21a84 <P7Traces2Alignment+0x7e4>
   21a19:	mov    r15d,DWORD PTR [r13+rbx*4+0x0]
   21a1e:	cmp    r15d,0x1
   21a22:	jle    21a10 <P7Traces2Alignment+0x770>
   21a24:	mov    rax,QWORD PTR [rsp+0x10]
   21a29:	movsxd rbp,DWORD PTR [rax+rbx*4]
   21a2d:	call   3820 <__ctype_b_loc@plt>
   21a32:	mov    rsi,QWORD PTR [rsp+0x18]
   21a37:	mov    r10,QWORD PTR [rax]
   21a3a:	mov    rax,QWORD PTR [r12]
   21a3e:	mov    rdi,QWORD PTR [rax+rsi*1]
   21a42:	xor    eax,eax
   21a44:	lea    r9,[rdi+rbp*1]
   21a48:	nop    DWORD PTR [rax+rax*1+0x0]
   21a50:	movsx  rdx,BYTE PTR [r9+rax*1+0x1]
   21a56:	mov    ecx,eax
   21a58:	add    rax,0x1
   21a5c:	test   BYTE PTR [r10+rdx*2+0x1],0x2
   21a62:	jne    21a50 <P7Traces2Alignment+0x7b0>
   21a64:	sar    ecx,1
   21a66:	mov    esi,r15d
   21a69:	add    rbx,0x1
   21a6d:	sub    esi,ecx
   21a6f:	movsxd rcx,ecx
   21a72:	lea    rax,[rcx+rbp*1+0x1]
   21a77:	add    rdi,rax
   21a7a:	call   20960 <rightjustify>
   21a7f:	cmp    r14,rbx
   21a82:	jne    21a19 <P7Traces2Alignment+0x779>
   21a84:	mov    r11,QWORD PTR [rsp+0x10]
   21a89:	mov    r14,QWORD PTR [rsp+0x28]
   21a8e:	mov    rbx,QWORD PTR [rsp+0x18]
   21a93:	mov    rbp,QWORD PTR [rsp+0x30]
   21a98:	mov    r15,QWORD PTR [rsp+0x38]
   21a9d:	mov    r9,QWORD PTR [rsp+0x60]
   21aa2:	jmp    21672 <P7Traces2Alignment+0x3d2>
   21aa7:	nop    WORD PTR [rax+rax*1+0x0]
   21ab0:	mov    rbp,QWORD PTR [rsp+0x28]
   21ab5:	mov    r12,r15
   21ab8:	mov    ebx,DWORD PTR [rsp]
   21abb:	mov    esi,0x22b
   21ac0:	lea    rdi,[rip+0x1e7a9]        # 40270 <defmq.7318+0xb0>
   21ac7:	lea    edx,[rbx+0x1]
   21aca:	movsxd rdx,edx
   21acd:	call   36810 <sre_malloc>
   21ad2:	mov    QWORD PTR [r12+0x58],rax
   21ad7:	test   ebx,ebx
   21ad9:	jle    21afd <P7Traces2Alignment+0x85d>
   21adb:	lea    esi,[rbx-0x1]
   21ade:	xor    edx,edx
   21ae0:	jmp    21aeb <P7Traces2Alignment+0x84b>
   21ae2:	nop    WORD PTR [rax+rax*1+0x0]
   21ae8:	mov    rdx,rcx
   21aeb:	mov    BYTE PTR [rax+rdx*1],0x2e
   21aef:	lea    rcx,[rdx+0x1]
   21af3:	mov    rax,QWORD PTR [r12+0x58]
   21af8:	cmp    rsi,rdx
   21afb:	jne    21ae8 <P7Traces2Alignment+0x848>
   21afd:	mov    edi,DWORD PTR [rsp+0xc]
   21b01:	test   edi,edi
   21b03:	jle    21b2d <P7Traces2Alignment+0x88d>
   21b05:	lea    ecx,[rdi-0x1]
   21b08:	lea    rdx,[rbp+0x4]
   21b0c:	lea    rsi,[rbp+rcx*4+0x8]
   21b11:	nop    DWORD PTR [rax+0x0]
   21b18:	movsxd rcx,DWORD PTR [rdx]
   21b1b:	add    rdx,0x4
   21b1f:	mov    BYTE PTR [rax+rcx*1],0x78
   21b23:	mov    rax,QWORD PTR [r12+0x58]
   21b28:	cmp    rdx,rsi
   21b2b:	jne    21b18 <P7Traces2Alignment+0x878>
   21b2d:	mov    rsi,QWORD PTR [rsp+0x20]
   21b32:	mov    rdi,QWORD PTR [rsp+0x50]
   21b37:	mov    BYTE PTR [rax+rsi*1],0x0
   21b3b:	call   3460 <free@plt>
   21b40:	mov    rdi,rbp
   21b43:	call   3460 <free@plt>
   21b48:	add    rsp,0x88
   21b4f:	mov    rax,r12
   21b52:	pop    rbx
   21b53:	pop    rbp
   21b54:	pop    r12
   21b56:	pop    r13
   21b58:	pop    r14
   21b5a:	pop    r15
   21b5c:	ret    
   21b5d:	mov    rdx,QWORD PTR [rsp+0x18]
   21b62:	mov    esi,0x21d
   21b67:	lea    rdi,[rip+0x1e702]        # 40270 <defmq.7318+0xb0>
   21b6e:	call   36810 <sre_malloc>
   21b73:	mov    QWORD PTR [r15+0x70],rax
   21b77:	jmp    2172a <P7Traces2Alignment+0x48a>
   21b7c:	mov    rdx,QWORD PTR [rsp+0x18]
   21b81:	mov    esi,0x222
   21b86:	lea    rdi,[rip+0x1e6e3]        # 40270 <defmq.7318+0xb0>
   21b8d:	call   36810 <sre_malloc>
   21b92:	mov    QWORD PTR [r15+0x78],rax
   21b96:	jmp    2175c <P7Traces2Alignment+0x4bc>
   21b9b:	mov    eax,DWORD PTR [rsp+0x68]
   21b9f:	mov    edx,0xa
   21ba4:	mov    esi,0x211
   21ba9:	lea    rdi,[rip+0x1e6c0]        # 40270 <defmq.7318+0xb0>
   21bb0:	mov    DWORD PTR [r12+0x1c],eax
   21bb5:	mov    eax,DWORD PTR [rsp]
   21bb8:	mov    DWORD PTR [r12+0x18],eax
   21bbd:	call   36810 <sre_malloc>
   21bc2:	lea    r8,[rip+0x1bbac]        # 3d775 <_IO_stdin_used+0x775>
   21bc9:	mov    esi,0x1
   21bce:	lea    rcx,[rip+0x1e6c1]        # 40296 <defmq.7318+0xd6>
   21bd5:	mov    QWORD PTR [r12+0x40],rax
   21bda:	mov    rdi,rax
   21bdd:	mov    rdx,0xffffffffffffffff
   21be4:	xor    eax,eax
   21be6:	call   3830 <__sprintf_chk@plt>
   21beb:	jmp    21ab8 <P7Traces2Alignment+0x818>
   21bf0:	mov    rdx,QWORD PTR [rsp+0x10]
   21bf5:	mov    esi,0x1c5
   21bfa:	lea    rdi,[rip+0x1e66f]        # 40270 <defmq.7318+0xb0>
   21c01:	call   36810 <sre_malloc>
   21c06:	mov    DWORD PTR [rax],0xffffffff
   21c0c:	mov    rbp,rax
   21c0f:	mov    rax,QWORD PTR [rsp+0x50]
   21c14:	mov    eax,DWORD PTR [rax]
   21c16:	mov    DWORD PTR [rsp],eax
   21c19:	jmp    21487 <P7Traces2Alignment+0x1e7>
   21c1e:	xchg   ax,ax

0000000000021c20 <TransitionScoreLookup>:
   21c20:	endbr64 
   21c24:	push   r13
   21c26:	push   r12
   21c28:	sub    rsp,0x8
   21c2c:	cmp    sil,0xa
   21c30:	ja     21e0c <TransitionScoreLookup+0x1ec>
   21c36:	mov    r10,rdi
   21c39:	movzx  r9d,sil
   21c3d:	lea    rdi,[rip+0x1e814]        # 40458 <defmq.7318+0x298>
   21c44:	movsxd rax,DWORD PTR [rdi+r9*4]
   21c48:	add    rax,rdi
   21c4b:	notrack jmp rax
   21c4e:	xchg   ax,ax
   21c50:	xor    r12d,r12d
   21c53:	add    rsp,0x8
   21c57:	mov    eax,r12d
   21c5a:	pop    r12
   21c5c:	pop    r13
   21c5e:	ret    
   21c5f:	nop
   21c60:	cmp    cl,0x1
   21c63:	je     21e58 <TransitionScoreLookup+0x238>
   21c69:	cmp    cl,0x3
   21c6c:	je     21ee0 <TransitionScoreLookup+0x2c0>
   21c72:	movsx  edi,cl
   21c75:	call   b100 <Statetype>
   21c7a:	mov    edi,0x3
   21c7f:	mov    r12,rax
   21c82:	call   b100 <Statetype>
   21c87:	mov    rdx,r12
   21c8a:	lea    rdi,[rip+0x1e60e]        # 4029f <defmq.7318+0xdf>
   21c91:	xor    r12d,r12d
   21c94:	mov    rsi,rax
   21c97:	xor    eax,eax
   21c99:	call   317f0 <Die>
   21c9e:	add    rsp,0x8
   21ca2:	mov    eax,r12d
   21ca5:	pop    r12
   21ca7:	pop    r13
   21ca9:	ret    
   21caa:	nop    WORD PTR [rax+rax*1+0x0]
   21cb0:	cmp    cl,0x5
   21cb3:	je     21f48 <TransitionScoreLookup+0x328>
   21cb9:	cmp    cl,0x6
   21cbc:	jne    21eb0 <TransitionScoreLookup+0x290>
   21cc2:	mov    r12d,DWORD PTR [r10+0x150]
   21cc9:	jmp    21c53 <TransitionScoreLookup+0x33>
   21ccb:	nop    DWORD PTR [rax+rax*1+0x0]
   21cd0:	cmp    cl,0x8
   21cd3:	je     21f38 <TransitionScoreLookup+0x318>
   21cd9:	cmp    cl,0x9
   21cdc:	jne    21ec8 <TransitionScoreLookup+0x2a8>
   21ce2:	mov    r12d,DWORD PTR [r10+0x160]
   21ce9:	jmp    21c53 <TransitionScoreLookup+0x33>
   21cee:	xchg   ax,ax
   21cf0:	cmp    cl,0x1
   21cf3:	je     21f20 <TransitionScoreLookup+0x300>
   21cf9:	cmp    cl,0x2
   21cfc:	je     21e80 <TransitionScoreLookup+0x260>
   21d02:	movsx  edi,cl
   21d05:	call   b100 <Statetype>
   21d0a:	mov    edi,0x6
   21d0f:	mov    r12,rax
   21d12:	jmp    21c82 <TransitionScoreLookup+0x62>
   21d17:	nop    WORD PTR [rax+rax*1+0x0]
   21d20:	cmp    cl,0x3
   21d23:	je     21f90 <TransitionScoreLookup+0x370>
   21d29:	jg     21e38 <TransitionScoreLookup+0x218>
   21d2f:	cmp    cl,0x1
   21d32:	je     21fc8 <TransitionScoreLookup+0x3a8>
   21d38:	cmp    cl,0x2
   21d3b:	jne    21fb0 <TransitionScoreLookup+0x390>
   21d41:	mov    rax,QWORD PTR [r10+0x138]
   21d48:	movsxd rdx,edx
   21d4b:	mov    rax,QWORD PTR [rax+0x10]
   21d4f:	mov    r12d,DWORD PTR [rax+rdx*4]
   21d53:	jmp    21c53 <TransitionScoreLookup+0x33>
   21d58:	nop    DWORD PTR [rax+rax*1+0x0]
   21d60:	cmp    cl,0x8
   21d63:	je     21f10 <TransitionScoreLookup+0x2f0>
   21d69:	cmp    cl,0xa
   21d6c:	je     21ea0 <TransitionScoreLookup+0x280>
   21d72:	movsx  edi,cl
   21d75:	call   b100 <Statetype>
   21d7a:	mov    edi,0x7
   21d7f:	mov    r12,rax
   21d82:	jmp    21c82 <TransitionScoreLookup+0x62>
   21d87:	nop    WORD PTR [rax+rax*1+0x0]
   21d90:	cmp    cl,0x6
   21d93:	je     21f00 <TransitionScoreLookup+0x2e0>
   21d99:	cmp    cl,0xa
   21d9c:	je     21e70 <TransitionScoreLookup+0x250>
   21da2:	movsx  edi,cl
   21da5:	call   b100 <Statetype>
   21daa:	mov    edi,0xa
   21daf:	mov    r12,rax
   21db2:	jmp    21c82 <TransitionScoreLookup+0x62>
   21db7:	nop    WORD PTR [rax+rax*1+0x0]
   21dc0:	cmp    cl,0x2
   21dc3:	je     21f70 <TransitionScoreLookup+0x350>
   21dc9:	xor    r12d,r12d
   21dcc:	cmp    cl,0x7
   21dcf:	je     21c53 <TransitionScoreLookup+0x33>
   21dd5:	cmp    cl,0x1
   21dd8:	je     21f58 <TransitionScoreLookup+0x338>
   21dde:	movsx  edi,cl
   21de1:	call   b100 <Statetype>
   21de6:	mov    edi,0x2
   21deb:	mov    r13,rax
   21dee:	call   b100 <Statetype>
   21df3:	mov    rdx,r13
   21df6:	lea    rdi,[rip+0x1e4a2]        # 4029f <defmq.7318+0xdf>
   21dfd:	mov    rsi,rax
   21e00:	xor    eax,eax
   21e02:	call   317f0 <Die>
   21e07:	jmp    21c53 <TransitionScoreLookup+0x33>
   21e0c:	movsx  edi,sil
   21e10:	xor    r12d,r12d
   21e13:	call   b100 <Statetype>
   21e18:	lea    rdi,[rip+0x1e459]        # 40278 <defmq.7318+0xb8>
   21e1f:	mov    rsi,rax
   21e22:	xor    eax,eax
   21e24:	call   317f0 <Die>
   21e29:	add    rsp,0x8
   21e2d:	mov    eax,r12d
   21e30:	pop    r12
   21e32:	pop    r13
   21e34:	ret    
   21e35:	nop    DWORD PTR [rax]
   21e38:	cmp    cl,0x7
   21e3b:	jne    21fb0 <TransitionScoreLookup+0x390>
   21e41:	mov    rax,QWORD PTR [r10+0x178]
   21e48:	movsxd rdx,edx
   21e4b:	mov    r12d,DWORD PTR [rax+rdx*4]
   21e4f:	jmp    21c53 <TransitionScoreLookup+0x33>
   21e54:	nop    DWORD PTR [rax+0x0]
   21e58:	mov    rax,QWORD PTR [r10+0x138]
   21e5f:	movsxd rdx,edx
   21e62:	mov    rax,QWORD PTR [rax+0x18]
   21e66:	mov    r12d,DWORD PTR [rax+rdx*4]
   21e6a:	jmp    21c53 <TransitionScoreLookup+0x33>
   21e6f:	nop
   21e70:	mov    r12d,DWORD PTR [r10+0x16c]
   21e77:	jmp    21c53 <TransitionScoreLookup+0x33>
   21e7c:	nop    DWORD PTR [rax+0x0]
   21e80:	movss  xmm0,DWORD PTR [r10+0xa8]
   21e89:	movss  xmm1,DWORD PTR [rip+0x1b50b]        # 3d39c <_IO_stdin_used+0x39c>
   21e91:	add    rsp,0x8
   21e95:	pop    r12
   21e97:	pop    r13
   21e99:	jmp    17710 <Prob2Score>
   21e9e:	xchg   ax,ax
   21ea0:	mov    r12d,DWORD PTR [r10+0x15c]
   21ea7:	jmp    21c53 <TransitionScoreLookup+0x33>
   21eac:	nop    DWORD PTR [rax+0x0]
   21eb0:	movsx  edi,cl
   21eb3:	call   b100 <Statetype>
   21eb8:	mov    edi,0x5
   21ebd:	mov    r12,rax
   21ec0:	jmp    21c82 <TransitionScoreLookup+0x62>
   21ec5:	nop    DWORD PTR [rax]
   21ec8:	movsx  edi,cl
   21ecb:	call   b100 <Statetype>
   21ed0:	mov    edi,0x8
   21ed5:	mov    r12,rax
   21ed8:	jmp    21c82 <TransitionScoreLookup+0x62>
   21edd:	nop    DWORD PTR [rax]
   21ee0:	mov    rax,QWORD PTR [r10+0x138]
   21ee7:	movsxd rdx,edx
   21eea:	mov    rax,QWORD PTR [rax+0x20]
   21eee:	mov    r12d,DWORD PTR [rax+rdx*4]
   21ef2:	jmp    21c53 <TransitionScoreLookup+0x33>
   21ef7:	nop    WORD PTR [rax+rax*1+0x0]
   21f00:	mov    r12d,DWORD PTR [r10+0x168]
   21f07:	jmp    21c53 <TransitionScoreLookup+0x33>
   21f0c:	nop    DWORD PTR [rax+0x0]
   21f10:	mov    r12d,DWORD PTR [r10+0x158]
   21f17:	jmp    21c53 <TransitionScoreLookup+0x33>
   21f1c:	nop    DWORD PTR [rax+0x0]
   21f20:	mov    rax,QWORD PTR [r10+0x170]
   21f27:	movsxd r8,r8d
   21f2a:	mov    r12d,DWORD PTR [rax+r8*4]
   21f2e:	jmp    21c53 <TransitionScoreLookup+0x33>
   21f33:	nop    DWORD PTR [rax+rax*1+0x0]
   21f38:	mov    r12d,DWORD PTR [r10+0x164]
   21f3f:	jmp    21c53 <TransitionScoreLookup+0x33>
   21f44:	nop    DWORD PTR [rax+0x0]
   21f48:	mov    r12d,DWORD PTR [r10+0x154]
   21f4f:	jmp    21c53 <TransitionScoreLookup+0x33>
   21f54:	nop    DWORD PTR [rax+0x0]
   21f58:	mov    rax,QWORD PTR [r10+0x138]
   21f5f:	movsxd rdx,edx
   21f62:	mov    rax,QWORD PTR [rax+0x28]
   21f66:	mov    r12d,DWORD PTR [rax+rdx*4]
   21f6a:	jmp    21c53 <TransitionScoreLookup+0x33>
   21f6f:	nop
   21f70:	mov    rax,QWORD PTR [r10+0x138]
   21f77:	movsxd rdx,edx
   21f7a:	mov    rax,QWORD PTR [rax+0x30]
   21f7e:	mov    r12d,DWORD PTR [rax+rdx*4]
   21f82:	jmp    21c53 <TransitionScoreLookup+0x33>
   21f87:	nop    WORD PTR [rax+rax*1+0x0]
   21f90:	mov    rax,QWORD PTR [r10+0x138]
   21f97:	movsxd rdx,edx
   21f9a:	mov    rax,QWORD PTR [rax+0x8]
   21f9e:	mov    r12d,DWORD PTR [rax+rdx*4]
   21fa2:	jmp    21c53 <TransitionScoreLookup+0x33>
   21fa7:	nop    WORD PTR [rax+rax*1+0x0]
   21fb0:	movsx  edi,cl
   21fb3:	call   b100 <Statetype>
   21fb8:	mov    edi,0x1
   21fbd:	mov    r12,rax
   21fc0:	jmp    21c82 <TransitionScoreLookup+0x62>
   21fc5:	nop    DWORD PTR [rax]
   21fc8:	mov    rax,QWORD PTR [r10+0x138]
   21fcf:	movsxd rdx,edx
   21fd2:	mov    rax,QWORD PTR [rax]
   21fd5:	mov    r12d,DWORD PTR [rax+rdx*4]
   21fd9:	jmp    21c53 <TransitionScoreLookup+0x33>
   21fde:	xchg   ax,ax

0000000000021fe0 <P7TraceScore>:
   21fe0:	endbr64 
   21fe4:	push   r14
   21fe6:	push   r13
   21fe8:	push   r12
   21fea:	push   rbp
   21feb:	push   rbx
   21fec:	cmp    DWORD PTR [rdx],0x1
   21fef:	jle    22088 <P7TraceScore+0xa8>
   21ff5:	mov    r14,rdi
   21ff8:	mov    r12,rsi
   21ffb:	mov    rbp,rdx
   21ffe:	xor    ebx,ebx
   22000:	xor    r13d,r13d
   22003:	jmp    22045 <P7TraceScore+0x65>
   22005:	nop    DWORD PTR [rax]
   22008:	cmp    sil,0x3
   2200c:	jne    22020 <P7TraceScore+0x40>
   2200e:	mov    r10,QWORD PTR [r14+0x148]
   22015:	movsxd r8,r9d
   22018:	mov    r10,QWORD PTR [r10+rcx*8]
   2201c:	add    r13d,DWORD PTR [r10+r8*4]
   22020:	add    rbx,0x1
   22024:	mov    r8d,DWORD PTR [rax+rdi*1+0x4]
   22029:	mov    rdi,r14
   2202c:	movsx  ecx,BYTE PTR [rdx+rbx*1]
   22030:	mov    edx,r9d
   22033:	call   21c20 <TransitionScoreLookup>
   22038:	add    r13d,eax
   2203b:	mov    eax,DWORD PTR [rbp+0x0]
   2203e:	sub    eax,0x1
   22041:	cmp    eax,ebx
   22043:	jle    2208b <P7TraceScore+0xab>
   22045:	mov    rax,QWORD PTR [rbp+0x18]
   22049:	mov    rdx,QWORD PTR [rbp+0x8]
   2204d:	lea    rdi,[rbx*4+0x0]
   22055:	movsxd rax,DWORD PTR [rax+rbx*4]
   22059:	movsx  esi,BYTE PTR [rdx+rbx*1]
   2205d:	movsx  rcx,BYTE PTR [r12+rax*1]
   22062:	mov    rax,QWORD PTR [rbp+0x10]
   22066:	mov    r9d,DWORD PTR [rax+rbx*4]
   2206a:	cmp    sil,0x1
   2206e:	jne    22008 <P7TraceScore+0x28>
   22070:	mov    r10,QWORD PTR [r14+0x140]
   22077:	movsxd r8,r9d
   2207a:	mov    r10,QWORD PTR [r10+rcx*8]
   2207e:	add    r13d,DWORD PTR [r10+r8*4]
   22082:	jmp    22020 <P7TraceScore+0x40>
   22084:	nop    DWORD PTR [rax+0x0]
   22088:	xor    r13d,r13d
   2208b:	pop    rbx
   2208c:	mov    edi,r13d
   2208f:	pop    rbp
   22090:	pop    r12
   22092:	pop    r13
   22094:	pop    r14
   22096:	jmp    17820 <Scorify>
   2209b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000220a0 <CreateFancyAli>:
   220a0:	endbr64 
   220a4:	push   r15
   220a6:	mov    r15,rsi
   220a9:	push   r14
   220ab:	mov    r14,rcx
   220ae:	push   r13
   220b0:	push   r12
   220b2:	push   rbp
   220b3:	mov    rbp,rdi
   220b6:	push   rbx
   220b7:	sub    rsp,0x38
   220bb:	mov    QWORD PTR [rsp+0x8],rdx
   220c0:	call   201b0 <AllocFancyAli>
   220c5:	mov    esi,0x2a8
   220ca:	lea    rdi,[rip+0x1e19f]        # 40270 <defmq.7318+0xb0>
   220d1:	mov    r12,rax
   220d4:	mov    QWORD PTR [rax],0x0
   220db:	mov    QWORD PTR [rax+0x8],0x0
   220e3:	mov    eax,DWORD PTR [rbp+0x0]
   220e6:	lea    edx,[rax+0x1]
   220e9:	movsxd rdx,edx
   220ec:	call   36810 <sre_malloc>
   220f1:	mov    esi,0x2a9
   220f6:	lea    rdi,[rip+0x1e173]        # 40270 <defmq.7318+0xb0>
   220fd:	mov    QWORD PTR [r12+0x10],rax
   22102:	mov    eax,DWORD PTR [rbp+0x0]
   22105:	lea    edx,[rax+0x1]
   22108:	movsxd rdx,edx
   2210b:	call   36810 <sre_malloc>
   22110:	mov    esi,0x2aa
   22115:	lea    rdi,[rip+0x1e154]        # 40270 <defmq.7318+0xb0>
   2211c:	mov    QWORD PTR [r12+0x18],rax
   22121:	mov    eax,DWORD PTR [rbp+0x0]
   22124:	lea    edx,[rax+0x1]
   22127:	movsxd rdx,edx
   2212a:	call   36810 <sre_malloc>
   2212f:	movsxd rdx,DWORD PTR [rbp+0x0]
   22133:	mov    rdi,QWORD PTR [r12+0x10]
   22138:	mov    esi,0x20
   2213d:	mov    QWORD PTR [r12+0x20],rax
   22142:	call   35d0 <memset@plt>
   22147:	movsxd rdx,DWORD PTR [rbp+0x0]
   2214b:	mov    rdi,QWORD PTR [r12+0x18]
   22150:	mov    esi,0x20
   22155:	call   35d0 <memset@plt>
   2215a:	movsxd rdx,DWORD PTR [rbp+0x0]
   2215e:	mov    rdi,QWORD PTR [r12+0x20]
   22163:	mov    esi,0x20
   22168:	call   35d0 <memset@plt>
   2216d:	mov    eax,DWORD PTR [r15+0x1c8]
   22174:	test   al,0x4
   22176:	jne    22680 <CreateFancyAli+0x5e0>
   2217c:	test   al,0x8
   2217e:	jne    226be <CreateFancyAli+0x61e>
   22184:	mov    rdi,QWORD PTR [r15]
   22187:	call   36670 <Strdup>
   2218c:	mov    rdi,r14
   2218f:	mov    QWORD PTR [r12+0x30],rax
   22194:	call   36670 <Strdup>
   22199:	movss  xmm2,DWORD PTR [rip+0x1b58f]        # 3d730 <_IO_stdin_used+0x730>
   221a1:	cmp    DWORD PTR [rip+0x3fed8],0x3        # 62080 <Alphabet_type>
   221a8:	mov    QWORD PTR [r12+0x38],rax
   221ad:	movss  DWORD PTR [rsp+0x14],xmm2
   221b3:	je     221c3 <CreateFancyAli+0x123>
   221b5:	movss  xmm3,DWORD PTR [rip+0x1b577]        # 3d734 <_IO_stdin_used+0x734>
   221bd:	movss  DWORD PTR [rsp+0x14],xmm3
   221c3:	mov    r8d,DWORD PTR [rbp+0x0]
   221c7:	lea    eax,[r8-0x1]
   221cb:	test   r8d,r8d
   221ce:	jle    226f3 <CreateFancyAli+0x653>
   221d4:	mov    rsi,QWORD PTR [rbp+0x18]
   221d8:	mov    ecx,eax
   221da:	mov    rdx,rsi
   221dd:	lea    rdi,[rsi+rcx*4+0x4]
   221e2:	jmp    221f1 <CreateFancyAli+0x151>
   221e4:	nop    DWORD PTR [rax+0x0]
   221e8:	add    rdx,0x4
   221ec:	cmp    rdi,rdx
   221ef:	je     22200 <CreateFancyAli+0x160>
   221f1:	mov    ecx,DWORD PTR [rdx]
   221f3:	test   ecx,ecx
   221f5:	jle    221e8 <CreateFancyAli+0x148>
   221f7:	mov    DWORD PTR [r12+0x40],ecx
   221fc:	test   eax,eax
   221fe:	js     22225 <CreateFancyAli+0x185>
   22200:	cdqe   
   22202:	jmp    22210 <CreateFancyAli+0x170>
   22204:	nop    DWORD PTR [rax+0x0]
   22208:	sub    rax,0x1
   2220c:	test   eax,eax
   2220e:	js     2221c <CreateFancyAli+0x17c>
   22210:	mov    edx,DWORD PTR [rsi+rax*4]
   22213:	test   edx,edx
   22215:	jle    22208 <CreateFancyAli+0x168>
   22217:	mov    DWORD PTR [r12+0x44],edx
   2221c:	test   r8d,r8d
   2221f:	jle    22700 <CreateFancyAli+0x660>
   22225:	xor    ebx,ebx
   22227:	lea    r13,[rip+0x1e256]        # 40484 <defmq.7318+0x2c4>
   2222e:	lea    r14,[rip+0x4004b]        # 62280 <Alphabet>
   22235:	nop    DWORD PTR [rax]
   22238:	mov    rax,QWORD PTR [rbp+0x8]
   2223c:	cmp    BYTE PTR [rax+rbx*1],0xa
   22240:	ja     225de <CreateFancyAli+0x53e>
   22246:	movzx  eax,BYTE PTR [rax+rbx*1]
   2224a:	movsxd rax,DWORD PTR [r13+rax*4+0x0]
   2224f:	add    rax,r13
   22252:	notrack jmp rax
   22255:	nop    DWORD PTR [rax]
   22258:	mov    rax,QWORD PTR [r12+0x10]
   2225d:	mov    BYTE PTR [rax+rbx*1],0x2d
   22261:	mov    rax,QWORD PTR [rbp+0x18]
   22265:	mov    ecx,DWORD PTR [rax+rbx*4]
   22268:	test   ecx,ecx
   2226a:	mov    DWORD PTR [rsp+0x18],ecx
   2226e:	jle    222a0 <CreateFancyAli+0x200>
   22270:	call   3810 <__ctype_tolower_loc@plt>
   22275:	movsxd rcx,DWORD PTR [rsp+0x18]
   2227a:	mov    rdi,QWORD PTR [rsp+0x8]
   2227f:	mov    rdx,QWORD PTR [r12+0x20]
   22284:	movsx  rcx,BYTE PTR [rdi+rcx*1]
   22289:	movsx  rsi,BYTE PTR [r14+rcx*1]
   2228e:	mov    rcx,QWORD PTR [rax]
   22291:	mov    ecx,DWORD PTR [rcx+rsi*4]
   22294:	mov    BYTE PTR [rdx+rbx*1],cl
   22297:	nop    WORD PTR [rax+rax*1+0x0]
   222a0:	lea    eax,[rbx+0x1]
   222a3:	add    rbx,0x1
   222a7:	cmp    DWORD PTR [rbp+0x0],ebx
   222aa:	jg     22238 <CreateFancyAli+0x198>
   222ac:	movsxd rdx,eax
   222af:	mov    DWORD PTR [r12+0x28],eax
   222b4:	mov    eax,DWORD PTR [r15+0x1c8]
   222bb:	test   al,0x4
   222bd:	je     222ce <CreateFancyAli+0x22e>
   222bf:	mov    rax,QWORD PTR [r12]
   222c3:	mov    BYTE PTR [rax+rdx*1],0x0
   222c7:	mov    eax,DWORD PTR [r15+0x1c8]
   222ce:	test   al,0x8
   222d0:	je     222db <CreateFancyAli+0x23b>
   222d2:	mov    rax,QWORD PTR [r12+0x8]
   222d7:	mov    BYTE PTR [rax+rdx*1],0x0
   222db:	mov    rax,QWORD PTR [r12+0x10]
   222e0:	mov    BYTE PTR [rax+rdx*1],0x0
   222e4:	mov    rax,QWORD PTR [r12+0x18]
   222e9:	mov    BYTE PTR [rax+rdx*1],0x0
   222ed:	mov    rax,QWORD PTR [r12+0x20]
   222f2:	mov    BYTE PTR [rax+rdx*1],0x0
   222f6:	add    rsp,0x38
   222fa:	mov    rax,r12
   222fd:	pop    rbx
   222fe:	pop    rbp
   222ff:	pop    r12
   22301:	pop    r13
   22303:	pop    r14
   22305:	pop    r15
   22307:	ret    
   22308:	nop    DWORD PTR [rax+rax*1+0x0]
   22310:	mov    rax,QWORD PTR [r12+0x10]
   22315:	mov    BYTE PTR [rax+rbx*1],0x2a
   22319:	jmp    222a0 <CreateFancyAli+0x200>
   2231b:	nop    DWORD PTR [rax+rax*1+0x0]
   22320:	mov    rax,QWORD PTR [r12+0x10]
   22325:	mov    rdx,QWORD PTR [rsp+0x8]
   2232a:	mov    BYTE PTR [rax+rbx*1],0x2e
   2232e:	mov    rax,QWORD PTR [rbp+0x18]
   22332:	mov    rsi,QWORD PTR [rbp+0x10]
   22336:	movsxd rax,DWORD PTR [rax+rbx*4]
   2233a:	movsxd rsi,DWORD PTR [rsi+rbx*4]
   2233e:	movsx  rdi,BYTE PTR [rdx+rax*1]
   22343:	mov    rax,QWORD PTR [r15+0x148]
   2234a:	mov    rax,QWORD PTR [rax+rdi*8]
   2234e:	mov    rcx,rdi
   22351:	mov    eax,DWORD PTR [rax+rsi*4]
   22354:	test   eax,eax
   22356:	jle    2236d <CreateFancyAli+0x2cd>
   22358:	mov    rax,QWORD PTR [r12+0x18]
   2235d:	mov    BYTE PTR [rax+rbx*1],0x2b
   22361:	mov    rax,QWORD PTR [rbp+0x18]
   22365:	movsxd rax,DWORD PTR [rax+rbx*4]
   22369:	movzx  ecx,BYTE PTR [rdx+rax*1]
   2236d:	mov    BYTE PTR [rsp+0x18],cl
   22371:	call   3810 <__ctype_tolower_loc@plt>
   22376:	movsx  rcx,BYTE PTR [rsp+0x18]
   2237c:	mov    rdx,QWORD PTR [r12+0x20]
   22381:	movsx  rsi,BYTE PTR [r14+rcx*1]
   22386:	mov    rcx,QWORD PTR [rax]
   22389:	mov    ecx,DWORD PTR [rcx+rsi*4]
   2238c:	mov    BYTE PTR [rdx+rbx*1],cl
   2238f:	jmp    222a0 <CreateFancyAli+0x200>
   22394:	nop    DWORD PTR [rax+0x0]
   22398:	mov    rax,QWORD PTR [rbp+0x10]
   2239c:	mov    ecx,DWORD PTR [r15+0x1c8]
   223a3:	lea    r8,[rbx*4+0x0]
   223ab:	movsxd rax,DWORD PTR [rax+rbx*4]
   223af:	test   cl,0x4
   223b2:	je     223d2 <CreateFancyAli+0x332>
   223b4:	mov    rcx,QWORD PTR [r15+0x18]
   223b8:	movzx  ecx,BYTE PTR [rcx+rax*1]
   223bc:	mov    rax,QWORD PTR [r12]
   223c0:	mov    BYTE PTR [rax+rbx*1],cl
   223c3:	mov    rax,QWORD PTR [rbp+0x10]
   223c7:	mov    ecx,DWORD PTR [r15+0x1c8]
   223ce:	movsxd rax,DWORD PTR [rax+rbx*4]
   223d2:	and    ecx,0x8
   223d5:	je     223ef <CreateFancyAli+0x34f>
   223d7:	mov    rcx,QWORD PTR [r15+0x20]
   223db:	movzx  ecx,BYTE PTR [rcx+rax*1]
   223df:	mov    rax,QWORD PTR [r12+0x8]
   223e4:	mov    BYTE PTR [rax+rbx*1],cl
   223e7:	mov    rax,QWORD PTR [rbp+0x10]
   223eb:	movsxd rax,DWORD PTR [rax+r8*1]
   223ef:	mov    rcx,QWORD PTR [r15+0x98]
   223f6:	mov    esi,DWORD PTR [rip+0x3ff04]        # 62300 <Alphabet_size>
   223fc:	mov    QWORD PTR [rsp+0x18],r8
   22401:	mov    rdi,QWORD PTR [rcx+rax*8]
   22405:	call   3b110 <FArgMax>
   2240a:	mov    rcx,QWORD PTR [r12+0x10]
   2240f:	mov    r8,QWORD PTR [rsp+0x18]
   22414:	cdqe   
   22416:	movss  xmm1,DWORD PTR [rsp+0x14]
   2241c:	movzx  esi,BYTE PTR [r14+rax*1]
   22421:	mov    BYTE PTR [rcx+rbx*1],sil
   22425:	mov    rcx,QWORD PTR [rbp+0x10]
   22429:	movsxd rsi,DWORD PTR [rcx+r8*1]
   2242d:	mov    rcx,QWORD PTR [r15+0x98]
   22434:	mov    rcx,QWORD PTR [rcx+rsi*8]
   22438:	comiss xmm1,DWORD PTR [rcx+rax*4]
   2243c:	jbe    2245a <CreateFancyAli+0x3ba>
   2243e:	call   3810 <__ctype_tolower_loc@plt>
   22443:	mov    r8,rax
   22446:	mov    rax,QWORD PTR [r12+0x10]
   2244b:	mov    rcx,QWORD PTR [r8]
   2244e:	add    rax,rbx
   22451:	movsx  rsi,BYTE PTR [rax]
   22455:	mov    ecx,DWORD PTR [rcx+rsi*4]
   22458:	mov    BYTE PTR [rax],cl
   2245a:	mov    rax,QWORD PTR [r12+0x20]
   2245f:	mov    BYTE PTR [rax+rbx*1],0x2d
   22463:	jmp    222a0 <CreateFancyAli+0x200>
   22468:	nop    DWORD PTR [rax+rax*1+0x0]
   22470:	mov    rax,QWORD PTR [rbp+0x10]
   22474:	mov    esi,DWORD PTR [r15+0x1c8]
   2247b:	lea    rcx,[rbx*4+0x0]
   22483:	movsxd rax,DWORD PTR [rax+rbx*4]
   22487:	test   sil,0x4
   2248b:	je     224ac <CreateFancyAli+0x40c>
   2248d:	mov    rsi,QWORD PTR [r15+0x18]
   22491:	movzx  esi,BYTE PTR [rsi+rax*1]
   22495:	mov    rax,QWORD PTR [r12]
   22499:	mov    BYTE PTR [rax+rbx*1],sil
   2249d:	mov    rax,QWORD PTR [rbp+0x10]
   224a1:	mov    esi,DWORD PTR [r15+0x1c8]
   224a8:	movsxd rax,DWORD PTR [rax+rbx*4]
   224ac:	and    esi,0x8
   224af:	je     224ca <CreateFancyAli+0x42a>
   224b1:	mov    rsi,QWORD PTR [r15+0x20]
   224b5:	movzx  esi,BYTE PTR [rsi+rax*1]
   224b9:	mov    rax,QWORD PTR [r12+0x8]
   224be:	mov    BYTE PTR [rax+rbx*1],sil
   224c2:	mov    rax,QWORD PTR [rbp+0x10]
   224c6:	movsxd rax,DWORD PTR [rax+rcx*1]
   224ca:	mov    rsi,QWORD PTR [r15+0x98]
   224d1:	mov    QWORD PTR [rsp+0x18],rcx
   224d6:	mov    rdi,QWORD PTR [rsi+rax*8]
   224da:	mov    esi,DWORD PTR [rip+0x3fe20]        # 62300 <Alphabet_size>
   224e0:	call   3b110 <FArgMax>
   224e5:	mov    rcx,QWORD PTR [rsp+0x18]
   224ea:	movss  xmm0,DWORD PTR [rsp+0x14]
   224f0:	movsxd r8,eax
   224f3:	mov    rax,QWORD PTR [r12+0x10]
   224f8:	movzx  edi,BYTE PTR [r14+r8*1]
   224fd:	mov    rsi,r8
   22500:	mov    BYTE PTR [rax+rbx*1],dil
   22504:	mov    rax,QWORD PTR [rbp+0x10]
   22508:	movsxd rdi,DWORD PTR [rax+rcx*1]
   2250c:	mov    rax,QWORD PTR [r15+0x98]
   22513:	mov    rax,QWORD PTR [rax+rdi*8]
   22517:	comiss xmm0,DWORD PTR [rax+r8*4]
   2251c:	jbe    22559 <CreateFancyAli+0x4b9>
   2251e:	mov    QWORD PTR [rsp+0x28],r8
   22523:	mov    QWORD PTR [rsp+0x20],rcx
   22528:	mov    DWORD PTR [rsp+0x18],r8d
   2252d:	call   3810 <__ctype_tolower_loc@plt>
   22532:	mov    r8,QWORD PTR [rsp+0x28]
   22537:	mov    rcx,QWORD PTR [rsp+0x20]
   2253c:	mov    r10,rax
   2253f:	mov    rax,QWORD PTR [r12+0x10]
   22544:	mov    esi,DWORD PTR [rsp+0x18]
   22548:	mov    rdi,QWORD PTR [r10]
   2254b:	add    rax,rbx
   2254e:	movsx  r9,BYTE PTR [rax]
   22552:	mov    edi,DWORD PTR [rdi+r9*4]
   22556:	mov    BYTE PTR [rax],dil
   22559:	mov    rax,QWORD PTR [rbp+0x18]
   2255d:	mov    rdi,QWORD PTR [rsp+0x8]
   22562:	movsxd rax,DWORD PTR [rax+rcx*1]
   22566:	movsx  rax,BYTE PTR [rdi+rax*1]
   2256b:	cmp    esi,eax
   2256d:	je     225f8 <CreateFancyAli+0x558>
   22573:	mov    rsi,QWORD PTR [r15+0x140]
   2257a:	mov    r8,QWORD PTR [rbp+0x10]
   2257e:	mov    rsi,QWORD PTR [rsi+rax*8]
   22582:	movsxd r8,DWORD PTR [r8+rcx*1]
   22586:	mov    edx,DWORD PTR [rsi+r8*4]
   2258a:	test   edx,edx
   2258c:	jle    225a8 <CreateFancyAli+0x508>
   2258e:	mov    rax,QWORD PTR [r12+0x18]
   22593:	mov    BYTE PTR [rax+rbx*1],0x2b
   22597:	mov    rax,QWORD PTR [rbp+0x18]
   2259b:	mov    rdi,QWORD PTR [rsp+0x8]
   225a0:	movsxd rax,DWORD PTR [rax+rcx*1]
   225a4:	movsx  eax,BYTE PTR [rdi+rax*1]
   225a8:	cdqe   
   225aa:	movzx  ecx,BYTE PTR [r14+rax*1]
   225af:	mov    rax,QWORD PTR [r12+0x20]
   225b4:	mov    BYTE PTR [rax+rbx*1],cl
   225b7:	jmp    222a0 <CreateFancyAli+0x200>
   225bc:	nop    DWORD PTR [rax+0x0]
   225c0:	mov    rax,QWORD PTR [r12+0x10]
   225c5:	mov    BYTE PTR [rax+rbx*1],0x3c
   225c9:	jmp    222a0 <CreateFancyAli+0x200>
   225ce:	xchg   ax,ax
   225d0:	mov    rax,QWORD PTR [r12+0x10]
   225d5:	mov    BYTE PTR [rax+rbx*1],0x3e
   225d9:	jmp    222a0 <CreateFancyAli+0x200>
   225de:	lea    rdi,[rip+0x1dcd4]        # 402b9 <defmq.7318+0xf9>
   225e5:	xor    eax,eax
   225e7:	call   317f0 <Die>
   225ec:	jmp    222a0 <CreateFancyAli+0x200>
   225f1:	nop    DWORD PTR [rax+0x0]
   225f8:	cdqe   
   225fa:	movss  xmm4,DWORD PTR [rsp+0x14]
   22600:	movzx  esi,BYTE PTR [r14+rax*1]
   22605:	mov    rax,QWORD PTR [r12+0x18]
   2260a:	mov    BYTE PTR [rax+rbx*1],sil
   2260e:	mov    rax,QWORD PTR [rbp+0x10]
   22612:	movsxd rsi,DWORD PTR [rax+rcx*1]
   22616:	mov    rax,QWORD PTR [r15+0x98]
   2261d:	mov    rax,QWORD PTR [rax+rsi*8]
   22621:	comiss xmm4,DWORD PTR [rax+r8*4]
   22626:	jbe    22597 <CreateFancyAli+0x4f7>
   2262c:	mov    QWORD PTR [rsp+0x18],rcx
   22631:	call   3810 <__ctype_tolower_loc@plt>
   22636:	mov    rcx,QWORD PTR [rsp+0x18]
   2263b:	mov    r8,rax
   2263e:	mov    rax,QWORD PTR [r12+0x18]
   22643:	mov    rsi,QWORD PTR [r8]
   22646:	add    rax,rbx
   22649:	movsx  rdi,BYTE PTR [rax]
   2264d:	mov    esi,DWORD PTR [rsi+rdi*4]
   22650:	mov    rdi,QWORD PTR [rsp+0x8]
   22655:	mov    BYTE PTR [rax],sil
   22658:	mov    rax,QWORD PTR [rbp+0x18]
   2265c:	movsxd rax,DWORD PTR [rax+rcx*1]
   22660:	movsx  eax,BYTE PTR [rdi+rax*1]
   22664:	cdqe   
   22666:	movzx  ecx,BYTE PTR [r14+rax*1]
   2266b:	mov    rax,QWORD PTR [r12+0x20]
   22670:	mov    BYTE PTR [rax+rbx*1],cl
   22673:	jmp    222a0 <CreateFancyAli+0x200>
   22678:	nop    DWORD PTR [rax+rax*1+0x0]
   22680:	mov    eax,DWORD PTR [rbp+0x0]
   22683:	mov    esi,0x2b2
   22688:	lea    rdi,[rip+0x1dbe1]        # 40270 <defmq.7318+0xb0>
   2268f:	lea    edx,[rax+0x1]
   22692:	movsxd rdx,edx
   22695:	call   36810 <sre_malloc>
   2269a:	movsxd rdx,DWORD PTR [rbp+0x0]
   2269e:	mov    esi,0x20
   226a3:	mov    QWORD PTR [r12],rax
   226a7:	mov    rdi,rax
   226aa:	call   35d0 <memset@plt>
   226af:	mov    eax,DWORD PTR [r15+0x1c8]
   226b6:	test   al,0x8
   226b8:	je     22184 <CreateFancyAli+0xe4>
   226be:	mov    eax,DWORD PTR [rbp+0x0]
   226c1:	mov    esi,0x2b7
   226c6:	lea    rdi,[rip+0x1dba3]        # 40270 <defmq.7318+0xb0>
   226cd:	lea    edx,[rax+0x1]
   226d0:	movsxd rdx,edx
   226d3:	call   36810 <sre_malloc>
   226d8:	movsxd rdx,DWORD PTR [rbp+0x0]
   226dc:	mov    esi,0x20
   226e1:	mov    QWORD PTR [r12+0x8],rax
   226e6:	mov    rdi,rax
   226e9:	call   35d0 <memset@plt>
   226ee:	jmp    22184 <CreateFancyAli+0xe4>
   226f3:	test   eax,eax
   226f5:	jns    22709 <CreateFancyAli+0x669>
   226f7:	nop    WORD PTR [rax+rax*1+0x0]
   22700:	xor    edx,edx
   22702:	xor    eax,eax
   22704:	jmp    222af <CreateFancyAli+0x20f>
   22709:	mov    rsi,QWORD PTR [rbp+0x18]
   2270d:	jmp    22200 <CreateFancyAli+0x160>
   22712:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2271d:	nop    DWORD PTR [rax]

0000000000022720 <PrintFancyAli>:
   22720:	endbr64 
   22724:	push   r15
   22726:	push   r14
   22728:	mov    r14,rdi
   2272b:	push   r13
   2272d:	push   r12
   2272f:	push   rbp
   22730:	push   rbx
   22731:	sub    rsp,0x48
   22735:	mov    edi,DWORD PTR [rsi+0x28]
   22738:	mov    rax,QWORD PTR fs:0x28
   22741:	mov    QWORD PTR [rsp+0x38],rax
   22746:	xor    eax,eax
   22748:	mov    BYTE PTR [rsp+0x32],0x0
   2274d:	mov    eax,DWORD PTR [rsi+0x40]
   22750:	test   edi,edi
   22752:	jle    22964 <PrintFancyAli+0x244>
   22758:	mov    r15,rsi
   2275b:	xor    r12d,r12d
   2275e:	lea    r13d,[rax-0x1]
   22762:	mov    ebp,0x31
   22767:	mov    rdi,QWORD PTR [r15+0x20]
   2276b:	movzx  eax,BYTE PTR [rdi+r12*1]
   22770:	test   al,al
   22772:	je     22927 <PrintFancyAli+0x207>
   22778:	nop    DWORD PTR [rax+rax*1+0x0]
   22780:	mov    rsi,r12
   22783:	mov    ebx,r13d
   22786:	jmp    22798 <PrintFancyAli+0x78>
   22788:	nop    DWORD PTR [rax+rax*1+0x0]
   22790:	add    rsi,0x1
   22794:	cmp    ebp,esi
   22796:	jl     227cb <PrintFancyAli+0xab>
   22798:	lea    ecx,[rax-0x20]
   2279b:	mov    edx,0x1
   227a0:	cmp    cl,0x3f
   227a3:	ja     227b8 <PrintFancyAli+0x98>
   227a5:	movabs rdx,0x8000000000006001
   227af:	shr    rdx,cl
   227b2:	not    rdx
   227b5:	and    edx,0x1
   227b8:	cmp    al,0x7e
   227ba:	je     227c2 <PrintFancyAli+0xa2>
   227bc:	cmp    dl,0x1
   227bf:	sbb    ebx,0xffffffff
   227c2:	movzx  eax,BYTE PTR [rdi+rsi*1+0x1]
   227c7:	test   al,al
   227c9:	jne    22790 <PrintFancyAli+0x70>
   227cb:	mov    rsi,QWORD PTR [r15+0x8]
   227cf:	test   rsi,rsi
   227d2:	je     22807 <PrintFancyAli+0xe7>
   227d4:	mov    r8,rsp
   227d7:	add    rsi,r12
   227da:	mov    edx,0x32
   227df:	mov    rdi,r8
   227e2:	call   34b0 <strncpy@plt>
   227e7:	lea    rcx,[rip+0x1f0bb]        # 418a9 <CSWTCH.18+0x1e9>
   227ee:	mov    esi,0x1
   227f3:	mov    rdi,r14
   227f6:	mov    r8,rax
   227f9:	lea    rdx,[rip+0x1dac9]        # 402c9 <defmq.7318+0x109>
   22800:	xor    eax,eax
   22802:	call   37c0 <__fprintf_chk@plt>
   22807:	mov    rsi,QWORD PTR [r15]
   2280a:	test   rsi,rsi
   2280d:	je     22842 <PrintFancyAli+0x122>
   2280f:	mov    r8,rsp
   22812:	add    rsi,r12
   22815:	mov    edx,0x32
   2281a:	mov    rdi,r8
   2281d:	call   34b0 <strncpy@plt>
   22822:	lea    rcx,[rip+0x1f085]        # 418ae <CSWTCH.18+0x1ee>
   22829:	mov    esi,0x1
   2282e:	mov    rdi,r14
   22831:	mov    r8,rax
   22834:	lea    rdx,[rip+0x1da8e]        # 402c9 <defmq.7318+0x109>
   2283b:	xor    eax,eax
   2283d:	call   37c0 <__fprintf_chk@plt>
   22842:	mov    rsi,QWORD PTR [r15+0x10]
   22846:	test   rsi,rsi
   22849:	je     2287e <PrintFancyAli+0x15e>
   2284b:	mov    r8,rsp
   2284e:	add    rsi,r12
   22851:	mov    edx,0x32
   22856:	mov    rdi,r8
   22859:	call   34b0 <strncpy@plt>
   2285e:	lea    rcx,[rip+0x1f42d]        # 41c92 <CSWTCH.18+0x5d2>
   22865:	mov    esi,0x1
   2286a:	mov    rdi,r14
   2286d:	mov    r8,rax
   22870:	lea    rdx,[rip+0x1da52]        # 402c9 <defmq.7318+0x109>
   22877:	xor    eax,eax
   22879:	call   37c0 <__fprintf_chk@plt>
   2287e:	mov    rsi,QWORD PTR [r15+0x18]
   22882:	test   rsi,rsi
   22885:	je     228ba <PrintFancyAli+0x19a>
   22887:	mov    r8,rsp
   2288a:	add    rsi,r12
   2288d:	mov    edx,0x32
   22892:	mov    rdi,r8
   22895:	call   34b0 <strncpy@plt>
   2289a:	lea    rcx,[rip+0x1f3f1]        # 41c92 <CSWTCH.18+0x5d2>
   228a1:	mov    esi,0x1
   228a6:	mov    rdi,r14
   228a9:	mov    r8,rax
   228ac:	lea    rdx,[rip+0x1da16]        # 402c9 <defmq.7318+0x109>
   228b3:	xor    eax,eax
   228b5:	call   37c0 <__fprintf_chk@plt>
   228ba:	mov    rsi,QWORD PTR [r15+0x20]
   228be:	test   rsi,rsi
   228c1:	je     22906 <PrintFancyAli+0x1e6>
   228c3:	mov    r9,rsp
   228c6:	add    rsi,r12
   228c9:	mov    edx,0x32
   228ce:	add    r13d,0x1
   228d2:	mov    rdi,r9
   228d5:	call   34b0 <strncpy@plt>
   228da:	mov    rcx,QWORD PTR [r15+0x38]
   228de:	mov    r9,rax
   228e1:	cmp    r13d,ebx
   228e4:	jg     22930 <PrintFancyAli+0x210>
   228e6:	sub    rsp,0x8
   228ea:	mov    esi,0x1
   228ef:	mov    r8d,r13d
   228f2:	mov    rdi,r14
   228f5:	push   rbx
   228f6:	lea    rdx,[rip+0x1d9d7]        # 402d4 <defmq.7318+0x114>
   228fd:	xor    eax,eax
   228ff:	call   37c0 <__fprintf_chk@plt>
   22904:	pop    rcx
   22905:	pop    rsi
   22906:	add    r12,0x32
   2290a:	add    ebp,0x32
   2290d:	cmp    DWORD PTR [r15+0x28],r12d
   22911:	jle    22964 <PrintFancyAli+0x244>
   22913:	mov    rdi,QWORD PTR [r15+0x20]
   22917:	mov    r13d,ebx
   2291a:	movzx  eax,BYTE PTR [rdi+r12*1]
   2291f:	test   al,al
   22921:	jne    22780 <PrintFancyAli+0x60>
   22927:	mov    ebx,r13d
   2292a:	jmp    227cb <PrintFancyAli+0xab>
   2292f:	nop
   22930:	sub    rsp,0x8
   22934:	mov    esi,0x1
   22939:	mov    rdi,r14
   2293c:	add    r12,0x32
   22940:	lea    rax,[rip+0x1b253]        # 3db9a <_IO_stdin_used+0xb9a>
   22947:	lea    rdx,[rip+0x1d99e]        # 402ec <defmq.7318+0x12c>
   2294e:	add    ebp,0x32
   22951:	push   rax
   22952:	mov    r8,rax
   22955:	xor    eax,eax
   22957:	call   37c0 <__fprintf_chk@plt>
   2295c:	pop    rax
   2295d:	pop    rdx
   2295e:	cmp    DWORD PTR [r15+0x28],r12d
   22962:	jg     22913 <PrintFancyAli+0x1f3>
   22964:	mov    rdi,r14
   22967:	call   36c0 <fflush@plt>
   2296c:	mov    rax,QWORD PTR [rsp+0x38]
   22971:	xor    rax,QWORD PTR fs:0x28
   2297a:	jne    2298b <PrintFancyAli+0x26b>
   2297c:	add    rsp,0x48
   22980:	pop    rbx
   22981:	pop    rbp
   22982:	pop    r12
   22984:	pop    r13
   22986:	pop    r14
   22988:	pop    r15
   2298a:	ret    
   2298b:	call   3570 <__stack_chk_fail@plt>

0000000000022990 <TraceDecompose>:
   22990:	endbr64 
   22994:	push   r15
   22996:	push   r14
   22998:	push   r13
   2299a:	mov    r13,rdx
   2299d:	push   r12
   2299f:	mov    r12,rsi
   229a2:	push   rbp
   229a3:	push   rbx
   229a4:	sub    rsp,0x28
   229a8:	mov    ecx,DWORD PTR [rdi]
   229aa:	test   ecx,ecx
   229ac:	jle    22bd0 <TraceDecompose+0x240>
   229b2:	mov    rdx,QWORD PTR [rdi+0x8]
   229b6:	sub    ecx,0x1
   229b9:	mov    rbp,rdi
   229bc:	xor    r14d,r14d
   229bf:	lea    rax,[rdx+0x1]
   229c3:	add    rcx,rax
   229c6:	jmp    229d4 <TraceDecompose+0x44>
   229c8:	nop    DWORD PTR [rax+rax*1+0x0]
   229d0:	add    rax,0x1
   229d4:	cmp    BYTE PTR [rdx],0x6
   229d7:	sete   dl
   229da:	movzx  edx,dl
   229dd:	add    r14d,edx
   229e0:	mov    rdx,rax
   229e3:	cmp    rcx,rax
   229e6:	jne    229d0 <TraceDecompose+0x40>
   229e8:	test   r14d,r14d
   229eb:	je     22bd0 <TraceDecompose+0x240>
   229f1:	movsxd rdx,r14d
   229f4:	lea    rdi,[rip+0x1d875]        # 40270 <defmq.7318+0xb0>
   229fb:	mov    esi,0x37d
   22a00:	shl    rdx,0x3
   22a04:	call   36810 <sre_malloc>
   22a09:	mov    edi,DWORD PTR [rbp+0x0]
   22a0c:	xor    r9d,r9d
   22a0f:	xor    ecx,ecx
   22a11:	mov    QWORD PTR [rsp],rax
   22a15:	test   edi,edi
   22a17:	jle    22baf <TraceDecompose+0x21f>
   22a1d:	mov    QWORD PTR [rsp+0x10],r12
   22a22:	mov    r15d,ecx
   22a25:	mov    r12d,r9d
   22a28:	mov    DWORD PTR [rsp+0xc],r14d
   22a2d:	mov    QWORD PTR [rsp+0x18],r13
   22a32:	jmp    22a44 <TraceDecompose+0xb4>
   22a34:	nop    DWORD PTR [rax+0x0]
   22a38:	mov    r15d,eax
   22a3b:	cmp    edi,r15d
   22a3e:	jle    22ba0 <TraceDecompose+0x210>
   22a44:	mov    rcx,QWORD PTR [rbp+0x8]
   22a48:	movsxd rbx,r15d
   22a4b:	lea    eax,[r15+0x1]
   22a4f:	cmp    BYTE PTR [rcx+rbx*1],0x6
   22a53:	jne    22a38 <TraceDecompose+0xa8>
   22a55:	cmp    edi,eax
   22a57:	jle    22bef <TraceDecompose+0x25f>
   22a5d:	cdqe   
   22a5f:	jmp    22a73 <TraceDecompose+0xe3>
   22a61:	nop    DWORD PTR [rax+0x0]
   22a68:	lea    edx,[rax+0x1]
   22a6b:	add    rax,0x1
   22a6f:	cmp    edi,eax
   22a71:	jle    22a7b <TraceDecompose+0xeb>
   22a73:	cmp    BYTE PTR [rcx+rax*1],0x7
   22a77:	mov    edx,eax
   22a79:	jne    22a68 <TraceDecompose+0xd8>
   22a7b:	sub    edx,r15d
   22a7e:	lea    r14d,[rdx+0x5]
   22a82:	mov    rdi,QWORD PTR [rsp]
   22a86:	movsxd rax,r12d
   22a89:	lea    r13,[rdi+rax*8]
   22a8d:	mov    edi,r14d
   22a90:	mov    rsi,r13
   22a93:	call   209f0 <P7AllocTrace>
   22a98:	mov    rax,QWORD PTR [r13+0x0]
   22a9c:	lea    r10d,[r15-0x1]
   22aa0:	mov    DWORD PTR [rax],r14d
   22aa3:	mov    rax,QWORD PTR [rax+0x8]
   22aa7:	mov    BYTE PTR [rax],0x4
   22aaa:	mov    rax,QWORD PTR [r13+0x0]
   22aae:	mov    rdx,QWORD PTR [rax+0x10]
   22ab2:	mov    DWORD PTR [rdx],0x0
   22ab8:	mov    rdx,QWORD PTR [rax+0x18]
   22abc:	mov    rax,QWORD PTR [rax+0x8]
   22ac0:	mov    DWORD PTR [rdx],0x0
   22ac6:	mov    BYTE PTR [rax+0x1],0x5
   22aca:	mov    rdx,QWORD PTR [r13+0x0]
   22ace:	mov    rcx,QWORD PTR [rbp+0x8]
   22ad2:	mov    rax,QWORD PTR [rdx+0x10]
   22ad6:	mov    DWORD PTR [rax+0x4],0x0
   22add:	mov    rax,QWORD PTR [rdx+0x18]
   22ae1:	mov    DWORD PTR [rax+0x4],0x0
   22ae8:	mov    eax,0x2
   22aed:	nop    DWORD PTR [rax]
   22af0:	movzx  ecx,BYTE PTR [rcx+rbx*1]
   22af4:	mov    rdx,QWORD PTR [rdx+0x8]
   22af8:	mov    edi,eax
   22afa:	lea    r11d,[rax+0x1]
   22afe:	lea    r15d,[r10+rax*1]
   22b02:	mov    BYTE PTR [rdx+rax*1],cl
   22b05:	mov    rdx,QWORD PTR [r13+0x0]
   22b09:	mov    rcx,QWORD PTR [rbp+0x10]
   22b0d:	mov    esi,DWORD PTR [rcx+rbx*4]
   22b10:	mov    rcx,QWORD PTR [rdx+0x10]
   22b14:	mov    DWORD PTR [rcx+rax*4],esi
   22b17:	mov    rcx,QWORD PTR [rbp+0x18]
   22b1b:	mov    esi,DWORD PTR [rcx+rbx*4]
   22b1e:	mov    rcx,QWORD PTR [rdx+0x18]
   22b22:	mov    DWORD PTR [rcx+rax*4],esi
   22b25:	mov    rcx,QWORD PTR [rbp+0x8]
   22b29:	add    rax,0x1
   22b2d:	movzx  esi,BYTE PTR [rcx+rbx*1]
   22b31:	add    rbx,0x1
   22b35:	cmp    sil,0x7
   22b39:	jne    22af0 <TraceDecompose+0x160>
   22b3b:	mov    rax,QWORD PTR [rdx+0x8]
   22b3f:	movsxd r11,r11d
   22b42:	add    edi,0x2
   22b45:	add    r12d,0x1
   22b49:	movsxd rdi,edi
   22b4c:	mov    BYTE PTR [rax+r11*1],0x8
   22b51:	mov    rax,QWORD PTR [r13+0x0]
   22b55:	mov    rdx,QWORD PTR [rax+0x10]
   22b59:	mov    DWORD PTR [rdx+r11*4],0x0
   22b61:	mov    rdx,QWORD PTR [rax+0x18]
   22b65:	mov    rax,QWORD PTR [rax+0x8]
   22b69:	mov    DWORD PTR [rdx+r11*4],0x0
   22b71:	mov    BYTE PTR [rax+rdi*1],0x9
   22b75:	mov    rax,QWORD PTR [r13+0x0]
   22b79:	mov    rdx,QWORD PTR [rax+0x10]
   22b7d:	mov    rax,QWORD PTR [rax+0x18]
   22b81:	mov    DWORD PTR [rdx+rdi*4],0x0
   22b88:	mov    DWORD PTR [rax+rdi*4],0x0
   22b8f:	mov    edi,DWORD PTR [rbp+0x0]
   22b92:	cmp    edi,r15d
   22b95:	jg     22a44 <TraceDecompose+0xb4>
   22b9b:	nop    DWORD PTR [rax+rax*1+0x0]
   22ba0:	mov    r14d,DWORD PTR [rsp+0xc]
   22ba5:	mov    r12,QWORD PTR [rsp+0x10]
   22baa:	mov    r13,QWORD PTR [rsp+0x18]
   22baf:	mov    rax,QWORD PTR [rsp]
   22bb3:	mov    QWORD PTR [r12],rax
   22bb7:	mov    DWORD PTR [r13+0x0],r14d
   22bbb:	add    rsp,0x28
   22bbf:	pop    rbx
   22bc0:	pop    rbp
   22bc1:	pop    r12
   22bc3:	pop    r13
   22bc5:	pop    r14
   22bc7:	pop    r15
   22bc9:	ret    
   22bca:	nop    WORD PTR [rax+rax*1+0x0]
   22bd0:	mov    DWORD PTR [r13+0x0],0x0
   22bd8:	mov    QWORD PTR [r12],0x0
   22be0:	add    rsp,0x28
   22be4:	pop    rbx
   22be5:	pop    rbp
   22be6:	pop    r12
   22be8:	pop    r13
   22bea:	pop    r14
   22bec:	pop    r15
   22bee:	ret    
   22bef:	mov    r14d,0x6
   22bf5:	jmp    22a82 <TraceDecompose+0xf2>
   22bfa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000022c00 <TraceDomainNumber>:
   22c00:	endbr64 
   22c04:	mov    ecx,DWORD PTR [rdi]
   22c06:	test   ecx,ecx
   22c08:	jle    22c40 <TraceDomainNumber+0x40>
   22c0a:	mov    rdx,QWORD PTR [rdi+0x8]
   22c0e:	sub    ecx,0x1
   22c11:	xor    r8d,r8d
   22c14:	lea    rax,[rdx+0x1]
   22c18:	add    rcx,rax
   22c1b:	jmp    22c24 <TraceDomainNumber+0x24>
   22c1d:	nop    DWORD PTR [rax]
   22c20:	add    rax,0x1
   22c24:	cmp    BYTE PTR [rdx],0x6
   22c27:	sete   dl
   22c2a:	movzx  edx,dl
   22c2d:	add    r8d,edx
   22c30:	mov    rdx,rax
   22c33:	cmp    rax,rcx
   22c36:	jne    22c20 <TraceDomainNumber+0x20>
   22c38:	mov    eax,r8d
   22c3b:	ret    
   22c3c:	nop    DWORD PTR [rax+0x0]
   22c40:	xor    r8d,r8d
   22c43:	mov    eax,r8d
   22c46:	ret    
   22c47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000022c50 <TraceSimpleBounds>:
   22c50:	endbr64 
   22c54:	push   r15
   22c56:	mov    r15,rdi
   22c59:	push   r14
   22c5b:	push   r13
   22c5d:	mov    r13,r8
   22c60:	push   r12
   22c62:	mov    r12,rcx
   22c65:	push   rbp
   22c66:	mov    rbp,rdx
   22c69:	push   rbx
   22c6a:	sub    rsp,0x18
   22c6e:	mov    r8d,DWORD PTR [rdi]
   22c71:	mov    QWORD PTR [rsp],rsi
   22c75:	test   r8d,r8d
   22c78:	jle    22d10 <TraceSimpleBounds+0xc0>
   22c7e:	lea    r10d,[r8-0x1]
   22c82:	mov    rcx,QWORD PTR [rdi+0x8]
   22c86:	xor    edx,edx
   22c88:	mov    ebx,0xffffffff
   22c8d:	mov    rax,r10
   22c90:	jmp    22ca7 <TraceSimpleBounds+0x57>
   22c92:	nop    WORD PTR [rax+rax*1+0x0]
   22c98:	cmp    dil,0x1
   22c9c:	je     22cf0 <TraceSimpleBounds+0xa0>
   22c9e:	add    rdx,0x1
   22ca2:	cmp    r10,r9
   22ca5:	je     22d18 <TraceSimpleBounds+0xc8>
   22ca7:	movzx  edi,BYTE PTR [rcx+rdx*1]
   22cab:	mov    r11d,edx
   22cae:	mov    r9,rdx
   22cb1:	cmp    ebx,0xffffffff
   22cb4:	jne    22c98 <TraceSimpleBounds+0x48>
   22cb6:	lea    r14d,[rdi-0x1]
   22cba:	cmp    r14b,0x1
   22cbe:	jbe    22cdd <TraceSimpleBounds+0x8d>
   22cc0:	add    rdx,0x1
   22cc4:	cmp    r10,r9
   22cc7:	je     22d18 <TraceSimpleBounds+0xc8>
   22cc9:	movzx  edi,BYTE PTR [rcx+rdx*1]
   22ccd:	mov    r11d,edx
   22cd0:	mov    r9,rdx
   22cd3:	lea    r14d,[rdi-0x1]
   22cd7:	cmp    r14b,0x1
   22cdb:	ja     22cc0 <TraceSimpleBounds+0x70>
   22cdd:	mov    rsi,QWORD PTR [r15+0x10]
   22ce1:	mov    ebx,DWORD PTR [rsi+rdx*4]
   22ce4:	cmp    dil,0x1
   22ce8:	jne    22c9e <TraceSimpleBounds+0x4e>
   22cea:	nop    WORD PTR [rax+rax*1+0x0]
   22cf0:	mov    rdi,QWORD PTR [r15+0x18]
   22cf4:	mov    r14d,DWORD PTR [rdi+rdx*4]
   22cf8:	cmp    r8d,r11d
   22cfb:	je     22d1e <TraceSimpleBounds+0xce>
   22cfd:	cmp    r14d,0xffffffff
   22d01:	je     22d1e <TraceSimpleBounds+0xce>
   22d03:	cmp    ebx,0xffffffff
   22d06:	jne    22d3b <TraceSimpleBounds+0xeb>
   22d08:	jmp    22d1e <TraceSimpleBounds+0xce>
   22d0a:	nop    WORD PTR [rax+rax*1+0x0]
   22d10:	mov    ebx,0xffffffff
   22d15:	nop    DWORD PTR [rax]
   22d18:	mov    r14d,0xffffffff
   22d1e:	xor    eax,eax
   22d20:	lea    rdi,[rip+0x1d6a1]        # 403c8 <defmq.7318+0x208>
   22d27:	call   317f0 <Die>
   22d2c:	mov    r8d,DWORD PTR [r15]
   22d2f:	mov    eax,r8d
   22d32:	sub    eax,0x1
   22d35:	js     22db0 <TraceSimpleBounds+0x160>
   22d37:	mov    rcx,QWORD PTR [r15+0x8]
   22d3b:	cdqe   
   22d3d:	mov    r9d,0xffffffff
   22d43:	jmp    22d55 <TraceSimpleBounds+0x105>
   22d45:	nop    DWORD PTR [rax]
   22d48:	cmp    dl,0x1
   22d4b:	je     22d90 <TraceSimpleBounds+0x140>
   22d4d:	sub    rax,0x1
   22d51:	test   eax,eax
   22d53:	js     22dc0 <TraceSimpleBounds+0x170>
   22d55:	movzx  edx,BYTE PTR [rcx+rax*1]
   22d59:	mov    edi,eax
   22d5b:	cmp    r9d,0xffffffff
   22d5f:	jne    22d48 <TraceSimpleBounds+0xf8>
   22d61:	lea    r10d,[rdx-0x1]
   22d65:	cmp    r10b,0x1
   22d69:	jbe    22d83 <TraceSimpleBounds+0x133>
   22d6b:	sub    rax,0x1
   22d6f:	test   eax,eax
   22d71:	js     22dc0 <TraceSimpleBounds+0x170>
   22d73:	movzx  edx,BYTE PTR [rcx+rax*1]
   22d77:	mov    edi,eax
   22d79:	lea    r10d,[rdx-0x1]
   22d7d:	cmp    r10b,0x1
   22d81:	ja     22d6b <TraceSimpleBounds+0x11b>
   22d83:	mov    r9,QWORD PTR [r15+0x10]
   22d87:	mov    r9d,DWORD PTR [r9+rax*4]
   22d8b:	cmp    dl,0x1
   22d8e:	jne    22d4d <TraceSimpleBounds+0xfd>
   22d90:	mov    rdx,QWORD PTR [r15+0x18]
   22d94:	mov    r15d,DWORD PTR [rdx+rax*4]
   22d98:	cmp    edi,r8d
   22d9b:	je     22dc6 <TraceSimpleBounds+0x176>
   22d9d:	cmp    r15d,0xffffffff
   22da1:	je     22dc6 <TraceSimpleBounds+0x176>
   22da3:	cmp    r9d,0xffffffff
   22da7:	jne    22dde <TraceSimpleBounds+0x18e>
   22da9:	jmp    22dc6 <TraceSimpleBounds+0x176>
   22dab:	nop    DWORD PTR [rax+rax*1+0x0]
   22db0:	mov    r9d,0xffffffff
   22db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22dc0:	mov    r15d,0xffffffff
   22dc6:	lea    rdi,[rip+0x1d5fb]        # 403c8 <defmq.7318+0x208>
   22dcd:	xor    eax,eax
   22dcf:	mov    DWORD PTR [rsp+0xc],r9d
   22dd4:	call   317f0 <Die>
   22dd9:	mov    r9d,DWORD PTR [rsp+0xc]
   22dde:	mov    rax,QWORD PTR [rsp]
   22de2:	mov    DWORD PTR [r12],ebx
   22de6:	mov    DWORD PTR [rax],r14d
   22de9:	mov    DWORD PTR [r13+0x0],r9d
   22ded:	mov    DWORD PTR [rbp+0x0],r15d
   22df1:	add    rsp,0x18
   22df5:	pop    rbx
   22df6:	pop    rbp
   22df7:	pop    r12
   22df9:	pop    r13
   22dfb:	pop    r14
   22dfd:	pop    r15
   22dff:	ret    

0000000000022e00 <MasterTraceFromMap>:
   22e00:	endbr64 
   22e04:	push   r14
   22e06:	push   r13
   22e08:	push   r12
   22e0a:	mov    r12,rdi
   22e0d:	lea    edi,[rdx+0x6]
   22e10:	push   rbp
   22e11:	mov    ebp,edx
   22e13:	push   rbx
   22e14:	mov    ebx,esi
   22e16:	sub    rsp,0x10
   22e1a:	mov    rax,QWORD PTR fs:0x28
   22e23:	mov    QWORD PTR [rsp+0x8],rax
   22e28:	xor    eax,eax
   22e2a:	mov    rsi,rsp
   22e2d:	call   209f0 <P7AllocTrace>
   22e32:	mov    rax,QWORD PTR [rsp]
   22e36:	mov    rdx,QWORD PTR [rax+0x8]
   22e3a:	mov    BYTE PTR [rdx],0x4
   22e3d:	mov    rdx,QWORD PTR [rax+0x10]
   22e41:	mov    rax,QWORD PTR [rax+0x18]
   22e45:	mov    DWORD PTR [rdx],0x0
   22e4b:	mov    DWORD PTR [rax],0x0
   22e51:	mov    rax,QWORD PTR [rsp]
   22e55:	mov    rdx,QWORD PTR [rax+0x8]
   22e59:	mov    BYTE PTR [rdx+0x1],0x5
   22e5d:	mov    rdx,QWORD PTR [rax+0x10]
   22e61:	mov    rax,QWORD PTR [rax+0x18]
   22e65:	mov    DWORD PTR [rdx+0x4],0x0
   22e6c:	mov    DWORD PTR [rax+0x4],0x0
   22e73:	cmp    DWORD PTR [r12+0x4],0x1
   22e79:	jle    230bf <MasterTraceFromMap+0x2bf>
   22e7f:	mov    eax,0x2
   22e84:	mov    edi,0x1
   22e89:	nop    DWORD PTR [rax+0x0]
   22e90:	mov    rdx,QWORD PTR [rsp]
   22e94:	mov    rcx,QWORD PTR [rdx+0x8]
   22e98:	mov    BYTE PTR [rcx+rax*1],0x5
   22e9c:	mov    rcx,QWORD PTR [rdx+0x10]
   22ea0:	mov    rdx,QWORD PTR [rdx+0x18]
   22ea4:	mov    DWORD PTR [rcx+rax*4],0x0
   22eab:	lea    ecx,[rdi+0x2]
   22eae:	mov    DWORD PTR [rdx+rax*4],edi
   22eb1:	mov    edx,edi
   22eb3:	add    rax,0x1
   22eb7:	add    edi,0x1
   22eba:	cmp    DWORD PTR [r12+0x4],edi
   22ebf:	jg     22e90 <MasterTraceFromMap+0x90>
   22ec1:	movsxd rcx,ecx
   22ec4:	lea    esi,[rdx+0x3]
   22ec7:	lea    r8d,[rdx+0x2]
   22ecb:	add    edx,0x4
   22ece:	lea    rax,[rcx*4+0x0]
   22ed6:	movsxd r11,esi
   22ed9:	movsxd rdx,edx
   22edc:	lea    r10,[rax+0x4]
   22ee0:	lea    r9,[rax+0x8]
   22ee4:	mov    r13,QWORD PTR [rsp]
   22ee8:	mov    r14,QWORD PTR [r13+0x8]
   22eec:	mov    BYTE PTR [r14+rcx*1],0x6
   22ef1:	mov    rcx,QWORD PTR [r13+0x10]
   22ef5:	mov    DWORD PTR [rcx+rax*1],0x0
   22efc:	mov    rcx,QWORD PTR [r13+0x18]
   22f00:	mov    DWORD PTR [rcx+rax*1],0x0
   22f07:	cmp    ebx,0x1
   22f0a:	jle    230f5 <MasterTraceFromMap+0x2f5>
   22f10:	lea    rdx,[r12+0x8]
   22f15:	mov    r9d,0x1
   22f1b:	nop    DWORD PTR [rax+rax*1+0x0]
   22f20:	mov    rcx,QWORD PTR [rsp]
   22f24:	movsxd rax,esi
   22f27:	mov    r8,QWORD PTR [rcx+0x8]
   22f2b:	mov    BYTE PTR [r8+rax*1],0x1
   22f30:	mov    r8,QWORD PTR [rcx+0x10]
   22f34:	mov    rcx,QWORD PTR [rcx+0x18]
   22f38:	mov    DWORD PTR [r8+rax*4],r9d
   22f3c:	lea    r8d,[rsi+0x1]
   22f40:	mov    DWORD PTR [rcx+rax*4],edi
   22f43:	mov    esi,r8d
   22f46:	lea    eax,[rdi+0x1]
   22f49:	cmp    eax,DWORD PTR [rdx]
   22f4b:	jge    22f82 <MasterTraceFromMap+0x182>
   22f4d:	movsxd rcx,r8d
   22f50:	sub    r8d,edi
   22f53:	nop    DWORD PTR [rax+rax*1+0x0]
   22f58:	mov    rsi,QWORD PTR [rsp]
   22f5c:	mov    rdi,QWORD PTR [rsi+0x8]
   22f60:	mov    BYTE PTR [rdi+rcx*1],0x3
   22f64:	mov    rdi,QWORD PTR [rsi+0x10]
   22f68:	mov    rsi,QWORD PTR [rsi+0x18]
   22f6c:	mov    DWORD PTR [rdi+rcx*4],r9d
   22f70:	mov    DWORD PTR [rsi+rcx*4],eax
   22f73:	lea    esi,[r8+rax*1]
   22f77:	add    rcx,0x1
   22f7b:	add    eax,0x1
   22f7e:	cmp    DWORD PTR [rdx],eax
   22f80:	jg     22f58 <MasterTraceFromMap+0x158>
   22f82:	add    r9d,0x1
   22f86:	add    rdx,0x4
   22f8a:	cmp    ebx,r9d
   22f8d:	je     22f98 <MasterTraceFromMap+0x198>
   22f8f:	mov    edi,eax
   22f91:	jmp    22f20 <MasterTraceFromMap+0x120>
   22f93:	nop    DWORD PTR [rax+rax*1+0x0]
   22f98:	lea    edx,[rsi+0x1]
   22f9b:	lea    r8d,[rax+0x1]
   22f9f:	movsxd r11,esi
   22fa2:	movsxd rdx,edx
   22fa5:	lea    r9,[rdx*4+0x0]
   22fad:	lea    r10,[r9-0x4]
   22fb1:	mov    rcx,QWORD PTR [rsp]
   22fb5:	mov    rdi,QWORD PTR [rcx+0x8]
   22fb9:	mov    BYTE PTR [rdi+r11*1],0x1
   22fbe:	mov    rdi,QWORD PTR [rcx+0x10]
   22fc2:	mov    rcx,QWORD PTR [rcx+0x18]
   22fc6:	mov    DWORD PTR [rdi+r10*1],ebx
   22fca:	mov    DWORD PTR [rcx+r10*1],eax
   22fce:	mov    rax,QWORD PTR [rsp]
   22fd2:	mov    rcx,QWORD PTR [rax+0x8]
   22fd6:	mov    BYTE PTR [rcx+rdx*1],0x7
   22fda:	mov    rdx,QWORD PTR [rax+0x10]
   22fde:	mov    rax,QWORD PTR [rax+0x18]
   22fe2:	mov    DWORD PTR [rdx+r9*1],0x0
   22fea:	mov    rdx,QWORD PTR [rsp]
   22fee:	mov    DWORD PTR [rax+r9*1],0x0
   22ff6:	lea    eax,[rsi+0x2]
   22ff9:	lea    r9d,[rsi+0x3]
   22ffd:	mov    rcx,QWORD PTR [rdx+0x8]
   23001:	cdqe   
   23003:	mov    BYTE PTR [rcx+rax*1],0x8
   23007:	mov    rcx,QWORD PTR [rdx+0x10]
   2300b:	mov    rdx,QWORD PTR [rdx+0x18]
   2300f:	mov    DWORD PTR [rcx+rax*4],0x0
   23016:	mov    DWORD PTR [rdx+rax*4],0x0
   2301d:	cmp    ebp,r8d
   23020:	jl     23072 <MasterTraceFromMap+0x272>
   23022:	mov    edx,ebp
   23024:	movsxd rsi,esi
   23027:	movsxd rax,r9d
   2302a:	sub    edx,r8d
   2302d:	lea    rdi,[rsi+rdx*1+0x4]
   23032:	mov    esi,r8d
   23035:	sub    esi,r9d
   23038:	nop    DWORD PTR [rax+rax*1+0x0]
   23040:	mov    rdx,QWORD PTR [rsp]
   23044:	mov    rcx,QWORD PTR [rdx+0x8]
   23048:	mov    BYTE PTR [rcx+rax*1],0x8
   2304c:	mov    rcx,QWORD PTR [rdx+0x10]
   23050:	mov    rdx,QWORD PTR [rdx+0x18]
   23054:	mov    DWORD PTR [rcx+rax*4],0x0
   2305b:	lea    ecx,[rsi+rax*1]
   2305e:	mov    DWORD PTR [rdx+rax*4],ecx
   23061:	add    rax,0x1
   23065:	cmp    rdi,rax
   23068:	jne    23040 <MasterTraceFromMap+0x240>
   2306a:	lea    r9d,[r9+rbp*1+0x1]
   2306f:	sub    r9d,r8d
   23072:	mov    rdx,QWORD PTR [rsp]
   23076:	movsxd rax,r9d
   23079:	add    r9d,0x1
   2307d:	mov    rcx,QWORD PTR [rdx+0x8]
   23081:	mov    BYTE PTR [rcx+rax*1],0x9
   23085:	mov    rcx,QWORD PTR [rdx+0x10]
   23089:	mov    rdx,QWORD PTR [rdx+0x18]
   2308d:	mov    DWORD PTR [rcx+rax*4],0x0
   23094:	mov    DWORD PTR [rdx+rax*4],0x0
   2309b:	mov    rax,QWORD PTR [rsp]
   2309f:	mov    DWORD PTR [rax],r9d
   230a2:	mov    rbx,QWORD PTR [rsp+0x8]
   230a7:	xor    rbx,QWORD PTR fs:0x28
   230b0:	jne    230fc <MasterTraceFromMap+0x2fc>
   230b2:	add    rsp,0x10
   230b6:	pop    rbx
   230b7:	pop    rbp
   230b8:	pop    r12
   230ba:	pop    r13
   230bc:	pop    r14
   230be:	ret    
   230bf:	mov    r9d,0x10
   230c5:	mov    edx,0x4
   230ca:	mov    r10d,0xc
   230d0:	mov    r11d,0x3
   230d6:	mov    r8d,0x2
   230dc:	mov    eax,0x8
   230e1:	mov    ecx,0x2
   230e6:	mov    esi,0x3
   230eb:	mov    edi,0x1
   230f0:	jmp    22ee4 <MasterTraceFromMap+0xe4>
   230f5:	mov    eax,edi
   230f7:	jmp    22fb1 <MasterTraceFromMap+0x1b1>
   230fc:	call   3570 <__stack_chk_fail@plt>
   23101:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2310c:	nop    DWORD PTR [rax+0x0]

0000000000023110 <ImposeMasterTrace>:
   23110:	endbr64 
   23114:	push   r15
   23116:	mov    r15,rdi
   23119:	lea    rdi,[rip+0x1d150]        # 40270 <defmq.7318+0xb0>
   23120:	push   r14
   23122:	push   r13
   23124:	push   r12
   23126:	push   rbp
   23127:	mov    rbp,rdx
   2312a:	movsxd rdx,esi
   2312d:	push   rbx
   2312e:	shl    rdx,0x3
   23132:	mov    ebx,esi
   23134:	mov    esi,0x466
   23139:	sub    rsp,0x28
   2313d:	mov    QWORD PTR [rsp+0x18],rcx
   23142:	call   36810 <sre_malloc>
   23147:	mov    QWORD PTR [rsp+0x10],rax
   2314c:	test   ebx,ebx
   2314e:	jle    23217 <ImposeMasterTrace+0x107>
   23154:	mov    rdi,QWORD PTR [rsp+0x10]
   23159:	lea    eax,[rbx-0x1]
   2315c:	lea    r12,[rip+0x1d34d]        # 404b0 <defmq.7318+0x2f0>
   23163:	mov    r14,r15
   23166:	lea    rax,[rdi+rax*8+0x8]
   2316b:	mov    QWORD PTR [rsp+0x8],rax
   23170:	mov    rax,rbp
   23173:	mov    rbp,rdi
   23176:	mov    r13,rax
   23179:	nop    DWORD PTR [rax+0x0]
   23180:	mov    edi,DWORD PTR [r13+0x0]
   23184:	mov    rsi,rbp
   23187:	call   209f0 <P7AllocTrace>
   2318c:	mov    eax,DWORD PTR [r13+0x0]
   23190:	test   eax,eax
   23192:	jle    23418 <ImposeMasterTrace+0x308>
   23198:	mov    DWORD PTR [rsp+0x4],0x1
   231a0:	xor    ebx,ebx
   231a2:	xor    r15d,r15d
   231a5:	nop    DWORD PTR [rax]
   231a8:	mov    rax,QWORD PTR [r13+0x8]
   231ac:	movzx  edx,BYTE PTR [rax+rbx*1]
   231b0:	cmp    dl,0xa
   231b3:	ja     231f3 <ImposeMasterTrace+0xe3>
   231b5:	movzx  eax,dl
   231b8:	movsxd rax,DWORD PTR [r12+rax*4]
   231bc:	add    rax,r12
   231bf:	notrack jmp rax
   231c2:	nop    WORD PTR [rax+rax*1+0x0]
   231c8:	mov    rcx,QWORD PTR [rbp+0x0]
   231cc:	mov    rax,QWORD PTR [r13+0x10]
   231d0:	mov    rdi,QWORD PTR [rcx+0x8]
   231d4:	mov    esi,DWORD PTR [rax+rbx*4]
   231d7:	movsxd rax,r15d
   231da:	add    r15d,0x1
   231de:	mov    BYTE PTR [rdi+rax*1],dl
   231e1:	mov    rdx,QWORD PTR [rcx+0x10]
   231e5:	mov    DWORD PTR [rdx+rax*4],esi
   231e8:	mov    rdx,QWORD PTR [rcx+0x18]
   231ec:	mov    DWORD PTR [rdx+rax*4],0x0
   231f3:	add    rbx,0x1
   231f7:	cmp    DWORD PTR [r13+0x0],ebx
   231fb:	jg     231a8 <ImposeMasterTrace+0x98>
   231fd:	mov    rax,QWORD PTR [rbp+0x0]
   23201:	add    r14,0x8
   23205:	add    rbp,0x8
   23209:	mov    DWORD PTR [rax],r15d
   2320c:	cmp    QWORD PTR [rsp+0x8],rbp
   23211:	jne    23180 <ImposeMasterTrace+0x70>
   23217:	mov    rax,QWORD PTR [rsp+0x18]
   2321c:	mov    rdi,QWORD PTR [rsp+0x10]
   23221:	mov    QWORD PTR [rax],rdi
   23224:	add    rsp,0x28
   23228:	pop    rbx
   23229:	pop    rbp
   2322a:	pop    r12
   2322c:	pop    r13
   2322e:	pop    r14
   23230:	pop    r15
   23232:	ret    
   23233:	nop    DWORD PTR [rax+rax*1+0x0]
   23238:	mov    rax,QWORD PTR [r13+0x18]
   2323c:	movsxd rax,DWORD PTR [rax+rbx*4]
   23240:	test   eax,eax
   23242:	jne    23390 <ImposeMasterTrace+0x280>
   23248:	mov    rcx,QWORD PTR [rbp+0x0]
   2324c:	movsxd rax,r15d
   2324f:	mov    rsi,QWORD PTR [rcx+0x8]
   23253:	mov    BYTE PTR [rsi+rax*1],dl
   23256:	mov    rdx,QWORD PTR [rcx+0x10]
   2325a:	mov    DWORD PTR [rdx+rax*4],0x0
   23261:	mov    rdx,QWORD PTR [rcx+0x18]
   23265:	mov    DWORD PTR [rdx+rax*4],0x0
   2326c:	add    r15d,0x1
   23270:	jmp    231f3 <ImposeMasterTrace+0xe3>
   23272:	nop    WORD PTR [rax+rax*1+0x0]
   23278:	mov    rax,QWORD PTR [r13+0x18]
   2327c:	mov    rdx,QWORD PTR [r14]
   2327f:	lea    rsi,[rbx*4+0x0]
   23287:	movsxd rax,DWORD PTR [rax+rbx*4]
   2328b:	movzx  edx,BYTE PTR [rdx+rax*1-0x1]
   23290:	mov    eax,0x1
   23295:	lea    ecx,[rdx-0x20]
   23298:	cmp    cl,0x3f
   2329b:	ja     232b0 <ImposeMasterTrace+0x1a0>
   2329d:	movabs rax,0x8000000000006001
   232a7:	shr    rax,cl
   232aa:	not    rax
   232ad:	and    eax,0x1
   232b0:	cmp    dl,0x7e
   232b3:	je     231f3 <ImposeMasterTrace+0xe3>
   232b9:	test   al,al
   232bb:	je     231f3 <ImposeMasterTrace+0xe3>
   232c1:	mov    rdx,QWORD PTR [rbp+0x0]
   232c5:	mov    rax,QWORD PTR [r13+0x10]
   232c9:	mov    rcx,QWORD PTR [rdx+0x8]
   232cd:	mov    esi,DWORD PTR [rax+rsi*1]
   232d0:	movsxd rax,r15d
   232d3:	mov    BYTE PTR [rcx+rax*1],0x3
   232d7:	mov    rcx,QWORD PTR [rdx+0x10]
   232db:	mov    rdx,QWORD PTR [rdx+0x18]
   232df:	mov    DWORD PTR [rcx+rax*4],esi
   232e2:	mov    edi,DWORD PTR [rsp+0x4]
   232e6:	add    r15d,0x1
   232ea:	mov    DWORD PTR [rdx+rax*4],edi
   232ed:	add    edi,0x1
   232f0:	mov    DWORD PTR [rsp+0x4],edi
   232f4:	jmp    231f3 <ImposeMasterTrace+0xe3>
   232f9:	nop    DWORD PTR [rax+0x0]
   23300:	mov    rax,QWORD PTR [r13+0x18]
   23304:	mov    rcx,QWORD PTR [r14]
   23307:	lea    rdx,[rbx*4+0x0]
   2330f:	movsxd rax,DWORD PTR [rax+rbx*4]
   23313:	movzx  esi,BYTE PTR [rcx+rax*1-0x1]
   23318:	movabs rax,0x8000000000006001
   23322:	lea    ecx,[rsi-0x20]
   23325:	shr    rax,cl
   23328:	and    eax,0x1
   2332b:	cmp    cl,0x40
   2332e:	mov    ecx,0x0
   23333:	cmovae eax,ecx
   23336:	mov    rcx,QWORD PTR [r13+0x10]
   2333a:	mov    edi,DWORD PTR [rcx+rdx*1]
   2333d:	mov    rcx,QWORD PTR [rbp+0x0]
   23341:	movsxd rdx,r15d
   23344:	mov    r8,QWORD PTR [rcx+0x8]
   23348:	add    r8,rdx
   2334b:	cmp    sil,0x7e
   2334f:	je     23359 <ImposeMasterTrace+0x249>
   23351:	test   al,al
   23353:	je     233f0 <ImposeMasterTrace+0x2e0>
   23359:	mov    BYTE PTR [r8],0x2
   2335d:	mov    rax,QWORD PTR [rcx+0x10]
   23361:	mov    DWORD PTR [rax+rdx*4],edi
   23364:	mov    rax,QWORD PTR [rcx+0x18]
   23368:	mov    DWORD PTR [rax+rdx*4],0x0
   2336f:	jmp    2326c <ImposeMasterTrace+0x15c>
   23374:	nop    DWORD PTR [rax+0x0]
   23378:	lea    rdi,[rip+0x1cf85]        # 40304 <defmq.7318+0x144>
   2337f:	xor    eax,eax
   23381:	call   317f0 <Die>
   23386:	jmp    231f3 <ImposeMasterTrace+0xe3>
   2338b:	nop    DWORD PTR [rax+rax*1+0x0]
   23390:	mov    rcx,QWORD PTR [r14]
   23393:	movzx  esi,BYTE PTR [rcx+rax*1-0x1]
   23398:	mov    eax,0x1
   2339d:	lea    ecx,[rsi-0x20]
   233a0:	cmp    cl,0x3f
   233a3:	ja     233b8 <ImposeMasterTrace+0x2a8>
   233a5:	movabs rax,0x8000000000006001
   233af:	shr    rax,cl
   233b2:	not    rax
   233b5:	and    eax,0x1
   233b8:	cmp    sil,0x7e
   233bc:	je     231f3 <ImposeMasterTrace+0xe3>
   233c2:	test   al,al
   233c4:	je     231f3 <ImposeMasterTrace+0xe3>
   233ca:	mov    rcx,QWORD PTR [rbp+0x0]
   233ce:	movsxd rax,r15d
   233d1:	mov    rsi,QWORD PTR [rcx+0x8]
   233d5:	mov    BYTE PTR [rsi+rax*1],dl
   233d8:	mov    rdx,QWORD PTR [rcx+0x10]
   233dc:	mov    DWORD PTR [rdx+rax*4],0x0
   233e3:	mov    rdx,QWORD PTR [rcx+0x18]
   233e7:	jmp    232e2 <ImposeMasterTrace+0x1d2>
   233ec:	nop    DWORD PTR [rax+0x0]
   233f0:	mov    BYTE PTR [r8],0x1
   233f4:	mov    rax,QWORD PTR [rcx+0x10]
   233f8:	mov    DWORD PTR [rax+rdx*4],edi
   233fb:	mov    edi,DWORD PTR [rsp+0x4]
   233ff:	mov    rax,QWORD PTR [rcx+0x18]
   23403:	mov    DWORD PTR [rax+rdx*4],edi
   23406:	add    edi,0x1
   23409:	mov    DWORD PTR [rsp+0x4],edi
   2340d:	jmp    2326c <ImposeMasterTrace+0x15c>
   23412:	nop    WORD PTR [rax+rax*1+0x0]
   23418:	xor    r15d,r15d
   2341b:	jmp    231fd <ImposeMasterTrace+0xed>

0000000000023420 <qst>:
   23420:	push   r15
   23422:	push   r14
   23424:	push   r13
   23426:	mov    r13,rsi
   23429:	push   r12
   2342b:	mov    r12,rdi
   2342e:	push   rbp
   2342f:	push   rbx
   23430:	mov    ebx,esi
   23432:	sub    ebx,edi
   23434:	sub    rsp,0x8
   23438:	mov    esi,DWORD PTR [rip+0x3e992]        # 61dd0 <qsz>
   2343e:	mov    eax,ebx
   23440:	cdq    
   23441:	idiv   esi
   23443:	sar    eax,1
   23445:	mov    r14d,eax
   23448:	imul   r14d,esi
   2344c:	movsxd r14,r14d
   2344f:	add    r14,r12
   23452:	cmp    DWORD PTR [rip+0x3e970],ebx        # 61dc8 <mthresh>
   23458:	jg     234ac <qst+0x8c>
   2345a:	xor    eax,eax
   2345c:	mov    rsi,r14
   2345f:	mov    rdi,r12
   23462:	call   QWORD PTR [rip+0x3e970]        # 61dd8 <qcmp>
   23468:	test   eax,eax
   2346a:	jle    2360b <qst+0x1eb>
   23470:	movsxd rax,DWORD PTR [rip+0x3e959]        # 61dd0 <qsz>
   23477:	mov    rbx,r13
   2347a:	mov    rdi,r12
   2347d:	sub    rbx,rax
   23480:	xor    eax,eax
   23482:	mov    rsi,rbx
   23485:	call   QWORD PTR [rip+0x3e94d]        # 61dd8 <qcmp>
   2348b:	mov    rdx,QWORD PTR [rip+0x3e946]        # 61dd8 <qcmp>
   23492:	test   eax,eax
   23494:	jg     236b3 <qst+0x293>
   2349a:	mov    rbx,r12
   2349d:	mov    esi,DWORD PTR [rip+0x3e92d]        # 61dd0 <qsz>
   234a3:	cmp    rbx,r14
   234a6:	jne    23655 <qst+0x235>
   234ac:	movsxd rax,esi
   234af:	mov    r15,r13
   234b2:	mov    rbp,r12
   234b5:	sub    r15,rax
   234b8:	cmp    rbp,r14
   234bb:	jb     23546 <qst+0x126>
   234c1:	nop    DWORD PTR [rax+0x0]
   234c8:	cmp    r15,r14
   234cb:	jbe    235ab <qst+0x18b>
   234d1:	mov    rbx,r15
   234d4:	mov    rsi,rbx
   234d7:	xor    eax,eax
   234d9:	mov    rdi,r14
   234dc:	call   QWORD PTR [rip+0x3e8f6]        # 61dd8 <qcmp>
   234e2:	test   eax,eax
   234e4:	movsxd rax,DWORD PTR [rip+0x3e8e5]        # 61dd0 <qsz>
   234eb:	mov    rsi,rax
   234ee:	jg     23570 <qst+0x150>
   234f4:	sub    rbx,rax
   234f7:	cmp    r14,rbx
   234fa:	jb     234d4 <qst+0xb4>
   234fc:	cmp    rbp,r14
   234ff:	je     235ba <qst+0x19a>
   23505:	sub    rbx,rax
   23508:	mov    rdi,rbp
   2350b:	mov    r15,rbx
   2350e:	mov    rbx,r14
   23511:	mov    r14,rbp
   23514:	nop    DWORD PTR [rax+0x0]
   23518:	lea    eax,[rsi-0x1]
   2351b:	lea    rcx,[rbp+rax*1+0x1]
   23520:	movzx  eax,BYTE PTR [rbp+0x0]
   23524:	movzx  edx,BYTE PTR [rbx]
   23527:	add    rbp,0x1
   2352b:	add    rbx,0x1
   2352f:	mov    BYTE PTR [rbp-0x1],dl
   23532:	mov    BYTE PTR [rbx-0x1],al
   23535:	cmp    rbp,rcx
   23538:	jne    23520 <qst+0x100>
   2353a:	mov    rbp,rdi
   2353d:	cmp    rbp,r14
   23540:	jae    234c8 <qst+0xa8>
   23546:	xor    eax,eax
   23548:	mov    rsi,r14
   2354b:	mov    rdi,rbp
   2354e:	call   QWORD PTR [rip+0x3e884]        # 61dd8 <qcmp>
   23554:	test   eax,eax
   23556:	jle    23588 <qst+0x168>
   23558:	cmp    r15,r14
   2355b:	ja     234d1 <qst+0xb1>
   23561:	movsxd rax,DWORD PTR [rip+0x3e868]        # 61dd0 <qsz>
   23568:	mov    rbx,r15
   2356b:	mov    rsi,rax
   2356e:	jmp    23505 <qst+0xe5>
   23570:	lea    rdi,[rbp+rax*1+0x0]
   23575:	cmp    rbp,r14
   23578:	je     235a0 <qst+0x180>
   2357a:	mov    r15,rbx
   2357d:	sub    r15,rax
   23580:	jmp    23518 <qst+0xf8>
   23582:	nop    WORD PTR [rax+rax*1+0x0]
   23588:	movsxd rdi,DWORD PTR [rip+0x3e841]        # 61dd0 <qsz>
   2358f:	mov    rsi,rdi
   23592:	add    rdi,rbp
   23595:	mov    rbp,rdi
   23598:	jmp    2353d <qst+0x11d>
   2359a:	nop    WORD PTR [rax+rax*1+0x0]
   235a0:	mov    r14,rbx
   235a3:	mov    r15,rbx
   235a6:	jmp    23518 <qst+0xf8>
   235ab:	movsxd rax,esi
   235ae:	mov    rbx,r15
   235b1:	cmp    rbp,r14
   235b4:	jne    23505 <qst+0xe5>
   235ba:	lea    r14,[rbp+rax*1+0x0]
   235bf:	mov    r15,rbp
   235c2:	mov    rdx,r13
   235c5:	mov    eax,DWORD PTR [rip+0x3e801]        # 61dcc <thresh>
   235cb:	sub    rdx,r14
   235ce:	sub    r15,r12
   235d1:	mov    ebx,edx
   235d3:	cmp    r15d,edx
   235d6:	jg     235fb <qst+0x1db>
   235d8:	cmp    r15d,eax
   235db:	jge    2367e <qst+0x25e>
   235e1:	mov    r12,r14
   235e4:	cmp    ebx,eax
   235e6:	jge    23438 <qst+0x18>
   235ec:	add    rsp,0x8
   235f0:	pop    rbx
   235f1:	pop    rbp
   235f2:	pop    r12
   235f4:	pop    r13
   235f6:	pop    r14
   235f8:	pop    r15
   235fa:	ret    
   235fb:	cmp    edx,eax
   235fd:	jge    23697 <qst+0x277>
   23603:	mov    ebx,r15d
   23606:	mov    r13,rbp
   23609:	jmp    235e4 <qst+0x1c4>
   2360b:	movsxd rax,DWORD PTR [rip+0x3e7be]        # 61dd0 <qsz>
   23612:	mov    rbx,r13
   23615:	mov    rdi,r14
   23618:	sub    rbx,rax
   2361b:	xor    eax,eax
   2361d:	mov    rsi,rbx
   23620:	call   QWORD PTR [rip+0x3e7b2]        # 61dd8 <qcmp>
   23626:	test   eax,eax
   23628:	jle    236c5 <qst+0x2a5>
   2362e:	mov    rdx,QWORD PTR [rip+0x3e7a3]        # 61dd8 <qcmp>
   23635:	cmp    r12,r14
   23638:	je     236b3 <qst+0x293>
   2363a:	xor    eax,eax
   2363c:	mov    rsi,rbx
   2363f:	mov    rdi,r12
   23642:	call   rdx
   23644:	test   eax,eax
   23646:	js     2349d <qst+0x7d>
   2364c:	mov    esi,DWORD PTR [rip+0x3e77e]        # 61dd0 <qsz>
   23652:	mov    rbx,r12
   23655:	lea    eax,[rsi-0x1]
   23658:	lea    rdi,[r14+rax*1+0x1]
   2365d:	mov    rax,r14
   23660:	movzx  edx,BYTE PTR [rax]
   23663:	movzx  ecx,BYTE PTR [rbx]
   23666:	add    rax,0x1
   2366a:	add    rbx,0x1
   2366e:	mov    BYTE PTR [rax-0x1],cl
   23671:	mov    BYTE PTR [rbx-0x1],dl
   23674:	cmp    rax,rdi
   23677:	jne    23660 <qst+0x240>
   23679:	jmp    234ac <qst+0x8c>
   2367e:	mov    rdi,r12
   23681:	mov    rsi,rbp
   23684:	mov    r12,r14
   23687:	call   23420 <qst>
   2368c:	mov    eax,DWORD PTR [rip+0x3e73a]        # 61dcc <thresh>
   23692:	jmp    235e4 <qst+0x1c4>
   23697:	mov    rsi,r13
   2369a:	mov    rdi,r14
   2369d:	mov    ebx,r15d
   236a0:	mov    r13,rbp
   236a3:	call   23420 <qst>
   236a8:	mov    eax,DWORD PTR [rip+0x3e71e]        # 61dcc <thresh>
   236ae:	jmp    235e4 <qst+0x1c4>
   236b3:	xor    eax,eax
   236b5:	mov    rsi,rbx
   236b8:	mov    rdi,r14
   236bb:	call   rdx
   236bd:	test   eax,eax
   236bf:	js     2349d <qst+0x7d>
   236c5:	mov    esi,DWORD PTR [rip+0x3e705]        # 61dd0 <qsz>
   236cb:	jmp    234ac <qst+0x8c>

00000000000236d0 <specqsort>:
   236d0:	endbr64 
   236d4:	cmp    esi,0x1
   236d7:	jle    23872 <specqsort+0x1a2>
   236dd:	push   r14
   236df:	lea    eax,[rdx*4+0x0]
   236e6:	push   r13
   236e8:	mov    r13,rdi
   236eb:	push   r12
   236ed:	push   rbp
   236ee:	mov    ebp,esi
   236f0:	imul   ebp,edx
   236f3:	mov    DWORD PTR [rip+0x3e6d3],eax        # 61dcc <thresh>
   236f9:	lea    eax,[rdx+rdx*2]
   236fc:	add    eax,eax
   236fe:	push   rbx
   236ff:	mov    DWORD PTR [rip+0x3e6cb],edx        # 61dd0 <qsz>
   23705:	movsxd rbp,ebp
   23708:	mov    QWORD PTR [rip+0x3e6c9],rcx        # 61dd8 <qcmp>
   2370f:	add    rbp,rdi
   23712:	mov    DWORD PTR [rip+0x3e6b0],eax        # 61dc8 <mthresh>
   23718:	mov    r14,rbp
   2371b:	cmp    esi,0x3
   2371e:	jg     23855 <specqsort+0x185>
   23724:	movsxd rdi,edx
   23727:	lea    r12,[r13+rdi*1+0x0]
   2372c:	cmp    r14,r12
   2372f:	jbe    2378c <specqsort+0xbc>
   23731:	mov    rbx,r13
   23734:	nop    DWORD PTR [rax+0x0]
   23738:	mov    rdi,rbx
   2373b:	mov    rsi,r12
   2373e:	xor    eax,eax
   23740:	call   QWORD PTR [rip+0x3e692]        # 61dd8 <qcmp>
   23746:	movsxd rdi,DWORD PTR [rip+0x3e683]        # 61dd0 <qsz>
   2374d:	test   eax,eax
   2374f:	cmovg  rbx,r12
   23753:	add    r12,rdi
   23756:	cmp    r14,r12
   23759:	ja     23738 <specqsort+0x68>
   2375b:	lea    r12,[r13+rdi*1+0x0]
   23760:	cmp    rbx,r13
   23763:	je     2378c <specqsort+0xbc>
   23765:	cmp    r12,r13
   23768:	jbe    2378c <specqsort+0xbc>
   2376a:	nop    WORD PTR [rax+rax*1+0x0]
   23770:	movzx  eax,BYTE PTR [rbx]
   23773:	movzx  edx,BYTE PTR [r13+0x0]
   23778:	add    r13,0x1
   2377c:	add    rbx,0x1
   23780:	mov    BYTE PTR [rbx-0x1],dl
   23783:	mov    BYTE PTR [r13-0x1],al
   23787:	cmp    r12,r13
   2378a:	jne    23770 <specqsort+0xa0>
   2378c:	cmp    rbp,r12
   2378f:	jbe    237cd <specqsort+0xfd>
   23791:	nop    DWORD PTR [rax+0x0]
   23798:	mov    rbx,r12
   2379b:	nop    DWORD PTR [rax+rax*1+0x0]
   237a0:	sub    rbx,rdi
   237a3:	mov    rsi,r12
   237a6:	xor    eax,eax
   237a8:	mov    rdi,rbx
   237ab:	call   QWORD PTR [rip+0x3e627]        # 61dd8 <qcmp>
   237b1:	movsxd rdi,DWORD PTR [rip+0x3e618]        # 61dd0 <qsz>
   237b8:	test   eax,eax
   237ba:	jg     237a0 <specqsort+0xd0>
   237bc:	lea    rcx,[rbx+rdi*1]
   237c0:	cmp    rcx,r12
   237c3:	jne    237e0 <specqsort+0x110>
   237c5:	add    r12,rdi
   237c8:	cmp    r12,rbp
   237cb:	jb     23798 <specqsort+0xc8>
   237cd:	pop    rbx
   237ce:	pop    rbp
   237cf:	pop    r12
   237d1:	pop    r13
   237d3:	pop    r14
   237d5:	ret    
   237d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   237e0:	lea    r9,[r12+rdi*1-0x1]
   237e5:	lea    rbx,[r12+rdi*1]
   237e9:	cmp    r9,r12
   237ec:	jb     23834 <specqsort+0x164>
   237ee:	mov    r8,rdi
   237f1:	sub    r12,0x1
   237f5:	neg    r8
   237f8:	mov    r11,r12
   237fb:	nop    DWORD PTR [rax+rax*1+0x0]
   23800:	movzx  r10d,BYTE PTR [r9]
   23804:	mov    rax,r12
   23807:	cmp    rcx,r12
   2380a:	ja     23840 <specqsort+0x170>
   2380c:	mov    rdx,r9
   2380f:	nop
   23810:	movzx  esi,BYTE PTR [rax]
   23813:	mov    BYTE PTR [rdx],sil
   23816:	mov    rsi,rax
   23819:	add    rax,r8
   2381c:	sub    rdx,rdi
   2381f:	cmp    rcx,rax
   23822:	jbe    23810 <specqsort+0x140>
   23824:	sub    r9,0x1
   23828:	mov    BYTE PTR [rsi],r10b
   2382b:	sub    r12,0x1
   2382f:	cmp    r11,r9
   23832:	jne    23800 <specqsort+0x130>
   23834:	mov    r12,rbx
   23837:	jmp    237c8 <specqsort+0xf8>
   23839:	nop    DWORD PTR [rax+0x0]
   23840:	mov    rsi,r9
   23843:	sub    r9,0x1
   23847:	sub    r12,0x1
   2384b:	mov    BYTE PTR [rsi],r10b
   2384e:	cmp    r11,r9
   23851:	jne    23800 <specqsort+0x130>
   23853:	jmp    23834 <specqsort+0x164>
   23855:	mov    rsi,rbp
   23858:	call   23420 <qst>
   2385d:	movsxd r14,DWORD PTR [rip+0x3e568]        # 61dcc <thresh>
   23864:	mov    edx,DWORD PTR [rip+0x3e566]        # 61dd0 <qsz>
   2386a:	add    r14,r13
   2386d:	jmp    23724 <specqsort+0x54>
   23872:	ret    
   23873:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2387d:	nop    DWORD PTR [rax]

0000000000023880 <ReadA2M>:
   23880:	endbr64 
   23884:	push   r15
   23886:	push   r14
   23888:	push   r13
   2388a:	mov    r13,rdi
   2388d:	push   r12
   2388f:	xor    r12d,r12d
   23892:	push   rbp
   23893:	push   rbx
   23894:	sub    rsp,0x38
   23898:	mov    rdi,QWORD PTR [rdi]
   2389b:	mov    rax,QWORD PTR fs:0x28
   238a4:	mov    QWORD PTR [rsp+0x28],rax
   238a9:	xor    eax,eax
   238ab:	call   3660 <feof@plt>
   238b0:	test   eax,eax
   238b2:	jne    239ed <ReadA2M+0x16d>
   238b8:	xor    esi,esi
   238ba:	mov    edi,0xa
   238bf:	mov    ebp,eax
   238c1:	xor    ebx,ebx
   238c3:	call   2aa20 <MSAAlloc>
   238c8:	lea    r14,[rsp+0x18]
   238cd:	mov    r12,rax
   238d0:	mov    rdi,r13
   238d3:	call   2c370 <MSAFileGetLine>
   238d8:	mov    QWORD PTR [rsp+0x20],rax
   238dd:	test   rax,rax
   238e0:	je     239e0 <ReadA2M+0x160>
   238e6:	cmp    BYTE PTR [rax],0x3e
   238e9:	je     23938 <ReadA2M+0xb8>
   238eb:	test   rbx,rbx
   238ee:	je     238d0 <ReadA2M+0x50>
   238f0:	mov    rdx,r14
   238f3:	lea    rdi,[rsp+0x20]
   238f8:	lea    rsi,[rip+0x1e3cd]        # 41ccc <CSWTCH.18+0x60c>
   238ff:	call   36c50 <sre_strtok>
   23904:	mov    rdx,rax
   23907:	test   rax,rax
   2390a:	je     238d0 <ReadA2M+0x50>
   2390c:	mov    rcx,QWORD PTR [r12+0x148]
   23914:	movsxd rax,ebp
   23917:	lea    r15,[rcx+rax*4]
   2391b:	mov    rcx,QWORD PTR [r12]
   2391f:	mov    esi,DWORD PTR [r15]
   23922:	lea    rdi,[rcx+rax*8]
   23926:	mov    ecx,DWORD PTR [rsp+0x18]
   2392a:	call   36b70 <sre_strcat>
   2392f:	mov    DWORD PTR [r15],eax
   23932:	jmp    238d0 <ReadA2M+0x50>
   23934:	nop    DWORD PTR [rax+0x0]
   23938:	lea    rbp,[rsp+0x20]
   2393d:	add    rax,0x1
   23941:	mov    rdx,r14
   23944:	lea    rsi,[rip+0x1e381]        # 41ccc <CSWTCH.18+0x60c>
   2394b:	mov    rdi,rbp
   2394e:	mov    QWORD PTR [rsp+0x20],rax
   23953:	call   36c50 <sre_strtok>
   23958:	mov    rbx,rax
   2395b:	test   rax,rax
   2395e:	je     23a20 <ReadA2M+0x1a0>
   23964:	mov    rdi,rbp
   23967:	lea    rdx,[rsp+0x1c]
   2396c:	lea    rsi,[rip+0x1e35b]        # 41cce <CSWTCH.18+0x60e>
   23973:	call   36c50 <sre_strtok>
   23978:	mov    rdi,QWORD PTR [r12+0x138]
   23980:	mov    rsi,rbx
   23983:	mov    r15,rax
   23986:	call   28080 <GKIStoreKey>
   2398b:	mov    ebp,eax
   2398d:	cmp    DWORD PTR [r12+0x140],eax
   23995:	jle    23a10 <ReadA2M+0x190>
   23997:	mov    rdx,QWORD PTR [r12+0x8]
   2399c:	movsxd rax,ebp
   2399f:	mov    esi,DWORD PTR [rsp+0x18]
   239a3:	mov    rdi,rbx
   239a6:	lea    rdx,[rdx+rax*8]
   239aa:	mov    QWORD PTR [rsp+0x8],rdx
   239af:	call   36ce0 <sre_strdup>
   239b4:	mov    rdx,QWORD PTR [rsp+0x8]
   239b9:	mov    QWORD PTR [rdx],rax
   239bc:	test   r15,r15
   239bf:	je     239ce <ReadA2M+0x14e>
   239c1:	mov    rdx,r15
   239c4:	mov    esi,ebp
   239c6:	mov    rdi,r12
   239c9:	call   2b4a0 <MSASetSeqDescription>
   239ce:	add    DWORD PTR [r12+0x1c],0x1
   239d4:	jmp    238d0 <ReadA2M+0x50>
   239d9:	nop    DWORD PTR [rax+0x0]
   239e0:	mov    rdi,r12
   239e3:	test   rbx,rbx
   239e6:	je     23a3b <ReadA2M+0x1bb>
   239e8:	call   2be90 <MSAVerifyParse>
   239ed:	mov    rax,QWORD PTR [rsp+0x28]
   239f2:	xor    rax,QWORD PTR fs:0x28
   239fb:	jne    23a45 <ReadA2M+0x1c5>
   239fd:	add    rsp,0x38
   23a01:	mov    rax,r12
   23a04:	pop    rbx
   23a05:	pop    rbp
   23a06:	pop    r12
   23a08:	pop    r13
   23a0a:	pop    r14
   23a0c:	pop    r15
   23a0e:	ret    
   23a0f:	nop
   23a10:	mov    rdi,r12
   23a13:	call   2ad30 <MSAExpand>
   23a18:	jmp    23997 <ReadA2M+0x117>
   23a1d:	nop    DWORD PTR [rax]
   23a20:	mov    edx,DWORD PTR [r13+0x10]
   23a24:	mov    rsi,QWORD PTR [r13+0x8]
   23a28:	lea    rdi,[rip+0x1cab9]        # 404e8 <defmq.7318+0x328>
   23a2f:	xor    eax,eax
   23a31:	call   317f0 <Die>
   23a36:	jmp    23964 <ReadA2M+0xe4>
   23a3b:	call   2b230 <MSAFree>
   23a40:	xor    r12d,r12d
   23a43:	jmp    239ed <ReadA2M+0x16d>
   23a45:	call   3570 <__stack_chk_fail@plt>
   23a4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000023a50 <WriteA2M>:
   23a50:	endbr64 
   23a54:	push   r15
   23a56:	push   r14
   23a58:	push   r13
   23a5a:	push   r12
   23a5c:	push   rbp
   23a5d:	push   rbx
   23a5e:	sub    rsp,0x68
   23a62:	mov    edx,DWORD PTR [rsi+0x1c]
   23a65:	mov    rax,QWORD PTR fs:0x28
   23a6e:	mov    QWORD PTR [rsp+0x58],rax
   23a73:	xor    eax,eax
   23a75:	mov    BYTE PTR [rsp+0x4c],0x0
   23a7a:	mov    QWORD PTR [rsp+0x8],0x0
   23a83:	test   edx,edx
   23a85:	jle    23b4b <WriteA2M+0xfb>
   23a8b:	mov    r12,rdi
   23a8e:	mov    r15,rsi
   23a91:	lea    rbx,[rsp+0x10]
   23a96:	lea    r13,[rip+0x1ee88]        # 42925 <cof.6115+0x125>
   23a9d:	nop    DWORD PTR [rax]
   23aa0:	mov    rcx,QWORD PTR [rsp+0x8]
   23aa5:	mov    rax,QWORD PTR [r15+0x68]
   23aa9:	lea    r8,[rip+0x1d980]        # 41430 <gki_primes+0x9b0>
   23ab0:	lea    rbp,[rcx*8+0x0]
   23ab8:	test   rax,rax
   23abb:	je     23acf <WriteA2M+0x7f>
   23abd:	mov    r8,QWORD PTR [rax+rcx*8]
   23ac1:	lea    rax,[rip+0x1d968]        # 41430 <gki_primes+0x9b0>
   23ac8:	test   r8,r8
   23acb:	cmove  r8,rax
   23acf:	mov    rax,QWORD PTR [r15+0x8]
   23ad3:	mov    esi,0x1
   23ad8:	mov    rdi,r12
   23adb:	xor    r14d,r14d
   23ade:	lea    rdx,[rip+0x1c9f7]        # 404dc <defmq.7318+0x31c>
   23ae5:	mov    rcx,QWORD PTR [rax+rbp*1]
   23ae9:	xor    eax,eax
   23aeb:	call   37c0 <__fprintf_chk@plt>
   23af0:	mov    eax,DWORD PTR [r15+0x18]
   23af4:	test   eax,eax
   23af6:	jle    23b36 <WriteA2M+0xe6>
   23af8:	nop    DWORD PTR [rax+rax*1+0x0]
   23b00:	mov    rax,QWORD PTR [r15]
   23b03:	mov    edx,0x3c
   23b08:	mov    rdi,rbx
   23b0b:	mov    rsi,QWORD PTR [rax+rbp*1]
   23b0f:	add    rsi,r14
   23b12:	add    r14,0x3c
   23b16:	call   34b0 <strncpy@plt>
   23b1b:	mov    rcx,rbx
   23b1e:	mov    rdx,r13
   23b21:	mov    esi,0x1
   23b26:	mov    rdi,r12
   23b29:	xor    eax,eax
   23b2b:	call   37c0 <__fprintf_chk@plt>
   23b30:	cmp    DWORD PTR [r15+0x18],r14d
   23b34:	jg     23b00 <WriteA2M+0xb0>
   23b36:	add    QWORD PTR [rsp+0x8],0x1
   23b3c:	mov    rax,QWORD PTR [rsp+0x8]
   23b41:	cmp    DWORD PTR [r15+0x1c],eax
   23b45:	jg     23aa0 <WriteA2M+0x50>
   23b4b:	mov    rax,QWORD PTR [rsp+0x58]
   23b50:	xor    rax,QWORD PTR fs:0x28
   23b59:	jne    23b6a <WriteA2M+0x11a>
   23b5b:	add    rsp,0x68
   23b5f:	pop    rbx
   23b60:	pop    rbp
   23b61:	pop    r12
   23b63:	pop    r13
   23b65:	pop    r14
   23b67:	pop    r15
   23b69:	ret    
   23b6a:	call   3570 <__stack_chk_fail@plt>
   23b6f:	nop

0000000000023b70 <compare_lists>:
   23b70:	test   r8d,r8d
   23b73:	jle    23c00 <compare_lists+0x90>
   23b79:	pxor   xmm0,xmm0
   23b7d:	movss  xmm1,DWORD PTR [rip+0x19817]        # 3d39c <_IO_stdin_used+0x39c>
   23b85:	lea    r10d,[r8-0x1]
   23b89:	xor    eax,eax
   23b8b:	movaps xmm2,xmm0
   23b8e:	jmp    23b93 <compare_lists+0x23>
   23b90:	mov    rax,r8
   23b93:	addss  xmm0,xmm1
   23b97:	mov    r11d,DWORD PTR [rdi+rax*4]
   23b9b:	cmp    DWORD PTR [rdx+rax*4],r11d
   23b9f:	jne    23ba5 <compare_lists+0x35>
   23ba1:	addss  xmm2,xmm1
   23ba5:	lea    r8,[rax+0x1]
   23ba9:	cmp    r10,rax
   23bac:	jne    23b90 <compare_lists+0x20>
   23bae:	test   r9d,r9d
   23bb1:	jle    23be4 <compare_lists+0x74>
   23bb3:	movss  xmm1,DWORD PTR [rip+0x197e1]        # 3d39c <_IO_stdin_used+0x39c>
   23bbb:	lea    edi,[r9-0x1]
   23bbf:	xor    eax,eax
   23bc1:	jmp    23bcb <compare_lists+0x5b>
   23bc3:	nop    DWORD PTR [rax+rax*1+0x0]
   23bc8:	mov    rax,rdx
   23bcb:	addss  xmm0,xmm1
   23bcf:	mov    edx,DWORD PTR [rcx+rax*4]
   23bd2:	cmp    DWORD PTR [rsi+rax*4],edx
   23bd5:	jne    23bdb <compare_lists+0x6b>
   23bd7:	addss  xmm2,xmm1
   23bdb:	lea    rdx,[rax+0x1]
   23bdf:	cmp    rax,rdi
   23be2:	jne    23bc8 <compare_lists+0x58>
   23be4:	divss  xmm2,xmm0
   23be8:	mov    rax,QWORD PTR [rsp+0x8]
   23bed:	movss  DWORD PTR [rax],xmm2
   23bf1:	mov    eax,0x1
   23bf6:	ret    
   23bf7:	nop    WORD PTR [rax+rax*1+0x0]
   23c00:	pxor   xmm0,xmm0
   23c04:	movaps xmm2,xmm0
   23c07:	jmp    23bae <compare_lists+0x3e>
   23c09:	nop    DWORD PTR [rax+0x0]

0000000000023c10 <make_alilist>:
   23c10:	push   r13
   23c12:	mov    r13,rcx
   23c15:	push   r12
   23c17:	mov    r12,rdx
   23c1a:	push   rbp
   23c1b:	mov    rbp,rsi
   23c1e:	push   rbx
   23c1f:	mov    rbx,rdi
   23c22:	sub    rsp,0x8
   23c26:	call   3560 <strlen@plt>
   23c2b:	mov    esi,0xb3
   23c30:	lea    rdi,[rip+0x1c8d6]        # 4050d <defmq.7318+0x34d>
   23c37:	lea    rdx,[rax*4+0x0]
   23c3f:	call   36810 <sre_malloc>
   23c44:	movzx  esi,BYTE PTR [rbx]
   23c47:	test   sil,sil
   23c4a:	je     23d08 <make_alilist+0xf8>
   23c50:	xor    r8d,r8d
   23c53:	xor    r10d,r10d
   23c56:	xor    edi,edi
   23c58:	movabs r9,0x8000000000006001
   23c62:	jmp    23c98 <make_alilist+0x88>
   23c64:	nop    DWORD PTR [rax+0x0]
   23c68:	mov    edx,0x1
   23c6d:	cmp    cl,0x3f
   23c70:	ja     23c7e <make_alilist+0x6e>
   23c72:	mov    rdx,r9
   23c75:	shr    rdx,cl
   23c78:	not    rdx
   23c7b:	and    edx,0x1
   23c7e:	cmp    r11b,0x7e
   23c82:	je     23c8b <make_alilist+0x7b>
   23c84:	cmp    dl,0x1
   23c87:	sbb    r8d,0xffffffff
   23c8b:	add    rdi,0x1
   23c8f:	movzx  esi,BYTE PTR [rbx+rdi*1]
   23c93:	test   sil,sil
   23c96:	je     23d0b <make_alilist+0xfb>
   23c98:	lea    ecx,[rsi-0x20]
   23c9b:	mov    edx,0x1
   23ca0:	cmp    cl,0x3f
   23ca3:	ja     23cb1 <make_alilist+0xa1>
   23ca5:	mov    rdx,r9
   23ca8:	shr    rdx,cl
   23cab:	not    rdx
   23cae:	and    edx,0x1
   23cb1:	movzx  r11d,BYTE PTR [rbp+rdi*1+0x0]
   23cb7:	cmp    sil,0x7e
   23cbb:	setne  sil
   23cbf:	lea    ecx,[r11-0x20]
   23cc3:	and    dl,sil
   23cc6:	je     23c68 <make_alilist+0x58>
   23cc8:	cmp    cl,0x3f
   23ccb:	ja     23cd9 <make_alilist+0xc9>
   23ccd:	mov    rdx,r9
   23cd0:	shr    rdx,cl
   23cd3:	not    rdx
   23cd6:	and    edx,0x1
   23cd9:	cmp    r11b,0x7e
   23cdd:	je     23ce6 <make_alilist+0xd6>
   23cdf:	mov    ecx,r8d
   23ce2:	test   dl,dl
   23ce4:	jne    23ceb <make_alilist+0xdb>
   23ce6:	mov    ecx,0xffffffff
   23ceb:	movsxd rdx,r10d
   23cee:	add    r10d,0x1
   23cf2:	mov    DWORD PTR [rax+rdx*4],ecx
   23cf5:	movzx  r11d,BYTE PTR [rbp+rdi*1+0x0]
   23cfb:	lea    ecx,[r11-0x20]
   23cff:	jmp    23c68 <make_alilist+0x58>
   23d04:	nop    DWORD PTR [rax+0x0]
   23d08:	xor    r10d,r10d
   23d0b:	mov    DWORD PTR [r13+0x0],r10d
   23d0f:	mov    QWORD PTR [r12],rax
   23d13:	add    rsp,0x8
   23d17:	mov    eax,0x1
   23d1c:	pop    rbx
   23d1d:	pop    rbp
   23d1e:	pop    r12
   23d20:	pop    r13
   23d22:	ret    
   23d23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   23d2e:	xchg   ax,ax

0000000000023d30 <make_ref_alilist.isra.0>:
   23d30:	push   r15
   23d32:	mov    r15,rdi
   23d35:	mov    rdi,rdx
   23d38:	push   r14
   23d3a:	mov    r14,rsi
   23d3d:	push   r13
   23d3f:	mov    r13,rcx
   23d42:	push   r12
   23d44:	mov    r12,rdx
   23d47:	push   rbp
   23d48:	mov    rbp,r9
   23d4b:	push   rbx
   23d4c:	sub    rsp,0x18
   23d50:	mov    QWORD PTR [rsp+0x8],r8
   23d55:	call   3560 <strlen@plt>
   23d5a:	mov    esi,0xec
   23d5f:	lea    rdi,[rip+0x1c7a7]        # 4050d <defmq.7318+0x34d>
   23d66:	lea    rdx,[rax*4+0x0]
   23d6e:	call   36810 <sre_malloc>
   23d73:	mov    rdi,r12
   23d76:	mov    rbx,rax
   23d79:	call   3560 <strlen@plt>
   23d7e:	lea    rdi,[rip+0x1c788]        # 4050d <defmq.7318+0x34d>
   23d85:	mov    esi,0xed
   23d8a:	lea    rdx,[rax*4+0x0]
   23d92:	call   36810 <sre_malloc>
   23d97:	movzx  edx,BYTE PTR [r14]
   23d9b:	xor    r9d,r9d
   23d9e:	xor    edi,edi
   23da0:	movabs r8,0x8000000000006001
   23daa:	test   dl,dl
   23dac:	jne    23dbd <make_ref_alilist.isra.0+0x8d>
   23dae:	jmp    23e08 <make_ref_alilist.isra.0+0xd8>
   23db0:	add    rdi,0x1
   23db4:	movzx  edx,BYTE PTR [r14+rdi*1]
   23db9:	test   dl,dl
   23dbb:	je     23e08 <make_ref_alilist.isra.0+0xd8>
   23dbd:	lea    ecx,[rdx-0x20]
   23dc0:	mov    esi,0x1
   23dc5:	cmp    cl,0x3f
   23dc8:	ja     23dd6 <make_ref_alilist.isra.0+0xa6>
   23dca:	mov    rsi,r8
   23dcd:	shr    rsi,cl
   23dd0:	not    rsi
   23dd3:	and    esi,0x1
   23dd6:	cmp    dl,0x7e
   23dd9:	je     23db0 <make_ref_alilist.isra.0+0x80>
   23ddb:	test   sil,sil
   23dde:	je     23db0 <make_ref_alilist.isra.0+0x80>
   23de0:	mov    esi,DWORD PTR [r15+rdi*4]
   23de4:	xor    ecx,ecx
   23de6:	movsxd rdx,r9d
   23de9:	test   esi,esi
   23deb:	setne  cl
   23dee:	add    rdi,0x1
   23df2:	add    r9d,0x1
   23df6:	mov    DWORD PTR [rax+rdx*4],ecx
   23df9:	movzx  edx,BYTE PTR [r14+rdi*1]
   23dfe:	test   dl,dl
   23e00:	jne    23dbd <make_ref_alilist.isra.0+0x8d>
   23e02:	nop    WORD PTR [rax+rax*1+0x0]
   23e08:	movzx  r8d,BYTE PTR [r12]
   23e0d:	xor    r15d,r15d
   23e10:	test   r8b,r8b
   23e13:	je     23f20 <make_ref_alilist.isra.0+0x1f0>
   23e19:	xor    r14d,r14d
   23e1c:	xor    r15d,r15d
   23e1f:	xor    edx,edx
   23e21:	xor    edi,edi
   23e23:	movabs r11,0x8000000000006001
   23e2d:	jmp    23e98 <make_ref_alilist.isra.0+0x168>
   23e2f:	nop
   23e30:	movzx  r10d,BYTE PTR [r12+rdx*1]
   23e35:	mov    esi,0x1
   23e3a:	lea    ecx,[r10-0x20]
   23e3e:	cmp    cl,0x3f
   23e41:	ja     23e4f <make_ref_alilist.isra.0+0x11f>
   23e43:	mov    rsi,r11
   23e46:	shr    rsi,cl
   23e49:	not    rsi
   23e4c:	and    esi,0x1
   23e4f:	cmp    r10b,0x7e
   23e53:	je     23e5c <make_ref_alilist.isra.0+0x12c>
   23e55:	cmp    sil,0x1
   23e59:	sbb    edi,0xffffffff
   23e5c:	mov    ecx,0x1
   23e61:	cmp    r9b,0x3f
   23e65:	ja     23e79 <make_ref_alilist.isra.0+0x149>
   23e67:	mov    ecx,r9d
   23e6a:	mov    rsi,r11
   23e6d:	shr    rsi,cl
   23e70:	mov    rcx,rsi
   23e73:	not    rcx
   23e76:	and    ecx,0x1
   23e79:	cmp    r8b,0x7e
   23e7d:	je     23e86 <make_ref_alilist.isra.0+0x156>
   23e7f:	cmp    cl,0x1
   23e82:	sbb    r14d,0xffffffff
   23e86:	add    rdx,0x1
   23e8a:	movzx  r8d,BYTE PTR [r12+rdx*1]
   23e8f:	test   r8b,r8b
   23e92:	je     23f20 <make_ref_alilist.isra.0+0x1f0>
   23e98:	lea    ecx,[r8-0x20]
   23e9c:	mov    esi,0x1
   23ea1:	cmp    cl,0x3f
   23ea4:	ja     23eb2 <make_ref_alilist.isra.0+0x182>
   23ea6:	mov    rsi,r11
   23ea9:	shr    rsi,cl
   23eac:	not    rsi
   23eaf:	and    esi,0x1
   23eb2:	cmp    r8b,0x7e
   23eb6:	movzx  r8d,BYTE PTR [r13+rdx*1+0x0]
   23ebc:	setne  cl
   23ebf:	lea    r9d,[r8-0x20]
   23ec3:	and    sil,cl
   23ec6:	je     23e30 <make_ref_alilist.isra.0+0x100>
   23ecc:	movsxd rcx,edi
   23ecf:	mov    ecx,DWORD PTR [rax+rcx*4]
   23ed2:	test   ecx,ecx
   23ed4:	je     23e30 <make_ref_alilist.isra.0+0x100>
   23eda:	cmp    r9b,0x3f
   23ede:	ja     23eef <make_ref_alilist.isra.0+0x1bf>
   23ee0:	mov    rsi,r11
   23ee3:	mov    ecx,r9d
   23ee6:	shr    rsi,cl
   23ee9:	not    rsi
   23eec:	and    esi,0x1
   23eef:	cmp    r8b,0x7e
   23ef3:	je     23efd <make_ref_alilist.isra.0+0x1cd>
   23ef5:	mov    ecx,r14d
   23ef8:	test   sil,sil
   23efb:	jne    23f02 <make_ref_alilist.isra.0+0x1d2>
   23efd:	mov    ecx,0xffffffff
   23f02:	movsxd rsi,r15d
   23f05:	add    r15d,0x1
   23f09:	mov    DWORD PTR [rbx+rsi*4],ecx
   23f0c:	movzx  r8d,BYTE PTR [r13+rdx*1+0x0]
   23f12:	lea    r9d,[r8-0x20]
   23f16:	jmp    23e30 <make_ref_alilist.isra.0+0x100>
   23f1b:	nop    DWORD PTR [rax+rax*1+0x0]
   23f20:	mov    rdi,rax
   23f23:	call   3460 <free@plt>
   23f28:	mov    rax,QWORD PTR [rsp+0x8]
   23f2d:	mov    DWORD PTR [rbp+0x0],r15d
   23f31:	mov    QWORD PTR [rax],rbx
   23f34:	add    rsp,0x18
   23f38:	mov    eax,0x1
   23f3d:	pop    rbx
   23f3e:	pop    rbp
   23f3f:	pop    r12
   23f41:	pop    r13
   23f43:	pop    r14
   23f45:	pop    r15
   23f47:	ret    
   23f48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000023f50 <ComparePairAlignments>:
   23f50:	endbr64 
   23f54:	push   r15
   23f56:	push   r14
   23f58:	mov    r14,rdi
   23f5b:	push   r13
   23f5d:	mov    r13,rsi
   23f60:	push   r12
   23f62:	mov    r12,rdx
   23f65:	push   rbp
   23f66:	mov    rbp,rcx
   23f69:	mov    rdi,r12
   23f6c:	push   rbx
   23f6d:	mov    rsi,rbp
   23f70:	sub    rsp,0x48
   23f74:	mov    rax,QWORD PTR fs:0x28
   23f7d:	mov    QWORD PTR [rsp+0x38],rax
   23f82:	xor    eax,eax
   23f84:	lea    r15,[rsp+0xc]
   23f89:	lea    rdx,[rsp+0x28]
   23f8e:	mov    rcx,r15
   23f91:	call   23c10 <make_alilist>
   23f96:	test   eax,eax
   23f98:	jne    23fc8 <ComparePairAlignments+0x78>
   23f9a:	movss  xmm0,DWORD PTR [rip+0x1c57a]        # 4051c <defmq.7318+0x35c>
   23fa2:	mov    rax,QWORD PTR [rsp+0x38]
   23fa7:	xor    rax,QWORD PTR fs:0x28
   23fb0:	jne    2407c <ComparePairAlignments+0x12c>
   23fb6:	add    rsp,0x48
   23fba:	pop    rbx
   23fbb:	pop    rbp
   23fbc:	pop    r12
   23fbe:	pop    r13
   23fc0:	pop    r14
   23fc2:	pop    r15
   23fc4:	ret    
   23fc5:	nop    DWORD PTR [rax]
   23fc8:	lea    rbx,[rsp+0x10]
   23fcd:	lea    rdx,[rsp+0x30]
   23fd2:	mov    rsi,r12
   23fd5:	mov    rdi,rbp
   23fd8:	mov    rcx,rbx
   23fdb:	call   23c10 <make_alilist>
   23fe0:	test   eax,eax
   23fe2:	je     23f9a <ComparePairAlignments+0x4a>
   23fe4:	lea    rdx,[rsp+0x18]
   23fe9:	mov    rcx,r15
   23fec:	mov    rsi,r13
   23fef:	mov    rdi,r14
   23ff2:	call   23c10 <make_alilist>
   23ff7:	test   eax,eax
   23ff9:	je     23f9a <ComparePairAlignments+0x4a>
   23ffb:	lea    rdx,[rsp+0x20]
   24000:	mov    rcx,rbx
   24003:	mov    rsi,r14
   24006:	mov    rdi,r13
   24009:	call   23c10 <make_alilist>
   2400e:	test   eax,eax
   24010:	je     23f9a <ComparePairAlignments+0x4a>
   24012:	sub    rsp,0x8
   24016:	lea    rax,[rsp+0x1c]
   2401b:	push   rax
   2401c:	mov    r9d,DWORD PTR [rsp+0x20]
   24021:	mov    r8d,DWORD PTR [rsp+0x1c]
   24026:	mov    rcx,QWORD PTR [rsp+0x40]
   2402b:	mov    rdx,QWORD PTR [rsp+0x38]
   24030:	mov    rsi,QWORD PTR [rsp+0x30]
   24035:	mov    rdi,QWORD PTR [rsp+0x28]
   2403a:	call   23b70 <compare_lists>
   2403f:	pop    rdx
   24040:	pop    rcx
   24041:	test   eax,eax
   24043:	je     23f9a <ComparePairAlignments+0x4a>
   24049:	mov    rdi,QWORD PTR [rsp+0x18]
   2404e:	call   3460 <free@plt>
   24053:	mov    rdi,QWORD PTR [rsp+0x20]
   24058:	call   3460 <free@plt>
   2405d:	mov    rdi,QWORD PTR [rsp+0x28]
   24062:	call   3460 <free@plt>
   24067:	mov    rdi,QWORD PTR [rsp+0x30]
   2406c:	call   3460 <free@plt>
   24071:	movss  xmm0,DWORD PTR [rsp+0x14]
   24077:	jmp    23fa2 <ComparePairAlignments+0x52>
   2407c:	call   3570 <__stack_chk_fail@plt>
   24081:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2408c:	nop    DWORD PTR [rax+0x0]

0000000000024090 <CompareRefPairAlignments>:
   24090:	endbr64 
   24094:	push   r15
   24096:	mov    r15,rdx
   24099:	push   r14
   2409b:	mov    r14,rcx
   2409e:	push   r13
   240a0:	mov    r13,r8
   240a3:	mov    rdx,r14
   240a6:	push   r12
   240a8:	mov    rcx,r13
   240ab:	mov    r12,rsi
   240ae:	push   rbp
   240af:	mov    rbp,rdi
   240b2:	push   rbx
   240b3:	sub    rsp,0x58
   240b7:	mov    rax,QWORD PTR fs:0x28
   240c0:	mov    QWORD PTR [rsp+0x48],rax
   240c5:	xor    eax,eax
   240c7:	lea    rbx,[rsp+0x1c]
   240cc:	lea    r8,[rsp+0x38]
   240d1:	mov    r9,rbx
   240d4:	call   23d30 <make_ref_alilist.isra.0>
   240d9:	test   eax,eax
   240db:	jne    24110 <CompareRefPairAlignments+0x80>
   240dd:	movss  xmm0,DWORD PTR [rip+0x1c437]        # 4051c <defmq.7318+0x35c>
   240e5:	mov    rax,QWORD PTR [rsp+0x48]
   240ea:	xor    rax,QWORD PTR fs:0x28
   240f3:	jne    241e4 <CompareRefPairAlignments+0x154>
   240f9:	add    rsp,0x58
   240fd:	pop    rbx
   240fe:	pop    rbp
   240ff:	pop    r12
   24101:	pop    r13
   24103:	pop    r14
   24105:	pop    r15
   24107:	ret    
   24108:	nop    DWORD PTR [rax+rax*1+0x0]
   24110:	lea    r10,[rsp+0x20]
   24115:	lea    r8,[rsp+0x40]
   2411a:	mov    rcx,r14
   2411d:	mov    rdx,r13
   24120:	mov    r9,r10
   24123:	mov    rsi,r15
   24126:	mov    rdi,rbp
   24129:	mov    QWORD PTR [rsp+0x8],r10
   2412e:	call   23d30 <make_ref_alilist.isra.0>
   24133:	test   eax,eax
   24135:	je     240dd <CompareRefPairAlignments+0x4d>
   24137:	mov    r9,rbx
   2413a:	lea    r8,[rsp+0x28]
   2413f:	mov    rcx,r15
   24142:	mov    rdx,r12
   24145:	mov    rsi,r12
   24148:	mov    rdi,rbp
   2414b:	call   23d30 <make_ref_alilist.isra.0>
   24150:	test   eax,eax
   24152:	je     240dd <CompareRefPairAlignments+0x4d>
   24154:	mov    r10,QWORD PTR [rsp+0x8]
   24159:	lea    r8,[rsp+0x30]
   2415e:	mov    rcx,r12
   24161:	mov    rdx,r15
   24164:	mov    rsi,r15
   24167:	mov    rdi,rbp
   2416a:	mov    r9,r10
   2416d:	call   23d30 <make_ref_alilist.isra.0>
   24172:	test   eax,eax
   24174:	je     240dd <CompareRefPairAlignments+0x4d>
   2417a:	sub    rsp,0x8
   2417e:	lea    rax,[rsp+0x2c]
   24183:	push   rax
   24184:	mov    r9d,DWORD PTR [rsp+0x30]
   24189:	mov    r8d,DWORD PTR [rsp+0x2c]
   2418e:	mov    rcx,QWORD PTR [rsp+0x50]
   24193:	mov    rdx,QWORD PTR [rsp+0x48]
   24198:	mov    rsi,QWORD PTR [rsp+0x40]
   2419d:	mov    rdi,QWORD PTR [rsp+0x38]
   241a2:	call   23b70 <compare_lists>
   241a7:	pop    rdx
   241a8:	pop    rcx
   241a9:	test   eax,eax
   241ab:	je     240dd <CompareRefPairAlignments+0x4d>
   241b1:	mov    rdi,QWORD PTR [rsp+0x28]
   241b6:	call   3460 <free@plt>
   241bb:	mov    rdi,QWORD PTR [rsp+0x30]
   241c0:	call   3460 <free@plt>
   241c5:	mov    rdi,QWORD PTR [rsp+0x38]
   241ca:	call   3460 <free@plt>
   241cf:	mov    rdi,QWORD PTR [rsp+0x40]
   241d4:	call   3460 <free@plt>
   241d9:	movss  xmm0,DWORD PTR [rsp+0x24]
   241df:	jmp    240e5 <CompareRefPairAlignments+0x55>
   241e4:	call   3570 <__stack_chk_fail@plt>
   241e9:	nop    DWORD PTR [rax+0x0]

00000000000241f0 <CompareMultAlignments>:
   241f0:	endbr64 
   241f4:	push   r15
   241f6:	push   r14
   241f8:	push   r13
   241fa:	push   r12
   241fc:	push   rbp
   241fd:	push   rbx
   241fe:	sub    rsp,0x28
   24202:	mov    DWORD PTR [rsp+0x1c],edx
   24206:	test   edx,edx
   24208:	jle    242ed <CompareMultAlignments+0xfd>
   2420e:	lea    r13d,[rdx-0x1]
   24212:	mov    DWORD PTR [rsp+0xc],0x0
   2421a:	mov    r12,rdi
   2421d:	mov    r15,rsi
   24220:	lea    rax,[r13+0x1]
   24224:	mov    DWORD PTR [rsp+0x18],r13d
   24229:	mov    r13d,0x1
   2422f:	mov    QWORD PTR [rsp+0x10],rax
   24234:	cmp    QWORD PTR [rsp+0x10],r13
   24239:	je     242aa <CompareMultAlignments+0xba>
   2423b:	mov    ebp,DWORD PTR [rsp+0x18]
   2423f:	lea    r14,[r13+0x1]
   24243:	mov    rbx,r13
   24246:	sub    ebp,r13d
   24249:	add    rbp,r14
   2424c:	jmp    24265 <CompareMultAlignments+0x75>
   2424e:	xchg   ax,ax
   24250:	addss  xmm0,DWORD PTR [rsp+0xc]
   24256:	add    rbx,0x1
   2425a:	movss  DWORD PTR [rsp+0xc],xmm0
   24260:	cmp    rbp,rbx
   24263:	je     242a0 <CompareMultAlignments+0xb0>
   24265:	mov    rcx,QWORD PTR [r15+rbx*8]
   24269:	mov    rdx,QWORD PTR [r15+r13*8-0x8]
   2426e:	mov    rsi,QWORD PTR [r12+rbx*8]
   24272:	mov    rdi,QWORD PTR [r12+r13*8-0x8]
   24277:	call   23f50 <ComparePairAlignments>
   2427c:	pxor   xmm3,xmm3
   24280:	comiss xmm3,xmm0
   24283:	jbe    24250 <CompareMultAlignments+0x60>
   24285:	movss  xmm0,DWORD PTR [rip+0x1c28f]        # 4051c <defmq.7318+0x35c>
   2428d:	add    rsp,0x28
   24291:	pop    rbx
   24292:	pop    rbp
   24293:	pop    r12
   24295:	pop    r13
   24297:	pop    r14
   24299:	pop    r15
   2429b:	ret    
   2429c:	nop    DWORD PTR [rax+0x0]
   242a0:	mov    r13,r14
   242a3:	cmp    QWORD PTR [rsp+0x10],r13
   242a8:	jne    2423b <CompareMultAlignments+0x4b>
   242aa:	pxor   xmm0,xmm0
   242ae:	cvtss2sd xmm0,DWORD PTR [rsp+0xc]
   242b4:	addsd  xmm0,xmm0
   242b8:	pxor   xmm1,xmm1
   242bc:	cvtsi2ss xmm1,DWORD PTR [rsp+0x1c]
   242c2:	cvtss2sd xmm1,xmm1
   242c6:	movapd xmm2,xmm1
   242ca:	subsd  xmm2,QWORD PTR [rip+0x19b1e]        # 3ddf0 <_IO_stdin_used+0xdf0>
   242d2:	add    rsp,0x28
   242d6:	pop    rbx
   242d7:	pop    rbp
   242d8:	pop    r12
   242da:	pop    r13
   242dc:	mulsd  xmm1,xmm2
   242e0:	pop    r14
   242e2:	pop    r15
   242e4:	divsd  xmm0,xmm1
   242e8:	cvtsd2ss xmm0,xmm0
   242ec:	ret    
   242ed:	pxor   xmm0,xmm0
   242f1:	jmp    242b8 <CompareMultAlignments+0xc8>
   242f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   242fe:	xchg   ax,ax

0000000000024300 <CompareRefMultAlignments>:
   24300:	endbr64 
   24304:	push   r15
   24306:	push   r14
   24308:	push   r13
   2430a:	push   r12
   2430c:	push   rbp
   2430d:	push   rbx
   2430e:	sub    rsp,0x38
   24312:	mov    DWORD PTR [rsp+0x2c],ecx
   24316:	test   ecx,ecx
   24318:	jle    24441 <CompareRefMultAlignments+0x141>
   2431e:	mov    eax,ecx
   24320:	lea    r14,[rdx+0x8]
   24324:	lea    r13,[rsi+0x8]
   24328:	mov    rbx,rdi
   2432b:	sub    eax,0x1
   2432e:	mov    DWORD PTR [rsp+0xc],0x0
   24336:	mov    r15,r14
   24339:	mov    DWORD PTR [rsp+0x28],eax
   2433d:	add    rax,0x1
   24341:	mov    QWORD PTR [rsp+0x18],rax
   24346:	lea    rax,[rdx+0x10]
   2434a:	mov    rdx,QWORD PTR [rsp+0x18]
   2434f:	mov    QWORD PTR [rsp+0x10],0x1
   24358:	mov    QWORD PTR [rsp+0x20],rax
   2435d:	cmp    QWORD PTR [rsp+0x10],rdx
   24362:	je     243fe <CompareRefMultAlignments+0xfe>
   24368:	mov    rdi,QWORD PTR [rsp+0x10]
   2436d:	mov    eax,DWORD PTR [rsp+0x28]
   24371:	mov    r12,r13
   24374:	mov    r14,r15
   24377:	mov    rdx,QWORD PTR [rsp+0x20]
   2437c:	sub    eax,edi
   2437e:	lea    rax,[rdi+rax*1-0x1]
   24383:	lea    rbp,[rdx+rax*8]
   24387:	jmp    243a9 <CompareRefMultAlignments+0xa9>
   24389:	nop    DWORD PTR [rax+0x0]
   24390:	addss  xmm0,DWORD PTR [rsp+0xc]
   24396:	add    r14,0x8
   2439a:	add    r12,0x8
   2439e:	movss  DWORD PTR [rsp+0xc],xmm0
   243a4:	cmp    r14,rbp
   243a7:	je     243e0 <CompareRefMultAlignments+0xe0>
   243a9:	mov    rcx,QWORD PTR [r15-0x8]
   243ad:	mov    rsi,QWORD PTR [r13-0x8]
   243b1:	mov    rdi,rbx
   243b4:	mov    r8,QWORD PTR [r14]
   243b7:	mov    rdx,QWORD PTR [r12]
   243bb:	call   24090 <CompareRefPairAlignments>
   243c0:	pxor   xmm3,xmm3
   243c4:	comiss xmm3,xmm0
   243c7:	jbe    24390 <CompareRefMultAlignments+0x90>
   243c9:	movss  xmm0,DWORD PTR [rip+0x1c14b]        # 4051c <defmq.7318+0x35c>
   243d1:	add    rsp,0x38
   243d5:	pop    rbx
   243d6:	pop    rbp
   243d7:	pop    r12
   243d9:	pop    r13
   243db:	pop    r14
   243dd:	pop    r15
   243df:	ret    
   243e0:	add    QWORD PTR [rsp+0x10],0x1
   243e6:	mov    rdx,QWORD PTR [rsp+0x18]
   243eb:	add    r15,0x8
   243ef:	add    r13,0x8
   243f3:	cmp    QWORD PTR [rsp+0x10],rdx
   243f8:	jne    24368 <CompareRefMultAlignments+0x68>
   243fe:	pxor   xmm0,xmm0
   24402:	cvtss2sd xmm0,DWORD PTR [rsp+0xc]
   24408:	addsd  xmm0,xmm0
   2440c:	pxor   xmm1,xmm1
   24410:	cvtsi2ss xmm1,DWORD PTR [rsp+0x2c]
   24416:	cvtss2sd xmm1,xmm1
   2441a:	movapd xmm2,xmm1
   2441e:	subsd  xmm2,QWORD PTR [rip+0x199ca]        # 3ddf0 <_IO_stdin_used+0xdf0>
   24426:	add    rsp,0x38
   2442a:	pop    rbx
   2442b:	pop    rbp
   2442c:	pop    r12
   2442e:	pop    r13
   24430:	mulsd  xmm1,xmm2
   24434:	pop    r14
   24436:	pop    r15
   24438:	divsd  xmm0,xmm1
   2443c:	cvtsd2ss xmm0,xmm0
   24440:	ret    
   24441:	pxor   xmm0,xmm0
   24445:	jmp    2440c <CompareRefMultAlignments+0x10c>
   24447:	nop    WORD PTR [rax+rax*1+0x0]

0000000000024450 <PairwiseIdentity>:
   24450:	endbr64 
   24454:	movzx  eax,BYTE PTR [rdi]
   24457:	test   al,al
   24459:	je     24521 <PairwiseIdentity+0xd1>
   2445f:	movabs r10,0x8000000000006001
   24469:	push   rbp
   2446a:	xor    r11d,r11d
   2446d:	xor    ebp,ebp
   2446f:	push   rbx
   24470:	xor    edx,edx
   24472:	xor    ebx,ebx
   24474:	jmp    24492 <PairwiseIdentity+0x42>
   24476:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24480:	cmp    r9b,0x7e
   24484:	jne    244ce <PairwiseIdentity+0x7e>
   24486:	add    rdx,0x1
   2448a:	movzx  eax,BYTE PTR [rdi+rdx*1]
   2448e:	test   al,al
   24490:	je     244e0 <PairwiseIdentity+0x90>
   24492:	movzx  r9d,BYTE PTR [rsi+rdx*1]
   24497:	test   r9b,r9b
   2449a:	je     244e0 <PairwiseIdentity+0x90>
   2449c:	lea    ecx,[rax-0x20]
   2449f:	mov    r8d,0x1
   244a5:	cmp    cl,0x3f
   244a8:	ja     244b7 <PairwiseIdentity+0x67>
   244aa:	mov    r8,r10
   244ad:	shr    r8,cl
   244b0:	not    r8
   244b3:	and    r8d,0x1
   244b7:	cmp    al,0x7e
   244b9:	je     244c0 <PairwiseIdentity+0x70>
   244bb:	test   r8b,r8b
   244be:	jne    24510 <PairwiseIdentity+0xc0>
   244c0:	lea    eax,[r9-0x20]
   244c4:	cmp    al,0x3f
   244c6:	ja     24480 <PairwiseIdentity+0x30>
   244c8:	bt     r10,rax
   244cc:	jb     24486 <PairwiseIdentity+0x36>
   244ce:	add    ebp,0x1
   244d1:	add    rdx,0x1
   244d5:	movzx  eax,BYTE PTR [rdi+rdx*1]
   244d9:	test   al,al
   244db:	jne    24492 <PairwiseIdentity+0x42>
   244dd:	nop    DWORD PTR [rax]
   244e0:	cmp    r11d,ebp
   244e3:	pxor   xmm0,xmm0
   244e7:	cmovg  r11d,ebp
   244eb:	test   r11d,r11d
   244ee:	je     24505 <PairwiseIdentity+0xb5>
   244f0:	pxor   xmm0,xmm0
   244f4:	pxor   xmm1,xmm1
   244f8:	cvtsi2ss xmm0,ebx
   244fc:	cvtsi2ss xmm1,r11d
   24501:	divss  xmm0,xmm1
   24505:	pop    rbx
   24506:	pop    rbp
   24507:	ret    
   24508:	nop    DWORD PTR [rax+rax*1+0x0]
   24510:	add    r11d,0x1
   24514:	cmp    r9b,al
   24517:	jne    244c0 <PairwiseIdentity+0x70>
   24519:	add    ebx,0x1
   2451c:	add    ebp,0x1
   2451f:	jmp    244d1 <PairwiseIdentity+0x81>
   24521:	pxor   xmm0,xmm0
   24525:	ret    
   24526:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000024530 <AlignmentIdentityBySampling>:
   24530:	endbr64 
   24534:	cmp    edx,0x1
   24537:	jle    245d9 <AlignmentIdentityBySampling+0xa9>
   2453d:	push   r13
   2453f:	mov    r13d,ecx
   24542:	push   r12
   24544:	push   rbp
   24545:	push   rbx
   24546:	sub    rsp,0x18
   2454a:	test   ecx,ecx
   2454c:	jle    245e2 <AlignmentIdentityBySampling+0xb2>
   24552:	pxor   xmm6,xmm6
   24556:	pxor   xmm5,xmm5
   2455a:	mov    r12,rdi
   2455d:	xor    ebp,ebp
   2455f:	cvtsi2sd xmm6,edx
   24563:	movss  DWORD PTR [rsp+0xc],xmm5
   24569:	movsd  QWORD PTR [rsp],xmm6
   2456e:	xchg   ax,ax
   24570:	call   36060 <sre_random>
   24575:	mulsd  xmm0,QWORD PTR [rsp]
   2457a:	cvttsd2si ebx,xmm0
   2457e:	xchg   ax,ax
   24580:	call   36060 <sre_random>
   24585:	mulsd  xmm0,QWORD PTR [rsp]
   2458a:	cvttsd2si eax,xmm0
   2458e:	cmp    ebx,eax
   24590:	je     24580 <AlignmentIdentityBySampling+0x50>
   24592:	cdqe   
   24594:	movsxd rbx,ebx
   24597:	add    ebp,0x1
   2459a:	mov    rsi,QWORD PTR [r12+rax*8]
   2459e:	mov    rdi,QWORD PTR [r12+rbx*8]
   245a2:	call   24450 <PairwiseIdentity>
   245a7:	addss  xmm0,DWORD PTR [rsp+0xc]
   245ad:	movss  DWORD PTR [rsp+0xc],xmm0
   245b3:	cmp    r13d,ebp
   245b6:	jne    24570 <AlignmentIdentityBySampling+0x40>
   245b8:	pxor   xmm0,xmm0
   245bc:	movss  xmm4,DWORD PTR [rsp+0xc]
   245c2:	add    rsp,0x18
   245c6:	cvtsi2ss xmm0,r13d
   245cb:	pop    rbx
   245cc:	pop    rbp
   245cd:	pop    r12
   245cf:	pop    r13
   245d1:	divss  xmm4,xmm0
   245d5:	movaps xmm0,xmm4
   245d8:	ret    
   245d9:	movss  xmm0,DWORD PTR [rip+0x18dbb]        # 3d39c <_IO_stdin_used+0x39c>
   245e1:	ret    
   245e2:	pxor   xmm7,xmm7
   245e6:	movss  DWORD PTR [rsp+0xc],xmm7
   245ec:	jmp    245b8 <AlignmentIdentityBySampling+0x88>
   245ee:	xchg   ax,ax

00000000000245f0 <MajorityRuleConsensus>:
   245f0:	endbr64 
   245f4:	push   r15
   245f6:	mov    r15d,esi
   245f9:	push   r14
   245fb:	mov    r14,rdi
   245fe:	push   r13
   24600:	push   r12
   24602:	push   rbp
   24603:	push   rbx
   24604:	mov    ebx,edx
   24606:	add    edx,0x1
   24609:	movsxd rdx,edx
   2460c:	sub    rsp,0xb8
   24613:	mov    QWORD PTR [rsp+0x18],rdi
   24618:	lea    rdi,[rip+0x1beee]        # 4050d <defmq.7318+0x34d>
   2461f:	mov    DWORD PTR [rsp+0xc],esi
   24623:	mov    esi,0x1e5
   24628:	mov    rax,QWORD PTR fs:0x28
   24631:	mov    QWORD PTR [rsp+0xa8],rax
   24639:	xor    eax,eax
   2463b:	call   36810 <sre_malloc>
   24640:	mov    QWORD PTR [rsp+0x28],rax
   24645:	test   ebx,ebx
   24647:	jle    247ba <MajorityRuleConsensus+0x1ca>
   2464d:	lea    eax,[rbx-0x1]
   24650:	pxor   xmm3,xmm3
   24654:	mov    DWORD PTR [rsp+0x24],0x0
   2465c:	lea    rbp,[rsp+0x30]
   24661:	cvtsi2ss xmm3,r15d
   24666:	mov    QWORD PTR [rsp+0x10],rax
   2466b:	lea    eax,[r15-0x1]
   2466f:	xor    r15d,r15d
   24672:	lea    rax,[r14+rax*8+0x8]
   24677:	lea    r13,[rsp+0x9c]
   2467f:	mov    QWORD PTR [rsp],rax
   24683:	movss  DWORD PTR [rsp+0x20],xmm3
   24689:	nop    DWORD PTR [rax+0x0]
   24690:	mov    rax,rbp
   24693:	nop    DWORD PTR [rax+rax*1+0x0]
   24698:	mov    DWORD PTR [rax],0x0
   2469e:	add    rax,0x4
   246a2:	cmp    r13,rax
   246a5:	jne    24698 <MajorityRuleConsensus+0xa8>
   246a7:	mov    eax,DWORD PTR [rsp+0xc]
   246ab:	test   eax,eax
   246ad:	jle    24701 <MajorityRuleConsensus+0x111>
   246af:	call   3820 <__ctype_b_loc@plt>
   246b4:	mov    r14,QWORD PTR [rsp+0x18]
   246b9:	mov    r12,QWORD PTR [rax]
   246bc:	jmp    246df <MajorityRuleConsensus+0xef>
   246be:	xchg   ax,ax
   246c0:	call   3440 <__ctype_toupper_loc@plt>
   246c5:	add    r14,0x8
   246c9:	mov    rax,QWORD PTR [rax]
   246cc:	mov    eax,DWORD PTR [rax+rbx*4]
   246cf:	sub    eax,0x41
   246d2:	cdqe   
   246d4:	add    DWORD PTR [rsp+rax*4+0x30],0x1
   246d9:	cmp    QWORD PTR [rsp],r14
   246dd:	je     24701 <MajorityRuleConsensus+0x111>
   246df:	mov    rax,QWORD PTR [r14]
   246e2:	movsx  rbx,BYTE PTR [rax+r15*1]
   246e7:	test   BYTE PTR [r12+rbx*2+0x1],0x4
   246ed:	jne    246c0 <MajorityRuleConsensus+0xd0>
   246ef:	add    DWORD PTR [rsp+0x98],0x1
   246f7:	add    r14,0x8
   246fb:	cmp    QWORD PTR [rsp],r14
   246ff:	jne    246df <MajorityRuleConsensus+0xef>
   24701:	movss  xmm2,DWORD PTR [rip+0x19027]        # 3d730 <_IO_stdin_used+0x730>
   24709:	pxor   xmm0,xmm0
   2470d:	cvtsi2ss xmm0,DWORD PTR [rsp+0x98]
   24716:	divss  xmm0,DWORD PTR [rsp+0x20]
   2471c:	comiss xmm2,xmm0
   2471f:	jae    24734 <MajorityRuleConsensus+0x144>
   24721:	lea    rax,[r15+0x1]
   24725:	cmp    QWORD PTR [rsp+0x10],r15
   2472a:	je     24783 <MajorityRuleConsensus+0x193>
   2472c:	mov    r15,rax
   2472f:	jmp    24690 <MajorityRuleConsensus+0xa0>
   24734:	xor    eax,eax
   24736:	mov    r8d,0xffffffff
   2473c:	mov    edi,0xffffffff
   24741:	nop    DWORD PTR [rax+0x0]
   24748:	mov    edx,DWORD PTR [rbp+rax*4+0x0]
   2474c:	cmp    edx,edi
   2474e:	jle    24755 <MajorityRuleConsensus+0x165>
   24750:	mov    r8d,eax
   24753:	mov    edi,edx
   24755:	add    rax,0x1
   24759:	cmp    rax,0x1a
   2475d:	jne    24748 <MajorityRuleConsensus+0x158>
   2475f:	movsxd rax,DWORD PTR [rsp+0x24]
   24764:	mov    rcx,QWORD PTR [rsp+0x28]
   24769:	add    r8d,0x41
   2476d:	mov    BYTE PTR [rcx+rax*1],r8b
   24771:	lea    eax,[rax+0x1]
   24774:	mov    DWORD PTR [rsp+0x24],eax
   24778:	lea    rax,[r15+0x1]
   2477c:	cmp    QWORD PTR [rsp+0x10],r15
   24781:	jne    2472c <MajorityRuleConsensus+0x13c>
   24783:	movsxd rax,DWORD PTR [rsp+0x24]
   24788:	add    rax,QWORD PTR [rsp+0x28]
   2478d:	mov    BYTE PTR [rax],0x0
   24790:	mov    rax,QWORD PTR [rsp+0xa8]
   24798:	xor    rax,QWORD PTR fs:0x28
   247a1:	jne    247c1 <MajorityRuleConsensus+0x1d1>
   247a3:	mov    rax,QWORD PTR [rsp+0x28]
   247a8:	add    rsp,0xb8
   247af:	pop    rbx
   247b0:	pop    rbp
   247b1:	pop    r12
   247b3:	pop    r13
   247b5:	pop    r14
   247b7:	pop    r15
   247b9:	ret    
   247ba:	mov    rax,QWORD PTR [rsp+0x28]
   247bf:	jmp    2478d <MajorityRuleConsensus+0x19d>
   247c1:	call   3570 <__stack_chk_fail@plt>
   247c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000247d0 <AllocAlignment>:
   247d0:	endbr64 
   247d4:	push   r15
   247d6:	mov    r15d,esi
   247d9:	push   r14
   247db:	push   r13
   247dd:	push   r12
   247df:	push   rbp
   247e0:	movsxd rbp,edi
   247e3:	lea    rdi,[rip+0x1bd36]        # 40520 <defmq.7318+0x360>
   247ea:	push   rbx
   247eb:	mov    rbx,rcx
   247ee:	mov    r14,rbp
   247f1:	sub    rsp,0x38
   247f5:	mov    QWORD PTR [rcx+0x18],0x0
   247fd:	mov    QWORD PTR [rcx+0x20],0x0
   24805:	mov    DWORD PTR [rcx],0x0
   2480b:	mov    QWORD PTR [rcx+0x30],0x0
   24813:	mov    QWORD PTR [rcx+0x38],0x0
   2481b:	mov    QWORD PTR [rcx+0x40],0x0
   24823:	mov    QWORD PTR [rcx+0x48],0x0
   2482b:	mov    QWORD PTR [rcx+0x50],0x0
   24833:	mov    QWORD PTR [rcx+0x58],0x0
   2483b:	mov    QWORD PTR [rcx+0x60],0x0
   24843:	mov    DWORD PTR [rsp+0x24],esi
   24847:	mov    esi,0x32
   2484c:	mov    QWORD PTR [rsp+0x8],rdx
   24851:	lea    rdx,[rbp*8+0x0]
   24859:	call   36810 <sre_malloc>
   2485e:	lea    rcx,[rbp*4+0x0]
   24866:	mov    QWORD PTR [rsp+0x18],rcx
   2486b:	imul   rcx,rbp,0x168
   24872:	mov    QWORD PTR [rsp],rax
   24876:	mov    QWORD PTR [rsp+0x10],rcx
   2487b:	test   ebp,ebp
   2487d:	jle    24960 <AllocAlignment+0x190>
   24883:	lea    ebp,[r15+0x1]
   24887:	mov    rcx,rax
   2488a:	mov    r15,rax
   2488d:	lea    eax,[r14-0x1]
   24891:	movsxd rbp,ebp
   24894:	lea    r12,[rip+0x1bc85]        # 40520 <defmq.7318+0x360>
   2489b:	add    rax,0x1
   2489f:	mov    QWORD PTR [rsp+0x28],rax
   248a4:	lea    r13,[rcx+rax*8]
   248a8:	nop    DWORD PTR [rax+rax*1+0x0]
   248b0:	mov    rdx,rbp
   248b3:	mov    esi,0x34
   248b8:	mov    rdi,r12
   248bb:	add    r15,0x8
   248bf:	call   36810 <sre_malloc>
   248c4:	mov    QWORD PTR [r15-0x8],rax
   248c8:	cmp    r15,r13
   248cb:	jne    248b0 <AllocAlignment+0xe0>
   248cd:	mov    eax,DWORD PTR [rsp+0x24]
   248d1:	mov    DWORD PTR [rbx+0x8],r14d
   248d5:	mov    esi,0x39
   248da:	lea    rdi,[rip+0x1bc3f]        # 40520 <defmq.7318+0x360>
   248e1:	mov    rdx,QWORD PTR [rsp+0x18]
   248e6:	mov    DWORD PTR [rbx+0x4],eax
   248e9:	call   36810 <sre_malloc>
   248ee:	movss  xmm0,DWORD PTR [rip+0x18aa6]        # 3d39c <_IO_stdin_used+0x39c>
   248f6:	mov    esi,r14d
   248f9:	mov    QWORD PTR [rbx+0x10],rax
   248fd:	mov    rdi,rax
   24900:	call   3ad60 <FSet>
   24905:	mov    rdx,QWORD PTR [rsp+0x10]
   2490a:	mov    esi,0x3c
   2490f:	lea    rdi,[rip+0x1bc0a]        # 40520 <defmq.7318+0x360>
   24916:	call   36810 <sre_malloc>
   2491b:	imul   rdx,QWORD PTR [rsp+0x28],0x168
   24924:	mov    QWORD PTR [rbx+0x28],rax
   24928:	add    rdx,rax
   2492b:	nop    DWORD PTR [rax+rax*1+0x0]
   24930:	mov    DWORD PTR [rax],0x0
   24936:	add    rax,0x168
   2493c:	cmp    rdx,rax
   2493f:	jne    24930 <AllocAlignment+0x160>
   24941:	mov    rax,QWORD PTR [rsp+0x8]
   24946:	mov    rcx,QWORD PTR [rsp]
   2494a:	mov    QWORD PTR [rax],rcx
   2494d:	add    rsp,0x38
   24951:	pop    rbx
   24952:	pop    rbp
   24953:	pop    r12
   24955:	pop    r13
   24957:	pop    r14
   24959:	pop    r15
   2495b:	ret    
   2495c:	nop    DWORD PTR [rax+0x0]
   24960:	mov    eax,DWORD PTR [rsp+0x24]
   24964:	mov    DWORD PTR [rbx+0x8],ebp
   24967:	mov    esi,0x39
   2496c:	lea    rdi,[rip+0x1bbad]        # 40520 <defmq.7318+0x360>
   24973:	mov    rdx,QWORD PTR [rsp+0x18]
   24978:	mov    DWORD PTR [rbx+0x4],eax
   2497b:	call   36810 <sre_malloc>
   24980:	movss  xmm0,DWORD PTR [rip+0x18a14]        # 3d39c <_IO_stdin_used+0x39c>
   24988:	mov    esi,ebp
   2498a:	mov    QWORD PTR [rbx+0x10],rax
   2498e:	mov    rdi,rax
   24991:	call   3ad60 <FSet>
   24996:	mov    rdx,QWORD PTR [rsp+0x10]
   2499b:	mov    esi,0x3c
   249a0:	lea    rdi,[rip+0x1bb79]        # 40520 <defmq.7318+0x360>
   249a7:	call   36810 <sre_malloc>
   249ac:	mov    QWORD PTR [rbx+0x28],rax
   249b0:	jmp    24941 <AllocAlignment+0x171>
   249b2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   249bd:	nop    DWORD PTR [rax]

00000000000249c0 <InitAinfo>:
   249c0:	endbr64 
   249c4:	mov    QWORD PTR [rdi+0x18],0x0
   249cc:	mov    QWORD PTR [rdi+0x20],0x0
   249d4:	mov    DWORD PTR [rdi],0x0
   249da:	mov    QWORD PTR [rdi+0x30],0x0
   249e2:	mov    QWORD PTR [rdi+0x38],0x0
   249ea:	mov    QWORD PTR [rdi+0x40],0x0
   249f2:	mov    QWORD PTR [rdi+0x48],0x0
   249fa:	mov    QWORD PTR [rdi+0x50],0x0
   24a02:	mov    QWORD PTR [rdi+0x58],0x0
   24a0a:	mov    QWORD PTR [rdi+0x60],0x0
   24a12:	ret    
   24a13:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   24a1e:	xchg   ax,ax

0000000000024a20 <FreeAlignment>:
   24a20:	endbr64 
   24a24:	push   r13
   24a26:	mov    r13,rdi
   24a29:	push   r12
   24a2b:	push   rbp
   24a2c:	mov    rbp,rsi
   24a2f:	push   rbx
   24a30:	xor    ebx,ebx
   24a32:	sub    rsp,0x8
   24a36:	mov    eax,DWORD PTR [rsi+0x8]
   24a39:	test   eax,eax
   24a3b:	jg     24a4e <FreeAlignment+0x2e>
   24a3d:	jmp    24a92 <FreeAlignment+0x72>
   24a3f:	nop
   24a40:	test   ah,0x4
   24a43:	jne    24a7d <FreeAlignment+0x5d>
   24a45:	add    rbx,0x1
   24a49:	cmp    DWORD PTR [rbp+0x8],ebx
   24a4c:	jle    24a92 <FreeAlignment+0x72>
   24a4e:	imul   r12,rbx,0x168
   24a55:	mov    rdx,QWORD PTR [rbp+0x28]
   24a59:	add    rdx,r12
   24a5c:	mov    eax,DWORD PTR [rdx]
   24a5e:	test   ah,0x2
   24a61:	je     24a40 <FreeAlignment+0x20>
   24a63:	mov    rdi,QWORD PTR [rdx+0x158]
   24a6a:	call   3460 <free@plt>
   24a6f:	mov    rdx,QWORD PTR [rbp+0x28]
   24a73:	add    rdx,r12
   24a76:	mov    eax,DWORD PTR [rdx]
   24a78:	test   ah,0x4
   24a7b:	je     24a45 <FreeAlignment+0x25>
   24a7d:	mov    rdi,QWORD PTR [rdx+0x160]
   24a84:	add    rbx,0x1
   24a88:	call   3460 <free@plt>
   24a8d:	cmp    DWORD PTR [rbp+0x8],ebx
   24a90:	jg     24a4e <FreeAlignment+0x2e>
   24a92:	mov    rdi,QWORD PTR [rbp+0x18]
   24a96:	test   rdi,rdi
   24a99:	je     24aa0 <FreeAlignment+0x80>
   24a9b:	call   3460 <free@plt>
   24aa0:	mov    rdi,QWORD PTR [rbp+0x20]
   24aa4:	test   rdi,rdi
   24aa7:	je     24aae <FreeAlignment+0x8e>
   24aa9:	call   3460 <free@plt>
   24aae:	mov    rdi,QWORD PTR [rbp+0x30]
   24ab2:	test   rdi,rdi
   24ab5:	je     24abc <FreeAlignment+0x9c>
   24ab7:	call   3460 <free@plt>
   24abc:	mov    rdi,QWORD PTR [rbp+0x38]
   24ac0:	test   rdi,rdi
   24ac3:	je     24aca <FreeAlignment+0xaa>
   24ac5:	call   3460 <free@plt>
   24aca:	mov    rdi,QWORD PTR [rbp+0x40]
   24ace:	test   rdi,rdi
   24ad1:	je     24ad8 <FreeAlignment+0xb8>
   24ad3:	call   3460 <free@plt>
   24ad8:	mov    rdi,QWORD PTR [rbp+0x48]
   24adc:	test   rdi,rdi
   24adf:	je     24ae6 <FreeAlignment+0xc6>
   24ae1:	call   3460 <free@plt>
   24ae6:	mov    rdi,QWORD PTR [rbp+0x28]
   24aea:	call   3460 <free@plt>
   24aef:	mov    rdi,QWORD PTR [rbp+0x10]
   24af3:	call   3460 <free@plt>
   24af8:	mov    esi,DWORD PTR [rbp+0x8]
   24afb:	add    rsp,0x8
   24aff:	mov    rdi,r13
   24b02:	pop    rbx
   24b03:	pop    rbp
   24b04:	pop    r12
   24b06:	pop    r13
   24b08:	jmp    368c0 <Free2DArray>
   24b0d:	nop    DWORD PTR [rax]

0000000000024b10 <SAMizeAlignment>:
   24b10:	endbr64 
   24b14:	test   edx,edx
   24b16:	jle    24c5f <SAMizeAlignment+0x14f>
   24b1c:	push   r15
   24b1e:	lea    eax,[rdx-0x1]
   24b21:	push   r14
   24b23:	push   r13
   24b25:	movabs r13,0x8000000000006001
   24b2f:	push   r12
   24b31:	xor    r12d,r12d
   24b34:	push   rbp
   24b35:	push   rbx
   24b36:	sub    rsp,0x28
   24b3a:	mov    QWORD PTR [rsp+0x18],rax
   24b3f:	lea    eax,[rsi-0x1]
   24b42:	lea    rbx,[rdi+rax*8+0x8]
   24b47:	nop    WORD PTR [rax+rax*1+0x0]
   24b50:	mov    DWORD PTR [rsp+0x14],0x0
   24b58:	mov    r14,rdi
   24b5b:	xor    ebp,ebp
   24b5d:	test   esi,esi
   24b5f:	jg     24b84 <SAMizeAlignment+0x74>
   24b61:	jmp    24c39 <SAMizeAlignment+0x129>
   24b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24b70:	test   ah,0x2
   24b73:	mov    eax,0x1
   24b78:	cmovne ebp,eax
   24b7b:	add    r14,0x8
   24b7f:	cmp    rbx,r14
   24b82:	je     24be8 <SAMizeAlignment+0xd8>
   24b84:	mov    rax,QWORD PTR [r14]
   24b87:	movsx  r15,BYTE PTR [rax+r12*1]
   24b8c:	mov    rax,r13
   24b8f:	lea    ecx,[r15-0x20]
   24b93:	shr    rax,cl
   24b96:	and    eax,0x1
   24b99:	cmp    cl,0x40
   24b9c:	mov    ecx,0x0
   24ba1:	cmovae eax,ecx
   24ba4:	cmp    r15b,0x7e
   24ba8:	je     24b7b <SAMizeAlignment+0x6b>
   24baa:	test   al,al
   24bac:	jne    24b7b <SAMizeAlignment+0x6b>
   24bae:	mov    DWORD PTR [rsp+0x10],esi
   24bb2:	mov    QWORD PTR [rsp+0x8],rdi
   24bb7:	call   3820 <__ctype_b_loc@plt>
   24bbc:	mov    rdi,QWORD PTR [rsp+0x8]
   24bc1:	mov    esi,DWORD PTR [rsp+0x10]
   24bc5:	mov    rax,QWORD PTR [rax]
   24bc8:	movzx  eax,WORD PTR [rax+r15*2]
   24bcd:	test   ah,0x1
   24bd0:	je     24b70 <SAMizeAlignment+0x60>
   24bd2:	add    r14,0x8
   24bd6:	mov    DWORD PTR [rsp+0x14],0x1
   24bde:	cmp    rbx,r14
   24be1:	jne    24b84 <SAMizeAlignment+0x74>
   24be3:	nop    DWORD PTR [rax+rax*1+0x0]
   24be8:	mov    eax,DWORD PTR [rsp+0x14]
   24bec:	xor    r10d,r10d
   24bef:	xor    eax,0x1
   24bf2:	and    ebp,eax
   24bf4:	add    ebp,0x2d
   24bf7:	nop    WORD PTR [rax+rax*1+0x0]
   24c00:	mov    r14,QWORD PTR [rdi+r10*8]
   24c04:	mov    rax,r13
   24c07:	add    r14,r12
   24c0a:	movzx  r11d,BYTE PTR [r14]
   24c0e:	lea    ecx,[r11-0x20]
   24c12:	shr    rax,cl
   24c15:	and    eax,0x1
   24c18:	cmp    cl,0x40
   24c1b:	mov    ecx,0x0
   24c20:	cmovae eax,ecx
   24c23:	cmp    r11b,0x7e
   24c27:	je     24c2d <SAMizeAlignment+0x11d>
   24c29:	test   al,al
   24c2b:	je     24c30 <SAMizeAlignment+0x120>
   24c2d:	mov    BYTE PTR [r14],bpl
   24c30:	add    r10,0x1
   24c34:	cmp    esi,r10d
   24c37:	jg     24c00 <SAMizeAlignment+0xf0>
   24c39:	lea    rax,[r12+0x1]
   24c3e:	cmp    QWORD PTR [rsp+0x18],r12
   24c43:	je     24c50 <SAMizeAlignment+0x140>
   24c45:	mov    r12,rax
   24c48:	jmp    24b50 <SAMizeAlignment+0x40>
   24c4d:	nop    DWORD PTR [rax]
   24c50:	add    rsp,0x28
   24c54:	pop    rbx
   24c55:	pop    rbp
   24c56:	pop    r12
   24c58:	pop    r13
   24c5a:	pop    r14
   24c5c:	pop    r15
   24c5e:	ret    
   24c5f:	ret    

0000000000024c60 <SAMizeAlignmentByGapFrac>:
   24c60:	endbr64 
   24c64:	push   r15
   24c66:	push   r14
   24c68:	push   r13
   24c6a:	push   r12
   24c6c:	push   rbp
   24c6d:	push   rbx
   24c6e:	sub    rsp,0x28
   24c72:	movss  DWORD PTR [rsp+0x18],xmm0
   24c78:	test   edx,edx
   24c7a:	jle    24da2 <SAMizeAlignmentByGapFrac+0x142>
   24c80:	pxor   xmm3,xmm3
   24c84:	lea    eax,[rdx-0x1]
   24c87:	mov    rbx,rdi
   24c8a:	mov    ebp,esi
   24c8c:	cvtsi2ss xmm3,esi
   24c90:	mov    QWORD PTR [rsp+0x10],rax
   24c95:	lea    eax,[rsi-0x1]
   24c98:	xor    r13d,r13d
   24c9b:	movabs r14,0x8000000000006001
   24ca5:	lea    r15,[rdi+rax*8+0x8]
   24caa:	movss  DWORD PTR [rsp+0x1c],xmm3
   24cb0:	mov    rdx,rbx
   24cb3:	xor    edi,edi
   24cb5:	test   ebp,ebp
   24cb7:	jle    24d47 <SAMizeAlignmentByGapFrac+0xe7>
   24cbd:	nop    DWORD PTR [rax]
   24cc0:	mov    rax,QWORD PTR [rdx]
   24cc3:	movzx  esi,BYTE PTR [rax+r13*1]
   24cc8:	mov    rax,r14
   24ccb:	lea    ecx,[rsi-0x20]
   24cce:	shr    rax,cl
   24cd1:	and    eax,0x1
   24cd4:	cmp    cl,0x40
   24cd7:	mov    ecx,0x0
   24cdc:	cmovae eax,ecx
   24cdf:	cmp    sil,0x7e
   24ce3:	je     24ce9 <SAMizeAlignmentByGapFrac+0x89>
   24ce5:	test   al,al
   24ce7:	je     24cec <SAMizeAlignmentByGapFrac+0x8c>
   24ce9:	add    edi,0x1
   24cec:	add    rdx,0x8
   24cf0:	cmp    r15,rdx
   24cf3:	jne    24cc0 <SAMizeAlignmentByGapFrac+0x60>
   24cf5:	pxor   xmm0,xmm0
   24cf9:	mov    r12,rbx
   24cfc:	cvtsi2ss xmm0,edi
   24d00:	divss  xmm0,DWORD PTR [rsp+0x1c]
   24d06:	comiss xmm0,DWORD PTR [rsp+0x18]
   24d0b:	jbe    24d60 <SAMizeAlignmentByGapFrac+0x100>
   24d0d:	nop    DWORD PTR [rax]
   24d10:	mov    rdi,QWORD PTR [r12]
   24d14:	mov    rax,r14
   24d17:	add    rdi,r13
   24d1a:	movzx  esi,BYTE PTR [rdi]
   24d1d:	lea    ecx,[rsi-0x20]
   24d20:	shr    rax,cl
   24d23:	and    eax,0x1
   24d26:	cmp    cl,0x40
   24d29:	mov    ecx,0x0
   24d2e:	cmovae eax,ecx
   24d31:	cmp    sil,0x7e
   24d35:	je     24d3b <SAMizeAlignmentByGapFrac+0xdb>
   24d37:	test   al,al
   24d39:	je     24db8 <SAMizeAlignmentByGapFrac+0x158>
   24d3b:	mov    BYTE PTR [rdi],0x2e
   24d3e:	add    r12,0x8
   24d42:	cmp    r15,r12
   24d45:	jne    24d10 <SAMizeAlignmentByGapFrac+0xb0>
   24d47:	lea    rax,[r13+0x1]
   24d4b:	cmp    QWORD PTR [rsp+0x10],r13
   24d50:	je     24da2 <SAMizeAlignmentByGapFrac+0x142>
   24d52:	mov    r13,rax
   24d55:	jmp    24cb0 <SAMizeAlignmentByGapFrac+0x50>
   24d5a:	nop    WORD PTR [rax+rax*1+0x0]
   24d60:	mov    rdi,QWORD PTR [r12]
   24d64:	mov    rax,r14
   24d67:	add    rdi,r13
   24d6a:	movzx  esi,BYTE PTR [rdi]
   24d6d:	lea    ecx,[rsi-0x20]
   24d70:	shr    rax,cl
   24d73:	and    eax,0x1
   24d76:	cmp    cl,0x40
   24d79:	mov    ecx,0x0
   24d7e:	cmovae eax,ecx
   24d81:	cmp    sil,0x7e
   24d85:	je     24d8b <SAMizeAlignmentByGapFrac+0x12b>
   24d87:	test   al,al
   24d89:	je     24de0 <SAMizeAlignmentByGapFrac+0x180>
   24d8b:	mov    BYTE PTR [rdi],0x2d
   24d8e:	add    r12,0x8
   24d92:	cmp    r15,r12
   24d95:	jne    24d60 <SAMizeAlignmentByGapFrac+0x100>
   24d97:	lea    rax,[r13+0x1]
   24d9b:	cmp    QWORD PTR [rsp+0x10],r13
   24da0:	jne    24d52 <SAMizeAlignmentByGapFrac+0xf2>
   24da2:	add    rsp,0x28
   24da6:	pop    rbx
   24da7:	pop    rbp
   24da8:	pop    r12
   24daa:	pop    r13
   24dac:	pop    r14
   24dae:	pop    r15
   24db0:	ret    
   24db1:	nop    DWORD PTR [rax+0x0]
   24db8:	mov    BYTE PTR [rsp+0xf],sil
   24dbd:	mov    QWORD PTR [rsp],rdi
   24dc1:	call   3810 <__ctype_tolower_loc@plt>
   24dc6:	movsx  rsi,BYTE PTR [rsp+0xf]
   24dcc:	mov    rdi,QWORD PTR [rsp]
   24dd0:	mov    rax,QWORD PTR [rax]
   24dd3:	mov    eax,DWORD PTR [rax+rsi*4]
   24dd6:	mov    BYTE PTR [rdi],al
   24dd8:	jmp    24d3e <SAMizeAlignmentByGapFrac+0xde>
   24ddd:	nop    DWORD PTR [rax]
   24de0:	mov    BYTE PTR [rsp+0xf],sil
   24de5:	mov    QWORD PTR [rsp],rdi
   24de9:	call   3440 <__ctype_toupper_loc@plt>
   24dee:	movsx  rsi,BYTE PTR [rsp+0xf]
   24df4:	mov    rdi,QWORD PTR [rsp]
   24df8:	mov    rax,QWORD PTR [rax]
   24dfb:	mov    eax,DWORD PTR [rax+rsi*4]
   24dfe:	mov    BYTE PTR [rdi],al
   24e00:	jmp    24d8e <SAMizeAlignmentByGapFrac+0x12e>
   24e02:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   24e0d:	nop    DWORD PTR [rax]

0000000000024e10 <MakeAlignedString>:
   24e10:	endbr64 
   24e14:	push   r15
   24e16:	push   r14
   24e18:	mov    r14,rdx
   24e1b:	push   r13
   24e1d:	movsxd r13,esi
   24e20:	mov    esi,0xf2
   24e25:	push   r12
   24e27:	lea    edx,[r13+0x1]
   24e2b:	mov    r12,rdi
   24e2e:	lea    rdi,[rip+0x1b6eb]        # 40520 <defmq.7318+0x360>
   24e35:	push   rbp
   24e36:	movsxd rdx,edx
   24e39:	push   rbx
   24e3a:	mov    rbx,rcx
   24e3d:	sub    rsp,0x8
   24e41:	call   36810 <sre_malloc>
   24e46:	mov    rbp,rax
   24e49:	test   r13d,r13d
   24e4c:	jle    24f28 <MakeAlignedString+0x118>
   24e52:	lea    r8d,[r13-0x1]
   24e56:	xor    eax,eax
   24e58:	xor    r10d,r10d
   24e5b:	xor    edi,edi
   24e5d:	movabs r9,0x8000000000006001
   24e67:	jmp    24e81 <MakeAlignedString+0x71>
   24e69:	nop    DWORD PTR [rax+0x0]
   24e70:	mov    BYTE PTR [rbp+rax*1+0x0],0x2e
   24e75:	lea    rdx,[rax+0x1]
   24e79:	cmp    r8,rax
   24e7c:	je     24ed0 <MakeAlignedString+0xc0>
   24e7e:	mov    rax,rdx
   24e81:	movzx  esi,BYTE PTR [r12+rax*1]
   24e86:	mov    edx,0x1
   24e8b:	lea    ecx,[rsi-0x20]
   24e8e:	cmp    cl,0x3f
   24e91:	ja     24e9f <MakeAlignedString+0x8f>
   24e93:	mov    rdx,r9
   24e96:	shr    rdx,cl
   24e99:	not    rdx
   24e9c:	and    edx,0x1
   24e9f:	mov    r15,rdi
   24ea2:	cmp    sil,0x7e
   24ea6:	je     24e70 <MakeAlignedString+0x60>
   24ea8:	test   dl,dl
   24eaa:	je     24e70 <MakeAlignedString+0x60>
   24eac:	movzx  edx,BYTE PTR [r14+rdi*1]
   24eb1:	add    r10d,0x1
   24eb5:	movsxd rdi,r10d
   24eb8:	mov    BYTE PTR [rbp+rax*1+0x0],dl
   24ebc:	mov    r15,rdi
   24ebf:	lea    rdx,[rax+0x1]
   24ec3:	cmp    r8,rax
   24ec6:	jne    24e7e <MakeAlignedString+0x6e>
   24ec8:	nop    DWORD PTR [rax+rax*1+0x0]
   24ed0:	add    r13,rbp
   24ed3:	mov    BYTE PTR [r13+0x0],0x0
   24ed8:	mov    rdi,r14
   24edb:	call   3560 <strlen@plt>
   24ee0:	cmp    rax,r15
   24ee3:	jne    24f00 <MakeAlignedString+0xf0>
   24ee5:	mov    QWORD PTR [rbx],rbp
   24ee8:	add    rsp,0x8
   24eec:	mov    eax,0x1
   24ef1:	pop    rbx
   24ef2:	pop    rbp
   24ef3:	pop    r12
   24ef5:	pop    r13
   24ef7:	pop    r14
   24ef9:	pop    r15
   24efb:	ret    
   24efc:	nop    DWORD PTR [rax+0x0]
   24f00:	mov    DWORD PTR [rip+0x3d466],0x6        # 62370 <squid_errno>
   24f0a:	mov    rdi,rbp
   24f0d:	call   3460 <free@plt>
   24f12:	add    rsp,0x8
   24f16:	xor    eax,eax
   24f18:	pop    rbx
   24f19:	pop    rbp
   24f1a:	pop    r12
   24f1c:	pop    r13
   24f1e:	pop    r14
   24f20:	pop    r15
   24f22:	ret    
   24f23:	nop    DWORD PTR [rax+rax*1+0x0]
   24f28:	mov    r13,rax
   24f2b:	xor    r15d,r15d
   24f2e:	jmp    24ed3 <MakeAlignedString+0xc3>

0000000000024f30 <MakeDealignedString>:
   24f30:	endbr64 
   24f34:	push   r14
   24f36:	mov    r14,rdx
   24f39:	push   r13
   24f3b:	movsxd r13,esi
   24f3e:	mov    esi,0x118
   24f43:	push   r12
   24f45:	lea    edx,[r13+0x1]
   24f49:	mov    r12,rdi
   24f4c:	lea    rdi,[rip+0x1b5cd]        # 40520 <defmq.7318+0x360>
   24f53:	push   rbp
   24f54:	movsxd rdx,edx
   24f57:	push   rbx
   24f58:	mov    rbx,rcx
   24f5b:	call   36810 <sre_malloc>
   24f60:	mov    rbp,rax
   24f63:	test   r13d,r13d
   24f66:	jle    25028 <MakeDealignedString+0xf8>
   24f6c:	lea    r8d,[r13-0x1]
   24f70:	xor    eax,eax
   24f72:	xor    r10d,r10d
   24f75:	xor    edi,edi
   24f77:	movabs r9,0x8000000000006001
   24f81:	jmp    24f94 <MakeDealignedString+0x64>
   24f83:	nop    DWORD PTR [rax+rax*1+0x0]
   24f88:	lea    rdx,[rax+0x1]
   24f8c:	cmp    r8,rax
   24f8f:	je     24fe0 <MakeDealignedString+0xb0>
   24f91:	mov    rax,rdx
   24f94:	movzx  esi,BYTE PTR [r12+rax*1]
   24f99:	mov    edx,0x1
   24f9e:	lea    ecx,[rsi-0x20]
   24fa1:	cmp    cl,0x3f
   24fa4:	ja     24fb2 <MakeDealignedString+0x82>
   24fa6:	mov    rdx,r9
   24fa9:	shr    rdx,cl
   24fac:	not    rdx
   24faf:	and    edx,0x1
   24fb2:	lea    rcx,[rbp+rdi*1+0x0]
   24fb7:	cmp    sil,0x7e
   24fbb:	je     24f88 <MakeDealignedString+0x58>
   24fbd:	test   dl,dl
   24fbf:	je     24f88 <MakeDealignedString+0x58>
   24fc1:	movzx  edx,BYTE PTR [r14+rax*1]
   24fc6:	add    r10d,0x1
   24fca:	movsxd rdi,r10d
   24fcd:	mov    BYTE PTR [rcx],dl
   24fcf:	lea    rcx,[rbp+rdi*1+0x0]
   24fd4:	lea    rdx,[rax+0x1]
   24fd8:	cmp    r8,rax
   24fdb:	jne    24f91 <MakeDealignedString+0x61>
   24fdd:	nop    DWORD PTR [rax]
   24fe0:	mov    BYTE PTR [rcx],0x0
   24fe3:	mov    rdi,r14
   24fe6:	call   3560 <strlen@plt>
   24feb:	cmp    r13,rax
   24fee:	jne    25008 <MakeDealignedString+0xd8>
   24ff0:	mov    QWORD PTR [rbx],rbp
   24ff3:	mov    eax,0x1
   24ff8:	pop    rbx
   24ff9:	pop    rbp
   24ffa:	pop    r12
   24ffc:	pop    r13
   24ffe:	pop    r14
   25000:	ret    
   25001:	nop    DWORD PTR [rax+0x0]
   25008:	mov    DWORD PTR [rip+0x3d35e],0x6        # 62370 <squid_errno>
   25012:	mov    rdi,rbp
   25015:	call   3460 <free@plt>
   2501a:	pop    rbx
   2501b:	xor    eax,eax
   2501d:	pop    rbp
   2501e:	pop    r12
   25020:	pop    r13
   25022:	pop    r14
   25024:	ret    
   25025:	nop    DWORD PTR [rax]
   25028:	mov    rcx,rax
   2502b:	jmp    24fe0 <MakeDealignedString+0xb0>
   2502d:	nop    DWORD PTR [rax]

0000000000025030 <DealignedLength>:
   25030:	endbr64 
   25034:	movzx  eax,BYTE PTR [rdi]
   25037:	xor    r8d,r8d
   2503a:	test   al,al
   2503c:	je     25080 <DealignedLength+0x50>
   2503e:	movabs rsi,0x8000000000006001
   25048:	nop    DWORD PTR [rax+rax*1+0x0]
   25050:	lea    ecx,[rax-0x20]
   25053:	mov    edx,0x1
   25058:	cmp    cl,0x3f
   2505b:	ja     25069 <DealignedLength+0x39>
   2505d:	mov    rdx,rsi
   25060:	shr    rdx,cl
   25063:	not    rdx
   25066:	and    edx,0x1
   25069:	cmp    al,0x7e
   2506b:	je     25074 <DealignedLength+0x44>
   2506d:	cmp    dl,0x1
   25070:	sbb    r8d,0xffffffff
   25074:	movzx  eax,BYTE PTR [rdi+0x1]
   25078:	add    rdi,0x1
   2507c:	test   al,al
   2507e:	jne    25050 <DealignedLength+0x20>
   25080:	mov    eax,r8d
   25083:	ret    
   25084:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2508f:	nop

0000000000025090 <WritePairwiseAlignment>:
   25090:	endbr64 
   25094:	push   r15
   25096:	push   r14
   25098:	mov    r14,rdi
   2509b:	push   r13
   2509d:	push   r12
   2509f:	movabs r12,0x8000000000006001
   250a9:	push   rbp
   250aa:	mov    rbp,r9
   250ad:	push   rbx
   250ae:	sub    rsp,0x138
   250b5:	mov    rax,QWORD PTR [rsp+0x178]
   250bd:	mov    DWORD PTR [rsp+0x4],ecx
   250c1:	lea    r15,[rsp+0xa0]
   250c9:	lea    r13,[rsp+0xe0]
   250d1:	mov    QWORD PTR [rsp+0x10],r8
   250d6:	mov    QWORD PTR [rsp+0x8],rsi
   250db:	mov    rsi,rdx
   250de:	mov    edx,0xa
   250e3:	mov    QWORD PTR [rsp+0x38],rax
   250e8:	mov    rax,QWORD PTR fs:0x28
   250f1:	mov    QWORD PTR [rsp+0x128],rax
   250f9:	xor    eax,eax
   250fb:	lea    rax,[rsp+0x4a]
   25100:	mov    rbx,rax
   25103:	mov    rdi,rax
   25106:	mov    QWORD PTR [rsp+0x20],rax
   2510b:	call   34b0 <strncpy@plt>
   25110:	mov    rdi,rbx
   25113:	mov    BYTE PTR [rsp+0x54],0x0
   25118:	lea    rsi,[rip+0x1cbad]        # 41ccc <CSWTCH.18+0x60c>
   2511f:	call   3770 <strtok@plt>
   25124:	lea    rax,[rsp+0x55]
   25129:	mov    rsi,rbp
   2512c:	mov    edx,0xa
   25131:	mov    rbx,rax
   25134:	mov    rdi,rax
   25137:	mov    QWORD PTR [rsp+0x28],rax
   2513c:	lea    rbp,[rsp+0x60]
   25141:	call   34b0 <strncpy@plt>
   25146:	lea    rsi,[rip+0x1cb7f]        # 41ccc <CSWTCH.18+0x60c>
   2514d:	mov    rdi,rbx
   25150:	mov    BYTE PTR [rsp+0x5f],0x0
   25155:	call   3770 <strtok@plt>
   2515a:	lea    rax,[rsp+0x61]
   2515f:	mov    QWORD PTR [rsp+0x30],rax
   25164:	mov    rax,rbp
   25167:	mov    rbp,r15
   2516a:	mov    r15,rax
   2516d:	nop    DWORD PTR [rax]
   25170:	mov    rsi,QWORD PTR [rsp+0x8]
   25175:	mov    edx,0x3c
   2517a:	mov    rdi,r15
   2517d:	call   34b0 <strncpy@plt>
   25182:	mov    rsi,QWORD PTR [rsp+0x10]
   25187:	mov    rdi,r13
   2518a:	mov    edx,0x3c
   2518f:	mov    BYTE PTR [rsp+0x9c],0x0
   25197:	call   34b0 <strncpy@plt>
   2519c:	mov    BYTE PTR [rsp+0x11c],0x0
   251a4:	mov    rdi,r15
   251a7:	mov    edx,DWORD PTR [rdi]
   251a9:	add    rdi,0x4
   251ad:	lea    eax,[rdx-0x1010101]
   251b3:	not    edx
   251b5:	and    eax,edx
   251b7:	and    eax,0x80808080
   251bc:	je     251a7 <WritePairwiseAlignment+0x117>
   251be:	mov    edx,eax
   251c0:	shr    edx,0x10
   251c3:	test   eax,0x8080
   251c8:	cmove  eax,edx
   251cb:	lea    rdx,[rdi+0x2]
   251cf:	cmove  rdi,rdx
   251d3:	mov    rdx,r13
   251d6:	mov    ebx,eax
   251d8:	add    bl,al
   251da:	sbb    rdi,0x3
   251de:	sub    rdi,r15
   251e1:	movsxd rsi,edi
   251e4:	mov    ecx,DWORD PTR [rdx]
   251e6:	add    rdx,0x4
   251ea:	lea    eax,[rcx-0x1010101]
   251f0:	not    ecx
   251f2:	and    eax,ecx
   251f4:	and    eax,0x80808080
   251f9:	je     251e4 <WritePairwiseAlignment+0x154>
   251fb:	mov    ecx,eax
   251fd:	shr    ecx,0x10
   25200:	test   eax,0x8080
   25205:	cmove  eax,ecx
   25208:	lea    rcx,[rdx+0x2]
   2520c:	cmove  rdx,rcx
   25210:	mov    ebx,eax
   25212:	add    bl,al
   25214:	sbb    rdx,0x3
   25218:	sub    rdx,r13
   2521b:	movsxd r9,edx
   2521e:	cmp    rdi,0x3c
   25222:	je     254a0 <WritePairwiseAlignment+0x410>
   25228:	xor    r10d,r10d
   2522b:	cmp    rdx,0x3c
   2522f:	jne    25241 <WritePairwiseAlignment+0x1b1>
   25231:	mov    rax,QWORD PTR [rsp+0x10]
   25236:	xor    r10d,r10d
   25239:	cmp    BYTE PTR [rax+0x3c],0x0
   2523d:	setne  r10b
   25241:	add    QWORD PTR [rsp+0x8],rdi
   25246:	add    QWORD PTR [rsp+0x10],rdx
   2524b:	cmp    r9d,esi
   2524e:	cmovg  r9,rsi
   25252:	test   r9d,r9d
   25255:	je     25308 <WritePairwiseAlignment+0x278>
   2525b:	lea    r11d,[r9-0x1]
   2525f:	xor    eax,eax
   25261:	jmp    2527d <WritePairwiseAlignment+0x1ed>
   25263:	nop    DWORD PTR [rax+rax*1+0x0]
   25268:	mov    BYTE PTR [rbp+rax*1+0x0],0x20
   2526d:	lea    rcx,[rax+0x1]
   25271:	cmp    r11,rax
   25274:	je     25308 <WritePairwiseAlignment+0x278>
   2527a:	mov    rax,rcx
   2527d:	movsx  r8,BYTE PTR [r15+rax*1]
   25282:	mov    esi,0x1
   25287:	lea    ecx,[r8-0x20]
   2528b:	cmp    cl,0x3f
   2528e:	ja     2529c <WritePairwiseAlignment+0x20c>
   25290:	mov    rsi,r12
   25293:	shr    rsi,cl
   25296:	not    rsi
   25299:	and    esi,0x1
   2529c:	cmp    r8b,0x7e
   252a0:	setne  cl
   252a3:	and    sil,cl
   252a6:	je     25268 <WritePairwiseAlignment+0x1d8>
   252a8:	movsx  rbx,BYTE PTR [r13+rax*1+0x0]
   252ae:	lea    ecx,[rbx-0x20]
   252b1:	cmp    cl,0x3f
   252b4:	ja     252c2 <WritePairwiseAlignment+0x232>
   252b6:	mov    rsi,r12
   252b9:	shr    rsi,cl
   252bc:	not    rsi
   252bf:	and    esi,0x1
   252c2:	cmp    bl,0x7e
   252c5:	je     25268 <WritePairwiseAlignment+0x1d8>
   252c7:	test   sil,sil
   252ca:	je     25268 <WritePairwiseAlignment+0x1d8>
   252cc:	cmp    r8b,bl
   252cf:	je     2552a <WritePairwiseAlignment+0x49a>
   252d5:	mov    rcx,QWORD PTR [rsp+0x38]
   252da:	mov    rcx,QWORD PTR [rcx+r8*8-0x208]
   252e2:	mov    ecx,DWORD PTR [rcx+rbx*4-0x104]
   252e9:	test   ecx,ecx
   252eb:	jle    25268 <WritePairwiseAlignment+0x1d8>
   252f1:	mov    BYTE PTR [rbp+rax*1+0x0],0x2b
   252f6:	lea    rcx,[rax+0x1]
   252fa:	cmp    r11,rax
   252fd:	jne    2527a <WritePairwiseAlignment+0x1ea>
   25303:	nop    DWORD PTR [rax+rax*1+0x0]
   25308:	mov    BYTE PTR [rsp+r9*1+0xa0],0x0
   25311:	test   rdi,rdi
   25314:	je     25520 <WritePairwiseAlignment+0x490>
   2531a:	lea    r8d,[rdi-0x1]
   2531e:	mov    rax,r15
   25321:	add    r8,QWORD PTR [rsp+0x30]
   25326:	xor    r11d,r11d
   25329:	nop    DWORD PTR [rax+0x0]
   25330:	movzx  edi,BYTE PTR [rax]
   25333:	mov    esi,0x1
   25338:	lea    ecx,[rdi-0x20]
   2533b:	cmp    cl,0x3f
   2533e:	ja     2534c <WritePairwiseAlignment+0x2bc>
   25340:	mov    rsi,r12
   25343:	shr    rsi,cl
   25346:	not    rsi
   25349:	and    esi,0x1
   2534c:	cmp    dil,0x7e
   25350:	je     2535a <WritePairwiseAlignment+0x2ca>
   25352:	cmp    sil,0x1
   25356:	sbb    r11d,0xffffffff
   2535a:	add    rax,0x1
   2535e:	cmp    rax,r8
   25361:	jne    25330 <WritePairwiseAlignment+0x2a0>
   25363:	add    r11d,DWORD PTR [rsp+0x4]
   25368:	test   rdx,rdx
   2536b:	je     25510 <WritePairwiseAlignment+0x480>
   25371:	sub    edx,0x1
   25374:	mov    rax,r13
   25377:	xor    ebx,ebx
   25379:	lea    rdi,[rsp+rdx*1+0xe1]
   25381:	nop    DWORD PTR [rax+0x0]
   25388:	movzx  esi,BYTE PTR [rax]
   2538b:	mov    edx,0x1
   25390:	lea    ecx,[rsi-0x20]
   25393:	cmp    cl,0x3f
   25396:	ja     253a4 <WritePairwiseAlignment+0x314>
   25398:	mov    rdx,r12
   2539b:	shr    rdx,cl
   2539e:	not    rdx
   253a1:	and    edx,0x1
   253a4:	cmp    sil,0x7e
   253a8:	je     253b0 <WritePairwiseAlignment+0x320>
   253aa:	cmp    dl,0x1
   253ad:	sbb    ebx,0xffffffff
   253b0:	add    rax,0x1
   253b4:	cmp    rdi,rax
   253b7:	jne    25388 <WritePairwiseAlignment+0x2f8>
   253b9:	add    ebx,DWORD PTR [rsp+0x170]
   253c0:	mov    DWORD PTR [rsp+0x1c],r10d
   253c5:	lea    eax,[r11-0x1]
   253c9:	sub    rsp,0x8
   253cd:	mov    rdi,r14
   253d0:	mov    DWORD PTR [rsp+0x20],r11d
   253d5:	lea    r8,[rip+0x1c054]        # 41430 <gki_primes+0x9b0>
   253dc:	mov    esi,0x1
   253e1:	lea    rdx,[rip+0x1b142]        # 4052a <defmq.7318+0x36a>
   253e8:	push   rax
   253e9:	push   r15
   253eb:	mov    eax,DWORD PTR [rsp+0x1c]
   253ef:	push   rax
   253f0:	mov    r9,QWORD PTR [rsp+0x40]
   253f5:	xor    eax,eax
   253f7:	mov    ecx,DWORD PTR [rsp+0x1a0]
   253fe:	call   37c0 <__fprintf_chk@plt>
   25403:	add    rsp,0x20
   25407:	mov    r9,rbp
   2540a:	mov    rdi,r14
   2540d:	mov    ecx,DWORD PTR [rsp+0x180]
   25414:	lea    r8,[rip+0x1c015]        # 41430 <gki_primes+0x9b0>
   2541b:	lea    rdx,[rip+0x1b120]        # 40542 <defmq.7318+0x382>
   25422:	xor    eax,eax
   25424:	mov    esi,0x1
   25429:	call   37c0 <__fprintf_chk@plt>
   2542e:	sub    rsp,0x8
   25432:	lea    eax,[rbx-0x1]
   25435:	mov    rdi,r14
   25438:	push   rax
   25439:	lea    r8,[rip+0x1bff0]        # 41430 <gki_primes+0x9b0>
   25440:	mov    esi,0x1
   25445:	lea    rdx,[rip+0x1b0de]        # 4052a <defmq.7318+0x36a>
   2544c:	push   r13
   2544e:	mov    eax,DWORD PTR [rsp+0x188]
   25455:	push   rax
   25456:	mov    r9,QWORD PTR [rsp+0x48]
   2545b:	xor    eax,eax
   2545d:	mov    ecx,DWORD PTR [rsp+0x1a0]
   25464:	call   37c0 <__fprintf_chk@plt>
   25469:	add    rsp,0x20
   2546d:	mov    rsi,r14
   25470:	mov    edi,0xa
   25475:	call   3600 <fputc@plt>
   2547a:	mov    r10d,DWORD PTR [rsp+0x1c]
   2547f:	mov    r11d,DWORD PTR [rsp+0x18]
   25484:	test   r10d,r10d
   25487:	je     254e0 <WritePairwiseAlignment+0x450>
   25489:	mov    DWORD PTR [rsp+0x170],ebx
   25490:	mov    DWORD PTR [rsp+0x4],r11d
   25495:	jmp    25170 <WritePairwiseAlignment+0xe0>
   2549a:	nop    WORD PTR [rax+rax*1+0x0]
   254a0:	mov    rax,QWORD PTR [rsp+0x8]
   254a5:	cmp    BYTE PTR [rax+0x3c],0x0
   254a9:	je     25228 <WritePairwiseAlignment+0x198>
   254af:	add    QWORD PTR [rsp+0x8],0x3c
   254b5:	mov    r10d,0x1
   254bb:	add    QWORD PTR [rsp+0x10],rdx
   254c0:	test   r9d,r9d
   254c3:	jne    2525b <WritePairwiseAlignment+0x1cb>
   254c9:	mov    BYTE PTR [rsp+0xa0],0x0
   254d1:	jmp    2531a <WritePairwiseAlignment+0x28a>
   254d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   254e0:	mov    rax,QWORD PTR [rsp+0x128]
   254e8:	xor    rax,QWORD PTR fs:0x28
   254f1:	jne    25534 <WritePairwiseAlignment+0x4a4>
   254f3:	add    rsp,0x138
   254fa:	mov    eax,0x1
   254ff:	pop    rbx
   25500:	pop    rbp
   25501:	pop    r12
   25503:	pop    r13
   25505:	pop    r14
   25507:	pop    r15
   25509:	ret    
   2550a:	nop    WORD PTR [rax+rax*1+0x0]
   25510:	mov    ebx,DWORD PTR [rsp+0x170]
   25517:	jmp    253c0 <WritePairwiseAlignment+0x330>
   2551c:	nop    DWORD PTR [rax+0x0]
   25520:	mov    r11d,DWORD PTR [rsp+0x4]
   25525:	jmp    25368 <WritePairwiseAlignment+0x2d8>
   2552a:	mov    BYTE PTR [rbp+rax*1+0x0],r8b
   2552f:	jmp    2526d <WritePairwiseAlignment+0x1dd>
   25534:	call   3570 <__stack_chk_fail@plt>
   25539:	nop    DWORD PTR [rax+0x0]

0000000000025540 <MingapAlignment>:
   25540:	endbr64 
   25544:	movabs r11,0x8000000000006001
   2554e:	push   r12
   25550:	mov    r12,QWORD PTR [rdi]
   25553:	xor    r9d,r9d
   25556:	push   rbp
   25557:	mov    ebp,DWORD PTR [rsi+0x8]
   2555a:	push   rbx
   2555b:	xor    ebx,ebx
   2555d:	cmp    BYTE PTR [r12],0x0
   25562:	je     255d4 <MingapAlignment+0x94>
   25564:	nop    DWORD PTR [rax+0x0]
   25568:	xor    edx,edx
   2556a:	test   ebp,ebp
   2556c:	jle    255bd <MingapAlignment+0x7d>
   2556e:	lea    r10d,[rbp-0x1]
   25572:	mov    eax,0x1
   25577:	add    r10,0x2
   2557b:	nop    DWORD PTR [rax+rax*1+0x0]
   25580:	mov    rdx,QWORD PTR [rdi+rax*8-0x8]
   25585:	movzx  r8d,BYTE PTR [rdx+r9*1]
   2558a:	mov    edx,0x1
   2558f:	lea    ecx,[r8-0x20]
   25593:	cmp    cl,0x3f
   25596:	ja     255a4 <MingapAlignment+0x64>
   25598:	mov    rdx,r11
   2559b:	shr    rdx,cl
   2559e:	not    rdx
   255a1:	and    edx,0x1
   255a4:	cmp    r8b,0x7e
   255a8:	je     255b2 <MingapAlignment+0x72>
   255aa:	test   dl,dl
   255ac:	jne    25680 <MingapAlignment+0x140>
   255b2:	mov    edx,eax
   255b4:	add    rax,0x1
   255b8:	cmp    r10,rax
   255bb:	jne    25580 <MingapAlignment+0x40>
   255bd:	cmp    edx,ebp
   255bf:	je     255c9 <MingapAlignment+0x89>
   255c1:	cmp    ebx,r9d
   255c4:	jne    25620 <MingapAlignment+0xe0>
   255c6:	add    ebx,0x1
   255c9:	add    r9,0x1
   255cd:	cmp    BYTE PTR [r12+r9*1],0x0
   255d2:	jne    25568 <MingapAlignment+0x28>
   255d4:	movsxd rcx,ebx
   255d7:	xor    eax,eax
   255d9:	test   ebp,ebp
   255db:	jle    255f1 <MingapAlignment+0xb1>
   255dd:	nop    DWORD PTR [rax]
   255e0:	mov    rdx,QWORD PTR [rdi+rax*8]
   255e4:	add    rax,0x1
   255e8:	mov    BYTE PTR [rdx+rcx*1],0x0
   255ec:	cmp    DWORD PTR [rsi+0x8],eax
   255ef:	jg     255e0 <MingapAlignment+0xa0>
   255f1:	mov    rax,QWORD PTR [rsi+0x18]
   255f5:	mov    DWORD PTR [rsi+0x4],ebx
   255f8:	test   rax,rax
   255fb:	je     25604 <MingapAlignment+0xc4>
   255fd:	movsxd rdx,ebx
   25600:	mov    BYTE PTR [rax+rdx*1],0x0
   25604:	mov    rax,QWORD PTR [rsi+0x20]
   25608:	test   rax,rax
   2560b:	je     25614 <MingapAlignment+0xd4>
   2560d:	movsxd rbx,ebx
   25610:	mov    BYTE PTR [rax+rbx*1],0x0
   25614:	pop    rbx
   25615:	mov    eax,0x1
   2561a:	pop    rbp
   2561b:	pop    r12
   2561d:	ret    
   2561e:	xchg   ax,ax
   25620:	test   ebp,ebp
   25622:	jle    25646 <MingapAlignment+0x106>
   25624:	movsxd r8,ebx
   25627:	xor    eax,eax
   25629:	nop    DWORD PTR [rax+0x0]
   25630:	mov    rdx,QWORD PTR [rdi+rax*8]
   25634:	add    rax,0x1
   25638:	movzx  ecx,BYTE PTR [rdx+r9*1]
   2563d:	mov    BYTE PTR [rdx+r8*1],cl
   25641:	cmp    DWORD PTR [rsi+0x8],eax
   25644:	jg     25630 <MingapAlignment+0xf0>
   25646:	mov    rax,QWORD PTR [rsi+0x18]
   2564a:	test   rax,rax
   2564d:	je     2565a <MingapAlignment+0x11a>
   2564f:	movzx  ecx,BYTE PTR [rax+r9*1]
   25654:	movsxd rdx,ebx
   25657:	mov    BYTE PTR [rax+rdx*1],cl
   2565a:	mov    rax,QWORD PTR [rsi+0x20]
   2565e:	test   rax,rax
   25661:	je     2566e <MingapAlignment+0x12e>
   25663:	movzx  ecx,BYTE PTR [rax+r9*1]
   25668:	movsxd rdx,ebx
   2566b:	mov    BYTE PTR [rax+rdx*1],cl
   2566e:	mov    ebp,DWORD PTR [rsi+0x8]
   25671:	mov    r12,QWORD PTR [rdi]
   25674:	jmp    255c6 <MingapAlignment+0x86>
   25679:	nop    DWORD PTR [rax+0x0]
   25680:	cmp    ebx,r9d
   25683:	je     255c6 <MingapAlignment+0x86>
   25689:	jmp    25624 <MingapAlignment+0xe4>
   2568b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000025690 <RandomAlignment>:
   25690:	endbr64 
   25694:	push   r15
   25696:	movsxd rax,edx
   25699:	mov    r15,rdi
   2569c:	lea    rdi,[rip+0x1ae7d]        # 40520 <defmq.7318+0x360>
   256a3:	push   r14
   256a5:	lea    rdx,[rax*4+0x0]
   256ad:	push   r13
   256af:	push   r12
   256b1:	push   rbp
   256b2:	push   rbx
   256b3:	mov    rbx,rax
   256b6:	sub    rsp,0x88
   256bd:	mov    QWORD PTR [rsp+0x68],rsi
   256c2:	mov    esi,0x212
   256c7:	mov    DWORD PTR [rsp+0x2c],eax
   256cb:	mov    QWORD PTR [rsp+0x70],rcx
   256d0:	mov    QWORD PTR [rsp+0x60],r8
   256d5:	mov    QWORD PTR [rsp+0x38],rax
   256da:	movss  DWORD PTR [rsp+0x8],xmm0
   256e0:	movss  DWORD PTR [rsp+0x18],xmm1
   256e6:	call   36810 <sre_malloc>
   256eb:	mov    QWORD PTR [rsp+0x58],rax
   256f0:	test   ebx,ebx
   256f2:	jle    25c4c <RandomAlignment+0x5bc>
   256f8:	lea    ebp,[rbx-0x1]
   256fb:	xor    r12d,r12d
   256fe:	mov    r13d,0x98967f
   25704:	xor    ebx,ebx
   25706:	mov    r14,rax
   25709:	nop    DWORD PTR [rax+0x0]
   25710:	mov    rdi,QWORD PTR [r15+r12*8]
   25714:	call   3560 <strlen@plt>
   25719:	add    ebx,eax
   2571b:	cmp    r13d,eax
   2571e:	mov    DWORD PTR [r14+r12*4],eax
   25722:	cmovg  r13d,eax
   25726:	mov    rax,r12
   25729:	add    r12,0x1
   2572d:	cmp    rax,rbp
   25730:	jne    25710 <RandomAlignment+0x80>
   25732:	pxor   xmm0,xmm0
   25736:	cvtsi2ss xmm0,ebx
   2573a:	cvtss2sd xmm0,xmm0
   2573e:	movsd  xmm2,QWORD PTR [rip+0x186aa]        # 3ddf0 <_IO_stdin_used+0xdf0>
   25746:	pxor   xmm1,xmm1
   2574a:	mov    r14d,DWORD PTR [rsp+0x2c]
   2574f:	mov    r12d,r13d
   25752:	cvtss2sd xmm1,DWORD PTR [rsp+0x18]
   25758:	mov    esi,0x221
   2575d:	lea    rdi,[rip+0x1adbc]        # 40520 <defmq.7318+0x360>
   25764:	movapd xmm7,xmm2
   25768:	movapd xmm3,xmm2
   2576c:	subsd  xmm7,xmm1
   25770:	divsd  xmm3,xmm7
   25774:	movapd xmm1,xmm3
   25778:	pxor   xmm3,xmm3
   2577c:	addsd  xmm1,xmm2
   25780:	cvtss2sd xmm3,DWORD PTR [rsp+0x8]
   25786:	mulsd  xmm1,xmm3
   2578a:	addsd  xmm1,xmm2
   2578e:	divsd  xmm0,xmm1
   25792:	cvttsd2si eax,xmm0
   25796:	cdq    
   25797:	idiv   r14d
   2579a:	cmp    eax,r13d
   2579d:	cmovle r12d,eax
   257a1:	mov    rax,QWORD PTR [rsp+0x38]
   257a6:	lea    ebp,[r12+0x1]
   257ab:	shl    rax,0x3
   257af:	mov    DWORD PTR [rsp+0x28],r12d
   257b4:	movsxd r13,ebp
   257b7:	mov    rdx,rax
   257ba:	mov    QWORD PTR [rsp+0x40],rax
   257bf:	call   36810 <sre_malloc>
   257c4:	shl    r13,0x2
   257c8:	mov    esi,0x222
   257cd:	lea    rdi,[rip+0x1ad4c]        # 40520 <defmq.7318+0x360>
   257d4:	mov    rdx,r13
   257d7:	mov    QWORD PTR [rsp+0x48],rax
   257dc:	mov    rbx,rax
   257df:	call   36810 <sre_malloc>
   257e4:	mov    QWORD PTR [rsp+0x10],rax
   257e9:	test   r14d,r14d
   257ec:	jle    25c5b <RandomAlignment+0x5cb>
   257f2:	lea    eax,[r14-0x1]
   257f6:	mov    r12d,r12d
   257f9:	mov    DWORD PTR [rsp+0x20],ebp
   257fd:	mov    r14,rbx
   25800:	mov    DWORD PTR [rsp+0x50],eax
   25804:	add    rax,0x1
   25808:	lea    rdi,[rbx+rax*8]
   2580c:	mov    QWORD PTR [rsp+0x30],rax
   25811:	mov    rax,r12
   25814:	add    r12,0x1
   25818:	mov    QWORD PTR [rsp+0x78],rbx
   2581d:	mov    rbp,rdi
   25820:	mov    ebx,eax
   25822:	nop    WORD PTR [rax+rax*1+0x0]
   25828:	mov    rdx,r13
   2582b:	mov    esi,0x225
   25830:	lea    rdi,[rip+0x1ace9]        # 40520 <defmq.7318+0x360>
   25837:	call   36810 <sre_malloc>
   2583c:	mov    QWORD PTR [r14],rax
   2583f:	lea    rdx,[rax+r12*4]
   25843:	test   ebx,ebx
   25845:	js     2585f <RandomAlignment+0x1cf>
   25847:	nop    WORD PTR [rax+rax*1+0x0]
   25850:	mov    DWORD PTR [rax],0x0
   25856:	add    rax,0x4
   2585a:	cmp    rdx,rax
   2585d:	jne    25850 <RandomAlignment+0x1c0>
   2585f:	add    r14,0x8
   25863:	cmp    r14,rbp
   25866:	jne    25828 <RandomAlignment+0x198>
   25868:	movss  xmm0,DWORD PTR [rsp+0x18]
   2586e:	movss  xmm6,DWORD PTR [rsp+0x8]
   25874:	mov    rax,QWORD PTR [rsp+0x58]
   25879:	mov    rsi,QWORD PTR [rsp+0x30]
   2587e:	mov    QWORD PTR [rsp+0x30],r15
   25883:	addss  xmm0,xmm6
   25887:	mov    rbx,QWORD PTR [rsp+0x78]
   2588c:	mov    r14d,DWORD PTR [rsp+0x28]
   25891:	mov    r13,rax
   25894:	lea    rax,[rax+rsi*4]
   25898:	mov    ebp,DWORD PTR [rsp+0x20]
   2589c:	mov    QWORD PTR [rsp+0x18],rax
   258a1:	divss  xmm6,xmm0
   258a5:	movss  DWORD PTR [rsp+0x20],xmm6
   258ab:	nop    DWORD PTR [rax+rax*1+0x0]
   258b0:	mov    eax,DWORD PTR [r13+0x0]
   258b4:	sub    eax,r14d
   258b7:	test   eax,eax
   258b9:	jle    25930 <RandomAlignment+0x2a0>
   258bb:	pxor   xmm5,xmm5
   258bf:	xor    r12d,r12d
   258c2:	mov    r15d,0xffffffff
   258c8:	cvtss2sd xmm5,DWORD PTR [rsp+0x20]
   258ce:	movsd  QWORD PTR [rsp+0x8],xmm5
   258d4:	jmp    25900 <RandomAlignment+0x270>
   258d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   258e0:	cmp    r15d,0xffffffff
   258e4:	je     25911 <RandomAlignment+0x281>
   258e6:	mov    rdx,QWORD PTR [rbx]
   258e9:	movsxd rax,r15d
   258ec:	add    r12d,0x1
   258f0:	add    DWORD PTR [rdx+rax*4],0x1
   258f4:	mov    eax,DWORD PTR [r13+0x0]
   258f8:	sub    eax,r14d
   258fb:	cmp    eax,r12d
   258fe:	jle    25930 <RandomAlignment+0x2a0>
   25900:	call   36060 <sre_random>
   25905:	movsd  xmm4,QWORD PTR [rsp+0x8]
   2590b:	comisd xmm4,xmm0
   2590f:	jbe    258e0 <RandomAlignment+0x250>
   25911:	call   36060 <sre_random>
   25916:	movapd xmm1,xmm0
   2591a:	pxor   xmm0,xmm0
   2591e:	cvtsi2sd xmm0,ebp
   25922:	mulsd  xmm0,xmm1
   25926:	cvttsd2si r15d,xmm0
   2592b:	jmp    258e6 <RandomAlignment+0x256>
   2592d:	nop    DWORD PTR [rax]
   25930:	add    r13,0x4
   25934:	add    rbx,0x8
   25938:	cmp    QWORD PTR [rsp+0x18],r13
   2593d:	jne    258b0 <RandomAlignment+0x220>
   25943:	mov    edx,DWORD PTR [rsp+0x28]
   25947:	mov    r15,QWORD PTR [rsp+0x30]
   2594c:	test   edx,edx
   2594e:	js     25cde <RandomAlignment+0x64e>
   25954:	movsxd rax,DWORD PTR [rsp+0x28]
   25959:	mov    rbx,QWORD PTR [rsp+0x48]
   2595e:	xor    ecx,ecx
   25960:	mov    r9,QWORD PTR [rsp+0x10]
   25965:	mov    r11d,DWORD PTR [rsp+0x2c]
   2596a:	mov    rsi,rax
   2596d:	lea    r8,[rax*4+0x4]
   25975:	mov    eax,DWORD PTR [rsp+0x50]
   25979:	mov    r10d,esi
   2597c:	lea    rdi,[rbx+rax*8+0x8]
   25981:	nop    DWORD PTR [rax+0x0]
   25988:	mov    DWORD PTR [r9+rcx*1],0x0
   25990:	test   r11d,r11d
   25993:	jle    259bc <RandomAlignment+0x32c>
   25995:	mov    rax,rbx
   25998:	xor    esi,esi
   2599a:	nop    WORD PTR [rax+rax*1+0x0]
   259a0:	mov    rdx,QWORD PTR [rax]
   259a3:	mov    edx,DWORD PTR [rdx+rcx*1]
   259a6:	cmp    edx,esi
   259a8:	jle    259b0 <RandomAlignment+0x320>
   259aa:	mov    DWORD PTR [r9+rcx*1],edx
   259ae:	mov    esi,edx
   259b0:	add    rax,0x8
   259b4:	cmp    rdi,rax
   259b7:	jne    259a0 <RandomAlignment+0x310>
   259b9:	add    r10d,esi
   259bc:	add    rcx,0x4
   259c0:	cmp    r8,rcx
   259c3:	jne    25988 <RandomAlignment+0x2f8>
   259c5:	mov    rdx,QWORD PTR [rsp+0x40]
   259ca:	mov    esi,0x245
   259cf:	mov    DWORD PTR [rsp+0x30],r10d
   259d4:	lea    rdi,[rip+0x1ab45]        # 40520 <defmq.7318+0x360>
   259db:	call   36810 <sre_malloc>
   259e0:	mov    edi,DWORD PTR [rsp+0x2c]
   259e4:	mov    QWORD PTR [rsp+0x40],rax
   259e9:	imul   rax,QWORD PTR [rsp+0x38],0x168
   259f2:	mov    QWORD PTR [rsp+0x38],rax
   259f7:	test   edi,edi
   259f9:	jle    25ca3 <RandomAlignment+0x613>
   259ff:	mov    eax,DWORD PTR [rsp+0x30]
   25a03:	mov    rsi,QWORD PTR [rsp+0x40]
   25a08:	lea    r12,[rip+0x1ab11]        # 40520 <defmq.7318+0x360>
   25a0f:	lea    ebp,[rax+0x1]
   25a12:	mov    eax,DWORD PTR [rsp+0x50]
   25a16:	mov    rbx,rsi
   25a19:	mov    r13,rsi
   25a1c:	movsxd rbp,ebp
   25a1f:	add    rax,0x1
   25a23:	lea    r14,[rsi+rax*8]
   25a27:	mov    QWORD PTR [rsp+0x50],rax
   25a2c:	mov    QWORD PTR [rsp+0x20],r14
   25a31:	nop    DWORD PTR [rax+0x0]
   25a38:	mov    rdx,rbp
   25a3b:	mov    esi,0x247
   25a40:	mov    rdi,r12
   25a43:	add    r13,0x8
   25a47:	call   36810 <sre_malloc>
   25a4c:	mov    QWORD PTR [r13-0x8],rax
   25a50:	cmp    r14,r13
   25a53:	jne    25a38 <RandomAlignment+0x3a8>
   25a55:	movsxd rax,DWORD PTR [rsp+0x30]
   25a5a:	mov    r11,QWORD PTR [rsp+0x48]
   25a5f:	mov    rbp,r15
   25a62:	mov    QWORD PTR [rsp+0x18],rax
   25a67:	movsxd rax,DWORD PTR [rsp+0x28]
   25a6c:	mov    QWORD PTR [rsp+0x8],rax
   25a71:	nop    DWORD PTR [rax+0x0]
   25a78:	mov    ecx,DWORD PTR [rsp+0x28]
   25a7c:	mov    rdx,QWORD PTR [rbx]
   25a7f:	test   ecx,ecx
   25a81:	js     25b68 <RandomAlignment+0x4d8>
   25a87:	mov    r10,QWORD PTR [rsp+0x10]
   25a8c:	xor    r15d,r15d
   25a8f:	xor    r8d,r8d
   25a92:	xor    edi,edi
   25a94:	nop    DWORD PTR [rax+0x0]
   25a98:	mov    rax,QWORD PTR [r11]
   25a9b:	lea    r12,[r15*4+0x0]
   25aa3:	mov    esi,DWORD PTR [rax+r15*4]
   25aa7:	test   esi,esi
   25aa9:	jle    25c40 <RandomAlignment+0x5b0>
   25aaf:	movsxd rcx,r8d
   25ab2:	lea    r14d,[r8+0x1]
   25ab6:	movsxd r8,edi
   25ab9:	xor    eax,eax
   25abb:	lea    r13d,[rdi+0x1]
   25abf:	sub    r8,rcx
   25ac2:	jmp    25acc <RandomAlignment+0x43c>
   25ac4:	nop    DWORD PTR [rax+0x0]
   25ac8:	add    rcx,0x1
   25acc:	mov    rdi,QWORD PTR [rbp+0x0]
   25ad0:	add    rdx,rcx
   25ad3:	lea    r9d,[r14+rax*1]
   25ad7:	lea    esi,[r13+rax*1+0x0]
   25adc:	add    eax,0x1
   25adf:	movzx  edi,BYTE PTR [rdi+rcx*1]
   25ae3:	mov    BYTE PTR [rdx+r8*1],dil
   25ae7:	mov    rdx,QWORD PTR [r11]
   25aea:	cmp    DWORD PTR [rdx+r12*1],eax
   25aee:	mov    rdx,QWORD PTR [rbx]
   25af1:	jg     25ac8 <RandomAlignment+0x438>
   25af3:	cmp    DWORD PTR [r10],eax
   25af6:	jle    25b16 <RandomAlignment+0x486>
   25af8:	movsxd rcx,esi
   25afb:	sub    eax,esi
   25afd:	nop    DWORD PTR [rax]
   25b00:	mov    BYTE PTR [rdx+rcx*1],0x20
   25b04:	lea    esi,[rcx+0x1]
   25b07:	add    rcx,0x1
   25b0b:	lea    edx,[rax+rcx*1]
   25b0e:	cmp    DWORD PTR [r10],edx
   25b11:	mov    rdx,QWORD PTR [rbx]
   25b14:	jg     25b00 <RandomAlignment+0x470>
   25b16:	cmp    DWORD PTR [rsp+0x28],r15d
   25b1b:	je     25b50 <RandomAlignment+0x4c0>
   25b1d:	mov    rax,QWORD PTR [rbp+0x0]
   25b21:	lea    r8d,[r9+0x1]
   25b25:	movsxd r9,r9d
   25b28:	lea    edi,[rsi+0x1]
   25b2b:	movsxd rsi,esi
   25b2e:	add    r10,0x4
   25b32:	movzx  eax,BYTE PTR [rax+r9*1]
   25b37:	mov    BYTE PTR [rdx+rsi*1],al
   25b3a:	lea    rax,[r15+0x1]
   25b3e:	mov    rdx,QWORD PTR [rbx]
   25b41:	cmp    QWORD PTR [rsp+0x8],r15
   25b46:	je     25b68 <RandomAlignment+0x4d8>
   25b48:	mov    r15,rax
   25b4b:	jmp    25a98 <RandomAlignment+0x408>
   25b50:	mov    r8d,r9d
   25b53:	mov    edi,esi
   25b55:	lea    rax,[r15+0x1]
   25b59:	add    r10,0x4
   25b5d:	cmp    QWORD PTR [rsp+0x8],r15
   25b62:	jne    25b48 <RandomAlignment+0x4b8>
   25b64:	nop    DWORD PTR [rax+0x0]
   25b68:	mov    rax,QWORD PTR [rsp+0x18]
   25b6d:	add    rbx,0x8
   25b71:	add    rbp,0x8
   25b75:	add    r11,0x8
   25b79:	mov    BYTE PTR [rdx+rax*1],0x0
   25b7d:	cmp    rbx,QWORD PTR [rsp+0x20]
   25b82:	jne    25a78 <RandomAlignment+0x3e8>
   25b88:	mov    r13,QWORD PTR [rsp+0x60]
   25b8d:	mov    eax,DWORD PTR [rsp+0x30]
   25b91:	mov    esi,0x25b
   25b96:	xor    ebp,ebp
   25b98:	mov    rdx,QWORD PTR [rsp+0x38]
   25b9d:	lea    rdi,[rip+0x1a97c]        # 40520 <defmq.7318+0x360>
   25ba4:	mov    DWORD PTR [r13+0x4],eax
   25ba8:	mov    eax,DWORD PTR [rsp+0x2c]
   25bac:	mov    DWORD PTR [r13+0x0],0x0
   25bb4:	mov    DWORD PTR [r13+0x8],eax
   25bb8:	call   36810 <sre_malloc>
   25bbd:	mov    r12,QWORD PTR [rsp+0x68]
   25bc2:	imul   rbx,QWORD PTR [rsp+0x50],0x168
   25bcb:	mov    QWORD PTR [r13+0x28],rax
   25bcf:	jmp    25bdc <RandomAlignment+0x54c>
   25bd1:	nop    DWORD PTR [rax+0x0]
   25bd8:	mov    rax,QWORD PTR [r13+0x28]
   25bdc:	lea    rsi,[r12+rbp*1]
   25be0:	lea    rdi,[rax+rbp*1]
   25be4:	add    rbp,0x168
   25beb:	call   32460 <SeqinfoCopy>
   25bf0:	cmp    rbx,rbp
   25bf3:	jne    25bd8 <RandomAlignment+0x548>
   25bf5:	mov    rdi,QWORD PTR [rsp+0x58]
   25bfa:	call   3460 <free@plt>
   25bff:	mov    rdi,QWORD PTR [rsp+0x10]
   25c04:	call   3460 <free@plt>
   25c09:	mov    esi,DWORD PTR [rsp+0x2c]
   25c0d:	mov    rdi,QWORD PTR [rsp+0x48]
   25c12:	call   368c0 <Free2DArray>
   25c17:	mov    rax,QWORD PTR [rsp+0x70]
   25c1c:	mov    rbx,QWORD PTR [rsp+0x40]
   25c21:	mov    QWORD PTR [rax],rbx
   25c24:	add    rsp,0x88
   25c2b:	mov    eax,0x1
   25c30:	pop    rbx
   25c31:	pop    rbp
   25c32:	pop    r12
   25c34:	pop    r13
   25c36:	pop    r14
   25c38:	pop    r15
   25c3a:	ret    
   25c3b:	nop    DWORD PTR [rax+rax*1+0x0]
   25c40:	mov    r9d,r8d
   25c43:	mov    esi,edi
   25c45:	xor    eax,eax
   25c47:	jmp    25af3 <RandomAlignment+0x463>
   25c4c:	pxor   xmm0,xmm0
   25c50:	mov    r13d,0x98967f
   25c56:	jmp    2573e <RandomAlignment+0xae>
   25c5b:	mov    eax,DWORD PTR [rsp+0x2c]
   25c5f:	sub    eax,0x1
   25c62:	mov    DWORD PTR [rsp+0x50],eax
   25c66:	mov    eax,DWORD PTR [rsp+0x28]
   25c6a:	test   eax,eax
   25c6c:	jns    25954 <RandomAlignment+0x2c4>
   25c72:	mov    rdx,QWORD PTR [rsp+0x40]
   25c77:	mov    esi,0x245
   25c7c:	lea    rdi,[rip+0x1a89d]        # 40520 <defmq.7318+0x360>
   25c83:	call   36810 <sre_malloc>
   25c88:	mov    QWORD PTR [rsp+0x40],rax
   25c8d:	imul   rax,QWORD PTR [rsp+0x38],0x168
   25c96:	mov    QWORD PTR [rsp+0x38],rax
   25c9b:	mov    eax,DWORD PTR [rsp+0x28]
   25c9f:	mov    DWORD PTR [rsp+0x30],eax
   25ca3:	mov    rax,QWORD PTR [rsp+0x60]
   25ca8:	mov    ebx,DWORD PTR [rsp+0x30]
   25cac:	lea    rdi,[rip+0x1a86d]        # 40520 <defmq.7318+0x360>
   25cb3:	mov    esi,DWORD PTR [rsp+0x2c]
   25cb7:	mov    rdx,QWORD PTR [rsp+0x38]
   25cbc:	mov    DWORD PTR [rax+0x4],ebx
   25cbf:	mov    rbx,rax
   25cc2:	mov    DWORD PTR [rax+0x8],esi
   25cc5:	mov    esi,0x25b
   25cca:	mov    DWORD PTR [rax],0x0
   25cd0:	call   36810 <sre_malloc>
   25cd5:	mov    QWORD PTR [rbx+0x28],rax
   25cd9:	jmp    25bf5 <RandomAlignment+0x565>
   25cde:	mov    rdx,QWORD PTR [rsp+0x40]
   25ce3:	mov    esi,0x245
   25ce8:	lea    rdi,[rip+0x1a831]        # 40520 <defmq.7318+0x360>
   25cef:	call   36810 <sre_malloc>
   25cf4:	mov    QWORD PTR [rsp+0x40],rax
   25cf9:	imul   rax,QWORD PTR [rsp+0x38],0x168
   25d02:	mov    QWORD PTR [rsp+0x38],rax
   25d07:	mov    eax,DWORD PTR [rsp+0x28]
   25d0b:	mov    DWORD PTR [rsp+0x30],eax
   25d0f:	jmp    259ff <RandomAlignment+0x36f>
   25d14:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   25d1f:	nop

0000000000025d20 <AlignmentHomogenousGapsym>:
   25d20:	endbr64 
   25d24:	test   esi,esi
   25d26:	jle    25da6 <AlignmentHomogenousGapsym+0x86>
   25d28:	push   rbp
   25d29:	lea    eax,[rsi-0x1]
   25d2c:	mov    r9,rdi
   25d2f:	movabs r10,0x8000000000006001
   25d39:	push   rbx
   25d3a:	mov    ebx,edx
   25d3c:	lea    rbp,[rdi+rax*8+0x8]
   25d41:	mov    edx,ecx
   25d43:	lea    r11d,[rbx-0x1]
   25d47:	nop    WORD PTR [rax+rax*1+0x0]
   25d50:	xor    esi,esi
   25d52:	test   ebx,ebx
   25d54:	jg     25d63 <AlignmentHomogenousGapsym+0x43>
   25d56:	jmp    25d9a <AlignmentHomogenousGapsym+0x7a>
   25d58:	nop    DWORD PTR [rax+rax*1+0x0]
   25d60:	mov    rsi,rax
   25d63:	mov    r8,QWORD PTR [r9]
   25d66:	mov    rax,r10
   25d69:	add    r8,rsi
   25d6c:	movzx  edi,BYTE PTR [r8]
   25d70:	lea    ecx,[rdi-0x20]
   25d73:	shr    rax,cl
   25d76:	and    eax,0x1
   25d79:	cmp    cl,0x40
   25d7c:	mov    ecx,0x0
   25d81:	cmovae eax,ecx
   25d84:	cmp    dil,0x7e
   25d88:	je     25d8e <AlignmentHomogenousGapsym+0x6e>
   25d8a:	test   al,al
   25d8c:	je     25d91 <AlignmentHomogenousGapsym+0x71>
   25d8e:	mov    BYTE PTR [r8],dl
   25d91:	lea    rax,[rsi+0x1]
   25d95:	cmp    r11,rsi
   25d98:	jne    25d60 <AlignmentHomogenousGapsym+0x40>
   25d9a:	add    r9,0x8
   25d9e:	cmp    r9,rbp
   25da1:	jne    25d50 <AlignmentHomogenousGapsym+0x30>
   25da3:	pop    rbx
   25da4:	pop    rbp
   25da5:	ret    
   25da6:	ret    
   25da7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000025db0 <ReadClustal>:
   25db0:	endbr64 
   25db4:	push   r15
   25db6:	push   r14
   25db8:	push   r13
   25dba:	push   r12
   25dbc:	push   rbp
   25dbd:	lea    rbp,[rip+0x1a796]        # 4055a <defmq.7318+0x39a>
   25dc4:	push   rbx
   25dc5:	mov    rbx,rdi
   25dc8:	sub    rsp,0x28
   25dcc:	mov    rdi,QWORD PTR [rdi]
   25dcf:	mov    rax,QWORD PTR fs:0x28
   25dd8:	mov    QWORD PTR [rsp+0x18],rax
   25ddd:	xor    eax,eax
   25ddf:	call   3660 <feof@plt>
   25de4:	test   eax,eax
   25de6:	jne    25f40 <ReadClustal+0x190>
   25dec:	nop    DWORD PTR [rax+0x0]
   25df0:	mov    rdi,rbx
   25df3:	call   2c370 <MSAFileGetLine>
   25df8:	mov    QWORD PTR [rsp+0x10],rax
   25dfd:	mov    r8,rax
   25e00:	test   rax,rax
   25e03:	je     25f40 <ReadClustal+0x190>
   25e09:	mov    ecx,0x7
   25e0e:	mov    rsi,r8
   25e11:	mov    rdi,rbp
   25e14:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   25e16:	seta   al
   25e19:	sbb    al,0x0
   25e1b:	test   al,al
   25e1d:	jne    25df0 <ReadClustal+0x40>
   25e1f:	lea    rsi,[rip+0x1a73c]        # 40562 <defmq.7318+0x3a2>
   25e26:	mov    rdi,r8
   25e29:	call   37f0 <strstr@plt>
   25e2e:	test   rax,rax
   25e31:	je     25df0 <ReadClustal+0x40>
   25e33:	xor    esi,esi
   25e35:	mov    edi,0xa
   25e3a:	lea    r13,[rsp+0x10]
   25e3f:	call   2aa20 <MSAAlloc>
   25e44:	mov    r12,rax
   25e47:	nop    WORD PTR [rax+rax*1+0x0]
   25e50:	mov    rdi,rbx
   25e53:	call   2c370 <MSAFileGetLine>
   25e58:	mov    QWORD PTR [rsp+0x10],rax
   25e5d:	test   rax,rax
   25e60:	je     25f68 <ReadClustal+0x1b8>
   25e66:	xor    edx,edx
   25e68:	lea    rsi,[rip+0x1be5d]        # 41ccc <CSWTCH.18+0x60c>
   25e6f:	mov    rdi,r13
   25e72:	call   36c50 <sre_strtok>
   25e77:	mov    rbp,rax
   25e7a:	test   rax,rax
   25e7d:	je     25e50 <ReadClustal+0xa0>
   25e7f:	lea    rdx,[rsp+0xc]
   25e84:	lea    rsi,[rip+0x1be41]        # 41ccc <CSWTCH.18+0x60c>
   25e8b:	mov    rdi,r13
   25e8e:	call   36c50 <sre_strtok>
   25e93:	mov    r14,rax
   25e96:	test   rax,rax
   25e99:	je     25e50 <ReadClustal+0xa0>
   25e9b:	xor    edx,edx
   25e9d:	lea    rsi,[rip+0x1be2a]        # 41cce <CSWTCH.18+0x60e>
   25ea4:	mov    rdi,r13
   25ea7:	call   36c50 <sre_strtok>
   25eac:	lea    rsi,[rip+0x1a6cb]        # 4057e <defmq.7318+0x3be>
   25eb3:	mov    rdi,rbp
   25eb6:	mov    r15,rax
   25eb9:	call   36d0 <strpbrk@plt>
   25ebe:	test   rax,rax
   25ec1:	je     25edb <ReadClustal+0x12b>
   25ec3:	lea    rsi,[rip+0x1a6b4]        # 4057e <defmq.7318+0x3be>
   25eca:	mov    rdi,r14
   25ecd:	call   36d0 <strpbrk@plt>
   25ed2:	test   rax,rax
   25ed5:	jne    25e50 <ReadClustal+0xa0>
   25edb:	test   r15,r15
   25ede:	je     25ef5 <ReadClustal+0x145>
   25ee0:	mov    rdx,QWORD PTR [rbx+0x8]
   25ee4:	mov    esi,DWORD PTR [rbx+0x10]
   25ee7:	lea    rdi,[rip+0x1a6a2]        # 40590 <defmq.7318+0x3d0>
   25eee:	xor    eax,eax
   25ef0:	call   317f0 <Die>
   25ef5:	mov    eax,DWORD PTR [r12+0x160]
   25efd:	mov    rsi,rbp
   25f00:	mov    rdi,r12
   25f03:	lea    edx,[rax+0x1]
   25f06:	call   2c410 <MSAGetSeqidx>
   25f0b:	mov    rdx,QWORD PTR [r12+0x148]
   25f13:	mov    ecx,DWORD PTR [rsp+0xc]
   25f17:	mov    DWORD PTR [r12+0x160],eax
   25f1f:	cdqe   
   25f21:	lea    rbp,[rdx+rax*4]
   25f25:	mov    rdx,QWORD PTR [r12]
   25f29:	mov    esi,DWORD PTR [rbp+0x0]
   25f2c:	lea    rdi,[rdx+rax*8]
   25f30:	mov    rdx,r14
   25f33:	call   36b70 <sre_strcat>
   25f38:	mov    DWORD PTR [rbp+0x0],eax
   25f3b:	jmp    25e50 <ReadClustal+0xa0>
   25f40:	xor    r12d,r12d
   25f43:	mov    rax,QWORD PTR [rsp+0x18]
   25f48:	xor    rax,QWORD PTR fs:0x28
   25f51:	jne    25f72 <ReadClustal+0x1c2>
   25f53:	add    rsp,0x28
   25f57:	mov    rax,r12
   25f5a:	pop    rbx
   25f5b:	pop    rbp
   25f5c:	pop    r12
   25f5e:	pop    r13
   25f60:	pop    r14
   25f62:	pop    r15
   25f64:	ret    
   25f65:	nop    DWORD PTR [rax]
   25f68:	mov    rdi,r12
   25f6b:	call   2be90 <MSAVerifyParse>
   25f70:	jmp    25f43 <ReadClustal+0x193>
   25f72:	call   3570 <__stack_chk_fail@plt>
   25f77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000025f80 <WriteClustal>:
   25f80:	endbr64 
   25f84:	push   r15
   25f86:	push   r14
   25f88:	mov    r14,rdi
   25f8b:	push   r13
   25f8d:	push   r12
   25f8f:	mov    r12,rsi
   25f92:	push   rbp
   25f93:	push   rbx
   25f94:	sub    rsp,0x68
   25f98:	mov    edx,DWORD PTR [rsi+0x1c]
   25f9b:	mov    rax,QWORD PTR fs:0x28
   25fa4:	mov    QWORD PTR [rsp+0x58],rax
   25fa9:	xor    eax,eax
   25fab:	test   edx,edx
   25fad:	jle    260c4 <WriteClustal+0x144>
   25fb3:	mov    rax,QWORD PTR [rsi+0x8]
   25fb7:	sub    edx,0x1
   25fba:	xor    r13d,r13d
   25fbd:	lea    rbp,[rax+0x8]
   25fc1:	lea    rbx,[rbp+rdx*8+0x0]
   25fc6:	jmp    25fd4 <WriteClustal+0x54>
   25fc8:	nop    DWORD PTR [rax+rax*1+0x0]
   25fd0:	add    rbp,0x8
   25fd4:	mov    rdi,QWORD PTR [rax]
   25fd7:	call   3560 <strlen@plt>
   25fdc:	cmp    r13d,eax
   25fdf:	cmovl  r13d,eax
   25fe3:	mov    rax,rbp
   25fe6:	cmp    rbp,rbx
   25fe9:	jne    25fd0 <WriteClustal+0x50>
   25feb:	mov    edx,0x2b
   25ff0:	mov    rcx,r14
   25ff3:	mov    esi,0x1
   25ff8:	lea    rdi,[rip+0x1a5d1]        # 405d0 <defmq.7318+0x410>
   25fff:	lea    r15,[rip+0x1a57c]        # 40582 <defmq.7318+0x3c2>
   26006:	call   37b0 <fwrite@plt>
   2600b:	mov    edx,DWORD PTR [r12+0x18]
   26010:	mov    QWORD PTR [rsp+0x8],0x0
   26019:	test   edx,edx
   2601b:	jle    260a5 <WriteClustal+0x125>
   26021:	nop    DWORD PTR [rax+0x0]
   26028:	mov    rsi,r14
   2602b:	mov    edi,0xa
   26030:	lea    rbp,[rsp+0x10]
   26035:	xor    ebx,ebx
   26037:	call   3600 <fputc@plt>
   2603c:	mov    eax,DWORD PTR [r12+0x1c]
   26041:	test   eax,eax
   26043:	jle    26093 <WriteClustal+0x113>
   26045:	nop    DWORD PTR [rax]
   26048:	mov    rax,QWORD PTR [r12]
   2604c:	mov    rsi,QWORD PTR [rsp+0x8]
   26051:	mov    edx,0x32
   26056:	mov    rdi,rbp
   26059:	add    rsi,QWORD PTR [rax+rbx*8]
   2605d:	call   34b0 <strncpy@plt>
   26062:	mov    rax,QWORD PTR [r12+0x8]
   26067:	mov    r9,rbp
   2606a:	mov    ecx,r13d
   2606d:	mov    BYTE PTR [rsp+0x42],0x0
   26072:	mov    rdx,r15
   26075:	mov    esi,0x1
   2607a:	mov    rdi,r14
   2607d:	mov    r8,QWORD PTR [rax+rbx*8]
   26081:	xor    eax,eax
   26083:	add    rbx,0x1
   26087:	call   37c0 <__fprintf_chk@plt>
   2608c:	cmp    DWORD PTR [r12+0x1c],ebx
   26091:	jg     26048 <WriteClustal+0xc8>
   26093:	add    QWORD PTR [rsp+0x8],0x32
   26099:	mov    rax,QWORD PTR [rsp+0x8]
   2609e:	cmp    DWORD PTR [r12+0x18],eax
   260a3:	jg     26028 <WriteClustal+0xa8>
   260a5:	mov    rax,QWORD PTR [rsp+0x58]
   260aa:	xor    rax,QWORD PTR fs:0x28
   260b3:	jne    260cc <WriteClustal+0x14c>
   260b5:	add    rsp,0x68
   260b9:	pop    rbx
   260ba:	pop    rbp
   260bb:	pop    r12
   260bd:	pop    r13
   260bf:	pop    r14
   260c1:	pop    r15
   260c3:	ret    
   260c4:	xor    r13d,r13d
   260c7:	jmp    25feb <WriteClustal+0x6b>
   260cc:	call   3570 <__stack_chk_fail@plt>
   260d1:	nop    WORD PTR cs:[rax+rax*1+0x0]
   260db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000260e0 <AllocPhylo>:
   260e0:	endbr64 
   260e4:	push   r13
   260e6:	push   r12
   260e8:	mov    r12d,edi
   260eb:	push   rbp
   260ec:	push   rbx
   260ed:	lea    ebx,[rdi-0x1]
   260f0:	movsxd rax,ebx
   260f3:	lea    rdi,[rax+rax*4]
   260f7:	sub    rsp,0x8
   260fb:	shl    rdi,0x3
   260ff:	call   36b0 <malloc@plt>
   26104:	test   rax,rax
   26107:	je     26185 <AllocPhylo+0xa5>
   26109:	mov    r13,rax
   2610c:	test   ebx,ebx
   2610e:	jle    26177 <AllocPhylo+0x97>
   26110:	mov    rbx,rax
   26113:	lea    eax,[r12-0x2]
   26118:	movsxd rbp,r12d
   2611b:	lea    rax,[rax+rax*4+0x5]
   26120:	lea    r12,[r13+rax*8+0x0]
   26125:	nop    DWORD PTR [rax]
   26128:	mov    DWORD PTR [rbx+0xc],0x0
   2612f:	mov    esi,0x1
   26134:	mov    rdi,rbp
   26137:	mov    DWORD PTR [rbx+0x14],0x0
   2613e:	mov    DWORD PTR [rbx+0x10],0x0
   26145:	mov    DWORD PTR [rbx],0xffffffff
   2614b:	mov    DWORD PTR [rbx+0x8],0xffffffff
   26152:	mov    DWORD PTR [rbx+0x4],0xffffffff
   26159:	mov    DWORD PTR [rbx+0x20],0x0
   26160:	call   3630 <calloc@plt>
   26165:	mov    QWORD PTR [rbx+0x18],rax
   26169:	test   rax,rax
   2616c:	je     26185 <AllocPhylo+0xa5>
   2616e:	add    rbx,0x28
   26172:	cmp    rbx,r12
   26175:	jne    26128 <AllocPhylo+0x48>
   26177:	add    rsp,0x8
   2617b:	mov    rax,r13
   2617e:	pop    rbx
   2617f:	pop    rbp
   26180:	pop    r12
   26182:	pop    r13
   26184:	ret    
   26185:	xor    r13d,r13d
   26188:	jmp    26177 <AllocPhylo+0x97>
   2618a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000026190 <Cluster>:
   26190:	endbr64 
   26194:	push   r15
   26196:	push   r14
   26198:	push   r13
   2619a:	movsxd r13,esi
   2619d:	mov    esi,0xa8
   261a2:	push   r12
   261a4:	mov    r12,r13
   261a7:	push   rbp
   261a8:	push   rbx
   261a9:	mov    ebx,edx
   261ab:	lea    rdx,[r13*8+0x0]
   261b3:	sub    rsp,0x78
   261b7:	mov    QWORD PTR [rsp],rdi
   261bb:	lea    rdi,[rip+0x1a43a]        # 405fc <defmq.7318+0x43c>
   261c2:	mov    QWORD PTR [rsp+0x68],rcx
   261c7:	call   36810 <sre_malloc>
   261cc:	lea    rdx,[r13*4+0x0]
   261d4:	mov    rbp,rax
   261d7:	lea    rax,[rdx-0x4]
   261db:	mov    QWORD PTR [rsp+0x8],rax
   261e0:	test   r13d,r13d
   261e3:	jle    2680e <Cluster+0x67e>
   261e9:	lea    r14d,[r13-0x1]
   261ed:	xor    r15d,r15d
   261f0:	mov    DWORD PTR [rsp+0x18],r12d
   261f5:	mov    r12,QWORD PTR [rsp]
   261f9:	mov    QWORD PTR [rsp+0x10],r13
   261fe:	mov    r13,r14
   26201:	mov    r14,r15
   26204:	mov    r15d,ebx
   26207:	mov    rbx,rdx
   2620a:	nop    WORD PTR [rax+rax*1+0x0]
   26210:	mov    rdx,rbx
   26213:	mov    esi,0xab
   26218:	lea    rdi,[rip+0x1a3dd]        # 405fc <defmq.7318+0x43c>
   2621f:	call   36810 <sre_malloc>
   26224:	xor    edx,edx
   26226:	mov    QWORD PTR [rbp+r14*8+0x0],rax
   2622b:	mov    rsi,QWORD PTR [r12+r14*8]
   2622f:	nop
   26230:	movss  xmm0,DWORD PTR [rsi+rdx*4]
   26235:	mov    rcx,rdx
   26238:	movss  DWORD PTR [rax+rdx*4],xmm0
   2623d:	add    rdx,0x1
   26241:	cmp    r13,rcx
   26244:	jne    26230 <Cluster+0xa0>
   26246:	lea    rax,[r14+0x1]
   2624a:	cmp    r13,r14
   2624d:	je     26254 <Cluster+0xc4>
   2624f:	mov    r14,rax
   26252:	jmp    26210 <Cluster+0x80>
   26254:	mov    rdx,rbx
   26257:	mov    esi,0xb0
   2625c:	mov    r12d,DWORD PTR [rsp+0x18]
   26261:	mov    r14,r13
   26264:	lea    rdi,[rip+0x1a391]        # 405fc <defmq.7318+0x43c>
   2626b:	mov    r13,QWORD PTR [rsp+0x10]
   26270:	mov    ebx,r15d
   26273:	call   36810 <sre_malloc>
   26278:	mov    rdx,QWORD PTR [rsp+0x8]
   2627d:	mov    esi,0xb1
   26282:	lea    rdi,[rip+0x1a373]        # 405fc <defmq.7318+0x43c>
   26289:	mov    r15,rax
   2628c:	mov    QWORD PTR [rsp],rax
   26290:	call   36810 <sre_malloc>
   26295:	mov    rcx,r15
   26298:	mov    QWORD PTR [rsp+0x10],rax
   2629d:	xor    eax,eax
   2629f:	nop
   262a0:	mov    rdx,rax
   262a3:	mov    DWORD PTR [rcx+rax*4],eax
   262a6:	add    rax,0x1
   262aa:	cmp    r14,rdx
   262ad:	jne    262a0 <Cluster+0x110>
   262af:	cmp    r12d,0x1
   262b3:	jle    26848 <Cluster+0x6b8>
   262b9:	mov    rcx,QWORD PTR [rsp+0x10]
   262be:	lea    edx,[r12-0x2]
   262c3:	mov    rax,rcx
   262c6:	lea    rdx,[rcx+rdx*4+0x4]
   262cb:	nop    DWORD PTR [rax+rax*1+0x0]
   262d0:	mov    DWORD PTR [rax],0x0
   262d6:	add    rax,0x4
   262da:	cmp    rdx,rax
   262dd:	jne    262d0 <Cluster+0x140>
   262df:	lea    r9d,[r12-0x1]
   262e4:	mov    edi,r12d
   262e7:	mov    DWORD PTR [rsp+0x8],r9d
   262ec:	call   260e0 <AllocPhylo>
   262f1:	mov    r9d,DWORD PTR [rsp+0x8]
   262f6:	test   rax,rax
   262f9:	mov    QWORD PTR [rsp+0x18],rax
   262fe:	je     267f8 <Cluster+0x668>
   26304:	cmp    r12d,0x1
   26308:	jle    267b9 <Cluster+0x629>
   2630e:	mov    rcx,QWORD PTR [rsp+0x18]
   26313:	lea    rax,[r13+r13*4+0x0]
   26318:	xor    esi,esi
   2631a:	mov    edi,r9d
   2631d:	movss  xmm2,DWORD PTR [rip+0x1740b]        # 3d730 <_IO_stdin_used+0x730>
   26325:	movss  xmm4,DWORD PTR [rip+0x1a38b]        # 406b8 <defmq.7318+0x4f8>
   2632d:	lea    r14,[r13*4-0x8]
   26335:	lea    r15,[rcx+rax*8-0x4c]
   2633a:	lea    ecx,[r12-0x2]
   2633f:	mov    eax,r12d
   26342:	mov    DWORD PTR [rsp+0x4c],ecx
   26346:	lea    ecx,[r12-0x1]
   2634b:	movaps xmm3,xmm2
   2634e:	mov    QWORD PTR [rsp+0x50],rcx
   26353:	nop    DWORD PTR [rax+rax*1+0x0]
   26358:	mov    r8d,0x1
   2635e:	mov    edx,esi
   26360:	movaps xmm1,xmm4
   26363:	mov    ecx,edi
   26365:	lea    r9d,[r8-0x1]
   26369:	cmp    eax,r8d
   2636c:	jle    263a7 <Cluster+0x217>
   2636e:	xchg   ax,ax
   26370:	mov    rdi,QWORD PTR [rbp+r8*8-0x8]
   26375:	mov    rsi,r8
   26378:	nop    DWORD PTR [rax+rax*1+0x0]
   26380:	movss  xmm0,DWORD PTR [rdi+rsi*4]
   26385:	comiss xmm1,xmm0
   26388:	jbe    26392 <Cluster+0x202>
   2638a:	movaps xmm1,xmm0
   2638d:	mov    edx,esi
   2638f:	mov    ecx,r9d
   26392:	add    rsi,0x1
   26396:	cmp    eax,esi
   26398:	jg     26380 <Cluster+0x1f0>
   2639a:	add    r8,0x1
   2639e:	lea    r9d,[r8-0x1]
   263a2:	cmp    eax,r8d
   263a5:	jg     26370 <Cluster+0x1e0>
   263a7:	movsxd rdi,ecx
   263aa:	lea    r9,[rdi*4+0x0]
   263b2:	mov    QWORD PTR [rsp+0x28],rdi
   263b7:	mov    QWORD PTR [rsp+0x20],rdi
   263bc:	mov    rdi,QWORD PTR [rsp]
   263c0:	lea    r10,[rdi+r9*1]
   263c4:	mov    esi,DWORD PTR [r10]
   263c7:	mov    DWORD PTR [r15],esi
   263ca:	movsxd rsi,edx
   263cd:	mov    QWORD PTR [rsp+0x38],rsi
   263d2:	shl    rsi,0x2
   263d6:	add    rdi,rsi
   263d9:	mov    QWORD PTR [rsp+0x40],rsi
   263de:	mov    esi,DWORD PTR [rdi]
   263e0:	mov    r11,rdi
   263e3:	mov    edi,DWORD PTR [rsp+0x4c]
   263e7:	mov    DWORD PTR [r15+0x4],esi
   263eb:	mov    esi,DWORD PTR [r10]
   263ee:	add    edi,eax
   263f0:	mov    DWORD PTR [rsp+0x8],edi
   263f4:	cmp    esi,r12d
   263f7:	jl     26411 <Cluster+0x281>
   263f9:	sub    esi,r12d
   263fc:	mov    rdi,QWORD PTR [rsp+0x18]
   26401:	mov    r8d,DWORD PTR [rsp+0x8]
   26406:	movsxd rsi,esi
   26409:	lea    rsi,[rsi+rsi*4]
   2640d:	mov    DWORD PTR [rdi+rsi*8],r8d
   26411:	mov    esi,DWORD PTR [r11]
   26414:	cmp    esi,r12d
   26417:	jl     265ee <Cluster+0x45e>
   2641d:	sub    esi,r12d
   26420:	mov    rdi,QWORD PTR [rsp+0x18]
   26425:	mov    r8d,DWORD PTR [rsp+0x8]
   2642a:	movsxd rsi,esi
   2642d:	lea    rsi,[rsi+rsi*4]
   26431:	mov    DWORD PTR [rdi+rsi*8],r8d
   26435:	mov    rdi,QWORD PTR [rsp+0x10]
   2643a:	mov    esi,DWORD PTR [r11]
   2643d:	movss  DWORD PTR [r15+0x8],xmm1
   26443:	movss  DWORD PTR [rdi+r14*1],xmm1
   26449:	mov    edi,DWORD PTR [r10]
   2644c:	movss  DWORD PTR [r15+0x10],xmm1
   26452:	movss  DWORD PTR [r15+0xc],xmm1
   26458:	cmp    edi,r12d
   2645b:	jge    26617 <Cluster+0x487>
   26461:	cmp    r12d,esi
   26464:	jg     2647c <Cluster+0x2ec>
   26466:	mov    rdi,QWORD PTR [rsp+0x10]
   2646b:	sub    esi,r12d
   2646e:	movsxd rsi,esi
   26471:	subss  xmm1,DWORD PTR [rdi+rsi*4]
   26476:	movss  DWORD PTR [r15+0x10],xmm1
   2647c:	add    DWORD PTR [r15+0x1c],0x1
   26481:	mov    rdi,QWORD PTR [r15+0x14]
   26485:	movsxd rsi,DWORD PTR [r10]
   26488:	mov    BYTE PTR [rdi+rsi*1],0x1
   2648c:	mov    r8,QWORD PTR [r15+0x14]
   26490:	mov    edi,DWORD PTR [r11]
   26493:	mov    esi,DWORD PTR [r15+0x1c]
   26497:	mov    QWORD PTR [rsp+0x30],r8
   2649c:	cmp    edi,r12d
   2649f:	jge    2674a <Cluster+0x5ba>
   264a5:	add    esi,0x1
   264a8:	mov    DWORD PTR [r15+0x1c],esi
   264ac:	movsxd rsi,DWORD PTR [r11]
   264af:	mov    BYTE PTR [r8+rsi*1],0x1
   264b4:	lea    esi,[rax-0x1]
   264b7:	lea    edi,[rax-0x2]
   264ba:	cmp    esi,ecx
   264bc:	je     26729 <Cluster+0x599>
   264c2:	cmp    edi,edx
   264c4:	je     266bb <Cluster+0x52b>
   264ca:	cmp    edi,ecx
   264cc:	je     26529 <Cluster+0x399>
   264ce:	mov    rax,QWORD PTR [rsp+0x20]
   264d3:	mov    rcx,QWORD PTR [rbp+r14*2+0x0]
   264d8:	lea    rax,[rbp+rax*8+0x0]
   264dd:	mov    r8,QWORD PTR [rax]
   264e0:	mov    QWORD PTR [rbp+r14*2+0x0],r8
   264e5:	mov    QWORD PTR [rax],rcx
   264e8:	xor    ecx,ecx
   264ea:	nop    WORD PTR [rax+rax*1+0x0]
   264f0:	mov    rax,QWORD PTR [rbp+rcx*8+0x0]
   264f5:	add    rcx,0x1
   264f9:	lea    r8,[rax+r14*1]
   264fd:	add    rax,r9
   26500:	movss  xmm0,DWORD PTR [r8]
   26505:	movss  xmm1,DWORD PTR [rax]
   26509:	movss  DWORD PTR [r8],xmm1
   2650e:	movss  DWORD PTR [rax],xmm0
   26512:	cmp    r13d,ecx
   26515:	jg     264f0 <Cluster+0x360>
   26517:	mov    r11,QWORD PTR [rsp]
   2651b:	mov    ecx,DWORD PTR [r10]
   2651e:	mov    eax,DWORD PTR [r11+r14*1]
   26522:	mov    DWORD PTR [r11+r14*1],ecx
   26526:	mov    DWORD PTR [r10],eax
   26529:	cmp    esi,edx
   2652b:	jne    266b3 <Cluster+0x523>
   26531:	mov    rdx,QWORD PTR [rbp+r14*2+0x0]
   26536:	mov    r8,QWORD PTR [rbp+r14*2+0x8]
   2653b:	xor    eax,eax
   2653d:	mov    ecx,r13d
   26540:	jmp    26566 <Cluster+0x3d6>
   26542:	nop    WORD PTR [rax+rax*1+0x0]
   26548:	addss  xmm0,xmm1
   2654c:	test   ebx,ebx
   2654e:	je     265e0 <Cluster+0x450>
   26554:	mulss  xmm0,xmm2
   26558:	movss  DWORD PTR [rdx+rax*4],xmm0
   2655d:	add    rax,0x1
   26561:	cmp    r13d,eax
   26564:	jle    2658d <Cluster+0x3fd>
   26566:	movss  xmm0,DWORD PTR [rdx+rax*4]
   2656b:	movss  xmm1,DWORD PTR [r8+rax*4]
   26571:	cmp    ebx,0x1
   26574:	je     265d0 <Cluster+0x440>
   26576:	cmp    ebx,0x2
   26579:	jne    26548 <Cluster+0x3b8>
   2657b:	minss  xmm0,xmm1
   2657f:	movss  DWORD PTR [rdx+rax*4],xmm0
   26584:	add    rax,0x1
   26588:	cmp    r13d,eax
   2658b:	jg     26566 <Cluster+0x3d6>
   2658d:	xor    eax,eax
   2658f:	nop
   26590:	movss  xmm0,DWORD PTR [rdx+rax*4]
   26595:	mov    r8,QWORD PTR [rbp+rax*8+0x0]
   2659a:	add    rax,0x1
   2659e:	movss  DWORD PTR [r8+r14*1],xmm0
   265a4:	cmp    ecx,eax
   265a6:	jg     26590 <Cluster+0x400>
   265a8:	mov    rax,QWORD PTR [rsp]
   265ac:	mov    ecx,DWORD PTR [rsp+0x8]
   265b0:	sub    r13,0x1
   265b4:	sub    r15,0x28
   265b8:	mov    DWORD PTR [rax+r14*1],ecx
   265bc:	sub    r14,0x4
   265c0:	cmp    esi,0x1
   265c3:	je     267b9 <Cluster+0x629>
   265c9:	mov    eax,esi
   265cb:	jmp    26358 <Cluster+0x1c8>
   265d0:	maxss  xmm0,xmm1
   265d4:	movss  DWORD PTR [rdx+rax*4],xmm0
   265d9:	jmp    2655d <Cluster+0x3cd>
   265de:	xchg   ax,ax
   265e0:	mulss  xmm0,xmm3
   265e4:	movss  DWORD PTR [rdx+rax*4],xmm0
   265e9:	jmp    2655d <Cluster+0x3cd>
   265ee:	mov    rdi,QWORD PTR [rsp+0x10]
   265f3:	movss  DWORD PTR [r15+0x8],xmm1
   265f9:	movss  DWORD PTR [rdi+r14*1],xmm1
   265ff:	mov    edi,DWORD PTR [r10]
   26602:	movss  DWORD PTR [r15+0x10],xmm1
   26608:	movss  DWORD PTR [r15+0xc],xmm1
   2660e:	cmp    edi,r12d
   26611:	jl     2647c <Cluster+0x2ec>
   26617:	mov    r8,QWORD PTR [rsp+0x10]
   2661c:	sub    edi,r12d
   2661f:	movaps xmm0,xmm1
   26622:	movsxd rdi,edi
   26625:	subss  xmm0,DWORD PTR [r8+rdi*4]
   2662b:	movss  DWORD PTR [r15+0xc],xmm0
   26631:	cmp    esi,r12d
   26634:	jl     2664d <Cluster+0x4bd>
   26636:	mov    r8,QWORD PTR [rsp+0x10]
   2663b:	sub    esi,r12d
   2663e:	movsxd rsi,esi
   26641:	subss  xmm1,DWORD PTR [r8+rsi*4]
   26647:	movss  DWORD PTR [r15+0x10],xmm1
   2664d:	mov    r8,QWORD PTR [rsp+0x18]
   26652:	lea    rsi,[rdi+rdi*4]
   26656:	mov    QWORD PTR [rsp+0x58],r11
   2665b:	xor    edi,edi
   2665d:	mov    r11,QWORD PTR [rsp+0x50]
   26662:	mov    QWORD PTR [rsp+0x30],r9
   26667:	mov    esi,DWORD PTR [r8+rsi*8+0x20]
   2666c:	add    DWORD PTR [r15+0x1c],esi
   26670:	mov    r9,r8
   26673:	nop    DWORD PTR [rax+rax*1+0x0]
   26678:	mov    esi,DWORD PTR [r10]
   2667b:	mov    r8,QWORD PTR [r15+0x14]
   2667f:	sub    esi,r12d
   26682:	add    r8,rdi
   26685:	movsxd rsi,esi
   26688:	lea    rsi,[rsi+rsi*4]
   2668c:	mov    rsi,QWORD PTR [r9+rsi*8+0x18]
   26691:	movzx  esi,BYTE PTR [rsi+rdi*1]
   26695:	or     BYTE PTR [r8],sil
   26698:	mov    rsi,rdi
   2669b:	add    rdi,0x1
   2669f:	cmp    r11,rsi
   266a2:	jne    26678 <Cluster+0x4e8>
   266a4:	mov    r9,QWORD PTR [rsp+0x30]
   266a9:	mov    r11,QWORD PTR [rsp+0x58]
   266ae:	jmp    2648c <Cluster+0x2fc>
   266b3:	movsxd rax,edx
   266b6:	mov    QWORD PTR [rsp+0x28],rax
   266bb:	mov    r10,QWORD PTR [rsp+0x28]
   266c0:	mov    rdx,QWORD PTR [rbp+r14*2+0x8]
   266c5:	lea    r9,[r14+0x4]
   266c9:	lea    rax,[rbp+r10*8+0x0]
   266ce:	lea    r8,[r10*4+0x0]
   266d6:	mov    rcx,QWORD PTR [rax]
   266d9:	mov    QWORD PTR [rbp+r14*2+0x8],rcx
   266de:	mov    QWORD PTR [rax],rdx
   266e1:	xor    edx,edx
   266e3:	nop    DWORD PTR [rax+rax*1+0x0]
   266e8:	mov    rax,QWORD PTR [rbp+rdx*8+0x0]
   266ed:	add    rdx,0x1
   266f1:	lea    rcx,[rax+r9*1]
   266f5:	add    rax,r8
   266f8:	movss  xmm0,DWORD PTR [rcx]
   266fc:	movss  xmm1,DWORD PTR [rax]
   26700:	movss  DWORD PTR [rcx],xmm1
   26704:	movss  DWORD PTR [rax],xmm0
   26708:	cmp    r13d,edx
   2670b:	jg     266e8 <Cluster+0x558>
   2670d:	mov    rcx,QWORD PTR [rsp]
   26711:	add    r8,rcx
   26714:	mov    eax,DWORD PTR [rcx+r14*1+0x4]
   26719:	mov    edx,DWORD PTR [r8]
   2671c:	mov    DWORD PTR [rcx+r14*1+0x4],edx
   26721:	mov    DWORD PTR [r8],eax
   26724:	jmp    26531 <Cluster+0x3a1>
   26729:	cmp    edi,edx
   2672b:	je     26531 <Cluster+0x3a1>
   26731:	mov    rax,QWORD PTR [rsp+0x38]
   26736:	mov    r9,QWORD PTR [rsp+0x40]
   2673b:	mov    r10,r11
   2673e:	mov    edx,ecx
   26740:	mov    QWORD PTR [rsp+0x20],rax
   26745:	jmp    264ce <Cluster+0x33e>
   2674a:	sub    edi,r12d
   2674d:	mov    r8,QWORD PTR [rsp+0x18]
   26752:	mov    QWORD PTR [rsp+0x58],r9
   26757:	movsxd rdi,edi
   2675a:	mov    QWORD PTR [rsp+0x60],r10
   2675f:	mov    r10,QWORD PTR [rsp+0x50]
   26764:	lea    rdi,[rdi+rdi*4]
   26768:	mov    r9,r8
   2676b:	add    esi,DWORD PTR [r8+rdi*8+0x20]
   26770:	mov    r8,QWORD PTR [rsp+0x30]
   26775:	xor    edi,edi
   26777:	mov    DWORD PTR [r15+0x1c],esi
   2677b:	jmp    26787 <Cluster+0x5f7>
   2677d:	nop    DWORD PTR [rax]
   26780:	mov    r8,QWORD PTR [r15+0x14]
   26784:	mov    rdi,rsi
   26787:	mov    esi,DWORD PTR [r11]
   2678a:	sub    esi,r12d
   2678d:	movsxd rsi,esi
   26790:	lea    rsi,[rsi+rsi*4]
   26794:	mov    rsi,QWORD PTR [r9+rsi*8+0x18]
   26799:	movzx  esi,BYTE PTR [rsi+rdi*1]
   2679d:	or     BYTE PTR [r8+rdi*1],sil
   267a1:	lea    rsi,[rdi+0x1]
   267a5:	cmp    r10,rdi
   267a8:	jne    26780 <Cluster+0x5f0>
   267aa:	mov    r9,QWORD PTR [rsp+0x58]
   267af:	mov    r10,QWORD PTR [rsp+0x60]
   267b4:	jmp    264b4 <Cluster+0x324>
   267b9:	mov    esi,r12d
   267bc:	mov    rdi,rbp
   267bf:	call   368c0 <Free2DArray>
   267c4:	mov    rdi,QWORD PTR [rsp]
   267c8:	call   3460 <free@plt>
   267cd:	mov    rdi,QWORD PTR [rsp+0x10]
   267d2:	call   3460 <free@plt>
   267d7:	mov    rax,QWORD PTR [rsp+0x68]
   267dc:	mov    rbx,QWORD PTR [rsp+0x18]
   267e1:	mov    QWORD PTR [rax],rbx
   267e4:	add    rsp,0x78
   267e8:	mov    eax,0x1
   267ed:	pop    rbx
   267ee:	pop    rbp
   267ef:	pop    r12
   267f1:	pop    r13
   267f3:	pop    r14
   267f5:	pop    r15
   267f7:	ret    
   267f8:	lea    rdi,[rip+0x19e07]        # 40606 <defmq.7318+0x446>
   267ff:	call   317f0 <Die>
   26804:	mov    r9d,DWORD PTR [rsp+0x8]
   26809:	jmp    26304 <Cluster+0x174>
   2680e:	mov    esi,0xb0
   26813:	lea    rdi,[rip+0x19de2]        # 405fc <defmq.7318+0x43c>
   2681a:	call   36810 <sre_malloc>
   2681f:	mov    rdx,QWORD PTR [rsp+0x8]
   26824:	mov    esi,0xb1
   26829:	lea    rdi,[rip+0x19dcc]        # 405fc <defmq.7318+0x43c>
   26830:	mov    QWORD PTR [rsp],rax
   26834:	call   36810 <sre_malloc>
   26839:	mov    QWORD PTR [rsp+0x10],rax
   2683e:	cmp    r12d,0x1
   26842:	jg     262b9 <Cluster+0x129>
   26848:	xor    r9d,r9d
   2684b:	jmp    262e4 <Cluster+0x154>

0000000000026850 <FreePhylo>:
   26850:	endbr64 
   26854:	push   r12
   26856:	mov    r12,rdi
   26859:	push   rbp
   2685a:	push   rbx
   2685b:	cmp    esi,0x1
   2685e:	jle    26881 <FreePhylo+0x31>
   26860:	lea    eax,[rsi-0x2]
   26863:	lea    rbx,[rdi+0x18]
   26867:	lea    rax,[rax+rax*4]
   2686b:	lea    rbp,[rdi+rax*8+0x40]
   26870:	mov    rdi,QWORD PTR [rbx]
   26873:	add    rbx,0x28
   26877:	call   3460 <free@plt>
   2687c:	cmp    rbx,rbp
   2687f:	jne    26870 <FreePhylo+0x20>
   26881:	pop    rbx
   26882:	mov    rdi,r12
   26885:	pop    rbp
   26886:	pop    r12
   26888:	jmp    3460 <free@plt>
   2688d:	nop    DWORD PTR [rax]

0000000000026890 <MakeDiffMx>:
   26890:	endbr64 
   26894:	push   r15
   26896:	push   r14
   26898:	mov    r14,rdi
   2689b:	mov    edi,esi
   2689d:	push   r13
   2689f:	mov    r13d,esi
   268a2:	push   r12
   268a4:	push   rbp
   268a5:	push   rbx
   268a6:	sub    rsp,0x18
   268aa:	mov    QWORD PTR [rsp+0x8],rdx
   268af:	call   35b40 <FMX2Alloc>
   268b4:	mov    r15,rax
   268b7:	test   r13d,r13d
   268ba:	jle    26928 <MakeDiffMx+0x98>
   268bc:	lea    eax,[r13-0x1]
   268c0:	xor    ebp,ebp
   268c2:	mov    QWORD PTR [rsp],rax
   268c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   268d0:	lea    r12,[rbp*4+0x0]
   268d8:	mov    rbx,rbp
   268db:	nop    DWORD PTR [rax+rax*1+0x0]
   268e0:	mov    rsi,QWORD PTR [r14+rbx*8]
   268e4:	mov    rdi,QWORD PTR [r14+rbp*8]
   268e8:	call   24450 <PairwiseIdentity>
   268ed:	movss  xmm1,DWORD PTR [rip+0x16aa7]        # 3d39c <_IO_stdin_used+0x39c>
   268f5:	mov    rdx,QWORD PTR [r15+rbx*8]
   268f9:	subss  xmm1,xmm0
   268fd:	movss  DWORD PTR [rdx+r12*1],xmm1
   26903:	mov    rdx,QWORD PTR [r15+rbp*8]
   26907:	movss  DWORD PTR [rdx+rbx*4],xmm1
   2690c:	add    rbx,0x1
   26910:	cmp    r13d,ebx
   26913:	jg     268e0 <MakeDiffMx+0x50>
   26915:	lea    rdx,[rbp+0x1]
   26919:	cmp    rbp,QWORD PTR [rsp]
   2691d:	je     26928 <MakeDiffMx+0x98>
   2691f:	mov    rbp,rdx
   26922:	jmp    268d0 <MakeDiffMx+0x40>
   26924:	nop    DWORD PTR [rax+0x0]
   26928:	mov    rax,QWORD PTR [rsp+0x8]
   2692d:	mov    QWORD PTR [rax],r15
   26930:	add    rsp,0x18
   26934:	pop    rbx
   26935:	pop    rbp
   26936:	pop    r12
   26938:	pop    r13
   2693a:	pop    r14
   2693c:	pop    r15
   2693e:	ret    
   2693f:	nop

0000000000026940 <MakeIdentityMx>:
   26940:	endbr64 
   26944:	push   r15
   26946:	push   r14
   26948:	mov    r14,rdi
   2694b:	mov    edi,esi
   2694d:	push   r13
   2694f:	push   r12
   26951:	push   rbp
   26952:	push   rbx
   26953:	mov    ebx,esi
   26955:	sub    rsp,0x28
   26959:	mov    DWORD PTR [rsp+0xc],esi
   2695d:	mov    QWORD PTR [rsp+0x18],rdx
   26962:	call   35b40 <FMX2Alloc>
   26967:	mov    r15,rax
   2696a:	test   ebx,ebx
   2696c:	jle    269d0 <MakeIdentityMx+0x90>
   2696e:	mov    eax,ebx
   26970:	xor    ebp,ebp
   26972:	sub    eax,0x1
   26975:	mov    QWORD PTR [rsp+0x10],rax
   2697a:	nop    WORD PTR [rax+rax*1+0x0]
   26980:	lea    r12,[rbp*4+0x0]
   26988:	mov    rbx,rbp
   2698b:	nop    DWORD PTR [rax+rax*1+0x0]
   26990:	mov    rsi,QWORD PTR [r14+rbx*8]
   26994:	mov    rdi,QWORD PTR [r14+rbp*8]
   26998:	mov    r13,QWORD PTR [r15+rbx*8]
   2699c:	call   24450 <PairwiseIdentity>
   269a1:	mov    rdx,QWORD PTR [r15+rbp*8]
   269a5:	add    r13,r12
   269a8:	movss  DWORD PTR [r13+0x0],xmm0
   269ae:	movss  DWORD PTR [rdx+rbx*4],xmm0
   269b3:	add    rbx,0x1
   269b7:	cmp    DWORD PTR [rsp+0xc],ebx
   269bb:	jg     26990 <MakeIdentityMx+0x50>
   269bd:	lea    rdx,[rbp+0x1]
   269c1:	cmp    QWORD PTR [rsp+0x10],rbp
   269c6:	je     269d0 <MakeIdentityMx+0x90>
   269c8:	mov    rbp,rdx
   269cb:	jmp    26980 <MakeIdentityMx+0x40>
   269cd:	nop    DWORD PTR [rax]
   269d0:	mov    rax,QWORD PTR [rsp+0x18]
   269d5:	mov    QWORD PTR [rax],r15
   269d8:	add    rsp,0x28
   269dc:	pop    rbx
   269dd:	pop    rbp
   269de:	pop    r12
   269e0:	pop    r13
   269e2:	pop    r14
   269e4:	pop    r15
   269e6:	ret    
   269e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000269f0 <PrintNewHampshireTree>:
   269f0:	endbr64 
   269f4:	push   r15
   269f6:	push   r14
   269f8:	mov    r14,rdi
   269fb:	lea    rdi,[rip+0x19bfa]        # 405fc <defmq.7318+0x43c>
   26a02:	push   r13
   26a04:	push   r12
   26a06:	xor    r12d,r12d
   26a09:	push   rbp
   26a0a:	push   rbx
   26a0b:	mov    ebx,ecx
   26a0d:	sub    rsp,0x38
   26a11:	mov    QWORD PTR [rsp+0x10],rsi
   26a16:	mov    esi,0x1d0
   26a1b:	lea    r15,[rsp+0x24]
   26a20:	mov    QWORD PTR [rsp+0x18],rdx
   26a25:	mov    rax,QWORD PTR fs:0x28
   26a2e:	mov    QWORD PTR [rsp+0x28],rax
   26a33:	xor    eax,eax
   26a35:	lea    eax,[rcx+rcx*1]
   26a38:	lea    edx,[rax-0x1]
   26a3b:	mov    DWORD PTR [rsp+0xc],eax
   26a3f:	movsxd rdx,edx
   26a42:	shl    rdx,0x2
   26a46:	call   36810 <sre_malloc>
   26a4b:	mov    r13,rax
   26a4e:	call   391a0 <InitIntStack>
   26a53:	mov    esi,ebx
   26a55:	mov    rdi,rax
   26a58:	mov    rbp,rax
   26a5b:	call   391f0 <PushIntStack>
   26a60:	mov    rsi,r15
   26a63:	mov    rdi,rbp
   26a66:	call   39240 <PopIntStack>
   26a6b:	test   eax,eax
   26a6d:	je     26ad5 <PrintNewHampshireTree+0xe5>
   26a6f:	movsxd rax,DWORD PTR [rsp+0x24]
   26a74:	cmp    eax,ebx
   26a76:	jge    26b10 <PrintNewHampshireTree+0x120>
   26a7c:	test   r12d,r12d
   26a7f:	jne    26be8 <PrintNewHampshireTree+0x1f8>
   26a85:	mov    rdx,QWORD PTR [rsp+0x10]
   26a8a:	pxor   xmm0,xmm0
   26a8e:	mov    esi,0x1
   26a93:	mov    rdi,r14
   26a96:	cvtss2sd xmm0,DWORD PTR [r13+rax*4+0x0]
   26a9d:	imul   rax,rax,0x168
   26aa4:	mov    r12d,0x1
   26aaa:	add    rax,QWORD PTR [rdx+0x28]
   26aae:	lea    rdx,[rip+0x19b65]        # 4061a <defmq.7318+0x45a>
   26ab5:	mov    rcx,rax
   26ab8:	mov    eax,0x1
   26abd:	add    rcx,0x4
   26ac1:	call   37c0 <__fprintf_chk@plt>
   26ac6:	mov    rsi,r15
   26ac9:	mov    rdi,rbp
   26acc:	call   39240 <PopIntStack>
   26ad1:	test   eax,eax
   26ad3:	jne    26a6f <PrintNewHampshireTree+0x7f>
   26ad5:	mov    rdi,rbp
   26ad8:	call   392d0 <FreeIntStack>
   26add:	mov    rdi,r13
   26ae0:	call   3460 <free@plt>
   26ae5:	mov    rax,QWORD PTR [rsp+0x28]
   26aea:	xor    rax,QWORD PTR fs:0x28
   26af3:	jne    26c46 <PrintNewHampshireTree+0x256>
   26af9:	add    rsp,0x38
   26afd:	pop    rbx
   26afe:	pop    rbp
   26aff:	pop    r12
   26b01:	pop    r13
   26b03:	pop    r14
   26b05:	pop    r15
   26b07:	ret    
   26b08:	nop    DWORD PTR [rax+rax*1+0x0]
   26b10:	cmp    DWORD PTR [rsp+0xc],eax
   26b14:	jle    26bb0 <PrintNewHampshireTree+0x1c0>
   26b1a:	test   r12d,r12d
   26b1d:	jne    26c28 <PrintNewHampshireTree+0x238>
   26b23:	mov    rsi,r14
   26b26:	mov    edi,0x28
   26b2b:	call   3600 <fputc@plt>
   26b30:	mov    esi,DWORD PTR [rsp+0x24]
   26b34:	mov    rdi,rbp
   26b37:	add    esi,ebx
   26b39:	call   391f0 <PushIntStack>
   26b3e:	mov    eax,DWORD PTR [rsp+0x24]
   26b42:	mov    r12,QWORD PTR [rsp+0x18]
   26b47:	mov    rdi,rbp
   26b4a:	sub    eax,ebx
   26b4c:	cdqe   
   26b4e:	lea    rax,[rax+rax*4]
   26b52:	mov    esi,DWORD PTR [r12+rax*8+0x8]
   26b57:	call   391f0 <PushIntStack>
   26b5c:	mov    eax,DWORD PTR [rsp+0x24]
   26b60:	mov    rdi,rbp
   26b63:	sub    eax,ebx
   26b65:	cdqe   
   26b67:	lea    rax,[rax+rax*4]
   26b6b:	mov    esi,DWORD PTR [r12+rax*8+0x4]
   26b70:	call   391f0 <PushIntStack>
   26b75:	mov    eax,DWORD PTR [rsp+0x24]
   26b79:	sub    eax,ebx
   26b7b:	cdqe   
   26b7d:	lea    rax,[rax+rax*4]
   26b81:	lea    rax,[r12+rax*8]
   26b85:	xor    r12d,r12d
   26b88:	movss  xmm0,DWORD PTR [rax+0x14]
   26b8d:	movsxd rdx,DWORD PTR [rax+0x8]
   26b91:	movss  DWORD PTR [r13+rdx*4+0x0],xmm0
   26b98:	movss  xmm0,DWORD PTR [rax+0x10]
   26b9d:	movsxd rax,DWORD PTR [rax+0x4]
   26ba1:	movss  DWORD PTR [r13+rax*4+0x0],xmm0
   26ba8:	jmp    26a60 <PrintNewHampshireTree+0x70>
   26bad:	nop    DWORD PTR [rax]
   26bb0:	je     26c00 <PrintNewHampshireTree+0x210>
   26bb2:	sub    eax,ebx
   26bb4:	pxor   xmm0,xmm0
   26bb8:	lea    rdx,[rip+0x19a6a]        # 40629 <defmq.7318+0x469>
   26bbf:	mov    rdi,r14
   26bc2:	cdqe   
   26bc4:	mov    esi,0x1
   26bc9:	mov    r12d,0x1
   26bcf:	cvtss2sd xmm0,DWORD PTR [r13+rax*4+0x0]
   26bd6:	mov    eax,0x1
   26bdb:	call   37c0 <__fprintf_chk@plt>
   26be0:	jmp    26a60 <PrintNewHampshireTree+0x70>
   26be5:	nop    DWORD PTR [rax]
   26be8:	mov    rsi,r14
   26beb:	mov    edi,0x2c
   26bf0:	call   3600 <fputc@plt>
   26bf5:	movsxd rax,DWORD PTR [rsp+0x24]
   26bfa:	jmp    26a85 <PrintNewHampshireTree+0x95>
   26bff:	nop
   26c00:	mov    rcx,r14
   26c03:	mov    edx,0x3
   26c08:	mov    esi,0x1
   26c0d:	mov    r12d,0x1
   26c13:	lea    rdi,[rip+0x19a0b]        # 40625 <defmq.7318+0x465>
   26c1a:	call   37b0 <fwrite@plt>
   26c1f:	jmp    26a60 <PrintNewHampshireTree+0x70>
   26c24:	nop    DWORD PTR [rax+0x0]
   26c28:	mov    rcx,r14
   26c2b:	mov    edx,0x2
   26c30:	mov    esi,0x1
   26c35:	lea    rdi,[rip+0x199e6]        # 40622 <defmq.7318+0x462>
   26c3c:	call   37b0 <fwrite@plt>
   26c41:	jmp    26b23 <PrintNewHampshireTree+0x133>
   26c46:	call   3570 <__stack_chk_fail@plt>
   26c4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000026c50 <PrintPhylo>:
   26c50:	endbr64 
   26c54:	cmp    ecx,0x1
   26c57:	jle    26db0 <PrintPhylo+0x160>
   26c5d:	push   r15
   26c5f:	lea    eax,[rcx-0x1]
   26c62:	mov    r15,rsi
   26c65:	push   r14
   26c67:	lea    r14,[rip+0x199c2]        # 40630 <defmq.7318+0x470>
   26c6e:	push   r13
   26c70:	xor    r13d,r13d
   26c73:	push   r12
   26c75:	mov    r12d,ecx
   26c78:	push   rbp
   26c79:	mov    rbp,rdi
   26c7c:	push   rbx
   26c7d:	mov    rbx,rdx
   26c80:	sub    rsp,0x18
   26c84:	mov    DWORD PTR [rsp+0xc],eax
   26c88:	nop    DWORD PTR [rax+rax*1+0x0]
   26c90:	lea    r8d,[r13+r12*1+0x0]
   26c95:	mov    ecx,r13d
   26c98:	mov    esi,0x1
   26c9d:	mov    rdi,rbp
   26ca0:	lea    rdx,[rip+0x19992]        # 40639 <defmq.7318+0x479>
   26ca7:	xor    eax,eax
   26ca9:	call   37c0 <__fprintf_chk@plt>
   26cae:	mov    r8d,DWORD PTR [rbx]
   26cb1:	mov    esi,0x1
   26cb6:	mov    rdi,rbp
   26cb9:	lea    rdx,[rip+0x19995]        # 40655 <defmq.7318+0x495>
   26cc0:	xor    eax,eax
   26cc2:	mov    ecx,r8d
   26cc5:	sub    ecx,r12d
   26cc8:	call   37c0 <__fprintf_chk@plt>
   26ccd:	mov    ecx,DWORD PTR [rbx+0x4]
   26cd0:	pxor   xmm0,xmm0
   26cd4:	mov    r8,r14
   26cd7:	cvtss2sd xmm0,DWORD PTR [rbx+0x10]
   26cdc:	cmp    ecx,r12d
   26cdf:	jge    26cf6 <PrintPhylo+0xa6>
   26ce1:	movsxd r8,ecx
   26ce4:	sub    ecx,r12d
   26ce7:	imul   r8,r8,0x168
   26cee:	add    r8,QWORD PTR [r15+0x28]
   26cf2:	add    r8,0x4
   26cf6:	lea    rdx,[rip+0x1996f]        # 4066c <defmq.7318+0x4ac>
   26cfd:	mov    esi,0x1
   26d02:	mov    rdi,rbp
   26d05:	mov    eax,0x1
   26d0a:	call   37c0 <__fprintf_chk@plt>
   26d0f:	mov    ecx,DWORD PTR [rbx+0x8]
   26d12:	pxor   xmm0,xmm0
   26d16:	mov    r8,r14
   26d19:	cvtss2sd xmm0,DWORD PTR [rbx+0x14]
   26d1e:	cmp    ecx,r12d
   26d21:	jge    26d38 <PrintPhylo+0xe8>
   26d23:	movsxd r8,ecx
   26d26:	sub    ecx,r12d
   26d29:	imul   r8,r8,0x168
   26d30:	add    r8,QWORD PTR [r15+0x28]
   26d34:	add    r8,0x4
   26d38:	mov    esi,0x1
   26d3d:	mov    rdi,rbp
   26d40:	add    r13d,0x1
   26d44:	add    rbx,0x28
   26d48:	lea    rdx,[rip+0x19932]        # 40681 <defmq.7318+0x4c1>
   26d4f:	mov    eax,0x1
   26d54:	call   37c0 <__fprintf_chk@plt>
   26d59:	lea    rdx,[rip+0x19937]        # 40697 <defmq.7318+0x4d7>
   26d60:	mov    rdi,rbp
   26d63:	pxor   xmm0,xmm0
   26d67:	mov    esi,0x1
   26d6c:	mov    eax,0x1
   26d71:	cvtss2sd xmm0,DWORD PTR [rbx-0x1c]
   26d76:	call   37c0 <__fprintf_chk@plt>
   26d7b:	mov    ecx,DWORD PTR [rbx-0x8]
   26d7e:	mov    esi,0x1
   26d83:	mov    rdi,rbp
   26d86:	lea    rdx,[rip+0x19918]        # 406a5 <defmq.7318+0x4e5>
   26d8d:	xor    eax,eax
   26d8f:	call   37c0 <__fprintf_chk@plt>
   26d94:	cmp    r13d,DWORD PTR [rsp+0xc]
   26d99:	jne    26c90 <PrintPhylo+0x40>
   26d9f:	add    rsp,0x18
   26da3:	pop    rbx
   26da4:	pop    rbp
   26da5:	pop    r12
   26da7:	pop    r13
   26da9:	pop    r14
   26dab:	pop    r15
   26dad:	ret    
   26dae:	xchg   ax,ax
   26db0:	ret    
   26db1:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26dbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000026dc0 <ParsePAMFile>:
   26dc0:	endbr64 
   26dc4:	push   r15
   26dc6:	push   r14
   26dc8:	push   r13
   26dca:	push   r12
   26dcc:	push   rbp
   26dcd:	push   rbx
   26dce:	sub    rsp,0x2c8
   26dd5:	mov    QWORD PTR [rsp+0x30],rsi
   26dda:	mov    QWORD PTR [rsp+0x28],rdx
   26ddf:	mov    rax,QWORD PTR fs:0x28
   26de8:	mov    QWORD PTR [rsp+0x2b8],rax
   26df0:	xor    eax,eax
   26df2:	test   rdi,rdi
   26df5:	je     270b0 <ParsePAMFile+0x2f0>
   26dfb:	pxor   xmm4,xmm4
   26dff:	mov    rbp,rdi
   26e02:	xor    r13d,r13d
   26e05:	movss  DWORD PTR [rsp+0x8],xmm4
   26e0b:	lea    rbx,[rsp+0xb0]
   26e13:	nop    DWORD PTR [rax+rax*1+0x0]
   26e18:	mov    rdx,rbp
   26e1b:	mov    esi,0x200
   26e20:	mov    rdi,rbx
   26e23:	call   3620 <fgets@plt>
   26e28:	test   rax,rax
   26e2b:	je     270b0 <ParsePAMFile+0x2f0>
   26e31:	lea    rsi,[rip+0x19888]        # 406c0 <defmq.7318+0x500>
   26e38:	mov    rdi,rbx
   26e3b:	call   37f0 <strstr@plt>
   26e40:	test   rax,rax
   26e43:	je     27040 <ParsePAMFile+0x280>
   26e49:	mov    esi,0x2f
   26e4e:	mov    rdi,rbx
   26e51:	call   3590 <strchr@plt>
   26e56:	mov    r12,rax
   26e59:	test   rax,rax
   26e5c:	je     27040 <ParsePAMFile+0x280>
   26e62:	lea    r13,[rax+0x1]
   26e66:	call   3820 <__ctype_b_loc@plt>
   26e6b:	movsx  rdx,BYTE PTR [r12+0x1]
   26e71:	mov    rax,QWORD PTR [rax]
   26e74:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   26e79:	je     27130 <ParsePAMFile+0x370>
   26e7f:	mov    rdi,r13
   26e82:	xor    esi,esi
   26e84:	mov    r13d,0x1
   26e8a:	call   3510 <strtod@plt>
   26e8f:	movsd  xmm1,QWORD PTR [rip+0x198b1]        # 40748 <defmq.7318+0x588>
   26e97:	pxor   xmm2,xmm2
   26e9b:	divsd  xmm1,xmm0
   26e9f:	cvtsd2ss xmm2,xmm1
   26ea3:	movss  DWORD PTR [rsp+0x8],xmm2
   26ea9:	lea    rsi,[rip+0x1ae1c]        # 41ccc <CSWTCH.18+0x60c>
   26eb0:	mov    rdi,rbx
   26eb3:	call   3770 <strtok@plt>
   26eb8:	test   rax,rax
   26ebb:	je     26e18 <ParsePAMFile+0x58>
   26ec1:	movsx  eax,BYTE PTR [rax]
   26ec4:	cmp    al,0x23
   26ec6:	je     26e18 <ParsePAMFile+0x58>
   26ecc:	xor    r15d,r15d
   26ecf:	lea    r14,[rsp+0x40]
   26ed4:	mov    r12d,0x1a
   26eda:	jmp    26ee3 <ParsePAMFile+0x123>
   26edc:	nop    DWORD PTR [rax+0x0]
   26ee0:	movsx  eax,BYTE PTR [rax]
   26ee3:	sub    eax,0x41
   26ee6:	lea    rsi,[rip+0x1addf]        # 41ccc <CSWTCH.18+0x60c>
   26eed:	mov    DWORD PTR [rsp+0xc],r15d
   26ef2:	cmp    eax,0x19
   26ef5:	cmova  eax,r12d
   26ef9:	xor    edi,edi
   26efb:	mov    DWORD PTR [r14+r15*4],eax
   26eff:	add    r15,0x1
   26f03:	call   3770 <strtok@plt>
   26f08:	test   rax,rax
   26f0b:	jne    26ee0 <ParsePAMFile+0x120>
   26f0d:	mov    esi,0x8
   26f12:	mov    edi,0x1b
   26f17:	call   3630 <calloc@plt>
   26f1c:	mov    QWORD PTR [rsp+0x20],rax
   26f21:	test   rax,rax
   26f24:	je     27172 <ParsePAMFile+0x3b2>
   26f2a:	mov    rax,QWORD PTR [rsp+0x20]
   26f2f:	mov    r15,rax
   26f32:	lea    r12,[rax+0xd8]
   26f39:	nop    DWORD PTR [rax+0x0]
   26f40:	mov    esi,0x4
   26f45:	mov    edi,0x1b
   26f4a:	call   3630 <calloc@plt>
   26f4f:	mov    QWORD PTR [r15],rax
   26f52:	test   rax,rax
   26f55:	je     27141 <ParsePAMFile+0x381>
   26f5b:	add    r15,0x8
   26f5f:	cmp    r15,r12
   26f62:	jne    26f40 <ParsePAMFile+0x180>
   26f64:	movsxd rax,DWORD PTR [rsp+0xc]
   26f69:	mov    QWORD PTR [rsp+0x18],r14
   26f6e:	lea    rax,[rsp+rax*4+0x44]
   26f73:	mov    QWORD PTR [rsp+0x38],rax
   26f78:	mov    rdx,rbp
   26f7b:	mov    esi,0x200
   26f80:	mov    rdi,rbx
   26f83:	call   3620 <fgets@plt>
   26f88:	test   rax,rax
   26f8b:	je     270b0 <ParsePAMFile+0x2f0>
   26f91:	mov    rdi,rbx
   26f94:	lea    rsi,[rip+0x1ad31]        # 41ccc <CSWTCH.18+0x60c>
   26f9b:	call   3770 <strtok@plt>
   26fa0:	mov    rdi,rax
   26fa3:	test   rax,rax
   26fa6:	je     270b0 <ParsePAMFile+0x2f0>
   26fac:	xor    r14d,r14d
   26faf:	lea    r15,[rip+0x1ad16]        # 41ccc <CSWTCH.18+0x60c>
   26fb6:	jmp    26fe5 <ParsePAMFile+0x225>
   26fb8:	nop    DWORD PTR [rax+rax*1+0x0]
   26fc0:	lea    r12d,[r14-0x1]
   26fc4:	xor    edi,edi
   26fc6:	mov    rsi,r15
   26fc9:	call   3770 <strtok@plt>
   26fce:	mov    rdi,rax
   26fd1:	cmp    DWORD PTR [rsp+0xc],r12d
   26fd6:	jle    270e8 <ParsePAMFile+0x328>
   26fdc:	test   rdi,rdi
   26fdf:	je     270b0 <ParsePAMFile+0x2f0>
   26fe5:	movsx  r12,BYTE PTR [rdi]
   26fe9:	mov    QWORD PTR [rsp+0x10],rdi
   26fee:	cmp    r12b,0x2a
   26ff2:	je     26fc0 <ParsePAMFile+0x200>
   26ff4:	call   3820 <__ctype_b_loc@plt>
   26ff9:	mov    rdi,QWORD PTR [rsp+0x10]
   26ffe:	mov    rax,QWORD PTR [rax]
   27001:	test   BYTE PTR [rax+r12*2+0x1],0x4
   27007:	jne    26fc0 <ParsePAMFile+0x200>
   27009:	mov    rax,QWORD PTR [rsp+0x18]
   2700e:	mov    rcx,QWORD PTR [rsp+0x20]
   27013:	movsxd rdx,r14d
   27016:	xor    esi,esi
   27018:	movsxd rdx,DWORD PTR [rsp+rdx*4+0x40]
   2701d:	movsxd rax,DWORD PTR [rax]
   27020:	mov    rax,QWORD PTR [rcx+rax*8]
   27024:	lea    r12,[rax+rdx*4]
   27028:	mov    edx,0xa
   2702d:	call   3670 <strtol@plt>
   27032:	mov    DWORD PTR [r12],eax
   27036:	mov    r12d,r14d
   27039:	add    r14d,0x1
   2703d:	jmp    26fc4 <ParsePAMFile+0x204>
   2703f:	nop
   27040:	lea    rsi,[rip+0x196d9]        # 40720 <defmq.7318+0x560>
   27047:	mov    rdi,rbx
   2704a:	call   37f0 <strstr@plt>
   2704f:	test   rax,rax
   27052:	je     26ea9 <ParsePAMFile+0xe9>
   27058:	nop    DWORD PTR [rax+rax*1+0x0]
   27060:	mov    esi,0x3d
   27065:	mov    rdi,rbx
   27068:	call   35b0 <strrchr@plt>
   2706d:	test   rax,rax
   27070:	je     26ea9 <ParsePAMFile+0xe9>
   27076:	lea    r12,[rax+0x2]
   2707a:	mov    rdi,r12
   2707d:	call   3ab70 <IsReal>
   27082:	test   eax,eax
   27084:	je     27060 <ParsePAMFile+0x2a0>
   27086:	xor    esi,esi
   27088:	mov    rdi,r12
   2708b:	mov    r13d,0x1
   27091:	call   3510 <strtod@plt>
   27096:	pxor   xmm3,xmm3
   2709a:	cvtsd2ss xmm3,xmm0
   2709e:	movss  DWORD PTR [rsp+0x8],xmm3
   270a4:	jmp    26ea9 <ParsePAMFile+0xe9>
   270a9:	nop    DWORD PTR [rax+0x0]
   270b0:	mov    DWORD PTR [rip+0x3b2b6],0x2        # 62370 <squid_errno>
   270ba:	xor    eax,eax
   270bc:	mov    rcx,QWORD PTR [rsp+0x2b8]
   270c4:	xor    rcx,QWORD PTR fs:0x28
   270cd:	jne    2716d <ParsePAMFile+0x3ad>
   270d3:	add    rsp,0x2c8
   270da:	pop    rbx
   270db:	pop    rbp
   270dc:	pop    r12
   270de:	pop    r13
   270e0:	pop    r14
   270e2:	pop    r15
   270e4:	ret    
   270e5:	nop    DWORD PTR [rax]
   270e8:	add    QWORD PTR [rsp+0x18],0x4
   270ee:	mov    rax,QWORD PTR [rsp+0x18]
   270f3:	cmp    rax,QWORD PTR [rsp+0x38]
   270f8:	jne    26f78 <ParsePAMFile+0x1b8>
   270fe:	mov    rax,QWORD PTR [rsp+0x28]
   27103:	test   rax,rax
   27106:	je     27117 <ParsePAMFile+0x357>
   27108:	test   r13d,r13d
   2710b:	je     27152 <ParsePAMFile+0x392>
   2710d:	movss  xmm5,DWORD PTR [rsp+0x8]
   27113:	movss  DWORD PTR [rax],xmm5
   27117:	mov    rax,QWORD PTR [rsp+0x30]
   2711c:	mov    rcx,QWORD PTR [rsp+0x20]
   27121:	mov    QWORD PTR [rax],rcx
   27124:	mov    eax,0x1
   27129:	jmp    270bc <ParsePAMFile+0x2fc>
   2712b:	nop    DWORD PTR [rax+rax*1+0x0]
   27130:	mov    DWORD PTR [rip+0x3b236],0x5        # 62370 <squid_errno>
   2713a:	xor    eax,eax
   2713c:	jmp    270bc <ParsePAMFile+0x2fc>
   27141:	lea    rdi,[rip+0x195ed]        # 40735 <defmq.7318+0x575>
   27148:	call   317f0 <Die>
   2714d:	jmp    26f5b <ParsePAMFile+0x19b>
   27152:	xor    eax,eax
   27154:	lea    rdi,[rip+0x19585]        # 406e0 <defmq.7318+0x520>
   2715b:	call   318f0 <Warn>
   27160:	mov    rax,QWORD PTR [rsp+0x28]
   27165:	mov    DWORD PTR [rax],0x3eb17218
   2716b:	jmp    27117 <ParsePAMFile+0x357>
   2716d:	call   3570 <__stack_chk_fail@plt>
   27172:	lea    rdi,[rip+0x195bc]        # 40735 <defmq.7318+0x575>
   27179:	call   317f0 <Die>
   2717e:	jmp    26f2a <ParsePAMFile+0x16a>
   27183:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2718d:	nop    DWORD PTR [rax]

0000000000027190 <EPSWriteSmallMSA>:
   27190:	endbr64 
   27194:	push   r15
   27196:	push   r14
   27198:	push   r13
   2719a:	push   r12
   2719c:	mov    r12,rdi
   2719f:	lea    rdi,[rip+0x195aa]        # 40750 <defmq.7318+0x590>
   271a6:	push   rbp
   271a7:	mov    rbp,rsi
   271aa:	mov    esi,0xffffffff
   271af:	push   rbx
   271b0:	sub    rsp,0x28
   271b4:	call   36ce0 <sre_strdup>
   271b9:	mov    edx,DWORD PTR [rbp+0x1c]
   271bc:	mov    QWORD PTR [rsp+0x18],rax
   271c1:	test   edx,edx
   271c3:	jle    2745b <EPSWriteSmallMSA+0x2cb>
   271c9:	mov    rax,QWORD PTR [rbp+0x8]
   271cd:	sub    edx,0x1
   271d0:	xor    r14d,r14d
   271d3:	lea    r13,[rax+0x8]
   271d7:	lea    rbx,[r13+rdx*8+0x0]
   271dc:	jmp    271e4 <EPSWriteSmallMSA+0x54>
   271de:	xchg   ax,ax
   271e0:	add    r13,0x8
   271e4:	mov    rdi,QWORD PTR [rax]
   271e7:	call   3560 <strlen@plt>
   271ec:	cmp    r14d,eax
   271ef:	cmovl  r14d,eax
   271f3:	mov    rax,r13
   271f6:	cmp    rbx,r13
   271f9:	jne    271e0 <EPSWriteSmallMSA+0x50>
   271fb:	lea    eax,[r14*8+0x8]
   27203:	mov    DWORD PTR [rsp+0x14],eax
   27207:	mov    eax,DWORD PTR [rbp+0x18]
   2720a:	cmp    eax,0x32
   2720d:	jg     27411 <EPSWriteSmallMSA+0x281>
   27213:	lea    ebx,[rax+rax*8]
   27216:	add    ebx,DWORD PTR [rsp+0x14]
   2721a:	cmp    ebx,0x264
   27220:	jg     27435 <EPSWriteSmallMSA+0x2a5>
   27226:	mov    eax,DWORD PTR [rbp+0x1c]
   27229:	mov    r13d,eax
   2722c:	shl    r13d,0x4
   27230:	sub    r13d,eax
   27233:	cmp    r13d,0x318
   2723a:	jg     27448 <EPSWriteSmallMSA+0x2b8>
   27240:	lea    rdx,[rip+0x1952f]        # 40776 <defmq.7318+0x5b6>
   27247:	mov    esi,0x1
   2724c:	mov    rdi,r12
   2724f:	xor    eax,eax
   27251:	call   37c0 <__fprintf_chk@plt>
   27256:	sub    rsp,0x8
   2725a:	mov    r9d,ebx
   2725d:	xor    r8d,r8d
   27260:	push   r13
   27262:	xor    ecx,ecx
   27264:	lea    rdx,[rip+0x19525]        # 40790 <defmq.7318+0x5d0>
   2726b:	mov    esi,0x1
   27270:	mov    rdi,r12
   27273:	xor    eax,eax
   27275:	lea    r13,[rip+0x1957f]        # 407fb <defmq.7318+0x63b>
   2727c:	call   37c0 <__fprintf_chk@plt>
   27281:	mov    esi,0x1
   27286:	mov    rdi,r12
   27289:	xor    eax,eax
   2728b:	lea    rdx,[rip+0x1951c]        # 407ae <defmq.7318+0x5ee>
   27292:	call   37c0 <__fprintf_chk@plt>
   27297:	mov    esi,0x1
   2729c:	mov    rdi,r12
   2729f:	xor    eax,eax
   272a1:	lea    rdx,[rip+0x19514]        # 407bc <defmq.7318+0x5fc>
   272a8:	call   37c0 <__fprintf_chk@plt>
   272ad:	mov    rcx,QWORD PTR [rsp+0x28]
   272b2:	mov    rdi,r12
   272b5:	xor    eax,eax
   272b7:	lea    rdx,[rip+0x1950f]        # 407cd <defmq.7318+0x60d>
   272be:	mov    esi,0x1
   272c3:	call   37c0 <__fprintf_chk@plt>
   272c8:	mov    ecx,0xc
   272cd:	mov    rdi,r12
   272d0:	xor    eax,eax
   272d2:	lea    rdx,[rip+0x19502]        # 407db <defmq.7318+0x61b>
   272d9:	mov    esi,0x1
   272de:	call   37c0 <__fprintf_chk@plt>
   272e3:	mov    rcx,r12
   272e6:	mov    edx,0x8
   272eb:	mov    esi,0x1
   272f0:	lea    rdi,[rip+0x194f2]        # 407e9 <defmq.7318+0x629>
   272f7:	call   37b0 <fwrite@plt>
   272fc:	mov    rcx,r12
   272ff:	mov    edx,0x8
   27304:	mov    esi,0x1
   27309:	lea    rdi,[rip+0x194e2]        # 407f2 <defmq.7318+0x632>
   27310:	call   37b0 <fwrite@plt>
   27315:	mov    eax,DWORD PTR [rbp+0x1c]
   27318:	pop    rdx
   27319:	pop    rcx
   2731a:	mov    QWORD PTR [rsp+0x8],0x0
   27323:	test   eax,eax
   27325:	jle    273f9 <EPSWriteSmallMSA+0x269>
   2732b:	nop    DWORD PTR [rax+rax*1+0x0]
   27330:	mov    rbx,QWORD PTR [rsp+0x8]
   27335:	xor    ecx,ecx
   27337:	mov    rdx,r13
   2733a:	mov    esi,0x1
   2733f:	mov    rdi,r12
   27342:	sub    eax,ebx
   27344:	sub    eax,0x1
   27347:	mov    r8d,eax
   2734a:	shl    r8d,0x4
   2734e:	sub    r8d,eax
   27351:	xor    eax,eax
   27353:	mov    r14d,r8d
   27356:	call   37c0 <__fprintf_chk@plt>
   2735b:	lea    rax,[rbx*8+0x0]
   27363:	mov    esi,0x1
   27368:	mov    rdi,r12
   2736b:	mov    QWORD PTR [rsp],rax
   2736f:	mov    rax,QWORD PTR [rbp+0x8]
   27373:	lea    rdx,[rip+0x1948f]        # 40809 <defmq.7318+0x649>
   2737a:	mov    rcx,QWORD PTR [rax+rbx*8]
   2737e:	xor    eax,eax
   27380:	xor    ebx,ebx
   27382:	call   37c0 <__fprintf_chk@plt>
   27387:	mov    eax,DWORD PTR [rbp+0x18]
   2738a:	mov    r15d,DWORD PTR [rsp+0x14]
   2738f:	test   eax,eax
   27391:	jle    273e3 <EPSWriteSmallMSA+0x253>
   27393:	nop    DWORD PTR [rax+rax*1+0x0]
   27398:	mov    ecx,r15d
   2739b:	mov    r8d,r14d
   2739e:	mov    rdx,r13
   273a1:	mov    esi,0x1
   273a6:	mov    rdi,r12
   273a9:	xor    eax,eax
   273ab:	add    r15d,0x9
   273af:	call   37c0 <__fprintf_chk@plt>
   273b4:	mov    rsi,QWORD PTR [rsp]
   273b8:	mov    rax,QWORD PTR [rbp+0x0]
   273bc:	mov    rdi,r12
   273bf:	lea    rdx,[rip+0x1944e]        # 40814 <defmq.7318+0x654>
   273c6:	mov    rax,QWORD PTR [rax+rsi*1]
   273ca:	mov    esi,0x1
   273cf:	movsx  ecx,BYTE PTR [rax+rbx*1]
   273d3:	xor    eax,eax
   273d5:	add    rbx,0x1
   273d9:	call   37c0 <__fprintf_chk@plt>
   273de:	cmp    DWORD PTR [rbp+0x18],ebx
   273e1:	jg     27398 <EPSWriteSmallMSA+0x208>
   273e3:	add    QWORD PTR [rsp+0x8],0x1
   273e9:	mov    eax,DWORD PTR [rbp+0x1c]
   273ec:	mov    rdx,QWORD PTR [rsp+0x8]
   273f1:	cmp    eax,edx
   273f3:	jg     27330 <EPSWriteSmallMSA+0x1a0>
   273f9:	mov    rdi,QWORD PTR [rsp+0x18]
   273fe:	add    rsp,0x28
   27402:	pop    rbx
   27403:	pop    rbp
   27404:	pop    r12
   27406:	pop    r13
   27408:	pop    r14
   2740a:	pop    r15
   2740c:	jmp    3460 <free@plt>
   27411:	xor    eax,eax
   27413:	lea    rdi,[rip+0x19406]        # 40820 <defmq.7318+0x660>
   2741a:	call   317f0 <Die>
   2741f:	mov    eax,DWORD PTR [rbp+0x18]
   27422:	lea    ebx,[rax+rax*8]
   27425:	add    ebx,DWORD PTR [rsp+0x14]
   27429:	cmp    ebx,0x264
   2742f:	jle    27226 <EPSWriteSmallMSA+0x96>
   27435:	lea    rdi,[rip+0x1940c]        # 40848 <defmq.7318+0x688>
   2743c:	xor    eax,eax
   2743e:	call   317f0 <Die>
   27443:	jmp    27226 <EPSWriteSmallMSA+0x96>
   27448:	lea    rdi,[rip+0x19309]        # 40758 <defmq.7318+0x598>
   2744f:	xor    eax,eax
   27451:	call   317f0 <Die>
   27456:	jmp    27240 <EPSWriteSmallMSA+0xb0>
   2745b:	mov    DWORD PTR [rsp+0x14],0x8
   27463:	jmp    27207 <EPSWriteSmallMSA+0x77>
   27468:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000027470 <FileDirname>:
   27470:	endbr64 
   27474:	push   rbp
   27475:	mov    esi,0x2f
   2747a:	mov    rbp,rdi
   2747d:	push   rbx
   2747e:	sub    rsp,0x8
   27482:	call   35b0 <strrchr@plt>
   27487:	test   rax,rax
   2748a:	je     274d8 <FileDirname+0x68>
   2748c:	sub    rax,rbp
   2748f:	mov    esi,0x49
   27494:	lea    rdi,[rip+0x193d0]        # 4086b <defmq.7318+0x6ab>
   2749b:	lea    edx,[rax+0x2]
   2749e:	mov    rbx,rax
   274a1:	movsxd rdx,edx
   274a4:	call   36810 <sre_malloc>
   274a9:	mov    r8,rax
   274ac:	test   ebx,ebx
   274ae:	jle    274f1 <FileDirname+0x81>
   274b0:	movsxd rbx,ebx
   274b3:	mov    rsi,rbp
   274b6:	mov    rdi,rax
   274b9:	mov    rdx,rbx
   274bc:	call   34b0 <strncpy@plt>
   274c1:	mov    r8,rax
   274c4:	mov    BYTE PTR [r8+rbx*1],0x0
   274c9:	add    rsp,0x8
   274cd:	mov    rax,r8
   274d0:	pop    rbx
   274d1:	pop    rbp
   274d2:	ret    
   274d3:	nop    DWORD PTR [rax+rax*1+0x0]
   274d8:	mov    edx,0x2
   274dd:	mov    esi,0x49
   274e2:	lea    rdi,[rip+0x19382]        # 4086b <defmq.7318+0x6ab>
   274e9:	call   36810 <sre_malloc>
   274ee:	mov    r8,rax
   274f1:	cmp    BYTE PTR [rbp+0x0],0x2f
   274f5:	je     27510 <FileDirname+0xa0>
   274f7:	mov    ebx,0x1
   274fc:	mov    BYTE PTR [r8],0x2e
   27500:	mov    rax,r8
   27503:	mov    BYTE PTR [r8+rbx*1],0x0
   27508:	add    rsp,0x8
   2750c:	pop    rbx
   2750d:	pop    rbp
   2750e:	ret    
   2750f:	nop
   27510:	mov    ebx,0x1
   27515:	mov    BYTE PTR [r8],0x2f
   27519:	mov    rax,r8
   2751c:	mov    BYTE PTR [r8+rbx*1],0x0
   27521:	add    rsp,0x8
   27525:	pop    rbx
   27526:	pop    rbp
   27527:	ret    
   27528:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000027530 <FileTail>:
   27530:	endbr64 
   27534:	push   r13
   27536:	mov    r13,rdi
   27539:	push   r12
   2753b:	push   rbp
   2753c:	mov    ebp,esi
   2753e:	mov    esi,0x2f
   27543:	push   rbx
   27544:	sub    rsp,0x8
   27548:	call   35b0 <strrchr@plt>
   2754d:	mov    rdi,r13
   27550:	mov    rbx,rax
   27553:	call   3560 <strlen@plt>
   27558:	mov    esi,0x69
   2755d:	lea    rdi,[rip+0x19307]        # 4086b <defmq.7318+0x6ab>
   27564:	lea    rdx,[rax+0x1]
   27568:	call   36810 <sre_malloc>
   2756d:	mov    r12,rax
   27570:	test   rbx,rbx
   27573:	je     275b0 <FileTail+0x80>
   27575:	lea    rsi,[rbx+0x1]
   27579:	mov    rdi,rax
   2757c:	call   34e0 <strcpy@plt>
   27581:	test   ebp,ebp
   27583:	je     2759a <FileTail+0x6a>
   27585:	mov    esi,0x2e
   2758a:	mov    rdi,r12
   2758d:	call   35b0 <strrchr@plt>
   27592:	test   rax,rax
   27595:	je     2759a <FileTail+0x6a>
   27597:	mov    BYTE PTR [rax],0x0
   2759a:	add    rsp,0x8
   2759e:	mov    rax,r12
   275a1:	pop    rbx
   275a2:	pop    rbp
   275a3:	pop    r12
   275a5:	pop    r13
   275a7:	ret    
   275a8:	nop    DWORD PTR [rax+rax*1+0x0]
   275b0:	mov    rsi,r13
   275b3:	mov    rdi,rax
   275b6:	call   34e0 <strcpy@plt>
   275bb:	jmp    27581 <FileTail+0x51>
   275bd:	nop    DWORD PTR [rax]

00000000000275c0 <FileConcat>:
   275c0:	endbr64 
   275c4:	push   r12
   275c6:	push   rbp
   275c7:	mov    rbp,rsi
   275ca:	push   rbx
   275cb:	mov    rbx,rdi
   275ce:	call   3560 <strlen@plt>
   275d3:	mov    rdi,rbp
   275d6:	mov    r12,rax
   275d9:	call   3560 <strlen@plt>
   275de:	mov    esi,0xaa
   275e3:	lea    rdi,[rip+0x19281]        # 4086b <defmq.7318+0x6ab>
   275ea:	lea    rdx,[r12+rax*1+0x2]
   275ef:	call   36810 <sre_malloc>
   275f4:	cmp    BYTE PTR [rbp+0x0],0x2f
   275f8:	mov    r12,rax
   275fb:	je     27638 <FileConcat+0x78>
   275fd:	sub    rsp,0x8
   27601:	mov    r8,rbx
   27604:	mov    rdi,rax
   27607:	mov    r9d,0x2f
   2760d:	push   rbp
   2760e:	mov    rdx,0xffffffffffffffff
   27615:	mov    esi,0x1
   2761a:	xor    eax,eax
   2761c:	lea    rcx,[rip+0x1924f]        # 40872 <defmq.7318+0x6b2>
   27623:	call   3830 <__sprintf_chk@plt>
   27628:	pop    rax
   27629:	mov    rax,r12
   2762c:	pop    rdx
   2762d:	pop    rbx
   2762e:	pop    rbp
   2762f:	pop    r12
   27631:	ret    
   27632:	nop    WORD PTR [rax+rax*1+0x0]
   27638:	mov    rsi,rbp
   2763b:	mov    rdi,rax
   2763e:	call   34e0 <strcpy@plt>
   27643:	mov    rax,r12
   27646:	pop    rbx
   27647:	pop    rbp
   27648:	pop    r12
   2764a:	ret    
   2764b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000027650 <FileSameDirectory>:
   27650:	endbr64 
   27654:	push   r14
   27656:	push   r13
   27658:	push   r12
   2765a:	mov    r12,rsi
   2765d:	push   rbp
   2765e:	sub    rsp,0x8
   27662:	call   27470 <FileDirname>
   27667:	xor    esi,esi
   27669:	mov    rdi,r12
   2766c:	mov    r13,rax
   2766f:	call   27530 <FileTail>
   27674:	mov    rdi,r12
   27677:	mov    rsi,rax
   2767a:	mov    rbp,rax
   2767d:	call   3640 <strcmp@plt>
   27682:	mov    rsi,rbp
   27685:	mov    rdi,r13
   27688:	test   eax,eax
   2768a:	jne    276b8 <FileSameDirectory+0x68>
   2768c:	call   275c0 <FileConcat>
   27691:	mov    r14,rax
   27694:	mov    rdi,r13
   27697:	call   3460 <free@plt>
   2769c:	mov    rdi,rbp
   2769f:	call   3460 <free@plt>
   276a4:	add    rsp,0x8
   276a8:	mov    rax,r14
   276ab:	pop    rbp
   276ac:	pop    r12
   276ae:	pop    r13
   276b0:	pop    r14
   276b2:	ret    
   276b3:	nop    DWORD PTR [rax+rax*1+0x0]
   276b8:	call   275c0 <FileConcat>
   276bd:	mov    rsi,r12
   276c0:	mov    rdi,rax
   276c3:	mov    r14,rax
   276c6:	call   3640 <strcmp@plt>
   276cb:	test   eax,eax
   276cd:	je     27694 <FileSameDirectory+0x44>
   276cf:	mov    rdi,r14
   276d2:	xor    r14d,r14d
   276d5:	call   3460 <free@plt>
   276da:	jmp    27694 <FileSameDirectory+0x44>
   276dc:	nop    DWORD PTR [rax+0x0]

00000000000276e0 <FileAddSuffix>:
   276e0:	endbr64 
   276e4:	push   r12
   276e6:	push   rbp
   276e7:	mov    rbp,rsi
   276ea:	push   rbx
   276eb:	mov    rbx,rdi
   276ee:	call   3560 <strlen@plt>
   276f3:	mov    rdi,rbp
   276f6:	mov    r12,rax
   276f9:	call   3560 <strlen@plt>
   276fe:	mov    esi,0xbe
   27703:	lea    rdi,[rip+0x19161]        # 4086b <defmq.7318+0x6ab>
   2770a:	lea    rdx,[r12+rax*1+0x2]
   2770f:	call   36810 <sre_malloc>
   27714:	mov    r9,rbp
   27717:	mov    r8,rbx
   2771a:	mov    esi,0x1
   2771f:	mov    r12,rax
   27722:	mov    rdi,rax
   27725:	xor    eax,eax
   27727:	mov    rdx,0xffffffffffffffff
   2772e:	lea    rcx,[rip+0x19144]        # 40879 <defmq.7318+0x6b9>
   27735:	call   3830 <__sprintf_chk@plt>
   2773a:	mov    rax,r12
   2773d:	pop    rbx
   2773e:	pop    rbp
   2773f:	pop    r12
   27741:	ret    
   27742:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2774d:	nop    DWORD PTR [rax]

0000000000027750 <EnvFileOpen>:
   27750:	endbr64 
   27754:	push   r15
   27756:	push   r14
   27758:	push   r13
   2775a:	push   r12
   2775c:	push   rbp
   2775d:	push   rbx
   2775e:	sub    rsp,0x418
   27765:	mov    rax,QWORD PTR fs:0x28
   2776e:	mov    QWORD PTR [rsp+0x408],rax
   27776:	xor    eax,eax
   27778:	test   rsi,rsi
   2777b:	je     27846 <EnvFileOpen+0xf6>
   27781:	mov    r12,rdi
   27784:	mov    rdi,rsi
   27787:	mov    r15,rdx
   2778a:	call   3450 <getenv@plt>
   2778f:	mov    rdi,rax
   27792:	call   36670 <Strdup>
   27797:	mov    r14,rax
   2779a:	test   rax,rax
   2779d:	je     27846 <EnvFileOpen+0xf6>
   277a3:	lea    rsi,[rip+0x18dd6]        # 40580 <defmq.7318+0x3c0>
   277aa:	mov    rdi,rax
   277ad:	call   3770 <strtok@plt>
   277b2:	mov    rbp,rax
   277b5:	test   rax,rax
   277b8:	je     27870 <EnvFileOpen+0x120>
   277be:	mov    r13,rsp
   277c1:	jmp    27821 <EnvFileOpen+0xd1>
   277c3:	nop    DWORD PTR [rax+rax*1+0x0]
   277c8:	sub    rsp,0x8
   277cc:	mov    edx,0x400
   277d1:	mov    r8,rbp
   277d4:	mov    rdi,r13
   277d7:	push   r12
   277d9:	mov    r9d,0x2f
   277df:	mov    esi,0x1
   277e4:	xor    eax,eax
   277e6:	lea    rcx,[rip+0x19085]        # 40872 <defmq.7318+0x6b2>
   277ed:	call   3830 <__sprintf_chk@plt>
   277f2:	lea    rsi,[rip+0x19755]        # 40f4e <gki_primes+0x4ce>
   277f9:	mov    rdi,r13
   277fc:	call   3750 <fopen@plt>
   27801:	mov    rbx,rax
   27804:	pop    rax
   27805:	pop    rdx
   27806:	test   rbx,rbx
   27809:	jne    27874 <EnvFileOpen+0x124>
   2780b:	lea    rsi,[rip+0x18d6e]        # 40580 <defmq.7318+0x3c0>
   27812:	xor    edi,edi
   27814:	call   3770 <strtok@plt>
   27819:	mov    rbp,rax
   2781c:	test   rax,rax
   2781f:	je     27870 <EnvFileOpen+0x120>
   27821:	mov    rdi,r12
   27824:	call   3560 <strlen@plt>
   27829:	mov    rdi,rbp
   2782c:	mov    rbx,rax
   2782f:	call   3560 <strlen@plt>
   27834:	add    ebx,eax
   27836:	cmp    ebx,0x3fe
   2783c:	jle    277c8 <EnvFileOpen+0x78>
   2783e:	mov    rdi,r14
   27841:	call   3460 <free@plt>
   27846:	xor    ebx,ebx
   27848:	mov    rax,QWORD PTR [rsp+0x408]
   27850:	xor    rax,QWORD PTR fs:0x28
   27859:	jne    2788e <EnvFileOpen+0x13e>
   2785b:	add    rsp,0x418
   27862:	mov    rax,rbx
   27865:	pop    rbx
   27866:	pop    rbp
   27867:	pop    r12
   27869:	pop    r13
   2786b:	pop    r14
   2786d:	pop    r15
   2786f:	ret    
   27870:	xor    ebp,ebp
   27872:	xor    ebx,ebx
   27874:	test   r15,r15
   27877:	je     27884 <EnvFileOpen+0x134>
   27879:	mov    rdi,rbp
   2787c:	call   36670 <Strdup>
   27881:	mov    QWORD PTR [r15],rax
   27884:	mov    rdi,r14
   27887:	call   3460 <free@plt>
   2788c:	jmp    27848 <EnvFileOpen+0xf8>
   2788e:	call   3570 <__stack_chk_fail@plt>
   27893:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2789e:	xchg   ax,ax

00000000000278a0 <FileExists>:
   278a0:	endbr64 
   278a4:	sub    rsp,0x8
   278a8:	lea    rsi,[rip+0x1969f]        # 40f4e <gki_primes+0x4ce>
   278af:	call   3750 <fopen@plt>
   278b4:	mov    rdi,rax
   278b7:	xor    eax,eax
   278b9:	test   rdi,rdi
   278bc:	je     278c8 <FileExists+0x28>
   278be:	call   3530 <fclose@plt>
   278c3:	mov    eax,0x1
   278c8:	add    rsp,0x8
   278cc:	ret    
   278cd:	nop    DWORD PTR [rax]

00000000000278d0 <Getopt>:
   278d0:	endbr64 
   278d4:	push   r15
   278d6:	push   r14
   278d8:	mov    r14,rdx
   278db:	push   r13
   278dd:	push   r12
   278df:	push   rbp
   278e0:	mov    rbp,r9
   278e3:	push   rbx
   278e4:	sub    rsp,0x58
   278e8:	mov    edx,DWORD PTR [rip+0x26066]        # 4d954 <optind.6324>
   278ee:	cmp    edx,edi
   278f0:	jge    27905 <Getopt+0x35>
   278f2:	movsxd rax,edx
   278f5:	mov    r12,rsi
   278f8:	lea    r15,[rsi+rax*8]
   278fc:	mov    r9,QWORD PTR [r15]
   278ff:	cmp    BYTE PTR [r9],0x2d
   27903:	je     27940 <Getopt+0x70>
   27905:	mov    rax,QWORD PTR [rsp+0x98]
   2790d:	mov    DWORD PTR [rbp+0x0],edx
   27910:	mov    QWORD PTR [rax],0x0
   27917:	mov    rax,QWORD PTR [rsp+0x90]
   2791f:	mov    QWORD PTR [rax],0x0
   27926:	xor    eax,eax
   27928:	add    rsp,0x58
   2792c:	pop    rbx
   2792d:	pop    rbp
   2792e:	pop    r12
   27930:	pop    r13
   27932:	pop    r14
   27934:	pop    r15
   27936:	ret    
   27937:	nop    WORD PTR [rax+rax*1+0x0]
   27940:	mov    r13d,ecx
   27943:	movzx  ecx,BYTE PTR [r9+0x1]
   27948:	test   ecx,ecx
   2794a:	je     27905 <Getopt+0x35>
   2794c:	mov    ebx,edi
   2794e:	cmp    ecx,0x2d
   27951:	je     27a30 <Getopt+0x160>
   27957:	mov    rdi,QWORD PTR [rip+0x3a482]        # 61de0 <optptr.6325>
   2795e:	test   rdi,rdi
   27961:	je     27ae0 <Getopt+0x210>
   27967:	movzx  r10d,BYTE PTR [rdi]
   2796b:	test   r13d,r13d
   2796e:	jle    27ce0 <Getopt+0x410>
   27974:	lea    ecx,[r13-0x1]
   27978:	mov    rax,r14
   2797b:	shl    rcx,0x4
   2797f:	lea    rsi,[r14+rcx*1+0x10]
   27984:	jmp    2799d <Getopt+0xcd>
   27986:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27990:	add    rax,0x10
   27994:	cmp    rsi,rax
   27997:	je     27ce0 <Getopt+0x410>
   2799d:	cmp    DWORD PTR [rax+0x8],0x1
   279a1:	mov    r15,rax
   279a4:	jne    27990 <Getopt+0xc0>
   279a6:	mov    r9,QWORD PTR [rax]
   279a9:	cmp    BYTE PTR [r9+0x1],r10b
   279ad:	jne    27990 <Getopt+0xc0>
   279af:	mov    rax,QWORD PTR [rsp+0x90]
   279b7:	mov    QWORD PTR [rax],r9
   279ba:	mov    eax,DWORD PTR [r15+0xc]
   279be:	test   eax,eax
   279c0:	je     27a70 <Getopt+0x1a0>
   279c6:	cmp    BYTE PTR [rdi+0x1],0x0
   279ca:	lea    esi,[rdx+0x1]
   279cd:	jne    27ac0 <Getopt+0x1f0>
   279d3:	cmp    ebx,esi
   279d5:	jle    27e0d <Getopt+0x53d>
   279db:	movsxd rsi,edx
   279de:	mov    rbx,QWORD PTR [rsp+0x98]
   279e6:	add    edx,0x2
   279e9:	mov    rsi,QWORD PTR [r12+rsi*8+0x8]
   279ee:	mov    DWORD PTR [rip+0x25f60],edx        # 4d954 <optind.6324>
   279f4:	mov    QWORD PTR [rbx],rsi
   279f7:	mov    QWORD PTR [rip+0x3a3de],0x0        # 61de0 <optptr.6325>
   27a02:	test   eax,eax
   27a04:	je     27a25 <Getopt+0x155>
   27a06:	cmp    eax,0x1
   27a09:	je     27d5d <Getopt+0x48d>
   27a0f:	mov    eax,DWORD PTR [r15+0xc]
   27a13:	cmp    eax,0x2
   27a16:	je     27d9c <Getopt+0x4cc>
   27a1c:	cmp    eax,0x3
   27a1f:	je     27d20 <Getopt+0x450>
   27a25:	mov    edx,DWORD PTR [rip+0x25f29]        # 4d954 <optind.6324>
   27a2b:	jmp    27a99 <Getopt+0x1c9>
   27a2d:	nop    DWORD PTR [rax]
   27a30:	movzx  eax,BYTE PTR [r9+0x2]
   27a35:	test   eax,eax
   27a37:	jne    27957 <Getopt+0x87>
   27a3d:	mov    rbx,QWORD PTR [rsp+0x90]
   27a45:	add    edx,0x1
   27a48:	mov    DWORD PTR [rbp+0x0],edx
   27a4b:	mov    QWORD PTR [rbx],0x0
   27a52:	mov    rbx,QWORD PTR [rsp+0x98]
   27a5a:	mov    DWORD PTR [rip+0x25ef4],edx        # 4d954 <optind.6324>
   27a60:	mov    QWORD PTR [rbx],0x0
   27a67:	jmp    27928 <Getopt+0x58>
   27a6c:	nop    DWORD PTR [rax+0x0]
   27a70:	mov    rax,QWORD PTR [rsp+0x98]
   27a78:	mov    QWORD PTR [rax],0x0
   27a7f:	cmp    BYTE PTR [rdi+0x1],0x0
   27a83:	jne    27ab0 <Getopt+0x1e0>
   27a85:	mov    QWORD PTR [rip+0x3a350],0x0        # 61de0 <optptr.6325>
   27a90:	add    edx,0x1
   27a93:	mov    DWORD PTR [rip+0x25ebb],edx        # 4d954 <optind.6324>
   27a99:	mov    DWORD PTR [rbp+0x0],edx
   27a9c:	add    rsp,0x58
   27aa0:	mov    eax,0x1
   27aa5:	pop    rbx
   27aa6:	pop    rbp
   27aa7:	pop    r12
   27aa9:	pop    r13
   27aab:	pop    r14
   27aad:	pop    r15
   27aaf:	ret    
   27ab0:	add    rdi,0x1
   27ab4:	mov    QWORD PTR [rip+0x3a325],rdi        # 61de0 <optptr.6325>
   27abb:	jmp    27a99 <Getopt+0x1c9>
   27abd:	nop    DWORD PTR [rax]
   27ac0:	mov    rbx,QWORD PTR [rsp+0x98]
   27ac8:	add    rdi,0x1
   27acc:	mov    DWORD PTR [rip+0x25e82],esi        # 4d954 <optind.6324>
   27ad2:	mov    QWORD PTR [rbx],rdi
   27ad5:	jmp    279f7 <Getopt+0x127>
   27ada:	nop    WORD PTR [rax+rax*1+0x0]
   27ae0:	cmp    BYTE PTR [r9],0x2d
   27ae4:	jne    27cd0 <Getopt+0x400>
   27aea:	sub    ecx,0x2d
   27aed:	mov    DWORD PTR [rsp+0x10],ecx
   27af1:	jne    27cd0 <Getopt+0x400>
   27af7:	mov    rdi,r9
   27afa:	mov    esi,0x3d
   27aff:	mov    QWORD PTR [rsp+0x18],r8
   27b04:	mov    QWORD PTR [rsp+0x8],r9
   27b09:	call   3590 <strchr@plt>
   27b0e:	mov    r9,QWORD PTR [rsp+0x8]
   27b13:	mov    r8,QWORD PTR [rsp+0x18]
   27b18:	test   rax,rax
   27b1b:	mov    QWORD PTR [rip+0x3a2be],rax        # 61de0 <optptr.6325>
   27b22:	je     27b35 <Getopt+0x265>
   27b24:	mov    BYTE PTR [rax],0x0
   27b27:	add    rax,0x1
   27b2b:	mov    r9,QWORD PTR [r15]
   27b2e:	mov    QWORD PTR [rip+0x3a2ab],rax        # 61de0 <optptr.6325>
   27b35:	mov    rdi,r9
   27b38:	mov    QWORD PTR [rsp+0x18],r8
   27b3d:	mov    QWORD PTR [rsp+0x8],r9
   27b42:	call   3560 <strlen@plt>
   27b47:	test   r13d,r13d
   27b4a:	mov    r9,QWORD PTR [rsp+0x8]
   27b4f:	mov    r8,QWORD PTR [rsp+0x18]
   27b54:	mov    QWORD PTR [rsp+0x48],rax
   27b59:	jle    27eeb <Getopt+0x61b>
   27b5f:	mov    DWORD PTR [rsp+0x18],0x0
   27b67:	mov    r10,r14
   27b6a:	xor    r11d,r11d
   27b6d:	cdqe   
   27b6f:	mov    DWORD PTR [rsp+0x8],r13d
   27b74:	mov    QWORD PTR [rsp+0x30],r8
   27b79:	mov    DWORD PTR [rsp+0x24],ebx
   27b7d:	mov    rbx,rax
   27b80:	mov    QWORD PTR [rsp+0x28],r12
   27b85:	mov    r12d,r11d
   27b88:	mov    QWORD PTR [rsp+0x40],r14
   27b8d:	mov    r14,r9
   27b90:	mov    QWORD PTR [rsp+0x38],rbp
   27b95:	mov    rbp,r10
   27b98:	nop    DWORD PTR [rax+rax*1+0x0]
   27ba0:	mov    edx,DWORD PTR [rbp+0x8]
   27ba3:	mov    r15,rbp
   27ba6:	test   edx,edx
   27ba8:	jne    27bdb <Getopt+0x30b>
   27baa:	mov    r13,QWORD PTR [rbp+0x0]
   27bae:	mov    rdx,rbx
   27bb1:	mov    rsi,r14
   27bb4:	mov    rdi,r13
   27bb7:	call   34d0 <strncmp@plt>
   27bbc:	test   eax,eax
   27bbe:	jne    27bdb <Getopt+0x30b>
   27bc0:	mov    rdi,r13
   27bc3:	add    DWORD PTR [rsp+0x10],0x1
   27bc8:	call   3560 <strlen@plt>
   27bcd:	cmp    rbx,rax
   27bd0:	je     27e62 <Getopt+0x592>
   27bd6:	mov    DWORD PTR [rsp+0x18],r12d
   27bdb:	add    r12d,0x1
   27bdf:	add    rbp,0x10
   27be3:	cmp    DWORD PTR [rsp+0x8],r12d
   27be8:	jne    27ba0 <Getopt+0x2d0>
   27bea:	movsxd rcx,DWORD PTR [rsp+0x18]
   27bef:	mov    r9,r14
   27bf2:	mov    r14,QWORD PTR [rsp+0x40]
   27bf7:	mov    ebx,DWORD PTR [rsp+0x24]
   27bfb:	mov    r12,QWORD PTR [rsp+0x28]
   27c00:	shl    rcx,0x4
   27c04:	cmp    DWORD PTR [rsp+0x10],0x1
   27c09:	movsxd r13,DWORD PTR [rsp+0x8]
   27c0e:	mov    r8,QWORD PTR [rsp+0x30]
   27c13:	mov    rbp,QWORD PTR [rsp+0x38]
   27c18:	lea    r15,[r14+rcx*1]
   27c1c:	jle    27e34 <Getopt+0x564>
   27c22:	shl    r13,0x4
   27c26:	mov    QWORD PTR [rsp+0x10],r8
   27c2b:	mov    rdi,QWORD PTR [r14+r13*1]
   27c2f:	mov    QWORD PTR [rsp+0x8],r9
   27c34:	call   3560 <strlen@plt>
   27c39:	mov    r9,QWORD PTR [rsp+0x8]
   27c3e:	mov    r8,QWORD PTR [rsp+0x10]
   27c43:	mov    r10,rax
   27c46:	movsxd rax,DWORD PTR [rsp+0x48]
   27c4b:	cmp    rax,r10
   27c4e:	je     27e83 <Getopt+0x5b3>
   27c54:	mov    rdx,r8
   27c57:	lea    rdi,[rip+0x18c22]        # 40880 <defmq.7318+0x6c0>
   27c5e:	mov    rsi,r9
   27c61:	xor    eax,eax
   27c63:	mov    QWORD PTR [rsp+0x8],r8
   27c68:	call   317f0 <Die>
   27c6d:	mov    rdi,QWORD PTR [r15]
   27c70:	mov    r8,QWORD PTR [rsp+0x8]
   27c75:	mov    rax,QWORD PTR [rsp+0x90]
   27c7d:	mov    rdx,QWORD PTR [rip+0x3a15c]        # 61de0 <optptr.6325>
   27c84:	mov    QWORD PTR [rax],rdi
   27c87:	mov    eax,DWORD PTR [r15+0xc]
   27c8b:	test   eax,eax
   27c8d:	je     27dc7 <Getopt+0x4f7>
   27c93:	mov    esi,DWORD PTR [rip+0x25cbb]        # 4d954 <optind.6324>
   27c99:	lea    r9d,[rsi+0x1]
   27c9d:	test   rdx,rdx
   27ca0:	je     27ec5 <Getopt+0x5f5>
   27ca6:	mov    rbx,QWORD PTR [rsp+0x98]
   27cae:	mov    DWORD PTR [rip+0x25c9f],r9d        # 4d954 <optind.6324>
   27cb5:	mov    QWORD PTR [rip+0x3a120],0x0        # 61de0 <optptr.6325>
   27cc0:	mov    QWORD PTR [rbx],rdx
   27cc3:	jmp    27a06 <Getopt+0x136>
   27cc8:	nop    DWORD PTR [rax+rax*1+0x0]
   27cd0:	lea    rdi,[r9+0x1]
   27cd4:	mov    QWORD PTR [rip+0x3a105],rdi        # 61de0 <optptr.6325>
   27cdb:	jmp    27967 <Getopt+0x97>
   27ce0:	mov    rdx,r8
   27ce3:	lea    rdi,[rip+0x18cc8]        # 409b2 <defmq.7318+0x7f2>
   27cea:	movsx  esi,r10b
   27cee:	xor    eax,eax
   27cf0:	mov    QWORD PTR [rsp+0x8],r8
   27cf5:	lea    r15,[r14-0x10]
   27cf9:	call   317f0 <Die>
   27cfe:	mov    r9,QWORD PTR [r14-0x10]
   27d02:	mov    edx,DWORD PTR [rip+0x25c4c]        # 4d954 <optind.6324>
   27d08:	mov    rdi,QWORD PTR [rip+0x3a0d1]        # 61de0 <optptr.6325>
   27d0f:	mov    r8,QWORD PTR [rsp+0x8]
   27d14:	jmp    279af <Getopt+0xdf>
   27d19:	nop    DWORD PTR [rax+0x0]
   27d20:	mov    rax,QWORD PTR [rsp+0x98]
   27d28:	mov    QWORD PTR [rsp+0x8],r8
   27d2d:	mov    rdi,QWORD PTR [rax]
   27d30:	call   3560 <strlen@plt>
   27d35:	cmp    rax,0x1
   27d39:	je     27a25 <Getopt+0x155>
   27d3f:	mov    r8,QWORD PTR [rsp+0x8]
   27d44:	mov    rsi,QWORD PTR [r15]
   27d47:	lea    rdi,[rip+0x18c1a]        # 40968 <defmq.7318+0x7a8>
   27d4e:	xor    eax,eax
   27d50:	mov    rdx,r8
   27d53:	call   317f0 <Die>
   27d58:	jmp    27a25 <Getopt+0x155>
   27d5d:	mov    rax,QWORD PTR [rsp+0x98]
   27d65:	mov    QWORD PTR [rsp+0x8],r8
   27d6a:	mov    rdi,QWORD PTR [rax]
   27d6d:	call   3aa60 <IsInt>
   27d72:	mov    r8,QWORD PTR [rsp+0x8]
   27d77:	test   eax,eax
   27d79:	jne    27a0f <Getopt+0x13f>
   27d7f:	mov    rsi,QWORD PTR [r15]
   27d82:	mov    rdx,r8
   27d85:	lea    rdi,[rip+0x18b7c]        # 40908 <defmq.7318+0x748>
   27d8c:	call   317f0 <Die>
   27d91:	mov    edx,DWORD PTR [rip+0x25bbd]        # 4d954 <optind.6324>
   27d97:	jmp    27a99 <Getopt+0x1c9>
   27d9c:	mov    rax,QWORD PTR [rsp+0x98]
   27da4:	mov    QWORD PTR [rsp+0x8],r8
   27da9:	mov    rdi,QWORD PTR [rax]
   27dac:	call   3ab70 <IsReal>
   27db1:	mov    r8,QWORD PTR [rsp+0x8]
   27db6:	test   eax,eax
   27db8:	je     27ea6 <Getopt+0x5d6>
   27dbe:	mov    eax,DWORD PTR [r15+0xc]
   27dc2:	jmp    27a1c <Getopt+0x14c>
   27dc7:	test   rdx,rdx
   27dca:	je     27e8b <Getopt+0x5bb>
   27dd0:	mov    rdx,r8
   27dd3:	mov    rsi,rdi
   27dd6:	xor    eax,eax
   27dd8:	mov    QWORD PTR [rsp+0x8],r8
   27ddd:	lea    rdi,[rip+0x18afc]        # 408e0 <defmq.7318+0x720>
   27de4:	call   317f0 <Die>
   27de9:	mov    eax,DWORD PTR [r15+0xc]
   27ded:	mov    r8,QWORD PTR [rsp+0x8]
   27df2:	mov    rbx,QWORD PTR [rsp+0x98]
   27dfa:	add    DWORD PTR [rip+0x25b53],0x1        # 4d954 <optind.6324>
   27e01:	mov    QWORD PTR [rbx],0x0
   27e08:	jmp    27a02 <Getopt+0x132>
   27e0d:	mov    rdx,r8
   27e10:	xor    eax,eax
   27e12:	mov    rsi,r9
   27e15:	mov    QWORD PTR [rsp+0x8],r8
   27e1a:	lea    rdi,[rip+0x18a97]        # 408b8 <defmq.7318+0x6f8>
   27e21:	call   317f0 <Die>
   27e26:	mov    eax,DWORD PTR [r15+0xc]
   27e2a:	mov    r8,QWORD PTR [rsp+0x8]
   27e2f:	jmp    279f7 <Getopt+0x127>
   27e34:	mov    eax,DWORD PTR [rsp+0x10]
   27e38:	test   eax,eax
   27e3a:	jne    27e83 <Getopt+0x5b3>
   27e3c:	mov    rdx,r8
   27e3f:	lea    rdi,[rip+0x18b54]        # 4099a <defmq.7318+0x7da>
   27e46:	mov    rsi,r9
   27e49:	xor    eax,eax
   27e4b:	mov    QWORD PTR [rsp+0x8],r8
   27e50:	call   317f0 <Die>
   27e55:	mov    rdi,QWORD PTR [r15]
   27e58:	mov    r8,QWORD PTR [rsp+0x8]
   27e5d:	jmp    27c75 <Getopt+0x3a5>
   27e62:	cmp    DWORD PTR [rsp+0x10],0x1
   27e67:	mov    ebx,DWORD PTR [rsp+0x24]
   27e6b:	mov    rdi,r13
   27e6e:	mov    r12,QWORD PTR [rsp+0x28]
   27e73:	mov    r8,QWORD PTR [rsp+0x30]
   27e78:	mov    rbp,QWORD PTR [rsp+0x38]
   27e7d:	jne    27c75 <Getopt+0x3a5>
   27e83:	mov    rdi,QWORD PTR [r15]
   27e86:	jmp    27c75 <Getopt+0x3a5>
   27e8b:	mov    rax,QWORD PTR [rsp+0x98]
   27e93:	add    DWORD PTR [rip+0x25aba],0x1        # 4d954 <optind.6324>
   27e9a:	mov    QWORD PTR [rax],0x0
   27ea1:	jmp    27a25 <Getopt+0x155>
   27ea6:	mov    rsi,QWORD PTR [r15]
   27ea9:	mov    rdx,r8
   27eac:	lea    rdi,[rip+0x18a85]        # 40938 <defmq.7318+0x778>
   27eb3:	xor    eax,eax
   27eb5:	call   317f0 <Die>
   27eba:	mov    edx,DWORD PTR [rip+0x25a94]        # 4d954 <optind.6324>
   27ec0:	jmp    27a99 <Getopt+0x1c9>
   27ec5:	cmp    ebx,r9d
   27ec8:	jle    27ef3 <Getopt+0x623>
   27eca:	movsxd rdx,esi
   27ecd:	mov    rbx,QWORD PTR [rsp+0x98]
   27ed5:	add    esi,0x2
   27ed8:	mov    rdx,QWORD PTR [r12+rdx*8+0x8]
   27edd:	mov    DWORD PTR [rip+0x25a71],esi        # 4d954 <optind.6324>
   27ee3:	mov    QWORD PTR [rbx],rdx
   27ee6:	jmp    27a06 <Getopt+0x136>
   27eeb:	mov    r15,r14
   27eee:	jmp    27e3c <Getopt+0x56c>
   27ef3:	mov    rdx,r8
   27ef6:	mov    rsi,rdi
   27ef9:	xor    eax,eax
   27efb:	mov    QWORD PTR [rsp+0x8],r8
   27f00:	lea    rdi,[rip+0x189b1]        # 408b8 <defmq.7318+0x6f8>
   27f07:	call   317f0 <Die>
   27f0c:	mov    eax,DWORD PTR [r15+0xc]
   27f10:	mov    r8,QWORD PTR [rsp+0x8]
   27f15:	jmp    27a02 <Getopt+0x132>
   27f1a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000027f20 <gki_alloc>:
   27f20:	push   r12
   27f22:	push   rbx
   27f23:	movsxd rbx,edi
   27f26:	sub    rsp,0x8
   27f2a:	cmp    ebx,0x3
   27f2d:	ja     27fb8 <gki_alloc+0x98>
   27f33:	mov    edx,0x18
   27f38:	mov    esi,0x126
   27f3d:	lea    rdi,[rip+0x18aa4]        # 409e8 <defmq.7318+0x828>
   27f44:	call   36810 <sre_malloc>
   27f49:	mov    esi,0x12a
   27f4e:	lea    rdi,[rip+0x18a93]        # 409e8 <defmq.7318+0x828>
   27f55:	mov    r12,rax
   27f58:	mov    DWORD PTR [rax+0x8],ebx
   27f5b:	lea    rax,[rip+0x18b1e]        # 40a80 <gki_primes>
   27f62:	movsxd rax,DWORD PTR [rax+rbx*4]
   27f66:	mov    DWORD PTR [r12+0xc],eax
   27f6b:	lea    rdx,[rax+rax*2]
   27f6f:	shl    rdx,0x3
   27f73:	call   36810 <sre_malloc>
   27f78:	mov    edx,DWORD PTR [r12+0xc]
   27f7d:	mov    QWORD PTR [r12],rax
   27f81:	test   edx,edx
   27f83:	jle    27fa0 <gki_alloc+0x80>
   27f85:	sub    edx,0x1
   27f88:	lea    rdx,[rax+rdx*8+0x8]
   27f8d:	nop    DWORD PTR [rax]
   27f90:	mov    QWORD PTR [rax],0x0
   27f97:	add    rax,0x8
   27f9b:	cmp    rax,rdx
   27f9e:	jne    27f90 <gki_alloc+0x70>
   27fa0:	mov    DWORD PTR [r12+0x10],0x0
   27fa9:	add    rsp,0x8
   27fad:	mov    rax,r12
   27fb0:	pop    rbx
   27fb1:	pop    r12
   27fb3:	ret    
   27fb4:	nop    DWORD PTR [rax+0x0]
   27fb8:	lea    rdi,[rip+0x18a0b]        # 409ca <defmq.7318+0x80a>
   27fbf:	xor    eax,eax
   27fc1:	call   317f0 <Die>
   27fc6:	jmp    27f33 <gki_alloc+0x13>
   27fcb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000027fd0 <GKIInit>:
   27fd0:	endbr64 
   27fd4:	xor    edi,edi
   27fd6:	jmp    27f20 <gki_alloc>
   27fdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000027fe0 <GKIFree>:
   27fe0:	endbr64 
   27fe4:	test   rdi,rdi
   27fe7:	je     2807b <GKIFree+0x9b>
   27fed:	push   r13
   27fef:	xor    r13d,r13d
   27ff2:	push   r12
   27ff4:	mov    r12,rdi
   27ff7:	push   rbp
   27ff8:	push   rbx
   27ff9:	sub    rsp,0x8
   27ffd:	mov    eax,DWORD PTR [r12+0xc]
   28002:	mov    rdi,QWORD PTR [rdi]
   28005:	test   eax,eax
   28007:	jle    28064 <GKIFree+0x84>
   28009:	nop    DWORD PTR [rax+0x0]
   28010:	mov    rbx,QWORD PTR [rdi+r13*8]
   28014:	lea    rbp,[r13*8+0x0]
   2801c:	test   rbx,rbx
   2801f:	je     28059 <GKIFree+0x79>
   28021:	nop    DWORD PTR [rax+0x0]
   28028:	mov    rax,rbx
   2802b:	mov    rbx,QWORD PTR [rbx+0x10]
   2802f:	mov    r8,QWORD PTR [rax]
   28032:	test   r8,r8
   28035:	je     28043 <GKIFree+0x63>
   28037:	mov    rdi,r8
   2803a:	call   3460 <free@plt>
   2803f:	mov    rdi,QWORD PTR [r12]
   28043:	mov    rdi,QWORD PTR [rdi+rbp*1]
   28047:	call   3460 <free@plt>
   2804c:	mov    rdi,QWORD PTR [r12]
   28050:	mov    QWORD PTR [rdi+rbp*1],rbx
   28054:	test   rbx,rbx
   28057:	jne    28028 <GKIFree+0x48>
   28059:	add    r13,0x1
   2805d:	cmp    DWORD PTR [r12+0xc],r13d
   28062:	jg     28010 <GKIFree+0x30>
   28064:	call   3460 <free@plt>
   28069:	add    rsp,0x8
   2806d:	mov    rdi,r12
   28070:	pop    rbx
   28071:	pop    rbp
   28072:	pop    r12
   28074:	pop    r13
   28076:	jmp    3460 <free@plt>
   2807b:	ret    
   2807c:	nop    DWORD PTR [rax+0x0]

0000000000028080 <GKIStoreKey>:
   28080:	endbr64 
   28084:	push   r14
   28086:	push   r13
   28088:	push   r12
   2808a:	push   rbp
   2808b:	mov    rbp,rsi
   2808e:	push   rbx
   2808f:	movsx  ecx,BYTE PTR [rsi]
   28092:	mov    rbx,rdi
   28095:	test   cl,cl
   28097:	je     28277 <GKIStoreKey+0x1f7>
   2809d:	mov    edi,DWORD PTR [rdi+0xc]
   280a0:	xor    edx,edx
   280a2:	jmp    280c0 <GKIStoreKey+0x40>
   280a4:	nop    DWORD PTR [rax+0x0]
   280a8:	shl    eax,0x7
   280ab:	movsx  ecx,BYTE PTR [rsi+0x2]
   280af:	add    rsi,0x2
   280b3:	add    eax,edx
   280b5:	cdq    
   280b6:	idiv   edi
   280b8:	test   cl,cl
   280ba:	je     28170 <GKIStoreKey+0xf0>
   280c0:	mov    eax,edx
   280c2:	movsx  edx,BYTE PTR [rsi+0x1]
   280c6:	shl    eax,0x7
   280c9:	add    eax,ecx
   280cb:	test   dl,dl
   280cd:	jne    280a8 <GKIStoreKey+0x28>
   280cf:	cdq    
   280d0:	idiv   edi
   280d2:	movsxd rax,edx
   280d5:	lea    r12,[rax*8+0x0]
   280dd:	mov    r13,QWORD PTR [rbx]
   280e0:	mov    edx,0x18
   280e5:	mov    esi,0xbd
   280ea:	lea    rdi,[rip+0x188f7]        # 409e8 <defmq.7318+0x828>
   280f1:	add    r13,r12
   280f4:	mov    r14,QWORD PTR [r13+0x0]
   280f8:	call   36810 <sre_malloc>
   280fd:	mov    rdi,rbp
   28100:	mov    QWORD PTR [r13+0x0],rax
   28104:	call   3560 <strlen@plt>
   28109:	mov    rdx,QWORD PTR [rbx]
   2810c:	mov    esi,0xbe
   28111:	lea    rdi,[rip+0x188d0]        # 409e8 <defmq.7318+0x828>
   28118:	mov    r13,QWORD PTR [rdx+r12*1]
   2811c:	lea    rdx,[rax+0x1]
   28120:	call   36810 <sre_malloc>
   28125:	mov    rsi,rbp
   28128:	mov    QWORD PTR [r13+0x0],rax
   2812c:	mov    rax,QWORD PTR [rbx]
   2812f:	mov    rax,QWORD PTR [rax+r12*1]
   28133:	mov    rdi,QWORD PTR [rax]
   28136:	call   34e0 <strcpy@plt>
   2813b:	mov    rax,QWORD PTR [rbx]
   2813e:	mov    ecx,DWORD PTR [rbx+0xc]
   28141:	mov    rdx,QWORD PTR [rax+r12*1]
   28145:	mov    eax,DWORD PTR [rbx+0x10]
   28148:	lea    ecx,[rcx+rcx*2]
   2814b:	mov    DWORD PTR [rdx+0x8],eax
   2814e:	mov    QWORD PTR [rdx+0x10],r14
   28152:	lea    edx,[rax+0x1]
   28155:	mov    DWORD PTR [rbx+0x10],edx
   28158:	cmp    edx,ecx
   2815a:	jle    28164 <GKIStoreKey+0xe4>
   2815c:	mov    edx,DWORD PTR [rbx+0x8]
   2815f:	cmp    edx,0x2
   28162:	jle    28180 <GKIStoreKey+0x100>
   28164:	pop    rbx
   28165:	pop    rbp
   28166:	pop    r12
   28168:	pop    r13
   2816a:	pop    r14
   2816c:	ret    
   2816d:	nop    DWORD PTR [rax]
   28170:	movsxd rax,edx
   28173:	lea    r12,[rax*8+0x0]
   2817b:	jmp    280dd <GKIStoreKey+0x5d>
   28180:	lea    edi,[rdx+0x1]
   28183:	call   27f20 <gki_alloc>
   28188:	mov    r12,QWORD PTR [rbx]
   2818b:	mov    rbp,rax
   2818e:	mov    eax,DWORD PTR [rbx+0xc]
   28191:	test   eax,eax
   28193:	jle    28245 <GKIStoreKey+0x1c5>
   28199:	sub    eax,0x1
   2819c:	mov    r10,r12
   2819f:	lea    r11,[r12+rax*8+0x8]
   281a4:	nop    DWORD PTR [rax+0x0]
   281a8:	mov    r8,QWORD PTR [r10]
   281ab:	test   r8,r8
   281ae:	je     28238 <GKIStoreKey+0x1b8>
   281b4:	mov    rsi,QWORD PTR [r8]
   281b7:	mov    r9,QWORD PTR [rbp+0x0]
   281bb:	movsx  ecx,BYTE PTR [rsi]
   281be:	test   cl,cl
   281c0:	je     2821d <GKIStoreKey+0x19d>
   281c2:	nop    WORD PTR [rax+rax*1+0x0]
   281c8:	mov    edi,DWORD PTR [rbp+0xc]
   281cb:	xor    edx,edx
   281cd:	jmp    281e4 <GKIStoreKey+0x164>
   281cf:	nop
   281d0:	shl    eax,0x7
   281d3:	movsx  ecx,BYTE PTR [rsi+0x2]
   281d7:	add    rsi,0x2
   281db:	add    eax,edx
   281dd:	cdq    
   281de:	idiv   edi
   281e0:	test   cl,cl
   281e2:	je     28228 <GKIStoreKey+0x1a8>
   281e4:	mov    eax,edx
   281e6:	movsx  edx,BYTE PTR [rsi+0x1]
   281ea:	shl    eax,0x7
   281ed:	add    eax,ecx
   281ef:	test   dl,dl
   281f1:	jne    281d0 <GKIStoreKey+0x150>
   281f3:	cdq    
   281f4:	idiv   edi
   281f6:	movsxd rax,edx
   281f9:	lea    rax,[r9+rax*8]
   281fd:	mov    rdx,QWORD PTR [rax]
   28200:	mov    QWORD PTR [rax],r8
   28203:	mov    rax,QWORD PTR [r8+0x10]
   28207:	mov    QWORD PTR [r8+0x10],rdx
   2820b:	test   rax,rax
   2820e:	je     28238 <GKIStoreKey+0x1b8>
   28210:	mov    r8,rax
   28213:	mov    rsi,QWORD PTR [r8]
   28216:	movsx  ecx,BYTE PTR [rsi]
   28219:	test   cl,cl
   2821b:	jne    281c8 <GKIStoreKey+0x148>
   2821d:	mov    rax,r9
   28220:	jmp    281fd <GKIStoreKey+0x17d>
   28222:	nop    WORD PTR [rax+rax*1+0x0]
   28228:	movsxd rax,edx
   2822b:	lea    rax,[r9+rax*8]
   2822f:	jmp    281fd <GKIStoreKey+0x17d>
   28231:	nop    DWORD PTR [rax+0x0]
   28238:	add    r10,0x8
   2823c:	cmp    r11,r10
   2823f:	jne    281a8 <GKIStoreKey+0x128>
   28245:	mov    rdi,r12
   28248:	call   3460 <free@plt>
   2824d:	mov    eax,DWORD PTR [rbp+0x8]
   28250:	mov    rdi,rbp
   28253:	mov    DWORD PTR [rbx+0x8],eax
   28256:	mov    eax,DWORD PTR [rbp+0xc]
   28259:	mov    DWORD PTR [rbx+0xc],eax
   2825c:	mov    rax,QWORD PTR [rbp+0x0]
   28260:	mov    QWORD PTR [rbx],rax
   28263:	call   3460 <free@plt>
   28268:	mov    eax,DWORD PTR [rbx+0x10]
   2826b:	pop    rbx
   2826c:	pop    rbp
   2826d:	pop    r12
   2826f:	sub    eax,0x1
   28272:	pop    r13
   28274:	pop    r14
   28276:	ret    
   28277:	xor    r12d,r12d
   2827a:	jmp    280dd <GKIStoreKey+0x5d>
   2827f:	nop

0000000000028280 <GKIKeyIndex>:
   28280:	endbr64 
   28284:	push   rbp
   28285:	push   rbx
   28286:	mov    rbx,rsi
   28289:	sub    rsp,0x8
   2828d:	movsx  ecx,BYTE PTR [rsi]
   28290:	test   cl,cl
   28292:	je     28321 <GKIKeyIndex+0xa1>
   28298:	mov    r8d,DWORD PTR [rdi+0xc]
   2829c:	xor    edx,edx
   2829e:	jmp    282b5 <GKIKeyIndex+0x35>
   282a0:	shl    eax,0x7
   282a3:	movsx  ecx,BYTE PTR [rsi+0x2]
   282a7:	add    rsi,0x2
   282ab:	add    eax,edx
   282ad:	cdq    
   282ae:	idiv   r8d
   282b1:	test   cl,cl
   282b3:	je     28318 <GKIKeyIndex+0x98>
   282b5:	mov    eax,edx
   282b7:	movsx  edx,BYTE PTR [rsi+0x1]
   282bb:	shl    eax,0x7
   282be:	add    eax,ecx
   282c0:	test   dl,dl
   282c2:	jne    282a0 <GKIKeyIndex+0x20>
   282c4:	cdq    
   282c5:	idiv   r8d
   282c8:	movsxd rdx,edx
   282cb:	shl    rdx,0x3
   282cf:	mov    rax,QWORD PTR [rdi]
   282d2:	mov    rbp,QWORD PTR [rax+rdx*1]
   282d6:	test   rbp,rbp
   282d9:	jne    282e9 <GKIKeyIndex+0x69>
   282db:	jmp    28308 <GKIKeyIndex+0x88>
   282dd:	nop    DWORD PTR [rax]
   282e0:	mov    rbp,QWORD PTR [rbp+0x10]
   282e4:	test   rbp,rbp
   282e7:	je     28308 <GKIKeyIndex+0x88>
   282e9:	mov    rsi,QWORD PTR [rbp+0x0]
   282ed:	mov    rdi,rbx
   282f0:	call   3640 <strcmp@plt>
   282f5:	test   eax,eax
   282f7:	jne    282e0 <GKIKeyIndex+0x60>
   282f9:	mov    eax,DWORD PTR [rbp+0x8]
   282fc:	add    rsp,0x8
   28300:	pop    rbx
   28301:	pop    rbp
   28302:	ret    
   28303:	nop    DWORD PTR [rax+rax*1+0x0]
   28308:	add    rsp,0x8
   2830c:	mov    eax,0xffffffff
   28311:	pop    rbx
   28312:	pop    rbp
   28313:	ret    
   28314:	nop    DWORD PTR [rax+0x0]
   28318:	movsxd rdx,edx
   2831b:	shl    rdx,0x3
   2831f:	jmp    282cf <GKIKeyIndex+0x4f>
   28321:	xor    edx,edx
   28323:	jmp    282cf <GKIKeyIndex+0x4f>
   28325:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000028330 <GKIStatus>:
   28330:	endbr64 
   28334:	push   r14
   28336:	push   r13
   28338:	push   r12
   2833a:	push   rbx
   2833b:	mov    rbx,rdi
   2833e:	sub    rsp,0x8
   28342:	mov    edx,DWORD PTR [rdi+0xc]
   28345:	test   edx,edx
   28347:	jle    283ae <GKIStatus+0x7e>
   28349:	mov    rax,QWORD PTR [rdi]
   2834c:	sub    edx,0x1
   2834f:	mov    r12d,0x7fffffff
   28355:	xor    r14d,r14d
   28358:	mov    r13d,0xffffffff
   2835e:	lea    rcx,[rax+0x8]
   28362:	mov    rax,QWORD PTR [rax]
   28365:	lea    rsi,[rcx+rdx*8]
   28369:	test   rax,rax
   2836c:	je     283a6 <GKIStatus+0x76>
   2836e:	xchg   ax,ax
   28370:	xor    edx,edx
   28372:	nop    WORD PTR [rax+rax*1+0x0]
   28378:	mov    rax,QWORD PTR [rax+0x10]
   2837c:	add    edx,0x1
   2837f:	test   rax,rax
   28382:	jne    28378 <GKIStatus+0x48>
   28384:	cmp    r13d,edx
   28387:	mov    rax,rcx
   2838a:	cmovl  r13d,edx
   2838e:	cmp    r12d,edx
   28391:	cmovg  r12d,edx
   28395:	cmp    rcx,rsi
   28398:	je     283bd <GKIStatus+0x8d>
   2839a:	mov    rax,QWORD PTR [rax]
   2839d:	add    rcx,0x8
   283a1:	test   rax,rax
   283a4:	jne    28370 <GKIStatus+0x40>
   283a6:	add    r14d,0x1
   283aa:	xor    edx,edx
   283ac:	jmp    28384 <GKIStatus+0x54>
   283ae:	mov    r12d,0x7fffffff
   283b4:	mov    r13d,0xffffffff
   283ba:	xor    r14d,r14d
   283bd:	mov    edx,DWORD PTR [rbx+0x10]
   283c0:	lea    rsi,[rip+0x18627]        # 409ee <defmq.7318+0x82e>
   283c7:	mov    edi,0x1
   283cc:	xor    eax,eax
   283ce:	call   3710 <__printf_chk@plt>
   283d3:	mov    edx,DWORD PTR [rbx+0xc]
   283d6:	mov    edi,0x1
   283db:	xor    eax,eax
   283dd:	lea    rsi,[rip+0x18621]        # 40a05 <defmq.7318+0x845>
   283e4:	call   3710 <__printf_chk@plt>
   283e9:	pxor   xmm0,xmm0
   283ed:	pxor   xmm1,xmm1
   283f1:	lea    rsi,[rip+0x18624]        # 40a1c <defmq.7318+0x85c>
   283f8:	cvtsi2ss xmm1,DWORD PTR [rbx+0xc]
   283fd:	mov    edi,0x1
   28402:	mov    eax,0x1
   28407:	cvtsi2ss xmm0,DWORD PTR [rbx+0x10]
   2840c:	divss  xmm0,xmm1
   28410:	cvtss2sd xmm0,xmm0
   28414:	call   3710 <__printf_chk@plt>
   28419:	mov    edx,r14d
   2841c:	mov    edi,0x1
   28421:	lea    rsi,[rip+0x1860d]        # 40a35 <defmq.7318+0x875>
   28428:	xor    eax,eax
   2842a:	call   3710 <__printf_chk@plt>
   2842f:	mov    edx,r13d
   28432:	mov    edi,0x1
   28437:	xor    eax,eax
   28439:	lea    rsi,[rip+0x1860c]        # 40a4c <defmq.7318+0x88c>
   28440:	call   3710 <__printf_chk@plt>
   28445:	add    rsp,0x8
   28449:	mov    edx,r12d
   2844c:	xor    eax,eax
   2844e:	pop    rbx
   2844f:	lea    rsi,[rip+0x1860d]        # 40a63 <defmq.7318+0x8a3>
   28456:	pop    r12
   28458:	mov    edi,0x1
   2845d:	pop    r13
   2845f:	pop    r14
   28461:	jmp    3710 <__printf_chk@plt>
   28466:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000028470 <gsi_keysorter>:
   28470:	endbr64 
   28474:	jmp    3640 <strcmp@plt>
   28479:	nop    DWORD PTR [rax+0x0]

0000000000028480 <GSIOpen>:
   28480:	endbr64 
   28484:	push   r12
   28486:	mov    edx,0x10
   2848b:	mov    esi,0x3a
   28490:	push   rbp
   28491:	mov    rbp,rdi
   28494:	lea    rdi,[rip+0x185f5]        # 40a90 <gki_primes+0x10>
   2849b:	sub    rsp,0x38
   2849f:	mov    rax,QWORD PTR fs:0x28
   284a8:	mov    QWORD PTR [rsp+0x28],rax
   284ad:	xor    eax,eax
   284af:	call   36810 <sre_malloc>
   284b4:	lea    rsi,[rip+0x18a93]        # 40f4e <gki_primes+0x4ce>
   284bb:	mov    rdi,rbp
   284be:	mov    r12,rax
   284c1:	call   3750 <fopen@plt>
   284c6:	mov    QWORD PTR [r12],rax
   284ca:	test   rax,rax
   284cd:	je     285b0 <GSIOpen+0x130>
   284d3:	mov    rcx,rax
   284d6:	mov    rdi,rsp
   284d9:	mov    edx,0x20
   284de:	mov    esi,0x1
   284e3:	call   3500 <fread@plt>
   284e8:	test   rax,rax
   284eb:	je     28590 <GSIOpen+0x110>
   284f1:	cmp    DWORD PTR [rsp],0x495347
   284f8:	je     28530 <GSIOpen+0xb0>
   284fa:	mov    rdi,r12
   284fd:	xor    r12d,r12d
   28500:	call   3460 <free@plt>
   28505:	mov    DWORD PTR [rip+0x39e61],0x5        # 62370 <squid_errno>
   2850f:	mov    rax,QWORD PTR [rsp+0x28]
   28514:	xor    rax,QWORD PTR fs:0x28
   2851d:	jne    285ca <GSIOpen+0x14a>
   28523:	add    rsp,0x38
   28527:	mov    rax,r12
   2852a:	pop    rbp
   2852b:	pop    r12
   2852d:	ret    
   2852e:	xchg   ax,ax
   28530:	mov    rcx,QWORD PTR [r12]
   28534:	lea    rdi,[r12+0x8]
   28539:	mov    edx,0x1
   2853e:	mov    esi,0x2
   28543:	call   3500 <fread@plt>
   28548:	test   rax,rax
   2854b:	je     28590 <GSIOpen+0x110>
   2854d:	mov    rcx,QWORD PTR [r12]
   28551:	lea    rdi,[r12+0xc]
   28556:	mov    edx,0x1
   2855b:	mov    esi,0x4
   28560:	call   3500 <fread@plt>
   28565:	test   rax,rax
   28568:	je     28590 <GSIOpen+0x110>
   2856a:	movzx  edi,WORD PTR [r12+0x8]
   28570:	call   3ace0 <sre_ntoh16>
   28575:	mov    edi,DWORD PTR [r12+0xc]
   2857a:	mov    WORD PTR [r12+0x8],ax
   28580:	call   3acf0 <sre_ntoh32>
   28585:	mov    DWORD PTR [r12+0xc],eax
   2858a:	jmp    2850f <GSIOpen+0x8f>
   2858c:	nop    DWORD PTR [rax+0x0]
   28590:	mov    rdi,r12
   28593:	xor    r12d,r12d
   28596:	call   3460 <free@plt>
   2859b:	mov    DWORD PTR [rip+0x39dcb],0x2        # 62370 <squid_errno>
   285a5:	jmp    2850f <GSIOpen+0x8f>
   285aa:	nop    WORD PTR [rax+rax*1+0x0]
   285b0:	mov    rdi,r12
   285b3:	xor    r12d,r12d
   285b6:	call   3460 <free@plt>
   285bb:	mov    DWORD PTR [rip+0x39dab],0x4        # 62370 <squid_errno>
   285c5:	jmp    2850f <GSIOpen+0x8f>
   285ca:	call   3570 <__stack_chk_fail@plt>
   285cf:	nop

00000000000285d0 <GSIGetRecord>:
   285d0:	endbr64 
   285d4:	push   r12
   285d6:	mov    r12,rcx
   285d9:	push   rbp
   285da:	mov    rbp,rdx
   285dd:	push   rbx
   285de:	mov    rbx,rdi
   285e1:	mov    rcx,QWORD PTR [rdi]
   285e4:	test   rsi,rsi
   285e7:	je     28688 <GSIGetRecord+0xb8>
   285ed:	mov    rdi,rsi
   285f0:	mov    edx,0x1
   285f5:	mov    esi,0x20
   285fa:	call   3500 <fread@plt>
   285ff:	test   rax,rax
   28602:	je     2864a <GSIGetRecord+0x7a>
   28604:	mov    rcx,QWORD PTR [rbx]
   28607:	test   rbp,rbp
   2860a:	je     286a6 <GSIGetRecord+0xd6>
   28610:	mov    edx,0x1
   28615:	mov    esi,0x2
   2861a:	mov    rdi,rbp
   2861d:	call   3500 <fread@plt>
   28622:	test   rax,rax
   28625:	je     2864a <GSIGetRecord+0x7a>
   28627:	mov    rcx,QWORD PTR [rbx]
   2862a:	test   r12,r12
   2862d:	je     286e0 <GSIGetRecord+0x110>
   28633:	mov    edx,0x1
   28638:	mov    esi,0x4
   2863d:	mov    rdi,r12
   28640:	call   3500 <fread@plt>
   28645:	test   rax,rax
   28648:	jne    28660 <GSIGetRecord+0x90>
   2864a:	mov    DWORD PTR [rip+0x39d1c],0x2        # 62370 <squid_errno>
   28654:	xor    eax,eax
   28656:	pop    rbx
   28657:	pop    rbp
   28658:	pop    r12
   2865a:	ret    
   2865b:	nop    DWORD PTR [rax+rax*1+0x0]
   28660:	movzx  edi,WORD PTR [rbp+0x0]
   28664:	call   3ace0 <sre_ntoh16>
   28669:	mov    WORD PTR [rbp+0x0],ax
   2866d:	mov    edi,DWORD PTR [r12]
   28671:	call   3acf0 <sre_ntoh32>
   28676:	pop    rbx
   28677:	pop    rbp
   28678:	mov    DWORD PTR [r12],eax
   2867c:	mov    eax,0x1
   28681:	pop    r12
   28683:	ret    
   28684:	nop    DWORD PTR [rax+0x0]
   28688:	mov    rdi,rcx
   2868b:	mov    edx,0x1
   28690:	mov    esi,0x20
   28695:	call   36e0 <fseek@plt>
   2869a:	mov    rcx,QWORD PTR [rbx]
   2869d:	test   rbp,rbp
   286a0:	jne    28610 <GSIGetRecord+0x40>
   286a6:	mov    edx,0x1
   286ab:	mov    esi,0x2
   286b0:	mov    rdi,rcx
   286b3:	call   36e0 <fseek@plt>
   286b8:	test   r12,r12
   286bb:	je     28710 <GSIGetRecord+0x140>
   286bd:	mov    rcx,QWORD PTR [rbx]
   286c0:	mov    edx,0x1
   286c5:	mov    esi,0x4
   286ca:	mov    rdi,r12
   286cd:	call   3500 <fread@plt>
   286d2:	test   rax,rax
   286d5:	jne    2866d <GSIGetRecord+0x9d>
   286d7:	jmp    2864a <GSIGetRecord+0x7a>
   286dc:	nop    DWORD PTR [rax+0x0]
   286e0:	mov    rdi,rcx
   286e3:	mov    edx,0x1
   286e8:	mov    esi,0x4
   286ed:	call   36e0 <fseek@plt>
   286f2:	movzx  edi,WORD PTR [rbp+0x0]
   286f6:	call   3ace0 <sre_ntoh16>
   286fb:	mov    WORD PTR [rbp+0x0],ax
   286ff:	mov    eax,0x1
   28704:	jmp    28656 <GSIGetRecord+0x86>
   28709:	nop    DWORD PTR [rax+0x0]
   28710:	mov    rdi,QWORD PTR [rbx]
   28713:	mov    edx,0x1
   28718:	mov    esi,0x4
   2871d:	call   36e0 <fseek@plt>
   28722:	mov    eax,0x1
   28727:	jmp    28656 <GSIGetRecord+0x86>
   2872c:	nop    DWORD PTR [rax+0x0]

0000000000028730 <GSIGetOffset>:
   28730:	endbr64 
   28734:	push   r15
   28736:	push   r14
   28738:	push   r13
   2873a:	push   r12
   2873c:	mov    r12,rdi
   2873f:	push   rbp
   28740:	push   rbx
   28741:	sub    rsp,0x78
   28745:	movzx  ebp,WORD PTR [rdi+0x8]
   28749:	mov    QWORD PTR [rsp+0x10],rsi
   2874e:	lea    r15,[rsp+0x38]
   28753:	lea    r14,[rsp+0x40]
   28758:	lea    r13d,[rbp+0x1]
   2875c:	add    ebp,DWORD PTR [rdi+0xc]
   2875f:	mov    QWORD PTR [rsp+0x18],rdx
   28764:	xor    edx,edx
   28766:	lea    ebx,[r13+rbp*1+0x0]
   2876b:	mov    QWORD PTR [rsp+0x20],rcx
   28770:	mov    rdi,QWORD PTR [rdi]
   28773:	shr    ebx,1
   28775:	mov    QWORD PTR [rsp+0x28],r8
   2877a:	imul   esi,ebx,0x26
   2877d:	mov    rax,QWORD PTR fs:0x28
   28786:	mov    QWORD PTR [rsp+0x68],rax
   2878b:	xor    eax,eax
   2878d:	mov    BYTE PTR [rsp+0x60],0x0
   28792:	call   36e0 <fseek@plt>
   28797:	lea    rax,[rsp+0x36]
   2879c:	mov    QWORD PTR [rsp+0x8],rax
   287a1:	jmp    287c0 <GSIGetOffset+0x90>
   287a3:	nop    DWORD PTR [rax+rax*1+0x0]
   287a8:	lea    ebp,[rbx-0x1]
   287ab:	lea    ebx,[r13+rbp*1+0x0]
   287b0:	mov    rdi,QWORD PTR [r12]
   287b4:	xor    edx,edx
   287b6:	shr    ebx,1
   287b8:	imul   esi,ebx,0x26
   287bb:	call   36e0 <fseek@plt>
   287c0:	mov    rdx,QWORD PTR [rsp+0x8]
   287c5:	mov    rcx,r15
   287c8:	mov    rsi,r14
   287cb:	mov    rdi,r12
   287ce:	call   285d0 <GSIGetRecord>
   287d3:	test   eax,eax
   287d5:	je     28800 <GSIGetOffset+0xd0>
   287d7:	mov    rsi,QWORD PTR [rsp+0x10]
   287dc:	mov    rdi,r14
   287df:	call   3640 <strcmp@plt>
   287e4:	test   eax,eax
   287e6:	je     28800 <GSIGetOffset+0xd0>
   287e8:	cmp    r13d,ebp
   287eb:	jae    28868 <GSIGetOffset+0x138>
   287ed:	test   eax,eax
   287ef:	jns    287a8 <GSIGetOffset+0x78>
   287f1:	lea    r13d,[rbx+0x1]
   287f5:	jmp    287ab <GSIGetOffset+0x7b>
   287f7:	nop    WORD PTR [rax+rax*1+0x0]
   28800:	movzx  esi,WORD PTR [rsp+0x36]
   28805:	mov    rdi,QWORD PTR [r12]
   28809:	xor    edx,edx
   2880b:	imul   rsi,rsi,0x26
   2880f:	call   36e0 <fseek@plt>
   28814:	mov    rsi,QWORD PTR [rsp+0x18]
   28819:	xor    edx,edx
   2881b:	mov    rdi,r12
   2881e:	lea    rcx,[rsp+0x3c]
   28823:	call   285d0 <GSIGetRecord>
   28828:	mov    eax,DWORD PTR [rsp+0x3c]
   2882c:	mov    rcx,QWORD PTR [rsp+0x20]
   28831:	mov    DWORD PTR [rcx],eax
   28833:	mov    rax,QWORD PTR [rsp+0x28]
   28838:	mov    ecx,DWORD PTR [rsp+0x38]
   2883c:	mov    QWORD PTR [rax],rcx
   2883f:	mov    eax,0x1
   28844:	mov    rcx,QWORD PTR [rsp+0x68]
   28849:	xor    rcx,QWORD PTR fs:0x28
   28852:	jne    2886c <GSIGetOffset+0x13c>
   28854:	add    rsp,0x78
   28858:	pop    rbx
   28859:	pop    rbp
   2885a:	pop    r12
   2885c:	pop    r13
   2885e:	pop    r14
   28860:	pop    r15
   28862:	ret    
   28863:	nop    DWORD PTR [rax+rax*1+0x0]
   28868:	xor    eax,eax
   2886a:	jmp    28844 <GSIGetOffset+0x114>
   2886c:	call   3570 <__stack_chk_fail@plt>
   28871:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2887c:	nop    DWORD PTR [rax+0x0]

0000000000028880 <GSIClose>:
   28880:	endbr64 
   28884:	push   rbp
   28885:	mov    rbp,rdi
   28888:	mov    rdi,QWORD PTR [rdi]
   2888b:	call   3530 <fclose@plt>
   28890:	mov    rdi,rbp
   28893:	pop    rbp
   28894:	jmp    3460 <free@plt>
   28899:	nop    DWORD PTR [rax+0x0]

00000000000288a0 <GSIAllocIndex>:
   288a0:	endbr64 
   288a4:	push   r12
   288a6:	mov    edx,0x28
   288ab:	mov    esi,0xc8
   288b0:	lea    rdi,[rip+0x181d9]        # 40a90 <gki_primes+0x10>
   288b7:	call   36810 <sre_malloc>
   288bc:	mov    edx,0x50
   288c1:	mov    esi,0xc9
   288c6:	lea    rdi,[rip+0x181c3]        # 40a90 <gki_primes+0x10>
   288cd:	mov    r12,rax
   288d0:	call   36810 <sre_malloc>
   288d5:	mov    edx,0x28
   288da:	mov    esi,0xca
   288df:	lea    rdi,[rip+0x181aa]        # 40a90 <gki_primes+0x10>
   288e6:	mov    QWORD PTR [r12],rax
   288ea:	call   36810 <sre_malloc>
   288ef:	mov    edx,0xfa0
   288f4:	mov    esi,0xcb
   288f9:	lea    rdi,[rip+0x18190]        # 40a90 <gki_primes+0x10>
   28900:	mov    QWORD PTR [r12+0x8],rax
   28905:	call   36810 <sre_malloc>
   2890a:	mov    DWORD PTR [r12+0x20],0x0
   28913:	mov    QWORD PTR [r12+0x18],rax
   28918:	xor    eax,eax
   2891a:	mov    WORD PTR [r12+0x10],ax
   28920:	mov    rax,r12
   28923:	pop    r12
   28925:	ret    
   28926:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000028930 <GSIFreeIndex>:
   28930:	endbr64 
   28934:	push   rbp
   28935:	mov    rbp,rdi
   28938:	push   rbx
   28939:	sub    rsp,0x8
   2893d:	cmp    WORD PTR [rdi+0x10],0x0
   28942:	je     28969 <GSIFreeIndex+0x39>
   28944:	xor    ebx,ebx
   28946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28950:	mov    rax,QWORD PTR [rbp+0x0]
   28954:	mov    rdi,QWORD PTR [rax+rbx*8]
   28958:	add    rbx,0x1
   2895c:	call   3460 <free@plt>
   28961:	movzx  eax,WORD PTR [rbp+0x10]
   28965:	cmp    eax,ebx
   28967:	jg     28950 <GSIFreeIndex+0x20>
   28969:	mov    rdi,QWORD PTR [rbp+0x0]
   2896d:	call   3460 <free@plt>
   28972:	mov    rdi,QWORD PTR [rbp+0x8]
   28976:	call   3460 <free@plt>
   2897b:	mov    rdi,QWORD PTR [rbp+0x18]
   2897f:	call   3460 <free@plt>
   28984:	add    rsp,0x8
   28988:	mov    rdi,rbp
   2898b:	pop    rbx
   2898c:	pop    rbp
   2898d:	jmp    3460 <free@plt>
   28992:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2899d:	nop    DWORD PTR [rax]

00000000000289a0 <GSIAddFileToIndex>:
   289a0:	endbr64 
   289a4:	push   r14
   289a6:	push   r13
   289a8:	mov    r13d,edx
   289ab:	push   r12
   289ad:	push   rbp
   289ae:	mov    rbp,rsi
   289b1:	push   rbx
   289b2:	mov    rbx,rdi
   289b5:	mov    rdi,rsi
   289b8:	call   3560 <strlen@plt>
   289bd:	mov    r12,rax
   289c0:	cmp    eax,0x1f
   289c3:	jg     28a10 <GSIAddFileToIndex+0x70>
   289c5:	movzx  edx,WORD PTR [rbx+0x10]
   289c9:	mov    rax,QWORD PTR [rbx]
   289cc:	mov    esi,r12d
   289cf:	mov    rdi,rbp
   289d2:	lea    r14,[rax+rdx*8]
   289d6:	call   36ce0 <sre_strdup>
   289db:	movzx  ecx,WORD PTR [rbx+0x10]
   289df:	mov    rdx,QWORD PTR [rbx+0x8]
   289e3:	mov    QWORD PTR [r14],rax
   289e6:	mov    rax,rcx
   289e9:	mov    DWORD PTR [rdx+rcx*4],r13d
   289ed:	add    eax,0x1
   289f0:	imul   dx,ax,0xcccd
   289f5:	mov    WORD PTR [rbx+0x10],ax
   289f9:	ror    dx,1
   289fc:	cmp    dx,0x1999
   28a01:	jbe    28a20 <GSIAddFileToIndex+0x80>
   28a03:	pop    rbx
   28a04:	pop    rbp
   28a05:	pop    r12
   28a07:	pop    r13
   28a09:	pop    r14
   28a0b:	ret    
   28a0c:	nop    DWORD PTR [rax+0x0]
   28a10:	lea    rdi,[rip+0x18141]        # 40b58 <gki_primes+0xd8>
   28a17:	xor    eax,eax
   28a19:	call   317f0 <Die>
   28a1e:	jmp    289c5 <GSIAddFileToIndex+0x25>
   28a20:	mov    rdx,QWORD PTR [rbx]
   28a23:	movzx  eax,ax
   28a26:	mov    esi,0xe5
   28a2b:	lea    rdi,[rip+0x1805e]        # 40a90 <gki_primes+0x10>
   28a32:	lea    rcx,[rax*8+0x50]
   28a3a:	call   36860 <sre_realloc>
   28a3f:	mov    rdx,QWORD PTR [rbx+0x8]
   28a43:	mov    esi,0xe6
   28a48:	lea    rdi,[rip+0x18041]        # 40a90 <gki_primes+0x10>
   28a4f:	mov    QWORD PTR [rbx],rax
   28a52:	movzx  eax,WORD PTR [rbx+0x10]
   28a56:	lea    rcx,[rax*4+0x28]
   28a5e:	call   36860 <sre_realloc>
   28a63:	mov    QWORD PTR [rbx+0x8],rax
   28a67:	pop    rbx
   28a68:	pop    rbp
   28a69:	pop    r12
   28a6b:	pop    r13
   28a6d:	pop    r14
   28a6f:	ret    

0000000000028a70 <GSIAddKeyToIndex>:
   28a70:	endbr64 
   28a74:	push   r13
   28a76:	mov    r13,rsi
   28a79:	push   r12
   28a7b:	mov    r12d,edx
   28a7e:	push   rbp
   28a7f:	mov    rbp,rcx
   28a82:	push   rbx
   28a83:	mov    rbx,rdi
   28a86:	mov    rdi,rsi
   28a89:	sub    rsp,0x8
   28a8d:	call   3560 <strlen@plt>
   28a92:	cmp    rax,0x1f
   28a96:	ja     28b20 <GSIAddKeyToIndex+0xb0>
   28a9c:	cmp    r12d,0xffff
   28aa3:	jg     28b3b <GSIAddKeyToIndex+0xcb>
   28aa9:	mov    eax,0xffffffff
   28aae:	cmp    rbp,rax
   28ab1:	jg     28b57 <GSIAddKeyToIndex+0xe7>
   28ab7:	movsxd rax,DWORD PTR [rbx+0x20]
   28abb:	mov    rsi,r13
   28abe:	lea    rdx,[rax+rax*4]
   28ac2:	mov    rax,QWORD PTR [rbx+0x18]
   28ac6:	lea    rdi,[rax+rdx*8]
   28aca:	mov    edx,0x1f
   28acf:	call   34b0 <strncpy@plt>
   28ad4:	movsxd rdx,DWORD PTR [rbx+0x20]
   28ad8:	mov    r8,QWORD PTR [rbx+0x18]
   28adc:	lea    rcx,[rdx+rdx*4]
   28ae0:	mov    rax,rdx
   28ae3:	shl    rcx,0x3
   28ae7:	add    eax,0x1
   28aea:	lea    rdx,[r8+rcx*1]
   28aee:	mov    BYTE PTR [rdx+0x1f],0x0
   28af2:	mov    WORD PTR [rdx+0x20],r12w
   28af7:	mov    DWORD PTR [rdx+0x24],ebp
   28afa:	mov    DWORD PTR [rbx+0x20],eax
   28afd:	imul   eax,eax,0xc28f5c29
   28b03:	add    eax,0x51eb850
   28b08:	ror    eax,0x2
   28b0b:	cmp    eax,0x28f5c28
   28b10:	jbe    28b70 <GSIAddKeyToIndex+0x100>
   28b12:	add    rsp,0x8
   28b16:	pop    rbx
   28b17:	pop    rbp
   28b18:	pop    r12
   28b1a:	pop    r13
   28b1c:	ret    
   28b1d:	nop    DWORD PTR [rax]
   28b20:	xor    eax,eax
   28b22:	lea    rdi,[rip+0x17f71]        # 40a9a <gki_primes+0x1a>
   28b29:	call   317f0 <Die>
   28b2e:	cmp    r12d,0xffff
   28b35:	jle    28aa9 <GSIAddKeyToIndex+0x39>
   28b3b:	xor    eax,eax
   28b3d:	lea    rdi,[rip+0x17f70]        # 40ab4 <gki_primes+0x34>
   28b44:	call   317f0 <Die>
   28b49:	mov    eax,0xffffffff
   28b4e:	cmp    rbp,rax
   28b51:	jle    28ab7 <GSIAddKeyToIndex+0x47>
   28b57:	lea    rdi,[rip+0x17f72]        # 40ad0 <gki_primes+0x50>
   28b5e:	xor    eax,eax
   28b60:	call   317f0 <Die>
   28b65:	jmp    28ab7 <GSIAddKeyToIndex+0x47>
   28b6a:	nop    WORD PTR [rax+rax*1+0x0]
   28b70:	add    rcx,0xfc8
   28b77:	mov    rdx,r8
   28b7a:	mov    esi,0xf7
   28b7f:	lea    rdi,[rip+0x17f0a]        # 40a90 <gki_primes+0x10>
   28b86:	call   36860 <sre_realloc>
   28b8b:	mov    QWORD PTR [rbx+0x18],rax
   28b8f:	add    rsp,0x8
   28b93:	pop    rbx
   28b94:	pop    rbp
   28b95:	pop    r12
   28b97:	pop    r13
   28b99:	ret    
   28b9a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000028ba0 <GSISortIndex>:
   28ba0:	endbr64 
   28ba4:	mov    esi,DWORD PTR [rdi+0x20]
   28ba7:	mov    rdi,QWORD PTR [rdi+0x18]
   28bab:	lea    rcx,[rip+0xfffffffffffff8be]        # 28470 <gsi_keysorter>
   28bb2:	xor    eax,eax
   28bb4:	mov    edx,0x28
   28bb9:	jmp    236d0 <specqsort>
   28bbe:	xchg   ax,ax

0000000000028bc0 <GSIWriteHeader>:
   28bc0:	endbr64 
   28bc4:	push   r12
   28bc6:	mov    r12,rdi
   28bc9:	push   rbp
   28bca:	mov    rbp,rdx
   28bcd:	push   rbx
   28bce:	mov    ebx,esi
   28bd0:	sub    rsp,0x40
   28bd4:	mov    rax,QWORD PTR fs:0x28
   28bdd:	mov    QWORD PTR [rsp+0x38],rax
   28be2:	xor    eax,eax
   28be4:	cmp    esi,0xffff
   28bea:	jg     28ca8 <GSIWriteHeader+0xe8>
   28bf0:	mov    eax,0xffffffff
   28bf5:	cmp    rbp,rax
   28bf8:	jg     28cc2 <GSIWriteHeader+0x102>
   28bfe:	movzx  edi,bx
   28c01:	mov    WORD PTR [rsp+0xa],bx
   28c06:	mov    DWORD PTR [rsp+0xc],ebp
   28c0a:	call   3ad00 <sre_hton16>
   28c0f:	mov    edi,DWORD PTR [rsp+0xc]
   28c13:	mov    WORD PTR [rsp+0xa],ax
   28c18:	call   3ad10 <sre_hton32>
   28c1d:	lea    rdi,[rsp+0x10]
   28c22:	mov    rcx,r12
   28c25:	mov    edx,0x20
   28c2a:	mov    esi,0x1
   28c2f:	mov    DWORD PTR [rsp+0xc],eax
   28c33:	mov    DWORD PTR [rsp+0x10],0x495347
   28c3b:	call   37b0 <fwrite@plt>
   28c40:	cmp    rax,0x1f
   28c44:	jbe    28d10 <GSIWriteHeader+0x150>
   28c4a:	lea    rdi,[rsp+0xa]
   28c4f:	mov    rcx,r12
   28c52:	mov    edx,0x1
   28c57:	mov    esi,0x2
   28c5c:	call   37b0 <fwrite@plt>
   28c61:	test   rax,rax
   28c64:	je     28cf0 <GSIWriteHeader+0x130>
   28c6a:	lea    rdi,[rsp+0xc]
   28c6f:	mov    rcx,r12
   28c72:	mov    edx,0x1
   28c77:	mov    esi,0x4
   28c7c:	call   37b0 <fwrite@plt>
   28c81:	test   rax,rax
   28c84:	je     28cd8 <GSIWriteHeader+0x118>
   28c86:	mov    rax,QWORD PTR [rsp+0x38]
   28c8b:	xor    rax,QWORD PTR fs:0x28
   28c94:	jne    28d26 <GSIWriteHeader+0x166>
   28c9a:	add    rsp,0x40
   28c9e:	pop    rbx
   28c9f:	pop    rbp
   28ca0:	pop    r12
   28ca2:	ret    
   28ca3:	nop    DWORD PTR [rax+rax*1+0x0]
   28ca8:	lea    rdi,[rip+0x17e3d]        # 40aec <gki_primes+0x6c>
   28caf:	call   317f0 <Die>
   28cb4:	mov    eax,0xffffffff
   28cb9:	cmp    rbp,rax
   28cbc:	jle    28bfe <GSIWriteHeader+0x3e>
   28cc2:	lea    rdi,[rip+0x17e3c]        # 40b05 <gki_primes+0x85>
   28cc9:	xor    eax,eax
   28ccb:	call   317f0 <Die>
   28cd0:	jmp    28bfe <GSIWriteHeader+0x3e>
   28cd5:	nop    DWORD PTR [rax]
   28cd8:	mov    esi,0x13c
   28cdd:	lea    rdi,[rip+0x17dac]        # 40a90 <gki_primes+0x10>
   28ce4:	call   31a00 <Panic>
   28ce9:	jmp    28c86 <GSIWriteHeader+0xc6>
   28ceb:	nop    DWORD PTR [rax+rax*1+0x0]
   28cf0:	mov    esi,0x13b
   28cf5:	lea    rdi,[rip+0x17d94]        # 40a90 <gki_primes+0x10>
   28cfc:	call   31a00 <Panic>
   28d01:	jmp    28c6a <GSIWriteHeader+0xaa>
   28d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28d10:	mov    esi,0x13a
   28d15:	lea    rdi,[rip+0x17d74]        # 40a90 <gki_primes+0x10>
   28d1c:	call   31a00 <Panic>
   28d21:	jmp    28c4a <GSIWriteHeader+0x8a>
   28d26:	call   3570 <__stack_chk_fail@plt>
   28d2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000028d30 <GSIWriteFileRecord>:
   28d30:	endbr64 
   28d34:	push   r13
   28d36:	mov    r13d,ecx
   28d39:	push   r12
   28d3b:	mov    r12,rdi
   28d3e:	mov    rdi,rsi
   28d41:	push   rbp
   28d42:	mov    rbp,rsi
   28d45:	push   rbx
   28d46:	mov    ebx,edx
   28d48:	sub    rsp,0x18
   28d4c:	mov    rax,QWORD PTR fs:0x28
   28d55:	mov    QWORD PTR [rsp+0x8],rax
   28d5a:	xor    eax,eax
   28d5c:	call   3560 <strlen@plt>
   28d61:	mov    r8,rax
   28d64:	xor    eax,eax
   28d66:	cmp    r8,0x1f
   28d6a:	ja     28dfc <GSIWriteFileRecord+0xcc>
   28d70:	cmp    ebx,0xffff
   28d76:	jg     28e70 <GSIWriteFileRecord+0x140>
   28d7c:	movzx  edi,bx
   28d7f:	mov    WORD PTR [rsp+0x2],bx
   28d84:	mov    DWORD PTR [rsp+0x4],r13d
   28d89:	call   3ad00 <sre_hton16>
   28d8e:	mov    edi,DWORD PTR [rsp+0x4]
   28d92:	mov    WORD PTR [rsp+0x2],ax
   28d97:	call   3ad10 <sre_hton32>
   28d9c:	mov    rcx,r12
   28d9f:	mov    edx,0x20
   28da4:	mov    rdi,rbp
   28da7:	mov    esi,0x1
   28dac:	mov    DWORD PTR [rsp+0x4],eax
   28db0:	call   37b0 <fwrite@plt>
   28db5:	cmp    rax,0x1f
   28db9:	jbe    28e50 <GSIWriteFileRecord+0x120>
   28dbf:	lea    rdi,[rsp+0x2]
   28dc4:	mov    rcx,r12
   28dc7:	mov    edx,0x1
   28dcc:	mov    esi,0x2
   28dd1:	call   37b0 <fwrite@plt>
   28dd6:	test   rax,rax
   28dd9:	je     28e38 <GSIWriteFileRecord+0x108>
   28ddb:	lea    rdi,[rsp+0x4]
   28de0:	mov    rcx,r12
   28de3:	mov    edx,0x1
   28de8:	mov    esi,0x4
   28ded:	call   37b0 <fwrite@plt>
   28df2:	test   rax,rax
   28df5:	je     28e20 <GSIWriteFileRecord+0xf0>
   28df7:	mov    eax,0x1
   28dfc:	mov    rbx,QWORD PTR [rsp+0x8]
   28e01:	xor    rbx,QWORD PTR fs:0x28
   28e0a:	jne    28e81 <GSIWriteFileRecord+0x151>
   28e0c:	add    rsp,0x18
   28e10:	pop    rbx
   28e11:	pop    rbp
   28e12:	pop    r12
   28e14:	pop    r13
   28e16:	ret    
   28e17:	nop    WORD PTR [rax+rax*1+0x0]
   28e20:	mov    esi,0x15d
   28e25:	lea    rdi,[rip+0x17c64]        # 40a90 <gki_primes+0x10>
   28e2c:	call   31a00 <Panic>
   28e31:	jmp    28df7 <GSIWriteFileRecord+0xc7>
   28e33:	nop    DWORD PTR [rax+rax*1+0x0]
   28e38:	mov    esi,0x15c
   28e3d:	lea    rdi,[rip+0x17c4c]        # 40a90 <gki_primes+0x10>
   28e44:	call   31a00 <Panic>
   28e49:	jmp    28ddb <GSIWriteFileRecord+0xab>
   28e4b:	nop    DWORD PTR [rax+rax*1+0x0]
   28e50:	mov    esi,0x15b
   28e55:	lea    rdi,[rip+0x17c34]        # 40a90 <gki_primes+0x10>
   28e5c:	call   31a00 <Panic>
   28e61:	jmp    28dbf <GSIWriteFileRecord+0x8f>
   28e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28e70:	lea    rdi,[rip+0x17ca6]        # 40b1d <gki_primes+0x9d>
   28e77:	call   317f0 <Die>
   28e7c:	jmp    28d7c <GSIWriteFileRecord+0x4c>
   28e81:	call   3570 <__stack_chk_fail@plt>
   28e86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000028e90 <GSIWriteKeyRecord>:
   28e90:	endbr64 
   28e94:	push   r13
   28e96:	mov    r13,rsi
   28e99:	push   r12
   28e9b:	mov    r12,rdi
   28e9e:	mov    rdi,rsi
   28ea1:	push   rbp
   28ea2:	mov    rbp,rcx
   28ea5:	push   rbx
   28ea6:	mov    ebx,edx
   28ea8:	sub    rsp,0x18
   28eac:	mov    rax,QWORD PTR fs:0x28
   28eb5:	mov    QWORD PTR [rsp+0x8],rax
   28eba:	xor    eax,eax
   28ebc:	call   3560 <strlen@plt>
   28ec1:	mov    r8,rax
   28ec4:	xor    eax,eax
   28ec6:	cmp    r8,0x1f
   28eca:	ja     28f69 <GSIWriteKeyRecord+0xd9>
   28ed0:	cmp    ebx,0xffff
   28ed6:	jg     28ff8 <GSIWriteKeyRecord+0x168>
   28edc:	mov    eax,0xffffffff
   28ee1:	cmp    rbp,rax
   28ee4:	jg     28fe0 <GSIWriteKeyRecord+0x150>
   28eea:	movzx  edi,bx
   28eed:	mov    WORD PTR [rsp+0x2],bx
   28ef2:	mov    DWORD PTR [rsp+0x4],ebp
   28ef6:	call   3ad00 <sre_hton16>
   28efb:	mov    edi,DWORD PTR [rsp+0x4]
   28eff:	mov    WORD PTR [rsp+0x2],ax
   28f04:	call   3ad10 <sre_hton32>
   28f09:	mov    rcx,r12
   28f0c:	mov    edx,0x20
   28f11:	mov    rdi,r13
   28f14:	mov    esi,0x1
   28f19:	mov    DWORD PTR [rsp+0x4],eax
   28f1d:	call   37b0 <fwrite@plt>
   28f22:	cmp    rax,0x1f
   28f26:	jbe    28fc0 <GSIWriteKeyRecord+0x130>
   28f2c:	lea    rdi,[rsp+0x2]
   28f31:	mov    rcx,r12
   28f34:	mov    edx,0x1
   28f39:	mov    esi,0x2
   28f3e:	call   37b0 <fwrite@plt>
   28f43:	test   rax,rax
   28f46:	je     28fa8 <GSIWriteKeyRecord+0x118>
   28f48:	lea    rdi,[rsp+0x4]
   28f4d:	mov    rcx,r12
   28f50:	mov    edx,0x1
   28f55:	mov    esi,0x4
   28f5a:	call   37b0 <fwrite@plt>
   28f5f:	test   rax,rax
   28f62:	je     28f90 <GSIWriteKeyRecord+0x100>
   28f64:	mov    eax,0x1
   28f69:	mov    rbx,QWORD PTR [rsp+0x8]
   28f6e:	xor    rbx,QWORD PTR fs:0x28
   28f77:	jne    29014 <GSIWriteKeyRecord+0x184>
   28f7d:	add    rsp,0x18
   28f81:	pop    rbx
   28f82:	pop    rbp
   28f83:	pop    r12
   28f85:	pop    r13
   28f87:	ret    
   28f88:	nop    DWORD PTR [rax+rax*1+0x0]
   28f90:	mov    esi,0x180
   28f95:	lea    rdi,[rip+0x17af4]        # 40a90 <gki_primes+0x10>
   28f9c:	call   31a00 <Panic>
   28fa1:	jmp    28f64 <GSIWriteKeyRecord+0xd4>
   28fa3:	nop    DWORD PTR [rax+rax*1+0x0]
   28fa8:	mov    esi,0x17f
   28fad:	lea    rdi,[rip+0x17adc]        # 40a90 <gki_primes+0x10>
   28fb4:	call   31a00 <Panic>
   28fb9:	jmp    28f48 <GSIWriteKeyRecord+0xb8>
   28fbb:	nop    DWORD PTR [rax+rax*1+0x0]
   28fc0:	mov    esi,0x17e
   28fc5:	lea    rdi,[rip+0x17ac4]        # 40a90 <gki_primes+0x10>
   28fcc:	call   31a00 <Panic>
   28fd1:	jmp    28f2c <GSIWriteKeyRecord+0x9c>
   28fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28fe0:	lea    rdi,[rip+0x17b53]        # 40b3a <gki_primes+0xba>
   28fe7:	xor    eax,eax
   28fe9:	call   317f0 <Die>
   28fee:	jmp    28eea <GSIWriteKeyRecord+0x5a>
   28ff3:	nop    DWORD PTR [rax+rax*1+0x0]
   28ff8:	lea    rdi,[rip+0x17b1e]        # 40b1d <gki_primes+0x9d>
   28fff:	call   317f0 <Die>
   29004:	mov    eax,0xffffffff
   29009:	cmp    rbp,rax
   2900c:	jle    28eea <GSIWriteKeyRecord+0x5a>
   29012:	jmp    28fe0 <GSIWriteKeyRecord+0x150>
   29014:	call   3570 <__stack_chk_fail@plt>
   29019:	nop    DWORD PTR [rax+0x0]

0000000000029020 <GSIWriteIndex>:
   29020:	endbr64 
   29024:	push   r12
   29026:	mov    r12,rdi
   29029:	push   rbp
   2902a:	mov    rbp,rsi
   2902d:	push   rbx
   2902e:	movsxd rdx,DWORD PTR [rsi+0x20]
   29032:	movzx  esi,WORD PTR [rsi+0x10]
   29036:	call   28bc0 <GSIWriteHeader>
   2903b:	cmp    WORD PTR [rbp+0x10],0x0
   29040:	je     2906e <GSIWriteIndex+0x4e>
   29042:	xor    ebx,ebx
   29044:	nop    DWORD PTR [rax+0x0]
   29048:	mov    rax,QWORD PTR [rbp+0x8]
   2904c:	lea    edx,[rbx+0x1]
   2904f:	mov    rdi,r12
   29052:	mov    ecx,DWORD PTR [rax+rbx*4]
   29055:	mov    rax,QWORD PTR [rbp+0x0]
   29059:	mov    rsi,QWORD PTR [rax+rbx*8]
   2905d:	add    rbx,0x1
   29061:	call   28d30 <GSIWriteFileRecord>
   29066:	movzx  eax,WORD PTR [rbp+0x10]
   2906a:	cmp    eax,ebx
   2906c:	ja     29048 <GSIWriteIndex+0x28>
   2906e:	mov    eax,DWORD PTR [rbp+0x20]
   29071:	test   eax,eax
   29073:	je     290a5 <GSIWriteIndex+0x85>
   29075:	xor    ebx,ebx
   29077:	nop    WORD PTR [rax+rax*1+0x0]
   29080:	mov    eax,ebx
   29082:	mov    rdi,r12
   29085:	add    ebx,0x1
   29088:	lea    rdx,[rax+rax*4]
   2908c:	mov    rax,QWORD PTR [rbp+0x18]
   29090:	lea    rsi,[rax+rdx*8]
   29094:	mov    ecx,DWORD PTR [rsi+0x24]
   29097:	movzx  edx,WORD PTR [rsi+0x20]
   2909b:	call   28e90 <GSIWriteKeyRecord>
   290a0:	cmp    DWORD PTR [rbp+0x20],ebx
   290a3:	ja     29080 <GSIWriteIndex+0x60>
   290a5:	pop    rbx
   290a6:	pop    rbp
   290a7:	pop    r12
   290a9:	ret    
   290aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000000290b0 <reginsert>:
   290b0:	push   r12
   290b2:	lea    rax,[rdi+0x18]
   290b6:	push   rbp
   290b7:	mov    rbp,rdx
   290ba:	push   rbx
   290bb:	mov    rdx,QWORD PTR [rdi+0x10]
   290bf:	mov    rbx,rdi
   290c2:	cmp    rdx,rax
   290c5:	je     290f0 <reginsert+0x40>
   290c7:	mov    r12d,esi
   290ca:	sub    rdx,rbp
   290cd:	lea    rdi,[rbp+0x3]
   290d1:	mov    rsi,rbp
   290d4:	call   3740 <memmove@plt>
   290d9:	xor    eax,eax
   290db:	add    QWORD PTR [rbx+0x10],0x3
   290e0:	pop    rbx
   290e1:	mov    BYTE PTR [rbp+0x0],r12b
   290e5:	mov    WORD PTR [rbp+0x1],ax
   290e9:	pop    rbp
   290ea:	pop    r12
   290ec:	ret    
   290ed:	nop    DWORD PTR [rax]
   290f0:	add    QWORD PTR [rdi+0x20],0x3
   290f5:	pop    rbx
   290f6:	pop    rbp
   290f7:	pop    r12
   290f9:	ret    
   290fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000029100 <regtail.part.0>:
   29100:	movsx  eax,BYTE PTR [rdi+0x1]
   29104:	movzx  edx,BYTE PTR [rdi+0x2]
   29108:	shl    eax,0x8
   2910b:	and    eax,0x7f00
   29110:	or     eax,edx
   29112:	je     29130 <regtail.part.0+0x30>
   29114:	cdqe   
   29116:	mov    rdx,rdi
   29119:	sub    rdx,rax
   2911c:	add    rax,rdi
   2911f:	cmp    BYTE PTR [rdi],0x7
   29122:	mov    rdi,rdx
   29125:	cmovne rdi,rax
   29129:	jmp    29100 <regtail.part.0>
   2912b:	nop    DWORD PTR [rax+rax*1+0x0]
   29130:	mov    rdx,rsi
   29133:	mov    rax,rdi
   29136:	sub    rdx,rdi
   29139:	sub    rax,rsi
   2913c:	cmp    BYTE PTR [rdi],0x7
   2913f:	cmovne eax,edx
   29142:	mov    edx,eax
   29144:	mov    BYTE PTR [rdi+0x2],al
   29147:	sar    edx,0x8
   2914a:	and    edx,0x7f
   2914d:	mov    BYTE PTR [rdi+0x1],dl
   29150:	ret    
   29151:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2915c:	nop    DWORD PTR [rax+0x0]

0000000000029160 <SqdClean>:
   29160:	endbr64 
   29164:	push   rbp
   29165:	push   rbx
   29166:	lea    rbx,[rip+0x391b3]        # 62320 <sqd_parse>
   2916d:	lea    rbp,[rbx+0x50]
   29171:	sub    rsp,0x8
   29175:	nop    DWORD PTR [rax]
   29178:	mov    rdi,QWORD PTR [rbx]
   2917b:	test   rdi,rdi
   2917e:	je     2918c <SqdClean+0x2c>
   29180:	call   3460 <free@plt>
   29185:	mov    QWORD PTR [rbx],0x0
   2918c:	add    rbx,0x8
   29190:	cmp    rbx,rbp
   29193:	jne    29178 <SqdClean+0x18>
   29195:	add    rsp,0x8
   29199:	pop    rbx
   2919a:	pop    rbp
   2919b:	ret    
   2919c:	nop    DWORD PTR [rax+0x0]

00000000000291a0 <sqd_regerror>:
   291a0:	endbr64 
   291a4:	push   rax
   291a5:	pop    rax
   291a6:	lea    rdx,[rip+0x179cd]        # 40b7a <gki_primes+0xfa>
   291ad:	mov    esi,0x1
   291b2:	xor    eax,eax
   291b4:	sub    rsp,0x8
   291b8:	mov    rcx,rdi
   291bb:	mov    rdi,QWORD PTR [rip+0x2515e]        # 4e320 <stderr@@GLIBC_2.2.5>
   291c2:	call   37c0 <__fprintf_chk@plt>
   291c7:	mov    edi,0x1
   291cc:	call   37a0 <exit@plt>
   291d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   291dc:	nop    DWORD PTR [rax+0x0]

00000000000291e0 <regbranch>:
   291e0:	push   r15
   291e2:	lea    r15,[rdi+0x18]
   291e6:	push   r14
   291e8:	push   r13
   291ea:	push   r12
   291ec:	push   rbp
   291ed:	mov    rbp,rsi
   291f0:	push   rbx
   291f1:	mov    rbx,rdi
   291f4:	sub    rsp,0x38
   291f8:	mov    rax,QWORD PTR fs:0x28
   29201:	mov    QWORD PTR [rsp+0x28],rax
   29206:	xor    eax,eax
   29208:	mov    rax,QWORD PTR [rdi+0x10]
   2920c:	mov    DWORD PTR [rsi],0x0
   29212:	mov    QWORD PTR [rsp+0x8],rax
   29217:	cmp    rax,r15
   2921a:	je     29b90 <regbranch+0x9b0>
   29220:	mov    rsi,QWORD PTR [rsp+0x8]
   29225:	mov    r11d,0x6
   2922b:	lea    rax,[rsi+0x3]
   2922f:	mov    WORD PTR [rsi],r11w
   29233:	mov    BYTE PTR [rsi+0x2],0x0
   29237:	mov    QWORD PTR [rdi+0x10],rax
   2923b:	mov    rdi,QWORD PTR [rdi]
   2923e:	movsx  edx,BYTE PTR [rdi]
   29241:	test   edx,edx
   29243:	je     29b34 <regbranch+0x954>
   29249:	xor    r13d,r13d
   2924c:	lea    r12,[rip+0x17b5d]        # 40db0 <gki_primes+0x330>
   29253:	nop    DWORD PTR [rax+rax*1+0x0]
   29258:	cmp    edx,0x7c
   2925b:	je     2931a <regbranch+0x13a>
   29261:	cmp    edx,0x29
   29264:	je     2931a <regbranch+0x13a>
   2926a:	lea    rcx,[rdi+0x1]
   2926e:	mov    QWORD PTR [rbx],rcx
   29271:	movzx  eax,BYTE PTR [rdi]
   29274:	mov    rdx,rcx
   29277:	cmp    al,0x5e
   29279:	jg     296d0 <regbranch+0x4f0>
   2927f:	cmp    al,0x23
   29281:	jle    29580 <regbranch+0x3a0>
   29287:	sub    eax,0x24
   2928a:	cmp    al,0x3a
   2928c:	ja     29588 <regbranch+0x3a8>
   29292:	movzx  eax,al
   29295:	movsxd rax,DWORD PTR [r12+rax*4]
   29299:	add    rax,r12
   2929c:	notrack jmp rax
   2929f:	mov    r14,QWORD PTR [rbx+0x10]
   292a3:	cmp    r15,r14
   292a6:	je     29a00 <regbranch+0x820>
   292ac:	mov    r10d,0x1
   292b2:	mov    WORD PTR [r14],r10w
   292b6:	lea    rdx,[r14+0x3]
   292ba:	mov    BYTE PTR [r14+0x2],0x0
   292bf:	xor    ecx,ecx
   292c1:	xor    esi,esi
   292c3:	mov    QWORD PTR [rbx+0x10],rdx
   292c7:	mov    rdx,QWORD PTR [rbx]
   292ca:	movzx  edi,BYTE PTR [rdx]
   292cd:	lea    r9d,[rdi-0x2a]
   292d1:	cmp    r9b,0x1
   292d5:	jbe    293d8 <regbranch+0x1f8>
   292db:	cmp    dil,0x3f
   292df:	je     293d8 <regbranch+0x1f8>
   292e5:	or     ecx,DWORD PTR [rbp+0x0]
   292e8:	mov    DWORD PTR [rsp+0x4],esi
   292ec:	mov    DWORD PTR [rbp+0x0],ecx
   292ef:	test   r13,r13
   292f2:	je     29836 <regbranch+0x656>
   292f8:	cmp    r15,QWORD PTR [rbx+0x10]
   292fc:	je     29309 <regbranch+0x129>
   292fe:	mov    rsi,r14
   29301:	mov    rdi,r13
   29304:	call   29100 <regtail.part.0>
   29309:	mov    rdi,QWORD PTR [rbx]
   2930c:	mov    r13,r14
   2930f:	movsx  edx,BYTE PTR [rdi]
   29312:	test   edx,edx
   29314:	jne    29258 <regbranch+0x78>
   2931a:	mov    r14,QWORD PTR [rsp+0x8]
   2931f:	test   r13,r13
   29322:	je     29b30 <regbranch+0x950>
   29328:	mov    rax,QWORD PTR [rsp+0x28]
   2932d:	xor    rax,QWORD PTR fs:0x28
   29336:	jne    29c79 <regbranch+0xa99>
   2933c:	add    rsp,0x38
   29340:	mov    rax,r14
   29343:	pop    rbx
   29344:	pop    rbp
   29345:	pop    r12
   29347:	pop    r13
   29349:	pop    r14
   2934b:	pop    r15
   2934d:	ret    
   2934e:	cmp    BYTE PTR [rdi+0x1],0x0
   29352:	je     29c55 <regbranch+0xa75>
   29358:	mov    r14,QWORD PTR [rbx+0x10]
   2935c:	cmp    r15,r14
   2935f:	je     29a70 <regbranch+0x890>
   29365:	mov    ecx,0x8
   2936a:	mov    BYTE PTR [r14+0x2],0x0
   2936f:	lea    rdx,[r14+0x3]
   29373:	mov    WORD PTR [r14],cx
   29377:	mov    rcx,QWORD PTR [rbx]
   2937a:	mov    QWORD PTR [rbx+0x10],rdx
   2937e:	lea    rsi,[rcx+0x1]
   29382:	mov    QWORD PTR [rbx],rsi
   29385:	cmp    r15,rdx
   29388:	je     29a7c <regbranch+0x89c>
   2938e:	movzx  edx,BYTE PTR [rcx]
   29391:	lea    rcx,[r14+0x4]
   29395:	mov    QWORD PTR [rbx+0x10],rcx
   29399:	mov    BYTE PTR [r14+0x3],dl
   2939d:	mov    rdx,QWORD PTR [rbx+0x10]
   293a1:	cmp    r15,rdx
   293a4:	je     29c7e <regbranch+0xa9e>
   293aa:	lea    rcx,[rdx+0x1]
   293ae:	mov    esi,0x3
   293b3:	mov    QWORD PTR [rbx+0x10],rcx
   293b7:	mov    BYTE PTR [rdx],0x0
   293ba:	mov    rdx,QWORD PTR [rbx]
   293bd:	mov    ecx,esi
   293bf:	and    ecx,0x1
   293c2:	movzx  edi,BYTE PTR [rdx]
   293c5:	lea    r9d,[rdi-0x2a]
   293c9:	cmp    r9b,0x1
   293cd:	ja     292db <regbranch+0xfb>
   293d3:	nop    DWORD PTR [rax+rax*1+0x0]
   293d8:	test   ecx,ecx
   293da:	jne    29730 <regbranch+0x550>
   293e0:	cmp    dil,0x3f
   293e4:	jne    29c61 <regbranch+0xa81>
   293ea:	mov    esi,0x6
   293ef:	mov    rdx,r14
   293f2:	mov    rdi,rbx
   293f5:	call   290b0 <reginsert>
   293fa:	mov    rsi,QWORD PTR [rbx+0x10]
   293fe:	cmp    r15,rsi
   29401:	je     29b71 <regbranch+0x991>
   29407:	lea    rdx,[rsi+0x3]
   2940b:	mov    edi,0x6
   29410:	mov    BYTE PTR [rsi+0x2],0x0
   29414:	mov    WORD PTR [rsi],di
   29417:	mov    QWORD PTR [rbx+0x10],rdx
   2941b:	cmp    r15,rdx
   2941e:	je     29cc0 <regbranch+0xae0>
   29424:	mov    rdi,r14
   29427:	call   29100 <regtail.part.0>
   2942c:	mov    rsi,QWORD PTR [rbx+0x10]
   29430:	cmp    r15,rsi
   29433:	je     29cc0 <regbranch+0xae0>
   29439:	lea    rdx,[rsi+0x3]
   2943d:	mov    ecx,0x9
   29442:	mov    BYTE PTR [rsi+0x2],0x0
   29446:	mov    WORD PTR [rsi],cx
   29449:	mov    QWORD PTR [rbx+0x10],rdx
   2944d:	cmp    r15,rdx
   29450:	je     2946a <regbranch+0x28a>
   29452:	mov    rdi,r14
   29455:	call   29100 <regtail.part.0>
   2945a:	cmp    r15,QWORD PTR [rbx+0x10]
   2945e:	je     2946a <regbranch+0x28a>
   29460:	cmp    BYTE PTR [r14],0x6
   29464:	je     29c10 <regbranch+0xa30>
   2946a:	mov    DWORD PTR [rsp+0x4],0x0
   29472:	mov    rdx,QWORD PTR [rbx]
   29475:	jmp    29800 <regbranch+0x620>
   2947a:	cmp    BYTE PTR [rdi+0x1],0x5e
   2947e:	mov    r14,QWORD PTR [rbx+0x10]
   29482:	je     29a10 <regbranch+0x830>
   29488:	cmp    r15,r14
   2948b:	je     29be8 <regbranch+0xa08>
   29491:	lea    rdx,[r14+0x3]
   29495:	mov    esi,0x4
   2949a:	mov    BYTE PTR [r14+0x2],0x0
   2949f:	mov    WORD PTR [r14],si
   294a3:	mov    QWORD PTR [rbx+0x10],rdx
   294a7:	mov    rdx,QWORD PTR [rbx]
   294aa:	movsx  esi,BYTE PTR [rdx]
   294ad:	mov    ecx,esi
   294af:	cmp    sil,0x2d
   294b3:	je     296a8 <regbranch+0x4c8>
   294b9:	cmp    esi,0x5d
   294bc:	je     296a8 <regbranch+0x4c8>
   294c2:	nop    WORD PTR [rax+rax*1+0x0]
   294c8:	lea    rcx,[rdx+0x1]
   294cc:	mov    QWORD PTR [rbx],rcx
   294cf:	movsx  ecx,BYTE PTR [rdx]
   294d2:	mov    esi,ecx
   294d4:	test   ecx,ecx
   294d6:	je     29511 <regbranch+0x331>
   294d8:	cmp    ecx,0x5d
   294db:	je     29513 <regbranch+0x333>
   294dd:	cmp    ecx,0x2d
   294e0:	je     296e8 <regbranch+0x508>
   294e6:	mov    rdx,QWORD PTR [rbx+0x10]
   294ea:	cmp    r15,rdx
   294ed:	je     29720 <regbranch+0x540>
   294f3:	lea    rcx,[rdx+0x1]
   294f7:	mov    QWORD PTR [rbx+0x10],rcx
   294fb:	mov    BYTE PTR [rdx],sil
   294fe:	mov    rdx,QWORD PTR [rbx]
   29501:	lea    rcx,[rdx+0x1]
   29505:	mov    QWORD PTR [rbx],rcx
   29508:	movsx  ecx,BYTE PTR [rdx]
   2950b:	mov    esi,ecx
   2950d:	test   ecx,ecx
   2950f:	jne    294d8 <regbranch+0x2f8>
   29511:	xor    ecx,ecx
   29513:	mov    rdx,QWORD PTR [rbx+0x10]
   29517:	cmp    r15,rdx
   2951a:	je     29a60 <regbranch+0x880>
   29520:	lea    rsi,[rdx+0x1]
   29524:	mov    QWORD PTR [rbx+0x10],rsi
   29528:	mov    BYTE PTR [rdx],0x0
   2952b:	cmp    ecx,0x5d
   2952e:	jne    29c6d <regbranch+0xa8d>
   29534:	mov    esi,0x3
   29539:	test   r14,r14
   2953c:	jne    293ba <regbranch+0x1da>
   29542:	jmp    29328 <regbranch+0x148>
   29547:	mov    r14,QWORD PTR [rbx+0x10]
   2954b:	cmp    r15,r14
   2954e:	je     29af0 <regbranch+0x910>
   29554:	lea    rdx,[r14+0x3]
   29558:	mov    r8d,0x3
   2955e:	mov    BYTE PTR [r14+0x2],0x0
   29563:	mov    ecx,0x1
   29568:	mov    WORD PTR [r14],r8w
   2956c:	mov    esi,0x3
   29571:	mov    QWORD PTR [rbx+0x10],rdx
   29575:	mov    rdx,QWORD PTR [rbx]
   29578:	jmp    292ca <regbranch+0xea>
   2957d:	nop    DWORD PTR [rax]
   29580:	test   al,al
   29582:	je     296d8 <regbranch+0x4f8>
   29588:	mov    QWORD PTR [rbx],rdi
   2958b:	lea    rsi,[rip+0x17634]        # 40bc6 <gki_primes+0x146>
   29592:	mov    QWORD PTR [rsp+0x18],rcx
   29597:	mov    QWORD PTR [rsp+0x10],rdi
   2959c:	call   3610 <strcspn@plt>
   295a1:	mov    rdi,QWORD PTR [rsp+0x10]
   295a6:	mov    rcx,QWORD PTR [rsp+0x18]
   295ab:	test   rax,rax
   295ae:	mov    rdx,rax
   295b1:	je     29c49 <regbranch+0xa69>
   295b7:	movzx  eax,BYTE PTR [rdi+rax*1]
   295bb:	cmp    rdx,0x1
   295bf:	jbe    299c0 <regbranch+0x7e0>
   295c5:	lea    esi,[rax-0x2a]
   295c8:	cmp    sil,0x1
   295cc:	jbe    299e8 <regbranch+0x808>
   295d2:	mov    esi,0x1
   295d7:	cmp    al,0x3f
   295d9:	je     299e8 <regbranch+0x808>
   295df:	mov    r14,QWORD PTR [rbx+0x10]
   295e3:	cmp    r15,r14
   295e6:	je     299d7 <regbranch+0x7f7>
   295ec:	lea    r9,[r14+0x3]
   295f0:	mov    eax,0x8
   295f5:	mov    BYTE PTR [r14+0x2],0x0
   295fa:	mov    WORD PTR [r14],ax
   295fe:	mov    QWORD PTR [rbx+0x10],r9
   29602:	jmp    29620 <regbranch+0x440>
   29604:	nop    DWORD PTR [rax+0x0]
   29608:	movzx  ecx,BYTE PTR [rdi]
   2960b:	lea    rdi,[r9+0x1]
   2960f:	mov    QWORD PTR [rbx+0x10],rdi
   29613:	mov    BYTE PTR [r9],cl
   29616:	mov    r9,QWORD PTR [rbx+0x10]
   2961a:	sub    rdx,0x1
   2961e:	je     2963a <regbranch+0x45a>
   29620:	mov    rdi,QWORD PTR [rbx]
   29623:	lea    rcx,[rdi+0x1]
   29627:	mov    QWORD PTR [rbx],rcx
   2962a:	cmp    r15,r9
   2962d:	jne    29608 <regbranch+0x428>
   2962f:	add    QWORD PTR [rbx+0x20],0x1
   29634:	sub    rdx,0x1
   29638:	jne    29620 <regbranch+0x440>
   2963a:	cmp    r15,r9
   2963d:	je     29aa0 <regbranch+0x8c0>
   29643:	lea    rdx,[r9+0x1]
   29647:	mov    QWORD PTR [rbx+0x10],rdx
   2964b:	mov    BYTE PTR [r9],0x0
   2964f:	jmp    29539 <regbranch+0x359>
   29654:	lea    rdx,[rsp+0x24]
   29659:	mov    esi,0x1
   2965e:	mov    rdi,rbx
   29661:	call   29cd0 <reg>
   29666:	mov    r14,rax
   29669:	test   rax,rax
   2966c:	je     29328 <regbranch+0x148>
   29672:	mov    ecx,DWORD PTR [rsp+0x24]
   29676:	mov    rdx,QWORD PTR [rbx]
   29679:	mov    esi,ecx
   2967b:	and    ecx,0x1
   2967e:	and    esi,0x5
   29681:	jmp    292ca <regbranch+0xea>
   29686:	mov    r14,QWORD PTR [rbx+0x10]
   2968a:	cmp    r15,r14
   2968d:	je     29a00 <regbranch+0x820>
   29693:	mov    r9d,0x2
   29699:	mov    WORD PTR [r14],r9w
   2969d:	jmp    292b6 <regbranch+0xd6>
   296a2:	nop    WORD PTR [rax+rax*1+0x0]
   296a8:	mov    rsi,QWORD PTR [rbx+0x10]
   296ac:	cmp    r15,rsi
   296af:	je     29b60 <regbranch+0x980>
   296b5:	lea    rdx,[rsi+0x1]
   296b9:	mov    QWORD PTR [rbx+0x10],rdx
   296bd:	mov    BYTE PTR [rsi],cl
   296bf:	mov    rdx,QWORD PTR [rbx]
   296c2:	add    rdx,0x1
   296c6:	jmp    294c8 <regbranch+0x2e8>
   296cb:	nop    DWORD PTR [rax+rax*1+0x0]
   296d0:	cmp    al,0x7c
   296d2:	jne    29588 <regbranch+0x3a8>
   296d8:	lea    rdi,[rip+0x17669]        # 40d48 <gki_primes+0x2c8>
   296df:	call   291a0 <sqd_regerror>
   296e4:	nop    DWORD PTR [rax+0x0]
   296e8:	movsx  esi,BYTE PTR [rdx+0x1]
   296ec:	cmp    sil,0x5d
   296f0:	je     296fa <regbranch+0x51a>
   296f2:	test   esi,esi
   296f4:	jne    29940 <regbranch+0x760>
   296fa:	mov    rdx,QWORD PTR [rbx+0x10]
   296fe:	cmp    r15,rdx
   29701:	je     29720 <regbranch+0x540>
   29703:	lea    rcx,[rdx+0x1]
   29707:	mov    QWORD PTR [rbx+0x10],rcx
   2970b:	mov    BYTE PTR [rdx],0x2d
   2970e:	mov    rdx,QWORD PTR [rbx]
   29711:	jmp    294c8 <regbranch+0x2e8>
   29716:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29720:	add    QWORD PTR [rbx+0x20],0x1
   29725:	mov    rdx,QWORD PTR [rbx]
   29728:	jmp    294c8 <regbranch+0x2e8>
   2972d:	nop    DWORD PTR [rax]
   29730:	cmp    dil,0x2b
   29734:	je     29850 <regbranch+0x670>
   2973a:	cmp    dil,0x3f
   2973e:	je     293ea <regbranch+0x20a>
   29744:	cmp    dil,0x2a
   29748:	jne    29800 <regbranch+0x620>
   2974e:	and    esi,0x2
   29751:	jne    29998 <regbranch+0x7b8>
   29757:	mov    esi,0x6
   2975c:	mov    rdx,r14
   2975f:	mov    rdi,rbx
   29762:	call   290b0 <reginsert>
   29767:	mov    rsi,QWORD PTR [rbx+0x10]
   2976b:	cmp    r15,rsi
   2976e:	je     29bc0 <regbranch+0x9e0>
   29774:	lea    rdx,[rsi+0x3]
   29778:	mov    eax,0x7
   2977d:	mov    BYTE PTR [rsi+0x2],0x0
   29781:	mov    WORD PTR [rsi],ax
   29784:	mov    QWORD PTR [rbx+0x10],rdx
   29788:	cmp    r15,rdx
   2978b:	je     29ae4 <regbranch+0x904>
   29791:	cmp    BYTE PTR [r14],0x6
   29795:	je     29ab0 <regbranch+0x8d0>
   2979b:	mov    rsi,QWORD PTR [rbx+0x10]
   2979f:	lea    rdx,[rsi+0x3]
   297a3:	mov    eax,0x6
   297a8:	mov    BYTE PTR [rsi+0x2],0x0
   297ac:	mov    WORD PTR [rsi],ax
   297af:	mov    QWORD PTR [rbx+0x10],rdx
   297b3:	cmp    r15,rdx
   297b6:	je     29c93 <regbranch+0xab3>
   297bc:	mov    rdi,r14
   297bf:	call   29100 <regtail.part.0>
   297c4:	mov    rsi,QWORD PTR [rbx+0x10]
   297c8:	cmp    r15,rsi
   297cb:	je     29c93 <regbranch+0xab3>
   297d1:	lea    rdx,[rsi+0x3]
   297d5:	mov    eax,0x9
   297da:	mov    BYTE PTR [rsi+0x2],0x0
   297de:	mov    WORD PTR [rsi],ax
   297e1:	mov    QWORD PTR [rbx+0x10],rdx
   297e5:	cmp    r15,rdx
   297e8:	je     297f2 <regbranch+0x612>
   297ea:	mov    rdi,r14
   297ed:	call   29100 <regtail.part.0>
   297f2:	mov    DWORD PTR [rsp+0x4],0x4
   297fa:	mov    rdx,QWORD PTR [rbx]
   297fd:	nop    DWORD PTR [rax]
   29800:	lea    rcx,[rdx+0x1]
   29804:	mov    QWORD PTR [rbx],rcx
   29807:	movzx  edx,BYTE PTR [rdx+0x1]
   2980b:	lea    ecx,[rdx-0x2a]
   2980e:	cmp    cl,0x1
   29811:	jbe    29c3d <regbranch+0xa5d>
   29817:	cmp    dl,0x3f
   2981a:	je     29c3d <regbranch+0xa5d>
   29820:	mov    ecx,DWORD PTR [rsp+0x4]
   29824:	and    ecx,0x1
   29827:	or     ecx,DWORD PTR [rbp+0x0]
   2982a:	mov    DWORD PTR [rbp+0x0],ecx
   2982d:	test   r13,r13
   29830:	jne    292f8 <regbranch+0x118>
   29836:	mov    edx,DWORD PTR [rsp+0x4]
   2983a:	and    edx,0x4
   2983d:	or     ecx,edx
   2983f:	mov    DWORD PTR [rbp+0x0],ecx
   29842:	jmp    29309 <regbranch+0x129>
   29847:	nop    WORD PTR [rax+rax*1+0x0]
   29850:	and    esi,0x2
   29853:	jne    29a40 <regbranch+0x860>
   29859:	mov    r9,QWORD PTR [rbx+0x10]
   2985d:	cmp    r15,r9
   29860:	je     29b08 <regbranch+0x928>
   29866:	lea    rdx,[r9+0x3]
   2986a:	mov    eax,0x6
   2986f:	mov    BYTE PTR [r9+0x2],0x0
   29874:	mov    WORD PTR [r9],ax
   29878:	mov    QWORD PTR [rbx+0x10],rdx
   2987c:	cmp    r15,rdx
   2987f:	je     29c87 <regbranch+0xaa7>
   29885:	mov    rdi,r14
   29888:	mov    rsi,r9
   2988b:	call   29100 <regtail.part.0>
   29890:	mov    rdi,QWORD PTR [rbx+0x10]
   29894:	cmp    r15,rdi
   29897:	je     29c87 <regbranch+0xaa7>
   2989d:	lea    rdx,[rdi+0x3]
   298a1:	mov    r11d,0x7
   298a7:	mov    BYTE PTR [rdi+0x2],0x0
   298ab:	mov    WORD PTR [rdi],r11w
   298af:	mov    QWORD PTR [rbx+0x10],rdx
   298b3:	cmp    r15,rdx
   298b6:	je     29cb4 <regbranch+0xad4>
   298bc:	mov    rsi,r14
   298bf:	call   29100 <regtail.part.0>
   298c4:	mov    rsi,QWORD PTR [rbx+0x10]
   298c8:	cmp    r15,rsi
   298cb:	je     29cb4 <regbranch+0xad4>
   298d1:	lea    rdx,[rsi+0x3]
   298d5:	mov    r10d,0x6
   298db:	mov    BYTE PTR [rsi+0x2],0x0
   298df:	mov    WORD PTR [rsi],r10w
   298e3:	mov    QWORD PTR [rbx+0x10],rdx
   298e7:	cmp    r15,rdx
   298ea:	je     29ca8 <regbranch+0xac8>
   298f0:	mov    rdi,r9
   298f3:	call   29100 <regtail.part.0>
   298f8:	mov    rsi,QWORD PTR [rbx+0x10]
   298fc:	cmp    r15,rsi
   298ff:	je     29ca8 <regbranch+0xac8>
   29905:	lea    rdx,[rsi+0x3]
   29909:	mov    r8d,0x9
   2990f:	mov    BYTE PTR [rsi+0x2],0x0
   29913:	mov    WORD PTR [rsi],r8w
   29917:	mov    QWORD PTR [rbx+0x10],rdx
   2991b:	cmp    r15,rdx
   2991e:	je     29928 <regbranch+0x748>
   29920:	mov    rdi,r14
   29923:	call   29100 <regtail.part.0>
   29928:	mov    DWORD PTR [rsp+0x4],0x5
   29930:	mov    rdx,QWORD PTR [rbx]
   29933:	jmp    29800 <regbranch+0x620>
   29938:	nop    DWORD PTR [rax+rax*1+0x0]
   29940:	movzx  edx,BYTE PTR [rdx-0x1]
   29944:	movzx  ecx,sil
   29948:	cmp    edx,ecx
   2994a:	jg     29c9c <regbranch+0xabc>
   29950:	add    edx,0x1
   29953:	lea    edi,[rcx+0x1]
   29956:	cmp    ecx,edx
   29958:	jge    29971 <regbranch+0x791>
   2995a:	jmp    29986 <regbranch+0x7a6>
   2995c:	nop    DWORD PTR [rax+0x0]
   29960:	lea    rsi,[rcx+0x1]
   29964:	mov    QWORD PTR [rbx+0x10],rsi
   29968:	mov    BYTE PTR [rcx],dl
   2996a:	add    edx,0x1
   2996d:	cmp    edx,edi
   2996f:	je     29986 <regbranch+0x7a6>
   29971:	mov    rcx,QWORD PTR [rbx+0x10]
   29975:	cmp    r15,rcx
   29978:	jne    29960 <regbranch+0x780>
   2997a:	add    edx,0x1
   2997d:	add    QWORD PTR [rbx+0x20],0x1
   29982:	cmp    edx,edi
   29984:	jne    29971 <regbranch+0x791>
   29986:	mov    rax,QWORD PTR [rbx]
   29989:	lea    rdx,[rax+0x1]
   2998d:	jmp    294c8 <regbranch+0x2e8>
   29992:	nop    WORD PTR [rax+rax*1+0x0]
   29998:	mov    rdx,r14
   2999b:	mov    esi,0xa
   299a0:	mov    rdi,rbx
   299a3:	call   290b0 <reginsert>
   299a8:	mov    DWORD PTR [rsp+0x4],0x4
   299b0:	mov    rdx,QWORD PTR [rbx]
   299b3:	jmp    29800 <regbranch+0x620>
   299b8:	nop    DWORD PTR [rax+rax*1+0x0]
   299c0:	mov    r14,QWORD PTR [rbx+0x10]
   299c4:	mov    edx,0x1
   299c9:	mov    esi,0x3
   299ce:	cmp    r15,r14
   299d1:	jne    295ec <regbranch+0x40c>
   299d7:	add    QWORD PTR [rbx+0x20],0x3
   299dc:	mov    r9,r15
   299df:	jmp    29627 <regbranch+0x447>
   299e4:	nop    DWORD PTR [rax+0x0]
   299e8:	sub    rdx,0x1
   299ec:	xor    esi,esi
   299ee:	cmp    rdx,0x1
   299f2:	sete   sil
   299f6:	lea    esi,[rsi+rsi*1+0x1]
   299fa:	jmp    295df <regbranch+0x3ff>
   299ff:	nop
   29a00:	add    QWORD PTR [rbx+0x20],0x3
   29a05:	xor    ecx,ecx
   29a07:	xor    esi,esi
   29a09:	jmp    292ca <regbranch+0xea>
   29a0e:	xchg   ax,ax
   29a10:	cmp    r15,r14
   29a13:	je     29c1e <regbranch+0xa3e>
   29a19:	lea    rdx,[r14+0x3]
   29a1d:	mov    edi,0x5
   29a22:	mov    BYTE PTR [r14+0x2],0x0
   29a27:	mov    WORD PTR [r14],di
   29a2b:	mov    QWORD PTR [rbx+0x10],rdx
   29a2f:	mov    rdx,QWORD PTR [rbx]
   29a32:	add    rdx,0x1
   29a36:	mov    QWORD PTR [rbx],rdx
   29a39:	jmp    294aa <regbranch+0x2ca>
   29a3e:	xchg   ax,ax
   29a40:	mov    rdx,r14
   29a43:	mov    esi,0xb
   29a48:	mov    rdi,rbx
   29a4b:	call   290b0 <reginsert>
   29a50:	mov    DWORD PTR [rsp+0x4],0x5
   29a58:	mov    rdx,QWORD PTR [rbx]
   29a5b:	jmp    29800 <regbranch+0x620>
   29a60:	add    QWORD PTR [rbx+0x20],0x1
   29a65:	jmp    2952b <regbranch+0x34b>
   29a6a:	nop    WORD PTR [rax+rax*1+0x0]
   29a70:	add    rdi,0x2
   29a74:	add    QWORD PTR [rbx+0x20],0x3
   29a79:	mov    QWORD PTR [rbx],rdi
   29a7c:	mov    rax,QWORD PTR [rbx+0x20]
   29a80:	lea    rdx,[rax+0x1]
   29a84:	add    rdx,0x1
   29a88:	mov    esi,0x3
   29a8d:	mov    QWORD PTR [rbx+0x20],rdx
   29a91:	jmp    29539 <regbranch+0x359>
   29a96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29aa0:	add    QWORD PTR [rbx+0x20],0x1
   29aa5:	jmp    29539 <regbranch+0x359>
   29aaa:	nop    WORD PTR [rax+rax*1+0x0]
   29ab0:	lea    r9,[r14+0x3]
   29ab4:	mov    rdi,r9
   29ab7:	call   29100 <regtail.part.0>
   29abc:	cmp    r15,QWORD PTR [rbx+0x10]
   29ac0:	je     29ae4 <regbranch+0x904>
   29ac2:	cmp    BYTE PTR [r14],0x6
   29ac6:	jne    2979b <regbranch+0x5bb>
   29acc:	mov    rsi,r14
   29acf:	mov    rdi,r9
   29ad2:	call   29100 <regtail.part.0>
   29ad7:	mov    rsi,QWORD PTR [rbx+0x10]
   29adb:	cmp    r15,rsi
   29ade:	jne    2979f <regbranch+0x5bf>
   29ae4:	mov    rdx,QWORD PTR [rbx+0x20]
   29ae8:	jmp    29bc8 <regbranch+0x9e8>
   29aed:	nop    DWORD PTR [rax]
   29af0:	add    QWORD PTR [rbx+0x20],0x3
   29af5:	mov    ecx,0x1
   29afa:	mov    esi,0x3
   29aff:	jmp    292ca <regbranch+0xea>
   29b04:	nop    DWORD PTR [rax+0x0]
   29b08:	mov    rax,QWORD PTR [rbx+0x20]
   29b0c:	lea    rcx,[rax+0x3]
   29b10:	add    rcx,0x3
   29b14:	add    rcx,0x3
   29b18:	add    rcx,0x3
   29b1c:	mov    DWORD PTR [rsp+0x4],0x5
   29b24:	mov    QWORD PTR [rbx+0x20],rcx
   29b28:	jmp    29800 <regbranch+0x620>
   29b2d:	nop    DWORD PTR [rax]
   29b30:	mov    rax,QWORD PTR [rbx+0x10]
   29b34:	cmp    r15,rax
   29b37:	je     29c34 <regbranch+0xa54>
   29b3d:	mov    edx,0x9
   29b42:	mov    BYTE PTR [rax+0x2],0x0
   29b46:	add    rax,0x3
   29b4a:	mov    r14,QWORD PTR [rsp+0x8]
   29b4f:	mov    WORD PTR [rax-0x3],dx
   29b53:	mov    QWORD PTR [rbx+0x10],rax
   29b57:	jmp    29328 <regbranch+0x148>
   29b5c:	nop    DWORD PTR [rax+0x0]
   29b60:	mov    rcx,QWORD PTR [rbx+0x20]
   29b64:	add    rcx,0x1
   29b68:	mov    QWORD PTR [rbx+0x20],rcx
   29b6c:	jmp    296c2 <regbranch+0x4e2>
   29b71:	mov    rax,QWORD PTR [rbx+0x20]
   29b75:	lea    rdx,[rax+0x3]
   29b79:	add    rdx,0x3
   29b7d:	mov    QWORD PTR [rbx+0x20],rdx
   29b81:	jmp    2946a <regbranch+0x28a>
   29b86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29b90:	mov    rax,QWORD PTR [rdi+0x20]
   29b94:	add    rax,0x3
   29b98:	mov    QWORD PTR [rdi+0x20],rax
   29b9c:	mov    rdi,QWORD PTR [rdi]
   29b9f:	movsx  edx,BYTE PTR [rdi]
   29ba2:	test   edx,edx
   29ba4:	jne    29249 <regbranch+0x69>
   29baa:	add    rax,0x3
   29bae:	mov    r14,QWORD PTR [rsp+0x8]
   29bb3:	mov    QWORD PTR [rbx+0x20],rax
   29bb7:	jmp    29328 <regbranch+0x148>
   29bbc:	nop    DWORD PTR [rax+0x0]
   29bc0:	mov    rax,QWORD PTR [rbx+0x20]
   29bc4:	lea    rdx,[rax+0x3]
   29bc8:	add    rdx,0x3
   29bcc:	add    rdx,0x3
   29bd0:	mov    DWORD PTR [rsp+0x4],0x4
   29bd8:	mov    QWORD PTR [rbx+0x20],rdx
   29bdc:	mov    rdx,QWORD PTR [rbx]
   29bdf:	jmp    29800 <regbranch+0x620>
   29be4:	nop    DWORD PTR [rax+0x0]
   29be8:	mov    rax,QWORD PTR [rbx+0x20]
   29bec:	lea    rcx,[rax+0x3]
   29bf0:	mov    QWORD PTR [rbx+0x20],rcx
   29bf4:	movsx  esi,BYTE PTR [rdi+0x1]
   29bf8:	cmp    esi,0x5d
   29bfb:	je     29b64 <regbranch+0x984>
   29c01:	cmp    esi,0x2d
   29c04:	jne    294c8 <regbranch+0x2e8>
   29c0a:	jmp    29b64 <regbranch+0x984>
   29c0f:	nop
   29c10:	lea    rdi,[r14+0x3]
   29c14:	call   29100 <regtail.part.0>
   29c19:	jmp    2946a <regbranch+0x28a>
   29c1e:	add    QWORD PTR [rbx+0x20],0x3
   29c23:	jmp    29a32 <regbranch+0x852>
   29c28:	lea    rdi,[rip+0x16f78]        # 40ba7 <gki_primes+0x127>
   29c2f:	call   291a0 <sqd_regerror>
   29c34:	mov    rax,QWORD PTR [rbx+0x20]
   29c38:	jmp    29baa <regbranch+0x9ca>
   29c3d:	lea    rdi,[rip+0x16fc2]        # 40c06 <gki_primes+0x186>
   29c44:	call   291a0 <sqd_regerror>
   29c49:	lea    rdi,[rip+0x16f82]        # 40bd2 <gki_primes+0x152>
   29c50:	call   291a0 <sqd_regerror>
   29c55:	lea    rdi,[rip+0x16f5f]        # 40bbb <gki_primes+0x13b>
   29c5c:	call   291a0 <sqd_regerror>
   29c61:	lea    rdi,[rip+0x16f84]        # 40bec <gki_primes+0x16c>
   29c68:	call   291a0 <sqd_regerror>
   29c6d:	lea    rdi,[rip+0x16f26]        # 40b9a <gki_primes+0x11a>
   29c74:	call   291a0 <sqd_regerror>
   29c79:	call   3570 <__stack_chk_fail@plt>
   29c7e:	mov    rdx,QWORD PTR [rbx+0x20]
   29c82:	jmp    29a84 <regbranch+0x8a4>
   29c87:	mov    rcx,QWORD PTR [rbx+0x20]
   29c8b:	mov    rdx,QWORD PTR [rbx]
   29c8e:	jmp    29b10 <regbranch+0x930>
   29c93:	mov    rdx,QWORD PTR [rbx+0x20]
   29c97:	jmp    29bcc <regbranch+0x9ec>
   29c9c:	lea    rdi,[rip+0x16ee6]        # 40b89 <gki_primes+0x109>
   29ca3:	call   291a0 <sqd_regerror>
   29ca8:	mov    rcx,QWORD PTR [rbx+0x20]
   29cac:	mov    rdx,QWORD PTR [rbx]
   29caf:	jmp    29b18 <regbranch+0x938>
   29cb4:	mov    rcx,QWORD PTR [rbx+0x20]
   29cb8:	mov    rdx,QWORD PTR [rbx]
   29cbb:	jmp    29b14 <regbranch+0x934>
   29cc0:	mov    rdx,QWORD PTR [rbx+0x20]
   29cc4:	jmp    29b79 <regbranch+0x999>
   29cc9:	nop    DWORD PTR [rax+0x0]

0000000000029cd0 <reg>:
   29cd0:	push   r15
   29cd2:	mov    r15,rdi
   29cd5:	push   r14
   29cd7:	push   r13
   29cd9:	push   r12
   29cdb:	push   rbp
   29cdc:	push   rbx
   29cdd:	mov    rbx,rdx
   29ce0:	sub    rsp,0x28
   29ce4:	mov    DWORD PTR [rsp+0xc],esi
   29ce8:	mov    rax,QWORD PTR fs:0x28
   29cf1:	mov    QWORD PTR [rsp+0x18],rax
   29cf6:	xor    eax,eax
   29cf8:	mov    DWORD PTR [rdx],0x1
   29cfe:	test   esi,esi
   29d00:	je     29ed0 <reg+0x200>
   29d06:	mov    eax,DWORD PTR [rdi+0x8]
   29d09:	mov    DWORD PTR [rsp+0x8],eax
   29d0d:	cmp    eax,0x9
   29d10:	jg     29f45 <reg+0x275>
   29d16:	mov    ecx,DWORD PTR [rsp+0x8]
   29d1a:	mov    r12,QWORD PTR [rdi+0x10]
   29d1e:	lea    r13,[rdi+0x18]
   29d22:	lea    eax,[rcx+0x1]
   29d25:	mov    DWORD PTR [rdi+0x8],eax
   29d28:	lea    eax,[rcx+0x14]
   29d2b:	cmp    r13,r12
   29d2e:	je     29f20 <reg+0x250>
   29d34:	mov    BYTE PTR [r12],al
   29d38:	xor    edi,edi
   29d3a:	lea    rax,[r12+0x3]
   29d3f:	mov    WORD PTR [r12+0x1],di
   29d45:	mov    QWORD PTR [r15+0x10],rax
   29d49:	lea    r14,[rsp+0x14]
   29d4e:	mov    rdi,r15
   29d51:	mov    rsi,r14
   29d54:	call   291e0 <regbranch>
   29d59:	mov    rsi,rax
   29d5c:	test   rax,rax
   29d5f:	je     29dd5 <reg+0x105>
   29d61:	cmp    r13,QWORD PTR [r15+0x10]
   29d65:	je     29d6f <reg+0x9f>
   29d67:	mov    rdi,r12
   29d6a:	call   29100 <regtail.part.0>
   29d6f:	mov    edx,DWORD PTR [rsp+0x14]
   29d73:	mov    eax,edx
   29d75:	and    edx,0x4
   29d78:	or     eax,0xfffffffe
   29d7b:	and    eax,DWORD PTR [rbx]
   29d7d:	or     eax,edx
   29d7f:	mov    DWORD PTR [rbx],eax
   29d81:	mov    rax,QWORD PTR [r15]
   29d84:	cmp    BYTE PTR [rax],0x7c
   29d87:	jne    29dfe <reg+0x12e>
   29d89:	lea    rbp,[r15+0x18]
   29d8d:	jmp    29dbb <reg+0xeb>
   29d8f:	nop
   29d90:	mov    r13,rbp
   29d93:	cmp    QWORD PTR [r15+0x10],rbp
   29d97:	je     29da1 <reg+0xd1>
   29d99:	mov    rdi,r12
   29d9c:	call   29100 <regtail.part.0>
   29da1:	mov    edx,DWORD PTR [rsp+0x14]
   29da5:	mov    eax,edx
   29da7:	and    edx,0x4
   29daa:	or     eax,0xfffffffe
   29dad:	and    eax,DWORD PTR [rbx]
   29daf:	or     eax,edx
   29db1:	mov    DWORD PTR [rbx],eax
   29db3:	mov    rax,QWORD PTR [r15]
   29db6:	cmp    BYTE PTR [rax],0x7c
   29db9:	jne    29e08 <reg+0x138>
   29dbb:	add    rax,0x1
   29dbf:	mov    rsi,r14
   29dc2:	mov    rdi,r15
   29dc5:	mov    QWORD PTR [r15],rax
   29dc8:	call   291e0 <regbranch>
   29dcd:	mov    rsi,rax
   29dd0:	test   rax,rax
   29dd3:	jne    29d90 <reg+0xc0>
   29dd5:	xor    r12d,r12d
   29dd8:	mov    rax,QWORD PTR [rsp+0x18]
   29ddd:	xor    rax,QWORD PTR fs:0x28
   29de6:	jne    29f40 <reg+0x270>
   29dec:	add    rsp,0x28
   29df0:	mov    rax,r12
   29df3:	pop    rbx
   29df4:	pop    rbp
   29df5:	pop    r12
   29df7:	pop    r13
   29df9:	pop    r14
   29dfb:	pop    r15
   29dfd:	ret    
   29dfe:	lea    r13,[r15+0x18]
   29e02:	nop    WORD PTR [rax+rax*1+0x0]
   29e08:	mov    esi,DWORD PTR [rsp+0xc]
   29e0c:	mov    edx,DWORD PTR [rsp+0x8]
   29e10:	mov    eax,0x0
   29e15:	add    edx,0x1e
   29e18:	test   esi,esi
   29e1a:	mov    rsi,QWORD PTR [r15+0x10]
   29e1e:	cmovne eax,edx
   29e21:	cmp    rsi,r13
   29e24:	je     29f2a <reg+0x25a>
   29e2a:	mov    BYTE PTR [rsi],al
   29e2c:	xor    ecx,ecx
   29e2e:	lea    rax,[rsi+0x3]
   29e32:	mov    WORD PTR [rsi+0x1],cx
   29e36:	mov    QWORD PTR [r15+0x10],rax
   29e3a:	cmp    rax,r13
   29e3d:	je     29e47 <reg+0x177>
   29e3f:	mov    rdi,r12
   29e42:	call   29100 <regtail.part.0>
   29e47:	test   r12,r12
   29e4a:	je     29ea0 <reg+0x1d0>
   29e4c:	mov    r8,r12
   29e4f:	jmp    29e84 <reg+0x1b4>
   29e51:	nop    DWORD PTR [rax+0x0]
   29e58:	movsx  eax,BYTE PTR [r8+0x1]
   29e5d:	movzx  edx,BYTE PTR [r8+0x2]
   29e62:	shl    eax,0x8
   29e65:	and    eax,0x7f00
   29e6a:	or     eax,edx
   29e6c:	je     29ea0 <reg+0x1d0>
   29e6e:	cdqe   
   29e70:	mov    rdx,r8
   29e73:	sub    rdx,rax
   29e76:	add    rax,r8
   29e79:	cmp    BYTE PTR [r8],0x7
   29e7d:	cmovne rdx,rax
   29e81:	mov    r8,rdx
   29e84:	cmp    QWORD PTR [r15+0x10],r13
   29e88:	je     29e58 <reg+0x188>
   29e8a:	cmp    BYTE PTR [r8],0x6
   29e8e:	jne    29e58 <reg+0x188>
   29e90:	lea    rdi,[r8+0x3]
   29e94:	call   29100 <regtail.part.0>
   29e99:	jmp    29e58 <reg+0x188>
   29e9b:	nop    DWORD PTR [rax+rax*1+0x0]
   29ea0:	mov    edx,DWORD PTR [rsp+0xc]
   29ea4:	mov    rax,QWORD PTR [r15]
   29ea7:	test   edx,edx
   29ea9:	je     29f00 <reg+0x230>
   29eab:	lea    rdx,[rax+0x1]
   29eaf:	mov    QWORD PTR [r15],rdx
   29eb2:	cmp    BYTE PTR [rax],0x29
   29eb5:	je     29dd8 <reg+0x108>
   29ebb:	lea    rdi,[rip+0x16d5b]        # 40c1d <gki_primes+0x19d>
   29ec2:	call   291a0 <sqd_regerror>
   29ec7:	nop    WORD PTR [rax+rax*1+0x0]
   29ed0:	lea    r14,[rsp+0x14]
   29ed5:	mov    rsi,r14
   29ed8:	call   291e0 <regbranch>
   29edd:	mov    r12,rax
   29ee0:	test   rax,rax
   29ee3:	je     29dd5 <reg+0x105>
   29ee9:	mov    DWORD PTR [rsp+0x8],0x0
   29ef1:	jmp    29d6f <reg+0x9f>
   29ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29f00:	movzx  eax,BYTE PTR [rax]
   29f03:	test   al,al
   29f05:	je     29dd8 <reg+0x108>
   29f0b:	cmp    al,0x29
   29f0d:	je     29f34 <reg+0x264>
   29f0f:	lea    rdi,[rip+0x16d24]        # 40c3a <gki_primes+0x1ba>
   29f16:	call   291a0 <sqd_regerror>
   29f1b:	nop    DWORD PTR [rax+rax*1+0x0]
   29f20:	add    QWORD PTR [rdi+0x20],0x3
   29f25:	jmp    29d49 <reg+0x79>
   29f2a:	add    QWORD PTR [r15+0x20],0x3
   29f2f:	jmp    29e47 <reg+0x177>
   29f34:	lea    rdi,[rip+0x16cf2]        # 40c2d <gki_primes+0x1ad>
   29f3b:	call   291a0 <sqd_regerror>
   29f40:	call   3570 <__stack_chk_fail@plt>
   29f45:	lea    rdi,[rip+0x16cc5]        # 40c11 <gki_primes+0x191>
   29f4c:	call   291a0 <sqd_regerror>
   29f51:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   29f5c:	nop    DWORD PTR [rax+0x0]

0000000000029f60 <sqd_regcomp>:
   29f60:	endbr64 
   29f64:	push   r15
   29f66:	push   r14
   29f68:	push   r13
   29f6a:	push   r12
   29f6c:	push   rbp
   29f6d:	push   rbx
   29f6e:	sub    rsp,0x48
   29f72:	mov    rax,QWORD PTR fs:0x28
   29f7b:	mov    QWORD PTR [rsp+0x38],rax
   29f80:	xor    eax,eax
   29f82:	test   rdi,rdi
   29f85:	je     2a1b6 <sqd_regcomp+0x256>
   29f8b:	mov    edx,0x9
   29f90:	lea    rbp,[rsp+0x10]
   29f95:	mov    rbx,rdi
   29f98:	xor    esi,esi
   29f9a:	lea    r13,[rsp+0xc]
   29f9f:	mov    QWORD PTR [rsp+0x10],rdi
   29fa4:	mov    rdi,rbp
   29fa7:	lea    rax,[rsp+0x28]
   29fac:	mov    WORD PTR [rsp+0x28],dx
   29fb1:	mov    rdx,r13
   29fb4:	mov    DWORD PTR [rsp+0x18],0x1
   29fbc:	mov    BYTE PTR [rsp+0x2a],0x0
   29fc1:	mov    QWORD PTR [rsp+0x20],rax
   29fc6:	mov    QWORD PTR [rsp+0x30],0x1
   29fcf:	call   29cd0 <reg>
   29fd4:	test   rax,rax
   29fd7:	je     2a180 <sqd_regcomp+0x220>
   29fdd:	mov    rdi,QWORD PTR [rsp+0x30]
   29fe2:	cmp    rdi,0x7ffe
   29fe9:	jg     2a19e <sqd_regcomp+0x23e>
   29fef:	add    rdi,0xb8
   29ff6:	call   36b0 <malloc@plt>
   29ffb:	mov    r12,rax
   29ffe:	test   rax,rax
   2a001:	je     2a1aa <sqd_regcomp+0x24a>
   2a007:	mov    BYTE PTR [rax+0xb4],0x9c
   2a00e:	xor    esi,esi
   2a010:	mov    rdx,r13
   2a013:	mov    rdi,rbp
   2a016:	mov    QWORD PTR [rsp+0x10],rbx
   2a01b:	lea    rbx,[rax+0xb5]
   2a022:	mov    DWORD PTR [rsp+0x18],0x1
   2a02a:	mov    QWORD PTR [rsp+0x20],rbx
   2a02f:	call   29cd0 <reg>
   2a034:	test   rax,rax
   2a037:	je     2a180 <sqd_regcomp+0x220>
   2a03d:	movzx  edx,BYTE PTR [r12+0xb7]
   2a046:	xor    eax,eax
   2a048:	mov    QWORD PTR [r12+0xa8],0x0
   2a054:	mov    WORD PTR [r12+0xa0],ax
   2a05d:	movsx  eax,BYTE PTR [r12+0xb6]
   2a066:	mov    DWORD PTR [r12+0xb0],0x0
   2a072:	shl    eax,0x8
   2a075:	and    eax,0x7f00
   2a07a:	or     eax,edx
   2a07c:	je     3840 <sqd_regcomp.cold>
   2a082:	cmp    BYTE PTR [r12+0xb5],0x7
   2a08b:	cdqe   
   2a08d:	lea    rdx,[rbx+rax*1]
   2a091:	je     2a160 <sqd_regcomp+0x200>
   2a097:	cmp    BYTE PTR [rdx],0x0
   2a09a:	jne    2a130 <sqd_regcomp+0x1d0>
   2a0a0:	movzx  eax,BYTE PTR [r12+0xb8]
   2a0a9:	cmp    al,0x8
   2a0ab:	je     2a188 <sqd_regcomp+0x228>
   2a0b1:	cmp    al,0x1
   2a0b3:	je     2a170 <sqd_regcomp+0x210>
   2a0b9:	test   BYTE PTR [rsp+0xc],0x4
   2a0be:	je     2a130 <sqd_regcomp+0x1d0>
   2a0c0:	lea    r13,[r12+0xb8]
   2a0c8:	xor    r14d,r14d
   2a0cb:	xor    ebp,ebp
   2a0cd:	jmp    2a0e3 <sqd_regcomp+0x183>
   2a0cf:	nop
   2a0d0:	test   ebx,ebx
   2a0d2:	je     2a120 <sqd_regcomp+0x1c0>
   2a0d4:	movsxd rbx,ebx
   2a0d7:	cmp    al,0x7
   2a0d9:	jne    2a11a <sqd_regcomp+0x1ba>
   2a0db:	sub    r13,rbx
   2a0de:	movzx  eax,BYTE PTR [r13+0x0]
   2a0e3:	movsx  ebx,BYTE PTR [r13+0x1]
   2a0e8:	movzx  edx,BYTE PTR [r13+0x2]
   2a0ed:	shl    ebx,0x8
   2a0f0:	and    ebx,0x7f00
   2a0f6:	or     ebx,edx
   2a0f8:	cmp    al,0x8
   2a0fa:	jne    2a0d0 <sqd_regcomp+0x170>
   2a0fc:	lea    r15,[r13+0x3]
   2a100:	mov    rdi,r15
   2a103:	call   3560 <strlen@plt>
   2a108:	cmp    rax,r14
   2a10b:	jb     2a113 <sqd_regcomp+0x1b3>
   2a10d:	mov    r14,rax
   2a110:	mov    rbp,r15
   2a113:	test   ebx,ebx
   2a115:	je     2a120 <sqd_regcomp+0x1c0>
   2a117:	movsxd rbx,ebx
   2a11a:	add    r13,rbx
   2a11d:	jmp    2a0de <sqd_regcomp+0x17e>
   2a11f:	nop
   2a120:	mov    QWORD PTR [r12+0xa8],rbp
   2a128:	mov    DWORD PTR [r12+0xb0],r14d
   2a130:	mov    rax,QWORD PTR [rsp+0x38]
   2a135:	xor    rax,QWORD PTR fs:0x28
   2a13e:	jne    2a1c2 <sqd_regcomp+0x262>
   2a144:	add    rsp,0x48
   2a148:	mov    rax,r12
   2a14b:	pop    rbx
   2a14c:	pop    rbp
   2a14d:	pop    r12
   2a14f:	pop    r13
   2a151:	pop    r14
   2a153:	pop    r15
   2a155:	ret    
   2a156:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a160:	mov    rdx,rbx
   2a163:	sub    rdx,rax
   2a166:	cmp    BYTE PTR [rdx],0x0
   2a169:	jne    2a130 <sqd_regcomp+0x1d0>
   2a16b:	jmp    2a0a0 <sqd_regcomp+0x140>
   2a170:	mov    BYTE PTR [r12+0xa1],0x1
   2a179:	jmp    2a0b9 <sqd_regcomp+0x159>
   2a17e:	xchg   ax,ax
   2a180:	xor    r12d,r12d
   2a183:	jmp    2a130 <sqd_regcomp+0x1d0>
   2a185:	nop    DWORD PTR [rax]
   2a188:	movzx  edx,BYTE PTR [r12+0xbb]
   2a191:	mov    BYTE PTR [r12+0xa0],dl
   2a199:	jmp    2a0b9 <sqd_regcomp+0x159>
   2a19e:	lea    rdi,[rip+0x16ace]        # 40c73 <gki_primes+0x1f3>
   2a1a5:	call   291a0 <sqd_regerror>
   2a1aa:	lea    rdi,[rip+0x16ad1]        # 40c82 <gki_primes+0x202>
   2a1b1:	call   291a0 <sqd_regerror>
   2a1b6:	lea    rdi,[rip+0x16a99]        # 40c56 <gki_primes+0x1d6>
   2a1bd:	call   291a0 <sqd_regerror>
   2a1c2:	call   3570 <__stack_chk_fail@plt>
   2a1c7:	nop    WORD PTR [rax+rax*1+0x0]

000000000002a1d0 <regmatch>:
   2a1d0:	push   r15
   2a1d2:	push   r14
   2a1d4:	push   r13
   2a1d6:	push   r12
   2a1d8:	push   rbp
   2a1d9:	push   rbx
   2a1da:	sub    rsp,0x8
   2a1de:	test   rsi,rsi
   2a1e1:	je     2a5b2 <regmatch+0x3e2>
   2a1e7:	mov    rbp,rdi
   2a1ea:	mov    rbx,rsi
   2a1ed:	lea    r12,[rip+0x16ca8]        # 40e9c <gki_primes+0x41c>
   2a1f4:	movsx  eax,BYTE PTR [rbx+0x1]
   2a1f8:	movzx  ecx,BYTE PTR [rbx+0x2]
   2a1fc:	movzx  edx,BYTE PTR [rbx]
   2a1ff:	shl    eax,0x8
   2a202:	and    eax,0x7f00
   2a207:	or     eax,ecx
   2a209:	je     2a4c0 <regmatch+0x2f0>
   2a20f:	cdqe   
   2a211:	lea    r13,[rbx+rax*1]
   2a215:	cmp    dl,0x7
   2a218:	je     2a270 <regmatch+0xa0>
   2a21a:	movsx  r14d,dl
   2a21e:	cmp    dl,0x27
   2a221:	ja     2a4d0 <regmatch+0x300>
   2a227:	movzx  eax,dl
   2a22a:	movsxd rax,DWORD PTR [r12+rax*4]
   2a22e:	add    rax,r12
   2a231:	notrack jmp rax
   2a234:	nop    DWORD PTR [rax+0x0]
   2a238:	mov    r14,QWORD PTR [rbp+0x0]
   2a23c:	movsx  esi,BYTE PTR [r14]
   2a240:	test   sil,sil
   2a243:	je     2a297 <regmatch+0xc7>
   2a245:	lea    rdi,[rbx+0x3]
   2a249:	call   3590 <strchr@plt>
   2a24e:	test   rax,rax
   2a251:	je     2a297 <regmatch+0xc7>
   2a253:	add    r14,0x1
   2a257:	mov    QWORD PTR [rbp+0x0],r14
   2a25b:	test   r13,r13
   2a25e:	je     2a5b2 <regmatch+0x3e2>
   2a264:	mov    rbx,r13
   2a267:	jmp    2a1f4 <regmatch+0x24>
   2a269:	nop    DWORD PTR [rax+0x0]
   2a270:	sub    rbx,rax
   2a273:	jmp    2a1f4 <regmatch+0x24>
   2a278:	nop    DWORD PTR [rax+rax*1+0x0]
   2a280:	mov    rsi,r13
   2a283:	mov    rdi,rbp
   2a286:	mov    rbx,QWORD PTR [rbp+0x0]
   2a28a:	call   2a1d0 <regmatch>
   2a28f:	test   eax,eax
   2a291:	jne    2a4e0 <regmatch+0x310>
   2a297:	add    rsp,0x8
   2a29b:	xor    eax,eax
   2a29d:	pop    rbx
   2a29e:	pop    rbp
   2a29f:	pop    r12
   2a2a1:	pop    r13
   2a2a3:	pop    r14
   2a2a5:	pop    r15
   2a2a7:	ret    
   2a2a8:	nop    DWORD PTR [rax+rax*1+0x0]
   2a2b0:	mov    rsi,r13
   2a2b3:	mov    rdi,rbp
   2a2b6:	mov    rbx,QWORD PTR [rbp+0x0]
   2a2ba:	call   2a1d0 <regmatch>
   2a2bf:	test   eax,eax
   2a2c1:	je     2a297 <regmatch+0xc7>
   2a2c3:	sub    r14d,0x14
   2a2c7:	mov    rax,QWORD PTR [rbp+0x10]
   2a2cb:	movsxd r14,r14d
   2a2ce:	lea    rax,[rax+r14*8]
   2a2d2:	cmp    QWORD PTR [rax],0x0
   2a2d6:	je     2a4f9 <regmatch+0x329>
   2a2dc:	add    rsp,0x8
   2a2e0:	mov    eax,0x1
   2a2e5:	pop    rbx
   2a2e6:	pop    rbp
   2a2e7:	pop    r12
   2a2e9:	pop    r13
   2a2eb:	pop    r14
   2a2ed:	pop    r15
   2a2ef:	ret    
   2a2f0:	xor    r15d,r15d
   2a2f3:	cmp    BYTE PTR [r13+0x0],0x8
   2a2f8:	je     2a520 <regmatch+0x350>
   2a2fe:	movzx  eax,BYTE PTR [rbx+0x3]
   2a302:	xor    r12d,r12d
   2a305:	cmp    dl,0xa
   2a308:	mov    r14,QWORD PTR [rbp+0x0]
   2a30c:	setne  r12b
   2a310:	cmp    al,0x5
   2a312:	je     2a530 <regmatch+0x360>
   2a318:	jg     2a390 <regmatch+0x1c0>
   2a31a:	cmp    al,0x3
   2a31c:	je     2a508 <regmatch+0x338>
   2a322:	cmp    al,0x4
   2a324:	jne    2a5be <regmatch+0x3ee>
   2a32a:	lea    rsi,[rbx+0x6]
   2a32e:	mov    rdi,r14
   2a331:	call   35f0 <strspn@plt>
   2a336:	add    rax,0x1
   2a33a:	cmp    r12,rax
   2a33d:	jae    2a297 <regmatch+0xc7>
   2a343:	lea    rbx,[r14+rax*1-0x1]
   2a348:	jmp    2a36d <regmatch+0x19d>
   2a34a:	nop    WORD PTR [rax+rax*1+0x0]
   2a350:	cmp    BYTE PTR [rbx],r15b
   2a353:	je     2a376 <regmatch+0x1a6>
   2a355:	mov    eax,0x1
   2a35a:	sub    rbx,0x1
   2a35e:	sub    rax,r14
   2a361:	add    rax,rbx
   2a364:	cmp    r12,rax
   2a367:	jae    2a297 <regmatch+0xc7>
   2a36d:	mov    QWORD PTR [rbp+0x0],rbx
   2a371:	test   r15b,r15b
   2a374:	jne    2a350 <regmatch+0x180>
   2a376:	mov    rsi,r13
   2a379:	mov    rdi,rbp
   2a37c:	call   2a1d0 <regmatch>
   2a381:	test   eax,eax
   2a383:	je     2a355 <regmatch+0x185>
   2a385:	jmp    2a2dc <regmatch+0x10c>
   2a38a:	nop    WORD PTR [rax+rax*1+0x0]
   2a390:	cmp    al,0x8
   2a392:	jne    2a5be <regmatch+0x3ee>
   2a398:	movzx  esi,BYTE PTR [rbx+0x6]
   2a39c:	cmp    BYTE PTR [r14],sil
   2a39f:	jne    2a545 <regmatch+0x375>
   2a3a5:	xor    eax,eax
   2a3a7:	nop    WORD PTR [rax+rax*1+0x0]
   2a3b0:	mov    rdx,rax
   2a3b3:	add    rax,0x1
   2a3b7:	cmp    sil,BYTE PTR [r14+rax*1]
   2a3bb:	je     2a3b0 <regmatch+0x1e0>
   2a3bd:	lea    rax,[rdx+0x2]
   2a3c1:	jmp    2a33a <regmatch+0x16a>
   2a3c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a3d0:	mov    rax,QWORD PTR [rbp+0x0]
   2a3d4:	cmp    BYTE PTR [rax],0x0
   2a3d7:	je     2a297 <regmatch+0xc7>
   2a3dd:	add    rax,0x1
   2a3e1:	mov    QWORD PTR [rbp+0x0],rax
   2a3e5:	jmp    2a25b <regmatch+0x8b>
   2a3ea:	nop    WORD PTR [rax+rax*1+0x0]
   2a3f0:	mov    rax,QWORD PTR [rbp+0x0]
   2a3f4:	cmp    BYTE PTR [rax],0x0
   2a3f7:	je     2a25b <regmatch+0x8b>
   2a3fd:	jmp    2a297 <regmatch+0xc7>
   2a402:	nop    WORD PTR [rax+rax*1+0x0]
   2a408:	mov    rax,QWORD PTR [rbp+0x8]
   2a40c:	cmp    QWORD PTR [rbp+0x0],rax
   2a410:	je     2a25b <regmatch+0x8b>
   2a416:	jmp    2a297 <regmatch+0xc7>
   2a41b:	nop    DWORD PTR [rax+rax*1+0x0]
   2a420:	cmp    BYTE PTR [r13+0x0],0x6
   2a425:	lea    rsi,[rbx+0x3]
   2a429:	je     2a54f <regmatch+0x37f>
   2a42f:	mov    rbx,rsi
   2a432:	jmp    2a1f4 <regmatch+0x24>
   2a437:	nop    WORD PTR [rax+rax*1+0x0]
   2a440:	mov    r14,QWORD PTR [rbp+0x0]
   2a444:	movsx  esi,BYTE PTR [r14]
   2a448:	test   sil,sil
   2a44b:	je     2a297 <regmatch+0xc7>
   2a451:	lea    rdi,[rbx+0x3]
   2a455:	call   3590 <strchr@plt>
   2a45a:	test   rax,rax
   2a45d:	je     2a253 <regmatch+0x83>
   2a463:	jmp    2a297 <regmatch+0xc7>
   2a468:	nop    DWORD PTR [rax+rax*1+0x0]
   2a470:	mov    r14,QWORD PTR [rbp+0x0]
   2a474:	lea    r15,[rbx+0x3]
   2a478:	movzx  eax,BYTE PTR [r14]
   2a47c:	cmp    BYTE PTR [rbx+0x3],al
   2a47f:	jne    2a297 <regmatch+0xc7>
   2a485:	mov    rdi,r15
   2a488:	call   3560 <strlen@plt>
   2a48d:	mov    rbx,rax
   2a490:	cmp    rax,0x1
   2a494:	jbe    2a4ac <regmatch+0x2dc>
   2a496:	mov    rdx,rax
   2a499:	mov    rsi,r14
   2a49c:	mov    rdi,r15
   2a49f:	call   34d0 <strncmp@plt>
   2a4a4:	test   eax,eax
   2a4a6:	jne    2a297 <regmatch+0xc7>
   2a4ac:	add    r14,rbx
   2a4af:	mov    QWORD PTR [rbp+0x0],r14
   2a4b3:	jmp    2a25b <regmatch+0x8b>
   2a4b8:	nop    DWORD PTR [rax+rax*1+0x0]
   2a4c0:	xor    r13d,r13d
   2a4c3:	movsx  r14d,dl
   2a4c7:	cmp    dl,0x27
   2a4ca:	jbe    2a227 <regmatch+0x57>
   2a4d0:	lea    rdi,[rip+0x167b8]        # 40c8f <gki_primes+0x20f>
   2a4d7:	call   291a0 <sqd_regerror>
   2a4dc:	nop    DWORD PTR [rax+0x0]
   2a4e0:	sub    r14d,0x1e
   2a4e4:	mov    rax,QWORD PTR [rbp+0x18]
   2a4e8:	movsxd r14,r14d
   2a4eb:	lea    rax,[rax+r14*8]
   2a4ef:	cmp    QWORD PTR [rax],0x0
   2a4f3:	jne    2a2dc <regmatch+0x10c>
   2a4f9:	mov    QWORD PTR [rax],rbx
   2a4fc:	jmp    2a2dc <regmatch+0x10c>
   2a501:	nop    DWORD PTR [rax+0x0]
   2a508:	mov    rdi,r14
   2a50b:	call   3560 <strlen@plt>
   2a510:	add    rax,0x1
   2a514:	jmp    2a33a <regmatch+0x16a>
   2a519:	nop    DWORD PTR [rax+0x0]
   2a520:	movzx  r15d,BYTE PTR [r13+0x3]
   2a525:	jmp    2a2fe <regmatch+0x12e>
   2a52a:	nop    WORD PTR [rax+rax*1+0x0]
   2a530:	lea    rsi,[rbx+0x6]
   2a534:	mov    rdi,r14
   2a537:	call   3610 <strcspn@plt>
   2a53c:	add    rax,0x1
   2a540:	jmp    2a33a <regmatch+0x16a>
   2a545:	mov    eax,0x1
   2a54a:	jmp    2a33a <regmatch+0x16a>
   2a54f:	mov    rdi,rbp
   2a552:	mov    r12,QWORD PTR [rbp+0x0]
   2a556:	call   2a1d0 <regmatch>
   2a55b:	test   eax,eax
   2a55d:	jne    2a2dc <regmatch+0x10c>
   2a563:	mov    QWORD PTR [rbp+0x0],r12
   2a567:	movsx  eax,BYTE PTR [rbx+0x1]
   2a56b:	movzx  edx,BYTE PTR [rbx+0x2]
   2a56f:	shl    eax,0x8
   2a572:	and    eax,0x7f00
   2a577:	or     eax,edx
   2a579:	je     384a <regmatch.cold>
   2a57f:	cdqe   
   2a581:	mov    rdx,rbx
   2a584:	sub    rdx,rax
   2a587:	add    rax,rbx
   2a58a:	cmp    BYTE PTR [rbx],0x7
   2a58d:	cmovne rdx,rax
   2a591:	cmp    BYTE PTR [rdx],0x6
   2a594:	mov    rbx,rdx
   2a597:	jne    2a297 <regmatch+0xc7>
   2a59d:	lea    rsi,[rdx+0x3]
   2a5a1:	mov    rdi,rbp
   2a5a4:	call   2a1d0 <regmatch>
   2a5a9:	test   eax,eax
   2a5ab:	je     2a563 <regmatch+0x393>
   2a5ad:	jmp    2a2dc <regmatch+0x10c>
   2a5b2:	lea    rdi,[rip+0x166e8]        # 40ca1 <gki_primes+0x221>
   2a5b9:	call   291a0 <sqd_regerror>
   2a5be:	lea    rdi,[rip+0x167a3]        # 40d68 <gki_primes+0x2e8>
   2a5c5:	call   291a0 <sqd_regerror>
   2a5ca:	nop    WORD PTR [rax+rax*1+0x0]

000000000002a5d0 <regtry>:
   2a5d0:	push   r12
   2a5d2:	mov    rax,rsi
   2a5d5:	mov    r12,rdx
   2a5d8:	lea    rcx,[rsi+0x50]
   2a5dc:	push   rbp
   2a5dd:	mov    rbp,rdi
   2a5e0:	push   rbx
   2a5e1:	mov    rbx,rsi
   2a5e4:	mov    QWORD PTR [rdi],rdx
   2a5e7:	nop    WORD PTR [rax+rax*1+0x0]
   2a5f0:	add    rax,0x8
   2a5f4:	mov    QWORD PTR [rax-0x8],0x0
   2a5fc:	mov    QWORD PTR [rax+0x48],0x0
   2a604:	cmp    rcx,rax
   2a607:	jne    2a5f0 <regtry+0x20>
   2a609:	lea    rsi,[rbx+0xb5]
   2a610:	mov    rdi,rbp
   2a613:	call   2a1d0 <regmatch>
   2a618:	test   eax,eax
   2a61a:	je     2a62c <regtry+0x5c>
   2a61c:	mov    rax,QWORD PTR [rbp+0x0]
   2a620:	mov    QWORD PTR [rbx],r12
   2a623:	mov    QWORD PTR [rbx+0x50],rax
   2a627:	mov    eax,0x1
   2a62c:	pop    rbx
   2a62d:	pop    rbp
   2a62e:	pop    r12
   2a630:	ret    
   2a631:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2a63c:	nop    DWORD PTR [rax+0x0]

000000000002a640 <sqd_regexec>:
   2a640:	endbr64 
   2a644:	push   r12
   2a646:	push   rbp
   2a647:	push   rbx
   2a648:	sub    rsp,0x30
   2a64c:	mov    rax,QWORD PTR fs:0x28
   2a655:	mov    QWORD PTR [rsp+0x28],rax
   2a65a:	xor    eax,eax
   2a65c:	test   rdi,rdi
   2a65f:	je     2a769 <sqd_regexec+0x129>
   2a665:	mov    r12,rsi
   2a668:	test   rsi,rsi
   2a66b:	je     2a769 <sqd_regexec+0x129>
   2a671:	cmp    BYTE PTR [rdi+0xb4],0x9c
   2a678:	mov    rbp,rdi
   2a67b:	jne    2a75d <sqd_regexec+0x11d>
   2a681:	mov    rsi,QWORD PTR [rdi+0xa8]
   2a688:	test   rsi,rsi
   2a68b:	je     2a69a <sqd_regexec+0x5a>
   2a68d:	mov    rdi,r12
   2a690:	call   37f0 <strstr@plt>
   2a695:	test   rax,rax
   2a698:	je     2a6fb <sqd_regexec+0xbb>
   2a69a:	lea    rax,[rbp+0x50]
   2a69e:	cmp    BYTE PTR [rbp+0xa1],0x0
   2a6a5:	mov    QWORD PTR [rsp+0x8],r12
   2a6aa:	mov    QWORD PTR [rsp+0x10],rbp
   2a6af:	mov    QWORD PTR [rsp+0x18],rax
   2a6b4:	jne    2a748 <sqd_regexec+0x108>
   2a6ba:	cmp    BYTE PTR [rbp+0xa0],0x0
   2a6c1:	mov    rbx,rsp
   2a6c4:	je     2a72b <sqd_regexec+0xeb>
   2a6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a6d0:	mov    rdx,r12
   2a6d3:	mov    rsi,rbp
   2a6d6:	mov    rdi,rbx
   2a6d9:	call   2a5d0 <regtry>
   2a6de:	test   eax,eax
   2a6e0:	jne    2a73d <sqd_regexec+0xfd>
   2a6e2:	movsx  esi,BYTE PTR [rbp+0xa0]
   2a6e9:	lea    rdi,[r12+0x1]
   2a6ee:	call   3590 <strchr@plt>
   2a6f3:	mov    r12,rax
   2a6f6:	test   rax,rax
   2a6f9:	jne    2a6d0 <sqd_regexec+0x90>
   2a6fb:	xor    eax,eax
   2a6fd:	mov    rcx,QWORD PTR [rsp+0x28]
   2a702:	xor    rcx,QWORD PTR fs:0x28
   2a70b:	jne    2a758 <sqd_regexec+0x118>
   2a70d:	add    rsp,0x30
   2a711:	pop    rbx
   2a712:	pop    rbp
   2a713:	pop    r12
   2a715:	ret    
   2a716:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a720:	cmp    BYTE PTR [r12],0x0
   2a725:	je     2a6fb <sqd_regexec+0xbb>
   2a727:	add    r12,0x1
   2a72b:	mov    rdx,r12
   2a72e:	mov    rsi,rbp
   2a731:	mov    rdi,rbx
   2a734:	call   2a5d0 <regtry>
   2a739:	test   eax,eax
   2a73b:	je     2a720 <sqd_regexec+0xe0>
   2a73d:	mov    eax,0x1
   2a742:	jmp    2a6fd <sqd_regexec+0xbd>
   2a744:	nop    DWORD PTR [rax+0x0]
   2a748:	mov    rdi,rsp
   2a74b:	mov    rdx,r12
   2a74e:	mov    rsi,rbp
   2a751:	call   2a5d0 <regtry>
   2a756:	jmp    2a6fd <sqd_regexec+0xbd>
   2a758:	call   3570 <__stack_chk_fail@plt>
   2a75d:	lea    rdi,[rip+0x1656d]        # 40cd1 <gki_primes+0x251>
   2a764:	call   291a0 <sqd_regerror>
   2a769:	lea    rdi,[rip+0x16544]        # 40cb4 <gki_primes+0x234>
   2a770:	call   291a0 <sqd_regerror>
   2a775:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002a780 <Strparse>:
   2a780:	endbr64 
   2a784:	push   r15
   2a786:	push   r14
   2a788:	mov    r14,rdi
   2a78b:	push   r13
   2a78d:	mov    r13,rsi
   2a790:	push   r12
   2a792:	push   rbp
   2a793:	movsxd rbp,edx
   2a796:	push   rbx
   2a797:	sub    rsp,0x8
   2a79b:	cmp    ebp,0x9
   2a79e:	jg     2a898 <Strparse+0x118>
   2a7a4:	test   ebp,ebp
   2a7a6:	js     2a7d6 <Strparse+0x56>
   2a7a8:	xor    ebx,ebx
   2a7aa:	lea    r12,[rip+0x37b6f]        # 62320 <sqd_parse>
   2a7b1:	nop    DWORD PTR [rax+0x0]
   2a7b8:	mov    rdi,QWORD PTR [r12+rbx*8]
   2a7bc:	test   rdi,rdi
   2a7bf:	je     2a7ce <Strparse+0x4e>
   2a7c1:	call   3460 <free@plt>
   2a7c6:	mov    QWORD PTR [r12+rbx*8],0x0
   2a7ce:	add    rbx,0x1
   2a7d2:	cmp    ebp,ebx
   2a7d4:	jge    2a7b8 <Strparse+0x38>
   2a7d6:	mov    rdi,r14
   2a7d9:	call   29f60 <sqd_regcomp>
   2a7de:	mov    r15,rax
   2a7e1:	test   rax,rax
   2a7e4:	je     2a8b0 <Strparse+0x130>
   2a7ea:	mov    rsi,r13
   2a7ed:	mov    rdi,r15
   2a7f0:	call   2a640 <sqd_regexec>
   2a7f5:	mov    r12d,eax
   2a7f8:	cmp    eax,0x1
   2a7fb:	je     2a820 <Strparse+0xa0>
   2a7fd:	mov    rdi,r15
   2a800:	call   3460 <free@plt>
   2a805:	add    rsp,0x8
   2a809:	mov    eax,r12d
   2a80c:	pop    rbx
   2a80d:	pop    rbp
   2a80e:	pop    r12
   2a810:	pop    r13
   2a812:	pop    r14
   2a814:	pop    r15
   2a816:	ret    
   2a817:	nop    WORD PTR [rax+rax*1+0x0]
   2a820:	test   ebp,ebp
   2a822:	js     2a7fd <Strparse+0x7d>
   2a824:	mov    rbx,r15
   2a827:	lea    r14,[rip+0x37af2]        # 62320 <sqd_parse>
   2a82e:	lea    r13,[r15+rbp*8+0x8]
   2a833:	nop    DWORD PTR [rax+rax*1+0x0]
   2a838:	mov    rdx,QWORD PTR [rbx]
   2a83b:	test   rdx,rdx
   2a83e:	je     2a881 <Strparse+0x101>
   2a840:	mov    rax,QWORD PTR [rbx+0x50]
   2a844:	test   rax,rax
   2a847:	je     2a881 <Strparse+0x101>
   2a849:	sub    rax,rdx
   2a84c:	mov    esi,0x7c
   2a851:	lea    rdi,[rip+0x164a5]        # 40cfd <gki_primes+0x27d>
   2a858:	lea    edx,[rax+0x1]
   2a85b:	mov    rbp,rax
   2a85e:	movsxd rdx,edx
   2a861:	movsxd rbp,ebp
   2a864:	call   36810 <sre_malloc>
   2a869:	mov    rdx,rbp
   2a86c:	mov    QWORD PTR [r14],rax
   2a86f:	mov    rsi,QWORD PTR [rbx]
   2a872:	mov    rdi,rax
   2a875:	call   34b0 <strncpy@plt>
   2a87a:	mov    rax,QWORD PTR [r14]
   2a87d:	mov    BYTE PTR [rax+rbp*1],0x0
   2a881:	add    rbx,0x8
   2a885:	add    r14,0x8
   2a889:	cmp    r13,rbx
   2a88c:	jne    2a838 <Strparse+0xb8>
   2a88e:	jmp    2a7fd <Strparse+0x7d>
   2a893:	nop    DWORD PTR [rax+rax*1+0x0]
   2a898:	mov    esi,0x9
   2a89d:	lea    rdi,[rip+0x164ec]        # 40d90 <gki_primes+0x310>
   2a8a4:	xor    eax,eax
   2a8a6:	call   317f0 <Die>
   2a8ab:	jmp    2a7a8 <Strparse+0x28>
   2a8b0:	lea    rdi,[rip+0x1642b]        # 40ce2 <gki_primes+0x262>
   2a8b7:	xor    eax,eax
   2a8b9:	call   317f0 <Die>
   2a8be:	jmp    2a7ea <Strparse+0x6a>
   2a8c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2a8ce:	xchg   ax,ax

000000000002a8d0 <sqd_regsub>:
   2a8d0:	endbr64 
   2a8d4:	push   r14
   2a8d6:	test   rsi,rsi
   2a8d9:	push   r13
   2a8db:	mov    r13,rdx
   2a8de:	sete   dl
   2a8e1:	test   r13,r13
   2a8e4:	push   r12
   2a8e6:	sete   al
   2a8e9:	push   rbp
   2a8ea:	or     dl,al
   2a8ec:	push   rbx
   2a8ed:	jne    2aa03 <sqd_regsub+0x133>
   2a8f3:	mov    r14,rdi
   2a8f6:	test   rdi,rdi
   2a8f9:	je     2aa03 <sqd_regsub+0x133>
   2a8ff:	cmp    BYTE PTR [rdi+0xb4],0x9c
   2a906:	jne    2aa0f <sqd_regsub+0x13f>
   2a90c:	movzx  ebx,BYTE PTR [rsi]
   2a90f:	mov    r12,rsi
   2a912:	lea    rbp,[rsi+0x1]
   2a916:	test   bl,bl
   2a918:	jne    2a93d <sqd_regsub+0x6d>
   2a91a:	jmp    2a970 <sqd_regsub+0xa0>
   2a91c:	nop    DWORD PTR [rax+0x0]
   2a920:	cmp    bl,0x5c
   2a923:	je     2a980 <sqd_regsub+0xb0>
   2a925:	mov    r12,rbp
   2a928:	add    rbp,0x1
   2a92c:	mov    BYTE PTR [r13+0x0],bl
   2a930:	movzx  ebx,BYTE PTR [r12]
   2a935:	add    r13,0x1
   2a939:	test   bl,bl
   2a93b:	je     2a970 <sqd_regsub+0xa0>
   2a93d:	cmp    bl,0x26
   2a940:	jne    2a920 <sqd_regsub+0x50>
   2a942:	xor    eax,eax
   2a944:	cdqe   
   2a946:	lea    rax,[r14+rax*8]
   2a94a:	mov    rsi,QWORD PTR [rax]
   2a94d:	test   rsi,rsi
   2a950:	je     2a960 <sqd_regsub+0x90>
   2a952:	mov    rax,QWORD PTR [rax+0x50]
   2a956:	cmp    rsi,rax
   2a959:	jae    2a960 <sqd_regsub+0x90>
   2a95b:	test   rax,rax
   2a95e:	jne    2a9d8 <sqd_regsub+0x108>
   2a960:	mov    r12,rbp
   2a963:	add    rbp,0x1
   2a967:	movzx  ebx,BYTE PTR [r12]
   2a96c:	test   bl,bl
   2a96e:	jne    2a93d <sqd_regsub+0x6d>
   2a970:	pop    rbx
   2a971:	pop    rbp
   2a972:	mov    BYTE PTR [r13+0x0],0x0
   2a977:	pop    r12
   2a979:	pop    r13
   2a97b:	pop    r14
   2a97d:	ret    
   2a97e:	xchg   ax,ax
   2a980:	call   3820 <__ctype_b_loc@plt>
   2a985:	movsx  rcx,BYTE PTR [r12+0x1]
   2a98b:	mov    r8,rax
   2a98e:	mov    rdx,QWORD PTR [r8]
   2a991:	mov    rax,rcx
   2a994:	test   BYTE PTR [rdx+rcx*2+0x1],0x8
   2a999:	je     2a9a5 <sqd_regsub+0xd5>
   2a99b:	lea    rbp,[r12+0x2]
   2a9a0:	sub    eax,0x30
   2a9a3:	jns    2a944 <sqd_regsub+0x74>
   2a9a5:	movzx  eax,BYTE PTR [rbp+0x0]
   2a9a9:	lea    r12,[rbp+0x1]
   2a9ad:	cmp    al,0x5c
   2a9af:	je     2a9c8 <sqd_regsub+0xf8>
   2a9b1:	cmp    al,0x26
   2a9b3:	je     2a9c8 <sqd_regsub+0xf8>
   2a9b5:	mov    rax,r12
   2a9b8:	mov    r12,rbp
   2a9bb:	mov    rbp,rax
   2a9be:	jmp    2a92c <sqd_regsub+0x5c>
   2a9c3:	nop    DWORD PTR [rax+rax*1+0x0]
   2a9c8:	add    rbp,0x2
   2a9cc:	mov    ebx,eax
   2a9ce:	jmp    2a92c <sqd_regsub+0x5c>
   2a9d3:	nop    DWORD PTR [rax+rax*1+0x0]
   2a9d8:	sub    rax,rsi
   2a9db:	mov    rdi,r13
   2a9de:	mov    rbx,rax
   2a9e1:	mov    rdx,rax
   2a9e4:	call   34b0 <strncpy@plt>
   2a9e9:	add    r13,rbx
   2a9ec:	cmp    BYTE PTR [r13-0x1],0x0
   2a9f1:	jne    2a960 <sqd_regsub+0x90>
   2a9f7:	lea    rdi,[rip+0x16335]        # 40d33 <gki_primes+0x2b3>
   2a9fe:	call   291a0 <sqd_regerror>
   2aa03:	lea    rdi,[rip+0x162fd]        # 40d07 <gki_primes+0x287>
   2aa0a:	call   291a0 <sqd_regerror>
   2aa0f:	lea    rdi,[rip+0x1630e]        # 40d24 <gki_primes+0x2a4>
   2aa16:	call   291a0 <sqd_regerror>
   2aa1b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002aa20 <MSAAlloc>:
   2aa20:	endbr64 
   2aa24:	push   r15
   2aa26:	mov    edx,0x168
   2aa2b:	mov    r15d,esi
   2aa2e:	mov    esi,0x44
   2aa33:	push   r14
   2aa35:	push   r13
   2aa37:	push   r12
   2aa39:	push   rbp
   2aa3a:	push   rbx
   2aa3b:	movsxd rbx,edi
   2aa3e:	lea    rdi,[rip+0x16553]        # 40f98 <gki_primes+0x518>
   2aa45:	lea    r13,[rbx*8+0x0]
   2aa4d:	mov    rbp,rbx
   2aa50:	sub    rsp,0x18
   2aa54:	call   36810 <sre_malloc>
   2aa59:	mov    rdx,r13
   2aa5c:	mov    esi,0x45
   2aa61:	lea    rdi,[rip+0x16530]        # 40f98 <gki_primes+0x518>
   2aa68:	mov    r12,rax
   2aa6b:	call   36810 <sre_malloc>
   2aa70:	mov    rdx,r13
   2aa73:	mov    esi,0x46
   2aa78:	lea    rdi,[rip+0x16519]        # 40f98 <gki_primes+0x518>
   2aa7f:	mov    QWORD PTR [r12],rax
   2aa83:	lea    r13,[rbx*4+0x0]
   2aa8b:	call   36810 <sre_malloc>
   2aa90:	mov    rdx,r13
   2aa93:	mov    esi,0x47
   2aa98:	lea    rdi,[rip+0x164f9]        # 40f98 <gki_primes+0x518>
   2aa9f:	mov    QWORD PTR [r12+0x8],rax
   2aaa4:	call   36810 <sre_malloc>
   2aaa9:	mov    rdx,r13
   2aaac:	mov    esi,0x48
   2aab1:	lea    rdi,[rip+0x164e0]        # 40f98 <gki_primes+0x518>
   2aab8:	mov    QWORD PTR [r12+0x148],rax
   2aac0:	call   36810 <sre_malloc>
   2aac5:	mov    QWORD PTR [r12+0x10],rax
   2aaca:	test   ebx,ebx
   2aacc:	jle    2ab61 <MSAAlloc+0x141>
   2aad2:	lea    ecx,[rbx-0x1]
   2aad5:	movss  xmm0,DWORD PTR [rip+0x15a3f]        # 4051c <defmq.7318+0x35c>
   2aadd:	xor    ebx,ebx
   2aadf:	lea    r13,[rcx*4+0x0]
   2aae7:	lea    ecx,[r15+0x1]
   2aaeb:	mov    DWORD PTR [rsp+0xc],ecx
   2aaef:	jmp    2ab0d <MSAAlloc+0xed>
   2aaf1:	nop    DWORD PTR [rax+0x0]
   2aaf8:	mov    QWORD PTR [r14],0x0
   2aaff:	cmp    rbx,r13
   2ab02:	je     2ab61 <MSAAlloc+0x141>
   2ab04:	mov    rax,QWORD PTR [r12+0x10]
   2ab09:	add    rbx,0x4
   2ab0d:	mov    rdx,QWORD PTR [r12+0x8]
   2ab12:	mov    QWORD PTR [rdx+rbx*2],0x0
   2ab1a:	mov    rdx,QWORD PTR [r12+0x148]
   2ab22:	mov    DWORD PTR [rdx+rbx*1],0x0
   2ab29:	movss  DWORD PTR [rax+rbx*1],xmm0
   2ab2e:	mov    rax,QWORD PTR [r12]
   2ab32:	lea    r14,[rax+rbx*2]
   2ab36:	test   r15d,r15d
   2ab39:	je     2aaf8 <MSAAlloc+0xd8>
   2ab3b:	movsxd rdx,DWORD PTR [rsp+0xc]
   2ab40:	mov    esi,0x50
   2ab45:	lea    rdi,[rip+0x1644c]        # 40f98 <gki_primes+0x518>
   2ab4c:	call   36810 <sre_malloc>
   2ab51:	movss  xmm0,DWORD PTR [rip+0x159c3]        # 4051c <defmq.7318+0x35c>
   2ab59:	mov    QWORD PTR [r14],rax
   2ab5c:	cmp    rbx,r13
   2ab5f:	jne    2ab04 <MSAAlloc+0xe4>
   2ab61:	mov    DWORD PTR [r12+0x18],r15d
   2ab66:	mov    DWORD PTR [r12+0x140],ebp
   2ab6e:	mov    DWORD PTR [r12+0x144],ebp
   2ab76:	mov    QWORD PTR [r12+0x150],0x0
   2ab82:	mov    DWORD PTR [r12+0x1c],0x0
   2ab8b:	mov    QWORD PTR [r12+0x20],0x0
   2ab94:	mov    QWORD PTR [r12+0x28],0x0
   2ab9d:	mov    QWORD PTR [r12+0x30],0x0
   2aba6:	mov    QWORD PTR [r12+0x38],0x0
   2abaf:	mov    QWORD PTR [r12+0x40],0x0
   2abb8:	mov    QWORD PTR [r12+0x48],0x0
   2abc1:	mov    QWORD PTR [r12+0x50],0x0
   2abca:	mov    QWORD PTR [r12+0x58],0x0
   2abd3:	mov    QWORD PTR [r12+0x60],0x0
   2abdc:	mov    QWORD PTR [r12+0x68],0x0
   2abe5:	mov    QWORD PTR [r12+0x70],0x0
   2abee:	mov    QWORD PTR [r12+0x78],0x0
   2abf7:	mov    QWORD PTR [r12+0x158],0x0
   2ac03:	call   27fd0 <GKIInit>
   2ac08:	lea    rdx,[r12+0x98]
   2ac10:	mov    DWORD PTR [r12+0x160],0x0
   2ac1c:	mov    QWORD PTR [r12+0x138],rax
   2ac24:	lea    rax,[r12+0x80]
   2ac2c:	nop    DWORD PTR [rax+0x0]
   2ac30:	mov    DWORD PTR [rax],0x0
   2ac36:	add    rax,0x4
   2ac3a:	mov    DWORD PTR [rax+0x14],0x0
   2ac41:	cmp    rdx,rax
   2ac44:	jne    2ac30 <MSAAlloc+0x210>
   2ac46:	mov    QWORD PTR [r12+0xb0],0x0
   2ac52:	mov    rax,r12
   2ac55:	mov    QWORD PTR [r12+0xb8],0x0
   2ac61:	mov    QWORD PTR [r12+0xc0],0x0
   2ac6d:	mov    QWORD PTR [r12+0xc8],0x0
   2ac79:	mov    DWORD PTR [r12+0xd0],0x0
   2ac85:	mov    QWORD PTR [r12+0xd8],0x0
   2ac91:	mov    QWORD PTR [r12+0xe0],0x0
   2ac9d:	mov    QWORD PTR [r12+0xe8],0x0
   2aca9:	mov    DWORD PTR [r12+0xf0],0x0
   2acb5:	mov    QWORD PTR [r12+0xf8],0x0
   2acc1:	mov    QWORD PTR [r12+0x100],0x0
   2accd:	mov    QWORD PTR [r12+0x108],0x0
   2acd9:	mov    DWORD PTR [r12+0x110],0x0
   2ace5:	mov    QWORD PTR [r12+0x118],0x0
   2acf1:	mov    QWORD PTR [r12+0x120],0x0
   2acfd:	mov    QWORD PTR [r12+0x128],0x0
   2ad09:	mov    DWORD PTR [r12+0x130],0x0
   2ad15:	add    rsp,0x18
   2ad19:	pop    rbx
   2ad1a:	pop    rbp
   2ad1b:	pop    r12
   2ad1d:	pop    r13
   2ad1f:	pop    r14
   2ad21:	pop    r15
   2ad23:	ret    
   2ad24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2ad2f:	nop

000000000002ad30 <MSAExpand>:
   2ad30:	endbr64 
   2ad34:	push   r15
   2ad36:	mov    esi,0xa2
   2ad3b:	push   r14
   2ad3d:	push   r13
   2ad3f:	push   r12
   2ad41:	push   rbp
   2ad42:	push   rbx
   2ad43:	mov    rbx,rdi
   2ad46:	sub    rsp,0x8
   2ad4a:	mov    ecx,DWORD PTR [rdi+0x144]
   2ad50:	add    ecx,DWORD PTR [rdi+0x140]
   2ad56:	mov    DWORD PTR [rdi+0x140],ecx
   2ad5c:	mov    rdx,QWORD PTR [rdi]
   2ad5f:	movsxd rcx,ecx
   2ad62:	lea    rdi,[rip+0x1622f]        # 40f98 <gki_primes+0x518>
   2ad69:	shl    rcx,0x3
   2ad6d:	call   36860 <sre_realloc>
   2ad72:	movsxd rcx,DWORD PTR [rbx+0x140]
   2ad79:	mov    rdx,QWORD PTR [rbx+0x8]
   2ad7d:	mov    esi,0xa3
   2ad82:	mov    QWORD PTR [rbx],rax
   2ad85:	lea    rdi,[rip+0x1620c]        # 40f98 <gki_primes+0x518>
   2ad8c:	shl    rcx,0x3
   2ad90:	call   36860 <sre_realloc>
   2ad95:	movsxd rcx,DWORD PTR [rbx+0x140]
   2ad9c:	mov    rdx,QWORD PTR [rbx+0x148]
   2ada3:	mov    esi,0xa4
   2ada8:	mov    QWORD PTR [rbx+0x8],rax
   2adac:	lea    rdi,[rip+0x161e5]        # 40f98 <gki_primes+0x518>
   2adb3:	shl    rcx,0x3
   2adb7:	call   36860 <sre_realloc>
   2adbc:	movsxd rcx,DWORD PTR [rbx+0x140]
   2adc3:	mov    rdx,QWORD PTR [rbx+0x10]
   2adc7:	mov    esi,0xa5
   2adcc:	mov    QWORD PTR [rbx+0x148],rax
   2add3:	lea    rdi,[rip+0x161be]        # 40f98 <gki_primes+0x518>
   2adda:	shl    rcx,0x2
   2adde:	call   36860 <sre_realloc>
   2ade3:	mov    rdx,QWORD PTR [rbx+0x70]
   2ade7:	mov    QWORD PTR [rbx+0x10],rax
   2adeb:	test   rdx,rdx
   2adee:	je     2ae3a <MSAExpand+0x10a>
   2adf0:	movsxd rcx,DWORD PTR [rbx+0x140]
   2adf7:	mov    esi,0xa8
   2adfc:	lea    rdi,[rip+0x16195]        # 40f98 <gki_primes+0x518>
   2ae03:	shl    rcx,0x3
   2ae07:	call   36860 <sre_realloc>
   2ae0c:	movsxd rcx,DWORD PTR [rbx+0x140]
   2ae13:	mov    rdx,QWORD PTR [rbx+0x150]
   2ae1a:	mov    esi,0xa9
   2ae1f:	mov    QWORD PTR [rbx+0x70],rax
   2ae23:	lea    rdi,[rip+0x1616e]        # 40f98 <gki_primes+0x518>
   2ae2a:	shl    rcx,0x2
   2ae2e:	call   36860 <sre_realloc>
   2ae33:	mov    QWORD PTR [rbx+0x150],rax
   2ae3a:	mov    rdx,QWORD PTR [rbx+0x78]
   2ae3e:	movsxd rax,DWORD PTR [rbx+0x140]
   2ae45:	test   rdx,rdx
   2ae48:	je     2ae98 <MSAExpand+0x168>
   2ae4a:	lea    rcx,[rax*8+0x0]
   2ae52:	mov    esi,0xac
   2ae57:	lea    rdi,[rip+0x1613a]        # 40f98 <gki_primes+0x518>
   2ae5e:	call   36860 <sre_realloc>
   2ae63:	movsxd rcx,DWORD PTR [rbx+0x140]
   2ae6a:	mov    rdx,QWORD PTR [rbx+0x158]
   2ae71:	mov    esi,0xad
   2ae76:	mov    QWORD PTR [rbx+0x78],rax
   2ae7a:	lea    rdi,[rip+0x16117]        # 40f98 <gki_primes+0x518>
   2ae81:	shl    rcx,0x2
   2ae85:	call   36860 <sre_realloc>
   2ae8a:	mov    QWORD PTR [rbx+0x158],rax
   2ae91:	movsxd rax,DWORD PTR [rbx+0x140]
   2ae98:	mov    rdx,QWORD PTR [rbx+0x60]
   2ae9c:	test   rdx,rdx
   2ae9f:	je     2aec5 <MSAExpand+0x195>
   2aea1:	lea    rcx,[rax*8+0x0]
   2aea9:	mov    esi,0xb0
   2aeae:	lea    rdi,[rip+0x160e3]        # 40f98 <gki_primes+0x518>
   2aeb5:	call   36860 <sre_realloc>
   2aeba:	mov    QWORD PTR [rbx+0x60],rax
   2aebe:	movsxd rax,DWORD PTR [rbx+0x140]
   2aec5:	mov    rdx,QWORD PTR [rbx+0x68]
   2aec9:	test   rdx,rdx
   2aecc:	je     2aef1 <MSAExpand+0x1c1>
   2aece:	lea    rcx,[rax*8+0x0]
   2aed6:	mov    esi,0xb2
   2aedb:	lea    rdi,[rip+0x160b6]        # 40f98 <gki_primes+0x518>
   2aee2:	call   36860 <sre_realloc>
   2aee7:	mov    QWORD PTR [rbx+0x68],rax
   2aeeb:	mov    eax,DWORD PTR [rbx+0x140]
   2aef1:	mov    r15d,eax
   2aef4:	sub    r15d,DWORD PTR [rbx+0x144]
   2aefb:	lea    r14,[rip+0x16096]        # 40f98 <gki_primes+0x518>
   2af02:	movsxd rbp,r15d
   2af05:	shl    rbp,0x2
   2af09:	cmp    r15d,eax
   2af0c:	jl     2afa7 <MSAExpand+0x277>
   2af12:	jmp    2b070 <MSAExpand+0x340>
   2af17:	nop    WORD PTR [rax+rax*1+0x0]
   2af20:	mov    QWORD PTR [r13+0x0],0x0
   2af28:	mov    rax,QWORD PTR [rbx+0x148]
   2af2f:	mov    DWORD PTR [rax+rbp*1],0x0
   2af36:	mov    rax,QWORD PTR [rbx+0x70]
   2af3a:	test   rax,rax
   2af3d:	je     2af64 <MSAExpand+0x234>
   2af3f:	mov    ecx,DWORD PTR [rbx+0x18]
   2af42:	lea    r13,[rax+r12*1]
   2af46:	test   ecx,ecx
   2af48:	jne    2b048 <MSAExpand+0x318>
   2af4e:	mov    QWORD PTR [r13+0x0],0x0
   2af56:	mov    rax,QWORD PTR [rbx+0x150]
   2af5d:	mov    DWORD PTR [rax+rbp*1],0x0
   2af64:	mov    rax,QWORD PTR [rbx+0x78]
   2af68:	test   rax,rax
   2af6b:	je     2af92 <MSAExpand+0x262>
   2af6d:	mov    ecx,DWORD PTR [rbx+0x18]
   2af70:	lea    r13,[rax+r12*1]
   2af74:	test   ecx,ecx
   2af76:	jne    2b020 <MSAExpand+0x2f0>
   2af7c:	mov    QWORD PTR [r13+0x0],0x0
   2af84:	mov    rax,QWORD PTR [rbx+0x158]
   2af8b:	mov    DWORD PTR [rax+rbp*1],0x0
   2af92:	add    r15d,0x1
   2af96:	add    rbp,0x4
   2af9a:	cmp    DWORD PTR [rbx+0x140],r15d
   2afa1:	jle    2b070 <MSAExpand+0x340>
   2afa7:	mov    rax,QWORD PTR [rbx+0x8]
   2afab:	lea    r12,[rbp+rbp*1+0x0]
   2afb0:	mov    QWORD PTR [rax+rbp*2],0x0
   2afb8:	mov    rax,QWORD PTR [rbx+0x10]
   2afbc:	mov    DWORD PTR [rax+rbp*1],0xbf800000
   2afc3:	mov    rax,QWORD PTR [rbx+0x60]
   2afc7:	test   rax,rax
   2afca:	je     2afd4 <MSAExpand+0x2a4>
   2afcc:	mov    QWORD PTR [rax+rbp*2],0x0
   2afd4:	mov    rax,QWORD PTR [rbx+0x68]
   2afd8:	test   rax,rax
   2afdb:	je     2afe5 <MSAExpand+0x2b5>
   2afdd:	mov    QWORD PTR [rax+r12*1],0x0
   2afe5:	mov    r13,QWORD PTR [rbx]
   2afe8:	mov    ecx,DWORD PTR [rbx+0x18]
   2afeb:	add    r13,r12
   2afee:	test   ecx,ecx
   2aff0:	je     2af20 <MSAExpand+0x1f0>
   2aff6:	mov    rdx,QWORD PTR [r13+0x0]
   2affa:	add    ecx,0x1
   2affd:	mov    esi,0xbd
   2b002:	mov    rdi,r14
   2b005:	movsxd rcx,ecx
   2b008:	call   36860 <sre_realloc>
   2b00d:	mov    QWORD PTR [r13+0x0],rax
   2b011:	jmp    2af28 <MSAExpand+0x1f8>
   2b016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b020:	mov    rax,QWORD PTR [rbx+0x70]
   2b024:	add    ecx,0x1
   2b027:	mov    esi,0xc9
   2b02c:	mov    rdi,r14
   2b02f:	movsxd rcx,ecx
   2b032:	mov    rdx,QWORD PTR [rax+r12*1]
   2b036:	call   36860 <sre_realloc>
   2b03b:	mov    QWORD PTR [r13+0x0],rax
   2b03f:	jmp    2af84 <MSAExpand+0x254>
   2b044:	nop    DWORD PTR [rax+0x0]
   2b048:	mov    rdx,QWORD PTR [r13+0x0]
   2b04c:	add    ecx,0x1
   2b04f:	mov    esi,0xc3
   2b054:	mov    rdi,r14
   2b057:	movsxd rcx,ecx
   2b05a:	call   36860 <sre_realloc>
   2b05f:	mov    QWORD PTR [r13+0x0],rax
   2b063:	jmp    2af56 <MSAExpand+0x226>
   2b068:	nop    DWORD PTR [rax+rax*1+0x0]
   2b070:	mov    rbp,QWORD PTR [rbx+0xe0]
   2b077:	test   rbp,rbp
   2b07a:	je     2b148 <MSAExpand+0x418>
   2b080:	mov    edx,DWORD PTR [rbx+0xf0]
   2b086:	test   edx,edx
   2b088:	jle    2b148 <MSAExpand+0x418>
   2b08e:	xor    r12d,r12d
   2b091:	lea    r14,[rip+0x15f00]        # 40f98 <gki_primes+0x518>
   2b098:	jmp    2b0b8 <MSAExpand+0x388>
   2b09a:	nop    WORD PTR [rax+rax*1+0x0]
   2b0a0:	add    r12,0x1
   2b0a4:	cmp    DWORD PTR [rbx+0xf0],r12d
   2b0ab:	jle    2b148 <MSAExpand+0x418>
   2b0b1:	mov    rbp,QWORD PTR [rbx+0xe0]
   2b0b8:	lea    r13,[r12*8+0x0]
   2b0c0:	add    rbp,r13
   2b0c3:	mov    rdx,QWORD PTR [rbp+0x0]
   2b0c7:	test   rdx,rdx
   2b0ca:	je     2b0a0 <MSAExpand+0x370>
   2b0cc:	movsxd rcx,DWORD PTR [rbx+0x140]
   2b0d3:	mov    esi,0xd9
   2b0d8:	mov    rdi,r14
   2b0db:	shl    rcx,0x3
   2b0df:	call   36860 <sre_realloc>
   2b0e4:	mov    edx,DWORD PTR [rbx+0x140]
   2b0ea:	mov    QWORD PTR [rbp+0x0],rax
   2b0ee:	mov    ecx,edx
   2b0f0:	sub    ecx,DWORD PTR [rbx+0x144]
   2b0f6:	cmp    edx,ecx
   2b0f8:	jle    2b0a0 <MSAExpand+0x370>
   2b0fa:	mov    rax,QWORD PTR [rbx+0xe0]
   2b101:	sub    edx,0x1
   2b104:	movsxd rdi,ecx
   2b107:	sub    edx,ecx
   2b109:	mov    rsi,QWORD PTR [rax+r13*1]
   2b10d:	lea    rdx,[rdi+rdx*1+0x1]
   2b112:	lea    rax,[rsi+rdi*8]
   2b116:	lea    rdx,[rsi+rdx*8]
   2b11a:	nop    WORD PTR [rax+rax*1+0x0]
   2b120:	mov    QWORD PTR [rax],0x0
   2b127:	add    rax,0x8
   2b12b:	cmp    rdx,rax
   2b12e:	jne    2b120 <MSAExpand+0x3f0>
   2b130:	add    r12,0x1
   2b134:	cmp    DWORD PTR [rbx+0xf0],r12d
   2b13b:	jg     2b0b1 <MSAExpand+0x381>
   2b141:	nop    DWORD PTR [rax+0x0]
   2b148:	mov    rbp,QWORD PTR [rbx+0x120]
   2b14f:	test   rbp,rbp
   2b152:	je     2b219 <MSAExpand+0x4e9>
   2b158:	mov    eax,DWORD PTR [rbx+0x130]
   2b15e:	test   eax,eax
   2b160:	jle    2b219 <MSAExpand+0x4e9>
   2b166:	xor    r12d,r12d
   2b169:	lea    r14,[rip+0x15e28]        # 40f98 <gki_primes+0x518>
   2b170:	jmp    2b190 <MSAExpand+0x460>
   2b172:	nop    WORD PTR [rax+rax*1+0x0]
   2b178:	add    r12,0x1
   2b17c:	cmp    DWORD PTR [rbx+0x130],r12d
   2b183:	jle    2b219 <MSAExpand+0x4e9>
   2b189:	mov    rbp,QWORD PTR [rbx+0x120]
   2b190:	lea    r13,[r12*8+0x0]
   2b198:	add    rbp,r13
   2b19b:	mov    rdx,QWORD PTR [rbp+0x0]
   2b19f:	test   rdx,rdx
   2b1a2:	je     2b178 <MSAExpand+0x448>
   2b1a4:	movsxd rcx,DWORD PTR [rbx+0x140]
   2b1ab:	mov    esi,0xe8
   2b1b0:	mov    rdi,r14
   2b1b3:	shl    rcx,0x3
   2b1b7:	call   36860 <sre_realloc>
   2b1bc:	mov    edx,DWORD PTR [rbx+0x140]
   2b1c2:	mov    QWORD PTR [rbp+0x0],rax
   2b1c6:	mov    ecx,edx
   2b1c8:	sub    ecx,DWORD PTR [rbx+0x144]
   2b1ce:	cmp    edx,ecx
   2b1d0:	jle    2b178 <MSAExpand+0x448>
   2b1d2:	mov    rax,QWORD PTR [rbx+0x120]
   2b1d9:	sub    edx,0x1
   2b1dc:	movsxd rdi,ecx
   2b1df:	sub    edx,ecx
   2b1e1:	mov    rsi,QWORD PTR [rax+r13*1]
   2b1e5:	lea    rdx,[rdi+rdx*1+0x1]
   2b1ea:	lea    rax,[rsi+rdi*8]
   2b1ee:	lea    rdx,[rsi+rdx*8]
   2b1f2:	nop    WORD PTR [rax+rax*1+0x0]
   2b1f8:	mov    QWORD PTR [rax],0x0
   2b1ff:	add    rax,0x8
   2b203:	cmp    rax,rdx
   2b206:	jne    2b1f8 <MSAExpand+0x4c8>
   2b208:	add    r12,0x1
   2b20c:	cmp    DWORD PTR [rbx+0x130],r12d
   2b213:	jg     2b189 <MSAExpand+0x459>
   2b219:	add    rsp,0x8
   2b21d:	pop    rbx
   2b21e:	pop    rbp
   2b21f:	pop    r12
   2b221:	pop    r13
   2b223:	pop    r14
   2b225:	pop    r15
   2b227:	ret    
   2b228:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002b230 <MSAFree>:
   2b230:	endbr64 
   2b234:	push   rbp
   2b235:	mov    rbp,rdi
   2b238:	mov    esi,DWORD PTR [rdi+0x1c]
   2b23b:	mov    rdi,QWORD PTR [rdi]
   2b23e:	call   368c0 <Free2DArray>
   2b243:	mov    esi,DWORD PTR [rbp+0x1c]
   2b246:	mov    rdi,QWORD PTR [rbp+0x8]
   2b24a:	call   368c0 <Free2DArray>
   2b24f:	mov    esi,DWORD PTR [rbp+0x1c]
   2b252:	mov    rdi,QWORD PTR [rbp+0x60]
   2b256:	call   368c0 <Free2DArray>
   2b25b:	mov    esi,DWORD PTR [rbp+0x1c]
   2b25e:	mov    rdi,QWORD PTR [rbp+0x68]
   2b262:	call   368c0 <Free2DArray>
   2b267:	mov    esi,DWORD PTR [rbp+0x1c]
   2b26a:	mov    rdi,QWORD PTR [rbp+0x70]
   2b26e:	call   368c0 <Free2DArray>
   2b273:	mov    rdi,QWORD PTR [rbp+0x78]
   2b277:	mov    esi,DWORD PTR [rbp+0x1c]
   2b27a:	call   368c0 <Free2DArray>
   2b27f:	mov    rdi,QWORD PTR [rbp+0x148]
   2b286:	test   rdi,rdi
   2b289:	je     2b290 <MSAFree+0x60>
   2b28b:	call   3460 <free@plt>
   2b290:	mov    rdi,QWORD PTR [rbp+0x10]
   2b294:	test   rdi,rdi
   2b297:	je     2b29e <MSAFree+0x6e>
   2b299:	call   3460 <free@plt>
   2b29e:	mov    rdi,QWORD PTR [rbp+0x28]
   2b2a2:	test   rdi,rdi
   2b2a5:	je     2b2ac <MSAFree+0x7c>
   2b2a7:	call   3460 <free@plt>
   2b2ac:	mov    rdi,QWORD PTR [rbp+0x30]
   2b2b0:	test   rdi,rdi
   2b2b3:	je     2b2ba <MSAFree+0x8a>
   2b2b5:	call   3460 <free@plt>
   2b2ba:	mov    rdi,QWORD PTR [rbp+0x38]
   2b2be:	test   rdi,rdi
   2b2c1:	je     2b2c8 <MSAFree+0x98>
   2b2c3:	call   3460 <free@plt>
   2b2c8:	mov    rdi,QWORD PTR [rbp+0x40]
   2b2cc:	test   rdi,rdi
   2b2cf:	je     2b2d6 <MSAFree+0xa6>
   2b2d1:	call   3460 <free@plt>
   2b2d6:	mov    rdi,QWORD PTR [rbp+0x48]
   2b2da:	test   rdi,rdi
   2b2dd:	je     2b2e4 <MSAFree+0xb4>
   2b2df:	call   3460 <free@plt>
   2b2e4:	mov    rdi,QWORD PTR [rbp+0x50]
   2b2e8:	test   rdi,rdi
   2b2eb:	je     2b2f2 <MSAFree+0xc2>
   2b2ed:	call   3460 <free@plt>
   2b2f2:	mov    rdi,QWORD PTR [rbp+0x58]
   2b2f6:	test   rdi,rdi
   2b2f9:	je     2b300 <MSAFree+0xd0>
   2b2fb:	call   3460 <free@plt>
   2b300:	mov    rdi,QWORD PTR [rbp+0x150]
   2b307:	test   rdi,rdi
   2b30a:	je     2b311 <MSAFree+0xe1>
   2b30c:	call   3460 <free@plt>
   2b311:	mov    rdi,QWORD PTR [rbp+0x158]
   2b318:	test   rdi,rdi
   2b31b:	je     2b322 <MSAFree+0xf2>
   2b31d:	call   3460 <free@plt>
   2b322:	mov    esi,DWORD PTR [rbp+0xb8]
   2b328:	mov    rdi,QWORD PTR [rbp+0xb0]
   2b32f:	call   368c0 <Free2DArray>
   2b334:	mov    esi,DWORD PTR [rbp+0xd0]
   2b33a:	mov    rdi,QWORD PTR [rbp+0xc0]
   2b341:	call   368c0 <Free2DArray>
   2b346:	mov    esi,DWORD PTR [rbp+0xd0]
   2b34c:	mov    rdi,QWORD PTR [rbp+0xc8]
   2b353:	call   368c0 <Free2DArray>
   2b358:	mov    esi,DWORD PTR [rbp+0xf0]
   2b35e:	mov    rdi,QWORD PTR [rbp+0xd8]
   2b365:	call   368c0 <Free2DArray>
   2b36a:	mov    edx,DWORD PTR [rbp+0x1c]
   2b36d:	mov    esi,DWORD PTR [rbp+0xf0]
   2b373:	mov    rdi,QWORD PTR [rbp+0xe0]
   2b37a:	call   36910 <Free3DArray>
   2b37f:	mov    esi,DWORD PTR [rbp+0x110]
   2b385:	mov    rdi,QWORD PTR [rbp+0xf8]
   2b38c:	call   368c0 <Free2DArray>
   2b391:	mov    esi,DWORD PTR [rbp+0x110]
   2b397:	mov    rdi,QWORD PTR [rbp+0x100]
   2b39e:	call   368c0 <Free2DArray>
   2b3a3:	mov    esi,DWORD PTR [rbp+0x130]
   2b3a9:	mov    rdi,QWORD PTR [rbp+0x118]
   2b3b0:	call   368c0 <Free2DArray>
   2b3b5:	mov    edx,DWORD PTR [rbp+0x1c]
   2b3b8:	mov    esi,DWORD PTR [rbp+0x130]
   2b3be:	mov    rdi,QWORD PTR [rbp+0x120]
   2b3c5:	call   36910 <Free3DArray>
   2b3ca:	mov    rdi,QWORD PTR [rbp+0x138]
   2b3d1:	call   27fe0 <GKIFree>
   2b3d6:	mov    rdi,QWORD PTR [rbp+0xe8]
   2b3dd:	call   27fe0 <GKIFree>
   2b3e2:	mov    rdi,QWORD PTR [rbp+0x108]
   2b3e9:	call   27fe0 <GKIFree>
   2b3ee:	mov    rdi,QWORD PTR [rbp+0x128]
   2b3f5:	call   27fe0 <GKIFree>
   2b3fa:	mov    rdi,rbp
   2b3fd:	pop    rbp
   2b3fe:	jmp    3460 <free@plt>
   2b403:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b40e:	xchg   ax,ax

000000000002b410 <MSASetSeqAccession>:
   2b410:	endbr64 
   2b414:	push   r12
   2b416:	mov    r12,rdx
   2b419:	push   rbp
   2b41a:	push   rbx
   2b41b:	mov    rax,QWORD PTR [rdi+0x60]
   2b41f:	movsxd rbx,esi
   2b422:	test   rax,rax
   2b425:	je     2b440 <MSASetSeqAccession+0x30>
   2b427:	mov    rdi,r12
   2b42a:	mov    esi,0xffffffff
   2b42f:	lea    rbx,[rax+rbx*8]
   2b433:	call   36ce0 <sre_strdup>
   2b438:	mov    QWORD PTR [rbx],rax
   2b43b:	pop    rbx
   2b43c:	pop    rbp
   2b43d:	pop    r12
   2b43f:	ret    
   2b440:	movsxd rdx,DWORD PTR [rdi+0x140]
   2b447:	mov    rbp,rdi
   2b44a:	mov    esi,0x136
   2b44f:	lea    rdi,[rip+0x15b42]        # 40f98 <gki_primes+0x518>
   2b456:	shl    rdx,0x3
   2b45a:	call   36810 <sre_malloc>
   2b45f:	mov    ecx,DWORD PTR [rbp+0x140]
   2b465:	mov    QWORD PTR [rbp+0x60],rax
   2b469:	test   ecx,ecx
   2b46b:	jle    2b427 <MSASetSeqAccession+0x17>
   2b46d:	sub    ecx,0x1
   2b470:	mov    rdx,rax
   2b473:	lea    rcx,[rax+rcx*8+0x8]
   2b478:	nop    DWORD PTR [rax+rax*1+0x0]
   2b480:	mov    QWORD PTR [rdx],0x0
   2b487:	add    rdx,0x8
   2b48b:	cmp    rdx,rcx
   2b48e:	jne    2b480 <MSASetSeqAccession+0x70>
   2b490:	jmp    2b427 <MSASetSeqAccession+0x17>
   2b492:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b49d:	nop    DWORD PTR [rax]

000000000002b4a0 <MSASetSeqDescription>:
   2b4a0:	endbr64 
   2b4a4:	push   r12
   2b4a6:	mov    r12,rdx
   2b4a9:	push   rbp
   2b4aa:	push   rbx
   2b4ab:	mov    rax,QWORD PTR [rdi+0x68]
   2b4af:	movsxd rbx,esi
   2b4b2:	test   rax,rax
   2b4b5:	je     2b4d0 <MSASetSeqDescription+0x30>
   2b4b7:	mov    rdi,r12
   2b4ba:	mov    esi,0xffffffff
   2b4bf:	lea    rbx,[rax+rbx*8]
   2b4c3:	call   36ce0 <sre_strdup>
   2b4c8:	mov    QWORD PTR [rbx],rax
   2b4cb:	pop    rbx
   2b4cc:	pop    rbp
   2b4cd:	pop    r12
   2b4cf:	ret    
   2b4d0:	movsxd rdx,DWORD PTR [rdi+0x140]
   2b4d7:	mov    rbp,rdi
   2b4da:	mov    esi,0x14f
   2b4df:	lea    rdi,[rip+0x15ab2]        # 40f98 <gki_primes+0x518>
   2b4e6:	shl    rdx,0x3
   2b4ea:	call   36810 <sre_malloc>
   2b4ef:	mov    ecx,DWORD PTR [rbp+0x140]
   2b4f5:	mov    QWORD PTR [rbp+0x68],rax
   2b4f9:	test   ecx,ecx
   2b4fb:	jle    2b4b7 <MSASetSeqDescription+0x17>
   2b4fd:	sub    ecx,0x1
   2b500:	mov    rdx,rax
   2b503:	lea    rcx,[rax+rcx*8+0x8]
   2b508:	nop    DWORD PTR [rax+rax*1+0x0]
   2b510:	mov    QWORD PTR [rdx],0x0
   2b517:	add    rdx,0x8
   2b51b:	cmp    rdx,rcx
   2b51e:	jne    2b510 <MSASetSeqDescription+0x70>
   2b520:	jmp    2b4b7 <MSASetSeqDescription+0x17>
   2b522:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b52d:	nop    DWORD PTR [rax]

000000000002b530 <MSAAddComment>:
   2b530:	endbr64 
   2b534:	push   r12
   2b536:	push   rbp
   2b537:	mov    rbp,rsi
   2b53a:	push   rbx
   2b53b:	mov    rdx,QWORD PTR [rdi+0xb0]
   2b542:	mov    rbx,rdi
   2b545:	test   rdx,rdx
   2b548:	je     2b5c0 <MSAAddComment+0x90>
   2b54a:	mov    eax,DWORD PTR [rdi+0xbc]
   2b550:	movsxd rcx,DWORD PTR [rbx+0xb8]
   2b557:	cmp    ecx,eax
   2b559:	je     2b580 <MSAAddComment+0x50>
   2b55b:	mov    rdi,rbp
   2b55e:	mov    esi,0xffffffff
   2b563:	lea    r12,[rdx+rcx*8]
   2b567:	call   36ce0 <sre_strdup>
   2b56c:	mov    QWORD PTR [r12],rax
   2b570:	add    DWORD PTR [rbx+0xb8],0x1
   2b577:	pop    rbx
   2b578:	pop    rbp
   2b579:	pop    r12
   2b57b:	ret    
   2b57c:	nop    DWORD PTR [rax+0x0]
   2b580:	add    eax,0xa
   2b583:	mov    esi,0x16f
   2b588:	lea    rdi,[rip+0x15a09]        # 40f98 <gki_primes+0x518>
   2b58f:	mov    DWORD PTR [rbx+0xbc],eax
   2b595:	cdqe   
   2b597:	lea    rcx,[rax*8+0x0]
   2b59f:	call   36860 <sre_realloc>
   2b5a4:	movsxd rcx,DWORD PTR [rbx+0xb8]
   2b5ab:	mov    QWORD PTR [rbx+0xb0],rax
   2b5b2:	mov    rdx,rax
   2b5b5:	jmp    2b55b <MSAAddComment+0x2b>
   2b5b7:	nop    WORD PTR [rax+rax*1+0x0]
   2b5c0:	mov    edx,0x50
   2b5c5:	mov    esi,0x16a
   2b5ca:	lea    rdi,[rip+0x159c7]        # 40f98 <gki_primes+0x518>
   2b5d1:	call   36810 <sre_malloc>
   2b5d6:	mov    DWORD PTR [rbx+0xbc],0xa
   2b5e0:	mov    QWORD PTR [rbx+0xb0],rax
   2b5e7:	mov    rdx,rax
   2b5ea:	mov    eax,0xa
   2b5ef:	jmp    2b550 <MSAAddComment+0x20>
   2b5f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b5ff:	nop

000000000002b600 <MSAAddGF>:
   2b600:	endbr64 
   2b604:	push   r13
   2b606:	push   r12
   2b608:	mov    r12,rsi
   2b60b:	push   rbp
   2b60c:	mov    rbp,rdx
   2b60f:	push   rbx
   2b610:	mov    rbx,rdi
   2b613:	sub    rsp,0x8
   2b617:	mov    r8,QWORD PTR [rdi+0xc0]
   2b61e:	test   r8,r8
   2b621:	je     2b6f8 <MSAAddGF+0xf8>
   2b627:	mov    edx,DWORD PTR [rdi+0xd4]
   2b62d:	movsxd rax,DWORD PTR [rbx+0xd0]
   2b634:	cmp    eax,edx
   2b636:	je     2b688 <MSAAddGF+0x88>
   2b638:	mov    rdi,r12
   2b63b:	mov    esi,0xffffffff
   2b640:	lea    r13,[r8+rax*8]
   2b644:	call   36ce0 <sre_strdup>
   2b649:	movsxd rdx,DWORD PTR [rbx+0xd0]
   2b650:	mov    rdi,rbp
   2b653:	mov    esi,0xffffffff
   2b658:	mov    QWORD PTR [r13+0x0],rax
   2b65c:	mov    rax,QWORD PTR [rbx+0xc8]
   2b663:	lea    r12,[rax+rdx*8]
   2b667:	call   36ce0 <sre_strdup>
   2b66c:	mov    QWORD PTR [r12],rax
   2b670:	add    DWORD PTR [rbx+0xd0],0x1
   2b677:	add    rsp,0x8
   2b67b:	pop    rbx
   2b67c:	pop    rbp
   2b67d:	pop    r12
   2b67f:	pop    r13
   2b681:	ret    
   2b682:	nop    WORD PTR [rax+rax*1+0x0]
   2b688:	add    edx,0xa
   2b68b:	mov    esi,0x191
   2b690:	lea    rdi,[rip+0x15901]        # 40f98 <gki_primes+0x518>
   2b697:	mov    DWORD PTR [rbx+0xd4],edx
   2b69d:	movsxd rdx,edx
   2b6a0:	lea    rcx,[rdx*8+0x0]
   2b6a8:	mov    rdx,r8
   2b6ab:	call   36860 <sre_realloc>
   2b6b0:	movsxd rcx,DWORD PTR [rbx+0xd4]
   2b6b7:	mov    rdx,QWORD PTR [rbx+0xc8]
   2b6be:	mov    esi,0x192
   2b6c3:	mov    QWORD PTR [rbx+0xc0],rax
   2b6ca:	lea    rdi,[rip+0x158c7]        # 40f98 <gki_primes+0x518>
   2b6d1:	shl    rcx,0x3
   2b6d5:	call   36860 <sre_realloc>
   2b6da:	mov    r8,QWORD PTR [rbx+0xc0]
   2b6e1:	mov    QWORD PTR [rbx+0xc8],rax
   2b6e8:	movsxd rax,DWORD PTR [rbx+0xd0]
   2b6ef:	jmp    2b638 <MSAAddGF+0x38>
   2b6f4:	nop    DWORD PTR [rax+0x0]
   2b6f8:	mov    edx,0x50
   2b6fd:	mov    esi,0x18b
   2b702:	lea    rdi,[rip+0x1588f]        # 40f98 <gki_primes+0x518>
   2b709:	call   36810 <sre_malloc>
   2b70e:	mov    edx,0x50
   2b713:	mov    esi,0x18c
   2b718:	lea    rdi,[rip+0x15879]        # 40f98 <gki_primes+0x518>
   2b71f:	mov    QWORD PTR [rbx+0xc0],rax
   2b726:	call   36810 <sre_malloc>
   2b72b:	mov    r8,QWORD PTR [rbx+0xc0]
   2b732:	mov    edx,0xa
   2b737:	mov    DWORD PTR [rbx+0xd4],0xa
   2b741:	mov    QWORD PTR [rbx+0xc8],rax
   2b748:	jmp    2b62d <MSAAddGF+0x2d>
   2b74d:	nop    DWORD PTR [rax]

000000000002b750 <MSAAddGS>:
   2b750:	endbr64 
   2b754:	push   r15
   2b756:	push   r14
   2b758:	mov    r14,rsi
   2b75b:	push   r13
   2b75d:	push   r12
   2b75f:	mov    r12,rcx
   2b762:	push   rbp
   2b763:	movsxd rbp,edx
   2b766:	push   rbx
   2b767:	mov    rbx,rdi
   2b76a:	sub    rsp,0x8
   2b76e:	cmp    QWORD PTR [rdi+0xd8],0x0
   2b776:	je     2b828 <MSAAddGS+0xd8>
   2b77c:	mov    rdi,QWORD PTR [rdi+0xe8]
   2b783:	call   28280 <GKIKeyIndex>
   2b788:	mov    r13d,eax
   2b78b:	test   eax,eax
   2b78d:	js     2b930 <MSAAddGS+0x1e0>
   2b793:	mov    edx,DWORD PTR [rbx+0xf0]
   2b799:	movsxd r15,r13d
   2b79c:	lea    rax,[r15*8+0x0]
   2b7a4:	cmp    r13d,edx
   2b7a7:	je     2b900 <MSAAddGS+0x1b0>
   2b7ad:	mov    rax,QWORD PTR [rbx+0xe0]
   2b7b4:	shl    rbp,0x3
   2b7b8:	mov    r13,QWORD PTR [rax+r15*8]
   2b7bc:	add    r13,rbp
   2b7bf:	cmp    QWORD PTR [r13+0x0],0x0
   2b7c4:	je     2b8e0 <MSAAddGS+0x190>
   2b7ca:	mov    rdi,r13
   2b7cd:	mov    ecx,0x1
   2b7d2:	mov    esi,0xffffffff
   2b7d7:	lea    rdx,[rip+0x164f0]        # 41cce <CSWTCH.18+0x60e>
   2b7de:	call   36b70 <sre_strcat>
   2b7e3:	mov    r13d,eax
   2b7e6:	test   eax,eax
   2b7e8:	js     2ba10 <MSAAddGS+0x2c0>
   2b7ee:	mov    rax,QWORD PTR [rbx+0xe0]
   2b7f5:	mov    ecx,0xffffffff
   2b7fa:	mov    rdx,r12
   2b7fd:	mov    esi,r13d
   2b800:	mov    rdi,QWORD PTR [rax+r15*8]
   2b804:	add    rdi,rbp
   2b807:	call   36b70 <sre_strcat>
   2b80c:	test   eax,eax
   2b80e:	js     2ba28 <MSAAddGS+0x2d8>
   2b814:	add    rsp,0x8
   2b818:	pop    rbx
   2b819:	pop    rbp
   2b81a:	pop    r12
   2b81c:	pop    r13
   2b81e:	pop    r14
   2b820:	pop    r15
   2b822:	ret    
   2b823:	nop    DWORD PTR [rax+rax*1+0x0]
   2b828:	call   27fd0 <GKIInit>
   2b82d:	mov    rsi,r14
   2b830:	mov    QWORD PTR [rbx+0xe8],rax
   2b837:	mov    rdi,rax
   2b83a:	call   28080 <GKIStoreKey>
   2b83f:	mov    edx,0x8
   2b844:	mov    esi,0x1bf
   2b849:	lea    rdi,[rip+0x15748]        # 40f98 <gki_primes+0x518>
   2b850:	mov    r13d,eax
   2b853:	call   36810 <sre_malloc>
   2b858:	mov    edx,0x8
   2b85d:	mov    esi,0x1c0
   2b862:	lea    rdi,[rip+0x1572f]        # 40f98 <gki_primes+0x518>
   2b869:	mov    QWORD PTR [rbx+0xd8],rax
   2b870:	call   36810 <sre_malloc>
   2b875:	movsxd rdx,DWORD PTR [rbx+0x140]
   2b87c:	mov    esi,0x1c1
   2b881:	lea    rdi,[rip+0x15710]        # 40f98 <gki_primes+0x518>
   2b888:	mov    QWORD PTR [rbx+0xe0],rax
   2b88f:	mov    r15,rax
   2b892:	shl    rdx,0x3
   2b896:	call   36810 <sre_malloc>
   2b89b:	mov    edx,DWORD PTR [rbx+0x140]
   2b8a1:	mov    QWORD PTR [r15],rax
   2b8a4:	test   edx,edx
   2b8a6:	jle    2b793 <MSAAddGS+0x43>
   2b8ac:	mov    rax,QWORD PTR [rbx+0xe0]
   2b8b3:	lea    ecx,[rdx-0x1]
   2b8b6:	mov    rax,QWORD PTR [rax]
   2b8b9:	lea    rdx,[rax+0x8]
   2b8bd:	lea    rcx,[rdx+rcx*8]
   2b8c1:	jmp    2b8cc <MSAAddGS+0x17c>
   2b8c3:	nop    DWORD PTR [rax+rax*1+0x0]
   2b8c8:	add    rdx,0x8
   2b8cc:	mov    QWORD PTR [rax],0x0
   2b8d3:	mov    rax,rdx
   2b8d6:	cmp    rcx,rdx
   2b8d9:	jne    2b8c8 <MSAAddGS+0x178>
   2b8db:	jmp    2b793 <MSAAddGS+0x43>
   2b8e0:	mov    rdi,r12
   2b8e3:	mov    esi,0xffffffff
   2b8e8:	call   36ce0 <sre_strdup>
   2b8ed:	mov    QWORD PTR [r13+0x0],rax
   2b8f1:	add    rsp,0x8
   2b8f5:	pop    rbx
   2b8f6:	pop    rbp
   2b8f7:	pop    r12
   2b8f9:	pop    r13
   2b8fb:	pop    r14
   2b8fd:	pop    r15
   2b8ff:	ret    
   2b900:	add    rax,QWORD PTR [rbx+0xd8]
   2b907:	mov    esi,0xffffffff
   2b90c:	mov    rdi,r14
   2b90f:	mov    r13,rax
   2b912:	call   36ce0 <sre_strdup>
   2b917:	mov    QWORD PTR [r13+0x0],rax
   2b91b:	add    DWORD PTR [rbx+0xf0],0x1
   2b922:	jmp    2b7ad <MSAAddGS+0x5d>
   2b927:	nop    WORD PTR [rax+rax*1+0x0]
   2b930:	mov    rdi,QWORD PTR [rbx+0xe8]
   2b937:	mov    rsi,r14
   2b93a:	call   28080 <GKIStoreKey>
   2b93f:	mov    rdx,QWORD PTR [rbx+0xd8]
   2b946:	mov    esi,0x1cf
   2b94b:	lea    rdi,[rip+0x15646]        # 40f98 <gki_primes+0x518>
   2b952:	mov    r13d,eax
   2b955:	mov    eax,DWORD PTR [rbx+0xf0]
   2b95b:	lea    ecx,[rax+0x1]
   2b95e:	movsxd rcx,ecx
   2b961:	shl    rcx,0x3
   2b965:	call   36860 <sre_realloc>
   2b96a:	mov    rdx,QWORD PTR [rbx+0xe0]
   2b971:	mov    esi,0x1d0
   2b976:	lea    rdi,[rip+0x1561b]        # 40f98 <gki_primes+0x518>
   2b97d:	mov    QWORD PTR [rbx+0xd8],rax
   2b984:	mov    eax,DWORD PTR [rbx+0xf0]
   2b98a:	lea    ecx,[rax+0x1]
   2b98d:	movsxd rcx,ecx
   2b990:	shl    rcx,0x3
   2b994:	call   36860 <sre_realloc>
   2b999:	movsxd rdx,DWORD PTR [rbx+0xf0]
   2b9a0:	mov    esi,0x1d1
   2b9a5:	lea    rdi,[rip+0x155ec]        # 40f98 <gki_primes+0x518>
   2b9ac:	mov    QWORD PTR [rbx+0xe0],rax
   2b9b3:	lea    r15,[rax+rdx*8]
   2b9b7:	movsxd rdx,DWORD PTR [rbx+0x140]
   2b9be:	shl    rdx,0x3
   2b9c2:	call   36810 <sre_malloc>
   2b9c7:	mov    ecx,DWORD PTR [rbx+0x140]
   2b9cd:	mov    QWORD PTR [r15],rax
   2b9d0:	test   ecx,ecx
   2b9d2:	jle    2b793 <MSAAddGS+0x43>
   2b9d8:	movsxd rsi,DWORD PTR [rbx+0xf0]
   2b9df:	mov    rax,QWORD PTR [rbx+0xe0]
   2b9e6:	sub    ecx,0x1
   2b9e9:	mov    rax,QWORD PTR [rax+rsi*8]
   2b9ed:	mov    rdx,rsi
   2b9f0:	lea    rcx,[rax+rcx*8+0x8]
   2b9f5:	nop    DWORD PTR [rax]
   2b9f8:	mov    QWORD PTR [rax],0x0
   2b9ff:	add    rax,0x8
   2ba03:	cmp    rax,rcx
   2ba06:	jne    2b9f8 <MSAAddGS+0x2a8>
   2ba08:	jmp    2b799 <MSAAddGS+0x49>
   2ba0d:	nop    DWORD PTR [rax]
   2ba10:	lea    rdi,[rip+0x15587]        # 40f9e <gki_primes+0x51e>
   2ba17:	xor    eax,eax
   2ba19:	call   317f0 <Die>
   2ba1e:	jmp    2b7ee <MSAAddGS+0x9e>
   2ba23:	nop    DWORD PTR [rax+rax*1+0x0]
   2ba28:	add    rsp,0x8
   2ba2c:	lea    rdi,[rip+0x1556b]        # 40f9e <gki_primes+0x51e>
   2ba33:	xor    eax,eax
   2ba35:	pop    rbx
   2ba36:	pop    rbp
   2ba37:	pop    r12
   2ba39:	pop    r13
   2ba3b:	pop    r14
   2ba3d:	pop    r15
   2ba3f:	jmp    317f0 <Die>
   2ba44:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2ba4f:	nop

000000000002ba50 <MSAAppendGC>:
   2ba50:	endbr64 
   2ba54:	push   r14
   2ba56:	mov    r14,rsi
   2ba59:	push   r13
   2ba5b:	mov    r13,rdx
   2ba5e:	push   r12
   2ba60:	push   rbp
   2ba61:	push   rbx
   2ba62:	cmp    QWORD PTR [rdi+0xf8],0x0
   2ba6a:	mov    rbx,rdi
   2ba6d:	je     2bac0 <MSAAppendGC+0x70>
   2ba6f:	mov    rdi,QWORD PTR [rdi+0x108]
   2ba76:	call   28280 <GKIKeyIndex>
   2ba7b:	mov    ebp,eax
   2ba7d:	test   eax,eax
   2ba7f:	js     2bb60 <MSAAppendGC+0x110>
   2ba85:	movsxd r12,eax
   2ba88:	shl    r12,0x3
   2ba8c:	cmp    DWORD PTR [rbx+0x110],ebp
   2ba92:	je     2bb35 <MSAAppendGC+0xe5>
   2ba98:	mov    rdi,QWORD PTR [rbx+0x100]
   2ba9f:	mov    rdx,r13
   2baa2:	pop    rbx
   2baa3:	mov    ecx,0xffffffff
   2baa8:	pop    rbp
   2baa9:	mov    esi,0xffffffff
   2baae:	add    rdi,r12
   2bab1:	pop    r12
   2bab3:	pop    r13
   2bab5:	pop    r14
   2bab7:	jmp    36b70 <sre_strcat>
   2babc:	nop    DWORD PTR [rax+0x0]
   2bac0:	mov    edx,0x8
   2bac5:	mov    esi,0x205
   2baca:	lea    rdi,[rip+0x154c7]        # 40f98 <gki_primes+0x518>
   2bad1:	call   36810 <sre_malloc>
   2bad6:	mov    edx,0x8
   2badb:	mov    esi,0x206
   2bae0:	lea    rdi,[rip+0x154b1]        # 40f98 <gki_primes+0x518>
   2bae7:	mov    QWORD PTR [rbx+0xf8],rax
   2baee:	call   36810 <sre_malloc>
   2baf3:	mov    QWORD PTR [rbx+0x100],rax
   2bafa:	call   27fd0 <GKIInit>
   2baff:	mov    rsi,r14
   2bb02:	mov    QWORD PTR [rbx+0x108],rax
   2bb09:	mov    rdi,rax
   2bb0c:	call   28080 <GKIStoreKey>
   2bb11:	movsxd r12,eax
   2bb14:	mov    rax,QWORD PTR [rbx+0x100]
   2bb1b:	mov    rbp,r12
   2bb1e:	shl    r12,0x3
   2bb22:	mov    QWORD PTR [rax],0x0
   2bb29:	cmp    DWORD PTR [rbx+0x110],ebp
   2bb2f:	jne    2ba98 <MSAAppendGC+0x48>
   2bb35:	mov    rbp,QWORD PTR [rbx+0xf8]
   2bb3c:	mov    esi,0xffffffff
   2bb41:	mov    rdi,r14
   2bb44:	call   36ce0 <sre_strdup>
   2bb49:	add    rbp,r12
   2bb4c:	mov    QWORD PTR [rbp+0x0],rax
   2bb50:	add    DWORD PTR [rbx+0x110],0x1
   2bb57:	jmp    2ba98 <MSAAppendGC+0x48>
   2bb5c:	nop    DWORD PTR [rax+0x0]
   2bb60:	mov    rdi,QWORD PTR [rbx+0x108]
   2bb67:	mov    rsi,r14
   2bb6a:	call   28080 <GKIStoreKey>
   2bb6f:	mov    rdx,QWORD PTR [rbx+0xf8]
   2bb76:	mov    esi,0x215
   2bb7b:	lea    rdi,[rip+0x15416]        # 40f98 <gki_primes+0x518>
   2bb82:	mov    ebp,eax
   2bb84:	mov    eax,DWORD PTR [rbx+0x110]
   2bb8a:	lea    ecx,[rax+0x1]
   2bb8d:	movsxd rcx,ecx
   2bb90:	shl    rcx,0x3
   2bb94:	call   36860 <sre_realloc>
   2bb99:	mov    rdx,QWORD PTR [rbx+0x100]
   2bba0:	mov    esi,0x216
   2bba5:	lea    rdi,[rip+0x153ec]        # 40f98 <gki_primes+0x518>
   2bbac:	mov    QWORD PTR [rbx+0xf8],rax
   2bbb3:	mov    eax,DWORD PTR [rbx+0x110]
   2bbb9:	lea    ecx,[rax+0x1]
   2bbbc:	movsxd rcx,ecx
   2bbbf:	shl    rcx,0x3
   2bbc3:	call   36860 <sre_realloc>
   2bbc8:	movsxd rdx,ebp
   2bbcb:	mov    QWORD PTR [rbx+0x100],rax
   2bbd2:	lea    r12,[rdx*8+0x0]
   2bbda:	mov    QWORD PTR [rax+rdx*8],0x0
   2bbe2:	jmp    2ba8c <MSAAppendGC+0x3c>
   2bbe7:	nop    WORD PTR [rax+rax*1+0x0]

000000000002bbf0 <MSAGetGC>:
   2bbf0:	endbr64 
   2bbf4:	push   rbx
   2bbf5:	mov    rbx,rdi
   2bbf8:	mov    rdi,QWORD PTR [rdi+0x108]
   2bbff:	test   rdi,rdi
   2bc02:	je     2bc20 <MSAGetGC+0x30>
   2bc04:	call   28280 <GKIKeyIndex>
   2bc09:	test   eax,eax
   2bc0b:	js     2bc20 <MSAGetGC+0x30>
   2bc0d:	mov    rdx,QWORD PTR [rbx+0x100]
   2bc14:	cdqe   
   2bc16:	pop    rbx
   2bc17:	mov    rax,QWORD PTR [rdx+rax*8]
   2bc1b:	ret    
   2bc1c:	nop    DWORD PTR [rax+0x0]
   2bc20:	xor    eax,eax
   2bc22:	pop    rbx
   2bc23:	ret    
   2bc24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2bc2f:	nop

000000000002bc30 <MSAAppendGR>:
   2bc30:	endbr64 
   2bc34:	push   r15
   2bc36:	push   r14
   2bc38:	mov    r14,rcx
   2bc3b:	push   r13
   2bc3d:	mov    r13,rsi
   2bc40:	push   r12
   2bc42:	movsxd r12,edx
   2bc45:	push   rbp
   2bc46:	push   rbx
   2bc47:	mov    rbx,rdi
   2bc4a:	sub    rsp,0x8
   2bc4e:	cmp    QWORD PTR [rdi+0x118],0x0
   2bc56:	je     2bcc0 <MSAAppendGR+0x90>
   2bc58:	mov    rdi,QWORD PTR [rdi+0x128]
   2bc5f:	call   28280 <GKIKeyIndex>
   2bc64:	mov    ebp,eax
   2bc66:	test   eax,eax
   2bc68:	js     2bdb0 <MSAAppendGR+0x180>
   2bc6e:	mov    edx,DWORD PTR [rbx+0x130]
   2bc74:	movsxd r15,ebp
   2bc77:	lea    rax,[r15*8+0x0]
   2bc7f:	cmp    ebp,edx
   2bc81:	je     2bd85 <MSAAppendGR+0x155>
   2bc87:	mov    rax,QWORD PTR [rbx+0x120]
   2bc8e:	mov    rdx,r14
   2bc91:	mov    ecx,0xffffffff
   2bc96:	mov    esi,0xffffffff
   2bc9b:	mov    rax,QWORD PTR [rax+r15*8]
   2bc9f:	add    rsp,0x8
   2bca3:	pop    rbx
   2bca4:	pop    rbp
   2bca5:	lea    rdi,[rax+r12*8]
   2bca9:	pop    r12
   2bcab:	pop    r13
   2bcad:	pop    r14
   2bcaf:	pop    r15
   2bcb1:	jmp    36b70 <sre_strcat>
   2bcb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2bcc0:	mov    edx,0x8
   2bcc5:	mov    esi,0x259
   2bcca:	lea    rdi,[rip+0x152c7]        # 40f98 <gki_primes+0x518>
   2bcd1:	call   36810 <sre_malloc>
   2bcd6:	mov    edx,0x8
   2bcdb:	mov    esi,0x25a
   2bce0:	lea    rdi,[rip+0x152b1]        # 40f98 <gki_primes+0x518>
   2bce7:	mov    QWORD PTR [rbx+0x118],rax
   2bcee:	call   36810 <sre_malloc>
   2bcf3:	movsxd rdx,DWORD PTR [rbx+0x140]
   2bcfa:	mov    esi,0x25b
   2bcff:	lea    rdi,[rip+0x15292]        # 40f98 <gki_primes+0x518>
   2bd06:	mov    QWORD PTR [rbx+0x120],rax
   2bd0d:	mov    rbp,rax
   2bd10:	shl    rdx,0x3
   2bd14:	call   36810 <sre_malloc>
   2bd19:	mov    QWORD PTR [rbp+0x0],rax
   2bd1d:	mov    eax,DWORD PTR [rbx+0x140]
   2bd23:	test   eax,eax
   2bd25:	jle    2bd53 <MSAAppendGR+0x123>
   2bd27:	mov    rdx,QWORD PTR [rbx+0x120]
   2bd2e:	lea    ecx,[rax-0x1]
   2bd31:	mov    rdx,QWORD PTR [rdx]
   2bd34:	lea    rax,[rdx+0x8]
   2bd38:	lea    rcx,[rax+rcx*8]
   2bd3c:	jmp    2bd44 <MSAAppendGR+0x114>
   2bd3e:	xchg   ax,ax
   2bd40:	add    rax,0x8
   2bd44:	mov    QWORD PTR [rdx],0x0
   2bd4b:	mov    rdx,rax
   2bd4e:	cmp    rcx,rax
   2bd51:	jne    2bd40 <MSAAppendGR+0x110>
   2bd53:	call   27fd0 <GKIInit>
   2bd58:	mov    rsi,r13
   2bd5b:	mov    QWORD PTR [rbx+0x128],rax
   2bd62:	mov    rdi,rax
   2bd65:	call   28080 <GKIStoreKey>
   2bd6a:	mov    edx,DWORD PTR [rbx+0x130]
   2bd70:	mov    ebp,eax
   2bd72:	movsxd r15,ebp
   2bd75:	lea    rax,[r15*8+0x0]
   2bd7d:	cmp    ebp,edx
   2bd7f:	jne    2bc87 <MSAAppendGR+0x57>
   2bd85:	add    rax,QWORD PTR [rbx+0x118]
   2bd8c:	mov    esi,0xffffffff
   2bd91:	mov    rdi,r13
   2bd94:	mov    rbp,rax
   2bd97:	call   36ce0 <sre_strdup>
   2bd9c:	mov    QWORD PTR [rbp+0x0],rax
   2bda0:	add    DWORD PTR [rbx+0x130],0x1
   2bda7:	jmp    2bc87 <MSAAppendGR+0x57>
   2bdac:	nop    DWORD PTR [rax+0x0]
   2bdb0:	mov    rdi,QWORD PTR [rbx+0x128]
   2bdb7:	mov    rsi,r13
   2bdba:	call   28080 <GKIStoreKey>
   2bdbf:	mov    rdx,QWORD PTR [rbx+0x118]
   2bdc6:	mov    esi,0x26c
   2bdcb:	lea    rdi,[rip+0x151c6]        # 40f98 <gki_primes+0x518>
   2bdd2:	mov    ebp,eax
   2bdd4:	mov    eax,DWORD PTR [rbx+0x130]
   2bdda:	lea    ecx,[rax+0x1]
   2bddd:	movsxd rcx,ecx
   2bde0:	shl    rcx,0x3
   2bde4:	call   36860 <sre_realloc>
   2bde9:	mov    rdx,QWORD PTR [rbx+0x120]
   2bdf0:	mov    esi,0x26d
   2bdf5:	lea    rdi,[rip+0x1519c]        # 40f98 <gki_primes+0x518>
   2bdfc:	mov    QWORD PTR [rbx+0x118],rax
   2be03:	mov    eax,DWORD PTR [rbx+0x130]
   2be09:	lea    ecx,[rax+0x1]
   2be0c:	movsxd rcx,ecx
   2be0f:	shl    rcx,0x3
   2be13:	call   36860 <sre_realloc>
   2be18:	movsxd rdx,DWORD PTR [rbx+0x130]
   2be1f:	mov    esi,0x26e
   2be24:	lea    rdi,[rip+0x1516d]        # 40f98 <gki_primes+0x518>
   2be2b:	mov    QWORD PTR [rbx+0x120],rax
   2be32:	lea    r15,[rax+rdx*8]
   2be36:	movsxd rdx,DWORD PTR [rbx+0x140]
   2be3d:	shl    rdx,0x3
   2be41:	call   36810 <sre_malloc>
   2be46:	mov    ecx,DWORD PTR [rbx+0x140]
   2be4c:	mov    QWORD PTR [r15],rax
   2be4f:	test   ecx,ecx
   2be51:	jle    2bc6e <MSAAppendGR+0x3e>
   2be57:	movsxd rsi,DWORD PTR [rbx+0x130]
   2be5e:	mov    rax,QWORD PTR [rbx+0x120]
   2be65:	sub    ecx,0x1
   2be68:	mov    rax,QWORD PTR [rax+rsi*8]
   2be6c:	mov    rdx,rsi
   2be6f:	lea    rcx,[rax+rcx*8+0x8]
   2be74:	nop    DWORD PTR [rax+0x0]
   2be78:	mov    QWORD PTR [rax],0x0
   2be7f:	add    rax,0x8
   2be83:	cmp    rax,rcx
   2be86:	jne    2be78 <MSAAppendGR+0x248>
   2be88:	jmp    2bc74 <MSAAppendGR+0x44>
   2be8d:	nop    DWORD PTR [rax]

000000000002be90 <MSAVerifyParse>:
   2be90:	endbr64 
   2be94:	push   r14
   2be96:	push   r13
   2be98:	push   r12
   2be9a:	push   rbp
   2be9b:	push   rbx
   2be9c:	mov    eax,DWORD PTR [rdi+0x1c]
   2be9f:	mov    rbx,rdi
   2bea2:	test   eax,eax
   2bea4:	jne    2bec9 <MSAVerifyParse+0x39>
   2bea6:	mov    rsi,QWORD PTR [rdi+0x28]
   2beaa:	lea    rax,[rip+0x1557f]        # 41430 <gki_primes+0x9b0>
   2beb1:	lea    rdi,[rip+0x15108]        # 40fc0 <gki_primes+0x540>
   2beb8:	test   rsi,rsi
   2bebb:	cmove  rsi,rax
   2bebf:	xor    eax,eax
   2bec1:	call   317f0 <Die>
   2bec6:	mov    eax,DWORD PTR [rbx+0x1c]
   2bec9:	mov    rdx,QWORD PTR [rbx+0x148]
   2bed0:	xor    ebp,ebp
   2bed2:	lea    r14,[rip+0x15557]        # 41430 <gki_primes+0x9b0>
   2bed9:	mov    edx,DWORD PTR [rdx]
   2bedb:	mov    DWORD PTR [rbx+0x18],edx
   2bede:	test   eax,eax
   2bee0:	jg     2bff6 <MSAVerifyParse+0x166>
   2bee6:	jmp    2c038 <MSAVerifyParse+0x1a8>
   2beeb:	nop    DWORD PTR [rax+rax*1+0x0]
   2bef0:	lea    r13,[rbp*4+0x0]
   2bef8:	test   BYTE PTR [rbx+0x20],0x1
   2befc:	je     2bf34 <MSAVerifyParse+0xa4>
   2befe:	mov    rax,QWORD PTR [rbx+0x10]
   2bf02:	movss  xmm1,DWORD PTR [rip+0x14612]        # 4051c <defmq.7318+0x35c>
   2bf0a:	ucomiss xmm1,DWORD PTR [rax+r13*1]
   2bf0f:	jp     2bf34 <MSAVerifyParse+0xa4>
   2bf11:	jne    2bf34 <MSAVerifyParse+0xa4>
   2bf13:	mov    rdx,QWORD PTR [rbx+0x28]
   2bf17:	mov    rax,QWORD PTR [rbx+0x8]
   2bf1b:	lea    rdi,[rip+0x15106]        # 41028 <gki_primes+0x5a8>
   2bf22:	test   rdx,rdx
   2bf25:	mov    rsi,QWORD PTR [rax+r12*1]
   2bf29:	cmove  rdx,r14
   2bf2d:	xor    eax,eax
   2bf2f:	call   317f0 <Die>
   2bf34:	mov    rax,QWORD PTR [rbx+0x148]
   2bf3b:	mov    ecx,DWORD PTR [rbx+0x18]
   2bf3e:	mov    edx,DWORD PTR [rax+r13*1]
   2bf42:	cmp    edx,ecx
   2bf44:	je     2bf67 <MSAVerifyParse+0xd7>
   2bf46:	mov    r8,QWORD PTR [rbx+0x28]
   2bf4a:	mov    rax,QWORD PTR [rbx+0x8]
   2bf4e:	lea    rdi,[rip+0x15123]        # 41078 <gki_primes+0x5f8>
   2bf55:	test   r8,r8
   2bf58:	mov    rsi,QWORD PTR [rax+r12*1]
   2bf5c:	cmove  r8,r14
   2bf60:	xor    eax,eax
   2bf62:	call   317f0 <Die>
   2bf67:	mov    rax,QWORD PTR [rbx+0x70]
   2bf6b:	test   rax,rax
   2bf6e:	je     2bfaa <MSAVerifyParse+0x11a>
   2bf70:	cmp    QWORD PTR [rax+r12*1],0x0
   2bf75:	je     2bfaa <MSAVerifyParse+0x11a>
   2bf77:	mov    rax,QWORD PTR [rbx+0x150]
   2bf7e:	mov    ecx,DWORD PTR [rbx+0x18]
   2bf81:	mov    edx,DWORD PTR [rax+r13*1]
   2bf85:	cmp    edx,ecx
   2bf87:	je     2bfaa <MSAVerifyParse+0x11a>
   2bf89:	mov    r8,QWORD PTR [rbx+0x28]
   2bf8d:	mov    rax,QWORD PTR [rbx+0x8]
   2bf91:	lea    rdi,[rip+0x15128]        # 410c0 <gki_primes+0x640>
   2bf98:	test   r8,r8
   2bf9b:	mov    rsi,QWORD PTR [rax+r12*1]
   2bf9f:	cmove  r8,r14
   2bfa3:	xor    eax,eax
   2bfa5:	call   317f0 <Die>
   2bfaa:	mov    rax,QWORD PTR [rbx+0x78]
   2bfae:	test   rax,rax
   2bfb1:	je     2bfed <MSAVerifyParse+0x15d>
   2bfb3:	cmp    QWORD PTR [rax+r12*1],0x0
   2bfb8:	je     2bfed <MSAVerifyParse+0x15d>
   2bfba:	mov    rax,QWORD PTR [rbx+0x158]
   2bfc1:	mov    ecx,DWORD PTR [rbx+0x18]
   2bfc4:	mov    edx,DWORD PTR [rax+r13*1]
   2bfc8:	cmp    edx,ecx
   2bfca:	je     2bfed <MSAVerifyParse+0x15d>
   2bfcc:	mov    r8,QWORD PTR [rbx+0x28]
   2bfd0:	mov    rax,QWORD PTR [rbx+0x8]
   2bfd4:	lea    rdi,[rip+0x15135]        # 41110 <gki_primes+0x690>
   2bfdb:	test   r8,r8
   2bfde:	mov    rsi,QWORD PTR [rax+r12*1]
   2bfe2:	cmove  r8,r14
   2bfe6:	xor    eax,eax
   2bfe8:	call   317f0 <Die>
   2bfed:	add    rbp,0x1
   2bff1:	cmp    DWORD PTR [rbx+0x1c],ebp
   2bff4:	jle    2c038 <MSAVerifyParse+0x1a8>
   2bff6:	mov    rax,QWORD PTR [rbx]
   2bff9:	lea    r12,[rbp*8+0x0]
   2c001:	cmp    QWORD PTR [rax+rbp*8],0x0
   2c006:	jne    2bef0 <MSAVerifyParse+0x60>
   2c00c:	mov    rdx,QWORD PTR [rbx+0x28]
   2c010:	mov    rax,QWORD PTR [rbx+0x8]
   2c014:	lea    rdi,[rip+0x14fdd]        # 40ff8 <gki_primes+0x578>
   2c01b:	test   rdx,rdx
   2c01e:	mov    rsi,QWORD PTR [rax+rbp*8]
   2c022:	cmove  rdx,r14
   2c026:	xor    eax,eax
   2c028:	call   317f0 <Die>
   2c02d:	jmp    2bef0 <MSAVerifyParse+0x60>
   2c032:	nop    WORD PTR [rax+rax*1+0x0]
   2c038:	mov    rdi,QWORD PTR [rbx+0x48]
   2c03c:	test   rdi,rdi
   2c03f:	je     2c075 <MSAVerifyParse+0x1e5>
   2c041:	call   3560 <strlen@plt>
   2c046:	mov    rsi,rax
   2c049:	movsxd rax,DWORD PTR [rbx+0x18]
   2c04d:	mov    rdx,rax
   2c050:	cmp    rsi,rax
   2c053:	je     2c075 <MSAVerifyParse+0x1e5>
   2c055:	mov    rcx,QWORD PTR [rbx+0x28]
   2c059:	lea    rax,[rip+0x153d0]        # 41430 <gki_primes+0x9b0>
   2c060:	lea    rdi,[rip+0x150f9]        # 41160 <gki_primes+0x6e0>
   2c067:	test   rcx,rcx
   2c06a:	cmove  rcx,rax
   2c06e:	xor    eax,eax
   2c070:	call   317f0 <Die>
   2c075:	mov    rdi,QWORD PTR [rbx+0x50]
   2c079:	test   rdi,rdi
   2c07c:	je     2c0b2 <MSAVerifyParse+0x222>
   2c07e:	call   3560 <strlen@plt>
   2c083:	mov    rsi,rax
   2c086:	movsxd rax,DWORD PTR [rbx+0x18]
   2c08a:	mov    rdx,rax
   2c08d:	cmp    rsi,rax
   2c090:	je     2c0b2 <MSAVerifyParse+0x222>
   2c092:	mov    rcx,QWORD PTR [rbx+0x28]
   2c096:	lea    rax,[rip+0x15393]        # 41430 <gki_primes+0x9b0>
   2c09d:	lea    rdi,[rip+0x1510c]        # 411b0 <gki_primes+0x730>
   2c0a4:	test   rcx,rcx
   2c0a7:	cmove  rcx,rax
   2c0ab:	xor    eax,eax
   2c0ad:	call   317f0 <Die>
   2c0b2:	mov    rdi,QWORD PTR [rbx+0x58]
   2c0b6:	test   rdi,rdi
   2c0b9:	je     2c0ef <MSAVerifyParse+0x25f>
   2c0bb:	call   3560 <strlen@plt>
   2c0c0:	mov    rsi,rax
   2c0c3:	movsxd rax,DWORD PTR [rbx+0x18]
   2c0c7:	mov    rdx,rax
   2c0ca:	cmp    rsi,rax
   2c0cd:	je     2c0ef <MSAVerifyParse+0x25f>
   2c0cf:	mov    rcx,QWORD PTR [rbx+0x28]
   2c0d3:	lea    rax,[rip+0x15356]        # 41430 <gki_primes+0x9b0>
   2c0da:	lea    rdi,[rip+0x1511f]        # 41200 <gki_primes+0x780>
   2c0e1:	test   rcx,rcx
   2c0e4:	cmove  rcx,rax
   2c0e8:	xor    eax,eax
   2c0ea:	call   317f0 <Die>
   2c0ef:	test   BYTE PTR [rbx+0x20],0x1
   2c0f3:	je     2c158 <MSAVerifyParse+0x2c8>
   2c0f5:	mov    rdi,QWORD PTR [rbx+0x148]
   2c0fc:	test   rdi,rdi
   2c0ff:	je     2c111 <MSAVerifyParse+0x281>
   2c101:	call   3460 <free@plt>
   2c106:	mov    QWORD PTR [rbx+0x148],0x0
   2c111:	mov    rdi,QWORD PTR [rbx+0x150]
   2c118:	test   rdi,rdi
   2c11b:	je     2c12d <MSAVerifyParse+0x29d>
   2c11d:	call   3460 <free@plt>
   2c122:	mov    QWORD PTR [rbx+0x150],0x0
   2c12d:	mov    rdi,QWORD PTR [rbx+0x158]
   2c134:	test   rdi,rdi
   2c137:	je     2c149 <MSAVerifyParse+0x2b9>
   2c139:	call   3460 <free@plt>
   2c13e:	mov    QWORD PTR [rbx+0x158],0x0
   2c149:	pop    rbx
   2c14a:	pop    rbp
   2c14b:	pop    r12
   2c14d:	pop    r13
   2c14f:	pop    r14
   2c151:	ret    
   2c152:	nop    WORD PTR [rax+rax*1+0x0]
   2c158:	mov    esi,DWORD PTR [rbx+0x1c]
   2c15b:	mov    rdi,QWORD PTR [rbx+0x10]
   2c15f:	movss  xmm0,DWORD PTR [rip+0x11235]        # 3d39c <_IO_stdin_used+0x39c>
   2c167:	call   3ad60 <FSet>
   2c16c:	jmp    2c0f5 <MSAVerifyParse+0x265>
   2c16e:	xchg   ax,ax

000000000002c170 <MSAFileRewind>:
   2c170:	endbr64 
   2c174:	cmp    QWORD PTR [rdi+0x30],0x0
   2c179:	je     2c180 <MSAFileRewind+0x10>
   2c17b:	xor    eax,eax
   2c17d:	ret    
   2c17e:	xchg   ax,ax
   2c180:	sub    rsp,0x8
   2c184:	mov    rdi,QWORD PTR [rdi]
   2c187:	call   35a0 <rewind@plt>
   2c18c:	mov    eax,0x1
   2c191:	add    rsp,0x8
   2c195:	ret    
   2c196:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002c1a0 <MSAFilePositionByKey>:
   2c1a0:	endbr64 
   2c1a4:	push   rbp
   2c1a5:	push   rbx
   2c1a6:	mov    rbx,rdi
   2c1a9:	sub    rsp,0x38
   2c1ad:	mov    rdi,QWORD PTR [rdi+0x28]
   2c1b1:	mov    rax,QWORD PTR fs:0x28
   2c1ba:	mov    QWORD PTR [rsp+0x28],rax
   2c1bf:	xor    eax,eax
   2c1c1:	test   rdi,rdi
   2c1c4:	je     2c1dc <MSAFilePositionByKey+0x3c>
   2c1c6:	lea    rbp,[rsp+0x10]
   2c1cb:	lea    rdx,[rsp+0xc]
   2c1d0:	mov    rcx,rbp
   2c1d3:	call   37900 <SSIGetOffsetByName>
   2c1d8:	test   eax,eax
   2c1da:	je     2c1f8 <MSAFilePositionByKey+0x58>
   2c1dc:	xor    eax,eax
   2c1de:	mov    rcx,QWORD PTR [rsp+0x28]
   2c1e3:	xor    rcx,QWORD PTR fs:0x28
   2c1ec:	jne    2c20d <MSAFilePositionByKey+0x6d>
   2c1ee:	add    rsp,0x38
   2c1f2:	pop    rbx
   2c1f3:	pop    rbp
   2c1f4:	ret    
   2c1f5:	nop    DWORD PTR [rax]
   2c1f8:	mov    rdi,QWORD PTR [rbx]
   2c1fb:	mov    rsi,rbp
   2c1fe:	call   37d30 <SSISetFilePosition>
   2c203:	test   eax,eax
   2c205:	sete   al
   2c208:	movzx  eax,al
   2c20b:	jmp    2c1de <MSAFilePositionByKey+0x3e>
   2c20d:	call   3570 <__stack_chk_fail@plt>
   2c212:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c21d:	nop    DWORD PTR [rax]

000000000002c220 <MSAFilePositionByIndex>:
   2c220:	endbr64 
   2c224:	push   rbp
   2c225:	push   rbx
   2c226:	mov    rbx,rdi
   2c229:	sub    rsp,0x38
   2c22d:	mov    rdi,QWORD PTR [rdi+0x28]
   2c231:	mov    rax,QWORD PTR fs:0x28
   2c23a:	mov    QWORD PTR [rsp+0x28],rax
   2c23f:	xor    eax,eax
   2c241:	test   rdi,rdi
   2c244:	je     2c25c <MSAFilePositionByIndex+0x3c>
   2c246:	lea    rbp,[rsp+0x10]
   2c24b:	lea    rdx,[rsp+0xc]
   2c250:	mov    rcx,rbp
   2c253:	call   37a60 <SSIGetOffsetByNumber>
   2c258:	test   eax,eax
   2c25a:	je     2c278 <MSAFilePositionByIndex+0x58>
   2c25c:	xor    eax,eax
   2c25e:	mov    rcx,QWORD PTR [rsp+0x28]
   2c263:	xor    rcx,QWORD PTR fs:0x28
   2c26c:	jne    2c28d <MSAFilePositionByIndex+0x6d>
   2c26e:	add    rsp,0x38
   2c272:	pop    rbx
   2c273:	pop    rbp
   2c274:	ret    
   2c275:	nop    DWORD PTR [rax]
   2c278:	mov    rdi,QWORD PTR [rbx]
   2c27b:	mov    rsi,rbp
   2c27e:	call   37d30 <SSISetFilePosition>
   2c283:	test   eax,eax
   2c285:	sete   al
   2c288:	movzx  eax,al
   2c28b:	jmp    2c25e <MSAFilePositionByIndex+0x3e>
   2c28d:	call   3570 <__stack_chk_fail@plt>
   2c292:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c29d:	nop    DWORD PTR [rax]

000000000002c2a0 <MSAFileRead>:
   2c2a0:	endbr64 
   2c2a4:	mov    eax,DWORD PTR [rdi+0x38]
   2c2a7:	sub    eax,0x65
   2c2aa:	cmp    eax,0x5
   2c2ad:	ja     2c2ed <MSAFileRead+0x4d>
   2c2af:	lea    rdx,[rip+0x1510a]        # 413c0 <gki_primes+0x940>
   2c2b6:	movsxd rax,DWORD PTR [rdx+rax*4]
   2c2ba:	add    rax,rdx
   2c2bd:	notrack jmp rax
   2c2c0:	jmp    23880 <ReadA2M>
   2c2c5:	nop    DWORD PTR [rax]
   2c2c8:	jmp    2e020 <ReadPhylip>
   2c2cd:	nop    DWORD PTR [rax]
   2c2d0:	jmp    39e20 <ReadStockholm>
   2c2d5:	nop    DWORD PTR [rax]
   2c2d8:	jmp    2ed20 <ReadSELEX>
   2c2dd:	nop    DWORD PTR [rax]
   2c2e0:	jmp    2d400 <ReadMSF>
   2c2e5:	nop    DWORD PTR [rax]
   2c2e8:	jmp    25db0 <ReadClustal>
   2c2ed:	sub    rsp,0x8
   2c2f1:	xor    eax,eax
   2c2f3:	lea    rdi,[rip+0x14f4e]        # 41248 <gki_primes+0x7c8>
   2c2fa:	call   317f0 <Die>
   2c2ff:	xor    eax,eax
   2c301:	add    rsp,0x8
   2c305:	ret    
   2c306:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002c310 <MSAFileClose>:
   2c310:	endbr64 
   2c314:	push   rbp
   2c315:	mov    eax,DWORD PTR [rdi+0x34]
   2c318:	mov    rbp,rdi
   2c31b:	test   eax,eax
   2c31d:	je     2c358 <MSAFileClose+0x48>
   2c31f:	mov    rdi,QWORD PTR [rbp+0x18]
   2c323:	test   rdi,rdi
   2c326:	je     2c32d <MSAFileClose+0x1d>
   2c328:	call   3460 <free@plt>
   2c32d:	mov    rdi,QWORD PTR [rbp+0x28]
   2c331:	test   rdi,rdi
   2c334:	je     2c33b <MSAFileClose+0x2b>
   2c336:	call   37db0 <SSIClose>
   2c33b:	mov    rdi,QWORD PTR [rbp+0x8]
   2c33f:	test   rdi,rdi
   2c342:	je     2c349 <MSAFileClose+0x39>
   2c344:	call   3460 <free@plt>
   2c349:	mov    rdi,rbp
   2c34c:	pop    rbp
   2c34d:	jmp    3460 <free@plt>
   2c352:	nop    WORD PTR [rax+rax*1+0x0]
   2c358:	mov    rdi,QWORD PTR [rdi]
   2c35b:	call   3530 <fclose@plt>
   2c360:	jmp    2c31f <MSAFileClose+0xf>
   2c362:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c36d:	nop    DWORD PTR [rax]

000000000002c370 <MSAFileGetLine>:
   2c370:	endbr64 
   2c374:	push   rbx
   2c375:	mov    rbx,rdi
   2c378:	lea    rsi,[rdi+0x20]
   2c37c:	add    rdi,0x18
   2c380:	mov    rdx,QWORD PTR [rbx]
   2c383:	call   36a50 <sre_fgets>
   2c388:	test   rax,rax
   2c38b:	je     2c395 <MSAFileGetLine+0x25>
   2c38d:	add    DWORD PTR [rbx+0x10],0x1
   2c391:	mov    rax,QWORD PTR [rbx+0x18]
   2c395:	pop    rbx
   2c396:	ret    
   2c397:	nop    WORD PTR [rax+rax*1+0x0]

000000000002c3a0 <MSAFileWrite>:
   2c3a0:	endbr64 
   2c3a4:	lea    eax,[rdx-0x65]
   2c3a7:	cmp    eax,0x5
   2c3aa:	ja     2c3f5 <MSAFileWrite+0x55>
   2c3ac:	lea    rdx,[rip+0x15025]        # 413d8 <gki_primes+0x958>
   2c3b3:	movsxd rax,DWORD PTR [rdx+rax*4]
   2c3b7:	add    rax,rdx
   2c3ba:	notrack jmp rax
   2c3bd:	nop    DWORD PTR [rax]
   2c3c0:	jmp    23a50 <WriteA2M>
   2c3c5:	nop    DWORD PTR [rax]
   2c3c8:	jmp    2e2b0 <WritePhylip>
   2c3cd:	nop    DWORD PTR [rax]
   2c3d0:	test   ecx,ecx
   2c3d2:	je     2c408 <MSAFileWrite+0x68>
   2c3d4:	jmp    3a940 <WriteStockholmOneBlock>
   2c3d9:	nop    DWORD PTR [rax+0x0]
   2c3e0:	jmp    301f0 <WriteSELEX>
   2c3e5:	nop    DWORD PTR [rax]
   2c3e8:	jmp    2d910 <WriteMSF>
   2c3ed:	nop    DWORD PTR [rax]
   2c3f0:	jmp    25f80 <WriteClustal>
   2c3f5:	mov    esi,edx
   2c3f7:	lea    rdi,[rip+0x14e72]        # 41270 <gki_primes+0x7f0>
   2c3fe:	xor    eax,eax
   2c400:	jmp    317f0 <Die>
   2c405:	nop    DWORD PTR [rax]
   2c408:	jmp    3a930 <WriteStockholm>
   2c40d:	nop    DWORD PTR [rax]

000000000002c410 <MSAGetSeqidx>:
   2c410:	endbr64 
   2c414:	push   r13
   2c416:	push   r12
   2c418:	push   rbp
   2c419:	mov    rbp,rsi
   2c41c:	push   rbx
   2c41d:	mov    rbx,rdi
   2c420:	sub    rsp,0x8
   2c424:	test   edx,edx
   2c426:	js     2c430 <MSAGetSeqidx+0x20>
   2c428:	mov    r12d,edx
   2c42b:	cmp    DWORD PTR [rdi+0x1c],edx
   2c42e:	jg     2c458 <MSAGetSeqidx+0x48>
   2c430:	mov    rdi,QWORD PTR [rbx+0x138]
   2c437:	mov    rsi,rbp
   2c43a:	call   28280 <GKIKeyIndex>
   2c43f:	mov    r12d,eax
   2c442:	test   eax,eax
   2c444:	js     2c478 <MSAGetSeqidx+0x68>
   2c446:	add    rsp,0x8
   2c44a:	mov    eax,r12d
   2c44d:	pop    rbx
   2c44e:	pop    rbp
   2c44f:	pop    r12
   2c451:	pop    r13
   2c453:	ret    
   2c454:	nop    DWORD PTR [rax+0x0]
   2c458:	mov    rax,QWORD PTR [rdi+0x8]
   2c45c:	movsxd rdx,edx
   2c45f:	mov    rdi,rbp
   2c462:	mov    rsi,QWORD PTR [rax+rdx*8]
   2c466:	call   3640 <strcmp@plt>
   2c46b:	test   eax,eax
   2c46d:	jne    2c430 <MSAGetSeqidx+0x20>
   2c46f:	jmp    2c446 <MSAGetSeqidx+0x36>
   2c471:	nop    DWORD PTR [rax+0x0]
   2c478:	mov    rdi,QWORD PTR [rbx+0x138]
   2c47f:	mov    rsi,rbp
   2c482:	call   28080 <GKIStoreKey>
   2c487:	mov    r12d,eax
   2c48a:	cmp    DWORD PTR [rbx+0x140],eax
   2c490:	jle    2c4c0 <MSAGetSeqidx+0xb0>
   2c492:	mov    rdx,QWORD PTR [rbx+0x8]
   2c496:	movsxd rax,r12d
   2c499:	mov    rdi,rbp
   2c49c:	mov    esi,0xffffffff
   2c4a1:	lea    r13,[rdx+rax*8]
   2c4a5:	call   36ce0 <sre_strdup>
   2c4aa:	mov    QWORD PTR [r13+0x0],rax
   2c4ae:	mov    eax,r12d
   2c4b1:	add    DWORD PTR [rbx+0x1c],0x1
   2c4b5:	add    rsp,0x8
   2c4b9:	pop    rbx
   2c4ba:	pop    rbp
   2c4bb:	pop    r12
   2c4bd:	pop    r13
   2c4bf:	ret    
   2c4c0:	mov    rdi,rbx
   2c4c3:	call   2ad30 <MSAExpand>
   2c4c8:	jmp    2c492 <MSAGetSeqidx+0x82>
   2c4ca:	nop    WORD PTR [rax+rax*1+0x0]

000000000002c4d0 <MSAFromAINFO>:
   2c4d0:	endbr64 
   2c4d4:	push   r15
   2c4d6:	push   r14
   2c4d8:	mov    r14,rsi
   2c4db:	push   r13
   2c4dd:	mov    r13,rdi
   2c4e0:	push   r12
   2c4e2:	xor    r12d,r12d
   2c4e5:	push   rbp
   2c4e6:	push   rbx
   2c4e7:	xor    ebx,ebx
   2c4e9:	sub    rsp,0x18
   2c4ed:	mov    esi,DWORD PTR [rsi+0x4]
   2c4f0:	mov    edi,DWORD PTR [r14+0x8]
   2c4f4:	call   2aa20 <MSAAlloc>
   2c4f9:	mov    esi,DWORD PTR [r14+0x8]
   2c4fd:	mov    r15,rax
   2c500:	test   esi,esi
   2c502:	jg     2c5b2 <MSAFromAINFO+0xe2>
   2c508:	jmp    2c690 <MSAFromAINFO+0x1c0>
   2c50d:	nop    DWORD PTR [rax]
   2c510:	test   al,0x8
   2c512:	jne    2c66f <MSAFromAINFO+0x19f>
   2c518:	test   ah,0x2
   2c51b:	je     2c55f <MSAFromAINFO+0x8f>
   2c51d:	mov    rcx,QWORD PTR [r15+0x70]
   2c521:	test   rcx,rcx
   2c524:	je     2c7c0 <MSAFromAINFO+0x2f0>
   2c52a:	mov    rax,QWORD PTR [r15]
   2c52d:	mov    rdx,QWORD PTR [rdx+0x158]
   2c534:	add    rcx,rbp
   2c537:	mov    esi,DWORD PTR [r15+0x18]
   2c53b:	mov    rdi,QWORD PTR [rax+rbp*1]
   2c53f:	call   24e10 <MakeAlignedString>
   2c544:	mov    edx,DWORD PTR [r15+0x18]
   2c548:	mov    rax,QWORD PTR [r15+0x150]
   2c54f:	mov    rcx,QWORD PTR [rsp]
   2c553:	mov    DWORD PTR [rax+rcx*1],edx
   2c556:	mov    rdx,QWORD PTR [r14+0x28]
   2c55a:	add    rdx,rbx
   2c55d:	mov    eax,DWORD PTR [rdx]
   2c55f:	test   ah,0x4
   2c562:	je     2c59d <MSAFromAINFO+0xcd>
   2c564:	mov    rcx,QWORD PTR [r15+0x78]
   2c568:	test   rcx,rcx
   2c56b:	je     2c840 <MSAFromAINFO+0x370>
   2c571:	mov    rax,QWORD PTR [r15]
   2c574:	mov    rdx,QWORD PTR [rdx+0x160]
   2c57b:	add    rcx,rbp
   2c57e:	mov    esi,DWORD PTR [r15+0x18]
   2c582:	mov    rdi,QWORD PTR [rax+rbp*1]
   2c586:	call   24e10 <MakeAlignedString>
   2c58b:	mov    edx,DWORD PTR [r15+0x18]
   2c58f:	mov    rax,QWORD PTR [r15+0x158]
   2c596:	mov    rcx,QWORD PTR [rsp]
   2c59a:	mov    DWORD PTR [rax+rcx*1],edx
   2c59d:	add    r12,0x1
   2c5a1:	add    rbx,0x168
   2c5a8:	cmp    DWORD PTR [r14+0x8],r12d
   2c5ac:	jle    2c690 <MSAFromAINFO+0x1c0>
   2c5b2:	mov    rax,QWORD PTR [r15]
   2c5b5:	mov    rsi,QWORD PTR [r13+r12*8+0x0]
   2c5ba:	mov    DWORD PTR [rsp],r12d
   2c5be:	lea    rbp,[r12*8+0x0]
   2c5c6:	mov    rdi,QWORD PTR [rax+r12*8]
   2c5ca:	call   34e0 <strcpy@plt>
   2c5cf:	mov    rdi,QWORD PTR [r14+0x28]
   2c5d3:	mov    rdx,QWORD PTR [r15+0x8]
   2c5d7:	lea    rax,[r12*4+0x0]
   2c5df:	mov    QWORD PTR [rsp],rax
   2c5e3:	mov    rax,QWORD PTR [r14+0x10]
   2c5e7:	mov    esi,0xffffffff
   2c5ec:	add    rdi,rbx
   2c5ef:	add    rdx,rbp
   2c5f2:	movss  xmm0,DWORD PTR [rax+r12*4]
   2c5f8:	mov    rax,QWORD PTR [r15+0x10]
   2c5fc:	add    rdi,0x4
   2c600:	mov    QWORD PTR [rsp+0x8],rdx
   2c605:	movss  DWORD PTR [rax+r12*4],xmm0
   2c60b:	call   36ce0 <sre_strdup>
   2c610:	mov    rdx,QWORD PTR [rsp+0x8]
   2c615:	mov    rdi,QWORD PTR [r15+0x138]
   2c61c:	mov    QWORD PTR [rdx],rax
   2c61f:	mov    edx,DWORD PTR [r15+0x18]
   2c623:	mov    rax,QWORD PTR [r15+0x148]
   2c62a:	mov    DWORD PTR [rax+r12*4],edx
   2c62e:	mov    rax,QWORD PTR [r15+0x8]
   2c632:	mov    rsi,QWORD PTR [rax+r12*8]
   2c636:	call   28080 <GKIStoreKey>
   2c63b:	mov    rdx,QWORD PTR [r14+0x28]
   2c63f:	add    rdx,rbx
   2c642:	mov    eax,DWORD PTR [rdx]
   2c644:	test   al,0x4
   2c646:	je     2c510 <MSAFromAINFO+0x40>
   2c64c:	add    rdx,0x84
   2c653:	mov    esi,r12d
   2c656:	mov    rdi,r15
   2c659:	call   2b410 <MSASetSeqAccession>
   2c65e:	mov    rdx,QWORD PTR [r14+0x28]
   2c662:	add    rdx,rbx
   2c665:	mov    eax,DWORD PTR [rdx]
   2c667:	test   al,0x8
   2c669:	je     2c518 <MSAFromAINFO+0x48>
   2c66f:	add    rdx,0xc4
   2c676:	mov    esi,r12d
   2c679:	mov    rdi,r15
   2c67c:	call   2b4a0 <MSASetSeqDescription>
   2c681:	mov    rdx,QWORD PTR [r14+0x28]
   2c685:	add    rdx,rbx
   2c688:	mov    eax,DWORD PTR [rdx]
   2c68a:	jmp    2c518 <MSAFromAINFO+0x48>
   2c68f:	nop
   2c690:	mov    rdi,QWORD PTR [r14+0x30]
   2c694:	mov    esi,0xffffffff
   2c699:	call   36ce0 <sre_strdup>
   2c69e:	mov    rdi,QWORD PTR [r14+0x38]
   2c6a2:	mov    esi,0xffffffff
   2c6a7:	mov    QWORD PTR [r15+0x28],rax
   2c6ab:	call   36ce0 <sre_strdup>
   2c6b0:	mov    rdi,QWORD PTR [r14+0x40]
   2c6b4:	mov    esi,0xffffffff
   2c6b9:	mov    QWORD PTR [r15+0x30],rax
   2c6bd:	call   36ce0 <sre_strdup>
   2c6c2:	mov    rdi,QWORD PTR [r14+0x48]
   2c6c6:	mov    esi,0xffffffff
   2c6cb:	mov    QWORD PTR [r15+0x38],rax
   2c6cf:	call   36ce0 <sre_strdup>
   2c6d4:	mov    rdi,QWORD PTR [r14+0x18]
   2c6d8:	mov    esi,0xffffffff
   2c6dd:	mov    QWORD PTR [r15+0x40],rax
   2c6e1:	call   36ce0 <sre_strdup>
   2c6e6:	mov    rdi,QWORD PTR [r14+0x20]
   2c6ea:	mov    esi,0xffffffff
   2c6ef:	mov    QWORD PTR [r15+0x48],rax
   2c6f3:	call   36ce0 <sre_strdup>
   2c6f8:	mov    QWORD PTR [r15+0x58],rax
   2c6fc:	mov    eax,DWORD PTR [r14]
   2c6ff:	test   al,0x1
   2c701:	je     2c732 <MSAFromAINFO+0x262>
   2c703:	movabs rbx,0x100000001
   2c70d:	movss  xmm0,DWORD PTR [r14+0x50]
   2c713:	movss  DWORD PTR [r15+0x80],xmm0
   2c71c:	movss  xmm0,DWORD PTR [r14+0x54]
   2c722:	mov    QWORD PTR [r15+0x98],rbx
   2c729:	movss  DWORD PTR [r15+0x84],xmm0
   2c732:	test   al,0x2
   2c734:	je     2c765 <MSAFromAINFO+0x295>
   2c736:	movabs rbx,0x100000001
   2c740:	movss  xmm0,DWORD PTR [r14+0x58]
   2c746:	movss  DWORD PTR [r15+0x90],xmm0
   2c74f:	movss  xmm0,DWORD PTR [r14+0x5c]
   2c755:	mov    QWORD PTR [r15+0xa8],rbx
   2c75c:	movss  DWORD PTR [r15+0x94],xmm0
   2c765:	test   al,0x4
   2c767:	je     2c798 <MSAFromAINFO+0x2c8>
   2c769:	movabs rax,0x100000001
   2c773:	movss  xmm0,DWORD PTR [r14+0x60]
   2c779:	movss  DWORD PTR [r15+0x88],xmm0
   2c782:	movss  xmm0,DWORD PTR [r14+0x64]
   2c788:	mov    QWORD PTR [r15+0xa0],rax
   2c78f:	movss  DWORD PTR [r15+0x8c],xmm0
   2c798:	mov    eax,DWORD PTR [r14+0x8]
   2c79c:	mov    DWORD PTR [r15+0x1c],eax
   2c7a0:	mov    eax,DWORD PTR [r14+0x4]
   2c7a4:	mov    DWORD PTR [r15+0x18],eax
   2c7a8:	add    rsp,0x18
   2c7ac:	mov    rax,r15
   2c7af:	pop    rbx
   2c7b0:	pop    rbp
   2c7b1:	pop    r12
   2c7b3:	pop    r13
   2c7b5:	pop    r14
   2c7b7:	pop    r15
   2c7b9:	ret    
   2c7ba:	nop    WORD PTR [rax+rax*1+0x0]
   2c7c0:	movsxd rdx,DWORD PTR [r15+0x140]
   2c7c7:	mov    esi,0x41f
   2c7cc:	lea    rdi,[rip+0x147c5]        # 40f98 <gki_primes+0x518>
   2c7d3:	shl    rdx,0x3
   2c7d7:	call   36810 <sre_malloc>
   2c7dc:	movsxd rdx,DWORD PTR [r15+0x140]
   2c7e3:	mov    esi,0x420
   2c7e8:	lea    rdi,[rip+0x147a9]        # 40f98 <gki_primes+0x518>
   2c7ef:	mov    QWORD PTR [r15+0x70],rax
   2c7f3:	shl    rdx,0x2
   2c7f7:	call   36810 <sre_malloc>
   2c7fc:	mov    ecx,DWORD PTR [r15+0x140]
   2c803:	mov    QWORD PTR [r15+0x150],rax
   2c80a:	test   ecx,ecx
   2c80c:	mov    rcx,QWORD PTR [r15+0x70]
   2c810:	jle    2c834 <MSAFromAINFO+0x364>
   2c812:	xor    edx,edx
   2c814:	nop    DWORD PTR [rax+0x0]
   2c818:	mov    QWORD PTR [rcx+rdx*8],0x0
   2c820:	mov    DWORD PTR [rax+rdx*4],0x0
   2c827:	add    rdx,0x1
   2c82b:	cmp    DWORD PTR [r15+0x140],edx
   2c832:	jg     2c818 <MSAFromAINFO+0x348>
   2c834:	mov    rdx,QWORD PTR [r14+0x28]
   2c838:	add    rdx,rbx
   2c83b:	jmp    2c52a <MSAFromAINFO+0x5a>
   2c840:	movsxd rdx,DWORD PTR [r15+0x140]
   2c847:	mov    esi,0x42c
   2c84c:	lea    rdi,[rip+0x14745]        # 40f98 <gki_primes+0x518>
   2c853:	shl    rdx,0x3
   2c857:	call   36810 <sre_malloc>
   2c85c:	movsxd rdx,DWORD PTR [r15+0x140]
   2c863:	mov    esi,0x42d
   2c868:	lea    rdi,[rip+0x14729]        # 40f98 <gki_primes+0x518>
   2c86f:	mov    QWORD PTR [r15+0x78],rax
   2c873:	shl    rdx,0x2
   2c877:	call   36810 <sre_malloc>
   2c87c:	mov    edx,DWORD PTR [r15+0x140]
   2c883:	mov    rcx,QWORD PTR [r15+0x78]
   2c887:	mov    QWORD PTR [r15+0x158],rax
   2c88e:	test   edx,edx
   2c890:	jle    2c8b4 <MSAFromAINFO+0x3e4>
   2c892:	xor    edx,edx
   2c894:	nop    DWORD PTR [rax+0x0]
   2c898:	mov    QWORD PTR [rcx+rdx*8],0x0
   2c8a0:	mov    DWORD PTR [rax+rdx*4],0x0
   2c8a7:	add    rdx,0x1
   2c8ab:	cmp    DWORD PTR [r15+0x140],edx
   2c8b2:	jg     2c898 <MSAFromAINFO+0x3c8>
   2c8b4:	mov    rdx,QWORD PTR [r14+0x28]
   2c8b8:	add    rdx,rbx
   2c8bb:	jmp    2c571 <MSAFromAINFO+0xa1>

000000000002c8c0 <MSAFileFormat>:
   2c8c0:	endbr64 
   2c8c4:	push   r12
   2c8c6:	mov    r12d,0x69
   2c8cc:	push   rbx
   2c8cd:	mov    rbx,rdi
   2c8d0:	sub    rsp,0x8
   2c8d4:	mov    rdi,QWORD PTR [rdi]
   2c8d7:	call   33a70 <SeqfileFormat>
   2c8dc:	cmp    eax,0x7
   2c8df:	je     2c909 <MSAFileFormat+0x49>
   2c8e1:	mov    r12d,eax
   2c8e4:	test   eax,eax
   2c8e6:	je     2c909 <MSAFileFormat+0x49>
   2c8e8:	cmp    eax,0x64
   2c8eb:	jg     2c909 <MSAFileFormat+0x49>
   2c8ed:	mov    edi,eax
   2c8ef:	call   35420 <SeqfileFormat2String>
   2c8f4:	mov    rsi,QWORD PTR [rbx+0x8]
   2c8f8:	lea    rdi,[rip+0x149a1]        # 412a0 <gki_primes+0x820>
   2c8ff:	mov    rdx,rax
   2c902:	xor    eax,eax
   2c904:	call   317f0 <Die>
   2c909:	add    rsp,0x8
   2c90d:	mov    eax,r12d
   2c910:	pop    rbx
   2c911:	pop    r12
   2c913:	ret    
   2c914:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c91f:	nop

000000000002c920 <MSAFileOpen>:
   2c920:	endbr64 
   2c924:	push   r14
   2c926:	push   r13
   2c928:	mov    r13,rdx
   2c92b:	mov    edx,0x40
   2c930:	push   r12
   2c932:	push   rbp
   2c933:	mov    rbp,rdi
   2c936:	lea    rdi,[rip+0x1465b]        # 40f98 <gki_primes+0x518>
   2c93d:	push   rbx
   2c93e:	mov    ebx,esi
   2c940:	mov    esi,0x2f8
   2c945:	sub    rsp,0x10
   2c949:	mov    rax,QWORD PTR fs:0x28
   2c952:	mov    QWORD PTR [rsp+0x8],rax
   2c957:	xor    eax,eax
   2c959:	call   36810 <sre_malloc>
   2c95e:	cmp    BYTE PTR [rbp+0x0],0x2d
   2c962:	mov    r12,rax
   2c965:	jne    2ca00 <MSAFileOpen+0xe0>
   2c96b:	cmp    BYTE PTR [rbp+0x1],0x0
   2c96f:	jne    2ca00 <MSAFileOpen+0xe0>
   2c975:	mov    rax,QWORD PTR [rip+0x21994]        # 4e310 <stdin@@GLIBC_2.2.5>
   2c97c:	mov    esi,0xffffffff
   2c981:	lea    rdi,[rip+0x1462d]        # 40fb5 <gki_primes+0x535>
   2c988:	mov    QWORD PTR [r12],rax
   2c98c:	movabs rax,0x100000000
   2c996:	mov    QWORD PTR [r12+0x30],rax
   2c99b:	call   36ce0 <sre_strdup>
   2c9a0:	mov    QWORD PTR [r12+0x28],0x0
   2c9a9:	mov    QWORD PTR [r12+0x8],rax
   2c9ae:	test   ebx,ebx
   2c9b0:	je     2ca9d <MSAFileOpen+0x17d>
   2c9b6:	mov    DWORD PTR [r12+0x38],ebx
   2c9bb:	mov    DWORD PTR [r12+0x10],0x0
   2c9c4:	mov    QWORD PTR [r12+0x18],0x0
   2c9cd:	mov    DWORD PTR [r12+0x20],0x0
   2c9d6:	mov    rax,QWORD PTR [rsp+0x8]
   2c9db:	xor    rax,QWORD PTR fs:0x28
   2c9e4:	jne    2cb78 <MSAFileOpen+0x258>
   2c9ea:	add    rsp,0x10
   2c9ee:	mov    rax,r12
   2c9f1:	pop    rbx
   2c9f2:	pop    rbp
   2c9f3:	pop    r12
   2c9f5:	pop    r13
   2c9f7:	pop    r14
   2c9f9:	ret    
   2c9fa:	nop    WORD PTR [rax+rax*1+0x0]
   2ca00:	lea    rsi,[rip+0x14547]        # 40f4e <gki_primes+0x4ce>
   2ca07:	mov    rdi,rbp
   2ca0a:	call   3750 <fopen@plt>
   2ca0f:	mov    QWORD PTR [r12],rax
   2ca13:	test   rax,rax
   2ca16:	je     2caf0 <MSAFileOpen+0x1d0>
   2ca1c:	mov    rdi,rbp
   2ca1f:	call   3560 <strlen@plt>
   2ca24:	mov    esi,0x326
   2ca29:	lea    rdi,[rip+0x14568]        # 40f98 <gki_primes+0x518>
   2ca30:	lea    rdx,[rax+0x5]
   2ca34:	call   36810 <sre_malloc>
   2ca39:	mov    r8,rbp
   2ca3c:	mov    esi,0x1
   2ca41:	lea    rcx,[rip+0x11513]        # 3df5b <_IO_stdin_used+0xf5b>
   2ca48:	mov    r13,rax
   2ca4b:	mov    rdi,rax
   2ca4e:	mov    rdx,0xffffffffffffffff
   2ca55:	xor    eax,eax
   2ca57:	call   3830 <__sprintf_chk@plt>
   2ca5c:	mov    QWORD PTR [r12+0x30],0x0
   2ca65:	mov    esi,0xffffffff
   2ca6a:	mov    rdi,rbp
   2ca6d:	call   36ce0 <sre_strdup>
   2ca72:	mov    rdi,r13
   2ca75:	lea    rsi,[r12+0x28]
   2ca7a:	mov    QWORD PTR [r12+0x28],0x0
   2ca83:	mov    QWORD PTR [r12+0x8],rax
   2ca88:	call   37500 <SSIOpen>
   2ca8d:	mov    rdi,r13
   2ca90:	call   3460 <free@plt>
   2ca95:	test   ebx,ebx
   2ca97:	jne    2c9b6 <MSAFileOpen+0x96>
   2ca9d:	cmp    DWORD PTR [r12+0x34],0x1
   2caa3:	je     2caae <MSAFileOpen+0x18e>
   2caa5:	mov    eax,DWORD PTR [r12+0x30]
   2caaa:	test   eax,eax
   2caac:	je     2cabc <MSAFileOpen+0x19c>
   2caae:	lea    rdi,[rip+0x1488b]        # 41340 <gki_primes+0x8c0>
   2cab5:	xor    eax,eax
   2cab7:	call   317f0 <Die>
   2cabc:	mov    rdi,r12
   2cabf:	call   2c8c0 <MSAFileFormat>
   2cac4:	mov    ebx,eax
   2cac6:	test   eax,eax
   2cac8:	jne    2c9b6 <MSAFileOpen+0x96>
   2cace:	mov    rsi,QWORD PTR [r12+0x8]
   2cad3:	lea    rdi,[rip+0x148ae]        # 41388 <gki_primes+0x908>
   2cada:	xor    eax,eax
   2cadc:	call   317f0 <Die>
   2cae1:	jmp    2c9b6 <MSAFileOpen+0x96>
   2cae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2caf0:	mov    rdx,rsp
   2caf3:	mov    rsi,r13
   2caf6:	mov    rdi,rbp
   2caf9:	call   27750 <EnvFileOpen>
   2cafe:	mov    QWORD PTR [r12],rax
   2cb02:	test   rax,rax
   2cb05:	je     2cb70 <MSAFileOpen+0x250>
   2cb07:	mov    rdi,QWORD PTR [rsp]
   2cb0b:	mov    rsi,rbp
   2cb0e:	call   275c0 <FileConcat>
   2cb13:	mov    rdi,rax
   2cb16:	mov    r14,rax
   2cb19:	call   3560 <strlen@plt>
   2cb1e:	mov    rdi,rbp
   2cb21:	mov    r13,rax
   2cb24:	call   3560 <strlen@plt>
   2cb29:	mov    esi,0x32d
   2cb2e:	lea    rdi,[rip+0x14463]        # 40f98 <gki_primes+0x518>
   2cb35:	lea    rdx,[r13+rax*1+0x5]
   2cb3a:	call   36810 <sre_malloc>
   2cb3f:	mov    r8,r14
   2cb42:	mov    esi,0x1
   2cb47:	lea    rcx,[rip+0x1140d]        # 3df5b <_IO_stdin_used+0xf5b>
   2cb4e:	mov    rdi,rax
   2cb51:	mov    r13,rax
   2cb54:	mov    rdx,0xffffffffffffffff
   2cb5b:	xor    eax,eax
   2cb5d:	call   3830 <__sprintf_chk@plt>
   2cb62:	mov    rdi,QWORD PTR [rsp]
   2cb66:	call   3460 <free@plt>
   2cb6b:	jmp    2ca5c <MSAFileOpen+0x13c>
   2cb70:	xor    r12d,r12d
   2cb73:	jmp    2c9d6 <MSAFileOpen+0xb6>
   2cb78:	call   3570 <__stack_chk_fail@plt>
   2cb7d:	nop    DWORD PTR [rax]

000000000002cb80 <MSAShorterAlignment>:
   2cb80:	endbr64 
   2cb84:	mov    r8d,DWORD PTR [rdi+0x18]
   2cb88:	mov    eax,DWORD PTR [rdi+0x1c]
   2cb8b:	push   rbx
   2cb8c:	test   r8d,r8d
   2cb8f:	jle    2ccd7 <MSAShorterAlignment+0x157>
   2cb95:	mov    rbx,rsi
   2cb98:	xor    r11d,r11d
   2cb9b:	xor    esi,esi
   2cb9d:	jmp    2cbb1 <MSAShorterAlignment+0x31>
   2cb9f:	nop
   2cba0:	add    r11d,0x1
   2cba4:	add    rsi,0x1
   2cba8:	cmp    DWORD PTR [rdi+0x18],esi
   2cbab:	jle    2ccda <MSAShorterAlignment+0x15a>
   2cbb1:	mov    ecx,DWORD PTR [rbx+rsi*4]
   2cbb4:	test   ecx,ecx
   2cbb6:	je     2cba4 <MSAShorterAlignment+0x24>
   2cbb8:	cmp    r11d,esi
   2cbbb:	je     2cba0 <MSAShorterAlignment+0x20>
   2cbbd:	movsxd r9,r11d
   2cbc0:	xor    r10d,r10d
   2cbc3:	test   eax,eax
   2cbc5:	jle    2cc66 <MSAShorterAlignment+0xe6>
   2cbcb:	nop    DWORD PTR [rax+rax*1+0x0]
   2cbd0:	mov    rax,QWORD PTR [rdi]
   2cbd3:	lea    r8,[r10*8+0x0]
   2cbdb:	mov    rax,QWORD PTR [rax+r10*8]
   2cbdf:	movzx  edx,BYTE PTR [rax+rsi*1]
   2cbe3:	mov    BYTE PTR [rax+r9*1],dl
   2cbe7:	mov    rax,QWORD PTR [rdi+0x70]
   2cbeb:	test   rax,rax
   2cbee:	je     2cc01 <MSAShorterAlignment+0x81>
   2cbf0:	mov    rax,QWORD PTR [rax+r10*8]
   2cbf4:	test   rax,rax
   2cbf7:	je     2cc01 <MSAShorterAlignment+0x81>
   2cbf9:	movzx  edx,BYTE PTR [rax+rsi*1]
   2cbfd:	mov    BYTE PTR [rax+r9*1],dl
   2cc01:	mov    rax,QWORD PTR [rdi+0x78]
   2cc05:	test   rax,rax
   2cc08:	je     2cc1b <MSAShorterAlignment+0x9b>
   2cc0a:	mov    rax,QWORD PTR [rax+r8*1]
   2cc0e:	test   rax,rax
   2cc11:	je     2cc1b <MSAShorterAlignment+0x9b>
   2cc13:	movzx  edx,BYTE PTR [rax+rsi*1]
   2cc17:	mov    BYTE PTR [rax+r9*1],dl
   2cc1b:	mov    edx,DWORD PTR [rdi+0x130]
   2cc21:	xor    eax,eax
   2cc23:	test   edx,edx
   2cc25:	jle    2cc58 <MSAShorterAlignment+0xd8>
   2cc27:	nop    WORD PTR [rax+rax*1+0x0]
   2cc30:	mov    rdx,QWORD PTR [rdi+0x120]
   2cc37:	mov    rdx,QWORD PTR [rdx+rax*8]
   2cc3b:	mov    rdx,QWORD PTR [rdx+r8*1]
   2cc3f:	test   rdx,rdx
   2cc42:	je     2cc4c <MSAShorterAlignment+0xcc>
   2cc44:	movzx  ecx,BYTE PTR [rdx+rsi*1]
   2cc48:	mov    BYTE PTR [rdx+r9*1],cl
   2cc4c:	add    rax,0x1
   2cc50:	cmp    DWORD PTR [rdi+0x130],eax
   2cc56:	jg     2cc30 <MSAShorterAlignment+0xb0>
   2cc58:	add    r10,0x1
   2cc5c:	cmp    DWORD PTR [rdi+0x1c],r10d
   2cc60:	jg     2cbd0 <MSAShorterAlignment+0x50>
   2cc66:	mov    rax,QWORD PTR [rdi+0x48]
   2cc6a:	test   rax,rax
   2cc6d:	je     2cc79 <MSAShorterAlignment+0xf9>
   2cc6f:	movzx  ecx,BYTE PTR [rax+rsi*1]
   2cc73:	movsxd rdx,r11d
   2cc76:	mov    BYTE PTR [rax+rdx*1],cl
   2cc79:	mov    rax,QWORD PTR [rdi+0x50]
   2cc7d:	test   rax,rax
   2cc80:	je     2cc8c <MSAShorterAlignment+0x10c>
   2cc82:	movzx  ecx,BYTE PTR [rax+rsi*1]
   2cc86:	movsxd rdx,r11d
   2cc89:	mov    BYTE PTR [rax+rdx*1],cl
   2cc8c:	mov    rax,QWORD PTR [rdi+0x58]
   2cc90:	test   rax,rax
   2cc93:	je     2cc9f <MSAShorterAlignment+0x11f>
   2cc95:	movzx  ecx,BYTE PTR [rax+rsi*1]
   2cc99:	movsxd rdx,r11d
   2cc9c:	mov    BYTE PTR [rax+rdx*1],cl
   2cc9f:	mov    r10d,DWORD PTR [rdi+0x110]
   2cca6:	movsxd r8,r11d
   2cca9:	xor    eax,eax
   2ccab:	test   r10d,r10d
   2ccae:	jle    2cccf <MSAShorterAlignment+0x14f>
   2ccb0:	mov    rdx,QWORD PTR [rdi+0x100]
   2ccb7:	mov    rdx,QWORD PTR [rdx+rax*8]
   2ccbb:	add    rax,0x1
   2ccbf:	movzx  ecx,BYTE PTR [rdx+rsi*1]
   2ccc3:	mov    BYTE PTR [rdx+r8*1],cl
   2ccc7:	cmp    DWORD PTR [rdi+0x110],eax
   2cccd:	jg     2ccb0 <MSAShorterAlignment+0x130>
   2cccf:	mov    eax,DWORD PTR [rdi+0x1c]
   2ccd2:	jmp    2cba0 <MSAShorterAlignment+0x20>
   2ccd7:	xor    r11d,r11d
   2ccda:	mov    DWORD PTR [rdi+0x18],r11d
   2ccde:	movsxd rsi,r11d
   2cce1:	xor    r8d,r8d
   2cce4:	test   eax,eax
   2cce6:	jle    2cd6e <MSAShorterAlignment+0x1ee>
   2ccec:	nop    DWORD PTR [rax+0x0]
   2ccf0:	mov    rax,QWORD PTR [rdi]
   2ccf3:	lea    rcx,[r8*8+0x0]
   2ccfb:	mov    rax,QWORD PTR [rax+r8*8]
   2ccff:	mov    BYTE PTR [rax+rsi*1],0x0
   2cd03:	mov    rax,QWORD PTR [rdi+0x70]
   2cd07:	test   rax,rax
   2cd0a:	je     2cd19 <MSAShorterAlignment+0x199>
   2cd0c:	mov    rax,QWORD PTR [rax+r8*8]
   2cd10:	test   rax,rax
   2cd13:	je     2cd19 <MSAShorterAlignment+0x199>
   2cd15:	mov    BYTE PTR [rax+rsi*1],0x0
   2cd19:	mov    rax,QWORD PTR [rdi+0x78]
   2cd1d:	test   rax,rax
   2cd20:	je     2cd2f <MSAShorterAlignment+0x1af>
   2cd22:	mov    rax,QWORD PTR [rax+rcx*1]
   2cd26:	test   rax,rax
   2cd29:	je     2cd2f <MSAShorterAlignment+0x1af>
   2cd2b:	mov    BYTE PTR [rax+rsi*1],0x0
   2cd2f:	mov    r9d,DWORD PTR [rdi+0x130]
   2cd36:	xor    eax,eax
   2cd38:	test   r9d,r9d
   2cd3b:	jle    2cd64 <MSAShorterAlignment+0x1e4>
   2cd3d:	nop    DWORD PTR [rax]
   2cd40:	mov    rdx,QWORD PTR [rdi+0x120]
   2cd47:	mov    rdx,QWORD PTR [rdx+rax*8]
   2cd4b:	mov    rdx,QWORD PTR [rdx+rcx*1]
   2cd4f:	test   rdx,rdx
   2cd52:	je     2cd58 <MSAShorterAlignment+0x1d8>
   2cd54:	mov    BYTE PTR [rdx+rsi*1],0x0
   2cd58:	add    rax,0x1
   2cd5c:	cmp    DWORD PTR [rdi+0x130],eax
   2cd62:	jg     2cd40 <MSAShorterAlignment+0x1c0>
   2cd64:	add    r8,0x1
   2cd68:	cmp    DWORD PTR [rdi+0x1c],r8d
   2cd6c:	jg     2ccf0 <MSAShorterAlignment+0x170>
   2cd6e:	mov    rax,QWORD PTR [rdi+0x48]
   2cd72:	test   rax,rax
   2cd75:	je     2cd7e <MSAShorterAlignment+0x1fe>
   2cd77:	movsxd rdx,r11d
   2cd7a:	mov    BYTE PTR [rax+rdx*1],0x0
   2cd7e:	mov    rax,QWORD PTR [rdi+0x50]
   2cd82:	test   rax,rax
   2cd85:	je     2cd8e <MSAShorterAlignment+0x20e>
   2cd87:	movsxd rdx,r11d
   2cd8a:	mov    BYTE PTR [rax+rdx*1],0x0
   2cd8e:	mov    rax,QWORD PTR [rdi+0x58]
   2cd92:	test   rax,rax
   2cd95:	je     2cd9e <MSAShorterAlignment+0x21e>
   2cd97:	movsxd rdx,r11d
   2cd9a:	mov    BYTE PTR [rax+rdx*1],0x0
   2cd9e:	mov    edx,DWORD PTR [rdi+0x110]
   2cda4:	movsxd r11,r11d
   2cda7:	xor    eax,eax
   2cda9:	test   edx,edx
   2cdab:	jle    2cdcc <MSAShorterAlignment+0x24c>
   2cdad:	nop    DWORD PTR [rax]
   2cdb0:	mov    rdx,QWORD PTR [rdi+0x100]
   2cdb7:	mov    rdx,QWORD PTR [rdx+rax*8]
   2cdbb:	add    rax,0x1
   2cdbf:	mov    BYTE PTR [rdx+r11*1],0x0
   2cdc4:	cmp    DWORD PTR [rdi+0x110],eax
   2cdca:	jg     2cdb0 <MSAShorterAlignment+0x230>
   2cdcc:	pop    rbx
   2cdcd:	ret    
   2cdce:	xchg   ax,ax

000000000002cdd0 <MSAMingap>:
   2cdd0:	endbr64 
   2cdd4:	push   r12
   2cdd6:	mov    esi,0x485
   2cddb:	push   rbp
   2cddc:	mov    rbp,rdi
   2cddf:	push   rbx
   2cde0:	movsxd rdx,DWORD PTR [rdi+0x18]
   2cde4:	lea    rdi,[rip+0x141ad]        # 40f98 <gki_primes+0x518>
   2cdeb:	shl    rdx,0x2
   2cdef:	call   36810 <sre_malloc>
   2cdf4:	mov    r12,rax
   2cdf7:	mov    eax,DWORD PTR [rbp+0x18]
   2cdfa:	test   eax,eax
   2cdfc:	jle    2ce89 <MSAMingap+0xb9>
   2ce02:	movabs r11,0x8000000000006001
   2ce0c:	mov    rbx,r12
   2ce0f:	xor    r8d,r8d
   2ce12:	nop    WORD PTR [rax+rax*1+0x0]
   2ce18:	mov    eax,DWORD PTR [rbp+0x1c]
   2ce1b:	xor    ecx,ecx
   2ce1d:	test   eax,eax
   2ce1f:	jle    2ce71 <MSAMingap+0xa1>
   2ce21:	lea    r9d,[rax-0x1]
   2ce25:	mov    r10,QWORD PTR [rbp+0x0]
   2ce29:	mov    edx,0x1
   2ce2e:	add    r9,0x2
   2ce32:	nop    WORD PTR [rax+rax*1+0x0]
   2ce38:	mov    rcx,QWORD PTR [r10+rdx*8-0x8]
   2ce3d:	mov    esi,0x1
   2ce42:	movzx  edi,BYTE PTR [rcx+r8*1]
   2ce47:	lea    ecx,[rdi-0x20]
   2ce4a:	cmp    cl,0x3f
   2ce4d:	ja     2ce5b <MSAMingap+0x8b>
   2ce4f:	mov    rsi,r11
   2ce52:	shr    rsi,cl
   2ce55:	not    rsi
   2ce58:	and    esi,0x1
   2ce5b:	cmp    dil,0x7e
   2ce5f:	je     2ce66 <MSAMingap+0x96>
   2ce61:	test   sil,sil
   2ce64:	jne    2ce75 <MSAMingap+0xa5>
   2ce66:	mov    ecx,edx
   2ce68:	add    rdx,0x1
   2ce6c:	cmp    r9,rdx
   2ce6f:	jne    2ce38 <MSAMingap+0x68>
   2ce71:	cmp    eax,ecx
   2ce73:	je     2cea0 <MSAMingap+0xd0>
   2ce75:	mov    DWORD PTR [rbx],0x1
   2ce7b:	add    r8,0x1
   2ce7f:	add    rbx,0x4
   2ce83:	cmp    DWORD PTR [rbp+0x18],r8d
   2ce87:	jg     2ce18 <MSAMingap+0x48>
   2ce89:	mov    rdi,rbp
   2ce8c:	mov    rsi,r12
   2ce8f:	call   2cb80 <MSAShorterAlignment>
   2ce94:	pop    rbx
   2ce95:	mov    rdi,r12
   2ce98:	pop    rbp
   2ce99:	pop    r12
   2ce9b:	jmp    3460 <free@plt>
   2cea0:	mov    DWORD PTR [rbx],0x0
   2cea6:	jmp    2ce7b <MSAMingap+0xab>
   2cea8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002ceb0 <MSANogap>:
   2ceb0:	endbr64 
   2ceb4:	push   r12
   2ceb6:	mov    esi,0x4a5
   2cebb:	push   rbp
   2cebc:	mov    rbp,rdi
   2cebf:	sub    rsp,0x8
   2cec3:	movsxd rdx,DWORD PTR [rdi+0x18]
   2cec7:	lea    rdi,[rip+0x140ca]        # 40f98 <gki_primes+0x518>
   2cece:	shl    rdx,0x2
   2ced2:	call   36810 <sre_malloc>
   2ced7:	xor    r8d,r8d
   2ceda:	movabs r11,0x8000000000006001
   2cee4:	mov    r12,rax
   2cee7:	mov    eax,DWORD PTR [rbp+0x18]
   2ceea:	test   eax,eax
   2ceec:	jle    2cf58 <MSANogap+0xa8>
   2ceee:	xchg   ax,ax
   2cef0:	mov    eax,DWORD PTR [rbp+0x1c]
   2cef3:	xor    edx,edx
   2cef5:	test   eax,eax
   2cef7:	jle    2cf78 <MSANogap+0xc8>
   2cef9:	lea    r9d,[rax-0x1]
   2cefd:	mov    r10,QWORD PTR [rbp+0x0]
   2cf01:	mov    esi,0x1
   2cf06:	add    r9,0x2
   2cf0a:	jmp    2cf1f <MSANogap+0x6f>
   2cf0c:	nop    DWORD PTR [rax+0x0]
   2cf10:	test   dl,dl
   2cf12:	jne    2cf46 <MSANogap+0x96>
   2cf14:	mov    edx,esi
   2cf16:	add    rsi,0x1
   2cf1a:	cmp    r9,rsi
   2cf1d:	je     2cf78 <MSANogap+0xc8>
   2cf1f:	mov    rdx,QWORD PTR [r10+rsi*8-0x8]
   2cf24:	movzx  edi,BYTE PTR [rdx+r8*1]
   2cf29:	mov    rdx,r11
   2cf2c:	lea    ecx,[rdi-0x20]
   2cf2f:	shr    rdx,cl
   2cf32:	and    edx,0x1
   2cf35:	cmp    cl,0x40
   2cf38:	mov    ecx,0x0
   2cf3d:	cmovae edx,ecx
   2cf40:	cmp    dil,0x7e
   2cf44:	jne    2cf10 <MSANogap+0x60>
   2cf46:	mov    DWORD PTR [r12+r8*4],0x0
   2cf4e:	add    r8,0x1
   2cf52:	cmp    DWORD PTR [rbp+0x18],r8d
   2cf56:	jg     2cef0 <MSANogap+0x40>
   2cf58:	mov    rdi,rbp
   2cf5b:	mov    rsi,r12
   2cf5e:	call   2cb80 <MSAShorterAlignment>
   2cf63:	add    rsp,0x8
   2cf67:	mov    rdi,r12
   2cf6a:	pop    rbp
   2cf6b:	pop    r12
   2cf6d:	jmp    3460 <free@plt>
   2cf72:	nop    WORD PTR [rax+rax*1+0x0]
   2cf78:	cmp    eax,edx
   2cf7a:	jne    2cf46 <MSANogap+0x96>
   2cf7c:	mov    DWORD PTR [r12+r8*4],0x1
   2cf84:	jmp    2cf4e <MSANogap+0x9e>
   2cf86:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002cf90 <MSASmallerAlignment>:
   2cf90:	endbr64 
   2cf94:	push   r15
   2cf96:	push   r14
   2cf98:	push   r13
   2cf9a:	push   r12
   2cf9c:	push   rbp
   2cf9d:	push   rbx
   2cf9e:	sub    rsp,0x28
   2cfa2:	mov    QWORD PTR [rsp+0x18],rdx
   2cfa7:	mov    edx,DWORD PTR [rdi+0x1c]
   2cfaa:	test   edx,edx
   2cfac:	jle    2d260 <MSASmallerAlignment+0x2d0>
   2cfb2:	sub    edx,0x1
   2cfb5:	mov    r13,rdi
   2cfb8:	mov    rbx,rsi
   2cfbb:	mov    rax,rsi
   2cfbe:	lea    rdx,[rsi+rdx*4+0x4]
   2cfc3:	xor    ebp,ebp
   2cfc5:	nop    DWORD PTR [rax]
   2cfc8:	cmp    DWORD PTR [rax],0x1
   2cfcb:	sbb    ebp,0xffffffff
   2cfce:	add    rax,0x4
   2cfd2:	cmp    rdx,rax
   2cfd5:	jne    2cfc8 <MSASmallerAlignment+0x38>
   2cfd7:	test   ebp,ebp
   2cfd9:	je     2d260 <MSASmallerAlignment+0x2d0>
   2cfdf:	xor    esi,esi
   2cfe1:	mov    edi,ebp
   2cfe3:	call   2aa20 <MSAAlloc>
   2cfe8:	mov    edx,DWORD PTR [r13+0x1c]
   2cfec:	mov    esi,DWORD PTR [r13+0x18]
   2cff0:	mov    r14,rax
   2cff3:	test   edx,edx
   2cff5:	jle    2d16d <MSASmallerAlignment+0x1dd>
   2cffb:	mov    DWORD PTR [rsp+0x4],0x0
   2d003:	xor    r12d,r12d
   2d006:	jmp    2d01e <MSASmallerAlignment+0x8e>
   2d008:	nop    DWORD PTR [rax+rax*1+0x0]
   2d010:	add    r12,0x1
   2d014:	cmp    DWORD PTR [r13+0x1c],r12d
   2d018:	jle    2d16d <MSASmallerAlignment+0x1dd>
   2d01e:	mov    eax,DWORD PTR [rbx+r12*4]
   2d022:	test   eax,eax
   2d024:	je     2d010 <MSASmallerAlignment+0x80>
   2d026:	movsxd r15,DWORD PTR [rsp+0x4]
   2d02b:	mov    rdx,QWORD PTR [r14]
   2d02e:	lea    rax,[r15*8+0x0]
   2d036:	add    rdx,rax
   2d039:	mov    QWORD PTR [rsp+0x8],rax
   2d03e:	mov    rax,QWORD PTR [r13+0x0]
   2d042:	mov    QWORD PTR [rsp+0x10],rdx
   2d047:	mov    rdi,QWORD PTR [rax+r12*8]
   2d04b:	call   36ce0 <sre_strdup>
   2d050:	mov    rdx,QWORD PTR [rsp+0x10]
   2d055:	mov    esi,DWORD PTR [r13+0x18]
   2d059:	mov    QWORD PTR [rdx],rax
   2d05c:	mov    rax,QWORD PTR [r13+0x8]
   2d060:	mov    rdx,QWORD PTR [rsp+0x8]
   2d065:	add    rdx,QWORD PTR [r14+0x8]
   2d069:	mov    rdi,QWORD PTR [rax+r12*8]
   2d06d:	mov    QWORD PTR [rsp+0x10],rdx
   2d072:	call   36ce0 <sre_strdup>
   2d077:	mov    rdx,QWORD PTR [rsp+0x10]
   2d07c:	mov    rdi,QWORD PTR [r14+0x138]
   2d083:	mov    QWORD PTR [rdx],rax
   2d086:	mov    rax,QWORD PTR [r13+0x8]
   2d08a:	mov    rsi,QWORD PTR [rax+r12*8]
   2d08e:	call   28080 <GKIStoreKey>
   2d093:	mov    rax,QWORD PTR [r13+0x10]
   2d097:	movss  xmm0,DWORD PTR [rax+r12*4]
   2d09d:	mov    rax,QWORD PTR [r14+0x10]
   2d0a1:	movss  DWORD PTR [rax+r15*4],xmm0
   2d0a7:	mov    rax,QWORD PTR [r13+0x60]
   2d0ab:	test   rax,rax
   2d0ae:	je     2d0c0 <MSASmallerAlignment+0x130>
   2d0b0:	mov    rdx,QWORD PTR [rax+r12*8]
   2d0b4:	mov    esi,DWORD PTR [rsp+0x4]
   2d0b8:	mov    rdi,r14
   2d0bb:	call   2b410 <MSASetSeqAccession>
   2d0c0:	mov    rax,QWORD PTR [r13+0x68]
   2d0c4:	test   rax,rax
   2d0c7:	je     2d0e1 <MSASmallerAlignment+0x151>
   2d0c9:	lea    rcx,[r12*8+0x0]
   2d0d1:	mov    esi,DWORD PTR [rsp+0x4]
   2d0d5:	mov    rdi,r14
   2d0d8:	mov    rdx,QWORD PTR [rax+rcx*1]
   2d0dc:	call   2b4a0 <MSASetSeqDescription>
   2d0e1:	mov    rax,QWORD PTR [r13+0x70]
   2d0e5:	test   rax,rax
   2d0e8:	je     2d11a <MSASmallerAlignment+0x18a>
   2d0ea:	lea    rcx,[r12*8+0x0]
   2d0f2:	mov    rdi,QWORD PTR [rax+rcx*1]
   2d0f6:	test   rdi,rdi
   2d0f9:	je     2d11a <MSASmallerAlignment+0x18a>
   2d0fb:	mov    r15,QWORD PTR [r14+0x70]
   2d0ff:	test   r15,r15
   2d102:	je     2d280 <MSASmallerAlignment+0x2f0>
   2d108:	mov    esi,0xffffffff
   2d10d:	add    r15,QWORD PTR [rsp+0x8]
   2d112:	call   36ce0 <sre_strdup>
   2d117:	mov    QWORD PTR [r15],rax
   2d11a:	mov    rax,QWORD PTR [r13+0x78]
   2d11e:	test   rax,rax
   2d121:	je     2d156 <MSASmallerAlignment+0x1c6>
   2d123:	lea    rcx,[r12*8+0x0]
   2d12b:	mov    rdi,QWORD PTR [rax+rcx*1]
   2d12f:	test   rdi,rdi
   2d132:	je     2d156 <MSASmallerAlignment+0x1c6>
   2d134:	mov    rax,QWORD PTR [r14+0x78]
   2d138:	test   rax,rax
   2d13b:	je     2d2b8 <MSASmallerAlignment+0x328>
   2d141:	mov    r15,QWORD PTR [rsp+0x8]
   2d146:	mov    esi,0xffffffff
   2d14b:	add    r15,rax
   2d14e:	call   36ce0 <sre_strdup>
   2d153:	mov    QWORD PTR [r15],rax
   2d156:	add    DWORD PTR [rsp+0x4],0x1
   2d15b:	mov    esi,DWORD PTR [r13+0x18]
   2d15f:	add    r12,0x1
   2d163:	cmp    DWORD PTR [r13+0x1c],r12d
   2d167:	jg     2d01e <MSASmallerAlignment+0x8e>
   2d16d:	mov    eax,DWORD PTR [r13+0x20]
   2d171:	mov    rdi,QWORD PTR [r13+0x28]
   2d175:	mov    DWORD PTR [r14+0x18],esi
   2d179:	mov    esi,0xffffffff
   2d17e:	mov    DWORD PTR [r14+0x1c],ebp
   2d182:	mov    DWORD PTR [r14+0x20],eax
   2d186:	mov    eax,DWORD PTR [r13+0x24]
   2d18a:	mov    DWORD PTR [r14+0x24],eax
   2d18e:	call   36ce0 <sre_strdup>
   2d193:	mov    rdi,QWORD PTR [r13+0x30]
   2d197:	mov    esi,0xffffffff
   2d19c:	mov    QWORD PTR [r14+0x28],rax
   2d1a0:	call   36ce0 <sre_strdup>
   2d1a5:	mov    rdi,QWORD PTR [r13+0x38]
   2d1a9:	mov    esi,0xffffffff
   2d1ae:	mov    QWORD PTR [r14+0x30],rax
   2d1b2:	call   36ce0 <sre_strdup>
   2d1b7:	mov    rdi,QWORD PTR [r13+0x40]
   2d1bb:	mov    esi,0xffffffff
   2d1c0:	mov    QWORD PTR [r14+0x38],rax
   2d1c4:	call   36ce0 <sre_strdup>
   2d1c9:	mov    rdi,QWORD PTR [r13+0x48]
   2d1cd:	mov    esi,0xffffffff
   2d1d2:	mov    QWORD PTR [r14+0x40],rax
   2d1d6:	call   36ce0 <sre_strdup>
   2d1db:	mov    rdi,QWORD PTR [r13+0x50]
   2d1df:	mov    esi,0xffffffff
   2d1e4:	mov    QWORD PTR [r14+0x48],rax
   2d1e8:	call   36ce0 <sre_strdup>
   2d1ed:	mov    rdi,QWORD PTR [r13+0x58]
   2d1f1:	mov    esi,0xffffffff
   2d1f6:	mov    QWORD PTR [r14+0x50],rax
   2d1fa:	call   36ce0 <sre_strdup>
   2d1ff:	mov    QWORD PTR [r14+0x58],rax
   2d203:	mov    eax,0x80
   2d208:	nop    DWORD PTR [rax+rax*1+0x0]
   2d210:	movss  xmm0,DWORD PTR [r13+rax*1+0x0]
   2d217:	mov    edx,DWORD PTR [r13+rax*1+0x18]
   2d21c:	movss  DWORD PTR [r14+rax*1],xmm0
   2d222:	mov    DWORD PTR [r14+rax*1+0x18],edx
   2d227:	add    rax,0x4
   2d22b:	cmp    rax,0x98
   2d231:	jne    2d210 <MSASmallerAlignment+0x280>
   2d233:	mov    rdi,QWORD PTR [r14+0x148]
   2d23a:	call   3460 <free@plt>
   2d23f:	mov    rdi,r14
   2d242:	call   2cdd0 <MSAMingap>
   2d247:	mov    rax,QWORD PTR [rsp+0x18]
   2d24c:	mov    QWORD PTR [rax],r14
   2d24f:	add    rsp,0x28
   2d253:	pop    rbx
   2d254:	pop    rbp
   2d255:	pop    r12
   2d257:	pop    r13
   2d259:	pop    r14
   2d25b:	pop    r15
   2d25d:	ret    
   2d25e:	xchg   ax,ax
   2d260:	mov    rax,QWORD PTR [rsp+0x18]
   2d265:	mov    QWORD PTR [rax],0x0
   2d26c:	add    rsp,0x28
   2d270:	pop    rbx
   2d271:	pop    rbp
   2d272:	pop    r12
   2d274:	pop    r13
   2d276:	pop    r14
   2d278:	pop    r15
   2d27a:	ret    
   2d27b:	nop    DWORD PTR [rax+rax*1+0x0]
   2d280:	movsxd rdx,DWORD PTR [r14+0x1c]
   2d284:	lea    rdi,[rip+0x13d0d]        # 40f98 <gki_primes+0x518>
   2d28b:	mov    esi,0x535
   2d290:	shl    rdx,0x3
   2d294:	call   36810 <sre_malloc>
   2d299:	lea    rcx,[r12*8+0x0]
   2d2a1:	mov    QWORD PTR [r14+0x70],rax
   2d2a5:	mov    r15,rax
   2d2a8:	mov    rax,QWORD PTR [r13+0x70]
   2d2ac:	mov    rdi,QWORD PTR [rax+rcx*1]
   2d2b0:	jmp    2d108 <MSASmallerAlignment+0x178>
   2d2b5:	nop    DWORD PTR [rax]
   2d2b8:	movsxd rdx,DWORD PTR [r14+0x1c]
   2d2bc:	lea    rdi,[rip+0x13cd5]        # 40f98 <gki_primes+0x518>
   2d2c3:	mov    esi,0x53a
   2d2c8:	shl    rdx,0x3
   2d2cc:	call   36810 <sre_malloc>
   2d2d1:	lea    rcx,[r12*8+0x0]
   2d2d9:	mov    QWORD PTR [r14+0x78],rax
   2d2dd:	mov    rdx,QWORD PTR [r13+0x78]
   2d2e1:	mov    rdi,QWORD PTR [rdx+rcx*1]
   2d2e5:	jmp    2d141 <MSASmallerAlignment+0x1b1>
   2d2ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000002d2f0 <MSAGetSeqAccession>:
   2d2f0:	endbr64 
   2d2f4:	mov    rax,QWORD PTR [rdi+0x60]
   2d2f8:	test   rax,rax
   2d2fb:	je     2d304 <MSAGetSeqAccession+0x14>
   2d2fd:	movsxd rsi,esi
   2d300:	mov    rax,QWORD PTR [rax+rsi*8]
   2d304:	ret    
   2d305:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002d310 <MSAGetSeqDescription>:
   2d310:	endbr64 
   2d314:	mov    rax,QWORD PTR [rdi+0x68]
   2d318:	test   rax,rax
   2d31b:	je     2d324 <MSAGetSeqDescription+0x14>
   2d31d:	movsxd rsi,esi
   2d320:	mov    rax,QWORD PTR [rax+rsi*8]
   2d324:	ret    
   2d325:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002d330 <MSAGetSeqSS>:
   2d330:	endbr64 
   2d334:	mov    rax,QWORD PTR [rdi+0x70]
   2d338:	test   rax,rax
   2d33b:	je     2d344 <MSAGetSeqSS+0x14>
   2d33d:	movsxd rsi,esi
   2d340:	mov    rax,QWORD PTR [rax+rsi*8]
   2d344:	ret    
   2d345:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002d350 <MSAGetSeqSA>:
   2d350:	endbr64 
   2d354:	mov    rax,QWORD PTR [rdi+0x78]
   2d358:	test   rax,rax
   2d35b:	je     2d364 <MSAGetSeqSA+0x14>
   2d35d:	movsxd rsi,esi
   2d360:	mov    rax,QWORD PTR [rax+rsi*8]
   2d364:	ret    
   2d365:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002d370 <MSAAverageSequenceLength>:
   2d370:	endbr64 
   2d374:	push   rbp
   2d375:	push   rbx
   2d376:	sub    rsp,0x18
   2d37a:	mov    eax,DWORD PTR [rdi+0x1c]
   2d37d:	test   eax,eax
   2d37f:	jle    2d3f0 <MSAAverageSequenceLength+0x80>
   2d381:	pxor   xmm2,xmm2
   2d385:	mov    rbp,rdi
   2d388:	xor    ebx,ebx
   2d38a:	movss  DWORD PTR [rsp+0xc],xmm2
   2d390:	movaps xmm1,xmm2
   2d393:	nop    DWORD PTR [rax+rax*1+0x0]
   2d398:	mov    rax,QWORD PTR [rbp+0x0]
   2d39c:	movss  DWORD PTR [rsp+0x8],xmm1
   2d3a2:	mov    rdi,QWORD PTR [rax+rbx*8]
   2d3a6:	add    rbx,0x1
   2d3aa:	call   25030 <DealignedLength>
   2d3af:	pxor   xmm0,xmm0
   2d3b3:	movss  xmm1,DWORD PTR [rsp+0x8]
   2d3b9:	cvtsi2ss xmm0,eax
   2d3bd:	mov    eax,DWORD PTR [rbp+0x1c]
   2d3c0:	addss  xmm1,xmm0
   2d3c4:	cmp    eax,ebx
   2d3c6:	jg     2d398 <MSAAverageSequenceLength+0x28>
   2d3c8:	pxor   xmm0,xmm0
   2d3cc:	test   eax,eax
   2d3ce:	je     2d3df <MSAAverageSequenceLength+0x6f>
   2d3d0:	pxor   xmm0,xmm0
   2d3d4:	cvtsi2ss xmm0,eax
   2d3d8:	divss  xmm1,xmm0
   2d3dc:	movaps xmm0,xmm1
   2d3df:	add    rsp,0x18
   2d3e3:	pop    rbx
   2d3e4:	pop    rbp
   2d3e5:	ret    
   2d3e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d3f0:	pxor   xmm3,xmm3
   2d3f4:	movss  DWORD PTR [rsp+0xc],xmm3
   2d3fa:	movaps xmm1,xmm3
   2d3fd:	jmp    2d3c8 <MSAAverageSequenceLength+0x58>
   2d3ff:	nop

000000000002d400 <ReadMSF>:
   2d400:	endbr64 
   2d404:	push   r15
   2d406:	push   r14
   2d408:	push   r13
   2d40a:	push   r12
   2d40c:	push   rbp
   2d40d:	push   rbx
   2d40e:	mov    rbx,rdi
   2d411:	sub    rsp,0x38
   2d415:	mov    rdi,QWORD PTR [rdi]
   2d418:	mov    rax,QWORD PTR fs:0x28
   2d421:	mov    QWORD PTR [rsp+0x28],rax
   2d426:	xor    eax,eax
   2d428:	call   3660 <feof@plt>
   2d42d:	test   eax,eax
   2d42f:	jne    2d86c <ReadMSF+0x46c>
   2d435:	mov    rdi,rbx
   2d438:	mov    r14d,eax
   2d43b:	call   2c370 <MSAFileGetLine>
   2d440:	mov    rbp,rax
   2d443:	test   rax,rax
   2d446:	je     2d86c <ReadMSF+0x46c>
   2d44c:	xor    esi,esi
   2d44e:	mov    edi,0xa
   2d453:	call   2aa20 <MSAAlloc>
   2d458:	mov    ecx,0x17
   2d45d:	lea    rdi,[rip+0x13f8c]        # 413f0 <gki_primes+0x970>
   2d464:	mov    rsi,rbp
   2d467:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d469:	mov    r12,rax
   2d46c:	seta   al
   2d46f:	sbb    al,0x0
   2d471:	test   al,al
   2d473:	je     2d874 <ReadMSF+0x474>
   2d479:	mov    ecx,0x17
   2d47e:	lea    rdi,[rip+0x13f83]        # 41408 <gki_primes+0x988>
   2d485:	mov    rsi,rbp
   2d488:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d48a:	seta   al
   2d48d:	sbb    al,0x0
   2d48f:	test   al,al
   2d491:	je     2d8fc <ReadMSF+0x4fc>
   2d497:	lea    r13,[rip+0x13f82]        # 41420 <gki_primes+0x9a0>
   2d49e:	jmp    2d4b0 <ReadMSF+0xb0>
   2d4a0:	mov    rdi,rbx
   2d4a3:	call   2c370 <MSAFileGetLine>
   2d4a8:	mov    rbp,rax
   2d4ab:	test   rax,rax
   2d4ae:	je     2d517 <ReadMSF+0x117>
   2d4b0:	mov    rsi,r13
   2d4b3:	mov    rdi,rbp
   2d4b6:	call   37f0 <strstr@plt>
   2d4bb:	test   rax,rax
   2d4be:	je     2d4f0 <ReadMSF+0xf0>
   2d4c0:	lea    rsi,[rip+0x13f5c]        # 41423 <gki_primes+0x9a3>
   2d4c7:	mov    rdi,rbp
   2d4ca:	call   37f0 <strstr@plt>
   2d4cf:	test   rax,rax
   2d4d2:	je     2d4f0 <ReadMSF+0xf0>
   2d4d4:	mov    edx,0x3
   2d4d9:	mov    rsi,rbp
   2d4dc:	lea    rdi,[rip+0x13fd5]        # 414b8 <gki_primes+0xa38>
   2d4e3:	call   2a780 <Strparse>
   2d4e8:	test   eax,eax
   2d4ea:	jne    2d8a0 <ReadMSF+0x4a0>
   2d4f0:	mov    rdi,rbp
   2d4f3:	call   36d50 <IsBlankline>
   2d4f8:	test   eax,eax
   2d4fa:	jne    2d4a0 <ReadMSF+0xa0>
   2d4fc:	mov    rsi,rbp
   2d4ff:	mov    rdi,r12
   2d502:	call   2b530 <MSAAddComment>
   2d507:	mov    rdi,rbx
   2d50a:	call   2c370 <MSAFileGetLine>
   2d50f:	mov    rbp,rax
   2d512:	test   rax,rax
   2d515:	jne    2d4b0 <ReadMSF+0xb0>
   2d517:	lea    r13,[rsp+0x1c]
   2d51c:	nop    DWORD PTR [rax+0x0]
   2d520:	mov    rdi,rbx
   2d523:	call   2c370 <MSAFileGetLine>
   2d528:	mov    rbp,rax
   2d52b:	test   rax,rax
   2d52e:	jne    2d544 <ReadMSF+0x144>
   2d530:	jmp    2d577 <ReadMSF+0x177>
   2d532:	nop    WORD PTR [rax+rax*1+0x0]
   2d538:	test   al,al
   2d53a:	je     2d700 <ReadMSF+0x300>
   2d540:	add    rbp,0x1
   2d544:	movzx  eax,BYTE PTR [rbp+0x0]
   2d548:	cmp    al,0x20
   2d54a:	je     2d538 <ReadMSF+0x138>
   2d54c:	cmp    al,0x9
   2d54e:	je     2d538 <ReadMSF+0x138>
   2d550:	cmp    al,0xa
   2d552:	je     2d520 <ReadMSF+0x120>
   2d554:	cmp    al,0x21
   2d556:	jne    2d700 <ReadMSF+0x300>
   2d55c:	mov    rsi,rbp
   2d55f:	mov    rdi,r12
   2d562:	call   2b530 <MSAAddComment>
   2d567:	mov    rdi,rbx
   2d56a:	call   2c370 <MSAFileGetLine>
   2d56f:	mov    rbp,rax
   2d572:	test   rax,rax
   2d575:	jne    2d544 <ReadMSF+0x144>
   2d577:	lea    r13,[rsp+0x20]
   2d57c:	nop    DWORD PTR [rax+0x0]
   2d580:	mov    rdi,rbx
   2d583:	call   2c370 <MSAFileGetLine>
   2d588:	test   rax,rax
   2d58b:	je     2d637 <ReadMSF+0x237>
   2d591:	xor    edx,edx
   2d593:	lea    rsi,[rip+0x13e94]        # 4142e <gki_primes+0x9ae>
   2d59a:	mov    rdi,r13
   2d59d:	mov    QWORD PTR [rsp+0x20],rax
   2d5a2:	call   36c50 <sre_strtok>
   2d5a7:	mov    rbp,rax
   2d5aa:	test   rax,rax
   2d5ad:	je     2d580 <ReadMSF+0x180>
   2d5af:	lea    rdx,[rsp+0x1c]
   2d5b4:	lea    rsi,[rip+0x14713]        # 41cce <CSWTCH.18+0x60e>
   2d5bb:	mov    rdi,r13
   2d5be:	call   36c50 <sre_strtok>
   2d5c3:	mov    r14,rax
   2d5c6:	test   rax,rax
   2d5c9:	je     2d580 <ReadMSF+0x180>
   2d5cb:	call   3820 <__ctype_b_loc@plt>
   2d5d0:	movsx  rdx,BYTE PTR [rbp+0x0]
   2d5d5:	mov    rax,QWORD PTR [rax]
   2d5d8:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   2d5dd:	je     2d5ea <ReadMSF+0x1ea>
   2d5df:	movsx  rdx,BYTE PTR [r14]
   2d5e3:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   2d5e8:	jne    2d580 <ReadMSF+0x180>
   2d5ea:	mov    rdi,QWORD PTR [r12+0x138]
   2d5f2:	mov    rsi,rbp
   2d5f5:	call   28280 <GKIKeyIndex>
   2d5fa:	test   eax,eax
   2d5fc:	js     2d580 <ReadMSF+0x180>
   2d5fe:	mov    rdx,QWORD PTR [r12+0x148]
   2d606:	cdqe   
   2d608:	mov    ecx,DWORD PTR [rsp+0x1c]
   2d60c:	lea    rbp,[rdx+rax*4]
   2d610:	mov    rdx,QWORD PTR [r12]
   2d614:	mov    esi,DWORD PTR [rbp+0x0]
   2d617:	lea    rdi,[rdx+rax*8]
   2d61b:	mov    rdx,r14
   2d61e:	call   36b70 <sre_strcat>
   2d623:	mov    rdi,rbx
   2d626:	mov    DWORD PTR [rbp+0x0],eax
   2d629:	call   2c370 <MSAFileGetLine>
   2d62e:	test   rax,rax
   2d631:	jne    2d591 <ReadMSF+0x191>
   2d637:	mov    eax,DWORD PTR [r12+0x1c]
   2d63c:	xor    ebp,ebp
   2d63e:	lea    r13,[rip+0x13f33]        # 41578 <gki_primes+0xaf8>
   2d645:	test   eax,eax
   2d647:	jle    2d6ca <ReadMSF+0x2ca>
   2d64d:	nop    DWORD PTR [rax]
   2d650:	mov    rax,QWORD PTR [r12]
   2d654:	mov    rdx,QWORD PTR [rax+rbp*8]
   2d658:	test   rdx,rdx
   2d65b:	je     2d820 <ReadMSF+0x420>
   2d661:	mov    QWORD PTR [rsp+0x20],rdx
   2d666:	movzx  eax,BYTE PTR [rdx]
   2d669:	test   al,al
   2d66b:	je     2d6bc <ReadMSF+0x2bc>
   2d66d:	lea    rsi,[rbp*4+0x0]
   2d675:	mov    rcx,rdx
   2d678:	jmp    2d69b <ReadMSF+0x29b>
   2d67a:	nop    WORD PTR [rax+rax*1+0x0]
   2d680:	mov    BYTE PTR [rdx],al
   2d682:	mov    rax,QWORD PTR [rsp+0x20]
   2d687:	add    rcx,0x1
   2d68b:	lea    rdx,[rax+0x1]
   2d68f:	mov    QWORD PTR [rsp+0x20],rdx
   2d694:	movzx  eax,BYTE PTR [rcx]
   2d697:	test   al,al
   2d699:	je     2d6bc <ReadMSF+0x2bc>
   2d69b:	cmp    al,0x20
   2d69d:	je     2d6a3 <ReadMSF+0x2a3>
   2d69f:	cmp    al,0x9
   2d6a1:	jne    2d680 <ReadMSF+0x280>
   2d6a3:	mov    rax,QWORD PTR [r12+0x148]
   2d6ab:	add    rcx,0x1
   2d6af:	add    rax,rsi
   2d6b2:	sub    DWORD PTR [rax],0x1
   2d6b5:	movzx  eax,BYTE PTR [rcx]
   2d6b8:	test   al,al
   2d6ba:	jne    2d69b <ReadMSF+0x29b>
   2d6bc:	mov    BYTE PTR [rdx],0x0
   2d6bf:	add    rbp,0x1
   2d6c3:	cmp    DWORD PTR [r12+0x1c],ebp
   2d6c8:	jg     2d650 <ReadMSF+0x250>
   2d6ca:	mov    rdi,r12
   2d6cd:	call   2be90 <MSAVerifyParse>
   2d6d2:	mov    rax,QWORD PTR [rsp+0x28]
   2d6d7:	xor    rax,QWORD PTR fs:0x28
   2d6e0:	jne    2d90a <ReadMSF+0x50a>
   2d6e6:	add    rsp,0x38
   2d6ea:	mov    rax,r12
   2d6ed:	pop    rbx
   2d6ee:	pop    rbp
   2d6ef:	pop    r12
   2d6f1:	pop    r13
   2d6f3:	pop    r14
   2d6f5:	pop    r15
   2d6f7:	ret    
   2d6f8:	nop    DWORD PTR [rax+rax*1+0x0]
   2d700:	lea    rsi,[rip+0x13d21]        # 41428 <gki_primes+0x9a8>
   2d707:	mov    rdi,rbp
   2d70a:	call   37f0 <strstr@plt>
   2d70f:	mov    QWORD PTR [rsp+0x20],rax
   2d714:	test   rax,rax
   2d717:	je     2d844 <ReadMSF+0x444>
   2d71d:	lea    r14,[rsp+0x20]
   2d722:	add    rax,0x5
   2d726:	mov    rdx,r13
   2d729:	lea    rsi,[rip+0x13cfe]        # 4142e <gki_primes+0x9ae>
   2d730:	mov    rdi,r14
   2d733:	mov    QWORD PTR [rsp+0x20],rax
   2d738:	call   36c50 <sre_strtok>
   2d73d:	mov    rdi,QWORD PTR [r12+0x138]
   2d745:	mov    rsi,rax
   2d748:	mov    r15,rax
   2d74b:	call   28080 <GKIStoreKey>
   2d750:	movsxd rbp,eax
   2d753:	cmp    DWORD PTR [r12+0x140],ebp
   2d75b:	jle    2d7e8 <ReadMSF+0x3e8>
   2d761:	mov    rax,QWORD PTR [r12+0x8]
   2d766:	mov    esi,DWORD PTR [rsp+0x1c]
   2d76a:	mov    rdi,r15
   2d76d:	lea    rdx,[rax+rbp*8]
   2d771:	mov    QWORD PTR [rsp+0x8],rdx
   2d776:	call   36ce0 <sre_strdup>
   2d77b:	mov    rdx,QWORD PTR [rsp+0x8]
   2d780:	lea    rsi,[rip+0x13caa]        # 41431 <gki_primes+0x9b1>
   2d787:	mov    QWORD PTR [rdx],rax
   2d78a:	mov    rdi,QWORD PTR [rsp+0x20]
   2d78f:	add    DWORD PTR [r12+0x1c],0x1
   2d795:	call   37f0 <strstr@plt>
   2d79a:	mov    QWORD PTR [rsp+0x20],rax
   2d79f:	test   rax,rax
   2d7a2:	je     2d7f8 <ReadMSF+0x3f8>
   2d7a4:	add    rax,0x7
   2d7a8:	mov    rdx,r13
   2d7ab:	lea    rsi,[rip+0x13c7c]        # 4142e <gki_primes+0x9ae>
   2d7b2:	mov    rdi,r14
   2d7b5:	mov    QWORD PTR [rsp+0x20],rax
   2d7ba:	call   36c50 <sre_strtok>
   2d7bf:	xor    esi,esi
   2d7c1:	mov    rdi,rax
   2d7c4:	call   3510 <strtod@plt>
   2d7c9:	mov    rax,QWORD PTR [r12+0x10]
   2d7ce:	cvtsd2ss xmm0,xmm0
   2d7d2:	movss  DWORD PTR [rax+rbp*4],xmm0
   2d7d7:	or     DWORD PTR [r12+0x20],0x1
   2d7dd:	jmp    2d520 <ReadMSF+0x120>
   2d7e2:	nop    WORD PTR [rax+rax*1+0x0]
   2d7e8:	mov    rdi,r12
   2d7eb:	call   2ad30 <MSAExpand>
   2d7f0:	jmp    2d761 <ReadMSF+0x361>
   2d7f5:	nop    DWORD PTR [rax]
   2d7f8:	mov    rax,QWORD PTR [r12+0x8]
   2d7fd:	mov    rcx,QWORD PTR [rbx+0x8]
   2d801:	lea    rdi,[rip+0x13cf0]        # 414f8 <gki_primes+0xa78>
   2d808:	mov    esi,DWORD PTR [rbx+0x10]
   2d80b:	mov    rdx,QWORD PTR [rax+rbp*8]
   2d80f:	xor    eax,eax
   2d811:	call   317f0 <Die>
   2d816:	mov    rax,QWORD PTR [rsp+0x20]
   2d81b:	jmp    2d7a4 <ReadMSF+0x3a4>
   2d81d:	nop    DWORD PTR [rax]
   2d820:	mov    rax,QWORD PTR [r12+0x8]
   2d825:	mov    rdx,QWORD PTR [rbx+0x8]
   2d829:	mov    rdi,r13
   2d82c:	mov    rsi,QWORD PTR [rax+rbp*8]
   2d830:	xor    eax,eax
   2d832:	call   317f0 <Die>
   2d837:	mov    rax,QWORD PTR [r12]
   2d83b:	mov    rdx,QWORD PTR [rax+rbp*8]
   2d83f:	jmp    2d661 <ReadMSF+0x261>
   2d844:	cmp    BYTE PTR [rbp+0x0],0x2f
   2d848:	je     2d893 <ReadMSF+0x493>
   2d84a:	mov    rdx,QWORD PTR [rbx+0x8]
   2d84e:	mov    esi,DWORD PTR [rbx+0x10]
   2d851:	mov    rcx,rbp
   2d854:	xor    eax,eax
   2d856:	lea    rdi,[rip+0x13cdb]        # 41538 <gki_primes+0xab8>
   2d85d:	call   317f0 <Die>
   2d862:	mov    DWORD PTR [rip+0x34b04],0x5        # 62370 <squid_errno>
   2d86c:	xor    r12d,r12d
   2d86f:	jmp    2d6d2 <ReadMSF+0x2d2>
   2d874:	mov    DWORD PTR [r12+0x24],0x3
   2d87d:	mov    rdi,rbx
   2d880:	call   2c370 <MSAFileGetLine>
   2d885:	mov    rbp,rax
   2d888:	test   rax,rax
   2d88b:	jne    2d497 <ReadMSF+0x97>
   2d891:	jmp    2d86c <ReadMSF+0x46c>
   2d893:	cmp    BYTE PTR [rbp+0x1],0x2f
   2d897:	je     2d577 <ReadMSF+0x177>
   2d89d:	jmp    2d84a <ReadMSF+0x44a>
   2d89f:	nop
   2d8a0:	mov    rdi,QWORD PTR [rip+0x34a79]        # 62320 <sqd_parse>
   2d8a7:	mov    edx,0xa
   2d8ac:	xor    esi,esi
   2d8ae:	call   3670 <strtol@plt>
   2d8b3:	mov    rax,QWORD PTR [rip+0x34a6e]        # 62328 <sqd_parse+0x8>
   2d8ba:	movzx  eax,BYTE PTR [rax]
   2d8bd:	sub    eax,0x4e
   2d8c0:	cmp    al,0xa
   2d8c2:	ja     2d8d2 <ReadMSF+0x4d2>
   2d8c4:	movzx  eax,al
   2d8c7:	lea    rdx,[rip+0x13df2]        # 416c0 <CSWTCH.18>
   2d8ce:	mov    r14d,DWORD PTR [rdx+rax*4]
   2d8d2:	mov    rdi,QWORD PTR [rip+0x34a5f]        # 62338 <sqd_parse+0x18>
   2d8d9:	mov    edx,0xa
   2d8de:	xor    esi,esi
   2d8e0:	call   3670 <strtol@plt>
   2d8e5:	mov    edx,DWORD PTR [r12+0x24]
   2d8ea:	test   edx,edx
   2d8ec:	jne    2d517 <ReadMSF+0x117>
   2d8f2:	mov    DWORD PTR [r12+0x24],r14d
   2d8f7:	jmp    2d517 <ReadMSF+0x117>
   2d8fc:	mov    DWORD PTR [r12+0x24],0x2
   2d905:	jmp    2d87d <ReadMSF+0x47d>
   2d90a:	call   3570 <__stack_chk_fail@plt>
   2d90f:	nop

000000000002d910 <WriteMSF>:
   2d910:	endbr64 
   2d914:	push   r15
   2d916:	push   r14
   2d918:	mov    r14,rsi
   2d91b:	push   r13
   2d91d:	push   r12
   2d91f:	push   rbp
   2d920:	push   rbx
   2d921:	mov    rbx,rdi
   2d924:	lea    rdi,[rip+0x13b18]        # 41443 <gki_primes+0x9c3>
   2d92b:	sub    rsp,0xd8
   2d932:	movsxd rdx,DWORD PTR [rsi+0x1c]
   2d936:	mov    esi,0x111
   2d93b:	mov    rax,QWORD PTR fs:0x28
   2d944:	mov    QWORD PTR [rsp+0xc8],rax
   2d94c:	xor    eax,eax
   2d94e:	shl    rdx,0x3
   2d952:	call   36810 <sre_malloc>
   2d957:	movsxd rdx,DWORD PTR [r14+0x1c]
   2d95b:	mov    esi,0x112
   2d960:	lea    rdi,[rip+0x13adc]        # 41443 <gki_primes+0x9c3>
   2d967:	mov    QWORD PTR [rsp+0x28],rax
   2d96c:	mov    r13,rax
   2d96f:	shl    rdx,0x3
   2d973:	call   36810 <sre_malloc>
   2d978:	mov    r12d,DWORD PTR [r14+0x1c]
   2d97c:	mov    QWORD PTR [rsp+0x20],rax
   2d981:	test   r12d,r12d
   2d984:	jle    2e00b <WriteMSF+0x6fb>
   2d98a:	mov    r15,rax
   2d98d:	xor    ebp,ebp
   2d98f:	nop
   2d990:	mov    rax,QWORD PTR [r14]
   2d993:	mov    esi,DWORD PTR [r14+0x18]
   2d997:	mov    rdi,QWORD PTR [rax+rbp*8]
   2d99b:	call   36ce0 <sre_strdup>
   2d9a0:	mov    esi,0xffffffff
   2d9a5:	mov    QWORD PTR [r13+rbp*8+0x0],rax
   2d9aa:	mov    rax,QWORD PTR [r14+0x8]
   2d9ae:	mov    rdi,QWORD PTR [rax+rbp*8]
   2d9b2:	call   36ce0 <sre_strdup>
   2d9b7:	mov    QWORD PTR [r15+rbp*8],rax
   2d9bb:	mov    eax,DWORD PTR [r14+0x1c]
   2d9bf:	add    rbp,0x1
   2d9c3:	mov    r12d,eax
   2d9c6:	cmp    eax,ebp
   2d9c8:	jg     2d990 <WriteMSF+0x80>
   2d9ca:	test   eax,eax
   2d9cc:	jle    2e00b <WriteMSF+0x6fb>
   2d9d2:	mov    r15,QWORD PTR [rsp+0x20]
   2d9d7:	xor    r13d,r13d
   2d9da:	nop    WORD PTR [rax+rax*1+0x0]
   2d9e0:	mov    r12,QWORD PTR [r15+r13*8]
   2d9e4:	movzx  ebp,BYTE PTR [r12]
   2d9e9:	test   bpl,bpl
   2d9ec:	je     2da2f <WriteMSF+0x11f>
   2d9ee:	call   3820 <__ctype_b_loc@plt>
   2d9f3:	nop    DWORD PTR [rax+rax*1+0x0]
   2d9f8:	mov    rcx,QWORD PTR [rax]
   2d9fb:	movsx  rdx,bpl
   2d9ff:	test   BYTE PTR [rcx+rdx*2],0x8
   2da03:	jne    2da1c <WriteMSF+0x10c>
   2da05:	cmp    bpl,0x2d
   2da09:	setne  cl
   2da0c:	cmp    bpl,0x5f
   2da10:	setne  dl
   2da13:	test   cl,dl
   2da15:	je     2da1c <WriteMSF+0x10c>
   2da17:	mov    BYTE PTR [r12],0x5f
   2da1c:	movzx  ebp,BYTE PTR [r12+0x1]
   2da22:	add    r12,0x1
   2da26:	test   bpl,bpl
   2da29:	jne    2d9f8 <WriteMSF+0xe8>
   2da2b:	mov    eax,DWORD PTR [r14+0x1c]
   2da2f:	add    r13,0x1
   2da33:	mov    r12d,eax
   2da36:	cmp    eax,r13d
   2da39:	jg     2d9e0 <WriteMSF+0xd0>
   2da3b:	test   eax,eax
   2da3d:	jle    2e00b <WriteMSF+0x6fb>
   2da43:	mov    rdi,QWORD PTR [rsp+0x28]
   2da48:	xor    r8d,r8d
   2da4b:	movabs rsi,0x8000000000006001
   2da55:	nop    DWORD PTR [rax]
   2da58:	mov    rdx,QWORD PTR [rdi]
   2da5b:	movzx  r9d,BYTE PTR [rdx]
   2da5f:	test   r9b,r9b
   2da62:	je     2daa0 <WriteMSF+0x190>
   2da64:	nop    DWORD PTR [rax+0x0]
   2da68:	lea    ecx,[r9-0x20]
   2da6c:	mov    rax,rsi
   2da6f:	shr    rax,cl
   2da72:	and    eax,0x1
   2da75:	cmp    cl,0x40
   2da78:	mov    ecx,0x0
   2da7d:	cmovae eax,ecx
   2da80:	cmp    r9b,0x7e
   2da84:	sete   cl
   2da87:	or     cl,al
   2da89:	je     2de8d <WriteMSF+0x57d>
   2da8f:	mov    BYTE PTR [rdx],0x7e
   2da92:	movzx  r9d,BYTE PTR [rdx+0x1]
   2da97:	add    rdx,0x1
   2da9b:	test   r9b,r9b
   2da9e:	jne    2da68 <WriteMSF+0x158>
   2daa0:	mov    eax,DWORD PTR [r14+0x18]
   2daa4:	lea    edx,[rax-0x1]
   2daa7:	test   edx,edx
   2daa9:	jle    2daf9 <WriteMSF+0x1e9>
   2daab:	movsxd r11,eax
   2daae:	sub    eax,0x2
   2dab1:	movsxd rdx,edx
   2dab4:	sub    r11,0x2
   2dab8:	sub    r11,rax
   2dabb:	nop    DWORD PTR [rax+rax*1+0x0]
   2dac0:	mov    r10,QWORD PTR [rdi]
   2dac3:	mov    rax,rsi
   2dac6:	add    r10,rdx
   2dac9:	movzx  r9d,BYTE PTR [r10]
   2dacd:	lea    ecx,[r9-0x20]
   2dad1:	shr    rax,cl
   2dad4:	and    eax,0x1
   2dad7:	cmp    cl,0x40
   2dada:	mov    ecx,0x0
   2dadf:	cmovae eax,ecx
   2dae2:	cmp    r9b,0x7e
   2dae6:	je     2daec <WriteMSF+0x1dc>
   2dae8:	test   al,al
   2daea:	je     2daf9 <WriteMSF+0x1e9>
   2daec:	sub    rdx,0x1
   2daf0:	mov    BYTE PTR [r10],0x7e
   2daf4:	cmp    r11,rdx
   2daf7:	jne    2dac0 <WriteMSF+0x1b0>
   2daf9:	mov    r12d,DWORD PTR [r14+0x1c]
   2dafd:	add    r8d,0x1
   2db01:	add    rdi,0x8
   2db05:	cmp    r12d,r8d
   2db08:	jg     2da58 <WriteMSF+0x148>
   2db0e:	test   r12d,r12d
   2db11:	jle    2e00b <WriteMSF+0x6fb>
   2db17:	mov    rax,QWORD PTR [r14+0x8]
   2db1b:	lea    edx,[r12-0x1]
   2db20:	xor    r15d,r15d
   2db23:	lea    r13,[rax+0x8]
   2db27:	lea    rbp,[r13+rdx*8+0x0]
   2db2c:	jmp    2db34 <WriteMSF+0x224>
   2db2e:	xchg   ax,ax
   2db30:	add    r13,0x8
   2db34:	mov    rdi,QWORD PTR [rax]
   2db37:	call   3560 <strlen@plt>
   2db3c:	cmp    r15d,eax
   2db3f:	cmovl  r15d,eax
   2db43:	mov    rax,r13
   2db46:	cmp    rbp,r13
   2db49:	jne    2db30 <WriteMSF+0x220>
   2db4b:	mov    DWORD PTR [rsp+0x10],r15d
   2db50:	mov    esi,DWORD PTR [r14+0x24]
   2db54:	test   esi,esi
   2db56:	je     2dfd7 <WriteMSF+0x6c7>
   2db5c:	lea    eax,[rsi-0x1]
   2db5f:	cmp    eax,0x1
   2db62:	jbe    2dfb9 <WriteMSF+0x6a9>
   2db68:	cmp    esi,0x3
   2db6b:	je     2dfed <WriteMSF+0x6dd>
   2db71:	test   esi,esi
   2db73:	je     2ded8 <WriteMSF+0x5c8>
   2db79:	lea    rdi,[rip+0x13a70]        # 415f0 <gki_primes+0xb70>
   2db80:	xor    eax,eax
   2db82:	call   317f0 <Die>
   2db87:	mov    r11d,DWORD PTR [r14+0xb8]
   2db8e:	test   r11d,r11d
   2db91:	jle    2dbd4 <WriteMSF+0x2c4>
   2db93:	xor    r12d,r12d
   2db96:	lea    rbp,[rip+0x14d88]        # 42925 <cof.6115+0x125>
   2db9d:	mov    rax,QWORD PTR [r14+0xb0]
   2dba4:	mov    rdx,rbp
   2dba7:	mov    esi,0x1
   2dbac:	mov    rdi,rbx
   2dbaf:	mov    rcx,QWORD PTR [rax+r12*8]
   2dbb3:	xor    eax,eax
   2dbb5:	add    r12,0x1
   2dbb9:	call   37c0 <__fprintf_chk@plt>
   2dbbe:	cmp    DWORD PTR [r14+0xb8],r12d
   2dbc5:	jg     2db9d <WriteMSF+0x28d>
   2dbc7:	mov    rsi,rbx
   2dbca:	mov    edi,0xa
   2dbcf:	call   3600 <fputc@plt>
   2dbd4:	xor    edi,edi
   2dbd6:	lea    rbp,[rsp+0x80]
   2dbde:	call   3690 <time@plt>
   2dbe3:	lea    rdi,[rsp+0x38]
   2dbe8:	mov    QWORD PTR [rsp+0x38],rax
   2dbed:	call   3480 <localtime@plt>
   2dbf2:	lea    rdx,[rip+0x1388a]        # 41483 <gki_primes+0xa03>
   2dbf9:	mov    esi,0x40
   2dbfe:	mov    rdi,rbp
   2dc01:	mov    rcx,rax
   2dc04:	call   3730 <strftime@plt>
   2dc09:	test   rax,rax
   2dc0c:	je     2dfa8 <WriteMSF+0x698>
   2dc12:	mov    rdi,QWORD PTR [rsp+0x28]
   2dc17:	mov    esi,DWORD PTR [r14+0x1c]
   2dc1b:	call   33830 <GCGMultchecksum>
   2dc20:	mov    rcx,QWORD PTR [r14+0x28]
   2dc24:	mov    esi,0x1
   2dc29:	mov    rdi,rbx
   2dc2c:	mov    r8d,eax
   2dc2f:	xor    eax,eax
   2dc31:	cmp    DWORD PTR [r14+0x24],0x2
   2dc36:	setne  al
   2dc39:	push   r8
   2dc3b:	test   rcx,rcx
   2dc3e:	lea    rdx,[rip+0x137f4]        # 41439 <gki_primes+0x9b9>
   2dc45:	push   rbp
   2dc46:	cmove  rcx,rdx
   2dc4a:	mov    r8d,DWORD PTR [r14+0x18]
   2dc4e:	lea    r9d,[rax+rax*1+0x4e]
   2dc53:	lea    rdx,[rip+0x139fe]        # 41658 <gki_primes+0xbd8>
   2dc5a:	xor    eax,eax
   2dc5c:	xor    r12d,r12d
   2dc5f:	lea    rbp,[rip+0x13a22]        # 41688 <gki_primes+0xc08>
   2dc66:	call   37c0 <__fprintf_chk@plt>
   2dc6b:	mov    rsi,rbx
   2dc6e:	mov    edi,0xa
   2dc73:	call   3600 <fputc@plt>
   2dc78:	mov    r10d,DWORD PTR [r14+0x1c]
   2dc7c:	pop    r8
   2dc7e:	pop    r9
   2dc80:	test   r10d,r10d
   2dc83:	jle    2dd04 <WriteMSF+0x3f4>
   2dc85:	mov    rax,r14
   2dc88:	mov    r13d,DWORD PTR [rsp+0x10]
   2dc8d:	mov    r15,QWORD PTR [rsp+0x28]
   2dc92:	mov    r14,rbx
   2dc95:	mov    rbx,rax
   2dc98:	nop    DWORD PTR [rax+rax*1+0x0]
   2dca0:	mov    rdi,QWORD PTR [r15+r12*8]
   2dca4:	mov    rax,QWORD PTR [rbx+0x10]
   2dca8:	pxor   xmm0,xmm0
   2dcac:	mov    esi,DWORD PTR [rbx+0x18]
   2dcaf:	cvtss2sd xmm0,DWORD PTR [rax+r12*4]
   2dcb5:	movsd  QWORD PTR [rsp+0x8],xmm0
   2dcbb:	call   33770 <GCGchecksum>
   2dcc0:	mov    rdx,QWORD PTR [rsp+0x20]
   2dcc5:	mov    ecx,r13d
   2dcc8:	mov    r8d,r13d
   2dccb:	mov    esi,0x1
   2dcd0:	mov    rdi,r14
   2dcd3:	mov    r9,QWORD PTR [rdx+r12*8]
   2dcd7:	push   rax
   2dcd8:	mov    rdx,rbp
   2dcdb:	add    r12,0x1
   2dcdf:	mov    eax,DWORD PTR [rbx+0x18]
   2dce2:	push   rax
   2dce3:	movsd  xmm0,QWORD PTR [rsp+0x18]
   2dce9:	mov    eax,0x1
   2dcee:	call   37c0 <__fprintf_chk@plt>
   2dcf3:	pop    rcx
   2dcf4:	pop    rsi
   2dcf5:	cmp    DWORD PTR [rbx+0x1c],r12d
   2dcf9:	jg     2dca0 <WriteMSF+0x390>
   2dcfb:	mov    rax,rbx
   2dcfe:	mov    rbx,r14
   2dd01:	mov    r14,rax
   2dd04:	mov    rsi,rbx
   2dd07:	mov    edi,0xa
   2dd0c:	call   3600 <fputc@plt>
   2dd11:	lea    rdi,[rip+0x10395]        # 3e0ad <_IO_stdin_used+0x10ad>
   2dd18:	mov    rcx,rbx
   2dd1b:	mov    edx,0x3
   2dd20:	mov    esi,0x1
   2dd25:	call   37b0 <fwrite@plt>
   2dd2a:	mov    edi,DWORD PTR [r14+0x18]
   2dd2e:	mov    QWORD PTR [rsp+0x8],0x0
   2dd37:	test   edi,edi
   2dd39:	jle    2df2c <WriteMSF+0x61c>
   2dd3f:	mov    r15d,DWORD PTR [rsp+0x10]
   2dd44:	mov    QWORD PTR [rsp+0x10],r14
   2dd49:	nop    DWORD PTR [rax+0x0]
   2dd50:	mov    rsi,rbx
   2dd53:	mov    edi,0xa
   2dd58:	call   3600 <fputc@plt>
   2dd5d:	mov    rax,QWORD PTR [rsp+0x10]
   2dd62:	mov    rsi,QWORD PTR [rsp+0x8]
   2dd67:	mov    eax,DWORD PTR [rax+0x18]
   2dd6a:	mov    edx,esi
   2dd6c:	lea    ecx,[rsi+0x31]
   2dd6f:	lea    r9d,[rsi+0x1]
   2dd73:	add    edx,0x32
   2dd76:	cmp    eax,ecx
   2dd78:	jg     2df71 <WriteMSF+0x661>
   2dd7e:	mov    edx,eax
   2dd80:	sub    edx,esi
   2dd82:	mov    DWORD PTR [rsp+0x1c],edx
   2dd86:	mov    esi,edx
   2dd88:	cmp    edx,0xa
   2dd8b:	jle    2df83 <WriteMSF+0x673>
   2dd91:	lea    edx,[rdx-0x1]
   2dd94:	mov    edi,0xcccccccd
   2dd99:	imul   rdx,rdi
   2dd9d:	shr    rdx,0x23
   2dda1:	lea    ecx,[rsi+rdx*1-0xc]
   2dda5:	mov    edx,eax
   2dda7:	sub    rsp,0x8
   2ddab:	lea    rax,[rip+0x1367e]        # 41430 <gki_primes+0x9b0>
   2ddb2:	mov    esi,0x1
   2ddb7:	mov    rdi,rbx
   2ddba:	push   rdx
   2ddbb:	mov    r8,rax
   2ddbe:	lea    rdx,[rip+0x136ce]        # 41493 <gki_primes+0xa13>
   2ddc5:	push   rax
   2ddc6:	xor    eax,eax
   2ddc8:	push   rcx
   2ddc9:	mov    ecx,r15d
   2ddcc:	call   37c0 <__fprintf_chk@plt>
   2ddd1:	add    rsp,0x20
   2ddd5:	mov    eax,DWORD PTR [rsp+0x1c]
   2ddd9:	xor    r13d,r13d
   2dddc:	lea    rbp,[rsp+0x40]
   2dde1:	lea    r12d,[rax-0x1]
   2dde5:	mov    rax,QWORD PTR [rsp+0x10]
   2ddea:	mov    edx,DWORD PTR [rax+0x1c]
   2dded:	test   edx,edx
   2ddef:	jle    2df10 <WriteMSF+0x600>
   2ddf5:	nop    DWORD PTR [rax]
   2ddf8:	mov    rax,QWORD PTR [rsp+0x20]
   2ddfd:	mov    ecx,r15d
   2de00:	mov    esi,0x1
   2de05:	mov    rdi,rbx
   2de08:	lea    rdx,[rip+0x136a0]        # 414af <gki_primes+0xa2f>
   2de0f:	xor    r14d,r14d
   2de12:	mov    r8,QWORD PTR [rax+r13*8]
   2de16:	xor    eax,eax
   2de18:	call   37c0 <__fprintf_chk@plt>
   2de1d:	mov    rax,QWORD PTR [rsp+0x28]
   2de22:	mov    rsi,QWORD PTR [rsp+0x8]
   2de27:	mov    rdi,rbp
   2de2a:	mov    edx,0x32
   2de2f:	add    rsi,QWORD PTR [rax+r13*8]
   2de33:	call   34b0 <strncpy@plt>
   2de38:	mov    eax,DWORD PTR [rsp+0x1c]
   2de3c:	mov    BYTE PTR [rsp+0x72],0x0
   2de41:	test   eax,eax
   2de43:	jg     2de6e <WriteMSF+0x55e>
   2de45:	jmp    2def0 <WriteMSF+0x5e0>
   2de4a:	nop    WORD PTR [rax+rax*1+0x0]
   2de50:	movsx  edi,BYTE PTR [rbp+r14*1+0x0]
   2de56:	mov    rsi,rbx
   2de59:	call   3600 <fputc@plt>
   2de5e:	lea    rax,[r14+0x1]
   2de62:	cmp    r14,r12
   2de65:	je     2def0 <WriteMSF+0x5e0>
   2de6b:	mov    r14,rax
   2de6e:	imul   eax,r14d,0xcccccccd
   2de75:	ror    eax,1
   2de77:	cmp    eax,0x19999999
   2de7c:	ja     2de50 <WriteMSF+0x540>
   2de7e:	mov    rsi,rbx
   2de81:	mov    edi,0x20
   2de86:	call   3600 <fputc@plt>
   2de8b:	jmp    2de50 <WriteMSF+0x540>
   2de8d:	movzx  r9d,BYTE PTR [rdx]
   2de91:	test   r9b,r9b
   2de94:	je     2daa0 <WriteMSF+0x190>
   2de9a:	nop    WORD PTR [rax+rax*1+0x0]
   2dea0:	lea    ecx,[r9-0x20]
   2dea4:	mov    rax,rsi
   2dea7:	shr    rax,cl
   2deaa:	and    eax,0x1
   2dead:	cmp    cl,0x40
   2deb0:	mov    ecx,0x0
   2deb5:	cmovae eax,ecx
   2deb8:	cmp    r9b,0x7e
   2debc:	je     2dec2 <WriteMSF+0x5b2>
   2debe:	test   al,al
   2dec0:	je     2dec5 <WriteMSF+0x5b5>
   2dec2:	mov    BYTE PTR [rdx],0x2e
   2dec5:	movzx  r9d,BYTE PTR [rdx+0x1]
   2deca:	add    rdx,0x1
   2dece:	test   r9b,r9b
   2ded1:	jne    2dea0 <WriteMSF+0x590>
   2ded3:	jmp    2daa0 <WriteMSF+0x190>
   2ded8:	lea    rdi,[rip+0x136c9]        # 415a8 <gki_primes+0xb28>
   2dedf:	xor    eax,eax
   2dee1:	call   317f0 <Die>
   2dee6:	jmp    2db87 <WriteMSF+0x277>
   2deeb:	nop    DWORD PTR [rax+rax*1+0x0]
   2def0:	mov    rsi,rbx
   2def3:	mov    edi,0xa
   2def8:	add    r13,0x1
   2defc:	call   3600 <fputc@plt>
   2df01:	mov    rax,QWORD PTR [rsp+0x10]
   2df06:	cmp    DWORD PTR [rax+0x1c],r13d
   2df0a:	jg     2ddf8 <WriteMSF+0x4e8>
   2df10:	mov    rdx,QWORD PTR [rsp+0x10]
   2df15:	add    QWORD PTR [rsp+0x8],0x32
   2df1b:	mov    rax,QWORD PTR [rsp+0x8]
   2df20:	cmp    DWORD PTR [rdx+0x18],eax
   2df23:	jg     2dd50 <WriteMSF+0x440>
   2df29:	mov    r14,rdx
   2df2c:	mov    esi,DWORD PTR [r14+0x1c]
   2df30:	mov    rdi,QWORD PTR [rsp+0x28]
   2df35:	call   368c0 <Free2DArray>
   2df3a:	mov    esi,DWORD PTR [r14+0x1c]
   2df3e:	mov    rdi,QWORD PTR [rsp+0x20]
   2df43:	call   368c0 <Free2DArray>
   2df48:	mov    rax,QWORD PTR [rsp+0xc8]
   2df50:	xor    rax,QWORD PTR fs:0x28
   2df59:	jne    2e018 <WriteMSF+0x708>
   2df5f:	add    rsp,0xd8
   2df66:	pop    rbx
   2df67:	pop    rbp
   2df68:	pop    r12
   2df6a:	pop    r13
   2df6c:	pop    r14
   2df6e:	pop    r15
   2df70:	ret    
   2df71:	mov    DWORD PTR [rsp+0x1c],0x32
   2df79:	mov    ecx,0x2a
   2df7e:	jmp    2dda7 <WriteMSF+0x497>
   2df83:	lea    r8,[rip+0x134a6]        # 41430 <gki_primes+0x9b0>
   2df8a:	mov    ecx,r15d
   2df8d:	mov    rdi,rbx
   2df90:	xor    eax,eax
   2df92:	lea    rdx,[rip+0x1350b]        # 414a4 <gki_primes+0xa24>
   2df99:	mov    esi,0x1
   2df9e:	call   37c0 <__fprintf_chk@plt>
   2dfa3:	jmp    2ddd5 <WriteMSF+0x4c5>
   2dfa8:	lea    rdi,[rip+0x13669]        # 41618 <gki_primes+0xb98>
   2dfaf:	call   317f0 <Die>
   2dfb4:	jmp    2dc12 <WriteMSF+0x302>
   2dfb9:	mov    rcx,rbx
   2dfbc:	mov    edx,0x1c
   2dfc1:	mov    esi,0x1
   2dfc6:	lea    rdi,[rip+0x1347c]        # 41449 <gki_primes+0x9c9>
   2dfcd:	call   37b0 <fwrite@plt>
   2dfd2:	jmp    2db87 <WriteMSF+0x277>
   2dfd7:	mov    rdi,QWORD PTR [r14]
   2dfda:	mov    esi,r12d
   2dfdd:	call   34340 <GuessAlignmentSeqtype>
   2dfe2:	mov    DWORD PTR [r14+0x24],eax
   2dfe6:	mov    esi,eax
   2dfe8:	jmp    2db5c <WriteMSF+0x24c>
   2dfed:	mov    rcx,rbx
   2dff0:	mov    edx,0x1c
   2dff5:	mov    esi,0x1
   2dffa:	lea    rdi,[rip+0x13465]        # 41466 <gki_primes+0x9e6>
   2e001:	call   37b0 <fwrite@plt>
   2e006:	jmp    2db87 <WriteMSF+0x277>
   2e00b:	mov    DWORD PTR [rsp+0x10],0x0
   2e013:	jmp    2db50 <WriteMSF+0x240>
   2e018:	call   3570 <__stack_chk_fail@plt>
   2e01d:	nop    DWORD PTR [rax]

000000000002e020 <ReadPhylip>:
   2e020:	endbr64 
   2e024:	push   r15
   2e026:	push   r14
   2e028:	push   r13
   2e02a:	mov    r13,rdi
   2e02d:	push   r12
   2e02f:	push   rbp
   2e030:	push   rbx
   2e031:	sub    rsp,0x48
   2e035:	mov    rdi,QWORD PTR [rdi]
   2e038:	mov    rax,QWORD PTR fs:0x28
   2e041:	mov    QWORD PTR [rsp+0x38],rax
   2e046:	xor    eax,eax
   2e048:	call   3660 <feof@plt>
   2e04d:	test   eax,eax
   2e04f:	jne    2e278 <ReadPhylip+0x258>
   2e055:	lea    r12,[rsp+0x20]
   2e05a:	mov    rdi,r13
   2e05d:	call   2c370 <MSAFileGetLine>
   2e062:	mov    QWORD PTR [rsp+0x20],rax
   2e067:	test   rax,rax
   2e06a:	je     2e297 <ReadPhylip+0x277>
   2e070:	xor    edx,edx
   2e072:	lea    rsi,[rip+0x13c53]        # 41ccc <CSWTCH.18+0x60c>
   2e079:	mov    rdi,r12
   2e07c:	call   36c50 <sre_strtok>
   2e081:	mov    rbp,rax
   2e084:	test   rax,rax
   2e087:	je     2e05a <ReadPhylip+0x3a>
   2e089:	mov    rdi,r12
   2e08c:	xor    edx,edx
   2e08e:	lea    rsi,[rip+0x13c37]        # 41ccc <CSWTCH.18+0x60c>
   2e095:	call   36c50 <sre_strtok>
   2e09a:	mov    r12,rax
   2e09d:	test   rax,rax
   2e0a0:	je     2e280 <ReadPhylip+0x260>
   2e0a6:	mov    rdi,rbp
   2e0a9:	call   3aa60 <IsInt>
   2e0ae:	test   eax,eax
   2e0b0:	jne    2e260 <ReadPhylip+0x240>
   2e0b6:	mov    rsi,QWORD PTR [r13+0x8]
   2e0ba:	lea    rdi,[rip+0x13687]        # 41748 <CSWTCH.18+0x88>
   2e0c1:	xor    eax,eax
   2e0c3:	call   317f0 <Die>
   2e0c8:	mov    edx,0xa
   2e0cd:	xor    esi,esi
   2e0cf:	mov    rdi,rbp
   2e0d2:	call   3670 <strtol@plt>
   2e0d7:	mov    edx,0xa
   2e0dc:	xor    esi,esi
   2e0de:	mov    rdi,r12
   2e0e1:	mov    DWORD PTR [rsp],eax
   2e0e4:	call   3670 <strtol@plt>
   2e0e9:	mov    edi,DWORD PTR [rsp]
   2e0ec:	xor    esi,esi
   2e0ee:	xor    ebx,ebx
   2e0f0:	call   2aa20 <MSAAlloc>
   2e0f5:	mov    DWORD PTR [rsp+0x4],0x0
   2e0fd:	mov    r12,rax
   2e100:	lea    rax,[rsp+0x2d]
   2e105:	mov    QWORD PTR [rsp+0x8],rax
   2e10a:	nop    WORD PTR [rax+rax*1+0x0]
   2e110:	mov    rdi,r13
   2e113:	call   2c370 <MSAFileGetLine>
   2e118:	mov    QWORD PTR [rsp+0x20],rax
   2e11d:	mov    r15,rax
   2e120:	test   rax,rax
   2e123:	je     2e208 <ReadPhylip+0x1e8>
   2e129:	call   3820 <__ctype_b_loc@plt>
   2e12e:	movsx  rdx,BYTE PTR [r15]
   2e132:	mov    rax,QWORD PTR [rax]
   2e135:	test   BYTE PTR [rax+rdx*2+0x1],0x20
   2e13a:	jne    2e110 <ReadPhylip+0xf0>
   2e13c:	mov    eax,DWORD PTR [rsp+0x4]
   2e140:	movsxd r14,ebx
   2e143:	lea    rbp,[r14*8+0x0]
   2e14b:	test   eax,eax
   2e14d:	je     2e1b0 <ReadPhylip+0x190>
   2e14f:	lea    rdx,[rsp+0x1c]
   2e154:	lea    rdi,[rsp+0x20]
   2e159:	lea    rsi,[rip+0x13b6c]        # 41ccc <CSWTCH.18+0x60c>
   2e160:	call   36c50 <sre_strtok>
   2e165:	mov    r15,rax
   2e168:	test   rax,rax
   2e16b:	je     2e240 <ReadPhylip+0x220>
   2e171:	mov    rdi,QWORD PTR [r12]
   2e175:	mov    ecx,DWORD PTR [rsp+0x1c]
   2e179:	mov    rdx,r15
   2e17c:	add    ebx,0x1
   2e17f:	mov    rax,QWORD PTR [r12+0x148]
   2e187:	add    rdi,rbp
   2e18a:	lea    r14,[rax+r14*4]
   2e18e:	mov    esi,DWORD PTR [r14]
   2e191:	call   36b70 <sre_strcat>
   2e196:	mov    DWORD PTR [r14],eax
   2e199:	cmp    DWORD PTR [rsp],ebx
   2e19c:	jne    2e110 <ReadPhylip+0xf0>
   2e1a2:	add    DWORD PTR [rsp+0x4],0x1
   2e1a7:	xor    ebx,ebx
   2e1a9:	jmp    2e110 <ReadPhylip+0xf0>
   2e1ae:	xchg   ax,ax
   2e1b0:	mov    rsi,r15
   2e1b3:	mov    r15,QWORD PTR [rsp+0x8]
   2e1b8:	mov    edx,0xa
   2e1bd:	mov    rdi,r15
   2e1c0:	call   34b0 <strncpy@plt>
   2e1c5:	mov    rdi,QWORD PTR [r12+0x138]
   2e1cd:	mov    rsi,r15
   2e1d0:	mov    QWORD PTR [rsp+0x8],r15
   2e1d5:	mov    BYTE PTR [rsp+0x37],0x0
   2e1da:	call   28080 <GKIStoreKey>
   2e1df:	mov    r15,QWORD PTR [r12+0x8]
   2e1e4:	mov    rdi,QWORD PTR [rsp+0x8]
   2e1e9:	mov    esi,0xffffffff
   2e1ee:	call   36ce0 <sre_strdup>
   2e1f3:	add    r15,rbp
   2e1f6:	mov    QWORD PTR [r15],rax
   2e1f9:	add    QWORD PTR [rsp+0x20],0xa
   2e1ff:	jmp    2e14f <ReadPhylip+0x12f>
   2e204:	nop    DWORD PTR [rax+0x0]
   2e208:	mov    eax,DWORD PTR [rsp]
   2e20b:	mov    rdi,r12
   2e20e:	mov    DWORD PTR [r12+0x1c],eax
   2e213:	call   2be90 <MSAVerifyParse>
   2e218:	mov    rax,QWORD PTR [rsp+0x38]
   2e21d:	xor    rax,QWORD PTR fs:0x28
   2e226:	jne    2e2a3 <ReadPhylip+0x283>
   2e228:	add    rsp,0x48
   2e22c:	mov    rax,r12
   2e22f:	pop    rbx
   2e230:	pop    rbp
   2e231:	pop    r12
   2e233:	pop    r13
   2e235:	pop    r14
   2e237:	pop    r15
   2e239:	ret    
   2e23a:	nop    WORD PTR [rax+rax*1+0x0]
   2e240:	mov    rdx,QWORD PTR [r13+0x8]
   2e244:	mov    esi,DWORD PTR [r13+0x10]
   2e248:	lea    rdi,[rip+0x13541]        # 41790 <CSWTCH.18+0xd0>
   2e24f:	xor    eax,eax
   2e251:	call   317f0 <Die>
   2e256:	jmp    2e171 <ReadPhylip+0x151>
   2e25b:	nop    DWORD PTR [rax+rax*1+0x0]
   2e260:	mov    rdi,r12
   2e263:	call   3aa60 <IsInt>
   2e268:	test   eax,eax
   2e26a:	je     2e0b6 <ReadPhylip+0x96>
   2e270:	jmp    2e0c8 <ReadPhylip+0xa8>
   2e275:	nop    DWORD PTR [rax]
   2e278:	xor    r12d,r12d
   2e27b:	jmp    2e218 <ReadPhylip+0x1f8>
   2e27d:	nop    DWORD PTR [rax]
   2e280:	mov    rsi,QWORD PTR [r13+0x8]
   2e284:	lea    rdi,[rip+0x1347d]        # 41708 <CSWTCH.18+0x48>
   2e28b:	xor    eax,eax
   2e28d:	call   317f0 <Die>
   2e292:	jmp    2e0a6 <ReadPhylip+0x86>
   2e297:	mov    DWORD PTR [rsp],0x0
   2e29e:	jmp    2e0e9 <ReadPhylip+0xc9>
   2e2a3:	call   3570 <__stack_chk_fail@plt>
   2e2a8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002e2b0 <WritePhylip>:
   2e2b0:	endbr64 
   2e2b4:	push   r15
   2e2b6:	lea    rdx,[rip+0x1342f]        # 416ec <CSWTCH.18+0x2c>
   2e2bd:	lea    r15,[rip+0x13431]        # 416f5 <CSWTCH.18+0x35>
   2e2c4:	push   r14
   2e2c6:	mov    r14,rdi
   2e2c9:	push   r13
   2e2cb:	push   r12
   2e2cd:	xor    r12d,r12d
   2e2d0:	push   rbp
   2e2d1:	mov    rbp,rsi
   2e2d4:	push   rbx
   2e2d5:	sub    rsp,0x48
   2e2d9:	mov    ecx,DWORD PTR [rsi+0x1c]
   2e2dc:	mov    r8d,DWORD PTR [rsi+0x18]
   2e2e0:	mov    esi,0x1
   2e2e5:	mov    rax,QWORD PTR fs:0x28
   2e2ee:	mov    QWORD PTR [rsp+0x38],rax
   2e2f3:	xor    eax,eax
   2e2f5:	call   37c0 <__fprintf_chk@plt>
   2e2fa:	mov    edx,DWORD PTR [rbp+0x18]
   2e2fd:	test   edx,edx
   2e2ff:	jle    2e3b0 <WritePhylip+0x100>
   2e305:	nop    DWORD PTR [rax]
   2e308:	mov    eax,DWORD PTR [rbp+0x1c]
   2e30b:	xor    ebx,ebx
   2e30d:	mov    r13,rsp
   2e310:	test   eax,eax
   2e312:	jg     2e342 <WritePhylip+0x92>
   2e314:	jmp    2e38a <WritePhylip+0xda>
   2e316:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e320:	mov    rcx,r13
   2e323:	lea    rdx,[rip+0x145fb]        # 42925 <cof.6115+0x125>
   2e32a:	mov    rdi,r14
   2e32d:	xor    eax,eax
   2e32f:	mov    esi,0x1
   2e334:	add    rbx,0x1
   2e338:	call   37c0 <__fprintf_chk@plt>
   2e33d:	cmp    DWORD PTR [rbp+0x1c],ebx
   2e340:	jle    2e38a <WritePhylip+0xda>
   2e342:	mov    rax,QWORD PTR [rbp+0x0]
   2e346:	mov    edx,0x32
   2e34b:	mov    rdi,r13
   2e34e:	mov    rsi,QWORD PTR [rax+rbx*8]
   2e352:	add    rsi,r12
   2e355:	call   34b0 <strncpy@plt>
   2e35a:	mov    BYTE PTR [rsp+0x32],0x0
   2e35f:	test   r12,r12
   2e362:	jne    2e320 <WritePhylip+0x70>
   2e364:	mov    rax,QWORD PTR [rbp+0x8]
   2e368:	mov    r8,r13
   2e36b:	mov    rdx,r15
   2e36e:	mov    esi,0x1
   2e373:	mov    rdi,r14
   2e376:	mov    rcx,QWORD PTR [rax+rbx*8]
   2e37a:	xor    eax,eax
   2e37c:	add    rbx,0x1
   2e380:	call   37c0 <__fprintf_chk@plt>
   2e385:	cmp    DWORD PTR [rbp+0x1c],ebx
   2e388:	jg     2e342 <WritePhylip+0x92>
   2e38a:	add    r12,0x32
   2e38e:	cmp    DWORD PTR [rbp+0x18],r12d
   2e392:	jle    2e3b0 <WritePhylip+0x100>
   2e394:	mov    rsi,r14
   2e397:	mov    edi,0xa
   2e39c:	call   3600 <fputc@plt>
   2e3a1:	jmp    2e308 <WritePhylip+0x58>
   2e3a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e3b0:	mov    rax,QWORD PTR [rsp+0x38]
   2e3b5:	xor    rax,QWORD PTR fs:0x28
   2e3be:	jne    2e3cf <WritePhylip+0x11f>
   2e3c0:	add    rsp,0x48
   2e3c4:	pop    rbx
   2e3c5:	pop    rbp
   2e3c6:	pop    r12
   2e3c8:	pop    r13
   2e3ca:	pop    r14
   2e3cc:	pop    r15
   2e3ce:	ret    
   2e3cf:	call   3570 <__stack_chk_fail@plt>
   2e3d4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e3de:	xchg   ax,ax

000000000002e3e0 <revcomp>:
   2e3e0:	endbr64 
   2e3e4:	test   rsi,rsi
   2e3e7:	je     2e560 <revcomp+0x180>
   2e3ed:	push   r14
   2e3ef:	push   r13
   2e3f1:	push   r12
   2e3f3:	push   rbp
   2e3f4:	mov    rbp,rdi
   2e3f7:	push   rbx
   2e3f8:	test   rdi,rdi
   2e3fb:	je     2e550 <revcomp+0x170>
   2e401:	call   310b0 <StrReverse>
   2e406:	movzx  r13d,BYTE PTR [rbp+0x0]
   2e40b:	test   r13b,r13b
   2e40e:	je     2e478 <revcomp+0x98>
   2e410:	call   3820 <__ctype_b_loc@plt>
   2e415:	mov    r14,rbp
   2e418:	lea    rbx,[rip+0x133a9]        # 417c8 <CSWTCH.18+0x108>
   2e41f:	mov    r12,rax
   2e422:	nop    WORD PTR [rax+rax*1+0x0]
   2e428:	movsx  edi,r13b
   2e42c:	call   35740 <sre_toupper>
   2e431:	movsx  edi,al
   2e434:	sub    eax,0x41
   2e437:	cmp    al,0x18
   2e439:	ja     2e458 <revcomp+0x78>
   2e43b:	movzx  eax,al
   2e43e:	movsxd rax,DWORD PTR [rbx+rax*4]
   2e442:	add    rax,rbx
   2e445:	notrack jmp rax
   2e448:	nop    DWORD PTR [rax+rax*1+0x0]
   2e450:	mov    edi,0x42
   2e455:	nop    DWORD PTR [rax]
   2e458:	movsx  rdx,BYTE PTR [r14]
   2e45c:	mov    rax,QWORD PTR [r12]
   2e460:	test   BYTE PTR [rax+rdx*2+0x1],0x2
   2e465:	jne    2e4a0 <revcomp+0xc0>
   2e467:	mov    BYTE PTR [r14],dil
   2e46a:	movzx  r13d,BYTE PTR [r14+0x1]
   2e46f:	add    r14,0x1
   2e473:	test   r13b,r13b
   2e476:	jne    2e428 <revcomp+0x48>
   2e478:	pop    rbx
   2e479:	mov    rax,rbp
   2e47c:	pop    rbp
   2e47d:	pop    r12
   2e47f:	pop    r13
   2e481:	pop    r14
   2e483:	ret    
   2e484:	nop    DWORD PTR [rax+0x0]
   2e488:	movsx  rdx,BYTE PTR [r14]
   2e48c:	mov    rax,QWORD PTR [r12]
   2e490:	mov    edi,0x41
   2e495:	test   BYTE PTR [rax+rdx*2+0x1],0x2
   2e49a:	je     2e467 <revcomp+0x87>
   2e49c:	nop    DWORD PTR [rax+0x0]
   2e4a0:	call   356f0 <sre_tolower>
   2e4a5:	mov    edi,eax
   2e4a7:	jmp    2e467 <revcomp+0x87>
   2e4a9:	nop    DWORD PTR [rax+0x0]
   2e4b0:	mov    edi,0x52
   2e4b5:	jmp    2e458 <revcomp+0x78>
   2e4b7:	nop    WORD PTR [rax+rax*1+0x0]
   2e4c0:	mov    edi,0x59
   2e4c5:	jmp    2e458 <revcomp+0x78>
   2e4c7:	nop    WORD PTR [rax+rax*1+0x0]
   2e4d0:	mov    edi,0x4b
   2e4d5:	jmp    2e458 <revcomp+0x78>
   2e4d7:	nop    WORD PTR [rax+rax*1+0x0]
   2e4e0:	mov    edi,0x4d
   2e4e5:	jmp    2e458 <revcomp+0x78>
   2e4ea:	nop    WORD PTR [rax+rax*1+0x0]
   2e4f0:	mov    edi,0x44
   2e4f5:	jmp    2e458 <revcomp+0x78>
   2e4fa:	nop    WORD PTR [rax+rax*1+0x0]
   2e500:	mov    edi,0x43
   2e505:	jmp    2e458 <revcomp+0x78>
   2e50a:	nop    WORD PTR [rax+rax*1+0x0]
   2e510:	mov    edi,0x48
   2e515:	jmp    2e458 <revcomp+0x78>
   2e51a:	nop    WORD PTR [rax+rax*1+0x0]
   2e520:	mov    edi,0x47
   2e525:	jmp    2e458 <revcomp+0x78>
   2e52a:	nop    WORD PTR [rax+rax*1+0x0]
   2e530:	mov    edi,0x56
   2e535:	jmp    2e458 <revcomp+0x78>
   2e53a:	nop    WORD PTR [rax+rax*1+0x0]
   2e540:	mov    edi,0x54
   2e545:	jmp    2e458 <revcomp+0x78>
   2e54a:	nop    WORD PTR [rax+rax*1+0x0]
   2e550:	pop    rbx
   2e551:	xor    eax,eax
   2e553:	pop    rbp
   2e554:	pop    r12
   2e556:	pop    r13
   2e558:	pop    r14
   2e55a:	ret    
   2e55b:	nop    DWORD PTR [rax+rax*1+0x0]
   2e560:	xor    eax,eax
   2e562:	ret    
   2e563:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e56d:	nop    DWORD PTR [rax]

000000000002e570 <rkcomp>:
   2e570:	endbr64 
   2e574:	push   r12
   2e576:	mov    r12,rdi
   2e579:	push   rbp
   2e57a:	push   rbx
   2e57b:	sub    rsp,0x20
   2e57f:	mov    rax,QWORD PTR fs:0x28
   2e588:	mov    QWORD PTR [rsp+0x18],rax
   2e58d:	xor    eax,eax
   2e58f:	call   3560 <strlen@plt>
   2e594:	cmp    eax,0x10
   2e597:	jbe    2e5b8 <rkcomp+0x48>
   2e599:	xor    eax,eax
   2e59b:	mov    rbx,QWORD PTR [rsp+0x18]
   2e5a0:	xor    rbx,QWORD PTR fs:0x28
   2e5a9:	jne    2e61e <rkcomp+0xae>
   2e5ab:	add    rsp,0x20
   2e5af:	pop    rbx
   2e5b0:	pop    rbp
   2e5b1:	pop    r12
   2e5b3:	ret    
   2e5b4:	nop    DWORD PTR [rax+0x0]
   2e5b8:	mov    rbx,rsp
   2e5bb:	mov    rsi,r12
   2e5be:	mov    rbp,rax
   2e5c1:	mov    rdi,rbx
   2e5c4:	call   30630 <seqencode>
   2e5c9:	test   eax,eax
   2e5cb:	je     2e599 <rkcomp+0x29>
   2e5cd:	mov    ecx,ebp
   2e5cf:	test   ebp,ebp
   2e5d1:	jle    2e618 <rkcomp+0xa8>
   2e5d3:	lea    eax,[rbp-0x1]
   2e5d6:	mov    rdx,rbx
   2e5d9:	lea    rdi,[rsp+rax*1+0x1]
   2e5de:	xor    eax,eax
   2e5e0:	movsx  rsi,BYTE PTR [rdx]
   2e5e4:	shl    rax,0x4
   2e5e8:	add    rdx,0x1
   2e5ec:	or     rax,rsi
   2e5ef:	cmp    rdx,rdi
   2e5f2:	jne    2e5e0 <rkcomp+0x70>
   2e5f4:	cmp    ebp,0xf
   2e5f7:	jg     2e59b <rkcomp+0x2b>
   2e5f9:	nop    DWORD PTR [rax+0x0]
   2e600:	shl    rax,0x4
   2e604:	add    ecx,0x1
   2e607:	or     rax,0xf
   2e60b:	cmp    ecx,0x10
   2e60e:	jne    2e600 <rkcomp+0x90>
   2e610:	jmp    2e59b <rkcomp+0x2b>
   2e612:	nop    WORD PTR [rax+rax*1+0x0]
   2e618:	xor    ecx,ecx
   2e61a:	xor    eax,eax
   2e61c:	jmp    2e600 <rkcomp+0x90>
   2e61e:	call   3570 <__stack_chk_fail@plt>
   2e623:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2e62e:	xchg   ax,ax

000000000002e630 <rkseq>:
   2e630:	endbr64 
   2e634:	mov    rcx,rsi
   2e637:	lea    r8,[rsi+0x10]
   2e63b:	xor    edx,edx
   2e63d:	nop    DWORD PTR [rax]
   2e640:	movsx  rax,BYTE PTR [rcx]
   2e644:	test   al,al
   2e646:	je     2e658 <rkseq+0x28>
   2e648:	shl    rdx,0x4
   2e64c:	add    rcx,0x1
   2e650:	or     rdx,rax
   2e653:	cmp    r8,rcx
   2e656:	jne    2e640 <rkseq+0x10>
   2e658:	cmp    BYTE PTR [rsi+0xf],0x0
   2e65c:	je     2e6ef <rkseq+0xbf>
   2e662:	mov    rax,rdx
   2e665:	and    rax,rdi
   2e668:	cmp    rdx,rax
   2e66b:	je     2e6f3 <rkseq+0xc3>
   2e671:	xor    eax,eax
   2e673:	jmp    2e683 <rkseq+0x53>
   2e675:	nop    DWORD PTR [rax]
   2e678:	mov    rcx,rdi
   2e67b:	and    rcx,rdx
   2e67e:	cmp    rcx,rdx
   2e681:	je     2e6e8 <rkseq+0xb8>
   2e683:	movsx  rcx,BYTE PTR [rsi+rax*1+0x10]
   2e689:	shl    rdx,0x4
   2e68d:	add    rax,0x1
   2e691:	or     rdx,rcx
   2e694:	cmp    BYTE PTR [rsi+rax*1+0xf],0x0
   2e699:	jne    2e678 <rkseq+0x48>
   2e69b:	or     rdx,0xf
   2e69f:	mov    rcx,rdx
   2e6a2:	and    rcx,rdi
   2e6a5:	cmp    rdx,rcx
   2e6a8:	je     2e6e9 <rkseq+0xb9>
   2e6aa:	lea    rcx,[rax+0x1]
   2e6ae:	shl    rdx,0x4
   2e6b2:	add    rax,0x10
   2e6b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e6c0:	or     rdx,0xf
   2e6c4:	mov    rsi,rdx
   2e6c7:	and    rsi,rdi
   2e6ca:	cmp    rsi,rdx
   2e6cd:	je     2e6ec <rkseq+0xbc>
   2e6cf:	add    rcx,0x1
   2e6d3:	shl    rdx,0x4
   2e6d7:	cmp    rcx,rax
   2e6da:	jne    2e6c0 <rkseq+0x90>
   2e6dc:	mov    eax,0xffffffff
   2e6e1:	ret    
   2e6e2:	nop    WORD PTR [rax+rax*1+0x0]
   2e6e8:	ret    
   2e6e9:	mov    rcx,rax
   2e6ec:	mov    eax,ecx
   2e6ee:	ret    
   2e6ef:	xor    eax,eax
   2e6f1:	jmp    2e69b <rkseq+0x6b>
   2e6f3:	xor    eax,eax
   2e6f5:	ret    
   2e6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002e700 <actually_write_selex>:
   2e700:	push   r15
   2e702:	mov    r15,rsi
   2e705:	push   r14
   2e707:	push   r13
   2e709:	push   r12
   2e70b:	mov    r12,rdi
   2e70e:	lea    edi,[rdx+0x65]
   2e711:	push   rbp
   2e712:	movsxd rdi,edi
   2e715:	push   rbx
   2e716:	sub    rsp,0x28
   2e71a:	mov    DWORD PTR [rsp+0x1c],edx
   2e71e:	call   36b0 <malloc@plt>
   2e723:	mov    edx,DWORD PTR [r15+0x1c]
   2e727:	mov    rbp,rax
   2e72a:	test   edx,edx
   2e72c:	jle    2ec79 <actually_write_selex+0x579>
   2e732:	mov    rax,QWORD PTR [r15+0x8]
   2e736:	sub    edx,0x1
   2e739:	xor    ebx,ebx
   2e73b:	lea    r14,[rax+0x8]
   2e73f:	lea    r13,[r14+rdx*8]
   2e743:	jmp    2e74c <actually_write_selex+0x4c>
   2e745:	nop    DWORD PTR [rax]
   2e748:	add    r14,0x8
   2e74c:	mov    rdi,QWORD PTR [rax]
   2e74f:	call   3560 <strlen@plt>
   2e754:	cmp    ebx,eax
   2e756:	cmovl  ebx,eax
   2e759:	mov    rax,r14
   2e75c:	cmp    r13,r14
   2e75f:	jne    2e748 <actually_write_selex+0x48>
   2e761:	cmp    ebx,0x6
   2e764:	mov    eax,0x6
   2e769:	cmovl  ebx,eax
   2e76c:	mov    r9d,DWORD PTR [r15+0xb8]
   2e773:	xor    r14d,r14d
   2e776:	lea    r13,[rip+0x130af]        # 4182c <CSWTCH.18+0x16c>
   2e77d:	test   r9d,r9d
   2e780:	jle    2e7bd <actually_write_selex+0xbd>
   2e782:	nop    WORD PTR [rax+rax*1+0x0]
   2e788:	mov    rax,QWORD PTR [r15+0xb0]
   2e78f:	mov    rdx,r13
   2e792:	mov    esi,0x1
   2e797:	mov    rdi,r12
   2e79a:	mov    rcx,QWORD PTR [rax+r14*8]
   2e79e:	xor    eax,eax
   2e7a0:	add    r14,0x1
   2e7a4:	call   37c0 <__fprintf_chk@plt>
   2e7a9:	mov    eax,DWORD PTR [r15+0xb8]
   2e7b0:	cmp    eax,r14d
   2e7b3:	jg     2e788 <actually_write_selex+0x88>
   2e7b5:	test   eax,eax
   2e7b7:	jg     2ebe6 <actually_write_selex+0x4e6>
   2e7bd:	mov    rcx,QWORD PTR [r15+0x28]
   2e7c1:	test   rcx,rcx
   2e7c4:	je     2e7dc <actually_write_selex+0xdc>
   2e7c6:	lea    rdx,[rip+0x13065]        # 41832 <CSWTCH.18+0x172>
   2e7cd:	mov    esi,0x1
   2e7d2:	mov    rdi,r12
   2e7d5:	xor    eax,eax
   2e7d7:	call   37c0 <__fprintf_chk@plt>
   2e7dc:	mov    rcx,QWORD PTR [r15+0x38]
   2e7e0:	test   rcx,rcx
   2e7e3:	je     2e7fb <actually_write_selex+0xfb>
   2e7e5:	lea    rdx,[rip+0x1304f]        # 4183b <CSWTCH.18+0x17b>
   2e7ec:	mov    esi,0x1
   2e7f1:	mov    rdi,r12
   2e7f4:	xor    eax,eax
   2e7f6:	call   37c0 <__fprintf_chk@plt>
   2e7fb:	mov    rcx,QWORD PTR [r15+0x30]
   2e7ff:	test   rcx,rcx
   2e802:	je     2e81a <actually_write_selex+0x11a>
   2e804:	lea    rdx,[rip+0x13039]        # 41844 <CSWTCH.18+0x184>
   2e80b:	mov    esi,0x1
   2e810:	mov    rdi,r12
   2e813:	xor    eax,eax
   2e815:	call   37c0 <__fprintf_chk@plt>
   2e81a:	mov    rcx,QWORD PTR [r15+0x40]
   2e81e:	test   rcx,rcx
   2e821:	je     2e839 <actually_write_selex+0x139>
   2e823:	lea    rdx,[rip+0x13023]        # 4184d <CSWTCH.18+0x18d>
   2e82a:	mov    esi,0x1
   2e82f:	mov    rdi,r12
   2e832:	xor    eax,eax
   2e834:	call   37c0 <__fprintf_chk@plt>
   2e839:	mov    r8d,DWORD PTR [r15+0xa0]
   2e840:	test   r8d,r8d
   2e843:	je     2e87a <actually_write_selex+0x17a>
   2e845:	mov    edi,DWORD PTR [r15+0xa4]
   2e84c:	pxor   xmm0,xmm0
   2e850:	cvtss2sd xmm0,DWORD PTR [r15+0x88]
   2e859:	test   edi,edi
   2e85b:	jne    2ec4e <actually_write_selex+0x54e>
   2e861:	lea    rdx,[rip+0x12ffe]        # 41866 <CSWTCH.18+0x1a6>
   2e868:	mov    esi,0x1
   2e86d:	mov    rdi,r12
   2e870:	mov    eax,0x1
   2e875:	call   37c0 <__fprintf_chk@plt>
   2e87a:	mov    esi,DWORD PTR [r15+0xa8]
   2e881:	test   esi,esi
   2e883:	je     2e8ba <actually_write_selex+0x1ba>
   2e885:	mov    ecx,DWORD PTR [r15+0xac]
   2e88c:	pxor   xmm0,xmm0
   2e890:	cvtss2sd xmm0,DWORD PTR [r15+0x90]
   2e899:	test   ecx,ecx
   2e89b:	jne    2ebf8 <actually_write_selex+0x4f8>
   2e8a1:	lea    rdx,[rip+0x12fd9]        # 41881 <CSWTCH.18+0x1c1>
   2e8a8:	mov    esi,0x1
   2e8ad:	mov    rdi,r12
   2e8b0:	mov    eax,0x1
   2e8b5:	call   37c0 <__fprintf_chk@plt>
   2e8ba:	mov    edx,DWORD PTR [r15+0x98]
   2e8c1:	test   edx,edx
   2e8c3:	je     2e8fa <actually_write_selex+0x1fa>
   2e8c5:	mov    eax,DWORD PTR [r15+0x9c]
   2e8cc:	pxor   xmm0,xmm0
   2e8d0:	cvtss2sd xmm0,DWORD PTR [r15+0x80]
   2e8d9:	test   eax,eax
   2e8db:	jne    2ec23 <actually_write_selex+0x523>
   2e8e1:	lea    rdx,[rip+0x12fb4]        # 4189c <CSWTCH.18+0x1dc>
   2e8e8:	mov    esi,0x1
   2e8ed:	mov    rdi,r12
   2e8f0:	mov    eax,0x1
   2e8f5:	call   37c0 <__fprintf_chk@plt>
   2e8fa:	mov    eax,DWORD PTR [r15+0x1c]
   2e8fe:	xor    r14d,r14d
   2e901:	lea    r13,[rip+0xf292]        # 3db9a <_IO_stdin_used+0xb9a>
   2e908:	test   eax,eax
   2e90a:	jle    2e9a4 <actually_write_selex+0x2a4>
   2e910:	mov    rax,QWORD PTR [r15+0x68]
   2e914:	lea    rcx,[r14*8+0x0]
   2e91c:	lea    rdx,[rip+0xf277]        # 3db9a <_IO_stdin_used+0xb9a>
   2e923:	test   rax,rax
   2e926:	je     2e933 <actually_write_selex+0x233>
   2e928:	mov    rdx,QWORD PTR [rax+r14*8]
   2e92c:	test   rdx,rdx
   2e92f:	cmove  rdx,r13
   2e933:	mov    rsi,QWORD PTR [r15+0x60]
   2e937:	lea    rax,[rip+0xf25c]        # 3db9a <_IO_stdin_used+0xb9a>
   2e93e:	test   rsi,rsi
   2e941:	je     2e94e <actually_write_selex+0x24e>
   2e943:	mov    rax,QWORD PTR [rsi+rcx*1]
   2e947:	test   rax,rax
   2e94a:	cmove  rax,r13
   2e94e:	mov    rsi,QWORD PTR [r15+0x10]
   2e952:	pxor   xmm0,xmm0
   2e956:	mov    r8d,ebx
   2e959:	mov    rdi,r12
   2e95c:	cvtss2sd xmm0,DWORD PTR [rsi+r14*4]
   2e962:	mov    rsi,QWORD PTR [r15+0x8]
   2e966:	add    r14,0x1
   2e96a:	mov    r9,QWORD PTR [rsi+rcx*1]
   2e96e:	push   rdx
   2e96f:	mov    ecx,ebx
   2e971:	lea    rdx,[rip+0x12f98]        # 41910 <CSWTCH.18+0x250>
   2e978:	push   0x0
   2e97a:	mov    esi,0x1
   2e97f:	push   0x0
   2e981:	push   0x0
   2e983:	push   rax
   2e984:	lea    rax,[rip+0xf20f]        # 3db9a <_IO_stdin_used+0xb9a>
   2e98b:	push   rax
   2e98c:	mov    eax,0x1
   2e991:	call   37c0 <__fprintf_chk@plt>
   2e996:	add    rsp,0x30
   2e99a:	cmp    DWORD PTR [r15+0x1c],r14d
   2e99e:	jg     2e910 <actually_write_selex+0x210>
   2e9a4:	mov    rsi,r12
   2e9a7:	mov    edi,0xa
   2e9ac:	call   3600 <fputc@plt>
   2e9b1:	mov    eax,DWORD PTR [r15+0x18]
   2e9b5:	test   eax,eax
   2e9b7:	jle    2ebd0 <actually_write_selex+0x4d0>
   2e9bd:	movsxd r13,DWORD PTR [rsp+0x1c]
   2e9c2:	mov    QWORD PTR [rsp],0x0
   2e9ca:	mov    DWORD PTR [rsp+0x18],0x0
   2e9d2:	lea    rax,[rbp+r13*1+0x0]
   2e9d7:	mov    QWORD PTR [rsp+0x8],rax
   2e9dc:	nop    DWORD PTR [rax+0x0]
   2e9e0:	mov    rsi,QWORD PTR [r15+0x48]
   2e9e4:	test   rsi,rsi
   2e9e7:	je     2ea28 <actually_write_selex+0x328>
   2e9e9:	add    rsi,QWORD PTR [rsp]
   2e9ed:	mov    rdx,r13
   2e9f0:	mov    rdi,rbp
   2e9f3:	call   34b0 <strncpy@plt>
   2e9f8:	sub    rsp,0x8
   2e9fc:	mov    r8d,ebx
   2e9ff:	mov    ecx,ebx
   2ea01:	push   rbp
   2ea02:	lea    r9,[rip+0x12e9e]        # 418a7 <CSWTCH.18+0x1e7>
   2ea09:	mov    esi,0x1
   2ea0e:	mov    rdi,r12
   2ea11:	lea    rdx,[rip+0x14486]        # 42e9e <cof.6115+0x69e>
   2ea18:	xor    eax,eax
   2ea1a:	mov    BYTE PTR [rbp+r13*1+0x0],0x0
   2ea20:	call   37c0 <__fprintf_chk@plt>
   2ea25:	pop    r14
   2ea27:	pop    rax
   2ea28:	mov    rsi,QWORD PTR [r15+0x58]
   2ea2c:	test   rsi,rsi
   2ea2f:	je     2ea71 <actually_write_selex+0x371>
   2ea31:	add    rsi,QWORD PTR [rsp]
   2ea35:	mov    rdx,r13
   2ea38:	mov    rdi,rbp
   2ea3b:	call   34b0 <strncpy@plt>
   2ea40:	sub    rsp,0x8
   2ea44:	mov    r8d,ebx
   2ea47:	mov    ecx,ebx
   2ea49:	push   rbp
   2ea4a:	lea    r9,[rip+0x12e5b]        # 418ac <CSWTCH.18+0x1ec>
   2ea51:	mov    esi,0x1
   2ea56:	mov    rdi,r12
   2ea59:	lea    rdx,[rip+0x1443e]        # 42e9e <cof.6115+0x69e>
   2ea60:	xor    eax,eax
   2ea62:	mov    BYTE PTR [rbp+r13*1+0x0],0x0
   2ea68:	call   37c0 <__fprintf_chk@plt>
   2ea6d:	pop    r10
   2ea6f:	pop    r11
   2ea71:	mov    r9d,DWORD PTR [r15+0x1c]
   2ea75:	xor    r14d,r14d
   2ea78:	test   r9d,r9d
   2ea7b:	jle    2eb98 <actually_write_selex+0x498>
   2ea81:	nop    DWORD PTR [rax+0x0]
   2ea88:	lea    rax,[r14*8+0x0]
   2ea90:	mov    rsi,QWORD PTR [rsp]
   2ea94:	mov    rdx,r13
   2ea97:	mov    rdi,rbp
   2ea9a:	mov    QWORD PTR [rsp+0x10],rax
   2ea9f:	mov    rax,QWORD PTR [r15]
   2eaa2:	add    rsi,QWORD PTR [rax+r14*8]
   2eaa6:	call   34b0 <strncpy@plt>
   2eaab:	mov    rcx,QWORD PTR [rsp+0x8]
   2eab0:	mov    r8d,ebx
   2eab3:	mov    rdi,r12
   2eab6:	mov    rax,QWORD PTR [r15+0x8]
   2eaba:	sub    rsp,0x8
   2eabe:	mov    esi,0x1
   2eac3:	lea    rdx,[rip+0x143d4]        # 42e9e <cof.6115+0x69e>
   2eaca:	mov    BYTE PTR [rcx],0x0
   2eacd:	mov    ecx,ebx
   2eacf:	mov    r9,QWORD PTR [rax+r14*8]
   2ead3:	push   rbp
   2ead4:	xor    eax,eax
   2ead6:	call   37c0 <__fprintf_chk@plt>
   2eadb:	mov    rax,QWORD PTR [r15+0x70]
   2eadf:	pop    rdi
   2eae0:	pop    r8
   2eae2:	test   rax,rax
   2eae5:	je     2eb30 <actually_write_selex+0x430>
   2eae7:	mov    rsi,QWORD PTR [rax+r14*8]
   2eaeb:	test   rsi,rsi
   2eaee:	je     2eb30 <actually_write_selex+0x430>
   2eaf0:	add    rsi,QWORD PTR [rsp]
   2eaf4:	mov    rdx,r13
   2eaf7:	mov    rdi,rbp
   2eafa:	call   34b0 <strncpy@plt>
   2eaff:	mov    rcx,QWORD PTR [rsp+0x8]
   2eb04:	sub    rsp,0x8
   2eb08:	xor    eax,eax
   2eb0a:	mov    esi,0x1
   2eb0f:	mov    r8d,ebx
   2eb12:	mov    rdi,r12
   2eb15:	mov    BYTE PTR [rcx],0x0
   2eb18:	lea    r9,[rip+0x12d92]        # 418b1 <CSWTCH.18+0x1f1>
   2eb1f:	mov    ecx,ebx
   2eb21:	lea    rdx,[rip+0x14376]        # 42e9e <cof.6115+0x69e>
   2eb28:	push   rbp
   2eb29:	call   37c0 <__fprintf_chk@plt>
   2eb2e:	pop    rcx
   2eb2f:	pop    rsi
   2eb30:	mov    rax,QWORD PTR [r15+0x78]
   2eb34:	test   rax,rax
   2eb37:	je     2eb8a <actually_write_selex+0x48a>
   2eb39:	lea    rdi,[r14*8+0x0]
   2eb41:	mov    rsi,QWORD PTR [rax+rdi*1]
   2eb45:	test   rsi,rsi
   2eb48:	je     2eb8a <actually_write_selex+0x48a>
   2eb4a:	add    rsi,QWORD PTR [rsp]
   2eb4e:	mov    rdx,r13
   2eb51:	mov    rdi,rbp
   2eb54:	call   34b0 <strncpy@plt>
   2eb59:	mov    rax,QWORD PTR [rsp+0x8]
   2eb5e:	sub    rsp,0x8
   2eb62:	mov    ecx,ebx
   2eb64:	lea    rdx,[rip+0x14333]        # 42e9e <cof.6115+0x69e>
   2eb6b:	mov    r8d,ebx
   2eb6e:	mov    esi,0x1
   2eb73:	mov    rdi,r12
   2eb76:	mov    BYTE PTR [rax],0x0
   2eb79:	lea    r9,[rip+0x12d36]        # 418b6 <CSWTCH.18+0x1f6>
   2eb80:	xor    eax,eax
   2eb82:	push   rbp
   2eb83:	call   37c0 <__fprintf_chk@plt>
   2eb88:	pop    rax
   2eb89:	pop    rdx
   2eb8a:	add    r14,0x1
   2eb8e:	cmp    DWORD PTR [r15+0x1c],r14d
   2eb92:	jg     2ea88 <actually_write_selex+0x388>
   2eb98:	mov    edx,DWORD PTR [rsp+0x1c]
   2eb9c:	add    DWORD PTR [rsp+0x18],edx
   2eba0:	mov    eax,DWORD PTR [rsp+0x18]
   2eba4:	cmp    DWORD PTR [r15+0x18],eax
   2eba8:	jle    2ebd0 <actually_write_selex+0x4d0>
   2ebaa:	mov    eax,DWORD PTR [rsp+0x18]
   2ebae:	test   eax,eax
   2ebb0:	jle    2ebbf <actually_write_selex+0x4bf>
   2ebb2:	mov    rsi,r12
   2ebb5:	mov    edi,0xa
   2ebba:	call   3600 <fputc@plt>
   2ebbf:	add    QWORD PTR [rsp],r13
   2ebc3:	jmp    2e9e0 <actually_write_selex+0x2e0>
   2ebc8:	nop    DWORD PTR [rax+rax*1+0x0]
   2ebd0:	add    rsp,0x28
   2ebd4:	mov    rdi,rbp
   2ebd7:	pop    rbx
   2ebd8:	pop    rbp
   2ebd9:	pop    r12
   2ebdb:	pop    r13
   2ebdd:	pop    r14
   2ebdf:	pop    r15
   2ebe1:	jmp    3460 <free@plt>
   2ebe6:	mov    rsi,r12
   2ebe9:	mov    edi,0xa
   2ebee:	call   3600 <fputc@plt>
   2ebf3:	jmp    2e7bd <actually_write_selex+0xbd>
   2ebf8:	pxor   xmm1,xmm1
   2ebfc:	mov    esi,0x1
   2ec01:	mov    rdi,r12
   2ec04:	mov    eax,0x2
   2ec09:	cvtss2sd xmm1,DWORD PTR [r15+0x94]
   2ec12:	lea    rdx,[rip+0x12c58]        # 41871 <CSWTCH.18+0x1b1>
   2ec19:	call   37c0 <__fprintf_chk@plt>
   2ec1e:	jmp    2e8ba <actually_write_selex+0x1ba>
   2ec23:	pxor   xmm1,xmm1
   2ec27:	mov    esi,0x1
   2ec2c:	mov    rdi,r12
   2ec2f:	mov    eax,0x2
   2ec34:	cvtss2sd xmm1,DWORD PTR [r15+0x84]
   2ec3d:	lea    rdx,[rip+0x12c48]        # 4188c <CSWTCH.18+0x1cc>
   2ec44:	call   37c0 <__fprintf_chk@plt>
   2ec49:	jmp    2e8fa <actually_write_selex+0x1fa>
   2ec4e:	pxor   xmm1,xmm1
   2ec52:	mov    esi,0x1
   2ec57:	mov    rdi,r12
   2ec5a:	mov    eax,0x2
   2ec5f:	cvtss2sd xmm1,DWORD PTR [r15+0x8c]
   2ec68:	lea    rdx,[rip+0x12be7]        # 41856 <CSWTCH.18+0x196>
   2ec6f:	call   37c0 <__fprintf_chk@plt>
   2ec74:	jmp    2e87a <actually_write_selex+0x17a>
   2ec79:	mov    ebx,0x6
   2ec7e:	jmp    2e76c <actually_write_selex+0x6c>
   2ec83:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2ec8e:	xchg   ax,ax

000000000002ec90 <copy_alignment_line.constprop.0>:
   2ec90:	movsxd rsi,esi
   2ec93:	add    rdi,rsi
   2ec96:	test   r8d,r8d
   2ec99:	jle    2ecaf <copy_alignment_line.constprop.0+0x1f>
   2ec9b:	xor    eax,eax
   2ec9d:	nop    DWORD PTR [rax]
   2eca0:	cmp    BYTE PTR [rcx],0x1
   2eca3:	sbb    rcx,0xffffffffffffffff
   2eca7:	add    eax,0x1
   2ecaa:	cmp    eax,r8d
   2ecad:	jne    2eca0 <copy_alignment_line.constprop.0+0x10>
   2ecaf:	cmp    r8d,r9d
   2ecb2:	jg     2ecf8 <copy_alignment_line.constprop.0+0x68>
   2ecb4:	mov    esi,0x2e
   2ecb9:	jmp    2ece3 <copy_alignment_line.constprop.0+0x53>
   2ecbb:	nop    DWORD PTR [rax+rax*1+0x0]
   2ecc0:	test   al,al
   2ecc2:	je     2ecef <copy_alignment_line.constprop.0+0x5f>
   2ecc4:	cmp    al,0xa
   2ecc6:	je     2ecef <copy_alignment_line.constprop.0+0x5f>
   2ecc8:	cmp    al,0x20
   2ecca:	cmove  eax,esi
   2eccd:	mov    BYTE PTR [rdi],al
   2eccf:	add    rdi,0x1
   2ecd3:	cmp    BYTE PTR [rcx],0x1
   2ecd6:	sbb    rcx,0xffffffffffffffff
   2ecda:	add    r8d,0x1
   2ecde:	cmp    r8d,r9d
   2ece1:	jg     2ecf8 <copy_alignment_line.constprop.0+0x68>
   2ece3:	movzx  eax,BYTE PTR [rcx]
   2ece6:	cmp    al,0x9
   2ece8:	je     2ed00 <copy_alignment_line.constprop.0+0x70>
   2ecea:	cmp    edx,r8d
   2eced:	jl     2ecc0 <copy_alignment_line.constprop.0+0x30>
   2ecef:	mov    BYTE PTR [rdi],0x2e
   2ecf2:	jmp    2eccf <copy_alignment_line.constprop.0+0x3f>
   2ecf4:	nop    DWORD PTR [rax+0x0]
   2ecf8:	mov    eax,0x1
   2ecfd:	ret    
   2ecfe:	xchg   ax,ax
   2ed00:	sub    rsp,0x8
   2ed04:	xor    eax,eax
   2ed06:	lea    rdi,[rip+0x12c2b]        # 41938 <CSWTCH.18+0x278>
   2ed0d:	call   318f0 <Warn>
   2ed12:	xor    eax,eax
   2ed14:	add    rsp,0x8
   2ed18:	ret    
   2ed19:	nop    DWORD PTR [rax+0x0]

000000000002ed20 <ReadSELEX>:
   2ed20:	endbr64 
   2ed24:	push   r15
   2ed26:	push   r14
   2ed28:	push   r13
   2ed2a:	push   r12
   2ed2c:	push   rbp
   2ed2d:	push   rbx
   2ed2e:	sub    rsp,0x1000
   2ed35:	or     QWORD PTR [rsp],0x0
   2ed3a:	sub    rsp,0x1000
   2ed41:	or     QWORD PTR [rsp],0x0
   2ed46:	sub    rsp,0xe8
   2ed4d:	mov    QWORD PTR [rsp+0x48],rdi
   2ed52:	mov    rbx,rdi
   2ed55:	mov    rdi,QWORD PTR [rdi]
   2ed58:	mov    rax,QWORD PTR fs:0x28
   2ed61:	mov    QWORD PTR [rsp+0x20d8],rax
   2ed69:	xor    eax,eax
   2ed6b:	call   3660 <feof@plt>
   2ed70:	test   eax,eax
   2ed72:	jne    30155 <ReadSELEX+0x1435>
   2ed78:	cmp    QWORD PTR [rbx+0x30],0x0
   2ed7d:	jne    30089 <ReadSELEX+0x1369>
   2ed83:	mov    rax,QWORD PTR [rsp+0x48]
   2ed88:	lea    rdi,[rsp+0x60]
   2ed8d:	lea    r12,[rsp+0xd0]
   2ed95:	mov    QWORD PTR [rsp+0x50],rdi
   2ed9a:	lea    r14,[rsp+0x10d0]
   2eda2:	mov    r15,QWORD PTR [rax]
   2eda5:	call   249c0 <InitAinfo>
   2edaa:	mov    DWORD PTR [rsp+0x8],0x0
   2edb2:	mov    DWORD PTR [rsp+0x28],0x0
   2edba:	nop    WORD PTR [rax+rax*1+0x0]
   2edc0:	mov    rdx,r15
   2edc3:	mov    esi,0x1000
   2edc8:	mov    rdi,r12
   2edcb:	call   3620 <fgets@plt>
   2edd0:	test   rax,rax
   2edd3:	je     2f287 <ReadSELEX+0x567>
   2edd9:	mov    edx,0x1000
   2edde:	mov    rsi,r12
   2ede1:	mov    rdi,r14
   2ede4:	call   3700 <__strcpy_chk@plt>
   2ede9:	cmp    BYTE PTR [rsp+0xd0],0x23
   2edf1:	je     2eff0 <ReadSELEX+0x2d0>
   2edf7:	lea    rsi,[rip+0x12ece]        # 41ccc <CSWTCH.18+0x60c>
   2edfe:	mov    rdi,r14
   2ee01:	call   3770 <strtok@plt>
   2ee06:	mov    rbp,rax
   2ee09:	test   rax,rax
   2ee0c:	je     2edc0 <ReadSELEX+0xa0>
   2ee0e:	movsx  esi,BYTE PTR [rax]
   2ee11:	lea    rdi,[rip+0x1f0b0]        # 4dec8 <commentsyms>
   2ee18:	call   3590 <strchr@plt>
   2ee1d:	test   rax,rax
   2ee20:	jne    2edc0 <ReadSELEX+0xa0>
   2ee22:	mov    DWORD PTR [rsp+0x2c],0x0
   2ee2a:	mov    r13,rbp
   2ee2d:	mov    QWORD PTR [rsp+0x40],0x0
   2ee36:	mov    DWORD PTR [rsp+0x58],0x0
   2ee3e:	mov    QWORD PTR [rsp+0x10],0x0
   2ee47:	nop    WORD PTR [rax+rax*1+0x0]
   2ee50:	mov    rdi,r15
   2ee53:	mov    ebx,DWORD PTR [rsp+0x10]
   2ee57:	call   3660 <feof@plt>
   2ee5c:	mov    ebp,eax
   2ee5e:	test   eax,eax
   2ee60:	jne    2f2ba <ReadSELEX+0x59a>
   2ee66:	cmp    QWORD PTR [rsp+0x10],0x0
   2ee6c:	jne    2f20e <ReadSELEX+0x4ee>
   2ee72:	mov    edx,0x8
   2ee77:	mov    esi,0x97
   2ee7c:	lea    rdi,[rip+0x12a38]        # 418bb <CSWTCH.18+0x1fb>
   2ee83:	movabs rbx,0xffffffff00001001
   2ee8d:	call   36810 <sre_malloc>
   2ee92:	mov    QWORD PTR [rsp+0x38],0x1
   2ee9b:	mov    QWORD PTR [rsp+0x40],rax
   2eea0:	mov    QWORD PTR [rsp+0x30],rax
   2eea5:	mov    QWORD PTR [rax],rbx
   2eea8:	test   r13,r13
   2eeab:	je     30148 <ReadSELEX+0x1428>
   2eeb1:	xor    ebx,ebx
   2eeb3:	lea    eax,[rbp+0x1]
   2eeb6:	cmp    QWORD PTR [rsp+0x10],0x0
   2eebc:	mov    DWORD PTR [rsp+0x18],eax
   2eec0:	lea    rax,[rbx+0x168]
   2eec7:	mov    QWORD PTR [rsp+0x20],rax
   2eecc:	jne    2f080 <ReadSELEX+0x360>
   2eed2:	test   ebp,ebp
   2eed4:	jne    2f160 <ReadSELEX+0x440>
   2eeda:	mov    edx,0x168
   2eedf:	mov    esi,0xa4
   2eee4:	lea    rdi,[rip+0x129d0]        # 418bb <CSWTCH.18+0x1fb>
   2eeeb:	call   36810 <sre_malloc>
   2eef0:	mov    QWORD PTR [rsp+0x88],rax
   2eef8:	lea    rdi,[rax+rbx*1]
   2eefc:	mov    edx,0x1
   2ef01:	mov    rsi,r13
   2ef04:	mov    DWORD PTR [rdi],0x0
   2ef0a:	call   32440 <SetSeqinfoString>
   2ef0f:	xor    edi,edi
   2ef11:	lea    rsi,[rip+0x12db4]        # 41ccc <CSWTCH.18+0x60c>
   2ef18:	call   3770 <strtok@plt>
   2ef1d:	test   rax,rax
   2ef20:	jne    2f0b0 <ReadSELEX+0x390>
   2ef26:	lea    rbp,[rip+0x1297f]        # 418ac <CSWTCH.18+0x1ec>
   2ef2d:	jmp    2ef74 <ReadSELEX+0x254>
   2ef2f:	nop
   2ef30:	mov    rax,QWORD PTR [rsp+0x88]
   2ef38:	add    rax,rbx
   2ef3b:	or     DWORD PTR [rax],0x200
   2ef41:	lea    rsi,[rip+0x12d84]        # 41ccc <CSWTCH.18+0x60c>
   2ef48:	mov    rdi,r14
   2ef4b:	call   3770 <strtok@plt>
   2ef50:	mov    r13,rax
   2ef53:	test   rax,rax
   2ef56:	je     2f190 <ReadSELEX+0x470>
   2ef5c:	movsx  esi,BYTE PTR [rax]
   2ef5f:	lea    rdi,[rip+0x1ef62]        # 4dec8 <commentsyms>
   2ef66:	call   3590 <strchr@plt>
   2ef6b:	test   rax,rax
   2ef6e:	je     2f150 <ReadSELEX+0x430>
   2ef74:	mov    rdx,r15
   2ef77:	mov    esi,0x1000
   2ef7c:	mov    rdi,r12
   2ef7f:	call   3620 <fgets@plt>
   2ef84:	test   rax,rax
   2ef87:	je     2f190 <ReadSELEX+0x470>
   2ef8d:	mov    rsi,r12
   2ef90:	mov    rdi,r14
   2ef93:	mov    edx,0x1000
   2ef98:	call   3700 <__strcpy_chk@plt>
   2ef9d:	mov    ecx,0x4
   2efa2:	mov    rsi,r12
   2efa5:	lea    rdi,[rip+0x12905]        # 418b1 <CSWTCH.18+0x1f1>
   2efac:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2efae:	seta   al
   2efb1:	sbb    al,0x0
   2efb3:	test   al,al
   2efb5:	je     2ef30 <ReadSELEX+0x210>
   2efbb:	mov    ecx,0x4
   2efc0:	mov    rsi,r12
   2efc3:	lea    rdi,[rip+0x128ec]        # 418b6 <CSWTCH.18+0x1f6>
   2efca:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2efcc:	seta   al
   2efcf:	sbb    al,0x0
   2efd1:	test   al,al
   2efd3:	jne    2f028 <ReadSELEX+0x308>
   2efd5:	mov    rax,QWORD PTR [rsp+0x88]
   2efdd:	add    rax,rbx
   2efe0:	or     DWORD PTR [rax],0x400
   2efe6:	jmp    2ef41 <ReadSELEX+0x221>
   2efeb:	nop    DWORD PTR [rax+rax*1+0x0]
   2eff0:	cmp    DWORD PTR [r12],0x53433d23
   2eff8:	je     2f015 <ReadSELEX+0x2f5>
   2effa:	cmp    DWORD PTR [r12],0x46523d23
   2f002:	mov    eax,0x1
   2f007:	cmovne eax,DWORD PTR [rsp+0x8]
   2f00c:	mov    DWORD PTR [rsp+0x8],eax
   2f010:	jmp    2edf7 <ReadSELEX+0xd7>
   2f015:	mov    DWORD PTR [rsp+0x28],0x1
   2f01d:	jmp    2edf7 <ReadSELEX+0xd7>
   2f022:	nop    WORD PTR [rax+rax*1+0x0]
   2f028:	mov    ecx,0x4
   2f02d:	mov    rsi,r12
   2f030:	lea    rdi,[rip+0x12870]        # 418a7 <CSWTCH.18+0x1e7>
   2f037:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f039:	seta   al
   2f03c:	sbb    al,0x0
   2f03e:	test   al,al
   2f040:	je     2f070 <ReadSELEX+0x350>
   2f042:	mov    ecx,0x4
   2f047:	mov    rsi,r12
   2f04a:	mov    rdi,rbp
   2f04d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f04f:	seta   al
   2f052:	sbb    al,0x0
   2f054:	test   al,al
   2f056:	mov    eax,0x1
   2f05b:	cmovne eax,DWORD PTR [rsp+0x8]
   2f060:	mov    DWORD PTR [rsp+0x8],eax
   2f064:	jmp    2ef41 <ReadSELEX+0x221>
   2f069:	nop    DWORD PTR [rax+0x0]
   2f070:	mov    DWORD PTR [rsp+0x28],0x1
   2f078:	jmp    2ef41 <ReadSELEX+0x221>
   2f07d:	nop    DWORD PTR [rax]
   2f080:	mov    rdi,QWORD PTR [rsp+0x88]
   2f088:	mov    rsi,r13
   2f08b:	add    rdi,rbx
   2f08e:	add    rdi,0x4
   2f092:	call   3640 <strcmp@plt>
   2f097:	test   eax,eax
   2f099:	mov    eax,0x1
   2f09e:	cmove  eax,DWORD PTR [rsp+0x2c]
   2f0a3:	mov    DWORD PTR [rsp+0x2c],eax
   2f0a7:	jmp    2ef0f <ReadSELEX+0x1ef>
   2f0ac:	nop    DWORD PTR [rax+0x0]
   2f0b0:	mov    rcx,QWORD PTR [rsp+0x30]
   2f0b5:	sub    rax,r14
   2f0b8:	movsxd rdx,DWORD PTR [rcx]
   2f0bb:	cmp    rax,rdx
   2f0be:	jge    2f0c2 <ReadSELEX+0x3a2>
   2f0c0:	mov    DWORD PTR [rcx],eax
   2f0c2:	mov    rdx,r12
   2f0c5:	mov    ecx,DWORD PTR [rdx]
   2f0c7:	add    rdx,0x4
   2f0cb:	lea    eax,[rcx-0x1010101]
   2f0d1:	not    ecx
   2f0d3:	and    eax,ecx
   2f0d5:	and    eax,0x80808080
   2f0da:	je     2f0c5 <ReadSELEX+0x3a5>
   2f0dc:	mov    ecx,eax
   2f0de:	lea    rbp,[rip+0x12be7]        # 41ccc <CSWTCH.18+0x60c>
   2f0e5:	shr    ecx,0x10
   2f0e8:	test   eax,0x8080
   2f0ed:	cmove  eax,ecx
   2f0f0:	lea    rcx,[rdx+0x2]
   2f0f4:	cmove  rdx,rcx
   2f0f8:	mov    ecx,eax
   2f0fa:	add    cl,al
   2f0fc:	sbb    rdx,0x3
   2f100:	lea    r13,[rdx-0x1]
   2f104:	jmp    2f114 <ReadSELEX+0x3f4>
   2f106:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f110:	sub    r13,0x1
   2f114:	movsx  esi,BYTE PTR [r13+0x0]
   2f119:	mov    rdi,rbp
   2f11c:	call   3590 <strchr@plt>
   2f121:	test   rax,rax
   2f124:	jne    2f110 <ReadSELEX+0x3f0>
   2f126:	mov    rcx,QWORD PTR [rsp+0x30]
   2f12b:	mov    rdx,r13
   2f12e:	sub    rdx,r12
   2f131:	movsxd rax,DWORD PTR [rcx+0x4]
   2f135:	cmp    rdx,rax
   2f138:	jle    2ef26 <ReadSELEX+0x206>
   2f13e:	mov    DWORD PTR [rcx+0x4],edx
   2f141:	jmp    2ef26 <ReadSELEX+0x206>
   2f146:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f150:	mov    rbx,QWORD PTR [rsp+0x20]
   2f155:	mov    ebp,DWORD PTR [rsp+0x18]
   2f159:	jmp    2eeb3 <ReadSELEX+0x193>
   2f15e:	xchg   ax,ax
   2f160:	mov    rdx,QWORD PTR [rsp+0x88]
   2f168:	lea    rcx,[rbx+0x168]
   2f16f:	mov    esi,0xa6
   2f174:	lea    rdi,[rip+0x12740]        # 418bb <CSWTCH.18+0x1fb>
   2f17b:	call   36860 <sre_realloc>
   2f180:	mov    QWORD PTR [rsp+0x88],rax
   2f188:	jmp    2eef8 <ReadSELEX+0x1d8>
   2f18d:	nop    DWORD PTR [rax]
   2f190:	cmp    QWORD PTR [rsp+0x10],0x0
   2f196:	jne    2f266 <ReadSELEX+0x546>
   2f19c:	mov    eax,DWORD PTR [rsp+0x18]
   2f1a0:	mov    DWORD PTR [rsp+0x58],eax
   2f1a4:	lea    rbx,[rip+0x12b21]        # 41ccc <CSWTCH.18+0x60c>
   2f1ab:	nop    DWORD PTR [rax+rax*1+0x0]
   2f1b0:	mov    rdx,r15
   2f1b3:	mov    esi,0x1000
   2f1b8:	mov    rdi,r12
   2f1bb:	call   3620 <fgets@plt>
   2f1c0:	mov    r13,rax
   2f1c3:	test   rax,rax
   2f1c6:	je     2f1ff <ReadSELEX+0x4df>
   2f1c8:	mov    edx,0x1000
   2f1cd:	mov    rsi,r12
   2f1d0:	mov    rdi,r14
   2f1d3:	call   3700 <__strcpy_chk@plt>
   2f1d8:	mov    rsi,rbx
   2f1db:	mov    rdi,r14
   2f1de:	call   3770 <strtok@plt>
   2f1e3:	mov    r13,rax
   2f1e6:	test   rax,rax
   2f1e9:	je     2f1b0 <ReadSELEX+0x490>
   2f1eb:	movsx  esi,BYTE PTR [rax]
   2f1ee:	lea    rdi,[rip+0x1ecd3]        # 4dec8 <commentsyms>
   2f1f5:	call   3590 <strchr@plt>
   2f1fa:	test   rax,rax
   2f1fd:	jne    2f1b0 <ReadSELEX+0x490>
   2f1ff:	mov    rax,QWORD PTR [rsp+0x38]
   2f204:	mov    QWORD PTR [rsp+0x10],rax
   2f209:	jmp    2ee50 <ReadSELEX+0x130>
   2f20e:	mov    rbx,QWORD PTR [rsp+0x10]
   2f213:	mov    rdx,QWORD PTR [rsp+0x40]
   2f218:	mov    esi,0x99
   2f21d:	lea    rdi,[rip+0x12697]        # 418bb <CSWTCH.18+0x1fb>
   2f224:	lea    rax,[rbx+0x1]
   2f228:	lea    rcx,[rax*8+0x0]
   2f230:	mov    QWORD PTR [rsp+0x38],rax
   2f235:	call   36860 <sre_realloc>
   2f23a:	mov    QWORD PTR [rsp+0x40],rax
   2f23f:	lea    rax,[rax+rbx*8]
   2f243:	movabs rbx,0xffffffff00001001
   2f24d:	mov    QWORD PTR [rsp+0x30],rax
   2f252:	mov    QWORD PTR [rax],rbx
   2f255:	test   r13,r13
   2f258:	jne    2eeb1 <ReadSELEX+0x191>
   2f25e:	mov    DWORD PTR [rsp+0x18],0x0
   2f266:	mov    ebx,DWORD PTR [rsp+0x18]
   2f26a:	cmp    DWORD PTR [rsp+0x58],ebx
   2f26e:	je     2f1a4 <ReadSELEX+0x484>
   2f274:	lea    rdi,[rip+0x12648]        # 418c3 <CSWTCH.18+0x203>
   2f27b:	xor    eax,eax
   2f27d:	call   317f0 <Die>
   2f282:	jmp    2f1a4 <ReadSELEX+0x484>
   2f287:	mov    DWORD PTR [rip+0x330df],0x2        # 62370 <squid_errno>
   2f291:	mov    rbx,QWORD PTR [rsp+0x20d8]
   2f299:	xor    rbx,QWORD PTR fs:0x28
   2f2a2:	jne    301e2 <ReadSELEX+0x14c2>
   2f2a8:	add    rsp,0x20e8
   2f2af:	pop    rbx
   2f2b0:	pop    rbp
   2f2b1:	pop    r12
   2f2b3:	pop    r13
   2f2b5:	pop    r14
   2f2b7:	pop    r15
   2f2b9:	ret    
   2f2ba:	mov    DWORD PTR [rsp+0x5c],ebx
   2f2be:	test   ebx,ebx
   2f2c0:	je     301d5 <ReadSELEX+0x14b5>
   2f2c6:	mov    rdx,QWORD PTR [rsp+0x10]
   2f2cb:	mov    rbx,QWORD PTR [rsp+0x40]
   2f2d0:	xor    esi,esi
   2f2d2:	sub    edx,0x1
   2f2d5:	mov    rax,rbx
   2f2d8:	lea    rcx,[rbx+rdx*8+0x8]
   2f2dd:	nop    DWORD PTR [rax]
   2f2e0:	mov    edx,DWORD PTR [rax+0x4]
   2f2e3:	add    rax,0x8
   2f2e7:	sub    edx,DWORD PTR [rax-0x8]
   2f2ea:	lea    esi,[rsi+rdx*1+0x1]
   2f2ee:	cmp    rcx,rax
   2f2f1:	jne    2f2e0 <ReadSELEX+0x5c0>
   2f2f3:	mov    DWORD PTR [rsp+0x38],esi
   2f2f7:	mov    rdi,r15
   2f2fa:	call   35a0 <rewind@plt>
   2f2ff:	movsxd rax,DWORD PTR [rsp+0x58]
   2f304:	mov    esi,0xf7
   2f309:	lea    rdi,[rip+0x125ab]        # 418bb <CSWTCH.18+0x1fb>
   2f310:	lea    rdx,[rax*8+0x0]
   2f318:	mov    QWORD PTR [rsp+0x18],rax
   2f31d:	call   36810 <sre_malloc>
   2f322:	mov    r9d,DWORD PTR [rsp+0x28]
   2f327:	mov    QWORD PTR [rsp+0x30],rax
   2f32c:	test   r9d,r9d
   2f32f:	jne    301a0 <ReadSELEX+0x1480>
   2f335:	mov    r8d,DWORD PTR [rsp+0x8]
   2f33a:	test   r8d,r8d
   2f33d:	jne    30178 <ReadSELEX+0x1458>
   2f343:	mov    edi,DWORD PTR [rsp+0x58]
   2f347:	test   edi,edi
   2f349:	jle    2f429 <ReadSELEX+0x709>
   2f34f:	mov    eax,DWORD PTR [rsp+0x38]
   2f353:	mov    rbx,QWORD PTR [rsp+0x30]
   2f358:	mov    QWORD PTR [rsp+0x8],r12
   2f35d:	mov    QWORD PTR [rsp+0x20],r14
   2f362:	lea    ebp,[rax+0x1]
   2f365:	mov    eax,DWORD PTR [rsp+0x58]
   2f369:	mov    r13,rbx
   2f36c:	movsxd rbp,ebp
   2f36f:	sub    eax,0x1
   2f372:	lea    rax,[rbx+rax*8+0x8]
   2f377:	xor    ebx,ebx
   2f379:	mov    r12,rax
   2f37c:	jmp    2f397 <ReadSELEX+0x677>
   2f37e:	test   ah,0x4
   2f381:	jne    2f3f0 <ReadSELEX+0x6d0>
   2f383:	add    r13,0x8
   2f387:	add    rbx,0x168
   2f38e:	cmp    r12,r13
   2f391:	je     2f41f <ReadSELEX+0x6ff>
   2f397:	mov    rdx,rbp
   2f39a:	mov    esi,0x101
   2f39f:	lea    rdi,[rip+0x12515]        # 418bb <CSWTCH.18+0x1fb>
   2f3a6:	call   36810 <sre_malloc>
   2f3ab:	mov    r14,QWORD PTR [rsp+0x88]
   2f3b3:	mov    QWORD PTR [r13+0x0],rax
   2f3b7:	add    r14,rbx
   2f3ba:	mov    eax,DWORD PTR [r14]
   2f3bd:	test   ah,0x2
   2f3c0:	je     2f37e <ReadSELEX+0x65e>
   2f3c2:	mov    rdx,rbp
   2f3c5:	mov    esi,0x103
   2f3ca:	lea    rdi,[rip+0x124ea]        # 418bb <CSWTCH.18+0x1fb>
   2f3d1:	call   36810 <sre_malloc>
   2f3d6:	mov    QWORD PTR [r14+0x158],rax
   2f3dd:	mov    r14,QWORD PTR [rsp+0x88]
   2f3e5:	add    r14,rbx
   2f3e8:	mov    eax,DWORD PTR [r14]
   2f3eb:	test   ah,0x4
   2f3ee:	je     2f383 <ReadSELEX+0x663>
   2f3f0:	mov    rdx,rbp
   2f3f3:	mov    esi,0x105
   2f3f8:	add    r13,0x8
   2f3fc:	add    rbx,0x168
   2f403:	lea    rdi,[rip+0x124b1]        # 418bb <CSWTCH.18+0x1fb>
   2f40a:	call   36810 <sre_malloc>
   2f40f:	mov    QWORD PTR [r14+0x160],rax
   2f416:	cmp    r12,r13
   2f419:	jne    2f397 <ReadSELEX+0x677>
   2f41f:	mov    r12,QWORD PTR [rsp+0x8]
   2f424:	mov    r14,QWORD PTR [rsp+0x20]
   2f429:	mov    rdx,QWORD PTR [rsp+0x18]
   2f42e:	mov    ebx,DWORD PTR [rsp+0x58]
   2f432:	mov    esi,0x10a
   2f437:	lea    rdi,[rip+0x1247d]        # 418bb <CSWTCH.18+0x1fb>
   2f43e:	mov    eax,DWORD PTR [rsp+0x38]
   2f442:	lea    r13,[rip+0x1249a]        # 418e3 <CSWTCH.18+0x223>
   2f449:	shl    rdx,0x2
   2f44d:	mov    DWORD PTR [rsp+0x68],ebx
   2f451:	mov    DWORD PTR [rsp+0x64],eax
   2f455:	call   36810 <sre_malloc>
   2f45a:	movss  xmm0,DWORD PTR [rip+0xdf3a]        # 3d39c <_IO_stdin_used+0x39c>
   2f462:	mov    esi,ebx
   2f464:	lea    rbx,[rip+0x12473]        # 418de <CSWTCH.18+0x21e>
   2f46b:	mov    rdi,rax
   2f46e:	mov    QWORD PTR [rsp+0x70],rax
   2f473:	call   3ad60 <FSet>
   2f478:	mov    DWORD PTR [rsp+0x8],0x0
   2f480:	mov    rdx,r15
   2f483:	mov    esi,0x1000
   2f488:	mov    rdi,r12
   2f48b:	call   3620 <fgets@plt>
   2f490:	test   rax,rax
   2f493:	je     2f840 <ReadSELEX+0xb20>
   2f499:	mov    edx,0x1000
   2f49e:	mov    rsi,r12
   2f4a1:	mov    rdi,r14
   2f4a4:	call   3700 <__strcpy_chk@plt>
   2f4a9:	lea    rsi,[rip+0x1281c]        # 41ccc <CSWTCH.18+0x60c>
   2f4b0:	mov    rdi,r14
   2f4b3:	call   3770 <strtok@plt>
   2f4b8:	mov    rbp,rax
   2f4bb:	test   rax,rax
   2f4be:	je     2f480 <ReadSELEX+0x760>
   2f4c0:	mov    rsi,rax
   2f4c3:	mov    ecx,0x5
   2f4c8:	mov    rdi,rbx
   2f4cb:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f4cd:	seta   al
   2f4d0:	sbb    al,0x0
   2f4d2:	test   al,al
   2f4d4:	je     2f770 <ReadSELEX+0xa50>
   2f4da:	mov    ecx,0x5
   2f4df:	mov    rsi,rbp
   2f4e2:	mov    rdi,r13
   2f4e5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f4e7:	seta   al
   2f4ea:	sbb    al,0x0
   2f4ec:	test   al,al
   2f4ee:	je     2f7a0 <ReadSELEX+0xa80>
   2f4f4:	mov    ecx,0x5
   2f4f9:	mov    rsi,rbp
   2f4fc:	lea    rdi,[rip+0x123e5]        # 418e8 <CSWTCH.18+0x228>
   2f503:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f505:	seta   al
   2f508:	sbb    al,0x0
   2f50a:	test   al,al
   2f50c:	je     2f7d0 <ReadSELEX+0xab0>
   2f512:	mov    ecx,0x5
   2f517:	mov    rsi,rbp
   2f51a:	lea    rdi,[rip+0x123cc]        # 418ed <CSWTCH.18+0x22d>
   2f521:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f523:	seta   al
   2f526:	sbb    al,0x0
   2f528:	test   al,al
   2f52a:	je     2f858 <ReadSELEX+0xb38>
   2f530:	mov    ecx,0x5
   2f535:	mov    rsi,rbp
   2f538:	lea    rdi,[rip+0x123b3]        # 418f2 <CSWTCH.18+0x232>
   2f53f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f541:	seta   al
   2f544:	sbb    al,0x0
   2f546:	test   al,al
   2f548:	je     2f888 <ReadSELEX+0xb68>
   2f54e:	mov    ecx,0x5
   2f553:	mov    rsi,rbp
   2f556:	lea    rdi,[rip+0x1239a]        # 418f7 <CSWTCH.18+0x237>
   2f55d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f55f:	seta   al
   2f562:	sbb    al,0x0
   2f564:	test   al,al
   2f566:	je     2f940 <ReadSELEX+0xc20>
   2f56c:	mov    ecx,0x5
   2f571:	mov    rsi,rbp
   2f574:	lea    rdi,[rip+0x12381]        # 418fc <CSWTCH.18+0x23c>
   2f57b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f57d:	seta   al
   2f580:	sbb    al,0x0
   2f582:	test   al,al
   2f584:	je     2fd40 <ReadSELEX+0x1020>
   2f58a:	mov    ecx,0x5
   2f58f:	mov    rsi,rbp
   2f592:	lea    rdi,[rip+0x12368]        # 41901 <CSWTCH.18+0x241>
   2f599:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f59b:	seta   al
   2f59e:	sbb    al,0x0
   2f5a0:	test   al,al
   2f5a2:	je     2fe10 <ReadSELEX+0x10f0>
   2f5a8:	mov    ecx,0x5
   2f5ad:	mov    rsi,rbp
   2f5b0:	lea    rdi,[rip+0x122f0]        # 418a7 <CSWTCH.18+0x1e7>
   2f5b7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f5b9:	seta   al
   2f5bc:	sbb    al,0x0
   2f5be:	test   al,al
   2f5c0:	je     2f5f5 <ReadSELEX+0x8d5>
   2f5c2:	mov    ecx,0x5
   2f5c7:	mov    rsi,rbp
   2f5ca:	lea    rdi,[rip+0x122db]        # 418ac <CSWTCH.18+0x1ec>
   2f5d1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f5d3:	seta   al
   2f5d6:	sbb    al,0x0
   2f5d8:	test   al,al
   2f5da:	je     2f5f5 <ReadSELEX+0x8d5>
   2f5dc:	movsx  esi,BYTE PTR [rbp+0x0]
   2f5e0:	lea    rdi,[rip+0x1e8e1]        # 4dec8 <commentsyms>
   2f5e7:	call   3590 <strchr@plt>
   2f5ec:	test   rax,rax
   2f5ef:	jne    2f480 <ReadSELEX+0x760>
   2f5f5:	mov    esi,DWORD PTR [rsp+0x5c]
   2f5f9:	test   esi,esi
   2f5fb:	je     2fa87 <ReadSELEX+0xd67>
   2f601:	mov    rax,QWORD PTR [rsp+0x10]
   2f606:	mov    rbx,QWORD PTR [rsp+0x40]
   2f60b:	mov    DWORD PTR [rsp+0x8],0x0
   2f613:	sub    eax,0x1
   2f616:	mov    r13,rbx
   2f619:	lea    rax,[rbx+rax*8+0x8]
   2f61e:	lea    rbx,[rip+0x126a7]        # 41ccc <CSWTCH.18+0x60c>
   2f625:	mov    QWORD PTR [rsp+0x18],rax
   2f62a:	nop    WORD PTR [rax+rax*1+0x0]
   2f630:	mov    DWORD PTR [rsp+0x10],0x0
   2f638:	test   rbp,rbp
   2f63b:	je     2fa00 <ReadSELEX+0xce0>
   2f641:	nop    DWORD PTR [rax+0x0]
   2f648:	mov    ecx,0x5
   2f64d:	mov    rsi,rbp
   2f650:	lea    rdi,[rip+0x12250]        # 418a7 <CSWTCH.18+0x1e7>
   2f657:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f659:	seta   al
   2f65c:	sbb    al,0x0
   2f65e:	test   al,al
   2f660:	je     2f800 <ReadSELEX+0xae0>
   2f666:	mov    ecx,0x5
   2f66b:	mov    rsi,rbp
   2f66e:	lea    rdi,[rip+0x12237]        # 418ac <CSWTCH.18+0x1ec>
   2f675:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f677:	seta   al
   2f67a:	sbb    al,0x0
   2f67c:	test   al,al
   2f67e:	je     2f8f8 <ReadSELEX+0xbd8>
   2f684:	mov    ecx,0x5
   2f689:	mov    rsi,rbp
   2f68c:	lea    rdi,[rip+0x1221e]        # 418b1 <CSWTCH.18+0x1f1>
   2f693:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f695:	seta   al
   2f698:	sbb    al,0x0
   2f69a:	test   al,al
   2f69c:	je     2f9b0 <ReadSELEX+0xc90>
   2f6a2:	mov    ecx,0x5
   2f6a7:	mov    rsi,rbp
   2f6aa:	lea    rdi,[rip+0x12205]        # 418b6 <CSWTCH.18+0x1f6>
   2f6b1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f6b3:	seta   al
   2f6b6:	sbb    al,0x0
   2f6b8:	test   al,al
   2f6ba:	je     2fdc0 <ReadSELEX+0x10a0>
   2f6c0:	cmp    BYTE PTR [rbp+0x0],0x23
   2f6c4:	je     2fdb0 <ReadSELEX+0x1090>
   2f6ca:	mov    rdi,rbp
   2f6cd:	call   3560 <strlen@plt>
   2f6d2:	mov    rcx,QWORD PTR [rsp+0x30]
   2f6d7:	mov    r9d,DWORD PTR [r13+0x4]
   2f6db:	lea    edx,[rax-0x1]
   2f6de:	movsxd rax,DWORD PTR [rsp+0x10]
   2f6e3:	mov    r8d,DWORD PTR [r13+0x0]
   2f6e7:	mov    esi,DWORD PTR [rsp+0x8]
   2f6eb:	mov    rdi,QWORD PTR [rcx+rax*8]
   2f6ef:	mov    rcx,r12
   2f6f2:	call   2ec90 <copy_alignment_line.constprop.0>
   2f6f7:	test   eax,eax
   2f6f9:	je     30035 <ReadSELEX+0x1315>
   2f6ff:	add    DWORD PTR [rsp+0x10],0x1
   2f704:	nop    DWORD PTR [rax+0x0]
   2f708:	mov    rdx,r15
   2f70b:	mov    esi,0x1000
   2f710:	mov    rdi,r12
   2f713:	call   3620 <fgets@plt>
   2f718:	test   rax,rax
   2f71b:	je     2fa00 <ReadSELEX+0xce0>
   2f721:	mov    edx,0x1000
   2f726:	mov    rsi,r12
   2f729:	mov    rdi,r14
   2f72c:	call   3700 <__strcpy_chk@plt>
   2f731:	mov    rsi,rbx
   2f734:	mov    rdi,r14
   2f737:	call   3770 <strtok@plt>
   2f73c:	mov    rbp,rax
   2f73f:	test   rax,rax
   2f742:	je     2fa00 <ReadSELEX+0xce0>
   2f748:	cmp    WORD PTR [r12],0x3d23
   2f74f:	je     2f648 <ReadSELEX+0x928>
   2f755:	movsx  esi,BYTE PTR [rax]
   2f758:	lea    rdi,[rip+0x1e769]        # 4dec8 <commentsyms>
   2f75f:	call   3590 <strchr@plt>
   2f764:	test   rax,rax
   2f767:	jne    2f708 <ReadSELEX+0x9e8>
   2f769:	jmp    2f648 <ReadSELEX+0x928>
   2f76e:	xchg   ax,ax
   2f770:	xor    edi,edi
   2f772:	lea    rsi,[rip+0x12555]        # 41cce <CSWTCH.18+0x60e>
   2f779:	call   3770 <strtok@plt>
   2f77e:	mov    rdi,rax
   2f781:	test   rax,rax
   2f784:	je     2f4da <ReadSELEX+0x7ba>
   2f78a:	call   36670 <Strdup>
   2f78f:	mov    QWORD PTR [rsp+0xa8],rax
   2f797:	jmp    2f480 <ReadSELEX+0x760>
   2f79c:	nop    DWORD PTR [rax+0x0]
   2f7a0:	xor    edi,edi
   2f7a2:	lea    rsi,[rip+0x12525]        # 41cce <CSWTCH.18+0x60e>
   2f7a9:	call   3770 <strtok@plt>
   2f7ae:	mov    rdi,rax
   2f7b1:	test   rax,rax
   2f7b4:	je     2f4f4 <ReadSELEX+0x7d4>
   2f7ba:	call   36670 <Strdup>
   2f7bf:	mov    QWORD PTR [rsp+0x90],rax
   2f7c7:	jmp    2f480 <ReadSELEX+0x760>
   2f7cc:	nop    DWORD PTR [rax+0x0]
   2f7d0:	xor    edi,edi
   2f7d2:	lea    rsi,[rip+0x124f5]        # 41cce <CSWTCH.18+0x60e>
   2f7d9:	call   3770 <strtok@plt>
   2f7de:	mov    rdi,rax
   2f7e1:	test   rax,rax
   2f7e4:	je     2f512 <ReadSELEX+0x7f2>
   2f7ea:	call   36670 <Strdup>
   2f7ef:	mov    QWORD PTR [rsp+0xa0],rax
   2f7f7:	jmp    2f480 <ReadSELEX+0x760>
   2f7fc:	nop    DWORD PTR [rax+0x0]
   2f800:	mov    rdi,rbp
   2f803:	call   3560 <strlen@plt>
   2f808:	mov    r9d,DWORD PTR [r13+0x4]
   2f80c:	mov    r8d,DWORD PTR [r13+0x0]
   2f810:	mov    rcx,r12
   2f813:	mov    esi,DWORD PTR [rsp+0x8]
   2f817:	mov    rdi,QWORD PTR [rsp+0x78]
   2f81c:	lea    edx,[rax-0x1]
   2f81f:	call   2ec90 <copy_alignment_line.constprop.0>
   2f824:	test   eax,eax
   2f826:	jne    2f708 <ReadSELEX+0x9e8>
   2f82c:	lea    rdi,[rip+0x122bd]        # 41af0 <CSWTCH.18+0x430>
   2f833:	call   317f0 <Die>
   2f838:	jmp    2f708 <ReadSELEX+0x9e8>
   2f83d:	nop    DWORD PTR [rax]
   2f840:	lea    rdi,[rip+0x1207c]        # 418c3 <CSWTCH.18+0x203>
   2f847:	call   317f0 <Die>
   2f84c:	jmp    2f499 <ReadSELEX+0x779>
   2f851:	nop    DWORD PTR [rax+0x0]
   2f858:	xor    edi,edi
   2f85a:	lea    rsi,[rip+0x1246d]        # 41cce <CSWTCH.18+0x60e>
   2f861:	call   3770 <strtok@plt>
   2f866:	mov    rdi,rax
   2f869:	test   rax,rax
   2f86c:	je     2f530 <ReadSELEX+0x810>
   2f872:	call   36670 <Strdup>
   2f877:	mov    QWORD PTR [rsp+0x98],rax
   2f87f:	jmp    2f480 <ReadSELEX+0x760>
   2f884:	nop    DWORD PTR [rax+0x0]
   2f888:	lea    rsi,[rip+0x1243d]        # 41ccc <CSWTCH.18+0x60c>
   2f88f:	xor    edi,edi
   2f891:	call   3770 <strtok@plt>
   2f896:	mov    rbp,rax
   2f899:	test   rax,rax
   2f89c:	je     2ffe6 <ReadSELEX+0x12c6>
   2f8a2:	mov    rdi,rbp
   2f8a5:	xor    esi,esi
   2f8a7:	call   3510 <strtod@plt>
   2f8ac:	lea    rsi,[rip+0x12419]        # 41ccc <CSWTCH.18+0x60c>
   2f8b3:	xor    edi,edi
   2f8b5:	cvtsd2ss xmm0,xmm0
   2f8b9:	movss  DWORD PTR [rsp+0xc0],xmm0
   2f8c2:	call   3770 <strtok@plt>
   2f8c7:	mov    rbp,rax
   2f8ca:	test   rax,rax
   2f8cd:	je     2ffd3 <ReadSELEX+0x12b3>
   2f8d3:	xor    esi,esi
   2f8d5:	mov    rdi,rbp
   2f8d8:	call   3510 <strtod@plt>
   2f8dd:	or     DWORD PTR [rsp+0x60],0x4
   2f8e2:	cvtsd2ss xmm0,xmm0
   2f8e6:	movss  DWORD PTR [rsp+0xc4],xmm0
   2f8ef:	jmp    2f480 <ReadSELEX+0x760>
   2f8f4:	nop    DWORD PTR [rax+0x0]
   2f8f8:	mov    rdi,rbp
   2f8fb:	call   3560 <strlen@plt>
   2f900:	mov    r9d,DWORD PTR [r13+0x4]
   2f904:	mov    r8d,DWORD PTR [r13+0x0]
   2f908:	mov    rcx,r12
   2f90b:	mov    esi,DWORD PTR [rsp+0x8]
   2f90f:	mov    rdi,QWORD PTR [rsp+0x80]
   2f917:	lea    edx,[rax-0x1]
   2f91a:	call   2ec90 <copy_alignment_line.constprop.0>
   2f91f:	test   eax,eax
   2f921:	jne    2f708 <ReadSELEX+0x9e8>
   2f927:	lea    rdi,[rip+0x121ea]        # 41b18 <CSWTCH.18+0x458>
   2f92e:	call   317f0 <Die>
   2f933:	jmp    2f708 <ReadSELEX+0x9e8>
   2f938:	nop    DWORD PTR [rax+rax*1+0x0]
   2f940:	lea    rsi,[rip+0x12385]        # 41ccc <CSWTCH.18+0x60c>
   2f947:	xor    edi,edi
   2f949:	call   3770 <strtok@plt>
   2f94e:	mov    rbp,rax
   2f951:	test   rax,rax
   2f954:	je     3000c <ReadSELEX+0x12ec>
   2f95a:	mov    rdi,rbp
   2f95d:	xor    esi,esi
   2f95f:	call   3510 <strtod@plt>
   2f964:	lea    rsi,[rip+0x12361]        # 41ccc <CSWTCH.18+0x60c>
   2f96b:	xor    edi,edi
   2f96d:	cvtsd2ss xmm0,xmm0
   2f971:	movss  DWORD PTR [rsp+0xb0],xmm0
   2f97a:	call   3770 <strtok@plt>
   2f97f:	mov    rbp,rax
   2f982:	test   rax,rax
   2f985:	je     2fff9 <ReadSELEX+0x12d9>
   2f98b:	xor    esi,esi
   2f98d:	mov    rdi,rbp
   2f990:	call   3510 <strtod@plt>
   2f995:	or     DWORD PTR [rsp+0x60],0x1
   2f99a:	cvtsd2ss xmm0,xmm0
   2f99e:	movss  DWORD PTR [rsp+0xb4],xmm0
   2f9a7:	jmp    2f480 <ReadSELEX+0x760>
   2f9ac:	nop    DWORD PTR [rax+0x0]
   2f9b0:	mov    rdi,rbp
   2f9b3:	call   3560 <strlen@plt>
   2f9b8:	mov    r9d,DWORD PTR [r13+0x4]
   2f9bc:	mov    r8d,DWORD PTR [r13+0x0]
   2f9c0:	mov    rcx,r12
   2f9c3:	lea    edx,[rax-0x1]
   2f9c6:	movsxd rax,DWORD PTR [rsp+0x10]
   2f9cb:	mov    esi,DWORD PTR [rsp+0x8]
   2f9cf:	imul   rax,rax,0x168
   2f9d6:	add    rax,QWORD PTR [rsp+0x88]
   2f9de:	mov    rdi,QWORD PTR [rax-0x10]
   2f9e2:	call   2ec90 <copy_alignment_line.constprop.0>
   2f9e7:	test   eax,eax
   2f9e9:	jne    2f708 <ReadSELEX+0x9e8>
   2f9ef:	lea    rdi,[rip+0x1214a]        # 41b40 <CSWTCH.18+0x480>
   2f9f6:	call   317f0 <Die>
   2f9fb:	jmp    2f708 <ReadSELEX+0x9e8>
   2fa00:	mov    edx,DWORD PTR [rsp+0x8]
   2fa04:	mov    eax,DWORD PTR [r13+0x4]
   2fa08:	xor    ebp,ebp
   2fa0a:	sub    eax,DWORD PTR [r13+0x0]
   2fa0e:	lea    eax,[rdx+rax*1+0x1]
   2fa12:	mov    DWORD PTR [rsp+0x8],eax
   2fa16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2fa20:	mov    rdx,r15
   2fa23:	mov    esi,0x1000
   2fa28:	mov    rdi,r12
   2fa2b:	call   3620 <fgets@plt>
   2fa30:	test   rax,rax
   2fa33:	je     2fa78 <ReadSELEX+0xd58>
   2fa35:	mov    edx,0x1000
   2fa3a:	mov    rsi,r12
   2fa3d:	mov    rdi,r14
   2fa40:	call   3700 <__strcpy_chk@plt>
   2fa45:	mov    rsi,rbx
   2fa48:	mov    rdi,r14
   2fa4b:	call   3770 <strtok@plt>
   2fa50:	mov    rbp,rax
   2fa53:	test   rax,rax
   2fa56:	je     2fa20 <ReadSELEX+0xd00>
   2fa58:	cmp    WORD PTR [r12],0x3d23
   2fa5f:	je     2fa78 <ReadSELEX+0xd58>
   2fa61:	movsx  esi,BYTE PTR [rax]
   2fa64:	lea    rdi,[rip+0x1e45d]        # 4dec8 <commentsyms>
   2fa6b:	call   3590 <strchr@plt>
   2fa70:	test   rax,rax
   2fa73:	jne    2fa20 <ReadSELEX+0xd00>
   2fa75:	nop    DWORD PTR [rax]
   2fa78:	add    r13,0x8
   2fa7c:	cmp    QWORD PTR [rsp+0x18],r13
   2fa81:	jne    2f630 <ReadSELEX+0x910>
   2fa87:	mov    ecx,DWORD PTR [rsp+0x58]
   2fa8b:	test   ecx,ecx
   2fa8d:	jle    2fc1d <ReadSELEX+0xefd>
   2fa93:	mov    eax,DWORD PTR [rsp+0x58]
   2fa97:	mov    rbx,QWORD PTR [rsp+0x30]
   2fa9c:	xor    r9d,r9d
   2fa9f:	movabs r10,0x8000000000006001
   2faa9:	mov    edi,DWORD PTR [rsp+0x38]
   2faad:	sub    eax,0x1
   2fab0:	mov    rsi,rbx
   2fab3:	lea    r12,[rbx+rax*8+0x8]
   2fab8:	lea    r8d,[rdi-0x1]
   2fabc:	jmp    2fadb <ReadSELEX+0xdbb>
   2fabe:	test   ah,0x4
   2fac1:	jne    2fb87 <ReadSELEX+0xe67>
   2fac7:	add    rsi,0x8
   2facb:	add    r9,0x168
   2fad2:	cmp    r12,rsi
   2fad5:	je     2fc1d <ReadSELEX+0xefd>
   2fadb:	mov    rdx,QWORD PTR [rsp+0x88]
   2fae3:	add    rdx,r9
   2fae6:	mov    eax,DWORD PTR [rdx]
   2fae8:	test   ah,0x2
   2faeb:	je     2fabe <ReadSELEX+0xd9e>
   2faed:	mov    rbx,QWORD PTR [rdx+0x158]
   2faf4:	test   edi,edi
   2faf6:	jle    301cd <ReadSELEX+0x14ad>
   2fafc:	xor    r13d,r13d
   2faff:	xor    eax,eax
   2fb01:	xor    ebp,ebp
   2fb03:	jmp    2fb14 <ReadSELEX+0xdf4>
   2fb05:	nop    DWORD PTR [rax]
   2fb08:	lea    rdx,[rax+0x1]
   2fb0c:	cmp    r8,rax
   2fb0f:	je     2fb6e <ReadSELEX+0xe4e>
   2fb11:	mov    rax,rdx
   2fb14:	mov    rdx,QWORD PTR [rsi]
   2fb17:	movzx  r11d,BYTE PTR [rdx+rax*1]
   2fb1c:	mov    edx,0x1
   2fb21:	lea    ecx,[r11-0x20]
   2fb25:	cmp    cl,0x3f
   2fb28:	ja     2fb36 <ReadSELEX+0xe16>
   2fb2a:	mov    rdx,r10
   2fb2d:	shr    rdx,cl
   2fb30:	not    rdx
   2fb33:	and    edx,0x1
   2fb36:	lea    rcx,[rbx+rbp*1]
   2fb3a:	cmp    r11b,0x7e
   2fb3e:	je     2fb08 <ReadSELEX+0xde8>
   2fb40:	test   dl,dl
   2fb42:	je     2fb08 <ReadSELEX+0xde8>
   2fb44:	movzx  edx,BYTE PTR [rbx+rax*1]
   2fb48:	add    r13d,0x1
   2fb4c:	movsxd rbp,r13d
   2fb4f:	mov    BYTE PTR [rcx],dl
   2fb51:	mov    rdx,QWORD PTR [rsp+0x88]
   2fb59:	mov    rbx,QWORD PTR [rdx+r9*1+0x158]
   2fb61:	lea    rdx,[rax+0x1]
   2fb65:	lea    rcx,[rbx+rbp*1]
   2fb69:	cmp    r8,rax
   2fb6c:	jne    2fb11 <ReadSELEX+0xdf1>
   2fb6e:	mov    BYTE PTR [rcx],0x0
   2fb71:	mov    rdx,QWORD PTR [rsp+0x88]
   2fb79:	add    rdx,r9
   2fb7c:	mov    eax,DWORD PTR [rdx]
   2fb7e:	test   ah,0x4
   2fb81:	je     2fac7 <ReadSELEX+0xda7>
   2fb87:	mov    rbx,QWORD PTR [rdx+0x160]
   2fb8e:	test   edi,edi
   2fb90:	jle    301c5 <ReadSELEX+0x14a5>
   2fb96:	xor    r13d,r13d
   2fb99:	xor    eax,eax
   2fb9b:	xor    ebp,ebp
   2fb9d:	jmp    2fbac <ReadSELEX+0xe8c>
   2fb9f:	nop
   2fba0:	lea    rdx,[rax+0x1]
   2fba4:	cmp    r8,rax
   2fba7:	je     2fc06 <ReadSELEX+0xee6>
   2fba9:	mov    rax,rdx
   2fbac:	mov    rdx,QWORD PTR [rsi]
   2fbaf:	movzx  r11d,BYTE PTR [rdx+rax*1]
   2fbb4:	mov    edx,0x1
   2fbb9:	lea    ecx,[r11-0x20]
   2fbbd:	cmp    cl,0x3f
   2fbc0:	ja     2fbce <ReadSELEX+0xeae>
   2fbc2:	mov    rdx,r10
   2fbc5:	shr    rdx,cl
   2fbc8:	not    rdx
   2fbcb:	and    edx,0x1
   2fbce:	lea    rcx,[rbx+rbp*1]
   2fbd2:	cmp    r11b,0x7e
   2fbd6:	je     2fba0 <ReadSELEX+0xe80>
   2fbd8:	test   dl,dl
   2fbda:	je     2fba0 <ReadSELEX+0xe80>
   2fbdc:	movzx  edx,BYTE PTR [rbx+rax*1]
   2fbe0:	add    r13d,0x1
   2fbe4:	movsxd rbp,r13d
   2fbe7:	mov    BYTE PTR [rcx],dl
   2fbe9:	mov    rdx,QWORD PTR [rsp+0x88]
   2fbf1:	mov    rbx,QWORD PTR [rdx+r9*1+0x160]
   2fbf9:	lea    rdx,[rax+0x1]
   2fbfd:	lea    rcx,[rbx+rbp*1]
   2fc01:	cmp    r8,rax
   2fc04:	jne    2fba9 <ReadSELEX+0xe89>
   2fc06:	add    rsi,0x8
   2fc0a:	mov    BYTE PTR [rcx],0x0
   2fc0d:	add    r9,0x168
   2fc14:	cmp    r12,rsi
   2fc17:	jne    2fadb <ReadSELEX+0xdbb>
   2fc1d:	mov    rax,QWORD PTR [rsp+0x80]
   2fc25:	test   rax,rax
   2fc28:	je     2fc33 <ReadSELEX+0xf13>
   2fc2a:	movsxd rdx,DWORD PTR [rsp+0x38]
   2fc2f:	mov    BYTE PTR [rax+rdx*1],0x0
   2fc33:	mov    rax,QWORD PTR [rsp+0x78]
   2fc38:	test   rax,rax
   2fc3b:	je     2fc46 <ReadSELEX+0xf26>
   2fc3d:	movsxd rdx,DWORD PTR [rsp+0x38]
   2fc42:	mov    BYTE PTR [rax+rdx*1],0x0
   2fc46:	mov    edx,DWORD PTR [rsp+0x58]
   2fc4a:	test   edx,edx
   2fc4c:	jle    2fcef <ReadSELEX+0xfcf>
   2fc52:	mov    edx,DWORD PTR [rsp+0x58]
   2fc56:	mov    rbx,QWORD PTR [rsp+0x30]
   2fc5b:	movsxd rax,DWORD PTR [rsp+0x38]
   2fc60:	sub    edx,0x1
   2fc63:	mov    r10,rbx
   2fc66:	lea    r11,[rbx+rdx*8+0x8]
   2fc6b:	mov    rdx,rbx
   2fc6e:	xchg   ax,ax
   2fc70:	mov    rcx,QWORD PTR [rdx]
   2fc73:	add    rdx,0x8
   2fc77:	mov    BYTE PTR [rcx+rax*1],0x0
   2fc7b:	cmp    r11,rdx
   2fc7e:	jne    2fc70 <ReadSELEX+0xf50>
   2fc80:	mov    r8,QWORD PTR [rsp+0x88]
   2fc88:	movabs r9,0x8000000000006001
   2fc92:	nop    WORD PTR [rax+rax*1+0x0]
   2fc98:	mov    rsi,QWORD PTR [r10]
   2fc9b:	xor    edi,edi
   2fc9d:	movzx  eax,BYTE PTR [rsi]
   2fca0:	test   al,al
   2fca2:	je     2fcd7 <ReadSELEX+0xfb7>
   2fca4:	nop    DWORD PTR [rax+0x0]
   2fca8:	lea    ecx,[rax-0x20]
   2fcab:	mov    edx,0x1
   2fcb0:	cmp    cl,0x3f
   2fcb3:	ja     2fcc1 <ReadSELEX+0xfa1>
   2fcb5:	mov    rdx,r9
   2fcb8:	shr    rdx,cl
   2fcbb:	not    rdx
   2fcbe:	and    edx,0x1
   2fcc1:	cmp    al,0x7e
   2fcc3:	je     2fccb <ReadSELEX+0xfab>
   2fcc5:	cmp    dl,0x1
   2fcc8:	sbb    edi,0xffffffff
   2fccb:	movzx  eax,BYTE PTR [rsi+0x1]
   2fccf:	add    rsi,0x1
   2fcd3:	test   al,al
   2fcd5:	jne    2fca8 <ReadSELEX+0xf88>
   2fcd7:	add    r10,0x8
   2fcdb:	or     DWORD PTR [r8],0x40
   2fcdf:	add    r8,0x168
   2fce6:	mov    DWORD PTR [r8-0x24],edi
   2fcea:	cmp    r11,r10
   2fced:	jne    2fc98 <ReadSELEX+0xf78>
   2fcef:	mov    rdi,QWORD PTR [rsp+0x40]
   2fcf4:	call   3460 <free@plt>
   2fcf9:	mov    eax,DWORD PTR [rsp+0x2c]
   2fcfd:	test   eax,eax
   2fcff:	jne    3015c <ReadSELEX+0x143c>
   2fd05:	mov    r15,QWORD PTR [rsp+0x50]
   2fd0a:	mov    rbx,QWORD PTR [rsp+0x30]
   2fd0f:	mov    rsi,r15
   2fd12:	mov    rdi,rbx
   2fd15:	call   2c4d0 <MSAFromAINFO>
   2fd1a:	mov    rdi,rax
   2fd1d:	mov    QWORD PTR [rsp+0x8],rax
   2fd22:	call   2be90 <MSAVerifyParse>
   2fd27:	mov    rsi,r15
   2fd2a:	mov    rdi,rbx
   2fd2d:	call   24a20 <FreeAlignment>
   2fd32:	mov    rax,QWORD PTR [rsp+0x8]
   2fd37:	jmp    2f291 <ReadSELEX+0x571>
   2fd3c:	nop    DWORD PTR [rax+0x0]
   2fd40:	lea    rsi,[rip+0x11f85]        # 41ccc <CSWTCH.18+0x60c>
   2fd47:	xor    edi,edi
   2fd49:	call   3770 <strtok@plt>
   2fd4e:	mov    rbp,rax
   2fd51:	test   rax,rax
   2fd54:	je     30059 <ReadSELEX+0x1339>
   2fd5a:	mov    rdi,rbp
   2fd5d:	xor    esi,esi
   2fd5f:	call   3510 <strtod@plt>
   2fd64:	lea    rsi,[rip+0x11f61]        # 41ccc <CSWTCH.18+0x60c>
   2fd6b:	xor    edi,edi
   2fd6d:	cvtsd2ss xmm0,xmm0
   2fd71:	movss  DWORD PTR [rsp+0xb8],xmm0
   2fd7a:	call   3770 <strtok@plt>
   2fd7f:	mov    rbp,rax
   2fd82:	test   rax,rax
   2fd85:	je     30046 <ReadSELEX+0x1326>
   2fd8b:	xor    esi,esi
   2fd8d:	mov    rdi,rbp
   2fd90:	call   3510 <strtod@plt>
   2fd95:	or     DWORD PTR [rsp+0x60],0x2
   2fd9a:	cvtsd2ss xmm0,xmm0
   2fd9e:	movss  DWORD PTR [rsp+0xbc],xmm0
   2fda7:	jmp    2f480 <ReadSELEX+0x760>
   2fdac:	nop    DWORD PTR [rax+0x0]
   2fdb0:	cmp    BYTE PTR [rbp+0x1],0x3d
   2fdb4:	je     2f708 <ReadSELEX+0x9e8>
   2fdba:	jmp    2f6ca <ReadSELEX+0x9aa>
   2fdbf:	nop
   2fdc0:	mov    rdi,rbp
   2fdc3:	call   3560 <strlen@plt>
   2fdc8:	mov    r9d,DWORD PTR [r13+0x4]
   2fdcc:	mov    r8d,DWORD PTR [r13+0x0]
   2fdd0:	mov    rcx,r12
   2fdd3:	lea    edx,[rax-0x1]
   2fdd6:	movsxd rax,DWORD PTR [rsp+0x10]
   2fddb:	mov    esi,DWORD PTR [rsp+0x8]
   2fddf:	imul   rax,rax,0x168
   2fde6:	add    rax,QWORD PTR [rsp+0x88]
   2fdee:	mov    rdi,QWORD PTR [rax-0x8]
   2fdf2:	call   2ec90 <copy_alignment_line.constprop.0>
   2fdf7:	test   eax,eax
   2fdf9:	jne    2f708 <ReadSELEX+0x9e8>
   2fdff:	lea    rdi,[rip+0x11d62]        # 41b68 <CSWTCH.18+0x4a8>
   2fe06:	call   317f0 <Die>
   2fe0b:	jmp    2f708 <ReadSELEX+0x9e8>
   2fe10:	lea    rsi,[rip+0x11eb5]        # 41ccc <CSWTCH.18+0x60c>
   2fe17:	xor    edi,edi
   2fe19:	call   3770 <strtok@plt>
   2fe1e:	mov    r8,rax
   2fe21:	test   rax,rax
   2fe24:	je     300b7 <ReadSELEX+0x1397>
   2fe2a:	movsxd rax,DWORD PTR [rsp+0x8]
   2fe2f:	mov    rsi,QWORD PTR [rsp+0x88]
   2fe37:	mov    rdi,r8
   2fe3a:	imul   rbp,rax,0x168
   2fe41:	mov    QWORD PTR [rsp+0x18],rax
   2fe46:	add    rsi,rbp
   2fe49:	add    rsi,0x4
   2fe4d:	call   3640 <strcmp@plt>
   2fe52:	lea    rsi,[rip+0x11e73]        # 41ccc <CSWTCH.18+0x60c>
   2fe59:	test   eax,eax
   2fe5b:	mov    eax,0x1
   2fe60:	cmove  eax,DWORD PTR [rsp+0x2c]
   2fe65:	xor    edi,edi
   2fe67:	mov    DWORD PTR [rsp+0x2c],eax
   2fe6b:	call   3770 <strtok@plt>
   2fe70:	mov    r8,rax
   2fe73:	test   rax,rax
   2fe76:	je     3006c <ReadSELEX+0x134c>
   2fe7c:	mov    rdi,r8
   2fe7f:	mov    QWORD PTR [rsp+0x20],r8
   2fe84:	call   3ab70 <IsReal>
   2fe89:	mov    r8,QWORD PTR [rsp+0x20]
   2fe8e:	test   eax,eax
   2fe90:	je     3001f <ReadSELEX+0x12ff>
   2fe96:	mov    rdi,r8
   2fe99:	xor    esi,esi
   2fe9b:	call   3510 <strtod@plt>
   2fea0:	mov    rax,QWORD PTR [rsp+0x70]
   2fea5:	mov    rdx,QWORD PTR [rsp+0x18]
   2feaa:	xor    edi,edi
   2feac:	lea    rsi,[rip+0x11e19]        # 41ccc <CSWTCH.18+0x60c>
   2feb3:	cvtsd2ss xmm0,xmm0
   2feb7:	movss  DWORD PTR [rax+rdx*4],xmm0
   2febc:	call   3770 <strtok@plt>
   2fec1:	mov    rsi,rax
   2fec4:	test   rax,rax
   2fec7:	je     3012b <ReadSELEX+0x140b>
   2fecd:	mov    rdi,QWORD PTR [rsp+0x88]
   2fed5:	mov    edx,0x2
   2feda:	add    rdi,rbp
   2fedd:	call   32440 <SetSeqinfoString>
   2fee2:	lea    rsi,[rip+0x11de3]        # 41ccc <CSWTCH.18+0x60c>
   2fee9:	xor    edi,edi
   2feeb:	call   3770 <strtok@plt>
   2fef0:	mov    rsi,rax
   2fef3:	test   rax,rax
   2fef6:	je     3010e <ReadSELEX+0x13ee>
   2fefc:	mov    rdi,QWORD PTR [rsp+0x88]
   2ff04:	mov    edx,0x4
   2ff09:	add    rdi,rbp
   2ff0c:	call   32440 <SetSeqinfoString>
   2ff11:	lea    rsi,[rip+0x119ee]        # 41906 <CSWTCH.18+0x246>
   2ff18:	xor    edi,edi
   2ff1a:	call   3770 <strtok@plt>
   2ff1f:	mov    rsi,rax
   2ff22:	test   rax,rax
   2ff25:	je     300f1 <ReadSELEX+0x13d1>
   2ff2b:	mov    rdi,QWORD PTR [rsp+0x88]
   2ff33:	mov    edx,0x10
   2ff38:	add    rdi,rbp
   2ff3b:	call   32440 <SetSeqinfoString>
   2ff40:	lea    rsi,[rip+0x119bf]        # 41906 <CSWTCH.18+0x246>
   2ff47:	xor    edi,edi
   2ff49:	call   3770 <strtok@plt>
   2ff4e:	mov    rsi,rax
   2ff51:	test   rax,rax
   2ff54:	je     300d4 <ReadSELEX+0x13b4>
   2ff5a:	mov    rdi,QWORD PTR [rsp+0x88]
   2ff62:	mov    edx,0x20
   2ff67:	add    rdi,rbp
   2ff6a:	call   32440 <SetSeqinfoString>
   2ff6f:	lea    rsi,[rip+0x11993]        # 41909 <CSWTCH.18+0x249>
   2ff76:	xor    edi,edi
   2ff78:	call   3770 <strtok@plt>
   2ff7d:	mov    rsi,rax
   2ff80:	test   rax,rax
   2ff83:	je     3009a <ReadSELEX+0x137a>
   2ff89:	mov    rdi,QWORD PTR [rsp+0x88]
   2ff91:	mov    edx,0x100
   2ff96:	add    rdi,rbp
   2ff99:	call   32440 <SetSeqinfoString>
   2ff9e:	lea    rsi,[rip+0x11d29]        # 41cce <CSWTCH.18+0x60e>
   2ffa5:	xor    edi,edi
   2ffa7:	call   3770 <strtok@plt>
   2ffac:	mov    rsi,rax
   2ffaf:	test   rax,rax
   2ffb2:	je     2ffc9 <ReadSELEX+0x12a9>
   2ffb4:	mov    rdi,QWORD PTR [rsp+0x88]
   2ffbc:	mov    edx,0x8
   2ffc1:	add    rdi,rbp
   2ffc4:	call   32440 <SetSeqinfoString>
   2ffc9:	add    DWORD PTR [rsp+0x8],0x1
   2ffce:	jmp    2f480 <ReadSELEX+0x760>
   2ffd3:	lea    rdi,[rip+0x119f6]        # 419d0 <CSWTCH.18+0x310>
   2ffda:	xor    eax,eax
   2ffdc:	call   317f0 <Die>
   2ffe1:	jmp    2f8d3 <ReadSELEX+0xbb3>
   2ffe6:	lea    rdi,[rip+0x119e3]        # 419d0 <CSWTCH.18+0x310>
   2ffed:	xor    eax,eax
   2ffef:	call   317f0 <Die>
   2fff4:	jmp    2f8a2 <ReadSELEX+0xb82>
   2fff9:	lea    rdi,[rip+0x119f8]        # 419f8 <CSWTCH.18+0x338>
   30000:	xor    eax,eax
   30002:	call   317f0 <Die>
   30007:	jmp    2f98b <ReadSELEX+0xc6b>
   3000c:	lea    rdi,[rip+0x119e5]        # 419f8 <CSWTCH.18+0x338>
   30013:	xor    eax,eax
   30015:	call   317f0 <Die>
   3001a:	jmp    2f95a <ReadSELEX+0xc3a>
   3001f:	lea    rdi,[rip+0x11a4a]        # 41a70 <CSWTCH.18+0x3b0>
   30026:	call   317f0 <Die>
   3002b:	mov    r8,QWORD PTR [rsp+0x20]
   30030:	jmp    2fe96 <ReadSELEX+0x1176>
   30035:	lea    rdi,[rip+0x11b54]        # 41b90 <CSWTCH.18+0x4d0>
   3003c:	call   317f0 <Die>
   30041:	jmp    2f6ff <ReadSELEX+0x9df>
   30046:	lea    rdi,[rip+0x119d3]        # 41a20 <CSWTCH.18+0x360>
   3004d:	xor    eax,eax
   3004f:	call   317f0 <Die>
   30054:	jmp    2fd8b <ReadSELEX+0x106b>
   30059:	lea    rdi,[rip+0x119c0]        # 41a20 <CSWTCH.18+0x360>
   30060:	xor    eax,eax
   30062:	call   317f0 <Die>
   30067:	jmp    2fd5a <ReadSELEX+0x103a>
   3006c:	mov    QWORD PTR [rsp+0x20],rax
   30071:	lea    rdi,[rip+0x119d0]        # 41a48 <CSWTCH.18+0x388>
   30078:	xor    eax,eax
   3007a:	call   317f0 <Die>
   3007f:	mov    r8,QWORD PTR [rsp+0x20]
   30084:	jmp    2fe7c <ReadSELEX+0x115c>
   30089:	lea    rdi,[rip+0x118f8]        # 41988 <CSWTCH.18+0x2c8>
   30090:	call   317f0 <Die>
   30095:	jmp    2ed83 <ReadSELEX+0x63>
   3009a:	mov    QWORD PTR [rsp+0x18],rax
   3009f:	lea    rdi,[rip+0x11a0a]        # 41ab0 <CSWTCH.18+0x3f0>
   300a6:	xor    eax,eax
   300a8:	call   317f0 <Die>
   300ad:	mov    rsi,QWORD PTR [rsp+0x18]
   300b2:	jmp    2ff89 <ReadSELEX+0x1269>
   300b7:	mov    QWORD PTR [rsp+0x18],rax
   300bc:	lea    rdi,[rip+0x11985]        # 41a48 <CSWTCH.18+0x388>
   300c3:	xor    eax,eax
   300c5:	call   317f0 <Die>
   300ca:	mov    r8,QWORD PTR [rsp+0x18]
   300cf:	jmp    2fe2a <ReadSELEX+0x110a>
   300d4:	mov    QWORD PTR [rsp+0x18],rax
   300d9:	lea    rdi,[rip+0x119d0]        # 41ab0 <CSWTCH.18+0x3f0>
   300e0:	xor    eax,eax
   300e2:	call   317f0 <Die>
   300e7:	mov    rsi,QWORD PTR [rsp+0x18]
   300ec:	jmp    2ff5a <ReadSELEX+0x123a>
   300f1:	mov    QWORD PTR [rsp+0x18],rax
   300f6:	lea    rdi,[rip+0x119b3]        # 41ab0 <CSWTCH.18+0x3f0>
   300fd:	xor    eax,eax
   300ff:	call   317f0 <Die>
   30104:	mov    rsi,QWORD PTR [rsp+0x18]
   30109:	jmp    2ff2b <ReadSELEX+0x120b>
   3010e:	mov    QWORD PTR [rsp+0x18],rax
   30113:	lea    rdi,[rip+0x11996]        # 41ab0 <CSWTCH.18+0x3f0>
   3011a:	xor    eax,eax
   3011c:	call   317f0 <Die>
   30121:	mov    rsi,QWORD PTR [rsp+0x18]
   30126:	jmp    2fefc <ReadSELEX+0x11dc>
   3012b:	mov    QWORD PTR [rsp+0x18],rax
   30130:	lea    rdi,[rip+0x11979]        # 41ab0 <CSWTCH.18+0x3f0>
   30137:	xor    eax,eax
   30139:	call   317f0 <Die>
   3013e:	mov    rsi,QWORD PTR [rsp+0x18]
   30143:	jmp    2fecd <ReadSELEX+0x11ad>
   30148:	mov    DWORD PTR [rsp+0x58],0x0
   30150:	jmp    2f1a4 <ReadSELEX+0x484>
   30155:	xor    eax,eax
   30157:	jmp    2f291 <ReadSELEX+0x571>
   3015c:	mov    rax,QWORD PTR [rsp+0x48]
   30161:	lea    rdi,[rip+0x11a58]        # 41bc0 <CSWTCH.18+0x500>
   30168:	mov    rsi,QWORD PTR [rax+0x8]
   3016c:	xor    eax,eax
   3016e:	call   318f0 <Warn>
   30173:	jmp    2fd05 <ReadSELEX+0xfe5>
   30178:	mov    eax,DWORD PTR [rsp+0x38]
   3017c:	mov    esi,0xfb
   30181:	lea    rdi,[rip+0x11733]        # 418bb <CSWTCH.18+0x1fb>
   30188:	lea    edx,[rax+0x1]
   3018b:	movsxd rdx,edx
   3018e:	call   36810 <sre_malloc>
   30193:	mov    QWORD PTR [rsp+0x80],rax
   3019b:	jmp    2f343 <ReadSELEX+0x623>
   301a0:	mov    eax,DWORD PTR [rsp+0x38]
   301a4:	mov    esi,0xf9
   301a9:	lea    rdi,[rip+0x1170b]        # 418bb <CSWTCH.18+0x1fb>
   301b0:	lea    edx,[rax+0x1]
   301b3:	movsxd rdx,edx
   301b6:	call   36810 <sre_malloc>
   301bb:	mov    QWORD PTR [rsp+0x78],rax
   301c0:	jmp    2f335 <ReadSELEX+0x615>
   301c5:	mov    rcx,rbx
   301c8:	jmp    2fc06 <ReadSELEX+0xee6>
   301cd:	mov    rcx,rbx
   301d0:	jmp    2fb6e <ReadSELEX+0xe4e>
   301d5:	mov    DWORD PTR [rsp+0x38],0x0
   301dd:	jmp    2f2f7 <ReadSELEX+0x5d7>
   301e2:	call   3570 <__stack_chk_fail@plt>
   301e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000301f0 <WriteSELEX>:
   301f0:	endbr64 
   301f4:	mov    edx,0x32
   301f9:	jmp    2e700 <actually_write_selex>
   301fe:	xchg   ax,ax

0000000000030200 <WriteSELEXOneBlock>:
   30200:	endbr64 
   30204:	mov    edx,DWORD PTR [rsi+0x18]
   30207:	jmp    2e700 <actually_write_selex>
   3020c:	nop    DWORD PTR [rax+0x0]

0000000000030210 <DealignAseqs>:
   30210:	endbr64 
   30214:	push   r15
   30216:	push   r14
   30218:	push   r13
   3021a:	mov    r13,rdi
   3021d:	lea    rdi,[rip+0x11697]        # 418bb <CSWTCH.18+0x1fb>
   30224:	push   r12
   30226:	mov    r12,rdx
   30229:	movsxd rdx,esi
   3022c:	push   rbp
   3022d:	shl    rdx,0x3
   30231:	push   rbx
   30232:	mov    ebx,esi
   30234:	mov    esi,0x2e2
   30239:	sub    rsp,0x8
   3023d:	call   36810 <sre_malloc>
   30242:	mov    rbp,rax
   30245:	test   ebx,ebx
   30247:	jle    3031c <DealignAseqs+0x10c>
   3024d:	movabs r15,0x8000000000006001
   30257:	mov    r14,rax
   3025a:	lea    eax,[rbx-0x1]
   3025d:	lea    rbx,[r13+rax*8+0x8]
   30262:	nop    WORD PTR [rax+rax*1+0x0]
   30268:	mov    rdi,QWORD PTR [r13+0x0]
   3026c:	call   3560 <strlen@plt>
   30271:	mov    esi,0x2e8
   30276:	lea    rdi,[rip+0x1163e]        # 418bb <CSWTCH.18+0x1fb>
   3027d:	lea    edx,[rax+0x1]
   30280:	movsxd rdx,edx
   30283:	call   36810 <sre_malloc>
   30288:	mov    QWORD PTR [r14],rax
   3028b:	mov    r9,QWORD PTR [r13+0x0]
   3028f:	movzx  edx,BYTE PTR [r9]
   30293:	test   dl,dl
   30295:	je     30338 <DealignAseqs+0x128>
   3029b:	mov    edi,0x1
   302a0:	xor    r10d,r10d
   302a3:	xor    r8d,r8d
   302a6:	jmp    302bd <DealignAseqs+0xad>
   302a8:	nop    DWORD PTR [rax+rax*1+0x0]
   302b0:	movzx  edx,BYTE PTR [r9+rdi*1]
   302b5:	add    rdi,0x1
   302b9:	test   dl,dl
   302bb:	je     30308 <DealignAseqs+0xf8>
   302bd:	lea    ecx,[rdx-0x20]
   302c0:	mov    esi,0x1
   302c5:	cmp    cl,0x3f
   302c8:	ja     302d6 <DealignAseqs+0xc6>
   302ca:	mov    rsi,r15
   302cd:	shr    rsi,cl
   302d0:	not    rsi
   302d3:	and    esi,0x1
   302d6:	lea    rcx,[rax+r8*1]
   302da:	cmp    dl,0x7e
   302dd:	je     302b0 <DealignAseqs+0xa0>
   302df:	test   sil,sil
   302e2:	je     302b0 <DealignAseqs+0xa0>
   302e4:	mov    BYTE PTR [rcx],dl
   302e6:	mov    r9,QWORD PTR [r13+0x0]
   302ea:	add    r10d,0x1
   302ee:	mov    rax,QWORD PTR [r14]
   302f1:	movsxd r8,r10d
   302f4:	movzx  edx,BYTE PTR [r9+rdi*1]
   302f9:	add    rdi,0x1
   302fd:	lea    rcx,[rax+r8*1]
   30301:	test   dl,dl
   30303:	jne    302bd <DealignAseqs+0xad>
   30305:	nop    DWORD PTR [rax]
   30308:	add    r13,0x8
   3030c:	mov    BYTE PTR [rcx],0x0
   3030f:	add    r14,0x8
   30313:	cmp    rbx,r13
   30316:	jne    30268 <DealignAseqs+0x58>
   3031c:	mov    QWORD PTR [r12],rbp
   30320:	add    rsp,0x8
   30324:	mov    eax,0x1
   30329:	pop    rbx
   3032a:	pop    rbp
   3032b:	pop    r12
   3032d:	pop    r13
   3032f:	pop    r14
   30331:	pop    r15
   30333:	ret    
   30334:	nop    DWORD PTR [rax+0x0]
   30338:	mov    rcx,rax
   3033b:	add    r13,0x8
   3033f:	add    r14,0x8
   30343:	mov    BYTE PTR [rcx],0x0
   30346:	cmp    rbx,r13
   30349:	jne    30268 <DealignAseqs+0x58>
   3034f:	jmp    3031c <DealignAseqs+0x10c>
   30351:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3035c:	nop    DWORD PTR [rax+0x0]

0000000000030360 <IsSELEXFormat>:
   30360:	endbr64 
   30364:	push   r14
   30366:	push   r13
   30368:	push   r12
   3036a:	push   rbp
   3036b:	push   rbx
   3036c:	sub    rsp,0x1000
   30373:	or     QWORD PTR [rsp],0x0
   30378:	sub    rsp,0x10
   3037c:	lea    rsi,[rip+0x10bcb]        # 40f4e <gki_primes+0x4ce>
   30383:	mov    rax,QWORD PTR fs:0x28
   3038c:	mov    QWORD PTR [rsp+0x1008],rax
   30394:	xor    eax,eax
   30396:	call   3750 <fopen@plt>
   3039b:	test   rax,rax
   3039e:	je     304c0 <IsSELEXFormat+0x160>
   303a4:	mov    r12,rax
   303a7:	mov    ebp,0x1f4
   303ac:	mov    rbx,rsp
   303af:	lea    r13,[rip+0x1db12]        # 4dec8 <commentsyms>
   303b6:	mov    rdx,r12
   303b9:	mov    esi,0x1000
   303be:	mov    rdi,rbx
   303c1:	call   3620 <fgets@plt>
   303c6:	test   rax,rax
   303c9:	je     30440 <IsSELEXFormat+0xe0>
   303cb:	cmp    DWORD PTR [rbx],0x55413d23
   303d1:	je     30440 <IsSELEXFormat+0xe0>
   303d3:	cmp    DWORD PTR [rbx],0x44493d23
   303d9:	je     30440 <IsSELEXFormat+0xe0>
   303db:	cmp    DWORD PTR [rbx],0x43413d23
   303e1:	je     30440 <IsSELEXFormat+0xe0>
   303e3:	cmp    DWORD PTR [rbx],0x45443d23
   303e9:	je     30440 <IsSELEXFormat+0xe0>
   303eb:	cmp    DWORD PTR [rbx],0x41473d23
   303f1:	je     30440 <IsSELEXFormat+0xe0>
   303f3:	cmp    DWORD PTR [rbx],0x43543d23
   303f9:	je     30440 <IsSELEXFormat+0xe0>
   303fb:	cmp    DWORD PTR [rbx],0x434e3d23
   30401:	je     30440 <IsSELEXFormat+0xe0>
   30403:	cmp    DWORD PTR [rbx],0x51533d23
   30409:	je     30440 <IsSELEXFormat+0xe0>
   3040b:	cmp    DWORD PTR [rbx],0x53533d23
   30411:	je     30440 <IsSELEXFormat+0xe0>
   30413:	cmp    DWORD PTR [rbx],0x53433d23
   30419:	je     30440 <IsSELEXFormat+0xe0>
   3041b:	cmp    DWORD PTR [rbx],0x46523d23
   30421:	je     30440 <IsSELEXFormat+0xe0>
   30423:	movsx  esi,BYTE PTR [rsp]
   30427:	mov    rdi,r13
   3042a:	call   3590 <strchr@plt>
   3042f:	test   rax,rax
   30432:	je     30478 <IsSELEXFormat+0x118>
   30434:	sub    ebp,0x1
   30437:	jne    303b6 <IsSELEXFormat+0x56>
   3043d:	nop    DWORD PTR [rax]
   30440:	mov    rdi,r12
   30443:	mov    r14d,0x1
   30449:	call   3530 <fclose@plt>
   3044e:	mov    rax,QWORD PTR [rsp+0x1008]
   30456:	xor    rax,QWORD PTR fs:0x28
   3045f:	jne    304d2 <IsSELEXFormat+0x172>
   30461:	add    rsp,0x1010
   30468:	mov    eax,r14d
   3046b:	pop    rbx
   3046c:	pop    rbp
   3046d:	pop    r12
   3046f:	pop    r13
   30471:	pop    r14
   30473:	ret    
   30474:	nop    DWORD PTR [rax+0x0]
   30478:	lea    rsi,[rip+0x1184d]        # 41ccc <CSWTCH.18+0x60c>
   3047f:	mov    rdi,rbx
   30482:	call   3770 <strtok@plt>
   30487:	test   rax,rax
   3048a:	je     30434 <IsSELEXFormat+0xd4>
   3048c:	xor    edi,edi
   3048e:	lea    rsi,[rip+0x11839]        # 41cce <CSWTCH.18+0x60e>
   30495:	call   3770 <strtok@plt>
   3049a:	mov    rdi,rax
   3049d:	test   rax,rax
   304a0:	je     30434 <IsSELEXFormat+0xd4>
   304a2:	call   338c0 <Seqtype>
   304a7:	mov    r14d,eax
   304aa:	test   eax,eax
   304ac:	jne    30434 <IsSELEXFormat+0xd4>
   304ae:	mov    rdi,r12
   304b1:	call   3530 <fclose@plt>
   304b6:	jmp    3044e <IsSELEXFormat+0xee>
   304b8:	nop    DWORD PTR [rax+rax*1+0x0]
   304c0:	mov    DWORD PTR [rip+0x31ea6],0x4        # 62370 <squid_errno>
   304ca:	xor    r14d,r14d
   304cd:	jmp    3044e <IsSELEXFormat+0xee>
   304d2:	call   3570 <__stack_chk_fail@plt>
   304d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000304e0 <seqcmp>:
   304e0:	endbr64 
   304e4:	movzx  ecx,BYTE PTR [rdi]
   304e7:	test   cl,cl
   304e9:	je     30571 <seqcmp+0x91>
   304ef:	mov    eax,edx
   304f1:	movzx  r8d,BYTE PTR [rsi]
   304f5:	not    eax
   304f7:	shr    eax,0x1f
   304fa:	mov    r9d,eax
   304fd:	test   r8b,r8b
   30500:	je     30542 <seqcmp+0x62>
   30502:	test   al,al
   30504:	je     30542 <seqcmp+0x62>
   30506:	xor    eax,eax
   30508:	jmp    30524 <seqcmp+0x44>
   3050a:	nop    WORD PTR [rax+rax*1+0x0]
   30510:	movzx  r8d,BYTE PTR [rsi]
   30514:	cmp    eax,edx
   30516:	setle  r9b
   3051a:	test   r8b,r8b
   3051d:	je     30548 <seqcmp+0x68>
   3051f:	test   r9b,r9b
   30522:	je     30548 <seqcmp+0x68>
   30524:	and    ecx,r8d
   30527:	cmp    cl,r8b
   3052a:	setne  cl
   3052d:	add    rdi,0x1
   30531:	add    rsi,0x1
   30535:	movzx  ecx,cl
   30538:	add    eax,ecx
   3053a:	movzx  ecx,BYTE PTR [rdi]
   3053d:	test   cl,cl
   3053f:	jne    30510 <seqcmp+0x30>
   30541:	ret    
   30542:	xor    eax,eax
   30544:	nop    DWORD PTR [rax+0x0]
   30548:	add    rdi,0x1
   3054c:	test   r9b,r9b
   3054f:	jne    3055c <seqcmp+0x7c>
   30551:	jmp    30541 <seqcmp+0x61>
   30553:	nop    DWORD PTR [rax+rax*1+0x0]
   30558:	cmp    edx,eax
   3055a:	jl     30570 <seqcmp+0x90>
   3055c:	add    rdi,0x1
   30560:	add    eax,0x1
   30563:	cmp    BYTE PTR [rdi-0x1],0x0
   30567:	jne    30558 <seqcmp+0x78>
   30569:	jmp    30541 <seqcmp+0x61>
   3056b:	nop    DWORD PTR [rax+rax*1+0x0]
   30570:	ret    
   30571:	xor    eax,eax
   30573:	ret    
   30574:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3057f:	nop

0000000000030580 <seqncmp>:
   30580:	endbr64 
   30584:	movzx  r8d,BYTE PTR [rsi]
   30588:	lea    r10d,[rdx-0x1]
   3058c:	test   r8b,r8b
   3058f:	je     30620 <seqncmp+0xa0>
   30595:	test   edx,edx
   30597:	je     3060f <seqncmp+0x8f>
   30599:	mov    eax,r10d
   3059c:	lea    r11,[rdi+rax*1+0x1]
   305a1:	xor    eax,eax
   305a3:	jmp    305b0 <seqncmp+0x30>
   305a5:	nop    DWORD PTR [rax]
   305a8:	cmp    rdi,r11
   305ab:	je     30618 <seqncmp+0x98>
   305ad:	mov    r10d,r9d
   305b0:	movzx  edx,BYTE PTR [rdi]
   305b3:	and    edx,r8d
   305b6:	cmp    dl,r8b
   305b9:	je     305c2 <seqncmp+0x42>
   305bb:	add    eax,0x1
   305be:	cmp    eax,ecx
   305c0:	jg     3060e <seqncmp+0x8e>
   305c2:	movzx  r8d,BYTE PTR [rsi+0x1]
   305c7:	add    rsi,0x1
   305cb:	add    rdi,0x1
   305cf:	lea    r9d,[r10-0x1]
   305d3:	test   r8b,r8b
   305d6:	jne    305a8 <seqncmp+0x28>
   305d8:	test   r10d,r10d
   305db:	je     3062a <seqncmp+0xaa>
   305dd:	cmp    BYTE PTR [rdi],0x0
   305e0:	lea    rdx,[rdi+0x1]
   305e4:	je     3060e <seqncmp+0x8e>
   305e6:	cmp    eax,ecx
   305e8:	jg     3060e <seqncmp+0x8e>
   305ea:	lea    rsi,[rdi+r9*1+0x1]
   305ef:	jmp    30606 <seqncmp+0x86>
   305f1:	nop    DWORD PTR [rax+0x0]
   305f8:	add    rdx,0x1
   305fc:	cmp    BYTE PTR [rdx-0x1],0x0
   30600:	je     3060e <seqncmp+0x8e>
   30602:	cmp    ecx,eax
   30604:	jl     3060e <seqncmp+0x8e>
   30606:	add    eax,0x1
   30609:	cmp    rsi,rdx
   3060c:	jne    305f8 <seqncmp+0x78>
   3060e:	ret    
   3060f:	xor    eax,eax
   30611:	nop    DWORD PTR [rax+0x0]
   30618:	mov    r9d,0xfffffffe
   3061e:	jmp    305dd <seqncmp+0x5d>
   30620:	mov    r9d,r10d
   30623:	xor    eax,eax
   30625:	mov    r10d,edx
   30628:	jmp    305d8 <seqncmp+0x58>
   3062a:	ret    
   3062b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000030630 <seqencode>:
   30630:	endbr64 
   30634:	push   r15
   30636:	push   r14
   30638:	push   r13
   3063a:	mov    r13,rdi
   3063d:	push   r12
   3063f:	push   rbp
   30640:	push   rbx
   30641:	sub    rsp,0x8
   30645:	movzx  ebx,BYTE PTR [rsi]
   30648:	test   bl,bl
   3064a:	je     306b2 <seqencode+0x82>
   3064c:	mov    r12,rsi
   3064f:	lea    rbp,[rip+0x1d30a]        # 4d960 <iupac>
   30656:	call   3820 <__ctype_b_loc@plt>
   3065b:	mov    r15,rax
   3065e:	xchg   ax,ax
   30660:	mov    rax,QWORD PTR [r15]
   30663:	movsx  r14,bl
   30667:	test   BYTE PTR [rax+r14*2+0x1],0x2
   3066d:	jne    306d0 <seqencode+0xa0>
   3066f:	movzx  ebx,BYTE PTR [r12]
   30674:	cmp    bl,BYTE PTR [rbp+0x0]
   30677:	je     306f3 <seqencode+0xc3>
   30679:	mov    eax,0x1
   3067e:	jmp    3068a <seqencode+0x5a>
   30680:	add    rax,0x1
   30684:	cmp    rax,0x13
   30688:	je     30700 <seqencode+0xd0>
   3068a:	movsxd rdx,eax
   3068d:	cmp    bl,BYTE PTR [rbp+rax*4+0x0]
   30691:	jne    30680 <seqencode+0x50>
   30693:	cmp    edx,0x12
   30696:	je     30700 <seqencode+0xd0>
   30698:	movzx  eax,BYTE PTR [rbp+rdx*4+0x2]
   3069d:	add    r12,0x1
   306a1:	add    r13,0x1
   306a5:	mov    BYTE PTR [r13-0x1],al
   306a9:	movzx  ebx,BYTE PTR [r12]
   306ae:	test   bl,bl
   306b0:	jne    30660 <seqencode+0x30>
   306b2:	mov    BYTE PTR [r13+0x0],0x0
   306b7:	add    rsp,0x8
   306bb:	mov    eax,0x1
   306c0:	pop    rbx
   306c1:	pop    rbp
   306c2:	pop    r12
   306c4:	pop    r13
   306c6:	pop    r14
   306c8:	pop    r15
   306ca:	ret    
   306cb:	nop    DWORD PTR [rax+rax*1+0x0]
   306d0:	movsx  eax,bl
   306d3:	sub    eax,0xffffff80
   306d6:	cmp    eax,0x17f
   306db:	ja     306ea <seqencode+0xba>
   306dd:	call   3440 <__ctype_toupper_loc@plt>
   306e2:	mov    rax,QWORD PTR [rax]
   306e5:	movzx  ebx,BYTE PTR [rax+r14*4]
   306ea:	mov    BYTE PTR [r12],bl
   306ee:	cmp    bl,BYTE PTR [rbp+0x0]
   306f1:	jne    30679 <seqencode+0x49>
   306f3:	xor    edx,edx
   306f5:	jmp    30698 <seqencode+0x68>
   306f7:	nop    WORD PTR [rax+rax*1+0x0]
   30700:	mov    BYTE PTR [r13+0x0],0x0
   30705:	add    rsp,0x8
   30709:	xor    eax,eax
   3070b:	pop    rbx
   3070c:	pop    rbp
   3070d:	pop    r12
   3070f:	pop    r13
   30711:	pop    r14
   30713:	pop    r15
   30715:	ret    
   30716:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000030720 <coded_revcomp>:
   30720:	endbr64 
   30724:	push   rbp
   30725:	mov    rbp,rdi
   30728:	mov    rdi,rsi
   3072b:	push   rbx
   3072c:	mov    rbx,rsi
   3072f:	sub    rsp,0x8
   30733:	call   3560 <strlen@plt>
   30738:	lea    r8,[rbx+rax*1-0x1]
   3073d:	test   rax,rax
   30740:	je     3079d <coded_revcomp+0x7d>
   30742:	lea    r11,[rip+0x1d217]        # 4d960 <iupac>
   30749:	lea    r10,[rbx-0x1]
   3074d:	mov    r9,rbp
   30750:	lea    rdi,[r11+0x2]
   30754:	nop    DWORD PTR [rax+0x0]
   30758:	movzx  esi,BYTE PTR [r8]
   3075c:	xor    ecx,ecx
   3075e:	cmp    sil,BYTE PTR [rip+0x1d1fd]        # 4d962 <iupac+0x2>
   30765:	mov    edx,0x1
   3076a:	jne    3077a <coded_revcomp+0x5a>
   3076c:	jmp    30783 <coded_revcomp+0x63>
   3076e:	xchg   ax,ax
   30770:	add    rdx,0x1
   30774:	cmp    rdx,0x12
   30778:	je     307b0 <coded_revcomp+0x90>
   3077a:	movsxd rcx,edx
   3077d:	cmp    BYTE PTR [rdi+rdx*4],sil
   30781:	jne    30770 <coded_revcomp+0x50>
   30783:	movzx  edx,BYTE PTR [r11+rcx*4+0x3]
   30789:	sub    r8,0x1
   3078d:	add    r9,0x1
   30791:	mov    BYTE PTR [r9-0x1],dl
   30795:	cmp    r8,r10
   30798:	jne    30758 <coded_revcomp+0x38>
   3079a:	add    rbp,rax
   3079d:	mov    BYTE PTR [rbp+0x0],0x0
   307a1:	add    rsp,0x8
   307a5:	mov    eax,0x1
   307aa:	pop    rbx
   307ab:	pop    rbp
   307ac:	ret    
   307ad:	nop    DWORD PTR [rax]
   307b0:	mov    ecx,0x11
   307b5:	jmp    30783 <coded_revcomp+0x63>
   307b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000307c0 <seqdecode>:
   307c0:	endbr64 
   307c4:	movzx  ecx,BYTE PTR [rsi]
   307c7:	lea    r10,[rip+0x1d192]        # 4d960 <iupac>
   307ce:	mov    r9d,0x1
   307d4:	lea    r8,[r10+0x2]
   307d8:	test   cl,cl
   307da:	je     30829 <seqdecode+0x69>
   307dc:	nop    DWORD PTR [rax+0x0]
   307e0:	xor    edx,edx
   307e2:	cmp    BYTE PTR [rip+0x1d17a],cl        # 4d962 <iupac+0x2>
   307e8:	mov    eax,0x1
   307ed:	jne    30802 <seqdecode+0x42>
   307ef:	jmp    3080b <seqdecode+0x4b>
   307f1:	nop    DWORD PTR [rax+0x0]
   307f8:	add    rax,0x1
   307fc:	cmp    rax,0x12
   30800:	je     30838 <seqdecode+0x78>
   30802:	movsxd rdx,eax
   30805:	cmp    BYTE PTR [r8+rax*4],cl
   30809:	jne    307f8 <seqdecode+0x38>
   3080b:	movzx  eax,BYTE PTR [r10+rdx*4]
   30810:	mov    BYTE PTR [rdi+r9*1-0x1],al
   30815:	movsxd rax,r9d
   30818:	add    r9,0x1
   3081c:	movzx  ecx,BYTE PTR [rsi+r9*1-0x1]
   30822:	test   cl,cl
   30824:	jne    307e0 <seqdecode+0x20>
   30826:	add    rdi,rax
   30829:	mov    BYTE PTR [rdi],0x0
   3082c:	mov    eax,0x1
   30831:	ret    
   30832:	nop    WORD PTR [rax+rax*1+0x0]
   30838:	mov    edx,0x11
   3083d:	jmp    3080b <seqdecode+0x4b>
   3083f:	nop

0000000000030840 <seqndecode>:
   30840:	endbr64 
   30844:	push   rbx
   30845:	movsxd rbx,edx
   30848:	test   ebx,ebx
   3084a:	jle    308c3 <seqndecode+0x83>
   3084c:	lea    r11,[rip+0x1d10d]        # 4d960 <iupac>
   30853:	lea    edx,[rbx-0x1]
   30856:	xor    r10d,r10d
   30859:	lea    r9,[r11+0x2]
   3085d:	nop    DWORD PTR [rax]
   30860:	movzx  r8d,BYTE PTR [rsi+r10*1]
   30865:	xor    ecx,ecx
   30867:	cmp    r8b,BYTE PTR [rip+0x1d0f4]        # 4d962 <iupac+0x2>
   3086e:	mov    eax,0x1
   30873:	jne    3088a <seqndecode+0x4a>
   30875:	jmp    30893 <seqndecode+0x53>
   30877:	nop    WORD PTR [rax+rax*1+0x0]
   30880:	add    rax,0x1
   30884:	cmp    rax,0x12
   30888:	je     308b0 <seqndecode+0x70>
   3088a:	movsxd rcx,eax
   3088d:	cmp    BYTE PTR [r9+rax*4],r8b
   30891:	jne    30880 <seqndecode+0x40>
   30893:	movzx  eax,BYTE PTR [r11+rcx*4]
   30898:	mov    BYTE PTR [rdi+r10*1],al
   3089c:	lea    rax,[r10+0x1]
   308a0:	cmp    rdx,r10
   308a3:	je     308c0 <seqndecode+0x80>
   308a5:	mov    r10,rax
   308a8:	jmp    30860 <seqndecode+0x20>
   308aa:	nop    WORD PTR [rax+rax*1+0x0]
   308b0:	mov    ecx,0x11
   308b5:	jmp    30893 <seqndecode+0x53>
   308b7:	nop    WORD PTR [rax+rax*1+0x0]
   308c0:	add    rdi,rbx
   308c3:	mov    eax,0x1
   308c8:	mov    BYTE PTR [rdi],0x0
   308cb:	pop    rbx
   308cc:	ret    
   308cd:	nop    DWORD PTR [rax]

00000000000308d0 <StrShuffle>:
   308d0:	endbr64 
   308d4:	push   rbp
   308d5:	mov    rbp,rdi
   308d8:	push   rbx
   308d9:	sub    rsp,0x8
   308dd:	cmp    rdi,rsi
   308e0:	je     308e7 <StrShuffle+0x17>
   308e2:	call   34e0 <strcpy@plt>
   308e7:	mov    rdi,rbp
   308ea:	call   3560 <strlen@plt>
   308ef:	cmp    eax,0x1
   308f2:	jle    30935 <StrShuffle+0x65>
   308f4:	movsxd rbx,eax
   308f7:	nop    WORD PTR [rax+rax*1+0x0]
   30900:	call   36060 <sre_random>
   30905:	movzx  ecx,BYTE PTR [rbp+rbx*1-0x1]
   3090a:	movapd xmm1,xmm0
   3090e:	pxor   xmm0,xmm0
   30912:	cvtsi2sd xmm0,ebx
   30916:	mulsd  xmm0,xmm1
   3091a:	cvttsd2si eax,xmm0
   3091e:	cdqe   
   30920:	add    rax,rbp
   30923:	movzx  edx,BYTE PTR [rax]
   30926:	mov    BYTE PTR [rax],cl
   30928:	mov    BYTE PTR [rbp+rbx*1-0x1],dl
   3092c:	sub    rbx,0x1
   30930:	cmp    ebx,0x1
   30933:	jg     30900 <StrShuffle+0x30>
   30935:	add    rsp,0x8
   30939:	mov    eax,0x1
   3093e:	pop    rbx
   3093f:	pop    rbp
   30940:	ret    
   30941:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3094c:	nop    DWORD PTR [rax+0x0]

0000000000030950 <StrDPShuffle>:
   30950:	endbr64 
   30954:	push   r15
   30956:	push   r14
   30958:	push   r13
   3095a:	push   r12
   3095c:	push   rbp
   3095d:	push   rbx
   3095e:	sub    rsp,0x78
   30962:	mov    QWORD PTR [rsp+0x28],rdi
   30967:	mov    rdi,rsi
   3096a:	mov    QWORD PTR [rsp+0x10],rsi
   3096f:	mov    rax,QWORD PTR fs:0x28
   30978:	mov    QWORD PTR [rsp+0x68],rax
   3097d:	xor    eax,eax
   3097f:	call   3560 <strlen@plt>
   30984:	mov    QWORD PTR [rsp+0x8],rax
   30989:	lea    ebx,[rax-0x1]
   3098c:	test   eax,eax
   3098e:	jle    309cc <StrDPShuffle+0x7c>
   30990:	call   3820 <__ctype_b_loc@plt>
   30995:	mov    ebx,DWORD PTR [rsp+0x8]
   30999:	mov    rdi,QWORD PTR [rsp+0x10]
   3099e:	mov    rsi,QWORD PTR [rax]
   309a1:	lea    edx,[rbx-0x1]
   309a4:	mov    rax,rdi
   309a7:	mov    rbx,rdx
   309aa:	lea    rcx,[rdi+rdx*1+0x1]
   309af:	jmp    309ba <StrDPShuffle+0x6a>
   309b1:	add    rax,0x1
   309b5:	cmp    rcx,rax
   309b8:	je     309cc <StrDPShuffle+0x7c>
   309ba:	movsx  rdx,BYTE PTR [rax]
   309be:	test   BYTE PTR [rsi+rdx*2+0x1],0x4
   309c3:	jne    309b1 <StrDPShuffle+0x61>
   309c5:	xor    eax,eax
   309c7:	jmp    30d24 <StrDPShuffle+0x3d4>
   309cc:	mov    edx,0xd0
   309d1:	mov    esi,0x7f
   309d6:	movsxd rbx,ebx
   309d9:	xor    r15d,r15d
   309dc:	lea    rdi,[rip+0x11213]        # 41bf6 <CSWTCH.18+0x536>
   309e3:	lea    r13,[rip+0x1120c]        # 41bf6 <CSWTCH.18+0x536>
   309ea:	call   36810 <sre_malloc>
   309ef:	mov    edx,0x68
   309f4:	mov    esi,0x80
   309f9:	lea    rdi,[rip+0x111f6]        # 41bf6 <CSWTCH.18+0x536>
   30a00:	mov    rbp,rax
   30a03:	call   36810 <sre_malloc>
   30a08:	mov    r14,rax
   30a0b:	nop    DWORD PTR [rax+rax*1+0x0]
   30a10:	mov    rdx,rbx
   30a13:	mov    esi,0x83
   30a18:	mov    rdi,r13
   30a1b:	call   36810 <sre_malloc>
   30a20:	mov    QWORD PTR [rbp+r15*8+0x0],rax
   30a25:	mov    DWORD PTR [r14+r15*4],0x0
   30a2d:	add    r15,0x1
   30a31:	cmp    r15,0x1a
   30a35:	jne    30a10 <StrDPShuffle+0xc0>
   30a37:	call   3440 <__ctype_toupper_loc@plt>
   30a3c:	mov    rdi,QWORD PTR [rsp+0x10]
   30a41:	mov    rbx,QWORD PTR [rsp+0x8]
   30a46:	mov    rsi,QWORD PTR [rax]
   30a49:	mov    QWORD PTR [rsp+0x20],rax
   30a4e:	mov    r8,rax
   30a51:	movsx  rax,BYTE PTR [rdi]
   30a55:	mov    eax,DWORD PTR [rsi+rax*4]
   30a58:	sub    eax,0x41
   30a5b:	cmp    ebx,0x1
   30a5e:	jle    30aa1 <StrDPShuffle+0x151>
   30a60:	lea    r10d,[rbx-0x2]
   30a64:	mov    rcx,rdi
   30a67:	add    r10,rdi
   30a6a:	jmp    30a75 <StrDPShuffle+0x125>
   30a6c:	mov    rsi,QWORD PTR [r8]
   30a6f:	add    rcx,0x1
   30a73:	mov    eax,edx
   30a75:	movsx  rdx,BYTE PTR [rcx+0x1]
   30a7a:	cdqe   
   30a7c:	mov    edx,DWORD PTR [rsi+rdx*4]
   30a7f:	lea    rsi,[r14+rax*4]
   30a83:	mov    rax,QWORD PTR [rbp+rax*8+0x0]
   30a88:	movsxd rdi,DWORD PTR [rsi]
   30a8b:	sub    edx,0x41
   30a8e:	mov    BYTE PTR [rax+rdi*1],dl
   30a91:	add    DWORD PTR [rsi],0x1
   30a94:	cmp    r10,rcx
   30a97:	jne    30a6c <StrDPShuffle+0x11c>
   30a99:	mov    rax,QWORD PTR [rsp+0x20]
   30a9e:	mov    rsi,QWORD PTR [rax]
   30aa1:	movsxd rax,DWORD PTR [rsp+0x8]
   30aa6:	mov    rdi,QWORD PTR [rsp+0x10]
   30aab:	lea    r12,[rsp+0x40]
   30ab0:	lea    rbx,[rsp+0x5a]
   30ab5:	movsx  rax,BYTE PTR [rdi+rax*1-0x1]
   30abb:	mov    eax,DWORD PTR [rsi+rax*4]
   30abe:	mov    DWORD PTR [rsp+0x3c],eax
   30ac2:	sub    eax,0x41
   30ac5:	mov    BYTE PTR [rsp+0x3b],al
   30ac9:	movsx  r15d,al
   30acd:	movsx  rax,al
   30ad1:	mov    QWORD PTR [rsp+0x18],rax
   30ad6:	xor    r13d,r13d
   30ad9:	nop    DWORD PTR [rax+0x0]
   30ae0:	mov    ecx,DWORD PTR [r14+r13*4]
   30ae4:	test   ecx,ecx
   30ae6:	je     30b2c <StrDPShuffle+0x1dc>
   30ae8:	cmp    r15d,r13d
   30aeb:	je     30b2c <StrDPShuffle+0x1dc>
   30aed:	call   36060 <sre_random>
   30af2:	movsxd rdx,DWORD PTR [r14+r13*4]
   30af6:	mov    rcx,QWORD PTR [rbp+r13*8+0x0]
   30afb:	movapd xmm1,xmm0
   30aff:	pxor   xmm0,xmm0
   30b03:	cvtsi2sd xmm0,edx
   30b07:	movzx  edx,BYTE PTR [rcx+rdx*1-0x1]
   30b0c:	mulsd  xmm0,xmm1
   30b10:	cvttsd2si eax,xmm0
   30b14:	cdqe   
   30b16:	add    rax,rcx
   30b19:	movzx  esi,BYTE PTR [rax]
   30b1c:	mov    BYTE PTR [rax],dl
   30b1e:	movsxd rax,DWORD PTR [r14+r13*4]
   30b22:	mov    rdx,QWORD PTR [rbp+r13*8+0x0]
   30b27:	mov    BYTE PTR [rdx+rax*1-0x1],sil
   30b2c:	add    r13,0x1
   30b30:	cmp    r13,0x1a
   30b34:	jne    30ae0 <StrDPShuffle+0x190>
   30b36:	mov    rax,r12
   30b39:	nop    DWORD PTR [rax+0x0]
   30b40:	mov    BYTE PTR [rax],0x0
   30b43:	add    rax,0x1
   30b47:	cmp    rbx,rax
   30b4a:	jne    30b40 <StrDPShuffle+0x1f0>
   30b4c:	mov    rax,QWORD PTR [rsp+0x18]
   30b51:	mov    BYTE PTR [rsp+rax*1+0x40],0x1
   30b56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30b60:	xor    eax,eax
   30b62:	xor    r13d,r13d
   30b65:	nop    DWORD PTR [rax]
   30b68:	cmp    BYTE PTR [r12+rax*1],0x0
   30b6d:	jne    30b90 <StrDPShuffle+0x240>
   30b6f:	movsxd rdx,DWORD PTR [r14+rax*4]
   30b73:	mov    rcx,QWORD PTR [rbp+rax*8+0x0]
   30b78:	movsx  rdx,BYTE PTR [rcx+rdx*1-0x1]
   30b7e:	cmp    BYTE PTR [rsp+rdx*1+0x40],0x1
   30b83:	jne    30b90 <StrDPShuffle+0x240>
   30b85:	mov    BYTE PTR [r12+rax*1],0x1
   30b8a:	mov    r13d,0x1
   30b90:	add    rax,0x1
   30b94:	cmp    rax,0x1a
   30b98:	jne    30b68 <StrDPShuffle+0x218>
   30b9a:	test   r13d,r13d
   30b9d:	jne    30b60 <StrDPShuffle+0x210>
   30b9f:	xor    eax,eax
   30ba1:	nop    DWORD PTR [rax+0x0]
   30ba8:	mov    edx,DWORD PTR [r14+rax*4]
   30bac:	test   edx,edx
   30bae:	je     30bc0 <StrDPShuffle+0x270>
   30bb0:	cmp    r15d,eax
   30bb3:	je     30bc0 <StrDPShuffle+0x270>
   30bb5:	cmp    BYTE PTR [r12+rax*1],0x0
   30bba:	je     30ad6 <StrDPShuffle+0x186>
   30bc0:	add    rax,0x1
   30bc4:	cmp    rax,0x1a
   30bc8:	jne    30ba8 <StrDPShuffle+0x258>
   30bca:	mov    DWORD PTR [rsp+0x18],r13d
   30bcf:	mov    rbx,r14
   30bd2:	lea    r15,[rbp+0xd0]
   30bd9:	mov    QWORD PTR [rsp+0x30],rbp
   30bde:	xchg   ax,ax
   30be0:	mov    eax,DWORD PTR [rbx]
   30be2:	lea    r12d,[rax-0x1]
   30be6:	movsxd rdx,r12d
   30be9:	lea    r13,[rdx-0x1]
   30bed:	cmp    r12d,0x1
   30bf1:	jle    30c3b <StrDPShuffle+0x2eb>
   30bf3:	nop    DWORD PTR [rax+rax*1+0x0]
   30bf8:	call   36060 <sre_random>
   30bfd:	mov    rdx,QWORD PTR [rbp+0x0]
   30c01:	movapd xmm1,xmm0
   30c05:	pxor   xmm0,xmm0
   30c09:	cvtsi2sd xmm0,r12d
   30c0e:	sub    r12d,0x1
   30c12:	mulsd  xmm0,xmm1
   30c16:	cvttsd2si eax,xmm0
   30c1a:	cdqe   
   30c1c:	add    rax,rdx
   30c1f:	movzx  edx,BYTE PTR [rdx+r13*1]
   30c24:	movzx  ecx,BYTE PTR [rax]
   30c27:	mov    BYTE PTR [rax],dl
   30c29:	mov    rax,QWORD PTR [rbp+0x0]
   30c2d:	mov    BYTE PTR [rax+r13*1],cl
   30c31:	sub    r13,0x1
   30c35:	cmp    r12d,0x1
   30c39:	jne    30bf8 <StrDPShuffle+0x2a8>
   30c3b:	add    rbp,0x8
   30c3f:	add    rbx,0x4
   30c43:	cmp    r15,rbp
   30c46:	jne    30be0 <StrDPShuffle+0x290>
   30c48:	mov    edx,0x68
   30c4d:	mov    esi,0xf0
   30c52:	mov    r13d,DWORD PTR [rsp+0x18]
   30c57:	lea    rdi,[rip+0x10f98]        # 41bf6 <CSWTCH.18+0x536>
   30c5e:	mov    rbp,QWORD PTR [rsp+0x30]
   30c63:	call   36810 <sre_malloc>
   30c68:	mov    r15,rax
   30c6b:	lea    rdx,[rax+0x68]
   30c6f:	nop
   30c70:	mov    DWORD PTR [rax],0x0
   30c76:	add    rax,0x4
   30c7a:	cmp    rdx,rax
   30c7d:	jne    30c70 <StrDPShuffle+0x320>
   30c7f:	mov    rax,QWORD PTR [rsp+0x10]
   30c84:	mov    rdi,QWORD PTR [rsp+0x28]
   30c89:	movsx  rdx,BYTE PTR [rax]
   30c8d:	mov    rax,QWORD PTR [rsp+0x20]
   30c92:	mov    rax,QWORD PTR [rax]
   30c95:	mov    eax,DWORD PTR [rax+rdx*4]
   30c98:	sub    eax,0x41
   30c9b:	lea    edx,[rax+0x41]
   30c9e:	cdqe   
   30ca0:	mov    r10d,r13d
   30ca3:	add    rdi,0x1
   30ca7:	lea    rcx,[r15+rax*4]
   30cab:	mov    BYTE PTR [rdi-0x1],dl
   30cae:	mov    rax,QWORD PTR [rbp+rax*8+0x0]
   30cb3:	add    r13d,0x1
   30cb7:	movsxd rsi,DWORD PTR [rcx]
   30cba:	movsx  eax,BYTE PTR [rax+rsi*1]
   30cbe:	mov    rdx,rsi
   30cc1:	add    edx,0x1
   30cc4:	mov    DWORD PTR [rcx],edx
   30cc6:	movsx  rdx,al
   30cca:	mov    esi,eax
   30ccc:	mov    ebx,DWORD PTR [r14+rdx*4]
   30cd0:	cmp    DWORD PTR [r15+rdx*4],ebx
   30cd4:	jne    30c9b <StrDPShuffle+0x34b>
   30cd6:	mov    rdi,QWORD PTR [rsp+0x28]
   30cdb:	movzx  eax,BYTE PTR [rsp+0x3c]
   30ce0:	lea    r12d,[r10+0x2]
   30ce4:	movsxd rcx,r13d
   30ce7:	mov    BYTE PTR [rdi+rcx*1],al
   30cea:	movsxd rax,r12d
   30ced:	mov    BYTE PTR [rdi+rax*1],0x0
   30cf1:	cmp    sil,BYTE PTR [rsp+0x3b]
   30cf6:	jne    30d58 <StrDPShuffle+0x408>
   30cf8:	mov    rax,QWORD PTR [rsp+0x8]
   30cfd:	cmp    eax,r12d
   30d00:	jne    30d43 <StrDPShuffle+0x3f3>
   30d02:	mov    esi,0x1a
   30d07:	mov    rdi,rbp
   30d0a:	call   368c0 <Free2DArray>
   30d0f:	mov    rdi,r14
   30d12:	call   3460 <free@plt>
   30d17:	mov    rdi,r15
   30d1a:	call   3460 <free@plt>
   30d1f:	mov    eax,0x1
   30d24:	mov    rdi,QWORD PTR [rsp+0x68]
   30d29:	xor    rdi,QWORD PTR fs:0x28
   30d32:	jne    30d72 <StrDPShuffle+0x422>
   30d34:	add    rsp,0x78
   30d38:	pop    rbx
   30d39:	pop    rbp
   30d3a:	pop    r12
   30d3c:	pop    r13
   30d3e:	pop    r14
   30d40:	pop    r15
   30d42:	ret    
   30d43:	mov    edx,eax
   30d45:	mov    esi,r12d
   30d48:	lea    rdi,[rip+0x10ecd]        # 41c1c <CSWTCH.18+0x55c>
   30d4f:	xor    eax,eax
   30d51:	call   317f0 <Die>
   30d56:	jmp    30d02 <StrDPShuffle+0x3b2>
   30d58:	xor    eax,eax
   30d5a:	lea    rdi,[rip+0x10e9f]        # 41c00 <CSWTCH.18+0x540>
   30d61:	call   317f0 <Die>
   30d66:	mov    rax,QWORD PTR [rsp+0x8]
   30d6b:	cmp    eax,r12d
   30d6e:	je     30d02 <StrDPShuffle+0x3b2>
   30d70:	jmp    30d43 <StrDPShuffle+0x3f3>
   30d72:	call   3570 <__stack_chk_fail@plt>
   30d77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000030d80 <StrMarkov0>:
   30d80:	endbr64 
   30d84:	push   r15
   30d86:	push   r14
   30d88:	push   r13
   30d8a:	mov    r13,rsi
   30d8d:	push   r12
   30d8f:	push   rbp
   30d90:	mov    rbp,rdi
   30d93:	mov    rdi,rsi
   30d96:	push   rbx
   30d97:	sub    rsp,0x78
   30d9b:	mov    rax,QWORD PTR fs:0x28
   30da4:	mov    QWORD PTR [rsp+0x68],rax
   30da9:	xor    eax,eax
   30dab:	call   3560 <strlen@plt>
   30db0:	test   eax,eax
   30db2:	jle    30eb1 <StrMarkov0+0x131>
   30db8:	mov    rbx,rax
   30dbb:	call   3820 <__ctype_b_loc@plt>
   30dc0:	lea    r15d,[rbx-0x1]
   30dc4:	mov    rcx,QWORD PTR [rax]
   30dc7:	lea    r14,[r15+r13*1+0x1]
   30dcc:	mov    rax,r13
   30dcf:	jmp    30de1 <StrMarkov0+0x61>
   30dd1:	nop    DWORD PTR [rax+0x0]
   30dd8:	add    rax,0x1
   30ddc:	cmp    r14,rax
   30ddf:	je     30e18 <StrMarkov0+0x98>
   30de1:	movsx  rdx,BYTE PTR [rax]
   30de5:	test   BYTE PTR [rcx+rdx*2+0x1],0x4
   30dea:	jne    30dd8 <StrMarkov0+0x58>
   30dec:	xor    eax,eax
   30dee:	mov    rbx,QWORD PTR [rsp+0x68]
   30df3:	xor    rbx,QWORD PTR fs:0x28
   30dfc:	jne    30ed4 <StrMarkov0+0x154>
   30e02:	add    rsp,0x78
   30e06:	pop    rbx
   30e07:	pop    rbp
   30e08:	pop    r12
   30e0a:	pop    r13
   30e0c:	pop    r14
   30e0e:	pop    r15
   30e10:	ret    
   30e11:	nop    DWORD PTR [rax+0x0]
   30e18:	mov    r12,rsp
   30e1b:	pxor   xmm0,xmm0
   30e1f:	mov    esi,0x1a
   30e24:	mov    rdi,r12
   30e27:	call   3ad60 <FSet>
   30e2c:	call   3440 <__ctype_toupper_loc@plt>
   30e31:	movss  xmm1,DWORD PTR [rip+0xc563]        # 3d39c <_IO_stdin_used+0x39c>
   30e39:	mov    rdx,QWORD PTR [rax]
   30e3c:	nop    DWORD PTR [rax+0x0]
   30e40:	movsx  rax,BYTE PTR [r13+0x0]
   30e45:	add    r13,0x1
   30e49:	mov    eax,DWORD PTR [rdx+rax*4]
   30e4c:	sub    eax,0x41
   30e4f:	cdqe   
   30e51:	movss  xmm0,DWORD PTR [rsp+rax*4]
   30e56:	addss  xmm0,xmm1
   30e5a:	movss  DWORD PTR [rsp+rax*4],xmm0
   30e5f:	cmp    r14,r13
   30e62:	jne    30e40 <StrMarkov0+0xc0>
   30e64:	mov    esi,0x1a
   30e69:	mov    rdi,r12
   30e6c:	lea    r14,[rbp+r15*1+0x1]
   30e71:	mov    r13,rbp
   30e74:	call   3b290 <FNorm>
   30e79:	nop    DWORD PTR [rax+0x0]
   30e80:	mov    esi,0x1a
   30e85:	mov    rdi,r12
   30e88:	add    r13,0x1
   30e8c:	call   36600 <FChoose>
   30e91:	add    eax,0x41
   30e94:	mov    BYTE PTR [r13-0x1],al
   30e98:	cmp    r14,r13
   30e9b:	jne    30e80 <StrMarkov0+0x100>
   30e9d:	movsxd rbx,ebx
   30ea0:	add    rbp,rbx
   30ea3:	mov    BYTE PTR [rbp+0x0],0x0
   30ea7:	mov    eax,0x1
   30eac:	jmp    30dee <StrMarkov0+0x6e>
   30eb1:	mov    r12,rsp
   30eb4:	pxor   xmm0,xmm0
   30eb8:	mov    esi,0x1a
   30ebd:	mov    rdi,r12
   30ec0:	call   3ad60 <FSet>
   30ec5:	mov    esi,0x1a
   30eca:	mov    rdi,r12
   30ecd:	call   3b290 <FNorm>
   30ed2:	jmp    30ea3 <StrMarkov0+0x123>
   30ed4:	call   3570 <__stack_chk_fail@plt>
   30ed9:	nop    DWORD PTR [rax+0x0]

0000000000030ee0 <StrMarkov1>:
   30ee0:	endbr64 
   30ee4:	push   r15
   30ee6:	push   r14
   30ee8:	push   r13
   30eea:	mov    r13,rsi
   30eed:	push   r12
   30eef:	push   rbp
   30ef0:	push   rbx
   30ef1:	sub    rsp,0xab8
   30ef8:	mov    QWORD PTR [rsp+0x8],rdi
   30efd:	mov    rdi,rsi
   30f00:	mov    rax,QWORD PTR fs:0x28
   30f09:	mov    QWORD PTR [rsp+0xaa8],rax
   30f11:	xor    eax,eax
   30f13:	call   3560 <strlen@plt>
   30f18:	mov    r12,rax
   30f1b:	test   eax,eax
   30f1d:	jle    30f80 <StrMarkov1+0xa0>
   30f1f:	call   3820 <__ctype_b_loc@plt>
   30f24:	lea    edx,[r12-0x1]
   30f29:	mov    rcx,QWORD PTR [rax]
   30f2c:	lea    rsi,[r13+rdx*1+0x1]
   30f31:	mov    rax,r13
   30f34:	jmp    30f49 <StrMarkov1+0x69>
   30f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30f40:	add    rax,0x1
   30f44:	cmp    rax,rsi
   30f47:	je     30f80 <StrMarkov1+0xa0>
   30f49:	movsx  rdx,BYTE PTR [rax]
   30f4d:	test   BYTE PTR [rcx+rdx*2+0x1],0x4
   30f52:	jne    30f40 <StrMarkov1+0x60>
   30f54:	xor    eax,eax
   30f56:	mov    rdx,QWORD PTR [rsp+0xaa8]
   30f5e:	xor    rdx,QWORD PTR fs:0x28
   30f67:	jne    310a1 <StrMarkov1+0x1c1>
   30f6d:	add    rsp,0xab8
   30f74:	pop    rbx
   30f75:	pop    rbp
   30f76:	pop    r12
   30f78:	pop    r13
   30f7a:	pop    r14
   30f7c:	pop    r15
   30f7e:	ret    
   30f7f:	nop
   30f80:	lea    r14,[rsp+0x10]
   30f85:	lea    rbp,[rsp+0xaa0]
   30f8d:	mov    r15,r14
   30f90:	mov    rbx,r14
   30f93:	nop    DWORD PTR [rax+rax*1+0x0]
   30f98:	mov    rdi,rbx
   30f9b:	pxor   xmm0,xmm0
   30f9f:	mov    esi,0x1a
   30fa4:	add    rbx,0x68
   30fa8:	call   3ad60 <FSet>
   30fad:	cmp    rbp,rbx
   30fb0:	jne    30f98 <StrMarkov1+0xb8>
   30fb2:	call   3440 <__ctype_toupper_loc@plt>
   30fb7:	mov    r8,QWORD PTR [rax]
   30fba:	movsx  rax,BYTE PTR [r13+0x0]
   30fbf:	mov    ebx,DWORD PTR [r8+rax*4]
   30fc3:	sub    ebx,0x41
   30fc6:	cmp    r12d,0x1
   30fca:	jle    31020 <StrMarkov1+0x140>
   30fcc:	lea    eax,[r12-0x2]
   30fd1:	movss  xmm1,DWORD PTR [rip+0xc3c3]        # 3d39c <_IO_stdin_used+0x39c>
   30fd9:	lea    rsi,[r13+0x1]
   30fdd:	mov    ecx,ebx
   30fdf:	lea    r9,[r13+rax*1+0x2]
   30fe4:	nop    DWORD PTR [rax+0x0]
   30fe8:	movsxd rax,ecx
   30feb:	movsx  rcx,BYTE PTR [rsi]
   30fef:	add    rsi,0x1
   30ff3:	lea    r10,[rax+rax*2]
   30ff7:	mov    ecx,DWORD PTR [r8+rcx*4]
   30ffb:	lea    rax,[rax+r10*4]
   30fff:	sub    ecx,0x41
   31002:	movsxd rdi,ecx
   31005:	lea    rax,[rdi+rax*2]
   31009:	movss  xmm0,DWORD PTR [rsp+rax*4+0x10]
   3100f:	addss  xmm0,xmm1
   31013:	movss  DWORD PTR [rsp+rax*4+0x10],xmm0
   31019:	cmp    r9,rsi
   3101c:	jne    30fe8 <StrMarkov1+0x108>
   3101e:	xchg   ax,ax
   31020:	mov    rdi,r15
   31023:	mov    esi,0x1a
   31028:	add    r15,0x68
   3102c:	call   3b290 <FNorm>
   31031:	cmp    rbp,r15
   31034:	jne    31020 <StrMarkov1+0x140>
   31036:	mov    rdx,QWORD PTR [rsp+0x8]
   3103b:	lea    eax,[rbx+0x41]
   3103e:	mov    BYTE PTR [rdx],al
   31040:	cmp    r12d,0x1
   31044:	jle    31099 <StrMarkov1+0x1b9>
   31046:	lea    eax,[r12-0x2]
   3104b:	lea    rbp,[rdx+0x1]
   3104f:	lea    r13,[rdx+rax*1+0x2]
   31054:	nop    DWORD PTR [rax+0x0]
   31058:	movsxd rbx,ebx
   3105b:	mov    esi,0x1a
   31060:	add    rbp,0x1
   31064:	lea    rax,[rbx+rbx*2]
   31068:	lea    rax,[rbx+rax*4]
   3106c:	lea    rdi,[r14+rax*8]
   31070:	call   36600 <FChoose>
   31075:	mov    ebx,eax
   31077:	lea    eax,[rax+0x41]
   3107a:	mov    BYTE PTR [rbp-0x1],al
   3107d:	cmp    r13,rbp
   31080:	jne    31058 <StrMarkov1+0x178>
   31082:	movsxd r12,r12d
   31085:	mov    rax,QWORD PTR [rsp+0x8]
   3108a:	mov    BYTE PTR [rax+r12*1],0x0
   3108f:	mov    eax,0x1
   31094:	jmp    30f56 <StrMarkov1+0x76>
   31099:	mov    r12d,0x1
   3109f:	jmp    31085 <StrMarkov1+0x1a5>
   310a1:	call   3570 <__stack_chk_fail@plt>
   310a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000310b0 <StrReverse>:
   310b0:	endbr64 
   310b4:	push   rbp
   310b5:	mov    rbp,rsi
   310b8:	push   rbx
   310b9:	mov    rbx,rdi
   310bc:	mov    rdi,rsi
   310bf:	sub    rsp,0x8
   310c3:	call   3560 <strlen@plt>
   310c8:	mov    esi,eax
   310ca:	shr    esi,0x1f
   310cd:	add    esi,eax
   310cf:	sar    esi,1
   310d1:	cmp    eax,0x1
   310d4:	jle    31130 <StrReverse+0x80>
   310d6:	movsxd r9,eax
   310d9:	xor    edx,edx
   310db:	lea    rcx,[r9-0x1]
   310df:	nop
   310e0:	movzx  edi,BYTE PTR [rbp+rcx*1+0x0]
   310e5:	movzx  r8d,BYTE PTR [rbp+rdx*1+0x0]
   310eb:	mov    BYTE PTR [rbx+rcx*1],r8b
   310ef:	sub    rcx,0x1
   310f3:	mov    BYTE PTR [rbx+rdx*1],dil
   310f7:	add    rdx,0x1
   310fb:	cmp    esi,edx
   310fd:	jg     310e0 <StrReverse+0x30>
   310ff:	test   esi,esi
   31101:	mov    edx,0x1
   31106:	cmovle esi,edx
   31109:	test   al,0x1
   3110b:	je     31118 <StrReverse+0x68>
   3110d:	movsxd rsi,esi
   31110:	movzx  eax,BYTE PTR [rbp+rsi*1+0x0]
   31115:	mov    BYTE PTR [rbx+rsi*1],al
   31118:	mov    BYTE PTR [rbx+r9*1],0x0
   3111d:	add    rsp,0x8
   31121:	mov    eax,0x1
   31126:	pop    rbx
   31127:	pop    rbp
   31128:	ret    
   31129:	nop    DWORD PTR [rax+0x0]
   31130:	xor    esi,esi
   31132:	movsxd r9,eax
   31135:	jmp    31109 <StrReverse+0x59>
   31137:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031140 <StrRegionalShuffle>:
   31140:	endbr64 
   31144:	push   r15
   31146:	push   r14
   31148:	push   r13
   3114a:	push   r12
   3114c:	push   rbp
   3114d:	mov    rbp,rdi
   31150:	push   rbx
   31151:	sub    rsp,0x18
   31155:	mov    DWORD PTR [rsp+0x8],edx
   31159:	cmp    rdi,rsi
   3115c:	je     31163 <StrRegionalShuffle+0x23>
   3115e:	call   34e0 <strcpy@plt>
   31163:	mov    rdi,rbp
   31166:	call   3560 <strlen@plt>
   3116b:	mov    r13d,eax
   3116e:	test   eax,eax
   31170:	jle    311ee <StrRegionalShuffle+0xae>
   31172:	lea    eax,[rax-0x1]
   31175:	xor    r12d,r12d
   31178:	mov    DWORD PTR [rsp+0xc],eax
   3117c:	nop    DWORD PTR [rax+0x0]
   31180:	mov    ebx,r12d
   31183:	add    r12d,DWORD PTR [rsp+0x8]
   31188:	cmp    r12d,r13d
   3118b:	lea    eax,[r12-0x1]
   31190:	cmovg  eax,DWORD PTR [rsp+0xc]
   31195:	mov    r14d,eax
   31198:	movsxd rdx,eax
   3119b:	sub    r14d,ebx
   3119e:	lea    r15,[rbp+rdx*1+0x0]
   311a3:	cmp    eax,ebx
   311a5:	jle    311e9 <StrRegionalShuffle+0xa9>
   311a7:	nop    WORD PTR [rax+rax*1+0x0]
   311b0:	call   36060 <sre_random>
   311b5:	movzx  edi,BYTE PTR [r15]
   311b9:	sub    r15,0x1
   311bd:	movapd xmm1,xmm0
   311c1:	pxor   xmm0,xmm0
   311c5:	cvtsi2sd xmm0,r14d
   311ca:	mulsd  xmm0,xmm1
   311ce:	cvttsd2si eax,xmm0
   311d2:	add    eax,ebx
   311d4:	cdqe   
   311d6:	add    rax,rbp
   311d9:	movzx  esi,BYTE PTR [rax]
   311dc:	mov    BYTE PTR [rax],dil
   311df:	mov    BYTE PTR [r15+0x1],sil
   311e3:	sub    r14d,0x1
   311e7:	jne    311b0 <StrRegionalShuffle+0x70>
   311e9:	cmp    r12d,r13d
   311ec:	jl     31180 <StrRegionalShuffle+0x40>
   311ee:	add    rsp,0x18
   311f2:	mov    eax,0x1
   311f7:	pop    rbx
   311f8:	pop    rbp
   311f9:	pop    r12
   311fb:	pop    r13
   311fd:	pop    r14
   311ff:	pop    r15
   31201:	ret    
   31202:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3120d:	nop    DWORD PTR [rax]

0000000000031210 <AlignmentShuffle>:
   31210:	endbr64 
   31214:	push   r15
   31216:	push   r14
   31218:	push   r13
   3121a:	mov    r13d,ecx
   3121d:	push   r12
   3121f:	mov    r12,rdi
   31222:	push   rbp
   31223:	mov    ebp,edx
   31225:	push   rbx
   31226:	sub    rsp,0x8
   3122a:	cmp    rdi,rsi
   3122d:	je     312f8 <AlignmentShuffle+0xe8>
   31233:	mov    r15,rsi
   31236:	lea    r14d,[rdx-0x1]
   3123a:	xor    ebx,ebx
   3123c:	test   edx,edx
   3123e:	jle    31270 <AlignmentShuffle+0x60>
   31240:	mov    rsi,QWORD PTR [r15+rbx*8]
   31244:	mov    rdi,QWORD PTR [r12+rbx*8]
   31248:	call   34e0 <strcpy@plt>
   3124d:	mov    rax,rbx
   31250:	add    rbx,0x1
   31254:	cmp    r14,rax
   31257:	jne    31240 <AlignmentShuffle+0x30>
   31259:	movsxd rcx,r13d
   3125c:	xor    eax,eax
   3125e:	xchg   ax,ax
   31260:	mov    rdx,QWORD PTR [r12+rax*8]
   31264:	add    rax,0x1
   31268:	mov    BYTE PTR [rdx+rcx*1],0x0
   3126c:	cmp    ebp,eax
   3126e:	jg     31260 <AlignmentShuffle+0x50>
   31270:	cmp    r13d,0x1
   31274:	jle    312e4 <AlignmentShuffle+0xd4>
   31276:	movsxd rbx,r13d
   31279:	lea    eax,[rbp-0x1]
   3127c:	sub    rbx,0x1
   31280:	lea    r14,[r12+rax*8]
   31284:	nop    DWORD PTR [rax+0x0]
   31288:	call   36060 <sre_random>
   3128d:	mov    rax,r12
   31290:	movapd xmm1,xmm0
   31294:	pxor   xmm0,xmm0
   31298:	cvtsi2sd xmm0,r13d
   3129d:	mulsd  xmm0,xmm1
   312a1:	cvttsd2si ecx,xmm0
   312a5:	movsxd rcx,ecx
   312a8:	test   ebp,ebp
   312aa:	jle    312d6 <AlignmentShuffle+0xc6>
   312ac:	nop    DWORD PTR [rax+0x0]
   312b0:	mov    rsi,QWORD PTR [rax]
   312b3:	mov    rdi,rax
   312b6:	add    rax,0x8
   312ba:	lea    rdx,[rsi+rcx*1]
   312be:	movzx  esi,BYTE PTR [rsi+rbx*1]
   312c2:	movzx  r8d,BYTE PTR [rdx]
   312c6:	mov    BYTE PTR [rdx],sil
   312c9:	mov    rdx,QWORD PTR [rax-0x8]
   312cd:	mov    BYTE PTR [rdx+rbx*1],r8b
   312d1:	cmp    r14,rdi
   312d4:	jne    312b0 <AlignmentShuffle+0xa0>
   312d6:	sub    r13d,0x1
   312da:	sub    rbx,0x1
   312de:	cmp    r13d,0x1
   312e2:	jne    31288 <AlignmentShuffle+0x78>
   312e4:	add    rsp,0x8
   312e8:	mov    eax,0x1
   312ed:	pop    rbx
   312ee:	pop    rbp
   312ef:	pop    r12
   312f1:	pop    r13
   312f3:	pop    r14
   312f5:	pop    r15
   312f7:	ret    
   312f8:	test   edx,edx
   312fa:	jg     31259 <AlignmentShuffle+0x49>
   31300:	jmp    31270 <AlignmentShuffle+0x60>
   31305:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000031310 <AlignmentBootstrap>:
   31310:	endbr64 
   31314:	push   r15
   31316:	push   r14
   31318:	mov    r14,rdi
   3131b:	push   r13
   3131d:	push   r12
   3131f:	push   rbp
   31320:	mov    ebp,edx
   31322:	push   rbx
   31323:	sub    rsp,0x18
   31327:	mov    DWORD PTR [rsp+0xc],ecx
   3132b:	test   ecx,ecx
   3132d:	jle    313a0 <AlignmentBootstrap+0x90>
   3132f:	mov    eax,DWORD PTR [rsp+0xc]
   31333:	pxor   xmm2,xmm2
   31337:	mov    r15,rsi
   3133a:	xor    ebx,ebx
   3133c:	lea    r12d,[rdx-0x1]
   31340:	cvtsi2sd xmm2,eax
   31344:	lea    r13d,[rax-0x1]
   31348:	movsd  QWORD PTR [rsp],xmm2
   3134d:	nop    DWORD PTR [rax]
   31350:	call   36060 <sre_random>
   31355:	mulsd  xmm0,QWORD PTR [rsp]
   3135a:	mov    edi,r12d
   3135d:	xor    eax,eax
   3135f:	cvttsd2si r8d,xmm0
   31364:	movsxd r8,r8d
   31367:	test   ebp,ebp
   31369:	jle    3138c <AlignmentBootstrap+0x7c>
   3136b:	nop    DWORD PTR [rax+rax*1+0x0]
   31370:	mov    rdx,QWORD PTR [r15+rax*8]
   31374:	movzx  ecx,BYTE PTR [rdx+r8*1]
   31379:	mov    rdx,QWORD PTR [r14+rax*8]
   3137d:	mov    BYTE PTR [rdx+rbx*1],cl
   31380:	mov    rdx,rax
   31383:	add    rax,0x1
   31387:	cmp    rdi,rdx
   3138a:	jne    31370 <AlignmentBootstrap+0x60>
   3138c:	lea    rax,[rbx+0x1]
   31390:	cmp    rbx,r13
   31393:	je     313a0 <AlignmentBootstrap+0x90>
   31395:	mov    rbx,rax
   31398:	jmp    31350 <AlignmentBootstrap+0x40>
   3139a:	nop    WORD PTR [rax+rax*1+0x0]
   313a0:	test   ebp,ebp
   313a2:	jle    313c8 <AlignmentBootstrap+0xb8>
   313a4:	lea    eax,[rbp-0x1]
   313a7:	movsxd rbx,DWORD PTR [rsp+0xc]
   313ac:	lea    rdx,[r14+rax*8+0x8]
   313b1:	nop    DWORD PTR [rax+0x0]
   313b8:	mov    rax,QWORD PTR [r14]
   313bb:	add    r14,0x8
   313bf:	mov    BYTE PTR [rax+rbx*1],0x0
   313c3:	cmp    rdx,r14
   313c6:	jne    313b8 <AlignmentBootstrap+0xa8>
   313c8:	add    rsp,0x18
   313cc:	mov    eax,0x1
   313d1:	pop    rbx
   313d2:	pop    rbp
   313d3:	pop    r12
   313d5:	pop    r13
   313d7:	pop    r14
   313d9:	pop    r15
   313db:	ret    
   313dc:	nop    DWORD PTR [rax+0x0]

00000000000313e0 <QRNAShuffle>:
   313e0:	endbr64 
   313e4:	push   r15
   313e6:	mov    r15,rdx
   313e9:	push   r14
   313eb:	push   r13
   313ed:	push   r12
   313ef:	push   rbp
   313f0:	mov    rbp,rdi
   313f3:	push   rbx
   313f4:	mov    rbx,rsi
   313f7:	sub    rsp,0x38
   313fb:	mov    QWORD PTR [rsp+0x8],rcx
   31400:	cmp    rdi,rdx
   31403:	je     3140d <QRNAShuffle+0x2d>
   31405:	mov    rsi,rdx
   31408:	call   34e0 <strcpy@plt>
   3140d:	mov    rax,QWORD PTR [rsp+0x8]
   31412:	cmp    rbx,rax
   31415:	je     31422 <QRNAShuffle+0x42>
   31417:	mov    rsi,rax
   3141a:	mov    rdi,rbx
   3141d:	call   34e0 <strcpy@plt>
   31422:	mov    rdi,r15
   31425:	call   3560 <strlen@plt>
   3142a:	mov    esi,0x23c
   3142f:	lea    rdi,[rip+0x107c0]        # 41bf6 <CSWTCH.18+0x536>
   31436:	movsxd r12,eax
   31439:	mov    QWORD PTR [rsp],rax
   3143d:	shl    r12,0x2
   31441:	mov    rdx,r12
   31444:	call   36810 <sre_malloc>
   31449:	mov    rdx,r12
   3144c:	mov    esi,0x23d
   31451:	lea    rdi,[rip+0x1079e]        # 41bf6 <CSWTCH.18+0x536>
   31458:	mov    r14,rax
   3145b:	call   36810 <sre_malloc>
   31460:	mov    rdx,r12
   31463:	mov    esi,0x23e
   31468:	lea    rdi,[rip+0x10787]        # 41bf6 <CSWTCH.18+0x536>
   3146f:	mov    r13,rax
   31472:	call   36810 <sre_malloc>
   31477:	mov    rcx,QWORD PTR [rsp]
   3147b:	mov    r12,rax
   3147e:	test   ecx,ecx
   31480:	jle    3177d <QRNAShuffle+0x39d>
   31486:	lea    eax,[rcx-0x1]
   31489:	mov    QWORD PTR [rsp+0x20],rbp
   3148e:	xor    esi,esi
   31490:	mov    rbp,QWORD PTR [rsp+0x8]
   31495:	mov    QWORD PTR [rsp+0x28],rbx
   3149a:	xor    r11d,r11d
   3149d:	mov    rbx,rax
   314a0:	mov    DWORD PTR [rsp],0x0
   314a7:	mov    DWORD PTR [rsp+0x14],0x0
   314af:	mov    QWORD PTR [rsp+0x18],r14
   314b4:	jmp    31524 <QRNAShuffle+0x144>
   314b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   314c0:	movabs rdi,0x8000000000006001
   314ca:	mov    r14d,0x0
   314d0:	shr    rdi,cl
   314d3:	and    edi,0x1
   314d6:	cmp    cl,0x40
   314d9:	cmovae edi,r14d
   314dd:	cmp    r9b,0x7e
   314e1:	je     31514 <QRNAShuffle+0x134>
   314e3:	test   dil,dil
   314e6:	jne    31514 <QRNAShuffle+0x134>
   314e8:	cmp    al,0x20
   314ea:	je     31509 <QRNAShuffle+0x129>
   314ec:	cmp    al,0x2e
   314ee:	je     31509 <QRNAShuffle+0x129>
   314f0:	cmp    al,0x5f
   314f2:	setne  r14b
   314f6:	cmp    al,0x2d
   314f8:	setne  dil
   314fc:	test   r14b,dil
   314ff:	je     31509 <QRNAShuffle+0x129>
   31501:	cmp    al,0x7e
   31503:	jne    317da <QRNAShuffle+0x3fa>
   31509:	movsxd rax,r11d
   3150c:	add    r11d,0x1
   31510:	mov    DWORD PTR [r12+rax*4],r10d
   31514:	lea    rax,[rsi+0x1]
   31518:	cmp    rbx,rsi
   3151b:	je     315e0 <QRNAShuffle+0x200>
   31521:	mov    rsi,rax
   31524:	movzx  eax,BYTE PTR [r15+rsi*1]
   31529:	movzx  r9d,BYTE PTR [rbp+rsi*1+0x0]
   3152f:	mov    r10d,esi
   31532:	cmp    al,0x20
   31534:	sete   r8b
   31538:	cmp    al,0x2e
   3153a:	sete   dl
   3153d:	or     r8d,edx
   31540:	cmp    al,0x5f
   31542:	sete   dl
   31545:	cmp    al,0x2d
   31547:	mov    edi,r8d
   3154a:	sete   cl
   3154d:	or     edx,ecx
   3154f:	cmp    al,0x7e
   31551:	sete   cl
   31554:	or     edx,ecx
   31556:	lea    ecx,[r9-0x20]
   3155a:	or     dil,dl
   3155d:	jne    314c0 <QRNAShuffle+0xe0>
   31563:	cmp    cl,0x3f
   31566:	ja     317b0 <QRNAShuffle+0x3d0>
   3156c:	movabs rax,0x8000000000006001
   31576:	bt     rax,rcx
   3157a:	jb     31586 <QRNAShuffle+0x1a6>
   3157c:	cmp    r9b,0x7e
   31580:	jne    317b6 <QRNAShuffle+0x3d6>
   31586:	test   r8b,r8b
   31589:	jne    31509 <QRNAShuffle+0x129>
   3158f:	test   dl,dl
   31591:	jne    31509 <QRNAShuffle+0x129>
   31597:	movabs rax,0x8000000000006001
   315a1:	shr    rax,cl
   315a4:	and    eax,0x1
   315a7:	cmp    cl,0x40
   315aa:	cmovb  edx,eax
   315ad:	cmp    r9b,0x7e
   315b1:	je     315bb <QRNAShuffle+0x1db>
   315b3:	test   dl,dl
   315b5:	je     31514 <QRNAShuffle+0x134>
   315bb:	movsxd rax,DWORD PTR [rsp]
   315bf:	mov    rcx,rax
   315c2:	mov    DWORD PTR [r13+rax*4+0x0],r10d
   315c7:	lea    rax,[rsi+0x1]
   315cb:	add    ecx,0x1
   315ce:	mov    DWORD PTR [rsp],ecx
   315d1:	cmp    rbx,rsi
   315d4:	jne    31521 <QRNAShuffle+0x141>
   315da:	nop    WORD PTR [rax+rax*1+0x0]
   315e0:	movsxd r15,DWORD PTR [rsp+0x14]
   315e5:	mov    r14,QWORD PTR [rsp+0x18]
   315ea:	mov    DWORD PTR [rsp+0x8],r11d
   315ef:	mov    rbp,QWORD PTR [rsp+0x20]
   315f4:	mov    rbx,QWORD PTR [rsp+0x28]
   315f9:	cmp    r15d,0x1
   315fd:	jle    31671 <QRNAShuffle+0x291>
   315ff:	nop
   31600:	call   36060 <sre_random>
   31605:	movsxd rdi,DWORD PTR [r14+r15*4-0x4]
   3160a:	movapd xmm1,xmm0
   3160e:	pxor   xmm0,xmm0
   31612:	cvtsi2sd xmm0,r15d
   31617:	movzx  edi,BYTE PTR [rbp+rdi*1+0x0]
   3161c:	mulsd  xmm0,xmm1
   31620:	cvttsd2si eax,xmm0
   31624:	cdqe   
   31626:	lea    rax,[r14+rax*4]
   3162a:	movsxd rcx,DWORD PTR [rax]
   3162d:	lea    rdx,[rbp+rcx*1+0x0]
   31632:	movzx  ecx,BYTE PTR [rbx+rcx*1]
   31636:	movzx  esi,BYTE PTR [rdx]
   31639:	mov    BYTE PTR [rdx],dil
   3163c:	movsxd rdx,DWORD PTR [r14+r15*4-0x4]
   31641:	movzx  edi,BYTE PTR [rbx+rdx*1]
   31645:	movsxd rdx,DWORD PTR [rax]
   31648:	mov    BYTE PTR [rbx+rdx*1],dil
   3164c:	movsxd rdx,DWORD PTR [r14+r15*4-0x4]
   31651:	mov    DWORD PTR [rax],edx
   31653:	mov    BYTE PTR [rbp+rdx*1+0x0],sil
   31658:	movsxd rdx,DWORD PTR [r14+r15*4-0x4]
   3165d:	mov    BYTE PTR [rbx+rdx*1],cl
   31660:	mov    edx,DWORD PTR [r14+r15*4-0x4]
   31665:	sub    r15,0x1
   31669:	mov    DWORD PTR [rax],edx
   3166b:	cmp    r15d,0x1
   3166f:	jg     31600 <QRNAShuffle+0x220>
   31671:	cmp    DWORD PTR [rsp],0x1
   31675:	jle    316f6 <QRNAShuffle+0x316>
   31677:	movsxd r15,DWORD PTR [rsp]
   3167b:	nop    DWORD PTR [rax+rax*1+0x0]
   31680:	call   36060 <sre_random>
   31685:	movsxd r8,DWORD PTR [r13+r15*4-0x4]
   3168a:	movapd xmm1,xmm0
   3168e:	pxor   xmm0,xmm0
   31692:	cvtsi2sd xmm0,r15d
   31697:	movzx  r8d,BYTE PTR [rbp+r8*1+0x0]
   3169d:	mulsd  xmm0,xmm1
   316a1:	cvttsd2si eax,xmm0
   316a5:	cdqe   
   316a7:	lea    rdx,[r13+rax*4+0x0]
   316ac:	movsxd rsi,DWORD PTR [rdx]
   316af:	lea    rax,[rbp+rsi*1+0x0]
   316b4:	mov    rcx,rsi
   316b7:	movzx  esi,BYTE PTR [rbx+rsi*1]
   316bb:	movzx  edi,BYTE PTR [rax]
   316be:	mov    BYTE PTR [rax],r8b
   316c1:	movsxd rax,DWORD PTR [r13+r15*4-0x4]
   316c6:	movzx  r8d,BYTE PTR [rbx+rax*1]
   316cb:	movsxd rax,DWORD PTR [rdx]
   316ce:	mov    BYTE PTR [rbx+rax*1],r8b
   316d2:	movsxd rax,DWORD PTR [r13+r15*4-0x4]
   316d7:	mov    DWORD PTR [rdx],eax
   316d9:	mov    BYTE PTR [rbp+rax*1+0x0],dil
   316de:	movsxd rax,DWORD PTR [r13+r15*4-0x4]
   316e3:	mov    BYTE PTR [rbx+rax*1],sil
   316e7:	mov    DWORD PTR [r13+r15*4-0x4],ecx
   316ec:	sub    r15,0x1
   316f0:	cmp    r15d,0x1
   316f4:	jg     31680 <QRNAShuffle+0x2a0>
   316f6:	movsxd r15,DWORD PTR [rsp+0x8]
   316fb:	cmp    r15d,0x1
   316ff:	jle    3177d <QRNAShuffle+0x39d>
   31701:	nop    DWORD PTR [rax+0x0]
   31708:	call   36060 <sre_random>
   3170d:	movsxd r8,DWORD PTR [r12+r15*4-0x4]
   31712:	movapd xmm1,xmm0
   31716:	pxor   xmm0,xmm0
   3171a:	cvtsi2sd xmm0,r15d
   3171f:	movzx  r8d,BYTE PTR [rbp+r8*1+0x0]
   31725:	mulsd  xmm0,xmm1
   31729:	cvttsd2si eax,xmm0
   3172d:	cdqe   
   3172f:	lea    rdx,[r12+rax*4]
   31733:	movsxd rsi,DWORD PTR [rdx]
   31736:	lea    rax,[rbp+rsi*1+0x0]
   3173b:	mov    rcx,rsi
   3173e:	movzx  esi,BYTE PTR [rbx+rsi*1]
   31742:	movzx  edi,BYTE PTR [rax]
   31745:	mov    BYTE PTR [rax],r8b
   31748:	movsxd rax,DWORD PTR [r12+r15*4-0x4]
   3174d:	movzx  r8d,BYTE PTR [rbx+rax*1]
   31752:	movsxd rax,DWORD PTR [rdx]
   31755:	mov    BYTE PTR [rbx+rax*1],r8b
   31759:	movsxd rax,DWORD PTR [r12+r15*4-0x4]
   3175e:	mov    DWORD PTR [rdx],eax
   31760:	mov    BYTE PTR [rbp+rax*1+0x0],dil
   31765:	movsxd rax,DWORD PTR [r12+r15*4-0x4]
   3176a:	mov    BYTE PTR [rbx+rax*1],sil
   3176e:	mov    DWORD PTR [r12+r15*4-0x4],ecx
   31773:	sub    r15,0x1
   31777:	cmp    r15d,0x1
   3177b:	jg     31708 <QRNAShuffle+0x328>
   3177d:	mov    rdi,r14
   31780:	call   3460 <free@plt>
   31785:	mov    rdi,r13
   31788:	call   3460 <free@plt>
   3178d:	mov    rdi,r12
   31790:	call   3460 <free@plt>
   31795:	add    rsp,0x38
   31799:	mov    eax,0x1
   3179e:	pop    rbx
   3179f:	pop    rbp
   317a0:	pop    r12
   317a2:	pop    r13
   317a4:	pop    r14
   317a6:	pop    r15
   317a8:	ret    
   317a9:	nop    DWORD PTR [rax+0x0]
   317b0:	cmp    r9b,0x7e
   317b4:	je     317d3 <QRNAShuffle+0x3f3>
   317b6:	movsxd rax,DWORD PTR [rsp+0x14]
   317bb:	mov    rdi,QWORD PTR [rsp+0x18]
   317c0:	mov    rcx,rax
   317c3:	mov    DWORD PTR [rdi+rax*4],r10d
   317c7:	add    ecx,0x1
   317ca:	mov    DWORD PTR [rsp+0x14],ecx
   317ce:	jmp    31514 <QRNAShuffle+0x134>
   317d3:	xor    edx,edx
   317d5:	jmp    315ad <QRNAShuffle+0x1cd>
   317da:	cmp    cl,0x3f
   317dd:	ja     317b6 <QRNAShuffle+0x3d6>
   317df:	jmp    3156c <QRNAShuffle+0x18c>
   317e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   317ee:	xchg   ax,ax

00000000000317f0 <Die>:
   317f0:	endbr64 
   317f4:	push   r12
   317f6:	mov    r12,rdi
   317f9:	sub    rsp,0xd0
   31800:	mov    QWORD PTR [rsp+0x28],rsi
   31805:	mov    QWORD PTR [rsp+0x30],rdx
   3180a:	mov    QWORD PTR [rsp+0x38],rcx
   3180f:	mov    QWORD PTR [rsp+0x40],r8
   31814:	mov    QWORD PTR [rsp+0x48],r9
   31819:	test   al,al
   3181b:	je     31854 <Die+0x64>
   3181d:	movaps XMMWORD PTR [rsp+0x50],xmm0
   31822:	movaps XMMWORD PTR [rsp+0x60],xmm1
   31827:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3182c:	movaps XMMWORD PTR [rsp+0x80],xmm3
   31834:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3183c:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   31844:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3184c:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   31854:	mov    rcx,QWORD PTR [rip+0x1cac5]        # 4e320 <stderr@@GLIBC_2.2.5>
   3185b:	mov    edx,0x8
   31860:	mov    esi,0x1
   31865:	lea    rdi,[rip+0x103cb]        # 41c37 <CSWTCH.18+0x577>
   3186c:	mov    rax,QWORD PTR fs:0x28
   31875:	mov    QWORD PTR [rsp+0x18],rax
   3187a:	xor    eax,eax
   3187c:	call   37b0 <fwrite@plt>
   31881:	mov    rcx,rsp
   31884:	mov    rdx,r12
   31887:	mov    esi,0x1
   3188c:	mov    rdi,QWORD PTR [rip+0x1ca8d]        # 4e320 <stderr@@GLIBC_2.2.5>
   31893:	lea    rax,[rsp+0xe0]
   3189b:	mov    DWORD PTR [rsp],0x8
   318a2:	mov    QWORD PTR [rsp+0x8],rax
   318a7:	lea    rax,[rsp+0x20]
   318ac:	mov    DWORD PTR [rsp+0x4],0x30
   318b4:	mov    QWORD PTR [rsp+0x10],rax
   318b9:	call   3490 <__vfprintf_chk@plt>
   318be:	mov    rsi,QWORD PTR [rip+0x1ca5b]        # 4e320 <stderr@@GLIBC_2.2.5>
   318c5:	mov    edi,0xa
   318ca:	call   3600 <fputc@plt>
   318cf:	mov    rdi,QWORD PTR [rip+0x1ca4a]        # 4e320 <stderr@@GLIBC_2.2.5>
   318d6:	call   36c0 <fflush@plt>
   318db:	mov    edi,0x1
   318e0:	call   37a0 <exit@plt>
   318e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000318f0 <Warn>:
   318f0:	endbr64 
   318f4:	push   r12
   318f6:	mov    r12,rdi
   318f9:	sub    rsp,0xd0
   31900:	mov    QWORD PTR [rsp+0x28],rsi
   31905:	mov    QWORD PTR [rsp+0x30],rdx
   3190a:	mov    QWORD PTR [rsp+0x38],rcx
   3190f:	mov    QWORD PTR [rsp+0x40],r8
   31914:	mov    QWORD PTR [rsp+0x48],r9
   31919:	test   al,al
   3191b:	je     31954 <Warn+0x64>
   3191d:	movaps XMMWORD PTR [rsp+0x50],xmm0
   31922:	movaps XMMWORD PTR [rsp+0x60],xmm1
   31927:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3192c:	movaps XMMWORD PTR [rsp+0x80],xmm3
   31934:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3193c:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   31944:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3194c:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   31954:	mov    rcx,QWORD PTR [rip+0x1c9c5]        # 4e320 <stderr@@GLIBC_2.2.5>
   3195b:	mov    edx,0x9
   31960:	mov    esi,0x1
   31965:	lea    rdi,[rip+0x102d4]        # 41c40 <CSWTCH.18+0x580>
   3196c:	mov    rax,QWORD PTR fs:0x28
   31975:	mov    QWORD PTR [rsp+0x18],rax
   3197a:	xor    eax,eax
   3197c:	call   37b0 <fwrite@plt>
   31981:	mov    rcx,rsp
   31984:	mov    rdx,r12
   31987:	mov    esi,0x1
   3198c:	mov    rdi,QWORD PTR [rip+0x1c98d]        # 4e320 <stderr@@GLIBC_2.2.5>
   31993:	lea    rax,[rsp+0xe0]
   3199b:	mov    DWORD PTR [rsp],0x8
   319a2:	mov    QWORD PTR [rsp+0x8],rax
   319a7:	lea    rax,[rsp+0x20]
   319ac:	mov    DWORD PTR [rsp+0x4],0x30
   319b4:	mov    QWORD PTR [rsp+0x10],rax
   319b9:	call   3490 <__vfprintf_chk@plt>
   319be:	mov    rsi,QWORD PTR [rip+0x1c95b]        # 4e320 <stderr@@GLIBC_2.2.5>
   319c5:	mov    edi,0xa
   319ca:	call   3600 <fputc@plt>
   319cf:	mov    rdi,QWORD PTR [rip+0x1c94a]        # 4e320 <stderr@@GLIBC_2.2.5>
   319d6:	call   36c0 <fflush@plt>
   319db:	mov    rax,QWORD PTR [rsp+0x18]
   319e0:	xor    rax,QWORD PTR fs:0x28
   319e9:	jne    319f5 <Warn+0x105>
   319eb:	add    rsp,0xd0
   319f2:	pop    r12
   319f4:	ret    
   319f5:	call   3570 <__stack_chk_fail@plt>
   319fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031a00 <Panic>:
   31a00:	endbr64 
   31a04:	push   rax
   31a05:	pop    rax
   31a06:	lea    rdx,[rip+0x1023d]        # 41c4a <CSWTCH.18+0x58a>
   31a0d:	xor    eax,eax
   31a0f:	sub    rsp,0x8
   31a13:	mov    rcx,rdi
   31a16:	mov    rdi,QWORD PTR [rip+0x1c903]        # 4e320 <stderr@@GLIBC_2.2.5>
   31a1d:	mov    r8d,esi
   31a20:	mov    esi,0x1
   31a25:	call   37c0 <__fprintf_chk@plt>
   31a2a:	lea    rdi,[rip+0x1022e]        # 41c5f <CSWTCH.18+0x59f>
   31a31:	call   3760 <perror@plt>
   31a36:	mov    edi,0x1
   31a3b:	call   37a0 <exit@plt>

0000000000031a40 <endGCGdata>:
   31a40:	endbr64 
   31a44:	mov    DWORD PTR [rsi],0x0
   31a4a:	xor    eax,eax
   31a4c:	cmp    BYTE PTR [rdi],0x3e
   31a4f:	sete   al
   31a52:	ret    
   31a53:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   31a5e:	xchg   ax,ax

0000000000031a60 <endZuker>:
   31a60:	endbr64 
   31a64:	mov    DWORD PTR [rsi],0x0
   31a6a:	xor    eax,eax
   31a6c:	cmp    BYTE PTR [rdi],0x28
   31a6f:	sete   al
   31a72:	ret    
   31a73:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   31a7e:	xchg   ax,ax

0000000000031a80 <SeqfileGetLine>:
   31a80:	push   rbx
   31a81:	mov    esi,DWORD PTR [rdi+0x24]
   31a84:	mov    rbx,rdi
   31a87:	mov    r8,QWORD PTR [rdi]
   31a8a:	test   esi,esi
   31a8c:	jns    31ab0 <SeqfileGetLine+0x30>
   31a8e:	lea    rsi,[rbx+0x20]
   31a92:	lea    rdi,[rbx+0x18]
   31a96:	mov    rdx,r8
   31a99:	call   36a50 <sre_fgets>
   31a9e:	test   rax,rax
   31aa1:	je     31ac8 <SeqfileGetLine+0x48>
   31aa3:	add    DWORD PTR [rbx+0x10],0x1
   31aa7:	pop    rbx
   31aa8:	ret    
   31aa9:	nop    DWORD PTR [rax+0x0]
   31ab0:	lea    rdx,[rdi+0x28]
   31ab4:	mov    rdi,r8
   31ab7:	call   37de0 <SSIGetFilePosition>
   31abc:	test   eax,eax
   31abe:	jne    31ad8 <SeqfileGetLine+0x58>
   31ac0:	mov    r8,QWORD PTR [rbx]
   31ac3:	jmp    31a8e <SeqfileGetLine+0xe>
   31ac5:	nop    DWORD PTR [rax]
   31ac8:	mov    rax,QWORD PTR [rbx+0x18]
   31acc:	mov    BYTE PTR [rax],0x0
   31acf:	add    DWORD PTR [rbx+0x10],0x1
   31ad3:	pop    rbx
   31ad4:	ret    
   31ad5:	nop    DWORD PTR [rax]
   31ad8:	lea    rdi,[rip+0xc460]        # 3df3f <_IO_stdin_used+0xf3f>
   31adf:	xor    eax,eax
   31ae1:	call   317f0 <Die>
   31ae6:	jmp    31ac0 <SeqfileGetLine+0x40>
   31ae8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000031af0 <endStrider>:
   31af0:	endbr64 
   31af4:	sub    rsp,0x8
   31af8:	mov    DWORD PTR [rsi],0x0
   31afe:	lea    rsi,[rip+0xc404]        # 3df09 <_IO_stdin_used+0xf09>
   31b05:	call   37f0 <strstr@plt>
   31b0a:	test   rax,rax
   31b0d:	setne  al
   31b10:	add    rsp,0x8
   31b14:	movzx  eax,al
   31b17:	ret    
   31b18:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000031b20 <addseq>:
   31b20:	push   r13
   31b22:	push   r12
   31b24:	mov    r12,rsi
   31b27:	push   rbp
   31b28:	mov    rbp,rdi
   31b2b:	push   rbx
   31b2c:	sub    rsp,0x8
   31b30:	cmp    DWORD PTR [rsi+0x24],0xffffffff
   31b34:	movsxd r13,DWORD PTR [rsi+0x88]
   31b3b:	je     31c10 <addseq+0xf0>
   31b41:	movsx  rbx,BYTE PTR [rdi]
   31b45:	xor    edx,edx
   31b47:	xor    ecx,ecx
   31b49:	test   bl,bl
   31b4b:	je     31b81 <addseq+0x61>
   31b4d:	call   3820 <__ctype_b_loc@plt>
   31b52:	mov    rdx,rbp
   31b55:	xor    ecx,ecx
   31b57:	mov    rsi,QWORD PTR [rax]
   31b5a:	nop    WORD PTR [rax+rax*1+0x0]
   31b60:	movzx  eax,WORD PTR [rsi+rbx*2]
   31b64:	and    ax,0x2800
   31b68:	cmp    ax,0x1
   31b6c:	adc    ecx,0x0
   31b6f:	movsx  rbx,BYTE PTR [rdx+0x1]
   31b74:	add    rdx,0x1
   31b78:	test   bl,bl
   31b7a:	jne    31b60 <addseq+0x40>
   31b7c:	add    r13d,ecx
   31b7f:	sub    edx,ebp
   31b81:	mov    eax,DWORD PTR [r12+0x58]
   31b86:	mov    DWORD PTR [r12+0x88],r13d
   31b8e:	test   eax,eax
   31b90:	je     31bc5 <addseq+0xa5>
   31b92:	mov    esi,DWORD PTR [r12+0x5c]
   31b97:	test   esi,esi
   31b99:	jle    31bb4 <addseq+0x94>
   31b9b:	cmp    eax,esi
   31b9d:	je     31c98 <addseq+0x178>
   31ba3:	test   eax,eax
   31ba5:	jle    31c98 <addseq+0x178>
   31bab:	mov    DWORD PTR [r12+0x58],0x0
   31bb4:	mov    DWORD PTR [r12+0x5c],ecx
   31bb9:	cmp    DWORD PTR [r12+0x60],ecx
   31bbe:	jge    31bc5 <addseq+0xa5>
   31bc0:	mov    DWORD PTR [r12+0x60],ecx
   31bc5:	mov    eax,DWORD PTR [r12+0x64]
   31bca:	test   eax,eax
   31bcc:	je     31c01 <addseq+0xe1>
   31bce:	mov    ecx,DWORD PTR [r12+0x68]
   31bd3:	test   ecx,ecx
   31bd5:	jle    31bf0 <addseq+0xd0>
   31bd7:	test   eax,eax
   31bd9:	jle    31c80 <addseq+0x160>
   31bdf:	cmp    eax,ecx
   31be1:	je     31c80 <addseq+0x160>
   31be7:	mov    DWORD PTR [r12+0x64],0x0
   31bf0:	mov    DWORD PTR [r12+0x68],edx
   31bf5:	cmp    DWORD PTR [r12+0x6c],edx
   31bfa:	jge    31c01 <addseq+0xe1>
   31bfc:	mov    DWORD PTR [r12+0x6c],edx
   31c01:	add    rsp,0x8
   31c05:	pop    rbx
   31c06:	pop    rbp
   31c07:	pop    r12
   31c09:	pop    r13
   31c0b:	ret    
   31c0c:	nop    DWORD PTR [rax+0x0]
   31c10:	mov    eax,DWORD PTR [rsi+0x20]
   31c13:	mov    ecx,DWORD PTR [rsi+0x8c]
   31c19:	mov    rdx,QWORD PTR [rsi+0x70]
   31c1d:	lea    esi,[rax+r13*1]
   31c21:	cmp    esi,ecx
   31c23:	jg     31cb0 <addseq+0x190>
   31c29:	movzx  ebx,BYTE PTR [rbp+0x0]
   31c2d:	add    r13,rdx
   31c30:	test   bl,bl
   31c32:	je     31c68 <addseq+0x148>
   31c34:	call   3820 <__ctype_b_loc@plt>
   31c39:	nop    DWORD PTR [rax+0x0]
   31c40:	mov    rcx,QWORD PTR [rax]
   31c43:	movsx  rdx,bl
   31c47:	test   WORD PTR [rcx+rdx*2],0x2800
   31c4d:	jne    31c57 <addseq+0x137>
   31c4f:	mov    BYTE PTR [r13+0x0],bl
   31c53:	add    r13,0x1
   31c57:	movzx  ebx,BYTE PTR [rbp+0x1]
   31c5b:	add    rbp,0x1
   31c5f:	test   bl,bl
   31c61:	jne    31c40 <addseq+0x120>
   31c63:	mov    rdx,QWORD PTR [r12+0x70]
   31c68:	sub    r13,rdx
   31c6b:	mov    DWORD PTR [r12+0x88],r13d
   31c73:	add    rsp,0x8
   31c77:	pop    rbx
   31c78:	pop    rbp
   31c79:	pop    r12
   31c7b:	pop    r13
   31c7d:	ret    
   31c7e:	xchg   ax,ax
   31c80:	cmp    eax,0xffffffff
   31c83:	jne    31bf0 <addseq+0xd0>
   31c89:	mov    DWORD PTR [r12+0x64],ecx
   31c8e:	jmp    31bf0 <addseq+0xd0>
   31c93:	nop    DWORD PTR [rax+rax*1+0x0]
   31c98:	cmp    eax,0xffffffff
   31c9b:	jne    31bb4 <addseq+0x94>
   31ca1:	mov    DWORD PTR [r12+0x58],esi
   31ca6:	jmp    31bb4 <addseq+0x94>
   31cab:	nop    DWORD PTR [rax+rax*1+0x0]
   31cb0:	cmp    eax,0x1f4
   31cb5:	mov    esi,0x1f4
   31cba:	lea    rdi,[rip+0xffac]        # 41c6d <CSWTCH.18+0x5ad>
   31cc1:	cmovl  eax,esi
   31cc4:	mov    esi,0x20c
   31cc9:	add    eax,ecx
   31ccb:	mov    DWORD PTR [r12+0x8c],eax
   31cd3:	add    eax,0x1
   31cd6:	movsxd rcx,eax
   31cd9:	call   36860 <sre_realloc>
   31cde:	movsxd rdx,DWORD PTR [r12+0x8c]
   31ce6:	mov    QWORD PTR [r12+0x70],rax
   31ceb:	mov    BYTE PTR [rax+rdx*1],0x0
   31cef:	mov    rdx,QWORD PTR [r12+0x70]
   31cf4:	movsxd r13,DWORD PTR [r12+0x88]
   31cfc:	jmp    31c29 <addseq+0x109>
   31d01:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   31d0c:	nop    DWORD PTR [rax+0x0]

0000000000031d10 <readLoop>:
   31d10:	push   r13
   31d12:	push   r12
   31d14:	mov    r12,rsi
   31d17:	push   rbp
   31d18:	push   rbx
   31d19:	mov    rbx,rdx
   31d1c:	sub    rsp,0x18
   31d20:	mov    esi,DWORD PTR [rdx+0x24]
   31d23:	mov    rax,QWORD PTR fs:0x28
   31d2c:	mov    QWORD PTR [rsp+0x8],rax
   31d31:	xor    eax,eax
   31d33:	mov    DWORD PTR [rsp+0x4],0x0
   31d3b:	mov    DWORD PTR [rdx+0x88],0x0
   31d45:	mov    DWORD PTR [rdx+0x68],0x0
   31d4c:	mov    DWORD PTR [rdx+0x5c],0x0
   31d53:	test   edi,edi
   31d55:	je     31e00 <readLoop+0xf0>
   31d5b:	test   esi,esi
   31d5d:	js     31d68 <readLoop+0x58>
   31d5f:	movdqu xmm0,XMMWORD PTR [rdx+0x28]
   31d64:	movups XMMWORD PTR [rdx+0x48],xmm0
   31d68:	mov    rdi,QWORD PTR [rbx+0x18]
   31d6c:	mov    rsi,rbx
   31d6f:	call   31b20 <addseq>
   31d74:	lea    r13,[rsp+0x4]
   31d79:	nop    DWORD PTR [rax+0x0]
   31d80:	mov    rdi,rbx
   31d83:	xor    ebp,ebp
   31d85:	call   31a80 <SeqfileGetLine>
   31d8a:	mov    rdi,QWORD PTR [rbx+0x18]
   31d8e:	cmp    BYTE PTR [rdi],0x0
   31d91:	je     31de0 <readLoop+0xd0>
   31d93:	mov    rsi,r13
   31d96:	call   r12
   31d99:	or     ebp,eax
   31d9b:	mov    eax,DWORD PTR [rsp+0x4]
   31d9f:	test   eax,eax
   31da1:	jne    31dc8 <readLoop+0xb8>
   31da3:	test   ebp,ebp
   31da5:	je     31dc8 <readLoop+0xb8>
   31da7:	mov    rax,QWORD PTR [rsp+0x8]
   31dac:	xor    rax,QWORD PTR fs:0x28
   31db5:	jne    31e2f <readLoop+0x11f>
   31db7:	add    rsp,0x18
   31dbb:	pop    rbx
   31dbc:	pop    rbp
   31dbd:	pop    r12
   31dbf:	pop    r13
   31dc1:	ret    
   31dc2:	nop    WORD PTR [rax+rax*1+0x0]
   31dc8:	mov    rdi,QWORD PTR [rbx+0x18]
   31dcc:	mov    rsi,rbx
   31dcf:	call   31b20 <addseq>
   31dd4:	test   ebp,ebp
   31dd6:	je     31d80 <readLoop+0x70>
   31dd8:	jmp    31da7 <readLoop+0x97>
   31dda:	nop    WORD PTR [rax+rax*1+0x0]
   31de0:	mov    rdi,QWORD PTR [rbx]
   31de3:	xor    ebp,ebp
   31de5:	call   3660 <feof@plt>
   31dea:	mov    rdi,QWORD PTR [rbx+0x18]
   31dee:	test   eax,eax
   31df0:	setne  bpl
   31df4:	jmp    31d93 <readLoop+0x83>
   31df6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31e00:	test   esi,esi
   31e02:	js     31d74 <readLoop+0x64>
   31e08:	mov    rdi,QWORD PTR [rbx]
   31e0b:	lea    rdx,[rdx+0x48]
   31e0f:	call   37de0 <SSIGetFilePosition>
   31e14:	test   eax,eax
   31e16:	je     31d74 <readLoop+0x64>
   31e1c:	lea    rdi,[rip+0xc11c]        # 3df3f <_IO_stdin_used+0xf3f>
   31e23:	xor    eax,eax
   31e25:	call   317f0 <Die>
   31e2a:	jmp    31d74 <readLoop+0x64>
   31e2f:	call   3570 <__stack_chk_fail@plt>
   31e34:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   31e3f:	nop

0000000000031e40 <endEMBL>:
   31e40:	endbr64 
   31e44:	mov    DWORD PTR [rsi],0x0
   31e4a:	mov    r8,rdi
   31e4d:	mov    ecx,0x5
   31e52:	lea    rdi,[rip+0x1009c]        # 41ef5 <CSWTCH.18+0x835>
   31e59:	mov    rsi,r8
   31e5c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   31e5e:	seta   al
   31e61:	sbb    al,0x0
   31e63:	test   al,al
   31e65:	setne  al
   31e68:	movzx  eax,al
   31e6b:	ret    
   31e6c:	nop    DWORD PTR [rax+0x0]

0000000000031e70 <endPIR>:
   31e70:	endbr64 
   31e74:	mov    DWORD PTR [rsi],0x0
   31e7a:	cmp    BYTE PTR [rdi],0x2f
   31e7d:	mov    rax,rdi
   31e80:	jne    31e88 <endPIR+0x18>
   31e82:	cmp    BYTE PTR [rdi+0x1],0x2f
   31e86:	je     31eb0 <endPIR+0x40>
   31e88:	mov    rsi,rax
   31e8b:	mov    ecx,0x5
   31e90:	lea    rdi,[rip+0xfddd]        # 41c74 <CSWTCH.18+0x5b4>
   31e97:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   31e99:	seta   al
   31e9c:	sbb    al,0x0
   31e9e:	xor    r8d,r8d
   31ea1:	test   al,al
   31ea3:	sete   r8b
   31ea7:	mov    eax,r8d
   31eaa:	ret    
   31eab:	nop    DWORD PTR [rax+rax*1+0x0]
   31eb0:	cmp    BYTE PTR [rdi+0x2],0x2f
   31eb4:	mov    r8d,0x1
   31eba:	jne    31e88 <endPIR+0x18>
   31ebc:	mov    eax,r8d
   31ebf:	ret    

0000000000031ec0 <endIG>:
   31ec0:	endbr64 
   31ec4:	push   rbp
   31ec5:	mov    rbp,rdi
   31ec8:	mov    DWORD PTR [rsi],0x1
   31ece:	mov    esi,0x31
   31ed3:	call   3590 <strchr@plt>
   31ed8:	mov    r8,rax
   31edb:	mov    eax,0x1
   31ee0:	test   r8,r8
   31ee3:	je     31ef0 <endIG+0x30>
   31ee5:	pop    rbp
   31ee6:	ret    
   31ee7:	nop    WORD PTR [rax+rax*1+0x0]
   31ef0:	mov    rdi,rbp
   31ef3:	mov    esi,0x32
   31ef8:	call   3590 <strchr@plt>
   31efd:	pop    rbp
   31efe:	test   rax,rax
   31f01:	setne  al
   31f04:	movzx  eax,al
   31f07:	ret    
   31f08:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000031f10 <endGB>:
   31f10:	endbr64 
   31f14:	push   rbp
   31f15:	mov    rbp,rdi
   31f18:	mov    DWORD PTR [rsi],0x0
   31f1e:	lea    rsi,[rip+0xbfe4]        # 3df09 <_IO_stdin_used+0xf09>
   31f25:	call   37f0 <strstr@plt>
   31f2a:	mov    r8,rax
   31f2d:	mov    eax,0x1
   31f32:	test   r8,r8
   31f35:	je     31f40 <endGB+0x30>
   31f37:	pop    rbp
   31f38:	ret    
   31f39:	nop    DWORD PTR [rax+0x0]
   31f40:	mov    rsi,rbp
   31f43:	mov    ecx,0x5
   31f48:	lea    rdi,[rip+0xfd2b]        # 41c7a <CSWTCH.18+0x5ba>
   31f4f:	pop    rbp
   31f50:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   31f52:	seta   al
   31f55:	sbb    al,0x0
   31f57:	test   al,al
   31f59:	sete   al
   31f5c:	movzx  eax,al
   31f5f:	ret    

0000000000031f60 <SetSeqinfoString.part.0>:
   31f60:	push   r15
   31f62:	push   r14
   31f64:	push   r13
   31f66:	mov    r13d,edx
   31f69:	push   r12
   31f6b:	mov    r12,rdi
   31f6e:	push   rbp
   31f6f:	mov    rbp,rsi
   31f72:	push   rbx
   31f73:	sub    rsp,0x8
   31f77:	cmp    BYTE PTR [rsi],0x20
   31f7a:	jne    31f8a <SetSeqinfoString.part.0+0x2a>
   31f7c:	nop    DWORD PTR [rax+0x0]
   31f80:	add    rbp,0x1
   31f84:	cmp    BYTE PTR [rbp+0x0],0x20
   31f88:	je     31f80 <SetSeqinfoString.part.0+0x20>
   31f8a:	mov    rdi,rbp
   31f8d:	call   3560 <strlen@plt>
   31f92:	mov    ebx,eax
   31f94:	sub    ebx,0x1
   31f97:	js     321d9 <SetSeqinfoString.part.0+0x279>
   31f9d:	call   3820 <__ctype_b_loc@plt>
   31fa2:	mov    rcx,QWORD PTR [rax]
   31fa5:	movsxd rax,ebx
   31fa8:	jmp    31fbb <SetSeqinfoString.part.0+0x5b>
   31faa:	nop    WORD PTR [rax+rax*1+0x0]
   31fb0:	lea    edx,[rax-0x1]
   31fb3:	sub    rax,0x1
   31fb7:	test   eax,eax
   31fb9:	js     32038 <SetSeqinfoString.part.0+0xd8>
   31fbb:	movsx  rdx,BYTE PTR [rbp+rax*1+0x0]
   31fc1:	test   BYTE PTR [rcx+rdx*2+0x1],0x20
   31fc6:	jne    31fb0 <SetSeqinfoString.part.0+0x50>
   31fc8:	mov    BYTE PTR [rbp+rax*1+0x1],0x0
   31fcd:	cmp    r13d,0x20
   31fd1:	jg     32000 <SetSeqinfoString.part.0+0xa0>
   31fd3:	test   r13d,r13d
   31fd6:	jle    32070 <SetSeqinfoString.part.0+0x110>
   31fdc:	cmp    r13d,0x20
   31fe0:	ja     32070 <SetSeqinfoString.part.0+0x110>
   31fe6:	lea    rcx,[rip+0x1040b]        # 423f8 <CSWTCH.18+0xd38>
   31fed:	mov    edx,r13d
   31ff0:	movsxd rax,DWORD PTR [rcx+rdx*4]
   31ff4:	add    rax,rcx
   31ff7:	notrack jmp rax
   31ffa:	nop    WORD PTR [rax+rax*1+0x0]
   32000:	cmp    r13d,0x100
   32007:	jne    32070 <SetSeqinfoString.part.0+0x110>
   32009:	mov    rdi,rbp
   3200c:	call   3aa60 <IsInt>
   32011:	test   eax,eax
   32013:	jne    321a8 <SetSeqinfoString.part.0+0x248>
   32019:	mov    DWORD PTR [rip+0x3034d],0x5        # 62370 <squid_errno>
   32023:	add    rsp,0x8
   32027:	xor    eax,eax
   32029:	pop    rbx
   3202a:	pop    rbp
   3202b:	pop    r12
   3202d:	pop    r13
   3202f:	pop    r14
   32031:	pop    r15
   32033:	ret    
   32034:	nop    DWORD PTR [rax+0x0]
   32038:	movsxd rax,edx
   3203b:	jmp    31fc8 <SetSeqinfoString.part.0+0x68>
   3203d:	mov    rdi,rbp
   32040:	call   3aa60 <IsInt>
   32045:	test   eax,eax
   32047:	je     32019 <SetSeqinfoString.part.0+0xb9>
   32049:	mov    edx,0xa
   3204e:	xor    esi,esi
   32050:	mov    rdi,rbp
   32053:	call   3670 <strtol@plt>
   32058:	mov    DWORD PTR [r12+0x14c],eax
   32060:	test   eax,eax
   32062:	je     32081 <SetSeqinfoString.part.0+0x121>
   32064:	or     DWORD PTR [r12],0x20
   32069:	mov    eax,0x1
   3206e:	jmp    32086 <SetSeqinfoString.part.0+0x126>
   32070:	mov    esi,r13d
   32073:	lea    rdi,[rip+0xff56]        # 41fd0 <CSWTCH.18+0x910>
   3207a:	xor    eax,eax
   3207c:	call   317f0 <Die>
   32081:	mov    eax,0x1
   32086:	add    rsp,0x8
   3208a:	pop    rbx
   3208b:	pop    rbp
   3208c:	pop    r12
   3208e:	pop    r13
   32090:	pop    r14
   32092:	pop    r15
   32094:	ret    
   32095:	cmp    BYTE PTR [rbp+0x0],0x2d
   32099:	je     32081 <SetSeqinfoString.part.0+0x121>
   3209b:	lea    rdi,[r12+0x44]
   320a0:	mov    edx,0x3f
   320a5:	mov    rsi,rbp
   320a8:	call   34b0 <strncpy@plt>
   320ad:	or     DWORD PTR [r12],0x2
   320b2:	mov    eax,0x1
   320b7:	mov    BYTE PTR [r12+0x83],0x0
   320c0:	jmp    32086 <SetSeqinfoString.part.0+0x126>
   320c2:	cmp    BYTE PTR [rbp+0x0],0x2d
   320c6:	je     32081 <SetSeqinfoString.part.0+0x121>
   320c8:	lea    rdi,[r12+0x84]
   320d0:	mov    edx,0x3f
   320d5:	mov    rsi,rbp
   320d8:	call   34b0 <strncpy@plt>
   320dd:	or     DWORD PTR [r12],0x4
   320e2:	mov    eax,0x1
   320e7:	mov    BYTE PTR [r12+0xc3],0x0
   320f0:	jmp    32086 <SetSeqinfoString.part.0+0x126>
   320f2:	cmp    BYTE PTR [rbp+0x0],0x2d
   320f6:	je     32081 <SetSeqinfoString.part.0+0x121>
   320f8:	lea    rdi,[r12+0x4]
   320fd:	mov    edx,0x3f
   32102:	mov    rsi,rbp
   32105:	call   34b0 <strncpy@plt>
   3210a:	or     DWORD PTR [r12],0x1
   3210f:	mov    eax,r13d
   32112:	mov    BYTE PTR [r12+0x43],0x0
   32118:	jmp    32086 <SetSeqinfoString.part.0+0x126>
   3211d:	cmp    BYTE PTR [rbp+0x0],0x2d
   32121:	je     32081 <SetSeqinfoString.part.0+0x121>
   32127:	mov    ebx,DWORD PTR [r12]
   3212b:	lea    r14,[r12+0xc4]
   32133:	test   bl,0x8
   32136:	je     32222 <SetSeqinfoString.part.0+0x2c2>
   3213c:	mov    rdi,r14
   3213f:	call   3560 <strlen@plt>
   32144:	mov    r13,rax
   32147:	cmp    eax,0x7d
   3214a:	jle    321e1 <SetSeqinfoString.part.0+0x281>
   32150:	or     ebx,0x8
   32153:	mov    eax,0x1
   32158:	mov    BYTE PTR [r12+0x143],0x0
   32161:	mov    DWORD PTR [r12],ebx
   32165:	jmp    32086 <SetSeqinfoString.part.0+0x126>
   3216a:	mov    rdi,rbp
   3216d:	call   3aa60 <IsInt>
   32172:	test   eax,eax
   32174:	je     32019 <SetSeqinfoString.part.0+0xb9>
   3217a:	mov    edx,0xa
   3217f:	xor    esi,esi
   32181:	mov    rdi,rbp
   32184:	call   3670 <strtol@plt>
   32189:	mov    DWORD PTR [r12+0x148],eax
   32191:	test   eax,eax
   32193:	je     32081 <SetSeqinfoString.part.0+0x121>
   32199:	or     DWORD PTR [r12],0x10
   3219e:	mov    eax,0x1
   321a3:	jmp    32086 <SetSeqinfoString.part.0+0x126>
   321a8:	mov    edx,0xa
   321ad:	xor    esi,esi
   321af:	mov    rdi,rbp
   321b2:	call   3670 <strtol@plt>
   321b7:	mov    DWORD PTR [r12+0x150],eax
   321bf:	test   eax,eax
   321c1:	je     32081 <SetSeqinfoString.part.0+0x121>
   321c7:	or     DWORD PTR [r12],0x100
   321cf:	mov    eax,0x1
   321d4:	jmp    32086 <SetSeqinfoString.part.0+0x126>
   321d9:	movsxd rax,ebx
   321dc:	jmp    31fc8 <SetSeqinfoString.part.0+0x68>
   321e1:	mov    r15d,0x7f
   321e7:	add    r13d,0x1
   321eb:	mov    rdi,r14
   321ee:	mov    ecx,0x80
   321f3:	mov    edx,r15d
   321f6:	lea    rsi,[rip+0xfa95]        # 41c92 <CSWTCH.18+0x5d2>
   321fd:	sub    r15d,r13d
   32200:	sub    edx,eax
   32202:	movsxd rdx,edx
   32205:	call   37d0 <__strncat_chk@plt>
   3220a:	movsxd rdx,r15d
   3220d:	mov    ecx,0x80
   32212:	mov    rsi,rbp
   32215:	mov    rdi,r14
   32218:	call   37d0 <__strncat_chk@plt>
   3221d:	jmp    32150 <SetSeqinfoString.part.0+0x1f0>
   32222:	mov    edx,0x7f
   32227:	mov    rsi,rbp
   3222a:	mov    rdi,r14
   3222d:	call   34b0 <strncpy@plt>
   32232:	jmp    32150 <SetSeqinfoString.part.0+0x1f0>
   32237:	nop    WORD PTR [rax+rax*1+0x0]

0000000000032240 <endPearson>:
   32240:	endbr64 
   32244:	mov    DWORD PTR [rsi],0x0
   3224a:	xor    eax,eax
   3224c:	cmp    BYTE PTR [rdi],0x3e
   3224f:	sete   al
   32252:	ret    
   32253:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3225e:	xchg   ax,ax

0000000000032260 <SeqfilePosition>:
   32260:	endbr64 
   32264:	push   r12
   32266:	mov    r12,rsi
   32269:	push   rbp
   3226a:	mov    rbp,rdi
   3226d:	sub    rsp,0x8
   32271:	mov    edx,DWORD PTR [rdi+0x98]
   32277:	test   edx,edx
   32279:	jne    32285 <SeqfilePosition+0x25>
   3227b:	mov    eax,DWORD PTR [rdi+0x94]
   32281:	test   eax,eax
   32283:	je     322b8 <SeqfilePosition+0x58>
   32285:	lea    rdi,[rip+0xfd6c]        # 41ff8 <CSWTCH.18+0x938>
   3228c:	xor    eax,eax
   3228e:	call   317f0 <Die>
   32293:	mov    rdi,QWORD PTR [rbp+0x0]
   32297:	mov    rsi,r12
   3229a:	call   37d30 <SSISetFilePosition>
   3229f:	test   eax,eax
   322a1:	jne    322d1 <SeqfilePosition+0x71>
   322a3:	add    rsp,0x8
   322a7:	mov    rdi,rbp
   322aa:	pop    rbp
   322ab:	pop    r12
   322ad:	jmp    31a80 <SeqfileGetLine>
   322b2:	nop    WORD PTR [rax+rax*1+0x0]
   322b8:	cmp    DWORD PTR [rdi+0x90],0x64
   322bf:	jg     32285 <SeqfilePosition+0x25>
   322c1:	mov    rdi,QWORD PTR [rbp+0x0]
   322c5:	mov    rsi,r12
   322c8:	call   37d30 <SSISetFilePosition>
   322cd:	test   eax,eax
   322cf:	je     322a3 <SeqfilePosition+0x43>
   322d1:	lea    rdi,[rip+0xfd68]        # 42040 <CSWTCH.18+0x980>
   322d8:	xor    eax,eax
   322da:	call   317f0 <Die>
   322df:	add    rsp,0x8
   322e3:	mov    rdi,rbp
   322e6:	pop    rbp
   322e7:	pop    r12
   322e9:	jmp    31a80 <SeqfileGetLine>
   322ee:	xchg   ax,ax

00000000000322f0 <SeqfileRewind>:
   322f0:	endbr64 
   322f4:	push   rbp
   322f5:	mov    edx,DWORD PTR [rdi+0x98]
   322fb:	mov    rbp,rdi
   322fe:	test   edx,edx
   32300:	jne    3230c <SeqfileRewind+0x1c>
   32302:	mov    eax,DWORD PTR [rdi+0x94]
   32308:	test   eax,eax
   3230a:	je     3231a <SeqfileRewind+0x2a>
   3230c:	lea    rdi,[rip+0xfd65]        # 42078 <CSWTCH.18+0x9b8>
   32313:	xor    eax,eax
   32315:	call   317f0 <Die>
   3231a:	mov    rdi,QWORD PTR [rbp+0x0]
   3231e:	call   35a0 <rewind@plt>
   32323:	mov    rdi,rbp
   32326:	pop    rbp
   32327:	jmp    31a80 <SeqfileGetLine>
   3232c:	nop    DWORD PTR [rax+0x0]

0000000000032330 <SeqfileLineParameters>:
   32330:	endbr64 
   32334:	mov    eax,DWORD PTR [rdi+0x58]
   32337:	test   eax,eax
   32339:	jle    32340 <SeqfileLineParameters+0x10>
   3233b:	cmp    eax,DWORD PTR [rdi+0x60]
   3233e:	je     32350 <SeqfileLineParameters+0x20>
   32340:	mov    DWORD PTR [rsi],0x0
   32346:	mov    DWORD PTR [rdx],0x0
   3234c:	ret    
   3234d:	nop    DWORD PTR [rax]
   32350:	mov    eax,DWORD PTR [rdi+0x64]
   32353:	test   eax,eax
   32355:	jle    32340 <SeqfileLineParameters+0x10>
   32357:	cmp    eax,DWORD PTR [rdi+0x6c]
   3235a:	jne    32340 <SeqfileLineParameters+0x10>
   3235c:	mov    DWORD PTR [rsi],eax
   3235e:	mov    eax,DWORD PTR [rdi+0x58]
   32361:	mov    DWORD PTR [rdx],eax
   32363:	ret    
   32364:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3236f:	nop

0000000000032370 <SeqfileClose>:
   32370:	endbr64 
   32374:	push   rbp
   32375:	mov    rbp,rdi
   32378:	mov    rdi,QWORD PTR [rdi+0xa8]
   3237f:	test   rdi,rdi
   32382:	je     323e8 <SeqfileClose+0x78>
   32384:	mov    r8,QWORD PTR [rbp+0xa0]
   3238b:	test   r8,r8
   3238e:	je     3239f <SeqfileClose+0x2f>
   32390:	mov    rdi,r8
   32393:	call   2b230 <MSAFree>
   32398:	mov    rdi,QWORD PTR [rbp+0xa8]
   3239f:	mov    r8,QWORD PTR [rdi+0x18]
   323a3:	test   r8,r8
   323a6:	je     323b7 <SeqfileClose+0x47>
   323a8:	mov    rdi,r8
   323ab:	call   3460 <free@plt>
   323b0:	mov    rdi,QWORD PTR [rbp+0xa8]
   323b7:	call   3460 <free@plt>
   323bc:	mov    rdi,QWORD PTR [rbp+0x18]
   323c0:	test   rdi,rdi
   323c3:	je     323ca <SeqfileClose+0x5a>
   323c5:	call   3460 <free@plt>
   323ca:	mov    rdi,QWORD PTR [rbp+0x8]
   323ce:	test   rdi,rdi
   323d1:	je     323d8 <SeqfileClose+0x68>
   323d3:	call   3460 <free@plt>
   323d8:	mov    rdi,rbp
   323db:	pop    rbp
   323dc:	jmp    3460 <free@plt>
   323e1:	nop    DWORD PTR [rax+0x0]
   323e8:	mov    eax,DWORD PTR [rbp+0x98]
   323ee:	test   eax,eax
   323f0:	jne    323bc <SeqfileClose+0x4c>
   323f2:	mov    rdi,QWORD PTR [rbp+0x0]
   323f6:	call   3530 <fclose@plt>
   323fb:	jmp    323bc <SeqfileClose+0x4c>
   323fd:	nop    DWORD PTR [rax]

0000000000032400 <FreeSequence>:
   32400:	endbr64 
   32404:	push   rbx
   32405:	mov    rbx,rsi
   32408:	test   rdi,rdi
   3240b:	je     32412 <FreeSequence+0x12>
   3240d:	call   3460 <free@plt>
   32412:	mov    eax,DWORD PTR [rbx]
   32414:	test   ah,0x2
   32417:	jne    32420 <FreeSequence+0x20>
   32419:	test   ah,0x4
   3241c:	jne    32433 <FreeSequence+0x33>
   3241e:	pop    rbx
   3241f:	ret    
   32420:	mov    rdi,QWORD PTR [rbx+0x158]
   32427:	call   3460 <free@plt>
   3242c:	mov    eax,DWORD PTR [rbx]
   3242e:	test   ah,0x4
   32431:	je     3241e <FreeSequence+0x1e>
   32433:	mov    rdi,QWORD PTR [rbx+0x160]
   3243a:	pop    rbx
   3243b:	jmp    3460 <free@plt>

0000000000032440 <SetSeqinfoString>:
   32440:	endbr64 
   32444:	test   rsi,rsi
   32447:	je     32450 <SetSeqinfoString+0x10>
   32449:	jmp    31f60 <SetSeqinfoString.part.0>
   3244e:	xchg   ax,ax
   32450:	mov    eax,0x1
   32455:	ret    
   32456:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000032460 <SeqinfoCopy>:
   32460:	endbr64 
   32464:	push   rbp
   32465:	mov    rbp,rdi
   32468:	push   rbx
   32469:	mov    rbx,rsi
   3246c:	sub    rsp,0x8
   32470:	mov    eax,DWORD PTR [rsi]
   32472:	mov    DWORD PTR [rdi],eax
   32474:	test   al,0x1
   32476:	jne    32500 <SeqinfoCopy+0xa0>
   3247c:	mov    eax,DWORD PTR [rbx]
   3247e:	test   al,0x2
   32480:	jne    3251c <SeqinfoCopy+0xbc>
   32486:	test   al,0x4
   32488:	jne    32538 <SeqinfoCopy+0xd8>
   3248e:	test   al,0x8
   32490:	jne    3255a <SeqinfoCopy+0xfa>
   32496:	test   al,0x40
   32498:	je     324a6 <SeqinfoCopy+0x46>
   3249a:	mov    edx,DWORD PTR [rbx+0x144]
   324a0:	mov    DWORD PTR [rbp+0x144],edx
   324a6:	test   al,0x10
   324a8:	je     324b6 <SeqinfoCopy+0x56>
   324aa:	mov    edx,DWORD PTR [rbx+0x148]
   324b0:	mov    DWORD PTR [rbp+0x148],edx
   324b6:	test   al,0x20
   324b8:	je     324c6 <SeqinfoCopy+0x66>
   324ba:	mov    edx,DWORD PTR [rbx+0x14c]
   324c0:	mov    DWORD PTR [rbp+0x14c],edx
   324c6:	test   ah,0x1
   324c9:	je     324d7 <SeqinfoCopy+0x77>
   324cb:	mov    edx,DWORD PTR [rbx+0x150]
   324d1:	mov    DWORD PTR [rbp+0x150],edx
   324d7:	test   al,0x80
   324d9:	je     324e7 <SeqinfoCopy+0x87>
   324db:	mov    edx,DWORD PTR [rbx+0x154]
   324e1:	mov    DWORD PTR [rbp+0x154],edx
   324e7:	test   ah,0x2
   324ea:	jne    325a0 <SeqinfoCopy+0x140>
   324f0:	test   ah,0x4
   324f3:	jne    32580 <SeqinfoCopy+0x120>
   324f9:	add    rsp,0x8
   324fd:	pop    rbx
   324fe:	pop    rbp
   324ff:	ret    
   32500:	lea    rsi,[rsi+0x4]
   32504:	lea    rdi,[rdi+0x4]
   32508:	mov    edx,0x40
   3250d:	call   3700 <__strcpy_chk@plt>
   32512:	mov    eax,DWORD PTR [rbx]
   32514:	test   al,0x2
   32516:	je     32486 <SeqinfoCopy+0x26>
   3251c:	lea    rsi,[rbx+0x44]
   32520:	lea    rdi,[rbp+0x44]
   32524:	mov    edx,0x40
   32529:	call   3700 <__strcpy_chk@plt>
   3252e:	mov    eax,DWORD PTR [rbx]
   32530:	test   al,0x4
   32532:	je     3248e <SeqinfoCopy+0x2e>
   32538:	lea    rsi,[rbx+0x84]
   3253f:	lea    rdi,[rbp+0x84]
   32546:	mov    edx,0x40
   3254b:	call   3700 <__strcpy_chk@plt>
   32550:	mov    eax,DWORD PTR [rbx]
   32552:	test   al,0x8
   32554:	je     32496 <SeqinfoCopy+0x36>
   3255a:	lea    rsi,[rbx+0xc4]
   32561:	lea    rdi,[rbp+0xc4]
   32568:	mov    edx,0x80
   3256d:	call   3700 <__strcpy_chk@plt>
   32572:	mov    eax,DWORD PTR [rbx]
   32574:	jmp    32496 <SeqinfoCopy+0x36>
   32579:	nop    DWORD PTR [rax+0x0]
   32580:	mov    rdi,QWORD PTR [rbx+0x160]
   32587:	call   36670 <Strdup>
   3258c:	mov    QWORD PTR [rbp+0x160],rax
   32593:	add    rsp,0x8
   32597:	pop    rbx
   32598:	pop    rbp
   32599:	ret    
   3259a:	nop    WORD PTR [rax+rax*1+0x0]
   325a0:	mov    rdi,QWORD PTR [rbx+0x158]
   325a7:	call   36670 <Strdup>
   325ac:	mov    QWORD PTR [rbp+0x158],rax
   325b3:	mov    eax,DWORD PTR [rbx]
   325b5:	jmp    324f0 <SeqinfoCopy+0x90>
   325ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000000325c0 <ToDNA>:
   325c0:	endbr64 
   325c4:	jmp    325db <ToDNA+0x1b>
   325c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   325d0:	cmp    al,0x75
   325d2:	jne    325d7 <ToDNA+0x17>
   325d4:	mov    BYTE PTR [rdi],0x74
   325d7:	add    rdi,0x1
   325db:	movzx  eax,BYTE PTR [rdi]
   325de:	test   al,al
   325e0:	je     325f0 <ToDNA+0x30>
   325e2:	cmp    al,0x55
   325e4:	jne    325d0 <ToDNA+0x10>
   325e6:	mov    BYTE PTR [rdi],0x54
   325e9:	jmp    325d7 <ToDNA+0x17>
   325eb:	nop    DWORD PTR [rax+rax*1+0x0]
   325f0:	ret    
   325f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   325fc:	nop    DWORD PTR [rax+0x0]

0000000000032600 <ToRNA>:
   32600:	endbr64 
   32604:	jmp    3261b <ToRNA+0x1b>
   32606:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32610:	cmp    al,0x74
   32612:	jne    32617 <ToRNA+0x17>
   32614:	mov    BYTE PTR [rdi],0x75
   32617:	add    rdi,0x1
   3261b:	movzx  eax,BYTE PTR [rdi]
   3261e:	test   al,al
   32620:	je     32630 <ToRNA+0x30>
   32622:	cmp    al,0x54
   32624:	jne    32610 <ToRNA+0x10>
   32626:	mov    BYTE PTR [rdi],0x55
   32629:	jmp    32617 <ToRNA+0x17>
   3262b:	nop    DWORD PTR [rax+rax*1+0x0]
   32630:	ret    
   32631:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3263c:	nop    DWORD PTR [rax+0x0]

0000000000032640 <ToIUPAC>:
   32640:	endbr64 
   32644:	push   r13
   32646:	push   r12
   32648:	push   rbp
   32649:	mov    rbp,rdi
   3264c:	push   rbx
   3264d:	sub    rsp,0x8
   32651:	movzx  ebx,BYTE PTR [rdi]
   32654:	test   esi,esi
   32656:	jne    32698 <ToIUPAC+0x58>
   32658:	lea    r12,[rip+0xfa59]        # 420b8 <CSWTCH.18+0x9f8>
   3265f:	test   bl,bl
   32661:	jne    32680 <ToIUPAC+0x40>
   32663:	add    rsp,0x8
   32667:	pop    rbx
   32668:	pop    rbp
   32669:	pop    r12
   3266b:	pop    r13
   3266d:	ret    
   3266e:	xchg   ax,ax
   32670:	mov    BYTE PTR [rbp+0x0],0x4e
   32674:	movzx  ebx,BYTE PTR [rbp+0x1]
   32678:	add    rbp,0x1
   3267c:	test   bl,bl
   3267e:	je     32663 <ToIUPAC+0x23>
   32680:	movsx  esi,bl
   32683:	mov    rdi,r12
   32686:	call   3590 <strchr@plt>
   3268b:	test   rax,rax
   3268e:	jne    32674 <ToIUPAC+0x34>
   32690:	jmp    32670 <ToIUPAC+0x30>
   32692:	nop    WORD PTR [rax+rax*1+0x0]
   32698:	test   bl,bl
   3269a:	je     32663 <ToIUPAC+0x23>
   3269c:	lea    r12,[rip+0xfa15]        # 420b8 <CSWTCH.18+0x9f8>
   326a3:	movabs r13,0x8000000000006001
   326ad:	jmp    326bc <ToIUPAC+0x7c>
   326af:	nop
   326b0:	movzx  ebx,BYTE PTR [rbp+0x1]
   326b4:	add    rbp,0x1
   326b8:	test   bl,bl
   326ba:	je     32663 <ToIUPAC+0x23>
   326bc:	movsx  esi,bl
   326bf:	mov    rdi,r12
   326c2:	call   3590 <strchr@plt>
   326c7:	test   rax,rax
   326ca:	jne    326b0 <ToIUPAC+0x70>
   326cc:	lea    ecx,[rbx-0x20]
   326cf:	mov    eax,0x1
   326d4:	cmp    cl,0x3f
   326d7:	ja     326e5 <ToIUPAC+0xa5>
   326d9:	mov    rax,r13
   326dc:	shr    rax,cl
   326df:	not    rax
   326e2:	and    eax,0x1
   326e5:	cmp    bl,0x7e
   326e8:	je     326b0 <ToIUPAC+0x70>
   326ea:	test   al,al
   326ec:	je     326b0 <ToIUPAC+0x70>
   326ee:	mov    BYTE PTR [rbp+0x0],0x4e
   326f2:	jmp    326b0 <ToIUPAC+0x70>
   326f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   326ff:	nop

0000000000032700 <GCGBinaryToSequence>:
   32700:	endbr64 
   32704:	mov    edx,esi
   32706:	lea    eax,[rsi+0x2]
   32709:	sub    edx,0x1
   3270c:	cmovns eax,edx
   3270f:	sar    eax,0x2
   32712:	cmp    esi,0xfffffffe
   32715:	jl     32762 <GCGBinaryToSequence+0x62>
   32717:	movsxd r9,eax
   3271a:	shl    eax,0x2
   3271d:	cdqe   
   3271f:	lea    r8,[rdi+rax*1-0x4]
   32724:	nop    DWORD PTR [rax+0x0]
   32728:	movzx  ecx,BYTE PTR [rdi+r9*1]
   3272d:	lea    rax,[r8+0x4]
   32731:	mov    edx,ecx
   32733:	and    edx,0x3
   32736:	cmp    dl,0x2
   32739:	je     32780 <GCGBinaryToSequence+0x80>
   3273b:	cmp    dl,0x3
   3273e:	je     32790 <GCGBinaryToSequence+0x90>
   32740:	cmp    dl,0x1
   32743:	je     32770 <GCGBinaryToSequence+0x70>
   32745:	mov    BYTE PTR [rax+0x3],0x43
   32749:	sub    rax,0x1
   3274d:	sar    cl,0x2
   32750:	cmp    r8,rax
   32753:	jne    32731 <GCGBinaryToSequence+0x31>
   32755:	sub    r9,0x1
   32759:	sub    r8,0x4
   3275d:	test   r9d,r9d
   32760:	jns    32728 <GCGBinaryToSequence+0x28>
   32762:	movsxd rsi,esi
   32765:	mov    eax,0x1
   3276a:	mov    BYTE PTR [rdi+rsi*1],0x0
   3276e:	ret    
   3276f:	nop
   32770:	mov    BYTE PTR [rax+0x3],0x54
   32774:	jmp    32749 <GCGBinaryToSequence+0x49>
   32776:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32780:	mov    BYTE PTR [rax+0x3],0x41
   32784:	jmp    32749 <GCGBinaryToSequence+0x49>
   32786:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32790:	mov    BYTE PTR [rax+0x3],0x47
   32794:	jmp    32749 <GCGBinaryToSequence+0x49>
   32796:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000327a0 <ReadSeq>:
   327a0:	endbr64 
   327a4:	push   r15
   327a6:	mov    r15,rdi
   327a9:	push   r14
   327ab:	push   r13
   327ad:	push   r12
   327af:	push   rbp
   327b0:	mov    rbp,rdx
   327b3:	push   rbx
   327b4:	mov    rbx,rcx
   327b7:	sub    rsp,0x8
   327bb:	cmp    DWORD PTR [rdi+0x90],0x64
   327c2:	mov    DWORD PTR [rip+0x2fba4],0x0        # 62370 <squid_errno>
   327cc:	jle    329d0 <ReadSeq+0x230>
   327d2:	mov    rdi,QWORD PTR [rdi+0xa0]
   327d9:	movsxd rax,DWORD PTR [rdi+0x160]
   327e0:	cmp    eax,DWORD PTR [rdi+0x1c]
   327e3:	jge    32990 <ReadSeq+0x1f0>
   327e9:	shl    rax,0x3
   327ed:	mov    rdx,QWORD PTR [rdi]
   327f0:	mov    esi,DWORD PTR [rdi+0x18]
   327f3:	lea    rcx,[r15+0x70]
   327f7:	mov    r9,QWORD PTR [rdx+rax*1]
   327fb:	mov    rdx,r9
   327fe:	mov    rdi,r9
   32801:	call   24f30 <MakeDealignedString>
   32806:	mov    rdi,QWORD PTR [r15+0x70]
   3280a:	call   3560 <strlen@plt>
   3280f:	mov    DWORD PTR [r15+0x88],eax
   32816:	mov    rax,QWORD PTR [r15+0xa0]
   3281d:	mov    DWORD PTR [rbx],0x0
   32823:	movsxd rsi,DWORD PTR [rax+0x160]
   3282a:	mov    rcx,QWORD PTR [rax+0x8]
   3282e:	mov    rdx,rsi
   32831:	mov    rsi,QWORD PTR [rcx+rsi*8]
   32835:	test   rsi,rsi
   32838:	je     32854 <ReadSeq+0xb4>
   3283a:	mov    edx,0x1
   3283f:	mov    rdi,rbx
   32842:	call   31f60 <SetSeqinfoString.part.0>
   32847:	mov    rax,QWORD PTR [r15+0xa0]
   3284e:	mov    edx,DWORD PTR [rax+0x160]
   32854:	mov    rcx,QWORD PTR [rax+0x60]
   32858:	test   rcx,rcx
   3285b:	je     32883 <ReadSeq+0xe3>
   3285d:	movsxd rsi,edx
   32860:	mov    rsi,QWORD PTR [rcx+rsi*8]
   32864:	test   rsi,rsi
   32867:	je     32883 <ReadSeq+0xe3>
   32869:	mov    edx,0x4
   3286e:	mov    rdi,rbx
   32871:	call   31f60 <SetSeqinfoString.part.0>
   32876:	mov    rax,QWORD PTR [r15+0xa0]
   3287d:	mov    edx,DWORD PTR [rax+0x160]
   32883:	mov    rcx,QWORD PTR [rax+0x68]
   32887:	test   rcx,rcx
   3288a:	je     328b2 <ReadSeq+0x112>
   3288c:	movsxd rsi,edx
   3288f:	mov    rsi,QWORD PTR [rcx+rsi*8]
   32893:	test   rsi,rsi
   32896:	je     328b2 <ReadSeq+0x112>
   32898:	mov    edx,0x8
   3289d:	mov    rdi,rbx
   328a0:	call   31f60 <SetSeqinfoString.part.0>
   328a5:	mov    rax,QWORD PTR [r15+0xa0]
   328ac:	mov    edx,DWORD PTR [rax+0x160]
   328b2:	mov    rcx,QWORD PTR [rax+0x70]
   328b6:	test   rcx,rcx
   328b9:	je     328f7 <ReadSeq+0x157>
   328bb:	movsxd rsi,edx
   328be:	mov    r9,QWORD PTR [rcx+rsi*8]
   328c2:	test   r9,r9
   328c5:	je     328f7 <ReadSeq+0x157>
   328c7:	mov    r10d,DWORD PTR [rax+0x18]
   328cb:	mov    rax,QWORD PTR [rax]
   328ce:	mov    rdx,r9
   328d1:	lea    rcx,[rbx+0x158]
   328d8:	mov    rdi,QWORD PTR [rax+rsi*8]
   328dc:	mov    esi,r10d
   328df:	call   24f30 <MakeDealignedString>
   328e4:	mov    rax,QWORD PTR [r15+0xa0]
   328eb:	or     DWORD PTR [rbx],0x200
   328f1:	mov    edx,DWORD PTR [rax+0x160]
   328f7:	mov    rcx,QWORD PTR [rax+0x78]
   328fb:	test   rcx,rcx
   328fe:	je     329c8 <ReadSeq+0x228>
   32904:	movsxd rsi,edx
   32907:	mov    r9,QWORD PTR [rcx+rsi*8]
   3290b:	test   r9,r9
   3290e:	je     329c8 <ReadSeq+0x228>
   32914:	mov    r10d,DWORD PTR [rax+0x18]
   32918:	mov    rax,QWORD PTR [rax]
   3291b:	lea    rcx,[rbx+0x160]
   32922:	mov    rdx,r9
   32925:	mov    rdi,QWORD PTR [rax+rsi*8]
   32929:	mov    esi,r10d
   3292c:	call   24f30 <MakeDealignedString>
   32931:	mov    rax,QWORD PTR [r15+0xa0]
   32938:	mov    ecx,DWORD PTR [rbx]
   3293a:	mov    edx,DWORD PTR [rax+0x160]
   32940:	or     ch,0x4
   32943:	add    edx,0x1
   32946:	mov    DWORD PTR [rax+0x160],edx
   3294c:	mov    rdx,QWORD PTR [r15+0x70]
   32950:	mov    eax,DWORD PTR [r15+0x88]
   32957:	mov    DWORD PTR [rbx+0x144],eax
   3295d:	mov    eax,ecx
   3295f:	xor    r12d,r12d
   32962:	or     eax,0x40
   32965:	mov    DWORD PTR [rbx],eax
   32967:	mov    eax,DWORD PTR [rip+0x2fa03]        # 62370 <squid_errno>
   3296d:	mov    QWORD PTR [rbp+0x0],rdx
   32971:	test   eax,eax
   32973:	sete   r12b
   32977:	add    rsp,0x8
   3297b:	mov    eax,r12d
   3297e:	pop    rbx
   3297f:	pop    rbp
   32980:	pop    r12
   32982:	pop    r13
   32984:	pop    r14
   32986:	pop    r15
   32988:	ret    
   32989:	nop    DWORD PTR [rax+0x0]
   32990:	call   2b230 <MSAFree>
   32995:	mov    rdi,QWORD PTR [r15+0xa8]
   3299c:	call   2c2a0 <MSAFileRead>
   329a1:	mov    QWORD PTR [r15+0xa0],rax
   329a8:	mov    rdi,rax
   329ab:	test   rax,rax
   329ae:	je     32ac0 <ReadSeq+0x320>
   329b4:	mov    DWORD PTR [rax+0x160],0x0
   329be:	xor    eax,eax
   329c0:	jmp    327ed <ReadSeq+0x4d>
   329c5:	nop    DWORD PTR [rax]
   329c8:	mov    ecx,DWORD PTR [rbx]
   329ca:	jmp    32943 <ReadSeq+0x1a3>
   329cf:	nop
   329d0:	mov    rdi,QWORD PTR [rdi]
   329d3:	call   3660 <feof@plt>
   329d8:	mov    r12d,eax
   329db:	test   eax,eax
   329dd:	jne    32ac0 <ReadSeq+0x320>
   329e3:	mov    edx,DWORD PTR [r15+0x24]
   329e7:	cmp    edx,0xffffffff
   329ea:	je     32ad0 <ReadSeq+0x330>
   329f0:	cmp    DWORD PTR [r15+0x90],0x10
   329f8:	mov    QWORD PTR [r15+0x70],0x0
   32a00:	mov    QWORD PTR [r15+0x88],0x0
   32a0b:	mov    QWORD PTR [r15+0x78],rbx
   32a0f:	mov    DWORD PTR [rbx],0x0
   32a15:	ja     32b20 <ReadSeq+0x380>
   32a1b:	mov    eax,DWORD PTR [r15+0x90]
   32a22:	lea    rcx,[rip+0xfa53]        # 4247c <CSWTCH.18+0xdbc>
   32a29:	movsxd rax,DWORD PTR [rcx+rax*4]
   32a2d:	add    rax,rcx
   32a30:	notrack jmp rax
   32a33:	nop    DWORD PTR [rax+rax*1+0x0]
   32a38:	mov    rdi,r15
   32a3b:	call   31a80 <SeqfileGetLine>
   32a40:	mov    rdi,QWORD PTR [r15]
   32a43:	call   3660 <feof@plt>
   32a48:	test   eax,eax
   32a4a:	jne    32a5b <ReadSeq+0x2bb>
   32a4c:	mov    rax,QWORD PTR [r15+0x18]
   32a50:	movzx  eax,BYTE PTR [rax]
   32a53:	test   al,al
   32a55:	je     32a38 <ReadSeq+0x298>
   32a57:	cmp    al,0x3b
   32a59:	je     32a38 <ReadSeq+0x298>
   32a5b:	mov    rdi,QWORD PTR [r15]
   32a5e:	call   3660 <feof@plt>
   32a63:	test   eax,eax
   32a65:	jne    32a81 <ReadSeq+0x2e1>
   32a67:	jmp    336ad <ReadSeq+0xf0d>
   32a6c:	nop    DWORD PTR [rax+0x0]
   32a70:	mov    rax,QWORD PTR [r15+0x18]
   32a74:	cmp    BYTE PTR [rax],0x3b
   32a77:	je     32a90 <ReadSeq+0x2f0>
   32a79:	mov    rdi,r15
   32a7c:	call   31a80 <SeqfileGetLine>
   32a81:	mov    rdi,QWORD PTR [r15]
   32a84:	call   3660 <feof@plt>
   32a89:	test   eax,eax
   32a8b:	je     32a70 <ReadSeq+0x2d0>
   32a8d:	nop    DWORD PTR [rax]
   32a90:	mov    rdx,QWORD PTR [r15+0x70]
   32a94:	movsxd rax,DWORD PTR [r15+0x88]
   32a9b:	test   rdx,rdx
   32a9e:	je     32aaf <ReadSeq+0x30f>
   32aa0:	mov    BYTE PTR [rdx+rax*1],0x0
   32aa4:	mov    rdx,QWORD PTR [r15+0x70]
   32aa8:	mov    eax,DWORD PTR [r15+0x88]
   32aaf:	mov    ecx,DWORD PTR [rbx]
   32ab1:	jmp    32957 <ReadSeq+0x1b7>
   32ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32ac0:	xor    r12d,r12d
   32ac3:	jmp    32977 <ReadSeq+0x1d7>
   32ac8:	nop    DWORD PTR [rax+rax*1+0x0]
   32ad0:	mov    esi,0x1
   32ad5:	mov    edi,0x1f5
   32ada:	call   3630 <calloc@plt>
   32adf:	cmp    DWORD PTR [r15+0x90],0x10
   32ae7:	mov    QWORD PTR [r15+0x78],rbx
   32aeb:	mov    QWORD PTR [r15+0x70],rax
   32aef:	movabs rax,0x1f400000000
   32af9:	mov    QWORD PTR [r15+0x88],rax
   32b00:	mov    DWORD PTR [rbx],0x0
   32b06:	ja     32b20 <ReadSeq+0x380>
   32b08:	mov    eax,DWORD PTR [r15+0x90]
   32b0f:	lea    rdx,[rip+0xf9aa]        # 424c0 <CSWTCH.18+0xe00>
   32b16:	movsxd rax,DWORD PTR [rdx+rax*4]
   32b1a:	add    rax,rdx
   32b1d:	notrack jmp rax
   32b20:	mov    DWORD PTR [rip+0x2f846],0x5        # 62370 <squid_errno>
   32b2a:	mov    rdi,QWORD PTR [r15+0x70]
   32b2e:	call   3460 <free@plt>
   32b33:	jmp    32977 <ReadSeq+0x1d7>
   32b38:	nop    DWORD PTR [rax+rax*1+0x0]
   32b40:	mov    rsi,QWORD PTR [r15+0x18]
   32b44:	mov    edx,0x2
   32b49:	lea    rdi,[rip+0xf640]        # 42190 <CSWTCH.18+0xad0>
   32b50:	call   2a780 <Strparse>
   32b55:	test   eax,eax
   32b57:	je     33641 <ReadSeq+0xea1>
   32b5d:	mov    rsi,QWORD PTR [rip+0x2f7c4]        # 62328 <sqd_parse+0x8>
   32b64:	test   rsi,rsi
   32b67:	je     32b77 <ReadSeq+0x3d7>
   32b69:	mov    rdi,QWORD PTR [r15+0x78]
   32b6d:	mov    edx,0x1
   32b72:	call   31f60 <SetSeqinfoString.part.0>
   32b77:	mov    rdi,QWORD PTR [rip+0x2f7b2]        # 62330 <sqd_parse+0x10>
   32b7e:	xor    esi,esi
   32b80:	mov    edx,0xa
   32b85:	call   3670 <strtol@plt>
   32b8a:	mov    rdi,r15
   32b8d:	mov    r12,rax
   32b90:	call   31a80 <SeqfileGetLine>
   32b95:	mov    rsi,QWORD PTR [r15+0x18]
   32b99:	test   rsi,rsi
   32b9c:	je     32bac <ReadSeq+0x40c>
   32b9e:	mov    rdi,QWORD PTR [r15+0x78]
   32ba2:	mov    edx,0x8
   32ba7:	call   31f60 <SetSeqinfoString.part.0>
   32bac:	mov    rdi,QWORD PTR [r15+0x70]
   32bb0:	cmp    r12d,DWORD PTR [r15+0x8c]
   32bb7:	jge    33715 <ReadSeq+0xf75>
   32bbd:	mov    eax,r12d
   32bc0:	lea    r13d,[r12+0x6]
   32bc5:	mov    rcx,QWORD PTR [r15]
   32bc8:	mov    esi,0x1
   32bcd:	add    eax,0x3
   32bd0:	cmovns r13d,eax
   32bd4:	sar    r13d,0x2
   32bd8:	movsxd r13,r13d
   32bdb:	mov    rdx,r13
   32bde:	call   3500 <fread@plt>
   32be3:	cmp    r13,rax
   32be6:	ja     33702 <ReadSeq+0xf62>
   32bec:	mov    DWORD PTR [r15+0x88],r12d
   32bf3:	mov    rdi,QWORD PTR [r15+0x70]
   32bf7:	mov    esi,r12d
   32bfa:	call   32700 <GCGBinaryToSequence>
   32bff:	jmp    32c1d <ReadSeq+0x47d>
   32c01:	nop    DWORD PTR [rax+0x0]
   32c08:	mov    rax,QWORD PTR [r15+0x18]
   32c0c:	cmp    BYTE PTR [rax],0x3e
   32c0f:	je     32a90 <ReadSeq+0x2f0>
   32c15:	mov    rdi,r15
   32c18:	call   31a80 <SeqfileGetLine>
   32c1d:	mov    rdi,QWORD PTR [r15]
   32c20:	call   3660 <feof@plt>
   32c25:	test   eax,eax
   32c27:	je     32c08 <ReadSeq+0x468>
   32c29:	jmp    32a90 <ReadSeq+0x2f0>
   32c2e:	xchg   ax,ax
   32c30:	lea    r12,[rip+0xf03d]        # 41c74 <CSWTCH.18+0x5b4>
   32c37:	jmp    32c5f <ReadSeq+0x4bf>
   32c39:	nop    DWORD PTR [rax+0x0]
   32c40:	mov    rsi,QWORD PTR [r15+0x18]
   32c44:	mov    ecx,0x5
   32c49:	mov    rdi,r12
   32c4c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   32c4e:	seta   al
   32c51:	sbb    al,0x0
   32c53:	test   al,al
   32c55:	je     32c6b <ReadSeq+0x4cb>
   32c57:	mov    rdi,r15
   32c5a:	call   31a80 <SeqfileGetLine>
   32c5f:	mov    rdi,QWORD PTR [r15]
   32c62:	call   3660 <feof@plt>
   32c67:	test   eax,eax
   32c69:	je     32c40 <ReadSeq+0x4a0>
   32c6b:	mov    rdi,QWORD PTR [r15]
   32c6e:	call   3660 <feof@plt>
   32c73:	test   eax,eax
   32c75:	jne    32a90 <ReadSeq+0x2f0>
   32c7b:	mov    edx,DWORD PTR [r15+0x24]
   32c7f:	test   edx,edx
   32c81:	js     32c8e <ReadSeq+0x4ee>
   32c83:	movdqu xmm3,XMMWORD PTR [r15+0x28]
   32c89:	movups XMMWORD PTR [r15+0x38],xmm3
   32c8e:	mov    rax,QWORD PTR [r15+0x18]
   32c92:	lea    rsi,[rip+0xeff7]        # 41c90 <CSWTCH.18+0x5d0>
   32c99:	lea    rdi,[rax+0xf]
   32c9d:	call   3770 <strtok@plt>
   32ca2:	mov    r12,rax
   32ca5:	test   rax,rax
   32ca8:	je     32ccc <ReadSeq+0x52c>
   32caa:	mov    rdi,QWORD PTR [r15+0x78]
   32cae:	mov    edx,0x1
   32cb3:	mov    rsi,rax
   32cb6:	call   31f60 <SetSeqinfoString.part.0>
   32cbb:	mov    rdi,QWORD PTR [r15+0x78]
   32cbf:	mov    edx,0x2
   32cc4:	mov    rsi,r12
   32cc7:	call   31f60 <SetSeqinfoString.part.0>
   32ccc:	lea    r14,[rip+0xefcc]        # 41c9f <CSWTCH.18+0x5df>
   32cd3:	lea    r13,[rip+0xeffb]        # 41cd5 <CSWTCH.18+0x615>
   32cda:	lea    r12,[rip+0xf070]        # 41d51 <CSWTCH.18+0x691>
   32ce1:	jmp    32d3d <ReadSeq+0x59d>
   32ce3:	nop    DWORD PTR [rax+rax*1+0x0]
   32ce8:	mov    rdi,QWORD PTR [r15]
   32ceb:	call   3660 <feof@plt>
   32cf0:	test   eax,eax
   32cf2:	jne    32d12 <ReadSeq+0x572>
   32cf4:	mov    rdx,QWORD PTR [r15+0x18]
   32cf8:	mov    ecx,0x9
   32cfd:	mov    rdi,r14
   32d00:	mov    rsi,rdx
   32d03:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   32d05:	seta   al
   32d08:	sbb    al,0x0
   32d0a:	test   al,al
   32d0c:	je     33500 <ReadSeq+0xd60>
   32d12:	mov    rdi,QWORD PTR [r15]
   32d15:	call   3660 <feof@plt>
   32d1a:	test   eax,eax
   32d1c:	jne    33590 <ReadSeq+0xdf0>
   32d22:	mov    rsi,QWORD PTR [r15+0x18]
   32d26:	mov    ecx,0x8
   32d2b:	mov    rdi,r12
   32d2e:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   32d30:	seta   al
   32d33:	sbb    al,0x0
   32d35:	test   al,al
   32d37:	je     33590 <ReadSeq+0xdf0>
   32d3d:	mov    rdi,r15
   32d40:	call   31a80 <SeqfileGetLine>
   32d45:	mov    rdi,QWORD PTR [r15]
   32d48:	call   3660 <feof@plt>
   32d4d:	test   eax,eax
   32d4f:	jne    32ce8 <ReadSeq+0x548>
   32d51:	mov    rdx,QWORD PTR [r15+0x18]
   32d55:	mov    ecx,0x5
   32d5a:	mov    rdi,r13
   32d5d:	mov    rsi,rdx
   32d60:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   32d62:	seta   al
   32d65:	sbb    al,0x0
   32d67:	test   al,al
   32d69:	jne    32ce8 <ReadSeq+0x548>
   32d6f:	mov    rdi,QWORD PTR [r15+0x78]
   32d73:	lea    rsi,[rdx+0xf]
   32d77:	mov    edx,0x8
   32d7c:	call   31f60 <SetSeqinfoString.part.0>
   32d81:	jmp    32d12 <ReadSeq+0x572>
   32d83:	nop    DWORD PTR [rax+rax*1+0x0]
   32d88:	lea    r12,[rip+0xeef1]        # 41c80 <CSWTCH.18+0x5c0>
   32d8f:	jmp    32da0 <ReadSeq+0x600>
   32d91:	nop    DWORD PTR [rax+0x0]
   32d98:	mov    rdi,r15
   32d9b:	call   31a80 <SeqfileGetLine>
   32da0:	mov    rdi,QWORD PTR [r15]
   32da3:	call   3660 <feof@plt>
   32da8:	test   eax,eax
   32daa:	jne    334b8 <ReadSeq+0xd18>
   32db0:	mov    rax,QWORD PTR [r15+0x18]
   32db4:	cmp    BYTE PTR [rax],0x3b
   32db7:	jne    334b8 <ReadSeq+0xd18>
   32dbd:	mov    ecx,0xe
   32dc2:	mov    rsi,rax
   32dc5:	mov    rdi,r12
   32dc8:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   32dca:	seta   dl
   32dcd:	sbb    dl,0x0
   32dd0:	test   dl,dl
   32dd2:	jne    32d98 <ReadSeq+0x5f8>
   32dd4:	lea    rsi,[rip+0xeeb4]        # 41c8f <CSWTCH.18+0x5cf>
   32ddb:	lea    rdi,[rax+0x10]
   32ddf:	call   3770 <strtok@plt>
   32de4:	mov    rsi,rax
   32de7:	test   rax,rax
   32dea:	je     32d98 <ReadSeq+0x5f8>
   32dec:	mov    rdi,QWORD PTR [r15+0x78]
   32df0:	mov    edx,0x1
   32df5:	call   31f60 <SetSeqinfoString.part.0>
   32dfa:	jmp    32d98 <ReadSeq+0x5f8>
   32dfc:	nop    DWORD PTR [rax+0x0]
   32e00:	mov    rdi,r15
   32e03:	call   31a80 <SeqfileGetLine>
   32e08:	mov    rax,QWORD PTR [r15+0x18]
   32e0c:	lea    rsi,[rip+0xeeb9]        # 41ccc <CSWTCH.18+0x60c>
   32e13:	lea    rdi,[rax+0x6]
   32e17:	call   3770 <strtok@plt>
   32e1c:	mov    rsi,rax
   32e1f:	test   rax,rax
   32e22:	je     32e32 <ReadSeq+0x692>
   32e24:	mov    rdi,QWORD PTR [r15+0x78]
   32e28:	mov    edx,0x1
   32e2d:	call   31f60 <SetSeqinfoString.part.0>
   32e32:	lea    rsi,[rip+0xee95]        # 41cce <CSWTCH.18+0x60e>
   32e39:	xor    edi,edi
   32e3b:	call   3770 <strtok@plt>
   32e40:	mov    rsi,rax
   32e43:	test   rax,rax
   32e46:	je     32e56 <ReadSeq+0x6b6>
   32e48:	mov    rdi,QWORD PTR [r15+0x78]
   32e4c:	mov    edx,0x8
   32e51:	call   31f60 <SetSeqinfoString.part.0>
   32e56:	mov    rdx,r15
   32e59:	lea    rsi,[rip+0xffffffffffffec00]        # 31a60 <endZuker>
   32e60:	xor    edi,edi
   32e62:	call   31d10 <readLoop>
   32e67:	jmp    32e78 <ReadSeq+0x6d8>
   32e69:	nop    DWORD PTR [rax+0x0]
   32e70:	mov    rdi,r15
   32e73:	call   31a80 <SeqfileGetLine>
   32e78:	mov    rdi,QWORD PTR [r15]
   32e7b:	call   3660 <feof@plt>
   32e80:	mov    rdx,QWORD PTR [r15+0x18]
   32e84:	cmp    BYTE PTR [rdx],0x28
   32e87:	sete   dl
   32e8a:	movzx  edx,dl
   32e8d:	or     edx,eax
   32e8f:	je     32e70 <ReadSeq+0x6d0>
   32e91:	jmp    32a90 <ReadSeq+0x2f0>
   32e96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32ea0:	lea    r13,[rip+0xe579]        # 41420 <gki_primes+0x9a0>
   32ea7:	jmp    32ec8 <ReadSeq+0x728>
   32ea9:	nop    DWORD PTR [rax+0x0]
   32eb0:	mov    rdi,r15
   32eb3:	call   31a80 <SeqfileGetLine>
   32eb8:	mov    rdi,QWORD PTR [r15]
   32ebb:	call   3660 <feof@plt>
   32ec0:	test   eax,eax
   32ec2:	jne    32a90 <ReadSeq+0x2f0>
   32ec8:	mov    r12,QWORD PTR [r15+0x18]
   32ecc:	mov    rsi,r13
   32ecf:	mov    rdi,r12
   32ed2:	call   37f0 <strstr@plt>
   32ed7:	test   rax,rax
   32eda:	je     32eb0 <ReadSeq+0x710>
   32edc:	mov    DWORD PTR [r15+0x88],0x0
   32ee7:	lea    rsi,[rip+0xee21]        # 41d0f <CSWTCH.18+0x64f>
   32eee:	mov    rdi,r12
   32ef1:	call   37f0 <strstr@plt>
   32ef6:	test   rax,rax
   32ef9:	je     333f0 <ReadSeq+0xc50>
   32eff:	mov    BYTE PTR [rax],0x0
   32f02:	mov    r12,QWORD PTR [r15+0x18]
   32f06:	lea    rsi,[rip+0xed83]        # 41c90 <CSWTCH.18+0x5d0>
   32f0d:	mov    rdi,r12
   32f10:	call   3770 <strtok@plt>
   32f15:	mov    rsi,rax
   32f18:	test   rax,rax
   32f1b:	je     32f30 <ReadSeq+0x790>
   32f1d:	mov    rdi,QWORD PTR [r15+0x78]
   32f21:	mov    edx,0x1
   32f26:	call   31f60 <SetSeqinfoString.part.0>
   32f2b:	nop    DWORD PTR [rax+rax*1+0x0]
   32f30:	mov    rdi,QWORD PTR [r15]
   32f33:	call   3660 <feof@plt>
   32f38:	mov    rdi,r15
   32f3b:	mov    r12d,eax
   32f3e:	call   31a80 <SeqfileGetLine>
   32f43:	test   r12d,r12d
   32f46:	jne    32eb0 <ReadSeq+0x710>
   32f4c:	mov    rdi,QWORD PTR [r15+0x18]
   32f50:	mov    rsi,r15
   32f53:	call   31b20 <addseq>
   32f58:	jmp    32f30 <ReadSeq+0x790>
   32f5a:	nop    WORD PTR [rax+rax*1+0x0]
   32f60:	lea    r12,[rip+0xed59]        # 41cc0 <CSWTCH.18+0x600>
   32f67:	jmp    32f8e <ReadSeq+0x7ee>
   32f69:	nop    DWORD PTR [rax+0x0]
   32f70:	mov    ecx,0x4
   32f75:	mov    rsi,rdx
   32f78:	mov    rdi,r12
   32f7b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   32f7d:	seta   al
   32f80:	sbb    al,0x0
   32f82:	test   al,al
   32f84:	je     32f9e <ReadSeq+0x7fe>
   32f86:	mov    rdi,r15
   32f89:	call   31a80 <SeqfileGetLine>
   32f8e:	mov    rdi,QWORD PTR [r15]
   32f91:	call   3660 <feof@plt>
   32f96:	mov    rdx,QWORD PTR [r15+0x18]
   32f9a:	test   eax,eax
   32f9c:	je     32f70 <ReadSeq+0x7d0>
   32f9e:	mov    ecx,DWORD PTR [r15+0x24]
   32fa2:	test   ecx,ecx
   32fa4:	js     32fb1 <ReadSeq+0x811>
   32fa6:	movdqu xmm2,XMMWORD PTR [r15+0x28]
   32fac:	movups XMMWORD PTR [r15+0x38],xmm2
   32fb1:	lea    rdi,[rdx+0x5]
   32fb5:	lea    rsi,[rip+0xecd4]        # 41c90 <CSWTCH.18+0x5d0>
   32fbc:	call   3770 <strtok@plt>
   32fc1:	mov    r12,rax
   32fc4:	test   rax,rax
   32fc7:	je     32feb <ReadSeq+0x84b>
   32fc9:	mov    rdi,QWORD PTR [r15+0x78]
   32fcd:	mov    edx,0x1
   32fd2:	mov    rsi,rax
   32fd5:	call   31f60 <SetSeqinfoString.part.0>
   32fda:	mov    rdi,QWORD PTR [r15+0x78]
   32fde:	mov    edx,0x2
   32fe3:	mov    rsi,r12
   32fe6:	call   31f60 <SetSeqinfoString.part.0>
   32feb:	lea    r12,[rip+0xecd3]        # 41cc5 <CSWTCH.18+0x605>
   32ff2:	lea    r13,[rip+0xecd7]        # 41cd0 <CSWTCH.18+0x610>
   32ff9:	nop    DWORD PTR [rax+0x0]
   33000:	mov    rdi,r15
   33003:	call   31a80 <SeqfileGetLine>
   33008:	mov    rdi,QWORD PTR [r15]
   3300b:	call   3660 <feof@plt>
   33010:	test   eax,eax
   33012:	jne    33032 <ReadSeq+0x892>
   33014:	mov    rdx,QWORD PTR [r15+0x18]
   33018:	mov    ecx,0x4
   3301d:	mov    rdi,r12
   33020:	mov    rsi,rdx
   33023:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33025:	seta   al
   33028:	sbb    al,0x0
   3302a:	test   al,al
   3302c:	je     33448 <ReadSeq+0xca8>
   33032:	mov    rdi,QWORD PTR [r15]
   33035:	call   3660 <feof@plt>
   3303a:	test   eax,eax
   3303c:	jne    3305c <ReadSeq+0x8bc>
   3303e:	mov    rdx,QWORD PTR [r15+0x18]
   33042:	mov    ecx,0x4
   33047:	mov    rdi,r13
   3304a:	mov    rsi,rdx
   3304d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3304f:	seta   al
   33052:	sbb    al,0x0
   33054:	test   al,al
   33056:	je     33530 <ReadSeq+0xd90>
   3305c:	mov    rdi,QWORD PTR [r15]
   3305f:	call   3660 <feof@plt>
   33064:	test   eax,eax
   33066:	jne    33077 <ReadSeq+0x8d7>
   33068:	mov    rax,QWORD PTR [r15+0x18]
   3306c:	cmp    BYTE PTR [rax],0x53
   3306f:	jne    33000 <ReadSeq+0x860>
   33071:	cmp    BYTE PTR [rax+0x1],0x51
   33075:	jne    33000 <ReadSeq+0x860>
   33077:	xor    edi,edi
   33079:	mov    rdx,r15
   3307c:	lea    rsi,[rip+0xffffffffffffedbd]        # 31e40 <endEMBL>
   33083:	call   31d10 <readLoop>
   33088:	cmp    DWORD PTR [r15+0x24],0xffffffff
   3308d:	je     33614 <ReadSeq+0xe74>
   33093:	mov    rax,QWORD PTR [r15+0x78]
   33097:	mov    edx,DWORD PTR [r15+0x88]
   3309e:	lea    r12,[rip+0xec1b]        # 41cc0 <CSWTCH.18+0x600>
   330a5:	or     DWORD PTR [rax],0x130
   330ab:	mov    DWORD PTR [rax+0x148],0x1
   330b5:	mov    DWORD PTR [rax+0x14c],edx
   330bb:	mov    DWORD PTR [rax+0x150],edx
   330c1:	jmp    330eb <ReadSeq+0x94b>
   330c3:	nop    DWORD PTR [rax+rax*1+0x0]
   330c8:	mov    rsi,QWORD PTR [r15+0x18]
   330cc:	mov    ecx,0x4
   330d1:	mov    rdi,r12
   330d4:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   330d6:	seta   al
   330d9:	sbb    al,0x0
   330db:	test   al,al
   330dd:	je     32a90 <ReadSeq+0x2f0>
   330e3:	mov    rdi,r15
   330e6:	call   31a80 <SeqfileGetLine>
   330eb:	mov    rdi,QWORD PTR [r15]
   330ee:	call   3660 <feof@plt>
   330f3:	test   eax,eax
   330f5:	je     330c8 <ReadSeq+0x928>
   330f7:	jmp    32a90 <ReadSeq+0x2f0>
   330fc:	nop    DWORD PTR [rax+0x0]
   33100:	lea    r13,[rip+0xeb73]        # 41c7a <CSWTCH.18+0x5ba>
   33107:	jmp    33118 <ReadSeq+0x978>
   33109:	nop    DWORD PTR [rax+0x0]
   33110:	mov    rdi,r15
   33113:	call   31a80 <SeqfileGetLine>
   33118:	mov    rax,QWORD PTR [r15+0x18]
   3311c:	mov    ecx,0x5
   33121:	mov    rdi,r13
   33124:	mov    rsi,rax
   33127:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33129:	seta   r12b
   3312d:	sbb    r12b,0x0
   33131:	movsx  r12d,r12b
   33135:	test   r12d,r12d
   33138:	jne    33110 <ReadSeq+0x970>
   3313a:	mov    esi,DWORD PTR [r15+0x24]
   3313e:	test   esi,esi
   33140:	js     3314d <ReadSeq+0x9ad>
   33142:	movdqu xmm0,XMMWORD PTR [r15+0x28]
   33148:	movups XMMWORD PTR [r15+0x38],xmm0
   3314d:	lea    rsi,[rip+0xeb3c]        # 41c90 <CSWTCH.18+0x5d0>
   33154:	lea    rdi,[rax+0xc]
   33158:	call   3770 <strtok@plt>
   3315d:	mov    rsi,rax
   33160:	test   rax,rax
   33163:	je     33173 <ReadSeq+0x9d3>
   33165:	mov    rdi,QWORD PTR [r15+0x78]
   33169:	mov    edx,0x1
   3316e:	call   31f60 <SetSeqinfoString.part.0>
   33173:	lea    r14,[rip+0xeb37]        # 41cb1 <CSWTCH.18+0x5f1>
   3317a:	nop    WORD PTR [rax+rax*1+0x0]
   33180:	mov    rdi,QWORD PTR [r15]
   33183:	call   3660 <feof@plt>
   33188:	test   eax,eax
   3318a:	jne    33254 <ReadSeq+0xab4>
   33190:	mov    rdi,r15
   33193:	call   31a80 <SeqfileGetLine>
   33198:	mov    rdi,QWORD PTR [r15]
   3319b:	call   3660 <feof@plt>
   331a0:	test   eax,eax
   331a2:	jne    331c6 <ReadSeq+0xa26>
   331a4:	mov    rdx,QWORD PTR [r15+0x18]
   331a8:	mov    ecx,0xa
   331ad:	lea    rdi,[rip+0xeae0]        # 41c94 <CSWTCH.18+0x5d4>
   331b4:	mov    rsi,rdx
   331b7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   331b9:	seta   al
   331bc:	sbb    al,0x0
   331be:	test   al,al
   331c0:	je     33410 <ReadSeq+0xc70>
   331c6:	mov    rdi,QWORD PTR [r15]
   331c9:	call   3660 <feof@plt>
   331ce:	test   eax,eax
   331d0:	jne    331f4 <ReadSeq+0xa54>
   331d2:	mov    rdx,QWORD PTR [r15+0x18]
   331d6:	mov    ecx,0x9
   331db:	lea    rdi,[rip+0xeabd]        # 41c9f <CSWTCH.18+0x5df>
   331e2:	mov    rsi,rdx
   331e5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   331e7:	seta   al
   331ea:	sbb    al,0x0
   331ec:	test   al,al
   331ee:	je     33480 <ReadSeq+0xce0>
   331f4:	mov    rdi,QWORD PTR [r15]
   331f7:	call   3660 <feof@plt>
   331fc:	mov    r9,QWORD PTR [r15+0x18]
   33200:	test   eax,eax
   33202:	jne    33222 <ReadSeq+0xa82>
   33204:	mov    ecx,0x7
   33209:	mov    rsi,r9
   3320c:	lea    rdi,[rip+0xea96]        # 41ca9 <CSWTCH.18+0x5e9>
   33213:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33215:	seta   al
   33218:	sbb    al,0x0
   3321a:	test   al,al
   3321c:	je     33560 <ReadSeq+0xdc0>
   33222:	mov    ecx,0x6
   33227:	mov    rsi,r9
   3322a:	mov    rdi,r14
   3322d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3322f:	seta   al
   33232:	sbb    al,0x0
   33234:	test   al,al
   33236:	je     33254 <ReadSeq+0xab4>
   33238:	test   r12d,r12d
   3323b:	jne    333d0 <ReadSeq+0xc30>
   33241:	mov    rdi,QWORD PTR [r15]
   33244:	xor    r12d,r12d
   33247:	call   3660 <feof@plt>
   3324c:	test   eax,eax
   3324e:	je     33190 <ReadSeq+0x9f0>
   33254:	mov    rdx,r15
   33257:	lea    rsi,[rip+0xffffffffffffecb2]        # 31f10 <endGB>
   3325e:	xor    edi,edi
   33260:	call   31d10 <readLoop>
   33265:	mov    rax,QWORD PTR [r15+0x78]
   33269:	mov    edx,DWORD PTR [r15+0x88]
   33270:	mov    DWORD PTR [rax+0x148],0x1
   3327a:	or     DWORD PTR [rax],0x130
   33280:	mov    DWORD PTR [rax+0x14c],edx
   33286:	mov    DWORD PTR [rax+0x150],edx
   3328c:	jmp    332b4 <ReadSeq+0xb14>
   3328e:	xchg   ax,ax
   33290:	mov    rsi,QWORD PTR [r15+0x18]
   33294:	cmp    BYTE PTR [rsi],0x0
   33297:	je     332ac <ReadSeq+0xb0c>
   33299:	mov    ecx,0x5
   3329e:	mov    rdi,r13
   332a1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   332a3:	seta   al
   332a6:	sbb    al,0x0
   332a8:	test   al,al
   332aa:	je     332c0 <ReadSeq+0xb20>
   332ac:	mov    rdi,r15
   332af:	call   31a80 <SeqfileGetLine>
   332b4:	mov    rdi,QWORD PTR [r15]
   332b7:	call   3660 <feof@plt>
   332bc:	test   eax,eax
   332be:	je     33290 <ReadSeq+0xaf0>
   332c0:	lea    r12,[rip+0xe9f1]        # 41cb8 <CSWTCH.18+0x5f8>
   332c7:	jmp    332f3 <ReadSeq+0xb53>
   332c9:	nop    DWORD PTR [rax+0x0]
   332d0:	mov    rsi,QWORD PTR [r15+0x18]
   332d4:	mov    ecx,0x7
   332d9:	mov    rdi,r12
   332dc:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   332de:	seta   al
   332e1:	sbb    al,0x0
   332e3:	test   al,al
   332e5:	je     32a90 <ReadSeq+0x2f0>
   332eb:	mov    rdi,r15
   332ee:	call   31a80 <SeqfileGetLine>
   332f3:	mov    rdi,QWORD PTR [r15]
   332f6:	call   3660 <feof@plt>
   332fb:	test   eax,eax
   332fd:	je     332d0 <ReadSeq+0xb30>
   332ff:	jmp    32a90 <ReadSeq+0x2f0>
   33304:	nop    DWORD PTR [rax+0x0]
   33308:	test   edx,edx
   3330a:	js     33317 <ReadSeq+0xb77>
   3330c:	movdqu xmm1,XMMWORD PTR [r15+0x28]
   33312:	movups XMMWORD PTR [r15+0x38],xmm1
   33317:	mov    rdi,QWORD PTR [r15+0x18]
   3331b:	cmp    BYTE PTR [rdi],0x3e
   3331e:	je     3333a <ReadSeq+0xb9a>
   33320:	mov    edx,DWORD PTR [r15+0x10]
   33324:	mov    rsi,QWORD PTR [r15+0x8]
   33328:	lea    rdi,[rip+0xedb1]        # 420e0 <CSWTCH.18+0xa20>
   3332f:	xor    eax,eax
   33331:	call   317f0 <Die>
   33336:	mov    rdi,QWORD PTR [r15+0x18]
   3333a:	lea    rsi,[rip+0xe94f]        # 41c90 <CSWTCH.18+0x5d0>
   33341:	add    rdi,0x1
   33345:	call   3770 <strtok@plt>
   3334a:	mov    rsi,rax
   3334d:	test   rax,rax
   33350:	je     33360 <ReadSeq+0xbc0>
   33352:	mov    rdi,QWORD PTR [r15+0x78]
   33356:	mov    edx,0x1
   3335b:	call   31f60 <SetSeqinfoString.part.0>
   33360:	lea    rsi,[rip+0xe967]        # 41cce <CSWTCH.18+0x60e>
   33367:	xor    edi,edi
   33369:	call   3770 <strtok@plt>
   3336e:	mov    rsi,rax
   33371:	test   rax,rax
   33374:	je     33384 <ReadSeq+0xbe4>
   33376:	mov    rdi,QWORD PTR [r15+0x78]
   3337a:	mov    edx,0x8
   3337f:	call   31f60 <SetSeqinfoString.part.0>
   33384:	mov    rdx,r15
   33387:	lea    rsi,[rip+0xffffffffffffeeb2]        # 32240 <endPearson>
   3338e:	xor    edi,edi
   33390:	call   31d10 <readLoop>
   33395:	jmp    333b5 <ReadSeq+0xc15>
   33397:	nop    WORD PTR [rax+rax*1+0x0]
   333a0:	mov    rax,QWORD PTR [r15+0x18]
   333a4:	cmp    BYTE PTR [rax],0x3e
   333a7:	je     32a90 <ReadSeq+0x2f0>
   333ad:	mov    rdi,r15
   333b0:	call   31a80 <SeqfileGetLine>
   333b5:	mov    rdi,QWORD PTR [r15]
   333b8:	call   3660 <feof@plt>
   333bd:	test   eax,eax
   333bf:	je     333a0 <ReadSeq+0xc00>
   333c1:	jmp    32a90 <ReadSeq+0x2f0>
   333c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   333d0:	mov    rdi,QWORD PTR [r15+0x78]
   333d4:	mov    edx,0x8
   333d9:	mov    rsi,r9
   333dc:	call   31f60 <SetSeqinfoString.part.0>
   333e1:	jmp    33180 <ReadSeq+0x9e0>
   333e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   333f0:	mov    rsi,r13
   333f3:	mov    rdi,r12
   333f6:	call   37f0 <strstr@plt>
   333fb:	test   rax,rax
   333fe:	jne    32eff <ReadSeq+0x75f>
   33404:	jmp    32f06 <ReadSeq+0x766>
   33409:	nop    DWORD PTR [rax+0x0]
   33410:	lea    rsi,[rip+0xe8b7]        # 41cce <CSWTCH.18+0x60e>
   33417:	lea    rdi,[rdx+0xc]
   3341b:	mov    r12d,0x1
   33421:	call   3770 <strtok@plt>
   33426:	mov    rsi,rax
   33429:	test   rax,rax
   3342c:	je     33180 <ReadSeq+0x9e0>
   33432:	mov    rdi,QWORD PTR [r15+0x78]
   33436:	mov    edx,0x8
   3343b:	call   31f60 <SetSeqinfoString.part.0>
   33440:	jmp    33180 <ReadSeq+0x9e0>
   33445:	nop    DWORD PTR [rax]
   33448:	lea    rsi,[rip+0xe87b]        # 41cca <CSWTCH.18+0x60a>
   3344f:	lea    rdi,[rdx+0x5]
   33453:	call   3770 <strtok@plt>
   33458:	mov    rsi,rax
   3345b:	test   rax,rax
   3345e:	je     3305c <ReadSeq+0x8bc>
   33464:	mov    rdi,QWORD PTR [r15+0x78]
   33468:	mov    edx,0x4
   3346d:	call   31f60 <SetSeqinfoString.part.0>
   33472:	jmp    3305c <ReadSeq+0x8bc>
   33477:	nop    WORD PTR [rax+rax*1+0x0]
   33480:	lea    rsi,[rip+0xe809]        # 41c90 <CSWTCH.18+0x5d0>
   33487:	lea    rdi,[rdx+0xc]
   3348b:	call   3770 <strtok@plt>
   33490:	mov    rsi,rax
   33493:	test   rax,rax
   33496:	je     33241 <ReadSeq+0xaa1>
   3349c:	mov    rdi,QWORD PTR [r15+0x78]
   334a0:	mov    edx,0x4
   334a5:	xor    r12d,r12d
   334a8:	call   31f60 <SetSeqinfoString.part.0>
   334ad:	jmp    33180 <ReadSeq+0x9e0>
   334b2:	nop    WORD PTR [rax+rax*1+0x0]
   334b8:	mov    rdi,QWORD PTR [r15]
   334bb:	call   3660 <feof@plt>
   334c0:	test   eax,eax
   334c2:	jne    334e5 <ReadSeq+0xd45>
   334c4:	jmp    336e9 <ReadSeq+0xf49>
   334c9:	nop    DWORD PTR [rax+0x0]
   334d0:	mov    rax,QWORD PTR [r15+0x18]
   334d4:	cmp    BYTE PTR [rax],0x3b
   334d7:	je     32a90 <ReadSeq+0x2f0>
   334dd:	mov    rdi,r15
   334e0:	call   31a80 <SeqfileGetLine>
   334e5:	mov    rdi,QWORD PTR [r15]
   334e8:	call   3660 <feof@plt>
   334ed:	test   eax,eax
   334ef:	je     334d0 <ReadSeq+0xd30>
   334f1:	jmp    32a90 <ReadSeq+0x2f0>
   334f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33500:	lea    rsi,[rip+0xe7c5]        # 41ccc <CSWTCH.18+0x60c>
   33507:	lea    rdi,[rdx+0xf]
   3350b:	call   3770 <strtok@plt>
   33510:	mov    rsi,rax
   33513:	test   rax,rax
   33516:	je     32d12 <ReadSeq+0x572>
   3351c:	mov    rdi,QWORD PTR [r15+0x78]
   33520:	mov    edx,0x4
   33525:	call   31f60 <SetSeqinfoString.part.0>
   3352a:	jmp    32d12 <ReadSeq+0x572>
   3352f:	nop
   33530:	lea    rsi,[rip+0xe797]        # 41cce <CSWTCH.18+0x60e>
   33537:	lea    rdi,[rdx+0x5]
   3353b:	call   3770 <strtok@plt>
   33540:	mov    rsi,rax
   33543:	test   rax,rax
   33546:	je     3305c <ReadSeq+0x8bc>
   3354c:	mov    rdi,QWORD PTR [r15+0x78]
   33550:	mov    edx,0x8
   33555:	call   31f60 <SetSeqinfoString.part.0>
   3355a:	jmp    3305c <ReadSeq+0x8bc>
   3355f:	nop
   33560:	lea    rsi,[rip+0xe729]        # 41c90 <CSWTCH.18+0x5d0>
   33567:	lea    rdi,[r9+0xc]
   3356b:	call   3770 <strtok@plt>
   33570:	mov    rsi,rax
   33573:	test   rax,rax
   33576:	je     33241 <ReadSeq+0xaa1>
   3357c:	mov    rdi,QWORD PTR [r15+0x78]
   33580:	mov    edx,0x2
   33585:	call   31f60 <SetSeqinfoString.part.0>
   3358a:	jmp    33241 <ReadSeq+0xaa1>
   3358f:	nop
   33590:	mov    rdi,r15
   33593:	lea    r12,[rip+0xe6da]        # 41c74 <CSWTCH.18+0x5b4>
   3359a:	call   31a80 <SeqfileGetLine>
   3359f:	mov    rdx,r15
   335a2:	lea    rsi,[rip+0xffffffffffffe8c7]        # 31e70 <endPIR>
   335a9:	xor    edi,edi
   335ab:	call   31d10 <readLoop>
   335b0:	mov    rax,QWORD PTR [r15+0x78]
   335b4:	mov    edx,DWORD PTR [r15+0x88]
   335bb:	mov    DWORD PTR [rax+0x148],0x1
   335c5:	or     DWORD PTR [rax],0x130
   335cb:	mov    DWORD PTR [rax+0x14c],edx
   335d1:	mov    DWORD PTR [rax+0x150],edx
   335d7:	jmp    33603 <ReadSeq+0xe63>
   335d9:	nop    DWORD PTR [rax+0x0]
   335e0:	mov    rsi,QWORD PTR [r15+0x18]
   335e4:	mov    ecx,0x5
   335e9:	mov    rdi,r12
   335ec:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   335ee:	seta   al
   335f1:	sbb    al,0x0
   335f3:	test   al,al
   335f5:	je     32a90 <ReadSeq+0x2f0>
   335fb:	mov    rdi,r15
   335fe:	call   31a80 <SeqfileGetLine>
   33603:	mov    rdi,QWORD PTR [r15]
   33606:	call   3660 <feof@plt>
   3360b:	test   eax,eax
   3360d:	je     335e0 <ReadSeq+0xe40>
   3360f:	jmp    32a90 <ReadSeq+0x2f0>
   33614:	mov    rax,QWORD PTR [r15+0x70]
   33618:	movzx  edx,BYTE PTR [rax]
   3361b:	test   dl,dl
   3361d:	je     33093 <ReadSeq+0x8f3>
   33623:	nop    DWORD PTR [rax+rax*1+0x0]
   33628:	cmp    dl,0x2d
   3362b:	jne    33630 <ReadSeq+0xe90>
   3362d:	mov    BYTE PTR [rax],0x4e
   33630:	movzx  edx,BYTE PTR [rax+0x1]
   33634:	add    rax,0x1
   33638:	test   dl,dl
   3363a:	jne    33628 <ReadSeq+0xe88>
   3363c:	jmp    33093 <ReadSeq+0x8f3>
   33641:	mov    rsi,QWORD PTR [r15+0x18]
   33645:	mov    edx,0x1
   3364a:	lea    rdi,[rip+0xeb67]        # 421b8 <CSWTCH.18+0xaf8>
   33651:	call   2a780 <Strparse>
   33656:	test   eax,eax
   33658:	je     33750 <ReadSeq+0xfb0>
   3365e:	mov    rsi,QWORD PTR [rip+0x2ecc3]        # 62328 <sqd_parse+0x8>
   33665:	test   rsi,rsi
   33668:	je     33678 <ReadSeq+0xed8>
   3366a:	mov    rdi,QWORD PTR [r15+0x78]
   3366e:	mov    edx,0x1
   33673:	call   31f60 <SetSeqinfoString.part.0>
   33678:	mov    rdi,r15
   3367b:	call   31a80 <SeqfileGetLine>
   33680:	mov    rsi,QWORD PTR [r15+0x18]
   33684:	test   rsi,rsi
   33687:	je     33697 <ReadSeq+0xef7>
   33689:	mov    rdi,QWORD PTR [r15+0x78]
   3368d:	mov    edx,0x8
   33692:	call   31f60 <SetSeqinfoString.part.0>
   33697:	mov    rdx,r15
   3369a:	lea    rsi,[rip+0xffffffffffffe39f]        # 31a40 <endGCGdata>
   336a1:	xor    edi,edi
   336a3:	call   31d10 <readLoop>
   336a8:	jmp    32c1d <ReadSeq+0x47d>
   336ad:	mov    rdi,QWORD PTR [r15+0x18]
   336b1:	lea    rsi,[rip+0xe5d8]        # 41c90 <CSWTCH.18+0x5d0>
   336b8:	call   3770 <strtok@plt>
   336bd:	mov    rsi,rax
   336c0:	test   rax,rax
   336c3:	je     336d3 <ReadSeq+0xf33>
   336c5:	mov    rdi,QWORD PTR [r15+0x78]
   336c9:	mov    edx,0x1
   336ce:	call   31f60 <SetSeqinfoString.part.0>
   336d3:	mov    rdx,r15
   336d6:	lea    rsi,[rip+0xffffffffffffe7e3]        # 31ec0 <endIG>
   336dd:	xor    edi,edi
   336df:	call   31d10 <readLoop>
   336e4:	jmp    32a81 <ReadSeq+0x2e1>
   336e9:	mov    rdx,r15
   336ec:	lea    rsi,[rip+0xffffffffffffe3fd]        # 31af0 <endStrider>
   336f3:	mov    edi,0x1
   336f8:	call   31d10 <readLoop>
   336fd:	jmp    334e5 <ReadSeq+0xd45>
   33702:	lea    rdi,[rip+0xe5f9]        # 41d02 <CSWTCH.18+0x642>
   33709:	xor    eax,eax
   3370b:	call   317f0 <Die>
   33710:	jmp    32bec <ReadSeq+0x44c>
   33715:	mov    DWORD PTR [r15+0x8c],r12d
   3371c:	lea    esi,[r12+0x4]
   33721:	movsxd rsi,esi
   33724:	call   36f0 <realloc@plt>
   33729:	mov    QWORD PTR [r15+0x70],rax
   3372d:	mov    rdi,rax
   33730:	test   rax,rax
   33733:	jne    32bbd <ReadSeq+0x41d>
   33739:	lea    rdi,[rip+0xe5b4]        # 41cf4 <CSWTCH.18+0x634>
   33740:	xor    eax,eax
   33742:	call   317f0 <Die>
   33747:	mov    rdi,QWORD PTR [r15+0x70]
   3374b:	jmp    32bbd <ReadSeq+0x41d>
   33750:	mov    rsi,QWORD PTR [r15+0x18]
   33754:	lea    rdi,[rip+0xe580]        # 41cdb <CSWTCH.18+0x61b>
   3375b:	xor    eax,eax
   3375d:	call   317f0 <Die>
   33762:	jmp    33678 <ReadSeq+0xed8>
   33767:	nop    WORD PTR [rax+rax*1+0x0]

0000000000033770 <GCGchecksum>:
   33770:	endbr64 
   33774:	push   r13
   33776:	push   r12
   33778:	push   rbp
   33779:	push   rbx
   3377a:	sub    rsp,0x8
   3377e:	test   esi,esi
   33780:	jle    33810 <GCGchecksum+0xa0>
   33786:	mov    rbx,rdi
   33789:	lea    ebp,[rsi-0x1]
   3378c:	xor    r13d,r13d
   3378f:	xor    r12d,r12d
   33792:	nop    WORD PTR [rax+rax*1+0x0]
   33798:	movsx  edi,BYTE PTR [rbx+r13*1]
   3379d:	call   35740 <sre_toupper>
   337a2:	mov    edx,r13d
   337a5:	imul   rdx,rdx,0x1f7047dd
   337ac:	mov    r8d,eax
   337af:	mov    eax,r13d
   337b2:	mov    rcx,rdx
   337b5:	mov    edx,r13d
   337b8:	shr    rcx,0x20
   337bc:	sub    edx,ecx
   337be:	shr    edx,1
   337c0:	add    edx,ecx
   337c2:	shr    edx,0x5
   337c5:	imul   edx,edx,0x39
   337c8:	sub    eax,edx
   337ca:	lea    eax,[rax+0x1]
   337cd:	imul   eax,r8d
   337d1:	add    eax,r12d
   337d4:	movsxd r12,eax
   337d7:	cdq    
   337d8:	imul   r12,r12,0x68db8bad
   337df:	sar    r12,0x2c
   337e3:	sub    r12d,edx
   337e6:	imul   r12d,r12d,0x2710
   337ed:	sub    eax,r12d
   337f0:	mov    r12d,eax
   337f3:	mov    rax,r13
   337f6:	add    r13,0x1
   337fa:	cmp    rax,rbp
   337fd:	jne    33798 <GCGchecksum+0x28>
   337ff:	add    rsp,0x8
   33803:	mov    eax,r12d
   33806:	pop    rbx
   33807:	pop    rbp
   33808:	pop    r12
   3380a:	pop    r13
   3380c:	ret    
   3380d:	nop    DWORD PTR [rax]
   33810:	add    rsp,0x8
   33814:	xor    r12d,r12d
   33817:	pop    rbx
   33818:	mov    eax,r12d
   3381b:	pop    rbp
   3381c:	pop    r12
   3381e:	pop    r13
   33820:	ret    
   33821:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3382c:	nop    DWORD PTR [rax+0x0]

0000000000033830 <GCGMultchecksum>:
   33830:	endbr64 
   33834:	push   r13
   33836:	push   r12
   33838:	push   rbp
   33839:	push   rbx
   3383a:	sub    rsp,0x8
   3383e:	test   esi,esi
   33840:	jle    338a0 <GCGMultchecksum+0x70>
   33842:	lea    eax,[rsi-0x1]
   33845:	mov    rbp,rdi
   33848:	xor    r12d,r12d
   3384b:	lea    rbx,[rdi+rax*8+0x8]
   33850:	mov    r13,QWORD PTR [rbp+0x0]
   33854:	add    rbp,0x8
   33858:	mov    rdi,r13
   3385b:	call   3560 <strlen@plt>
   33860:	mov    rdi,r13
   33863:	mov    rsi,rax
   33866:	call   33770 <GCGchecksum>
   3386b:	add    eax,r12d
   3386e:	movsxd r12,eax
   33871:	cdq    
   33872:	imul   r12,r12,0x68db8bad
   33879:	sar    r12,0x2c
   3387d:	sub    r12d,edx
   33880:	imul   r12d,r12d,0x2710
   33887:	sub    eax,r12d
   3388a:	mov    r12d,eax
   3388d:	cmp    rbp,rbx
   33890:	jne    33850 <GCGMultchecksum+0x20>
   33892:	add    rsp,0x8
   33896:	mov    eax,r12d
   33899:	pop    rbx
   3389a:	pop    rbp
   3389b:	pop    r12
   3389d:	pop    r13
   3389f:	ret    
   338a0:	add    rsp,0x8
   338a4:	xor    r12d,r12d
   338a7:	pop    rbx
   338a8:	mov    eax,r12d
   338ab:	pop    rbp
   338ac:	pop    r12
   338ae:	pop    r13
   338b0:	ret    
   338b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   338bc:	nop    DWORD PTR [rax+0x0]

00000000000338c0 <Seqtype>:
   338c0:	endbr64 
   338c4:	push   r15
   338c6:	mov    r15,rdi
   338c9:	push   r14
   338cb:	push   r13
   338cd:	push   r12
   338cf:	push   rbp
   338d0:	push   rbx
   338d1:	sub    rsp,0x28
   338d5:	movsx  edi,BYTE PTR [rdi]
   338d8:	test   dil,dil
   338db:	je     339f8 <Seqtype+0x138>
   338e1:	mov    DWORD PTR [rsp+0xc],0x0
   338e9:	xor    ebx,ebx
   338eb:	movabs rbp,0x8000000000006001
   338f5:	mov    DWORD PTR [rsp+0x18],0x0
   338fd:	mov    DWORD PTR [rsp+0x10],0x0
   33905:	mov    DWORD PTR [rsp+0x14],0x0
   3390d:	mov    DWORD PTR [rsp+0x1c],0x0
   33915:	mov    DWORD PTR [rsp+0x8],0x0
   3391d:	jmp    3393b <Seqtype+0x7b>
   3391f:	nop
   33920:	bt     rbp,rax
   33924:	jae    3394a <Seqtype+0x8a>
   33926:	add    r15,0x1
   3392a:	movsx  edi,BYTE PTR [r15]
   3392e:	cmp    ebx,0x12b
   33934:	jg     33980 <Seqtype+0xc0>
   33936:	test   dil,dil
   33939:	je     33980 <Seqtype+0xc0>
   3393b:	call   35740 <sre_toupper>
   33940:	mov    r12d,eax
   33943:	lea    eax,[rax-0x20]
   33946:	cmp    al,0x3f
   33948:	jbe    33920 <Seqtype+0x60>
   3394a:	cmp    r12b,0x7e
   3394e:	je     33926 <Seqtype+0x66>
   33950:	movsx  r13d,r12b
   33954:	lea    rdi,[rip+0xe3bf]        # 41d1a <CSWTCH.18+0x65a>
   3395b:	mov    esi,r13d
   3395e:	call   3590 <strchr@plt>
   33963:	test   rax,rax
   33966:	je     339c0 <Seqtype+0x100>
   33968:	add    DWORD PTR [rsp+0x8],0x1
   3396d:	add    ebx,0x1
   33970:	add    r15,0x1
   33974:	movsx  edi,BYTE PTR [r15]
   33978:	cmp    ebx,0x12b
   3397e:	jle    33936 <Seqtype+0x76>
   33980:	mov    edx,DWORD PTR [rsp+0xc]
   33984:	xor    eax,eax
   33986:	test   edx,edx
   33988:	jne    339ac <Seqtype+0xec>
   3398a:	mov    eax,DWORD PTR [rsp+0x8]
   3398e:	test   eax,eax
   33990:	jne    339f8 <Seqtype+0x138>
   33992:	mov    ecx,DWORD PTR [rsp+0x18]
   33996:	cmp    DWORD PTR [rsp+0x10],ecx
   3399a:	jle    339f8 <Seqtype+0x138>
   3399c:	xor    eax,eax
   3399e:	mov    ecx,DWORD PTR [rsp+0x14]
   339a2:	cmp    DWORD PTR [rsp+0x1c],ecx
   339a6:	setl   al
   339a9:	add    eax,0x1
   339ac:	add    rsp,0x28
   339b0:	pop    rbx
   339b1:	pop    rbp
   339b2:	pop    r12
   339b4:	pop    r13
   339b6:	pop    r14
   339b8:	pop    r15
   339ba:	ret    
   339bb:	nop    DWORD PTR [rax+rax*1+0x0]
   339c0:	mov    esi,r13d
   339c3:	lea    rdi,[rip+0xe357]        # 41d21 <CSWTCH.18+0x661>
   339ca:	call   3590 <strchr@plt>
   339cf:	test   rax,rax
   339d2:	je     33a20 <Seqtype+0x160>
   339d4:	add    DWORD PTR [rsp+0x10],0x1
   339d9:	cmp    r12b,0x54
   339dd:	je     33a10 <Seqtype+0x150>
   339df:	xor    eax,eax
   339e1:	cmp    r12b,0x55
   339e5:	sete   al
   339e8:	add    DWORD PTR [rsp+0x14],eax
   339ec:	jmp    3396d <Seqtype+0xad>
   339f1:	nop    DWORD PTR [rax+0x0]
   339f8:	add    rsp,0x28
   339fc:	mov    eax,0x3
   33a01:	pop    rbx
   33a02:	pop    rbp
   33a03:	pop    r12
   33a05:	pop    r13
   33a07:	pop    r14
   33a09:	pop    r15
   33a0b:	ret    
   33a0c:	nop    DWORD PTR [rax+0x0]
   33a10:	add    DWORD PTR [rsp+0x1c],0x1
   33a15:	jmp    3396d <Seqtype+0xad>
   33a1a:	nop    WORD PTR [rax+rax*1+0x0]
   33a20:	mov    esi,r13d
   33a23:	lea    rdi,[rip+0xe2fe]        # 41d28 <CSWTCH.18+0x668>
   33a2a:	call   3590 <strchr@plt>
   33a2f:	test   rax,rax
   33a32:	je     33a3e <Seqtype+0x17e>
   33a34:	add    DWORD PTR [rsp+0x18],0x1
   33a39:	jmp    3396d <Seqtype+0xad>
   33a3e:	call   3820 <__ctype_b_loc@plt>
   33a43:	movsx  r8,r12b
   33a47:	mov    rax,QWORD PTR [rax]
   33a4a:	movzx  eax,WORD PTR [rax+r8*2]
   33a4f:	and    ax,0x400
   33a53:	cmp    ax,0x1
   33a57:	sbb    DWORD PTR [rsp+0xc],0xffffffff
   33a5c:	jmp    3396d <Seqtype+0xad>
   33a61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   33a6c:	nop    DWORD PTR [rax+0x0]

0000000000033a70 <SeqfileFormat>:
   33a70:	endbr64 
   33a74:	push   r15
   33a76:	lea    r15,[rip+0xe2c4]        # 41d41 <CSWTCH.18+0x681>
   33a7d:	push   r14
   33a7f:	xor    r14d,r14d
   33a82:	push   r13
   33a84:	push   r12
   33a86:	push   rbp
   33a87:	mov    rbp,rdi
   33a8a:	push   rbx
   33a8b:	sub    rsp,0x48
   33a8f:	mov    rax,QWORD PTR fs:0x28
   33a98:	mov    QWORD PTR [rsp+0x38],rax
   33a9d:	xor    eax,eax
   33a9f:	mov    DWORD PTR [rsp+0x24],0x0
   33aa7:	lea    r13,[rsp+0x24]
   33aac:	lea    rbx,[rsp+0x28]
   33ab1:	mov    QWORD PTR [rsp+0x28],0x0
   33aba:	mov    DWORD PTR [rsp+0x1c],0x0
   33ac2:	mov    rdx,rbp
   33ac5:	mov    rsi,r13
   33ac8:	mov    rdi,rbx
   33acb:	call   36a50 <sre_fgets>
   33ad0:	test   rax,rax
   33ad3:	je     33fe0 <SeqfileFormat+0x570>
   33ad9:	mov    rdi,QWORD PTR [rsp+0x28]
   33ade:	call   36d50 <IsBlankline>
   33ae3:	test   eax,eax
   33ae5:	jne    33ac2 <SeqfileFormat+0x52>
   33ae7:	mov    r12,QWORD PTR [rsp+0x28]
   33aec:	test   r14d,r14d
   33aef:	jne    33c71 <SeqfileFormat+0x201>
   33af5:	mov    ecx,0x4
   33afa:	mov    rsi,r12
   33afd:	mov    rdi,r15
   33b00:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33b02:	seta   al
   33b05:	sbb    al,0x0
   33b07:	test   al,al
   33b09:	jne    33b23 <SeqfileFormat+0xb3>
   33b0b:	lea    rsi,[rip+0xe234]        # 41d46 <CSWTCH.18+0x686>
   33b12:	mov    rdi,r12
   33b15:	call   37f0 <strstr@plt>
   33b1a:	test   rax,rax
   33b1d:	jne    34051 <SeqfileFormat+0x5e1>
   33b23:	cmp    BYTE PTR [r12],0x3e
   33b28:	je     3403b <SeqfileFormat+0x5cb>
   33b2e:	mov    ecx,0xd
   33b33:	mov    rsi,r12
   33b36:	lea    rdi,[rip+0xe20f]        # 41d4c <CSWTCH.18+0x68c>
   33b3d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33b3f:	seta   al
   33b42:	sbb    al,0x0
   33b44:	test   al,al
   33b46:	je     34000 <SeqfileFormat+0x590>
   33b4c:	mov    ecx,0xd
   33b51:	mov    rsi,r12
   33b54:	lea    rdi,[rip+0xe1ff]        # 41d5a <CSWTCH.18+0x69a>
   33b5b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33b5d:	seta   al
   33b60:	sbb    al,0x0
   33b62:	test   al,al
   33b64:	je     34000 <SeqfileFormat+0x590>
   33b6a:	mov    ecx,0xe
   33b6f:	mov    rsi,r12
   33b72:	lea    rdi,[rip+0xe1ef]        # 41d68 <CSWTCH.18+0x6a8>
   33b79:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33b7b:	seta   al
   33b7e:	sbb    al,0x0
   33b80:	test   al,al
   33b82:	je     34046 <SeqfileFormat+0x5d6>
   33b88:	mov    ecx,0x7
   33b8d:	lea    rdi,[rip+0xc9c6]        # 4055a <defmq.7318+0x39a>
   33b94:	mov    rsi,r12
   33b97:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33b99:	seta   al
   33b9c:	sbb    al,0x0
   33b9e:	test   al,al
   33ba0:	jne    33bba <SeqfileFormat+0x14a>
   33ba2:	lea    rsi,[rip+0xc9b9]        # 40562 <defmq.7318+0x3a2>
   33ba9:	mov    rdi,r12
   33bac:	call   37f0 <strstr@plt>
   33bb1:	test   rax,rax
   33bb4:	jne    3405c <SeqfileFormat+0x5ec>
   33bba:	mov    ecx,0x17
   33bbf:	lea    rdi,[rip+0xd82a]        # 413f0 <gki_primes+0x970>
   33bc6:	mov    rsi,r12
   33bc9:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33bcb:	seta   al
   33bce:	sbb    al,0x0
   33bd0:	test   al,al
   33bd2:	je     34030 <SeqfileFormat+0x5c0>
   33bd8:	mov    ecx,0x17
   33bdd:	lea    rdi,[rip+0xd824]        # 41408 <gki_primes+0x988>
   33be4:	mov    rsi,r12
   33be7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33be9:	seta   al
   33bec:	sbb    al,0x0
   33bee:	test   al,al
   33bf0:	je     34030 <SeqfileFormat+0x5c0>
   33bf6:	mov    rdi,r12
   33bf9:	mov    esi,0xffffffff
   33bfe:	call   36ce0 <sre_strdup>
   33c03:	lea    rdi,[rsp+0x30]
   33c08:	xor    edx,edx
   33c0a:	lea    rsi,[rip+0xe0bb]        # 41ccc <CSWTCH.18+0x60c>
   33c11:	mov    QWORD PTR [rsp+0x30],rax
   33c16:	mov    r12,rax
   33c19:	mov    QWORD PTR [rsp+0x8],rdi
   33c1e:	call   36c50 <sre_strtok>
   33c23:	test   rax,rax
   33c26:	mov    QWORD PTR [rsp+0x10],rax
   33c2b:	je     33c64 <SeqfileFormat+0x1f4>
   33c2d:	mov    rdi,QWORD PTR [rsp+0x8]
   33c32:	xor    edx,edx
   33c34:	lea    rsi,[rip+0xe091]        # 41ccc <CSWTCH.18+0x60c>
   33c3b:	call   36c50 <sre_strtok>
   33c40:	test   rax,rax
   33c43:	mov    QWORD PTR [rsp+0x8],rax
   33c48:	je     33c64 <SeqfileFormat+0x1f4>
   33c4a:	mov    r8,QWORD PTR [rsp+0x10]
   33c4f:	mov    rdi,r8
   33c52:	call   3aa60 <IsInt>
   33c57:	mov    r9,QWORD PTR [rsp+0x8]
   33c5c:	test   eax,eax
   33c5e:	jne    33fb8 <SeqfileFormat+0x548>
   33c64:	mov    rdi,r12
   33c67:	call   3460 <free@plt>
   33c6c:	mov    r12,QWORD PTR [rsp+0x28]
   33c71:	mov    ecx,0x4
   33c76:	lea    rdi,[rip+0xdc61]        # 418de <CSWTCH.18+0x21e>
   33c7d:	mov    rsi,r12
   33c80:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33c82:	seta   al
   33c85:	sbb    al,0x0
   33c87:	test   al,al
   33c89:	je     33f78 <SeqfileFormat+0x508>
   33c8f:	mov    ecx,0x4
   33c94:	lea    rdi,[rip+0xdc48]        # 418e3 <CSWTCH.18+0x223>
   33c9b:	mov    rsi,r12
   33c9e:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33ca0:	seta   al
   33ca3:	sbb    al,0x0
   33ca5:	test   al,al
   33ca7:	je     33f78 <SeqfileFormat+0x508>
   33cad:	mov    ecx,0x4
   33cb2:	lea    rdi,[rip+0xdc2f]        # 418e8 <CSWTCH.18+0x228>
   33cb9:	mov    rsi,r12
   33cbc:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33cbe:	seta   al
   33cc1:	sbb    al,0x0
   33cc3:	test   al,al
   33cc5:	je     33f78 <SeqfileFormat+0x508>
   33ccb:	mov    ecx,0x4
   33cd0:	lea    rdi,[rip+0xdc16]        # 418ed <CSWTCH.18+0x22d>
   33cd7:	mov    rsi,r12
   33cda:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33cdc:	seta   al
   33cdf:	sbb    al,0x0
   33ce1:	test   al,al
   33ce3:	je     33f78 <SeqfileFormat+0x508>
   33ce9:	mov    ecx,0x4
   33cee:	lea    rdi,[rip+0xdbfd]        # 418f2 <CSWTCH.18+0x232>
   33cf5:	mov    rsi,r12
   33cf8:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33cfa:	seta   al
   33cfd:	sbb    al,0x0
   33cff:	test   al,al
   33d01:	je     33f78 <SeqfileFormat+0x508>
   33d07:	mov    ecx,0x4
   33d0c:	lea    rdi,[rip+0xdbe4]        # 418f7 <CSWTCH.18+0x237>
   33d13:	mov    rsi,r12
   33d16:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33d18:	seta   al
   33d1b:	sbb    al,0x0
   33d1d:	test   al,al
   33d1f:	je     33f78 <SeqfileFormat+0x508>
   33d25:	mov    ecx,0x4
   33d2a:	lea    rdi,[rip+0xdbcb]        # 418fc <CSWTCH.18+0x23c>
   33d31:	mov    rsi,r12
   33d34:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33d36:	seta   al
   33d39:	sbb    al,0x0
   33d3b:	test   al,al
   33d3d:	je     33f78 <SeqfileFormat+0x508>
   33d43:	mov    ecx,0x4
   33d48:	lea    rdi,[rip+0xdbb2]        # 41901 <CSWTCH.18+0x241>
   33d4f:	mov    rsi,r12
   33d52:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33d54:	seta   al
   33d57:	sbb    al,0x0
   33d59:	test   al,al
   33d5b:	je     33f78 <SeqfileFormat+0x508>
   33d61:	mov    ecx,0x4
   33d66:	lea    rdi,[rip+0xdb44]        # 418b1 <CSWTCH.18+0x1f1>
   33d6d:	mov    rsi,r12
   33d70:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33d72:	seta   al
   33d75:	sbb    al,0x0
   33d77:	test   al,al
   33d79:	je     33f78 <SeqfileFormat+0x508>
   33d7f:	mov    ecx,0x4
   33d84:	lea    rdi,[rip+0xdb1c]        # 418a7 <CSWTCH.18+0x1e7>
   33d8b:	mov    rsi,r12
   33d8e:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33d90:	seta   al
   33d93:	sbb    al,0x0
   33d95:	test   al,al
   33d97:	je     33f78 <SeqfileFormat+0x508>
   33d9d:	mov    ecx,0x4
   33da2:	lea    rdi,[rip+0xdb03]        # 418ac <CSWTCH.18+0x1ec>
   33da9:	mov    rsi,r12
   33dac:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33dae:	seta   al
   33db1:	sbb    al,0x0
   33db3:	test   al,al
   33db5:	je     33f78 <SeqfileFormat+0x508>
   33dbb:	cmp    BYTE PTR [r12],0x2f
   33dc0:	jne    33dce <SeqfileFormat+0x35e>
   33dc2:	cmp    BYTE PTR [r12+0x1],0x2f
   33dc8:	je     33f60 <SeqfileFormat+0x4f0>
   33dce:	mov    ecx,0x6
   33dd3:	lea    rdi,[rip+0xdf9d]        # 41d77 <CSWTCH.18+0x6b7>
   33dda:	mov    rsi,r12
   33ddd:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33ddf:	seta   al
   33de2:	sbb    al,0x0
   33de4:	test   al,al
   33de6:	je     33f6c <SeqfileFormat+0x4fc>
   33dec:	lea    rsi,[rip+0xd62d]        # 41420 <gki_primes+0x9a0>
   33df3:	mov    rdi,r12
   33df6:	call   37f0 <strstr@plt>
   33dfb:	test   rax,rax
   33dfe:	je     33e44 <SeqfileFormat+0x3d4>
   33e00:	lea    rsi,[rip+0xd61c]        # 41423 <gki_primes+0x9a3>
   33e07:	mov    rdi,r12
   33e0a:	call   37f0 <strstr@plt>
   33e0f:	test   rax,rax
   33e12:	je     33e2c <SeqfileFormat+0x3bc>
   33e14:	lea    rsi,[rip+0xdf63]        # 41d7e <CSWTCH.18+0x6be>
   33e1b:	mov    rdi,r12
   33e1e:	call   37f0 <strstr@plt>
   33e23:	test   rax,rax
   33e26:	jne    34030 <SeqfileFormat+0x5c0>
   33e2c:	lea    rsi,[rip+0xdf70]        # 41da3 <CSWTCH.18+0x6e3>
   33e33:	mov    rdi,r12
   33e36:	call   37f0 <strstr@plt>
   33e3b:	test   rax,rax
   33e3e:	jne    34000 <SeqfileFormat+0x590>
   33e44:	mov    ecx,0x6
   33e49:	lea    rdi,[rip+0xdf35]        # 41d85 <CSWTCH.18+0x6c5>
   33e50:	mov    rsi,r12
   33e53:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33e55:	seta   al
   33e58:	sbb    al,0x0
   33e5a:	test   al,al
   33e5c:	je     34010 <SeqfileFormat+0x5a0>
   33e62:	mov    ecx,0x6
   33e67:	lea    rdi,[rip+0xdf1e]        # 41d8c <CSWTCH.18+0x6cc>
   33e6e:	mov    rsi,r12
   33e71:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33e73:	seta   al
   33e76:	sbb    al,0x0
   33e78:	test   al,al
   33e7a:	je     34010 <SeqfileFormat+0x5a0>
   33e80:	mov    ecx,0x5
   33e85:	lea    rdi,[rip+0xdf08]        # 41d94 <CSWTCH.18+0x6d4>
   33e8c:	mov    rsi,r12
   33e8f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33e91:	seta   al
   33e94:	sbb    al,0x0
   33e96:	test   al,al
   33e98:	je     34020 <SeqfileFormat+0x5b0>
   33e9e:	mov    ecx,0x5
   33ea3:	lea    rdi,[rip+0xdef0]        # 41d9a <CSWTCH.18+0x6da>
   33eaa:	mov    rsi,r12
   33ead:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   33eaf:	seta   al
   33eb2:	sbb    al,0x0
   33eb4:	test   al,al
   33eb6:	je     34020 <SeqfileFormat+0x5b0>
   33ebc:	mov    QWORD PTR [rsp+0x30],r12
   33ec1:	lea    r12,[rsp+0x30]
   33ec6:	xor    edx,edx
   33ec8:	lea    rsi,[rip+0xddfd]        # 41ccc <CSWTCH.18+0x60c>
   33ecf:	mov    rdi,r12
   33ed2:	call   36c50 <sre_strtok>
   33ed7:	test   rax,rax
   33eda:	je     33ac2 <SeqfileFormat+0x52>
   33ee0:	movsx  esi,BYTE PTR [rax]
   33ee3:	lea    rdi,[rip+0xdeb6]        # 41da0 <CSWTCH.18+0x6e0>
   33eea:	call   3590 <strchr@plt>
   33eef:	test   rax,rax
   33ef2:	jne    33ac2 <SeqfileFormat+0x52>
   33ef8:	mov    rdi,r12
   33efb:	xor    edx,edx
   33efd:	lea    rsi,[rip+0xddc8]        # 41ccc <CSWTCH.18+0x60c>
   33f04:	call   36c50 <sre_strtok>
   33f09:	mov    rdi,rax
   33f0c:	test   rax,rax
   33f0f:	je     33f1a <SeqfileFormat+0x4aa>
   33f11:	call   338c0 <Seqtype>
   33f16:	test   eax,eax
   33f18:	jne    33f22 <SeqfileFormat+0x4b2>
   33f1a:	mov    DWORD PTR [rsp+0x1c],0x1
   33f22:	add    r14d,0x1
   33f26:	cmp    r14d,0x12c
   33f2d:	jne    33ac2 <SeqfileFormat+0x52>
   33f33:	nop    DWORD PTR [rax+rax*1+0x0]
   33f38:	cmp    DWORD PTR [rsp+0x1c],0x1
   33f3d:	mov    r13d,0x0
   33f43:	mov    eax,0x66
   33f48:	cmovne r13d,eax
   33f4c:	mov    r12,QWORD PTR [rsp+0x28]
   33f51:	test   r12,r12
   33f54:	je     33f86 <SeqfileFormat+0x516>
   33f56:	jmp    33f7e <SeqfileFormat+0x50e>
   33f58:	nop    DWORD PTR [rax+rax*1+0x0]
   33f60:	cmp    BYTE PTR [r12+0x2],0x2f
   33f66:	jne    33dce <SeqfileFormat+0x35e>
   33f6c:	mov    r13d,0xc
   33f72:	jmp    33f7e <SeqfileFormat+0x50e>
   33f74:	nop    DWORD PTR [rax+0x0]
   33f78:	mov    r13d,0x66
   33f7e:	mov    rdi,r12
   33f81:	call   3460 <free@plt>
   33f86:	mov    rdi,rbp
   33f89:	call   35a0 <rewind@plt>
   33f8e:	mov    rax,QWORD PTR [rsp+0x38]
   33f93:	xor    rax,QWORD PTR fs:0x28
   33f9c:	jne    34067 <SeqfileFormat+0x5f7>
   33fa2:	add    rsp,0x48
   33fa6:	mov    eax,r13d
   33fa9:	pop    rbx
   33faa:	pop    rbp
   33fab:	pop    r12
   33fad:	pop    r13
   33faf:	pop    r14
   33fb1:	pop    r15
   33fb3:	ret    
   33fb4:	nop    DWORD PTR [rax+0x0]
   33fb8:	mov    rdi,r9
   33fbb:	call   3aa60 <IsInt>
   33fc0:	test   eax,eax
   33fc2:	je     33c64 <SeqfileFormat+0x1f4>
   33fc8:	mov    rdi,r12
   33fcb:	mov    r13d,0x6a
   33fd1:	call   3460 <free@plt>
   33fd6:	jmp    33f4c <SeqfileFormat+0x4dc>
   33fdb:	nop    DWORD PTR [rax+rax*1+0x0]
   33fe0:	test   r14d,r14d
   33fe3:	jne    33f38 <SeqfileFormat+0x4c8>
   33fe9:	lea    rdi,[rip+0xe1f0]        # 421e0 <CSWTCH.18+0xb20>
   33ff0:	call   317f0 <Die>
   33ff5:	jmp    33f38 <SeqfileFormat+0x4c8>
   33ffa:	nop    WORD PTR [rax+rax*1+0x0]
   34000:	mov    r13d,0x5
   34006:	jmp    33f7e <SeqfileFormat+0x50e>
   3400b:	nop    DWORD PTR [rax+rax*1+0x0]
   34010:	mov    r13d,0x2
   34016:	jmp    33f7e <SeqfileFormat+0x50e>
   3401b:	nop    DWORD PTR [rax+rax*1+0x0]
   34020:	mov    r13d,0x4
   34026:	jmp    33f7e <SeqfileFormat+0x50e>
   3402b:	nop    DWORD PTR [rax+rax*1+0x0]
   34030:	mov    r13d,0x67
   34036:	jmp    33f7e <SeqfileFormat+0x50e>
   3403b:	mov    r13d,0x7
   34041:	jmp    33f7e <SeqfileFormat+0x50e>
   34046:	mov    r13d,0x65
   3404c:	jmp    33f7e <SeqfileFormat+0x50e>
   34051:	mov    r13d,0x10
   34057:	jmp    33f7e <SeqfileFormat+0x50e>
   3405c:	mov    r13d,0x68
   34062:	jmp    33f7e <SeqfileFormat+0x50e>
   34067:	call   3570 <__stack_chk_fail@plt>
   3406c:	nop    DWORD PTR [rax+0x0]

0000000000034070 <seqfile_open>:
   34070:	push   r14
   34072:	mov    r14,rdi
   34075:	lea    rdi,[rip+0xdbf1]        # 41c6d <CSWTCH.18+0x5ad>
   3407c:	push   r13
   3407e:	mov    r13,rdx
   34081:	mov    edx,0xb0
   34086:	push   r12
   34088:	push   rbp
   34089:	mov    ebp,ecx
   3408b:	push   rbx
   3408c:	mov    ebx,esi
   3408e:	mov    esi,0x65
   34093:	call   36810 <sre_malloc>
   34098:	mov    DWORD PTR [rax+0x24],ebp
   3409b:	mov    r12,rax
   3409e:	mov    eax,0xffffffff
   340a3:	mov    QWORD PTR [r12+0x58],rax
   340a8:	movabs rax,0xffffffff00000000
   340b2:	mov    QWORD PTR [r12+0x60],rax
   340b7:	mov    QWORD PTR [r12+0x68],0x0
   340c0:	cmp    BYTE PTR [r14],0x2d
   340c4:	jne    341a0 <seqfile_open+0x130>
   340ca:	cmp    BYTE PTR [r14+0x1],0x0
   340cf:	jne    341a0 <seqfile_open+0x130>
   340d5:	mov    rax,QWORD PTR [rip+0x1a234]        # 4e310 <stdin@@GLIBC_2.2.5>
   340dc:	mov    esi,0xffffffff
   340e1:	lea    rdi,[rip+0xcecd]        # 40fb5 <gki_primes+0x535>
   340e8:	mov    QWORD PTR [r12],rax
   340ec:	movabs rax,0x100000000
   340f6:	mov    QWORD PTR [r12+0x94],rax
   340fe:	call   36ce0 <sre_strdup>
   34103:	mov    QWORD PTR [r12+0x8],rax
   34108:	test   ebx,ebx
   3410a:	jne    34144 <seqfile_open+0xd4>
   3410c:	cmp    DWORD PTR [r12+0x98],0x1
   34115:	je     34123 <seqfile_open+0xb3>
   34117:	mov    eax,DWORD PTR [r12+0x94]
   3411f:	test   eax,eax
   34121:	je     34131 <seqfile_open+0xc1>
   34123:	lea    rdi,[rip+0xe0d6]        # 42200 <CSWTCH.18+0xb40>
   3412a:	xor    eax,eax
   3412c:	call   317f0 <Die>
   34131:	mov    rdi,QWORD PTR [r12]
   34135:	call   33a70 <SeqfileFormat>
   3413a:	mov    ebx,eax
   3413c:	test   eax,eax
   3413e:	je     34278 <seqfile_open+0x208>
   34144:	mov    QWORD PTR [r12+0xa0],0x0
   34150:	mov    QWORD PTR [r12+0xa8],0x0
   3415c:	mov    DWORD PTR [r12+0x90],ebx
   34164:	mov    DWORD PTR [r12+0x10],0x0
   3416d:	mov    QWORD PTR [r12+0x18],0x0
   34176:	mov    DWORD PTR [r12+0x20],0x0
   3417f:	cmp    ebx,0x64
   34182:	jg     341e0 <seqfile_open+0x170>
   34184:	mov    rdi,r12
   34187:	call   31a80 <SeqfileGetLine>
   3418c:	pop    rbx
   3418d:	mov    rax,r12
   34190:	pop    rbp
   34191:	pop    r12
   34193:	pop    r13
   34195:	pop    r14
   34197:	ret    
   34198:	nop    DWORD PTR [rax+rax*1+0x0]
   341a0:	lea    rsi,[rip+0xcda7]        # 40f4e <gki_primes+0x4ce>
   341a7:	mov    rdi,r14
   341aa:	call   3750 <fopen@plt>
   341af:	mov    QWORD PTR [r12],rax
   341b3:	test   rax,rax
   341b6:	je     342d0 <seqfile_open+0x260>
   341bc:	mov    QWORD PTR [r12+0x94],0x0
   341c8:	mov    esi,0xffffffff
   341cd:	mov    rdi,r14
   341d0:	call   36ce0 <sre_strdup>
   341d5:	mov    QWORD PTR [r12+0x8],rax
   341da:	jmp    34108 <seqfile_open+0x98>
   341df:	nop
   341e0:	mov    edx,0x40
   341e5:	mov    esi,0xbe
   341ea:	lea    rdi,[rip+0xda7c]        # 41c6d <CSWTCH.18+0x5ad>
   341f1:	call   36810 <sre_malloc>
   341f6:	mov    QWORD PTR [r12+0xa8],rax
   341fe:	mov    rdi,rax
   34201:	mov    rax,QWORD PTR [r12]
   34205:	mov    QWORD PTR [rdi],rax
   34208:	mov    eax,DWORD PTR [r12+0x98]
   34210:	mov    DWORD PTR [rdi+0x34],eax
   34213:	mov    eax,DWORD PTR [r12+0x94]
   3421b:	mov    DWORD PTR [rdi+0x30],eax
   3421e:	mov    rax,QWORD PTR [r12+0x8]
   34223:	mov    QWORD PTR [rdi+0x8],rax
   34227:	mov    eax,DWORD PTR [r12+0x90]
   3422f:	mov    DWORD PTR [rdi+0x38],eax
   34232:	mov    eax,DWORD PTR [r12+0x10]
   34237:	mov    QWORD PTR [rdi+0x18],0x0
   3423f:	mov    DWORD PTR [rdi+0x10],eax
   34242:	mov    DWORD PTR [rdi+0x20],0x0
   34249:	call   2c2a0 <MSAFileRead>
   3424e:	mov    QWORD PTR [r12+0xa0],rax
   34256:	test   rax,rax
   34259:	je     342f8 <seqfile_open+0x288>
   3425f:	mov    DWORD PTR [rax+0x160],0x0
   34269:	mov    rax,r12
   3426c:	pop    rbx
   3426d:	pop    rbp
   3426e:	pop    r12
   34270:	pop    r13
   34272:	pop    r14
   34274:	ret    
   34275:	nop    DWORD PTR [rax]
   34278:	mov    rsi,QWORD PTR [r12+0x8]
   3427d:	lea    rdi,[rip+0xdfbc]        # 42240 <CSWTCH.18+0xb80>
   34284:	xor    eax,eax
   34286:	call   317f0 <Die>
   3428b:	mov    QWORD PTR [r12+0xa0],0x0
   34297:	mov    QWORD PTR [r12+0xa8],0x0
   342a3:	mov    DWORD PTR [r12+0x90],0x0
   342af:	mov    DWORD PTR [r12+0x10],0x0
   342b8:	mov    QWORD PTR [r12+0x18],0x0
   342c1:	mov    DWORD PTR [r12+0x20],0x0
   342ca:	jmp    34184 <seqfile_open+0x114>
   342cf:	nop
   342d0:	xor    edx,edx
   342d2:	mov    rsi,r13
   342d5:	mov    rdi,r14
   342d8:	call   27750 <EnvFileOpen>
   342dd:	mov    QWORD PTR [r12],rax
   342e1:	test   rax,rax
   342e4:	jne    341bc <seqfile_open+0x14c>
   342ea:	xor    r12d,r12d
   342ed:	jmp    3418c <seqfile_open+0x11c>
   342f2:	nop    WORD PTR [rax+rax*1+0x0]
   342f8:	mov    rsi,QWORD PTR [r12+0x8]
   342fd:	lea    rdi,[rip+0xdf6c]        # 42270 <CSWTCH.18+0xbb0>
   34304:	call   317f0 <Die>
   34309:	mov    rax,QWORD PTR [r12+0xa0]
   34311:	jmp    3425f <seqfile_open+0x1ef>
   34316:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000034320 <SeqfileOpen>:
   34320:	endbr64 
   34324:	mov    ecx,0xffffffff
   34329:	jmp    34070 <seqfile_open>
   3432e:	xchg   ax,ax

0000000000034330 <SeqfileOpenForIndexing>:
   34330:	endbr64 
   34334:	jmp    34070 <seqfile_open>
   34339:	nop    DWORD PTR [rax+0x0]

0000000000034340 <GuessAlignmentSeqtype>:
   34340:	endbr64 
   34344:	push   r15
   34346:	push   r14
   34348:	push   r13
   3434a:	push   r12
   3434c:	push   rbp
   3434d:	push   rbx
   3434e:	sub    rsp,0x18
   34352:	mov    DWORD PTR [rsp+0xc],esi
   34356:	test   esi,esi
   34358:	jle    34428 <GuessAlignmentSeqtype+0xe8>
   3435e:	mov    eax,esi
   34360:	mov    rbp,rdi
   34363:	xor    r13d,r13d
   34366:	xor    r12d,r12d
   34369:	sub    eax,0x1
   3436c:	xor    r14d,r14d
   3436f:	xor    r15d,r15d
   34372:	lea    rbx,[rdi+rax*8+0x8]
   34377:	jmp    34392 <GuessAlignmentSeqtype+0x52>
   34379:	nop    DWORD PTR [rax+0x0]
   34380:	cmp    eax,0x1
   34383:	je     34400 <GuessAlignmentSeqtype+0xc0>
   34385:	add    r13d,0x1
   34389:	add    rbp,0x8
   3438d:	cmp    rbp,rbx
   34390:	je     343b2 <GuessAlignmentSeqtype+0x72>
   34392:	mov    rdi,QWORD PTR [rbp+0x0]
   34396:	call   338c0 <Seqtype>
   3439b:	cmp    eax,0x2
   3439e:	je     343f0 <GuessAlignmentSeqtype+0xb0>
   343a0:	cmp    eax,0x3
   343a3:	jne    34380 <GuessAlignmentSeqtype+0x40>
   343a5:	add    rbp,0x8
   343a9:	add    r12d,0x1
   343ad:	cmp    rbp,rbx
   343b0:	jne    34392 <GuessAlignmentSeqtype+0x52>
   343b2:	xor    eax,eax
   343b4:	test   r13d,r13d
   343b7:	jne    343db <GuessAlignmentSeqtype+0x9b>
   343b9:	mov    edx,DWORD PTR [rsp+0xc]
   343bd:	cmp    r12d,edx
   343c0:	je     34433 <GuessAlignmentSeqtype+0xf3>
   343c2:	mov    eax,0x1
   343c7:	cmp    edx,r14d
   343ca:	je     343db <GuessAlignmentSeqtype+0x9b>
   343cc:	test   r12d,r12d
   343cf:	je     34410 <GuessAlignmentSeqtype+0xd0>
   343d1:	mov    eax,0x3
   343d6:	cmp    r15d,edx
   343d9:	je     34410 <GuessAlignmentSeqtype+0xd0>
   343db:	add    rsp,0x18
   343df:	pop    rbx
   343e0:	pop    rbp
   343e1:	pop    r12
   343e3:	pop    r13
   343e5:	pop    r14
   343e7:	pop    r15
   343e9:	ret    
   343ea:	nop    WORD PTR [rax+rax*1+0x0]
   343f0:	add    r15d,0x1
   343f4:	jmp    34389 <GuessAlignmentSeqtype+0x49>
   343f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34400:	add    r14d,0x1
   34404:	jmp    34389 <GuessAlignmentSeqtype+0x49>
   34406:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34410:	add    rsp,0x18
   34414:	mov    eax,0x2
   34419:	pop    rbx
   3441a:	pop    rbp
   3441b:	pop    r12
   3441d:	pop    r13
   3441f:	pop    r14
   34421:	pop    r15
   34423:	ret    
   34424:	nop    DWORD PTR [rax+0x0]
   34428:	xor    r12d,r12d
   3442b:	xor    r14d,r14d
   3442e:	xor    r15d,r15d
   34431:	jmp    343b9 <GuessAlignmentSeqtype+0x79>
   34433:	mov    eax,0x3
   34438:	jmp    343db <GuessAlignmentSeqtype+0x9b>
   3443a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000034440 <WriteSimpleFASTA>:
   34440:	endbr64 
   34444:	push   r15
   34446:	mov    r15,rdx
   34449:	push   r14
   3444b:	push   r13
   3444d:	mov    r13,rdi
   34450:	mov    rdi,rsi
   34453:	push   r12
   34455:	mov    r12,rcx
   34458:	push   rbp
   34459:	push   rbx
   3445a:	mov    rbx,rsi
   3445d:	sub    rsp,0x58
   34461:	mov    rax,QWORD PTR fs:0x28
   3446a:	mov    QWORD PTR [rsp+0x48],rax
   3446f:	xor    eax,eax
   34471:	call   3560 <strlen@plt>
   34476:	test   r12,r12
   34479:	mov    rcx,r15
   3447c:	mov    esi,0x1
   34481:	lea    r8,[rip+0xcfa8]        # 41430 <gki_primes+0x9b0>
   34488:	mov    rbp,rax
   3448b:	mov    r14d,eax
   3448e:	mov    rdi,r13
   34491:	cmovne r8,r12
   34495:	lea    rdx,[rip+0xc040]        # 404dc <defmq.7318+0x31c>
   3449c:	xor    eax,eax
   3449e:	mov    BYTE PTR [rsp+0x3c],0x0
   344a3:	call   37c0 <__fprintf_chk@plt>
   344a8:	test   ebp,ebp
   344aa:	jle    344f1 <WriteSimpleFASTA+0xb1>
   344ac:	xor    ebp,ebp
   344ae:	mov    r12,rsp
   344b1:	lea    r15,[rip+0xe46d]        # 42925 <cof.6115+0x125>
   344b8:	nop    DWORD PTR [rax+rax*1+0x0]
   344c0:	mov    rsi,rbx
   344c3:	mov    edx,0x3c
   344c8:	mov    rdi,r12
   344cb:	add    ebp,0x3c
   344ce:	call   34b0 <strncpy@plt>
   344d3:	mov    rcx,r12
   344d6:	mov    rdx,r15
   344d9:	mov    esi,0x1
   344de:	mov    rdi,r13
   344e1:	xor    eax,eax
   344e3:	add    rbx,0x3c
   344e7:	call   37c0 <__fprintf_chk@plt>
   344ec:	cmp    r14d,ebp
   344ef:	jg     344c0 <WriteSimpleFASTA+0x80>
   344f1:	mov    rax,QWORD PTR [rsp+0x48]
   344f6:	xor    rax,QWORD PTR fs:0x28
   344ff:	jne    34510 <WriteSimpleFASTA+0xd0>
   34501:	add    rsp,0x58
   34505:	pop    rbx
   34506:	pop    rbp
   34507:	pop    r12
   34509:	pop    r13
   3450b:	pop    r14
   3450d:	pop    r15
   3450f:	ret    
   34510:	call   3570 <__stack_chk_fail@plt>
   34515:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000034520 <WriteSeq>:
   34520:	endbr64 
   34524:	push   r15
   34526:	mov    r15,rdx
   34529:	push   r14
   3452b:	push   r13
   3452d:	push   r12
   3452f:	mov    r12,rcx
   34532:	push   rbp
   34533:	mov    rbp,rdi
   34536:	push   rbx
   34537:	sub    rsp,0x128
   3453e:	mov    DWORD PTR [rsp+0x14],esi
   34542:	mov    rax,QWORD PTR fs:0x28
   3454b:	mov    QWORD PTR [rsp+0x118],rax
   34553:	xor    eax,eax
   34555:	test   BYTE PTR [rcx],0x40
   34558:	je     348b8 <WriteSeq+0x398>
   3455e:	mov    ebx,DWORD PTR [rcx+0x144]
   34564:	cmp    DWORD PTR [rsp+0x14],0x64
   34569:	jg     345a0 <WriteSeq+0x80>
   3456b:	mov    esi,ebx
   3456d:	mov    rdi,r15
   34570:	mov    BYTE PTR [rsp+0x36],0x0
   34575:	call   33770 <GCGchecksum>
   3457a:	mov    r13d,eax
   3457d:	mov    eax,DWORD PTR [rsp+0x14]
   34581:	cmp    eax,0x10
   34584:	ja     345bd <WriteSeq+0x9d>
   34586:	lea    rcx,[rip+0xdf77]        # 42504 <CSWTCH.18+0xe44>
   3458d:	mov    edx,eax
   3458f:	movsxd rax,DWORD PTR [rcx+rdx*4]
   34593:	add    rax,rcx
   34596:	notrack jmp rax
   34599:	nop    DWORD PTR [rax+0x0]
   345a0:	lea    rdi,[rip+0xdcf9]        # 422a0 <CSWTCH.18+0xbe0>
   345a7:	xor    eax,eax
   345a9:	call   317f0 <Die>
   345ae:	mov    esi,ebx
   345b0:	mov    rdi,r15
   345b3:	mov    BYTE PTR [rsp+0x36],0x0
   345b8:	call   33770 <GCGchecksum>
   345bd:	test   BYTE PTR [r12],0x8
   345c2:	lea    rax,[rip+0xce67]        # 41430 <gki_primes+0x9b0>
   345c9:	mov    rdi,rbp
   345cc:	mov    esi,0x1
   345d1:	lea    r8,[r12+0xc4]
   345d9:	lea    rcx,[r12+0x4]
   345de:	cmove  r8,rax
   345e2:	lea    rdx,[rip+0xbef3]        # 404dc <defmq.7318+0x31c>
   345e9:	xor    eax,eax
   345eb:	call   37c0 <__fprintf_chk@plt>
   345f0:	mov    DWORD PTR [rsp+0x18],0x0
   345f8:	mov    DWORD PTR [rsp+0x20],0x0
   34600:	mov    DWORD PTR [rsp+0x1c],0x32
   34608:	mov    DWORD PTR [rsp+0x8],0x0
   34610:	mov    DWORD PTR [rsp+0x14],0x0
   34618:	test   ebx,ebx
   3461a:	jle    34e50 <WriteSeq+0x930>
   34620:	xor    r13d,r13d
   34623:	mov    DWORD PTR [rsp+0xc],0x1
   3462b:	xor    ecx,ecx
   3462d:	mov    r14d,r13d
   34630:	mov    DWORD PTR [rsp+0x4],0x0
   34638:	mov    r13,r12
   3463b:	mov    DWORD PTR [rsp+0x10],0x0
   34643:	jmp    34651 <WriteSeq+0x131>
   34645:	nop    DWORD PTR [rax]
   34648:	cmp    ebx,r12d
   3464b:	jle    347f5 <WriteSeq+0x2d5>
   34651:	mov    r10d,DWORD PTR [rsp+0x4]
   34656:	lea    eax,[r14+0x1]
   3465a:	lea    r12d,[r10+0x1]
   3465e:	test   ecx,ecx
   34660:	je     35006 <WriteSeq+0xae6>
   34666:	mov    DWORD PTR [rsp+0x4],r12d
   3466b:	add    ecx,0x1
   3466e:	cmp    ecx,DWORD PTR [rsp+0x1c]
   34672:	mov    r11d,r14d
   34675:	sete   sil
   34679:	mov    r14d,eax
   3467c:	mov    edi,DWORD PTR [rsp+0x8]
   34680:	test   edi,edi
   34682:	je     346b0 <WriteSeq+0x190>
   34684:	mov    eax,r14d
   34687:	cdq    
   34688:	idiv   edi
   3468a:	cmp    edx,0x1
   3468d:	jne    346b0 <WriteSeq+0x190>
   3468f:	movsxd rax,r11d
   34692:	mov    r11d,r14d
   34695:	add    r14d,0x1
   34699:	mov    BYTE PTR [rsp+rax*1+0x40],0x20
   3469e:	mov    BYTE PTR [rsp+rax*1+0xb0],0x20
   346a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   346b0:	movsxd rdi,r10d
   346b3:	movsxd rax,r11d
   346b6:	movzx  edx,BYTE PTR [r15+rdi*1]
   346bb:	mov    BYTE PTR [rsp+rax*1+0x40],dl
   346bf:	mov    edx,0x2e
   346c4:	test   DWORD PTR [r13+0x0],0x200
   346cc:	je     346d9 <WriteSeq+0x1b9>
   346ce:	mov    rdx,QWORD PTR [r13+0x158]
   346d5:	movzx  edx,BYTE PTR [rdx+rdi*1]
   346d9:	mov    BYTE PTR [rsp+rax*1+0xb0],dl
   346e0:	cmp    ebx,r12d
   346e3:	je     346ee <WriteSeq+0x1ce>
   346e5:	test   sil,sil
   346e8:	je     34648 <WriteSeq+0x128>
   346ee:	mov    edi,DWORD PTR [rsp+0x18]
   346f2:	movsxd r8,r14d
   346f5:	mov    BYTE PTR [rsp+r8*1+0xb0],0x0
   346fe:	mov    BYTE PTR [rsp+r8*1+0x40],0x0
   34704:	test   edi,edi
   34706:	jne    34828 <WriteSeq+0x308>
   3470c:	cmp    ebx,r12d
   3470f:	je     347d0 <WriteSeq+0x2b0>
   34715:	mov    DWORD PTR [rsp+0xc],r10d
   3471a:	lea    rcx,[rsp+0x40]
   3471f:	mov    esi,0x1
   34724:	mov    rdi,rbp
   34727:	xor    eax,eax
   34729:	mov    r14d,0x1
   3472f:	lea    rdx,[rip+0xe1ef]        # 42925 <cof.6115+0x125>
   34736:	call   37c0 <__fprintf_chk@plt>
   3473b:	mov    r10d,DWORD PTR [rsp+0xc]
   34740:	add    DWORD PTR [rsp+0x10],0x1
   34745:	xor    r11d,r11d
   34748:	lea    eax,[r10+0x2]
   3474c:	mov    DWORD PTR [rsp+0xc],eax
   34750:	cmp    ebx,r12d
   34753:	jle    347f5 <WriteSeq+0x2d5>
   34759:	mov    r12d,DWORD PTR [rsp+0xc]
   3475e:	mov    r8d,DWORD PTR [rsp+0x14]
   34763:	test   r8d,r8d
   34766:	jne    348f8 <WriteSeq+0x3d8>
   3476c:	mov    eax,DWORD PTR [rsp+0x20]
   34770:	test   eax,eax
   34772:	je     34928 <WriteSeq+0x408>
   34778:	mov    DWORD PTR [rsp+0x24],r11d
   3477d:	xor    edx,edx
   3477f:	mov    DWORD PTR [rsp+0x28],ebx
   34783:	mov    ebx,edx
   34785:	mov    DWORD PTR [rsp+0x2c],r12d
   3478a:	mov    r12,rbp
   3478d:	mov    ebp,eax
   3478f:	nop
   34790:	mov    rsi,r12
   34793:	mov    edi,0x20
   34798:	add    ebx,0x1
   3479b:	call   3600 <fputc@plt>
   347a0:	cmp    ebx,ebp
   347a2:	jne    34790 <WriteSeq+0x270>
   347a4:	mov    rbp,r12
   347a7:	mov    r12d,DWORD PTR [rsp+0x2c]
   347ac:	mov    r10d,DWORD PTR [rsp+0x4]
   347b1:	xor    esi,esi
   347b3:	mov    r11d,DWORD PTR [rsp+0x24]
   347b8:	mov    ebx,DWORD PTR [rsp+0x28]
   347bc:	mov    ecx,0x1
   347c1:	mov    DWORD PTR [rsp+0x4],r12d
   347c6:	jmp    3467c <WriteSeq+0x15c>
   347cb:	nop    DWORD PTR [rax+rax*1+0x0]
   347d0:	lea    rcx,[rsp+0x40]
   347d5:	lea    r8,[rsp+0x36]
   347da:	mov    esi,0x1
   347df:	mov    rdi,rbp
   347e2:	xor    eax,eax
   347e4:	lea    rdx,[rip+0x9827]        # 3e012 <_IO_stdin_used+0x1012>
   347eb:	call   37c0 <__fprintf_chk@plt>
   347f0:	add    DWORD PTR [rsp+0x10],0x1
   347f5:	mov    rax,QWORD PTR [rsp+0x118]
   347fd:	xor    rax,QWORD PTR fs:0x28
   34806:	jne    35001 <WriteSeq+0xae1>
   3480c:	mov    eax,DWORD PTR [rsp+0x10]
   34810:	add    rsp,0x128
   34817:	pop    rbx
   34818:	pop    rbp
   34819:	pop    r12
   3481b:	pop    r13
   3481d:	pop    r14
   3481f:	pop    r15
   34821:	ret    
   34822:	nop    WORD PTR [rax+rax*1+0x0]
   34828:	mov    esi,0x1
   3482d:	xor    eax,eax
   3482f:	lea    rcx,[rsp+0x40]
   34834:	mov    rdi,rbp
   34837:	lea    rdx,[rip+0xe0e7]        # 42925 <cof.6115+0x125>
   3483e:	mov    DWORD PTR [rsp+0xc],r10d
   34843:	call   37c0 <__fprintf_chk@plt>
   34848:	mov    esi,DWORD PTR [rsp+0x14]
   3484c:	mov    r10d,DWORD PTR [rsp+0xc]
   34851:	test   esi,esi
   34853:	jne    348d0 <WriteSeq+0x3b0>
   34855:	mov    ecx,DWORD PTR [rsp+0x20]
   34859:	xor    r14d,r14d
   3485c:	test   ecx,ecx
   3485e:	je     34896 <WriteSeq+0x376>
   34860:	mov    DWORD PTR [rsp+0x24],r10d
   34865:	mov    DWORD PTR [rsp+0xc],ebx
   34869:	mov    ebx,r14d
   3486c:	mov    r14d,DWORD PTR [rsp+0x20]
   34871:	nop    DWORD PTR [rax+0x0]
   34878:	mov    rsi,rbp
   3487b:	mov    edi,0x20
   34880:	add    ebx,0x1
   34883:	call   3600 <fputc@plt>
   34888:	cmp    ebx,r14d
   3488b:	jne    34878 <WriteSeq+0x358>
   3488d:	mov    ebx,DWORD PTR [rsp+0xc]
   34891:	mov    r10d,DWORD PTR [rsp+0x24]
   34896:	cmp    ebx,r12d
   34899:	je     34940 <WriteSeq+0x420>
   3489f:	mov    DWORD PTR [rsp+0xc],r10d
   348a4:	lea    rcx,[rsp+0xb0]
   348ac:	jmp    3471f <WriteSeq+0x1ff>
   348b1:	nop    DWORD PTR [rax+0x0]
   348b8:	mov    rdi,rdx
   348bb:	call   3560 <strlen@plt>
   348c0:	mov    ebx,eax
   348c2:	jmp    34564 <WriteSeq+0x44>
   348c7:	nop    WORD PTR [rax+rax*1+0x0]
   348d0:	mov    rcx,rbp
   348d3:	mov    edx,0x9
   348d8:	mov    esi,0x1
   348dd:	lea    rdi,[rip+0xd60d]        # 41ef1 <CSWTCH.18+0x831>
   348e4:	call   37b0 <fwrite@plt>
   348e9:	mov    r10d,DWORD PTR [rsp+0xc]
   348ee:	jmp    34855 <WriteSeq+0x335>
   348f3:	nop    DWORD PTR [rax+rax*1+0x0]
   348f8:	mov    ecx,DWORD PTR [rsp+0xc]
   348fc:	lea    rdx,[rip+0xd5e9]        # 41eec <CSWTCH.18+0x82c>
   34903:	mov    rdi,rbp
   34906:	xor    eax,eax
   34908:	mov    esi,0x1
   3490d:	mov    DWORD PTR [rsp+0x24],r11d
   34912:	call   37c0 <__fprintf_chk@plt>
   34917:	mov    eax,DWORD PTR [rsp+0x20]
   3491b:	mov    r11d,DWORD PTR [rsp+0x24]
   34920:	test   eax,eax
   34922:	jne    34778 <WriteSeq+0x258>
   34928:	mov    r10d,DWORD PTR [rsp+0x4]
   3492d:	mov    ecx,0x1
   34932:	mov    DWORD PTR [rsp+0x4],r12d
   34937:	xor    esi,esi
   34939:	jmp    3467c <WriteSeq+0x15c>
   3493e:	xchg   ax,ax
   34940:	lea    rcx,[rsp+0xb0]
   34948:	jmp    347d5 <WriteSeq+0x2b5>
   3494d:	lea    r13,[r12+0x4]
   34952:	lea    r8,[r12+0xc4]
   3495a:	test   BYTE PTR [r12],0x8
   3495f:	je     34f3d <WriteSeq+0xa1d>
   34965:	mov    rcx,r13
   34968:	mov    rdi,rbp
   3496b:	lea    rdx,[rip+0xd589]        # 41efb <CSWTCH.18+0x83b>
   34972:	xor    eax,eax
   34974:	mov    esi,0x1
   34979:	call   37c0 <__fprintf_chk@plt>
   3497e:	mov    rdi,rbp
   34981:	mov    rcx,r13
   34984:	mov    esi,0x1
   34989:	lea    rdx,[rip+0xdf95]        # 42925 <cof.6115+0x125>
   34990:	xor    eax,eax
   34992:	call   37c0 <__fprintf_chk@plt>
   34997:	mov    eax,0x31
   3499c:	mov    rdi,r15
   3499f:	mov    WORD PTR [rsp+0x36],ax
   349a4:	call   367e0 <s2upper>
   349a9:	jmp    345f0 <WriteSeq+0xd0>
   349ae:	test   BYTE PTR [r12],0x2
   349b3:	lea    rax,[r12+0x44]
   349b8:	mov    rdi,rbp
   349bb:	mov    esi,0x1
   349c0:	lea    rcx,[r12+0x4]
   349c5:	lea    rdx,[rip+0xd458]        # 41e24 <CSWTCH.18+0x764>
   349cc:	cmovne rcx,rax
   349d0:	xor    eax,eax
   349d2:	lea    r14,[rip+0x91c1]        # 3db9a <_IO_stdin_used+0xb9a>
   349d9:	call   37c0 <__fprintf_chk@plt>
   349de:	test   BYTE PTR [r12],0x8
   349e3:	mov    esi,0x1
   349e8:	mov    rdi,rbp
   349eb:	lea    rcx,[r12+0xc4]
   349f3:	lea    rdx,[rip+0xd43d]        # 41e37 <CSWTCH.18+0x777>
   349fa:	cmove  rcx,r14
   349fe:	xor    eax,eax
   34a00:	call   37c0 <__fprintf_chk@plt>
   34a05:	test   BYTE PTR [r12],0x4
   34a0a:	mov    esi,0x1
   34a0f:	mov    rdi,rbp
   34a12:	lea    rcx,[r12+0x84]
   34a1a:	lea    rdx,[rip+0xd429]        # 41e4a <CSWTCH.18+0x78a>
   34a21:	cmove  rcx,r14
   34a25:	xor    eax,eax
   34a27:	call   37c0 <__fprintf_chk@plt>
   34a2c:	mov    r8d,r13d
   34a2f:	mov    esi,0x1
   34a34:	mov    rdi,rbp
   34a37:	mov    ecx,DWORD PTR [r12+0x144]
   34a3f:	lea    rdx,[rip+0xd89a]        # 422e0 <CSWTCH.18+0xc20>
   34a46:	xor    eax,eax
   34a48:	call   37c0 <__fprintf_chk@plt>
   34a4d:	mov    rcx,rbp
   34a50:	mov    edx,0x9
   34a55:	mov    esi,0x1
   34a5a:	lea    rdi,[rip+0xd3fc]        # 41e5d <CSWTCH.18+0x79d>
   34a61:	call   37b0 <fwrite@plt>
   34a66:	mov    rcx,rbp
   34a69:	mov    edx,0x46
   34a6e:	mov    esi,0x1
   34a73:	lea    rdi,[rip+0xd8ae]        # 42328 <CSWTCH.18+0xc68>
   34a7a:	call   37b0 <fwrite@plt>
   34a7f:	mov    DWORD PTR [rsp+0x36],0x2f2f2f0a
   34a87:	mov    BYTE PTR [rsp+0x3a],0x0
   34a8c:	mov    DWORD PTR [rsp+0x18],0x0
   34a94:	mov    DWORD PTR [rsp+0x20],0x0
   34a9c:	mov    DWORD PTR [rsp+0x1c],0x1e
   34aa4:	mov    DWORD PTR [rsp+0x8],0x2
   34aac:	mov    DWORD PTR [rsp+0x14],0x1
   34ab4:	jmp    34618 <WriteSeq+0xf8>
   34ab9:	mov    rcx,rbp
   34abc:	mov    edx,0x1b
   34ac1:	mov    esi,0x1
   34ac6:	lea    rdi,[rip+0xd403]        # 41ed0 <CSWTCH.18+0x810>
   34acd:	call   37b0 <fwrite@plt>
   34ad2:	lea    rcx,[r12+0x4]
   34ad7:	mov    r9d,r13d
   34ada:	mov    r8d,ebx
   34add:	lea    rdx,[rip+0xd8bc]        # 423a0 <CSWTCH.18+0xce0>
   34ae4:	mov    esi,0x1
   34ae9:	mov    rdi,rbp
   34aec:	xor    eax,eax
   34aee:	call   37c0 <__fprintf_chk@plt>
   34af3:	mov    DWORD PTR [rsp+0x36],0x2f2f0a
   34afb:	jmp    345f0 <WriteSeq+0xd0>
   34b00:	mov    eax,DWORD PTR [rsp+0x14]
   34b04:	mov    r13d,0xa
   34b0a:	mov    DWORD PTR [rsp+0x1c],0x32
   34b12:	mov    WORD PTR [rsp+0x36],r13w
   34b18:	mov    DWORD PTR [rsp+0x18],eax
   34b1c:	mov    DWORD PTR [rsp+0x20],eax
   34b20:	mov    DWORD PTR [rsp+0x8],eax
   34b24:	jmp    34618 <WriteSeq+0xf8>
   34b29:	lea    rcx,[r12+0x4]
   34b2e:	mov    esi,0x1
   34b33:	mov    rdi,rbp
   34b36:	xor    eax,eax
   34b38:	lea    rdx,[rip+0xd328]        # 41e67 <CSWTCH.18+0x7a7>
   34b3f:	call   37c0 <__fprintf_chk@plt>
   34b44:	mov    eax,DWORD PTR [r12]
   34b48:	test   eax,0x136
   34b4d:	je     34bc1 <WriteSeq+0x6a1>
   34b4f:	mov    edi,eax
   34b51:	and    edi,0x100
   34b57:	je     34b61 <WriteSeq+0x641>
   34b59:	mov    edi,DWORD PTR [r12+0x150]
   34b61:	mov    esi,eax
   34b63:	and    esi,0x20
   34b66:	je     34b70 <WriteSeq+0x650>
   34b68:	mov    esi,DWORD PTR [r12+0x14c]
   34b70:	mov    r9d,eax
   34b73:	and    r9d,0x10
   34b77:	je     34b81 <WriteSeq+0x661>
   34b79:	mov    r9d,DWORD PTR [r12+0x148]
   34b81:	lea    rdx,[rip+0x9012]        # 3db9a <_IO_stdin_used+0xb9a>
   34b88:	test   al,0x4
   34b8a:	push   rdi
   34b8b:	lea    rcx,[r12+0x44]
   34b90:	lea    r8,[r12+0x84]
   34b98:	push   rsi
   34b99:	mov    rdi,rbp
   34b9c:	mov    esi,0x1
   34ba1:	cmove  r8,rdx
   34ba5:	test   al,0x2
   34ba7:	cmove  rcx,rdx
   34bab:	lea    rdx,[rip+0xd2be]        # 41e70 <CSWTCH.18+0x7b0>
   34bb2:	xor    eax,eax
   34bb4:	call   37c0 <__fprintf_chk@plt>
   34bb9:	mov    eax,DWORD PTR [r12]
   34bbd:	pop    r10
   34bbf:	pop    r11
   34bc1:	test   al,0x8
   34bc3:	jne    34f90 <WriteSeq+0xa70>
   34bc9:	and    eax,0x200
   34bce:	mov    rcx,rbp
   34bd1:	mov    DWORD PTR [rsp+0x18],eax
   34bd5:	jne    34f1a <WriteSeq+0x9fa>
   34bdb:	mov    edx,0x4
   34be0:	mov    esi,0x1
   34be5:	lea    rdi,[rip+0xd2ae]        # 41e9a <CSWTCH.18+0x7da>
   34bec:	call   37b0 <fwrite@plt>
   34bf1:	mov    DWORD PTR [rsp+0x36],0x2b2b0a
   34bf9:	mov    DWORD PTR [rsp+0x20],0x0
   34c01:	mov    DWORD PTR [rsp+0x1c],0x32
   34c09:	mov    DWORD PTR [rsp+0x8],0x0
   34c11:	mov    DWORD PTR [rsp+0x14],0x1
   34c19:	jmp    34618 <WriteSeq+0xf8>
   34c1e:	lea    rcx,[r12+0x4]
   34c23:	mov    rdi,rbp
   34c26:	mov    r8d,ebx
   34c29:	mov    esi,0x1
   34c2e:	lea    rdx,[rip+0xd1d1]        # 41e06 <CSWTCH.18+0x746>
   34c35:	xor    eax,eax
   34c37:	call   37c0 <__fprintf_chk@plt>
   34c3c:	test   BYTE PTR [r12],0x8
   34c41:	mov    rdi,rbp
   34c44:	lea    rcx,[r12+0xc4]
   34c4c:	lea    rax,[rip+0x8f47]        # 3db9a <_IO_stdin_used+0xb9a>
   34c53:	lea    rdx,[rip+0xdccb]        # 42925 <cof.6115+0x125>
   34c5a:	mov    esi,0x1
   34c5f:	cmove  rcx,rax
   34c63:	xor    eax,eax
   34c65:	call   37c0 <__fprintf_chk@plt>
   34c6a:	jmp    345f0 <WriteSeq+0xd0>
   34c6f:	mov    eax,DWORD PTR [r12]
   34c73:	lea    r13,[r12+0x4]
   34c78:	and    eax,0x8
   34c7b:	mov    DWORD PTR [rsp+0x14],eax
   34c7f:	jne    34f49 <WriteSeq+0xa29>
   34c85:	lea    r8,[rip+0xc7a4]        # 41430 <gki_primes+0x9b0>
   34c8c:	mov    rcx,r13
   34c8f:	mov    rdi,rbp
   34c92:	xor    eax,eax
   34c94:	lea    rdx,[rip+0xd260]        # 41efb <CSWTCH.18+0x83b>
   34c9b:	mov    esi,0x1
   34ca0:	call   37c0 <__fprintf_chk@plt>
   34ca5:	mov    rcx,r13
   34ca8:	mov    esi,0x1
   34cad:	mov    rdi,rbp
   34cb0:	lea    rdx,[rip+0xdc6e]        # 42925 <cof.6115+0x125>
   34cb7:	xor    eax,eax
   34cb9:	call   37c0 <__fprintf_chk@plt>
   34cbe:	mov    edx,0x31
   34cc3:	mov    DWORD PTR [rsp+0x18],0x0
   34ccb:	mov    WORD PTR [rsp+0x36],dx
   34cd0:	mov    DWORD PTR [rsp+0x20],0x0
   34cd8:	mov    DWORD PTR [rsp+0x8],0x0
   34ce0:	mov    DWORD PTR [rsp+0x1c],0x32
   34ce8:	jmp    34618 <WriteSeq+0xf8>
   34ced:	nop    DWORD PTR [rax]
   34cf0:	test   BYTE PTR [r12],0x2
   34cf5:	lea    rax,[r12+0x44]
   34cfa:	mov    rdi,rbp
   34cfd:	mov    esi,0x1
   34d02:	lea    rcx,[r12+0x4]
   34d07:	lea    rdx,[rip+0xd191]        # 41e9f <CSWTCH.18+0x7df>
   34d0e:	cmovne rcx,rax
   34d12:	xor    eax,eax
   34d14:	lea    r13,[rip+0x8e7f]        # 3db9a <_IO_stdin_used+0xb9a>
   34d1b:	call   37c0 <__fprintf_chk@plt>
   34d20:	test   BYTE PTR [r12],0x4
   34d25:	mov    esi,0x1
   34d2a:	mov    rdi,rbp
   34d2d:	lea    rcx,[r12+0x84]
   34d35:	lea    rdx,[rip+0xd16c]        # 41ea8 <CSWTCH.18+0x7e8>
   34d3c:	cmove  rcx,r13
   34d40:	xor    eax,eax
   34d42:	call   37c0 <__fprintf_chk@plt>
   34d47:	test   BYTE PTR [r12],0x8
   34d4c:	mov    esi,0x1
   34d51:	mov    rdi,rbp
   34d54:	lea    rcx,[r12+0xc4]
   34d5c:	lea    rdx,[rip+0xd14e]        # 41eb1 <CSWTCH.18+0x7f1>
   34d63:	cmove  rcx,r13
   34d67:	xor    eax,eax
   34d69:	call   37c0 <__fprintf_chk@plt>
   34d6e:	mov    ecx,ebx
   34d70:	lea    rdx,[rip+0xd143]        # 41eba <CSWTCH.18+0x7fa>
   34d77:	xor    eax,eax
   34d79:	mov    esi,0x1
   34d7e:	mov    rdi,rbp
   34d81:	call   37c0 <__fprintf_chk@plt>
   34d86:	mov    DWORD PTR [rsp+0x36],0x2f2f0a
   34d8e:	mov    DWORD PTR [rsp+0x18],0x0
   34d96:	mov    DWORD PTR [rsp+0x20],0x5
   34d9e:	mov    DWORD PTR [rsp+0x1c],0x32
   34da6:	mov    DWORD PTR [rsp+0x8],0xb
   34dae:	mov    DWORD PTR [rsp+0x14],0x0
   34db6:	jmp    34618 <WriteSeq+0xf8>
   34dbb:	lea    r14,[r12+0x4]
   34dc0:	mov    esi,0x1
   34dc5:	mov    rdi,rbp
   34dc8:	xor    eax,eax
   34dca:	mov    rcx,r14
   34dcd:	lea    rdx,[rip+0xdb51]        # 42925 <cof.6115+0x125>
   34dd4:	call   37c0 <__fprintf_chk@plt>
   34dd9:	mov    eax,DWORD PTR [r12]
   34ddd:	test   al,0x4
   34ddf:	jne    34fda <WriteSeq+0xaba>
   34de5:	test   al,0x8
   34de7:	jne    34fb7 <WriteSeq+0xa97>
   34ded:	mov    r9d,r13d
   34df0:	mov    r8d,ebx
   34df3:	mov    rcx,r14
   34df6:	mov    esi,0x1
   34dfb:	lea    rdx,[rip+0xd56e]        # 42370 <CSWTCH.18+0xcb0>
   34e02:	mov    rdi,rbp
   34e05:	xor    eax,eax
   34e07:	call   37c0 <__fprintf_chk@plt>
   34e0c:	mov    r9d,0xa
   34e12:	mov    WORD PTR [rsp+0x36],r9w
   34e18:	mov    DWORD PTR [rsp+0x18],0x0
   34e20:	mov    DWORD PTR [rsp+0x20],0x0
   34e28:	mov    DWORD PTR [rsp+0x1c],0x32
   34e30:	mov    DWORD PTR [rsp+0x8],0xb
   34e38:	mov    DWORD PTR [rsp+0x14],0x1
   34e40:	test   ebx,ebx
   34e42:	jg     34620 <WriteSeq+0x100>
   34e48:	nop    DWORD PTR [rax+rax*1+0x0]
   34e50:	mov    DWORD PTR [rsp+0x10],0x0
   34e58:	jmp    347f5 <WriteSeq+0x2d5>
   34e5d:	mov    r8d,ebx
   34e60:	lea    rcx,[r12+0x4]
   34e65:	mov    esi,0x1
   34e6a:	mov    rdi,rbp
   34e6d:	lea    rdx,[rip+0xcf38]        # 41dac <CSWTCH.18+0x6ec>
   34e74:	xor    eax,eax
   34e76:	lea    r13,[rip+0xcdb8]        # 41c35 <CSWTCH.18+0x575>
   34e7d:	call   37c0 <__fprintf_chk@plt>
   34e82:	test   BYTE PTR [r12],0x4
   34e87:	mov    esi,0x1
   34e8c:	mov    rdi,rbp
   34e8f:	lea    rcx,[r12+0x84]
   34e97:	lea    rdx,[rip+0xcf2a]        # 41dc8 <CSWTCH.18+0x708>
   34e9e:	cmove  rcx,r13
   34ea2:	xor    eax,eax
   34ea4:	call   37c0 <__fprintf_chk@plt>
   34ea9:	test   BYTE PTR [r12],0x8
   34eae:	mov    esi,0x1
   34eb3:	mov    rdi,rbp
   34eb6:	lea    rcx,[r12+0xc4]
   34ebe:	lea    rdx,[rip+0xcf13]        # 41dd8 <CSWTCH.18+0x718>
   34ec5:	cmove  rcx,r13
   34ec9:	xor    eax,eax
   34ecb:	call   37c0 <__fprintf_chk@plt>
   34ed0:	test   BYTE PTR [r12],0x2
   34ed5:	lea    rcx,[r12+0x44]
   34eda:	mov    rdi,rbp
   34edd:	cmove  rcx,r13
   34ee1:	lea    rdx,[rip+0xcf00]        # 41de8 <CSWTCH.18+0x728>
   34ee8:	mov    esi,0x1
   34eed:	xor    eax,eax
   34eef:	call   37c0 <__fprintf_chk@plt>
   34ef4:	mov    rcx,rbp
   34ef7:	mov    edx,0xd
   34efc:	mov    esi,0x1
   34f01:	lea    rdi,[rip+0xcef0]        # 41df8 <CSWTCH.18+0x738>
   34f08:	call   37b0 <fwrite@plt>
   34f0d:	mov    DWORD PTR [rsp+0x36],0x2f2f0a
   34f15:	jmp    34e18 <WriteSeq+0x8f8>
   34f1a:	mov    edx,0x9
   34f1f:	mov    esi,0x1
   34f24:	lea    rdi,[rip+0xcf65]        # 41e90 <CSWTCH.18+0x7d0>
   34f2b:	call   37b0 <fwrite@plt>
   34f30:	mov    DWORD PTR [rsp+0x18],0x1
   34f38:	jmp    34bf1 <WriteSeq+0x6d1>
   34f3d:	lea    r8,[rip+0xc4ec]        # 41430 <gki_primes+0x9b0>
   34f44:	jmp    34965 <WriteSeq+0x445>
   34f49:	lea    r8,[r12+0xc4]
   34f51:	mov    rcx,r13
   34f54:	mov    rdi,rbp
   34f57:	xor    eax,eax
   34f59:	lea    rdx,[rip+0xcf9b]        # 41efb <CSWTCH.18+0x83b>
   34f60:	mov    esi,0x1
   34f65:	call   37c0 <__fprintf_chk@plt>
   34f6a:	mov    rcx,r13
   34f6d:	mov    esi,0x1
   34f72:	mov    rdi,rbp
   34f75:	lea    rdx,[rip+0xd9a9]        # 42925 <cof.6115+0x125>
   34f7c:	xor    eax,eax
   34f7e:	call   37c0 <__fprintf_chk@plt>
   34f83:	mov    WORD PTR [rsp+0x36],0x31
   34f8a:	jmp    345f0 <WriteSeq+0xd0>
   34f8f:	nop
   34f90:	lea    rcx,[r12+0xc4]
   34f98:	lea    rdx,[rip+0xcee8]        # 41e87 <CSWTCH.18+0x7c7>
   34f9f:	mov    rdi,rbp
   34fa2:	xor    eax,eax
   34fa4:	mov    esi,0x1
   34fa9:	call   37c0 <__fprintf_chk@plt>
   34fae:	mov    eax,DWORD PTR [r12]
   34fb2:	jmp    34bc9 <WriteSeq+0x6a9>
   34fb7:	lea    rcx,[r12+0xc4]
   34fbf:	lea    rdx,[rip+0xce12]        # 41dd8 <CSWTCH.18+0x718>
   34fc6:	mov    rdi,rbp
   34fc9:	xor    eax,eax
   34fcb:	mov    esi,0x1
   34fd0:	call   37c0 <__fprintf_chk@plt>
   34fd5:	jmp    34ded <WriteSeq+0x8cd>
   34fda:	lea    rcx,[r12+0x84]
   34fe2:	lea    rdx,[rip+0xcddf]        # 41dc8 <CSWTCH.18+0x708>
   34fe9:	mov    rdi,rbp
   34fec:	xor    eax,eax
   34fee:	mov    esi,0x1
   34ff3:	call   37c0 <__fprintf_chk@plt>
   34ff8:	mov    eax,DWORD PTR [r12]
   34ffc:	jmp    34de5 <WriteSeq+0x8c5>
   35001:	call   3570 <__stack_chk_fail@plt>
   35006:	mov    r11d,r14d
   35009:	mov    r14d,eax
   3500c:	jmp    3475e <WriteSeq+0x23e>
   35011:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3501c:	nop    DWORD PTR [rax+0x0]

0000000000035020 <ReadMultipleRseqs>:
   35020:	endbr64 
   35024:	push   r15
   35026:	mov    r15d,esi
   35029:	mov    esi,0x6c4
   3502e:	push   r14
   35030:	push   r13
   35032:	push   r12
   35034:	push   rbp
   35035:	mov    rbp,rdi
   35038:	lea    rdi,[rip+0xcc2e]        # 41c6d <CSWTCH.18+0x5ad>
   3503f:	push   rbx
   35040:	sub    rsp,0x28
   35044:	mov    QWORD PTR [rsp+0x8],rdx
   35049:	mov    edx,0x80
   3504e:	mov    QWORD PTR [rsp+0x10],rcx
   35053:	mov    QWORD PTR [rsp+0x18],r8
   35058:	call   36810 <sre_malloc>
   3505d:	mov    edx,0x1680
   35062:	mov    esi,0x6c5
   35067:	lea    rdi,[rip+0xcbff]        # 41c6d <CSWTCH.18+0x5ad>
   3506e:	mov    r13,rax
   35071:	call   36810 <sre_malloc>
   35076:	xor    edx,edx
   35078:	mov    ecx,0xffffffff
   3507d:	mov    esi,r15d
   35080:	mov    rdi,rbp
   35083:	mov    r12,rax
   35086:	call   34070 <seqfile_open>
   3508b:	test   rax,rax
   3508e:	je     35168 <ReadMultipleRseqs+0x148>
   35094:	mov    DWORD PTR [rsp+0x4],0x10
   3509c:	mov    r15,rax
   3509f:	xor    ebx,ebx
   350a1:	xor    r14d,r14d
   350a4:	jmp    350bb <ReadMultipleRseqs+0x9b>
   350a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   350b0:	add    r14,0x1
   350b4:	add    rbx,0x168
   350bb:	lea    rcx,[r12+rbx*1]
   350bf:	lea    rdx,[r13+r14*8+0x0]
   350c4:	mov    rdi,r15
   350c7:	mov    ebp,r14d
   350ca:	mov    esi,DWORD PTR [r15+0x90]
   350d1:	call   327a0 <ReadSeq>
   350d6:	test   eax,eax
   350d8:	je     35130 <ReadMultipleRseqs+0x110>
   350da:	lea    eax,[r14+0x1]
   350de:	cmp    DWORD PTR [rsp+0x4],eax
   350e2:	jne    350b0 <ReadMultipleRseqs+0x90>
   350e4:	lea    eax,[rbp+0x11]
   350e7:	mov    rdx,r13
   350ea:	mov    esi,0x6ce
   350ef:	movsxd rbp,eax
   350f2:	lea    rdi,[rip+0xcb74]        # 41c6d <CSWTCH.18+0x5ad>
   350f9:	mov    DWORD PTR [rsp+0x4],eax
   350fd:	lea    rcx,[rbp*8+0x0]
   35105:	call   36860 <sre_realloc>
   3510a:	imul   rcx,rbp,0x168
   35111:	mov    rdx,r12
   35114:	mov    esi,0x6cf
   35119:	lea    rdi,[rip+0xcb4d]        # 41c6d <CSWTCH.18+0x5ad>
   35120:	mov    r13,rax
   35123:	call   36860 <sre_realloc>
   35128:	mov    r12,rax
   3512b:	jmp    350b0 <ReadMultipleRseqs+0x90>
   3512d:	nop    DWORD PTR [rax]
   35130:	mov    rdi,r15
   35133:	call   32370 <SeqfileClose>
   35138:	mov    rax,QWORD PTR [rsp+0x8]
   3513d:	mov    QWORD PTR [rax],r13
   35140:	mov    rax,QWORD PTR [rsp+0x10]
   35145:	mov    QWORD PTR [rax],r12
   35148:	mov    rax,QWORD PTR [rsp+0x18]
   3514d:	mov    DWORD PTR [rax],r14d
   35150:	add    rsp,0x28
   35154:	mov    eax,0x1
   35159:	pop    rbx
   3515a:	pop    rbp
   3515b:	pop    r12
   3515d:	pop    r13
   3515f:	pop    r14
   35161:	pop    r15
   35163:	ret    
   35164:	nop    DWORD PTR [rax+0x0]
   35168:	add    rsp,0x28
   3516c:	xor    eax,eax
   3516e:	pop    rbx
   3516f:	pop    rbp
   35170:	pop    r12
   35172:	pop    r13
   35174:	pop    r14
   35176:	pop    r15
   35178:	ret    
   35179:	nop    DWORD PTR [rax+0x0]

0000000000035180 <String2SeqfileFormat>:
   35180:	endbr64 
   35184:	push   r12
   35186:	xor    r12d,r12d
   35189:	push   rbp
   3518a:	sub    rsp,0x8
   3518e:	test   rdi,rdi
   35191:	je     351d0 <String2SeqfileFormat+0x50>
   35193:	mov    esi,0xffffffff
   35198:	mov    r12d,0x7
   3519e:	call   36ce0 <sre_strdup>
   351a3:	mov    rbp,rax
   351a6:	mov    rdi,rax
   351a9:	call   367e0 <s2upper>
   351ae:	mov    ecx,0x6
   351b3:	lea    rdi,[rip+0xcd49]        # 41f03 <CSWTCH.18+0x843>
   351ba:	mov    rsi,rbp
   351bd:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   351bf:	seta   al
   351c2:	sbb    al,0x0
   351c4:	test   al,al
   351c6:	jne    351e0 <String2SeqfileFormat+0x60>
   351c8:	mov    rdi,rbp
   351cb:	call   3460 <free@plt>
   351d0:	add    rsp,0x8
   351d4:	mov    eax,r12d
   351d7:	pop    rbp
   351d8:	pop    r12
   351da:	ret    
   351db:	nop    DWORD PTR [rax+rax*1+0x0]
   351e0:	mov    ecx,0x8
   351e5:	lea    rdi,[rip+0xcd1d]        # 41f09 <CSWTCH.18+0x849>
   351ec:	mov    rsi,rbp
   351ef:	mov    r12d,0x2
   351f5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   351f7:	seta   al
   351fa:	sbb    al,0x0
   351fc:	test   al,al
   351fe:	je     351c8 <String2SeqfileFormat+0x48>
   35200:	mov    ecx,0x5
   35205:	lea    rdi,[rip+0xcd05]        # 41f11 <CSWTCH.18+0x851>
   3520c:	mov    rsi,rbp
   3520f:	mov    r12d,0x4
   35215:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   35217:	seta   al
   3521a:	sbb    al,0x0
   3521c:	test   al,al
   3521e:	je     351c8 <String2SeqfileFormat+0x48>
   35220:	mov    ecx,0x4
   35225:	lea    rdi,[rip+0xccea]        # 41f16 <CSWTCH.18+0x856>
   3522c:	mov    rsi,rbp
   3522f:	mov    r12d,0x5
   35235:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   35237:	seta   al
   3523a:	sbb    al,0x0
   3523c:	test   al,al
   3523e:	je     351c8 <String2SeqfileFormat+0x48>
   35240:	mov    ecx,0x8
   35245:	lea    rdi,[rip+0xccce]        # 41f1a <CSWTCH.18+0x85a>
   3524c:	mov    rsi,rbp
   3524f:	mov    r12d,0x10
   35255:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   35257:	seta   al
   3525a:	sbb    al,0x0
   3525c:	test   al,al
   3525e:	je     351c8 <String2SeqfileFormat+0x48>
   35264:	mov    ecx,0x4
   35269:	lea    rdi,[rip+0xccbc]        # 41f2c <CSWTCH.18+0x86c>
   35270:	mov    rsi,rbp
   35273:	mov    r12d,0xd
   35279:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3527b:	seta   al
   3527e:	sbb    al,0x0
   35280:	test   al,al
   35282:	je     351c8 <String2SeqfileFormat+0x48>
   35288:	cmp    BYTE PTR [rbp+0x0],0x49
   3528c:	jne    352a4 <String2SeqfileFormat+0x124>
   3528e:	cmp    BYTE PTR [rbp+0x1],0x47
   35292:	jne    352a4 <String2SeqfileFormat+0x124>
   35294:	cmp    BYTE PTR [rbp+0x2],0x0
   35298:	mov    r12d,0x1
   3529e:	je     351c8 <String2SeqfileFormat+0x48>
   352a4:	mov    ecx,0x8
   352a9:	lea    rdi,[rip+0xcc72]        # 41f22 <CSWTCH.18+0x862>
   352b0:	mov    rsi,rbp
   352b3:	mov    r12d,0x6
   352b9:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   352bb:	seta   al
   352be:	sbb    al,0x0
   352c0:	test   al,al
   352c2:	je     351c8 <String2SeqfileFormat+0x48>
   352c8:	mov    ecx,0x6
   352cd:	lea    rdi,[rip+0xcc56]        # 41f2a <CSWTCH.18+0x86a>
   352d4:	mov    rsi,rbp
   352d7:	mov    r12d,0x9
   352dd:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   352df:	seta   al
   352e2:	sbb    al,0x0
   352e4:	test   al,al
   352e6:	je     351c8 <String2SeqfileFormat+0x48>
   352ec:	mov    ecx,0x6
   352f1:	lea    rdi,[rip+0xcc38]        # 41f30 <CSWTCH.18+0x870>
   352f8:	mov    rsi,rbp
   352fb:	mov    r12d,0x8
   35301:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   35303:	seta   al
   35306:	sbb    al,0x0
   35308:	test   al,al
   3530a:	je     351c8 <String2SeqfileFormat+0x48>
   35310:	lea    rsi,[rip+0xcc1f]        # 41f36 <CSWTCH.18+0x876>
   35317:	mov    rdi,rbp
   3531a:	mov    r12d,0xc
   35320:	call   3640 <strcmp@plt>
   35325:	test   eax,eax
   35327:	je     351c8 <String2SeqfileFormat+0x48>
   3532d:	lea    rsi,[rip+0xcc06]        # 41f3a <CSWTCH.18+0x87a>
   35334:	mov    rdi,rbp
   35337:	mov    r12d,0xe
   3533d:	call   3640 <strcmp@plt>
   35342:	test   eax,eax
   35344:	je     351c8 <String2SeqfileFormat+0x48>
   3534a:	lea    rsi,[rip+0xcbef]        # 41f40 <CSWTCH.18+0x880>
   35351:	mov    rdi,rbp
   35354:	mov    r12d,0x65
   3535a:	call   3640 <strcmp@plt>
   3535f:	test   eax,eax
   35361:	je     351c8 <String2SeqfileFormat+0x48>
   35367:	lea    rsi,[rip+0xcbdc]        # 41f4a <CSWTCH.18+0x88a>
   3536e:	mov    rdi,rbp
   35371:	mov    r12d,0x66
   35377:	call   3640 <strcmp@plt>
   3537c:	test   eax,eax
   3537e:	je     351c8 <String2SeqfileFormat+0x48>
   35384:	lea    rsi,[rip+0xcbc5]        # 41f50 <CSWTCH.18+0x890>
   3538b:	mov    rdi,rbp
   3538e:	mov    r12d,0x67
   35394:	call   3640 <strcmp@plt>
   35399:	test   eax,eax
   3539b:	je     351c8 <String2SeqfileFormat+0x48>
   353a1:	lea    rsi,[rip+0xb1b2]        # 4055a <defmq.7318+0x39a>
   353a8:	mov    rdi,rbp
   353ab:	mov    r12d,0x68
   353b1:	call   3640 <strcmp@plt>
   353b6:	test   eax,eax
   353b8:	je     351c8 <String2SeqfileFormat+0x48>
   353be:	lea    rsi,[rip+0xcb8f]        # 41f54 <CSWTCH.18+0x894>
   353c5:	mov    rdi,rbp
   353c8:	mov    r12d,0x69
   353ce:	call   3640 <strcmp@plt>
   353d3:	test   eax,eax
   353d5:	je     351c8 <String2SeqfileFormat+0x48>
   353db:	lea    rsi,[rip+0xcb76]        # 41f58 <CSWTCH.18+0x898>
   353e2:	mov    rdi,rbp
   353e5:	mov    r12d,0x6a
   353eb:	call   3640 <strcmp@plt>
   353f0:	test   eax,eax
   353f2:	je     351c8 <String2SeqfileFormat+0x48>
   353f8:	lea    rsi,[rip+0xb373]        # 40772 <defmq.7318+0x5b2>
   353ff:	mov    rdi,rbp
   35402:	call   3640 <strcmp@plt>
   35407:	cmp    eax,0x1
   3540a:	sbb    r12d,r12d
   3540d:	and    r12d,0x6b
   35411:	jmp    351c8 <String2SeqfileFormat+0x48>
   35416:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000035420 <SeqfileFormat2String>:
   35420:	endbr64 
   35424:	cmp    edi,0x6b
   35427:	ja     35440 <SeqfileFormat2String+0x20>
   35429:	lea    rdx,[rip+0xd118]        # 42548 <CSWTCH.18+0xe88>
   35430:	mov    edi,edi
   35432:	movsxd rax,DWORD PTR [rdx+rdi*4]
   35436:	add    rax,rdx
   35439:	notrack jmp rax
   3543c:	nop    DWORD PTR [rax+0x0]
   35440:	sub    rsp,0x8
   35444:	xor    eax,eax
   35446:	lea    rdi,[rip+0xcf83]        # 423d0 <CSWTCH.18+0xd10>
   3544d:	call   317f0 <Die>
   35452:	xor    eax,eax
   35454:	add    rsp,0x8
   35458:	ret    
   35459:	lea    rax,[rip+0xb312]        # 40772 <defmq.7318+0x5b2>
   35460:	ret    
   35461:	lea    rax,[rip+0xcb5c]        # 41fc4 <CSWTCH.18+0x904>
   35468:	ret    
   35469:	lea    rax,[rip+0xcb50]        # 41fc0 <CSWTCH.18+0x900>
   35470:	ret    
   35471:	lea    rax,[rip+0xcb40]        # 41fb8 <CSWTCH.18+0x8f8>
   35478:	ret    
   35479:	lea    rax,[rip+0xcad0]        # 41f50 <CSWTCH.18+0x890>
   35480:	ret    
   35481:	lea    rax,[rip+0xcac2]        # 41f4a <CSWTCH.18+0x88a>
   35488:	ret    
   35489:	lea    rax,[rip+0xcb1e]        # 41fae <CSWTCH.18+0x8ee>
   35490:	ret    
   35491:	lea    rax,[rip+0xcacf]        # 41f67 <CSWTCH.18+0x8a7>
   35498:	ret    
   35499:	lea    rax,[rip+0xca9a]        # 41f3a <CSWTCH.18+0x87a>
   354a0:	ret    
   354a1:	lea    rax,[rip+0xcad0]        # 41f78 <CSWTCH.18+0x8b8>
   354a8:	ret    
   354a9:	lea    rax,[rip+0xca86]        # 41f36 <CSWTCH.18+0x876>
   354b0:	ret    
   354b1:	lea    rax,[rip+0xcadf]        # 41f97 <CSWTCH.18+0x8d7>
   354b8:	ret    
   354b9:	lea    rax,[rip+0xcae8]        # 41fa8 <CSWTCH.18+0x8e8>
   354c0:	ret    
   354c1:	lea    rax,[rip+0xcac4]        # 41f8c <CSWTCH.18+0x8cc>
   354c8:	ret    
   354c9:	lea    rax,[rip+0xca46]        # 41f16 <CSWTCH.18+0x856>
   354d0:	ret    
   354d1:	lea    rax,[rip+0xca39]        # 41f11 <CSWTCH.18+0x851>
   354d8:	ret    
   354d9:	lea    rax,[rip+0xca7f]        # 41f5f <CSWTCH.18+0x89f>
   354e0:	ret    
   354e1:	lea    rax,[rip+0xca94]        # 41f7c <CSWTCH.18+0x8bc>
   354e8:	ret    
   354e9:	lea    rax,[rip+0x7edd]        # 3d3cd <_IO_stdin_used+0x3cd>
   354f0:	ret    
   354f1:	lea    rax,[rip+0xca0b]        # 41f03 <CSWTCH.18+0x843>
   354f8:	ret    
   354f9:	nop    DWORD PTR [rax+0x0]

0000000000035500 <MSAToSqinfo>:
   35500:	endbr64 
   35504:	push   r15
   35506:	mov    esi,0x741
   3550b:	push   r14
   3550d:	push   r13
   3550f:	push   r12
   35511:	push   rbp
   35512:	mov    rbp,rdi
   35515:	push   rbx
   35516:	sub    rsp,0x8
   3551a:	movsxd rdx,DWORD PTR [rdi+0x1c]
   3551e:	lea    rdi,[rip+0xc748]        # 41c6d <CSWTCH.18+0x5ad>
   35525:	imul   rdx,rdx,0x168
   3552c:	call   36810 <sre_malloc>
   35531:	mov    edx,DWORD PTR [rbp+0x1c]
   35534:	mov    r14,rax
   35537:	test   edx,edx
   35539:	jle    35639 <MSAToSqinfo+0x139>
   3553f:	mov    rbx,rax
   35542:	xor    r12d,r12d
   35545:	nop    DWORD PTR [rax]
   35548:	mov    rax,QWORD PTR [rbp+0x8]
   3554c:	mov    DWORD PTR [rbx],0x0
   35552:	mov    r15d,r12d
   35555:	lea    r13,[r12*8+0x0]
   3555d:	mov    rsi,QWORD PTR [rax+r12*8]
   35561:	test   rsi,rsi
   35564:	je     35573 <MSAToSqinfo+0x73>
   35566:	mov    edx,0x1
   3556b:	mov    rdi,rbx
   3556e:	call   31f60 <SetSeqinfoString.part.0>
   35573:	mov    esi,r15d
   35576:	mov    rdi,rbp
   35579:	call   2d2f0 <MSAGetSeqAccession>
   3557e:	mov    rsi,rax
   35581:	test   rax,rax
   35584:	je     35593 <MSAToSqinfo+0x93>
   35586:	mov    edx,0x4
   3558b:	mov    rdi,rbx
   3558e:	call   31f60 <SetSeqinfoString.part.0>
   35593:	mov    esi,r15d
   35596:	mov    rdi,rbp
   35599:	call   2d310 <MSAGetSeqDescription>
   3559e:	mov    rsi,rax
   355a1:	test   rax,rax
   355a4:	je     355b3 <MSAToSqinfo+0xb3>
   355a6:	mov    edx,0x8
   355ab:	mov    rdi,rbx
   355ae:	call   31f60 <SetSeqinfoString.part.0>
   355b3:	mov    rdx,QWORD PTR [rbp+0x0]
   355b7:	mov    rax,QWORD PTR [rbp+0x70]
   355bb:	mov    rdi,QWORD PTR [rdx+r13*1]
   355bf:	test   rax,rax
   355c2:	je     355ea <MSAToSqinfo+0xea>
   355c4:	mov    rdx,QWORD PTR [rax+r13*1]
   355c8:	test   rdx,rdx
   355cb:	je     355ea <MSAToSqinfo+0xea>
   355cd:	mov    esi,DWORD PTR [rbp+0x18]
   355d0:	lea    rcx,[rbx+0x158]
   355d7:	call   24f30 <MakeDealignedString>
   355dc:	mov    rax,QWORD PTR [rbp+0x0]
   355e0:	or     DWORD PTR [rbx],0x200
   355e6:	mov    rdi,QWORD PTR [rax+r13*1]
   355ea:	mov    rax,QWORD PTR [rbp+0x78]
   355ee:	test   rax,rax
   355f1:	je     35619 <MSAToSqinfo+0x119>
   355f3:	mov    rdx,QWORD PTR [rax+r13*1]
   355f7:	test   rdx,rdx
   355fa:	je     35619 <MSAToSqinfo+0x119>
   355fc:	mov    esi,DWORD PTR [rbp+0x18]
   355ff:	lea    rcx,[rbx+0x160]
   35606:	call   24f30 <MakeDealignedString>
   3560b:	mov    rax,QWORD PTR [rbp+0x0]
   3560f:	or     DWORD PTR [rbx],0x400
   35615:	mov    rdi,QWORD PTR [rax+r13*1]
   35619:	call   25030 <DealignedLength>
   3561e:	add    r12,0x1
   35622:	or     DWORD PTR [rbx],0x40
   35625:	add    rbx,0x168
   3562c:	mov    DWORD PTR [rbx-0x24],eax
   3562f:	cmp    DWORD PTR [rbp+0x1c],r12d
   35633:	jg     35548 <MSAToSqinfo+0x48>
   35639:	add    rsp,0x8
   3563d:	mov    rax,r14
   35640:	pop    rbx
   35641:	pop    rbp
   35642:	pop    r12
   35644:	pop    r13
   35646:	pop    r14
   35648:	pop    r15
   3564a:	ret    
   3564b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000035650 <SqdBanner>:
   35650:	endbr64 
   35654:	push   r12
   35656:	mov    rcx,rsi
   35659:	mov    r12,rdi
   3565c:	lea    rdx,[rip+0xd2c2]        # 42925 <cof.6115+0x125>
   35663:	mov    esi,0x1
   35668:	xor    eax,eax
   3566a:	call   37c0 <__fprintf_chk@plt>
   3566f:	mov    rdi,r12
   35672:	mov    esi,0x1
   35677:	xor    eax,eax
   35679:	lea    r8,[rip+0xd078]        # 426f8 <CSWTCH.18+0x1038>
   35680:	lea    rcx,[rip+0xd07e]        # 42705 <CSWTCH.18+0x1045>
   35687:	lea    rdx,[rip+0xd07c]        # 4270a <CSWTCH.18+0x104a>
   3568e:	call   37c0 <__fprintf_chk@plt>
   35693:	mov    rdi,r12
   35696:	mov    esi,0x1
   3569b:	xor    eax,eax
   3569d:	lea    rcx,[rip+0x9f2c]        # 3f5d0 <xpam120+0x870>
   356a4:	lea    rdx,[rip+0xd27a]        # 42925 <cof.6115+0x125>
   356ab:	call   37c0 <__fprintf_chk@plt>
   356b0:	mov    rdi,r12
   356b3:	mov    esi,0x1
   356b8:	xor    eax,eax
   356ba:	lea    rcx,[rip+0x9f57]        # 3f618 <xpam120+0x8b8>
   356c1:	lea    rdx,[rip+0xd25d]        # 42925 <cof.6115+0x125>
   356c8:	call   37c0 <__fprintf_chk@plt>
   356cd:	mov    rcx,r12
   356d0:	pop    r12
   356d2:	mov    edx,0x48
   356d7:	mov    esi,0x1
   356dc:	lea    rdi,[rip+0x9f75]        # 3f658 <xpam120+0x8f8>
   356e3:	jmp    37b0 <fwrite@plt>
   356e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000356f0 <sre_tolower>:
   356f0:	endbr64 
   356f4:	push   r12
   356f6:	push   rbx
   356f7:	movsxd rbx,edi
   356fa:	mov    r12,rbx
   356fd:	sub    rsp,0x8
   35701:	call   3820 <__ctype_b_loc@plt>
   35706:	mov    rax,QWORD PTR [rax]
   35709:	test   BYTE PTR [rax+rbx*2+0x1],0x1
   3570e:	je     35729 <sre_tolower+0x39>
   35710:	lea    eax,[rbx+0x80]
   35716:	cmp    eax,0x17f
   3571b:	ja     35729 <sre_tolower+0x39>
   3571d:	call   3810 <__ctype_tolower_loc@plt>
   35722:	mov    rax,QWORD PTR [rax]
   35725:	mov    r12d,DWORD PTR [rax+rbx*4]
   35729:	add    rsp,0x8
   3572d:	mov    eax,r12d
   35730:	pop    rbx
   35731:	pop    r12
   35733:	ret    
   35734:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3573f:	nop

0000000000035740 <sre_toupper>:
   35740:	endbr64 
   35744:	push   r12
   35746:	push   rbx
   35747:	movsxd rbx,edi
   3574a:	mov    r12,rbx
   3574d:	sub    rsp,0x8
   35751:	call   3820 <__ctype_b_loc@plt>
   35756:	mov    rax,QWORD PTR [rax]
   35759:	test   BYTE PTR [rax+rbx*2+0x1],0x2
   3575e:	je     35779 <sre_toupper+0x39>
   35760:	lea    eax,[rbx+0x80]
   35766:	cmp    eax,0x17f
   3576b:	ja     35779 <sre_toupper+0x39>
   3576d:	call   3440 <__ctype_toupper_loc@plt>
   35772:	mov    rax,QWORD PTR [rax]
   35775:	mov    r12d,DWORD PTR [rax+rbx*4]
   35779:	add    rsp,0x8
   3577d:	mov    eax,r12d
   35780:	pop    rbx
   35781:	pop    r12
   35783:	ret    
   35784:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3578e:	xchg   ax,ax

0000000000035790 <Linefit>:
   35790:	endbr64 
   35794:	pxor   xmm1,xmm1
   35798:	sub    rsp,0x28
   3579c:	cvtsi2ss xmm1,edx
   357a0:	test   edx,edx
   357a2:	jle    35890 <Linefit+0x100>
   357a8:	pxor   xmm0,xmm0
   357ac:	sub    edx,0x1
   357af:	xor    eax,eax
   357b1:	movaps xmm3,xmm0
   357b4:	nop    DWORD PTR [rax+0x0]
   357b8:	mov    r10,rax
   357bb:	addss  xmm3,DWORD PTR [rdi+rax*4]
   357c0:	addss  xmm0,DWORD PTR [rsi+rax*4]
   357c5:	add    rax,0x1
   357c9:	cmp    rdx,r10
   357cc:	jne    357b8 <Linefit+0x28>
   357ce:	divss  xmm3,xmm1
   357d2:	pxor   xmm4,xmm4
   357d6:	xor    eax,eax
   357d8:	movaps xmm7,xmm4
   357db:	movaps xmm6,xmm4
   357de:	divss  xmm0,xmm1
   357e2:	nop    WORD PTR [rax+rax*1+0x0]
   357e8:	movss  xmm1,DWORD PTR [rdi+rax*4]
   357ed:	mov    r10,rax
   357f0:	subss  xmm1,xmm3
   357f4:	movaps xmm2,xmm1
   357f7:	mulss  xmm2,xmm1
   357fb:	addss  xmm6,xmm2
   357ff:	movss  xmm2,DWORD PTR [rsi+rax*4]
   35804:	add    rax,0x1
   35808:	movaps xmm5,xmm2
   3580b:	subss  xmm2,xmm3
   3580f:	subss  xmm5,xmm0
   35813:	mulss  xmm2,xmm5
   35817:	mulss  xmm1,xmm5
   3581b:	addss  xmm7,xmm2
   3581f:	addss  xmm4,xmm1
   35823:	cmp    rdx,r10
   35826:	jne    357e8 <Linefit+0x58>
   35828:	movaps xmm1,xmm4
   3582b:	pxor   xmm2,xmm2
   3582f:	cvtss2sd xmm4,xmm4
   35833:	divss  xmm1,xmm6
   35837:	cvtss2sd xmm6,xmm6
   3583b:	ucomisd xmm2,xmm6
   3583f:	mulss  xmm3,xmm1
   35843:	movss  DWORD PTR [r8],xmm1
   35848:	subss  xmm0,xmm3
   3584c:	movapd xmm3,xmm6
   35850:	sqrtsd xmm3,xmm3
   35854:	movss  DWORD PTR [rcx],xmm0
   35858:	ja     358c1 <Linefit+0x131>
   3585a:	cvtss2sd xmm7,xmm7
   3585e:	ucomisd xmm2,xmm7
   35862:	movapd xmm1,xmm7
   35866:	sqrtsd xmm1,xmm1
   3586a:	ja     35903 <Linefit+0x173>
   35870:	movapd xmm0,xmm1
   35874:	mov    eax,0x1
   35879:	mulsd  xmm0,xmm3
   3587d:	divsd  xmm4,xmm0
   35881:	cvtsd2ss xmm4,xmm4
   35885:	movss  DWORD PTR [r9],xmm4
   3588a:	add    rsp,0x28
   3588e:	ret    
   3588f:	nop
   35890:	pxor   xmm0,xmm0
   35894:	pxor   xmm3,xmm3
   35898:	movaps xmm7,xmm0
   3589b:	movapd xmm4,xmm3
   3589f:	divss  xmm7,xmm1
   358a3:	divss  xmm0,xmm0
   358a7:	movaps xmm1,xmm7
   358aa:	movss  DWORD PTR [r8],xmm0
   358af:	mulss  xmm0,xmm7
   358b3:	subss  xmm1,xmm0
   358b7:	movss  DWORD PTR [rcx],xmm1
   358bb:	movapd xmm1,xmm3
   358bf:	jmp    35870 <Linefit+0xe0>
   358c1:	movapd xmm0,xmm6
   358c5:	mov    QWORD PTR [rsp+0x18],r9
   358ca:	movss  DWORD PTR [rsp+0x10],xmm7
   358d0:	movsd  QWORD PTR [rsp+0x8],xmm3
   358d6:	movsd  QWORD PTR [rsp],xmm4
   358db:	call   37e0 <sqrt@plt>
   358e0:	movss  xmm7,DWORD PTR [rsp+0x10]
   358e6:	mov    r9,QWORD PTR [rsp+0x18]
   358eb:	pxor   xmm2,xmm2
   358ef:	movsd  xmm3,QWORD PTR [rsp+0x8]
   358f5:	movsd  xmm4,QWORD PTR [rsp]
   358fa:	cvtss2sd xmm7,xmm7
   358fe:	jmp    3585e <Linefit+0xce>
   35903:	movapd xmm0,xmm7
   35907:	mov    QWORD PTR [rsp+0x18],r9
   3590c:	movsd  QWORD PTR [rsp+0x10],xmm3
   35912:	movsd  QWORD PTR [rsp+0x8],xmm4
   35918:	movsd  QWORD PTR [rsp],xmm1
   3591d:	call   37e0 <sqrt@plt>
   35922:	mov    r9,QWORD PTR [rsp+0x18]
   35927:	movsd  xmm3,QWORD PTR [rsp+0x10]
   3592d:	movsd  xmm4,QWORD PTR [rsp+0x8]
   35933:	movsd  xmm1,QWORD PTR [rsp]
   35938:	jmp    35870 <Linefit+0xe0>
   3593d:	nop    DWORD PTR [rax]

0000000000035940 <WeightedLinefit>:
   35940:	endbr64 
   35944:	test   ecx,ecx
   35946:	jle    35a40 <WeightedLinefit+0x100>
   3594c:	pxor   xmm3,xmm3
   35950:	lea    r10d,[rcx-0x1]
   35954:	xor    eax,eax
   35956:	movsd  xmm8,QWORD PTR [rip+0x8491]        # 3ddf0 <_IO_stdin_used+0xdf0>
   3595f:	movapd xmm7,xmm3
   35963:	movapd xmm6,xmm3
   35967:	movapd xmm5,xmm3
   3596b:	movapd xmm4,xmm3
   3596f:	nop
   35970:	movss  xmm1,DWORD PTR [rdx+rax*4]
   35975:	pxor   xmm0,xmm0
   35979:	movapd xmm2,xmm8
   3597e:	mov    rcx,rax
   35981:	movss  xmm9,DWORD PTR [rsi+rax*4]
   35987:	cvtss2sd xmm0,xmm1
   3598b:	divsd  xmm2,xmm0
   3598f:	movss  xmm0,DWORD PTR [rdi+rax*4]
   35994:	add    rax,0x1
   35998:	addsd  xmm4,xmm2
   3599c:	movaps xmm2,xmm0
   3599f:	divss  xmm2,xmm1
   359a3:	cvtss2sd xmm2,xmm2
   359a7:	addsd  xmm5,xmm2
   359ab:	movaps xmm2,xmm9
   359af:	divss  xmm2,xmm1
   359b3:	cvtss2sd xmm2,xmm2
   359b7:	addsd  xmm6,xmm2
   359bb:	movaps xmm2,xmm0
   359be:	mulss  xmm2,xmm0
   359c2:	mulss  xmm0,xmm9
   359c7:	divss  xmm2,xmm1
   359cb:	divss  xmm0,xmm1
   359cf:	cvtss2sd xmm2,xmm2
   359d3:	addsd  xmm7,xmm2
   359d7:	cvtss2sd xmm0,xmm0
   359db:	addsd  xmm3,xmm0
   359df:	cmp    r10,rcx
   359e2:	jne    35970 <WeightedLinefit+0x30>
   359e4:	movapd xmm0,xmm6
   359e8:	movapd xmm1,xmm5
   359ec:	mulsd  xmm1,xmm3
   359f0:	mulsd  xmm0,xmm7
   359f4:	mulsd  xmm3,xmm4
   359f8:	mulsd  xmm6,xmm5
   359fc:	mulsd  xmm4,xmm7
   35a00:	mulsd  xmm5,xmm5
   35a04:	subsd  xmm0,xmm1
   35a08:	movapd xmm1,xmm0
   35a0c:	movapd xmm0,xmm3
   35a10:	subsd  xmm0,xmm6
   35a14:	subsd  xmm4,xmm5
   35a18:	divsd  xmm0,xmm4
   35a1c:	divsd  xmm1,xmm4
   35a20:	cvtsd2ss xmm0,xmm0
   35a24:	movss  DWORD PTR [r8],xmm0
   35a29:	pxor   xmm0,xmm0
   35a2d:	cvtsd2ss xmm0,xmm1
   35a31:	movss  DWORD PTR [r9],xmm0
   35a36:	ret    
   35a37:	nop    WORD PTR [rax+rax*1+0x0]
   35a40:	pxor   xmm4,xmm4
   35a44:	movapd xmm0,xmm4
   35a48:	movapd xmm1,xmm4
   35a4c:	jmp    35a18 <WeightedLinefit+0xd8>
   35a4e:	xchg   ax,ax

0000000000035a50 <Gammln>:
   35a50:	endbr64 
   35a54:	pxor   xmm1,xmm1
   35a58:	comisd xmm1,xmm0
   35a5c:	jae    35b30 <Gammln+0xe0>
   35a62:	sub    rsp,0x28
   35a66:	movsd  xmm4,QWORD PTR [rip+0x8382]        # 3ddf0 <_IO_stdin_used+0xdf0>
   35a6e:	movapd xmm3,xmm0
   35a72:	movsd  xmm5,QWORD PTR [rip+0xcdee]        # 42868 <cof.6115+0x68>
   35a7a:	lea    rax,[rip+0xcdc7]        # 42848 <cof.6115+0x48>
   35a81:	movsd  xmm0,QWORD PTR [rip+0xcdcf]        # 42858 <cof.6115+0x58>
   35a89:	subsd  xmm3,xmm4
   35a8d:	lea    rdx,[rax-0x50]
   35a91:	movapd xmm2,xmm4
   35a95:	addsd  xmm5,xmm3
   35a99:	movapd xmm1,xmm5
   35a9d:	jmp    35aa8 <Gammln+0x58>
   35a9f:	nop
   35aa0:	movsd  xmm0,QWORD PTR [rax]
   35aa4:	sub    rax,0x8
   35aa8:	divsd  xmm0,xmm1
   35aac:	subsd  xmm1,xmm4
   35ab0:	addsd  xmm2,xmm0
   35ab4:	cmp    rax,rdx
   35ab7:	jne    35aa0 <Gammln+0x50>
   35ab9:	movapd xmm0,xmm2
   35abd:	movsd  QWORD PTR [rsp+0x18],xmm3
   35ac3:	movsd  QWORD PTR [rsp+0x10],xmm5
   35ac9:	call   35e0 <log@plt>
   35ace:	movsd  xmm5,QWORD PTR [rsp+0x10]
   35ad4:	addsd  xmm5,QWORD PTR [rip+0x8304]        # 3dde0 <_IO_stdin_used+0xde0>
   35adc:	movsd  QWORD PTR [rsp+0x8],xmm0
   35ae2:	movapd xmm0,xmm5
   35ae6:	movsd  QWORD PTR [rsp+0x10],xmm5
   35aec:	call   35e0 <log@plt>
   35af1:	movsd  xmm6,QWORD PTR [rip+0x82e7]        # 3dde0 <_IO_stdin_used+0xde0>
   35af9:	movsd  xmm3,QWORD PTR [rsp+0x18]
   35aff:	movapd xmm1,xmm0
   35b03:	movsd  xmm5,QWORD PTR [rsp+0x10]
   35b09:	addsd  xmm6,xmm3
   35b0d:	movapd xmm0,xmm6
   35b11:	mulsd  xmm0,xmm1
   35b15:	addsd  xmm0,QWORD PTR [rip+0xcd53]        # 42870 <cof.6115+0x70>
   35b1d:	subsd  xmm0,xmm5
   35b21:	addsd  xmm0,QWORD PTR [rsp+0x8]
   35b27:	add    rsp,0x28
   35b2b:	ret    
   35b2c:	nop    DWORD PTR [rax+0x0]
   35b30:	movsd  xmm0,QWORD PTR [rip+0xcd28]        # 42860 <cof.6115+0x60>
   35b38:	ret    
   35b39:	nop    DWORD PTR [rax+0x0]

0000000000035b40 <FMX2Alloc>:
   35b40:	endbr64 
   35b44:	push   r13
   35b46:	movsxd r13,edi
   35b49:	lea    rdi,[rip+0xcbc9]        # 42719 <CSWTCH.18+0x1059>
   35b50:	push   r12
   35b52:	lea    rdx,[r13*8+0x0]
   35b5a:	push   rbp
   35b5b:	push   rbx
   35b5c:	movsxd rbx,esi
   35b5f:	mov    esi,0xac
   35b64:	shl    rbx,0x2
   35b68:	sub    rsp,0x8
   35b6c:	call   36810 <sre_malloc>
   35b71:	mov    rdx,r13
   35b74:	mov    esi,0xad
   35b79:	lea    rdi,[rip+0xcb99]        # 42719 <CSWTCH.18+0x1059>
   35b80:	imul   rdx,rbx
   35b84:	mov    r12,rax
   35b87:	call   36810 <sre_malloc>
   35b8c:	mov    QWORD PTR [r12],rax
   35b90:	cmp    r13d,0x1
   35b94:	jle    35bc7 <FMX2Alloc+0x87>
   35b96:	lea    ecx,[r13-0x2]
   35b9a:	lea    rdx,[r12+0x8]
   35b9f:	lea    rsi,[r12+rcx*8+0x10]
   35ba4:	mov    rcx,rbx
   35ba7:	jmp    35bb4 <FMX2Alloc+0x74>
   35ba9:	nop    DWORD PTR [rax+0x0]
   35bb0:	mov    rax,QWORD PTR [r12]
   35bb4:	add    rax,rcx
   35bb7:	add    rdx,0x8
   35bbb:	add    rcx,rbx
   35bbe:	mov    QWORD PTR [rdx-0x8],rax
   35bc2:	cmp    rdx,rsi
   35bc5:	jne    35bb0 <FMX2Alloc+0x70>
   35bc7:	add    rsp,0x8
   35bcb:	mov    rax,r12
   35bce:	pop    rbx
   35bcf:	pop    rbp
   35bd0:	pop    r12
   35bd2:	pop    r13
   35bd4:	ret    
   35bd5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000035be0 <FMX2Free>:
   35be0:	endbr64 
   35be4:	push   rbp
   35be5:	mov    rbp,rdi
   35be8:	mov    rdi,QWORD PTR [rdi]
   35beb:	call   3460 <free@plt>
   35bf0:	mov    rdi,rbp
   35bf3:	pop    rbp
   35bf4:	jmp    3460 <free@plt>
   35bf9:	nop    DWORD PTR [rax+0x0]

0000000000035c00 <DMX2Alloc>:
   35c00:	endbr64 
   35c04:	push   r13
   35c06:	movsxd r13,edi
   35c09:	lea    rdi,[rip+0xcb09]        # 42719 <CSWTCH.18+0x1059>
   35c10:	push   r12
   35c12:	lea    rdx,[r13*8+0x0]
   35c1a:	push   rbp
   35c1b:	push   rbx
   35c1c:	movsxd rbx,esi
   35c1f:	mov    esi,0xbe
   35c24:	shl    rbx,0x3
   35c28:	sub    rsp,0x8
   35c2c:	call   36810 <sre_malloc>
   35c31:	mov    rdx,r13
   35c34:	mov    esi,0xbf
   35c39:	lea    rdi,[rip+0xcad9]        # 42719 <CSWTCH.18+0x1059>
   35c40:	imul   rdx,rbx
   35c44:	mov    r12,rax
   35c47:	call   36810 <sre_malloc>
   35c4c:	mov    QWORD PTR [r12],rax
   35c50:	cmp    r13d,0x1
   35c54:	jle    35c87 <DMX2Alloc+0x87>
   35c56:	lea    ecx,[r13-0x2]
   35c5a:	lea    rdx,[r12+0x8]
   35c5f:	lea    rsi,[r12+rcx*8+0x10]
   35c64:	mov    rcx,rbx
   35c67:	jmp    35c74 <DMX2Alloc+0x74>
   35c69:	nop    DWORD PTR [rax+0x0]
   35c70:	mov    rax,QWORD PTR [r12]
   35c74:	add    rax,rcx
   35c77:	add    rdx,0x8
   35c7b:	add    rcx,rbx
   35c7e:	mov    QWORD PTR [rdx-0x8],rax
   35c82:	cmp    rdx,rsi
   35c85:	jne    35c70 <DMX2Alloc+0x70>
   35c87:	add    rsp,0x8
   35c8b:	mov    rax,r12
   35c8e:	pop    rbx
   35c8f:	pop    rbp
   35c90:	pop    r12
   35c92:	pop    r13
   35c94:	ret    
   35c95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000035ca0 <DMX2Free>:
   35ca0:	endbr64 
   35ca4:	push   rbp
   35ca5:	mov    rbp,rdi
   35ca8:	mov    rdi,QWORD PTR [rdi]
   35cab:	call   3460 <free@plt>
   35cb0:	mov    rdi,rbp
   35cb3:	pop    rbp
   35cb4:	jmp    3460 <free@plt>
   35cb9:	nop    DWORD PTR [rax+0x0]

0000000000035cc0 <FMX2Multiply>:
   35cc0:	endbr64 
   35cc4:	mov    eax,ecx
   35cc6:	test   ecx,ecx
   35cc8:	jle    35d7a <FMX2Multiply+0xba>
   35cce:	push   r14
   35cd0:	sub    eax,0x1
   35cd3:	mov    ecx,r8d
   35cd6:	pxor   xmm2,xmm2
   35cda:	push   r13
   35cdc:	lea    r13,[rdi+rax*8+0x8]
   35ce1:	push   r12
   35ce3:	mov    r12d,r9d
   35ce6:	mov    r9,rdi
   35ce9:	push   rbp
   35cea:	lea    eax,[r12-0x1]
   35cef:	mov    rbp,rdx
   35cf2:	movsxd rdx,r8d
   35cf5:	push   rbx
   35cf6:	lea    r11,[rsi+rdx*8]
   35cfa:	lea    rbx,[rdx*4+0x0]
   35d02:	lea    r14,[rax*4+0x4]
   35d0a:	nop    WORD PTR [rax+rax*1+0x0]
   35d10:	test   r12d,r12d
   35d13:	jle    35d64 <FMX2Multiply+0xa4>
   35d15:	mov    rdx,QWORD PTR [rbp+0x0]
   35d19:	xor    r8d,r8d
   35d1c:	lea    r10,[r14+rdx*1]
   35d20:	mov    DWORD PTR [rdx],0x0
   35d26:	test   ecx,ecx
   35d28:	jle    35d57 <FMX2Multiply+0x97>
   35d2a:	mov    rdi,QWORD PTR [r9]
   35d2d:	mov    rsi,QWORD PTR [r11]
   35d30:	movaps xmm1,xmm2
   35d33:	xor    eax,eax
   35d35:	add    rdi,rbx
   35d38:	add    rsi,r8
   35d3b:	nop    DWORD PTR [rax+rax*1+0x0]
   35d40:	movss  xmm0,DWORD PTR [rdi]
   35d44:	mulss  xmm0,DWORD PTR [rsi]
   35d48:	add    eax,0x1
   35d4b:	addss  xmm1,xmm0
   35d4f:	movss  DWORD PTR [rdx],xmm1
   35d53:	cmp    ecx,eax
   35d55:	jne    35d40 <FMX2Multiply+0x80>
   35d57:	add    rdx,0x4
   35d5b:	add    r8,0x4
   35d5f:	cmp    r10,rdx
   35d62:	jne    35d20 <FMX2Multiply+0x60>
   35d64:	add    r9,0x8
   35d68:	add    rbp,0x8
   35d6c:	cmp    r9,r13
   35d6f:	jne    35d10 <FMX2Multiply+0x50>
   35d71:	pop    rbx
   35d72:	pop    rbp
   35d73:	pop    r12
   35d75:	pop    r13
   35d77:	pop    r14
   35d79:	ret    
   35d7a:	ret    
   35d7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000035d80 <IncompleteGamma>:
   35d80:	endbr64 
   35d84:	pxor   xmm11,xmm11
   35d89:	sub    rsp,0x28
   35d8d:	movapd xmm7,xmm0
   35d91:	comisd xmm11,xmm0
   35d96:	jae    35ff0 <IncompleteGamma+0x270>
   35d9c:	comisd xmm11,xmm1
   35da1:	ja     35fc0 <IncompleteGamma+0x240>
   35da7:	movsd  xmm10,QWORD PTR [rip+0x8040]        # 3ddf0 <_IO_stdin_used+0xdf0>
   35db0:	movapd xmm0,xmm7
   35db4:	addsd  xmm0,xmm10
   35db9:	comisd xmm1,xmm0
   35dbd:	jbe    35ee8 <IncompleteGamma+0x168>
   35dc3:	movapd xmm2,xmm1
   35dc7:	movapd xmm12,xmm10
   35dcc:	movapd xmm4,xmm11
   35dd1:	movq   xmm9,QWORD PTR [rip+0x8f56]        # 3ed30 <_IO_stdin_used+0x1d30>
   35dda:	movsd  xmm8,QWORD PTR [rip+0x8025]        # 3de08 <_IO_stdin_used+0xe08>
   35de3:	movapd xmm13,xmm10
   35de8:	mov    eax,0x1
   35ded:	jmp    35e01 <IncompleteGamma+0x81>
   35def:	nop
   35df0:	add    eax,0x1
   35df3:	cmp    eax,0x64
   35df6:	je     36020 <IncompleteGamma+0x2a0>
   35dfc:	movapd xmm13,xmm3
   35e01:	pxor   xmm5,xmm5
   35e05:	movapd xmm3,xmm1
   35e09:	cvtsi2sd xmm5,eax
   35e0d:	movapd xmm6,xmm5
   35e11:	movapd xmm0,xmm5
   35e15:	subsd  xmm6,xmm7
   35e19:	mulsd  xmm0,xmm13
   35e1e:	mulsd  xmm4,xmm6
   35e22:	mulsd  xmm6,xmm12
   35e27:	addsd  xmm4,xmm13
   35e2c:	addsd  xmm6,xmm2
   35e30:	mulsd  xmm2,xmm5
   35e34:	mulsd  xmm3,xmm4
   35e38:	movapd xmm12,xmm6
   35e3d:	addsd  xmm3,xmm0
   35e41:	movapd xmm0,xmm1
   35e45:	mulsd  xmm0,xmm6
   35e49:	addsd  xmm2,xmm0
   35e4d:	ucomisd xmm2,xmm11
   35e52:	jp     35e56 <IncompleteGamma+0xd6>
   35e54:	je     35e68 <IncompleteGamma+0xe8>
   35e56:	divsd  xmm4,xmm2
   35e5a:	divsd  xmm12,xmm2
   35e5f:	divsd  xmm3,xmm2
   35e63:	movapd xmm2,xmm10
   35e68:	movapd xmm5,xmm3
   35e6c:	subsd  xmm5,xmm13
   35e71:	divsd  xmm5,xmm3
   35e75:	andpd  xmm5,xmm9
   35e7a:	comisd xmm8,xmm5
   35e7f:	jbe    35df0 <IncompleteGamma+0x70>
   35e85:	movapd xmm0,xmm1
   35e89:	movsd  QWORD PTR [rsp+0x10],xmm3
   35e8f:	movsd  QWORD PTR [rsp+0x18],xmm7
   35e95:	movsd  QWORD PTR [rsp+0x8],xmm1
   35e9b:	call   35e0 <log@plt>
   35ea0:	movsd  xmm7,QWORD PTR [rsp+0x18]
   35ea6:	movsd  xmm1,QWORD PTR [rsp+0x8]
   35eac:	mulsd  xmm0,xmm7
   35eb0:	subsd  xmm0,xmm1
   35eb4:	movsd  QWORD PTR [rsp+0x8],xmm0
   35eba:	movapd xmm0,xmm7
   35ebe:	call   35a50 <Gammln>
   35ec3:	movsd  xmm1,QWORD PTR [rsp+0x8]
   35ec9:	subsd  xmm1,xmm0
   35ecd:	movapd xmm0,xmm1
   35ed1:	call   3800 <exp@plt>
   35ed6:	movsd  xmm3,QWORD PTR [rsp+0x10]
   35edc:	add    rsp,0x28
   35ee0:	mulsd  xmm0,xmm3
   35ee4:	ret    
   35ee5:	nop    DWORD PTR [rax]
   35ee8:	movapd xmm0,xmm10
   35eed:	mov    eax,0x1
   35ef2:	movq   xmm9,QWORD PTR [rip+0x8e35]        # 3ed30 <_IO_stdin_used+0x1d30>
   35efb:	movsd  xmm8,QWORD PTR [rip+0x7f04]        # 3de08 <_IO_stdin_used+0xe08>
   35f04:	divsd  xmm0,xmm7
   35f08:	movapd xmm3,xmm0
   35f0c:	jmp    35f1e <IncompleteGamma+0x19e>
   35f0e:	xchg   ax,ax
   35f10:	add    eax,0x1
   35f13:	cmp    eax,0x2710
   35f18:	je     36040 <IncompleteGamma+0x2c0>
   35f1e:	pxor   xmm2,xmm2
   35f22:	movapd xmm4,xmm1
   35f26:	cvtsi2sd xmm2,eax
   35f2a:	addsd  xmm2,xmm7
   35f2e:	divsd  xmm4,xmm2
   35f32:	mulsd  xmm0,xmm4
   35f36:	addsd  xmm3,xmm0
   35f3a:	movapd xmm2,xmm0
   35f3e:	divsd  xmm2,xmm3
   35f42:	andpd  xmm2,xmm9
   35f47:	comisd xmm8,xmm2
   35f4c:	jbe    35f10 <IncompleteGamma+0x190>
   35f4e:	movapd xmm0,xmm1
   35f52:	movsd  QWORD PTR [rsp+0x10],xmm3
   35f58:	movsd  QWORD PTR [rsp+0x18],xmm7
   35f5e:	movsd  QWORD PTR [rsp+0x8],xmm1
   35f64:	call   35e0 <log@plt>
   35f69:	movsd  xmm7,QWORD PTR [rsp+0x18]
   35f6f:	movsd  xmm1,QWORD PTR [rsp+0x8]
   35f75:	mulsd  xmm0,xmm7
   35f79:	subsd  xmm0,xmm1
   35f7d:	movsd  QWORD PTR [rsp+0x8],xmm0
   35f83:	movapd xmm0,xmm7
   35f87:	call   35a50 <Gammln>
   35f8c:	movsd  xmm1,QWORD PTR [rsp+0x8]
   35f92:	subsd  xmm1,xmm0
   35f96:	movapd xmm0,xmm1
   35f9a:	call   3800 <exp@plt>
   35f9f:	movsd  xmm3,QWORD PTR [rsp+0x10]
   35fa5:	mov    rax,QWORD PTR [rip+0x7e44]        # 3ddf0 <_IO_stdin_used+0xdf0>
   35fac:	mulsd  xmm3,xmm0
   35fb0:	movq   xmm0,rax
   35fb5:	subsd  xmm0,xmm3
   35fb9:	add    rsp,0x28
   35fbd:	ret    
   35fbe:	xchg   ax,ax
   35fc0:	lea    rdi,[rip+0xc789]        # 42750 <CSWTCH.18+0x1090>
   35fc7:	xor    eax,eax
   35fc9:	movsd  QWORD PTR [rsp+0x10],xmm1
   35fcf:	movsd  QWORD PTR [rsp+0x8],xmm7
   35fd5:	call   317f0 <Die>
   35fda:	movsd  xmm1,QWORD PTR [rsp+0x10]
   35fe0:	movsd  xmm7,QWORD PTR [rsp+0x8]
   35fe6:	pxor   xmm11,xmm11
   35feb:	jmp    35da7 <IncompleteGamma+0x27>
   35ff0:	lea    rdi,[rip+0xc731]        # 42728 <CSWTCH.18+0x1068>
   35ff7:	xor    eax,eax
   35ff9:	movsd  QWORD PTR [rsp+0x10],xmm1
   35fff:	movsd  QWORD PTR [rsp+0x8],xmm0
   36005:	call   317f0 <Die>
   3600a:	movsd  xmm1,QWORD PTR [rsp+0x10]
   36010:	movsd  xmm7,QWORD PTR [rsp+0x8]
   36016:	pxor   xmm11,xmm11
   3601b:	jmp    35d9c <IncompleteGamma+0x1c>
   36020:	lea    rdi,[rip+0xc751]        # 42778 <CSWTCH.18+0x10b8>
   36027:	xor    eax,eax
   36029:	call   317f0 <Die>
   3602e:	pxor   xmm11,xmm11
   36033:	movapd xmm0,xmm11
   36038:	jmp    35fb9 <IncompleteGamma+0x239>
   3603d:	nop    DWORD PTR [rax]
   36040:	lea    rdi,[rip+0xc779]        # 427c0 <CSWTCH.18+0x1100>
   36047:	xor    eax,eax
   36049:	call   317f0 <Die>
   3604e:	pxor   xmm11,xmm11
   36053:	movapd xmm0,xmm11
   36058:	jmp    35fb9 <IncompleteGamma+0x239>
   3605d:	nop    DWORD PTR [rax]

0000000000036060 <sre_random>:
   36060:	endbr64 
   36064:	movsxd rcx,DWORD PTR [rip+0x18275]        # 4e2e0 <sre_randseed>
   3606b:	test   ecx,ecx
   3606d:	jle    36210 <sre_random+0x1b0>
   36073:	lea    rdi,[rip+0x2bde6]        # 61e60 <tbl.4218>
   3607a:	mov    rsi,rcx
   3607d:	movabs r10,0x9c4e3aa71ae25487
   36087:	movabs r9,0x9ef41398f7aa8c09
   36091:	mov    r8,rdi
   36094:	lea    r11,[rdi+0x200]
   3609b:	nop    DWORD PTR [rax+rax*1+0x0]
   360a0:	mov    rax,rcx
   360a3:	mul    r10
   360a6:	shr    rdx,0xf
   360aa:	imul   rax,rdx,0xd1a4
   360b1:	imul   rdx,rdx,0x2fb3
   360b8:	sub    rcx,rax
   360bb:	imul   rcx,rcx,0x9c4e
   360c2:	sub    rcx,rdx
   360c5:	lea    rax,[rcx+0x7fffffab]
   360cc:	cmovs  rcx,rax
   360d0:	mov    rax,rsi
   360d3:	mul    r9
   360d6:	shr    rdx,0xf
   360da:	imul   rax,rdx,0xce26
   360e1:	imul   rdx,rdx,0xecf
   360e8:	sub    rsi,rax
   360eb:	imul   rax,rsi,0x9ef4
   360f2:	sub    rax,rdx
   360f5:	mov    rsi,rax
   360f8:	lea    rax,[rax+0x7fffff07]
   360ff:	cmovs  rsi,rax
   36103:	mov    rax,rcx
   36106:	sub    rax,rsi
   36109:	jns    36111 <sre_random+0xb1>
   3610b:	add    rax,0x7fffffab
   36111:	mov    QWORD PTR [r8],rax
   36114:	add    r8,0x8
   36118:	cmp    r11,r8
   3611b:	jne    360a0 <sre_random+0x40>
   3611d:	mov    DWORD PTR [rip+0x181b9],0x0        # 4e2e0 <sre_randseed>
   36127:	movabs rdx,0x9c4e3aa71ae25487
   36131:	mov    rax,rcx
   36134:	imul   rdx
   36137:	lea    rax,[rdx+rcx*1]
   3613b:	mov    rdx,rcx
   3613e:	sar    rdx,0x3f
   36142:	sar    rax,0xf
   36146:	sub    rax,rdx
   36149:	imul   rdx,rax,0xd1a4
   36150:	imul   rax,rax,0x2fb3
   36157:	sub    rcx,rdx
   3615a:	imul   rcx,rcx,0x9c4e
   36161:	sub    rcx,rax
   36164:	jns    3616d <sre_random+0x10d>
   36166:	add    rcx,0x7fffffab
   3616d:	mov    rax,rsi
   36170:	mov    QWORD PTR [rip+0x2bef1],rcx        # 62068 <rnd1.4215>
   36177:	movabs rdx,0x4f7a09cc7bd54605
   36181:	imul   rdx
   36184:	mov    rax,rsi
   36187:	sar    rax,0x3f
   3618b:	sar    rdx,0xe
   3618f:	sub    rdx,rax
   36192:	imul   rax,rdx,0xce26
   36199:	imul   rdx,rdx,0xecf
   361a0:	sub    rsi,rax
   361a3:	imul   rax,rsi,0x9ef4
   361aa:	sub    rax,rdx
   361ad:	jns    361b5 <sre_random+0x155>
   361af:	add    rax,0x7fffff07
   361b5:	pxor   xmm0,xmm0
   361b9:	movsd  xmm1,QWORD PTR [rip+0xc6b7]        # 42878 <cof.6115+0x78>
   361c1:	sub    rcx,rax
   361c4:	mov    QWORD PTR [rip+0x2be95],rax        # 62060 <rnd2.4216>
   361cb:	cvtsi2sd xmm0,QWORD PTR [rip+0x2bc6c]        # 61e40 <rnd.4217>
   361d4:	lea    rax,[rcx+0x7fffffab]
   361db:	cmovs  rcx,rax
   361df:	divsd  xmm0,xmm1
   361e3:	mulsd  xmm0,QWORD PTR [rip+0xc695]        # 42880 <cof.6115+0x80>
   361eb:	cvttsd2si edx,xmm0
   361ef:	pxor   xmm0,xmm0
   361f3:	movsxd rdx,edx
   361f6:	mov    rsi,QWORD PTR [rdi+rdx*8]
   361fa:	mov    QWORD PTR [rdi+rdx*8],rcx
   361fe:	cvtsi2sd xmm0,rsi
   36203:	mov    QWORD PTR [rip+0x2bc36],rsi        # 61e40 <rnd.4217>
   3620a:	divsd  xmm0,xmm1
   3620e:	ret    
   3620f:	nop
   36210:	mov    rcx,QWORD PTR [rip+0x2be51]        # 62068 <rnd1.4215>
   36217:	mov    rsi,QWORD PTR [rip+0x2be42]        # 62060 <rnd2.4216>
   3621e:	lea    rdi,[rip+0x2bc3b]        # 61e60 <tbl.4218>
   36225:	jmp    36127 <sre_random+0xc7>
   3622a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000036230 <sre_srandom>:
   36230:	endbr64 
   36234:	mov    eax,0x2a
   36239:	test   edi,edi
   3623b:	je     36248 <sre_srandom+0x18>
   3623d:	mov    edx,edi
   3623f:	mov    eax,edi
   36241:	sar    edx,0x1f
   36244:	xor    eax,edx
   36246:	sub    eax,edx
   36248:	mov    DWORD PTR [rip+0x18092],eax        # 4e2e0 <sre_randseed>
   3624e:	ret    
   3624f:	nop

0000000000036250 <sre_random_positive>:
   36250:	endbr64 
   36254:	pxor   xmm2,xmm2
   36258:	jmp    36262 <sre_random_positive+0x12>
   3625a:	nop    WORD PTR [rax+rax*1+0x0]
   36260:	jne    3626d <sre_random_positive+0x1d>
   36262:	call   36060 <sre_random>
   36267:	ucomisd xmm0,xmm2
   3626b:	jnp    36260 <sre_random_positive+0x10>
   3626d:	ret    
   3626e:	xchg   ax,ax

0000000000036270 <ExponentialRandom>:
   36270:	endbr64 
   36274:	sub    rsp,0x8
   36278:	pxor   xmm2,xmm2
   3627c:	jmp    36282 <ExponentialRandom+0x12>
   3627e:	xchg   ax,ax
   36280:	jne    3628d <ExponentialRandom+0x1d>
   36282:	call   36060 <sre_random>
   36287:	ucomisd xmm0,xmm2
   3628b:	jnp    36280 <ExponentialRandom+0x10>
   3628d:	call   35e0 <log@plt>
   36292:	xorpd  xmm0,XMMWORD PTR [rip+0x7106]        # 3d3a0 <_IO_stdin_used+0x3a0>
   3629a:	add    rsp,0x8
   3629e:	ret    
   3629f:	nop

00000000000362a0 <Gaussrandom>:
   362a0:	endbr64 
   362a4:	push   r12
   362a6:	movapd xmm7,xmm0
   362aa:	movapd xmm8,xmm1
   362af:	push   rbp
   362b0:	push   rbx
   362b1:	call   36060 <sre_random>
   362b6:	movsd  xmm9,QWORD PTR [rip+0x7b21]        # 3dde0 <_IO_stdin_used+0xde0>
   362bf:	movapd xmm3,xmm0
   362c3:	comisd xmm0,xmm9
   362c8:	ja     36428 <Gaussrandom+0x188>
   362ce:	mov    QWORD PTR [rip+0x2bb57],0x0        # 61e30 <s.4259>
   362d9:	movsd  xmm6,QWORD PTR [rip+0x7b0f]        # 3ddf0 <_IO_stdin_used+0xdf0>
   362e1:	pxor   xmm10,xmm10
   362e6:	addsd  xmm3,xmm0
   362ea:	mulsd  xmm3,QWORD PTR [rip+0xc596]        # 42888 <cof.6115+0x88>
   362f2:	cvttsd2si rax,xmm3
   362f7:	movsd  QWORD PTR [rip+0x2bb39],xmm3        # 61e38 <u.4258>
   362ff:	cmp    rax,0x20
   36303:	je     36570 <Gaussrandom+0x2d0>
   36309:	test   rax,rax
   3630c:	jne    36450 <Gaussrandom+0x1b0>
   36312:	addsd  xmm3,xmm3
   36316:	mov    eax,0x6
   3631b:	mov    ebx,0x28
   36320:	movsd  xmm5,QWORD PTR [rip+0x17fb0]        # 4e2d8 <a.4252+0xf8>
   36328:	mov    QWORD PTR [rip+0x2baf5],0x6        # 61e28 <i.4256>
   36333:	lea    rdx,[rip+0x17b9e]        # 4ded8 <commentsyms+0x10>
   3633a:	movsd  QWORD PTR [rip+0x2bade],xmm5        # 61e20 <aa.4261>
   36342:	comisd xmm6,xmm3
   36346:	jbe    3637a <Gaussrandom+0xda>
   36348:	nop    DWORD PTR [rax+rax*1+0x0]
   36350:	addsd  xmm3,xmm3
   36354:	addsd  xmm5,QWORD PTR [rdx+rax*8]
   36359:	add    rax,0x1
   3635d:	comisd xmm6,xmm3
   36361:	ja     36350 <Gaussrandom+0xb0>
   36363:	mov    QWORD PTR [rip+0x2babe],rax        # 61e28 <i.4256>
   3636a:	lea    rbx,[rax*8-0x8]
   36372:	movsd  QWORD PTR [rip+0x2baa6],xmm5        # 61e20 <aa.4261>
   3637a:	movapd xmm4,xmm3
   3637e:	lea    rax,[rip+0x17b5b]        # 4dee0 <d.4253>
   36385:	subsd  xmm4,xmm6
   36389:	add    rbx,rax
   3638c:	movsd  QWORD PTR [rip+0x2baa4],xmm4        # 61e38 <u.4258>
   36394:	mulsd  xmm4,QWORD PTR [rbx]
   36398:	movapd xmm2,xmm4
   3639c:	movsd  QWORD PTR [rip+0x2ba6c],xmm4        # 61e10 <w.4262>
   363a4:	mulsd  xmm2,xmm9
   363a9:	addsd  xmm2,xmm5
   363ad:	mulsd  xmm2,xmm4
   363b1:	jmp    363d3 <Gaussrandom+0x133>
   363b3:	nop    DWORD PTR [rax+rax*1+0x0]
   363b8:	call   36060 <sre_random>
   363bd:	comisd xmm3,xmm0
   363c1:	movapd xmm2,xmm0
   363c5:	movsd  QWORD PTR [rip+0x2ba6b],xmm0        # 61e38 <u.4258>
   363cd:	jb     36588 <Gaussrandom+0x2e8>
   363d3:	endbr64 
   363d7:	movsd  QWORD PTR [rip+0x2ba29],xmm2        # 61e08 <tt.4264>
   363df:	call   36060 <sre_random>
   363e4:	comisd xmm0,xmm2
   363e8:	movapd xmm3,xmm0
   363ec:	movsd  QWORD PTR [rip+0x2ba24],xmm0        # 61e18 <ustar.4260>
   363f4:	jbe    363b8 <Gaussrandom+0x118>
   363f6:	ucomisd xmm10,xmm6
   363fb:	addsd  xmm4,xmm5
   363ff:	jp     3640b <Gaussrandom+0x16b>
   36401:	jne    3640b <Gaussrandom+0x16b>
   36403:	xorpd  xmm4,XMMWORD PTR [rip+0x6f95]        # 3d3a0 <_IO_stdin_used+0x3a0>
   3640b:	movsd  QWORD PTR [rip+0x2b9ed],xmm4        # 61e00 <snorm.4257>
   36413:	mulsd  xmm4,xmm8
   36418:	pop    rbx
   36419:	pop    rbp
   3641a:	pop    r12
   3641c:	addsd  xmm4,xmm7
   36420:	movapd xmm0,xmm4
   36424:	ret    
   36425:	nop    DWORD PTR [rax]
   36428:	movsd  xmm6,QWORD PTR [rip+0x79c0]        # 3ddf0 <_IO_stdin_used+0xdf0>
   36430:	subsd  xmm0,xmm6
   36434:	movsd  QWORD PTR [rip+0x2b9f4],xmm6        # 61e30 <s.4259>
   3643c:	movapd xmm10,xmm6
   36441:	jmp    362e6 <Gaussrandom+0x46>
   36446:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36450:	mov    QWORD PTR [rip+0x2b9d1],rax        # 61e28 <i.4256>
   36457:	pxor   xmm0,xmm0
   3645b:	lea    rbx,[rax*8+0x0]
   36463:	lea    rdx,[rip+0x17c76]        # 4e0e0 <t.4254>
   3646a:	cvtsi2sd xmm0,rax
   3646f:	lea    r12,[rdx+rbx*1-0x8]
   36474:	lea    rax,[rip+0x17d65]        # 4e1e0 <a.4252>
   3647b:	movsd  xmm5,QWORD PTR [rax+rbx*1-0x8]
   36481:	lea    rbp,[rbx+rax*1]
   36485:	subsd  xmm3,xmm0
   36489:	movsd  xmm0,QWORD PTR [r12]
   3648f:	movsd  QWORD PTR [rip+0x2b989],xmm5        # 61e20 <aa.4261>
   36497:	comisd xmm0,xmm3
   3649b:	movsd  QWORD PTR [rip+0x2b975],xmm3        # 61e18 <ustar.4260>
   364a3:	jb     3654b <Gaussrandom+0x2ab>
   364a9:	call   36060 <sre_random>
   364ae:	movsd  xmm4,QWORD PTR [rbp+0x0]
   364b3:	movsd  QWORD PTR [rip+0x2b97d],xmm0        # 61e38 <u.4258>
   364bb:	subsd  xmm4,xmm5
   364bf:	mulsd  xmm4,xmm0
   364c3:	movapd xmm0,xmm4
   364c7:	movsd  QWORD PTR [rip+0x2b941],xmm4        # 61e10 <w.4262>
   364cf:	mulsd  xmm0,xmm9
   364d4:	addsd  xmm0,xmm5
   364d8:	mulsd  xmm0,xmm4
   364dc:	comisd xmm3,xmm0
   364e0:	movsd  QWORD PTR [rip+0x2b920],xmm0        # 61e08 <tt.4264>
   364e8:	jbe    36513 <Gaussrandom+0x273>
   364ea:	jmp    363f6 <Gaussrandom+0x156>
   364ef:	nop
   364f0:	movsd  QWORD PTR [rip+0x2b910],xmm0        # 61e08 <tt.4264>
   364f8:	call   36060 <sre_random>
   364fd:	comisd xmm0,xmm2
   36501:	movapd xmm3,xmm0
   36505:	movsd  QWORD PTR [rip+0x2b90b],xmm0        # 61e18 <ustar.4260>
   3650d:	ja     363f6 <Gaussrandom+0x156>
   36513:	call   36060 <sre_random>
   36518:	comisd xmm3,xmm0
   3651c:	movapd xmm2,xmm0
   36520:	movsd  QWORD PTR [rip+0x2b910],xmm0        # 61e38 <u.4258>
   36528:	jae    364f0 <Gaussrandom+0x250>
   3652a:	call   36060 <sre_random>
   3652f:	movapd xmm3,xmm0
   36533:	movsd  QWORD PTR [rip+0x2b8dd],xmm0        # 61e18 <ustar.4260>
   3653b:	movsd  xmm0,QWORD PTR [r12]
   36541:	comisd xmm0,xmm3
   36545:	jae    364a9 <Gaussrandom+0x209>
   3654b:	subsd  xmm3,xmm0
   3654f:	lea    rax,[rip+0x17a8a]        # 4dfe0 <h.4255>
   36556:	movsd  xmm4,QWORD PTR [rax+rbx*1-0x8]
   3655c:	mulsd  xmm4,xmm3
   36560:	movsd  QWORD PTR [rip+0x2b8a8],xmm4        # 61e10 <w.4262>
   36568:	jmp    363f6 <Gaussrandom+0x156>
   3656d:	nop    DWORD PTR [rax]
   36570:	mov    QWORD PTR [rip+0x2b8ad],0x1f        # 61e28 <i.4256>
   3657b:	mov    eax,0x1f
   36580:	jmp    36457 <Gaussrandom+0x1b7>
   36585:	nop    DWORD PTR [rax]
   36588:	call   36060 <sre_random>
   3658d:	movapd xmm4,xmm0
   36591:	movsd  QWORD PTR [rip+0x2b89f],xmm0        # 61e38 <u.4258>
   36599:	jmp    36394 <Gaussrandom+0xf4>
   3659e:	xchg   ax,ax

00000000000365a0 <DChoose>:
   365a0:	endbr64 
   365a4:	push   rbp
   365a5:	mov    ebp,esi
   365a7:	push   rbx
   365a8:	mov    rbx,rdi
   365ab:	call   36060 <sre_random>
   365b0:	test   ebp,ebp
   365b2:	jle    365e0 <DChoose+0x40>
   365b4:	lea    ecx,[rbp-0x1]
   365b7:	xor    eax,eax
   365b9:	pxor   xmm1,xmm1
   365bd:	jmp    365cc <DChoose+0x2c>
   365bf:	nop
   365c0:	lea    rdx,[rax+0x1]
   365c4:	cmp    rax,rcx
   365c7:	je     365e0 <DChoose+0x40>
   365c9:	mov    rax,rdx
   365cc:	addsd  xmm1,QWORD PTR [rbx+rax*8]
   365d1:	mov    r8d,eax
   365d4:	comisd xmm1,xmm0
   365d8:	jbe    365c0 <DChoose+0x20>
   365da:	mov    eax,r8d
   365dd:	pop    rbx
   365de:	pop    rbp
   365df:	ret    
   365e0:	call   36060 <sre_random>
   365e5:	pop    rbx
   365e6:	movapd xmm1,xmm0
   365ea:	pxor   xmm0,xmm0
   365ee:	cvtsi2sd xmm0,ebp
   365f2:	pop    rbp
   365f3:	mulsd  xmm0,xmm1
   365f7:	cvttsd2si r8d,xmm0
   365fc:	mov    eax,r8d
   365ff:	ret    

0000000000036600 <FChoose>:
   36600:	endbr64 
   36604:	push   rbp
   36605:	mov    ebp,esi
   36607:	push   rbx
   36608:	mov    rbx,rdi
   3660b:	call   36060 <sre_random>
   36610:	test   ebp,ebp
   36612:	jle    36650 <FChoose+0x50>
   36614:	lea    ecx,[rbp-0x1]
   36617:	xor    eax,eax
   36619:	pxor   xmm1,xmm1
   3661d:	cvtsd2ss xmm0,xmm0
   36621:	jmp    36634 <FChoose+0x34>
   36623:	nop    DWORD PTR [rax+rax*1+0x0]
   36628:	lea    rdx,[rax+0x1]
   3662c:	cmp    rax,rcx
   3662f:	je     36650 <FChoose+0x50>
   36631:	mov    rax,rdx
   36634:	addss  xmm1,DWORD PTR [rbx+rax*4]
   36639:	mov    r8d,eax
   3663c:	comiss xmm1,xmm0
   3663f:	jbe    36628 <FChoose+0x28>
   36641:	mov    eax,r8d
   36644:	pop    rbx
   36645:	pop    rbp
   36646:	ret    
   36647:	nop    WORD PTR [rax+rax*1+0x0]
   36650:	call   36060 <sre_random>
   36655:	pop    rbx
   36656:	movapd xmm1,xmm0
   3665a:	pxor   xmm0,xmm0
   3665e:	cvtsi2sd xmm0,ebp
   36662:	pop    rbp
   36663:	mulsd  xmm0,xmm1
   36667:	cvttsd2si r8d,xmm0
   3666c:	mov    eax,r8d
   3666f:	ret    

0000000000036670 <Strdup>:
   36670:	endbr64 
   36674:	test   rdi,rdi
   36677:	je     366c0 <Strdup+0x50>
   36679:	push   r12
   3667b:	push   rbp
   3667c:	mov    rbp,rdi
   3667f:	sub    rsp,0x8
   36683:	call   3560 <strlen@plt>
   36688:	lea    r12,[rax+0x1]
   3668c:	mov    rdi,r12
   3668f:	call   36b0 <malloc@plt>
   36694:	mov    r8,rax
   36697:	test   rax,rax
   3669a:	je     366ad <Strdup+0x3d>
   3669c:	mov    rdx,r12
   3669f:	mov    rsi,rbp
   366a2:	mov    rdi,rax
   366a5:	call   3680 <memcpy@plt>
   366aa:	mov    r8,rax
   366ad:	add    rsp,0x8
   366b1:	mov    rax,r8
   366b4:	pop    rbp
   366b5:	pop    r12
   366b7:	ret    
   366b8:	nop    DWORD PTR [rax+rax*1+0x0]
   366c0:	xor    r8d,r8d
   366c3:	mov    rax,r8
   366c6:	ret    
   366c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000366d0 <StringChop>:
   366d0:	endbr64 
   366d4:	push   rbp
   366d5:	mov    rbp,rdi
   366d8:	push   rbx
   366d9:	sub    rsp,0x8
   366dd:	call   3560 <strlen@plt>
   366e2:	mov    ebx,eax
   366e4:	sub    ebx,0x1
   366e7:	movsxd rax,ebx
   366ea:	js     36718 <StringChop+0x48>
   366ec:	call   3820 <__ctype_b_loc@plt>
   366f1:	mov    rcx,QWORD PTR [rax]
   366f4:	movsxd rax,ebx
   366f7:	jmp    3670b <StringChop+0x3b>
   366f9:	nop    DWORD PTR [rax+0x0]
   36700:	lea    edx,[rax-0x1]
   36703:	sub    rax,0x1
   36707:	test   eax,eax
   36709:	js     36728 <StringChop+0x58>
   3670b:	movsx  rdx,BYTE PTR [rbp+rax*1+0x0]
   36711:	test   BYTE PTR [rcx+rdx*2+0x1],0x20
   36716:	jne    36700 <StringChop+0x30>
   36718:	mov    BYTE PTR [rbp+rax*1+0x1],0x0
   3671d:	add    rsp,0x8
   36721:	pop    rbx
   36722:	pop    rbp
   36723:	ret    
   36724:	nop    DWORD PTR [rax+0x0]
   36728:	movsxd rax,edx
   3672b:	mov    BYTE PTR [rbp+rax*1+0x1],0x0
   36730:	add    rsp,0x8
   36734:	pop    rbx
   36735:	pop    rbp
   36736:	ret    
   36737:	nop    WORD PTR [rax+rax*1+0x0]

0000000000036740 <Strinsert>:
   36740:	endbr64 
   36744:	movsxd rdx,edx
   36747:	mov    eax,esi
   36749:	add    rdi,rdx
   3674c:	test   sil,sil
   3674f:	je     36768 <Strinsert+0x28>
   36751:	nop    DWORD PTR [rax+0x0]
   36758:	mov    edx,eax
   3675a:	movzx  eax,BYTE PTR [rdi]
   3675d:	add    rdi,0x1
   36761:	mov    BYTE PTR [rdi-0x1],dl
   36764:	test   al,al
   36766:	jne    36758 <Strinsert+0x18>
   36768:	mov    BYTE PTR [rdi],0x0
   3676b:	mov    eax,0x1
   36770:	ret    
   36771:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3677c:	nop    DWORD PTR [rax+0x0]

0000000000036780 <Strdelete>:
   36780:	endbr64 
   36784:	movsxd rsi,esi
   36787:	add    rdi,rsi
   3678a:	cmp    BYTE PTR [rdi],0x0
   3678d:	je     3679f <Strdelete+0x1f>
   3678f:	nop
   36790:	movzx  eax,BYTE PTR [rdi+0x1]
   36794:	add    rdi,0x1
   36798:	mov    BYTE PTR [rdi-0x1],al
   3679b:	test   al,al
   3679d:	jne    36790 <Strdelete+0x10>
   3679f:	mov    eax,0x1
   367a4:	ret    
   367a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000367b0 <s2lower>:
   367b0:	endbr64 
   367b4:	push   rbx
   367b5:	mov    rbx,rdi
   367b8:	movsx  edi,BYTE PTR [rdi]
   367bb:	test   dil,dil
   367be:	je     367d4 <s2lower+0x24>
   367c0:	call   356f0 <sre_tolower>
   367c5:	add    rbx,0x1
   367c9:	mov    BYTE PTR [rbx-0x1],al
   367cc:	movsx  edi,BYTE PTR [rbx]
   367cf:	test   dil,dil
   367d2:	jne    367c0 <s2lower+0x10>
   367d4:	pop    rbx
   367d5:	ret    
   367d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000367e0 <s2upper>:
   367e0:	endbr64 
   367e4:	push   rbx
   367e5:	mov    rbx,rdi
   367e8:	movsx  edi,BYTE PTR [rdi]
   367eb:	test   dil,dil
   367ee:	je     36804 <s2upper+0x24>
   367f0:	call   35740 <sre_toupper>
   367f5:	add    rbx,0x1
   367f9:	mov    BYTE PTR [rbx-0x1],al
   367fc:	movsx  edi,BYTE PTR [rbx]
   367ff:	test   dil,dil
   36802:	jne    367f0 <s2upper+0x10>
   36804:	pop    rbx
   36805:	ret    
   36806:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000036810 <sre_malloc>:
   36810:	endbr64 
   36814:	push   r14
   36816:	mov    r14d,esi
   36819:	push   r13
   3681b:	mov    r13,rdi
   3681e:	mov    rdi,rdx
   36821:	push   r12
   36823:	push   rbp
   36824:	mov    rbp,rdx
   36827:	sub    rsp,0x8
   3682b:	call   36b0 <malloc@plt>
   36830:	mov    r12,rax
   36833:	test   rax,rax
   36836:	je     36847 <sre_malloc+0x37>
   36838:	add    rsp,0x8
   3683c:	mov    rax,r12
   3683f:	pop    rbp
   36840:	pop    r12
   36842:	pop    r13
   36844:	pop    r14
   36846:	ret    
   36847:	mov    ecx,r14d
   3684a:	mov    rdx,r13
   3684d:	mov    rsi,rbp
   36850:	xor    eax,eax
   36852:	lea    rdi,[rip+0xc037]        # 42890 <cof.6115+0x90>
   36859:	call   317f0 <Die>
   3685e:	jmp    36838 <sre_malloc+0x28>

0000000000036860 <sre_realloc>:
   36860:	endbr64 
   36864:	push   r14
   36866:	mov    r14d,esi
   36869:	mov    rsi,rcx
   3686c:	push   r13
   3686e:	mov    r13,rdi
   36871:	mov    rdi,rdx
   36874:	push   r12
   36876:	push   rbp
   36877:	mov    rbp,rcx
   3687a:	sub    rsp,0x8
   3687e:	call   36f0 <realloc@plt>
   36883:	mov    r12,rax
   36886:	test   rax,rax
   36889:	je     3689a <sre_realloc+0x3a>
   3688b:	add    rsp,0x8
   3688f:	mov    rax,r12
   36892:	pop    rbp
   36893:	pop    r12
   36895:	pop    r13
   36897:	pop    r14
   36899:	ret    
   3689a:	mov    ecx,r14d
   3689d:	mov    rdx,r13
   368a0:	mov    rsi,rbp
   368a3:	xor    eax,eax
   368a5:	lea    rdi,[rip+0xc014]        # 428c0 <cof.6115+0xc0>
   368ac:	call   317f0 <Die>
   368b1:	jmp    3688b <sre_realloc+0x2b>
   368b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   368be:	xchg   ax,ax

00000000000368c0 <Free2DArray>:
   368c0:	endbr64 
   368c4:	test   rdi,rdi
   368c7:	je     36908 <Free2DArray+0x48>
   368c9:	push   r12
   368cb:	mov    r12,rdi
   368ce:	push   rbp
   368cf:	push   rbx
   368d0:	test   esi,esi
   368d2:	jle    368f6 <Free2DArray+0x36>
   368d4:	lea    eax,[rsi-0x1]
   368d7:	mov    rbx,rdi
   368da:	lea    rbp,[rdi+rax*8+0x8]
   368df:	nop
   368e0:	mov    rdi,QWORD PTR [rbx]
   368e3:	test   rdi,rdi
   368e6:	je     368ed <Free2DArray+0x2d>
   368e8:	call   3460 <free@plt>
   368ed:	add    rbx,0x8
   368f1:	cmp    rbx,rbp
   368f4:	jne    368e0 <Free2DArray+0x20>
   368f6:	pop    rbx
   368f7:	mov    rdi,r12
   368fa:	pop    rbp
   368fb:	pop    r12
   368fd:	jmp    3460 <free@plt>
   36902:	nop    WORD PTR [rax+rax*1+0x0]
   36908:	ret    
   36909:	nop    DWORD PTR [rax+0x0]

0000000000036910 <Free3DArray>:
   36910:	endbr64 
   36914:	test   rdi,rdi
   36917:	je     369b8 <Free3DArray+0xa8>
   3691d:	push   r15
   3691f:	push   r14
   36921:	mov    r14,rdi
   36924:	push   r13
   36926:	push   r12
   36928:	push   rbp
   36929:	push   rbx
   3692a:	sub    rsp,0x8
   3692e:	test   esi,esi
   36930:	jle    3699b <Free3DArray+0x8b>
   36932:	lea    eax,[rsi-0x1]
   36935:	mov    r13d,edx
   36938:	mov    r15,rdi
   3693b:	lea    r12,[rdi+rax*8+0x8]
   36940:	lea    eax,[rdx-0x1]
   36943:	lea    rbp,[rax*8+0x8]
   3694b:	jmp    36959 <Free3DArray+0x49>
   3694d:	nop    DWORD PTR [rax]
   36950:	add    r15,0x8
   36954:	cmp    r15,r12
   36957:	je     3699b <Free3DArray+0x8b>
   36959:	mov    r8,QWORD PTR [r15]
   3695c:	test   r8,r8
   3695f:	je     36950 <Free3DArray+0x40>
   36961:	test   r13d,r13d
   36964:	jle    3698a <Free3DArray+0x7a>
   36966:	xor    ebx,ebx
   36968:	nop    DWORD PTR [rax+rax*1+0x0]
   36970:	mov    rdi,QWORD PTR [r8+rbx*1]
   36974:	test   rdi,rdi
   36977:	je     36981 <Free3DArray+0x71>
   36979:	call   3460 <free@plt>
   3697e:	mov    r8,QWORD PTR [r15]
   36981:	add    rbx,0x8
   36985:	cmp    rbp,rbx
   36988:	jne    36970 <Free3DArray+0x60>
   3698a:	mov    rdi,r8
   3698d:	add    r15,0x8
   36991:	call   3460 <free@plt>
   36996:	cmp    r15,r12
   36999:	jne    36959 <Free3DArray+0x49>
   3699b:	add    rsp,0x8
   3699f:	mov    rdi,r14
   369a2:	pop    rbx
   369a3:	pop    rbp
   369a4:	pop    r12
   369a6:	pop    r13
   369a8:	pop    r14
   369aa:	pop    r15
   369ac:	jmp    3460 <free@plt>
   369b1:	nop    DWORD PTR [rax+0x0]
   369b8:	ret    
   369b9:	nop    DWORD PTR [rax+0x0]

00000000000369c0 <RandomSequence>:
   369c0:	endbr64 
   369c4:	push   r15
   369c6:	push   r14
   369c8:	mov    r14d,ecx
   369cb:	push   r13
   369cd:	push   r12
   369cf:	mov    r12d,edx
   369d2:	lea    edx,[rcx+0x1]
   369d5:	push   rbp
   369d6:	movsxd rdx,edx
   369d9:	mov    rbp,rsi
   369dc:	mov    esi,0xc7
   369e1:	push   rbx
   369e2:	mov    rbx,rdi
   369e5:	lea    rdi,[rip+0xbf01]        # 428ed <cof.6115+0xed>
   369ec:	sub    rsp,0x18
   369f0:	mov    DWORD PTR [rsp+0xc],ecx
   369f4:	call   36810 <sre_malloc>
   369f9:	mov    r15,rax
   369fc:	mov    r13,rax
   369ff:	test   r14d,r14d
   36a02:	jle    36a36 <RandomSequence+0x76>
   36a04:	lea    eax,[r14-0x1]
   36a08:	lea    r14,[r15+rax*1+0x1]
   36a0d:	nop    DWORD PTR [rax]
   36a10:	mov    esi,r12d
   36a13:	mov    rdi,rbp
   36a16:	add    r13,0x1
   36a1a:	call   36600 <FChoose>
   36a1f:	cdqe   
   36a21:	movzx  eax,BYTE PTR [rbx+rax*1]
   36a25:	mov    BYTE PTR [r13-0x1],al
   36a29:	cmp    r14,r13
   36a2c:	jne    36a10 <RandomSequence+0x50>
   36a2e:	movsxd r13,DWORD PTR [rsp+0xc]
   36a33:	add    r13,r15
   36a36:	mov    BYTE PTR [r13+0x0],0x0
   36a3b:	add    rsp,0x18
   36a3f:	mov    rax,r15
   36a42:	pop    rbx
   36a43:	pop    rbp
   36a44:	pop    r12
   36a46:	pop    r13
   36a48:	pop    r14
   36a4a:	pop    r15
   36a4c:	ret    
   36a4d:	nop    DWORD PTR [rax]

0000000000036a50 <sre_fgets>:
   36a50:	endbr64 
   36a54:	push   r15
   36a56:	push   r14
   36a58:	mov    r14,rdx
   36a5b:	push   r13
   36a5d:	mov    r13,rsi
   36a60:	push   r12
   36a62:	mov    r12,rdi
   36a65:	push   rbp
   36a66:	push   rbx
   36a67:	sub    rsp,0x18
   36a6b:	mov    esi,DWORD PTR [rsi]
   36a6d:	test   esi,esi
   36a6f:	je     36b40 <sre_fgets+0xf0>
   36a75:	mov    rdi,QWORD PTR [rdi]
   36a78:	mov    rdx,r14
   36a7b:	call   3620 <fgets@plt>
   36a80:	mov    rdx,rax
   36a83:	test   rax,rax
   36a86:	je     36b25 <sre_fgets+0xd5>
   36a8c:	mov    rdi,r14
   36a8f:	call   3660 <feof@plt>
   36a94:	mov    rdx,QWORD PTR [r12]
   36a98:	test   eax,eax
   36a9a:	jne    36b25 <sre_fgets+0xd5>
   36aa0:	mov    rdi,rdx
   36aa3:	mov    QWORD PTR [rsp+0x8],rdx
   36aa8:	call   3560 <strlen@plt>
   36aad:	mov    rdx,QWORD PTR [rsp+0x8]
   36ab2:	cdqe   
   36ab4:	cmp    BYTE PTR [rdx+rax*1-0x1],0xa
   36ab9:	je     36b25 <sre_fgets+0xd5>
   36abb:	mov    ecx,DWORD PTR [r13+0x0]
   36abf:	lea    r15,[rip+0xbe27]        # 428ed <cof.6115+0xed>
   36ac6:	lea    ebp,[rcx-0x1]
   36ac9:	movsxd rbp,ebp
   36acc:	jmp    36aed <sre_fgets+0x9d>
   36ace:	xchg   ax,ax
   36ad0:	mov    rdi,rbx
   36ad3:	sub    rbp,0xffffffffffffff80
   36ad7:	call   3560 <strlen@plt>
   36adc:	mov    rdx,QWORD PTR [r12]
   36ae0:	cdqe   
   36ae2:	cmp    BYTE PTR [rbx+rax*1-0x1],0xa
   36ae7:	je     36b25 <sre_fgets+0xd5>
   36ae9:	mov    ecx,DWORD PTR [r13+0x0]
   36aed:	sub    ecx,0xffffff80
   36af0:	mov    esi,0x11b
   36af5:	mov    rdi,r15
   36af8:	mov    DWORD PTR [r13+0x0],ecx
   36afc:	movsxd rcx,ecx
   36aff:	call   36860 <sre_realloc>
   36b04:	mov    rdx,r14
   36b07:	mov    esi,0x81
   36b0c:	mov    QWORD PTR [r12],rax
   36b10:	lea    rbx,[rax+rbp*1]
   36b14:	mov    rdi,rbx
   36b17:	call   3620 <fgets@plt>
   36b1c:	test   rax,rax
   36b1f:	jne    36ad0 <sre_fgets+0x80>
   36b21:	mov    rdx,QWORD PTR [r12]
   36b25:	add    rsp,0x18
   36b29:	mov    rax,rdx
   36b2c:	pop    rbx
   36b2d:	pop    rbp
   36b2e:	pop    r12
   36b30:	pop    r13
   36b32:	pop    r14
   36b34:	pop    r15
   36b36:	ret    
   36b37:	nop    WORD PTR [rax+rax*1+0x0]
   36b40:	mov    esi,0xfd
   36b45:	lea    rdi,[rip+0xbda1]        # 428ed <cof.6115+0xed>
   36b4c:	mov    edx,0x80
   36b51:	call   36810 <sre_malloc>
   36b56:	mov    esi,0x80
   36b5b:	mov    QWORD PTR [r12],rax
   36b5f:	mov    rdi,rax
   36b62:	mov    DWORD PTR [r13+0x0],0x80
   36b6a:	jmp    36a78 <sre_fgets+0x28>
   36b6f:	nop

0000000000036b70 <sre_strcat>:
   36b70:	endbr64 
   36b74:	push   r15
   36b76:	push   r14
   36b78:	push   r13
   36b7a:	mov    r13,rdx
   36b7d:	push   r12
   36b7f:	mov    r12,rdi
   36b82:	push   rbp
   36b83:	mov    ebp,ecx
   36b85:	push   rbx
   36b86:	mov    ebx,esi
   36b88:	sub    rsp,0x8
   36b8c:	test   esi,esi
   36b8e:	js     36c08 <sre_strcat+0x98>
   36b90:	test   ebp,ebp
   36b92:	js     36bf0 <sre_strcat+0x80>
   36b94:	mov    r14d,ebx
   36b97:	test   ebp,ebp
   36b99:	je     36bdc <sre_strcat+0x6c>
   36b9b:	mov    rdx,QWORD PTR [r12]
   36b9f:	lea    r15d,[rbp+0x1]
   36ba3:	lea    r14d,[rbx+rbp*1]
   36ba7:	movsxd r15,r15d
   36baa:	test   rdx,rdx
   36bad:	je     36c28 <sre_strcat+0xb8>
   36baf:	lea    ecx,[r14+0x1]
   36bb3:	mov    esi,0x159
   36bb8:	lea    rdi,[rip+0xbd2e]        # 428ed <cof.6115+0xed>
   36bbf:	movsxd rcx,ecx
   36bc2:	call   36860 <sre_realloc>
   36bc7:	mov    QWORD PTR [r12],rax
   36bcb:	movsxd rdi,ebx
   36bce:	mov    rdx,r15
   36bd1:	mov    rsi,r13
   36bd4:	add    rdi,rax
   36bd7:	call   3680 <memcpy@plt>
   36bdc:	add    rsp,0x8
   36be0:	mov    eax,r14d
   36be3:	pop    rbx
   36be4:	pop    rbp
   36be5:	pop    r12
   36be7:	pop    r13
   36be9:	pop    r14
   36beb:	pop    r15
   36bed:	ret    
   36bee:	xchg   ax,ax
   36bf0:	test   r13,r13
   36bf3:	je     36c48 <sre_strcat+0xd8>
   36bf5:	mov    rdi,r13
   36bf8:	call   3560 <strlen@plt>
   36bfd:	mov    ebp,eax
   36bff:	jmp    36b94 <sre_strcat+0x24>
   36c01:	nop    DWORD PTR [rax+0x0]
   36c08:	mov    rdi,QWORD PTR [rdi]
   36c0b:	xor    ebx,ebx
   36c0d:	test   rdi,rdi
   36c10:	je     36b90 <sre_strcat+0x20>
   36c16:	call   3560 <strlen@plt>
   36c1b:	mov    ebx,eax
   36c1d:	jmp    36b90 <sre_strcat+0x20>
   36c22:	nop    WORD PTR [rax+rax*1+0x0]
   36c28:	mov    rdx,r15
   36c2b:	mov    esi,0x158
   36c30:	lea    rdi,[rip+0xbcb6]        # 428ed <cof.6115+0xed>
   36c37:	call   36810 <sre_malloc>
   36c3c:	mov    QWORD PTR [r12],rax
   36c40:	jmp    36bcb <sre_strcat+0x5b>
   36c42:	nop    WORD PTR [rax+rax*1+0x0]
   36c48:	mov    r14d,ebx
   36c4b:	jmp    36bdc <sre_strcat+0x6c>
   36c4d:	nop    DWORD PTR [rax]

0000000000036c50 <sre_strtok>:
   36c50:	endbr64 
   36c54:	push   r13
   36c56:	mov    r13,rsi
   36c59:	push   r12
   36c5b:	push   rbp
   36c5c:	mov    rbp,rdx
   36c5f:	push   rbx
   36c60:	mov    rbx,rdi
   36c63:	sub    rsp,0x8
   36c67:	mov    r12,QWORD PTR [rdi]
   36c6a:	mov    rdi,r12
   36c6d:	call   35f0 <strspn@plt>
   36c72:	add    r12,rax
   36c75:	cmp    BYTE PTR [r12],0x0
   36c7a:	je     36cc0 <sre_strtok+0x70>
   36c7c:	mov    rsi,r13
   36c7f:	mov    rdi,r12
   36c82:	call   3610 <strcspn@plt>
   36c87:	movsxd rdx,eax
   36c8a:	add    rdx,r12
   36c8d:	cmp    BYTE PTR [rdx],0x0
   36c90:	jne    36cb0 <sre_strtok+0x60>
   36c92:	mov    QWORD PTR [rbx],rdx
   36c95:	test   rbp,rbp
   36c98:	je     36c9d <sre_strtok+0x4d>
   36c9a:	mov    DWORD PTR [rbp+0x0],eax
   36c9d:	add    rsp,0x8
   36ca1:	mov    rax,r12
   36ca4:	pop    rbx
   36ca5:	pop    rbp
   36ca6:	pop    r12
   36ca8:	pop    r13
   36caa:	ret    
   36cab:	nop    DWORD PTR [rax+rax*1+0x0]
   36cb0:	mov    BYTE PTR [rdx],0x0
   36cb3:	add    rdx,0x1
   36cb7:	jmp    36c92 <sre_strtok+0x42>
   36cb9:	nop    DWORD PTR [rax+0x0]
   36cc0:	add    rsp,0x8
   36cc4:	xor    r12d,r12d
   36cc7:	pop    rbx
   36cc8:	mov    rax,r12
   36ccb:	pop    rbp
   36ccc:	pop    r12
   36cce:	pop    r13
   36cd0:	ret    
   36cd1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   36cdc:	nop    DWORD PTR [rax+0x0]

0000000000036ce0 <sre_strdup>:
   36ce0:	endbr64 
   36ce4:	test   rdi,rdi
   36ce7:	je     36d20 <sre_strdup+0x40>
   36ce9:	push   rbp
   36cea:	mov    rbp,rdi
   36ced:	test   esi,esi
   36cef:	jns    36cf8 <sre_strdup+0x18>
   36cf1:	call   3560 <strlen@plt>
   36cf6:	mov    esi,eax
   36cf8:	add    esi,0x1
   36cfb:	lea    rdi,[rip+0xbbeb]        # 428ed <cof.6115+0xed>
   36d02:	movsxd rdx,esi
   36d05:	mov    esi,0x1ba
   36d0a:	call   36810 <sre_malloc>
   36d0f:	mov    rsi,rbp
   36d12:	mov    rdi,rax
   36d15:	call   34e0 <strcpy@plt>
   36d1a:	pop    rbp
   36d1b:	ret    
   36d1c:	nop    DWORD PTR [rax+0x0]
   36d20:	xor    r8d,r8d
   36d23:	mov    rax,r8
   36d26:	ret    
   36d27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000036d30 <sre_strncpy>:
   36d30:	endbr64 
   36d34:	push   rbx
   36d35:	movsxd rbx,edx
   36d38:	mov    rdx,rbx
   36d3b:	call   34b0 <strncpy@plt>
   36d40:	mov    BYTE PTR [rax+rbx*1],0x0
   36d44:	pop    rbx
   36d45:	ret    
   36d46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000036d50 <IsBlankline>:
   36d50:	endbr64 
   36d54:	push   rbp
   36d55:	push   rbx
   36d56:	sub    rsp,0x8
   36d5a:	movsx  rbx,BYTE PTR [rdi]
   36d5e:	test   bl,bl
   36d60:	je     36d90 <IsBlankline+0x40>
   36d62:	mov    rbp,rdi
   36d65:	call   3820 <__ctype_b_loc@plt>
   36d6a:	mov    rax,QWORD PTR [rax]
   36d6d:	jmp    36d7d <IsBlankline+0x2d>
   36d6f:	nop
   36d70:	movsx  rbx,BYTE PTR [rbp+0x1]
   36d75:	add    rbp,0x1
   36d79:	test   bl,bl
   36d7b:	je     36d90 <IsBlankline+0x40>
   36d7d:	test   BYTE PTR [rax+rbx*2+0x1],0x20
   36d82:	jne    36d70 <IsBlankline+0x20>
   36d84:	add    rsp,0x8
   36d88:	xor    eax,eax
   36d8a:	pop    rbx
   36d8b:	pop    rbp
   36d8c:	ret    
   36d8d:	nop    DWORD PTR [rax]
   36d90:	add    rsp,0x8
   36d94:	mov    eax,0x1
   36d99:	pop    rbx
   36d9a:	pop    rbp
   36d9b:	ret    
   36d9c:	nop    DWORD PTR [rax+0x0]

0000000000036da0 <current_index_size>:
   36da0:	mov    edx,DWORD PTR [rdi+0x40]
   36da3:	mov    eax,DWORD PTR [rdi+0x30]
   36da6:	cmp    DWORD PTR [rdi],0x1
   36da9:	lea    esi,[rax+0x10]
   36dac:	lea    ecx,[rdx+0xe]
   36daf:	lea    eax,[rdx+0x16]
   36db2:	cmove  rcx,rax
   36db6:	mov    eax,DWORD PTR [rdi+0x64]
   36db9:	add    edx,DWORD PTR [rdi+0x60]
   36dbc:	imul   rdx,rax
   36dc0:	movzx  eax,WORD PTR [rdi+0x34]
   36dc4:	imul   rax,rsi
   36dc8:	lea    rdx,[rdx+rax*1+0x42]
   36dcd:	mov    eax,DWORD PTR [rdi+0x44]
   36dd0:	imul   rax,rcx
   36dd4:	add    rax,rdx
   36dd7:	shr    rax,0x14
   36ddb:	ret    
   36ddc:	nop    DWORD PTR [rax+0x0]

0000000000036de0 <read_i16>:
   36de0:	push   rbx
   36de1:	mov    rcx,rdi
   36de4:	mov    rbx,rsi
   36de7:	mov    edx,0x1
   36dec:	mov    esi,0x2
   36df1:	sub    rsp,0x10
   36df5:	mov    rax,QWORD PTR fs:0x28
   36dfe:	mov    QWORD PTR [rsp+0x8],rax
   36e03:	xor    eax,eax
   36e05:	lea    rdi,[rsp+0x6]
   36e0a:	call   3500 <fread@plt>
   36e0f:	mov    r8,rax
   36e12:	xor    eax,eax
   36e14:	cmp    r8,0x1
   36e18:	je     36e30 <read_i16+0x50>
   36e1a:	mov    rdx,QWORD PTR [rsp+0x8]
   36e1f:	xor    rdx,QWORD PTR fs:0x28
   36e28:	jne    36e44 <read_i16+0x64>
   36e2a:	add    rsp,0x10
   36e2e:	pop    rbx
   36e2f:	ret    
   36e30:	movzx  edi,WORD PTR [rsp+0x6]
   36e35:	call   3ace0 <sre_ntoh16>
   36e3a:	mov    WORD PTR [rbx],ax
   36e3d:	mov    eax,0x1
   36e42:	jmp    36e1a <read_i16+0x3a>
   36e44:	call   3570 <__stack_chk_fail@plt>
   36e49:	nop    DWORD PTR [rax+0x0]

0000000000036e50 <read_i32>:
   36e50:	push   rbx
   36e51:	mov    rcx,rdi
   36e54:	mov    rbx,rsi
   36e57:	mov    edx,0x1
   36e5c:	mov    esi,0x4
   36e61:	sub    rsp,0x10
   36e65:	mov    rax,QWORD PTR fs:0x28
   36e6e:	mov    QWORD PTR [rsp+0x8],rax
   36e73:	xor    eax,eax
   36e75:	lea    rdi,[rsp+0x4]
   36e7a:	call   3500 <fread@plt>
   36e7f:	mov    r8,rax
   36e82:	xor    eax,eax
   36e84:	cmp    r8,0x1
   36e88:	je     36ea0 <read_i32+0x50>
   36e8a:	mov    rdx,QWORD PTR [rsp+0x8]
   36e8f:	xor    rdx,QWORD PTR fs:0x28
   36e98:	jne    36eb2 <read_i32+0x62>
   36e9a:	add    rsp,0x10
   36e9e:	pop    rbx
   36e9f:	ret    
   36ea0:	mov    edi,DWORD PTR [rsp+0x4]
   36ea4:	call   3acf0 <sre_ntoh32>
   36ea9:	mov    DWORD PTR [rbx],eax
   36eab:	mov    eax,0x1
   36eb0:	jmp    36e8a <read_i32+0x3a>
   36eb2:	call   3570 <__stack_chk_fail@plt>
   36eb7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000036ec0 <skeysort>:
   36ec0:	endbr64 
   36ec4:	mov    rsi,QWORD PTR [rsi]
   36ec7:	mov    rdi,QWORD PTR [rdi]
   36eca:	jmp    3640 <strcmp@plt>
   36ecf:	nop

0000000000036ed0 <pkeysort>:
   36ed0:	endbr64 
   36ed4:	mov    rsi,QWORD PTR [rsi]
   36ed7:	mov    rdi,QWORD PTR [rdi]
   36eda:	jmp    3640 <strcmp@plt>
   36edf:	nop

0000000000036ee0 <write_i64>:
   36ee0:	push   r12
   36ee2:	mov    r12,rdi
   36ee5:	mov    rdi,rsi
   36ee8:	sub    rsp,0x10
   36eec:	mov    QWORD PTR [rsp+0x8],rsi
   36ef1:	call   3ad30 <sre_hton64>
   36ef6:	lea    rdi,[rsp+0x8]
   36efb:	mov    rcx,r12
   36efe:	mov    edx,0x1
   36f03:	mov    esi,0x8
   36f08:	mov    QWORD PTR [rsp+0x8],rax
   36f0d:	call   37b0 <fwrite@plt>
   36f12:	cmp    rax,0x1
   36f16:	sete   al
   36f19:	add    rsp,0x10
   36f1d:	movzx  eax,al
   36f20:	pop    r12
   36f22:	ret    
   36f23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   36f2e:	xchg   ax,ax

0000000000036f30 <write_i16>:
   36f30:	push   r12
   36f32:	mov    r12,rdi
   36f35:	movzx  edi,si
   36f38:	sub    rsp,0x10
   36f3c:	mov    WORD PTR [rsp+0xc],si
   36f41:	call   3ad00 <sre_hton16>
   36f46:	lea    rdi,[rsp+0xc]
   36f4b:	mov    rcx,r12
   36f4e:	mov    edx,0x1
   36f53:	mov    esi,0x2
   36f58:	mov    WORD PTR [rsp+0xc],ax
   36f5d:	call   37b0 <fwrite@plt>
   36f62:	cmp    rax,0x1
   36f66:	sete   al
   36f69:	add    rsp,0x10
   36f6d:	movzx  eax,al
   36f70:	pop    r12
   36f72:	ret    
   36f73:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   36f7e:	xchg   ax,ax

0000000000036f80 <write_i32>:
   36f80:	push   r12
   36f82:	mov    r12,rdi
   36f85:	mov    edi,esi
   36f87:	sub    rsp,0x10
   36f8b:	mov    DWORD PTR [rsp+0xc],esi
   36f8f:	call   3ad10 <sre_hton32>
   36f94:	lea    rdi,[rsp+0xc]
   36f99:	mov    rcx,r12
   36f9c:	mov    edx,0x1
   36fa1:	mov    esi,0x4
   36fa6:	mov    DWORD PTR [rsp+0xc],eax
   36faa:	call   37b0 <fwrite@plt>
   36faf:	cmp    rax,0x1
   36fb3:	sete   al
   36fb6:	add    rsp,0x10
   36fba:	movzx  eax,al
   36fbd:	pop    r12
   36fbf:	ret    

0000000000036fc0 <read_offset>:
   36fc0:	push   r12
   36fc2:	push   rbx
   36fc3:	mov    rbx,rdx
   36fc6:	sub    rsp,0x18
   36fca:	mov    rax,QWORD PTR fs:0x28
   36fd3:	mov    QWORD PTR [rsp+0x8],rax
   36fd8:	xor    eax,eax
   36fda:	test   sil,sil
   36fdd:	je     37040 <read_offset+0x80>
   36fdf:	xor    r12d,r12d
   36fe2:	cmp    sil,0x1
   36fe6:	je     37008 <read_offset+0x48>
   36fe8:	mov    rax,QWORD PTR [rsp+0x8]
   36fed:	xor    rax,QWORD PTR fs:0x28
   36ff6:	jne    37057 <read_offset+0x97>
   36ff8:	add    rsp,0x18
   36ffc:	mov    eax,r12d
   36fff:	pop    rbx
   37000:	pop    r12
   37002:	ret    
   37003:	nop    DWORD PTR [rax+rax*1+0x0]
   37008:	mov    BYTE PTR [rdx],0x1
   3700b:	mov    r8,rsp
   3700e:	mov    rcx,rdi
   37011:	mov    edx,0x1
   37016:	mov    esi,0x8
   3701b:	mov    rdi,r8
   3701e:	call   3500 <fread@plt>
   37023:	cmp    rax,0x1
   37027:	jne    36fe8 <read_offset+0x28>
   37029:	mov    rdi,QWORD PTR [rsp]
   3702d:	mov    r12d,0x1
   37033:	call   3ad20 <sre_ntoh64>
   37038:	mov    QWORD PTR [rbx+0x8],rax
   3703c:	jmp    36fe8 <read_offset+0x28>
   3703e:	xchg   ax,ax
   37040:	mov    BYTE PTR [rdx],0x0
   37043:	lea    rsi,[rdx+0x8]
   37047:	xor    r12d,r12d
   3704a:	call   36e50 <read_i32>
   3704f:	test   eax,eax
   37051:	setne  r12b
   37055:	jmp    36fe8 <read_offset+0x28>
   37057:	call   3570 <__stack_chk_fail@plt>
   3705c:	nop    DWORD PTR [rax+0x0]

0000000000037060 <activate_external_sort>:
   37060:	push   r13
   37062:	push   r12
   37064:	xor    r12d,r12d
   37067:	push   rbp
   37068:	push   rbx
   37069:	sub    rsp,0x8
   3706d:	mov    r9d,DWORD PTR [rdi+0x8]
   37071:	test   r9d,r9d
   37074:	je     37088 <activate_external_sort+0x28>
   37076:	add    rsp,0x8
   3707a:	mov    eax,r12d
   3707d:	pop    rbx
   3707e:	pop    rbp
   3707f:	pop    r12
   37081:	pop    r13
   37083:	ret    
   37084:	nop    DWORD PTR [rax+0x0]
   37088:	mov    rbx,rdi
   3708b:	mov    rdi,QWORD PTR [rdi+0x48]
   3708f:	call   278a0 <FileExists>
   37094:	test   eax,eax
   37096:	jne    370a8 <activate_external_sort+0x48>
   37098:	mov    rdi,QWORD PTR [rbx+0x68]
   3709c:	call   278a0 <FileExists>
   370a1:	mov    r12d,eax
   370a4:	test   eax,eax
   370a6:	je     370c0 <activate_external_sort+0x60>
   370a8:	add    rsp,0x8
   370ac:	mov    r12d,0x1
   370b2:	pop    rbx
   370b3:	mov    eax,r12d
   370b6:	pop    rbp
   370b7:	pop    r12
   370b9:	pop    r13
   370bb:	ret    
   370bc:	nop    DWORD PTR [rax+0x0]
   370c0:	mov    rdi,QWORD PTR [rbx+0x48]
   370c4:	lea    rsi,[rip+0xaeaf]        # 41f7a <CSWTCH.18+0x8ba>
   370cb:	call   3750 <fopen@plt>
   370d0:	mov    QWORD PTR [rbx+0x50],rax
   370d4:	test   rax,rax
   370d7:	je     370a8 <activate_external_sort+0x48>
   370d9:	mov    rdi,QWORD PTR [rbx+0x68]
   370dd:	lea    rsi,[rip+0xae96]        # 41f7a <CSWTCH.18+0x8ba>
   370e4:	call   3750 <fopen@plt>
   370e9:	mov    QWORD PTR [rbx+0x70],rax
   370ed:	mov    rdi,rax
   370f0:	test   rax,rax
   370f3:	je     370a8 <activate_external_sort+0x48>
   370f5:	mov    r8d,DWORD PTR [rbx+0x44]
   370f9:	test   r8d,r8d
   370fc:	je     3728d <activate_external_sort+0x22d>
   37102:	xor    ebp,ebp
   37104:	lea    r13,[rip+0xb802]        # 4290d <cof.6115+0x10d>
   3710b:	jmp    3713b <activate_external_sort+0xdb>
   3710d:	nop    DWORD PTR [rax]
   37110:	mov    r9d,DWORD PTR [rax+0x18]
   37114:	mov    eax,DWORD PTR [rax+0x28]
   37117:	push   rdx
   37118:	mov    esi,0x1
   3711d:	lea    rdx,[rip+0xb7d6]        # 428fa <cof.6115+0xfa>
   37124:	push   rax
   37125:	xor    eax,eax
   37127:	call   37c0 <__fprintf_chk@plt>
   3712c:	pop    r10
   3712e:	pop    r11
   37130:	mov    eax,DWORD PTR [rbx+0x44]
   37133:	add    rbp,0x1
   37137:	cmp    eax,ebp
   37139:	jbe    37180 <activate_external_sort+0x120>
   3713b:	mov    rdx,QWORD PTR [rbx+0x38]
   3713f:	lea    rax,[rbp*8+0x0]
   37147:	mov    esi,DWORD PTR [rbx]
   37149:	sub    rax,rbp
   3714c:	mov    rdi,QWORD PTR [rbx+0x50]
   37150:	lea    rax,[rdx+rax*8]
   37154:	mov    edx,DWORD PTR [rax+0x30]
   37157:	movzx  r8d,WORD PTR [rax+0x8]
   3715c:	mov    rcx,QWORD PTR [rax]
   3715f:	test   esi,esi
   37161:	je     37110 <activate_external_sort+0xb0>
   37163:	mov    r9,QWORD PTR [rax+0x18]
   37167:	push   rdx
   37168:	mov    esi,0x1
   3716d:	mov    rdx,r13
   37170:	push   QWORD PTR [rax+0x28]
   37173:	xor    eax,eax
   37175:	call   37c0 <__fprintf_chk@plt>
   3717a:	pop    r8
   3717c:	pop    r9
   3717e:	jmp    37130 <activate_external_sort+0xd0>
   37180:	mov    edi,DWORD PTR [rbx+0x64]
   37183:	test   edi,edi
   37185:	je     3729a <activate_external_sort+0x23a>
   3718b:	mov    rdi,QWORD PTR [rbx+0x70]
   3718f:	xor    ebp,ebp
   37191:	lea    r13,[rip+0xb78a]        # 42922 <cof.6115+0x122>
   37198:	jmp    371a4 <activate_external_sort+0x144>
   3719a:	nop    WORD PTR [rax+rax*1+0x0]
   371a0:	mov    rdi,QWORD PTR [rbx+0x70]
   371a4:	mov    rdx,rbp
   371a7:	mov    esi,0x1
   371ac:	xor    eax,eax
   371ae:	add    rbp,0x1
   371b2:	shl    rdx,0x4
   371b6:	add    rdx,QWORD PTR [rbx+0x58]
   371ba:	mov    r8,QWORD PTR [rdx+0x8]
   371be:	mov    rcx,QWORD PTR [rdx]
   371c1:	mov    rdx,r13
   371c4:	call   37c0 <__fprintf_chk@plt>
   371c9:	cmp    DWORD PTR [rbx+0x64],ebp
   371cc:	ja     371a0 <activate_external_sort+0x140>
   371ce:	mov    esi,DWORD PTR [rbx+0x44]
   371d1:	test   esi,esi
   371d3:	je     37204 <activate_external_sort+0x1a4>
   371d5:	xor    ebp,ebp
   371d7:	nop    WORD PTR [rax+rax*1+0x0]
   371e0:	mov    rdx,QWORD PTR [rbx+0x38]
   371e4:	lea    rax,[rbp*8+0x0]
   371ec:	sub    rax,rbp
   371ef:	add    rbp,0x1
   371f3:	lea    rax,[rdx+rax*8]
   371f7:	mov    rdi,QWORD PTR [rax]
   371fa:	call   3460 <free@plt>
   371ff:	cmp    DWORD PTR [rbx+0x44],ebp
   37202:	ja     371e0 <activate_external_sort+0x180>
   37204:	mov    ecx,DWORD PTR [rbx+0x64]
   37207:	xor    ebp,ebp
   37209:	test   ecx,ecx
   3720b:	je     37255 <activate_external_sort+0x1f5>
   3720d:	nop    DWORD PTR [rax]
   37210:	mov    rax,rbp
   37213:	add    rbp,0x1
   37217:	shl    rax,0x4
   3721b:	add    rax,QWORD PTR [rbx+0x58]
   3721f:	mov    rdi,QWORD PTR [rax]
   37222:	call   3460 <free@plt>
   37227:	mov    eax,DWORD PTR [rbx+0x64]
   3722a:	cmp    eax,ebp
   3722c:	ja     37210 <activate_external_sort+0x1b0>
   3722e:	test   eax,eax
   37230:	je     37255 <activate_external_sort+0x1f5>
   37232:	xor    ebp,ebp
   37234:	nop    DWORD PTR [rax+0x0]
   37238:	mov    rax,rbp
   3723b:	add    rbp,0x1
   3723f:	shl    rax,0x4
   37243:	add    rax,QWORD PTR [rbx+0x58]
   37247:	mov    rdi,QWORD PTR [rax+0x8]
   3724b:	call   3460 <free@plt>
   37250:	cmp    DWORD PTR [rbx+0x64],ebp
   37253:	ja     37238 <activate_external_sort+0x1d8>
   37255:	mov    rdi,QWORD PTR [rbx+0x38]
   37259:	test   rdi,rdi
   3725c:	je     37263 <activate_external_sort+0x203>
   3725e:	call   3460 <free@plt>
   37263:	mov    rdi,QWORD PTR [rbx+0x58]
   37267:	test   rdi,rdi
   3726a:	je     37271 <activate_external_sort+0x211>
   3726c:	call   3460 <free@plt>
   37271:	mov    QWORD PTR [rbx+0x38],0x0
   37279:	mov    QWORD PTR [rbx+0x58],0x0
   37281:	mov    DWORD PTR [rbx+0x8],0x1
   37288:	jmp    37076 <activate_external_sort+0x16>
   3728d:	mov    eax,DWORD PTR [rbx+0x64]
   37290:	test   eax,eax
   37292:	jne    3718f <activate_external_sort+0x12f>
   37298:	jmp    37255 <activate_external_sort+0x1f5>
   3729a:	test   eax,eax
   3729c:	jne    371d5 <activate_external_sort+0x175>
   372a2:	jmp    37255 <activate_external_sort+0x1f5>
   372a4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   372af:	nop

00000000000372b0 <write_offset>:
   372b0:	movzx  eax,BYTE PTR [rsi]
   372b3:	test   al,al
   372b5:	je     372d0 <write_offset+0x20>
   372b7:	sub    rsp,0x8
   372bb:	cmp    al,0x1
   372bd:	jne    3854 <write_offset.cold>
   372c3:	mov    rsi,QWORD PTR [rsi+0x8]
   372c7:	add    rsp,0x8
   372cb:	jmp    36ee0 <write_i64>
   372d0:	mov    esi,DWORD PTR [rsi+0x8]
   372d3:	jmp    36f80 <write_i32>
   372d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000372e0 <indexfile_position.isra.0>:
   372e0:	mov    rax,rsi
   372e3:	movzx  esi,BYTE PTR [rsi]
   372e6:	test   sil,sil
   372e9:	jne    37318 <indexfile_position.isra.0+0x38>
   372eb:	imul   ecx,edx
   372ee:	sub    rsp,0x8
   372f2:	mov    rdi,QWORD PTR [rdi]
   372f5:	xor    edx,edx
   372f7:	mov    esi,ecx
   372f9:	add    esi,DWORD PTR [rax+0x8]
   372fc:	call   36e0 <fseek@plt>
   37301:	mov    r8d,eax
   37304:	mov    eax,0x8
   37309:	test   r8d,r8d
   3730c:	jne    37310 <indexfile_position.isra.0+0x30>
   3730e:	xor    eax,eax
   37310:	add    rsp,0x8
   37314:	ret    
   37315:	nop    DWORD PTR [rax]
   37318:	cmp    sil,0x1
   3731c:	jne    37328 <indexfile_position.isra.0+0x48>
   3731e:	mov    eax,0x7
   37323:	ret    
   37324:	nop    DWORD PTR [rax+0x0]
   37328:	xor    eax,eax
   3732a:	ret    
   3732b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000037330 <binary_search.part.0>:
   37330:	push   r15
   37332:	mov    r15,rdi
   37335:	push   r14
   37337:	movsxd r14,edx
   3733a:	push   r13
   3733c:	mov    rdi,r14
   3733f:	push   r12
   37341:	push   rbp
   37342:	mov    ebp,r9d
   37345:	push   rbx
   37346:	sub    rsp,0x28
   3734a:	mov    QWORD PTR [rsp+0x18],rsi
   3734f:	mov    QWORD PTR [rsp+0x8],rcx
   37354:	mov    DWORD PTR [rsp+0x14],r8d
   37359:	call   36b0 <malloc@plt>
   3735e:	test   rax,rax
   37361:	je     3744c <binary_search.part.0+0x11c>
   37367:	mov    DWORD PTR [rsp+0x10],0x0
   3736f:	mov    r13,rax
   37372:	sub    ebp,0x1
   37375:	nop    DWORD PTR [rax]
   37378:	mov    eax,DWORD PTR [rsp+0x10]
   3737c:	mov    edx,DWORD PTR [rsp+0x14]
   37380:	mov    rdi,r15
   37383:	mov    rsi,QWORD PTR [rsp+0x8]
   37388:	lea    r12d,[rax+rbp*1]
   3738c:	mov    ebx,r12d
   3738f:	shr    ebx,1
   37391:	mov    ecx,ebx
   37393:	call   372e0 <indexfile_position.isra.0>
   37398:	test   eax,eax
   3739a:	jne    373f0 <binary_search.part.0+0xc0>
   3739c:	mov    rcx,QWORD PTR [r15]
   3739f:	mov    rdx,r14
   373a2:	mov    esi,0x1
   373a7:	mov    rdi,r13
   373aa:	call   3500 <fread@plt>
   373af:	cmp    r14,rax
   373b2:	jne    37430 <binary_search.part.0+0x100>
   373b4:	mov    rsi,QWORD PTR [rsp+0x18]
   373b9:	mov    rdi,r13
   373bc:	call   3640 <strcmp@plt>
   373c1:	test   eax,eax
   373c3:	je     373f0 <binary_search.part.0+0xc0>
   373c5:	cmp    DWORD PTR [rsp+0x10],ebp
   373c9:	jae    37410 <binary_search.part.0+0xe0>
   373cb:	test   eax,eax
   373cd:	js     373e0 <binary_search.part.0+0xb0>
   373cf:	cmp    r12d,0x1
   373d3:	jbe    37410 <binary_search.part.0+0xe0>
   373d5:	lea    ebp,[rbx-0x1]
   373d8:	jmp    37378 <binary_search.part.0+0x48>
   373da:	nop    WORD PTR [rax+rax*1+0x0]
   373e0:	lea    eax,[rbx+0x1]
   373e3:	mov    DWORD PTR [rsp+0x10],eax
   373e7:	jmp    37378 <binary_search.part.0+0x48>
   373e9:	nop    DWORD PTR [rax+0x0]
   373f0:	mov    rdi,r13
   373f3:	mov    DWORD PTR [rsp+0x10],eax
   373f7:	call   3460 <free@plt>
   373fc:	mov    eax,DWORD PTR [rsp+0x10]
   37400:	add    rsp,0x28
   37404:	pop    rbx
   37405:	pop    rbp
   37406:	pop    r12
   37408:	pop    r13
   3740a:	pop    r14
   3740c:	pop    r15
   3740e:	ret    
   3740f:	nop
   37410:	mov    rdi,r13
   37413:	call   3460 <free@plt>
   37418:	add    rsp,0x28
   3741c:	mov    eax,0x2
   37421:	pop    rbx
   37422:	pop    rbp
   37423:	pop    r12
   37425:	pop    r13
   37427:	pop    r14
   37429:	pop    r15
   3742b:	ret    
   3742c:	nop    DWORD PTR [rax+0x0]
   37430:	mov    rdi,r13
   37433:	call   3460 <free@plt>
   37438:	add    rsp,0x28
   3743c:	mov    eax,0x1
   37441:	pop    rbx
   37442:	pop    rbp
   37443:	pop    r12
   37445:	pop    r13
   37447:	pop    r14
   37449:	pop    r15
   3744b:	ret    
   3744c:	mov    eax,0x3
   37451:	jmp    37400 <binary_search.part.0+0xd0>
   37453:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3745e:	xchg   ax,ax

0000000000037460 <SSIClose.part.0>:
   37460:	push   rbp
   37461:	mov    rbp,rdi
   37464:	push   rbx
   37465:	sub    rsp,0x8
   37469:	mov    rdi,QWORD PTR [rdi+0x68]
   3746d:	test   rdi,rdi
   37470:	je     374a6 <SSIClose.part.0+0x46>
   37472:	cmp    WORD PTR [rbp+0xc],0x0
   37477:	je     374a1 <SSIClose.part.0+0x41>
   37479:	xor    ebx,ebx
   3747b:	nop    DWORD PTR [rax+rax*1+0x0]
   37480:	mov    r8,QWORD PTR [rdi+rbx*8]
   37484:	test   r8,r8
   37487:	je     37495 <SSIClose.part.0+0x35>
   37489:	mov    rdi,r8
   3748c:	call   3460 <free@plt>
   37491:	mov    rdi,QWORD PTR [rbp+0x68]
   37495:	movzx  eax,WORD PTR [rbp+0xc]
   37499:	add    rbx,0x1
   3749d:	cmp    eax,ebx
   3749f:	jg     37480 <SSIClose.part.0+0x20>
   374a1:	call   3460 <free@plt>
   374a6:	mov    rdi,QWORD PTR [rbp+0x70]
   374aa:	test   rdi,rdi
   374ad:	je     374b4 <SSIClose.part.0+0x54>
   374af:	call   3460 <free@plt>
   374b4:	mov    rdi,QWORD PTR [rbp+0x78]
   374b8:	test   rdi,rdi
   374bb:	je     374c2 <SSIClose.part.0+0x62>
   374bd:	call   3460 <free@plt>
   374c2:	mov    rdi,QWORD PTR [rbp+0x80]
   374c9:	test   rdi,rdi
   374cc:	je     374d3 <SSIClose.part.0+0x73>
   374ce:	call   3460 <free@plt>
   374d3:	mov    rdi,QWORD PTR [rbp+0x88]
   374da:	test   rdi,rdi
   374dd:	je     374e4 <SSIClose.part.0+0x84>
   374df:	call   3460 <free@plt>
   374e4:	mov    rdi,QWORD PTR [rbp+0x0]
   374e8:	test   rdi,rdi
   374eb:	je     374f2 <SSIClose.part.0+0x92>
   374ed:	call   3530 <fclose@plt>
   374f2:	add    rsp,0x8
   374f6:	mov    rdi,rbp
   374f9:	pop    rbx
   374fa:	pop    rbp
   374fb:	jmp    3460 <free@plt>

0000000000037500 <SSIOpen>:
   37500:	endbr64 
   37504:	push   r15
   37506:	push   r14
   37508:	push   r13
   3750a:	push   r12
   3750c:	mov    r12,rdi
   3750f:	mov    edi,0x90
   37514:	push   rbp
   37515:	push   rbx
   37516:	mov    rbx,rsi
   37519:	sub    rsp,0x28
   3751d:	mov    rax,QWORD PTR fs:0x28
   37526:	mov    QWORD PTR [rsp+0x18],rax
   3752b:	xor    eax,eax
   3752d:	call   36b0 <malloc@plt>
   37532:	test   rax,rax
   37535:	je     378d9 <SSIOpen+0x3d9>
   3753b:	mov    rdi,r12
   3753e:	lea    rsi,[rip+0xb3e4]        # 42929 <cof.6115+0x129>
   37545:	mov    rbp,rax
   37548:	call   3750 <fopen@plt>
   3754d:	mov    QWORD PTR [rbp+0x0],rax
   37551:	mov    rdi,rax
   37554:	test   rax,rax
   37557:	je     37660 <SSIOpen+0x160>
   3755d:	xor    eax,eax
   3755f:	mov    QWORD PTR [rbp+0x68],0x0
   37567:	lea    rsi,[rsp+0x14]
   3756c:	mov    QWORD PTR [rbp+0x70],0x0
   37574:	mov    QWORD PTR [rbp+0x78],0x0
   3757c:	mov    QWORD PTR [rbp+0x80],0x0
   37587:	mov    QWORD PTR [rbp+0x88],0x0
   37592:	mov    WORD PTR [rbp+0xc],ax
   37596:	call   36e50 <read_i32>
   3759b:	test   eax,eax
   3759d:	je     37650 <SSIOpen+0x150>
   375a3:	mov    eax,DWORD PTR [rsp+0x14]
   375a7:	cmp    eax,0xb1e9f3f3
   375ac:	je     375f0 <SSIOpen+0xf0>
   375ae:	mov    r12d,0x5
   375b4:	cmp    eax,0xf3f3e9b1
   375b9:	je     375f0 <SSIOpen+0xf0>
   375bb:	mov    rdi,rbp
   375be:	call   37460 <SSIClose.part.0>
   375c3:	mov    QWORD PTR [rbx],rbp
   375c6:	mov    rax,QWORD PTR [rsp+0x18]
   375cb:	xor    rax,QWORD PTR fs:0x28
   375d4:	jne    378e4 <SSIOpen+0x3e4>
   375da:	add    rsp,0x28
   375de:	mov    eax,r12d
   375e1:	pop    rbx
   375e2:	pop    rbp
   375e3:	pop    r12
   375e5:	pop    r13
   375e7:	pop    r14
   375e9:	pop    r15
   375eb:	ret    
   375ec:	nop    DWORD PTR [rax+0x0]
   375f0:	mov    rdi,QWORD PTR [rbp+0x0]
   375f4:	lea    rsi,[rbp+0x8]
   375f8:	call   36e50 <read_i32>
   375fd:	test   eax,eax
   375ff:	je     37640 <SSIOpen+0x140>
   37601:	mov    eax,DWORD PTR [rbp+0x8]
   37604:	mov    r12d,0x7
   3760a:	test   al,0x3
   3760c:	jne    375bb <SSIOpen+0xbb>
   3760e:	mov    edx,eax
   37610:	and    eax,0x1
   37613:	mov    rdi,QWORD PTR [rbp+0x0]
   37617:	lea    rsi,[rbp+0xc]
   3761b:	shr    edx,1
   3761d:	mov    BYTE PTR [rbp+0x61],al
   37620:	and    edx,0x1
   37623:	mov    BYTE PTR [rbp+0x60],dl
   37626:	call   36de0 <read_i16>
   3762b:	test   eax,eax
   3762d:	je     37640 <SSIOpen+0x140>
   3762f:	mov    rdi,QWORD PTR [rbp+0x0]
   37633:	lea    rsi,[rbp+0x10]
   37637:	call   36e50 <read_i32>
   3763c:	test   eax,eax
   3763e:	jne    37678 <SSIOpen+0x178>
   37640:	mov    r12d,0x6
   37646:	jmp    375bb <SSIOpen+0xbb>
   3764b:	nop    DWORD PTR [rax+rax*1+0x0]
   37650:	mov    r12d,0x5
   37656:	jmp    375bb <SSIOpen+0xbb>
   3765b:	nop    DWORD PTR [rax+rax*1+0x0]
   37660:	mov    rdi,rbp
   37663:	mov    r12d,0x4
   37669:	call   3460 <free@plt>
   3766e:	jmp    375c6 <SSIOpen+0xc6>
   37673:	nop    DWORD PTR [rax+rax*1+0x0]
   37678:	mov    rdi,QWORD PTR [rbp+0x0]
   3767c:	lea    rsi,[rbp+0x14]
   37680:	call   36e50 <read_i32>
   37685:	test   eax,eax
   37687:	je     37640 <SSIOpen+0x140>
   37689:	mov    rdi,QWORD PTR [rbp+0x0]
   3768d:	lea    rsi,[rbp+0x18]
   37691:	call   36e50 <read_i32>
   37696:	test   eax,eax
   37698:	je     37640 <SSIOpen+0x140>
   3769a:	mov    rdi,QWORD PTR [rbp+0x0]
   3769e:	lea    rsi,[rbp+0x1c]
   376a2:	call   36e50 <read_i32>
   376a7:	test   eax,eax
   376a9:	je     37640 <SSIOpen+0x140>
   376ab:	mov    rdi,QWORD PTR [rbp+0x0]
   376af:	lea    rsi,[rbp+0x20]
   376b3:	call   36e50 <read_i32>
   376b8:	test   eax,eax
   376ba:	je     37640 <SSIOpen+0x140>
   376bc:	mov    rdi,QWORD PTR [rbp+0x0]
   376c0:	lea    rsi,[rbp+0x24]
   376c4:	call   36e50 <read_i32>
   376c9:	test   eax,eax
   376cb:	je     37640 <SSIOpen+0x140>
   376d1:	mov    rdi,QWORD PTR [rbp+0x0]
   376d5:	lea    rsi,[rbp+0x28]
   376d9:	call   36e50 <read_i32>
   376de:	test   eax,eax
   376e0:	je     37640 <SSIOpen+0x140>
   376e6:	mov    rdi,QWORD PTR [rbp+0x0]
   376ea:	lea    rsi,[rbp+0x2c]
   376ee:	call   36e50 <read_i32>
   376f3:	test   eax,eax
   376f5:	je     37640 <SSIOpen+0x140>
   376fb:	lea    r13,[rbp+0x30]
   376ff:	movsx  esi,BYTE PTR [rbp+0x60]
   37703:	mov    rdi,QWORD PTR [rbp+0x0]
   37707:	mov    rdx,r13
   3770a:	call   36fc0 <read_offset>
   3770f:	test   eax,eax
   37711:	je     37640 <SSIOpen+0x140>
   37717:	movsx  esi,BYTE PTR [rbp+0x60]
   3771b:	mov    rdi,QWORD PTR [rbp+0x0]
   3771f:	lea    rdx,[rbp+0x40]
   37723:	call   36fc0 <read_offset>
   37728:	test   eax,eax
   3772a:	je     37640 <SSIOpen+0x140>
   37730:	movsx  esi,BYTE PTR [rbp+0x60]
   37734:	mov    rdi,QWORD PTR [rbp+0x0]
   37738:	lea    rdx,[rbp+0x50]
   3773c:	call   36fc0 <read_offset>
   37741:	test   eax,eax
   37743:	je     37640 <SSIOpen+0x140>
   37749:	movzx  r14d,WORD PTR [rbp+0xc]
   3774e:	test   r14w,r14w
   37752:	je     37640 <SSIOpen+0x140>
   37758:	movzx  r12d,r14w
   3775c:	lea    rdi,[r12*8+0x0]
   37764:	call   36b0 <malloc@plt>
   37769:	xor    edx,edx
   3776b:	mov    QWORD PTR [rbp+0x68],rax
   3776f:	test   rax,rax
   37772:	jne    37785 <SSIOpen+0x285>
   37774:	jmp    378e9 <SSIOpen+0x3e9>
   37779:	mov    QWORD PTR [rax+rdx*8],0x0
   37781:	add    rdx,0x1
   37785:	cmp    r14w,dx
   37789:	ja     37779 <SSIOpen+0x279>
   3778b:	shl    r12,0x2
   3778f:	mov    rdi,r12
   37792:	call   36b0 <malloc@plt>
   37797:	mov    QWORD PTR [rbp+0x70],rax
   3779b:	test   rax,rax
   3779e:	je     378e9 <SSIOpen+0x3e9>
   377a4:	mov    rdi,r12
   377a7:	call   36b0 <malloc@plt>
   377ac:	mov    QWORD PTR [rbp+0x78],rax
   377b0:	test   rax,rax
   377b3:	je     378e9 <SSIOpen+0x3e9>
   377b9:	mov    rdi,r12
   377bc:	call   36b0 <malloc@plt>
   377c1:	mov    QWORD PTR [rbp+0x80],rax
   377c8:	test   rax,rax
   377cb:	je     378e9 <SSIOpen+0x3e9>
   377d1:	mov    rdi,r12
   377d4:	call   36b0 <malloc@plt>
   377d9:	mov    QWORD PTR [rbp+0x88],rax
   377e0:	test   rax,rax
   377e3:	je     378e9 <SSIOpen+0x3e9>
   377e9:	xor    r14d,r14d
   377ec:	jmp    378c6 <SSIOpen+0x3c6>
   377f1:	mov    edx,DWORD PTR [rbp+0x24]
   377f4:	movzx  ecx,r14w
   377f8:	mov    rsi,r13
   377fb:	mov    rdi,rbp
   377fe:	call   372e0 <indexfile_position.isra.0>
   37803:	test   eax,eax
   37805:	jne    37640 <SSIOpen+0x140>
   3780b:	mov    edx,DWORD PTR [rbp+0x18]
   3780e:	mov    rax,QWORD PTR [rbp+0x68]
   37812:	movzx  r12d,r14w
   37816:	mov    rdi,rdx
   37819:	lea    r15,[rax+r12*8]
   3781d:	mov    QWORD PTR [rsp+0x8],rdx
   37822:	call   36b0 <malloc@plt>
   37827:	mov    QWORD PTR [r15],rax
   3782a:	mov    rdi,rax
   3782d:	test   rax,rax
   37830:	je     378e9 <SSIOpen+0x3e9>
   37836:	mov    rcx,QWORD PTR [rbp+0x0]
   3783a:	mov    rdx,QWORD PTR [rsp+0x8]
   3783f:	mov    esi,0x1
   37844:	call   3500 <fread@plt>
   37849:	mov    r8,rax
   3784c:	mov    eax,DWORD PTR [rbp+0x18]
   3784f:	cmp    r8,rax
   37852:	jne    37640 <SSIOpen+0x140>
   37858:	mov    rsi,QWORD PTR [rbp+0x70]
   3785c:	shl    r12,0x2
   37860:	mov    rdi,QWORD PTR [rbp+0x0]
   37864:	add    rsi,r12
   37867:	call   36e50 <read_i32>
   3786c:	test   eax,eax
   3786e:	je     37640 <SSIOpen+0x140>
   37874:	mov    rsi,QWORD PTR [rbp+0x78]
   37878:	mov    rdi,QWORD PTR [rbp+0x0]
   3787c:	add    rsi,r12
   3787f:	call   36e50 <read_i32>
   37884:	test   eax,eax
   37886:	je     37640 <SSIOpen+0x140>
   3788c:	mov    rsi,QWORD PTR [rbp+0x80]
   37893:	mov    rdi,QWORD PTR [rbp+0x0]
   37897:	add    rsi,r12
   3789a:	call   36e50 <read_i32>
   3789f:	test   eax,eax
   378a1:	je     37640 <SSIOpen+0x140>
   378a7:	mov    rsi,QWORD PTR [rbp+0x88]
   378ae:	mov    rdi,QWORD PTR [rbp+0x0]
   378b2:	add    rsi,r12
   378b5:	call   36e50 <read_i32>
   378ba:	test   eax,eax
   378bc:	je     37640 <SSIOpen+0x140>
   378c2:	add    r14d,0x1
   378c6:	cmp    r14w,WORD PTR [rbp+0xc]
   378cb:	jb     377f1 <SSIOpen+0x2f1>
   378d1:	xor    r12d,r12d
   378d4:	jmp    375c3 <SSIOpen+0xc3>
   378d9:	mov    r12d,0x3
   378df:	jmp    375c6 <SSIOpen+0xc6>
   378e4:	call   3570 <__stack_chk_fail@plt>
   378e9:	mov    r12d,0x3
   378ef:	jmp    375bb <SSIOpen+0xbb>
   378f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   378ff:	nop

0000000000037900 <SSIGetOffsetByName>:
   37900:	endbr64 
   37904:	push   r15
   37906:	push   r14
   37908:	mov    r14,rsi
   3790b:	push   r13
   3790d:	mov    r13,rcx
   37910:	push   r12
   37912:	mov    r12,rdx
   37915:	push   rbp
   37916:	mov    rbp,rdi
   37919:	sub    rsp,0x20
   3791d:	mov    r9d,DWORD PTR [rdi+0x10]
   37921:	mov    rax,QWORD PTR fs:0x28
   3792a:	mov    QWORD PTR [rsp+0x18],rax
   3792f:	xor    eax,eax
   37931:	test   r9d,r9d
   37934:	je     37998 <SSIGetOffsetByName+0x98>
   37936:	mov    edx,DWORD PTR [rdi+0x1c]
   37939:	mov    r8d,DWORD PTR [rdi+0x28]
   3793d:	lea    rcx,[rdi+0x40]
   37941:	call   37330 <binary_search.part.0>
   37946:	test   eax,eax
   37948:	je     37978 <SSIGetOffsetByName+0x78>
   3794a:	cmp    eax,0x2
   3794d:	je     37998 <SSIGetOffsetByName+0x98>
   3794f:	mov    rdi,QWORD PTR [rsp+0x18]
   37954:	xor    rdi,QWORD PTR fs:0x28
   3795d:	jne    37a46 <SSIGetOffsetByName+0x146>
   37963:	add    rsp,0x20
   37967:	pop    rbp
   37968:	pop    r12
   3796a:	pop    r13
   3796c:	pop    r14
   3796e:	pop    r15
   37970:	ret    
   37971:	nop    DWORD PTR [rax+0x0]
   37978:	mov    rdi,QWORD PTR [rbp+0x0]
   3797c:	lea    rsi,[rsp+0x16]
   37981:	call   36de0 <read_i16>
   37986:	test   eax,eax
   37988:	jne    37a20 <SSIGetOffsetByName+0x120>
   3798e:	mov    eax,0x1
   37993:	jmp    3794f <SSIGetOffsetByName+0x4f>
   37995:	nop    DWORD PTR [rax]
   37998:	mov    r9d,DWORD PTR [rbp+0x14]
   3799c:	mov    eax,0x2
   379a1:	test   r9d,r9d
   379a4:	je     3794f <SSIGetOffsetByName+0x4f>
   379a6:	mov    edx,DWORD PTR [rbp+0x20]
   379a9:	mov    r8d,DWORD PTR [rbp+0x2c]
   379ad:	lea    rcx,[rbp+0x50]
   379b1:	mov    rsi,r14
   379b4:	mov    rdi,rbp
   379b7:	call   37330 <binary_search.part.0>
   379bc:	test   eax,eax
   379be:	jne    3794f <SSIGetOffsetByName+0x4f>
   379c0:	mov    r15d,DWORD PTR [rbp+0x1c]
   379c4:	mov    rdi,r15
   379c7:	call   36b0 <malloc@plt>
   379cc:	mov    r14,rax
   379cf:	test   rax,rax
   379d2:	je     37a4b <SSIGetOffsetByName+0x14b>
   379d4:	mov    rcx,QWORD PTR [rbp+0x0]
   379d8:	mov    rdx,r15
   379db:	mov    esi,0x1
   379e0:	mov    rdi,rax
   379e3:	call   3500 <fread@plt>
   379e8:	mov    edx,DWORD PTR [rbp+0x1c]
   379eb:	cmp    rdx,rax
   379ee:	jne    3798e <SSIGetOffsetByName+0x8e>
   379f0:	mov    rcx,r13
   379f3:	mov    rdx,r12
   379f6:	mov    rsi,r14
   379f9:	mov    rdi,rbp
   379fc:	call   37900 <SSIGetOffsetByName>
   37a01:	mov    rdi,r14
   37a04:	mov    DWORD PTR [rsp+0xc],eax
   37a08:	call   3460 <free@plt>
   37a0d:	mov    eax,DWORD PTR [rsp+0xc]
   37a11:	jmp    3794f <SSIGetOffsetByName+0x4f>
   37a16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37a20:	movzx  eax,WORD PTR [rsp+0x16]
   37a25:	mov    rdi,QWORD PTR [rbp+0x0]
   37a29:	mov    rdx,r13
   37a2c:	mov    DWORD PTR [r12],eax
   37a30:	movsx  esi,BYTE PTR [rbp+0x61]
   37a34:	call   36fc0 <read_offset>
   37a39:	test   eax,eax
   37a3b:	sete   al
   37a3e:	movzx  eax,al
   37a41:	jmp    3794f <SSIGetOffsetByName+0x4f>
   37a46:	call   3570 <__stack_chk_fail@plt>
   37a4b:	mov    eax,0x3
   37a50:	jmp    3794f <SSIGetOffsetByName+0x4f>
   37a55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000037a60 <SSIGetOffsetByNumber>:
   37a60:	endbr64 
   37a64:	push   r15
   37a66:	push   r14
   37a68:	push   r13
   37a6a:	push   r12
   37a6c:	mov    r12d,0x2
   37a72:	push   rbp
   37a73:	push   rbx
   37a74:	sub    rsp,0x18
   37a78:	mov    rax,QWORD PTR fs:0x28
   37a81:	mov    QWORD PTR [rsp+0x8],rax
   37a86:	xor    eax,eax
   37a88:	cmp    DWORD PTR [rdi+0x10],esi
   37a8b:	jbe    37ae8 <SSIGetOffsetByNumber+0x88>
   37a8d:	mov    r8d,esi
   37a90:	mov    r13,rdx
   37a93:	mov    edx,DWORD PTR [rdi+0x28]
   37a96:	mov    r14,rcx
   37a99:	lea    rsi,[rdi+0x40]
   37a9d:	mov    ecx,r8d
   37aa0:	mov    rbx,rdi
   37aa3:	call   372e0 <indexfile_position.isra.0>
   37aa8:	mov    r12d,eax
   37aab:	test   eax,eax
   37aad:	jne    37b10 <SSIGetOffsetByNumber+0xb0>
   37aaf:	mov    r15d,DWORD PTR [rbx+0x1c]
   37ab3:	mov    rdi,r15
   37ab6:	call   36b0 <malloc@plt>
   37abb:	mov    rbp,rax
   37abe:	test   rax,rax
   37ac1:	je     37b5c <SSIGetOffsetByNumber+0xfc>
   37ac7:	mov    rcx,QWORD PTR [rbx]
   37aca:	mov    rdx,r15
   37acd:	mov    esi,0x1
   37ad2:	mov    rdi,rax
   37ad5:	call   3500 <fread@plt>
   37ada:	mov    edx,DWORD PTR [rbx+0x1c]
   37add:	cmp    rdx,rax
   37ae0:	je     37b20 <SSIGetOffsetByNumber+0xc0>
   37ae2:	mov    r12d,0x1
   37ae8:	mov    rax,QWORD PTR [rsp+0x8]
   37aed:	xor    rax,QWORD PTR fs:0x28
   37af6:	jne    37b57 <SSIGetOffsetByNumber+0xf7>
   37af8:	add    rsp,0x18
   37afc:	mov    eax,r12d
   37aff:	pop    rbx
   37b00:	pop    rbp
   37b01:	pop    r12
   37b03:	pop    r13
   37b05:	pop    r14
   37b07:	pop    r15
   37b09:	ret    
   37b0a:	nop    WORD PTR [rax+rax*1+0x0]
   37b10:	mov    r12d,0x8
   37b16:	jmp    37ae8 <SSIGetOffsetByNumber+0x88>
   37b18:	nop    DWORD PTR [rax+rax*1+0x0]
   37b20:	mov    rdi,QWORD PTR [rbx]
   37b23:	lea    rsi,[rsp+0x6]
   37b28:	call   36de0 <read_i16>
   37b2d:	test   eax,eax
   37b2f:	je     37ae2 <SSIGetOffsetByNumber+0x82>
   37b31:	movsx  esi,BYTE PTR [rbx+0x61]
   37b35:	mov    rdi,QWORD PTR [rbx]
   37b38:	mov    rdx,r14
   37b3b:	call   36fc0 <read_offset>
   37b40:	test   eax,eax
   37b42:	je     37ae2 <SSIGetOffsetByNumber+0x82>
   37b44:	movzx  eax,WORD PTR [rsp+0x6]
   37b49:	mov    rdi,rbp
   37b4c:	mov    DWORD PTR [r13+0x0],eax
   37b50:	call   3460 <free@plt>
   37b55:	jmp    37ae8 <SSIGetOffsetByNumber+0x88>
   37b57:	call   3570 <__stack_chk_fail@plt>
   37b5c:	mov    r12d,0x3
   37b62:	jmp    37ae8 <SSIGetOffsetByNumber+0x88>
   37b64:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   37b6f:	nop

0000000000037b70 <SSIGetSubseqOffset>:
   37b70:	endbr64 
   37b74:	push   r15
   37b76:	push   r14
   37b78:	mov    r14d,edx
   37b7b:	push   r13
   37b7d:	mov    r13,r9
   37b80:	push   r12
   37b82:	push   rbp
   37b83:	mov    rbp,rcx
   37b86:	mov    rcx,r8
   37b89:	push   rbx
   37b8a:	mov    rdx,rbp
   37b8d:	mov    rbx,rdi
   37b90:	sub    rsp,0x18
   37b94:	mov    rax,QWORD PTR fs:0x28
   37b9d:	mov    QWORD PTR [rsp+0x8],rax
   37ba2:	xor    eax,eax
   37ba4:	mov    r15,QWORD PTR [rsp+0x50]
   37ba9:	call   37900 <SSIGetOffsetByName>
   37bae:	mov    r12d,eax
   37bb1:	test   eax,eax
   37bb3:	jne    37c60 <SSIGetSubseqOffset+0xf0>
   37bb9:	movsxd rdx,DWORD PTR [rbp+0x0]
   37bbd:	mov    rax,QWORD PTR [rbx+0x78]
   37bc1:	test   BYTE PTR [rax+rdx*4],0x1
   37bc5:	je     37c90 <SSIGetSubseqOffset+0x120>
   37bcb:	movsx  esi,BYTE PTR [rbx+0x61]
   37bcf:	mov    rdi,QWORD PTR [rbx]
   37bd2:	mov    rdx,r13
   37bd5:	call   36fc0 <read_offset>
   37bda:	test   eax,eax
   37bdc:	je     37ca0 <SSIGetSubseqOffset+0x130>
   37be2:	mov    rdi,QWORD PTR [rbx]
   37be5:	lea    rsi,[rsp+0x4]
   37bea:	call   36e50 <read_i32>
   37bef:	test   eax,eax
   37bf1:	je     37ca0 <SSIGetSubseqOffset+0x130>
   37bf7:	movsxd rax,DWORD PTR [rbp+0x0]
   37bfb:	mov    rdx,QWORD PTR [rbx+0x88]
   37c02:	mov    ecx,DWORD PTR [rdx+rax*4]
   37c05:	mov    rdx,QWORD PTR [rbx+0x80]
   37c0c:	mov    esi,DWORD PTR [rdx+rax*4]
   37c0f:	test   ecx,ecx
   37c11:	je     37c90 <SSIGetSubseqOffset+0x120>
   37c13:	test   esi,esi
   37c15:	je     37c90 <SSIGetSubseqOffset+0x120>
   37c17:	test   r14d,r14d
   37c1a:	js     37cd0 <SSIGetSubseqOffset+0x160>
   37c20:	cmp    r14d,DWORD PTR [rsp+0x4]
   37c25:	ja     37cd0 <SSIGetSubseqOffset+0x160>
   37c2b:	lea    eax,[r14-0x1]
   37c2f:	lea    r8d,[rcx+0x1]
   37c33:	movzx  edi,BYTE PTR [rbx+0x61]
   37c37:	cdq    
   37c38:	idiv   ecx
   37c3a:	cmp    r8d,esi
   37c3d:	je     37cb0 <SSIGetSubseqOffset+0x140>
   37c3f:	test   dil,dil
   37c42:	jne    37ce0 <SSIGetSubseqOffset+0x170>
   37c48:	imul   esi,eax
   37c4b:	add    DWORD PTR [r13+0x8],esi
   37c4f:	mov    BYTE PTR [r13+0x0],0x0
   37c54:	imul   ecx,eax
   37c57:	lea    eax,[rcx+0x1]
   37c5a:	mov    DWORD PTR [r15],eax
   37c5d:	nop    DWORD PTR [rax]
   37c60:	mov    rax,QWORD PTR [rsp+0x8]
   37c65:	xor    rax,QWORD PTR fs:0x28
   37c6e:	jne    37d1c <SSIGetSubseqOffset+0x1ac>
   37c74:	add    rsp,0x18
   37c78:	mov    eax,r12d
   37c7b:	pop    rbx
   37c7c:	pop    rbp
   37c7d:	pop    r12
   37c7f:	pop    r13
   37c81:	pop    r14
   37c83:	pop    r15
   37c85:	ret    
   37c86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37c90:	mov    r12d,0xa
   37c96:	jmp    37c60 <SSIGetSubseqOffset+0xf0>
   37c98:	nop    DWORD PTR [rax+rax*1+0x0]
   37ca0:	mov    r12d,0x1
   37ca6:	jmp    37c60 <SSIGetSubseqOffset+0xf0>
   37ca8:	nop    DWORD PTR [rax+rax*1+0x0]
   37cb0:	test   dil,dil
   37cb3:	jne    37d00 <SSIGetSubseqOffset+0x190>
   37cb5:	imul   esi,eax
   37cb8:	mov    BYTE PTR [r13+0x0],0x0
   37cbd:	lea    eax,[rdx+rsi*1]
   37cc0:	add    DWORD PTR [r13+0x8],eax
   37cc4:	mov    DWORD PTR [r15],r14d
   37cc7:	jmp    37c60 <SSIGetSubseqOffset+0xf0>
   37cc9:	nop    DWORD PTR [rax+0x0]
   37cd0:	mov    r12d,0xb
   37cd6:	jmp    37c60 <SSIGetSubseqOffset+0xf0>
   37cd8:	nop    DWORD PTR [rax+rax*1+0x0]
   37ce0:	cmp    dil,0x1
   37ce4:	jne    37c54 <SSIGetSubseqOffset+0xe4>
   37cea:	mov    edi,esi
   37cec:	mov    BYTE PTR [r13+0x0],0x1
   37cf1:	imul   edi,eax
   37cf4:	movsxd rdi,edi
   37cf7:	add    QWORD PTR [r13+0x8],rdi
   37cfb:	jmp    37c54 <SSIGetSubseqOffset+0xe4>
   37d00:	cmp    dil,0x1
   37d04:	jne    37cc4 <SSIGetSubseqOffset+0x154>
   37d06:	imul   eax,esi
   37d09:	movsxd rdx,edx
   37d0c:	mov    BYTE PTR [r13+0x0],0x1
   37d11:	cdqe   
   37d13:	add    rax,rdx
   37d16:	add    QWORD PTR [r13+0x8],rax
   37d1a:	jmp    37cc4 <SSIGetSubseqOffset+0x154>
   37d1c:	call   3570 <__stack_chk_fail@plt>
   37d21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   37d2c:	nop    DWORD PTR [rax+0x0]

0000000000037d30 <SSISetFilePosition>:
   37d30:	endbr64 
   37d34:	cmp    BYTE PTR [rsi],0x0
   37d37:	jne    37d60 <SSISetFilePosition+0x30>
   37d39:	sub    rsp,0x8
   37d3d:	mov    esi,DWORD PTR [rsi+0x8]
   37d40:	xor    edx,edx
   37d42:	call   36e0 <fseek@plt>
   37d47:	mov    edx,0x8
   37d4c:	test   eax,eax
   37d4e:	cmovne eax,edx
   37d51:	add    rsp,0x8
   37d55:	ret    
   37d56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37d60:	mov    eax,0x7
   37d65:	ret    
   37d66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000037d70 <SSIFileInfo>:
   37d70:	endbr64 
   37d74:	test   esi,esi
   37d76:	js     37da8 <SSIFileInfo+0x38>
   37d78:	movzx  r8d,WORD PTR [rdi+0xc]
   37d7d:	mov    eax,0xc
   37d82:	cmp    r8d,esi
   37d85:	jle    37dad <SSIFileInfo+0x3d>
   37d87:	mov    rax,QWORD PTR [rdi+0x68]
   37d8b:	movsxd rsi,esi
   37d8e:	mov    rax,QWORD PTR [rax+rsi*8]
   37d92:	mov    QWORD PTR [rdx],rax
   37d95:	mov    rax,QWORD PTR [rdi+0x70]
   37d99:	mov    eax,DWORD PTR [rax+rsi*4]
   37d9c:	mov    DWORD PTR [rcx],eax
   37d9e:	xor    eax,eax
   37da0:	ret    
   37da1:	nop    DWORD PTR [rax+0x0]
   37da8:	mov    eax,0xc
   37dad:	ret    
   37dae:	xchg   ax,ax

0000000000037db0 <SSIClose>:
   37db0:	endbr64 
   37db4:	test   rdi,rdi
   37db7:	je     37dc0 <SSIClose+0x10>
   37db9:	jmp    37460 <SSIClose.part.0>
   37dbe:	xchg   ax,ax
   37dc0:	ret    
   37dc1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   37dcc:	nop    DWORD PTR [rax+0x0]

0000000000037dd0 <SSIRecommendMode>:
   37dd0:	endbr64 
   37dd4:	xor    eax,eax
   37dd6:	ret    
   37dd7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000037de0 <SSIGetFilePosition>:
   37de0:	endbr64 
   37de4:	push   r12
   37de6:	mov    r12d,esi
   37de9:	push   rbx
   37dea:	mov    rbx,rdx
   37ded:	sub    rsp,0x8
   37df1:	test   esi,esi
   37df3:	jne    37e20 <SSIGetFilePosition+0x40>
   37df5:	mov    BYTE PTR [rdx],0x0
   37df8:	call   3650 <ftell@plt>
   37dfd:	mov    DWORD PTR [rbx+0x8],eax
   37e00:	cmp    eax,0xffffffff
   37e03:	mov    eax,0x9
   37e08:	cmove  r12d,eax
   37e0c:	add    rsp,0x8
   37e10:	pop    rbx
   37e11:	mov    eax,r12d
   37e14:	pop    r12
   37e16:	ret    
   37e17:	nop    WORD PTR [rax+rax*1+0x0]
   37e20:	cmp    esi,0x1
   37e23:	jne    3859 <SSIGetFilePosition.cold>
   37e29:	mov    r12d,0x7
   37e2f:	mov    BYTE PTR [rdx],0x1
   37e32:	add    rsp,0x8
   37e36:	mov    eax,r12d
   37e39:	pop    rbx
   37e3a:	pop    r12
   37e3c:	ret    
   37e3d:	nop    DWORD PTR [rax]

0000000000037e40 <SSIAddFileToIndex>:
   37e40:	endbr64 
   37e44:	push   r14
   37e46:	mov    eax,0xd
   37e4b:	push   r13
   37e4d:	push   r12
   37e4f:	push   rbp
   37e50:	push   rbx
   37e51:	movzx  r12d,WORD PTR [rdi+0x34]
   37e56:	cmp    r12w,0x7ffe
   37e5c:	ja     37ed7 <SSIAddFileToIndex+0x97>
   37e5e:	mov    rbx,rdi
   37e61:	mov    rdi,rsi
   37e64:	mov    rbp,rsi
   37e67:	mov    r14d,edx
   37e6a:	mov    r13,rcx
   37e6d:	call   3560 <strlen@plt>
   37e72:	add    eax,0x1
   37e75:	cmp    eax,DWORD PTR [rbx+0x30]
   37e78:	jbe    37e7d <SSIAddFileToIndex+0x3d>
   37e7a:	mov    DWORD PTR [rbx+0x30],eax
   37e7d:	mov    rax,QWORD PTR [rbx+0x10]
   37e81:	xor    esi,esi
   37e83:	mov    rdi,rbp
   37e86:	lea    r12,[rax+r12*8]
   37e8a:	call   27530 <FileTail>
   37e8f:	movzx  edx,WORD PTR [rbx+0x34]
   37e93:	mov    rcx,QWORD PTR [rbx+0x18]
   37e97:	mov    QWORD PTR [r12],rax
   37e9b:	mov    DWORD PTR [rcx+rdx*4],r14d
   37e9f:	mov    rcx,QWORD PTR [rbx+0x20]
   37ea3:	mov    rax,rdx
   37ea6:	add    eax,0x1
   37ea9:	mov    DWORD PTR [rcx+rdx*4],0x0
   37eb0:	mov    rcx,QWORD PTR [rbx+0x28]
   37eb4:	mov    DWORD PTR [rcx+rdx*4],0x0
   37ebb:	movzx  edx,dx
   37ebe:	mov    DWORD PTR [r13+0x0],edx
   37ec2:	imul   dx,ax,0xcccd
   37ec7:	mov    WORD PTR [rbx+0x34],ax
   37ecb:	ror    dx,1
   37ece:	cmp    dx,0x1999
   37ed3:	jbe    37ee0 <SSIAddFileToIndex+0xa0>
   37ed5:	xor    eax,eax
   37ed7:	pop    rbx
   37ed8:	pop    rbp
   37ed9:	pop    r12
   37edb:	pop    r13
   37edd:	pop    r14
   37edf:	ret    
   37ee0:	movzx  eax,ax
   37ee3:	mov    rdi,QWORD PTR [rbx+0x10]
   37ee7:	lea    rsi,[rax*8+0x50]
   37eef:	call   36f0 <realloc@plt>
   37ef4:	mov    QWORD PTR [rbx+0x10],rax
   37ef8:	test   rax,rax
   37efb:	je     37f5b <SSIAddFileToIndex+0x11b>
   37efd:	movzx  eax,WORD PTR [rbx+0x34]
   37f01:	mov    rdi,QWORD PTR [rbx+0x18]
   37f05:	lea    rsi,[rax*4+0x28]
   37f0d:	call   36f0 <realloc@plt>
   37f12:	mov    QWORD PTR [rbx+0x18],rax
   37f16:	test   rax,rax
   37f19:	je     37f5b <SSIAddFileToIndex+0x11b>
   37f1b:	movzx  eax,WORD PTR [rbx+0x34]
   37f1f:	mov    rdi,QWORD PTR [rbx+0x20]
   37f23:	lea    rsi,[rax*4+0x28]
   37f2b:	call   36f0 <realloc@plt>
   37f30:	mov    QWORD PTR [rbx+0x20],rax
   37f34:	test   rax,rax
   37f37:	je     37f5b <SSIAddFileToIndex+0x11b>
   37f39:	movzx  eax,WORD PTR [rbx+0x34]
   37f3d:	mov    rdi,QWORD PTR [rbx+0x28]
   37f41:	lea    rsi,[rax*4+0x28]
   37f49:	call   36f0 <realloc@plt>
   37f4e:	mov    QWORD PTR [rbx+0x28],rax
   37f52:	test   rax,rax
   37f55:	jne    37ed5 <SSIAddFileToIndex+0x95>
   37f5b:	mov    eax,0x3
   37f60:	jmp    37ed7 <SSIAddFileToIndex+0x97>
   37f65:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000037f70 <SSISetFileForSubseq>:
   37f70:	endbr64 
   37f74:	test   esi,esi
   37f76:	js     37fa8 <SSISetFileForSubseq+0x38>
   37f78:	movzx  r8d,WORD PTR [rdi+0x34]
   37f7d:	mov    eax,0xc
   37f82:	cmp    r8d,esi
   37f85:	jle    37fad <SSISetFileForSubseq+0x3d>
   37f87:	test   edx,edx
   37f89:	jle    37fa8 <SSISetFileForSubseq+0x38>
   37f8b:	test   ecx,ecx
   37f8d:	jle    37fa8 <SSISetFileForSubseq+0x38>
   37f8f:	mov    rax,QWORD PTR [rdi+0x20]
   37f93:	movsxd rsi,esi
   37f96:	mov    DWORD PTR [rax+rsi*4],edx
   37f99:	mov    rax,QWORD PTR [rdi+0x28]
   37f9d:	mov    DWORD PTR [rax+rsi*4],ecx
   37fa0:	xor    eax,eax
   37fa2:	ret    
   37fa3:	nop    DWORD PTR [rax+rax*1+0x0]
   37fa8:	mov    eax,0xc
   37fad:	ret    
   37fae:	xchg   ax,ax

0000000000037fb0 <SSIAddPrimaryKeyToIndex>:
   37fb0:	endbr64 
   37fb4:	cmp    edx,0x7ffe
   37fba:	jg     38190 <SSIAddPrimaryKeyToIndex+0x1e0>
   37fc0:	push   r15
   37fc2:	push   r14
   37fc4:	push   r13
   37fc6:	push   r12
   37fc8:	mov    r12d,edx
   37fcb:	push   rbp
   37fcc:	push   rbx
   37fcd:	mov    rbx,rdi
   37fd0:	sub    rsp,0x18
   37fd4:	mov    edx,DWORD PTR [rdi+0x44]
   37fd7:	cmp    edx,0x7ffffffe
   37fdd:	ja     38230 <SSIAddPrimaryKeyToIndex+0x280>
   37fe3:	movsxd rbp,r9d
   37fe6:	mov    r15,rsi
   37fe9:	mov    r14,rcx
   37fec:	mov    r13,r8
   37fef:	test   ebp,ebp
   37ff1:	setg   BYTE PTR [rsp+0x7]
   37ff6:	movzx  eax,BYTE PTR [rsp+0x7]
   37ffb:	test   r8,r8
   37ffe:	je     38170 <SSIAddPrimaryKeyToIndex+0x1c0>
   38004:	mov    ecx,DWORD PTR [rbx+0x8]
   38007:	mov    DWORD PTR [rsp+0x8],edx
   3800b:	test   ecx,ecx
   3800d:	jne    380f8 <SSIAddPrimaryKeyToIndex+0x148>
   38013:	mov    rdi,rbx
   38016:	call   36da0 <current_index_size>
   3801b:	mov    edx,DWORD PTR [rsp+0x8]
   3801f:	mov    r8,rax
   38022:	movsxd rax,DWORD PTR [rbx+0xc]
   38026:	cmp    r8,rax
   38029:	jae    38248 <SSIAddPrimaryKeyToIndex+0x298>
   3802f:	mov    rdi,r15
   38032:	mov    DWORD PTR [rsp+0x8],edx
   38036:	call   3560 <strlen@plt>
   3803b:	mov    edx,DWORD PTR [rsp+0x8]
   3803f:	mov    esi,eax
   38041:	add    eax,0x1
   38044:	cmp    DWORD PTR [rbx+0x40],eax
   38047:	jb     381d0 <SSIAddPrimaryKeyToIndex+0x220>
   3804d:	lea    rax,[rdx*8+0x0]
   38055:	mov    rdi,r15
   38058:	sub    rax,rdx
   3805b:	mov    rdx,QWORD PTR [rbx+0x38]
   3805f:	lea    rdx,[rdx+rax*8]
   38063:	mov    QWORD PTR [rsp+0x8],rdx
   38068:	call   36ce0 <sre_strdup>
   3806d:	mov    rdx,QWORD PTR [rsp+0x8]
   38072:	mov    QWORD PTR [rdx],rax
   38075:	test   rax,rax
   38078:	je     38208 <SSIAddPrimaryKeyToIndex+0x258>
   3807e:	mov    ecx,DWORD PTR [rbx+0x44]
   38081:	mov    rdi,QWORD PTR [rbx+0x38]
   38085:	movdqu xmm0,XMMWORD PTR [r14]
   3808a:	lea    rax,[rcx*8+0x0]
   38092:	mov    rdx,rcx
   38095:	sub    rax,rcx
   38098:	lea    rax,[rdi+rax*8]
   3809c:	mov    WORD PTR [rax+0x8],r12w
   380a1:	movups XMMWORD PTR [rax+0x10],xmm0
   380a5:	test   r13,r13
   380a8:	je     38218 <SSIAddPrimaryKeyToIndex+0x268>
   380ae:	cmp    BYTE PTR [rsp+0x7],0x0
   380b3:	je     38218 <SSIAddPrimaryKeyToIndex+0x268>
   380b9:	movdqu xmm1,XMMWORD PTR [r13+0x0]
   380bf:	mov    DWORD PTR [rax+0x30],ebp
   380c2:	movups XMMWORD PTR [rax+0x20],xmm1
   380c6:	lea    eax,[rdx+0x1]
   380c9:	mov    DWORD PTR [rbx+0x44],eax
   380cc:	imul   eax,eax,0xc28f5c29
   380d2:	ror    eax,0x2
   380d5:	cmp    eax,0x28f5c28
   380da:	jbe    381e0 <SSIAddPrimaryKeyToIndex+0x230>
   380e0:	xor    eax,eax
   380e2:	add    rsp,0x18
   380e6:	pop    rbx
   380e7:	pop    rbp
   380e8:	pop    r12
   380ea:	pop    r13
   380ec:	pop    r14
   380ee:	pop    r15
   380f0:	ret    
   380f1:	nop    DWORD PTR [rax+0x0]
   380f8:	mov    rdi,r15
   380fb:	mov    DWORD PTR [rsp+0x8],ecx
   380ff:	call   3560 <strlen@plt>
   38104:	mov    ecx,DWORD PTR [rsp+0x8]
   38108:	mov    esi,eax
   3810a:	add    eax,0x1
   3810d:	cmp    eax,DWORD PTR [rbx+0x40]
   38110:	jbe    3811d <SSIAddPrimaryKeyToIndex+0x16d>
   38112:	mov    DWORD PTR [rbx+0x40],eax
   38115:	test   ecx,ecx
   38117:	je     38280 <SSIAddPrimaryKeyToIndex+0x2d0>
   3811d:	mov    edi,DWORD PTR [rbx]
   3811f:	xor    eax,eax
   38121:	test   edi,edi
   38123:	je     381a0 <SSIAddPrimaryKeyToIndex+0x1f0>
   38125:	test   r13,r13
   38128:	je     3812e <SSIAddPrimaryKeyToIndex+0x17e>
   3812a:	mov    rax,QWORD PTR [r13+0x8]
   3812e:	mov    rdi,QWORD PTR [rbx+0x50]
   38132:	push   rbp
   38133:	lea    rdx,[rip+0xa805]        # 4293f <cof.6115+0x13f>
   3813a:	mov    r8d,r12d
   3813d:	push   rax
   3813e:	mov    r9,QWORD PTR [r14+0x8]
   38142:	mov    rcx,r15
   38145:	mov    esi,0x1
   3814a:	xor    eax,eax
   3814c:	call   37c0 <__fprintf_chk@plt>
   38151:	pop    rax
   38152:	pop    rdx
   38153:	add    DWORD PTR [rbx+0x44],0x1
   38157:	add    rsp,0x18
   3815b:	xor    eax,eax
   3815d:	pop    rbx
   3815e:	pop    rbp
   3815f:	pop    r12
   38161:	pop    r13
   38163:	pop    r14
   38165:	pop    r15
   38167:	ret    
   38168:	nop    DWORD PTR [rax+rax*1+0x0]
   38170:	test   al,al
   38172:	jne    385e <SSIAddPrimaryKeyToIndex.cold>
   38178:	mov    ecx,DWORD PTR [rbx+0x8]
   3817b:	mov    DWORD PTR [rsp+0x8],edx
   3817f:	test   ecx,ecx
   38181:	jne    380f8 <SSIAddPrimaryKeyToIndex+0x148>
   38187:	jmp    38013 <SSIAddPrimaryKeyToIndex+0x63>
   3818c:	nop    DWORD PTR [rax+0x0]
   38190:	mov    eax,0xd
   38195:	ret    
   38196:	nop    WORD PTR cs:[rax+rax*1+0x0]
   381a0:	test   r13,r13
   381a3:	je     381a9 <SSIAddPrimaryKeyToIndex+0x1f9>
   381a5:	mov    eax,DWORD PTR [r13+0x8]
   381a9:	mov    rdi,QWORD PTR [rbx+0x50]
   381ad:	push   rbp
   381ae:	mov    rcx,r15
   381b1:	mov    esi,0x1
   381b6:	push   rax
   381b7:	mov    r9d,DWORD PTR [r14+0x8]
   381bb:	mov    r8d,r12d
   381be:	lea    rdx,[rip+0xa767]        # 4292c <cof.6115+0x12c>
   381c5:	xor    eax,eax
   381c7:	call   37c0 <__fprintf_chk@plt>
   381cc:	pop    rcx
   381cd:	pop    rsi
   381ce:	jmp    38153 <SSIAddPrimaryKeyToIndex+0x1a3>
   381d0:	mov    DWORD PTR [rbx+0x40],eax
   381d3:	jmp    3804d <SSIAddPrimaryKeyToIndex+0x9d>
   381d8:	nop    DWORD PTR [rax+rax*1+0x0]
   381e0:	lea    eax,[rdx+0x65]
   381e3:	lea    rsi,[rax*8+0x0]
   381eb:	sub    rsi,rax
   381ee:	shl    rsi,0x3
   381f2:	call   36f0 <realloc@plt>
   381f7:	mov    QWORD PTR [rbx+0x38],rax
   381fb:	test   rax,rax
   381fe:	jne    380e0 <SSIAddPrimaryKeyToIndex+0x130>
   38204:	nop    DWORD PTR [rax+0x0]
   38208:	mov    eax,0x3
   3820d:	jmp    380e2 <SSIAddPrimaryKeyToIndex+0x132>
   38212:	nop    WORD PTR [rax+rax*1+0x0]
   38218:	movdqu xmm2,XMMWORD PTR [r14]
   3821d:	mov    DWORD PTR [rax+0x30],0x0
   38224:	movups XMMWORD PTR [rax+0x20],xmm2
   38228:	jmp    380c6 <SSIAddPrimaryKeyToIndex+0x116>
   3822d:	nop    DWORD PTR [rax]
   38230:	add    rsp,0x18
   38234:	mov    eax,0xe
   38239:	pop    rbx
   3823a:	pop    rbp
   3823b:	pop    r12
   3823d:	pop    r13
   3823f:	pop    r14
   38241:	pop    r15
   38243:	ret    
   38244:	nop    DWORD PTR [rax+0x0]
   38248:	call   37060 <activate_external_sort>
   3824d:	mov    r8d,eax
   38250:	mov    eax,0x4
   38255:	test   r8d,r8d
   38258:	jne    380e2 <SSIAddPrimaryKeyToIndex+0x132>
   3825e:	mov    rdi,r15
   38261:	call   3560 <strlen@plt>
   38266:	mov    ecx,DWORD PTR [rbx+0x8]
   38269:	mov    esi,eax
   3826b:	add    eax,0x1
   3826e:	cmp    eax,DWORD PTR [rbx+0x40]
   38271:	jbe    38115 <SSIAddPrimaryKeyToIndex+0x165>
   38277:	jmp    38112 <SSIAddPrimaryKeyToIndex+0x162>
   3827c:	nop    DWORD PTR [rax+0x0]
   38280:	mov    edx,DWORD PTR [rbx+0x44]
   38283:	jmp    3804d <SSIAddPrimaryKeyToIndex+0x9d>
   38288:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000038290 <SSIAddSecondaryKeyToIndex>:
   38290:	endbr64 
   38294:	push   r14
   38296:	mov    eax,0xe
   3829b:	push   r13
   3829d:	push   r12
   3829f:	push   rbp
   382a0:	push   rbx
   382a1:	mov    ebp,DWORD PTR [rdi+0x64]
   382a4:	cmp    ebp,0x7ffffffe
   382aa:	ja     38325 <SSIAddSecondaryKeyToIndex+0x95>
   382ac:	mov    r14d,DWORD PTR [rdi+0x8]
   382b0:	mov    rbx,rdi
   382b3:	mov    r13,rsi
   382b6:	mov    r12,rdx
   382b9:	test   r14d,r14d
   382bc:	jne    382f0 <SSIAddSecondaryKeyToIndex+0x60>
   382be:	call   36da0 <current_index_size>
   382c3:	mov    r8,rax
   382c6:	movsxd rax,DWORD PTR [rdi+0xc]
   382ca:	cmp    r8,rax
   382cd:	jae    38330 <SSIAddSecondaryKeyToIndex+0xa0>
   382cf:	mov    rdi,r13
   382d2:	call   3560 <strlen@plt>
   382d7:	mov    esi,eax
   382d9:	add    eax,0x1
   382dc:	cmp    eax,DWORD PTR [rbx+0x60]
   382df:	jbe    38363 <SSIAddSecondaryKeyToIndex+0xd3>
   382e5:	mov    DWORD PTR [rbx+0x60],eax
   382e8:	jmp    38363 <SSIAddSecondaryKeyToIndex+0xd3>
   382ea:	nop    WORD PTR [rax+rax*1+0x0]
   382f0:	mov    rdi,rsi
   382f3:	call   3560 <strlen@plt>
   382f8:	mov    esi,eax
   382fa:	add    eax,0x1
   382fd:	cmp    eax,DWORD PTR [rbx+0x60]
   38300:	ja     38358 <SSIAddSecondaryKeyToIndex+0xc8>
   38302:	mov    rdi,QWORD PTR [rbx+0x70]
   38306:	mov    r8,r12
   38309:	mov    rcx,r13
   3830c:	mov    esi,0x1
   38311:	lea    rdx,[rip+0xa60a]        # 42922 <cof.6115+0x122>
   38318:	xor    eax,eax
   3831a:	call   37c0 <__fprintf_chk@plt>
   3831f:	add    DWORD PTR [rbx+0x64],0x1
   38323:	xor    eax,eax
   38325:	pop    rbx
   38326:	pop    rbp
   38327:	pop    r12
   38329:	pop    r13
   3832b:	pop    r14
   3832d:	ret    
   3832e:	xchg   ax,ax
   38330:	call   37060 <activate_external_sort>
   38335:	mov    r8d,eax
   38338:	mov    eax,0x4
   3833d:	test   r8d,r8d
   38340:	jne    38325 <SSIAddSecondaryKeyToIndex+0x95>
   38342:	mov    rdi,r13
   38345:	call   3560 <strlen@plt>
   3834a:	mov    r14d,DWORD PTR [rbx+0x8]
   3834e:	mov    esi,eax
   38350:	add    eax,0x1
   38353:	cmp    eax,DWORD PTR [rbx+0x60]
   38356:	jbe    3835b <SSIAddSecondaryKeyToIndex+0xcb>
   38358:	mov    DWORD PTR [rbx+0x60],eax
   3835b:	test   r14d,r14d
   3835e:	jne    38302 <SSIAddSecondaryKeyToIndex+0x72>
   38360:	mov    ebp,DWORD PTR [rbx+0x64]
   38363:	mov    rdi,r13
   38366:	shl    rbp,0x4
   3836a:	add    rbp,QWORD PTR [rbx+0x58]
   3836e:	call   36ce0 <sre_strdup>
   38373:	mov    QWORD PTR [rbp+0x0],rax
   38377:	test   rax,rax
   3837a:	je     383e1 <SSIAddSecondaryKeyToIndex+0x151>
   3837c:	mov    ebp,DWORD PTR [rbx+0x64]
   3837f:	mov    esi,0xffffffff
   38384:	mov    rdi,r12
   38387:	shl    rbp,0x4
   3838b:	add    rbp,QWORD PTR [rbx+0x58]
   3838f:	call   36ce0 <sre_strdup>
   38394:	mov    QWORD PTR [rbp+0x8],rax
   38398:	test   rax,rax
   3839b:	je     383e1 <SSIAddSecondaryKeyToIndex+0x151>
   3839d:	mov    edx,DWORD PTR [rbx+0x64]
   383a0:	lea    eax,[rdx+0x1]
   383a3:	mov    DWORD PTR [rbx+0x64],eax
   383a6:	imul   eax,eax,0xc28f5c29
   383ac:	ror    eax,0x2
   383af:	cmp    eax,0x28f5c28
   383b4:	jbe    383c8 <SSIAddSecondaryKeyToIndex+0x138>
   383b6:	pop    rbx
   383b7:	xor    eax,eax
   383b9:	pop    rbp
   383ba:	pop    r12
   383bc:	pop    r13
   383be:	pop    r14
   383c0:	ret    
   383c1:	nop    DWORD PTR [rax+0x0]
   383c8:	lea    esi,[rdx+0x65]
   383cb:	mov    rdi,QWORD PTR [rbx+0x58]
   383cf:	shl    rsi,0x4
   383d3:	call   36f0 <realloc@plt>
   383d8:	mov    QWORD PTR [rbx+0x58],rax
   383dc:	test   rax,rax
   383df:	jne    383b6 <SSIAddSecondaryKeyToIndex+0x126>
   383e1:	pop    rbx
   383e2:	mov    eax,0x3
   383e7:	pop    rbp
   383e8:	pop    r12
   383ea:	pop    r13
   383ec:	pop    r14
   383ee:	ret    
   383ef:	nop

00000000000383f0 <SSIWriteIndex>:
   383f0:	endbr64 
   383f4:	push   r15
   383f6:	mov    r15,rsi
   383f9:	lea    rsi,[rip+0x5ec4]        # 3e2c4 <_IO_stdin_used+0x12c4>
   38400:	push   r14
   38402:	push   r13
   38404:	push   r12
   38406:	push   rbp
   38407:	push   rbx
   38408:	sub    rsp,0x498
   3840f:	mov    rax,QWORD PTR fs:0x28
   38418:	mov    QWORD PTR [rsp+0x488],rax
   38420:	xor    eax,eax
   38422:	call   3750 <fopen@plt>
   38427:	test   rax,rax
   3842a:	je     38840 <SSIWriteIndex+0x450>
   38430:	mov    rdi,r15
   38433:	mov    rbp,rax
   38436:	call   36da0 <current_index_size>
   3843b:	cmp    rax,0x7fe
   38441:	ja     38820 <SSIWriteIndex+0x430>
   38447:	mov    eax,DWORD PTR [r15+0x30]
   3844b:	mov    ebx,DWORD PTR [r15+0x40]
   3844f:	xor    r12d,r12d
   38452:	cmp    DWORD PTR [r15],0x1
   38456:	mov    DWORD PTR [rsp+0x10],eax
   3845a:	mov    eax,DWORD PTR [r15+0x60]
   3845e:	mov    DWORD PTR [rsp+0x18],eax
   38462:	lea    eax,[rbx+0xe]
   38465:	mov    DWORD PTR [rsp],eax
   38468:	jne    38476 <SSIWriteIndex+0x86>
   3846a:	lea    eax,[rbx+0x16]
   3846d:	mov    r12d,0x1
   38473:	mov    DWORD PTR [rsp],eax
   38476:	mov    QWORD PTR [rsp+0x8],0x36
   3847f:	cmp    DWORD PTR [r15+0x4],0x1
   38484:	jne    38493 <SSIWriteIndex+0xa3>
   38486:	mov    QWORD PTR [rsp+0x8],0x42
   3848f:	or     r12d,0x2
   38493:	movzx  eax,WORD PTR [r15+0x34]
   38498:	mov    ecx,DWORD PTR [r15+0x8]
   3849c:	mov    r14d,DWORD PTR [r15+0x44]
   384a0:	mov    WORD PTR [rsp+0x1e],ax
   384a5:	test   ecx,ecx
   384a7:	jne    38750 <SSIWriteIndex+0x360>
   384ad:	mov    rdi,QWORD PTR [r15+0x38]
   384b1:	lea    rcx,[rip+0xffffffffffffea18]        # 36ed0 <pkeysort>
   384b8:	mov    esi,r14d
   384bb:	xor    eax,eax
   384bd:	mov    edx,0x38
   384c2:	call   236d0 <specqsort>
   384c7:	mov    esi,DWORD PTR [r15+0x64]
   384cb:	mov    rdi,QWORD PTR [r15+0x58]
   384cf:	xor    eax,eax
   384d1:	lea    rcx,[rip+0xffffffffffffe9e8]        # 36ec0 <skeysort>
   384d8:	mov    edx,0x10
   384dd:	call   236d0 <specqsort>
   384e2:	mov    esi,0xf3f3e9b1
   384e7:	mov    rdi,rbp
   384ea:	call   36f80 <write_i32>
   384ef:	test   eax,eax
   384f1:	je     38718 <SSIWriteIndex+0x328>
   384f7:	mov    esi,r12d
   384fa:	mov    rdi,rbp
   384fd:	call   36f80 <write_i32>
   38502:	test   eax,eax
   38504:	je     38718 <SSIWriteIndex+0x328>
   3850a:	movzx  esi,WORD PTR [r15+0x34]
   3850f:	mov    rdi,rbp
   38512:	call   36f30 <write_i16>
   38517:	test   eax,eax
   38519:	je     38718 <SSIWriteIndex+0x328>
   3851f:	mov    esi,DWORD PTR [r15+0x44]
   38523:	mov    rdi,rbp
   38526:	call   36f80 <write_i32>
   3852b:	test   eax,eax
   3852d:	je     38718 <SSIWriteIndex+0x328>
   38533:	mov    esi,DWORD PTR [r15+0x64]
   38537:	mov    rdi,rbp
   3853a:	call   36f80 <write_i32>
   3853f:	test   eax,eax
   38541:	je     38718 <SSIWriteIndex+0x328>
   38547:	mov    esi,DWORD PTR [r15+0x30]
   3854b:	mov    rdi,rbp
   3854e:	call   36f80 <write_i32>
   38553:	test   eax,eax
   38555:	je     38718 <SSIWriteIndex+0x328>
   3855b:	mov    esi,DWORD PTR [r15+0x40]
   3855f:	mov    rdi,rbp
   38562:	call   36f80 <write_i32>
   38567:	test   eax,eax
   38569:	je     38718 <SSIWriteIndex+0x328>
   3856f:	mov    esi,DWORD PTR [r15+0x60]
   38573:	mov    rdi,rbp
   38576:	call   36f80 <write_i32>
   3857b:	test   eax,eax
   3857d:	je     38718 <SSIWriteIndex+0x328>
   38583:	mov    r12d,DWORD PTR [rsp+0x10]
   38588:	mov    rdi,rbp
   3858b:	add    r12d,0x10
   3858f:	mov    esi,r12d
   38592:	call   36f80 <write_i32>
   38597:	test   eax,eax
   38599:	je     38718 <SSIWriteIndex+0x328>
   3859f:	mov    r13d,DWORD PTR [rsp]
   385a3:	mov    rdi,rbp
   385a6:	mov    esi,r13d
   385a9:	call   36f80 <write_i32>
   385ae:	test   eax,eax
   385b0:	je     38718 <SSIWriteIndex+0x328>
   385b6:	mov    esi,DWORD PTR [rsp+0x18]
   385ba:	mov    rdi,rbp
   385bd:	add    esi,ebx
   385bf:	call   36f80 <write_i32>
   385c4:	test   eax,eax
   385c6:	je     38718 <SSIWriteIndex+0x328>
   385cc:	movzx  eax,WORD PTR [rsp+0x1e]
   385d1:	imul   r14d,r13d
   385d5:	mov    edx,DWORD PTR [r15+0x4]
   385d9:	imul   r12d,eax
   385dd:	mov    rax,QWORD PTR [rsp+0x8]
   385e2:	add    r12,rax
   385e5:	add    r14,r12
   385e8:	test   edx,edx
   385ea:	jne    3884a <SSIWriteIndex+0x45a>
   385f0:	mov    esi,eax
   385f2:	mov    rdi,rbp
   385f5:	call   36f80 <write_i32>
   385fa:	test   eax,eax
   385fc:	je     38718 <SSIWriteIndex+0x328>
   38602:	mov    esi,r12d
   38605:	mov    rdi,rbp
   38608:	call   36f80 <write_i32>
   3860d:	test   eax,eax
   3860f:	je     38718 <SSIWriteIndex+0x328>
   38615:	mov    esi,r14d
   38618:	mov    rdi,rbp
   3861b:	call   36f80 <write_i32>
   38620:	test   eax,eax
   38622:	je     38718 <SSIWriteIndex+0x328>
   38628:	mov    edi,DWORD PTR [r15+0x30]
   3862c:	call   36b0 <malloc@plt>
   38631:	mov    r14,rax
   38634:	test   rax,rax
   38637:	je     38c9a <SSIWriteIndex+0x8aa>
   3863d:	cmp    WORD PTR [r15+0x34],0x0
   38643:	je     3888f <SSIWriteIndex+0x49f>
   38649:	xor    ebx,ebx
   3864b:	jmp    386b8 <SSIWriteIndex+0x2c8>
   3864d:	nop    DWORD PTR [rax]
   38650:	mov    rax,QWORD PTR [r15+0x18]
   38654:	mov    rdi,rbp
   38657:	mov    esi,DWORD PTR [rax+r12*1]
   3865b:	call   36f80 <write_i32>
   38660:	test   eax,eax
   38662:	je     38718 <SSIWriteIndex+0x328>
   38668:	mov    esi,r13d
   3866b:	mov    rdi,rbp
   3866e:	call   36f80 <write_i32>
   38673:	test   eax,eax
   38675:	je     38718 <SSIWriteIndex+0x328>
   3867b:	mov    rax,QWORD PTR [r15+0x20]
   3867f:	mov    rdi,rbp
   38682:	mov    esi,DWORD PTR [rax+r12*1]
   38686:	call   36f80 <write_i32>
   3868b:	test   eax,eax
   3868d:	je     38718 <SSIWriteIndex+0x328>
   38693:	mov    rax,QWORD PTR [r15+0x28]
   38697:	mov    rdi,rbp
   3869a:	mov    esi,DWORD PTR [rax+r12*1]
   3869e:	call   36f80 <write_i32>
   386a3:	test   eax,eax
   386a5:	je     38718 <SSIWriteIndex+0x328>
   386a7:	movzx  eax,WORD PTR [r15+0x34]
   386ac:	add    rbx,0x1
   386b0:	cmp    eax,ebx
   386b2:	jle    3888f <SSIWriteIndex+0x49f>
   386b8:	mov    rax,QWORD PTR [r15+0x20]
   386bc:	lea    r12,[rbx*4+0x0]
   386c4:	mov    r13d,DWORD PTR [rax+rbx*4]
   386c8:	test   r13d,r13d
   386cb:	je     386dd <SSIWriteIndex+0x2ed>
   386cd:	mov    rax,QWORD PTR [r15+0x28]
   386d1:	xor    r13d,r13d
   386d4:	mov    eax,DWORD PTR [rax+rbx*4]
   386d7:	test   eax,eax
   386d9:	setne  r13b
   386dd:	mov    rax,QWORD PTR [r15+0x10]
   386e1:	mov    rdi,r14
   386e4:	mov    rsi,QWORD PTR [rax+rbx*8]
   386e8:	call   34e0 <strcpy@plt>
   386ed:	mov    edx,DWORD PTR [r15+0x30]
   386f1:	mov    rcx,rbp
   386f4:	mov    rdi,r14
   386f7:	mov    esi,0x1
   386fc:	call   37b0 <fwrite@plt>
   38701:	mov    r8,rax
   38704:	mov    eax,DWORD PTR [r15+0x30]
   38708:	cmp    r8,rax
   3870b:	je     38650 <SSIWriteIndex+0x260>
   38711:	nop    DWORD PTR [rax+0x0]
   38718:	mov    eax,0xf
   3871d:	mov    rcx,QWORD PTR [rsp+0x488]
   38725:	xor    rcx,QWORD PTR fs:0x28
   3872e:	jne    3888a <SSIWriteIndex+0x49a>
   38734:	add    rsp,0x498
   3873b:	pop    rbx
   3873c:	pop    rbp
   3873d:	pop    r12
   3873f:	pop    r13
   38741:	pop    r14
   38743:	pop    r15
   38745:	ret    
   38746:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38750:	mov    rdi,QWORD PTR [r15+0x50]
   38754:	lea    r13,[rsp+0x80]
   3875c:	call   3530 <fclose@plt>
   38761:	mov    r8,QWORD PTR [r15+0x48]
   38765:	mov    rdi,r13
   38768:	xor    eax,eax
   3876a:	mov    QWORD PTR [r15+0x50],0x0
   38772:	mov    edx,0x400
   38777:	mov    esi,0x1
   3877c:	lea    rcx,[rip+0xa365]        # 42ae8 <cof.6115+0x2e8>
   38783:	mov    r9,r8
   38786:	call   3830 <__sprintf_chk@plt>
   3878b:	mov    rdi,r13
   3878e:	call   3580 <system@plt>
   38793:	test   eax,eax
   38795:	jne    38810 <SSIWriteIndex+0x420>
   38797:	mov    rdi,QWORD PTR [r15+0x48]
   3879b:	lea    rsi,[rip+0x87ac]        # 40f4e <gki_primes+0x4ce>
   387a2:	call   3750 <fopen@plt>
   387a7:	mov    QWORD PTR [r15+0x50],rax
   387ab:	test   rax,rax
   387ae:	je     38810 <SSIWriteIndex+0x420>
   387b0:	mov    rdi,QWORD PTR [r15+0x70]
   387b4:	call   3530 <fclose@plt>
   387b9:	mov    r8,QWORD PTR [r15+0x68]
   387bd:	mov    rdi,r13
   387c0:	xor    eax,eax
   387c2:	mov    QWORD PTR [r15+0x70],0x0
   387ca:	mov    edx,0x400
   387cf:	mov    esi,0x1
   387d4:	lea    rcx,[rip+0xa30d]        # 42ae8 <cof.6115+0x2e8>
   387db:	mov    r9,r8
   387de:	call   3830 <__sprintf_chk@plt>
   387e3:	mov    rdi,r13
   387e6:	call   3580 <system@plt>
   387eb:	test   eax,eax
   387ed:	jne    38810 <SSIWriteIndex+0x420>
   387ef:	mov    rdi,QWORD PTR [r15+0x68]
   387f3:	lea    rsi,[rip+0x8754]        # 40f4e <gki_primes+0x4ce>
   387fa:	call   3750 <fopen@plt>
   387ff:	mov    QWORD PTR [r15+0x70],rax
   38803:	test   rax,rax
   38806:	jne    384e2 <SSIWriteIndex+0xf2>
   3880c:	nop    DWORD PTR [rax+0x0]
   38810:	mov    eax,0x10
   38815:	jmp    3871d <SSIWriteIndex+0x32d>
   3881a:	nop    WORD PTR [rax+rax*1+0x0]
   38820:	mov    DWORD PTR [r15+0x4],0x1
   38828:	lea    rdi,[rip+0xa241]        # 42a70 <cof.6115+0x270>
   3882f:	xor    eax,eax
   38831:	call   317f0 <Die>
   38836:	jmp    38447 <SSIWriteIndex+0x57>
   3883b:	nop    DWORD PTR [rax+rax*1+0x0]
   38840:	mov    eax,0x4
   38845:	jmp    3871d <SSIWriteIndex+0x32d>
   3884a:	mov    rsi,QWORD PTR [rsp+0x8]
   3884f:	mov    rdi,rbp
   38852:	call   36ee0 <write_i64>
   38857:	test   eax,eax
   38859:	je     38718 <SSIWriteIndex+0x328>
   3885f:	mov    rsi,r12
   38862:	mov    rdi,rbp
   38865:	call   36ee0 <write_i64>
   3886a:	test   eax,eax
   3886c:	je     38718 <SSIWriteIndex+0x328>
   38872:	mov    rsi,r14
   38875:	mov    rdi,rbp
   38878:	call   36ee0 <write_i64>
   3887d:	test   eax,eax
   3887f:	jne    38628 <SSIWriteIndex+0x238>
   38885:	jmp    38718 <SSIWriteIndex+0x328>
   3888a:	call   3570 <__stack_chk_fail@plt>
   3888f:	mov    rdi,r14
   38892:	call   3460 <free@plt>
   38897:	mov    edi,DWORD PTR [r15+0x40]
   3889b:	call   36b0 <malloc@plt>
   388a0:	mov    r12,rax
   388a3:	test   rax,rax
   388a6:	je     38c9a <SSIWriteIndex+0x8aa>
   388ac:	mov    r13d,DWORD PTR [r15+0x8]
   388b0:	test   r13d,r13d
   388b3:	jne    38982 <SSIWriteIndex+0x592>
   388b9:	xor    ebx,ebx
   388bb:	cmp    DWORD PTR [r15+0x44],0x0
   388c0:	jne    38949 <SSIWriteIndex+0x559>
   388c6:	jmp    38b6a <SSIWriteIndex+0x77a>
   388cb:	nop    DWORD PTR [rax+rax*1+0x0]
   388d0:	mov    rax,QWORD PTR [r15+0x38]
   388d4:	mov    rdi,rbp
   388d7:	movzx  esi,WORD PTR [rax+rbx*1+0x8]
   388dc:	call   36f30 <write_i16>
   388e1:	test   eax,eax
   388e3:	je     38718 <SSIWriteIndex+0x328>
   388e9:	mov    rsi,QWORD PTR [r15+0x38]
   388ed:	mov    rdi,rbp
   388f0:	add    rsi,rbx
   388f3:	add    rsi,0x10
   388f7:	call   372b0 <write_offset>
   388fc:	test   eax,eax
   388fe:	je     38718 <SSIWriteIndex+0x328>
   38904:	mov    rsi,QWORD PTR [r15+0x38]
   38908:	mov    rdi,rbp
   3890b:	add    rsi,rbx
   3890e:	add    rsi,0x20
   38912:	call   372b0 <write_offset>
   38917:	test   eax,eax
   38919:	je     38718 <SSIWriteIndex+0x328>
   3891f:	mov    rax,QWORD PTR [r15+0x38]
   38923:	mov    rdi,rbp
   38926:	mov    esi,DWORD PTR [rax+rbx*1+0x30]
   3892a:	call   36f80 <write_i32>
   3892f:	test   eax,eax
   38931:	je     38718 <SSIWriteIndex+0x328>
   38937:	add    r13d,0x1
   3893b:	add    rbx,0x38
   3893f:	cmp    DWORD PTR [r15+0x44],r13d
   38943:	jbe    38b6a <SSIWriteIndex+0x77a>
   38949:	mov    rax,QWORD PTR [r15+0x38]
   3894d:	mov    rdi,r12
   38950:	mov    rsi,QWORD PTR [rax+rbx*1]
   38954:	call   34e0 <strcpy@plt>
   38959:	mov    edx,DWORD PTR [r15+0x40]
   3895d:	mov    rcx,rbp
   38960:	mov    rdi,r12
   38963:	mov    esi,0x1
   38968:	call   37b0 <fwrite@plt>
   3896d:	mov    r8,rax
   38970:	mov    eax,DWORD PTR [r15+0x40]
   38974:	cmp    r8,rax
   38977:	je     388d0 <SSIWriteIndex+0x4e0>
   3897d:	jmp    38718 <SSIWriteIndex+0x328>
   38982:	lea    rax,[rsp+0x28]
   38987:	mov    DWORD PTR [rsp+0x28],0x0
   3898f:	xor    ebx,ebx
   38991:	mov    QWORD PTR [rsp+0x30],0x0
   3899a:	mov    QWORD PTR [rsp+0x8],rax
   3899f:	jmp    38abf <SSIWriteIndex+0x6cf>
   389a4:	mov    rdi,r13
   389a7:	mov    rdx,r14
   389aa:	lea    rsi,[rip+0x931c]        # 41ccd <CSWTCH.18+0x60d>
   389b1:	call   36c50 <sre_strtok>
   389b6:	mov    rdi,rax
   389b9:	test   rax,rax
   389bc:	je     38b4c <SSIWriteIndex+0x75c>
   389c2:	mov    edx,0xa
   389c7:	xor    esi,esi
   389c9:	mov    BYTE PTR [rsp+0x50],0x0
   389ce:	call   3780 <strtoul@plt>
   389d3:	mov    rdi,r13
   389d6:	mov    rdx,r14
   389d9:	lea    rsi,[rip+0x92ed]        # 41ccd <CSWTCH.18+0x60d>
   389e0:	mov    DWORD PTR [rsp+0x58],eax
   389e4:	call   36c50 <sre_strtok>
   389e9:	mov    rdi,rax
   389ec:	test   rax,rax
   389ef:	je     38b4c <SSIWriteIndex+0x75c>
   389f5:	mov    edx,0xa
   389fa:	xor    esi,esi
   389fc:	mov    BYTE PTR [rsp+0x60],0x0
   38a01:	call   3780 <strtoul@plt>
   38a06:	mov    rdi,r13
   38a09:	mov    rdx,r14
   38a0c:	lea    rsi,[rip+0x92ba]        # 41ccd <CSWTCH.18+0x60d>
   38a13:	mov    DWORD PTR [rsp+0x68],eax
   38a17:	call   36c50 <sre_strtok>
   38a1c:	mov    rdi,rax
   38a1f:	test   rax,rax
   38a22:	je     38b4c <SSIWriteIndex+0x75c>
   38a28:	mov    edx,0xa
   38a2d:	xor    esi,esi
   38a2f:	call   3780 <strtoul@plt>
   38a34:	mov    rsi,QWORD PTR [rsp+0x40]
   38a39:	mov    rdi,r12
   38a3c:	mov    DWORD PTR [rsp+0x70],eax
   38a40:	call   34e0 <strcpy@plt>
   38a45:	mov    edx,DWORD PTR [r15+0x40]
   38a49:	mov    rcx,rbp
   38a4c:	mov    rdi,r12
   38a4f:	mov    esi,0x1
   38a54:	call   37b0 <fwrite@plt>
   38a59:	mov    r8,rax
   38a5c:	mov    eax,DWORD PTR [r15+0x40]
   38a60:	cmp    r8,rax
   38a63:	jne    38718 <SSIWriteIndex+0x328>
   38a69:	movzx  esi,WORD PTR [rsp+0x48]
   38a6e:	mov    rdi,rbp
   38a71:	call   36f30 <write_i16>
   38a76:	test   eax,eax
   38a78:	je     38718 <SSIWriteIndex+0x328>
   38a7e:	lea    rsi,[rsp+0x50]
   38a83:	mov    rdi,rbp
   38a86:	call   372b0 <write_offset>
   38a8b:	test   eax,eax
   38a8d:	je     38718 <SSIWriteIndex+0x328>
   38a93:	lea    rsi,[rsp+0x60]
   38a98:	mov    rdi,rbp
   38a9b:	call   372b0 <write_offset>
   38aa0:	test   eax,eax
   38aa2:	je     38718 <SSIWriteIndex+0x328>
   38aa8:	mov    esi,DWORD PTR [rsp+0x70]
   38aac:	mov    rdi,rbp
   38aaf:	call   36f80 <write_i32>
   38ab4:	test   eax,eax
   38ab6:	je     38718 <SSIWriteIndex+0x328>
   38abc:	add    ebx,0x1
   38abf:	cmp    DWORD PTR [r15+0x44],ebx
   38ac3:	jbe    38b60 <SSIWriteIndex+0x770>
   38ac9:	mov    rdx,QWORD PTR [r15+0x50]
   38acd:	mov    rsi,QWORD PTR [rsp+0x8]
   38ad2:	lea    rdi,[rsp+0x30]
   38ad7:	call   36a50 <sre_fgets>
   38adc:	test   rax,rax
   38adf:	je     38b56 <SSIWriteIndex+0x766>
   38ae1:	mov    eax,DWORD PTR [r15]
   38ae4:	lea    r14,[rsp+0x2c]
   38ae9:	lea    r13,[rsp+0x38]
   38aee:	mov    rdx,r14
   38af1:	lea    rsi,[rip+0x91d5]        # 41ccd <CSWTCH.18+0x60d>
   38af8:	mov    rdi,r13
   38afb:	mov    DWORD PTR [rsp],eax
   38afe:	mov    rax,QWORD PTR [rsp+0x30]
   38b03:	mov    QWORD PTR [rsp+0x38],rax
   38b08:	call   36c50 <sre_strtok>
   38b0d:	test   rax,rax
   38b10:	je     38b4c <SSIWriteIndex+0x75c>
   38b12:	mov    rdi,r13
   38b15:	mov    rdx,r14
   38b18:	mov    QWORD PTR [rsp+0x40],rax
   38b1d:	lea    rsi,[rip+0x91a9]        # 41ccd <CSWTCH.18+0x60d>
   38b24:	call   36c50 <sre_strtok>
   38b29:	mov    rdi,rax
   38b2c:	test   rax,rax
   38b2f:	je     38b4c <SSIWriteIndex+0x75c>
   38b31:	xor    esi,esi
   38b33:	mov    edx,0xa
   38b38:	call   3670 <strtol@plt>
   38b3d:	cmp    BYTE PTR [rsp],0x0
   38b41:	mov    WORD PTR [rsp+0x48],ax
   38b46:	je     389a4 <SSIWriteIndex+0x5b4>
   38b4c:	mov    eax,0x6
   38b51:	jmp    3871d <SSIWriteIndex+0x32d>
   38b56:	mov    eax,0x1
   38b5b:	jmp    3871d <SSIWriteIndex+0x32d>
   38b60:	mov    rdi,QWORD PTR [rsp+0x30]
   38b65:	call   3460 <free@plt>
   38b6a:	cmp    DWORD PTR [r15+0x64],0x0
   38b6f:	je     38cb6 <SSIWriteIndex+0x8c6>
   38b75:	mov    edi,DWORD PTR [r15+0x60]
   38b79:	call   36b0 <malloc@plt>
   38b7e:	mov    r13,rax
   38b81:	test   rax,rax
   38b84:	je     38c9a <SSIWriteIndex+0x8aa>
   38b8a:	cmp    DWORD PTR [r15+0x8],0x0
   38b8f:	je     38ccd <SSIWriteIndex+0x8dd>
   38b95:	mov    QWORD PTR [rsp+0x38],0x0
   38b9e:	xor    ebx,ebx
   38ba0:	lea    r14,[rsp+0x2c]
   38ba5:	mov    DWORD PTR [rsp+0x2c],0x0
   38bad:	jmp    38c3e <SSIWriteIndex+0x84e>
   38bb2:	mov    rdx,QWORD PTR [rsp+0x10]
   38bb7:	mov    rdi,QWORD PTR [rsp]
   38bbb:	lea    rsi,[rip+0x910b]        # 41ccd <CSWTCH.18+0x60d>
   38bc2:	call   36c50 <sre_strtok>
   38bc7:	test   rax,rax
   38bca:	mov    QWORD PTR [rsp],rax
   38bce:	je     38b4c <SSIWriteIndex+0x75c>
   38bd4:	mov    r9,QWORD PTR [rsp+0x8]
   38bd9:	mov    rdi,r13
   38bdc:	mov    rsi,r9
   38bdf:	call   34e0 <strcpy@plt>
   38be4:	mov    r8,QWORD PTR [rsp]
   38be8:	mov    rdi,r12
   38beb:	mov    rsi,r8
   38bee:	call   34e0 <strcpy@plt>
   38bf3:	mov    edx,DWORD PTR [r15+0x60]
   38bf7:	mov    rcx,rbp
   38bfa:	mov    rdi,r13
   38bfd:	mov    esi,0x1
   38c02:	call   37b0 <fwrite@plt>
   38c07:	mov    r8,rax
   38c0a:	mov    eax,DWORD PTR [r15+0x60]
   38c0e:	cmp    r8,rax
   38c11:	jne    38718 <SSIWriteIndex+0x328>
   38c17:	mov    edx,DWORD PTR [r15+0x40]
   38c1b:	mov    rcx,rbp
   38c1e:	mov    esi,0x1
   38c23:	mov    rdi,r12
   38c26:	call   37b0 <fwrite@plt>
   38c2b:	mov    r8,rax
   38c2e:	mov    eax,DWORD PTR [r15+0x40]
   38c32:	cmp    r8,rax
   38c35:	jne    38718 <SSIWriteIndex+0x328>
   38c3b:	add    ebx,0x1
   38c3e:	cmp    DWORD PTR [r15+0x64],ebx
   38c42:	jbe    38ca4 <SSIWriteIndex+0x8b4>
   38c44:	mov    rdx,QWORD PTR [r15+0x70]
   38c48:	lea    rdi,[rsp+0x38]
   38c4d:	mov    rsi,r14
   38c50:	call   36a50 <sre_fgets>
   38c55:	test   rax,rax
   38c58:	je     38b56 <SSIWriteIndex+0x766>
   38c5e:	mov    rax,QWORD PTR [rsp+0x38]
   38c63:	lea    rdx,[rsp+0x30]
   38c68:	lea    rdi,[rsp+0x40]
   38c6d:	lea    rsi,[rip+0x9059]        # 41ccd <CSWTCH.18+0x60d>
   38c74:	mov    QWORD PTR [rsp+0x10],rdx
   38c79:	mov    QWORD PTR [rsp+0x40],rax
   38c7e:	mov    QWORD PTR [rsp],rdi
   38c82:	call   36c50 <sre_strtok>
   38c87:	test   rax,rax
   38c8a:	mov    QWORD PTR [rsp+0x8],rax
   38c8f:	jne    38bb2 <SSIWriteIndex+0x7c2>
   38c95:	jmp    38b4c <SSIWriteIndex+0x75c>
   38c9a:	mov    eax,0x3
   38c9f:	jmp    3871d <SSIWriteIndex+0x32d>
   38ca4:	mov    rdi,QWORD PTR [rsp+0x38]
   38ca9:	call   3460 <free@plt>
   38cae:	mov    rdi,r13
   38cb1:	call   3460 <free@plt>
   38cb6:	mov    rdi,r12
   38cb9:	call   3460 <free@plt>
   38cbe:	mov    rdi,rbp
   38cc1:	call   3530 <fclose@plt>
   38cc6:	xor    eax,eax
   38cc8:	jmp    3871d <SSIWriteIndex+0x32d>
   38ccd:	xor    ebx,ebx
   38ccf:	jmp    38cf9 <SSIWriteIndex+0x909>
   38cd1:	mov    edx,DWORD PTR [r15+0x40]
   38cd5:	mov    rcx,rbp
   38cd8:	mov    esi,0x1
   38cdd:	mov    rdi,r12
   38ce0:	add    rbx,0x1
   38ce4:	call   37b0 <fwrite@plt>
   38ce9:	mov    r8,rax
   38cec:	mov    eax,DWORD PTR [r15+0x40]
   38cf0:	cmp    r8,rax
   38cf3:	jne    38718 <SSIWriteIndex+0x328>
   38cf9:	cmp    DWORD PTR [r15+0x64],ebx
   38cfd:	jbe    38cae <SSIWriteIndex+0x8be>
   38cff:	mov    r14,rbx
   38d02:	mov    rdi,r13
   38d05:	shl    r14,0x4
   38d09:	add    r14,QWORD PTR [r15+0x58]
   38d0d:	mov    rsi,QWORD PTR [r14]
   38d10:	call   34e0 <strcpy@plt>
   38d15:	mov    rsi,QWORD PTR [r14+0x8]
   38d19:	mov    rdi,r12
   38d1c:	call   34e0 <strcpy@plt>
   38d21:	mov    edx,DWORD PTR [r15+0x60]
   38d25:	mov    rcx,rbp
   38d28:	mov    rdi,r13
   38d2b:	mov    esi,0x1
   38d30:	call   37b0 <fwrite@plt>
   38d35:	mov    r8,rax
   38d38:	mov    eax,DWORD PTR [r15+0x60]
   38d3c:	cmp    r8,rax
   38d3f:	je     38cd1 <SSIWriteIndex+0x8e1>
   38d41:	jmp    38718 <SSIWriteIndex+0x328>
   38d46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000038d50 <SSIFreeIndex>:
   38d50:	endbr64 
   38d54:	test   rdi,rdi
   38d57:	je     38eb8 <SSIFreeIndex+0x168>
   38d5d:	push   rbp
   38d5e:	mov    rbp,rdi
   38d61:	push   rbx
   38d62:	sub    rsp,0x8
   38d66:	mov    edi,DWORD PTR [rdi+0x8]
   38d69:	test   edi,edi
   38d6b:	jne    38e80 <SSIFreeIndex+0x130>
   38d71:	mov    esi,DWORD PTR [rbp+0x44]
   38d74:	xor    ebx,ebx
   38d76:	test   esi,esi
   38d78:	je     38da4 <SSIFreeIndex+0x54>
   38d7a:	nop    WORD PTR [rax+rax*1+0x0]
   38d80:	mov    rdx,QWORD PTR [rbp+0x38]
   38d84:	lea    rax,[rbx*8+0x0]
   38d8c:	sub    rax,rbx
   38d8f:	add    rbx,0x1
   38d93:	lea    rax,[rdx+rax*8]
   38d97:	mov    rdi,QWORD PTR [rax]
   38d9a:	call   3460 <free@plt>
   38d9f:	cmp    DWORD PTR [rbp+0x44],ebx
   38da2:	ja     38d80 <SSIFreeIndex+0x30>
   38da4:	mov    ecx,DWORD PTR [rbp+0x64]
   38da7:	xor    ebx,ebx
   38da9:	test   ecx,ecx
   38dab:	je     38df5 <SSIFreeIndex+0xa5>
   38dad:	nop    DWORD PTR [rax]
   38db0:	mov    rax,rbx
   38db3:	add    rbx,0x1
   38db7:	shl    rax,0x4
   38dbb:	add    rax,QWORD PTR [rbp+0x58]
   38dbf:	mov    rdi,QWORD PTR [rax]
   38dc2:	call   3460 <free@plt>
   38dc7:	mov    eax,DWORD PTR [rbp+0x64]
   38dca:	cmp    eax,ebx
   38dcc:	ja     38db0 <SSIFreeIndex+0x60>
   38dce:	test   eax,eax
   38dd0:	je     38df5 <SSIFreeIndex+0xa5>
   38dd2:	xor    ebx,ebx
   38dd4:	nop    DWORD PTR [rax+0x0]
   38dd8:	mov    rax,rbx
   38ddb:	add    rbx,0x1
   38ddf:	shl    rax,0x4
   38de3:	add    rax,QWORD PTR [rbp+0x58]
   38de7:	mov    rdi,QWORD PTR [rax+0x8]
   38deb:	call   3460 <free@plt>
   38df0:	cmp    DWORD PTR [rbp+0x64],ebx
   38df3:	ja     38dd8 <SSIFreeIndex+0x88>
   38df5:	mov    rdi,QWORD PTR [rbp+0x38]
   38df9:	test   rdi,rdi
   38dfc:	je     38e03 <SSIFreeIndex+0xb3>
   38dfe:	call   3460 <free@plt>
   38e03:	mov    rdi,QWORD PTR [rbp+0x58]
   38e07:	test   rdi,rdi
   38e0a:	je     38e11 <SSIFreeIndex+0xc1>
   38e0c:	call   3460 <free@plt>
   38e11:	xor    ebx,ebx
   38e13:	cmp    WORD PTR [rbp+0x34],0x0
   38e18:	je     38e39 <SSIFreeIndex+0xe9>
   38e1a:	nop    WORD PTR [rax+rax*1+0x0]
   38e20:	mov    rax,QWORD PTR [rbp+0x10]
   38e24:	mov    rdi,QWORD PTR [rax+rbx*8]
   38e28:	add    rbx,0x1
   38e2c:	call   3460 <free@plt>
   38e31:	movzx  eax,WORD PTR [rbp+0x34]
   38e35:	cmp    eax,ebx
   38e37:	jg     38e20 <SSIFreeIndex+0xd0>
   38e39:	mov    rdi,QWORD PTR [rbp+0x10]
   38e3d:	test   rdi,rdi
   38e40:	je     38e47 <SSIFreeIndex+0xf7>
   38e42:	call   3460 <free@plt>
   38e47:	mov    rdi,QWORD PTR [rbp+0x18]
   38e4b:	test   rdi,rdi
   38e4e:	je     38e55 <SSIFreeIndex+0x105>
   38e50:	call   3460 <free@plt>
   38e55:	mov    rdi,QWORD PTR [rbp+0x20]
   38e59:	test   rdi,rdi
   38e5c:	je     38e63 <SSIFreeIndex+0x113>
   38e5e:	call   3460 <free@plt>
   38e63:	mov    rdi,QWORD PTR [rbp+0x28]
   38e67:	test   rdi,rdi
   38e6a:	je     38e71 <SSIFreeIndex+0x121>
   38e6c:	call   3460 <free@plt>
   38e71:	add    rsp,0x8
   38e75:	mov    rdi,rbp
   38e78:	pop    rbx
   38e79:	pop    rbp
   38e7a:	jmp    3460 <free@plt>
   38e7f:	nop
   38e80:	mov    rdi,QWORD PTR [rbp+0x50]
   38e84:	test   rdi,rdi
   38e87:	je     38e8e <SSIFreeIndex+0x13e>
   38e89:	call   3530 <fclose@plt>
   38e8e:	mov    rdi,QWORD PTR [rbp+0x70]
   38e92:	test   rdi,rdi
   38e95:	je     38e9c <SSIFreeIndex+0x14c>
   38e97:	call   3530 <fclose@plt>
   38e9c:	mov    rdi,QWORD PTR [rbp+0x48]
   38ea0:	call   34c0 <remove@plt>
   38ea5:	mov    rdi,QWORD PTR [rbp+0x68]
   38ea9:	call   34c0 <remove@plt>
   38eae:	jmp    38e11 <SSIFreeIndex+0xc1>
   38eb3:	nop    DWORD PTR [rax+rax*1+0x0]
   38eb8:	ret    
   38eb9:	nop    DWORD PTR [rax+0x0]

0000000000038ec0 <SSICreateIndex>:
   38ec0:	endbr64 
   38ec4:	push   r12
   38ec6:	push   rbx
   38ec7:	mov    ebx,edi
   38ec9:	mov    edi,0x78
   38ece:	sub    rsp,0x8
   38ed2:	call   36b0 <malloc@plt>
   38ed7:	mov    r12,rax
   38eda:	test   rax,rax
   38edd:	je     3901b <SSICreateIndex+0x15b>
   38ee3:	mov    DWORD PTR [rax],ebx
   38ee5:	mov    DWORD PTR [rax+0x4],0x0
   38eec:	movabs rax,0xc800000000
   38ef6:	mov    QWORD PTR [r12+0x8],rax
   38efb:	cmp    ebx,0x1
   38efe:	je     39008 <SSICreateIndex+0x148>
   38f04:	mov    QWORD PTR [r12+0x18],0x0
   38f0d:	xor    eax,eax
   38f0f:	mov    edi,0x50
   38f14:	mov    WORD PTR [r12+0x34],ax
   38f1a:	lea    rax,[rip+0x9a33]        # 42954 <cof.6115+0x154>
   38f21:	mov    QWORD PTR [r12+0x48],rax
   38f26:	lea    rax,[rip+0x9a31]        # 4295e <cof.6115+0x15e>
   38f2d:	mov    QWORD PTR [r12+0x20],0x0
   38f36:	mov    QWORD PTR [r12+0x28],0x0
   38f3f:	mov    DWORD PTR [r12+0x30],0x0
   38f48:	mov    QWORD PTR [r12+0x38],0x0
   38f51:	mov    QWORD PTR [r12+0x40],0x0
   38f5a:	mov    QWORD PTR [r12+0x50],0x0
   38f63:	mov    QWORD PTR [r12+0x58],0x0
   38f6c:	mov    QWORD PTR [r12+0x60],0x0
   38f75:	mov    QWORD PTR [r12+0x68],rax
   38f7a:	mov    QWORD PTR [r12+0x70],0x0
   38f83:	call   36b0 <malloc@plt>
   38f88:	mov    QWORD PTR [r12+0x10],rax
   38f8d:	test   rax,rax
   38f90:	je     3901b <SSICreateIndex+0x15b>
   38f96:	mov    edi,0x28
   38f9b:	call   36b0 <malloc@plt>
   38fa0:	mov    QWORD PTR [r12+0x18],rax
   38fa5:	test   rax,rax
   38fa8:	je     3901b <SSICreateIndex+0x15b>
   38faa:	mov    edi,0x28
   38faf:	call   36b0 <malloc@plt>
   38fb4:	mov    QWORD PTR [r12+0x20],rax
   38fb9:	test   rax,rax
   38fbc:	je     3901b <SSICreateIndex+0x15b>
   38fbe:	mov    edi,0x28
   38fc3:	call   36b0 <malloc@plt>
   38fc8:	mov    QWORD PTR [r12+0x28],rax
   38fcd:	test   rax,rax
   38fd0:	je     3901b <SSICreateIndex+0x15b>
   38fd2:	mov    edi,0x15e0
   38fd7:	call   36b0 <malloc@plt>
   38fdc:	mov    QWORD PTR [r12+0x38],rax
   38fe1:	test   rax,rax
   38fe4:	je     3901b <SSICreateIndex+0x15b>
   38fe6:	mov    edi,0x15e0
   38feb:	call   36b0 <malloc@plt>
   38ff0:	mov    QWORD PTR [r12+0x58],rax
   38ff5:	test   rax,rax
   38ff8:	je     3901b <SSICreateIndex+0x15b>
   38ffa:	add    rsp,0x8
   38ffe:	mov    rax,r12
   39001:	pop    rbx
   39002:	pop    r12
   39004:	ret    
   39005:	nop    DWORD PTR [rax]
   39008:	lea    rdi,[rip+0x9af9]        # 42b08 <cof.6115+0x308>
   3900f:	xor    eax,eax
   39011:	call   317f0 <Die>
   39016:	jmp    38f04 <SSICreateIndex+0x44>
   3901b:	mov    rdi,r12
   3901e:	xor    r12d,r12d
   39021:	call   38d50 <SSIFreeIndex>
   39026:	jmp    38ffa <SSICreateIndex+0x13a>
   39028:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000039030 <SSIErrorString>:
   39030:	endbr64 
   39034:	cmp    edi,0x10
   39037:	ja     39158 <SSIErrorString+0x128>
   3903d:	lea    rdx,[rip+0x9c58]        # 42c9c <cof.6115+0x49c>
   39044:	mov    edi,edi
   39046:	movsxd rax,DWORD PTR [rdx+rdi*4]
   3904a:	add    rax,rdx
   3904d:	notrack jmp rax
   39050:	lea    rax,[rip+0x99fd]        # 42a54 <cof.6115+0x254>
   39057:	ret    
   39058:	nop    DWORD PTR [rax+rax*1+0x0]
   39060:	lea    rax,[rip+0x9913]        # 4297a <cof.6115+0x17a>
   39067:	ret    
   39068:	nop    DWORD PTR [rax+rax*1+0x0]
   39070:	lea    rax,[rip+0x9bd9]        # 42c50 <cof.6115+0x450>
   39077:	ret    
   39078:	nop    DWORD PTR [rax+rax*1+0x0]
   39080:	lea    rax,[rip+0x999d]        # 42a24 <cof.6115+0x224>
   39087:	ret    
   39088:	nop    DWORD PTR [rax+rax*1+0x0]
   39090:	lea    rax,[rip+0x99aa]        # 42a41 <cof.6115+0x241>
   39097:	ret    
   39098:	nop    DWORD PTR [rax+rax*1+0x0]
   390a0:	lea    rax,[rip+0x9b81]        # 42c28 <cof.6115+0x428>
   390a7:	ret    
   390a8:	nop    DWORD PTR [rax+rax*1+0x0]
   390b0:	lea    rax,[rip+0x9916]        # 429cd <cof.6115+0x1cd>
   390b7:	ret    
   390b8:	nop    DWORD PTR [rax+rax*1+0x0]
   390c0:	lea    rax,[rip+0x9923]        # 429ea <cof.6115+0x1ea>
   390c7:	ret    
   390c8:	nop    DWORD PTR [rax+rax*1+0x0]
   390d0:	lea    rax,[rip+0x992f]        # 42a06 <cof.6115+0x206>
   390d7:	ret    
   390d8:	nop    DWORD PTR [rax+rax*1+0x0]
   390e0:	lea    rax,[rip+0x98a1]        # 42988 <cof.6115+0x188>
   390e7:	ret    
   390e8:	nop    DWORD PTR [rax+rax*1+0x0]
   390f0:	lea    rax,[rip+0x9a81]        # 42b78 <cof.6115+0x378>
   390f7:	ret    
   390f8:	nop    DWORD PTR [rax+rax*1+0x0]
   39100:	lea    rax,[rip+0x9a91]        # 42b98 <cof.6115+0x398>
   39107:	ret    
   39108:	nop    DWORD PTR [rax+rax*1+0x0]
   39110:	lea    rax,[rip+0x987d]        # 42994 <cof.6115+0x194>
   39117:	ret    
   39118:	nop    DWORD PTR [rax+rax*1+0x0]
   39120:	lea    rax,[rip+0x9a91]        # 42bb8 <cof.6115+0x3b8>
   39127:	ret    
   39128:	nop    DWORD PTR [rax+rax*1+0x0]
   39130:	lea    rax,[rip+0x9aa1]        # 42bd8 <cof.6115+0x3d8>
   39137:	ret    
   39138:	nop    DWORD PTR [rax+rax*1+0x0]
   39140:	lea    rax,[rip+0x9869]        # 429b0 <cof.6115+0x1b0>
   39147:	ret    
   39148:	nop    DWORD PTR [rax+rax*1+0x0]
   39150:	lea    rax,[rip+0x9aa9]        # 42c00 <cof.6115+0x400>
   39157:	ret    
   39158:	lea    rax,[rip+0x9809]        # 42968 <cof.6115+0x168>
   3915f:	ret    

0000000000039160 <SSIForceExternalSort>:
   39160:	endbr64 
   39164:	sub    rsp,0x8
   39168:	call   37060 <activate_external_sort>
   3916d:	test   eax,eax
   3916f:	jne    39180 <SSIForceExternalSort+0x20>
   39171:	add    rsp,0x8
   39175:	ret    
   39176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39180:	lea    rdi,[rip+0x9af1]        # 42c78 <cof.6115+0x478>
   39187:	xor    eax,eax
   39189:	add    rsp,0x8
   3918d:	jmp    317f0 <Die>
   39192:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3919c:	nop    DWORD PTR [rax+0x0]

00000000000391a0 <InitIntStack>:
   391a0:	endbr64 
   391a4:	push   r12
   391a6:	mov    edi,0x10
   391ab:	call   36b0 <malloc@plt>
   391b0:	mov    r12,rax
   391b3:	test   rax,rax
   391b6:	je     391c7 <InitIntStack+0x27>
   391b8:	mov    QWORD PTR [r12+0x8],0x0
   391c1:	mov    rax,r12
   391c4:	pop    r12
   391c6:	ret    
   391c7:	mov    edx,0x2a
   391cc:	lea    rsi,[rip+0x9b0d]        # 42ce0 <cof.6115+0x4e0>
   391d3:	lea    rdi,[rip+0x9b0e]        # 42ce8 <cof.6115+0x4e8>
   391da:	xor    eax,eax
   391dc:	call   317f0 <Die>
   391e1:	jmp    391b8 <InitIntStack+0x18>
   391e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   391ee:	xchg   ax,ax

00000000000391f0 <PushIntStack>:
   391f0:	endbr64 
   391f4:	push   r12
   391f6:	mov    r12d,esi
   391f9:	push   rbp
   391fa:	mov    rbp,rdi
   391fd:	mov    edi,0x10
   39202:	push   rbx
   39203:	call   36b0 <malloc@plt>
   39208:	mov    rbx,rax
   3920b:	test   rax,rax
   3920e:	je     39224 <PushIntStack+0x34>
   39210:	mov    rax,QWORD PTR [rbp+0x8]
   39214:	mov    DWORD PTR [rbx],r12d
   39217:	mov    QWORD PTR [rbp+0x8],rbx
   3921b:	mov    QWORD PTR [rbx+0x8],rax
   3921f:	pop    rbx
   39220:	pop    rbp
   39221:	pop    r12
   39223:	ret    
   39224:	mov    edx,0x34
   39229:	lea    rsi,[rip+0x9ab0]        # 42ce0 <cof.6115+0x4e0>
   39230:	lea    rdi,[rip+0x9ab1]        # 42ce8 <cof.6115+0x4e8>
   39237:	xor    eax,eax
   39239:	call   317f0 <Die>
   3923e:	jmp    39210 <PushIntStack+0x20>

0000000000039240 <PopIntStack>:
   39240:	endbr64 
   39244:	mov    r8,QWORD PTR [rdi+0x8]
   39248:	test   r8,r8
   3924b:	je     39270 <PopIntStack+0x30>
   3924d:	sub    rsp,0x8
   39251:	mov    rax,QWORD PTR [r8+0x8]
   39255:	mov    QWORD PTR [rdi+0x8],rax
   39259:	mov    eax,DWORD PTR [r8]
   3925c:	mov    rdi,r8
   3925f:	mov    DWORD PTR [rsi],eax
   39261:	call   3460 <free@plt>
   39266:	mov    eax,0x1
   3926b:	add    rsp,0x8
   3926f:	ret    
   39270:	xor    eax,eax
   39272:	ret    
   39273:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3927e:	xchg   ax,ax

0000000000039280 <ReverseIntStack>:
   39280:	endbr64 
   39284:	mov    rax,QWORD PTR [rdi+0x8]
   39288:	xor    ecx,ecx
   3928a:	mov    QWORD PTR [rdi+0x8],0x0
   39292:	test   rax,rax
   39295:	jne    392a3 <ReverseIntStack+0x23>
   39297:	jmp    392c0 <ReverseIntStack+0x40>
   39299:	nop    DWORD PTR [rax+0x0]
   392a0:	mov    rax,rdx
   392a3:	mov    rdx,QWORD PTR [rax+0x8]
   392a7:	mov    QWORD PTR [rax+0x8],rcx
   392ab:	mov    rcx,rax
   392ae:	mov    QWORD PTR [rdi+0x8],rax
   392b2:	test   rdx,rdx
   392b5:	jne    392a0 <ReverseIntStack+0x20>
   392b7:	ret    
   392b8:	nop    DWORD PTR [rax+rax*1+0x0]
   392c0:	ret    
   392c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   392cc:	nop    DWORD PTR [rax+0x0]

00000000000392d0 <FreeIntStack>:
   392d0:	endbr64 
   392d4:	push   r12
   392d6:	xor    r12d,r12d
   392d9:	push   rbp
   392da:	mov    rbp,rdi
   392dd:	sub    rsp,0x8
   392e1:	mov    rdi,QWORD PTR [rdi+0x8]
   392e5:	test   rdi,rdi
   392e8:	je     39304 <FreeIntStack+0x34>
   392ea:	mov    rax,QWORD PTR [rdi+0x8]
   392ee:	add    r12d,0x1
   392f2:	mov    QWORD PTR [rbp+0x8],rax
   392f6:	call   3460 <free@plt>
   392fb:	mov    rdi,QWORD PTR [rbp+0x8]
   392ff:	test   rdi,rdi
   39302:	jne    392ea <FreeIntStack+0x1a>
   39304:	mov    rdi,rbp
   39307:	call   3460 <free@plt>
   3930c:	add    rsp,0x8
   39310:	mov    eax,r12d
   39313:	pop    rbp
   39314:	pop    r12
   39316:	ret    
   39317:	nop    WORD PTR [rax+rax*1+0x0]

0000000000039320 <actually_write_stockholm>:
   39320:	push   r15
   39322:	push   r14
   39324:	mov    r14,rdi
   39327:	push   r13
   39329:	mov    r13,rsi
   3932c:	push   r12
   3932e:	push   rbp
   3932f:	push   rbx
   39330:	sub    rsp,0x58
   39334:	mov    DWORD PTR [rsp+0x3c],edx
   39338:	mov    edx,DWORD PTR [rsi+0x1c]
   3933b:	mov    rax,QWORD PTR fs:0x28
   39344:	mov    QWORD PTR [rsp+0x48],rax
   39349:	xor    eax,eax
   3934b:	test   edx,edx
   3934d:	jle    39e04 <actually_write_stockholm+0xae4>
   39353:	mov    rax,QWORD PTR [rsi+0x8]
   39357:	sub    edx,0x1
   3935a:	xor    ebx,ebx
   3935c:	lea    r12,[rax+0x8]
   39360:	lea    rbp,[r12+rdx*8]
   39364:	jmp    39374 <actually_write_stockholm+0x54>
   39366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39370:	add    r12,0x8
   39374:	mov    rdi,QWORD PTR [rax]
   39377:	call   3560 <strlen@plt>
   3937c:	cmp    ebx,eax
   3937e:	cmovl  ebx,eax
   39381:	mov    rax,r12
   39384:	cmp    rbp,r12
   39387:	jne    39370 <actually_write_stockholm+0x50>
   39389:	mov    eax,DWORD PTR [rsp+0x3c]
   3938d:	lea    r12d,[rax+rbx*1]
   39391:	cmp    QWORD PTR [r13+0x70],0x1
   39396:	mov    eax,0x4
   3939b:	mov    edx,DWORD PTR [r13+0x130]
   393a2:	sbb    edi,edi
   393a4:	not    edi
   393a6:	and    edi,0x4
   393a9:	cmp    QWORD PTR [r13+0x70],0x1
   393ae:	sbb    ecx,ecx
   393b0:	not    ecx
   393b2:	and    ecx,0x2
   393b5:	cmp    QWORD PTR [r13+0x78],0x0
   393ba:	cmove  eax,edi
   393bd:	mov    DWORD PTR [rsp+0x2c],eax
   393c1:	mov    eax,0x2
   393c6:	cmove  eax,ecx
   393c9:	mov    DWORD PTR [rsp+0x20],eax
   393cd:	mov    edi,eax
   393cf:	test   edx,edx
   393d1:	jle    39411 <actually_write_stockholm+0xf1>
   393d3:	mov    rax,QWORD PTR [r13+0x118]
   393da:	sub    edx,0x1
   393dd:	mov    DWORD PTR [rsp+0x8],ebx
   393e1:	mov    ebx,edi
   393e3:	lea    r15,[rax+0x8]
   393e7:	lea    rbp,[r15+rdx*8]
   393eb:	jmp    393f4 <actually_write_stockholm+0xd4>
   393ed:	nop    DWORD PTR [rax]
   393f0:	add    r15,0x8
   393f4:	mov    rdi,QWORD PTR [rax]
   393f7:	call   3560 <strlen@plt>
   393fc:	cmp    ebx,eax
   393fe:	cmovl  ebx,eax
   39401:	mov    rax,r15
   39404:	cmp    rbp,r15
   39407:	jne    393f0 <actually_write_stockholm+0xd0>
   39409:	mov    DWORD PTR [rsp+0x20],ebx
   3940d:	mov    ebx,DWORD PTR [rsp+0x8]
   39411:	cmp    QWORD PTR [r13+0x58],0x0
   39416:	je     39433 <actually_write_stockholm+0x113>
   39418:	mov    edi,DWORD PTR [rsp+0x20]
   3941c:	mov    eax,0x2
   39421:	mov    DWORD PTR [rsp+0x2c],0x4
   39429:	cmp    edi,0x2
   3942c:	cmovge eax,edi
   3942f:	mov    DWORD PTR [rsp+0x20],eax
   39433:	cmp    QWORD PTR [r13+0x48],0x0
   39438:	je     39455 <actually_write_stockholm+0x135>
   3943a:	mov    edi,DWORD PTR [rsp+0x20]
   3943e:	mov    eax,0x7
   39443:	mov    DWORD PTR [rsp+0x2c],0x4
   3944b:	cmp    edi,0x7
   3944e:	cmovge eax,edi
   39451:	mov    DWORD PTR [rsp+0x20],eax
   39455:	cmp    QWORD PTR [r13+0x50],0x0
   3945a:	je     39477 <actually_write_stockholm+0x157>
   3945c:	mov    edi,DWORD PTR [rsp+0x20]
   39460:	mov    eax,0x7
   39465:	mov    DWORD PTR [rsp+0x2c],0x4
   3946d:	cmp    edi,0x7
   39470:	cmovge eax,edi
   39473:	mov    DWORD PTR [rsp+0x20],eax
   39477:	mov    edx,DWORD PTR [r13+0x110]
   3947e:	test   edx,edx
   39480:	jle    394c1 <actually_write_stockholm+0x1a1>
   39482:	mov    rax,QWORD PTR [r13+0xf8]
   39489:	sub    edx,0x1
   3948c:	mov    DWORD PTR [rsp+0x8],ebx
   39490:	mov    ebx,DWORD PTR [rsp+0x20]
   39494:	lea    r15,[rax+0x8]
   39498:	lea    rbp,[r15+rdx*8]
   3949c:	jmp    394a4 <actually_write_stockholm+0x184>
   3949e:	xchg   ax,ax
   394a0:	add    r15,0x8
   394a4:	mov    rdi,QWORD PTR [rax]
   394a7:	call   3560 <strlen@plt>
   394ac:	cmp    ebx,eax
   394ae:	cmovl  ebx,eax
   394b1:	mov    rax,r15
   394b4:	cmp    rbp,r15
   394b7:	jne    394a0 <actually_write_stockholm+0x180>
   394b9:	mov    DWORD PTR [rsp+0x20],ebx
   394bd:	mov    ebx,DWORD PTR [rsp+0x8]
   394c1:	mov    eax,DWORD PTR [rsp+0x2c]
   394c5:	add    r12d,DWORD PTR [rsp+0x20]
   394ca:	mov    esi,0xfb
   394cf:	lea    rdi,[rip+0x983a]        # 42d10 <cof.6115+0x510>
   394d6:	lea    rbp,[rip+0x834f]        # 4182c <CSWTCH.18+0x16c>
   394dd:	lea    edx,[rax+r12*1+0x3d]
   394e2:	xor    r12d,r12d
   394e5:	movsxd rdx,edx
   394e8:	call   36810 <sre_malloc>
   394ed:	lea    rdi,[rip+0x9828]        # 42d1c <cof.6115+0x51c>
   394f4:	mov    rcx,r14
   394f7:	mov    edx,0x10
   394fc:	mov    esi,0x1
   39501:	mov    r15,rax
   39504:	call   37b0 <fwrite@plt>
   39509:	mov    edi,DWORD PTR [r13+0xb8]
   39510:	test   edi,edi
   39512:	jle    3954d <actually_write_stockholm+0x22d>
   39514:	nop    DWORD PTR [rax+0x0]
   39518:	mov    rax,QWORD PTR [r13+0xb0]
   3951f:	mov    rdx,rbp
   39522:	mov    esi,0x1
   39527:	mov    rdi,r14
   3952a:	mov    rcx,QWORD PTR [rax+r12*8]
   3952e:	xor    eax,eax
   39530:	add    r12,0x1
   39534:	call   37c0 <__fprintf_chk@plt>
   39539:	mov    eax,DWORD PTR [r13+0xb8]
   39540:	cmp    eax,r12d
   39543:	jg     39518 <actually_write_stockholm+0x1f8>
   39545:	test   eax,eax
   39547:	jg     39d71 <actually_write_stockholm+0xa51>
   3954d:	mov    rcx,QWORD PTR [r13+0x28]
   39551:	test   rcx,rcx
   39554:	je     3956c <actually_write_stockholm+0x24c>
   39556:	lea    rdx,[rip+0x97d0]        # 42d2d <cof.6115+0x52d>
   3955d:	mov    esi,0x1
   39562:	mov    rdi,r14
   39565:	xor    eax,eax
   39567:	call   37c0 <__fprintf_chk@plt>
   3956c:	mov    rcx,QWORD PTR [r13+0x38]
   39570:	test   rcx,rcx
   39573:	je     3958b <actually_write_stockholm+0x26b>
   39575:	lea    rdx,[rip+0x97c0]        # 42d3c <cof.6115+0x53c>
   3957c:	mov    esi,0x1
   39581:	mov    rdi,r14
   39584:	xor    eax,eax
   39586:	call   37c0 <__fprintf_chk@plt>
   3958b:	mov    rcx,QWORD PTR [r13+0x30]
   3958f:	test   rcx,rcx
   39592:	je     395aa <actually_write_stockholm+0x28a>
   39594:	lea    rdx,[rip+0x97b0]        # 42d4b <cof.6115+0x54b>
   3959b:	mov    esi,0x1
   395a0:	mov    rdi,r14
   395a3:	xor    eax,eax
   395a5:	call   37c0 <__fprintf_chk@plt>
   395aa:	mov    rcx,QWORD PTR [r13+0x40]
   395ae:	test   rcx,rcx
   395b1:	je     395c9 <actually_write_stockholm+0x2a9>
   395b3:	lea    rdx,[rip+0x97a0]        # 42d5a <cof.6115+0x55a>
   395ba:	mov    esi,0x1
   395bf:	mov    rdi,r14
   395c2:	xor    eax,eax
   395c4:	call   37c0 <__fprintf_chk@plt>
   395c9:	mov    esi,DWORD PTR [r13+0xa0]
   395d0:	test   esi,esi
   395d2:	je     39609 <actually_write_stockholm+0x2e9>
   395d4:	mov    ecx,DWORD PTR [r13+0xa4]
   395db:	pxor   xmm0,xmm0
   395df:	cvtss2sd xmm0,DWORD PTR [r13+0x88]
   395e8:	test   ecx,ecx
   395ea:	jne    39d83 <actually_write_stockholm+0xa63>
   395f0:	lea    rdx,[rip+0x9788]        # 42d7f <cof.6115+0x57f>
   395f7:	mov    esi,0x1
   395fc:	mov    rdi,r14
   395ff:	mov    eax,0x1
   39604:	call   37c0 <__fprintf_chk@plt>
   39609:	mov    edx,DWORD PTR [r13+0xa8]
   39610:	test   edx,edx
   39612:	je     39649 <actually_write_stockholm+0x329>
   39614:	mov    eax,DWORD PTR [r13+0xac]
   3961b:	pxor   xmm0,xmm0
   3961f:	cvtss2sd xmm0,DWORD PTR [r13+0x90]
   39628:	test   eax,eax
   3962a:	jne    39dae <actually_write_stockholm+0xa8e>
   39630:	lea    rdx,[rip+0x976f]        # 42da6 <cof.6115+0x5a6>
   39637:	mov    esi,0x1
   3963c:	mov    rdi,r14
   3963f:	mov    eax,0x1
   39644:	call   37c0 <__fprintf_chk@plt>
   39649:	mov    eax,DWORD PTR [r13+0x98]
   39650:	test   eax,eax
   39652:	je     39689 <actually_write_stockholm+0x369>
   39654:	mov    eax,DWORD PTR [r13+0x9c]
   3965b:	pxor   xmm0,xmm0
   3965f:	cvtss2sd xmm0,DWORD PTR [r13+0x80]
   39668:	test   eax,eax
   3966a:	jne    39dd9 <actually_write_stockholm+0xab9>
   39670:	lea    rdx,[rip+0x9756]        # 42dcd <cof.6115+0x5cd>
   39677:	mov    esi,0x1
   3967c:	mov    rdi,r14
   3967f:	mov    eax,0x1
   39684:	call   37c0 <__fprintf_chk@plt>
   39689:	mov    eax,DWORD PTR [r13+0xd0]
   39690:	xor    r12d,r12d
   39693:	lea    rbp,[rip+0x9744]        # 42dde <cof.6115+0x5de>
   3969a:	test   eax,eax
   3969c:	jle    396d5 <actually_write_stockholm+0x3b5>
   3969e:	xchg   ax,ax
   396a0:	mov    rax,QWORD PTR [r13+0xc8]
   396a7:	mov    rdx,QWORD PTR [r13+0xc0]
   396ae:	mov    esi,0x1
   396b3:	mov    rdi,r14
   396b6:	mov    rcx,QWORD PTR [rdx+r12*8]
   396ba:	mov    r8,QWORD PTR [rax+r12*8]
   396be:	mov    rdx,rbp
   396c1:	xor    eax,eax
   396c3:	add    r12,0x1
   396c7:	call   37c0 <__fprintf_chk@plt>
   396cc:	cmp    DWORD PTR [r13+0xd0],r12d
   396d3:	jg     396a0 <actually_write_stockholm+0x380>
   396d5:	mov    rsi,r14
   396d8:	mov    edi,0xa
   396dd:	call   3600 <fputc@plt>
   396e2:	test   BYTE PTR [r13+0x20],0x1
   396e7:	je     39742 <actually_write_stockholm+0x422>
   396e9:	mov    eax,DWORD PTR [r13+0x1c]
   396ed:	xor    r12d,r12d
   396f0:	lea    rbp,[rip+0x96f5]        # 42dec <cof.6115+0x5ec>
   396f7:	test   eax,eax
   396f9:	jle    39735 <actually_write_stockholm+0x415>
   396fb:	mov    rax,QWORD PTR [r13+0x10]
   396ff:	pxor   xmm0,xmm0
   39703:	mov    r8d,ebx
   39706:	mov    ecx,ebx
   39708:	mov    rdx,rbp
   3970b:	mov    esi,0x1
   39710:	mov    rdi,r14
   39713:	cvtss2sd xmm0,DWORD PTR [rax+r12*4]
   39719:	mov    rax,QWORD PTR [r13+0x8]
   3971d:	mov    r9,QWORD PTR [rax+r12*8]
   39721:	mov    eax,0x1
   39726:	add    r12,0x1
   3972a:	call   37c0 <__fprintf_chk@plt>
   3972f:	cmp    DWORD PTR [r13+0x1c],r12d
   39733:	jg     396fb <actually_write_stockholm+0x3db>
   39735:	mov    rsi,r14
   39738:	mov    edi,0xa
   3973d:	call   3600 <fputc@plt>
   39742:	mov    rax,QWORD PTR [r13+0x60]
   39746:	test   rax,rax
   39749:	je     397ac <actually_write_stockholm+0x48c>
   3974b:	mov    r11d,DWORD PTR [r13+0x1c]
   3974f:	test   r11d,r11d
   39752:	jle    3979f <actually_write_stockholm+0x47f>
   39754:	xor    r12d,r12d
   39757:	lea    rbp,[rip+0x96a6]        # 42e04 <cof.6115+0x604>
   3975e:	jmp    39764 <actually_write_stockholm+0x444>
   39760:	mov    rax,QWORD PTR [r13+0x60]
   39764:	mov    rax,QWORD PTR [rax+r12*8]
   39768:	test   rax,rax
   3976b:	je     39795 <actually_write_stockholm+0x475>
   3976d:	mov    rdx,QWORD PTR [r13+0x8]
   39771:	sub    rsp,0x8
   39775:	mov    r8d,ebx
   39778:	mov    ecx,ebx
   3977a:	mov    esi,0x1
   3977f:	mov    rdi,r14
   39782:	mov    r9,QWORD PTR [rdx+r12*8]
   39786:	push   rax
   39787:	mov    rdx,rbp
   3978a:	xor    eax,eax
   3978c:	call   37c0 <__fprintf_chk@plt>
   39791:	pop    r9
   39793:	pop    r10
   39795:	add    r12,0x1
   39799:	cmp    DWORD PTR [r13+0x1c],r12d
   3979d:	jg     39760 <actually_write_stockholm+0x440>
   3979f:	mov    rsi,r14
   397a2:	mov    edi,0xa
   397a7:	call   3600 <fputc@plt>
   397ac:	mov    rax,QWORD PTR [r13+0x68]
   397b0:	test   rax,rax
   397b3:	je     39814 <actually_write_stockholm+0x4f4>
   397b5:	mov    r8d,DWORD PTR [r13+0x1c]
   397b9:	test   r8d,r8d
   397bc:	jle    39807 <actually_write_stockholm+0x4e7>
   397be:	xor    r12d,r12d
   397c1:	lea    rbp,[rip+0x9652]        # 42e1a <cof.6115+0x61a>
   397c8:	jmp    397ce <actually_write_stockholm+0x4ae>
   397ca:	mov    rax,QWORD PTR [r13+0x68]
   397ce:	mov    rax,QWORD PTR [rax+r12*8]
   397d2:	test   rax,rax
   397d5:	je     397fd <actually_write_stockholm+0x4dd>
   397d7:	mov    rdx,QWORD PTR [r13+0x8]
   397db:	sub    rsp,0x8
   397df:	mov    esi,0x1
   397e4:	mov    rdi,r14
   397e7:	mov    r8d,ebx
   397ea:	mov    ecx,ebx
   397ec:	mov    r9,QWORD PTR [rdx+r12*8]
   397f0:	push   rax
   397f1:	mov    rdx,rbp
   397f4:	xor    eax,eax
   397f6:	call   37c0 <__fprintf_chk@plt>
   397fb:	pop    rsi
   397fc:	pop    rdi
   397fd:	add    r12,0x1
   39801:	cmp    DWORD PTR [r13+0x1c],r12d
   39805:	jg     397ca <actually_write_stockholm+0x4aa>
   39807:	mov    rsi,r14
   3980a:	mov    edi,0xa
   3980f:	call   3600 <fputc@plt>
   39814:	mov    ecx,DWORD PTR [r13+0xf0]
   3981b:	lea    rbp,[rip+0x84ac]        # 41cce <CSWTCH.18+0x60e>
   39822:	mov    QWORD PTR [rsp+0x18],0x0
   3982b:	test   ecx,ecx
   3982d:	jle    39943 <actually_write_stockholm+0x623>
   39833:	mov    QWORD PTR [rsp+0x30],r15
   39838:	mov    r15,r13
   3983b:	nop    DWORD PTR [rax+rax*1+0x0]
   39840:	mov    QWORD PTR [rsp+0x10],0x0
   39849:	mov    rax,QWORD PTR [rsp+0x18]
   3984e:	lea    r12,[rax*8+0x0]
   39856:	mov    eax,DWORD PTR [r15+0x1c]
   3985a:	test   eax,eax
   3985c:	jle    39916 <actually_write_stockholm+0x5f6>
   39862:	mov    r13,r15
   39865:	mov    r15,r14
   39868:	jmp    39885 <actually_write_stockholm+0x565>
   3986a:	nop    WORD PTR [rax+rax*1+0x0]
   39870:	add    QWORD PTR [rsp+0x10],0x1
   39876:	mov    rax,QWORD PTR [rsp+0x10]
   3987b:	cmp    DWORD PTR [r13+0x1c],eax
   3987f:	jle    39910 <actually_write_stockholm+0x5f0>
   39885:	mov    rcx,QWORD PTR [rsp+0x10]
   3988a:	lea    rax,[rcx*8+0x0]
   39892:	mov    QWORD PTR [rsp+0x8],rax
   39897:	mov    rax,QWORD PTR [r13+0xe0]
   3989e:	mov    rax,QWORD PTR [rax+r12*1]
   398a2:	mov    rax,QWORD PTR [rax+rcx*8]
   398a6:	test   rax,rax
   398a9:	je     39870 <actually_write_stockholm+0x550>
   398ab:	mov    QWORD PTR [rsp+0x40],rax
   398b0:	lea    r14,[rsp+0x40]
   398b5:	jmp    398f6 <actually_write_stockholm+0x5d6>
   398b7:	nop    WORD PTR [rax+rax*1+0x0]
   398c0:	mov    rcx,QWORD PTR [rsp+0x8]
   398c5:	mov    rdx,QWORD PTR [r13+0x8]
   398c9:	mov    r8d,ebx
   398cc:	mov    rdi,r15
   398cf:	mov    esi,0x1
   398d4:	mov    r9,QWORD PTR [rdx+rcx*1]
   398d8:	push   rax
   398d9:	lea    rdx,[rip+0x954f]        # 42e2f <cof.6115+0x62f>
   398e0:	mov    ecx,ebx
   398e2:	mov    rax,QWORD PTR [r13+0xd8]
   398e9:	push   QWORD PTR [rax+r12*1]
   398ed:	xor    eax,eax
   398ef:	call   37c0 <__fprintf_chk@plt>
   398f4:	pop    rax
   398f5:	pop    rdx
   398f6:	xor    edx,edx
   398f8:	mov    rsi,rbp
   398fb:	mov    rdi,r14
   398fe:	call   36c50 <sre_strtok>
   39903:	test   rax,rax
   39906:	jne    398c0 <actually_write_stockholm+0x5a0>
   39908:	jmp    39870 <actually_write_stockholm+0x550>
   3990d:	nop    DWORD PTR [rax]
   39910:	mov    r14,r15
   39913:	mov    r15,r13
   39916:	mov    rsi,r14
   39919:	mov    edi,0xa
   3991e:	call   3600 <fputc@plt>
   39923:	add    QWORD PTR [rsp+0x18],0x1
   39929:	mov    rax,QWORD PTR [rsp+0x18]
   3992e:	cmp    DWORD PTR [r15+0xf0],eax
   39935:	jg     39840 <actually_write_stockholm+0x520>
   3993b:	mov    r13,r15
   3993e:	mov    r15,QWORD PTR [rsp+0x30]
   39943:	mov    eax,DWORD PTR [r13+0x18]
   39947:	test   eax,eax
   39949:	jle    39d2d <actually_write_stockholm+0xa0d>
   3994f:	movsxd r12,DWORD PTR [rsp+0x3c]
   39954:	mov    edi,DWORD PTR [rsp+0x2c]
   39958:	mov    QWORD PTR [rsp+0x8],0x0
   39961:	mov    DWORD PTR [rsp+0x30],0x0
   39969:	lea    rax,[r15+r12*1]
   3996d:	mov    QWORD PTR [rsp+0x10],r14
   39972:	mov    QWORD PTR [rsp+0x18],rax
   39977:	mov    eax,DWORD PTR [rsp+0x20]
   3997b:	add    eax,ebx
   3997d:	add    edi,eax
   3997f:	mov    DWORD PTR [rsp+0x38],eax
   39983:	mov    DWORD PTR [rsp+0x2c],edi
   39987:	nop    WORD PTR [rax+rax*1+0x0]
   39990:	mov    QWORD PTR [rsp+0x20],0x0
   39999:	mov    ebp,DWORD PTR [r13+0x1c]
   3999d:	mov    r14,r13
   399a0:	test   ebp,ebp
   399a2:	jle    39b72 <actually_write_stockholm+0x852>
   399a8:	nop    DWORD PTR [rax+rax*1+0x0]
   399b0:	mov    r13,QWORD PTR [rsp+0x20]
   399b5:	mov    rax,QWORD PTR [r14]
   399b8:	mov    rdx,r12
   399bb:	mov    rdi,r15
   399be:	mov    rsi,QWORD PTR [rsp+0x8]
   399c3:	add    rsi,QWORD PTR [rax+r13*8]
   399c7:	lea    rbp,[r13*8+0x0]
   399cf:	call   34b0 <strncpy@plt>
   399d4:	mov    rdi,QWORD PTR [rsp+0x18]
   399d9:	sub    rsp,0x8
   399dd:	lea    rdx,[rip+0x945e]        # 42e42 <cof.6115+0x642>
   399e4:	mov    esi,0x1
   399e9:	mov    BYTE PTR [rdi],0x0
   399ec:	mov    rax,QWORD PTR [r14+0x8]
   399f0:	mov    r9,QWORD PTR [rax+r13*8]
   399f4:	push   r15
   399f6:	xor    eax,eax
   399f8:	mov    ecx,DWORD PTR [rsp+0x3c]
   399fc:	mov    rdi,QWORD PTR [rsp+0x20]
   39a01:	mov    r8d,ecx
   39a04:	call   37c0 <__fprintf_chk@plt>
   39a09:	mov    rax,QWORD PTR [r14+0x70]
   39a0d:	pop    r10
   39a0f:	pop    r11
   39a11:	test   rax,rax
   39a14:	je     39a66 <actually_write_stockholm+0x746>
   39a16:	mov    rsi,QWORD PTR [rax+r13*8]
   39a1a:	test   rsi,rsi
   39a1d:	je     39a66 <actually_write_stockholm+0x746>
   39a1f:	add    rsi,QWORD PTR [rsp+0x8]
   39a24:	mov    rdx,r12
   39a27:	mov    rdi,r15
   39a2a:	call   34b0 <strncpy@plt>
   39a2f:	mov    rax,QWORD PTR [rsp+0x18]
   39a34:	sub    rsp,0x8
   39a38:	mov    ecx,ebx
   39a3a:	mov    r8d,ebx
   39a3d:	lea    rdx,[rip+0x940a]        # 42e4e <cof.6115+0x64e>
   39a44:	mov    esi,0x1
   39a49:	mov    BYTE PTR [rax],0x0
   39a4c:	mov    rax,QWORD PTR [r14+0x8]
   39a50:	mov    r9,QWORD PTR [rax+rbp*1]
   39a54:	push   r15
   39a56:	xor    eax,eax
   39a58:	mov    rdi,QWORD PTR [rsp+0x20]
   39a5d:	call   37c0 <__fprintf_chk@plt>
   39a62:	pop    r8
   39a64:	pop    r9
   39a66:	mov    rax,QWORD PTR [r14+0x78]
   39a6a:	test   rax,rax
   39a6d:	je     39abd <actually_write_stockholm+0x79d>
   39a6f:	mov    rsi,QWORD PTR [rax+rbp*1]
   39a73:	test   rsi,rsi
   39a76:	je     39abd <actually_write_stockholm+0x79d>
   39a78:	add    rsi,QWORD PTR [rsp+0x8]
   39a7d:	mov    rdx,r12
   39a80:	mov    rdi,r15
   39a83:	call   34b0 <strncpy@plt>
   39a88:	mov    rax,QWORD PTR [rsp+0x18]
   39a8d:	sub    rsp,0x8
   39a91:	mov    ecx,ebx
   39a93:	mov    esi,0x1
   39a98:	mov    r8d,ebx
   39a9b:	lea    rdx,[rip+0x93c3]        # 42e65 <cof.6115+0x665>
   39aa2:	mov    BYTE PTR [rax],0x0
   39aa5:	mov    rax,QWORD PTR [r14+0x8]
   39aa9:	mov    r9,QWORD PTR [rax+rbp*1]
   39aad:	push   r15
   39aaf:	xor    eax,eax
   39ab1:	mov    rdi,QWORD PTR [rsp+0x20]
   39ab6:	call   37c0 <__fprintf_chk@plt>
   39abb:	pop    rsi
   39abc:	pop    rdi
   39abd:	mov    ecx,DWORD PTR [r14+0x130]
   39ac4:	xor    r13d,r13d
   39ac7:	test   ecx,ecx
   39ac9:	jle    39b5a <actually_write_stockholm+0x83a>
   39acf:	mov    rax,r14
   39ad2:	mov    r14,r12
   39ad5:	mov    r12,rax
   39ad8:	nop    DWORD PTR [rax+rax*1+0x0]
   39ae0:	mov    rax,QWORD PTR [r12+0x120]
   39ae8:	mov    rax,QWORD PTR [rax+r13*8]
   39aec:	mov    rsi,QWORD PTR [rax+rbp*1]
   39af0:	test   rsi,rsi
   39af3:	je     39b43 <actually_write_stockholm+0x823>
   39af5:	add    rsi,QWORD PTR [rsp+0x8]
   39afa:	mov    rdx,r14
   39afd:	mov    rdi,r15
   39b00:	call   34b0 <strncpy@plt>
   39b05:	mov    rax,QWORD PTR [rsp+0x18]
   39b0a:	mov    r8d,ebx
   39b0d:	mov    ecx,ebx
   39b0f:	lea    rdx,[rip+0x9366]        # 42e7c <cof.6115+0x67c>
   39b16:	mov    esi,0x1
   39b1b:	mov    BYTE PTR [rax],0x0
   39b1e:	mov    rax,QWORD PTR [r12+0x8]
   39b23:	mov    r9,QWORD PTR [rax+rbp*1]
   39b27:	mov    rax,QWORD PTR [r12+0x118]
   39b2f:	push   r15
   39b31:	push   QWORD PTR [rax+r13*8]
   39b35:	mov    rdi,QWORD PTR [rsp+0x20]
   39b3a:	xor    eax,eax
   39b3c:	call   37c0 <__fprintf_chk@plt>
   39b41:	pop    rax
   39b42:	pop    rdx
   39b43:	add    r13,0x1
   39b47:	cmp    DWORD PTR [r12+0x130],r13d
   39b4f:	jg     39ae0 <actually_write_stockholm+0x7c0>
   39b51:	mov    rax,r12
   39b54:	mov    r12,r14
   39b57:	mov    r14,rax
   39b5a:	add    QWORD PTR [rsp+0x20],0x1
   39b60:	mov    rax,QWORD PTR [rsp+0x20]
   39b65:	cmp    DWORD PTR [r14+0x1c],eax
   39b69:	jg     399b0 <actually_write_stockholm+0x690>
   39b6f:	mov    r13,r14
   39b72:	mov    rax,QWORD PTR [r13+0x48]
   39b76:	test   rax,rax
   39b79:	je     39bc4 <actually_write_stockholm+0x8a4>
   39b7b:	mov    rdi,QWORD PTR [rsp+0x8]
   39b80:	mov    rdx,r12
   39b83:	lea    rsi,[rax+rdi*1]
   39b87:	mov    rdi,r15
   39b8a:	call   34b0 <strncpy@plt>
   39b8f:	sub    rsp,0x8
   39b93:	mov    BYTE PTR [r15+r12*1],0x0
   39b98:	xor    eax,eax
   39b9a:	push   r15
   39b9c:	mov    ecx,DWORD PTR [rsp+0x48]
   39ba0:	lea    r9,[rip+0x92ea]        # 42e91 <cof.6115+0x691>
   39ba7:	lea    rdx,[rip+0x92eb]        # 42e99 <cof.6115+0x699>
   39bae:	mov    rdi,QWORD PTR [rsp+0x20]
   39bb3:	mov    esi,0x1
   39bb8:	mov    r8d,ecx
   39bbb:	call   37c0 <__fprintf_chk@plt>
   39bc0:	pop    r10
   39bc2:	pop    r11
   39bc4:	mov    rax,QWORD PTR [r13+0x50]
   39bc8:	test   rax,rax
   39bcb:	je     39c16 <actually_write_stockholm+0x8f6>
   39bcd:	mov    rdi,QWORD PTR [rsp+0x8]
   39bd2:	mov    rdx,r12
   39bd5:	lea    rsi,[rax+rdi*1]
   39bd9:	mov    rdi,r15
   39bdc:	call   34b0 <strncpy@plt>
   39be1:	sub    rsp,0x8
   39be5:	mov    BYTE PTR [r15+r12*1],0x0
   39bea:	xor    eax,eax
   39bec:	push   r15
   39bee:	mov    ecx,DWORD PTR [rsp+0x48]
   39bf2:	lea    r9,[rip+0x92b0]        # 42ea9 <cof.6115+0x6a9>
   39bf9:	lea    rdx,[rip+0x9299]        # 42e99 <cof.6115+0x699>
   39c00:	mov    rdi,QWORD PTR [rsp+0x20]
   39c05:	mov    esi,0x1
   39c0a:	mov    r8d,ecx
   39c0d:	call   37c0 <__fprintf_chk@plt>
   39c12:	pop    r8
   39c14:	pop    r9
   39c16:	mov    rax,QWORD PTR [r13+0x58]
   39c1a:	test   rax,rax
   39c1d:	je     39c66 <actually_write_stockholm+0x946>
   39c1f:	mov    rdi,QWORD PTR [rsp+0x8]
   39c24:	mov    rdx,r12
   39c27:	lea    rsi,[rax+rdi*1]
   39c2b:	mov    rdi,r15
   39c2e:	call   34b0 <strncpy@plt>
   39c33:	sub    rsp,0x8
   39c37:	mov    BYTE PTR [r15+r12*1],0x0
   39c3c:	xor    eax,eax
   39c3e:	push   r15
   39c40:	mov    ecx,DWORD PTR [rsp+0x48]
   39c44:	mov    esi,0x1
   39c49:	lea    r9,[rip+0x7c5e]        # 418ae <CSWTCH.18+0x1ee>
   39c50:	mov    rdi,QWORD PTR [rsp+0x20]
   39c55:	lea    rdx,[rip+0x923d]        # 42e99 <cof.6115+0x699>
   39c5c:	mov    r8d,ecx
   39c5f:	call   37c0 <__fprintf_chk@plt>
   39c64:	pop    rsi
   39c65:	pop    rdi
   39c66:	mov    ecx,DWORD PTR [r13+0x110]
   39c6d:	xor    ebp,ebp
   39c6f:	lea    r14,[rip+0x9223]        # 42e99 <cof.6115+0x699>
   39c76:	test   ecx,ecx
   39c78:	jle    39cf3 <actually_write_stockholm+0x9d3>
   39c7a:	mov    rax,r13
   39c7d:	mov    DWORD PTR [rsp+0x20],ebx
   39c81:	mov    ebx,DWORD PTR [rsp+0x38]
   39c85:	mov    r13,rbp
   39c88:	mov    rbp,rax
   39c8b:	nop    DWORD PTR [rax+rax*1+0x0]
   39c90:	mov    rax,QWORD PTR [rbp+0x100]
   39c97:	mov    rsi,QWORD PTR [rsp+0x8]
   39c9c:	mov    rdx,r12
   39c9f:	mov    rdi,r15
   39ca2:	add    rsi,QWORD PTR [rax+r13*8]
   39ca6:	call   34b0 <strncpy@plt>
   39cab:	mov    rax,QWORD PTR [rsp+0x18]
   39cb0:	sub    rsp,0x8
   39cb4:	mov    ecx,ebx
   39cb6:	mov    rdx,r14
   39cb9:	mov    r8d,ebx
   39cbc:	mov    esi,0x1
   39cc1:	mov    BYTE PTR [rax],0x0
   39cc4:	mov    rax,QWORD PTR [rbp+0xf8]
   39ccb:	mov    r9,QWORD PTR [rax+r13*8]
   39ccf:	push   r15
   39cd1:	xor    eax,eax
   39cd3:	add    r13,0x1
   39cd7:	mov    rdi,QWORD PTR [rsp+0x20]
   39cdc:	call   37c0 <__fprintf_chk@plt>
   39ce1:	pop    rax
   39ce2:	pop    rdx
   39ce3:	cmp    DWORD PTR [rbp+0x110],r13d
   39cea:	jg     39c90 <actually_write_stockholm+0x970>
   39cec:	mov    ebx,DWORD PTR [rsp+0x20]
   39cf0:	mov    r13,rbp
   39cf3:	mov    edi,DWORD PTR [rsp+0x3c]
   39cf7:	add    DWORD PTR [rsp+0x30],edi
   39cfb:	mov    eax,DWORD PTR [rsp+0x30]
   39cff:	cmp    DWORD PTR [r13+0x18],eax
   39d03:	jle    39d28 <actually_write_stockholm+0xa08>
   39d05:	mov    r14d,DWORD PTR [rsp+0x30]
   39d0a:	test   r14d,r14d
   39d0d:	jle    39d1e <actually_write_stockholm+0x9fe>
   39d0f:	mov    rsi,QWORD PTR [rsp+0x10]
   39d14:	mov    edi,0xa
   39d19:	call   3600 <fputc@plt>
   39d1e:	add    QWORD PTR [rsp+0x8],r12
   39d23:	jmp    39990 <actually_write_stockholm+0x670>
   39d28:	mov    r14,QWORD PTR [rsp+0x10]
   39d2d:	mov    rcx,r14
   39d30:	mov    edx,0x3
   39d35:	mov    esi,0x1
   39d3a:	lea    rdi,[rip+0x436c]        # 3e0ad <_IO_stdin_used+0x10ad>
   39d41:	call   37b0 <fwrite@plt>
   39d46:	mov    rdi,r15
   39d49:	call   3460 <free@plt>
   39d4e:	mov    rax,QWORD PTR [rsp+0x48]
   39d53:	xor    rax,QWORD PTR fs:0x28
   39d5c:	jne    39e10 <actually_write_stockholm+0xaf0>
   39d62:	add    rsp,0x58
   39d66:	pop    rbx
   39d67:	pop    rbp
   39d68:	pop    r12
   39d6a:	pop    r13
   39d6c:	pop    r14
   39d6e:	pop    r15
   39d70:	ret    
   39d71:	mov    rsi,r14
   39d74:	mov    edi,0xa
   39d79:	call   3600 <fputc@plt>
   39d7e:	jmp    3954d <actually_write_stockholm+0x22d>
   39d83:	pxor   xmm1,xmm1
   39d87:	mov    esi,0x1
   39d8c:	mov    rdi,r14
   39d8f:	mov    eax,0x2
   39d94:	cvtss2sd xmm1,DWORD PTR [r13+0x8c]
   39d9d:	lea    rdx,[rip+0x8fc5]        # 42d69 <cof.6115+0x569>
   39da4:	call   37c0 <__fprintf_chk@plt>
   39da9:	jmp    39609 <actually_write_stockholm+0x2e9>
   39dae:	pxor   xmm1,xmm1
   39db2:	mov    esi,0x1
   39db7:	mov    rdi,r14
   39dba:	mov    eax,0x2
   39dbf:	cvtss2sd xmm1,DWORD PTR [r13+0x94]
   39dc8:	lea    rdx,[rip+0x8fc1]        # 42d90 <cof.6115+0x590>
   39dcf:	call   37c0 <__fprintf_chk@plt>
   39dd4:	jmp    39649 <actually_write_stockholm+0x329>
   39dd9:	pxor   xmm1,xmm1
   39ddd:	mov    esi,0x1
   39de2:	mov    rdi,r14
   39de5:	mov    eax,0x2
   39dea:	cvtss2sd xmm1,DWORD PTR [r13+0x84]
   39df3:	lea    rdx,[rip+0x8fbd]        # 42db7 <cof.6115+0x5b7>
   39dfa:	call   37c0 <__fprintf_chk@plt>
   39dff:	jmp    39689 <actually_write_stockholm+0x369>
   39e04:	mov    r12d,DWORD PTR [rsp+0x3c]
   39e09:	xor    ebx,ebx
   39e0b:	jmp    39391 <actually_write_stockholm+0x71>
   39e10:	call   3570 <__stack_chk_fail@plt>
   39e15:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000039e20 <ReadStockholm>:
   39e20:	endbr64 
   39e24:	push   r15
   39e26:	xor    r15d,r15d
   39e29:	push   r14
   39e2b:	push   r13
   39e2d:	push   r12
   39e2f:	push   rbp
   39e30:	push   rbx
   39e31:	mov    rbx,rdi
   39e34:	sub    rsp,0x38
   39e38:	mov    rdi,QWORD PTR [rdi]
   39e3b:	mov    rax,QWORD PTR fs:0x28
   39e44:	mov    QWORD PTR [rsp+0x28],rax
   39e49:	xor    eax,eax
   39e4b:	call   3660 <feof@plt>
   39e50:	test   eax,eax
   39e52:	jne    39e8c <ReadStockholm+0x6c>
   39e54:	xor    esi,esi
   39e56:	mov    edi,0xa
   39e5b:	call   2aa20 <MSAAlloc>
   39e60:	mov    rbp,rax
   39e63:	jmp    39e74 <ReadStockholm+0x54>
   39e65:	nop    DWORD PTR [rax]
   39e68:	mov    rdi,rax
   39e6b:	call   36d50 <IsBlankline>
   39e70:	test   eax,eax
   39e72:	je     39eb8 <ReadStockholm+0x98>
   39e74:	mov    rdi,rbx
   39e77:	call   2c370 <MSAFileGetLine>
   39e7c:	mov    r15,rax
   39e7f:	test   rax,rax
   39e82:	jne    39e68 <ReadStockholm+0x48>
   39e84:	mov    rdi,rbp
   39e87:	call   2b230 <MSAFree>
   39e8c:	mov    rax,QWORD PTR [rsp+0x28]
   39e91:	xor    rax,QWORD PTR fs:0x28
   39e9a:	jne    3a928 <ReadStockholm+0xb08>
   39ea0:	add    rsp,0x38
   39ea4:	mov    rax,r15
   39ea7:	pop    rbx
   39ea8:	pop    rbp
   39ea9:	pop    r12
   39eab:	pop    r13
   39ead:	pop    r14
   39eaf:	pop    r15
   39eb1:	ret    
   39eb2:	nop    WORD PTR [rax+rax*1+0x0]
   39eb8:	mov    ecx,0xe
   39ebd:	lea    rdi,[rip+0x7ea4]        # 41d68 <CSWTCH.18+0x6a8>
   39ec4:	mov    rsi,r15
   39ec7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   39ec9:	seta   al
   39ecc:	sbb    al,0x0
   39ece:	test   al,al
   39ed0:	jne    3a434 <ReadStockholm+0x614>
   39ed6:	lea    r12,[rip+0x7553]        # 41430 <gki_primes+0x9b0>
   39edd:	lea    r13,[rip+0x8fcd]        # 42eb1 <cof.6115+0x6b1>
   39ee4:	nop    DWORD PTR [rax+0x0]
   39ee8:	mov    rdi,rbx
   39eeb:	call   2c370 <MSAFileGetLine>
   39ef0:	mov    r15,rax
   39ef3:	test   rax,rax
   39ef6:	je     39fd2 <ReadStockholm+0x1b2>
   39efc:	movzx  eax,BYTE PTR [rax]
   39eff:	cmp    al,0x20
   39f01:	jne    39f15 <ReadStockholm+0xf5>
   39f03:	nop    DWORD PTR [rax+rax*1+0x0]
   39f08:	movzx  eax,BYTE PTR [r15+0x1]
   39f0d:	add    r15,0x1
   39f11:	cmp    al,0x20
   39f13:	je     39f08 <ReadStockholm+0xe8>
   39f15:	cmp    al,0x9
   39f17:	je     39f08 <ReadStockholm+0xe8>
   39f19:	cmp    al,0x23
   39f1b:	je     3a020 <ReadStockholm+0x200>
   39f21:	cmp    BYTE PTR [r15],0x2f
   39f25:	jne    39f32 <ReadStockholm+0x112>
   39f27:	cmp    BYTE PTR [r15+0x1],0x2f
   39f2c:	je     3a008 <ReadStockholm+0x1e8>
   39f32:	cmp    al,0xa
   39f34:	je     39ee8 <ReadStockholm+0xc8>
   39f36:	lea    r14,[rsp+0x20]
   39f3b:	xor    edx,edx
   39f3d:	mov    QWORD PTR [rsp+0x20],r15
   39f42:	lea    rsi,[rip+0x7d83]        # 41ccc <CSWTCH.18+0x60c>
   39f49:	mov    rdi,r14
   39f4c:	call   36c50 <sre_strtok>
   39f51:	mov    r15,rax
   39f54:	test   rax,rax
   39f57:	je     3a110 <ReadStockholm+0x2f0>
   39f5d:	mov    rdi,r14
   39f60:	lea    rdx,[rsp+0x1c]
   39f65:	lea    rsi,[rip+0x7d60]        # 41ccc <CSWTCH.18+0x60c>
   39f6c:	call   36c50 <sre_strtok>
   39f71:	mov    r14,rax
   39f74:	test   rax,rax
   39f77:	je     3a110 <ReadStockholm+0x2f0>
   39f7d:	mov    eax,DWORD PTR [rbp+0x160]
   39f83:	mov    rsi,r15
   39f86:	mov    rdi,rbp
   39f89:	lea    edx,[rax+0x1]
   39f8c:	call   2c410 <MSAGetSeqidx>
   39f91:	mov    rdx,QWORD PTR [rbp+0x148]
   39f98:	mov    DWORD PTR [rbp+0x160],eax
   39f9e:	cdqe   
   39fa0:	mov    ecx,DWORD PTR [rsp+0x1c]
   39fa4:	lea    r15,[rdx+rax*4]
   39fa8:	mov    rdx,QWORD PTR [rbp+0x0]
   39fac:	mov    esi,DWORD PTR [r15]
   39faf:	lea    rdi,[rdx+rax*8]
   39fb3:	mov    rdx,r14
   39fb6:	call   36b70 <sre_strcat>
   39fbb:	mov    rdi,rbx
   39fbe:	mov    DWORD PTR [r15],eax
   39fc1:	call   2c370 <MSAFileGetLine>
   39fc6:	mov    r15,rax
   39fc9:	test   rax,rax
   39fcc:	jne    39efc <ReadStockholm+0xdc>
   39fd2:	mov    eax,DWORD PTR [rbp+0x1c]
   39fd5:	test   eax,eax
   39fd7:	je     39e84 <ReadStockholm+0x64>
   39fdd:	mov    rsi,QWORD PTR [rbp+0x28]
   39fe1:	lea    rax,[rip+0x7448]        # 41430 <gki_primes+0x9b0>
   39fe8:	lea    rdi,[rip+0x9079]        # 43068 <cof.6115+0x868>
   39fef:	test   rsi,rsi
   39ff2:	cmove  rsi,rax
   39ff6:	xor    eax,eax
   39ff8:	call   317f0 <Die>
   39ffd:	mov    edx,DWORD PTR [rbp+0x1c]
   3a000:	test   edx,edx
   3a002:	je     39e84 <ReadStockholm+0x64>
   3a008:	mov    rdi,rbp
   3a00b:	mov    r15,rbp
   3a00e:	call   2be90 <MSAVerifyParse>
   3a013:	jmp    39e8c <ReadStockholm+0x6c>
   3a018:	nop    DWORD PTR [rax+rax*1+0x0]
   3a020:	mov    ecx,0x4
   3a025:	mov    rsi,r15
   3a028:	mov    rdi,r13
   3a02b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3a02d:	seta   al
   3a030:	sbb    al,0x0
   3a032:	test   al,al
   3a034:	je     3a138 <ReadStockholm+0x318>
   3a03a:	mov    ecx,0x4
   3a03f:	mov    rsi,r15
   3a042:	lea    rdi,[rip+0x8e6d]        # 42eb6 <cof.6115+0x6b6>
   3a049:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3a04b:	seta   al
   3a04e:	sbb    al,0x0
   3a050:	test   al,al
   3a052:	je     3a1e9 <ReadStockholm+0x3c9>
   3a058:	mov    ecx,0x4
   3a05d:	mov    rsi,r15
   3a060:	lea    rdi,[rip+0x8e54]        # 42ebb <cof.6115+0x6bb>
   3a067:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3a069:	seta   al
   3a06c:	sbb    al,0x0
   3a06e:	test   al,al
   3a070:	je     3a360 <ReadStockholm+0x540>
   3a076:	mov    ecx,0x4
   3a07b:	lea    rdi,[rip+0x8e3e]        # 42ec0 <cof.6115+0x6c0>
   3a082:	mov    rsi,r15
   3a085:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3a087:	seta   al
   3a08a:	sbb    al,0x0
   3a08c:	test   al,al
   3a08e:	jne    3a2f8 <ReadStockholm+0x4d8>
   3a094:	mov    QWORD PTR [rsp+0x20],r15
   3a099:	lea    r15,[rsp+0x20]
   3a09e:	xor    edx,edx
   3a0a0:	lea    rsi,[rip+0x7c25]        # 41ccc <CSWTCH.18+0x60c>
   3a0a7:	mov    rdi,r15
   3a0aa:	call   36c50 <sre_strtok>
   3a0af:	test   rax,rax
   3a0b2:	je     3a110 <ReadStockholm+0x2f0>
   3a0b4:	xor    edx,edx
   3a0b6:	lea    rsi,[rip+0x7c0f]        # 41ccc <CSWTCH.18+0x60c>
   3a0bd:	mov    rdi,r15
   3a0c0:	call   36c50 <sre_strtok>
   3a0c5:	test   rax,rax
   3a0c8:	mov    QWORD PTR [rsp+0x8],rax
   3a0cd:	je     3a110 <ReadStockholm+0x2f0>
   3a0cf:	xor    edx,edx
   3a0d1:	lea    rsi,[rip+0x7bf4]        # 41ccc <CSWTCH.18+0x60c>
   3a0d8:	mov    rdi,r15
   3a0db:	call   36c50 <sre_strtok>
   3a0e0:	mov    r14,rax
   3a0e3:	test   rax,rax
   3a0e6:	je     3a110 <ReadStockholm+0x2f0>
   3a0e8:	mov    rdi,r15
   3a0eb:	lea    rdx,[rsp+0x1c]
   3a0f0:	lea    rsi,[rip+0x7bd5]        # 41ccc <CSWTCH.18+0x60c>
   3a0f7:	call   36c50 <sre_strtok>
   3a0fc:	mov    r15,rax
   3a0ff:	test   rax,rax
   3a102:	jne    3a46f <ReadStockholm+0x64f>
   3a108:	nop    DWORD PTR [rax+rax*1+0x0]
   3a110:	mov    rcx,QWORD PTR [rbp+0x28]
   3a114:	mov    rdx,QWORD PTR [rbx+0x8]
   3a118:	lea    rdi,[rip+0x8ef9]        # 43018 <cof.6115+0x818>
   3a11f:	mov    esi,DWORD PTR [rbx+0x10]
   3a122:	test   rcx,rcx
   3a125:	cmove  rcx,r12
   3a129:	xor    eax,eax
   3a12b:	call   317f0 <Die>
   3a130:	jmp    39ee8 <ReadStockholm+0xc8>
   3a135:	nop    DWORD PTR [rax]
   3a138:	mov    QWORD PTR [rsp+0x20],r15
   3a13d:	lea    r15,[rsp+0x20]
   3a142:	xor    edx,edx
   3a144:	lea    rsi,[rip+0x7b81]        # 41ccc <CSWTCH.18+0x60c>
   3a14b:	mov    rdi,r15
   3a14e:	call   36c50 <sre_strtok>
   3a153:	test   rax,rax
   3a156:	je     3a110 <ReadStockholm+0x2f0>
   3a158:	xor    edx,edx
   3a15a:	lea    rsi,[rip+0x7b6b]        # 41ccc <CSWTCH.18+0x60c>
   3a161:	mov    rdi,r15
   3a164:	call   36c50 <sre_strtok>
   3a169:	mov    r14,rax
   3a16c:	test   rax,rax
   3a16f:	je     3a110 <ReadStockholm+0x2f0>
   3a171:	mov    rdi,r15
   3a174:	xor    edx,edx
   3a176:	lea    rsi,[rip+0x7b51]        # 41cce <CSWTCH.18+0x60e>
   3a17d:	call   36c50 <sre_strtok>
   3a182:	mov    rdi,rax
   3a185:	test   rax,rax
   3a188:	jne    3a19c <ReadStockholm+0x37c>
   3a18a:	jmp    3a110 <ReadStockholm+0x2f0>
   3a18c:	nop    DWORD PTR [rax+0x0]
   3a190:	cmp    al,0x20
   3a192:	je     3a198 <ReadStockholm+0x378>
   3a194:	cmp    al,0x9
   3a196:	jne    3a1a3 <ReadStockholm+0x383>
   3a198:	add    rdi,0x1
   3a19c:	movzx  eax,BYTE PTR [rdi]
   3a19f:	test   al,al
   3a1a1:	jne    3a190 <ReadStockholm+0x370>
   3a1a3:	movzx  eax,BYTE PTR [r14]
   3a1a7:	cmp    eax,0x49
   3a1aa:	jne    3a1b7 <ReadStockholm+0x397>
   3a1ac:	cmp    BYTE PTR [r14+0x1],0x44
   3a1b1:	je     3a4b1 <ReadStockholm+0x691>
   3a1b7:	cmp    eax,0x41
   3a1ba:	jne    3a31e <ReadStockholm+0x4fe>
   3a1c0:	cmp    BYTE PTR [r14+0x1],0x43
   3a1c5:	jne    3a31e <ReadStockholm+0x4fe>
   3a1cb:	cmp    BYTE PTR [r14+0x2],0x0
   3a1d0:	jne    3a31e <ReadStockholm+0x4fe>
   3a1d6:	mov    esi,0xffffffff
   3a1db:	call   36ce0 <sre_strdup>
   3a1e0:	mov    QWORD PTR [rbp+0x38],rax
   3a1e4:	jmp    39ee8 <ReadStockholm+0xc8>
   3a1e9:	mov    QWORD PTR [rsp+0x20],r15
   3a1ee:	lea    r15,[rsp+0x20]
   3a1f3:	xor    edx,edx
   3a1f5:	lea    rsi,[rip+0x7ad0]        # 41ccc <CSWTCH.18+0x60c>
   3a1fc:	mov    rdi,r15
   3a1ff:	call   36c50 <sre_strtok>
   3a204:	test   rax,rax
   3a207:	je     3a110 <ReadStockholm+0x2f0>
   3a20d:	xor    edx,edx
   3a20f:	lea    rsi,[rip+0x7ab6]        # 41ccc <CSWTCH.18+0x60c>
   3a216:	mov    rdi,r15
   3a219:	call   36c50 <sre_strtok>
   3a21e:	test   rax,rax
   3a221:	mov    QWORD PTR [rsp+0x8],rax
   3a226:	je     3a110 <ReadStockholm+0x2f0>
   3a22c:	xor    edx,edx
   3a22e:	lea    rsi,[rip+0x7a97]        # 41ccc <CSWTCH.18+0x60c>
   3a235:	mov    rdi,r15
   3a238:	call   36c50 <sre_strtok>
   3a23d:	mov    r14,rax
   3a240:	test   rax,rax
   3a243:	je     3a110 <ReadStockholm+0x2f0>
   3a249:	xor    edx,edx
   3a24b:	lea    rsi,[rip+0x7a7c]        # 41cce <CSWTCH.18+0x60e>
   3a252:	mov    rdi,r15
   3a255:	call   36c50 <sre_strtok>
   3a25a:	mov    r8,rax
   3a25d:	test   rax,rax
   3a260:	je     3a110 <ReadStockholm+0x2f0>
   3a266:	movzx  eax,BYTE PTR [rax]
   3a269:	mov    r9,QWORD PTR [rsp+0x8]
   3a26e:	test   al,al
   3a270:	jne    3a285 <ReadStockholm+0x465>
   3a272:	jmp    3a28d <ReadStockholm+0x46d>
   3a274:	nop    DWORD PTR [rax+0x0]
   3a278:	movzx  eax,BYTE PTR [r8+0x1]
   3a27d:	add    r8,0x1
   3a281:	test   al,al
   3a283:	je     3a28d <ReadStockholm+0x46d>
   3a285:	cmp    al,0x20
   3a287:	je     3a278 <ReadStockholm+0x458>
   3a289:	cmp    al,0x9
   3a28b:	je     3a278 <ReadStockholm+0x458>
   3a28d:	mov    eax,DWORD PTR [rbp+0x160]
   3a293:	mov    rsi,r9
   3a296:	mov    rdi,rbp
   3a299:	mov    QWORD PTR [rsp+0x8],r8
   3a29e:	lea    edx,[rax+0x1]
   3a2a1:	call   2c410 <MSAGetSeqidx>
   3a2a6:	mov    r8,QWORD PTR [rsp+0x8]
   3a2ab:	mov    DWORD PTR [rbp+0x160],eax
   3a2b1:	mov    r15d,eax
   3a2b4:	movzx  eax,BYTE PTR [r14]
   3a2b8:	cmp    eax,0x57
   3a2bb:	je     3a4cf <ReadStockholm+0x6af>
   3a2c1:	cmp    eax,0x41
   3a2c4:	jne    3a5e6 <ReadStockholm+0x7c6>
   3a2ca:	cmp    BYTE PTR [r14+0x1],0x43
   3a2cf:	jne    3a5e6 <ReadStockholm+0x7c6>
   3a2d5:	cmp    BYTE PTR [r14+0x2],0x0
   3a2da:	jne    3a5e6 <ReadStockholm+0x7c6>
   3a2e0:	mov    rdx,r8
   3a2e3:	mov    esi,r15d
   3a2e6:	mov    rdi,rbp
   3a2e9:	call   2b410 <MSASetSeqAccession>
   3a2ee:	jmp    39ee8 <ReadStockholm+0xc8>
   3a2f3:	nop    DWORD PTR [rax+rax*1+0x0]
   3a2f8:	lea    rsi,[r15+0x1]
   3a2fc:	mov    QWORD PTR [rsp+0x20],rsi
   3a301:	cmp    BYTE PTR [r15+0x1],0xa
   3a306:	jne    3a44b <ReadStockholm+0x62b>
   3a30c:	mov    BYTE PTR [r15+0x1],0x0
   3a311:	mov    rdi,rbp
   3a314:	call   2b530 <MSAAddComment>
   3a319:	jmp    39ee8 <ReadStockholm+0xc8>
   3a31e:	cmp    eax,0x44
   3a321:	je     3a509 <ReadStockholm+0x6e9>
   3a327:	cmp    eax,0x41
   3a32a:	jne    3a549 <ReadStockholm+0x729>
   3a330:	cmp    BYTE PTR [r14+0x1],0x55
   3a335:	jne    3a549 <ReadStockholm+0x729>
   3a33b:	cmp    BYTE PTR [r14+0x2],0x0
   3a340:	jne    3a549 <ReadStockholm+0x729>
   3a346:	mov    esi,0xffffffff
   3a34b:	call   36ce0 <sre_strdup>
   3a350:	mov    QWORD PTR [rbp+0x40],rax
   3a354:	jmp    39ee8 <ReadStockholm+0xc8>
   3a359:	nop    DWORD PTR [rax+0x0]
   3a360:	mov    QWORD PTR [rsp+0x20],r15
   3a365:	lea    r15,[rsp+0x20]
   3a36a:	xor    edx,edx
   3a36c:	lea    rsi,[rip+0x7959]        # 41ccc <CSWTCH.18+0x60c>
   3a373:	mov    rdi,r15
   3a376:	call   36c50 <sre_strtok>
   3a37b:	test   rax,rax
   3a37e:	je     3a110 <ReadStockholm+0x2f0>
   3a384:	xor    edx,edx
   3a386:	lea    rsi,[rip+0x793f]        # 41ccc <CSWTCH.18+0x60c>
   3a38d:	mov    rdi,r15
   3a390:	call   36c50 <sre_strtok>
   3a395:	mov    r14,rax
   3a398:	test   rax,rax
   3a39b:	je     3a110 <ReadStockholm+0x2f0>
   3a3a1:	lea    rdx,[rsp+0x1c]
   3a3a6:	lea    rsi,[rip+0x791f]        # 41ccc <CSWTCH.18+0x60c>
   3a3ad:	mov    rdi,r15
   3a3b0:	call   36c50 <sre_strtok>
   3a3b5:	mov    rdx,rax
   3a3b8:	test   rax,rax
   3a3bb:	je     3a110 <ReadStockholm+0x2f0>
   3a3c1:	mov    ecx,0x8
   3a3c6:	lea    rdi,[rip+0x8ac4]        # 42e91 <cof.6115+0x691>
   3a3cd:	mov    rsi,r14
   3a3d0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3a3d2:	seta   al
   3a3d5:	sbb    al,0x0
   3a3d7:	test   al,al
   3a3d9:	je     3a532 <ReadStockholm+0x712>
   3a3df:	mov    ecx,0x8
   3a3e4:	lea    rdi,[rip+0x8abe]        # 42ea9 <cof.6115+0x6a9>
   3a3eb:	mov    rsi,r14
   3a3ee:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3a3f0:	seta   al
   3a3f3:	sbb    al,0x0
   3a3f5:	test   al,al
   3a3f7:	je     3a73b <ReadStockholm+0x91b>
   3a3fd:	cmp    BYTE PTR [r14],0x52
   3a401:	jne    3a72b <ReadStockholm+0x90b>
   3a407:	cmp    BYTE PTR [r14+0x1],0x46
   3a40c:	jne    3a72b <ReadStockholm+0x90b>
   3a412:	cmp    BYTE PTR [r14+0x2],0x0
   3a417:	jne    3a72b <ReadStockholm+0x90b>
   3a41d:	mov    ecx,DWORD PTR [rsp+0x1c]
   3a421:	lea    rdi,[rbp+0x58]
   3a425:	mov    esi,0xffffffff
   3a42a:	call   36b70 <sre_strcat>
   3a42f:	jmp    39ee8 <ReadStockholm+0xc8>
   3a434:	mov    rsi,QWORD PTR [rbx+0x8]
   3a438:	lea    rdi,[rip+0x8a89]        # 42ec8 <cof.6115+0x6c8>
   3a43f:	xor    eax,eax
   3a441:	call   317f0 <Die>
   3a446:	jmp    39ed6 <ReadStockholm+0xb6>
   3a44b:	lea    rsi,[rip+0x787c]        # 41cce <CSWTCH.18+0x60e>
   3a452:	lea    rdi,[rsp+0x20]
   3a457:	xor    edx,edx
   3a459:	call   36c50 <sre_strtok>
   3a45e:	mov    rsi,rax
   3a461:	test   rax,rax
   3a464:	jne    3a311 <ReadStockholm+0x4f1>
   3a46a:	jmp    3a110 <ReadStockholm+0x2f0>
   3a46f:	mov    r9,QWORD PTR [rsp+0x8]
   3a474:	mov    edx,DWORD PTR [rbp+0x160]
   3a47a:	mov    rdi,rbp
   3a47d:	mov    rsi,r9
   3a480:	call   2c410 <MSAGetSeqidx>
   3a485:	mov    DWORD PTR [rbp+0x160],eax
   3a48b:	mov    r8d,eax
   3a48e:	movzx  eax,BYTE PTR [r14]
   3a492:	cmp    eax,0x53
   3a495:	je     3a6b5 <ReadStockholm+0x895>
   3a49b:	mov    rcx,r15
   3a49e:	mov    edx,r8d
   3a4a1:	mov    rsi,r14
   3a4a4:	mov    rdi,rbp
   3a4a7:	call   2bc30 <MSAAppendGR>
   3a4ac:	jmp    39ee8 <ReadStockholm+0xc8>
   3a4b1:	cmp    BYTE PTR [r14+0x2],0x0
   3a4b6:	jne    3a1b7 <ReadStockholm+0x397>
   3a4bc:	mov    esi,0xffffffff
   3a4c1:	call   36ce0 <sre_strdup>
   3a4c6:	mov    QWORD PTR [rbp+0x28],rax
   3a4ca:	jmp    39ee8 <ReadStockholm+0xc8>
   3a4cf:	cmp    BYTE PTR [r14+0x1],0x54
   3a4d4:	jne    3a2c1 <ReadStockholm+0x4a1>
   3a4da:	cmp    BYTE PTR [r14+0x2],0x0
   3a4df:	jne    3a2c1 <ReadStockholm+0x4a1>
   3a4e5:	xor    esi,esi
   3a4e7:	mov    rdi,r8
   3a4ea:	call   3510 <strtod@plt>
   3a4ef:	mov    rax,QWORD PTR [rbp+0x10]
   3a4f3:	movsxd r10,r15d
   3a4f6:	cvtsd2ss xmm0,xmm0
   3a4fa:	movss  DWORD PTR [rax+r10*4],xmm0
   3a500:	or     DWORD PTR [rbp+0x20],0x1
   3a504:	jmp    39ee8 <ReadStockholm+0xc8>
   3a509:	cmp    BYTE PTR [r14+0x1],0x45
   3a50e:	jne    3a327 <ReadStockholm+0x507>
   3a514:	cmp    BYTE PTR [r14+0x2],0x0
   3a519:	jne    3a327 <ReadStockholm+0x507>
   3a51f:	mov    esi,0xffffffff
   3a524:	call   36ce0 <sre_strdup>
   3a529:	mov    QWORD PTR [rbp+0x30],rax
   3a52d:	jmp    39ee8 <ReadStockholm+0xc8>
   3a532:	mov    ecx,DWORD PTR [rsp+0x1c]
   3a536:	lea    rdi,[rbp+0x48]
   3a53a:	mov    esi,0xffffffff
   3a53f:	call   36b70 <sre_strcat>
   3a544:	jmp    39ee8 <ReadStockholm+0xc8>
   3a549:	cmp    eax,0x47
   3a54c:	jne    3a618 <ReadStockholm+0x7f8>
   3a552:	cmp    BYTE PTR [r14+0x1],0x41
   3a557:	jne    3a618 <ReadStockholm+0x7f8>
   3a55d:	cmp    BYTE PTR [r14+0x2],0x0
   3a562:	jne    3a618 <ReadStockholm+0x7f8>
   3a568:	mov    QWORD PTR [rsp+0x20],rdi
   3a56d:	xor    edx,edx
   3a56f:	mov    rdi,r15
   3a572:	lea    rsi,[rip+0x7753]        # 41ccc <CSWTCH.18+0x60c>
   3a579:	call   36c50 <sre_strtok>
   3a57e:	mov    rdi,rax
   3a581:	test   rax,rax
   3a584:	je     3a110 <ReadStockholm+0x2f0>
   3a58a:	xor    esi,esi
   3a58c:	call   3510 <strtod@plt>
   3a591:	mov    rdi,r15
   3a594:	xor    edx,edx
   3a596:	mov    DWORD PTR [rbp+0xa0],0x1
   3a5a0:	cvtsd2ss xmm0,xmm0
   3a5a4:	lea    rsi,[rip+0x7721]        # 41ccc <CSWTCH.18+0x60c>
   3a5ab:	movss  DWORD PTR [rbp+0x88],xmm0
   3a5b3:	call   36c50 <sre_strtok>
   3a5b8:	mov    rdi,rax
   3a5bb:	test   rax,rax
   3a5be:	je     39ee8 <ReadStockholm+0xc8>
   3a5c4:	xor    esi,esi
   3a5c6:	call   3510 <strtod@plt>
   3a5cb:	mov    DWORD PTR [rbp+0xa4],0x1
   3a5d5:	cvtsd2ss xmm0,xmm0
   3a5d9:	movss  DWORD PTR [rbp+0x8c],xmm0
   3a5e1:	jmp    39ee8 <ReadStockholm+0xc8>
   3a5e6:	cmp    eax,0x44
   3a5e9:	jne    3a715 <ReadStockholm+0x8f5>
   3a5ef:	cmp    BYTE PTR [r14+0x1],0x45
   3a5f4:	jne    3a715 <ReadStockholm+0x8f5>
   3a5fa:	cmp    BYTE PTR [r14+0x2],0x0
   3a5ff:	jne    3a715 <ReadStockholm+0x8f5>
   3a605:	mov    rdx,r8
   3a608:	mov    esi,r15d
   3a60b:	mov    rdi,rbp
   3a60e:	call   2b4a0 <MSASetSeqDescription>
   3a613:	jmp    39ee8 <ReadStockholm+0xc8>
   3a618:	cmp    eax,0x4e
   3a61b:	jne    3a752 <ReadStockholm+0x932>
   3a621:	cmp    BYTE PTR [r14+0x1],0x43
   3a626:	jne    3a752 <ReadStockholm+0x932>
   3a62c:	cmp    BYTE PTR [r14+0x2],0x0
   3a631:	jne    3a752 <ReadStockholm+0x932>
   3a637:	mov    QWORD PTR [rsp+0x20],rdi
   3a63c:	xor    edx,edx
   3a63e:	mov    rdi,r15
   3a641:	lea    rsi,[rip+0x7684]        # 41ccc <CSWTCH.18+0x60c>
   3a648:	call   36c50 <sre_strtok>
   3a64d:	mov    rdi,rax
   3a650:	test   rax,rax
   3a653:	je     3a110 <ReadStockholm+0x2f0>
   3a659:	xor    esi,esi
   3a65b:	call   3510 <strtod@plt>
   3a660:	mov    rdi,r15
   3a663:	xor    edx,edx
   3a665:	mov    DWORD PTR [rbp+0xa8],0x1
   3a66f:	cvtsd2ss xmm0,xmm0
   3a673:	lea    rsi,[rip+0x7652]        # 41ccc <CSWTCH.18+0x60c>
   3a67a:	movss  DWORD PTR [rbp+0x90],xmm0
   3a682:	call   36c50 <sre_strtok>
   3a687:	mov    rdi,rax
   3a68a:	test   rax,rax
   3a68d:	je     39ee8 <ReadStockholm+0xc8>
   3a693:	xor    esi,esi
   3a695:	call   3510 <strtod@plt>
   3a69a:	mov    DWORD PTR [rbp+0xac],0x1
   3a6a4:	cvtsd2ss xmm0,xmm0
   3a6a8:	movss  DWORD PTR [rbp+0x94],xmm0
   3a6b0:	jmp    39ee8 <ReadStockholm+0xc8>
   3a6b5:	cmp    BYTE PTR [r14+0x1],0x53
   3a6ba:	je     3a7ef <ReadStockholm+0x9cf>
   3a6c0:	cmp    eax,0x53
   3a6c3:	jne    3a49b <ReadStockholm+0x67b>
   3a6c9:	cmp    BYTE PTR [r14+0x1],0x41
   3a6ce:	jne    3a49b <ReadStockholm+0x67b>
   3a6d4:	cmp    BYTE PTR [r14+0x2],0x0
   3a6d9:	jne    3a49b <ReadStockholm+0x67b>
   3a6df:	mov    rdx,QWORD PTR [rbp+0x78]
   3a6e3:	test   rdx,rdx
   3a6e6:	je     3a826 <ReadStockholm+0xa06>
   3a6ec:	mov    rax,QWORD PTR [rbp+0x158]
   3a6f3:	movsxd r9,r8d
   3a6f6:	mov    ecx,DWORD PTR [rsp+0x1c]
   3a6fa:	lea    r14,[rax+r9*4]
   3a6fe:	lea    rdi,[rdx+r9*8]
   3a702:	mov    rdx,r15
   3a705:	mov    esi,DWORD PTR [r14]
   3a708:	call   36b70 <sre_strcat>
   3a70d:	mov    DWORD PTR [r14],eax
   3a710:	jmp    39ee8 <ReadStockholm+0xc8>
   3a715:	mov    rcx,r8
   3a718:	mov    edx,r15d
   3a71b:	mov    rsi,r14
   3a71e:	mov    rdi,rbp
   3a721:	call   2b750 <MSAAddGS>
   3a726:	jmp    39ee8 <ReadStockholm+0xc8>
   3a72b:	mov    rsi,r14
   3a72e:	mov    rdi,rbp
   3a731:	call   2ba50 <MSAAppendGC>
   3a736:	jmp    39ee8 <ReadStockholm+0xc8>
   3a73b:	mov    ecx,DWORD PTR [rsp+0x1c]
   3a73f:	lea    rdi,[rbp+0x50]
   3a743:	mov    esi,0xffffffff
   3a748:	call   36b70 <sre_strcat>
   3a74d:	jmp    39ee8 <ReadStockholm+0xc8>
   3a752:	cmp    eax,0x54
   3a755:	jne    3a813 <ReadStockholm+0x9f3>
   3a75b:	cmp    BYTE PTR [r14+0x1],0x43
   3a760:	jne    3a813 <ReadStockholm+0x9f3>
   3a766:	cmp    BYTE PTR [r14+0x2],0x0
   3a76b:	jne    3a813 <ReadStockholm+0x9f3>
   3a771:	mov    QWORD PTR [rsp+0x20],rdi
   3a776:	xor    edx,edx
   3a778:	mov    rdi,r15
   3a77b:	lea    rsi,[rip+0x754a]        # 41ccc <CSWTCH.18+0x60c>
   3a782:	call   36c50 <sre_strtok>
   3a787:	mov    rdi,rax
   3a78a:	test   rax,rax
   3a78d:	je     3a110 <ReadStockholm+0x2f0>
   3a793:	xor    esi,esi
   3a795:	call   3510 <strtod@plt>
   3a79a:	mov    rdi,r15
   3a79d:	xor    edx,edx
   3a79f:	mov    DWORD PTR [rbp+0x98],0x1
   3a7a9:	cvtsd2ss xmm0,xmm0
   3a7ad:	lea    rsi,[rip+0x7518]        # 41ccc <CSWTCH.18+0x60c>
   3a7b4:	movss  DWORD PTR [rbp+0x80],xmm0
   3a7bc:	call   36c50 <sre_strtok>
   3a7c1:	mov    rdi,rax
   3a7c4:	test   rax,rax
   3a7c7:	je     39ee8 <ReadStockholm+0xc8>
   3a7cd:	xor    esi,esi
   3a7cf:	call   3510 <strtod@plt>
   3a7d4:	mov    DWORD PTR [rbp+0x9c],0x1
   3a7de:	cvtsd2ss xmm0,xmm0
   3a7e2:	movss  DWORD PTR [rbp+0x84],xmm0
   3a7ea:	jmp    39ee8 <ReadStockholm+0xc8>
   3a7ef:	cmp    BYTE PTR [r14+0x2],0x0
   3a7f4:	jne    3a6c0 <ReadStockholm+0x8a0>
   3a7fa:	mov    rdx,QWORD PTR [rbp+0x70]
   3a7fe:	test   rdx,rdx
   3a801:	je     3a8a7 <ReadStockholm+0xa87>
   3a807:	mov    rax,QWORD PTR [rbp+0x150]
   3a80e:	jmp    3a6f3 <ReadStockholm+0x8d3>
   3a813:	mov    rdx,rdi
   3a816:	mov    rsi,r14
   3a819:	mov    rdi,rbp
   3a81c:	call   2b600 <MSAAddGF>
   3a821:	jmp    39ee8 <ReadStockholm+0xc8>
   3a826:	movsxd rdx,DWORD PTR [rbp+0x140]
   3a82d:	mov    esi,0x23f
   3a832:	mov    DWORD PTR [rsp+0x8],r8d
   3a837:	lea    rdi,[rip+0x84d2]        # 42d10 <cof.6115+0x510>
   3a83e:	shl    rdx,0x3
   3a842:	call   36810 <sre_malloc>
   3a847:	movsxd rdx,DWORD PTR [rbp+0x140]
   3a84e:	mov    esi,0x240
   3a853:	lea    rdi,[rip+0x84b6]        # 42d10 <cof.6115+0x510>
   3a85a:	mov    QWORD PTR [rbp+0x78],rax
   3a85e:	shl    rdx,0x2
   3a862:	call   36810 <sre_malloc>
   3a867:	mov    ecx,DWORD PTR [rbp+0x140]
   3a86d:	mov    r8d,DWORD PTR [rsp+0x8]
   3a872:	mov    QWORD PTR [rbp+0x158],rax
   3a879:	mov    rdx,QWORD PTR [rbp+0x78]
   3a87d:	test   ecx,ecx
   3a87f:	jle    3a6f3 <ReadStockholm+0x8d3>
   3a885:	xor    ecx,ecx
   3a887:	mov    QWORD PTR [rdx+rcx*8],0x0
   3a88f:	mov    DWORD PTR [rax+rcx*4],0x0
   3a896:	add    rcx,0x1
   3a89a:	cmp    DWORD PTR [rbp+0x140],ecx
   3a8a0:	jg     3a887 <ReadStockholm+0xa67>
   3a8a2:	jmp    3a6f3 <ReadStockholm+0x8d3>
   3a8a7:	movsxd rdx,DWORD PTR [rbp+0x140]
   3a8ae:	mov    esi,0x231
   3a8b3:	mov    DWORD PTR [rsp+0x8],r8d
   3a8b8:	lea    rdi,[rip+0x8451]        # 42d10 <cof.6115+0x510>
   3a8bf:	shl    rdx,0x3
   3a8c3:	call   36810 <sre_malloc>
   3a8c8:	movsxd rdx,DWORD PTR [rbp+0x140]
   3a8cf:	mov    esi,0x232
   3a8d4:	lea    rdi,[rip+0x8435]        # 42d10 <cof.6115+0x510>
   3a8db:	mov    QWORD PTR [rbp+0x70],rax
   3a8df:	shl    rdx,0x2
   3a8e3:	call   36810 <sre_malloc>
   3a8e8:	xor    ecx,ecx
   3a8ea:	mov    r8d,DWORD PTR [rsp+0x8]
   3a8ef:	mov    rdx,QWORD PTR [rbp+0x70]
   3a8f3:	mov    esi,DWORD PTR [rbp+0x140]
   3a8f9:	mov    QWORD PTR [rbp+0x150],rax
   3a900:	test   esi,esi
   3a902:	jle    3a6f3 <ReadStockholm+0x8d3>
   3a908:	mov    QWORD PTR [rdx+rcx*8],0x0
   3a910:	mov    DWORD PTR [rax+rcx*4],0x0
   3a917:	add    rcx,0x1
   3a91b:	cmp    DWORD PTR [rbp+0x140],ecx
   3a921:	jg     3a908 <ReadStockholm+0xae8>
   3a923:	jmp    3a6f3 <ReadStockholm+0x8d3>
   3a928:	call   3570 <__stack_chk_fail@plt>
   3a92d:	nop    DWORD PTR [rax]

000000000003a930 <WriteStockholm>:
   3a930:	endbr64 
   3a934:	mov    edx,0x32
   3a939:	jmp    39320 <actually_write_stockholm>
   3a93e:	xchg   ax,ax

000000000003a940 <WriteStockholmOneBlock>:
   3a940:	endbr64 
   3a944:	mov    edx,DWORD PTR [rsi+0x18]
   3a947:	jmp    39320 <actually_write_stockholm>
   3a94c:	nop    DWORD PTR [rax+0x0]

000000000003a950 <Translate>:
   3a950:	endbr64 
   3a954:	push   r15
   3a956:	push   r14
   3a958:	push   r13
   3a95a:	push   r12
   3a95c:	push   rbp
   3a95d:	push   rbx
   3a95e:	sub    rsp,0x8
   3a962:	test   rdi,rdi
   3a965:	je     3aa3d <Translate+0xed>
   3a96b:	mov    rbp,rdi
   3a96e:	mov    rbx,rsi
   3a971:	call   3560 <strlen@plt>
   3a976:	mov    esi,0x1
   3a97b:	lea    rdi,[rax+0x1]
   3a97f:	call   3630 <calloc@plt>
   3a984:	mov    r12,rax
   3a987:	test   rax,rax
   3a98a:	je     3aa4c <Translate+0xfc>
   3a990:	cmp    BYTE PTR [rbp+0x0],0x0
   3a994:	mov    r13,r12
   3a997:	lea    r14,[rip+0x86f2]        # 43090 <cof.6115+0x890>
   3a99e:	je     3a9f5 <Translate+0xa5>
   3a9a0:	cmp    BYTE PTR [rbp+0x1],0x0
   3a9a4:	je     3a9f5 <Translate+0xa5>
   3a9a6:	cmp    BYTE PTR [rbp+0x2],0x0
   3a9aa:	je     3a9f5 <Translate+0xa5>
   3a9ac:	mov    rdi,rbp
   3a9af:	xor    eax,eax
   3a9b1:	lea    rbp,[rbp+0x3]
   3a9b5:	movzx  ecx,BYTE PTR [rdi]
   3a9b8:	shl    eax,0x2
   3a9bb:	lea    edx,[rcx-0x41]
   3a9be:	cmp    dl,0x34
   3a9c1:	ja     3a9d0 <Translate+0x80>
   3a9c3:	movzx  edx,dl
   3a9c6:	movsxd rdx,DWORD PTR [r14+rdx*4]
   3a9ca:	add    rdx,r14
   3a9cd:	notrack jmp rdx
   3a9d0:	mov    eax,0x200
   3a9d5:	mov    r15,QWORD PTR [rbx+rax*1]
   3a9d9:	mov    rdi,r13
   3a9dc:	mov    rsi,r15
   3a9df:	call   34e0 <strcpy@plt>
   3a9e4:	mov    rdi,r15
   3a9e7:	call   3560 <strlen@plt>
   3a9ec:	add    r13,rax
   3a9ef:	cmp    BYTE PTR [rbp+0x0],0x0
   3a9f3:	jne    3a9a0 <Translate+0x50>
   3a9f5:	add    rsp,0x8
   3a9f9:	mov    rax,r12
   3a9fc:	pop    rbx
   3a9fd:	pop    rbp
   3a9fe:	pop    r12
   3aa00:	pop    r13
   3aa02:	pop    r14
   3aa04:	pop    r15
   3aa06:	ret    
   3aa07:	nop    WORD PTR [rax+rax*1+0x0]
   3aa10:	add    eax,0x3
   3aa13:	cmp    eax,0x40
   3aa16:	je     3a9d0 <Translate+0x80>
   3aa18:	add    rdi,0x1
   3aa1c:	cmp    rdi,rbp
   3aa1f:	jne    3a9b5 <Translate+0x65>
   3aa21:	cdqe   
   3aa23:	shl    rax,0x3
   3aa27:	jmp    3a9d5 <Translate+0x85>
   3aa29:	nop    DWORD PTR [rax+0x0]
   3aa30:	add    eax,0x1
   3aa33:	jmp    3aa13 <Translate+0xc3>
   3aa35:	nop    DWORD PTR [rax]
   3aa38:	add    eax,0x2
   3aa3b:	jmp    3aa13 <Translate+0xc3>
   3aa3d:	mov    DWORD PTR [rip+0x27929],0x2        # 62370 <squid_errno>
   3aa47:	xor    r12d,r12d
   3aa4a:	jmp    3a9f5 <Translate+0xa5>
   3aa4c:	lea    rdi,[rip+0x5ce2]        # 40735 <defmq.7318+0x575>
   3aa53:	xor    eax,eax
   3aa55:	call   317f0 <Die>
   3aa5a:	jmp    3a990 <Translate+0x40>
   3aa5f:	nop

000000000003aa60 <IsInt>:
   3aa60:	endbr64 
   3aa64:	test   rdi,rdi
   3aa67:	je     3ab40 <IsInt+0xe0>
   3aa6d:	push   r12
   3aa6f:	push   rbp
   3aa70:	push   rbx
   3aa71:	mov    rbx,rdi
   3aa74:	call   3820 <__ctype_b_loc@plt>
   3aa79:	mov    r12,QWORD PTR [rax]
   3aa7c:	jmp    3aa84 <IsInt+0x24>
   3aa7e:	xchg   ax,ax
   3aa80:	add    rbx,0x1
   3aa84:	movsx  rdx,BYTE PTR [rbx]
   3aa88:	mov    rax,rdx
   3aa8b:	test   BYTE PTR [r12+rdx*2+0x1],0x20
   3aa91:	jne    3aa80 <IsInt+0x20>
   3aa93:	sub    eax,0x2b
   3aa96:	and    eax,0xfffffffd
   3aa99:	cmp    al,0x1
   3aa9b:	adc    rbx,0x0
   3aa9f:	movzx  eax,BYTE PTR [rbx]
   3aaa2:	cmp    eax,0x30
   3aaa5:	jne    3ab00 <IsInt+0xa0>
   3aaa7:	cmp    BYTE PTR [rbx+0x1],0x78
   3aaab:	jne    3aaec <IsInt+0x8c>
   3aaad:	mov    rdi,rbx
   3aab0:	call   3560 <strlen@plt>
   3aab5:	cmp    eax,0x2
   3aab8:	jle    3ab00 <IsInt+0xa0>
   3aaba:	movsx  rax,BYTE PTR [rbx+0x2]
   3aabf:	lea    rdx,[rbx+0x2]
   3aac3:	test   al,al
   3aac5:	jne    3aadd <IsInt+0x7d>
   3aac7:	jmp    3ab30 <IsInt+0xd0>
   3aac9:	nop    DWORD PTR [rax+0x0]
   3aad0:	movsx  rax,BYTE PTR [rdx+0x1]
   3aad5:	add    rdx,0x1
   3aad9:	test   al,al
   3aadb:	je     3ab30 <IsInt+0xd0>
   3aadd:	test   BYTE PTR [r12+rax*2+0x1],0x10
   3aae3:	jne    3aad0 <IsInt+0x70>
   3aae5:	pop    rbx
   3aae6:	xor    eax,eax
   3aae8:	pop    rbp
   3aae9:	pop    r12
   3aaeb:	ret    
   3aaec:	cmp    eax,0x30
   3aaef:	jne    3ab00 <IsInt+0xa0>
   3aaf1:	cmp    BYTE PTR [rbx+0x1],0x58
   3aaf5:	je     3aaad <IsInt+0x4d>
   3aaf7:	nop    WORD PTR [rax+rax*1+0x0]
   3ab00:	movsx  rbp,BYTE PTR [rbx]
   3ab04:	cmp    bpl,0x30
   3ab08:	je     3ab50 <IsInt+0xf0>
   3ab0a:	test   bpl,bpl
   3ab0d:	jne    3ab26 <IsInt+0xc6>
   3ab0f:	jmp    3ab30 <IsInt+0xd0>
   3ab11:	nop    DWORD PTR [rax+0x0]
   3ab18:	movsx  rbp,BYTE PTR [rbx+0x1]
   3ab1d:	add    rbx,0x1
   3ab21:	test   bpl,bpl
   3ab24:	je     3ab30 <IsInt+0xd0>
   3ab26:	test   BYTE PTR [r12+rbp*2+0x1],0x8
   3ab2c:	jne    3ab18 <IsInt+0xb8>
   3ab2e:	jmp    3aae5 <IsInt+0x85>
   3ab30:	pop    rbx
   3ab31:	mov    eax,0x1
   3ab36:	pop    rbp
   3ab37:	pop    r12
   3ab39:	ret    
   3ab3a:	nop    WORD PTR [rax+rax*1+0x0]
   3ab40:	mov    DWORD PTR [rip+0x27826],0x6        # 62370 <squid_errno>
   3ab4a:	xor    eax,eax
   3ab4c:	ret    
   3ab4d:	nop    DWORD PTR [rax]
   3ab50:	mov    rdi,rbx
   3ab53:	call   3560 <strlen@plt>
   3ab58:	cmp    eax,0x1
   3ab5b:	jle    3ab26 <IsInt+0xc6>
   3ab5d:	movsx  rbp,BYTE PTR [rbx+0x1]
   3ab62:	add    rbx,0x1
   3ab66:	jmp    3ab0a <IsInt+0xaa>
   3ab68:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003ab70 <IsReal>:
   3ab70:	endbr64 
   3ab74:	test   rdi,rdi
   3ab77:	je     3ac94 <IsReal+0x124>
   3ab7d:	push   rbx
   3ab7e:	mov    rbx,rdi
   3ab81:	call   3820 <__ctype_b_loc@plt>
   3ab86:	mov    r8,QWORD PTR [rax]
   3ab89:	jmp    3ab94 <IsReal+0x24>
   3ab8b:	nop    DWORD PTR [rax+rax*1+0x0]
   3ab90:	add    rbx,0x1
   3ab94:	movsx  rax,BYTE PTR [rbx]
   3ab98:	movzx  esi,WORD PTR [r8+rax*2]
   3ab9d:	mov    rdx,rax
   3aba0:	test   si,0x2000
   3aba5:	jne    3ab90 <IsReal+0x20>
   3aba7:	lea    eax,[rax-0x2b]
   3abaa:	test   al,0xfd
   3abac:	je     3ac08 <IsReal+0x98>
   3abae:	mov    rcx,rbx
   3abb1:	xor    edi,edi
   3abb3:	test   dl,dl
   3abb5:	je     3ac7c <IsReal+0x10c>
   3abbb:	xor    edi,edi
   3abbd:	xor    r9d,r9d
   3abc0:	xor    r10d,r10d
   3abc3:	jmp    3abe0 <IsReal+0x70>
   3abc5:	nop    DWORD PTR [rax]
   3abc8:	add    edi,0x1
   3abcb:	movsx  rax,BYTE PTR [rcx+0x1]
   3abd0:	add    rcx,0x1
   3abd4:	movzx  esi,WORD PTR [r8+rax*2]
   3abd9:	mov    rdx,rax
   3abdc:	test   al,al
   3abde:	je     3ac58 <IsReal+0xe8>
   3abe0:	test   si,0x800
   3abe5:	jne    3abc8 <IsReal+0x58>
   3abe7:	cmp    dl,0x2e
   3abea:	je     3ac28 <IsReal+0xb8>
   3abec:	and    edx,0xffffffdf
   3abef:	cmp    dl,0x45
   3abf2:	jne    3ac38 <IsReal+0xc8>
   3abf4:	test   r9d,r9d
   3abf7:	jne    3ac90 <IsReal+0x120>
   3abfd:	mov    r9d,0x1
   3ac03:	jmp    3abcb <IsReal+0x5b>
   3ac05:	nop    DWORD PTR [rax]
   3ac08:	movsx  rax,BYTE PTR [rbx+0x1]
   3ac0d:	lea    rcx,[rbx+0x1]
   3ac11:	movzx  esi,WORD PTR [r8+rax*2]
   3ac16:	mov    rdx,rax
   3ac19:	test   al,al
   3ac1b:	jne    3abbb <IsReal+0x4b>
   3ac1d:	xor    edi,edi
   3ac1f:	jmp    3ac5e <IsReal+0xee>
   3ac21:	nop    DWORD PTR [rax+0x0]
   3ac28:	or     r9d,r10d
   3ac2b:	jne    3ac90 <IsReal+0x120>
   3ac2d:	mov    r10d,0x1
   3ac33:	jmp    3abcb <IsReal+0x5b>
   3ac35:	nop    DWORD PTR [rax]
   3ac38:	test   si,0x2000
   3ac3d:	je     3abcb <IsReal+0x5b>
   3ac3f:	movsx  rax,BYTE PTR [rcx]
   3ac43:	test   edi,edi
   3ac45:	setne  dil
   3ac49:	movzx  esi,WORD PTR [r8+rax*2]
   3ac4e:	mov    rdx,rax
   3ac51:	jmp    3ac5e <IsReal+0xee>
   3ac53:	nop    DWORD PTR [rax+rax*1+0x0]
   3ac58:	test   edi,edi
   3ac5a:	setne  dil
   3ac5e:	test   si,0x2000
   3ac63:	je     3ac7c <IsReal+0x10c>
   3ac65:	nop    DWORD PTR [rax]
   3ac68:	movsx  rsi,BYTE PTR [rcx+0x1]
   3ac6d:	add    rcx,0x1
   3ac71:	mov    rdx,rsi
   3ac74:	test   BYTE PTR [r8+rsi*2+0x1],0x20
   3ac7a:	jne    3ac68 <IsReal+0xf8>
   3ac7c:	xor    eax,eax
   3ac7e:	test   dl,dl
   3ac80:	pop    rbx
   3ac81:	sete   al
   3ac84:	and    eax,edi
   3ac86:	ret    
   3ac87:	nop    WORD PTR [rax+rax*1+0x0]
   3ac90:	xor    eax,eax
   3ac92:	pop    rbx
   3ac93:	ret    
   3ac94:	xor    eax,eax
   3ac96:	ret    
   3ac97:	nop    WORD PTR [rax+rax*1+0x0]

000000000003aca0 <Byteswap>:
   3aca0:	endbr64 
   3aca4:	mov    r8d,esi
   3aca7:	shr    r8d,0x1f
   3acab:	add    r8d,esi
   3acae:	sar    r8d,1
   3acb1:	cmp    esi,0x1
   3acb4:	jle    3acdb <Byteswap+0x3b>
   3acb6:	movsxd rsi,esi
   3acb9:	xor    eax,eax
   3acbb:	lea    rdx,[rdi+rsi*1-0x1]
   3acc0:	movzx  ecx,BYTE PTR [rdx]
   3acc3:	movzx  esi,BYTE PTR [rdi+rax*1]
   3acc7:	sub    rdx,0x1
   3accb:	mov    BYTE PTR [rdx+0x1],sil
   3accf:	mov    BYTE PTR [rdi+rax*1],cl
   3acd2:	add    rax,0x1
   3acd6:	cmp    r8d,eax
   3acd9:	jg     3acc0 <Byteswap+0x20>
   3acdb:	ret    
   3acdc:	nop    DWORD PTR [rax+0x0]

000000000003ace0 <sre_ntoh16>:
   3ace0:	endbr64 
   3ace4:	mov    eax,edi
   3ace6:	ret    
   3ace7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003acf0 <sre_ntoh32>:
   3acf0:	endbr64 
   3acf4:	mov    eax,edi
   3acf6:	ret    
   3acf7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003ad00 <sre_hton16>:
   3ad00:	endbr64 
   3ad04:	mov    eax,edi
   3ad06:	ret    
   3ad07:	nop    WORD PTR [rax+rax*1+0x0]

000000000003ad10 <sre_hton32>:
   3ad10:	endbr64 
   3ad14:	mov    eax,edi
   3ad16:	ret    
   3ad17:	nop    WORD PTR [rax+rax*1+0x0]

000000000003ad20 <sre_ntoh64>:
   3ad20:	endbr64 
   3ad24:	mov    rax,rdi
   3ad27:	ret    
   3ad28:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003ad30 <sre_hton64>:
   3ad30:	endbr64 
   3ad34:	mov    rax,rdi
   3ad37:	ret    
   3ad38:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003ad40 <DSet>:
   3ad40:	endbr64 
   3ad44:	test   esi,esi
   3ad46:	jle    3ad5d <DSet+0x1d>
   3ad48:	lea    eax,[rsi-0x1]
   3ad4b:	lea    rax,[rdi+rax*8+0x8]
   3ad50:	movsd  QWORD PTR [rdi],xmm0
   3ad54:	add    rdi,0x8
   3ad58:	cmp    rdi,rax
   3ad5b:	jne    3ad50 <DSet+0x10>
   3ad5d:	ret    
   3ad5e:	xchg   ax,ax

000000000003ad60 <FSet>:
   3ad60:	endbr64 
   3ad64:	test   esi,esi
   3ad66:	jle    3ad7d <FSet+0x1d>
   3ad68:	lea    eax,[rsi-0x1]
   3ad6b:	lea    rax,[rdi+rax*4+0x4]
   3ad70:	movss  DWORD PTR [rdi],xmm0
   3ad74:	add    rdi,0x4
   3ad78:	cmp    rdi,rax
   3ad7b:	jne    3ad70 <FSet+0x10>
   3ad7d:	ret    
   3ad7e:	xchg   ax,ax

000000000003ad80 <DScale>:
   3ad80:	endbr64 
   3ad84:	test   esi,esi
   3ad86:	jle    3ada6 <DScale+0x26>
   3ad88:	lea    eax,[rsi-0x1]
   3ad8b:	lea    rax,[rdi+rax*8+0x8]
   3ad90:	movsd  xmm1,QWORD PTR [rdi]
   3ad94:	add    rdi,0x8
   3ad98:	mulsd  xmm1,xmm0
   3ad9c:	movsd  QWORD PTR [rdi-0x8],xmm1
   3ada1:	cmp    rdi,rax
   3ada4:	jne    3ad90 <DScale+0x10>
   3ada6:	ret    
   3ada7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003adb0 <FScale>:
   3adb0:	endbr64 
   3adb4:	test   esi,esi
   3adb6:	jle    3add6 <FScale+0x26>
   3adb8:	lea    eax,[rsi-0x1]
   3adbb:	lea    rax,[rdi+rax*4+0x4]
   3adc0:	movss  xmm1,DWORD PTR [rdi]
   3adc4:	add    rdi,0x4
   3adc8:	mulss  xmm1,xmm0
   3adcc:	movss  DWORD PTR [rdi-0x4],xmm1
   3add1:	cmp    rdi,rax
   3add4:	jne    3adc0 <FScale+0x10>
   3add6:	ret    
   3add7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003ade0 <DSum>:
   3ade0:	endbr64 
   3ade4:	test   esi,esi
   3ade6:	jle    3ae10 <DSum+0x30>
   3ade8:	lea    eax,[rsi-0x1]
   3adeb:	pxor   xmm0,xmm0
   3adef:	lea    rax,[rdi+rax*8+0x8]
   3adf4:	nop    DWORD PTR [rax+0x0]
   3adf8:	addsd  xmm0,QWORD PTR [rdi]
   3adfc:	add    rdi,0x8
   3ae00:	cmp    rdi,rax
   3ae03:	jne    3adf8 <DSum+0x18>
   3ae05:	ret    
   3ae06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ae10:	pxor   xmm0,xmm0
   3ae14:	ret    
   3ae15:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003ae20 <FSum>:
   3ae20:	endbr64 
   3ae24:	test   esi,esi
   3ae26:	jle    3ae50 <FSum+0x30>
   3ae28:	lea    eax,[rsi-0x1]
   3ae2b:	pxor   xmm0,xmm0
   3ae2f:	lea    rax,[rdi+rax*4+0x4]
   3ae34:	nop    DWORD PTR [rax+0x0]
   3ae38:	addss  xmm0,DWORD PTR [rdi]
   3ae3c:	add    rdi,0x4
   3ae40:	cmp    rdi,rax
   3ae43:	jne    3ae38 <FSum+0x18>
   3ae45:	ret    
   3ae46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ae50:	pxor   xmm0,xmm0
   3ae54:	ret    
   3ae55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003ae60 <DAdd>:
   3ae60:	endbr64 
   3ae64:	test   edx,edx
   3ae66:	jle    3ae8b <DAdd+0x2b>
   3ae68:	lea    ecx,[rdx-0x1]
   3ae6b:	xor    eax,eax
   3ae6d:	nop    DWORD PTR [rax]
   3ae70:	movsd  xmm0,QWORD PTR [rdi+rax*8]
   3ae75:	addsd  xmm0,QWORD PTR [rsi+rax*8]
   3ae7a:	mov    rdx,rax
   3ae7d:	movsd  QWORD PTR [rdi+rax*8],xmm0
   3ae82:	add    rax,0x1
   3ae86:	cmp    rdx,rcx
   3ae89:	jne    3ae70 <DAdd+0x10>
   3ae8b:	ret    
   3ae8c:	nop    DWORD PTR [rax+0x0]

000000000003ae90 <FAdd>:
   3ae90:	endbr64 
   3ae94:	test   edx,edx
   3ae96:	jle    3aebb <FAdd+0x2b>
   3ae98:	lea    ecx,[rdx-0x1]
   3ae9b:	xor    eax,eax
   3ae9d:	nop    DWORD PTR [rax]
   3aea0:	movss  xmm0,DWORD PTR [rdi+rax*4]
   3aea5:	addss  xmm0,DWORD PTR [rsi+rax*4]
   3aeaa:	mov    rdx,rax
   3aead:	movss  DWORD PTR [rdi+rax*4],xmm0
   3aeb2:	add    rax,0x1
   3aeb6:	cmp    rdx,rcx
   3aeb9:	jne    3aea0 <FAdd+0x10>
   3aebb:	ret    
   3aebc:	nop    DWORD PTR [rax+0x0]

000000000003aec0 <DCopy>:
   3aec0:	endbr64 
   3aec4:	test   edx,edx
   3aec6:	jle    3aee6 <DCopy+0x26>
   3aec8:	lea    ecx,[rdx-0x1]
   3aecb:	xor    eax,eax
   3aecd:	nop    DWORD PTR [rax]
   3aed0:	movsd  xmm0,QWORD PTR [rsi+rax*8]
   3aed5:	mov    rdx,rax
   3aed8:	movsd  QWORD PTR [rdi+rax*8],xmm0
   3aedd:	add    rax,0x1
   3aee1:	cmp    rdx,rcx
   3aee4:	jne    3aed0 <DCopy+0x10>
   3aee6:	ret    
   3aee7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003aef0 <FCopy>:
   3aef0:	endbr64 
   3aef4:	test   edx,edx
   3aef6:	jle    3af16 <FCopy+0x26>
   3aef8:	lea    ecx,[rdx-0x1]
   3aefb:	xor    eax,eax
   3aefd:	nop    DWORD PTR [rax]
   3af00:	movss  xmm0,DWORD PTR [rsi+rax*4]
   3af05:	mov    rdx,rax
   3af08:	movss  DWORD PTR [rdi+rax*4],xmm0
   3af0d:	add    rax,0x1
   3af11:	cmp    rdx,rcx
   3af14:	jne    3af00 <FCopy+0x10>
   3af16:	ret    
   3af17:	nop    WORD PTR [rax+rax*1+0x0]

000000000003af20 <DDot>:
   3af20:	endbr64 
   3af24:	test   edx,edx
   3af26:	jle    3af60 <DDot+0x40>
   3af28:	lea    ecx,[rdx-0x1]
   3af2b:	xor    eax,eax
   3af2d:	pxor   xmm1,xmm1
   3af31:	nop    DWORD PTR [rax+0x0]
   3af38:	movsd  xmm0,QWORD PTR [rdi+rax*8]
   3af3d:	mulsd  xmm0,QWORD PTR [rsi+rax*8]
   3af42:	mov    rdx,rax
   3af45:	add    rax,0x1
   3af49:	addsd  xmm1,xmm0
   3af4d:	cmp    rcx,rdx
   3af50:	jne    3af38 <DDot+0x18>
   3af52:	movapd xmm0,xmm1
   3af56:	ret    
   3af57:	nop    WORD PTR [rax+rax*1+0x0]
   3af60:	pxor   xmm1,xmm1
   3af64:	movapd xmm0,xmm1
   3af68:	ret    
   3af69:	nop    DWORD PTR [rax+0x0]

000000000003af70 <FDot>:
   3af70:	endbr64 
   3af74:	test   edx,edx
   3af76:	jle    3afb0 <FDot+0x40>
   3af78:	lea    ecx,[rdx-0x1]
   3af7b:	xor    eax,eax
   3af7d:	pxor   xmm1,xmm1
   3af81:	nop    DWORD PTR [rax+0x0]
   3af88:	movss  xmm0,DWORD PTR [rdi+rax*4]
   3af8d:	mulss  xmm0,DWORD PTR [rsi+rax*4]
   3af92:	mov    rdx,rax
   3af95:	add    rax,0x1
   3af99:	addss  xmm1,xmm0
   3af9d:	cmp    rcx,rdx
   3afa0:	jne    3af88 <FDot+0x18>
   3afa2:	movaps xmm0,xmm1
   3afa5:	ret    
   3afa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3afb0:	pxor   xmm1,xmm1
   3afb4:	movaps xmm0,xmm1
   3afb7:	ret    
   3afb8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003afc0 <DMax>:
   3afc0:	endbr64 
   3afc4:	movsd  xmm0,QWORD PTR [rdi]
   3afc8:	cmp    esi,0x1
   3afcb:	jle    3aff5 <DMax+0x35>
   3afcd:	lea    edx,[rsi-0x2]
   3afd0:	lea    rax,[rdi+0x8]
   3afd4:	lea    rdx,[rdi+rdx*8+0x10]
   3afd9:	nop    DWORD PTR [rax+0x0]
   3afe0:	movsd  xmm1,QWORD PTR [rax]
   3afe4:	add    rax,0x8
   3afe8:	maxsd  xmm1,xmm0
   3afec:	movapd xmm0,xmm1
   3aff0:	cmp    rax,rdx
   3aff3:	jne    3afe0 <DMax+0x20>
   3aff5:	ret    
   3aff6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003b000 <FMax>:
   3b000:	endbr64 
   3b004:	movss  xmm0,DWORD PTR [rdi]
   3b008:	cmp    esi,0x1
   3b00b:	jle    3b034 <FMax+0x34>
   3b00d:	lea    edx,[rsi-0x2]
   3b010:	lea    rax,[rdi+0x4]
   3b014:	lea    rdx,[rdi+rdx*4+0x8]
   3b019:	nop    DWORD PTR [rax+0x0]
   3b020:	movss  xmm1,DWORD PTR [rax]
   3b024:	add    rax,0x4
   3b028:	maxss  xmm1,xmm0
   3b02c:	movaps xmm0,xmm1
   3b02f:	cmp    rax,rdx
   3b032:	jne    3b020 <FMax+0x20>
   3b034:	ret    
   3b035:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003b040 <DMin>:
   3b040:	endbr64 
   3b044:	movsd  xmm0,QWORD PTR [rdi]
   3b048:	cmp    esi,0x1
   3b04b:	jle    3b075 <DMin+0x35>
   3b04d:	lea    edx,[rsi-0x2]
   3b050:	lea    rax,[rdi+0x8]
   3b054:	lea    rdx,[rdi+rdx*8+0x10]
   3b059:	nop    DWORD PTR [rax+0x0]
   3b060:	movsd  xmm1,QWORD PTR [rax]
   3b064:	add    rax,0x8
   3b068:	minsd  xmm1,xmm0
   3b06c:	movapd xmm0,xmm1
   3b070:	cmp    rax,rdx
   3b073:	jne    3b060 <DMin+0x20>
   3b075:	ret    
   3b076:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003b080 <FMin>:
   3b080:	endbr64 
   3b084:	movss  xmm0,DWORD PTR [rdi]
   3b088:	cmp    esi,0x1
   3b08b:	jle    3b0b4 <FMin+0x34>
   3b08d:	lea    edx,[rsi-0x2]
   3b090:	lea    rax,[rdi+0x4]
   3b094:	lea    rdx,[rdi+rdx*4+0x8]
   3b099:	nop    DWORD PTR [rax+0x0]
   3b0a0:	movss  xmm1,DWORD PTR [rax]
   3b0a4:	add    rax,0x4
   3b0a8:	minss  xmm1,xmm0
   3b0ac:	movaps xmm0,xmm1
   3b0af:	cmp    rax,rdx
   3b0b2:	jne    3b0a0 <FMin+0x20>
   3b0b4:	ret    
   3b0b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003b0c0 <DArgMax>:
   3b0c0:	endbr64 
   3b0c4:	cmp    esi,0x1
   3b0c7:	jle    3b100 <DArgMax+0x40>
   3b0c9:	lea    ecx,[rsi-0x2]
   3b0cc:	mov    eax,0x1
   3b0d1:	xor    r8d,r8d
   3b0d4:	add    rcx,0x2
   3b0d8:	nop    DWORD PTR [rax+rax*1+0x0]
   3b0e0:	movsxd rdx,r8d
   3b0e3:	movsd  xmm0,QWORD PTR [rdi+rax*8]
   3b0e8:	ucomisd xmm0,QWORD PTR [rdi+rdx*8]
   3b0ed:	cmova  r8d,eax
   3b0f1:	add    rax,0x1
   3b0f5:	cmp    rax,rcx
   3b0f8:	jne    3b0e0 <DArgMax+0x20>
   3b0fa:	mov    eax,r8d
   3b0fd:	ret    
   3b0fe:	xchg   ax,ax
   3b100:	xor    r8d,r8d
   3b103:	mov    eax,r8d
   3b106:	ret    
   3b107:	nop    WORD PTR [rax+rax*1+0x0]

000000000003b110 <FArgMax>:
   3b110:	endbr64 
   3b114:	cmp    esi,0x1
   3b117:	jle    3b150 <FArgMax+0x40>
   3b119:	lea    ecx,[rsi-0x2]
   3b11c:	mov    eax,0x1
   3b121:	xor    r8d,r8d
   3b124:	add    rcx,0x2
   3b128:	nop    DWORD PTR [rax+rax*1+0x0]
   3b130:	movsxd rdx,r8d
   3b133:	movss  xmm0,DWORD PTR [rdi+rax*4]
   3b138:	ucomiss xmm0,DWORD PTR [rdi+rdx*4]
   3b13c:	cmova  r8d,eax
   3b140:	add    rax,0x1
   3b144:	cmp    rax,rcx
   3b147:	jne    3b130 <FArgMax+0x20>
   3b149:	mov    eax,r8d
   3b14c:	ret    
   3b14d:	nop    DWORD PTR [rax]
   3b150:	xor    r8d,r8d
   3b153:	mov    eax,r8d
   3b156:	ret    
   3b157:	nop    WORD PTR [rax+rax*1+0x0]

000000000003b160 <DArgMin>:
   3b160:	endbr64 
   3b164:	cmp    esi,0x1
   3b167:	jle    3b1a0 <DArgMin+0x40>
   3b169:	lea    ecx,[rsi-0x2]
   3b16c:	mov    eax,0x1
   3b171:	xor    r8d,r8d
   3b174:	add    rcx,0x2
   3b178:	nop    DWORD PTR [rax+rax*1+0x0]
   3b180:	movsxd rdx,r8d
   3b183:	movsd  xmm0,QWORD PTR [rdi+rdx*8]
   3b188:	ucomisd xmm0,QWORD PTR [rdi+rax*8]
   3b18d:	cmova  r8d,eax
   3b191:	add    rax,0x1
   3b195:	cmp    rax,rcx
   3b198:	jne    3b180 <DArgMin+0x20>
   3b19a:	mov    eax,r8d
   3b19d:	ret    
   3b19e:	xchg   ax,ax
   3b1a0:	xor    r8d,r8d
   3b1a3:	mov    eax,r8d
   3b1a6:	ret    
   3b1a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003b1b0 <FArgMin>:
   3b1b0:	endbr64 
   3b1b4:	cmp    esi,0x1
   3b1b7:	jle    3b1f0 <FArgMin+0x40>
   3b1b9:	lea    ecx,[rsi-0x2]
   3b1bc:	mov    eax,0x1
   3b1c1:	xor    r8d,r8d
   3b1c4:	add    rcx,0x2
   3b1c8:	nop    DWORD PTR [rax+rax*1+0x0]
   3b1d0:	movsxd rdx,r8d
   3b1d3:	movss  xmm0,DWORD PTR [rdi+rdx*4]
   3b1d8:	ucomiss xmm0,DWORD PTR [rdi+rax*4]
   3b1dc:	cmova  r8d,eax
   3b1e0:	add    rax,0x1
   3b1e4:	cmp    rax,rcx
   3b1e7:	jne    3b1d0 <FArgMin+0x20>
   3b1e9:	mov    eax,r8d
   3b1ec:	ret    
   3b1ed:	nop    DWORD PTR [rax]
   3b1f0:	xor    r8d,r8d
   3b1f3:	mov    eax,r8d
   3b1f6:	ret    
   3b1f7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003b200 <DNorm>:
   3b200:	endbr64 
   3b204:	test   esi,esi
   3b206:	jle    3b280 <DNorm+0x80>
   3b208:	lea    eax,[rsi-0x1]
   3b20b:	pxor   xmm1,xmm1
   3b20f:	lea    rdx,[rdi+rax*8+0x8]
   3b214:	movapd xmm0,xmm1
   3b218:	mov    rax,rdi
   3b21b:	nop    DWORD PTR [rax+rax*1+0x0]
   3b220:	addsd  xmm0,QWORD PTR [rax]
   3b224:	add    rax,0x8
   3b228:	cmp    rax,rdx
   3b22b:	jne    3b220 <DNorm+0x20>
   3b22d:	ucomisd xmm0,xmm1
   3b231:	jp     3b260 <DNorm+0x60>
   3b233:	jne    3b260 <DNorm+0x60>
   3b235:	pxor   xmm0,xmm0
   3b239:	movsd  xmm1,QWORD PTR [rip+0x2baf]        # 3ddf0 <_IO_stdin_used+0xdf0>
   3b241:	cvtsi2sd xmm0,esi
   3b245:	divsd  xmm1,xmm0
   3b249:	movapd xmm0,xmm1
   3b24d:	nop    DWORD PTR [rax]
   3b250:	movsd  QWORD PTR [rdi],xmm0
   3b254:	add    rdi,0x8
   3b258:	cmp    rdi,rdx
   3b25b:	jne    3b250 <DNorm+0x50>
   3b25d:	ret    
   3b25e:	xchg   ax,ax
   3b260:	movsd  xmm1,QWORD PTR [rdi]
   3b264:	add    rdi,0x8
   3b268:	divsd  xmm1,xmm0
   3b26c:	movsd  QWORD PTR [rdi-0x8],xmm1
   3b271:	cmp    rdi,rdx
   3b274:	jne    3b260 <DNorm+0x60>
   3b276:	ret    
   3b277:	nop    WORD PTR [rax+rax*1+0x0]
   3b280:	ret    
   3b281:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b28c:	nop    DWORD PTR [rax+0x0]

000000000003b290 <FNorm>:
   3b290:	endbr64 
   3b294:	test   esi,esi
   3b296:	jle    3b310 <FNorm+0x80>
   3b298:	lea    eax,[rsi-0x1]
   3b29b:	pxor   xmm1,xmm1
   3b29f:	lea    rdx,[rdi+rax*4+0x4]
   3b2a4:	movaps xmm0,xmm1
   3b2a7:	mov    rax,rdi
   3b2aa:	nop    WORD PTR [rax+rax*1+0x0]
   3b2b0:	addss  xmm0,DWORD PTR [rax]
   3b2b4:	add    rax,0x4
   3b2b8:	cmp    rax,rdx
   3b2bb:	jne    3b2b0 <FNorm+0x20>
   3b2bd:	ucomiss xmm0,xmm1
   3b2c0:	jp     3b2f0 <FNorm+0x60>
   3b2c2:	jne    3b2f0 <FNorm+0x60>
   3b2c4:	pxor   xmm0,xmm0
   3b2c8:	movss  xmm1,DWORD PTR [rip+0x20cc]        # 3d39c <_IO_stdin_used+0x39c>
   3b2d0:	cvtsi2ss xmm0,esi
   3b2d4:	divss  xmm1,xmm0
   3b2d8:	movaps xmm0,xmm1
   3b2db:	nop    DWORD PTR [rax+rax*1+0x0]
   3b2e0:	movss  DWORD PTR [rdi],xmm0
   3b2e4:	add    rdi,0x4
   3b2e8:	cmp    rdi,rdx
   3b2eb:	jne    3b2e0 <FNorm+0x50>
   3b2ed:	ret    
   3b2ee:	xchg   ax,ax
   3b2f0:	movss  xmm1,DWORD PTR [rdi]
   3b2f4:	add    rdi,0x4
   3b2f8:	divss  xmm1,xmm0
   3b2fc:	movss  DWORD PTR [rdi-0x4],xmm1
   3b301:	cmp    rdi,rdx
   3b304:	jne    3b2f0 <FNorm+0x60>
   3b306:	ret    
   3b307:	nop    WORD PTR [rax+rax*1+0x0]
   3b310:	ret    
   3b311:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b31c:	nop    DWORD PTR [rax+0x0]

000000000003b320 <DLog>:
   3b320:	endbr64 
   3b324:	test   esi,esi
   3b326:	jle    3b380 <DLog+0x60>
   3b328:	push   rbp
   3b329:	lea    eax,[rsi-0x1]
   3b32c:	push   rbx
   3b32d:	lea    rbp,[rdi+rax*8+0x8]
   3b332:	mov    rbx,rdi
   3b335:	sub    rsp,0x8
   3b339:	jmp    3b354 <DLog+0x34>
   3b33b:	nop    DWORD PTR [rax+rax*1+0x0]
   3b340:	mov    rax,QWORD PTR [rip+0x7e21]        # 43168 <cof.6115+0x968>
   3b347:	add    rbx,0x8
   3b34b:	mov    QWORD PTR [rbx-0x8],rax
   3b34f:	cmp    rbx,rbp
   3b352:	je     3b375 <DLog+0x55>
   3b354:	movsd  xmm0,QWORD PTR [rbx]
   3b358:	pxor   xmm1,xmm1
   3b35c:	comisd xmm0,xmm1
   3b360:	jbe    3b340 <DLog+0x20>
   3b362:	call   35e0 <log@plt>
   3b367:	add    rbx,0x8
   3b36b:	movsd  QWORD PTR [rbx-0x8],xmm0
   3b370:	cmp    rbx,rbp
   3b373:	jne    3b354 <DLog+0x34>
   3b375:	add    rsp,0x8
   3b379:	pop    rbx
   3b37a:	pop    rbp
   3b37b:	ret    
   3b37c:	nop    DWORD PTR [rax+0x0]
   3b380:	ret    
   3b381:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b38c:	nop    DWORD PTR [rax+0x0]

000000000003b390 <FLog>:
   3b390:	endbr64 
   3b394:	test   esi,esi
   3b396:	jle    3b3f0 <FLog+0x60>
   3b398:	push   rbp
   3b399:	lea    eax,[rsi-0x1]
   3b39c:	push   rbx
   3b39d:	lea    rbp,[rdi+rax*4+0x4]
   3b3a2:	mov    rbx,rdi
   3b3a5:	sub    rsp,0x8
   3b3a9:	jmp    3b3bf <FLog+0x2f>
   3b3ab:	nop    DWORD PTR [rax+rax*1+0x0]
   3b3b0:	mov    DWORD PTR [rbx],0xff7fffff
   3b3b6:	add    rbx,0x4
   3b3ba:	cmp    rbx,rbp
   3b3bd:	je     3b3e7 <FLog+0x57>
   3b3bf:	movss  xmm0,DWORD PTR [rbx]
   3b3c3:	pxor   xmm1,xmm1
   3b3c7:	comiss xmm0,xmm1
   3b3ca:	jbe    3b3b0 <FLog+0x20>
   3b3cc:	cvtss2sd xmm0,xmm0
   3b3d0:	call   35e0 <log@plt>
   3b3d5:	add    rbx,0x4
   3b3d9:	cvtsd2ss xmm0,xmm0
   3b3dd:	movss  DWORD PTR [rbx-0x4],xmm0
   3b3e2:	cmp    rbx,rbp
   3b3e5:	jne    3b3bf <FLog+0x2f>
   3b3e7:	add    rsp,0x8
   3b3eb:	pop    rbx
   3b3ec:	pop    rbp
   3b3ed:	ret    
   3b3ee:	xchg   ax,ax
   3b3f0:	ret    
   3b3f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b3fc:	nop    DWORD PTR [rax+0x0]

000000000003b400 <DExp>:
   3b400:	endbr64 
   3b404:	test   esi,esi
   3b406:	jle    3b440 <DExp+0x40>
   3b408:	push   rbp
   3b409:	lea    eax,[rsi-0x1]
   3b40c:	push   rbx
   3b40d:	lea    rbp,[rdi+rax*8+0x8]
   3b412:	mov    rbx,rdi
   3b415:	sub    rsp,0x8
   3b419:	nop    DWORD PTR [rax+0x0]
   3b420:	movsd  xmm0,QWORD PTR [rbx]
   3b424:	add    rbx,0x8
   3b428:	call   3800 <exp@plt>
   3b42d:	movsd  QWORD PTR [rbx-0x8],xmm0
   3b432:	cmp    rbx,rbp
   3b435:	jne    3b420 <DExp+0x20>
   3b437:	add    rsp,0x8
   3b43b:	pop    rbx
   3b43c:	pop    rbp
   3b43d:	ret    
   3b43e:	xchg   ax,ax
   3b440:	ret    
   3b441:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b44c:	nop    DWORD PTR [rax+0x0]

000000000003b450 <FExp>:
   3b450:	endbr64 
   3b454:	test   esi,esi
   3b456:	jle    3b4a0 <FExp+0x50>
   3b458:	push   rbp
   3b459:	lea    eax,[rsi-0x1]
   3b45c:	push   rbx
   3b45d:	lea    rbp,[rdi+rax*4+0x4]
   3b462:	mov    rbx,rdi
   3b465:	sub    rsp,0x8
   3b469:	nop    DWORD PTR [rax+0x0]
   3b470:	pxor   xmm0,xmm0
   3b474:	add    rbx,0x4
   3b478:	cvtss2sd xmm0,DWORD PTR [rbx-0x4]
   3b47d:	call   3800 <exp@plt>
   3b482:	cvtsd2ss xmm0,xmm0
   3b486:	movss  DWORD PTR [rbx-0x4],xmm0
   3b48b:	cmp    rbx,rbp
   3b48e:	jne    3b470 <FExp+0x20>
   3b490:	add    rsp,0x8
   3b494:	pop    rbx
   3b495:	pop    rbp
   3b496:	ret    
   3b497:	nop    WORD PTR [rax+rax*1+0x0]
   3b4a0:	ret    
   3b4a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b4ac:	nop    DWORD PTR [rax+0x0]

000000000003b4b0 <DLogSum>:
   3b4b0:	endbr64 
   3b4b4:	push   r12
   3b4b6:	mov    r12,rdi
   3b4b9:	push   rbp
   3b4ba:	mov    ebp,esi
   3b4bc:	push   rbx
   3b4bd:	sub    rsp,0x20
   3b4c1:	movsd  xmm0,QWORD PTR [rdi]
   3b4c5:	cmp    esi,0x1
   3b4c8:	jle    3b580 <DLogSum+0xd0>
   3b4ce:	lea    edx,[rsi-0x2]
   3b4d1:	lea    rax,[rdi+0x8]
   3b4d5:	movapd xmm1,xmm0
   3b4d9:	lea    rdx,[rdi+rdx*8+0x10]
   3b4de:	xchg   ax,ax
   3b4e0:	movsd  xmm2,QWORD PTR [rax]
   3b4e4:	add    rax,0x8
   3b4e8:	maxsd  xmm2,xmm1
   3b4ec:	movapd xmm1,xmm2
   3b4f0:	cmp    rax,rdx
   3b4f3:	jne    3b4e0 <DLogSum+0x30>
   3b4f5:	movapd xmm2,xmm1
   3b4f9:	xor    ebx,ebx
   3b4fb:	pxor   xmm3,xmm3
   3b4ff:	subsd  xmm2,QWORD PTR [rip+0x3809]        # 3ed10 <_IO_stdin_used+0x1d10>
   3b507:	jmp    3b51e <DLogSum+0x6e>
   3b509:	nop    DWORD PTR [rax+0x0]
   3b510:	add    rbx,0x1
   3b514:	cmp    ebp,ebx
   3b516:	jle    3b55d <DLogSum+0xad>
   3b518:	movsd  xmm0,QWORD PTR [r12+rbx*8]
   3b51e:	comisd xmm0,xmm2
   3b522:	jbe    3b510 <DLogSum+0x60>
   3b524:	subsd  xmm0,xmm1
   3b528:	movsd  QWORD PTR [rsp+0x18],xmm2
   3b52e:	add    rbx,0x1
   3b532:	movsd  QWORD PTR [rsp+0x10],xmm3
   3b538:	movsd  QWORD PTR [rsp+0x8],xmm1
   3b53e:	call   3800 <exp@plt>
   3b543:	movsd  xmm3,QWORD PTR [rsp+0x10]
   3b549:	movsd  xmm2,QWORD PTR [rsp+0x18]
   3b54f:	movsd  xmm1,QWORD PTR [rsp+0x8]
   3b555:	addsd  xmm3,xmm0
   3b559:	cmp    ebp,ebx
   3b55b:	jg     3b518 <DLogSum+0x68>
   3b55d:	movapd xmm0,xmm3
   3b561:	movsd  QWORD PTR [rsp+0x8],xmm1
   3b567:	call   35e0 <log@plt>
   3b56c:	movsd  xmm1,QWORD PTR [rsp+0x8]
   3b572:	add    rsp,0x20
   3b576:	pop    rbx
   3b577:	pop    rbp
   3b578:	addsd  xmm0,xmm1
   3b57c:	pop    r12
   3b57e:	ret    
   3b57f:	nop
   3b580:	movapd xmm1,xmm0
   3b584:	je     3b4f5 <DLogSum+0x45>
   3b58a:	pxor   xmm3,xmm3
   3b58e:	jmp    3b55d <DLogSum+0xad>

000000000003b590 <FLogSum>:
   3b590:	endbr64 
   3b594:	push   r12
   3b596:	mov    r12,rdi
   3b599:	push   rbp
   3b59a:	mov    ebp,esi
   3b59c:	push   rbx
   3b59d:	sub    rsp,0x20
   3b5a1:	movss  xmm0,DWORD PTR [rdi]
   3b5a5:	cmp    esi,0x1
   3b5a8:	jle    3b688 <FLogSum+0xf8>
   3b5ae:	lea    edx,[rsi-0x2]
   3b5b1:	lea    rax,[rdi+0x4]
   3b5b5:	movaps xmm1,xmm0
   3b5b8:	lea    rdx,[rdi+rdx*4+0x8]
   3b5bd:	nop    DWORD PTR [rax]
   3b5c0:	movss  xmm2,DWORD PTR [rax]
   3b5c4:	add    rax,0x4
   3b5c8:	maxss  xmm2,xmm1
   3b5cc:	movaps xmm1,xmm2
   3b5cf:	cmp    rax,rdx
   3b5d2:	jne    3b5c0 <FLogSum+0x30>
   3b5d4:	pxor   xmm5,xmm5
   3b5d8:	xor    ebx,ebx
   3b5da:	pxor   xmm2,xmm2
   3b5de:	cvtss2sd xmm5,xmm1
   3b5e2:	movapd xmm4,xmm5
   3b5e6:	movsd  QWORD PTR [rsp+0x18],xmm5
   3b5ec:	subsd  xmm4,QWORD PTR [rip+0x371c]        # 3ed10 <_IO_stdin_used+0x1d10>
   3b5f4:	jmp    3b60e <FLogSum+0x7e>
   3b5f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b600:	add    rbx,0x1
   3b604:	cmp    ebp,ebx
   3b606:	jle    3b661 <FLogSum+0xd1>
   3b608:	movss  xmm0,DWORD PTR [r12+rbx*4]
   3b60e:	pxor   xmm3,xmm3
   3b612:	cvtss2sd xmm3,xmm0
   3b616:	comisd xmm3,xmm4
   3b61a:	jbe    3b600 <FLogSum+0x70>
   3b61c:	subss  xmm0,xmm1
   3b620:	movsd  QWORD PTR [rsp+0x10],xmm4
   3b626:	add    rbx,0x1
   3b62a:	movss  DWORD PTR [rsp+0xc],xmm2
   3b630:	movss  DWORD PTR [rsp+0x8],xmm1
   3b636:	cvtss2sd xmm0,xmm0
   3b63a:	call   3800 <exp@plt>
   3b63f:	movss  xmm2,DWORD PTR [rsp+0xc]
   3b645:	movsd  xmm4,QWORD PTR [rsp+0x10]
   3b64b:	movss  xmm1,DWORD PTR [rsp+0x8]
   3b651:	cvtss2sd xmm2,xmm2
   3b655:	addsd  xmm2,xmm0
   3b659:	cvtsd2ss xmm2,xmm2
   3b65d:	cmp    ebp,ebx
   3b65f:	jg     3b608 <FLogSum+0x78>
   3b661:	cvtss2sd xmm2,xmm2
   3b665:	movapd xmm0,xmm2
   3b669:	call   35e0 <log@plt>
   3b66e:	addsd  xmm0,QWORD PTR [rsp+0x18]
   3b674:	add    rsp,0x20
   3b678:	pop    rbx
   3b679:	pop    rbp
   3b67a:	pop    r12
   3b67c:	cvtsd2ss xmm0,xmm0
   3b680:	ret    
   3b681:	nop    DWORD PTR [rax+0x0]
   3b688:	je     3b69e <FLogSum+0x10e>
   3b68a:	pxor   xmm7,xmm7
   3b68e:	pxor   xmm2,xmm2
   3b692:	cvtss2sd xmm7,xmm0
   3b696:	movsd  QWORD PTR [rsp+0x18],xmm7
   3b69c:	jmp    3b665 <FLogSum+0xd5>
   3b69e:	movaps xmm1,xmm0
   3b6a1:	jmp    3b5d4 <FLogSum+0x44>
   3b6a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003b6b0 <upweight>:
   3b6b0:	push   r15
   3b6b2:	mov    r15,rdx
   3b6b5:	push   r14
   3b6b7:	mov    r14,rcx
   3b6ba:	push   r13
   3b6bc:	push   r12
   3b6be:	push   rbp
   3b6bf:	mov    ebp,esi
   3b6c1:	push   rbx
   3b6c2:	movsxd rbx,r8d
   3b6c5:	mov    eax,ebx
   3b6c7:	sub    eax,esi
   3b6c9:	cdqe   
   3b6cb:	sub    rsp,0x18
   3b6cf:	lea    rax,[rax+rax*4]
   3b6d3:	lea    rax,[rdi+rax*8]
   3b6d7:	movsxd r13,DWORD PTR [rax+0x4]
   3b6db:	cmp    esi,r13d
   3b6de:	jle    3b730 <upweight+0x80>
   3b6e0:	movsxd r12,DWORD PTR [rax+0x8]
   3b6e4:	cmp    ebp,r12d
   3b6e7:	jle    3b753 <upweight+0xa3>
   3b6e9:	movss  xmm0,DWORD PTR [r15+r13*4]
   3b6ef:	addss  xmm0,DWORD PTR [r14+r13*4]
   3b6f5:	addss  xmm0,DWORD PTR [rax+0x10]
   3b6fa:	movss  DWORD PTR [r15+rbx*4],xmm0
   3b700:	movss  xmm0,DWORD PTR [r15+r12*4]
   3b706:	addss  xmm0,DWORD PTR [r14+r12*4]
   3b70c:	addss  xmm0,DWORD PTR [rax+0x14]
   3b711:	movss  DWORD PTR [r14+rbx*4],xmm0
   3b717:	add    rsp,0x18
   3b71b:	pop    rbx
   3b71c:	pop    rbp
   3b71d:	pop    r12
   3b71f:	pop    r13
   3b721:	pop    r14
   3b723:	pop    r15
   3b725:	ret    
   3b726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b730:	mov    r8d,r13d
   3b733:	mov    QWORD PTR [rsp+0x8],rax
   3b738:	mov    QWORD PTR [rsp],rdi
   3b73c:	call   3b6b0 <upweight>
   3b741:	mov    rax,QWORD PTR [rsp+0x8]
   3b746:	mov    rdi,QWORD PTR [rsp]
   3b74a:	movsxd r12,DWORD PTR [rax+0x8]
   3b74e:	cmp    ebp,r12d
   3b751:	jg     3b6e9 <upweight+0x39>
   3b753:	mov    r8d,r12d
   3b756:	mov    rcx,r14
   3b759:	mov    rdx,r15
   3b75c:	mov    esi,ebp
   3b75e:	mov    QWORD PTR [rsp],rax
   3b762:	call   3b6b0 <upweight>
   3b767:	mov    rax,QWORD PTR [rsp]
   3b76b:	jmp    3b6e9 <upweight+0x39>

000000000003b770 <downweight>:
   3b770:	push   r15
   3b772:	mov    r15,rdx
   3b775:	push   r14
   3b777:	mov    r14,rcx
   3b77a:	push   r13
   3b77c:	mov    r13,rdi
   3b77f:	push   r12
   3b781:	mov    r12,r8
   3b784:	push   rbp
   3b785:	mov    ebp,esi
   3b787:	push   rbx
   3b788:	mov    ebx,r9d
   3b78b:	sub    rsp,0x8
   3b78f:	mov    eax,ebx
   3b791:	pxor   xmm4,xmm4
   3b795:	sub    eax,ebp
   3b797:	cdqe   
   3b799:	lea    rax,[rax+rax*4]
   3b79d:	lea    rdx,[r13+rax*8+0x0]
   3b7a2:	movsxd rax,ebx
   3b7a5:	shl    rax,0x2
   3b7a9:	movsxd rsi,DWORD PTR [rdx+0x4]
   3b7ad:	mov    ebx,DWORD PTR [rdx+0x8]
   3b7b0:	lea    rcx,[r14+rax*1]
   3b7b4:	lea    rdx,[r15+rax*1]
   3b7b8:	add    rax,r12
   3b7bb:	movss  xmm0,DWORD PTR [rdx]
   3b7bf:	movss  xmm2,DWORD PTR [rcx]
   3b7c3:	mov    r9,rsi
   3b7c6:	lea    rdi,[r12+rsi*4]
   3b7ca:	movsxd rsi,ebx
   3b7cd:	movss  xmm1,DWORD PTR [rax]
   3b7d1:	addss  xmm2,xmm0
   3b7d5:	lea    rsi,[r12+rsi*4]
   3b7d9:	comiss xmm2,xmm4
   3b7dc:	jbe    3b820 <downweight+0xb0>
   3b7de:	divss  xmm0,xmm2
   3b7e2:	mulss  xmm0,xmm1
   3b7e6:	movss  DWORD PTR [rdi],xmm0
   3b7ea:	movss  xmm0,DWORD PTR [rcx]
   3b7ee:	movss  xmm1,DWORD PTR [rdx]
   3b7f2:	addss  xmm1,xmm0
   3b7f6:	divss  xmm0,xmm1
   3b7fa:	mulss  xmm0,DWORD PTR [rax]
   3b7fe:	movss  DWORD PTR [rsi],xmm0
   3b802:	cmp    ebp,r9d
   3b805:	jle    3b887 <downweight+0x117>
   3b80b:	cmp    ebp,ebx
   3b80d:	jle    3b78f <downweight+0x1f>
   3b80f:	add    rsp,0x8
   3b813:	pop    rbx
   3b814:	pop    rbp
   3b815:	pop    r12
   3b817:	pop    r13
   3b819:	pop    r14
   3b81b:	pop    r15
   3b81d:	ret    
   3b81e:	xchg   ax,ax
   3b820:	movss  xmm3,DWORD PTR [rip+0x1b74]        # 3d39c <_IO_stdin_used+0x39c>
   3b828:	cmp    ebp,r9d
   3b82b:	jg     3b848 <downweight+0xd8>
   3b82d:	mov    edx,r9d
   3b830:	pxor   xmm3,xmm3
   3b834:	sub    edx,ebp
   3b836:	movsxd rdx,edx
   3b839:	lea    rdx,[rdx+rdx*4]
   3b83d:	cvtsi2ss xmm3,DWORD PTR [r13+rdx*8+0x20]
   3b844:	mulss  xmm1,xmm3
   3b848:	movss  xmm2,DWORD PTR [rip+0x1b4c]        # 3d39c <_IO_stdin_used+0x39c>
   3b850:	cmp    ebp,ebx
   3b852:	jg     3b86a <downweight+0xfa>
   3b854:	mov    edx,ebx
   3b856:	pxor   xmm2,xmm2
   3b85a:	sub    edx,ebp
   3b85c:	movsxd rdx,edx
   3b85f:	lea    rdx,[rdx+rdx*4]
   3b863:	cvtsi2ss xmm2,DWORD PTR [r13+rdx*8+0x20]
   3b86a:	addss  xmm3,xmm2
   3b86e:	divss  xmm1,xmm3
   3b872:	movss  DWORD PTR [rdi],xmm1
   3b876:	mulss  xmm2,DWORD PTR [rax]
   3b87a:	divss  xmm2,xmm3
   3b87e:	movss  DWORD PTR [rsi],xmm2
   3b882:	cmp    ebp,r9d
   3b885:	jg     3b80b <downweight+0x9b>
   3b887:	mov    r8,r12
   3b88a:	mov    rcx,r14
   3b88d:	mov    rdx,r15
   3b890:	mov    esi,ebp
   3b892:	mov    rdi,r13
   3b895:	call   3b770 <downweight>
   3b89a:	jmp    3b80b <downweight+0x9b>
   3b89f:	nop

000000000003b8a0 <simple_distance>:
   3b8a0:	movzx  r8d,BYTE PTR [rdi]
   3b8a4:	test   r8b,r8b
   3b8a7:	je     3b968 <simple_distance+0xc8>
   3b8ad:	push   rbp
   3b8ae:	xor    r9d,r9d
   3b8b1:	xor    r11d,r11d
   3b8b4:	movabs r10,0x8000000000006001
   3b8be:	push   rbx
   3b8bf:	xor    ebx,ebx
   3b8c1:	jmp    3b8d6 <simple_distance+0x36>
   3b8c3:	nop    DWORD PTR [rax+rax*1+0x0]
   3b8c8:	add    r9,0x1
   3b8cc:	movzx  r8d,BYTE PTR [rdi+r9*1]
   3b8d1:	test   r8b,r8b
   3b8d4:	je     3b940 <simple_distance+0xa0>
   3b8d6:	lea    ecx,[r8-0x20]
   3b8da:	mov    rax,r10
   3b8dd:	mov    edx,0x0
   3b8e2:	shr    rax,cl
   3b8e5:	and    eax,0x1
   3b8e8:	cmp    cl,0x40
   3b8eb:	cmovae eax,edx
   3b8ee:	cmp    r8b,0x7e
   3b8f2:	sete   dl
   3b8f5:	or     al,dl
   3b8f7:	jne    3b8c8 <simple_distance+0x28>
   3b8f9:	movzx  ebp,BYTE PTR [rsi+r9*1]
   3b8fe:	mov    rdx,r10
   3b901:	lea    ecx,[rbp-0x20]
   3b904:	shr    rdx,cl
   3b907:	and    edx,0x1
   3b90a:	cmp    cl,0x40
   3b90d:	cmovb  eax,edx
   3b910:	cmp    bpl,0x7e
   3b914:	je     3b8c8 <simple_distance+0x28>
   3b916:	test   al,al
   3b918:	jne    3b8c8 <simple_distance+0x28>
   3b91a:	xor    eax,eax
   3b91c:	cmp    bpl,r8b
   3b91f:	setne  al
   3b922:	add    r9,0x1
   3b926:	add    r11d,0x1
   3b92a:	movzx  r8d,BYTE PTR [rdi+r9*1]
   3b92f:	add    ebx,eax
   3b931:	test   r8b,r8b
   3b934:	jne    3b8d6 <simple_distance+0x36>
   3b936:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b940:	pxor   xmm0,xmm0
   3b944:	test   r11d,r11d
   3b947:	je     3b95e <simple_distance+0xbe>
   3b949:	pxor   xmm0,xmm0
   3b94d:	pxor   xmm1,xmm1
   3b951:	cvtsi2ss xmm0,ebx
   3b955:	cvtsi2ss xmm1,r11d
   3b95a:	divss  xmm0,xmm1
   3b95e:	pop    rbx
   3b95f:	pop    rbp
   3b960:	ret    
   3b961:	nop    DWORD PTR [rax+0x0]
   3b968:	pxor   xmm0,xmm0
   3b96c:	ret    
   3b96d:	nop    DWORD PTR [rax]

000000000003b970 <GSCWeights>:
   3b970:	endbr64 
   3b974:	push   r14
   3b976:	push   r13
   3b978:	push   r12
   3b97a:	push   rbp
   3b97b:	push   rbx
   3b97c:	mov    rbx,rcx
   3b97f:	sub    rsp,0x20
   3b983:	mov    rax,QWORD PTR fs:0x28
   3b98c:	mov    QWORD PTR [rsp+0x18],rax
   3b991:	xor    eax,eax
   3b993:	cmp    esi,0x1
   3b996:	je     3bb10 <GSCWeights+0x1a0>
   3b99c:	lea    rdx,[rsp+0x8]
   3b9a1:	mov    ebp,esi
   3b9a3:	call   26890 <MakeDiffMx>
   3b9a8:	mov    rdi,QWORD PTR [rsp+0x8]
   3b9ad:	lea    rcx,[rsp+0x10]
   3b9b2:	mov    esi,ebp
   3b9b4:	mov    edx,0x2
   3b9b9:	call   26190 <Cluster>
   3b9be:	test   eax,eax
   3b9c0:	je     3baf8 <GSCWeights+0x188>
   3b9c6:	lea    r14d,[rbp+rbp*1-0x1]
   3b9cb:	mov    esi,0x43
   3b9d0:	lea    rdi,[rip+0x77aa]        # 43181 <cof.6115+0x981>
   3b9d7:	movsxd r14,r14d
   3b9da:	shl    r14,0x2
   3b9de:	mov    rdx,r14
   3b9e1:	call   36810 <sre_malloc>
   3b9e6:	mov    rdx,r14
   3b9e9:	mov    esi,0x44
   3b9ee:	lea    rdi,[rip+0x778c]        # 43181 <cof.6115+0x981>
   3b9f5:	mov    r12,rax
   3b9f8:	call   36810 <sre_malloc>
   3b9fd:	mov    rdx,r14
   3ba00:	mov    esi,0x45
   3ba05:	lea    rdi,[rip+0x7775]        # 43181 <cof.6115+0x981>
   3ba0c:	mov    r13,rax
   3ba0f:	call   36810 <sre_malloc>
   3ba14:	movsxd r9,ebp
   3ba17:	mov    r14,rax
   3ba1a:	test   ebp,ebp
   3ba1c:	jle    3bb20 <GSCWeights+0x1b0>
   3ba22:	lea    r10d,[rbp-0x1]
   3ba26:	xor    edx,edx
   3ba28:	nop    DWORD PTR [rax+rax*1+0x0]
   3ba30:	mov    DWORD PTR [r13+rdx*4+0x0],0x0
   3ba39:	mov    rax,rdx
   3ba3c:	mov    DWORD PTR [r12+rdx*4],0x0
   3ba44:	add    rdx,0x1
   3ba48:	cmp    rax,r10
   3ba4b:	jne    3ba30 <GSCWeights+0xc0>
   3ba4d:	mov    rdi,QWORD PTR [rsp+0x10]
   3ba52:	mov    r8d,ebp
   3ba55:	mov    rcx,r13
   3ba58:	mov    rdx,r12
   3ba5b:	mov    esi,ebp
   3ba5d:	call   3b6b0 <upweight>
   3ba62:	pxor   xmm0,xmm0
   3ba66:	mov    rdi,QWORD PTR [rsp+0x10]
   3ba6b:	mov    esi,ebp
   3ba6d:	cvtsi2ss xmm0,ebp
   3ba71:	mov    rdx,r12
   3ba74:	mov    r8,r14
   3ba77:	mov    rcx,r13
   3ba7a:	movss  DWORD PTR [r14+r9*4],xmm0
   3ba80:	mov    r9d,ebp
   3ba83:	call   3b770 <downweight>
   3ba88:	xor    edx,edx
   3ba8a:	nop    WORD PTR [rax+rax*1+0x0]
   3ba90:	movss  xmm0,DWORD PTR [r14+rdx*4]
   3ba96:	mov    rcx,rdx
   3ba99:	movss  DWORD PTR [rbx+rdx*4],xmm0
   3ba9e:	add    rdx,0x1
   3baa2:	cmp    r10,rcx
   3baa5:	jne    3ba90 <GSCWeights+0x120>
   3baa7:	mov    rdi,QWORD PTR [rsp+0x8]
   3baac:	call   35be0 <FMX2Free>
   3bab1:	mov    rdi,QWORD PTR [rsp+0x10]
   3bab6:	mov    esi,ebp
   3bab8:	call   26850 <FreePhylo>
   3babd:	mov    rdi,r12
   3bac0:	call   3460 <free@plt>
   3bac5:	mov    rdi,r13
   3bac8:	call   3460 <free@plt>
   3bacd:	mov    rdi,r14
   3bad0:	call   3460 <free@plt>
   3bad5:	mov    rax,QWORD PTR [rsp+0x18]
   3bada:	xor    rax,QWORD PTR fs:0x28
   3bae3:	jne    3bb60 <GSCWeights+0x1f0>
   3bae5:	add    rsp,0x20
   3bae9:	pop    rbx
   3baea:	pop    rbp
   3baeb:	pop    r12
   3baed:	pop    r13
   3baef:	pop    r14
   3baf1:	ret    
   3baf2:	nop    WORD PTR [rax+rax*1+0x0]
   3baf8:	lea    rdi,[rip+0x7671]        # 43170 <cof.6115+0x970>
   3baff:	call   317f0 <Die>
   3bb04:	jmp    3b9c6 <GSCWeights+0x56>
   3bb09:	nop    DWORD PTR [rax+0x0]
   3bb10:	mov    DWORD PTR [rcx],0x3f800000
   3bb16:	jmp    3bad5 <GSCWeights+0x165>
   3bb18:	nop    DWORD PTR [rax+rax*1+0x0]
   3bb20:	mov    rdi,QWORD PTR [rsp+0x10]
   3bb25:	mov    r8d,ebp
   3bb28:	mov    rcx,r13
   3bb2b:	mov    rdx,r12
   3bb2e:	mov    esi,ebp
   3bb30:	call   3b6b0 <upweight>
   3bb35:	pxor   xmm0,xmm0
   3bb39:	mov    rdi,QWORD PTR [rsp+0x10]
   3bb3e:	mov    esi,ebp
   3bb40:	cvtsi2ss xmm0,ebp
   3bb44:	mov    r8,r14
   3bb47:	mov    rcx,r13
   3bb4a:	mov    rdx,r12
   3bb4d:	movss  DWORD PTR [r14+r9*4],xmm0
   3bb53:	mov    r9d,ebp
   3bb56:	call   3b770 <downweight>
   3bb5b:	jmp    3baa7 <GSCWeights+0x137>
   3bb60:	call   3570 <__stack_chk_fail@plt>
   3bb65:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003bb70 <VoronoiWeights>:
   3bb70:	endbr64 
   3bb74:	push   r15
   3bb76:	push   r14
   3bb78:	push   r13
   3bb7a:	push   r12
   3bb7c:	push   rbp
   3bb7d:	push   rbx
   3bb7e:	sub    rsp,0xf8
   3bb85:	mov    DWORD PTR [rsp+0x38],esi
   3bb89:	mov    DWORD PTR [rsp+0x58],edx
   3bb8d:	mov    QWORD PTR [rsp+0x40],rcx
   3bb92:	mov    rax,QWORD PTR fs:0x28
   3bb9b:	mov    QWORD PTR [rsp+0xe8],rax
   3bba3:	xor    eax,eax
   3bba5:	cmp    esi,0x1
   3bba8:	je     3c246 <VoronoiWeights+0x6d6>
   3bbae:	movsxd rbx,DWORD PTR [rsp+0x38]
   3bbb3:	mov    r15,rdi
   3bbb6:	lea    rdi,[rbx*8+0x0]
   3bbbe:	call   36b0 <malloc@plt>
   3bbc3:	mov    r14,rax
   3bbc6:	test   rax,rax
   3bbc9:	je     3c28a <VoronoiWeights+0x71a>
   3bbcf:	mov    esi,DWORD PTR [rsp+0x38]
   3bbd3:	lea    rax,[rbx*4+0x0]
   3bbdb:	mov    QWORD PTR [rsp+0x20],rax
   3bbe0:	test   esi,esi
   3bbe2:	jle    3bd4b <VoronoiWeights+0x1db>
   3bbe8:	sub    esi,0x1
   3bbeb:	mov    QWORD PTR [rsp+0x8],r14
   3bbf0:	mov    r13,r14
   3bbf3:	lea    r12,[rip+0x60fa]        # 41cf4 <CSWTCH.18+0x634>
   3bbfa:	mov    DWORD PTR [rsp+0x18],esi
   3bbfe:	lea    rbx,[r14+rsi*8+0x8]
   3bc03:	mov    QWORD PTR [rsp+0x10],rsi
   3bc08:	mov    rbp,rbx
   3bc0b:	mov    rbx,rax
   3bc0e:	xchg   ax,ax
   3bc10:	mov    rdi,rbx
   3bc13:	call   36b0 <malloc@plt>
   3bc18:	mov    QWORD PTR [r13+0x0],rax
   3bc1c:	test   rax,rax
   3bc1f:	je     3c27d <VoronoiWeights+0x70d>
   3bc25:	add    r13,0x8
   3bc29:	cmp    r13,rbp
   3bc2c:	jne    3bc10 <VoronoiWeights+0xa0>
   3bc2e:	mov    r13,QWORD PTR [rsp+0x8]
   3bc33:	xor    ebp,ebp
   3bc35:	mov    QWORD PTR [rsp+0x28],r13
   3bc3a:	nop    WORD PTR [rax+rax*1+0x0]
   3bc40:	cmp    DWORD PTR [rsp+0x38],ebp
   3bc44:	jle    3bca6 <VoronoiWeights+0x136>
   3bc46:	mov    ebx,DWORD PTR [rsp+0x18]
   3bc4a:	mov    rdi,QWORD PTR [r15+rbp*8]
   3bc4e:	lea    r12,[rbp*4+0x0]
   3bc56:	mov    r13,r12
   3bc59:	sub    ebx,ebp
   3bc5b:	mov    rsi,rdi
   3bc5e:	add    rbx,rbp
   3bc61:	lea    rax,[rbx*4+0x0]
   3bc69:	mov    rbx,rbp
   3bc6c:	mov    QWORD PTR [rsp+0x8],rax
   3bc71:	jmp    3bc81 <VoronoiWeights+0x111>
   3bc73:	nop    DWORD PTR [rax+rax*1+0x0]
   3bc78:	mov    rsi,QWORD PTR [r15+r13*2+0x8]
   3bc7d:	add    r13,0x4
   3bc81:	call   3b8a0 <simple_distance>
   3bc86:	mov    rbp,QWORD PTR [r14+r13*2]
   3bc8a:	mov    rax,QWORD PTR [r14+rbx*8]
   3bc8e:	add    rbp,r12
   3bc91:	movss  DWORD PTR [rbp+0x0],xmm0
   3bc96:	movss  DWORD PTR [rax+r13*1],xmm0
   3bc9c:	cmp    r13,QWORD PTR [rsp+0x8]
   3bca1:	jne    3bc78 <VoronoiWeights+0x108>
   3bca3:	mov    rbp,rbx
   3bca6:	lea    rax,[rbp+0x1]
   3bcaa:	cmp    rbp,QWORD PTR [rsp+0x10]
   3bcaf:	je     3bcb6 <VoronoiWeights+0x146>
   3bcb1:	mov    rbp,rax
   3bcb4:	jmp    3bc40 <VoronoiWeights+0xd0>
   3bcb6:	mov    rdx,QWORD PTR [rsp+0x20]
   3bcbb:	mov    esi,0xb8
   3bcc0:	mov    r13,QWORD PTR [rsp+0x28]
   3bcc5:	lea    rdi,[rip+0x74b5]        # 43181 <cof.6115+0x981>
   3bccc:	call   36810 <sre_malloc>
   3bcd1:	movss  xmm7,DWORD PTR [rip+0x16c3]        # 3d39c <_IO_stdin_used+0x39c>
   3bcd9:	mov    rsi,QWORD PTR [rsp+0x10]
   3bcde:	xor    ecx,ecx
   3bce0:	mov    QWORD PTR [rsp+0x48],rax
   3bce5:	movss  xmm2,DWORD PTR [rip+0x1a43]        # 3d730 <_IO_stdin_used+0x730>
   3bced:	mov    rdi,rax
   3bcf0:	movss  DWORD PTR [rsp+0x20],xmm7
   3bcf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3bd00:	movss  xmm0,DWORD PTR [rsp+0x20]
   3bd06:	xor    eax,eax
   3bd08:	jmp    3bd13 <VoronoiWeights+0x1a3>
   3bd0a:	nop    WORD PTR [rax+rax*1+0x0]
   3bd10:	mov    rax,rdx
   3bd13:	cmp    ecx,eax
   3bd15:	je     3bd27 <VoronoiWeights+0x1b7>
   3bd17:	mov    rdx,QWORD PTR [r13+0x0]
   3bd1b:	movss  xmm1,DWORD PTR [rdx+rax*4]
   3bd20:	minss  xmm1,xmm0
   3bd24:	movaps xmm0,xmm1
   3bd27:	lea    rdx,[rax+0x1]
   3bd2b:	cmp    rax,rsi
   3bd2e:	jne    3bd10 <VoronoiWeights+0x1a0>
   3bd30:	mulss  xmm0,xmm2
   3bd34:	lea    rax,[rcx+0x1]
   3bd38:	add    r13,0x8
   3bd3c:	movss  DWORD PTR [rdi+rcx*4],xmm0
   3bd41:	cmp    rcx,rsi
   3bd44:	je     3bd66 <VoronoiWeights+0x1f6>
   3bd46:	mov    rcx,rax
   3bd49:	jmp    3bd00 <VoronoiWeights+0x190>
   3bd4b:	mov    rdx,QWORD PTR [rsp+0x20]
   3bd50:	mov    esi,0xb8
   3bd55:	lea    rdi,[rip+0x7425]        # 43181 <cof.6115+0x981>
   3bd5c:	call   36810 <sre_malloc>
   3bd61:	mov    QWORD PTR [rsp+0x48],rax
   3bd66:	mov    esi,DWORD PTR [rsp+0x38]
   3bd6a:	mov    rdi,r14
   3bd6d:	call   368c0 <Free2DArray>
   3bd72:	movsxd rbx,DWORD PTR [rsp+0x58]
   3bd77:	mov    esi,0xc6
   3bd7c:	lea    rdi,[rip+0x73fe]        # 43181 <cof.6115+0x981>
   3bd83:	lea    rdx,[rbx*8+0x0]
   3bd8b:	mov    QWORD PTR [rsp+0x20],rbx
   3bd90:	call   36810 <sre_malloc>
   3bd95:	lea    rdx,[rbx*4+0x0]
   3bd9d:	mov    esi,0xc7
   3bda2:	lea    rdi,[rip+0x73d8]        # 43181 <cof.6115+0x981>
   3bda9:	mov    QWORD PTR [rsp+0x30],rax
   3bdae:	call   36810 <sre_malloc>
   3bdb3:	mov    QWORD PTR [rsp+0x50],rax
   3bdb8:	test   ebx,ebx
   3bdba:	jle    3bf7f <VoronoiWeights+0x40f>
   3bdc0:	mov    eax,DWORD PTR [rsp+0x58]
   3bdc4:	mov    r13,QWORD PTR [rsp+0x30]
   3bdc9:	lea    rbx,[rip+0x73b1]        # 43181 <cof.6115+0x981>
   3bdd0:	sub    eax,0x1
   3bdd3:	mov    r12,r13
   3bdd6:	mov    QWORD PTR [rsp+0x10],rax
   3bddb:	lea    rbp,[r13+rax*8+0x8]
   3bde0:	mov    edx,0x1b
   3bde5:	mov    esi,0xc9
   3bdea:	mov    rdi,rbx
   3bded:	add    r13,0x8
   3bdf1:	call   36810 <sre_malloc>
   3bdf6:	mov    QWORD PTR [r13-0x8],rax
   3bdfa:	cmp    rbp,r13
   3bdfd:	jne    3bde0 <VoronoiWeights+0x270>
   3bdff:	mov    eax,DWORD PTR [rsp+0x38]
   3be03:	xor    r14d,r14d
   3be06:	lea    r13,[rsp+0x70]
   3be0b:	mov    rbp,r12
   3be0e:	mov    rbx,QWORD PTR [rsp+0x50]
   3be13:	mov    QWORD PTR [rsp+0x18],r15
   3be18:	mov    r12,r14
   3be1b:	mov    r14,r13
   3be1e:	movabs rsi,0x8000000000006001
   3be28:	sub    eax,0x1
   3be2b:	lea    rdx,[r15+rax*8+0x8]
   3be30:	mov    r15,rdx
   3be33:	nop    DWORD PTR [rax+rax*1+0x0]
   3be38:	mov    ecx,0xd
   3be3d:	mov    rdi,r14
   3be40:	xor    eax,eax
   3be42:	rep stos QWORD PTR es:[rdi],rax
   3be45:	mov    DWORD PTR [rdi],0x0
   3be4b:	mov    edi,DWORD PTR [rsp+0x38]
   3be4f:	test   edi,edi
   3be51:	jle    3c23c <VoronoiWeights+0x6cc>
   3be57:	mov    QWORD PTR [rsp+0x8],rbx
   3be5c:	mov    r13,QWORD PTR [rsp+0x18]
   3be61:	mov    rbx,r15
   3be64:	mov    r15,r12
   3be67:	jmp    3be84 <VoronoiWeights+0x314>
   3be69:	nop    DWORD PTR [rax+0x0]
   3be70:	mov    DWORD PTR [rsp+0xd8],0x1
   3be7b:	add    r13,0x8
   3be7f:	cmp    rbx,r13
   3be82:	je     3bf00 <VoronoiWeights+0x390>
   3be84:	mov    rax,QWORD PTR [r13+0x0]
   3be88:	movzx  r12d,BYTE PTR [rax+r15*1]
   3be8d:	mov    eax,0x1
   3be92:	lea    ecx,[r12-0x20]
   3be97:	cmp    cl,0x3f
   3be9a:	ja     3bea8 <VoronoiWeights+0x338>
   3be9c:	mov    rax,rsi
   3be9f:	shr    rax,cl
   3bea2:	not    rax
   3bea5:	and    eax,0x1
   3bea8:	cmp    r12b,0x7e
   3beac:	je     3be70 <VoronoiWeights+0x300>
   3beae:	test   al,al
   3beb0:	je     3be70 <VoronoiWeights+0x300>
   3beb2:	call   3820 <__ctype_b_loc@plt>
   3beb7:	movsx  ecx,r12b
   3bebb:	movabs rsi,0x8000000000006001
   3bec5:	mov    r8,rax
   3bec8:	movsx  rax,r12b
   3becc:	lea    edi,[rcx-0x41]
   3becf:	sub    ecx,0x61
   3bed2:	mov    r8,QWORD PTR [r8]
   3bed5:	test   BYTE PTR [r8+rax*2+0x1],0x1
   3bedb:	cmovne ecx,edi
   3bede:	cmp    ecx,0x19
   3bee1:	ja     3be7b <VoronoiWeights+0x30b>
   3bee3:	movsxd rcx,ecx
   3bee6:	add    r13,0x8
   3beea:	mov    DWORD PTR [rsp+rcx*4+0x70],0x1
   3bef2:	cmp    rbx,r13
   3bef5:	jne    3be84 <VoronoiWeights+0x314>
   3bef7:	nop    WORD PTR [rax+rax*1+0x0]
   3bf00:	mov    r12,r15
   3bf03:	mov    r11d,DWORD PTR [rsp+0xd8]
   3bf0b:	mov    r15,rbx
   3bf0e:	mov    ecx,DWORD PTR [rsp+0x70]
   3bf12:	mov    rbx,QWORD PTR [rsp+0x8]
   3bf17:	mov    DWORD PTR [rbx],0x0
   3bf1d:	xor    eax,eax
   3bf1f:	jmp    3bf2c <VoronoiWeights+0x3bc>
   3bf21:	nop    DWORD PTR [rax+0x0]
   3bf28:	mov    ecx,DWORD PTR [r14+rax*4]
   3bf2c:	test   ecx,ecx
   3bf2e:	je     3bf41 <VoronoiWeights+0x3d1>
   3bf30:	movsxd rdx,DWORD PTR [rbx]
   3bf33:	mov    rcx,QWORD PTR [rbp+0x0]
   3bf37:	lea    edi,[rax+0x41]
   3bf3a:	mov    BYTE PTR [rcx+rdx*1],dil
   3bf3e:	add    DWORD PTR [rbx],0x1
   3bf41:	add    rax,0x1
   3bf45:	cmp    rax,0x1a
   3bf49:	jne    3bf28 <VoronoiWeights+0x3b8>
   3bf4b:	test   r11d,r11d
   3bf4e:	je     3bf5e <VoronoiWeights+0x3ee>
   3bf50:	movsxd rax,DWORD PTR [rbx]
   3bf53:	mov    rcx,QWORD PTR [rbp+0x0]
   3bf57:	mov    BYTE PTR [rcx+rax*1],0x20
   3bf5b:	add    DWORD PTR [rbx],0x1
   3bf5e:	lea    rax,[r12+0x1]
   3bf63:	add    rbp,0x8
   3bf67:	add    rbx,0x4
   3bf6b:	cmp    r12,QWORD PTR [rsp+0x10]
   3bf70:	je     3bf7a <VoronoiWeights+0x40a>
   3bf72:	mov    r12,rax
   3bf75:	jmp    3be38 <VoronoiWeights+0x2c8>
   3bf7a:	mov    r15,QWORD PTR [rsp+0x18]
   3bf7f:	mov    ebx,DWORD PTR [rsp+0x58]
   3bf83:	mov    esi,0x10c
   3bf88:	lea    rdi,[rip+0x71f2]        # 43181 <cof.6115+0x981>
   3bf8f:	lea    edx,[rbx+0x1]
   3bf92:	movsxd rdx,edx
   3bf95:	call   36810 <sre_malloc>
   3bf9a:	mov    r14d,DWORD PTR [rsp+0x38]
   3bf9f:	mov    rdi,QWORD PTR [rsp+0x40]
   3bfa4:	pxor   xmm0,xmm0
   3bfa8:	mov    rbp,rax
   3bfab:	mov    esi,r14d
   3bfae:	call   3ad60 <FSet>
   3bfb3:	imul   eax,r14d,0x32
   3bfb7:	mov    DWORD PTR [rsp+0x5c],eax
   3bfbb:	test   eax,eax
   3bfbd:	jle    3c172 <VoronoiWeights+0x602>
   3bfc3:	mov    rax,QWORD PTR [rsp+0x20]
   3bfc8:	mov    esi,ebx
   3bfca:	movss  xmm7,DWORD PTR [rip+0x13ca]        # 3d39c <_IO_stdin_used+0x39c>
   3bfd2:	mov    DWORD PTR [rsp+0x28],0x0
   3bfda:	lea    r13d,[rsi-0x1]
   3bfde:	add    rax,rbp
   3bfe1:	test   ebx,ebx
   3bfe3:	mov    QWORD PTR [rsp+0x68],r13
   3bfe8:	mov    ebx,0x2a
   3bfed:	cmovle rax,rbp
   3bff1:	movss  DWORD PTR [rsp+0x20],xmm7
   3bff7:	mov    QWORD PTR [rsp+0x60],rax
   3bffc:	nop    DWORD PTR [rax+0x0]
   3c000:	mov    edx,DWORD PTR [rsp+0x58]
   3c004:	xor    r13d,r13d
   3c007:	test   edx,edx
   3c009:	jle    3c07e <VoronoiWeights+0x50e>
   3c00b:	mov    DWORD PTR [rsp+0x8],ebx
   3c00f:	mov    r12,rbp
   3c012:	mov    rbx,QWORD PTR [rsp+0x68]
   3c017:	mov    rbp,QWORD PTR [rsp+0x50]
   3c01c:	jmp    3c030 <VoronoiWeights+0x4c0>
   3c01e:	xchg   ax,ax
   3c020:	mov    BYTE PTR [r12+r13*1],al
   3c024:	lea    rax,[r13+0x1]
   3c028:	cmp    rbx,r13
   3c02b:	je     3c077 <VoronoiWeights+0x507>
   3c02d:	mov    r13,rax
   3c030:	mov    ecx,DWORD PTR [rbp+r13*4+0x0]
   3c035:	mov    eax,0x20
   3c03a:	test   ecx,ecx
   3c03c:	je     3c020 <VoronoiWeights+0x4b0>
   3c03e:	mov    rax,QWORD PTR [rsp+0x30]
   3c043:	mov    r14,QWORD PTR [rax+r13*8]
   3c047:	call   36060 <sre_random>
   3c04c:	movapd xmm1,xmm0
   3c050:	pxor   xmm0,xmm0
   3c054:	cvtsi2sd xmm0,DWORD PTR [rbp+r13*4+0x0]
   3c05b:	mulsd  xmm0,xmm1
   3c05f:	cvttsd2si eax,xmm0
   3c063:	cdqe   
   3c065:	movzx  eax,BYTE PTR [r14+rax*1]
   3c06a:	mov    BYTE PTR [r12+r13*1],al
   3c06e:	lea    rax,[r13+0x1]
   3c072:	cmp    rbx,r13
   3c075:	jne    3c02d <VoronoiWeights+0x4bd>
   3c077:	mov    ebx,DWORD PTR [rsp+0x8]
   3c07b:	mov    rbp,r12
   3c07e:	mov    rax,QWORD PTR [rsp+0x60]
   3c083:	mov    BYTE PTR [rax],0x0
   3c086:	call   36060 <sre_random>
   3c08b:	mov    eax,DWORD PTR [rsp+0x38]
   3c08f:	pxor   xmm7,xmm7
   3c093:	cvtsd2ss xmm7,xmm0
   3c097:	movss  DWORD PTR [rsp+0x10],xmm7
   3c09d:	test   eax,eax
   3c09f:	jle    3c271 <VoronoiWeights+0x701>
   3c0a5:	movss  xmm2,DWORD PTR [rsp+0x20]
   3c0ab:	xor    r13d,r13d
   3c0ae:	sub    eax,0x1
   3c0b1:	mov    DWORD PTR [rsp+0x18],ebx
   3c0b5:	mov    r12,r13
   3c0b8:	mov    r14,QWORD PTR [rsp+0x48]
   3c0bd:	mov    r13,rax
   3c0c0:	movss  DWORD PTR [rsp+0x8],xmm2
   3c0c6:	jmp    3c0e8 <VoronoiWeights+0x578>
   3c0c8:	nop    DWORD PTR [rax+rax*1+0x0]
   3c0d0:	ucomiss xmm1,DWORD PTR [rsp+0x8]
   3c0d5:	jnp    3c200 <VoronoiWeights+0x690>
   3c0db:	lea    rdx,[r12+0x1]
   3c0e0:	cmp    r13,r12
   3c0e3:	je     3c140 <VoronoiWeights+0x5d0>
   3c0e5:	mov    r12,rdx
   3c0e8:	mov    rdi,QWORD PTR [r15+r12*8]
   3c0ec:	mov    rsi,rbp
   3c0ef:	mov    ebx,r12d
   3c0f2:	call   3b8a0 <simple_distance>
   3c0f7:	lea    rdx,[r12*4+0x0]
   3c0ff:	movaps xmm1,xmm0
   3c102:	movss  xmm0,DWORD PTR [r14+r12*4]
   3c108:	comiss xmm0,xmm1
   3c10b:	ja     3c14c <VoronoiWeights+0x5dc>
   3c10d:	movss  xmm3,DWORD PTR [rsp+0x8]
   3c113:	comiss xmm3,xmm1
   3c116:	jbe    3c0d0 <VoronoiWeights+0x560>
   3c118:	movss  DWORD PTR [rsp+0x8],xmm1
   3c11e:	call   36060 <sre_random>
   3c123:	pxor   xmm5,xmm5
   3c127:	mov    DWORD PTR [rsp+0x18],r12d
   3c12c:	lea    rdx,[r12+0x1]
   3c131:	cvtsd2ss xmm5,xmm0
   3c135:	movss  DWORD PTR [rsp+0x10],xmm5
   3c13b:	cmp    r13,r12
   3c13e:	jne    3c0e5 <VoronoiWeights+0x575>
   3c140:	movsxd rdx,DWORD PTR [rsp+0x18]
   3c145:	mov    rbx,rdx
   3c148:	shl    rdx,0x2
   3c14c:	add    rdx,QWORD PTR [rsp+0x40]
   3c151:	movss  xmm0,DWORD PTR [rsp+0x20]
   3c157:	addss  xmm0,DWORD PTR [rdx]
   3c15b:	add    DWORD PTR [rsp+0x28],0x1
   3c160:	mov    eax,DWORD PTR [rsp+0x28]
   3c164:	movss  DWORD PTR [rdx],xmm0
   3c168:	cmp    DWORD PTR [rsp+0x5c],eax
   3c16c:	jne    3c000 <VoronoiWeights+0x490>
   3c172:	mov    eax,DWORD PTR [rsp+0x38]
   3c176:	test   eax,eax
   3c178:	jle    3c1ae <VoronoiWeights+0x63e>
   3c17a:	mov    eax,DWORD PTR [rsp+0x38]
   3c17e:	mov    rcx,QWORD PTR [rsp+0x40]
   3c183:	movss  xmm1,DWORD PTR [rip+0x2bb9]        # 3ed44 <_IO_stdin_used+0x1d44>
   3c18b:	sub    eax,0x1
   3c18e:	lea    rax,[rcx+rax*4+0x4]
   3c193:	nop    DWORD PTR [rax+rax*1+0x0]
   3c198:	movss  xmm0,DWORD PTR [rcx]
   3c19c:	add    rcx,0x4
   3c1a0:	divss  xmm0,xmm1
   3c1a4:	movss  DWORD PTR [rcx-0x4],xmm0
   3c1a9:	cmp    rax,rcx
   3c1ac:	jne    3c198 <VoronoiWeights+0x628>
   3c1ae:	mov    rdi,rbp
   3c1b1:	call   3460 <free@plt>
   3c1b6:	mov    rdi,QWORD PTR [rsp+0x50]
   3c1bb:	call   3460 <free@plt>
   3c1c0:	mov    rdi,QWORD PTR [rsp+0x48]
   3c1c5:	call   3460 <free@plt>
   3c1ca:	mov    rax,QWORD PTR [rsp+0xe8]
   3c1d2:	xor    rax,QWORD PTR fs:0x28
   3c1db:	jne    3c29d <VoronoiWeights+0x72d>
   3c1e1:	mov    esi,DWORD PTR [rsp+0x58]
   3c1e5:	mov    rdi,QWORD PTR [rsp+0x30]
   3c1ea:	add    rsp,0xf8
   3c1f1:	pop    rbx
   3c1f2:	pop    rbp
   3c1f3:	pop    r12
   3c1f5:	pop    r13
   3c1f7:	pop    r14
   3c1f9:	pop    r15
   3c1fb:	jmp    368c0 <Free2DArray>
   3c200:	movss  DWORD PTR [rsp+0x3c],xmm1
   3c206:	jne    3c0db <VoronoiWeights+0x56b>
   3c20c:	call   36060 <sre_random>
   3c211:	cvtsd2ss xmm0,xmm0
   3c215:	comiss xmm0,DWORD PTR [rsp+0x10]
   3c21a:	jbe    3c0db <VoronoiWeights+0x56b>
   3c220:	movss  xmm1,DWORD PTR [rsp+0x3c]
   3c226:	mov    DWORD PTR [rsp+0x18],r12d
   3c22b:	movss  DWORD PTR [rsp+0x10],xmm0
   3c231:	movss  DWORD PTR [rsp+0x8],xmm1
   3c237:	jmp    3c0db <VoronoiWeights+0x56b>
   3c23c:	xor    ecx,ecx
   3c23e:	xor    r11d,r11d
   3c241:	jmp    3bf17 <VoronoiWeights+0x3a7>
   3c246:	mov    DWORD PTR [rcx],0x3f800000
   3c24c:	mov    rax,QWORD PTR [rsp+0xe8]
   3c254:	xor    rax,QWORD PTR fs:0x28
   3c25d:	jne    3c29d <VoronoiWeights+0x72d>
   3c25f:	add    rsp,0xf8
   3c266:	pop    rbx
   3c267:	pop    rbp
   3c268:	pop    r12
   3c26a:	pop    r13
   3c26c:	pop    r14
   3c26e:	pop    r15
   3c270:	ret    
   3c271:	movsxd rdx,ebx
   3c274:	shl    rdx,0x2
   3c278:	jmp    3c14c <VoronoiWeights+0x5dc>
   3c27d:	mov    rdi,r12
   3c280:	call   317f0 <Die>
   3c285:	jmp    3bc25 <VoronoiWeights+0xb5>
   3c28a:	lea    rdi,[rip+0x5a63]        # 41cf4 <CSWTCH.18+0x634>
   3c291:	xor    eax,eax
   3c293:	call   317f0 <Die>
   3c298:	jmp    3bbcf <VoronoiWeights+0x5f>
   3c29d:	call   3570 <__stack_chk_fail@plt>
   3c2a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3c2ad:	nop    DWORD PTR [rax]

000000000003c2b0 <PositionBasedWeights>:
   3c2b0:	endbr64 
   3c2b4:	push   r15
   3c2b6:	pxor   xmm0,xmm0
   3c2ba:	push   r14
   3c2bc:	push   r13
   3c2be:	push   r12
   3c2c0:	push   rbp
   3c2c1:	push   rbx
   3c2c2:	mov    ebx,edx
   3c2c4:	sub    rsp,0xb8
   3c2cb:	mov    QWORD PTR [rsp+0x20],rdi
   3c2d0:	mov    rdi,rcx
   3c2d3:	mov    DWORD PTR [rsp+0x1c],esi
   3c2d7:	mov    QWORD PTR [rsp+0x28],rcx
   3c2dc:	mov    rax,QWORD PTR fs:0x28
   3c2e5:	mov    QWORD PTR [rsp+0xa8],rax
   3c2ed:	xor    eax,eax
   3c2ef:	call   3ad60 <FSet>
   3c2f4:	test   ebx,ebx
   3c2f6:	jle    3c471 <PositionBasedWeights+0x1c1>
   3c2fc:	lea    eax,[rbx-0x1]
   3c2ff:	mov    rsi,QWORD PTR [rsp+0x20]
   3c304:	xor    ebx,ebx
   3c306:	lea    r15,[rsp+0xa8]
   3c30e:	mov    QWORD PTR [rsp+0x30],rax
   3c313:	mov    eax,DWORD PTR [rsp+0x1c]
   3c317:	sub    eax,0x1
   3c31a:	lea    rbp,[rsi+rax*8+0x8]
   3c31f:	lea    rax,[rsp+0x40]
   3c324:	mov    QWORD PTR [rsp+0x38],rax
   3c329:	nop    DWORD PTR [rax+0x0]
   3c330:	mov    rax,QWORD PTR [rsp+0x38]
   3c335:	mov    r12,rax
   3c338:	nop    DWORD PTR [rax+rax*1+0x0]
   3c340:	mov    DWORD PTR [rax],0x0
   3c346:	add    rax,0x4
   3c34a:	cmp    rax,r15
   3c34d:	jne    3c340 <PositionBasedWeights+0x90>
   3c34f:	mov    ecx,DWORD PTR [rsp+0x1c]
   3c353:	test   ecx,ecx
   3c355:	jle    3c3a1 <PositionBasedWeights+0xf1>
   3c357:	call   3820 <__ctype_b_loc@plt>
   3c35c:	mov    r13,QWORD PTR [rsp+0x20]
   3c361:	mov    r14,QWORD PTR [rax]
   3c364:	nop    DWORD PTR [rax+0x0]
   3c368:	mov    rax,QWORD PTR [r13+0x0]
   3c36c:	movsx  rdi,BYTE PTR [rax+rbx*1]
   3c371:	test   BYTE PTR [r14+rdi*2+0x1],0x4
   3c377:	mov    QWORD PTR [rsp+0x8],rdi
   3c37c:	je     3c398 <PositionBasedWeights+0xe8>
   3c37e:	call   3440 <__ctype_toupper_loc@plt>
   3c383:	mov    rdi,QWORD PTR [rsp+0x8]
   3c388:	mov    rax,QWORD PTR [rax]
   3c38b:	mov    eax,DWORD PTR [rax+rdi*4]
   3c38e:	sub    eax,0x41
   3c391:	cdqe   
   3c393:	add    DWORD PTR [rsp+rax*4+0x40],0x1
   3c398:	add    r13,0x8
   3c39c:	cmp    rbp,r13
   3c39f:	jne    3c368 <PositionBasedWeights+0xb8>
   3c3a1:	xor    r13d,r13d
   3c3a4:	nop    DWORD PTR [rax+0x0]
   3c3a8:	mov    edx,DWORD PTR [r12]
   3c3ac:	xor    eax,eax
   3c3ae:	test   edx,edx
   3c3b0:	setg   al
   3c3b3:	add    r12,0x4
   3c3b7:	add    r13d,eax
   3c3ba:	cmp    r12,r15
   3c3bd:	jne    3c3a8 <PositionBasedWeights+0xf8>
   3c3bf:	mov    eax,DWORD PTR [rsp+0x1c]
   3c3c3:	test   eax,eax
   3c3c5:	jle    3c45e <PositionBasedWeights+0x1ae>
   3c3cb:	call   3820 <__ctype_b_loc@plt>
   3c3d0:	mov    r12,QWORD PTR [rsp+0x28]
   3c3d5:	mov    r14,QWORD PTR [rsp+0x20]
   3c3da:	mov    rdx,QWORD PTR [rax]
   3c3dd:	nop    DWORD PTR [rax]
   3c3e0:	mov    rax,QWORD PTR [r14]
   3c3e3:	movsx  r9,BYTE PTR [rax+rbx*1]
   3c3e8:	test   BYTE PTR [rdx+r9*2+0x1],0x4
   3c3ee:	mov    QWORD PTR [rsp+0x8],r9
   3c3f3:	je     3c451 <PositionBasedWeights+0x1a1>
   3c3f5:	mov    QWORD PTR [rsp+0x10],rdx
   3c3fa:	call   3440 <__ctype_toupper_loc@plt>
   3c3ff:	mov    r9,QWORD PTR [rsp+0x8]
   3c404:	pxor   xmm0,xmm0
   3c408:	movsd  xmm2,QWORD PTR [rip+0x19e0]        # 3ddf0 <_IO_stdin_used+0xdf0>
   3c410:	mov    rax,QWORD PTR [rax]
   3c413:	pxor   xmm1,xmm1
   3c417:	mov    rdx,QWORD PTR [rsp+0x10]
   3c41c:	cvtss2sd xmm1,DWORD PTR [r12]
   3c422:	mov    eax,DWORD PTR [rax+r9*4]
   3c426:	sub    eax,0x41
   3c429:	cdqe   
   3c42b:	mov    ecx,DWORD PTR [rsp+rax*4+0x40]
   3c42f:	imul   ecx,r13d
   3c433:	cvtsi2ss xmm0,ecx
   3c437:	cvtss2sd xmm0,xmm0
   3c43b:	divsd  xmm2,xmm0
   3c43f:	movapd xmm0,xmm2
   3c443:	addsd  xmm0,xmm1
   3c447:	cvtsd2ss xmm0,xmm0
   3c44b:	movss  DWORD PTR [r12],xmm0
   3c451:	add    r14,0x8
   3c455:	add    r12,0x4
   3c459:	cmp    r14,rbp
   3c45c:	jne    3c3e0 <PositionBasedWeights+0x130>
   3c45e:	lea    rax,[rbx+0x1]
   3c462:	cmp    rbx,QWORD PTR [rsp+0x30]
   3c467:	je     3c471 <PositionBasedWeights+0x1c1>
   3c469:	mov    rbx,rax
   3c46c:	jmp    3c330 <PositionBasedWeights+0x80>
   3c471:	mov    esi,DWORD PTR [rsp+0x1c]
   3c475:	test   esi,esi
   3c477:	jle    3c4bc <PositionBasedWeights+0x20c>
   3c479:	mov    eax,DWORD PTR [rsp+0x1c]
   3c47d:	mov    r12,QWORD PTR [rsp+0x20]
   3c482:	mov    rbx,QWORD PTR [rsp+0x28]
   3c487:	sub    eax,0x1
   3c48a:	lea    rbp,[r12+rax*8+0x8]
   3c48f:	nop
   3c490:	mov    rdi,QWORD PTR [r12]
   3c494:	add    r12,0x8
   3c498:	add    rbx,0x4
   3c49c:	call   25030 <DealignedLength>
   3c4a1:	pxor   xmm1,xmm1
   3c4a5:	movss  xmm0,DWORD PTR [rbx-0x4]
   3c4aa:	cvtsi2ss xmm1,eax
   3c4ae:	divss  xmm0,xmm1
   3c4b2:	movss  DWORD PTR [rbx-0x4],xmm0
   3c4b7:	cmp    rbp,r12
   3c4ba:	jne    3c490 <PositionBasedWeights+0x1e0>
   3c4bc:	mov    esi,DWORD PTR [rsp+0x1c]
   3c4c0:	mov    rdi,QWORD PTR [rsp+0x28]
   3c4c5:	call   3ae20 <FSum>
   3c4ca:	mov    rax,QWORD PTR [rsp+0xa8]
   3c4d2:	xor    rax,QWORD PTR fs:0x28
   3c4db:	movaps xmm1,xmm0
   3c4de:	jne    3c50b <PositionBasedWeights+0x25b>
   3c4e0:	mov    esi,DWORD PTR [rsp+0x1c]
   3c4e4:	pxor   xmm0,xmm0
   3c4e8:	mov    rdi,QWORD PTR [rsp+0x28]
   3c4ed:	add    rsp,0xb8
   3c4f4:	pop    rbx
   3c4f5:	pop    rbp
   3c4f6:	cvtsi2ss xmm0,esi
   3c4fa:	pop    r12
   3c4fc:	pop    r13
   3c4fe:	pop    r14
   3c500:	pop    r15
   3c502:	divss  xmm0,xmm1
   3c506:	jmp    3adb0 <FScale>
   3c50b:	call   3570 <__stack_chk_fail@plt>

000000000003c510 <FilterAlignment>:
   3c510:	endbr64 
   3c514:	push   r15
   3c516:	mov    r15,rdi
   3c519:	push   r14
   3c51b:	push   r13
   3c51d:	push   r12
   3c51f:	push   rbp
   3c520:	push   rbx
   3c521:	sub    rsp,0x38
   3c525:	movsxd rdx,DWORD PTR [rdi+0x1c]
   3c529:	lea    rdi,[rip+0x6c51]        # 43181 <cof.6115+0x981>
   3c530:	mov    QWORD PTR [rsp+0x28],rsi
   3c535:	mov    esi,0x214
   3c53a:	shl    rdx,0x2
   3c53e:	movss  DWORD PTR [rsp+0x18],xmm0
   3c544:	call   36810 <sre_malloc>
   3c549:	movsxd rdx,DWORD PTR [r15+0x1c]
   3c54d:	mov    esi,0x215
   3c552:	lea    rdi,[rip+0x6c28]        # 43181 <cof.6115+0x981>
   3c559:	mov    QWORD PTR [rsp+0x8],rax
   3c55e:	shl    rdx,0x2
   3c562:	call   36810 <sre_malloc>
   3c567:	mov    QWORD PTR [rsp+0x10],rax
   3c56c:	mov    eax,DWORD PTR [r15+0x1c]
   3c570:	test   eax,eax
   3c572:	jle    3c646 <FilterAlignment+0x136>
   3c578:	xor    eax,eax
   3c57a:	nop    WORD PTR [rax+rax*1+0x0]
   3c580:	mov    rbx,QWORD PTR [rsp+0x10]
   3c585:	mov    DWORD PTR [rbx+rax*4],0x0
   3c58c:	mov    edx,DWORD PTR [r15+0x1c]
   3c590:	add    rax,0x1
   3c594:	cmp    edx,eax
   3c596:	jg     3c580 <FilterAlignment+0x70>
   3c598:	test   edx,edx
   3c59a:	jle    3c646 <FilterAlignment+0x136>
   3c5a0:	mov    rax,QWORD PTR [rsp+0x8]
   3c5a5:	xor    r12d,r12d
   3c5a8:	xor    r13d,r13d
   3c5ab:	add    rax,0x4
   3c5af:	mov    QWORD PTR [rsp+0x20],rax
   3c5b4:	nop    DWORD PTR [rax+0x0]
   3c5b8:	mov    DWORD PTR [rsp+0x1c],r12d
   3c5bd:	test   r13d,r13d
   3c5c0:	je     3c680 <FilterAlignment+0x170>
   3c5c6:	mov    rax,QWORD PTR [rsp+0x20]
   3c5cb:	lea    edx,[r13-0x1]
   3c5cf:	mov    r14,QWORD PTR [rsp+0x8]
   3c5d4:	lea    rbx,[r12*8+0x0]
   3c5dc:	lea    rbp,[rax+rdx*4]
   3c5e0:	jmp    3c5f5 <FilterAlignment+0xe5>
   3c5e2:	nop    WORD PTR [rax+rax*1+0x0]
   3c5e8:	add    r14,0x4
   3c5ec:	cmp    rbp,r14
   3c5ef:	je     3c680 <FilterAlignment+0x170>
   3c5f5:	mov    rdx,QWORD PTR [r15]
   3c5f8:	movsxd rcx,DWORD PTR [r14]
   3c5fb:	mov    rdi,QWORD PTR [rdx+rbx*1]
   3c5ff:	mov    rsi,QWORD PTR [rdx+rcx*8]
   3c603:	call   24450 <PairwiseIdentity>
   3c608:	comiss xmm0,DWORD PTR [rsp+0x18]
   3c60d:	jbe    3c5e8 <FilterAlignment+0xd8>
   3c60f:	mov    rdx,QWORD PTR [r15+0x8]
   3c613:	movsxd rax,DWORD PTR [r14]
   3c616:	lea    rsi,[rip+0x6b7b]        # 43198 <cof.6115+0x998>
   3c61d:	mov    edi,0x1
   3c622:	cvtss2sd xmm0,xmm0
   3c626:	mov    rcx,QWORD PTR [rdx+rax*8]
   3c62a:	mov    rdx,QWORD PTR [rdx+rbx*1]
   3c62e:	mov    eax,0x1
   3c633:	call   3710 <__printf_chk@plt>
   3c638:	add    r12,0x1
   3c63c:	cmp    DWORD PTR [r15+0x1c],r12d
   3c640:	jg     3c5b8 <FilterAlignment+0xa8>
   3c646:	mov    rbx,QWORD PTR [rsp+0x10]
   3c64b:	mov    rdx,QWORD PTR [rsp+0x28]
   3c650:	mov    rdi,r15
   3c653:	mov    rsi,rbx
   3c656:	call   2cf90 <MSASmallerAlignment>
   3c65b:	mov    rdi,QWORD PTR [rsp+0x8]
   3c660:	call   3460 <free@plt>
   3c665:	add    rsp,0x38
   3c669:	mov    rdi,rbx
   3c66c:	pop    rbx
   3c66d:	pop    rbp
   3c66e:	pop    r12
   3c670:	pop    r13
   3c672:	pop    r14
   3c674:	pop    r15
   3c676:	jmp    3460 <free@plt>
   3c67b:	nop    DWORD PTR [rax+rax*1+0x0]
   3c680:	mov    rbx,QWORD PTR [rsp+0x8]
   3c685:	mov    ecx,DWORD PTR [rsp+0x1c]
   3c689:	movsxd rax,r13d
   3c68c:	add    r13d,0x1
   3c690:	mov    DWORD PTR [rbx+rax*4],ecx
   3c693:	mov    rax,QWORD PTR [rsp+0x10]
   3c698:	mov    DWORD PTR [rax+r12*4],0x1
   3c6a0:	jmp    3c638 <FilterAlignment+0x128>
   3c6a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3c6ad:	nop    DWORD PTR [rax]

000000000003c6b0 <SampleAlignment>:
   3c6b0:	endbr64 
   3c6b4:	push   r15
   3c6b6:	push   r14
   3c6b8:	push   r13
   3c6ba:	push   r12
   3c6bc:	mov    r12,rdi
   3c6bf:	push   rbp
   3c6c0:	push   rbx
   3c6c1:	mov    ebx,esi
   3c6c3:	mov    esi,0x254
   3c6c8:	sub    rsp,0x18
   3c6cc:	mov    QWORD PTR [rsp+0x8],rdx
   3c6d1:	movsxd rdx,DWORD PTR [rdi+0x1c]
   3c6d5:	lea    rdi,[rip+0x6aa5]        # 43181 <cof.6115+0x981>
   3c6dc:	shl    rdx,0x2
   3c6e0:	call   36810 <sre_malloc>
   3c6e5:	movsxd rdx,DWORD PTR [r12+0x1c]
   3c6ea:	mov    esi,0x255
   3c6ef:	lea    rdi,[rip+0x6a8b]        # 43181 <cof.6115+0x981>
   3c6f6:	mov    rbp,rax
   3c6f9:	shl    rdx,0x2
   3c6fd:	call   36810 <sre_malloc>
   3c702:	movsxd r15,DWORD PTR [r12+0x1c]
   3c707:	mov    r14,rax
   3c70a:	test   r15d,r15d
   3c70d:	jle    3c732 <SampleAlignment+0x82>
   3c70f:	xor    eax,eax
   3c711:	nop    DWORD PTR [rax+0x0]
   3c718:	mov    DWORD PTR [rbp+rax*4+0x0],eax
   3c71c:	mov    DWORD PTR [r14+rax*4],0x0
   3c724:	movsxd r15,DWORD PTR [r12+0x1c]
   3c729:	add    rax,0x1
   3c72d:	cmp    r15d,eax
   3c730:	jg     3c718 <SampleAlignment+0x68>
   3c732:	cmp    ebx,r15d
   3c735:	cmovg  ebx,r15d
   3c739:	test   ebx,ebx
   3c73b:	jle    3c7b2 <SampleAlignment+0x102>
   3c73d:	lea    r13,[r15-0x1]
   3c741:	lea    eax,[rbx-0x1]
   3c744:	mov    rsi,r13
   3c747:	sub    rsi,rax
   3c74a:	mov    QWORD PTR [rsp],rsi
   3c74e:	jmp    3c754 <SampleAlignment+0xa4>
   3c750:	sub    r13,0x1
   3c754:	call   36060 <sre_random>
   3c759:	lea    rsi,[rip+0x6a2a]        # 4318a <cof.6115+0x98a>
   3c760:	mov    edi,0x1
   3c765:	movapd xmm1,xmm0
   3c769:	pxor   xmm0,xmm0
   3c76d:	cvtsi2sd xmm0,r15d
   3c772:	mulsd  xmm0,xmm1
   3c776:	cvttsd2si eax,xmm0
   3c77a:	cdqe   
   3c77c:	lea    rbx,[rbp+rax*4+0x0]
   3c781:	mov    rax,QWORD PTR [r12+0x8]
   3c786:	movsxd rcx,DWORD PTR [rbx]
   3c789:	mov    rdx,rcx
   3c78c:	mov    rcx,QWORD PTR [rax+rcx*8]
   3c790:	xor    eax,eax
   3c792:	call   3710 <__printf_chk@plt>
   3c797:	movsxd rax,DWORD PTR [rbx]
   3c79a:	mov    DWORD PTR [r14+rax*4],0x1
   3c7a2:	mov    eax,DWORD PTR [rbp+r15*4-0x4]
   3c7a7:	mov    r15,r13
   3c7aa:	mov    DWORD PTR [rbx],eax
   3c7ac:	cmp    r13,QWORD PTR [rsp]
   3c7b0:	jne    3c750 <SampleAlignment+0xa0>
   3c7b2:	mov    rdx,QWORD PTR [rsp+0x8]
   3c7b7:	mov    rsi,r14
   3c7ba:	mov    rdi,r12
   3c7bd:	call   2cf90 <MSASmallerAlignment>
   3c7c2:	mov    rdi,rbp
   3c7c5:	call   3460 <free@plt>
   3c7ca:	add    rsp,0x18
   3c7ce:	mov    rdi,r14
   3c7d1:	pop    rbx
   3c7d2:	pop    rbp
   3c7d3:	pop    r12
   3c7d5:	pop    r13
   3c7d7:	pop    r14
   3c7d9:	pop    r15
   3c7db:	jmp    3460 <free@plt>

000000000003c7e0 <SingleLinkCluster>:
   3c7e0:	endbr64 
   3c7e4:	push   r15
   3c7e6:	push   r14
   3c7e8:	push   r13
   3c7ea:	push   r12
   3c7ec:	mov    r12,rdi
   3c7ef:	lea    rdi,[rip+0x698b]        # 43181 <cof.6115+0x981>
   3c7f6:	push   rbp
   3c7f7:	push   rbx
   3c7f8:	movsxd rbx,esi
   3c7fb:	mov    esi,0x2cc
   3c800:	lea    r14,[rbx*4+0x0]
   3c808:	mov    rdx,r14
   3c80b:	sub    rsp,0x38
   3c80f:	mov    QWORD PTR [rsp+0x20],rcx
   3c814:	mov    QWORD PTR [rsp+0x28],r8
   3c819:	movss  DWORD PTR [rsp+0x1c],xmm0
   3c81f:	call   36810 <sre_malloc>
   3c824:	mov    rdx,r14
   3c827:	mov    esi,0x2cd
   3c82c:	lea    rdi,[rip+0x694e]        # 43181 <cof.6115+0x981>
   3c833:	mov    r15,rax
   3c836:	call   36810 <sre_malloc>
   3c83b:	mov    rdx,r14
   3c83e:	mov    esi,0x2ce
   3c843:	lea    rdi,[rip+0x6937]        # 43181 <cof.6115+0x981>
   3c84a:	mov    QWORD PTR [rsp+0x8],rax
   3c84f:	call   36810 <sre_malloc>
   3c854:	mov    QWORD PTR [rsp+0x10],rax
   3c859:	test   ebx,ebx
   3c85b:	jle    3c944 <SingleLinkCluster+0x164>
   3c861:	lea    esi,[rbx-0x1]
   3c864:	xor    edx,edx
   3c866:	mov    rax,rsi
   3c869:	nop    DWORD PTR [rax+0x0]
   3c870:	mov    rcx,rdx
   3c873:	mov    DWORD PTR [r15+rdx*4],edx
   3c877:	add    rdx,0x1
   3c87b:	cmp    rsi,rcx
   3c87e:	jne    3c870 <SingleLinkCluster+0x90>
   3c880:	mov    DWORD PTR [rsp+0x18],0x0
   3c888:	movsd  xmm3,QWORD PTR [rip+0x1560]        # 3ddf0 <_IO_stdin_used+0xdf0>
   3c890:	movsxd rdx,DWORD PTR [r15+rbx*4-0x4]
   3c895:	mov    ebp,eax
   3c897:	mov    rax,QWORD PTR [rsp+0x8]
   3c89c:	mov    ebx,0x1
   3c8a1:	mov    DWORD PTR [rax],edx
   3c8a3:	nop    DWORD PTR [rax+rax*1+0x0]
   3c8a8:	mov    rax,QWORD PTR [rsp+0x10]
   3c8ad:	mov    edi,DWORD PTR [rsp+0x18]
   3c8b1:	sub    ebx,0x1
   3c8b4:	mov    DWORD PTR [rax+rdx*4],edi
   3c8b7:	mov    eax,ebp
   3c8b9:	sub    eax,0x1
   3c8bc:	js     3c919 <SingleLinkCluster+0x139>
   3c8be:	mov    rdi,QWORD PTR [r12+rdx*8]
   3c8c2:	pxor   xmm2,xmm2
   3c8c6:	movsxd r14,eax
   3c8c9:	cvtss2sd xmm2,DWORD PTR [rsp+0x1c]
   3c8cf:	nop
   3c8d0:	movsxd rcx,DWORD PTR [r15+r14*4]
   3c8d4:	mov    rsi,QWORD PTR [r12+rcx*8]
   3c8d8:	mov    r13,rcx
   3c8db:	call   3b8a0 <simple_distance>
   3c8e0:	movapd xmm1,xmm3
   3c8e4:	cvtss2sd xmm0,xmm0
   3c8e8:	subsd  xmm1,xmm2
   3c8ec:	comisd xmm1,xmm0
   3c8f0:	jb     3c910 <SingleLinkCluster+0x130>
   3c8f2:	movsxd rcx,ebp
   3c8f5:	mov    rax,QWORD PTR [rsp+0x8]
   3c8fa:	sub    ebp,0x1
   3c8fd:	mov    ecx,DWORD PTR [r15+rcx*4-0x4]
   3c902:	mov    DWORD PTR [r15+r14*4],ecx
   3c906:	movsxd rcx,ebx
   3c909:	add    ebx,0x1
   3c90c:	mov    DWORD PTR [rax+rcx*4],r13d
   3c910:	sub    r14,0x1
   3c914:	test   r14d,r14d
   3c917:	jns    3c8d0 <SingleLinkCluster+0xf0>
   3c919:	test   ebx,ebx
   3c91b:	je     3c930 <SingleLinkCluster+0x150>
   3c91d:	mov    rdx,QWORD PTR [rsp+0x8]
   3c922:	movsxd rax,ebx
   3c925:	movsxd rdx,DWORD PTR [rdx+rax*4-0x4]
   3c92a:	jmp    3c8a8 <SingleLinkCluster+0xc8>
   3c92f:	nop
   3c930:	add    DWORD PTR [rsp+0x18],0x1
   3c935:	test   ebp,ebp
   3c937:	jle    3c94c <SingleLinkCluster+0x16c>
   3c939:	movsxd rbx,ebp
   3c93c:	lea    eax,[rbp-0x1]
   3c93f:	jmp    3c890 <SingleLinkCluster+0xb0>
   3c944:	mov    DWORD PTR [rsp+0x18],0x0
   3c94c:	mov    rdi,r15
   3c94f:	call   3460 <free@plt>
   3c954:	mov    rdi,QWORD PTR [rsp+0x8]
   3c959:	call   3460 <free@plt>
   3c95e:	mov    rax,QWORD PTR [rsp+0x20]
   3c963:	mov    rdx,QWORD PTR [rsp+0x10]
   3c968:	mov    QWORD PTR [rax],rdx
   3c96b:	mov    rax,QWORD PTR [rsp+0x28]
   3c970:	mov    edx,DWORD PTR [rsp+0x18]
   3c974:	mov    DWORD PTR [rax],edx
   3c976:	add    rsp,0x38
   3c97a:	pop    rbx
   3c97b:	pop    rbp
   3c97c:	pop    r12
   3c97e:	pop    r13
   3c980:	pop    r14
   3c982:	pop    r15
   3c984:	ret    
   3c985:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003c990 <BlosumWeights>:
   3c990:	endbr64 
   3c994:	push   rbp
   3c995:	mov    ebp,esi
   3c997:	push   rbx
   3c998:	mov    rbx,rcx
   3c99b:	sub    rsp,0x28
   3c99f:	mov    rax,QWORD PTR fs:0x28
   3c9a8:	mov    QWORD PTR [rsp+0x18],rax
   3c9ad:	xor    eax,eax
   3c9af:	lea    rcx,[rsp+0x10]
   3c9b4:	lea    r8,[rsp+0xc]
   3c9b9:	call   3c7e0 <SingleLinkCluster>
   3c9be:	movss  xmm0,DWORD PTR [rip+0x9d6]        # 3d39c <_IO_stdin_used+0x39c>
   3c9c6:	mov    esi,ebp
   3c9c8:	mov    rdi,rbx
   3c9cb:	call   3ad60 <FSet>
   3c9d0:	movsxd rdx,DWORD PTR [rsp+0xc]
   3c9d5:	mov    esi,0x193
   3c9da:	lea    rdi,[rip+0x67a0]        # 43181 <cof.6115+0x981>
   3c9e1:	shl    rdx,0x2
   3c9e5:	call   36810 <sre_malloc>
   3c9ea:	mov    rdi,rax
   3c9ed:	mov    eax,DWORD PTR [rsp+0xc]
   3c9f1:	test   eax,eax
   3c9f3:	jle    3ca11 <BlosumWeights+0x81>
   3c9f5:	xor    eax,eax
   3c9f7:	nop    WORD PTR [rax+rax*1+0x0]
   3ca00:	mov    DWORD PTR [rdi+rax*4],0x0
   3ca07:	add    rax,0x1
   3ca0b:	cmp    DWORD PTR [rsp+0xc],eax
   3ca0f:	jg     3ca00 <BlosumWeights+0x70>
   3ca11:	test   ebp,ebp
   3ca13:	jle    3ca6d <BlosumWeights+0xdd>
   3ca15:	mov    rcx,QWORD PTR [rsp+0x10]
   3ca1a:	lea    esi,[rbp-0x1]
   3ca1d:	mov    rax,rcx
   3ca20:	lea    r8,[rcx+rsi*4+0x4]
   3ca25:	nop    DWORD PTR [rax]
   3ca28:	movsxd rdx,DWORD PTR [rax]
   3ca2b:	add    rax,0x4
   3ca2f:	add    DWORD PTR [rdi+rdx*4],0x1
   3ca33:	cmp    r8,rax
   3ca36:	jne    3ca28 <BlosumWeights+0x98>
   3ca38:	movss  xmm1,DWORD PTR [rip+0x95c]        # 3d39c <_IO_stdin_used+0x39c>
   3ca40:	xor    edx,edx
   3ca42:	nop    WORD PTR [rax+rax*1+0x0]
   3ca48:	movsxd rax,DWORD PTR [rcx+rdx*4]
   3ca4c:	pxor   xmm0,xmm0
   3ca50:	movaps xmm2,xmm1
   3ca53:	cvtsi2ss xmm0,DWORD PTR [rdi+rax*4]
   3ca58:	mov    rax,rdx
   3ca5b:	divss  xmm2,xmm0
   3ca5f:	movss  DWORD PTR [rbx+rdx*4],xmm2
   3ca64:	add    rdx,0x1
   3ca68:	cmp    rax,rsi
   3ca6b:	jne    3ca48 <BlosumWeights+0xb8>
   3ca6d:	call   3460 <free@plt>
   3ca72:	mov    rdi,QWORD PTR [rsp+0x10]
   3ca77:	call   3460 <free@plt>
   3ca7c:	mov    rax,QWORD PTR [rsp+0x18]
   3ca81:	xor    rax,QWORD PTR fs:0x28
   3ca8a:	jne    3ca93 <BlosumWeights+0x103>
   3ca8c:	add    rsp,0x28
   3ca90:	pop    rbx
   3ca91:	pop    rbp
   3ca92:	ret    
   3ca93:	call   3570 <__stack_chk_fail@plt>
   3ca98:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003caa0 <__libc_csu_init>:
   3caa0:	endbr64 
   3caa4:	push   r15
   3caa6:	lea    r15,[rip+0x10103]        # 4cbb0 <__frame_dummy_init_array_entry>
   3caad:	push   r14
   3caaf:	mov    r14,rdx
   3cab2:	push   r13
   3cab4:	mov    r13,rsi
   3cab7:	push   r12
   3cab9:	mov    r12d,edi
   3cabc:	push   rbp
   3cabd:	lea    rbp,[rip+0x100f4]        # 4cbb8 <__do_global_dtors_aux_fini_array_entry>
   3cac4:	push   rbx
   3cac5:	sub    rbp,r15
   3cac8:	sub    rsp,0x8
   3cacc:	call   3000 <_init>
   3cad1:	sar    rbp,0x3
   3cad5:	je     3caf6 <__libc_csu_init+0x56>
   3cad7:	xor    ebx,ebx
   3cad9:	nop    DWORD PTR [rax+0x0]
   3cae0:	mov    rdx,r14
   3cae3:	mov    rsi,r13
   3cae6:	mov    edi,r12d
   3cae9:	call   QWORD PTR [r15+rbx*8]
   3caed:	add    rbx,0x1
   3caf1:	cmp    rbp,rbx
   3caf4:	jne    3cae0 <__libc_csu_init+0x40>
   3caf6:	add    rsp,0x8
   3cafa:	pop    rbx
   3cafb:	pop    rbp
   3cafc:	pop    r12
   3cafe:	pop    r13
   3cb00:	pop    r14
   3cb02:	pop    r15
   3cb04:	ret    
   3cb05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003cb10 <__libc_csu_fini>:
   3cb10:	endbr64 
   3cb14:	ret    

Disassembly of section .fini:

000000000003cb18 <_fini>:
   3cb18:	endbr64 
   3cb1c:	sub    rsp,0x8
   3cb20:	add    rsp,0x8
   3cb24:	ret    
