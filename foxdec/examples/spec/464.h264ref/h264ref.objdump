
h264ref:     file format elf64-x86-64


Disassembly of section .init:

0000000000004000 <_init>:
    4000:	endbr64 
    4004:	sub    rsp,0x8
    4008:	mov    rax,QWORD PTR [rip+0x81fc9]        # 85fd8 <__gmon_start__>
    400f:	test   rax,rax
    4012:	je     4016 <_init+0x16>
    4014:	call   rax
    4016:	add    rsp,0x8
    401a:	ret    

Disassembly of section .plt:

0000000000004020 <.plt>:
    4020:	push   QWORD PTR [rip+0x81e52]        # 85e78 <_GLOBAL_OFFSET_TABLE_+0x8>
    4026:	bnd jmp QWORD PTR [rip+0x81e53]        # 85e80 <_GLOBAL_OFFSET_TABLE_+0x10>
    402d:	nop    DWORD PTR [rax]
    4030:	endbr64 
    4034:	push   0x0
    4039:	bnd jmp 4020 <.plt>
    403f:	nop
    4040:	endbr64 
    4044:	push   0x1
    4049:	bnd jmp 4020 <.plt>
    404f:	nop
    4050:	endbr64 
    4054:	push   0x2
    4059:	bnd jmp 4020 <.plt>
    405f:	nop
    4060:	endbr64 
    4064:	push   0x3
    4069:	bnd jmp 4020 <.plt>
    406f:	nop
    4070:	endbr64 
    4074:	push   0x4
    4079:	bnd jmp 4020 <.plt>
    407f:	nop
    4080:	endbr64 
    4084:	push   0x5
    4089:	bnd jmp 4020 <.plt>
    408f:	nop
    4090:	endbr64 
    4094:	push   0x6
    4099:	bnd jmp 4020 <.plt>
    409f:	nop
    40a0:	endbr64 
    40a4:	push   0x7
    40a9:	bnd jmp 4020 <.plt>
    40af:	nop
    40b0:	endbr64 
    40b4:	push   0x8
    40b9:	bnd jmp 4020 <.plt>
    40bf:	nop
    40c0:	endbr64 
    40c4:	push   0x9
    40c9:	bnd jmp 4020 <.plt>
    40cf:	nop
    40d0:	endbr64 
    40d4:	push   0xa
    40d9:	bnd jmp 4020 <.plt>
    40df:	nop
    40e0:	endbr64 
    40e4:	push   0xb
    40e9:	bnd jmp 4020 <.plt>
    40ef:	nop
    40f0:	endbr64 
    40f4:	push   0xc
    40f9:	bnd jmp 4020 <.plt>
    40ff:	nop
    4100:	endbr64 
    4104:	push   0xd
    4109:	bnd jmp 4020 <.plt>
    410f:	nop
    4110:	endbr64 
    4114:	push   0xe
    4119:	bnd jmp 4020 <.plt>
    411f:	nop
    4120:	endbr64 
    4124:	push   0xf
    4129:	bnd jmp 4020 <.plt>
    412f:	nop
    4130:	endbr64 
    4134:	push   0x10
    4139:	bnd jmp 4020 <.plt>
    413f:	nop
    4140:	endbr64 
    4144:	push   0x11
    4149:	bnd jmp 4020 <.plt>
    414f:	nop
    4150:	endbr64 
    4154:	push   0x12
    4159:	bnd jmp 4020 <.plt>
    415f:	nop
    4160:	endbr64 
    4164:	push   0x13
    4169:	bnd jmp 4020 <.plt>
    416f:	nop
    4170:	endbr64 
    4174:	push   0x14
    4179:	bnd jmp 4020 <.plt>
    417f:	nop
    4180:	endbr64 
    4184:	push   0x15
    4189:	bnd jmp 4020 <.plt>
    418f:	nop
    4190:	endbr64 
    4194:	push   0x16
    4199:	bnd jmp 4020 <.plt>
    419f:	nop
    41a0:	endbr64 
    41a4:	push   0x17
    41a9:	bnd jmp 4020 <.plt>
    41af:	nop
    41b0:	endbr64 
    41b4:	push   0x18
    41b9:	bnd jmp 4020 <.plt>
    41bf:	nop
    41c0:	endbr64 
    41c4:	push   0x19
    41c9:	bnd jmp 4020 <.plt>
    41cf:	nop
    41d0:	endbr64 
    41d4:	push   0x1a
    41d9:	bnd jmp 4020 <.plt>
    41df:	nop
    41e0:	endbr64 
    41e4:	push   0x1b
    41e9:	bnd jmp 4020 <.plt>
    41ef:	nop
    41f0:	endbr64 
    41f4:	push   0x1c
    41f9:	bnd jmp 4020 <.plt>
    41ff:	nop
    4200:	endbr64 
    4204:	push   0x1d
    4209:	bnd jmp 4020 <.plt>
    420f:	nop
    4210:	endbr64 
    4214:	push   0x1e
    4219:	bnd jmp 4020 <.plt>
    421f:	nop
    4220:	endbr64 
    4224:	push   0x1f
    4229:	bnd jmp 4020 <.plt>
    422f:	nop
    4230:	endbr64 
    4234:	push   0x20
    4239:	bnd jmp 4020 <.plt>
    423f:	nop
    4240:	endbr64 
    4244:	push   0x21
    4249:	bnd jmp 4020 <.plt>
    424f:	nop
    4250:	endbr64 
    4254:	push   0x22
    4259:	bnd jmp 4020 <.plt>
    425f:	nop
    4260:	endbr64 
    4264:	push   0x23
    4269:	bnd jmp 4020 <.plt>
    426f:	nop
    4270:	endbr64 
    4274:	push   0x24
    4279:	bnd jmp 4020 <.plt>
    427f:	nop
    4280:	endbr64 
    4284:	push   0x25
    4289:	bnd jmp 4020 <.plt>
    428f:	nop
    4290:	endbr64 
    4294:	push   0x26
    4299:	bnd jmp 4020 <.plt>
    429f:	nop
    42a0:	endbr64 
    42a4:	push   0x27
    42a9:	bnd jmp 4020 <.plt>
    42af:	nop

Disassembly of section .plt.got:

00000000000042b0 <__cxa_finalize@plt>:
    42b0:	endbr64 
    42b4:	bnd jmp QWORD PTR [rip+0x81d35]        # 85ff0 <__cxa_finalize@GLIBC_2.2.5>
    42bb:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000042c0 <__snprintf_chk@plt>:
    42c0:	endbr64 
    42c4:	bnd jmp QWORD PTR [rip+0x81bbd]        # 85e88 <__snprintf_chk@GLIBC_2.3.4>
    42cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000042d0 <free@plt>:
    42d0:	endbr64 
    42d4:	bnd jmp QWORD PTR [rip+0x81bb5]        # 85e90 <free@GLIBC_2.2.5>
    42db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000042e0 <putchar@plt>:
    42e0:	endbr64 
    42e4:	bnd jmp QWORD PTR [rip+0x81bad]        # 85e98 <putchar@GLIBC_2.2.5>
    42eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000042f0 <localtime@plt>:
    42f0:	endbr64 
    42f4:	bnd jmp QWORD PTR [rip+0x81ba5]        # 85ea0 <localtime@GLIBC_2.2.5>
    42fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004300 <strncpy@plt>:
    4300:	endbr64 
    4304:	bnd jmp QWORD PTR [rip+0x81b9d]        # 85ea8 <strncpy@GLIBC_2.2.5>
    430b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004310 <__isoc99_fscanf@plt>:
    4310:	endbr64 
    4314:	bnd jmp QWORD PTR [rip+0x81b95]        # 85eb0 <__isoc99_fscanf@GLIBC_2.7>
    431b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004320 <puts@plt>:
    4320:	endbr64 
    4324:	bnd jmp QWORD PTR [rip+0x81b8d]        # 85eb8 <puts@GLIBC_2.2.5>
    432b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004330 <qsort@plt>:
    4330:	endbr64 
    4334:	bnd jmp QWORD PTR [rip+0x81b85]        # 85ec0 <qsort@GLIBC_2.2.5>
    433b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004340 <fread@plt>:
    4340:	endbr64 
    4344:	bnd jmp QWORD PTR [rip+0x81b7d]        # 85ec8 <fread@GLIBC_2.2.5>
    434b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004350 <write@plt>:
    4350:	endbr64 
    4354:	bnd jmp QWORD PTR [rip+0x81b75]        # 85ed0 <write@GLIBC_2.2.5>
    435b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004360 <pow@plt>:
    4360:	endbr64 
    4364:	bnd jmp QWORD PTR [rip+0x81b6d]        # 85ed8 <pow@GLIBC_2.29>
    436b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004370 <fclose@plt>:
    4370:	endbr64 
    4374:	bnd jmp QWORD PTR [rip+0x81b65]        # 85ee0 <fclose@GLIBC_2.2.5>
    437b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004380 <strlen@plt>:
    4380:	endbr64 
    4384:	bnd jmp QWORD PTR [rip+0x81b5d]        # 85ee8 <strlen@GLIBC_2.2.5>
    438b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004390 <__stack_chk_fail@plt>:
    4390:	endbr64 
    4394:	bnd jmp QWORD PTR [rip+0x81b55]        # 85ef0 <__stack_chk_fail@GLIBC_2.4>
    439b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043a0 <lseek@plt>:
    43a0:	endbr64 
    43a4:	bnd jmp QWORD PTR [rip+0x81b4d]        # 85ef8 <lseek@GLIBC_2.2.5>
    43ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043b0 <memset@plt>:
    43b0:	endbr64 
    43b4:	bnd jmp QWORD PTR [rip+0x81b45]        # 85f00 <memset@GLIBC_2.2.5>
    43bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043c0 <close@plt>:
    43c0:	endbr64 
    43c4:	bnd jmp QWORD PTR [rip+0x81b3d]        # 85f08 <close@GLIBC_2.2.5>
    43cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043d0 <log@plt>:
    43d0:	endbr64 
    43d4:	bnd jmp QWORD PTR [rip+0x81b35]        # 85f10 <log@GLIBC_2.29>
    43db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043e0 <fputc@plt>:
    43e0:	endbr64 
    43e4:	bnd jmp QWORD PTR [rip+0x81b2d]        # 85f18 <fputc@GLIBC_2.2.5>
    43eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043f0 <read@plt>:
    43f0:	endbr64 
    43f4:	bnd jmp QWORD PTR [rip+0x81b25]        # 85f20 <read@GLIBC_2.2.5>
    43fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004400 <calloc@plt>:
    4400:	endbr64 
    4404:	bnd jmp QWORD PTR [rip+0x81b1d]        # 85f28 <calloc@GLIBC_2.2.5>
    440b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004410 <strcmp@plt>:
    4410:	endbr64 
    4414:	bnd jmp QWORD PTR [rip+0x81b15]        # 85f30 <strcmp@GLIBC_2.2.5>
    441b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004420 <log10@plt>:
    4420:	endbr64 
    4424:	bnd jmp QWORD PTR [rip+0x81b0d]        # 85f38 <log10@GLIBC_2.2.5>
    442b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004430 <ftell@plt>:
    4430:	endbr64 
    4434:	bnd jmp QWORD PTR [rip+0x81b05]        # 85f40 <ftell@GLIBC_2.2.5>
    443b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004440 <memcpy@plt>:
    4440:	endbr64 
    4444:	bnd jmp QWORD PTR [rip+0x81afd]        # 85f48 <memcpy@GLIBC_2.14>
    444b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004450 <time@plt>:
    4450:	endbr64 
    4454:	bnd jmp QWORD PTR [rip+0x81af5]        # 85f50 <time@GLIBC_2.2.5>
    445b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004460 <malloc@plt>:
    4460:	endbr64 
    4464:	bnd jmp QWORD PTR [rip+0x81aed]        # 85f58 <malloc@GLIBC_2.2.5>
    446b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004470 <__isoc99_sscanf@plt>:
    4470:	endbr64 
    4474:	bnd jmp QWORD PTR [rip+0x81ae5]        # 85f60 <__isoc99_sscanf@GLIBC_2.7>
    447b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004480 <fseek@plt>:
    4480:	endbr64 
    4484:	bnd jmp QWORD PTR [rip+0x81add]        # 85f68 <fseek@GLIBC_2.2.5>
    448b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004490 <__printf_chk@plt>:
    4490:	endbr64 
    4494:	bnd jmp QWORD PTR [rip+0x81ad5]        # 85f70 <__printf_chk@GLIBC_2.3.4>
    449b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000044a0 <strftime@plt>:
    44a0:	endbr64 
    44a4:	bnd jmp QWORD PTR [rip+0x81acd]        # 85f78 <strftime@GLIBC_2.2.5>
    44ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000044b0 <open@plt>:
    44b0:	endbr64 
    44b4:	bnd jmp QWORD PTR [rip+0x81ac5]        # 85f80 <open@GLIBC_2.2.5>
    44bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000044c0 <fopen@plt>:
    44c0:	endbr64 
    44c4:	bnd jmp QWORD PTR [rip+0x81abd]        # 85f88 <fopen@GLIBC_2.2.5>
    44cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000044d0 <floor@plt>:
    44d0:	endbr64 
    44d4:	bnd jmp QWORD PTR [rip+0x81ab5]        # 85f90 <floor@GLIBC_2.2.5>
    44db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000044e0 <exit@plt>:
    44e0:	endbr64 
    44e4:	bnd jmp QWORD PTR [rip+0x81aad]        # 85f98 <exit@GLIBC_2.2.5>
    44eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000044f0 <fwrite@plt>:
    44f0:	endbr64 
    44f4:	bnd jmp QWORD PTR [rip+0x81aa5]        # 85fa0 <fwrite@GLIBC_2.2.5>
    44fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004500 <__fprintf_chk@plt>:
    4500:	endbr64 
    4504:	bnd jmp QWORD PTR [rip+0x81a9d]        # 85fa8 <__fprintf_chk@GLIBC_2.3.4>
    450b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004510 <__strncat_chk@plt>:
    4510:	endbr64 
    4514:	bnd jmp QWORD PTR [rip+0x81a95]        # 85fb0 <__strncat_chk@GLIBC_2.3.4>
    451b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004520 <sqrt@plt>:
    4520:	endbr64 
    4524:	bnd jmp QWORD PTR [rip+0x81a8d]        # 85fb8 <sqrt@GLIBC_2.2.5>
    452b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004530 <__ctype_b_loc@plt>:
    4530:	endbr64 
    4534:	bnd jmp QWORD PTR [rip+0x81a85]        # 85fc0 <__ctype_b_loc@GLIBC_2.3>
    453b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000004540 <main>:
    4540:	endbr64 
    4544:	push   rbp
    4545:	push   rbx
    4546:	sub    rsp,0x8
    454a:	mov    DWORD PTR [rip+0xae50c],0xffffffff        # b2a60 <p_in>
    4554:	mov    DWORD PTR [rip+0xb2196],0xffffffff        # b66f4 <p_dec>
    455e:	mov    QWORD PTR [rip+0xb2177],0x0        # b66e0 <p_trace>
    4569:	mov    QWORD PTR [rip+0xafbcc],0x0        # b4140 <p_log>
    4574:	mov    QWORD PTR [rip+0x9c8a1],0x0        # a0e20 <p_stat>
    457f:	mov    DWORD PTR [rip+0xafbb3],0x1        # b413c <frame_statistic_start>
    4589:	call   f6f0 <Configure>
    458e:	call   49810 <Init_QMatrix>
    4593:	xor    eax,eax
    4595:	call   4a6b0 <Init_QOffsetMatrix>
    459a:	xor    eax,eax
    459c:	call   46710 <AllocNalPayloadBuffer>
    45a1:	xor    eax,eax
    45a3:	call   20fe0 <init_poc>
    45a8:	xor    eax,eax
    45aa:	call   479c0 <GenerateParameterSets>
    45af:	xor    eax,eax
    45b1:	call   23d00 <init_img>
    45b6:	xor    eax,eax
    45b8:	call   21130 <malloc_picture>
    45bd:	mov    QWORD PTR [rip+0xb09bc],rax        # b4f80 <frame_pic>
    45c4:	mov    rax,QWORD PTR [rip+0x83fed]        # 885b8 <input>
    45cb:	mov    r10d,DWORD PTR [rax+0x510]
    45d2:	test   r10d,r10d
    45d5:	jne    4c0c <main+0x6cc>
    45db:	mov    r9d,DWORD PTR [rax+0xb40]
    45e2:	test   r9d,r9d
    45e5:	jne    4beb <main+0x6ab>
    45eb:	xor    eax,eax
    45ed:	call   4e740 <init_rdopt>
    45f2:	mov    rdi,QWORD PTR [rip+0x83fbf]        # 885b8 <input>
    45f9:	mov    r8d,DWORD PTR [rdi+0x528]
    4600:	test   r8d,r8d
    4603:	jne    4bbe <main+0x67e>
    4609:	xor    eax,eax
    460b:	call   31af0 <init_dpb>
    4610:	xor    eax,eax
    4612:	call   46e80 <init_out_buffer>
    4617:	xor    eax,eax
    4619:	mov    QWORD PTR [rip+0x8637c],0x0        # 8a9a0 <enc_bottom_picture>
    4624:	mov    QWORD PTR [rip+0x86369],0x0        # 8a998 <enc_top_picture>
    462f:	mov    QWORD PTR [rip+0x86376],0x0        # 8a9b0 <enc_frame_picture>
    463a:	mov    QWORD PTR [rip+0x86363],0x0        # 8a9a8 <enc_picture>
    4645:	call   22d10 <init_global_buffers>
    464a:	xor    eax,eax
    464c:	call   118f0 <create_context_memory>
    4651:	xor    eax,eax
    4653:	call   3ae30 <Init_Motion_Search_Module>
    4658:	xor    eax,eax
    465a:	call   229b0 <information_init>
    465f:	mov    rcx,QWORD PTR [rip+0x83f52]        # 885b8 <input>
    4666:	mov    edi,DWORD PTR [rcx+0xca4]
    466c:	test   edi,edi
    466e:	jne    4bab <main+0x66b>
    4674:	mov    esi,DWORD PTR [rcx+0xcdc]
    467a:	test   esi,esi
    467c:	jne    4b8c <main+0x64c>
    4682:	mov    DWORD PTR [rip+0xaf67c],0x0        # b3d08 <Iframe_ctr>
    468c:	mov    eax,DWORD PTR [rcx+0x988]
    4692:	mov    DWORD PTR [rip+0x9aa04],0x0        # 9f0a0 <Pframe_ctr>
    469c:	mov    DWORD PTR [rip+0xb17c6],0x0        # b5e6c <Bframe_ctr>
    46a6:	mov    DWORD PTR [rip+0xb2100],0x0        # b67b0 <tot_time>
    46b0:	test   eax,eax
    46b2:	jle    46c5 <main+0x185>
    46b4:	mov    esi,DWORD PTR [rcx+0x14]
    46b7:	add    eax,esi
    46b9:	add    esi,0x1
    46bc:	cdq    
    46bd:	idiv   esi
    46bf:	add    eax,0x1
    46c2:	mov    DWORD PTR [rcx+0x8],eax
    46c5:	mov    eax,DWORD PTR [rcx+0x4d4]
    46cb:	mov    DWORD PTR [rip+0x84423],eax        # 88af4 <initial_Bframes>
    46d1:	xor    eax,eax
    46d3:	call   118a0 <PatchInputNoFrames>
    46d8:	mov    rbx,QWORD PTR [rip+0x83ec9]        # 885a8 <stats>
    46df:	xor    eax,eax
    46e1:	mov    DWORD PTR [rbx+0x5d0],0x0
    46eb:	call   19200 <start_sequence>
    46f0:	mov    rdi,QWORD PTR [rip+0x83ec1]        # 885b8 <input>
    46f7:	mov    rsi,QWORD PTR [rip+0x83eb2]        # 885b0 <img>
    46fe:	mov    DWORD PTR [rip+0x843e4],0x0        # 88aec <start_frame_no_in_this_IGOP>
    4708:	mov    DWORD PTR [rbx+0x18],eax
    470b:	mov    rax,QWORD PTR [rip+0x83e96]        # 885a8 <stats>
    4712:	mov    edx,DWORD PTR [rax+0x5d4]
    4718:	add    DWORD PTR [rax+0x5d0],edx
    471e:	mov    edx,DWORD PTR [rdi+0x8]
    4721:	mov    DWORD PTR [rsi],0x0
    4727:	test   edx,edx
    4729:	jle    4a08 <main+0x4c8>
    472f:	xor    eax,eax
    4731:	xor    r8d,r8d
    4734:	mov    ebx,0x1
    4739:	xor    ebp,ebp
    473b:	jmp    47cf <main+0x28f>
    4740:	mov    ecx,DWORD PTR [rcx+0xb60]
    4746:	mov    eax,DWORD PTR [r8]
    4749:	sub    eax,DWORD PTR [rip+0x8439d]        # 88aec <start_frame_no_in_this_IGOP>
    474f:	add    ecx,0x1
    4752:	cdq    
    4753:	idiv   ecx
    4755:	xor    eax,eax
    4757:	test   edx,edx
    4759:	setne  al
    475c:	mov    DWORD PTR [r8+0x11ac0],eax
    4763:	xor    eax,eax
    4765:	call   1e300 <encode_one_frame>
    476a:	mov    rax,QWORD PTR [rip+0x83e47]        # 885b8 <input>
    4771:	mov    ecx,DWORD PTR [rax+0xc9c]
    4777:	test   ecx,ecx
    4779:	jne    49b0 <main+0x470>
    477f:	mov    rdx,QWORD PTR [rip+0x83e2a]        # 885b0 <img>
    4786:	mov    eax,DWORD PTR [rdx+0x8]
    4789:	mov    ecx,DWORD PTR [rdx+0x11ab8]
    478f:	add    eax,0x1
    4792:	cmp    eax,ecx
    4794:	cmovg  eax,ecx
    4797:	mov    DWORD PTR [rdx+0x8],eax
    479a:	xor    eax,eax
    479c:	call   15980 <encode_enhancement_layer>
    47a1:	xor    eax,eax
    47a3:	call   24c30 <process_2nd_IGOP>
    47a8:	mov    rsi,QWORD PTR [rip+0x83e01]        # 885b0 <img>
    47af:	mov    rdi,QWORD PTR [rip+0x83e02]        # 885b8 <input>
    47b6:	mov    eax,DWORD PTR [rsi]
    47b8:	lea    r8d,[rax+0x1]
    47bc:	mov    DWORD PTR [rsi],r8d
    47bf:	cmp    r8d,DWORD PTR [rdi+0x8]
    47c3:	jge    4a08 <main+0x4c8>
    47c9:	mov    eax,DWORD PTR [rip+0x8431d]        # 88aec <start_frame_no_in_this_IGOP>
    47cf:	mov    edx,DWORD PTR [rdi+0x14]
    47d2:	mov    r9d,r8d
    47d5:	mov    r10d,DWORD PTR [rdi+0x4c8]
    47dc:	mov    DWORD PTR [rsi+0x11b30],0x1
    47e6:	sub    r9d,eax
    47e9:	lea    ecx,[rdx+0x1]
    47ec:	mov    edx,r9d
    47ef:	test   r10d,r10d
    47f2:	je     4805 <main+0x2c5>
    47f4:	mov    eax,DWORD PTR [rdi+0x4cc]
    47fa:	test   eax,eax
    47fc:	je     4805 <main+0x2c5>
    47fe:	mov    eax,r9d
    4801:	cdq    
    4802:	idiv   r10d
    4805:	mov    r11d,DWORD PTR [rdi+0x524]
    480c:	imul   ecx,edx
    480f:	add    ecx,ecx
    4811:	cmp    QWORD PTR [rdi+0xb40],0x1
    4819:	mov    eax,ecx
    481b:	mov    DWORD PTR [rsi+0x11b00],ecx
    4821:	sbb    eax,0xffffffff
    4824:	mov    DWORD PTR [rsi+0x11b08],ecx
    482a:	mov    DWORD PTR [rsi+0x11b04],eax
    4830:	test   r11d,r11d
    4833:	jne    483f <main+0x2ff>
    4835:	mov    eax,DWORD PTR [rdi+0x528]
    483b:	test   eax,eax
    483d:	je     4853 <main+0x313>
    483f:	mov    eax,DWORD PTR [rdi+0x4d4]
    4845:	test   eax,eax
    4847:	je     4853 <main+0x313>
    4849:	cmp    r8d,0x1
    484d:	jg     49c0 <main+0x480>
    4853:	test   r10d,r10d
    4856:	je     486c <main+0x32c>
    4858:	mov    eax,DWORD PTR [rdi+0x4cc]
    485e:	test   eax,eax
    4860:	je     486c <main+0x32c>
    4862:	mov    eax,r9d
    4865:	cdq    
    4866:	idiv   r10d
    4869:	mov    r9d,edx
    486c:	mov    eax,DWORD PTR [rip+0xb15f6]        # b5e68 <log2_max_frame_num_minus4>
    4872:	lea    ecx,[rax+0x4]
    4875:	mov    eax,ebx
    4877:	shl    eax,cl
    4879:	mov    ecx,eax
    487b:	mov    eax,r9d
    487e:	cdq    
    487f:	idiv   ecx
    4881:	mov    DWORD PTR [rsi+0x11b10],edx
    4887:	mov    DWORD PTR [rsi+0x11af4],0x0
    4891:	test   r8d,r8d
    4894:	je     48a9 <main+0x369>
    4896:	test   r11d,r11d
    4899:	je     48a9 <main+0x369>
    489b:	mov    eax,DWORD PTR [rdi+0x4d4]
    48a1:	add    eax,eax
    48a3:	mov    DWORD PTR [rsi+0x11af4],eax
    48a9:	xor    eax,eax
    48ab:	call   24ca0 <SetImgType>
    48b0:	mov    rcx,QWORD PTR [rip+0x83d01]        # 885b8 <input>
    48b7:	mov    r8,QWORD PTR [rip+0x83cf2]        # 885b0 <img>
    48be:	mov    esi,DWORD PTR [rcx+0x4d4]
    48c4:	test   esi,esi
    48c6:	je     4960 <main+0x420>
    48cc:	mov    eax,DWORD PTR [rcx+0x988]
    48d2:	mov    r8,QWORD PTR [rip+0x83cd7]        # 885b0 <img>
    48d9:	test   eax,eax
    48db:	je     4960 <main+0x420>
    48e1:	mov    edi,DWORD PTR [r8]
    48e4:	mov    edx,edi
    48e6:	sub    edx,DWORD PTR [rip+0x84200]        # 88aec <start_frame_no_in_this_IGOP>
    48ec:	add    edx,0x1
    48ef:	cmp    edx,DWORD PTR [rcx+0x8]
    48f2:	jne    4960 <main+0x420>
    48f4:	mov    edx,DWORD PTR [rcx+0x14]
    48f7:	pxor   xmm0,xmm0
    48fb:	pxor   xmm1,xmm1
    48ff:	sub    edi,0x1
    4902:	add    edx,0x1
    4905:	cvtsi2ss xmm0,edx
    4909:	imul   edi,edx
    490c:	cvtss2sd xmm1,xmm0
    4910:	pxor   xmm0,xmm0
    4914:	sub    eax,edi
    4916:	cvtsi2sd xmm0,esi
    491a:	addsd  xmm0,QWORD PTR [rip+0x6dea6]        # 727c8 <INIT_MB_TYPE_I+0x108>
    4922:	cdq    
    4923:	divsd  xmm1,xmm0
    4927:	movsd  xmm0,QWORD PTR [rip+0x705f9]        # 74f28 <mb_width_cr.6670+0x18>
    492f:	addsd  xmm0,xmm1
    4933:	cvttsd2si esi,xmm0
    4937:	idiv   esi
    4939:	sub    eax,0x1
    493c:	mov    DWORD PTR [rcx+0x4d4],eax
    4942:	sub    eax,DWORD PTR [rip+0x841ac]        # 88af4 <initial_Bframes>
    4948:	add    eax,eax
    494a:	add    DWORD PTR [r8+0x11b00],eax
    4951:	add    DWORD PTR [r8+0x11b04],eax
    4958:	mov    DWORD PTR [r8+0x11af4],eax
    495f:	nop
    4960:	cmp    DWORD PTR [r8+0x18],0x2
    4965:	jne    4740 <main+0x200>
    496b:	mov    esi,DWORD PTR [rcx+0xca4]
    4971:	test   esi,esi
    4973:	je     4740 <main+0x200>
    4979:	mov    r9d,DWORD PTR [rcx+0x4c8]
    4980:	mov    edi,DWORD PTR [rcx+0x8]
    4983:	mov    esi,DWORD PTR [rcx+0x4d4]
    4989:	test   r9d,r9d
    498c:	jne    4b30 <main+0x5f0>
    4992:	sub    edi,0x1
    4995:	imul   esi,edi
    4998:	call   4b110 <rc_init_GOP>
    499d:	mov    r8,QWORD PTR [rip+0x83c0c]        # 885b0 <img>
    49a4:	mov    rcx,QWORD PTR [rip+0x83c0d]        # 885b8 <input>
    49ab:	jmp    4740 <main+0x200>
    49b0:	xor    eax,eax
    49b2:	call   21190 <report_frame_statistic>
    49b7:	jmp    477f <main+0x23f>
    49bc:	nop    DWORD PTR [rax+0x0]
    49c0:	mov    eax,DWORD PTR [rsi+0x11b10]
    49c6:	lea    r9d,[rax+0x1]
    49ca:	test   r10d,r10d
    49cd:	je     49e6 <main+0x4a6>
    49cf:	mov    eax,DWORD PTR [rdi+0x4cc]
    49d5:	test   eax,eax
    49d7:	je     49e6 <main+0x4a6>
    49d9:	mov    eax,r8d
    49dc:	cdq    
    49dd:	idiv   r10d
    49e0:	test   edx,edx
    49e2:	cmove  r9d,ebp
    49e6:	mov    eax,DWORD PTR [rip+0xb147c]        # b5e68 <log2_max_frame_num_minus4>
    49ec:	lea    ecx,[rax+0x4]
    49ef:	mov    eax,ebx
    49f1:	shl    eax,cl
    49f3:	sub    eax,0x1
    49f6:	and    eax,r9d
    49f9:	mov    DWORD PTR [rsi+0x11b10],eax
    49ff:	jmp    4887 <main+0x347>
    4a04:	nop    DWORD PTR [rax+0x0]
    4a08:	xor    eax,eax
    4a0a:	call   19300 <terminate_sequence>
    4a0f:	xor    eax,eax
    4a11:	call   33570 <flush_dpb>
    4a16:	mov    edi,DWORD PTR [rip+0xae044]        # b2a60 <p_in>
    4a1c:	call   43c0 <close@plt>
    4a21:	mov    edi,DWORD PTR [rip+0xb1ccd]        # b66f4 <p_dec>
    4a27:	cmp    edi,0xffffffff
    4a2a:	je     4a31 <main+0x4f1>
    4a2c:	call   43c0 <close@plt>
    4a31:	mov    rdi,QWORD PTR [rip+0xb1ca8]        # b66e0 <p_trace>
    4a38:	test   rdi,rdi
    4a3b:	je     4a42 <main+0x502>
    4a3d:	call   4370 <fclose@plt>
    4a42:	xor    eax,eax
    4a44:	call   3b330 <Clear_Motion_Search_Module>
    4a49:	xor    eax,eax
    4a4b:	call   20770 <RandomIntraUninit>
    4a50:	xor    eax,eax
    4a52:	call   19a70 <FmoUninit>
    4a57:	mov    rax,QWORD PTR [rip+0x83b5a]        # 885b8 <input>
    4a5e:	mov    edx,DWORD PTR [rax+0x528]
    4a64:	test   edx,edx
    4a66:	jne    4b9f <main+0x65f>
    4a6c:	xor    eax,eax
    4a6e:	call   4e680 <clear_rdopt>
    4a73:	xor    eax,eax
    4a75:	call   20a80 <calc_buffer>
    4a7a:	xor    eax,eax
    4a7c:	call   21dd0 <report>
    4a81:	mov    rdi,QWORD PTR [rip+0xb04f8]        # b4f80 <frame_pic>
    4a88:	test   rdi,rdi
    4a8b:	je     4a92 <main+0x552>
    4a8d:	call   20fc0 <free_picture.part.0>
    4a92:	mov    rax,QWORD PTR [rip+0x83b1f]        # 885b8 <input>
    4a99:	mov    eax,DWORD PTR [rax+0x510]
    4a9f:	test   eax,eax
    4aa1:	je     4ac5 <main+0x585>
    4aa3:	mov    rdi,QWORD PTR [rip+0x9a746]        # 9f1f0 <frame_pic2>
    4aaa:	test   rdi,rdi
    4aad:	je     4ab4 <main+0x574>
    4aaf:	call   20fc0 <free_picture.part.0>
    4ab4:	mov    rdi,QWORD PTR [rip+0xb0675]        # b5130 <frame_pic3>
    4abb:	test   rdi,rdi
    4abe:	je     4ac5 <main+0x585>
    4ac0:	call   20fc0 <free_picture.part.0>
    4ac5:	mov    rdi,QWORD PTR [rip+0x9c34c]        # a0e18 <top_pic>
    4acc:	test   rdi,rdi
    4acf:	je     4ad6 <main+0x596>
    4ad1:	call   20fc0 <free_picture.part.0>
    4ad6:	mov    rdi,QWORD PTR [rip+0xae40b]        # b2ee8 <bottom_pic>
    4add:	test   rdi,rdi
    4ae0:	je     4ae7 <main+0x5a7>
    4ae2:	call   20fc0 <free_picture.part.0>
    4ae7:	xor    eax,eax
    4ae9:	call   31a20 <free_dpb>
    4aee:	mov    rdi,QWORD PTR [rip+0x84313]        # 88e08 <Co_located>
    4af5:	call   36470 <free_colocated>
    4afa:	xor    eax,eax
    4afc:	call   46ea0 <uninit_out_buffer>
    4b01:	xor    eax,eax
    4b03:	call   232b0 <free_global_buffers>
    4b08:	xor    eax,eax
    4b0a:	call   24650 <free_img>
    4b0f:	xor    eax,eax
    4b11:	call   11b60 <free_context_memory>
    4b16:	xor    eax,eax
    4b18:	call   46770 <FreeNalPayloadBuffer>
    4b1d:	xor    eax,eax
    4b1f:	call   472a0 <FreeParameterSets>
    4b24:	add    rsp,0x8
    4b28:	xor    eax,eax
    4b2a:	pop    rbx
    4b2b:	pop    rbp
    4b2c:	ret    
    4b2d:	nop    DWORD PTR [rax]
    4b30:	mov    eax,edi
    4b32:	mov    r8d,DWORD PTR [r8]
    4b35:	lea    r10d,[rsi+0x1]
    4b39:	mov    ecx,r9d
    4b3c:	cdq    
    4b3d:	imul   ecx,r10d
    4b41:	idiv   r9d
    4b44:	mov    r11d,eax
    4b47:	test   r8d,r8d
    4b4a:	jne    4b66 <main+0x626>
    4b4c:	sub    ecx,esi
    4b4e:	test   eax,eax
    4b50:	jg     4b5a <main+0x61a>
    4b52:	lea    ecx,[rdi-0x1]
    4b55:	imul   ecx,esi
    4b58:	add    ecx,edi
    4b5a:	lea    eax,[rcx+rsi*2]
    4b5d:	cdq    
    4b5e:	idiv   r10d
    4b61:	lea    edi,[rax-0x1]
    4b64:	jmp    4b80 <main+0x640>
    4b66:	mov    eax,r8d
    4b69:	cdq    
    4b6a:	idiv   r9d
    4b6d:	cmp    eax,r11d
    4b70:	jge    4c34 <main+0x6f4>
    4b76:	lea    eax,[rcx+rsi*1]
    4b79:	cdq    
    4b7a:	idiv   r10d
    4b7d:	lea    edi,[rax-0x1]
    4b80:	mov    esi,ecx
    4b82:	sub    esi,edi
    4b84:	sub    esi,0x1
    4b87:	jmp    4998 <main+0x458>
    4b8c:	xor    eax,eax
    4b8e:	call   160e0 <DefineThreshold>
    4b93:	mov    rcx,QWORD PTR [rip+0x83a1e]        # 885b8 <input>
    4b9a:	jmp    4682 <main+0x142>
    4b9f:	xor    eax,eax
    4ba1:	call   15100 <clear_gop_structure>
    4ba6:	jmp    4a6c <main+0x52c>
    4bab:	xor    eax,eax
    4bad:	call   4adb0 <rc_init_seq>
    4bb2:	mov    rcx,QWORD PTR [rip+0x839ff]        # 885b8 <input>
    4bb9:	jmp    4674 <main+0x134>
    4bbe:	xor    eax,eax
    4bc0:	call   15090 <init_gop_structure>
    4bc5:	mov    rax,QWORD PTR [rip+0x839ec]        # 885b8 <input>
    4bcc:	cmp    DWORD PTR [rax+0x528],0x3
    4bd3:	mov    eax,0x0
    4bd8:	je     4c46 <main+0x706>
    4bda:	call   14e00 <create_pyramid>
    4bdf:	mov    rdi,QWORD PTR [rip+0x839d2]        # 885b8 <input>
    4be6:	jmp    4609 <main+0xc9>
    4beb:	xor    eax,eax
    4bed:	call   21130 <malloc_picture>
    4bf2:	mov    QWORD PTR [rip+0x9c21f],rax        # a0e18 <top_pic>
    4bf9:	xor    eax,eax
    4bfb:	call   21130 <malloc_picture>
    4c00:	mov    QWORD PTR [rip+0xae2e1],rax        # b2ee8 <bottom_pic>
    4c07:	jmp    45eb <main+0xab>
    4c0c:	xor    eax,eax
    4c0e:	call   21130 <malloc_picture>
    4c13:	mov    QWORD PTR [rip+0x9a5d6],rax        # 9f1f0 <frame_pic2>
    4c1a:	xor    eax,eax
    4c1c:	call   21130 <malloc_picture>
    4c21:	mov    QWORD PTR [rip+0xb0508],rax        # b5130 <frame_pic3>
    4c28:	mov    rax,QWORD PTR [rip+0x83989]        # 885b8 <input>
    4c2f:	jmp    45db <main+0x9b>
    4c34:	sub    edi,r8d
    4c37:	lea    ecx,[rdi-0x1]
    4c3a:	imul   ecx,esi
    4c3d:	add    ecx,edi
    4c3f:	add    ecx,esi
    4c41:	jmp    4b76 <main+0x636>
    4c46:	call   15120 <interpret_gop_structure>
    4c4b:	mov    rdi,QWORD PTR [rip+0x83966]        # 885b8 <input>
    4c52:	jmp    4609 <main+0xc9>
    4c57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004c60 <_start>:
    4c60:	endbr64 
    4c64:	xor    ebp,ebp
    4c66:	mov    r9,rdx
    4c69:	pop    rsi
    4c6a:	mov    rdx,rsp
    4c6d:	and    rsp,0xfffffffffffffff0
    4c71:	push   rax
    4c72:	push   rsp
    4c73:	lea    r8,[rip+0x64536]        # 691b0 <__libc_csu_fini>
    4c7a:	lea    rcx,[rip+0x644bf]        # 69140 <__libc_csu_init>
    4c81:	lea    rdi,[rip+0xfffffffffffff8b8]        # 4540 <main>
    4c88:	call   QWORD PTR [rip+0x81342]        # 85fd0 <__libc_start_main@GLIBC_2.2.5>
    4c8e:	hlt    
    4c8f:	nop

0000000000004c90 <deregister_tm_clones>:
    4c90:	lea    rdi,[rip+0x83bd1]        # 88868 <__TMC_END__>
    4c97:	lea    rax,[rip+0x83bca]        # 88868 <__TMC_END__>
    4c9e:	cmp    rax,rdi
    4ca1:	je     4cb8 <deregister_tm_clones+0x28>
    4ca3:	mov    rax,QWORD PTR [rip+0x8131e]        # 85fc8 <_ITM_deregisterTMCloneTable>
    4caa:	test   rax,rax
    4cad:	je     4cb8 <deregister_tm_clones+0x28>
    4caf:	jmp    rax
    4cb1:	nop    DWORD PTR [rax+0x0]
    4cb8:	ret    
    4cb9:	nop    DWORD PTR [rax+0x0]

0000000000004cc0 <register_tm_clones>:
    4cc0:	lea    rdi,[rip+0x83ba1]        # 88868 <__TMC_END__>
    4cc7:	lea    rsi,[rip+0x83b9a]        # 88868 <__TMC_END__>
    4cce:	sub    rsi,rdi
    4cd1:	mov    rax,rsi
    4cd4:	shr    rsi,0x3f
    4cd8:	sar    rax,0x3
    4cdc:	add    rsi,rax
    4cdf:	sar    rsi,1
    4ce2:	je     4cf8 <register_tm_clones+0x38>
    4ce4:	mov    rax,QWORD PTR [rip+0x812fd]        # 85fe8 <_ITM_registerTMCloneTable>
    4ceb:	test   rax,rax
    4cee:	je     4cf8 <register_tm_clones+0x38>
    4cf0:	jmp    rax
    4cf2:	nop    WORD PTR [rax+rax*1+0x0]
    4cf8:	ret    
    4cf9:	nop    DWORD PTR [rax+0x0]

0000000000004d00 <__do_global_dtors_aux>:
    4d00:	endbr64 
    4d04:	cmp    BYTE PTR [rip+0x83b9d],0x0        # 888a8 <completed.8061>
    4d0b:	jne    4d38 <__do_global_dtors_aux+0x38>
    4d0d:	push   rbp
    4d0e:	cmp    QWORD PTR [rip+0x812da],0x0        # 85ff0 <__cxa_finalize@GLIBC_2.2.5>
    4d16:	mov    rbp,rsp
    4d19:	je     4d27 <__do_global_dtors_aux+0x27>
    4d1b:	mov    rdi,QWORD PTR [rip+0x812e6]        # 86008 <__dso_handle>
    4d22:	call   42b0 <__cxa_finalize@plt>
    4d27:	call   4c90 <deregister_tm_clones>
    4d2c:	mov    BYTE PTR [rip+0x83b75],0x1        # 888a8 <completed.8061>
    4d33:	pop    rbp
    4d34:	ret    
    4d35:	nop    DWORD PTR [rax]
    4d38:	ret    
    4d39:	nop    DWORD PTR [rax+0x0]

0000000000004d40 <frame_dummy>:
    4d40:	endbr64 
    4d44:	jmp    4cc0 <register_tm_clones>
    4d49:	nop    DWORD PTR [rax+0x0]

0000000000004d50 <WriteAnnexbNALU>:
    4d50:	endbr64 
    4d54:	mov    eax,DWORD PTR [rdi+0x14]
    4d57:	mov    ecx,DWORD PTR [rdi+0x10]
    4d5a:	xor    edx,edx
    4d5c:	cmp    DWORD PTR [rdi],0x4
    4d5f:	mov    rsi,QWORD PTR [rdi+0x18]
    4d63:	setge  dl
    4d66:	shl    eax,0x7
    4d69:	shl    ecx,0x5
    4d6c:	or     eax,ecx
    4d6e:	or     al,BYTE PTR [rdi+0xc]
    4d71:	mov    BYTE PTR [rsi],al
    4d73:	mov    eax,DWORD PTR [rdi+0x4]
    4d76:	add    eax,edx
    4d78:	lea    eax,[rax*8+0x18]
    4d7f:	ret    

0000000000004d80 <OpenAnnexbFile>:
    4d80:	endbr64 
    4d84:	push   r12
    4d86:	lea    rsi,[rip+0x65277]        # 6a004 <_IO_stdin_used+0x4>
    4d8d:	mov    r12,rdi
    4d90:	call   44c0 <fopen@plt>
    4d95:	mov    QWORD PTR [rip+0x83b14],rax        # 888b0 <f>
    4d9c:	test   rax,rax
    4d9f:	je     4da4 <OpenAnnexbFile+0x24>
    4da1:	pop    r12
    4da3:	ret    
    4da4:	mov    edi,0x1
    4da9:	mov    rdx,r12
    4dac:	lea    rsi,[rip+0x65255]        # 6a008 <_IO_stdin_used+0x8>
    4db3:	call   4490 <__printf_chk@plt>
    4db8:	or     edi,0xffffffff
    4dbb:	call   44e0 <exit@plt>

0000000000004dc0 <CloseAnnexbFile>:
    4dc0:	endbr64 
    4dc4:	sub    rsp,0x8
    4dc8:	mov    rdi,QWORD PTR [rip+0x83ae1]        # 888b0 <f>
    4dcf:	call   4370 <fclose@plt>
    4dd4:	test   eax,eax
    4dd6:	jne    4ddd <CloseAnnexbFile+0x1d>
    4dd8:	add    rsp,0x8
    4ddc:	ret    
    4ddd:	lea    rdi,[rip+0x65264]        # 6a048 <_IO_stdin_used+0x48>
    4de4:	call   4320 <puts@plt>
    4de9:	or     edi,0xffffffff
    4dec:	call   44e0 <exit@plt>
    4df1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4dfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004e00 <arienco_create_encoding_environment>:
    4e00:	endbr64 
    4e04:	sub    rsp,0x18
    4e08:	mov    esi,0x68
    4e0d:	mov    edi,0x1
    4e12:	call   4400 <calloc@plt>
    4e17:	test   rax,rax
    4e1a:	je     4e21 <arienco_create_encoding_environment+0x21>
    4e1c:	add    rsp,0x18
    4e20:	ret    
    4e21:	lea    rdi,[rip+0x65258]        # 6a080 <_IO_stdin_used+0x80>
    4e28:	mov    QWORD PTR [rsp+0x8],rax
    4e2d:	call   38210 <no_mem_exit>
    4e32:	mov    rax,QWORD PTR [rsp+0x8]
    4e37:	jmp    4e1c <arienco_create_encoding_environment+0x1c>
    4e39:	nop    DWORD PTR [rax+0x0]

0000000000004e40 <arienco_delete_encoding_environment>:
    4e40:	endbr64 
    4e44:	test   rdi,rdi
    4e47:	je     4e50 <arienco_delete_encoding_environment+0x10>
    4e49:	jmp    42d0 <free@plt>
    4e4e:	xchg   ax,ax
    4e50:	movdqa xmm0,XMMWORD PTR [rip+0x65468]        # 6a2c0 <rLPS_table_64x4+0x100>
    4e58:	mov    esi,0xc8
    4e5d:	lea    rdi,[rip+0xb013c]        # b4fa0 <errortext>
    4e64:	mov    BYTE PTR [rip+0xb0155],0x0        # b4fc0 <errortext+0x20>
    4e6b:	movups XMMWORD PTR [rip+0xb012e],xmm0        # b4fa0 <errortext>
    4e72:	movdqa xmm0,XMMWORD PTR [rip+0x65456]        # 6a2d0 <rLPS_table_64x4+0x110>
    4e7a:	movups XMMWORD PTR [rip+0xb012f],xmm0        # b4fb0 <errortext+0x10>
    4e81:	jmp    19180 <error>
    4e86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004e90 <arienco_start_encoding>:
    4e90:	endbr64 
    4e94:	movabs rax,0x1fe00000000
    4e9e:	mov    DWORD PTR [rdi+0x10],0x0
    4ea5:	mov    QWORD PTR [rdi],rax
    4ea8:	movabs rax,0x900000000
    4eb2:	mov    QWORD PTR [rdi+0x8],rax
    4eb6:	mov    DWORD PTR [rdi+0x50],0x0
    4ebd:	mov    eax,DWORD PTR [rdx]
    4ebf:	mov    QWORD PTR [rdi+0x18],rsi
    4ec3:	mov    QWORD PTR [rdi+0x20],rdx
    4ec7:	mov    DWORD PTR [rdi+0x60],eax
    4eca:	mov    DWORD PTR [rdi+0x58],0x0
    4ed1:	ret    
    4ed2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4edd:	nop    DWORD PTR [rax]

0000000000004ee0 <arienco_bits_written>:
    4ee0:	endbr64 
    4ee4:	mov    rdx,QWORD PTR [rdi+0x20]
    4ee8:	mov    eax,DWORD PTR [rdi+0x10]
    4eeb:	mov    edx,DWORD PTR [rdx]
    4eed:	add    eax,0x8
    4ef0:	sub    eax,DWORD PTR [rdi+0xc]
    4ef3:	lea    eax,[rax+rdx*8]
    4ef6:	ret    
    4ef7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004f00 <arienco_done_encoding>:
    4f00:	endbr64 
    4f04:	mov    eax,DWORD PTR [rdi+0x8]
    4f07:	mov    r9d,DWORD PTR [rdi]
    4f0a:	mov    ecx,DWORD PTR [rdi+0xc]
    4f0d:	mov    r10,QWORD PTR [rdi+0x20]
    4f11:	lea    edx,[rax+rax*1]
    4f14:	mov    eax,r9d
    4f17:	shr    eax,0x9
    4f1a:	and    eax,0x1
    4f1d:	or     eax,edx
    4f1f:	lea    edx,[rcx-0x1]
    4f22:	mov    DWORD PTR [rdi+0x8],eax
    4f25:	mov    DWORD PTR [rdi+0xc],edx
    4f28:	test   edx,edx
    4f2a:	jne    4f74 <arienco_done_encoding+0x74>
    4f2c:	movsxd rdx,DWORD PTR [r10]
    4f2f:	mov    rcx,QWORD PTR [rdi+0x18]
    4f33:	lea    esi,[rdx+0x1]
    4f36:	mov    DWORD PTR [r10],esi
    4f39:	mov    BYTE PTR [rcx+rdx*1],al
    4f3c:	mov    eax,DWORD PTR [rdi+0x50]
    4f3f:	mov    DWORD PTR [rdi+0xc],0x8
    4f46:	cmp    eax,0x7
    4f49:	jle    4f65 <arienco_done_encoding+0x65>
    4f4b:	sub    eax,0x8
    4f4e:	mov    ecx,DWORD PTR [rdi+0x58]
    4f51:	mov    edx,eax
    4f53:	shr    edx,0x3
    4f56:	lea    ecx,[rdx+rcx*1+0x1]
    4f5a:	neg    edx
    4f5c:	lea    eax,[rax+rdx*8]
    4f5f:	mov    DWORD PTR [rdi+0x58],ecx
    4f62:	mov    DWORD PTR [rdi+0x50],eax
    4f65:	mov    r9d,DWORD PTR [rdi]
    4f68:	mov    r10,QWORD PTR [rdi+0x20]
    4f6c:	mov    edx,0x8
    4f71:	mov    eax,DWORD PTR [rdi+0x8]
    4f74:	mov    r8d,r9d
    4f77:	mov    esi,DWORD PTR [rdi+0x10]
    4f7a:	shr    r8d,0x9
    4f7e:	xor    r8d,0x1
    4f82:	and    r8d,0x1
    4f86:	jmp    4fa5 <arienco_done_encoding+0xa5>
    4f88:	nop    DWORD PTR [rax+rax*1+0x0]
    4f90:	mov    eax,ecx
    4f92:	sub    esi,0x1
    4f95:	mov    DWORD PTR [rdi+0xc],edx
    4f98:	or     eax,r8d
    4f9b:	mov    DWORD PTR [rdi+0x10],esi
    4f9e:	mov    DWORD PTR [rdi+0x8],eax
    4fa1:	test   edx,edx
    4fa3:	je     4f2c <arienco_done_encoding+0x2c>
    4fa5:	lea    ecx,[rax+rax*1]
    4fa8:	mov    eax,edx
    4faa:	sub    edx,0x1
    4fad:	test   esi,esi
    4faf:	jne    4f90 <arienco_done_encoding+0x90>
    4fb1:	shr    r9d,0x8
    4fb5:	mov    DWORD PTR [rdi+0xc],edx
    4fb8:	and    r9d,0x1
    4fbc:	or     ecx,r9d
    4fbf:	mov    DWORD PTR [rdi+0x8],ecx
    4fc2:	test   edx,edx
    4fc4:	je     50e0 <arienco_done_encoding+0x1e0>
    4fca:	sub    eax,0x2
    4fcd:	lea    ecx,[rcx+rcx*1+0x1]
    4fd1:	mov    DWORD PTR [rdi+0x8],ecx
    4fd4:	mov    DWORD PTR [rdi+0xc],eax
    4fd7:	jne    501b <arienco_done_encoding+0x11b>
    4fd9:	movsxd rax,DWORD PTR [r10]
    4fdc:	mov    rdx,QWORD PTR [rdi+0x18]
    4fe0:	lea    esi,[rax+0x1]
    4fe3:	mov    DWORD PTR [r10],esi
    4fe6:	mov    BYTE PTR [rdx+rax*1],cl
    4fe9:	mov    eax,DWORD PTR [rdi+0x50]
    4fec:	mov    DWORD PTR [rdi+0xc],0x8
    4ff3:	cmp    eax,0x7
    4ff6:	jle    5012 <arienco_done_encoding+0x112>
    4ff8:	sub    eax,0x8
    4ffb:	mov    ecx,DWORD PTR [rdi+0x58]
    4ffe:	mov    edx,eax
    5000:	shr    edx,0x3
    5003:	lea    ecx,[rdx+rcx*1+0x1]
    5007:	neg    edx
    5009:	lea    eax,[rax+rdx*8]
    500c:	mov    DWORD PTR [rdi+0x58],ecx
    500f:	mov    DWORD PTR [rdi+0x50],eax
    5012:	mov    r10,QWORD PTR [rdi+0x20]
    5016:	mov    eax,0x8
    501b:	mov    rdx,QWORD PTR [rip+0x8358e]        # 885b0 <img>
    5022:	movsxd rcx,DWORD PTR [rdx+0x18]
    5026:	mov    rdx,QWORD PTR [rip+0x8357b]        # 885a8 <stats>
    502d:	lea    rcx,[rdx+rcx*4]
    5031:	mov    esi,DWORD PTR [rcx+0x530]
    5037:	lea    edx,[rsi+0x8]
    503a:	sub    edx,eax
    503c:	mov    DWORD PTR [rcx+0x530],edx
    5042:	jmp    5059 <arienco_done_encoding+0x159>
    5044:	nop    DWORD PTR [rax+0x0]
    5048:	mov    esi,DWORD PTR [rdi+0x8]
    504b:	sub    eax,0x1
    504e:	mov    DWORD PTR [rdi+0xc],eax
    5051:	lea    edx,[rsi+rsi*1]
    5054:	mov    DWORD PTR [rdi+0x8],edx
    5057:	je     5098 <arienco_done_encoding+0x198>
    5059:	cmp    eax,0x8
    505c:	jne    5048 <arienco_done_encoding+0x148>
    505e:	mov    edx,DWORD PTR [rdi+0x58]
    5061:	mov    eax,DWORD PTR [rdi+0x50]
    5064:	lea    eax,[rax+rdx*8]
    5067:	mov    DWORD PTR [rdi+0x58],eax
    506a:	mov    edx,DWORD PTR [r10]
    506d:	sub    edx,DWORD PTR [rdi+0x60]
    5070:	mov    DWORD PTR [rdi+0x60],edx
    5073:	mov    rdx,QWORD PTR [rip+0x83536]        # 885b0 <img>
    507a:	mov    rcx,QWORD PTR [rdx+0x3750]
    5081:	sub    eax,DWORD PTR [rdx+0xc]
    5084:	add    eax,DWORD PTR [rcx+0xc]
    5087:	add    eax,0x1f
    508a:	sar    eax,0x5
    508d:	mov    DWORD PTR [rdi+0x58],eax
    5090:	ret    
    5091:	nop    DWORD PTR [rax+0x0]
    5098:	movsxd rax,DWORD PTR [r10]
    509b:	mov    rcx,QWORD PTR [rdi+0x18]
    509f:	lea    esi,[rax+0x1]
    50a2:	mov    DWORD PTR [r10],esi
    50a5:	mov    BYTE PTR [rcx+rax*1],dl
    50a8:	mov    eax,DWORD PTR [rdi+0x50]
    50ab:	mov    DWORD PTR [rdi+0xc],0x8
    50b2:	cmp    eax,0x7
    50b5:	jle    50d1 <arienco_done_encoding+0x1d1>
    50b7:	sub    eax,0x8
    50ba:	mov    ecx,DWORD PTR [rdi+0x58]
    50bd:	mov    edx,eax
    50bf:	shr    edx,0x3
    50c2:	lea    ecx,[rdx+rcx*1+0x1]
    50c6:	neg    edx
    50c8:	lea    eax,[rax+rdx*8]
    50cb:	mov    DWORD PTR [rdi+0x58],ecx
    50ce:	mov    DWORD PTR [rdi+0x50],eax
    50d1:	mov    r10,QWORD PTR [rdi+0x20]
    50d5:	jmp    505e <arienco_done_encoding+0x15e>
    50d7:	nop    WORD PTR [rax+rax*1+0x0]
    50e0:	movsxd rax,DWORD PTR [r10]
    50e3:	mov    rdx,QWORD PTR [rdi+0x18]
    50e7:	lea    esi,[rax+0x1]
    50ea:	mov    DWORD PTR [r10],esi
    50ed:	mov    BYTE PTR [rdx+rax*1],cl
    50f0:	mov    eax,DWORD PTR [rdi+0x50]
    50f3:	mov    DWORD PTR [rdi+0xc],0x8
    50fa:	cmp    eax,0x7
    50fd:	jle    5119 <arienco_done_encoding+0x219>
    50ff:	sub    eax,0x8
    5102:	mov    ecx,DWORD PTR [rdi+0x58]
    5105:	mov    edx,eax
    5107:	shr    edx,0x3
    510a:	lea    ecx,[rdx+rcx*1+0x1]
    510e:	neg    edx
    5110:	lea    eax,[rax+rdx*8]
    5113:	mov    DWORD PTR [rdi+0x58],ecx
    5116:	mov    DWORD PTR [rdi+0x50],eax
    5119:	mov    eax,DWORD PTR [rdi+0x8]
    511c:	mov    r10,QWORD PTR [rdi+0x20]
    5120:	mov    DWORD PTR [rdi+0xc],0x7
    5127:	lea    eax,[rax+rax*1+0x1]
    512b:	mov    DWORD PTR [rdi+0x8],eax
    512e:	mov    eax,0x7
    5133:	jmp    501b <arienco_done_encoding+0x11b>
    5138:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005140 <biari_encode_symbol>:
    5140:	endbr64 
    5144:	mov    eax,DWORD PTR [rdi+0x4]
    5147:	lea    r9,[rip+0x65072]        # 6a1c0 <rLPS_table_64x4>
    514e:	mov    r8d,DWORD PTR [rdi]
    5151:	push   rbx
    5152:	movzx  r10d,WORD PTR [rdx]
    5156:	mov    ecx,eax
    5158:	shr    ecx,0x6
    515b:	lea    r9,[r9+r10*4]
    515f:	mov    r11,r10
    5162:	and    ecx,0x3
    5165:	movzx  r9d,BYTE PTR [r9+rcx*1]
    516a:	mov    ecx,DWORD PTR [rip+0x83970]        # 88ae0 <cabac_encoding>
    5170:	test   ecx,ecx
    5172:	je     5179 <biari_encode_symbol+0x39>
    5174:	add    QWORD PTR [rdx+0x8],0x1
    5179:	movzx  ecx,BYTE PTR [rdx+0x2]
    517d:	xor    ebx,ebx
    517f:	sub    eax,r9d
    5182:	test   si,si
    5185:	setne  bl
    5188:	movzx  esi,cl
    518b:	cmp    ebx,esi
    518d:	je     537d <biari_encode_symbol+0x23d>
    5193:	add    r8d,eax
    5196:	test   r11w,r11w
    519a:	je     533d <biari_encode_symbol+0x1fd>
    51a0:	lea    rax,[rip+0x64f19]        # 6a0c0 <AC_next_state_LPS_64>
    51a7:	movzx  eax,WORD PTR [rax+r10*2]
    51ac:	mov    WORD PTR [rdx],ax
    51af:	jmp    51df <biari_encode_symbol+0x9f>
    51b1:	nop    DWORD PTR [rax+0x0]
    51b8:	cmp    r8d,0xff
    51bf:	jbe    5290 <biari_encode_symbol+0x150>
    51c5:	add    DWORD PTR [rdi+0x10],0x1
    51c9:	sub    r8d,0x100
    51d0:	add    r9d,r9d
    51d3:	add    r8d,r8d
    51d6:	cmp    r9d,0xff
    51dd:	ja     5237 <biari_encode_symbol+0xf7>
    51df:	cmp    r8d,0x1ff
    51e6:	jbe    51b8 <biari_encode_symbol+0x78>
    51e8:	sub    DWORD PTR [rdi+0xc],0x1
    51ec:	mov    edx,DWORD PTR [rdi+0x8]
    51ef:	lea    edx,[rdx+rdx*1+0x1]
    51f3:	mov    DWORD PTR [rdi+0x8],edx
    51f6:	je     5310 <biari_encode_symbol+0x1d0>
    51fc:	mov    edx,DWORD PTR [rdi+0x10]
    51ff:	jmp    521d <biari_encode_symbol+0xdd>
    5201:	nop    DWORD PTR [rax+0x0]
    5208:	sub    edx,0x1
    520b:	sub    DWORD PTR [rdi+0xc],0x1
    520f:	mov    eax,DWORD PTR [rdi+0x8]
    5212:	mov    DWORD PTR [rdi+0x10],edx
    5215:	lea    ecx,[rax+rax*1]
    5218:	mov    DWORD PTR [rdi+0x8],ecx
    521b:	je     5248 <biari_encode_symbol+0x108>
    521d:	test   edx,edx
    521f:	jne    5208 <biari_encode_symbol+0xc8>
    5221:	sub    r8d,0x200
    5228:	add    r9d,r9d
    522b:	add    r8d,r8d
    522e:	cmp    r9d,0xff
    5235:	jbe    51df <biari_encode_symbol+0x9f>
    5237:	add    DWORD PTR [rdi+0x50],0x1
    523b:	pop    rbx
    523c:	mov    DWORD PTR [rdi+0x4],r9d
    5240:	mov    DWORD PTR [rdi],r8d
    5243:	ret    
    5244:	nop    DWORD PTR [rax+0x0]
    5248:	mov    rdx,QWORD PTR [rdi+0x20]
    524c:	mov    rsi,QWORD PTR [rdi+0x18]
    5250:	movsxd rax,DWORD PTR [rdx]
    5253:	lea    r10d,[rax+0x1]
    5257:	mov    DWORD PTR [rdx],r10d
    525a:	mov    BYTE PTR [rsi+rax*1],cl
    525d:	mov    eax,DWORD PTR [rdi+0x50]
    5260:	mov    DWORD PTR [rdi+0xc],0x8
    5267:	cmp    eax,0x7
    526a:	jle    51fc <biari_encode_symbol+0xbc>
    526c:	sub    eax,0x8
    526f:	mov    ecx,DWORD PTR [rdi+0x58]
    5272:	mov    edx,eax
    5274:	shr    edx,0x3
    5277:	lea    ecx,[rdx+rcx*1+0x1]
    527b:	neg    edx
    527d:	lea    eax,[rax+rdx*8]
    5280:	mov    DWORD PTR [rdi+0x58],ecx
    5283:	mov    DWORD PTR [rdi+0x50],eax
    5286:	jmp    51fc <biari_encode_symbol+0xbc>
    528b:	nop    DWORD PTR [rax+rax*1+0x0]
    5290:	sub    DWORD PTR [rdi+0xc],0x1
    5294:	mov    eax,DWORD PTR [rdi+0x8]
    5297:	lea    edx,[rax+rax*1]
    529a:	mov    DWORD PTR [rdi+0x8],edx
    529d:	je     5350 <biari_encode_symbol+0x210>
    52a3:	mov    edx,DWORD PTR [rdi+0x10]
    52a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    52b0:	test   edx,edx
    52b2:	je     51d0 <biari_encode_symbol+0x90>
    52b8:	sub    edx,0x1
    52bb:	sub    DWORD PTR [rdi+0xc],0x1
    52bf:	mov    ecx,DWORD PTR [rdi+0x8]
    52c2:	mov    DWORD PTR [rdi+0x10],edx
    52c5:	lea    ecx,[rcx+rcx*1+0x1]
    52c9:	mov    DWORD PTR [rdi+0x8],ecx
    52cc:	jne    52b0 <biari_encode_symbol+0x170>
    52ce:	mov    rdx,QWORD PTR [rdi+0x20]
    52d2:	mov    rsi,QWORD PTR [rdi+0x18]
    52d6:	movsxd rax,DWORD PTR [rdx]
    52d9:	lea    r10d,[rax+0x1]
    52dd:	mov    DWORD PTR [rdx],r10d
    52e0:	mov    BYTE PTR [rsi+rax*1],cl
    52e3:	mov    eax,DWORD PTR [rdi+0x50]
    52e6:	mov    DWORD PTR [rdi+0xc],0x8
    52ed:	cmp    eax,0x7
    52f0:	jle    52a3 <biari_encode_symbol+0x163>
    52f2:	sub    eax,0x8
    52f5:	mov    ecx,DWORD PTR [rdi+0x58]
    52f8:	mov    edx,eax
    52fa:	shr    edx,0x3
    52fd:	lea    ecx,[rdx+rcx*1+0x1]
    5301:	neg    edx
    5303:	lea    eax,[rax+rdx*8]
    5306:	mov    DWORD PTR [rdi+0x58],ecx
    5309:	mov    DWORD PTR [rdi+0x50],eax
    530c:	jmp    52a3 <biari_encode_symbol+0x163>
    530e:	xchg   ax,ax
    5310:	mov    rcx,QWORD PTR [rdi+0x20]
    5314:	mov    rsi,QWORD PTR [rdi+0x18]
    5318:	movsxd rax,DWORD PTR [rcx]
    531b:	lea    r10d,[rax+0x1]
    531f:	mov    DWORD PTR [rcx],r10d
    5322:	mov    BYTE PTR [rsi+rax*1],dl
    5325:	mov    eax,DWORD PTR [rdi+0x50]
    5328:	mov    DWORD PTR [rdi+0xc],0x8
    532f:	cmp    eax,0x7
    5332:	jg     526c <biari_encode_symbol+0x12c>
    5338:	jmp    51fc <biari_encode_symbol+0xbc>
    533d:	xor    ecx,0x1
    5340:	mov    BYTE PTR [rdx+0x2],cl
    5343:	jmp    51a0 <biari_encode_symbol+0x60>
    5348:	nop    DWORD PTR [rax+rax*1+0x0]
    5350:	mov    rcx,QWORD PTR [rdi+0x20]
    5354:	mov    rsi,QWORD PTR [rdi+0x18]
    5358:	movsxd rax,DWORD PTR [rcx]
    535b:	lea    r10d,[rax+0x1]
    535f:	mov    DWORD PTR [rcx],r10d
    5362:	mov    BYTE PTR [rsi+rax*1],dl
    5365:	mov    eax,DWORD PTR [rdi+0x50]
    5368:	mov    DWORD PTR [rdi+0xc],0x8
    536f:	cmp    eax,0x7
    5372:	jg     52f2 <biari_encode_symbol+0x1b2>
    5378:	jmp    52a3 <biari_encode_symbol+0x163>
    537d:	lea    rcx,[rip+0x64dbc]        # 6a140 <AC_next_state_MPS_64>
    5384:	mov    r9d,eax
    5387:	movzx  ecx,WORD PTR [rcx+r10*2]
    538c:	mov    WORD PTR [rdx],cx
    538f:	cmp    eax,0xff
    5394:	jbe    51df <biari_encode_symbol+0x9f>
    539a:	add    DWORD PTR [rdi+0x50],0x1
    539e:	pop    rbx
    539f:	mov    DWORD PTR [rdi+0x4],r9d
    53a3:	mov    DWORD PTR [rdi],r8d
    53a6:	ret    
    53a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000053b0 <biari_encode_symbol_eq_prob>:
    53b0:	endbr64 
    53b4:	mov    eax,DWORD PTR [rdi]
    53b6:	mov    r8d,esi
    53b9:	lea    esi,[rax+rax*1]
    53bc:	test   r8w,r8w
    53c0:	je     53c5 <biari_encode_symbol_eq_prob+0x15>
    53c2:	add    esi,DWORD PTR [rdi+0x4]
    53c5:	cmp    esi,0x3ff
    53cb:	jbe    5468 <biari_encode_symbol_eq_prob+0xb8>
    53d1:	sub    DWORD PTR [rdi+0xc],0x1
    53d5:	mov    edx,DWORD PTR [rdi+0x8]
    53d8:	lea    edx,[rdx+rdx*1+0x1]
    53dc:	mov    DWORD PTR [rdi+0x8],edx
    53df:	je     5420 <biari_encode_symbol_eq_prob+0x70>
    53e1:	mov    edx,DWORD PTR [rdi+0x10]
    53e4:	jmp    5409 <biari_encode_symbol_eq_prob+0x59>
    53e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    53f0:	sub    edx,0x1
    53f3:	sub    DWORD PTR [rdi+0xc],0x1
    53f7:	mov    eax,DWORD PTR [rdi+0x8]
    53fa:	mov    DWORD PTR [rdi+0x10],edx
    53fd:	lea    ecx,[rax+rax*1]
    5400:	mov    DWORD PTR [rdi+0x8],ecx
    5403:	je     54f0 <biari_encode_symbol_eq_prob+0x140>
    5409:	test   edx,edx
    540b:	jne    53f0 <biari_encode_symbol_eq_prob+0x40>
    540d:	sub    esi,0x400
    5413:	add    DWORD PTR [rdi+0x50],0x1
    5417:	mov    DWORD PTR [rdi],esi
    5419:	ret    
    541a:	nop    WORD PTR [rax+rax*1+0x0]
    5420:	mov    rcx,QWORD PTR [rdi+0x20]
    5424:	mov    r8,QWORD PTR [rdi+0x18]
    5428:	movsxd rax,DWORD PTR [rcx]
    542b:	lea    r9d,[rax+0x1]
    542f:	mov    DWORD PTR [rcx],r9d
    5432:	mov    BYTE PTR [r8+rax*1],dl
    5436:	mov    eax,DWORD PTR [rdi+0x50]
    5439:	mov    DWORD PTR [rdi+0xc],0x8
    5440:	cmp    eax,0x7
    5443:	jle    53e1 <biari_encode_symbol_eq_prob+0x31>
    5445:	sub    eax,0x8
    5448:	mov    ecx,DWORD PTR [rdi+0x58]
    544b:	mov    edx,eax
    544d:	shr    edx,0x3
    5450:	lea    ecx,[rdx+rcx*1+0x1]
    5454:	neg    edx
    5456:	lea    eax,[rax+rdx*8]
    5459:	mov    DWORD PTR [rdi+0x58],ecx
    545c:	mov    DWORD PTR [rdi+0x50],eax
    545f:	jmp    53e1 <biari_encode_symbol_eq_prob+0x31>
    5461:	nop    DWORD PTR [rax+0x0]
    5468:	cmp    esi,0x1ff
    546e:	ja     5520 <biari_encode_symbol_eq_prob+0x170>
    5474:	sub    DWORD PTR [rdi+0xc],0x1
    5478:	mov    eax,DWORD PTR [rdi+0x8]
    547b:	lea    edx,[rax+rax*1]
    547e:	mov    DWORD PTR [rdi+0x8],edx
    5481:	je     5538 <biari_encode_symbol_eq_prob+0x188>
    5487:	mov    edx,DWORD PTR [rdi+0x10]
    548a:	nop    WORD PTR [rax+rax*1+0x0]
    5490:	test   edx,edx
    5492:	je     5413 <biari_encode_symbol_eq_prob+0x63>
    5498:	sub    edx,0x1
    549b:	sub    DWORD PTR [rdi+0xc],0x1
    549f:	mov    ecx,DWORD PTR [rdi+0x8]
    54a2:	mov    DWORD PTR [rdi+0x10],edx
    54a5:	lea    ecx,[rcx+rcx*1+0x1]
    54a9:	mov    DWORD PTR [rdi+0x8],ecx
    54ac:	jne    5490 <biari_encode_symbol_eq_prob+0xe0>
    54ae:	mov    rdx,QWORD PTR [rdi+0x20]
    54b2:	mov    r8,QWORD PTR [rdi+0x18]
    54b6:	movsxd rax,DWORD PTR [rdx]
    54b9:	lea    r9d,[rax+0x1]
    54bd:	mov    DWORD PTR [rdx],r9d
    54c0:	mov    BYTE PTR [r8+rax*1],cl
    54c4:	mov    eax,DWORD PTR [rdi+0x50]
    54c7:	mov    DWORD PTR [rdi+0xc],0x8
    54ce:	cmp    eax,0x7
    54d1:	jle    5487 <biari_encode_symbol_eq_prob+0xd7>
    54d3:	sub    eax,0x8
    54d6:	mov    ecx,DWORD PTR [rdi+0x58]
    54d9:	mov    edx,eax
    54db:	shr    edx,0x3
    54de:	lea    ecx,[rdx+rcx*1+0x1]
    54e2:	neg    edx
    54e4:	lea    eax,[rax+rdx*8]
    54e7:	mov    DWORD PTR [rdi+0x58],ecx
    54ea:	mov    DWORD PTR [rdi+0x50],eax
    54ed:	jmp    5487 <biari_encode_symbol_eq_prob+0xd7>
    54ef:	nop
    54f0:	mov    rdx,QWORD PTR [rdi+0x20]
    54f4:	mov    r8,QWORD PTR [rdi+0x18]
    54f8:	movsxd rax,DWORD PTR [rdx]
    54fb:	lea    r9d,[rax+0x1]
    54ff:	mov    DWORD PTR [rdx],r9d
    5502:	mov    BYTE PTR [r8+rax*1],cl
    5506:	mov    eax,DWORD PTR [rdi+0x50]
    5509:	mov    DWORD PTR [rdi+0xc],0x8
    5510:	cmp    eax,0x7
    5513:	jg     5445 <biari_encode_symbol_eq_prob+0x95>
    5519:	jmp    53e1 <biari_encode_symbol_eq_prob+0x31>
    551e:	xchg   ax,ax
    5520:	sub    esi,0x200
    5526:	add    DWORD PTR [rdi+0x10],0x1
    552a:	add    DWORD PTR [rdi+0x50],0x1
    552e:	mov    DWORD PTR [rdi],esi
    5530:	ret    
    5531:	nop    DWORD PTR [rax+0x0]
    5538:	mov    rcx,QWORD PTR [rdi+0x20]
    553c:	mov    r8,QWORD PTR [rdi+0x18]
    5540:	movsxd rax,DWORD PTR [rcx]
    5543:	lea    r9d,[rax+0x1]
    5547:	mov    DWORD PTR [rcx],r9d
    554a:	mov    BYTE PTR [r8+rax*1],dl
    554e:	mov    eax,DWORD PTR [rdi+0x50]
    5551:	mov    DWORD PTR [rdi+0xc],0x8
    5558:	cmp    eax,0x7
    555b:	jg     54d3 <biari_encode_symbol_eq_prob+0x123>
    5561:	jmp    5487 <biari_encode_symbol_eq_prob+0xd7>
    5566:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000005570 <biari_encode_symbol_final>:
    5570:	endbr64 
    5574:	mov    eax,DWORD PTR [rdi+0x4]
    5577:	mov    r9d,esi
    557a:	mov    esi,DWORD PTR [rdi]
    557c:	lea    r8d,[rax-0x2]
    5580:	test   r9w,r9w
    5584:	je     55b3 <biari_encode_symbol_final+0x43>
    5586:	add    esi,r8d
    5589:	mov    r8d,0x2
    558f:	jmp    55c0 <biari_encode_symbol_final+0x50>
    5591:	nop    DWORD PTR [rax+0x0]
    5598:	cmp    esi,0xff
    559e:	jbe    5658 <biari_encode_symbol_final+0xe8>
    55a4:	add    DWORD PTR [rdi+0x10],0x1
    55a8:	sub    esi,0x100
    55ae:	add    esi,esi
    55b0:	add    r8d,r8d
    55b3:	cmp    r8d,0xff
    55ba:	ja     56d0 <biari_encode_symbol_final+0x160>
    55c0:	cmp    esi,0x1ff
    55c6:	jbe    5598 <biari_encode_symbol_final+0x28>
    55c8:	sub    DWORD PTR [rdi+0xc],0x1
    55cc:	mov    edx,DWORD PTR [rdi+0x8]
    55cf:	lea    edx,[rdx+rdx*1+0x1]
    55d3:	mov    DWORD PTR [rdi+0x8],edx
    55d6:	je     56e0 <biari_encode_symbol_final+0x170>
    55dc:	mov    edx,DWORD PTR [rdi+0x10]
    55df:	jmp    55fd <biari_encode_symbol_final+0x8d>
    55e1:	nop    DWORD PTR [rax+0x0]
    55e8:	sub    edx,0x1
    55eb:	sub    DWORD PTR [rdi+0xc],0x1
    55ef:	mov    eax,DWORD PTR [rdi+0x8]
    55f2:	mov    DWORD PTR [rdi+0x10],edx
    55f5:	lea    ecx,[rax+rax*1]
    55f8:	mov    DWORD PTR [rdi+0x8],ecx
    55fb:	je     5610 <biari_encode_symbol_final+0xa0>
    55fd:	test   edx,edx
    55ff:	jne    55e8 <biari_encode_symbol_final+0x78>
    5601:	sub    esi,0x200
    5607:	jmp    55ae <biari_encode_symbol_final+0x3e>
    5609:	nop    DWORD PTR [rax+0x0]
    5610:	mov    rdx,QWORD PTR [rdi+0x20]
    5614:	mov    r9,QWORD PTR [rdi+0x18]
    5618:	movsxd rax,DWORD PTR [rdx]
    561b:	lea    r10d,[rax+0x1]
    561f:	mov    DWORD PTR [rdx],r10d
    5622:	mov    BYTE PTR [r9+rax*1],cl
    5626:	mov    eax,DWORD PTR [rdi+0x50]
    5629:	mov    DWORD PTR [rdi+0xc],0x8
    5630:	cmp    eax,0x7
    5633:	jle    55dc <biari_encode_symbol_final+0x6c>
    5635:	sub    eax,0x8
    5638:	mov    ecx,DWORD PTR [rdi+0x58]
    563b:	mov    edx,eax
    563d:	shr    edx,0x3
    5640:	lea    ecx,[rdx+rcx*1+0x1]
    5644:	neg    edx
    5646:	lea    eax,[rax+rdx*8]
    5649:	mov    DWORD PTR [rdi+0x58],ecx
    564c:	mov    DWORD PTR [rdi+0x50],eax
    564f:	jmp    55dc <biari_encode_symbol_final+0x6c>
    5651:	nop    DWORD PTR [rax+0x0]
    5658:	sub    DWORD PTR [rdi+0xc],0x1
    565c:	mov    eax,DWORD PTR [rdi+0x8]
    565f:	lea    edx,[rax+rax*1]
    5662:	mov    DWORD PTR [rdi+0x8],edx
    5665:	je     5710 <biari_encode_symbol_final+0x1a0>
    566b:	mov    edx,DWORD PTR [rdi+0x10]
    566e:	xchg   ax,ax
    5670:	test   edx,edx
    5672:	je     55ae <biari_encode_symbol_final+0x3e>
    5678:	sub    edx,0x1
    567b:	sub    DWORD PTR [rdi+0xc],0x1
    567f:	mov    ecx,DWORD PTR [rdi+0x8]
    5682:	mov    DWORD PTR [rdi+0x10],edx
    5685:	lea    ecx,[rcx+rcx*1+0x1]
    5689:	mov    DWORD PTR [rdi+0x8],ecx
    568c:	jne    5670 <biari_encode_symbol_final+0x100>
    568e:	mov    rdx,QWORD PTR [rdi+0x20]
    5692:	mov    r9,QWORD PTR [rdi+0x18]
    5696:	movsxd rax,DWORD PTR [rdx]
    5699:	lea    r10d,[rax+0x1]
    569d:	mov    DWORD PTR [rdx],r10d
    56a0:	mov    BYTE PTR [r9+rax*1],cl
    56a4:	mov    eax,DWORD PTR [rdi+0x50]
    56a7:	mov    DWORD PTR [rdi+0xc],0x8
    56ae:	cmp    eax,0x7
    56b1:	jle    566b <biari_encode_symbol_final+0xfb>
    56b3:	sub    eax,0x8
    56b6:	mov    ecx,DWORD PTR [rdi+0x58]
    56b9:	mov    edx,eax
    56bb:	shr    edx,0x3
    56be:	lea    ecx,[rdx+rcx*1+0x1]
    56c2:	neg    edx
    56c4:	lea    eax,[rax+rdx*8]
    56c7:	mov    DWORD PTR [rdi+0x58],ecx
    56ca:	mov    DWORD PTR [rdi+0x50],eax
    56cd:	jmp    566b <biari_encode_symbol_final+0xfb>
    56cf:	nop
    56d0:	add    DWORD PTR [rdi+0x50],0x1
    56d4:	mov    DWORD PTR [rdi+0x4],r8d
    56d8:	mov    DWORD PTR [rdi],esi
    56da:	ret    
    56db:	nop    DWORD PTR [rax+rax*1+0x0]
    56e0:	mov    rcx,QWORD PTR [rdi+0x20]
    56e4:	mov    r9,QWORD PTR [rdi+0x18]
    56e8:	movsxd rax,DWORD PTR [rcx]
    56eb:	lea    r10d,[rax+0x1]
    56ef:	mov    DWORD PTR [rcx],r10d
    56f2:	mov    BYTE PTR [r9+rax*1],dl
    56f6:	mov    eax,DWORD PTR [rdi+0x50]
    56f9:	mov    DWORD PTR [rdi+0xc],0x8
    5700:	cmp    eax,0x7
    5703:	jg     5635 <biari_encode_symbol_final+0xc5>
    5709:	jmp    55dc <biari_encode_symbol_final+0x6c>
    570e:	xchg   ax,ax
    5710:	mov    rcx,QWORD PTR [rdi+0x20]
    5714:	mov    r9,QWORD PTR [rdi+0x18]
    5718:	movsxd rax,DWORD PTR [rcx]
    571b:	lea    r10d,[rax+0x1]
    571f:	mov    DWORD PTR [rcx],r10d
    5722:	mov    BYTE PTR [r9+rax*1],dl
    5726:	mov    eax,DWORD PTR [rdi+0x50]
    5729:	mov    DWORD PTR [rdi+0xc],0x8
    5730:	cmp    eax,0x7
    5733:	jg     56b3 <biari_encode_symbol_final+0x143>
    5739:	jmp    566b <biari_encode_symbol_final+0xfb>
    573e:	xchg   ax,ax

0000000000005740 <biari_init_context>:
    5740:	endbr64 
    5744:	mov    rdx,QWORD PTR [rip+0x82e65]        # 885b0 <img>
    574b:	mov    eax,DWORD PTR [rdx+0x28]
    574e:	test   eax,eax
    5750:	mov    eax,0x0
    5755:	cmovns eax,DWORD PTR [rdx+0x28]
    5759:	imul   eax,DWORD PTR [rsi]
    575c:	sar    eax,0x4
    575f:	add    eax,DWORD PTR [rsi+0x4]
    5762:	cmp    eax,0x7d
    5765:	jg     5780 <biari_init_context+0x40>
    5767:	test   eax,eax
    5769:	mov    edx,0x1
    576e:	cmovg  edx,eax
    5771:	cmp    eax,0x3f
    5774:	jle    5798 <biari_init_context+0x58>
    5776:	lea    eax,[rdx-0x40]
    5779:	jmp    5785 <biari_init_context+0x45>
    577b:	nop    DWORD PTR [rax+rax*1+0x0]
    5780:	mov    eax,0x3e
    5785:	mov    WORD PTR [rdi],ax
    5788:	mov    BYTE PTR [rdi+0x2],0x1
    578c:	mov    QWORD PTR [rdi+0x8],0x0
    5794:	ret    
    5795:	nop    DWORD PTR [rax]
    5798:	mov    eax,0x3f
    579d:	mov    BYTE PTR [rdi+0x2],0x0
    57a1:	sub    eax,edx
    57a3:	mov    QWORD PTR [rdi+0x8],0x0
    57ab:	mov    WORD PTR [rdi],ax
    57ae:	ret    
    57af:	nop

00000000000057b0 <intrapred_luma>:
    57b0:	endbr64 
    57b4:	push   r15
    57b6:	push   r14
    57b8:	push   r13
    57ba:	push   r12
    57bc:	push   rbp
    57bd:	push   rbx
    57be:	sub    rsp,0x148
    57c5:	mov    DWORD PTR [rsp+0x28],edi
    57c9:	and    edi,0xf
    57cc:	lea    rbx,[rsp+0xd0]
    57d4:	lea    rbp,[rsp+0x130]
    57dc:	mov    DWORD PTR [rsp+0x2c],esi
    57e0:	and    esi,0xf
    57e3:	lea    r13d,[rdi-0x1]
    57e7:	mov    r12,rbx
    57ea:	mov    QWORD PTR [rsp+0x10],rdx
    57ef:	mov    r15d,esi
    57f2:	mov    QWORD PTR [rsp+0x18],rcx
    57f7:	mov    QWORD PTR [rsp+0x20],r8
    57fc:	mov    rax,QWORD PTR fs:0x28
    5805:	mov    QWORD PTR [rsp+0x138],rax
    580d:	xor    eax,eax
    580f:	mov    rax,QWORD PTR [rip+0x85192]        # 8a9a8 <enc_picture>
    5816:	mov    DWORD PTR [rsp+0x8],edi
    581a:	mov    DWORD PTR [rsp+0xc],esi
    581e:	mov    rax,QWORD PTR [rax+0x1918]
    5825:	mov    QWORD PTR [rsp],rax
    5829:	mov    rax,QWORD PTR [rip+0x82d80]        # 885b0 <img>
    5830:	mov    r14d,DWORD PTR [rax+0xc]
    5834:	mov    r8,r12
    5837:	mov    edx,r15d
    583a:	mov    ecx,0x1
    583f:	mov    esi,r13d
    5842:	mov    edi,r14d
    5845:	add    r12,0x18
    5849:	add    r15d,0x1
    584d:	call   30ae0 <getNeighbour>
    5852:	cmp    rbp,r12
    5855:	jne    5834 <intrapred_luma+0x84>
    5857:	mov    r12d,DWORD PTR [rsp+0xc]
    585c:	mov    r15d,DWORD PTR [rsp+0x8]
    5861:	lea    r8,[rsp+0x30]
    5866:	mov    edi,r14d
    5869:	mov    ecx,0x1
    586e:	sub    r12d,0x1
    5872:	mov    esi,r15d
    5875:	mov    edx,r12d
    5878:	call   30ae0 <getNeighbour>
    587d:	mov    esi,r15d
    5880:	lea    r8,[rsp+0x50]
    5885:	mov    edx,r12d
    5888:	add    esi,0x4
    588b:	mov    ecx,0x1
    5890:	mov    edi,r14d
    5893:	call   30ae0 <getNeighbour>
    5898:	mov    ecx,0x1
    589d:	mov    edx,r12d
    58a0:	mov    esi,r13d
    58a3:	lea    r8,[rsp+0x70]
    58a8:	mov    edi,r14d
    58ab:	call   30ae0 <getNeighbour>
    58b0:	mov    ecx,DWORD PTR [rsp+0x50]
    58b4:	test   ecx,ecx
    58b6:	je     58d0 <intrapred_luma+0x120>
    58b8:	mov    r14d,DWORD PTR [rsp+0x28]
    58bd:	mov    ecx,0x1
    58c2:	and    r14d,0x7
    58c6:	cmp    r14d,0x4
    58ca:	je     6448 <intrapred_luma+0xc98>
    58d0:	mov    rdi,QWORD PTR [rip+0x82ce1]        # 885b8 <input>
    58d7:	mov    esi,DWORD PTR [rsp+0x30]
    58db:	mov    DWORD PTR [rsp+0x50],ecx
    58df:	mov    rax,QWORD PTR [rip+0x82cca]        # 885b0 <img>
    58e6:	mov    edx,DWORD PTR [rsp+0xd0]
    58ed:	mov    r14d,DWORD PTR [rdi+0xd8]
    58f4:	mov    r8d,DWORD PTR [rsp+0x70]
    58f9:	test   r14d,r14d
    58fc:	je     5978 <intrapred_luma+0x1c8>
    58fe:	mov    edi,0x1
    5903:	test   edx,edx
    5905:	je     5918 <intrapred_luma+0x168>
    5907:	mov    rdx,QWORD PTR [rax+0x11868]
    590e:	movsxd r9,DWORD PTR [rbx+0x4]
    5912:	and    edi,DWORD PTR [rdx+r9*4]
    5916:	mov    edx,edi
    5918:	add    rbx,0x18
    591c:	cmp    rbp,rbx
    591f:	je     5932 <intrapred_luma+0x182>
    5921:	mov    edi,edx
    5923:	mov    edx,DWORD PTR [rbx]
    5925:	test   edx,edx
    5927:	jne    5907 <intrapred_luma+0x157>
    5929:	add    rbx,0x18
    592d:	cmp    rbp,rbx
    5930:	jne    5921 <intrapred_luma+0x171>
    5932:	mov    r10d,edx
    5935:	and    r10d,0x1
    5939:	test   esi,esi
    593b:	jne    6478 <intrapred_luma+0xcc8>
    5941:	xor    edi,edi
    5943:	xor    ebx,ebx
    5945:	test   ecx,ecx
    5947:	je     5959 <intrapred_luma+0x1a9>
    5949:	movsxd r9,DWORD PTR [rsp+0x54]
    594e:	mov    rcx,QWORD PTR [rax+0x11868]
    5955:	mov    ecx,DWORD PTR [rcx+r9*4]
    5959:	test   r8d,r8d
    595c:	je     5a78 <intrapred_luma+0x2c8>
    5962:	movsxd r9,DWORD PTR [rsp+0x74]
    5967:	mov    r8,QWORD PTR [rax+0x11868]
    596e:	mov    r8d,DWORD PTR [r8+r9*4]
    5972:	jmp    5988 <intrapred_luma+0x1d8>
    5974:	nop    DWORD PTR [rax+0x0]
    5978:	test   esi,esi
    597a:	setne  bl
    597d:	test   edx,edx
    597f:	setne  r10b
    5983:	mov    edi,ebx
    5985:	and    edi,r10d
    5988:	mov    r14,QWORD PTR [rsp+0x10]
    598d:	mov    DWORD PTR [r14],edx
    5990:	mov    r14,QWORD PTR [rsp+0x18]
    5995:	mov    DWORD PTR [r14],esi
    5998:	test   dil,dil
    599b:	je     5a91 <intrapred_luma+0x2e1>
    59a1:	test   r8d,r8d
    59a4:	je     64f0 <intrapred_luma+0xd40>
    59aa:	mov    rbx,QWORD PTR [rsp+0x20]
    59af:	mov    ebp,edi
    59b1:	mov    r10d,edi
    59b4:	mov    DWORD PTR [rbx],0x1
    59ba:	mov    ebx,edi
    59bc:	movsxd r9,DWORD PTR [rsp+0x44]
    59c1:	mov    r11,QWORD PTR [rsp]
    59c5:	movsxd r12,DWORD PTR [rsp+0x40]
    59ca:	mov    r11,QWORD PTR [r11+r9*8]
    59ce:	movzx  r13d,WORD PTR [r11+r12*2+0x2]
    59d4:	movzx  r9d,WORD PTR [r11+r12*2]
    59d9:	mov    DWORD PTR [rsp+0x98],r13d
    59e1:	movzx  r13d,WORD PTR [r11+r12*2+0x4]
    59e7:	movzx  r11d,WORD PTR [r11+r12*2+0x6]
    59ed:	mov    DWORD PTR [rsp+0x94],r9d
    59f5:	mov    DWORD PTR [rsp+0x9c],r13d
    59fd:	mov    DWORD PTR [rsp+0xa0],r11d
    5a05:	test   ecx,ecx
    5a07:	jne    5ad7 <intrapred_luma+0x327>
    5a0d:	mov    ecx,DWORD PTR [rsp+0xa0]
    5a14:	mov    DWORD PTR [rsp+0xb0],ecx
    5a1b:	mov    DWORD PTR [rsp+0xac],ecx
    5a22:	mov    DWORD PTR [rsp+0xa8],ecx
    5a29:	mov    DWORD PTR [rsp+0xa4],ecx
    5a30:	test   edx,edx
    5a32:	jne    5b27 <intrapred_luma+0x377>
    5a38:	mov    r11d,DWORD PTR [rax+0x11be8]
    5a3f:	mov    DWORD PTR [rsp+0xc0],r11d
    5a47:	mov    DWORD PTR [rsp+0xbc],r11d
    5a4f:	mov    DWORD PTR [rsp+0xb8],r11d
    5a57:	mov    DWORD PTR [rsp+0xb4],r11d
    5a5f:	test   r8d,r8d
    5a62:	jne    5bb5 <intrapred_luma+0x405>
    5a68:	mov    r15d,DWORD PTR [rax+0x11be8]
    5a6f:	jmp    5bd2 <intrapred_luma+0x422>
    5a74:	nop    DWORD PTR [rax+0x0]
    5a78:	mov    r11,QWORD PTR [rsp+0x10]
    5a7d:	mov    DWORD PTR [r11],edx
    5a80:	mov    r11,QWORD PTR [rsp+0x18]
    5a85:	mov    DWORD PTR [r11],esi
    5a88:	test   dil,dil
    5a8b:	jne    64f0 <intrapred_luma+0xd40>
    5a91:	mov    rdi,QWORD PTR [rsp+0x20]
    5a96:	mov    DWORD PTR [rdi],0x0
    5a9c:	test   esi,esi
    5a9e:	jne    6525 <intrapred_luma+0xd75>
    5aa4:	mov    r9d,DWORD PTR [rax+0x11be8]
    5aab:	xor    ebp,ebp
    5aad:	xor    edi,edi
    5aaf:	mov    DWORD PTR [rsp+0xa0],r9d
    5ab7:	mov    DWORD PTR [rsp+0x9c],r9d
    5abf:	mov    DWORD PTR [rsp+0x98],r9d
    5ac7:	mov    DWORD PTR [rsp+0x94],r9d
    5acf:	test   ecx,ecx
    5ad1:	je     5a0d <intrapred_luma+0x25d>
    5ad7:	movsxd rcx,DWORD PTR [rsp+0x64]
    5adc:	mov    r14,QWORD PTR [rsp]
    5ae0:	movsxd r11,DWORD PTR [rsp+0x60]
    5ae5:	mov    rcx,QWORD PTR [r14+rcx*8]
    5ae9:	movzx  r12d,WORD PTR [rcx+r11*2]
    5aee:	mov    DWORD PTR [rsp+0xa4],r12d
    5af6:	movzx  r12d,WORD PTR [rcx+r11*2+0x2]
    5afc:	mov    DWORD PTR [rsp+0xa8],r12d
    5b04:	movzx  r12d,WORD PTR [rcx+r11*2+0x4]
    5b0a:	movzx  ecx,WORD PTR [rcx+r11*2+0x6]
    5b10:	mov    DWORD PTR [rsp+0xac],r12d
    5b18:	mov    DWORD PTR [rsp+0xb0],ecx
    5b1f:	test   edx,edx
    5b21:	je     5a38 <intrapred_luma+0x288>
    5b27:	mov    r14,QWORD PTR [rsp]
    5b2b:	movsxd rcx,DWORD PTR [rsp+0xe4]
    5b33:	movsxd r11,DWORD PTR [rsp+0xe0]
    5b3b:	movsxd r12,DWORD PTR [rsp+0xf8]
    5b43:	mov    rcx,QWORD PTR [r14+rcx*8]
    5b47:	movzx  r11d,WORD PTR [rcx+r11*2]
    5b4c:	movsxd rcx,DWORD PTR [rsp+0xfc]
    5b54:	mov    rcx,QWORD PTR [r14+rcx*8]
    5b58:	mov    DWORD PTR [rsp+0xb4],r11d
    5b60:	movzx  ecx,WORD PTR [rcx+r12*2]
    5b65:	movsxd r12,DWORD PTR [rsp+0x110]
    5b6d:	mov    DWORD PTR [rsp+0xb8],ecx
    5b74:	movsxd rcx,DWORD PTR [rsp+0x114]
    5b7c:	mov    rcx,QWORD PTR [r14+rcx*8]
    5b80:	movzx  ecx,WORD PTR [rcx+r12*2]
    5b85:	movsxd r12,DWORD PTR [rsp+0x128]
    5b8d:	mov    DWORD PTR [rsp+0xbc],ecx
    5b94:	movsxd rcx,DWORD PTR [rsp+0x12c]
    5b9c:	mov    rcx,QWORD PTR [r14+rcx*8]
    5ba0:	movzx  ecx,WORD PTR [rcx+r12*2]
    5ba5:	mov    DWORD PTR [rsp+0xc0],ecx
    5bac:	test   r8d,r8d
    5baf:	je     5a68 <intrapred_luma+0x2b8>
    5bb5:	movsxd rcx,DWORD PTR [rsp+0x84]
    5bbd:	mov    r14,QWORD PTR [rsp]
    5bc1:	movsxd r8,DWORD PTR [rsp+0x80]
    5bc9:	mov    rcx,QWORD PTR [r14+rcx*8]
    5bcd:	movzx  r15d,WORD PTR [rcx+r8*2]
    5bd2:	mov    DWORD PTR [rsp+0x90],r15d
    5bda:	lea    r8,[rax+0xb8]
    5be1:	lea    r12,[rax+0x12b8]
    5be8:	mov    rcx,r8
    5beb:	nop    DWORD PTR [rax+rax*1+0x0]
    5bf0:	mov    r13d,0xffffffff
    5bf6:	add    rcx,0x200
    5bfd:	mov    WORD PTR [rcx-0x200],r13w
    5c05:	cmp    r12,rcx
    5c08:	jne    5bf0 <intrapred_luma+0x440>
    5c0a:	test   dil,dil
    5c0d:	je     6408 <intrapred_luma+0xc58>
    5c13:	mov    ecx,DWORD PTR [rsp+0x98]
    5c1a:	add    ecx,r9d
    5c1d:	add    ecx,DWORD PTR [rsp+0x9c]
    5c24:	add    ecx,DWORD PTR [rsp+0xa0]
    5c2b:	add    ecx,r11d
    5c2e:	add    ecx,DWORD PTR [rsp+0xb8]
    5c35:	add    ecx,DWORD PTR [rsp+0xbc]
    5c3c:	add    ecx,DWORD PTR [rsp+0xc0]
    5c43:	lea    edi,[rcx+0xb]
    5c46:	add    ecx,0x4
    5c49:	cmovns edi,ecx
    5c4c:	sar    edi,0x3
    5c4f:	lea    rcx,[rax+0x4b8]
    5c56:	lea    r10,[rax+0x4c0]
    5c5d:	mov    WORD PTR [rcx],di
    5c60:	add    rcx,0x2
    5c64:	mov    WORD PTR [rcx+0x1e],di
    5c68:	mov    WORD PTR [rcx+0x3e],di
    5c6c:	mov    WORD PTR [rcx+0x5e],di
    5c70:	cmp    r10,rcx
    5c73:	jne    5c5d <intrapred_luma+0x4ad>
    5c75:	lea    rcx,[rax+0x2b8]
    5c7c:	lea    rbx,[rsp+0x90]
    5c84:	mov    r10d,r11d
    5c87:	mov    edi,r9d
    5c8a:	lea    r12,[rsp+0xa0]
    5c92:	add    rbx,0x4
    5c96:	mov    WORD PTR [r8],di
    5c9a:	add    rcx,0x20
    5c9e:	add    r8,0x2
    5ca2:	mov    WORD PTR [r8+0x5e],di
    5ca7:	mov    WORD PTR [r8+0x3e],di
    5cac:	mov    WORD PTR [r8+0x1e],di
    5cb1:	mov    WORD PTR [rcx-0x1a],r10w
    5cb6:	mov    WORD PTR [rcx-0x1c],r10w
    5cbb:	mov    WORD PTR [rcx-0x1e],r10w
    5cc0:	mov    WORD PTR [rcx-0x20],r10w
    5cc5:	cmp    r12,rbx
    5cc8:	je     5cd8 <intrapred_luma+0x528>
    5cca:	mov    edi,DWORD PTR [rbx+0x4]
    5ccd:	mov    r10d,DWORD PTR [rbx+0x24]
    5cd1:	jmp    5c92 <intrapred_luma+0x4e2>
    5cd3:	nop    DWORD PTR [rax+rax*1+0x0]
    5cd8:	test   esi,esi
    5cda:	jne    5e10 <intrapred_luma+0x660>
    5ce0:	mov    edi,0xffffffff
    5ce5:	mov    WORD PTR [rax+0xb8],di
    5cec:	test   edx,edx
    5cee:	je     64a0 <intrapred_luma+0xcf0>
    5cf4:	mov    edx,DWORD PTR [rsp+0xb8]
    5cfb:	lea    ecx,[rdx+r11*1]
    5cff:	lea    edi,[rcx+0x1]
    5d02:	add    ecx,edx
    5d04:	mov    esi,edi
    5d06:	shr    esi,0x1f
    5d09:	add    esi,edi
    5d0b:	sar    esi,1
    5d0d:	mov    WORD PTR [rax+0x10b8],si
    5d14:	mov    esi,DWORD PTR [rsp+0xbc]
    5d1b:	add    ecx,esi
    5d1d:	lea    edi,[rcx+0x5]
    5d20:	add    ecx,0x2
    5d23:	cmovs  ecx,edi
    5d26:	add    edx,esi
    5d28:	lea    edi,[rdx+0x1]
    5d2b:	add    edx,esi
    5d2d:	sar    ecx,0x2
    5d30:	mov    WORD PTR [rax+0x10ba],cx
    5d37:	mov    ecx,edi
    5d39:	shr    ecx,0x1f
    5d3c:	add    ecx,edi
    5d3e:	sar    ecx,1
    5d40:	mov    WORD PTR [rax+0x10d8],cx
    5d47:	mov    WORD PTR [rax+0x10bc],cx
    5d4e:	mov    ecx,DWORD PTR [rsp+0xc0]
    5d55:	add    edx,ecx
    5d57:	mov    WORD PTR [rax+0x111e],cx
    5d5e:	lea    edi,[rdx+0x5]
    5d61:	add    edx,0x2
    5d64:	mov    WORD PTR [rax+0x111c],cx
    5d6b:	cmovs  edx,edi
    5d6e:	add    esi,ecx
    5d70:	mov    WORD PTR [rax+0x111a],cx
    5d77:	lea    edi,[rsi+0x1]
    5d7a:	lea    esi,[rsi+rcx*2]
    5d7d:	mov    WORD PTR [rax+0x10fe],cx
    5d84:	sar    edx,0x2
    5d87:	mov    WORD PTR [rax+0x10fc],cx
    5d8e:	mov    WORD PTR [rax+0x10da],dx
    5d95:	mov    WORD PTR [rax+0x10be],dx
    5d9c:	mov    edx,edi
    5d9e:	shr    edx,0x1f
    5da1:	mov    WORD PTR [rax+0x1118],cx
    5da8:	add    edx,edi
    5daa:	sar    edx,1
    5dac:	mov    WORD PTR [rax+0x10f8],dx
    5db3:	mov    WORD PTR [rax+0x10dc],dx
    5dba:	lea    edx,[rsi+0x5]
    5dbd:	add    esi,0x2
    5dc0:	cmovns edx,esi
    5dc3:	sar    edx,0x2
    5dc6:	mov    WORD PTR [rax+0x10fa],dx
    5dcd:	mov    WORD PTR [rax+0x10de],dx
    5dd4:	test   bpl,bpl
    5dd7:	jne    60c3 <intrapred_luma+0x913>
    5ddd:	mov    rax,QWORD PTR [rsp+0x138]
    5de5:	xor    rax,QWORD PTR fs:0x28
    5dee:	jne    6520 <intrapred_luma+0xd70>
    5df4:	add    rsp,0x148
    5dfb:	pop    rbx
    5dfc:	pop    rbp
    5dfd:	pop    r12
    5dff:	pop    r13
    5e01:	pop    r14
    5e03:	pop    r15
    5e05:	ret    
    5e06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    5e10:	test   edx,edx
    5e12:	je     6460 <intrapred_luma+0xcb0>
    5e18:	mov    edi,DWORD PTR [rsp+0x9c]
    5e1f:	mov    r10d,DWORD PTR [rsp+0x98]
    5e27:	mov    r14d,DWORD PTR [rsp+0xac]
    5e2f:	lea    ecx,[rdi+r9*1]
    5e33:	lea    esi,[rcx+r10*2]
    5e37:	lea    ecx,[rsi+0x5]
    5e3a:	add    esi,0x2
    5e3d:	cmovns ecx,esi
    5e40:	mov    esi,DWORD PTR [rsp+0xa0]
    5e47:	sar    ecx,0x2
    5e4a:	mov    WORD PTR [rax+0x6b8],cx
    5e51:	lea    ecx,[r10+rsi*1]
    5e55:	lea    r8d,[rcx+rdi*2]
    5e59:	lea    ecx,[r8+0x5]
    5e5d:	add    r8d,0x2
    5e61:	cmovns ecx,r8d
    5e65:	sar    ecx,0x2
    5e68:	mov    WORD PTR [rax+0x6d8],cx
    5e6f:	mov    WORD PTR [rax+0x6ba],cx
    5e76:	mov    ecx,DWORD PTR [rsp+0xa4]
    5e7d:	lea    r8d,[rdi+rcx*1]
    5e81:	lea    ebx,[r8+rsi*2]
    5e85:	lea    r8d,[rbx+0x5]
    5e89:	add    ebx,0x2
    5e8c:	cmovns r8d,ebx
    5e90:	sar    r8d,0x2
    5e94:	mov    WORD PTR [rax+0x6f8],r8w
    5e9c:	mov    WORD PTR [rax+0x6da],r8w
    5ea4:	mov    WORD PTR [rax+0x6bc],r8w
    5eac:	mov    r8d,DWORD PTR [rsp+0xa8]
    5eb4:	lea    ebx,[rsi+r8*1]
    5eb8:	lea    r12d,[rbx+rcx*2]
    5ebc:	lea    ebx,[r12+0x5]
    5ec1:	add    r12d,0x2
    5ec5:	cmovns ebx,r12d
    5ec9:	sar    ebx,0x2
    5ecc:	mov    WORD PTR [rax+0x718],bx
    5ed3:	mov    WORD PTR [rax+0x6fa],bx
    5eda:	mov    WORD PTR [rax+0x6dc],bx
    5ee1:	mov    WORD PTR [rax+0x6be],bx
    5ee8:	mov    ebx,DWORD PTR [rsp+0xac]
    5eef:	add    ebx,ecx
    5ef1:	lea    r12d,[rbx+r8*2]
    5ef5:	lea    ebx,[r12+0x5]
    5efa:	add    r12d,0x2
    5efe:	cmovns ebx,r12d
    5f02:	mov    r12d,DWORD PTR [rsp+0xb0]
    5f0a:	sar    ebx,0x2
    5f0d:	mov    WORD PTR [rax+0x71a],bx
    5f14:	mov    WORD PTR [rax+0x6fc],bx
    5f1b:	mov    WORD PTR [rax+0x6de],bx
    5f22:	lea    ebx,[r8+r12*1]
    5f26:	lea    r13d,[rbx+r14*2]
    5f2a:	lea    ebx,[r13+0x5]
    5f2e:	add    r13d,0x2
    5f32:	cmovns ebx,r13d
    5f36:	sar    ebx,0x2
    5f39:	mov    WORD PTR [rax+0x71c],bx
    5f40:	mov    WORD PTR [rax+0x6fe],bx
    5f47:	lea    ebx,[r12+r12*2]
    5f4b:	add    ebx,r14d
    5f4e:	lea    r14d,[r10+r9*1]
    5f52:	lea    r12d,[rbx+0x5]
    5f56:	add    ebx,0x2
    5f59:	cmovs  ebx,r12d
    5f5d:	lea    r12d,[r14+0x1]
    5f61:	sar    ebx,0x2
    5f64:	mov    WORD PTR [rax+0x71e],bx
    5f6b:	mov    ebx,r12d
    5f6e:	shr    ebx,0x1f
    5f71:	add    ebx,r12d
    5f74:	sar    ebx,1
    5f76:	mov    WORD PTR [rax+0xeb8],bx
    5f7d:	lea    ebx,[rdi+r10*1]
    5f81:	add    r10d,r14d
    5f84:	lea    r12d,[rbx+0x1]
    5f88:	mov    DWORD PTR [rsp],ebx
    5f8b:	add    r10d,edi
    5f8e:	mov    r13d,r12d
    5f91:	shr    r13d,0x1f
    5f95:	mov    ebx,r13d
    5f98:	lea    r13d,[rdi+rsi*1]
    5f9c:	add    ebx,r12d
    5f9f:	lea    r12d,[r13+0x1]
    5fa3:	mov    DWORD PTR [rsp+0x8],r13d
    5fa8:	mov    r13d,r12d
    5fab:	sar    ebx,1
    5fad:	shr    r13d,0x1f
    5fb1:	mov    WORD PTR [rax+0xef8],bx
    5fb8:	mov    WORD PTR [rax+0xeba],bx
    5fbf:	mov    ebx,r13d
    5fc2:	lea    r13d,[rsi+rcx*1]
    5fc6:	add    ebx,r12d
    5fc9:	lea    r12d,[r13+0x1]
    5fcd:	sar    ebx,1
    5fcf:	mov    WORD PTR [rax+0xefa],bx
    5fd6:	mov    WORD PTR [rax+0xebc],bx
    5fdd:	mov    ebx,r12d
    5fe0:	shr    ebx,0x1f
    5fe3:	add    ebx,r12d
    5fe6:	sar    ebx,1
    5fe8:	mov    WORD PTR [rax+0xefc],bx
    5fef:	mov    WORD PTR [rax+0xebe],bx
    5ff6:	lea    ebx,[rcx+r8*1]
    5ffa:	mov    DWORD PTR [rsp+0xc],ebx
    5ffe:	add    ebx,0x1
    6001:	mov    r12d,ebx
    6004:	shr    r12d,0x1f
    6008:	add    ebx,r12d
    600b:	sar    ebx,1
    600d:	mov    WORD PTR [rax+0xefe],bx
    6014:	lea    ebx,[r10+0x5]
    6018:	add    r10d,0x2
    601c:	cmovs  r10d,ebx
    6020:	add    edi,DWORD PTR [rsp]
    6023:	add    edi,esi
    6025:	sar    r10d,0x2
    6029:	mov    WORD PTR [rax+0xed8],r10w
    6031:	lea    r10d,[rdi+0x5]
    6035:	add    edi,0x2
    6038:	cmovs  edi,r10d
    603c:	add    esi,DWORD PTR [rsp+0x8]
    6040:	add    esi,ecx
    6042:	sar    edi,0x2
    6045:	mov    WORD PTR [rax+0xf18],di
    604c:	mov    WORD PTR [rax+0xeda],di
    6053:	lea    edi,[rsi+0x5]
    6056:	add    esi,0x2
    6059:	cmovs  esi,edi
    605c:	add    ecx,r13d
    605f:	add    ecx,r8d
    6062:	sar    esi,0x2
    6065:	mov    WORD PTR [rax+0xf1a],si
    606c:	mov    WORD PTR [rax+0xedc],si
    6073:	lea    esi,[rcx+0x5]
    6076:	add    ecx,0x2
    6079:	cmovs  ecx,esi
    607c:	add    r8d,DWORD PTR [rsp+0xc]
    6081:	add    r8d,DWORD PTR [rsp+0xac]
    6089:	sar    ecx,0x2
    608c:	mov    WORD PTR [rax+0xf1c],cx
    6093:	mov    WORD PTR [rax+0xede],cx
    609a:	lea    ecx,[r8+0x5]
    609e:	add    r8d,0x2
    60a2:	cmovs  r8d,ecx
    60a6:	sar    r8d,0x2
    60aa:	mov    WORD PTR [rax+0xf1e],r8w
    60b2:	test   edx,edx
    60b4:	jne    5cf4 <intrapred_luma+0x544>
    60ba:	test   bpl,bpl
    60bd:	je     5ddd <intrapred_luma+0x62d>
    60c3:	mov    edx,DWORD PTR [rsp+0xbc]
    60ca:	mov    esi,DWORD PTR [rsp+0xc0]
    60d1:	lea    edi,[r11+r11*1]
    60d5:	mov    ebp,DWORD PTR [rsp+0xb8]
    60dc:	mov    r14d,DWORD PTR [rsp+0x98]
    60e4:	mov    DWORD PTR [rsp+0xc],edi
    60e8:	lea    esi,[rsi+rdx*2]
    60eb:	mov    r8d,DWORD PTR [rsp+0x9c]
    60f3:	mov    r13d,DWORD PTR [rsp+0xa0]
    60fb:	mov    DWORD PTR [rsp],esi
    60fe:	add    esi,ebp
    6100:	lea    r12d,[rbp+rbp*1+0x0]
    6105:	lea    r10d,[r9+r14*2]
    6109:	lea    ecx,[rsi+0x5]
    610c:	add    esi,0x2
    610f:	lea    ebx,[rdx+r12*1]
    6113:	cmovns ecx,esi
    6116:	lea    esi,[rbx+r11*1]
    611a:	mov    DWORD PTR [rsp+0x8],ebx
    611e:	lea    ebx,[r15+r9*2]
    6122:	sar    ecx,0x2
    6125:	mov    WORD PTR [rax+0x918],cx
    612c:	lea    ecx,[rsi+0x5]
    612f:	add    esi,0x2
    6132:	cmovns ecx,esi
    6135:	lea    esi,[rbp+rdi*1+0x0]
    6139:	add    esi,r15d
    613c:	sar    ecx,0x2
    613f:	mov    WORD PTR [rax+0x91a],cx
    6146:	mov    WORD PTR [rax+0x8f8],cx
    614d:	lea    ecx,[rsi+0x5]
    6150:	add    esi,0x2
    6153:	cmovns ecx,esi
    6156:	sar    ecx,0x2
    6159:	mov    WORD PTR [rax+0x91c],cx
    6160:	mov    WORD PTR [rax+0x8fa],cx
    6167:	mov    WORD PTR [rax+0x8d8],cx
    616e:	lea    ecx,[r11+r15*2]
    6172:	add    ecx,r9d
    6175:	lea    esi,[rcx+0x5]
    6178:	add    ecx,0x2
    617b:	cmovs  ecx,esi
    617e:	lea    esi,[rbx+r14*1]
    6182:	lea    edi,[rsi+0x5]
    6185:	sar    ecx,0x2
    6188:	add    esi,0x2
    618b:	cmovs  esi,edi
    618e:	add    r8d,r10d
    6191:	mov    WORD PTR [rax+0x91e],cx
    6198:	mov    edi,r8d
    619b:	lea    r8d,[r8+0x5]
    619f:	mov    WORD PTR [rax+0x8fc],cx
    61a6:	sar    esi,0x2
    61a9:	add    edi,0x2
    61ac:	mov    WORD PTR [rax+0x8da],cx
    61b3:	cmovs  edi,r8d
    61b7:	mov    r8d,DWORD PTR [rsp+0x9c]
    61bf:	mov    WORD PTR [rax+0x8b8],cx
    61c6:	mov    WORD PTR [rax+0x8fe],si
    61cd:	lea    r8d,[r14+r8*2]
    61d1:	sar    edi,0x2
    61d4:	mov    WORD PTR [rax+0x8dc],si
    61db:	add    r13d,r8d
    61de:	mov    DWORD PTR [rsp+0x10],r8d
    61e3:	lea    r8d,[r13+0x5]
    61e7:	add    r13d,0x2
    61eb:	mov    WORD PTR [rax+0x8ba],si
    61f2:	cmovs  r13d,r8d
    61f6:	sub    ebx,r9d
    61f9:	sub    r10d,r14d
    61fc:	mov    WORD PTR [rax+0x8de],di
    6203:	lea    r9d,[rbx+0x1]
    6207:	mov    WORD PTR [rax+0x8bc],di
    620e:	mov    r8d,DWORD PTR [rsp+0x10]
    6213:	mov    ebx,r9d
    6216:	sar    r13d,0x2
    621a:	shr    ebx,0x1f
    621d:	mov    WORD PTR [rax+0x8be],r13w
    6225:	add    r9d,ebx
    6228:	sar    r9d,1
    622b:	mov    WORD PTR [rax+0xafa],r9w
    6233:	mov    WORD PTR [rax+0xab8],r9w
    623b:	lea    r9d,[r10+0x1]
    623f:	mov    r10d,r9d
    6242:	shr    r10d,0x1f
    6246:	add    r9d,r10d
    6249:	sar    r9d,1
    624c:	mov    WORD PTR [rax+0xafc],r9w
    6254:	mov    WORD PTR [rax+0xaba],r9w
    625c:	sub    r8d,DWORD PTR [rsp+0x9c]
    6264:	add    r8d,0x1
    6268:	mov    r14d,DWORD PTR [rsp+0x9c]
    6270:	mov    r10d,DWORD PTR [rsp+0xa0]
    6278:	mov    WORD PTR [rax+0xb1a],cx
    627f:	mov    r9d,r8d
    6282:	mov    WORD PTR [rax+0xad8],cx
    6289:	shr    r9d,0x1f
    628d:	mov    WORD PTR [rax+0xcde],cx
    6294:	add    r8d,r9d
    6297:	lea    r9d,[r14+r10*1+0x1]
    629c:	lea    r10d,[r12+r11*1]
    62a0:	mov    WORD PTR [rax+0xcba],cx
    62a7:	sar    r8d,1
    62aa:	mov    WORD PTR [rax+0xb1e],di
    62b1:	mov    WORD PTR [rax+0xafe],r8w
    62b9:	mov    WORD PTR [rax+0xabc],r8w
    62c1:	mov    r8d,r9d
    62c4:	shr    r8d,0x1f
    62c8:	mov    WORD PTR [rax+0xadc],di
    62cf:	add    r8d,r9d
    62d2:	mov    r9d,DWORD PTR [rsp+0xc]
    62d7:	mov    WORD PTR [rax+0xcbe],di
    62de:	sar    r8d,1
    62e1:	mov    WORD PTR [rax+0xb1c],si
    62e8:	lea    ebx,[r9+r15*1]
    62ec:	mov    WORD PTR [rax+0xabe],r8w
    62f4:	lea    r8d,[rbp+rbx*1+0x0]
    62f9:	mov    WORD PTR [rax+0xada],si
    6300:	lea    r9d,[r8+0x5]
    6304:	add    r8d,0x2
    6308:	mov    WORD PTR [rax+0xcbc],si
    630f:	cmovns r9d,r8d
    6313:	lea    r8d,[rdx+r10*1]
    6317:	mov    WORD PTR [rax+0xade],r13w
    631f:	lea    r12d,[r8+0x5]
    6323:	sar    r9d,0x2
    6327:	add    r8d,0x2
    632b:	cmovs  r8d,r12d
    632f:	sub    ebx,r11d
    6332:	sub    r10d,ebp
    6335:	mov    WORD PTR [rax+0xaf8],r9w
    633d:	lea    r11d,[rbx+0x1]
    6341:	lea    ecx,[r10+0x1]
    6345:	mov    ebx,DWORD PTR [rsp+0x8]
    6349:	mov    WORD PTR [rax+0xcfe],r9w
    6351:	mov    edi,ecx
    6353:	mov    r14d,r11d
    6356:	sar    r8d,0x2
    635a:	mov    WORD PTR [rax+0xcda],r9w
    6362:	sub    ebx,ebp
    6364:	shr    edi,0x1f
    6367:	mov    WORD PTR [rax+0xb18],r8w
    636f:	add    ecx,edi
    6371:	lea    edi,[rbx+0x1]
    6374:	mov    esi,ebx
    6376:	shr    r14d,0x1f
    637a:	mov    ebx,edi
    637c:	sar    ecx,1
    637e:	add    r11d,r14d
    6381:	mov    WORD PTR [rax+0xd1e],r8w
    6389:	shr    ebx,0x1f
    638c:	mov    WORD PTR [rax+0xcfc],cx
    6393:	sar    r11d,1
    6396:	mov    WORD PTR [rax+0xcd8],cx
    639d:	mov    ecx,ebx
    639f:	add    ecx,edi
    63a1:	mov    WORD PTR [rax+0xcdc],r11w
    63a9:	sar    ecx,1
    63ab:	mov    WORD PTR [rax+0xcb8],r11w
    63b3:	mov    WORD PTR [rax+0xd1c],cx
    63ba:	mov    WORD PTR [rax+0xcf8],cx
    63c1:	mov    ecx,DWORD PTR [rsp]
    63c4:	mov    WORD PTR [rax+0xcfa],r8w
    63cc:	sub    ecx,edx
    63ce:	add    edx,esi
    63d0:	add    ecx,0x1
    63d3:	mov    edi,ecx
    63d5:	shr    edi,0x1f
    63d8:	add    ecx,edi
    63da:	sar    ecx,1
    63dc:	mov    WORD PTR [rax+0xd18],cx
    63e3:	add    edx,DWORD PTR [rsp+0xc0]
    63ea:	lea    ecx,[rdx+0x5]
    63ed:	add    edx,0x2
    63f0:	cmovs  edx,ecx
    63f3:	sar    edx,0x2
    63f6:	mov    WORD PTR [rax+0xd1a],dx
    63fd:	jmp    5ddd <intrapred_luma+0x62d>
    6402:	nop    WORD PTR [rax+rax*1+0x0]
    6408:	test   esi,esi
    640a:	jne    64b8 <intrapred_luma+0xd08>
    6410:	test   r10b,r10b
    6413:	je     64b8 <intrapred_luma+0xd08>
    6419:	mov    ecx,DWORD PTR [rsp+0xb8]
    6420:	add    ecx,r11d
    6423:	add    ecx,DWORD PTR [rsp+0xbc]
    642a:	add    ecx,DWORD PTR [rsp+0xc0]
    6431:	lea    edi,[rcx+0x5]
    6434:	add    ecx,0x2
    6437:	cmovns edi,ecx
    643a:	sar    edi,0x2
    643d:	jmp    5c4f <intrapred_luma+0x49f>
    6442:	nop    WORD PTR [rax+rax*1+0x0]
    6448:	mov    esi,DWORD PTR [rsp+0x2c]
    644c:	xor    ecx,ecx
    644e:	and    esi,0x7
    6451:	cmp    esi,0x4
    6454:	setne  cl
    6457:	jmp    58d0 <intrapred_luma+0x120>
    645c:	nop    DWORD PTR [rax+0x0]
    6460:	mov    ecx,0xffffffff
    6465:	mov    WORD PTR [rax+0x2b8],cx
    646c:	jmp    5e18 <intrapred_luma+0x668>
    6471:	nop    DWORD PTR [rax+0x0]
    6478:	movsxd rdi,DWORD PTR [rsp+0x34]
    647d:	mov    rsi,QWORD PTR [rax+0x11868]
    6484:	mov    esi,DWORD PTR [rsi+rdi*4]
    6487:	test   esi,esi
    6489:	setne  bl
    648c:	mov    edi,ebx
    648e:	and    edi,r10d
    6491:	jmp    5945 <intrapred_luma+0x195>
    6496:	nop    WORD PTR cs:[rax+rax*1+0x0]
    64a0:	mov    esi,0xffffffff
    64a5:	mov    WORD PTR [rax+0x2b8],si
    64ac:	jmp    5dd4 <intrapred_luma+0x624>
    64b1:	nop    DWORD PTR [rax+0x0]
    64b8:	test   edx,edx
    64ba:	jne    6515 <intrapred_luma+0xd65>
    64bc:	test   bl,bl
    64be:	je     6515 <intrapred_luma+0xd65>
    64c0:	mov    ecx,DWORD PTR [rsp+0x98]
    64c7:	add    ecx,r9d
    64ca:	add    ecx,DWORD PTR [rsp+0x9c]
    64d1:	add    ecx,DWORD PTR [rsp+0xa0]
    64d8:	lea    edi,[rcx+0x5]
    64db:	add    ecx,0x2
    64de:	cmovns edi,ecx
    64e1:	sar    edi,0x2
    64e4:	jmp    5c4f <intrapred_luma+0x49f>
    64e9:	nop    DWORD PTR [rax+0x0]
    64f0:	mov    rbx,QWORD PTR [rsp+0x20]
    64f5:	xor    ebp,ebp
    64f7:	xor    r8d,r8d
    64fa:	mov    edi,0x1
    64ff:	mov    r10d,0x1
    6505:	mov    DWORD PTR [rbx],0x0
    650b:	mov    ebx,0x1
    6510:	jmp    59bc <intrapred_luma+0x20c>
    6515:	mov    edi,DWORD PTR [rax+0x11be8]
    651b:	jmp    5c4f <intrapred_luma+0x49f>
    6520:	call   4390 <__stack_chk_fail@plt>
    6525:	xor    ebp,ebp
    6527:	xor    edi,edi
    6529:	jmp    59bc <intrapred_luma+0x20c>
    652e:	xchg   ax,ax

0000000000006530 <intrapred_luma_16x16>:
    6530:	endbr64 
    6534:	push   r15
    6536:	push   r14
    6538:	mov    r14d,0xffffffff
    653e:	push   r13
    6540:	push   r12
    6542:	push   rbp
    6543:	push   rbx
    6544:	sub    rsp,0x258
    654b:	mov    rax,QWORD PTR fs:0x28
    6554:	mov    QWORD PTR [rsp+0x248],rax
    655c:	xor    eax,eax
    655e:	mov    rax,QWORD PTR [rip+0x84443]        # 8a9a8 <enc_picture>
    6565:	lea    r12,[rsp+0xb0]
    656d:	lea    rbp,[rsp+0x248]
    6575:	mov    r13,r12
    6578:	mov    rbx,QWORD PTR [rax+0x1918]
    657f:	mov    rax,QWORD PTR [rip+0x8202a]        # 885b0 <img>
    6586:	mov    r15d,DWORD PTR [rax+0xc]
    658a:	nop    WORD PTR [rax+rax*1+0x0]
    6590:	mov    r8,r13
    6593:	mov    edx,r14d
    6596:	mov    ecx,0x1
    659b:	mov    esi,0xffffffff
    65a0:	mov    edi,r15d
    65a3:	add    r13,0x18
    65a7:	add    r14d,0x1
    65ab:	call   30ae0 <getNeighbour>
    65b0:	cmp    rbp,r13
    65b3:	jne    6590 <intrapred_luma_16x16+0x60>
    65b5:	lea    r8,[rsp+0x10]
    65ba:	mov    ecx,0x1
    65bf:	xor    esi,esi
    65c1:	mov    edi,r15d
    65c4:	mov    edx,0xffffffff
    65c9:	call   30ae0 <getNeighbour>
    65ce:	mov    rax,QWORD PTR [rip+0x81fe3]        # 885b8 <input>
    65d5:	mov    r8d,DWORD PTR [rsp+0x10]
    65da:	mov    r9d,DWORD PTR [rax+0xd8]
    65e1:	test   r9d,r9d
    65e4:	jne    678c <intrapred_luma_16x16+0x25c>
    65ea:	mov    edi,DWORD PTR [rsp+0xb0]
    65f1:	mov    esi,DWORD PTR [rsp+0xc8]
    65f8:	mov    r13,QWORD PTR [rip+0x81fb1]        # 885b0 <img>
    65ff:	test   edi,edi
    6601:	sete   BYTE PTR [rsp+0x8]
    6606:	test   r8d,r8d
    6609:	setne  r14b
    660d:	movsxd rax,DWORD PTR [rsp+0x24]
    6612:	movsxd rbp,DWORD PTR [rsp+0x20]
    6617:	xor    r9d,r9d
    661a:	lea    rcx,[rsp+0xd8]
    6622:	add    r12,0x1a8
    6629:	mov    rdx,rcx
    662c:	lea    r10,[rbx+rax*8]
    6630:	mov    edi,ebp
    6632:	xor    eax,eax
    6634:	nop    DWORD PTR [rax+0x0]
    6638:	test   r8d,r8d
    663b:	je     664b <intrapred_luma_16x16+0x11b>
    663d:	mov    r15,QWORD PTR [r10]
    6640:	movsxd r11,edi
    6643:	movzx  r11d,WORD PTR [r15+r11*2]
    6648:	add    eax,r11d
    664b:	test   esi,esi
    664d:	je     6662 <intrapred_luma_16x16+0x132>
    664f:	movsxd r11,DWORD PTR [rdx+0x4]
    6653:	movsxd r15,DWORD PTR [rdx]
    6656:	mov    r11,QWORD PTR [rbx+r11*8]
    665a:	movzx  r11d,WORD PTR [r11+r15*2]
    665f:	add    r9d,r11d
    6662:	add    rdx,0x18
    6666:	add    edi,0x1
    6669:	cmp    rdx,r12
    666c:	jne    6638 <intrapred_luma_16x16+0x108>
    666e:	test   esi,esi
    6670:	setne  dil
    6674:	je     6771 <intrapred_luma_16x16+0x241>
    667a:	test   r14b,r14b
    667d:	je     6771 <intrapred_luma_16x16+0x241>
    6683:	lea    eax,[rax+r9*1+0x10]
    6688:	movzx  edi,BYTE PTR [rsp+0x8]
    668d:	sar    eax,0x5
    6690:	xor    edx,edx
    6692:	lea    r9,[rsp+0x30]
    6697:	nop    WORD PTR [rax+rax*1+0x0]
    66a0:	test   r8d,r8d
    66a3:	je     66b9 <intrapred_luma_16x16+0x189>
    66a5:	mov    r12,QWORD PTR [r10]
    66a8:	lea    r11d,[rbp+rdx*1+0x0]
    66ad:	movsxd r11,r11d
    66b0:	movzx  r11d,WORD PTR [r12+r11*2]
    66b5:	mov    DWORD PTR [r9+rdx*8],r11d
    66b9:	test   esi,esi
    66bb:	je     66d2 <intrapred_luma_16x16+0x1a2>
    66bd:	movsxd r11,DWORD PTR [rcx+0x4]
    66c1:	movsxd r12,DWORD PTR [rcx]
    66c4:	mov    r11,QWORD PTR [rbx+r11*8]
    66c8:	movzx  r11d,WORD PTR [r11+r12*2]
    66cd:	mov    DWORD PTR [r9+rdx*8+0x4],r11d
    66d2:	add    rdx,0x1
    66d6:	add    rcx,0x18
    66da:	cmp    rdx,0x10
    66de:	jne    66a0 <intrapred_luma_16x16+0x170>
    66e0:	mov    r8d,eax
    66e3:	lea    r12,[rsp+0x34]
    66e8:	lea    r14,[r13+0x12b8]
    66ef:	lea    r15,[rsp+0xb4]
    66f7:	lea    r11,[r9+0x80]
    66fe:	xchg   ax,ax
    6700:	movzx  esi,WORD PTR [r12]
    6705:	mov    rax,r14
    6708:	mov    rdx,r9
    670b:	nop    DWORD PTR [rax+rax*1+0x0]
    6710:	mov    ecx,DWORD PTR [rdx]
    6712:	add    rdx,0x8
    6716:	add    rax,0x2
    671a:	mov    WORD PTR [rax+0x1fe],si
    6721:	mov    WORD PTR [rax+0x3fe],r8w
    6729:	mov    WORD PTR [rax-0x2],cx
    672d:	cmp    r11,rdx
    6730:	jne    6710 <intrapred_luma_16x16+0x1e0>
    6732:	add    r12,0x8
    6736:	add    r14,0x20
    673a:	cmp    r15,r12
    673d:	jne    6700 <intrapred_luma_16x16+0x1d0>
    673f:	test   dil,dil
    6742:	je     6860 <intrapred_luma_16x16+0x330>
    6748:	mov    rax,QWORD PTR [rsp+0x248]
    6750:	xor    rax,QWORD PTR fs:0x28
    6759:	jne    69de <intrapred_luma_16x16+0x4ae>
    675f:	add    rsp,0x258
    6766:	pop    rbx
    6767:	pop    rbp
    6768:	pop    r12
    676a:	pop    r13
    676c:	pop    r14
    676e:	pop    r15
    6770:	ret    
    6771:	test   r8d,r8d
    6774:	sete   dl
    6777:	and    dil,dl
    677a:	je     6826 <intrapred_luma_16x16+0x2f6>
    6780:	lea    eax,[r9+0x8]
    6784:	sar    eax,0x4
    6787:	jmp    6690 <intrapred_luma_16x16+0x160>
    678c:	mov    r13,QWORD PTR [rip+0x81e1d]        # 885b0 <img>
    6793:	xor    r14d,r14d
    6796:	test   r8d,r8d
    6799:	jne    680a <intrapred_luma_16x16+0x2da>
    679b:	lea    rax,[rsp+0xc8]
    67a3:	mov    esi,0x1
    67a8:	jmp    67c7 <intrapred_luma_16x16+0x297>
    67aa:	nop    WORD PTR [rax+rax*1+0x0]
    67b0:	movsxd rcx,DWORD PTR [rax+0x4]
    67b4:	mov    rdx,QWORD PTR [r13+0x11868]
    67bb:	add    rax,0x18
    67bf:	and    esi,DWORD PTR [rdx+rcx*4]
    67c2:	cmp    rbp,rax
    67c5:	je     67d8 <intrapred_luma_16x16+0x2a8>
    67c7:	mov    ecx,DWORD PTR [rax]
    67c9:	test   ecx,ecx
    67cb:	jne    67b0 <intrapred_luma_16x16+0x280>
    67cd:	add    rax,0x18
    67d1:	xor    esi,esi
    67d3:	cmp    rbp,rax
    67d6:	jne    67c7 <intrapred_luma_16x16+0x297>
    67d8:	mov    edx,DWORD PTR [rsp+0xb0]
    67df:	mov    BYTE PTR [rsp+0x8],0x1
    67e4:	test   edx,edx
    67e6:	je     660d <intrapred_luma_16x16+0xdd>
    67ec:	movsxd rdx,DWORD PTR [rsp+0xb4]
    67f4:	mov    rax,QWORD PTR [r13+0x11868]
    67fb:	mov    eax,DWORD PTR [rax+rdx*4]
    67fe:	test   eax,eax
    6800:	sete   BYTE PTR [rsp+0x8]
    6805:	jmp    660d <intrapred_luma_16x16+0xdd>
    680a:	movsxd rdx,DWORD PTR [rsp+0x14]
    680f:	mov    rax,QWORD PTR [r13+0x11868]
    6816:	mov    r8d,DWORD PTR [rax+rdx*4]
    681a:	test   r8d,r8d
    681d:	setne  r14b
    6821:	jmp    679b <intrapred_luma_16x16+0x26b>
    6826:	test   esi,esi
    6828:	mov    edi,r14d
    682b:	sete   r9b
    682f:	and    dil,r9b
    6832:	je     683f <intrapred_luma_16x16+0x30f>
    6834:	add    eax,0x8
    6837:	sar    eax,0x4
    683a:	jmp    6690 <intrapred_luma_16x16+0x160>
    683f:	movzx  edi,BYTE PTR [rsp+0x8]
    6844:	or     edx,r9d
    6847:	mov    eax,r8d
    684a:	or     edi,edx
    684c:	or     eax,esi
    684e:	jne    69d7 <intrapred_luma_16x16+0x4a7>
    6854:	mov    eax,DWORD PTR [r13+0x11be8]
    685b:	jmp    6690 <intrapred_luma_16x16+0x160>
    6860:	movsxd rax,DWORD PTR [rsp+0xc4]
    6868:	mov    r15,QWORD PTR [r10]
    686b:	xor    edi,edi
    686d:	xor    r8d,r8d
    6870:	lea    r12d,[rbp+0xf]
    6874:	lea    r11d,[rbp+0x7]
    6878:	lea    r14,[rbx+rax*8]
    687c:	movsxd rax,DWORD PTR [rsp+0xc0]
    6884:	movsxd r12,r12d
    6887:	lea    rsi,[rsp+0x198]
    688f:	add    r12,r12
    6892:	lea    rcx,[rsp+0x168]
    689a:	add    rax,rax
    689d:	mov    QWORD PTR [rsp+0x8],rax
    68a2:	mov    eax,0x1
    68a7:	jmp    6905 <intrapred_luma_16x16+0x3d5>
    68a9:	mov    r9d,r11d
    68ac:	lea    edx,[r11+rax*1]
    68b0:	sub    r9d,eax
    68b3:	movsxd rdx,edx
    68b6:	movsxd r9,r9d
    68b9:	movzx  edx,WORD PTR [r15+rdx*2]
    68be:	movzx  r9d,WORD PTR [r15+r9*2]
    68c3:	sub    edx,r9d
    68c6:	imul   edx,eax
    68c9:	add    r8d,edx
    68cc:	movsxd rdx,DWORD PTR [rsi+0x4]
    68d0:	movsxd r9,DWORD PTR [rsi]
    68d3:	sub    rcx,0x18
    68d7:	add    rsi,0x18
    68db:	movsxd r10,DWORD PTR [rcx+0x18]
    68df:	mov    rdx,QWORD PTR [rbx+rdx*8]
    68e3:	movzx  edx,WORD PTR [rdx+r9*2]
    68e8:	movsxd r9,DWORD PTR [rcx+0x1c]
    68ec:	mov    r9,QWORD PTR [rbx+r9*8]
    68f0:	movzx  r9d,WORD PTR [r9+r10*2]
    68f5:	sub    edx,r9d
    68f8:	imul   edx,eax
    68fb:	add    eax,0x1
    68fe:	add    edi,edx
    6900:	cmp    eax,0x9
    6903:	je     6925 <intrapred_luma_16x16+0x3f5>
    6905:	cmp    eax,0x8
    6908:	jne    68a9 <intrapred_luma_16x16+0x379>
    690a:	mov    r9,QWORD PTR [r14]
    690d:	mov    r10,QWORD PTR [rsp+0x8]
    6912:	movzx  edx,WORD PTR [r15+r12*1]
    6917:	movzx  r9d,WORD PTR [r9+r10*1]
    691c:	sub    edx,r9d
    691f:	lea    r8d,[r8+rdx*8]
    6923:	jmp    68cc <intrapred_luma_16x16+0x39c>
    6925:	lea    r10d,[rdi+rdi*4+0x20]
    692a:	lea    r8d,[r8+r8*4+0x20]
    692f:	xor    r11d,r11d
    6932:	movsxd rdx,DWORD PTR [rsp+0x240]
    693a:	sar    r10d,0x6
    693e:	sar    r8d,0x6
    6942:	mov    esi,DWORD PTR [r13+0x11bec]
    6949:	lea    rdi,[r13+0x18d8]
    6950:	lea    eax,[r10*8+0x0]
    6958:	mov    r9d,r10d
    695b:	add    r13,0x1ad8
    6962:	sub    r9d,eax
    6965:	movsxd rax,DWORD PTR [rsp+0x244]
    696d:	mov    rax,QWORD PTR [rbx+rax*8]
    6971:	movzx  eax,WORD PTR [rax+rdx*2]
    6975:	movzx  edx,WORD PTR [r15+rbp*2+0x1e]
    697b:	add    eax,edx
    697d:	lea    edx,[r8*8+0x0]
    6985:	shl    eax,0x4
    6988:	sub    edx,r8d
    698b:	sub    eax,edx
    698d:	lea    ebx,[rax+0x10]
    6990:	lea    edx,[rbx+r9*1]
    6994:	lea    rcx,[rdi-0x20]
    6998:	nop    DWORD PTR [rax+rax*1+0x0]
    69a0:	test   edx,edx
    69a2:	lea    eax,[rdx+0x1f]
    69a5:	cmovns eax,edx
    69a8:	sar    eax,0x5
    69ab:	cmp    eax,esi
    69ad:	cmovg  eax,esi
    69b0:	test   eax,eax
    69b2:	cmovs  eax,r11d
    69b6:	add    rcx,0x2
    69ba:	add    edx,r8d
    69bd:	mov    WORD PTR [rcx-0x2],ax
    69c1:	cmp    rdi,rcx
    69c4:	jne    69a0 <intrapred_luma_16x16+0x470>
    69c6:	add    rdi,0x20
    69ca:	add    r9d,r10d
    69cd:	cmp    r13,rdi
    69d0:	jne    6990 <intrapred_luma_16x16+0x460>
    69d2:	jmp    6748 <intrapred_luma_16x16+0x218>
    69d7:	xor    eax,eax
    69d9:	jmp    6690 <intrapred_luma_16x16+0x160>
    69de:	call   4390 <__stack_chk_fail@plt>
    69e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    69ee:	xchg   ax,ax

00000000000069f0 <dct_luma_16x16>:
    69f0:	endbr64 
    69f4:	push   r15
    69f6:	push   r14
    69f8:	push   r13
    69fa:	push   r12
    69fc:	push   rbp
    69fd:	push   rbx
    69fe:	sub    rsp,0x908
    6a05:	mov    r8,QWORD PTR [rip+0x81ba4]        # 885b0 <img>
    6a0c:	mov    rax,QWORD PTR fs:0x28
    6a15:	mov    QWORD PTR [rsp+0x8f8],rax
    6a1d:	xor    eax,eax
    6a1f:	mov    rax,QWORD PTR [r8+0x3740]
    6a26:	mov    edx,DWORD PTR [r8+0x11bdc]
    6a2d:	mov    rax,QWORD PTR [rax]
    6a30:	mov    rbx,QWORD PTR [rax]
    6a33:	mov    rax,QWORD PTR [rax+0x8]
    6a37:	mov    QWORD PTR [rsp+0x40],rax
    6a3c:	movsxd rax,DWORD PTR [r8+0xc]
    6a40:	mov    QWORD PTR [rsp+0x30],rbx
    6a45:	imul   rax,rax,0x278
    6a4c:	add    rax,QWORD PTR [r8+0x3758]
    6a53:	add    edx,DWORD PTR [rax+0xc]
    6a56:	mov    DWORD PTR [rsp+0x3c],edx
    6a5a:	jne    6a7a <dct_luma_16x16+0x8a>
    6a5c:	mov    r14d,DWORD PTR [r8+0x11c00]
    6a63:	cmp    r14d,0x1
    6a67:	je     763e <dct_luma_16x16+0xc4e>
    6a6d:	mov    BYTE PTR [rsp+0x8b],0x1
    6a75:	xor    r14d,r14d
    6a78:	jmp    6a85 <dct_luma_16x16+0x95>
    6a7a:	mov    BYTE PTR [rsp+0x8b],0x1
    6a82:	xor    r14d,r14d
    6a85:	movsxd rax,DWORD PTR [rsp+0x3c]
    6a8a:	movsxd rdi,edi
    6a8d:	lea    rbp,[rsp+0xf0]
    6a95:	mov    r11d,DWORD PTR [r8+0x11c14]
    6a9c:	shl    rdi,0x9
    6aa0:	mov    QWORD PTR [rsp+0x78],rbp
    6aa5:	mov    r12,QWORD PTR [rip+0xb091c]        # b73c8 <imgY_org>
    6aac:	xor    r13d,r13d
    6aaf:	mov    rbx,rax
    6ab2:	imul   rax,rax,0x2aaaaaab
    6ab9:	mov    QWORD PTR [rsp+0x80],rdi
    6ac1:	mov    edx,ebx
    6ac3:	sar    edx,0x1f
    6ac6:	shr    rax,0x20
    6aca:	mov    ecx,eax
    6acc:	sub    ecx,edx
    6ace:	lea    eax,[rcx+rcx*2]
    6ad1:	mov    DWORD PTR [rsp+0x18],ecx
    6ad5:	add    eax,eax
    6ad7:	sub    ebx,eax
    6ad9:	lea    eax,[rcx+0xf]
    6adc:	mov    DWORD PTR [rsp+0x38],eax
    6ae0:	mov    DWORD PTR [rsp+0x5c],ebx
    6ae4:	lea    rbx,[r8+rdi*1]
    6ae8:	nop    DWORD PTR [rax+rax*1+0x0]
    6af0:	mov    r9d,r13d
    6af3:	mov    r10,r13
    6af6:	mov    r15d,r13d
    6af9:	xor    eax,eax
    6afb:	sar    r9d,0x2
    6aff:	lea    rdi,[r13*4+0x0]
    6b07:	and    r10d,0x3
    6b0b:	movsxd r9,r9d
    6b0e:	jmp    6b6a <dct_luma_16x16+0x17a>
    6b10:	mov    esi,DWORD PTR [r8+0xac]
    6b17:	mov    ecx,DWORD PTR [r8+0xa8]
    6b1e:	add    esi,r15d
    6b21:	add    ecx,eax
    6b23:	movsxd rsi,esi
    6b26:	movsxd rcx,ecx
    6b29:	mov    rsi,QWORD PTR [r12+rsi*8]
    6b2d:	movzx  ecx,WORD PTR [rsi+rcx*2]
    6b31:	movzx  esi,WORD PTR [rbx+rax*2+0x12b8]
    6b39:	sub    ecx,esi
    6b3b:	mov    esi,edx
    6b3d:	and    edx,0x3
    6b40:	add    rax,0x1
    6b44:	mov    DWORD PTR [rdi+rbp*1],ecx
    6b47:	sar    esi,0x2
    6b4a:	add    rdi,0x40
    6b4e:	movsxd rsi,esi
    6b51:	lea    rdx,[rsi+rdx*4]
    6b55:	lea    rdx,[r10+rdx*4]
    6b59:	lea    rdx,[r9+rdx*4]
    6b5d:	mov    DWORD PTR [rsp+rdx*4+0x4f0],ecx
    6b64:	cmp    rax,0x10
    6b68:	je     6b80 <dct_luma_16x16+0x190>
    6b6a:	mov    edx,eax
    6b6c:	test   r11d,r11d
    6b6f:	je     6b10 <dct_luma_16x16+0x120>
    6b71:	mov    ecx,DWORD PTR [r8+rdi*1+0x3338]
    6b79:	jmp    6b3b <dct_luma_16x16+0x14b>
    6b7b:	nop    DWORD PTR [rax+rax*1+0x0]
    6b80:	add    r13,0x1
    6b84:	add    rbx,0x20
    6b88:	cmp    r13,0x10
    6b8c:	jne    6af0 <dct_luma_16x16+0x100>
    6b92:	cmp    BYTE PTR [rsp+0x8b],0x0
    6b9a:	je     6c90 <dct_luma_16x16+0x2a0>
    6ba0:	lea    rbx,[rsp+0x9f0]
    6ba8:	xor    ebp,ebp
    6baa:	lea    rsi,[rbx-0x100]
    6bb1:	lea    rdi,[rbx-0x4c0]
    6bb8:	lea    rax,[rsi-0x400]
    6bbf:	mov    rdx,rax
    6bc2:	mov    r9d,DWORD PTR [rdx+0x300]
    6bc9:	mov    ecx,DWORD PTR [rdx]
    6bcb:	add    rdx,0x10
    6bcf:	mov    r12d,DWORD PTR [rdx+0x1f0]
    6bd6:	lea    r10d,[rcx+r9*1]
    6bda:	sub    ecx,r9d
    6bdd:	mov    r9d,DWORD PTR [rdx+0xf0]
    6be4:	lea    r11d,[r9+r12*1]
    6be8:	sub    r9d,r12d
    6beb:	lea    r12d,[r10+r11*1]
    6bef:	sub    r10d,r11d
    6bf2:	mov    DWORD PTR [rdx+0x1f0],r10d
    6bf9:	lea    r10d,[r9+rcx*2]
    6bfd:	add    r9d,r9d
    6c00:	sub    ecx,r9d
    6c03:	mov    DWORD PTR [rdx-0x10],r12d
    6c07:	mov    DWORD PTR [rdx+0xf0],r10d
    6c0e:	mov    DWORD PTR [rdx+0x2f0],ecx
    6c14:	cmp    rdx,rdi
    6c17:	jne    6bc2 <dct_luma_16x16+0x1d2>
    6c19:	mov    ecx,DWORD PTR [rax+0x30]
    6c1c:	mov    edx,DWORD PTR [rax]
    6c1e:	add    rax,0x100
    6c24:	mov    r11d,DWORD PTR [rax-0xe0]
    6c2b:	lea    r9d,[rdx+rcx*1]
    6c2f:	sub    edx,ecx
    6c31:	mov    ecx,DWORD PTR [rax-0xf0]
    6c37:	lea    r10d,[rcx+r11*1]
    6c3b:	sub    ecx,r11d
    6c3e:	lea    r11d,[r9+r10*1]
    6c42:	sub    r9d,r10d
    6c45:	mov    DWORD PTR [rax-0xe0],r9d
    6c4c:	lea    r9d,[rcx+rdx*2]
    6c50:	add    ecx,ecx
    6c52:	sub    edx,ecx
    6c54:	mov    DWORD PTR [rax-0x100],r11d
    6c5b:	mov    DWORD PTR [rax-0xf0],r9d
    6c62:	mov    DWORD PTR [rax-0xd0],edx
    6c68:	cmp    rsi,rax
    6c6b:	jne    6c19 <dct_luma_16x16+0x229>
    6c6d:	add    rsi,0x40
    6c71:	add    rdi,0x40
    6c75:	cmp    rsi,rbx
    6c78:	jne    6bb8 <dct_luma_16x16+0x1c8>
    6c7e:	add    rbp,0x1
    6c82:	add    rbx,0x4
    6c86:	cmp    rbp,0x4
    6c8a:	jne    6baa <dct_luma_16x16+0x1ba>
    6c90:	lea    rbx,[rsp+0xb0]
    6c98:	lea    rax,[rsp+0x4f0]
    6ca0:	mov    QWORD PTR [rsp+0x60],rax
    6ca5:	lea    rsi,[rsp+0x500]
    6cad:	mov    rdx,rbx
    6cb0:	mov    QWORD PTR [rsp+0x50],rbx
    6cb5:	mov    ecx,DWORD PTR [rax]
    6cb7:	add    rax,0x4
    6cbb:	add    rdx,0x4
    6cbf:	mov    DWORD PTR [rdx-0x4],ecx
    6cc2:	mov    ecx,DWORD PTR [rax+0x3c]
    6cc5:	mov    DWORD PTR [rdx+0xc],ecx
    6cc8:	mov    ecx,DWORD PTR [rax+0x7c]
    6ccb:	mov    DWORD PTR [rdx+0x1c],ecx
    6cce:	mov    ecx,DWORD PTR [rax+0xbc]
    6cd4:	mov    DWORD PTR [rdx+0x2c],ecx
    6cd7:	cmp    rsi,rax
    6cda:	jne    6cb5 <dct_luma_16x16+0x2c5>
    6cdc:	mov    rax,QWORD PTR [rsp+0x50]
    6ce1:	cmp    BYTE PTR [rsp+0x8b],0x0
    6ce9:	lea    rdi,[rax+0x10]
    6ced:	je     6d79 <dct_luma_16x16+0x389>
    6cf3:	mov    ecx,DWORD PTR [rax+0x30]
    6cf6:	mov    edx,DWORD PTR [rax]
    6cf8:	add    rax,0x4
    6cfc:	mov    r10d,DWORD PTR [rax+0x1c]
    6d00:	lea    esi,[rdx+rcx*1]
    6d03:	sub    edx,ecx
    6d05:	mov    ecx,DWORD PTR [rax+0xc]
    6d08:	lea    r9d,[rcx+r10*1]
    6d0c:	sub    ecx,r10d
    6d0f:	lea    r10d,[rsi+r9*1]
    6d13:	sub    esi,r9d
    6d16:	mov    DWORD PTR [rax+0x1c],esi
    6d19:	lea    esi,[rdx+rcx*1]
    6d1c:	sub    edx,ecx
    6d1e:	mov    DWORD PTR [rax-0x4],r10d
    6d22:	mov    DWORD PTR [rax+0xc],esi
    6d25:	mov    DWORD PTR [rax+0x2c],edx
    6d28:	cmp    rax,rdi
    6d2b:	jne    6cf3 <dct_luma_16x16+0x303>
    6d2d:	mov    rax,QWORD PTR [rsp+0x50]
    6d32:	lea    rsi,[rax+0x40]
    6d36:	mov    edi,DWORD PTR [rax+0xc]
    6d39:	mov    edx,DWORD PTR [rax]
    6d3b:	add    rax,0x10
    6d3f:	mov    r9d,DWORD PTR [rax-0x8]
    6d43:	lea    ecx,[rdx+rdi*1]
    6d46:	sub    edx,edi
    6d48:	mov    edi,DWORD PTR [rax-0xc]
    6d4b:	lea    r10d,[rdi+r9*1]
    6d4f:	sub    edi,r9d
    6d52:	lea    r9d,[rcx+r10*1]
    6d56:	sub    ecx,r10d
    6d59:	sar    ecx,1
    6d5b:	sar    r9d,1
    6d5e:	mov    DWORD PTR [rax-0x8],ecx
    6d61:	lea    ecx,[rdx+rdi*1]
    6d64:	sub    edx,edi
    6d66:	sar    ecx,1
    6d68:	sar    edx,1
    6d6a:	mov    DWORD PTR [rax-0x10],r9d
    6d6e:	mov    DWORD PTR [rax-0xc],ecx
    6d71:	mov    DWORD PTR [rax-0x4],edx
    6d74:	cmp    rsi,rax
    6d77:	jne    6d36 <dct_luma_16x16+0x346>
    6d79:	movsxd rax,DWORD PTR [rsp+0x5c]
    6d7e:	lea    rcx,[rip+0xd1ebb]        # d8c40 <LevelScale4x4Luma_Intra>
    6d85:	lea    rbx,[rip+0x63c75]        # 6aa01 <FIELD_SCAN+0x1>
    6d8c:	mov    DWORD PTR [rsp+0x8],0x0
    6d94:	lea    rdx,[rip+0x63c86]        # 6aa21 <SNGL_SCAN+0x1>
    6d9b:	mov    r13,rbx
    6d9e:	mov    r15d,0xffffffff
    6da4:	shl    rax,0x6
    6da8:	mov    rbx,rdx
    6dab:	add    rax,rcx
    6dae:	mov    QWORD PTR [rsp+0x48],rax
    6db3:	jmp    6ec2 <dct_luma_16x16+0x4d2>
    6db8:	nop    DWORD PTR [rax+rax*1+0x0]
    6dc0:	mov    r11d,DWORD PTR [rip+0x9a049]        # a0e10 <mb_adaptive>
    6dc7:	test   r11d,r11d
    6dca:	je     6ddc <dct_luma_16x16+0x3ec>
    6dcc:	mov    r10d,DWORD PTR [r8+0x11948]
    6dd3:	test   r10d,r10d
    6dd6:	jne    6ed1 <dct_luma_16x16+0x4e1>
    6ddc:	movzx  r12d,BYTE PTR [rbx-0x1]
    6de1:	movzx  ebp,BYTE PTR [rbx]
    6de4:	lea    rax,[rbp+r12*4+0x0]
    6de9:	add    r15d,0x1
    6ded:	mov    esi,DWORD PTR [rsp+rax*4+0xb0]
    6df4:	mov    eax,esi
    6df6:	sar    eax,0x1f
    6df9:	mov    edi,eax
    6dfb:	xor    edi,esi
    6dfd:	sub    edi,eax
    6dff:	test   r14d,r14d
    6e02:	jne    6e2a <dct_luma_16x16+0x43a>
    6e04:	mov    rax,QWORD PTR [rsp+0x48]
    6e09:	lea    rcx,[rip+0xd4af0]        # db900 <LevelOffset4x4Luma_Intra>
    6e10:	imul   edi,DWORD PTR [rax]
    6e13:	movsxd rax,DWORD PTR [rsp+0x18]
    6e18:	mov    rdx,rax
    6e1b:	shl    rax,0x6
    6e1f:	mov    eax,DWORD PTR [rcx+rax*1]
    6e22:	lea    ecx,[rdx+0x10]
    6e25:	lea    edi,[rdi+rax*2]
    6e28:	sar    edi,cl
    6e2a:	mov    rax,QWORD PTR [rip+0x81787]        # 885b8 <input>
    6e31:	mov    r9d,DWORD PTR [rax+0x934]
    6e38:	test   r9d,r9d
    6e3b:	jne    6e50 <dct_luma_16x16+0x460>
    6e3d:	cmp    DWORD PTR [r8+0x28],0x9
    6e42:	jg     6e50 <dct_luma_16x16+0x460>
    6e44:	cmp    edi,0x80f
    6e4a:	jg     6ef7 <dct_luma_16x16+0x507>
    6e50:	test   edi,edi
    6e52:	je     6ea2 <dct_luma_16x16+0x4b2>
    6e54:	movsxd rcx,DWORD PTR [rsp+0x8]
    6e59:	mov    rdx,QWORD PTR [rsp+0x30]
    6e5e:	mov    DWORD PTR [rsp+0x1c],esi
    6e62:	mov    DWORD PTR [rsp+0x10],edi
    6e66:	lea    r8,[rdx+rcx*4]
    6e6a:	mov    QWORD PTR [rsp+0x28],rcx
    6e6f:	mov    QWORD PTR [rsp+0x20],r8
    6e74:	call   465a0 <sign>
    6e79:	mov    rdi,QWORD PTR [rsp+0x40]
    6e7e:	mov    r8,QWORD PTR [rsp+0x20]
    6e83:	mov    rcx,QWORD PTR [rsp+0x28]
    6e88:	add    DWORD PTR [rsp+0x8],0x1
    6e8d:	mov    DWORD PTR [r8],eax
    6e90:	mov    esi,DWORD PTR [rsp+0x1c]
    6e94:	mov    DWORD PTR [rdi+rcx*4],r15d
    6e98:	mov    edi,DWORD PTR [rsp+0x10]
    6e9c:	mov    r15d,0xffffffff
    6ea2:	test   r14d,r14d
    6ea5:	je     6ee0 <dct_luma_16x16+0x4f0>
    6ea7:	add    r13,0x2
    6eab:	lea    rax,[rip+0x63b6f]        # 6aa21 <SNGL_SCAN+0x1>
    6eb2:	add    rbx,0x2
    6eb6:	cmp    rax,r13
    6eb9:	je     6f01 <dct_luma_16x16+0x511>
    6ebb:	mov    r8,QWORD PTR [rip+0x816ee]        # 885b0 <img>
    6ec2:	mov    ebp,DWORD PTR [r8+0x11afc]
    6ec9:	test   ebp,ebp
    6ecb:	je     6dc0 <dct_luma_16x16+0x3d0>
    6ed1:	movzx  r12d,BYTE PTR [r13-0x1]
    6ed6:	movzx  ebp,BYTE PTR [r13+0x0]
    6edb:	jmp    6de4 <dct_luma_16x16+0x3f4>
    6ee0:	call   465a0 <sign>
    6ee5:	mov    r8d,eax
    6ee8:	lea    rax,[rbp+r12*4+0x0]
    6eed:	mov    DWORD PTR [rsp+rax*4+0xb0],r8d
    6ef5:	jmp    6ea7 <dct_luma_16x16+0x4b7>
    6ef7:	mov    edi,0x80f
    6efc:	jmp    6e54 <dct_luma_16x16+0x464>
    6f01:	movsxd rax,DWORD PTR [rsp+0x8]
    6f06:	mov    rbx,QWORD PTR [rsp+0x30]
    6f0b:	cmp    BYTE PTR [rsp+0x8b],0x0
    6f13:	mov    DWORD PTR [rbx+rax*4],0x0
    6f1a:	mov    rax,QWORD PTR [rsp+0x50]
    6f1f:	lea    r8,[rax+0x10]
    6f23:	je     709f <dct_luma_16x16+0x6af>
    6f29:	mov    edi,DWORD PTR [rax+0x20]
    6f2c:	mov    edx,DWORD PTR [rax]
    6f2e:	add    rax,0x4
    6f32:	mov    ecx,DWORD PTR [rax+0xc]
    6f35:	mov    r9d,DWORD PTR [rax+0x2c]
    6f39:	lea    esi,[rdx+rdi*1]
    6f3c:	sub    edx,edi
    6f3e:	mov    edi,ecx
    6f40:	add    ecx,r9d
    6f43:	sub    edi,r9d
    6f46:	lea    r9d,[rsi+rcx*1]
    6f4a:	sub    esi,ecx
    6f4c:	lea    ecx,[rdx+rdi*1]
    6f4f:	sub    edx,edi
    6f51:	mov    DWORD PTR [rax-0x4],r9d
    6f55:	mov    DWORD PTR [rax+0x2c],esi
    6f58:	mov    DWORD PTR [rax+0xc],ecx
    6f5b:	mov    DWORD PTR [rax+0x1c],edx
    6f5e:	cmp    r8,rax
    6f61:	jne    6f29 <dct_luma_16x16+0x539>
    6f63:	mov    edi,DWORD PTR [rsp+0x18]
    6f67:	mov    ecx,0x5
    6f6c:	mov    eax,0x1
    6f71:	lea    rdx,[rip+0xd1848]        # d87c0 <InvLevelScale4x4Luma_Intra>
    6f78:	mov    DWORD PTR [rsp+0x1c],r14d
    6f7d:	mov    r13d,0x6
    6f83:	mov    rbp,QWORD PTR [rsp+0x60]
    6f88:	lea    r9,[rsp+0xa0]
    6f90:	sub    ecx,edi
    6f92:	mov    r11d,DWORD PTR [rsp+0x3c]
    6f97:	lea    r12d,[rdi-0x6]
    6f9b:	sub    r13d,edi
    6f9e:	shl    eax,cl
    6fa0:	mov    r15d,eax
    6fa3:	movsxd rax,DWORD PTR [rsp+0x5c]
    6fa8:	shl    rax,0x6
    6fac:	mov    ebx,DWORD PTR [rdx+rax*1]
    6faf:	mov    rdx,QWORD PTR [rsp+0x50]
    6fb4:	lea    rax,[rdx+0x40]
    6fb8:	mov    QWORD PTR [rsp+0x8],rax
    6fbd:	lea    rax,[rsp+0xac]
    6fc5:	mov    QWORD PTR [rsp+0x10],rax
    6fca:	mov    esi,DWORD PTR [rdx+0x8]
    6fcd:	mov    eax,DWORD PTR [rdx]
    6fcf:	mov    r10,rbp
    6fd2:	mov    ecx,DWORD PTR [rdx+0x4]
    6fd5:	mov    edx,DWORD PTR [rdx+0xc]
    6fd8:	lea    edi,[rax+rsi*1]
    6fdb:	sub    eax,esi
    6fdd:	xor    esi,esi
    6fdf:	mov    DWORD PTR [rsp+0xa4],eax
    6fe6:	mov    eax,ecx
    6fe8:	sub    eax,edx
    6fea:	add    edx,ecx
    6fec:	mov    DWORD PTR [rsp+0xa0],edi
    6ff3:	mov    rdi,rbp
    6ff6:	mov    DWORD PTR [rsp+0xa8],eax
    6ffd:	mov    DWORD PTR [rsp+0xac],edx
    7004:	mov    eax,DWORD PTR [r9+rsi*1]
    7008:	lea    r14d,[rax+rdx*1]
    700c:	imul   r14d,ebx
    7010:	cmp    r11d,0x23
    7014:	jg     7060 <dct_luma_16x16+0x670>
    7016:	sub    eax,edx
    7018:	mov    ecx,r13d
    701b:	add    r14d,r15d
    701e:	imul   eax,ebx
    7021:	sar    r14d,cl
    7024:	mov    DWORD PTR [rdi],r14d
    7027:	add    eax,r15d
    702a:	sar    eax,cl
    702c:	mov    DWORD PTR [r10+0xc],eax
    7030:	add    rdi,0x4
    7034:	sub    r10,0x4
    7038:	lea    rax,[rsi+0x4]
    703c:	cmp    rsi,0x4
    7040:	jne    7080 <dct_luma_16x16+0x690>
    7042:	mov    rdx,r8
    7045:	add    rbp,0x40
    7049:	cmp    QWORD PTR [rsp+0x8],r8
    704e:	je     709a <dct_luma_16x16+0x6aa>
    7050:	add    r8,0x10
    7054:	jmp    6fca <dct_luma_16x16+0x5da>
    7059:	nop    DWORD PTR [rax+0x0]
    7060:	sub    eax,edx
    7062:	mov    ecx,r12d
    7065:	imul   eax,ebx
    7068:	shl    r14d,cl
    706b:	mov    DWORD PTR [rdi],r14d
    706e:	shl    eax,cl
    7070:	mov    DWORD PTR [r10+0xc],eax
    7074:	jmp    7030 <dct_luma_16x16+0x640>
    7076:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7080:	mov    rcx,QWORD PTR [rsp+0x10]
    7085:	mov    rdx,0xfffffffffffffffc
    708c:	sub    rdx,rsi
    708f:	mov    rsi,rax
    7092:	mov    edx,DWORD PTR [rcx+rdx*1]
    7095:	jmp    7004 <dct_luma_16x16+0x614>
    709a:	mov    r14d,DWORD PTR [rsp+0x1c]
    709f:	mov    ecx,0x3
    70a4:	mov    eax,0x1
    70a9:	sub    ecx,DWORD PTR [rsp+0x18]
    70ad:	mov    QWORD PTR [rsp+0x68],0x0
    70b6:	shl    eax,cl
    70b8:	mov    DWORD PTR [rsp+0x40],0x0
    70c0:	mov    rcx,QWORD PTR [rip+0x814e9]        # 885b0 <img>
    70c7:	mov    DWORD PTR [rsp+0x58],eax
    70cb:	mov    rax,QWORD PTR [rsp+0x60]
    70d0:	mov    DWORD PTR [rsp+0x8],r14d
    70d5:	add    rax,0x400
    70db:	mov    QWORD PTR [rsp+0x70],rax
    70e0:	movsxd rax,DWORD PTR [rsp+0x5c]
    70e5:	shl    rax,0x2
    70e9:	mov    QWORD PTR [rsp+0x10],rax
    70ee:	mov    rbx,QWORD PTR [rsp+0x68]
    70f3:	mov    DWORD PTR [rsp+0x48],0x0
    70fb:	mov    eax,ebx
    70fd:	movsxd r14,ebx
    7100:	and    eax,0xfffffffe
    7103:	mov    r15,r14
    7106:	mov    DWORD PTR [rsp+0x5c],eax
    710a:	mov    eax,ebx
    710c:	and    eax,0x1
    710f:	add    eax,eax
    7111:	mov    DWORD PTR [rsp+0x60],eax
    7115:	mov    rax,QWORD PTR [rsp+0x70]
    711a:	mov    QWORD PTR [rsp+0x50],rax
    711f:	movsxd r13,DWORD PTR [rsp+0x48]
    7124:	mov    rsi,QWORD PTR [rcx+0x3738]
    712b:	mov    r9,r15
    712e:	lea    r14,[rip+0x638ee]        # 6aa23 <SNGL_SCAN+0x3>
    7135:	mov    r15,r14
    7138:	mov    DWORD PTR [rsp+0x1c],0x0
    7140:	lea    r12,[rip+0x638bc]        # 6aa03 <FIELD_SCAN+0x3>
    7147:	mov    edx,r13d
    714a:	mov    eax,r13d
    714d:	sar    edx,1
    714f:	add    edx,DWORD PTR [rsp+0x5c]
    7153:	and    eax,0x1
    7156:	add    eax,DWORD PTR [rsp+0x60]
    715a:	movsxd rdx,edx
    715d:	cdqe   
    715f:	mov    rdx,QWORD PTR [rsi+rdx*8]
    7163:	mov    rax,QWORD PTR [rdx+rax*8]
    7167:	mov    edx,0xffffffff
    716c:	mov    r14d,edx
    716f:	mov    rdi,QWORD PTR [rax]
    7172:	mov    rax,QWORD PTR [rax+0x8]
    7176:	mov    QWORD PTR [rsp+0x28],rdi
    717b:	mov    QWORD PTR [rsp+0x30],rax
    7180:	jmp    7238 <dct_luma_16x16+0x848>
    7185:	nop    DWORD PTR [rax]
    7188:	mov    edi,DWORD PTR [rip+0x99c82]        # a0e10 <mb_adaptive>
    718e:	test   edi,edi
    7190:	je     71a0 <dct_luma_16x16+0x7b0>
    7192:	mov    esi,DWORD PTR [rcx+0x11948]
    7198:	test   esi,esi
    719a:	jne    7248 <dct_luma_16x16+0x858>
    71a0:	movzx  ebx,BYTE PTR [r15-0x1]
    71a5:	movzx  ebp,BYTE PTR [r15]
    71a9:	lea    rax,[r13+rbx*4+0x0]
    71ae:	mov    edx,DWORD PTR [rsp+0x8]
    71b2:	add    r14d,0x1
    71b6:	lea    rax,[rbp+rax*4+0x0]
    71bb:	lea    rax,[r9+rax*4]
    71bf:	mov    esi,DWORD PTR [rsp+rax*4+0x4f0]
    71c6:	mov    eax,esi
    71c8:	sar    eax,0x1f
    71cb:	mov    edi,eax
    71cd:	xor    edi,esi
    71cf:	sub    edi,eax
    71d1:	test   edx,edx
    71d3:	je     7260 <dct_luma_16x16+0x870>
    71d9:	test   esi,esi
    71db:	je     7220 <dct_luma_16x16+0x830>
    71dd:	movsxd rbx,DWORD PTR [rsp+0x1c]
    71e2:	mov    rcx,QWORD PTR [rsp+0x28]
    71e7:	mov    QWORD PTR [rsp+0x20],r9
    71ec:	lea    rbp,[rcx+rbx*4]
    71f0:	call   465a0 <sign>
    71f5:	mov    rcx,QWORD PTR [rsp+0x30]
    71fa:	add    DWORD PTR [rsp+0x1c],0x1
    71ff:	mov    DWORD PTR [rsp+0x40],0xf
    7207:	mov    r9,QWORD PTR [rsp+0x20]
    720c:	mov    DWORD PTR [rbp+0x0],eax
    720f:	mov    DWORD PTR [rcx+rbx*4],r14d
    7213:	mov    rcx,QWORD PTR [rip+0x81396]        # 885b0 <img>
    721a:	mov    r14d,0xffffffff
    7220:	add    r12,0x2
    7224:	lea    rax,[rip+0x637f6]        # 6aa21 <SNGL_SCAN+0x1>
    722b:	add    r15,0x2
    722f:	cmp    rax,r12
    7232:	je     7320 <dct_luma_16x16+0x930>
    7238:	mov    r8d,DWORD PTR [rcx+0x11afc]
    723f:	test   r8d,r8d
    7242:	je     7188 <dct_luma_16x16+0x798>
    7248:	movzx  ebx,BYTE PTR [r12-0x1]
    724e:	movzx  ebp,BYTE PTR [r12]
    7253:	jmp    71a9 <dct_luma_16x16+0x7b9>
    7258:	nop    DWORD PTR [rax+rax*1+0x0]
    7260:	mov    rax,QWORD PTR [rsp+0x10]
    7265:	lea    rcx,[rip+0xd19d4]        # d8c40 <LevelScale4x4Luma_Intra>
    726c:	add    rax,rbx
    726f:	lea    rax,[rbp+rax*4+0x0]
    7274:	imul   edi,DWORD PTR [rcx+rax*4]
    7278:	movsxd rax,DWORD PTR [rsp+0x18]
    727d:	lea    rcx,[rip+0xd467c]        # db900 <LevelOffset4x4Luma_Intra>
    7284:	lea    rax,[rbx+rax*4]
    7288:	lea    rax,[rbp+rax*4+0x0]
    728d:	add    edi,DWORD PTR [rcx+rax*4]
    7290:	movzx  ecx,BYTE PTR [rsp+0x38]
    7295:	sar    edi,cl
    7297:	test   edi,edi
    7299:	jne    7650 <dct_luma_16x16+0xc60>
    729f:	mov    QWORD PTR [rsp+0x20],r9
    72a4:	call   465a0 <sign>
    72a9:	lea    rcx,[r13+rbx*4+0x0]
    72ae:	mov    r9,QWORD PTR [rsp+0x20]
    72b3:	add    rbx,QWORD PTR [rsp+0x10]
    72b8:	lea    rcx,[rbp+rcx*4+0x0]
    72bd:	cmp    DWORD PTR [rsp+0x3c],0x17
    72c2:	lea    rdi,[rbp+rbx*4+0x0]
    72c7:	lea    rsi,[r9+rcx*4]
    72cb:	lea    rcx,[rip+0xd14ee]        # d87c0 <InvLevelScale4x4Luma_Intra>
    72d2:	jg     7300 <dct_luma_16x16+0x910>
    72d4:	imul   eax,DWORD PTR [rcx+rdi*4]
    72d8:	mov    ecx,0x4
    72dd:	add    eax,DWORD PTR [rsp+0x58]
    72e1:	sub    ecx,DWORD PTR [rsp+0x18]
    72e5:	sar    eax,cl
    72e7:	mov    rcx,QWORD PTR [rip+0x812c2]        # 885b0 <img>
    72ee:	mov    DWORD PTR [rsp+rsi*4+0x4f0],eax
    72f5:	jmp    7220 <dct_luma_16x16+0x830>
    72fa:	nop    WORD PTR [rax+rax*1+0x0]
    7300:	imul   eax,DWORD PTR [rcx+rdi*4]
    7304:	mov    ebx,DWORD PTR [rsp+0x18]
    7308:	lea    ecx,[rbx-0x4]
    730b:	shl    eax,cl
    730d:	mov    rcx,QWORD PTR [rip+0x8129c]        # 885b0 <img>
    7314:	mov    DWORD PTR [rsp+rsi*4+0x4f0],eax
    731b:	jmp    7220 <dct_luma_16x16+0x830>
    7320:	movsxd r13,DWORD PTR [rsp+0x1c]
    7325:	mov    rax,QWORD PTR [rsp+0x28]
    732a:	mov    r15,r9
    732d:	cmp    BYTE PTR [rsp+0x8b],0x0
    7335:	mov    DWORD PTR [rax+r13*4],0x0
    733d:	je     7419 <dct_luma_16x16+0xa29>
    7343:	mov    rbx,QWORD PTR [rsp+0x50]
    7348:	lea    rax,[rbx-0x400]
    734f:	lea    r11,[rbx-0x3c0]
    7356:	mov    rdx,rax
    7359:	nop    DWORD PTR [rax+0x0]
    7360:	mov    r9d,DWORD PTR [rdx+0x100]
    7367:	mov    esi,DWORD PTR [rdx]
    7369:	add    rdx,0x10
    736d:	mov    r8d,DWORD PTR [rdx+0x1f0]
    7374:	mov    edi,DWORD PTR [rdx+0x2f0]
    737a:	lea    r10d,[rsi+r8*1]
    737e:	sub    esi,r8d
    7381:	mov    r8d,r9d
    7384:	sar    r8d,1
    7387:	sub    r8d,edi
    738a:	sar    edi,1
    738c:	add    edi,r9d
    738f:	lea    r9d,[r10+rdi*1]
    7393:	sub    r10d,edi
    7396:	lea    edi,[rsi+r8*1]
    739a:	sub    esi,r8d
    739d:	mov    DWORD PTR [rdx-0x10],r9d
    73a1:	mov    DWORD PTR [rdx+0x2f0],r10d
    73a8:	mov    DWORD PTR [rdx+0xf0],edi
    73ae:	mov    DWORD PTR [rdx+0x1f0],esi
    73b4:	cmp    r11,rdx
    73b7:	jne    7360 <dct_luma_16x16+0x970>
    73b9:	mov    r10,QWORD PTR [rsp+0x50]
    73be:	mov    r9d,DWORD PTR [rax+0x10]
    73c2:	mov    edi,DWORD PTR [rax+0x20]
    73c5:	add    rax,0x100
    73cb:	mov    edx,DWORD PTR [rax-0x100]
    73d1:	mov    esi,DWORD PTR [rax-0xd0]
    73d7:	lea    r8d,[rdx+rdi*1]
    73db:	sub    edx,edi
    73dd:	mov    edi,r9d
    73e0:	sar    edi,1
    73e2:	sub    edi,esi
    73e4:	sar    esi,1
    73e6:	add    esi,r9d
    73e9:	lea    r9d,[r8+rsi*1]
    73ed:	sub    r8d,esi
    73f0:	lea    esi,[rdx+rdi*1]
    73f3:	sub    edx,edi
    73f5:	mov    DWORD PTR [rax-0x100],r9d
    73fc:	mov    DWORD PTR [rax-0xd0],r8d
    7403:	mov    DWORD PTR [rax-0xf0],esi
    7409:	mov    DWORD PTR [rax-0xe0],edx
    740f:	cmp    r10,rax
    7412:	jne    73be <dct_luma_16x16+0x9ce>
    7414:	mov    QWORD PTR [rsp+0x50],r10
    7419:	add    DWORD PTR [rsp+0x48],0x1
    741e:	mov    eax,DWORD PTR [rsp+0x48]
    7422:	add    QWORD PTR [rsp+0x50],0x40
    7428:	cmp    eax,0x4
    742b:	jne    711f <dct_luma_16x16+0x72f>
    7431:	add    QWORD PTR [rsp+0x68],0x1
    7437:	mov    rax,QWORD PTR [rsp+0x68]
    743c:	add    QWORD PTR [rsp+0x70],0x4
    7442:	cmp    rax,0x4
    7446:	jne    70ee <dct_luma_16x16+0x6fe>
    744c:	mov    eax,DWORD PTR [rcx+0x11c14]
    7452:	mov    r14d,DWORD PTR [rsp+0x8]
    7457:	test   eax,eax
    7459:	jne    75c8 <dct_luma_16x16+0xbd8>
    745f:	mov    r10,QWORD PTR [rsp+0x78]
    7464:	xor    r9d,r9d
    7467:	mov    r12,r10
    746a:	nop    WORD PTR [rax+rax*1+0x0]
    7470:	mov    edi,r9d
    7473:	mov    r8d,r9d
    7476:	mov    rsi,r10
    7479:	xor    eax,eax
    747b:	sar    edi,0x2
    747e:	and    r8d,0x3
    7482:	movsxd rdi,edi
    7485:	nop    DWORD PTR [rax]
    7488:	mov    edx,eax
    748a:	mov    r11d,eax
    748d:	add    eax,0x1
    7490:	add    rsi,0x40
    7494:	sar    edx,0x2
    7497:	and    r11d,0x3
    749b:	movsxd rdx,edx
    749e:	lea    rdx,[rdx+r11*4]
    74a2:	lea    rdx,[r8+rdx*4]
    74a6:	lea    rdx,[rdi+rdx*4]
    74aa:	mov    edx,DWORD PTR [rsp+rdx*4+0x4f0]
    74b1:	mov    DWORD PTR [rsi-0x40],edx
    74b4:	cmp    eax,0x10
    74b7:	jne    7488 <dct_luma_16x16+0xa98>
    74b9:	add    r9d,0x1
    74bd:	add    r10,0x4
    74c1:	cmp    r9d,0x10
    74c5:	jne    7470 <dct_luma_16x16+0xa80>
    74c7:	mov    rax,QWORD PTR [rip+0x834da]        # 8a9a8 <enc_picture>
    74ce:	mov    r15,QWORD PTR [rsp+0x78]
    74d3:	xor    ebx,ebx
    74d5:	xor    ebp,ebp
    74d7:	movsxd rdx,DWORD PTR [rcx+0x9c]
    74de:	mov    r8,QWORD PTR [rsp+0x80]
    74e6:	mov    rax,QWORD PTR [rax+0x1918]
    74ed:	add    r15,0x40
    74f1:	add    r8,rcx
    74f4:	lea    r13,[rax+rdx*8]
    74f8:	movsxd rax,DWORD PTR [rcx+0x98]
    74ff:	add    rax,rax
    7502:	mov    QWORD PTR [rsp+0x8],rax
    7507:	nop    WORD PTR [rax+rax*1+0x0]
    7510:	mov    r9,QWORD PTR [rsp+0x8]
    7515:	mov    rdx,r12
    7518:	add    r9,QWORD PTR [r13+0x0]
    751c:	xor    eax,eax
    751e:	jmp    7535 <dct_luma_16x16+0xb45>
    7520:	add    esi,edi
    7522:	add    rdx,0x40
    7526:	mov    WORD PTR [r9+rax*1],si
    752b:	add    rax,0x2
    752f:	cmp    rax,0x20
    7533:	je     7586 <dct_luma_16x16+0xb96>
    7535:	movzx  esi,WORD PTR [r8+rax*1+0x12b8]
    753e:	movsxd rdi,DWORD PTR [rdx]
    7541:	test   r14d,r14d
    7544:	jne    7520 <dct_luma_16x16+0xb30>
    7546:	shl    rsi,0x6
    754a:	mov    r10d,DWORD PTR [rcx+0x11bec]
    7551:	mov    r11,rbx
    7554:	lea    rsi,[rsi+rdi*1+0x20]
    7559:	sar    rsi,0x6
    755d:	movsxd rdi,r10d
    7560:	cmovns r11,rsi
    7564:	cmp    rdi,r11
    7567:	jl     7573 <dct_luma_16x16+0xb83>
    7569:	test   rsi,rsi
    756c:	mov    r10d,esi
    756f:	cmovs  r10d,ebp
    7573:	mov    WORD PTR [r9+rax*1],r10w
    7578:	add    rax,0x2
    757c:	add    rdx,0x40
    7580:	cmp    rax,0x20
    7584:	jne    7535 <dct_luma_16x16+0xb45>
    7586:	add    r12,0x4
    758a:	add    r13,0x8
    758e:	add    r8,0x20
    7592:	cmp    r15,r12
    7595:	jne    7510 <dct_luma_16x16+0xb20>
    759b:	mov    rax,QWORD PTR [rsp+0x8f8]
    75a3:	xor    rax,QWORD PTR fs:0x28
    75ac:	jne    764b <dct_luma_16x16+0xc5b>
    75b2:	mov    eax,DWORD PTR [rsp+0x40]
    75b6:	add    rsp,0x908
    75bd:	pop    rbx
    75be:	pop    rbp
    75bf:	pop    r12
    75c1:	pop    r13
    75c3:	pop    r14
    75c5:	pop    r15
    75c7:	ret    
    75c8:	add    rcx,0x3338
    75cf:	xor    r10d,r10d
    75d2:	nop    WORD PTR [rax+rax*1+0x0]
    75d8:	mov    r8d,r10d
    75db:	mov    r9d,r10d
    75de:	mov    rdi,rcx
    75e1:	xor    eax,eax
    75e3:	sar    r8d,0x2
    75e7:	and    r9d,0x3
    75eb:	movsxd r8,r8d
    75ee:	xchg   ax,ax
    75f0:	mov    edx,eax
    75f2:	mov    esi,eax
    75f4:	sar    edx,0x2
    75f7:	and    esi,0x3
    75fa:	movsxd rdx,edx
    75fd:	lea    rdx,[rdx+rsi*4]
    7601:	lea    rdx,[r9+rdx*4]
    7605:	lea    rdx,[r8+rdx*4]
    7609:	mov    edx,DWORD PTR [rsp+rdx*4+0x4f0]
    7610:	lea    esi,[rdx+0x20]
    7613:	sar    esi,0x6
    7616:	test   r14d,r14d
    7619:	cmove  edx,esi
    761c:	add    eax,0x1
    761f:	add    rdi,0x40
    7623:	mov    DWORD PTR [rdi-0x40],edx
    7626:	cmp    eax,0x10
    7629:	jne    75f0 <dct_luma_16x16+0xc00>
    762b:	add    r10d,0x1
    762f:	add    rcx,0x4
    7633:	cmp    r10d,0x10
    7637:	jne    75d8 <dct_luma_16x16+0xbe8>
    7639:	jmp    759b <dct_luma_16x16+0xbab>
    763e:	mov    BYTE PTR [rsp+0x8b],0x0
    7646:	jmp    6a85 <dct_luma_16x16+0x95>
    764b:	call   4390 <__stack_chk_fail@plt>
    7650:	movsxd rcx,DWORD PTR [rsp+0x1c]
    7655:	mov    rdx,QWORD PTR [rsp+0x28]
    765a:	mov    DWORD PTR [rsp+0x20],edi
    765e:	mov    QWORD PTR [rsp+0x98],r9
    7666:	lea    r10,[rdx+rcx*4]
    766a:	mov    QWORD PTR [rsp+0x90],rcx
    7672:	mov    QWORD PTR [rsp+0x40],r10
    7677:	mov    DWORD PTR [rsp+0x8c],esi
    767e:	call   465a0 <sign>
    7683:	mov    r10,QWORD PTR [rsp+0x40]
    7688:	mov    rdi,QWORD PTR [rsp+0x30]
    768d:	mov    DWORD PTR [rsp+0x40],0xf
    7695:	mov    rcx,QWORD PTR [rsp+0x90]
    769d:	add    DWORD PTR [rsp+0x1c],0x1
    76a2:	mov    DWORD PTR [r10],eax
    76a5:	mov    esi,DWORD PTR [rsp+0x8c]
    76ac:	mov    DWORD PTR [rdi+rcx*4],r14d
    76b0:	mov    r9,QWORD PTR [rsp+0x98]
    76b8:	or     r14d,0xffffffff
    76bc:	mov    edi,DWORD PTR [rsp+0x20]
    76c0:	jmp    729f <dct_luma_16x16+0x8af>
    76c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000076d0 <dct_luma>:
    76d0:	endbr64 
    76d4:	push   r15
    76d6:	lea    r8d,[rdi+0x3]
    76da:	mov    r9d,esi
    76dd:	mov    r11,rdx
    76e0:	push   r14
    76e2:	push   r13
    76e4:	push   r12
    76e6:	push   rbp
    76e7:	push   rbx
    76e8:	sub    rsp,0x98
    76ef:	mov    DWORD PTR [rsp+0x6c],edi
    76f3:	mov    DWORD PTR [rsp+0x50],esi
    76f7:	mov    DWORD PTR [rsp+0x48],ecx
    76fb:	mov    rax,QWORD PTR fs:0x28
    7704:	mov    QWORD PTR [rsp+0x88],rax
    770c:	xor    eax,eax
    770e:	test   edi,edi
    7710:	lea    eax,[rsi+0x3]
    7713:	cmovns r8d,edi
    7717:	mov    DWORD PTR [rsp+0x60],eax
    771b:	mov    ecx,r8d
    771e:	sar    ecx,0x2
    7721:	test   esi,esi
    7723:	cmovs  r9d,eax
    7727:	mov    rax,QWORD PTR [rip+0x80e82]        # 885b0 <img>
    772e:	mov    esi,r9d
    7731:	mov    edx,r9d
    7734:	shr    r9d,0x1f
    7738:	sar    esi,0x2
    773b:	shr    edx,0x1f
    773e:	add    edx,esi
    7740:	add    esi,r9d
    7743:	and    edx,0xfffffffe
    7746:	and    esi,0x1
    7749:	mov    edi,edx
    774b:	mov    edx,r8d
    774e:	shr    r8d,0x1f
    7752:	sub    esi,r9d
    7755:	shr    edx,0x1f
    7758:	add    edx,ecx
    775a:	add    ecx,r8d
    775d:	sar    edx,1
    775f:	and    ecx,0x1
    7762:	add    edx,edi
    7764:	mov    rdi,QWORD PTR [rax+0x3738]
    776b:	sub    ecx,r8d
    776e:	movsxd rdx,edx
    7771:	lea    ecx,[rcx+rsi*2]
    7774:	mov    rdx,QWORD PTR [rdi+rdx*8]
    7778:	movsxd rcx,ecx
    777b:	mov    rdx,QWORD PTR [rdx+rcx*8]
    777f:	mov    rbx,QWORD PTR [rdx]
    7782:	mov    QWORD PTR [rsp+0x38],rbx
    7787:	mov    rbx,QWORD PTR [rdx+0x8]
    778b:	movsxd rdx,DWORD PTR [rax+0xc]
    778f:	mov    QWORD PTR [rsp+0x40],rbx
    7794:	imul   rdx,rdx,0x278
    779b:	add    rdx,QWORD PTR [rax+0x3758]
    77a2:	mov    rbx,rdx
    77a5:	mov    QWORD PTR [rsp+0x58],rdx
    77aa:	mov    edx,DWORD PTR [rax+0x11bdc]
    77b0:	add    edx,DWORD PTR [rbx+0xc]
    77b3:	mov    ebx,edx
    77b5:	mov    DWORD PTR [rsp+0x54],edx
    77b9:	movsxd rdx,edx
    77bc:	imul   rdx,rdx,0x2aaaaaab
    77c3:	mov    ecx,ebx
    77c5:	mov    ebp,ebx
    77c7:	sar    ecx,0x1f
    77ca:	shr    rdx,0x20
    77ce:	mov    esi,edx
    77d0:	sub    esi,ecx
    77d2:	lea    edx,[rsi+0xf]
    77d5:	mov    DWORD PTR [rsp+0x2c],esi
    77d9:	mov    DWORD PTR [rsp+0x4c],edx
    77dd:	lea    edx,[rsi+rsi*2]
    77e0:	add    edx,edx
    77e2:	sub    ebp,edx
    77e4:	test   ebx,ebx
    77e6:	jne    77fc <dct_luma+0x12c>
    77e8:	mov    ebx,DWORD PTR [rax+0x11c00]
    77ee:	mov    BYTE PTR [rsp+0x6b],0x0
    77f3:	cmp    ebx,0x1
    77f6:	je     789a <dct_luma+0x1ca>
    77fc:	lea    rdx,[rax+0x3338]
    7803:	lea    r10,[rax+0x3348]
    780a:	mov    rcx,rdx
    780d:	mov    edi,DWORD PTR [rcx+0xc0]
    7813:	mov    esi,DWORD PTR [rcx]
    7815:	add    rcx,0x4
    7819:	mov    ebx,DWORD PTR [rcx+0x7c]
    781c:	lea    r8d,[rsi+rdi*1]
    7820:	sub    esi,edi
    7822:	mov    edi,DWORD PTR [rcx+0x3c]
    7825:	lea    r9d,[rdi+rbx*1]
    7829:	sub    edi,ebx
    782b:	lea    ebx,[r8+r9*1]
    782f:	sub    r8d,r9d
    7832:	mov    DWORD PTR [rcx+0x7c],r8d
    7836:	lea    r8d,[rdi+rsi*2]
    783a:	add    edi,edi
    783c:	sub    esi,edi
    783e:	mov    DWORD PTR [rcx-0x4],ebx
    7841:	mov    DWORD PTR [rcx+0x3c],r8d
    7845:	mov    DWORD PTR [rcx+0xbc],esi
    784b:	cmp    rcx,r10
    784e:	jne    780d <dct_luma+0x13d>
    7850:	lea    r9,[rax+0x3438]
    7857:	mov    esi,DWORD PTR [rdx+0xc]
    785a:	mov    ecx,DWORD PTR [rdx]
    785c:	add    rdx,0x40
    7860:	mov    r10d,DWORD PTR [rdx-0x38]
    7864:	lea    edi,[rcx+rsi*1]
    7867:	sub    ecx,esi
    7869:	mov    esi,DWORD PTR [rdx-0x3c]
    786c:	lea    r8d,[rsi+r10*1]
    7870:	sub    esi,r10d
    7873:	lea    r10d,[rdi+r8*1]
    7877:	sub    edi,r8d
    787a:	mov    DWORD PTR [rdx-0x38],edi
    787d:	lea    edi,[rsi+rcx*2]
    7880:	add    esi,esi
    7882:	sub    ecx,esi
    7884:	mov    DWORD PTR [rdx-0x40],r10d
    7888:	mov    DWORD PTR [rdx-0x3c],edi
    788b:	mov    DWORD PTR [rdx-0x34],ecx
    788e:	cmp    rdx,r9
    7891:	jne    7857 <dct_luma+0x187>
    7893:	mov    BYTE PTR [rsp+0x6b],0x1
    7898:	xor    ebx,ebx
    789a:	mov    ecx,0x3
    789f:	mov    edx,0x1
    78a4:	sub    ecx,DWORD PTR [rsp+0x2c]
    78a8:	xor    edi,edi
    78aa:	movsxd rbp,ebp
    78ad:	shl    edx,cl
    78af:	xor    r12d,r12d
    78b2:	mov    r14d,0xffffffff
    78b8:	lea    r8,[rip+0x63142]        # 6aa01 <FIELD_SCAN+0x1>
    78bf:	lea    rsi,[rbp*4+0x0]
    78c7:	mov    DWORD PTR [rsp+0x64],edx
    78cb:	mov    r9d,r12d
    78ce:	mov    edx,r14d
    78d1:	mov    r12d,ebx
    78d4:	mov    QWORD PTR [rsp+0x30],rsi
    78d9:	mov    r14,r8
    78dc:	lea    r10,[rip+0x6313e]        # 6aa21 <SNGL_SCAN+0x1>
    78e3:	mov    ebx,edi
    78e5:	jmp    79fe <dct_luma+0x32e>
    78ea:	nop    WORD PTR [rax+rax*1+0x0]
    78f0:	mov    esi,DWORD PTR [rax+0x11ad0]
    78f6:	test   esi,esi
    78f8:	je     790d <dct_luma+0x23d>
    78fa:	mov    rsi,QWORD PTR [rsp+0x58]
    78ff:	mov    ecx,DWORD PTR [rsi+0x214]
    7905:	test   ecx,ecx
    7907:	jne    7a0c <dct_luma+0x33c>
    790d:	movzx  r13d,BYTE PTR [r10-0x1]
    7912:	movzx  r15d,BYTE PTR [r10]
    7916:	mov    rcx,r13
    7919:	add    edx,0x1
    791c:	shl    rcx,0x4
    7920:	add    rcx,r15
    7923:	lea    rsi,[rax+rcx*4]
    7927:	mov    ecx,DWORD PTR [rsi+0x3338]
    792d:	mov    edi,ecx
    792f:	sar    edi,0x1f
    7932:	mov    ebp,edi
    7934:	xor    ebp,ecx
    7936:	sub    ebp,edi
    7938:	test   r12d,r12d
    793b:	je     7a20 <dct_luma+0x350>
    7941:	test   ecx,ecx
    7943:	je     79e6 <dct_luma+0x316>
    7949:	mov    eax,DWORD PTR [r11]
    794c:	add    eax,0xf423f
    7951:	mov    DWORD PTR [r11],eax
    7954:	mov    rax,QWORD PTR [rsp+0x38]
    7959:	movsxd rcx,ebx
    795c:	mov    edi,ebp
    795e:	mov    esi,DWORD PTR [rsi+0x3338]
    7964:	mov    QWORD PTR [rsp+0x20],r10
    7969:	add    ebx,0x1
    796c:	lea    r9,[rax+rcx*4]
    7970:	mov    QWORD PTR [rsp+0x18],r11
    7975:	mov    DWORD PTR [rsp+0x28],edx
    7979:	mov    QWORD PTR [rsp+0x10],rcx
    797e:	mov    QWORD PTR [rsp+0x8],r9
    7983:	call   465a0 <sign>
    7988:	mov    r9,QWORD PTR [rsp+0x8]
    798d:	mov    edx,DWORD PTR [rsp+0x28]
    7991:	mov    edi,ebp
    7993:	mov    rcx,QWORD PTR [rsp+0x10]
    7998:	mov    DWORD PTR [r9],eax
    799b:	mov    rax,QWORD PTR [rsp+0x40]
    79a0:	mov    DWORD PTR [rax+rcx*4],edx
    79a3:	mov    rax,r13
    79a6:	shl    rax,0x4
    79aa:	lea    rdx,[rax+r15*1+0xccc]
    79b2:	mov    rax,QWORD PTR [rip+0x80bf7]        # 885b0 <img>
    79b9:	mov    esi,DWORD PTR [rax+rdx*4+0x8]
    79bd:	call   465a0 <sign>
    79c2:	test   r12d,r12d
    79c5:	mov    r11,QWORD PTR [rsp+0x18]
    79ca:	mov    r10,QWORD PTR [rsp+0x20]
    79cf:	mov    ebp,eax
    79d1:	mov    rax,QWORD PTR [rip+0x80bd8]        # 885b0 <img>
    79d8:	je     7aa0 <dct_luma+0x3d0>
    79de:	mov    r9d,r12d
    79e1:	mov    edx,0xffffffff
    79e6:	add    r14,0x2
    79ea:	lea    rsi,[rip+0x63030]        # 6aa21 <SNGL_SCAN+0x1>
    79f1:	add    r10,0x2
    79f5:	cmp    r14,rsi
    79f8:	je     7b80 <dct_luma+0x4b0>
    79fe:	mov    edi,DWORD PTR [rax+0x11afc]
    7a04:	test   edi,edi
    7a06:	je     78f0 <dct_luma+0x220>
    7a0c:	movzx  r13d,BYTE PTR [r14-0x1]
    7a11:	movzx  r15d,BYTE PTR [r14]
    7a15:	jmp    7916 <dct_luma+0x246>
    7a1a:	nop    WORD PTR [rax+rax*1+0x0]
    7a20:	mov    rdi,QWORD PTR [rsp+0x30]
    7a25:	cmp    DWORD PTR [rsp+0x48],0x1
    7a2a:	lea    rcx,[rdi+r13*1]
    7a2e:	lea    rdi,[r15+rcx*4]
    7a32:	je     7b00 <dct_luma+0x430>
    7a38:	lea    rcx,[rip+0xd1981]        # d93c0 <LevelScale4x4Luma_Inter>
    7a3f:	imul   ebp,DWORD PTR [rcx+rdi*4]
    7a43:	movsxd rcx,DWORD PTR [rsp+0x2c]
    7a48:	lea    rcx,[r13+rcx*4+0x0]
    7a4d:	lea    rdi,[r15+rcx*4]
    7a51:	lea    rcx,[rip+0xd22a8]        # d9d00 <LevelOffset4x4Luma_Inter>
    7a58:	add    ebp,DWORD PTR [rcx+rdi*4]
    7a5b:	movzx  ecx,BYTE PTR [rsp+0x4c]
    7a60:	sar    ebp,cl
    7a62:	test   ebp,ebp
    7a64:	je     7aeb <dct_luma+0x41b>
    7a6a:	mov    eax,DWORD PTR [r11]
    7a6d:	cmp    ebp,0x1
    7a70:	jg     794c <dct_luma+0x27c>
    7a76:	mov    rcx,QWORD PTR [rip+0x80b3b]        # 885b8 <input>
    7a7d:	lea    r9,[rip+0x62f5c]        # 6a9e0 <COEFF_COST>
    7a84:	movsxd rdi,edx
    7a87:	movsxd rcx,DWORD PTR [rcx+0x9a4]
    7a8e:	shl    rcx,0x4
    7a92:	add    rcx,r9
    7a95:	movzx  ecx,BYTE PTR [rcx+rdi*1]
    7a99:	add    eax,ecx
    7a9b:	jmp    7951 <dct_luma+0x281>
    7aa0:	cmp    DWORD PTR [rsp+0x54],0x17
    7aa5:	jg     7b30 <dct_luma+0x460>
    7aab:	mov    rsi,QWORD PTR [rsp+0x30]
    7ab0:	mov    ecx,0x4
    7ab5:	sub    ecx,DWORD PTR [rsp+0x2c]
    7ab9:	cmp    DWORD PTR [rsp+0x48],0x1
    7abe:	lea    rdx,[rsi+r13*1]
    7ac2:	lea    rsi,[rip+0xd0cf7]        # d87c0 <InvLevelScale4x4Luma_Intra>
    7ac9:	lea    rdx,[r15+rdx*4]
    7acd:	je     7ad6 <dct_luma+0x406>
    7acf:	lea    rsi,[rip+0xcfa6a]        # d7540 <InvLevelScale4x4Luma_Inter>
    7ad6:	imul   ebp,DWORD PTR [rsi+rdx*4]
    7ada:	add    ebp,DWORD PTR [rsp+0x64]
    7ade:	mov    r9d,0x1
    7ae4:	mov    edx,0xffffffff
    7ae9:	sar    ebp,cl
    7aeb:	shl    r13,0x4
    7aef:	lea    rcx,[r13+r15*1+0xccc]
    7af7:	mov    DWORD PTR [rax+rcx*4+0x8],ebp
    7afb:	jmp    79e6 <dct_luma+0x316>
    7b00:	lea    rcx,[rip+0xd1139]        # d8c40 <LevelScale4x4Luma_Intra>
    7b07:	imul   ebp,DWORD PTR [rcx+rdi*4]
    7b0b:	movsxd rcx,DWORD PTR [rsp+0x2c]
    7b10:	lea    rcx,[r13+rcx*4+0x0]
    7b15:	lea    rdi,[r15+rcx*4]
    7b19:	lea    rcx,[rip+0xd3de0]        # db900 <LevelOffset4x4Luma_Intra>
    7b20:	add    ebp,DWORD PTR [rcx+rdi*4]
    7b23:	movzx  ecx,BYTE PTR [rsp+0x4c]
    7b28:	sar    ebp,cl
    7b2a:	jmp    7a62 <dct_luma+0x392>
    7b2f:	nop
    7b30:	mov    esi,DWORD PTR [rsp+0x2c]
    7b34:	cmp    DWORD PTR [rsp+0x48],0x1
    7b39:	lea    ecx,[rsi-0x4]
    7b3c:	mov    rsi,QWORD PTR [rsp+0x30]
    7b41:	lea    rdx,[rsi+r13*1]
    7b45:	lea    rdx,[r15+rdx*4]
    7b49:	je     7e60 <dct_luma+0x790>
    7b4f:	lea    rsi,[rip+0xcf9ea]        # d7540 <InvLevelScale4x4Luma_Inter>
    7b56:	shl    r13,0x4
    7b5a:	mov    r9d,0x1
    7b60:	imul   ebp,DWORD PTR [rsi+rdx*4]
    7b64:	mov    edx,0xffffffff
    7b69:	shl    ebp,cl
    7b6b:	lea    rcx,[r13+r15*1+0xccc]
    7b73:	mov    DWORD PTR [rax+rcx*4+0x8],ebp
    7b77:	jmp    79e6 <dct_luma+0x316>
    7b7c:	nop    DWORD PTR [rax+0x0]
    7b80:	mov    rsi,QWORD PTR [rsp+0x38]
    7b85:	movsxd r13,ebx
    7b88:	cmp    BYTE PTR [rsp+0x6b],0x0
    7b8d:	mov    ebx,r12d
    7b90:	mov    r12d,r9d
    7b93:	mov    DWORD PTR [rsi+r13*4],0x0
    7b9b:	je     7e8d <dct_luma+0x7bd>
    7ba1:	lea    rdx,[rax+0x3338]
    7ba8:	mov    rsi,rax
    7bab:	lea    r9,[rax+0x3348]
    7bb2:	nop    WORD PTR [rax+rax*1+0x0]
    7bb8:	mov    r10d,DWORD PTR [rdx+0x40]
    7bbc:	mov    ecx,DWORD PTR [rdx]
    7bbe:	add    rdx,0x4
    7bc2:	mov    r8d,DWORD PTR [rdx+0x7c]
    7bc6:	mov    edi,DWORD PTR [rdx+0xbc]
    7bcc:	lea    r11d,[r8+rcx*1]
    7bd0:	sub    ecx,r8d
    7bd3:	mov    r8d,r10d
    7bd6:	sar    r8d,1
    7bd9:	sub    r8d,edi
    7bdc:	sar    edi,1
    7bde:	add    edi,r10d
    7be1:	lea    r10d,[r11+rdi*1]
    7be5:	sub    r11d,edi
    7be8:	lea    edi,[rcx+r8*1]
    7bec:	sub    ecx,r8d
    7bef:	mov    DWORD PTR [rdx-0x4],r10d
    7bf3:	mov    DWORD PTR [rdx+0xbc],r11d
    7bfa:	mov    DWORD PTR [rdx+0x3c],edi
    7bfd:	mov    DWORD PTR [rdx+0x7c],ecx
    7c00:	cmp    r9,rdx
    7c03:	jne    7bb8 <dct_luma+0x4e8>
    7c05:	lea    rdx,[rax+0x100]
    7c0c:	mov    ebp,DWORD PTR [rax+0x11c14]
    7c12:	mov    r11d,DWORD PTR [rsp+0x6c]
    7c17:	xor    r13d,r13d
    7c1a:	mov    DWORD PTR [rsp+0x8],r12d
    7c1f:	lea    r14,[rsp+0x70]
    7c24:	mov    r12,rdx
    7c27:	mov    r8d,DWORD PTR [rsi+0x3340]
    7c2e:	mov    edx,DWORD PTR [rsi+0x3338]
    7c34:	mov    edi,DWORD PTR [rsi+0x333c]
    7c3a:	mov    ecx,DWORD PTR [rsi+0x3344]
    7c40:	lea    r9d,[r8+rdx*1]
    7c44:	sub    edx,r8d
    7c47:	movsxd r8,r11d
    7c4a:	mov    DWORD PTR [rsp+0x74],edx
    7c4e:	mov    edx,edi
    7c50:	shl    r8,0x4
    7c54:	sar    edx,1
    7c56:	mov    DWORD PTR [rsp+0x70],r9d
    7c5b:	sub    edx,ecx
    7c5d:	sar    ecx,1
    7c5f:	add    ecx,edi
    7c61:	mov    DWORD PTR [rsp+0x78],edx
    7c65:	xor    edx,edx
    7c67:	mov    DWORD PTR [rsp+0x7c],ecx
    7c6b:	test   ebp,ebp
    7c6d:	jne    7d16 <dct_luma+0x646>
    7c73:	mov    edi,DWORD PTR [rsp+0x50]
    7c77:	mov    r10d,DWORD PTR [r14+rdx*4]
    7c7b:	movsxd r9,DWORD PTR [rax+0x11bec]
    7c82:	add    edi,edx
    7c84:	movsxd rdi,edi
    7c87:	lea    rdi,[rdi+r8*1+0x1898]
    7c8f:	movzx  r15d,WORD PTR [rax+rdi*2+0x8]
    7c95:	lea    edi,[r10+rcx*1]
    7c99:	movsxd rdi,edi
    7c9c:	shl    r15,0x6
    7ca0:	lea    rdi,[r15+rdi*1+0x20]
    7ca5:	mov    r15d,DWORD PTR [rsp+0x60]
    7caa:	sar    rdi,0x6
    7cae:	cmovs  rdi,r13
    7cb2:	cmp    rdi,r9
    7cb5:	cmovg  rdi,r9
    7cb9:	sub    r15d,edx
    7cbc:	sub    r10d,ecx
    7cbf:	movsxd r15,r15d
    7cc2:	movsxd r10,r10d
    7cc5:	lea    r15,[r15+r8*1+0x1898]
    7ccd:	mov    DWORD PTR [rsi+rdx*4+0x3338],edi
    7cd4:	mov    rdi,rdx
    7cd7:	movzx  r15d,WORD PTR [rax+r15*2+0x8]
    7cdd:	neg    rdi
    7ce0:	shl    r15,0x6
    7ce4:	lea    rcx,[r15+r10*1+0x20]
    7ce9:	sar    rcx,0x6
    7ced:	cmovs  rcx,r13
    7cf1:	cmp    rcx,r9
    7cf4:	cmovg  rcx,r9
    7cf8:	mov    DWORD PTR [rsi+rdi*4+0x3344],ecx
    7cff:	cmp    rdx,0x1
    7d03:	je     7d44 <dct_luma+0x674>
    7d05:	mov    ecx,DWORD PTR [rsp+0x78]
    7d09:	mov    edx,0x1
    7d0e:	test   ebp,ebp
    7d10:	je     7c73 <dct_luma+0x5a3>
    7d16:	mov    edi,DWORD PTR [r14+rdx*4]
    7d1a:	test   ebx,ebx
    7d1c:	je     7e30 <dct_luma+0x760>
    7d22:	lea    r9d,[rdi+rcx*1]
    7d26:	sub    edi,ecx
    7d28:	mov    DWORD PTR [rsi+rdx*4+0x3338],r9d
    7d30:	mov    r9,rdx
    7d33:	neg    r9
    7d36:	mov    DWORD PTR [rsi+r9*4+0x3344],edi
    7d3e:	cmp    rdx,0x1
    7d42:	jne    7d05 <dct_luma+0x635>
    7d44:	add    rsi,0x40
    7d48:	add    r11d,0x1
    7d4c:	cmp    rsi,r12
    7d4f:	jne    7c27 <dct_luma+0x557>
    7d55:	mov    r12d,DWORD PTR [rsp+0x8]
    7d5a:	test   ebp,ebp
    7d5c:	jne    7df3 <dct_luma+0x723>
    7d62:	mov    esi,DWORD PTR [rsp+0x50]
    7d66:	mov    r15d,DWORD PTR [rsp+0x6c]
    7d6b:	mov    r10,rax
    7d6e:	lea    r14,[rax+0x10]
    7d72:	mov    edx,DWORD PTR [rax+0x9c]
    7d78:	mov    rcx,QWORD PTR [rip+0x82c29]        # 8a9a8 <enc_picture>
    7d7f:	mov    r13d,DWORD PTR [rax+0x98]
    7d86:	mov    rcx,QWORD PTR [rcx+0x1918]
    7d8d:	add    edx,esi
    7d8f:	add    r13d,r15d
    7d92:	movsxd rdx,edx
    7d95:	movsxd r13,r13d
    7d98:	lea    r11,[rcx+rdx*8]
    7d9c:	add    r13,r13
    7d9f:	mov    r9,QWORD PTR [r11]
    7da2:	mov    rcx,r10
    7da5:	xor    edx,edx
    7da7:	movsxd rbp,esi
    7daa:	add    r9,r13
    7dad:	mov    edi,DWORD PTR [rcx+0x3338]
    7db3:	test   ebx,ebx
    7db5:	je     7e20 <dct_luma+0x750>
    7db7:	lea    r8d,[r15+rdx*1]
    7dbb:	movsxd r8,r8d
    7dbe:	shl    r8,0x4
    7dc2:	lea    r8,[r8+rbp*1+0x1898]
    7dca:	add    di,WORD PTR [rax+r8*2+0x8]
    7dd0:	mov    WORD PTR [r9+rdx*2],di
    7dd5:	add    rdx,0x1
    7dd9:	add    rcx,0x40
    7ddd:	cmp    rdx,0x4
    7de1:	jne    7dad <dct_luma+0x6dd>
    7de3:	add    r10,0x4
    7de7:	add    r11,0x8
    7deb:	add    esi,0x1
    7dee:	cmp    r14,r10
    7df1:	jne    7d9f <dct_luma+0x6cf>
    7df3:	mov    rax,QWORD PTR [rsp+0x88]
    7dfb:	xor    rax,QWORD PTR fs:0x28
    7e04:	jne    7e98 <dct_luma+0x7c8>
    7e0a:	add    rsp,0x98
    7e11:	mov    eax,r12d
    7e14:	pop    rbx
    7e15:	pop    rbp
    7e16:	pop    r12
    7e18:	pop    r13
    7e1a:	pop    r14
    7e1c:	pop    r15
    7e1e:	ret    
    7e1f:	nop
    7e20:	mov    WORD PTR [r9+rdx*2],di
    7e25:	jmp    7dd5 <dct_luma+0x705>
    7e27:	nop    WORD PTR [rax+rax*1+0x0]
    7e30:	lea    r9d,[rdi+rcx*1+0x20]
    7e35:	sub    edi,ecx
    7e37:	sar    r9d,0x6
    7e3b:	add    edi,0x20
    7e3e:	mov    DWORD PTR [rsi+rdx*4+0x3338],r9d
    7e46:	mov    r9,rdx
    7e49:	sar    edi,0x6
    7e4c:	neg    r9
    7e4f:	mov    DWORD PTR [rsi+r9*4+0x3344],edi
    7e57:	jmp    7cff <dct_luma+0x62f>
    7e5c:	nop    DWORD PTR [rax+0x0]
    7e60:	lea    rsi,[rip+0xd0959]        # d87c0 <InvLevelScale4x4Luma_Intra>
    7e67:	shl    r13,0x4
    7e6b:	mov    r9d,0x1
    7e71:	imul   ebp,DWORD PTR [rsi+rdx*4]
    7e75:	mov    edx,0xffffffff
    7e7a:	shl    ebp,cl
    7e7c:	lea    rcx,[r13+r15*1+0xccc]
    7e84:	mov    DWORD PTR [rax+rcx*4+0x8],ebp
    7e88:	jmp    79e6 <dct_luma+0x316>
    7e8d:	mov    ebp,DWORD PTR [rax+0x11c14]
    7e93:	jmp    7d5a <dct_luma+0x68a>
    7e98:	call   4390 <__stack_chk_fail@plt>
    7e9d:	nop    DWORD PTR [rax]

0000000000007ea0 <dct_chroma>:
    7ea0:	endbr64 
    7ea4:	push   r15
    7ea6:	push   r14
    7ea8:	push   r13
    7eaa:	push   r12
    7eac:	push   rbp
    7ead:	push   rbx
    7eae:	sub    rsp,0x1f8
    7eb5:	mov    r10,QWORD PTR [rip+0x806f4]        # 885b0 <img>
    7ebc:	mov    DWORD PTR [rsp+0x68],esi
    7ec0:	mov    DWORD PTR [rsp+0xf4],edi
    7ec7:	mov    rbx,QWORD PTR [r10+0x3758]
    7ece:	mov    rdx,QWORD PTR [r10+0x3740]
    7ed5:	mov    rax,QWORD PTR fs:0x28
    7ede:	mov    QWORD PTR [rsp+0x1e8],rax
    7ee6:	xor    eax,eax
    7ee8:	movsxd rax,DWORD PTR [r10+0xc]
    7eec:	mov    QWORD PTR [rsp+0x140],0x0
    7ef8:	mov    QWORD PTR [rsp+0x148],0xf0000
    7f04:	imul   rax,rax,0x278
    7f0b:	mov    QWORD PTR [rsp+0x150],0xff0000
    7f17:	add    rbx,rax
    7f1a:	movsxd rax,edi
    7f1d:	mov    QWORD PTR [rsp+0x40],rax
    7f22:	add    rax,0x1
    7f26:	lea    rsi,[rax*8+0x0]
    7f2e:	mov    rax,QWORD PTR [rdx+rax*8]
    7f32:	mov    QWORD PTR [rsp+0xd8],rbx
    7f3a:	mov    QWORD PTR [rsp+0xf8],rsi
    7f42:	mov    rsi,QWORD PTR [rax]
    7f45:	mov    rax,QWORD PTR [rax+0x8]
    7f49:	mov    QWORD PTR [rsp+0x80],rax
    7f51:	mov    eax,DWORD PTR [rbx+0x48]
    7f54:	mov    QWORD PTR [rsp+0x60],rsi
    7f59:	mov    esi,DWORD PTR [r10+0x11bf4]
    7f60:	lea    edx,[rax-0x9]
    7f63:	cmp    edx,0x1
    7f66:	mov    DWORD PTR [rsp+0x78],esi
    7f6a:	setbe  dl
    7f6d:	cmp    eax,0xd
    7f70:	sete   al
    7f73:	or     edx,eax
    7f75:	mov    eax,esi
    7f77:	shr    eax,0x1f
    7f7a:	mov    BYTE PTR [rsp+0x18],dl
    7f7e:	add    eax,esi
    7f80:	sar    eax,1
    7f82:	imul   eax,edi
    7f85:	mov    DWORD PTR [rsp+0xf0],eax
    7f8c:	mov    eax,0xffff0000
    7f91:	mov    QWORD PTR [rsp+0x158],rax
    7f99:	mov    eax,DWORD PTR [r10+0x11bfc]
    7fa0:	mov    edx,DWORD PTR [rbx+0xc]
    7fa3:	mov    DWORD PTR [rsp+0xe0],eax
    7faa:	mov    eax,edx
    7fac:	add    eax,DWORD PTR [r10+0x11bdc]
    7fb3:	jne    8588 <dct_chroma+0x6e8>
    7fb9:	mov    eax,DWORD PTR [r10+0x11c00]
    7fc0:	xor    ebx,ebx
    7fc2:	cmp    eax,0x1
    7fc5:	sete   bl
    7fc8:	setne  BYTE PTR [rsp+0xab]
    7fd0:	mov    DWORD PTR [rsp+0xa0],ebx
    7fd7:	mov    rax,QWORD PTR [rsp+0x40]
    7fdc:	mov    esi,DWORD PTR [r10+0x11be0]
    7fe3:	add    edx,DWORD PTR [r10+rax*4+0x11c0c]
    7feb:	mov    eax,esi
    7fed:	neg    eax
    7fef:	cmp    eax,edx
    7ff1:	jg     7ffe <dct_chroma+0x15e>
    7ff3:	cmp    edx,0x33
    7ff6:	mov    eax,0x33
    7ffb:	cmovle eax,edx
    7ffe:	test   eax,eax
    8000:	js     800f <dct_chroma+0x16f>
    8002:	cdqe   
    8004:	lea    rdx,[rip+0x62a35]        # 6aa40 <QP_SCALE_CR>
    800b:	movzx  eax,BYTE PTR [rdx+rax*1]
    800f:	lea    ebx,[rsi+rax*1]
    8012:	movsxd rdx,ebx
    8015:	mov    ecx,ebx
    8017:	mov    DWORD PTR [rsp+0xa4],ebx
    801e:	imul   rdx,rdx,0x2aaaaaab
    8025:	sar    ecx,0x1f
    8028:	shr    rdx,0x20
    802c:	mov    edi,edx
    802e:	sub    edi,ecx
    8030:	lea    edx,[rdi+rdi*2]
    8033:	mov    DWORD PTR [rsp+0x20],edi
    8037:	add    edx,edx
    8039:	sub    ebx,edx
    803b:	cmp    DWORD PTR [rsp+0xe0],0x2
    8043:	mov    DWORD PTR [rsp+0x48],ebx
    8047:	lea    ebx,[rdi+0xf]
    804a:	mov    DWORD PTR [rsp+0x58],ebx
    804e:	mov    ebx,DWORD PTR [r10+0x11c08]
    8055:	mov    DWORD PTR [rsp+0x50],ebx
    8059:	je     90c9 <dct_chroma+0x1229>
    805f:	mov    r15d,DWORD PTR [rsp+0x50]
    8064:	test   r15d,r15d
    8067:	jle    9dfe <dct_chroma+0x1f5e>
    806d:	mov    DWORD PTR [rsp+0x88],0x0
    8078:	mov    DWORD PTR [rsp+0x90],0x0
    8083:	mov    DWORD PTR [rsp+0x70],0x0
    808b:	mov    eax,DWORD PTR [r10+0x11c04]
    8092:	lea    rbx,[r10+0xc]
    8096:	mov    QWORD PTR [rsp+0x38],0x0
    809f:	xor    edx,edx
    80a1:	mov    QWORD PTR [rsp+0x10],rbx
    80a6:	mov    r8d,DWORD PTR [rsp+0x120]
    80ae:	mov    QWORD PTR [rsp+0x98],r10
    80b6:	mov    r15d,DWORD PTR [rsp+0x12c]
    80be:	mov    DWORD PTR [rsp+0x8],eax
    80c2:	mov    r13d,DWORD PTR [rsp+0x124]
    80ca:	mov    eax,DWORD PTR [rsp+0x128]
    80d1:	mov    r14d,DWORD PTR [rsp+0x8]
    80d6:	test   r14d,r14d
    80d9:	jle    8264 <dct_chroma+0x3c4>
    80df:	mov    rdi,QWORD PTR [rsp+0x10]
    80e4:	mov    r11d,0x80
    80ea:	xor    ebx,ebx
    80ec:	xor    r12d,r12d
    80ef:	mov    r10d,0x40
    80f5:	mov    r9d,0xc0
    80fb:	lea    rsi,[rdi-0x8]
    80ff:	lea    rbp,[rdi+0xf4]
    8106:	mov    QWORD PTR [rsp+0x28],rsi
    810b:	lea    rsi,[rdi-0x4]
    810f:	mov    QWORD PTR [rsp+0x30],rsi
    8114:	cmp    BYTE PTR [rsp+0xab],0x0
    811c:	je     8232 <dct_chroma+0x392>
    8122:	lea    rdi,[rbp-0x100]
    8129:	lea    r14,[rbp-0xf0]
    8130:	mov    rsi,rdi
    8133:	lea    rcx,[rsi+rbx*1]
    8137:	mov    eax,DWORD PTR [rsi+0x3338]
    813d:	add    rsi,0x4
    8141:	mov    edx,DWORD PTR [rcx+r9*1+0x3338]
    8149:	mov    r15d,DWORD PTR [rcx+r11*1+0x3338]
    8151:	lea    r8d,[rax+rdx*1]
    8155:	sub    eax,edx
    8157:	mov    edx,DWORD PTR [rcx+r10*1+0x3338]
    815f:	lea    r13d,[rdx+r15*1]
    8163:	sub    edx,r15d
    8166:	lea    r15d,[r8+r13*1]
    816a:	sub    r8d,r13d
    816d:	mov    DWORD PTR [rsi+0x3334],r15d
    8174:	mov    DWORD PTR [rcx+r11*1+0x3338],r8d
    817c:	lea    r8d,[rdx+rax*2]
    8180:	add    edx,edx
    8182:	sub    eax,edx
    8184:	mov    DWORD PTR [rcx+r10*1+0x3338],r8d
    818c:	mov    DWORD PTR [rcx+r9*1+0x3338],eax
    8194:	cmp    rsi,r14
    8197:	jne    8133 <dct_chroma+0x293>
    8199:	mov    rsi,QWORD PTR [rsp+0x10]
    819e:	mov    rcx,QWORD PTR [rsp+0x28]
    81a3:	mov    QWORD PTR [rsp],r9
    81a7:	mov    rdx,QWORD PTR [rsp+0x30]
    81ac:	sub    rsi,rbx
    81af:	sub    rcx,rbx
    81b2:	sub    rdx,rbx
    81b5:	add    rdi,0x40
    81b9:	add    rsi,0x40
    81bd:	add    rcx,0x40
    81c1:	add    rdx,0x40
    81c5:	mov    eax,DWORD PTR [rsi+0x32f8]
    81cb:	mov    r15d,DWORD PTR [rdi+0x32f8]
    81d2:	mov    r14d,DWORD PTR [rdx+0x32f8]
    81d9:	lea    r8d,[r15+rax*1]
    81dd:	sub    r15d,eax
    81e0:	mov    eax,DWORD PTR [rcx+0x32f8]
    81e6:	mov    r9d,r15d
    81e9:	lea    r13d,[rax+r14*1]
    81ed:	sub    eax,r14d
    81f0:	lea    r14d,[r8+r13*1]
    81f4:	mov    DWORD PTR [rdi+0x32f8],r14d
    81fb:	mov    r14d,r8d
    81fe:	sub    r14d,r13d
    8201:	mov    DWORD PTR [rdx+0x32f8],r14d
    8208:	lea    r14d,[rax+r15*2]
    820c:	mov    DWORD PTR [rcx+0x32f8],r14d
    8213:	lea    r14d,[rax+rax*1]
    8217:	sub    r9d,r14d
    821a:	mov    DWORD PTR [rsi+0x32f8],r9d
    8221:	cmp    rdi,rbp
    8224:	jne    81b5 <dct_chroma+0x315>
    8226:	mov    r9,QWORD PTR [rsp]
    822a:	movzx  edx,BYTE PTR [rsp+0xab]
    8232:	add    r12d,0x4
    8236:	add    rbp,0x100
    823d:	sub    rbx,0x100
    8244:	add    r9,0x100
    824b:	add    r10,0x100
    8252:	add    r11,0x100
    8259:	cmp    DWORD PTR [rsp+0x8],r12d
    825e:	jg     8114 <dct_chroma+0x274>
    8264:	add    QWORD PTR [rsp+0x38],0x4
    826a:	mov    rbx,QWORD PTR [rsp+0x38]
    826f:	add    QWORD PTR [rsp+0x10],0x10
    8275:	cmp    DWORD PTR [rsp+0x50],ebx
    8279:	jg     80d1 <dct_chroma+0x231>
    827f:	mov    r10,QWORD PTR [rsp+0x98]
    8287:	test   dl,dl
    8289:	je     82aa <dct_chroma+0x40a>
    828b:	mov    DWORD PTR [rsp+0x120],r8d
    8293:	mov    DWORD PTR [rsp+0x128],eax
    829a:	mov    DWORD PTR [rsp+0x124],r13d
    82a2:	mov    DWORD PTR [rsp+0x12c],r15d
    82aa:	cmp    DWORD PTR [rsp+0xe0],0x1
    82b2:	je     8e9e <dct_chroma+0xffe>
    82b8:	cmp    DWORD PTR [rsp+0xe0],0x2
    82c0:	je     9801 <dct_chroma+0x1961>
    82c6:	cmp    DWORD PTR [rsp+0xe0],0x3
    82ce:	je     9866 <dct_chroma+0x19c6>
    82d4:	mov    DWORD PTR [rsp+0xcc],0x0
    82df:	mov    eax,DWORD PTR [rsp+0x68]
    82e3:	mov    DWORD PTR [rsp+0xe4],eax
    82ea:	cmp    DWORD PTR [rsp+0x78],0x1
    82ef:	jle    9534 <dct_chroma+0x1694>
    82f5:	mov    ecx,0x3
    82fa:	mov    eax,0x1
    82ff:	sub    ecx,DWORD PTR [rsp+0x20]
    8303:	movsxd rsi,DWORD PTR [rsp+0xf0]
    830b:	shl    eax,cl
    830d:	lea    rdx,[rip+0x6236c]        # 6a680 <hor_offset>
    8314:	xor    r11d,r11d
    8317:	mov    DWORD PTR [rsp+0xc8],0x0
    8322:	mov    DWORD PTR [rsp+0xac],eax
    8329:	movsxd rax,DWORD PTR [rsp+0xe0]
    8331:	lea    rdi,[rsi*8+0x20]
    8339:	mov    QWORD PTR [rsp+0x108],rsi
    8341:	mov    QWORD PTR [rsp+0xe8],rax
    8349:	shl    rax,0x4
    834d:	lea    rbx,[rax+rdx*1]
    8351:	lea    rdx,[rip+0x622e8]        # 6a640 <ver_offset>
    8358:	mov    QWORD PTR [rsp+0xc0],rdi
    8360:	add    rax,rdx
    8363:	mov    QWORD PTR [rsp+0xd0],rbx
    836b:	mov    QWORD PTR [rsp+0x100],rax
    8373:	mov    QWORD PTR [rsp+0xb0],rax
    837b:	mov    rax,QWORD PTR [rsp+0x40]
    8380:	mov    QWORD PTR [rsp+0xb8],rbx
    8388:	lea    rbx,[rax+rax*2]
    838c:	mov    DWORD PTR [rsp+0x50],0x0
    8394:	lea    rax,[rax+rbx*4]
    8398:	mov    QWORD PTR [rsp+0x28],rbx
    839d:	mov    QWORD PTR [rsp+0x60],rax
    83a2:	mov    rax,r10
    83a5:	mov    r10d,r11d
    83a8:	mov    r11,rax
    83ab:	mov    eax,DWORD PTR [rsp+0xf0]
    83b2:	add    eax,DWORD PTR [rsp+0xc8]
    83b9:	lea    rbx,[rip+0x62260]        # 6a620 <cbp_blk_chroma>
    83c0:	mov    QWORD PTR [rsp+0x98],0x0
    83cc:	cdqe   
    83ce:	lea    rax,[rbx+rax*4]
    83d2:	mov    QWORD PTR [rsp+0x38],rax
    83d7:	mov    rax,r11
    83da:	mov    r11,QWORD PTR [rsp+0xd8]
    83e2:	mov    rbx,QWORD PTR [rsp+0x98]
    83ea:	mov    rsi,QWORD PTR [rsp+0xb8]
    83f2:	mov    DWORD PTR [rsp],0x0
    83f9:	lea    r13,[rip+0x62603]        # 6aa03 <FIELD_SCAN+0x3>
    8400:	mov    rdx,QWORD PTR [rax+0x3738]
    8407:	mov    rdi,QWORD PTR [rsp+0xc0]
    840f:	lea    r8,[rip+0x6260d]        # 6aa23 <SNGL_SCAN+0x3>
    8416:	movzx  esi,BYTE PTR [rsi+rbx*1]
    841a:	mov    rdx,QWORD PTR [rdx+rdi*1]
    841e:	mov    DWORD PTR [rsp+0x8],esi
    8422:	mov    rsi,QWORD PTR [rsp+0xb0]
    842a:	mov    rdx,QWORD PTR [rdx+rbx*8]
    842e:	movzx  esi,BYTE PTR [rsi+rbx*1]
    8432:	mov    rbx,QWORD PTR [rdx]
    8435:	mov    DWORD PTR [rsp+0x10],esi
    8439:	mov    QWORD PTR [rsp+0x30],rbx
    843e:	mov    rbx,QWORD PTR [rdx+0x8]
    8442:	mov    edx,0xffffffff
    8447:	mov    QWORD PTR [rsp+0x40],rbx
    844c:	jmp    856b <dct_chroma+0x6cb>
    8451:	nop    DWORD PTR [rax+0x0]
    8458:	mov    ebx,DWORD PTR [rax+0x11ad0]
    845e:	test   ebx,ebx
    8460:	je     8472 <dct_chroma+0x5d2>
    8462:	mov    r9d,DWORD PTR [r11+0x214]
    8469:	test   r9d,r9d
    846c:	jne    8579 <dct_chroma+0x6d9>
    8472:	movzx  ecx,BYTE PTR [r8-0x1]
    8477:	movzx  r15d,BYTE PTR [r8]
    847b:	mov    ebx,DWORD PTR [rsp+0x8]
    847f:	mov    edi,DWORD PTR [rsp+0x10]
    8483:	add    edx,0x1
    8486:	add    ebx,ecx
    8488:	lea    r12d,[r15+rdi*1]
    848c:	movsxd rbx,ebx
    848f:	movsxd r12,r12d
    8492:	mov    rsi,rbx
    8495:	shl    rsi,0x4
    8499:	lea    r14,[rsi+r12*1+0xccc]
    84a1:	mov    esi,DWORD PTR [rax+r14*4+0x8]
    84a6:	mov    edi,esi
    84a8:	sar    edi,0x1f
    84ab:	mov    ebp,edi
    84ad:	xor    ebp,esi
    84af:	sub    ebp,edi
    84b1:	mov    edi,DWORD PTR [rsp+0xa0]
    84b8:	test   edi,edi
    84ba:	je     85a0 <dct_chroma+0x700>
    84c0:	test   esi,esi
    84c2:	je     8553 <dct_chroma+0x6b3>
    84c8:	mov    rax,QWORD PTR [rsp+0x38]
    84cd:	movsxd rbx,DWORD PTR [rsp]
    84d1:	mov    edi,ebp
    84d3:	mov    QWORD PTR [rsp+0x70],r8
    84d8:	mov    QWORD PTR [rsp+0x68],r11
    84dd:	movzx  ecx,BYTE PTR [rax]
    84e0:	mov    eax,0x1
    84e5:	mov    DWORD PTR [rsp+0x78],edx
    84e9:	mov    r15,rbx
    84ec:	add    DWORD PTR [rsp+0x50],0xf423f
    84f4:	add    r15d,0x1
    84f8:	shl    rax,cl
    84fb:	or     QWORD PTR [r11+0x1d0],rax
    8502:	mov    rax,QWORD PTR [rsp+0x30]
    8507:	lea    r12,[rax+rbx*4]
    850b:	call   465a0 <sign>
    8510:	mov    edx,DWORD PTR [rsp+0x78]
    8514:	mov    edi,ebp
    8516:	mov    DWORD PTR [rsp],r15d
    851a:	mov    DWORD PTR [r12],eax
    851e:	mov    rax,QWORD PTR [rsp+0x40]
    8523:	mov    DWORD PTR [rax+rbx*4],edx
    8526:	mov    rax,QWORD PTR [rip+0x80083]        # 885b0 <img>
    852d:	mov    esi,DWORD PTR [rax+r14*4+0x8]
    8532:	call   465a0 <sign>
    8537:	mov    r11,QWORD PTR [rsp+0x68]
    853c:	mov    r8,QWORD PTR [rsp+0x70]
    8541:	mov    r10d,0x2
    8547:	mov    rax,QWORD PTR [rip+0x80062]        # 885b0 <img>
    854e:	mov    edx,0xffffffff
    8553:	add    r13,0x2
    8557:	lea    rbx,[rip+0x624c3]        # 6aa21 <SNGL_SCAN+0x1>
    855e:	add    r8,0x2
    8562:	cmp    rbx,r13
    8565:	je     87c0 <dct_chroma+0x920>
    856b:	mov    ebp,DWORD PTR [rax+0x11afc]
    8571:	test   ebp,ebp
    8573:	je     8458 <dct_chroma+0x5b8>
    8579:	movzx  ecx,BYTE PTR [r13-0x1]
    857e:	movzx  r15d,BYTE PTR [r13+0x0]
    8583:	jmp    847b <dct_chroma+0x5db>
    8588:	mov    BYTE PTR [rsp+0xab],0x1
    8590:	mov    DWORD PTR [rsp+0xa0],0x0
    859b:	jmp    7fd7 <dct_chroma+0x137>
    85a0:	movsxd r9,DWORD PTR [rsp+0x48]
    85a5:	mov    rdi,QWORD PTR [rsp+0x28]
    85aa:	movsxd r14,ecx
    85ad:	cmp    BYTE PTR [rsp+0x18],0x0
    85b2:	lea    rdi,[r9+rdi*2]
    85b6:	lea    rcx,[r14+rdi*4]
    85ba:	lea    rdi,[r15+rcx*4]
    85be:	je     8748 <dct_chroma+0x8a8>
    85c4:	lea    rcx,[rip+0xcfef5]        # d84c0 <LevelScale4x4Chroma_Intra>
    85cb:	imul   ebp,DWORD PTR [rcx+rdi*4]
    85cf:	movsxd rcx,DWORD PTR [rsp+0x20]
    85d4:	add    rcx,QWORD PTR [rsp+0x60]
    85d9:	lea    rcx,[r14+rcx*4]
    85dd:	lea    rdi,[r15+rcx*4]
    85e1:	lea    rcx,[rip+0xd4358]        # dc940 <LevelOffset4x4Chroma_Intra>
    85e8:	add    ebp,DWORD PTR [rcx+rdi*4]
    85eb:	movzx  ecx,BYTE PTR [rsp+0x58]
    85f0:	sar    ebp,cl
    85f2:	test   ebp,ebp
    85f4:	je     872f <dct_chroma+0x88f>
    85fa:	mov    rax,QWORD PTR [rsp+0x38]
    85ff:	mov    QWORD PTR [rsp+0x90],r9
    8607:	movzx  ecx,BYTE PTR [rax]
    860a:	mov    eax,0x1
    860f:	shl    rax,cl
    8612:	or     QWORD PTR [r11+0x1d0],rax
    8619:	cmp    ebp,0x1
    861c:	jg     9e59 <dct_chroma+0x1fb9>
    8622:	mov    rax,QWORD PTR [rip+0x7ff8f]        # 885b8 <input>
    8629:	movsxd rdi,edx
    862c:	mov    DWORD PTR [rsp+0x78],edx
    8630:	mov    QWORD PTR [rsp+0x88],r8
    8638:	movsxd rcx,DWORD PTR [rax+0x9a4]
    863f:	lea    rax,[rip+0x6239a]        # 6a9e0 <COEFF_COST>
    8646:	mov    QWORD PTR [rsp+0x80],r11
    864e:	shl    rcx,0x4
    8652:	add    rax,rcx
    8655:	movsxd rcx,DWORD PTR [rsp]
    8659:	movzx  eax,BYTE PTR [rax+rdi*1]
    865d:	mov    rdi,QWORD PTR [rsp+0x30]
    8662:	mov    QWORD PTR [rsp+0x70],rcx
    8667:	lea    r10,[rdi+rcx*4]
    866b:	mov    edi,ebp
    866d:	add    DWORD PTR [rsp+0x50],eax
    8671:	mov    QWORD PTR [rsp+0x68],r10
    8676:	call   465a0 <sign>
    867b:	mov    r10,QWORD PTR [rsp+0x68]
    8680:	mov    edx,DWORD PTR [rsp+0x78]
    8684:	mov    edi,ebp
    8686:	mov    rsi,QWORD PTR [rsp+0x40]
    868b:	mov    rcx,QWORD PTR [rsp+0x70]
    8690:	mov    DWORD PTR [r10],eax
    8693:	mov    rax,rbx
    8696:	shl    rax,0x4
    869a:	mov    DWORD PTR [rsi+rcx*4],edx
    869d:	lea    rdx,[rax+r12*1+0xccc]
    86a5:	mov    rax,QWORD PTR [rip+0x7ff04]        # 885b0 <img>
    86ac:	add    DWORD PTR [rsp],0x1
    86b0:	mov    esi,DWORD PTR [rax+rdx*4+0x8]
    86b4:	call   465a0 <sign>
    86b9:	mov    r9,QWORD PTR [rsp+0x90]
    86c1:	mov    r8,QWORD PTR [rsp+0x88]
    86c9:	mov    r11,QWORD PTR [rsp+0x80]
    86d1:	mov    ebp,eax
    86d3:	cmp    DWORD PTR [rsp+0xa4],0x17
    86db:	mov    rax,QWORD PTR [rip+0x7fece]        # 885b0 <img>
    86e2:	jg     8780 <dct_chroma+0x8e0>
    86e8:	mov    rsi,QWORD PTR [rsp+0x28]
    86ed:	mov    ecx,0x4
    86f2:	sub    ecx,DWORD PTR [rsp+0x20]
    86f6:	cmp    BYTE PTR [rsp+0x18],0x0
    86fb:	lea    rdx,[r9+rsi*2]
    86ff:	lea    rdx,[r14+rdx*4]
    8703:	lea    rsi,[r15+rdx*4]
    8707:	lea    rdx,[rip+0xd0232]        # d8940 <InvLevelScale4x4Chroma_Intra>
    870e:	jne    8717 <dct_chroma+0x877>
    8710:	lea    rdx,[rip+0xd12e9]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    8717:	imul   ebp,DWORD PTR [rdx+rsi*4]
    871b:	add    ebp,DWORD PTR [rsp+0xac]
    8722:	mov    r10d,0x2
    8728:	mov    edx,0xffffffff
    872d:	sar    ebp,cl
    872f:	shl    rbx,0x4
    8733:	lea    rcx,[rbx+r12*1+0xccc]
    873b:	mov    DWORD PTR [rax+rcx*4+0x8],ebp
    873f:	jmp    8553 <dct_chroma+0x6b3>
    8744:	nop    DWORD PTR [rax+0x0]
    8748:	lea    rcx,[rip+0xd0fb1]        # d9700 <LevelScale4x4Chroma_Inter>
    874f:	imul   ebp,DWORD PTR [rcx+rdi*4]
    8753:	movsxd rcx,DWORD PTR [rsp+0x20]
    8758:	add    rcx,QWORD PTR [rsp+0x60]
    875d:	lea    rcx,[r14+rcx*4]
    8761:	lea    rdi,[r15+rcx*4]
    8765:	lea    rcx,[rip+0xd29f4]        # db160 <LevelOffset4x4Chroma_Inter>
    876c:	add    ebp,DWORD PTR [rcx+rdi*4]
    876f:	movzx  ecx,BYTE PTR [rsp+0x58]
    8774:	sar    ebp,cl
    8776:	jmp    85f2 <dct_chroma+0x752>
    877b:	nop    DWORD PTR [rax+rax*1+0x0]
    8780:	mov    esi,DWORD PTR [rsp+0x20]
    8784:	cmp    BYTE PTR [rsp+0x18],0x0
    8789:	lea    ecx,[rsi-0x4]
    878c:	je     89a0 <dct_chroma+0xb00>
    8792:	mov    rsi,QWORD PTR [rsp+0x28]
    8797:	mov    r10d,0x2
    879d:	lea    rdx,[r9+rsi*2]
    87a1:	lea    rdx,[r14+rdx*4]
    87a5:	lea    rsi,[r15+rdx*4]
    87a9:	lea    rdx,[rip+0xd0190]        # d8940 <InvLevelScale4x4Chroma_Intra>
    87b0:	imul   ebp,DWORD PTR [rdx+rsi*4]
    87b4:	mov    edx,0xffffffff
    87b9:	shl    ebp,cl
    87bb:	jmp    872f <dct_chroma+0x88f>
    87c0:	mov    rbx,QWORD PTR [rsp+0x30]
    87c5:	movsxd rdx,DWORD PTR [rsp]
    87c9:	add    QWORD PTR [rsp+0x98],0x1
    87d2:	mov    DWORD PTR [rbx+rdx*4],0x0
    87d9:	mov    rbx,QWORD PTR [rsp+0x98]
    87e1:	add    QWORD PTR [rsp+0x38],0x1
    87e7:	cmp    rbx,0x4
    87eb:	jne    83e2 <dct_chroma+0x542>
    87f1:	mov    edx,DWORD PTR [rax+0x11bf4]
    87f7:	mov    r11,rax
    87fa:	add    DWORD PTR [rsp+0xc8],0x1
    8802:	add    QWORD PTR [rsp+0xb8],0x4
    880b:	mov    ebx,DWORD PTR [rsp+0xc8]
    8812:	add    QWORD PTR [rsp+0xb0],0x4
    881b:	mov    eax,edx
    881d:	add    QWORD PTR [rsp+0xc0],0x8
    8826:	shr    eax,0x1f
    8829:	add    eax,edx
    882b:	sar    eax,1
    882d:	cmp    eax,ebx
    882f:	jg     83ab <dct_chroma+0x50b>
    8835:	mov    rax,r11
    8838:	cmp    DWORD PTR [rsp+0x50],0x3
    883d:	mov    r11d,r10d
    8840:	mov    r10,rax
    8843:	setle  al
    8846:	and    al,BYTE PTR [rsp+0xab]
    884d:	mov    BYTE PTR [rsp+0x50],al
    8851:	je     8e75 <dct_chroma+0xfd5>
    8857:	cmp    edx,0x1
    885a:	jle    8a0c <dct_chroma+0xb6c>
    8860:	mov    ecx,DWORD PTR [rsp+0xe0]
    8867:	mov    rbx,QWORD PTR [rsp+0x108]
    886f:	xor    r13d,r13d
    8872:	lea    r15,[rip+0x62187]        # 6aa00 <FIELD_SCAN>
    8879:	mov    r14d,DWORD PTR [rsp+0xf4]
    8881:	mov    QWORD PTR [rsp],r13
    8885:	lea    rbp,[rip+0x62194]        # 6aa20 <SNGL_SCAN>
    888c:	lea    r9,[r15+0x1]
    8890:	mov    rax,QWORD PTR [r10+0x3738]
    8897:	add    ecx,0x1
    889a:	mov    r12,QWORD PTR [rsp+0xd8]
    88a2:	shl    r14d,cl
    88a5:	mov    r13,QWORD PTR [rsp+0x100]
    88ad:	lea    rax,[rax+rbx*8]
    88b1:	mov    DWORD PTR [rsp+0x10],r14d
    88b6:	lea    rbx,[rbp+0x1]
    88ba:	mov    QWORD PTR [rsp+0x18],rax
    88bf:	mov    rax,QWORD PTR [rsp+0x18]
    88c4:	mov    rdi,QWORD PTR [rsp]
    88c8:	xor    r11d,r11d
    88cb:	mov    r14,QWORD PTR [rax+rdi*8+0x20]
    88d0:	mov    rax,QWORD PTR [rsp+0xd0]
    88d8:	movzx  r8d,BYTE PTR [r13+r11*1+0x0]
    88de:	movzx  edi,BYTE PTR [rax+r11*1]
    88e3:	mov    rax,QWORD PTR [r14+r11*8]
    88e7:	mov    rsi,QWORD PTR [rax]
    88ea:	mov    eax,DWORD PTR [rsp+0xcc]
    88f1:	test   eax,eax
    88f3:	jne    891d <dct_chroma+0xa7d>
    88f5:	mov    rax,QWORD PTR [rsp+0xe8]
    88fd:	movzx  ecx,BYTE PTR [rsp+0x10]
    8902:	mov    rax,QWORD PTR [rsp+rax*8+0x140]
    890a:	mov    QWORD PTR [rsp+0x8],rax
    890f:	shl    rax,cl
    8912:	not    rax
    8915:	and    QWORD PTR [r12+0x1d0],rax
    891d:	mov    DWORD PTR [rsi],0x0
    8923:	mov    edx,0x2
    8928:	jmp    8980 <dct_chroma+0xae0>
    892a:	nop    WORD PTR [rax+rax*1+0x0]
    8930:	mov    eax,DWORD PTR [r10+0x11ad0]
    8937:	test   eax,eax
    8939:	je     8947 <dct_chroma+0xaa7>
    893b:	mov    eax,DWORD PTR [r12+0x214]
    8943:	test   eax,eax
    8945:	jne    898b <dct_chroma+0xaeb>
    8947:	movzx  eax,BYTE PTR [rbp+rdx*1+0x0]
    894c:	movzx  ecx,BYTE PTR [rdx+rbx*1]
    8950:	add    eax,edi
    8952:	add    ecx,r8d
    8955:	cdqe   
    8957:	movsxd rcx,ecx
    895a:	shl    rax,0x4
    895e:	lea    rax,[rcx+rax*1+0xccc]
    8966:	mov    DWORD PTR [r10+rax*4+0x8],0x0
    896f:	mov    DWORD PTR [rsi+rdx*2],0x0
    8976:	add    rdx,0x2
    897a:	cmp    rdx,0x20
    897e:	je     89d0 <dct_chroma+0xb30>
    8980:	mov    eax,DWORD PTR [r10+0x11afc]
    8987:	test   eax,eax
    8989:	je     8930 <dct_chroma+0xa90>
    898b:	movzx  eax,BYTE PTR [r15+rdx*1]
    8990:	movzx  ecx,BYTE PTR [rdx+r9*1]
    8995:	jmp    8950 <dct_chroma+0xab0>
    8997:	nop    WORD PTR [rax+rax*1+0x0]
    89a0:	mov    rdi,QWORD PTR [rsp+0x28]
    89a5:	mov    r10d,0x2
    89ab:	lea    rdx,[r9+rdi*2]
    89af:	lea    rdx,[r14+rdx*4]
    89b3:	lea    rsi,[r15+rdx*4]
    89b7:	lea    rdx,[rip+0xd1042]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    89be:	imul   ebp,DWORD PTR [rdx+rsi*4]
    89c2:	mov    edx,0xffffffff
    89c7:	shl    ebp,cl
    89c9:	jmp    872f <dct_chroma+0x88f>
    89ce:	xchg   ax,ax
    89d0:	add    r11,0x1
    89d4:	cmp    r11,0x4
    89d8:	jne    88d0 <dct_chroma+0xa30>
    89de:	mov    edx,DWORD PTR [r10+0x11bf4]
    89e5:	add    QWORD PTR [rsp],0x1
    89ea:	add    r13,0x4
    89ee:	add    QWORD PTR [rsp+0xd0],0x4
    89f7:	mov    rsi,QWORD PTR [rsp]
    89fb:	mov    eax,edx
    89fd:	shr    eax,0x1f
    8a00:	add    eax,edx
    8a02:	sar    eax,1
    8a04:	cmp    eax,esi
    8a06:	jg     88bf <dct_chroma+0xa1f>
    8a0c:	mov    eax,DWORD PTR [r10+0x11c08]
    8a13:	mov    ebx,DWORD PTR [r10+0x11c14]
    8a1a:	mov    DWORD PTR [rsp+0x60],eax
    8a1e:	mov    DWORD PTR [rsp+0x68],ebx
    8a22:	test   eax,eax
    8a24:	jle    9e1f <dct_chroma+0x1f7f>
    8a2a:	cmp    BYTE PTR [rsp+0xab],0x0
    8a32:	je     9e1f <dct_chroma+0x1f7f>
    8a38:	mov    eax,DWORD PTR [r10+0x11c04]
    8a3f:	mov    QWORD PTR [rsp+0x48],r10
    8a44:	mov    r14,r10
    8a47:	mov    QWORD PTR [rsp+0x58],0x0
    8a50:	neg    r14
    8a53:	mov    DWORD PTR [rsp+0x40],eax
    8a57:	lea    rax,[rsp+0x13c]
    8a5f:	mov    QWORD PTR [rsp+0x28],rax
    8a64:	mov    QWORD PTR [rsp+0x20],r10
    8a69:	nop    DWORD PTR [rax+0x0]
    8a70:	mov    esi,DWORD PTR [rsp+0x40]
    8a74:	test   esi,esi
    8a76:	jle    8d57 <dct_chroma+0xeb7>
    8a7c:	mov    rax,QWORD PTR [rsp+0x20]
    8a81:	mov    rdi,QWORD PTR [rsp+0x58]
    8a86:	mov    QWORD PTR [rsp+0x38],0x0
    8a8f:	lea    r10,[rsp+0x120]
    8a97:	mov    DWORD PTR [rsp+0x30],0x0
    8a9f:	lea    r9,[rsp+0x130]
    8aa7:	lea    rax,[rax+rdi*4+0x100]
    8aaf:	mov    QWORD PTR [rsp+0x18],0xc0
    8ab8:	mov    QWORD PTR [rsp+0x10],rax
    8abd:	mov    QWORD PTR [rsp+0x8],0x0
    8ac6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8ad0:	mov    rax,QWORD PTR [rsp+0x10]
    8ad5:	mov    r13d,0x40
    8adb:	mov    r12d,0x80
    8ae1:	lea    rdi,[rax-0x100]
    8ae8:	lea    r15,[rax-0xf0]
    8aef:	mov    rax,QWORD PTR [rsp+0x8]
    8af4:	mov    QWORD PTR [rsp],rdi
    8af8:	mov    rdx,rdi
    8afb:	sub    r13,rax
    8afe:	sub    r12,rax
    8b01:	mov    rdi,QWORD PTR [rsp]
    8b05:	mov    rax,r10
    8b08:	mov    rcx,rdx
    8b0b:	mov    esi,DWORD PTR [rcx+0x3338]
    8b11:	add    rax,0x4
    8b15:	add    rcx,0x40
    8b19:	mov    DWORD PTR [rax-0x4],esi
    8b1c:	cmp    r9,rax
    8b1f:	jne    8b0b <dct_chroma+0xc6b>
    8b21:	mov    eax,DWORD PTR [rsp+0x128]
    8b28:	mov    r8d,DWORD PTR [rsp+0x124]
    8b30:	mov    QWORD PTR [rsp],rdi
    8b34:	mov    ecx,DWORD PTR [rsp+0x120]
    8b3b:	mov    rdi,QWORD PTR [rsp+0x18]
    8b40:	mov    esi,r8d
    8b43:	lea    r11d,[rcx+rax*1]
    8b47:	sub    ecx,eax
    8b49:	mov    eax,DWORD PTR [rsp+0x12c]
    8b50:	sar    esi,1
    8b52:	mov    ebp,r11d
    8b55:	sub    esi,eax
    8b57:	sar    eax,1
    8b59:	add    eax,r8d
    8b5c:	lea    r8d,[r11+rax*1]
    8b60:	sub    ebp,eax
    8b62:	mov    DWORD PTR [rdx+0x3338],r8d
    8b69:	mov    r8,QWORD PTR [rsp+0x8]
    8b6e:	add    r8,rdx
    8b71:	add    rdx,0x4
    8b75:	mov    DWORD PTR [r8+rdi*1+0x3338],ebp
    8b7d:	lea    ebp,[rcx+rsi*1]
    8b80:	mov    DWORD PTR [r8+r13*1+0x3338],ebp
    8b88:	mov    ebp,ecx
    8b8a:	sub    ebp,esi
    8b8c:	mov    DWORD PTR [r8+r12*1+0x3338],ebp
    8b94:	cmp    r15,rdx
    8b97:	jne    8b01 <dct_chroma+0xc61>
    8b9d:	mov    DWORD PTR [rsp+0x138],esi
    8ba4:	mov    rsi,QWORD PTR [rsp+0x38]
    8ba9:	xor    r15d,r15d
    8bac:	cmp    BYTE PTR [rsp+0x50],0x0
    8bb1:	mov    DWORD PTR [rsp+0x13c],eax
    8bb8:	mov    rax,QWORD PTR [rsp+0x48]
    8bbd:	mov    rdi,QWORD PTR [rsp]
    8bc1:	mov    DWORD PTR [rsp+0x130],r11d
    8bc9:	mov    DWORD PTR [rsp+0x134],ecx
    8bd0:	lea    rbp,[rax+rsi*2]
    8bd4:	je     8d23 <dct_chroma+0xe83>
    8bda:	xor    eax,eax
    8bdc:	mov    edx,DWORD PTR [rdi+rax*1+0x3338]
    8be3:	mov    DWORD PTR [r10+rax*1],edx
    8be7:	add    rax,0x4
    8beb:	cmp    rax,0x10
    8bef:	jne    8bdc <dct_chroma+0xd3c>
    8bf1:	mov    edx,DWORD PTR [rsp+0x128]
    8bf8:	mov    eax,DWORD PTR [rsp+0x120]
    8bff:	mov    rsi,rbp
    8c02:	lea    ecx,[rax+rdx*1]
    8c05:	sub    eax,edx
    8c07:	mov    DWORD PTR [rsp+0x130],ecx
    8c0e:	mov    ecx,DWORD PTR [rsp+0x124]
    8c15:	mov    DWORD PTR [rsp+0x134],eax
    8c1c:	mov    eax,DWORD PTR [rsp+0x12c]
    8c23:	mov    edx,ecx
    8c25:	sar    edx,1
    8c27:	sub    edx,eax
    8c29:	sar    eax,1
    8c2b:	add    eax,ecx
    8c2d:	mov    DWORD PTR [rsp+0x138],edx
    8c34:	mov    rcx,rbp
    8c37:	xor    edx,edx
    8c39:	mov    DWORD PTR [rsp+0x13c],eax
    8c40:	test   ebx,ebx
    8c42:	jne    8ce4 <dct_chroma+0xe44>
    8c48:	mov    r12d,DWORD PTR [r9+rdx*1]
    8c4c:	movzx  r13d,WORD PTR [rcx+0x3138]
    8c54:	mov    r11,QWORD PTR [rsp+0x20]
    8c59:	lea    r8d,[r12+rax*1]
    8c5d:	shl    r13,0x6
    8c61:	movsxd r8,r8d
    8c64:	movsxd r11,DWORD PTR [r11+0x11bf0]
    8c6b:	lea    r8,[r13+r8*1+0x20]
    8c70:	sar    r8,0x6
    8c74:	cmovs  r8,r15
    8c78:	cmp    r8,r11
    8c7b:	cmovg  r8,r11
    8c7f:	sub    r12d,eax
    8c82:	movsxd r12,r12d
    8c85:	mov    DWORD PTR [r14+rcx*2+0x3338],r8d
    8c8d:	movzx  r8d,WORD PTR [rsi+0x313e]
    8c95:	shl    r8,0x6
    8c99:	lea    rax,[r8+r12*1+0x20]
    8c9e:	sar    rax,0x6
    8ca2:	cmovs  rax,r15
    8ca6:	cmp    rax,r11
    8ca9:	cmovg  rax,r11
    8cad:	mov    DWORD PTR [r14+rsi*2+0x3344],eax
    8cb5:	add    rcx,0x2
    8cb9:	sub    rsi,0x2
    8cbd:	lea    r8,[rdx+0x4]
    8cc1:	cmp    rdx,0x4
    8cc5:	je     8d10 <dct_chroma+0xe70>
    8cc7:	mov    rax,0xfffffffffffffffc
    8cce:	sub    rax,rdx
    8cd1:	mov    rdx,QWORD PTR [rsp+0x28]
    8cd6:	mov    eax,DWORD PTR [rdx+rax*1]
    8cd9:	mov    rdx,r8
    8cdc:	test   ebx,ebx
    8cde:	je     8c48 <dct_chroma+0xda8>
    8ce4:	mov    r8d,DWORD PTR [r9+rdx*1]
    8ce8:	lea    r11d,[r8+rax*1+0x20]
    8ced:	sub    r8d,eax
    8cf0:	add    r8d,0x20
    8cf4:	sar    r11d,0x6
    8cf8:	sar    r8d,0x6
    8cfc:	mov    DWORD PTR [r14+rcx*2+0x3338],r11d
    8d04:	mov    DWORD PTR [r14+rsi*2+0x3344],r8d
    8d0c:	jmp    8cb5 <dct_chroma+0xe15>
    8d0e:	xchg   ax,ax
    8d10:	add    rbp,0x20
    8d14:	add    rdi,0x40
    8d18:	cmp    QWORD PTR [rsp+0x10],rdi
    8d1d:	jne    8bda <dct_chroma+0xd3a>
    8d23:	add    DWORD PTR [rsp+0x30],0x4
    8d28:	mov    eax,DWORD PTR [rsp+0x30]
    8d2c:	add    QWORD PTR [rsp+0x10],0x100
    8d35:	sub    QWORD PTR [rsp+0x8],0x100
    8d3e:	add    QWORD PTR [rsp+0x18],0x100
    8d47:	add    QWORD PTR [rsp+0x38],0x40
    8d4d:	cmp    DWORD PTR [rsp+0x40],eax
    8d51:	jg     8ad0 <dct_chroma+0xc30>
    8d57:	add    QWORD PTR [rsp+0x58],0x4
    8d5d:	mov    rax,QWORD PTR [rsp+0x58]
    8d62:	add    QWORD PTR [rsp+0x48],0x8
    8d68:	cmp    DWORD PTR [rsp+0x60],eax
    8d6c:	jg     8a70 <dct_chroma+0xbd0>
    8d72:	mov    eax,DWORD PTR [rsp+0x68]
    8d76:	mov    r10,QWORD PTR [rsp+0x20]
    8d7b:	test   eax,eax
    8d7d:	jne    8e45 <dct_chroma+0xfa5>
    8d83:	mov    r13d,DWORD PTR [rsp+0x40]
    8d88:	mov    r14d,DWORD PTR [rsp+0x60]
    8d8d:	mov    r9,r10
    8d90:	mov    r11,r10
    8d93:	mov    rbx,QWORD PTR [rsp+0xf8]
    8d9b:	mov    rbp,QWORD PTR [rip+0x81c06]        # 8a9a8 <enc_picture>
    8da2:	xor    r12d,r12d
    8da5:	mov    r8d,DWORD PTR [rsp+0xa0]
    8dad:	lea    edi,[r13-0x1]
    8db1:	sub    rbx,0x8
    8db5:	test   r13d,r13d
    8db8:	jle    8e30 <dct_chroma+0xf90>
    8dba:	mov    rdx,QWORD PTR [rbp+0x1940]
    8dc1:	mov    eax,DWORD PTR [r10+0xa4]
    8dc8:	mov    rcx,QWORD PTR [rdx+rbx*1]
    8dcc:	add    eax,r12d
    8dcf:	movsxd rdx,DWORD PTR [r10+0xa0]
    8dd6:	cdqe   
    8dd8:	mov    rax,QWORD PTR [rcx+rax*8]
    8ddc:	lea    rsi,[rax+rdx*2]
    8de0:	mov    rdx,r11
    8de3:	xor    eax,eax
    8de5:	jmp    8e14 <dct_chroma+0xf74>
    8de7:	nop    WORD PTR [rax+rax*1+0x0]
    8df0:	mov    r15,rax
    8df3:	add    rdx,0x40
    8df7:	shl    r15,0x5
    8dfb:	add    cx,WORD PTR [r9+r15*1+0x3138]
    8e04:	mov    WORD PTR [rsi+rax*2],cx
    8e08:	lea    rcx,[rax+0x1]
    8e0c:	cmp    rdi,rax
    8e0f:	je     8e30 <dct_chroma+0xf90>
    8e11:	mov    rax,rcx
    8e14:	mov    ecx,DWORD PTR [rdx+0x3338]
    8e1a:	test   r8d,r8d
    8e1d:	jne    8df0 <dct_chroma+0xf50>
    8e1f:	mov    WORD PTR [rsi+rax*2],cx
    8e23:	add    rdx,0x40
    8e27:	lea    rcx,[rax+0x1]
    8e2b:	cmp    rdi,rax
    8e2e:	jne    8e11 <dct_chroma+0xf71>
    8e30:	add    r12d,0x1
    8e34:	add    r9,0x2
    8e38:	add    r11,0x4
    8e3c:	cmp    r12d,r14d
    8e3f:	jl     8db5 <dct_chroma+0xf15>
    8e45:	mov    rax,QWORD PTR [rsp+0x1e8]
    8e4d:	xor    rax,QWORD PTR fs:0x28
    8e56:	jne    9ef0 <dct_chroma+0x2050>
    8e5c:	mov    eax,DWORD PTR [rsp+0xe4]
    8e63:	add    rsp,0x1f8
    8e6a:	pop    rbx
    8e6b:	pop    rbp
    8e6c:	pop    r12
    8e6e:	pop    r13
    8e70:	pop    r14
    8e72:	pop    r15
    8e74:	ret    
    8e75:	movzx  eax,BYTE PTR [rsp+0xab]
    8e7d:	cmp    r11d,0x2
    8e81:	mov    BYTE PTR [rsp+0x50],al
    8e85:	mov    eax,0x2
    8e8a:	cmovne eax,DWORD PTR [rsp+0xe4]
    8e92:	mov    DWORD PTR [rsp+0xe4],eax
    8e99:	jmp    8a0c <dct_chroma+0xb6c>
    8e9e:	mov    ecx,DWORD PTR [r10+0x3438]
    8ea5:	mov    eax,DWORD PTR [r10+0x3338]
    8eac:	xor    ebp,ebp
    8eae:	mov    DWORD PTR [rsp+0xcc],0x0
    8eb9:	mov    edx,DWORD PTR [r10+0x3348]
    8ec0:	mov    esi,DWORD PTR [r10+0x3448]
    8ec7:	lea    r11,[rsp+0x120]
    8ecf:	mov    r15d,0xffffffff
    8ed5:	lea    edi,[rax+rcx*1]
    8ed8:	sub    eax,ecx
    8eda:	movsxd r8,DWORD PTR [rsp+0x48]
    8edf:	lea    ecx,[rdx+rax*1]
    8ee2:	lea    r13d,[rdi+rdx*1]
    8ee6:	sub    edi,edx
    8ee8:	sub    eax,edx
    8eea:	sub    ecx,esi
    8eec:	add    r13d,esi
    8eef:	lea    rdx,[rsp+0x110]
    8ef7:	mov    DWORD PTR [rsp+0x114],ecx
    8efe:	mov    ecx,edi
    8f00:	mov    r14,rdx
    8f03:	sub    ecx,esi
    8f05:	add    esi,eax
    8f07:	mov    eax,DWORD PTR [rsp+0xf4]
    8f0e:	mov    DWORD PTR [rsp+0x110],r13d
    8f16:	mov    DWORD PTR [rsp+0x118],ecx
    8f1d:	lea    ecx,[rax*4+0x0]
    8f24:	mov    eax,0xf0000
    8f29:	mov    DWORD PTR [rsp+0x11c],esi
    8f30:	mov    esi,r13d
    8f33:	shl    eax,cl
    8f35:	mov    r13,r11
    8f38:	cdqe   
    8f3a:	mov    QWORD PTR [rsp+0x10],rax
    8f3f:	movsxd rax,DWORD PTR [rsp+0x20]
    8f44:	lea    ebx,[rax+0x10]
    8f47:	mov    QWORD PTR [rsp+0x8],rax
    8f4c:	mov    rax,QWORD PTR [rsp+0x40]
    8f51:	mov    DWORD PTR [rsp],ebx
    8f54:	mov    rbx,rdx
    8f57:	lea    r10,[rax+rax*2]
    8f5b:	lea    r9,[r8+r10*2]
    8f5f:	mov    ecx,esi
    8f61:	add    r15d,0x1
    8f65:	sar    ecx,0x1f
    8f68:	mov    eax,ecx
    8f6a:	xor    eax,esi
    8f6c:	sub    eax,ecx
    8f6e:	mov    rcx,r9
    8f71:	shl    rcx,0x6
    8f75:	cmp    BYTE PTR [rsp+0x18],0x0
    8f7a:	je     9094 <dct_chroma+0x11f4>
    8f80:	lea    rdi,[rip+0xcf539]        # d84c0 <LevelScale4x4Chroma_Intra>
    8f87:	imul   eax,DWORD PTR [rdi+rcx*1]
    8f8b:	mov    rdi,QWORD PTR [rsp+0x40]
    8f90:	lea    rcx,[rdi+r10*4]
    8f94:	add    rcx,QWORD PTR [rsp+0x8]
    8f99:	lea    rdi,[rip+0xd39a0]        # dc940 <LevelOffset4x4Chroma_Intra>
    8fa0:	shl    rcx,0x6
    8fa4:	mov    ecx,DWORD PTR [rdi+rcx*1]
    8fa7:	lea    edi,[rax+rcx*2]
    8faa:	movzx  ecx,BYTE PTR [rsp]
    8fae:	sar    edi,cl
    8fb0:	mov    rax,QWORD PTR [rip+0x7f601]        # 885b8 <input>
    8fb7:	mov    r12d,DWORD PTR [rax+0x934]
    8fbe:	test   r12d,r12d
    8fc1:	jne    8fdc <dct_chroma+0x113c>
    8fc3:	mov    rax,QWORD PTR [rip+0x7f5e6]        # 885b0 <img>
    8fca:	cmp    DWORD PTR [rax+0x28],0x3
    8fce:	jg     8fdc <dct_chroma+0x113c>
    8fd0:	cmp    edi,0x80f
    8fd6:	jg     985c <dct_chroma+0x19bc>
    8fdc:	test   edi,edi
    8fde:	je     907c <dct_chroma+0x11dc>
    8fe4:	mov    rax,QWORD PTR [rsp+0xd8]
    8fec:	mov    rdx,QWORD PTR [rsp+0x10]
    8ff1:	movsxd r12,ebp
    8ff4:	mov    QWORD PTR [rsp+0x78],r9
    8ff9:	mov    QWORD PTR [rsp+0x70],r10
    8ffe:	or     QWORD PTR [rax+0x1d0],rdx
    9005:	mov    edx,DWORD PTR [rsp+0x68]
    9009:	mov    eax,0x1
    900e:	mov    QWORD PTR [rsp+0x50],r8
    9013:	test   edx,edx
    9015:	mov    DWORD PTR [rsp+0x30],esi
    9019:	cmovg  eax,edx
    901c:	mov    DWORD PTR [rsp+0x28],edi
    9020:	add    ebp,0x1
    9023:	mov    DWORD PTR [rsp+0x68],eax
    9027:	mov    rax,QWORD PTR [rsp+0x60]
    902c:	lea    rcx,[rax+r12*4]
    9030:	mov    QWORD PTR [rsp+0x38],rcx
    9035:	call   465a0 <sign>
    903a:	mov    rcx,QWORD PTR [rsp+0x38]
    903f:	mov    edi,DWORD PTR [rsp+0x28]
    9043:	mov    esi,DWORD PTR [rsp+0x30]
    9047:	mov    DWORD PTR [rcx],eax
    9049:	mov    rax,QWORD PTR [rsp+0x80]
    9051:	mov    DWORD PTR [rax+r12*4],r15d
    9055:	mov    r15d,0xffffffff
    905b:	call   465a0 <sign>
    9060:	mov    r9,QWORD PTR [rsp+0x78]
    9065:	mov    r10,QWORD PTR [rsp+0x70]
    906a:	mov    DWORD PTR [rsp+0xcc],0x1
    9075:	mov    r8,QWORD PTR [rsp+0x50]
    907a:	mov    edi,eax
    907c:	mov    DWORD PTR [r14],edi
    907f:	add    r14,0x4
    9083:	cmp    r13,r14
    9086:	je     93d4 <dct_chroma+0x1534>
    908c:	mov    esi,DWORD PTR [r14]
    908f:	jmp    8f5f <dct_chroma+0x10bf>
    9094:	lea    rdi,[rip+0xd0665]        # d9700 <LevelScale4x4Chroma_Inter>
    909b:	imul   eax,DWORD PTR [rdi+rcx*1]
    909f:	mov    rdi,QWORD PTR [rsp+0x40]
    90a4:	lea    rcx,[rdi+r10*4]
    90a8:	add    rcx,QWORD PTR [rsp+0x8]
    90ad:	lea    rdi,[rip+0xd20ac]        # db160 <LevelOffset4x4Chroma_Inter>
    90b4:	shl    rcx,0x6
    90b8:	mov    ecx,DWORD PTR [rdi+rcx*1]
    90bb:	lea    edi,[rax+rcx*2]
    90be:	movzx  ecx,BYTE PTR [rsp]
    90c2:	sar    edi,cl
    90c4:	jmp    8fb0 <dct_chroma+0x1110>
    90c9:	lea    edx,[rsi+rax*1+0x3]
    90cd:	movsxd rax,edx
    90d0:	mov    ecx,edx
    90d2:	imul   rax,rax,0x2aaaaaab
    90d9:	sar    ecx,0x1f
    90dc:	shr    rax,0x20
    90e0:	mov    ebx,eax
    90e2:	sub    ebx,ecx
    90e4:	lea    eax,[rbx+rbx*2]
    90e7:	mov    DWORD PTR [rsp+0x70],ebx
    90eb:	add    eax,eax
    90ed:	sub    edx,eax
    90ef:	lea    eax,[rbx+0xf]
    90f2:	mov    DWORD PTR [rsp+0x88],eax
    90f9:	mov    eax,DWORD PTR [rsp+0x50]
    90fd:	mov    DWORD PTR [rsp+0x90],edx
    9104:	test   eax,eax
    9106:	jg     808b <dct_chroma+0x1eb>
    910c:	mov    edx,DWORD PTR [rsp+0x170]
    9113:	mov    r8d,DWORD PTR [rsp+0x174]
    911b:	mov    r13d,0xffffffff
    9121:	mov    DWORD PTR [rsp+0xcc],0x0
    912c:	mov    r10d,DWORD PTR [rsp+0x178]
    9134:	mov    ebp,DWORD PTR [rsp+0x16c]
    913b:	mov    DWORD PTR [rsp],0x0
    9142:	lea    r14,[rip+0x61579]        # 6a6c2 <SCAN_YUV422+0x2>
    9149:	mov    r9d,DWORD PTR [rsp+0x160]
    9151:	mov    r11d,DWORD PTR [rsp+0x164]
    9159:	mov    ebx,DWORD PTR [rsp+0x168]
    9160:	mov    r12d,DWORD PTR [rsp+0x17c]
    9168:	lea    eax,[r11+r8*1]
    916c:	lea    esi,[r9+rdx*1]
    9170:	sub    r9d,edx
    9173:	sub    r11d,r8d
    9176:	lea    edi,[rbx+r10*1]
    917a:	lea    ecx,[rbp+r12*1+0x0]
    917f:	sub    ebx,r10d
    9182:	mov    r10d,ebp
    9185:	lea    edx,[rsi+rcx*1]
    9188:	sub    esi,ecx
    918a:	lea    ecx,[rax+rdi*1]
    918d:	sub    eax,edi
    918f:	mov    r8d,esi
    9192:	lea    esi,[rcx+rdx*1]
    9195:	sub    edx,ecx
    9197:	sub    r10d,r12d
    919a:	mov    DWORD PTR [rsp+0x1a0],esi
    91a1:	mov    esi,r8d
    91a4:	lea    ecx,[r11+rbx*1]
    91a8:	xor    ebp,ebp
    91aa:	mov    DWORD PTR [rsp+0x1a8],edx
    91b1:	lea    edx,[rax+r8*1]
    91b5:	sub    esi,eax
    91b7:	mov    eax,r11d
    91ba:	mov    DWORD PTR [rsp+0x1a4],edx
    91c1:	lea    edx,[r9+r10*1]
    91c5:	sub    eax,ebx
    91c7:	sub    r9d,r10d
    91ca:	mov    DWORD PTR [rsp+0x1ac],esi
    91d1:	lea    esi,[rdx+rcx*1]
    91d4:	sub    edx,ecx
    91d6:	xor    ebx,ebx
    91d8:	mov    DWORD PTR [rsp+0x1b8],edx
    91df:	lea    edx,[r9+rax*1]
    91e3:	sub    r9d,eax
    91e6:	mov    eax,DWORD PTR [rsp+0xf4]
    91ed:	mov    DWORD PTR [rsp+0x1b0],esi
    91f4:	movsxd rsi,DWORD PTR [rsp+0x70]
    91f9:	lea    ecx,[rax*8+0x0]
    9200:	mov    eax,0xff0000
    9205:	mov    DWORD PTR [rsp+0x1b4],edx
    920c:	mov    edx,ebp
    920e:	shl    eax,cl
    9210:	mov    QWORD PTR [rsp+0x10],rsi
    9215:	mov    rsi,QWORD PTR [rsp+0x40]
    921a:	mov    ebp,r13d
    921d:	cdqe   
    921f:	mov    DWORD PTR [rsp+0x1bc],r9d
    9227:	mov    QWORD PTR [rsp+0x38],rax
    922c:	mov    eax,DWORD PTR [rsp+0x88]
    9233:	lea    rsi,[rsi+rsi*2]
    9237:	mov    QWORD PTR [rsp+0x28],rsi
    923c:	add    eax,0x1
    923f:	mov    DWORD PTR [rsp+0x8],eax
    9243:	movsxd rax,DWORD PTR [rsp+0x90]
    924b:	mov    QWORD PTR [rsp+0x50],rax
    9250:	lea    rax,[rax+rsi*2]
    9254:	mov    QWORD PTR [rsp+0x30],rax
    9259:	jmp    92e2 <dct_chroma+0x1442>
    925e:	lea    rdi,[rip+0xcf25b]        # d84c0 <LevelScale4x4Chroma_Intra>
    9265:	mov    rbx,QWORD PTR [rsp+0x40]
    926a:	imul   eax,DWORD PTR [rdi+rcx*1]
    926e:	mov    rdi,QWORD PTR [rsp+0x28]
    9273:	lea    rcx,[rbx+rdi*4]
    9277:	add    rcx,QWORD PTR [rsp+0x10]
    927c:	lea    rdi,[rip+0xd36bd]        # dc940 <LevelOffset4x4Chroma_Intra>
    9283:	shl    rcx,0x6
    9287:	mov    ecx,DWORD PTR [rdi+rcx*1]
    928a:	lea    edi,[rax+rcx*2]
    928d:	movzx  ecx,BYTE PTR [rsp+0x8]
    9292:	sar    edi,cl
    9294:	movsxd r9,DWORD PTR [rsp]
    9298:	mov    rax,QWORD PTR [rsp+0x60]
    929d:	lea    r12,[r9*4+0x0]
    92a5:	lea    rbx,[rax+r12*1]
    92a9:	test   edi,edi
    92ab:	jne    9352 <dct_chroma+0x14b2>
    92b1:	call   465a0 <sign>
    92b6:	mov    r9d,eax
    92b9:	lea    rax,[r15+r13*4]
    92bd:	mov    DWORD PTR [rsp+rax*4+0x160],r9d
    92c5:	lea    rax,[rip+0x61404]        # 6a6d0 <SCAN_YUV422+0x10>
    92cc:	cmp    rax,r14
    92cf:	je     9564 <dct_chroma+0x16c4>
    92d5:	movzx  ebx,BYTE PTR [r14]
    92d9:	movzx  edx,BYTE PTR [r14+0x1]
    92de:	add    r14,0x2
    92e2:	movzx  r15d,dl
    92e6:	movzx  r13d,bl
    92ea:	add    ebp,0x1
    92ed:	lea    rax,[r15+r13*4]
    92f1:	mov    esi,DWORD PTR [rsp+rax*4+0x1a0]
    92f8:	mov    ecx,esi
    92fa:	sar    ecx,0x1f
    92fd:	mov    eax,ecx
    92ff:	xor    eax,esi
    9301:	sub    eax,ecx
    9303:	mov    rcx,QWORD PTR [rsp+0x30]
    9308:	shl    rcx,0x6
    930c:	cmp    BYTE PTR [rsp+0x18],0x0
    9311:	jne    925e <dct_chroma+0x13be>
    9317:	lea    rdi,[rip+0xd03e2]        # d9700 <LevelScale4x4Chroma_Inter>
    931e:	mov    rbx,QWORD PTR [rsp+0x40]
    9323:	imul   eax,DWORD PTR [rdi+rcx*1]
    9327:	mov    rdi,QWORD PTR [rsp+0x28]
    932c:	lea    rcx,[rbx+rdi*4]
    9330:	add    rcx,QWORD PTR [rsp+0x10]
    9335:	lea    rdi,[rip+0xd1e24]        # db160 <LevelOffset4x4Chroma_Inter>
    933c:	shl    rcx,0x6
    9340:	mov    ecx,DWORD PTR [rdi+rcx*1]
    9343:	lea    edi,[rax+rcx*2]
    9346:	movzx  ecx,BYTE PTR [rsp+0x8]
    934b:	sar    edi,cl
    934d:	jmp    9294 <dct_chroma+0x13f4>
    9352:	mov    rax,QWORD PTR [rsp+0xd8]
    935a:	mov    rdx,QWORD PTR [rsp+0x38]
    935f:	mov    DWORD PTR [rsp+0x78],edi
    9363:	mov    QWORD PTR [rsp+0x90],r9
    936b:	or     QWORD PTR [rax+0x1d0],rdx
    9372:	mov    edx,DWORD PTR [rsp+0x68]
    9376:	mov    eax,0x1
    937b:	mov    DWORD PTR [rsp+0x88],esi
    9382:	test   edx,edx
    9384:	cmovg  eax,edx
    9387:	mov    DWORD PTR [rsp+0x68],eax
    938b:	call   465a0 <sign>
    9390:	add    DWORD PTR [rsp],0x1
    9394:	mov    esi,DWORD PTR [rsp+0x88]
    939b:	mov    r9,QWORD PTR [rsp+0x90]
    93a3:	mov    edi,DWORD PTR [rsp+0x78]
    93a7:	mov    DWORD PTR [rbx],eax
    93a9:	mov    rax,QWORD PTR [rsp+0x80]
    93b1:	mov    DWORD PTR [rsp+0xcc],0x1
    93bc:	mov    DWORD PTR [rax+r9*4],ebp
    93c0:	mov    rax,QWORD PTR [rsp+0x60]
    93c5:	mov    ebp,0xffffffff
    93ca:	lea    rbx,[rax+r12*1+0x4]
    93cf:	jmp    92b1 <dct_chroma+0x1411>
    93d4:	mov    rax,QWORD PTR [rsp+0x60]
    93d9:	movsxd r9,ebp
    93dc:	mov    rdx,rbx
    93df:	mov    ebx,DWORD PTR [rsp+0x20]
    93e3:	mov    edi,DWORD PTR [rsp+0x114]
    93ea:	mov    ecx,DWORD PTR [rsp+0x110]
    93f1:	mov    r11,r13
    93f4:	mov    DWORD PTR [rax+r9*4],0x0
    93fc:	mov    r9d,DWORD PTR [rsp+0x118]
    9404:	lea    esi,[rcx+rdi*1]
    9407:	sub    ecx,edi
    9409:	mov    r10d,DWORD PTR [rsp+0x11c]
    9411:	lea    eax,[rsi+r9*1]
    9415:	lea    edi,[r9+rcx*1]
    9419:	sub    esi,r9d
    941c:	sub    ecx,r9d
    941f:	lea    r9d,[rbx-0x5]
    9423:	mov    rbx,QWORD PTR [rsp+0x40]
    9428:	sub    edi,r10d
    942b:	sub    esi,r10d
    942e:	add    eax,r10d
    9431:	add    r10d,ecx
    9434:	mov    DWORD PTR [rsp+0x124],edi
    943b:	lea    rdi,[rip+0xd05be]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    9442:	lea    rcx,[rbx+rbx*2]
    9446:	mov    DWORD PTR [rsp+0x128],esi
    944d:	xor    esi,esi
    944f:	lea    rcx,[r8+rcx*2]
    9453:	mov    DWORD PTR [rsp+0x12c],r10d
    945b:	movzx  r10d,BYTE PTR [rsp+0x18]
    9461:	shl    rcx,0x6
    9465:	mov    DWORD PTR [rsp+0x120],eax
    946c:	lea    r8,[rdi+rcx*1]
    9470:	lea    rdi,[rip+0xcf4c9]        # d8940 <InvLevelScale4x4Chroma_Intra>
    9477:	add    rdi,rcx
    947a:	cmp    DWORD PTR [rsp+0xa4],0x1d
    9482:	jg     94b6 <dct_chroma+0x1616>
    9484:	mov    ecx,0x5
    9489:	sub    ecx,DWORD PTR [rsp+0x20]
    948d:	test   r10b,r10b
    9490:	je     9545 <dct_chroma+0x16a5>
    9496:	imul   eax,DWORD PTR [rdi]
    9499:	sar    eax,cl
    949b:	mov    DWORD PTR [rdx+rsi*1],eax
    949e:	add    rsi,0x4
    94a2:	cmp    rsi,0x10
    94a6:	je     94d4 <dct_chroma+0x1634>
    94a8:	cmp    DWORD PTR [rsp+0xa4],0x1d
    94b0:	mov    eax,DWORD PTR [r11+rsi*1]
    94b4:	jle    9484 <dct_chroma+0x15e4>
    94b6:	test   r10b,r10b
    94b9:	je     9553 <dct_chroma+0x16b3>
    94bf:	imul   eax,DWORD PTR [rdi]
    94c2:	mov    ecx,r9d
    94c5:	shl    eax,cl
    94c7:	mov    DWORD PTR [rdx+rsi*1],eax
    94ca:	add    rsi,0x4
    94ce:	cmp    rsi,0x10
    94d2:	jne    94a8 <dct_chroma+0x1608>
    94d4:	mov    r10,QWORD PTR [rip+0x7f0d5]        # 885b0 <img>
    94db:	mov    eax,DWORD PTR [rsp+0x110]
    94e2:	mov    DWORD PTR [r10+0x3338],eax
    94e9:	mov    eax,DWORD PTR [rsp+0x114]
    94f0:	mov    DWORD PTR [r10+0x3438],eax
    94f7:	mov    eax,DWORD PTR [rsp+0x118]
    94fe:	mov    DWORD PTR [r10+0x3348],eax
    9505:	mov    eax,DWORD PTR [rsp+0x11c]
    950c:	mov    DWORD PTR [r10+0x3448],eax
    9513:	mov    eax,DWORD PTR [r10+0x11bf4]
    951a:	mov    DWORD PTR [rsp+0x78],eax
    951e:	mov    eax,DWORD PTR [rsp+0x68]
    9522:	cmp    DWORD PTR [rsp+0x78],0x1
    9527:	mov    DWORD PTR [rsp+0xe4],eax
    952e:	jg     82f5 <dct_chroma+0x455>
    9534:	movzx  eax,BYTE PTR [rsp+0xab]
    953c:	mov    BYTE PTR [rsp+0x50],al
    9540:	jmp    8a0c <dct_chroma+0xb6c>
    9545:	imul   eax,DWORD PTR [r8]
    9549:	sar    eax,cl
    954b:	mov    DWORD PTR [rdx+rsi*1],eax
    954e:	jmp    949e <dct_chroma+0x15fe>
    9553:	imul   eax,DWORD PTR [r8]
    9557:	mov    ecx,r9d
    955a:	shl    eax,cl
    955c:	mov    DWORD PTR [rdx+rsi*1],eax
    955f:	jmp    949e <dct_chroma+0x15fe>
    9564:	mov    edx,DWORD PTR [rsp+0x170]
    956b:	mov    esi,DWORD PTR [rsp+0x174]
    9572:	mov    DWORD PTR [rbx],0x0
    9578:	lea    rbp,[rsp+0x130]
    9580:	mov    eax,DWORD PTR [rsp+0x160]
    9587:	mov    ecx,DWORD PTR [rsp+0x164]
    958e:	lea    rbx,[rsp+0x1a0]
    9596:	mov    r10d,DWORD PTR [rsp+0x17c]
    959e:	mov    r9d,DWORD PTR [rsp+0x16c]
    95a6:	lea    r12d,[rax+rdx*1]
    95aa:	lea    r14d,[rcx+rsi*1]
    95ae:	sub    eax,edx
    95b0:	sub    ecx,esi
    95b2:	mov    DWORD PTR [rsp+0x1b0],eax
    95b9:	mov    eax,0x1
    95be:	mov    rsi,QWORD PTR [rsp+0x50]
    95c3:	lea    rdx,[rip+0xd0436]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    95ca:	mov    DWORD PTR [rsp+0x1b4],ecx
    95d1:	mov    ecx,0x3
    95d6:	sub    ecx,DWORD PTR [rsp+0x70]
    95da:	lea    r15d,[r9+r10*1]
    95de:	shl    eax,cl
    95e0:	mov    edi,DWORD PTR [rsp+0x168]
    95e7:	mov    r8d,DWORD PTR [rsp+0x178]
    95ef:	sub    r9d,r10d
    95f2:	mov    DWORD PTR [rsp],eax
    95f5:	lea    rax,[rsp+0x1c0]
    95fd:	mov    r10,QWORD PTR [rip+0x7efac]        # 885b0 <img>
    9604:	mov    QWORD PTR [rsp+0x30],rax
    9609:	lea    rax,[rsp+0x138]
    9611:	lea    r13d,[rdi+r8*1]
    9615:	sub    edi,r8d
    9618:	mov    QWORD PTR [rsp+0x38],rax
    961d:	mov    rax,QWORD PTR [rsp+0x40]
    9622:	mov    DWORD PTR [rsp+0x1b8],edi
    9629:	lea    rax,[rax+rax*2]
    962d:	mov    QWORD PTR [rsp+0x50],r10
    9632:	lea    rax,[rsi+rax*2]
    9636:	mov    DWORD PTR [rsp+0x1bc],r9d
    963e:	mov    r9,r10
    9641:	shl    rax,0x6
    9645:	lea    rsi,[rdx+rax*1]
    9649:	lea    rdx,[rip+0xcf2f0]        # d8940 <InvLevelScale4x4Chroma_Intra>
    9650:	add    rax,rdx
    9653:	mov    QWORD PTR [rsp+0x10],rsi
    9658:	mov    QWORD PTR [rsp+0x28],rax
    965d:	lea    eax,[r12+r13*1]
    9661:	lea    edx,[r14+r15*1]
    9665:	mov    r8,r9
    9668:	mov    rdi,r9
    966b:	mov    DWORD PTR [rsp+0x130],eax
    9672:	mov    eax,r12d
    9675:	mov    rsi,rbp
    9678:	sub    eax,r13d
    967b:	mov    DWORD PTR [rsp+0x13c],edx
    9682:	mov    DWORD PTR [rsp+0x134],eax
    9689:	mov    eax,r14d
    968c:	sub    eax,r15d
    968f:	mov    DWORD PTR [rsp+0x138],eax
    9696:	mov    eax,DWORD PTR [rsp+0x70]
    969a:	sub    eax,0x4
    969d:	mov    DWORD PTR [rsp+0x8],eax
    96a1:	mov    eax,DWORD PTR [rsp+0x70]
    96a5:	cmp    eax,0x3
    96a8:	jg     9741 <dct_chroma+0x18a1>
    96ae:	mov    ecx,0x4
    96b3:	sub    ecx,eax
    96b5:	cmp    BYTE PTR [rsp+0x18],0x0
    96ba:	mov    eax,DWORD PTR [rsi]
    96bc:	je     97ed <dct_chroma+0x194d>
    96c2:	mov    r11,QWORD PTR [rsp+0x28]
    96c7:	mov    r11d,DWORD PTR [r11]
    96ca:	lea    r10d,[rax+rdx*1]
    96ce:	sub    eax,edx
    96d0:	imul   r10d,r11d
    96d4:	add    r10d,DWORD PTR [rsp]
    96d8:	imul   eax,r11d
    96dc:	add    eax,DWORD PTR [rsp]
    96df:	sar    r10d,cl
    96e2:	sar    eax,cl
    96e4:	add    r10d,0x2
    96e8:	add    eax,0x2
    96eb:	sar    r10d,0x2
    96ef:	sar    eax,0x2
    96f2:	mov    DWORD PTR [rdi+0x3338],r10d
    96f9:	mov    DWORD PTR [r8+0x3368],eax
    9700:	lea    rax,[rsi+0x4]
    9704:	add    rdi,0x10
    9708:	sub    r8,0x10
    970c:	cmp    QWORD PTR [rsp+0x38],rax
    9711:	jne    9797 <dct_chroma+0x18f7>
    9717:	add    rbx,0x10
    971b:	add    r9,0x100
    9722:	cmp    QWORD PTR [rsp+0x30],rbx
    9727:	je     97ad <dct_chroma+0x190d>
    972d:	mov    r12d,DWORD PTR [rbx]
    9730:	mov    r14d,DWORD PTR [rbx+0x4]
    9734:	mov    r13d,DWORD PTR [rbx+0x8]
    9738:	mov    r15d,DWORD PTR [rbx+0xc]
    973c:	jmp    965d <dct_chroma+0x17bd>
    9741:	cmp    BYTE PTR [rsp+0x18],0x0
    9746:	mov    eax,DWORD PTR [rsi]
    9748:	je     97f7 <dct_chroma+0x1957>
    974e:	mov    rcx,QWORD PTR [rsp+0x28]
    9753:	mov    r11d,DWORD PTR [rcx]
    9756:	lea    r10d,[rax+rdx*1]
    975a:	movzx  ecx,BYTE PTR [rsp+0x8]
    975f:	sub    eax,edx
    9761:	imul   r10d,r11d
    9765:	imul   r11d,eax
    9769:	shl    r10d,cl
    976c:	mov    ecx,r10d
    976f:	mov    eax,r11d
    9772:	add    ecx,0x2
    9775:	sar    ecx,0x2
    9778:	mov    DWORD PTR [rdi+0x3338],ecx
    977e:	movzx  ecx,BYTE PTR [rsp+0x8]
    9783:	shl    eax,cl
    9785:	add    eax,0x2
    9788:	sar    eax,0x2
    978b:	mov    DWORD PTR [r8+0x3368],eax
    9792:	jmp    9700 <dct_chroma+0x1860>
    9797:	mov    rdx,0xfffffffffffffffc
    979e:	sub    rdx,rsi
    97a1:	mov    rsi,rax
    97a4:	mov    edx,DWORD PTR [rdx+rbp*2+0xc]
    97a8:	jmp    96a1 <dct_chroma+0x1801>
    97ad:	mov    r10,QWORD PTR [rsp+0x50]
    97b2:	mov    DWORD PTR [rsp+0x120],r12d
    97ba:	mov    DWORD PTR [rsp+0x128],r13d
    97c2:	mov    DWORD PTR [rsp+0x124],r14d
    97ca:	mov    DWORD PTR [rsp+0x12c],r15d
    97d2:	mov    eax,DWORD PTR [r10+0x11bf4]
    97d9:	mov    DWORD PTR [rsp+0x78],eax
    97dd:	mov    eax,DWORD PTR [rsp+0x68]
    97e1:	mov    DWORD PTR [rsp+0xe4],eax
    97e8:	jmp    82ea <dct_chroma+0x44a>
    97ed:	mov    r11,QWORD PTR [rsp+0x10]
    97f2:	jmp    96c7 <dct_chroma+0x1827>
    97f7:	mov    rcx,QWORD PTR [rsp+0x10]
    97fc:	jmp    9753 <dct_chroma+0x18b3>
    9801:	mov    edi,DWORD PTR [r10+0x11c04]
    9808:	mov    r9,r10
    980b:	xor    r8d,r8d
    980e:	test   edi,edi
    9810:	jle    9848 <dct_chroma+0x19a8>
    9812:	mov    r10d,r8d
    9815:	mov    rcx,r9
    9818:	xor    eax,eax
    981a:	sar    r10d,0x2
    981e:	movsxd r10,r10d
    9821:	mov    edx,eax
    9823:	mov    esi,DWORD PTR [rcx+0x3338]
    9829:	add    eax,0x4
    982c:	add    rcx,0x100
    9833:	sar    edx,0x2
    9836:	movsxd rdx,edx
    9839:	lea    rdx,[r10+rdx*4]
    983d:	mov    DWORD PTR [rsp+rdx*4+0x160],esi
    9844:	cmp    eax,edi
    9846:	jl     9821 <dct_chroma+0x1981>
    9848:	add    r8d,0x4
    984c:	add    r9,0x10
    9850:	cmp    r8d,DWORD PTR [rsp+0x50]
    9855:	jl     980e <dct_chroma+0x196e>
    9857:	jmp    910c <dct_chroma+0x126c>
    985c:	mov    edi,0x80f
    9861:	jmp    8fe4 <dct_chroma+0x1144>
    9866:	mov    edi,DWORD PTR [r10+0x11c04]
    986d:	mov    r9,r10
    9870:	xor    r8d,r8d
    9873:	test   edi,edi
    9875:	jle    98ae <dct_chroma+0x1a0e>
    9877:	mov    esi,r8d
    987a:	mov    rcx,r9
    987d:	xor    eax,eax
    987f:	sar    esi,0x2
    9882:	movsxd rsi,esi
    9885:	mov    edx,eax
    9887:	mov    r10d,DWORD PTR [rcx+0x3338]
    988e:	add    eax,0x4
    9891:	add    rcx,0x100
    9898:	sar    edx,0x2
    989b:	movsxd rdx,edx
    989e:	lea    rdx,[rsi+rdx*4]
    98a2:	mov    DWORD PTR [rsp+rdx*4+0x1a0],r10d
    98aa:	cmp    eax,edi
    98ac:	jl     9885 <dct_chroma+0x19e5>
    98ae:	add    r8d,0x4
    98b2:	add    r9,0x10
    98b6:	cmp    r8d,DWORD PTR [rsp+0x50]
    98bb:	jl     9873 <dct_chroma+0x19d3>
    98bd:	cmp    BYTE PTR [rsp+0xab],0x0
    98c5:	je     9e50 <dct_chroma+0x1fb0>
    98cb:	lea    rax,[rsp+0x1a0]
    98d3:	lea    r10,[rsp+0x1b0]
    98db:	mov    rdx,rax
    98de:	mov    esi,DWORD PTR [rdx+0x30]
    98e1:	mov    ecx,DWORD PTR [rdx]
    98e3:	add    rdx,0x4
    98e7:	mov    r9d,DWORD PTR [rdx+0x1c]
    98eb:	lea    edi,[rcx+rsi*1]
    98ee:	sub    ecx,esi
    98f0:	mov    esi,DWORD PTR [rdx+0xc]
    98f3:	lea    r8d,[rsi+r9*1]
    98f7:	sub    esi,r9d
    98fa:	lea    r9d,[rdi+r8*1]
    98fe:	sub    edi,r8d
    9901:	mov    DWORD PTR [rdx+0x1c],edi
    9904:	lea    edi,[rcx+rsi*1]
    9907:	sub    ecx,esi
    9909:	mov    DWORD PTR [rdx-0x4],r9d
    990d:	mov    DWORD PTR [rdx+0xc],edi
    9910:	mov    DWORD PTR [rdx+0x2c],ecx
    9913:	cmp    rdx,r10
    9916:	jne    98de <dct_chroma+0x1a3e>
    9918:	lea    r9,[rax+0x40]
    991c:	mov    edx,DWORD PTR [rax+0xc]
    991f:	mov    r8d,DWORD PTR [rax]
    9922:	add    rax,0x10
    9926:	mov    edi,DWORD PTR [rax-0x8]
    9929:	lea    esi,[r8+rdx*1]
    992d:	sub    r8d,edx
    9930:	mov    edx,DWORD PTR [rax-0xc]
    9933:	lea    ecx,[rdx+rdi*1]
    9936:	sub    edx,edi
    9938:	lea    edi,[rsi+rcx*1]
    993b:	sar    edi,1
    993d:	mov    DWORD PTR [rax-0x10],edi
    9940:	mov    edi,esi
    9942:	sub    edi,ecx
    9944:	sar    edi,1
    9946:	mov    DWORD PTR [rax-0x8],edi
    9949:	lea    edi,[r8+rdx*1]
    994d:	sar    edi,1
    994f:	mov    DWORD PTR [rax-0xc],edi
    9952:	mov    edi,r8d
    9955:	sub    edi,edx
    9957:	sar    edi,1
    9959:	mov    DWORD PTR [rax-0x4],edi
    995c:	cmp    r9,rax
    995f:	jne    991c <dct_chroma+0x1a7c>
    9961:	movzx  eax,BYTE PTR [rsp+0xab]
    9969:	mov    DWORD PTR [rsp+0x120],esi
    9970:	mov    DWORD PTR [rsp+0x128],edx
    9977:	mov    DWORD PTR [rsp+0x124],ecx
    997e:	mov    DWORD PTR [rsp+0x12c],r8d
    9986:	mov    BYTE PTR [rsp],al
    9989:	mov    ecx,DWORD PTR [rsp+0xf4]
    9990:	mov    eax,0xffff0000
    9995:	xor    ebp,ebp
    9997:	xor    ebx,ebx
    9999:	lea    r8,[rip+0x61082]        # 6aa22 <SNGL_SCAN+0x2>
    99a0:	xor    r10d,r10d
    99a3:	mov    r9d,0xffffffff
    99a9:	mov    DWORD PTR [rsp+0xcc],0x0
    99b4:	shl    ecx,0x4
    99b7:	mov    r12,r8
    99ba:	mov    r14d,r10d
    99bd:	mov    r13d,r9d
    99c0:	shl    rax,cl
    99c3:	mov    r15d,DWORD PTR [rsp+0xa0]
    99cb:	mov    QWORD PTR [rsp+0x10],rax
    99d0:	mov    eax,DWORD PTR [rsp+0x68]
    99d4:	mov    DWORD PTR [rsp+0xe4],eax
    99db:	mov    rax,QWORD PTR [rsp+0x40]
    99e0:	lea    r11,[rax+rax*2]
    99e4:	lea    rax,[rax+r11*4]
    99e8:	mov    QWORD PTR [rsp+0x8],rax
    99ed:	jmp    9a18 <dct_chroma+0x1b78>
    99ef:	nop
    99f0:	test   r15d,r15d
    99f3:	je     9b3a <dct_chroma+0x1c9a>
    99f9:	lea    rax,[rip+0x61040]        # 6aa40 <QP_SCALE_CR>
    9a00:	cmp    r12,rax
    9a03:	je     9b73 <dct_chroma+0x1cd3>
    9a09:	movzx  ebx,BYTE PTR [r12]
    9a0e:	movzx  ebp,BYTE PTR [r12+0x1]
    9a14:	add    r12,0x2
    9a18:	lea    rax,[rbp+rbx*4+0x0]
    9a1d:	add    r13d,0x1
    9a21:	mov    esi,DWORD PTR [rsp+rax*4+0x1a0]
    9a28:	mov    eax,esi
    9a2a:	sar    eax,0x1f
    9a2d:	mov    edi,eax
    9a2f:	xor    edi,esi
    9a31:	sub    edi,eax
    9a33:	test   r15d,r15d
    9a36:	jne    9a7f <dct_chroma+0x1bdf>
    9a38:	movsxd rax,DWORD PTR [rsp+0x48]
    9a3d:	mov    r9d,DWORD PTR [rsp+0x20]
    9a42:	lea    rax,[rax+r11*2]
    9a46:	lea    ecx,[r9+0x10]
    9a4a:	shl    rax,0x6
    9a4e:	cmp    BYTE PTR [rsp+0x18],0x0
    9a53:	je     9d53 <dct_chroma+0x1eb3>
    9a59:	lea    rdx,[rip+0xcea60]        # d84c0 <LevelScale4x4Chroma_Intra>
    9a60:	imul   edi,DWORD PTR [rdx+rax*1]
    9a64:	movsxd rax,r9d
    9a67:	add    rax,QWORD PTR [rsp+0x8]
    9a6c:	shl    rax,0x6
    9a70:	lea    rdx,[rip+0xd2ec9]        # dc940 <LevelOffset4x4Chroma_Intra>
    9a77:	mov    eax,DWORD PTR [rdx+rax*1]
    9a7a:	lea    edi,[rdi+rax*2]
    9a7d:	sar    edi,cl
    9a7f:	mov    rax,QWORD PTR [rsp+0x60]
    9a84:	movsxd r8,r14d
    9a87:	lea    rcx,[r8*4+0x0]
    9a8f:	lea    rdx,[rax+rcx*1]
    9a93:	test   edi,edi
    9a95:	je     99f0 <dct_chroma+0x1b50>
    9a9b:	mov    rax,QWORD PTR [rsp+0xd8]
    9aa3:	mov    QWORD PTR [rsp+0x70],rdx
    9aa8:	mov    rdx,QWORD PTR [rsp+0x10]
    9aad:	mov    QWORD PTR [rsp+0x68],r11
    9ab2:	or     QWORD PTR [rax+0x1d0],rdx
    9ab9:	mov    edx,DWORD PTR [rsp+0xe4]
    9ac0:	mov    eax,0x1
    9ac5:	mov    QWORD PTR [rsp+0x50],r8
    9aca:	test   edx,edx
    9acc:	mov    QWORD PTR [rsp+0x38],rcx
    9ad1:	cmovg  eax,edx
    9ad4:	mov    DWORD PTR [rsp+0x30],esi
    9ad8:	add    r14d,0x1
    9adc:	mov    DWORD PTR [rsp+0x28],edi
    9ae0:	mov    DWORD PTR [rsp+0xe4],eax
    9ae7:	call   465a0 <sign>
    9aec:	mov    rdx,QWORD PTR [rsp+0x70]
    9af1:	mov    r8,QWORD PTR [rsp+0x50]
    9af6:	mov    DWORD PTR [rsp+0xcc],0x1
    9b01:	mov    rcx,QWORD PTR [rsp+0x38]
    9b06:	mov    r11,QWORD PTR [rsp+0x68]
    9b0b:	mov    esi,DWORD PTR [rsp+0x30]
    9b0f:	mov    edi,DWORD PTR [rsp+0x28]
    9b13:	mov    DWORD PTR [rdx],eax
    9b15:	mov    rax,QWORD PTR [rsp+0x80]
    9b1d:	mov    DWORD PTR [rax+r8*4],r13d
    9b21:	mov    rax,QWORD PTR [rsp+0x60]
    9b26:	mov    r13d,0xffffffff
    9b2c:	lea    rdx,[rax+rcx*1+0x4]
    9b31:	test   r15d,r15d
    9b34:	jne    99f9 <dct_chroma+0x1b59>
    9b3a:	mov    QWORD PTR [rsp+0x30],rdx
    9b3f:	mov    QWORD PTR [rsp+0x28],r11
    9b44:	call   465a0 <sign>
    9b49:	mov    rdx,QWORD PTR [rsp+0x30]
    9b4e:	mov    r11,QWORD PTR [rsp+0x28]
    9b53:	mov    r8d,eax
    9b56:	lea    rax,[rbp+rbx*4+0x0]
    9b5b:	mov    DWORD PTR [rsp+rax*4+0x1a0],r8d
    9b63:	lea    rax,[rip+0x60ed6]        # 6aa40 <QP_SCALE_CR>
    9b6a:	cmp    r12,rax
    9b6d:	jne    9a09 <dct_chroma+0x1b69>
    9b73:	cmp    BYTE PTR [rsp],0x0
    9b77:	mov    DWORD PTR [rdx],0x0
    9b7d:	mov    r10,QWORD PTR [rip+0x7ea2c]        # 885b0 <img>
    9b84:	je     9d43 <dct_chroma+0x1ea3>
    9b8a:	lea    rbx,[rsp+0x1a0]
    9b92:	lea    r9,[rsp+0x1b0]
    9b9a:	mov    rax,rbx
    9b9d:	mov    edi,DWORD PTR [rax+0x20]
    9ba0:	mov    edx,DWORD PTR [rax]
    9ba2:	add    rax,0x4
    9ba6:	mov    ecx,DWORD PTR [rax+0xc]
    9ba9:	mov    r8d,DWORD PTR [rax+0x2c]
    9bad:	lea    esi,[rdx+rdi*1]
    9bb0:	sub    edx,edi
    9bb2:	mov    edi,ecx
    9bb4:	add    ecx,r8d
    9bb7:	sub    edi,r8d
    9bba:	lea    r8d,[rsi+rcx*1]
    9bbe:	sub    esi,ecx
    9bc0:	lea    ecx,[rdx+rdi*1]
    9bc3:	sub    edx,edi
    9bc5:	mov    DWORD PTR [rax-0x4],r8d
    9bc9:	mov    DWORD PTR [rax+0x2c],esi
    9bcc:	mov    DWORD PTR [rax+0xc],ecx
    9bcf:	mov    DWORD PTR [rax+0x1c],edx
    9bd2:	cmp    r9,rax
    9bd5:	jne    9b9d <dct_chroma+0x1cfd>
    9bd7:	lea    rax,[rbx+0x40]
    9bdb:	movsxd r8,DWORD PTR [rsp+0x48]
    9be0:	mov    QWORD PTR [rsp+0x38],r10
    9be5:	mov    r12,r10
    9be8:	mov    QWORD PTR [rsp+0x28],rax
    9bed:	mov    rax,QWORD PTR [rsp+0x40]
    9bf2:	lea    rdx,[rip+0xcfe07]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    9bf9:	mov    ecx,0x3
    9bfe:	mov    r13d,0x1
    9c04:	sub    ecx,DWORD PTR [rsp+0x20]
    9c08:	lea    rbp,[rsp+0x130]
    9c10:	lea    rax,[rax+rax*2]
    9c14:	shl    r13d,cl
    9c17:	lea    rax,[r8+rax*2]
    9c1b:	shl    rax,0x6
    9c1f:	lea    rdi,[rdx+rax*1]
    9c23:	lea    rdx,[rip+0xced16]        # d8940 <InvLevelScale4x4Chroma_Intra>
    9c2a:	add    rax,rdx
    9c2d:	mov    QWORD PTR [rsp+0x8],rdi
    9c32:	mov    QWORD PTR [rsp+0x10],rax
    9c37:	mov    r14d,DWORD PTR [rbx]
    9c3a:	mov    r15d,DWORD PTR [rbx+0x8]
    9c3e:	mov    r8,r12
    9c41:	mov    rdi,r12
    9c44:	mov    esi,DWORD PTR [rbx+0x4]
    9c47:	mov    r9d,DWORD PTR [rbx+0xc]
    9c4b:	lea    eax,[r14+r15*1]
    9c4f:	mov    DWORD PTR [rsp+0x130],eax
    9c56:	mov    eax,r14d
    9c59:	lea    edx,[rsi+r9*1]
    9c5d:	sub    eax,r15d
    9c60:	mov    DWORD PTR [rsp+0x30],esi
    9c64:	mov    DWORD PTR [rsp+0x134],eax
    9c6b:	mov    eax,esi
    9c6d:	xor    esi,esi
    9c6f:	sub    eax,r9d
    9c72:	mov    DWORD PTR [rsp+0x13c],edx
    9c79:	mov    DWORD PTR [rsp+0x138],eax
    9c80:	mov    eax,DWORD PTR [rsp+0x20]
    9c84:	sub    eax,0x4
    9c87:	cmp    DWORD PTR [rsp+0xa4],0x17
    9c8f:	mov    DWORD PTR [rsp],eax
    9c92:	jg     9d95 <dct_chroma+0x1ef5>
    9c98:	mov    rax,rsi
    9c9b:	mov    ecx,0x4
    9ca0:	sub    ecx,DWORD PTR [rsp+0x20]
    9ca4:	neg    rax
    9ca7:	cmp    BYTE PTR [rsp+0x18],0x0
    9cac:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
    9cb0:	je     9ded <dct_chroma+0x1f4d>
    9cb6:	mov    r11,QWORD PTR [rsp+0x10]
    9cbb:	mov    r11d,DWORD PTR [r11]
    9cbe:	lea    r10d,[rax+rdx*1]
    9cc2:	sub    eax,edx
    9cc4:	imul   r10d,r11d
    9cc8:	imul   eax,r11d
    9ccc:	add    r10d,r13d
    9ccf:	add    eax,r13d
    9cd2:	sar    r10d,cl
    9cd5:	sar    eax,cl
    9cd7:	add    r10d,0x2
    9cdb:	add    eax,0x2
    9cde:	sar    r10d,0x2
    9ce2:	sar    eax,0x2
    9ce5:	mov    DWORD PTR [rdi+0x3338],r10d
    9cec:	mov    DWORD PTR [r8+0x3368],eax
    9cf3:	sub    rsi,0x4
    9cf7:	add    rdi,0x10
    9cfb:	sub    r8,0x10
    9cff:	cmp    rsi,0xfffffffffffffff8
    9d03:	jne    9d80 <dct_chroma+0x1ee0>
    9d05:	add    rbx,0x10
    9d09:	add    r12,0x100
    9d10:	cmp    rbx,QWORD PTR [rsp+0x28]
    9d15:	jne    9c37 <dct_chroma+0x1d97>
    9d1b:	mov    eax,DWORD PTR [rsp+0x30]
    9d1f:	mov    DWORD PTR [rsp+0x120],r14d
    9d27:	mov    DWORD PTR [rsp+0x128],r15d
    9d2f:	mov    r10,QWORD PTR [rsp+0x38]
    9d34:	mov    DWORD PTR [rsp+0x124],eax
    9d3b:	mov    DWORD PTR [rsp+0x12c],r9d
    9d43:	mov    eax,DWORD PTR [r10+0x11bf4]
    9d4a:	mov    DWORD PTR [rsp+0x78],eax
    9d4e:	jmp    82ea <dct_chroma+0x44a>
    9d53:	lea    rdx,[rip+0xcf9a6]        # d9700 <LevelScale4x4Chroma_Inter>
    9d5a:	imul   edi,DWORD PTR [rdx+rax*1]
    9d5e:	movsxd rax,DWORD PTR [rsp+0x20]
    9d63:	lea    rdx,[rip+0xd13f6]        # db160 <LevelOffset4x4Chroma_Inter>
    9d6a:	add    rax,QWORD PTR [rsp+0x8]
    9d6f:	shl    rax,0x6
    9d73:	mov    eax,DWORD PTR [rdx+rax*1]
    9d76:	lea    edi,[rdi+rax*2]
    9d79:	sar    edi,cl
    9d7b:	jmp    9a7f <dct_chroma+0x1bdf>
    9d80:	cmp    DWORD PTR [rsp+0xa4],0x17
    9d88:	mov    edx,DWORD PTR [rsp+rsi*1+0x13c]
    9d8f:	jle    9c98 <dct_chroma+0x1df8>
    9d95:	mov    rax,rsi
    9d98:	neg    rax
    9d9b:	cmp    BYTE PTR [rsp+0x18],0x0
    9da0:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
    9da4:	je     9df7 <dct_chroma+0x1f57>
    9da6:	mov    rcx,QWORD PTR [rsp+0x10]
    9dab:	mov    r11d,DWORD PTR [rcx]
    9dae:	lea    r10d,[rax+rdx*1]
    9db2:	movzx  ecx,BYTE PTR [rsp]
    9db6:	sub    eax,edx
    9db8:	imul   r10d,r11d
    9dbc:	imul   r11d,eax
    9dc0:	shl    r10d,cl
    9dc3:	mov    ecx,r10d
    9dc6:	mov    eax,r11d
    9dc9:	add    ecx,0x2
    9dcc:	sar    ecx,0x2
    9dcf:	mov    DWORD PTR [rdi+0x3338],ecx
    9dd5:	movzx  ecx,BYTE PTR [rsp]
    9dd9:	shl    eax,cl
    9ddb:	add    eax,0x2
    9dde:	sar    eax,0x2
    9de1:	mov    DWORD PTR [r8+0x3368],eax
    9de8:	jmp    9cf3 <dct_chroma+0x1e53>
    9ded:	mov    r11,QWORD PTR [rsp+0x8]
    9df2:	jmp    9cbb <dct_chroma+0x1e1b>
    9df7:	mov    rcx,QWORD PTR [rsp+0x8]
    9dfc:	jmp    9dab <dct_chroma+0x1f0b>
    9dfe:	cmp    DWORD PTR [rsp+0xe0],0x1
    9e06:	je     8e9e <dct_chroma+0xffe>
    9e0c:	cmp    DWORD PTR [rsp+0xe0],0x3
    9e14:	jne    82d4 <dct_chroma+0x434>
    9e1a:	jmp    98bd <dct_chroma+0x1a1d>
    9e1f:	mov    ecx,DWORD PTR [rsp+0x68]
    9e23:	test   ecx,ecx
    9e25:	jne    8e45 <dct_chroma+0xfa5>
    9e2b:	mov    edx,DWORD PTR [rsp+0x60]
    9e2f:	test   edx,edx
    9e31:	jle    8e45 <dct_chroma+0xfa5>
    9e37:	mov    eax,DWORD PTR [r10+0x11c04]
    9e3e:	mov    DWORD PTR [rsp+0x40],eax
    9e42:	jmp    8d83 <dct_chroma+0xee3>
    9e47:	nop    WORD PTR [rax+rax*1+0x0]
    9e50:	mov    BYTE PTR [rsp],0x0
    9e54:	jmp    9989 <dct_chroma+0x1ae9>
    9e59:	movsxd rcx,DWORD PTR [rsp]
    9e5d:	mov    rdi,QWORD PTR [rsp+0x30]
    9e62:	mov    QWORD PTR [rsp+0x80],r8
    9e6a:	mov    QWORD PTR [rsp+0x78],r11
    9e6f:	lea    r10,[rdi+rcx*4]
    9e73:	mov    edi,ebp
    9e75:	mov    DWORD PTR [rsp+0x88],edx
    9e7c:	mov    QWORD PTR [rsp+0x70],rcx
    9e81:	mov    QWORD PTR [rsp+0x68],r10
    9e86:	add    DWORD PTR [rsp+0x50],0xf423f
    9e8e:	call   465a0 <sign>
    9e93:	mov    r10,QWORD PTR [rsp+0x68]
    9e98:	mov    edi,ebp
    9e9a:	add    DWORD PTR [rsp],0x1
    9e9e:	mov    rsi,QWORD PTR [rsp+0x40]
    9ea3:	mov    edx,DWORD PTR [rsp+0x88]
    9eaa:	mov    DWORD PTR [r10],eax
    9ead:	mov    rcx,QWORD PTR [rsp+0x70]
    9eb2:	mov    rax,rbx
    9eb5:	shl    rax,0x4
    9eb9:	mov    DWORD PTR [rsi+rcx*4],edx
    9ebc:	lea    rdx,[rax+r12*1+0xccc]
    9ec4:	mov    rax,QWORD PTR [rip+0x7e6e5]        # 885b0 <img>
    9ecb:	mov    esi,DWORD PTR [rax+rdx*4+0x8]
    9ecf:	call   465a0 <sign>
    9ed4:	mov    r11,QWORD PTR [rsp+0x78]
    9ed9:	mov    r8,QWORD PTR [rsp+0x80]
    9ee1:	mov    r9,QWORD PTR [rsp+0x90]
    9ee9:	mov    ebp,eax
    9eeb:	jmp    86d3 <dct_chroma+0x833>
    9ef0:	call   4390 <__stack_chk_fail@plt>
    9ef5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000009f00 <dct_chroma4x4>:
    9f00:	endbr64 
    9f04:	push   r15
    9f06:	movsxd r9,esi
    9f09:	push   r14
    9f0b:	push   r13
    9f0d:	push   r12
    9f0f:	push   rbp
    9f10:	push   rbx
    9f11:	sub    rsp,0x68
    9f15:	mov    r10,QWORD PTR [rip+0x7e694]        # 885b0 <img>
    9f1c:	movsxd rax,DWORD PTR [r10+0xc]
    9f20:	imul   rax,rax,0x278
    9f27:	add    rax,QWORD PTR [r10+0x3758]
    9f2e:	mov    ecx,DWORD PTR [rax+0x48]
    9f31:	lea    r8d,[rcx-0x9]
    9f35:	cmp    r8d,0x1
    9f39:	setbe  r8b
    9f3d:	cmp    ecx,0xd
    9f40:	sete   cl
    9f43:	or     r8d,ecx
    9f46:	mov    rcx,QWORD PTR [r10+0x3738]
    9f4d:	mov    BYTE PTR [rsp+0x7],r8b
    9f52:	movsxd r8,edx
    9f55:	mov    rcx,QWORD PTR [rcx+r9*8]
    9f59:	mov    r9d,DWORD PTR [r10+0x11be0]
    9f60:	mov    rcx,QWORD PTR [rcx+r8*8]
    9f64:	mov    rbx,QWORD PTR [rcx]
    9f67:	mov    QWORD PTR [rsp+0x10],rbx
    9f6c:	mov    rbx,QWORD PTR [rcx+0x8]
    9f70:	mov    QWORD PTR [rsp+0x28],rbx
    9f75:	movsxd rbx,edi
    9f78:	mov    ecx,DWORD PTR [r10+rbx*4+0x11c0c]
    9f80:	add    ecx,DWORD PTR [rax+0xc]
    9f83:	movsxd rax,ecx
    9f86:	mov    ecx,DWORD PTR [r10+0x11bdc]
    9f8d:	add    ecx,DWORD PTR [r10+0x28]
    9f91:	jne    9fa4 <dct_chroma4x4+0xa4>
    9f93:	mov    r8d,DWORD PTR [r10+0x11c00]
    9f9a:	cmp    r8d,0x1
    9f9e:	je     a240 <dct_chroma4x4+0x340>
    9fa4:	test   eax,eax
    9fa6:	js     9fb3 <dct_chroma4x4+0xb3>
    9fa8:	lea    rcx,[rip+0x60a91]        # 6aa40 <QP_SCALE_CR>
    9faf:	movzx  eax,BYTE PTR [rcx+rax*1]
    9fb3:	lea    ecx,[rax+r9*1]
    9fb7:	lea    r12,[r10+0x3348]
    9fbe:	movsxd r14,ecx
    9fc1:	mov    eax,ecx
    9fc3:	mov    DWORD PTR [rsp+0x3c],ecx
    9fc7:	imul   r14,r14,0x2aaaaaab
    9fce:	sar    eax,0x1f
    9fd1:	shr    r14,0x20
    9fd5:	sub    r14d,eax
    9fd8:	lea    eax,[r14+r14*2]
    9fdc:	add    eax,eax
    9fde:	sub    ecx,eax
    9fe0:	lea    eax,[r14+0xf]
    9fe4:	mov    DWORD PTR [rsp+0x1c],eax
    9fe8:	lea    rax,[r10+0x3338]
    9fef:	mov    DWORD PTR [rsp+0x38],ecx
    9ff3:	mov    rcx,rax
    9ff6:	mov    r9d,DWORD PTR [rcx+0xc0]
    9ffd:	mov    r8d,DWORD PTR [rcx]
    a000:	add    rcx,0x4
    a004:	mov    ebp,DWORD PTR [rcx+0x7c]
    a007:	lea    r11d,[r8+r9*1]
    a00b:	sub    r8d,r9d
    a00e:	mov    r9d,DWORD PTR [rcx+0x3c]
    a012:	lea    r13d,[r9+rbp*1]
    a016:	sub    r9d,ebp
    a019:	lea    ebp,[r11+r13*1]
    a01d:	sub    r11d,r13d
    a020:	mov    DWORD PTR [rcx+0x7c],r11d
    a024:	lea    r11d,[r9+r8*2]
    a028:	add    r9d,r9d
    a02b:	sub    r8d,r9d
    a02e:	mov    DWORD PTR [rcx-0x4],ebp
    a031:	mov    DWORD PTR [rcx+0x3c],r11d
    a035:	mov    DWORD PTR [rcx+0xbc],r8d
    a03c:	cmp    r12,rcx
    a03f:	jne    9ff6 <dct_chroma4x4+0xf6>
    a041:	lea    rbp,[r10+0x3438]
    a048:	mov    r8d,DWORD PTR [rax+0xc]
    a04c:	mov    ecx,DWORD PTR [rax]
    a04e:	add    rax,0x40
    a052:	mov    r12d,DWORD PTR [rax-0x38]
    a056:	lea    r9d,[rcx+r8*1]
    a05a:	sub    ecx,r8d
    a05d:	mov    r8d,DWORD PTR [rax-0x3c]
    a061:	lea    r11d,[r8+r12*1]
    a065:	sub    r8d,r12d
    a068:	lea    r12d,[r9+r11*1]
    a06c:	sub    r9d,r11d
    a06f:	mov    DWORD PTR [rax-0x38],r9d
    a073:	lea    r9d,[r8+rcx*2]
    a077:	add    r8d,r8d
    a07a:	sub    ecx,r8d
    a07d:	mov    DWORD PTR [rax-0x40],r12d
    a081:	mov    DWORD PTR [rax-0x3c],r9d
    a085:	mov    DWORD PTR [rax-0x34],ecx
    a088:	cmp    rbp,rax
    a08b:	jne    a048 <dct_chroma4x4+0x148>
    a08d:	lea    eax,[rdi*4+0x4]
    a094:	mov    r9d,edx
    a097:	sub    esi,eax
    a099:	shr    r9d,0x1f
    a09d:	mov    edi,esi
    a09f:	mov    esi,DWORD PTR [r10+0x3338]
    a0a6:	mov    r12d,edi
    a0a9:	mov    ecx,esi
    a0ab:	shr    r12d,0x1f
    a0af:	sar    ecx,0x1f
    a0b2:	add    r12d,edi
    a0b5:	mov    eax,ecx
    a0b7:	and    r12d,0xfffffffe
    a0bb:	xor    eax,esi
    a0bd:	sub    eax,ecx
    a0bf:	mov    ecx,edi
    a0c1:	shr    ecx,0x1f
    a0c4:	lea    r8d,[rdi+rcx*1]
    a0c8:	and    r8d,0x1
    a0cc:	sub    r8d,ecx
    a0cf:	lea    ecx,[rdx+r9*1]
    a0d3:	add    edx,r9d
    a0d6:	and    ecx,0x1
    a0d9:	sar    edx,1
    a0db:	sub    ecx,r9d
    a0de:	add    r12d,edx
    a0e1:	cmp    BYTE PTR [rsp+0x7],0x0
    a0e6:	lea    ebp,[rcx+r8*2]
    a0ea:	je     a1b0 <dct_chroma4x4+0x2b0>
    a0f0:	movsxd rdx,DWORD PTR [rsp+0x38]
    a0f5:	lea    rcx,[rbx+rbx*2]
    a0f9:	movsxd rbp,ebp
    a0fc:	movsxd r12,r12d
    a0ff:	lea    r15,[rdx+rcx*2]
    a103:	lea    rdx,[rip+0xce3b6]        # d84c0 <LevelScale4x4Chroma_Intra>
    a10a:	shl    r15,0x6
    a10e:	lea    rcx,[rbx+rcx*4]
    a112:	imul   eax,DWORD PTR [rdx+r15*1]
    a117:	movsxd rdx,r14d
    a11a:	add    rdx,rcx
    a11d:	lea    rcx,[rip+0xd281c]        # dc940 <LevelOffset4x4Chroma_Intra>
    a124:	shl    rdx,0x6
    a128:	add    eax,DWORD PTR [rcx+rdx*1]
    a12b:	movzx  ecx,BYTE PTR [rsp+0x1c]
    a130:	mov    r13d,eax
    a133:	sar    r13d,cl
    a136:	mov    edi,r13d
    a139:	call   465a0 <sign>
    a13e:	cmp    DWORD PTR [rsp+0x3c],0x17
    a143:	mov    r8d,eax
    a146:	lea    rax,[rbp+rbx*4+0x0]
    a14b:	lea    rdx,[r12+rax*4]
    a14f:	lea    rax,[rip+0x96c2a]        # a0d80 <dc_level_temp>
    a156:	mov    DWORD PTR [rax+rdx*4],r8d
    a15a:	jg     a651 <dct_chroma4x4+0x751>
    a160:	mov    rbp,QWORD PTR [rip+0x7e449]        # 885b0 <img>
    a167:	lea    rax,[rip+0xce7d2]        # d8940 <InvLevelScale4x4Chroma_Intra>
    a16e:	mov    esi,DWORD PTR [rbp+0x3338]
    a174:	imul   r13d,DWORD PTR [rax+r15*1]
    a179:	mov    ecx,0x3
    a17e:	mov    edi,0x1
    a183:	sub    ecx,r14d
    a186:	shl    edi,cl
    a188:	mov    ecx,0x4
    a18d:	sub    ecx,r14d
    a190:	add    edi,r13d
    a193:	sar    edi,cl
    a195:	call   465a0 <sign>
    a19a:	xor    r8d,r8d
    a19d:	mov    DWORD PTR [rbp+0x3338],eax
    a1a3:	jmp    a31f <dct_chroma4x4+0x41f>
    a1a8:	nop    DWORD PTR [rax+rax*1+0x0]
    a1b0:	movsxd rdx,DWORD PTR [rsp+0x38]
    a1b5:	lea    rcx,[rbx+rbx*2]
    a1b9:	movsxd rbp,ebp
    a1bc:	movsxd r12,r12d
    a1bf:	lea    r15,[rdx+rcx*2]
    a1c3:	lea    rdx,[rip+0xcf536]        # d9700 <LevelScale4x4Chroma_Inter>
    a1ca:	shl    r15,0x6
    a1ce:	lea    rcx,[rbx+rcx*4]
    a1d2:	imul   eax,DWORD PTR [rdx+r15*1]
    a1d7:	movsxd rdx,r14d
    a1da:	add    rdx,rcx
    a1dd:	lea    rcx,[rip+0xd0f7c]        # db160 <LevelOffset4x4Chroma_Inter>
    a1e4:	shl    rdx,0x6
    a1e8:	add    eax,DWORD PTR [rcx+rdx*1]
    a1eb:	movzx  ecx,BYTE PTR [rsp+0x1c]
    a1f0:	mov    r13d,eax
    a1f3:	sar    r13d,cl
    a1f6:	mov    edi,r13d
    a1f9:	call   465a0 <sign>
    a1fe:	cmp    DWORD PTR [rsp+0x3c],0x17
    a203:	mov    r8d,eax
    a206:	lea    rax,[rbp+rbx*4+0x0]
    a20b:	lea    rdx,[r12+rax*4]
    a20f:	lea    rax,[rip+0x96b6a]        # a0d80 <dc_level_temp>
    a216:	mov    DWORD PTR [rax+rdx*4],r8d
    a21a:	jg     a686 <dct_chroma4x4+0x786>
    a220:	mov    rbp,QWORD PTR [rip+0x7e389]        # 885b0 <img>
    a227:	lea    rax,[rip+0xcf7d2]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    a22e:	mov    esi,DWORD PTR [rbp+0x3338]
    a234:	jmp    a174 <dct_chroma4x4+0x274>
    a239:	nop    DWORD PTR [rax+0x0]
    a240:	test   eax,eax
    a242:	js     a24f <dct_chroma4x4+0x34f>
    a244:	lea    rcx,[rip+0x607f5]        # 6aa40 <QP_SCALE_CR>
    a24b:	movzx  eax,BYTE PTR [rcx+rax*1]
    a24f:	lea    ecx,[rax+r9*1]
    a253:	mov    r9d,DWORD PTR [r10+0x3338]
    a25a:	mov    DWORD PTR [rsp+0x18],r8d
    a25f:	movsxd r14,ecx
    a262:	mov    eax,ecx
    a264:	mov    DWORD PTR [rsp+0x3c],ecx
    a268:	imul   r14,r14,0x2aaaaaab
    a26f:	sar    eax,0x1f
    a272:	shr    r14,0x20
    a276:	sub    r14d,eax
    a279:	lea    eax,[r14+r14*2]
    a27d:	add    eax,eax
    a27f:	sub    ecx,eax
    a281:	lea    eax,[r14+0xf]
    a285:	mov    DWORD PTR [rsp+0x1c],eax
    a289:	mov    eax,r9d
    a28c:	sar    eax,0x1f
    a28f:	mov    DWORD PTR [rsp+0x38],ecx
    a293:	mov    r13d,eax
    a296:	xor    r13d,r9d
    a299:	sub    r13d,eax
    a29c:	lea    eax,[rdi*4+0x4]
    a2a3:	mov    edi,edx
    a2a5:	sub    esi,eax
    a2a7:	shr    edi,0x1f
    a2aa:	mov    eax,esi
    a2ac:	mov    r12d,esi
    a2af:	shr    eax,0x1f
    a2b2:	shr    r12d,0x1f
    a2b6:	lea    ecx,[rsi+rax*1]
    a2b9:	add    r12d,esi
    a2bc:	mov    esi,r9d
    a2bf:	and    ecx,0x1
    a2c2:	and    r12d,0xfffffffe
    a2c6:	sub    ecx,eax
    a2c8:	lea    eax,[rdx+rdi*1]
    a2cb:	add    edx,edi
    a2cd:	and    eax,0x1
    a2d0:	sar    edx,1
    a2d2:	sub    eax,edi
    a2d4:	mov    edi,r13d
    a2d7:	add    r12d,edx
    a2da:	lea    ebp,[rax+rcx*2]
    a2dd:	movsxd r12,r12d
    a2e0:	call   465a0 <sign>
    a2e5:	movsxd rbp,ebp
    a2e8:	mov    edi,r13d
    a2eb:	mov    r9d,eax
    a2ee:	lea    rax,[rbp+rbx*4+0x0]
    a2f3:	mov    rbp,QWORD PTR [rip+0x7e2b6]        # 885b0 <img>
    a2fa:	lea    rdx,[r12+rax*4]
    a2fe:	lea    rax,[rip+0x96a7b]        # a0d80 <dc_level_temp>
    a305:	mov    esi,DWORD PTR [rbp+0x3338]
    a30b:	mov    DWORD PTR [rax+rdx*4],r9d
    a30f:	call   465a0 <sign>
    a314:	mov    r8d,DWORD PTR [rsp+0x18]
    a319:	mov    DWORD PTR [rbp+0x3338],eax
    a31f:	mov    ecx,0x3
    a324:	mov    eax,0x1
    a329:	xor    r10d,r10d
    a32c:	xor    r13d,r13d
    a32f:	sub    ecx,r14d
    a332:	mov    edi,0x1
    a337:	mov    DWORD PTR [rsp+0x18],r14d
    a33c:	lea    r12,[rip+0x606e1]        # 6aa24 <SNGL_SCAN+0x4>
    a343:	shl    eax,cl
    a345:	mov    DWORD PTR [rsp+0x30],0x0
    a34d:	mov    edx,0xffffffff
    a352:	mov    r14d,r8d
    a355:	mov    DWORD PTR [rsp+0x5c],eax
    a359:	lea    rax,[rbx+rbx*2]
    a35d:	mov    QWORD PTR [rsp+0x8],rax
    a362:	lea    rax,[rbx+rax*4]
    a366:	mov    QWORD PTR [rsp+0x20],rax
    a36b:	mov    eax,edi
    a36d:	jmp    a3ec <dct_chroma4x4+0x4ec>
    a36f:	nop
    a370:	test   esi,esi
    a372:	je     a3cd <dct_chroma4x4+0x4cd>
    a374:	or     al,r10b
    a377:	je     a6d8 <dct_chroma4x4+0x7d8>
    a37d:	mov    rax,QWORD PTR [rsp+0x10]
    a382:	movsxd rbx,r13d
    a385:	mov    edi,ebp
    a387:	mov    DWORD PTR [rsp+0x40],edx
    a38b:	mov    QWORD PTR [rsp+0x30],rcx
    a390:	add    r13d,0x1
    a394:	lea    r15,[rax+rbx*4]
    a398:	call   465a0 <sign>
    a39d:	mov    edx,DWORD PTR [rsp+0x40]
    a3a1:	mov    rcx,QWORD PTR [rsp+0x30]
    a3a6:	mov    edi,ebp
    a3a8:	mov    DWORD PTR [r15],eax
    a3ab:	mov    rax,QWORD PTR [rsp+0x28]
    a3b0:	mov    DWORD PTR [rax+rbx*4],edx
    a3b3:	mov    rax,QWORD PTR [rip+0x7e1f6]        # 885b0 <img>
    a3ba:	mov    esi,DWORD PTR [rax+rcx*4+0x8]
    a3be:	call   465a0 <sign>
    a3c3:	mov    DWORD PTR [rsp+0x30],r14d
    a3c8:	mov    edx,0xffffffff
    a3cd:	lea    rax,[rip+0x6066c]        # 6aa40 <QP_SCALE_CR>
    a3d4:	cmp    rax,r12
    a3d7:	je     a567 <dct_chroma4x4+0x667>
    a3dd:	movzx  eax,BYTE PTR [r12]
    a3e2:	movzx  r10d,BYTE PTR [r12+0x1]
    a3e8:	add    r12,0x2
    a3ec:	movzx  ebx,al
    a3ef:	mov    r9,QWORD PTR [rip+0x7e1ba]        # 885b0 <img>
    a3f6:	movzx  r15d,r10b
    a3fa:	add    edx,0x1
    a3fd:	mov    rcx,rbx
    a400:	shl    rcx,0x4
    a404:	lea    rcx,[rcx+r15*1+0xccc]
    a40c:	mov    esi,DWORD PTR [r9+rcx*4+0x8]
    a411:	mov    edi,esi
    a413:	sar    edi,0x1f
    a416:	mov    ebp,edi
    a418:	xor    ebp,esi
    a41a:	sub    ebp,edi
    a41c:	test   r14d,r14d
    a41f:	jne    a370 <dct_chroma4x4+0x470>
    a425:	mov    rdi,QWORD PTR [rsp+0x8]
    a42a:	movsxd r11,DWORD PTR [rsp+0x38]
    a42f:	cmp    BYTE PTR [rsp+0x7],0x0
    a434:	lea    rcx,[r11+rdi*2]
    a438:	lea    rcx,[rbx+rcx*4]
    a43c:	lea    rdi,[r15+rcx*4]
    a440:	je     a6a0 <dct_chroma4x4+0x7a0>
    a446:	lea    rcx,[rip+0xce073]        # d84c0 <LevelScale4x4Chroma_Intra>
    a44d:	imul   ebp,DWORD PTR [rcx+rdi*4]
    a451:	movsxd rcx,DWORD PTR [rsp+0x18]
    a456:	add    rcx,QWORD PTR [rsp+0x20]
    a45b:	lea    rcx,[rbx+rcx*4]
    a45f:	lea    rdi,[r15+rcx*4]
    a463:	lea    rcx,[rip+0xd24d6]        # dc940 <LevelOffset4x4Chroma_Intra>
    a46a:	add    ebp,DWORD PTR [rcx+rdi*4]
    a46d:	movzx  ecx,BYTE PTR [rsp+0x1c]
    a472:	sar    ebp,cl
    a474:	test   ebp,ebp
    a476:	je     a546 <dct_chroma4x4+0x646>
    a47c:	or     al,r10b
    a47f:	je     a768 <dct_chroma4x4+0x868>
    a485:	mov    rax,QWORD PTR [rsp+0x10]
    a48a:	movsxd rcx,r13d
    a48d:	mov    edi,ebp
    a48f:	mov    QWORD PTR [rsp+0x48],r11
    a494:	mov    DWORD PTR [rsp+0x50],edx
    a498:	add    r13d,0x1
    a49c:	lea    r9,[rax+rcx*4]
    a4a0:	mov    QWORD PTR [rsp+0x40],rcx
    a4a5:	mov    QWORD PTR [rsp+0x30],r9
    a4aa:	call   465a0 <sign>
    a4af:	mov    r9,QWORD PTR [rsp+0x30]
    a4b4:	mov    edx,DWORD PTR [rsp+0x50]
    a4b8:	mov    edi,ebp
    a4ba:	mov    rcx,QWORD PTR [rsp+0x40]
    a4bf:	mov    DWORD PTR [r9],eax
    a4c2:	mov    rax,QWORD PTR [rsp+0x28]
    a4c7:	mov    DWORD PTR [rax+rcx*4],edx
    a4ca:	mov    rax,rbx
    a4cd:	shl    rax,0x4
    a4d1:	lea    rdx,[rax+r15*1+0xccc]
    a4d9:	mov    rax,QWORD PTR [rip+0x7e0d0]        # 885b0 <img>
    a4e0:	mov    esi,DWORD PTR [rax+rdx*4+0x8]
    a4e4:	call   465a0 <sign>
    a4e9:	mov    DWORD PTR [rsp+0x30],0x1
    a4f1:	mov    r11,QWORD PTR [rsp+0x48]
    a4f6:	cmp    DWORD PTR [rsp+0x3c],0x17
    a4fb:	mov    r9,QWORD PTR [rip+0x7e0ae]        # 885b0 <img>
    a502:	jg     a728 <dct_chroma4x4+0x828>
    a508:	mov    ecx,0x4
    a50d:	sub    ecx,DWORD PTR [rsp+0x18]
    a511:	cmp    BYTE PTR [rsp+0x7],0x0
    a516:	je     a810 <dct_chroma4x4+0x910>
    a51c:	mov    rdx,QWORD PTR [rsp+0x8]
    a521:	lea    rdx,[r11+rdx*2]
    a525:	lea    rdx,[rbx+rdx*4]
    a529:	lea    rsi,[r15+rdx*4]
    a52d:	lea    rdx,[rip+0xce40c]        # d8940 <InvLevelScale4x4Chroma_Intra>
    a534:	imul   eax,DWORD PTR [rdx+rsi*4]
    a538:	mov    edx,DWORD PTR [rsp+0x5c]
    a53c:	lea    ebp,[rax+rdx*1]
    a53f:	mov    edx,0xffffffff
    a544:	sar    ebp,cl
    a546:	shl    rbx,0x4
    a54a:	lea    rax,[rbx+r15*1+0xccc]
    a552:	mov    DWORD PTR [r9+rax*4+0x8],ebp
    a557:	lea    rax,[rip+0x604e2]        # 6aa40 <QP_SCALE_CR>
    a55e:	cmp    rax,r12
    a561:	jne    a3dd <dct_chroma4x4+0x4dd>
    a567:	mov    rax,QWORD PTR [rsp+0x10]
    a56c:	movsxd r13,r13d
    a56f:	mov    DWORD PTR [rax+r13*4],0x0
    a577:	test   r14d,r14d
    a57a:	jne    a63e <dct_chroma4x4+0x73e>
    a580:	mov    r8,QWORD PTR [rip+0x7e029]        # 885b0 <img>
    a587:	lea    rdx,[r8+0x3338]
    a58e:	lea    r10,[r8+0x3348]
    a595:	mov    rax,rdx
    a598:	mov    r11d,DWORD PTR [rax+0x40]
    a59c:	mov    edi,DWORD PTR [rax+0x80]
    a5a2:	add    rax,0x4
    a5a6:	mov    ecx,DWORD PTR [rax-0x4]
    a5a9:	mov    esi,DWORD PTR [rax+0xbc]
    a5af:	lea    r9d,[rdi+rcx*1]
    a5b3:	sub    ecx,edi
    a5b5:	mov    edi,r11d
    a5b8:	sar    edi,1
    a5ba:	sub    edi,esi
    a5bc:	sar    esi,1
    a5be:	add    esi,r11d
    a5c1:	lea    r11d,[r9+rsi*1]
    a5c5:	sub    r9d,esi
    a5c8:	lea    esi,[rcx+rdi*1]
    a5cb:	sub    ecx,edi
    a5cd:	mov    DWORD PTR [rax-0x4],r11d
    a5d1:	mov    DWORD PTR [rax+0xbc],r9d
    a5d8:	mov    DWORD PTR [rax+0x3c],esi
    a5db:	mov    DWORD PTR [rax+0x7c],ecx
    a5de:	cmp    r10,rax
    a5e1:	jne    a598 <dct_chroma4x4+0x698>
    a5e3:	add    r8,0x3438
    a5ea:	mov    r9d,DWORD PTR [rdx+0x4]
    a5ee:	mov    edi,DWORD PTR [rdx+0x8]
    a5f1:	add    rdx,0x40
    a5f5:	mov    eax,DWORD PTR [rdx-0x40]
    a5f8:	mov    esi,DWORD PTR [rdx-0x34]
    a5fb:	lea    ecx,[rdi+rax*1]
    a5fe:	sub    eax,edi
    a600:	mov    edi,r9d
    a603:	sar    edi,1
    a605:	sub    edi,esi
    a607:	sar    esi,1
    a609:	add    esi,r9d
    a60c:	lea    r9d,[rcx+rsi*1+0x20]
    a611:	sub    ecx,esi
    a613:	add    ecx,0x20
    a616:	sar    r9d,0x6
    a61a:	sar    ecx,0x6
    a61d:	mov    DWORD PTR [rdx-0x40],r9d
    a621:	mov    DWORD PTR [rdx-0x34],ecx
    a624:	lea    ecx,[rax+rdi*1+0x20]
    a628:	sub    eax,edi
    a62a:	add    eax,0x20
    a62d:	sar    ecx,0x6
    a630:	sar    eax,0x6
    a633:	mov    DWORD PTR [rdx-0x3c],ecx
    a636:	mov    DWORD PTR [rdx-0x38],eax
    a639:	cmp    rdx,r8
    a63c:	jne    a5ea <dct_chroma4x4+0x6ea>
    a63e:	mov    eax,DWORD PTR [rsp+0x30]
    a642:	add    rsp,0x68
    a646:	pop    rbx
    a647:	pop    rbp
    a648:	pop    r12
    a64a:	pop    r13
    a64c:	pop    r14
    a64e:	pop    r15
    a650:	ret    
    a651:	mov    rbp,QWORD PTR [rip+0x7df58]        # 885b0 <img>
    a658:	lea    rax,[rip+0xce2e1]        # d8940 <InvLevelScale4x4Chroma_Intra>
    a65f:	mov    esi,DWORD PTR [rbp+0x3338]
    a665:	imul   r13d,DWORD PTR [rax+r15*1]
    a66a:	lea    ecx,[r14-0x4]
    a66e:	mov    edi,r13d
    a671:	shl    edi,cl
    a673:	call   465a0 <sign>
    a678:	xor    r8d,r8d
    a67b:	mov    DWORD PTR [rbp+0x3338],eax
    a681:	jmp    a31f <dct_chroma4x4+0x41f>
    a686:	mov    rbp,QWORD PTR [rip+0x7df23]        # 885b0 <img>
    a68d:	lea    rax,[rip+0xcf36c]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    a694:	mov    esi,DWORD PTR [rbp+0x3338]
    a69a:	jmp    a665 <dct_chroma4x4+0x765>
    a69c:	nop    DWORD PTR [rax+0x0]
    a6a0:	lea    rcx,[rip+0xcf059]        # d9700 <LevelScale4x4Chroma_Inter>
    a6a7:	imul   ebp,DWORD PTR [rcx+rdi*4]
    a6ab:	movsxd rcx,DWORD PTR [rsp+0x18]
    a6b0:	add    rcx,QWORD PTR [rsp+0x20]
    a6b5:	lea    rcx,[rbx+rcx*4]
    a6b9:	lea    rdi,[r15+rcx*4]
    a6bd:	lea    rcx,[rip+0xd0a9c]        # db160 <LevelOffset4x4Chroma_Inter>
    a6c4:	add    ebp,DWORD PTR [rcx+rdi*4]
    a6c7:	movzx  ecx,BYTE PTR [rsp+0x1c]
    a6cc:	sar    ebp,cl
    a6ce:	jmp    a474 <dct_chroma4x4+0x574>
    a6d3:	nop    DWORD PTR [rax+rax*1+0x0]
    a6d8:	mov    rax,QWORD PTR [rsp+0x10]
    a6dd:	movsxd rbx,r13d
    a6e0:	mov    edi,ebp
    a6e2:	mov    DWORD PTR [rsp+0x48],edx
    a6e6:	mov    QWORD PTR [rsp+0x40],rcx
    a6eb:	add    r13d,0x1
    a6ef:	lea    r15,[rax+rbx*4]
    a6f3:	call   465a0 <sign>
    a6f8:	mov    edx,DWORD PTR [rsp+0x48]
    a6fc:	mov    rcx,QWORD PTR [rsp+0x40]
    a701:	mov    edi,ebp
    a703:	mov    DWORD PTR [r15],eax
    a706:	mov    rax,QWORD PTR [rsp+0x28]
    a70b:	mov    DWORD PTR [rax+rbx*4],edx
    a70e:	mov    rax,QWORD PTR [rip+0x7de9b]        # 885b0 <img>
    a715:	mov    esi,DWORD PTR [rax+rcx*4+0x8]
    a719:	call   465a0 <sign>
    a71e:	jmp    a3c8 <dct_chroma4x4+0x4c8>
    a723:	nop    DWORD PTR [rax+rax*1+0x0]
    a728:	mov    edx,DWORD PTR [rsp+0x18]
    a72c:	cmp    BYTE PTR [rsp+0x7],0x0
    a731:	lea    ecx,[rdx-0x4]
    a734:	je     a7e0 <dct_chroma4x4+0x8e0>
    a73a:	mov    rsi,QWORD PTR [rsp+0x8]
    a73f:	lea    rdx,[r11+rsi*2]
    a743:	lea    rdx,[rbx+rdx*4]
    a747:	lea    rsi,[r15+rdx*4]
    a74b:	lea    rdx,[rip+0xce1ee]        # d8940 <InvLevelScale4x4Chroma_Intra>
    a752:	imul   eax,DWORD PTR [rdx+rsi*4]
    a756:	mov    edx,0xffffffff
    a75b:	mov    ebp,eax
    a75d:	shl    ebp,cl
    a75f:	jmp    a546 <dct_chroma4x4+0x646>
    a764:	nop    DWORD PTR [rax+0x0]
    a768:	mov    rax,QWORD PTR [rsp+0x10]
    a76d:	movsxd rcx,r13d
    a770:	mov    edi,ebp
    a772:	mov    QWORD PTR [rsp+0x50],r11
    a777:	mov    DWORD PTR [rsp+0x58],edx
    a77b:	add    r13d,0x1
    a77f:	lea    r9,[rax+rcx*4]
    a783:	mov    QWORD PTR [rsp+0x48],rcx
    a788:	mov    QWORD PTR [rsp+0x40],r9
    a78d:	call   465a0 <sign>
    a792:	mov    r9,QWORD PTR [rsp+0x40]
    a797:	mov    edx,DWORD PTR [rsp+0x58]
    a79b:	mov    edi,ebp
    a79d:	mov    rcx,QWORD PTR [rsp+0x48]
    a7a2:	mov    DWORD PTR [r9],eax
    a7a5:	mov    rax,QWORD PTR [rsp+0x28]
    a7aa:	mov    DWORD PTR [rax+rcx*4],edx
    a7ad:	mov    rax,rbx
    a7b0:	shl    rax,0x4
    a7b4:	lea    rdx,[rax+r15*1+0xccc]
    a7bc:	mov    rax,QWORD PTR [rip+0x7dded]        # 885b0 <img>
    a7c3:	mov    esi,DWORD PTR [rax+rdx*4+0x8]
    a7c7:	call   465a0 <sign>
    a7cc:	mov    r11,QWORD PTR [rsp+0x50]
    a7d1:	jmp    a4f6 <dct_chroma4x4+0x5f6>
    a7d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a7e0:	mov    rdx,QWORD PTR [rsp+0x8]
    a7e5:	lea    rdx,[r11+rdx*2]
    a7e9:	lea    rdx,[rbx+rdx*4]
    a7ed:	lea    rsi,[r15+rdx*4]
    a7f1:	lea    rdx,[rip+0xcf208]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    a7f8:	imul   eax,DWORD PTR [rdx+rsi*4]
    a7fc:	mov    edx,0xffffffff
    a801:	mov    ebp,eax
    a803:	shl    ebp,cl
    a805:	jmp    a546 <dct_chroma4x4+0x646>
    a80a:	nop    WORD PTR [rax+rax*1+0x0]
    a810:	mov    rsi,QWORD PTR [rsp+0x8]
    a815:	lea    rdx,[r11+rsi*2]
    a819:	lea    rdx,[rbx+rdx*4]
    a81d:	lea    rsi,[r15+rdx*4]
    a821:	lea    rdx,[rip+0xcf1d8]        # d9a00 <InvLevelScale4x4Chroma_Inter>
    a828:	jmp    a534 <dct_chroma4x4+0x634>
    a82d:	nop    DWORD PTR [rax]

000000000000a830 <dct_chroma_DC>:
    a830:	endbr64 
    a834:	push   r15
    a836:	movsxd r15,edi
    a839:	lea    rdx,[rip+0xa9980]        # b41c0 <dc_level>
    a840:	push   r14
    a842:	push   r13
    a844:	xor    r13d,r13d
    a847:	push   r12
    a849:	mov    r12d,esi
    a84c:	xor    esi,esi
    a84e:	push   rbp
    a84f:	mov    ebp,0xffffffff
    a854:	push   rbx
    a855:	lea    rbx,[rip+0x601c6]        # 6aa22 <SNGL_SCAN+0x2>
    a85c:	lea    rcx,[rbx+0x1e]
    a860:	sub    rsp,0x28
    a864:	mov    rax,QWORD PTR [rip+0x7dd45]        # 885b0 <img>
    a86b:	mov    rax,QWORD PTR [rax+0x3740]
    a872:	mov    rax,QWORD PTR [rax+r15*8+0x8]
    a877:	shl    r15,0x2
    a87b:	mov    r14,QWORD PTR [rax]
    a87e:	mov    rax,QWORD PTR [rax+0x8]
    a882:	mov    QWORD PTR [rsp+0x18],rax
    a887:	xor    eax,eax
    a889:	jmp    a8a4 <dct_chroma_DC+0x74>
    a88b:	nop    DWORD PTR [rax+rax*1+0x0]
    a890:	cmp    rcx,rbx
    a893:	je     a92d <dct_chroma_DC+0xfd>
    a899:	movzx  eax,BYTE PTR [rbx]
    a89c:	movzx  esi,BYTE PTR [rbx+0x1]
    a8a0:	add    rbx,0x2
    a8a4:	add    rax,r15
    a8a7:	movsxd r10,r13d
    a8aa:	add    ebp,0x1
    a8ad:	lea    rax,[rsi+rax*4]
    a8b1:	lea    r9,[r10*4+0x0]
    a8b9:	mov    esi,DWORD PTR [rdx+rax*4]
    a8bc:	lea    r11,[r14+r9*1]
    a8c0:	test   esi,esi
    a8c2:	je     a890 <dct_chroma_DC+0x60>
    a8c4:	test   r12d,r12d
    a8c7:	mov    eax,0x1
    a8cc:	mov    QWORD PTR [rsp+0x10],r10
    a8d1:	cmovle r12d,eax
    a8d5:	mov    eax,esi
    a8d7:	mov    QWORD PTR [rsp+0x8],r11
    a8dc:	add    r13d,0x1
    a8e0:	sar    eax,0x1f
    a8e3:	mov    QWORD PTR [rsp],r9
    a8e7:	mov    edi,eax
    a8e9:	xor    edi,esi
    a8eb:	sub    edi,eax
    a8ed:	call   465a0 <sign>
    a8f2:	mov    r11,QWORD PTR [rsp+0x8]
    a8f7:	mov    r9,QWORD PTR [rsp]
    a8fb:	lea    rcx,[rip+0x6013e]        # 6aa40 <QP_SCALE_CR>
    a902:	mov    r10,QWORD PTR [rsp+0x10]
    a907:	lea    rdx,[rip+0xa98b2]        # b41c0 <dc_level>
    a90e:	mov    DWORD PTR [r11],eax
    a911:	mov    rax,QWORD PTR [rsp+0x18]
    a916:	lea    r11,[r14+r9*1+0x4]
    a91b:	mov    DWORD PTR [rax+r10*4],ebp
    a91f:	mov    ebp,0xffffffff
    a924:	cmp    rcx,rbx
    a927:	jne    a899 <dct_chroma_DC+0x69>
    a92d:	mov    DWORD PTR [r11],0x0
    a934:	add    rsp,0x28
    a938:	mov    eax,r12d
    a93b:	pop    rbx
    a93c:	pop    rbp
    a93d:	pop    r12
    a93f:	pop    r13
    a941:	pop    r14
    a943:	pop    r15
    a945:	ret    
    a946:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000a950 <dct_luma_sp>:
    a950:	endbr64 
    a954:	push   r15
    a956:	mov    r15d,edi
    a959:	lea    r9d,[rsi+0x3]
    a95d:	pxor   xmm1,xmm1
    a961:	push   r14
    a963:	mov    r14d,esi
    a966:	push   r13
    a968:	push   r12
    a96a:	push   rbp
    a96b:	push   rbx
    a96c:	sub    rsp,0x108
    a973:	movsd  xmm0,QWORD PTR [rip+0x60105]        # 6aa80 <QP_SCALE_CR+0x40>
    a97b:	mov    DWORD PTR [rsp+0x98],edi
    a982:	add    edi,0x3
    a985:	mov    DWORD PTR [rsp+0x9c],esi
    a98c:	mov    QWORD PTR [rsp+0x50],rdx
    a991:	mov    rax,QWORD PTR fs:0x28
    a99a:	mov    QWORD PTR [rsp+0xf8],rax
    a9a2:	xor    eax,eax
    a9a4:	test   r15d,r15d
    a9a7:	cmovns edi,r15d
    a9ab:	mov    edx,edi
    a9ad:	sar    edx,0x2
    a9b0:	test   esi,esi
    a9b2:	cmovns r9d,esi
    a9b6:	mov    rsi,QWORD PTR [rip+0x7dbf3]        # 885b0 <img>
    a9bd:	mov    ecx,r9d
    a9c0:	mov    eax,r9d
    a9c3:	shr    r9d,0x1f
    a9c7:	sar    ecx,0x2
    a9ca:	shr    eax,0x1f
    a9cd:	add    eax,ecx
    a9cf:	add    ecx,r9d
    a9d2:	and    eax,0xfffffffe
    a9d5:	and    ecx,0x1
    a9d8:	mov    r8d,eax
    a9db:	mov    eax,edi
    a9dd:	shr    edi,0x1f
    a9e0:	sub    ecx,r9d
    a9e3:	shr    eax,0x1f
    a9e6:	add    eax,edx
    a9e8:	add    edx,edi
    a9ea:	sar    eax,1
    a9ec:	and    edx,0x1
    a9ef:	add    eax,r8d
    a9f2:	mov    r8,QWORD PTR [rsi+0x3738]
    a9f9:	sub    edx,edi
    a9fb:	cdqe   
    a9fd:	lea    edx,[rdx+rcx*2]
    aa00:	mov    rax,QWORD PTR [r8+rax*8]
    aa04:	movsxd rdx,edx
    aa07:	mov    rax,QWORD PTR [rax+rdx*8]
    aa0b:	mov    rbx,QWORD PTR [rax]
    aa0e:	mov    rax,QWORD PTR [rax+0x8]
    aa12:	mov    QWORD PTR [rsp+0x58],rbx
    aa17:	movsxd rbx,DWORD PTR [rsi+0xc]
    aa1b:	mov    QWORD PTR [rsp+0x68],rax
    aa20:	imul   rbx,rbx,0x278
    aa27:	add    rbx,QWORD PTR [rsi+0x3758]
    aa2e:	mov    eax,DWORD PTR [rbx+0xc]
    aa31:	sub    eax,0xc
    aa34:	cvtsi2sd xmm1,eax
    aa38:	divsd  xmm1,QWORD PTR [rip+0x60038]        # 6aa78 <QP_SCALE_CR+0x38>
    aa40:	call   4360 <pow@plt>
    aa45:	movsxd rax,DWORD PTR [rbx+0xc]
    aa49:	mulsd  xmm0,QWORD PTR [rip+0x60037]        # 6aa88 <QP_SCALE_CR+0x48>
    aa51:	lea    r11,[rsp+0xc0]
    aa59:	mulsd  xmm0,QWORD PTR [rip+0x6002f]        # 6aa90 <QP_SCALE_CR+0x50>
    aa61:	mov    r13,rax
    aa64:	imul   rax,rax,0x2aaaaaab
    aa6b:	mov    edx,r13d
    aa6e:	sar    edx,0x1f
    aa71:	shr    rax,0x20
    aa75:	mov    esi,eax
    aa77:	movsd  QWORD PTR [rsp+0x70],xmm0
    aa7d:	sub    esi,edx
    aa7f:	lea    eax,[rsi+rsi*2]
    aa82:	mov    DWORD PTR [rsp+0x60],esi
    aa86:	add    esi,0xf
    aa89:	add    eax,eax
    aa8b:	mov    ecx,esi
    aa8d:	mov    DWORD PTR [rsp+0x44],esi
    aa91:	sub    r13d,eax
    aa94:	movsxd rax,DWORD PTR [rbx+0x10]
    aa98:	mov    r12,rax
    aa9b:	imul   rax,rax,0x2aaaaaab
    aaa2:	mov    edx,r12d
    aaa5:	sar    edx,0x1f
    aaa8:	shr    rax,0x20
    aaac:	mov    ebx,eax
    aaae:	sub    ebx,edx
    aab0:	lea    eax,[rbx+rbx*2]
    aab3:	mov    DWORD PTR [rsp+0x48],ebx
    aab7:	add    eax,eax
    aab9:	sub    r12d,eax
    aabc:	mov    eax,0x1
    aac1:	add    ebx,0xf
    aac4:	mov    edi,eax
    aac6:	mov    DWORD PTR [rsp+0x1c],ebx
    aaca:	shl    edi,cl
    aacc:	movsxd rdx,edi
    aacf:	mov    rcx,rdx
    aad2:	imul   rdx,rdx,0x2aaaaaab
    aad9:	sar    ecx,0x1f
    aadc:	shr    rdx,0x20
    aae0:	mov    esi,edx
    aae2:	sub    esi,ecx
    aae4:	mov    ecx,ebx
    aae6:	shl    eax,cl
    aae8:	mov    DWORD PTR [rsp+0x4c],esi
    aaec:	mov    rsi,QWORD PTR [rip+0x7dabd]        # 885b0 <img>
    aaf3:	mov    edx,eax
    aaf5:	shr    edx,0x1f
    aaf8:	lea    r9,[rsi+0x100]
    aaff:	add    eax,edx
    ab01:	movsxd rdx,r14d
    ab04:	sar    eax,1
    ab06:	mov    DWORD PTR [rsp+0x28],eax
    ab0a:	movsxd rax,r15d
    ab0d:	shl    rax,0x4
    ab11:	add    rax,rdx
    ab14:	lea    rbx,[rsi+rax*2]
    ab18:	lea    rax,[rsp+0xb0]
    ab20:	mov    r10,rax
    ab23:	lea    rdx,[r9-0x100]
    ab2a:	mov    rdi,r10
    ab2d:	mov    rcx,rbx
    ab30:	movzx  r8d,WORD PTR [rcx+0x3138]
    ab38:	add    rdi,0x10
    ab3c:	add    rcx,0x20
    ab40:	add    DWORD PTR [rdx+0x3338],r8d
    ab47:	add    rdx,0x40
    ab4b:	mov    DWORD PTR [rdi-0x10],r8d
    ab4f:	cmp    rdx,r9
    ab52:	jne    ab30 <dct_luma_sp+0x1e0>
    ab54:	add    r10,0x4
    ab58:	add    rbx,0x2
    ab5c:	lea    r9,[rdx+0x4]
    ab60:	cmp    r10,r11
    ab63:	jne    ab23 <dct_luma_sp+0x1d3>
    ab65:	lea    rdx,[rsi+0x3338]
    ab6c:	lea    rbx,[rsi+0x3348]
    ab73:	mov    rcx,rdx
    ab76:	mov    r8d,DWORD PTR [rcx+0xc0]
    ab7d:	mov    edi,DWORD PTR [rcx]
    ab7f:	add    rcx,0x4
    ab83:	mov    ebp,DWORD PTR [rcx+0x7c]
    ab86:	lea    r9d,[rdi+r8*1]
    ab8a:	sub    edi,r8d
    ab8d:	mov    r8d,DWORD PTR [rcx+0x3c]
    ab91:	lea    r10d,[r8+rbp*1]
    ab95:	sub    r8d,ebp
    ab98:	lea    ebp,[r9+r10*1]
    ab9c:	sub    r9d,r10d
    ab9f:	mov    DWORD PTR [rcx+0x7c],r9d
    aba3:	lea    r9d,[r8+rdi*2]
    aba7:	add    r8d,r8d
    abaa:	sub    edi,r8d
    abad:	mov    DWORD PTR [rcx-0x4],ebp
    abb0:	mov    DWORD PTR [rcx+0x3c],r9d
    abb4:	mov    DWORD PTR [rcx+0xbc],edi
    abba:	cmp    rbx,rcx
    abbd:	jne    ab76 <dct_luma_sp+0x226>
    abbf:	lea    r10,[rsi+0x3438]
    abc6:	mov    edi,DWORD PTR [rdx+0xc]
    abc9:	mov    ecx,DWORD PTR [rdx]
    abcb:	add    rdx,0x40
    abcf:	mov    ebx,DWORD PTR [rdx-0x38]
    abd2:	lea    r8d,[rcx+rdi*1]
    abd6:	sub    ecx,edi
    abd8:	mov    edi,DWORD PTR [rdx-0x3c]
    abdb:	lea    r9d,[rdi+rbx*1]
    abdf:	sub    edi,ebx
    abe1:	lea    ebx,[r8+r9*1]
    abe5:	sub    r8d,r9d
    abe8:	mov    DWORD PTR [rdx-0x38],r8d
    abec:	lea    r8d,[rdi+rcx*2]
    abf0:	add    edi,edi
    abf2:	sub    ecx,edi
    abf4:	mov    DWORD PTR [rdx-0x40],ebx
    abf7:	mov    DWORD PTR [rdx-0x3c],r8d
    abfb:	mov    DWORD PTR [rdx-0x34],ecx
    abfe:	cmp    rdx,r10
    ac01:	jne    abc6 <dct_luma_sp+0x276>
    ac03:	mov    rdx,rax
    ac06:	mov    edi,DWORD PTR [rdx+0x30]
    ac09:	mov    ecx,DWORD PTR [rdx]
    ac0b:	add    rdx,0x4
    ac0f:	mov    r10d,DWORD PTR [rdx+0x1c]
    ac13:	lea    r8d,[rcx+rdi*1]
    ac17:	sub    ecx,edi
    ac19:	mov    edi,DWORD PTR [rdx+0xc]
    ac1c:	lea    r9d,[rdi+r10*1]
    ac20:	sub    edi,r10d
    ac23:	lea    r10d,[r8+r9*1]
    ac27:	sub    r8d,r9d
    ac2a:	mov    DWORD PTR [rdx+0x1c],r8d
    ac2e:	lea    r8d,[rdi+rcx*2]
    ac32:	add    edi,edi
    ac34:	sub    ecx,edi
    ac36:	mov    DWORD PTR [rdx-0x4],r10d
    ac3a:	mov    DWORD PTR [rdx+0xc],r8d
    ac3e:	mov    DWORD PTR [rdx+0x2c],ecx
    ac41:	cmp    rdx,r11
    ac44:	jne    ac06 <dct_luma_sp+0x2b6>
    ac46:	lea    r9,[rax+0x40]
    ac4a:	mov    ecx,DWORD PTR [rax+0xc]
    ac4d:	mov    edx,DWORD PTR [rax]
    ac4f:	add    rax,0x10
    ac53:	mov    r10d,DWORD PTR [rax-0x8]
    ac57:	lea    edi,[rdx+rcx*1]
    ac5a:	sub    edx,ecx
    ac5c:	mov    ecx,DWORD PTR [rax-0xc]
    ac5f:	lea    r8d,[rcx+r10*1]
    ac63:	sub    ecx,r10d
    ac66:	lea    r10d,[rdi+r8*1]
    ac6a:	sub    edi,r8d
    ac6d:	mov    DWORD PTR [rax-0x8],edi
    ac70:	lea    edi,[rcx+rdx*2]
    ac73:	add    ecx,ecx
    ac75:	sub    edx,ecx
    ac77:	mov    DWORD PTR [rax-0x10],r10d
    ac7b:	mov    DWORD PTR [rax-0xc],edi
    ac7e:	mov    DWORD PTR [rax-0x4],edx
    ac81:	cmp    r9,rax
    ac84:	jne    ac4a <dct_luma_sp+0x2fa>
    ac86:	lea    rax,[rip+0x5fd74]        # 6aa01 <FIELD_SCAN+0x1>
    ac8d:	movsxd r12,r12d
    ac90:	movsxd r13,r13d
    ac93:	mov    r15d,0xffffffff
    ac99:	mov    QWORD PTR [rsp],rax
    ac9d:	lea    rax,[rip+0x5fd7d]        # 6aa21 <SNGL_SCAN+0x1>
    aca4:	mov    QWORD PTR [rsp+0x30],rax
    aca9:	lea    rax,[r12*4+0x0]
    acb1:	mov    QWORD PTR [rsp+0x8],rax
    acb6:	lea    rax,[r13*4+0x0]
    acbe:	mov    DWORD PTR [rsp+0x64],0x0
    acc6:	mov    DWORD PTR [rsp+0x40],0x0
    acce:	mov    QWORD PTR [rsp+0x20],rax
    acd3:	mov    DWORD PTR [rsp+0x18],r15d
    acd8:	jmp    ae62 <dct_luma_sp+0x512>
    acdd:	nop    DWORD PTR [rax]
    ace0:	mov    edx,DWORD PTR [rip+0x9612a]        # a0e10 <mb_adaptive>
    ace6:	test   edx,edx
    ace8:	je     acf8 <dct_luma_sp+0x3a8>
    acea:	mov    eax,DWORD PTR [rsi+0x11948]
    acf0:	test   eax,eax
    acf2:	jne    ae70 <dct_luma_sp+0x520>
    acf8:	mov    rax,QWORD PTR [rsp+0x30]
    acfd:	movzx  ebx,BYTE PTR [rax-0x1]
    ad01:	movzx  r14d,BYTE PTR [rax]
    ad05:	lea    rax,[r14+rbx*4]
    ad09:	lea    r13,[rip+0x5f790]        # 6a4a0 <quant_coef>
    ad10:	mov    edx,DWORD PTR [rsp+0x1c]
    ad14:	add    DWORD PTR [rsp+0x18],0x1
    ad19:	mov    r15d,DWORD PTR [rsp+rax*4+0xb0]
    ad21:	mov    QWORD PTR [rsp+0x38],rax
    ad26:	mov    rax,QWORD PTR [rsp+0x8]
    ad2b:	mov    ecx,edx
    ad2d:	mov    rdx,rbx
    ad30:	shl    rdx,0x4
    ad34:	add    rax,rbx
    ad37:	lea    r10,[rdx+r14*1+0xccc]
    ad3f:	lea    rax,[r14+rax*4]
    ad43:	mov    r12d,DWORD PTR [rsi+r10*4+0x8]
    ad48:	mov    esi,r15d
    ad4b:	mov    QWORD PTR [rsp+0x10],r10
    ad50:	mov    edi,DWORD PTR [r13+rax*4+0x0]
    ad55:	mov    eax,r15d
    ad58:	sar    eax,0x1f
    ad5b:	mov    ebp,eax
    ad5d:	mov    DWORD PTR [rsp+0x2c],edi
    ad61:	xor    ebp,r15d
    ad64:	sub    ebp,eax
    ad66:	imul   ebp,edi
    ad69:	add    ebp,DWORD PTR [rsp+0x28]
    ad6d:	sar    ebp,cl
    ad6f:	mov    eax,ebp
    ad71:	shl    eax,cl
    ad73:	cdq    
    ad74:	idiv   edi
    ad76:	mov    edi,eax
    ad78:	call   465a0 <sign>
    ad7d:	mov    r9d,r12d
    ad80:	mov    esi,DWORD PTR [rsp+0x4c]
    ad84:	mov    edi,DWORD PTR [rsp+0x44]
    ad88:	sub    r9d,eax
    ad8b:	mov    rax,QWORD PTR [rsp+0x20]
    ad90:	mov    r10,QWORD PTR [rsp+0x10]
    ad95:	mov    edx,r9d
    ad98:	mov    ecx,edi
    ad9a:	add    rax,rbx
    ad9d:	sar    edx,0x1f
    ada0:	lea    r11,[r14+rax*4]
    ada4:	mov    eax,DWORD PTR [r13+r11*4+0x0]
    ada9:	mov    r13d,edx
    adac:	xor    r13d,r9d
    adaf:	sub    r13d,edx
    adb2:	mov    rdx,QWORD PTR [rip+0x7d7f7]        # 885b0 <img>
    adb9:	imul   r13d,eax
    adbd:	mov    edx,DWORD PTR [rdx+r10*4+0x8]
    adc2:	mov    r8d,edx
    adc5:	add    r13d,esi
    adc8:	sub    r8d,r15d
    adcb:	sar    r13d,cl
    adce:	mov    ecx,r8d
    add1:	sar    ecx,0x1f
    add4:	mov    r12d,ecx
    add7:	xor    r12d,r8d
    adda:	sub    r12d,ecx
    addd:	mov    ecx,edi
    addf:	imul   r12d,eax
    ade3:	add    r12d,esi
    ade6:	sar    r12d,cl
    ade9:	cmp    r13d,r12d
    adec:	je     aea0 <dct_luma_sp+0x550>
    adf2:	test   r13d,r13d
    adf5:	je     ae88 <dct_luma_sp+0x538>
    adfb:	test   r12d,r12d
    adfe:	jne    afa0 <dct_luma_sp+0x650>
    ae04:	mov    esi,r15d
    ae07:	mov    edi,ebp
    ae09:	call   465a0 <sign>
    ae0e:	mov    rdx,rbx
    ae11:	add    rbx,QWORD PTR [rsp+0x8]
    ae16:	mov    rsi,QWORD PTR [rip+0x7d793]        # 885b0 <img>
    ae1d:	lea    rcx,[r14+rbx*4]
    ae21:	shl    rdx,0x4
    ae25:	lea    rbx,[rip+0x5f4f4]        # 6a320 <dequant_coef>
    ae2c:	add    QWORD PTR [rsp],0x2
    ae31:	imul   eax,DWORD PTR [rbx+rcx*4]
    ae35:	movzx  ecx,BYTE PTR [rsp+0x48]
    ae3a:	lea    rdx,[rdx+r14*1+0xccc]
    ae42:	lea    rbx,[rip+0x5fbd8]        # 6aa21 <SNGL_SCAN+0x1>
    ae49:	add    QWORD PTR [rsp+0x30],0x2
    ae4f:	shl    eax,cl
    ae51:	mov    DWORD PTR [rsi+rdx*4+0x8],eax
    ae55:	mov    rax,QWORD PTR [rsp]
    ae59:	cmp    rbx,rax
    ae5c:	je     b160 <dct_luma_sp+0x810>
    ae62:	mov    ecx,DWORD PTR [rsi+0x11afc]
    ae68:	test   ecx,ecx
    ae6a:	je     ace0 <dct_luma_sp+0x390>
    ae70:	mov    rax,QWORD PTR [rsp]
    ae74:	movzx  ebx,BYTE PTR [rax-0x1]
    ae78:	movzx  r14d,BYTE PTR [rax]
    ae7c:	jmp    ad05 <dct_luma_sp+0x3b5>
    ae81:	nop    DWORD PTR [rax+0x0]
    ae88:	cmp    r13d,r12d
    ae8b:	je     aea0 <dct_luma_sp+0x550>
    ae8d:	test   r13d,r13d
    ae90:	je     ae04 <dct_luma_sp+0x4b4>
    ae96:	mov    r9d,r8d
    ae99:	nop    DWORD PTR [rax+0x0]
    aea0:	test   r12d,r12d
    aea3:	je     ae04 <dct_luma_sp+0x4b4>
    aea9:	mov    rax,QWORD PTR [rsp+0x50]
    aeae:	mov    eax,DWORD PTR [rax]
    aeb0:	cmp    r12d,0x1
    aeb4:	jle    af70 <dct_luma_sp+0x620>
    aeba:	add    eax,0xf423f
    aebf:	mov    rsi,QWORD PTR [rsp+0x50]
    aec4:	movsxd rbp,DWORD PTR [rsp+0x40]
    aec9:	mov    edi,r12d
    aecc:	mov    DWORD PTR [rsp+0x10],r9d
    aed1:	mov    DWORD PTR [rsi],eax
    aed3:	mov    rsi,QWORD PTR [rsp+0x58]
    aed8:	lea    r13,[rsi+rbp*4]
    aedc:	mov    esi,r9d
    aedf:	call   465a0 <sign>
    aee4:	mov    rsi,QWORD PTR [rsp+0x68]
    aee9:	mov    ecx,DWORD PTR [rsp+0x18]
    aeed:	mov    edi,r12d
    aef0:	mov    DWORD PTR [r13+0x0],eax
    aef4:	mov    r9d,DWORD PTR [rsp+0x10]
    aef9:	mov    DWORD PTR [rsi+rbp*4],ecx
    aefc:	mov    esi,r9d
    aeff:	add    DWORD PTR [rsp+0x40],0x1
    af04:	call   465a0 <sign>
    af09:	mov    rsi,QWORD PTR [rsp+0x20]
    af0e:	movzx  ecx,BYTE PTR [rsp+0x60]
    af13:	mov    DWORD PTR [rsp+0x64],0x1
    af1b:	mov    DWORD PTR [rsp+0x18],0xffffffff
    af23:	lea    rdx,[rsi+rbx*1]
    af27:	lea    rsi,[rip+0x5f3f2]        # 6a320 <dequant_coef>
    af2e:	lea    rdx,[r14+rdx*4]
    af32:	imul   eax,DWORD PTR [rsi+rdx*4]
    af36:	lea    rdx,[r14+rbx*4]
    af3a:	lea    rsi,[rip+0x5f39f]        # 6a2e0 <A>
    af41:	imul   eax,DWORD PTR [rsi+rdx*4]
    af45:	shl    eax,cl
    af47:	movzx  ecx,BYTE PTR [rsp+0x1c]
    af4c:	sar    eax,0x6
    af4f:	add    r15d,eax
    af52:	mov    eax,r15d
    af55:	sar    eax,0x1f
    af58:	mov    ebp,eax
    af5a:	xor    ebp,r15d
    af5d:	sub    ebp,eax
    af5f:	imul   ebp,DWORD PTR [rsp+0x2c]
    af64:	add    ebp,DWORD PTR [rsp+0x28]
    af68:	sar    ebp,cl
    af6a:	jmp    ae04 <dct_luma_sp+0x4b4>
    af6f:	nop
    af70:	mov    rdx,QWORD PTR [rip+0x7d641]        # 885b8 <input>
    af77:	movsxd rcx,DWORD PTR [rsp+0x18]
    af7c:	lea    rsi,[rip+0x5fa5d]        # 6a9e0 <COEFF_COST>
    af83:	movsxd rdx,DWORD PTR [rdx+0x9a4]
    af8a:	shl    rdx,0x4
    af8e:	add    rdx,rsi
    af91:	movzx  edx,BYTE PTR [rdx+rcx*1]
    af95:	add    eax,edx
    af97:	jmp    aebf <dct_luma_sp+0x56f>
    af9c:	nop    DWORD PTR [rax+0x0]
    afa0:	mov    esi,r9d
    afa3:	mov    edi,r13d
    afa6:	mov    DWORD PTR [rsp+0x8c],r9d
    afae:	mov    QWORD PTR [rsp+0x90],r10
    afb6:	mov    DWORD PTR [rsp+0x64],r8d
    afbb:	mov    QWORD PTR [rsp+0x78],r11
    afc0:	mov    DWORD PTR [rsp+0x10],edx
    afc4:	call   465a0 <sign>
    afc9:	mov    edx,DWORD PTR [rsp+0x10]
    afcd:	pxor   xmm0,xmm0
    afd1:	mov    edi,r13d
    afd4:	mov    r11,QWORD PTR [rsp+0x78]
    afd9:	lea    rsi,[rip+0x5f340]        # 6a320 <dequant_coef>
    afe0:	mov    rcx,QWORD PTR [rsp+0x38]
    afe5:	mov    r11d,DWORD PTR [rsi+r11*4]
    afe9:	lea    rsi,[rip+0x5f2f0]        # 6a2e0 <A>
    aff0:	mov    ebp,DWORD PTR [rsi+rcx*4]
    aff3:	movzx  ecx,BYTE PTR [rsp+0x60]
    aff8:	imul   eax,r11d
    affc:	mov    esi,DWORD PTR [rsp+0x18]
    b000:	mov    DWORD PTR [rsp+0x88],r11d
    b008:	imul   eax,ebp
    b00b:	shl    eax,cl
    b00d:	sar    eax,0x6
    b010:	sub    edx,eax
    b012:	lea    rax,[rsp+0xac]
    b01a:	sub    edx,r15d
    b01d:	mov    rcx,rax
    b020:	mov    QWORD PTR [rsp+0x38],rax
    b025:	cvtsi2sd xmm0,edx
    b029:	lea    rdx,[rsp+0xa8]
    b031:	mov    QWORD PTR [rsp+0x80],rdx
    b039:	movsd  QWORD PTR [rsp+0x10],xmm0
    b03f:	call   66560 <levrun_linfo_inter>
    b044:	movsd  xmm0,QWORD PTR [rsp+0x10]
    b04a:	pxor   xmm1,xmm1
    b04e:	mov    r10,QWORD PTR [rsp+0x90]
    b056:	cvtsi2sd xmm1,DWORD PTR [rsp+0xa8]
    b05f:	mulsd  xmm1,QWORD PTR [rsp+0x70]
    b065:	mov    r8d,DWORD PTR [rsp+0x64]
    b06a:	mulsd  xmm0,xmm0
    b06e:	mov    rax,QWORD PTR [rip+0x7d53b]        # 885b0 <img>
    b075:	mov    esi,r8d
    b078:	mov    edi,DWORD PTR [rax+r10*4+0x8]
    b07d:	mov    DWORD PTR [rsp+0x10],edi
    b081:	mov    edi,r12d
    b084:	addsd  xmm0,xmm1
    b088:	movsd  QWORD PTR [rsp+0x78],xmm0
    b08e:	call   465a0 <sign>
    b093:	pxor   xmm1,xmm1
    b097:	mov    esi,DWORD PTR [rsp+0x18]
    b09b:	mov    edi,r12d
    b09e:	mov    r11d,DWORD PTR [rsp+0x88]
    b0a6:	movzx  ecx,BYTE PTR [rsp+0x60]
    b0ab:	mov    rdx,QWORD PTR [rsp+0x80]
    b0b3:	imul   r11d,eax
    b0b7:	imul   r11d,ebp
    b0bb:	mov    ebp,DWORD PTR [rsp+0x10]
    b0bf:	shl    r11d,cl
    b0c2:	mov    rcx,QWORD PTR [rsp+0x38]
    b0c7:	sar    r11d,0x6
    b0cb:	sub    ebp,r11d
    b0ce:	sub    ebp,r15d
    b0d1:	cvtsi2sd xmm1,ebp
    b0d5:	movsd  QWORD PTR [rsp+0x10],xmm1
    b0db:	call   66560 <levrun_linfo_inter>
    b0e0:	movsd  xmm1,QWORD PTR [rsp+0x10]
    b0e6:	pxor   xmm2,xmm2
    b0ea:	movsd  xmm0,QWORD PTR [rsp+0x78]
    b0f0:	cvtsi2sd xmm2,DWORD PTR [rsp+0xa8]
    b0f9:	mulsd  xmm2,QWORD PTR [rsp+0x70]
    b0ff:	mov    r8d,DWORD PTR [rsp+0x64]
    b104:	mulsd  xmm1,xmm1
    b108:	mov    r9d,DWORD PTR [rsp+0x8c]
    b110:	addsd  xmm1,xmm2
    b114:	ucomisd xmm0,xmm1
    b118:	jp     b148 <dct_luma_sp+0x7f8>
    b11a:	jne    b148 <dct_luma_sp+0x7f8>
    b11c:	mov    eax,r13d
    b11f:	mov    ecx,r12d
    b122:	sar    eax,0x1f
    b125:	sar    ecx,0x1f
    b128:	mov    edx,eax
    b12a:	xor    edx,r13d
    b12d:	sub    edx,eax
    b12f:	mov    eax,ecx
    b131:	xor    eax,r12d
    b134:	sub    eax,ecx
    b136:	cmp    edx,eax
    b138:	cmovl  r12d,r13d
    b13c:	cmovge r9d,r8d
    b140:	jmp    aea9 <dct_luma_sp+0x559>
    b145:	nop    DWORD PTR [rax]
    b148:	comisd xmm1,xmm0
    b14c:	cmovbe r9d,r8d
    b150:	cmova  r12d,r13d
    b154:	jmp    aea9 <dct_luma_sp+0x559>
    b159:	nop    DWORD PTR [rax+0x0]
    b160:	movsxd rax,DWORD PTR [rsp+0x40]
    b165:	mov    rbx,QWORD PTR [rsp+0x58]
    b16a:	lea    rcx,[rsi+0x3338]
    b171:	lea    r10,[rsi+0x3348]
    b178:	mov    DWORD PTR [rbx+rax*4],0x0
    b17f:	mov    rax,rcx
    b182:	mov    r11d,DWORD PTR [rax+0x40]
    b186:	mov    edx,DWORD PTR [rax]
    b188:	add    rax,0x4
    b18c:	mov    r8d,DWORD PTR [rax+0x7c]
    b190:	mov    edi,DWORD PTR [rax+0xbc]
    b196:	lea    r9d,[r8+rdx*1]
    b19a:	sub    edx,r8d
    b19d:	mov    r8d,r11d
    b1a0:	sar    r8d,1
    b1a3:	sub    r8d,edi
    b1a6:	sar    edi,1
    b1a8:	add    edi,r11d
    b1ab:	lea    r11d,[r9+rdi*1]
    b1af:	sub    r9d,edi
    b1b2:	lea    edi,[rdx+r8*1]
    b1b6:	sub    edx,r8d
    b1b9:	mov    DWORD PTR [rax-0x4],r11d
    b1bd:	mov    DWORD PTR [rax+0xbc],r9d
    b1c4:	mov    DWORD PTR [rax+0x3c],edi
    b1c7:	mov    DWORD PTR [rax+0x7c],edx
    b1ca:	cmp    r10,rax
    b1cd:	jne    b182 <dct_luma_sp+0x832>
    b1cf:	mov    edi,DWORD PTR [rsi+0x11bec]
    b1d5:	lea    r9,[rsi+0x3438]
    b1dc:	xor    r8d,r8d
    b1df:	mov    r11d,DWORD PTR [rcx+0x4]
    b1e3:	mov    r10d,DWORD PTR [rcx+0x8]
    b1e7:	mov    eax,DWORD PTR [rcx]
    b1e9:	mov    ebx,DWORD PTR [rcx+0xc]
    b1ec:	lea    edx,[r10+rax*1]
    b1f0:	sub    eax,r10d
    b1f3:	mov    r10d,r11d
    b1f6:	sar    r10d,1
    b1f9:	sub    r10d,ebx
    b1fc:	sar    ebx,1
    b1fe:	add    ebx,r11d
    b201:	lea    r11d,[rdx+rbx*1+0x20]
    b206:	sar    r11d,0x6
    b20a:	cmovs  r11d,r8d
    b20e:	cmp    r11d,edi
    b211:	cmovg  r11d,edi
    b215:	sub    edx,ebx
    b217:	add    edx,0x20
    b21a:	sar    edx,0x6
    b21d:	mov    DWORD PTR [rcx],r11d
    b220:	cmovs  edx,r8d
    b224:	cmp    edx,edi
    b226:	cmovg  edx,edi
    b229:	mov    DWORD PTR [rcx+0xc],edx
    b22c:	lea    edx,[rax+r10*1+0x20]
    b231:	sar    edx,0x6
    b234:	cmovs  edx,r8d
    b238:	cmp    edx,edi
    b23a:	cmovg  edx,edi
    b23d:	sub    eax,r10d
    b240:	add    eax,0x20
    b243:	sar    eax,0x6
    b246:	mov    DWORD PTR [rcx+0x4],edx
    b249:	cmovs  eax,r8d
    b24d:	cmp    eax,edi
    b24f:	cmovg  eax,edi
    b252:	add    rcx,0x40
    b256:	mov    DWORD PTR [rcx-0x38],eax
    b259:	cmp    r9,rcx
    b25c:	jne    b1df <dct_luma_sp+0x88f>
    b25e:	mov    rdx,QWORD PTR [rip+0x7f743]        # 8a9a8 <enc_picture>
    b265:	mov    eax,DWORD PTR [rsp+0x9c]
    b26c:	lea    rdi,[rsi+0x100]
    b273:	lea    r9,[rsi+0x110]
    b27a:	add    eax,DWORD PTR [rsi+0x9c]
    b280:	mov    rdx,QWORD PTR [rdx+0x1918]
    b287:	cdqe   
    b289:	lea    r8,[rdx+rax*8]
    b28d:	mov    eax,DWORD PTR [rsp+0x98]
    b294:	add    eax,DWORD PTR [rsi+0x98]
    b29a:	movsxd rsi,eax
    b29d:	add    rsi,rsi
    b2a0:	mov    rdx,QWORD PTR [r8]
    b2a3:	lea    rax,[rdi-0x100]
    b2aa:	add    rdx,rsi
    b2ad:	mov    ecx,DWORD PTR [rax+0x3338]
    b2b3:	add    rax,0x40
    b2b7:	add    rdx,0x2
    b2bb:	mov    WORD PTR [rdx-0x2],cx
    b2bf:	cmp    rax,rdi
    b2c2:	jne    b2ad <dct_luma_sp+0x95d>
    b2c4:	lea    rdi,[rax+0x4]
    b2c8:	add    r8,0x8
    b2cc:	cmp    r9,rdi
    b2cf:	jne    b2a0 <dct_luma_sp+0x950>
    b2d1:	mov    rax,QWORD PTR [rsp+0xf8]
    b2d9:	xor    rax,QWORD PTR fs:0x28
    b2e2:	jne    b2fa <dct_luma_sp+0x9aa>
    b2e4:	mov    eax,DWORD PTR [rsp+0x64]
    b2e8:	add    rsp,0x108
    b2ef:	pop    rbx
    b2f0:	pop    rbp
    b2f1:	pop    r12
    b2f3:	pop    r13
    b2f5:	pop    r14
    b2f7:	pop    r15
    b2f9:	ret    
    b2fa:	call   4390 <__stack_chk_fail@plt>
    b2ff:	nop

000000000000b300 <dct_chroma_sp>:
    b300:	endbr64 
    b304:	push   r15
    b306:	pxor   xmm1,xmm1
    b30a:	push   r14
    b30c:	push   r13
    b30e:	push   r12
    b310:	push   rbp
    b311:	push   rbx
    b312:	sub    rsp,0x268
    b319:	mov    rdx,QWORD PTR [rip+0x7d290]        # 885b0 <img>
    b320:	movsd  xmm0,QWORD PTR [rip+0x5f758]        # 6aa80 <QP_SCALE_CR+0x40>
    b328:	mov    DWORD PTR [rsp+0x48],edi
    b32c:	mov    DWORD PTR [rsp+0xd8],esi
    b333:	mov    rbx,QWORD PTR [rdx+0x3758]
    b33a:	mov    rax,QWORD PTR fs:0x28
    b343:	mov    QWORD PTR [rsp+0x258],rax
    b34b:	xor    eax,eax
    b34d:	movsxd rax,DWORD PTR [rdx+0xc]
    b351:	mov    rdx,QWORD PTR [rdx+0x3740]
    b358:	imul   rax,rax,0x278
    b35f:	add    rbx,rax
    b362:	movsxd rax,edi
    b365:	add    rax,0x1
    b369:	mov    QWORD PTR [rsp+0x90],rbx
    b371:	lea    rsi,[rax*8+0x0]
    b379:	mov    rax,QWORD PTR [rdx+rax*8]
    b37d:	mov    QWORD PTR [rsp+0x108],rsi
    b385:	mov    rsi,QWORD PTR [rax]
    b388:	mov    rax,QWORD PTR [rax+0x8]
    b38c:	mov    QWORD PTR [rsp+0x80],rax
    b394:	mov    eax,DWORD PTR [rbx+0xc]
    b397:	mov    QWORD PTR [rsp+0x58],rsi
    b39c:	mov    DWORD PTR [rsp],eax
    b39f:	sub    eax,0xc
    b3a2:	cvtsi2sd xmm1,eax
    b3a6:	divsd  xmm1,QWORD PTR [rip+0x5f6ca]        # 6aa78 <QP_SCALE_CR+0x38>
    b3ae:	call   4360 <pow@plt>
    b3b3:	mov    rax,QWORD PTR [rip+0x95a46]        # a0e00 <active_pps>
    b3ba:	mov    edx,DWORD PTR [rbx+0xc]
    b3bd:	mov    r9d,0x33
    b3c3:	lea    rdi,[rip+0x5f676]        # 6aa40 <QP_SCALE_CR>
    b3ca:	mov    esi,0xaaaaaaab
    b3cf:	mov    eax,DWORD PTR [rax+0xd0]
    b3d5:	mulsd  xmm0,QWORD PTR [rip+0x5f6ab]        # 6aa88 <QP_SCALE_CR+0x48>
    b3dd:	mulsd  xmm0,QWORD PTR [rip+0x5f6ab]        # 6aa90 <QP_SCALE_CR+0x50>
    b3e5:	add    edx,eax
    b3e7:	cmp    edx,0x33
    b3ea:	cmovg  edx,r9d
    b3ee:	xor    r8d,r8d
    b3f1:	movsd  QWORD PTR [rsp+0x98],xmm0
    b3fa:	test   edx,edx
    b3fc:	cmovs  edx,r8d
    b400:	add    eax,DWORD PTR [rbx+0x10]
    b403:	movsxd rdx,edx
    b406:	movzx  edx,BYTE PTR [rdi+rdx*1]
    b40a:	mov    rcx,rdx
    b40d:	imul   rdx,rsi
    b411:	shr    rdx,0x22
    b415:	mov    r14,rdx
    b418:	mov    DWORD PTR [rsp+0xc8],edx
    b41f:	lea    edx,[rdx+rdx*2]
    b422:	add    edx,edx
    b424:	sub    ecx,edx
    b426:	mov    edx,0x1
    b42b:	mov    r10d,edx
    b42e:	mov    DWORD PTR [rsp+0x38],ecx
    b432:	lea    ecx,[r14+0xf]
    b436:	shl    r10d,cl
    b439:	mov    DWORD PTR [rsp+0x6c],ecx
    b43d:	movsxd rcx,r10d
    b440:	sar    r10d,0x1f
    b444:	imul   rcx,rcx,0x2aaaaaab
    b44b:	shr    rcx,0x20
    b44f:	sub    ecx,r10d
    b452:	cmp    eax,0x33
    b455:	cmovg  eax,r9d
    b459:	mov    DWORD PTR [rsp+0x68],ecx
    b45d:	test   eax,eax
    b45f:	cmovs  eax,r8d
    b463:	lea    r8,[rsp+0x170]
    b46b:	cdqe   
    b46d:	movzx  eax,BYTE PTR [rdi+rax*1]
    b471:	imul   rsi,rax
    b475:	mov    rcx,rax
    b478:	shr    rsi,0x22
    b47c:	lea    eax,[rsi+rsi*2]
    b47f:	mov    DWORD PTR [rsp+0x64],esi
    b483:	add    eax,eax
    b485:	sub    ecx,eax
    b487:	lea    eax,[rsi+0xf]
    b48a:	lea    rsi,[rsp+0x150]
    b492:	mov    DWORD PTR [rsp+0x30],ecx
    b496:	mov    ecx,eax
    b498:	shl    edx,cl
    b49a:	mov    DWORD PTR [rsp+0x60],eax
    b49e:	mov    eax,edx
    b4a0:	mov    QWORD PTR [rsp+0x10],rsi
    b4a5:	shr    eax,0x1f
    b4a8:	add    edx,eax
    b4aa:	mov    rax,QWORD PTR [rip+0x7d0ff]        # 885b0 <img>
    b4b1:	sar    edx,1
    b4b3:	mov    DWORD PTR [rsp+0x44],edx
    b4b7:	mov    rcx,rax
    b4ba:	mov    rdi,rax
    b4bd:	mov    QWORD PTR [rsp+0x20],rax
    b4c2:	nop    WORD PTR [rax+rax*1+0x0]
    b4c8:	xor    eax,eax
    b4ca:	nop    WORD PTR [rax+rax*1+0x0]
    b4d0:	movzx  edx,WORD PTR [rdi+rax*1+0x3138]
    b4d8:	add    DWORD PTR [rcx+rax*2+0x3338],edx
    b4df:	mov    DWORD PTR [rsi+rax*1],edx
    b4e2:	add    rax,0x20
    b4e6:	cmp    rax,0x100
    b4ec:	jne    b4d0 <dct_chroma_sp+0x1d0>
    b4ee:	add    rsi,0x4
    b4f2:	add    rcx,0x4
    b4f6:	add    rdi,0x2
    b4fa:	cmp    rsi,r8
    b4fd:	jne    b4c8 <dct_chroma_sp+0x1c8>
    b4ff:	mov    rax,QWORD PTR [rsp+0x20]
    b504:	mov    QWORD PTR [rsp],0x0
    b50c:	add    rax,0x100
    b512:	mov    QWORD PTR [rsp+0x8],rax
    b517:	mov    r8,QWORD PTR [rsp+0x8]
    b51c:	mov    r11d,0x80
    b522:	xor    ebx,ebx
    b524:	xor    ebp,ebp
    b526:	mov    r10d,0x40
    b52c:	mov    r9d,0xc0
    b532:	lea    rsi,[r8-0x100]
    b539:	lea    r13,[r8-0xf0]
    b540:	mov    r12,rsi
    b543:	lea    rcx,[r12+rbx*1]
    b547:	mov    eax,DWORD PTR [r12+0x3338]
    b54f:	add    r12,0x4
    b553:	mov    edx,DWORD PTR [rcx+r9*1+0x3338]
    b55b:	mov    r15d,DWORD PTR [rcx+r11*1+0x3338]
    b563:	lea    edi,[rax+rdx*1]
    b566:	sub    eax,edx
    b568:	mov    edx,DWORD PTR [rcx+r10*1+0x3338]
    b570:	lea    r14d,[rdx+r15*1]
    b574:	sub    edx,r15d
    b577:	lea    r15d,[rdi+r14*1]
    b57b:	sub    edi,r14d
    b57e:	mov    DWORD PTR [r12+0x3334],r15d
    b586:	mov    DWORD PTR [rcx+r11*1+0x3338],edi
    b58e:	lea    edi,[rdx+rax*2]
    b591:	add    edx,edx
    b593:	sub    eax,edx
    b595:	mov    DWORD PTR [rcx+r10*1+0x3338],edi
    b59d:	mov    DWORD PTR [rcx+r9*1+0x3338],eax
    b5a5:	cmp    r12,r13
    b5a8:	jne    b543 <dct_chroma_sp+0x243>
    b5aa:	lea    r13,[r8-0xf4]
    b5b1:	lea    r12,[r8-0xfc]
    b5b8:	lea    rdi,[r8-0xf8]
    b5bf:	add    rsi,0x40
    b5c3:	add    r13,0x40
    b5c7:	add    r12,0x40
    b5cb:	add    rdi,0x40
    b5cf:	mov    edx,DWORD PTR [r13+0x32f8]
    b5d6:	mov    eax,DWORD PTR [rsi+0x32f8]
    b5dc:	mov    r15d,DWORD PTR [rdi+0x32f8]
    b5e3:	lea    ecx,[rax+rdx*1]
    b5e6:	sub    eax,edx
    b5e8:	mov    edx,DWORD PTR [r12+0x32f8]
    b5f0:	lea    r14d,[rdx+r15*1]
    b5f4:	sub    edx,r15d
    b5f7:	lea    r15d,[rcx+r14*1]
    b5fb:	sub    ecx,r14d
    b5fe:	mov    DWORD PTR [rsi+0x32f8],r15d
    b605:	mov    DWORD PTR [rdi+0x32f8],ecx
    b60b:	lea    ecx,[rdx+rax*2]
    b60e:	add    edx,edx
    b610:	sub    eax,edx
    b612:	mov    DWORD PTR [r12+0x32f8],ecx
    b61a:	mov    DWORD PTR [r13+0x32f8],eax
    b621:	cmp    r8,rsi
    b624:	jne    b5bf <dct_chroma_sp+0x2bf>
    b626:	add    ebp,0x4
    b629:	add    r8,0x100
    b630:	sub    rbx,0x100
    b637:	add    r9,0x100
    b63e:	add    r10,0x100
    b645:	add    r11,0x100
    b64c:	cmp    ebp,0x8
    b64f:	jne    b532 <dct_chroma_sp+0x232>
    b655:	add    QWORD PTR [rsp],0x4
    b65a:	mov    rax,QWORD PTR [rsp]
    b65e:	add    QWORD PTR [rsp+0x8],0x10
    b664:	cmp    rax,0x8
    b668:	jne    b517 <dct_chroma_sp+0x217>
    b66e:	mov    rax,QWORD PTR [rsp+0x10]
    b673:	mov    QWORD PTR [rsp+0x10],0x0
    b67c:	sub    rax,0xffffffffffffff80
    b680:	mov    QWORD PTR [rsp+0x18],rax
    b685:	mov    r12,QWORD PTR [rsp+0x18]
    b68a:	mov    DWORD PTR [rsp],0x0
    b691:	mov    ebp,0x40
    b696:	mov    ebx,0x20
    b69b:	mov    r11d,0x60
    b6a1:	xor    r13d,r13d
    b6a4:	lea    r14,[r12-0x70]
    b6a9:	lea    rdx,[r12-0x80]
    b6ae:	mov    rdi,rdx
    b6b1:	lea    rsi,[rdi+r13*1]
    b6b5:	mov    eax,DWORD PTR [rdi]
    b6b7:	add    rdi,0x4
    b6bb:	mov    ecx,DWORD PTR [rsi+r11*1]
    b6bf:	mov    r9d,DWORD PTR [rsi+rbp*1]
    b6c3:	lea    r8d,[rax+rcx*1]
    b6c7:	sub    eax,ecx
    b6c9:	mov    ecx,DWORD PTR [rsi+rbx*1]
    b6cc:	lea    r10d,[rcx+r9*1]
    b6d0:	sub    ecx,r9d
    b6d3:	lea    r9d,[r8+r10*1]
    b6d7:	sub    r8d,r10d
    b6da:	mov    DWORD PTR [rdi-0x4],r9d
    b6de:	mov    DWORD PTR [rsi+rbp*1],r8d
    b6e2:	lea    r8d,[rcx+rax*2]
    b6e6:	add    ecx,ecx
    b6e8:	sub    eax,ecx
    b6ea:	mov    DWORD PTR [rsi+rbx*1],r8d
    b6ee:	mov    DWORD PTR [rsi+r11*1],eax
    b6f2:	cmp    rdi,r14
    b6f5:	jne    b6b1 <dct_chroma_sp+0x3b1>
    b6f7:	mov    QWORD PTR [rsp+0x8],r11
    b6fc:	lea    rdi,[r12-0x74]
    b701:	lea    rsi,[r12-0x7c]
    b706:	lea    rcx,[r12-0x78]
    b70b:	mov    eax,DWORD PTR [rdi]
    b70d:	mov    r15d,DWORD PTR [rdx]
    b710:	add    rdx,0x20
    b714:	add    rdi,0x20
    b718:	mov    r10d,DWORD PTR [rcx]
    b71b:	add    rsi,0x20
    b71f:	add    rcx,0x20
    b723:	lea    r9d,[r15+rax*1]
    b727:	sub    r15d,eax
    b72a:	mov    eax,DWORD PTR [rsi-0x20]
    b72d:	mov    r11d,r15d
    b730:	lea    r8d,[rax+r10*1]
    b734:	sub    eax,r10d
    b737:	lea    r10d,[r9+r8*1]
    b73b:	mov    DWORD PTR [rdx-0x20],r10d
    b73f:	mov    r10d,r9d
    b742:	sub    r10d,r8d
    b745:	mov    DWORD PTR [rcx-0x20],r10d
    b749:	lea    r10d,[rax+r15*2]
    b74d:	mov    DWORD PTR [rsi-0x20],r10d
    b751:	lea    r10d,[rax+rax*1]
    b755:	sub    r11d,r10d
    b758:	mov    DWORD PTR [rdi-0x20],r11d
    b75c:	cmp    rdx,r12
    b75f:	jne    b70b <dct_chroma_sp+0x40b>
    b761:	add    DWORD PTR [rsp],0x4
    b765:	mov    esi,DWORD PTR [rsp]
    b768:	add    r13,0xffffffffffffff80
    b76c:	sub    rbx,0xffffffffffffff80
    b770:	mov    r11,QWORD PTR [rsp+0x8]
    b775:	lea    r12,[rdx+0x80]
    b77c:	sub    rbp,0xffffffffffffff80
    b780:	sub    r14,0xffffffffffffff80
    b784:	sub    r11,0xffffffffffffff80
    b788:	cmp    esi,0x8
    b78b:	jne    b6a9 <dct_chroma_sp+0x3a9>
    b791:	add    QWORD PTR [rsp+0x10],0x4
    b797:	mov    rsi,QWORD PTR [rsp+0x10]
    b79c:	add    QWORD PTR [rsp+0x18],0x10
    b7a2:	cmp    rsi,0x8
    b7a6:	jne    b685 <dct_chroma_sp+0x385>
    b7ac:	mov    rbx,QWORD PTR [rsp+0x20]
    b7b1:	mov    DWORD PTR [rsp+0x138],eax
    b7b8:	mov    r14d,0xffffffff
    b7be:	mov    DWORD PTR [rsp+0x13c],r15d
    b7c6:	xor    r15d,r15d
    b7c9:	mov    esi,DWORD PTR [rbx+0x3438]
    b7cf:	mov    eax,DWORD PTR [rbx+0x3338]
    b7d5:	mov    DWORD PTR [rsp+0x130],r9d
    b7dd:	mov    ecx,DWORD PTR [rbx+0x3348]
    b7e3:	mov    edi,DWORD PTR [rbx+0x3448]
    b7e9:	mov    DWORD PTR [rsp+0x134],r8d
    b7f1:	lea    rbx,[rsp+0x120]
    b7f9:	lea    edx,[rax+rsi*1]
    b7fc:	sub    eax,esi
    b7fe:	lea    r10d,[rdx+rcx*1]
    b802:	lea    esi,[rcx+rax*1]
    b805:	sub    edx,ecx
    b807:	sub    eax,ecx
    b809:	sub    esi,edi
    b80b:	sub    edx,edi
    b80d:	add    r10d,edi
    b810:	add    edi,eax
    b812:	mov    DWORD PTR [rsp+0x12c],edi
    b819:	mov    eax,DWORD PTR [rsp+0x150]
    b820:	mov    edi,DWORD PTR [rsp+0x1d0]
    b827:	mov    DWORD PTR [rsp+0x124],esi
    b82e:	mov    esi,DWORD PTR [rsp+0x160]
    b835:	mov    ecx,DWORD PTR [rsp+0x1e0]
    b83c:	mov    DWORD PTR [rsp+0x128],edx
    b843:	lea    edx,[rax+rdi*1]
    b846:	sub    eax,edi
    b848:	mov    DWORD PTR [rsp+0x120],r10d
    b850:	lea    r13d,[rdx+rsi*1]
    b854:	lea    edi,[rsi+rax*1]
    b857:	sub    edx,esi
    b859:	sub    eax,esi
    b85b:	sub    edi,ecx
    b85d:	sub    edx,ecx
    b85f:	add    r13d,ecx
    b862:	add    ecx,eax
    b864:	mov    eax,DWORD PTR [rsp+0x44]
    b868:	mov    DWORD PTR [rsp+0x14c],ecx
    b86f:	mov    DWORD PTR [rsp+0x144],edi
    b876:	add    eax,eax
    b878:	mov    DWORD PTR [rsp+0x148],edx
    b87f:	mov    DWORD PTR [rsp+0x8],eax
    b883:	mov    eax,DWORD PTR [rsp+0x68]
    b887:	add    eax,eax
    b889:	mov    DWORD PTR [rsp+0x28],eax
    b88d:	mov    eax,DWORD PTR [rsp+0x48]
    b891:	shl    eax,0x2
    b894:	mov    esi,eax
    b896:	mov    DWORD PTR [rsp+0x88],eax
    b89d:	mov    eax,0xf0000
    b8a2:	mov    ecx,esi
    b8a4:	lea    rsi,[rip+0x5ebf5]        # 6a4a0 <quant_coef>
    b8ab:	shl    eax,cl
    b8ad:	cdqe   
    b8af:	mov    QWORD PTR [rsp+0x78],rax
    b8b4:	movsxd rax,DWORD PTR [rsp+0x30]
    b8b9:	mov    QWORD PTR [rsp+0xf0],rax
    b8c1:	shl    rax,0x6
    b8c5:	mov    esi,DWORD PTR [rsi+rax*1]
    b8c8:	mov    DWORD PTR [rsp+0x10],esi
    b8cc:	mov    esi,DWORD PTR [rsp+0x64]
    b8d0:	add    esi,0x10
    b8d3:	mov    DWORD PTR [rsp+0x18],esi
    b8d7:	mov    esi,DWORD PTR [rsp+0xc8]
    b8de:	mov    QWORD PTR [rsp+0x50],rbx
    b8e3:	lea    rbx,[rsp+0x140]
    b8eb:	add    esi,0x10
    b8ee:	mov    QWORD PTR [rsp+0xf8],rbx
    b8f6:	lea    rbx,[rip+0x5eba3]        # 6a4a0 <quant_coef>
    b8fd:	mov    DWORD PTR [rsp+0x30],esi
    b901:	movsxd rsi,DWORD PTR [rsp+0x38]
    b906:	mov    DWORD PTR [rsp+0x20],0x0
    b90e:	mov    QWORD PTR [rsp+0xe8],rsi
    b916:	shl    rsi,0x6
    b91a:	add    rbx,rsi
    b91d:	mov    QWORD PTR [rsp+0x70],rsi
    b922:	lea    rsi,[rip+0x5e9f7]        # 6a320 <dequant_coef>
    b929:	add    rax,rsi
    b92c:	mov    QWORD PTR [rsp+0x38],rbx
    b931:	mov    QWORD PTR [rsp+0x48],rax
    b936:	mov    eax,r13d
    b939:	mov    esi,DWORD PTR [rsp+0x10]
    b93d:	mov    ebx,DWORD PTR [rsp+0x18]
    b941:	mov    DWORD PTR [rsp],r10d
    b945:	sar    eax,0x1f
    b948:	add    r14d,0x1
    b94c:	mov    ebp,eax
    b94e:	mov    ecx,ebx
    b950:	xor    ebp,r13d
    b953:	sub    ebp,eax
    b955:	imul   ebp,esi
    b958:	add    ebp,DWORD PTR [rsp+0x8]
    b95c:	sar    ebp,cl
    b95e:	mov    eax,ebp
    b960:	shl    eax,cl
    b962:	cdq    
    b963:	idiv   esi
    b965:	mov    esi,r13d
    b968:	mov    edi,eax
    b96a:	call   465a0 <sign>
    b96f:	mov    r10d,DWORD PTR [rsp]
    b973:	mov    esi,DWORD PTR [rsp+0x28]
    b977:	mov    edi,DWORD PTR [rsp+0x30]
    b97b:	mov    r9d,r10d
    b97e:	mov    r8d,r10d
    b981:	sub    r9d,eax
    b984:	sub    r8d,r13d
    b987:	mov    rax,QWORD PTR [rsp+0x38]
    b98c:	mov    ecx,edi
    b98e:	mov    edx,r9d
    b991:	sar    edx,0x1f
    b994:	mov    eax,DWORD PTR [rax]
    b996:	mov    ebx,edx
    b998:	xor    ebx,r9d
    b99b:	sub    ebx,edx
    b99d:	mov    edx,r8d
    b9a0:	sar    edx,0x1f
    b9a3:	imul   ebx,eax
    b9a6:	mov    r12d,edx
    b9a9:	xor    r12d,r8d
    b9ac:	sub    r12d,edx
    b9af:	add    ebx,esi
    b9b1:	imul   r12d,eax
    b9b5:	sar    ebx,cl
    b9b7:	add    r12d,esi
    b9ba:	sar    r12d,cl
    b9bd:	cmp    ebx,r12d
    b9c0:	je     ba20 <dct_chroma_sp+0x720>
    b9c2:	test   ebx,ebx
    b9c4:	je     ba10 <dct_chroma_sp+0x710>
    b9c6:	test   r12d,r12d
    b9c9:	jne    c464 <dct_chroma_sp+0x1164>
    b9cf:	mov    esi,r13d
    b9d2:	mov    edi,ebp
    b9d4:	call   465a0 <sign>
    b9d9:	mov    rsi,QWORD PTR [rsp+0x48]
    b9de:	movzx  ecx,BYTE PTR [rsp+0x64]
    b9e3:	imul   eax,DWORD PTR [rsi]
    b9e6:	mov    rsi,QWORD PTR [rsp+0x50]
    b9eb:	shl    eax,cl
    b9ed:	mov    DWORD PTR [rsi+r15*1],eax
    b9f1:	add    r15,0x4
    b9f5:	cmp    r15,0x10
    b9f9:	je     ba68 <dct_chroma_sp+0x768>
    b9fb:	mov    rax,QWORD PTR [rsp+0xf8]
    ba03:	mov    r10d,DWORD PTR [rsi+r15*1]
    ba07:	mov    r13d,DWORD PTR [r15+rax*1]
    ba0b:	jmp    b936 <dct_chroma_sp+0x636>
    ba10:	cmp    ebx,r12d
    ba13:	je     ba20 <dct_chroma_sp+0x720>
    ba15:	test   ebx,ebx
    ba17:	je     b9cf <dct_chroma_sp+0x6cf>
    ba19:	mov    r9d,r8d
    ba1c:	nop    DWORD PTR [rax+0x0]
    ba20:	mov    rax,QWORD PTR [rip+0x7cb91]        # 885b8 <input>
    ba27:	mov    r8d,r9d
    ba2a:	mov    r9d,DWORD PTR [rax+0x934]
    ba31:	test   r9d,r9d
    ba34:	jne    c3a4 <dct_chroma_sp+0x10a4>
    ba3a:	mov    rax,QWORD PTR [rip+0x7cb6f]        # 885b0 <img>
    ba41:	cmp    DWORD PTR [rax+0x28],0x3
    ba45:	jg     c3a4 <dct_chroma_sp+0x10a4>
    ba4b:	cmp    r12d,0x80f
    ba52:	jle    c3a4 <dct_chroma_sp+0x10a4>
    ba58:	mov    r12d,0x80f
    ba5e:	jmp    c3ad <dct_chroma_sp+0x10ad>
    ba63:	nop    DWORD PTR [rax+rax*1+0x0]
    ba68:	mov    rsi,QWORD PTR [rsp+0x58]
    ba6d:	movsxd rax,DWORD PTR [rsp+0x20]
    ba72:	mov    DWORD PTR [rsp+0xa0],0x0
    ba7d:	mov    r9d,DWORD PTR [rsp+0x124]
    ba85:	mov    edi,DWORD PTR [rsp+0x128]
    ba8c:	mov    DWORD PTR [rsp+0x58],0x0
    ba94:	mov    DWORD PTR [rsi+rax*4],0x0
    ba9b:	mov    eax,DWORD PTR [rsp+0x120]
    baa2:	mov    ecx,DWORD PTR [rsp+0x12c]
    baa9:	mov    rsi,QWORD PTR [rip+0x7cb00]        # 885b0 <img>
    bab0:	lea    edx,[rax+r9*1]
    bab4:	sub    eax,r9d
    bab7:	lea    r8d,[rdx+rdi*1]
    babb:	sub    edx,edi
    babd:	lea    r10d,[r8+rcx*1]
    bac1:	sub    edx,ecx
    bac3:	mov    r8d,r10d
    bac6:	shr    r8d,0x1f
    baca:	add    r8d,r10d
    bacd:	sar    r8d,1
    bad0:	mov    DWORD PTR [rsi+0x3338],r8d
    bad7:	lea    r8d,[rdi+rax*1]
    badb:	sub    eax,edi
    badd:	sub    r8d,ecx
    bae0:	add    eax,ecx
    bae2:	mov    r9d,r8d
    bae5:	shr    r8d,0x1f
    bae9:	add    r8d,r9d
    baec:	sar    r8d,1
    baef:	mov    DWORD PTR [rsi+0x3438],r8d
    baf6:	mov    r8d,edx
    baf9:	shr    r8d,0x1f
    bafd:	add    edx,r8d
    bb00:	sar    edx,1
    bb02:	mov    DWORD PTR [rsi+0x3348],edx
    bb08:	mov    edx,eax
    bb0a:	shr    edx,0x1f
    bb0d:	add    eax,edx
    bb0f:	sar    eax,1
    bb11:	mov    DWORD PTR [rsi+0x3448],eax
    bb17:	mov    rax,QWORD PTR [rsp+0x108]
    bb1f:	add    rax,0x18
    bb23:	mov    QWORD PTR [rsp+0xe0],rax
    bb2b:	mov    eax,DWORD PTR [rsp+0x88]
    bb32:	add    eax,0x10
    bb35:	mov    DWORD PTR [rsp+0x104],eax
    bb3c:	mov    ebx,DWORD PTR [rsp+0x58]
    bb40:	mov    DWORD PTR [rsp+0x50],0x0
    bb48:	mov    eax,ebx
    bb4a:	sar    eax,0x2
    bb4d:	add    eax,eax
    bb4f:	mov    DWORD PTR [rsp+0xdc],eax
    bb56:	mov    eax,ebx
    bb58:	mov    ebx,DWORD PTR [rsp+0x104]
    bb5f:	sar    eax,1
    bb61:	add    eax,ebx
    bb63:	mov    DWORD PTR [rsp+0x100],eax
    bb6a:	mov    ecx,DWORD PTR [rsp+0x50]
    bb6e:	mov    rbx,QWORD PTR [rsp+0xe0]
    bb76:	mov    DWORD PTR [rsp+0x10],0xffffffff
    bb7e:	mov    rdx,QWORD PTR [rsi+0x3738]
    bb85:	mov    eax,DWORD PTR [rsp+0xdc]
    bb8c:	mov    DWORD PTR [rsp+0x70],0x0
    bb94:	sar    ecx,0x2
    bb97:	mov    rdx,QWORD PTR [rdx+rbx*1]
    bb9b:	add    eax,ecx
    bb9d:	add    ecx,DWORD PTR [rsp+0x100]
    bba4:	cdqe   
    bba6:	mov    rax,QWORD PTR [rdx+rax*8]
    bbaa:	mov    rbx,QWORD PTR [rax]
    bbad:	mov    rax,QWORD PTR [rax+0x8]
    bbb1:	mov    QWORD PTR [rsp+0x88],rax
    bbb9:	mov    eax,0x1
    bbbe:	shl    eax,cl
    bbc0:	mov    QWORD PTR [rsp+0x78],rbx
    bbc5:	cdqe   
    bbc7:	mov    QWORD PTR [rsp+0x80],rax
    bbcf:	lea    rax,[rip+0x5ee2d]        # 6aa03 <FIELD_SCAN+0x3>
    bbd6:	mov    QWORD PTR [rsp],rax
    bbda:	lea    rax,[rip+0x5ee42]        # 6aa23 <SNGL_SCAN+0x3>
    bbe1:	mov    QWORD PTR [rsp+0x30],rax
    bbe6:	mov    rax,QWORD PTR [rsp+0xf0]
    bbee:	shl    rax,0x2
    bbf2:	mov    QWORD PTR [rsp+0x8],rax
    bbf7:	mov    rax,QWORD PTR [rsp+0xe8]
    bbff:	shl    rax,0x2
    bc03:	mov    QWORD PTR [rsp+0x38],rax
    bc08:	jmp    bdaa <dct_chroma_sp+0xaaa>
    bc0d:	nop    DWORD PTR [rax]
    bc10:	mov    ecx,DWORD PTR [rip+0x951fa]        # a0e10 <mb_adaptive>
    bc16:	test   ecx,ecx
    bc18:	je     bc28 <dct_chroma_sp+0x928>
    bc1a:	mov    edx,DWORD PTR [rsi+0x11948]
    bc20:	test   edx,edx
    bc22:	jne    bdb8 <dct_chroma_sp+0xab8>
    bc28:	mov    rax,QWORD PTR [rsp+0x30]
    bc2d:	movzx  r13d,BYTE PTR [rax-0x1]
    bc32:	movzx  r14d,BYTE PTR [rax]
    bc36:	mov    edi,DWORD PTR [rsp+0x58]
    bc3a:	mov    eax,DWORD PTR [rsp+0x50]
    bc3e:	lea    r12,[rip+0x5e85b]        # 6a4a0 <quant_coef>
    bc45:	add    DWORD PTR [rsp+0x10],0x1
    bc4a:	add    eax,r13d
    bc4d:	lea    edx,[r14+rdi*1]
    bc51:	movsxd rdi,edx
    bc54:	movsxd rbx,eax
    bc57:	mov    edx,DWORD PTR [rsp+0x60]
    bc5b:	lea    rax,[rdi+rbx*8]
    bc5f:	mov    QWORD PTR [rsp+0x18],rbx
    bc64:	shl    rbx,0x4
    bc68:	mov    r15d,DWORD PTR [rsp+rax*4+0x150]
    bc70:	mov    rax,QWORD PTR [rsp+0x8]
    bc75:	mov    ecx,edx
    bc77:	lea    r10,[rbx+rdi*1+0xccc]
    bc7f:	mov    ebx,DWORD PTR [rsi+r10*4+0x8]
    bc84:	mov    QWORD PTR [rsp+0x20],rdi
    bc89:	add    rax,r13
    bc8c:	mov    esi,r15d
    bc8f:	mov    QWORD PTR [rsp+0x28],r10
    bc94:	lea    rax,[r14+rax*4]
    bc98:	mov    r11d,DWORD PTR [r12+rax*4]
    bc9c:	mov    eax,r15d
    bc9f:	sar    eax,0x1f
    bca2:	mov    ebp,eax
    bca4:	mov    DWORD PTR [rsp+0x48],r11d
    bca9:	xor    ebp,r15d
    bcac:	sub    ebp,eax
    bcae:	imul   ebp,r11d
    bcb2:	add    ebp,DWORD PTR [rsp+0x44]
    bcb6:	sar    ebp,cl
    bcb8:	mov    eax,ebp
    bcba:	shl    eax,cl
    bcbc:	cdq    
    bcbd:	idiv   r11d
    bcc0:	mov    edi,eax
    bcc2:	call   465a0 <sign>
    bcc7:	mov    r10,QWORD PTR [rsp+0x28]
    bccc:	mov    esi,DWORD PTR [rsp+0x68]
    bcd0:	sub    ebx,eax
    bcd2:	mov    rax,QWORD PTR [rsp+0x38]
    bcd7:	mov    edi,DWORD PTR [rsp+0x6c]
    bcdb:	mov    edx,ebx
    bcdd:	mov    r8d,ebx
    bce0:	sar    edx,0x1f
    bce3:	add    rax,r13
    bce6:	mov    ecx,edi
    bce8:	mov    ebx,edx
    bcea:	lea    r11,[r14+rax*4]
    bcee:	xor    ebx,r8d
    bcf1:	mov    eax,DWORD PTR [r12+r11*4]
    bcf5:	sub    ebx,edx
    bcf7:	mov    rdx,QWORD PTR [rip+0x7c8b2]        # 885b0 <img>
    bcfe:	imul   ebx,eax
    bd01:	mov    edx,DWORD PTR [rdx+r10*4+0x8]
    bd06:	mov    r9d,edx
    bd09:	add    ebx,esi
    bd0b:	sub    r9d,r15d
    bd0e:	sar    ebx,cl
    bd10:	mov    ecx,r9d
    bd13:	sar    ecx,0x1f
    bd16:	mov    r12d,ecx
    bd19:	xor    r12d,r9d
    bd1c:	sub    r12d,ecx
    bd1f:	mov    ecx,edi
    bd21:	imul   r12d,eax
    bd25:	add    r12d,esi
    bd28:	sar    r12d,cl
    bd2b:	cmp    ebx,r12d
    bd2e:	je     bde0 <dct_chroma_sp+0xae0>
    bd34:	test   ebx,ebx
    bd36:	je     bdd0 <dct_chroma_sp+0xad0>
    bd3c:	test   r12d,r12d
    bd3f:	jne    beb8 <dct_chroma_sp+0xbb8>
    bd45:	mov    esi,r15d
    bd48:	mov    edi,ebp
    bd4a:	call   465a0 <sign>
    bd4f:	mov    rdx,QWORD PTR [rsp+0x18]
    bd54:	mov    rbx,QWORD PTR [rsp+0x20]
    bd59:	lea    rdi,[rip+0x5ecc1]        # 6aa21 <SNGL_SCAN+0x1>
    bd60:	add    r13,QWORD PTR [rsp+0x8]
    bd65:	mov    rsi,QWORD PTR [rip+0x7c844]        # 885b0 <img>
    bd6c:	shl    rdx,0x4
    bd70:	lea    rcx,[r14+r13*4]
    bd74:	add    QWORD PTR [rsp],0x2
    bd79:	lea    rdx,[rdx+rbx*1+0xccc]
    bd81:	lea    rbx,[rip+0x5e598]        # 6a320 <dequant_coef>
    bd88:	add    QWORD PTR [rsp+0x30],0x2
    bd8e:	imul   eax,DWORD PTR [rbx+rcx*4]
    bd92:	movzx  ecx,BYTE PTR [rsp+0x64]
    bd97:	shl    eax,cl
    bd99:	mov    DWORD PTR [rsi+rdx*4+0x8],eax
    bd9d:	mov    rax,QWORD PTR [rsp]
    bda1:	cmp    rdi,rax
    bda4:	je     c098 <dct_chroma_sp+0xd98>
    bdaa:	mov    edi,DWORD PTR [rsi+0x11afc]
    bdb0:	test   edi,edi
    bdb2:	je     bc10 <dct_chroma_sp+0x910>
    bdb8:	mov    rax,QWORD PTR [rsp]
    bdbc:	movzx  r13d,BYTE PTR [rax-0x1]
    bdc1:	movzx  r14d,BYTE PTR [rax]
    bdc5:	jmp    bc36 <dct_chroma_sp+0x936>
    bdca:	nop    WORD PTR [rax+rax*1+0x0]
    bdd0:	cmp    ebx,r12d
    bdd3:	je     bde0 <dct_chroma_sp+0xae0>
    bdd5:	test   ebx,ebx
    bdd7:	je     bd45 <dct_chroma_sp+0xa45>
    bddd:	mov    r8d,r9d
    bde0:	test   r12d,r12d
    bde3:	je     bd45 <dct_chroma_sp+0xa45>
    bde9:	mov    rax,QWORD PTR [rsp+0x90]
    bdf1:	movsxd rbx,DWORD PTR [rsp+0x70]
    bdf6:	mov    edi,r12d
    bdf9:	mov    DWORD PTR [rsp+0x28],r8d
    bdfe:	mov    rsi,QWORD PTR [rsp+0x80]
    be06:	or     QWORD PTR [rax+0x1d0],rsi
    be0d:	mov    rsi,QWORD PTR [rsp+0x78]
    be12:	lea    rbp,[rsi+rbx*4]
    be16:	mov    esi,r8d
    be19:	call   465a0 <sign>
    be1e:	mov    edi,DWORD PTR [rsp+0x10]
    be22:	mov    r8d,DWORD PTR [rsp+0x28]
    be27:	mov    rsi,QWORD PTR [rsp+0x88]
    be2f:	mov    DWORD PTR [rbp+0x0],eax
    be32:	add    DWORD PTR [rsp+0x70],0x1
    be37:	mov    DWORD PTR [rsi+rbx*4],edi
    be3a:	mov    esi,r8d
    be3d:	mov    edi,r12d
    be40:	call   465a0 <sign>
    be45:	mov    rsi,QWORD PTR [rsp+0x38]
    be4a:	movzx  ecx,BYTE PTR [rsp+0xc8]
    be52:	mov    DWORD PTR [rsp+0xa0],0x2
    be5d:	mov    DWORD PTR [rsp+0x10],0xffffffff
    be65:	lea    rdx,[rsi+r13*1]
    be69:	lea    rsi,[rip+0x5e4b0]        # 6a320 <dequant_coef>
    be70:	lea    rdx,[r14+rdx*4]
    be74:	imul   eax,DWORD PTR [rsi+rdx*4]
    be78:	lea    rdx,[r14+r13*4]
    be7c:	lea    rsi,[rip+0x5e45d]        # 6a2e0 <A>
    be83:	imul   eax,DWORD PTR [rsi+rdx*4]
    be87:	shl    eax,cl
    be89:	movzx  ecx,BYTE PTR [rsp+0x60]
    be8e:	sar    eax,0x6
    be91:	add    r15d,eax
    be94:	mov    eax,r15d
    be97:	sar    eax,0x1f
    be9a:	mov    ebp,eax
    be9c:	xor    ebp,r15d
    be9f:	sub    ebp,eax
    bea1:	imul   ebp,DWORD PTR [rsp+0x48]
    bea6:	add    ebp,DWORD PTR [rsp+0x44]
    beaa:	sar    ebp,cl
    beac:	jmp    bd45 <dct_chroma_sp+0xa45>
    beb1:	nop    DWORD PTR [rax+0x0]
    beb8:	mov    esi,r8d
    bebb:	mov    edi,ebx
    bebd:	mov    DWORD PTR [rsp+0xcc],r8d
    bec5:	mov    QWORD PTR [rsp+0xd0],r10
    becd:	mov    DWORD PTR [rsp+0xa8],r9d
    bed5:	mov    QWORD PTR [rsp+0x28],r11
    beda:	mov    DWORD PTR [rsp+0xa0],edx
    bee1:	call   465a0 <sign>
    bee6:	mov    r11,QWORD PTR [rsp+0x28]
    beeb:	lea    rcx,[r14+r13*4]
    beef:	lea    rsi,[rip+0x5e42a]        # 6a320 <dequant_coef>
    bef6:	lea    rdi,[rip+0x5e3e3]        # 6a2e0 <A>
    befd:	mov    edx,DWORD PTR [rsp+0xa0]
    bf04:	pxor   xmm0,xmm0
    bf08:	mov    esi,DWORD PTR [rsi+r11*4]
    bf0c:	mov    ebp,DWORD PTR [rdi+rcx*4]
    bf0f:	lea    r11,[rsp+0x11c]
    bf17:	mov    edi,ebx
    bf19:	movzx  ecx,BYTE PTR [rsp+0xc8]
    bf21:	mov    QWORD PTR [rsp+0xc0],r11
    bf29:	imul   eax,esi
    bf2c:	mov    DWORD PTR [rsp+0x28],esi
    bf30:	mov    esi,DWORD PTR [rsp+0x10]
    bf34:	imul   eax,ebp
    bf37:	shl    eax,cl
    bf39:	mov    rcx,r11
    bf3c:	sar    eax,0x6
    bf3f:	sub    edx,eax
    bf41:	sub    edx,r15d
    bf44:	cvtsi2sd xmm0,edx
    bf48:	lea    rdx,[rsp+0x118]
    bf50:	mov    QWORD PTR [rsp+0xb8],rdx
    bf58:	movsd  QWORD PTR [rsp+0xa0],xmm0
    bf61:	call   66560 <levrun_linfo_inter>
    bf66:	pxor   xmm1,xmm1
    bf6a:	mov    edi,r12d
    bf6d:	movsd  xmm0,QWORD PTR [rsp+0xa0]
    bf76:	cvtsi2sd xmm1,DWORD PTR [rsp+0x118]
    bf7f:	mov    r10,QWORD PTR [rsp+0xd0]
    bf87:	mulsd  xmm1,QWORD PTR [rsp+0x98]
    bf90:	mulsd  xmm0,xmm0
    bf94:	mov    rax,QWORD PTR [rip+0x7c615]        # 885b0 <img>
    bf9b:	mov    r9d,DWORD PTR [rsp+0xa8]
    bfa3:	mov    eax,DWORD PTR [rax+r10*4+0x8]
    bfa8:	mov    esi,r9d
    bfab:	mov    DWORD PTR [rsp+0xa0],eax
    bfb2:	addsd  xmm0,xmm1
    bfb6:	movsd  QWORD PTR [rsp+0xb0],xmm0
    bfbf:	call   465a0 <sign>
    bfc4:	pxor   xmm1,xmm1
    bfc8:	mov    esi,DWORD PTR [rsp+0x10]
    bfcc:	mov    edi,r12d
    bfcf:	imul   eax,DWORD PTR [rsp+0x28]
    bfd4:	movzx  ecx,BYTE PTR [rsp+0xc8]
    bfdc:	mov    r11,QWORD PTR [rsp+0xc0]
    bfe4:	mov    rdx,QWORD PTR [rsp+0xb8]
    bfec:	imul   eax,ebp
    bfef:	mov    ebp,DWORD PTR [rsp+0xa0]
    bff6:	shl    eax,cl
    bff8:	mov    rcx,r11
    bffb:	sar    eax,0x6
    bffe:	sub    ebp,eax
    c000:	sub    ebp,r15d
    c003:	cvtsi2sd xmm1,ebp
    c007:	movsd  QWORD PTR [rsp+0x28],xmm1
    c00d:	call   66560 <levrun_linfo_inter>
    c012:	movsd  xmm1,QWORD PTR [rsp+0x28]
    c018:	pxor   xmm2,xmm2
    c01c:	movsd  xmm0,QWORD PTR [rsp+0xb0]
    c025:	mov    r9d,DWORD PTR [rsp+0xa8]
    c02d:	mov    r8d,DWORD PTR [rsp+0xcc]
    c035:	cvtsi2sd xmm2,DWORD PTR [rsp+0x118]
    c03e:	mulsd  xmm1,xmm1
    c042:	mulsd  xmm2,QWORD PTR [rsp+0x98]
    c04b:	addsd  xmm1,xmm2
    c04f:	ucomisd xmm0,xmm1
    c053:	jp     c080 <dct_chroma_sp+0xd80>
    c055:	jne    c080 <dct_chroma_sp+0xd80>
    c057:	mov    eax,ebx
    c059:	mov    ecx,r12d
    c05c:	sar    eax,0x1f
    c05f:	sar    ecx,0x1f
    c062:	mov    edx,eax
    c064:	xor    edx,ebx
    c066:	sub    edx,eax
    c068:	mov    eax,ecx
    c06a:	xor    eax,r12d
    c06d:	sub    eax,ecx
    c06f:	cmp    edx,eax
    c071:	cmovge r8d,r9d
    c075:	cmovl  r12d,ebx
    c079:	jmp    bde9 <dct_chroma_sp+0xae9>
    c07e:	xchg   ax,ax
    c080:	comisd xmm1,xmm0
    c084:	cmovbe r8d,r9d
    c088:	cmova  r12d,ebx
    c08c:	jmp    bde9 <dct_chroma_sp+0xae9>
    c091:	nop    DWORD PTR [rax+0x0]
    c098:	movsxd rax,DWORD PTR [rsp+0x70]
    c09d:	mov    rbx,QWORD PTR [rsp+0x78]
    c0a2:	add    DWORD PTR [rsp+0x50],0x4
    c0a7:	mov    DWORD PTR [rbx+rax*4],0x0
    c0ae:	mov    eax,DWORD PTR [rsp+0x50]
    c0b2:	cmp    eax,0x8
    c0b5:	jne    bb6a <dct_chroma_sp+0x86a>
    c0bb:	add    DWORD PTR [rsp+0x58],0x4
    c0c0:	mov    eax,DWORD PTR [rsp+0x58]
    c0c4:	cmp    eax,0x8
    c0c7:	jne    bb3c <dct_chroma_sp+0x83c>
    c0cd:	cmp    DWORD PTR [rsp+0xa0],0x2
    c0d5:	mov    eax,0x2
    c0da:	cmovne eax,DWORD PTR [rsp+0xd8]
    c0e2:	xor    r14d,r14d
    c0e5:	mov    QWORD PTR [rsp+0x18],0x0
    c0ee:	mov    r11d,DWORD PTR [rsi+0x11bf0]
    c0f5:	lea    r13,[rsp+0x130]
    c0fd:	mov    DWORD PTR [rsp+0xd8],eax
    c104:	lea    rax,[rsi+0x100]
    c10b:	mov    r9,QWORD PTR [rsp+0xf8]
    c113:	mov    QWORD PTR [rsp+0x20],rax
    c118:	mov    QWORD PTR [rsp+0x28],rsi
    c11d:	mov    r10,QWORD PTR [rsp+0x20]
    c122:	mov    ebp,0x40
    c127:	mov    ebx,0xc0
    c12c:	mov    QWORD PTR [rsp+0x8],0x0
    c135:	mov    DWORD PTR [rsp+0x10],0x0
    c13d:	mov    r12d,0x80
    c143:	lea    rax,[r10-0xf0]
    c14a:	mov    QWORD PTR [rsp],rax
    c14e:	lea    rax,[r10-0x100]
    c155:	mov    rsi,rax
    c158:	mov    rdx,r13
    c15b:	mov    rcx,rsi
    c15e:	mov    edi,DWORD PTR [rcx+0x3338]
    c164:	add    rdx,0x4
    c168:	add    rcx,0x40
    c16c:	mov    DWORD PTR [rdx-0x4],edi
    c16f:	cmp    r9,rdx
    c172:	jne    c15e <dct_chroma_sp+0xe5e>
    c174:	mov    ecx,DWORD PTR [rsp+0x138]
    c17b:	mov    r15d,DWORD PTR [rsp+0x134]
    c183:	mov    edx,DWORD PTR [rsp+0x130]
    c18a:	mov    edi,r15d
    c18d:	lea    r8d,[rdx+rcx*1]
    c191:	sub    edx,ecx
    c193:	mov    ecx,DWORD PTR [rsp+0x13c]
    c19a:	sar    edi,1
    c19c:	sub    edi,ecx
    c19e:	sar    ecx,1
    c1a0:	add    ecx,r15d
    c1a3:	lea    r15d,[r8+rcx*1]
    c1a7:	sub    r8d,ecx
    c1aa:	lea    ecx,[rdx+rdi*1]
    c1ad:	sub    edx,edi
    c1af:	mov    DWORD PTR [rsi+0x3338],r15d
    c1b6:	mov    r15,QWORD PTR [rsp+0x8]
    c1bb:	add    r15,rsi
    c1be:	add    rsi,0x4
    c1c2:	mov    DWORD PTR [r15+rbx*1+0x3338],r8d
    c1ca:	mov    DWORD PTR [r15+rbp*1+0x3338],ecx
    c1d2:	mov    DWORD PTR [r15+r12*1+0x3338],edx
    c1da:	cmp    QWORD PTR [rsp],rsi
    c1de:	jne    c158 <dct_chroma_sp+0xe58>
    c1e4:	xor    edx,edx
    c1e6:	mov    ecx,DWORD PTR [rax+rdx*1+0x3338]
    c1ed:	mov    DWORD PTR [r13+rdx*1+0x0],ecx
    c1f2:	add    rdx,0x4
    c1f6:	cmp    rdx,0x10
    c1fa:	jne    c1e6 <dct_chroma_sp+0xee6>
    c1fc:	mov    esi,DWORD PTR [rsp+0x138]
    c203:	mov    edi,DWORD PTR [rsp+0x134]
    c20a:	mov    edx,DWORD PTR [rsp+0x130]
    c211:	mov    r8d,DWORD PTR [rsp+0x13c]
    c219:	lea    ecx,[rdx+rsi*1]
    c21c:	sub    edx,esi
    c21e:	mov    esi,edi
    c220:	sar    esi,1
    c222:	sub    esi,r8d
    c225:	sar    r8d,1
    c228:	add    r8d,edi
    c22b:	lea    edi,[rcx+r8*1+0x20]
    c230:	sar    edi,0x6
    c233:	cmovs  edi,r14d
    c237:	cmp    edi,r11d
    c23a:	cmovg  edi,r11d
    c23e:	sub    ecx,r8d
    c241:	add    ecx,0x20
    c244:	sar    ecx,0x6
    c247:	mov    DWORD PTR [rax+0x3338],edi
    c24d:	cmovs  ecx,r14d
    c251:	cmp    ecx,r11d
    c254:	cmovg  ecx,r11d
    c258:	mov    DWORD PTR [rax+0x3344],ecx
    c25e:	lea    ecx,[rdx+rsi*1+0x20]
    c262:	sar    ecx,0x6
    c265:	cmovs  ecx,r14d
    c269:	cmp    ecx,r11d
    c26c:	cmovg  ecx,r11d
    c270:	sub    edx,esi
    c272:	add    edx,0x20
    c275:	sar    edx,0x6
    c278:	mov    DWORD PTR [rax+0x333c],ecx
    c27e:	cmovs  edx,r14d
    c282:	cmp    edx,r11d
    c285:	cmovg  edx,r11d
    c289:	add    rax,0x40
    c28d:	mov    DWORD PTR [rax+0x3300],edx
    c293:	cmp    r10,rax
    c296:	jne    c1e4 <dct_chroma_sp+0xee4>
    c29c:	add    DWORD PTR [rsp+0x10],0x4
    c2a1:	mov    eax,DWORD PTR [rsp+0x10]
    c2a5:	add    r10,0x100
    c2ac:	add    rbx,0x100
    c2b3:	sub    QWORD PTR [rsp+0x8],0x100
    c2bc:	add    rbp,0x100
    c2c3:	add    r12,0x100
    c2ca:	add    QWORD PTR [rsp],0x100
    c2d2:	cmp    eax,0x8
    c2d5:	jne    c14e <dct_chroma_sp+0xe4e>
    c2db:	add    QWORD PTR [rsp+0x18],0x4
    c2e1:	mov    rax,QWORD PTR [rsp+0x18]
    c2e6:	add    QWORD PTR [rsp+0x20],0x10
    c2ec:	cmp    rax,0x8
    c2f0:	jne    c11d <dct_chroma_sp+0xe1d>
    c2f6:	mov    rax,QWORD PTR [rip+0x7e6ab]        # 8a9a8 <enc_picture>
    c2fd:	mov    rsi,QWORD PTR [rsp+0x28]
    c302:	mov    rbx,QWORD PTR [rsp+0x108]
    c30a:	mov    rax,QWORD PTR [rax+0x1940]
    c311:	movsxd rdx,DWORD PTR [rsi+0xa4]
    c318:	lea    rdi,[rsi+0x200]
    c31f:	lea    r9,[rsi+0x220]
    c326:	movsxd rsi,DWORD PTR [rsi+0xa0]
    c32d:	mov    rax,QWORD PTR [rax+rbx*1-0x8]
    c332:	add    rsi,rsi
    c335:	lea    r8,[rax+rdx*8]
    c339:	nop    DWORD PTR [rax+0x0]
    c340:	mov    rdx,QWORD PTR [r8]
    c343:	lea    rax,[rdi-0x200]
    c34a:	add    rdx,rsi
    c34d:	nop    DWORD PTR [rax]
    c350:	mov    ecx,DWORD PTR [rax+0x3338]
    c356:	add    rax,0x40
    c35a:	add    rdx,0x2
    c35e:	mov    WORD PTR [rdx-0x2],cx
    c362:	cmp    rdi,rax
    c365:	jne    c350 <dct_chroma_sp+0x1050>
    c367:	add    rdi,0x4
    c36b:	add    r8,0x8
    c36f:	cmp    r9,rdi
    c372:	jne    c340 <dct_chroma_sp+0x1040>
    c374:	mov    rax,QWORD PTR [rsp+0x258]
    c37c:	xor    rax,QWORD PTR fs:0x28
    c385:	jne    c62a <dct_chroma_sp+0x132a>
    c38b:	mov    eax,DWORD PTR [rsp+0xd8]
    c392:	add    rsp,0x268
    c399:	pop    rbx
    c39a:	pop    rbp
    c39b:	pop    r12
    c39d:	pop    r13
    c39f:	pop    r14
    c3a1:	pop    r15
    c3a3:	ret    
    c3a4:	test   r12d,r12d
    c3a7:	je     b9cf <dct_chroma_sp+0x6cf>
    c3ad:	mov    rax,QWORD PTR [rsp+0x90]
    c3b5:	mov    rsi,QWORD PTR [rsp+0x78]
    c3ba:	mov    edi,r12d
    c3bd:	mov    DWORD PTR [rsp],r8d
    c3c1:	movsxd rbx,DWORD PTR [rsp+0x20]
    c3c6:	or     QWORD PTR [rax+0x1d0],rsi
    c3cd:	mov    esi,DWORD PTR [rsp+0xd8]
    c3d4:	mov    eax,0x1
    c3d9:	test   esi,esi
    c3db:	cmovg  eax,esi
    c3de:	mov    rsi,QWORD PTR [rsp+0x58]
    c3e3:	lea    rbp,[rsi+rbx*4]
    c3e7:	mov    esi,r8d
    c3ea:	mov    DWORD PTR [rsp+0xd8],eax
    c3f1:	call   465a0 <sign>
    c3f6:	mov    rsi,QWORD PTR [rsp+0x80]
    c3fe:	mov    r8d,DWORD PTR [rsp]
    c402:	mov    edi,r12d
    c405:	mov    DWORD PTR [rbp+0x0],eax
    c408:	mov    DWORD PTR [rsi+rbx*4],r14d
    c40c:	mov    esi,r8d
    c40f:	mov    r14d,0xffffffff
    c415:	add    DWORD PTR [rsp+0x20],0x1
    c41a:	call   465a0 <sign>
    c41f:	mov    rbx,QWORD PTR [rsp+0x70]
    c424:	lea    rsi,[rip+0x5def5]        # 6a320 <dequant_coef>
    c42b:	movzx  ecx,BYTE PTR [rsp+0xc8]
    c433:	imul   eax,DWORD PTR [rsi+rbx*1]
    c437:	shl    eax,0x4
    c43a:	shl    eax,cl
    c43c:	movzx  ecx,BYTE PTR [rsp+0x18]
    c441:	sar    eax,0x5
    c444:	add    r13d,eax
    c447:	mov    eax,r13d
    c44a:	sar    eax,0x1f
    c44d:	mov    ebp,eax
    c44f:	xor    ebp,r13d
    c452:	sub    ebp,eax
    c454:	imul   ebp,DWORD PTR [rsp+0x10]
    c459:	add    ebp,DWORD PTR [rsp+0x8]
    c45d:	sar    ebp,cl
    c45f:	jmp    b9cf <dct_chroma_sp+0x6cf>
    c464:	mov    esi,r9d
    c467:	mov    edi,ebx
    c469:	mov    DWORD PTR [rsp+0xcc],r9d
    c471:	mov    DWORD PTR [rsp+0xd0],r8d
    c479:	mov    DWORD PTR [rsp+0xa0],r10d
    c481:	call   465a0 <sign>
    c486:	mov    rdi,QWORD PTR [rsp+0x70]
    c48b:	lea    rsi,[rip+0x5de8e]        # 6a320 <dequant_coef>
    c492:	movzx  ecx,BYTE PTR [rsp+0xc8]
    c49a:	mov    r10d,DWORD PTR [rsp+0xa0]
    c4a2:	pxor   xmm0,xmm0
    c4a6:	lea    r11,[rsp+0x11c]
    c4ae:	lea    rdx,[rsp+0x118]
    c4b6:	mov    esi,DWORD PTR [rsi+rdi*1]
    c4b9:	mov    QWORD PTR [rsp+0xb8],r11
    c4c1:	mov    edi,r10d
    c4c4:	mov    DWORD PTR [rsp+0xc0],r10d
    c4cc:	imul   eax,esi
    c4cf:	mov    DWORD PTR [rsp],esi
    c4d2:	mov    esi,r14d
    c4d5:	mov    QWORD PTR [rsp+0xb0],rdx
    c4dd:	shl    eax,0x4
    c4e0:	shl    eax,cl
    c4e2:	mov    rcx,r11
    c4e5:	sar    eax,0x5
    c4e8:	sub    edi,eax
    c4ea:	mov    eax,edi
    c4ec:	mov    edi,ebx
    c4ee:	sub    eax,r13d
    c4f1:	cvtsi2sd xmm0,eax
    c4f5:	movsd  QWORD PTR [rsp+0xa0],xmm0
    c4fe:	call   66440 <levrun_linfo_c2x2>
    c503:	pxor   xmm1,xmm1
    c507:	mov    r8d,DWORD PTR [rsp+0xd0]
    c50f:	mov    edi,r12d
    c512:	movsd  xmm0,QWORD PTR [rsp+0xa0]
    c51b:	cvtsi2sd xmm1,DWORD PTR [rsp+0x118]
    c524:	mulsd  xmm1,QWORD PTR [rsp+0x98]
    c52d:	mov    esi,r8d
    c530:	mov    DWORD PTR [rsp+0xa0],r8d
    c538:	mulsd  xmm0,xmm0
    c53c:	addsd  xmm1,xmm0
    c540:	movsd  QWORD PTR [rsp+0xa8],xmm1
    c549:	call   465a0 <sign>
    c54e:	imul   eax,DWORD PTR [rsp]
    c552:	pxor   xmm0,xmm0
    c556:	mov    esi,r14d
    c559:	movzx  ecx,BYTE PTR [rsp+0xc8]
    c561:	mov    r10d,DWORD PTR [rsp+0xc0]
    c569:	mov    edi,r12d
    c56c:	mov    r11,QWORD PTR [rsp+0xb8]
    c574:	mov    rdx,QWORD PTR [rsp+0xb0]
    c57c:	shl    eax,0x4
    c57f:	shl    eax,cl
    c581:	mov    rcx,r11
    c584:	sar    eax,0x5
    c587:	sub    r10d,eax
    c58a:	sub    r10d,r13d
    c58d:	cvtsi2sd xmm0,r10d
    c592:	movsd  QWORD PTR [rsp],xmm0
    c597:	call   66440 <levrun_linfo_c2x2>
    c59c:	movsd  xmm0,QWORD PTR [rsp]
    c5a1:	pxor   xmm2,xmm2
    c5a5:	movsd  xmm1,QWORD PTR [rsp+0xa8]
    c5ae:	mov    r8d,DWORD PTR [rsp+0xa0]
    c5b6:	mov    r9d,DWORD PTR [rsp+0xcc]
    c5be:	cvtsi2sd xmm2,DWORD PTR [rsp+0x118]
    c5c7:	mulsd  xmm0,xmm0
    c5cb:	mulsd  xmm2,QWORD PTR [rsp+0x98]
    c5d4:	addsd  xmm0,xmm2
    c5d8:	ucomisd xmm1,xmm0
    c5dc:	jp     c61c <dct_chroma_sp+0x131c>
    c5de:	jne    c61c <dct_chroma_sp+0x131c>
    c5e0:	mov    eax,ebx
    c5e2:	mov    ecx,r12d
    c5e5:	sar    eax,0x1f
    c5e8:	sar    ecx,0x1f
    c5eb:	mov    edx,eax
    c5ed:	xor    edx,ebx
    c5ef:	sub    edx,eax
    c5f1:	mov    eax,ecx
    c5f3:	xor    eax,r12d
    c5f6:	sub    eax,ecx
    c5f8:	cmp    edx,eax
    c5fa:	cmovl  r12d,ebx
    c5fe:	cmovl  r8d,r9d
    c602:	mov    rax,QWORD PTR [rip+0x7bfaf]        # 885b8 <input>
    c609:	mov    eax,DWORD PTR [rax+0x934]
    c60f:	test   eax,eax
    c611:	jne    c3ad <dct_chroma_sp+0x10ad>
    c617:	jmp    ba3a <dct_chroma_sp+0x73a>
    c61c:	ucomisd xmm0,xmm1
    c620:	cmova  r12d,ebx
    c624:	cmova  r8d,r9d
    c628:	jmp    c602 <dct_chroma_sp+0x1302>
    c62a:	call   4390 <__stack_chk_fail@plt>
    c62f:	nop

000000000000c630 <copyblock_sp>:
    c630:	endbr64 
    c634:	push   r15
    c636:	push   r14
    c638:	push   r13
    c63a:	push   r12
    c63c:	push   rbp
    c63d:	push   rbx
    c63e:	sub    rsp,0x78
    c642:	mov    rdx,QWORD PTR [rip+0x7bf67]        # 885b0 <img>
    c649:	mov    DWORD PTR [rsp+0x18],edi
    c64d:	lea    r12,[rsp+0x60]
    c652:	lea    r10,[rsp+0x70]
    c657:	mov    DWORD PTR [rsp+0x1c],esi
    c65b:	mov    r8,r12
    c65e:	mov    rax,QWORD PTR fs:0x28
    c667:	mov    QWORD PTR [rsp+0x68],rax
    c66c:	xor    eax,eax
    c66e:	movsxd rax,DWORD PTR [rdx+0xc]
    c672:	imul   rax,rax,0x278
    c679:	add    rax,QWORD PTR [rdx+0x3758]
    c680:	movsxd rbx,DWORD PTR [rax+0x10]
    c684:	mov    r11,rbx
    c687:	imul   rbx,rbx,0x2aaaaaab
    c68e:	mov    eax,r11d
    c691:	sar    eax,0x1f
    c694:	shr    rbx,0x20
    c698:	sub    ebx,eax
    c69a:	lea    eax,[rbx+rbx*2]
    c69d:	mov    DWORD PTR [rsp],ebx
    c6a0:	add    eax,eax
    c6a2:	sub    r11d,eax
    c6a5:	lea    eax,[rbx+0xf]
    c6a8:	mov    ebx,eax
    c6aa:	mov    DWORD PTR [rsp+0x4],eax
    c6ae:	mov    eax,0x1
    c6b3:	mov    ecx,ebx
    c6b5:	shl    eax,cl
    c6b7:	movsxd rcx,esi
    c6ba:	mov    ebp,eax
    c6bc:	shr    ebp,0x1f
    c6bf:	add    ebp,eax
    c6c1:	movsxd rax,edi
    c6c4:	lea    rdi,[rsp+0x20]
    c6c9:	sar    ebp,1
    c6cb:	shl    rax,0x4
    c6cf:	mov    DWORD PTR [rsp+0xc],ebp
    c6d3:	lea    rax,[rax+rcx*1+0x189c]
    c6db:	lea    r9,[rdx+rax*2]
    c6df:	mov    rdx,rdi
    c6e2:	lea    rax,[r8-0x40]
    c6e6:	mov    rcx,r9
    c6e9:	movzx  esi,WORD PTR [rcx]
    c6ec:	add    rax,0x10
    c6f0:	add    rcx,0x20
    c6f4:	mov    DWORD PTR [rax-0x10],esi
    c6f7:	cmp    rax,r8
    c6fa:	jne    c6e9 <copyblock_sp+0xb9>
    c6fc:	lea    r8,[rax+0x4]
    c700:	add    r9,0x2
    c704:	cmp    r8,r10
    c707:	jne    c6e2 <copyblock_sp+0xb2>
    c709:	lea    r9,[rdi+0x10]
    c70d:	mov    rax,rdi
    c710:	mov    esi,DWORD PTR [rax+0x30]
    c713:	mov    ecx,DWORD PTR [rax]
    c715:	add    rax,0x4
    c719:	mov    ebx,DWORD PTR [rax+0x1c]
    c71c:	lea    r8d,[rcx+rsi*1]
    c720:	sub    ecx,esi
    c722:	mov    esi,DWORD PTR [rax+0xc]
    c725:	lea    r10d,[rsi+rbx*1]
    c729:	sub    esi,ebx
    c72b:	lea    ebx,[r8+r10*1]
    c72f:	sub    r8d,r10d
    c732:	mov    DWORD PTR [rax+0x1c],r8d
    c736:	lea    r8d,[rsi+rcx*2]
    c73a:	add    esi,esi
    c73c:	sub    ecx,esi
    c73e:	mov    DWORD PTR [rax-0x4],ebx
    c741:	mov    DWORD PTR [rax+0xc],r8d
    c745:	mov    DWORD PTR [rax+0x2c],ecx
    c748:	cmp    rax,r9
    c74b:	jne    c710 <copyblock_sp+0xe0>
    c74d:	mov    ecx,DWORD PTR [rdx+0xc]
    c750:	mov    eax,DWORD PTR [rdx]
    c752:	mov    r10d,DWORD PTR [rdx+0x8]
    c756:	lea    esi,[rax+rcx*1]
    c759:	sub    eax,ecx
    c75b:	mov    ecx,DWORD PTR [rdx+0x4]
    c75e:	lea    r8d,[rcx+r10*1]
    c762:	sub    ecx,r10d
    c765:	lea    r10d,[rsi+r8*1]
    c769:	sub    esi,r8d
    c76c:	mov    DWORD PTR [rdx+0x8],esi
    c76f:	lea    esi,[rcx+rax*2]
    c772:	add    ecx,ecx
    c774:	sub    eax,ecx
    c776:	mov    DWORD PTR [rdx],r10d
    c779:	mov    DWORD PTR [rdx+0x4],esi
    c77c:	mov    DWORD PTR [rdx+0xc],eax
    c77f:	mov    rdx,r9
    c782:	cmp    r9,r12
    c785:	je     c790 <copyblock_sp+0x160>
    c787:	add    r9,0x10
    c78b:	jmp    c74d <copyblock_sp+0x11d>
    c78d:	nop    DWORD PTR [rax]
    c790:	movsxd r11,r11d
    c793:	mov    DWORD PTR [rsp+0x8],0x0
    c79b:	lea    r14,[rip+0x5dcfe]        # 6a4a0 <quant_coef>
    c7a2:	lea    r13,[rip+0x5db77]        # 6a320 <dequant_coef>
    c7a9:	mov    rax,r11
    c7ac:	shl    rax,0x6
    c7b0:	mov    QWORD PTR [rsp+0x10],rax
    c7b5:	sub    rdi,rax
    c7b8:	mov    rbp,rdi
    c7bb:	movsxd rbx,DWORD PTR [rsp+0x8]
    c7c0:	mov    r15,QWORD PTR [rsp+0x10]
    c7c5:	xor    r12d,r12d
    c7c8:	mov    rax,rbx
    c7cb:	mov    ebx,r12d
    c7ce:	mov    r12,r15
    c7d1:	mov    r15,rbp
    c7d4:	mov    rbp,rax
    c7d7:	mov    esi,DWORD PTR [r15+r12*1]
    c7db:	movzx  ecx,BYTE PTR [rsp+0x4]
    c7e0:	mov    eax,esi
    c7e2:	sar    eax,0x1f
    c7e5:	mov    edi,eax
    c7e7:	xor    edi,esi
    c7e9:	sub    edi,eax
    c7eb:	imul   edi,DWORD PTR [r14+r12*1]
    c7f0:	add    edi,DWORD PTR [rsp+0xc]
    c7f4:	sar    edi,cl
    c7f6:	call   465a0 <sign>
    c7fb:	movsxd rcx,ebx
    c7fe:	add    ebx,0x1
    c801:	mov    rsi,QWORD PTR [rip+0x7bda8]        # 885b0 <img>
    c808:	imul   eax,DWORD PTR [r13+r12*1+0x0]
    c80e:	shl    rcx,0x4
    c812:	add    r12,0x10
    c816:	lea    rdi,[rcx+rbp*1+0xccc]
    c81e:	movzx  ecx,BYTE PTR [rsp]
    c822:	shl    eax,cl
    c824:	mov    DWORD PTR [rsi+rdi*4+0x8],eax
    c828:	cmp    ebx,0x4
    c82b:	jne    c7d7 <copyblock_sp+0x1a7>
    c82d:	add    DWORD PTR [rsp+0x8],0x1
    c832:	mov    eax,DWORD PTR [rsp+0x8]
    c836:	mov    rbp,r15
    c839:	add    QWORD PTR [rsp+0x10],0x4
    c83f:	cmp    eax,0x4
    c842:	jne    c7bb <copyblock_sp+0x18b>
    c848:	lea    rcx,[rsi+0x3338]
    c84f:	lea    r10,[rsi+0x3348]
    c856:	mov    rax,rcx
    c859:	mov    r11d,DWORD PTR [rax+0x40]
    c85d:	mov    edx,DWORD PTR [rax]
    c85f:	add    rax,0x4
    c863:	mov    r8d,DWORD PTR [rax+0x7c]
    c867:	mov    edi,DWORD PTR [rax+0xbc]
    c86d:	lea    r9d,[r8+rdx*1]
    c871:	sub    edx,r8d
    c874:	mov    r8d,r11d
    c877:	sar    r8d,1
    c87a:	sub    r8d,edi
    c87d:	sar    edi,1
    c87f:	add    edi,r11d
    c882:	lea    r11d,[r9+rdi*1]
    c886:	sub    r9d,edi
    c889:	lea    edi,[rdx+r8*1]
    c88d:	sub    edx,r8d
    c890:	mov    DWORD PTR [rax-0x4],r11d
    c894:	mov    DWORD PTR [rax+0xbc],r9d
    c89b:	mov    DWORD PTR [rax+0x3c],edi
    c89e:	mov    DWORD PTR [rax+0x7c],edx
    c8a1:	cmp    rax,r10
    c8a4:	jne    c859 <copyblock_sp+0x229>
    c8a6:	mov    edi,DWORD PTR [rsi+0x11bec]
    c8ac:	lea    r9,[rsi+0x3438]
    c8b3:	xor    r8d,r8d
    c8b6:	mov    r11d,DWORD PTR [rcx+0x4]
    c8ba:	mov    r10d,DWORD PTR [rcx+0x8]
    c8be:	mov    eax,DWORD PTR [rcx]
    c8c0:	mov    ebx,DWORD PTR [rcx+0xc]
    c8c3:	lea    edx,[r10+rax*1]
    c8c7:	sub    eax,r10d
    c8ca:	mov    r10d,r11d
    c8cd:	sar    r10d,1
    c8d0:	sub    r10d,ebx
    c8d3:	sar    ebx,1
    c8d5:	add    ebx,r11d
    c8d8:	lea    r11d,[rdx+rbx*1+0x20]
    c8dd:	sar    r11d,0x6
    c8e1:	cmovs  r11d,r8d
    c8e5:	cmp    r11d,edi
    c8e8:	cmovg  r11d,edi
    c8ec:	sub    edx,ebx
    c8ee:	add    edx,0x20
    c8f1:	sar    edx,0x6
    c8f4:	mov    DWORD PTR [rcx],r11d
    c8f7:	cmovs  edx,r8d
    c8fb:	cmp    edx,edi
    c8fd:	cmovg  edx,edi
    c900:	mov    DWORD PTR [rcx+0xc],edx
    c903:	lea    edx,[rax+r10*1+0x20]
    c908:	sar    edx,0x6
    c90b:	cmovs  edx,r8d
    c90f:	cmp    edx,edi
    c911:	cmovg  edx,edi
    c914:	sub    eax,r10d
    c917:	add    eax,0x20
    c91a:	sar    eax,0x6
    c91d:	mov    DWORD PTR [rcx+0x4],edx
    c920:	cmovs  eax,r8d
    c924:	cmp    eax,edi
    c926:	cmovg  eax,edi
    c929:	add    rcx,0x40
    c92d:	mov    DWORD PTR [rcx-0x38],eax
    c930:	cmp    r9,rcx
    c933:	jne    c8b6 <copyblock_sp+0x286>
    c935:	mov    eax,DWORD PTR [rsp+0x1c]
    c939:	mov    rdx,QWORD PTR [rip+0x7e068]        # 8a9a8 <enc_picture>
    c940:	lea    rcx,[rsi+0x100]
    c947:	lea    r9,[rsi+0x110]
    c94e:	mov    r8d,DWORD PTR [rsp+0x18]
    c953:	add    eax,DWORD PTR [rsi+0x9c]
    c959:	mov    rdx,QWORD PTR [rdx+0x1918]
    c960:	add    r8d,DWORD PTR [rsi+0x98]
    c967:	cdqe   
    c969:	movsxd r8,r8d
    c96c:	lea    rdi,[rdx+rax*8]
    c970:	add    r8,r8
    c973:	mov    rdx,QWORD PTR [rdi]
    c976:	lea    rax,[rcx-0x100]
    c97d:	add    rdx,r8
    c980:	mov    esi,DWORD PTR [rax+0x3338]
    c986:	add    rax,0x40
    c98a:	add    rdx,0x2
    c98e:	mov    WORD PTR [rdx-0x2],si
    c992:	cmp    rcx,rax
    c995:	jne    c980 <copyblock_sp+0x350>
    c997:	add    rcx,0x4
    c99b:	add    rdi,0x8
    c99f:	cmp    r9,rcx
    c9a2:	jne    c973 <copyblock_sp+0x343>
    c9a4:	mov    rax,QWORD PTR [rsp+0x68]
    c9a9:	xor    rax,QWORD PTR fs:0x28
    c9b2:	jne    c9c3 <copyblock_sp+0x393>
    c9b4:	add    rsp,0x78
    c9b8:	pop    rbx
    c9b9:	pop    rbp
    c9ba:	pop    r12
    c9bc:	pop    r13
    c9be:	pop    r14
    c9c0:	pop    r15
    c9c2:	ret    
    c9c3:	call   4390 <__stack_chk_fail@plt>
    c9c8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c9d0 <cabac_new_slice>:
    c9d0:	endbr64 
    c9d4:	mov    DWORD PTR [rip+0x7bee2],0x0        # 888c0 <last_dquant>
    c9de:	ret    
    c9df:	nop

000000000000c9e0 <CheckAvailabilityOfNeighborsCABAC>:
    c9e0:	endbr64 
    c9e4:	push   rbx
    c9e5:	mov    ecx,0x1
    c9ea:	xor    edx,edx
    c9ec:	mov    esi,0xffffffff
    c9f1:	sub    rsp,0x40
    c9f5:	mov    rax,QWORD PTR fs:0x28
    c9fe:	mov    QWORD PTR [rsp+0x38],rax
    ca03:	xor    eax,eax
    ca05:	mov    rax,QWORD PTR [rip+0x7bba4]        # 885b0 <img>
    ca0c:	lea    r8,[rsp+0x20]
    ca11:	movsxd rbx,DWORD PTR [rax+0xc]
    ca15:	mov    rdi,rbx
    ca18:	imul   rbx,rbx,0x278
    ca1f:	add    rbx,QWORD PTR [rax+0x3758]
    ca26:	call   30ae0 <getNeighbour>
    ca2b:	mov    ecx,0x1
    ca30:	mov    r8,rsp
    ca33:	xor    esi,esi
    ca35:	mov    rax,QWORD PTR [rip+0x7bb74]        # 885b0 <img>
    ca3c:	mov    edx,0xffffffff
    ca41:	mov    edi,DWORD PTR [rax+0xc]
    ca44:	call   30ae0 <getNeighbour>
    ca49:	mov    ecx,DWORD PTR [rsp]
    ca4c:	xor    eax,eax
    ca4e:	test   ecx,ecx
    ca50:	je     ca6c <CheckAvailabilityOfNeighborsCABAC+0x8c>
    ca52:	movsxd rax,DWORD PTR [rsp+0x4]
    ca57:	mov    rdx,QWORD PTR [rip+0x7bb52]        # 885b0 <img>
    ca5e:	imul   rax,rax,0x278
    ca65:	add    rax,QWORD PTR [rdx+0x3758]
    ca6c:	mov    edx,DWORD PTR [rsp+0x20]
    ca70:	mov    QWORD PTR [rbx+0x38],rax
    ca74:	xor    eax,eax
    ca76:	test   edx,edx
    ca78:	je     ca94 <CheckAvailabilityOfNeighborsCABAC+0xb4>
    ca7a:	movsxd rax,DWORD PTR [rsp+0x24]
    ca7f:	mov    rdx,QWORD PTR [rip+0x7bb2a]        # 885b0 <img>
    ca86:	imul   rax,rax,0x278
    ca8d:	add    rax,QWORD PTR [rdx+0x3758]
    ca94:	mov    QWORD PTR [rbx+0x40],rax
    ca98:	mov    rax,QWORD PTR [rsp+0x38]
    ca9d:	xor    rax,QWORD PTR fs:0x28
    caa6:	jne    caae <CheckAvailabilityOfNeighborsCABAC+0xce>
    caa8:	add    rsp,0x40
    caac:	pop    rbx
    caad:	ret    
    caae:	call   4390 <__stack_chk_fail@plt>
    cab3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    cabe:	xchg   ax,ax

000000000000cac0 <create_contexts_MotionInfo>:
    cac0:	endbr64 
    cac4:	sub    rsp,0x18
    cac8:	mov    esi,0x5e0
    cacd:	mov    edi,0x1
    cad2:	call   4400 <calloc@plt>
    cad7:	test   rax,rax
    cada:	je     cae1 <create_contexts_MotionInfo+0x21>
    cadc:	add    rsp,0x18
    cae0:	ret    
    cae1:	lea    rdi,[rip+0x5dfb0]        # 6aa98 <QP_SCALE_CR+0x58>
    cae8:	mov    QWORD PTR [rsp+0x8],rax
    caed:	call   38210 <no_mem_exit>
    caf2:	mov    rax,QWORD PTR [rsp+0x8]
    caf7:	jmp    cadc <create_contexts_MotionInfo+0x1c>
    caf9:	nop    DWORD PTR [rax+0x0]

000000000000cb00 <create_contexts_TextureInfo>:
    cb00:	endbr64 
    cb04:	sub    rsp,0x18
    cb08:	mov    esi,0x2f60
    cb0d:	mov    edi,0x1
    cb12:	call   4400 <calloc@plt>
    cb17:	test   rax,rax
    cb1a:	je     cb21 <create_contexts_TextureInfo+0x21>
    cb1c:	add    rsp,0x18
    cb20:	ret    
    cb21:	lea    rdi,[rip+0x5df98]        # 6aac0 <QP_SCALE_CR+0x80>
    cb28:	mov    QWORD PTR [rsp+0x8],rax
    cb2d:	call   38210 <no_mem_exit>
    cb32:	mov    rax,QWORD PTR [rsp+0x8]
    cb37:	jmp    cb1c <create_contexts_TextureInfo+0x1c>
    cb39:	nop    DWORD PTR [rax+0x0]

000000000000cb40 <delete_contexts_MotionInfo>:
    cb40:	endbr64 
    cb44:	test   rdi,rdi
    cb47:	je     cb50 <delete_contexts_MotionInfo+0x10>
    cb49:	jmp    42d0 <free@plt>
    cb4e:	xchg   ax,ax
    cb50:	ret    
    cb51:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    cb5c:	nop    DWORD PTR [rax+0x0]

000000000000cb60 <delete_contexts_TextureInfo>:
    cb60:	endbr64 
    cb64:	test   rdi,rdi
    cb67:	je     cb70 <delete_contexts_TextureInfo+0x10>
    cb69:	jmp    42d0 <free@plt>
    cb6e:	xchg   ax,ax
    cb70:	ret    
    cb71:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    cb7c:	nop    DWORD PTR [rax+0x0]

000000000000cb80 <writeSyntaxElement_CABAC>:
    cb80:	endbr64 
    cb84:	push   r13
    cb86:	lea    r13,[rsi+0x8]
    cb8a:	push   r12
    cb8c:	push   rbp
    cb8d:	mov    rbp,rsi
    cb90:	push   rbx
    cb91:	mov    rbx,rdi
    cb94:	mov    rdi,r13
    cb97:	sub    rsp,0x8
    cb9b:	call   4ee0 <arienco_bits_written>
    cba0:	mov    rsi,r13
    cba3:	mov    rdi,rbx
    cba6:	mov    r12d,eax
    cba9:	call   QWORD PTR [rbx+0x28]
    cbac:	mov    eax,DWORD PTR [rbx]
    cbae:	test   eax,eax
    cbb0:	je     cbbd <writeSyntaxElement_CABAC+0x3d>
    cbb2:	mov    rax,QWORD PTR [rbp+0x0]
    cbb6:	mov    DWORD PTR [rax+0x28],0x1
    cbbd:	mov    rdi,r13
    cbc0:	call   4ee0 <arienco_bits_written>
    cbc5:	sub    eax,r12d
    cbc8:	mov    DWORD PTR [rbx+0xc],eax
    cbcb:	add    rsp,0x8
    cbcf:	pop    rbx
    cbd0:	pop    rbp
    cbd1:	pop    r12
    cbd3:	pop    r13
    cbd5:	ret    
    cbd6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000cbe0 <writeFieldModeInfo_CABAC>:
    cbe0:	endbr64 
    cbe4:	push   rbp
    cbe5:	mov    rbp,rdi
    cbe8:	mov    rdi,rsi
    cbeb:	push   rbx
    cbec:	sub    rsp,0x8
    cbf0:	mov    rax,QWORD PTR [rip+0x7b9b9]        # 885b0 <img>
    cbf7:	mov    esi,DWORD PTR [rbp+0x4]
    cbfa:	mov    rdx,QWORD PTR [rax+0x3750]
    cc01:	mov    rcx,QWORD PTR [rdx+0x20]
    cc05:	mov    rdx,QWORD PTR [rax+0x3758]
    cc0c:	movsxd rax,DWORD PTR [rax+0xc]
    cc10:	imul   rax,rax,0x278
    cc17:	add    rax,rdx
    cc1a:	mov    ebx,DWORD PTR [rax+0x228]
    cc20:	test   ebx,ebx
    cc22:	je     cc3a <writeFieldModeInfo_CABAC+0x5a>
    cc24:	movsxd r8,DWORD PTR [rax+0x218]
    cc2b:	imul   r8,r8,0x278
    cc32:	mov    ebx,DWORD PTR [rdx+r8*1+0x214]
    cc3a:	mov    r8d,DWORD PTR [rax+0x22c]
    cc41:	test   r8d,r8d
    cc44:	je     cc5b <writeFieldModeInfo_CABAC+0x7b>
    cc46:	movsxd rax,DWORD PTR [rax+0x21c]
    cc4d:	imul   rax,rax,0x278
    cc54:	add    ebx,DWORD PTR [rdx+rax*1+0x214]
    cc5b:	movsxd rdx,ebx
    cc5e:	add    rdx,0x57
    cc62:	shl    rdx,0x4
    cc66:	add    rdx,rcx
    cc69:	test   esi,esi
    cc6b:	je     cc72 <writeFieldModeInfo_CABAC+0x92>
    cc6d:	mov    esi,0x1
    cc72:	call   5140 <biari_encode_symbol>
    cc77:	mov    DWORD PTR [rbp+0x18],ebx
    cc7a:	add    rsp,0x8
    cc7e:	pop    rbx
    cc7f:	pop    rbp
    cc80:	ret    
    cc81:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    cc8c:	nop    DWORD PTR [rax+0x0]

000000000000cc90 <writeMB_skip_flagInfo_CABAC>:
    cc90:	endbr64 
    cc94:	mov    rax,QWORD PTR [rip+0x7b915]        # 885b0 <img>
    cc9b:	push   r14
    cc9d:	push   r13
    cc9f:	push   r12
    cca1:	mov    r12,rdi
    cca4:	mov    rdi,rsi
    cca7:	push   rbp
    cca8:	mov    r13d,DWORD PTR [r12+0x4]
    ccad:	xor    ebp,ebp
    ccaf:	push   rbx
    ccb0:	movsxd rbx,DWORD PTR [rax+0xc]
    ccb4:	mov    rdx,QWORD PTR [rax+0x3750]
    ccbb:	mov    r14d,DWORD PTR [rax+0x18]
    ccbf:	imul   rbx,rbx,0x278
    ccc6:	add    rbx,QWORD PTR [rax+0x3758]
    cccd:	mov    rcx,QWORD PTR [rdx+0x20]
    ccd1:	mov    rax,QWORD PTR [rbx+0x38]
    ccd5:	cmp    r14d,0x1
    ccd9:	je     cd50 <writeMB_skip_flagInfo_CABAC+0xc0>
    ccdb:	test   rax,rax
    ccde:	je     ccee <writeMB_skip_flagInfo_CABAC+0x5e>
    cce0:	mov    edx,DWORD PTR [rax+0x270]
    cce6:	xor    ebp,ebp
    cce8:	test   edx,edx
    ccea:	setne  bpl
    ccee:	mov    rax,QWORD PTR [rbx+0x40]
    ccf2:	test   rax,rax
    ccf5:	je     cd07 <writeMB_skip_flagInfo_CABAC+0x77>
    ccf7:	mov    eax,DWORD PTR [rax+0x270]
    ccfd:	test   eax,eax
    ccff:	setne  al
    cd02:	movzx  eax,al
    cd05:	add    ebp,eax
    cd07:	movsxd rdx,ebp
    cd0a:	add    rdx,0xb
    cd0e:	shl    rdx,0x4
    cd12:	add    rdx,rcx
    cd15:	test   r13d,r13d
    cd18:	je     cd40 <writeMB_skip_flagInfo_CABAC+0xb0>
    cd1a:	xor    esi,esi
    cd1c:	call   5140 <biari_encode_symbol>
    cd21:	xor    eax,eax
    cd23:	test   r13d,r13d
    cd26:	setne  al
    cd29:	mov    DWORD PTR [rbx+0x270],eax
    cd2f:	pop    rbx
    cd30:	mov    DWORD PTR [r12+0x18],ebp
    cd35:	pop    rbp
    cd36:	pop    r12
    cd38:	pop    r13
    cd3a:	pop    r14
    cd3c:	ret    
    cd3d:	nop    DWORD PTR [rax]
    cd40:	mov    esi,0x1
    cd45:	call   5140 <biari_encode_symbol>
    cd4a:	jmp    cd21 <writeMB_skip_flagInfo_CABAC+0x91>
    cd4c:	nop    DWORD PTR [rax+0x0]
    cd50:	test   rax,rax
    cd53:	je     cd65 <writeMB_skip_flagInfo_CABAC+0xd5>
    cd55:	mov    r10d,DWORD PTR [rax+0x270]
    cd5c:	xor    ebp,ebp
    cd5e:	test   r10d,r10d
    cd61:	setne  bpl
    cd65:	mov    rdx,QWORD PTR [rbx+0x40]
    cd69:	mov    eax,0x7
    cd6e:	test   rdx,rdx
    cd71:	je     cd85 <writeMB_skip_flagInfo_CABAC+0xf5>
    cd73:	mov    r9d,DWORD PTR [rdx+0x270]
    cd7a:	xor    eax,eax
    cd7c:	test   r9d,r9d
    cd7f:	setne  al
    cd82:	add    eax,0x7
    cd85:	add    ebp,eax
    cd87:	movsxd rdx,ebp
    cd8a:	add    rdx,0x16
    cd8e:	shl    rdx,0x4
    cd92:	add    rdx,rcx
    cd95:	test   r13d,r13d
    cd98:	jne    cda4 <writeMB_skip_flagInfo_CABAC+0x114>
    cd9a:	mov    r8d,DWORD PTR [r12+0x8]
    cd9f:	test   r8d,r8d
    cda2:	je     cdf0 <writeMB_skip_flagInfo_CABAC+0x160>
    cda4:	xor    esi,esi
    cda6:	call   5140 <biari_encode_symbol>
    cdab:	mov    esi,DWORD PTR [r12+0x4]
    cdb0:	test   esi,esi
    cdb2:	je     cdd0 <writeMB_skip_flagInfo_CABAC+0x140>
    cdb4:	mov    DWORD PTR [rbx+0x270],r14d
    cdbb:	pop    rbx
    cdbc:	mov    DWORD PTR [r12+0x18],ebp
    cdc1:	pop    rbp
    cdc2:	pop    r12
    cdc4:	pop    r13
    cdc6:	pop    r14
    cdc8:	ret    
    cdc9:	nop    DWORD PTR [rax+0x0]
    cdd0:	mov    ecx,DWORD PTR [r12+0x8]
    cdd5:	xor    r14d,r14d
    cdd8:	test   ecx,ecx
    cdda:	setne  r14b
    cdde:	mov    DWORD PTR [rbx+0x270],r14d
    cde5:	jmp    cdbb <writeMB_skip_flagInfo_CABAC+0x12b>
    cde7:	nop    WORD PTR [rax+rax*1+0x0]
    cdf0:	mov    esi,0x1
    cdf5:	call   5140 <biari_encode_symbol>
    cdfa:	jmp    cdab <writeMB_skip_flagInfo_CABAC+0x11b>
    cdfc:	nop    DWORD PTR [rax+0x0]

000000000000ce00 <writeMB_transform_size_CABAC>:
    ce00:	endbr64 
    ce04:	mov    rax,QWORD PTR [rip+0x7b7a5]        # 885b0 <img>
    ce0b:	mov    rcx,rdi
    ce0e:	mov    rdi,rsi
    ce11:	mov    rdx,QWORD PTR [rax+0x3750]
    ce18:	mov    r8,QWORD PTR [rdx+0x20]
    ce1c:	movsxd rdx,DWORD PTR [rax+0xc]
    ce20:	imul   rdx,rdx,0x278
    ce27:	add    rdx,QWORD PTR [rax+0x3758]
    ce2e:	xor    eax,eax
    ce30:	mov    rsi,QWORD PTR [rdx+0x38]
    ce34:	test   rsi,rsi
    ce37:	je     ce3f <writeMB_transform_size_CABAC+0x3f>
    ce39:	mov    eax,DWORD PTR [rsi+0x23c]
    ce3f:	mov    rsi,QWORD PTR [rdx+0x40]
    ce43:	test   rsi,rsi
    ce46:	je     ce4e <writeMB_transform_size_CABAC+0x4e>
    ce48:	add    eax,DWORD PTR [rsi+0x23c]
    ce4e:	mov    esi,DWORD PTR [rdx+0x23c]
    ce54:	mov    DWORD PTR [rcx+0x18],eax
    ce57:	cdqe   
    ce59:	shl    rax,0x4
    ce5d:	lea    rdx,[r8+rax*1+0x5b0]
    ce65:	test   esi,esi
    ce67:	je     ce6e <writeMB_transform_size_CABAC+0x6e>
    ce69:	mov    esi,0x1
    ce6e:	jmp    5140 <biari_encode_symbol>
    ce73:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    ce7e:	xchg   ax,ax

000000000000ce80 <writeMB_typeInfo_CABAC>:
    ce80:	endbr64 
    ce84:	push   r15
    ce86:	push   r14
    ce88:	push   r13
    ce8a:	push   r12
    ce8c:	mov    r12,rsi
    ce8f:	push   rbp
    ce90:	push   rbx
    ce91:	sub    rsp,0x28
    ce95:	mov    rdx,QWORD PTR [rip+0x7b714]        # 885b0 <img>
    ce9c:	mov    ebx,DWORD PTR [rdi+0x4]
    ce9f:	mov    rax,QWORD PTR [rdx+0x3750]
    cea6:	mov    r15d,DWORD PTR [rdx+0x18]
    ceaa:	mov    rbp,QWORD PTR [rax+0x20]
    ceae:	movsxd rax,DWORD PTR [rdx+0xc]
    ceb2:	imul   rax,rax,0x278
    ceb9:	add    rax,QWORD PTR [rdx+0x3758]
    cec0:	cmp    r15d,0x2
    cec4:	je     d110 <writeMB_typeInfo_CABAC+0x290>
    ceca:	cmp    r15d,0x1
    cece:	je     cfc0 <writeMB_typeInfo_CABAC+0x140>
    ced4:	cmp    ebx,0x6
    ced7:	jle    d0f8 <writeMB_typeInfo_CABAC+0x278>
    cedd:	lea    rdx,[rbp+0xf0]
    cee4:	mov    esi,0x1
    cee9:	lea    r13d,[rbx-0x7]
    ceed:	mov    rdi,r12
    cef0:	call   5140 <biari_encode_symbol>
    cef5:	lea    rdx,[rbp+0x120]
    cefc:	mov    esi,0x1
    cf01:	mov    rdi,r12
    cf04:	call   5140 <biari_encode_symbol>
    cf09:	cmp    r13d,0x19
    cf0d:	je     d335 <writeMB_typeInfo_CABAC+0x4b5>
    cf13:	mov    edx,0xaaaaaaab
    cf18:	mov    eax,r13d
    cf1b:	xor    esi,esi
    cf1d:	mov    rdi,r12
    cf20:	imul   rax,rdx
    cf24:	shr    rax,0x23
    cf28:	mov    r15d,eax
    cf2b:	lea    eax,[rax+rax*2]
    cf2e:	shl    eax,0x2
    cf31:	sub    r13d,eax
    cf34:	mov    eax,r13d
    cf37:	mov    ebx,r13d
    cf3a:	mov    r14d,r13d
    cf3d:	sar    r14d,1
    cf40:	and    eax,0x1
    cf43:	sar    ebx,0x2
    cf46:	mov    r13d,eax
    cf49:	and    r14d,0x1
    cf4d:	call   5570 <biari_encode_symbol_final>
    cf52:	lea    rdx,[rbp+0x130]
    cf59:	movzx  esi,r15b
    cf5d:	mov    rdi,r12
    cf60:	call   5140 <biari_encode_symbol>
    cf65:	lea    r15,[rbp+0x140]
    cf6c:	mov    rdx,r15
    cf6f:	test   ebx,ebx
    cf71:	je     d3a0 <writeMB_typeInfo_CABAC+0x520>
    cf77:	mov    esi,0x1
    cf7c:	mov    rdi,r12
    cf7f:	call   5140 <biari_encode_symbol>
    cf84:	mov    rdx,r15
    cf87:	cmp    ebx,0x1
    cf8a:	je     d3a0 <writeMB_typeInfo_CABAC+0x520>
    cf90:	mov    esi,0x1
    cf95:	mov    rdi,r12
    cf98:	call   5140 <biari_encode_symbol>
    cf9d:	lea    r15,[rbp+0x150]
    cfa4:	mov    esi,r14d
    cfa7:	mov    rdi,r12
    cfaa:	mov    rdx,r15
    cfad:	call   5140 <biari_encode_symbol>
    cfb2:	mov    rdx,r15
    cfb5:	mov    esi,r13d
    cfb8:	jmp    d21d <writeMB_typeInfo_CABAC+0x39d>
    cfbd:	nop    DWORD PTR [rax]
    cfc0:	mov    rsi,QWORD PTR [rax+0x38]
    cfc4:	xor    edx,edx
    cfc6:	test   rsi,rsi
    cfc9:	je     cfd7 <writeMB_typeInfo_CABAC+0x157>
    cfcb:	mov    r8d,DWORD PTR [rsi+0x48]
    cfcf:	xor    edx,edx
    cfd1:	test   r8d,r8d
    cfd4:	setne  dl
    cfd7:	mov    rax,QWORD PTR [rax+0x40]
    cfdb:	test   rax,rax
    cfde:	je     cfec <writeMB_typeInfo_CABAC+0x16c>
    cfe0:	mov    esi,DWORD PTR [rax+0x48]
    cfe3:	xor    eax,eax
    cfe5:	test   esi,esi
    cfe7:	setne  al
    cfea:	add    edx,eax
    cfec:	mov    DWORD PTR [rdi+0x18],edx
    cfef:	movsxd rdx,edx
    cff2:	add    rdx,0x16
    cff6:	shl    rdx,0x4
    cffa:	add    rdx,rbp
    cffd:	cmp    ebx,0x17
    d000:	jle    d2d0 <writeMB_typeInfo_CABAC+0x450>
    d006:	mov    DWORD PTR [rsp],0x1
    d00d:	lea    r13d,[rbx-0x18]
    d011:	lea    r9,[rbp+0x1a0]
    d018:	mov    ebx,0x17
    d01d:	lea    r14,[rbp+0x1c0]
    d024:	lea    r10,[rbp+0x1b0]
    d02b:	mov    esi,0x1
    d030:	mov    rdi,r12
    d033:	mov    QWORD PTR [rsp+0x10],r10
    d038:	mov    QWORD PTR [rsp+0x8],r9
    d03d:	call   5140 <biari_encode_symbol>
    d042:	mov    r9,QWORD PTR [rsp+0x8]
    d047:	mov    esi,0x1
    d04c:	mov    rdi,r12
    d04f:	mov    rdx,r9
    d052:	call   5140 <biari_encode_symbol>
    d057:	mov    r10,QWORD PTR [rsp+0x10]
    d05c:	mov    esi,0x1
    d061:	mov    rdi,r12
    d064:	mov    rdx,r10
    d067:	call   5140 <biari_encode_symbol>
    d06c:	mov    DWORD PTR [rsp+0x8],0x0
    d074:	mov    rdx,r14
    d077:	mov    esi,0x1
    d07c:	mov    rdi,r12
    d07f:	call   5140 <biari_encode_symbol>
    d084:	mov    ecx,DWORD PTR [rsp+0x8]
    d088:	mov    rdx,r14
    d08b:	test   ecx,ecx
    d08d:	je     d3d0 <writeMB_typeInfo_CABAC+0x550>
    d093:	mov    esi,0x1
    d098:	mov    rdi,r12
    d09b:	call   5140 <biari_encode_symbol>
    d0a0:	mov    rdx,r14
    d0a3:	test   r15d,r15d
    d0a6:	je     d3c0 <writeMB_typeInfo_CABAC+0x540>
    d0ac:	mov    esi,0x1
    d0b1:	mov    rdi,r12
    d0b4:	call   5140 <biari_encode_symbol>
    d0b9:	mov    eax,DWORD PTR [rsp]
    d0bc:	mov    rdx,r14
    d0bf:	test   eax,eax
    d0c1:	je     d3b0 <writeMB_typeInfo_CABAC+0x530>
    d0c7:	mov    esi,0x1
    d0cc:	mov    rdi,r12
    d0cf:	call   5140 <biari_encode_symbol>
    d0d4:	cmp    ebx,0x15
    d0d7:	jle    d0e2 <writeMB_typeInfo_CABAC+0x262>
    d0d9:	cmp    ebx,0x17
    d0dc:	je     cf09 <writeMB_typeInfo_CABAC+0x89>
    d0e2:	add    rsp,0x28
    d0e6:	pop    rbx
    d0e7:	pop    rbp
    d0e8:	pop    r12
    d0ea:	pop    r13
    d0ec:	pop    r14
    d0ee:	pop    r15
    d0f0:	ret    
    d0f1:	nop    DWORD PTR [rax+0x0]
    d0f8:	ja     d3df <writeMB_typeInfo_CABAC+0x55f>
    d0fe:	lea    rdx,[rip+0x5da1b]        # 6ab20 <QP_SCALE_CR+0xe0>
    d105:	movsxd rax,DWORD PTR [rdx+rbx*4]
    d109:	add    rax,rdx
    d10c:	notrack jmp rax
    d10f:	nop
    d110:	mov    rcx,QWORD PTR [rax+0x38]
    d114:	xor    edx,edx
    d116:	test   rcx,rcx
    d119:	je     d12a <writeMB_typeInfo_CABAC+0x2aa>
    d11b:	mov    edx,DWORD PTR [rcx+0x48]
    d11e:	and    edx,0xfffffffb
    d121:	cmp    edx,0x9
    d124:	setne  dl
    d127:	movzx  edx,dl
    d12a:	mov    rax,QWORD PTR [rax+0x40]
    d12e:	test   rax,rax
    d131:	je     d144 <writeMB_typeInfo_CABAC+0x2c4>
    d133:	mov    eax,DWORD PTR [rax+0x48]
    d136:	and    eax,0xfffffffb
    d139:	cmp    eax,0x9
    d13c:	setne  al
    d13f:	movzx  eax,al
    d142:	add    edx,eax
    d144:	mov    DWORD PTR [rdi+0x18],edx
    d147:	movsxd rdx,edx
    d14a:	shl    rdx,0x4
    d14e:	add    rdx,rbp
    d151:	test   ebx,ebx
    d153:	je     d21b <writeMB_typeInfo_CABAC+0x39b>
    d159:	mov    esi,0x1
    d15e:	mov    rdi,r12
    d161:	cmp    ebx,0x19
    d164:	je     d330 <writeMB_typeInfo_CABAC+0x4b0>
    d16a:	call   5140 <biari_encode_symbol>
    d16f:	sub    ebx,0x1
    d172:	xor    esi,esi
    d174:	mov    rdi,r12
    d177:	call   5570 <biari_encode_symbol_final>
    d17c:	movsxd r13,ebx
    d17f:	mov    eax,ebx
    d181:	lea    rdx,[rbp+0x40]
    d185:	imul   r13,r13,0x2aaaaaab
    d18c:	sar    eax,0x1f
    d18f:	mov    rdi,r12
    d192:	sar    r13,0x21
    d196:	sub    r13d,eax
    d199:	movzx  esi,r13b
    d19d:	call   5140 <biari_encode_symbol>
    d1a2:	lea    eax,[r13+r13*2+0x0]
    d1a7:	lea    rdx,[rbp+0x50]
    d1ab:	shl    eax,0x2
    d1ae:	sub    ebx,eax
    d1b0:	lea    eax,[rbx+0x3]
    d1b3:	cmovns eax,ebx
    d1b6:	sar    eax,0x2
    d1b9:	mov    r13d,eax
    d1bc:	je     d350 <writeMB_typeInfo_CABAC+0x4d0>
    d1c2:	mov    esi,0x1
    d1c7:	mov    rdi,r12
    d1ca:	call   5140 <biari_encode_symbol>
    d1cf:	lea    rdx,[rbp+0x60]
    d1d3:	cmp    r13d,0x1
    d1d7:	je     d350 <writeMB_typeInfo_CABAC+0x4d0>
    d1dd:	mov    esi,0x1
    d1e2:	mov    rdi,r12
    d1e5:	call   5140 <biari_encode_symbol>
    d1ea:	jmp    d35a <writeMB_typeInfo_CABAC+0x4da>
    d1ef:	lea    rdx,[rbp+0xf0]
    d1f6:	xor    esi,esi
    d1f8:	mov    rdi,r12
    d1fb:	call   5140 <biari_encode_symbol>
    d200:	lea    rdx,[rbp+0x100]
    d207:	mov    esi,0x1
    d20c:	mov    rdi,r12
    d20f:	call   5140 <biari_encode_symbol>
    d214:	lea    rdx,[rbp+0x120]
    d21b:	xor    esi,esi
    d21d:	add    rsp,0x28
    d221:	mov    rdi,r12
    d224:	pop    rbx
    d225:	pop    rbp
    d226:	pop    r12
    d228:	pop    r13
    d22a:	pop    r14
    d22c:	pop    r15
    d22e:	jmp    5140 <biari_encode_symbol>
    d233:	lea    rdx,[rbp+0xf0]
    d23a:	xor    esi,esi
    d23c:	mov    rdi,r12
    d23f:	call   5140 <biari_encode_symbol>
    d244:	lea    rdx,[rbp+0x100]
    d24b:	xor    esi,esi
    d24d:	mov    rdi,r12
    d250:	call   5140 <biari_encode_symbol>
    d255:	lea    rdx,[rbp+0x110]
    d25c:	mov    esi,0x1
    d261:	jmp    d21d <writeMB_typeInfo_CABAC+0x39d>
    d263:	lea    rdx,[rbp+0xf0]
    d26a:	xor    esi,esi
    d26c:	mov    rdi,r12
    d26f:	call   5140 <biari_encode_symbol>
    d274:	lea    rdx,[rbp+0x100]
    d27b:	mov    esi,0x1
    d280:	mov    rdi,r12
    d283:	call   5140 <biari_encode_symbol>
    d288:	lea    rdx,[rbp+0x120]
    d28f:	mov    esi,0x1
    d294:	jmp    d21d <writeMB_typeInfo_CABAC+0x39d>
    d296:	lea    rdx,[rbp+0xf0]
    d29d:	xor    esi,esi
    d29f:	mov    rdi,r12
    d2a2:	call   5140 <biari_encode_symbol>
    d2a7:	lea    rdx,[rbp+0x100]
    d2ae:	xor    esi,esi
    d2b0:	mov    rdi,r12
    d2b3:	call   5140 <biari_encode_symbol>
    d2b8:	lea    rdx,[rbp+0x110]
    d2bf:	jmp    d21b <writeMB_typeInfo_CABAC+0x39b>
    d2c4:	lea    rdx,[rbp+0xf0]
    d2cb:	jmp    d207 <writeMB_typeInfo_CABAC+0x387>
    d2d0:	test   ebx,ebx
    d2d2:	je     d21b <writeMB_typeInfo_CABAC+0x39b>
    d2d8:	lea    r9,[rbp+0x1a0]
    d2df:	lea    r14,[rbp+0x1c0]
    d2e6:	cmp    ebx,0x2
    d2e9:	jg     d3f5 <writeMB_typeInfo_CABAC+0x575>
    d2ef:	mov    esi,0x1
    d2f4:	mov    rdi,r12
    d2f7:	mov    QWORD PTR [rsp],r9
    d2fb:	call   5140 <biari_encode_symbol>
    d300:	mov    r9,QWORD PTR [rsp]
    d304:	xor    esi,esi
    d306:	mov    rdi,r12
    d309:	mov    rdx,r9
    d30c:	call   5140 <biari_encode_symbol>
    d311:	mov    rdx,r14
    d314:	cmp    ebx,0x1
    d317:	je     d21b <writeMB_typeInfo_CABAC+0x39b>
    d31d:	mov    esi,0x1
    d322:	jmp    d21d <writeMB_typeInfo_CABAC+0x39d>
    d327:	nop    WORD PTR [rax+rax*1+0x0]
    d330:	call   5140 <biari_encode_symbol>
    d335:	add    rsp,0x28
    d339:	mov    rdi,r12
    d33c:	mov    esi,0x1
    d341:	pop    rbx
    d342:	pop    rbp
    d343:	pop    r12
    d345:	pop    r13
    d347:	pop    r14
    d349:	pop    r15
    d34b:	jmp    5570 <biari_encode_symbol_final>
    d350:	xor    esi,esi
    d352:	mov    rdi,r12
    d355:	call   5140 <biari_encode_symbol>
    d35a:	mov    eax,ebx
    d35c:	lea    rdx,[rbp+0x70]
    d360:	mov    rdi,r12
    d363:	sar    eax,0x1f
    d366:	shr    eax,0x1e
    d369:	add    ebx,eax
    d36b:	and    ebx,0x3
    d36e:	sub    ebx,eax
    d370:	mov    esi,ebx
    d372:	shr    esi,0x1f
    d375:	add    esi,ebx
    d377:	sar    esi,1
    d379:	movzx  esi,sil
    d37d:	call   5140 <biari_encode_symbol>
    d382:	mov    eax,ebx
    d384:	lea    rdx,[rbp+0x80]
    d38b:	shr    eax,0x1f
    d38e:	lea    esi,[rbx+rax*1]
    d391:	and    esi,0x1
    d394:	sub    esi,eax
    d396:	movzx  esi,sil
    d39a:	jmp    d21d <writeMB_typeInfo_CABAC+0x39d>
    d39f:	nop
    d3a0:	xor    esi,esi
    d3a2:	mov    rdi,r12
    d3a5:	call   5140 <biari_encode_symbol>
    d3aa:	jmp    cf9d <writeMB_typeInfo_CABAC+0x11d>
    d3af:	nop
    d3b0:	xor    esi,esi
    d3b2:	mov    rdi,r12
    d3b5:	call   5140 <biari_encode_symbol>
    d3ba:	jmp    d0d4 <writeMB_typeInfo_CABAC+0x254>
    d3bf:	nop
    d3c0:	xor    esi,esi
    d3c2:	mov    rdi,r12
    d3c5:	call   5140 <biari_encode_symbol>
    d3ca:	jmp    d0b9 <writeMB_typeInfo_CABAC+0x239>
    d3cf:	nop
    d3d0:	xor    esi,esi
    d3d2:	mov    rdi,r12
    d3d5:	call   5140 <biari_encode_symbol>
    d3da:	jmp    d0a0 <writeMB_typeInfo_CABAC+0x220>
    d3df:	lea    rdi,[rip+0x5d702]        # 6aae8 <QP_SCALE_CR+0xa8>
    d3e6:	call   4320 <puts@plt>
    d3eb:	mov    edi,0x1
    d3f0:	call   44e0 <exit@plt>
    d3f5:	lea    r10,[rbp+0x1b0]
    d3fc:	cmp    ebx,0xa
    d3ff:	jle    d4a6 <writeMB_typeInfo_CABAC+0x626>
    d405:	cmp    ebx,0xb
    d408:	je     d530 <writeMB_typeInfo_CABAC+0x6b0>
    d40e:	cmp    ebx,0x16
    d411:	je     d530 <writeMB_typeInfo_CABAC+0x6b0>
    d417:	cmp    ebx,0x17
    d41a:	je     d5c7 <writeMB_typeInfo_CABAC+0x747>
    d420:	lea    ecx,[rbx-0xc]
    d423:	mov    eax,ebx
    d425:	mov    esi,0x1
    d42a:	mov    rdi,r12
    d42d:	mov    r15d,ecx
    d430:	mov    r13d,ecx
    d433:	sar    ecx,1
    d435:	and    eax,0x1
    d438:	sar    r15d,0x2
    d43c:	and    ecx,0x1
    d43f:	mov    QWORD PTR [rsp+0x18],r10
    d444:	sar    r13d,0x3
    d448:	and    r15d,0x1
    d44c:	mov    QWORD PTR [rsp+0x10],r9
    d451:	mov    DWORD PTR [rsp+0x8],r15d
    d456:	mov    r15d,ecx
    d459:	mov    DWORD PTR [rsp],eax
    d45c:	call   5140 <biari_encode_symbol>
    d461:	mov    r9,QWORD PTR [rsp+0x10]
    d466:	mov    esi,0x1
    d46b:	mov    rdi,r12
    d46e:	mov    rdx,r9
    d471:	call   5140 <biari_encode_symbol>
    d476:	mov    r10,QWORD PTR [rsp+0x18]
    d47b:	mov    esi,0x1
    d480:	mov    rdi,r12
    d483:	mov    rdx,r10
    d486:	call   5140 <biari_encode_symbol>
    d48b:	test   r13d,r13d
    d48e:	jne    d5bf <writeMB_typeInfo_CABAC+0x73f>
    d494:	mov    rdx,r14
    d497:	xor    esi,esi
    d499:	mov    rdi,r12
    d49c:	call   5140 <biari_encode_symbol>
    d4a1:	jmp    d084 <writeMB_typeInfo_CABAC+0x204>
    d4a6:	mov    esi,0x1
    d4ab:	mov    rdi,r12
    d4ae:	mov    QWORD PTR [rsp+0x8],r10
    d4b3:	sub    ebx,0x3
    d4b6:	mov    QWORD PTR [rsp],r9
    d4ba:	call   5140 <biari_encode_symbol>
    d4bf:	mov    r9,QWORD PTR [rsp]
    d4c3:	mov    esi,0x1
    d4c8:	mov    rdi,r12
    d4cb:	mov    rdx,r9
    d4ce:	call   5140 <biari_encode_symbol>
    d4d3:	mov    r10,QWORD PTR [rsp+0x8]
    d4d8:	xor    esi,esi
    d4da:	mov    rdi,r12
    d4dd:	mov    rdx,r10
    d4e0:	call   5140 <biari_encode_symbol>
    d4e5:	mov    eax,ebx
    d4e7:	mov    rdx,r14
    d4ea:	shr    eax,0x2
    d4ed:	je     d5b0 <writeMB_typeInfo_CABAC+0x730>
    d4f3:	mov    esi,0x1
    d4f8:	mov    rdi,r12
    d4fb:	call   5140 <biari_encode_symbol>
    d500:	mov    rdx,r14
    d503:	test   bl,0x2
    d506:	je     d5a0 <writeMB_typeInfo_CABAC+0x720>
    d50c:	mov    esi,0x1
    d511:	mov    rdi,r12
    d514:	call   5140 <biari_encode_symbol>
    d519:	and    ebx,0x1
    d51c:	mov    rdx,r14
    d51f:	je     d21b <writeMB_typeInfo_CABAC+0x39b>
    d525:	jmp    d31d <writeMB_typeInfo_CABAC+0x49d>
    d52a:	nop    WORD PTR [rax+rax*1+0x0]
    d530:	mov    esi,0x1
    d535:	mov    rdi,r12
    d538:	mov    QWORD PTR [rsp+0x8],r10
    d53d:	mov    QWORD PTR [rsp],r9
    d541:	call   5140 <biari_encode_symbol>
    d546:	mov    r9,QWORD PTR [rsp]
    d54a:	mov    esi,0x1
    d54f:	mov    rdi,r12
    d552:	mov    rdx,r9
    d555:	call   5140 <biari_encode_symbol>
    d55a:	mov    r10,QWORD PTR [rsp+0x8]
    d55f:	mov    esi,0x1
    d564:	mov    rdi,r12
    d567:	mov    rdx,r10
    d56a:	call   5140 <biari_encode_symbol>
    d56f:	mov    rdx,r14
    d572:	mov    esi,0x1
    d577:	mov    rdi,r12
    d57a:	call   5140 <biari_encode_symbol>
    d57f:	mov    rdx,r14
    d582:	mov    esi,0x1
    d587:	mov    rdi,r12
    d58a:	call   5140 <biari_encode_symbol>
    d58f:	mov    rdx,r14
    d592:	cmp    ebx,0xb
    d595:	jne    d31d <writeMB_typeInfo_CABAC+0x49d>
    d59b:	jmp    d21b <writeMB_typeInfo_CABAC+0x39b>
    d5a0:	xor    esi,esi
    d5a2:	mov    rdi,r12
    d5a5:	call   5140 <biari_encode_symbol>
    d5aa:	jmp    d519 <writeMB_typeInfo_CABAC+0x699>
    d5af:	nop
    d5b0:	xor    esi,esi
    d5b2:	mov    rdi,r12
    d5b5:	call   5140 <biari_encode_symbol>
    d5ba:	jmp    d500 <writeMB_typeInfo_CABAC+0x680>
    d5bf:	xor    r13d,r13d
    d5c2:	jmp    d074 <writeMB_typeInfo_CABAC+0x1f4>
    d5c7:	mov    DWORD PTR [rsp],0x0
    d5ce:	mov    ebx,0x16
    d5d3:	xor    r13d,r13d
    d5d6:	jmp    d02b <writeMB_typeInfo_CABAC+0x1ab>
    d5db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d5e0 <writeB8_typeInfo_CABAC>:
    d5e0:	endbr64 
    d5e4:	push   r15
    d5e6:	push   r14
    d5e8:	push   r13
    d5ea:	push   r12
    d5ec:	push   rbp
    d5ed:	mov    rbp,rsi
    d5f0:	push   rbx
    d5f1:	sub    rsp,0x8
    d5f5:	mov    rax,QWORD PTR [rip+0x7afb4]        # 885b0 <img>
    d5fc:	mov    ebx,DWORD PTR [rdi+0x4]
    d5ff:	mov    rdx,QWORD PTR [rax+0x3750]
    d606:	cmp    DWORD PTR [rax+0x18],0x1
    d60a:	mov    r12,QWORD PTR [rdx+0x20]
    d60e:	je     d6a8 <writeB8_typeInfo_CABAC+0xc8>
    d614:	cmp    ebx,0x2
    d617:	je     d7e8 <writeB8_typeInfo_CABAC+0x208>
    d61d:	jg     d668 <writeB8_typeInfo_CABAC+0x88>
    d61f:	test   ebx,ebx
    d621:	je     d740 <writeB8_typeInfo_CABAC+0x160>
    d627:	cmp    ebx,0x1
    d62a:	jne    d758 <writeB8_typeInfo_CABAC+0x178>
    d630:	lea    rdx,[r12+0x220]
    d638:	xor    esi,esi
    d63a:	mov    rdi,rbp
    d63d:	call   5140 <biari_encode_symbol>
    d642:	lea    rdx,[r12+0x240]
    d64a:	xor    esi,esi
    d64c:	add    rsp,0x8
    d650:	mov    rdi,rbp
    d653:	pop    rbx
    d654:	pop    rbp
    d655:	pop    r12
    d657:	pop    r13
    d659:	pop    r14
    d65b:	pop    r15
    d65d:	jmp    5140 <biari_encode_symbol>
    d662:	nop    WORD PTR [rax+rax*1+0x0]
    d668:	cmp    ebx,0x3
    d66b:	jne    d758 <writeB8_typeInfo_CABAC+0x178>
    d671:	lea    rdx,[r12+0x220]
    d679:	xor    esi,esi
    d67b:	mov    rdi,rbp
    d67e:	call   5140 <biari_encode_symbol>
    d683:	lea    rdx,[r12+0x240]
    d68b:	mov    esi,0x1
    d690:	mov    rdi,rbp
    d693:	call   5140 <biari_encode_symbol>
    d698:	lea    rdx,[r12+0x250]
    d6a0:	jmp    d64a <writeB8_typeInfo_CABAC+0x6a>
    d6a2:	nop    WORD PTR [rax+rax*1+0x0]
    d6a8:	lea    rdx,[r12+0x2a0]
    d6b0:	test   ebx,ebx
    d6b2:	je     d64a <writeB8_typeInfo_CABAC+0x6a>
    d6b4:	mov    esi,0x1
    d6b9:	mov    rdi,rbp
    d6bc:	lea    r14d,[rbx-0x1]
    d6c0:	call   5140 <biari_encode_symbol>
    d6c5:	lea    r15,[r12+0x2d0]
    d6cd:	lea    rdx,[r12+0x2b0]
    d6d5:	cmp    r14d,0x1
    d6d9:	jle    d770 <writeB8_typeInfo_CABAC+0x190>
    d6df:	mov    r13d,r14d
    d6e2:	add    r12,0x2c0
    d6e9:	mov    esi,0x1
    d6ee:	mov    rdi,rbp
    d6f1:	and    r13d,0x1
    d6f5:	cmp    r14d,0x5
    d6f9:	jg     d790 <writeB8_typeInfo_CABAC+0x1b0>
    d6ff:	call   5140 <biari_encode_symbol>
    d704:	sub    ebx,0x3
    d707:	mov    rdx,r12
    d70a:	xor    esi,esi
    d70c:	mov    rdi,rbp
    d70f:	call   5140 <biari_encode_symbol>
    d714:	and    ebx,0x2
    d717:	mov    rdx,r15
    d71a:	jne    d7cf <writeB8_typeInfo_CABAC+0x1ef>
    d720:	xor    esi,esi
    d722:	mov    rdi,rbp
    d725:	call   5140 <biari_encode_symbol>
    d72a:	mov    rdx,r15
    d72d:	test   r13d,r13d
    d730:	je     d64a <writeB8_typeInfo_CABAC+0x6a>
    d736:	mov    esi,0x1
    d73b:	jmp    d64c <writeB8_typeInfo_CABAC+0x6c>
    d740:	lea    rdx,[r12+0x220]
    d748:	mov    esi,0x1
    d74d:	jmp    d64c <writeB8_typeInfo_CABAC+0x6c>
    d752:	nop    WORD PTR [rax+rax*1+0x0]
    d758:	add    rsp,0x8
    d75c:	pop    rbx
    d75d:	pop    rbp
    d75e:	pop    r12
    d760:	pop    r13
    d762:	pop    r14
    d764:	pop    r15
    d766:	ret    
    d767:	nop    WORD PTR [rax+rax*1+0x0]
    d770:	xor    esi,esi
    d772:	mov    rdi,rbp
    d775:	call   5140 <biari_encode_symbol>
    d77a:	mov    rdx,r15
    d77d:	test   r14d,r14d
    d780:	jne    d736 <writeB8_typeInfo_CABAC+0x156>
    d782:	jmp    d64a <writeB8_typeInfo_CABAC+0x6a>
    d787:	nop    WORD PTR [rax+rax*1+0x0]
    d790:	call   5140 <biari_encode_symbol>
    d795:	sub    ebx,0x7
    d798:	mov    rdx,r12
    d79b:	mov    esi,0x1
    d7a0:	mov    rdi,rbp
    d7a3:	call   5140 <biari_encode_symbol>
    d7a8:	mov    rdx,r15
    d7ab:	mov    esi,0x1
    d7b0:	test   bl,0x4
    d7b3:	jne    d722 <writeB8_typeInfo_CABAC+0x142>
    d7b9:	xor    esi,esi
    d7bb:	mov    rdi,rbp
    d7be:	call   5140 <biari_encode_symbol>
    d7c3:	and    ebx,0x2
    d7c6:	mov    rdx,r15
    d7c9:	je     d720 <writeB8_typeInfo_CABAC+0x140>
    d7cf:	mov    esi,0x1
    d7d4:	mov    rdi,rbp
    d7d7:	call   5140 <biari_encode_symbol>
    d7dc:	jmp    d72a <writeB8_typeInfo_CABAC+0x14a>
    d7e1:	nop    DWORD PTR [rax+0x0]
    d7e8:	lea    rdx,[r12+0x220]
    d7f0:	xor    esi,esi
    d7f2:	mov    rdi,rbp
    d7f5:	call   5140 <biari_encode_symbol>
    d7fa:	lea    rdx,[r12+0x240]
    d802:	mov    esi,0x1
    d807:	mov    rdi,rbp
    d80a:	call   5140 <biari_encode_symbol>
    d80f:	lea    rdx,[r12+0x250]
    d817:	mov    esi,0x1
    d81c:	jmp    d64c <writeB8_typeInfo_CABAC+0x6c>
    d821:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    d82c:	nop    DWORD PTR [rax+0x0]

000000000000d830 <writeIntraPredMode_CABAC>:
    d830:	endbr64 
    d834:	mov    rax,QWORD PTR [rip+0x7ad75]        # 885b0 <img>
    d83b:	push   r12
    d83d:	push   rbp
    d83e:	mov    rbp,rsi
    d841:	mov    esi,0x1
    d846:	push   rbx
    d847:	mov    rax,QWORD PTR [rax+0x3750]
    d84e:	cmp    DWORD PTR [rdi+0x4],0xffffffff
    d852:	mov    r12,QWORD PTR [rax+0x28]
    d856:	mov    rdx,r12
    d859:	je     d89c <writeIntraPredMode_CABAC+0x6c>
    d85b:	mov    rbx,rdi
    d85e:	xor    esi,esi
    d860:	mov    rdi,rbp
    d863:	add    r12,0x10
    d867:	call   5140 <biari_encode_symbol>
    d86c:	mov    esi,DWORD PTR [rbx+0x4]
    d86f:	mov    rdx,r12
    d872:	mov    rdi,rbp
    d875:	and    esi,0x1
    d878:	call   5140 <biari_encode_symbol>
    d87d:	mov    esi,DWORD PTR [rbx+0x4]
    d880:	mov    rdx,r12
    d883:	mov    rdi,rbp
    d886:	sar    esi,1
    d888:	and    esi,0x1
    d88b:	call   5140 <biari_encode_symbol>
    d890:	mov    esi,DWORD PTR [rbx+0x4]
    d893:	mov    rdx,r12
    d896:	sar    esi,0x2
    d899:	and    esi,0x1
    d89c:	pop    rbx
    d89d:	mov    rdi,rbp
    d8a0:	pop    rbp
    d8a1:	pop    r12
    d8a3:	jmp    5140 <biari_encode_symbol>
    d8a8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d8b0 <writeCBP_BIT_CABAC>:
    d8b0:	endbr64 
    d8b4:	push   r12
    d8b6:	mov    r12,r9
    d8b9:	push   rbp
    d8ba:	mov    ebp,esi
    d8bc:	mov    rsi,rcx
    d8bf:	mov    ecx,edi
    d8c1:	push   rbx
    d8c2:	shr    ecx,0x1f
    d8c5:	sub    rsp,0x20
    d8c9:	mov    rax,QWORD PTR fs:0x28
    d8d2:	mov    QWORD PTR [rsp+0x18],rax
    d8d7:	xor    eax,eax
    d8d9:	lea    eax,[rdi+rcx*1]
    d8dc:	and    eax,0x1
    d8df:	sub    eax,ecx
    d8e1:	mov    ecx,edi
    d8e3:	shr    ecx,0x1f
    d8e6:	add    eax,eax
    d8e8:	add    ecx,edi
    d8ea:	and    ecx,0xfffffffe
    d8ed:	mov    r10d,ecx
    d8f0:	jne    d978 <writeCBP_BIT_CABAC+0xc8>
    d8f6:	mov    rsi,QWORD PTR [rsi+0x38]
    d8fa:	xor    ebx,ebx
    d8fc:	test   rsi,rsi
    d8ff:	je     d920 <writeCBP_BIT_CABAC+0x70>
    d901:	cmp    DWORD PTR [rsi+0x48],0xe
    d905:	je     d920 <writeCBP_BIT_CABAC+0x70>
    d907:	mov    ecx,eax
    d909:	mov    ebx,DWORD PTR [rsi+0x1cc]
    d90f:	sar    ecx,1
    d911:	add    ecx,0x2
    d914:	sar    ebx,cl
    d916:	not    ebx
    d918:	and    ebx,0x1
    d91b:	add    ebx,ebx
    d91d:	movsxd rbx,ebx
    d920:	mov    rsi,QWORD PTR [rip+0x7ac89]        # 885b0 <img>
    d927:	test   eax,eax
    d929:	je     d995 <writeCBP_BIT_CABAC+0xe5>
    d92b:	mov    ecx,r10d
    d92e:	sar    edx,cl
    d930:	not    edx
    d932:	and    edx,0x1
    d935:	add    rbx,rdx
    d938:	mov    rax,QWORD PTR [rsi+0x3750]
    d93f:	shl    rbx,0x4
    d943:	movzx  esi,bpl
    d947:	mov    rdi,r12
    d94a:	mov    rax,QWORD PTR [rax+0x28]
    d94e:	lea    rdx,[rax+rbx*1+0x60]
    d953:	call   5140 <biari_encode_symbol>
    d958:	mov    rax,QWORD PTR [rsp+0x18]
    d95d:	xor    rax,QWORD PTR fs:0x28
    d966:	jne    d9ff <writeCBP_BIT_CABAC+0x14f>
    d96c:	add    rsp,0x20
    d970:	pop    rbx
    d971:	pop    rbp
    d972:	pop    r12
    d974:	ret    
    d975:	nop    DWORD PTR [rax]
    d978:	mov    ecx,eax
    d97a:	mov    ebx,edx
    d97c:	mov    rsi,QWORD PTR [rip+0x7ac2d]        # 885b0 <img>
    d983:	sar    ecx,1
    d985:	sar    ebx,cl
    d987:	not    ebx
    d989:	and    ebx,0x1
    d98c:	add    ebx,ebx
    d98e:	movsxd rbx,ebx
    d991:	test   eax,eax
    d993:	jne    d92b <writeCBP_BIT_CABAC+0x7b>
    d995:	mov    edi,DWORD PTR [rsi+0xc]
    d998:	mov    r9,rsp
    d99b:	xor    esi,esi
    d99d:	xor    r8d,r8d
    d9a0:	mov    ecx,0xffffffff
    d9a5:	mov    edx,r10d
    d9a8:	call   30b60 <getLuma4x4Neighbour>
    d9ad:	mov    eax,DWORD PTR [rsp]
    d9b0:	mov    rsi,QWORD PTR [rip+0x7abf9]        # 885b0 <img>
    d9b7:	test   eax,eax
    d9b9:	je     d938 <writeCBP_BIT_CABAC+0x88>
    d9bf:	movsxd rax,DWORD PTR [rsp+0x4]
    d9c4:	imul   rax,rax,0x278
    d9cb:	add    rax,QWORD PTR [rsi+0x3758]
    d9d2:	cmp    DWORD PTR [rax+0x48],0xe
    d9d6:	je     d938 <writeCBP_BIT_CABAC+0x88>
    d9dc:	mov    edx,DWORD PTR [rsp+0xc]
    d9e0:	mov    eax,DWORD PTR [rax+0x1cc]
    d9e6:	mov    ecx,edx
    d9e8:	shr    ecx,0x1f
    d9eb:	add    ecx,edx
    d9ed:	or     ecx,0x1
    d9f0:	sar    eax,cl
    d9f2:	not    eax
    d9f4:	and    eax,0x1
    d9f7:	add    rbx,rax
    d9fa:	jmp    d938 <writeCBP_BIT_CABAC+0x88>
    d9ff:	call   4390 <__stack_chk_fail@plt>
    da04:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    da0f:	nop

000000000000da10 <writeCBP_CABAC>:
    da10:	endbr64 
    da14:	push   r15
    da16:	push   r14
    da18:	mov    r14,rsi
    da1b:	push   r13
    da1d:	push   r12
    da1f:	mov    r12d,0x1
    da25:	push   rbp
    da26:	push   rbx
    da27:	xor    ebx,ebx
    da29:	sub    rsp,0x8
    da2d:	mov    rax,QWORD PTR [rip+0x7ab7c]        # 885b0 <img>
    da34:	mov    r15d,DWORD PTR [rdi+0x4]
    da38:	mov    rdx,QWORD PTR [rax+0x3750]
    da3f:	movsxd rbp,DWORD PTR [rax+0xc]
    da43:	mov    r13,QWORD PTR [rdx+0x28]
    da47:	imul   rbp,rbp,0x278
    da4e:	add    rbp,QWORD PTR [rax+0x3758]
    da55:	mov    ecx,ebx
    da57:	xor    r8d,r8d
    da5a:	mov    esi,r12d
    da5d:	cmp    DWORD PTR [rbp+rbx*4+0x1d8],0xb
    da65:	setne  r8b
    da69:	shl    esi,cl
    da6b:	mov    edi,ebx
    da6d:	mov    r9,r14
    da70:	and    esi,r15d
    da73:	mov    rcx,rbp
    da76:	mov    edx,r15d
    da79:	add    rbx,0x1
    da7d:	call   d8b0 <writeCBP_BIT_CABAC>
    da82:	cmp    rbx,0x4
    da86:	jne    da55 <writeCBP_CABAC+0x45>
    da88:	mov    rax,QWORD PTR [rip+0x7ab21]        # 885b0 <img>
    da8f:	mov    eax,DWORD PTR [rax+0x11bfc]
    da95:	test   eax,eax
    da97:	je     dba0 <writeCBP_CABAC+0x190>
    da9d:	mov    rdx,QWORD PTR [rbp+0x38]
    daa1:	xor    eax,eax
    daa3:	test   rdx,rdx
    daa6:	je     dac1 <writeCBP_CABAC+0xb1>
    daa8:	cmp    DWORD PTR [rdx+0x48],0xe
    daac:	mov    eax,0x2
    dab1:	je     dac1 <writeCBP_CABAC+0xb1>
    dab3:	xor    eax,eax
    dab5:	cmp    DWORD PTR [rdx+0x1cc],0xf
    dabc:	setg   al
    dabf:	add    eax,eax
    dac1:	mov    rdx,QWORD PTR [rbp+0x40]
    dac5:	test   rdx,rdx
    dac8:	je     dae3 <writeCBP_CABAC+0xd3>
    daca:	cmp    DWORD PTR [rdx+0x48],0xe
    dace:	je     dbb0 <writeCBP_CABAC+0x1a0>
    dad4:	cmp    DWORD PTR [rdx+0x1cc],0xf
    dadb:	setg   dl
    dade:	movzx  edx,dl
    dae1:	add    eax,edx
    dae3:	cdqe   
    dae5:	xor    esi,esi
    dae7:	mov    rdi,r14
    daea:	shl    rax,0x4
    daee:	cmp    r15d,0xf
    daf2:	setg   sil
    daf6:	lea    rdx,[r13+rax*1+0xa0]
    dafe:	call   5140 <biari_encode_symbol>
    db03:	cmp    r15d,0xf
    db07:	jle    dba0 <writeCBP_CABAC+0x190>
    db0d:	mov    rdx,QWORD PTR [rbp+0x38]
    db11:	xor    eax,eax
    db13:	test   rdx,rdx
    db16:	je     db3d <writeCBP_CABAC+0x12d>
    db18:	cmp    DWORD PTR [rdx+0x48],0xe
    db1c:	mov    eax,0x2
    db21:	je     db3d <writeCBP_CABAC+0x12d>
    db23:	mov    edx,DWORD PTR [rdx+0x1cc]
    db29:	xor    eax,eax
    db2b:	cmp    edx,0xf
    db2e:	jle    db3d <writeCBP_CABAC+0x12d>
    db30:	sar    edx,0x4
    db33:	xor    eax,eax
    db35:	cmp    edx,0x2
    db38:	sete   al
    db3b:	add    eax,eax
    db3d:	mov    rdx,QWORD PTR [rbp+0x40]
    db41:	test   rdx,rdx
    db44:	je     db65 <writeCBP_CABAC+0x155>
    db46:	cmp    DWORD PTR [rdx+0x48],0xe
    db4a:	je     dbc0 <writeCBP_CABAC+0x1b0>
    db4c:	mov    edx,DWORD PTR [rdx+0x1cc]
    db52:	cmp    edx,0xf
    db55:	jle    db65 <writeCBP_CABAC+0x155>
    db57:	sar    edx,0x4
    db5a:	cmp    edx,0x2
    db5d:	sete   dl
    db60:	movzx  edx,dl
    db63:	add    eax,edx
    db65:	sar    r15d,0x4
    db69:	cdqe   
    db6b:	xor    esi,esi
    db6d:	mov    rdi,r14
    db70:	shl    rax,0x4
    db74:	cmp    r15d,0x2
    db78:	sete   sil
    db7c:	add    rsp,0x8
    db80:	lea    rdx,[r13+rax*1+0xe0]
    db88:	pop    rbx
    db89:	pop    rbp
    db8a:	pop    r12
    db8c:	pop    r13
    db8e:	pop    r14
    db90:	pop    r15
    db92:	jmp    5140 <biari_encode_symbol>
    db97:	nop    WORD PTR [rax+rax*1+0x0]
    dba0:	add    rsp,0x8
    dba4:	pop    rbx
    dba5:	pop    rbp
    dba6:	pop    r12
    dba8:	pop    r13
    dbaa:	pop    r14
    dbac:	pop    r15
    dbae:	ret    
    dbaf:	nop
    dbb0:	add    eax,0x1
    dbb3:	jmp    dae3 <writeCBP_CABAC+0xd3>
    dbb8:	nop    DWORD PTR [rax+rax*1+0x0]
    dbc0:	add    eax,0x1
    dbc3:	jmp    db65 <writeCBP_CABAC+0x155>
    dbc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000dbd0 <write_and_store_CBP_block_bit>:
    dbd0:	endbr64 
    dbd4:	push   r15
    dbd6:	push   r14
    dbd8:	push   r13
    dbda:	mov    r13,rsi
    dbdd:	push   r12
    dbdf:	mov    r12,rdi
    dbe2:	push   rbp
    dbe3:	mov    ebp,ecx
    dbe5:	push   rbx
    dbe6:	movsxd rbx,edx
    dbe9:	sub    rsp,0x68
    dbed:	mov    rcx,QWORD PTR [rip+0x7a9bc]        # 885b0 <img>
    dbf4:	mov    rax,QWORD PTR fs:0x28
    dbfd:	mov    QWORD PTR [rsp+0x58],rax
    dc02:	xor    eax,eax
    dc04:	lea    eax,[rbx-0x1]
    dc07:	mov    esi,DWORD PTR [rcx+0x50]
    dc0a:	mov    edi,DWORD PTR [rcx+0xc]
    dc0d:	mov    DWORD PTR [rsp+0xc],esi
    dc11:	cmp    ebx,0x7
    dc14:	je     ddf0 <write_and_store_CBP_block_bit+0x220>
    dc1a:	lea    edx,[rbx-0x8]
    dc1d:	cmp    edx,0x1
    dc20:	jbe    dc2b <write_and_store_CBP_block_bit+0x5b>
    dc22:	cmp    ebx,0x6
    dc25:	jne    dfd0 <write_and_store_CBP_block_bit+0x400>
    dc2b:	mov    edx,DWORD PTR [rcx+0x54]
    dc2e:	xor    esi,esi
    dc30:	test   edx,edx
    dc32:	sete   sil
    dc36:	setne  r10b
    dc3a:	mov    DWORD PTR [rsp+0x8],esi
    dc3e:	movzx  r10d,r10b
    dc42:	xor    r8d,r8d
    dc45:	cmp    eax,0x4
    dc48:	jbe    def6 <write_and_store_CBP_block_bit+0x326>
    dc4e:	test   ebx,ebx
    dc50:	jne    dd60 <write_and_store_CBP_block_bit+0x190>
    dc56:	lea    r9,[rsp+0x20]
    dc5b:	xor    r8d,r8d
    dc5e:	mov    ecx,0xffffffff
    dc63:	xor    edx,edx
    dc65:	xor    esi,esi
    dc67:	call   30b60 <getLuma4x4Neighbour>
    dc6c:	mov    rax,QWORD PTR [rip+0x7a93d]        # 885b0 <img>
    dc73:	xor    ecx,ecx
    dc75:	xor    edx,edx
    dc77:	lea    r9,[rsp+0x40]
    dc7c:	mov    r8d,0xffffffff
    dc82:	xor    esi,esi
    dc84:	mov    edi,DWORD PTR [rax+0xc]
    dc87:	call   30b60 <getLuma4x4Neighbour>
    dc8c:	xor    r11d,r11d
    dc8f:	xor    r8d,r8d
    dc92:	xor    edi,edi
    dc94:	test   ebp,ebp
    dc96:	je     dcac <write_and_store_CBP_block_bit+0xdc>
    dc98:	mov    rdx,QWORD PTR [r12+0x1f8]
    dca0:	or     rdx,0x1
    dca4:	mov    QWORD PTR [r12+0x1f8],rdx
    dcac:	mov    ecx,DWORD PTR [rsp+0xc]
    dcb0:	mov    esi,DWORD PTR [rsp+0x40]
    dcb4:	xor    eax,eax
    dcb6:	mov    r9,QWORD PTR [rip+0x7a8f3]        # 885b0 <img>
    dcbd:	test   ecx,ecx
    dcbf:	setne  al
    dcc2:	test   esi,esi
    dcc4:	jne    dea0 <write_and_store_CBP_block_bit+0x2d0>
    dcca:	lea    esi,[rax+rax*1]
    dccd:	mov    edx,DWORD PTR [rsp+0x20]
    dcd1:	test   edx,edx
    dcd3:	je     dd05 <write_and_store_CBP_block_bit+0x135>
    dcd5:	movsxd rdx,DWORD PTR [rsp+0x24]
    dcda:	mov    eax,0x1
    dcdf:	imul   rdx,rdx,0x278
    dce6:	add    rdx,QWORD PTR [r9+0x3758]
    dced:	cmp    DWORD PTR [rdx+0x48],0xe
    dcf1:	je     dd05 <write_and_store_CBP_block_bit+0x135>
    dcf3:	lea    ecx,[rdi+r11*1]
    dcf7:	shl    eax,cl
    dcf9:	cdqe   
    dcfb:	and    rax,QWORD PTR [rdx+0x1f8]
    dd02:	shr    rax,cl
    dd05:	lea    rdi,[rip+0x5d574]        # 6b280 <type2ctx_bcbp>
    dd0c:	add    eax,esi
    dd0e:	mov    rcx,QWORD PTR [r9+0x3750]
    dd15:	movsx  esi,bp
    dd18:	movsxd rdx,DWORD PTR [rdi+rbx*4]
    dd1c:	cdqe   
    dd1e:	mov    rdi,r13
    dd21:	shl    rax,0x4
    dd25:	shl    rdx,0x6
    dd29:	lea    rdx,[rdx+rax*1+0x120]
    dd31:	add    rdx,QWORD PTR [rcx+0x28]
    dd35:	call   5140 <biari_encode_symbol>
    dd3a:	mov    rax,QWORD PTR [rsp+0x58]
    dd3f:	xor    rax,QWORD PTR fs:0x28
    dd48:	jne    e176 <write_and_store_CBP_block_bit+0x5a6>
    dd4e:	add    rsp,0x68
    dd52:	pop    rbx
    dd53:	pop    rbp
    dd54:	pop    r12
    dd56:	pop    r13
    dd58:	pop    r14
    dd5a:	pop    r15
    dd5c:	ret    
    dd5d:	nop    DWORD PTR [rax]
    dd60:	mov    eax,DWORD PTR [rsp+0x8]
    dd64:	test   eax,eax
    dd66:	jne    dfe0 <write_and_store_CBP_block_bit+0x410>
    dd6c:	mov    DWORD PTR [rsp+0x10],0x0
    dd74:	xor    r15d,r15d
    dd77:	xor    r14d,r14d
    dd7a:	test   r10d,r10d
    dd7d:	jne    e080 <write_and_store_CBP_block_bit+0x4b0>
    dd83:	mov    eax,DWORD PTR [rsp+0x8]
    dd87:	test   eax,eax
    dd89:	je     e160 <write_and_store_CBP_block_bit+0x590>
    dd8f:	lea    r9,[rsp+0x20]
    dd94:	xor    r8d,r8d
    dd97:	mov    ecx,0xffffffff
    dd9c:	mov    edx,r14d
    dd9f:	mov    esi,r15d
    dda2:	mov    DWORD PTR [rsp+0x10],r10d
    dda7:	call   30bd0 <getChroma4x4Neighbour>
    ddac:	lea    r9,[rsp+0x40]
    ddb1:	xor    ecx,ecx
    ddb3:	mov    edx,r14d
    ddb6:	mov    rax,QWORD PTR [rip+0x7a7f3]        # 885b0 <img>
    ddbd:	mov    r8d,0xffffffff
    ddc3:	mov    esi,r15d
    ddc6:	mov    edi,DWORD PTR [rax+0xc]
    ddc9:	call   30bd0 <getChroma4x4Neighbour>
    ddce:	mov    r10d,DWORD PTR [rsp+0x10]
    ddd3:	mov    DWORD PTR [rsp+0x1c],0x0
    dddb:	mov    r11d,0x13
    dde1:	jmp    e0e6 <write_and_store_CBP_block_bit+0x516>
    dde6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ddf0:	mov    r10d,DWORD PTR [rcx+0x54]
    ddf4:	test   r10d,r10d
    ddf7:	je     dee8 <write_and_store_CBP_block_bit+0x318>
    ddfd:	mov    r14d,DWORD PTR [rcx+0x4c]
    de01:	mov    r15d,DWORD PTR [rcx+0x48]
    de05:	xor    r8d,r8d
    de08:	xor    r10d,r10d
    de0b:	mov    DWORD PTR [rsp+0x10],0x1
    de13:	mov    DWORD PTR [rsp+0x8],0x0
    de1b:	cmp    eax,0x4
    de1e:	ja     e17b <write_and_store_CBP_block_bit+0x5ab>
    de24:	lea    r9,[rsp+0x20]
    de29:	xor    r8d,r8d
    de2c:	mov    ecx,0xffffffff
    de31:	mov    edx,r14d
    de34:	mov    esi,r15d
    de37:	call   30b60 <getLuma4x4Neighbour>
    de3c:	lea    r9,[rsp+0x40]
    de41:	xor    ecx,ecx
    de43:	mov    edx,r14d
    de46:	mov    rax,QWORD PTR [rip+0x7a763]        # 885b0 <img>
    de4d:	mov    r8d,0xffffffff
    de53:	mov    esi,r15d
    de56:	mov    edi,DWORD PTR [rax+0xc]
    de59:	call   30b60 <getLuma4x4Neighbour>
    de5e:	mov    r11d,0x1
    de64:	mov    edi,DWORD PTR [rsp+0x20]
    de68:	test   edi,edi
    de6a:	je     de77 <write_and_store_CBP_block_bit+0x2a7>
    de6c:	mov    ecx,DWORD PTR [rsp+0x2c]
    de70:	mov    eax,DWORD PTR [rsp+0x28]
    de74:	lea    edi,[rax+rcx*4]
    de77:	mov    r8d,DWORD PTR [rsp+0x40]
    de7c:	test   r8d,r8d
    de7f:	jne    e030 <write_and_store_CBP_block_bit+0x460>
    de85:	lea    r9d,[r15+r14*4+0x1]
    de8a:	test   ebp,ebp
    de8c:	jne    df58 <write_and_store_CBP_block_bit+0x388>
    de92:	cmp    ebx,0x2
    de95:	je     dd3a <write_and_store_CBP_block_bit+0x16a>
    de9b:	jmp    dcac <write_and_store_CBP_block_bit+0xdc>
    dea0:	movsxd rdx,DWORD PTR [rsp+0x44]
    dea5:	mov    esi,0x2
    deaa:	imul   rdx,rdx,0x278
    deb1:	add    rdx,QWORD PTR [r9+0x3758]
    deb8:	cmp    DWORD PTR [rdx+0x48],0xe
    debc:	je     dccd <write_and_store_CBP_block_bit+0xfd>
    dec2:	lea    ecx,[r11+r8*1]
    dec6:	mov    esi,0x1
    decb:	shl    esi,cl
    decd:	movsxd rsi,esi
    ded0:	and    rsi,QWORD PTR [rdx+0x1f8]
    ded7:	shr    rsi,cl
    deda:	add    esi,esi
    dedc:	jmp    dccd <write_and_store_CBP_block_bit+0xfd>
    dee1:	nop    DWORD PTR [rax+0x0]
    dee8:	mov    DWORD PTR [rsp+0x8],0x0
    def0:	mov    r8d,0x1
    def6:	mov    r14d,DWORD PTR [rcx+0x4c]
    defa:	mov    r15d,DWORD PTR [rcx+0x48]
    defe:	test   ebx,ebx
    df00:	jne    e048 <write_and_store_CBP_block_bit+0x478>
    df06:	lea    r9,[rsp+0x20]
    df0b:	xor    r8d,r8d
    df0e:	or     ecx,0xffffffff
    df11:	mov    edx,r14d
    df14:	mov    esi,r15d
    df17:	mov    DWORD PTR [rsp+0x8],eax
    df1b:	call   30b60 <getLuma4x4Neighbour>
    df20:	lea    r9,[rsp+0x40]
    df25:	mov    edx,r14d
    df28:	mov    esi,r15d
    df2b:	mov    rcx,QWORD PTR [rip+0x7a67e]        # 885b0 <img>
    df32:	or     r8d,0xffffffff
    df36:	mov    edi,DWORD PTR [rcx+0xc]
    df39:	xor    ecx,ecx
    df3b:	call   30b60 <getLuma4x4Neighbour>
    df40:	mov    eax,DWORD PTR [rsp+0x8]
    df44:	xor    r11d,r11d
    df47:	cmp    eax,0x4
    df4a:	jbe    de64 <write_and_store_CBP_block_bit+0x294>
    df50:	jmp    dc8c <write_and_store_CBP_block_bit+0xbc>
    df55:	nop    DWORD PTR [rax]
    df58:	mov    eax,0x1
    df5d:	mov    ecx,r9d
    df60:	mov    edx,eax
    df62:	shl    edx,cl
    df64:	movsxd rdx,edx
    df67:	or     rdx,QWORD PTR [r12+0x1f8]
    df6f:	cmp    ebx,0x2
    df72:	je     df98 <write_and_store_CBP_block_bit+0x3c8>
    df74:	cmp    ebx,0x3
    df77:	jne    e058 <write_and_store_CBP_block_bit+0x488>
    df7d:	lea    ecx,[r9+0x1]
    df81:	shl    eax,cl
    df83:	cdqe   
    df85:	or     rdx,rax
    df88:	mov    QWORD PTR [r12+0x1f8],rdx
    df90:	jmp    dcac <write_and_store_CBP_block_bit+0xdc>
    df95:	nop    DWORD PTR [rax]
    df98:	lea    ecx,[r9+0x4]
    df9c:	mov    ebx,eax
    df9e:	lea    esi,[r9+0x1]
    dfa2:	shl    ebx,cl
    dfa4:	mov    ecx,ebx
    dfa6:	bts    ecx,esi
    dfa9:	movsxd rcx,ecx
    dfac:	or     rdx,rcx
    dfaf:	lea    ecx,[r9+0x5]
    dfb3:	shl    eax,cl
    dfb5:	cdqe   
    dfb7:	or     rdx,rax
    dfba:	mov    QWORD PTR [r12+0x1f8],rdx
    dfc2:	jmp    dd3a <write_and_store_CBP_block_bit+0x16a>
    dfc7:	nop    WORD PTR [rax+rax*1+0x0]
    dfd0:	mov    DWORD PTR [rsp+0x8],0x0
    dfd8:	xor    r10d,r10d
    dfdb:	jmp    dc42 <write_and_store_CBP_block_bit+0x72>
    dfe0:	lea    r9,[rsp+0x20]
    dfe5:	xor    r8d,r8d
    dfe8:	mov    ecx,0xffffffff
    dfed:	xor    edx,edx
    dfef:	xor    esi,esi
    dff1:	call   30bd0 <getChroma4x4Neighbour>
    dff6:	mov    rax,QWORD PTR [rip+0x7a5b3]        # 885b0 <img>
    dffd:	xor    ecx,ecx
    dfff:	xor    edx,edx
    e001:	lea    r9,[rsp+0x40]
    e006:	mov    r8d,0xffffffff
    e00c:	xor    esi,esi
    e00e:	mov    edi,DWORD PTR [rax+0xc]
    e011:	call   30bd0 <getChroma4x4Neighbour>
    e016:	mov    r11d,0x11
    e01c:	xor    r8d,r8d
    e01f:	xor    edi,edi
    e021:	mov    r9d,0x11
    e027:	jmp    de8a <write_and_store_CBP_block_bit+0x2ba>
    e02c:	nop    DWORD PTR [rax+0x0]
    e030:	mov    ecx,DWORD PTR [rsp+0x4c]
    e034:	mov    eax,DWORD PTR [rsp+0x48]
    e038:	lea    r8d,[rax+rcx*4]
    e03c:	jmp    de85 <write_and_store_CBP_block_bit+0x2b5>
    e041:	nop    DWORD PTR [rax+0x0]
    e048:	mov    DWORD PTR [rsp+0x10],0x0
    e050:	jmp    de1b <write_and_store_CBP_block_bit+0x24b>
    e055:	nop    DWORD PTR [rax]
    e058:	cmp    ebx,0x4
    e05b:	jne    dca4 <write_and_store_CBP_block_bit+0xd4>
    e061:	lea    ecx,[r9+0x4]
    e065:	shl    eax,cl
    e067:	cdqe   
    e069:	or     rdx,rax
    e06c:	mov    QWORD PTR [r12+0x1f8],rdx
    e074:	jmp    dcac <write_and_store_CBP_block_bit+0xdc>
    e079:	nop    DWORD PTR [rax+0x0]
    e080:	mov    DWORD PTR [rsp+0x1c],0x0
    e088:	mov    r11d,0x12
    e08e:	xor    r8d,r8d
    e091:	lea    r9,[rsp+0x20]
    e096:	mov    ecx,0xffffffff
    e09b:	mov    edx,r14d
    e09e:	mov    esi,r15d
    e0a1:	mov    DWORD PTR [rsp+0x18],r11d
    e0a6:	mov    DWORD PTR [rsp+0x14],r10d
    e0ab:	call   30bd0 <getChroma4x4Neighbour>
    e0b0:	xor    ecx,ecx
    e0b2:	lea    r9,[rsp+0x40]
    e0b7:	mov    edx,r14d
    e0ba:	mov    rax,QWORD PTR [rip+0x7a4ef]        # 885b0 <img>
    e0c1:	mov    r8d,0xffffffff
    e0c7:	mov    esi,r15d
    e0ca:	mov    edi,DWORD PTR [rax+0xc]
    e0cd:	call   30bd0 <getChroma4x4Neighbour>
    e0d2:	mov    edi,DWORD PTR [rsp+0x10]
    e0d6:	or     edi,DWORD PTR [rsp+0x8]
    e0da:	mov    r10d,DWORD PTR [rsp+0x14]
    e0df:	mov    r11d,DWORD PTR [rsp+0x18]
    e0e4:	je     e150 <write_and_store_CBP_block_bit+0x580>
    e0e6:	mov    edi,DWORD PTR [rsp+0x20]
    e0ea:	test   edi,edi
    e0ec:	je     e0f9 <write_and_store_CBP_block_bit+0x529>
    e0ee:	mov    ecx,DWORD PTR [rsp+0x2c]
    e0f2:	mov    eax,DWORD PTR [rsp+0x28]
    e0f6:	lea    edi,[rax+rcx*2]
    e0f9:	mov    r8d,DWORD PTR [rsp+0x40]
    e0fe:	test   r8d,r8d
    e101:	je     e10f <write_and_store_CBP_block_bit+0x53f>
    e103:	mov    ecx,DWORD PTR [rsp+0x4c]
    e107:	mov    eax,DWORD PTR [rsp+0x48]
    e10b:	lea    r8d,[rax+rcx*2]
    e10f:	test   ebx,ebx
    e111:	je     dc94 <write_and_store_CBP_block_bit+0xc4>
    e117:	mov    r9d,DWORD PTR [rsp+0x1c]
    e11c:	test   r9d,r9d
    e11f:	jne    e18c <write_and_store_CBP_block_bit+0x5bc>
    e121:	mov    r9d,0x12
    e127:	test   r10d,r10d
    e12a:	jne    de8a <write_and_store_CBP_block_bit+0x2ba>
    e130:	mov    esi,DWORD PTR [rsp+0x8]
    e134:	lea    edx,[r14+r14*1]
    e138:	lea    eax,[r15+rdx*1+0x13]
    e13d:	lea    r9d,[r15+rdx*1+0x17]
    e142:	test   esi,esi
    e144:	cmovne r9d,eax
    e148:	jmp    de8a <write_and_store_CBP_block_bit+0x2ba>
    e14d:	nop    DWORD PTR [rax]
    e150:	mov    DWORD PTR [rsp+0x8],0x0
    e158:	xor    r8d,r8d
    e15b:	jmp    e10f <write_and_store_CBP_block_bit+0x53f>
    e15d:	nop    DWORD PTR [rax]
    e160:	mov    DWORD PTR [rsp+0x1c],0x0
    e168:	mov    r10d,eax
    e16b:	mov    r11d,0x17
    e171:	jmp    e08e <write_and_store_CBP_block_bit+0x4be>
    e176:	call   4390 <__stack_chk_fail@plt>
    e17b:	cmp    DWORD PTR [rsp+0x8],0x0
    e180:	jne    e197 <write_and_store_CBP_block_bit+0x5c7>
    e182:	mov    DWORD PTR [rsp+0x8],r8d
    e187:	jmp    dd7a <write_and_store_CBP_block_bit+0x1aa>
    e18c:	mov    r9d,0x11
    e192:	jmp    de8a <write_and_store_CBP_block_bit+0x2ba>
    e197:	mov    eax,DWORD PTR [rsp+0x8]
    e19b:	mov    r11d,0x11
    e1a1:	mov    DWORD PTR [rsp+0x8],r8d
    e1a6:	mov    DWORD PTR [rsp+0x1c],eax
    e1aa:	jmp    e08e <write_and_store_CBP_block_bit+0x4be>
    e1af:	nop

000000000000e1b0 <write_significance_map>:
    e1b0:	endbr64 
    e1b4:	push   r15
    e1b6:	lea    rax,[rip+0x5d143]        # 6b300 <maxpos>
    e1bd:	mov    r9,rdi
    e1c0:	push   r14
    e1c2:	push   r13
    e1c4:	push   r12
    e1c6:	push   rbp
    e1c7:	movsxd rbp,edx
    e1ca:	push   rbx
    e1cb:	mov    rbx,rsi
    e1ce:	sub    rsp,0x38
    e1d2:	mov    eax,DWORD PTR [rax+rbp*4]
    e1d5:	mov    QWORD PTR [rsp+0x8],rcx
    e1da:	mov    DWORD PTR [rsp+0x18],eax
    e1de:	mov    rax,QWORD PTR [rip+0x7a3cb]        # 885b0 <img>
    e1e5:	mov    QWORD PTR [rsp+0x20],rdi
    e1ea:	mov    edx,DWORD PTR [rax+0x1c]
    e1ed:	mov    rax,QWORD PTR [rax+0x3750]
    e1f4:	mov    DWORD PTR [rsp+0x1c],r8d
    e1f9:	mov    rsi,QWORD PTR [rax+0x28]
    e1fd:	lea    rax,[rip+0x5d03c]        # 6b240 <type2ctx_last>
    e204:	movsxd rax,DWORD PTR [rax+rbp*4]
    e208:	mov    rcx,rax
    e20b:	shl    rcx,0x4
    e20f:	sub    rcx,rax
    e212:	lea    rax,[rip+0x5d027]        # 6b240 <type2ctx_last>
    e219:	movsxd rdi,DWORD PTR [rax+rbp*4]
    e21d:	shl    rcx,0x4
    e221:	mov    rax,rdi
    e224:	shl    rax,0x4
    e228:	sub    rax,rdi
    e22b:	shl    rax,0x4
    e22f:	test   edx,edx
    e231:	jne    e242 <write_significance_map+0x92>
    e233:	mov    edi,DWORD PTR [r9+0x214]
    e23a:	test   edi,edi
    e23c:	je     e348 <write_significance_map+0x198>
    e242:	lea    rax,[rsi+rax*1+0x2600]
    e24a:	lea    rcx,[rsi+rcx*1+0x1ca0]
    e252:	mov    QWORD PTR [rsp+0x28],rax
    e257:	lea    rax,[rip+0x5d062]        # 6b2c0 <c1isdc>
    e25e:	mov    QWORD PTR [rsp+0x10],rcx
    e263:	mov    ecx,DWORD PTR [rax+rbp*4]
    e266:	test   ecx,ecx
    e268:	je     e374 <write_significance_map+0x1c4>
    e26e:	sub    DWORD PTR [rsp+0x18],0x1
    e273:	xor    ecx,ecx
    e275:	xor    r14d,r14d
    e278:	cmp    DWORD PTR [rsp+0x18],ecx
    e27c:	jle    e332 <write_significance_map+0x182>
    e282:	lea    r15,[rip+0x77937]        # 85bc0 <pos2ctx_map_int>
    e289:	jmp    e2ac <write_significance_map+0xfc>
    e28b:	nop    DWORD PTR [rax+rax*1+0x0]
    e290:	add    r14d,0x1
    e294:	movsx  edx,r14w
    e298:	cmp    edx,DWORD PTR [rsp+0x18]
    e29c:	jge    e332 <write_significance_map+0x182>
    e2a2:	mov    rdx,QWORD PTR [rip+0x7a307]        # 885b0 <img>
    e2a9:	mov    edx,DWORD PTR [rdx+0x1c]
    e2ac:	mov    rax,QWORD PTR [rsp+0x8]
    e2b1:	movsx  r12,r14w
    e2b5:	xor    esi,esi
    e2b7:	mov    r13d,DWORD PTR [rax+r12*4]
    e2bb:	test   r13d,r13d
    e2be:	setne  sil
    e2c2:	test   edx,edx
    e2c4:	jne    e2d9 <write_significance_map+0x129>
    e2c6:	mov    rax,QWORD PTR [rsp+0x20]
    e2cb:	mov    eax,DWORD PTR [rax+0x214]
    e2d1:	test   eax,eax
    e2d3:	je     e390 <write_significance_map+0x1e0>
    e2d9:	mov    rdx,QWORD PTR [r15+rbp*8]
    e2dd:	movsxd rdx,DWORD PTR [rdx+r12*4]
    e2e1:	mov    rdi,rbx
    e2e4:	shl    rdx,0x4
    e2e8:	add    rdx,QWORD PTR [rsp+0x10]
    e2ed:	call   5140 <biari_encode_symbol>
    e2f2:	test   r13d,r13d
    e2f5:	je     e290 <write_significance_map+0xe0>
    e2f7:	lea    rax,[rip+0x77862]        # 85b60 <pos2ctx_last>
    e2fe:	mov    rdi,rbx
    e301:	mov    rdx,QWORD PTR [rax+rbp*8]
    e305:	movsxd rdx,DWORD PTR [rdx+r12*4]
    e309:	shl    rdx,0x4
    e30d:	add    rdx,QWORD PTR [rsp+0x28]
    e312:	sub    DWORD PTR [rsp+0x1c],0x1
    e317:	mov    r13d,DWORD PTR [rsp+0x1c]
    e31c:	sete   sil
    e320:	movzx  esi,sil
    e324:	call   5140 <biari_encode_symbol>
    e329:	test   r13d,r13d
    e32c:	jne    e290 <write_significance_map+0xe0>
    e332:	add    rsp,0x38
    e336:	pop    rbx
    e337:	pop    rbp
    e338:	pop    r12
    e33a:	pop    r13
    e33c:	pop    r14
    e33e:	pop    r15
    e340:	ret    
    e341:	nop    DWORD PTR [rax+0x0]
    e348:	lea    rax,[rsi+rax*1+0xd00]
    e350:	lea    rcx,[rsi+rcx*1+0x3a0]
    e358:	mov    QWORD PTR [rsp+0x28],rax
    e35d:	lea    rax,[rip+0x5cf5c]        # 6b2c0 <c1isdc>
    e364:	mov    QWORD PTR [rsp+0x10],rcx
    e369:	mov    ecx,DWORD PTR [rax+rbp*4]
    e36c:	test   ecx,ecx
    e36e:	jne    e26e <write_significance_map+0xbe>
    e374:	sub    QWORD PTR [rsp+0x8],0x4
    e37a:	mov    ecx,0x1
    e37f:	mov    r14d,0x1
    e385:	jmp    e278 <write_significance_map+0xc8>
    e38a:	nop    WORD PTR [rax+rax*1+0x0]
    e390:	lea    rax,[rip+0x77889]        # 85c20 <pos2ctx_map>
    e397:	mov    rdx,QWORD PTR [rax+rbp*8]
    e39b:	jmp    e2dd <write_significance_map+0x12d>

000000000000e3a0 <unary_bin_encode>:
    e3a0:	endbr64 
    e3a4:	push   r13
    e3a6:	mov    r13,rdx
    e3a9:	push   r12
    e3ab:	push   rbp
    e3ac:	mov    rbp,rdi
    e3af:	push   rbx
    e3b0:	sub    rsp,0x8
    e3b4:	test   esi,esi
    e3b6:	je     e3f0 <unary_bin_encode+0x50>
    e3b8:	movsxd r12,ecx
    e3bb:	mov    ebx,esi
    e3bd:	mov    esi,0x1
    e3c2:	call   5140 <biari_encode_symbol>
    e3c7:	shl    r12,0x4
    e3cb:	add    r12,r13
    e3ce:	sub    ebx,0x1
    e3d1:	je     e3ed <unary_bin_encode+0x4d>
    e3d3:	nop    DWORD PTR [rax+rax*1+0x0]
    e3d8:	mov    rdx,r12
    e3db:	mov    esi,0x1
    e3e0:	mov    rdi,rbp
    e3e3:	call   5140 <biari_encode_symbol>
    e3e8:	sub    ebx,0x1
    e3eb:	jne    e3d8 <unary_bin_encode+0x38>
    e3ed:	mov    rdx,r12
    e3f0:	add    rsp,0x8
    e3f4:	mov    rdi,rbp
    e3f7:	xor    esi,esi
    e3f9:	pop    rbx
    e3fa:	pop    rbp
    e3fb:	pop    r12
    e3fd:	pop    r13
    e3ff:	jmp    5140 <biari_encode_symbol>
    e404:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    e40f:	nop

000000000000e410 <writeRefFrame_CABAC>:
    e410:	endbr64 
    e414:	push   r15
    e416:	mov    r15,rdi
    e419:	xor    r8d,r8d
    e41c:	push   r14
    e41e:	mov    r14,rsi
    e421:	push   r13
    e423:	push   r12
    e425:	push   rbp
    e426:	push   rbx
    e427:	sub    rsp,0x48
    e42b:	movsxd rcx,DWORD PTR [r15+0x8]
    e42f:	mov    rax,QWORD PTR fs:0x28
    e438:	mov    QWORD PTR [rsp+0x38],rax
    e43d:	xor    eax,eax
    e43f:	mov    rax,QWORD PTR [rip+0x7a16a]        # 885b0 <img>
    e446:	mov    r9,rsp
    e449:	mov    rdx,QWORD PTR [rax+0x3750]
    e450:	movsxd rbx,DWORD PTR [rax+0xc]
    e454:	mov    esi,DWORD PTR [rax+0x48]
    e457:	mov    r13d,DWORD PTR [rax+0x18]
    e45b:	mov    rbp,QWORD PTR [rdx+0x20]
    e45f:	mov    rdx,QWORD PTR [rip+0x7c542]        # 8a9a8 <enc_picture>
    e466:	mov    rdi,rbx
    e469:	imul   rbx,rbx,0x278
    e470:	add    rbx,QWORD PTR [rax+0x3758]
    e477:	mov    rdx,QWORD PTR [rdx+0x1950]
    e47e:	mov    r12,QWORD PTR [rdx+rcx*8]
    e482:	mov    edx,DWORD PTR [rax+0x4c]
    e485:	mov    ecx,0xffffffff
    e48a:	call   30b60 <getLuma4x4Neighbour>
    e48f:	mov    rax,QWORD PTR [rip+0x7a11a]        # 885b0 <img>
    e496:	lea    r9,[rsp+0x20]
    e49b:	xor    ecx,ecx
    e49d:	mov    r8d,0xffffffff
    e4a3:	mov    edx,DWORD PTR [rax+0x4c]
    e4a6:	mov    esi,DWORD PTR [rax+0x48]
    e4a9:	mov    edi,DWORD PTR [rax+0xc]
    e4ac:	call   30b60 <getLuma4x4Neighbour>
    e4b1:	mov    eax,DWORD PTR [rsp+0x20]
    e4b5:	test   eax,eax
    e4b7:	je     e573 <writeRefFrame_CABAC+0x163>
    e4bd:	mov    rdi,QWORD PTR [rip+0x7a0ec]        # 885b0 <img>
    e4c4:	movsxd rdx,DWORD PTR [rsp+0x24]
    e4c9:	imul   rdx,rdx,0x278
    e4d0:	add    rdx,QWORD PTR [rdi+0x3758]
    e4d7:	mov    eax,DWORD PTR [rdx+0x48]
    e4da:	test   eax,eax
    e4dc:	je     e6b0 <writeRefFrame_CABAC+0x2a0>
    e4e2:	mov    ecx,DWORD PTR [rsp+0x2c]
    e4e6:	mov    eax,ecx
    e4e8:	shr    eax,0x1f
    e4eb:	add    eax,ecx
    e4ed:	mov    ecx,eax
    e4ef:	shr    eax,0x1f
    e4f2:	sar    ecx,1
    e4f4:	add    ecx,eax
    e4f6:	and    ecx,0x1
    e4f9:	sub    ecx,eax
    e4fb:	mov    eax,DWORD PTR [rsp+0x28]
    e4ff:	mov    esi,eax
    e501:	shr    esi,0x1f
    e504:	add    esi,eax
    e506:	mov    eax,esi
    e508:	shr    esi,0x1f
    e50b:	sar    eax,1
    e50d:	add    eax,esi
    e50f:	and    eax,0x1
    e512:	sub    eax,esi
    e514:	lea    eax,[rax+rcx*2]
    e517:	cdqe   
    e519:	mov    r8d,DWORD PTR [rdx+rax*4+0x1d8]
    e521:	test   r8d,r8d
    e524:	jne    e52e <writeRefFrame_CABAC+0x11e>
    e526:	xor    eax,eax
    e528:	cmp    r13d,0x1
    e52c:	je     e573 <writeRefFrame_CABAC+0x163>
    e52e:	movsxd rax,DWORD PTR [rsp+0x30]
    e533:	movsxd rcx,DWORD PTR [rsp+0x34]
    e538:	mov    esi,DWORD PTR [rdi+0x11ad0]
    e53e:	mov    rax,QWORD PTR [r12+rax*8]
    e542:	movzx  eax,WORD PTR [rax+rcx*2]
    e546:	test   esi,esi
    e548:	je     e568 <writeRefFrame_CABAC+0x158>
    e54a:	mov    ecx,DWORD PTR [rbx+0x214]
    e550:	test   ecx,ecx
    e552:	jne    e568 <writeRefFrame_CABAC+0x158>
    e554:	cmp    DWORD PTR [rdx+0x214],0x1
    e55b:	je     e6e0 <writeRefFrame_CABAC+0x2d0>
    e561:	nop    DWORD PTR [rax+0x0]
    e568:	test   ax,ax
    e56b:	setg   al
    e56e:	movzx  eax,al
    e571:	add    eax,eax
    e573:	mov    r11d,DWORD PTR [rsp]
    e577:	test   r11d,r11d
    e57a:	je     e63a <writeRefFrame_CABAC+0x22a>
    e580:	mov    r8,QWORD PTR [rip+0x7a029]        # 885b0 <img>
    e587:	movsxd rdx,DWORD PTR [rsp+0x4]
    e58c:	imul   rdx,rdx,0x278
    e593:	add    rdx,QWORD PTR [r8+0x3758]
    e59a:	mov    r10d,DWORD PTR [rdx+0x48]
    e59e:	test   r10d,r10d
    e5a1:	je     e6c0 <writeRefFrame_CABAC+0x2b0>
    e5a7:	mov    esi,DWORD PTR [rsp+0xc]
    e5ab:	mov    ecx,esi
    e5ad:	shr    ecx,0x1f
    e5b0:	add    ecx,esi
    e5b2:	mov    esi,ecx
    e5b4:	shr    ecx,0x1f
    e5b7:	sar    esi,1
    e5b9:	add    esi,ecx
    e5bb:	and    esi,0x1
    e5be:	sub    esi,ecx
    e5c0:	mov    ecx,DWORD PTR [rsp+0x8]
    e5c4:	mov    edi,ecx
    e5c6:	shr    edi,0x1f
    e5c9:	add    edi,ecx
    e5cb:	mov    ecx,edi
    e5cd:	shr    edi,0x1f
    e5d0:	sar    ecx,1
    e5d2:	add    ecx,edi
    e5d4:	and    ecx,0x1
    e5d7:	sub    ecx,edi
    e5d9:	lea    ecx,[rcx+rsi*2]
    e5dc:	movsxd rcx,ecx
    e5df:	mov    r9d,DWORD PTR [rdx+rcx*4+0x1d8]
    e5e7:	test   r9d,r9d
    e5ea:	jne    e5f2 <writeRefFrame_CABAC+0x1e2>
    e5ec:	cmp    r13d,0x1
    e5f0:	je     e63a <writeRefFrame_CABAC+0x22a>
    e5f2:	movsxd rcx,DWORD PTR [rsp+0x10]
    e5f7:	movsxd rsi,DWORD PTR [rsp+0x14]
    e5fc:	mov    edi,DWORD PTR [r8+0x11ad0]
    e603:	mov    rcx,QWORD PTR [r12+rcx*8]
    e607:	movzx  ecx,WORD PTR [rcx+rsi*2]
    e60b:	test   edi,edi
    e60d:	je     e630 <writeRefFrame_CABAC+0x220>
    e60f:	mov    esi,DWORD PTR [rbx+0x214]
    e615:	test   esi,esi
    e617:	jne    e630 <writeRefFrame_CABAC+0x220>
    e619:	cmp    DWORD PTR [rdx+0x214],0x1
    e620:	je     e6d0 <writeRefFrame_CABAC+0x2c0>
    e626:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e630:	xor    edx,edx
    e632:	test   cx,cx
    e635:	setg   dl
    e638:	add    eax,edx
    e63a:	mov    DWORD PTR [r15+0x18],eax
    e63e:	mov    ebx,DWORD PTR [r15+0x4]
    e642:	cdqe   
    e644:	shl    rax,0x4
    e648:	lea    rdx,[rbp+rax*1+0x470]
    e650:	test   ebx,ebx
    e652:	jne    e688 <writeRefFrame_CABAC+0x278>
    e654:	xor    esi,esi
    e656:	mov    rdi,r14
    e659:	call   5140 <biari_encode_symbol>
    e65e:	mov    rax,QWORD PTR [rsp+0x38]
    e663:	xor    rax,QWORD PTR fs:0x28
    e66c:	jne    e6f1 <writeRefFrame_CABAC+0x2e1>
    e672:	add    rsp,0x48
    e676:	pop    rbx
    e677:	pop    rbp
    e678:	pop    r12
    e67a:	pop    r13
    e67c:	pop    r14
    e67e:	pop    r15
    e680:	ret    
    e681:	nop    DWORD PTR [rax+0x0]
    e688:	mov    rdi,r14
    e68b:	mov    esi,0x1
    e690:	call   5140 <biari_encode_symbol>
    e695:	lea    esi,[rbx-0x1]
    e698:	mov    ecx,0x1
    e69d:	mov    rdi,r14
    e6a0:	lea    rdx,[rbp+0x4b0]
    e6a7:	call   e3a0 <unary_bin_encode>
    e6ac:	jmp    e65e <writeRefFrame_CABAC+0x24e>
    e6ae:	xchg   ax,ax
    e6b0:	cmp    DWORD PTR [rdi+0x18],0x1
    e6b4:	jne    e4e2 <writeRefFrame_CABAC+0xd2>
    e6ba:	jmp    e573 <writeRefFrame_CABAC+0x163>
    e6bf:	nop
    e6c0:	cmp    DWORD PTR [r8+0x18],0x1
    e6c5:	jne    e5a7 <writeRefFrame_CABAC+0x197>
    e6cb:	jmp    e63a <writeRefFrame_CABAC+0x22a>
    e6d0:	xor    edx,edx
    e6d2:	cmp    cx,0x1
    e6d6:	setg   dl
    e6d9:	add    eax,edx
    e6db:	jmp    e63a <writeRefFrame_CABAC+0x22a>
    e6e0:	cmp    ax,0x1
    e6e4:	setg   al
    e6e7:	movzx  eax,al
    e6ea:	add    eax,eax
    e6ec:	jmp    e573 <writeRefFrame_CABAC+0x163>
    e6f1:	call   4390 <__stack_chk_fail@plt>
    e6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000e700 <writeDquant_CABAC>:
    e700:	endbr64 
    e704:	mov    rcx,QWORD PTR [rip+0x79ea5]        # 885b0 <img>
    e70b:	push   r12
    e70d:	push   rbp
    e70e:	mov    rbp,rsi
    e711:	push   rbx
    e712:	mov    rax,QWORD PTR [rcx+0x3750]
    e719:	mov    edx,DWORD PTR [rdi+0x4]
    e71c:	mov    r12,QWORD PTR [rax+0x20]
    e720:	movsxd rax,DWORD PTR [rcx+0xc]
    e724:	imul   rax,rax,0x278
    e72b:	add    rax,QWORD PTR [rcx+0x3758]
    e732:	mov    ecx,edx
    e734:	sar    ecx,0x1f
    e737:	mov    eax,DWORD PTR [rax+0x254]
    e73d:	mov    ebx,ecx
    e73f:	xor    ebx,edx
    e741:	mov    DWORD PTR [rip+0x7a179],eax        # 888c0 <last_dquant>
    e747:	sub    ebx,ecx
    e749:	add    ebx,ebx
    e74b:	test   eax,eax
    e74d:	setne  al
    e750:	movzx  eax,al
    e753:	shl    rax,0x4
    e757:	test   edx,edx
    e759:	lea    r8,[r12+rax*1+0x530]
    e761:	mov    rdx,r8
    e764:	jle    e790 <writeDquant_CABAC+0x90>
    e766:	mov    rdi,rbp
    e769:	mov    esi,0x1
    e76e:	call   5140 <biari_encode_symbol>
    e773:	lea    esi,[rbx-0x2]
    e776:	mov    rdi,rbp
    e779:	pop    rbx
    e77a:	lea    rdx,[r12+0x550]
    e782:	pop    rbp
    e783:	mov    ecx,0x1
    e788:	pop    r12
    e78a:	jmp    e3a0 <unary_bin_encode>
    e78f:	nop
    e790:	add    ebx,0x1
    e793:	cmp    ebx,0x1
    e796:	jne    e766 <writeDquant_CABAC+0x66>
    e798:	pop    rbx
    e799:	mov    rdi,rbp
    e79c:	xor    esi,esi
    e79e:	pop    rbp
    e79f:	pop    r12
    e7a1:	jmp    5140 <biari_encode_symbol>
    e7a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000e7b0 <unary_bin_max_encode>:
    e7b0:	endbr64 
    e7b4:	push   r15
    e7b6:	push   r14
    e7b8:	push   r13
    e7ba:	mov    r13,rdx
    e7bd:	push   r12
    e7bf:	push   rbp
    e7c0:	mov    rbp,rdi
    e7c3:	push   rbx
    e7c4:	sub    rsp,0x8
    e7c8:	test   esi,esi
    e7ca:	je     e823 <unary_bin_max_encode+0x73>
    e7cc:	mov    r14d,esi
    e7cf:	movsxd r12,ecx
    e7d2:	mov    esi,0x1
    e7d7:	mov    r15d,r8d
    e7da:	call   5140 <biari_encode_symbol>
    e7df:	shl    r12,0x4
    e7e3:	mov    ebx,r14d
    e7e6:	add    r12,r13
    e7e9:	sub    ebx,0x1
    e7ec:	je     e805 <unary_bin_max_encode+0x55>
    e7ee:	xchg   ax,ax
    e7f0:	mov    rdx,r12
    e7f3:	mov    esi,0x1
    e7f8:	mov    rdi,rbp
    e7fb:	call   5140 <biari_encode_symbol>
    e800:	sub    ebx,0x1
    e803:	jne    e7f0 <unary_bin_max_encode+0x40>
    e805:	cmp    r14d,r15d
    e808:	jb     e820 <unary_bin_max_encode+0x70>
    e80a:	add    rsp,0x8
    e80e:	pop    rbx
    e80f:	pop    rbp
    e810:	pop    r12
    e812:	pop    r13
    e814:	pop    r14
    e816:	pop    r15
    e818:	ret    
    e819:	nop    DWORD PTR [rax+0x0]
    e820:	mov    rdx,r12
    e823:	add    rsp,0x8
    e827:	mov    rdi,rbp
    e82a:	xor    esi,esi
    e82c:	pop    rbx
    e82d:	pop    rbp
    e82e:	pop    r12
    e830:	pop    r13
    e832:	pop    r14
    e834:	pop    r15
    e836:	jmp    5140 <biari_encode_symbol>
    e83b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000e840 <writeCIPredMode_CABAC>:
    e840:	endbr64 
    e844:	mov    rax,QWORD PTR [rip+0x79d65]        # 885b0 <img>
    e84b:	push   r12
    e84d:	push   rbp
    e84e:	mov    rbp,rsi
    e851:	push   rbx
    e852:	mov    rdx,QWORD PTR [rax+0x3750]
    e859:	mov    ebx,DWORD PTR [rdi+0x4]
    e85c:	mov    r12,QWORD PTR [rdx+0x28]
    e860:	movsxd rdx,DWORD PTR [rax+0xc]
    e864:	imul   rdx,rdx,0x278
    e86b:	add    rdx,QWORD PTR [rax+0x3758]
    e872:	xor    eax,eax
    e874:	mov    rcx,QWORD PTR [rdx+0x38]
    e878:	test   rcx,rcx
    e87b:	je     e88a <writeCIPredMode_CABAC+0x4a>
    e87d:	mov    ecx,DWORD PTR [rcx+0x20c]
    e883:	xor    eax,eax
    e885:	test   ecx,ecx
    e887:	setne  al
    e88a:	mov    rdx,QWORD PTR [rdx+0x40]
    e88e:	test   rdx,rdx
    e891:	je     e8a3 <writeCIPredMode_CABAC+0x63>
    e893:	mov    edx,DWORD PTR [rdx+0x20c]
    e899:	test   edx,edx
    e89b:	setne  dl
    e89e:	movzx  edx,dl
    e8a1:	add    eax,edx
    e8a3:	cdqe   
    e8a5:	shl    rax,0x4
    e8a9:	lea    rdx,[r12+rax*1+0x20]
    e8ae:	test   ebx,ebx
    e8b0:	jne    e8c0 <writeCIPredMode_CABAC+0x80>
    e8b2:	pop    rbx
    e8b3:	mov    rdi,rbp
    e8b6:	xor    esi,esi
    e8b8:	pop    rbp
    e8b9:	pop    r12
    e8bb:	jmp    5140 <biari_encode_symbol>
    e8c0:	mov    rdi,rbp
    e8c3:	mov    esi,0x1
    e8c8:	call   5140 <biari_encode_symbol>
    e8cd:	lea    rdx,[r12+0x50]
    e8d2:	lea    esi,[rbx-0x1]
    e8d5:	mov    rdi,rbp
    e8d8:	pop    rbx
    e8d9:	mov    r8d,0x2
    e8df:	pop    rbp
    e8e0:	xor    ecx,ecx
    e8e2:	pop    r12
    e8e4:	jmp    e7b0 <unary_bin_max_encode>
    e8e9:	nop    DWORD PTR [rax+0x0]

000000000000e8f0 <exp_golomb_encode_eq_prob>:
    e8f0:	endbr64 
    e8f4:	push   r14
    e8f6:	mov    ecx,edx
    e8f8:	mov    r14d,edx
    e8fb:	push   r13
    e8fd:	mov    r13,rdi
    e900:	push   r12
    e902:	mov    r12d,esi
    e905:	push   rbp
    e906:	push   rbx
    e907:	mov    ebx,0x1
    e90c:	shl    ebx,cl
    e90e:	cmp    esi,ebx
    e910:	jb     e978 <exp_golomb_encode_eq_prob+0x88>
    e912:	nop    WORD PTR [rax+rax*1+0x0]
    e918:	mov    esi,0x1
    e91d:	mov    rdi,r13
    e920:	mov    ebp,r14d
    e923:	add    r14d,0x1
    e927:	call   53b0 <biari_encode_symbol_eq_prob>
    e92c:	sub    r12d,ebx
    e92f:	mov    ecx,r14d
    e932:	mov    ebx,0x1
    e937:	shl    ebx,cl
    e939:	cmp    ebx,r12d
    e93c:	jbe    e918 <exp_golomb_encode_eq_prob+0x28>
    e93e:	xor    esi,esi
    e940:	mov    rdi,r13
    e943:	call   53b0 <biari_encode_symbol_eq_prob>
    e948:	test   r14d,r14d
    e94b:	je     e96a <exp_golomb_encode_eq_prob+0x7a>
    e94d:	nop    DWORD PTR [rax]
    e950:	mov    ecx,ebp
    e952:	mov    esi,r12d
    e955:	mov    rdi,r13
    e958:	sub    ebp,0x1
    e95b:	shr    esi,cl
    e95d:	and    esi,0x1
    e960:	call   53b0 <biari_encode_symbol_eq_prob>
    e965:	cmp    ebp,0xffffffff
    e968:	jne    e950 <exp_golomb_encode_eq_prob+0x60>
    e96a:	pop    rbx
    e96b:	pop    rbp
    e96c:	pop    r12
    e96e:	pop    r13
    e970:	pop    r14
    e972:	ret    
    e973:	nop    DWORD PTR [rax+rax*1+0x0]
    e978:	lea    ebp,[rdx-0x1]
    e97b:	jmp    e93e <exp_golomb_encode_eq_prob+0x4e>
    e97d:	nop    DWORD PTR [rax]

000000000000e980 <unary_exp_golomb_level_encode>:
    e980:	endbr64 
    e984:	push   r14
    e986:	push   r13
    e988:	push   r12
    e98a:	mov    r12,rdx
    e98d:	push   rbp
    e98e:	mov    rbp,rdi
    e991:	push   rbx
    e992:	test   esi,esi
    e994:	je     e9e8 <unary_exp_golomb_level_encode+0x68>
    e996:	mov    r13d,esi
    e999:	mov    esi,0x1
    e99e:	call   5140 <biari_encode_symbol>
    e9a3:	mov    ebx,r13d
    e9a6:	lea    r14d,[r13-0xd]
    e9aa:	sub    ebx,0x1
    e9ad:	je     e9e8 <unary_exp_golomb_level_encode+0x68>
    e9af:	nop
    e9b0:	mov    rdx,r12
    e9b3:	mov    esi,0x1
    e9b8:	mov    rdi,rbp
    e9bb:	call   5140 <biari_encode_symbol>
    e9c0:	sub    ebx,0x1
    e9c3:	je     e9ca <unary_exp_golomb_level_encode+0x4a>
    e9c5:	cmp    r14d,ebx
    e9c8:	jne    e9b0 <unary_exp_golomb_level_encode+0x30>
    e9ca:	cmp    r13d,0xc
    e9ce:	jbe    e9e8 <unary_exp_golomb_level_encode+0x68>
    e9d0:	pop    rbx
    e9d1:	mov    esi,r14d
    e9d4:	mov    rdi,rbp
    e9d7:	xor    edx,edx
    e9d9:	pop    rbp
    e9da:	pop    r12
    e9dc:	pop    r13
    e9de:	pop    r14
    e9e0:	jmp    e8f0 <exp_golomb_encode_eq_prob>
    e9e5:	nop    DWORD PTR [rax]
    e9e8:	pop    rbx
    e9e9:	mov    rdx,r12
    e9ec:	mov    rdi,rbp
    e9ef:	xor    esi,esi
    e9f1:	pop    rbp
    e9f2:	pop    r12
    e9f4:	pop    r13
    e9f6:	pop    r14
    e9f8:	jmp    5140 <biari_encode_symbol>
    e9fd:	nop    DWORD PTR [rax]

000000000000ea00 <write_significant_coefficients>:
    ea00:	endbr64 
    ea04:	push   r15
    ea06:	lea    rax,[rip+0x5c8f3]        # 6b300 <maxpos>
    ea0d:	push   r14
    ea0f:	push   r13
    ea11:	push   r12
    ea13:	push   rbp
    ea14:	push   rbx
    ea15:	movsxd rbx,edx
    ea18:	sub    rsp,0x18
    ea1c:	mov    edx,DWORD PTR [rax+rbx*4]
    ea1f:	mov    DWORD PTR [rsp+0xc],0x0
    ea27:	sub    edx,0x1
    ea2a:	js     eb3f <write_significant_coefficients+0x13f>
    ea30:	mov    rbp,rsi
    ea33:	mov    r12,rcx
    ea36:	movsxd r14,edx
    ea39:	mov    r15d,0x1
    ea3f:	nop
    ea40:	mov    ecx,DWORD PTR [r12+r14*4]
    ea44:	test   ecx,ecx
    ea46:	je     eb32 <write_significant_coefficients+0x132>
    ea4c:	mov    r13d,0x0
    ea52:	jg     ea5c <write_significant_coefficients+0x5c>
    ea54:	neg    ecx
    ea56:	mov    r13d,0x1
    ea5c:	mov    rdx,QWORD PTR [rip+0x79b4d]        # 885b0 <img>
    ea63:	lea    rax,[rip+0x5c796]        # 6b200 <type2ctx_abs>
    ea6a:	mov    DWORD PTR [rsp+0x8],ecx
    ea6e:	mov    rdi,QWORD PTR [rdx+0x3750]
    ea75:	movsxd rdx,DWORD PTR [rax+rbx*4]
    ea79:	lea    rsi,[rdx+rdx*4]
    ea7d:	mov    edx,0x4
    ea82:	shl    rsi,0x4
    ea86:	cmp    r15d,0x4
    ea8a:	cmovle edx,r15d
    ea8e:	movsxd rdx,edx
    ea91:	shl    rdx,0x4
    ea95:	lea    rdx,[rsi+rdx*1+0x1660]
    ea9d:	add    rdx,QWORD PTR [rdi+0x28]
    eaa1:	cmp    ecx,0x1
    eaa4:	mov    rdi,rbp
    eaa7:	setg   sil
    eaab:	movzx  esi,sil
    eaaf:	call   5140 <biari_encode_symbol>
    eab4:	mov    ecx,DWORD PTR [rsp+0x8]
    eab8:	cmp    r15d,0x1
    eabc:	sbb    r15d,0xffffffff
    eac0:	cmp    ecx,0x1
    eac3:	je     eb27 <write_significant_coefficients+0x127>
    eac5:	mov    r15d,DWORD PTR [rsp+0xc]
    eaca:	mov    rdx,QWORD PTR [rip+0x79adf]        # 885b0 <img>
    ead1:	lea    rax,[rip+0x5c6e8]        # 6b1c0 <max_c2>
    ead8:	cmp    DWORD PTR [rax+rbx*4],r15d
    eadc:	mov    rdi,QWORD PTR [rdx+0x3750]
    eae3:	mov    edx,r15d
    eae6:	cmovle edx,DWORD PTR [rax+rbx*4]
    eaea:	lea    rax,[rip+0x5c70f]        # 6b200 <type2ctx_abs>
    eaf1:	movsxd rsi,DWORD PTR [rax+rbx*4]
    eaf5:	add    r15d,0x1
    eaf9:	movsxd rdx,edx
    eafc:	lea    rsi,[rsi+rsi*4]
    eb00:	shl    rdx,0x4
    eb04:	shl    rsi,0x4
    eb08:	lea    rdx,[rdx+rsi*1+0x1980]
    eb10:	lea    esi,[rcx-0x2]
    eb13:	add    rdx,QWORD PTR [rdi+0x28]
    eb17:	mov    rdi,rbp
    eb1a:	call   e980 <unary_exp_golomb_level_encode>
    eb1f:	mov    DWORD PTR [rsp+0xc],r15d
    eb24:	xor    r15d,r15d
    eb27:	mov    esi,r13d
    eb2a:	mov    rdi,rbp
    eb2d:	call   53b0 <biari_encode_symbol_eq_prob>
    eb32:	sub    r14,0x1
    eb36:	test   r14d,r14d
    eb39:	jns    ea40 <write_significant_coefficients+0x40>
    eb3f:	add    rsp,0x18
    eb43:	pop    rbx
    eb44:	pop    rbp
    eb45:	pop    r12
    eb47:	pop    r13
    eb49:	pop    r14
    eb4b:	pop    r15
    eb4d:	ret    
    eb4e:	xchg   ax,ax

000000000000eb50 <writeRunLevel_CABAC>:
    eb50:	endbr64 
    eb54:	push   r12
    eb56:	mov    edx,DWORD PTR [rip+0x79e84]        # 889e0 <pos.5157>
    eb5c:	push   rbp
    eb5d:	push   rbx
    eb5e:	mov    eax,DWORD PTR [rdi+0x4]
    eb61:	mov    rbx,rdi
    eb64:	test   eax,eax
    eb66:	jne    ec48 <writeRunLevel_CABAC+0xf8>
    eb6c:	mov    rax,QWORD PTR [rip+0x79a3d]        # 885b0 <img>
    eb73:	mov    rbp,rsi
    eb76:	mov    r12,QWORD PTR [rax+0x3758]
    eb7d:	movsxd rdi,DWORD PTR [rax+0xc]
    eb81:	cmp    edx,0x3f
    eb84:	jg     ebc9 <writeRunLevel_CABAC+0x79>
    eb86:	mov    ecx,0x3f
    eb8b:	movsxd rsi,edx
    eb8e:	lea    rax,[rip+0x79d4b]        # 888e0 <coeff.5155>
    eb95:	mov    r9d,ecx
    eb98:	lea    rcx,[rip+0x79d45]        # 888e4 <coeff.5155+0x4>
    eb9f:	lea    rax,[rax+rsi*4]
    eba3:	sub    r9d,edx
    eba6:	mov    rdx,r9
    eba9:	add    rdx,rsi
    ebac:	lea    rdx,[rcx+rdx*4]
    ebb0:	mov    DWORD PTR [rax],0x0
    ebb6:	add    rax,0x4
    ebba:	cmp    rax,rdx
    ebbd:	jne    ebb0 <writeRunLevel_CABAC+0x60>
    ebbf:	mov    DWORD PTR [rip+0x79e17],0x40        # 889e0 <pos.5157>
    ebc9:	imul   rdi,rdi,0x278
    ebd0:	xor    ecx,ecx
    ebd2:	mov    edx,DWORD PTR [rbx+0x18]
    ebd5:	mov    rsi,rbp
    ebd8:	mov    eax,DWORD PTR [rip+0x79ce6]        # 888c4 <coeff_ctr.5156>
    ebde:	add    r12,rdi
    ebe1:	test   eax,eax
    ebe3:	setg   cl
    ebe6:	mov    rdi,r12
    ebe9:	call   dbd0 <write_and_store_CBP_block_bit>
    ebee:	mov    r8d,DWORD PTR [rip+0x79ccf]        # 888c4 <coeff_ctr.5156>
    ebf5:	test   r8d,r8d
    ebf8:	jg     ec18 <writeRunLevel_CABAC+0xc8>
    ebfa:	mov    DWORD PTR [rip+0x79cc0],0x0        # 888c4 <coeff_ctr.5156>
    ec04:	pop    rbx
    ec05:	mov    DWORD PTR [rip+0x79dd1],0x0        # 889e0 <pos.5157>
    ec0f:	pop    rbp
    ec10:	pop    r12
    ec12:	ret    
    ec13:	nop    DWORD PTR [rax+rax*1+0x0]
    ec18:	mov    edx,DWORD PTR [rbx+0x18]
    ec1b:	mov    rsi,rbp
    ec1e:	mov    rdi,r12
    ec21:	lea    rcx,[rip+0x79cb8]        # 888e0 <coeff.5155>
    ec28:	call   e1b0 <write_significance_map>
    ec2d:	mov    edx,DWORD PTR [rbx+0x18]
    ec30:	mov    rsi,rbp
    ec33:	mov    rdi,r12
    ec36:	lea    rcx,[rip+0x79ca3]        # 888e0 <coeff.5155>
    ec3d:	call   ea00 <write_significant_coefficients>
    ec42:	jmp    ebfa <writeRunLevel_CABAC+0xaa>
    ec44:	nop    DWORD PTR [rax+0x0]
    ec48:	mov    ecx,DWORD PTR [rdi+0x8]
    ec4b:	lea    rdi,[rip+0x79c8e]        # 888e0 <coeff.5155>
    ec52:	test   ecx,ecx
    ec54:	jle    ec86 <writeRunLevel_CABAC+0x136>
    ec56:	movsxd rax,edx
    ec59:	lea    rdi,[rip+0x79c80]        # 888e0 <coeff.5155>
    ec60:	lea    ecx,[rdx+0x1]
    ec63:	lea    rsi,[rdi+rax*4]
    ec67:	xor    eax,eax
    ec69:	nop    DWORD PTR [rax+0x0]
    ec70:	mov    DWORD PTR [rsi+rax*4],0x0
    ec77:	lea    edx,[rcx+rax*1]
    ec7a:	add    rax,0x1
    ec7e:	cmp    DWORD PTR [rbx+0x8],eax
    ec81:	jg     ec70 <writeRunLevel_CABAC+0x120>
    ec83:	mov    eax,DWORD PTR [rbx+0x4]
    ec86:	lea    ecx,[rdx+0x1]
    ec89:	movsxd rdx,edx
    ec8c:	add    DWORD PTR [rip+0x79c31],0x1        # 888c4 <coeff_ctr.5156>
    ec93:	mov    DWORD PTR [rdi+rdx*4],eax
    ec96:	pop    rbx
    ec97:	mov    DWORD PTR [rip+0x79d43],ecx        # 889e0 <pos.5157>
    ec9d:	pop    rbp
    ec9e:	pop    r12
    eca0:	ret    
    eca1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    ecac:	nop    DWORD PTR [rax+0x0]

000000000000ecb0 <unary_exp_golomb_mv_encode>:
    ecb0:	endbr64 
    ecb4:	push   r14
    ecb6:	push   r13
    ecb8:	mov    r13,rdi
    ecbb:	push   r12
    ecbd:	mov    r12,rdx
    ecc0:	push   rbp
    ecc1:	push   rbx
    ecc2:	test   esi,esi
    ecc4:	je     ed40 <unary_exp_golomb_mv_encode+0x90>
    ecc6:	mov    ebp,esi
    ecc8:	mov    esi,0x1
    eccd:	mov    r14d,ecx
    ecd0:	add    r12,0x10
    ecd4:	call   5140 <biari_encode_symbol>
    ecd9:	cmp    ebp,0x1
    ecdc:	je     ed40 <unary_exp_golomb_mv_encode+0x90>
    ecde:	mov    ebx,0x2
    ece3:	nop    DWORD PTR [rax+rax*1+0x0]
    ece8:	mov    rdx,r12
    eceb:	mov    esi,0x1
    ecf0:	mov    rdi,r13
    ecf3:	call   5140 <biari_encode_symbol>
    ecf8:	lea    rax,[r12+0x10]
    ecfd:	cmp    ebx,0x2
    ed00:	cmove  r12,rax
    ed04:	cmp    r14d,ebx
    ed07:	lea    rax,[r12+0x10]
    ed0c:	cmove  r12,rax
    ed10:	cmp    ebp,ebx
    ed12:	je     ed1c <unary_exp_golomb_mv_encode+0x6c>
    ed14:	add    ebx,0x1
    ed17:	cmp    ebx,0x9
    ed1a:	jne    ece8 <unary_exp_golomb_mv_encode+0x38>
    ed1c:	cmp    ebp,0x7
    ed1f:	jbe    ed40 <unary_exp_golomb_mv_encode+0x90>
    ed21:	pop    rbx
    ed22:	lea    esi,[rbp-0x8]
    ed25:	mov    rdi,r13
    ed28:	pop    rbp
    ed29:	mov    edx,0x3
    ed2e:	pop    r12
    ed30:	pop    r13
    ed32:	pop    r14
    ed34:	jmp    e8f0 <exp_golomb_encode_eq_prob>
    ed39:	nop    DWORD PTR [rax+0x0]
    ed40:	pop    rbx
    ed41:	mov    rdx,r12
    ed44:	pop    rbp
    ed45:	mov    rdi,r13
    ed48:	pop    r12
    ed4a:	xor    esi,esi
    ed4c:	pop    r13
    ed4e:	pop    r14
    ed50:	jmp    5140 <biari_encode_symbol>
    ed55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000ed60 <writeMVD_CABAC>:
    ed60:	endbr64 
    ed64:	push   r15
    ed66:	xor    r8d,r8d
    ed69:	push   r14
    ed6b:	push   r13
    ed6d:	mov    r13,rdi
    ed70:	push   r12
    ed72:	mov    r12,rsi
    ed75:	push   rbp
    ed76:	push   rbx
    ed77:	sub    rsp,0x58
    ed7b:	mov    ebp,DWORD PTR [rdi+0x8]
    ed7e:	mov    rax,QWORD PTR fs:0x28
    ed87:	mov    QWORD PTR [rsp+0x48],rax
    ed8c:	xor    eax,eax
    ed8e:	mov    rax,QWORD PTR [rip+0x7981b]        # 885b0 <img>
    ed95:	lea    r9,[rsp+0x10]
    ed9a:	mov    ebx,ebp
    ed9c:	sar    ebp,1
    ed9e:	mov    r14d,DWORD PTR [rax+0x48]
    eda2:	mov    rcx,QWORD PTR [rax+0x3750]
    eda9:	and    ebx,0x1
    edac:	movsxd r15,DWORD PTR [rax+0xc]
    edb0:	mov    edx,DWORD PTR [rax+0x4c]
    edb3:	mov    DWORD PTR [rsp+0xc],ebx
    edb7:	mov    esi,r14d
    edba:	mov    rbx,QWORD PTR [rcx+0x20]
    edbe:	mov    ecx,0xffffffff
    edc3:	mov    rdi,r15
    edc6:	mov    DWORD PTR [rsp+0x8],edx
    edca:	imul   r15,r15,0x278
    edd1:	add    r15,QWORD PTR [rax+0x3758]
    edd8:	call   30b60 <getLuma4x4Neighbour>
    eddd:	mov    edx,DWORD PTR [rsp+0x8]
    ede1:	lea    r9,[rsp+0x30]
    ede6:	xor    ecx,ecx
    ede8:	mov    rax,QWORD PTR [rip+0x797c1]        # 885b0 <img>
    edef:	mov    r8d,0xffffffff
    edf5:	mov    esi,r14d
    edf8:	mov    edi,DWORD PTR [rax+0xc]
    edfb:	call   30b60 <getLuma4x4Neighbour>
    ee00:	mov    edx,DWORD PTR [rsp+0x30]
    ee04:	test   edx,edx
    ee06:	je     eed0 <writeMVD_CABAC+0x170>
    ee0c:	movsxd rdx,DWORD PTR [rsp+0x3c]
    ee11:	movsxd rax,DWORD PTR [rsp+0x34]
    ee16:	movsxd r8,ebp
    ee19:	movsxd r14,DWORD PTR [rsp+0xc]
    ee1e:	mov    rsi,QWORD PTR [rip+0x7978b]        # 885b0 <img>
    ee25:	imul   rax,rax,0x278
    ee2c:	lea    rcx,[rdx+r14*4]
    ee30:	movsxd rdx,DWORD PTR [rsp+0x38]
    ee35:	mov    rdi,QWORD PTR [rsi+0x3758]
    ee3c:	lea    rdx,[rdx+rcx*4]
    ee40:	add    rax,rdi
    ee43:	lea    rdx,[r8+rdx*2+0x10]
    ee48:	mov    ecx,DWORD PTR [rax+rdx*4+0xc]
    ee4c:	mov    r10d,DWORD PTR [rax+rdx*4+0xc]
    ee51:	sar    ecx,0x1f
    ee54:	xor    r10d,ecx
    ee57:	mov    edx,r10d
    ee5a:	sub    edx,ecx
    ee5c:	mov    ecx,DWORD PTR [rsi+0x11ad0]
    ee62:	test   ecx,ecx
    ee64:	je     ee6f <writeMVD_CABAC+0x10f>
    ee66:	cmp    ebp,0x1
    ee69:	je     eff0 <writeMVD_CABAC+0x290>
    ee6f:	mov    r9d,DWORD PTR [rsp+0x10]
    ee74:	test   r9d,r9d
    ee77:	je     eeb6 <writeMVD_CABAC+0x156>
    ee79:	movsxd rcx,DWORD PTR [rsp+0x1c]
    ee7e:	movsxd rax,DWORD PTR [rsp+0x14]
    ee83:	imul   rax,rax,0x278
    ee8a:	add    rax,QWORD PTR [rsi+0x3758]
    ee91:	lea    rsi,[rcx+r14*4]
    ee95:	movsxd rcx,DWORD PTR [rsp+0x18]
    ee9a:	lea    rcx,[rcx+rsi*4]
    ee9e:	lea    rcx,[r8+rcx*2+0x10]
    eea3:	mov    esi,DWORD PTR [rax+rcx*4+0xc]
    eea7:	mov    edi,DWORD PTR [rax+rcx*4+0xc]
    eeab:	sar    esi,0x1f
    eeae:	xor    edi,esi
    eeb0:	mov    ecx,edi
    eeb2:	sub    ecx,esi
    eeb4:	add    edx,ecx
    eeb6:	lea    ebp,[rbp+rbp*4+0x0]
    eeba:	mov    eax,ebp
    eebc:	cmp    edx,0x2
    eebf:	jle    eee0 <writeMVD_CABAC+0x180>
    eec1:	xor    eax,eax
    eec3:	cmp    edx,0x20
    eec6:	setg   al
    eec9:	lea    eax,[rax+rbp*1+0x2]
    eecd:	jmp    eee0 <writeMVD_CABAC+0x180>
    eecf:	nop
    eed0:	mov    r10d,DWORD PTR [rsp+0x10]
    eed5:	test   r10d,r10d
    eed8:	jne    ef30 <writeMVD_CABAC+0x1d0>
    eeda:	lea    eax,[rbp+rbp*4+0x0]
    eede:	mov    ebp,eax
    eee0:	movsxd rdx,eax
    eee3:	mov    r14d,DWORD PTR [r13+0x4]
    eee7:	mov    DWORD PTR [r13+0x18],eax
    eeeb:	add    rdx,0x33
    eeef:	shl    rdx,0x4
    eef3:	add    rdx,rbx
    eef6:	test   r14d,r14d
    eef9:	jne    efa0 <writeMVD_CABAC+0x240>
    eeff:	xor    esi,esi
    ef01:	mov    rdi,r12
    ef04:	call   5140 <biari_encode_symbol>
    ef09:	mov    rax,QWORD PTR [rsp+0x48]
    ef0e:	xor    rax,QWORD PTR fs:0x28
    ef17:	jne    f09e <writeMVD_CABAC+0x33e>
    ef1d:	add    rsp,0x58
    ef21:	pop    rbx
    ef22:	pop    rbp
    ef23:	pop    r12
    ef25:	pop    r13
    ef27:	pop    r14
    ef29:	pop    r15
    ef2b:	ret    
    ef2c:	nop    DWORD PTR [rax+0x0]
    ef30:	movsxd rsi,DWORD PTR [rsp+0x1c]
    ef35:	movsxd r14,DWORD PTR [rsp+0xc]
    ef3a:	movsxd rcx,ebp
    ef3d:	mov    rdi,QWORD PTR [rip+0x7966c]        # 885b0 <img>
    ef44:	movsxd rax,DWORD PTR [rsp+0x14]
    ef49:	lea    r8,[rsi+r14*4]
    ef4d:	movsxd rsi,DWORD PTR [rsp+0x18]
    ef52:	imul   rax,rax,0x278
    ef59:	add    rax,QWORD PTR [rdi+0x3758]
    ef60:	mov    edi,DWORD PTR [rdi+0x11ad0]
    ef66:	lea    rsi,[rsi+r8*4]
    ef6a:	lea    rcx,[rcx+rsi*2+0x10]
    ef6f:	mov    esi,DWORD PTR [rax+rcx*4+0xc]
    ef73:	mov    r11d,DWORD PTR [rax+rcx*4+0xc]
    ef78:	sar    esi,0x1f
    ef7b:	xor    r11d,esi
    ef7e:	mov    ecx,r11d
    ef81:	sub    ecx,esi
    ef83:	test   edi,edi
    ef85:	je     eeb4 <writeMVD_CABAC+0x154>
    ef8b:	cmp    ebp,0x1
    ef8e:	jne    eeb4 <writeMVD_CABAC+0x154>
    ef94:	mov    esi,DWORD PTR [r15+0x214]
    ef9b:	jmp    f051 <writeMVD_CABAC+0x2f1>
    efa0:	mov    rdi,r12
    efa3:	mov    esi,0x1
    efa8:	movsxd rbp,ebp
    efab:	call   5140 <biari_encode_symbol>
    efb0:	mov    eax,r14d
    efb3:	shl    rbp,0x4
    efb7:	mov    rdi,r12
    efba:	sar    eax,0x1f
    efbd:	lea    rdx,[rbx+rbp*1+0x3d0]
    efc5:	mov    ecx,0x3
    efca:	mov    esi,eax
    efcc:	xor    esi,r14d
    efcf:	sub    esi,eax
    efd1:	sub    esi,0x1
    efd4:	call   ecb0 <unary_exp_golomb_mv_encode>
    efd9:	mov    esi,r14d
    efdc:	mov    rdi,r12
    efdf:	shr    esi,0x1f
    efe2:	call   53b0 <biari_encode_symbol_eq_prob>
    efe7:	jmp    ef09 <writeMVD_CABAC+0x1a9>
    efec:	nop    DWORD PTR [rax+0x0]
    eff0:	mov    esi,DWORD PTR [r15+0x214]
    eff7:	test   esi,esi
    eff9:	je     f070 <writeMVD_CABAC+0x310>
    effb:	cmp    esi,0x1
    effe:	jne    f010 <writeMVD_CABAC+0x2b0>
    f000:	mov    r11d,DWORD PTR [rax+0x214]
    f007:	test   r11d,r11d
    f00a:	jne    f010 <writeMVD_CABAC+0x2b0>
    f00c:	sar    edx,1
    f00e:	xchg   ax,ax
    f010:	mov    eax,DWORD PTR [rsp+0x10]
    f014:	test   eax,eax
    f016:	je     eeb6 <writeMVD_CABAC+0x156>
    f01c:	movsxd rax,DWORD PTR [rsp+0x14]
    f021:	movsxd rcx,DWORD PTR [rsp+0x18]
    f026:	imul   rax,rax,0x278
    f02d:	add    rax,rdi
    f030:	movsxd rdi,DWORD PTR [rsp+0x1c]
    f035:	lea    rdi,[rdi+r14*4]
    f039:	lea    rcx,[rcx+rdi*4]
    f03d:	mov    edi,DWORD PTR [rax+rcx*8+0x50]
    f041:	mov    r11d,DWORD PTR [rax+rcx*8+0x50]
    f046:	sar    edi,0x1f
    f049:	xor    r11d,edi
    f04c:	mov    ecx,r11d
    f04f:	sub    ecx,edi
    f051:	test   esi,esi
    f053:	jne    f080 <writeMVD_CABAC+0x320>
    f055:	cmp    DWORD PTR [rax+0x214],0x1
    f05c:	jne    eeb4 <writeMVD_CABAC+0x154>
    f062:	lea    edx,[rdx+rcx*2]
    f065:	jmp    eeb6 <writeMVD_CABAC+0x156>
    f06a:	nop    WORD PTR [rax+rax*1+0x0]
    f070:	cmp    DWORD PTR [rax+0x214],0x1
    f077:	jne    f010 <writeMVD_CABAC+0x2b0>
    f079:	add    edx,edx
    f07b:	jmp    f010 <writeMVD_CABAC+0x2b0>
    f07d:	nop    DWORD PTR [rax]
    f080:	cmp    esi,0x1
    f083:	jne    eeb4 <writeMVD_CABAC+0x154>
    f089:	mov    esi,DWORD PTR [rax+0x214]
    f08f:	test   esi,esi
    f091:	jne    eeb4 <writeMVD_CABAC+0x154>
    f097:	sar    ecx,1
    f099:	jmp    eeb4 <writeMVD_CABAC+0x154>
    f09e:	call   4390 <__stack_chk_fail@plt>
    f0a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f0ad:	nop    DWORD PTR [rax]

000000000000f0b0 <ParseContent>:
    f0b0:	push   r15
    f0b2:	push   r14
    f0b4:	push   r13
    f0b6:	push   r12
    f0b8:	push   rbp
    f0b9:	push   rbx
    f0ba:	lea    r11,[rsp-0x13000]
    f0c2:	sub    rsp,0x1000
    f0c9:	or     QWORD PTR [rsp],0x0
    f0ce:	cmp    rsp,r11
    f0d1:	jne    f0c2 <ParseContent+0x12>
    f0d3:	sub    rsp,0x8b8
    f0da:	mov    rax,QWORD PTR fs:0x28
    f0e3:	mov    QWORD PTR [rsp+0x138a8],rax
    f0eb:	xor    eax,eax
    f0ed:	movsxd rdx,esi
    f0f0:	add    rdx,rdi
    f0f3:	cmp    rdi,rdx
    f0f6:	jae    f2c3 <ParseContent+0x213>
    f0fc:	xor    r8d,r8d
    f0ff:	xor    esi,esi
    f101:	lea    rcx,[rip+0x5da08]        # 6cb10 <maxpos+0x1810>
    f108:	xor    r15d,r15d
    f10b:	nop    DWORD PTR [rax+rax*1+0x0]
    f110:	movzx  eax,BYTE PTR [rdi]
    f113:	sub    eax,0x9
    f116:	cmp    al,0x1a
    f118:	ja     f130 <ParseContent+0x80>
    f11a:	movzx  eax,al
    f11d:	movsxd rax,DWORD PTR [rcx+rax*4]
    f121:	add    rax,rcx
    f124:	notrack jmp rax
    f127:	nop    WORD PTR [rax+rax*1+0x0]
    f130:	test   r8d,r8d
    f133:	jne    f141 <ParseContent+0x91>
    f135:	movsxd rax,r15d
    f138:	add    r15d,0x1
    f13c:	mov    QWORD PTR [rsp+rax*8+0x20],rdi
    f141:	add    rdi,0x1
    f145:	mov    r8d,0xffffffff
    f14b:	nop    DWORD PTR [rax+rax*1+0x0]
    f150:	cmp    rdi,rdx
    f153:	jb     f110 <ParseContent+0x60>
    f155:	lea    eax,[r15-0x1]
    f159:	mov    DWORD PTR [rsp+0x4],eax
    f15d:	test   eax,eax
    f15f:	jle    f2c3 <ParseContent+0x213>
    f165:	xor    r12d,r12d
    f168:	lea    r13,[rsp+0x20]
    f16d:	lea    r14,[rip+0x76eac]        # 86020 <Map>
    f174:	nop    DWORD PTR [rax+0x0]
    f178:	mov    rdi,QWORD PTR [r14]
    f17b:	mov    rbp,QWORD PTR [r13+r12*8+0x0]
    f180:	test   rdi,rdi
    f183:	je     f510 <ParseContent+0x460>
    f189:	lea    r15,[rip+0x76ec8]        # 86058 <Map+0x38>
    f190:	xor    ebx,ebx
    f192:	jmp    f1ab <ParseContent+0xfb>
    f194:	nop    DWORD PTR [rax+0x0]
    f198:	mov    rdi,QWORD PTR [r15]
    f19b:	add    r15,0x38
    f19f:	add    ebx,0x1
    f1a2:	test   rdi,rdi
    f1a5:	je     f510 <ParseContent+0x460>
    f1ab:	mov    rsi,rbp
    f1ae:	call   4410 <strcmp@plt>
    f1b3:	test   eax,eax
    f1b5:	jne    f198 <ParseContent+0xe8>
    f1b7:	mov    rax,QWORD PTR [r13+r12*8+0x8]
    f1bc:	cmp    BYTE PTR [rax],0x3d
    f1bf:	je     f3b0 <ParseContent+0x300>
    f1c5:	movabs rax,0x676e697372615020
    f1cf:	mov    edi,0x2e
    f1d4:	mov    esi,0x12c
    f1d9:	movabs rdx,0x6920726f72726520
    f1e3:	mov    QWORD PTR [rip+0xa5db6],rax        # b4fa0 <errortext>
    f1ea:	movabs rax,0x6769666e6f63206e
    f1f4:	mov    QWORD PTR [rip+0xa5dad],rdx        # b4fa8 <errortext+0x8>
    f1fb:	movabs rdx,0x27203a656c696620
    f205:	mov    QWORD PTR [rip+0xa5da4],rax        # b4fb0 <errortext+0x10>
    f20c:	movabs rax,0x636570786520273d
    f216:	mov    QWORD PTR [rip+0xa5d9b],rdx        # b4fb8 <errortext+0x18>
    f21d:	movabs rdx,0x7420736120646574
    f227:	mov    QWORD PTR [rip+0xa5d92],rax        # b4fc0 <errortext+0x20>
    f22e:	movabs rax,0x6e6f636573206568
    f238:	mov    QWORD PTR [rip+0xa5d89],rdx        # b4fc8 <errortext+0x28>
    f23f:	movabs rdx,0x206e656b6f742064
    f249:	mov    QWORD PTR [rip+0xa5d80],rax        # b4fd0 <errortext+0x30>
    f250:	movabs rax,0x2068636165206e69
    f25a:	mov    WORD PTR [rip+0xa5d8b],di        # b4fec <errortext+0x4c>
    f261:	lea    rdi,[rip+0xa5d38]        # b4fa0 <errortext>
    f268:	mov    QWORD PTR [rip+0xa5d69],rdx        # b4fd8 <errortext+0x38>
    f26f:	mov    QWORD PTR [rip+0xa5d6a],rax        # b4fe0 <errortext+0x40>
    f276:	mov    DWORD PTR [rip+0xa5d68],0x656e696c        # b4fe8 <errortext+0x48>
    f280:	call   19180 <error>
    f285:	movsxd rbx,ebx
    f288:	lea    rax,[rbx*8+0x0]
    f290:	sub    rax,rbx
    f293:	lea    rcx,[r14+rax*8]
    f297:	mov    eax,DWORD PTR [rcx+0x10]
    f29a:	cmp    eax,0x1
    f29d:	je     f3c0 <ParseContent+0x310>
    f2a3:	cmp    eax,0x2
    f2a6:	je     f478 <ParseContent+0x3c8>
    f2ac:	test   eax,eax
    f2ae:	je     f3e8 <ParseContent+0x338>
    f2b4:	add    r12,0x3
    f2b8:	cmp    DWORD PTR [rsp+0x4],r12d
    f2bd:	jg     f178 <ParseContent+0xc8>
    f2c3:	mov    rax,QWORD PTR [rip+0x792ee]        # 885b8 <input>
    f2ca:	mov    rdx,QWORD PTR [rip+0x7a32f]        # 89600 <configinput>
    f2d1:	lea    rsi,[rip+0x7a328]        # 89600 <configinput>
    f2d8:	mov    QWORD PTR [rax],rdx
    f2db:	lea    rdi,[rax+0x8]
    f2df:	mov    rdx,QWORD PTR [rip+0x7b11a]        # 8a400 <configinput+0xe00>
    f2e6:	and    rdi,0xfffffffffffffff8
    f2ea:	mov    QWORD PTR [rax+0xe00],rdx
    f2f1:	sub    rax,rdi
    f2f4:	sub    rsi,rax
    f2f7:	add    eax,0xe08
    f2fc:	shr    eax,0x3
    f2ff:	mov    ecx,eax
    f301:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    f304:	mov    rax,QWORD PTR [rsp+0x138a8]
    f30c:	xor    rax,QWORD PTR fs:0x28
    f315:	jne    f567 <ParseContent+0x4b7>
    f31b:	add    rsp,0x138b8
    f322:	pop    rbx
    f323:	pop    rbp
    f324:	pop    r12
    f326:	pop    r13
    f328:	pop    r14
    f32a:	pop    r15
    f32c:	ret    
    f32d:	lea    rax,[rdi+0x1]
    f331:	test   esi,esi
    f333:	jne    f552 <ParseContent+0x4a2>
    f339:	mov    BYTE PTR [rdi],0x0
    f33c:	xor    r8d,r8d
    f33f:	mov    rdi,rax
    f342:	jmp    f150 <ParseContent+0xa0>
    f347:	mov    BYTE PTR [rdi],0x0
    f34a:	add    rdi,0x1
    f34e:	xor    r8d,r8d
    f351:	xor    esi,esi
    f353:	jmp    f150 <ParseContent+0xa0>
    f358:	mov    BYTE PTR [rdi],0x0
    f35b:	lea    rax,[rdi+0x1]
    f35f:	test   esi,esi
    f361:	jne    f55f <ParseContent+0x4af>
    f367:	movsxd rdi,r15d
    f36a:	not    r8d
    f36d:	add    r15d,0x1
    f371:	mov    QWORD PTR [rsp+rdi*8+0x20],rax
    f376:	not    esi
    f378:	mov    rdi,rax
    f37b:	jmp    f150 <ParseContent+0xa0>
    f380:	add    rdi,0x1
    f384:	jmp    f150 <ParseContent+0xa0>
    f389:	mov    BYTE PTR [rdi],0x0
    f38c:	cmp    rdx,rdi
    f38f:	ja     f3a5 <ParseContent+0x2f5>
    f391:	jmp    f155 <ParseContent+0xa5>
    f396:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f3a0:	cmp    rdx,rdi
    f3a3:	jbe    f34e <ParseContent+0x29e>
    f3a5:	add    rdi,0x1
    f3a9:	cmp    BYTE PTR [rdi],0xa
    f3ac:	jne    f3a0 <ParseContent+0x2f0>
    f3ae:	jmp    f34e <ParseContent+0x29e>
    f3b0:	cmp    BYTE PTR [rax+0x1],0x0
    f3b4:	je     f285 <ParseContent+0x1d5>
    f3ba:	jmp    f1c5 <ParseContent+0x115>
    f3bf:	nop
    f3c0:	mov    rdi,QWORD PTR [rcx+0x8]
    f3c4:	mov    rsi,QWORD PTR [r13+r12*8+0x10]
    f3c9:	mov    edx,0xc8
    f3ce:	call   4300 <strncpy@plt>
    f3d3:	mov    edi,0x2e
    f3d8:	call   42e0 <putchar@plt>
    f3dd:	jmp    f2b4 <ParseContent+0x204>
    f3e2:	nop    WORD PTR [rax+rax*1+0x0]
    f3e8:	mov    rcx,QWORD PTR [r13+r12*8+0x10]
    f3ed:	lea    rdx,[rsp+0x14]
    f3f2:	lea    rsi,[rip+0x5bf2f]        # 6b328 <maxpos+0x28>
    f3f9:	mov    rdi,rcx
    f3fc:	mov    QWORD PTR [rsp+0x8],rcx
    f401:	call   4470 <__isoc99_sscanf@plt>
    f406:	cmp    eax,0x1
    f409:	je     f44f <ParseContent+0x39f>
    f40b:	sub    rsp,0x8
    f40f:	mov    r9,rbp
    f412:	lea    r8,[rip+0x5c98f]        # 6bda8 <maxpos+0xaa8>
    f419:	xor    eax,eax
    f41b:	mov    rcx,QWORD PTR [rsp+0x10]
    f420:	mov    edx,0x1
    f425:	mov    esi,0x12c
    f42a:	lea    rdi,[rip+0xa5b6f]        # b4fa0 <errortext>
    f431:	push   rcx
    f432:	mov    ecx,0x12c
    f437:	call   42c0 <__snprintf_chk@plt>
    f43c:	mov    esi,0x12c
    f441:	lea    rdi,[rip+0xa5b58]        # b4fa0 <errortext>
    f448:	call   19180 <error>
    f44d:	pop    rcx
    f44e:	pop    rsi
    f44f:	lea    rax,[rbx*8+0x0]
    f457:	mov    edx,DWORD PTR [rsp+0x14]
    f45b:	mov    edi,0x2e
    f460:	sub    rax,rbx
    f463:	mov    rax,QWORD PTR [r14+rax*8+0x8]
    f468:	mov    DWORD PTR [rax],edx
    f46a:	call   42e0 <putchar@plt>
    f46f:	jmp    f2b4 <ParseContent+0x204>
    f474:	nop    DWORD PTR [rax+0x0]
    f478:	mov    rcx,QWORD PTR [r13+r12*8+0x10]
    f47d:	xor    eax,eax
    f47f:	lea    rdx,[rsp+0x18]
    f484:	lea    rsi,[rip+0x5bea0]        # 6b32b <maxpos+0x2b>
    f48b:	mov    rdi,rcx
    f48e:	mov    QWORD PTR [rsp+0x8],rcx
    f493:	call   4470 <__isoc99_sscanf@plt>
    f498:	cmp    eax,0x1
    f49b:	je     f4e1 <ParseContent+0x431>
    f49d:	sub    rsp,0x8
    f4a1:	mov    edx,0x1
    f4a6:	mov    r9,rbp
    f4a9:	xor    eax,eax
    f4ab:	mov    rcx,QWORD PTR [rsp+0x10]
    f4b0:	lea    r8,[rip+0x5c8f1]        # 6bda8 <maxpos+0xaa8>
    f4b7:	mov    esi,0x12c
    f4bc:	lea    rdi,[rip+0xa5add]        # b4fa0 <errortext>
    f4c3:	push   rcx
    f4c4:	mov    ecx,0x12c
    f4c9:	call   42c0 <__snprintf_chk@plt>
    f4ce:	mov    esi,0x12c
    f4d3:	lea    rdi,[rip+0xa5ac6]        # b4fa0 <errortext>
    f4da:	call   19180 <error>
    f4df:	pop    rax
    f4e0:	pop    rdx
    f4e1:	lea    rax,[rbx*8+0x0]
    f4e9:	movsd  xmm0,QWORD PTR [rsp+0x18]
    f4ef:	mov    edi,0x2e
    f4f4:	sub    rax,rbx
    f4f7:	mov    rax,QWORD PTR [r14+rax*8+0x8]
    f4fc:	movsd  QWORD PTR [rax],xmm0
    f500:	call   42e0 <putchar@plt>
    f505:	jmp    f2b4 <ParseContent+0x204>
    f50a:	nop    WORD PTR [rax+rax*1+0x0]
    f510:	mov    r9,rbp
    f513:	mov    ecx,0x12c
    f518:	mov    edx,0x1
    f51d:	xor    eax,eax
    f51f:	lea    r8,[rip+0x5c8d2]        # 6bdf8 <maxpos+0xaf8>
    f526:	mov    esi,0x12c
    f52b:	mov    ebx,0xffffffff
    f530:	lea    rdi,[rip+0xa5a69]        # b4fa0 <errortext>
    f537:	call   42c0 <__snprintf_chk@plt>
    f53c:	mov    esi,0x12c
    f541:	lea    rdi,[rip+0xa5a58]        # b4fa0 <errortext>
    f548:	call   19180 <error>
    f54d:	jmp    f1b7 <ParseContent+0x107>
    f552:	mov    rdi,rax
    f555:	mov    esi,0xffffffff
    f55a:	jmp    f150 <ParseContent+0xa0>
    f55f:	xor    r8d,r8d
    f562:	jmp    f376 <ParseContent+0x2c6>
    f567:	call   4390 <__stack_chk_fail@plt>
    f56c:	nop    DWORD PTR [rax+0x0]

000000000000f570 <JMHelpExit>:
    f570:	endbr64 
    f574:	push   rax
    f575:	pop    rax
    f576:	lea    rdi,[rip+0x5c8c3]        # 6be40 <maxpos+0xb40>
    f57d:	mov    edx,0x3bb
    f582:	mov    esi,0x1
    f587:	sub    rsp,0x8
    f58b:	mov    rcx,QWORD PTR [rip+0x7930e]        # 888a0 <stderr@@GLIBC_2.2.5>
    f592:	call   44f0 <fwrite@plt>
    f597:	mov    edi,0xffffffff
    f59c:	call   44e0 <exit@plt>
    f5a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    f5ac:	nop    DWORD PTR [rax+0x0]

000000000000f5b0 <GetConfigFileContent>:
    f5b0:	endbr64 
    f5b4:	push   r13
    f5b6:	lea    rsi,[rip+0x5c1e1]        # 6b79e <maxpos+0x49e>
    f5bd:	push   r12
    f5bf:	mov    r12,rdi
    f5c2:	push   rbp
    f5c3:	call   44c0 <fopen@plt>
    f5c8:	mov    r9,r12
    f5cb:	lea    r8,[rip+0x5cc2e]        # 6c200 <maxpos+0xf00>
    f5d2:	test   rax,rax
    f5d5:	je     f66a <GetConfigFileContent+0xba>
    f5db:	xor    esi,esi
    f5dd:	mov    edx,0x2
    f5e2:	mov    rdi,rax
    f5e5:	mov    rbp,rax
    f5e8:	call   4480 <fseek@plt>
    f5ed:	test   eax,eax
    f5ef:	jne    f660 <GetConfigFileContent+0xb0>
    f5f1:	mov    rdi,rbp
    f5f4:	call   4430 <ftell@plt>
    f5f9:	mov    r13,rax
    f5fc:	cmp    rax,0xea60
    f602:	ja     f698 <GetConfigFileContent+0xe8>
    f608:	xor    edx,edx
    f60a:	xor    esi,esi
    f60c:	mov    rdi,rbp
    f60f:	call   4480 <fseek@plt>
    f614:	test   eax,eax
    f616:	jne    f660 <GetConfigFileContent+0xb0>
    f618:	lea    rdi,[r13+0x1]
    f61c:	call   4460 <malloc@plt>
    f621:	mov    r12,rax
    f624:	test   rax,rax
    f627:	je     f6d3 <GetConfigFileContent+0x123>
    f62d:	mov    rcx,rbp
    f630:	mov    rdx,r13
    f633:	mov    rdi,r12
    f636:	mov    esi,0x1
    f63b:	call   4340 <fread@plt>
    f640:	mov    rdi,rbp
    f643:	mov    BYTE PTR [r12+rax*1],0x0
    f648:	call   4370 <fclose@plt>
    f64d:	mov    rax,r12
    f650:	pop    rbp
    f651:	pop    r12
    f653:	pop    r13
    f655:	ret    
    f656:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f660:	mov    r9,r12
    f663:	lea    r8,[rip+0x5cbbe]        # 6c228 <maxpos+0xf28>
    f66a:	xor    r12d,r12d
    f66d:	mov    ecx,0x12c
    f672:	mov    edx,0x1
    f677:	xor    eax,eax
    f679:	mov    esi,0x12c
    f67e:	lea    rdi,[rip+0xa591b]        # b4fa0 <errortext>
    f685:	call   42c0 <__snprintf_chk@plt>
    f68a:	mov    rax,r12
    f68d:	pop    rbp
    f68e:	pop    r12
    f690:	pop    r13
    f692:	ret    
    f693:	nop    DWORD PTR [rax+rax*1+0x0]
    f698:	sub    rsp,0x8
    f69c:	mov    r9,rax
    f69f:	xor    eax,eax
    f6a1:	mov    edx,0x1
    f6a6:	push   r12
    f6a8:	lea    r8,[rip+0x5cba1]        # 6c250 <maxpos+0xf50>
    f6af:	xor    r12d,r12d
    f6b2:	mov    ecx,0x12c
    f6b7:	mov    esi,0x12c
    f6bc:	lea    rdi,[rip+0xa58dd]        # b4fa0 <errortext>
    f6c3:	call   42c0 <__snprintf_chk@plt>
    f6c8:	pop    rax
    f6c9:	mov    rax,r12
    f6cc:	pop    rdx
    f6cd:	pop    rbp
    f6ce:	pop    r12
    f6d0:	pop    r13
    f6d2:	ret    
    f6d3:	lea    rdi,[rip+0x5bc55]        # 6b32f <maxpos+0x2f>
    f6da:	call   38210 <no_mem_exit>
    f6df:	jmp    f62d <GetConfigFileContent+0x7d>
    f6e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    f6ef:	nop

000000000000f6f0 <Configure>:
    f6f0:	endbr64 
    f6f4:	push   r15
    f6f6:	lea    rdx,[rip+0x79f03]        # 89600 <configinput>
    f6fd:	mov    ecx,0x1c1
    f702:	push   r14
    f704:	push   r13
    f706:	push   r12
    f708:	mov    r12,rsi
    f70b:	push   rbp
    f70c:	push   rbx
    f70d:	sub    rsp,0x38
    f711:	mov    DWORD PTR [rsp+0x18],edi
    f715:	mov    rdi,rdx
    f718:	mov    rax,QWORD PTR fs:0x28
    f721:	mov    QWORD PTR [rsp+0x28],rax
    f726:	xor    eax,eax
    f728:	rep stos QWORD PTR es:[rdi],rax
    f72b:	lea    rdi,[rip+0x5bc23]        # 6b355 <maxpos+0x55>
    f732:	call   4320 <puts@plt>
    f737:	cmp    QWORD PTR [rip+0x768e1],0x0        # 86020 <Map>
    f73f:	lea    rax,[rip+0x768e2]        # 86028 <Map+0x8>
    f746:	jne    f765 <Configure+0x75>
    f748:	jmp    f788 <Configure+0x98>
    f74a:	nop    WORD PTR [rax+rax*1+0x0]
    f750:	cvttsd2si ecx,QWORD PTR [rax+0x10]
    f755:	mov    rdx,QWORD PTR [rax]
    f758:	mov    DWORD PTR [rdx],ecx
    f75a:	add    rax,0x38
    f75e:	cmp    QWORD PTR [rax-0x8],0x0
    f763:	je     f788 <Configure+0x98>
    f765:	mov    edx,DWORD PTR [rax+0x8]
    f768:	test   edx,edx
    f76a:	je     f750 <Configure+0x60>
    f76c:	cmp    edx,0x2
    f76f:	jne    f75a <Configure+0x6a>
    f771:	movsd  xmm0,QWORD PTR [rax+0x10]
    f776:	mov    rdx,QWORD PTR [rax]
    f779:	add    rax,0x38
    f77d:	cmp    QWORD PTR [rax-0x8],0x0
    f782:	movsd  QWORD PTR [rdx],xmm0
    f786:	jne    f765 <Configure+0x75>
    f788:	cmp    DWORD PTR [rsp+0x18],0x2
    f78d:	je     10ab7 <Configure+0x13c7>
    f793:	jle    11812 <Configure+0x2122>
    f799:	mov    rax,QWORD PTR [r12+0x8]
    f79e:	movzx  edx,BYTE PTR [rax]
    f7a1:	cmp    edx,0x2d
    f7a4:	jne    10030 <Configure+0x940>
    f7aa:	cmp    BYTE PTR [rax+0x1],0x64
    f7ae:	jne    10030 <Configure+0x940>
    f7b4:	mov    rbp,QWORD PTR [r12+0x10]
    f7b9:	mov    r13d,0x3
    f7bf:	cmp    edx,0x2d
    f7c2:	jne    f7ce <Configure+0xde>
    f7c4:	cmp    BYTE PTR [rax+0x1],0x68
    f7c8:	je     10e11 <Configure+0x1721>
    f7ce:	mov    rdx,rbp
    f7d1:	lea    rsi,[rip+0x5bb9b]        # 6b373 <maxpos+0x73>
    f7d8:	mov    edi,0x1
    f7dd:	xor    eax,eax
    f7df:	call   4490 <__printf_chk@plt>
    f7e4:	mov    rdi,rbp
    f7e7:	call   f5b0 <GetConfigFileContent>
    f7ec:	mov    rbp,rax
    f7ef:	test   rax,rax
    f7f2:	je     10f2f <Configure+0x183f>
    f7f8:	mov    rdi,rbp
    f7fb:	call   4380 <strlen@plt>
    f800:	mov    rdi,rbp
    f803:	mov    rsi,rax
    f806:	call   f0b0 <ParseContent>
    f80b:	mov    edi,0xa
    f810:	call   42e0 <putchar@plt>
    f815:	mov    rdi,rbp
    f818:	call   42d0 <free@plt>
    f81d:	cmp    DWORD PTR [rsp+0x18],r13d
    f822:	jg     f87c <Configure+0x18c>
    f824:	jmp    f914 <Configure+0x224>
    f829:	nop    DWORD PTR [rax+0x0]
    f830:	sub    rsp,0x8
    f834:	mov    r9d,r13d
    f837:	mov    ecx,0x12c
    f83c:	mov    edx,0x1
    f841:	push   rax
    f842:	lea    r8,[rip+0x5ca77]        # 6c2c0 <maxpos+0xfc0>
    f849:	mov    esi,0x12c
    f84e:	xor    eax,eax
    f850:	lea    rdi,[rip+0xa5749]        # b4fa0 <errortext>
    f857:	call   42c0 <__snprintf_chk@plt>
    f85c:	mov    esi,0x12c
    f861:	lea    rdi,[rip+0xa5738]        # b4fa0 <errortext>
    f868:	call   19180 <error>
    f86d:	pop    r9
    f86f:	pop    r10
    f871:	cmp    r13d,DWORD PTR [rsp+0x18]
    f876:	jge    f914 <Configure+0x224>
    f87c:	movsxd r14,r13d
    f87f:	mov    rax,QWORD PTR [r12+r14*8]
    f883:	lea    rbx,[r14*8+0x0]
    f88b:	mov    QWORD PTR [rsp+0x10],rbx
    f890:	movzx  edx,BYTE PTR [rax]
    f893:	cmp    edx,0x2d
    f896:	jne    f830 <Configure+0x140>
    f898:	cmp    BYTE PTR [rax+0x1],0x68
    f89c:	je     10e11 <Configure+0x1721>
    f8a2:	cmp    edx,0x2d
    f8a5:	jne    f830 <Configure+0x140>
    f8a7:	cmp    BYTE PTR [rax+0x1],0x66
    f8ab:	jne    10042 <Configure+0x952>
    f8b1:	lea    rbx,[r12+rbx*1+0x8]
    f8b6:	mov    rdi,QWORD PTR [rbx]
    f8b9:	call   f5b0 <GetConfigFileContent>
    f8be:	mov    rbp,rax
    f8c1:	test   rax,rax
    f8c4:	je     10333 <Configure+0xc43>
    f8ca:	mov    rdx,QWORD PTR [rbx]
    f8cd:	lea    rsi,[rip+0x5ba9f]        # 6b373 <maxpos+0x73>
    f8d4:	xor    eax,eax
    f8d6:	add    r13d,0x2
    f8da:	mov    edi,0x1
    f8df:	call   4490 <__printf_chk@plt>
    f8e4:	mov    rdi,rbp
    f8e7:	call   4380 <strlen@plt>
    f8ec:	mov    rdi,rbp
    f8ef:	mov    rsi,rax
    f8f2:	call   f0b0 <ParseContent>
    f8f7:	mov    edi,0xa
    f8fc:	call   42e0 <putchar@plt>
    f901:	mov    rdi,rbp
    f904:	call   42d0 <free@plt>
    f909:	cmp    r13d,DWORD PTR [rsp+0x18]
    f90e:	jl     f87c <Configure+0x18c>
    f914:	mov    edi,0xa
    f919:	lea    rbx,[rip+0x76708]        # 86028 <Map+0x8>
    f920:	lea    r12,[rip+0x5c9e9]        # 6c310 <maxpos+0x1010>
    f927:	call   42e0 <putchar@plt>
    f92c:	mov    rdx,QWORD PTR [rip+0x78c85]        # 885b8 <input>
    f933:	mov    r9,QWORD PTR [rip+0x766e6]        # 86020 <Map>
    f93a:	mov    DWORD PTR [rdx+0xc98],0x1
    f944:	mov    eax,DWORD PTR [rdx+0xce0]
    f94a:	lea    ebp,[rax+rax*2-0x18]
    f94e:	add    ebp,ebp
    f950:	test   r9,r9
    f953:	jne    f97f <Configure+0x28f>
    f955:	jmp    f9f2 <Configure+0x302>
    f95a:	nop    WORD PTR [rax+rax*1+0x0]
    f960:	cmp    eax,0x2
    f963:	je     101ee <Configure+0xafe>
    f969:	cmp    eax,0x3
    f96c:	je     10281 <Configure+0xb91>
    f972:	mov    r9,QWORD PTR [rbx+0x30]
    f976:	add    rbx,0x38
    f97a:	test   r9,r9
    f97d:	je     f9eb <Configure+0x2fb>
    f97f:	mov    eax,DWORD PTR [rbx+0x18]
    f982:	cmp    eax,0x1
    f985:	jne    f960 <Configure+0x270>
    f987:	mov    eax,DWORD PTR [rbx+0x8]
    f98a:	test   eax,eax
    f98c:	jne    1021a <Configure+0xb2a>
    f992:	mov    rax,QWORD PTR [rbx]
    f995:	cvttsd2si ecx,QWORD PTR [rbx+0x28]
    f99a:	mov    edx,DWORD PTR [rax]
    f99c:	cvttsd2si eax,QWORD PTR [rbx+0x20]
    f9a1:	cmp    edx,eax
    f9a3:	jl     f9a9 <Configure+0x2b9>
    f9a5:	cmp    edx,ecx
    f9a7:	jle    f972 <Configure+0x282>
    f9a9:	push   rcx
    f9aa:	push   rax
    f9ab:	mov    r8,r12
    f9ae:	mov    ecx,0x12c
    f9b3:	mov    edx,0x1
    f9b8:	xor    eax,eax
    f9ba:	add    rbx,0x38
    f9be:	mov    esi,0x12c
    f9c3:	lea    rdi,[rip+0xa55d6]        # b4fa0 <errortext>
    f9ca:	call   42c0 <__snprintf_chk@plt>
    f9cf:	mov    esi,0x190
    f9d4:	lea    rdi,[rip+0xa55c5]        # b4fa0 <errortext>
    f9db:	call   19180 <error>
    f9e0:	mov    r9,QWORD PTR [rbx-0x8]
    f9e4:	pop    rsi
    f9e5:	pop    rdi
    f9e6:	test   r9,r9
    f9e9:	jne    f97f <Configure+0x28f>
    f9eb:	mov    rdx,QWORD PTR [rip+0x78bc6]        # 885b8 <input>
    f9f2:	pxor   xmm0,xmm0
    f9f6:	ucomisd xmm0,QWORD PTR [rdx+0x978]
    f9fe:	jp     fa10 <Configure+0x320>
    fa00:	jne    fa10 <Configure+0x320>
    fa02:	mov    rax,QWORD PTR [rip+0x5d177]        # 6cb80 <maxpos+0x1880>
    fa09:	mov    QWORD PTR [rdx+0x978],rax
    fa10:	movabs rax,0x1000000010
    fa1a:	mov    ecx,DWORD PTR [rdx+0x524]
    fa20:	mov    r9d,DWORD PTR [rdx+0x4d4]
    fa27:	mov    QWORD PTR [rdx+0x50],rax
    fa2b:	mov    QWORD PTR [rdx+0x58],rax
    fa2f:	movabs rax,0x800000010
    fa39:	mov    QWORD PTR [rdx+0x60],rax
    fa3d:	movabs rax,0x1000000008
    fa47:	mov    QWORD PTR [rdx+0x68],rax
    fa4b:	movabs rax,0x800000008
    fa55:	mov    QWORD PTR [rdx+0x70],rax
    fa59:	movabs rax,0x400000008
    fa63:	mov    QWORD PTR [rdx+0x78],rax
    fa67:	movabs rax,0x800000004
    fa71:	mov    QWORD PTR [rdx+0x80],rax
    fa78:	movabs rax,0x400000004
    fa82:	mov    QWORD PTR [rdx+0x88],rax
    fa89:	mov    QWORD PTR [rdx+0x90],rax
    fa90:	mov    QWORD PTR [rdx+0x98],rax
    fa97:	movabs rax,0x200000004
    faa1:	mov    QWORD PTR [rdx+0xa0],rax
    faa8:	movabs rax,0x400000002
    fab2:	mov    QWORD PTR [rdx+0xa8],rax
    fab9:	movabs rax,0x200000002
    fac3:	mov    QWORD PTR [rdx+0xb0],rax
    faca:	movabs rax,0x100000002
    fad4:	mov    QWORD PTR [rdx+0xb8],rax
    fadb:	movabs rax,0x200000001
    fae5:	mov    QWORD PTR [rdx+0xc0],rax
    faec:	movabs rax,0x100000001
    faf6:	mov    QWORD PTR [rdx+0xc8],rax
    fafd:	mov    eax,0x1
    fb02:	test   ecx,ecx
    fb04:	je     fb0a <Configure+0x41a>
    fb06:	lea    eax,[r9+0x1]
    fb0a:	mov    ecx,DWORD PTR [rdx+0x34]
    fb0d:	mov    r8d,DWORD PTR [rdx+0x8]
    fb11:	cmp    ecx,0x3
    fb14:	jg     1095e <Configure+0x126e>
    fb1a:	imul   eax,r8d
    fb1e:	sub    eax,0x1
    fb21:	mov    esi,eax
    fb23:	je     1151d <Configure+0x1e2d>
    fb29:	xor    ecx,ecx
    fb2b:	nop    DWORD PTR [rax+rax*1+0x0]
    fb30:	add    ecx,0x1
    fb33:	shr    eax,1
    fb35:	jne    fb30 <Configure+0x440>
    fb37:	cmp    ecx,0x4
    fb3a:	jg     102bf <Configure+0xbcf>
    fb40:	mov    DWORD PTR [rip+0xa6322],eax        # b5e68 <log2_max_frame_num_minus4>
    fb46:	mov    edi,DWORD PTR [rdx+0x14]
    fb49:	xor    ecx,ecx
    fb4b:	lea    eax,[rdi+0x1]
    fb4e:	imul   eax,r8d
    fb52:	lea    esi,[rax+rax*1-0x1]
    fb56:	mov    eax,esi
    fb58:	nop    DWORD PTR [rax+rax*1+0x0]
    fb60:	add    ecx,0x1
    fb63:	shr    eax,1
    fb65:	jne    fb60 <Configure+0x470>
    fb67:	cmp    ecx,0x4
    fb6a:	jg     102d0 <Configure+0xbe0>
    fb70:	mov    DWORD PTR [rip+0x90dca],eax        # a0940 <log2_max_pic_order_cnt_lsb_minus4>
    fb76:	cmp    edi,r9d
    fb79:	jl     102eb <Configure+0xbfb>
    fb7f:	test   r9d,r9d
    fb82:	je     fb95 <Configure+0x4a5>
    fb84:	mov    r9d,DWORD PTR [rdx+0x4e0]
    fb8b:	cmp    r9d,0x1
    fb8f:	ja     1139f <Configure+0x1caf>
    fb95:	mov    eax,DWORD PTR [rdx+0xb40]
    fb9b:	test   eax,eax
    fb9d:	jle    109ed <Configure+0x12fd>
    fba3:	mov    ecx,DWORD PTR [rdx+0x4e4]
    fba9:	test   ecx,ecx
    fbab:	je     10a16 <Configure+0x1326>
    fbb1:	mov    DWORD PTR [rdx+0x4e4],0x1
    fbbb:	mov    r9d,DWORD PTR [rdx+0xb48]
    fbc2:	cmp    r9d,0x1
    fbc6:	jbe    fc04 <Configure+0x514>
    fbc8:	mov    edx,0x1
    fbcd:	lea    r8,[rip+0x5c974]        # 6c548 <maxpos+0x1248>
    fbd4:	xor    eax,eax
    fbd6:	mov    ecx,0x12c
    fbdb:	mov    esi,0x12c
    fbe0:	lea    rdi,[rip+0xa53b9]        # b4fa0 <errortext>
    fbe7:	call   42c0 <__snprintf_chk@plt>
    fbec:	mov    esi,0x190
    fbf1:	lea    rdi,[rip+0xa53a8]        # b4fa0 <errortext>
    fbf8:	call   19180 <error>
    fbfd:	mov    rdx,QWORD PTR [rip+0x789b4]        # 885b8 <input>
    fc04:	mov    r9d,DWORD PTR [rdx+0x934]
    fc0b:	cmp    r9d,0x1
    fc0f:	jbe    fc4d <Configure+0x55d>
    fc11:	mov    edx,0x1
    fc16:	lea    r8,[rip+0x5c973]        # 6c590 <maxpos+0x1290>
    fc1d:	xor    eax,eax
    fc1f:	mov    ecx,0x12c
    fc24:	mov    esi,0x12c
    fc29:	lea    rdi,[rip+0xa5370]        # b4fa0 <errortext>
    fc30:	call   42c0 <__snprintf_chk@plt>
    fc35:	mov    esi,0x190
    fc3a:	lea    rdi,[rip+0xa535f]        # b4fa0 <errortext>
    fc41:	call   19180 <error>
    fc46:	mov    rdx,QWORD PTR [rip+0x7896b]        # 885b8 <input>
    fc4d:	lea    rdi,[rdx+0xe0]
    fc54:	xor    esi,esi
    fc56:	xor    eax,eax
    fc58:	call   44b0 <open@plt>
    fc5d:	mov    DWORD PTR [rip+0xa2dfd],eax        # b2a60 <p_in>
    fc63:	cmp    eax,0xffffffff
    fc66:	je     10d2f <Configure+0x163f>
    fc6c:	mov    rcx,QWORD PTR [rip+0x78945]        # 885b8 <input>
    fc73:	cmp    BYTE PTR [rcx+0x270],0x0
    fc7a:	mov    rbx,rcx
    fc7d:	jne    10a81 <Configure+0x1391>
    fc83:	cmp    BYTE PTR [rcx+0x338],0x0
    fc8a:	jne    10a4f <Configure+0x135f>
    fc90:	mov    eax,DWORD PTR [rcx+0x40]
    fc93:	mov    rdx,QWORD PTR [rip+0x78916]        # 885b0 <img>
    fc9a:	test   al,0xf
    fc9c:	je     109de <Configure+0x12ee>
    fca2:	mov    esi,eax
    fca4:	sar    esi,0x1f
    fca7:	shr    esi,0x1c
    fcaa:	add    eax,esi
    fcac:	and    eax,0xf
    fcaf:	sub    esi,eax
    fcb1:	lea    eax,[rsi+0x10]
    fcb4:	mov    DWORD PTR [rdx+0x11c18],eax
    fcba:	cmp    QWORD PTR [rcx+0xb40],0x0
    fcc2:	mov    eax,DWORD PTR [rcx+0x44]
    fcc5:	je     109bd <Configure+0x12cd>
    fccb:	test   al,0x1
    fccd:	jne    10eff <Configure+0x180f>
    fcd3:	test   al,0x1f
    fcd5:	je     1096c <Configure+0x127c>
    fcdb:	mov    esi,eax
    fcdd:	sar    esi,0x1f
    fce0:	shr    esi,0x1b
    fce3:	add    eax,esi
    fce5:	and    eax,0x1f
    fce8:	sub    esi,eax
    fcea:	lea    eax,[rsi+0x20]
    fced:	mov    DWORD PTR [rdx+0x11c1c],eax
    fcf3:	cmp    QWORD PTR [rdx+0x11c18],0x0
    fcfb:	jne    10984 <Configure+0x1294>
    fd01:	mov    r13d,DWORD PTR [rcx+0xc50]
    fd08:	test   r13d,r13d
    fd0b:	je     fd5a <Configure+0x66a>
    fd0d:	mov    eax,DWORD PTR [rcx+0xc54]
    fd13:	test   eax,0xfffffffd
    fd18:	je     fd1f <Configure+0x62f>
    fd1a:	cmp    eax,0x6
    fd1d:	jne    fd5a <Configure+0x66a>
    fd1f:	xor    ebp,ebp
    fd21:	cmp    BYTE PTR [rcx+0xb88],0x0
    fd28:	jne    1145c <Configure+0x1d6c>
    fd2e:	test   eax,eax
    fd30:	je     113e0 <Configure+0x1cf0>
    fd36:	cmp    eax,0x2
    fd39:	je     11524 <Configure+0x1e34>
    fd3f:	cmp    eax,0x6
    fd42:	je     115f4 <Configure+0x1f04>
    fd48:	mov    rdi,rbp
    fd4b:	call   4370 <fclose@plt>
    fd50:	mov    rcx,QWORD PTR [rip+0x78861]        # 885b8 <input>
    fd57:	mov    rbx,rcx
    fd5a:	mov    ebp,DWORD PTR [rcx+0x92c]
    fd60:	test   ebp,ebp
    fd62:	je     10823 <Configure+0x1133>
    fd68:	mov    r11d,DWORD PTR [rcx+0x528]
    fd6f:	test   r11d,r11d
    fd72:	je     fd90 <Configure+0x6a0>
    fd74:	cmp    QWORD PTR [rcx+0xb40],0x0
    fd7c:	jne    107c5 <Configure+0x10d5>
    fd82:	mov    esi,DWORD PTR [rcx+0x930]
    fd88:	test   esi,esi
    fd8a:	jne    108b6 <Configure+0x11c6>
    fd90:	mov    r9d,DWORD PTR [rcx+0xb40]
    fd97:	cmp    r9d,0x2
    fd9b:	ja     108ca <Configure+0x11da>
    fda1:	mov    r9d,DWORD PTR [rcx+0xb44]
    fda8:	cmp    r9d,0x2
    fdac:	ja     1091a <Configure+0x122a>
    fdb2:	mov    eax,DWORD PTR [rcx+0x9a0]
    fdb8:	test   eax,eax
    fdba:	jne    105a3 <Configure+0xeb3>
    fdc0:	mov    edi,DWORD PTR [rcx+0xb44]
    fdc6:	test   edi,edi
    fdc8:	jne    10538 <Configure+0xe48>
    fdce:	mov    r9d,DWORD PTR [rcx+0xb60]
    fdd5:	mov    eax,DWORD PTR [rcx+0x24]
    fdd8:	test   r9d,r9d
    fddb:	js     10649 <Configure+0xf59>
    fde1:	cmp    r9d,eax
    fde4:	jge    10649 <Configure+0xf59>
    fdea:	test   r9d,r9d
    fded:	jle    fdfd <Configure+0x70d>
    fdef:	mov    eax,DWORD PTR [rcx+0x938]
    fdf5:	test   eax,eax
    fdf7:	je     10f96 <Configure+0x18a6>
    fdfd:	cmp    QWORD PTR [rcx+0xb40],0x0
    fe05:	je     106f1 <Configure+0x1001>
    fe0b:	cmp    DWORD PTR [rcx+0xb7c],0x1
    fe12:	je     1069b <Configure+0xfab>
    fe18:	mov    r15d,DWORD PTR [rcx+0x504]
    fe1f:	test   r15d,r15d
    fe22:	jle    10772 <Configure+0x1082>
    fe28:	mov    r13d,DWORD PTR [rcx+0xb44]
    fe2f:	test   r13d,r13d
    fe32:	jne    10792 <Configure+0x10a2>
    fe38:	mov    r12d,DWORD PTR [rcx+0xb60]
    fe3f:	test   r12d,r12d
    fe42:	jle    febd <Configure+0x7cd>
    fe44:	mov    ebp,DWORD PTR [rcx+0x504]
    fe4a:	test   ebp,ebp
    fe4c:	jle    febd <Configure+0x7cd>
    fe4e:	movdqa xmm0,XMMWORD PTR [rip+0x5ce3a]        # 6cc90 <maxpos+0x1990>
    fe56:	mov    r11d,0x2e
    fe5c:	mov    esi,0x1f4
    fe61:	lea    rdi,[rip+0xa5138]        # b4fa0 <errortext>
    fe68:	mov    DWORD PTR [rip+0xa516e],0x74657920        # b4fe0 <errortext+0x40>
    fe72:	movups XMMWORD PTR [rip+0xa5127],xmm0        # b4fa0 <errortext>
    fe79:	movdqa xmm0,XMMWORD PTR [rip+0x5ce1f]        # 6cca0 <maxpos+0x19a0>
    fe81:	mov    WORD PTR [rip+0xa515b],r11w        # b4fe4 <errortext+0x44>
    fe89:	movups XMMWORD PTR [rip+0xa5120],xmm0        # b4fb0 <errortext+0x10>
    fe90:	movdqa xmm0,XMMWORD PTR [rip+0x5ce98]        # 6cd30 <maxpos+0x1a30>
    fe98:	movups XMMWORD PTR [rip+0xa5121],xmm0        # b4fc0 <errortext+0x20>
    fe9f:	movdqa xmm0,XMMWORD PTR [rip+0x5ce99]        # 6cd40 <maxpos+0x1a40>
    fea7:	movups XMMWORD PTR [rip+0xa5122],xmm0        # b4fd0 <errortext+0x30>
    feae:	call   19180 <error>
    feb3:	mov    rcx,QWORD PTR [rip+0x786fe]        # 885b8 <input>
    feba:	mov    rbx,rcx
    febd:	mov    r10d,DWORD PTR [rcx+0xc50]
    fec4:	test   r10d,r10d
    fec7:	jle    fee1 <Configure+0x7f1>
    fec9:	mov    eax,DWORD PTR [rcx+0xc54]
    fecf:	sub    eax,0x3
    fed2:	cmp    eax,0x2
    fed5:	ja     fee1 <Configure+0x7f1>
    fed7:	mov    DWORD PTR [rcx+0xc50],0x1
    fee1:	mov    r9d,DWORD PTR [rcx+0xca4]
    fee8:	test   r9d,r9d
    feeb:	je     ff26 <Configure+0x836>
    feed:	mov    rdx,QWORD PTR [rip+0x786bc]        # 885b0 <img>
    fef4:	mov    eax,DWORD PTR [rdx+0x11c1c]
    fefa:	mov    edx,DWORD PTR [rdx+0x11c18]
    ff00:	add    eax,DWORD PTR [rcx+0x44]
    ff03:	add    edx,DWORD PTR [rcx+0x40]
    ff06:	imul   edx,eax
    ff09:	test   edx,edx
    ff0b:	lea    eax,[rdx+0xff]
    ff11:	cmovns eax,edx
    ff14:	sar    eax,0x8
    ff17:	cdq    
    ff18:	idiv   DWORD PTR [rcx+0xcb0]
    ff1e:	test   edx,edx
    ff20:	jne    10f47 <Configure+0x1857>
    ff26:	mov    r8d,DWORD PTR [rcx+0x4d4]
    ff2d:	test   r8d,r8d
    ff30:	je     ff4a <Configure+0x85a>
    ff32:	mov    edi,DWORD PTR [rcx+0x524]
    ff38:	test   edi,edi
    ff3a:	je     ff4a <Configure+0x85a>
    ff3c:	mov    esi,DWORD PTR [rcx+0x4cc]
    ff42:	test   esi,esi
    ff44:	jne    10e20 <Configure+0x1730>
    ff4a:	mov    eax,DWORD PTR [rcx+0x4e0]
    ff50:	test   eax,eax
    ff52:	jne    ff5e <Configure+0x86e>
    ff54:	cmp    DWORD PTR [rcx+0x24],0x1
    ff58:	jle    10d77 <Configure+0x1687>
    ff5e:	mov    eax,DWORD PTR [rcx+0xc94]
    ff64:	test   eax,eax
    ff66:	je     103f3 <Configure+0xd03>
    ff6c:	mov    eax,DWORD PTR [rcx+0x4f8]
    ff72:	test   eax,eax
    ff74:	jne    10ffe <Configure+0x190e>
    ff7a:	mov    eax,DWORD PTR [rcx]
    ff7c:	mov    rbx,rcx
    ff7f:	sub    eax,0x64
    ff82:	cmp    eax,0x2c
    ff85:	ja     103a1 <Configure+0xcb1>
    ff8b:	mov    eax,DWORD PTR [rcx+0x48]
    ff8e:	cmp    eax,0x2
    ff91:	je     1046e <Configure+0xd7e>
    ff97:	cmp    eax,0x3
    ff9a:	je     104d5 <Configure+0xde5>
    ffa0:	mov    r8d,DWORD PTR [rcx+0xd00]
    ffa7:	test   r8d,r8d
    ffaa:	jne    10da5 <Configure+0x16b5>
    ffb0:	mov    eax,DWORD PTR [rcx]
    ffb2:	mov    rbx,rcx
    ffb5:	lea    ecx,[rax-0x42]
    ffb8:	mov    edx,0x1
    ffbd:	cmp    ecx,0x38
    ffc0:	ja     ffd5 <Configure+0x8e5>
    ffc2:	movabs rdx,0x100100400400801
    ffcc:	shr    rdx,cl
    ffcf:	not    rdx
    ffd2:	and    edx,0x1
    ffd5:	cmp    eax,0x90
    ffda:	je     ffe4 <Configure+0x8f4>
    ffdc:	test   dl,dl
    ffde:	jne    11724 <Configure+0x2034>
    ffe4:	cmp    eax,0x42
    ffe7:	je     10c8b <Configure+0x159b>
    ffed:	cmp    eax,0x4d
    fff0:	je     10c46 <Configure+0x1556>
    fff6:	cmp    eax,0x58
    fff9:	je     10be0 <Configure+0x14f0>
    ffff:	mov    edi,DWORD PTR [rbx+0xca0]
   10005:	test   edi,edi
   10007:	jne    10b27 <Configure+0x1437>
   1000d:	mov    rax,QWORD PTR [rsp+0x28]
   10012:	xor    rax,QWORD PTR fs:0x28
   1001b:	jne    1185f <Configure+0x216f>
   10021:	add    rsp,0x38
   10025:	pop    rbx
   10026:	pop    rbp
   10027:	pop    r12
   10029:	pop    r13
   1002b:	pop    r14
   1002d:	pop    r15
   1002f:	ret    
   10030:	lea    rbp,[rip+0x5b312]        # 6b349 <maxpos+0x49>
   10037:	mov    r13d,0x1
   1003d:	jmp    f7bf <Configure+0xcf>
   10042:	cmp    edx,0x2d
   10045:	jne    f830 <Configure+0x140>
   1004b:	movzx  ebx,BYTE PTR [rax+0x1]
   1004f:	sub    ebx,0x70
   10052:	jne    f830 <Configure+0x140>
   10058:	mov    edi,DWORD PTR [rsp+0x18]
   1005c:	lea    eax,[r13+0x1]
   10060:	mov    DWORD PTR [rsp+0x1c],eax
   10064:	cmp    edi,eax
   10066:	jle    10d0c <Configure+0x161c>
   1006c:	movsxd r15,eax
   1006f:	lea    eax,[rdi-0x2]
   10072:	sub    eax,r13d
   10075:	lea    rax,[r14+rax*1+0x2]
   1007a:	mov    QWORD PTR [rsp+0x8],rax
   1007f:	jmp    1009e <Configure+0x9ae>
   10081:	nop    DWORD PTR [rax+0x0]
   10088:	call   4380 <strlen@plt>
   1008d:	lea    ebp,[r15+0x1]
   10091:	add    r15,0x1
   10095:	add    ebx,eax
   10097:	cmp    QWORD PTR [rsp+0x8],r15
   1009c:	je     100aa <Configure+0x9ba>
   1009e:	mov    rdi,QWORD PTR [r12+r15*8]
   100a2:	mov    ebp,r15d
   100a5:	cmp    BYTE PTR [rdi],0x2d
   100a8:	jne    10088 <Configure+0x998>
   100aa:	lea    edi,[rbx+0x3e8]
   100b0:	movsxd rdi,edi
   100b3:	call   4460 <malloc@plt>
   100b8:	mov    r15,rax
   100bb:	test   rax,rax
   100be:	je     117fe <Configure+0x210e>
   100c4:	mov    BYTE PTR [r15],0x0
   100c8:	cmp    DWORD PTR [rsp+0x1c],ebp
   100cc:	jge    10d03 <Configure+0x1613>
   100d2:	mov    rax,QWORD PTR [rsp+0x10]
   100d7:	lea    rdi,[r12+rax*1+0x8]
   100dc:	mov    eax,0xfffffffe
   100e1:	sub    eax,r13d
   100e4:	add    eax,ebp
   100e6:	add    r14,rax
   100e9:	lea    r8,[r12+r14*8+0x10]
   100ee:	xchg   ax,ax
   100f0:	mov    rcx,QWORD PTR [rdi]
   100f3:	mov    rax,r15
   100f6:	mov    esi,DWORD PTR [rax]
   100f8:	add    rax,0x4
   100fc:	lea    edx,[rsi-0x1010101]
   10102:	not    esi
   10104:	and    edx,esi
   10106:	and    edx,0x80808080
   1010c:	je     100f6 <Configure+0xa06>
   1010e:	mov    esi,edx
   10110:	shr    esi,0x10
   10113:	test   edx,0x8080
   10119:	cmove  edx,esi
   1011c:	lea    rsi,[rax+0x2]
   10120:	cmove  rax,rsi
   10124:	mov    ebx,edx
   10126:	add    bl,dl
   10128:	movzx  edx,BYTE PTR [rcx]
   1012b:	sbb    rax,0x3
   1012f:	test   dl,dl
   10131:	jne    10149 <Configure+0xa59>
   10133:	jmp    1016c <Configure+0xa7c>
   10135:	nop    DWORD PTR [rax]
   10138:	add    rcx,0x1
   1013c:	mov    BYTE PTR [rax],dl
   1013e:	add    rax,0x1
   10142:	movzx  edx,BYTE PTR [rcx]
   10145:	test   dl,dl
   10147:	je     1016c <Configure+0xa7c>
   10149:	cmp    dl,0x3d
   1014c:	jne    10138 <Configure+0xa48>
   1014e:	mov    r11d,0x3d20
   10154:	add    rcx,0x1
   10158:	mov    BYTE PTR [rax+0x2],0x20
   1015c:	add    rax,0x3
   10160:	mov    WORD PTR [rax-0x3],r11w
   10165:	movzx  edx,BYTE PTR [rcx]
   10168:	test   dl,dl
   1016a:	jne    10149 <Configure+0xa59>
   1016c:	add    rdi,0x8
   10170:	mov    BYTE PTR [rax],0x0
   10173:	cmp    r8,rdi
   10176:	jne    100f0 <Configure+0xa00>
   1017c:	lea    rsi,[rip+0x5c115]        # 6c298 <maxpos+0xf98>
   10183:	mov    rdx,r15
   10186:	mov    edi,0x1
   1018b:	xor    eax,eax
   1018d:	call   4490 <__printf_chk@plt>
   10192:	mov    rsi,r15
   10195:	mov    edx,DWORD PTR [rsi]
   10197:	add    rsi,0x4
   1019b:	lea    eax,[rdx-0x1010101]
   101a1:	not    edx
   101a3:	and    eax,edx
   101a5:	and    eax,0x80808080
   101aa:	je     10195 <Configure+0xaa5>
   101ac:	mov    edx,eax
   101ae:	mov    rdi,r15
   101b1:	mov    r13d,ebp
   101b4:	shr    edx,0x10
   101b7:	test   eax,0x8080
   101bc:	cmove  eax,edx
   101bf:	lea    rdx,[rsi+0x2]
   101c3:	cmove  rsi,rdx
   101c7:	mov    ebx,eax
   101c9:	add    bl,al
   101cb:	sbb    rsi,0x3
   101cf:	sub    rsi,r15
   101d2:	call   f0b0 <ParseContent>
   101d7:	mov    rdi,r15
   101da:	call   42d0 <free@plt>
   101df:	mov    edi,0xa
   101e4:	call   42e0 <putchar@plt>
   101e9:	jmp    f871 <Configure+0x181>
   101ee:	mov    eax,DWORD PTR [rbx+0x8]
   101f1:	test   eax,eax
   101f3:	jne    10349 <Configure+0xc59>
   101f9:	mov    rdx,QWORD PTR [rbx]
   101fc:	cvttsd2si eax,QWORD PTR [rbx+0x20]
   10201:	cmp    DWORD PTR [rdx],eax
   10203:	jge    f972 <Configure+0x282>
   10209:	sub    rsp,0x8
   1020d:	lea    r8,[rip+0x5c1bc]        # 6c3d0 <maxpos+0x10d0>
   10214:	push   rax
   10215:	jmp    f9ae <Configure+0x2be>
   1021a:	cmp    eax,0x2
   1021d:	jne    f972 <Configure+0x282>
   10223:	mov    rax,QWORD PTR [rbx]
   10226:	movsd  xmm0,QWORD PTR [rbx+0x20]
   1022b:	movsd  xmm1,QWORD PTR [rbx+0x28]
   10230:	movsd  xmm2,QWORD PTR [rax]
   10234:	comisd xmm0,xmm2
   10238:	ja     10244 <Configure+0xb54>
   1023a:	comisd xmm2,xmm1
   1023e:	jbe    f972 <Configure+0x282>
   10244:	mov    ecx,0x12c
   10249:	mov    edx,0x1
   1024e:	lea    r8,[rip+0x5c11b]        # 6c370 <maxpos+0x1070>
   10255:	mov    esi,0x12c
   1025a:	lea    rdi,[rip+0xa4d3f]        # b4fa0 <errortext>
   10261:	mov    eax,0x2
   10266:	call   42c0 <__snprintf_chk@plt>
   1026b:	mov    esi,0x190
   10270:	lea    rdi,[rip+0xa4d29]        # b4fa0 <errortext>
   10277:	call   19180 <error>
   1027c:	jmp    f972 <Configure+0x282>
   10281:	mov    r8d,DWORD PTR [rbx+0x8]
   10285:	test   r8d,r8d
   10288:	jne    f972 <Configure+0x282>
   1028e:	pxor   xmm1,xmm1
   10292:	movsd  xmm0,QWORD PTR [rbx+0x20]
   10297:	mov    rax,QWORD PTR [rbx]
   1029a:	cvtsi2sd xmm1,ebp
   1029e:	mov    ecx,DWORD PTR [rax]
   102a0:	cvttsd2si edx,QWORD PTR [rbx+0x28]
   102a5:	subsd  xmm0,xmm1
   102a9:	cvttsd2si eax,xmm0
   102ad:	cmp    ecx,eax
   102af:	jl     102b9 <Configure+0xbc9>
   102b1:	cmp    ecx,edx
   102b3:	jle    f972 <Configure+0x282>
   102b9:	push   rdx
   102ba:	jmp    f9aa <Configure+0x2ba>
   102bf:	mov    ecx,eax
   102c1:	add    eax,0x1
   102c4:	shr    esi,1
   102c6:	jne    102bf <Configure+0xbcf>
   102c8:	lea    eax,[rcx-0x3]
   102cb:	jmp    fb40 <Configure+0x450>
   102d0:	mov    ecx,eax
   102d2:	add    eax,0x1
   102d5:	shr    esi,1
   102d7:	jne    102d0 <Configure+0xbe0>
   102d9:	lea    eax,[rcx-0x3]
   102dc:	mov    DWORD PTR [rip+0x9065e],eax        # a0940 <log2_max_pic_order_cnt_lsb_minus4>
   102e2:	cmp    edi,r9d
   102e5:	jge    fb7f <Configure+0x48f>
   102eb:	mov    edx,0x1
   102f0:	lea    r8,[rip+0x5c199]        # 6c490 <maxpos+0x1190>
   102f7:	xor    eax,eax
   102f9:	mov    ecx,0x12c
   102fe:	mov    esi,0x12c
   10303:	lea    rdi,[rip+0xa4c96]        # b4fa0 <errortext>
   1030a:	call   42c0 <__snprintf_chk@plt>
   1030f:	mov    esi,0x190
   10314:	lea    rdi,[rip+0xa4c85]        # b4fa0 <errortext>
   1031b:	call   19180 <error>
   10320:	mov    rdx,QWORD PTR [rip+0x78291]        # 885b8 <input>
   10327:	mov    r9d,DWORD PTR [rdx+0x4d4]
   1032e:	jmp    fb7f <Configure+0x48f>
   10333:	mov    esi,0x12c
   10338:	lea    rdi,[rip+0xa4c61]        # b4fa0 <errortext>
   1033f:	call   19180 <error>
   10344:	jmp    f8ca <Configure+0x1da>
   10349:	cmp    eax,0x2
   1034c:	jne    f972 <Configure+0x282>
   10352:	mov    rax,QWORD PTR [rbx]
   10355:	movsd  xmm0,QWORD PTR [rbx+0x20]
   1035a:	comisd xmm0,QWORD PTR [rax]
   1035e:	jbe    f972 <Configure+0x282>
   10364:	mov    ecx,0x12c
   10369:	mov    edx,0x1
   1036e:	lea    r8,[rip+0x5c0bb]        # 6c430 <maxpos+0x1130>
   10375:	mov    esi,0x12c
   1037a:	lea    rdi,[rip+0xa4c1f]        # b4fa0 <errortext>
   10381:	mov    eax,0x1
   10386:	call   42c0 <__snprintf_chk@plt>
   1038b:	mov    esi,0x190
   10390:	lea    rdi,[rip+0xa4c09]        # b4fa0 <errortext>
   10397:	call   19180 <error>
   1039c:	jmp    f972 <Configure+0x282>
   103a1:	sub    rsp,0x8
   103a5:	mov    ecx,0x12c
   103aa:	mov    edx,0x1
   103af:	xor    eax,eax
   103b1:	push   0x90
   103b6:	mov    r9d,0x64
   103bc:	lea    r8,[rip+0x5c4cd]        # 6c890 <maxpos+0x1590>
   103c3:	mov    esi,0x12c
   103c8:	lea    rdi,[rip+0xa4bd1]        # b4fa0 <errortext>
   103cf:	call   42c0 <__snprintf_chk@plt>
   103d4:	mov    esi,0x1f4
   103d9:	lea    rdi,[rip+0xa4bc0]        # b4fa0 <errortext>
   103e0:	call   19180 <error>
   103e5:	mov    rcx,QWORD PTR [rip+0x781cc]        # 885b8 <input>
   103ec:	pop    r13
   103ee:	pop    r14
   103f0:	mov    rbx,rcx
   103f3:	mov    r12d,DWORD PTR [rcx+0xcb8]
   103fa:	test   r12d,r12d
   103fd:	je     ff8b <Configure+0x89b>
   10403:	mov    eax,DWORD PTR [rcx]
   10405:	sub    eax,0x64
   10408:	cmp    eax,0x2c
   1040b:	jbe    ff8b <Configure+0x89b>
   10411:	sub    rsp,0x8
   10415:	mov    ecx,0x12c
   1041a:	mov    edx,0x1
   1041f:	xor    eax,eax
   10421:	push   0x90
   10426:	mov    r9d,0x64
   1042c:	lea    r8,[rip+0x5c49d]        # 6c8d0 <maxpos+0x15d0>
   10433:	mov    esi,0x12c
   10438:	lea    rdi,[rip+0xa4b61]        # b4fa0 <errortext>
   1043f:	call   42c0 <__snprintf_chk@plt>
   10444:	mov    esi,0x1f4
   10449:	lea    rdi,[rip+0xa4b50]        # b4fa0 <errortext>
   10450:	call   19180 <error>
   10455:	mov    rcx,QWORD PTR [rip+0x7815c]        # 885b8 <input>
   1045c:	pop    r11
   1045e:	pop    rbp
   1045f:	mov    eax,DWORD PTR [rcx+0x48]
   10462:	mov    rbx,rcx
   10465:	cmp    eax,0x2
   10468:	jne    ff97 <Configure+0x8a7>
   1046e:	cmp    DWORD PTR [rcx],0x79
   10471:	jg     ffa0 <Configure+0x8b0>
   10477:	sub    rsp,0x8
   1047b:	mov    ecx,0x12c
   10480:	mov    edx,0x1
   10485:	xor    eax,eax
   10487:	push   0x90
   1048c:	mov    r9d,0x7a
   10492:	lea    r8,[rip+0x5c47f]        # 6c918 <maxpos+0x1618>
   10499:	mov    esi,0x12c
   1049e:	lea    rdi,[rip+0xa4afb]        # b4fa0 <errortext>
   104a5:	call   42c0 <__snprintf_chk@plt>
   104aa:	mov    esi,0x1f4
   104af:	lea    rdi,[rip+0xa4aea]        # b4fa0 <errortext>
   104b6:	call   19180 <error>
   104bb:	mov    rcx,QWORD PTR [rip+0x780f6]        # 885b8 <input>
   104c2:	pop    r9
   104c4:	pop    r10
   104c6:	mov    eax,DWORD PTR [rcx+0x48]
   104c9:	mov    rbx,rcx
   104cc:	cmp    eax,0x3
   104cf:	jne    ffa0 <Configure+0x8b0>
   104d5:	mov    eax,DWORD PTR [rcx]
   104d7:	cmp    eax,0x8f
   104dc:	jg     ffb5 <Configure+0x8c5>
   104e2:	mov    ecx,0x12c
   104e7:	mov    r9d,0x90
   104ed:	mov    edx,0x1
   104f2:	xor    eax,eax
   104f4:	lea    r8,[rip+0x5c475]        # 6c970 <maxpos+0x1670>
   104fb:	mov    esi,0x12c
   10500:	lea    rdi,[rip+0xa4a99]        # b4fa0 <errortext>
   10507:	call   42c0 <__snprintf_chk@plt>
   1050c:	mov    esi,0x1f4
   10511:	lea    rdi,[rip+0xa4a88]        # b4fa0 <errortext>
   10518:	call   19180 <error>
   1051d:	mov    rbx,QWORD PTR [rip+0x78094]        # 885b8 <input>
   10524:	cmp    DWORD PTR [rbx+0x48],0x3
   10528:	mov    rcx,rbx
   1052b:	jne    ffa0 <Configure+0x8b0>
   10531:	mov    eax,DWORD PTR [rbx]
   10533:	jmp    ffb5 <Configure+0x8c5>
   10538:	movdqa xmm0,XMMWORD PTR [rip+0x5c6d0]        # 6cc10 <maxpos+0x1910>
   10540:	mov    esi,0x2e67
   10545:	lea    rdi,[rip+0xa4a54]        # b4fa0 <errortext>
   1054c:	mov    DWORD PTR [rip+0xa4a7a],0x6e69646f        # b4fd0 <errortext+0x30>
   10556:	mov    WORD PTR [rip+0xa4a77],si        # b4fd4 <errortext+0x34>
   1055d:	mov    esi,0x1f4
   10562:	movups XMMWORD PTR [rip+0xa4a37],xmm0        # b4fa0 <errortext>
   10569:	movdqa xmm0,XMMWORD PTR [rip+0x5c6af]        # 6cc20 <maxpos+0x1920>
   10571:	mov    BYTE PTR [rip+0xa4a5e],0x0        # b4fd6 <errortext+0x36>
   10578:	movups XMMWORD PTR [rip+0xa4a31],xmm0        # b4fb0 <errortext+0x10>
   1057f:	movdqa xmm0,XMMWORD PTR [rip+0x5c6a9]        # 6cc30 <maxpos+0x1930>
   10587:	movups XMMWORD PTR [rip+0xa4a32],xmm0        # b4fc0 <errortext+0x20>
   1058e:	call   19180 <error>
   10593:	mov    rcx,QWORD PTR [rip+0x7801e]        # 885b8 <input>
   1059a:	mov    eax,DWORD PTR [rcx+0x9a0]
   105a0:	mov    rbx,rcx
   105a3:	cmp    eax,0x1
   105a6:	jle    fdce <Configure+0x6de>
   105ac:	movdqa xmm0,XMMWORD PTR [rip+0x5c68c]        # 6cc40 <maxpos+0x1940>
   105b4:	mov    ecx,0x2e73
   105b9:	movabs rax,0x7265646f63656420
   105c3:	mov    esi,0x1f4
   105c8:	lea    rdi,[rip+0xa49d1]        # b4fa0 <errortext>
   105cf:	mov    QWORD PTR [rip+0xa4a1a],rax        # b4ff0 <errortext+0x50>
   105d6:	movups XMMWORD PTR [rip+0xa49c3],xmm0        # b4fa0 <errortext>
   105dd:	movdqa xmm0,XMMWORD PTR [rip+0x5c66b]        # 6cc50 <maxpos+0x1950>
   105e5:	mov    WORD PTR [rip+0xa4a0c],cx        # b4ff8 <errortext+0x58>
   105ec:	movups XMMWORD PTR [rip+0xa49bd],xmm0        # b4fb0 <errortext+0x10>
   105f3:	movdqa xmm0,XMMWORD PTR [rip+0x5c665]        # 6cc60 <maxpos+0x1960>
   105fb:	mov    BYTE PTR [rip+0xa49f8],0x0        # b4ffa <errortext+0x5a>
   10602:	movups XMMWORD PTR [rip+0xa49b7],xmm0        # b4fc0 <errortext+0x20>
   10609:	movdqa xmm0,XMMWORD PTR [rip+0x5c65f]        # 6cc70 <maxpos+0x1970>
   10611:	movups XMMWORD PTR [rip+0xa49b8],xmm0        # b4fd0 <errortext+0x30>
   10618:	movdqa xmm0,XMMWORD PTR [rip+0x5c660]        # 6cc80 <maxpos+0x1980>
   10620:	movups XMMWORD PTR [rip+0xa49b9],xmm0        # b4fe0 <errortext+0x40>
   10627:	call   19180 <error>
   1062c:	mov    rcx,QWORD PTR [rip+0x77f85]        # 885b8 <input>
   10633:	mov    r9d,DWORD PTR [rcx+0xb60]
   1063a:	mov    eax,DWORD PTR [rcx+0x24]
   1063d:	mov    rbx,rcx
   10640:	test   r9d,r9d
   10643:	jns    fde1 <Configure+0x6f1>
   10649:	sub    rsp,0x8
   1064d:	mov    ecx,0x12c
   10652:	mov    edx,0x1
   10657:	mov    esi,0x12c
   1065c:	push   rax
   1065d:	lea    r8,[rip+0x5c11c]        # 6c780 <maxpos+0x1480>
   10664:	lea    rdi,[rip+0xa4935]        # b4fa0 <errortext>
   1066b:	xor    eax,eax
   1066d:	call   42c0 <__snprintf_chk@plt>
   10672:	mov    esi,0x1f4
   10677:	lea    rdi,[rip+0xa4922]        # b4fa0 <errortext>
   1067e:	call   19180 <error>
   10683:	mov    rcx,QWORD PTR [rip+0x77f2e]        # 885b8 <input>
   1068a:	pop    rax
   1068b:	pop    rdx
   1068c:	mov    r9d,DWORD PTR [rcx+0xb60]
   10693:	mov    rbx,rcx
   10696:	jmp    fdea <Configure+0x6fa>
   1069b:	movdqa xmm0,XMMWORD PTR [rip+0x5c62d]        # 6ccd0 <maxpos+0x19d0>
   106a3:	mov    esi,0x1f4
   106a8:	movabs rax,0x6572757463697020
   106b2:	lea    rdi,[rip+0xa48e7]        # b4fa0 <errortext>
   106b9:	mov    QWORD PTR [rip+0xa4900],rax        # b4fc0 <errortext+0x20>
   106c0:	mov    eax,0x2e
   106c5:	movups XMMWORD PTR [rip+0xa48d4],xmm0        # b4fa0 <errortext>
   106cc:	movdqa xmm0,XMMWORD PTR [rip+0x5c60c]        # 6cce0 <maxpos+0x19e0>
   106d4:	mov    WORD PTR [rip+0xa48ed],ax        # b4fc8 <errortext+0x28>
   106db:	movups XMMWORD PTR [rip+0xa48ce],xmm0        # b4fb0 <errortext+0x10>
   106e2:	call   19180 <error>
   106e7:	mov    rcx,QWORD PTR [rip+0x77eca]        # 885b8 <input>
   106ee:	mov    rbx,rcx
   106f1:	cmp    DWORD PTR [rcx+0x938],0x1
   106f8:	je     fe18 <Configure+0x728>
   106fe:	cmp    DWORD PTR [rcx+0xb7c],0x1
   10705:	jne    fe18 <Configure+0x728>
   1070b:	movdqa xmm0,XMMWORD PTR [rip+0x5c5dd]        # 6ccf0 <maxpos+0x19f0>
   10713:	mov    esi,0x1f4
   10718:	lea    rdi,[rip+0xa4881]        # b4fa0 <errortext>
   1071f:	movups XMMWORD PTR [rip+0xa487a],xmm0        # b4fa0 <errortext>
   10726:	movdqa xmm0,XMMWORD PTR [rip+0x5c5d2]        # 6cd00 <maxpos+0x1a00>
   1072e:	movups XMMWORD PTR [rip+0xa487b],xmm0        # b4fb0 <errortext+0x10>
   10735:	movdqa xmm0,XMMWORD PTR [rip+0x5c5d3]        # 6cd10 <maxpos+0x1a10>
   1073d:	movups XMMWORD PTR [rip+0xa487c],xmm0        # b4fc0 <errortext+0x20>
   10744:	movdqa xmm0,XMMWORD PTR [rip+0x5c5d4]        # 6cd20 <maxpos+0x1a20>
   1074c:	movups XMMWORD PTR [rip+0xa487d],xmm0        # b4fd0 <errortext+0x30>
   10753:	call   19180 <error>
   10758:	mov    rcx,QWORD PTR [rip+0x77e59]        # 885b8 <input>
   1075f:	mov    r15d,DWORD PTR [rcx+0x504]
   10766:	mov    rbx,rcx
   10769:	test   r15d,r15d
   1076c:	jg     fe28 <Configure+0x738>
   10772:	mov    r14d,DWORD PTR [rcx+0x508]
   10779:	test   r14d,r14d
   1077c:	jle    febd <Configure+0x7cd>
   10782:	mov    r13d,DWORD PTR [rcx+0xb44]
   10789:	test   r13d,r13d
   1078c:	je     fe38 <Configure+0x748>
   10792:	lea    rsi,[rip+0x5c01f]        # 6c7b8 <maxpos+0x14b8>
   10799:	mov    edi,0x1
   1079e:	xor    eax,eax
   107a0:	call   4490 <__printf_chk@plt>
   107a5:	mov    esi,0x1f4
   107aa:	lea    rdi,[rip+0xa47ef]        # b4fa0 <errortext>
   107b1:	call   19180 <error>
   107b6:	mov    rcx,QWORD PTR [rip+0x77dfb]        # 885b8 <input>
   107bd:	mov    rbx,rcx
   107c0:	jmp    fe38 <Configure+0x748>
   107c5:	movdqa xmm0,XMMWORD PTR [rip+0x5c3c3]        # 6cb90 <maxpos+0x1890>
   107cd:	mov    esi,0x190
   107d2:	lea    rdi,[rip+0xa47c7]        # b4fa0 <errortext>
   107d9:	mov    BYTE PTR [rip+0xa4800],0x0        # b4fe0 <errortext+0x40>
   107e0:	movups XMMWORD PTR [rip+0xa47b9],xmm0        # b4fa0 <errortext>
   107e7:	movdqa xmm0,XMMWORD PTR [rip+0x5c3b1]        # 6cba0 <maxpos+0x18a0>
   107ef:	movups XMMWORD PTR [rip+0xa47ba],xmm0        # b4fb0 <errortext+0x10>
   107f6:	movdqa xmm0,XMMWORD PTR [rip+0x5c3b2]        # 6cbb0 <maxpos+0x18b0>
   107fe:	movups XMMWORD PTR [rip+0xa47bb],xmm0        # b4fc0 <errortext+0x20>
   10805:	movdqa xmm0,XMMWORD PTR [rip+0x5c3b3]        # 6cbc0 <maxpos+0x18c0>
   1080d:	movups XMMWORD PTR [rip+0xa47bc],xmm0        # b4fd0 <errortext+0x30>
   10814:	call   19180 <error>
   10819:	mov    rcx,QWORD PTR [rip+0x77d98]        # 885b8 <input>
   10820:	mov    rbx,rcx
   10823:	mov    r10d,DWORD PTR [rcx+0x930]
   1082a:	test   r10d,r10d
   1082d:	je     fd90 <Configure+0x6a0>
   10833:	mov    r9d,DWORD PTR [rcx+0x528]
   1083a:	test   r9d,r9d
   1083d:	je     fd90 <Configure+0x6a0>
   10843:	cmp    QWORD PTR [rcx+0xb40],0x0
   1084b:	je     108b6 <Configure+0x11c6>
   1084d:	movdqa xmm0,XMMWORD PTR [rip+0x5c37b]        # 6cbd0 <maxpos+0x18d0>
   10855:	mov    r8d,0xa73
   1085b:	mov    esi,0x190
   10860:	lea    rdi,[rip+0xa4739]        # b4fa0 <errortext>
   10867:	mov    WORD PTR [rip+0xa4771],r8w        # b4fe0 <errortext+0x40>
   1086f:	movups XMMWORD PTR [rip+0xa472a],xmm0        # b4fa0 <errortext>
   10876:	movdqa xmm0,XMMWORD PTR [rip+0x5c362]        # 6cbe0 <maxpos+0x18e0>
   1087e:	mov    BYTE PTR [rip+0xa475d],0x0        # b4fe2 <errortext+0x42>
   10885:	movups XMMWORD PTR [rip+0xa4724],xmm0        # b4fb0 <errortext+0x10>
   1088c:	movdqa xmm0,XMMWORD PTR [rip+0x5c35c]        # 6cbf0 <maxpos+0x18f0>
   10894:	movups XMMWORD PTR [rip+0xa4725],xmm0        # b4fc0 <errortext+0x20>
   1089b:	movdqa xmm0,XMMWORD PTR [rip+0x5c35d]        # 6cc00 <maxpos+0x1900>
   108a3:	movups XMMWORD PTR [rip+0xa4726],xmm0        # b4fd0 <errortext+0x30>
   108aa:	call   19180 <error>
   108af:	mov    rcx,QWORD PTR [rip+0x77d02]        # 885b8 <input>
   108b6:	mov    r9d,DWORD PTR [rcx+0xb40]
   108bd:	mov    rbx,rcx
   108c0:	cmp    r9d,0x2
   108c4:	jbe    fda1 <Configure+0x6b1>
   108ca:	mov    ecx,0x12c
   108cf:	lea    r8,[rip+0x5bdea]        # 6c6c0 <maxpos+0x13c0>
   108d6:	xor    eax,eax
   108d8:	mov    edx,0x1
   108dd:	mov    esi,0x12c
   108e2:	lea    rdi,[rip+0xa46b7]        # b4fa0 <errortext>
   108e9:	call   42c0 <__snprintf_chk@plt>
   108ee:	mov    esi,0x190
   108f3:	lea    rdi,[rip+0xa46a6]        # b4fa0 <errortext>
   108fa:	call   19180 <error>
   108ff:	mov    rcx,QWORD PTR [rip+0x77cb2]        # 885b8 <input>
   10906:	mov    r9d,DWORD PTR [rcx+0xb44]
   1090d:	mov    rbx,rcx
   10910:	cmp    r9d,0x2
   10914:	jbe    fdb2 <Configure+0x6c2>
   1091a:	mov    ecx,0x12c
   1091f:	lea    r8,[rip+0x5bdfa]        # 6c720 <maxpos+0x1420>
   10926:	xor    eax,eax
   10928:	mov    edx,0x1
   1092d:	mov    esi,0x12c
   10932:	lea    rdi,[rip+0xa4667]        # b4fa0 <errortext>
   10939:	call   42c0 <__snprintf_chk@plt>
   1093e:	mov    esi,0x190
   10943:	lea    rdi,[rip+0xa4656]        # b4fa0 <errortext>
   1094a:	call   19180 <error>
   1094f:	mov    rcx,QWORD PTR [rip+0x77c62]        # 885b8 <input>
   10956:	mov    rbx,rcx
   10959:	jmp    fdb2 <Configure+0x6c2>
   1095e:	sub    ecx,0x4
   10961:	mov    DWORD PTR [rip+0xa5501],ecx        # b5e68 <log2_max_frame_num_minus4>
   10967:	jmp    fb46 <Configure+0x456>
   1096c:	mov    DWORD PTR [rdx+0x11c1c],0x0
   10976:	cmp    QWORD PTR [rdx+0x11c18],0x0
   1097e:	je     fd01 <Configure+0x611>
   10984:	mov    r8d,DWORD PTR [rdx+0x11c1c]
   1098b:	add    r8d,DWORD PTR [rcx+0x44]
   1098f:	lea    rsi,[rip+0x5bc6a]        # 6c600 <maxpos+0x1300>
   10996:	xor    eax,eax
   10998:	mov    edx,DWORD PTR [rdx+0x11c18]
   1099e:	mov    edi,0x1
   109a3:	add    edx,DWORD PTR [rcx+0x40]
   109a6:	mov    ecx,r8d
   109a9:	call   4490 <__printf_chk@plt>
   109ae:	mov    rcx,QWORD PTR [rip+0x77c03]        # 885b8 <input>
   109b5:	mov    rbx,rcx
   109b8:	jmp    fd01 <Configure+0x611>
   109bd:	test   al,0xf
   109bf:	je     1096c <Configure+0x127c>
   109c1:	mov    esi,eax
   109c3:	sar    esi,0x1f
   109c6:	shr    esi,0x1c
   109c9:	add    eax,esi
   109cb:	and    eax,0xf
   109ce:	sub    esi,eax
   109d0:	lea    eax,[rsi+0x10]
   109d3:	mov    DWORD PTR [rdx+0x11c1c],eax
   109d9:	jmp    fcf3 <Configure+0x603>
   109de:	mov    DWORD PTR [rdx+0x11c18],0x0
   109e8:	jmp    fcba <Configure+0x5ca>
   109ed:	mov    r15d,DWORD PTR [rdx+0xb44]
   109f4:	test   r15d,r15d
   109f7:	jle    fc04 <Configure+0x514>
   109fd:	mov    eax,DWORD PTR [rdx+0x4e4]
   10a03:	test   eax,eax
   10a05:	je     10a16 <Configure+0x1326>
   10a07:	mov    DWORD PTR [rdx+0x4e4],0x1
   10a11:	jmp    fc04 <Configure+0x514>
   10a16:	lea    rsi,[rip+0x5baf3]        # 6c510 <maxpos+0x1210>
   10a1d:	mov    edi,0x1
   10a22:	xor    eax,eax
   10a24:	call   4490 <__printf_chk@plt>
   10a29:	mov    rdx,QWORD PTR [rip+0x77b88]        # 885b8 <input>
   10a30:	mov    r14d,DWORD PTR [rdx+0xb40]
   10a37:	mov    DWORD PTR [rdx+0x4e4],0x1
   10a41:	test   r14d,r14d
   10a44:	jg     fbbb <Configure+0x4cb>
   10a4a:	jmp    fc04 <Configure+0x514>
   10a4f:	lea    rdi,[rcx+0x338]
   10a56:	lea    rsi,[rip+0x5a96f]        # 6b3cc <maxpos+0xcc>
   10a5d:	call   44c0 <fopen@plt>
   10a62:	mov    QWORD PTR [rip+0xa5c77],rax        # b66e0 <p_trace>
   10a69:	test   rax,rax
   10a6c:	je     114d5 <Configure+0x1de5>
   10a72:	mov    rcx,QWORD PTR [rip+0x77b3f]        # 885b8 <input>
   10a79:	mov    rbx,rcx
   10a7c:	jmp    fc90 <Configure+0x5a0>
   10a81:	lea    rdi,[rcx+0x270]
   10a88:	mov    edx,0x180
   10a8d:	mov    esi,0x241
   10a92:	xor    eax,eax
   10a94:	call   44b0 <open@plt>
   10a99:	mov    DWORD PTR [rip+0xa5c55],eax        # b66f4 <p_dec>
   10a9f:	cmp    eax,0xffffffff
   10aa2:	je     1148d <Configure+0x1d9d>
   10aa8:	mov    rcx,QWORD PTR [rip+0x77b09]        # 885b8 <input>
   10aaf:	mov    rbx,rcx
   10ab2:	jmp    fc83 <Configure+0x593>
   10ab7:	mov    rax,QWORD PTR [r12+0x8]
   10abc:	cmp    BYTE PTR [rax],0x2d
   10abf:	je     10e07 <Configure+0x1717>
   10ac5:	lea    rdx,[rip+0x5a87d]        # 6b349 <maxpos+0x49>
   10acc:	lea    rsi,[rip+0x5a8a0]        # 6b373 <maxpos+0x73>
   10ad3:	mov    edi,0x1
   10ad8:	xor    eax,eax
   10ada:	call   4490 <__printf_chk@plt>
   10adf:	lea    rdi,[rip+0x5a863]        # 6b349 <maxpos+0x49>
   10ae6:	call   f5b0 <GetConfigFileContent>
   10aeb:	mov    rbp,rax
   10aee:	test   rax,rax
   10af1:	je     10f29 <Configure+0x1839>
   10af7:	mov    rdi,rbp
   10afa:	mov    r13d,0x1
   10b00:	call   4380 <strlen@plt>
   10b05:	mov    rdi,rbp
   10b08:	mov    rsi,rax
   10b0b:	call   f0b0 <ParseContent>
   10b10:	mov    edi,0xa
   10b15:	call   42e0 <putchar@plt>
   10b1a:	mov    rdi,rbp
   10b1d:	call   42d0 <free@plt>
   10b22:	jmp    f87c <Configure+0x18c>
   10b27:	lea    rdi,[rip+0x5beda]        # 6ca08 <maxpos+0x1708>
   10b2e:	lea    rbx,[rip+0x754f3]        # 86028 <Map+0x8>
   10b35:	call   4320 <puts@plt>
   10b3a:	lea    rdi,[rip+0x5beff]        # 6ca40 <maxpos+0x1740>
   10b41:	lea    rbp,[rip+0x5a8eb]        # 6b433 <maxpos+0x133>
   10b48:	call   4320 <puts@plt>
   10b4d:	lea    rdi,[rip+0x5beb4]        # 6ca08 <maxpos+0x1708>
   10b54:	call   4320 <puts@plt>
   10b59:	mov    rdx,QWORD PTR [rip+0x754c0]        # 86020 <Map>
   10b60:	test   rdx,rdx
   10b63:	jne    10b8b <Configure+0x149b>
   10b65:	jmp    10bb7 <Configure+0x14c7>
   10b67:	nop    WORD PTR [rax+rax*1+0x0]
   10b70:	cmp    eax,0x1
   10b73:	je     10bc8 <Configure+0x14d8>
   10b75:	cmp    eax,0x2
   10b78:	je     10ce5 <Configure+0x15f5>
   10b7e:	mov    rdx,QWORD PTR [rbx+0x30]
   10b82:	add    rbx,0x38
   10b86:	test   rdx,rdx
   10b89:	je     10bb7 <Configure+0x14c7>
   10b8b:	mov    eax,DWORD PTR [rbx+0x8]
   10b8e:	test   eax,eax
   10b90:	jne    10b70 <Configure+0x1480>
   10b92:	mov    rax,QWORD PTR [rbx]
   10b95:	lea    rsi,[rip+0x5a871]        # 6b40d <maxpos+0x10d>
   10b9c:	mov    edi,0x1
   10ba1:	add    rbx,0x38
   10ba5:	mov    ecx,DWORD PTR [rax]
   10ba7:	xor    eax,eax
   10ba9:	call   4490 <__printf_chk@plt>
   10bae:	mov    rdx,QWORD PTR [rbx-0x8]
   10bb2:	test   rdx,rdx
   10bb5:	jne    10b8b <Configure+0x149b>
   10bb7:	lea    rdi,[rip+0x5be4a]        # 6ca08 <maxpos+0x1708>
   10bbe:	call   4320 <puts@plt>
   10bc3:	jmp    1000d <Configure+0x91d>
   10bc8:	mov    rcx,QWORD PTR [rbx]
   10bcb:	lea    rsi,[rip+0x5a84e]        # 6b420 <maxpos+0x120>
   10bd2:	mov    edi,0x1
   10bd7:	xor    eax,eax
   10bd9:	call   4490 <__printf_chk@plt>
   10bde:	jmp    10b7e <Configure+0x148e>
   10be0:	mov    r10d,DWORD PTR [rbx+0x4e4]
   10be7:	test   r10d,r10d
   10bea:	je     11336 <Configure+0x1c46>
   10bf0:	cmp    DWORD PTR [rbx+0x934],0x1
   10bf7:	jne    ffff <Configure+0x90f>
   10bfd:	movdqa xmm0,XMMWORD PTR [rip+0x5c25b]        # 6ce60 <maxpos+0x1b60>
   10c05:	mov    r8d,0x2e
   10c0b:	mov    esi,0x1f4
   10c10:	lea    rdi,[rip+0xa4389]        # b4fa0 <errortext>
   10c17:	mov    WORD PTR [rip+0xa43a1],r8w        # b4fc0 <errortext+0x20>
   10c1f:	movups XMMWORD PTR [rip+0xa437a],xmm0        # b4fa0 <errortext>
   10c26:	movdqa xmm0,XMMWORD PTR [rip+0x5c2e2]        # 6cf10 <maxpos+0x1c10>
   10c2e:	movups XMMWORD PTR [rip+0xa437b],xmm0        # b4fb0 <errortext+0x10>
   10c35:	call   19180 <error>
   10c3a:	mov    rbx,QWORD PTR [rip+0x77977]        # 885b8 <input>
   10c41:	jmp    ffff <Configure+0x90f>
   10c46:	mov    r14d,DWORD PTR [rbx+0x4f8]
   10c4d:	test   r14d,r14d
   10c50:	jne    11221 <Configure+0x1b31>
   10c56:	mov    r13d,DWORD PTR [rbx+0x93c]
   10c5d:	test   r13d,r13d
   10c60:	jne    11278 <Configure+0x1b88>
   10c66:	mov    ebp,DWORD PTR [rbx+0xc50]
   10c6c:	test   ebp,ebp
   10c6e:	jne    112db <Configure+0x1beb>
   10c74:	mov    r11d,DWORD PTR [rbx+0xc84]
   10c7b:	test   r11d,r11d
   10c7e:	jne    10e5c <Configure+0x176c>
   10c84:	mov    eax,DWORD PTR [rbx]
   10c86:	jmp    fff6 <Configure+0x906>
   10c8b:	mov    edx,DWORD PTR [rbx+0x4d4]
   10c91:	test   edx,edx
   10c93:	jne    11068 <Configure+0x1978>
   10c99:	mov    eax,DWORD PTR [rbx+0x4f8]
   10c9f:	test   eax,eax
   10ca1:	jne    110bd <Configure+0x19cd>
   10ca7:	mov    eax,DWORD PTR [rbx+0x93c]
   10cad:	test   eax,eax
   10caf:	jne    11119 <Configure+0x1a29>
   10cb5:	mov    eax,DWORD PTR [rbx+0x504]
   10cbb:	test   eax,eax
   10cbd:	jne    11184 <Configure+0x1a94>
   10cc3:	mov    eax,DWORD PTR [rbx+0x508]
   10cc9:	test   eax,eax
   10ccb:	jne    111d7 <Configure+0x1ae7>
   10cd1:	cmp    DWORD PTR [rbx+0x934],0x1
   10cd8:	je     10eb4 <Configure+0x17c4>
   10cde:	mov    eax,DWORD PTR [rbx]
   10ce0:	jmp    ffed <Configure+0x8fd>
   10ce5:	mov    rax,QWORD PTR [rbx]
   10ce8:	mov    rsi,rbp
   10ceb:	mov    edi,0x1
   10cf0:	movsd  xmm0,QWORD PTR [rax]
   10cf4:	mov    eax,0x1
   10cf9:	call   4490 <__printf_chk@plt>
   10cfe:	jmp    10b7e <Configure+0x148e>
   10d03:	mov    ebp,DWORD PTR [rsp+0x1c]
   10d07:	jmp    1017c <Configure+0xa8c>
   10d0c:	mov    edi,0x3e8
   10d11:	call   4460 <malloc@plt>
   10d16:	mov    r15,rax
   10d19:	test   rax,rax
   10d1c:	je     117fa <Configure+0x210a>
   10d22:	mov    BYTE PTR [r15],0x0
   10d26:	mov    ebp,DWORD PTR [rsp+0x1c]
   10d2a:	jmp    1017c <Configure+0xa8c>
   10d2f:	mov    r9,QWORD PTR [rip+0x77882]        # 885b8 <input>
   10d36:	lea    r8,[rip+0x5a65f]        # 6b39c <maxpos+0x9c>
   10d3d:	mov    ecx,0x12c
   10d42:	xor    eax,eax
   10d44:	mov    edx,0x1
   10d49:	mov    esi,0x12c
   10d4e:	lea    rdi,[rip+0xa424b]        # b4fa0 <errortext>
   10d55:	add    r9,0xe0
   10d5c:	call   42c0 <__snprintf_chk@plt>
   10d61:	mov    esi,0x1f4
   10d66:	lea    rdi,[rip+0xa4233]        # b4fa0 <errortext>
   10d6d:	call   19180 <error>
   10d72:	jmp    fc6c <Configure+0x57c>
   10d77:	mov    eax,DWORD PTR [rcx+0x4d4]
   10d7d:	test   eax,eax
   10d7f:	jle    ff5e <Configure+0x86e>
   10d85:	mov    esi,0xfffffc18
   10d8a:	lea    rdi,[rip+0x5bacf]        # 6c860 <maxpos+0x1560>
   10d91:	call   19180 <error>
   10d96:	mov    rcx,QWORD PTR [rip+0x7781b]        # 885b8 <input>
   10d9d:	mov    rbx,rcx
   10da0:	jmp    ff5e <Configure+0x86e>
   10da5:	movdqa xmm0,XMMWORD PTR [rip+0x5bff3]        # 6cda0 <maxpos+0x1aa0>
   10dad:	mov    edi,0x2e
   10db2:	mov    esi,0x1f4
   10db7:	mov    DWORD PTR [rip+0xa420f],0x34343456        # b4fd0 <errortext+0x30>
   10dc1:	mov    WORD PTR [rip+0xa420c],di        # b4fd4 <errortext+0x34>
   10dc8:	lea    rdi,[rip+0xa41d1]        # b4fa0 <errortext>
   10dcf:	movups XMMWORD PTR [rip+0xa41ca],xmm0        # b4fa0 <errortext>
   10dd6:	movdqa xmm0,XMMWORD PTR [rip+0x5bfd2]        # 6cdb0 <maxpos+0x1ab0>
   10dde:	movups XMMWORD PTR [rip+0xa41cb],xmm0        # b4fb0 <errortext+0x10>
   10de5:	movdqa xmm0,XMMWORD PTR [rip+0x5bfd3]        # 6cdc0 <maxpos+0x1ac0>
   10ded:	movups XMMWORD PTR [rip+0xa41cc],xmm0        # b4fc0 <errortext+0x20>
   10df4:	call   19180 <error>
   10df9:	mov    rbx,QWORD PTR [rip+0x777b8]        # 885b8 <input>
   10e00:	mov    eax,DWORD PTR [rbx]
   10e02:	jmp    ffb5 <Configure+0x8c5>
   10e07:	cmp    BYTE PTR [rax+0x1],0x68
   10e0b:	jne    10ac5 <Configure+0x13d5>
   10e11:	xor    eax,eax
   10e13:	call   f570 <JMHelpExit>
   10e18:	nop    DWORD PTR [rax+rax*1+0x0]
   10e20:	mov    edx,DWORD PTR [rcx+0x4c8]
   10e26:	test   edx,edx
   10e28:	je     ff4a <Configure+0x85a>
   10e2e:	mov    eax,DWORD PTR [rcx+0xc88]
   10e34:	test   eax,eax
   10e36:	je     ff4a <Configure+0x85a>
   10e3c:	mov    esi,0xfffffc18
   10e41:	lea    rdi,[rip+0x5b9b8]        # 6c800 <maxpos+0x1500>
   10e48:	call   19180 <error>
   10e4d:	mov    rcx,QWORD PTR [rip+0x77764]        # 885b8 <input>
   10e54:	mov    rbx,rcx
   10e57:	jmp    ff4a <Configure+0x85a>
   10e5c:	movdqa xmm0,XMMWORD PTR [rip+0x5c05c]        # 6cec0 <maxpos+0x1bc0>
   10e64:	mov    esi,0x1f4
   10e69:	movabs rax,0x616d206e69206465
   10e73:	lea    rdi,[rip+0xa4126]        # b4fa0 <errortext>
   10e7a:	mov    QWORD PTR [rip+0xa413f],rax        # b4fc0 <errortext+0x20>
   10e81:	movups XMMWORD PTR [rip+0xa4118],xmm0        # b4fa0 <errortext>
   10e88:	movdqa xmm0,XMMWORD PTR [rip+0x5c040]        # 6ced0 <maxpos+0x1bd0>
   10e90:	mov    DWORD PTR [rip+0xa412e],0x2e6e69        # b4fc8 <errortext+0x28>
   10e9a:	movups XMMWORD PTR [rip+0xa410f],xmm0        # b4fb0 <errortext+0x10>
   10ea1:	call   19180 <error>
   10ea6:	mov    rbx,QWORD PTR [rip+0x7770b]        # 885b8 <input>
   10ead:	mov    eax,DWORD PTR [rbx]
   10eaf:	jmp    fff6 <Configure+0x906>
   10eb4:	movdqa xmm0,XMMWORD PTR [rip+0x5bfa4]        # 6ce60 <maxpos+0x1b60>
   10ebc:	mov    r15d,0x2e
   10ec2:	mov    esi,0x1f4
   10ec7:	lea    rdi,[rip+0xa40d2]        # b4fa0 <errortext>
   10ece:	mov    WORD PTR [rip+0xa40ea],r15w        # b4fc0 <errortext+0x20>
   10ed6:	movups XMMWORD PTR [rip+0xa40c3],xmm0        # b4fa0 <errortext>
   10edd:	movdqa xmm0,XMMWORD PTR [rip+0x5bf8b]        # 6ce70 <maxpos+0x1b70>
   10ee5:	movups XMMWORD PTR [rip+0xa40c4],xmm0        # b4fb0 <errortext+0x10>
   10eec:	call   19180 <error>
   10ef1:	mov    rbx,QWORD PTR [rip+0x776c0]        # 885b8 <input>
   10ef8:	mov    eax,DWORD PTR [rbx]
   10efa:	jmp    ffed <Configure+0x8fd>
   10eff:	mov    esi,0x1f4
   10f04:	lea    rdi,[rip+0x5b6bd]        # 6c5c8 <maxpos+0x12c8>
   10f0b:	call   19180 <error>
   10f10:	mov    rcx,QWORD PTR [rip+0x776a1]        # 885b8 <input>
   10f17:	mov    rdx,QWORD PTR [rip+0x77692]        # 885b0 <img>
   10f1e:	mov    eax,DWORD PTR [rcx+0x44]
   10f21:	mov    rbx,rcx
   10f24:	jmp    fcd3 <Configure+0x5e3>
   10f29:	mov    r13d,0x1
   10f2f:	mov    esi,0x12c
   10f34:	lea    rdi,[rip+0xa4065]        # b4fa0 <errortext>
   10f3b:	xor    ebp,ebp
   10f3d:	call   19180 <error>
   10f42:	jmp    f7f8 <Configure+0x108>
   10f47:	movdqa xmm0,XMMWORD PTR [rip+0x5be01]        # 6cd50 <maxpos+0x1a50>
   10f4f:	mov    esi,0x1f4
   10f54:	lea    rdi,[rip+0xa4045]        # b4fa0 <errortext>
   10f5b:	mov    DWORD PTR [rip+0xa405b],0x2e796c74        # b4fc0 <errortext+0x20>
   10f65:	mov    BYTE PTR [rip+0xa4058],0x0        # b4fc4 <errortext+0x24>
   10f6c:	movups XMMWORD PTR [rip+0xa402d],xmm0        # b4fa0 <errortext>
   10f73:	movdqa xmm0,XMMWORD PTR [rip+0x5bde5]        # 6cd60 <maxpos+0x1a60>
   10f7b:	movups XMMWORD PTR [rip+0xa402e],xmm0        # b4fb0 <errortext+0x10>
   10f82:	call   19180 <error>
   10f87:	mov    rcx,QWORD PTR [rip+0x7762a]        # 885b8 <input>
   10f8e:	mov    rbx,rcx
   10f91:	jmp    ff26 <Configure+0x836>
   10f96:	movdqa xmm0,XMMWORD PTR [rip+0x5bcf2]        # 6cc90 <maxpos+0x1990>
   10f9e:	mov    eax,0x2e
   10fa3:	mov    esi,0x1f4
   10fa8:	lea    rdi,[rip+0xa3ff1]        # b4fa0 <errortext>
   10faf:	mov    WORD PTR [rip+0xa402a],ax        # b4fe0 <errortext+0x40>
   10fb6:	movups XMMWORD PTR [rip+0xa3fe3],xmm0        # b4fa0 <errortext>
   10fbd:	movdqa xmm0,XMMWORD PTR [rip+0x5bcdb]        # 6cca0 <maxpos+0x19a0>
   10fc5:	movups XMMWORD PTR [rip+0xa3fe4],xmm0        # b4fb0 <errortext+0x10>
   10fcc:	movdqa xmm0,XMMWORD PTR [rip+0x5bcdc]        # 6ccb0 <maxpos+0x19b0>
   10fd4:	movups XMMWORD PTR [rip+0xa3fe5],xmm0        # b4fc0 <errortext+0x20>
   10fdb:	movdqa xmm0,XMMWORD PTR [rip+0x5bcdd]        # 6ccc0 <maxpos+0x19c0>
   10fe3:	movups XMMWORD PTR [rip+0xa3fe6],xmm0        # b4fd0 <errortext+0x30>
   10fea:	call   19180 <error>
   10fef:	mov    rcx,QWORD PTR [rip+0x775c2]        # 885b8 <input>
   10ff6:	mov    rbx,rcx
   10ff9:	jmp    fdfd <Configure+0x70d>
   10ffe:	movdqa xmm0,XMMWORD PTR [rip+0x5bd6a]        # 6cd70 <maxpos+0x1a70>
   11006:	mov    esi,0x1f4
   1100b:	lea    rdi,[rip+0xa3f8e]        # b4fa0 <errortext>
   11012:	mov    DWORD PTR [rip+0xa3fb4],0x2e7365        # b4fd0 <errortext+0x30>
   1101c:	movups XMMWORD PTR [rip+0xa3f7d],xmm0        # b4fa0 <errortext>
   11023:	movdqa xmm0,XMMWORD PTR [rip+0x5bd55]        # 6cd80 <maxpos+0x1a80>
   1102b:	movups XMMWORD PTR [rip+0xa3f7e],xmm0        # b4fb0 <errortext+0x10>
   11032:	movdqa xmm0,XMMWORD PTR [rip+0x5bd56]        # 6cd90 <maxpos+0x1a90>
   1103a:	movups XMMWORD PTR [rip+0xa3f7f],xmm0        # b4fc0 <errortext+0x20>
   11041:	call   19180 <error>
   11046:	mov    rcx,QWORD PTR [rip+0x7756b]        # 885b8 <input>
   1104d:	mov    r15d,DWORD PTR [rcx+0xc94]
   11054:	mov    rbx,rcx
   11057:	test   r15d,r15d
   1105a:	jne    ff7a <Configure+0x88a>
   11060:	jmp    103f3 <Configure+0xd03>
   11065:	nop    DWORD PTR [rax]
   11068:	movdqa xmm0,XMMWORD PTR [rip+0x5bd60]        # 6cdd0 <maxpos+0x1ad0>
   11070:	mov    esi,0x1f4
   11075:	movabs rax,0x2e656e696c6573
   1107f:	lea    rdi,[rip+0xa3f1a]        # b4fa0 <errortext>
   11086:	mov    QWORD PTR [rip+0xa3f33],rax        # b4fc0 <errortext+0x20>
   1108d:	movups XMMWORD PTR [rip+0xa3f0c],xmm0        # b4fa0 <errortext>
   11094:	movdqa xmm0,XMMWORD PTR [rip+0x5bd44]        # 6cde0 <maxpos+0x1ae0>
   1109c:	movups XMMWORD PTR [rip+0xa3f0d],xmm0        # b4fb0 <errortext+0x10>
   110a3:	call   19180 <error>
   110a8:	mov    rbx,QWORD PTR [rip+0x77509]        # 885b8 <input>
   110af:	mov    eax,DWORD PTR [rbx+0x4f8]
   110b5:	test   eax,eax
   110b7:	je     10ca7 <Configure+0x15b7>
   110bd:	movdqa xmm0,XMMWORD PTR [rip+0x5bd2b]        # 6cdf0 <maxpos+0x1af0>
   110c5:	mov    esi,0x1f4
   110ca:	movabs rax,0x2e656e696c657361
   110d4:	lea    rdi,[rip+0xa3ec5]        # b4fa0 <errortext>
   110db:	mov    QWORD PTR [rip+0xa3ede],rax        # b4fc0 <errortext+0x20>
   110e2:	movups XMMWORD PTR [rip+0xa3eb7],xmm0        # b4fa0 <errortext>
   110e9:	movdqa xmm0,XMMWORD PTR [rip+0x5bd0f]        # 6ce00 <maxpos+0x1b00>
   110f1:	mov    BYTE PTR [rip+0xa3ed0],0x0        # b4fc8 <errortext+0x28>
   110f8:	movups XMMWORD PTR [rip+0xa3eb1],xmm0        # b4fb0 <errortext+0x10>
   110ff:	call   19180 <error>
   11104:	mov    rbx,QWORD PTR [rip+0x774ad]        # 885b8 <input>
   1110b:	mov    eax,DWORD PTR [rbx+0x93c]
   11111:	test   eax,eax
   11113:	je     10cb5 <Configure+0x15c5>
   11119:	movdqa xmm0,XMMWORD PTR [rip+0x5bcef]        # 6ce10 <maxpos+0x1b10>
   11121:	mov    esi,0x1f4
   11126:	movabs rax,0x65736162206e6920
   11130:	lea    rdi,[rip+0xa3e69]        # b4fa0 <errortext>
   11137:	mov    QWORD PTR [rip+0xa3e82],rax        # b4fc0 <errortext+0x20>
   1113e:	mov    eax,0x2e
   11143:	movups XMMWORD PTR [rip+0xa3e56],xmm0        # b4fa0 <errortext>
   1114a:	movdqa xmm0,XMMWORD PTR [rip+0x5bcce]        # 6ce20 <maxpos+0x1b20>
   11152:	mov    WORD PTR [rip+0xa3e73],ax        # b4fcc <errortext+0x2c>
   11159:	mov    DWORD PTR [rip+0xa3e65],0x656e696c        # b4fc8 <errortext+0x28>
   11163:	movups XMMWORD PTR [rip+0xa3e46],xmm0        # b4fb0 <errortext+0x10>
   1116a:	call   19180 <error>
   1116f:	mov    rbx,QWORD PTR [rip+0x77442]        # 885b8 <input>
   11176:	mov    eax,DWORD PTR [rbx+0x504]
   1117c:	test   eax,eax
   1117e:	je     10cc3 <Configure+0x15d3>
   11184:	movdqa xmm0,XMMWORD PTR [rip+0x5bca4]        # 6ce30 <maxpos+0x1b30>
   1118c:	mov    esi,0x1f4
   11191:	lea    rdi,[rip+0xa3e08]        # b4fa0 <errortext>
   11198:	movups XMMWORD PTR [rip+0xa3e01],xmm0        # b4fa0 <errortext>
   1119f:	movdqa xmm0,XMMWORD PTR [rip+0x5bc99]        # 6ce40 <maxpos+0x1b40>
   111a7:	movups XMMWORD PTR [rip+0xa3e02],xmm0        # b4fb0 <errortext+0x10>
   111ae:	movdqa xmm0,XMMWORD PTR [rip+0x5bc9a]        # 6ce50 <maxpos+0x1b50>
   111b6:	movups XMMWORD PTR [rip+0xa3e03],xmm0        # b4fc0 <errortext+0x20>
   111bd:	call   19180 <error>
   111c2:	mov    rbx,QWORD PTR [rip+0x773ef]        # 885b8 <input>
   111c9:	mov    eax,DWORD PTR [rbx+0x508]
   111cf:	test   eax,eax
   111d1:	je     10cd1 <Configure+0x15e1>
   111d7:	movdqa xmm0,XMMWORD PTR [rip+0x5bc51]        # 6ce30 <maxpos+0x1b30>
   111df:	mov    esi,0x1f4
   111e4:	lea    rdi,[rip+0xa3db5]        # b4fa0 <errortext>
   111eb:	movups XMMWORD PTR [rip+0xa3dae],xmm0        # b4fa0 <errortext>
   111f2:	movdqa xmm0,XMMWORD PTR [rip+0x5bc46]        # 6ce40 <maxpos+0x1b40>
   111fa:	movups XMMWORD PTR [rip+0xa3daf],xmm0        # b4fb0 <errortext+0x10>
   11201:	movdqa xmm0,XMMWORD PTR [rip+0x5bc47]        # 6ce50 <maxpos+0x1b50>
   11209:	movups XMMWORD PTR [rip+0xa3db0],xmm0        # b4fc0 <errortext+0x20>
   11210:	call   19180 <error>
   11215:	mov    rbx,QWORD PTR [rip+0x7739c]        # 885b8 <input>
   1121c:	jmp    10cd1 <Configure+0x15e1>
   11221:	movdqa xmm0,XMMWORD PTR [rip+0x5bbc7]        # 6cdf0 <maxpos+0x1af0>
   11229:	mov    esi,0x1f4
   1122e:	lea    rdi,[rip+0xa3d6b]        # b4fa0 <errortext>
   11235:	mov    DWORD PTR [rip+0xa3d81],0x2e6e6961        # b4fc0 <errortext+0x20>
   1123f:	mov    BYTE PTR [rip+0xa3d7e],0x0        # b4fc4 <errortext+0x24>
   11246:	movups XMMWORD PTR [rip+0xa3d53],xmm0        # b4fa0 <errortext>
   1124d:	movdqa xmm0,XMMWORD PTR [rip+0x5bc2b]        # 6ce80 <maxpos+0x1b80>
   11255:	movups XMMWORD PTR [rip+0xa3d54],xmm0        # b4fb0 <errortext+0x10>
   1125c:	call   19180 <error>
   11261:	mov    rbx,QWORD PTR [rip+0x77350]        # 885b8 <input>
   11268:	mov    r13d,DWORD PTR [rbx+0x93c]
   1126f:	test   r13d,r13d
   11272:	je     10c66 <Configure+0x1576>
   11278:	movdqa xmm0,XMMWORD PTR [rip+0x5bb90]        # 6ce10 <maxpos+0x1b10>
   11280:	mov    r12d,0x2e
   11286:	movabs rax,0x6e69616d206e6920
   11290:	mov    esi,0x1f4
   11295:	lea    rdi,[rip+0xa3d04]        # b4fa0 <errortext>
   1129c:	mov    QWORD PTR [rip+0xa3d1d],rax        # b4fc0 <errortext+0x20>
   112a3:	movups XMMWORD PTR [rip+0xa3cf6],xmm0        # b4fa0 <errortext>
   112aa:	movdqa xmm0,XMMWORD PTR [rip+0x5bb6e]        # 6ce20 <maxpos+0x1b20>
   112b2:	mov    WORD PTR [rip+0xa3d0e],r12w        # b4fc8 <errortext+0x28>
   112ba:	movups XMMWORD PTR [rip+0xa3cef],xmm0        # b4fb0 <errortext+0x10>
   112c1:	call   19180 <error>
   112c6:	mov    rbx,QWORD PTR [rip+0x772eb]        # 885b8 <input>
   112cd:	mov    ebp,DWORD PTR [rbx+0xc50]
   112d3:	test   ebp,ebp
   112d5:	je     10c74 <Configure+0x1584>
   112db:	movdqa xmm0,XMMWORD PTR [rip+0x5bbad]        # 6ce90 <maxpos+0x1b90>
   112e3:	mov    esi,0x1f4
   112e8:	movabs rax,0x2e6e69616d206e
   112f2:	lea    rdi,[rip+0xa3ca7]        # b4fa0 <errortext>
   112f9:	mov    QWORD PTR [rip+0xa3cd0],rax        # b4fd0 <errortext+0x30>
   11300:	movups XMMWORD PTR [rip+0xa3c99],xmm0        # b4fa0 <errortext>
   11307:	movdqa xmm0,XMMWORD PTR [rip+0x5bb91]        # 6cea0 <maxpos+0x1ba0>
   1130f:	movups XMMWORD PTR [rip+0xa3c9a],xmm0        # b4fb0 <errortext+0x10>
   11316:	movdqa xmm0,XMMWORD PTR [rip+0x5bb92]        # 6ceb0 <maxpos+0x1bb0>
   1131e:	movups XMMWORD PTR [rip+0xa3c9b],xmm0        # b4fc0 <errortext+0x20>
   11325:	call   19180 <error>
   1132a:	mov    rbx,QWORD PTR [rip+0x77287]        # 885b8 <input>
   11331:	jmp    10c74 <Configure+0x1584>
   11336:	movdqa xmm0,XMMWORD PTR [rip+0x5bba2]        # 6cee0 <maxpos+0x1be0>
   1133e:	mov    r9d,0x2e
   11344:	movabs rax,0x6465646e65747865
   1134e:	mov    esi,0x1f4
   11353:	lea    rdi,[rip+0xa3c46]        # b4fa0 <errortext>
   1135a:	mov    QWORD PTR [rip+0xa3c6f],rax        # b4fd0 <errortext+0x30>
   11361:	movups XMMWORD PTR [rip+0xa3c38],xmm0        # b4fa0 <errortext>
   11368:	movdqa xmm0,XMMWORD PTR [rip+0x5bb80]        # 6cef0 <maxpos+0x1bf0>
   11370:	mov    WORD PTR [rip+0xa3c60],r9w        # b4fd8 <errortext+0x38>
   11378:	movups XMMWORD PTR [rip+0xa3c31],xmm0        # b4fb0 <errortext+0x10>
   1137f:	movdqa xmm0,XMMWORD PTR [rip+0x5bb79]        # 6cf00 <maxpos+0x1c00>
   11387:	movups XMMWORD PTR [rip+0xa3c32],xmm0        # b4fc0 <errortext+0x20>
   1138e:	call   19180 <error>
   11393:	mov    rbx,QWORD PTR [rip+0x7721e]        # 885b8 <input>
   1139a:	jmp    10bf0 <Configure+0x1500>
   1139f:	mov    edx,0x1
   113a4:	lea    r8,[rip+0x5b12d]        # 6c4d8 <maxpos+0x11d8>
   113ab:	xor    eax,eax
   113ad:	mov    ecx,0x12c
   113b2:	mov    esi,0x12c
   113b7:	lea    rdi,[rip+0xa3be2]        # b4fa0 <errortext>
   113be:	call   42c0 <__snprintf_chk@plt>
   113c3:	mov    esi,0x190
   113c8:	lea    rdi,[rip+0xa3bd1]        # b4fa0 <errortext>
   113cf:	call   19180 <error>
   113d4:	mov    rdx,QWORD PTR [rip+0x771dd]        # 885b8 <input>
   113db:	jmp    fb95 <Configure+0x4a5>
   113e0:	mov    r13d,DWORD PTR [rbx+0xc50]
   113e7:	lea    edi,[r13+0x1]
   113eb:	movsxd rdi,edi
   113ee:	shl    rdi,0x2
   113f2:	call   4460 <malloc@plt>
   113f7:	mov    QWORD PTR [rbx+0xc70],rax
   113fe:	test   rax,rax
   11401:	je     117db <Configure+0x20eb>
   11407:	xor    r12d,r12d
   1140a:	lea    r14,[rip+0x59f17]        # 6b328 <maxpos+0x28>
   11411:	test   r13d,r13d
   11414:	js     fd48 <Configure+0x658>
   1141a:	mov    rax,QWORD PTR [rbx+0xc70]
   11421:	mov    rsi,r14
   11424:	mov    rdi,rbp
   11427:	lea    rdx,[rax+r12*4]
   1142b:	xor    eax,eax
   1142d:	add    r12,0x1
   11431:	call   4310 <__isoc99_fscanf@plt>
   11436:	lea    rsi,[rip+0x59f91]        # 6b3ce <maxpos+0xce>
   1143d:	mov    rdi,rbp
   11440:	xor    eax,eax
   11442:	call   4310 <__isoc99_fscanf@plt>
   11447:	mov    rbx,QWORD PTR [rip+0x7716a]        # 885b8 <input>
   1144e:	cmp    DWORD PTR [rbx+0xc50],r12d
   11455:	jge    1141a <Configure+0x1d2a>
   11457:	jmp    fd48 <Configure+0x658>
   1145c:	lea    rdi,[rcx+0xb88]
   11463:	lea    rsi,[rip+0x5a334]        # 6b79e <maxpos+0x49e>
   1146a:	call   44c0 <fopen@plt>
   1146f:	mov    rbp,rax
   11472:	test   rax,rax
   11475:	je     11778 <Configure+0x2088>
   1147b:	mov    rbx,QWORD PTR [rip+0x77136]        # 885b8 <input>
   11482:	mov    eax,DWORD PTR [rbx+0xc54]
   11488:	jmp    fd2e <Configure+0x63e>
   1148d:	mov    r9,QWORD PTR [rip+0x77124]        # 885b8 <input>
   11494:	lea    r8,[rip+0x59f1e]        # 6b3b9 <maxpos+0xb9>
   1149b:	mov    ecx,0x12c
   114a0:	xor    eax,eax
   114a2:	mov    edx,0x1
   114a7:	mov    esi,0x12c
   114ac:	lea    rdi,[rip+0xa3aed]        # b4fa0 <errortext>
   114b3:	add    r9,0x270
   114ba:	call   42c0 <__snprintf_chk@plt>
   114bf:	mov    esi,0x1f4
   114c4:	lea    rdi,[rip+0xa3ad5]        # b4fa0 <errortext>
   114cb:	call   19180 <error>
   114d0:	jmp    10aa8 <Configure+0x13b8>
   114d5:	mov    r9,QWORD PTR [rip+0x770dc]        # 885b8 <input>
   114dc:	lea    r8,[rip+0x59ed6]        # 6b3b9 <maxpos+0xb9>
   114e3:	mov    ecx,0x12c
   114e8:	xor    eax,eax
   114ea:	mov    edx,0x1
   114ef:	mov    esi,0x12c
   114f4:	lea    rdi,[rip+0xa3aa5]        # b4fa0 <errortext>
   114fb:	add    r9,0x338
   11502:	call   42c0 <__snprintf_chk@plt>
   11507:	mov    esi,0x1f4
   1150c:	lea    rdi,[rip+0xa3a8d]        # b4fa0 <errortext>
   11513:	call   19180 <error>
   11518:	jmp    10a72 <Configure+0x1382>
   1151d:	xor    eax,eax
   1151f:	jmp    fb40 <Configure+0x450>
   11524:	movsxd r13,DWORD PTR [rbx+0xc50]
   1152b:	shl    r13,0x2
   1152f:	mov    rdi,r13
   11532:	call   4460 <malloc@plt>
   11537:	mov    rdi,r13
   1153a:	mov    QWORD PTR [rbx+0xc58],rax
   11541:	mov    r12,rax
   11544:	call   4460 <malloc@plt>
   11549:	mov    QWORD PTR [rbx+0xc60],rax
   11550:	test   r12,r12
   11553:	je     11840 <Configure+0x2150>
   11559:	test   rax,rax
   1155c:	je     11828 <Configure+0x2138>
   11562:	mov    r12d,DWORD PTR [rbx+0xc50]
   11569:	test   r12d,r12d
   1156c:	jle    fd48 <Configure+0x658>
   11572:	xor    r12d,r12d
   11575:	lea    r14,[rip+0x59dac]        # 6b328 <maxpos+0x28>
   1157c:	mov    rdx,QWORD PTR [rbx+0xc58]
   11583:	mov    rsi,r14
   11586:	mov    rdi,rbp
   11589:	xor    eax,eax
   1158b:	lea    r13,[r12*4+0x0]
   11593:	add    r12,0x1
   11597:	add    rdx,r13
   1159a:	call   4310 <__isoc99_fscanf@plt>
   1159f:	lea    rsi,[rip+0x59e28]        # 6b3ce <maxpos+0xce>
   115a6:	mov    rdi,rbp
   115a9:	xor    eax,eax
   115ab:	call   4310 <__isoc99_fscanf@plt>
   115b0:	mov    rax,QWORD PTR [rip+0x77001]        # 885b8 <input>
   115b7:	mov    rsi,r14
   115ba:	mov    rdi,rbp
   115bd:	mov    rdx,QWORD PTR [rax+0xc60]
   115c4:	xor    eax,eax
   115c6:	add    rdx,r13
   115c9:	call   4310 <__isoc99_fscanf@plt>
   115ce:	lea    rsi,[rip+0x59df9]        # 6b3ce <maxpos+0xce>
   115d5:	mov    rdi,rbp
   115d8:	xor    eax,eax
   115da:	call   4310 <__isoc99_fscanf@plt>
   115df:	mov    rbx,QWORD PTR [rip+0x76fd2]        # 885b8 <input>
   115e6:	cmp    DWORD PTR [rbx+0xc50],r12d
   115ed:	jg     1157c <Configure+0x1e8c>
   115ef:	jmp    fd48 <Configure+0x658>
   115f4:	mov    rdx,QWORD PTR [rip+0x76fb5]        # 885b0 <img>
   115fb:	mov    ecx,0x2
   11600:	mov    eax,DWORD PTR [rdx+0x11c18]
   11606:	add    eax,DWORD PTR [rbx+0x40]
   11609:	lea    r12d,[rax+0xf]
   1160d:	cmovs  eax,r12d
   11611:	sar    eax,0x4
   11614:	mov    r12d,eax
   11617:	mov    eax,DWORD PTR [rdx+0x11c1c]
   1161d:	add    eax,DWORD PTR [rbx+0x44]
   11620:	mov    edx,eax
   11622:	lea    eax,[rax+0xf]
   11625:	cmovns eax,edx
   11628:	xor    edx,edx
   1162a:	sar    eax,0x4
   1162d:	cmp    QWORD PTR [rbx+0xb40],0x0
   11635:	sete   dl
   11638:	sub    ecx,edx
   1163a:	cdq    
   1163b:	idiv   ecx
   1163d:	movsxd rdi,eax
   11640:	movsxd rax,r12d
   11643:	mov    r13,rdi
   11646:	imul   rdi,rax
   1164a:	call   4460 <malloc@plt>
   1164f:	mov    QWORD PTR [rbx+0xc68],rax
   11656:	test   rax,rax
   11659:	je     117ca <Configure+0x20da>
   1165f:	mov    eax,r12d
   11662:	imul   eax,r13d
   11666:	test   eax,eax
   11668:	jle    fd48 <Configure+0x658>
   1166e:	lea    r14d,[rax-0x1]
   11672:	xor    ebx,ebx
   11674:	lea    r13,[rsp+0x24]
   11679:	lea    r12,[rip+0x59ca8]        # 6b328 <maxpos+0x28>
   11680:	jmp    116a3 <Configure+0x1fb3>
   11682:	lea    rsi,[rip+0x59d45]        # 6b3ce <maxpos+0xce>
   11689:	mov    rdi,rbp
   1168c:	xor    eax,eax
   1168e:	call   4310 <__isoc99_fscanf@plt>
   11693:	lea    rax,[rbx+0x1]
   11697:	cmp    r14,rbx
   1169a:	je     fd48 <Configure+0x658>
   116a0:	mov    rbx,rax
   116a3:	mov    rdx,r13
   116a6:	mov    rsi,r12
   116a9:	mov    rdi,rbp
   116ac:	xor    eax,eax
   116ae:	call   4310 <__isoc99_fscanf@plt>
   116b3:	mov    rax,QWORD PTR [rip+0x76efe]        # 885b8 <input>
   116ba:	mov    edx,DWORD PTR [rsp+0x24]
   116be:	mov    rax,QWORD PTR [rax+0xc68]
   116c5:	mov    BYTE PTR [rax+rbx*1],dl
   116c8:	mov    r9,QWORD PTR [rip+0x76ee9]        # 885b8 <input>
   116cf:	mov    rax,QWORD PTR [r9+0xc68]
   116d6:	movzx  eax,BYTE PTR [rax+rbx*1]
   116da:	cmp    eax,DWORD PTR [r9+0xc50]
   116e1:	jle    11682 <Configure+0x1f92>
   116e3:	add    r9,0xb88
   116ea:	lea    r8,[rip+0x5af9f]        # 6c690 <maxpos+0x1390>
   116f1:	mov    ecx,0x12c
   116f6:	xor    eax,eax
   116f8:	mov    edx,0x1
   116fd:	mov    esi,0x12c
   11702:	lea    rdi,[rip+0xa3897]        # b4fa0 <errortext>
   11709:	call   42c0 <__snprintf_chk@plt>
   1170e:	mov    esi,0x1f4
   11713:	lea    rdi,[rip+0xa3886]        # b4fa0 <errortext>
   1171a:	call   19180 <error>
   1171f:	jmp    11682 <Configure+0x1f92>
   11724:	sub    rsp,0x8
   11728:	mov    ecx,0x12c
   1172d:	mov    edx,0x1
   11732:	xor    eax,eax
   11734:	push   0x90
   11739:	mov    r9d,0x64
   1173f:	lea    r8,[rip+0x5b27a]        # 6c9c0 <maxpos+0x16c0>
   11746:	mov    esi,0x12c
   1174b:	lea    rdi,[rip+0xa384e]        # b4fa0 <errortext>
   11752:	call   42c0 <__snprintf_chk@plt>
   11757:	mov    esi,0x1f4
   1175c:	lea    rdi,[rip+0xa383d]        # b4fa0 <errortext>
   11763:	call   19180 <error>
   11768:	mov    rbx,QWORD PTR [rip+0x76e49]        # 885b8 <input>
   1176f:	pop    rcx
   11770:	pop    rsi
   11771:	mov    eax,DWORD PTR [rbx]
   11773:	jmp    ffe4 <Configure+0x8f4>
   11778:	mov    r9,QWORD PTR [rip+0x76e39]        # 885b8 <input>
   1177f:	mov    ecx,0x12c
   11784:	mov    edx,0x1
   11789:	xor    eax,eax
   1178b:	lea    r8,[rip+0x59c27]        # 6b3b9 <maxpos+0xb9>
   11792:	mov    esi,0x12c
   11797:	lea    rdi,[rip+0xa3802]        # b4fa0 <errortext>
   1179e:	add    r9,0xb88
   117a5:	call   42c0 <__snprintf_chk@plt>
   117aa:	mov    esi,0x1f4
   117af:	lea    rdi,[rip+0xa37ea]        # b4fa0 <errortext>
   117b6:	call   19180 <error>
   117bb:	mov    rcx,QWORD PTR [rip+0x76df6]        # 885b8 <input>
   117c2:	mov    rbx,rcx
   117c5:	jmp    fd5a <Configure+0x66a>
   117ca:	lea    rdi,[rip+0x5ae9f]        # 6c670 <maxpos+0x1370>
   117d1:	call   38210 <no_mem_exit>
   117d6:	jmp    1165f <Configure+0x1f6f>
   117db:	lea    rdi,[rip+0x5ae66]        # 6c648 <maxpos+0x1348>
   117e2:	call   38210 <no_mem_exit>
   117e7:	mov    rbx,QWORD PTR [rip+0x76dca]        # 885b8 <input>
   117ee:	mov    r13d,DWORD PTR [rbx+0xc50]
   117f5:	jmp    11407 <Configure+0x1d17>
   117fa:	mov    ebp,DWORD PTR [rsp+0x1c]
   117fe:	lea    rdi,[rip+0x59b84]        # 6b389 <maxpos+0x89>
   11805:	xor    r15d,r15d
   11808:	call   38210 <no_mem_exit>
   1180d:	jmp    100c4 <Configure+0x9d4>
   11812:	lea    rbp,[rip+0x59b30]        # 6b349 <maxpos+0x49>
   11819:	mov    r13d,0x1
   1181f:	jmp    f7ce <Configure+0xde>
   11824:	nop    DWORD PTR [rax+0x0]
   11828:	lea    rdi,[rip+0x59bc0]        # 6b3ef <maxpos+0xef>
   1182f:	call   38210 <no_mem_exit>
   11834:	mov    rbx,QWORD PTR [rip+0x76d7d]        # 885b8 <input>
   1183b:	jmp    11562 <Configure+0x1e72>
   11840:	lea    rdi,[rip+0x59b8e]        # 6b3d5 <maxpos+0xd5>
   11847:	call   38210 <no_mem_exit>
   1184c:	mov    rbx,QWORD PTR [rip+0x76d65]        # 885b8 <input>
   11853:	mov    rax,QWORD PTR [rbx+0xc60]
   1185a:	jmp    11559 <Configure+0x1e69>
   1185f:	call   4390 <__stack_chk_fail@plt>
   11864:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1186f:	nop

0000000000011870 <CeilLog2>:
   11870:	endbr64 
   11874:	xor    eax,eax
   11876:	sub    edi,0x1
   11879:	je     11890 <CeilLog2+0x20>
   1187b:	nop    DWORD PTR [rax+rax*1+0x0]
   11880:	add    eax,0x1
   11883:	shr    edi,1
   11885:	jne    11880 <CeilLog2+0x10>
   11887:	ret    
   11888:	nop    DWORD PTR [rax+rax*1+0x0]
   11890:	ret    
   11891:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1189c:	nop    DWORD PTR [rax+0x0]

00000000000118a0 <PatchInputNoFrames>:
   118a0:	endbr64 
   118a4:	mov    rdx,QWORD PTR [rip+0x76d0d]        # 885b8 <input>
   118ab:	mov    eax,DWORD PTR [rdx+0xb60]
   118b1:	mov    ecx,DWORD PTR [rdx+0xb64]
   118b7:	lea    esi,[rax+0x1]
   118ba:	mov    eax,DWORD PTR [rdx+0x8]
   118bd:	sub    eax,0x1
   118c0:	imul   eax,esi
   118c3:	add    eax,0x1
   118c6:	mov    DWORD PTR [rdx+0x8],eax
   118c9:	test   ecx,ecx
   118cb:	je     118dc <PatchInputNoFrames+0x3c>
   118cd:	sub    ecx,0x1
   118d0:	imul   ecx,esi
   118d3:	add    ecx,0x1
   118d6:	mov    DWORD PTR [rdx+0xb64],ecx
   118dc:	mov    DWORD PTR [rip+0x77202],eax        # 88ae4 <FirstFrameIn2ndIGOP>
   118e2:	ret    
   118e3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   118ed:	nop    DWORD PTR [rax]

00000000000118f0 <create_context_memory>:
   118f0:	endbr64 
   118f4:	push   r15
   118f6:	push   r14
   118f8:	push   r13
   118fa:	push   r12
   118fc:	push   rbp
   118fd:	push   rbx
   118fe:	sub    rsp,0x8
   11902:	mov    rax,QWORD PTR [rip+0x76ca7]        # 885b0 <img>
   11909:	mov    rdx,QWORD PTR [rip+0x76ca8]        # 885b8 <input>
   11910:	mov    eax,DWORD PTR [rax+0x11b28]
   11916:	cmp    DWORD PTR [rdx+0xd0],0x1
   1191d:	mov    ecx,eax
   1191f:	jne    11927 <create_context_memory+0x37>
   11921:	mov    ecx,DWORD PTR [rdx+0xd4]
   11927:	lea    eax,[rcx+rax*1-0x1]
   1192b:	mov    edi,0x18
   11930:	mov    DWORD PTR [rip+0x78af2],ecx        # 8a428 <num_mb_per_slice>
   11936:	cdq    
   11937:	idiv   ecx
   11939:	mov    DWORD PTR [rip+0x78f09],eax        # 8a848 <number_of_slices>
   1193f:	call   4460 <malloc@plt>
   11944:	mov    QWORD PTR [rip+0x78ef5],rax        # 8a840 <initialized>
   1194b:	test   rax,rax
   1194e:	je     11af3 <create_context_memory+0x203>
   11954:	mov    edi,0x18
   11959:	call   4460 <malloc@plt>
   1195e:	mov    QWORD PTR [rip+0x78abb],rax        # 8a420 <model_number>
   11965:	test   rax,rax
   11968:	je     11b4f <create_context_memory+0x25f>
   1196e:	xor    r12d,r12d
   11971:	lea    r13,[rip+0x5b5a8]        # 6cf20 <maxpos+0x1c20>
   11978:	mov    rbx,QWORD PTR [rip+0x78ec1]        # 8a840 <initialized>
   1197f:	mov    edi,0x20
   11984:	call   4460 <malloc@plt>
   11989:	add    rbx,r12
   1198c:	mov    QWORD PTR [rbx],rax
   1198f:	test   rax,rax
   11992:	je     11b42 <create_context_memory+0x252>
   11998:	mov    rbx,QWORD PTR [rip+0x78a81]        # 8a420 <model_number>
   1199f:	mov    edi,0x20
   119a4:	call   4460 <malloc@plt>
   119a9:	add    rbx,r12
   119ac:	mov    QWORD PTR [rbx],rax
   119af:	test   rax,rax
   119b2:	je     11b31 <create_context_memory+0x241>
   119b8:	xor    ebx,ebx
   119ba:	movsxd rbp,DWORD PTR [rip+0x78e87]        # 8a848 <number_of_slices>
   119c1:	mov    rax,QWORD PTR [rip+0x78e78]        # 8a840 <initialized>
   119c8:	shl    rbp,0x2
   119cc:	mov    r14,QWORD PTR [rax+r12*1]
   119d0:	mov    rdi,rbp
   119d3:	call   4460 <malloc@plt>
   119d8:	add    r14,rbx
   119db:	mov    QWORD PTR [r14],rax
   119de:	test   rax,rax
   119e1:	je     11b19 <create_context_memory+0x229>
   119e7:	mov    rax,QWORD PTR [rip+0x78a32]        # 8a420 <model_number>
   119ee:	mov    rdi,rbp
   119f1:	mov    r14,QWORD PTR [rax+r12*1]
   119f5:	call   4460 <malloc@plt>
   119fa:	add    r14,rbx
   119fd:	mov    QWORD PTR [r14],rax
   11a00:	test   rax,rax
   11a03:	je     11b08 <create_context_memory+0x218>
   11a09:	add    rbx,0x8
   11a0d:	cmp    rbx,0x20
   11a11:	jne    119ba <create_context_memory+0xca>
   11a13:	add    r12,0x8
   11a17:	cmp    r12,0x18
   11a1b:	jne    11978 <create_context_memory+0x88>
   11a21:	mov    rsi,QWORD PTR [rip+0x78e18]        # 8a840 <initialized>
   11a28:	lea    rdi,[rsi+0x18]
   11a2c:	xor    ecx,ecx
   11a2e:	mov    eax,DWORD PTR [rip+0x78e14]        # 8a848 <number_of_slices>
   11a34:	test   eax,eax
   11a36:	jle    11a5b <create_context_memory+0x16b>
   11a38:	mov    rax,QWORD PTR [rsi]
   11a3b:	mov    rdx,QWORD PTR [rax+rcx*1]
   11a3f:	xor    eax,eax
   11a41:	nop    DWORD PTR [rax+0x0]
   11a48:	mov    DWORD PTR [rdx+rax*4],0x0
   11a4f:	add    rax,0x1
   11a53:	cmp    DWORD PTR [rip+0x78def],eax        # 8a848 <number_of_slices>
   11a59:	jg     11a48 <create_context_memory+0x158>
   11a5b:	add    rcx,0x8
   11a5f:	cmp    rcx,0x20
   11a63:	jne    11a2e <create_context_memory+0x13e>
   11a65:	add    rsi,0x8
   11a69:	cmp    rdi,rsi
   11a6c:	jne    11a2c <create_context_memory+0x13c>
   11a6e:	lea    r12,[rip+0x766cb]        # 88140 <probability>
   11a75:	lea    r14,[rip+0x78dbc]        # 8a838 <entropy+0x3f8>
   11a7c:	mov    ebx,0x3f8
   11a81:	lea    r15,[r12+0x3f8]
   11a89:	lea    r13,[r14-0x3f8]
   11a90:	movsd  xmm0,QWORD PTR [rip+0x60d30]        # 727c8 <INIT_MB_TYPE_I+0x108>
   11a98:	subsd  xmm0,QWORD PTR [r12+rbx*1]
   11a9e:	mov    rbp,rbx
   11aa1:	neg    rbp
   11aa4:	movsd  QWORD PTR [r15+rbp*1],xmm0
   11aaa:	call   4420 <log10@plt>
   11aaf:	divsd  xmm0,QWORD PTR [rip+0x60d19]        # 727d0 <INIT_MB_TYPE_I+0x110>
   11ab7:	movsd  QWORD PTR [r14+rbp*1],xmm0
   11abd:	movsd  xmm0,QWORD PTR [r12+rbx*1]
   11ac3:	call   4420 <log10@plt>
   11ac8:	divsd  xmm0,QWORD PTR [rip+0x60d00]        # 727d0 <INIT_MB_TYPE_I+0x110>
   11ad0:	movsd  QWORD PTR [r13+rbx*1+0x0],xmm0
   11ad7:	sub    rbx,0x8
   11adb:	cmp    rbx,0x1f8
   11ae2:	jne    11a90 <create_context_memory+0x1a0>
   11ae4:	add    rsp,0x8
   11ae8:	pop    rbx
   11ae9:	pop    rbp
   11aea:	pop    r12
   11aec:	pop    r13
   11aee:	pop    r14
   11af0:	pop    r15
   11af2:	ret    
   11af3:	lea    rdi,[rip+0x5b426]        # 6cf20 <maxpos+0x1c20>
   11afa:	call   38210 <no_mem_exit>
   11aff:	jmp    11954 <create_context_memory+0x64>
   11b04:	nop    DWORD PTR [rax+0x0]
   11b08:	lea    rdi,[rip+0x5b439]        # 6cf48 <maxpos+0x1c48>
   11b0f:	call   38210 <no_mem_exit>
   11b14:	jmp    11a09 <create_context_memory+0x119>
   11b19:	mov    rdi,r13
   11b1c:	call   38210 <no_mem_exit>
   11b21:	movsxd rbp,DWORD PTR [rip+0x78d20]        # 8a848 <number_of_slices>
   11b28:	shl    rbp,0x2
   11b2c:	jmp    119e7 <create_context_memory+0xf7>
   11b31:	lea    rdi,[rip+0x5b410]        # 6cf48 <maxpos+0x1c48>
   11b38:	call   38210 <no_mem_exit>
   11b3d:	jmp    119b8 <create_context_memory+0xc8>
   11b42:	mov    rdi,r13
   11b45:	call   38210 <no_mem_exit>
   11b4a:	jmp    11998 <create_context_memory+0xa8>
   11b4f:	lea    rdi,[rip+0x5b3f2]        # 6cf48 <maxpos+0x1c48>
   11b56:	call   38210 <no_mem_exit>
   11b5b:	jmp    1196e <create_context_memory+0x7e>

0000000000011b60 <free_context_memory>:
   11b60:	endbr64 
   11b64:	push   rbp
   11b65:	xor    ebp,ebp
   11b67:	push   rbx
   11b68:	sub    rsp,0x8
   11b6c:	xor    ebx,ebx
   11b6e:	mov    rax,QWORD PTR [rip+0x78ccb]        # 8a840 <initialized>
   11b75:	mov    rax,QWORD PTR [rax+rbp*1]
   11b79:	mov    rdi,QWORD PTR [rax+rbx*1]
   11b7d:	call   42d0 <free@plt>
   11b82:	mov    rax,QWORD PTR [rip+0x78897]        # 8a420 <model_number>
   11b89:	mov    rax,QWORD PTR [rax+rbp*1]
   11b8d:	mov    rdi,QWORD PTR [rax+rbx*1]
   11b91:	add    rbx,0x8
   11b95:	call   42d0 <free@plt>
   11b9a:	cmp    rbx,0x20
   11b9e:	jne    11b6e <free_context_memory+0xe>
   11ba0:	mov    rax,QWORD PTR [rip+0x78c99]        # 8a840 <initialized>
   11ba7:	mov    rdi,QWORD PTR [rax+rbp*1]
   11bab:	call   42d0 <free@plt>
   11bb0:	mov    rax,QWORD PTR [rip+0x78869]        # 8a420 <model_number>
   11bb7:	mov    rdi,QWORD PTR [rax+rbp*1]
   11bbb:	add    rbp,0x8
   11bbf:	call   42d0 <free@plt>
   11bc4:	cmp    rbp,0x18
   11bc8:	jne    11b6c <free_context_memory+0xc>
   11bca:	mov    rdi,QWORD PTR [rip+0x78c6f]        # 8a840 <initialized>
   11bd1:	call   42d0 <free@plt>
   11bd6:	mov    rdi,QWORD PTR [rip+0x78843]        # 8a420 <model_number>
   11bdd:	add    rsp,0x8
   11be1:	pop    rbx
   11be2:	pop    rbp
   11be3:	jmp    42d0 <free@plt>
   11be8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011bf0 <SetCtxModelNumber>:
   11bf0:	endbr64 
   11bf4:	mov    rcx,QWORD PTR [rip+0x769b5]        # 885b0 <img>
   11bfb:	movsxd rsi,DWORD PTR [rcx+0x18]
   11bff:	cmp    esi,0x2
   11c02:	je     11ca0 <SetCtxModelNumber+0xb0>
   11c08:	mov    rax,QWORD PTR [rip+0x769a9]        # 885b8 <input>
   11c0f:	mov    r11d,DWORD PTR [rax+0xc8c]
   11c16:	test   r11d,r11d
   11c19:	je     11cb0 <SetCtxModelNumber+0xc0>
   11c1f:	mov    rax,QWORD PTR [rcx+0x3750]
   11c26:	movsxd rdi,DWORD PTR [rcx+0x11afc]
   11c2d:	mov    eax,DWORD PTR [rax+0xc]
   11c30:	cdq    
   11c31:	idiv   DWORD PTR [rip+0x787f1]        # 8a428 <num_mb_per_slice>
   11c37:	mov    rdx,QWORD PTR [rip+0x78c02]        # 8a840 <initialized>
   11c3e:	mov    rdx,QWORD PTR [rdx+rdi*8]
   11c42:	mov    r8,QWORD PTR [rdx+rsi*8]
   11c46:	movsxd rdx,eax
   11c49:	mov    r10d,DWORD PTR [r8+rdx*4]
   11c4d:	lea    r9,[rdx*4+0x0]
   11c55:	test   r10d,r10d
   11c58:	je     11c78 <SetCtxModelNumber+0x88>
   11c5a:	mov    rax,QWORD PTR [rip+0x787bf]        # 8a420 <model_number>
   11c61:	mov    rax,QWORD PTR [rax+rdi*8]
   11c65:	mov    rax,QWORD PTR [rax+rsi*8]
   11c69:	mov    eax,DWORD PTR [rax+rdx*4]
   11c6c:	mov    DWORD PTR [rcx+0x11b48],eax
   11c72:	ret    
   11c73:	nop    DWORD PTR [rax+rax*1+0x0]
   11c78:	test   eax,eax
   11c7a:	je     11ca0 <SetCtxModelNumber+0xb0>
   11c7c:	mov    eax,DWORD PTR [r8+r9*1-0x4]
   11c81:	test   eax,eax
   11c83:	je     11ca0 <SetCtxModelNumber+0xb0>
   11c85:	mov    rax,QWORD PTR [rip+0x78794]        # 8a420 <model_number>
   11c8c:	mov    rax,QWORD PTR [rax+rdi*8]
   11c90:	mov    rax,QWORD PTR [rax+rsi*8]
   11c94:	mov    eax,DWORD PTR [rax+r9*1-0x4]
   11c99:	mov    DWORD PTR [rcx+0x11b48],eax
   11c9f:	ret    
   11ca0:	mov    DWORD PTR [rcx+0x11b48],0x0
   11caa:	ret    
   11cab:	nop    DWORD PTR [rax+rax*1+0x0]
   11cb0:	mov    eax,DWORD PTR [rax+0xc90]
   11cb6:	mov    DWORD PTR [rcx+0x11b48],eax
   11cbc:	ret    
   11cbd:	nop    DWORD PTR [rax]

0000000000011cc0 <init_contexts>:
   11cc0:	endbr64 
   11cc4:	push   r15
   11cc6:	push   r14
   11cc8:	push   r13
   11cca:	lea    r13,[rip+0x609ef]        # 726c0 <INIT_MB_TYPE_I>
   11cd1:	push   r12
   11cd3:	push   rbp
   11cd4:	lea    rbp,[rip+0x606c5]        # 723a0 <INIT_MB_TYPE_P>
   11cdb:	push   rbx
   11cdc:	xor    ebx,ebx
   11cde:	sub    rsp,0x18
   11ce2:	mov    rcx,QWORD PTR [rip+0x768c7]        # 885b0 <img>
   11ce9:	mov    rax,QWORD PTR [rcx+0x3750]
   11cf0:	mov    r15,QWORD PTR [rax+0x20]
   11cf4:	mov    rax,QWORD PTR [rax+0x28]
   11cf8:	mov    QWORD PTR [rsp+0x8],r15
   11cfd:	mov    QWORD PTR [rsp],rax
   11d01:	mov    r12,r15
   11d04:	xor    r14d,r14d
   11d07:	jmp    11d30 <init_contexts+0x70>
   11d09:	nop    DWORD PTR [rax+0x0]
   11d10:	add    rsi,rbp
   11d13:	mov    rdi,r12
   11d16:	call   5740 <biari_init_context>
   11d1b:	add    r14,0x1
   11d1f:	mov    rcx,QWORD PTR [rip+0x7688a]        # 885b0 <img>
   11d26:	add    r12,0x10
   11d2a:	cmp    r14,0xb
   11d2e:	je     11d60 <init_contexts+0xa0>
   11d30:	movsxd rdi,DWORD PTR [rcx+0x11b48]
   11d37:	mov    rsi,rdi
   11d3a:	shl    rsi,0x5
   11d3e:	add    rsi,rdi
   11d41:	lea    rdi,[rbx+r14*1]
   11d45:	add    rsi,rdi
   11d48:	shl    rsi,0x3
   11d4c:	cmp    DWORD PTR [rcx+0x18],0x2
   11d50:	jne    11d10 <init_contexts+0x50>
   11d52:	add    rsi,r13
   11d55:	mov    rdi,r12
   11d58:	call   5740 <biari_init_context>
   11d5d:	jmp    11d1b <init_contexts+0x5b>
   11d5f:	nop
   11d60:	add    rbx,0xb
   11d64:	add    r15,0xb0
   11d6b:	cmp    rbx,0x21
   11d6f:	jne    11d01 <init_contexts+0x41>
   11d71:	mov    rax,QWORD PTR [rsp+0x8]
   11d76:	xor    ebx,ebx
   11d78:	lea    rbp,[rip+0x603c1]        # 72140 <INIT_B8_TYPE_P>
   11d7f:	lea    r13,[rip+0x6057a]        # 72300 <INIT_B8_TYPE_I>
   11d86:	lea    r12,[rax+0x210]
   11d8d:	mov    r15,r12
   11d90:	xor    r14d,r14d
   11d93:	jmp    11db8 <init_contexts+0xf8>
   11d95:	nop    DWORD PTR [rax]
   11d98:	add    rsi,rbp
   11d9b:	mov    rdi,r15
   11d9e:	call   5740 <biari_init_context>
   11da3:	add    r14,0x1
   11da7:	mov    rcx,QWORD PTR [rip+0x76802]        # 885b0 <img>
   11dae:	add    r15,0x10
   11db2:	cmp    r14,0x9
   11db6:	je     11de8 <init_contexts+0x128>
   11db8:	movsxd rsi,DWORD PTR [rcx+0x11b48]
   11dbf:	lea    rdi,[rsi+rsi*8]
   11dc3:	lea    rsi,[rbx+r14*1]
   11dc7:	lea    rsi,[rsi+rdi*2]
   11dcb:	shl    rsi,0x3
   11dcf:	cmp    DWORD PTR [rcx+0x18],0x2
   11dd3:	jne    11d98 <init_contexts+0xd8>
   11dd5:	add    rsi,r13
   11dd8:	mov    rdi,r15
   11ddb:	call   5740 <biari_init_context>
   11de0:	jmp    11da3 <init_contexts+0xe3>
   11de2:	nop    WORD PTR [rax+rax*1+0x0]
   11de8:	add    rbx,0x9
   11dec:	add    r12,0x90
   11df3:	cmp    rbx,0x12
   11df7:	jne    11d8d <init_contexts+0xcd>
   11df9:	mov    rax,QWORD PTR [rsp+0x8]
   11dfe:	xor    ebx,ebx
   11e00:	lea    rbp,[rip+0x600b9]        # 71ec0 <INIT_MV_RES_P>
   11e07:	lea    r13,[rip+0x60292]        # 720a0 <INIT_MV_RES_I>
   11e0e:	lea    r12,[rax+0x330]
   11e15:	mov    r15,r12
   11e18:	xor    r14d,r14d
   11e1b:	jmp    11e40 <init_contexts+0x180>
   11e1d:	nop    DWORD PTR [rax]
   11e20:	add    rsi,rbp
   11e23:	mov    rdi,r15
   11e26:	call   5740 <biari_init_context>
   11e2b:	add    r14,0x1
   11e2f:	mov    rcx,QWORD PTR [rip+0x7677a]        # 885b0 <img>
   11e36:	add    r15,0x10
   11e3a:	cmp    r14,0xa
   11e3e:	je     11e70 <init_contexts+0x1b0>
   11e40:	movsxd rsi,DWORD PTR [rcx+0x11b48]
   11e47:	lea    rdi,[rsi+rsi*4]
   11e4b:	lea    rsi,[rbx+r14*1]
   11e4f:	lea    rsi,[rsi+rdi*4]
   11e53:	shl    rsi,0x3
   11e57:	cmp    DWORD PTR [rcx+0x18],0x2
   11e5b:	jne    11e20 <init_contexts+0x160>
   11e5d:	add    rsi,r13
   11e60:	mov    rdi,r15
   11e63:	call   5740 <biari_init_context>
   11e68:	jmp    11e2b <init_contexts+0x16b>
   11e6a:	nop    WORD PTR [rax+rax*1+0x0]
   11e70:	add    rbx,0xa
   11e74:	add    r12,0xa0
   11e7b:	cmp    rbx,0x14
   11e7f:	jne    11e15 <init_contexts+0x155>
   11e81:	mov    rax,QWORD PTR [rsp+0x8]
   11e86:	xor    ebx,ebx
   11e88:	lea    rbp,[rip+0x5feb1]        # 71d40 <INIT_REF_NO_P>
   11e8f:	lea    r12,[rip+0x5ffca]        # 71e60 <INIT_REF_NO_I>
   11e96:	lea    r13,[rax+0x470]
   11e9d:	mov    r15,r13
   11ea0:	xor    r14d,r14d
   11ea3:	jmp    11ec8 <init_contexts+0x208>
   11ea5:	nop    DWORD PTR [rax]
   11ea8:	add    rsi,rbp
   11eab:	mov    rdi,r15
   11eae:	call   5740 <biari_init_context>
   11eb3:	add    r14,0x1
   11eb7:	mov    rcx,QWORD PTR [rip+0x766f2]        # 885b0 <img>
   11ebe:	add    r15,0x10
   11ec2:	cmp    r14,0x6
   11ec6:	je     11ef8 <init_contexts+0x238>
   11ec8:	movsxd rsi,DWORD PTR [rcx+0x11b48]
   11ecf:	lea    rdi,[rsi+rsi*2]
   11ed3:	lea    rsi,[rbx+r14*1]
   11ed7:	lea    rsi,[rsi+rdi*4]
   11edb:	shl    rsi,0x3
   11edf:	cmp    DWORD PTR [rcx+0x18],0x2
   11ee3:	jne    11ea8 <init_contexts+0x1e8>
   11ee5:	add    rsi,r12
   11ee8:	mov    rdi,r15
   11eeb:	call   5740 <biari_init_context>
   11ef0:	jmp    11eb3 <init_contexts+0x1f3>
   11ef2:	nop    WORD PTR [rax+rax*1+0x0]
   11ef8:	add    rbx,0x6
   11efc:	add    r13,0x60
   11f00:	cmp    rbx,0xc
   11f04:	jne    11e9d <init_contexts+0x1dd>
   11f06:	mov    rax,QWORD PTR [rsp+0x8]
   11f0b:	xor    r13d,r13d
   11f0e:	lea    rbx,[rip+0x5fd2b]        # 71c40 <INIT_DELTA_QP_P>
   11f15:	lea    rbp,[rip+0x5fd84]        # 71ca0 <INIT_DELTA_QP_I>
   11f1c:	lea    r15,[rax+0x530]
   11f23:	movsxd rax,DWORD PTR [rcx+0x11b48]
   11f2a:	lea    rax,[r13+rax*4+0x0]
   11f2f:	shl    rax,0x3
   11f33:	cmp    DWORD PTR [rcx+0x18],0x2
   11f37:	je     12542 <init_contexts+0x882>
   11f3d:	lea    rsi,[rax+rbx*1]
   11f41:	mov    rdi,r15
   11f44:	call   5740 <biari_init_context>
   11f49:	add    r13,0x1
   11f4d:	mov    rcx,QWORD PTR [rip+0x7665c]        # 885b0 <img>
   11f54:	add    r15,0x10
   11f58:	cmp    r13,0x4
   11f5c:	jne    11f23 <init_contexts+0x263>
   11f5e:	mov    rax,QWORD PTR [rsp+0x8]
   11f63:	xor    r13d,r13d
   11f66:	lea    rbx,[rip+0x5fc53]        # 71bc0 <INIT_MB_AFF_P>
   11f6d:	lea    rbp,[rip+0x5fcac]        # 71c20 <INIT_MB_AFF_I>
   11f74:	lea    r15,[rax+0x570]
   11f7b:	movsxd rax,DWORD PTR [rcx+0x11b48]
   11f82:	lea    rax,[r13+rax*4+0x0]
   11f87:	shl    rax,0x3
   11f8b:	cmp    DWORD PTR [rcx+0x18],0x2
   11f8f:	je     12531 <init_contexts+0x871>
   11f95:	lea    rsi,[rax+rbx*1]
   11f99:	mov    rdi,r15
   11f9c:	call   5740 <biari_init_context>
   11fa1:	add    r13,0x1
   11fa5:	mov    rcx,QWORD PTR [rip+0x76604]        # 885b0 <img>
   11fac:	add    r15,0x10
   11fb0:	cmp    r13,0x4
   11fb4:	jne    11f7b <init_contexts+0x2bb>
   11fb6:	mov    r12,QWORD PTR [rsp+0x8]
   11fbb:	xor    r13d,r13d
   11fbe:	lea    rbx,[rip+0x5fcfb]        # 71cc0 <INIT_TRANSFORM_SIZE_P>
   11fc5:	lea    rbp,[rip+0x5fd44]        # 71d10 <INIT_TRANSFORM_SIZE_I>
   11fcc:	add    r12,0x5b0
   11fd3:	movsxd rax,DWORD PTR [rcx+0x11b48]
   11fda:	lea    rax,[rax+rax*2]
   11fde:	add    rax,r13
   11fe1:	shl    rax,0x3
   11fe5:	cmp    DWORD PTR [rcx+0x18],0x2
   11fe9:	je     12553 <init_contexts+0x893>
   11fef:	lea    rsi,[rax+rbx*1]
   11ff3:	mov    rdi,r12
   11ff6:	call   5740 <biari_init_context>
   11ffb:	add    r13,0x1
   11fff:	mov    rcx,QWORD PTR [rip+0x765aa]        # 885b0 <img>
   12006:	add    r12,0x10
   1200a:	cmp    r13,0x3
   1200e:	jne    11fd3 <init_contexts+0x313>
   12010:	movsxd rax,DWORD PTR [rcx+0x11b48]
   12017:	shl    rax,0x4
   1201b:	cmp    DWORD PTR [rcx+0x18],0x2
   1201f:	je     12573 <init_contexts+0x8b3>
   12025:	lea    rsi,[rip+0x5fb54]        # 71b80 <INIT_IPR_P>
   1202c:	mov    rdi,QWORD PTR [rsp]
   12030:	add    rsi,rax
   12033:	call   5740 <biari_init_context>
   12038:	mov    rdx,QWORD PTR [rip+0x76571]        # 885b0 <img>
   1203f:	mov    rax,QWORD PTR [rsp]
   12043:	lea    rdi,[rax+0x10]
   12047:	movsxd rax,DWORD PTR [rdx+0x11b48]
   1204e:	lea    rax,[rax+rax*1+0x1]
   12053:	shl    rax,0x3
   12057:	cmp    DWORD PTR [rdx+0x18],0x2
   1205b:	je     1258b <init_contexts+0x8cb>
   12061:	lea    rsi,[rip+0x5fb18]        # 71b80 <INIT_IPR_P>
   12068:	add    rsi,rax
   1206b:	call   5740 <biari_init_context>
   12070:	mov    rbx,QWORD PTR [rsp]
   12074:	mov    rax,QWORD PTR [rip+0x76535]        # 885b0 <img>
   1207b:	xor    r12d,r12d
   1207e:	lea    rbp,[rip+0x5fadb]        # 71b60 <INIT_CIPR_I>
   12085:	lea    r13,[rbx+0x20]
   12089:	lea    rbx,[rip+0x5fa70]        # 71b00 <INIT_CIPR_P>
   12090:	movsxd rdx,DWORD PTR [rax+0x11b48]
   12097:	lea    rdx,[r12+rdx*4]
   1209b:	shl    rdx,0x3
   1209f:	cmp    DWORD PTR [rax+0x18],0x2
   120a3:	je     12520 <init_contexts+0x860>
   120a9:	lea    rsi,[rdx+rbx*1]
   120ad:	mov    rdi,r13
   120b0:	call   5740 <biari_init_context>
   120b5:	add    r12,0x1
   120b9:	mov    rax,QWORD PTR [rip+0x764f0]        # 885b0 <img>
   120c0:	add    r13,0x10
   120c4:	cmp    r12,0x4
   120c8:	jne    12090 <init_contexts+0x3d0>
   120ca:	mov    rbx,QWORD PTR [rsp]
   120ce:	lea    r12,[rip+0x5f8ab]        # 71980 <INIT_CBP_P>
   120d5:	lea    r13,[rip+0x5f9c4]        # 71aa0 <INIT_CBP_I>
   120dc:	lea    rbp,[rbx+0x60]
   120e0:	xor    ebx,ebx
   120e2:	mov    r14,rbp
   120e5:	xor    r15d,r15d
   120e8:	movsxd rdx,DWORD PTR [rax+0x11b48]
   120ef:	lea    rdx,[rdx+rdx*2]
   120f3:	add    rdx,rbx
   120f6:	lea    rsi,[r15+rdx*4]
   120fa:	shl    rsi,0x3
   120fe:	cmp    DWORD PTR [rax+0x18],0x2
   12102:	je     12510 <init_contexts+0x850>
   12108:	add    rsi,r12
   1210b:	mov    rdi,r14
   1210e:	call   5740 <biari_init_context>
   12113:	add    r15,0x1
   12117:	mov    rax,QWORD PTR [rip+0x76492]        # 885b0 <img>
   1211e:	add    r14,0x10
   12122:	cmp    r15,0x4
   12126:	jne    120e8 <init_contexts+0x428>
   12128:	add    rbx,0x1
   1212c:	add    rbp,0x40
   12130:	cmp    rbx,0x3
   12134:	jne    120e2 <init_contexts+0x422>
   12136:	mov    rbx,QWORD PTR [rsp]
   1213a:	lea    r12,[rip+0x5f43f]        # 71580 <INIT_BCBP_P>
   12141:	lea    r13,[rip+0x5f738]        # 71880 <INIT_BCBP_I>
   12148:	lea    rbp,[rbx+0x120]
   1214f:	xor    ebx,ebx
   12151:	nop    DWORD PTR [rax+0x0]
   12158:	mov    r14,rbp
   1215b:	xor    r15d,r15d
   1215e:	movsxd rcx,DWORD PTR [rax+0x11b48]
   12165:	lea    rcx,[rbx+rcx*8]
   12169:	lea    rsi,[r15+rcx*4]
   1216d:	shl    rsi,0x3
   12171:	cmp    DWORD PTR [rax+0x18],0x2
   12175:	je     12220 <init_contexts+0x560>
   1217b:	add    rsi,r12
   1217e:	mov    rdi,r14
   12181:	call   5740 <biari_init_context>
   12186:	add    r15,0x1
   1218a:	mov    rax,QWORD PTR [rip+0x7641f]        # 885b0 <img>
   12191:	add    r14,0x10
   12195:	cmp    r15,0x4
   12199:	jne    1215e <init_contexts+0x49e>
   1219b:	add    rbx,0x1
   1219f:	add    rbp,0x40
   121a3:	cmp    rbx,0xa
   121a7:	jne    12158 <init_contexts+0x498>
   121a9:	mov    rbx,QWORD PTR [rsp]
   121ad:	lea    rbp,[rip+0x5e4cc]        # 70680 <INIT_MAP_P>
   121b4:	lea    r12,[rip+0x5f005]        # 711c0 <INIT_MAP_I>
   121bb:	lea    r13,[rbx+0x3a0]
   121c2:	xor    ebx,ebx
   121c4:	nop    DWORD PTR [rax+0x0]
   121c8:	mov    r14,r13
   121cb:	xor    r15d,r15d
   121ce:	jmp    121f0 <init_contexts+0x530>
   121d0:	add    rsi,rbp
   121d3:	mov    rdi,r14
   121d6:	call   5740 <biari_init_context>
   121db:	add    r15,0x1
   121df:	mov    rax,QWORD PTR [rip+0x763ca]        # 885b0 <img>
   121e6:	add    r14,0x10
   121ea:	cmp    r15,0xf
   121ee:	je     12230 <init_contexts+0x570>
   121f0:	movsxd rsi,DWORD PTR [rax+0x11b48]
   121f7:	mov    rdx,rsi
   121fa:	shl    rdx,0x4
   121fe:	sub    rdx,rsi
   12201:	lea    rsi,[rbx+r15*1]
   12205:	lea    rsi,[rsi+rdx*8]
   12209:	shl    rsi,0x3
   1220d:	cmp    DWORD PTR [rax+0x18],0x2
   12211:	jne    121d0 <init_contexts+0x510>
   12213:	add    rsi,r12
   12216:	mov    rdi,r14
   12219:	call   5740 <biari_init_context>
   1221e:	jmp    121db <init_contexts+0x51b>
   12220:	add    rsi,r13
   12223:	mov    rdi,r14
   12226:	call   5740 <biari_init_context>
   1222b:	jmp    12186 <init_contexts+0x4c6>
   12230:	add    rbx,0xf
   12234:	add    r13,0xf0
   1223b:	cmp    rbx,0x96
   12242:	jne    121c8 <init_contexts+0x508>
   12248:	mov    rbx,QWORD PTR [rsp]
   1224c:	lea    rbp,[rip+0x5d52d]        # 6f780 <INIT_LAST_P>
   12253:	lea    r12,[rip+0x5e066]        # 702c0 <INIT_LAST_I>
   1225a:	lea    r13,[rbx+0xd00]
   12261:	xor    ebx,ebx
   12263:	nop    DWORD PTR [rax+rax*1+0x0]
   12268:	mov    r14,r13
   1226b:	xor    r15d,r15d
   1226e:	jmp    12290 <init_contexts+0x5d0>
   12270:	add    rsi,rbp
   12273:	mov    rdi,r14
   12276:	call   5740 <biari_init_context>
   1227b:	add    r15,0x1
   1227f:	mov    rax,QWORD PTR [rip+0x7632a]        # 885b0 <img>
   12286:	add    r14,0x10
   1228a:	cmp    r15,0xf
   1228e:	je     122c0 <init_contexts+0x600>
   12290:	movsxd rsi,DWORD PTR [rax+0x11b48]
   12297:	mov    rdx,rsi
   1229a:	shl    rdx,0x4
   1229e:	sub    rdx,rsi
   122a1:	lea    rsi,[rbx+r15*1]
   122a5:	lea    rsi,[rsi+rdx*8]
   122a9:	shl    rsi,0x3
   122ad:	cmp    DWORD PTR [rax+0x18],0x2
   122b1:	jne    12270 <init_contexts+0x5b0>
   122b3:	add    rsi,r12
   122b6:	mov    rdi,r14
   122b9:	call   5740 <biari_init_context>
   122be:	jmp    1227b <init_contexts+0x5bb>
   122c0:	add    rbx,0xf
   122c4:	add    r13,0xf0
   122cb:	cmp    rbx,0x96
   122d2:	jne    12268 <init_contexts+0x5a8>
   122d4:	mov    rbx,QWORD PTR [rsp]
   122d8:	lea    rbp,[rip+0x5cfa1]        # 6f280 <INIT_ONE_P>
   122df:	lea    r13,[rip+0x5d35a]        # 6f640 <INIT_ONE_I>
   122e6:	lea    r12,[rbx+0x1660]
   122ed:	xor    ebx,ebx
   122ef:	nop
   122f0:	mov    r14,r12
   122f3:	xor    r15d,r15d
   122f6:	movsxd rcx,DWORD PTR [rax+0x11b48]
   122fd:	lea    rsi,[rcx+rcx*4]
   12301:	lea    rcx,[rbx+r15*1]
   12305:	lea    rsi,[rcx+rsi*8]
   12309:	shl    rsi,0x3
   1230d:	cmp    DWORD PTR [rax+0x18],0x2
   12311:	je     12430 <init_contexts+0x770>
   12317:	add    rsi,rbp
   1231a:	mov    rdi,r14
   1231d:	call   5740 <biari_init_context>
   12322:	add    r15,0x1
   12326:	mov    rax,QWORD PTR [rip+0x76283]        # 885b0 <img>
   1232d:	add    r14,0x10
   12331:	cmp    r15,0x5
   12335:	jne    122f6 <init_contexts+0x636>
   12337:	add    rbx,0x5
   1233b:	add    r12,0x50
   1233f:	cmp    rbx,0x32
   12343:	jne    122f0 <init_contexts+0x630>
   12345:	mov    rbx,QWORD PTR [rsp]
   12349:	lea    rbp,[rip+0x5ca30]        # 6ed80 <INIT_ABS_P>
   12350:	lea    r13,[rip+0x5cde9]        # 6f140 <INIT_ABS_I>
   12357:	lea    r12,[rbx+0x1980]
   1235e:	xor    ebx,ebx
   12360:	mov    r14,r12
   12363:	xor    r15d,r15d
   12366:	movsxd rcx,DWORD PTR [rax+0x11b48]
   1236d:	lea    rsi,[rcx+rcx*4]
   12371:	lea    rcx,[rbx+r15*1]
   12375:	lea    rsi,[rcx+rsi*8]
   12379:	shl    rsi,0x3
   1237d:	cmp    DWORD PTR [rax+0x18],0x2
   12381:	je     12440 <init_contexts+0x780>
   12387:	add    rsi,rbp
   1238a:	mov    rdi,r14
   1238d:	call   5740 <biari_init_context>
   12392:	add    r15,0x1
   12396:	mov    rax,QWORD PTR [rip+0x76213]        # 885b0 <img>
   1239d:	add    r14,0x10
   123a1:	cmp    r15,0x5
   123a5:	jne    12366 <init_contexts+0x6a6>
   123a7:	add    rbx,0x5
   123ab:	add    r12,0x50
   123af:	cmp    rbx,0x32
   123b3:	jne    12360 <init_contexts+0x6a0>
   123b5:	mov    rbx,QWORD PTR [rsp]
   123b9:	lea    rbp,[rip+0x5bac0]        # 6de80 <INIT_FLD_MAP_P>
   123c0:	lea    r12,[rip+0x5c5f9]        # 6e9c0 <INIT_FLD_MAP_I>
   123c7:	lea    r13,[rbx+0x1ca0]
   123ce:	xor    ebx,ebx
   123d0:	mov    r14,r13
   123d3:	xor    r15d,r15d
   123d6:	jmp    12400 <init_contexts+0x740>
   123d8:	nop    DWORD PTR [rax+rax*1+0x0]
   123e0:	add    rsi,rbp
   123e3:	mov    rdi,r14
   123e6:	call   5740 <biari_init_context>
   123eb:	add    r15,0x1
   123ef:	mov    rax,QWORD PTR [rip+0x761ba]        # 885b0 <img>
   123f6:	add    r14,0x10
   123fa:	cmp    r15,0xf
   123fe:	je     12450 <init_contexts+0x790>
   12400:	movsxd rsi,DWORD PTR [rax+0x11b48]
   12407:	mov    rdx,rsi
   1240a:	shl    rdx,0x4
   1240e:	sub    rdx,rsi
   12411:	lea    rsi,[rbx+r15*1]
   12415:	lea    rsi,[rsi+rdx*8]
   12419:	shl    rsi,0x3
   1241d:	cmp    DWORD PTR [rax+0x18],0x2
   12421:	jne    123e0 <init_contexts+0x720>
   12423:	add    rsi,r12
   12426:	mov    rdi,r14
   12429:	call   5740 <biari_init_context>
   1242e:	jmp    123eb <init_contexts+0x72b>
   12430:	add    rsi,r13
   12433:	mov    rdi,r14
   12436:	call   5740 <biari_init_context>
   1243b:	jmp    12322 <init_contexts+0x662>
   12440:	add    rsi,r13
   12443:	mov    rdi,r14
   12446:	call   5740 <biari_init_context>
   1244b:	jmp    12392 <init_contexts+0x6d2>
   12450:	add    rbx,0xf
   12454:	add    r13,0xf0
   1245b:	cmp    rbx,0x96
   12462:	jne    123d0 <init_contexts+0x710>
   12468:	mov    r13,QWORD PTR [rsp]
   1246c:	xor    ebx,ebx
   1246e:	lea    rbp,[rip+0x5ab0b]        # 6cf80 <INIT_FLD_LAST_P>
   12475:	lea    r12,[rip+0x5b644]        # 6dac0 <INIT_FLD_LAST_I>
   1247c:	add    r13,0x2600
   12483:	nop    DWORD PTR [rax+rax*1+0x0]
   12488:	mov    r15,r13
   1248b:	xor    r14d,r14d
   1248e:	jmp    124b0 <init_contexts+0x7f0>
   12490:	mov    rdi,r15
   12493:	add    rsi,rbp
   12496:	add    r14,0x1
   1249a:	add    r15,0x10
   1249e:	call   5740 <biari_init_context>
   124a3:	cmp    r14,0xf
   124a7:	je     124ec <init_contexts+0x82c>
   124a9:	mov    rax,QWORD PTR [rip+0x76100]        # 885b0 <img>
   124b0:	movsxd rcx,DWORD PTR [rax+0x11b48]
   124b7:	mov    rdx,rcx
   124ba:	shl    rdx,0x4
   124be:	sub    rdx,rcx
   124c1:	lea    rcx,[rbx+r14*1]
   124c5:	lea    rsi,[rcx+rdx*8]
   124c9:	shl    rsi,0x3
   124cd:	cmp    DWORD PTR [rax+0x18],0x2
   124d1:	jne    12490 <init_contexts+0x7d0>
   124d3:	mov    rdi,r15
   124d6:	add    rsi,r12
   124d9:	add    r14,0x1
   124dd:	add    r15,0x10
   124e1:	call   5740 <biari_init_context>
   124e6:	cmp    r14,0xf
   124ea:	jne    124a9 <init_contexts+0x7e9>
   124ec:	add    rbx,0xf
   124f0:	add    r13,0xf0
   124f7:	cmp    rbx,0x96
   124fe:	je     12564 <init_contexts+0x8a4>
   12500:	mov    rax,QWORD PTR [rip+0x760a9]        # 885b0 <img>
   12507:	jmp    12488 <init_contexts+0x7c8>
   1250c:	nop    DWORD PTR [rax+0x0]
   12510:	add    rsi,r13
   12513:	mov    rdi,r14
   12516:	call   5740 <biari_init_context>
   1251b:	jmp    12113 <init_contexts+0x453>
   12520:	lea    rsi,[rdx+rbp*1]
   12524:	mov    rdi,r13
   12527:	call   5740 <biari_init_context>
   1252c:	jmp    120b5 <init_contexts+0x3f5>
   12531:	lea    rsi,[rax+rbp*1]
   12535:	mov    rdi,r15
   12538:	call   5740 <biari_init_context>
   1253d:	jmp    11fa1 <init_contexts+0x2e1>
   12542:	lea    rsi,[rax+rbp*1]
   12546:	mov    rdi,r15
   12549:	call   5740 <biari_init_context>
   1254e:	jmp    11f49 <init_contexts+0x289>
   12553:	lea    rsi,[rax+rbp*1]
   12557:	mov    rdi,r12
   1255a:	call   5740 <biari_init_context>
   1255f:	jmp    11ffb <init_contexts+0x33b>
   12564:	add    rsp,0x18
   12568:	pop    rbx
   12569:	pop    rbp
   1256a:	pop    r12
   1256c:	pop    r13
   1256e:	pop    r14
   12570:	pop    r15
   12572:	ret    
   12573:	mov    rdi,QWORD PTR [rsp]
   12577:	lea    rsi,[rip+0x5f632]        # 71bb0 <INIT_IPR_I>
   1257e:	add    rsi,rax
   12581:	call   5740 <biari_init_context>
   12586:	jmp    12038 <init_contexts+0x378>
   1258b:	lea    rsi,[rip+0x5f61e]        # 71bb0 <INIT_IPR_I>
   12592:	add    rsi,rax
   12595:	call   5740 <biari_init_context>
   1259a:	jmp    12070 <init_contexts+0x3b0>
   1259f:	nop

00000000000125a0 <XRate>:
   125a0:	endbr64 
   125a4:	mov    rdx,QWORD PTR [rip+0x76005]        # 885b0 <img>
   125ab:	mov    eax,DWORD PTR [rdx+0x28]
   125ae:	test   eax,eax
   125b0:	mov    eax,0x0
   125b5:	cmovns eax,DWORD PTR [rdx+0x28]
   125b9:	mov    rdx,QWORD PTR [rdi+0x8]
   125bd:	test   rdx,rdx
   125c0:	js     12668 <XRate+0xc8>
   125c6:	pxor   xmm1,xmm1
   125ca:	cvtsi2sd xmm1,rdx
   125cf:	imul   eax,DWORD PTR [rsi]
   125d2:	mulsd  xmm1,QWORD PTR [rip+0x601fe]        # 727d8 <INIT_MB_TYPE_I+0x118>
   125da:	mov    edx,0x0
   125df:	movsd  xmm0,QWORD PTR [rip+0x601e1]        # 727c8 <INIT_MB_TYPE_I+0x108>
   125e7:	sar    eax,0x4
   125ea:	add    eax,DWORD PTR [rsi+0x4]
   125ed:	cmovs  eax,edx
   125f0:	mov    edx,0x7f
   125f5:	minsd  xmm0,xmm1
   125f9:	cmp    eax,0x7f
   125fc:	cmovg  eax,edx
   125ff:	movzx  edx,WORD PTR [rdi]
   12602:	cmp    BYTE PTR [rdi+0x2],0x0
   12606:	movapd xmm1,xmm0
   1260a:	lea    ecx,[rdx+0x40]
   1260d:	jne    12616 <XRate+0x76>
   1260f:	mov    ecx,0x3f
   12614:	sub    ecx,edx
   12616:	lea    rdi,[rip+0x75b23]        # 88140 <probability>
   1261d:	movsxd rdx,ecx
   12620:	lea    rsi,[rip+0x77e19]        # 8a440 <entropy>
   12627:	movsd  xmm2,QWORD PTR [rdi+rdx*8]
   1262c:	movsxd rdx,eax
   1262f:	pxor   xmm0,xmm0
   12633:	mulsd  xmm2,xmm1
   12637:	mulsd  xmm2,QWORD PTR [rsi+rdx*8]
   1263c:	mov    edx,0x7f
   12641:	mov    r8d,edx
   12644:	sub    edx,eax
   12646:	sub    r8d,ecx
   12649:	movsxd rdx,edx
   1264c:	movsxd rcx,r8d
   1264f:	mulsd  xmm1,QWORD PTR [rdi+rcx*8]
   12654:	mulsd  xmm1,QWORD PTR [rsi+rdx*8]
   12659:	subsd  xmm0,xmm2
   1265d:	subsd  xmm0,xmm1
   12661:	ret    
   12662:	nop    WORD PTR [rax+rax*1+0x0]
   12668:	mov    rcx,rdx
   1266b:	and    edx,0x1
   1266e:	pxor   xmm1,xmm1
   12672:	shr    rcx,1
   12675:	or     rcx,rdx
   12678:	cvtsi2sd xmm1,rcx
   1267d:	addsd  xmm1,xmm1
   12681:	jmp    125cf <XRate+0x2f>
   12686:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000012690 <GetCtxModelNumber>:
   12690:	endbr64 
   12694:	push   r15
   12696:	mov    r10d,0x528
   1269c:	lea    r15,[rip+0x5fcfd]        # 723a0 <INIT_MB_TYPE_P>
   126a3:	push   r14
   126a5:	push   r13
   126a7:	push   r12
   126a9:	push   rbp
   126aa:	push   rbx
   126ab:	sub    rsp,0xe0
   126b2:	mov    rax,QWORD PTR [rip+0x75ef7]        # 885b0 <img>
   126b9:	movsd  xmm4,QWORD PTR [rip+0x6011f]        # 727e0 <INIT_MB_TYPE_I+0x120>
   126c1:	mov    QWORD PTR [rsp+0x58],rdx
   126c6:	mov    r9d,DWORD PTR [rax+0x18]
   126ca:	mov    QWORD PTR [rsp+0xd0],rax
   126d2:	xor    eax,eax
   126d4:	mov    QWORD PTR [rsp+0xd8],rdi
   126dc:	cmp    r9d,0x2
   126e0:	mov    QWORD PTR [rsp+0x50],rsi
   126e5:	setne  al
   126e8:	mov    QWORD PTR [rsp+0x10],0x0
   126f1:	lea    eax,[rax+rax*1+0x1]
   126f5:	mov    QWORD PTR [rsp+0x20],0x28
   126fe:	mov    DWORD PTR [rsp+0x4c],eax
   12702:	lea    rax,[rsi+0x210]
   12709:	mov    QWORD PTR [rsp+0xc0],rax
   12711:	lea    rax,[rsi+0x470]
   12718:	mov    QWORD PTR [rsp+0xb0],rax
   12720:	lea    rax,[rsi+0x330]
   12727:	mov    QWORD PTR [rsp+0x60],rax
   1272c:	lea    rax,[rsi+0x530]
   12733:	mov    QWORD PTR [rsp+0x98],rax
   1273b:	lea    rax,[rsi+0x570]
   12742:	mov    QWORD PTR [rsp+0x38],rax
   12747:	lea    rax,[rsi+0x5b0]
   1274e:	mov    QWORD PTR [rsp+0x28],rax
   12753:	lea    rax,[rsi+0x5e0]
   1275a:	mov    QWORD PTR [rsp+0x88],rax
   12762:	mov    rax,rdx
   12765:	add    rdx,0x10
   12769:	lea    rcx,[rax+0x20]
   1276d:	mov    QWORD PTR [rsp+0x78],rdx
   12772:	lea    rdx,[rax+0x60]
   12776:	mov    QWORD PTR [rsp+0x80],rcx
   1277e:	lea    rcx,[rax+0x120]
   12785:	mov    QWORD PTR [rsp+0x30],rdx
   1278a:	lea    rdx,[rax+0xd00]
   12791:	mov    QWORD PTR [rsp+0xa0],rcx
   12799:	lea    rcx,[rax+0x3a0]
   127a0:	mov    QWORD PTR [rsp+0x68],rdx
   127a5:	lea    rdx,[rax+0x1980]
   127ac:	mov    QWORD PTR [rsp+0x18],0x1b8
   127b5:	mov    QWORD PTR [rsp+0x8],0x78
   127be:	mov    QWORD PTR [rsp],0x0
   127c6:	mov    QWORD PTR [rsp+0xb8],rcx
   127ce:	lea    rcx,[rax+0x1660]
   127d5:	mov    QWORD PTR [rsp+0x90],rdx
   127dd:	lea    rdx,[rax+0x2600]
   127e4:	add    rax,0x1ca0
   127ea:	mov    QWORD PTR [rsp+0xa8],rcx
   127f2:	mov    QWORD PTR [rsp+0xc8],rdx
   127fa:	mov    QWORD PTR [rsp+0x70],rax
   127ff:	mov    rcx,QWORD PTR [rsp]
   12803:	mov    rbp,QWORD PTR [rsp+0x50]
   12808:	xor    ebx,ebx
   1280a:	pxor   xmm3,xmm3
   1280e:	mov    rax,rcx
   12811:	mov    DWORD PTR [rsp+0x48],ecx
   12815:	shl    rax,0x5
   12819:	add    rax,rcx
   1281c:	lea    r11,[rax*8+0x58]
   12824:	lea    r12,[r11-0x58]
   12828:	mov    r13,rbp
   1282b:	jmp    1284d <GetCtxModelNumber+0x1bd>
   1282d:	nop    DWORD PTR [rax]
   12830:	lea    rsi,[r12+r15*1]
   12834:	mov    rdi,r13
   12837:	add    r12,0x8
   1283b:	add    r13,0x10
   1283f:	call   125a0 <XRate>
   12844:	addsd  xmm3,xmm0
   12848:	cmp    r12,r11
   1284b:	je     12877 <GetCtxModelNumber+0x1e7>
   1284d:	cmp    r9d,0x2
   12851:	jne    12830 <GetCtxModelNumber+0x1a0>
   12853:	lea    rax,[rip+0x5fe66]        # 726c0 <INIT_MB_TYPE_I>
   1285a:	mov    rdi,r13
   1285d:	add    r13,0x10
   12861:	lea    rsi,[r12+rax*1]
   12865:	add    r12,0x8
   12869:	call   125a0 <XRate>
   1286e:	addsd  xmm3,xmm0
   12872:	cmp    r12,r11
   12875:	jne    1284d <GetCtxModelNumber+0x1bd>
   12877:	add    rbx,0xb
   1287b:	lea    r11,[r12+0x58]
   12880:	add    rbp,0xb0
   12887:	cmp    rbx,0x21
   1288b:	jne    12824 <GetCtxModelNumber+0x194>
   1288d:	mov    rax,QWORD PTR [rsp]
   12891:	mov    rbp,QWORD PTR [rsp+0xc0]
   12899:	xor    ebx,ebx
   1289b:	lea    r11,[rax+rax*8]
   1289f:	shl    r11,0x4
   128a3:	add    r11,0x48
   128a7:	lea    r12,[r11-0x48]
   128ab:	mov    r13,rbp
   128ae:	jmp    128d4 <GetCtxModelNumber+0x244>
   128b0:	lea    rax,[rip+0x5f889]        # 72140 <INIT_B8_TYPE_P>
   128b7:	mov    rdi,r13
   128ba:	add    r13,0x10
   128be:	lea    rsi,[r12+rax*1]
   128c2:	add    r12,0x8
   128c6:	call   125a0 <XRate>
   128cb:	addsd  xmm3,xmm0
   128cf:	cmp    r12,r11
   128d2:	je     128fe <GetCtxModelNumber+0x26e>
   128d4:	cmp    r9d,0x2
   128d8:	jne    128b0 <GetCtxModelNumber+0x220>
   128da:	lea    rax,[rip+0x5fa1f]        # 72300 <INIT_B8_TYPE_I>
   128e1:	mov    rdi,r13
   128e4:	add    r13,0x10
   128e8:	lea    rsi,[r12+rax*1]
   128ec:	add    r12,0x8
   128f0:	call   125a0 <XRate>
   128f5:	addsd  xmm3,xmm0
   128f9:	cmp    r12,r11
   128fc:	jne    128d4 <GetCtxModelNumber+0x244>
   128fe:	add    rbx,0x9
   12902:	lea    r11,[r12+0x48]
   12907:	add    rbp,0x90
   1290e:	cmp    rbx,0x12
   12912:	jne    128a7 <GetCtxModelNumber+0x217>
   12914:	mov    rax,QWORD PTR [rsp]
   12918:	mov    r14,QWORD PTR [rsp+0x60]
   1291d:	mov    QWORD PTR [rsp+0x40],r10
   12922:	xor    r13d,r13d
   12925:	lea    rbx,[rip+0x5f594]        # 71ec0 <INIT_MV_RES_P>
   1292c:	lea    rbp,[rip+0x5f76d]        # 720a0 <INIT_MV_RES_I>
   12933:	lea    r11,[rax+rax*4]
   12937:	shl    r11,0x5
   1293b:	add    r11,0x50
   1293f:	lea    r12,[r11-0x50]
   12943:	mov    r10,r14
   12946:	jmp    1296d <GetCtxModelNumber+0x2dd>
   12948:	nop    DWORD PTR [rax+rax*1+0x0]
   12950:	lea    rsi,[r12+rbx*1]
   12954:	mov    rdi,r10
   12957:	add    r12,0x8
   1295b:	call   125a0 <XRate>
   12960:	addsd  xmm3,xmm0
   12964:	add    r10,0x10
   12968:	cmp    r12,r11
   1296b:	je     12990 <GetCtxModelNumber+0x300>
   1296d:	cmp    r9d,0x2
   12971:	jne    12950 <GetCtxModelNumber+0x2c0>
   12973:	lea    rsi,[r12+rbp*1]
   12977:	mov    rdi,r10
   1297a:	add    r12,0x8
   1297e:	call   125a0 <XRate>
   12983:	addsd  xmm3,xmm0
   12987:	add    r10,0x10
   1298b:	cmp    r12,r11
   1298e:	jne    1296d <GetCtxModelNumber+0x2dd>
   12990:	add    r13,0xa
   12994:	lea    r11,[r12+0x50]
   12999:	add    r14,0xa0
   129a0:	cmp    r13,0x14
   129a4:	jne    1293f <GetCtxModelNumber+0x2af>
   129a6:	mov    rax,QWORD PTR [rsp]
   129aa:	mov    r10,QWORD PTR [rsp+0x40]
   129af:	xor    ebp,ebp
   129b1:	lea    rbx,[rip+0x5f388]        # 71d40 <INIT_REF_NO_P>
   129b8:	mov    r12,QWORD PTR [rsp+0xb0]
   129c0:	lea    r11,[rax+rax*2]
   129c4:	shl    r11,0x5
   129c8:	mov    QWORD PTR [rsp+0x40],r11
   129cd:	add    r11,0x30
   129d1:	lea    r13,[r11-0x30]
   129d5:	mov    r14,r12
   129d8:	jmp    129fe <GetCtxModelNumber+0x36e>
   129da:	nop    WORD PTR [rax+rax*1+0x0]
   129e0:	lea    rsi,[r13+rbx*1+0x0]
   129e5:	mov    rdi,r14
   129e8:	add    r13,0x8
   129ec:	add    r14,0x10
   129f0:	call   125a0 <XRate>
   129f5:	addsd  xmm3,xmm0
   129f9:	cmp    r13,r11
   129fc:	je     12a29 <GetCtxModelNumber+0x399>
   129fe:	cmp    r9d,0x2
   12a02:	jne    129e0 <GetCtxModelNumber+0x350>
   12a04:	lea    rax,[rip+0x5f455]        # 71e60 <INIT_REF_NO_I>
   12a0b:	mov    rdi,r14
   12a0e:	add    r14,0x10
   12a12:	lea    rsi,[r13+rax*1+0x0]
   12a17:	add    r13,0x8
   12a1b:	call   125a0 <XRate>
   12a20:	addsd  xmm3,xmm0
   12a24:	cmp    r13,r11
   12a27:	jne    129fe <GetCtxModelNumber+0x36e>
   12a29:	add    rbp,0x6
   12a2d:	lea    r11,[r13+0x30]
   12a31:	add    r12,0x60
   12a35:	cmp    rbp,0xc
   12a39:	jne    129d1 <GetCtxModelNumber+0x341>
   12a3b:	mov    rbp,QWORD PTR [rsp+0x98]
   12a43:	mov    r12,QWORD PTR [rsp+0x10]
   12a48:	lea    r11,[rip+0x5f1f1]        # 71c40 <INIT_DELTA_QP_P>
   12a4f:	lea    rbx,[rip+0x5f24a]        # 71ca0 <INIT_DELTA_QP_I>
   12a56:	mov    r13,QWORD PTR [rsp+0x38]
   12a5b:	cmp    r9d,0x2
   12a5f:	je     13037 <GetCtxModelNumber+0x9a7>
   12a65:	lea    rsi,[r12+r11*1]
   12a69:	mov    rdi,rbp
   12a6c:	call   125a0 <XRate>
   12a71:	addsd  xmm3,xmm0
   12a75:	add    rbp,0x10
   12a79:	add    r12,0x8
   12a7d:	cmp    rbp,r13
   12a80:	jne    12a5b <GetCtxModelNumber+0x3cb>
   12a82:	mov    rbp,QWORD PTR [rsp+0x38]
   12a87:	mov    r12,QWORD PTR [rsp+0x10]
   12a8c:	lea    r11,[rip+0x5f12d]        # 71bc0 <INIT_MB_AFF_P>
   12a93:	lea    rbx,[rip+0x5f186]        # 71c20 <INIT_MB_AFF_I>
   12a9a:	mov    r13,QWORD PTR [rsp+0x28]
   12a9f:	cmp    r9d,0x2
   12aa3:	je     13022 <GetCtxModelNumber+0x992>
   12aa9:	lea    rsi,[r12+r11*1]
   12aad:	mov    rdi,rbp
   12ab0:	call   125a0 <XRate>
   12ab5:	addsd  xmm3,xmm0
   12ab9:	add    rbp,0x10
   12abd:	add    r12,0x8
   12ac1:	cmp    rbp,r13
   12ac4:	jne    12a9f <GetCtxModelNumber+0x40f>
   12ac6:	mov    rax,QWORD PTR [rsp]
   12aca:	mov    rbp,QWORD PTR [rsp+0x28]
   12acf:	lea    r11,[rip+0x5f1ea]        # 71cc0 <INIT_TRANSFORM_SIZE_P>
   12ad6:	lea    rbx,[rip+0x5f233]        # 71d10 <INIT_TRANSFORM_SIZE_I>
   12add:	mov    r13,QWORD PTR [rsp+0x88]
   12ae5:	lea    r12,[rax+rax*2]
   12ae9:	shl    r12,0x3
   12aed:	cmp    r9d,0x2
   12af1:	je     1304c <GetCtxModelNumber+0x9bc>
   12af7:	lea    rsi,[r12+r11*1]
   12afb:	mov    rdi,rbp
   12afe:	call   125a0 <XRate>
   12b03:	addsd  xmm3,xmm0
   12b07:	add    rbp,0x10
   12b0b:	add    r12,0x8
   12b0f:	cmp    r13,rbp
   12b12:	jne    12aed <GetCtxModelNumber+0x45d>
   12b14:	mov    r11,QWORD PTR [rsp]
   12b18:	shl    r11,0x4
   12b1c:	cmp    r9d,0x2
   12b20:	je     13073 <GetCtxModelNumber+0x9e3>
   12b26:	mov    rdi,QWORD PTR [rsp+0x58]
   12b2b:	lea    rsi,[rip+0x5f04e]        # 71b80 <INIT_IPR_P>
   12b32:	add    rsi,r11
   12b35:	call   125a0 <XRate>
   12b3a:	mov    rdi,QWORD PTR [rsp+0x78]
   12b3f:	lea    rsi,[rip+0x5f042]        # 71b88 <INIT_IPR_P+0x8>
   12b46:	addsd  xmm3,xmm0
   12b4a:	add    rsi,r11
   12b4d:	call   125a0 <XRate>
   12b52:	addsd  xmm3,xmm0
   12b56:	mov    rbp,QWORD PTR [rsp+0x80]
   12b5e:	mov    r12,QWORD PTR [rsp+0x10]
   12b63:	lea    r11,[rip+0x5ef96]        # 71b00 <INIT_CIPR_P>
   12b6a:	lea    rbx,[rip+0x5efef]        # 71b60 <INIT_CIPR_I>
   12b71:	mov    r13,QWORD PTR [rsp+0x30]
   12b76:	cmp    r9d,0x2
   12b7a:	je     1300d <GetCtxModelNumber+0x97d>
   12b80:	lea    rsi,[r12+r11*1]
   12b84:	mov    rdi,rbp
   12b87:	call   125a0 <XRate>
   12b8c:	addsd  xmm3,xmm0
   12b90:	add    rbp,0x10
   12b94:	add    r12,0x8
   12b98:	cmp    r13,rbp
   12b9b:	jne    12b76 <GetCtxModelNumber+0x4e6>
   12b9d:	mov    r11,QWORD PTR [rsp+0x40]
   12ba2:	mov    rbp,QWORD PTR [rsp+0x30]
   12ba7:	xor    ebx,ebx
   12ba9:	lea    r12,[rip+0x5edd0]        # 71980 <INIT_CBP_P>
   12bb0:	add    r11,0x20
   12bb4:	lea    r13,[r11-0x20]
   12bb8:	mov    r14,rbp
   12bbb:	cmp    r9d,0x2
   12bbf:	je     12ff0 <GetCtxModelNumber+0x960>
   12bc5:	lea    rsi,[r13+r12*1+0x0]
   12bca:	mov    rdi,r14
   12bcd:	call   125a0 <XRate>
   12bd2:	addsd  xmm3,xmm0
   12bd6:	add    r13,0x8
   12bda:	add    r14,0x10
   12bde:	cmp    r11,r13
   12be1:	jne    12bbb <GetCtxModelNumber+0x52b>
   12be3:	add    rbx,0x4
   12be7:	add    r11,0x20
   12beb:	add    rbp,0x40
   12bef:	cmp    rbx,0xc
   12bf3:	jne    12bb4 <GetCtxModelNumber+0x524>
   12bf5:	mov    r11,QWORD PTR [rsp]
   12bf9:	xor    ebx,ebx
   12bfb:	mov    rbp,QWORD PTR [rsp+0xa0]
   12c03:	lea    r12,[rip+0x5e976]        # 71580 <INIT_BCBP_P>
   12c0a:	shl    r11,0x8
   12c0e:	add    r11,0x20
   12c12:	nop    WORD PTR [rax+rax*1+0x0]
   12c18:	lea    r13,[r11-0x20]
   12c1c:	mov    r14,rbp
   12c1f:	cmp    r9d,0x2
   12c23:	je     12f90 <GetCtxModelNumber+0x900>
   12c29:	lea    rsi,[r13+r12*1+0x0]
   12c2e:	mov    rdi,r14
   12c31:	call   125a0 <XRate>
   12c36:	addsd  xmm3,xmm0
   12c3a:	add    r13,0x8
   12c3e:	add    r14,0x10
   12c42:	cmp    r11,r13
   12c45:	jne    12c1f <GetCtxModelNumber+0x58f>
   12c47:	add    rbx,0x4
   12c4b:	add    r11,0x20
   12c4f:	add    rbp,0x40
   12c53:	cmp    rbx,0x28
   12c57:	jne    12c18 <GetCtxModelNumber+0x588>
   12c59:	mov    r12,QWORD PTR [rsp+0xb8]
   12c61:	mov    r11,QWORD PTR [rsp+0x8]
   12c66:	lea    rbx,[rip+0x5da13]        # 70680 <INIT_MAP_P>
   12c6d:	lea    rbp,[rip+0x5e54c]        # 711c0 <INIT_MAP_I>
   12c74:	nop    DWORD PTR [rax+0x0]
   12c78:	lea    r13,[r11-0x78]
   12c7c:	mov    r14,r12
   12c7f:	jmp    12ca6 <GetCtxModelNumber+0x616>
   12c81:	nop    DWORD PTR [rax+0x0]
   12c88:	lea    rsi,[r13+rbx*1+0x0]
   12c8d:	mov    rdi,r14
   12c90:	add    r13,0x8
   12c94:	add    r14,0x10
   12c98:	call   125a0 <XRate>
   12c9d:	addsd  xmm3,xmm0
   12ca1:	cmp    r11,r13
   12ca4:	je     12cca <GetCtxModelNumber+0x63a>
   12ca6:	cmp    r9d,0x2
   12caa:	jne    12c88 <GetCtxModelNumber+0x5f8>
   12cac:	lea    rsi,[r13+rbp*1+0x0]
   12cb1:	mov    rdi,r14
   12cb4:	add    r13,0x8
   12cb8:	add    r14,0x10
   12cbc:	call   125a0 <XRate>
   12cc1:	addsd  xmm3,xmm0
   12cc5:	cmp    r11,r13
   12cc8:	jne    12ca6 <GetCtxModelNumber+0x616>
   12cca:	add    r11,0x78
   12cce:	add    r12,0xf0
   12cd5:	cmp    r10,r11
   12cd8:	jne    12c78 <GetCtxModelNumber+0x5e8>
   12cda:	mov    r12,QWORD PTR [rsp+0x68]
   12cdf:	mov    r11,QWORD PTR [rsp+0x8]
   12ce4:	lea    rbx,[rip+0x5ca95]        # 6f780 <INIT_LAST_P>
   12ceb:	lea    rbp,[rip+0x5d5ce]        # 702c0 <INIT_LAST_I>
   12cf2:	nop    WORD PTR [rax+rax*1+0x0]
   12cf8:	lea    r13,[r11-0x78]
   12cfc:	mov    r14,r12
   12cff:	jmp    12d26 <GetCtxModelNumber+0x696>
   12d01:	nop    DWORD PTR [rax+0x0]
   12d08:	lea    rsi,[r13+rbx*1+0x0]
   12d0d:	mov    rdi,r14
   12d10:	add    r13,0x8
   12d14:	add    r14,0x10
   12d18:	call   125a0 <XRate>
   12d1d:	addsd  xmm3,xmm0
   12d21:	cmp    r11,r13
   12d24:	je     12d4a <GetCtxModelNumber+0x6ba>
   12d26:	cmp    r9d,0x2
   12d2a:	jne    12d08 <GetCtxModelNumber+0x678>
   12d2c:	lea    rsi,[r13+rbp*1+0x0]
   12d31:	mov    rdi,r14
   12d34:	add    r13,0x8
   12d38:	add    r14,0x10
   12d3c:	call   125a0 <XRate>
   12d41:	addsd  xmm3,xmm0
   12d45:	cmp    r11,r13
   12d48:	jne    12d26 <GetCtxModelNumber+0x696>
   12d4a:	add    r11,0x78
   12d4e:	add    r12,0xf0
   12d55:	cmp    r10,r11
   12d58:	jne    12cf8 <GetCtxModelNumber+0x668>
   12d5a:	mov    r11,QWORD PTR [rsp+0x20]
   12d5f:	mov    r14,QWORD PTR [rsp+0x18]
   12d64:	mov    QWORD PTR [rsp+0x40],r10
   12d69:	lea    rbx,[rip+0x5c510]        # 6f280 <INIT_ONE_P>
   12d70:	mov    rbp,QWORD PTR [rsp+0xa8]
   12d78:	lea    r12,[rip+0x5c8c1]        # 6f640 <INIT_ONE_I>
   12d7f:	nop
   12d80:	lea    r13,[r11-0x28]
   12d84:	mov    r10,rbp
   12d87:	cmp    r9d,0x2
   12d8b:	je     12fd0 <GetCtxModelNumber+0x940>
   12d91:	lea    rsi,[r13+rbx*1+0x0]
   12d96:	mov    rdi,r10
   12d99:	call   125a0 <XRate>
   12d9e:	addsd  xmm3,xmm0
   12da2:	add    r13,0x8
   12da6:	add    r10,0x10
   12daa:	cmp    r11,r13
   12dad:	jne    12d87 <GetCtxModelNumber+0x6f7>
   12daf:	add    r11,0x28
   12db3:	add    rbp,0x50
   12db7:	cmp    r14,r11
   12dba:	jne    12d80 <GetCtxModelNumber+0x6f0>
   12dbc:	mov    rbp,QWORD PTR [rsp+0x90]
   12dc4:	mov    r11,QWORD PTR [rsp+0x20]
   12dc9:	lea    rbx,[rip+0x5bfb0]        # 6ed80 <INIT_ABS_P>
   12dd0:	lea    r12,[rip+0x5c369]        # 6f140 <INIT_ABS_I>
   12dd7:	mov    r14,QWORD PTR [rsp+0x18]
   12ddc:	nop    DWORD PTR [rax+0x0]
   12de0:	lea    r13,[r11-0x28]
   12de4:	mov    r10,rbp
   12de7:	cmp    r9d,0x2
   12deb:	je     12fb0 <GetCtxModelNumber+0x920>
   12df1:	lea    rsi,[r13+rbx*1+0x0]
   12df6:	mov    rdi,r10
   12df9:	call   125a0 <XRate>
   12dfe:	addsd  xmm3,xmm0
   12e02:	add    r13,0x8
   12e06:	add    r10,0x10
   12e0a:	cmp    r11,r13
   12e0d:	jne    12de7 <GetCtxModelNumber+0x757>
   12e0f:	add    r11,0x28
   12e13:	add    rbp,0x50
   12e17:	cmp    r14,r11
   12e1a:	jne    12de0 <GetCtxModelNumber+0x750>
   12e1c:	mov    r10,QWORD PTR [rsp+0x40]
   12e21:	mov    r12,QWORD PTR [rsp+0x70]
   12e26:	lea    rbx,[rip+0x5b053]        # 6de80 <INIT_FLD_MAP_P>
   12e2d:	lea    rbp,[rip+0x5bb8c]        # 6e9c0 <INIT_FLD_MAP_I>
   12e34:	mov    r11,QWORD PTR [rsp+0x8]
   12e39:	nop    DWORD PTR [rax+0x0]
   12e40:	lea    r13,[r11-0x78]
   12e44:	mov    r14,r12
   12e47:	jmp    12e6e <GetCtxModelNumber+0x7de>
   12e49:	nop    DWORD PTR [rax+0x0]
   12e50:	lea    rsi,[r13+rbx*1+0x0]
   12e55:	mov    rdi,r14
   12e58:	add    r13,0x8
   12e5c:	add    r14,0x10
   12e60:	call   125a0 <XRate>
   12e65:	addsd  xmm3,xmm0
   12e69:	cmp    r11,r13
   12e6c:	je     12e92 <GetCtxModelNumber+0x802>
   12e6e:	cmp    r9d,0x2
   12e72:	jne    12e50 <GetCtxModelNumber+0x7c0>
   12e74:	lea    rsi,[r13+rbp*1+0x0]
   12e79:	mov    rdi,r14
   12e7c:	add    r13,0x8
   12e80:	add    r14,0x10
   12e84:	call   125a0 <XRate>
   12e89:	addsd  xmm3,xmm0
   12e8d:	cmp    r11,r13
   12e90:	jne    12e6e <GetCtxModelNumber+0x7de>
   12e92:	add    r11,0x78
   12e96:	add    r12,0xf0
   12e9d:	cmp    r10,r11
   12ea0:	jne    12e40 <GetCtxModelNumber+0x7b0>
   12ea2:	mov    r12,QWORD PTR [rsp+0xc8]
   12eaa:	mov    r11,QWORD PTR [rsp+0x8]
   12eaf:	lea    rbx,[rip+0x5a0ca]        # 6cf80 <INIT_FLD_LAST_P>
   12eb6:	lea    rbp,[rip+0x5ac03]        # 6dac0 <INIT_FLD_LAST_I>
   12ebd:	nop    DWORD PTR [rax]
   12ec0:	lea    r13,[r11-0x78]
   12ec4:	mov    r14,r12
   12ec7:	jmp    12eee <GetCtxModelNumber+0x85e>
   12ec9:	nop    DWORD PTR [rax+0x0]
   12ed0:	lea    rsi,[r13+rbx*1+0x0]
   12ed5:	mov    rdi,r14
   12ed8:	add    r13,0x8
   12edc:	add    r14,0x10
   12ee0:	call   125a0 <XRate>
   12ee5:	addsd  xmm3,xmm0
   12ee9:	cmp    r11,r13
   12eec:	je     12f12 <GetCtxModelNumber+0x882>
   12eee:	cmp    r9d,0x2
   12ef2:	jne    12ed0 <GetCtxModelNumber+0x840>
   12ef4:	lea    rsi,[r13+rbp*1+0x0]
   12ef9:	mov    rdi,r14
   12efc:	add    r13,0x8
   12f00:	add    r14,0x10
   12f04:	call   125a0 <XRate>
   12f09:	addsd  xmm3,xmm0
   12f0d:	cmp    r11,r13
   12f10:	jne    12eee <GetCtxModelNumber+0x85e>
   12f12:	add    r11,0x78
   12f16:	add    r12,0xf0
   12f1d:	cmp    r10,r11
   12f20:	jne    12ec0 <GetCtxModelNumber+0x830>
   12f22:	comisd xmm4,xmm3
   12f26:	jbe    12f3a <GetCtxModelNumber+0x8aa>
   12f28:	mov    rax,QWORD PTR [rsp+0xd8]
   12f30:	mov    ecx,DWORD PTR [rsp+0x48]
   12f34:	movapd xmm4,xmm3
   12f38:	mov    DWORD PTR [rax],ecx
   12f3a:	add    QWORD PTR [rsp],0x1
   12f3f:	add    r10,0x3c0
   12f46:	mov    rax,QWORD PTR [rsp]
   12f4a:	add    QWORD PTR [rsp+0x8],0x3c0
   12f53:	add    QWORD PTR [rsp+0x18],0x140
   12f5c:	add    QWORD PTR [rsp+0x20],0x140
   12f65:	cmp    DWORD PTR [rsp+0x4c],eax
   12f69:	jle    13061 <GetCtxModelNumber+0x9d1>
   12f6f:	mov    rax,QWORD PTR [rsp+0xd0]
   12f77:	add    QWORD PTR [rsp+0x10],0x20
   12f7d:	mov    r9d,DWORD PTR [rax+0x18]
   12f81:	jmp    127ff <GetCtxModelNumber+0x16f>
   12f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12f90:	lea    rax,[rip+0x5e8e9]        # 71880 <INIT_BCBP_I>
   12f97:	mov    rdi,r14
   12f9a:	lea    rsi,[r13+rax*1+0x0]
   12f9f:	call   125a0 <XRate>
   12fa4:	addsd  xmm3,xmm0
   12fa8:	jmp    12c3a <GetCtxModelNumber+0x5aa>
   12fad:	nop    DWORD PTR [rax]
   12fb0:	lea    rsi,[r13+r12*1+0x0]
   12fb5:	mov    rdi,r10
   12fb8:	call   125a0 <XRate>
   12fbd:	addsd  xmm3,xmm0
   12fc1:	jmp    12e02 <GetCtxModelNumber+0x772>
   12fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12fd0:	lea    rsi,[r13+r12*1+0x0]
   12fd5:	mov    rdi,r10
   12fd8:	call   125a0 <XRate>
   12fdd:	addsd  xmm3,xmm0
   12fe1:	jmp    12da2 <GetCtxModelNumber+0x712>
   12fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12ff0:	lea    rax,[rip+0x5eaa9]        # 71aa0 <INIT_CBP_I>
   12ff7:	mov    rdi,r14
   12ffa:	lea    rsi,[r13+rax*1+0x0]
   12fff:	call   125a0 <XRate>
   13004:	addsd  xmm3,xmm0
   13008:	jmp    12bd6 <GetCtxModelNumber+0x546>
   1300d:	lea    rsi,[r12+rbx*1]
   13011:	mov    rdi,rbp
   13014:	call   125a0 <XRate>
   13019:	addsd  xmm3,xmm0
   1301d:	jmp    12b90 <GetCtxModelNumber+0x500>
   13022:	lea    rsi,[r12+rbx*1]
   13026:	mov    rdi,rbp
   13029:	call   125a0 <XRate>
   1302e:	addsd  xmm3,xmm0
   13032:	jmp    12ab9 <GetCtxModelNumber+0x429>
   13037:	lea    rsi,[r12+rbx*1]
   1303b:	mov    rdi,rbp
   1303e:	call   125a0 <XRate>
   13043:	addsd  xmm3,xmm0
   13047:	jmp    12a75 <GetCtxModelNumber+0x3e5>
   1304c:	lea    rsi,[r12+rbx*1]
   13050:	mov    rdi,rbp
   13053:	call   125a0 <XRate>
   13058:	addsd  xmm3,xmm0
   1305c:	jmp    12b07 <GetCtxModelNumber+0x477>
   13061:	add    rsp,0xe0
   13068:	pop    rbx
   13069:	pop    rbp
   1306a:	pop    r12
   1306c:	pop    r13
   1306e:	pop    r14
   13070:	pop    r15
   13072:	ret    
   13073:	mov    rdi,QWORD PTR [rsp+0x58]
   13078:	lea    rsi,[rip+0x5eb31]        # 71bb0 <INIT_IPR_I>
   1307f:	add    rsi,r11
   13082:	call   125a0 <XRate>
   13087:	mov    rdi,QWORD PTR [rsp+0x78]
   1308c:	lea    rsi,[rip+0x5eb25]        # 71bb8 <INIT_IPR_I+0x8>
   13093:	addsd  xmm3,xmm0
   13097:	add    rsi,r11
   1309a:	call   125a0 <XRate>
   1309f:	addsd  xmm3,xmm0
   130a3:	jmp    12b56 <GetCtxModelNumber+0x4c6>
   130a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000130b0 <store_contexts>:
   130b0:	endbr64 
   130b4:	mov    rax,QWORD PTR [rip+0x754fd]        # 885b8 <input>
   130bb:	mov    eax,DWORD PTR [rax+0xc8c]
   130c1:	test   eax,eax
   130c3:	jne    130d0 <store_contexts+0x20>
   130c5:	ret    
   130c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   130d0:	mov    rax,QWORD PTR [rip+0x754d9]        # 885b0 <img>
   130d7:	mov    rcx,QWORD PTR [rax+0x3750]
   130de:	movsxd rdi,DWORD PTR [rax+0x11afc]
   130e5:	movsxd rsi,DWORD PTR [rax+0x18]
   130e9:	mov    eax,DWORD PTR [rcx+0xc]
   130ec:	mov    r8,QWORD PTR [rcx+0x20]
   130f0:	cdq    
   130f1:	idiv   DWORD PTR [rip+0x77331]        # 8a428 <num_mb_per_slice>
   130f7:	mov    rdx,QWORD PTR [rip+0x77742]        # 8a840 <initialized>
   130fe:	mov    rdx,QWORD PTR [rdx+rdi*8]
   13102:	mov    rdx,QWORD PTR [rdx+rsi*8]
   13106:	cdqe   
   13108:	mov    DWORD PTR [rdx+rax*4],0x1
   1310f:	mov    rdx,QWORD PTR [rcx+0x28]
   13113:	mov    rcx,QWORD PTR [rip+0x77306]        # 8a420 <model_number>
   1311a:	mov    rcx,QWORD PTR [rcx+rdi*8]
   1311e:	mov    rcx,QWORD PTR [rcx+rsi*8]
   13122:	mov    rsi,r8
   13125:	lea    rdi,[rcx+rax*4]
   13129:	jmp    12690 <GetCtxModelNumber>
   1312e:	xchg   ax,ax

0000000000013130 <update_field_frame_contexts>:
   13130:	endbr64 
   13134:	mov    r8,QWORD PTR [rip+0x77705]        # 8a840 <initialized>
   1313b:	mov    r9,QWORD PTR [rip+0x772de]        # 8a420 <model_number>
   13142:	push   rbx
   13143:	xor    ebx,ebx
   13145:	mov    ecx,DWORD PTR [rip+0x776fd]        # 8a848 <number_of_slices>
   1314b:	test   edi,edi
   1314d:	jne    131c0 <update_field_frame_contexts+0x90>
   1314f:	lea    eax,[rcx+0x1]
   13152:	cmp    eax,0x1
   13155:	jle    131a1 <update_field_frame_contexts+0x71>
   13157:	mov    rax,QWORD PTR [r8]
   1315a:	mov    r11,QWORD PTR [rax+rbx*1]
   1315e:	mov    rax,QWORD PTR [r8+0x8]
   13162:	mov    r10,QWORD PTR [rax+rbx*1]
   13166:	mov    rax,QWORD PTR [r9]
   13169:	mov    rdi,QWORD PTR [rax+rbx*1]
   1316d:	mov    rax,QWORD PTR [r9+0x8]
   13171:	mov    rsi,QWORD PTR [rax+rbx*1]
   13175:	xor    eax,eax
   13177:	nop    WORD PTR [rax+rax*1+0x0]
   13180:	mov    edx,DWORD PTR [r11+rax*8]
   13184:	mov    DWORD PTR [r10+rax*4],edx
   13188:	mov    edx,DWORD PTR [rdi+rax*8]
   1318b:	mov    DWORD PTR [rsi+rax*4],edx
   1318e:	mov    ecx,DWORD PTR [rip+0x776b4]        # 8a848 <number_of_slices>
   13194:	add    rax,0x1
   13198:	lea    edx,[rcx+0x1]
   1319b:	sar    edx,1
   1319d:	cmp    edx,eax
   1319f:	jg     13180 <update_field_frame_contexts+0x50>
   131a1:	add    rbx,0x8
   131a5:	cmp    rbx,0x20
   131a9:	jne    1314f <update_field_frame_contexts+0x1f>
   131ab:	pop    rbx
   131ac:	ret    
   131ad:	nop    DWORD PTR [rax]
   131b0:	add    rbx,0x8
   131b4:	cmp    rbx,0x20
   131b8:	je     131ab <update_field_frame_contexts+0x7b>
   131ba:	nop    WORD PTR [rax+rax*1+0x0]
   131c0:	mov    eax,DWORD PTR [rip+0x77682]        # 8a848 <number_of_slices>
   131c6:	test   eax,eax
   131c8:	jle    131b0 <update_field_frame_contexts+0x80>
   131ca:	mov    rax,QWORD PTR [r8+0x8]
   131ce:	mov    r11,QWORD PTR [rax+rbx*1]
   131d2:	mov    rax,QWORD PTR [r8]
   131d5:	mov    r10,QWORD PTR [rax+rbx*1]
   131d9:	mov    rax,QWORD PTR [r9+0x8]
   131dd:	mov    rdi,QWORD PTR [rax+rbx*1]
   131e1:	mov    rax,QWORD PTR [r9]
   131e4:	mov    rsi,QWORD PTR [rax+rbx*1]
   131e8:	xor    eax,eax
   131ea:	nop    WORD PTR [rax+rax*1+0x0]
   131f0:	mov    edx,eax
   131f2:	sar    edx,1
   131f4:	movsxd rdx,edx
   131f7:	mov    ecx,DWORD PTR [r11+rdx*4]
   131fb:	mov    DWORD PTR [r10+rax*4],ecx
   131ff:	mov    edx,DWORD PTR [rdi+rdx*4]
   13202:	mov    DWORD PTR [rsi+rax*4],edx
   13205:	add    rax,0x1
   13209:	cmp    DWORD PTR [rip+0x77639],eax        # 8a848 <number_of_slices>
   1320f:	jg     131f0 <update_field_frame_contexts+0xc0>
   13211:	add    rbx,0x8
   13215:	cmp    rbx,0x20
   13219:	jne    131c0 <update_field_frame_contexts+0x90>
   1321b:	jmp    131ab <update_field_frame_contexts+0x7b>
   1321d:	nop    DWORD PTR [rax]

0000000000013220 <decode_one_mb>:
   13220:	endbr64 
   13224:	ret    
   13225:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000013230 <Get_Reference_Pixel>:
   13230:	endbr64 
   13234:	push   r15
   13236:	mov    r11d,edx
   13239:	mov    r10d,edx
   1323c:	mov    r9d,esi
   1323f:	push   r14
   13241:	or     r10d,0x3
   13245:	and    r11d,0x3
   13249:	push   r13
   1324b:	mov    r13d,esi
   1324e:	push   r12
   13250:	push   rbp
   13251:	mov    ebp,edx
   13253:	push   rbx
   13254:	mov    ebx,esi
   13256:	and    ebx,0x3
   13259:	sub    rsp,0x48
   1325d:	mov    rax,QWORD PTR fs:0x28
   13266:	mov    QWORD PTR [rsp+0x38],rax
   1326b:	xor    eax,eax
   1326d:	and    ebp,0xfffffffc
   13270:	mov    rax,QWORD PTR [rip+0x75339]        # 885b0 <img>
   13277:	cmovns r10d,ebp
   1327b:	or     r9d,0x3
   1327f:	mov    ecx,DWORD PTR [rax+0x34]
   13282:	mov    r15d,DWORD PTR [rax+0x3c]
   13286:	sar    r10d,0x2
   1328a:	and    r13d,0xfffffffc
   1328e:	cmovns r9d,r13d
   13292:	or     edx,esi
   13294:	lea    r8d,[r15-0x1]
   13298:	sub    ecx,0x1
   1329b:	sar    r9d,0x2
   1329f:	and    edx,0x3
   132a2:	jne    13310 <Get_Reference_Pixel+0xe0>
   132a4:	cmp    r9d,r8d
   132a7:	mov    eax,r8d
   132aa:	cmovle eax,r9d
   132ae:	test   eax,eax
   132b0:	js     132c2 <Get_Reference_Pixel+0x92>
   132b2:	cmp    r9d,r8d
   132b5:	jle    13540 <Get_Reference_Pixel+0x310>
   132bb:	movsxd r8,r8d
   132be:	lea    rdi,[rdi+r8*8]
   132c2:	cmp    r10d,ecx
   132c5:	mov    edx,ecx
   132c7:	mov    rax,QWORD PTR [rdi]
   132ca:	cmovle edx,r10d
   132ce:	test   edx,edx
   132d0:	js     132e2 <Get_Reference_Pixel+0xb2>
   132d2:	cmp    r10d,ecx
   132d5:	jle    13560 <Get_Reference_Pixel+0x330>
   132db:	movsxd rcx,ecx
   132de:	lea    rax,[rax+rcx*2]
   132e2:	movzx  eax,WORD PTR [rax]
   132e5:	mov    rbx,QWORD PTR [rsp+0x38]
   132ea:	xor    rbx,QWORD PTR fs:0x28
   132f3:	jne    13938 <Get_Reference_Pixel+0x708>
   132f9:	add    rsp,0x48
   132fd:	pop    rbx
   132fe:	pop    rbp
   132ff:	pop    r12
   13301:	pop    r13
   13303:	pop    r14
   13305:	pop    r15
   13307:	ret    
   13308:	nop    DWORD PTR [rax+rax*1+0x0]
   13310:	test   ebx,ebx
   13312:	jne    133e0 <Get_Reference_Pixel+0x1b0>
   13318:	cmp    r9d,r8d
   1331b:	mov    esi,0x1
   13320:	lea    r13d,[r10+0x4]
   13324:	cmovle r8d,r9d
   13328:	mov    r14d,esi
   1332b:	test   r8d,r8d
   1332e:	cmovs  r8d,ebx
   13332:	xor    r12d,r12d
   13335:	movsxd r8,r8d
   13338:	mov    r9,QWORD PTR [rdi+r8*8]
   1333c:	lea    edi,[r10-0x2]
   13340:	lea    r8,[rip+0x5f4a9]        # 727f0 <COEF.5132>
   13347:	jmp    13353 <Get_Reference_Pixel+0x123>
   13349:	nop    DWORD PTR [rax+0x0]
   13350:	mov    r14d,DWORD PTR [r8]
   13353:	cmp    edi,ecx
   13355:	mov    edx,ecx
   13357:	cmovle edx,edi
   1335a:	test   edx,edx
   1335c:	cmovs  edx,r12d
   13360:	add    edi,0x1
   13363:	add    r8,0x4
   13367:	movsxd rdx,edx
   1336a:	movzx  esi,WORD PTR [r9+rdx*2]
   1336f:	imul   esi,r14d
   13373:	add    ebx,esi
   13375:	cmp    r13d,edi
   13378:	jne    13350 <Get_Reference_Pixel+0x120>
   1337a:	lea    edx,[rbx+0x2f]
   1337d:	add    ebx,0x10
   13380:	mov    eax,DWORD PTR [rax+0x11bec]
   13386:	cmovs  ebx,edx
   13389:	sar    ebx,0x5
   1338c:	cmp    ebx,eax
   1338e:	cmovle eax,ebx
   13391:	test   eax,eax
   13393:	cmovs  eax,r12d
   13397:	cmp    r11d,0x1
   1339b:	je     13630 <Get_Reference_Pixel+0x400>
   133a1:	cmp    r11d,0x3
   133a5:	jne    132e5 <Get_Reference_Pixel+0xb5>
   133ab:	cmp    r10d,ecx
   133ae:	jge    13658 <Get_Reference_Pixel+0x428>
   133b4:	cmp    ebp,0xfffffff9
   133b7:	jl     133c8 <Get_Reference_Pixel+0x198>
   133b9:	lea    edx,[r10+0x1]
   133bd:	movsxd rdx,edx
   133c0:	lea    r9,[r9+rdx*2]
   133c4:	nop    DWORD PTR [rax+0x0]
   133c8:	movzx  r12d,WORD PTR [r9]
   133cc:	add    r12d,eax
   133cf:	mov    eax,r12d
   133d2:	sar    eax,1
   133d4:	jmp    132e5 <Get_Reference_Pixel+0xb5>
   133d9:	nop    DWORD PTR [rax+0x0]
   133e0:	test   r11d,r11d
   133e3:	je     13570 <Get_Reference_Pixel+0x340>
   133e9:	cmp    r11d,0x2
   133ed:	je     13670 <Get_Reference_Pixel+0x440>
   133f3:	cmp    ebx,0x2
   133f6:	je     137e0 <Get_Reference_Pixel+0x5b0>
   133fc:	xor    edx,edx
   133fe:	cmp    ebx,0x1
   13401:	mov    esi,0x0
   13406:	mov    QWORD PTR [rsp],rax
   1340a:	setne  dl
   1340d:	lea    rbp,[rip+0x5f3dc]        # 727f0 <COEF.5132>
   13414:	lea    ebx,[r10-0x2]
   13418:	add    edx,r9d
   1341b:	mov    r12,rbp
   1341e:	cmp    edx,r8d
   13421:	cmovg  edx,r8d
   13425:	test   edx,edx
   13427:	cmovs  edx,esi
   1342a:	mov    esi,0x1
   1342f:	xor    r13d,r13d
   13432:	xor    r14d,r14d
   13435:	movsxd rdx,edx
   13438:	mov    r15,QWORD PTR [rdi+rdx*8]
   1343c:	lea    edx,[r10+0x4]
   13440:	mov    eax,edx
   13442:	jmp    1344c <Get_Reference_Pixel+0x21c>
   13444:	nop    DWORD PTR [rax+0x0]
   13448:	mov    esi,DWORD PTR [r12]
   1344c:	cmp    ebx,ecx
   1344e:	mov    edx,ecx
   13450:	cmovle edx,ebx
   13453:	test   edx,edx
   13455:	cmovs  edx,r14d
   13459:	add    ebx,0x1
   1345c:	add    r12,0x4
   13460:	movsxd rdx,edx
   13463:	movzx  edx,WORD PTR [r15+rdx*2]
   13468:	imul   esi,edx
   1346b:	add    r13d,esi
   1346e:	cmp    eax,ebx
   13470:	jne    13448 <Get_Reference_Pixel+0x218>
   13472:	lea    ebx,[r13+0x2f]
   13476:	mov    rax,QWORD PTR [rsp]
   1347a:	add    r13d,0x10
   1347e:	mov    edx,0x1
   13483:	cmovs  r13d,ebx
   13487:	mov    esi,DWORD PTR [rax+0x11bec]
   1348d:	lea    eax,[r10+0x1]
   13491:	sar    r13d,0x5
   13495:	cmp    r13d,esi
   13498:	mov    ebx,r13d
   1349b:	mov    r13d,edx
   1349e:	cmovg  ebx,esi
   134a1:	test   ebx,ebx
   134a3:	cmovs  ebx,r14d
   134a7:	cmp    r11d,0x1
   134ab:	cmovne r10d,eax
   134af:	mov    eax,0x0
   134b4:	cmp    r10d,ecx
   134b7:	cmovle ecx,r10d
   134bb:	lea    r10d,[r9-0x2]
   134bf:	test   ecx,ecx
   134c1:	cmovs  ecx,eax
   134c4:	add    r9d,0x4
   134c8:	xor    r12d,r12d
   134cb:	movsxd rcx,ecx
   134ce:	lea    r11,[rcx+rcx*1]
   134d2:	xor    ecx,ecx
   134d4:	jmp    134e4 <Get_Reference_Pixel+0x2b4>
   134d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   134e0:	mov    r13d,DWORD PTR [rbp+0x0]
   134e4:	cmp    r10d,r8d
   134e7:	mov    eax,r8d
   134ea:	cmovle eax,r10d
   134ee:	test   eax,eax
   134f0:	cmovs  eax,ecx
   134f3:	add    r10d,0x1
   134f7:	add    rbp,0x4
   134fb:	cdqe   
   134fd:	mov    rax,QWORD PTR [rdi+rax*8]
   13501:	movzx  edx,WORD PTR [rax+r11*1]
   13506:	imul   edx,r13d
   1350a:	add    r12d,edx
   1350d:	cmp    r9d,r10d
   13510:	jne    134e0 <Get_Reference_Pixel+0x2b0>
   13512:	mov    eax,r12d
   13515:	lea    edx,[r12+0x2f]
   1351a:	add    eax,0x10
   1351d:	cmovs  eax,edx
   13520:	sar    eax,0x5
   13523:	cmp    eax,esi
   13525:	cmovle esi,eax
   13528:	test   esi,esi
   1352a:	cmovs  esi,ecx
   1352d:	lea    eax,[rsi+rbx*1]
   13530:	sar    eax,1
   13532:	jmp    132e5 <Get_Reference_Pixel+0xb5>
   13537:	nop    WORD PTR [rax+rax*1+0x0]
   13540:	cmp    r10d,ecx
   13543:	mov    edx,ecx
   13545:	movsxd r9,r9d
   13548:	cmovle edx,r10d
   1354c:	lea    rdi,[rdi+r9*8]
   13550:	mov    rax,QWORD PTR [rdi]
   13553:	test   edx,edx
   13555:	jns    132d2 <Get_Reference_Pixel+0xa2>
   1355b:	jmp    132e2 <Get_Reference_Pixel+0xb2>
   13560:	movsxd r10,r10d
   13563:	lea    rax,[rax+r10*2]
   13567:	jmp    132e2 <Get_Reference_Pixel+0xb2>
   1356c:	nop    DWORD PTR [rax+0x0]
   13570:	cmp    r10d,ecx
   13573:	lea    ebp,[r9-0x2]
   13577:	mov    esi,0x1
   1357c:	cmovle ecx,r10d
   13580:	lea    r14,[rip+0x5f269]        # 727f0 <COEF.5132>
   13587:	lea    r10d,[r9+0x4]
   1358b:	test   ecx,ecx
   1358d:	cmovs  ecx,r11d
   13591:	xor    r15d,r15d
   13594:	movsxd rcx,ecx
   13597:	lea    r12,[rcx+rcx*1]
   1359b:	jmp    135a3 <Get_Reference_Pixel+0x373>
   1359d:	nop    DWORD PTR [rax]
   135a0:	mov    esi,DWORD PTR [r14]
   135a3:	cmp    ebp,r8d
   135a6:	mov    edx,r8d
   135a9:	cmovle edx,ebp
   135ac:	test   edx,edx
   135ae:	cmovs  edx,r15d
   135b2:	add    ebp,0x1
   135b5:	add    r14,0x4
   135b9:	movsxd rdx,edx
   135bc:	mov    rdx,QWORD PTR [rdi+rdx*8]
   135c0:	movzx  edx,WORD PTR [rdx+r12*1]
   135c5:	imul   esi,edx
   135c8:	add    r11d,esi
   135cb:	cmp    r10d,ebp
   135ce:	jne    135a0 <Get_Reference_Pixel+0x370>
   135d0:	lea    edx,[r11+0x2f]
   135d4:	add    r11d,0x10
   135d8:	mov    eax,DWORD PTR [rax+0x11bec]
   135de:	cmovs  r11d,edx
   135e2:	sar    r11d,0x5
   135e6:	cmp    r11d,eax
   135e9:	cmovle eax,r11d
   135ed:	test   eax,eax
   135ef:	cmovs  eax,r15d
   135f3:	cmp    ebx,0x1
   135f6:	je     137a8 <Get_Reference_Pixel+0x578>
   135fc:	cmp    ebx,0x3
   135ff:	jne    132e5 <Get_Reference_Pixel+0xb5>
   13605:	cmp    r9d,r8d
   13608:	jge    13917 <Get_Reference_Pixel+0x6e7>
   1360e:	cmp    r13d,0xfffffff9
   13612:	jl     1361f <Get_Reference_Pixel+0x3ef>
   13614:	lea    edx,[r9+0x1]
   13618:	movsxd rdx,edx
   1361b:	lea    rdi,[rdi+rdx*8]
   1361f:	mov    rdx,QWORD PTR [rdi]
   13622:	movzx  edx,WORD PTR [rdx+rcx*2]
   13626:	add    eax,edx
   13628:	sar    eax,1
   1362a:	jmp    132e5 <Get_Reference_Pixel+0xb5>
   1362f:	nop
   13630:	cmp    r10d,ecx
   13633:	mov    edx,ecx
   13635:	cmovle edx,r10d
   13639:	test   edx,edx
   1363b:	js     133c8 <Get_Reference_Pixel+0x198>
   13641:	cmp    r10d,ecx
   13644:	jg     13660 <Get_Reference_Pixel+0x430>
   13646:	movsxd r10,r10d
   13649:	lea    r9,[r9+r10*2]
   1364d:	jmp    133c8 <Get_Reference_Pixel+0x198>
   13652:	nop    WORD PTR [rax+rax*1+0x0]
   13658:	test   ecx,ecx
   1365a:	js     133c8 <Get_Reference_Pixel+0x198>
   13660:	movsxd rcx,ecx
   13663:	lea    r9,[r9+rcx*2]
   13667:	jmp    133c8 <Get_Reference_Pixel+0x198>
   1366c:	nop    DWORD PTR [rax+0x0]
   13670:	lea    r13,[rsp+0x20]
   13675:	lea    esi,[r9+0x4]
   13679:	mov    QWORD PTR [rsp+0x10],rax
   1367e:	xor    ebp,ebp
   13680:	mov    QWORD PTR [rsp],r13
   13684:	lea    edx,[r10-0x2]
   13688:	lea    r12d,[r9-0x2]
   1368c:	mov    eax,esi
   1368e:	lea    r15,[rip+0x5f15b]        # 727f0 <COEF.5132>
   13695:	mov    DWORD PTR [rsp+0x1c],ebx
   13699:	mov    ebx,edx
   1369b:	mov    QWORD PTR [rsp+0x8],r15
   136a0:	lea    r15d,[r10+0x4]
   136a4:	nop    DWORD PTR [rax+0x0]
   136a8:	cmp    r12d,r8d
   136ab:	mov    edx,r8d
   136ae:	mov    r9d,ebx
   136b1:	mov    esi,0x1
   136b6:	cmovle edx,r12d
   136ba:	lea    r10,[rip+0x5f12f]        # 727f0 <COEF.5132>
   136c1:	test   edx,edx
   136c3:	cmovs  edx,ebp
   136c6:	xor    r11d,r11d
   136c9:	movsxd rdx,edx
   136cc:	mov    r14,QWORD PTR [rdi+rdx*8]
   136d0:	jmp    136db <Get_Reference_Pixel+0x4ab>
   136d2:	nop    WORD PTR [rax+rax*1+0x0]
   136d8:	mov    esi,DWORD PTR [r10]
   136db:	cmp    r9d,ecx
   136de:	mov    edx,ecx
   136e0:	cmovle edx,r9d
   136e4:	test   edx,edx
   136e6:	cmovs  edx,ebp
   136e9:	add    r9d,0x1
   136ed:	add    r10,0x4
   136f1:	movsxd rdx,edx
   136f4:	movzx  edx,WORD PTR [r14+rdx*2]
   136f9:	imul   esi,edx
   136fc:	add    r11d,esi
   136ff:	cmp    r15d,r9d
   13702:	jne    136d8 <Get_Reference_Pixel+0x4a8>
   13704:	add    r12d,0x1
   13708:	mov    DWORD PTR [r13+0x0],r11d
   1370c:	add    r13,0x4
   13710:	cmp    eax,r12d
   13713:	jne    136a8 <Get_Reference_Pixel+0x478>
   13715:	mov    rax,QWORD PTR [rsp+0x10]
   1371a:	mov    ebx,DWORD PTR [rsp+0x1c]
   1371e:	xor    edx,edx
   13720:	mov    ecx,0x1
   13725:	mov    rdi,QWORD PTR [rsp]
   13729:	mov    r8,QWORD PTR [rsp+0x8]
   1372e:	xor    esi,esi
   13730:	jmp    1373c <Get_Reference_Pixel+0x50c>
   13732:	nop    WORD PTR [rax+rax*1+0x0]
   13738:	mov    ecx,DWORD PTR [r8+rdx*1]
   1373c:	imul   ecx,DWORD PTR [rdi+rdx*1]
   13740:	add    rdx,0x4
   13744:	add    esi,ecx
   13746:	cmp    rdx,0x18
   1374a:	jne    13738 <Get_Reference_Pixel+0x508>
   1374c:	mov    ecx,DWORD PTR [rax+0x11bec]
   13752:	lea    eax,[rsi+0x5ff]
   13758:	mov    edi,DWORD PTR [rsp+0x28]
   1375c:	add    esi,0x200
   13762:	cmovns eax,esi
   13765:	sar    eax,0xa
   13768:	cmp    eax,ecx
   1376a:	cmovg  eax,ecx
   1376d:	xor    esi,esi
   1376f:	test   eax,eax
   13771:	cmovs  eax,esi
   13774:	cmp    ebx,0x1
   13777:	je     13786 <Get_Reference_Pixel+0x556>
   13779:	cmp    ebx,0x3
   1377c:	jne    132e5 <Get_Reference_Pixel+0xb5>
   13782:	mov    edi,DWORD PTR [rsp+0x2c]
   13786:	lea    edx,[rdi+0x2f]
   13789:	add    edi,0x10
   1378c:	cmovns edx,edi
   1378f:	sar    edx,0x5
   13792:	cmp    edx,ecx
   13794:	cmovg  edx,ecx
   13797:	test   edx,edx
   13799:	cmovs  edx,esi
   1379c:	add    eax,edx
   1379e:	sar    eax,1
   137a0:	jmp    132e5 <Get_Reference_Pixel+0xb5>
   137a5:	nop    DWORD PTR [rax]
   137a8:	cmp    r9d,r8d
   137ab:	mov    edx,r8d
   137ae:	cmovle edx,r9d
   137b2:	test   edx,edx
   137b4:	js     137c6 <Get_Reference_Pixel+0x596>
   137b6:	cmp    r9d,r8d
   137b9:	jle    1392c <Get_Reference_Pixel+0x6fc>
   137bf:	movsxd r8,r8d
   137c2:	lea    rdi,[rdi+r8*8]
   137c6:	mov    rdx,QWORD PTR [rdi]
   137c9:	movzx  r12d,WORD PTR [rdx+rcx*2]
   137ce:	add    eax,r12d
   137d1:	sar    eax,1
   137d3:	jmp    132e5 <Get_Reference_Pixel+0xb5>
   137d8:	nop    DWORD PTR [rax+rax*1+0x0]
   137e0:	lea    ebx,[r10+0x4]
   137e4:	mov    QWORD PTR [rsp+0x10],rax
   137e9:	lea    r12d,[r10-0x2]
   137ed:	xor    r14d,r14d
   137f0:	lea    r13,[rsp+0x20]
   137f5:	mov    DWORD PTR [rsp+0x1c],r11d
   137fa:	lea    r15d,[r9+0x4]
   137fe:	mov    eax,ebx
   13800:	lea    rsi,[rip+0x5efe9]        # 727f0 <COEF.5132>
   13807:	mov    QWORD PTR [rsp],r13
   1380b:	mov    QWORD PTR [rsp+0x8],rsi
   13810:	lea    esi,[r9-0x2]
   13814:	mov    r11d,esi
   13817:	nop    WORD PTR [rax+rax*1+0x0]
   13820:	cmp    r12d,ecx
   13823:	mov    ebp,ecx
   13825:	mov    r9d,r11d
   13828:	mov    esi,0x1
   1382d:	cmovle ebp,r12d
   13831:	lea    r10,[rip+0x5efb8]        # 727f0 <COEF.5132>
   13838:	test   ebp,ebp
   1383a:	cmovs  ebp,r14d
   1383e:	xor    ebx,ebx
   13840:	movsxd rbp,ebp
   13843:	add    rbp,rbp
   13846:	jmp    13853 <Get_Reference_Pixel+0x623>
   13848:	nop    DWORD PTR [rax+rax*1+0x0]
   13850:	mov    esi,DWORD PTR [r10]
   13853:	cmp    r9d,r8d
   13856:	mov    edx,r8d
   13859:	cmovle edx,r9d
   1385d:	test   edx,edx
   1385f:	cmovs  edx,r14d
   13863:	add    r9d,0x1
   13867:	add    r10,0x4
   1386b:	movsxd rdx,edx
   1386e:	mov    rdx,QWORD PTR [rdi+rdx*8]
   13872:	movzx  edx,WORD PTR [rdx+rbp*1]
   13876:	imul   esi,edx
   13879:	add    ebx,esi
   1387b:	cmp    r15d,r9d
   1387e:	jne    13850 <Get_Reference_Pixel+0x620>
   13880:	add    r12d,0x1
   13884:	mov    DWORD PTR [r13+0x0],ebx
   13888:	add    r13,0x4
   1388c:	cmp    eax,r12d
   1388f:	jne    13820 <Get_Reference_Pixel+0x5f0>
   13891:	mov    rax,QWORD PTR [rsp+0x10]
   13896:	mov    r11d,DWORD PTR [rsp+0x1c]
   1389b:	xor    edx,edx
   1389d:	xor    esi,esi
   1389f:	mov    rdi,QWORD PTR [rsp]
   138a3:	mov    r8,QWORD PTR [rsp+0x8]
   138a8:	mov    ecx,0x1
   138ad:	jmp    138b4 <Get_Reference_Pixel+0x684>
   138af:	nop
   138b0:	mov    ecx,DWORD PTR [r8+rdx*1]
   138b4:	imul   ecx,DWORD PTR [rdi+rdx*1]
   138b8:	add    rdx,0x4
   138bc:	add    esi,ecx
   138be:	cmp    rdx,0x18
   138c2:	jne    138b0 <Get_Reference_Pixel+0x680>
   138c4:	mov    ecx,DWORD PTR [rax+0x11bec]
   138ca:	lea    eax,[rsi+0x5ff]
   138d0:	add    esi,0x200
   138d6:	cmovs  esi,eax
   138d9:	sar    esi,0xa
   138dc:	cmp    esi,ecx
   138de:	mov    eax,esi
   138e0:	mov    esi,DWORD PTR [rsp+0x28]
   138e4:	cmovg  eax,ecx
   138e7:	xor    edi,edi
   138e9:	test   eax,eax
   138eb:	cmovs  eax,edi
   138ee:	cmp    r11d,0x1
   138f2:	je     138f8 <Get_Reference_Pixel+0x6c8>
   138f4:	mov    esi,DWORD PTR [rsp+0x2c]
   138f8:	lea    edx,[rsi+0x2f]
   138fb:	add    esi,0x10
   138fe:	cmovns edx,esi
   13901:	sar    edx,0x5
   13904:	cmp    edx,ecx
   13906:	cmovg  edx,ecx
   13909:	test   edx,edx
   1390b:	cmovs  edx,edi
   1390e:	add    eax,edx
   13910:	sar    eax,1
   13912:	jmp    132e5 <Get_Reference_Pixel+0xb5>
   13917:	test   r8d,r8d
   1391a:	js     1361f <Get_Reference_Pixel+0x3ef>
   13920:	movsxd r8,r8d
   13923:	lea    rdi,[rdi+r8*8]
   13927:	jmp    1361f <Get_Reference_Pixel+0x3ef>
   1392c:	movsxd r9,r9d
   1392f:	lea    rdi,[rdi+r9*8]
   13933:	jmp    137c6 <Get_Reference_Pixel+0x596>
   13938:	call   4390 <__stack_chk_fail@plt>
   1393d:	nop    DWORD PTR [rax]

0000000000013940 <Get_Reference_Block>:
   13940:	endbr64 
   13944:	push   r15
   13946:	shl    esi,0x4
   13949:	shl    edx,0x4
   1394c:	push   r14
   1394e:	lea    r15d,[rsi+r8*1]
   13952:	lea    eax,[rdx+rcx*1]
   13955:	push   r13
   13957:	lea    ecx,[r15+0x10]
   1395b:	mov    r13,r9
   1395e:	push   r12
   13960:	lea    r12d,[rax+0x10]
   13964:	push   rbp
   13965:	mov    rbp,rdi
   13968:	push   rbx
   13969:	sub    rsp,0x18
   1396d:	mov    DWORD PTR [rsp+0x8],eax
   13971:	mov    DWORD PTR [rsp+0xc],ecx
   13975:	mov    ebx,DWORD PTR [rsp+0x8]
   13979:	mov    r14,QWORD PTR [r13+0x0]
   1397d:	mov    edx,ebx
   1397f:	mov    esi,r15d
   13982:	mov    rdi,rbp
   13985:	add    ebx,0x4
   13988:	call   13230 <Get_Reference_Pixel>
   1398d:	add    r14,0x2
   13991:	movzx  eax,al
   13994:	mov    WORD PTR [r14-0x2],ax
   13999:	cmp    r12d,ebx
   1399c:	jne    1397d <Get_Reference_Block+0x3d>
   1399e:	add    r13,0x8
   139a2:	add    r15d,0x4
   139a6:	cmp    DWORD PTR [rsp+0xc],r15d
   139ab:	jne    13975 <Get_Reference_Block+0x35>
   139ad:	add    rsp,0x18
   139b1:	pop    rbx
   139b2:	pop    rbp
   139b3:	pop    r12
   139b5:	pop    r13
   139b7:	pop    r14
   139b9:	pop    r15
   139bb:	ret    
   139bc:	nop    DWORD PTR [rax+0x0]

00000000000139c0 <decode_one_b8block>:
   139c0:	endbr64 
   139c4:	push   r15
   139c6:	push   r14
   139c8:	mov    r14d,esi
   139cb:	mov    esi,edx
   139cd:	movsxd rdx,ecx
   139d0:	push   r13
   139d2:	movsxd r13,edi
   139d5:	mov    edi,esi
   139d7:	push   r12
   139d9:	shr    edi,0x1f
   139dc:	push   rbp
   139dd:	mov    r12d,edi
   139e0:	push   rbx
   139e1:	add    r12d,esi
   139e4:	lea    rbx,[r13*8+0x0]
   139ec:	sar    r12d,1
   139ef:	shl    r12d,0x3
   139f3:	sub    rsp,0x4e8
   139fa:	mov    rcx,QWORD PTR [rip+0x74baf]        # 885b0 <img>
   13a01:	mov    DWORD PTR [rsp+0x48],r8d
   13a06:	mov    r8d,DWORD PTR [rcx+0x18]
   13a0a:	mov    rax,QWORD PTR fs:0x28
   13a13:	mov    QWORD PTR [rsp+0x4d8],rax
   13a1b:	xor    eax,eax
   13a1d:	lea    eax,[rsi+rdi*1]
   13a20:	mov    QWORD PTR [rsp+0x8],rbx
   13a25:	and    eax,0x1
   13a28:	sub    eax,edi
   13a2a:	mov    rdi,QWORD PTR [rip+0x74b67]        # 88598 <decs>
   13a31:	shl    eax,0x3
   13a34:	cmp    r8d,0x2
   13a38:	je     13d70 <decode_one_b8block+0x3b0>
   13a3e:	mov    ebx,DWORD PTR [rcx]
   13a40:	mov    esi,eax
   13a42:	sar    esi,0x2
   13a45:	mov    DWORD PTR [rsp+0x20],ebx
   13a49:	mov    ebx,DWORD PTR [rip+0x7509d]        # 88aec <start_frame_no_in_this_IGOP>
   13a4f:	mov    DWORD PTR [rsp+0x10],ebx
   13a53:	mov    ebx,DWORD PTR [rcx+0x20]
   13a56:	mov    DWORD PTR [rsp+0x18],ebx
   13a5a:	mov    ebx,r12d
   13a5d:	sar    ebx,0x2
   13a60:	mov    DWORD PTR [rsp+0x4],ebx
   13a64:	test   r14d,r14d
   13a67:	je     13b20 <decode_one_b8block+0x160>
   13a6d:	lea    ebx,[rdx-0x1]
   13a70:	mov    DWORD PTR [rsp+0x24],ebx
   13a74:	cmp    ebx,0x6
   13a77:	ja     13e13 <decode_one_b8block+0x453>
   13a7d:	lea    r15,[rdx*8+0x0]
   13a85:	movsxd rdx,DWORD PTR [rsp+0x4]
   13a8a:	movsxd rsi,esi
   13a8d:	movsxd rbp,DWORD PTR [rsp+0x48]
   13a92:	mov    QWORD PTR [rsp+0x28],rsi
   13a97:	mov    rbx,QWORD PTR [rcx+0x118f8]
   13a9e:	lea    r9,[rdx*8+0x0]
   13aa6:	mov    QWORD PTR [rsp+0x38],rdx
   13aab:	shl    rbp,0x3
   13aaf:	lea    rdx,[r9+0x10]
   13ab3:	mov    DWORD PTR [rsp+0x4c],eax
   13ab7:	mov    QWORD PTR [rsp+0x40],rdx
   13abc:	lea    rdx,[rsp+rsi*4+0x50]
   13ac1:	add    rsi,0x2
   13ac5:	mov    QWORD PTR [rsp+0x30],rdx
   13aca:	mov    rax,rsi
   13acd:	mov    rsi,QWORD PTR [rsp+0x30]
   13ad2:	mov    rdx,QWORD PTR [rsp+0x28]
   13ad7:	lea    rsi,[rsi+r9*2]
   13adb:	mov    r10,QWORD PTR [rbx+rdx*8]
   13adf:	add    rdx,0x1
   13ae3:	add    rsi,0x4
   13ae7:	mov    r10,QWORD PTR [r10+r9*1]
   13aeb:	mov    r10,QWORD PTR [r10]
   13aee:	mov    r10,QWORD PTR [r10+rbp*1]
   13af2:	mov    r10,QWORD PTR [r10+r15*1]
   13af6:	movsx  r11d,WORD PTR [r10]
   13afa:	movsx  r10d,WORD PTR [r10+0x2]
   13aff:	mov    DWORD PTR [rsi-0x4],r11d
   13b03:	mov    DWORD PTR [rsi+0x3c],r10d
   13b07:	cmp    rdx,rax
   13b0a:	jne    13adb <decode_one_b8block+0x11b>
   13b0c:	add    r9,0x8
   13b10:	cmp    QWORD PTR [rsp+0x40],r9
   13b15:	jne    13acd <decode_one_b8block+0x10d>
   13b17:	mov    eax,DWORD PTR [rsp+0x4c]
   13b1b:	jmp    13e9a <decode_one_b8block+0x4da>
   13b20:	test   r8d,r8d
   13b23:	jne    13ff0 <decode_one_b8block+0x630>
   13b29:	movsxd r12,r12d
   13b2c:	movsxd r15,eax
   13b2f:	mov    r9,r12
   13b32:	shl    r9,0x4
   13b36:	lea    rax,[r9+r15*1]
   13b3a:	shl    rax,0x2
   13b3e:	lea    r9,[rsp+rax*1+0x2d0]
   13b46:	lea    r10,[rsp+rax*1+0x2f0]
   13b4e:	xchg   ax,ax
   13b50:	lea    rax,[r9-0x200]
   13b57:	nop    WORD PTR [rax+rax*1+0x0]
   13b60:	mov    DWORD PTR [rax],0x0
   13b66:	add    rax,0x40
   13b6a:	cmp    r9,rax
   13b6d:	jne    13b60 <decode_one_b8block+0x1a0>
   13b6f:	add    r9,0x4
   13b73:	cmp    r10,r9
   13b76:	jne    13b50 <decode_one_b8block+0x190>
   13b78:	movsxd rax,DWORD PTR [rsp+0x4]
   13b7d:	movsxd rbx,esi
   13b80:	add    esi,0x1
   13b83:	sub    edx,0x1
   13b86:	mov    QWORD PTR [rsp+0x28],rbx
   13b8b:	mov    r14,rax
   13b8e:	mov    QWORD PTR [rsp+0x38],rax
   13b93:	shl    rax,0x2
   13b97:	lea    r9,[rax+rbx*1]
   13b9b:	lea    ebp,[r14+0x1]
   13b9f:	mov    DWORD PTR [rsp+r9*4+0x90],0x0
   13bab:	mov    DWORD PTR [rsp+r9*4+0x50],0x0
   13bb4:	movsxd r9,esi
   13bb7:	add    rax,r9
   13bba:	mov    DWORD PTR [rsp+rax*4+0x90],0x0
   13bc5:	mov    DWORD PTR [rsp+rax*4+0x50],0x0
   13bcd:	movsxd rax,ebp
   13bd0:	shl    rax,0x2
   13bd4:	lea    rsi,[rax+rbx*1]
   13bd8:	add    rax,r9
   13bdb:	mov    DWORD PTR [rsp+rsi*4+0x90],0x0
   13be6:	mov    DWORD PTR [rsp+rsi*4+0x50],0x0
   13bee:	mov    DWORD PTR [rsp+rax*4+0x90],0x0
   13bf9:	mov    DWORD PTR [rsp+rax*4+0x50],0x0
   13c01:	cmp    edx,0x6
   13c04:	jbe    13c16 <decode_one_b8block+0x256>
   13c06:	test   r8d,r8d
   13c09:	jne    1400f <decode_one_b8block+0x64f>
   13c0f:	mov    eax,DWORD PTR [rsp+0x4]
   13c13:	lea    ebp,[rax+0x1]
   13c16:	lea    rax,[rsp+0xd0]
   13c1e:	mov    QWORD PTR [rsp+0x30],rax
   13c23:	mov    eax,DWORD PTR [rsp+0x20]
   13c27:	sub    eax,DWORD PTR [rsp+0x10]
   13c2b:	sub    eax,0x1
   13c2e:	mov    rsi,QWORD PTR [rsp+0x28]
   13c33:	mov    ebx,DWORD PTR [rsp+0x4]
   13c37:	cdq    
   13c38:	mov    r9,QWORD PTR [rdi+0x20]
   13c3c:	idiv   DWORD PTR [rsp+0x18]
   13c40:	mov    rax,QWORD PTR [rsp+0x38]
   13c45:	lea    rax,[rsi+rax*4]
   13c49:	lea    r12d,[rbx*4+0x0]
   13c51:	lea    rax,[rsp+rax*4+0x50]
   13c56:	mov    DWORD PTR [rsp+0x24],r12d
   13c5b:	mov    QWORD PTR [rsp+0x10],rax
   13c60:	lea    eax,[rbx+0x2]
   13c63:	mov    rbx,QWORD PTR [rsp+0x8]
   13c68:	mov    DWORD PTR [rsp+0x38],eax
   13c6c:	lea    rax,[rsi+0x2]
   13c70:	mov    QWORD PTR [rsp+0x18],rax
   13c75:	mov    DWORD PTR [rsp+0x20],edx
   13c79:	nop    DWORD PTR [rax+0x0]
   13c80:	movsxd rax,DWORD PTR [rsp+0x24]
   13c85:	mov    r14,QWORD PTR [rsp+0x10]
   13c8a:	mov    r13,QWORD PTR [rsp+0x28]
   13c8f:	shl    rax,0x6
   13c93:	add    rax,QWORD PTR [rsp+0x30]
   13c98:	mov    QWORD PTR [rsp+0x8],rax
   13c9d:	mov    r15d,DWORD PTR [rcx+0x90]
   13ca4:	mov    r12d,DWORD PTR [rsp+0x4]
   13ca9:	add    r12d,DWORD PTR [rcx+0x94]
   13cb0:	add    r15d,r13d
   13cb3:	cmp    r8d,0x1
   13cb7:	je     13fc0 <decode_one_b8block+0x600>
   13cbd:	mov    rdx,QWORD PTR [rdi+0x10]
   13cc1:	movsxd rax,DWORD PTR [rsp+0x20]
   13cc6:	mov    esi,r12d
   13cc9:	mov    ecx,DWORD PTR [r14]
   13ccc:	mov    r8d,DWORD PTR [r14+0x40]
   13cd0:	mov    rdx,QWORD PTR [rdx+rbx*1]
   13cd4:	mov    rdi,QWORD PTR [rdx+rax*8]
   13cd8:	mov    edx,r15d
   13cdb:	shl    r15d,0x2
   13cdf:	movsxd r15,r15d
   13ce2:	call   13940 <Get_Reference_Block>
   13ce7:	mov    rdi,QWORD PTR [rip+0x748aa]        # 88598 <decs>
   13cee:	mov    rcx,r13
   13cf1:	add    r15,r15
   13cf4:	lea    esi,[r12*4+0x0]
   13cfc:	shl    rcx,0x4
   13d00:	add    rcx,QWORD PTR [rsp+0x8]
   13d05:	mov    rax,QWORD PTR [rdi+0x8]
   13d09:	movsxd rsi,esi
   13d0c:	mov    r9,QWORD PTR [rdi+0x20]
   13d10:	mov    rax,QWORD PTR [rax+rbx*1]
   13d14:	lea    r11,[rax+rsi*8]
   13d18:	xor    esi,esi
   13d1a:	mov    r8,QWORD PTR [r11+rsi*1]
   13d1e:	mov    r10,QWORD PTR [r9+rsi*1]
   13d22:	xor    eax,eax
   13d24:	add    r8,r15
   13d27:	movzx  edx,WORD PTR [r10+rax*1]
   13d2c:	add    dx,WORD PTR [rcx+rax*2]
   13d30:	mov    WORD PTR [r8+rax*1],dx
   13d35:	add    rax,0x2
   13d39:	cmp    rax,0x8
   13d3d:	jne    13d27 <decode_one_b8block+0x367>
   13d3f:	add    rsi,0x8
   13d43:	add    rcx,0x40
   13d47:	cmp    rsi,0x20
   13d4b:	jne    13d1a <decode_one_b8block+0x35a>
   13d4d:	add    r13,0x1
   13d51:	add    r14,0x4
   13d55:	cmp    QWORD PTR [rsp+0x18],r13
   13d5a:	je     13f90 <decode_one_b8block+0x5d0>
   13d60:	mov    rcx,QWORD PTR [rip+0x74849]        # 885b0 <img>
   13d67:	mov    r8d,DWORD PTR [rcx+0x18]
   13d6b:	jmp    13c9d <decode_one_b8block+0x2dd>
   13d70:	mov    rdx,QWORD PTR [rip+0x76c31]        # 8a9a8 <enc_picture>
   13d77:	movsxd rsi,DWORD PTR [rcx+0x98]
   13d7e:	cdqe   
   13d80:	movsxd r12,r12d
   13d83:	mov    r9,QWORD PTR [rdx+0x1918]
   13d8a:	mov    rdx,QWORD PTR [rdi+0x8]
   13d8e:	lea    r11,[rax+rsi*1+0x8]
   13d93:	add    r11,r11
   13d96:	mov    r8,QWORD PTR [rdx+r13*8]
   13d9a:	lea    rdx,[rax+rsi*1]
   13d9e:	movsxd rax,DWORD PTR [rcx+0x9c]
   13da5:	add    rdx,rdx
   13da8:	lea    r10,[r12+rax*1]
   13dac:	lea    rdi,[r12+rax*1+0x8]
   13db1:	shl    r10,0x3
   13db5:	shl    rdi,0x3
   13db9:	nop    DWORD PTR [rax+0x0]
   13dc0:	mov    rax,r10
   13dc3:	nop    DWORD PTR [rax+rax*1+0x0]
   13dc8:	mov    rcx,QWORD PTR [r9+rax*1]
   13dcc:	movzx  esi,WORD PTR [rcx+rdx*1]
   13dd0:	mov    rcx,QWORD PTR [r8+rax*1]
   13dd4:	add    rax,0x8
   13dd8:	mov    WORD PTR [rcx+rdx*1],si
   13ddc:	cmp    rdi,rax
   13ddf:	jne    13dc8 <decode_one_b8block+0x408>
   13de1:	add    rdx,0x2
   13de5:	cmp    r11,rdx
   13de8:	jne    13dc0 <decode_one_b8block+0x400>
   13dea:	mov    rax,QWORD PTR [rsp+0x4d8]
   13df2:	xor    rax,QWORD PTR fs:0x28
   13dfb:	jne    14040 <decode_one_b8block+0x680>
   13e01:	add    rsp,0x4e8
   13e08:	pop    rbx
   13e09:	pop    rbp
   13e0a:	pop    r12
   13e0c:	pop    r13
   13e0e:	pop    r14
   13e10:	pop    r15
   13e12:	ret    
   13e13:	mov    edx,DWORD PTR [rsp+0x4]
   13e17:	movsxd rbx,esi
   13e1a:	lea    r9d,[rsi+0x1]
   13e1e:	movsxd r9,r9d
   13e21:	mov    QWORD PTR [rsp+0x28],rbx
   13e26:	movsxd rsi,edx
   13e29:	lea    ebp,[rdx+0x1]
   13e2c:	lea    rdx,[rsi*4+0x0]
   13e34:	mov    QWORD PTR [rsp+0x38],rsi
   13e39:	lea    rsi,[rdx+rbx*1]
   13e3d:	add    rdx,r9
   13e40:	mov    DWORD PTR [rsp+rsi*4+0x90],0x0
   13e4b:	mov    DWORD PTR [rsp+rsi*4+0x50],0x0
   13e53:	mov    DWORD PTR [rsp+rdx*4+0x90],0x0
   13e5e:	mov    DWORD PTR [rsp+rdx*4+0x50],0x0
   13e66:	movsxd rdx,ebp
   13e69:	shl    rdx,0x2
   13e6d:	lea    rsi,[rdx+rbx*1]
   13e71:	add    rdx,r9
   13e74:	mov    DWORD PTR [rsp+rsi*4+0x90],0x0
   13e7f:	mov    DWORD PTR [rsp+rsi*4+0x50],0x0
   13e87:	mov    DWORD PTR [rsp+rdx*4+0x90],0x0
   13e92:	mov    DWORD PTR [rsp+rdx*4+0x50],0x0
   13e9a:	movsxd r15,eax
   13e9d:	lea    rax,[rsp+0xd0]
   13ea5:	movsxd r12,r12d
   13ea8:	mov    rbx,QWORD PTR [rdi]
   13eab:	mov    QWORD PTR [rsp+0x30],rax
   13eb0:	lea    r9,[r15*4+0x0]
   13eb8:	lea    r11,[r12+0x8]
   13ebd:	lea    r10,[rax+r9*1]
   13ec1:	lea    rbp,[r9+0x20]
   13ec5:	nop    DWORD PTR [rax]
   13ec8:	mov    rax,r12
   13ecb:	nop    DWORD PTR [rax+rax*1+0x0]
   13ed0:	mov    rsi,QWORD PTR [rbx+rax*8]
   13ed4:	mov    rdx,rax
   13ed7:	add    rax,0x1
   13edb:	shl    rdx,0x6
   13edf:	mov    esi,DWORD PTR [rsi+r9*1]
   13ee3:	mov    DWORD PTR [r10+rdx*1],esi
   13ee7:	cmp    r11,rax
   13eea:	jne    13ed0 <decode_one_b8block+0x510>
   13eec:	add    r9,0x4
   13ef0:	add    r10,0x4
   13ef4:	cmp    rbp,r9
   13ef7:	jne    13ec8 <decode_one_b8block+0x508>
   13ef9:	mov    eax,DWORD PTR [rsp+0x4]
   13efd:	cmp    DWORD PTR [rsp+0x24],0x6
   13f02:	lea    ebp,[rax+0x1]
   13f05:	jbe    13c23 <decode_one_b8block+0x263>
   13f0b:	test   r14d,r14d
   13f0e:	je     13c06 <decode_one_b8block+0x246>
   13f14:	mov    rax,QWORD PTR [rip+0x76a8d]        # 8a9a8 <enc_picture>
   13f1b:	mov    r9,QWORD PTR [rax+0x1918]
   13f22:	mov    rax,QWORD PTR [rdi+0x8]
   13f26:	mov    r8,QWORD PTR [rax+r13*8]
   13f2a:	movsxd rax,DWORD PTR [rcx+0x98]
   13f31:	lea    rdx,[r15+rax*1]
   13f35:	lea    r11,[rax+r15*1+0x8]
   13f3a:	movsxd rax,DWORD PTR [rcx+0x9c]
   13f41:	add    rdx,rdx
   13f44:	add    r11,r11
   13f47:	lea    r10,[r12+rax*1]
   13f4b:	lea    rdi,[rax+r12*1+0x8]
   13f50:	shl    r10,0x3
   13f54:	shl    rdi,0x3
   13f58:	nop    DWORD PTR [rax+rax*1+0x0]
   13f60:	mov    rax,r10
   13f63:	nop    DWORD PTR [rax+rax*1+0x0]
   13f68:	mov    rcx,QWORD PTR [r9+rax*1]
   13f6c:	movzx  esi,WORD PTR [rcx+rdx*1]
   13f70:	mov    rcx,QWORD PTR [r8+rax*1]
   13f74:	add    rax,0x8
   13f78:	mov    WORD PTR [rcx+rdx*1],si
   13f7c:	cmp    rdi,rax
   13f7f:	jne    13f68 <decode_one_b8block+0x5a8>
   13f81:	add    rdx,0x2
   13f85:	cmp    r11,rdx
   13f88:	jne    13f60 <decode_one_b8block+0x5a0>
   13f8a:	jmp    13dea <decode_one_b8block+0x42a>
   13f8f:	nop
   13f90:	add    DWORD PTR [rsp+0x24],0x4
   13f95:	add    QWORD PTR [rsp+0x10],0x10
   13f9b:	mov    DWORD PTR [rsp+0x4],ebp
   13f9f:	cmp    ebp,DWORD PTR [rsp+0x38]
   13fa3:	je     13dea <decode_one_b8block+0x42a>
   13fa9:	mov    rcx,QWORD PTR [rip+0x74600]        # 885b0 <img>
   13fb0:	add    ebp,0x1
   13fb3:	mov    r8d,DWORD PTR [rcx+0x18]
   13fb7:	jmp    13c80 <decode_one_b8block+0x2c0>
   13fbc:	nop    DWORD PTR [rax+0x0]
   13fc0:	mov    rax,QWORD PTR [rip+0x769e9]        # 8a9b0 <enc_frame_picture>
   13fc7:	cmp    QWORD PTR [rip+0x769da],rax        # 8a9a8 <enc_picture>
   13fce:	je     13cbd <decode_one_b8block+0x2fd>
   13fd4:	mov    eax,DWORD PTR [rcx]
   13fd6:	sub    eax,DWORD PTR [rip+0x74b10]        # 88aec <start_frame_no_in_this_IGOP>
   13fdc:	sub    eax,DWORD PTR [rsp+0x48]
   13fe0:	sub    eax,0x2
   13fe3:	cdq    
   13fe4:	idiv   DWORD PTR [rcx+0x20]
   13fe7:	mov    DWORD PTR [rsp+0x20],edx
   13feb:	jmp    13cbd <decode_one_b8block+0x2fd>
   13ff0:	cmp    r8d,0x1
   13ff4:	jne    13a6d <decode_one_b8block+0xad>
   13ffa:	mov    r9d,DWORD PTR [rcx+0x11b30]
   14001:	test   r9d,r9d
   14004:	jg     13b29 <decode_one_b8block+0x169>
   1400a:	jmp    13a6d <decode_one_b8block+0xad>
   1400f:	cmp    r8d,0x1
   14013:	jne    13f14 <decode_one_b8block+0x554>
   14019:	mov    eax,DWORD PTR [rsp+0x4]
   1401d:	lea    ebp,[rax+0x1]
   14020:	lea    rax,[rsp+0xd0]
   14028:	mov    QWORD PTR [rsp+0x30],rax
   1402d:	mov    eax,DWORD PTR [rcx+0x11b30]
   14033:	test   eax,eax
   14035:	jg     13c23 <decode_one_b8block+0x263>
   1403b:	jmp    13f14 <decode_one_b8block+0x554>
   14040:	call   4390 <__stack_chk_fail@plt>
   14045:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000014050 <DecOneForthPix>:
   14050:	endbr64 
   14054:	mov    rcx,QWORD PTR [rip+0x74555]        # 885b0 <img>
   1405b:	mov    eax,DWORD PTR [rcx]
   1405d:	sub    eax,DWORD PTR [rip+0x74a89]        # 88aec <start_frame_no_in_this_IGOP>
   14063:	cdq    
   14064:	idiv   DWORD PTR [rcx+0x11ab8]
   1406a:	mov    eax,DWORD PTR [rcx+0x3c]
   1406d:	test   eax,eax
   1406f:	jle    140c0 <DecOneForthPix+0x70>
   14071:	movsxd rax,edx
   14074:	push   r12
   14076:	lea    r12,[rsi+rax*8]
   1407a:	push   rbp
   1407b:	mov    rbp,rdi
   1407e:	push   rbx
   1407f:	xor    ebx,ebx
   14081:	nop    DWORD PTR [rax+0x0]
   14088:	mov    rax,QWORD PTR [r12]
   1408c:	movsxd rdx,DWORD PTR [rcx+0x34]
   14090:	mov    rsi,QWORD PTR [rbp+rbx*8+0x0]
   14095:	mov    rdi,QWORD PTR [rax+rbx*8]
   14099:	add    rdx,rdx
   1409c:	add    rbx,0x1
   140a0:	call   4440 <memcpy@plt>
   140a5:	mov    rcx,QWORD PTR [rip+0x74504]        # 885b0 <img>
   140ac:	cmp    DWORD PTR [rcx+0x3c],ebx
   140af:	jg     14088 <DecOneForthPix+0x38>
   140b1:	pop    rbx
   140b2:	pop    rbp
   140b3:	pop    r12
   140b5:	ret    
   140b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   140c0:	ret    
   140c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   140cc:	nop    DWORD PTR [rax+0x0]

00000000000140d0 <compute_residue_b8block>:
   140d0:	endbr64 
   140d4:	mov    eax,edi
   140d6:	push   r13
   140d8:	mov    rcx,QWORD PTR [rip+0x744d1]        # 885b0 <img>
   140df:	shr    eax,0x1f
   140e2:	push   r12
   140e4:	lea    r8d,[rdi+rax*1]
   140e8:	push   rbp
   140e9:	and    r8d,0x1
   140ed:	push   rbx
   140ee:	sub    r8d,eax
   140f1:	mov    eax,edi
   140f3:	shr    eax,0x1f
   140f6:	shl    r8d,0x3
   140fa:	add    edi,eax
   140fc:	mov    rax,QWORD PTR [rip+0x768a5]        # 8a9a8 <enc_picture>
   14103:	movsxd r10,r8d
   14106:	sar    edi,1
   14108:	lea    ebp,[rdi*8+0x0]
   1410f:	mov    rdi,QWORD PTR [rax+0x1918]
   14116:	mov    rax,QWORD PTR [rip+0x7447b]        # 88598 <decs>
   1411d:	mov    r9,QWORD PTR [rax]
   14120:	test   esi,esi
   14122:	js     141b7 <compute_residue_b8block+0xe7>
   14128:	movsxd rsi,esi
   1412b:	movsxd rbp,ebp
   1412e:	lea    r12d,[r8+0x8]
   14132:	shl    rsi,0x8
   14136:	lea    rbx,[rbp+0x8]
   1413a:	lea    rax,[rsi+r10*1]
   1413e:	shl    r10,0x2
   14142:	lea    r11,[rcx+rax*2]
   14146:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14150:	mov    rax,rbp
   14153:	nop    DWORD PTR [rax+rax*1+0x0]
   14158:	mov    r13d,DWORD PTR [rcx+0x9c]
   1415f:	mov    edx,DWORD PTR [rcx+0x98]
   14165:	mov    rsi,QWORD PTR [r9+rax*8]
   14169:	add    r13d,eax
   1416c:	add    edx,r8d
   1416f:	movsxd r13,r13d
   14172:	movsxd rdx,edx
   14175:	mov    r13,QWORD PTR [rdi+r13*8]
   14179:	movzx  edx,WORD PTR [r13+rdx*2+0x0]
   1417f:	mov    r13,rax
   14182:	add    rax,0x1
   14186:	shl    r13,0x5
   1418a:	movzx  r13d,WORD PTR [r11+r13*1+0x12b8]
   14193:	sub    edx,r13d
   14196:	mov    DWORD PTR [rsi+r10*1],edx
   1419a:	cmp    rbx,rax
   1419d:	jne    14158 <compute_residue_b8block+0x88>
   1419f:	add    r8d,0x1
   141a3:	add    r11,0x2
   141a7:	add    r10,0x4
   141ab:	cmp    r8d,r12d
   141ae:	jne    14150 <compute_residue_b8block+0x80>
   141b0:	pop    rbx
   141b1:	pop    rbp
   141b2:	pop    r12
   141b4:	pop    r13
   141b6:	ret    
   141b7:	mov    r11,r10
   141ba:	movsxd rbp,ebp
   141bd:	shl    r10,0x2
   141c1:	lea    r12d,[r8+0x8]
   141c5:	shl    r11,0x5
   141c9:	lea    rbx,[rbp+0x8]
   141cd:	add    r11,rcx
   141d0:	mov    rax,rbp
   141d3:	nop    DWORD PTR [rax+rax*1+0x0]
   141d8:	mov    r13d,DWORD PTR [rcx+0x9c]
   141df:	mov    edx,DWORD PTR [rcx+0x98]
   141e5:	mov    rsi,QWORD PTR [r9+rax*8]
   141e9:	add    r13d,eax
   141ec:	add    edx,r8d
   141ef:	movsxd r13,r13d
   141f2:	movsxd rdx,edx
   141f5:	mov    r13,QWORD PTR [rdi+r13*8]
   141f9:	movzx  edx,WORD PTR [r13+rdx*2+0x0]
   141ff:	movzx  r13d,WORD PTR [r11+rax*2+0x3138]
   14208:	add    rax,0x1
   1420c:	sub    edx,r13d
   1420f:	mov    DWORD PTR [rsi+r10*1],edx
   14213:	cmp    rbx,rax
   14216:	jne    141d8 <compute_residue_b8block+0x108>
   14218:	add    r8d,0x1
   1421c:	add    r11,0x20
   14220:	add    r10,0x4
   14224:	cmp    r8d,r12d
   14227:	jne    141d0 <compute_residue_b8block+0x100>
   14229:	pop    rbx
   1422a:	pop    rbp
   1422b:	pop    r12
   1422d:	pop    r13
   1422f:	ret    

0000000000014230 <compute_residue_mb>:
   14230:	endbr64 
   14234:	push   rbp
   14235:	mov    esi,edi
   14237:	mov    ebp,edi
   14239:	xor    edi,edi
   1423b:	call   140d0 <compute_residue_b8block>
   14240:	mov    esi,ebp
   14242:	mov    edi,0x1
   14247:	call   140d0 <compute_residue_b8block>
   1424c:	mov    esi,ebp
   1424e:	mov    edi,0x2
   14253:	call   140d0 <compute_residue_b8block>
   14258:	mov    esi,ebp
   1425a:	mov    edi,0x3
   1425f:	pop    rbp
   14260:	jmp    140d0 <compute_residue_b8block>
   14265:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000014270 <Build_Status_Map>:
   14270:	endbr64 
   14274:	push   r15
   14276:	push   r14
   14278:	push   r13
   1427a:	push   r12
   1427c:	push   rbp
   1427d:	push   rbx
   1427e:	sub    rsp,0x18
   14282:	mov    rdx,QWORD PTR [rip+0x74327]        # 885b0 <img>
   14289:	mov    eax,DWORD PTR [rdx+0x3c]
   1428c:	mov    ecx,DWORD PTR [rdx+0x34]
   1428f:	test   eax,eax
   14291:	lea    r15d,[rax+0xf]
   14295:	lea    ebp,[rcx+0xf]
   14298:	mov    DWORD PTR [rsp+0x8],ecx
   1429c:	cmovns r15d,eax
   142a0:	sar    r15d,0x4
   142a4:	test   ecx,ecx
   142a6:	cmovns ebp,ecx
   142a9:	mov    DWORD PTR [rsp+0xc],r15d
   142ae:	sar    ebp,0x4
   142b1:	cmp    eax,0xf
   142b4:	jle    14469 <Build_Status_Map+0x1f9>
   142ba:	mov    DWORD PTR [rsp+0x4],0x0
   142c2:	mov    r14,rdi
   142c5:	xor    ebx,ebx
   142c7:	mov    r15d,0xffffffff
   142cd:	mov    DWORD PTR [rsp],0x0
   142d4:	nop    DWORD PTR [rax+0x0]
   142d8:	cmp    DWORD PTR [rsp+0x8],0xf
   142dd:	jle    14454 <Build_Status_Map+0x1e4>
   142e3:	movsxd rdx,DWORD PTR [rsp+0x4]
   142e8:	xor    r13d,r13d
   142eb:	imul   r12,rdx,0x278
   142f2:	jmp    14339 <Build_Status_Map+0xc9>
   142f4:	nop    DWORD PTR [rax+0x0]
   142f8:	mov    rsi,QWORD PTR [r14]
   142fb:	mov    r8d,0x1
   14301:	mov    ebx,0x1
   14306:	add    rsi,r13
   14309:	mov    BYTE PTR [rsi],r8b
   1430c:	mov    rsi,QWORD PTR [rip+0x742a5]        # 885b8 <input>
   14313:	mov    eax,DWORD PTR [rsi+0x93c]
   14319:	test   eax,eax
   1431b:	jne    14325 <Build_Status_Map+0xb5>
   1431d:	mov    rsi,QWORD PTR [r14]
   14320:	mov    BYTE PTR [rsi+r13*1],0x1
   14325:	add    r13,0x1
   14329:	add    r12,0x278
   14330:	cmp    ebp,r13d
   14333:	jle    14438 <Build_Status_Map+0x1c8>
   14339:	mov    rsi,QWORD PTR [rip+0x74278]        # 885b8 <input>
   14340:	mov    edx,DWORD PTR [rsi+0xd0]
   14346:	test   edx,edx
   14348:	je     14363 <Build_Status_Map+0xf3>
   1434a:	mov    rsi,QWORD PTR [rip+0x7425f]        # 885b0 <img>
   14351:	mov    rsi,QWORD PTR [rsi+0x3758]
   14358:	cmp    r15d,DWORD PTR [rsi+r12*1+0x4]
   1435d:	je     14417 <Build_Status_Map+0x1a7>
   14363:	call   690e0 <spec_rand>
   14368:	mov    rsi,QWORD PTR [rip+0x74249]        # 885b8 <input>
   1436f:	pxor   xmm1,xmm1
   14373:	xor    ebx,ebx
   14375:	mulsd  xmm0,QWORD PTR [rip+0x5e48b]        # 72808 <COEF.5132+0x18>
   1437d:	divsd  xmm0,QWORD PTR [rip+0x5e483]        # 72808 <COEF.5132+0x18>
   14385:	mulsd  xmm0,QWORD PTR [rip+0x5e483]        # 72810 <COEF.5132+0x20>
   1438d:	cvtsi2sd xmm1,DWORD PTR [rsi+0xb54]
   14395:	comisd xmm1,xmm0
   14399:	seta   bl
   1439c:	call   690e0 <spec_rand>
   143a1:	mov    rsi,QWORD PTR [rip+0x74210]        # 885b8 <input>
   143a8:	pxor   xmm1,xmm1
   143ac:	lea    ebx,[rbx+rbx*2]
   143af:	mulsd  xmm0,QWORD PTR [rip+0x5e451]        # 72808 <COEF.5132+0x18>
   143b7:	divsd  xmm0,QWORD PTR [rip+0x5e449]        # 72808 <COEF.5132+0x18>
   143bf:	mulsd  xmm0,QWORD PTR [rip+0x5e449]        # 72810 <COEF.5132+0x20>
   143c7:	cvtsi2sd xmm1,DWORD PTR [rsi+0xb50]
   143cf:	lea    esi,[rbx+0x2]
   143d2:	comisd xmm1,xmm0
   143d6:	cmova  ebx,esi
   143d9:	add    r15d,0x1
   143dd:	call   690e0 <spec_rand>
   143e2:	mov    rsi,QWORD PTR [rip+0x741cf]        # 885b8 <input>
   143e9:	pxor   xmm1,xmm1
   143ed:	mulsd  xmm0,QWORD PTR [rip+0x5e413]        # 72808 <COEF.5132+0x18>
   143f5:	divsd  xmm0,QWORD PTR [rip+0x5e40b]        # 72808 <COEF.5132+0x18>
   143fd:	mulsd  xmm0,QWORD PTR [rip+0x5e40b]        # 72810 <COEF.5132+0x20>
   14405:	cvtsi2sd xmm1,DWORD PTR [rsi+0xb4c]
   1440d:	comisd xmm1,xmm0
   14411:	ja     142f8 <Build_Status_Map+0x88>
   14417:	mov    rsi,QWORD PTR [r14]
   1441a:	add    rsi,r13
   1441d:	test   ebx,ebx
   1441f:	jne    14480 <Build_Status_Map+0x210>
   14421:	add    r13,0x1
   14425:	mov    BYTE PTR [rsi],0x0
   14428:	add    r12,0x278
   1442f:	cmp    ebp,r13d
   14432:	jg     14339 <Build_Status_Map+0xc9>
   14438:	lea    eax,[rbp-0x1]
   1443b:	cmp    DWORD PTR [rsp+0x8],0xf
   14440:	mov    edx,0x0
   14445:	mov    ecx,DWORD PTR [rsp+0x4]
   14449:	cmovle eax,edx
   1444c:	lea    eax,[rcx+rax*1+0x1]
   14450:	mov    DWORD PTR [rsp+0x4],eax
   14454:	add    DWORD PTR [rsp],0x1
   14458:	add    r14,0x8
   1445c:	mov    eax,DWORD PTR [rsp]
   1445f:	cmp    DWORD PTR [rsp+0xc],eax
   14463:	jg     142d8 <Build_Status_Map+0x68>
   14469:	add    rsp,0x18
   1446d:	pop    rbx
   1446e:	pop    rbp
   1446f:	pop    r12
   14471:	pop    r13
   14473:	pop    r14
   14475:	pop    r15
   14477:	ret    
   14478:	nop    DWORD PTR [rax+rax*1+0x0]
   14480:	mov    r8d,ebx
   14483:	jmp    14309 <Build_Status_Map+0x99>
   14488:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000014490 <Conceal_Error>:
   14490:	endbr64 
   14494:	push   r15
   14496:	mov    r9d,edx
   14499:	movsxd r11,esi
   1449c:	push   r14
   1449e:	push   r13
   144a0:	push   r12
   144a2:	push   rbp
   144a3:	push   rbx
   144a4:	mov    rbx,rdi
   144a7:	sub    rsp,0xc8
   144ae:	mov    r10,QWORD PTR [rip+0x740fb]        # 885b0 <img>
   144b5:	mov    r15,QWORD PTR [rip+0x740dc]        # 88598 <decs>
   144bc:	mov    rax,QWORD PTR fs:0x28
   144c5:	mov    QWORD PTR [rsp+0xb8],rax
   144cd:	xor    eax,eax
   144cf:	mov    eax,DWORD PTR [r10]
   144d2:	sub    eax,DWORD PTR [rip+0x74614]        # 88aec <start_frame_no_in_this_IGOP>
   144d8:	sub    eax,0x1
   144db:	mov    rdi,QWORD PTR [r15+0x30]
   144df:	cdq    
   144e0:	idiv   DWORD PTR [r10+0x20]
   144e4:	mov    eax,esi
   144e6:	shl    eax,0x4
   144e9:	mov    DWORD PTR [rsp],eax
   144ec:	mov    eax,r9d
   144ef:	shl    eax,0x4
   144f2:	mov    DWORD PTR [rsp+0x4],edx
   144f6:	movsxd rdx,r9d
   144f9:	mov    rdi,QWORD PTR [rdi+rdx*8]
   144fd:	movzx  edi,BYTE PTR [rdi+r11*1]
   14502:	test   dil,dil
   14505:	jne    146f0 <Conceal_Error+0x260>
   1450b:	mov    r13d,DWORD PTR [r10+0x18]
   1450f:	test   r13d,r13d
   14512:	jne    145e1 <Conceal_Error+0x151>
   14518:	mov    r13d,0x1
   1451e:	mov    rdi,QWORD PTR [rip+0x76483]        # 8a9a8 <enc_picture>
   14525:	mov    r8,QWORD PTR [r8+r11*8]
   14529:	mov    rdi,QWORD PTR [rdi+0x1968]
   14530:	movzx  edx,BYTE PTR [r8+rdx*1]
   14535:	mov    rdi,QWORD PTR [rdi]
   14538:	cmp    dl,0x3
   1453b:	je     149c2 <Conceal_Error+0x532>
   14541:	ja     145f3 <Conceal_Error+0x163>
   14547:	cmp    dl,0x1
   1454a:	je     14962 <Conceal_Error+0x4d2>
   14550:	cmp    dl,0x2
   14553:	jne    145b8 <Conceal_Error+0x128>
   14555:	cmp    DWORD PTR [r10+0x18],0x2
   1455a:	je     14912 <Conceal_Error+0x482>
   14560:	movsxd rdx,DWORD PTR [rsp+0x4]
   14565:	movsxd r8,DWORD PTR [rsp]
   14569:	cdqe   
   1456b:	lea    r9,[rax+rax*1]
   1456f:	shl    r8,0x3
   14573:	mov    r11,QWORD PTR [rcx+rdx*8]
   14577:	lea    rdi,[r9+0x20]
   1457b:	lea    r10,[r8+0x80]
   14582:	nop    WORD PTR [rax+rax*1+0x0]
   14588:	mov    rsi,QWORD PTR [r11+r8*1]
   1458c:	mov    rcx,QWORD PTR [rbx+r8*1]
   14590:	mov    rax,r9
   14593:	nop    DWORD PTR [rax+rax*1+0x0]
   14598:	movzx  edx,WORD PTR [rsi+rax*1]
   1459c:	mov    WORD PTR [rcx+rax*1],dx
   145a0:	add    rax,0x2
   145a4:	cmp    rdi,rax
   145a7:	jne    14598 <Conceal_Error+0x108>
   145a9:	add    r8,0x8
   145ad:	cmp    r10,r8
   145b0:	jne    14588 <Conceal_Error+0xf8>
   145b2:	nop    WORD PTR [rax+rax*1+0x0]
   145b8:	mov    rax,QWORD PTR [rsp+0xb8]
   145c0:	xor    rax,QWORD PTR fs:0x28
   145c9:	jne    14be5 <Conceal_Error+0x755>
   145cf:	add    rsp,0xc8
   145d6:	pop    rbx
   145d7:	pop    rbp
   145d8:	pop    r12
   145da:	pop    r13
   145dc:	pop    r14
   145de:	pop    r15
   145e0:	ret    
   145e1:	cmp    r13d,0x1
   145e5:	je     148b7 <Conceal_Error+0x427>
   145eb:	xor    r13d,r13d
   145ee:	jmp    1451e <Conceal_Error+0x8e>
   145f3:	cmp    dl,0x5
   145f6:	jne    145b8 <Conceal_Error+0x128>
   145f8:	mov    DWORD PTR [rsp+0x18],0x0
   14600:	mov    r14d,DWORD PTR [r10+0x18]
   14604:	lea    eax,[r9*4+0x0]
   1460c:	lea    ebp,[rsi*4+0x0]
   14613:	movsxd r12,eax
   14616:	lea    r11,[rsp+0x30]
   1461b:	lea    rsi,[rsp+0x70]
   14620:	movsxd r10,ebp
   14623:	shl    r12,0x3
   14627:	mov    DWORD PTR [rsp+0x28],eax
   1462b:	shl    r10,0x3
   1462f:	lea    rax,[rdi+r12*1]
   14633:	mov    QWORD PTR [rsp+0x20],r11
   14638:	mov    QWORD PTR [rsp+0x10],rsi
   1463d:	mov    QWORD PTR [rsp+0x8],rax
   14642:	lea    rax,[r12+0x20]
   14647:	lea    r8,[rdi+rax*1]
   1464b:	mov    rdx,QWORD PTR [rsp+0x8]
   14650:	mov    rsi,r11
   14653:	mov    rdi,QWORD PTR [rdx+0x20]
   14657:	add    rdx,0x8
   1465b:	add    rsi,0x4
   1465f:	mov    rdi,QWORD PTR [rdi+r10*1]
   14663:	movsx  r9d,WORD PTR [rdi]
   14667:	movsx  edi,WORD PTR [rdi+0x2]
   1466b:	mov    DWORD PTR [rsi-0x4],r9d
   1466f:	mov    DWORD PTR [rsi+0x3c],edi
   14672:	cmp    r8,rdx
   14675:	jne    14653 <Conceal_Error+0x1c3>
   14677:	add    r11,0x10
   1467b:	add    r10,0x8
   1467f:	cmp    r11,QWORD PTR [rsp+0x10]
   14684:	jne    1464b <Conceal_Error+0x1bb>
   14686:	cmp    r14d,0x2
   1468a:	je     148cc <Conceal_Error+0x43c>
   14690:	movsxd rdx,DWORD PTR [rsp+0x4]
   14695:	lea    rdi,[rcx+rdx*8]
   14699:	mov    rcx,rdi
   1469c:	mov    rdi,QWORD PTR [rdi]
   1469f:	test   r13d,r13d
   146a2:	je     14ab9 <Conceal_Error+0x629>
   146a8:	movsxd r9,DWORD PTR [rsp]
   146ac:	shl    r9,0x3
   146b0:	lea    r10,[r9+0x80]
   146b7:	nop    WORD PTR [rax+rax*1+0x0]
   146c0:	mov    r8,QWORD PTR [rdi+r9*1]
   146c4:	mov    rsi,QWORD PTR [rbx+r9*1]
   146c8:	mov    rdx,r12
   146cb:	nop    DWORD PTR [rax+rax*1+0x0]
   146d0:	movzx  ecx,WORD PTR [r8+rdx*1]
   146d5:	mov    WORD PTR [rsi+rdx*1],cx
   146d9:	add    rdx,0x2
   146dd:	cmp    rax,rdx
   146e0:	jne    146d0 <Conceal_Error+0x240>
   146e2:	add    r9,0x8
   146e6:	cmp    r10,r9
   146e9:	jne    146c0 <Conceal_Error+0x230>
   146eb:	jmp    145b8 <Conceal_Error+0x128>
   146f0:	lea    ebp,[rdi-0x1]
   146f3:	cmp    bpl,0x2
   146f7:	jbe    14703 <Conceal_Error+0x273>
   146f9:	cmp    dil,0x8
   146fd:	jne    145eb <Conceal_Error+0x15b>
   14703:	mov    r14d,DWORD PTR [r10+0x18]
   14707:	test   r14d,r14d
   1470a:	je     14728 <Conceal_Error+0x298>
   1470c:	xor    r13d,r13d
   1470f:	cmp    r14d,0x1
   14713:	jne    1451e <Conceal_Error+0x8e>
   14719:	mov    edi,DWORD PTR [r10+0x11b30]
   14720:	test   edi,edi
   14722:	jle    1451e <Conceal_Error+0x8e>
   14728:	mov    rdi,QWORD PTR [rip+0x76279]        # 8a9a8 <enc_picture>
   1472f:	mov    r8,QWORD PTR [r8+r11*8]
   14733:	mov    rdi,QWORD PTR [rdi+0x1968]
   1473a:	movzx  edx,BYTE PTR [r8+rdx*1]
   1473f:	mov    rdi,QWORD PTR [rdi]
   14742:	cmp    dl,0x2
   14745:	je     145b8 <Conceal_Error+0x128>
   1474b:	jbe    1476b <Conceal_Error+0x2db>
   1474d:	cmp    dl,0x3
   14750:	je     147cf <Conceal_Error+0x33f>
   14752:	cmp    dl,0x5
   14755:	jne    145b8 <Conceal_Error+0x128>
   1475b:	mov    DWORD PTR [rsp+0x18],0x1
   14763:	xor    r13d,r13d
   14766:	jmp    14604 <Conceal_Error+0x174>
   1476b:	cmp    dl,0x1
   1476e:	jne    145b8 <Conceal_Error+0x128>
   14774:	movsxd rdx,DWORD PTR [rsp+0x4]
   14779:	movsxd r8,DWORD PTR [rsp]
   1477d:	cdqe   
   1477f:	lea    r9,[rax+rax*1]
   14783:	shl    r8,0x3
   14787:	mov    r11,QWORD PTR [rcx+rdx*8]
   1478b:	lea    rdi,[r9+0x20]
   1478f:	lea    r10,[r8+0x80]
   14796:	nop    WORD PTR cs:[rax+rax*1+0x0]
   147a0:	mov    rsi,QWORD PTR [r11+r8*1]
   147a4:	mov    rcx,QWORD PTR [rbx+r8*1]
   147a8:	mov    rax,r9
   147ab:	nop    DWORD PTR [rax+rax*1+0x0]
   147b0:	movzx  edx,WORD PTR [rsi+rax*1]
   147b4:	mov    WORD PTR [rcx+rax*1],dx
   147b8:	add    rax,0x2
   147bc:	cmp    rdi,rax
   147bf:	jne    147b0 <Conceal_Error+0x320>
   147c1:	add    r8,0x8
   147c5:	cmp    r10,r8
   147c8:	jne    147a0 <Conceal_Error+0x310>
   147ca:	jmp    145b8 <Conceal_Error+0x128>
   147cf:	mov    DWORD PTR [rsp+0x20],0x1
   147d7:	xor    r13d,r13d
   147da:	cmp    r14d,0x2
   147de:	je     145b8 <Conceal_Error+0x128>
   147e4:	lea    eax,[r9*4+0x0]
   147ec:	lea    r11,[rsp+0x30]
   147f1:	movsxd rbp,eax
   147f4:	mov    DWORD PTR [rsp+0x18],eax
   147f8:	lea    r14,[rsp+0x70]
   147fd:	lea    r12d,[rsi*4+0x0]
   14805:	shl    rbp,0x3
   14809:	mov    QWORD PTR [rsp+0x10],r11
   1480e:	movsxd r10,r12d
   14811:	lea    rax,[rdi+rbp*1]
   14815:	shl    r10,0x3
   14819:	mov    QWORD PTR [rsp+0x8],rax
   1481e:	lea    rax,[rbp+0x20]
   14822:	add    rdi,rax
   14825:	mov    rdx,QWORD PTR [rsp+0x8]
   1482a:	mov    rsi,r11
   1482d:	mov    r8,QWORD PTR [rdx+0x20]
   14831:	add    rdx,0x8
   14835:	add    rsi,0x4
   14839:	mov    r8,QWORD PTR [r8+r10*1]
   1483d:	movsx  r9d,WORD PTR [r8]
   14841:	movsx  r8d,WORD PTR [r8+0x2]
   14846:	mov    DWORD PTR [rsi-0x4],r9d
   1484a:	mov    DWORD PTR [rsi+0x3c],r8d
   1484e:	cmp    rdi,rdx
   14851:	jne    1482d <Conceal_Error+0x39d>
   14853:	add    r11,0x10
   14857:	add    r10,0x8
   1485b:	cmp    r14,r11
   1485e:	jne    14825 <Conceal_Error+0x395>
   14860:	test   r13d,r13d
   14863:	je     149d3 <Conceal_Error+0x543>
   14869:	movsxd rdx,DWORD PTR [rsp+0x4]
   1486e:	movsxd r8,DWORD PTR [rsp]
   14872:	mov    r10,QWORD PTR [rcx+rdx*8]
   14876:	shl    r8,0x3
   1487a:	lea    r9,[r8+0x80]
   14881:	nop    DWORD PTR [rax+0x0]
   14888:	mov    rdi,QWORD PTR [r10+r8*1]
   1488c:	mov    rsi,QWORD PTR [rbx+r8*1]
   14890:	mov    rdx,rbp
   14893:	nop    DWORD PTR [rax+rax*1+0x0]
   14898:	movzx  ecx,WORD PTR [rdi+rdx*1]
   1489c:	mov    WORD PTR [rsi+rdx*1],cx
   148a0:	add    rdx,0x2
   148a4:	cmp    rax,rdx
   148a7:	jne    14898 <Conceal_Error+0x408>
   148a9:	add    r8,0x8
   148ad:	cmp    r9,r8
   148b0:	jne    14888 <Conceal_Error+0x3f8>
   148b2:	jmp    145b8 <Conceal_Error+0x128>
   148b7:	mov    ebp,DWORD PTR [r10+0x11b30]
   148be:	xor    r13d,r13d
   148c1:	test   ebp,ebp
   148c3:	setg   r13b
   148c7:	jmp    1451e <Conceal_Error+0x8e>
   148cc:	movsxd rdx,DWORD PTR [rsp]
   148d0:	shl    rdx,0x3
   148d4:	lea    rsi,[rbx+rdx*1]
   148d8:	lea    rdi,[rbx+rdx*1+0x80]
   148e0:	mov    rcx,QWORD PTR [rsi]
   148e3:	lea    rdx,[rcx+r12*1]
   148e7:	add    rcx,rax
   148ea:	nop    WORD PTR [rax+rax*1+0x0]
   148f0:	mov    r11d,0x7f
   148f6:	add    rdx,0x2
   148fa:	mov    WORD PTR [rdx-0x2],r11w
   148ff:	cmp    rcx,rdx
   14902:	jne    148f0 <Conceal_Error+0x460>
   14904:	add    rsi,0x8
   14908:	cmp    rdi,rsi
   1490b:	jne    148e0 <Conceal_Error+0x450>
   1490d:	jmp    145b8 <Conceal_Error+0x128>
   14912:	movsxd rdx,DWORD PTR [rsp]
   14916:	cdqe   
   14918:	lea    rsi,[rax+rax*1]
   1491c:	shl    rdx,0x3
   14920:	lea    rdi,[rsi+0x20]
   14924:	lea    rcx,[rbx+rdx*1]
   14928:	lea    r8,[rbx+rdx*1+0x80]
   14930:	mov    rdx,QWORD PTR [rcx]
   14933:	lea    rax,[rdx+rsi*1]
   14937:	add    rdx,rdi
   1493a:	nop    WORD PTR [rax+rax*1+0x0]
   14940:	mov    r9d,0x7f
   14946:	add    rax,0x2
   1494a:	mov    WORD PTR [rax-0x2],r9w
   1494f:	cmp    rdx,rax
   14952:	jne    14940 <Conceal_Error+0x4b0>
   14954:	add    rcx,0x8
   14958:	cmp    r8,rcx
   1495b:	jne    14930 <Conceal_Error+0x4a0>
   1495d:	jmp    145b8 <Conceal_Error+0x128>
   14962:	cmp    DWORD PTR [r10+0x18],0x2
   14967:	jne    14774 <Conceal_Error+0x2e4>
   1496d:	movsxd rdx,DWORD PTR [rsp]
   14971:	cdqe   
   14973:	lea    rsi,[rax+rax*1]
   14977:	shl    rdx,0x3
   1497b:	lea    rdi,[rsi+0x20]
   1497f:	lea    rcx,[rbx+rdx*1]
   14983:	lea    r8,[rbx+rdx*1+0x80]
   1498b:	nop    DWORD PTR [rax+rax*1+0x0]
   14990:	mov    rdx,QWORD PTR [rcx]
   14993:	lea    rax,[rdx+rsi*1]
   14997:	add    rdx,rdi
   1499a:	nop    WORD PTR [rax+rax*1+0x0]
   149a0:	mov    r14d,0x7f
   149a6:	add    rax,0x2
   149aa:	mov    WORD PTR [rax-0x2],r14w
   149af:	cmp    rdx,rax
   149b2:	jne    149a0 <Conceal_Error+0x510>
   149b4:	add    rcx,0x8
   149b8:	cmp    r8,rcx
   149bb:	jne    14990 <Conceal_Error+0x500>
   149bd:	jmp    145b8 <Conceal_Error+0x128>
   149c2:	mov    DWORD PTR [rsp+0x20],0x0
   149ca:	mov    r14d,DWORD PTR [r10+0x18]
   149ce:	jmp    147da <Conceal_Error+0x34a>
   149d3:	mov    r10d,DWORD PTR [rsp+0x20]
   149d8:	test   r10d,r10d
   149db:	je     145b8 <Conceal_Error+0x128>
   149e1:	lea    eax,[r12+0x4]
   149e6:	mov    QWORD PTR [rsp+0x20],rbp
   149eb:	mov    r9,QWORD PTR [r15+0x20]
   149ef:	mov    DWORD PTR [rsp+0x8],eax
   149f3:	mov    eax,DWORD PTR [rsp+0x18]
   149f7:	mov    QWORD PTR [rsp+0x28],rbx
   149fc:	add    eax,0x4
   149ff:	mov    DWORD PTR [rsp],eax
   14a02:	movsxd rax,DWORD PTR [rsp+0x4]
   14a07:	lea    r14,[rcx+rax*8]
   14a0b:	lea    eax,[r12*4+0x0]
   14a13:	mov    DWORD PTR [rsp+0x4],eax
   14a17:	movsxd rax,DWORD PTR [rsp+0x4]
   14a1c:	mov    rbx,QWORD PTR [rsp+0x28]
   14a21:	mov    r13,QWORD PTR [rsp+0x20]
   14a26:	mov    rbp,QWORD PTR [rsp+0x10]
   14a2b:	lea    r15,[rbx+rax*8]
   14a2f:	mov    ebx,DWORD PTR [rsp+0x18]
   14a33:	mov    eax,ebx
   14a35:	mov    ebx,r12d
   14a38:	mov    r12d,eax
   14a3b:	mov    ecx,DWORD PTR [rbp+0x0]
   14a3e:	mov    r8d,DWORD PTR [rbp+0x40]
   14a42:	mov    edx,r12d
   14a45:	mov    esi,ebx
   14a47:	mov    rdi,QWORD PTR [r14]
   14a4a:	call   13940 <Get_Reference_Block>
   14a4f:	mov    rax,QWORD PTR [rip+0x73b42]        # 88598 <decs>
   14a56:	xor    ecx,ecx
   14a58:	mov    r9,QWORD PTR [rax+0x20]
   14a5c:	mov    rsi,QWORD PTR [r15+rcx*1]
   14a60:	mov    rdi,QWORD PTR [r9+rcx*1]
   14a64:	xor    eax,eax
   14a66:	add    rsi,r13
   14a69:	movzx  edx,WORD PTR [rdi+rax*1]
   14a6d:	mov    WORD PTR [rsi+rax*1],dx
   14a71:	add    rax,0x2
   14a75:	cmp    rax,0x8
   14a79:	jne    14a69 <Conceal_Error+0x5d9>
   14a7b:	add    rcx,0x8
   14a7f:	cmp    rcx,0x20
   14a83:	jne    14a5c <Conceal_Error+0x5cc>
   14a85:	add    r12d,0x1
   14a89:	add    rbp,0x4
   14a8d:	add    r13,0x8
   14a91:	cmp    DWORD PTR [rsp],r12d
   14a95:	jg     14a3b <Conceal_Error+0x5ab>
   14a97:	mov    r12d,ebx
   14a9a:	add    DWORD PTR [rsp+0x4],0x4
   14a9f:	add    QWORD PTR [rsp+0x10],0x10
   14aa5:	add    r12d,0x1
   14aa9:	cmp    r12d,DWORD PTR [rsp+0x8]
   14aae:	jl     14a17 <Conceal_Error+0x587>
   14ab4:	jmp    145b8 <Conceal_Error+0x128>
   14ab9:	mov    r13d,DWORD PTR [rsp+0x18]
   14abe:	test   r13d,r13d
   14ac1:	je     14b7f <Conceal_Error+0x6ef>
   14ac7:	lea    eax,[rbp+0x4]
   14aca:	mov    r9,QWORD PTR [r15+0x20]
   14ace:	mov    QWORD PTR [rsp+0x10],r12
   14ad3:	mov    r12d,ebp
   14ad6:	mov    DWORD PTR [rsp+0x8],eax
   14ada:	mov    eax,DWORD PTR [rsp+0x28]
   14ade:	mov    QWORD PTR [rsp+0x18],rbx
   14ae3:	mov    rbx,rcx
   14ae6:	add    eax,0x4
   14ae9:	mov    DWORD PTR [rsp],eax
   14aec:	lea    eax,[rbp*4+0x0]
   14af3:	mov    DWORD PTR [rsp+0x4],eax
   14af7:	movsxd rax,DWORD PTR [rsp+0x4]
   14afc:	mov    r15,QWORD PTR [rsp+0x20]
   14b01:	mov    rsi,QWORD PTR [rsp+0x18]
   14b06:	mov    ebp,DWORD PTR [rsp+0x28]
   14b0a:	mov    r13,QWORD PTR [rsp+0x10]
   14b0f:	lea    r14,[rsi+rax*8]
   14b13:	mov    rax,r15
   14b16:	mov    r15d,ebp
   14b19:	mov    ebp,r12d
   14b1c:	mov    r12,rax
   14b1f:	mov    ecx,DWORD PTR [r12]
   14b23:	mov    r8d,DWORD PTR [r12+0x40]
   14b28:	mov    edx,r15d
   14b2b:	mov    esi,ebp
   14b2d:	call   13940 <Get_Reference_Block>
   14b32:	mov    rax,QWORD PTR [rip+0x73a5f]        # 88598 <decs>
   14b39:	xor    ecx,ecx
   14b3b:	mov    r9,QWORD PTR [rax+0x20]
   14b3f:	mov    rsi,QWORD PTR [r14+rcx*1]
   14b43:	mov    rdi,QWORD PTR [r9+rcx*1]
   14b47:	xor    eax,eax
   14b49:	add    rsi,r13
   14b4c:	movzx  edx,WORD PTR [rdi+rax*1]
   14b50:	mov    WORD PTR [rsi+rax*1],dx
   14b54:	add    rax,0x2
   14b58:	cmp    rax,0x8
   14b5c:	jne    14b4c <Conceal_Error+0x6bc>
   14b5e:	add    rcx,0x8
   14b62:	cmp    rcx,0x20
   14b66:	jne    14b3f <Conceal_Error+0x6af>
   14b68:	add    r15d,0x1
   14b6c:	add    r12,0x4
   14b70:	add    r13,0x8
   14b74:	cmp    r15d,DWORD PTR [rsp]
   14b78:	jge    14bc0 <Conceal_Error+0x730>
   14b7a:	mov    rdi,QWORD PTR [rbx]
   14b7d:	jmp    14b1f <Conceal_Error+0x68f>
   14b7f:	movsxd r9,DWORD PTR [rsp]
   14b83:	shl    r9,0x3
   14b87:	lea    r10,[r9+0x80]
   14b8e:	xchg   ax,ax
   14b90:	mov    r8,QWORD PTR [rdi+r9*1]
   14b94:	mov    rsi,QWORD PTR [rbx+r9*1]
   14b98:	mov    rdx,r12
   14b9b:	nop    DWORD PTR [rax+rax*1+0x0]
   14ba0:	movzx  ecx,WORD PTR [r8+rdx*1]
   14ba5:	mov    WORD PTR [rsi+rdx*1],cx
   14ba9:	add    rdx,0x2
   14bad:	cmp    rax,rdx
   14bb0:	jne    14ba0 <Conceal_Error+0x710>
   14bb2:	add    r9,0x8
   14bb6:	cmp    r10,r9
   14bb9:	jne    14b90 <Conceal_Error+0x700>
   14bbb:	jmp    145b8 <Conceal_Error+0x128>
   14bc0:	mov    r12d,ebp
   14bc3:	add    DWORD PTR [rsp+0x4],0x4
   14bc8:	add    QWORD PTR [rsp+0x20],0x10
   14bce:	add    r12d,0x1
   14bd2:	cmp    r12d,DWORD PTR [rsp+0x8]
   14bd7:	jge    145b8 <Conceal_Error+0x128>
   14bdd:	mov    rdi,QWORD PTR [rbx]
   14be0:	jmp    14af7 <Conceal_Error+0x667>
   14be5:	call   4390 <__stack_chk_fail@plt>
   14bea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000014bf0 <Error_Concealment>:
   14bf0:	endbr64 
   14bf4:	push   r15
   14bf6:	push   r14
   14bf8:	push   r13
   14bfa:	push   r12
   14bfc:	push   rbp
   14bfd:	push   rbx
   14bfe:	sub    rsp,0x18
   14c02:	mov    QWORD PTR [rsp],rdx
   14c06:	mov    rdx,QWORD PTR [rip+0x739a3]        # 885b0 <img>
   14c0d:	mov    eax,DWORD PTR [rdx+0x3c]
   14c10:	mov    ecx,DWORD PTR [rdx+0x34]
   14c13:	test   eax,eax
   14c15:	lea    r13d,[rax+0xf]
   14c19:	lea    r9d,[rcx+0xf]
   14c1d:	mov    DWORD PTR [rsp+0x8],ecx
   14c21:	cmovns r13d,eax
   14c25:	sar    r13d,0x4
   14c29:	test   ecx,ecx
   14c2b:	cmovns r9d,ecx
   14c2f:	mov    DWORD PTR [rsp+0xc],r13d
   14c34:	sar    r9d,0x4
   14c38:	cmp    eax,0xf
   14c3b:	jle    14c9a <Error_Concealment+0xaa>
   14c3d:	mov    r12,rdi
   14c40:	mov    r14,rsi
   14c43:	mov    r13d,r9d
   14c46:	xor    r15d,r15d
   14c49:	nop    DWORD PTR [rax+0x0]
   14c50:	xor    ebx,ebx
   14c52:	cmp    DWORD PTR [rsp+0x8],0xf
   14c57:	mov    ebp,r15d
   14c5a:	jg     14c69 <Error_Concealment+0x79>
   14c5c:	jmp    14c8f <Error_Concealment+0x9f>
   14c5e:	xchg   ax,ax
   14c60:	add    rbx,0x1
   14c64:	cmp    r13d,ebx
   14c67:	jle    14c8f <Error_Concealment+0x9f>
   14c69:	mov    rax,QWORD PTR [r14+r15*8]
   14c6d:	cmp    BYTE PTR [rax+rbx*1],0x0
   14c71:	je     14c60 <Error_Concealment+0x70>
   14c73:	mov    rcx,QWORD PTR [rsp]
   14c77:	mov    edx,ebx
   14c79:	mov    r8,r14
   14c7c:	mov    esi,ebp
   14c7e:	mov    rdi,r12
   14c81:	add    rbx,0x1
   14c85:	call   14490 <Conceal_Error>
   14c8a:	cmp    r13d,ebx
   14c8d:	jg     14c69 <Error_Concealment+0x79>
   14c8f:	add    r15,0x1
   14c93:	cmp    DWORD PTR [rsp+0xc],r15d
   14c98:	jg     14c50 <Error_Concealment+0x60>
   14c9a:	add    rsp,0x18
   14c9e:	pop    rbx
   14c9f:	pop    rbp
   14ca0:	pop    r12
   14ca2:	pop    r13
   14ca4:	pop    r14
   14ca6:	pop    r15
   14ca8:	ret    
   14ca9:	nop    DWORD PTR [rax+0x0]

0000000000014cb0 <UpdateDecoders>:
   14cb0:	endbr64 
   14cb4:	mov    rax,QWORD PTR [rip+0x738fd]        # 885b8 <input>
   14cbb:	mov    eax,DWORD PTR [rax+0xb58]
   14cc1:	test   eax,eax
   14cc3:	jle    14d38 <UpdateDecoders+0x88>
   14cc5:	push   rbx
   14cc6:	xor    ebx,ebx
   14cc8:	nop    DWORD PTR [rax+rax*1+0x0]
   14cd0:	mov    rax,QWORD PTR [rip+0x738c1]        # 88598 <decs>
   14cd7:	mov    rdi,QWORD PTR [rax+0x28]
   14cdb:	call   14270 <Build_Status_Map>
   14ce0:	mov    rax,QWORD PTR [rip+0x738b1]        # 88598 <decs>
   14ce7:	mov    rdx,QWORD PTR [rax+0x10]
   14ceb:	mov    rsi,QWORD PTR [rax+0x28]
   14cef:	mov    rax,QWORD PTR [rax+0x18]
   14cf3:	mov    rdx,QWORD PTR [rdx+rbx*8]
   14cf7:	mov    rdi,QWORD PTR [rax+rbx*8]
   14cfb:	call   14bf0 <Error_Concealment>
   14d00:	mov    rax,QWORD PTR [rip+0x73891]        # 88598 <decs>
   14d07:	mov    rdx,QWORD PTR [rax+0x10]
   14d0b:	mov    rax,QWORD PTR [rax+0x18]
   14d0f:	mov    rsi,QWORD PTR [rdx+rbx*8]
   14d13:	mov    rdi,QWORD PTR [rax+rbx*8]
   14d17:	add    rbx,0x1
   14d1b:	call   14050 <DecOneForthPix>
   14d20:	mov    rax,QWORD PTR [rip+0x73891]        # 885b8 <input>
   14d27:	cmp    DWORD PTR [rax+0xb58],ebx
   14d2d:	jg     14cd0 <UpdateDecoders+0x20>
   14d2f:	pop    rbx
   14d30:	ret    
   14d31:	nop    DWORD PTR [rax+0x0]
   14d38:	ret    
   14d39:	nop    DWORD PTR [rax+0x0]

0000000000014d40 <gop_pyramid>:
   14d40:	endbr64 
   14d44:	push   r13
   14d46:	mov    r13,rcx
   14d49:	push   r12
   14d4b:	mov    r12d,edi
   14d4e:	push   rbp
   14d4f:	mov    ebp,esi
   14d51:	push   rbx
   14d52:	mov    ebx,edx
   14d54:	sub    rsp,0x8
   14d58:	test   edi,edi
   14d5a:	je     14db7 <gop_pyramid+0x77>
   14d5c:	test   ebp,ebp
   14d5e:	js     14d8f <gop_pyramid+0x4f>
   14d60:	mov    rax,QWORD PTR [rip+0x73851]        # 885b8 <input>
   14d67:	cmp    DWORD PTR [rax+0x4d4],ebp
   14d6d:	jle    14d8f <gop_pyramid+0x4f>
   14d6f:	movsxd rax,ebp
   14d72:	lea    rax,[rax+rax*2]
   14d76:	lea    rax,[r13+rax*8+0x0]
   14d7b:	mov    DWORD PTR [rax],0x1
   14d81:	mov    DWORD PTR [rax+0x4],ebp
   14d84:	mov    DWORD PTR [rax+0x10],r12d
   14d88:	mov    DWORD PTR [rax+0x8],0x2
   14d8f:	add    ebx,0x1
   14d92:	mov    esi,ebp
   14d94:	sub    r12d,0x1
   14d98:	mov    rcx,r13
   14d9b:	mov    edx,ebx
   14d9d:	mov    edi,r12d
   14da0:	shr    edx,0x1f
   14da3:	add    ebx,edx
   14da5:	sar    ebx,1
   14da7:	sub    esi,ebx
   14da9:	mov    edx,ebx
   14dab:	add    ebp,ebx
   14dad:	call   14d40 <gop_pyramid>
   14db2:	test   r12d,r12d
   14db5:	jne    14d5c <gop_pyramid+0x1c>
   14db7:	test   ebp,ebp
   14db9:	js     14df4 <gop_pyramid+0xb4>
   14dbb:	mov    rax,QWORD PTR [rip+0x737f6]        # 885b8 <input>
   14dc2:	cmp    DWORD PTR [rax+0x4d4],ebp
   14dc8:	jle    14df4 <gop_pyramid+0xb4>
   14dca:	movsxd rax,ebp
   14dcd:	lea    rax,[rax+rax*2]
   14dd1:	lea    rax,[r13+rax*8+0x0]
   14dd6:	mov    edx,DWORD PTR [rax+0x4]
   14dd9:	test   edx,edx
   14ddb:	jne    14df4 <gop_pyramid+0xb4>
   14ddd:	mov    DWORD PTR [rax],0x1
   14de3:	mov    DWORD PTR [rax+0x4],ebp
   14de6:	mov    DWORD PTR [rax+0x10],0x0
   14ded:	mov    DWORD PTR [rax+0x8],0x0
   14df4:	add    rsp,0x8
   14df8:	pop    rbx
   14df9:	pop    rbp
   14dfa:	pop    r12
   14dfc:	pop    r13
   14dfe:	ret    
   14dff:	nop

0000000000014e00 <create_pyramid>:
   14e00:	endbr64 
   14e04:	mov    rax,QWORD PTR [rip+0x737ad]        # 885b8 <input>
   14e0b:	push   r14
   14e0d:	push   r13
   14e0f:	push   r12
   14e11:	push   rbp
   14e12:	push   rbx
   14e13:	cmp    DWORD PTR [rax+0x528],0x1
   14e1a:	mov    ebx,DWORD PTR [rax+0x4d4]
   14e20:	je     14fe3 <create_pyramid+0x1e3>
   14e26:	mov    eax,ebx
   14e28:	xor    ebp,ebp
   14e2a:	xor    r13d,r13d
   14e2d:	mov    r12d,0x4
   14e33:	cmp    ebx,0x2
   14e36:	jle    14e5c <create_pyramid+0x5c>
   14e38:	nop    DWORD PTR [rax+rax*1+0x0]
   14e40:	sar    eax,1
   14e42:	mov    edx,ebp
   14e44:	add    ebp,0x1
   14e47:	cmp    eax,0x2
   14e4a:	jg     14e40 <create_pyramid+0x40>
   14e4c:	lea    r12d,[rdx+0x2]
   14e50:	movsxd r12,r12d
   14e53:	shl    r12,0x2
   14e57:	lea    r13,[r12-0x4]
   14e5c:	mov    rdi,r12
   14e5f:	call   4460 <malloc@plt>
   14e64:	mov    r14,rax
   14e67:	test   rax,rax
   14e6a:	je     15063 <create_pyramid+0x263>
   14e70:	mov    rdi,r12
   14e73:	call   4460 <malloc@plt>
   14e78:	mov    r12,rax
   14e7b:	test   rax,rax
   14e7e:	je     15074 <create_pyramid+0x274>
   14e84:	mov    rax,QWORD PTR [rip+0x7372d]        # 885b8 <input>
   14e8b:	mov    edi,DWORD PTR [rax+0x4d4]
   14e91:	test   edi,edi
   14e93:	jle    14ec9 <create_pyramid+0xc9>
   14e95:	mov    rcx,QWORD PTR [rip+0x8a20c]        # 9f0a8 <gop_structure>
   14e9c:	lea    eax,[rdi-0x1]
   14e9f:	lea    rax,[rax+rax*2]
   14ea3:	lea    rdx,[rcx+0x18]
   14ea7:	lea    rsi,[rdx+rax*8]
   14eab:	jmp    14eb4 <create_pyramid+0xb4>
   14ead:	nop    DWORD PTR [rax]
   14eb0:	add    rdx,0x18
   14eb4:	mov    DWORD PTR [rcx+0x4],0x0
   14ebb:	mov    DWORD PTR [rcx],0x1
   14ec1:	mov    rcx,rdx
   14ec4:	cmp    rsi,rdx
   14ec7:	jne    14eb0 <create_pyramid+0xb0>
   14ec9:	add    r13,r12
   14ecc:	cmp    ebx,0x2
   14ecf:	jle    15040 <create_pyramid+0x240>
   14ed5:	movsxd rax,ebp
   14ed8:	mov    rcx,r12
   14edb:	lea    rsi,[r14+rax*4]
   14edf:	nop
   14ee0:	mov    edx,ebx
   14ee2:	sar    ebx,1
   14ee4:	sub    rsi,0x4
   14ee8:	add    rcx,0x4
   14eec:	sub    edx,ebx
   14eee:	mov    DWORD PTR [rsi+0x4],edx
   14ef1:	lea    edx,[rbx+0x1]
   14ef4:	and    edx,0xfffffffe
   14ef7:	mov    DWORD PTR [rcx-0x4],edx
   14efa:	cmp    ebx,0x2
   14efd:	jg     14ee0 <create_pyramid+0xe0>
   14eff:	mov    DWORD PTR [r14],ebx
   14f02:	mov    DWORD PTR [r13+0x0],edx
   14f06:	mov    r11d,DWORD PTR [r12]
   14f0a:	xor    eax,eax
   14f0c:	lea    r10d,[r11-0x1]
   14f10:	mov    r8d,r10d
   14f13:	mov    rcx,QWORD PTR [rip+0x8a18e]        # 9f0a8 <gop_structure>
   14f1a:	mov    esi,r8d
   14f1d:	mov    edx,r10d
   14f20:	mov    edi,ebp
   14f22:	lea    r9d,[rax+0x1]
   14f26:	call   14d40 <gop_pyramid>
   14f2b:	mov    eax,0x1
   14f30:	add    r8d,r11d
   14f33:	cmp    r9d,ebx
   14f36:	jl     14f13 <create_pyramid+0x113>
   14f38:	mov    rax,QWORD PTR [rip+0x73679]        # 885b8 <input>
   14f3f:	mov    edi,DWORD PTR [rax+0x4d4]
   14f45:	test   edi,edi
   14f47:	jle    14fda <create_pyramid+0x1da>
   14f4d:	mov    r8,QWORD PTR [rip+0x8a154]        # 9f0a8 <gop_structure>
   14f54:	lea    r9,[r8+0x18]
   14f58:	cmp    edi,0x1
   14f5b:	jle    14fcf <create_pyramid+0x1cf>
   14f5d:	nop    DWORD PTR [rax]
   14f60:	lea    edx,[rdi-0x2]
   14f63:	mov    rax,r8
   14f66:	lea    rdx,[rdx+rdx*2]
   14f6a:	lea    rsi,[r9+rdx*8]
   14f6e:	xchg   ax,ax
   14f70:	mov    ecx,DWORD PTR [rax+0x28]
   14f73:	mov    edx,DWORD PTR [rax+0x10]
   14f76:	cmp    ecx,edx
   14f78:	jle    14fbe <create_pyramid+0x1be>
   14f7a:	mov    r10d,DWORD PTR [rax+0x4]
   14f7e:	mov    r11d,DWORD PTR [rax+0x1c]
   14f82:	mov    DWORD PTR [rax+0x10],ecx
   14f85:	mov    DWORD PTR [rax+0x28],edx
   14f88:	mov    ecx,DWORD PTR [rax+0x20]
   14f8b:	mov    edx,DWORD PTR [rax+0x8]
   14f8e:	mov    DWORD PTR [rax+0x4],r11d
   14f92:	mov    DWORD PTR [rax+0x8],ecx
   14f95:	mov    ecx,DWORD PTR [rax+0x18]
   14f98:	mov    DWORD PTR [rax+0x20],edx
   14f9b:	mov    edx,DWORD PTR [rax]
   14f9d:	mov    DWORD PTR [rax],ecx
   14f9f:	mov    ecx,DWORD PTR [rax+0x24]
   14fa2:	mov    DWORD PTR [rax+0x18],edx
   14fa5:	mov    edx,DWORD PTR [rax+0xc]
   14fa8:	mov    DWORD PTR [rax+0xc],ecx
   14fab:	mov    ecx,DWORD PTR [rax+0x2c]
   14fae:	mov    DWORD PTR [rax+0x24],edx
   14fb1:	mov    edx,DWORD PTR [rax+0x14]
   14fb4:	mov    DWORD PTR [rax+0x1c],r10d
   14fb8:	mov    DWORD PTR [rax+0x14],ecx
   14fbb:	mov    DWORD PTR [rax+0x2c],edx
   14fbe:	add    rax,0x18
   14fc2:	cmp    rax,rsi
   14fc5:	jne    14f70 <create_pyramid+0x170>
   14fc7:	sub    edi,0x1
   14fca:	cmp    edi,0x1
   14fcd:	jg     14f60 <create_pyramid+0x160>
   14fcf:	sub    edi,0x1
   14fd2:	test   edi,edi
   14fd4:	jg     14f58 <create_pyramid+0x158>
   14fda:	pop    rbx
   14fdb:	pop    rbp
   14fdc:	pop    r12
   14fde:	pop    r13
   14fe0:	pop    r14
   14fe2:	ret    
   14fe3:	test   ebx,ebx
   14fe5:	jle    14fda <create_pyramid+0x1da>
   14fe7:	mov    edi,ebx
   14fe9:	mov    esi,ebx
   14feb:	mov    rax,QWORD PTR [rip+0x8a0b6]        # 9f0a8 <gop_structure>
   14ff2:	xor    edx,edx
   14ff4:	and    edi,0xfffffffe
   14ff7:	sar    esi,1
   14ff9:	neg    edi
   14ffb:	jmp    15020 <create_pyramid+0x220>
   14ffd:	nop    DWORD PTR [rax]
   15000:	lea    ecx,[rdx+rdx*1+0x1]
   15004:	mov    DWORD PTR [rax+0x10],0x0
   1500b:	mov    DWORD PTR [rax+0x4],ecx
   1500e:	mov    DWORD PTR [rax+0x8],0x2
   15015:	add    edx,0x1
   15018:	add    rax,0x18
   1501c:	cmp    ebx,edx
   1501e:	je     14fda <create_pyramid+0x1da>
   15020:	mov    DWORD PTR [rax],0x1
   15026:	cmp    esi,edx
   15028:	jg     15000 <create_pyramid+0x200>
   1502a:	lea    ecx,[rdi+rdx*2]
   1502d:	mov    DWORD PTR [rax+0x10],0x1
   15034:	mov    DWORD PTR [rax+0x4],ecx
   15037:	mov    DWORD PTR [rax+0x8],0x0
   1503e:	jmp    15015 <create_pyramid+0x215>
   15040:	mov    edx,ebx
   15042:	mov    DWORD PTR [r14],ebx
   15045:	shr    edx,0x1f
   15048:	lea    eax,[rbx+rdx*1]
   1504b:	and    eax,0x1
   1504e:	sub    eax,edx
   15050:	add    eax,ebx
   15052:	mov    DWORD PTR [r13+0x0],eax
   15056:	test   ebx,ebx
   15058:	jle    14f45 <create_pyramid+0x145>
   1505e:	jmp    14f06 <create_pyramid+0x106>
   15063:	lea    rdi,[rip+0x5d7ae]        # 72818 <COEF.5132+0x28>
   1506a:	call   38210 <no_mem_exit>
   1506f:	jmp    14e70 <create_pyramid+0x70>
   15074:	lea    rdi,[rip+0x5d7bd]        # 72838 <COEF.5132+0x48>
   1507b:	call   38210 <no_mem_exit>
   15080:	jmp    14e84 <create_pyramid+0x84>
   15085:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000015090 <init_gop_structure>:
   15090:	endbr64 
   15094:	sub    rsp,0x8
   15098:	mov    rax,QWORD PTR [rip+0x73519]        # 885b8 <input>
   1509f:	cmp    DWORD PTR [rax+0x528],0x3
   150a6:	je     150e0 <init_gop_structure+0x50>
   150a8:	movsxd rdi,DWORD PTR [rax+0x4d4]
   150af:	cmp    edi,0xa
   150b2:	mov    eax,0xa
   150b7:	mov    esi,0x18
   150bc:	cmovl  rdi,rax
   150c0:	call   4400 <calloc@plt>
   150c5:	mov    QWORD PTR [rip+0x89fdc],rax        # 9f0a8 <gop_structure>
   150cc:	test   rax,rax
   150cf:	je     150e6 <init_gop_structure+0x56>
   150d1:	add    rsp,0x8
   150d5:	ret    
   150d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   150e0:	movsxd rdi,DWORD PTR [rax+0x14]
   150e4:	jmp    150af <init_gop_structure+0x1f>
   150e6:	lea    rdi,[rip+0x5d76b]        # 72858 <COEF.5132+0x68>
   150ed:	pop    rax
   150ee:	jmp    38210 <no_mem_exit>
   150f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   150fe:	xchg   ax,ax

0000000000015100 <clear_gop_structure>:
   15100:	endbr64 
   15104:	mov    rdi,QWORD PTR [rip+0x89f9d]        # 9f0a8 <gop_structure>
   1510b:	test   rdi,rdi
   1510e:	je     15118 <clear_gop_structure+0x18>
   15110:	jmp    42d0 <free@plt>
   15115:	nop    DWORD PTR [rax]
   15118:	ret    
   15119:	nop    DWORD PTR [rax+0x0]

0000000000015120 <interpret_gop_structure>:
   15120:	endbr64 
   15124:	push   r15
   15126:	push   r14
   15128:	push   r13
   1512a:	push   r12
   1512c:	push   rbp
   1512d:	push   rbx
   1512e:	sub    rsp,0x38
   15132:	mov    r15,QWORD PTR [rip+0x7347f]        # 885b8 <input>
   15139:	mov    rax,QWORD PTR fs:0x28
   15142:	mov    QWORD PTR [rsp+0x28],rax
   15147:	xor    eax,eax
   15149:	lea    rdi,[r15+0x52c]
   15150:	call   4380 <strlen@plt>
   15155:	test   eax,eax
   15157:	jle    15600 <interpret_gop_structure+0x4e0>
   1515d:	mov    DWORD PTR [rsp+0x14],0x0
   15165:	xor    r14d,r14d
   15168:	mov    rbp,r15
   1516b:	xor    ebx,ebx
   1516d:	mov    DWORD PTR [rsp+0x10],0x0
   15175:	mov    rcx,r15
   15178:	xor    r12d,r12d
   1517b:	mov    r15d,r14d
   1517e:	mov    DWORD PTR [rsp+0x8],0x0
   15186:	mov    r14d,eax
   15189:	nop    DWORD PTR [rax+0x0]
   15190:	lea    r13d,[r12+0x1]
   15195:	test   r15d,r15d
   15198:	jne    152f8 <interpret_gop_structure+0x1d8>
   1519e:	movsxd rax,ebx
   151a1:	add    ebx,0x1
   151a4:	movzx  eax,BYTE PTR [rbp+rax*1+0x52c]
   151ac:	sub    eax,0x42
   151af:	cmp    al,0x2e
   151b1:	ja     151d0 <interpret_gop_structure+0xb0>
   151b3:	lea    rsi,[rip+0x5d7a2]        # 7295c <COEF.5132+0x16c>
   151ba:	movzx  eax,al
   151bd:	movsxd rax,DWORD PTR [rsi+rax*4]
   151c1:	add    rax,rsi
   151c4:	notrack jmp rax
   151c7:	nop    WORD PTR [rax+rax*1+0x0]
   151d0:	movdqa xmm0,XMMWORD PTR [rip+0x5d848]        # 72a20 <COEF.5132+0x230>
   151d8:	mov    esi,0x190
   151dd:	lea    rdi,[rip+0x9fdbc]        # b4fa0 <errortext>
   151e4:	mov    DWORD PTR [rip+0x9fe02],0x2e656c        # b4ff0 <errortext+0x50>
   151ee:	mov    r15d,0x1
   151f4:	movups XMMWORD PTR [rip+0x9fda5],xmm0        # b4fa0 <errortext>
   151fb:	movdqa xmm0,XMMWORD PTR [rip+0x5d82d]        # 72a30 <COEF.5132+0x240>
   15203:	movups XMMWORD PTR [rip+0x9fda6],xmm0        # b4fb0 <errortext+0x10>
   1520a:	movdqa xmm0,XMMWORD PTR [rip+0x5d82e]        # 72a40 <COEF.5132+0x250>
   15212:	movups XMMWORD PTR [rip+0x9fda7],xmm0        # b4fc0 <errortext+0x20>
   15219:	movdqa xmm0,XMMWORD PTR [rip+0x5d82f]        # 72a50 <COEF.5132+0x260>
   15221:	movups XMMWORD PTR [rip+0x9fda8],xmm0        # b4fd0 <errortext+0x30>
   15228:	movdqa xmm0,XMMWORD PTR [rip+0x5d830]        # 72a60 <COEF.5132+0x270>
   15230:	movups XMMWORD PTR [rip+0x9fda9],xmm0        # b4fe0 <errortext+0x40>
   15237:	call   19180 <error>
   1523c:	mov    rbp,QWORD PTR [rip+0x73375]        # 885b8 <input>
   15243:	mov    rcx,rbp
   15246:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15250:	cmp    ebx,r14d
   15253:	jl     15190 <interpret_gop_structure+0x70>
   15259:	mov    r15,rcx
   1525c:	mov    DWORD PTR [r15+0x4d4],r13d
   15263:	mov    rax,QWORD PTR [rsp+0x28]
   15268:	xor    rax,QWORD PTR fs:0x28
   15271:	jne    15975 <interpret_gop_structure+0x855>
   15277:	add    rsp,0x38
   1527b:	pop    rbx
   1527c:	pop    rbp
   1527d:	pop    r12
   1527f:	pop    r13
   15281:	pop    r14
   15283:	pop    r15
   15285:	ret    
   15286:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15290:	mov    r10,QWORD PTR [rip+0x89e11]        # 9f0a8 <gop_structure>
   15297:	movsxd rax,r12d
   1529a:	mov    r15d,0x1
   152a0:	lea    rax,[rax+rax*2]
   152a4:	lea    rax,[r10+rax*8]
   152a8:	mov    DWORD PTR [rax],0x0
   152ae:	jmp    15250 <interpret_gop_structure+0x130>
   152b0:	mov    r8,QWORD PTR [rip+0x89df1]        # 9f0a8 <gop_structure>
   152b7:	movsxd rax,r12d
   152ba:	mov    r15d,0x1
   152c0:	lea    rax,[rax+rax*2]
   152c4:	lea    rax,[r8+rax*8]
   152c8:	mov    DWORD PTR [rax],0x2
   152ce:	jmp    15250 <interpret_gop_structure+0x130>
   152d0:	mov    r9,QWORD PTR [rip+0x89dd1]        # 9f0a8 <gop_structure>
   152d7:	movsxd rax,r12d
   152da:	mov    r15d,0x1
   152e0:	lea    rax,[rax+rax*2]
   152e4:	lea    rax,[r9+rax*8]
   152e8:	mov    DWORD PTR [rax],0x1
   152ee:	jmp    15250 <interpret_gop_structure+0x130>
   152f3:	nop    DWORD PTR [rax+rax*1+0x0]
   152f8:	mov    edi,DWORD PTR [rsp+0x8]
   152fc:	test   edi,edi
   152fe:	je     15390 <interpret_gop_structure+0x270>
   15304:	mov    r10d,DWORD PTR [rsp+0x10]
   15309:	test   r10d,r10d
   1530c:	jne    15438 <interpret_gop_structure+0x318>
   15312:	mov    QWORD PTR [rsp+0x18],rcx
   15317:	lea    r15d,[rbx+0x1]
   1531b:	movsxd rbx,ebx
   1531e:	call   4530 <__ctype_b_loc@plt>
   15323:	mov    rcx,QWORD PTR [rsp+0x18]
   15328:	movsx  rsi,BYTE PTR [rbp+rbx*1+0x52c]
   15331:	mov    rax,QWORD PTR [rax]
   15334:	test   BYTE PTR [rax+rsi*2+0x1],0x8
   15339:	jne    15670 <interpret_gop_structure+0x550>
   1533f:	movzx  eax,BYTE PTR [rbp+rbx*1+0x52c]
   15347:	cmp    al,0x65
   15349:	je     15822 <interpret_gop_structure+0x702>
   1534f:	jg     156f7 <interpret_gop_structure+0x5d7>
   15355:	cmp    al,0x45
   15357:	je     15822 <interpret_gop_structure+0x702>
   1535d:	cmp    al,0x52
   1535f:	jne    156ff <interpret_gop_structure+0x5df>
   15365:	mov    r8,QWORD PTR [rip+0x89d3c]        # 9f0a8 <gop_structure>
   1536c:	movsxd rax,r12d
   1536f:	mov    ebx,r15d
   15372:	mov    r15d,DWORD PTR [rsp+0x8]
   15377:	lea    rax,[rax+rax*2]
   1537b:	lea    rax,[r8+rax*8]
   1537f:	mov    DWORD PTR [rsp+0x10],r15d
   15384:	mov    DWORD PTR [rax+0x8],0x2
   1538b:	jmp    15250 <interpret_gop_structure+0x130>
   15390:	call   4530 <__ctype_b_loc@plt>
   15395:	movsxd rcx,ebx
   15398:	add    ebx,0x1
   1539b:	lea    rdi,[rbp+rcx*1+0x52c]
   153a3:	mov    rax,QWORD PTR [rax]
   153a6:	movsx  rdx,BYTE PTR [rdi]
   153aa:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   153af:	jne    154c0 <interpret_gop_structure+0x3a0>
   153b5:	movdqa xmm0,XMMWORD PTR [rip+0x5d6b3]        # 72a70 <COEF.5132+0x280>
   153bd:	mov    r11d,0x2e65
   153c3:	mov    esi,0x190
   153c8:	lea    rdi,[rip+0x9fbd1]        # b4fa0 <errortext>
   153cf:	mov    WORD PTR [rip+0x9fc19],r11w        # b4ff0 <errortext+0x50>
   153d7:	movups XMMWORD PTR [rip+0x9fbc2],xmm0        # b4fa0 <errortext>
   153de:	movdqa xmm0,XMMWORD PTR [rip+0x5d69a]        # 72a80 <COEF.5132+0x290>
   153e6:	mov    BYTE PTR [rip+0x9fc05],0x0        # b4ff2 <errortext+0x52>
   153ed:	movups XMMWORD PTR [rip+0x9fbbc],xmm0        # b4fb0 <errortext+0x10>
   153f4:	movdqa xmm0,XMMWORD PTR [rip+0x5d694]        # 72a90 <COEF.5132+0x2a0>
   153fc:	movups XMMWORD PTR [rip+0x9fbbd],xmm0        # b4fc0 <errortext+0x20>
   15403:	movdqa xmm0,XMMWORD PTR [rip+0x5d695]        # 72aa0 <COEF.5132+0x2b0>
   1540b:	movups XMMWORD PTR [rip+0x9fbbe],xmm0        # b4fd0 <errortext+0x30>
   15412:	movdqa xmm0,XMMWORD PTR [rip+0x5d696]        # 72ab0 <COEF.5132+0x2c0>
   1541a:	movups XMMWORD PTR [rip+0x9fbbf],xmm0        # b4fe0 <errortext+0x40>
   15421:	call   19180 <error>
   15426:	mov    rbp,QWORD PTR [rip+0x7318b]        # 885b8 <input>
   1542d:	mov    rcx,rbp
   15430:	jmp    15250 <interpret_gop_structure+0x130>
   15435:	nop    DWORD PTR [rax]
   15438:	mov    esi,DWORD PTR [rsp+0x14]
   1543c:	test   esi,esi
   1543e:	jne    1567d <interpret_gop_structure+0x55d>
   15444:	call   4530 <__ctype_b_loc@plt>
   15449:	movsxd rcx,ebx
   1544c:	add    ebx,0x1
   1544f:	lea    rdi,[rbp+rcx*1+0x52c]
   15457:	mov    rax,QWORD PTR [rax]
   1545a:	movsx  rdx,BYTE PTR [rdi]
   1545e:	test   BYTE PTR [rax+rdx*2+0x1],0x8
   15463:	je     15798 <interpret_gop_structure+0x678>
   15469:	lea    rdx,[rsp+0x20]
   1546e:	lea    rsi,[rip+0x55eb3]        # 6b328 <maxpos+0x28>
   15475:	xor    eax,eax
   15477:	call   4470 <__isoc99_sscanf@plt>
   1547c:	mov    rcx,QWORD PTR [rip+0x89c25]        # 9f0a8 <gop_structure>
   15483:	movsxd rax,r12d
   15486:	mov    edx,DWORD PTR [rsp+0x20]
   1548a:	lea    rax,[rax+rax*2]
   1548e:	lea    rax,[rcx+rax*8]
   15492:	mov    DWORD PTR [rax+0xc],edx
   15495:	cmp    edx,0x33
   15498:	ja     1584d <interpret_gop_structure+0x72d>
   1549e:	mov    r15d,DWORD PTR [rsp+0x10]
   154a3:	mov    rbp,QWORD PTR [rip+0x7310e]        # 885b8 <input>
   154aa:	mov    DWORD PTR [rsp+0x14],r15d
   154af:	mov    rcx,rbp
   154b2:	mov    DWORD PTR [rsp+0x8],r15d
   154b7:	jmp    15250 <interpret_gop_structure+0x130>
   154bc:	nop    DWORD PTR [rax+0x0]
   154c0:	lea    rdx,[rsp+0x24]
   154c5:	lea    rsi,[rip+0x55e5c]        # 6b328 <maxpos+0x28>
   154cc:	xor    eax,eax
   154ce:	call   4470 <__isoc99_sscanf@plt>
   154d3:	mov    rsi,QWORD PTR [rip+0x89bce]        # 9f0a8 <gop_structure>
   154da:	movsxd rax,r12d
   154dd:	mov    edx,DWORD PTR [rsp+0x24]
   154e1:	lea    rax,[rax+rax*2]
   154e5:	lea    rax,[rsi+rax*8]
   154e9:	mov    DWORD PTR [rax+0x4],edx
   154ec:	mov    rax,QWORD PTR [rip+0x730c5]        # 885b8 <input>
   154f3:	mov    r9d,DWORD PTR [rax+0x14]
   154f7:	test   edx,edx
   154f9:	js     155b8 <interpret_gop_structure+0x498>
   154ff:	cmp    edx,r9d
   15502:	jge    155b8 <interpret_gop_structure+0x498>
   15508:	lea    r10d,[r12-0x1]
   1550d:	xor    ebp,ebp
   1550f:	lea    r8,[rip+0x5d3b2]        # 728c8 <COEF.5132+0xd8>
   15516:	test   r12d,r12d
   15519:	jle    155a0 <interpret_gop_structure+0x480>
   1551f:	mov    DWORD PTR [rsp+0x8],ebx
   15523:	mov    ebx,r12d
   15526:	mov    r12,r10
   15529:	jmp    1553c <interpret_gop_structure+0x41c>
   1552b:	nop    DWORD PTR [rax+rax*1+0x0]
   15530:	lea    rax,[rbp+0x1]
   15534:	cmp    r12,rbp
   15537:	je     15599 <interpret_gop_structure+0x479>
   15539:	mov    rbp,rax
   1553c:	mov    rcx,QWORD PTR [rip+0x89b65]        # 9f0a8 <gop_structure>
   15543:	lea    rax,[rbp+rbp*2+0x0]
   15548:	mov    r9d,DWORD PTR [rsp+0x24]
   1554d:	lea    rax,[rcx+rax*8]
   15551:	cmp    DWORD PTR [rax+0x4],r9d
   15555:	jne    15530 <interpret_gop_structure+0x410>
   15557:	push   rbp
   15558:	mov    edx,0x1
   1555d:	mov    ecx,0x12c
   15562:	mov    esi,0x12c
   15567:	push   rbx
   15568:	lea    rdi,[rip+0x9fa31]        # b4fa0 <errortext>
   1556f:	xor    eax,eax
   15571:	call   42c0 <__snprintf_chk@plt>
   15576:	mov    esi,0x190
   1557b:	lea    rdi,[rip+0x9fa1e]        # b4fa0 <errortext>
   15582:	call   19180 <error>
   15587:	pop    rax
   15588:	lea    r8,[rip+0x5d339]        # 728c8 <COEF.5132+0xd8>
   1558f:	pop    rdx
   15590:	lea    rax,[rbp+0x1]
   15594:	cmp    r12,rbp
   15597:	jne    15539 <interpret_gop_structure+0x419>
   15599:	mov    r12d,ebx
   1559c:	mov    ebx,DWORD PTR [rsp+0x8]
   155a0:	mov    rbp,QWORD PTR [rip+0x73011]        # 885b8 <input>
   155a7:	mov    DWORD PTR [rsp+0x8],r15d
   155ac:	mov    rcx,rbp
   155af:	jmp    15250 <interpret_gop_structure+0x130>
   155b4:	nop    DWORD PTR [rax+0x0]
   155b8:	sub    r9d,0x1
   155bc:	mov    ecx,0x12c
   155c1:	mov    edx,0x1
   155c6:	xor    eax,eax
   155c8:	lea    r8,[rip+0x5d2b1]        # 72880 <COEF.5132+0x90>
   155cf:	mov    esi,0x12c
   155d4:	lea    rdi,[rip+0x9f9c5]        # b4fa0 <errortext>
   155db:	call   42c0 <__snprintf_chk@plt>
   155e0:	mov    esi,0x190
   155e5:	lea    rdi,[rip+0x9f9b4]        # b4fa0 <errortext>
   155ec:	call   19180 <error>
   155f1:	jmp    15508 <interpret_gop_structure+0x3e8>
   155f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15600:	movdqa xmm0,XMMWORD PTR [rip+0x5d568]        # 72b70 <COEF.5132+0x380>
   15608:	mov    esi,0x190
   1560d:	lea    rdi,[rip+0x9f98c]        # b4fa0 <errortext>
   15614:	mov    BYTE PTR [rip+0x9f9c5],0x0        # b4fe0 <errortext+0x40>
   1561b:	mov    r13d,0x1
   15621:	movups XMMWORD PTR [rip+0x9f978],xmm0        # b4fa0 <errortext>
   15628:	movdqa xmm0,XMMWORD PTR [rip+0x5d550]        # 72b80 <COEF.5132+0x390>
   15630:	movups XMMWORD PTR [rip+0x9f979],xmm0        # b4fb0 <errortext+0x10>
   15637:	movdqa xmm0,XMMWORD PTR [rip+0x5d551]        # 72b90 <COEF.5132+0x3a0>
   1563f:	movups XMMWORD PTR [rip+0x9f97a],xmm0        # b4fc0 <errortext+0x20>
   15646:	movdqa xmm0,XMMWORD PTR [rip+0x5d552]        # 72ba0 <COEF.5132+0x3b0>
   1564e:	movups XMMWORD PTR [rip+0x9f97b],xmm0        # b4fd0 <errortext+0x30>
   15655:	call   19180 <error>
   1565a:	mov    r15,QWORD PTR [rip+0x72f57]        # 885b8 <input>
   15661:	jmp    1525c <interpret_gop_structure+0x13c>
   15666:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15670:	mov    ebx,r15d
   15673:	mov    r15d,DWORD PTR [rsp+0x8]
   15678:	jmp    15250 <interpret_gop_structure+0x130>
   1567d:	mov    QWORD PTR [rsp+0x8],rcx
   15682:	call   4530 <__ctype_b_loc@plt>
   15687:	movsxd rsi,ebx
   1568a:	mov    rcx,QWORD PTR [rsp+0x8]
   1568f:	movsx  rsi,BYTE PTR [rbp+rsi*1+0x52c]
   15698:	mov    rax,QWORD PTR [rax]
   1569b:	test   BYTE PTR [rax+rsi*2+0x1],0x8
   156a0:	jne    156e0 <interpret_gop_structure+0x5c0>
   156a2:	lea    eax,[r14-0x2]
   156a6:	cmp    eax,ebx
   156a8:	jle    156e0 <interpret_gop_structure+0x5c0>
   156aa:	lea    r15d,[r12+0x2]
   156af:	cmp    DWORD PTR [rbp+0x14],r13d
   156b3:	jle    158a3 <interpret_gop_structure+0x783>
   156b9:	mov    r12d,r13d
   156bc:	mov    DWORD PTR [rsp+0x14],0x0
   156c4:	mov    r13d,r15d
   156c7:	xor    r15d,r15d
   156ca:	mov    DWORD PTR [rsp+0x10],0x0
   156d2:	mov    DWORD PTR [rsp+0x8],0x0
   156da:	jmp    15250 <interpret_gop_structure+0x130>
   156df:	nop
   156e0:	mov    r15d,DWORD PTR [rsp+0x14]
   156e5:	add    ebx,0x1
   156e8:	mov    DWORD PTR [rsp+0x10],r15d
   156ed:	mov    DWORD PTR [rsp+0x8],r15d
   156f2:	jmp    15250 <interpret_gop_structure+0x130>
   156f7:	cmp    al,0x72
   156f9:	je     15365 <interpret_gop_structure+0x245>
   156ff:	movdqa xmm0,XMMWORD PTR [rip+0x5d3b9]        # 72ac0 <COEF.5132+0x2d0>
   15707:	mov    edi,0x2e65
   1570c:	mov    ebx,r15d
   1570f:	mov    esi,0x190
   15714:	mov    WORD PTR [rip+0x9f8d9],di        # b4ff4 <errortext+0x54>
   1571b:	lea    rdi,[rip+0x9f87e]        # b4fa0 <errortext>
   15722:	movups XMMWORD PTR [rip+0x9f877],xmm0        # b4fa0 <errortext>
   15729:	movdqa xmm0,XMMWORD PTR [rip+0x5d39f]        # 72ad0 <COEF.5132+0x2e0>
   15731:	mov    DWORD PTR [rip+0x9f8b5],0x6c696620        # b4ff0 <errortext+0x50>
   1573b:	movups XMMWORD PTR [rip+0x9f86e],xmm0        # b4fb0 <errortext+0x10>
   15742:	movdqa xmm0,XMMWORD PTR [rip+0x5d396]        # 72ae0 <COEF.5132+0x2f0>
   1574a:	mov    BYTE PTR [rip+0x9f8a5],0x0        # b4ff6 <errortext+0x56>
   15751:	movups XMMWORD PTR [rip+0x9f868],xmm0        # b4fc0 <errortext+0x20>
   15758:	movdqa xmm0,XMMWORD PTR [rip+0x5d390]        # 72af0 <COEF.5132+0x300>
   15760:	movups XMMWORD PTR [rip+0x9f869],xmm0        # b4fd0 <errortext+0x30>
   15767:	movdqa xmm0,XMMWORD PTR [rip+0x5d391]        # 72b00 <COEF.5132+0x310>
   1576f:	movups XMMWORD PTR [rip+0x9f86a],xmm0        # b4fe0 <errortext+0x40>
   15776:	call   19180 <error>
   1577b:	mov    rbp,QWORD PTR [rip+0x72e36]        # 885b8 <input>
   15782:	mov    r15d,DWORD PTR [rsp+0x8]
   15787:	mov    rcx,rbp
   1578a:	mov    DWORD PTR [rsp+0x10],r15d
   1578f:	jmp    15250 <interpret_gop_structure+0x130>
   15794:	nop    DWORD PTR [rax+0x0]
   15798:	movdqa xmm0,XMMWORD PTR [rip+0x5d380]        # 72b20 <COEF.5132+0x330>
   157a0:	mov    esi,0x190
   157a5:	movabs rax,0x6c6966206e6f6974
   157af:	lea    rdi,[rip+0x9f7ea]        # b4fa0 <errortext>
   157b6:	mov    QWORD PTR [rip+0x9f823],rax        # b4fe0 <errortext+0x40>
   157bd:	mov    eax,0x2e65
   157c2:	movups XMMWORD PTR [rip+0x9f7d7],xmm0        # b4fa0 <errortext>
   157c9:	movdqa xmm0,XMMWORD PTR [rip+0x5d35f]        # 72b30 <COEF.5132+0x340>
   157d1:	mov    WORD PTR [rip+0x9f810],ax        # b4fe8 <errortext+0x48>
   157d8:	movups XMMWORD PTR [rip+0x9f7d1],xmm0        # b4fb0 <errortext+0x10>
   157df:	movdqa xmm0,XMMWORD PTR [rip+0x5d359]        # 72b40 <COEF.5132+0x350>
   157e7:	mov    BYTE PTR [rip+0x9f7fc],0x0        # b4fea <errortext+0x4a>
   157ee:	movups XMMWORD PTR [rip+0x9f7cb],xmm0        # b4fc0 <errortext+0x20>
   157f5:	movdqa xmm0,XMMWORD PTR [rip+0x5d353]        # 72b50 <COEF.5132+0x360>
   157fd:	movups XMMWORD PTR [rip+0x9f7cc],xmm0        # b4fd0 <errortext+0x30>
   15804:	call   19180 <error>
   15809:	mov    rbp,QWORD PTR [rip+0x72da8]        # 885b8 <input>
   15810:	mov    r15d,DWORD PTR [rsp+0x10]
   15815:	mov    rcx,rbp
   15818:	mov    DWORD PTR [rsp+0x8],r15d
   1581d:	jmp    15250 <interpret_gop_structure+0x130>
   15822:	mov    r9,QWORD PTR [rip+0x8987f]        # 9f0a8 <gop_structure>
   15829:	movsxd rax,r12d
   1582c:	mov    ebx,r15d
   1582f:	mov    r15d,DWORD PTR [rsp+0x8]
   15834:	lea    rax,[rax+rax*2]
   15838:	lea    rax,[r9+rax*8]
   1583c:	mov    DWORD PTR [rsp+0x10],r15d
   15841:	mov    DWORD PTR [rax+0x8],0x0
   15848:	jmp    15250 <interpret_gop_structure+0x130>
   1584d:	movdqa xmm0,XMMWORD PTR [rip+0x5d2bb]        # 72b10 <COEF.5132+0x320>
   15855:	mov    edx,0x2e65
   1585a:	mov    esi,0x190
   1585f:	lea    rdi,[rip+0x9f73a]        # b4fa0 <errortext>
   15866:	mov    WORD PTR [rip+0x9f763],dx        # b4fd0 <errortext+0x30>
   1586d:	movups XMMWORD PTR [rip+0x9f72c],xmm0        # b4fa0 <errortext>
   15874:	movdqa xmm0,XMMWORD PTR [rip+0x5d224]        # 72aa0 <COEF.5132+0x2b0>
   1587c:	mov    BYTE PTR [rip+0x9f74f],0x0        # b4fd2 <errortext+0x32>
   15883:	movups XMMWORD PTR [rip+0x9f726],xmm0        # b4fb0 <errortext+0x10>
   1588a:	movdqa xmm0,XMMWORD PTR [rip+0x5d21e]        # 72ab0 <COEF.5132+0x2c0>
   15892:	movups XMMWORD PTR [rip+0x9f727],xmm0        # b4fc0 <errortext+0x20>
   15899:	call   19180 <error>
   1589e:	jmp    1549e <interpret_gop_structure+0x37e>
   158a3:	movabs rax,0x756e206c61746f54
   158ad:	movdqa xmm0,XMMWORD PTR [rip+0x5d2ab]        # 72b60 <COEF.5132+0x370>
   158b5:	movabs rdx,0x20666f207265626d
   158bf:	mov    esi,0x190
   158c4:	mov    QWORD PTR [rip+0x9f6d5],rax        # b4fa0 <errortext>
   158cb:	movabs rax,0x692073656d617266
   158d5:	lea    rdi,[rip+0x9f6c4]        # b4fa0 <errortext>
   158dc:	mov    QWORD PTR [rip+0x9f6c5],rdx        # b4fa8 <errortext+0x8>
   158e3:	movabs rdx,0x636e61686e45206e
   158ed:	mov    QWORD PTR [rip+0x9f6bc],rax        # b4fb0 <errortext+0x10>
   158f4:	movabs rax,0x4f4720746e656d65
   158fe:	mov    QWORD PTR [rip+0x9f6b3],rdx        # b4fb8 <errortext+0x18>
   15905:	movabs rdx,0x74206465656e2050
   1590f:	mov    QWORD PTR [rip+0x9f6aa],rax        # b4fc0 <errortext+0x20>
   15916:	movabs rax,0x776566206562206f
   15920:	mov    QWORD PTR [rip+0x9f6a1],rdx        # b4fc8 <errortext+0x28>
   15927:	movabs rdx,0x716520726f207265
   15931:	mov    QWORD PTR [rip+0x9f698],rax        # b4fd0 <errortext+0x30>
   15938:	movabs rax,0x74656d6172617020
   15942:	mov    QWORD PTR [rip+0x9f68f],rdx        # b4fd8 <errortext+0x38>
   15949:	mov    QWORD PTR [rip+0x9f6a0],rax        # b4ff0 <errortext+0x50>
   15950:	mov    DWORD PTR [rip+0x9f69e],0x2e7265        # b4ff8 <errortext+0x58>
   1595a:	movups XMMWORD PTR [rip+0x9f67f],xmm0        # b4fe0 <errortext+0x40>
   15961:	call   19180 <error>
   15966:	mov    rbp,QWORD PTR [rip+0x72c4b]        # 885b8 <input>
   1596d:	mov    rcx,rbp
   15970:	jmp    156b9 <interpret_gop_structure+0x599>
   15975:	call   4390 <__stack_chk_fail@plt>
   1597a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000015980 <encode_enhancement_layer>:
   15980:	endbr64 
   15984:	mov    rdi,QWORD PTR [rip+0x72c2d]        # 885b8 <input>
   1598b:	mov    rsi,QWORD PTR [rip+0x72c1e]        # 885b0 <img>
   15992:	mov    edx,DWORD PTR [rdi+0x4d4]
   15998:	test   edx,edx
   1599a:	je     15c50 <encode_enhancement_layer+0x2d0>
   159a0:	push   r13
   159a2:	push   r12
   159a4:	push   rbp
   159a5:	push   rbx
   159a6:	sub    rsp,0x18
   159aa:	mov    eax,DWORD PTR [rsi]
   159ac:	mov    r12d,DWORD PTR [rip+0x73139]        # 88aec <start_frame_no_in_this_IGOP>
   159b3:	mov    ecx,eax
   159b5:	sub    ecx,r12d
   159b8:	test   ecx,ecx
   159ba:	jle    15c3a <encode_enhancement_layer+0x2ba>
   159c0:	mov    r9d,DWORD PTR [rdi+0xb60]
   159c7:	xor    ecx,ecx
   159c9:	mov    DWORD PTR [rsi+0x18],0x1
   159d0:	mov    r13d,DWORD PTR [rdi+0x528]
   159d7:	test   r9d,r9d
   159da:	mov    r9d,DWORD PTR [rdi+0x524]
   159e1:	setne  cl
   159e4:	mov    DWORD PTR [rsi+0x11ac0],ecx
   159ea:	test   r9d,r9d
   159ed:	je     15c60 <encode_enhancement_layer+0x2e0>
   159f3:	mov    DWORD PTR [rsi+0x11b30],0x0
   159fd:	test   r13d,r13d
   15a00:	je     15c9c <encode_enhancement_layer+0x31c>
   15a06:	mov    DWORD PTR [rsi+0x118e4],0x1
   15a10:	test   edx,edx
   15a12:	jle    15c30 <encode_enhancement_layer+0x2b0>
   15a18:	movsd  xmm7,QWORD PTR [rip+0x5cda8]        # 727c8 <INIT_MB_TYPE_I+0x108>
   15a20:	mov    r9d,0x1
   15a26:	mov    ebx,0x1
   15a2b:	movsd  QWORD PTR [rsp+0x8],xmm7
   15a31:	jmp    15b30 <encode_enhancement_layer+0x1b0>
   15a36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15a40:	mov    r8d,DWORD PTR [rdi+0x4cc]
   15a47:	test   r8d,r8d
   15a4a:	je     15bf4 <encode_enhancement_layer+0x274>
   15a50:	cdq    
   15a51:	idiv   r13d
   15a54:	lea    r8d,[rdx-0x1]
   15a58:	mov    edx,r8d
   15a5b:	imul   edx,r10d
   15a5f:	lea    r8d,[rdx+r12*1]
   15a63:	add    r8d,r8d
   15a66:	mov    DWORD PTR [rsi+0x11b00],r8d
   15a6d:	cmp    r9d,0x1
   15a71:	je     15c13 <encode_enhancement_layer+0x293>
   15a77:	mov    r9d,DWORD PTR [rbp+r11*1-0x2c]
   15a7c:	pxor   xmm0,xmm0
   15a80:	addsd  xmm2,xmm2
   15a84:	lea    eax,[rcx-0x1]
   15a87:	imul   r10d,eax
   15a8b:	mov    eax,DWORD PTR [rip+0x73057]        # 88ae8 <start_tr_in_this_IGOP>
   15a91:	mov    edx,r8d
   15a94:	add    r9d,0x1
   15a98:	cvtsi2sd xmm0,r9d
   15a9d:	add    eax,r10d
   15aa0:	mulsd  xmm0,xmm2
   15aa4:	cvttsd2si r9d,xmm0
   15aa9:	add    eax,r9d
   15aac:	add    eax,eax
   15aae:	sub    edx,eax
   15ab0:	mov    eax,edx
   15ab2:	cmp    QWORD PTR [rdi+0xb40],0x1
   15aba:	mov    DWORD PTR [rsi+0x11af4],eax
   15ac0:	mov    eax,r8d
   15ac3:	sbb    eax,0xffffffff
   15ac6:	mov    DWORD PTR [rsi+0x11b08],r8d
   15acd:	mov    DWORD PTR [rsi+0x11b04],eax
   15ad3:	xor    eax,eax
   15ad5:	mov    DWORD PTR [rsi+0x11af8],0x0
   15adf:	call   1e300 <encode_one_frame>
   15ae4:	mov    rdi,QWORD PTR [rip+0x72acd]        # 885b8 <input>
   15aeb:	mov    ecx,DWORD PTR [rdi+0xc9c]
   15af1:	test   ecx,ecx
   15af3:	jne    15e70 <encode_enhancement_layer+0x4f0>
   15af9:	mov    rsi,QWORD PTR [rip+0x72ab0]        # 885b0 <img>
   15b00:	mov    edx,DWORD PTR [rdi+0x4d4]
   15b06:	mov    eax,DWORD PTR [rsi+0x118e4]
   15b0c:	lea    r9d,[rax+0x1]
   15b10:	mov    DWORD PTR [rsi+0x118e4],r9d
   15b17:	cmp    r9d,edx
   15b1a:	jg     15c30 <encode_enhancement_layer+0x2b0>
   15b20:	mov    r13d,DWORD PTR [rdi+0x528]
   15b27:	mov    eax,DWORD PTR [rsi]
   15b29:	mov    r12d,DWORD PTR [rip+0x72fbc]        # 88aec <start_frame_no_in_this_IGOP>
   15b30:	movsxd rcx,r9d
   15b33:	mov    rbp,QWORD PTR [rip+0x8956e]        # 9f0a8 <gop_structure>
   15b3a:	mov    DWORD PTR [rsi+0x11b30],0x0
   15b44:	lea    r11,[rcx+rcx*2]
   15b48:	shl    r11,0x3
   15b4c:	lea    r8,[rbp+r11*1-0x18]
   15b51:	mov    ecx,DWORD PTR [r8]
   15b54:	cmp    DWORD PTR [r8+0x8],0x2
   15b59:	mov    DWORD PTR [rsi+0x18],ecx
   15b5c:	jne    15b91 <encode_enhancement_layer+0x211>
   15b5e:	mov    ecx,DWORD PTR [rip+0xa0304]        # b5e68 <log2_max_frame_num_minus4>
   15b64:	mov    r10d,ebx
   15b67:	mov    DWORD PTR [rsi+0x11b30],0x1
   15b71:	add    ecx,0x4
   15b74:	shl    r10d,cl
   15b77:	mov    ecx,r10d
   15b7a:	mov    r10d,DWORD PTR [rsi+0x11b10]
   15b81:	sub    ecx,0x1
   15b84:	add    r10d,0x1
   15b88:	and    ecx,r10d
   15b8b:	mov    DWORD PTR [rsi+0x11b10],ecx
   15b91:	mov    ecx,DWORD PTR [rdi+0x14]
   15b94:	lea    r10d,[rcx+0x1]
   15b98:	cmp    r13d,0x3
   15b9c:	je     15e50 <encode_enhancement_layer+0x4d0>
   15ba2:	pxor   xmm2,xmm2
   15ba6:	pxor   xmm0,xmm0
   15baa:	cvtsi2sd xmm2,r10d
   15baf:	cvtsi2sd xmm0,edx
   15bb3:	addsd  xmm0,QWORD PTR [rsp+0x8]
   15bb9:	divsd  xmm2,xmm0
   15bbd:	movsd  QWORD PTR [rsi+0x118d8],xmm2
   15bc5:	mov    r8d,DWORD PTR [r8+0x4]
   15bc9:	pxor   xmm1,xmm1
   15bcd:	mov    r13d,DWORD PTR [rdi+0x4c8]
   15bd4:	sub    eax,r12d
   15bd7:	mov    ecx,eax
   15bd9:	add    r8d,0x1
   15bdd:	cvtsi2sd xmm1,r8d
   15be2:	mulsd  xmm1,xmm2
   15be6:	cvttsd2si r12d,xmm1
   15beb:	test   r13d,r13d
   15bee:	jne    15a40 <encode_enhancement_layer+0xc0>
   15bf4:	lea    r8d,[rcx-0x1]
   15bf8:	imul   r8d,r10d
   15bfc:	add    r8d,r12d
   15bff:	add    r8d,r8d
   15c02:	mov    DWORD PTR [rsi+0x11b00],r8d
   15c09:	cmp    r9d,0x1
   15c0d:	jne    15a77 <encode_enhancement_layer+0xf7>
   15c13:	mov    eax,r10d
   15c16:	mov    edx,r8d
   15c19:	imul   eax,ecx
   15c1c:	add    eax,DWORD PTR [rip+0x72ec6]        # 88ae8 <start_tr_in_this_IGOP>
   15c22:	add    eax,eax
   15c24:	sub    edx,eax
   15c26:	mov    eax,edx
   15c28:	jmp    15ab2 <encode_enhancement_layer+0x132>
   15c2d:	nop    DWORD PTR [rax]
   15c30:	mov    DWORD PTR [rsi+0x118e4],0x0
   15c3a:	mov    DWORD PTR [rsi+0x118e4],0x0
   15c44:	add    rsp,0x18
   15c48:	pop    rbx
   15c49:	pop    rbp
   15c4a:	pop    r12
   15c4c:	pop    r13
   15c4e:	ret    
   15c4f:	nop
   15c50:	mov    DWORD PTR [rsi+0x118e4],0x0
   15c5a:	ret    
   15c5b:	nop    DWORD PTR [rax+rax*1+0x0]
   15c60:	test   r13d,r13d
   15c63:	jne    15ea0 <encode_enhancement_layer+0x520>
   15c69:	mov    ebx,DWORD PTR [rip+0xa01f9]        # b5e68 <log2_max_frame_num_minus4>
   15c6f:	mov    r8d,0x1
   15c75:	mov    DWORD PTR [rsi+0x11b30],0x0
   15c7f:	lea    ecx,[rbx+0x4]
   15c82:	mov    ebx,DWORD PTR [rsi+0x11b10]
   15c88:	shl    r8d,cl
   15c8b:	sub    r8d,0x1
   15c8f:	lea    ecx,[rbx+0x1]
   15c92:	and    r8d,ecx
   15c95:	mov    DWORD PTR [rsi+0x11b10],r8d
   15c9c:	mov    DWORD PTR [rsi+0x118e4],0x1
   15ca6:	test   edx,edx
   15ca8:	jle    15c3a <encode_enhancement_layer+0x2ba>
   15caa:	movsd  xmm7,QWORD PTR [rip+0x5cb16]        # 727c8 <INIT_MB_TYPE_I+0x108>
   15cb2:	mov    r8d,0x1
   15cb8:	movsd  QWORD PTR [rsp+0x8],xmm7
   15cbe:	jmp    15d7e <encode_enhancement_layer+0x3fe>
   15cc3:	nop    DWORD PTR [rax+rax*1+0x0]
   15cc8:	mov    edx,DWORD PTR [rdi+0x4cc]
   15cce:	test   edx,edx
   15cd0:	je     15de6 <encode_enhancement_layer+0x466>
   15cd6:	cdq    
   15cd7:	idiv   r11d
   15cda:	lea    eax,[rdx-0x1]
   15cdd:	imul   eax,r10d
   15ce1:	add    eax,ecx
   15ce3:	add    eax,eax
   15ce5:	cmp    QWORD PTR [rdi+0xb40],0x1
   15ced:	mov    edx,eax
   15cef:	mov    DWORD PTR [rsi+0x11b00],eax
   15cf5:	sbb    edx,0xffffffff
   15cf8:	mov    DWORD PTR [rsi+0x11b08],eax
   15cfe:	test   r9d,r9d
   15d01:	lea    eax,[r8+r8*1-0x2]
   15d06:	mov    DWORD PTR [rsi+0x11b04],edx
   15d0c:	mov    edx,0xfffffffe
   15d11:	mov    DWORD PTR [rsi+0x11af8],0x0
   15d1b:	cmovne eax,edx
   15d1e:	mov    DWORD PTR [rsi+0x11af4],eax
   15d24:	xor    eax,eax
   15d26:	call   1e300 <encode_one_frame>
   15d2b:	mov    rdi,QWORD PTR [rip+0x72886]        # 885b8 <input>
   15d32:	mov    eax,DWORD PTR [rdi+0xc9c]
   15d38:	test   eax,eax
   15d3a:	jne    15e88 <encode_enhancement_layer+0x508>
   15d40:	mov    rsi,QWORD PTR [rip+0x72869]        # 885b0 <img>
   15d47:	mov    edx,DWORD PTR [rdi+0x4d4]
   15d4d:	mov    eax,DWORD PTR [rsi+0x118e4]
   15d53:	lea    r8d,[rax+0x1]
   15d57:	mov    DWORD PTR [rsi+0x118e4],r8d
   15d5e:	cmp    r8d,edx
   15d61:	jg     15c3a <encode_enhancement_layer+0x2ba>
   15d67:	mov    r9d,DWORD PTR [rdi+0x524]
   15d6e:	mov    r13d,DWORD PTR [rdi+0x528]
   15d75:	mov    eax,DWORD PTR [rsi]
   15d77:	mov    r12d,DWORD PTR [rip+0x72d6e]        # 88aec <start_frame_no_in_this_IGOP>
   15d7e:	cmp    r9d,0x1
   15d82:	je     15e18 <encode_enhancement_layer+0x498>
   15d88:	mov    DWORD PTR [rsi+0x11b30],0x0
   15d92:	mov    ebx,DWORD PTR [rdi+0x14]
   15d95:	lea    r10d,[rbx+0x1]
   15d99:	cmp    r13d,0x3
   15d9d:	je     15e00 <encode_enhancement_layer+0x480>
   15d9f:	pxor   xmm0,xmm0
   15da3:	pxor   xmm1,xmm1
   15da7:	cvtsi2sd xmm0,r10d
   15dac:	cvtsi2sd xmm1,edx
   15db0:	addsd  xmm1,QWORD PTR [rsp+0x8]
   15db6:	divsd  xmm0,xmm1
   15dba:	movsd  QWORD PTR [rsi+0x118d8],xmm0
   15dc2:	pxor   xmm1,xmm1
   15dc6:	mov    r11d,DWORD PTR [rdi+0x4c8]
   15dcd:	sub    eax,r12d
   15dd0:	cvtsi2sd xmm1,r8d
   15dd5:	mulsd  xmm0,xmm1
   15dd9:	cvttsd2si ecx,xmm0
   15ddd:	test   r11d,r11d
   15de0:	jne    15cc8 <encode_enhancement_layer+0x348>
   15de6:	sub    eax,0x1
   15de9:	imul   eax,r10d
   15ded:	add    eax,ecx
   15def:	add    eax,eax
   15df1:	jmp    15ce5 <encode_enhancement_layer+0x365>
   15df6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15e00:	movsd  xmm6,QWORD PTR [rsp+0x8]
   15e06:	movsd  QWORD PTR [rsi+0x118d8],xmm6
   15e0e:	movapd xmm0,xmm6
   15e12:	jmp    15dc2 <encode_enhancement_layer+0x442>
   15e14:	nop    DWORD PTR [rax+0x0]
   15e18:	mov    DWORD PTR [rsi+0x11b30],0x1
   15e22:	mov    ebx,DWORD PTR [rip+0xa0040]        # b5e68 <log2_max_frame_num_minus4>
   15e28:	lea    ecx,[rbx+0x4]
   15e2b:	mov    ebx,r9d
   15e2e:	shl    ebx,cl
   15e30:	mov    ecx,ebx
   15e32:	mov    ebx,DWORD PTR [rsi+0x11b10]
   15e38:	sub    ecx,0x1
   15e3b:	lea    r10d,[rbx+0x1]
   15e3f:	and    ecx,r10d
   15e42:	mov    DWORD PTR [rsi+0x11b10],ecx
   15e48:	jmp    15d92 <encode_enhancement_layer+0x412>
   15e4d:	nop    DWORD PTR [rax]
   15e50:	movsd  xmm5,QWORD PTR [rsp+0x8]
   15e56:	movsd  QWORD PTR [rsi+0x118d8],xmm5
   15e5e:	movapd xmm2,xmm5
   15e62:	jmp    15bc5 <encode_enhancement_layer+0x245>
   15e67:	nop    WORD PTR [rax+rax*1+0x0]
   15e70:	xor    eax,eax
   15e72:	call   21190 <report_frame_statistic>
   15e77:	mov    rdi,QWORD PTR [rip+0x7273a]        # 885b8 <input>
   15e7e:	jmp    15af9 <encode_enhancement_layer+0x179>
   15e83:	nop    DWORD PTR [rax+rax*1+0x0]
   15e88:	xor    eax,eax
   15e8a:	call   21190 <report_frame_statistic>
   15e8f:	mov    rdi,QWORD PTR [rip+0x72722]        # 885b8 <input>
   15e96:	jmp    15d40 <encode_enhancement_layer+0x3c0>
   15e9b:	nop    DWORD PTR [rax+rax*1+0x0]
   15ea0:	mov    DWORD PTR [rsi+0x11b30],0x0
   15eaa:	jmp    15a06 <encode_enhancement_layer+0x86>
   15eaf:	nop

0000000000015eb0 <poc_based_ref_management>:
   15eb0:	endbr64 
   15eb4:	mov    rax,QWORD PTR [rip+0x726f5]        # 885b0 <img>
   15ebb:	cmp    QWORD PTR [rax+0x11b40],0x0
   15ec3:	je     15ed0 <poc_based_ref_management+0x20>
   15ec5:	ret    
   15ec6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15ed0:	mov    eax,DWORD PTR [rip+0xa152e]        # b7404 <dpb+0x24>
   15ed6:	add    eax,DWORD PTR [rip+0xa1524]        # b7400 <dpb+0x20>
   15edc:	je     15ec5 <poc_based_ref_management+0x15>
   15ede:	push   r12
   15ee0:	push   rbp
   15ee1:	mov    ebp,edi
   15ee3:	push   rbx
   15ee4:	sub    rsp,0x10
   15ee8:	mov    r12d,DWORD PTR [rip+0xa150d]        # b73fc <dpb+0x1c>
   15eef:	test   r12d,r12d
   15ef2:	je     15f50 <poc_based_ref_management+0xa0>
   15ef4:	mov    rdx,QWORD PTR [rip+0xa14e5]        # b73e0 <dpb>
   15efb:	lea    ecx,[r12-0x1]
   15f00:	mov    esi,0x7fffffff
   15f05:	xor    r12d,r12d
   15f08:	lea    rax,[rdx+0x8]
   15f0c:	lea    rcx,[rax+rcx*8]
   15f10:	jmp    15f1c <poc_based_ref_management+0x6c>
   15f12:	nop    WORD PTR [rax+rax*1+0x0]
   15f18:	add    rax,0x8
   15f1c:	mov    rdx,QWORD PTR [rdx]
   15f1f:	mov    r8d,DWORD PTR [rdx+0x4]
   15f23:	test   r8d,r8d
   15f26:	je     15f48 <poc_based_ref_management+0x98>
   15f28:	mov    edi,DWORD PTR [rdx+0x8]
   15f2b:	test   edi,edi
   15f2d:	jne    15f48 <poc_based_ref_management+0x98>
   15f2f:	cmp    DWORD PTR [rdx+0x24],esi
   15f32:	jge    15f48 <poc_based_ref_management+0x98>
   15f34:	mov    rdx,QWORD PTR [rdx+0x28]
   15f38:	mov    esi,DWORD PTR [rdx+0x4]
   15f3b:	mov    r12d,DWORD PTR [rdx+0x18dc]
   15f42:	nop    WORD PTR [rax+rax*1+0x0]
   15f48:	mov    rdx,rax
   15f4b:	cmp    rcx,rax
   15f4e:	jne    15f18 <poc_based_ref_management+0x68>
   15f50:	mov    esi,0x20
   15f55:	mov    edi,0x1
   15f5a:	call   4400 <calloc@plt>
   15f5f:	mov    rbx,rax
   15f62:	test   rax,rax
   15f65:	je     15fb3 <poc_based_ref_management+0x103>
   15f67:	mov    esi,0x20
   15f6c:	mov    edi,0x1
   15f71:	mov    QWORD PTR [rbx+0x18],0x0
   15f79:	mov    DWORD PTR [rbx],0x0
   15f7f:	call   4400 <calloc@plt>
   15f84:	test   rax,rax
   15f87:	je     15fc1 <poc_based_ref_management+0x111>
   15f89:	mov    rdx,QWORD PTR [rip+0x72620]        # 885b0 <img>
   15f90:	lea    edi,[rbp-0x1]
   15f93:	mov    QWORD PTR [rax+0x18],rbx
   15f97:	sub    edi,r12d
   15f9a:	mov    DWORD PTR [rax],0x1
   15fa0:	mov    DWORD PTR [rax+0x4],edi
   15fa3:	mov    QWORD PTR [rdx+0x11b40],rax
   15faa:	add    rsp,0x10
   15fae:	pop    rbx
   15faf:	pop    rbp
   15fb0:	pop    r12
   15fb2:	ret    
   15fb3:	lea    rdi,[rip+0x5c956]        # 72910 <COEF.5132+0x120>
   15fba:	call   38210 <no_mem_exit>
   15fbf:	jmp    15f67 <poc_based_ref_management+0xb7>
   15fc1:	lea    rdi,[rip+0x5c970]        # 72938 <COEF.5132+0x148>
   15fc8:	mov    QWORD PTR [rsp+0x8],rax
   15fcd:	call   38210 <no_mem_exit>
   15fd2:	mov    rax,QWORD PTR [rsp+0x8]
   15fd7:	jmp    15f89 <poc_based_ref_management+0xd9>
   15fd9:	nop    DWORD PTR [rax+0x0]

0000000000015fe0 <DefineThresholdMB>:
   15fe0:	endbr64 
   15fe4:	mov    rax,QWORD PTR [rip+0x725cd]        # 885b8 <input>
   15feb:	movsxd rdx,DWORD PTR [rax+0x10]
   15fef:	mov    rsi,rdx
   15ff2:	imul   rdx,rdx,0x2aaaaaab
   15ff9:	mov    eax,esi
   15ffb:	sar    eax,0x1f
   15ffe:	shr    rdx,0x20
   16002:	sub    edx,eax
   16004:	lea    eax,[rdx+rdx*2]
   16007:	mov    ecx,edx
   16009:	add    eax,eax
   1600b:	add    ecx,0xf
   1600e:	sub    esi,eax
   16010:	mov    eax,0x1
   16015:	shl    eax,cl
   16017:	mov    rcx,QWORD PTR [rip+0x72592]        # 885b0 <img>
   1601e:	movsxd rdx,esi
   16021:	cmp    DWORD PTR [rcx+0x18],0x2
   16025:	movsxd rcx,eax
   16028:	je     160c8 <DefineThresholdMB+0xe8>
   1602e:	imul   rcx,rcx,0x2aaaaaab
   16035:	mov    esi,eax
   16037:	sar    esi,0x1f
   1603a:	shr    rcx,0x20
   1603e:	sub    ecx,esi
   16040:	sub    eax,ecx
   16042:	mov    rdi,rdx
   16045:	lea    rcx,[rip+0x5cc74]        # 72cc0 <quant_coef>
   1604c:	movss  xmm1,DWORD PTR [rip+0x5cdf4]        # 72e48 <quant_coef+0x188>
   16054:	shl    rdi,0x6
   16058:	cdq    
   16059:	pxor   xmm0,xmm0
   1605d:	idiv   DWORD PTR [rcx+rdi*1]
   16060:	cvtsi2ss xmm0,eax
   16064:	divss  xmm0,DWORD PTR [rip+0x5cdd4]        # 72e40 <quant_coef+0x180>
   1606c:	movss  DWORD PTR [rip+0x74850],xmm0        # 8a8c4 <Quantize_step>
   16074:	mulss  xmm0,DWORD PTR [rip+0x5cdc8]        # 72e44 <quant_coef+0x184>
   1607c:	movss  DWORD PTR [rip+0x74878],xmm0        # 8a8fc <Bsize+0x1c>
   16084:	mulss  xmm0,xmm1
   16088:	movss  DWORD PTR [rip+0x74868],xmm0        # 8a8f8 <Bsize+0x18>
   16090:	movss  DWORD PTR [rip+0x7485c],xmm0        # 8a8f4 <Bsize+0x14>
   16098:	mulss  xmm0,xmm1
   1609c:	movss  DWORD PTR [rip+0x7484c],xmm0        # 8a8f0 <Bsize+0x10>
   160a4:	mulss  xmm0,xmm1
   160a8:	movss  DWORD PTR [rip+0x7483c],xmm0        # 8a8ec <Bsize+0xc>
   160b0:	movss  DWORD PTR [rip+0x74830],xmm0        # 8a8e8 <Bsize+0x8>
   160b8:	mulss  xmm0,xmm1
   160bc:	movss  DWORD PTR [rip+0x74820],xmm0        # 8a8e4 <Bsize+0x4>
   160c4:	ret    
   160c5:	nop    DWORD PTR [rax]
   160c8:	imul   rcx,rcx,0x55555556
   160cf:	mov    esi,eax
   160d1:	sar    esi,0x1f
   160d4:	shr    rcx,0x20
   160d8:	sub    ecx,esi
   160da:	jmp    16040 <DefineThresholdMB+0x60>
   160df:	nop

00000000000160e0 <DefineThreshold>:
   160e0:	endbr64 
   160e4:	movabs rax,0x3c23d70a3c23d70a
   160ee:	mov    DWORD PTR [rip+0x7484c],0x3c23d70a        # 8a944 <AlphaSec+0x4>
   160f8:	mov    QWORD PTR [rip+0x74849],rax        # 8a948 <AlphaSec+0x8>
   160ff:	movabs rax,0x3cf5c28f3ca3d70a
   16109:	mov    QWORD PTR [rip+0x74840],rax        # 8a950 <AlphaSec+0x10>
   16110:	movabs rax,0x3d23d70a3cf5c28f
   1611a:	mov    QWORD PTR [rip+0x74837],rax        # 8a958 <AlphaSec+0x18>
   16121:	movabs rax,0x3d8f5c293d8f5c29
   1612b:	mov    QWORD PTR [rip+0x74776],rax        # 8a8a8 <AlphaThird+0x8>
   16132:	movabs rax,0x3df5c28f3da3d70a
   1613c:	mov    QWORD PTR [rip+0x7476d],rax        # 8a8b0 <AlphaThird+0x10>
   16143:	movabs rax,0x3e19999a3de147ae
   1614d:	mov    QWORD PTR [rip+0x74764],rax        # 8a8b8 <AlphaThird+0x18>
   16154:	xor    eax,eax
   16156:	mov    DWORD PTR [rip+0x74744],0x3d75c28f        # 8a8a4 <AlphaThird+0x4>
   16160:	jmp    15fe0 <DefineThresholdMB>
   16165:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000016170 <get_mem_mincost>:
   16170:	endbr64 
   16174:	push   r15
   16176:	mov    esi,0x8
   1617b:	push   r14
   1617d:	push   r13
   1617f:	push   r12
   16181:	mov    r12,rdi
   16184:	push   rbp
   16185:	push   rbx
   16186:	sub    rsp,0x28
   1618a:	mov    rbx,QWORD PTR [rip+0x7241f]        # 885b0 <img>
   16191:	mov    r13d,DWORD PTR [rbx+0x34]
   16195:	test   r13d,r13d
   16198:	lea    ebp,[r13+0x3]
   1619c:	cmovns ebp,r13d
   161a0:	sar    ebp,0x2
   161a3:	movsxd rdi,ebp
   161a6:	call   4400 <calloc@plt>
   161ab:	mov    QWORD PTR [r12],rax
   161af:	test   rax,rax
   161b2:	je     163b1 <get_mem_mincost+0x241>
   161b8:	mov    edx,DWORD PTR [rbx+0x3c]
   161bb:	cmp    r13d,0x3
   161bf:	jle    16353 <get_mem_mincost+0x1e3>
   161c5:	mov    QWORD PTR [rsp+0x18],0x0
   161ce:	mov    rax,QWORD PTR [rsp+0x18]
   161d3:	mov    rbx,QWORD PTR [r12]
   161d7:	lea    edi,[rdx+0x3]
   161da:	mov    esi,0x8
   161df:	lea    r13,[rax*8+0x0]
   161e7:	add    rbx,r13
   161ea:	test   edx,edx
   161ec:	cmovns edi,edx
   161ef:	sar    edi,0x2
   161f2:	movsxd rdi,edi
   161f5:	call   4400 <calloc@plt>
   161fa:	mov    QWORD PTR [rbx],rax
   161fd:	test   rax,rax
   16200:	je     163f1 <get_mem_mincost+0x281>
   16206:	mov    rbx,QWORD PTR [rip+0x723a3]        # 885b0 <img>
   1620d:	mov    edx,DWORD PTR [rbx+0x3c]
   16210:	cmp    edx,0x3
   16213:	jle    16332 <get_mem_mincost+0x1c2>
   16219:	mov    QWORD PTR [rsp+0x10],0x0
   16222:	nop    WORD PTR [rax+rax*1+0x0]
   16228:	mov    rax,QWORD PTR [rsp+0x10]
   1622d:	movsxd rdi,DWORD PTR [rbx+0x24]
   16231:	mov    esi,0x8
   16236:	lea    rbp,[rax*8+0x0]
   1623e:	mov    rax,QWORD PTR [r12]
   16242:	mov    r14,QWORD PTR [rax+r13*1]
   16246:	call   4400 <calloc@plt>
   1624b:	add    r14,rbp
   1624e:	mov    QWORD PTR [r14],rax
   16251:	test   rax,rax
   16254:	je     163e0 <get_mem_mincost+0x270>
   1625a:	mov    rbx,QWORD PTR [rip+0x7234f]        # 885b0 <img>
   16261:	mov    eax,DWORD PTR [rbx+0x24]
   16264:	test   eax,eax
   16266:	jle    16311 <get_mem_mincost+0x1a1>
   1626c:	mov    QWORD PTR [rsp+0x8],0x0
   16275:	nop    DWORD PTR [rax]
   16278:	mov    rax,QWORD PTR [rsp+0x8]
   1627d:	mov    esi,0x8
   16282:	mov    edi,0x9
   16287:	lea    rbx,[rax*8+0x0]
   1628f:	mov    rax,QWORD PTR [r12]
   16293:	mov    rax,QWORD PTR [rax+r13*1]
   16297:	mov    r15,QWORD PTR [rax+rbp*1]
   1629b:	call   4400 <calloc@plt>
   162a0:	add    r15,rbx
   162a3:	mov    r14,rax
   162a6:	mov    QWORD PTR [r15],rax
   162a9:	test   rax,rax
   162ac:	je     1638b <get_mem_mincost+0x21b>
   162b2:	xor    r15d,r15d
   162b5:	jmp    162d0 <get_mem_mincost+0x160>
   162b7:	nop    WORD PTR [rax+rax*1+0x0]
   162c0:	mov    rax,QWORD PTR [r12]
   162c4:	mov    rax,QWORD PTR [rax+r13*1]
   162c8:	mov    rax,QWORD PTR [rax+rbp*1]
   162cc:	mov    r14,QWORD PTR [rax+rbx*1]
   162d0:	mov    esi,0x4
   162d5:	mov    edi,0x3
   162da:	call   4400 <calloc@plt>
   162df:	mov    QWORD PTR [r14+r15*1],rax
   162e3:	test   rax,rax
   162e6:	je     1637a <get_mem_mincost+0x20a>
   162ec:	add    r15,0x8
   162f0:	cmp    r15,0x48
   162f4:	jne    162c0 <get_mem_mincost+0x150>
   162f6:	mov    rbx,QWORD PTR [rip+0x722b3]        # 885b0 <img>
   162fd:	add    QWORD PTR [rsp+0x8],0x1
   16303:	mov    rax,QWORD PTR [rsp+0x8]
   16308:	cmp    DWORD PTR [rbx+0x24],eax
   1630b:	jg     16278 <get_mem_mincost+0x108>
   16311:	mov    edx,DWORD PTR [rbx+0x3c]
   16314:	add    QWORD PTR [rsp+0x10],0x1
   1631a:	mov    rcx,QWORD PTR [rsp+0x10]
   1631f:	test   edx,edx
   16321:	lea    eax,[rdx+0x3]
   16324:	cmovns eax,edx
   16327:	sar    eax,0x2
   1632a:	cmp    eax,ecx
   1632c:	jg     16228 <get_mem_mincost+0xb8>
   16332:	mov    eax,DWORD PTR [rbx+0x34]
   16335:	test   eax,eax
   16337:	lea    ebp,[rax+0x3]
   1633a:	cmovns ebp,eax
   1633d:	add    QWORD PTR [rsp+0x18],0x1
   16343:	mov    rax,QWORD PTR [rsp+0x18]
   16348:	sar    ebp,0x2
   1634b:	cmp    ebp,eax
   1634d:	jg     161ce <get_mem_mincost+0x5e>
   16353:	imul   edx,ebp
   16356:	test   edx,edx
   16358:	lea    eax,[rdx+0x3]
   1635b:	cmovns eax,edx
   1635e:	sar    eax,0x2
   16361:	imul   eax,DWORD PTR [rbx+0x24]
   16365:	add    rsp,0x28
   16369:	pop    rbx
   1636a:	pop    rbp
   1636b:	pop    r12
   1636d:	pop    r13
   1636f:	imul   eax,eax,0x1b
   16372:	pop    r14
   16374:	pop    r15
   16376:	shl    eax,0x2
   16379:	ret    
   1637a:	lea    rdi,[rip+0x5c82f]        # 72bb0 <COEF.5132+0x3c0>
   16381:	call   38210 <no_mem_exit>
   16386:	jmp    162ec <get_mem_mincost+0x17c>
   1638b:	lea    rdi,[rip+0x5c81e]        # 72bb0 <COEF.5132+0x3c0>
   16392:	call   38210 <no_mem_exit>
   16397:	mov    rax,QWORD PTR [r12]
   1639b:	mov    rdx,QWORD PTR [rsp+0x8]
   163a0:	mov    rax,QWORD PTR [rax+r13*1]
   163a4:	mov    rax,QWORD PTR [rax+rbp*1]
   163a8:	mov    r14,QWORD PTR [rax+rdx*8]
   163ac:	jmp    162b2 <get_mem_mincost+0x142>
   163b1:	lea    rdi,[rip+0x5c7f8]        # 72bb0 <COEF.5132+0x3c0>
   163b8:	call   38210 <no_mem_exit>
   163bd:	mov    rbx,QWORD PTR [rip+0x721ec]        # 885b0 <img>
   163c4:	mov    ecx,0x4
   163c9:	mov    r13d,DWORD PTR [rbx+0x34]
   163cd:	mov    eax,r13d
   163d0:	cdq    
   163d1:	idiv   ecx
   163d3:	mov    ebp,eax
   163d5:	jmp    161b8 <get_mem_mincost+0x48>
   163da:	nop    WORD PTR [rax+rax*1+0x0]
   163e0:	lea    rdi,[rip+0x5c7c9]        # 72bb0 <COEF.5132+0x3c0>
   163e7:	call   38210 <no_mem_exit>
   163ec:	jmp    1625a <get_mem_mincost+0xea>
   163f1:	lea    rdi,[rip+0x5c7b8]        # 72bb0 <COEF.5132+0x3c0>
   163f8:	call   38210 <no_mem_exit>
   163fd:	jmp    16206 <get_mem_mincost+0x96>
   16402:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1640d:	nop    DWORD PTR [rax]

0000000000016410 <get_mem_bwmincost>:
   16410:	endbr64 
   16414:	jmp    16170 <get_mem_mincost>
   16419:	nop    DWORD PTR [rax+0x0]

0000000000016420 <get_mem_FME>:
   16420:	endbr64 
   16424:	mov    rax,QWORD PTR [rip+0x72185]        # 885b0 <img>
   1642b:	push   rbx
   1642c:	mov    esi,0x4
   16431:	mov    edi,DWORD PTR [rax+0x34]
   16434:	sar    edi,0x4
   16437:	add    edi,0x1
   1643a:	movsxd rdi,edi
   1643d:	call   4400 <calloc@plt>
   16442:	mov    QWORD PTR [rip+0x744cf],rax        # 8a918 <flag_intra>
   16449:	test   rax,rax
   1644c:	je     164a2 <get_mem_FME+0x82>
   1644e:	mov    rax,QWORD PTR [rip+0x72163]        # 885b8 <input>
   16455:	lea    rdi,[rip+0x74434]        # 8a890 <McostState>
   1645c:	mov    eax,DWORD PTR [rax+0x20]
   1645f:	lea    esi,[rax+rax*1+0x1]
   16463:	mov    edx,esi
   16465:	call   38520 <get_mem2Dint>
   1646a:	lea    rdi,[rip+0x743f7]        # 8a868 <all_mincost>
   16471:	mov    ebx,eax
   16473:	call   16170 <get_mem_mincost>
   16478:	lea    rdi,[rip+0x743e1]        # 8a860 <all_bwmincost>
   1647f:	add    ebx,eax
   16481:	call   16170 <get_mem_mincost>
   16486:	mov    edx,0x7
   1648b:	mov    esi,0x7
   16490:	lea    rdi,[rip+0x74479]        # 8a910 <SearchState>
   16497:	add    ebx,eax
   16499:	call   38470 <get_mem2D>
   1649e:	add    eax,ebx
   164a0:	pop    rbx
   164a1:	ret    
   164a2:	lea    rdi,[rip+0x5c716]        # 72bbf <COEF.5132+0x3cf>
   164a9:	call   38210 <no_mem_exit>
   164ae:	jmp    1644e <get_mem_FME+0x2e>

00000000000164b0 <free_mem_mincost>:
   164b0:	endbr64 
   164b4:	push   r15
   164b6:	push   r14
   164b8:	push   r13
   164ba:	push   r12
   164bc:	push   rbp
   164bd:	push   rbx
   164be:	sub    rsp,0x18
   164c2:	mov    rsi,QWORD PTR [rip+0x720e7]        # 885b0 <img>
   164c9:	mov    QWORD PTR [rsp+0x8],rdi
   164ce:	cmp    DWORD PTR [rsi+0x34],0x3
   164d2:	jle    165b7 <free_mem_mincost+0x107>
   164d8:	mov    DWORD PTR [rsp+0x4],0x0
   164e0:	mov    r14,rdi
   164e3:	xor    r13d,r13d
   164e6:	cmp    DWORD PTR [rsi+0x3c],0x3
   164ea:	jle    16585 <free_mem_mincost+0xd5>
   164f0:	mov    eax,DWORD PTR [rsi+0x24]
   164f3:	lea    rbp,[r13*8+0x0]
   164fb:	xor    r12d,r12d
   164fe:	test   eax,eax
   16500:	jle    16557 <free_mem_mincost+0xa7>
   16502:	nop    WORD PTR [rax+rax*1+0x0]
   16508:	lea    rbx,[r12*8+0x0]
   16510:	xor    r15d,r15d
   16513:	nop    DWORD PTR [rax+rax*1+0x0]
   16518:	mov    rdx,QWORD PTR [r14]
   1651b:	mov    rdx,QWORD PTR [rdx+rbp*1]
   1651f:	mov    rdx,QWORD PTR [rdx+rbx*1]
   16523:	mov    rdi,QWORD PTR [rdx+r15*1]
   16527:	add    r15,0x8
   1652b:	call   42d0 <free@plt>
   16530:	cmp    r15,0x48
   16534:	jne    16518 <free_mem_mincost+0x68>
   16536:	mov    rax,QWORD PTR [r14]
   16539:	add    r12,0x1
   1653d:	mov    rax,QWORD PTR [rax+rbp*1]
   16541:	mov    rdi,QWORD PTR [rax+rbx*1]
   16545:	call   42d0 <free@plt>
   1654a:	mov    rax,QWORD PTR [rip+0x7205f]        # 885b0 <img>
   16551:	cmp    DWORD PTR [rax+0x24],r12d
   16555:	jg     16508 <free_mem_mincost+0x58>
   16557:	mov    rax,QWORD PTR [r14]
   1655a:	add    r13,0x1
   1655e:	mov    rdi,QWORD PTR [rax+rbp*1]
   16562:	call   42d0 <free@plt>
   16567:	mov    rsi,QWORD PTR [rip+0x72042]        # 885b0 <img>
   1656e:	mov    edx,DWORD PTR [rsi+0x3c]
   16571:	test   edx,edx
   16573:	lea    eax,[rdx+0x3]
   16576:	cmovns eax,edx
   16579:	sar    eax,0x2
   1657c:	cmp    eax,r13d
   1657f:	jg     164f0 <free_mem_mincost+0x40>
   16585:	mov    rdi,QWORD PTR [r14]
   16588:	add    r14,0x8
   1658c:	call   42d0 <free@plt>
   16591:	mov    rsi,QWORD PTR [rip+0x72018]        # 885b0 <img>
   16598:	add    DWORD PTR [rsp+0x4],0x1
   1659d:	mov    ecx,DWORD PTR [rsp+0x4]
   165a1:	mov    edx,DWORD PTR [rsi+0x34]
   165a4:	test   edx,edx
   165a6:	lea    eax,[rdx+0x3]
   165a9:	cmovns eax,edx
   165ac:	sar    eax,0x2
   165af:	cmp    eax,ecx
   165b1:	jg     164e3 <free_mem_mincost+0x33>
   165b7:	mov    rdi,QWORD PTR [rsp+0x8]
   165bc:	add    rsp,0x18
   165c0:	pop    rbx
   165c1:	pop    rbp
   165c2:	pop    r12
   165c4:	pop    r13
   165c6:	pop    r14
   165c8:	pop    r15
   165ca:	jmp    42d0 <free@plt>
   165cf:	nop

00000000000165d0 <free_mem_bwmincost>:
   165d0:	endbr64 
   165d4:	jmp    164b0 <free_mem_mincost>
   165d9:	nop    DWORD PTR [rax+0x0]

00000000000165e0 <free_mem_FME>:
   165e0:	endbr64 
   165e4:	sub    rsp,0x8
   165e8:	mov    rdi,QWORD PTR [rip+0x742a1]        # 8a890 <McostState>
   165ef:	call   37fc0 <free_mem2Dint>
   165f4:	mov    rdi,QWORD PTR [rip+0x7426d]        # 8a868 <all_mincost>
   165fb:	call   164b0 <free_mem_mincost>
   16600:	mov    rdi,QWORD PTR [rip+0x74259]        # 8a860 <all_bwmincost>
   16607:	call   164b0 <free_mem_mincost>
   1660c:	mov    rdi,QWORD PTR [rip+0x742fd]        # 8a910 <SearchState>
   16613:	call   37f60 <free_mem2D>
   16618:	mov    rdi,QWORD PTR [rip+0x742f9]        # 8a918 <flag_intra>
   1661f:	add    rsp,0x8
   16623:	jmp    42d0 <free@plt>
   16628:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000016630 <PartCalMad>:
   16630:	endbr64 
   16634:	push   r15
   16636:	mov    r10,rsi
   16639:	push   r14
   1663b:	mov    r14d,r8d
   1663e:	push   r13
   16640:	push   r12
   16642:	push   rbp
   16643:	mov    rbp,rdi
   16646:	push   rbx
   16647:	sub    rsp,0x28
   1664b:	mov    rax,QWORD PTR [rip+0x71f5e]        # 885b0 <img>
   16652:	mov    QWORD PTR [rsp+0x8],rdx
   16657:	mov    edi,DWORD PTR [rax+0x11ad0]
   1665d:	mov    r15d,DWORD PTR [rax+0x3c]
   16661:	mov    DWORD PTR [rsp+0x10],r9d
   16666:	test   edi,edi
   16668:	je     1668a <PartCalMad+0x5a>
   1666a:	movsxd rdx,DWORD PTR [rax+0xc]
   1666e:	imul   rdx,rdx,0x278
   16675:	add    rdx,QWORD PTR [rax+0x3758]
   1667c:	mov    esi,DWORD PTR [rdx+0x214]
   16682:	test   esi,esi
   16684:	jne    16788 <PartCalMad+0x158>
   1668a:	test   ecx,ecx
   1668c:	jle    16771 <PartCalMad+0x141>
   16692:	mov    r13d,DWORD PTR [rsp+0x78]
   16697:	mov    r12d,DWORD PTR [rsp+0x60]
   1669c:	mov    ebx,r15d
   1669f:	lea    edi,[rcx+r13*1]
   166a3:	mov    DWORD PTR [rsp+0x14],edi
   166a7:	mov    edi,DWORD PTR [rsp+0x10]
   166ab:	lea    ecx,[rdi-0x1]
   166ae:	lea    rdi,[rcx*8+0x8]
   166b6:	mov    QWORD PTR [rsp+0x18],rdi
   166bb:	mov    edi,r13d
   166be:	mov    r13,r10
   166c1:	mov    r15d,edi
   166c4:	nop    DWORD PTR [rax+0x0]
   166c8:	mov    r9d,DWORD PTR [rax+0x34]
   166cc:	mov    ecx,DWORD PTR [rsp+0x70]
   166d0:	mov    edx,r15d
   166d3:	mov    r8d,ebx
   166d6:	mov    rax,QWORD PTR [rsp+0x8]
   166db:	mov    rsi,rbp
   166de:	mov    edi,r14d
   166e1:	call   rax
   166e3:	mov    edx,DWORD PTR [rsp+0x10]
   166e7:	mov    rcx,QWORD PTR [r13+0x0]
   166eb:	test   edx,edx
   166ed:	jle    1674f <PartCalMad+0x11f>
   166ef:	mov    rsi,QWORD PTR [rsp+0x18]
   166f4:	mov    rdi,QWORD PTR [rip+0xa0d9d]        # b7498 <byte_abs>
   166fb:	lea    r9,[rcx+rsi*1]
   166ff:	nop
   16700:	movzx  esi,WORD PTR [rax]
   16703:	movzx  edx,WORD PTR [rcx]
   16706:	add    rax,0x8
   1670a:	add    rcx,0x8
   1670e:	sub    edx,esi
   16710:	movzx  esi,WORD PTR [rax-0x6]
   16714:	movsxd rdx,edx
   16717:	add    r12d,DWORD PTR [rdi+rdx*4]
   1671b:	movzx  edx,WORD PTR [rcx-0x6]
   1671f:	sub    edx,esi
   16721:	movzx  esi,WORD PTR [rax-0x4]
   16725:	movsxd rdx,edx
   16728:	add    r12d,DWORD PTR [rdi+rdx*4]
   1672c:	movzx  edx,WORD PTR [rcx-0x4]
   16730:	sub    edx,esi
   16732:	movzx  esi,WORD PTR [rax-0x2]
   16736:	movsxd rdx,edx
   16739:	add    r12d,DWORD PTR [rdi+rdx*4]
   1673d:	movzx  edx,WORD PTR [rcx-0x2]
   16741:	sub    edx,esi
   16743:	movsxd rdx,edx
   16746:	add    r12d,DWORD PTR [rdi+rdx*4]
   1674a:	cmp    rcx,r9
   1674d:	jne    16700 <PartCalMad+0xd0>
   1674f:	cmp    DWORD PTR [rsp+0x68],r12d
   16754:	jle    16776 <PartCalMad+0x146>
   16756:	add    r15d,0x1
   1675a:	add    r13,0x8
   1675e:	cmp    DWORD PTR [rsp+0x14],r15d
   16763:	je     16776 <PartCalMad+0x146>
   16765:	mov    rax,QWORD PTR [rip+0x71e44]        # 885b0 <img>
   1676c:	jmp    166c8 <PartCalMad+0x98>
   16771:	mov    r12d,DWORD PTR [rsp+0x60]
   16776:	add    rsp,0x28
   1677a:	mov    eax,r12d
   1677d:	pop    rbx
   1677e:	pop    rbp
   1677f:	pop    r12
   16781:	pop    r13
   16783:	pop    r14
   16785:	pop    r15
   16787:	ret    
   16788:	mov    edx,r15d
   1678b:	shr    edx,0x1f
   1678e:	lea    r8d,[rdx+r15*1]
   16792:	sar    r8d,1
   16795:	mov    r15d,r8d
   16798:	jmp    1668a <PartCalMad+0x5a>
   1679d:	nop    DWORD PTR [rax]

00000000000167a0 <FastIntegerPelBlockMotionSearch>:
   167a0:	endbr64 
   167a4:	push   r15
   167a6:	mov    eax,esi
   167a8:	push   r14
   167aa:	push   r13
   167ac:	push   r12
   167ae:	push   rbp
   167af:	push   rbx
   167b0:	sub    rsp,0xb8
   167b7:	mov    WORD PTR [rsp+0x72],ax
   167bc:	mov    rax,QWORD PTR [rip+0x71ded]        # 885b0 <img>
   167c3:	mov    DWORD PTR [rsp+0x68],ecx
   167c7:	mov    r11d,DWORD PTR [rsp+0x110]
   167cf:	mov    ecx,DWORD PTR [rax+0x11ad0]
   167d5:	mov    QWORD PTR [rsp+0x48],rdi
   167da:	mov    DWORD PTR [rsp+0x28],esi
   167de:	mov    edi,DWORD PTR [rsp+0xf0]
   167e5:	mov    DWORD PTR [rsp+0x30],edx
   167e9:	mov    esi,DWORD PTR [rsp+0xf8]
   167f0:	mov    DWORD PTR [rsp+0x6c],r8d
   167f5:	mov    DWORD PTR [rsp+0x34],r9d
   167fa:	test   ecx,ecx
   167fc:	je     16823 <FastIntegerPelBlockMotionSearch+0x83>
   167fe:	movsxd r8,DWORD PTR [rax+0xc]
   16802:	mov    r9,r8
   16805:	imul   r8,r8,0x278
   1680c:	add    r8,QWORD PTR [rax+0x3758]
   16813:	mov    r8d,DWORD PTR [r8+0x214]
   1681a:	test   r8d,r8d
   1681d:	jne    16b66 <FastIntegerPelBlockMotionSearch+0x3c6>
   16823:	movsxd rdx,edx
   16826:	lea    r9,[rip+0xa0bf3]        # b7420 <listX>
   1682d:	movsx  esi,si
   16830:	movsx  edi,di
   16833:	mov    r9,QWORD PTR [r9+rdx*8]
   16837:	movsx  r8,WORD PTR [rsp+0x72]
   1683d:	mov    DWORD PTR [rsp+0x90],esi
   16844:	mulsd  xmm0,QWORD PTR [rip+0x5c604]        # 72e50 <quant_coef+0x190>
   1684c:	mov    r10d,DWORD PTR [rsp+0x6c]
   16851:	mov    DWORD PTR [rsp+0x98],edi
   16858:	mov    rdx,QWORD PTR [r9+r8*8]
   1685c:	addsd  xmm0,QWORD PTR [rip+0x5c5f4]        # 72e58 <quant_coef+0x198>
   16864:	lea    esi,[rsi+r10*4]
   16868:	mov    rbx,QWORD PTR [rdx+0x1920]
   1686f:	mov    rdx,QWORD PTR [rip+0x71d42]        # 885b8 <input>
   16876:	mov    DWORD PTR [rsp+0x60],esi
   1687a:	mov    rsi,QWORD PTR [rsp+0x100]
   16882:	mov    QWORD PTR [rsp+0x38],rbx
   16887:	cvttsd2si ebx,xmm0
   1688b:	mov    DWORD PTR [rsp+0x44],ebx
   1688f:	movsxd rbx,DWORD PTR [rsp+0x34]
   16894:	mov    r9d,DWORD PTR [rdx+rbx*8+0x54]
   16899:	mov    r8d,DWORD PTR [rdx+rbx*8+0x50]
   1689e:	mov    DWORD PTR [rsp+0x40],r9d
   168a3:	mov    r9d,r8d
   168a6:	sar    r9d,0x2
   168aa:	mov    DWORD PTR [rsp+0x58],r9d
   168af:	mov    r9d,DWORD PTR [rsp+0x68]
   168b4:	lea    edi,[rdi+r9*4]
   168b8:	mov    DWORD PTR [rsp+0x5c],edi
   168bc:	movsx  edi,WORD PTR [rsi]
   168bf:	mov    rsi,QWORD PTR [rsp+0x108]
   168c7:	mov    WORD PTR [rsp+0x78],di
   168cc:	movsx  esi,WORD PTR [rsi]
   168cf:	mov    DWORD PTR [rsp+0x20],edi
   168d3:	add    edi,r9d
   168d6:	mov    DWORD PTR [rsp+0xc],edi
   168da:	mov    edi,DWORD PTR [rdx+0x4d4]
   168e0:	mov    WORD PTR [rsp+0x80],si
   168e8:	mov    DWORD PTR [rsp+0x88],esi
   168ef:	add    esi,r10d
   168f2:	mov    DWORD PTR [rsp+0x24],esi
   168f6:	mov    DWORD PTR [rsp+0x8c],edi
   168fd:	mov    edx,DWORD PTR [rax+0x3c]
   16900:	test   ecx,ecx
   16902:	je     16924 <FastIntegerPelBlockMotionSearch+0x184>
   16904:	movsxd rcx,DWORD PTR [rax+0xc]
   16908:	imul   rcx,rcx,0x278
   1690f:	add    rcx,QWORD PTR [rax+0x3758]
   16916:	mov    ecx,DWORD PTR [rcx+0x214]
   1691c:	test   ecx,ecx
   1691e:	jne    16b58 <FastIntegerPelBlockMotionSearch+0x3b8>
   16924:	mov    edi,DWORD PTR [rsp+0xc]
   16928:	cmp    edi,r11d
   1692b:	jle    16950 <FastIntegerPelBlockMotionSearch+0x1b0>
   1692d:	mov    ecx,r11d
   16930:	not    ecx
   16932:	add    ecx,DWORD PTR [rax+0x34]
   16935:	mov    eax,ecx
   16937:	sub    eax,r8d
   1693a:	cmp    eax,edi
   1693c:	jle    16950 <FastIntegerPelBlockMotionSearch+0x1b0>
   1693e:	mov    esi,DWORD PTR [rsp+0x24]
   16942:	cmp    esi,r11d
   16945:	jg     17a28 <FastIntegerPelBlockMotionSearch+0x1288>
   1694b:	nop    DWORD PTR [rax+rax*1+0x0]
   16950:	lea    rax,[rip+0x47479]        # 5ddd0 <UMVLineX>
   16957:	mov    QWORD PTR [rsp+0x50],rax
   1695c:	lea    eax,[r11+r11*1+0x1]
   16961:	xor    esi,esi
   16963:	mov    DWORD PTR [rsp+0x10],r8d
   16968:	imul   eax,eax
   1696b:	mov    DWORD PTR [rsp+0x110],r11d
   16973:	lea    edx,[rax*4+0x0]
   1697a:	mov    rax,QWORD PTR [rip+0x73f0f]        # 8a890 <McostState>
   16981:	movsxd rdx,edx
   16984:	mov    rdi,QWORD PTR [rax]
   16987:	call   43b0 <memset@plt>
   1698c:	cmp    WORD PTR [rsp+0x28],0x0
   16992:	mov    r8d,DWORD PTR [rsp+0x10]
   16997:	mov    r11d,DWORD PTR [rsp+0x110]
   1699f:	jle    172f8 <FastIntegerPelBlockMotionSearch+0xb58>
   169a5:	mov    eax,DWORD PTR [rip+0x73ec5]        # 8a870 <pred_SAD_ref>
   169ab:	test   eax,eax
   169ad:	jne    16b0e <FastIntegerPelBlockMotionSearch+0x36e>
   169b3:	pxor   xmm4,xmm4
   169b7:	movss  DWORD PTR [rsp+0x64],xmm4
   169bd:	movss  DWORD PTR [rsp+0x74],xmm4
   169c3:	mov    ebx,DWORD PTR [rsp+0xc]
   169c7:	mov    r15d,DWORD PTR [rsp+0x24]
   169cc:	mov    DWORD PTR [rsp+0x110],r11d
   169d4:	mov    rcx,QWORD PTR [rip+0xa0a9d]        # b7478 <mvbits>
   169db:	lea    edx,[rbx*4+0x0]
   169e2:	lea    eax,[r15*4+0x0]
   169ea:	sub    edx,DWORD PTR [rsp+0x5c]
   169ee:	sub    eax,DWORD PTR [rsp+0x60]
   169f2:	movsxd rdx,edx
   169f5:	cdqe   
   169f7:	mov    eax,DWORD PTR [rcx+rax*4]
   169fa:	add    eax,DWORD PTR [rcx+rdx*4]
   169fd:	imul   eax,DWORD PTR [rsp+0x44]
   16a02:	push   r15
   16a04:	push   rbx
   16a05:	mov    esi,DWORD PTR [rsp+0x128]
   16a0c:	sar    eax,0x10
   16a0f:	push   rsi
   16a10:	push   rax
   16a11:	mov    ecx,DWORD PTR [rsp+0x60]
   16a15:	mov    rdx,QWORD PTR [rsp+0x70]
   16a1a:	mov    rsi,QWORD PTR [rsp+0x68]
   16a1f:	mov    r9d,DWORD PTR [rsp+0x78]
   16a24:	mov    rdi,QWORD PTR [rsp+0x58]
   16a29:	mov    DWORD PTR [rsp+0x30],r8d
   16a2e:	call   16630 <PartCalMad>
   16a33:	movsxd rdx,DWORD PTR [rsp+0x130]
   16a3b:	add    rsp,0x20
   16a3f:	mov    rcx,QWORD PTR [rip+0x73e4a]        # 8a890 <McostState>
   16a46:	cmp    DWORD PTR [rsp+0x118],eax
   16a4d:	mov    r8d,DWORD PTR [rsp+0x10]
   16a52:	mov    rsi,QWORD PTR [rcx+rdx*8]
   16a56:	mov    r11,rdx
   16a59:	mov    DWORD PTR [rsi+rdx*4],eax
   16a5c:	jle    17278 <FastIntegerPelBlockMotionSearch+0xad8>
   16a62:	mov    DWORD PTR [rsp+0x10],r15d
   16a67:	mov    r10d,ebx
   16a6a:	mov    DWORD PTR [rsp+0x118],eax
   16a71:	mov    eax,DWORD PTR [rsp+0x10]
   16a75:	mov    DWORD PTR [rsp+0x2c],r10d
   16a7a:	xor    r15d,r15d
   16a7d:	lea    r13,[rip+0x5c21c]        # 72ca0 <Diamond_y.5376>
   16a84:	lea    r12,[rip+0x5c225]        # 72cb0 <Diamond_x.5375>
   16a8b:	mov    ebp,0xffffffff
   16a90:	mov    DWORD PTR [rsp+0x18],eax
   16a94:	add    ebp,r10d
   16a97:	mov    ebx,ebp
   16a99:	sub    ebx,DWORD PTR [rsp+0xc]
   16a9d:	mov    edx,ebx
   16a9f:	sar    edx,0x1f
   16aa2:	mov    eax,edx
   16aa4:	xor    eax,ebx
   16aa6:	sub    eax,edx
   16aa8:	cmp    eax,r11d
   16aab:	jg     16af0 <FastIntegerPelBlockMotionSearch+0x350>
   16aad:	add    r15d,DWORD PTR [rsp+0x10]
   16ab2:	mov    r14d,r15d
   16ab5:	sub    r14d,DWORD PTR [rsp+0x24]
   16aba:	mov    edx,r14d
   16abd:	sar    edx,0x1f
   16ac0:	mov    eax,edx
   16ac2:	xor    eax,r14d
   16ac5:	sub    eax,edx
   16ac7:	cmp    eax,r11d
   16aca:	jg     16af0 <FastIntegerPelBlockMotionSearch+0x350>
   16acc:	add    r14d,r11d
   16acf:	add    ebx,r11d
   16ad2:	movsxd r14,r14d
   16ad5:	movsxd rbx,ebx
   16ad8:	mov    rax,QWORD PTR [rcx+r14*8]
   16adc:	mov    eax,DWORD PTR [rax+rbx*4]
   16adf:	test   eax,eax
   16ae1:	je     1735b <FastIntegerPelBlockMotionSearch+0xbbb>
   16ae7:	nop    WORD PTR [rax+rax*1+0x0]
   16af0:	add    r12,0x4
   16af4:	lea    rax,[rip+0x5c1c5]        # 72cc0 <quant_coef>
   16afb:	add    r13,0x4
   16aff:	cmp    r12,rax
   16b02:	je     16b80 <FastIntegerPelBlockMotionSearch+0x3e0>
   16b04:	mov    ebp,DWORD PTR [r12]
   16b08:	mov    r15d,DWORD PTR [r13+0x0]
   16b0c:	jmp    16a94 <FastIntegerPelBlockMotionSearch+0x2f4>
   16b0e:	imul   eax,eax
   16b11:	pxor   xmm0,xmm0
   16b15:	cvtsi2ss xmm0,eax
   16b19:	lea    rax,[rip+0x73dc0]        # 8a8e0 <Bsize>
   16b20:	movss  xmm1,DWORD PTR [rax+rbx*4]
   16b25:	lea    rax,[rip+0x73e14]        # 8a940 <AlphaSec>
   16b2c:	divss  xmm1,xmm0
   16b30:	movaps xmm3,xmm1
   16b33:	subss  xmm3,DWORD PTR [rax+rbx*4]
   16b38:	lea    rax,[rip+0x73d61]        # 8a8a0 <AlphaThird>
   16b3f:	movaps xmm0,xmm1
   16b42:	subss  xmm0,DWORD PTR [rax+rbx*4]
   16b47:	movss  DWORD PTR [rsp+0x74],xmm3
   16b4d:	movss  DWORD PTR [rsp+0x64],xmm0
   16b53:	jmp    169c3 <FastIntegerPelBlockMotionSearch+0x223>
   16b58:	mov    ecx,edx
   16b5a:	shr    ecx,0x1f
   16b5d:	add    edx,ecx
   16b5f:	sar    edx,1
   16b61:	jmp    16924 <FastIntegerPelBlockMotionSearch+0x184>
   16b66:	lea    r8d,[rdx+0x4]
   16b6a:	and    r9d,0x1
   16b6e:	lea    edx,[rdx+0x2]
   16b71:	cmovne edx,r8d
   16b75:	jmp    16823 <FastIntegerPelBlockMotionSearch+0x83>
   16b7a:	nop    WORD PTR [rax+rax*1+0x0]
   16b80:	mov    edi,DWORD PTR [rsp+0xc]
   16b84:	cmp    DWORD PTR [rsp+0x68],edi
   16b88:	jne    17198 <FastIntegerPelBlockMotionSearch+0x9f8>
   16b8e:	mov    esi,DWORD PTR [rsp+0x24]
   16b92:	cmp    DWORD PTR [rsp+0x6c],esi
   16b96:	jne    17198 <FastIntegerPelBlockMotionSearch+0x9f8>
   16b9c:	cmp    DWORD PTR [rsp+0x34],0x1
   16ba1:	jle    16c42 <FastIntegerPelBlockMotionSearch+0x4a2>
   16ba7:	mov    edx,DWORD PTR [rip+0x73cd3]        # 8a880 <pred_MV_uplayer>
   16bad:	test   edx,edx
   16baf:	lea    eax,[rdx+0x3]
   16bb2:	cmovns eax,edx
   16bb5:	sar    eax,0x2
   16bb8:	mov    edx,eax
   16bba:	sub    edx,DWORD PTR [rsp+0x20]
   16bbe:	mov    edi,edx
   16bc0:	sar    edi,0x1f
   16bc3:	mov    esi,edi
   16bc5:	xor    esi,edx
   16bc7:	sub    esi,edi
   16bc9:	cmp    esi,r11d
   16bcc:	jg     16c01 <FastIntegerPelBlockMotionSearch+0x461>
   16bce:	mov    edi,DWORD PTR [rip+0x73cb0]        # 8a884 <pred_MV_uplayer+0x4>
   16bd4:	test   edi,edi
   16bd6:	lea    esi,[rdi+0x3]
   16bd9:	cmovns esi,edi
   16bdc:	sar    esi,0x2
   16bdf:	mov    edi,esi
   16be1:	sub    edi,DWORD PTR [rsp+0x88]
   16be8:	mov    r10d,edi
   16beb:	sar    r10d,0x1f
   16bef:	mov    r9d,r10d
   16bf2:	xor    r9d,edi
   16bf5:	sub    r9d,r10d
   16bf8:	cmp    r9d,r11d
   16bfb:	jle    17740 <FastIntegerPelBlockMotionSearch+0xfa0>
   16c01:	mov    eax,DWORD PTR [rip+0x73d19]        # 8a920 <pred_SAD_uplayer>
   16c07:	pxor   xmm0,xmm0
   16c0b:	movss  xmm2,DWORD PTR [rsp+0x64]
   16c11:	pxor   xmm1,xmm1
   16c15:	mov    edx,DWORD PTR [rsp+0x118]
   16c1c:	cvtsi2ss xmm0,eax
   16c20:	sub    edx,eax
   16c22:	cvtsi2ss xmm1,edx
   16c26:	mulss  xmm2,xmm0
   16c2a:	comiss xmm2,xmm1
   16c2d:	ja     17620 <FastIntegerPelBlockMotionSearch+0xe80>
   16c33:	mulss  xmm0,DWORD PTR [rsp+0x74]
   16c39:	comiss xmm0,xmm1
   16c3c:	ja     17d50 <FastIntegerPelBlockMotionSearch+0x15b0>
   16c42:	mov    ebx,DWORD PTR [rsp+0x30]
   16c46:	mov    edi,DWORD PTR [rsp+0x28]
   16c4a:	mov    rsi,QWORD PTR [rip+0x7195f]        # 885b0 <img>
   16c51:	test   ebx,ebx
   16c53:	movsx  eax,di
   16c56:	sete   bl
   16c59:	add    eax,0x1
   16c5c:	cmp    DWORD PTR [rsi],eax
   16c5e:	jle    17290 <FastIntegerPelBlockMotionSearch+0xaf0>
   16c64:	cmp    di,0xffff
   16c68:	je     17290 <FastIntegerPelBlockMotionSearch+0xaf0>
   16c6e:	mov    edx,DWORD PTR [rip+0x73c8c]        # 8a900 <pred_MV_time>
   16c74:	test   edx,edx
   16c76:	lea    eax,[rdx+0x3]
   16c79:	cmovns eax,edx
   16c7c:	sar    eax,0x2
   16c7f:	mov    edx,eax
   16c81:	sub    edx,DWORD PTR [rsp+0x20]
   16c85:	mov    edi,edx
   16c87:	sar    edi,0x1f
   16c8a:	mov    esi,edi
   16c8c:	xor    esi,edx
   16c8e:	sub    esi,edi
   16c90:	cmp    esi,r11d
   16c93:	jle    17630 <FastIntegerPelBlockMotionSearch+0xe90>
   16c99:	cmp    WORD PTR [rsp+0x28],0x0
   16c9f:	mov    rdx,QWORD PTR [rip+0x71912]        # 885b8 <input>
   16ca6:	setg   al
   16ca9:	and    eax,ebx
   16cab:	cmp    DWORD PTR [rdx+0xb40],0x1
   16cb2:	je     174de <FastIntegerPelBlockMotionSearch+0xd3e>
   16cb8:	mov    edi,DWORD PTR [rsp+0x118]
   16cbf:	mov    DWORD PTR [rsp+0x30],edi
   16cc3:	test   al,al
   16cc5:	je     17c38 <FastIntegerPelBlockMotionSearch+0x1498>
   16ccb:	mov    edx,DWORD PTR [rip+0x73c37]        # 8a908 <pred_MV_ref>
   16cd1:	test   edx,edx
   16cd3:	lea    eax,[rdx+0x3]
   16cd6:	cmovns eax,edx
   16cd9:	sar    eax,0x2
   16cdc:	mov    edx,eax
   16cde:	sub    edx,DWORD PTR [rsp+0x20]
   16ce2:	mov    edi,edx
   16ce4:	sar    edi,0x1f
   16ce7:	mov    esi,edi
   16ce9:	xor    esi,edx
   16ceb:	sub    esi,edi
   16ced:	cmp    esi,r11d
   16cf0:	jle    1782d <FastIntegerPelBlockMotionSearch+0x108d>
   16cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16d00:	mov    eax,DWORD PTR [rsp+0x18]
   16d04:	mov    r10d,DWORD PTR [rsp+0x2c]
   16d09:	xor    r15d,r15d
   16d0c:	lea    r13,[rip+0x5bf8d]        # 72ca0 <Diamond_y.5376>
   16d13:	lea    r12,[rip+0x5bf96]        # 72cb0 <Diamond_x.5375>
   16d1a:	mov    ebp,0xffffffff
   16d1f:	mov    DWORD PTR [rsp+0x20],eax
   16d23:	mov    DWORD PTR [rsp+0x10],r10d
   16d28:	add    ebp,r10d
   16d2b:	mov    edx,ebp
   16d2d:	sub    edx,DWORD PTR [rsp+0xc]
   16d31:	mov    esi,edx
   16d33:	sar    esi,0x1f
   16d36:	mov    eax,esi
   16d38:	xor    eax,edx
   16d3a:	sub    eax,esi
   16d3c:	cmp    eax,r11d
   16d3f:	jg     16d80 <FastIntegerPelBlockMotionSearch+0x5e0>
   16d41:	add    r15d,DWORD PTR [rsp+0x18]
   16d46:	mov    eax,r15d
   16d49:	sub    eax,DWORD PTR [rsp+0x24]
   16d4d:	mov    edi,eax
   16d4f:	sar    edi,0x1f
   16d52:	mov    esi,edi
   16d54:	xor    esi,eax
   16d56:	sub    esi,edi
   16d58:	cmp    esi,r11d
   16d5b:	jg     16d80 <FastIntegerPelBlockMotionSearch+0x5e0>
   16d5d:	add    eax,r11d
   16d60:	add    edx,r11d
   16d63:	movsxd r14,eax
   16d66:	movsxd rbx,edx
   16d69:	mov    rax,QWORD PTR [rcx+r14*8]
   16d6d:	mov    esi,DWORD PTR [rax+rbx*4]
   16d70:	test   esi,esi
   16d72:	je     1742f <FastIntegerPelBlockMotionSearch+0xc8f>
   16d78:	nop    DWORD PTR [rax+rax*1+0x0]
   16d80:	add    r12,0x4
   16d84:	lea    rax,[rip+0x5bf35]        # 72cc0 <quant_coef>
   16d8b:	add    r13,0x4
   16d8f:	cmp    r12,rax
   16d92:	je     16da0 <FastIntegerPelBlockMotionSearch+0x600>
   16d94:	mov    ebp,DWORD PTR [r12]
   16d98:	mov    r15d,DWORD PTR [r13+0x0]
   16d9c:	jmp    16d28 <FastIntegerPelBlockMotionSearch+0x588>
   16d9e:	xchg   ax,ax
   16da0:	cmp    WORD PTR [rsp+0x28],0x0
   16da6:	mov    eax,DWORD PTR [rip+0x73ac4]        # 8a870 <pred_SAD_ref>
   16dac:	jle    17419 <FastIntegerPelBlockMotionSearch+0xc79>
   16db2:	pxor   xmm0,xmm0
   16db6:	mov    edx,DWORD PTR [rsp+0x30]
   16dba:	movss  xmm2,DWORD PTR [rsp+0x64]
   16dc0:	pxor   xmm1,xmm1
   16dc4:	cvtsi2ss xmm0,eax
   16dc8:	sub    edx,eax
   16dca:	cvtsi2ss xmm1,edx
   16dce:	mulss  xmm2,xmm0
   16dd2:	comiss xmm2,xmm1
   16dd5:	ja     16f91 <FastIntegerPelBlockMotionSearch+0x7f1>
   16ddb:	mulss  xmm0,DWORD PTR [rsp+0x74]
   16de1:	comiss xmm0,xmm1
   16de4:	ja     16df1 <FastIntegerPelBlockMotionSearch+0x651>
   16de6:	cmp    DWORD PTR [rsp+0x34],0x6
   16deb:	jle    17a89 <FastIntegerPelBlockMotionSearch+0x12e9>
   16df1:	test   r11d,r11d
   16df4:	jle    16fb6 <FastIntegerPelBlockMotionSearch+0x816>
   16dfa:	mov    DWORD PTR [rsp+0x28],0x0
   16e02:	lea    r10,[rip+0x5be0f]        # 72c18 <Hexagon_x.5377+0x18>
   16e09:	nop    DWORD PTR [rax+0x0]
   16e10:	mov    eax,DWORD PTR [rsp+0x20]
   16e14:	xor    r15d,r15d
   16e17:	mov    ebp,0x2
   16e1c:	mov    DWORD PTR [rsp+0x34],0x1
   16e24:	lea    r12,[rip+0x5bdd5]        # 72c00 <Hexagon_x.5377>
   16e2b:	lea    r13,[rip+0x5bdae]        # 72be0 <Hexagon_y.5378>
   16e32:	mov    DWORD PTR [rsp+0x18],eax
   16e36:	mov    eax,DWORD PTR [rsp+0x10]
   16e3a:	mov    DWORD PTR [rsp+0x2c],eax
   16e3e:	jmp    16e48 <FastIntegerPelBlockMotionSearch+0x6a8>
   16e40:	mov    ebp,DWORD PTR [r12]
   16e44:	mov    r15d,DWORD PTR [r13+0x0]
   16e48:	add    ebp,DWORD PTR [rsp+0x10]
   16e4c:	mov    ebx,ebp
   16e4e:	sub    ebx,DWORD PTR [rsp+0xc]
   16e52:	mov    edx,ebx
   16e54:	sar    edx,0x1f
   16e57:	mov    eax,edx
   16e59:	xor    eax,ebx
   16e5b:	sub    eax,edx
   16e5d:	cmp    eax,r11d
   16e60:	jg     16ea0 <FastIntegerPelBlockMotionSearch+0x700>
   16e62:	add    r15d,DWORD PTR [rsp+0x20]
   16e67:	mov    r14d,r15d
   16e6a:	sub    r14d,DWORD PTR [rsp+0x24]
   16e6f:	mov    edx,r14d
   16e72:	sar    edx,0x1f
   16e75:	mov    eax,edx
   16e77:	xor    eax,r14d
   16e7a:	sub    eax,edx
   16e7c:	cmp    eax,r11d
   16e7f:	jg     16ea0 <FastIntegerPelBlockMotionSearch+0x700>
   16e81:	add    r14d,r11d
   16e84:	add    ebx,r11d
   16e87:	movsxd r14,r14d
   16e8a:	movsxd rbx,ebx
   16e8d:	mov    rax,QWORD PTR [rcx+r14*8]
   16e91:	mov    edi,DWORD PTR [rax+rbx*4]
   16e94:	test   edi,edi
   16e96:	je     16ee0 <FastIntegerPelBlockMotionSearch+0x740>
   16e98:	nop    DWORD PTR [rax+rax*1+0x0]
   16ea0:	add    r12,0x4
   16ea4:	add    r13,0x4
   16ea8:	cmp    r10,r12
   16eab:	jne    16e40 <FastIntegerPelBlockMotionSearch+0x6a0>
   16ead:	mov    esi,DWORD PTR [rsp+0x34]
   16eb1:	test   esi,esi
   16eb3:	jne    17000 <FastIntegerPelBlockMotionSearch+0x860>
   16eb9:	add    DWORD PTR [rsp+0x28],0x1
   16ebe:	mov    eax,DWORD PTR [rsp+0x28]
   16ec2:	cmp    r11d,eax
   16ec5:	je     17000 <FastIntegerPelBlockMotionSearch+0x860>
   16ecb:	mov    eax,DWORD PTR [rsp+0x18]
   16ecf:	mov    DWORD PTR [rsp+0x20],eax
   16ed3:	mov    eax,DWORD PTR [rsp+0x2c]
   16ed7:	mov    DWORD PTR [rsp+0x10],eax
   16edb:	jmp    16e10 <FastIntegerPelBlockMotionSearch+0x670>
   16ee0:	mov    rcx,QWORD PTR [rip+0xa0591]        # b7478 <mvbits>
   16ee7:	lea    edx,[rbp*4+0x0]
   16eee:	lea    eax,[r15*4+0x0]
   16ef6:	sub    edx,DWORD PTR [rsp+0x5c]
   16efa:	sub    eax,DWORD PTR [rsp+0x60]
   16efe:	movsxd rdx,edx
   16f01:	mov    DWORD PTR [rsp+0x110],r11d
   16f09:	cdqe   
   16f0b:	mov    eax,DWORD PTR [rcx+rax*4]
   16f0e:	add    eax,DWORD PTR [rcx+rdx*4]
   16f11:	imul   eax,DWORD PTR [rsp+0x44]
   16f16:	push   r15
   16f18:	push   rbp
   16f19:	mov    edi,DWORD PTR [rsp+0x40]
   16f1d:	sar    eax,0x10
   16f20:	push   rdi
   16f21:	push   rax
   16f22:	mov    ecx,DWORD PTR [rsp+0x60]
   16f26:	mov    rdx,QWORD PTR [rsp+0x70]
   16f2b:	mov    r9d,DWORD PTR [rsp+0x78]
   16f30:	mov    rsi,QWORD PTR [rsp+0x68]
   16f35:	mov    rdi,QWORD PTR [rsp+0x58]
   16f3a:	mov    DWORD PTR [rsp+0x84],r8d
   16f42:	call   16630 <PartCalMad>
   16f47:	mov    rcx,QWORD PTR [rip+0x73942]        # 8a890 <McostState>
   16f4e:	add    rsp,0x20
   16f52:	lea    r10,[rip+0x5bcbf]        # 72c18 <Hexagon_x.5377+0x18>
   16f59:	cmp    eax,DWORD PTR [rsp+0x30]
   16f5d:	mov    r8d,DWORD PTR [rsp+0x64]
   16f62:	mov    rdx,QWORD PTR [rcx+r14*8]
   16f66:	mov    r11d,DWORD PTR [rsp+0x110]
   16f6e:	mov    DWORD PTR [rdx+rbx*4],eax
   16f71:	jge    16ea0 <FastIntegerPelBlockMotionSearch+0x700>
   16f77:	mov    DWORD PTR [rsp+0x34],0x0
   16f7f:	mov    DWORD PTR [rsp+0x18],r15d
   16f84:	mov    DWORD PTR [rsp+0x2c],ebp
   16f88:	mov    DWORD PTR [rsp+0x30],eax
   16f8c:	jmp    16ea0 <FastIntegerPelBlockMotionSearch+0x700>
   16f91:	mov    eax,DWORD PTR [rsp+0x20]
   16f95:	mov    DWORD PTR [rsp+0x18],eax
   16f99:	mov    eax,DWORD PTR [rsp+0x10]
   16f9d:	mov    DWORD PTR [rsp+0x2c],eax
   16fa1:	test   r11d,r11d
   16fa4:	jg     17000 <FastIntegerPelBlockMotionSearch+0x860>
   16fa6:	mov    eax,DWORD PTR [rsp+0x18]
   16faa:	mov    DWORD PTR [rsp+0x20],eax
   16fae:	mov    eax,DWORD PTR [rsp+0x2c]
   16fb2:	mov    DWORD PTR [rsp+0x10],eax
   16fb6:	mov    rdi,QWORD PTR [rsp+0x100]
   16fbe:	movzx  eax,WORD PTR [rsp+0x10]
   16fc3:	mov    rsi,QWORD PTR [rsp+0x108]
   16fcb:	sub    ax,WORD PTR [rsp+0x68]
   16fd0:	mov    WORD PTR [rdi],ax
   16fd3:	movzx  eax,WORD PTR [rsp+0x20]
   16fd8:	sub    ax,WORD PTR [rsp+0x6c]
   16fdd:	mov    WORD PTR [rsi],ax
   16fe0:	mov    eax,DWORD PTR [rsp+0x30]
   16fe4:	add    rsp,0xb8
   16feb:	pop    rbx
   16fec:	pop    rbp
   16fed:	pop    r12
   16fef:	pop    r13
   16ff1:	pop    r14
   16ff3:	pop    r15
   16ff5:	ret    
   16ff6:	mov    eax,DWORD PTR [rsp+0x10]
   16ffa:	mov    DWORD PTR [rsp+0x2c],eax
   16ffe:	xchg   ax,ax
   17000:	xor    r10d,r10d
   17003:	mov    DWORD PTR [rsp+0x28],r10d
   17008:	mov    r10d,DWORD PTR [rsp+0x2c]
   1700d:	nop    DWORD PTR [rax]
   17010:	mov    eax,DWORD PTR [rsp+0x18]
   17014:	mov    DWORD PTR [rsp+0x10],r10d
   17019:	lea    r13,[rip+0x5bc80]        # 72ca0 <Diamond_y.5376>
   17020:	lea    r12,[rip+0x5bc89]        # 72cb0 <Diamond_x.5375>
   17027:	mov    DWORD PTR [rsp+0x2c],0x1
   1702f:	xor    r15d,r15d
   17032:	mov    ebp,0xffffffff
   17037:	mov    DWORD PTR [rsp+0x20],eax
   1703b:	add    ebp,r10d
   1703e:	mov    ebx,ebp
   17040:	sub    ebx,DWORD PTR [rsp+0xc]
   17044:	mov    edx,ebx
   17046:	sar    edx,0x1f
   17049:	mov    eax,edx
   1704b:	xor    eax,ebx
   1704d:	sub    eax,edx
   1704f:	cmp    eax,r11d
   17052:	jg     17090 <FastIntegerPelBlockMotionSearch+0x8f0>
   17054:	add    r15d,DWORD PTR [rsp+0x18]
   17059:	mov    r14d,r15d
   1705c:	sub    r14d,DWORD PTR [rsp+0x24]
   17061:	mov    edx,r14d
   17064:	sar    edx,0x1f
   17067:	mov    eax,edx
   17069:	xor    eax,r14d
   1706c:	sub    eax,edx
   1706e:	cmp    eax,r11d
   17071:	jg     17090 <FastIntegerPelBlockMotionSearch+0x8f0>
   17073:	add    r14d,r11d
   17076:	add    ebx,r11d
   17079:	movsxd r14,r14d
   1707c:	movsxd rbx,ebx
   1707f:	mov    rax,QWORD PTR [rcx+r14*8]
   17083:	mov    edx,DWORD PTR [rax+rbx*4]
   17086:	test   edx,edx
   17088:	je     170e0 <FastIntegerPelBlockMotionSearch+0x940>
   1708a:	nop    WORD PTR [rax+rax*1+0x0]
   17090:	add    r12,0x4
   17094:	lea    rax,[rip+0x5bc25]        # 72cc0 <quant_coef>
   1709b:	add    r13,0x4
   1709f:	cmp    r12,rax
   170a2:	je     170b0 <FastIntegerPelBlockMotionSearch+0x910>
   170a4:	mov    ebp,DWORD PTR [r12]
   170a8:	mov    r15d,DWORD PTR [r13+0x0]
   170ac:	jmp    1703b <FastIntegerPelBlockMotionSearch+0x89b>
   170ae:	xchg   ax,ax
   170b0:	mov    eax,DWORD PTR [rsp+0x2c]
   170b4:	test   eax,eax
   170b6:	jne    16fb6 <FastIntegerPelBlockMotionSearch+0x816>
   170bc:	add    DWORD PTR [rsp+0x28],0x1
   170c1:	mov    eax,DWORD PTR [rsp+0x28]
   170c5:	cmp    r11d,eax
   170c8:	jle    16fb6 <FastIntegerPelBlockMotionSearch+0x816>
   170ce:	mov    eax,DWORD PTR [rsp+0x20]
   170d2:	mov    r10d,DWORD PTR [rsp+0x10]
   170d7:	mov    DWORD PTR [rsp+0x18],eax
   170db:	jmp    17010 <FastIntegerPelBlockMotionSearch+0x870>
   170e0:	mov    rcx,QWORD PTR [rip+0xa0391]        # b7478 <mvbits>
   170e7:	lea    edx,[rbp*4+0x0]
   170ee:	lea    eax,[r15*4+0x0]
   170f6:	sub    edx,DWORD PTR [rsp+0x5c]
   170fa:	sub    eax,DWORD PTR [rsp+0x60]
   170fe:	movsxd rdx,edx
   17101:	mov    DWORD PTR [rsp+0x64],r10d
   17106:	cdqe   
   17108:	mov    DWORD PTR [rsp+0x110],r11d
   17110:	mov    eax,DWORD PTR [rcx+rax*4]
   17113:	add    eax,DWORD PTR [rcx+rdx*4]
   17116:	imul   eax,DWORD PTR [rsp+0x44]
   1711b:	push   r15
   1711d:	push   rbp
   1711e:	mov    edi,DWORD PTR [rsp+0x40]
   17122:	sar    eax,0x10
   17125:	push   rdi
   17126:	push   rax
   17127:	mov    ecx,DWORD PTR [rsp+0x60]
   1712b:	mov    rdx,QWORD PTR [rsp+0x70]
   17130:	mov    r9d,DWORD PTR [rsp+0x78]
   17135:	mov    rsi,QWORD PTR [rsp+0x68]
   1713a:	mov    rdi,QWORD PTR [rsp+0x58]
   1713f:	mov    DWORD PTR [rsp+0x54],r8d
   17144:	call   16630 <PartCalMad>
   17149:	mov    rcx,QWORD PTR [rip+0x73740]        # 8a890 <McostState>
   17150:	add    rsp,0x20
   17154:	mov    r8d,DWORD PTR [rsp+0x34]
   17159:	cmp    eax,DWORD PTR [rsp+0x30]
   1715d:	mov    r10d,DWORD PTR [rsp+0x64]
   17162:	mov    rdx,QWORD PTR [rcx+r14*8]
   17166:	mov    r11d,DWORD PTR [rsp+0x110]
   1716e:	mov    DWORD PTR [rdx+rbx*4],eax
   17171:	jge    17090 <FastIntegerPelBlockMotionSearch+0x8f0>
   17177:	mov    DWORD PTR [rsp+0x2c],0x0
   1717f:	mov    DWORD PTR [rsp+0x20],r15d
   17184:	mov    DWORD PTR [rsp+0x10],ebp
   17188:	mov    DWORD PTR [rsp+0x30],eax
   1718c:	jmp    17090 <FastIntegerPelBlockMotionSearch+0x8f0>
   17191:	nop    DWORD PTR [rax+0x0]
   17198:	movzx  eax,WORD PTR [rsp+0x78]
   1719d:	mov    edx,eax
   1719f:	sar    dx,0xf
   171a3:	xor    eax,edx
   171a5:	sub    eax,edx
   171a7:	movzx  eax,ax
   171aa:	cmp    eax,r11d
   171ad:	jg     171cd <FastIntegerPelBlockMotionSearch+0xa2d>
   171af:	movzx  eax,WORD PTR [rsp+0x80]
   171b7:	mov    edx,eax
   171b9:	sar    dx,0xf
   171bd:	xor    eax,edx
   171bf:	sub    eax,edx
   171c1:	movzx  eax,ax
   171c4:	cmp    eax,r11d
   171c7:	jle    17942 <FastIntegerPelBlockMotionSearch+0x11a2>
   171cd:	mov    ebx,DWORD PTR [rsp+0x18]
   171d1:	mov    r10d,DWORD PTR [rsp+0x2c]
   171d6:	mov    DWORD PTR [rsp+0x18],ebx
   171da:	xor    r15d,r15d
   171dd:	lea    r13,[rip+0x5babc]        # 72ca0 <Diamond_y.5376>
   171e4:	lea    r12,[rip+0x5bac5]        # 72cb0 <Diamond_x.5375>
   171eb:	mov    DWORD PTR [rsp+0x2c],r10d
   171f0:	mov    ebp,0xffffffff
   171f5:	add    ebp,r10d
   171f8:	mov    edx,ebp
   171fa:	sub    edx,DWORD PTR [rsp+0xc]
   171fe:	mov    esi,edx
   17200:	sar    esi,0x1f
   17203:	mov    eax,esi
   17205:	xor    eax,edx
   17207:	sub    eax,esi
   17209:	cmp    eax,r11d
   1720c:	jg     17250 <FastIntegerPelBlockMotionSearch+0xab0>
   1720e:	add    r15d,ebx
   17211:	mov    eax,r15d
   17214:	sub    eax,DWORD PTR [rsp+0x24]
   17218:	mov    edi,eax
   1721a:	sar    edi,0x1f
   1721d:	mov    esi,edi
   1721f:	xor    esi,eax
   17221:	sub    esi,edi
   17223:	cmp    esi,r11d
   17226:	jg     17250 <FastIntegerPelBlockMotionSearch+0xab0>
   17228:	add    eax,r11d
   1722b:	add    edx,r11d
   1722e:	movsxd r14,eax
   17231:	movsxd rax,edx
   17234:	mov    rsi,rax
   17237:	mov    QWORD PTR [rsp+0x10],rax
   1723c:	mov    rax,QWORD PTR [rcx+r14*8]
   17240:	mov    eax,DWORD PTR [rax+rsi*4]
   17243:	test   eax,eax
   17245:	je     17c44 <FastIntegerPelBlockMotionSearch+0x14a4>
   1724b:	nop    DWORD PTR [rax+rax*1+0x0]
   17250:	add    r12,0x4
   17254:	lea    rax,[rip+0x5ba65]        # 72cc0 <quant_coef>
   1725b:	add    r13,0x4
   1725f:	cmp    r12,rax
   17262:	je     16b9c <FastIntegerPelBlockMotionSearch+0x3fc>
   17268:	mov    ebp,DWORD PTR [r12]
   1726c:	mov    r15d,DWORD PTR [r13+0x0]
   17270:	jmp    171f5 <FastIntegerPelBlockMotionSearch+0xa55>
   17272:	nop    WORD PTR [rax+rax*1+0x0]
   17278:	mov    DWORD PTR [rsp+0x10],0x0
   17280:	xor    r10d,r10d
   17283:	jmp    16a71 <FastIntegerPelBlockMotionSearch+0x2d1>
   17288:	nop    DWORD PTR [rax+rax*1+0x0]
   17290:	cmp    DWORD PTR [rsp+0x30],0x1
   17295:	jne    16c99 <FastIntegerPelBlockMotionSearch+0x4f9>
   1729b:	mov    eax,DWORD PTR [rip+0x9ebcb]        # b5e6c <Bframe_ctr>
   172a1:	cdq    
   172a2:	idiv   DWORD PTR [rsp+0x8c]
   172a9:	cmp    edx,0x1
   172ac:	jg     16c6e <FastIntegerPelBlockMotionSearch+0x4ce>
   172b2:	mov    eax,DWORD PTR [rsp+0x118]
   172b9:	mov    DWORD PTR [rsp+0x30],eax
   172bd:	mov    rax,QWORD PTR [rip+0x712f4]        # 885b8 <input>
   172c4:	cmp    DWORD PTR [rax+0xb40],0x1
   172cb:	je     16d00 <FastIntegerPelBlockMotionSearch+0x560>
   172d1:	cmp    DWORD PTR [rsi+0x18],0x1
   172d5:	jne    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   172db:	cmp    WORD PTR [rsp+0x28],0x0
   172e1:	jne    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   172e7:	test   bl,bl
   172e9:	jne    16ccb <FastIntegerPelBlockMotionSearch+0x52b>
   172ef:	jmp    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   172f4:	nop    DWORD PTR [rax+0x0]
   172f8:	cmp    DWORD PTR [rsp+0x34],0x1
   172fd:	je     17d04 <FastIntegerPelBlockMotionSearch+0x1564>
   17303:	mov    eax,DWORD PTR [rip+0x73617]        # 8a920 <pred_SAD_uplayer>
   17309:	test   eax,eax
   1730b:	je     17818 <FastIntegerPelBlockMotionSearch+0x1078>
   17311:	imul   eax,eax
   17314:	pxor   xmm0,xmm0
   17318:	cvtsi2ss xmm0,eax
   1731c:	lea    rax,[rip+0x735bd]        # 8a8e0 <Bsize>
   17323:	movss  xmm1,DWORD PTR [rax+rbx*4]
   17328:	lea    rax,[rip+0x73611]        # 8a940 <AlphaSec>
   1732f:	divss  xmm1,xmm0
   17333:	movaps xmm7,xmm1
   17336:	subss  xmm7,DWORD PTR [rax+rbx*4]
   1733b:	lea    rax,[rip+0x7355e]        # 8a8a0 <AlphaThird>
   17342:	movaps xmm0,xmm1
   17345:	subss  xmm0,DWORD PTR [rax+rbx*4]
   1734a:	movss  DWORD PTR [rsp+0x74],xmm7
   17350:	movss  DWORD PTR [rsp+0x64],xmm0
   17356:	jmp    169c3 <FastIntegerPelBlockMotionSearch+0x223>
   1735b:	mov    rcx,QWORD PTR [rip+0xa0116]        # b7478 <mvbits>
   17362:	lea    edx,[rbp*4+0x0]
   17369:	lea    eax,[r15*4+0x0]
   17371:	sub    edx,DWORD PTR [rsp+0x5c]
   17375:	sub    eax,DWORD PTR [rsp+0x60]
   17379:	movsxd rdx,edx
   1737c:	mov    DWORD PTR [rsp+0x110],r11d
   17384:	cdqe   
   17386:	mov    DWORD PTR [rsp+0xa8],r10d
   1738e:	mov    eax,DWORD PTR [rcx+rax*4]
   17391:	add    eax,DWORD PTR [rcx+rdx*4]
   17394:	imul   eax,DWORD PTR [rsp+0x44]
   17399:	push   r15
   1739b:	push   rbp
   1739c:	mov    esi,DWORD PTR [rsp+0x128]
   173a3:	sar    eax,0x10
   173a6:	push   rsi
   173a7:	push   rax
   173a8:	mov    ecx,DWORD PTR [rsp+0x60]
   173ac:	mov    rdx,QWORD PTR [rsp+0x70]
   173b1:	mov    r9d,DWORD PTR [rsp+0x78]
   173b6:	mov    rsi,QWORD PTR [rsp+0x68]
   173bb:	mov    rdi,QWORD PTR [rsp+0x58]
   173c0:	mov    DWORD PTR [rsp+0xbc],r8d
   173c8:	call   16630 <PartCalMad>
   173cd:	mov    rcx,QWORD PTR [rip+0x734bc]        # 8a890 <McostState>
   173d4:	add    rsp,0x20
   173d8:	mov    r8d,DWORD PTR [rsp+0x9c]
   173e0:	cmp    eax,DWORD PTR [rsp+0x118]
   173e7:	mov    r10d,DWORD PTR [rsp+0xa8]
   173ef:	mov    rdx,QWORD PTR [rcx+r14*8]
   173f3:	mov    r11d,DWORD PTR [rsp+0x110]
   173fb:	mov    DWORD PTR [rdx+rbx*4],eax
   173fe:	jge    16af0 <FastIntegerPelBlockMotionSearch+0x350>
   17404:	mov    DWORD PTR [rsp+0x18],r15d
   17409:	mov    DWORD PTR [rsp+0x2c],ebp
   1740d:	mov    DWORD PTR [rsp+0x118],eax
   17414:	jmp    16af0 <FastIntegerPelBlockMotionSearch+0x350>
   17419:	cmp    DWORD PTR [rsp+0x34],0x1
   1741e:	jle    17a4b <FastIntegerPelBlockMotionSearch+0x12ab>
   17424:	mov    eax,DWORD PTR [rip+0x734f6]        # 8a920 <pred_SAD_uplayer>
   1742a:	jmp    16db2 <FastIntegerPelBlockMotionSearch+0x612>
   1742f:	mov    rcx,QWORD PTR [rip+0xa0042]        # b7478 <mvbits>
   17436:	lea    edx,[rbp*4+0x0]
   1743d:	lea    eax,[r15*4+0x0]
   17445:	sub    edx,DWORD PTR [rsp+0x5c]
   17449:	sub    eax,DWORD PTR [rsp+0x60]
   1744d:	movsxd rdx,edx
   17450:	mov    DWORD PTR [rsp+0x110],r11d
   17458:	cdqe   
   1745a:	mov    DWORD PTR [rsp+0x88],r10d
   17462:	mov    eax,DWORD PTR [rcx+rax*4]
   17465:	add    eax,DWORD PTR [rcx+rdx*4]
   17468:	imul   eax,DWORD PTR [rsp+0x44]
   1746d:	push   r15
   1746f:	push   rbp
   17470:	mov    edi,DWORD PTR [rsp+0x40]
   17474:	sar    eax,0x10
   17477:	push   rdi
   17478:	push   rax
   17479:	mov    ecx,DWORD PTR [rsp+0x60]
   1747d:	mov    rdx,QWORD PTR [rsp+0x70]
   17482:	mov    r9d,DWORD PTR [rsp+0x78]
   17487:	mov    rsi,QWORD PTR [rsp+0x68]
   1748c:	mov    rdi,QWORD PTR [rsp+0x58]
   17491:	mov    DWORD PTR [rsp+0x4c],r8d
   17496:	call   16630 <PartCalMad>
   1749b:	mov    rcx,QWORD PTR [rip+0x733ee]        # 8a890 <McostState>
   174a2:	add    rsp,0x20
   174a6:	mov    r8d,DWORD PTR [rsp+0x2c]
   174ab:	cmp    eax,DWORD PTR [rsp+0x30]
   174af:	mov    r10d,DWORD PTR [rsp+0x88]
   174b7:	mov    rdx,QWORD PTR [rcx+r14*8]
   174bb:	mov    r11d,DWORD PTR [rsp+0x110]
   174c3:	mov    DWORD PTR [rdx+rbx*4],eax
   174c6:	jge    16d80 <FastIntegerPelBlockMotionSearch+0x5e0>
   174cc:	mov    DWORD PTR [rsp+0x20],r15d
   174d1:	mov    DWORD PTR [rsp+0x10],ebp
   174d5:	mov    DWORD PTR [rsp+0x30],eax
   174d9:	jmp    16d80 <FastIntegerPelBlockMotionSearch+0x5e0>
   174de:	test   al,al
   174e0:	je     17bfe <FastIntegerPelBlockMotionSearch+0x145e>
   174e6:	mov    eax,DWORD PTR [rip+0x7341c]        # 8a908 <pred_MV_ref>
   174ec:	mov    edi,DWORD PTR [rsp+0x118]
   174f3:	test   eax,eax
   174f5:	lea    r12d,[rax+0x3]
   174f9:	mov    DWORD PTR [rsp+0x30],edi
   174fd:	cmovns r12d,eax
   17501:	sar    r12d,0x2
   17505:	mov    eax,r12d
   17508:	sub    eax,DWORD PTR [rsp+0x20]
   1750c:	mov    esi,eax
   1750e:	sar    esi,0x1f
   17511:	mov    edx,esi
   17513:	xor    edx,eax
   17515:	sub    edx,esi
   17517:	cmp    edx,r11d
   1751a:	jg     16d00 <FastIntegerPelBlockMotionSearch+0x560>
   17520:	mov    edx,DWORD PTR [rip+0x733e6]        # 8a90c <pred_MV_ref+0x4>
   17526:	test   edx,edx
   17528:	lea    ebp,[rdx+0x3]
   1752b:	cmovns ebp,edx
   1752e:	sar    ebp,0x2
   17531:	mov    edx,ebp
   17533:	sub    edx,DWORD PTR [rsp+0x88]
   1753a:	mov    edi,edx
   1753c:	sar    edi,0x1f
   1753f:	mov    esi,edi
   17541:	xor    esi,edx
   17543:	sub    esi,edi
   17545:	cmp    esi,r11d
   17548:	jg     16d00 <FastIntegerPelBlockMotionSearch+0x560>
   1754e:	add    edx,r11d
   17551:	add    eax,r11d
   17554:	movsxd rbx,edx
   17557:	movsxd r13,eax
   1755a:	mov    rax,QWORD PTR [rcx+rbx*8]
   1755e:	mov    r9d,DWORD PTR [rax+r13*4]
   17562:	test   r9d,r9d
   17565:	jne    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   1756b:	add    r12d,DWORD PTR [rsp+0x68]
   17570:	add    ebp,DWORD PTR [rsp+0x6c]
   17574:	mov    DWORD PTR [rsp+0x110],r11d
   1757c:	mov    rcx,QWORD PTR [rip+0x9fef5]        # b7478 <mvbits>
   17583:	lea    edx,[r12*4+0x0]
   1758b:	lea    eax,[rbp*4+0x0]
   17592:	sub    edx,DWORD PTR [rsp+0x5c]
   17596:	sub    eax,DWORD PTR [rsp+0x60]
   1759a:	movsxd rdx,edx
   1759d:	cdqe   
   1759f:	mov    eax,DWORD PTR [rcx+rax*4]
   175a2:	add    eax,DWORD PTR [rcx+rdx*4]
   175a5:	imul   eax,DWORD PTR [rsp+0x44]
   175aa:	push   rbp
   175ab:	push   r12
   175ad:	mov    esi,DWORD PTR [rsp+0x40]
   175b1:	sar    eax,0x10
   175b4:	push   rsi
   175b5:	push   rax
   175b6:	mov    ecx,DWORD PTR [rsp+0x60]
   175ba:	mov    rsi,QWORD PTR [rsp+0x68]
   175bf:	mov    r9d,DWORD PTR [rsp+0x78]
   175c4:	mov    rdx,QWORD PTR [rsp+0x70]
   175c9:	mov    rdi,QWORD PTR [rsp+0x58]
   175ce:	mov    DWORD PTR [rsp+0x30],r8d
   175d3:	call   16630 <PartCalMad>
   175d8:	mov    rcx,QWORD PTR [rip+0x732b1]        # 8a890 <McostState>
   175df:	mov    DWORD PTR [rsp+0x50],eax
   175e3:	mov    esi,eax
   175e5:	add    rsp,0x20
   175e9:	mov    r8d,DWORD PTR [rsp+0x10]
   175ee:	mov    rax,QWORD PTR [rcx+rbx*8]
   175f2:	cmp    DWORD PTR [rsp+0x118],esi
   175f9:	mov    r11d,DWORD PTR [rsp+0x110]
   17601:	mov    DWORD PTR [rax+r13*4],esi
   17605:	jle    185e9 <FastIntegerPelBlockMotionSearch+0x1e49>
   1760b:	mov    DWORD PTR [rsp+0x18],ebp
   1760f:	mov    DWORD PTR [rsp+0x2c],r12d
   17614:	jmp    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   17619:	nop    DWORD PTR [rax+0x0]
   17620:	mov    eax,DWORD PTR [rsp+0x118]
   17627:	mov    DWORD PTR [rsp+0x30],eax
   1762b:	jmp    16fa1 <FastIntegerPelBlockMotionSearch+0x801>
   17630:	mov    edi,DWORD PTR [rip+0x732ce]        # 8a904 <pred_MV_time+0x4>
   17636:	test   edi,edi
   17638:	lea    esi,[rdi+0x3]
   1763b:	cmovns esi,edi
   1763e:	sar    esi,0x2
   17641:	mov    edi,esi
   17643:	sub    edi,DWORD PTR [rsp+0x88]
   1764a:	mov    r10d,edi
   1764d:	sar    r10d,0x1f
   17651:	mov    r9d,r10d
   17654:	xor    r9d,edi
   17657:	sub    r9d,r10d
   1765a:	cmp    r9d,r11d
   1765d:	jg     16c99 <FastIntegerPelBlockMotionSearch+0x4f9>
   17663:	add    edi,r11d
   17666:	add    edx,r11d
   17669:	movsxd rbp,edi
   1766c:	movsxd r14,edx
   1766f:	mov    rdx,QWORD PTR [rcx+rbp*8]
   17673:	mov    r10d,DWORD PTR [rdx+r14*4]
   17677:	test   r10d,r10d
   1767a:	jne    16c99 <FastIntegerPelBlockMotionSearch+0x4f9>
   17680:	mov    edi,DWORD PTR [rsp+0x68]
   17684:	mov    rcx,QWORD PTR [rip+0x9fded]        # b7478 <mvbits>
   1768b:	mov    DWORD PTR [rsp+0x110],r11d
   17693:	lea    r13d,[rax+rdi*1]
   17697:	mov    eax,DWORD PTR [rsp+0x6c]
   1769b:	lea    edx,[r13*4+0x0]
   176a3:	sub    edx,DWORD PTR [rsp+0x5c]
   176a7:	lea    r12d,[rsi+rax*1]
   176ab:	movsxd rdx,edx
   176ae:	lea    eax,[r12*4+0x0]
   176b6:	sub    eax,DWORD PTR [rsp+0x60]
   176ba:	cdqe   
   176bc:	mov    eax,DWORD PTR [rcx+rax*4]
   176bf:	add    eax,DWORD PTR [rcx+rdx*4]
   176c2:	imul   eax,DWORD PTR [rsp+0x44]
   176c7:	push   r12
   176c9:	push   r13
   176cb:	mov    esi,DWORD PTR [rsp+0x128]
   176d2:	sar    eax,0x10
   176d5:	push   rsi
   176d6:	push   rax
   176d7:	mov    ecx,DWORD PTR [rsp+0x60]
   176db:	mov    rdx,QWORD PTR [rsp+0x70]
   176e0:	mov    r9d,DWORD PTR [rsp+0x78]
   176e5:	mov    rsi,QWORD PTR [rsp+0x68]
   176ea:	mov    rdi,QWORD PTR [rsp+0x58]
   176ef:	mov    DWORD PTR [rsp+0x30],r8d
   176f4:	call   16630 <PartCalMad>
   176f9:	mov    rcx,QWORD PTR [rip+0x73190]        # 8a890 <McostState>
   17700:	add    rsp,0x20
   17704:	mov    r8d,DWORD PTR [rsp+0x10]
   17709:	cmp    DWORD PTR [rsp+0x118],eax
   17710:	mov    r11d,DWORD PTR [rsp+0x110]
   17718:	mov    rdx,QWORD PTR [rcx+rbp*8]
   1771c:	mov    DWORD PTR [rdx+r14*4],eax
   17720:	jle    16c99 <FastIntegerPelBlockMotionSearch+0x4f9>
   17726:	mov    DWORD PTR [rsp+0x18],r12d
   1772b:	mov    DWORD PTR [rsp+0x2c],r13d
   17730:	mov    DWORD PTR [rsp+0x118],eax
   17737:	jmp    16c99 <FastIntegerPelBlockMotionSearch+0x4f9>
   1773c:	nop    DWORD PTR [rax+0x0]
   17740:	add    edi,r11d
   17743:	add    edx,r11d
   17746:	movsxd rbx,edi
   17749:	movsxd rbp,edx
   1774c:	mov    rdx,QWORD PTR [rcx+rbx*8]
   17750:	mov    r12d,DWORD PTR [rdx+rbp*4]
   17754:	test   r12d,r12d
   17757:	jne    16c01 <FastIntegerPelBlockMotionSearch+0x461>
   1775d:	mov    edi,DWORD PTR [rsp+0x68]
   17761:	mov    rcx,QWORD PTR [rip+0x9fd10]        # b7478 <mvbits>
   17768:	mov    DWORD PTR [rsp+0x110],r11d
   17770:	lea    r13d,[rax+rdi*1]
   17774:	mov    eax,DWORD PTR [rsp+0x6c]
   17778:	lea    edx,[r13*4+0x0]
   17780:	sub    edx,DWORD PTR [rsp+0x5c]
   17784:	lea    r12d,[rsi+rax*1]
   17788:	movsxd rdx,edx
   1778b:	lea    eax,[r12*4+0x0]
   17793:	sub    eax,DWORD PTR [rsp+0x60]
   17797:	cdqe   
   17799:	mov    eax,DWORD PTR [rcx+rax*4]
   1779c:	add    eax,DWORD PTR [rcx+rdx*4]
   1779f:	imul   eax,DWORD PTR [rsp+0x44]
   177a4:	push   r12
   177a6:	push   r13
   177a8:	mov    esi,DWORD PTR [rsp+0x128]
   177af:	sar    eax,0x10
   177b2:	push   rsi
   177b3:	push   rax
   177b4:	mov    ecx,DWORD PTR [rsp+0x60]
   177b8:	mov    rdx,QWORD PTR [rsp+0x70]
   177bd:	mov    r9d,DWORD PTR [rsp+0x78]
   177c2:	mov    rsi,QWORD PTR [rsp+0x68]
   177c7:	mov    rdi,QWORD PTR [rsp+0x58]
   177cc:	mov    DWORD PTR [rsp+0x30],r8d
   177d1:	call   16630 <PartCalMad>
   177d6:	mov    rcx,QWORD PTR [rip+0x730b3]        # 8a890 <McostState>
   177dd:	add    rsp,0x20
   177e1:	mov    r8d,DWORD PTR [rsp+0x10]
   177e6:	cmp    DWORD PTR [rsp+0x118],eax
   177ed:	mov    r11d,DWORD PTR [rsp+0x110]
   177f5:	mov    rdx,QWORD PTR [rcx+rbx*8]
   177f9:	mov    DWORD PTR [rdx+rbp*4],eax
   177fc:	jle    16c01 <FastIntegerPelBlockMotionSearch+0x461>
   17802:	mov    DWORD PTR [rsp+0x18],r12d
   17807:	mov    DWORD PTR [rsp+0x2c],r13d
   1780c:	mov    DWORD PTR [rsp+0x118],eax
   17813:	jmp    16c01 <FastIntegerPelBlockMotionSearch+0x461>
   17818:	pxor   xmm7,xmm7
   1781c:	movss  DWORD PTR [rsp+0x64],xmm7
   17822:	movss  DWORD PTR [rsp+0x74],xmm7
   17828:	jmp    169c3 <FastIntegerPelBlockMotionSearch+0x223>
   1782d:	mov    esi,DWORD PTR [rip+0x730d9]        # 8a90c <pred_MV_ref+0x4>
   17833:	test   esi,esi
   17835:	lea    r10d,[rsi+0x3]
   17839:	cmovns r10d,esi
   1783d:	sar    r10d,0x2
   17841:	mov    esi,r10d
   17844:	sub    esi,DWORD PTR [rsp+0x88]
   1784b:	mov    r9d,esi
   1784e:	sar    r9d,0x1f
   17852:	mov    edi,r9d
   17855:	xor    edi,esi
   17857:	sub    edi,r9d
   1785a:	cmp    edi,r11d
   1785d:	jg     16d00 <FastIntegerPelBlockMotionSearch+0x560>
   17863:	add    esi,r11d
   17866:	add    edx,r11d
   17869:	movsxd rbx,esi
   1786c:	movsxd r13,edx
   1786f:	mov    rdx,QWORD PTR [rcx+rbx*8]
   17873:	mov    edi,DWORD PTR [rdx+r13*4]
   17877:	test   edi,edi
   17879:	jne    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   1787f:	mov    edi,DWORD PTR [rsp+0x68]
   17883:	mov    rcx,QWORD PTR [rip+0x9fbee]        # b7478 <mvbits>
   1788a:	mov    DWORD PTR [rsp+0x110],r11d
   17892:	lea    r12d,[rax+rdi*1]
   17896:	mov    eax,DWORD PTR [rsp+0x6c]
   1789a:	lea    edx,[r12*4+0x0]
   178a2:	sub    edx,DWORD PTR [rsp+0x5c]
   178a6:	lea    ebp,[r10+rax*1]
   178aa:	movsxd rdx,edx
   178ad:	lea    eax,[rbp*4+0x0]
   178b4:	sub    eax,DWORD PTR [rsp+0x60]
   178b8:	cdqe   
   178ba:	mov    eax,DWORD PTR [rcx+rax*4]
   178bd:	add    eax,DWORD PTR [rcx+rdx*4]
   178c0:	imul   eax,DWORD PTR [rsp+0x44]
   178c5:	push   rbp
   178c6:	push   r12
   178c8:	mov    esi,DWORD PTR [rsp+0x128]
   178cf:	sar    eax,0x10
   178d2:	push   rsi
   178d3:	push   rax
   178d4:	mov    ecx,DWORD PTR [rsp+0x60]
   178d8:	mov    rdx,QWORD PTR [rsp+0x70]
   178dd:	mov    r9d,DWORD PTR [rsp+0x78]
   178e2:	mov    rsi,QWORD PTR [rsp+0x68]
   178e7:	mov    rdi,QWORD PTR [rsp+0x58]
   178ec:	mov    DWORD PTR [rsp+0x30],r8d
   178f1:	call   16630 <PartCalMad>
   178f6:	mov    rcx,QWORD PTR [rip+0x72f93]        # 8a890 <McostState>
   178fd:	add    rsp,0x20
   17901:	mov    r8d,DWORD PTR [rsp+0x10]
   17906:	cmp    eax,DWORD PTR [rsp+0x118]
   1790d:	cmovge ebp,DWORD PTR [rsp+0x18]
   17912:	mov    rdx,QWORD PTR [rcx+rbx*8]
   17916:	cmovge r12d,DWORD PTR [rsp+0x2c]
   1791c:	mov    DWORD PTR [rsp+0x18],ebp
   17920:	mov    r11d,DWORD PTR [rsp+0x110]
   17928:	mov    DWORD PTR [rdx+r13*4],eax
   1792c:	cmovge eax,DWORD PTR [rsp+0x118]
   17934:	mov    DWORD PTR [rsp+0x2c],r12d
   17939:	mov    DWORD PTR [rsp+0x30],eax
   1793d:	jmp    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   17942:	mov    ebx,r11d
   17945:	sub    ebx,DWORD PTR [rsp+0x88]
   1794c:	mov    ebp,r11d
   1794f:	sub    ebp,DWORD PTR [rsp+0x20]
   17953:	movsxd r12,ebx
   17956:	movsxd rbp,ebp
   17959:	mov    ebx,DWORD PTR [rsp+0x18]
   1795d:	mov    r10d,DWORD PTR [rsp+0x2c]
   17962:	mov    rax,QWORD PTR [rcx+r12*8]
   17966:	mov    eax,DWORD PTR [rax+rbp*4]
   17969:	test   eax,eax
   1796b:	jne    171d6 <FastIntegerPelBlockMotionSearch+0xa36>
   17971:	mov    eax,DWORD PTR [rsp+0x98]
   17978:	mov    r15d,DWORD PTR [rsp+0x6c]
   1797d:	mov    DWORD PTR [rsp+0x110],r11d
   17985:	mov    edx,DWORD PTR [rsp+0x90]
   1798c:	mov    rcx,QWORD PTR [rip+0x9fae5]        # b7478 <mvbits>
   17993:	mov    DWORD PTR [rsp+0x18],r10d
   17998:	neg    eax
   1799a:	neg    edx
   1799c:	cdqe   
   1799e:	movsxd rdx,edx
   179a1:	mov    edx,DWORD PTR [rcx+rdx*4]
   179a4:	add    edx,DWORD PTR [rcx+rax*4]
   179a7:	mov    eax,DWORD PTR [rsp+0x44]
   179ab:	push   r15
   179ad:	mov    r14d,DWORD PTR [rsp+0x70]
   179b2:	imul   eax,edx
   179b5:	push   r14
   179b7:	mov    esi,DWORD PTR [rsp+0x128]
   179be:	sar    eax,0x10
   179c1:	push   rsi
   179c2:	push   rax
   179c3:	mov    ecx,DWORD PTR [rsp+0x60]
   179c7:	mov    rdx,QWORD PTR [rsp+0x70]
   179cc:	mov    r9d,DWORD PTR [rsp+0x78]
   179d1:	mov    rsi,QWORD PTR [rsp+0x68]
   179d6:	mov    rdi,QWORD PTR [rsp+0x58]
   179db:	mov    DWORD PTR [rsp+0x30],r8d
   179e0:	call   16630 <PartCalMad>
   179e5:	mov    rcx,QWORD PTR [rip+0x72ea4]        # 8a890 <McostState>
   179ec:	add    rsp,0x20
   179f0:	mov    r8d,DWORD PTR [rsp+0x10]
   179f5:	cmp    DWORD PTR [rsp+0x118],eax
   179fc:	mov    r10d,DWORD PTR [rsp+0x18]
   17a01:	mov    rdx,QWORD PTR [rcx+r12*8]
   17a05:	mov    r11d,DWORD PTR [rsp+0x110]
   17a0d:	mov    DWORD PTR [rdx+rbp*4],eax
   17a10:	jle    171d6 <FastIntegerPelBlockMotionSearch+0xa36>
   17a16:	mov    DWORD PTR [rsp+0x118],eax
   17a1d:	mov    ebx,r15d
   17a20:	mov    r10d,r14d
   17a23:	jmp    171d6 <FastIntegerPelBlockMotionSearch+0xa36>
   17a28:	lea    eax,[rdx-0x1]
   17a2b:	sub    eax,r11d
   17a2e:	sub    eax,DWORD PTR [rsp+0x40]
   17a32:	cmp    eax,esi
   17a34:	jle    16950 <FastIntegerPelBlockMotionSearch+0x1b0>
   17a3a:	lea    rax,[rip+0x4636f]        # 5ddb0 <FastLineX>
   17a41:	mov    QWORD PTR [rsp+0x50],rax
   17a46:	jmp    1695c <FastIntegerPelBlockMotionSearch+0x1bc>
   17a4b:	mov    eax,DWORD PTR [rip+0x72e27]        # 8a878 <pred_SAD_space>
   17a51:	pxor   xmm0,xmm0
   17a55:	mov    edx,DWORD PTR [rsp+0x30]
   17a59:	pxor   xmm1,xmm1
   17a5d:	movss  xmm2,DWORD PTR [rsp+0x64]
   17a63:	cvtsi2ss xmm0,eax
   17a67:	sub    edx,eax
   17a69:	cvtsi2ss xmm1,edx
   17a6d:	mulss  xmm2,xmm0
   17a71:	comiss xmm2,xmm1
   17a74:	ja     16f91 <FastIntegerPelBlockMotionSearch+0x7f1>
   17a7a:	mulss  xmm0,DWORD PTR [rsp+0x74]
   17a80:	comiss xmm0,xmm1
   17a83:	ja     16df1 <FastIntegerPelBlockMotionSearch+0x651>
   17a89:	mov    eax,r11d
   17a8c:	shr    eax,0x1f
   17a8f:	add    eax,r11d
   17a92:	sar    eax,1
   17a94:	mov    DWORD PTR [rsp+0x88],eax
   17a9b:	cmp    r11d,0x1
   17a9f:	jle    185ba <FastIntegerPelBlockMotionSearch+0x1e1a>
   17aa5:	mov    esi,DWORD PTR [rsp+0x20]
   17aa9:	mov    edi,DWORD PTR [rsp+0x10]
   17aad:	mov    r10d,0x1
   17ab3:	mov    r12d,r10d
   17ab6:	mov    ebp,esi
   17ab8:	sub    ebp,DWORD PTR [rsp+0x24]
   17abc:	lea    r15d,[rdi+0x1]
   17ac0:	mov    DWORD PTR [rsp+0x2c],edi
   17ac4:	lea    eax,[r11+rbp*1]
   17ac8:	lea    r14d,[rdi-0x1]
   17acc:	mov    DWORD PTR [rsp+0x8c],ebp
   17ad3:	cdqe   
   17ad5:	mov    DWORD PTR [rsp+0x78],ebp
   17ad9:	shl    rax,0x3
   17add:	mov    QWORD PTR [rsp+0x80],rax
   17ae5:	lea    eax,[rsi*4+0x0]
   17aec:	sub    eax,DWORD PTR [rsp+0x60]
   17af0:	cdqe   
   17af2:	mov    esi,DWORD PTR [rsp+0xc]
   17af6:	shl    rax,0x2
   17afa:	mov    QWORD PTR [rsp+0x90],rax
   17b02:	lea    eax,[rdi+rdi*1]
   17b05:	sub    r15d,esi
   17b08:	sub    r14d,esi
   17b0b:	sub    eax,esi
   17b0d:	mov    r13d,eax
   17b10:	lea    eax,[rsi*4+0x0]
   17b17:	sub    eax,DWORD PTR [rsp+0x5c]
   17b1b:	mov    DWORD PTR [rsp+0x9c],eax
   17b22:	mov    eax,ebp
   17b24:	sar    eax,0x1f
   17b27:	mov    edx,eax
   17b29:	xor    edx,ebp
   17b2b:	mov    ebp,r11d
   17b2e:	sub    edx,eax
   17b30:	mov    DWORD PTR [rsp+0x98],edx
   17b37:	jmp    17bba <FastIntegerPelBlockMotionSearch+0x141a>
   17b3c:	nop    DWORD PTR [rax+0x0]
   17b40:	mov    eax,DWORD PTR [rsp+0x78]
   17b44:	mov    edx,eax
   17b46:	sar    edx,0x1f
   17b49:	xor    eax,edx
   17b4b:	sub    eax,edx
   17b4d:	cmp    eax,ebp
   17b4f:	jg     17ba0 <FastIntegerPelBlockMotionSearch+0x1400>
   17b51:	mov    rax,QWORD PTR [rsp+0x80]
   17b59:	lea    r11d,[rbp+r15*1+0x0]
   17b5e:	movsxd r11,r11d
   17b61:	mov    rax,QWORD PTR [rcx+rax*1]
   17b65:	mov    edx,DWORD PTR [rax+r11*4]
   17b69:	test   edx,edx
   17b6b:	je     18180 <FastIntegerPelBlockMotionSearch+0x19e0>
   17b71:	cmp    ebp,ebx
   17b73:	jl     17ba0 <FastIntegerPelBlockMotionSearch+0x1400>
   17b75:	mov    eax,DWORD PTR [rsp+0x8c]
   17b7c:	lea    ebx,[rbp+r14*1+0x0]
   17b81:	movsxd rbx,ebx
   17b84:	lea    r10d,[rbp+rax*1+0x0]
   17b89:	movsxd r10,r10d
   17b8c:	mov    rax,QWORD PTR [rcx+r10*8]
   17b90:	mov    eax,DWORD PTR [rax+rbx*4]
   17b93:	test   eax,eax
   17b95:	je     180db <FastIntegerPelBlockMotionSearch+0x193b>
   17b9b:	nop    DWORD PTR [rax+rax*1+0x0]
   17ba0:	add    r12d,0x1
   17ba4:	add    r15d,0x2
   17ba8:	sub    r14d,0x2
   17bac:	cmp    r12d,DWORD PTR [rsp+0x88]
   17bb4:	jg     17d70 <FastIntegerPelBlockMotionSearch+0x15d0>
   17bba:	mov    eax,r13d
   17bbd:	mov    edx,r15d
   17bc0:	mov    r10d,r13d
   17bc3:	sub    eax,r15d
   17bc6:	sar    edx,0x1f
   17bc9:	sub    r10d,r14d
   17bcc:	mov    DWORD PTR [rsp+0x18],eax
   17bd0:	mov    eax,r14d
   17bd3:	sar    eax,0x1f
   17bd6:	mov    ebx,eax
   17bd8:	xor    ebx,r14d
   17bdb:	sub    ebx,eax
   17bdd:	mov    eax,edx
   17bdf:	xor    eax,r15d
   17be2:	sub    eax,edx
   17be4:	cmp    eax,ebp
   17be6:	jle    17b40 <FastIntegerPelBlockMotionSearch+0x13a0>
   17bec:	cmp    ebp,ebx
   17bee:	jl     17ba0 <FastIntegerPelBlockMotionSearch+0x1400>
   17bf0:	cmp    DWORD PTR [rsp+0x98],ebp
   17bf7:	jg     17ba0 <FastIntegerPelBlockMotionSearch+0x1400>
   17bf9:	jmp    17b75 <FastIntegerPelBlockMotionSearch+0x13d5>
   17bfe:	mov    rax,QWORD PTR [rip+0x709ab]        # 885b0 <img>
   17c05:	cmp    DWORD PTR [rax+0x18],0x1
   17c09:	mov    eax,DWORD PTR [rsp+0x118]
   17c10:	mov    DWORD PTR [rsp+0x30],eax
   17c14:	jne    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   17c1a:	test   bl,bl
   17c1c:	je     16d00 <FastIntegerPelBlockMotionSearch+0x560>
   17c22:	test   WORD PTR [rsp+0x28],0xfffd
   17c29:	jne    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   17c2f:	jmp    174e6 <FastIntegerPelBlockMotionSearch+0xd46>
   17c34:	nop    DWORD PTR [rax+0x0]
   17c38:	mov    rsi,QWORD PTR [rip+0x70971]        # 885b0 <img>
   17c3f:	jmp    172d1 <FastIntegerPelBlockMotionSearch+0xb31>
   17c44:	mov    rcx,QWORD PTR [rip+0x9f82d]        # b7478 <mvbits>
   17c4b:	lea    edx,[rbp*4+0x0]
   17c52:	lea    eax,[r15*4+0x0]
   17c5a:	sub    edx,DWORD PTR [rsp+0x5c]
   17c5e:	sub    eax,DWORD PTR [rsp+0x60]
   17c62:	movsxd rdx,edx
   17c65:	mov    DWORD PTR [rsp+0x110],r11d
   17c6d:	cdqe   
   17c6f:	mov    DWORD PTR [rsp+0x80],r10d
   17c77:	mov    eax,DWORD PTR [rcx+rax*4]
   17c7a:	add    eax,DWORD PTR [rcx+rdx*4]
   17c7d:	imul   eax,DWORD PTR [rsp+0x44]
   17c82:	push   r15
   17c84:	push   rbp
   17c85:	mov    edi,DWORD PTR [rsp+0x128]
   17c8c:	sar    eax,0x10
   17c8f:	push   rdi
   17c90:	push   rax
   17c91:	mov    ecx,DWORD PTR [rsp+0x60]
   17c95:	mov    rdx,QWORD PTR [rsp+0x70]
   17c9a:	mov    rsi,QWORD PTR [rsp+0x68]
   17c9f:	mov    r9d,DWORD PTR [rsp+0x78]
   17ca4:	mov    rdi,QWORD PTR [rsp+0x58]
   17ca9:	mov    DWORD PTR [rsp+0x98],r8d
   17cb1:	call   16630 <PartCalMad>
   17cb6:	mov    rcx,QWORD PTR [rip+0x72bd3]        # 8a890 <McostState>
   17cbd:	mov    rsi,QWORD PTR [rsp+0x30]
   17cc2:	add    rsp,0x20
   17cc6:	cmp    eax,DWORD PTR [rsp+0x118]
   17ccd:	mov    r8d,DWORD PTR [rsp+0x78]
   17cd2:	mov    rdx,QWORD PTR [rcx+r14*8]
   17cd6:	mov    r10d,DWORD PTR [rsp+0x80]
   17cde:	mov    r11d,DWORD PTR [rsp+0x110]
   17ce6:	mov    DWORD PTR [rdx+rsi*4],eax
   17ce9:	jge    17250 <FastIntegerPelBlockMotionSearch+0xab0>
   17cef:	mov    DWORD PTR [rsp+0x18],r15d
   17cf4:	mov    DWORD PTR [rsp+0x2c],ebp
   17cf8:	mov    DWORD PTR [rsp+0x118],eax
   17cff:	jmp    17250 <FastIntegerPelBlockMotionSearch+0xab0>
   17d04:	mov    eax,DWORD PTR [rip+0x72b6e]        # 8a878 <pred_SAD_space>
   17d0a:	test   eax,eax
   17d0c:	je     182f0 <FastIntegerPelBlockMotionSearch+0x1b50>
   17d12:	imul   eax,eax
   17d15:	pxor   xmm0,xmm0
   17d19:	movss  xmm1,DWORD PTR [rip+0x72bc3]        # 8a8e4 <Bsize+0x4>
   17d21:	cvtsi2ss xmm0,eax
   17d25:	divss  xmm1,xmm0
   17d29:	movaps xmm0,xmm1
   17d2c:	movaps xmm3,xmm1
   17d2f:	subss  xmm0,DWORD PTR [rip+0x72b6d]        # 8a8a4 <AlphaThird+0x4>
   17d37:	subss  xmm3,DWORD PTR [rip+0x72c05]        # 8a944 <AlphaSec+0x4>
   17d3f:	movss  DWORD PTR [rsp+0x64],xmm0
   17d45:	movss  DWORD PTR [rsp+0x74],xmm3
   17d4b:	jmp    169c3 <FastIntegerPelBlockMotionSearch+0x223>
   17d50:	mov    eax,DWORD PTR [rsp+0x18]
   17d54:	mov    DWORD PTR [rsp+0x20],eax
   17d58:	mov    eax,DWORD PTR [rsp+0x2c]
   17d5c:	mov    DWORD PTR [rsp+0x10],eax
   17d60:	mov    eax,DWORD PTR [rsp+0x118]
   17d67:	mov    DWORD PTR [rsp+0x30],eax
   17d6b:	jmp    16df1 <FastIntegerPelBlockMotionSearch+0x651>
   17d70:	test   ebp,ebp
   17d72:	lea    r10d,[rbp+0x3]
   17d76:	mov    r11d,ebp
   17d79:	cmovns r10d,ebp
   17d7d:	sar    r10d,0x2
   17d81:	mov    DWORD PTR [rsp+0x80],r10d
   17d89:	cmp    ebp,0x3
   17d8c:	jle    17e93 <FastIntegerPelBlockMotionSearch+0x16f3>
   17d92:	mov    edi,DWORD PTR [rsp+0x10]
   17d96:	mov    edx,DWORD PTR [rsp+0x20]
   17d9a:	mov    r14d,0x1
   17da0:	mov    r12d,r10d
   17da3:	mov    esi,DWORD PTR [rsp+0x24]
   17da7:	mov    r15d,edi
   17daa:	sub    r15d,DWORD PTR [rsp+0xc]
   17daf:	lea    eax,[r15+rbp*1]
   17db3:	mov    r13d,esi
   17db6:	cdqe   
   17db8:	not    r13d
   17dbb:	shl    rax,0x2
   17dbf:	add    r13d,edx
   17dc2:	mov    QWORD PTR [rsp+0x18],rax
   17dc7:	lea    eax,[rdi*4+0x0]
   17dce:	sub    eax,DWORD PTR [rsp+0x5c]
   17dd2:	cdqe   
   17dd4:	shl    rax,0x2
   17dd8:	mov    QWORD PTR [rsp+0x78],rax
   17ddd:	mov    eax,r15d
   17de0:	sar    eax,0x1f
   17de3:	xor    r15d,eax
   17de6:	sub    r15d,eax
   17de9:	mov    eax,edx
   17deb:	sub    eax,esi
   17ded:	lea    ebx,[rax+0x1]
   17df0:	lea    eax,[rsi*4+0x0]
   17df7:	sub    eax,DWORD PTR [rsp+0x60]
   17dfb:	mov    DWORD PTR [rsp+0x8c],eax
   17e02:	lea    eax,[rdx+rdx*1]
   17e05:	sub    eax,esi
   17e07:	mov    DWORD PTR [rsp+0x88],eax
   17e0e:	xchg   ax,ax
   17e10:	cmp    ebp,r15d
   17e13:	jl     17e80 <FastIntegerPelBlockMotionSearch+0x16e0>
   17e15:	mov    eax,DWORD PTR [rsp+0x24]
   17e19:	mov    edx,ebx
   17e1b:	sar    edx,0x1f
   17e1e:	lea    r11d,[rbx+rax*1]
   17e22:	mov    eax,edx
   17e24:	xor    eax,ebx
   17e26:	sub    eax,edx
   17e28:	cmp    eax,ebp
   17e2a:	jg     17e48 <FastIntegerPelBlockMotionSearch+0x16a8>
   17e2c:	lea    r10d,[rbp+rbx*1+0x0]
   17e31:	mov    rdi,QWORD PTR [rsp+0x18]
   17e36:	movsxd r10,r10d
   17e39:	mov    rax,QWORD PTR [rcx+r10*8]
   17e3d:	mov    eax,DWORD PTR [rax+rdi*1]
   17e40:	test   eax,eax
   17e42:	je     18238 <FastIntegerPelBlockMotionSearch+0x1a98>
   17e48:	mov    edx,r13d
   17e4b:	mov    r11d,DWORD PTR [rsp+0x88]
   17e53:	sar    edx,0x1f
   17e56:	mov    eax,edx
   17e58:	sub    r11d,ebx
   17e5b:	xor    eax,r13d
   17e5e:	sub    eax,edx
   17e60:	cmp    eax,ebp
   17e62:	jg     17e80 <FastIntegerPelBlockMotionSearch+0x16e0>
   17e64:	lea    r10d,[rbp+r13*1+0x0]
   17e69:	mov    rdi,QWORD PTR [rsp+0x18]
   17e6e:	movsxd r10,r10d
   17e71:	mov    rax,QWORD PTR [rcx+r10*8]
   17e75:	mov    eax,DWORD PTR [rax+rdi*1]
   17e78:	test   eax,eax
   17e7a:	je     18022 <FastIntegerPelBlockMotionSearch+0x1882>
   17e80:	add    r14d,0x1
   17e84:	sub    r13d,0x2
   17e88:	add    ebx,0x2
   17e8b:	cmp    r12d,r14d
   17e8e:	jge    17e10 <FastIntegerPelBlockMotionSearch+0x1670>
   17e90:	mov    r11d,ebp
   17e93:	cmp    WORD PTR [rsp+0x28],0x0
   17e99:	mov    eax,DWORD PTR [rip+0x729d1]        # 8a870 <pred_SAD_ref>
   17e9f:	jle    1853f <FastIntegerPelBlockMotionSearch+0x1d9f>
   17ea5:	pxor   xmm0,xmm0
   17ea9:	mov    edx,DWORD PTR [rsp+0x30]
   17ead:	movss  xmm2,DWORD PTR [rsp+0x64]
   17eb3:	pxor   xmm1,xmm1
   17eb7:	cvtsi2ss xmm0,eax
   17ebb:	sub    edx,eax
   17ebd:	cvtsi2ss xmm1,edx
   17ec1:	mulss  xmm2,xmm0
   17ec5:	comiss xmm2,xmm1
   17ec8:	ja     185a0 <FastIntegerPelBlockMotionSearch+0x1e00>
   17ece:	mulss  xmm0,DWORD PTR [rsp+0x74]
   17ed4:	comiss xmm0,xmm1
   17ed7:	ja     185ad <FastIntegerPelBlockMotionSearch+0x1e0d>
   17edd:	mov    eax,DWORD PTR [rsp+0x20]
   17ee1:	mov    r10d,DWORD PTR [rsp+0x2c]
   17ee6:	mov    r14d,r11d
   17ee9:	mov    ebx,0x4
   17eee:	mov    r11d,DWORD PTR [rsp+0xc]
   17ef3:	mov    DWORD PTR [rsp+0x18],eax
   17ef7:	mov    DWORD PTR [rsp+0x10],r10d
   17efc:	jmp    17f0e <FastIntegerPelBlockMotionSearch+0x176e>
   17efe:	xchg   ax,ax
   17f00:	add    rbx,0x4
   17f04:	cmp    rbx,0x64
   17f08:	je     18305 <FastIntegerPelBlockMotionSearch+0x1b65>
   17f0e:	mov    rax,QWORD PTR [rip+0x9f553]        # b7468 <spiral_search_x>
   17f15:	mov    r13d,DWORD PTR [rax+rbx*1]
   17f19:	add    r13d,r10d
   17f1c:	mov    edx,r13d
   17f1f:	sub    edx,r11d
   17f22:	mov    esi,edx
   17f24:	sar    esi,0x1f
   17f27:	mov    eax,esi
   17f29:	xor    eax,edx
   17f2b:	sub    eax,esi
   17f2d:	cmp    eax,r14d
   17f30:	jg     17f00 <FastIntegerPelBlockMotionSearch+0x1760>
   17f32:	mov    rax,QWORD PTR [rip+0x9f557]        # b7490 <spiral_search_y>
   17f39:	mov    r15d,DWORD PTR [rsp+0x20]
   17f3e:	add    r15d,DWORD PTR [rax+rbx*1]
   17f42:	mov    eax,r15d
   17f45:	sub    eax,DWORD PTR [rsp+0x24]
   17f49:	mov    edi,eax
   17f4b:	sar    edi,0x1f
   17f4e:	mov    esi,edi
   17f50:	xor    esi,eax
   17f52:	sub    esi,edi
   17f54:	cmp    esi,r14d
   17f57:	jg     17f00 <FastIntegerPelBlockMotionSearch+0x1760>
   17f59:	add    eax,r14d
   17f5c:	add    edx,r14d
   17f5f:	movsxd r12,eax
   17f62:	movsxd rbp,edx
   17f65:	mov    rax,QWORD PTR [rcx+r12*8]
   17f69:	mov    eax,DWORD PTR [rax+rbp*4]
   17f6c:	test   eax,eax
   17f6e:	jne    17f00 <FastIntegerPelBlockMotionSearch+0x1760>
   17f70:	mov    rcx,QWORD PTR [rip+0x9f501]        # b7478 <mvbits>
   17f77:	lea    edx,[r13*4+0x0]
   17f7f:	lea    eax,[r15*4+0x0]
   17f87:	sub    edx,DWORD PTR [rsp+0x5c]
   17f8b:	sub    eax,DWORD PTR [rsp+0x60]
   17f8f:	movsxd rdx,edx
   17f92:	mov    DWORD PTR [rsp+0x78],r10d
   17f97:	cdqe   
   17f99:	mov    DWORD PTR [rsp+0x8c],r11d
   17fa1:	mov    eax,DWORD PTR [rcx+rax*4]
   17fa4:	add    eax,DWORD PTR [rcx+rdx*4]
   17fa7:	imul   eax,DWORD PTR [rsp+0x44]
   17fac:	push   r15
   17fae:	push   r13
   17fb0:	mov    edi,DWORD PTR [rsp+0x40]
   17fb4:	sar    eax,0x10
   17fb7:	push   rdi
   17fb8:	push   rax
   17fb9:	mov    ecx,DWORD PTR [rsp+0x60]
   17fbd:	mov    rdx,QWORD PTR [rsp+0x70]
   17fc2:	mov    r9d,DWORD PTR [rsp+0x78]
   17fc7:	mov    rsi,QWORD PTR [rsp+0x68]
   17fcc:	mov    rdi,QWORD PTR [rsp+0x58]
   17fd1:	mov    DWORD PTR [rsp+0xa8],r8d
   17fd9:	call   16630 <PartCalMad>
   17fde:	mov    rcx,QWORD PTR [rip+0x728ab]        # 8a890 <McostState>
   17fe5:	add    rsp,0x20
   17fe9:	mov    r8d,DWORD PTR [rsp+0x88]
   17ff1:	cmp    eax,DWORD PTR [rsp+0x30]
   17ff5:	mov    r10d,DWORD PTR [rsp+0x78]
   17ffa:	mov    rdx,QWORD PTR [rcx+r12*8]
   17ffe:	mov    r11d,DWORD PTR [rsp+0x8c]
   18006:	mov    DWORD PTR [rdx+rbp*4],eax
   18009:	jge    17f00 <FastIntegerPelBlockMotionSearch+0x1760>
   1800f:	mov    DWORD PTR [rsp+0x18],r15d
   18014:	mov    DWORD PTR [rsp+0x10],r13d
   18019:	mov    DWORD PTR [rsp+0x30],eax
   1801d:	jmp    17f00 <FastIntegerPelBlockMotionSearch+0x1760>
   18022:	mov    eax,DWORD PTR [rsp+0x8c]
   18029:	mov    rcx,QWORD PTR [rip+0x9f448]        # b7478 <mvbits>
   18030:	mov    QWORD PTR [rsp+0x90],r10
   18038:	lea    edx,[rax+r13*4]
   1803c:	mov    rax,QWORD PTR [rsp+0x78]
   18041:	movsxd rdx,edx
   18044:	mov    eax,DWORD PTR [rcx+rax*1]
   18047:	add    eax,DWORD PTR [rcx+rdx*4]
   1804a:	imul   eax,DWORD PTR [rsp+0x44]
   1804f:	push   r11
   18051:	mov    esi,DWORD PTR [rsp+0x18]
   18055:	mov    DWORD PTR [rsp+0xa4],r11d
   1805d:	sar    eax,0x10
   18060:	push   rsi
   18061:	mov    esi,DWORD PTR [rsp+0x40]
   18065:	push   rsi
   18066:	push   rax
   18067:	mov    ecx,DWORD PTR [rsp+0x60]
   1806b:	mov    rdx,QWORD PTR [rsp+0x70]
   18070:	mov    rdi,QWORD PTR [rsp+0x58]
   18075:	mov    r9d,DWORD PTR [rsp+0x78]
   1807a:	mov    rsi,QWORD PTR [rsp+0x68]
   1807f:	mov    DWORD PTR [rsp+0xb8],r8d
   18087:	call   16630 <PartCalMad>
   1808c:	mov    r10,QWORD PTR [rsp+0xb0]
   18094:	mov    rdi,QWORD PTR [rsp+0x38]
   18099:	add    rsp,0x20
   1809d:	mov    rcx,QWORD PTR [rip+0x727ec]        # 8a890 <McostState>
   180a4:	cmp    eax,DWORD PTR [rsp+0x30]
   180a8:	mov    r8d,DWORD PTR [rsp+0x98]
   180b0:	mov    rdx,QWORD PTR [rcx+r10*8]
   180b4:	mov    DWORD PTR [rdx+rdi*1],eax
   180b7:	jge    17e80 <FastIntegerPelBlockMotionSearch+0x16e0>
   180bd:	mov    r11d,DWORD PTR [rsp+0x9c]
   180c5:	mov    esi,DWORD PTR [rsp+0x10]
   180c9:	mov    DWORD PTR [rsp+0x30],eax
   180cd:	mov    DWORD PTR [rsp+0x20],r11d
   180d2:	mov    DWORD PTR [rsp+0x2c],esi
   180d6:	jmp    17e80 <FastIntegerPelBlockMotionSearch+0x16e0>
   180db:	mov    eax,DWORD PTR [rsp+0x9c]
   180e2:	mov    esi,DWORD PTR [rsp+0x20]
   180e6:	mov    QWORD PTR [rsp+0xa0],r10
   180ee:	mov    rcx,QWORD PTR [rip+0x9f383]        # b7478 <mvbits>
   180f5:	lea    edx,[rax+r14*4]
   180f9:	mov    rax,QWORD PTR [rsp+0x90]
   18101:	movsxd rdx,edx
   18104:	mov    eax,DWORD PTR [rcx+rax*1]
   18107:	add    eax,DWORD PTR [rcx+rdx*4]
   1810a:	imul   eax,DWORD PTR [rsp+0x44]
   1810f:	push   rsi
   18110:	mov    esi,DWORD PTR [rsp+0x20]
   18114:	push   rsi
   18115:	mov    esi,DWORD PTR [rsp+0x40]
   18119:	sar    eax,0x10
   1811c:	push   rsi
   1811d:	push   rax
   1811e:	mov    ecx,DWORD PTR [rsp+0x60]
   18122:	mov    rdx,QWORD PTR [rsp+0x70]
   18127:	mov    r9d,DWORD PTR [rsp+0x78]
   1812c:	mov    rsi,QWORD PTR [rsp+0x68]
   18131:	mov    rdi,QWORD PTR [rsp+0x58]
   18136:	mov    DWORD PTR [rsp+0xc8],r8d
   1813e:	call   16630 <PartCalMad>
   18143:	mov    r10,QWORD PTR [rsp+0xc0]
   1814b:	add    rsp,0x20
   1814f:	mov    rcx,QWORD PTR [rip+0x7273a]        # 8a890 <McostState>
   18156:	cmp    DWORD PTR [rsp+0x30],eax
   1815a:	mov    r8d,DWORD PTR [rsp+0xa8]
   18162:	mov    rdx,QWORD PTR [rcx+r10*8]
   18166:	mov    DWORD PTR [rdx+rbx*4],eax
   18169:	jle    17ba0 <FastIntegerPelBlockMotionSearch+0x1400>
   1816f:	mov    esi,DWORD PTR [rsp+0x18]
   18173:	mov    DWORD PTR [rsp+0x30],eax
   18177:	mov    DWORD PTR [rsp+0x2c],esi
   1817b:	jmp    17ba0 <FastIntegerPelBlockMotionSearch+0x1400>
   18180:	mov    eax,DWORD PTR [rsp+0x9c]
   18187:	mov    rcx,QWORD PTR [rip+0x9f2ea]        # b7478 <mvbits>
   1818e:	mov    QWORD PTR [rsp+0xa0],r11
   18196:	mov    edi,DWORD PTR [rsp+0x20]
   1819a:	lea    edx,[rax+r15*4]
   1819e:	mov    rax,QWORD PTR [rsp+0x90]
   181a6:	movsxd rdx,edx
   181a9:	mov    eax,DWORD PTR [rcx+rax*1]
   181ac:	add    eax,DWORD PTR [rcx+rdx*4]
   181af:	imul   eax,DWORD PTR [rsp+0x44]
   181b4:	push   rdi
   181b5:	push   r10
   181b7:	mov    edi,DWORD PTR [rsp+0x40]
   181bb:	sar    eax,0x10
   181be:	mov    DWORD PTR [rsp+0xbc],r10d
   181c6:	push   rdi
   181c7:	push   rax
   181c8:	mov    ecx,DWORD PTR [rsp+0x60]
   181cc:	mov    rdx,QWORD PTR [rsp+0x70]
   181d1:	mov    rsi,QWORD PTR [rsp+0x68]
   181d6:	mov    r9d,DWORD PTR [rsp+0x78]
   181db:	mov    rdi,QWORD PTR [rsp+0x58]
   181e0:	mov    DWORD PTR [rsp+0xc8],r8d
   181e8:	call   16630 <PartCalMad>
   181ed:	mov    rsi,QWORD PTR [rsp+0xa0]
   181f5:	mov    rcx,QWORD PTR [rip+0x72694]        # 8a890 <McostState>
   181fc:	mov    r11,QWORD PTR [rsp+0xc0]
   18204:	add    rsp,0x20
   18208:	mov    r8d,DWORD PTR [rsp+0xa8]
   18210:	mov    rdx,QWORD PTR [rcx+rsi*1]
   18214:	cmp    DWORD PTR [rsp+0x30],eax
   18218:	mov    DWORD PTR [rdx+r11*4],eax
   1821c:	jle    17b71 <FastIntegerPelBlockMotionSearch+0x13d1>
   18222:	mov    r10d,DWORD PTR [rsp+0xac]
   1822a:	mov    DWORD PTR [rsp+0x30],eax
   1822e:	mov    DWORD PTR [rsp+0x2c],r10d
   18233:	jmp    17b71 <FastIntegerPelBlockMotionSearch+0x13d1>
   18238:	mov    eax,DWORD PTR [rsp+0x8c]
   1823f:	mov    rcx,QWORD PTR [rip+0x9f232]        # b7478 <mvbits>
   18246:	mov    QWORD PTR [rsp+0x90],r10
   1824e:	lea    edx,[rax+rbx*4]
   18251:	mov    rax,QWORD PTR [rsp+0x78]
   18256:	movsxd rdx,edx
   18259:	mov    eax,DWORD PTR [rcx+rax*1]
   1825c:	add    eax,DWORD PTR [rcx+rdx*4]
   1825f:	imul   eax,DWORD PTR [rsp+0x44]
   18264:	push   r11
   18266:	mov    edi,DWORD PTR [rsp+0x18]
   1826a:	mov    DWORD PTR [rsp+0xa4],r11d
   18272:	sar    eax,0x10
   18275:	push   rdi
   18276:	mov    edi,DWORD PTR [rsp+0x40]
   1827a:	push   rdi
   1827b:	push   rax
   1827c:	mov    ecx,DWORD PTR [rsp+0x60]
   18280:	mov    rdx,QWORD PTR [rsp+0x70]
   18285:	mov    rsi,QWORD PTR [rsp+0x68]
   1828a:	mov    r9d,DWORD PTR [rsp+0x78]
   1828f:	mov    rdi,QWORD PTR [rsp+0x58]
   18294:	mov    DWORD PTR [rsp+0xb8],r8d
   1829c:	call   16630 <PartCalMad>
   182a1:	mov    r10,QWORD PTR [rsp+0xb0]
   182a9:	mov    rsi,QWORD PTR [rsp+0x38]
   182ae:	add    rsp,0x20
   182b2:	mov    rcx,QWORD PTR [rip+0x725d7]        # 8a890 <McostState>
   182b9:	cmp    DWORD PTR [rsp+0x30],eax
   182bd:	mov    r8d,DWORD PTR [rsp+0x98]
   182c5:	mov    rdx,QWORD PTR [rcx+r10*8]
   182c9:	mov    DWORD PTR [rdx+rsi*1],eax
   182cc:	jle    17e48 <FastIntegerPelBlockMotionSearch+0x16a8>
   182d2:	mov    r11d,DWORD PTR [rsp+0x9c]
   182da:	mov    edi,DWORD PTR [rsp+0x10]
   182de:	mov    DWORD PTR [rsp+0x30],eax
   182e2:	mov    DWORD PTR [rsp+0x20],r11d
   182e7:	mov    DWORD PTR [rsp+0x2c],edi
   182eb:	jmp    17e48 <FastIntegerPelBlockMotionSearch+0x16a8>
   182f0:	pxor   xmm6,xmm6
   182f4:	movss  DWORD PTR [rsp+0x64],xmm6
   182fa:	movss  DWORD PTR [rsp+0x74],xmm6
   18300:	jmp    169c3 <FastIntegerPelBlockMotionSearch+0x223>
   18305:	cmp    WORD PTR [rsp+0x28],0x0
   1830b:	mov    eax,DWORD PTR [rip+0x7255f]        # 8a870 <pred_SAD_ref>
   18311:	mov    r11d,r14d
   18314:	jle    1855b <FastIntegerPelBlockMotionSearch+0x1dbb>
   1831a:	pxor   xmm0,xmm0
   1831e:	mov    edx,DWORD PTR [rsp+0x30]
   18322:	movss  xmm2,DWORD PTR [rsp+0x64]
   18328:	pxor   xmm1,xmm1
   1832c:	cvtsi2ss xmm0,eax
   18330:	sub    edx,eax
   18332:	cvtsi2ss xmm1,edx
   18336:	mulss  xmm2,xmm0
   1833a:	comiss xmm2,xmm1
   1833d:	ja     18577 <FastIntegerPelBlockMotionSearch+0x1dd7>
   18343:	mulss  xmm0,DWORD PTR [rsp+0x74]
   18349:	comiss xmm0,xmm1
   1834c:	ja     185dc <FastIntegerPelBlockMotionSearch+0x1e3c>
   18352:	cmp    r11d,0x3
   18356:	jle    185dc <FastIntegerPelBlockMotionSearch+0x1e3c>
   1835c:	mov    r10d,0x1
   18362:	nop    WORD PTR [rax+rax*1+0x0]
   18368:	mov    DWORD PTR [rsp+0x28],0x0
   18370:	lea    r12,[rip+0x5a8ed]        # 72c64 <Big_Hexagon_x.5379+0x4>
   18377:	mov    r13d,0x4
   1837d:	xor    ebx,ebx
   1837f:	lea    r14,[rip+0x5a89e]        # 72c24 <Big_Hexagon_y.5380+0x4>
   18386:	jmp    183af <FastIntegerPelBlockMotionSearch+0x1c0f>
   18388:	nop    DWORD PTR [rax+rax*1+0x0]
   18390:	lea    rax,[rip+0x5a909]        # 72ca0 <Diamond_y.5376>
   18397:	cmp    rax,r12
   1839a:	je     184d0 <FastIntegerPelBlockMotionSearch+0x1d30>
   183a0:	mov    ebx,DWORD PTR [r12]
   183a4:	mov    r13d,DWORD PTR [r14]
   183a7:	add    r12,0x4
   183ab:	add    r14,0x4
   183af:	imul   ebx,r10d
   183b3:	add    ebx,DWORD PTR [rsp+0x2c]
   183b7:	mov    ebp,ebx
   183b9:	sub    ebp,DWORD PTR [rsp+0xc]
   183bd:	mov    edx,ebp
   183bf:	sar    edx,0x1f
   183c2:	mov    eax,edx
   183c4:	xor    eax,ebp
   183c6:	sub    eax,edx
   183c8:	cmp    eax,r11d
   183cb:	jg     18390 <FastIntegerPelBlockMotionSearch+0x1bf0>
   183cd:	imul   r13d,r10d
   183d1:	add    r13d,DWORD PTR [rsp+0x20]
   183d6:	mov    r15d,r13d
   183d9:	sub    r15d,DWORD PTR [rsp+0x24]
   183de:	mov    edx,r15d
   183e1:	sar    edx,0x1f
   183e4:	mov    eax,edx
   183e6:	xor    eax,r15d
   183e9:	sub    eax,edx
   183eb:	cmp    eax,r11d
   183ee:	jg     18390 <FastIntegerPelBlockMotionSearch+0x1bf0>
   183f0:	add    r15d,r11d
   183f3:	add    ebp,r11d
   183f6:	movsxd r15,r15d
   183f9:	movsxd rbp,ebp
   183fc:	mov    rax,QWORD PTR [rcx+r15*8]
   18400:	mov    eax,DWORD PTR [rax+rbp*4]
   18403:	test   eax,eax
   18405:	jne    18390 <FastIntegerPelBlockMotionSearch+0x1bf0>
   18407:	mov    rcx,QWORD PTR [rip+0x9f06a]        # b7478 <mvbits>
   1840e:	lea    edx,[rbx*4+0x0]
   18415:	lea    eax,[r13*4+0x0]
   1841d:	sub    edx,DWORD PTR [rsp+0x5c]
   18421:	sub    eax,DWORD PTR [rsp+0x60]
   18425:	movsxd rdx,edx
   18428:	mov    DWORD PTR [rsp+0x78],r10d
   1842d:	cdqe   
   1842f:	mov    DWORD PTR [rsp+0x110],r11d
   18437:	mov    eax,DWORD PTR [rcx+rax*4]
   1843a:	add    eax,DWORD PTR [rcx+rdx*4]
   1843d:	imul   eax,DWORD PTR [rsp+0x44]
   18442:	push   r13
   18444:	push   rbx
   18445:	mov    esi,DWORD PTR [rsp+0x40]
   18449:	sar    eax,0x10
   1844c:	push   rsi
   1844d:	push   rax
   1844e:	mov    ecx,DWORD PTR [rsp+0x60]
   18452:	mov    rdx,QWORD PTR [rsp+0x70]
   18457:	mov    r9d,DWORD PTR [rsp+0x78]
   1845c:	mov    rsi,QWORD PTR [rsp+0x68]
   18461:	mov    rdi,QWORD PTR [rsp+0x58]
   18466:	mov    DWORD PTR [rsp+0xa8],r8d
   1846e:	call   16630 <PartCalMad>
   18473:	mov    rcx,QWORD PTR [rip+0x72416]        # 8a890 <McostState>
   1847a:	add    rsp,0x20
   1847e:	mov    r8d,DWORD PTR [rsp+0x88]
   18486:	cmp    eax,DWORD PTR [rsp+0x30]
   1848a:	mov    r10d,DWORD PTR [rsp+0x78]
   1848f:	mov    rdx,QWORD PTR [rcx+r15*8]
   18493:	mov    r11d,DWORD PTR [rsp+0x110]
   1849b:	mov    DWORD PTR [rdx+rbp*4],eax
   1849e:	jge    18390 <FastIntegerPelBlockMotionSearch+0x1bf0>
   184a4:	mov    DWORD PTR [rsp+0x30],eax
   184a8:	lea    rax,[rip+0x5a7f1]        # 72ca0 <Diamond_y.5376>
   184af:	mov    DWORD PTR [rsp+0x18],r13d
   184b4:	mov    DWORD PTR [rsp+0x10],ebx
   184b8:	mov    DWORD PTR [rsp+0x28],0x1
   184c0:	cmp    rax,r12
   184c3:	jne    183a0 <FastIntegerPelBlockMotionSearch+0x1c00>
   184c9:	nop    DWORD PTR [rax+0x0]
   184d0:	mov    r9d,DWORD PTR [rsp+0x28]
   184d5:	test   r9d,r9d
   184d8:	je     18520 <FastIntegerPelBlockMotionSearch+0x1d80>
   184da:	cmp    WORD PTR [rsp+0x72],0x0
   184e0:	mov    eax,DWORD PTR [rip+0x7238a]        # 8a870 <pred_SAD_ref>
   184e6:	jle    18584 <FastIntegerPelBlockMotionSearch+0x1de4>
   184ec:	pxor   xmm0,xmm0
   184f0:	mov    edx,DWORD PTR [rsp+0x30]
   184f4:	movss  xmm2,DWORD PTR [rsp+0x64]
   184fa:	pxor   xmm1,xmm1
   184fe:	cvtsi2ss xmm0,eax
   18502:	sub    edx,eax
   18504:	cvtsi2ss xmm1,edx
   18508:	mulss  xmm2,xmm0
   1850c:	comiss xmm2,xmm1
   1850f:	ja     16ff6 <FastIntegerPelBlockMotionSearch+0x856>
   18515:	mulss  xmm0,DWORD PTR [rsp+0x74]
   1851b:	comiss xmm0,xmm1
   1851e:	ja     18532 <FastIntegerPelBlockMotionSearch+0x1d92>
   18520:	add    r10d,0x1
   18524:	cmp    r10d,DWORD PTR [rsp+0x80]
   1852c:	jle    18368 <FastIntegerPelBlockMotionSearch+0x1bc8>
   18532:	mov    eax,DWORD PTR [rsp+0x18]
   18536:	mov    DWORD PTR [rsp+0x20],eax
   1853a:	jmp    16dfa <FastIntegerPelBlockMotionSearch+0x65a>
   1853f:	cmp    DWORD PTR [rsp+0x34],0x1
   18544:	mov    eax,DWORD PTR [rip+0x723d6]        # 8a920 <pred_SAD_uplayer>
   1854a:	jg     17ea5 <FastIntegerPelBlockMotionSearch+0x1705>
   18550:	mov    eax,DWORD PTR [rip+0x72322]        # 8a878 <pred_SAD_space>
   18556:	jmp    17ea5 <FastIntegerPelBlockMotionSearch+0x1705>
   1855b:	cmp    DWORD PTR [rsp+0x34],0x1
   18560:	mov    eax,DWORD PTR [rip+0x723ba]        # 8a920 <pred_SAD_uplayer>
   18566:	jg     1831a <FastIntegerPelBlockMotionSearch+0x1b7a>
   1856c:	mov    eax,DWORD PTR [rip+0x72306]        # 8a878 <pred_SAD_space>
   18572:	jmp    1831a <FastIntegerPelBlockMotionSearch+0x1b7a>
   18577:	mov    eax,DWORD PTR [rsp+0x10]
   1857b:	mov    DWORD PTR [rsp+0x2c],eax
   1857f:	jmp    16fa1 <FastIntegerPelBlockMotionSearch+0x801>
   18584:	cmp    DWORD PTR [rsp+0x34],0x1
   18589:	mov    eax,DWORD PTR [rip+0x72391]        # 8a920 <pred_SAD_uplayer>
   1858f:	jg     184ec <FastIntegerPelBlockMotionSearch+0x1d4c>
   18595:	mov    eax,DWORD PTR [rip+0x722dd]        # 8a878 <pred_SAD_space>
   1859b:	jmp    184ec <FastIntegerPelBlockMotionSearch+0x1d4c>
   185a0:	mov    eax,DWORD PTR [rsp+0x20]
   185a4:	mov    DWORD PTR [rsp+0x18],eax
   185a8:	jmp    16fa1 <FastIntegerPelBlockMotionSearch+0x801>
   185ad:	mov    eax,DWORD PTR [rsp+0x2c]
   185b1:	mov    DWORD PTR [rsp+0x10],eax
   185b5:	jmp    16df1 <FastIntegerPelBlockMotionSearch+0x651>
   185ba:	test   r11d,r11d
   185bd:	lea    eax,[r11+0x3]
   185c1:	cmovns eax,r11d
   185c5:	sar    eax,0x2
   185c8:	mov    DWORD PTR [rsp+0x80],eax
   185cf:	mov    eax,DWORD PTR [rsp+0x10]
   185d3:	mov    DWORD PTR [rsp+0x2c],eax
   185d7:	jmp    17e93 <FastIntegerPelBlockMotionSearch+0x16f3>
   185dc:	mov    eax,DWORD PTR [rsp+0x18]
   185e0:	mov    DWORD PTR [rsp+0x20],eax
   185e4:	jmp    16df1 <FastIntegerPelBlockMotionSearch+0x651>
   185e9:	mov    eax,DWORD PTR [rsp+0x118]
   185f0:	mov    DWORD PTR [rsp+0x30],eax
   185f4:	jmp    16d00 <FastIntegerPelBlockMotionSearch+0x560>
   185f9:	nop    DWORD PTR [rax+0x0]

0000000000018600 <AddUpSADQuarter>:
   18600:	endbr64 
   18604:	push   r15
   18606:	push   r14
   18608:	push   r13
   1860a:	push   r12
   1860c:	push   rbp
   1860d:	push   rbx
   1860e:	mov    ebx,edx
   18610:	sub    rsp,0xa8
   18617:	mov    DWORD PTR [rsp+0x40],edx
   1861b:	mov    r10d,DWORD PTR [rsp+0xf0]
   18623:	mov    rax,QWORD PTR [rsp+0xe0]
   1862b:	mov    rdx,QWORD PTR [rsp+0xe8]
   18633:	mov    r11,QWORD PTR fs:0x28
   1863c:	mov    QWORD PTR [rsp+0x98],r11
   18644:	xor    r11d,r11d
   18647:	mov    DWORD PTR [rsp+0x2c],r10d
   1864c:	test   ecx,ecx
   1864e:	jle    18a1f <AddUpSADQuarter+0x41f>
   18654:	mov    r13,QWORD PTR [rax+0x1930]
   1865b:	mov    r15d,DWORD PTR [rax+0x18f8]
   18662:	mov    QWORD PTR [rsp+0x8],rdx
   18667:	mov    r14d,DWORD PTR [rax+0x18fc]
   1866e:	lea    eax,[r9+rsi*4]
   18672:	mov    DWORD PTR [rsp+0x10],eax
   18676:	lea    eax,[rcx-0x1]
   18679:	shr    eax,0x2
   1867c:	shl    rax,0x5
   18680:	lea    rax,[rdx+rax*1+0x20]
   18685:	mov    QWORD PTR [rsp+0x48],rax
   1868a:	lea    eax,[r8+rdi*4]
   1868e:	mov    DWORD PTR [rsp+0x44],eax
   18692:	lea    eax,[rbx-0x1]
   18695:	shr    eax,0x2
   18698:	lea    rax,[rax*8+0xa]
   186a0:	mov    QWORD PTR [rsp+0x30],rax
   186a5:	lea    rax,[rsp+0x50]
   186aa:	mov    QWORD PTR [rsp+0x38],rax
   186af:	mov    edx,DWORD PTR [rsp+0x40]
   186b3:	test   edx,edx
   186b5:	jle    18a50 <AddUpSADQuarter+0x450>
   186bb:	mov    eax,DWORD PTR [rsp+0x10]
   186bf:	mov    ebx,0x2
   186c4:	lea    esi,[rax+0x4]
   186c7:	mov    DWORD PTR [rsp+0x1c],esi
   186cb:	lea    esi,[rax+0x8]
   186ce:	add    eax,0xc
   186d1:	mov    DWORD PTR [rsp+0x14],eax
   186d5:	mov    eax,DWORD PTR [rsp+0x44]
   186d9:	mov    DWORD PTR [rsp+0x18],esi
   186dd:	mov    DWORD PTR [rsp+0x4],eax
   186e1:	jmp    186fc <AddUpSADQuarter+0xfc>
   186e3:	nop    DWORD PTR [rax+rax*1+0x0]
   186e8:	add    DWORD PTR [rsp+0x4],0x10
   186ed:	add    rbx,0x8
   186f1:	cmp    QWORD PTR [rsp+0x30],rbx
   186f6:	je     18a50 <AddUpSADQuarter+0x450>
   186fc:	mov    rax,QWORD PTR [rsp+0x8]
   18701:	mov    edx,DWORD PTR [rsp+0x4]
   18705:	mov    r8d,r15d
   18708:	mov    ecx,r14d
   1870b:	mov    esi,DWORD PTR [rsp+0x10]
   1870f:	mov    rdi,r13
   18712:	mov    rbp,QWORD PTR [rax]
   18715:	movzx  r12d,WORD PTR [rbp+rbx*1-0x2]
   1871b:	call   QWORD PTR [rip+0x702c7]        # 889e8 <PelY_14>
   18721:	mov    esi,DWORD PTR [rsp+0x10]
   18725:	mov    r8d,r15d
   18728:	mov    ecx,r14d
   1872b:	movzx  eax,ax
   1872e:	mov    rdi,r13
   18731:	sub    r12d,eax
   18734:	mov    eax,DWORD PTR [rsp+0x4]
   18738:	mov    DWORD PTR [rsp+0x50],r12d
   1873d:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   18743:	lea    r11d,[rax+0x4]
   18747:	mov    edx,r11d
   1874a:	mov    DWORD PTR [rsp+0x28],r11d
   1874f:	call   QWORD PTR [rip+0x70293]        # 889e8 <PelY_14>
   18755:	mov    esi,DWORD PTR [rsp+0x10]
   18759:	mov    r8d,r15d
   1875c:	mov    ecx,r14d
   1875f:	movzx  eax,ax
   18762:	mov    rdi,r13
   18765:	sub    r12d,eax
   18768:	mov    eax,DWORD PTR [rsp+0x4]
   1876c:	mov    DWORD PTR [rsp+0x54],r12d
   18771:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   18777:	lea    r10d,[rax+0x8]
   1877b:	mov    edx,r10d
   1877e:	mov    DWORD PTR [rsp+0x24],r10d
   18783:	call   QWORD PTR [rip+0x7025f]        # 889e8 <PelY_14>
   18789:	movzx  ebp,WORD PTR [rbp+rbx*1+0x4]
   1878e:	mov    r8d,r15d
   18791:	mov    ecx,r14d
   18794:	movzx  eax,ax
   18797:	mov    esi,DWORD PTR [rsp+0x10]
   1879b:	mov    rdi,r13
   1879e:	sub    r12d,eax
   187a1:	mov    eax,DWORD PTR [rsp+0x4]
   187a5:	mov    DWORD PTR [rsp+0x58],r12d
   187aa:	lea    r9d,[rax+0xc]
   187ae:	mov    edx,r9d
   187b1:	mov    DWORD PTR [rsp+0x20],r9d
   187b6:	call   QWORD PTR [rip+0x7022c]        # 889e8 <PelY_14>
   187bc:	mov    rdx,QWORD PTR [rsp+0x8]
   187c1:	mov    r8d,r15d
   187c4:	mov    ecx,r14d
   187c7:	movzx  eax,ax
   187ca:	mov    esi,DWORD PTR [rsp+0x1c]
   187ce:	mov    rdi,r13
   187d1:	sub    ebp,eax
   187d3:	mov    DWORD PTR [rsp+0x5c],ebp
   187d7:	mov    rbp,QWORD PTR [rdx+0x8]
   187db:	mov    edx,DWORD PTR [rsp+0x4]
   187df:	movzx  r12d,WORD PTR [rbp+rbx*1-0x2]
   187e5:	call   QWORD PTR [rip+0x701fd]        # 889e8 <PelY_14>
   187eb:	mov    r11d,DWORD PTR [rsp+0x28]
   187f0:	mov    r8d,r15d
   187f3:	mov    ecx,r14d
   187f6:	movzx  eax,ax
   187f9:	mov    esi,DWORD PTR [rsp+0x1c]
   187fd:	mov    rdi,r13
   18800:	sub    r12d,eax
   18803:	mov    edx,r11d
   18806:	mov    DWORD PTR [rsp+0x60],r12d
   1880b:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   18811:	call   QWORD PTR [rip+0x701d1]        # 889e8 <PelY_14>
   18817:	mov    r10d,DWORD PTR [rsp+0x24]
   1881c:	mov    r8d,r15d
   1881f:	mov    ecx,r14d
   18822:	movzx  eax,ax
   18825:	mov    esi,DWORD PTR [rsp+0x1c]
   18829:	mov    rdi,r13
   1882c:	sub    r12d,eax
   1882f:	mov    edx,r10d
   18832:	mov    DWORD PTR [rsp+0x64],r12d
   18837:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   1883d:	call   QWORD PTR [rip+0x701a5]        # 889e8 <PelY_14>
   18843:	mov    r9d,DWORD PTR [rsp+0x20]
   18848:	mov    r8d,r15d
   1884b:	mov    ecx,r14d
   1884e:	movzx  eax,ax
   18851:	movzx  ebp,WORD PTR [rbp+rbx*1+0x4]
   18856:	mov    esi,DWORD PTR [rsp+0x1c]
   1885a:	mov    rdi,r13
   1885d:	sub    r12d,eax
   18860:	mov    edx,r9d
   18863:	mov    DWORD PTR [rsp+0x68],r12d
   18868:	call   QWORD PTR [rip+0x7017a]        # 889e8 <PelY_14>
   1886e:	mov    rcx,QWORD PTR [rsp+0x8]
   18873:	mov    r8d,r15d
   18876:	mov    rdi,r13
   18879:	movzx  eax,ax
   1887c:	mov    edx,DWORD PTR [rsp+0x4]
   18880:	mov    esi,DWORD PTR [rsp+0x18]
   18884:	sub    ebp,eax
   18886:	mov    DWORD PTR [rsp+0x6c],ebp
   1888a:	mov    rbp,QWORD PTR [rcx+0x10]
   1888e:	mov    ecx,r14d
   18891:	movzx  r12d,WORD PTR [rbp+rbx*1-0x2]
   18897:	call   QWORD PTR [rip+0x7014b]        # 889e8 <PelY_14>
   1889d:	mov    r11d,DWORD PTR [rsp+0x28]
   188a2:	mov    r8d,r15d
   188a5:	mov    ecx,r14d
   188a8:	movzx  eax,ax
   188ab:	mov    esi,DWORD PTR [rsp+0x18]
   188af:	mov    rdi,r13
   188b2:	sub    r12d,eax
   188b5:	mov    edx,r11d
   188b8:	mov    DWORD PTR [rsp+0x70],r12d
   188bd:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   188c3:	call   QWORD PTR [rip+0x7011f]        # 889e8 <PelY_14>
   188c9:	mov    r10d,DWORD PTR [rsp+0x24]
   188ce:	mov    r8d,r15d
   188d1:	mov    ecx,r14d
   188d4:	movzx  eax,ax
   188d7:	mov    esi,DWORD PTR [rsp+0x18]
   188db:	mov    rdi,r13
   188de:	sub    r12d,eax
   188e1:	mov    edx,r10d
   188e4:	mov    DWORD PTR [rsp+0x74],r12d
   188e9:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   188ef:	call   QWORD PTR [rip+0x700f3]        # 889e8 <PelY_14>
   188f5:	mov    r9d,DWORD PTR [rsp+0x20]
   188fa:	mov    r8d,r15d
   188fd:	mov    ecx,r14d
   18900:	movzx  eax,ax
   18903:	movzx  ebp,WORD PTR [rbp+rbx*1+0x4]
   18908:	mov    esi,DWORD PTR [rsp+0x18]
   1890c:	mov    rdi,r13
   1890f:	sub    r12d,eax
   18912:	mov    edx,r9d
   18915:	mov    DWORD PTR [rsp+0x78],r12d
   1891a:	call   QWORD PTR [rip+0x700c8]        # 889e8 <PelY_14>
   18920:	mov    rcx,QWORD PTR [rsp+0x8]
   18925:	mov    r8d,r15d
   18928:	mov    rdi,r13
   1892b:	movzx  eax,ax
   1892e:	mov    edx,DWORD PTR [rsp+0x4]
   18932:	mov    esi,DWORD PTR [rsp+0x14]
   18936:	sub    ebp,eax
   18938:	mov    DWORD PTR [rsp+0x7c],ebp
   1893c:	mov    rbp,QWORD PTR [rcx+0x18]
   18940:	mov    ecx,r14d
   18943:	movzx  r12d,WORD PTR [rbp+rbx*1-0x2]
   18949:	call   QWORD PTR [rip+0x70099]        # 889e8 <PelY_14>
   1894f:	mov    r11d,DWORD PTR [rsp+0x28]
   18954:	mov    r8d,r15d
   18957:	mov    ecx,r14d
   1895a:	movzx  eax,ax
   1895d:	mov    esi,DWORD PTR [rsp+0x14]
   18961:	mov    rdi,r13
   18964:	sub    r12d,eax
   18967:	mov    edx,r11d
   1896a:	mov    DWORD PTR [rsp+0x80],r12d
   18972:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   18978:	call   QWORD PTR [rip+0x7006a]        # 889e8 <PelY_14>
   1897e:	mov    r10d,DWORD PTR [rsp+0x24]
   18983:	mov    r8d,r15d
   18986:	mov    ecx,r14d
   18989:	movzx  eax,ax
   1898c:	mov    esi,DWORD PTR [rsp+0x14]
   18990:	mov    rdi,r13
   18993:	sub    r12d,eax
   18996:	mov    edx,r10d
   18999:	mov    DWORD PTR [rsp+0x84],r12d
   189a1:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   189a7:	call   QWORD PTR [rip+0x7003b]        # 889e8 <PelY_14>
   189ad:	mov    r9d,DWORD PTR [rsp+0x20]
   189b2:	mov    r8d,r15d
   189b5:	mov    ecx,r14d
   189b8:	movzx  eax,ax
   189bb:	movzx  ebp,WORD PTR [rbp+rbx*1+0x4]
   189c0:	mov    esi,DWORD PTR [rsp+0x14]
   189c4:	mov    rdi,r13
   189c7:	sub    r12d,eax
   189ca:	mov    edx,r9d
   189cd:	mov    DWORD PTR [rsp+0x88],r12d
   189d5:	call   QWORD PTR [rip+0x7000d]        # 889e8 <PelY_14>
   189db:	movzx  eax,ax
   189de:	sub    ebp,eax
   189e0:	mov    eax,DWORD PTR [rsp+0x100]
   189e7:	mov    DWORD PTR [rsp+0x8c],ebp
   189ee:	test   eax,eax
   189f0:	jne    186e8 <AddUpSADQuarter+0xe8>
   189f6:	mov    rax,QWORD PTR [rip+0x6fbbb]        # 885b8 <input>
   189fd:	mov    rdi,QWORD PTR [rsp+0x38]
   18a02:	mov    esi,DWORD PTR [rax+0x18]
   18a05:	call   3bae0 <SATD>
   18a0a:	add    DWORD PTR [rsp+0x2c],eax
   18a0e:	mov    edi,DWORD PTR [rsp+0x2c]
   18a12:	cmp    edi,DWORD PTR [rsp+0xf8]
   18a19:	jle    186e8 <AddUpSADQuarter+0xe8>
   18a1f:	mov    rax,QWORD PTR [rsp+0x98]
   18a27:	xor    rax,QWORD PTR fs:0x28
   18a30:	jne    18a6d <AddUpSADQuarter+0x46d>
   18a32:	mov    eax,DWORD PTR [rsp+0x2c]
   18a36:	add    rsp,0xa8
   18a3d:	pop    rbx
   18a3e:	pop    rbp
   18a3f:	pop    r12
   18a41:	pop    r13
   18a43:	pop    r14
   18a45:	pop    r15
   18a47:	ret    
   18a48:	nop    DWORD PTR [rax+rax*1+0x0]
   18a50:	add    QWORD PTR [rsp+0x8],0x20
   18a56:	mov    rax,QWORD PTR [rsp+0x8]
   18a5b:	add    DWORD PTR [rsp+0x10],0x10
   18a60:	cmp    QWORD PTR [rsp+0x48],rax
   18a65:	jne    186af <AddUpSADQuarter+0xaf>
   18a6b:	jmp    18a1f <AddUpSADQuarter+0x41f>
   18a6d:	call   4390 <__stack_chk_fail@plt>
   18a72:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18a7d:	nop    DWORD PTR [rax]

0000000000018a80 <FastSubPelBlockMotionSearch>:
   18a80:	endbr64 
   18a84:	push   r15
   18a86:	push   r14
   18a88:	push   r13
   18a8a:	push   r12
   18a8c:	push   rbp
   18a8d:	push   rbx
   18a8e:	sub    rsp,0x58
   18a92:	mov    rax,QWORD PTR [rip+0x6fb17]        # 885b0 <img>
   18a99:	mov    QWORD PTR [rsp+0x48],rdi
   18a9e:	mov    r10d,DWORD PTR [rsp+0x90]
   18aa6:	mov    edi,ecx
   18aa8:	mov    ebx,DWORD PTR [rax+0x11ad0]
   18aae:	mov    DWORD PTR [rsp+0x24],r8d
   18ab3:	mov    r13,QWORD PTR [rsp+0xa0]
   18abb:	mov    r8d,DWORD PTR [rsp+0x98]
   18ac3:	mov    r15,QWORD PTR [rsp+0xa8]
   18acb:	mov    r14d,DWORD PTR [rsp+0xc0]
   18ad3:	test   ebx,ebx
   18ad5:	je     18afc <FastSubPelBlockMotionSearch+0x7c>
   18ad7:	movsxd r11,DWORD PTR [rax+0xc]
   18adb:	mov    rcx,r11
   18ade:	imul   r11,r11,0x278
   18ae5:	add    r11,QWORD PTR [rax+0x3758]
   18aec:	mov    r11d,DWORD PTR [r11+0x214]
   18af3:	test   r11d,r11d
   18af6:	jne    18e61 <FastSubPelBlockMotionSearch+0x3e1>
   18afc:	mulsd  xmm0,QWORD PTR [rip+0x5a34c]        # 72e50 <quant_coef+0x190>
   18b04:	movsxd rdx,edx
   18b07:	lea    rax,[rip+0x9e912]        # b7420 <listX>
   18b0e:	movsx  rsi,si
   18b12:	addsd  xmm0,QWORD PTR [rip+0x5a33e]        # 72e58 <quant_coef+0x198>
   18b1a:	mov    rax,QWORD PTR [rax+rdx*8]
   18b1e:	mov    rdx,QWORD PTR [rip+0x6fa93]        # 885b8 <input>
   18b25:	mov    rbx,QWORD PTR [rax+rsi*8]
   18b29:	cvttsd2si eax,xmm0
   18b2d:	mov    ecx,DWORD PTR [rbx+0x18f8]
   18b33:	mov    QWORD PTR [rsp+0x38],rbx
   18b38:	mov    DWORD PTR [rsp+0x44],eax
   18b3c:	movsxd rax,r9d
   18b3f:	mov    r9d,DWORD PTR [rbx+0x18fc]
   18b46:	mov    esi,DWORD PTR [rdx+rax*8+0x50]
   18b4a:	mov    eax,DWORD PTR [rdx+rax*8+0x54]
   18b4e:	shl    WORD PTR [r13+0x0],0x2
   18b54:	mov    DWORD PTR [rsp+0x28],eax
   18b58:	movsx  eax,WORD PTR [r15]
   18b5c:	mov    DWORD PTR [rsp+0x20],esi
   18b60:	shl    eax,0x2
   18b63:	mov    WORD PTR [r15],ax
   18b67:	movsx  edx,WORD PTR [r13+0x0]
   18b6c:	cwde   
   18b6d:	lea    esi,[rdx+rdi*4]
   18b70:	cmp    esi,0x1
   18b73:	jle    18b88 <FastSubPelBlockMotionSearch+0x108>
   18b75:	sub    ecx,DWORD PTR [rsp+0x20]
   18b79:	lea    ecx,[rcx*4+0x2]
   18b80:	cmp    esi,ecx
   18b82:	jl     18e30 <FastSubPelBlockMotionSearch+0x3b0>
   18b88:	lea    rcx,[rip+0x453d1]        # 5df60 <UMVPelY_14>
   18b8f:	movsx  ebx,r10w
   18b93:	mov    QWORD PTR [rip+0x6fe4e],rcx        # 889e8 <PelY_14>
   18b9a:	pxor   xmm0,xmm0
   18b9e:	mov    DWORD PTR [rsp+0x34],ebx
   18ba2:	sub    ebx,edx
   18ba4:	mov    ecx,ebx
   18ba6:	sar    ecx,0x1f
   18ba9:	shr    ecx,0x1e
   18bac:	lea    ebp,[rbx+rcx*1]
   18baf:	movsx  ebx,r8w
   18bb3:	mov    DWORD PTR [rsp+0x40],ebx
   18bb7:	sub    ebx,eax
   18bb9:	and    ebp,0x3
   18bbc:	mov    eax,ebx
   18bbe:	sub    ebp,ecx
   18bc0:	cdq    
   18bc1:	mov    rax,QWORD PTR [rip+0x71d48]        # 8a910 <SearchState>
   18bc8:	shr    edx,0x1e
   18bcb:	mov    rax,QWORD PTR [rax]
   18bce:	lea    ebx,[rbx+rdx*1]
   18bd1:	and    ebx,0x3
   18bd4:	movups XMMWORD PTR [rax+0x10],xmm0
   18bd8:	sub    ebx,edx
   18bda:	mov    BYTE PTR [rax+0x30],0x0
   18bde:	movups XMMWORD PTR [rax],xmm0
   18be1:	movups XMMWORD PTR [rax+0x20],xmm0
   18be5:	mov    rax,QWORD PTR [rip+0x6f9cc]        # 885b8 <input>
   18bec:	mov    eax,DWORD PTR [rax+0x18]
   18bef:	test   eax,eax
   18bf1:	jne    18f40 <FastSubPelBlockMotionSearch+0x4c0>
   18bf7:	mov    rax,QWORD PTR [rip+0x71d12]        # 8a910 <SearchState>
   18bfe:	mov    DWORD PTR [rsp+0x18],r14d
   18c03:	mov    rax,QWORD PTR [rax+0x18]
   18c07:	mov    BYTE PTR [rax+0x3],0x1
   18c0b:	movsx  eax,WORD PTR [r13+0x0]
   18c10:	movsx  r10d,WORD PTR [r15]
   18c14:	mov    r12d,eax
   18c17:	mov    esi,ebp
   18c19:	or     esi,ebx
   18c1b:	jne    18e78 <FastSubPelBlockMotionSearch+0x3f8>
   18c21:	mov    DWORD PTR [rsp+0x1c],0x7
   18c29:	lea    r14,[rip+0x5a090]        # 72cc0 <quant_coef>
   18c30:	mov    QWORD PTR [rsp+0xa8],r15
   18c38:	mov    r15d,r10d
   18c3b:	mov    r10,QWORD PTR [rsp+0xa8]
   18c43:	nop    DWORD PTR [rax+rax*1+0x0]
   18c48:	mov    DWORD PTR [rsp+0x14],r15d
   18c4d:	mov    r11d,0x1
   18c53:	lea    rbx,[rip+0x5a056]        # 72cb0 <Diamond_x.5375>
   18c5a:	lea    rbp,[rip+0x5a03f]        # 72ca0 <Diamond_y.5376>
   18c61:	mov    DWORD PTR [rsp+0x10],r12d
   18c66:	xor    r9d,r9d
   18c69:	mov    r8d,0xffffffff
   18c6f:	mov    DWORD PTR [rsp+0x8],r15d
   18c74:	mov    DWORD PTR [rsp+0xc],r11d
   18c79:	mov    r11d,r12d
   18c7c:	lea    r15d,[r11+r8*1]
   18c80:	mov    esi,r15d
   18c83:	sub    esi,eax
   18c85:	mov    ecx,esi
   18c87:	mov    eax,esi
   18c89:	sar    ecx,0x1f
   18c8c:	mov    edx,ecx
   18c8e:	xor    edx,esi
   18c90:	sub    edx,ecx
   18c92:	cmp    edx,0x3
   18c95:	jg     18cd8 <FastSubPelBlockMotionSearch+0x258>
   18c97:	mov    esi,DWORD PTR [rsp+0x8]
   18c9b:	movsx  edx,WORD PTR [r10]
   18c9f:	lea    r12d,[rsi+r9*1]
   18ca3:	mov    esi,r12d
   18ca6:	sub    esi,edx
   18ca8:	mov    edx,esi
   18caa:	sar    esi,0x1f
   18cad:	mov    ecx,esi
   18caf:	xor    ecx,edx
   18cb1:	sub    ecx,esi
   18cb3:	cmp    ecx,0x3
   18cb6:	jg     18cd8 <FastSubPelBlockMotionSearch+0x258>
   18cb8:	add    edx,0x3
   18cbb:	mov    rcx,QWORD PTR [rip+0x71c4e]        # 8a910 <SearchState>
   18cc2:	add    eax,0x3
   18cc5:	movsxd rdx,edx
   18cc8:	cdqe   
   18cca:	mov    rdx,QWORD PTR [rcx+rdx*8]
   18cce:	cmp    BYTE PTR [rdx+rax*1],0x0
   18cd2:	je     18d28 <FastSubPelBlockMotionSearch+0x2a8>
   18cd4:	nop    DWORD PTR [rax+0x0]
   18cd8:	add    rbx,0x4
   18cdc:	add    rbp,0x4
   18ce0:	cmp    r14,rbx
   18ce3:	je     18cf8 <FastSubPelBlockMotionSearch+0x278>
   18ce5:	mov    r8d,DWORD PTR [rbx]
   18ce8:	mov    r9d,DWORD PTR [rbp+0x0]
   18cec:	movsx  eax,WORD PTR [r13+0x0]
   18cf1:	jmp    18c7c <FastSubPelBlockMotionSearch+0x1fc>
   18cf3:	nop    DWORD PTR [rax+rax*1+0x0]
   18cf8:	mov    r11d,DWORD PTR [rsp+0xc]
   18cfd:	test   r11d,r11d
   18d00:	jne    18e00 <FastSubPelBlockMotionSearch+0x380>
   18d06:	sub    DWORD PTR [rsp+0x1c],0x1
   18d0b:	je     18e00 <FastSubPelBlockMotionSearch+0x380>
   18d11:	mov    r15d,DWORD PTR [rsp+0x14]
   18d16:	mov    r12d,DWORD PTR [rsp+0x10]
   18d1b:	movsx  eax,WORD PTR [r13+0x0]
   18d20:	jmp    18c48 <FastSubPelBlockMotionSearch+0x1c8>
   18d25:	nop    DWORD PTR [rax]
   18d28:	mov    DWORD PTR [rsp+0x30],r11d
   18d2d:	sub    rsp,0x8
   18d31:	mov    edx,r15d
   18d34:	mov    r9d,r12d
   18d37:	mov    QWORD PTR [rsp+0xb0],r10
   18d3f:	mov    eax,DWORD PTR [rsp+0xd0]
   18d46:	mov    r8d,r15d
   18d49:	mov    rcx,QWORD PTR [rip+0x9e728]        # b7478 <mvbits>
   18d50:	push   rax
   18d51:	mov    eax,DWORD PTR [rsp+0x28]
   18d55:	push   rax
   18d56:	mov    eax,r12d
   18d59:	sub    edx,DWORD PTR [rsp+0x4c]
   18d5d:	sub    eax,DWORD PTR [rsp+0x58]
   18d61:	movsxd rdx,edx
   18d64:	cdqe   
   18d66:	mov    eax,DWORD PTR [rcx+rax*4]
   18d69:	add    eax,DWORD PTR [rcx+rdx*4]
   18d6c:	imul   eax,DWORD PTR [rsp+0x5c]
   18d71:	sar    eax,0x10
   18d74:	push   rax
   18d75:	push   QWORD PTR [rsp+0x68]
   18d79:	push   QWORD PTR [rsp+0x60]
   18d7d:	mov    ecx,DWORD PTR [rsp+0x58]
   18d81:	mov    edx,DWORD PTR [rsp+0x50]
   18d85:	mov    esi,DWORD PTR [rsp+0x54]
   18d89:	mov    DWORD PTR [rsp+0x5c],edi
   18d8d:	call   18600 <AddUpSADQuarter>
   18d92:	mov    r10,QWORD PTR [rsp+0xd8]
   18d9a:	mov    ecx,r12d
   18d9d:	mov    esi,r15d
   18da0:	add    rsp,0x30
   18da4:	mov    edi,DWORD PTR [rsp+0x2c]
   18da8:	mov    r11d,DWORD PTR [rsp+0x30]
   18dad:	movsx  edx,WORD PTR [r10]
   18db1:	sub    ecx,edx
   18db3:	movsx  edx,WORD PTR [r13+0x0]
   18db8:	add    ecx,0x3
   18dbb:	sub    esi,edx
   18dbd:	movsxd rcx,ecx
   18dc0:	mov    edx,esi
   18dc2:	mov    rsi,QWORD PTR [rip+0x71b47]        # 8a910 <SearchState>
   18dc9:	add    edx,0x3
   18dcc:	cmp    eax,DWORD PTR [rsp+0x18]
   18dd0:	mov    rcx,QWORD PTR [rsi+rcx*8]
   18dd4:	movsxd rdx,edx
   18dd7:	mov    BYTE PTR [rcx+rdx*1],0x1
   18ddb:	jge    18cd8 <FastSubPelBlockMotionSearch+0x258>
   18de1:	mov    DWORD PTR [rsp+0x14],r12d
   18de6:	mov    DWORD PTR [rsp+0x10],r15d
   18deb:	mov    DWORD PTR [rsp+0x18],eax
   18def:	mov    DWORD PTR [rsp+0xc],0x0
   18df7:	jmp    18cd8 <FastSubPelBlockMotionSearch+0x258>
   18dfc:	nop    DWORD PTR [rax+0x0]
   18e00:	movzx  eax,WORD PTR [rsp+0x10]
   18e05:	mov    WORD PTR [r13+0x0],ax
   18e0a:	movzx  eax,WORD PTR [rsp+0x14]
   18e0f:	mov    WORD PTR [r10],ax
   18e13:	mov    eax,DWORD PTR [rsp+0x18]
   18e17:	add    rsp,0x58
   18e1b:	pop    rbx
   18e1c:	pop    rbp
   18e1d:	pop    r12
   18e1f:	pop    r13
   18e21:	pop    r14
   18e23:	pop    r15
   18e25:	ret    
   18e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18e30:	mov    ebx,DWORD PTR [rsp+0x24]
   18e34:	lea    ecx,[rax+rbx*4]
   18e37:	cmp    ecx,0x1
   18e3a:	jle    18b88 <FastSubPelBlockMotionSearch+0x108>
   18e40:	sub    r9d,DWORD PTR [rsp+0x28]
   18e45:	lea    esi,[r9*4+0x2]
   18e4d:	cmp    ecx,esi
   18e4f:	jge    18b88 <FastSubPelBlockMotionSearch+0x108>
   18e55:	lea    rcx,[rip+0x45184]        # 5dfe0 <FastPelY_14>
   18e5c:	jmp    18b8f <FastSubPelBlockMotionSearch+0x10f>
   18e61:	lea    eax,[rdx+0x4]
   18e64:	add    edx,0x2
   18e67:	and    ecx,0x1
   18e6a:	cmovne edx,eax
   18e6d:	jmp    18afc <FastSubPelBlockMotionSearch+0x7c>
   18e72:	nop    WORD PTR [rax+rax*1+0x0]
   18e78:	add    ebp,eax
   18e7a:	movsx  eax,WORD PTR [r15]
   18e7e:	mov    DWORD PTR [rsp+0xc],r10d
   18e83:	sub    rsp,0x8
   18e87:	mov    rcx,QWORD PTR [rip+0x9e5ea]        # b7478 <mvbits>
   18e8e:	mov    edx,ebp
   18e90:	mov    r8d,ebp
   18e93:	add    ebx,eax
   18e95:	mov    eax,DWORD PTR [rsp+0xd0]
   18e9c:	mov    r9d,ebx
   18e9f:	push   rax
   18ea0:	mov    r14d,DWORD PTR [rsp+0x28]
   18ea5:	mov    eax,ebx
   18ea7:	push   r14
   18ea9:	sub    edx,DWORD PTR [rsp+0x4c]
   18ead:	sub    eax,DWORD PTR [rsp+0x58]
   18eb1:	movsxd rdx,edx
   18eb4:	cdqe   
   18eb6:	mov    eax,DWORD PTR [rcx+rax*4]
   18eb9:	add    eax,DWORD PTR [rcx+rdx*4]
   18ebc:	imul   eax,DWORD PTR [rsp+0x5c]
   18ec1:	sar    eax,0x10
   18ec4:	push   rax
   18ec5:	push   QWORD PTR [rsp+0x68]
   18ec9:	push   QWORD PTR [rsp+0x60]
   18ecd:	mov    ecx,DWORD PTR [rsp+0x58]
   18ed1:	mov    edx,DWORD PTR [rsp+0x50]
   18ed5:	mov    esi,DWORD PTR [rsp+0x54]
   18ed9:	mov    DWORD PTR [rsp+0x38],edi
   18edd:	call   18600 <AddUpSADQuarter>
   18ee2:	movsx  edx,WORD PTR [r15]
   18ee6:	mov    ecx,ebx
   18ee8:	mov    edi,ebp
   18eea:	mov    rsi,QWORD PTR [rip+0x71a1f]        # 8a910 <SearchState>
   18ef1:	add    rsp,0x30
   18ef5:	mov    r10d,DWORD PTR [rsp+0xc]
   18efa:	sub    ecx,edx
   18efc:	movsx  edx,WORD PTR [r13+0x0]
   18f01:	add    ecx,0x3
   18f04:	sub    edi,edx
   18f06:	movsxd rcx,ecx
   18f09:	mov    edx,edi
   18f0b:	mov    rcx,QWORD PTR [rsi+rcx*8]
   18f0f:	mov    edi,DWORD PTR [rsp+0x8]
   18f13:	add    edx,0x3
   18f16:	cmp    r14d,eax
   18f19:	movsxd rdx,edx
   18f1c:	mov    BYTE PTR [rcx+rdx*1],0x1
   18f20:	jle    18fe9 <FastSubPelBlockMotionSearch+0x569>
   18f26:	mov    DWORD PTR [rsp+0x18],eax
   18f2a:	mov    r10d,ebx
   18f2d:	movsx  eax,WORD PTR [r13+0x0]
   18f32:	mov    r12d,ebp
   18f35:	jmp    18c21 <FastSubPelBlockMotionSearch+0x1a1>
   18f3a:	nop    WORD PTR [rax+rax*1+0x0]
   18f40:	sub    rsp,0x8
   18f44:	movsx  r10d,WORD PTR [r15]
   18f48:	movsx  r12d,WORD PTR [r13+0x0]
   18f4d:	mov    eax,DWORD PTR [rsp+0xd0]
   18f54:	mov    rcx,QWORD PTR [rip+0x9e51d]        # b7478 <mvbits>
   18f5b:	mov    edx,r12d
   18f5e:	mov    r9d,r10d
   18f61:	mov    r8d,r12d
   18f64:	push   rax
   18f65:	mov    eax,r10d
   18f68:	push   r14
   18f6a:	sub    edx,DWORD PTR [rsp+0x4c]
   18f6e:	sub    eax,DWORD PTR [rsp+0x58]
   18f72:	movsxd rdx,edx
   18f75:	cdqe   
   18f77:	mov    eax,DWORD PTR [rcx+rax*4]
   18f7a:	add    eax,DWORD PTR [rcx+rdx*4]
   18f7d:	imul   eax,DWORD PTR [rsp+0x5c]
   18f82:	sar    eax,0x10
   18f85:	push   rax
   18f86:	push   QWORD PTR [rsp+0x68]
   18f8a:	push   QWORD PTR [rsp+0x60]
   18f8e:	mov    ecx,DWORD PTR [rsp+0x58]
   18f92:	mov    edx,DWORD PTR [rsp+0x50]
   18f96:	mov    esi,DWORD PTR [rsp+0x54]
   18f9a:	mov    DWORD PTR [rsp+0x38],edi
   18f9e:	mov    DWORD PTR [rsp+0x3c],r10d
   18fa3:	call   18600 <AddUpSADQuarter>
   18fa8:	mov    DWORD PTR [rsp+0x48],eax
   18fac:	mov    edi,eax
   18fae:	mov    rax,QWORD PTR [rip+0x7195b]        # 8a910 <SearchState>
   18fb5:	add    rsp,0x30
   18fb9:	cmp    r14d,edi
   18fbc:	mov    edi,DWORD PTR [rsp+0x8]
   18fc0:	mov    rax,QWORD PTR [rax+0x18]
   18fc4:	mov    BYTE PTR [rax+0x3],0x1
   18fc8:	movsx  eax,WORD PTR [r13+0x0]
   18fcd:	jle    18fd9 <FastSubPelBlockMotionSearch+0x559>
   18fcf:	mov    r10d,DWORD PTR [rsp+0xc]
   18fd4:	jmp    18c17 <FastSubPelBlockMotionSearch+0x197>
   18fd9:	mov    DWORD PTR [rsp+0x18],r14d
   18fde:	xor    r10d,r10d
   18fe1:	xor    r12d,r12d
   18fe4:	jmp    18c17 <FastSubPelBlockMotionSearch+0x197>
   18fe9:	movsx  eax,WORD PTR [r13+0x0]
   18fee:	jmp    18c21 <FastSubPelBlockMotionSearch+0x1a1>
   18ff3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18ffe:	xchg   ax,ax

0000000000019000 <decide_intrabk_SAD>:
   19000:	endbr64 
   19004:	mov    rax,QWORD PTR [rip+0x6f5a5]        # 885b0 <img>
   1900b:	mov    r10d,DWORD PTR [rax+0x18]
   1900f:	test   r10d,r10d
   19012:	je     19057 <decide_intrabk_SAD+0x57>
   19014:	cmp    QWORD PTR [rax+0x98],0x0
   1901c:	jne    19060 <decide_intrabk_SAD+0x60>
   1901e:	mov    DWORD PTR [rip+0x71898],0x0        # 8a8c0 <flag_intra_SAD>
   19028:	ret    
   19029:	nop    DWORD PTR [rax+0x0]
   19030:	mov    r8d,DWORD PTR [rcx+rdx*4]
   19034:	mov    eax,0x1
   19039:	test   r8d,r8d
   1903c:	jne    19051 <decide_intrabk_SAD+0x51>
   1903e:	mov    edi,DWORD PTR [rcx+rsi*1-0x4]
   19042:	test   edi,edi
   19044:	jne    19051 <decide_intrabk_SAD+0x51>
   19046:	mov    edx,DWORD PTR [rcx+rsi*1+0x4]
   1904a:	xor    eax,eax
   1904c:	test   edx,edx
   1904e:	setne  al
   19051:	mov    DWORD PTR [rip+0x71869],eax        # 8a8c0 <flag_intra_SAD>
   19057:	ret    
   19058:	nop    DWORD PTR [rax+rax*1+0x0]
   19060:	mov    edx,DWORD PTR [rax+0x98]
   19066:	mov    rcx,QWORD PTR [rip+0x718ab]        # 8a918 <flag_intra>
   1906d:	test   edx,edx
   1906f:	je     190a0 <decide_intrabk_SAD+0xa0>
   19071:	sar    edx,0x4
   19074:	mov    r9d,DWORD PTR [rax+0x9c]
   1907b:	movsxd rdx,edx
   1907e:	lea    rsi,[rdx*4+0x0]
   19086:	test   r9d,r9d
   19089:	jne    19030 <decide_intrabk_SAD+0x30>
   1908b:	mov    eax,DWORD PTR [rcx+rsi*1-0x4]
   1908f:	mov    DWORD PTR [rip+0x7182b],eax        # 8a8c0 <flag_intra_SAD>
   19095:	ret    
   19096:	nop    WORD PTR cs:[rax+rax*1+0x0]
   190a0:	mov    eax,DWORD PTR [rcx]
   190a2:	mov    DWORD PTR [rip+0x71818],eax        # 8a8c0 <flag_intra_SAD>
   190a8:	ret    
   190a9:	nop    DWORD PTR [rax+0x0]

00000000000190b0 <skip_intrabk_SAD>:
   190b0:	endbr64 
   190b4:	push   rbx
   190b5:	mov    ebx,esi
   190b7:	mov    rsi,QWORD PTR [rip+0x6f4f2]        # 885b0 <img>
   190be:	mov    edx,DWORD PTR [rsi]
   190c0:	test   edx,edx
   190c2:	jle    190e4 <skip_intrabk_SAD+0x34>
   190c4:	mov    eax,DWORD PTR [rsi+0x98]
   190ca:	lea    edx,[rdi-0x9]
   190cd:	xor    ecx,ecx
   190cf:	sar    eax,0x4
   190d2:	cmp    edx,0x1
   190d5:	mov    rdx,QWORD PTR [rip+0x7183c]        # 8a918 <flag_intra>
   190dc:	cdqe   
   190de:	setbe  cl
   190e1:	mov    DWORD PTR [rdx+rax*4],ecx
   190e4:	mov    eax,DWORD PTR [rsi+0x18]
   190e7:	test   eax,eax
   190e9:	je     190f3 <skip_intrabk_SAD+0x43>
   190eb:	sub    edi,0x9
   190ee:	cmp    edi,0x1
   190f1:	jbe    190f5 <skip_intrabk_SAD+0x45>
   190f3:	pop    rbx
   190f4:	ret    
   190f5:	lea    eax,[rbx-0x1]
   190f8:	mov    r11,QWORD PTR [rip+0x71769]        # 8a868 <all_mincost>
   190ff:	xor    r9d,r9d
   19102:	lea    r10,[rax*8+0x8]
   1910a:	xor    r8d,r8d
   1910d:	mov    edi,0x8
   19112:	nop    WORD PTR [rax+rax*1+0x0]
   19118:	xor    ecx,ecx
   1911a:	test   ebx,ebx
   1911c:	jle    1915c <skip_intrabk_SAD+0xac>
   1911e:	xchg   ax,ax
   19120:	mov    edx,DWORD PTR [rsi+0x98]
   19126:	mov    eax,DWORD PTR [rsi+0x9c]
   1912c:	sar    edx,0x2
   1912f:	sar    eax,0x2
   19132:	add    edx,r9d
   19135:	add    eax,r8d
   19138:	movsxd rdx,edx
   1913b:	cdqe   
   1913d:	mov    rdx,QWORD PTR [r11+rdx*8]
   19141:	mov    rax,QWORD PTR [rdx+rax*8]
   19145:	mov    rax,QWORD PTR [rax+rcx*1]
   19149:	add    rcx,0x8
   1914d:	mov    rax,QWORD PTR [rax+rdi*1]
   19151:	mov    DWORD PTR [rax],0x0
   19157:	cmp    r10,rcx
   1915a:	jne    19120 <skip_intrabk_SAD+0x70>
   1915c:	add    rdi,0x8
   19160:	cmp    rdi,0x40
   19164:	jne    19118 <skip_intrabk_SAD+0x68>
   19166:	add    r8d,0x1
   1916a:	cmp    r8d,0x4
   1916e:	jne    1910d <skip_intrabk_SAD+0x5d>
   19170:	add    r9d,0x1
   19174:	cmp    r9d,0x4
   19178:	jne    1910a <skip_intrabk_SAD+0x5a>
   1917a:	pop    rbx
   1917b:	ret    
   1917c:	nop    DWORD PTR [rax+0x0]

0000000000019180 <error>:
   19180:	endbr64 
   19184:	push   rbp
   19185:	mov    rcx,rdi
   19188:	mov    rdi,QWORD PTR [rip+0x6f711]        # 888a0 <stderr@@GLIBC_2.2.5>
   1918f:	mov    ebp,esi
   19191:	lea    rdx,[rip+0x52297]        # 6b42f <maxpos+0x12f>
   19198:	mov    esi,0x1
   1919d:	xor    eax,eax
   1919f:	call   4500 <__fprintf_chk@plt>
   191a4:	xor    eax,eax
   191a6:	call   33570 <flush_dpb>
   191ab:	mov    edi,ebp
   191ad:	call   44e0 <exit@plt>
   191b2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   191bd:	nop    DWORD PTR [rax]

00000000000191c0 <write_PPS>:
   191c0:	endbr64 
   191c4:	push   r12
   191c6:	mov    r12d,edi
   191c9:	mov    edi,esi
   191cb:	push   rbp
   191cc:	sub    rsp,0x8
   191d0:	call   48e80 <GeneratePic_parameter_set_NALU>
   191d5:	mov    rbp,rax
   191d8:	mov    rdi,rax
   191db:	call   QWORD PTR [rip+0x9e2bf]        # b74a0 <WriteNALU>
   191e1:	mov    rdi,rbp
   191e4:	add    r12d,eax
   191e7:	call   468a0 <FreeNALU>
   191ec:	add    rsp,0x8
   191f0:	mov    eax,r12d
   191f3:	pop    rbp
   191f4:	pop    r12
   191f6:	ret    
   191f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000019200 <start_sequence>:
   19200:	endbr64 
   19204:	push   r13
   19206:	push   r12
   19208:	push   rbp
   19209:	push   rbx
   1920a:	sub    rsp,0x8
   1920e:	mov    rdi,QWORD PTR [rip+0x6f3a3]        # 885b8 <input>
   19215:	cmp    DWORD PTR [rdi+0x3c],0x1
   19219:	mov    r9d,DWORD PTR [rdi+0x938]
   19220:	sbb    r12d,r12d
   19223:	and    r12d,0xfffffffe
   19227:	add    r12d,0x3
   1922b:	test   r9d,r9d
   1922e:	je     192a0 <start_sequence+0xa0>
   19230:	cmp    r9d,0x1
   19234:	jne    192bc <start_sequence+0xbc>
   1923a:	add    rdi,0x1a8
   19241:	call   5e300 <OpenRTPFile>
   19246:	lea    rax,[rip+0x44ef3]        # 5e140 <WriteRTPNALU>
   1924d:	mov    QWORD PTR [rip+0x9e24c],rax        # b74a0 <WriteNALU>
   19254:	xor    eax,eax
   19256:	xor    ebx,ebx
   19258:	call   488e0 <GenerateSeq_parameter_set_NALU>
   1925d:	mov    r13,rax
   19260:	mov    rdi,rax
   19263:	call   QWORD PTR [rip+0x9e237]        # b74a0 <WriteNALU>
   19269:	mov    rdi,r13
   1926c:	mov    ebp,eax
   1926e:	call   468a0 <FreeNALU>
   19273:	mov    esi,ebx
   19275:	mov    edi,ebp
   19277:	add    ebx,0x1
   1927a:	call   191c0 <write_PPS>
   1927f:	mov    ebp,eax
   19281:	cmp    r12d,ebx
   19284:	jne    19273 <start_sequence+0x73>
   19286:	mov    rax,QWORD PTR [rip+0x6f31b]        # 885a8 <stats>
   1928d:	mov    DWORD PTR [rax+0x5d4],ebp
   19293:	add    rsp,0x8
   19297:	xor    eax,eax
   19299:	pop    rbx
   1929a:	pop    rbp
   1929b:	pop    r12
   1929d:	pop    r13
   1929f:	ret    
   192a0:	add    rdi,0x1a8
   192a7:	call   4d80 <OpenAnnexbFile>
   192ac:	lea    rax,[rip+0xfffffffffffeba9d]        # 4d50 <WriteAnnexbNALU>
   192b3:	mov    QWORD PTR [rip+0x9e1e6],rax        # b74a0 <WriteNALU>
   192ba:	jmp    19254 <start_sequence+0x54>
   192bc:	mov    esi,0x12c
   192c1:	lea    rdi,[rip+0x9bcd8]        # b4fa0 <errortext>
   192c8:	mov    ecx,0x12c
   192cd:	xor    eax,eax
   192cf:	lea    r8,[rip+0x59b8a]        # 72e60 <quant_coef+0x1a0>
   192d6:	mov    edx,0x1
   192db:	call   42c0 <__snprintf_chk@plt>
   192e0:	mov    esi,0x1
   192e5:	lea    rdi,[rip+0x9bcb4]        # b4fa0 <errortext>
   192ec:	call   19180 <error>
   192f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   192fc:	nop    DWORD PTR [rax+0x0]

0000000000019300 <terminate_sequence>:
   19300:	endbr64 
   19304:	sub    rsp,0x8
   19308:	mov    rax,QWORD PTR [rip+0x6f2a9]        # 885b8 <input>
   1930f:	mov    r9d,DWORD PTR [rax+0x938]
   19316:	test   r9d,r9d
   19319:	je     19330 <terminate_sequence+0x30>
   1931b:	cmp    r9d,0x1
   1931f:	jne    19341 <terminate_sequence+0x41>
   19321:	xor    eax,eax
   19323:	call   5e340 <CloseRTPFile>
   19328:	xor    eax,eax
   1932a:	add    rsp,0x8
   1932e:	ret    
   1932f:	nop
   19330:	xor    eax,eax
   19332:	call   4dc0 <CloseAnnexbFile>
   19337:	mov    eax,0x1
   1933c:	add    rsp,0x8
   19340:	ret    
   19341:	mov    esi,0x12c
   19346:	lea    rdi,[rip+0x9bc53]        # b4fa0 <errortext>
   1934d:	mov    ecx,0x12c
   19352:	xor    eax,eax
   19354:	lea    r8,[rip+0x59b05]        # 72e60 <quant_coef+0x1a0>
   1935b:	mov    edx,0x1
   19360:	call   42c0 <__snprintf_chk@plt>
   19365:	mov    esi,0x1
   1936a:	lea    rdi,[rip+0x9bc2f]        # b4fa0 <errortext>
   19371:	call   19180 <error>
   19376:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019380 <FmoInit>:
   19380:	endbr64 
   19384:	push   r15
   19386:	push   r14
   19388:	push   r13
   1938a:	push   r12
   1938c:	mov    r12,rdx
   1938f:	push   rbp
   19390:	mov    rbp,rdi
   19393:	push   rbx
   19394:	mov    rbx,rsi
   19397:	sub    rsp,0x18
   1939b:	mov    eax,DWORD PTR [rdi+0x11b18]
   193a1:	imul   eax,DWORD PTR [rdi+0x11b14]
   193a8:	mov    QWORD PTR [rip+0x6f66d],0xffffffffffffffff        # 88a20 <FirstMBInSlice>
   193b3:	mov    QWORD PTR [rip+0x6f66a],0xffffffffffffffff        # 88a28 <FirstMBInSlice+0x8>
   193be:	cmp    DWORD PTR [rsi+0x40],0x6
   193c2:	mov    QWORD PTR [rip+0x6f663],0xffffffffffffffff        # 88a30 <FirstMBInSlice+0x10>
   193cd:	mov    QWORD PTR [rip+0x6f660],0xffffffffffffffff        # 88a38 <FirstMBInSlice+0x18>
   193d8:	mov    DWORD PTR [rip+0x71582],eax        # 8a960 <PicSizeInMapUnits>
   193de:	je     19598 <FmoInit+0x218>
   193e4:	mov    rdi,QWORD PTR [rip+0x6f615]        # 88a00 <MapUnitToSliceGroupMap>
   193eb:	test   rdi,rdi
   193ee:	je     193f5 <FmoInit+0x75>
   193f0:	call   42d0 <free@plt>
   193f5:	mov    r14d,DWORD PTR [rip+0x71564]        # 8a960 <PicSizeInMapUnits>
   193fc:	mov    esi,0x1
   19401:	mov    rdi,r14
   19404:	mov    r13,r14
   19407:	call   4400 <calloc@plt>
   1940c:	mov    QWORD PTR [rip+0x6f5ed],rax        # 88a00 <MapUnitToSliceGroupMap>
   19413:	mov    rcx,rax
   19416:	test   rax,rax
   19419:	je     19a39 <FmoInit+0x6b9>
   1941f:	mov    esi,DWORD PTR [rbx+0x3c]
   19422:	test   esi,esi
   19424:	je     194c0 <FmoInit+0x140>
   1942a:	mov    r8d,DWORD PTR [rbx+0x40]
   1942e:	cmp    r8d,0x6
   19432:	ja     19a1b <FmoInit+0x69b>
   19438:	lea    rdi,[rip+0x59b2d]        # 72f6c <quant_coef+0x2ac>
   1943f:	mov    edx,r8d
   19442:	movsxd rax,DWORD PTR [rdi+rdx*4]
   19446:	add    rax,rdi
   19449:	notrack jmp rax
   1944c:	nop    DWORD PTR [rax+0x0]
   19450:	mov    eax,DWORD PTR [rbx+0xa8]
   19456:	mov    edx,r14d
   19459:	lea    edi,[rax+0x1]
   1945c:	mov    eax,DWORD PTR [rbx+0xa4]
   19462:	imul   edi,DWORD PTR [rbp+0x11bcc]
   19469:	cmp    edi,r14d
   1946c:	cmova  edi,r14d
   19470:	sub    edx,edi
   19472:	test   eax,eax
   19474:	cmovne edi,edx
   19477:	test   r14d,r14d
   1947a:	je     194c0 <FmoInit+0x140>
   1947c:	xor    esi,esi
   1947e:	mov    r9d,0x1
   19484:	jmp    1949d <FmoInit+0x11d>
   19486:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19490:	mov    eax,DWORD PTR [rbx+0xa4]
   19496:	mov    rcx,QWORD PTR [rip+0x6f563]        # 88a00 <MapUnitToSliceGroupMap>
   1949d:	mov    r8d,r9d
   194a0:	mov    edx,esi
   194a2:	sub    r8d,eax
   194a5:	cmp    edi,esi
   194a7:	cmovbe eax,r8d
   194ab:	add    esi,0x1
   194ae:	mov    BYTE PTR [rcx+rdx*1],al
   194b1:	cmp    esi,DWORD PTR [rip+0x714a9]        # 8a960 <PicSizeInMapUnits>
   194b7:	jb     19490 <FmoInit+0x110>
   194b9:	nop    DWORD PTR [rax+0x0]
   194c0:	mov    rdi,QWORD PTR [rip+0x6f541]        # 88a08 <MBAmap>
   194c7:	test   rdi,rdi
   194ca:	je     194d1 <FmoInit+0x151>
   194cc:	call   42d0 <free@plt>
   194d1:	mov    r13d,DWORD PTR [rbp+0x11b24]
   194d8:	mov    rdi,r13
   194db:	mov    rbx,r13
   194de:	call   4460 <malloc@plt>
   194e3:	mov    QWORD PTR [rip+0x6f51e],rax        # 88a08 <MBAmap>
   194ea:	mov    rcx,rax
   194ed:	test   rax,rax
   194f0:	je     19a57 <FmoInit+0x6d7>
   194f6:	mov    eax,DWORD PTR [r12+0x47c]
   194fe:	test   eax,eax
   19500:	je     19548 <FmoInit+0x1c8>
   19502:	xor    eax,eax
   19504:	test   ebx,ebx
   19506:	jne    19517 <FmoInit+0x197>
   19508:	jmp    19533 <FmoInit+0x1b3>
   1950a:	nop    WORD PTR [rax+rax*1+0x0]
   19510:	mov    rcx,QWORD PTR [rip+0x6f4f1]        # 88a08 <MBAmap>
   19517:	mov    rsi,QWORD PTR [rip+0x6f4e2]        # 88a00 <MapUnitToSliceGroupMap>
   1951e:	mov    edx,eax
   19520:	add    eax,0x1
   19523:	movzx  esi,BYTE PTR [rsi+rdx*1]
   19527:	mov    BYTE PTR [rcx+rdx*1],sil
   1952b:	cmp    eax,DWORD PTR [rbp+0x11b24]
   19531:	jb     19510 <FmoInit+0x190>
   19533:	add    rsp,0x18
   19537:	xor    eax,eax
   19539:	pop    rbx
   1953a:	pop    rbp
   1953b:	pop    r12
   1953d:	pop    r13
   1953f:	pop    r14
   19541:	pop    r15
   19543:	ret    
   19544:	nop    DWORD PTR [rax+0x0]
   19548:	mov    eax,DWORD PTR [rbp+0x11afc]
   1954e:	test   eax,eax
   19550:	jne    19502 <FmoInit+0x182>
   19552:	mov    esi,DWORD PTR [r12+0x480]
   1955a:	test   esi,esi
   1955c:	je     195c0 <FmoInit+0x240>
   1955e:	test   r13d,r13d
   19561:	jne    1956f <FmoInit+0x1ef>
   19563:	jmp    19533 <FmoInit+0x1b3>
   19565:	nop    DWORD PTR [rax]
   19568:	mov    rcx,QWORD PTR [rip+0x6f499]        # 88a08 <MBAmap>
   1956f:	mov    rsi,QWORD PTR [rip+0x6f48a]        # 88a00 <MapUnitToSliceGroupMap>
   19576:	mov    edx,eax
   19578:	shr    edx,1
   1957a:	movzx  esi,BYTE PTR [rsi+rdx*1]
   1957e:	mov    edx,eax
   19580:	add    eax,0x1
   19583:	mov    BYTE PTR [rcx+rdx*1],sil
   19587:	cmp    eax,DWORD PTR [rbp+0x11b24]
   1958d:	jb     19568 <FmoInit+0x1e8>
   1958f:	jmp    19533 <FmoInit+0x1b3>
   19591:	nop    DWORD PTR [rax+0x0]
   19598:	mov    edi,DWORD PTR [rsi+0xac]
   1959e:	lea    edx,[rdi+0x1]
   195a1:	cmp    eax,edx
   195a3:	je     193e4 <FmoInit+0x64>
   195a9:	mov    esi,0x1f4
   195ae:	lea    rdi,[rip+0x598d3]        # 72e88 <quant_coef+0x1c8>
   195b5:	call   19180 <error>
   195ba:	jmp    193e4 <FmoInit+0x64>
   195bf:	nop
   195c0:	test   r13d,r13d
   195c3:	jne    195d7 <FmoInit+0x257>
   195c5:	jmp    19533 <FmoInit+0x1b3>
   195ca:	nop    WORD PTR [rax+rax*1+0x0]
   195d0:	mov    rcx,QWORD PTR [rip+0x6f431]        # 88a08 <MBAmap>
   195d7:	mov    edi,DWORD PTR [rbp+0x11b14]
   195dd:	mov    eax,esi
   195df:	xor    edx,edx
   195e1:	lea    r8d,[rdi+rdi*1]
   195e5:	div    r8d
   195e8:	xor    edx,edx
   195ea:	imul   eax,edi
   195ed:	mov    r8d,eax
   195f0:	mov    eax,esi
   195f2:	div    edi
   195f4:	lea    eax,[r8+rdx*1]
   195f8:	mov    rdx,QWORD PTR [rip+0x6f401]        # 88a00 <MapUnitToSliceGroupMap>
   195ff:	movzx  edx,BYTE PTR [rdx+rax*1]
   19603:	mov    eax,esi
   19605:	add    esi,0x1
   19608:	mov    BYTE PTR [rcx+rax*1],dl
   1960b:	cmp    esi,DWORD PTR [rbp+0x11b24]
   19611:	jb     195d0 <FmoInit+0x250>
   19613:	jmp    19533 <FmoInit+0x1b3>
   19618:	nop    DWORD PTR [rax+rax*1+0x0]
   19620:	mov    r9d,0x1
   19626:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19630:	xor    edx,edx
   19632:	nop    WORD PTR [rax+rax*1+0x0]
   19638:	cmp    r8d,r13d
   1963b:	jae    194c0 <FmoInit+0x140>
   19641:	mov    edi,r9d
   19644:	mov    ecx,DWORD PTR [rbx+rdx*4+0x44]
   19648:	mov    eax,r8d
   1964b:	sub    edi,r8d
   1964e:	jmp    19671 <FmoInit+0x2f1>
   19650:	mov    rsi,QWORD PTR [rip+0x6f3a9]        # 88a00 <MapUnitToSliceGroupMap>
   19657:	mov    ecx,eax
   19659:	mov    BYTE PTR [rsi+rcx*1],dl
   1965c:	mov    ecx,DWORD PTR [rbx+rdx*4+0x44]
   19660:	lea    esi,[rdi+rax*1]
   19663:	mov    r13d,DWORD PTR [rip+0x712f6]        # 8a960 <PicSizeInMapUnits>
   1966a:	cmp    ecx,esi
   1966c:	jb     19676 <FmoInit+0x2f6>
   1966e:	add    eax,0x1
   19671:	cmp    eax,r13d
   19674:	jb     19650 <FmoInit+0x2d0>
   19676:	lea    r8d,[rcx+r8*1+0x1]
   1967b:	add    rdx,0x1
   1967f:	cmp    DWORD PTR [rbx+0x3c],edx
   19682:	jae    19638 <FmoInit+0x2b8>
   19684:	cmp    r8d,r13d
   19687:	jb     19630 <FmoInit+0x2b0>
   19689:	jmp    194c0 <FmoInit+0x140>
   1968e:	xchg   ax,ax
   19690:	mov    eax,DWORD PTR [rbx+0xa8]
   19696:	mov    esi,DWORD PTR [rbx+0xa4]
   1969c:	lea    r8d,[rax+0x1]
   196a0:	imul   r8d,DWORD PTR [rbp+0x11bcc]
   196a8:	cmp    r8d,r14d
   196ab:	cmova  r8d,r14d
   196af:	test   esi,esi
   196b1:	je     196b9 <FmoInit+0x339>
   196b3:	sub    r13d,r8d
   196b6:	mov    r8d,r13d
   196b9:	mov    edx,DWORD PTR [rbp+0x11b14]
   196bf:	xor    edi,edi
   196c1:	xor    esi,esi
   196c3:	mov    r11d,0x1
   196c9:	test   edx,edx
   196cb:	je     194c0 <FmoInit+0x140>
   196d1:	nop    DWORD PTR [rax+0x0]
   196d8:	mov    ecx,DWORD PTR [rbp+0x11b18]
   196de:	xor    eax,eax
   196e0:	lea    r9d,[rdi+0x1]
   196e4:	test   ecx,ecx
   196e6:	je     1972e <FmoInit+0x3ae>
   196e8:	nop    DWORD PTR [rax+rax*1+0x0]
   196f0:	imul   edx,eax
   196f3:	lea    r14d,[rax+rdi*1]
   196f7:	mov    r13d,r11d
   196fa:	lea    r10d,[r9+rax*1]
   196fe:	lea    ecx,[rdx+rsi*1]
   19701:	mov    edx,DWORD PTR [rbx+0xa4]
   19707:	add    rcx,QWORD PTR [rip+0x6f2f2]        # 88a00 <MapUnitToSliceGroupMap>
   1970e:	sub    r13d,edx
   19711:	cmp    r8d,r14d
   19714:	cmova  edx,r13d
   19718:	add    eax,0x1
   1971b:	mov    BYTE PTR [rcx],dl
   1971d:	mov    edx,DWORD PTR [rbp+0x11b14]
   19723:	cmp    eax,DWORD PTR [rbp+0x11b18]
   19729:	jb     196f0 <FmoInit+0x370>
   1972b:	mov    edi,r10d
   1972e:	add    esi,0x1
   19731:	cmp    esi,edx
   19733:	jb     196d8 <FmoInit+0x358>
   19735:	jmp    194c0 <FmoInit+0x140>
   1973a:	nop    WORD PTR [rax+rax*1+0x0]
   19740:	xor    eax,eax
   19742:	test   r14d,r14d
   19745:	jne    19757 <FmoInit+0x3d7>
   19747:	jmp    194c0 <FmoInit+0x140>
   1974c:	nop    DWORD PTR [rax+0x0]
   19750:	mov    rcx,QWORD PTR [rip+0x6f2a9]        # 88a00 <MapUnitToSliceGroupMap>
   19757:	mov    rsi,QWORD PTR [rbx+0xb0]
   1975e:	mov    edx,eax
   19760:	add    eax,0x1
   19763:	movzx  esi,BYTE PTR [rsi+rdx*1]
   19767:	mov    BYTE PTR [rcx+rdx*1],sil
   1976b:	cmp    eax,DWORD PTR [rip+0x711ef]        # 8a960 <PicSizeInMapUnits>
   19771:	jb     19750 <FmoInit+0x3d0>
   19773:	jmp    194c0 <FmoInit+0x140>
   19778:	nop    DWORD PTR [rax+rax*1+0x0]
   19780:	xor    eax,eax
   19782:	test   r14d,r14d
   19785:	jne    19797 <FmoInit+0x417>
   19787:	jmp    197ab <FmoInit+0x42b>
   19789:	nop    DWORD PTR [rax+0x0]
   19790:	mov    rcx,QWORD PTR [rip+0x6f269]        # 88a00 <MapUnitToSliceGroupMap>
   19797:	mov    edx,eax
   19799:	add    eax,0x1
   1979c:	mov    BYTE PTR [rcx+rdx*1],sil
   197a0:	cmp    eax,DWORD PTR [rip+0x711ba]        # 8a960 <PicSizeInMapUnits>
   197a6:	mov    esi,DWORD PTR [rbx+0x3c]
   197a9:	jb     19790 <FmoInit+0x410>
   197ab:	sub    esi,0x1
   197ae:	mov    r11d,esi
   197b1:	js     194c0 <FmoInit+0x140>
   197b7:	movsxd rax,esi
   197ba:	lea    rbx,[rbx+rax*4+0x64]
   197bf:	nop
   197c0:	mov    ecx,DWORD PTR [rbp+0x11b14]
   197c6:	mov    eax,DWORD PTR [rbx]
   197c8:	xor    edx,edx
   197ca:	mov    r10d,r11d
   197cd:	div    ecx
   197cf:	mov    esi,eax
   197d1:	mov    eax,DWORD PTR [rbx+0x20]
   197d4:	mov    edi,edx
   197d6:	xor    edx,edx
   197d8:	div    ecx
   197da:	cmp    esi,eax
   197dc:	ja     19817 <FmoInit+0x497>
   197de:	xchg   ax,ax
   197e0:	mov    ecx,edi
   197e2:	cmp    edi,edx
   197e4:	ja     19810 <FmoInit+0x490>
   197e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   197f0:	mov    r8d,DWORD PTR [rbp+0x11b14]
   197f7:	mov    r9,QWORD PTR [rip+0x6f202]        # 88a00 <MapUnitToSliceGroupMap>
   197fe:	imul   r8d,esi
   19802:	add    r8d,ecx
   19805:	add    ecx,0x1
   19808:	mov    BYTE PTR [r9+r8*1],r10b
   1980c:	cmp    edx,ecx
   1980e:	jae    197f0 <FmoInit+0x470>
   19810:	add    esi,0x1
   19813:	cmp    eax,esi
   19815:	jae    197e0 <FmoInit+0x460>
   19817:	sub    r11d,0x1
   1981b:	sub    rbx,0x4
   1981f:	cmp    r11d,0xffffffff
   19823:	jne    197c0 <FmoInit+0x440>
   19825:	jmp    194c0 <FmoInit+0x140>
   1982a:	nop    WORD PTR [rax+rax*1+0x0]
   19830:	mov    eax,DWORD PTR [rbx+0xa8]
   19836:	add    eax,0x1
   19839:	imul   eax,DWORD PTR [rbp+0x11bcc]
   19840:	cmp    eax,r14d
   19843:	cmova  eax,r14d
   19847:	mov    DWORD PTR [rsp+0x8],eax
   1984b:	test   r14d,r14d
   1984e:	je     194c0 <FmoInit+0x140>
   19854:	xor    eax,eax
   19856:	jmp    19867 <FmoInit+0x4e7>
   19858:	nop    DWORD PTR [rax+rax*1+0x0]
   19860:	mov    rcx,QWORD PTR [rip+0x6f199]        # 88a00 <MapUnitToSliceGroupMap>
   19867:	mov    edx,eax
   19869:	add    eax,0x1
   1986c:	mov    BYTE PTR [rcx+rdx*1],0x2
   19870:	mov    edx,DWORD PTR [rip+0x710ea]        # 8a960 <PicSizeInMapUnits>
   19876:	cmp    eax,edx
   19878:	jb     19860 <FmoInit+0x4e0>
   1987a:	mov    eax,DWORD PTR [rbp+0x11b14]
   19880:	mov    r11d,DWORD PTR [rbx+0xa4]
   19887:	mov    r10d,DWORD PTR [rbp+0x11b18]
   1988e:	mov    esi,eax
   19890:	lea    r9d,[r11-0x1]
   19894:	sub    esi,r11d
   19897:	sub    r10d,r11d
   1989a:	shr    esi,1
   1989c:	shr    r10d,1
   1989f:	test   edx,edx
   198a1:	je     194c0 <FmoInit+0x140>
   198a7:	mov    DWORD PTR [rsp+0xc],r10d
   198ac:	mov    r15d,r10d
   198af:	mov    r13d,esi
   198b2:	mov    ecx,esi
   198b4:	xor    edi,edi
   198b6:	mov    r14d,0x1
   198bc:	jmp    198f4 <FmoInit+0x574>
   198be:	xchg   ax,ax
   198c0:	cmp    esi,ecx
   198c2:	jne    1991b <FmoInit+0x59b>
   198c4:	test   ecx,ecx
   198c6:	mov    eax,DWORD PTR [rbx+0xa4]
   198cc:	cmovle ecx,r14d
   198d0:	xor    r9d,r9d
   198d3:	lea    r11d,[rax+rax*1-0x1]
   198d8:	sub    ecx,0x1
   198db:	mov    esi,ecx
   198dd:	movzx  edx,dl
   198e0:	add    edi,edx
   198e2:	cmp    edi,DWORD PTR [rip+0x71078]        # 8a960 <PicSizeInMapUnits>
   198e8:	jae    194c0 <FmoInit+0x140>
   198ee:	mov    eax,DWORD PTR [rbp+0x11b14]
   198f4:	imul   eax,r10d
   198f8:	add    eax,esi
   198fa:	add    rax,QWORD PTR [rip+0x6f0ff]        # 88a00 <MapUnitToSliceGroupMap>
   19901:	movzx  r8d,BYTE PTR [rax]
   19905:	cmp    r8b,0x2
   19909:	sete   dl
   1990c:	jne    19915 <FmoInit+0x595>
   1990e:	cmp    DWORD PTR [rsp+0x8],edi
   19912:	setbe  BYTE PTR [rax]
   19915:	cmp    r9d,0xffffffff
   19919:	je     198c0 <FmoInit+0x540>
   1991b:	cmp    r9d,0x1
   1991f:	jne    199a0 <FmoInit+0x620>
   19921:	cmp    esi,r13d
   19924:	jne    199a0 <FmoInit+0x620>
   19926:	mov    eax,DWORD PTR [rbp+0x11b14]
   1992c:	add    r13d,0x1
   19930:	mov    r11d,r14d
   19933:	sub    eax,0x1
   19936:	cmp    eax,r13d
   19939:	cmovle r13d,eax
   1993d:	mov    eax,DWORD PTR [rbx+0xa4]
   19943:	xor    r9d,r9d
   19946:	add    eax,eax
   19948:	mov    esi,r13d
   1994b:	sub    r11d,eax
   1994e:	jmp    198dd <FmoInit+0x55d>
   19950:	xor    edi,edi
   19952:	test   r14d,r14d
   19955:	jne    1996a <FmoInit+0x5ea>
   19957:	jmp    194c0 <FmoInit+0x140>
   1995c:	nop    DWORD PTR [rax+0x0]
   19960:	mov    esi,DWORD PTR [rbx+0x3c]
   19963:	mov    rcx,QWORD PTR [rip+0x6f096]        # 88a00 <MapUnitToSliceGroupMap>
   1996a:	mov    eax,edi
   1996c:	xor    edx,edx
   1996e:	add    esi,0x1
   19971:	mov    r8d,edi
   19974:	div    DWORD PTR [rbp+0x11b14]
   1997a:	add    edi,0x1
   1997d:	imul   eax,esi
   19980:	shr    eax,1
   19982:	add    eax,edx
   19984:	xor    edx,edx
   19986:	div    esi
   19988:	mov    BYTE PTR [rcx+r8*1],dl
   1998c:	cmp    edi,DWORD PTR [rip+0x70fce]        # 8a960 <PicSizeInMapUnits>
   19992:	jb     19960 <FmoInit+0x5e0>
   19994:	jmp    194c0 <FmoInit+0x140>
   19999:	nop    DWORD PTR [rax+0x0]
   199a0:	cmp    r11d,0xffffffff
   199a4:	jne    199d0 <FmoInit+0x650>
   199a6:	cmp    r10d,r15d
   199a9:	jne    199d0 <FmoInit+0x650>
   199ab:	test   r15d,r15d
   199ae:	mov    eax,DWORD PTR [rbx+0xa4]
   199b4:	mov    r9d,r14d
   199b7:	cmovle r15d,r14d
   199bb:	xor    r11d,r11d
   199be:	add    eax,eax
   199c0:	sub    r15d,0x1
   199c4:	sub    r9d,eax
   199c7:	mov    r10d,r15d
   199ca:	jmp    198dd <FmoInit+0x55d>
   199cf:	nop
   199d0:	cmp    r11d,0x1
   199d4:	jne    19a10 <FmoInit+0x690>
   199d6:	mov    eax,DWORD PTR [rsp+0xc]
   199da:	cmp    r10d,eax
   199dd:	jne    19a10 <FmoInit+0x690>
   199df:	add    eax,0x1
   199e2:	mov    r8d,eax
   199e5:	mov    eax,DWORD PTR [rbp+0x11b18]
   199eb:	mov    r10d,r8d
   199ee:	sub    eax,0x1
   199f1:	cmp    eax,r8d
   199f4:	cmovle r10d,eax
   199f8:	mov    eax,DWORD PTR [rbx+0xa4]
   199fe:	xor    r11d,r11d
   19a01:	mov    DWORD PTR [rsp+0xc],r10d
   19a06:	lea    r9d,[rax+rax*1-0x1]
   19a0b:	jmp    198dd <FmoInit+0x55d>
   19a10:	add    esi,r9d
   19a13:	add    r10d,r11d
   19a16:	jmp    198dd <FmoInit+0x55d>
   19a1b:	mov    edi,0x1
   19a20:	mov    edx,r8d
   19a23:	lea    rsi,[rip+0x594e6]        # 72f10 <quant_coef+0x250>
   19a2a:	xor    eax,eax
   19a2c:	call   4490 <__printf_chk@plt>
   19a31:	or     edi,0xffffffff
   19a34:	call   44e0 <exit@plt>
   19a39:	mov    rdx,r14
   19a3c:	lea    rsi,[rip+0x5948d]        # 72ed0 <quant_coef+0x210>
   19a43:	mov    edi,0x1
   19a48:	xor    eax,eax
   19a4a:	call   4490 <__printf_chk@plt>
   19a4f:	or     edi,0xffffffff
   19a52:	call   44e0 <exit@plt>
   19a57:	mov    rdx,r13
   19a5a:	lea    rsi,[rip+0x594df]        # 72f40 <quant_coef+0x280>
   19a61:	jmp    19a43 <FmoInit+0x6c3>
   19a63:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19a6e:	xchg   ax,ax

0000000000019a70 <FmoUninit>:
   19a70:	endbr64 
   19a74:	sub    rsp,0x8
   19a78:	mov    rdi,QWORD PTR [rip+0x6ef89]        # 88a08 <MBAmap>
   19a7f:	test   rdi,rdi
   19a82:	je     19a94 <FmoUninit+0x24>
   19a84:	call   42d0 <free@plt>
   19a89:	mov    QWORD PTR [rip+0x6ef74],0x0        # 88a08 <MBAmap>
   19a94:	mov    rdi,QWORD PTR [rip+0x6ef65]        # 88a00 <MapUnitToSliceGroupMap>
   19a9b:	test   rdi,rdi
   19a9e:	je     19ab0 <FmoUninit+0x40>
   19aa0:	call   42d0 <free@plt>
   19aa5:	mov    QWORD PTR [rip+0x6ef50],0x0        # 88a00 <MapUnitToSliceGroupMap>
   19ab0:	add    rsp,0x8
   19ab4:	ret    
   19ab5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000019ac0 <FmoStartPicture>:
   19ac0:	endbr64 
   19ac4:	mov    rax,QWORD PTR [rip+0x6eae5]        # 885b0 <img>
   19acb:	mov    rdi,QWORD PTR [rip+0x6ef36]        # 88a08 <MBAmap>
   19ad2:	xor    ecx,ecx
   19ad4:	lea    r10,[rip+0x6ef45]        # 88a20 <FirstMBInSlice>
   19adb:	mov    r9d,DWORD PTR [rax+0x11b24]
   19ae2:	lea    r8d,[r9-0x1]
   19ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19af0:	test   r9d,r9d
   19af3:	jle    19b30 <FmoStartPicture+0x70>
   19af5:	xor    eax,eax
   19af7:	jmp    19b0c <FmoStartPicture+0x4c>
   19af9:	nop    DWORD PTR [rax+0x0]
   19b00:	lea    rdx,[rax+0x1]
   19b04:	cmp    rax,r8
   19b07:	je     19b30 <FmoStartPicture+0x70>
   19b09:	mov    rax,rdx
   19b0c:	movzx  edx,BYTE PTR [rdi+rax*1]
   19b10:	mov    esi,eax
   19b12:	cmp    edx,ecx
   19b14:	jne    19b00 <FmoStartPicture+0x40>
   19b16:	mov    DWORD PTR [r10+rcx*4],esi
   19b1a:	add    rcx,0x1
   19b1e:	cmp    rcx,0x8
   19b22:	jne    19af0 <FmoStartPicture+0x30>
   19b24:	xor    eax,eax
   19b26:	ret    
   19b27:	nop    WORD PTR [rax+rax*1+0x0]
   19b30:	mov    esi,0xffffffff
   19b35:	mov    DWORD PTR [r10+rcx*4],esi
   19b39:	add    rcx,0x1
   19b3d:	cmp    rcx,0x8
   19b41:	jne    19af0 <FmoStartPicture+0x30>
   19b43:	jmp    19b24 <FmoStartPicture+0x64>
   19b45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000019b50 <FmoEndPicture>:
   19b50:	endbr64 
   19b54:	xor    eax,eax
   19b56:	ret    
   19b57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000019b60 <FmoMB2SliceGroup>:
   19b60:	endbr64 
   19b64:	mov    rax,QWORD PTR [rip+0x6ee9d]        # 88a08 <MBAmap>
   19b6b:	movsxd rdi,edi
   19b6e:	movzx  eax,BYTE PTR [rax+rdi*1]
   19b72:	ret    
   19b73:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19b7e:	xchg   ax,ax

0000000000019b80 <FmoGetNextMBNr>:
   19b80:	endbr64 
   19b84:	mov    rdx,QWORD PTR [rip+0x6ee7d]        # 88a08 <MBAmap>
   19b8b:	movsxd rax,edi
   19b8e:	add    edi,0x1
   19b91:	movzx  esi,BYTE PTR [rdx+rax*1]
   19b95:	mov    rax,QWORD PTR [rip+0x6ea14]        # 885b0 <img>
   19b9c:	mov    ecx,DWORD PTR [rax+0x11b24]
   19ba2:	movsxd rax,edi
   19ba5:	jmp    19bbb <FmoGetNextMBNr+0x3b>
   19ba7:	nop    WORD PTR [rax+rax*1+0x0]
   19bb0:	add    rax,0x1
   19bb4:	cmp    BYTE PTR [rdx+rax*1-0x1],sil
   19bb9:	je     19bc8 <FmoGetNextMBNr+0x48>
   19bbb:	mov    r8d,eax
   19bbe:	cmp    ecx,eax
   19bc0:	jg     19bb0 <FmoGetNextMBNr+0x30>
   19bc2:	mov    r8d,0xffffffff
   19bc8:	mov    eax,r8d
   19bcb:	ret    
   19bcc:	nop    DWORD PTR [rax+0x0]

0000000000019bd0 <FmoGetPreviousMBNr>:
   19bd0:	endbr64 
   19bd4:	mov    rdx,QWORD PTR [rip+0x6ee2d]        # 88a08 <MBAmap>
   19bdb:	movsxd rax,edi
   19bde:	movzx  ecx,BYTE PTR [rdx+rax*1]
   19be2:	sub    edi,0x1
   19be5:	js     19c08 <FmoGetPreviousMBNr+0x38>
   19be7:	movsxd rax,edi
   19bea:	jmp    19bf8 <FmoGetPreviousMBNr+0x28>
   19bec:	nop    DWORD PTR [rax+0x0]
   19bf0:	sub    rax,0x1
   19bf4:	test   eax,eax
   19bf6:	js     19c08 <FmoGetPreviousMBNr+0x38>
   19bf8:	mov    r8d,eax
   19bfb:	cmp    BYTE PTR [rdx+rax*1],cl
   19bfe:	jne    19bf0 <FmoGetPreviousMBNr+0x20>
   19c00:	mov    eax,r8d
   19c03:	ret    
   19c04:	nop    DWORD PTR [rax+0x0]
   19c08:	mov    r8d,0xffffffff
   19c0e:	mov    eax,r8d
   19c11:	ret    
   19c12:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19c1d:	nop    DWORD PTR [rax]

0000000000019c20 <FmoGetFirstMBOfSliceGroup>:
   19c20:	endbr64 
   19c24:	mov    rax,QWORD PTR [rip+0x6e985]        # 885b0 <img>
   19c2b:	mov    eax,DWORD PTR [rax+0x11b24]
   19c31:	test   eax,eax
   19c33:	jle    19c68 <FmoGetFirstMBOfSliceGroup+0x48>
   19c35:	lea    esi,[rax-0x1]
   19c38:	mov    rcx,QWORD PTR [rip+0x6edc9]        # 88a08 <MBAmap>
   19c3f:	xor    eax,eax
   19c41:	jmp    19c54 <FmoGetFirstMBOfSliceGroup+0x34>
   19c43:	nop    DWORD PTR [rax+rax*1+0x0]
   19c48:	lea    rdx,[rax+0x1]
   19c4c:	cmp    rax,rsi
   19c4f:	je     19c68 <FmoGetFirstMBOfSliceGroup+0x48>
   19c51:	mov    rax,rdx
   19c54:	movzx  edx,BYTE PTR [rcx+rax*1]
   19c58:	mov    r8d,eax
   19c5b:	cmp    edi,edx
   19c5d:	jne    19c48 <FmoGetFirstMBOfSliceGroup+0x28>
   19c5f:	mov    eax,r8d
   19c62:	ret    
   19c63:	nop    DWORD PTR [rax+rax*1+0x0]
   19c68:	mov    r8d,0xffffffff
   19c6e:	mov    eax,r8d
   19c71:	ret    
   19c72:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19c7d:	nop    DWORD PTR [rax]

0000000000019c80 <FmoGetLastCodedMBOfSliceGroup>:
   19c80:	endbr64 
   19c84:	mov    rax,QWORD PTR [rip+0x6e925]        # 885b0 <img>
   19c8b:	mov    eax,DWORD PTR [rax+0x11b24]
   19c91:	test   eax,eax
   19c93:	jle    19cd0 <FmoGetLastCodedMBOfSliceGroup+0x50>
   19c95:	lea    ecx,[rax-0x1]
   19c98:	mov    rsi,QWORD PTR [rip+0x6ed69]        # 88a08 <MBAmap>
   19c9f:	xor    eax,eax
   19ca1:	mov    r8d,0xffffffff
   19ca7:	jmp    19cb3 <FmoGetLastCodedMBOfSliceGroup+0x33>
   19ca9:	nop    DWORD PTR [rax+0x0]
   19cb0:	mov    rax,rdx
   19cb3:	movzx  edx,BYTE PTR [rsi+rax*1]
   19cb7:	cmp    edi,edx
   19cb9:	lea    rdx,[rax+0x1]
   19cbd:	cmove  r8d,eax
   19cc1:	cmp    rax,rcx
   19cc4:	jne    19cb0 <FmoGetLastCodedMBOfSliceGroup+0x30>
   19cc6:	mov    eax,r8d
   19cc9:	ret    
   19cca:	nop    WORD PTR [rax+rax*1+0x0]
   19cd0:	mov    r8d,0xffffffff
   19cd6:	mov    eax,r8d
   19cd9:	ret    
   19cda:	nop    WORD PTR [rax+rax*1+0x0]

0000000000019ce0 <FmoSetLastMacroblockInSlice>:
   19ce0:	endbr64 
   19ce4:	mov    rsi,QWORD PTR [rip+0x6ed1d]        # 88a08 <MBAmap>
   19ceb:	movsxd rax,edi
   19cee:	add    edi,0x1
   19cf1:	movzx  r9d,BYTE PTR [rsi+rax*1]
   19cf6:	mov    rax,QWORD PTR [rip+0x6e8b3]        # 885b0 <img>
   19cfd:	mov    ecx,r9d
   19d00:	mov    r8d,DWORD PTR [rax+0x11b24]
   19d07:	movsxd rax,edi
   19d0a:	jmp    19d1a <FmoSetLastMacroblockInSlice+0x3a>
   19d0c:	nop    DWORD PTR [rax+0x0]
   19d10:	add    rax,0x1
   19d14:	cmp    BYTE PTR [rsi+rax*1-0x1],cl
   19d18:	je     19d26 <FmoSetLastMacroblockInSlice+0x46>
   19d1a:	mov    edx,eax
   19d1c:	cmp    r8d,eax
   19d1f:	jg     19d10 <FmoSetLastMacroblockInSlice+0x30>
   19d21:	mov    edx,0xffffffff
   19d26:	movsxd rax,r9d
   19d29:	lea    rcx,[rip+0x6ecf0]        # 88a20 <FirstMBInSlice>
   19d30:	mov    DWORD PTR [rcx+rax*4],edx
   19d33:	ret    
   19d34:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19d3f:	nop

0000000000019d40 <FmoGetFirstMacroblockInSlice>:
   19d40:	endbr64 
   19d44:	movsxd rdi,edi
   19d47:	lea    rax,[rip+0x6ecd2]        # 88a20 <FirstMBInSlice>
   19d4e:	mov    eax,DWORD PTR [rax+rdi*4]
   19d51:	ret    
   19d52:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19d5d:	nop    DWORD PTR [rax]

0000000000019d60 <FmoSliceGroupCompletelyCoded>:
   19d60:	endbr64 
   19d64:	movsxd rdi,edi
   19d67:	lea    rax,[rip+0x6ecb2]        # 88a20 <FirstMBInSlice>
   19d6e:	mov    eax,DWORD PTR [rax+rdi*4]
   19d71:	shr    eax,0x1f
   19d74:	ret    
   19d75:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19d7f:	nop

0000000000019d80 <SliceHeader>:
   19d80:	endbr64 
   19d84:	push   r15
   19d86:	push   r14
   19d88:	push   r13
   19d8a:	push   r12
   19d8c:	push   rbp
   19d8d:	push   rbx
   19d8e:	lea    rbx,[rip+0x70bdb]        # 8a970 <assignSE2partition>
   19d95:	sub    rsp,0x18
   19d99:	mov    rdx,QWORD PTR [rip+0x6e818]        # 885b8 <input>
   19da0:	mov    rax,QWORD PTR [rip+0x6e809]        # 885b0 <img>
   19da7:	movsxd rdx,DWORD PTR [rdx+0x93c]
   19dae:	mov    rdi,QWORD PTR [rax+0x3750]
   19db5:	mov    r10d,DWORD PTR [rax+0x11ad0]
   19dbc:	mov    esi,DWORD PTR [rax+0xc]
   19dbf:	mov    rdx,QWORD PTR [rbx+rdx*8]
   19dc3:	mov    QWORD PTR [rsp],rdi
   19dc7:	movsxd rcx,DWORD PTR [rdx]
   19dca:	mov    rdx,rcx
   19dcd:	shl    rdx,0x4
   19dd1:	sub    rdx,rcx
   19dd4:	mov    rcx,QWORD PTR [rdi+0x18]
   19dd8:	lea    r13,[rcx+rdx*8]
   19ddc:	test   r10d,r10d
   19ddf:	je     1a370 <SliceHeader+0x5f0>
   19de5:	sar    esi,1
   19de7:	mov    rdx,r13
   19dea:	lea    rdi,[rip+0x59197]        # 72f88 <quant_coef+0x2c8>
   19df1:	call   66950 <ue_v>
   19df6:	mov    ebp,eax
   19df8:	mov    rax,QWORD PTR [rip+0x6e7b1]        # 885b0 <img>
   19dff:	mov    esi,DWORD PTR [rax+0x18]
   19e02:	cmp    esi,0x3
   19e05:	ja     1a394 <SliceHeader+0x614>
   19e0b:	add    esi,0x5
   19e0e:	mov    rdx,r13
   19e11:	lea    rdi,[rip+0x591a2]        # 72fba <quant_coef+0x2fa>
   19e18:	call   66950 <ue_v>
   19e1d:	mov    rdx,r13
   19e20:	lea    rdi,[rip+0x591a2]        # 72fc9 <quant_coef+0x309>
   19e27:	add    ebp,eax
   19e29:	mov    rax,QWORD PTR [rip+0x86fd0]        # a0e00 <active_pps>
   19e30:	mov    esi,DWORD PTR [rax+0x4]
   19e33:	call   66950 <ue_v>
   19e38:	mov    rcx,r13
   19e3b:	lea    rsi,[rip+0x591a0]        # 72fe2 <quant_coef+0x322>
   19e42:	add    ebp,eax
   19e44:	mov    rax,QWORD PTR [rip+0x6e765]        # 885b0 <img>
   19e4b:	mov    edx,DWORD PTR [rax+0x11b10]
   19e51:	mov    eax,DWORD PTR [rip+0x9c011]        # b5e68 <log2_max_frame_num_minus4>
   19e57:	lea    edi,[rax+0x4]
   19e5a:	call   66ac0 <u_v>
   19e5f:	add    ebp,eax
   19e61:	mov    rax,QWORD PTR [rip+0x9c008]        # b5e70 <active_sps>
   19e68:	mov    ebx,DWORD PTR [rax+0x47c]
   19e6e:	test   ebx,ebx
   19e70:	je     1a740 <SliceHeader+0x9c0>
   19e76:	xor    ebx,ebx
   19e78:	mov    rax,QWORD PTR [rip+0x6e731]        # 885b0 <img>
   19e7f:	mov    rdx,QWORD PTR [rax+0x3748]
   19e86:	mov    r9d,DWORD PTR [rdx+0x4]
   19e8a:	test   r9d,r9d
   19e8d:	jne    1a710 <SliceHeader+0x990>
   19e93:	mov    edx,DWORD PTR [rax+0x11ad4]
   19e99:	test   edx,edx
   19e9b:	jne    19f04 <SliceHeader+0x184>
   19e9d:	mov    rdx,QWORD PTR [rip+0x9bfcc]        # b5e70 <active_sps>
   19ea4:	mov    edi,DWORD PTR [rip+0x86a96]        # a0940 <log2_max_pic_order_cnt_lsb_minus4>
   19eaa:	mov    r8d,DWORD PTR [rdx+0x47c]
   19eb1:	add    edi,0x4
   19eb4:	test   r8d,r8d
   19eb7:	je     1a0b0 <SliceHeader+0x330>
   19ebd:	mov    ecx,edi
   19ebf:	mov    edx,0xffffffff
   19ec4:	lea    rsi,[rip+0x5915d]        # 73028 <quant_coef+0x368>
   19ecb:	shl    edx,cl
   19ecd:	mov    rcx,r13
   19ed0:	not    edx
   19ed2:	and    edx,DWORD PTR [rax+0x11b00]
   19ed8:	mov    DWORD PTR [rax+0x11aec],edx
   19ede:	call   66ac0 <u_v>
   19ee3:	add    ebp,eax
   19ee5:	mov    rax,QWORD PTR [rip+0x6e6c4]        # 885b0 <img>
   19eec:	mov    edi,DWORD PTR [rax+0x11b2c]
   19ef2:	test   edi,edi
   19ef4:	je     19efe <SliceHeader+0x17e>
   19ef6:	test   ebx,ebx
   19ef8:	je     1aa00 <SliceHeader+0xc80>
   19efe:	mov    edx,DWORD PTR [rax+0x11ad4]
   19f04:	cmp    edx,0x1
   19f07:	je     1a618 <SliceHeader+0x898>
   19f0d:	mov    rdx,QWORD PTR [rip+0x6e6a4]        # 885b8 <input>
   19f14:	mov    edx,DWORD PTR [rdx+0xc84]
   19f1a:	test   edx,edx
   19f1c:	jne    1a7a0 <SliceHeader+0xa20>
   19f22:	mov    edx,DWORD PTR [rax+0x18]
   19f25:	cmp    edx,0x1
   19f28:	je     1a7ca <SliceHeader+0xa4a>
   19f2e:	cmp    edx,0x3
   19f31:	sete   cl
   19f34:	cmp    edx,0x1
   19f37:	jbe    1a018 <SliceHeader+0x298>
   19f3d:	test   cl,cl
   19f3f:	jne    1a018 <SliceHeader+0x298>
   19f45:	mov    rcx,QWORD PTR [rip+0x6e66c]        # 885b8 <input>
   19f4c:	cmp    edx,0x2
   19f4f:	jne    1a13d <SliceHeader+0x3bd>
   19f55:	mov    r10d,DWORD PTR [rax+0x11b30]
   19f5c:	test   r10d,r10d
   19f5f:	jne    1a26a <SliceHeader+0x4ea>
   19f65:	cmp    DWORD PTR [rcx+0x934],0x1
   19f6c:	je     1a5e8 <SliceHeader+0x868>
   19f72:	mov    rax,QWORD PTR [rsp]
   19f76:	mov    rdx,r13
   19f79:	lea    rdi,[rip+0x592f6]        # 73276 <quant_coef+0x5b6>
   19f80:	mov    esi,DWORD PTR [rax+0x4]
   19f83:	mov    rax,QWORD PTR [rip+0x86e76]        # a0e00 <active_pps>
   19f8a:	sub    esi,0x1a
   19f8d:	sub    esi,DWORD PTR [rax+0xc8]
   19f93:	call   669b0 <se_v>
   19f98:	lea    r12d,[rbp+rax*1+0x0]
   19f9d:	mov    rax,QWORD PTR [rip+0x6e60c]        # 885b0 <img>
   19fa4:	cmp    DWORD PTR [rax+0x18],0x3
   19fa8:	je     1a8b0 <SliceHeader+0xb30>
   19fae:	mov    rax,QWORD PTR [rip+0x86e4b]        # a0e00 <active_pps>
   19fb5:	mov    edi,DWORD PTR [rax+0xdc]
   19fbb:	test   edi,edi
   19fbd:	jne    1a6d0 <SliceHeader+0x950>
   19fc3:	mov    esi,DWORD PTR [rax+0x3c]
   19fc6:	test   esi,esi
   19fc8:	je     19fd9 <SliceHeader+0x259>
   19fca:	mov    edi,DWORD PTR [rax+0x40]
   19fcd:	lea    edx,[rdi-0x3]
   19fd0:	cmp    edx,0x2
   19fd3:	jbe    1aa28 <SliceHeader+0xca8>
   19fd9:	mov    rax,QWORD PTR [rip+0x6e5d8]        # 885b8 <input>
   19fe0:	mov    ecx,DWORD PTR [rax+0x93c]
   19fe6:	test   ecx,ecx
   19fe8:	je     1a003 <SliceHeader+0x283>
   19fea:	mov    rax,QWORD PTR [rip+0x6e5bf]        # 885b0 <img>
   19ff1:	mov    rdx,QWORD PTR [rax+0x3748]
   19ff8:	mov    edx,DWORD PTR [rdx+0x4]
   19ffb:	test   edx,edx
   19ffd:	je     1a950 <SliceHeader+0xbd0>
   1a003:	add    rsp,0x18
   1a007:	mov    eax,r12d
   1a00a:	pop    rbx
   1a00b:	pop    rbp
   1a00c:	pop    r12
   1a00e:	pop    r13
   1a010:	pop    r14
   1a012:	pop    r15
   1a014:	ret    
   1a015:	nop    DWORD PTR [rax]
   1a018:	mov    rsi,QWORD PTR [rip+0x86de1]        # a0e00 <active_pps>
   1a01f:	mov    r12d,DWORD PTR [rax+0x11940]
   1a026:	mov    edi,DWORD PTR [rsi+0xb8]
   1a02c:	lea    ebx,[rdi+0x1]
   1a02f:	test   edx,edx
   1a031:	je     1a100 <SliceHeader+0x380>
   1a037:	test   cl,cl
   1a039:	jne    1a100 <SliceHeader+0x380>
   1a03f:	cmp    r12d,ebx
   1a042:	je     1a9c8 <SliceHeader+0xc48>
   1a048:	mov    rdx,r13
   1a04b:	mov    esi,0x1
   1a050:	lea    rdi,[rip+0x592e9]        # 73340 <quant_coef+0x680>
   1a057:	call   66a40 <u_1>
   1a05c:	add    ebp,eax
   1a05e:	mov    rax,QWORD PTR [rip+0x6e54b]        # 885b0 <img>
   1a065:	mov    rdx,r13
   1a068:	lea    rdi,[rip+0x592f9]        # 73368 <quant_coef+0x6a8>
   1a06f:	mov    esi,DWORD PTR [rax+0x11940]
   1a075:	sub    esi,0x1
   1a078:	call   66950 <ue_v>
   1a07d:	add    ebp,eax
   1a07f:	mov    rax,QWORD PTR [rip+0x6e52a]        # 885b0 <img>
   1a086:	mov    edx,DWORD PTR [rax+0x18]
   1a089:	cmp    edx,0x1
   1a08c:	jne    19f45 <SliceHeader+0x1c5>
   1a092:	mov    esi,DWORD PTR [rax+0x11944]
   1a098:	mov    rdx,r13
   1a09b:	lea    rdi,[rip+0x592ee]        # 73390 <quant_coef+0x6d0>
   1a0a2:	sub    esi,0x1
   1a0a5:	call   66950 <ue_v>
   1a0aa:	add    ebp,eax
   1a0ac:	jmp    1a123 <SliceHeader+0x3a3>
   1a0ae:	xchg   ax,ax
   1a0b0:	test   ebx,ebx
   1a0b2:	je     19ebd <SliceHeader+0x13d>
   1a0b8:	mov    edx,DWORD PTR [rax+0x1c]
   1a0bb:	cmp    edx,0x1
   1a0be:	je     19ebd <SliceHeader+0x13d>
   1a0c4:	cmp    edx,0x2
   1a0c7:	je     1adb0 <SliceHeader+0x1030>
   1a0cd:	mov    edx,DWORD PTR [rax+0x11aec]
   1a0d3:	mov    rcx,r13
   1a0d6:	lea    rsi,[rip+0x58f4b]        # 73028 <quant_coef+0x368>
   1a0dd:	call   66ac0 <u_v>
   1a0e2:	add    ebp,eax
   1a0e4:	mov    rax,QWORD PTR [rip+0x6e4c5]        # 885b0 <img>
   1a0eb:	mov    edx,DWORD PTR [rax+0x11ad4]
   1a0f1:	jmp    19f04 <SliceHeader+0x184>
   1a0f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a100:	xor    esi,esi
   1a102:	cmp    r12d,ebx
   1a105:	lea    rdi,[rip+0x59234]        # 73340 <quant_coef+0x680>
   1a10c:	mov    rdx,r13
   1a10f:	setne  sil
   1a113:	call   66a40 <u_1>
   1a118:	add    ebp,eax
   1a11a:	cmp    r12d,ebx
   1a11d:	jne    1a05e <SliceHeader+0x2de>
   1a123:	mov    rax,QWORD PTR [rip+0x6e486]        # 885b0 <img>
   1a12a:	mov    rcx,QWORD PTR [rip+0x6e487]        # 885b8 <input>
   1a131:	mov    edx,DWORD PTR [rax+0x18]
   1a134:	cmp    edx,0x2
   1a137:	je     19f55 <SliceHeader+0x1d5>
   1a13d:	mov    r15,QWORD PTR [rax+0x3750]
   1a144:	movsxd rax,DWORD PTR [rcx+0x93c]
   1a14b:	lea    rdi,[rip+0x7081e]        # 8a970 <assignSE2partition>
   1a152:	mov    rax,QWORD PTR [rdi+rax*8]
   1a156:	mov    esi,DWORD PTR [r15+0x38]
   1a15a:	lea    rdi,[rip+0x59257]        # 733b8 <quant_coef+0x6f8>
   1a161:	movsxd rdx,DWORD PTR [rax]
   1a164:	mov    rax,rdx
   1a167:	shl    rax,0x4
   1a16b:	sub    rax,rdx
   1a16e:	mov    rdx,QWORD PTR [r15+0x18]
   1a172:	lea    r12,[rdx+rax*8]
   1a176:	mov    rdx,r12
   1a179:	call   66a40 <u_1>
   1a17e:	mov    ebx,eax
   1a180:	mov    eax,DWORD PTR [r15+0x38]
   1a184:	test   eax,eax
   1a186:	je     1a200 <SliceHeader+0x480>
   1a188:	mov    rax,QWORD PTR [r15+0x40]
   1a18c:	xor    r14d,r14d
   1a18f:	jmp    1a1aa <SliceHeader+0x42a>
   1a191:	nop    DWORD PTR [rax+0x0]
   1a198:	cmp    edx,0x2
   1a19b:	je     1a6a0 <SliceHeader+0x920>
   1a1a1:	add    r14,0x4
   1a1a5:	cmp    edx,0x3
   1a1a8:	je     1a200 <SliceHeader+0x480>
   1a1aa:	mov    esi,DWORD PTR [rax+r14*1]
   1a1ae:	mov    rdx,r12
   1a1b1:	lea    rdi,[rip+0x58ed2]        # 7308a <quant_coef+0x3ca>
   1a1b8:	call   66950 <ue_v>
   1a1bd:	add    ebx,eax
   1a1bf:	mov    rax,QWORD PTR [r15+0x40]
   1a1c3:	mov    edx,DWORD PTR [rax+r14*1]
   1a1c7:	cmp    edx,0x1
   1a1ca:	ja     1a198 <SliceHeader+0x418>
   1a1cc:	mov    rax,QWORD PTR [r15+0x48]
   1a1d0:	mov    rdx,r12
   1a1d3:	lea    rdi,[rip+0x59206]        # 733e0 <quant_coef+0x720>
   1a1da:	mov    esi,DWORD PTR [rax+r14*1]
   1a1de:	call   66950 <ue_v>
   1a1e3:	add    ebx,eax
   1a1e5:	mov    rax,QWORD PTR [r15+0x40]
   1a1e9:	mov    edx,DWORD PTR [rax+r14*1]
   1a1ed:	add    r14,0x4
   1a1f1:	cmp    edx,0x3
   1a1f4:	jne    1a1aa <SliceHeader+0x42a>
   1a1f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a200:	mov    rsi,QWORD PTR [rip+0x6e3a9]        # 885b0 <img>
   1a207:	mov    edx,DWORD PTR [rsi+0x18]
   1a20a:	mov    rax,rsi
   1a20d:	cmp    edx,0x1
   1a210:	je     1a7f0 <SliceHeader+0xa70>
   1a216:	mov    rcx,QWORD PTR [rip+0x6e39b]        # 885b8 <input>
   1a21d:	add    ebp,ebx
   1a21f:	test   edx,edx
   1a221:	jne    1a8f0 <SliceHeader+0xb70>
   1a227:	mov    rax,QWORD PTR [rip+0x86bd2]        # a0e00 <active_pps>
   1a22e:	mov    r15d,DWORD PTR [rax+0xc0]
   1a235:	test   r15d,r15d
   1a238:	jne    1a3b0 <SliceHeader+0x630>
   1a23e:	cmp    edx,0x1
   1a241:	jne    1a257 <SliceHeader+0x4d7>
   1a243:	mov    rax,QWORD PTR [rip+0x86bb6]        # a0e00 <active_pps>
   1a24a:	cmp    DWORD PTR [rax+0xc4],0x1
   1a251:	je     1a3b0 <SliceHeader+0x630>
   1a257:	mov    rax,rsi
   1a25a:	mov    r10d,DWORD PTR [rax+0x11b30]
   1a261:	test   r10d,r10d
   1a264:	je     19f65 <SliceHeader+0x1e5>
   1a26a:	movsxd rdx,DWORD PTR [rcx+0x93c]
   1a271:	lea    rdi,[rip+0x706f8]        # 8a970 <assignSE2partition>
   1a278:	mov    rsi,QWORD PTR [rax+0x3750]
   1a27f:	mov    rdx,QWORD PTR [rdi+rdx*8]
   1a283:	movsxd rcx,DWORD PTR [rdx]
   1a286:	mov    rdx,rcx
   1a289:	shl    rdx,0x4
   1a28d:	sub    rdx,rcx
   1a290:	mov    rcx,QWORD PTR [rsi+0x18]
   1a294:	lea    r14,[rcx+rdx*8]
   1a298:	mov    rcx,QWORD PTR [rax+0x3748]
   1a29f:	mov    r9d,DWORD PTR [rcx+0x4]
   1a2a3:	test   r9d,r9d
   1a2a6:	jne    1a900 <SliceHeader+0xb80>
   1a2ac:	xor    esi,esi
   1a2ae:	cmp    QWORD PTR [rax+0x11b40],0x0
   1a2b6:	mov    rdx,r14
   1a2b9:	setne  sil
   1a2bd:	lea    rdi,[rip+0x591ac]        # 73470 <quant_coef+0x7b0>
   1a2c4:	mov    DWORD PTR [rax+0x11b34],esi
   1a2ca:	call   66a40 <u_1>
   1a2cf:	mov    r12d,eax
   1a2d2:	mov    rax,QWORD PTR [rip+0x6e2d7]        # 885b0 <img>
   1a2d9:	mov    r8d,DWORD PTR [rax+0x11b34]
   1a2e0:	test   r8d,r8d
   1a2e3:	je     1a937 <SliceHeader+0xbb7>
   1a2e9:	mov    r15,QWORD PTR [rax+0x11b40]
   1a2f0:	test   r15,r15
   1a2f3:	je     1a354 <SliceHeader+0x5d4>
   1a2f5:	mov    ebx,DWORD PTR [r15]
   1a2f8:	mov    rdx,r14
   1a2fb:	lea    rdi,[rip+0x59196]        # 73498 <quant_coef+0x7d8>
   1a302:	mov    esi,ebx
   1a304:	call   66950 <ue_v>
   1a309:	add    r12d,eax
   1a30c:	cmp    ebx,0x3
   1a30f:	mov    eax,ebx
   1a311:	sete   cl
   1a314:	and    eax,0xfffffffd
   1a317:	cmp    eax,0x1
   1a31a:	je     1ab00 <SliceHeader+0xd80>
   1a320:	cmp    ebx,0x2
   1a323:	je     1ab2a <SliceHeader+0xdaa>
   1a329:	cmp    ebx,0x6
   1a32c:	je     1aac0 <SliceHeader+0xd40>
   1a332:	test   cl,cl
   1a334:	jne    1aac0 <SliceHeader+0xd40>
   1a33a:	cmp    ebx,0x4
   1a33d:	je     1aadf <SliceHeader+0xd5f>
   1a343:	mov    r15,QWORD PTR [r15+0x18]
   1a347:	test   ebx,ebx
   1a349:	je     1a937 <SliceHeader+0xbb7>
   1a34f:	test   r15,r15
   1a352:	jne    1a2f5 <SliceHeader+0x575>
   1a354:	mov    esi,0x1f4
   1a359:	lea    rdi,[rip+0x58eb8]        # 73218 <quant_coef+0x558>
   1a360:	call   19180 <error>
   1a365:	jmp    1a2f5 <SliceHeader+0x575>
   1a367:	nop    WORD PTR [rax+rax*1+0x0]
   1a370:	mov    rdx,r13
   1a373:	lea    rdi,[rip+0x58c0e]        # 72f88 <quant_coef+0x2c8>
   1a37a:	call   66950 <ue_v>
   1a37f:	mov    ebp,eax
   1a381:	mov    rax,QWORD PTR [rip+0x6e228]        # 885b0 <img>
   1a388:	mov    esi,DWORD PTR [rax+0x18]
   1a38b:	cmp    esi,0x3
   1a38e:	jbe    19e0b <SliceHeader+0x8b>
   1a394:	mov    esi,0x1
   1a399:	lea    rdi,[rip+0x58bfe]        # 72f9e <quant_coef+0x2de>
   1a3a0:	call   19180 <error>
   1a3a5:	xor    esi,esi
   1a3a7:	jmp    19e0e <SliceHeader+0x8e>
   1a3ac:	nop    DWORD PTR [rax+0x0]
   1a3b0:	movsxd rax,DWORD PTR [rcx+0x93c]
   1a3b7:	lea    rbx,[rip+0x705b2]        # 8a970 <assignSE2partition>
   1a3be:	mov    rsi,QWORD PTR [rsi+0x3750]
   1a3c5:	lea    rdi,[rip+0x58d0d]        # 730d9 <quant_coef+0x419>
   1a3cc:	mov    rax,QWORD PTR [rbx+rax*8]
   1a3d0:	movsxd rdx,DWORD PTR [rax]
   1a3d3:	mov    rax,rdx
   1a3d6:	shl    rax,0x4
   1a3da:	sub    rax,rdx
   1a3dd:	mov    rdx,QWORD PTR [rsi+0x18]
   1a3e1:	mov    esi,DWORD PTR [rip+0x99d69]        # b4150 <luma_log_weight_denom>
   1a3e7:	lea    r12,[rdx+rax*8]
   1a3eb:	mov    rdx,r12
   1a3ee:	call   66950 <ue_v>
   1a3f3:	mov    esi,DWORD PTR [rip+0x9c2f7]        # b66f0 <chroma_log_weight_denom>
   1a3f9:	mov    rdx,r12
   1a3fc:	lea    rdi,[rip+0x58cf0]        # 730f3 <quant_coef+0x433>
   1a403:	mov    ebx,eax
   1a405:	call   66950 <ue_v>
   1a40a:	add    ebx,eax
   1a40c:	mov    rax,QWORD PTR [rip+0x6e19d]        # 885b0 <img>
   1a413:	mov    r14d,DWORD PTR [rax+0x11940]
   1a41a:	test   r14d,r14d
   1a41d:	jle    1a680 <SliceHeader+0x900>
   1a423:	xor    r15d,r15d
   1a426:	jmp    1a490 <SliceHeader+0x710>
   1a428:	nop    DWORD PTR [rax+rax*1+0x0]
   1a430:	mov    rcx,QWORD PTR [rip+0x99cf9]        # b4130 <wp_offset>
   1a437:	mov    rcx,QWORD PTR [rcx]
   1a43a:	mov    rcx,QWORD PTR [rcx+r14*1]
   1a43e:	mov    r10d,DWORD PTR [rcx+0x4]
   1a442:	test   r10d,r10d
   1a445:	jne    1a54d <SliceHeader+0x7cd>
   1a44b:	cmp    edx,DWORD PTR [rax+0x8]
   1a44e:	jne    1a54d <SliceHeader+0x7cd>
   1a454:	mov    r9d,DWORD PTR [rcx+0x8]
   1a458:	test   r9d,r9d
   1a45b:	jne    1a54d <SliceHeader+0x7cd>
   1a461:	mov    rdx,r12
   1a464:	xor    esi,esi
   1a466:	lea    rdi,[rip+0x58ce0]        # 7314d <quant_coef+0x48d>
   1a46d:	call   66a40 <u_1>
   1a472:	add    ebx,eax
   1a474:	nop    DWORD PTR [rax+0x0]
   1a478:	mov    rax,QWORD PTR [rip+0x6e131]        # 885b0 <img>
   1a47f:	add    r15,0x1
   1a483:	cmp    DWORD PTR [rax+0x11940],r15d
   1a48a:	jle    1a680 <SliceHeader+0x900>
   1a490:	mov    rax,QWORD PTR [rip+0x86971]        # a0e08 <wp_weight>
   1a497:	mov    ecx,DWORD PTR [rip+0x99cb3]        # b4150 <luma_log_weight_denom>
   1a49d:	lea    r14,[r15*8+0x0]
   1a4a5:	mov    rax,QWORD PTR [rax]
   1a4a8:	mov    rdx,QWORD PTR [rax+r15*8]
   1a4ac:	mov    eax,0x1
   1a4b1:	shl    eax,cl
   1a4b3:	cmp    DWORD PTR [rdx],eax
   1a4b5:	mov    rdx,r12
   1a4b8:	jne    1a4d4 <SliceHeader+0x754>
   1a4ba:	mov    rax,QWORD PTR [rip+0x99c6f]        # b4130 <wp_offset>
   1a4c1:	mov    rax,QWORD PTR [rax]
   1a4c4:	mov    rax,QWORD PTR [rax+r15*8]
   1a4c8:	mov    r11d,DWORD PTR [rax]
   1a4cb:	test   r11d,r11d
   1a4ce:	je     1a5d0 <SliceHeader+0x850>
   1a4d4:	mov    esi,0x1
   1a4d9:	lea    rdi,[rip+0x58c2f]        # 7310f <quant_coef+0x44f>
   1a4e0:	call   66a40 <u_1>
   1a4e5:	mov    rdx,r12
   1a4e8:	lea    rdi,[rip+0x58c38]        # 73127 <quant_coef+0x467>
   1a4ef:	add    ebx,eax
   1a4f1:	mov    rax,QWORD PTR [rip+0x86910]        # a0e08 <wp_weight>
   1a4f8:	mov    rax,QWORD PTR [rax]
   1a4fb:	mov    rax,QWORD PTR [rax+r14*1]
   1a4ff:	mov    esi,DWORD PTR [rax]
   1a501:	call   669b0 <se_v>
   1a506:	mov    rdx,r12
   1a509:	lea    rdi,[rip+0x58c2a]        # 7313a <quant_coef+0x47a>
   1a510:	add    ebx,eax
   1a512:	mov    rax,QWORD PTR [rip+0x99c17]        # b4130 <wp_offset>
   1a519:	mov    rax,QWORD PTR [rax]
   1a51c:	mov    rax,QWORD PTR [rax+r14*1]
   1a520:	mov    esi,DWORD PTR [rax]
   1a522:	call   669b0 <se_v>
   1a527:	add    ebx,eax
   1a529:	mov    rax,QWORD PTR [rip+0x868d8]        # a0e08 <wp_weight>
   1a530:	mov    ecx,DWORD PTR [rip+0x9c1ba]        # b66f0 <chroma_log_weight_denom>
   1a536:	mov    edx,0x1
   1a53b:	mov    rax,QWORD PTR [rax]
   1a53e:	shl    edx,cl
   1a540:	mov    rax,QWORD PTR [rax+r14*1]
   1a544:	cmp    DWORD PTR [rax+0x4],edx
   1a547:	je     1a430 <SliceHeader+0x6b0>
   1a54d:	mov    rdx,r12
   1a550:	mov    esi,0x1
   1a555:	lea    rdi,[rip+0x58bf1]        # 7314d <quant_coef+0x48d>
   1a55c:	call   66a40 <u_1>
   1a561:	mov    ecx,0x4
   1a566:	add    ebx,eax
   1a568:	mov    rax,QWORD PTR [rip+0x86899]        # a0e08 <wp_weight>
   1a56f:	mov    rdx,r12
   1a572:	mov    QWORD PTR [rsp+0x8],rcx
   1a577:	lea    rdi,[rip+0x58be5]        # 73163 <quant_coef+0x4a3>
   1a57e:	mov    rax,QWORD PTR [rax]
   1a581:	mov    rax,QWORD PTR [rax+r14*1]
   1a585:	mov    esi,DWORD PTR [rax+rcx*1]
   1a588:	call   669b0 <se_v>
   1a58d:	mov    rcx,QWORD PTR [rsp+0x8]
   1a592:	mov    rdx,r12
   1a595:	lea    rdi,[rip+0x58bd8]        # 73174 <quant_coef+0x4b4>
   1a59c:	add    ebx,eax
   1a59e:	mov    rax,QWORD PTR [rip+0x99b8b]        # b4130 <wp_offset>
   1a5a5:	mov    rax,QWORD PTR [rax]
   1a5a8:	mov    rax,QWORD PTR [rax+r14*1]
   1a5ac:	mov    esi,DWORD PTR [rax+rcx*1]
   1a5af:	call   669b0 <se_v>
   1a5b4:	mov    rcx,QWORD PTR [rsp+0x8]
   1a5b9:	add    ebx,eax
   1a5bb:	add    rcx,0x4
   1a5bf:	cmp    rcx,0xc
   1a5c3:	jne    1a568 <SliceHeader+0x7e8>
   1a5c5:	jmp    1a478 <SliceHeader+0x6f8>
   1a5ca:	nop    WORD PTR [rax+rax*1+0x0]
   1a5d0:	xor    esi,esi
   1a5d2:	lea    rdi,[rip+0x58b36]        # 7310f <quant_coef+0x44f>
   1a5d9:	call   66a40 <u_1>
   1a5de:	add    ebx,eax
   1a5e0:	jmp    1a529 <SliceHeader+0x7a9>
   1a5e5:	nop    DWORD PTR [rax]
   1a5e8:	mov    rax,QWORD PTR [rip+0x6dfc1]        # 885b0 <img>
   1a5ef:	cmp    DWORD PTR [rax+0x18],0x2
   1a5f3:	je     19f72 <SliceHeader+0x1f2>
   1a5f9:	mov    esi,DWORD PTR [rax+0x11b48]
   1a5ff:	mov    rdx,r13
   1a602:	lea    rdi,[rip+0x58c5a]        # 73263 <quant_coef+0x5a3>
   1a609:	call   66950 <ue_v>
   1a60e:	add    ebp,eax
   1a610:	jmp    19f72 <SliceHeader+0x1f2>
   1a615:	nop    DWORD PTR [rax]
   1a618:	mov    esi,DWORD PTR [rax+0x11ad8]
   1a61e:	test   esi,esi
   1a620:	jne    19f0d <SliceHeader+0x18d>
   1a626:	mov    esi,DWORD PTR [rax+0x11af4]
   1a62c:	mov    rdx,r13
   1a62f:	lea    rdi,[rip+0x58a08]        # 7303e <quant_coef+0x37e>
   1a636:	call   669b0 <se_v>
   1a63b:	add    ebp,eax
   1a63d:	mov    rax,QWORD PTR [rip+0x6df6c]        # 885b0 <img>
   1a644:	mov    ecx,DWORD PTR [rax+0x11b2c]
   1a64a:	test   ecx,ecx
   1a64c:	je     19f0d <SliceHeader+0x18d>
   1a652:	and    ebx,0x1
   1a655:	jne    19f0d <SliceHeader+0x18d>
   1a65b:	mov    esi,DWORD PTR [rax+0x11af8]
   1a661:	mov    rdx,r13
   1a664:	lea    rdi,[rip+0x589ee]        # 73059 <quant_coef+0x399>
   1a66b:	call   669b0 <se_v>
   1a670:	add    ebp,eax
   1a672:	mov    rax,QWORD PTR [rip+0x6df37]        # 885b0 <img>
   1a679:	jmp    19f0d <SliceHeader+0x18d>
   1a67e:	xchg   ax,ax
   1a680:	cmp    DWORD PTR [rax+0x18],0x1
   1a684:	je     1ab80 <SliceHeader+0xe00>
   1a68a:	mov    rcx,QWORD PTR [rip+0x6df27]        # 885b8 <input>
   1a691:	add    ebp,ebx
   1a693:	jmp    19f55 <SliceHeader+0x1d5>
   1a698:	nop    DWORD PTR [rax+rax*1+0x0]
   1a6a0:	mov    rax,QWORD PTR [r15+0x50]
   1a6a4:	mov    rdx,r12
   1a6a7:	lea    rdi,[rip+0x589f9]        # 730a7 <quant_coef+0x3e7>
   1a6ae:	mov    esi,DWORD PTR [rax+r14*1]
   1a6b2:	call   66950 <ue_v>
   1a6b7:	add    ebx,eax
   1a6b9:	mov    rax,QWORD PTR [r15+0x40]
   1a6bd:	mov    edx,DWORD PTR [rax+r14*1]
   1a6c1:	jmp    1a1a1 <SliceHeader+0x421>
   1a6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a6d0:	mov    rax,QWORD PTR [rip+0x6ded9]        # 885b0 <img>
   1a6d7:	mov    rdx,r13
   1a6da:	lea    rdi,[rip+0x58e27]        # 73508 <quant_coef+0x848>
   1a6e1:	mov    esi,DWORD PTR [rax+0x11930]
   1a6e7:	call   66950 <ue_v>
   1a6ec:	add    r12d,eax
   1a6ef:	mov    rax,QWORD PTR [rip+0x6deba]        # 885b0 <img>
   1a6f6:	cmp    DWORD PTR [rax+0x11930],0x1
   1a6fd:	jne    1a970 <SliceHeader+0xbf0>
   1a703:	mov    rax,QWORD PTR [rip+0x866f6]        # a0e00 <active_pps>
   1a70a:	jmp    19fc3 <SliceHeader+0x243>
   1a70f:	nop
   1a710:	mov    esi,DWORD PTR [rax]
   1a712:	mov    rdx,r13
   1a715:	lea    rdi,[rip+0x588fd]        # 73019 <quant_coef+0x359>
   1a71c:	mov    eax,esi
   1a71e:	shr    eax,0x1f
   1a721:	add    esi,eax
   1a723:	and    esi,0x1
   1a726:	sub    esi,eax
   1a728:	call   66950 <ue_v>
   1a72d:	add    ebp,eax
   1a72f:	mov    rax,QWORD PTR [rip+0x6de7a]        # 885b0 <img>
   1a736:	jmp    19e93 <SliceHeader+0x113>
   1a73b:	nop    DWORD PTR [rax+rax*1+0x0]
   1a740:	mov    rax,QWORD PTR [rip+0x6de69]        # 885b0 <img>
   1a747:	xor    esi,esi
   1a749:	mov    rdx,r13
   1a74c:	lea    rdi,[rip+0x5889d]        # 72ff0 <quant_coef+0x330>
   1a753:	mov    r12d,DWORD PTR [rax+0x1c]
   1a757:	sub    r12d,0x1
   1a75b:	cmp    r12d,0x1
   1a75f:	setbe  sil
   1a763:	call   66a40 <u_1>
   1a768:	add    ebp,eax
   1a76a:	cmp    r12d,0x1
   1a76e:	ja     19e78 <SliceHeader+0xf8>
   1a774:	mov    rax,QWORD PTR [rip+0x6de35]        # 885b0 <img>
   1a77b:	xor    esi,esi
   1a77d:	mov    rdx,r13
   1a780:	lea    rdi,[rip+0x5887c]        # 73003 <quant_coef+0x343>
   1a787:	mov    ebx,0x1
   1a78c:	cmp    DWORD PTR [rax+0x1c],0x2
   1a790:	sete   sil
   1a794:	call   66a40 <u_1>
   1a799:	add    ebp,eax
   1a79b:	jmp    19e78 <SliceHeader+0xf8>
   1a7a0:	mov    esi,DWORD PTR [rax+0x11acc]
   1a7a6:	mov    rdx,r13
   1a7a9:	lea    rdi,[rip+0x588c4]        # 73074 <quant_coef+0x3b4>
   1a7b0:	call   66950 <ue_v>
   1a7b5:	add    ebp,eax
   1a7b7:	mov    rax,QWORD PTR [rip+0x6ddf2]        # 885b0 <img>
   1a7be:	mov    edx,DWORD PTR [rax+0x18]
   1a7c1:	cmp    edx,0x1
   1a7c4:	jne    19f2e <SliceHeader+0x1ae>
   1a7ca:	mov    esi,DWORD PTR [rax+0x1193c]
   1a7d0:	mov    rdx,r13
   1a7d3:	lea    rdi,[rip+0x58b46]        # 73320 <quant_coef+0x660>
   1a7da:	call   66a40 <u_1>
   1a7df:	add    ebp,eax
   1a7e1:	mov    rax,QWORD PTR [rip+0x6ddc8]        # 885b0 <img>
   1a7e8:	mov    edx,DWORD PTR [rax+0x18]
   1a7eb:	jmp    19f2e <SliceHeader+0x1ae>
   1a7f0:	mov    esi,DWORD PTR [r15+0x58]
   1a7f4:	mov    rdx,r12
   1a7f7:	lea    rdi,[rip+0x58c02]        # 73400 <quant_coef+0x740>
   1a7fe:	call   66a40 <u_1>
   1a803:	add    ebx,eax
   1a805:	mov    eax,DWORD PTR [r15+0x58]
   1a809:	test   eax,eax
   1a80b:	je     1a880 <SliceHeader+0xb00>
   1a80d:	mov    rdx,QWORD PTR [r15+0x60]
   1a811:	xor    r14d,r14d
   1a814:	jmp    1a832 <SliceHeader+0xab2>
   1a816:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a820:	cmp    eax,0x2
   1a823:	je     1ab50 <SliceHeader+0xdd0>
   1a829:	add    r14,0x4
   1a82d:	cmp    eax,0x3
   1a830:	je     1a880 <SliceHeader+0xb00>
   1a832:	mov    esi,DWORD PTR [rdx+r14*1]
   1a836:	lea    rdi,[rip+0x5884d]        # 7308a <quant_coef+0x3ca>
   1a83d:	mov    rdx,r12
   1a840:	call   66950 <ue_v>
   1a845:	mov    rdx,QWORD PTR [r15+0x60]
   1a849:	add    ebx,eax
   1a84b:	mov    eax,DWORD PTR [rdx+r14*1]
   1a84f:	cmp    eax,0x1
   1a852:	ja     1a820 <SliceHeader+0xaa0>
   1a854:	mov    rax,QWORD PTR [r15+0x68]
   1a858:	mov    rdx,r12
   1a85b:	lea    rdi,[rip+0x58bc6]        # 73428 <quant_coef+0x768>
   1a862:	mov    esi,DWORD PTR [rax+r14*1]
   1a866:	call   66950 <ue_v>
   1a86b:	mov    rdx,QWORD PTR [r15+0x60]
   1a86f:	add    ebx,eax
   1a871:	mov    eax,DWORD PTR [rdx+r14*1]
   1a875:	add    r14,0x4
   1a879:	cmp    eax,0x3
   1a87c:	jne    1a832 <SliceHeader+0xab2>
   1a87e:	xchg   ax,ax
   1a880:	mov    rsi,QWORD PTR [rip+0x6dd29]        # 885b0 <img>
   1a887:	mov    rcx,QWORD PTR [rip+0x6dd2a]        # 885b8 <input>
   1a88e:	add    ebp,ebx
   1a890:	mov    edx,DWORD PTR [rsi+0x18]
   1a893:	test   edx,edx
   1a895:	je     1a227 <SliceHeader+0x4a7>
   1a89b:	cmp    edx,0x3
   1a89e:	jne    1a23e <SliceHeader+0x4be>
   1a8a4:	jmp    1a227 <SliceHeader+0x4a7>
   1a8a9:	nop    DWORD PTR [rax+0x0]
   1a8b0:	mov    rdx,r13
   1a8b3:	xor    esi,esi
   1a8b5:	lea    rdi,[rip+0x589cd]        # 73289 <quant_coef+0x5c9>
   1a8bc:	call   66a40 <u_1>
   1a8c1:	mov    rdx,r13
   1a8c4:	lea    rdi,[rip+0x589d5]        # 732a0 <quant_coef+0x5e0>
   1a8cb:	add    r12d,eax
   1a8ce:	mov    rax,QWORD PTR [rip+0x6dcdb]        # 885b0 <img>
   1a8d5:	mov    esi,DWORD PTR [rax+0x2c]
   1a8d8:	sub    esi,0x1a
   1a8db:	call   669b0 <se_v>
   1a8e0:	add    r12d,eax
   1a8e3:	jmp    19fae <SliceHeader+0x22e>
   1a8e8:	nop    DWORD PTR [rax+rax*1+0x0]
   1a8f0:	cmp    edx,0x3
   1a8f3:	je     1a227 <SliceHeader+0x4a7>
   1a8f9:	jmp    19f55 <SliceHeader+0x1d5>
   1a8fe:	xchg   ax,ax
   1a900:	mov    esi,DWORD PTR [rax+0x11b38]
   1a906:	mov    rdx,r14
   1a909:	lea    rdi,[rip+0x58b38]        # 73448 <quant_coef+0x788>
   1a910:	call   66a40 <u_1>
   1a915:	mov    rdx,r14
   1a918:	lea    rdi,[rip+0x588dc]        # 731fb <quant_coef+0x53b>
   1a91f:	mov    r12d,eax
   1a922:	mov    rax,QWORD PTR [rip+0x6dc87]        # 885b0 <img>
   1a929:	mov    esi,DWORD PTR [rax+0x11b3c]
   1a92f:	call   66a40 <u_1>
   1a934:	add    r12d,eax
   1a937:	mov    rcx,QWORD PTR [rip+0x6dc7a]        # 885b8 <input>
   1a93e:	add    ebp,r12d
   1a941:	jmp    19f65 <SliceHeader+0x1e5>
   1a946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a950:	mov    esi,DWORD PTR [rax+0x14]
   1a953:	mov    rdx,r13
   1a956:	lea    rdi,[rip+0x5898e]        # 732eb <quant_coef+0x62b>
   1a95d:	call   66950 <ue_v>
   1a962:	add    r12d,eax
   1a965:	jmp    1a003 <SliceHeader+0x283>
   1a96a:	nop    WORD PTR [rax+rax*1+0x0]
   1a970:	mov    eax,DWORD PTR [rax+0x11934]
   1a976:	mov    rdx,r13
   1a979:	lea    rdi,[rip+0x58bb0]        # 73530 <quant_coef+0x870>
   1a980:	mov    esi,eax
   1a982:	shr    esi,0x1f
   1a985:	add    esi,eax
   1a987:	sar    esi,1
   1a989:	call   669b0 <se_v>
   1a98e:	mov    rdx,r13
   1a991:	lea    rdi,[rip+0x5891b]        # 732b3 <quant_coef+0x5f3>
   1a998:	add    r12d,eax
   1a99b:	mov    rax,QWORD PTR [rip+0x6dc0e]        # 885b0 <img>
   1a9a2:	mov    eax,DWORD PTR [rax+0x11938]
   1a9a8:	mov    esi,eax
   1a9aa:	shr    esi,0x1f
   1a9ad:	add    esi,eax
   1a9af:	sar    esi,1
   1a9b1:	call   669b0 <se_v>
   1a9b6:	add    r12d,eax
   1a9b9:	mov    rax,QWORD PTR [rip+0x86440]        # a0e00 <active_pps>
   1a9c0:	jmp    19fc3 <SliceHeader+0x243>
   1a9c5:	nop    DWORD PTR [rax]
   1a9c8:	mov    edx,DWORD PTR [rsi+0xbc]
   1a9ce:	add    edx,0x1
   1a9d1:	cmp    DWORD PTR [rax+0x11944],edx
   1a9d7:	mov    rdx,r13
   1a9da:	je     1ad90 <SliceHeader+0x1010>
   1a9e0:	mov    esi,0x1
   1a9e5:	lea    rdi,[rip+0x58954]        # 73340 <quant_coef+0x680>
   1a9ec:	call   66a40 <u_1>
   1a9f1:	add    ebp,eax
   1a9f3:	jmp    1a05e <SliceHeader+0x2de>
   1a9f8:	nop    DWORD PTR [rax+rax*1+0x0]
   1aa00:	mov    esi,DWORD PTR [rax+0x11af0]
   1aa06:	mov    rdx,r13
   1aa09:	lea    rdi,[rip+0x588f0]        # 73300 <quant_coef+0x640>
   1aa10:	call   669b0 <se_v>
   1aa15:	add    ebp,eax
   1aa17:	mov    rax,QWORD PTR [rip+0x6db92]        # 885b0 <img>
   1aa1e:	jmp    19efe <SliceHeader+0x17e>
   1aa23:	nop    DWORD PTR [rax+rax*1+0x0]
   1aa28:	mov    rcx,QWORD PTR [rip+0x6db81]        # 885b0 <img>
   1aa2f:	mov    eax,DWORD PTR [rax+0xa8]
   1aa35:	pxor   xmm0,xmm0
   1aa39:	pxor   xmm1,xmm1
   1aa3d:	mov    edx,DWORD PTR [rcx+0x11b18]
   1aa43:	imul   edx,DWORD PTR [rcx+0x11b14]
   1aa4a:	add    eax,0x1
   1aa4d:	cvtsi2ss xmm1,rax
   1aa52:	cvtsi2ss xmm0,rdx
   1aa57:	divss  xmm0,xmm1
   1aa5b:	addss  xmm0,DWORD PTR [rip+0x58aed]        # 73550 <quant_coef+0x890>
   1aa63:	cvtss2sd xmm0,xmm0
   1aa67:	call   43d0 <log@plt>
   1aa6c:	movsd  xmm2,QWORD PTR [rip+0x58afc]        # 73570 <quant_coef+0x8b0>
   1aa74:	movsd  xmm3,QWORD PTR [rip+0x58ae4]        # 73560 <quant_coef+0x8a0>
   1aa7c:	divsd  xmm0,QWORD PTR [rip+0x58ad4]        # 73558 <quant_coef+0x898>
   1aa84:	movapd xmm1,xmm0
   1aa88:	andpd  xmm1,xmm2
   1aa8c:	ucomisd xmm3,xmm1
   1aa90:	ja     1ad58 <SliceHeader+0xfd8>
   1aa96:	mov    rax,QWORD PTR [rip+0x6db13]        # 885b0 <img>
   1aa9d:	cvttsd2si edi,xmm0
   1aaa1:	mov    rcx,r13
   1aaa4:	lea    rsi,[rip+0x58823]        # 732ce <quant_coef+0x60e>
   1aaab:	mov    edx,DWORD PTR [rax+0x11bcc]
   1aab1:	call   66ac0 <u_v>
   1aab6:	add    r12d,eax
   1aab9:	jmp    19fd9 <SliceHeader+0x259>
   1aabe:	xchg   ax,ax
   1aac0:	mov    esi,DWORD PTR [r15+0xc]
   1aac4:	mov    rdx,r14
   1aac7:	lea    rdi,[rip+0x5877d]        # 7324b <quant_coef+0x58b>
   1aace:	call   66950 <ue_v>
   1aad3:	add    r12d,eax
   1aad6:	cmp    ebx,0x4
   1aad9:	jne    1a343 <SliceHeader+0x5c3>
   1aadf:	mov    esi,DWORD PTR [r15+0x10]
   1aae3:	mov    rdx,r14
   1aae6:	lea    rdi,[rip+0x589fb]        # 734e8 <quant_coef+0x828>
   1aaed:	call   66950 <ue_v>
   1aaf2:	mov    r15,QWORD PTR [r15+0x18]
   1aaf6:	add    r12d,eax
   1aaf9:	jmp    1a2f0 <SliceHeader+0x570>
   1aafe:	xchg   ax,ax
   1ab00:	mov    esi,DWORD PTR [r15+0x4]
   1ab04:	mov    rdx,r14
   1ab07:	lea    rdi,[rip+0x589b2]        # 734c0 <quant_coef+0x800>
   1ab0e:	mov    BYTE PTR [rsp+0x8],cl
   1ab12:	call   66950 <ue_v>
   1ab17:	movzx  ecx,BYTE PTR [rsp+0x8]
   1ab1c:	lea    r12d,[r12+rax*1+0x1]
   1ab21:	cmp    ebx,0x2
   1ab24:	jne    1a329 <SliceHeader+0x5a9>
   1ab2a:	mov    esi,DWORD PTR [r15+0x8]
   1ab2e:	mov    rdx,r14
   1ab31:	lea    rdi,[rip+0x586fd]        # 73235 <quant_coef+0x575>
   1ab38:	call   66950 <ue_v>
   1ab3d:	mov    r15,QWORD PTR [r15+0x18]
   1ab41:	add    r12d,eax
   1ab44:	jmp    1a2f0 <SliceHeader+0x570>
   1ab49:	nop    DWORD PTR [rax+0x0]
   1ab50:	mov    rax,QWORD PTR [r15+0x70]
   1ab54:	mov    rdx,r12
   1ab57:	lea    rdi,[rip+0x58562]        # 730c0 <quant_coef+0x400>
   1ab5e:	mov    esi,DWORD PTR [rax+r14*1]
   1ab62:	call   66950 <ue_v>
   1ab67:	mov    rdx,QWORD PTR [r15+0x60]
   1ab6b:	add    ebx,eax
   1ab6d:	mov    eax,DWORD PTR [rdx+r14*1]
   1ab71:	jmp    1a829 <SliceHeader+0xaa9>
   1ab76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ab80:	mov    r8d,DWORD PTR [rax+0x11944]
   1ab87:	test   r8d,r8d
   1ab8a:	jle    1a68a <SliceHeader+0x90a>
   1ab90:	xor    r15d,r15d
   1ab93:	jmp    1abf8 <SliceHeader+0xe78>
   1ab95:	nop    DWORD PTR [rax]
   1ab98:	mov    rcx,QWORD PTR [rip+0x99591]        # b4130 <wp_offset>
   1ab9f:	mov    rcx,QWORD PTR [rcx+0x8]
   1aba3:	mov    rcx,QWORD PTR [rcx+r14*1]
   1aba7:	mov    esi,DWORD PTR [rcx+0x4]
   1abaa:	test   esi,esi
   1abac:	jne    1acb8 <SliceHeader+0xf38>
   1abb2:	cmp    edx,DWORD PTR [rax+0x8]
   1abb5:	jne    1acb8 <SliceHeader+0xf38>
   1abbb:	mov    r11d,DWORD PTR [rcx+0x8]
   1abbf:	test   r11d,r11d
   1abc2:	jne    1acb8 <SliceHeader+0xf38>
   1abc8:	mov    rdx,r12
   1abcb:	xor    esi,esi
   1abcd:	lea    rdi,[rip+0x585ef]        # 731c3 <quant_coef+0x503>
   1abd4:	call   66a40 <u_1>
   1abd9:	add    ebx,eax
   1abdb:	nop    DWORD PTR [rax+rax*1+0x0]
   1abe0:	mov    rax,QWORD PTR [rip+0x6d9c9]        # 885b0 <img>
   1abe7:	add    r15,0x1
   1abeb:	cmp    DWORD PTR [rax+0x11944],r15d
   1abf2:	jle    1a68a <SliceHeader+0x90a>
   1abf8:	mov    rax,QWORD PTR [rip+0x86209]        # a0e08 <wp_weight>
   1abff:	mov    ecx,DWORD PTR [rip+0x9954b]        # b4150 <luma_log_weight_denom>
   1ac05:	lea    r14,[r15*8+0x0]
   1ac0d:	mov    rax,QWORD PTR [rax+0x8]
   1ac11:	mov    rdx,QWORD PTR [rax+r15*8]
   1ac15:	mov    eax,0x1
   1ac1a:	shl    eax,cl
   1ac1c:	cmp    DWORD PTR [rdx],eax
   1ac1e:	mov    rdx,r12
   1ac21:	jne    1ac3c <SliceHeader+0xebc>
   1ac23:	mov    rax,QWORD PTR [rip+0x99506]        # b4130 <wp_offset>
   1ac2a:	mov    rax,QWORD PTR [rax+0x8]
   1ac2e:	mov    rax,QWORD PTR [rax+r15*8]
   1ac32:	mov    edi,DWORD PTR [rax]
   1ac34:	test   edi,edi
   1ac36:	je     1ad40 <SliceHeader+0xfc0>
   1ac3c:	mov    esi,0x1
   1ac41:	lea    rdi,[rip+0x5853d]        # 73185 <quant_coef+0x4c5>
   1ac48:	call   66a40 <u_1>
   1ac4d:	mov    rdx,r12
   1ac50:	lea    rdi,[rip+0x58546]        # 7319d <quant_coef+0x4dd>
   1ac57:	add    ebx,eax
   1ac59:	mov    rax,QWORD PTR [rip+0x861a8]        # a0e08 <wp_weight>
   1ac60:	mov    rax,QWORD PTR [rax+0x8]
   1ac64:	mov    rax,QWORD PTR [rax+r14*1]
   1ac68:	mov    esi,DWORD PTR [rax]
   1ac6a:	call   669b0 <se_v>
   1ac6f:	mov    rdx,r12
   1ac72:	lea    rdi,[rip+0x58537]        # 731b0 <quant_coef+0x4f0>
   1ac79:	add    ebx,eax
   1ac7b:	mov    rax,QWORD PTR [rip+0x994ae]        # b4130 <wp_offset>
   1ac82:	mov    rax,QWORD PTR [rax+0x8]
   1ac86:	mov    rax,QWORD PTR [rax+r14*1]
   1ac8a:	mov    esi,DWORD PTR [rax]
   1ac8c:	call   669b0 <se_v>
   1ac91:	add    ebx,eax
   1ac93:	mov    rax,QWORD PTR [rip+0x8616e]        # a0e08 <wp_weight>
   1ac9a:	mov    ecx,DWORD PTR [rip+0x9ba50]        # b66f0 <chroma_log_weight_denom>
   1aca0:	mov    edx,0x1
   1aca5:	mov    rax,QWORD PTR [rax+0x8]
   1aca9:	shl    edx,cl
   1acab:	mov    rax,QWORD PTR [rax+r14*1]
   1acaf:	cmp    DWORD PTR [rax+0x4],edx
   1acb2:	je     1ab98 <SliceHeader+0xe18>
   1acb8:	mov    rdx,r12
   1acbb:	mov    esi,0x1
   1acc0:	lea    rdi,[rip+0x584fc]        # 731c3 <quant_coef+0x503>
   1acc7:	call   66a40 <u_1>
   1accc:	mov    ecx,0x4
   1acd1:	add    ebx,eax
   1acd3:	mov    rax,QWORD PTR [rip+0x8612e]        # a0e08 <wp_weight>
   1acda:	mov    rdx,r12
   1acdd:	mov    QWORD PTR [rsp+0x8],rcx
   1ace2:	lea    rdi,[rip+0x584f0]        # 731d9 <quant_coef+0x519>
   1ace9:	mov    rax,QWORD PTR [rax+0x8]
   1aced:	mov    rax,QWORD PTR [rax+r14*1]
   1acf1:	mov    esi,DWORD PTR [rax+rcx*1]
   1acf4:	call   669b0 <se_v>
   1acf9:	mov    rcx,QWORD PTR [rsp+0x8]
   1acfe:	mov    rdx,r12
   1ad01:	lea    rdi,[rip+0x584e2]        # 731ea <quant_coef+0x52a>
   1ad08:	add    ebx,eax
   1ad0a:	mov    rax,QWORD PTR [rip+0x9941f]        # b4130 <wp_offset>
   1ad11:	mov    rax,QWORD PTR [rax+0x8]
   1ad15:	mov    rax,QWORD PTR [rax+r14*1]
   1ad19:	mov    esi,DWORD PTR [rax+rcx*1]
   1ad1c:	call   669b0 <se_v>
   1ad21:	mov    rcx,QWORD PTR [rsp+0x8]
   1ad26:	add    ebx,eax
   1ad28:	add    rcx,0x4
   1ad2c:	cmp    rcx,0xc
   1ad30:	jne    1acd3 <SliceHeader+0xf53>
   1ad32:	jmp    1abe0 <SliceHeader+0xe60>
   1ad37:	nop    WORD PTR [rax+rax*1+0x0]
   1ad40:	xor    esi,esi
   1ad42:	lea    rdi,[rip+0x5843c]        # 73185 <quant_coef+0x4c5>
   1ad49:	call   66a40 <u_1>
   1ad4e:	add    ebx,eax
   1ad50:	jmp    1ac93 <SliceHeader+0xf13>
   1ad55:	nop    DWORD PTR [rax]
   1ad58:	cvttsd2si rax,xmm0
   1ad5d:	pxor   xmm1,xmm1
   1ad61:	movapd xmm3,xmm0
   1ad65:	movsd  xmm4,QWORD PTR [rip+0x57a5b]        # 727c8 <INIT_MB_TYPE_I+0x108>
   1ad6d:	andnpd xmm2,xmm0
   1ad71:	movapd xmm0,xmm2
   1ad75:	cvtsi2sd xmm1,rax
   1ad7a:	cmpnlesd xmm3,xmm1
   1ad7f:	andpd  xmm3,xmm4
   1ad83:	addsd  xmm1,xmm3
   1ad87:	orpd   xmm0,xmm1
   1ad8b:	jmp    1aa96 <SliceHeader+0xd16>
   1ad90:	xor    esi,esi
   1ad92:	lea    rdi,[rip+0x585a7]        # 73340 <quant_coef+0x680>
   1ad99:	call   66a40 <u_1>
   1ad9e:	add    ebp,eax
   1ada0:	mov    rax,QWORD PTR [rip+0x6d809]        # 885b0 <img>
   1ada7:	mov    edx,DWORD PTR [rax+0x18]
   1adaa:	jmp    19f45 <SliceHeader+0x1c5>
   1adaf:	nop
   1adb0:	mov    edx,0xffffffff
   1adb5:	mov    ecx,edi
   1adb7:	shl    edx,cl
   1adb9:	not    edx
   1adbb:	and    edx,DWORD PTR [rax+0x11b04]
   1adc1:	mov    DWORD PTR [rax+0x11aec],edx
   1adc7:	jmp    1a0d3 <SliceHeader+0x353>
   1adcc:	nop    DWORD PTR [rax+0x0]

000000000001add0 <get_picture_type>:
   1add0:	endbr64 
   1add4:	mov    rax,QWORD PTR [rip+0x6d7d5]        # 885b0 <img>
   1addb:	mov    eax,DWORD PTR [rax+0x18]
   1adde:	cmp    eax,0x3
   1ade1:	ja     1adf0 <get_picture_type+0x20>
   1ade3:	add    eax,0x5
   1ade6:	ret    
   1ade7:	nop    WORD PTR [rax+rax*1+0x0]
   1adf0:	sub    rsp,0x8
   1adf4:	mov    esi,0x1
   1adf9:	lea    rdi,[rip+0x5819e]        # 72f9e <quant_coef+0x2de>
   1ae00:	call   19180 <error>
   1ae05:	xor    eax,eax
   1ae07:	add    rsp,0x8
   1ae0b:	ret    
   1ae0c:	nop    DWORD PTR [rax+0x0]

000000000001ae10 <Partition_BC_Header>:
   1ae10:	endbr64 
   1ae14:	push   r13
   1ae16:	movsxd rdi,edi
   1ae19:	push   r12
   1ae1b:	push   rbp
   1ae1c:	sub    rsp,0x40
   1ae20:	mov    rdx,QWORD PTR [rip+0x6d789]        # 885b0 <img>
   1ae27:	mov    rax,QWORD PTR fs:0x28
   1ae30:	mov    QWORD PTR [rsp+0x38],rax
   1ae35:	xor    eax,eax
   1ae37:	mov    rax,rdi
   1ae3a:	mov    rbp,rsp
   1ae3d:	mov    DWORD PTR [rsp],0x0
   1ae44:	mov    rcx,QWORD PTR [rdx+0x3750]
   1ae4b:	shl    rax,0x4
   1ae4f:	mov    DWORD PTR [rsp+0x8],0x0
   1ae57:	sub    rax,rdi
   1ae5a:	mov    rdi,rbp
   1ae5d:	mov    rcx,QWORD PTR [rcx+0x18]
   1ae61:	lea    r13,[rcx+rax*8]
   1ae65:	lea    rax,[rip+0x4b444]        # 662b0 <ue_linfo>
   1ae6c:	mov    rsi,r13
   1ae6f:	mov    QWORD PTR [rsp+0x20],rax
   1ae74:	mov    eax,DWORD PTR [rdx+0x14]
   1ae77:	mov    DWORD PTR [rsp+0x4],eax
   1ae7b:	call   668e0 <writeSyntaxElement_UVLC>
   1ae80:	mov    r12d,eax
   1ae83:	mov    rax,QWORD PTR [rip+0x85f76]        # a0e00 <active_pps>
   1ae8a:	mov    eax,DWORD PTR [rax+0xe4]
   1ae90:	test   eax,eax
   1ae92:	jne    1aeb8 <Partition_BC_Header+0xa8>
   1ae94:	mov    rax,QWORD PTR [rsp+0x38]
   1ae99:	xor    rax,QWORD PTR fs:0x28
   1aea2:	jne    1aedc <Partition_BC_Header+0xcc>
   1aea4:	add    rsp,0x40
   1aea8:	mov    eax,r12d
   1aeab:	pop    rbp
   1aeac:	pop    r12
   1aeae:	pop    r13
   1aeb0:	ret    
   1aeb1:	nop    DWORD PTR [rax+0x0]
   1aeb8:	mov    rax,QWORD PTR [rip+0x6d6f1]        # 885b0 <img>
   1aebf:	mov    rsi,r13
   1aec2:	mov    rdi,rbp
   1aec5:	mov    rax,QWORD PTR [rax+0x3750]
   1aecc:	mov    eax,DWORD PTR [rax]
   1aece:	mov    DWORD PTR [rsp+0x4],eax
   1aed2:	call   668e0 <writeSyntaxElement_UVLC>
   1aed7:	add    r12d,eax
   1aeda:	jmp    1ae94 <Partition_BC_Header+0x84>
   1aedc:	call   4390 <__stack_chk_fail@plt>
   1aee1:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1aeeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001aef0 <init_field>:
   1aef0:	mov    rcx,QWORD PTR [rip+0x6d6b9]        # 885b0 <img>
   1aef7:	mov    rax,QWORD PTR [rip+0x6d6aa]        # 885a8 <stats>
   1aefe:	push   r13
   1af00:	mov    rdi,QWORD PTR [rip+0x6d6b1]        # 885b8 <input>
   1af07:	mov    rsi,QWORD PTR [rip+0x6fa82]        # 8a990 <last_P_no_fld>
   1af0e:	push   r12
   1af10:	push   rbp
   1af11:	push   rbx
   1af12:	mov    edx,DWORD PTR [rcx]
   1af14:	mov    DWORD PTR [rcx+0xc],0x0
   1af1b:	mov    r10d,DWORD PTR [rdi+0x14]
   1af1f:	mov    DWORD PTR [rcx+0x14],0x0
   1af26:	mov    ebp,DWORD PTR [rdi+0x4d4]
   1af2c:	mov    DWORD PTR [rax+0x18],0x0
   1af33:	mov    eax,edx
   1af35:	lea    r12d,[r10+r10*1]
   1af39:	mov    r11d,DWORD PTR [rcx+0x11874]
   1af40:	shr    eax,0x1f
   1af43:	mov    DWORD PTR [rdi+0x14],r12d
   1af47:	add    r12d,0x2
   1af4b:	mov    ebx,DWORD PTR [rcx+0x118e4]
   1af51:	add    eax,edx
   1af53:	mov    edx,DWORD PTR [rcx+0x11ab8]
   1af59:	lea    r13d,[rbp+rbp*1+0x0]
   1af5e:	mov    QWORD PTR [rip+0x6fa1b],rsi        # 8a980 <last_P_no>
   1af65:	sar    eax,1
   1af67:	mov    DWORD PTR [rdi+0x4d4],r13d
   1af6e:	mov    r9d,edx
   1af71:	mov    DWORD PTR [rcx],eax
   1af73:	shr    r9d,0x1f
   1af77:	mov    DWORD PTR [rcx+0x60],0x0
   1af7e:	mov    QWORD PTR [rcx+0x88],0x0
   1af89:	add    r9d,edx
   1af8c:	mov    edx,eax
   1af8e:	imul   edx,r12d
   1af92:	sar    r9d,1
   1af95:	mov    QWORD PTR [rcx+0x90],0x0
   1afa0:	mov    DWORD PTR [rcx+0x11ab8],r9d
   1afa7:	mov    QWORD PTR [rcx+0x98],0x0
   1afb2:	mov    QWORD PTR [rcx+0xa0],0x0
   1afbd:	lea    r8d,[r11+rdx*1]
   1afc1:	test   ebx,ebx
   1afc3:	jne    1b0c8 <init_field+0x1d8>
   1afc9:	mov    DWORD PTR [rcx+0x11870],r8d
   1afd0:	mov    ebx,eax
   1afd2:	test   r11d,r11d
   1afd5:	jne    1afea <init_field+0xfa>
   1afd7:	mov    edx,DWORD PTR [rcx+0x118cc]
   1afdd:	mov    DWORD PTR [rcx+0x118cc],r8d
   1afe4:	mov    DWORD PTR [rcx+0x118d0],edx
   1afea:	mov    edx,DWORD PTR [rdi+0x988]
   1aff0:	test   edx,edx
   1aff2:	je     1b000 <init_field+0x110>
   1aff4:	lea    esi,[rax+0x1]
   1aff7:	cmp    esi,DWORD PTR [rdi+0x8]
   1affa:	je     1b340 <init_field+0x450>
   1b000:	test   eax,eax
   1b002:	je     1b00d <init_field+0x11d>
   1b004:	test   r13d,r13d
   1b007:	jne    1b300 <init_field+0x410>
   1b00d:	mov    r12d,DWORD PTR [rdi+0xca4]
   1b014:	test   r12d,r12d
   1b017:	jne    1b060 <init_field+0x170>
   1b019:	mov    edx,DWORD PTR [rcx+0x18]
   1b01c:	mov    esi,DWORD PTR [rdi+0x994]
   1b022:	cmp    edx,0x2
   1b025:	je     1b380 <init_field+0x490>
   1b02b:	test   esi,esi
   1b02d:	jle    1b03b <init_field+0x14b>
   1b02f:	cmp    DWORD PTR [rcx+0x11870],esi
   1b035:	jge    1b410 <init_field+0x520>
   1b03b:	mov    esi,DWORD PTR [rdi+0x10]
   1b03e:	mov    DWORD PTR [rcx+0x28],esi
   1b041:	cmp    edx,0x3
   1b044:	jne    1b060 <init_field+0x170>
   1b046:	mov    edx,DWORD PTR [rdi+0x4fc]
   1b04c:	mov    DWORD PTR [rcx+0x28],edx
   1b04f:	mov    edx,DWORD PTR [rdi+0x500]
   1b055:	mov    DWORD PTR [rcx+0x2c],edx
   1b058:	nop    DWORD PTR [rax+rax*1+0x0]
   1b060:	mov    edx,DWORD PTR [rcx+0x58]
   1b063:	mov    r8d,DWORD PTR [rdi+0x4c]
   1b067:	mov    esi,DWORD PTR [rcx+0x34]
   1b06a:	mov    DWORD PTR [rcx+0x5c],edx
   1b06d:	test   r8d,r8d
   1b070:	jle    1b08b <init_field+0x19b>
   1b072:	cdq    
   1b073:	idiv   r8d
   1b076:	test   esi,esi
   1b078:	lea    r8d,[rsi+0xf]
   1b07c:	cmovns r8d,esi
   1b080:	sar    r8d,0x4
   1b084:	cdq    
   1b085:	idiv   r8d
   1b088:	mov    DWORD PTR [rcx+0x58],edx
   1b08b:	imul   esi,DWORD PTR [rcx+0x3c]
   1b08f:	lea    eax,[r11+rbx*2]
   1b093:	mov    DWORD PTR [rdi+0x14],r10d
   1b097:	add    r9d,r9d
   1b09a:	mov    DWORD PTR [rdi+0x4d4],ebp
   1b0a0:	mov    DWORD PTR [rcx],eax
   1b0a2:	test   esi,esi
   1b0a4:	lea    eax,[rsi+0xff]
   1b0aa:	mov    DWORD PTR [rcx+0x11ab8],r9d
   1b0b1:	cmovns eax,esi
   1b0b4:	sar    eax,0x8
   1b0b7:	mov    DWORD PTR [rcx+0x10],eax
   1b0ba:	pop    rbx
   1b0bb:	pop    rbp
   1b0bc:	pop    r12
   1b0be:	pop    r13
   1b0c0:	ret    
   1b0c1:	nop    DWORD PTR [rax+0x0]
   1b0c8:	sub    edx,r12d
   1b0cb:	mov    DWORD PTR [rcx+0x118e0],r12d
   1b0d2:	lea    r9d,[rdx+r11*1]
   1b0d6:	test   r11d,r11d
   1b0d9:	jne    1b250 <init_field+0x360>
   1b0df:	add    edx,0x1
   1b0e2:	mov    DWORD PTR [rsi+0x4],r9d
   1b0e6:	mov    DWORD PTR [rsi],edx
   1b0e8:	mov    ebp,DWORD PTR [rcx+0x11ab8]
   1b0ee:	test   ebp,ebp
   1b0f0:	jle    1b127 <init_field+0x237>
   1b0f2:	mov    eax,0x1
   1b0f7:	jmp    1b104 <init_field+0x214>
   1b0f9:	nop    DWORD PTR [rax+0x0]
   1b100:	mov    edx,DWORD PTR [rsi+rax*8-0x8]
   1b104:	sub    edx,DWORD PTR [rcx+0x118e0]
   1b10a:	mov    DWORD PTR [rsi+rax*8],edx
   1b10d:	mov    edx,DWORD PTR [rsi+rax*8-0x4]
   1b111:	sub    edx,DWORD PTR [rcx+0x118e0]
   1b117:	mov    DWORD PTR [rsi+rax*8+0x4],edx
   1b11b:	add    rax,0x1
   1b11f:	cmp    DWORD PTR [rcx+0x11ab8],eax
   1b125:	jge    1b100 <init_field+0x210>
   1b127:	mov    eax,DWORD PTR [rdi+0x988]
   1b12d:	mov    ebx,DWORD PTR [rcx]
   1b12f:	test   eax,eax
   1b131:	je     1b13f <init_field+0x24f>
   1b133:	lea    edx,[rbx+0x1]
   1b136:	cmp    edx,DWORD PTR [rdi+0x8]
   1b139:	je     1b328 <init_field+0x438>
   1b13f:	mov    esi,DWORD PTR [rdi+0x4d4]
   1b145:	pxor   xmm1,xmm1
   1b149:	mov    r10d,DWORD PTR [rdi+0x14]
   1b14d:	pxor   xmm0,xmm0
   1b151:	movsd  xmm2,QWORD PTR [rip+0x5766f]        # 727c8 <INIT_MB_TYPE_I+0x108>
   1b159:	mov    edx,DWORD PTR [rdi+0x528]
   1b15f:	cvtsi2sd xmm1,esi
   1b163:	lea    eax,[r10+0x1]
   1b167:	movsxd r12,DWORD PTR [rcx+0x118e4]
   1b16e:	cvtsi2sd xmm0,eax
   1b172:	addsd  xmm1,xmm2
   1b176:	divsd  xmm0,xmm1
   1b17a:	movsd  QWORD PTR [rcx+0x118d8],xmm0
   1b182:	cmp    edx,0x3
   1b185:	je     1b2a0 <init_field+0x3b0>
   1b18b:	addsd  xmm0,xmm2
   1b18f:	test   edx,edx
   1b191:	jne    1b2b0 <init_field+0x3c0>
   1b197:	pxor   xmm1,xmm1
   1b19b:	cvtsi2sd xmm1,r12d
   1b1a0:	mulsd  xmm0,xmm1
   1b1a4:	cvttsd2si eax,xmm0
   1b1a8:	add    r9d,eax
   1b1ab:	cmp    r8d,r9d
   1b1ae:	lea    eax,[r8-0x1]
   1b1b2:	mov    ebp,esi
   1b1b4:	cmovle r9d,eax
   1b1b8:	mov    eax,r10d
   1b1bb:	shr    ebp,0x1f
   1b1be:	add    ebp,esi
   1b1c0:	shr    eax,0x1f
   1b1c3:	mov    esi,DWORD PTR [rdi+0xca4]
   1b1c9:	add    r10d,eax
   1b1cc:	mov    DWORD PTR [rcx+0x11870],r9d
   1b1d3:	sar    ebp,1
   1b1d5:	sar    r10d,1
   1b1d8:	test   esi,esi
   1b1da:	jne    1b2e0 <init_field+0x3f0>
   1b1e0:	cmp    edx,0x3
   1b1e3:	je     1b350 <init_field+0x460>
   1b1e9:	mov    eax,DWORD PTR [rdi+0x994]
   1b1ef:	mov    edx,DWORD PTR [rcx+0x11b30]
   1b1f5:	test   eax,eax
   1b1f7:	jle    1b3a0 <init_field+0x4b0>
   1b1fd:	cmp    eax,DWORD PTR [rcx+0x11870]
   1b203:	jg     1b3a0 <init_field+0x4b0>
   1b209:	mov    eax,DWORD PTR [rdi+0x990]
   1b20f:	mov    r9d,DWORD PTR [rcx+0x11ab8]
   1b216:	mov    r11d,DWORD PTR [rcx+0x11874]
   1b21d:	mov    esi,DWORD PTR [rcx+0x34]
   1b220:	mov    DWORD PTR [rcx+0x28],eax
   1b223:	test   edx,edx
   1b225:	je     1b08b <init_field+0x19b>
   1b22b:	add    eax,DWORD PTR [rdi+0x99c]
   1b231:	mov    edx,0x33
   1b236:	cmp    eax,0x33
   1b239:	cmovg  eax,edx
   1b23c:	mov    edx,0x0
   1b241:	test   eax,eax
   1b243:	cmovs  eax,edx
   1b246:	mov    DWORD PTR [rcx+0x28],eax
   1b249:	jmp    1b08b <init_field+0x19b>
   1b24e:	xchg   ax,ax
   1b250:	lea    edx,[r8-0x1]
   1b254:	mov    DWORD PTR [rsi+0x4],r9d
   1b258:	mov    DWORD PTR [rsi],edx
   1b25a:	mov    ebx,DWORD PTR [rcx+0x11ab8]
   1b260:	test   ebx,ebx
   1b262:	jle    1b127 <init_field+0x237>
   1b268:	mov    eax,0x1
   1b26d:	jmp    1b274 <init_field+0x384>
   1b26f:	nop
   1b270:	mov    edx,DWORD PTR [rsi+rax*8-0x8]
   1b274:	sub    edx,DWORD PTR [rcx+0x118e0]
   1b27a:	mov    DWORD PTR [rsi+rax*8],edx
   1b27d:	mov    edx,DWORD PTR [rsi+rax*8-0x4]
   1b281:	sub    edx,DWORD PTR [rcx+0x118e0]
   1b287:	mov    DWORD PTR [rsi+rax*8+0x4],edx
   1b28b:	add    rax,0x1
   1b28f:	cmp    DWORD PTR [rcx+0x11ab8],eax
   1b295:	jge    1b270 <init_field+0x380>
   1b297:	jmp    1b127 <init_field+0x237>
   1b29c:	nop    DWORD PTR [rax+0x0]
   1b2a0:	movsd  xmm0,QWORD PTR [rip+0x4f7d8]        # 6aa80 <QP_SCALE_CR+0x40>
   1b2a8:	movsd  QWORD PTR [rcx+0x118d8],xmm2
   1b2b0:	mov    r11,QWORD PTR [rip+0x83df1]        # 9f0a8 <gop_structure>
   1b2b7:	movsxd rax,r12d
   1b2ba:	pxor   xmm1,xmm1
   1b2be:	lea    rax,[rax+rax*2]
   1b2c2:	lea    rax,[r11+rax*8]
   1b2c6:	mov    eax,DWORD PTR [rax-0x14]
   1b2c9:	add    eax,0x1
   1b2cc:	cvtsi2sd xmm1,eax
   1b2d0:	mulsd  xmm0,xmm1
   1b2d4:	cvttsd2si eax,xmm0
   1b2d8:	add    r9d,eax
   1b2db:	jmp    1b1ab <init_field+0x2bb>
   1b2e0:	mov    r9d,DWORD PTR [rcx+0x11ab8]
   1b2e7:	mov    r11d,DWORD PTR [rcx+0x11874]
   1b2ee:	mov    esi,DWORD PTR [rcx+0x34]
   1b2f1:	cmp    edx,0x3
   1b2f4:	jne    1b08b <init_field+0x19b>
   1b2fa:	jmp    1b361 <init_field+0x471>
   1b2fc:	nop    DWORD PTR [rax+0x0]
   1b300:	mov    edx,DWORD PTR [rcx+0x11870]
   1b306:	mov    r12d,DWORD PTR [rdi+0xca4]
   1b30d:	mov    DWORD PTR [rip+0x98e41],edx        # b4154 <nextP_tr_fld>
   1b313:	test   r12d,r12d
   1b316:	jne    1b060 <init_field+0x170>
   1b31c:	jmp    1b019 <init_field+0x129>
   1b321:	nop    DWORD PTR [rax+0x0]
   1b328:	mov    edx,eax
   1b32a:	mov    r8d,eax
   1b32d:	sub    edx,r9d
   1b330:	mov    DWORD PTR [rcx+0x118e0],edx
   1b336:	jmp    1b13f <init_field+0x24f>
   1b33b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b340:	mov    DWORD PTR [rcx+0x11870],edx
   1b346:	jmp    1b000 <init_field+0x110>
   1b34b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b350:	mov    r9d,DWORD PTR [rcx+0x11ab8]
   1b357:	mov    r11d,DWORD PTR [rcx+0x11874]
   1b35e:	mov    esi,DWORD PTR [rcx+0x34]
   1b361:	mov    rdx,QWORD PTR [rip+0x83d40]        # 9f0a8 <gop_structure>
   1b368:	lea    rax,[r12+r12*2]
   1b36c:	lea    rax,[rdx+rax*8]
   1b370:	mov    eax,DWORD PTR [rax-0xc]
   1b373:	mov    DWORD PTR [rcx+0x28],eax
   1b376:	jmp    1b08b <init_field+0x19b>
   1b37b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b380:	test   esi,esi
   1b382:	jle    1b3c8 <init_field+0x4d8>
   1b384:	cmp    DWORD PTR [rcx+0x11870],esi
   1b38a:	jl     1b3c8 <init_field+0x4d8>
   1b38c:	mov    edx,DWORD PTR [rdi+0x998]
   1b392:	mov    DWORD PTR [rcx+0x28],edx
   1b395:	jmp    1b060 <init_field+0x170>
   1b39a:	nop    WORD PTR [rax+rax*1+0x0]
   1b3a0:	mov    eax,DWORD PTR [rdi+0x4d8]
   1b3a6:	mov    DWORD PTR [rcx+0x28],eax
   1b3a9:	test   edx,edx
   1b3ab:	jne    1b3d8 <init_field+0x4e8>
   1b3ad:	mov    r9d,DWORD PTR [rcx+0x11ab8]
   1b3b4:	mov    r11d,DWORD PTR [rcx+0x11874]
   1b3bb:	mov    esi,DWORD PTR [rcx+0x34]
   1b3be:	jmp    1b08b <init_field+0x19b>
   1b3c3:	nop    DWORD PTR [rax+rax*1+0x0]
   1b3c8:	mov    edx,DWORD PTR [rdi+0xc]
   1b3cb:	mov    DWORD PTR [rcx+0x28],edx
   1b3ce:	jmp    1b060 <init_field+0x170>
   1b3d3:	nop    DWORD PTR [rax+rax*1+0x0]
   1b3d8:	add    eax,DWORD PTR [rdi+0x4dc]
   1b3de:	mov    edx,0x33
   1b3e3:	mov    esi,DWORD PTR [rcx+0x34]
   1b3e6:	cmp    eax,0x33
   1b3e9:	mov    r9d,DWORD PTR [rcx+0x11ab8]
   1b3f0:	mov    r11d,DWORD PTR [rcx+0x11874]
   1b3f7:	cmovg  eax,edx
   1b3fa:	mov    edx,0x0
   1b3ff:	test   eax,eax
   1b401:	cmovs  eax,edx
   1b404:	mov    DWORD PTR [rcx+0x28],eax
   1b407:	jmp    1b08b <init_field+0x19b>
   1b40c:	nop    DWORD PTR [rax+0x0]
   1b410:	mov    esi,DWORD PTR [rdi+0x98c]
   1b416:	jmp    1b03e <init_field+0x14e>
   1b41b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001b420 <find_distortion>:
   1b420:	push   r15
   1b422:	push   r14
   1b424:	mov    r14,QWORD PTR [rip+0x6d18d]        # 885b8 <input>
   1b42b:	push   r13
   1b42d:	push   r12
   1b42f:	mov    r12,QWORD PTR [rip+0x6d17a]        # 885b0 <img>
   1b436:	push   rbp
   1b437:	push   rbx
   1b438:	mov    ecx,DWORD PTR [r12+0x1c]
   1b43d:	mov    r11d,DWORD PTR [r14+0x44]
   1b441:	mov    eax,DWORD PTR [r14+0x40]
   1b445:	test   ecx,ecx
   1b447:	je     1b620 <find_distortion+0x200>
   1b44d:	test   eax,eax
   1b44f:	jle    1b7ce <find_distortion+0x3ae>
   1b455:	sub    eax,0x1
   1b458:	mov    r10,QWORD PTR [rip+0x9bf69]        # b73c8 <imgY_org>
   1b45f:	xor    esi,esi
   1b461:	xor    ecx,ecx
   1b463:	mov    r9,QWORD PTR [rip+0x9a9f6]        # b5e60 <imgY_com>
   1b46a:	lea    rbx,[rax+rax*1+0x2]
   1b46f:	lea    r8d,[r11-0x1]
   1b473:	nop    DWORD PTR [rax+rax*1+0x0]
   1b478:	test   r11d,r11d
   1b47b:	jle    1b4c1 <find_distortion+0xa1>
   1b47d:	mov    rdi,QWORD PTR [r12+0x11860]
   1b485:	xor    edx,edx
   1b487:	nop    WORD PTR [rax+rax*1+0x0]
   1b490:	mov    rax,QWORD PTR [r10+rdx*8]
   1b494:	mov    rbp,QWORD PTR [r9+rdx*8]
   1b498:	movzx  eax,WORD PTR [rax+rsi*1]
   1b49c:	movzx  ebp,WORD PTR [rbp+rsi*1+0x0]
   1b4a1:	sub    eax,ebp
   1b4a3:	mov    ebp,eax
   1b4a5:	sar    ebp,0x1f
   1b4a8:	xor    eax,ebp
   1b4aa:	sub    eax,ebp
   1b4ac:	cdqe   
   1b4ae:	movsxd rax,DWORD PTR [rdi+rax*4]
   1b4b2:	add    rcx,rax
   1b4b5:	mov    rax,rdx
   1b4b8:	add    rdx,0x1
   1b4bc:	cmp    r8,rax
   1b4bf:	jne    1b490 <find_distortion+0x70>
   1b4c1:	add    rsi,0x2
   1b4c5:	cmp    rbx,rsi
   1b4c8:	jne    1b478 <find_distortion+0x58>
   1b4ca:	pxor   xmm0,xmm0
   1b4ce:	cvtsi2ss xmm0,rcx
   1b4d3:	mov    edx,DWORD PTR [r12+0x11bfc]
   1b4db:	test   edx,edx
   1b4dd:	je     1b610 <find_distortion+0x1f0>
   1b4e3:	mov    eax,DWORD PTR [r14+0xcec]
   1b4ea:	test   eax,eax
   1b4ec:	jle    1b610 <find_distortion+0x1f0>
   1b4f2:	mov    r15d,DWORD PTR [r14+0xce8]
   1b4f9:	sub    eax,0x1
   1b4fc:	xor    edx,edx
   1b4fe:	xor    ecx,ecx
   1b500:	lea    rax,[rax+rax*1+0x2]
   1b505:	mov    r14,QWORD PTR [rip+0x975c4]        # b2ad0 <imgUV_org>
   1b50c:	mov    r13,QWORD PTR [rip+0x98c15]        # b4128 <imgUV_com>
   1b513:	xor    esi,esi
   1b515:	mov    QWORD PTR [rsp-0x10],rax
   1b51a:	lea    eax,[r15-0x1]
   1b51e:	shl    rax,0x3
   1b522:	mov    QWORD PTR [rsp-0x8],rax
   1b527:	nop    WORD PTR [rax+rax*1+0x0]
   1b530:	test   r15d,r15d
   1b533:	jle    1b5ca <find_distortion+0x1aa>
   1b539:	mov    rax,QWORD PTR [r14]
   1b53c:	mov    r11,QWORD PTR [rsp-0x8]
   1b541:	mov    rbx,QWORD PTR [r12+0x11860]
   1b549:	mov    r10,QWORD PTR [r13+0x0]
   1b54d:	lea    rdi,[rax+0x8]
   1b551:	mov    r9,QWORD PTR [r14+0x8]
   1b555:	mov    r8,QWORD PTR [r13+0x8]
   1b559:	lea    rbp,[rdi+r11*1]
   1b55d:	jmp    1b564 <find_distortion+0x144>
   1b55f:	nop
   1b560:	add    rdi,0x8
   1b564:	mov    r11,QWORD PTR [r10]
   1b567:	mov    rax,QWORD PTR [rax]
   1b56a:	add    r10,0x8
   1b56e:	add    r9,0x8
   1b572:	add    r8,0x8
   1b576:	movzx  r11d,WORD PTR [r11+rdx*1]
   1b57b:	movzx  eax,WORD PTR [rax+rdx*1]
   1b57f:	sub    eax,r11d
   1b582:	mov    r11d,eax
   1b585:	sar    r11d,0x1f
   1b589:	xor    eax,r11d
   1b58c:	sub    eax,r11d
   1b58f:	mov    r11,QWORD PTR [r8-0x8]
   1b593:	cdqe   
   1b595:	movsxd rax,DWORD PTR [rbx+rax*4]
   1b599:	movzx  r11d,WORD PTR [r11+rdx*1]
   1b59e:	add    rsi,rax
   1b5a1:	mov    rax,QWORD PTR [r9-0x8]
   1b5a5:	movzx  eax,WORD PTR [rax+rdx*1]
   1b5a9:	sub    eax,r11d
   1b5ac:	mov    r11d,eax
   1b5af:	sar    r11d,0x1f
   1b5b3:	xor    eax,r11d
   1b5b6:	sub    eax,r11d
   1b5b9:	cdqe   
   1b5bb:	movsxd rax,DWORD PTR [rbx+rax*4]
   1b5bf:	add    rcx,rax
   1b5c2:	mov    rax,rdi
   1b5c5:	cmp    rbp,rdi
   1b5c8:	jne    1b560 <find_distortion+0x140>
   1b5ca:	add    rdx,0x2
   1b5ce:	cmp    QWORD PTR [rsp-0x10],rdx
   1b5d3:	jne    1b530 <find_distortion+0x110>
   1b5d9:	pxor   xmm2,xmm2
   1b5dd:	pxor   xmm1,xmm1
   1b5e1:	cvtsi2ss xmm2,rsi
   1b5e6:	cvtsi2ss xmm1,rcx
   1b5eb:	mov    rax,QWORD PTR [rip+0x6cfae]        # 885a0 <snr>
   1b5f2:	movss  DWORD PTR [rax],xmm0
   1b5f6:	movss  DWORD PTR [rax+0x4],xmm2
   1b5fb:	movss  DWORD PTR [rax+0x8],xmm1
   1b600:	pop    rbx
   1b601:	pop    rbp
   1b602:	pop    r12
   1b604:	pop    r13
   1b606:	pop    r14
   1b608:	pop    r15
   1b60a:	ret    
   1b60b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b610:	pxor   xmm1,xmm1
   1b614:	movaps xmm2,xmm1
   1b617:	jmp    1b5eb <find_distortion+0x1cb>
   1b619:	nop    DWORD PTR [rax+0x0]
   1b620:	mov    r9,QWORD PTR [rip+0x98c19]        # b4240 <imgY_org_frm>
   1b627:	mov    r13,QWORD PTR [rip+0x82c3a]        # 9e268 <imgUV_org_frm>
   1b62e:	mov    QWORD PTR [rip+0x9bd93],r9        # b73c8 <imgY_org>
   1b635:	mov    QWORD PTR [rip+0x97494],r13        # b2ad0 <imgUV_org>
   1b63c:	test   eax,eax
   1b63e:	jle    1b7d7 <find_distortion+0x3b7>
   1b644:	sub    eax,0x1
   1b647:	mov    rbp,QWORD PTR [rip+0x6f35a]        # 8a9a8 <enc_picture>
   1b64e:	xor    esi,esi
   1b650:	xor    ecx,ecx
   1b652:	lea    rbx,[rax+rax*1+0x2]
   1b657:	lea    r10d,[r11-0x1]
   1b65b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b660:	test   r11d,r11d
   1b663:	jle    1b6b6 <find_distortion+0x296>
   1b665:	mov    r8,QWORD PTR [r12+0x11860]
   1b66d:	mov    rdi,QWORD PTR [rbp+0x1918]
   1b674:	xor    edx,edx
   1b676:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b680:	mov    rax,QWORD PTR [r9+rdx*8]
   1b684:	mov    r15,QWORD PTR [rdi+rdx*8]
   1b688:	movzx  eax,WORD PTR [rax+rsi*1]
   1b68c:	movzx  r15d,WORD PTR [r15+rsi*1]
   1b691:	sub    eax,r15d
   1b694:	mov    r15d,eax
   1b697:	sar    r15d,0x1f
   1b69b:	xor    eax,r15d
   1b69e:	sub    eax,r15d
   1b6a1:	cdqe   
   1b6a3:	movsxd rax,DWORD PTR [r8+rax*4]
   1b6a7:	add    rcx,rax
   1b6aa:	mov    rax,rdx
   1b6ad:	add    rdx,0x1
   1b6b1:	cmp    r10,rax
   1b6b4:	jne    1b680 <find_distortion+0x260>
   1b6b6:	add    rsi,0x2
   1b6ba:	cmp    rbx,rsi
   1b6bd:	jne    1b660 <find_distortion+0x240>
   1b6bf:	pxor   xmm0,xmm0
   1b6c3:	cvtsi2ss xmm0,rcx
   1b6c8:	mov    eax,DWORD PTR [r12+0x11bfc]
   1b6d0:	test   eax,eax
   1b6d2:	je     1b610 <find_distortion+0x1f0>
   1b6d8:	mov    eax,DWORD PTR [r14+0xcec]
   1b6df:	test   eax,eax
   1b6e1:	jle    1b610 <find_distortion+0x1f0>
   1b6e7:	mov    r14d,DWORD PTR [r14+0xce8]
   1b6ee:	sub    eax,0x1
   1b6f1:	xor    edx,edx
   1b6f3:	xor    ecx,ecx
   1b6f5:	lea    rax,[rax+rax*1+0x2]
   1b6fa:	mov    r15,QWORD PTR [rip+0x6f2a7]        # 8a9a8 <enc_picture>
   1b701:	xor    esi,esi
   1b703:	mov    QWORD PTR [rsp-0x10],rax
   1b708:	lea    eax,[r14-0x1]
   1b70c:	shl    rax,0x3
   1b710:	mov    QWORD PTR [rsp-0x8],rax
   1b715:	nop    DWORD PTR [rax]
   1b718:	test   r14d,r14d
   1b71b:	jle    1b7ba <find_distortion+0x39a>
   1b721:	mov    rdi,QWORD PTR [r15+0x1940]
   1b728:	mov    rax,QWORD PTR [r13+0x0]
   1b72c:	mov    r11,QWORD PTR [rsp-0x8]
   1b731:	mov    rbx,QWORD PTR [r12+0x11860]
   1b739:	mov    r10,QWORD PTR [rdi]
   1b73c:	mov    r8,QWORD PTR [rdi+0x8]
   1b740:	lea    rdi,[rax+0x8]
   1b744:	mov    r9,QWORD PTR [r13+0x8]
   1b748:	lea    rbp,[rdi+r11*1]
   1b74c:	jmp    1b754 <find_distortion+0x334>
   1b74e:	xchg   ax,ax
   1b750:	add    rdi,0x8
   1b754:	mov    r11,QWORD PTR [r10]
   1b757:	mov    rax,QWORD PTR [rax]
   1b75a:	add    r10,0x8
   1b75e:	add    r9,0x8
   1b762:	add    r8,0x8
   1b766:	movzx  r11d,WORD PTR [r11+rdx*1]
   1b76b:	movzx  eax,WORD PTR [rax+rdx*1]
   1b76f:	sub    eax,r11d
   1b772:	mov    r11d,eax
   1b775:	sar    r11d,0x1f
   1b779:	xor    eax,r11d
   1b77c:	sub    eax,r11d
   1b77f:	mov    r11,QWORD PTR [r8-0x8]
   1b783:	cdqe   
   1b785:	movsxd rax,DWORD PTR [rbx+rax*4]
   1b789:	movzx  r11d,WORD PTR [r11+rdx*1]
   1b78e:	add    rsi,rax
   1b791:	mov    rax,QWORD PTR [r9-0x8]
   1b795:	movzx  eax,WORD PTR [rax+rdx*1]
   1b799:	sub    eax,r11d
   1b79c:	mov    r11d,eax
   1b79f:	sar    r11d,0x1f
   1b7a3:	xor    eax,r11d
   1b7a6:	sub    eax,r11d
   1b7a9:	cdqe   
   1b7ab:	movsxd rax,DWORD PTR [rbx+rax*4]
   1b7af:	add    rcx,rax
   1b7b2:	mov    rax,rdi
   1b7b5:	cmp    rbp,rdi
   1b7b8:	jne    1b750 <find_distortion+0x330>
   1b7ba:	add    rdx,0x2
   1b7be:	cmp    QWORD PTR [rsp-0x10],rdx
   1b7c3:	jne    1b718 <find_distortion+0x2f8>
   1b7c9:	jmp    1b5d9 <find_distortion+0x1b9>
   1b7ce:	pxor   xmm0,xmm0
   1b7d2:	jmp    1b4d3 <find_distortion+0xb3>
   1b7d7:	pxor   xmm0,xmm0
   1b7db:	jmp    1b6c8 <find_distortion+0x2a8>

000000000001b7e0 <writeout_picture>:
   1b7e0:	push   r15
   1b7e2:	push   r14
   1b7e4:	push   r13
   1b7e6:	push   r12
   1b7e8:	push   rbp
   1b7e9:	push   rbx
   1b7ea:	sub    rsp,0x18
   1b7ee:	mov    rax,QWORD PTR [rip+0x6cdbb]        # 885b0 <img>
   1b7f5:	mov    r8d,DWORD PTR [rdi]
   1b7f8:	mov    QWORD PTR [rsp+0x8],rdi
   1b7fd:	mov    QWORD PTR [rax+0x3748],rdi
   1b804:	test   r8d,r8d
   1b807:	jle    1b952 <writeout_picture+0x172>
   1b80d:	movabs r12,0x300000005
   1b817:	xor    r13d,r13d
   1b81a:	nop    WORD PTR [rax+rax*1+0x0]
   1b820:	mov    rax,QWORD PTR [rsp+0x8]
   1b825:	xor    r15d,r15d
   1b828:	mov    rbx,QWORD PTR [rax+r13*8+0x8]
   1b82d:	mov    edi,DWORD PTR [rbx+0x10]
   1b830:	test   edi,edi
   1b832:	jg     1b878 <writeout_picture+0x98>
   1b834:	jmp    1b940 <writeout_picture+0x160>
   1b839:	nop    DWORD PTR [rax+0x0]
   1b840:	mov    QWORD PTR [rbp+0xc],r12
   1b844:	mov    rdi,rbp
   1b847:	mov    DWORD PTR [rbp+0x14],0x0
   1b84e:	add    r15,0x1
   1b852:	call   QWORD PTR [rip+0x9bc48]        # b74a0 <WriteNALU>
   1b858:	mov    rdi,rbp
   1b85b:	mov    r8d,eax
   1b85e:	mov    rax,QWORD PTR [rip+0x6cd43]        # 885a8 <stats>
   1b865:	add    DWORD PTR [rax+0x10],r8d
   1b869:	call   468a0 <FreeNALU>
   1b86e:	cmp    DWORD PTR [rbx+0x10],r15d
   1b872:	jle    1b940 <writeout_picture+0x160>
   1b878:	mov    rax,r15
   1b87b:	mov    rdx,QWORD PTR [rbx+0x18]
   1b87f:	shl    rax,0x4
   1b883:	sub    rax,r15
   1b886:	lea    rax,[rdx+rax*8]
   1b88a:	mov    r14,QWORD PTR [rax]
   1b88d:	mov    rax,QWORD PTR [rip+0x6cd1c]        # 885b0 <img>
   1b894:	mov    edi,DWORD PTR [rax+0x34]
   1b897:	imul   edi,DWORD PTR [rax+0x3c]
   1b89b:	xor    eax,eax
   1b89d:	shl    edi,0x2
   1b8a0:	call   46830 <AllocNALU>
   1b8a5:	mov    rsi,QWORD PTR [r14+0x20]
   1b8a9:	mov    rbp,rax
   1b8ac:	mov    rax,QWORD PTR [rip+0x6ccfd]        # 885b0 <img>
   1b8b3:	mov    ecx,DWORD PTR [rax+0xc]
   1b8b6:	xor    eax,eax
   1b8b8:	test   ecx,ecx
   1b8ba:	sete   al
   1b8bd:	add    eax,0x4
   1b8c0:	mov    DWORD PTR [rbp+0x0],eax
   1b8c3:	mov    edx,DWORD PTR [r14]
   1b8c6:	lea    eax,[rdx+0x1]
   1b8c9:	mov    DWORD PTR [rbp+0x4],eax
   1b8cc:	mov    rax,QWORD PTR [rbp+0x18]
   1b8d0:	lea    rdi,[rax+0x1]
   1b8d4:	call   4440 <memcpy@plt>
   1b8d9:	mov    rax,QWORD PTR [rip+0x6ccd0]        # 885b0 <img>
   1b8e0:	mov    rdx,QWORD PTR [rax+0x3748]
   1b8e7:	mov    esi,DWORD PTR [rdx+0x4]
   1b8ea:	test   esi,esi
   1b8ec:	jne    1b840 <writeout_picture+0x60>
   1b8f2:	mov    rcx,QWORD PTR [rip+0x6ccbf]        # 885b8 <input>
   1b8f9:	mov    edx,DWORD PTR [rax+0x18]
   1b8fc:	mov    ecx,DWORD PTR [rcx+0x93c]
   1b902:	cmp    edx,0x1
   1b905:	je     1b930 <writeout_picture+0x150>
   1b907:	test   ecx,ecx
   1b909:	lea    edx,[r15+0x2]
   1b90d:	mov    ecx,0x1
   1b912:	cmove  edx,ecx
   1b915:	mov    eax,DWORD PTR [rax+0x11b30]
   1b91b:	mov    DWORD PTR [rbp+0xc],edx
   1b91e:	test   eax,eax
   1b920:	setne  al
   1b923:	movzx  eax,al
   1b926:	add    eax,eax
   1b928:	mov    DWORD PTR [rbp+0x10],eax
   1b92b:	jmp    1b844 <writeout_picture+0x64>
   1b930:	lea    esi,[r15+0x2]
   1b934:	test   ecx,ecx
   1b936:	cmovne edx,esi
   1b939:	jmp    1b915 <writeout_picture+0x135>
   1b93b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b940:	mov    rax,QWORD PTR [rsp+0x8]
   1b945:	add    r13,0x1
   1b949:	cmp    DWORD PTR [rax],r13d
   1b94c:	jg     1b820 <writeout_picture+0x40>
   1b952:	add    rsp,0x18
   1b956:	xor    eax,eax
   1b958:	pop    rbx
   1b959:	pop    rbp
   1b95a:	pop    r12
   1b95c:	pop    r13
   1b95e:	pop    r14
   1b960:	pop    r15
   1b962:	ret    
   1b963:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b96e:	xchg   ax,ax

000000000001b970 <MbAffPostProc>:
   1b970:	endbr64 
   1b974:	push   r15
   1b976:	push   r14
   1b978:	push   r13
   1b97a:	push   r12
   1b97c:	push   rbp
   1b97d:	push   rbx
   1b97e:	sub    rsp,0x488
   1b985:	mov    r15,QWORD PTR [rip+0x6cc24]        # 885b0 <img>
   1b98c:	mov    rax,QWORD PTR fs:0x28
   1b995:	mov    QWORD PTR [rsp+0x478],rax
   1b99d:	xor    eax,eax
   1b99f:	mov    rax,QWORD PTR [rip+0x6f002]        # 8a9a8 <enc_picture>
   1b9a6:	mov    ecx,DWORD PTR [r15+0x11bfc]
   1b9ad:	mov    edx,DWORD PTR [r15+0x11b24]
   1b9b4:	mov    rbx,QWORD PTR [rax+0x1918]
   1b9bb:	mov    QWORD PTR [rsp+0x30],rbx
   1b9c0:	test   ecx,ecx
   1b9c2:	jne    1bb0a <MbAffPostProc+0x19a>
   1b9c8:	xor    ebx,ebx
   1b9ca:	lea    rbp,[rsp+0x6c]
   1b9cf:	test   edx,edx
   1b9d1:	jg     1baf8 <MbAffPostProc+0x188>
   1b9d7:	mov    rax,QWORD PTR [rsp+0x478]
   1b9df:	xor    rax,QWORD PTR fs:0x28
   1b9e8:	jne    1bdd1 <MbAffPostProc+0x461>
   1b9ee:	add    rsp,0x488
   1b9f5:	pop    rbx
   1b9f6:	pop    rbp
   1b9f7:	pop    r12
   1b9f9:	pop    r13
   1b9fb:	pop    r14
   1b9fd:	pop    r15
   1b9ff:	ret    
   1ba00:	lea    rsi,[rsp+0x68]
   1ba05:	mov    edi,ebx
   1ba07:	mov    rdx,rbp
   1ba0a:	call   303f0 <get_mb_pos>
   1ba0f:	mov    rdi,QWORD PTR [rsp+0x30]
   1ba14:	movsxd rax,DWORD PTR [rsp+0x6c]
   1ba19:	lea    r11,[rsp+0x4b0]
   1ba21:	movsxd r10,DWORD PTR [rsp+0x68]
   1ba26:	lea    r9,[rdi+rax*8]
   1ba2a:	lea    rdi,[rsp+0x470]
   1ba32:	add    r10,r10
   1ba35:	mov    rsi,rdi
   1ba38:	mov    r8,r9
   1ba3b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ba40:	mov    rdx,QWORD PTR [r8]
   1ba43:	lea    rax,[rsi-0x400]
   1ba4a:	add    rdx,r10
   1ba4d:	nop    DWORD PTR [rax]
   1ba50:	movzx  ecx,WORD PTR [rdx]
   1ba53:	add    rax,0x40
   1ba57:	add    rdx,0x2
   1ba5b:	mov    WORD PTR [rax-0x40],cx
   1ba5f:	cmp    rax,rsi
   1ba62:	jne    1ba50 <MbAffPostProc+0xe0>
   1ba64:	lea    rsi,[rax+0x2]
   1ba68:	add    r8,0x8
   1ba6c:	cmp    rsi,r11
   1ba6f:	jne    1ba40 <MbAffPostProc+0xd0>
   1ba71:	mov    r13d,0x10
   1ba77:	xor    r12d,r12d
   1ba7a:	nop    WORD PTR [rax+rax*1+0x0]
   1ba80:	mov    rsi,r13
   1ba83:	mov    r11,QWORD PTR [r9]
   1ba86:	mov    r8,QWORD PTR [r9+0x8]
   1ba8a:	mov    rdx,r10
   1ba8d:	lea    rax,[rdi-0x400]
   1ba94:	sub    rsi,r12
   1ba97:	nop    WORD PTR [rax+rax*1+0x0]
   1baa0:	movzx  ecx,WORD PTR [rax]
   1baa3:	mov    WORD PTR [r11+rdx*1],cx
   1baa8:	movzx  ecx,WORD PTR [rax+rsi*2]
   1baac:	add    rax,0x40
   1bab0:	mov    WORD PTR [r8+rdx*1],cx
   1bab5:	add    rdx,0x2
   1bab9:	cmp    rax,rdi
   1babc:	jne    1baa0 <MbAffPostProc+0x130>
   1babe:	add    r12,0x1
   1bac2:	add    r9,0x10
   1bac6:	lea    rdi,[rax+0x2]
   1baca:	add    r13,0x1
   1bace:	cmp    r12,0x10
   1bad2:	jne    1ba80 <MbAffPostProc+0x110>
   1bad4:	mov    r15,QWORD PTR [rip+0x6cad5]        # 885b0 <img>
   1badb:	nop    DWORD PTR [rax+rax*1+0x0]
   1bae0:	add    rbx,0x2
   1bae4:	cmp    DWORD PTR [r15+0x11b24],ebx
   1baeb:	jle    1b9d7 <MbAffPostProc+0x67>
   1baf1:	mov    rax,QWORD PTR [rip+0x6eeb0]        # 8a9a8 <enc_picture>
   1baf8:	mov    rax,QWORD PTR [rax+0x1948]
   1baff:	cmp    BYTE PTR [rax+rbx*1],0x0
   1bb03:	je     1bae0 <MbAffPostProc+0x170>
   1bb05:	jmp    1ba00 <MbAffPostProc+0x90>
   1bb0a:	test   edx,edx
   1bb0c:	jle    1b9d7 <MbAffPostProc+0x67>
   1bb12:	mov    rbx,QWORD PTR [rax+0x1940]
   1bb19:	mov    QWORD PTR [rsp+0x18],r15
   1bb1e:	xor    r14d,r14d
   1bb21:	mov    QWORD PTR [rsp+0x40],rbx
   1bb26:	lea    rbx,[rsp+0x6c]
   1bb2b:	mov    QWORD PTR [rsp+0x48],rbx
   1bb30:	lea    rbx,[rsp+0x68]
   1bb35:	mov    QWORD PTR [rsp+0x50],rbx
   1bb3a:	jmp    1bb5d <MbAffPostProc+0x1ed>
   1bb3c:	nop    DWORD PTR [rax+0x0]
   1bb40:	mov    rax,QWORD PTR [rsp+0x18]
   1bb45:	add    r14,0x2
   1bb49:	cmp    DWORD PTR [rax+0x11b24],r14d
   1bb50:	jle    1b9d7 <MbAffPostProc+0x67>
   1bb56:	mov    rax,QWORD PTR [rip+0x6ee4b]        # 8a9a8 <enc_picture>
   1bb5d:	mov    rax,QWORD PTR [rax+0x1948]
   1bb64:	cmp    BYTE PTR [rax+r14*1],0x0
   1bb69:	je     1bb40 <MbAffPostProc+0x1d0>
   1bb6b:	mov    rdx,QWORD PTR [rsp+0x48]
   1bb70:	mov    rsi,QWORD PTR [rsp+0x50]
   1bb75:	mov    edi,r14d
   1bb78:	lea    r15,[rsp+0x70]
   1bb7d:	lea    rbp,[rsp+0x4b0]
   1bb85:	call   303f0 <get_mb_pos>
   1bb8a:	movsxd rax,DWORD PTR [rsp+0x6c]
   1bb8f:	mov    rbx,QWORD PTR [rsp+0x30]
   1bb94:	lea    rdx,[rsp+0x470]
   1bb9c:	movsxd r11,DWORD PTR [rsp+0x68]
   1bba1:	mov    rdi,rdx
   1bba4:	lea    r10,[rbx+rax*8]
   1bba8:	mov    r8,rax
   1bbab:	mov    r9,r11
   1bbae:	mov    rbx,r10
   1bbb1:	add    r11,r11
   1bbb4:	nop    DWORD PTR [rax+0x0]
   1bbb8:	mov    rcx,QWORD PTR [rbx]
   1bbbb:	lea    rax,[rdi-0x400]
   1bbc2:	add    rcx,r11
   1bbc5:	nop    DWORD PTR [rax]
   1bbc8:	movzx  esi,WORD PTR [rcx]
   1bbcb:	add    rax,0x40
   1bbcf:	add    rcx,0x2
   1bbd3:	mov    WORD PTR [rax-0x40],si
   1bbd7:	cmp    rax,rdi
   1bbda:	jne    1bbc8 <MbAffPostProc+0x258>
   1bbdc:	lea    rdi,[rax+0x2]
   1bbe0:	add    rbx,0x8
   1bbe4:	cmp    rdi,rbp
   1bbe7:	jne    1bbb8 <MbAffPostProc+0x248>
   1bbe9:	mov    r13d,0x10
   1bbef:	xor    r12d,r12d
   1bbf2:	nop    WORD PTR [rax+rax*1+0x0]
   1bbf8:	mov    rdi,r13
   1bbfb:	mov    rbp,QWORD PTR [r10]
   1bbfe:	mov    rbx,QWORD PTR [r10+0x8]
   1bc02:	mov    rcx,r11
   1bc05:	lea    rax,[rdx-0x400]
   1bc0c:	sub    rdi,r12
   1bc0f:	nop
   1bc10:	movzx  esi,WORD PTR [rax]
   1bc13:	mov    WORD PTR [rbp+rcx*1+0x0],si
   1bc18:	movzx  esi,WORD PTR [rax+rdi*2]
   1bc1c:	add    rax,0x40
   1bc20:	mov    WORD PTR [rbx+rcx*1],si
   1bc24:	add    rcx,0x2
   1bc28:	cmp    rax,rdx
   1bc2b:	jne    1bc10 <MbAffPostProc+0x2a0>
   1bc2d:	add    r12,0x1
   1bc31:	add    r10,0x10
   1bc35:	lea    rdx,[rax+0x2]
   1bc39:	add    r13,0x1
   1bc3d:	cmp    r12,0x10
   1bc41:	jne    1bbf8 <MbAffPostProc+0x288>
   1bc43:	mov    rbx,QWORD PTR [rip+0x6c966]        # 885b0 <img>
   1bc4a:	mov    ecx,0x10
   1bc4f:	mov    QWORD PTR [rsp+0x58],r14
   1bc54:	mov    eax,ecx
   1bc56:	mov    r11d,DWORD PTR [rbx+0x11c04]
   1bc5d:	cdq    
   1bc5e:	mov    QWORD PTR [rsp+0x18],rbx
   1bc63:	mov    r12d,DWORD PTR [rbx+0x11c08]
   1bc6a:	idiv   r11d
   1bc6d:	lea    edi,[r12+r12*1]
   1bc71:	lea    r13d,[r12-0x1]
   1bc76:	mov    DWORD PTR [rsp+0x24],edi
   1bc7a:	mov    esi,eax
   1bc7c:	mov    eax,r9d
   1bc7f:	cdq    
   1bc80:	idiv   esi
   1bc82:	movsxd r9,eax
   1bc85:	mov    eax,ecx
   1bc87:	cdq    
   1bc88:	mov    DWORD PTR [rsp+0x68],r9d
   1bc8d:	lea    rbp,[r9+r9*1]
   1bc91:	idiv   r12d
   1bc94:	mov    ecx,eax
   1bc96:	mov    eax,r8d
   1bc99:	cdq    
   1bc9a:	idiv   ecx
   1bc9c:	mov    edx,eax
   1bc9e:	mov    DWORD PTR [rsp+0x20],eax
   1bca2:	mov    DWORD PTR [rsp+0x6c],eax
   1bca6:	mov    rax,QWORD PTR [rsp+0x40]
   1bcab:	add    edi,edx
   1bcad:	mov    r14d,edi
   1bcb0:	mov    rbx,rax
   1bcb3:	add    rax,0x10
   1bcb7:	mov    QWORD PTR [rsp+0x28],rax
   1bcbc:	lea    eax,[r11-0x1]
   1bcc0:	lea    r8,[r9+rax*1+0x1]
   1bcc5:	add    r8,r8
   1bcc8:	mov    QWORD PTR [rsp+0x38],r8
   1bccd:	mov    eax,DWORD PTR [rsp+0x24]
   1bcd1:	test   eax,eax
   1bcd3:	jle    1bd28 <MbAffPostProc+0x3b8>
   1bcd5:	mov    esi,DWORD PTR [rsp+0x20]
   1bcd9:	mov    r10,QWORD PTR [rsp+0x38]
   1bcde:	mov    rdi,r15
   1bce1:	nop    DWORD PTR [rax+0x0]
   1bce8:	test   r11d,r11d
   1bceb:	jle    1bd1c <MbAffPostProc+0x3ac>
   1bced:	mov    rdx,QWORD PTR [rbx]
   1bcf0:	movsxd rax,esi
   1bcf3:	mov    r9,QWORD PTR [rdx+rax*8]
   1bcf7:	mov    rdx,rdi
   1bcfa:	lea    rax,[r9+rbp*1]
   1bcfe:	add    r9,r10
   1bd01:	nop    DWORD PTR [rax+0x0]
   1bd08:	movzx  ecx,WORD PTR [rax]
   1bd0b:	add    rax,0x2
   1bd0f:	add    rdx,0x40
   1bd13:	mov    WORD PTR [rdx-0x40],cx
   1bd17:	cmp    r9,rax
   1bd1a:	jne    1bd08 <MbAffPostProc+0x398>
   1bd1c:	add    esi,0x1
   1bd1f:	add    rdi,0x2
   1bd23:	cmp    r14d,esi
   1bd26:	jne    1bce8 <MbAffPostProc+0x378>
   1bd28:	test   r12d,r12d
   1bd2b:	jle    1bdb8 <MbAffPostProc+0x448>
   1bd31:	mov    eax,DWORD PTR [rsp+0x20]
   1bd35:	xor    r9d,r9d
   1bd38:	lea    r10d,[rax+0x1]
   1bd3c:	nop    DWORD PTR [rax+0x0]
   1bd40:	test   r11d,r11d
   1bd43:	jle    1bda6 <MbAffPostProc+0x436>
   1bd45:	mov    rdx,QWORD PTR [rbx]
   1bd48:	lea    eax,[r10-0x1]
   1bd4c:	lea    ecx,[r12+r9*1]
   1bd50:	mov    QWORD PTR [rsp+0x8],rbp
   1bd55:	cdqe   
   1bd57:	movsxd rcx,ecx
   1bd5a:	mov    QWORD PTR [rsp+0x10],r9
   1bd5f:	mov    rdi,QWORD PTR [rdx+rax*8]
   1bd63:	movsxd rax,r10d
   1bd66:	mov    rsi,QWORD PTR [rdx+rax*8]
   1bd6a:	mov    rax,r9
   1bd6d:	lea    rdx,[r15+rcx*2]
   1bd71:	sub    rax,rcx
   1bd74:	mov    rcx,rax
   1bd77:	mov    rax,rbp
   1bd7a:	nop    WORD PTR [rax+rax*1+0x0]
   1bd80:	movzx  r9d,WORD PTR [rdx+rcx*2]
   1bd85:	add    rdx,0x40
   1bd89:	mov    WORD PTR [rdi+rax*1],r9w
   1bd8e:	movzx  r9d,WORD PTR [rdx-0x40]
   1bd93:	mov    WORD PTR [rsi+rax*1],r9w
   1bd98:	add    rax,0x2
   1bd9c:	cmp    r8,rax
   1bd9f:	jne    1bd80 <MbAffPostProc+0x410>
   1bda1:	mov    r9,QWORD PTR [rsp+0x10]
   1bda6:	lea    rax,[r9+0x1]
   1bdaa:	add    r10d,0x2
   1bdae:	cmp    r13,r9
   1bdb1:	je     1bdb8 <MbAffPostProc+0x448>
   1bdb3:	mov    r9,rax
   1bdb6:	jmp    1bd40 <MbAffPostProc+0x3d0>
   1bdb8:	add    rbx,0x8
   1bdbc:	cmp    QWORD PTR [rsp+0x28],rbx
   1bdc1:	jne    1bccd <MbAffPostProc+0x35d>
   1bdc7:	mov    r14,QWORD PTR [rsp+0x58]
   1bdcc:	jmp    1bb40 <MbAffPostProc+0x1d0>
   1bdd1:	call   4390 <__stack_chk_fail@plt>
   1bdd6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001bde0 <code_a_picture>:
   1bde0:	endbr64 
   1bde4:	mov    rax,QWORD PTR [rip+0x6c7c5]        # 885b0 <img>
   1bdeb:	mov    ecx,DWORD PTR [rip+0x6ccfb]        # 88aec <start_frame_no_in_this_IGOP>
   1bdf1:	push   r12
   1bdf3:	mov    r12,rdi
   1bdf6:	push   rbp
   1bdf7:	push   rbx
   1bdf8:	mov    QWORD PTR [rax+0x3748],rdi
   1bdff:	cmp    DWORD PTR [rax],ecx
   1be01:	je     1bf5d <code_a_picture+0x17d>
   1be07:	mov    rdx,QWORD PTR [rip+0x6c7aa]        # 885b8 <input>
   1be0e:	mov    edx,DWORD PTR [rdx+0x4cc]
   1be14:	test   edx,edx
   1be16:	jne    1bf4c <code_a_picture+0x16c>
   1be1c:	mov    DWORD PTR [r12+0x4],edx
   1be21:	xor    eax,eax
   1be23:	mov    DWORD PTR [r12],0x0
   1be2b:	mov    DWORD PTR [r12+0x32c],0x0
   1be37:	mov    QWORD PTR [r12+0x330],0x0
   1be43:	call   20710 <RandomIntraNewPicture>
   1be48:	mov    rdi,QWORD PTR [rip+0x6c761]        # 885b0 <img>
   1be4f:	mov    rsi,QWORD PTR [rip+0x84faa]        # a0e00 <active_pps>
   1be56:	mov    rdx,QWORD PTR [rip+0x9a013]        # b5e70 <active_sps>
   1be5d:	mov    DWORD PTR [rdi+0x11bcc],0x1
   1be67:	call   19380 <FmoInit>
   1be6c:	xor    eax,eax
   1be6e:	call   19ac0 <FmoStartPicture>
   1be73:	xor    eax,eax
   1be75:	call   498e0 <CalculateQuantParam>
   1be7a:	xor    eax,eax
   1be7c:	call   4a760 <CalculateOffsetParam>
   1be81:	mov    rax,QWORD PTR [rip+0x6c730]        # 885b8 <input>
   1be88:	mov    esi,DWORD PTR [rax+0xc94]
   1be8e:	test   esi,esi
   1be90:	jne    1bfc0 <code_a_picture+0x1e0>
   1be96:	mov    rax,QWORD PTR [rip+0x6c713]        # 885b0 <img>
   1be9d:	xor    ebx,ebx
   1be9f:	xor    ebp,ebp
   1bea1:	mov    ecx,DWORD PTR [rax+0x10]
   1bea4:	test   ecx,ecx
   1bea6:	jg     1bee4 <code_a_picture+0x104>
   1bea8:	jmp    1befe <code_a_picture+0x11e>
   1beaa:	nop    WORD PTR [rax+rax*1+0x0]
   1beb0:	mov    rsi,r12
   1beb3:	mov    edi,ebx
   1beb5:	call   60b60 <encode_one_slice>
   1beba:	add    ebp,eax
   1bebc:	mov    rax,QWORD PTR [rip+0x6c6ed]        # 885b0 <img>
   1bec3:	mov    edi,DWORD PTR [rax+0xc]
   1bec6:	call   19ce0 <FmoSetLastMacroblockInSlice>
   1becb:	mov    rax,QWORD PTR [rip+0x6c6de]        # 885b0 <img>
   1bed2:	add    DWORD PTR [rax+0x14],0x1
   1bed6:	mov    rax,QWORD PTR [rip+0x6c6cb]        # 885a8 <stats>
   1bedd:	mov    DWORD PTR [rax+0x18],0x0
   1bee4:	mov    edi,ebx
   1bee6:	call   19d60 <FmoSliceGroupCompletelyCoded>
   1beeb:	test   eax,eax
   1beed:	je     1beb0 <code_a_picture+0xd0>
   1beef:	mov    rax,QWORD PTR [rip+0x6c6ba]        # 885b0 <img>
   1bef6:	add    ebx,0x1
   1bef9:	cmp    DWORD PTR [rax+0x10],ebp
   1befc:	jg     1bee4 <code_a_picture+0x104>
   1befe:	xor    eax,eax
   1bf00:	call   19b50 <FmoEndPicture>
   1bf05:	mov    rax,QWORD PTR [rip+0x6c6ac]        # 885b8 <input>
   1bf0c:	mov    rdi,QWORD PTR [rip+0x6c69d]        # 885b0 <img>
   1bf13:	cmp    DWORD PTR [rax+0x9a0],0x2
   1bf1a:	je     1bf6b <code_a_picture+0x18b>
   1bf1c:	mov    rax,QWORD PTR [rip+0x6ea85]        # 8a9a8 <enc_picture>
   1bf23:	mov    rdx,QWORD PTR [rax+0x1940]
   1bf2a:	mov    rsi,QWORD PTR [rax+0x1918]
   1bf31:	call   265e0 <DeblockFrame>
   1bf36:	mov    rax,QWORD PTR [rip+0x6c673]        # 885b0 <img>
   1bf3d:	mov    eax,DWORD PTR [rax+0x11ad0]
   1bf43:	test   eax,eax
   1bf45:	jne    1bfb5 <code_a_picture+0x1d5>
   1bf47:	pop    rbx
   1bf48:	pop    rbp
   1bf49:	pop    r12
   1bf4b:	ret    
   1bf4c:	mov    ecx,DWORD PTR [rax+0x18]
   1bf4f:	xor    edx,edx
   1bf51:	sub    ecx,0x2
   1bf54:	cmp    ecx,0x2
   1bf57:	ja     1be1c <code_a_picture+0x3c>
   1bf5d:	xor    edx,edx
   1bf5f:	cmp    DWORD PTR [rax+0x1c],0x2
   1bf63:	setne  dl
   1bf66:	jmp    1be1c <code_a_picture+0x3c>
   1bf6b:	cmp    DWORD PTR [rdi+0x18],0x1
   1bf6f:	je     1bf1c <code_a_picture+0x13c>
   1bf71:	mov    edx,DWORD PTR [rax+0xb58]
   1bf77:	test   edx,edx
   1bf79:	jle    1bf1c <code_a_picture+0x13c>
   1bf7b:	xor    ebx,ebx
   1bf7d:	nop    DWORD PTR [rax]
   1bf80:	mov    rax,QWORD PTR [rip+0x6c611]        # 88598 <decs>
   1bf87:	xor    edx,edx
   1bf89:	mov    rax,QWORD PTR [rax+0x18]
   1bf8d:	mov    rsi,QWORD PTR [rax+rbx*8]
   1bf91:	add    rbx,0x1
   1bf95:	call   265e0 <DeblockFrame>
   1bf9a:	mov    rax,QWORD PTR [rip+0x6c617]        # 885b8 <input>
   1bfa1:	mov    rdi,QWORD PTR [rip+0x6c608]        # 885b0 <img>
   1bfa8:	cmp    DWORD PTR [rax+0xb58],ebx
   1bfae:	jg     1bf80 <code_a_picture+0x1a0>
   1bfb0:	jmp    1bf1c <code_a_picture+0x13c>
   1bfb5:	pop    rbx
   1bfb6:	xor    eax,eax
   1bfb8:	pop    rbp
   1bfb9:	pop    r12
   1bfbb:	jmp    1b970 <MbAffPostProc>
   1bfc0:	xor    eax,eax
   1bfc2:	call   49f30 <CalculateQuant8Param>
   1bfc7:	xor    eax,eax
   1bfc9:	call   4a9d0 <CalculateOffset8Param>
   1bfce:	jmp    1be96 <code_a_picture+0xb6>
   1bfd3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1bfde:	xchg   ax,ax

000000000001bfe0 <copy_params>:
   1bfe0:	endbr64 
   1bfe4:	mov    rdx,QWORD PTR [rip+0x99e85]        # b5e70 <active_sps>
   1bfeb:	mov    rax,QWORD PTR [rip+0x6e9b6]        # 8a9a8 <enc_picture>
   1bff2:	mov    ecx,DWORD PTR [rdx+0x47c]
   1bff8:	mov    esi,DWORD PTR [rdx+0x20]
   1bffb:	mov    DWORD PTR [rax+0x199c],ecx
   1c001:	mov    ecx,DWORD PTR [rdx+0x488]
   1c007:	mov    DWORD PTR [rax+0x1998],esi
   1c00d:	mov    DWORD PTR [rax+0x19a0],ecx
   1c013:	test   ecx,ecx
   1c015:	je     1c050 <copy_params+0x70>
   1c017:	mov    ecx,DWORD PTR [rdx+0x48c]
   1c01d:	mov    DWORD PTR [rax+0x19a4],ecx
   1c023:	mov    ecx,DWORD PTR [rdx+0x490]
   1c029:	mov    DWORD PTR [rax+0x19a8],ecx
   1c02f:	mov    ecx,DWORD PTR [rdx+0x494]
   1c035:	mov    edx,DWORD PTR [rdx+0x498]
   1c03b:	mov    DWORD PTR [rax+0x19ac],ecx
   1c041:	mov    DWORD PTR [rax+0x19b0],edx
   1c047:	ret    
   1c048:	nop    DWORD PTR [rax+rax*1+0x0]
   1c050:	mov    QWORD PTR [rax+0x19a4],0x0
   1c05b:	mov    QWORD PTR [rax+0x19ac],0x0
   1c066:	ret    
   1c067:	nop    WORD PTR [rax+rax*1+0x0]

000000000001c070 <frame_picture>:
   1c070:	endbr64 
   1c074:	mov    rax,QWORD PTR [rip+0x6c535]        # 885b0 <img>
   1c07b:	push   rbx
   1c07c:	mov    rbx,rdi
   1c07f:	mov    edx,DWORD PTR [rax+0x11b28]
   1c085:	mov    r8d,DWORD PTR [rax+0x40]
   1c089:	mov    DWORD PTR [rax+0x1c],0x0
   1c090:	mov    ecx,DWORD PTR [rax+0x38]
   1c093:	mov    r9d,DWORD PTR [rax+0x34]
   1c097:	mov    DWORD PTR [rax+0x11b24],edx
   1c09d:	mov    edx,DWORD PTR [rax+0x3c]
   1c0a0:	cmp    esi,0x2
   1c0a3:	je     1c1f8 <frame_picture+0x188>
   1c0a9:	cmp    esi,0x1
   1c0ac:	mov    edi,0x0
   1c0b1:	mov    esi,r9d
   1c0b4:	je     1c1e0 <frame_picture+0x170>
   1c0ba:	call   31560 <alloc_storable_picture>
   1c0bf:	mov    QWORD PTR [rip+0x6e8ea],rax        # 8a9b0 <enc_frame_picture>
   1c0c6:	mov    rdx,QWORD PTR [rip+0x6c4e3]        # 885b0 <img>
   1c0cd:	mov    ecx,DWORD PTR [rdx+0x11b08]
   1c0d3:	mov    DWORD PTR [rax+0x4],ecx
   1c0d6:	mov    esi,DWORD PTR [rdx+0x11b00]
   1c0dc:	mov    DWORD PTR [rdx+0x11b0c],ecx
   1c0e2:	mov    DWORD PTR [rax+0x8],esi
   1c0e5:	mov    esi,DWORD PTR [rdx+0x11b04]
   1c0eb:	mov    DWORD PTR [rax+0x10],ecx
   1c0ee:	mov    DWORD PTR [rax+0xc],esi
   1c0f1:	mov    ecx,DWORD PTR [rdx+0x11b10]
   1c0f7:	mov    DWORD PTR [rax+0x190c],0x1
   1c101:	mov    DWORD PTR [rax+0x18dc],ecx
   1c107:	mov    DWORD PTR [rax+0x18d8],ecx
   1c10d:	mov    rcx,QWORD PTR [rip+0x6c4a4]        # 885b8 <input>
   1c114:	mov    ecx,DWORD PTR [rcx+0xb44]
   1c11a:	test   ecx,ecx
   1c11c:	setne  cl
   1c11f:	movzx  ecx,cl
   1c122:	mov    DWORD PTR [rdx+0x11ad0],ecx
   1c128:	mov    DWORD PTR [rax+0x1910],ecx
   1c12e:	mov    QWORD PTR [rip+0x6e873],rax        # 8a9a8 <enc_picture>
   1c135:	xor    eax,eax
   1c137:	call   1bfe0 <copy_params>
   1c13c:	mov    rax,QWORD PTR [rip+0x6c465]        # 885a8 <stats>
   1c143:	mov    rdi,rbx
   1c146:	lea    rdx,[rax+0x5bc]
   1c14d:	mov    DWORD PTR [rax+0x5bc],0x0
   1c157:	mov    QWORD PTR [rax+0x5c8],rdx
   1c15e:	mov    rax,QWORD PTR [rip+0x6c44b]        # 885b0 <img>
   1c165:	mov    DWORD PTR [rax+0x11878],0x0
   1c16f:	call   1bde0 <code_a_picture>
   1c174:	mov    rsi,QWORD PTR [rip+0x6c435]        # 885b0 <img>
   1c17b:	mov    rax,QWORD PTR [rsi+0x3750]
   1c182:	mov    edi,DWORD PTR [rsi+0x1c]
   1c185:	mov    rax,QWORD PTR [rax+0x18]
   1c189:	mov    rax,QWORD PTR [rax]
   1c18c:	mov    eax,DWORD PTR [rax]
   1c18e:	shl    eax,0x3
   1c191:	mov    DWORD PTR [rbx+0x328],eax
   1c197:	test   edi,edi
   1c199:	je     1c1a0 <frame_picture+0x130>
   1c19b:	pop    rbx
   1c19c:	ret    
   1c19d:	nop    DWORD PTR [rax]
   1c1a0:	mov    rdi,QWORD PTR [rip+0x6c3f9]        # 885a0 <snr>
   1c1a7:	xor    eax,eax
   1c1a9:	call   1b420 <find_distortion>
   1c1ae:	mov    rax,QWORD PTR [rip+0x6c3eb]        # 885a0 <snr>
   1c1b5:	movss  xmm0,DWORD PTR [rax]
   1c1b9:	movss  DWORD PTR [rbx+0x32c],xmm0
   1c1c1:	movss  xmm0,DWORD PTR [rax+0x4]
   1c1c6:	movss  DWORD PTR [rbx+0x330],xmm0
   1c1ce:	movss  xmm0,DWORD PTR [rax+0x8]
   1c1d3:	movss  DWORD PTR [rbx+0x334],xmm0
   1c1db:	pop    rbx
   1c1dc:	ret    
   1c1dd:	nop    DWORD PTR [rax]
   1c1e0:	call   31560 <alloc_storable_picture>
   1c1e5:	mov    QWORD PTR [rip+0x6e79c],rax        # 8a988 <enc_frame_picture2>
   1c1ec:	jmp    1c0c6 <frame_picture+0x56>
   1c1f1:	nop    DWORD PTR [rax+0x0]
   1c1f8:	mov    esi,r9d
   1c1fb:	xor    edi,edi
   1c1fd:	call   31560 <alloc_storable_picture>
   1c202:	mov    QWORD PTR [rip+0x6e7af],rax        # 8a9b8 <enc_frame_picture3>
   1c209:	jmp    1c0c6 <frame_picture+0x56>
   1c20e:	xchg   ax,ax

000000000001c210 <field_picture>:
   1c210:	endbr64 
   1c214:	mov    rdx,QWORD PTR [rip+0x6c38d]        # 885a8 <stats>
   1c21b:	mov    rax,QWORD PTR [rip+0x6c38e]        # 885b0 <img>
   1c222:	push   r12
   1c224:	push   rbp
   1c225:	mov    rbp,rsi
   1c228:	lea    rcx,[rdx+0x5c0]
   1c22f:	push   rbx
   1c230:	mov    rbx,rdi
   1c233:	mov    esi,DWORD PTR [rax+0x34]
   1c236:	mov    QWORD PTR [rdx+0x5c8],rcx
   1c23d:	mov    rcx,QWORD PTR [rip+0x6c374]        # 885b8 <input>
   1c244:	mov    DWORD PTR [rdx+0x5c0],0x0
   1c24e:	mov    edx,DWORD PTR [rax+0x11c1c]
   1c254:	add    edx,DWORD PTR [rcx+0x44]
   1c257:	mov    edi,DWORD PTR [rax+0x1c]
   1c25a:	shl    DWORD PTR [rax],1
   1c25c:	mov    ecx,edx
   1c25e:	shr    edx,0x1f
   1c261:	mov    DWORD PTR [rax+0x11878],0x1
   1c26b:	add    edx,ecx
   1c26d:	mov    ecx,DWORD PTR [rax+0x44]
   1c270:	shl    DWORD PTR [rax+0x11ab8],1
   1c276:	sar    edx,1
   1c278:	mov    r8d,ecx
   1c27b:	mov    DWORD PTR [rax+0x3c],edx
   1c27e:	shr    r8d,0x1f
   1c282:	add    r8d,ecx
   1c285:	mov    ecx,DWORD PTR [rax+0x11b28]
   1c28b:	sar    r8d,1
   1c28e:	shr    ecx,1
   1c290:	mov    DWORD PTR [rax+0x40],r8d
   1c294:	mov    DWORD PTR [rax+0x11b24],ecx
   1c29a:	mov    ecx,DWORD PTR [rax+0x38]
   1c29d:	call   31560 <alloc_storable_picture>
   1c2a2:	mov    rdx,QWORD PTR [rip+0x6c307]        # 885b0 <img>
   1c2a9:	mov    QWORD PTR [rip+0x6e6e8],rax        # 8a998 <enc_top_picture>
   1c2b0:	mov    ecx,DWORD PTR [rdx+0x11b00]
   1c2b6:	mov    esi,DWORD PTR [rdx+0x11b10]
   1c2bc:	mov    DWORD PTR [rax+0x190c],0x0
   1c2c6:	mov    DWORD PTR [rax+0x4],ecx
   1c2c9:	mov    DWORD PTR [rax+0x10],ecx
   1c2cc:	mov    DWORD PTR [rax+0x18dc],esi
   1c2d2:	mov    DWORD PTR [rax+0x18d8],esi
   1c2d8:	mov    DWORD PTR [rdx+0x11ad0],0x0
   1c2e2:	mov    DWORD PTR [rax+0x1910],0x0
   1c2ec:	mov    DWORD PTR [rdx+0x11b0c],ecx
   1c2f2:	mov    DWORD PTR [rdx+0x1c],0x1
   1c2f9:	mov    QWORD PTR [rip+0x6e6a8],rax        # 8a9a8 <enc_picture>
   1c300:	xor    eax,eax
   1c302:	call   1bfe0 <copy_params>
   1c307:	mov    rax,QWORD PTR [rip+0x6c2a2]        # 885b0 <img>
   1c30e:	mov    DWORD PTR [rax+0x11874],0x0
   1c318:	mov    rax,QWORD PTR [rip+0x9a3c9]        # b66e8 <imgY_org_top>
   1c31f:	mov    QWORD PTR [rip+0x9b0a2],rax        # b73c8 <imgY_org>
   1c326:	mov    rax,QWORD PTR [rip+0x82d63]        # 9f090 <imgUV_org_top>
   1c32d:	mov    QWORD PTR [rip+0x9679c],rax        # b2ad0 <imgUV_org>
   1c334:	xor    eax,eax
   1c336:	call   1aef0 <init_field>
   1c33b:	mov    rax,QWORD PTR [rip+0x6c26e]        # 885b0 <img>
   1c342:	cmp    DWORD PTR [rax+0x18],0x1
   1c346:	jne    1c34f <field_picture+0x13f>
   1c348:	sub    DWORD PTR [rip+0x97e05],0x1        # b4154 <nextP_tr_fld>
   1c34f:	mov    rdx,QWORD PTR [rip+0x6c262]        # 885b8 <input>
   1c356:	mov    DWORD PTR [rax+0x11878],0x1
   1c360:	mov    ecx,DWORD PTR [rdx+0xca4]
   1c366:	test   ecx,ecx
   1c368:	je     1c3ae <field_picture+0x19e>
   1c36a:	mov    ecx,DWORD PTR [rdx+0xcb0]
   1c370:	cmp    DWORD PTR [rdx+0xb40],0x1
   1c377:	mov    DWORD PTR [rax+0x11bac],ecx
   1c37d:	je     1c658 <field_picture+0x448>
   1c383:	xor    edx,edx
   1c385:	mov    esi,0x1
   1c38a:	xor    edi,edi
   1c38c:	call   4b390 <rc_init_pict>
   1c391:	mov    r12,QWORD PTR [rip+0x6c218]        # 885b0 <img>
   1c398:	mov    edi,0x1
   1c39d:	call   4d160 <updateQuantizationParameter>
   1c3a2:	mov    DWORD PTR [r12+0x28],eax
   1c3a7:	mov    rax,QWORD PTR [rip+0x6c202]        # 885b0 <img>
   1c3ae:	mov    DWORD PTR [rax+0x11b94],0x1
   1c3b8:	mov    rdi,QWORD PTR [rip+0x84a59]        # a0e18 <top_pic>
   1c3bf:	call   1bde0 <code_a_picture>
   1c3c4:	mov    rax,QWORD PTR [rip+0x6e5dd]        # 8a9a8 <enc_picture>
   1c3cb:	mov    rdi,QWORD PTR [rip+0x6e5c6]        # 8a998 <enc_top_picture>
   1c3d2:	mov    DWORD PTR [rax],0x1
   1c3d8:	call   352a0 <store_picture_in_dpb>
   1c3dd:	mov    rax,QWORD PTR [rip+0x6c1cc]        # 885b0 <img>
   1c3e4:	mov    rdx,QWORD PTR [rax+0x3750]
   1c3eb:	mov    edi,DWORD PTR [rax+0x1c]
   1c3ee:	mov    r8d,DWORD PTR [rax+0x40]
   1c3f2:	mov    ecx,DWORD PTR [rax+0x38]
   1c3f5:	mov    rdx,QWORD PTR [rdx+0x18]
   1c3f9:	mov    esi,DWORD PTR [rax+0x34]
   1c3fc:	mov    rdx,QWORD PTR [rdx]
   1c3ff:	mov    r12d,DWORD PTR [rdx]
   1c402:	mov    edx,DWORD PTR [rax+0x3c]
   1c405:	shl    r12d,0x3
   1c409:	mov    DWORD PTR [rbx+0x328],r12d
   1c410:	call   31560 <alloc_storable_picture>
   1c415:	mov    rdx,QWORD PTR [rip+0x6c194]        # 885b0 <img>
   1c41c:	mov    QWORD PTR [rip+0x6e57d],rax        # 8a9a0 <enc_bottom_picture>
   1c423:	mov    ecx,DWORD PTR [rdx+0x11b04]
   1c429:	mov    esi,DWORD PTR [rdx+0x11b10]
   1c42f:	mov    DWORD PTR [rax+0x190c],0x0
   1c439:	mov    DWORD PTR [rax+0x4],ecx
   1c43c:	mov    DWORD PTR [rax+0x10],ecx
   1c43f:	mov    DWORD PTR [rax+0x18dc],esi
   1c445:	mov    DWORD PTR [rax+0x18d8],esi
   1c44b:	mov    DWORD PTR [rdx+0x11ad0],0x0
   1c455:	mov    DWORD PTR [rax+0x1910],0x0
   1c45f:	mov    DWORD PTR [rdx+0x11b0c],ecx
   1c465:	mov    DWORD PTR [rdx+0x1c],0x2
   1c46c:	mov    QWORD PTR [rip+0x6e535],rax        # 8a9a8 <enc_picture>
   1c473:	xor    eax,eax
   1c475:	call   1bfe0 <copy_params>
   1c47a:	mov    rdx,QWORD PTR [rip+0x99a07]        # b5e88 <imgY_org_bot>
   1c481:	mov    rax,QWORD PTR [rip+0x6c128]        # 885b0 <img>
   1c488:	mov    QWORD PTR [rip+0x9af39],rdx        # b73c8 <imgY_org>
   1c48f:	mov    rdx,QWORD PTR [rip+0x999ea]        # b5e80 <imgUV_org_bot>
   1c496:	mov    DWORD PTR [rax+0x11874],0x1
   1c4a0:	mov    QWORD PTR [rip+0x96629],rdx        # b2ad0 <imgUV_org>
   1c4a7:	add    DWORD PTR [rax],0x1
   1c4aa:	xor    eax,eax
   1c4ac:	call   1aef0 <init_field>
   1c4b1:	mov    rax,QWORD PTR [rip+0x6c0f8]        # 885b0 <img>
   1c4b8:	mov    edx,DWORD PTR [rax+0x18]
   1c4bb:	cmp    edx,0x1
   1c4be:	je     1c5f8 <field_picture+0x3e8>
   1c4c4:	mov    rcx,QWORD PTR [rip+0x6c0ed]        # 885b8 <input>
   1c4cb:	cmp    edx,0x2
   1c4ce:	jne    1c4e0 <field_picture+0x2d0>
   1c4d0:	cmp    DWORD PTR [rcx+0xb48],0x1
   1c4d7:	je     1c4e0 <field_picture+0x2d0>
   1c4d9:	mov    DWORD PTR [rax+0x18],0x0
   1c4e0:	mov    DWORD PTR [rax+0x11878],0x1
   1c4ea:	mov    edx,DWORD PTR [rcx+0xca4]
   1c4f0:	test   edx,edx
   1c4f2:	jne    1c610 <field_picture+0x400>
   1c4f8:	mov    DWORD PTR [rax+0x11b94],0x0
   1c502:	mov    rax,QWORD PTR [rip+0x6e49f]        # 8a9a8 <enc_picture>
   1c509:	mov    rdi,QWORD PTR [rip+0x969d8]        # b2ee8 <bottom_pic>
   1c510:	mov    DWORD PTR [rax],0x2
   1c516:	call   1bde0 <code_a_picture>
   1c51b:	mov    rax,QWORD PTR [rip+0x6c08e]        # 885b0 <img>
   1c522:	mov    rdx,QWORD PTR [rax+0x3750]
   1c529:	mov    ecx,DWORD PTR [rax]
   1c52b:	mov    rdx,QWORD PTR [rdx+0x18]
   1c52f:	mov    rdx,QWORD PTR [rdx]
   1c532:	mov    edx,DWORD PTR [rdx]
   1c534:	shl    edx,0x3
   1c537:	mov    DWORD PTR [rbp+0x328],edx
   1c53d:	mov    edx,ecx
   1c53f:	shr    edx,0x1f
   1c542:	add    edx,ecx
   1c544:	mov    ecx,DWORD PTR [rax+0x11ab8]
   1c54a:	sar    edx,1
   1c54c:	mov    DWORD PTR [rax],edx
   1c54e:	mov    edx,ecx
   1c550:	shr    edx,0x1f
   1c553:	add    edx,ecx
   1c555:	mov    rcx,QWORD PTR [rip+0x6c05c]        # 885b8 <input>
   1c55c:	sar    edx,1
   1c55e:	mov    DWORD PTR [rax+0x11ab8],edx
   1c564:	mov    edx,DWORD PTR [rax+0x11c1c]
   1c56a:	add    edx,DWORD PTR [rcx+0x44]
   1c56d:	mov    ecx,DWORD PTR [rax+0x44]
   1c570:	mov    DWORD PTR [rax+0x3c],edx
   1c573:	imul   edx,DWORD PTR [rax+0x34]
   1c577:	mov    DWORD PTR [rax+0x40],ecx
   1c57a:	test   edx,edx
   1c57c:	lea    ecx,[rdx+0xff]
   1c582:	cmovs  edx,ecx
   1c585:	sar    edx,0x8
   1c588:	mov    DWORD PTR [rax+0x10],edx
   1c58b:	xor    eax,eax
   1c58d:	call   24a20 <combine_field>
   1c592:	mov    rax,QWORD PTR [rip+0x97ca7]        # b4240 <imgY_org_frm>
   1c599:	mov    rsi,QWORD PTR [rip+0x6c010]        # 885b0 <img>
   1c5a0:	mov    rdi,QWORD PTR [rip+0x6bff9]        # 885a0 <snr>
   1c5a7:	mov    QWORD PTR [rip+0x9ae1a],rax        # b73c8 <imgY_org>
   1c5ae:	mov    rax,QWORD PTR [rip+0x81cb3]        # 9e268 <imgUV_org_frm>
   1c5b5:	mov    QWORD PTR [rip+0x96514],rax        # b2ad0 <imgUV_org>
   1c5bc:	xor    eax,eax
   1c5be:	call   1b420 <find_distortion>
   1c5c3:	mov    rax,QWORD PTR [rip+0x6bfd6]        # 885a0 <snr>
   1c5ca:	movss  xmm0,DWORD PTR [rax]
   1c5ce:	movss  DWORD PTR [rbx+0x32c],xmm0
   1c5d6:	movss  xmm0,DWORD PTR [rax+0x4]
   1c5db:	movss  DWORD PTR [rbx+0x330],xmm0
   1c5e3:	movss  xmm0,DWORD PTR [rax+0x8]
   1c5e8:	movss  DWORD PTR [rbx+0x334],xmm0
   1c5f0:	pop    rbx
   1c5f1:	pop    rbp
   1c5f2:	pop    r12
   1c5f4:	ret    
   1c5f5:	nop    DWORD PTR [rax]
   1c5f8:	add    DWORD PTR [rip+0x97b55],0x1        # b4154 <nextP_tr_fld>
   1c5ff:	mov    rcx,QWORD PTR [rip+0x6bfb2]        # 885b8 <input>
   1c606:	jmp    1c4e0 <field_picture+0x2d0>
   1c60b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c610:	mov    edi,r12d
   1c613:	call   4c280 <setbitscount>
   1c618:	mov    rax,QWORD PTR [rip+0x6bf99]        # 885b8 <input>
   1c61f:	mov    eax,DWORD PTR [rax+0xca4]
   1c625:	test   eax,eax
   1c627:	je     1c647 <field_picture+0x437>
   1c629:	xor    edx,edx
   1c62b:	xor    esi,esi
   1c62d:	xor    edi,edi
   1c62f:	call   4b390 <rc_init_pict>
   1c634:	mov    r12,QWORD PTR [rip+0x6bf75]        # 885b0 <img>
   1c63b:	xor    edi,edi
   1c63d:	call   4d160 <updateQuantizationParameter>
   1c642:	mov    DWORD PTR [r12+0x28],eax
   1c647:	mov    rax,QWORD PTR [rip+0x6bf62]        # 885b0 <img>
   1c64e:	jmp    1c4f8 <field_picture+0x2e8>
   1c653:	nop    DWORD PTR [rax+rax*1+0x0]
   1c658:	mov    edx,0x1
   1c65d:	mov    esi,0x1
   1c662:	xor    edi,edi
   1c664:	call   4b390 <rc_init_pict>
   1c669:	jmp    1c391 <field_picture+0x181>
   1c66e:	xchg   ax,ax

000000000001c670 <UnifiedOneForthPix>:
   1c670:	endbr64 
   1c674:	push   r15
   1c676:	push   r14
   1c678:	push   r13
   1c67a:	push   r12
   1c67c:	push   rbp
   1c67d:	push   rbx
   1c67e:	sub    rsp,0x58
   1c682:	cmp    QWORD PTR [rdi+0x1930],0x0
   1c68a:	mov    QWORD PTR [rsp+0x18],rdi
   1c68f:	je     1c6a0 <UnifiedOneForthPix+0x30>
   1c691:	add    rsp,0x58
   1c695:	pop    rbx
   1c696:	pop    rbp
   1c697:	pop    r12
   1c699:	pop    r13
   1c69b:	pop    r14
   1c69d:	pop    r15
   1c69f:	ret    
   1c6a0:	cmp    QWORD PTR [rdi+0x1920],0x0
   1c6a8:	jne    1c691 <UnifiedOneForthPix+0x21>
   1c6aa:	mov    eax,DWORD PTR [rdi+0x18fc]
   1c6b0:	mov    r14d,DWORD PTR [rdi+0x18f8]
   1c6b7:	mov    rbx,rdi
   1c6ba:	mov    r13,QWORD PTR [rdi+0x1918]
   1c6c1:	mov    edi,eax
   1c6c3:	mov    DWORD PTR [rsp+0x3c],eax
   1c6c7:	imul   edi,r14d
   1c6cb:	movsxd rdi,edi
   1c6ce:	add    rdi,rdi
   1c6d1:	call   4460 <malloc@plt>
   1c6d6:	mov    QWORD PTR [rbx+0x1920],rax
   1c6dd:	test   rax,rax
   1c6e0:	je     1d453 <UnifiedOneForthPix+0xde3>
   1c6e6:	mov    eax,DWORD PTR [rsp+0x3c]
   1c6ea:	mov    edx,r14d
   1c6ed:	lea    esi,[rax*4+0x20]
   1c6f4:	mov    rax,QWORD PTR [rsp+0x18]
   1c6f9:	lea    edx,[rdx*4+0x20]
   1c700:	lea    rdi,[rax+0x1930]
   1c707:	call   38320 <get_mem2Dpel>
   1c70c:	mov    rax,QWORD PTR [rip+0x6bea5]        # 885b8 <input>
   1c713:	mov    esi,DWORD PTR [rax+0x504]
   1c719:	test   esi,esi
   1c71b:	jne    1c72b <UnifiedOneForthPix+0xbb>
   1c71d:	mov    ecx,DWORD PTR [rax+0x508]
   1c723:	test   ecx,ecx
   1c725:	je     1d41f <UnifiedOneForthPix+0xdaf>
   1c72b:	mov    r15,QWORD PTR [rsp+0x18]
   1c730:	mov    ebp,DWORD PTR [r15+0x18f8]
   1c737:	mov    ebx,DWORD PTR [r15+0x18fc]
   1c73e:	mov    edi,ebp
   1c740:	imul   edi,ebx
   1c743:	movsxd rdi,edi
   1c746:	add    rdi,rdi
   1c749:	call   4460 <malloc@plt>
   1c74e:	mov    QWORD PTR [r15+0x1928],rax
   1c755:	test   rax,rax
   1c758:	je     1d475 <UnifiedOneForthPix+0xe05>
   1c75e:	mov    rax,QWORD PTR [rsp+0x18]
   1c763:	lea    edx,[rbp*4+0x20]
   1c76a:	lea    esi,[rbx*4+0x20]
   1c771:	lea    rdi,[rax+0x1938]
   1c778:	call   38320 <get_mem2Dpel>
   1c77d:	mov    rax,QWORD PTR [rsp+0x18]
   1c782:	mov    rdi,QWORD PTR [rax+0x1920]
   1c789:	mov    ebp,DWORD PTR [rax+0x18fc]
   1c78f:	mov    r15,QWORD PTR [rax+0x1930]
   1c796:	mov    ebx,DWORD PTR [rax+0x18f8]
   1c79c:	mov    QWORD PTR [rsp+0x30],rdi
   1c7a1:	mov    edx,ebp
   1c7a3:	cmp    ebp,0xfffffff9
   1c7a6:	jl     1ca7c <UnifiedOneForthPix+0x40c>
   1c7ac:	mov    rsi,QWORD PTR [rip+0x9ac0d]        # b73c0 <img4Y_tmp>
   1c7b3:	lea    rdi,[r13-0x20]
   1c7b7:	mov    DWORD PTR [rsp+0xc],r14d
   1c7bc:	mov    r12d,0xfffffffc
   1c7c2:	mov    QWORD PTR [rsp+0x10],r15
   1c7c7:	mov    r14,rax
   1c7ca:	mov    r15,rdi
   1c7cd:	mov    QWORD PTR [rsp],rsi
   1c7d1:	nop    DWORD PTR [rax+0x0]
   1c7d8:	cmp    ebx,0xfffffff9
   1c7db:	jl     1ca59 <UnifiedOneForthPix+0x3e9>
   1c7e1:	mov    rax,QWORD PTR [rsp]
   1c7e5:	mov    rbp,QWORD PTR [rax]
   1c7e8:	mov    rax,0xfffffffffffffffc
   1c7ef:	jmp    1c8fb <UnifiedOneForthPix+0x28b>
   1c7f4:	nop    DWORD PTR [rax+0x0]
   1c7f8:	mov    rcx,r13
   1c7fb:	test   edx,edx
   1c7fd:	jle    1c80a <UnifiedOneForthPix+0x19a>
   1c7ff:	sub    edx,0x1
   1c802:	movsxd rdx,edx
   1c805:	lea    rcx,[r13+rdx*8+0x0]
   1c80a:	mov    rdx,QWORD PTR [rcx]
   1c80d:	mov    r8d,eax
   1c810:	cmp    eax,ebx
   1c812:	jl     1c91c <UnifiedOneForthPix+0x2ac>
   1c818:	mov    rcx,rdx
   1c81b:	test   ebx,ebx
   1c81d:	jle    1c829 <UnifiedOneForthPix+0x1b9>
   1c81f:	lea    ecx,[rbx-0x1]
   1c822:	movsxd rcx,ecx
   1c825:	lea    rcx,[rdx+rcx*2]
   1c829:	movzx  edi,WORD PTR [rcx]
   1c82c:	lea    ecx,[rax+0x1]
   1c82f:	mov    esi,eax
   1c831:	cmp    ecx,ebx
   1c833:	jl     1c936 <UnifiedOneForthPix+0x2c6>
   1c839:	test   ebx,ebx
   1c83b:	jle    1c9f0 <UnifiedOneForthPix+0x380>
   1c841:	lea    ecx,[rbx-0x1]
   1c844:	lea    r11,[rax+0x1]
   1c848:	movsxd rcx,ecx
   1c84b:	lea    rcx,[rdx+rcx*2]
   1c84f:	movzx  ecx,WORD PTR [rcx]
   1c852:	add    ecx,edi
   1c854:	lea    ecx,[rcx+rcx*4]
   1c857:	shl    ecx,0x2
   1c85a:	cmp    r8d,ebx
   1c85d:	jle    1c95c <UnifiedOneForthPix+0x2ec>
   1c863:	test   ebx,ebx
   1c865:	jle    1c9e0 <UnifiedOneForthPix+0x370>
   1c86b:	lea    r9d,[rbx-0x1]
   1c86f:	movsxd r9,r9d
   1c872:	lea    r9,[rdx+r9*2]
   1c876:	movzx  r10d,WORD PTR [r9]
   1c87a:	lea    r9d,[rsi+0x2]
   1c87e:	cmp    r9d,ebx
   1c881:	jl     1c977 <UnifiedOneForthPix+0x307>
   1c887:	test   ebx,ebx
   1c889:	jle    1ca10 <UnifiedOneForthPix+0x3a0>
   1c88f:	lea    r9d,[rbx-0x1]
   1c893:	movsxd r9,r9d
   1c896:	movzx  r9d,WORD PTR [rdx+r9*2]
   1c89b:	add    r10d,r9d
   1c89e:	lea    r10d,[r10+r10*4]
   1c8a2:	sub    ecx,r10d
   1c8a5:	lea    r10d,[rsi-0x1]
   1c8a9:	cmp    r10d,ebx
   1c8ac:	jle    1c9b0 <UnifiedOneForthPix+0x340>
   1c8b2:	add    esi,0x3
   1c8b5:	mov    r10d,r9d
   1c8b8:	cmp    esi,ebx
   1c8ba:	jge    1c8ca <UnifiedOneForthPix+0x25a>
   1c8bc:	cmp    r8d,0xfffffffd
   1c8c0:	jge    1ca00 <UnifiedOneForthPix+0x390>
   1c8c6:	movzx  r10d,WORD PTR [rdx]
   1c8ca:	add    r9d,r10d
   1c8cd:	shl    edi,0xa
   1c8d0:	add    ecx,r9d
   1c8d3:	mov    DWORD PTR [rbp+rax*8+0x20],edi
   1c8d7:	shl    ecx,0x5
   1c8da:	mov    DWORD PTR [rbp+rax*8+0x24],ecx
   1c8de:	mov    ebx,DWORD PTR [r14+0x18f8]
   1c8e5:	mov    rax,r11
   1c8e8:	lea    edx,[rbx+0x3]
   1c8eb:	cmp    edx,r11d
   1c8ee:	jl     1ca50 <UnifiedOneForthPix+0x3e0>
   1c8f4:	mov    edx,DWORD PTR [r14+0x18fc]
   1c8fb:	cmp    r12d,edx
   1c8fe:	jge    1c7f8 <UnifiedOneForthPix+0x188>
   1c904:	test   r12d,r12d
   1c907:	mov    rcx,r15
   1c90a:	mov    r8d,eax
   1c90d:	cmovs  rcx,r13
   1c911:	mov    rdx,QWORD PTR [rcx]
   1c914:	cmp    eax,ebx
   1c916:	jge    1c818 <UnifiedOneForthPix+0x1a8>
   1c91c:	lea    rcx,[rdx+rax*2]
   1c920:	test   eax,eax
   1c922:	mov    esi,eax
   1c924:	cmovs  rcx,rdx
   1c928:	movzx  edi,WORD PTR [rcx]
   1c92b:	lea    ecx,[rax+0x1]
   1c92e:	cmp    ecx,ebx
   1c930:	jge    1c839 <UnifiedOneForthPix+0x1c9>
   1c936:	cmp    r8d,0xffffffff
   1c93a:	jl     1c9f0 <UnifiedOneForthPix+0x380>
   1c940:	lea    r11,[rax+0x1]
   1c944:	lea    rcx,[rdx+r11*2]
   1c948:	movzx  ecx,WORD PTR [rcx]
   1c94b:	add    ecx,edi
   1c94d:	lea    ecx,[rcx+rcx*4]
   1c950:	shl    ecx,0x2
   1c953:	cmp    r8d,ebx
   1c956:	jg     1c863 <UnifiedOneForthPix+0x1f3>
   1c95c:	test   r8d,r8d
   1c95f:	jle    1c9e0 <UnifiedOneForthPix+0x370>
   1c961:	lea    r9,[rdx+rax*2-0x2]
   1c966:	movzx  r10d,WORD PTR [r9]
   1c96a:	lea    r9d,[rsi+0x2]
   1c96e:	cmp    r9d,ebx
   1c971:	jge    1c887 <UnifiedOneForthPix+0x217>
   1c977:	mov    r9,rdx
   1c97a:	cmp    r8d,0xfffffffe
   1c97e:	jl     1c985 <UnifiedOneForthPix+0x315>
   1c980:	lea    r9,[rdx+rax*2+0x4]
   1c985:	movzx  r9d,WORD PTR [r9]
   1c989:	add    r10d,r9d
   1c98c:	lea    r9d,[r10+r10*4]
   1c990:	sub    ecx,r9d
   1c993:	lea    r9d,[rsi-0x1]
   1c997:	cmp    r9d,ebx
   1c99a:	jle    1c9b0 <UnifiedOneForthPix+0x340>
   1c99c:	test   ebx,ebx
   1c99e:	jg     1ca38 <UnifiedOneForthPix+0x3c8>
   1c9a4:	movzx  r9d,WORD PTR [rdx]
   1c9a8:	jmp    1c8b2 <UnifiedOneForthPix+0x242>
   1c9ad:	nop    DWORD PTR [rax]
   1c9b0:	cmp    r8d,0x1
   1c9b4:	jle    1ca20 <UnifiedOneForthPix+0x3b0>
   1c9b6:	add    esi,0x3
   1c9b9:	movzx  r9d,WORD PTR [rdx+rax*2-0x4]
   1c9bf:	cmp    esi,ebx
   1c9c1:	jl     1ca00 <UnifiedOneForthPix+0x390>
   1c9c3:	test   ebx,ebx
   1c9c5:	jle    1c8c6 <UnifiedOneForthPix+0x256>
   1c9cb:	sub    ebx,0x1
   1c9ce:	movsxd rbx,ebx
   1c9d1:	movzx  r10d,WORD PTR [rdx+rbx*2]
   1c9d6:	jmp    1c8ca <UnifiedOneForthPix+0x25a>
   1c9db:	nop    DWORD PTR [rax+rax*1+0x0]
   1c9e0:	mov    r9,rdx
   1c9e3:	jmp    1c876 <UnifiedOneForthPix+0x206>
   1c9e8:	nop    DWORD PTR [rax+rax*1+0x0]
   1c9f0:	mov    rcx,rdx
   1c9f3:	lea    r11,[rax+0x1]
   1c9f7:	jmp    1c84f <UnifiedOneForthPix+0x1df>
   1c9fc:	nop    DWORD PTR [rax+0x0]
   1ca00:	movzx  r10d,WORD PTR [rdx+rax*2+0x6]
   1ca06:	jmp    1c8ca <UnifiedOneForthPix+0x25a>
   1ca0b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ca10:	movzx  r9d,WORD PTR [rdx]
   1ca14:	jmp    1c89b <UnifiedOneForthPix+0x22b>
   1ca19:	nop    DWORD PTR [rax+0x0]
   1ca20:	add    esi,0x3
   1ca23:	movzx  r9d,WORD PTR [rdx]
   1ca27:	cmp    esi,ebx
   1ca29:	jl     1c8bc <UnifiedOneForthPix+0x24c>
   1ca2f:	jmp    1c9c3 <UnifiedOneForthPix+0x353>
   1ca31:	nop    DWORD PTR [rax+0x0]
   1ca38:	lea    r9d,[rbx-0x1]
   1ca3c:	movsxd r9,r9d
   1ca3f:	movzx  r9d,WORD PTR [rdx+r9*2]
   1ca44:	jmp    1c8b2 <UnifiedOneForthPix+0x242>
   1ca49:	nop    DWORD PTR [rax+0x0]
   1ca50:	mov    ebp,DWORD PTR [r14+0x18fc]
   1ca57:	mov    edx,ebp
   1ca59:	add    r12d,0x1
   1ca5d:	lea    eax,[rbp+0x3]
   1ca60:	add    QWORD PTR [rsp],0x8
   1ca65:	add    r15,0x8
   1ca69:	cmp    eax,r12d
   1ca6c:	jge    1c7d8 <UnifiedOneForthPix+0x168>
   1ca72:	mov    r14d,DWORD PTR [rsp+0xc]
   1ca77:	mov    r15,QWORD PTR [rsp+0x10]
   1ca7c:	mov    QWORD PTR [rsp],0x0
   1ca84:	lea    ecx,[rbp+0x7]
   1ca87:	cmp    ebx,0xfffffff9
   1ca8a:	jl     1d42f <UnifiedOneForthPix+0xdbf>
   1ca90:	mov    DWORD PTR [rsp+0xc],r14d
   1ca95:	nop    DWORD PTR [rax]
   1ca98:	test   ecx,ecx
   1ca9a:	js     1cc1b <UnifiedOneForthPix+0x5ab>
   1caa0:	mov    rax,QWORD PTR [rsp]
   1caa4:	xor    ebx,ebx
   1caa6:	lea    r13,[rax*4+0x0]
   1caae:	lea    ebp,[rax+rax*1-0x10]
   1cab2:	nop    WORD PTR [rax+rax*1+0x0]
   1cab8:	mov    rdx,QWORD PTR [rip+0x9a901]        # b73c0 <img4Y_tmp>
   1cabf:	lea    rax,[rbx*8+0x0]
   1cac7:	movsxd r9,ecx
   1caca:	lea    r12d,[rbx+0x1]
   1cace:	shl    r9,0x3
   1cad2:	cmp    ecx,ebx
   1cad4:	lea    r8,[rax+0x10]
   1cad8:	mov    rsi,QWORD PTR [rdx+rbx*8]
   1cadc:	mov    edi,DWORD PTR [rsi+r13*1]
   1cae0:	lea    rsi,[rax+0x8]
   1cae4:	cmovle rsi,r9
   1cae8:	mov    rsi,QWORD PTR [rdx+rsi*1]
   1caec:	mov    r11d,DWORD PTR [rsi+r13*1]
   1caf0:	lea    rsi,[rdx+rax*1-0x8]
   1caf5:	add    r11d,edi
   1caf8:	test   rbx,rbx
   1cafb:	cmove  rsi,rdx
   1caff:	cmp    ecx,r12d
   1cb02:	lea    r10d,[r11+r11*4]
   1cb06:	cmovle r8,r9
   1cb0a:	mov    r11,QWORD PTR [rsi]
   1cb0d:	mov    esi,ebx
   1cb0f:	mov    r8,QWORD PTR [rdx+r8*1]
   1cb13:	mov    r8d,DWORD PTR [r8+r13*1]
   1cb17:	add    r8d,DWORD PTR [r11+r13*1]
   1cb1b:	lea    r8d,[r8+r8*4]
   1cb1f:	neg    r8d
   1cb22:	cmp    rbx,0x1
   1cb26:	lea    r12d,[r8+r10*4]
   1cb2a:	lea    r8,[rdx+rax*1-0x10]
   1cb2f:	lea    r10d,[rbx+0x2]
   1cb33:	cmovbe r8,rdx
   1cb37:	add    rax,0x18
   1cb3b:	cmp    ecx,r10d
   1cb3e:	cmovle rax,r9
   1cb42:	mov    r8,QWORD PTR [r8]
   1cb45:	mov    rax,QWORD PTR [rdx+rax*1]
   1cb49:	mov    edx,DWORD PTR [rax+r13*1]
   1cb4d:	add    edx,DWORD PTR [r8+r13*1]
   1cb51:	lea    eax,[rdi+0x5ff]
   1cb57:	add    edx,r12d
   1cb5a:	lea    r12d,[rdx+0x1f]
   1cb5e:	cmovns r12d,edx
   1cb62:	mov    rdx,QWORD PTR [rip+0x6ba47]        # 885b0 <img>
   1cb69:	sar    r12d,0x5
   1cb6d:	add    edi,0x200
   1cb73:	mov    edx,DWORD PTR [rdx+0x11bec]
   1cb79:	cmovns eax,edi
   1cb7c:	mov    edi,edx
   1cb7e:	sar    eax,0xa
   1cb81:	cmp    eax,edx
   1cb83:	cmovle edi,eax
   1cb86:	xor    ecx,ecx
   1cb88:	test   edi,edi
   1cb8a:	js     1cb97 <UnifiedOneForthPix+0x527>
   1cb8c:	movzx  edi,dx
   1cb8f:	movzx  ecx,ax
   1cb92:	cmp    eax,edx
   1cb94:	cmovg  ecx,edi
   1cb97:	lea    r14d,[rsi*4+0x0]
   1cb9f:	mov    edx,ebp
   1cba1:	mov    rdi,r15
   1cba4:	lea    esi,[r14-0x10]
   1cba8:	call   5dbd0 <PutPel_14>
   1cbad:	lea    eax,[r12+0x5ff]
   1cbb5:	add    r12d,0x200
   1cbbc:	cmovs  r12d,eax
   1cbc0:	mov    rax,QWORD PTR [rip+0x6b9e9]        # 885b0 <img>
   1cbc7:	mov    eax,DWORD PTR [rax+0x11bec]
   1cbcd:	sar    r12d,0xa
   1cbd1:	cmp    r12d,eax
   1cbd4:	mov    edx,eax
   1cbd6:	cmovle edx,r12d
   1cbda:	xor    ecx,ecx
   1cbdc:	test   edx,edx
   1cbde:	js     1cbed <UnifiedOneForthPix+0x57d>
   1cbe0:	movzx  edx,ax
   1cbe3:	movzx  ecx,r12w
   1cbe7:	cmp    r12d,eax
   1cbea:	cmovg  ecx,edx
   1cbed:	lea    esi,[r14-0xe]
   1cbf1:	mov    edx,ebp
   1cbf3:	mov    rdi,r15
   1cbf6:	call   5dbd0 <PutPel_14>
   1cbfb:	mov    rax,QWORD PTR [rsp+0x18]
   1cc00:	add    rbx,0x1
   1cc04:	mov    ecx,DWORD PTR [rax+0x18fc]
   1cc0a:	add    ecx,0x7
   1cc0d:	cmp    ecx,ebx
   1cc0f:	jge    1cab8 <UnifiedOneForthPix+0x448>
   1cc15:	mov    ebx,DWORD PTR [rax+0x18f8]
   1cc1b:	add    QWORD PTR [rsp],0x1
   1cc20:	mov    rdi,QWORD PTR [rsp]
   1cc24:	lea    eax,[rbx+rbx*1+0x10]
   1cc28:	cmp    eax,edi
   1cc2a:	jg     1ca98 <UnifiedOneForthPix+0x428>
   1cc30:	lea    eax,[rbx*4+0x1c]
   1cc37:	mov    r14d,DWORD PTR [rsp+0xc]
   1cc3c:	mov    DWORD PTR [rsp+0x24],eax
   1cc40:	lea    eax,[rcx*4+0x0]
   1cc47:	mov    DWORD PTR [rsp+0x20],eax
   1cc4b:	cmp    eax,0xfffffffd
   1cc4e:	jl     1ce1d <UnifiedOneForthPix+0x7ad>
   1cc54:	mov    eax,DWORD PTR [rsp+0x20]
   1cc58:	mov    ebx,DWORD PTR [rsp+0x3c]
   1cc5c:	mov    ebp,0xfffffff0
   1cc61:	sub    eax,0xc
   1cc64:	mov    DWORD PTR [rsp+0x38],eax
   1cc68:	mov    eax,DWORD PTR [rsp+0x24]
   1cc6c:	lea    edi,[rax+0x4]
   1cc6f:	sub    eax,0xe
   1cc72:	mov    DWORD PTR [rsp+0x28],edi
   1cc76:	mov    DWORD PTR [rsp+0x2c],eax
   1cc7a:	nop    WORD PTR [rax+rax*1+0x0]
   1cc80:	xor    r13d,r13d
   1cc83:	cmp    DWORD PTR [rsp+0x24],0xfffffffe
   1cc88:	jge    1cd27 <UnifiedOneForthPix+0x6b7>
   1cc8e:	jmp    1ce10 <UnifiedOneForthPix+0x7a0>
   1cc93:	nop    DWORD PTR [rax+rax*1+0x0]
   1cc98:	mov    rax,QWORD PTR [rip+0x6b911]        # 885b0 <img>
   1cc9f:	xor    ecx,ecx
   1cca1:	mov    r10d,DWORD PTR [rax+0x11bec]
   1cca8:	test   r10d,r10d
   1ccab:	js     1cd0a <UnifiedOneForthPix+0x69a>
   1ccad:	mov    edx,r9d
   1ccb0:	mov    r8d,r14d
   1ccb3:	mov    ecx,ebx
   1ccb5:	mov    esi,ebp
   1ccb7:	mov    rdi,r15
   1ccba:	mov    DWORD PTR [rsp+0x10],r10d
   1ccbf:	mov    DWORD PTR [rsp+0xc],r9d
   1ccc4:	call   5dfe0 <FastPelY_14>
   1ccc9:	mov    edx,DWORD PTR [rsp]
   1cccc:	mov    r8d,r14d
   1cccf:	mov    ecx,ebx
   1ccd1:	mov    esi,ebp
   1ccd3:	mov    rdi,r15
   1ccd6:	movzx  r12d,ax
   1ccda:	call   5dfe0 <FastPelY_14>
   1ccdf:	mov    r10d,DWORD PTR [rsp+0x10]
   1cce4:	mov    r9d,DWORD PTR [rsp+0xc]
   1cce9:	movzx  edx,ax
   1ccec:	lea    eax,[r12+rdx*1+0x1]
   1ccf1:	sar    eax,1
   1ccf3:	cmp    eax,r10d
   1ccf6:	jle    1cdd8 <UnifiedOneForthPix+0x768>
   1ccfc:	mov    rax,QWORD PTR [rip+0x6b8ad]        # 885b0 <img>
   1cd03:	movzx  ecx,WORD PTR [rax+0x11bec]
   1cd0a:	lea    edx,[r13-0xf]
   1cd0e:	mov    esi,ebp
   1cd10:	mov    rdi,r15
   1cd13:	add    r13d,0x2
   1cd17:	call   5dbd0 <PutPel_14>
   1cd1c:	cmp    r13d,DWORD PTR [rsp+0x28]
   1cd21:	je     1ce10 <UnifiedOneForthPix+0x7a0>
   1cd27:	mov    rax,QWORD PTR [rip+0x6b882]        # 885b0 <img>
   1cd2e:	lea    r9d,[r13-0x10]
   1cd32:	mov    r8d,r14d
   1cd35:	mov    ecx,ebx
   1cd37:	mov    edx,r9d
   1cd3a:	mov    esi,ebp
   1cd3c:	mov    rdi,r15
   1cd3f:	mov    DWORD PTR [rsp+0x10],r9d
   1cd44:	mov    eax,DWORD PTR [rax+0x11bec]
   1cd4a:	mov    DWORD PTR [rsp+0xc],eax
   1cd4e:	call   5dfe0 <FastPelY_14>
   1cd53:	cmp    DWORD PTR [rsp+0x24],r13d
   1cd58:	mov    r8d,r14d
   1cd5b:	mov    ecx,ebx
   1cd5d:	movzx  r12d,ax
   1cd61:	lea    eax,[r13-0xe]
   1cd65:	cmovl  eax,DWORD PTR [rsp+0x2c]
   1cd6a:	mov    esi,ebp
   1cd6c:	mov    rdi,r15
   1cd6f:	mov    edx,eax
   1cd71:	mov    DWORD PTR [rsp],eax
   1cd74:	call   5dfe0 <FastPelY_14>
   1cd79:	mov    r9d,DWORD PTR [rsp+0x10]
   1cd7e:	movzx  eax,ax
   1cd81:	lea    eax,[r12+rax*1+0x1]
   1cd86:	sar    eax,1
   1cd88:	cmp    DWORD PTR [rsp+0xc],eax
   1cd8c:	jl     1cc98 <UnifiedOneForthPix+0x628>
   1cd92:	mov    edx,r9d
   1cd95:	mov    r8d,r14d
   1cd98:	mov    ecx,ebx
   1cd9a:	mov    esi,ebp
   1cd9c:	mov    rdi,r15
   1cd9f:	mov    DWORD PTR [rsp+0xc],r9d
   1cda4:	call   5dfe0 <FastPelY_14>
   1cda9:	mov    edx,DWORD PTR [rsp]
   1cdac:	mov    r8d,r14d
   1cdaf:	mov    ecx,ebx
   1cdb1:	mov    esi,ebp
   1cdb3:	mov    rdi,r15
   1cdb6:	call   5dfe0 <FastPelY_14>
   1cdbb:	mov    rax,QWORD PTR [rip+0x6b7ee]        # 885b0 <img>
   1cdc2:	mov    r9d,DWORD PTR [rsp+0xc]
   1cdc7:	mov    r10d,DWORD PTR [rax+0x11bec]
   1cdce:	jmp    1ccad <UnifiedOneForthPix+0x63d>
   1cdd3:	nop    DWORD PTR [rax+rax*1+0x0]
   1cdd8:	mov    edx,r9d
   1cddb:	mov    r8d,r14d
   1cdde:	mov    ecx,ebx
   1cde0:	mov    esi,ebp
   1cde2:	mov    rdi,r15
   1cde5:	call   5dfe0 <FastPelY_14>
   1cdea:	mov    edx,DWORD PTR [rsp]
   1cded:	mov    ecx,ebx
   1cdef:	mov    r8d,r14d
   1cdf2:	mov    esi,ebp
   1cdf4:	mov    rdi,r15
   1cdf7:	movzx  r12d,ax
   1cdfb:	call   5dfe0 <FastPelY_14>
   1ce00:	movzx  eax,ax
   1ce03:	lea    ecx,[r12+rax*1+0x1]
   1ce08:	sar    ecx,1
   1ce0a:	jmp    1cd0a <UnifiedOneForthPix+0x69a>
   1ce0f:	nop
   1ce10:	add    ebp,0x2
   1ce13:	cmp    DWORD PTR [rsp+0x38],ebp
   1ce17:	jne    1cc80 <UnifiedOneForthPix+0x610>
   1ce1d:	cmp    DWORD PTR [rsp+0x24],0xfffffffd
   1ce22:	jl     1cf95 <UnifiedOneForthPix+0x925>
   1ce28:	mov    eax,DWORD PTR [rsp+0x24]
   1ce2c:	mov    r13d,0xffffffef
   1ce32:	mov    ebp,DWORD PTR [rsp+0x3c]
   1ce36:	mov    DWORD PTR [rsp+0xc],r13d
   1ce3b:	lea    edi,[rax-0xd]
   1ce3e:	sub    eax,0xe
   1ce41:	mov    DWORD PTR [rsp+0x4c],eax
   1ce45:	mov    eax,DWORD PTR [rsp+0x20]
   1ce49:	mov    DWORD PTR [rsp+0x48],edi
   1ce4d:	add    eax,0x4
   1ce50:	mov    DWORD PTR [rsp+0x38],eax
   1ce54:	nop    DWORD PTR [rax+0x0]
   1ce58:	mov    eax,DWORD PTR [rsp+0xc]
   1ce5c:	add    eax,0x11
   1ce5f:	cmp    DWORD PTR [rsp+0x20],0xfffffffe
   1ce64:	mov    DWORD PTR [rsp+0x44],eax
   1ce68:	jl     1d410 <UnifiedOneForthPix+0xda0>
   1ce6e:	mov    edi,DWORD PTR [rsp+0x24]
   1ce72:	mov    ebx,DWORD PTR [rsp+0xc]
   1ce76:	lea    edx,[rdi+0x1]
   1ce79:	mov    edi,DWORD PTR [rsp+0x44]
   1ce7d:	lea    eax,[rbx+0x2]
   1ce80:	cmp    edx,edi
   1ce82:	cmovl  eax,DWORD PTR [rsp+0x4c]
   1ce87:	and    edi,0x1
   1ce8a:	mov    DWORD PTR [rsp+0x2c],edi
   1ce8e:	mov    DWORD PTR [rsp+0x10],eax
   1ce92:	lea    eax,[rbx+0x1]
   1ce95:	xor    ebx,ebx
   1ce97:	mov    DWORD PTR [rsp],eax
   1ce9a:	mov    eax,DWORD PTR [rsp+0x20]
   1ce9e:	sub    eax,0xe
   1cea1:	mov    DWORD PTR [rsp+0x28],eax
   1cea5:	nop    DWORD PTR [rax]
   1cea8:	mov    eax,DWORD PTR [rsp+0x2c]
   1ceac:	test   eax,eax
   1ceae:	je     1d0d0 <UnifiedOneForthPix+0xa60>
   1ceb4:	test   bl,0x3
   1ceb7:	jne    1cec9 <UnifiedOneForthPix+0x859>
   1ceb9:	mov    eax,DWORD PTR [rsp+0x44]
   1cebd:	and    eax,0x3
   1cec0:	cmp    eax,0x1
   1cec3:	je     1d1f0 <UnifiedOneForthPix+0xb80>
   1cec9:	mov    eax,ebx
   1cecb:	and    eax,0x3
   1cece:	cmp    eax,0x2
   1ced1:	jne    1cee3 <UnifiedOneForthPix+0x873>
   1ced3:	mov    eax,DWORD PTR [rsp+0x44]
   1ced7:	and    eax,0x3
   1ceda:	cmp    eax,0x3
   1cedd:	je     1d1f0 <UnifiedOneForthPix+0xb80>
   1cee3:	mov    rax,QWORD PTR [rip+0x6b6c6]        # 885b0 <img>
   1ceea:	lea    r9d,[rbx-0x10]
   1ceee:	mov    r8d,r14d
   1cef1:	mov    ecx,ebp
   1cef3:	mov    edx,DWORD PTR [rsp+0xc]
   1cef7:	mov    esi,r9d
   1cefa:	mov    rdi,r15
   1cefd:	mov    DWORD PTR [rsp+0x40],r9d
   1cf02:	mov    eax,DWORD PTR [rax+0x11bec]
   1cf08:	lea    r12d,[rbx-0xe]
   1cf0c:	mov    DWORD PTR [rsp+0x3c],eax
   1cf10:	call   5dfe0 <FastPelY_14>
   1cf15:	cmp    DWORD PTR [rsp+0x20],ebx
   1cf19:	mov    edx,DWORD PTR [rsp+0x10]
   1cf1d:	mov    r8d,r14d
   1cf20:	cmovl  r12d,DWORD PTR [rsp+0x28]
   1cf26:	mov    ecx,ebp
   1cf28:	mov    rdi,r15
   1cf2b:	movzx  r13d,ax
   1cf2f:	mov    esi,r12d
   1cf32:	call   5dfe0 <FastPelY_14>
   1cf37:	mov    r9d,DWORD PTR [rsp+0x40]
   1cf3c:	movzx  eax,ax
   1cf3f:	lea    eax,[r13+rax*1+0x1]
   1cf44:	sar    eax,1
   1cf46:	cmp    DWORD PTR [rsp+0x3c],eax
   1cf4a:	jge    1d020 <UnifiedOneForthPix+0x9b0>
   1cf50:	mov    rax,QWORD PTR [rip+0x6b659]        # 885b0 <img>
   1cf57:	mov    r10d,DWORD PTR [rax+0x11bec]
   1cf5e:	test   r10d,r10d
   1cf61:	jns    1d060 <UnifiedOneForthPix+0x9f0>
   1cf67:	xor    ecx,ecx
   1cf69:	mov    edx,DWORD PTR [rsp]
   1cf6c:	lea    esi,[rbx-0xf]
   1cf6f:	mov    rdi,r15
   1cf72:	add    ebx,0x2
   1cf75:	call   5dbd0 <PutPel_14>
   1cf7a:	cmp    DWORD PTR [rsp+0x38],ebx
   1cf7e:	jne    1cea8 <UnifiedOneForthPix+0x838>
   1cf84:	mov    eax,DWORD PTR [rsp]
   1cf87:	mov    DWORD PTR [rsp+0xc],eax
   1cf8b:	cmp    DWORD PTR [rsp+0x48],eax
   1cf8f:	jne    1ce58 <UnifiedOneForthPix+0x7e8>
   1cf95:	mov    rax,QWORD PTR [rsp+0x18]
   1cf9a:	mov    ebx,DWORD PTR [rax+0x18f8]
   1cfa0:	mov    ebp,DWORD PTR [rax+0x18fc]
   1cfa6:	xor    r12d,r12d
   1cfa9:	test   ebp,ebp
   1cfab:	jle    1c691 <UnifiedOneForthPix+0x21>
   1cfb1:	nop    DWORD PTR [rax+0x0]
   1cfb8:	lea    r14d,[r12*4+0x0]
   1cfc0:	xor    r13d,r13d
   1cfc3:	test   ebx,ebx
   1cfc5:	jle    1d007 <UnifiedOneForthPix+0x997>
   1cfc7:	nop    WORD PTR [rax+rax*1+0x0]
   1cfd0:	lea    edx,[r13*4+0x0]
   1cfd8:	mov    r8d,ebx
   1cfdb:	mov    ecx,ebp
   1cfdd:	mov    esi,r14d
   1cfe0:	mov    rdi,r15
   1cfe3:	call   5dfe0 <FastPelY_14>
   1cfe8:	mov    rdi,QWORD PTR [rsp+0x30]
   1cfed:	mov    edx,r13d
   1cff0:	mov    r8d,ebx
   1cff3:	movzx  ecx,ax
   1cff6:	mov    esi,r12d
   1cff9:	add    r13d,0x1
   1cffd:	call   5dbf0 <PutPel_11>
   1d002:	cmp    ebx,r13d
   1d005:	jne    1cfd0 <UnifiedOneForthPix+0x960>
   1d007:	add    r12d,0x1
   1d00b:	cmp    ebp,r12d
   1d00e:	jne    1cfb8 <UnifiedOneForthPix+0x948>
   1d010:	add    rsp,0x58
   1d014:	pop    rbx
   1d015:	pop    rbp
   1d016:	pop    r12
   1d018:	pop    r13
   1d01a:	pop    r14
   1d01c:	pop    r15
   1d01e:	ret    
   1d01f:	nop
   1d020:	mov    edx,DWORD PTR [rsp+0xc]
   1d024:	mov    esi,r9d
   1d027:	mov    r8d,r14d
   1d02a:	mov    ecx,ebp
   1d02c:	mov    rdi,r15
   1d02f:	mov    DWORD PTR [rsp+0x3c],r9d
   1d034:	call   5dfe0 <FastPelY_14>
   1d039:	mov    edx,DWORD PTR [rsp+0x10]
   1d03d:	mov    r8d,r14d
   1d040:	mov    ecx,ebp
   1d042:	mov    esi,r12d
   1d045:	mov    rdi,r15
   1d048:	call   5dfe0 <FastPelY_14>
   1d04d:	mov    rax,QWORD PTR [rip+0x6b55c]        # 885b0 <img>
   1d054:	mov    r9d,DWORD PTR [rsp+0x3c]
   1d059:	mov    r10d,DWORD PTR [rax+0x11bec]
   1d060:	mov    edx,DWORD PTR [rsp+0xc]
   1d064:	mov    esi,r9d
   1d067:	mov    r8d,r14d
   1d06a:	mov    ecx,ebp
   1d06c:	mov    rdi,r15
   1d06f:	mov    DWORD PTR [rsp+0x40],r10d
   1d074:	mov    DWORD PTR [rsp+0x3c],r9d
   1d079:	call   5dfe0 <FastPelY_14>
   1d07e:	mov    edx,DWORD PTR [rsp+0x10]
   1d082:	mov    r8d,r14d
   1d085:	mov    ecx,ebp
   1d087:	mov    esi,r12d
   1d08a:	mov    rdi,r15
   1d08d:	movzx  r13d,ax
   1d091:	call   5dfe0 <FastPelY_14>
   1d096:	mov    r10d,DWORD PTR [rsp+0x40]
   1d09b:	mov    r9d,DWORD PTR [rsp+0x3c]
   1d0a0:	movzx  edx,ax
   1d0a3:	lea    eax,[r13+rdx*1+0x1]
   1d0a8:	sar    eax,1
   1d0aa:	cmp    eax,r10d
   1d0ad:	jle    1d370 <UnifiedOneForthPix+0xd00>
   1d0b3:	mov    rax,QWORD PTR [rip+0x6b4f6]        # 885b0 <img>
   1d0ba:	movzx  ecx,WORD PTR [rax+0x11bec]
   1d0c1:	jmp    1cf69 <UnifiedOneForthPix+0x8f9>
   1d0c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d0d0:	mov    rax,QWORD PTR [rip+0x6b4d9]        # 885b0 <img>
   1d0d7:	mov    edx,DWORD PTR [rsp]
   1d0da:	lea    r12d,[rbx-0x10]
   1d0de:	mov    ecx,ebp
   1d0e0:	mov    r8d,r14d
   1d0e3:	mov    esi,r12d
   1d0e6:	mov    rdi,r15
   1d0e9:	mov    eax,DWORD PTR [rax+0x11bec]
   1d0ef:	mov    DWORD PTR [rsp+0x3c],eax
   1d0f3:	call   5dfe0 <FastPelY_14>
   1d0f8:	movzx  r13d,ax
   1d0fc:	cmp    DWORD PTR [rsp+0x20],ebx
   1d100:	jl     1d308 <UnifiedOneForthPix+0xc98>
   1d106:	lea    r10d,[rbx-0xe]
   1d10a:	mov    edx,DWORD PTR [rsp]
   1d10d:	mov    r8d,r14d
   1d110:	mov    ecx,ebp
   1d112:	mov    esi,r10d
   1d115:	mov    rdi,r15
   1d118:	mov    DWORD PTR [rsp+0x40],r10d
   1d11d:	call   5dfe0 <FastPelY_14>
   1d122:	mov    r10d,DWORD PTR [rsp+0x40]
   1d127:	movzx  eax,ax
   1d12a:	lea    eax,[r13+rax*1+0x1]
   1d12f:	sar    eax,1
   1d131:	cmp    eax,DWORD PTR [rsp+0x3c]
   1d135:	jle    1d3a0 <UnifiedOneForthPix+0xd30>
   1d13b:	mov    rax,QWORD PTR [rip+0x6b46e]        # 885b0 <img>
   1d142:	mov    r9d,DWORD PTR [rax+0x11bec]
   1d149:	test   r9d,r9d
   1d14c:	js     1cf67 <UnifiedOneForthPix+0x8f7>
   1d152:	mov    edx,DWORD PTR [rsp]
   1d155:	mov    r8d,r14d
   1d158:	mov    ecx,ebp
   1d15a:	mov    esi,r12d
   1d15d:	mov    rdi,r15
   1d160:	mov    DWORD PTR [rsp+0x40],r9d
   1d165:	lea    r13d,[rbx-0xe]
   1d169:	call   5dfe0 <FastPelY_14>
   1d16e:	cmp    DWORD PTR [rsp+0x20],ebx
   1d172:	mov    edx,DWORD PTR [rsp]
   1d175:	mov    r8d,r14d
   1d178:	cmovl  r13d,DWORD PTR [rsp+0x28]
   1d17e:	movzx  r10d,ax
   1d182:	mov    ecx,ebp
   1d184:	mov    rdi,r15
   1d187:	mov    DWORD PTR [rsp+0x3c],r10d
   1d18c:	mov    esi,r13d
   1d18f:	call   5dfe0 <FastPelY_14>
   1d194:	mov    r10d,DWORD PTR [rsp+0x3c]
   1d199:	mov    r9d,DWORD PTR [rsp+0x40]
   1d19e:	movzx  eax,ax
   1d1a1:	lea    eax,[r10+rax*1+0x1]
   1d1a6:	sar    eax,1
   1d1a8:	cmp    eax,r9d
   1d1ab:	jg     1d0b3 <UnifiedOneForthPix+0xa43>
   1d1b1:	mov    edx,DWORD PTR [rsp]
   1d1b4:	mov    esi,r12d
   1d1b7:	mov    r8d,r14d
   1d1ba:	mov    ecx,ebp
   1d1bc:	mov    rdi,r15
   1d1bf:	call   5dfe0 <FastPelY_14>
   1d1c4:	mov    edx,DWORD PTR [rsp]
   1d1c7:	mov    ecx,ebp
   1d1c9:	mov    r8d,r14d
   1d1cc:	mov    esi,r13d
   1d1cf:	mov    rdi,r15
   1d1d2:	movzx  r12d,ax
   1d1d6:	call   5dfe0 <FastPelY_14>
   1d1db:	movzx  eax,ax
   1d1de:	lea    ecx,[r12+rax*1+0x1]
   1d1e3:	sar    ecx,1
   1d1e5:	jmp    1cf69 <UnifiedOneForthPix+0x8f9>
   1d1ea:	nop    WORD PTR [rax+rax*1+0x0]
   1d1f0:	mov    rax,QWORD PTR [rip+0x6b3b9]        # 885b0 <img>
   1d1f7:	lea    r9d,[rbx-0x10]
   1d1fb:	mov    r8d,r14d
   1d1fe:	mov    ecx,ebp
   1d200:	mov    edx,DWORD PTR [rsp+0x10]
   1d204:	mov    esi,r9d
   1d207:	mov    rdi,r15
   1d20a:	mov    DWORD PTR [rsp+0x40],r9d
   1d20f:	mov    eax,DWORD PTR [rax+0x11bec]
   1d215:	lea    r12d,[rbx-0xe]
   1d219:	mov    DWORD PTR [rsp+0x3c],eax
   1d21d:	call   5dfe0 <FastPelY_14>
   1d222:	cmp    DWORD PTR [rsp+0x20],ebx
   1d226:	mov    edx,DWORD PTR [rsp+0xc]
   1d22a:	mov    r8d,r14d
   1d22d:	cmovl  r12d,DWORD PTR [rsp+0x28]
   1d233:	mov    ecx,ebp
   1d235:	mov    rdi,r15
   1d238:	movzx  r13d,ax
   1d23c:	mov    esi,r12d
   1d23f:	call   5dfe0 <FastPelY_14>
   1d244:	mov    r9d,DWORD PTR [rsp+0x40]
   1d249:	movzx  eax,ax
   1d24c:	lea    eax,[r13+rax*1+0x1]
   1d251:	sar    eax,1
   1d253:	cmp    DWORD PTR [rsp+0x3c],eax
   1d257:	jge    1d3c8 <UnifiedOneForthPix+0xd58>
   1d25d:	mov    rax,QWORD PTR [rip+0x6b34c]        # 885b0 <img>
   1d264:	mov    r10d,DWORD PTR [rax+0x11bec]
   1d26b:	test   r10d,r10d
   1d26e:	js     1cf67 <UnifiedOneForthPix+0x8f7>
   1d274:	mov    edx,DWORD PTR [rsp+0x10]
   1d278:	mov    esi,r9d
   1d27b:	mov    r8d,r14d
   1d27e:	mov    ecx,ebp
   1d280:	mov    rdi,r15
   1d283:	mov    DWORD PTR [rsp+0x40],r10d
   1d288:	mov    DWORD PTR [rsp+0x3c],r9d
   1d28d:	call   5dfe0 <FastPelY_14>
   1d292:	mov    edx,DWORD PTR [rsp+0xc]
   1d296:	mov    r8d,r14d
   1d299:	mov    ecx,ebp
   1d29b:	mov    esi,r12d
   1d29e:	mov    rdi,r15
   1d2a1:	movzx  r13d,ax
   1d2a5:	call   5dfe0 <FastPelY_14>
   1d2aa:	mov    r10d,DWORD PTR [rsp+0x40]
   1d2af:	mov    r9d,DWORD PTR [rsp+0x3c]
   1d2b4:	movzx  eax,ax
   1d2b7:	lea    eax,[r13+rax*1+0x1]
   1d2bc:	sar    eax,1
   1d2be:	cmp    eax,r10d
   1d2c1:	jg     1d0b3 <UnifiedOneForthPix+0xa43>
   1d2c7:	mov    edx,DWORD PTR [rsp+0x10]
   1d2cb:	mov    r8d,r14d
   1d2ce:	mov    ecx,ebp
   1d2d0:	mov    esi,r9d
   1d2d3:	mov    rdi,r15
   1d2d6:	call   5dfe0 <FastPelY_14>
   1d2db:	mov    edx,DWORD PTR [rsp+0xc]
   1d2df:	mov    r8d,r14d
   1d2e2:	mov    ecx,ebp
   1d2e4:	movzx  r13d,ax
   1d2e8:	mov    esi,r12d
   1d2eb:	mov    rdi,r15
   1d2ee:	call   5dfe0 <FastPelY_14>
   1d2f3:	movzx  eax,ax
   1d2f6:	lea    ecx,[r13+rax*1+0x1]
   1d2fb:	sar    ecx,1
   1d2fd:	jmp    1cf69 <UnifiedOneForthPix+0x8f9>
   1d302:	nop    WORD PTR [rax+rax*1+0x0]
   1d308:	mov    edx,DWORD PTR [rsp]
   1d30b:	mov    esi,DWORD PTR [rsp+0x28]
   1d30f:	mov    r8d,r14d
   1d312:	mov    ecx,ebp
   1d314:	mov    rdi,r15
   1d317:	call   5dfe0 <FastPelY_14>
   1d31c:	movzx  eax,ax
   1d31f:	lea    eax,[r13+rax*1+0x1]
   1d324:	sar    eax,1
   1d326:	cmp    DWORD PTR [rsp+0x3c],eax
   1d32a:	jl     1d13b <UnifiedOneForthPix+0xacb>
   1d330:	mov    edx,DWORD PTR [rsp]
   1d333:	mov    esi,r12d
   1d336:	mov    r8d,r14d
   1d339:	mov    ecx,ebp
   1d33b:	mov    rdi,r15
   1d33e:	call   5dfe0 <FastPelY_14>
   1d343:	mov    esi,DWORD PTR [rsp+0x28]
   1d347:	mov    edx,DWORD PTR [rsp]
   1d34a:	mov    r8d,r14d
   1d34d:	mov    ecx,ebp
   1d34f:	mov    rdi,r15
   1d352:	call   5dfe0 <FastPelY_14>
   1d357:	mov    rax,QWORD PTR [rip+0x6b252]        # 885b0 <img>
   1d35e:	mov    r9d,DWORD PTR [rax+0x11bec]
   1d365:	jmp    1d152 <UnifiedOneForthPix+0xae2>
   1d36a:	nop    WORD PTR [rax+rax*1+0x0]
   1d370:	mov    edx,DWORD PTR [rsp+0xc]
   1d374:	mov    r8d,r14d
   1d377:	mov    ecx,ebp
   1d379:	mov    esi,r9d
   1d37c:	mov    rdi,r15
   1d37f:	call   5dfe0 <FastPelY_14>
   1d384:	mov    edx,DWORD PTR [rsp+0x10]
   1d388:	mov    r8d,r14d
   1d38b:	mov    ecx,ebp
   1d38d:	movzx  r13d,ax
   1d391:	jmp    1d2e8 <UnifiedOneForthPix+0xc78>
   1d396:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d3a0:	mov    edx,DWORD PTR [rsp]
   1d3a3:	mov    esi,r12d
   1d3a6:	mov    r8d,r14d
   1d3a9:	mov    ecx,ebp
   1d3ab:	mov    rdi,r15
   1d3ae:	mov    DWORD PTR [rsp+0x3c],r10d
   1d3b3:	call   5dfe0 <FastPelY_14>
   1d3b8:	mov    r10d,DWORD PTR [rsp+0x3c]
   1d3bd:	mov    esi,r10d
   1d3c0:	jmp    1d347 <UnifiedOneForthPix+0xcd7>
   1d3c2:	nop    WORD PTR [rax+rax*1+0x0]
   1d3c8:	mov    edx,DWORD PTR [rsp+0x10]
   1d3cc:	mov    esi,r9d
   1d3cf:	mov    r8d,r14d
   1d3d2:	mov    ecx,ebp
   1d3d4:	mov    rdi,r15
   1d3d7:	mov    DWORD PTR [rsp+0x3c],r9d
   1d3dc:	call   5dfe0 <FastPelY_14>
   1d3e1:	mov    edx,DWORD PTR [rsp+0xc]
   1d3e5:	mov    r8d,r14d
   1d3e8:	mov    ecx,ebp
   1d3ea:	mov    esi,r12d
   1d3ed:	mov    rdi,r15
   1d3f0:	call   5dfe0 <FastPelY_14>
   1d3f5:	mov    rax,QWORD PTR [rip+0x6b1b4]        # 885b0 <img>
   1d3fc:	mov    r9d,DWORD PTR [rsp+0x3c]
   1d401:	mov    r10d,DWORD PTR [rax+0x11bec]
   1d408:	jmp    1d274 <UnifiedOneForthPix+0xc04>
   1d40d:	nop    DWORD PTR [rax]
   1d410:	mov    eax,DWORD PTR [rsp+0xc]
   1d414:	add    eax,0x1
   1d417:	mov    DWORD PTR [rsp],eax
   1d41a:	jmp    1cf84 <UnifiedOneForthPix+0x914>
   1d41f:	mov    edx,DWORD PTR [rax+0x3c]
   1d422:	test   edx,edx
   1d424:	je     1c77d <UnifiedOneForthPix+0x10d>
   1d42a:	jmp    1c72b <UnifiedOneForthPix+0xbb>
   1d42f:	lea    eax,[rbx*4+0x1c]
   1d436:	mov    DWORD PTR [rsp+0x24],eax
   1d43a:	lea    eax,[rcx*4+0x0]
   1d441:	mov    DWORD PTR [rsp+0x20],eax
   1d445:	cmp    eax,0xfffffffd
   1d448:	jge    1cc54 <UnifiedOneForthPix+0x5e4>
   1d44e:	jmp    1cfa6 <UnifiedOneForthPix+0x936>
   1d453:	lea    rdi,[rip+0x56126]        # 73580 <quant_coef+0x8c0>
   1d45a:	call   38210 <no_mem_exit>
   1d45f:	mov    rax,QWORD PTR [rsp+0x18]
   1d464:	mov    edx,DWORD PTR [rax+0x18f8]
   1d46a:	mov    eax,DWORD PTR [rax+0x18fc]
   1d470:	jmp    1c6ed <UnifiedOneForthPix+0x7d>
   1d475:	lea    rdi,[rip+0x5612c]        # 735a8 <quant_coef+0x8e8>
   1d47c:	call   38210 <no_mem_exit>
   1d481:	mov    rax,QWORD PTR [rsp+0x18]
   1d486:	mov    ebp,DWORD PTR [rax+0x18f8]
   1d48c:	mov    ebx,DWORD PTR [rax+0x18fc]
   1d492:	jmp    1c75e <UnifiedOneForthPix+0xee>
   1d497:	nop    WORD PTR [rax+rax*1+0x0]

000000000001d4a0 <dummy_slice_too_big>:
   1d4a0:	endbr64 
   1d4a4:	xor    eax,eax
   1d4a6:	ret    
   1d4a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000001d4b0 <copy_rdopt_data>:
   1d4b0:	endbr64 
   1d4b4:	push   r15
   1d4b6:	push   r14
   1d4b8:	push   r13
   1d4ba:	push   r12
   1d4bc:	push   rbp
   1d4bd:	push   rbx
   1d4be:	sub    rsp,0x30
   1d4c2:	mov    r12,QWORD PTR [rip+0x6b0e7]        # 885b0 <img>
   1d4c9:	movsxd rdx,DWORD PTR [r12+0xc]
   1d4ce:	mov    rbx,QWORD PTR [r12+0x3758]
   1d4d6:	mov    rax,rdx
   1d4d9:	imul   rdx,rdx,0x278
   1d4e0:	add    rbx,rdx
   1d4e3:	mov    edx,DWORD PTR [r12+0x18]
   1d4e8:	mov    QWORD PTR [rsp+0x8],rbx
   1d4ed:	mov    DWORD PTR [rsp+0x18],edx
   1d4f1:	mov    edx,DWORD PTR [r12+0x11ad0]
   1d4f9:	test   edx,edx
   1d4fb:	je     1d50b <copy_rdopt_data+0x5b>
   1d4fd:	mov    edx,DWORD PTR [rbx+0x214]
   1d503:	test   edx,edx
   1d505:	jne    1d974 <copy_rdopt_data+0x4c4>
   1d50b:	mov    r13,QWORD PTR [rip+0x8384e]        # a0d60 <rdopt>
   1d512:	mov    rbx,QWORD PTR [rsp+0x8]
   1d517:	cmp    DWORD PTR [r12+0x11bf4],0xfffffffd
   1d520:	mov    eax,DWORD PTR [r13+0xc98]
   1d527:	mov    DWORD PTR [rsp-0x68],eax
   1d52b:	mov    eax,DWORD PTR [r13+0xc18]
   1d532:	mov    DWORD PTR [rbx+0x48],eax
   1d535:	mov    eax,DWORD PTR [r13+0xc88]
   1d53c:	mov    DWORD PTR [rbx+0x1cc],eax
   1d542:	mov    rax,QWORD PTR [r13+0xc90]
   1d549:	mov    QWORD PTR [rbx+0x1d0],rax
   1d550:	mov    eax,DWORD PTR [r13+0xc1c]
   1d557:	mov    DWORD PTR [rbx+0x244],eax
   1d55d:	mov    eax,DWORD PTR [r13+0xd00]
   1d564:	mov    DWORD PTR [r12+0x11abc],eax
   1d56c:	mov    eax,DWORD PTR [r13+0xd14]
   1d573:	mov    DWORD PTR [rbx+0x250],eax
   1d579:	mov    eax,DWORD PTR [r13+0xd18]
   1d580:	mov    DWORD PTR [rbx+0x254],eax
   1d586:	mov    eax,DWORD PTR [r13+0xd10]
   1d58d:	mov    DWORD PTR [rbx+0xc],eax
   1d590:	mov    eax,DWORD PTR [r13+0xd04]
   1d597:	mov    DWORD PTR [rbx+0x20c],eax
   1d59d:	jl     1d61f <copy_rdopt_data+0x16f>
   1d5a3:	mov    rbp,QWORD PTR [r13+0xc08]
   1d5aa:	mov    r14,QWORD PTR [r12+0x3738]
   1d5b2:	xor    ebx,ebx
   1d5b4:	mov    r10,QWORD PTR [rbp+rbx*8+0x0]
   1d5b9:	mov    r9,QWORD PTR [r14+rbx*8]
   1d5bd:	xor    r8d,r8d
   1d5c0:	mov    r15,QWORD PTR [r10+r8*1]
   1d5c4:	mov    r11,QWORD PTR [r9+r8*1]
   1d5c8:	xor    eax,eax
   1d5ca:	mov    rdi,QWORD PTR [r15]
   1d5cd:	mov    rsi,QWORD PTR [r11]
   1d5d0:	mov    ecx,DWORD PTR [rdi+rax*1]
   1d5d3:	mov    DWORD PTR [rsi+rax*1],ecx
   1d5d6:	add    rax,0x4
   1d5da:	cmp    rax,0x104
   1d5e0:	jne    1d5d0 <copy_rdopt_data+0x120>
   1d5e2:	mov    rdi,QWORD PTR [r15+0x8]
   1d5e6:	mov    rsi,QWORD PTR [r11+0x8]
   1d5ea:	xor    eax,eax
   1d5ec:	nop    DWORD PTR [rax+0x0]
   1d5f0:	mov    ecx,DWORD PTR [rdi+rax*1]
   1d5f3:	mov    DWORD PTR [rsi+rax*1],ecx
   1d5f6:	add    rax,0x4
   1d5fa:	cmp    rax,0x104
   1d600:	jne    1d5f0 <copy_rdopt_data+0x140>
   1d602:	add    r8,0x8
   1d606:	cmp    r8,0x20
   1d60a:	jne    1d5c0 <copy_rdopt_data+0x110>
   1d60c:	mov    eax,DWORD PTR [r12+0x11bf4]
   1d614:	add    rbx,0x1
   1d618:	add    eax,0x3
   1d61b:	cmp    eax,ebx
   1d61d:	jge    1d5b4 <copy_rdopt_data+0x104>
   1d61f:	mov    r10,QWORD PTR [r13+0xc10]
   1d626:	mov    r9,QWORD PTR [r12+0x3740]
   1d62e:	xor    r8d,r8d
   1d631:	mov    r11,QWORD PTR [r10+r8*1]
   1d635:	mov    rbx,QWORD PTR [r9+r8*1]
   1d639:	xor    eax,eax
   1d63b:	mov    rdi,QWORD PTR [r11]
   1d63e:	mov    rsi,QWORD PTR [rbx]
   1d641:	nop    DWORD PTR [rax+0x0]
   1d648:	mov    ecx,DWORD PTR [rdi+rax*1]
   1d64b:	mov    DWORD PTR [rsi+rax*1],ecx
   1d64e:	add    rax,0x4
   1d652:	cmp    rax,0x48
   1d656:	jne    1d648 <copy_rdopt_data+0x198>
   1d658:	mov    rdi,QWORD PTR [r11+0x8]
   1d65c:	mov    rsi,QWORD PTR [rbx+0x8]
   1d660:	xor    eax,eax
   1d662:	nop    WORD PTR [rax+rax*1+0x0]
   1d668:	mov    ecx,DWORD PTR [rdi+rax*1]
   1d66b:	mov    DWORD PTR [rsi+rax*1],ecx
   1d66e:	add    rax,0x4
   1d672:	cmp    rax,0x48
   1d676:	jne    1d668 <copy_rdopt_data+0x1b8>
   1d678:	add    r8,0x8
   1d67c:	cmp    r8,0x18
   1d680:	jne    1d631 <copy_rdopt_data+0x181>
   1d682:	mov    rax,QWORD PTR [rip+0x6d31f]        # 8a9a8 <enc_picture>
   1d689:	movsxd rcx,edx
   1d68c:	add    edx,0x1
   1d68f:	mov    r15,r13
   1d692:	mov    rdi,rcx
   1d695:	movsxd rdx,edx
   1d698:	movsxd rbp,DWORD PTR [r12+0x94]
   1d6a0:	mov    rbx,QWORD PTR [rax+0x1950]
   1d6a7:	mov    r14,QWORD PTR [rax+0x1958]
   1d6ae:	mov    QWORD PTR [rsp+0x10],rax
   1d6b3:	lea    rax,[r13+0x20]
   1d6b7:	mov    QWORD PTR [rsp-0x58],rax
   1d6bc:	movsxd rax,DWORD PTR [r12+0x90]
   1d6c4:	shl    rdi,0x5
   1d6c8:	mov    rsi,rbp
   1d6cb:	mov    r11,QWORD PTR [rbx]
   1d6ce:	mov    r10,QWORD PTR [r14]
   1d6d1:	mov    QWORD PTR [rsp-0x60],rbx
   1d6d6:	lea    r8,[rbp+rbp*1+0x0]
   1d6db:	lea    rbx,[rax*8+0x0]
   1d6e3:	mov    QWORD PTR [rsp-0x50],rbx
   1d6e8:	add    rbx,0x20
   1d6ec:	mov    QWORD PTR [rsp-0x78],rbx
   1d6f1:	lea    rbx,[rdi+rcx*1]
   1d6f5:	mov    rcx,rdx
   1d6f8:	shl    rcx,0x5
   1d6fc:	mov    QWORD PTR [rsp-0x70],rbx
   1d701:	lea    rbx,[rcx+rdx*1]
   1d705:	mov    QWORD PTR [rsp-0x48],rbx
   1d70a:	mov    rdx,QWORD PTR [rsp-0x50]
   1d70f:	lea    r9,[r8*4+0x0]
   1d717:	mov    rdi,r15
   1d71a:	movsx  rcx,WORD PTR [rdi+0xcc0]
   1d722:	mov    rbx,QWORD PTR [r11+rdx*1]
   1d726:	cmp    DWORD PTR [rsp+0x18],0x1
   1d72b:	mov    WORD PTR [rbx+r8*1],cx
   1d730:	mov    rbx,QWORD PTR [rsp-0x70]
   1d735:	lea    rcx,[rcx+rbx*1+0x2]
   1d73a:	mov    rbx,QWORD PTR [rsp+0x10]
   1d73f:	mov    rbx,QWORD PTR [rbx+rcx*8+0x8]
   1d744:	mov    rcx,QWORD PTR [r10+rdx*1]
   1d748:	mov    QWORD PTR [rcx+r9*1],rbx
   1d74c:	jne    1d788 <copy_rdopt_data+0x2d8>
   1d74e:	mov    rbx,QWORD PTR [rsp-0x60]
   1d753:	movsx  rcx,WORD PTR [rdi+0xce0]
   1d75b:	mov    rbx,QWORD PTR [rbx+0x8]
   1d75f:	mov    rbx,QWORD PTR [rbx+rdx*1]
   1d763:	mov    WORD PTR [rbx+r8*1],cx
   1d768:	mov    rbx,QWORD PTR [rsp-0x48]
   1d76d:	lea    rcx,[rcx+rbx*1+0x2]
   1d772:	mov    rbx,QWORD PTR [rsp+0x10]
   1d777:	mov    rbx,QWORD PTR [rbx+rcx*8+0x8]
   1d77c:	mov    rcx,QWORD PTR [r14+0x8]
   1d780:	mov    rcx,QWORD PTR [rcx+rdx*1]
   1d784:	mov    QWORD PTR [rcx+r9*1],rbx
   1d788:	add    rdi,0x2
   1d78c:	add    rdx,0x8
   1d790:	cmp    QWORD PTR [rsp-0x78],rdx
   1d795:	jne    1d71a <copy_rdopt_data+0x26a>
   1d797:	add    r8,0x2
   1d79b:	add    r15,0x8
   1d79f:	cmp    QWORD PTR [rsp-0x58],r15
   1d7a4:	jne    1d70a <copy_rdopt_data+0x25a>
   1d7aa:	mov    rbx,QWORD PTR [rsp+0x10]
   1d7af:	movsxd rcx,DWORD PTR [r12+0x9c]
   1d7b7:	lea    r10,[r13+0x400]
   1d7be:	movsxd r9,DWORD PTR [r12+0x98]
   1d7c6:	mov    rdx,QWORD PTR [rbx+0x1918]
   1d7cd:	add    r9,r9
   1d7d0:	lea    r8,[rdx+rcx*8]
   1d7d4:	mov    rcx,r13
   1d7d7:	mov    r11,QWORD PTR [r8]
   1d7da:	xor    edx,edx
   1d7dc:	add    r11,r9
   1d7df:	nop
   1d7e0:	mov    edi,DWORD PTR [rcx+rdx*4+0x8]
   1d7e4:	mov    WORD PTR [r11+rdx*2],di
   1d7e9:	add    rdx,0x1
   1d7ed:	cmp    rdx,0x10
   1d7f1:	jne    1d7e0 <copy_rdopt_data+0x330>
   1d7f3:	add    rcx,0x40
   1d7f7:	add    r8,0x8
   1d7fb:	cmp    r10,rcx
   1d7fe:	jne    1d7d7 <copy_rdopt_data+0x327>
   1d800:	mov    r11d,DWORD PTR [r12+0x11bfc]
   1d808:	test   r11d,r11d
   1d80b:	je     1d8af <copy_rdopt_data+0x3ff>
   1d811:	mov    r14d,DWORD PTR [r12+0x11c08]
   1d819:	test   r14d,r14d
   1d81c:	jle    1d8af <copy_rdopt_data+0x3ff>
   1d822:	mov    ebx,DWORD PTR [r12+0x11c04]
   1d82a:	mov    r15,QWORD PTR [rsp+0x10]
   1d82f:	mov    rcx,r13
   1d832:	xor    r11d,r11d
   1d835:	lea    r9d,[rbx-0x1]
   1d839:	test   ebx,ebx
   1d83b:	jle    1d8a2 <copy_rdopt_data+0x3f2>
   1d83d:	mov    rdi,QWORD PTR [r15+0x1940]
   1d844:	mov    edx,DWORD PTR [r12+0xa4]
   1d84c:	movsxd r8,DWORD PTR [r12+0xa0]
   1d854:	mov    r10,QWORD PTR [rdi]
   1d857:	add    edx,r11d
   1d85a:	mov    QWORD PTR [rsp-0x78],rdi
   1d85f:	movsxd rdx,edx
   1d862:	add    r8,r8
   1d865:	mov    rdi,QWORD PTR [r10+rdx*8]
   1d869:	add    rdi,r8
   1d86c:	mov    r10,rdi
   1d86f:	mov    rdi,QWORD PTR [rsp-0x78]
   1d874:	mov    rdi,QWORD PTR [rdi+0x8]
   1d878:	add    r8,QWORD PTR [rdi+rdx*8]
   1d87c:	xor    edx,edx
   1d87e:	mov    edi,DWORD PTR [rcx+rdx*4+0x408]
   1d885:	mov    WORD PTR [r10+rdx*2],di
   1d88a:	mov    edi,DWORD PTR [rcx+rdx*4+0x808]
   1d891:	mov    WORD PTR [r8+rdx*2],di
   1d896:	mov    rdi,rdx
   1d899:	add    rdx,0x1
   1d89d:	cmp    r9,rdi
   1d8a0:	jne    1d87e <copy_rdopt_data+0x3ce>
   1d8a2:	add    r11d,0x1
   1d8a6:	add    rcx,0x40
   1d8aa:	cmp    r11d,r14d
   1d8ad:	jne    1d839 <copy_rdopt_data+0x389>
   1d8af:	mov    rcx,QWORD PTR [rsp+0x8]
   1d8b4:	xor    edx,edx
   1d8b6:	mov    edi,DWORD PTR [r13+rdx*1+0xc20]
   1d8be:	mov    DWORD PTR [rcx+rdx*1+0x1d8],edi
   1d8c5:	mov    edi,DWORD PTR [r13+rdx*1+0xc30]
   1d8cd:	mov    DWORD PTR [rcx+rdx*1+0x1e8],edi
   1d8d4:	add    rdx,0x4
   1d8d8:	cmp    rdx,0x10
   1d8dc:	jne    1d8b6 <copy_rdopt_data+0x406>
   1d8de:	mov    edx,DWORD PTR [r13+0xd08]
   1d8e5:	mov    rbx,QWORD PTR [rsp+0x8]
   1d8ea:	cmp    DWORD PTR [rsp-0x68],0x8
   1d8ef:	mov    DWORD PTR [rbx+0x23c],edx
   1d8f5:	je     1d987 <copy_rdopt_data+0x4d7>
   1d8fb:	mov    edx,DWORD PTR [rsp-0x68]
   1d8ff:	and    edx,0xfffffffb
   1d902:	cmp    edx,0x9
   1d905:	je     1def4 <copy_rdopt_data+0xa44>
   1d90b:	mov    rdi,QWORD PTR [r12+0x68]
   1d910:	mov    r10,QWORD PTR [rsp+0x8]
   1d915:	shl    rbp,0x2
   1d919:	xor    ecx,ecx
   1d91b:	mov    rdx,rax
   1d91e:	lea    eax,[rcx+0x1]
   1d921:	cdqe   
   1d923:	mov    rcx,QWORD PTR [rdi+rdx*8]
   1d927:	add    rdx,0x1
   1d92b:	mov    DWORD PTR [rcx+rbp*1],0x2
   1d932:	mov    ecx,eax
   1d934:	mov    DWORD PTR [r10+rax*4+0x148],0x2
   1d940:	add    rax,0x1
   1d944:	mov    r8d,DWORD PTR [r12+0x90]
   1d94c:	lea    r9d,[r8+0x3]
   1d950:	cmp    r9d,edx
   1d953:	jge    1d923 <copy_rdopt_data+0x473>
   1d955:	mov    eax,DWORD PTR [r12+0x94]
   1d95d:	add    esi,0x1
   1d960:	add    rbp,0x4
   1d964:	lea    edx,[rax+0x3]
   1d967:	cmp    edx,esi
   1d969:	jl     1d9fa <copy_rdopt_data+0x54a>
   1d96f:	movsxd rax,r8d
   1d972:	jmp    1d91b <copy_rdopt_data+0x46b>
   1d974:	and    eax,0x1
   1d977:	cmp    eax,0x1
   1d97a:	sbb    edx,edx
   1d97c:	and    edx,0xfffffffe
   1d97f:	add    edx,0x4
   1d982:	jmp    1d50b <copy_rdopt_data+0x5b>
   1d987:	mov    r8,QWORD PTR [r13+0xc40]
   1d98e:	shl    rbp,0x2
   1d992:	xor    ecx,ecx
   1d994:	mov    r11,rbx
   1d997:	mov    rdi,QWORD PTR [r12+0x68]
   1d99c:	mov    rdx,rax
   1d99f:	lea    eax,[rcx+0x1]
   1d9a2:	cdqe   
   1d9a4:	mov    rcx,QWORD PTR [r8+rdx*8]
   1d9a8:	mov    r9d,DWORD PTR [rcx+rbp*1]
   1d9ac:	mov    rcx,QWORD PTR [rdi+rdx*8]
   1d9b0:	add    rdx,0x1
   1d9b4:	mov    DWORD PTR [rcx+rbp*1],r9d
   1d9b8:	mov    ecx,DWORD PTR [r13+rax*4+0xc44]
   1d9c0:	mov    DWORD PTR [r11+rax*4+0x148],ecx
   1d9c8:	mov    r9d,DWORD PTR [r12+0x90]
   1d9d0:	mov    ecx,eax
   1d9d2:	add    rax,0x1
   1d9d6:	lea    r10d,[r9+0x3]
   1d9da:	cmp    r10d,edx
   1d9dd:	jge    1d9a4 <copy_rdopt_data+0x4f4>
   1d9df:	mov    eax,DWORD PTR [r12+0x94]
   1d9e7:	add    esi,0x1
   1d9ea:	add    rbp,0x4
   1d9ee:	lea    edx,[rax+0x3]
   1d9f1:	cmp    edx,esi
   1d9f3:	jl     1da1f <copy_rdopt_data+0x56f>
   1d9f5:	movsxd rax,r9d
   1d9f8:	jmp    1d99c <copy_rdopt_data+0x4ec>
   1d9fa:	mov    r10d,DWORD PTR [r12+0x11ad0]
   1da02:	mov    DWORD PTR [rsp+0x1c],r8d
   1da07:	mov    DWORD PTR [rsp+0x28],eax
   1da0b:	test   r10d,r10d
   1da0e:	jne    1da35 <copy_rdopt_data+0x585>
   1da10:	add    rsp,0x30
   1da14:	pop    rbx
   1da15:	pop    rbp
   1da16:	pop    r12
   1da18:	pop    r13
   1da1a:	pop    r14
   1da1c:	pop    r15
   1da1e:	ret    
   1da1f:	mov    r10d,DWORD PTR [r12+0x11ad0]
   1da27:	mov    DWORD PTR [rsp+0x1c],r9d
   1da2c:	mov    DWORD PTR [rsp+0x28],eax
   1da30:	test   r10d,r10d
   1da33:	je     1da10 <copy_rdopt_data+0x560>
   1da35:	mov    eax,DWORD PTR [r12+0x24]
   1da3a:	mov    rbx,QWORD PTR [rip+0x6ab77]        # 885b8 <input>
   1da41:	mov    QWORD PTR [rsp-0x78],r12
   1da46:	mov    QWORD PTR [rsp-0x70],0x0
   1da4f:	mov    DWORD PTR [rsp+0x2c],eax
   1da53:	sub    eax,0x1
   1da56:	mov    QWORD PTR [rsp+0x20],rbx
   1da5b:	mov    QWORD PTR [rsp-0x8],rax
   1da60:	mov    QWORD PTR [rsp-0x58],r13
   1da65:	mov    QWORD PTR [rsp-0x68],0x0
   1da6e:	mov    r8d,DWORD PTR [rsp+0x2c]
   1da73:	test   r8d,r8d
   1da76:	jle    1dd88 <copy_rdopt_data+0x8d8>
   1da7c:	mov    rdi,QWORD PTR [rsp-0x58]
   1da81:	mov    rbx,QWORD PTR [rsp-0x70]
   1da86:	mov    rsi,QWORD PTR [rsp-0x68]
   1da8b:	mov    rcx,QWORD PTR [rsp-0x78]
   1da90:	mov    rax,QWORD PTR [rdi+0xca8]
   1da97:	mov    rax,QWORD PTR [rax+rbx*1]
   1da9b:	mov    rdx,QWORD PTR [rax+rsi*1]
   1da9f:	mov    rax,QWORD PTR [rdx]
   1daa2:	mov    rdx,QWORD PTR [rdx+0x8]
   1daa6:	mov    QWORD PTR [rsp-0x50],rax
   1daab:	mov    rax,QWORD PTR [rcx+0x118f8]
   1dab2:	mov    QWORD PTR [rsp-0x40],rdx
   1dab7:	mov    rax,QWORD PTR [rax+rbx*1]
   1dabb:	mov    rax,QWORD PTR [rax+rsi*1]
   1dabf:	mov    r15,QWORD PTR [rax]
   1dac2:	mov    rax,QWORD PTR [rax+0x8]
   1dac6:	mov    QWORD PTR [rsp-0x38],rax
   1dacb:	mov    rax,QWORD PTR [rsp+0x20]
   1dad0:	mov    QWORD PTR [rsp-0x48],r15
   1dad5:	mov    r9d,DWORD PTR [rax+0x4e8]
   1dadc:	mov    rax,QWORD PTR [rdi+0xca0]
   1dae3:	mov    rax,QWORD PTR [rax+rbx*1]
   1dae7:	test   r9d,r9d
   1daea:	setne  BYTE PTR [rsp-0x9]
   1daef:	xor    ebp,ebp
   1daf1:	mov    rdx,QWORD PTR [rax+rsi*1]
   1daf5:	mov    rax,QWORD PTR [rdx]
   1daf8:	mov    QWORD PTR [rsp-0x30],rax
   1dafd:	mov    rax,QWORD PTR [rcx+0x118f0]
   1db04:	mov    rax,QWORD PTR [rax+rbx*1]
   1db08:	mov    rax,QWORD PTR [rax+rsi*1]
   1db0c:	mov    rbx,QWORD PTR [rax]
   1db0f:	mov    QWORD PTR [rsp-0x28],rbx
   1db14:	mov    rbx,QWORD PTR [rdx+0x8]
   1db18:	mov    QWORD PTR [rsp-0x20],rbx
   1db1d:	mov    rax,QWORD PTR [rax+0x8]
   1db21:	mov    QWORD PTR [rsp-0x18],rax
   1db26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1db30:	mov    rax,QWORD PTR [rsp-0x50]
   1db35:	cmp    ebp,0x1
   1db38:	mov    QWORD PTR [rsp-0x60],rbp
   1db3d:	lea    r15,[rbp*8+0x0]
   1db45:	sete   dl
   1db48:	and    dl,BYTE PTR [rsp-0x9]
   1db4c:	mov    rbx,QWORD PTR [rax+rbp*8]
   1db50:	mov    rax,QWORD PTR [rsp-0x48]
   1db55:	mov    r11,QWORD PTR [rax+rbp*8]
   1db59:	mov    rax,QWORD PTR [rsp-0x40]
   1db5e:	mov    r10,QWORD PTR [rax+rbp*8]
   1db62:	mov    rax,QWORD PTR [rsp-0x38]
   1db67:	mov    r9,QWORD PTR [rax+rbp*8]
   1db6b:	mov    rax,QWORD PTR [rsp-0x30]
   1db70:	mov    r8,QWORD PTR [rax+rbp*8]
   1db74:	mov    rax,QWORD PTR [rsp-0x28]
   1db79:	mov    rdi,QWORD PTR [rax+rbp*8]
   1db7d:	mov    rax,QWORD PTR [rsp-0x20]
   1db82:	mov    rsi,QWORD PTR [rax+rbp*8]
   1db86:	mov    rax,QWORD PTR [rsp-0x18]
   1db8b:	mov    rcx,QWORD PTR [rax+rbp*8]
   1db8f:	xor    eax,eax
   1db91:	mov    rbp,r15
   1db94:	jmp    1dbe8 <copy_rdopt_data+0x738>
   1db96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1dba0:	mov    r13,QWORD PTR [r8+rax*1]
   1dba4:	mov    r12,QWORD PTR [rdi+rax*1]
   1dba8:	movzx  r14d,WORD PTR [r13+0x0]
   1dbad:	mov    WORD PTR [r12],r14w
   1dbb2:	movzx  r13d,WORD PTR [r13+0x2]
   1dbb7:	mov    WORD PTR [r12+0x2],r13w
   1dbbd:	mov    r13,QWORD PTR [rsi+rax*1]
   1dbc1:	mov    r12,QWORD PTR [rcx+rax*1]
   1dbc5:	add    rax,0x8
   1dbc9:	movzx  r14d,WORD PTR [r13+0x0]
   1dbce:	mov    WORD PTR [r12],r14w
   1dbd3:	movzx  r13d,WORD PTR [r13+0x2]
   1dbd8:	mov    WORD PTR [r12+0x2],r13w
   1dbde:	cmp    rax,0x48
   1dbe2:	je     1dd70 <copy_rdopt_data+0x8c0>
   1dbe8:	mov    r13,QWORD PTR [rbx+rax*1]
   1dbec:	mov    r12,QWORD PTR [r11+rax*1]
   1dbf0:	movzx  r14d,WORD PTR [r13+0x0]
   1dbf5:	mov    WORD PTR [r12],r14w
   1dbfa:	movzx  r13d,WORD PTR [r13+0x2]
   1dbff:	mov    WORD PTR [r12+0x2],r13w
   1dc05:	mov    r13,QWORD PTR [r10+rax*1]
   1dc09:	mov    r12,QWORD PTR [r9+rax*1]
   1dc0d:	movzx  r14d,WORD PTR [r13+0x0]
   1dc12:	mov    WORD PTR [r12],r14w
   1dc17:	movzx  r13d,WORD PTR [r13+0x2]
   1dc1c:	mov    WORD PTR [r12+0x2],r13w
   1dc22:	test   dl,dl
   1dc24:	je     1dba0 <copy_rdopt_data+0x6f0>
   1dc2a:	mov    r15,QWORD PTR [rsp-0x78]
   1dc2f:	cmp    DWORD PTR [r15+0x18],0x1
   1dc34:	jne    1dba0 <copy_rdopt_data+0x6f0>
   1dc3a:	mov    r15,QWORD PTR [rsp-0x58]
   1dc3f:	mov    r14,QWORD PTR [rsp-0x70]
   1dc44:	mov    r13,QWORD PTR [rsp-0x68]
   1dc49:	mov    r12,QWORD PTR [r15+0xcb0]
   1dc50:	mov    r12,QWORD PTR [r12+r14*1]
   1dc54:	mov    r15,QWORD PTR [r12+r13*1]
   1dc58:	mov    r12,QWORD PTR [r15]
   1dc5b:	mov    QWORD PTR [rsp],r15
   1dc5f:	mov    r12,QWORD PTR [r12+rbp*1]
   1dc63:	mov    r15,QWORD PTR [r12+rax*1]
   1dc67:	mov    r12,QWORD PTR [rsp-0x78]
   1dc6c:	mov    r12,QWORD PTR [r12+0x11900]
   1dc74:	mov    r12,QWORD PTR [r12+r14*1]
   1dc78:	mov    r12,QWORD PTR [r12+r13*1]
   1dc7c:	movzx  r13d,WORD PTR [r15]
   1dc80:	mov    r14,QWORD PTR [r12]
   1dc84:	mov    r12,QWORD PTR [r12+0x8]
   1dc89:	mov    r14,QWORD PTR [r14+rbp*1]
   1dc8d:	mov    r12,QWORD PTR [r12+rbp*1]
   1dc91:	mov    r14,QWORD PTR [r14+rax*1]
   1dc95:	mov    r12,QWORD PTR [r12+rax*1]
   1dc99:	mov    WORD PTR [r14],r13w
   1dc9d:	movzx  r15d,WORD PTR [r15+0x2]
   1dca2:	mov    WORD PTR [r14+0x2],r15w
   1dca7:	mov    r15,QWORD PTR [rsp]
   1dcab:	mov    r13,QWORD PTR [r15+0x8]
   1dcaf:	mov    r13,QWORD PTR [r13+rbp*1+0x0]
   1dcb4:	mov    r13,QWORD PTR [r13+rax*1+0x0]
   1dcb9:	movzx  r14d,WORD PTR [r13+0x0]
   1dcbe:	mov    WORD PTR [r12],r14w
   1dcc3:	movzx  r13d,WORD PTR [r13+0x2]
   1dcc8:	mov    WORD PTR [r12+0x2],r13w
   1dcce:	mov    r12,QWORD PTR [rsp-0x58]
   1dcd3:	mov    r14,QWORD PTR [rsp-0x70]
   1dcd8:	mov    r13,QWORD PTR [rsp-0x68]
   1dcdd:	mov    r12,QWORD PTR [r12+0xcb8]
   1dce5:	mov    r12,QWORD PTR [r12+r14*1]
   1dce9:	mov    r15,QWORD PTR [r12+r13*1]
   1dced:	mov    r12,QWORD PTR [r15]
   1dcf0:	mov    QWORD PTR [rsp],r15
   1dcf4:	mov    r12,QWORD PTR [r12+rbp*1]
   1dcf8:	mov    r15,QWORD PTR [r12+rax*1]
   1dcfc:	mov    r12,QWORD PTR [rsp-0x78]
   1dd01:	mov    r12,QWORD PTR [r12+0x11908]
   1dd09:	mov    r12,QWORD PTR [r12+r14*1]
   1dd0d:	mov    r12,QWORD PTR [r12+r13*1]
   1dd11:	movzx  r13d,WORD PTR [r15]
   1dd15:	mov    r14,QWORD PTR [r12]
   1dd19:	mov    r12,QWORD PTR [r12+0x8]
   1dd1e:	mov    r14,QWORD PTR [r14+rbp*1]
   1dd22:	mov    r12,QWORD PTR [r12+rbp*1]
   1dd26:	mov    r14,QWORD PTR [r14+rax*1]
   1dd2a:	mov    r12,QWORD PTR [r12+rax*1]
   1dd2e:	mov    WORD PTR [r14],r13w
   1dd32:	movzx  r15d,WORD PTR [r15+0x2]
   1dd37:	mov    WORD PTR [r14+0x2],r15w
   1dd3c:	mov    r15,QWORD PTR [rsp]
   1dd40:	mov    r13,QWORD PTR [r15+0x8]
   1dd44:	mov    r13,QWORD PTR [r13+rbp*1+0x0]
   1dd49:	mov    r13,QWORD PTR [r13+rax*1+0x0]
   1dd4e:	movzx  r14d,WORD PTR [r13+0x0]
   1dd53:	mov    WORD PTR [r12],r14w
   1dd58:	movzx  r13d,WORD PTR [r13+0x2]
   1dd5d:	mov    WORD PTR [r12+0x2],r13w
   1dd63:	jmp    1dba0 <copy_rdopt_data+0x6f0>
   1dd68:	nop    DWORD PTR [rax+rax*1+0x0]
   1dd70:	mov    rbp,QWORD PTR [rsp-0x60]
   1dd75:	lea    rax,[rbp+0x1]
   1dd79:	cmp    QWORD PTR [rsp-0x8],rbp
   1dd7e:	je     1dd88 <copy_rdopt_data+0x8d8>
   1dd80:	mov    rbp,rax
   1dd83:	jmp    1db30 <copy_rdopt_data+0x680>
   1dd88:	add    QWORD PTR [rsp-0x68],0x8
   1dd8e:	mov    rax,QWORD PTR [rsp-0x68]
   1dd93:	cmp    rax,0x20
   1dd97:	jne    1da6e <copy_rdopt_data+0x5be>
   1dd9d:	add    QWORD PTR [rsp-0x70],0x8
   1dda3:	mov    rax,QWORD PTR [rsp-0x70]
   1dda8:	cmp    rax,0x20
   1ddac:	jne    1da65 <copy_rdopt_data+0x5b5>
   1ddb2:	mov    rax,QWORD PTR [rsp+0x8]
   1ddb7:	mov    rbx,QWORD PTR [rsp+0x10]
   1ddbc:	mov    r13,QWORD PTR [rsp-0x58]
   1ddc1:	mov    eax,DWORD PTR [rax+0x48]
   1ddc4:	mov    r15,QWORD PTR [rbx+0x1968]
   1ddcb:	lea    edx,[rax-0x9]
   1ddce:	cmp    edx,0x1
   1ddd1:	jbe    1e01b <copy_rdopt_data+0xb6b>
   1ddd7:	cmp    eax,0xd
   1ddda:	je     1e01b <copy_rdopt_data+0xb6b>
   1dde0:	mov    eax,DWORD PTR [rsp+0x28]
   1dde4:	mov    rbx,QWORD PTR [r15]
   1dde7:	xor    ebp,ebp
   1dde9:	xor    r11d,r11d
   1ddec:	mov    r10,r13
   1ddef:	mov    DWORD PTR [rsp-0x78],eax
   1ddf3:	mov    eax,r11d
   1ddf6:	mov    DWORD PTR [rsp-0x60],r11d
   1ddfb:	lea    r12,[r10+rbp*1]
   1ddff:	and    eax,0xfffffffe
   1de02:	mov    DWORD PTR [rsp-0x70],eax
   1de06:	movsxd rax,DWORD PTR [rsp-0x78]
   1de0b:	lea    r9,[rax*8+0x0]
   1de13:	xor    eax,eax
   1de15:	mov    edx,eax
   1de17:	mov    rsi,QWORD PTR [rsp+0x8]
   1de1c:	sar    edx,1
   1de1e:	add    edx,DWORD PTR [rsp-0x70]
   1de22:	movsxd rdx,edx
   1de25:	lea    rdx,[rsi+rdx*4]
   1de29:	movsxd rdi,DWORD PTR [rdx+0x1d8]
   1de30:	mov    edx,DWORD PTR [rdx+0x1e8]
   1de36:	mov    DWORD PTR [rsp-0x68],edx
   1de3a:	cmp    edx,0x1
   1de3d:	je     1df6d <copy_rdopt_data+0xabd>
   1de43:	mov    rsi,QWORD PTR [r10+0xca8]
   1de4a:	mov    ecx,DWORD PTR [rsp+0x1c]
   1de4e:	lea    r11,[rax*8+0x0]
   1de56:	movsx  r14,WORD PTR [r12+0xcc0]
   1de5f:	mov    rdx,QWORD PTR [rsi+rax*8]
   1de63:	add    ecx,eax
   1de65:	cmp    DWORD PTR [rsp+0x18],0x1
   1de6a:	movsxd rcx,ecx
   1de6d:	mov    rdx,QWORD PTR [rdx+rbp*1]
   1de71:	mov    r8,QWORD PTR [rbx+rcx*8]
   1de75:	mov    r13,QWORD PTR [rdx]
   1de78:	mov    r8,QWORD PTR [r8+r9*1]
   1de7c:	lea    rdx,[rdi*8+0x0]
   1de84:	mov    r14,QWORD PTR [r13+r14*8+0x0]
   1de89:	mov    r14,QWORD PTR [r14+rdi*8]
   1de8d:	movzx  r14d,WORD PTR [r14]
   1de91:	mov    WORD PTR [r8],r14w
   1de95:	movsx  r14,WORD PTR [r12+0xcc0]
   1de9e:	mov    r13,QWORD PTR [r13+r14*8+0x0]
   1dea3:	mov    rdi,QWORD PTR [r13+rdi*8+0x0]
   1dea8:	movzx  edi,WORD PTR [rdi+0x2]
   1deac:	mov    WORD PTR [r8+0x2],di
   1deb1:	je     1dffc <copy_rdopt_data+0xb4c>
   1deb7:	add    rax,0x1
   1debb:	add    r12,0x2
   1debf:	cmp    rax,0x4
   1dec3:	jne    1de15 <copy_rdopt_data+0x965>
   1dec9:	mov    r11d,DWORD PTR [rsp-0x60]
   1dece:	add    DWORD PTR [rsp-0x78],0x1
   1ded3:	add    rbp,0x8
   1ded7:	add    r11d,0x1
   1dedb:	cmp    r11d,0x4
   1dedf:	jne    1ddf3 <copy_rdopt_data+0x943>
   1dee5:	add    rsp,0x30
   1dee9:	pop    rbx
   1deea:	pop    rbp
   1deeb:	pop    r12
   1deed:	pop    r13
   1deef:	pop    r14
   1def1:	pop    r15
   1def3:	ret    
   1def4:	mov    rdi,QWORD PTR [r12+0x68]
   1def9:	mov    r11,QWORD PTR [rsp+0x8]
   1defe:	shl    rbp,0x2
   1df02:	xor    ecx,ecx
   1df04:	mov    r8,QWORD PTR [r13+0xc40]
   1df0b:	mov    rdx,rax
   1df0e:	lea    eax,[rcx+0x1]
   1df11:	cdqe   
   1df13:	mov    rcx,QWORD PTR [r8+rdx*8]
   1df17:	mov    r9d,DWORD PTR [rcx+rbp*1]
   1df1b:	mov    rcx,QWORD PTR [rdi+rdx*8]
   1df1f:	add    rdx,0x1
   1df23:	mov    DWORD PTR [rcx+rbp*1],r9d
   1df27:	mov    ecx,DWORD PTR [r13+rax*4+0xc44]
   1df2f:	mov    DWORD PTR [r11+rax*4+0x148],ecx
   1df37:	mov    r9d,DWORD PTR [r12+0x90]
   1df3f:	mov    ecx,eax
   1df41:	add    rax,0x1
   1df45:	lea    r10d,[r9+0x3]
   1df49:	cmp    r10d,edx
   1df4c:	jge    1df13 <copy_rdopt_data+0xa63>
   1df4e:	mov    eax,DWORD PTR [r12+0x94]
   1df56:	add    esi,0x1
   1df59:	add    rbp,0x4
   1df5d:	lea    edx,[rax+0x3]
   1df60:	cmp    edx,esi
   1df62:	jl     1da1f <copy_rdopt_data+0x56f>
   1df68:	movsxd rax,r9d
   1df6b:	jmp    1df0b <copy_rdopt_data+0xa5b>
   1df6d:	mov    edx,DWORD PTR [rsp+0x1c]
   1df71:	add    edx,eax
   1df73:	cmp    DWORD PTR [rsp+0x18],0x1
   1df78:	movsxd rdx,edx
   1df7b:	mov    rdx,QWORD PTR [rbx+rdx*8]
   1df7f:	mov    rdx,QWORD PTR [rdx+r9*1]
   1df83:	mov    DWORD PTR [rdx],0x0
   1df89:	jne    1deb7 <copy_rdopt_data+0xa07>
   1df8f:	mov    rsi,QWORD PTR [r10+0xca8]
   1df96:	lea    r11,[rax*8+0x0]
   1df9e:	lea    rdx,[rdi*8+0x0]
   1dfa6:	mov    rcx,QWORD PTR [rsi+r11*1]
   1dfaa:	mov    rdi,QWORD PTR [r15+0x8]
   1dfae:	mov    rcx,QWORD PTR [rcx+rbp*1]
   1dfb2:	mov    rsi,QWORD PTR [rcx+0x8]
   1dfb6:	mov    ecx,DWORD PTR [rsp+0x1c]
   1dfba:	add    ecx,eax
   1dfbc:	movsxd rcx,ecx
   1dfbf:	mov    rcx,QWORD PTR [rdi+rcx*8]
   1dfc3:	movsx  rdi,WORD PTR [r12+0xce0]
   1dfcc:	mov    rdi,QWORD PTR [rsi+rdi*8]
   1dfd0:	mov    rcx,QWORD PTR [rcx+r9*1]
   1dfd4:	mov    rdi,QWORD PTR [rdi+rdx*1]
   1dfd8:	movzx  edi,WORD PTR [rdi]
   1dfdb:	mov    WORD PTR [rcx],di
   1dfde:	movsx  rdi,WORD PTR [r12+0xce0]
   1dfe7:	mov    rsi,QWORD PTR [rsi+rdi*8]
   1dfeb:	mov    rdx,QWORD PTR [rsi+rdx*1]
   1dfef:	movzx  edx,WORD PTR [rdx+0x2]
   1dff3:	mov    WORD PTR [rcx+0x2],dx
   1dff7:	jmp    1deb7 <copy_rdopt_data+0xa07>
   1dffc:	mov    edi,DWORD PTR [rsp-0x68]
   1e000:	test   edi,edi
   1e002:	jne    1dfa6 <copy_rdopt_data+0xaf6>
   1e004:	mov    rdx,QWORD PTR [r15+0x8]
   1e008:	mov    rdx,QWORD PTR [rdx+rcx*8]
   1e00c:	mov    rdx,QWORD PTR [rdx+r9*1]
   1e010:	mov    DWORD PTR [rdx],0x0
   1e016:	jmp    1deb7 <copy_rdopt_data+0xa07>
   1e01b:	movsxd rdx,DWORD PTR [rsp+0x28]
   1e020:	movsxd rax,DWORD PTR [rsp+0x1c]
   1e025:	mov    r8,QWORD PTR [r15]
   1e028:	shl    rdx,0x3
   1e02c:	shl    rax,0x3
   1e030:	lea    rdi,[rdx+0x20]
   1e034:	lea    rsi,[rax+0x20]
   1e038:	mov    rcx,rax
   1e03b:	mov    r9,QWORD PTR [r8+rcx*1]
   1e03f:	cmp    DWORD PTR [rsp+0x18],0x1
   1e044:	mov    r9,QWORD PTR [r9+rdx*1]
   1e048:	mov    DWORD PTR [r9],0x0
   1e04f:	jne    1e064 <copy_rdopt_data+0xbb4>
   1e051:	mov    r9,QWORD PTR [r15+0x8]
   1e055:	mov    r9,QWORD PTR [r9+rcx*1]
   1e059:	mov    r9,QWORD PTR [r9+rdx*1]
   1e05d:	mov    DWORD PTR [r9],0x0
   1e064:	add    rcx,0x8
   1e068:	cmp    rsi,rcx
   1e06b:	jne    1e03b <copy_rdopt_data+0xb8b>
   1e06d:	add    rdx,0x8
   1e071:	cmp    rdi,rdx
   1e074:	jne    1e038 <copy_rdopt_data+0xb88>
   1e076:	add    rsp,0x30
   1e07a:	pop    rbx
   1e07b:	pop    rbp
   1e07c:	pop    r12
   1e07e:	pop    r13
   1e080:	pop    r14
   1e082:	pop    r15
   1e084:	ret    
   1e085:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001e090 <buf2img>:
   1e090:	endbr64 
   1e094:	push   r15
   1e096:	push   r14
   1e098:	push   r13
   1e09a:	push   r12
   1e09c:	mov    r12d,edx
   1e09f:	push   rbp
   1e0a0:	mov    ebp,ecx
   1e0a2:	push   rbx
   1e0a3:	mov    rbx,rdi
   1e0a6:	sub    rsp,0x28
   1e0aa:	mov    QWORD PTR [rsp+0x8],rsi
   1e0af:	mov    DWORD PTR [rsp+0x10],r8d
   1e0b4:	cmp    r8d,0x2
   1e0b8:	ja     1e0fd <buf2img+0x6d>
   1e0ba:	xor    eax,eax
   1e0bc:	call   468d0 <testEndian>
   1e0c1:	mov    r8d,DWORD PTR [rsp+0x10]
   1e0c6:	test   eax,eax
   1e0c8:	je     1e122 <buf2img+0x92>
   1e0ca:	cmp    r8d,0x2
   1e0ce:	je     1e287 <buf2img+0x1f7>
   1e0d4:	cmp    r8d,0x1
   1e0d8:	je     1e226 <buf2img+0x196>
   1e0de:	add    rsp,0x28
   1e0e2:	mov    esi,0x1f4
   1e0e7:	lea    rdi,[rip+0x55552]        # 73640 <quant_coef+0x980>
   1e0ee:	pop    rbx
   1e0ef:	pop    rbp
   1e0f0:	pop    r12
   1e0f2:	pop    r13
   1e0f4:	pop    r14
   1e0f6:	pop    r15
   1e0f8:	jmp    19180 <error>
   1e0fd:	mov    esi,0x1f4
   1e102:	lea    rdi,[rip+0x554c7]        # 735d0 <quant_coef+0x910>
   1e109:	call   19180 <error>
   1e10e:	xor    eax,eax
   1e110:	call   468d0 <testEndian>
   1e115:	mov    r8d,DWORD PTR [rsp+0x10]
   1e11a:	test   eax,eax
   1e11c:	jne    1e1b4 <buf2img+0x124>
   1e122:	test   ebp,ebp
   1e124:	jle    1e1a5 <buf2img+0x115>
   1e126:	mov    eax,r8d
   1e129:	mov    DWORD PTR [rsp+0x10],0x0
   1e131:	movsxd r15,r8d
   1e134:	imul   eax,r12d
   1e138:	mov    DWORD PTR [rsp+0x14],eax
   1e13c:	lea    eax,[rbp-0x1]
   1e13f:	lea    rax,[rbx+rax*8+0x8]
   1e144:	mov    QWORD PTR [rsp+0x18],rax
   1e149:	lea    eax,[r12-0x1]
   1e14e:	lea    rbp,[rax+rax*1+0x2]
   1e153:	nop    DWORD PTR [rax+rax*1+0x0]
   1e158:	movsxd rsi,DWORD PTR [rsp+0x10]
   1e15d:	mov    rax,QWORD PTR [rsp+0x8]
   1e162:	xor    r14d,r14d
   1e165:	lea    r13,[rax+rsi*1]
   1e169:	test   r12d,r12d
   1e16c:	jle    1e192 <buf2img+0x102>
   1e16e:	xchg   ax,ax
   1e170:	mov    rdi,QWORD PTR [rbx]
   1e173:	xor    eax,eax
   1e175:	mov    rsi,r13
   1e178:	mov    rdx,r15
   1e17b:	add    r13,r15
   1e17e:	add    rdi,r14
   1e181:	add    r14,0x2
   1e185:	mov    WORD PTR [rdi],ax
   1e188:	call   4440 <memcpy@plt>
   1e18d:	cmp    r14,rbp
   1e190:	jne    1e170 <buf2img+0xe0>
   1e192:	mov    ecx,DWORD PTR [rsp+0x14]
   1e196:	add    rbx,0x8
   1e19a:	add    DWORD PTR [rsp+0x10],ecx
   1e19e:	cmp    rbx,QWORD PTR [rsp+0x18]
   1e1a3:	jne    1e158 <buf2img+0xc8>
   1e1a5:	add    rsp,0x28
   1e1a9:	pop    rbx
   1e1aa:	pop    rbp
   1e1ab:	pop    r12
   1e1ad:	pop    r13
   1e1af:	pop    r14
   1e1b1:	pop    r15
   1e1b3:	ret    
   1e1b4:	cmp    r8d,0x4
   1e1b8:	jne    1e0d4 <buf2img+0x44>
   1e1be:	test   ebp,ebp
   1e1c0:	jle    1e0de <buf2img+0x4e>
   1e1c6:	lea    eax,[rbp-0x1]
   1e1c9:	xor    r8d,r8d
   1e1cc:	lea    edi,[r12-0x1]
   1e1d1:	lea    r9,[rbx+rax*8+0x8]
   1e1d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e1e0:	test   r12d,r12d
   1e1e3:	jle    1e215 <buf2img+0x185>
   1e1e5:	mov    rcx,QWORD PTR [rsp+0x8]
   1e1ea:	movsxd rax,r8d
   1e1ed:	mov    rsi,QWORD PTR [rbx]
   1e1f0:	lea    rcx,[rcx+rax*4]
   1e1f4:	xor    eax,eax
   1e1f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e200:	mov    edx,DWORD PTR [rcx+rax*4]
   1e203:	bswap  edx
   1e205:	mov    WORD PTR [rsi+rax*2],dx
   1e209:	mov    rdx,rax
   1e20c:	add    rax,0x1
   1e210:	cmp    rdi,rdx
   1e213:	jne    1e200 <buf2img+0x170>
   1e215:	add    rbx,0x8
   1e219:	add    r8d,r12d
   1e21c:	cmp    r9,rbx
   1e21f:	jne    1e1e0 <buf2img+0x150>
   1e221:	jmp    1e0de <buf2img+0x4e>
   1e226:	test   ebp,ebp
   1e228:	jle    1e1a5 <buf2img+0x115>
   1e22e:	lea    eax,[rbp-0x1]
   1e231:	xor    r8d,r8d
   1e234:	lea    edi,[r12-0x1]
   1e239:	lea    r9,[rbx+rax*8+0x8]
   1e23e:	xchg   ax,ax
   1e240:	test   r12d,r12d
   1e243:	jle    1e26c <buf2img+0x1dc>
   1e245:	mov    rsi,QWORD PTR [rbx]
   1e248:	movsxd rcx,r8d
   1e24b:	xor    eax,eax
   1e24d:	add    rcx,QWORD PTR [rsp+0x8]
   1e252:	nop    WORD PTR [rax+rax*1+0x0]
   1e258:	movzx  edx,BYTE PTR [rcx+rax*1]
   1e25c:	mov    WORD PTR [rsi+rax*2],dx
   1e260:	mov    rdx,rax
   1e263:	add    rax,0x1
   1e267:	cmp    rdx,rdi
   1e26a:	jne    1e258 <buf2img+0x1c8>
   1e26c:	add    rbx,0x8
   1e270:	add    r8d,r12d
   1e273:	cmp    rbx,r9
   1e276:	jne    1e240 <buf2img+0x1b0>
   1e278:	add    rsp,0x28
   1e27c:	pop    rbx
   1e27d:	pop    rbp
   1e27e:	pop    r12
   1e280:	pop    r13
   1e282:	pop    r14
   1e284:	pop    r15
   1e286:	ret    
   1e287:	test   ebp,ebp
   1e289:	jle    1e1a5 <buf2img+0x115>
   1e28f:	lea    eax,[rbp-0x1]
   1e292:	xor    r8d,r8d
   1e295:	lea    edi,[r12-0x1]
   1e29a:	lea    r9,[rbx+rax*8+0x8]
   1e29f:	nop
   1e2a0:	test   r12d,r12d
   1e2a3:	jle    1e2d8 <buf2img+0x248>
   1e2a5:	mov    rcx,QWORD PTR [rsp+0x8]
   1e2aa:	movsxd rax,r8d
   1e2ad:	mov    rsi,QWORD PTR [rbx]
   1e2b0:	lea    rcx,[rcx+rax*2]
   1e2b4:	xor    eax,eax
   1e2b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e2c0:	movzx  edx,WORD PTR [rcx+rax*2]
   1e2c4:	rol    dx,0x8
   1e2c8:	mov    WORD PTR [rsi+rax*2],dx
   1e2cc:	mov    rdx,rax
   1e2cf:	add    rax,0x1
   1e2d3:	cmp    rdi,rdx
   1e2d6:	jne    1e2c0 <buf2img+0x230>
   1e2d8:	add    rbx,0x8
   1e2dc:	add    r8d,r12d
   1e2df:	cmp    r9,rbx
   1e2e2:	jne    1e2a0 <buf2img+0x210>
   1e2e4:	add    rsp,0x28
   1e2e8:	pop    rbx
   1e2e9:	pop    rbp
   1e2ea:	pop    r12
   1e2ec:	pop    r13
   1e2ee:	pop    r14
   1e2f0:	pop    r15
   1e2f2:	ret    
   1e2f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1e2fe:	xchg   ax,ax

000000000001e300 <encode_one_frame>:
   1e300:	endbr64 
   1e304:	push   r15
   1e306:	push   r14
   1e308:	push   r13
   1e30a:	push   r12
   1e30c:	push   rbp
   1e30d:	push   rbx
   1e30e:	sub    rsp,0x48
   1e312:	mov    rsi,QWORD PTR [rip+0x6a29f]        # 885b8 <input>
   1e319:	mov    rcx,QWORD PTR [rip+0x6a290]        # 885b0 <img>
   1e320:	mov    DWORD PTR [rip+0x814ee],0x0        # 9f818 <me_time>
   1e32a:	mov    QWORD PTR [rip+0x6c67b],0x0        # 8a9b0 <enc_frame_picture>
   1e335:	mov    rbx,QWORD PTR [rip+0x6a26c]        # 885a8 <stats>
   1e33c:	mov    r13d,DWORD PTR [rsi+0x38]
   1e340:	mov    r10d,DWORD PTR [rcx]
   1e343:	mov    DWORD PTR [rcx+0x1187c],0x0
   1e34d:	mov    QWORD PTR [rip+0x6c630],0x0        # 8a988 <enc_frame_picture2>
   1e358:	mov    QWORD PTR [rip+0x6c655],0x0        # 8a9b8 <enc_frame_picture3>
   1e363:	mov    DWORD PTR [rcx+0x11bb0],0x0
   1e36d:	test   r13d,r13d
   1e370:	je     1e37b <encode_one_frame+0x7b>
   1e372:	test   r10d,r10d
   1e375:	jne    1fcf0 <encode_one_frame+0x19f0>
   1e37b:	mov    rax,QWORD PTR [rip+0x95ebe]        # b4240 <imgY_org_frm>
   1e382:	mov    edx,DWORD PTR [rcx+0x34]
   1e385:	mov    DWORD PTR [rcx+0xc],0x0
   1e38c:	mov    r9,QWORD PTR [rip+0x6c62d]        # 8a9c0 <last_P_no_frm>
   1e393:	mov    DWORD PTR [rcx+0x14],0x0
   1e39a:	mov    QWORD PTR [rip+0x99027],rax        # b73c8 <imgY_org>
   1e3a1:	mov    rax,QWORD PTR [rip+0x7fec0]        # 9e268 <imgUV_org_frm>
   1e3a8:	mov    DWORD PTR [rbx+0x18],0x0
   1e3af:	mov    QWORD PTR [rip+0x9471a],rax        # b2ad0 <imgUV_org>
   1e3b6:	mov    eax,DWORD PTR [rcx+0x3c]
   1e3b9:	mov    QWORD PTR [rip+0x6c5c0],r9        # 8a980 <last_P_no>
   1e3c0:	test   eax,eax
   1e3c2:	lea    r8d,[rax+0xf]
   1e3c6:	mov    DWORD PTR [rcx+0x60],0x0
   1e3cd:	mov    QWORD PTR [rcx+0x88],0x0
   1e3d8:	cmovns r8d,eax
   1e3dc:	lea    eax,[rdx+0xf]
   1e3df:	mov    QWORD PTR [rcx+0x90],0x0
   1e3ea:	mov    QWORD PTR [rcx+0x98],0x0
   1e3f5:	sar    r8d,0x4
   1e3f9:	test   edx,edx
   1e3fb:	mov    QWORD PTR [rcx+0xa0],0x0
   1e406:	cmovns eax,edx
   1e409:	sar    eax,0x4
   1e40c:	imul   eax,r8d
   1e410:	test   eax,eax
   1e412:	jle    1e44a <encode_one_frame+0x14a>
   1e414:	sub    eax,0x1
   1e417:	mov    rdi,QWORD PTR [rcx+0x3758]
   1e41e:	imul   rax,rax,0x278
   1e425:	lea    rdx,[rdi+0x4]
   1e429:	lea    rax,[rdi+rax*1+0x27c]
   1e431:	nop    DWORD PTR [rax+0x0]
   1e438:	mov    DWORD PTR [rdx],0xffffffff
   1e43e:	add    rdx,0x278
   1e445:	cmp    rax,rdx
   1e448:	jne    1e438 <encode_one_frame+0x138>
   1e44a:	mov    eax,DWORD PTR [rsi+0x14]
   1e44d:	mov    ebp,DWORD PTR [rip+0x6a699]        # 88aec <start_frame_no_in_this_IGOP>
   1e453:	mov    ebx,DWORD PTR [rip+0x6a68f]        # 88ae8 <start_tr_in_this_IGOP>
   1e459:	mov    r12d,DWORD PTR [rcx+0x118e4]
   1e460:	lea    edi,[rax+0x1]
   1e463:	mov    eax,r10d
   1e466:	sub    eax,ebp
   1e468:	mov    edx,edi
   1e46a:	imul   edx,eax
   1e46d:	lea    r11d,[rbx+rdx*1]
   1e471:	test   r12d,r12d
   1e474:	jne    1e8b0 <encode_one_frame+0x5b0>
   1e47a:	mov    edx,DWORD PTR [rcx+0x118c4]
   1e480:	mov    DWORD PTR [rcx+0x11870],r11d
   1e487:	mov    DWORD PTR [rcx+0x118c4],r11d
   1e48e:	mov    DWORD PTR [rcx+0x118c8],edx
   1e494:	mov    edx,DWORD PTR [rsi+0x988]
   1e49a:	test   edx,edx
   1e49c:	jne    1e890 <encode_one_frame+0x590>
   1e4a2:	cmp    r10d,ebp
   1e4a5:	je     1e4b5 <encode_one_frame+0x1b5>
   1e4a7:	mov    ebx,DWORD PTR [rsi+0x4d4]
   1e4ad:	test   ebx,ebx
   1e4af:	jne    1fd30 <encode_one_frame+0x1a30>
   1e4b5:	mov    r11d,DWORD PTR [rsi+0xca4]
   1e4bc:	test   r11d,r11d
   1e4bf:	jne    1e500 <encode_one_frame+0x200>
   1e4c1:	mov    edx,DWORD PTR [rcx+0x18]
   1e4c4:	mov    edi,DWORD PTR [rsi+0x994]
   1e4ca:	cmp    edx,0x2
   1e4cd:	je     1fda8 <encode_one_frame+0x1aa8>
   1e4d3:	test   edi,edi
   1e4d5:	jle    1e4e3 <encode_one_frame+0x1e3>
   1e4d7:	cmp    DWORD PTR [rcx+0x11870],edi
   1e4dd:	jge    203a0 <encode_one_frame+0x20a0>
   1e4e3:	mov    edi,DWORD PTR [rsi+0x10]
   1e4e6:	mov    DWORD PTR [rcx+0x28],edi
   1e4e9:	cmp    edx,0x3
   1e4ec:	jne    1e500 <encode_one_frame+0x200>
   1e4ee:	mov    edx,DWORD PTR [rsi+0x4fc]
   1e4f4:	mov    DWORD PTR [rcx+0x28],edx
   1e4f7:	mov    edx,DWORD PTR [rsi+0x500]
   1e4fd:	mov    DWORD PTR [rcx+0x2c],edx
   1e500:	mov    edx,DWORD PTR [rcx+0x58]
   1e503:	mov    esi,DWORD PTR [rsi+0x4c]
   1e506:	mov    DWORD PTR [rcx+0x5c],edx
   1e509:	test   esi,esi
   1e50b:	jle    1e517 <encode_one_frame+0x217>
   1e50d:	cdq    
   1e50e:	idiv   esi
   1e510:	cdq    
   1e511:	idiv   r8d
   1e514:	mov    DWORD PTR [rcx+0x58],edx
   1e517:	mov    edi,DWORD PTR [rcx+0x11ac0]
   1e51d:	call   5eee0 <UpdateSubseqInfo>
   1e522:	xor    edx,edx
   1e524:	mov    ecx,0xffffffff
   1e529:	xor    esi,esi
   1e52b:	xor    edi,edi
   1e52d:	call   5f7a0 <UpdateSceneInformation>
   1e532:	mov    rdx,QWORD PTR [rip+0x6a077]        # 885b0 <img>
   1e539:	mov    QWORD PTR [rdx+0x11b38],0x0
   1e544:	mov    eax,DWORD PTR [rdx+0x34]
   1e547:	mov    QWORD PTR [rdx+0x11b40],0x0
   1e552:	imul   eax,DWORD PTR [rdx+0x3c]
   1e556:	mov    ecx,eax
   1e558:	lea    eax,[rax+0xff]
   1e55e:	test   ecx,ecx
   1e560:	cmovns eax,ecx
   1e563:	movsxd rcx,DWORD PTR [rdx+0x118e4]
   1e56a:	sar    eax,0x8
   1e56d:	mov    DWORD PTR [rdx+0x10],eax
   1e570:	test   ecx,ecx
   1e572:	je     1f380 <encode_one_frame+0x1080>
   1e578:	mov    rax,QWORD PTR [rip+0x6a039]        # 885b8 <input>
   1e57f:	mov    ebx,DWORD PTR [rdx]
   1e581:	sub    ebx,DWORD PTR [rip+0x6a565]        # 88aec <start_frame_no_in_this_IGOP>
   1e587:	movsd  xmm1,QWORD PTR [rdx+0x118d8]
   1e58f:	mov    esi,DWORD PTR [rax+0x14]
   1e592:	mov    edi,DWORD PTR [rax+0x528]
   1e598:	sub    ebx,0x1
   1e59b:	add    esi,0x1
   1e59e:	imul   ebx,esi
   1e5a1:	add    ebx,DWORD PTR [rip+0x6a541]        # 88ae8 <start_tr_in_this_IGOP>
   1e5a7:	test   edi,edi
   1e5a9:	je     1e5c0 <encode_one_frame+0x2c0>
   1e5ab:	mov    rsi,QWORD PTR [rip+0x80af6]        # 9f0a8 <gop_structure>
   1e5b2:	lea    rcx,[rcx+rcx*2]
   1e5b6:	lea    rcx,[rsi+rcx*8]
   1e5ba:	mov    ecx,DWORD PTR [rcx-0x14]
   1e5bd:	add    ecx,0x1
   1e5c0:	pxor   xmm0,xmm0
   1e5c4:	cvtsi2sd xmm0,ecx
   1e5c8:	mulsd  xmm0,xmm1
   1e5cc:	cvttsd2si ecx,xmm0
   1e5d0:	add    ebx,ecx
   1e5d2:	mov    DWORD PTR [rip+0x94908],ebx        # b2ee0 <frame_no>
   1e5d8:	mov    ecx,DWORD PTR [rax+0x40]
   1e5db:	mov    esi,DWORD PTR [rax+0x44]
   1e5de:	mov    DWORD PTR [rsp+0x10],0x0
   1e5e6:	mov    edx,DWORD PTR [rdx+0x11bd0]
   1e5ec:	mov    r14d,DWORD PTR [rax+0xce8]
   1e5f3:	mov    r15d,DWORD PTR [rax+0xcec]
   1e5fa:	mov    DWORD PTR [rsp+0x20],esi
   1e5fe:	test   edx,edx
   1e600:	lea    r12d,[rdx+0x7]
   1e604:	mov    DWORD PTR [rsp+0x24],ecx
   1e608:	movsxd r13,DWORD PTR [rax+0xdc]
   1e60f:	cmovns r12d,edx
   1e613:	imul   esi,ecx
   1e616:	mov    edx,r14d
   1e619:	imul   edx,r15d
   1e61d:	sar    r12d,0x3
   1e621:	mov    ecx,esi
   1e623:	mov    esi,edx
   1e625:	imul   ecx,r12d
   1e629:	imul   esi,r12d
   1e62d:	cmp    DWORD PTR [rax+0xcf0],0x1
   1e634:	mov    DWORD PTR [rsp+0x18],ecx
   1e638:	lea    edx,[rcx+rsi*2]
   1e63b:	mov    DWORD PTR [rsp+0x30],esi
   1e63f:	movsxd rdi,edx
   1e642:	mov    QWORD PTR [rsp+0x8],rdi
   1e647:	jne    1e657 <encode_one_frame+0x357>
   1e649:	cmp    DWORD PTR [rax+0x48],0x3
   1e64d:	sete   al
   1e650:	movzx  eax,al
   1e653:	mov    DWORD PTR [rsp+0x10],eax
   1e657:	mov    edi,DWORD PTR [rsp+0x18]
   1e65b:	call   4460 <malloc@plt>
   1e660:	mov    rbp,rax
   1e663:	test   rax,rax
   1e666:	je     20588 <encode_one_frame+0x2288>
   1e66c:	mov    edi,DWORD PTR [rip+0x943ee]        # b2a60 <p_in>
   1e672:	xor    edx,edx
   1e674:	mov    rsi,r13
   1e677:	call   43a0 <lseek@plt>
   1e67c:	cmp    r13,rax
   1e67f:	je     1e692 <encode_one_frame+0x392>
   1e681:	mov    esi,0xffffffff
   1e686:	lea    rdi,[rip+0x55003]        # 73690 <quant_coef+0x9d0>
   1e68d:	call   19180 <error>
   1e692:	mov    rax,QWORD PTR [rip+0x69f1f]        # 885b8 <input>
   1e699:	mov    edi,DWORD PTR [rip+0x943c1]        # b2a60 <p_in>
   1e69f:	mov    edx,0x1
   1e6a4:	movsxd rsi,DWORD PTR [rax+0x4d0]
   1e6ab:	imul   rsi,QWORD PTR [rsp+0x8]
   1e6b1:	call   43a0 <lseek@plt>
   1e6b6:	cmp    rax,0xffffffffffffffff
   1e6ba:	je     1fb08 <encode_one_frame+0x1808>
   1e6c0:	movsxd rsi,ebx
   1e6c3:	imul   rsi,QWORD PTR [rsp+0x8]
   1e6c9:	mov    edi,DWORD PTR [rip+0x94391]        # b2a60 <p_in>
   1e6cf:	mov    edx,0x1
   1e6d4:	call   43a0 <lseek@plt>
   1e6d9:	cmp    rax,0xffffffffffffffff
   1e6dd:	je     1fab8 <encode_one_frame+0x17b8>
   1e6e3:	mov    rax,QWORD PTR [rip+0x69ec6]        # 885b0 <img>
   1e6ea:	test   BYTE PTR [rax+0x11bd0],0x7
   1e6f1:	jne    20599 <encode_one_frame+0x2299>
   1e6f7:	mov    eax,DWORD PTR [rsp+0x10]
   1e6fb:	mov    edi,DWORD PTR [rip+0x9435f]        # b2a60 <p_in>
   1e701:	test   eax,eax
   1e703:	jne    1f830 <encode_one_frame+0x1530>
   1e709:	movsxd rbx,DWORD PTR [rsp+0x18]
   1e70e:	mov    rsi,rbp
   1e711:	mov    rdx,rbx
   1e714:	call   43f0 <read@plt>
   1e719:	cmp    rax,rbx
   1e71c:	jne    20562 <encode_one_frame+0x2262>
   1e722:	mov    ecx,DWORD PTR [rsp+0x20]
   1e726:	mov    edx,DWORD PTR [rsp+0x24]
   1e72a:	mov    r8d,r12d
   1e72d:	mov    rsi,rbp
   1e730:	mov    rdi,QWORD PTR [rip+0x95b09]        # b4240 <imgY_org_frm>
   1e737:	call   1e090 <buf2img>
   1e73c:	mov    rbx,QWORD PTR [rip+0x69e6d]        # 885b0 <img>
   1e743:	mov    eax,DWORD PTR [rbx+0x11bfc]
   1e749:	test   eax,eax
   1e74b:	je     1e7d7 <encode_one_frame+0x4d7>
   1e751:	movsxd r13,DWORD PTR [rsp+0x30]
   1e756:	mov    edi,DWORD PTR [rip+0x94304]        # b2a60 <p_in>
   1e75c:	mov    rsi,rbp
   1e75f:	mov    rdx,r13
   1e762:	call   43f0 <read@plt>
   1e767:	mov    rbx,rax
   1e76a:	cmp    rax,r13
   1e76d:	jne    20562 <encode_one_frame+0x2262>
   1e773:	mov    rax,QWORD PTR [rip+0x7faee]        # 9e268 <imgUV_org_frm>
   1e77a:	mov    r8d,r12d
   1e77d:	mov    ecx,r14d
   1e780:	mov    edx,r15d
   1e783:	mov    rsi,rbp
   1e786:	mov    rdi,QWORD PTR [rax]
   1e789:	call   1e090 <buf2img>
   1e78e:	mov    eax,DWORD PTR [rsp+0x10]
   1e792:	test   eax,eax
   1e794:	jne    1fa10 <encode_one_frame+0x1710>
   1e79a:	mov    edi,DWORD PTR [rip+0x942c0]        # b2a60 <p_in>
   1e7a0:	mov    rdx,rbx
   1e7a3:	mov    rsi,rbp
   1e7a6:	call   43f0 <read@plt>
   1e7ab:	cmp    rbx,rax
   1e7ae:	jne    20562 <encode_one_frame+0x2262>
   1e7b4:	mov    rax,QWORD PTR [rip+0x7faad]        # 9e268 <imgUV_org_frm>
   1e7bb:	mov    r8d,r12d
   1e7be:	mov    ecx,r14d
   1e7c1:	mov    edx,r15d
   1e7c4:	mov    rsi,rbp
   1e7c7:	mov    rdi,QWORD PTR [rax+0x8]
   1e7cb:	call   1e090 <buf2img>
   1e7d0:	mov    rbx,QWORD PTR [rip+0x69dd9]        # 885b0 <img>
   1e7d7:	mov    rdi,rbp
   1e7da:	call   42d0 <free@plt>
   1e7df:	mov    rax,QWORD PTR [rip+0x69dd2]        # 885b8 <input>
   1e7e6:	mov    r14d,DWORD PTR [rbx+0x40]
   1e7ea:	mov    r9d,DWORD PTR [rbx+0x38]
   1e7ee:	mov    r13d,DWORD PTR [rbx+0x3c]
   1e7f2:	mov    edx,DWORD PTR [rax+0x44]
   1e7f5:	mov    r10d,DWORD PTR [rax+0xce8]
   1e7fc:	mov    r12d,DWORD PTR [rax+0xcec]
   1e803:	mov    r8d,DWORD PTR [rbx+0x34]
   1e807:	mov    r11d,DWORD PTR [rax+0x40]
   1e80b:	test   edx,edx
   1e80d:	jle    1e9e8 <encode_one_frame+0x6e8>
   1e813:	mov    rcx,QWORD PTR [rip+0x95a26]        # b4240 <imgY_org_frm>
   1e81a:	lea    edi,[rdx-0x1]
   1e81d:	mov    ebp,r11d
   1e820:	not    ebp
   1e822:	lea    rsi,[rcx+0x8]
   1e826:	add    ebp,r8d
   1e829:	lea    rdi,[rsi+rdi*8]
   1e82d:	mov    QWORD PTR [rsp+0x10],rdi
   1e832:	movsxd rdi,r11d
   1e835:	lea    rbp,[rdi+rbp*1+0x1]
   1e83a:	lea    r15,[rdi+rdi*1]
   1e83e:	add    rbp,rbp
   1e841:	nop    DWORD PTR [rax+0x0]
   1e848:	cmp    r8d,r11d
   1e84b:	jle    1e876 <encode_one_frame+0x576>
   1e84d:	mov    rdi,QWORD PTR [rcx]
   1e850:	mov    QWORD PTR [rsp+0x8],rax
   1e855:	lea    rcx,[rdi+r15*1]
   1e859:	add    rdi,rbp
   1e85c:	nop    DWORD PTR [rax+0x0]
   1e860:	movzx  eax,WORD PTR [rcx-0x2]
   1e864:	add    rcx,0x2
   1e868:	mov    WORD PTR [rcx-0x2],ax
   1e86c:	cmp    rdi,rcx
   1e86f:	jne    1e860 <encode_one_frame+0x560>
   1e871:	mov    rax,QWORD PTR [rsp+0x8]
   1e876:	mov    rcx,rsi
   1e879:	cmp    QWORD PTR [rsp+0x10],rsi
   1e87e:	je     1e9e8 <encode_one_frame+0x6e8>
   1e884:	add    rsi,0x8
   1e888:	jmp    1e848 <encode_one_frame+0x548>
   1e88a:	nop    WORD PTR [rax+rax*1+0x0]
   1e890:	lea    edi,[r10+0x1]
   1e894:	cmp    edi,DWORD PTR [rsi+0x8]
   1e897:	jne    1e4a2 <encode_one_frame+0x1a2>
   1e89d:	mov    DWORD PTR [rcx+0x11870],edx
   1e8a3:	jmp    1e4a2 <encode_one_frame+0x1a2>
   1e8a8:	nop    DWORD PTR [rax+rax*1+0x0]
   1e8b0:	sub    edx,edi
   1e8b2:	mov    DWORD PTR [rcx+0x118e0],edi
   1e8b8:	add    ebx,edx
   1e8ba:	mov    DWORD PTR [r9],ebx
   1e8bd:	cmp    DWORD PTR [rcx+0x11ab8],0x1
   1e8c4:	jle    1e8eb <encode_one_frame+0x5eb>
   1e8c6:	mov    edx,ebx
   1e8c8:	mov    eax,0x1
   1e8cd:	jmp    1e8d5 <encode_one_frame+0x5d5>
   1e8cf:	nop
   1e8d0:	mov    edx,DWORD PTR [r9+rax*4-0x4]
   1e8d5:	sub    edx,DWORD PTR [rcx+0x118e0]
   1e8db:	mov    DWORD PTR [r9+rax*4],edx
   1e8df:	add    rax,0x1
   1e8e3:	cmp    DWORD PTR [rcx+0x11ab8],eax
   1e8e9:	jg     1e8d0 <encode_one_frame+0x5d0>
   1e8eb:	mov    eax,DWORD PTR [rsi+0x988]
   1e8f1:	test   eax,eax
   1e8f3:	je     1e903 <encode_one_frame+0x603>
   1e8f5:	mov    edi,DWORD PTR [rcx]
   1e8f7:	lea    edx,[rdi+0x1]
   1e8fa:	cmp    edx,DWORD PTR [rsi+0x8]
   1e8fd:	je     1fd90 <encode_one_frame+0x1a90>
   1e903:	pxor   xmm1,xmm1
   1e907:	mov    eax,DWORD PTR [rsi+0x14]
   1e90a:	pxor   xmm0,xmm0
   1e90e:	movsd  xmm2,QWORD PTR [rip+0x53eb2]        # 727c8 <INIT_MB_TYPE_I+0x108>
   1e916:	cvtsi2sd xmm1,DWORD PTR [rsi+0x4d4]
   1e91e:	mov    r8d,DWORD PTR [rsi+0x528]
   1e925:	movsxd rdx,DWORD PTR [rcx+0x118e4]
   1e92c:	add    eax,0x1
   1e92f:	cvtsi2sd xmm0,eax
   1e933:	addsd  xmm1,xmm2
   1e937:	divsd  xmm0,xmm1
   1e93b:	movsd  QWORD PTR [rcx+0x118d8],xmm0
   1e943:	cmp    r8d,0x3
   1e947:	je     1f960 <encode_one_frame+0x1660>
   1e94d:	test   r8d,r8d
   1e950:	jne    1f96c <encode_one_frame+0x166c>
   1e956:	pxor   xmm1,xmm1
   1e95a:	cvtsi2sd xmm1,edx
   1e95e:	mulsd  xmm0,xmm1
   1e962:	cvttsd2si eax,xmm0
   1e966:	add    eax,ebx
   1e968:	lea    edi,[r11-0x1]
   1e96c:	cmp    eax,r11d
   1e96f:	mov    r9d,DWORD PTR [rsi+0xca4]
   1e976:	cmovge eax,edi
   1e979:	mov    DWORD PTR [rcx+0x11870],eax
   1e97f:	test   r9d,r9d
   1e982:	jne    1f938 <encode_one_frame+0x1638>
   1e988:	cmp    r8d,0x3
   1e98c:	je     1f942 <encode_one_frame+0x1642>
   1e992:	mov    eax,DWORD PTR [rsi+0x994]
   1e998:	mov    edx,DWORD PTR [rcx+0x11b30]
   1e99e:	test   eax,eax
   1e9a0:	jle    1e9ae <encode_one_frame+0x6ae>
   1e9a2:	cmp    eax,DWORD PTR [rcx+0x11870]
   1e9a8:	jle    203b0 <encode_one_frame+0x20b0>
   1e9ae:	mov    eax,DWORD PTR [rsi+0x4d8]
   1e9b4:	mov    DWORD PTR [rcx+0x28],eax
   1e9b7:	test   edx,edx
   1e9b9:	je     1e517 <encode_one_frame+0x217>
   1e9bf:	add    eax,DWORD PTR [rsi+0x4dc]
   1e9c5:	cmp    eax,0x33
   1e9c8:	mov    edx,0x33
   1e9cd:	cmovg  eax,edx
   1e9d0:	mov    edx,0x0
   1e9d5:	test   eax,eax
   1e9d7:	cmovs  eax,edx
   1e9da:	mov    DWORD PTR [rcx+0x28],eax
   1e9dd:	jmp    1e517 <encode_one_frame+0x217>
   1e9e2:	nop    WORD PTR [rax+rax*1+0x0]
   1e9e8:	cmp    r13d,edx
   1e9eb:	jle    1ea3f <encode_one_frame+0x73f>
   1e9ed:	movsxd rdi,edx
   1e9f0:	not    edx
   1e9f2:	mov    rsi,QWORD PTR [rip+0x95847]        # b4240 <imgY_org_frm>
   1e9f9:	lea    ebp,[r8-0x1]
   1e9fd:	add    edx,r13d
   1ea00:	add    rdx,rdi
   1ea03:	lea    rcx,[rsi+rdi*8]
   1ea07:	lea    r13,[rsi+rdx*8+0x8]
   1ea0c:	nop    DWORD PTR [rax+0x0]
   1ea10:	test   r8d,r8d
   1ea13:	jle    1ea36 <encode_one_frame+0x736>
   1ea15:	mov    rdi,QWORD PTR [rcx-0x8]
   1ea19:	mov    rsi,QWORD PTR [rcx]
   1ea1c:	xor    edx,edx
   1ea1e:	xchg   ax,ax
   1ea20:	movzx  r11d,WORD PTR [rdi+rdx*2]
   1ea25:	mov    WORD PTR [rsi+rdx*2],r11w
   1ea2a:	mov    r11,rdx
   1ea2d:	add    rdx,0x1
   1ea31:	cmp    rbp,r11
   1ea34:	jne    1ea20 <encode_one_frame+0x720>
   1ea36:	add    rcx,0x8
   1ea3a:	cmp    r13,rcx
   1ea3d:	jne    1ea10 <encode_one_frame+0x710>
   1ea3f:	mov    r13d,DWORD PTR [rbx+0x11bfc]
   1ea46:	test   r13d,r13d
   1ea49:	je     1eb39 <encode_one_frame+0x839>
   1ea4f:	test   r10d,r10d
   1ea52:	jle    1eab8 <encode_one_frame+0x7b8>
   1ea54:	lea    edx,[r10-0x1]
   1ea58:	mov    r8,QWORD PTR [rip+0x7f809]        # 9e268 <imgUV_org_frm>
   1ea5f:	xor    ecx,ecx
   1ea61:	lea    rbp,[rdx*8+0x8]
   1ea69:	nop    DWORD PTR [rax+0x0]
   1ea70:	cmp    r9d,r12d
   1ea73:	jle    1eaaf <encode_one_frame+0x7af>
   1ea75:	mov    rdx,QWORD PTR [r8]
   1ea78:	mov    rdi,QWORD PTR [rdx+rcx*1]
   1ea7c:	mov    rdx,QWORD PTR [r8+0x8]
   1ea80:	mov    rsi,QWORD PTR [rdx+rcx*1]
   1ea84:	movsxd rdx,r12d
   1ea87:	nop    WORD PTR [rax+rax*1+0x0]
   1ea90:	movzx  r11d,WORD PTR [rdi+rdx*2-0x2]
   1ea96:	mov    WORD PTR [rdi+rdx*2],r11w
   1ea9b:	movzx  r11d,WORD PTR [rsi+rdx*2-0x2]
   1eaa1:	mov    WORD PTR [rsi+rdx*2],r11w
   1eaa6:	add    rdx,0x1
   1eaaa:	cmp    r9d,edx
   1eaad:	jg     1ea90 <encode_one_frame+0x790>
   1eaaf:	add    rcx,0x8
   1eab3:	cmp    rbp,rcx
   1eab6:	jne    1ea70 <encode_one_frame+0x770>
   1eab8:	cmp    r14d,r10d
   1eabb:	jle    1eb39 <encode_one_frame+0x839>
   1eabd:	movsxd rsi,r10d
   1eac0:	not    r10d
   1eac3:	mov    rdi,QWORD PTR [rip+0x7f79e]        # 9e268 <imgUV_org_frm>
   1eaca:	lea    r12d,[r9-0x1]
   1eace:	lea    ecx,[r10+r14*1]
   1ead2:	lea    rdx,[rsi*8-0x8]
   1eada:	add    rcx,rsi
   1eadd:	shl    rcx,0x3
   1eae1:	nop    DWORD PTR [rax+0x0]
   1eae8:	lea    r8,[rdx+0x8]
   1eaec:	test   r9d,r9d
   1eaef:	jle    1eb31 <encode_one_frame+0x831>
   1eaf1:	mov    rsi,QWORD PTR [rdi]
   1eaf4:	lea    r8,[rdx+0x8]
   1eaf8:	mov    rbp,QWORD PTR [rsi+rdx*1]
   1eafc:	mov    r11,QWORD PTR [rsi+rdx*1+0x8]
   1eb01:	mov    rsi,QWORD PTR [rdi+0x8]
   1eb05:	mov    r10,QWORD PTR [rsi+rdx*1]
   1eb09:	mov    rsi,QWORD PTR [rsi+rdx*1+0x8]
   1eb0e:	xor    edx,edx
   1eb10:	movzx  r13d,WORD PTR [rbp+rdx*2+0x0]
   1eb16:	mov    WORD PTR [r11+rdx*2],r13w
   1eb1b:	movzx  r13d,WORD PTR [r10+rdx*2]
   1eb20:	mov    WORD PTR [rsi+rdx*2],r13w
   1eb25:	mov    r13,rdx
   1eb28:	add    rdx,0x1
   1eb2c:	cmp    r12,r13
   1eb2f:	jne    1eb10 <encode_one_frame+0x810>
   1eb31:	mov    rdx,r8
   1eb34:	cmp    rcx,r8
   1eb37:	jne    1eae8 <encode_one_frame+0x7e8>
   1eb39:	mov    edx,DWORD PTR [rax+0x4e0]
   1eb3f:	mov    DWORD PTR [rbx+0x1193c],edx
   1eb45:	mov    edx,DWORD PTR [rax+0xb70]
   1eb4b:	mov    DWORD PTR [rbx+0x11930],edx
   1eb51:	mov    edx,DWORD PTR [rax+0xb74]
   1eb57:	mov    DWORD PTR [rbx+0x11934],edx
   1eb5d:	mov    edx,DWORD PTR [rax+0xb78]
   1eb63:	mov    DWORD PTR [rbx+0x11938],edx
   1eb69:	mov    edx,DWORD PTR [rbx+0x18]
   1eb6c:	cmp    edx,0x1
   1eb6f:	je     1f6f0 <encode_one_frame+0x13f0>
   1eb75:	cmp    edx,0x2
   1eb78:	je     1f9a0 <encode_one_frame+0x16a0>
   1eb7e:	add    DWORD PTR [rip+0x8051b],0x1        # 9f0a0 <Pframe_ctr>
   1eb85:	cmp    DWORD PTR [rax+0xb40],0x1
   1eb8c:	je     1f704 <encode_one_frame+0x1404>
   1eb92:	mov    r12d,DWORD PTR [rax+0xb44]
   1eb99:	mov    ecx,DWORD PTR [rax+0xca4]
   1eb9f:	mov    DWORD PTR [rbx+0x11b98],0x0
   1eba9:	test   r12d,r12d
   1ebac:	je     1f690 <encode_one_frame+0x1390>
   1ebb2:	mov    DWORD PTR [rip+0x82254],0x1        # a0e10 <mb_adaptive>
   1ebbc:	mov    DWORD PTR [rbx+0x11afc],0x0
   1ebc6:	test   ecx,ecx
   1ebc8:	jne    1fbf0 <encode_one_frame+0x18f0>
   1ebce:	mov    rdx,QWORD PTR [rip+0x9729b]        # b5e70 <active_sps>
   1ebd5:	mov    ebx,DWORD PTR [rdx+0x47c]
   1ebdb:	test   ebx,ebx
   1ebdd:	je     1ebf0 <encode_one_frame+0x8f0>
   1ebdf:	mov    rdx,QWORD PTR [rip+0x699ca]        # 885b0 <img>
   1ebe6:	mov    DWORD PTR [rdx+0x11b94],0x0
   1ebf0:	mov    r11d,DWORD PTR [rax+0x3c]
   1ebf4:	test   r11d,r11d
   1ebf7:	je     1ec07 <encode_one_frame+0x907>
   1ebf9:	lea    rax,[rip+0xa9340]        # c7f40 <PicParSet>
   1ec00:	mov    QWORD PTR [rip+0x821f9],rax        # a0e00 <active_pps>
   1ec07:	mov    rdi,QWORD PTR [rip+0x96372]        # b4f80 <frame_pic>
   1ec0e:	xor    esi,esi
   1ec10:	call   1c070 <frame_picture>
   1ec15:	mov    rdx,QWORD PTR [rip+0x6999c]        # 885b8 <input>
   1ec1c:	mov    rax,QWORD PTR [rip+0x6998d]        # 885b0 <img>
   1ec23:	mov    r10d,DWORD PTR [rdx+0x514]
   1ec2a:	test   r10d,r10d
   1ec2d:	jne    1f5a0 <encode_one_frame+0x12a0>
   1ec33:	mov    ebx,DWORD PTR [rax+0x18]
   1ec36:	cmp    ebx,0x2
   1ec39:	je     1ec49 <encode_one_frame+0x949>
   1ec3b:	mov    ecx,DWORD PTR [rdx+0x510]
   1ec41:	test   ecx,ecx
   1ec43:	jne    1fd48 <encode_one_frame+0x1a48>
   1ec49:	mov    r11d,DWORD PTR [rdx+0xb44]
   1ec50:	test   r11d,r11d
   1ec53:	je     1ec5f <encode_one_frame+0x95f>
   1ec55:	mov    DWORD PTR [rip+0x821b1],0x0        # a0e10 <mb_adaptive>
   1ec5f:	cmp    DWORD PTR [rdx+0xb40],0x2
   1ec66:	je     1ff20 <encode_one_frame+0x1c20>
   1ec6c:	mov    DWORD PTR [rax+0x11878],0x0
   1ec76:	mov    rcx,QWORD PTR [rip+0x6992b]        # 885a8 <stats>
   1ec7d:	mov    esi,DWORD PTR [rcx+0x5bc]
   1ec83:	add    DWORD PTR [rcx+0x1c],esi
   1ec86:	cmp    DWORD PTR [rax+0x18],0x1
   1ec8a:	je     1ec96 <encode_one_frame+0x996>
   1ec8c:	mov    DWORD PTR [rax+0x118c0],0x0
   1ec96:	mov    rcx,QWORD PTR [rip+0x955a3]        # b4240 <imgY_org_frm>
   1ec9d:	cmp    QWORD PTR [rdx+0xb40],0x0
   1eca5:	mov    QWORD PTR [rip+0x9871c],rcx        # b73c8 <imgY_org>
   1ecac:	mov    rcx,QWORD PTR [rip+0x7f5b5]        # 9e268 <imgUV_org_frm>
   1ecb3:	mov    QWORD PTR [rip+0x93e16],rcx        # b2ad0 <imgUV_org>
   1ecba:	je     1ed13 <encode_one_frame+0xa13>
   1ecbc:	mov    DWORD PTR [rax+0x11874],0x1
   1ecc6:	mov    ecx,DWORD PTR [rax]
   1ecc8:	lea    esi,[rcx+rcx*1+0x1]
   1eccc:	mov    ecx,esi
   1ecce:	shr    ecx,0x1f
   1ecd1:	add    ecx,esi
   1ecd3:	mov    esi,DWORD PTR [rax+0x44]
   1ecd6:	sar    ecx,1
   1ecd8:	mov    DWORD PTR [rax],ecx
   1ecda:	mov    ecx,DWORD PTR [rax+0x11c1c]
   1ece0:	add    ecx,DWORD PTR [rdx+0x44]
   1ece3:	mov    DWORD PTR [rax+0x40],esi
   1ece6:	mov    DWORD PTR [rax+0x3c],ecx
   1ece9:	imul   ecx,DWORD PTR [rax+0x34]
   1eced:	test   ecx,ecx
   1ecef:	lea    esi,[rcx+0xff]
   1ecf5:	cmovs  ecx,esi
   1ecf8:	sar    ecx,0x8
   1ecfb:	mov    DWORD PTR [rax+0x10],ecx
   1ecfe:	mov    rcx,QWORD PTR [rip+0x6989b]        # 885a0 <snr>
   1ed05:	mov    QWORD PTR [rcx],0x0
   1ed0c:	mov    DWORD PTR [rcx+0x8],0x0
   1ed13:	mov    r10d,DWORD PTR [rdx+0x510]
   1ed1a:	test   r10d,r10d
   1ed1d:	je     1ed37 <encode_one_frame+0xa37>
   1ed1f:	mov    eax,DWORD PTR [rax+0x1187c]
   1ed25:	cmp    eax,0x2
   1ed28:	je     1fdc8 <encode_one_frame+0x1ac8>
   1ed2e:	cmp    eax,0x1
   1ed31:	je     20388 <encode_one_frame+0x2088>
   1ed37:	mov    rdi,QWORD PTR [rip+0x96242]        # b4f80 <frame_pic>
   1ed3e:	call   1b7e0 <writeout_picture>
   1ed43:	mov    rdi,QWORD PTR [rip+0x963e6]        # b5130 <frame_pic3>
   1ed4a:	test   rdi,rdi
   1ed4d:	je     1ed54 <encode_one_frame+0xa54>
   1ed4f:	call   60610 <free_slice_list>
   1ed54:	mov    rdi,QWORD PTR [rip+0x80495]        # 9f1f0 <frame_pic2>
   1ed5b:	test   rdi,rdi
   1ed5e:	je     1ed65 <encode_one_frame+0xa65>
   1ed60:	call   60610 <free_slice_list>
   1ed65:	mov    rdi,QWORD PTR [rip+0x96214]        # b4f80 <frame_pic>
   1ed6c:	test   rdi,rdi
   1ed6f:	je     1ed76 <encode_one_frame+0xa76>
   1ed71:	call   60610 <free_slice_list>
   1ed76:	mov    rdi,QWORD PTR [rip+0x8209b]        # a0e18 <top_pic>
   1ed7d:	test   rdi,rdi
   1ed80:	je     1ed87 <encode_one_frame+0xa87>
   1ed82:	call   60610 <free_slice_list>
   1ed87:	mov    rdi,QWORD PTR [rip+0x9415a]        # b2ee8 <bottom_pic>
   1ed8e:	test   rdi,rdi
   1ed91:	je     1ed98 <encode_one_frame+0xa98>
   1ed93:	call   60610 <free_slice_list>
   1ed98:	mov    rdx,QWORD PTR [rip+0x69819]        # 885b8 <input>
   1ed9f:	mov    eax,DWORD PTR [rdx+0xca4]
   1eda5:	mov    DWORD PTR [rsp+0x10],eax
   1eda9:	test   eax,eax
   1edab:	jne    1f870 <encode_one_frame+0x1570>
   1edb1:	mov    rax,QWORD PTR [rip+0x697f8]        # 885b0 <img>
   1edb8:	mov    r15d,DWORD PTR [rdx+0x44]
   1edbc:	mov    esi,DWORD PTR [rdx+0x40]
   1edbf:	mov    ebx,DWORD PTR [rax+0x11bec]
   1edc5:	mov    r9d,DWORD PTR [rax+0x11878]
   1edcc:	mov    DWORD PTR [rsp+0x24],r15d
   1edd1:	mov    DWORD PTR [rsp+0x20],esi
   1edd5:	mov    DWORD PTR [rsp+0x30],ebx
   1edd9:	mov    ebx,DWORD PTR [rax+0x11bf0]
   1eddf:	mov    DWORD PTR [rsp+0x34],ebx
   1ede3:	mov    ebx,DWORD PTR [rdx+0xce8]
   1ede9:	mov    DWORD PTR [rsp+0x8],ebx
   1eded:	mov    ebx,DWORD PTR [rdx+0xcec]
   1edf3:	mov    DWORD PTR [rsp+0x18],ebx
   1edf7:	mov    ebx,DWORD PTR [rax+0x11bfc]
   1edfd:	test   r9d,r9d
   1ee00:	je     1f298 <encode_one_frame+0xf98>
   1ee06:	test   esi,esi
   1ee08:	jle    1f918 <encode_one_frame+0x1618>
   1ee0e:	lea    edx,[rsi-0x1]
   1ee11:	mov    r12,QWORD PTR [rip+0x985b0]        # b73c8 <imgY_org>
   1ee18:	xor    edi,edi
   1ee1a:	xor    ecx,ecx
   1ee1c:	mov    rbp,QWORD PTR [rip+0x9703d]        # b5e60 <imgY_com>
   1ee23:	lea    r11,[rdx+rdx*1+0x2]
   1ee28:	lea    r10d,[r15-0x1]
   1ee2c:	mov    r9d,r15d
   1ee2f:	nop
   1ee30:	test   r9d,r9d
   1ee33:	jle    1ee6c <encode_one_frame+0xb6c>
   1ee35:	mov    r8,QWORD PTR [rax+0x11860]
   1ee3c:	xor    edx,edx
   1ee3e:	xchg   ax,ax
   1ee40:	mov    rsi,QWORD PTR [r12+rdx*8]
   1ee44:	mov    r13,QWORD PTR [rbp+rdx*8+0x0]
   1ee49:	movzx  esi,WORD PTR [rsi+rdi*1]
   1ee4d:	movzx  r13d,WORD PTR [r13+rdi*1+0x0]
   1ee53:	sub    esi,r13d
   1ee56:	movsxd rsi,esi
   1ee59:	movsxd rsi,DWORD PTR [r8+rsi*4]
   1ee5d:	add    rcx,rsi
   1ee60:	mov    rsi,rdx
   1ee63:	add    rdx,0x1
   1ee67:	cmp    r10,rsi
   1ee6a:	jne    1ee40 <encode_one_frame+0xb40>
   1ee6c:	add    rdi,0x2
   1ee70:	cmp    r11,rdi
   1ee73:	jne    1ee30 <encode_one_frame+0xb30>
   1ee75:	test   ebx,ebx
   1ee77:	je     1f358 <encode_one_frame+0x1058>
   1ee7d:	mov    edi,DWORD PTR [rsp+0x18]
   1ee81:	test   edi,edi
   1ee83:	jle    1f358 <encode_one_frame+0x1058>
   1ee89:	mov    ebx,DWORD PTR [rsp+0x18]
   1ee8d:	mov    r13,QWORD PTR [rip+0x93c3c]        # b2ad0 <imgUV_org>
   1ee94:	mov    QWORD PTR [rsp+0x38],rcx
   1ee99:	xor    ebp,ebp
   1ee9b:	mov    r12,QWORD PTR [rip+0x95286]        # b4128 <imgUV_com>
   1eea2:	lea    edx,[rbx-0x1]
   1eea5:	lea    rbx,[rdx+rdx*1+0x2]
   1eeaa:	mov    QWORD PTR [rsp+0x28],rbx
   1eeaf:	mov    ebx,DWORD PTR [rsp+0x8]
   1eeb3:	lea    edx,[rbx-0x1]
   1eeb6:	xor    ebx,ebx
   1eeb8:	lea    rsi,[rdx*8+0x0]
   1eec0:	xor    edx,edx
   1eec2:	mov    rcx,rsi
   1eec5:	nop    DWORD PTR [rax]
   1eec8:	mov    esi,DWORD PTR [rsp+0x8]
   1eecc:	test   esi,esi
   1eece:	jle    1ef4a <encode_one_frame+0xc4a>
   1eed0:	mov    rdi,QWORD PTR [r13+0x0]
   1eed4:	mov    r11,QWORD PTR [rax+0x11860]
   1eedb:	mov    r10,QWORD PTR [r12]
   1eedf:	mov    r9,QWORD PTR [r13+0x8]
   1eee3:	lea    rsi,[rdi+0x8]
   1eee7:	mov    r8,QWORD PTR [r12+0x8]
   1eeec:	lea    r14,[rsi+rcx*1]
   1eef0:	jmp    1eefc <encode_one_frame+0xbfc>
   1eef2:	nop    WORD PTR [rax+rax*1+0x0]
   1eef8:	add    rsi,0x8
   1eefc:	mov    r15,QWORD PTR [r10]
   1eeff:	mov    rdi,QWORD PTR [rdi]
   1ef02:	add    r10,0x8
   1ef06:	add    r9,0x8
   1ef0a:	add    r8,0x8
   1ef0e:	movzx  r15d,WORD PTR [r15+rdx*1]
   1ef13:	movzx  edi,WORD PTR [rdi+rdx*1]
   1ef17:	sub    edi,r15d
   1ef1a:	mov    r15,QWORD PTR [r8-0x8]
   1ef1e:	movsxd rdi,edi
   1ef21:	movsxd rdi,DWORD PTR [r11+rdi*4]
   1ef25:	movzx  r15d,WORD PTR [r15+rdx*1]
   1ef2a:	add    rbx,rdi
   1ef2d:	mov    rdi,QWORD PTR [r9-0x8]
   1ef31:	movzx  edi,WORD PTR [rdi+rdx*1]
   1ef35:	sub    edi,r15d
   1ef38:	movsxd rdi,edi
   1ef3b:	movsxd rdi,DWORD PTR [r11+rdi*4]
   1ef3f:	add    rbp,rdi
   1ef42:	mov    rdi,rsi
   1ef45:	cmp    rsi,r14
   1ef48:	jne    1eef8 <encode_one_frame+0xbf8>
   1ef4a:	add    rdx,0x2
   1ef4e:	cmp    QWORD PTR [rsp+0x28],rdx
   1ef53:	jne    1eec8 <encode_one_frame+0xbc8>
   1ef59:	mov    rcx,QWORD PTR [rsp+0x38]
   1ef5e:	movsd  xmm1,QWORD PTR [rip+0x53862]        # 727c8 <INIT_MB_TYPE_I+0x108>
   1ef66:	test   rcx,rcx
   1ef69:	je     1ef74 <encode_one_frame+0xc74>
   1ef6b:	pxor   xmm1,xmm1
   1ef6f:	cvtsi2sd xmm1,rcx
   1ef74:	test   rbx,rbx
   1ef77:	mov    eax,0x1
   1ef7c:	cmove  rbx,rax
   1ef80:	test   rbp,rbp
   1ef83:	je     1f36f <encode_one_frame+0x106f>
   1ef89:	mov    eax,DWORD PTR [rsp+0x24]
   1ef8d:	imul   eax,DWORD PTR [rsp+0x20]
   1ef92:	pxor   xmm0,xmm0
   1ef96:	cvtsi2sd xmm0,eax
   1ef9a:	mov    eax,DWORD PTR [rsp+0x30]
   1ef9e:	imul   eax,eax
   1efa1:	divsd  xmm0,xmm1
   1efa5:	pxor   xmm1,xmm1
   1efa9:	cvtsi2sd xmm1,eax
   1efad:	mulsd  xmm0,xmm1
   1efb1:	call   4420 <log10@plt>
   1efb6:	mulsd  xmm0,QWORD PTR [rip+0x54a7a]        # 73a38 <ONE_FOURTH_TAP+0x18>
   1efbe:	mov    rcx,QWORD PTR [rip+0x695eb]        # 885b0 <img>
   1efc5:	mov    rax,QWORD PTR [rip+0x695d4]        # 885a0 <snr>
   1efcc:	mov    edi,DWORD PTR [rcx+0x11bfc]
   1efd2:	cvtsd2ss xmm0,xmm0
   1efd6:	movss  DWORD PTR [rax],xmm0
   1efda:	test   edi,edi
   1efdc:	jne    20210 <encode_one_frame+0x1f10>
   1efe2:	mov    QWORD PTR [rax+0x4],0x0
   1efea:	pxor   xmm3,xmm3
   1efee:	movaps xmm5,xmm3
   1eff1:	mov    edx,DWORD PTR [rcx]
   1eff3:	test   edx,edx
   1eff5:	jne    1f3d0 <encode_one_frame+0x10d0>
   1effb:	mov    edx,DWORD PTR [rcx+0x18]
   1effe:	mov    QWORD PTR [rax+0x18],0x0
   1f006:	mov    QWORD PTR [rax+0x20],0x0
   1f00e:	mov    QWORD PTR [rax+0x28],0x0
   1f016:	mov    QWORD PTR [rax+0x30],0x0
   1f01e:	mov    DWORD PTR [rax+0x38],0x0
   1f025:	movss  DWORD PTR [rax+0xc],xmm0
   1f02a:	movss  DWORD PTR [rax+0x10],xmm5
   1f02f:	movss  DWORD PTR [rax+0x14],xmm3
   1f034:	movss  DWORD PTR [rax+0x3c],xmm0
   1f039:	movss  DWORD PTR [rax+0x40],xmm5
   1f03e:	movss  DWORD PTR [rax+0x44],xmm3
   1f043:	cmp    edx,0x2
   1f046:	je     1f433 <encode_one_frame+0x1133>
   1f04c:	cmp    edx,0x1
   1f04f:	je     1f9b0 <encode_one_frame+0x16b0>
   1f055:	mov    esi,DWORD PTR [rip+0x80045]        # 9f0a0 <Pframe_ctr>
   1f05b:	pxor   xmm1,xmm1
   1f05f:	movss  xmm4,DWORD PTR [rax+0x18]
   1f064:	pxor   xmm2,xmm2
   1f068:	cvtsi2ss xmm2,esi
   1f06c:	lea    edx,[rsi-0x1]
   1f06f:	cvtsi2ss xmm1,edx
   1f073:	mulss  xmm4,xmm1
   1f077:	addss  xmm0,xmm4
   1f07b:	divss  xmm0,xmm2
   1f07f:	movss  DWORD PTR [rax+0x18],xmm0
   1f084:	movss  xmm0,DWORD PTR [rax+0x24]
   1f089:	mulss  xmm0,xmm1
   1f08d:	mulss  xmm1,DWORD PTR [rax+0x30]
   1f092:	addss  xmm5,xmm0
   1f096:	addss  xmm1,xmm3
   1f09a:	divss  xmm5,xmm2
   1f09e:	divss  xmm1,xmm2
   1f0a2:	movss  DWORD PTR [rax+0x24],xmm5
   1f0a7:	movss  DWORD PTR [rax+0x30],xmm1
   1f0ac:	mov    rdx,QWORD PTR [rip+0x69505]        # 885b8 <input>
   1f0b3:	mov    eax,DWORD PTR [rcx+0x11878]
   1f0b9:	cmp    DWORD PTR [rdx+0xb40],0x2
   1f0c0:	je     1f7b0 <encode_one_frame+0x14b0>
   1f0c6:	test   eax,eax
   1f0c8:	jne    1faa0 <encode_one_frame+0x17a0>
   1f0ce:	mov    eax,DWORD PTR [rcx+0x1187c]
   1f0d4:	cmp    eax,0x2
   1f0d7:	je     202d0 <encode_one_frame+0x1fd0>
   1f0dd:	cmp    eax,0x1
   1f0e0:	je     200e8 <encode_one_frame+0x1de8>
   1f0e6:	mov    rdi,QWORD PTR [rip+0x6b8c3]        # 8a9b0 <enc_frame_picture>
   1f0ed:	call   352a0 <store_picture_in_dpb>
   1f0f2:	mov    rdi,QWORD PTR [rip+0x6b88f]        # 8a988 <enc_frame_picture2>
   1f0f9:	call   317f0 <free_storable_picture>
   1f0fe:	mov    rdi,QWORD PTR [rip+0x6b8b3]        # 8a9b8 <enc_frame_picture3>
   1f105:	call   317f0 <free_storable_picture>
   1f10a:	mov    rax,QWORD PTR [rip+0x69497]        # 885a8 <stats>
   1f111:	mov    rcx,QWORD PTR [rip+0x699a8]        # 88ac0 <total_frame_buffer>
   1f118:	lea    rsi,[rip+0x6b8c1]        # 8a9e0 <Bit_Buffer>
   1f11f:	mov    r10d,DWORD PTR [rip+0x93dba]        # b2ee0 <frame_no>
   1f126:	mov    edx,DWORD PTR [rax+0x10]
   1f129:	sub    edx,DWORD PTR [rax+0x14]
   1f12c:	movsxd rdx,edx
   1f12f:	mov    QWORD PTR [rsi+rcx*8],rdx
   1f133:	mov    rdx,QWORD PTR [rip+0x69476]        # 885b0 <img>
   1f13a:	add    rcx,0x1
   1f13e:	mov    QWORD PTR [rip+0x6997b],rcx        # 88ac0 <total_frame_buffer>
   1f145:	cmp    DWORD PTR [rdx+0x11ad4],0x2
   1f14c:	je     1f7d8 <encode_one_frame+0x14d8>
   1f152:	mov    ecx,DWORD PTR [rax+0x5d4]
   1f158:	test   ecx,ecx
   1f15a:	jne    1f898 <encode_one_frame+0x1598>
   1f160:	mov    rdx,QWORD PTR [rip+0x69449]        # 885b0 <img>
   1f167:	mov    esi,DWORD PTR [rax+0x10]
   1f16a:	mov    edi,DWORD PTR [rip+0x806a8]        # 9f818 <me_time>
   1f170:	mov    r11d,DWORD PTR [rip+0x7f0e9]        # 9e260 <intras>
   1f177:	mov    ecx,esi
   1f179:	mov    r8d,DWORD PTR [rdx+0x11878]
   1f180:	mov    ebx,DWORD PTR [rip+0x69966]        # 88aec <start_frame_no_in_this_IGOP>
   1f186:	sub    ecx,DWORD PTR [rax+0x14]
   1f189:	cmp    DWORD PTR [rdx],ebx
   1f18b:	je     1fb50 <encode_one_frame+0x1850>
   1f191:	mov    r9,QWORD PTR [rip+0x69420]        # 885b8 <input>
   1f198:	mov    r12d,DWORD PTR [r9+0xca4]
   1f19f:	test   r12d,r12d
   1f1a2:	je     1f1b6 <encode_one_frame+0xeb6>
   1f1a4:	cmp    QWORD PTR [r9+0xb40],0x0
   1f1ac:	mov    DWORD PTR [rsp+0x10],ecx
   1f1b0:	jne    1fc20 <encode_one_frame+0x1920>
   1f1b6:	mov    esi,DWORD PTR [rdx+0x18]
   1f1b9:	cmp    esi,0x2
   1f1bc:	je     1fc3e <encode_one_frame+0x193e>
   1f1c2:	cmp    esi,0x3
   1f1c5:	je     1fe08 <encode_one_frame+0x1b08>
   1f1cb:	cmp    esi,0x1
   1f1ce:	je     1fe70 <encode_one_frame+0x1b70>
   1f1d4:	mov    r9d,DWORD PTR [rdx+0x28]
   1f1d8:	pxor   xmm2,xmm2
   1f1dc:	pxor   xmm1,xmm1
   1f1e0:	pxor   xmm0,xmm0
   1f1e4:	add    DWORD PTR [rax+0x2c4],ecx
   1f1ea:	lea    rsi,[rip+0x547fc]        # 739ed <quant_coef+0xd2d>
   1f1f1:	test   r8d,r8d
   1f1f4:	mov    rdx,QWORD PTR [rip+0x81c05]        # a0e00 <active_pps>
   1f1fb:	lea    rax,[rip+0x547e7]        # 739e9 <quant_coef+0xd29>
   1f202:	cmove  rax,rsi
   1f206:	mov    rsi,QWORD PTR [rip+0x69393]        # 885a0 <snr>
   1f20d:	mov    r8d,DWORD PTR [rdx+0xc0]
   1f214:	mov    edx,r10d
   1f217:	cvtss2sd xmm2,DWORD PTR [rsi+0x8]
   1f21c:	cvtss2sd xmm1,DWORD PTR [rsi+0x4]
   1f221:	cvtss2sd xmm0,DWORD PTR [rsi]
   1f225:	push   r11
   1f227:	push   rax
   1f228:	lea    rsi,[rip+0x54779]        # 739a8 <quant_coef+0xce8>
   1f22f:	push   rdi
   1f230:	push   0x0
   1f232:	mov    edi,0x1
   1f237:	mov    eax,0x3
   1f23c:	call   4490 <__printf_chk@plt>
   1f241:	mov    rax,QWORD PTR [rip+0x69360]        # 885a8 <stats>
   1f248:	mov    rdx,QWORD PTR [rip+0x69369]        # 885b8 <input>
   1f24f:	add    rsp,0x20
   1f253:	mov    ecx,DWORD PTR [rax+0x10]
   1f256:	mov    edx,DWORD PTR [rdx+0xca4]
   1f25c:	mov    DWORD PTR [rax+0x14],ecx
   1f25f:	test   edx,edx
   1f261:	jne    1f8c8 <encode_one_frame+0x15c8>
   1f267:	mov    rdx,QWORD PTR [rip+0x69342]        # 885b0 <img>
   1f26e:	mov    DWORD PTR [rax+0x5d4],0x0
   1f278:	mov    eax,DWORD PTR [rip+0x6986e]        # 88aec <start_frame_no_in_this_IGOP>
   1f27e:	cmp    DWORD PTR [rdx],eax
   1f280:	setne  al
   1f283:	add    rsp,0x48
   1f287:	pop    rbx
   1f288:	movzx  eax,al
   1f28b:	pop    rbp
   1f28c:	pop    r12
   1f28e:	pop    r13
   1f290:	pop    r14
   1f292:	pop    r15
   1f294:	ret    
   1f295:	nop    DWORD PTR [rax]
   1f298:	mov    r11,QWORD PTR [rip+0x94fa1]        # b4240 <imgY_org_frm>
   1f29f:	mov    r12,QWORD PTR [rip+0x7efc2]        # 9e268 <imgUV_org_frm>
   1f2a6:	cmp    DWORD PTR [rdx+0xb40],0x2
   1f2ad:	mov    QWORD PTR [rip+0x98114],r11        # b73c8 <imgY_org>
   1f2b4:	mov    QWORD PTR [rip+0x93815],r12        # b2ad0 <imgUV_org>
   1f2bb:	jne    1f2cb <encode_one_frame+0xfcb>
   1f2bd:	mov    rdx,QWORD PTR [rip+0x6b6ec]        # 8a9b0 <enc_frame_picture>
   1f2c4:	mov    QWORD PTR [rip+0x6b6dd],rdx        # 8a9a8 <enc_picture>
   1f2cb:	mov    ecx,DWORD PTR [rsp+0x20]
   1f2cf:	test   ecx,ecx
   1f2d1:	jle    1f498 <encode_one_frame+0x1198>
   1f2d7:	mov    r10d,DWORD PTR [rsp+0x24]
   1f2dc:	lea    edx,[rcx-0x1]
   1f2df:	mov    r13,QWORD PTR [rip+0x6b6c2]        # 8a9a8 <enc_picture>
   1f2e6:	xor    edi,edi
   1f2e8:	lea    r14,[rdx+rdx*1+0x2]
   1f2ed:	xor    ecx,ecx
   1f2ef:	lea    ebp,[r10-0x1]
   1f2f3:	nop    DWORD PTR [rax+rax*1+0x0]
   1f2f8:	test   r10d,r10d
   1f2fb:	jle    1f33a <encode_one_frame+0x103a>
   1f2fd:	mov    r9,QWORD PTR [rax+0x11860]
   1f304:	mov    r8,QWORD PTR [r13+0x1918]
   1f30b:	xor    edx,edx
   1f30d:	nop    DWORD PTR [rax]
   1f310:	mov    rsi,QWORD PTR [r11+rdx*8]
   1f314:	mov    r15,QWORD PTR [r8+rdx*8]
   1f318:	movzx  esi,WORD PTR [rsi+rdi*1]
   1f31c:	movzx  r15d,WORD PTR [r15+rdi*1]
   1f321:	sub    esi,r15d
   1f324:	movsxd rsi,esi
   1f327:	movsxd rsi,DWORD PTR [r9+rsi*4]
   1f32b:	add    rcx,rsi
   1f32e:	mov    rsi,rdx
   1f331:	add    rdx,0x1
   1f335:	cmp    rbp,rsi
   1f338:	jne    1f310 <encode_one_frame+0x1010>
   1f33a:	add    rdi,0x2
   1f33e:	cmp    r14,rdi
   1f341:	jne    1f2f8 <encode_one_frame+0xff8>
   1f343:	test   ebx,ebx
   1f345:	je     1f358 <encode_one_frame+0x1058>
   1f347:	mov    r15d,DWORD PTR [rsp+0x18]
   1f34c:	test   r15d,r15d
   1f34f:	jg     1f4b8 <encode_one_frame+0x11b8>
   1f355:	nop    DWORD PTR [rax]
   1f358:	test   rcx,rcx
   1f35b:	je     1f920 <encode_one_frame+0x1620>
   1f361:	pxor   xmm1,xmm1
   1f365:	mov    ebx,0x1
   1f36a:	cvtsi2sd xmm1,rcx
   1f36f:	mov    ebp,0x1
   1f374:	jmp    1ef89 <encode_one_frame+0xc89>
   1f379:	nop    DWORD PTR [rax+0x0]
   1f380:	mov    rax,QWORD PTR [rip+0x69231]        # 885b8 <input>
   1f387:	mov    esi,DWORD PTR [rdx]
   1f389:	mov    ecx,DWORD PTR [rax+0x14]
   1f38c:	mov    ebx,esi
   1f38e:	sub    ebx,DWORD PTR [rip+0x69758]        # 88aec <start_frame_no_in_this_IGOP>
   1f394:	add    ecx,0x1
   1f397:	imul   ebx,ecx
   1f39a:	mov    ecx,DWORD PTR [rax+0x988]
   1f3a0:	add    ebx,DWORD PTR [rip+0x69742]        # 88ae8 <start_tr_in_this_IGOP>
   1f3a6:	mov    DWORD PTR [rip+0x93b34],ebx        # b2ee0 <frame_no>
   1f3ac:	test   ecx,ecx
   1f3ae:	je     1e5d8 <encode_one_frame+0x2d8>
   1f3b4:	add    esi,0x1
   1f3b7:	cmp    esi,DWORD PTR [rax+0x8]
   1f3ba:	jne    1e5d8 <encode_one_frame+0x2d8>
   1f3c0:	mov    DWORD PTR [rip+0x93b1a],ecx        # b2ee0 <frame_no>
   1f3c6:	mov    ebx,ecx
   1f3c8:	jmp    1e5d8 <encode_one_frame+0x2d8>
   1f3cd:	nop    DWORD PTR [rax]
   1f3d0:	add    edx,DWORD PTR [rip+0x96a96]        # b5e6c <Bframe_ctr>
   1f3d6:	pxor   xmm2,xmm2
   1f3da:	movss  xmm4,DWORD PTR [rax+0x3c]
   1f3df:	pxor   xmm1,xmm1
   1f3e3:	cvtsi2ss xmm2,edx
   1f3e7:	add    edx,0x1
   1f3ea:	cvtsi2ss xmm1,edx
   1f3ee:	mov    edx,DWORD PTR [rcx+0x18]
   1f3f1:	mulss  xmm4,xmm2
   1f3f5:	addss  xmm4,xmm0
   1f3f9:	divss  xmm4,xmm1
   1f3fd:	movss  DWORD PTR [rax+0x3c],xmm4
   1f402:	movss  xmm4,DWORD PTR [rax+0x40]
   1f407:	mulss  xmm4,xmm2
   1f40b:	mulss  xmm2,DWORD PTR [rax+0x44]
   1f410:	addss  xmm4,xmm5
   1f414:	addss  xmm2,xmm3
   1f418:	divss  xmm4,xmm1
   1f41c:	divss  xmm2,xmm1
   1f420:	movss  DWORD PTR [rax+0x40],xmm4
   1f425:	movss  DWORD PTR [rax+0x44],xmm2
   1f42a:	cmp    edx,0x2
   1f42d:	jne    1f04c <encode_one_frame+0xd4c>
   1f433:	mov    esi,DWORD PTR [rip+0x948cf]        # b3d08 <Iframe_ctr>
   1f439:	pxor   xmm2,xmm2
   1f43d:	movss  xmm1,DWORD PTR [rax+0x20]
   1f442:	pxor   xmm4,xmm4
   1f446:	cvtsi2ss xmm4,esi
   1f44a:	lea    edx,[rsi-0x1]
   1f44d:	cvtsi2ss xmm2,edx
   1f451:	mulss  xmm1,xmm2
   1f455:	addss  xmm0,xmm1
   1f459:	divss  xmm0,xmm4
   1f45d:	movss  DWORD PTR [rax+0x20],xmm0
   1f462:	movss  xmm0,DWORD PTR [rax+0x2c]
   1f467:	mulss  xmm0,xmm2
   1f46b:	mulss  xmm2,DWORD PTR [rax+0x38]
   1f470:	addss  xmm5,xmm0
   1f474:	movaps xmm1,xmm2
   1f477:	addss  xmm1,xmm3
   1f47b:	divss  xmm5,xmm4
   1f47f:	divss  xmm1,xmm4
   1f483:	movss  DWORD PTR [rax+0x2c],xmm5
   1f488:	movss  DWORD PTR [rax+0x38],xmm1
   1f48d:	jmp    1f0ac <encode_one_frame+0xdac>
   1f492:	nop    WORD PTR [rax+rax*1+0x0]
   1f498:	test   ebx,ebx
   1f49a:	je     1f920 <encode_one_frame+0x1620>
   1f4a0:	mov    edx,DWORD PTR [rsp+0x18]
   1f4a4:	mov    r13,QWORD PTR [rip+0x6b4fd]        # 8a9a8 <enc_picture>
   1f4ab:	xor    ecx,ecx
   1f4ad:	test   edx,edx
   1f4af:	jle    1f920 <encode_one_frame+0x1620>
   1f4b5:	nop    DWORD PTR [rax]
   1f4b8:	mov    ebx,DWORD PTR [rsp+0x18]
   1f4bc:	mov    QWORD PTR [rsp+0x38],rcx
   1f4c1:	xor    ebp,ebp
   1f4c3:	lea    edx,[rbx-0x1]
   1f4c6:	lea    rbx,[rdx+rdx*1+0x2]
   1f4cb:	mov    QWORD PTR [rsp+0x28],rbx
   1f4d0:	mov    ebx,DWORD PTR [rsp+0x8]
   1f4d4:	lea    edx,[rbx-0x1]
   1f4d7:	xor    ebx,ebx
   1f4d9:	lea    rdi,[rdx*8+0x0]
   1f4e1:	xor    edx,edx
   1f4e3:	mov    rcx,rdi
   1f4e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f4f0:	mov    r14d,DWORD PTR [rsp+0x8]
   1f4f5:	test   r14d,r14d
   1f4f8:	jle    1f582 <encode_one_frame+0x1282>
   1f4fe:	mov    rsi,QWORD PTR [r13+0x1940]
   1f505:	mov    rdi,QWORD PTR [r12]
   1f509:	mov    r11,QWORD PTR [rax+0x11860]
   1f510:	mov    r9,QWORD PTR [r12+0x8]
   1f515:	mov    r10,QWORD PTR [rsi]
   1f518:	mov    r8,QWORD PTR [rsi+0x8]
   1f51c:	lea    rsi,[rdi+0x8]
   1f520:	lea    r14,[rsi+rcx*1]
   1f524:	jmp    1f534 <encode_one_frame+0x1234>
   1f526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f530:	add    rsi,0x8
   1f534:	mov    r15,QWORD PTR [r10]
   1f537:	mov    rdi,QWORD PTR [rdi]
   1f53a:	add    r10,0x8
   1f53e:	add    r9,0x8
   1f542:	add    r8,0x8
   1f546:	movzx  r15d,WORD PTR [r15+rdx*1]
   1f54b:	movzx  edi,WORD PTR [rdi+rdx*1]
   1f54f:	sub    edi,r15d
   1f552:	mov    r15,QWORD PTR [r8-0x8]
   1f556:	movsxd rdi,edi
   1f559:	movsxd rdi,DWORD PTR [r11+rdi*4]
   1f55d:	movzx  r15d,WORD PTR [r15+rdx*1]
   1f562:	add    rbx,rdi
   1f565:	mov    rdi,QWORD PTR [r9-0x8]
   1f569:	movzx  edi,WORD PTR [rdi+rdx*1]
   1f56d:	sub    edi,r15d
   1f570:	movsxd rdi,edi
   1f573:	movsxd rdi,DWORD PTR [r11+rdi*4]
   1f577:	add    rbp,rdi
   1f57a:	mov    rdi,rsi
   1f57d:	cmp    r14,rsi
   1f580:	jne    1f530 <encode_one_frame+0x1230>
   1f582:	add    rdx,0x2
   1f586:	cmp    QWORD PTR [rsp+0x28],rdx
   1f58b:	jne    1f4f0 <encode_one_frame+0x11f0>
   1f591:	jmp    1ef59 <encode_one_frame+0xc59>
   1f596:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f5a0:	mov    r9d,DWORD PTR [rdx+0x510]
   1f5a7:	test   r9d,r9d
   1f5aa:	je     1ec49 <encode_one_frame+0x949>
   1f5b0:	mov    ebx,DWORD PTR [rax+0x18]
   1f5b3:	mov    r14d,DWORD PTR [rax+0x28]
   1f5b7:	mov    r12d,DWORD PTR [rip+0x7eca2]        # 9e260 <intras>
   1f5be:	cmp    ebx,0x2
   1f5c1:	jne    1fd53 <encode_one_frame+0x1a53>
   1f5c7:	lea    r13d,[r14-0x1]
   1f5cb:	mov    rbp,QWORD PTR [rip+0x8182e]        # a0e00 <active_pps>
   1f5d2:	mov    DWORD PTR [rax+0x11bb0],0x0
   1f5dc:	mov    DWORD PTR [rax+0x28],r13d
   1f5e0:	mov    rdi,QWORD PTR [rip+0x7fc09]        # 9f1f0 <frame_pic2>
   1f5e7:	mov    esi,0x1
   1f5ec:	call   1c070 <frame_picture>
   1f5f1:	mov    rsi,QWORD PTR [rip+0x7fbf8]        # 9f1f0 <frame_pic2>
   1f5f8:	mov    rdi,QWORD PTR [rip+0x95981]        # b4f80 <frame_pic>
   1f5ff:	mov    edx,r14d
   1f602:	call   5daa0 <picture_coding_decision>
   1f607:	mov    rcx,QWORD PTR [rip+0x68fa2]        # 885b0 <img>
   1f60e:	mov    DWORD PTR [rcx+0x1187c],eax
   1f614:	test   eax,eax
   1f616:	je     205b4 <encode_one_frame+0x22b4>
   1f61c:	mov    r12d,DWORD PTR [rip+0x7ec3d]        # 9e260 <intras>
   1f623:	mov    eax,DWORD PTR [rcx+0x18]
   1f626:	xor    esi,esi
   1f628:	cmp    eax,0x2
   1f62b:	je     20050 <encode_one_frame+0x1d50>
   1f631:	mov    rdx,QWORD PTR [rip+0x68f80]        # 885b8 <input>
   1f638:	mov    edx,DWORD PTR [rdx+0x3c]
   1f63b:	test   edx,edx
   1f63d:	je     20050 <encode_one_frame+0x1d50>
   1f643:	mov    DWORD PTR [rcx+0x28],r14d
   1f647:	test   eax,eax
   1f649:	je     20408 <encode_one_frame+0x2108>
   1f64f:	xor    edi,edi
   1f651:	call   687e0 <test_wp_B_slice>
   1f656:	cmp    eax,0x1
   1f659:	je     20118 <encode_one_frame+0x1e18>
   1f65f:	mov    rax,QWORD PTR [rip+0x68f52]        # 885b8 <input>
   1f666:	mov    rcx,QWORD PTR [rip+0x68f43]        # 885b0 <img>
   1f66d:	mov    esi,DWORD PTR [rax+0x51c]
   1f673:	mov    eax,DWORD PTR [rcx+0x11b30]
   1f679:	test   eax,eax
   1f67b:	je     2005e <encode_one_frame+0x1d5e>
   1f681:	lea    eax,[r14-0x1]
   1f685:	mov    DWORD PTR [rcx+0x28],eax
   1f688:	jmp    20065 <encode_one_frame+0x1d65>
   1f68d:	nop    DWORD PTR [rax]
   1f690:	mov    DWORD PTR [rbx+0x11afc],0x0
   1f69a:	test   ecx,ecx
   1f69c:	je     1ebce <encode_one_frame+0x8ce>
   1f6a2:	mov    eax,DWORD PTR [rax+0xcb0]
   1f6a8:	mov    DWORD PTR [rbx+0x11bac],eax
   1f6ae:	mov    edx,0x1
   1f6b3:	xor    esi,esi
   1f6b5:	mov    edi,0x1
   1f6ba:	call   4b390 <rc_init_pict>
   1f6bf:	mov    rbx,QWORD PTR [rip+0x68eea]        # 885b0 <img>
   1f6c6:	xor    edi,edi
   1f6c8:	call   4d160 <updateQuantizationParameter>
   1f6cd:	mov    DWORD PTR [rip+0x97069],0x0        # b6740 <QP>
   1f6d7:	mov    DWORD PTR [rbx+0x28],eax
   1f6da:	mov    rax,QWORD PTR [rip+0x68ed7]        # 885b8 <input>
   1f6e1:	jmp    1ebce <encode_one_frame+0x8ce>
   1f6e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f6f0:	add    DWORD PTR [rip+0x96775],0x1        # b5e6c <Bframe_ctr>
   1f6f7:	cmp    DWORD PTR [rax+0xb40],0x1
   1f6fe:	jne    1eb92 <encode_one_frame+0x892>
   1f704:	mov    rsi,QWORD PTR [rip+0x937dd]        # b2ee8 <bottom_pic>
   1f70b:	mov    rdi,QWORD PTR [rip+0x81706]        # a0e18 <top_pic>
   1f712:	mov    DWORD PTR [rbx+0x11b98],0x1
   1f71c:	mov    DWORD PTR [rbx+0x11afc],0x1
   1f726:	call   1c210 <field_picture>
   1f72b:	mov    rax,QWORD PTR [rip+0x68e7e]        # 885b0 <img>
   1f732:	mov    esi,0x1
   1f737:	mov    DWORD PTR [rax+0x11878],0x1
   1f741:	mov    rdx,QWORD PTR [rip+0x68e60]        # 885a8 <stats>
   1f748:	mov    ecx,DWORD PTR [rdx+0x5c0]
   1f74e:	add    DWORD PTR [rdx+0x1c],ecx
   1f751:	cmp    DWORD PTR [rax+0x18],0x1
   1f755:	je     1f75d <encode_one_frame+0x145d>
   1f757:	mov    DWORD PTR [rax+0x118c0],esi
   1f75d:	mov    rax,QWORD PTR [rip+0x94adc]        # b4240 <imgY_org_frm>
   1f764:	mov    rdi,QWORD PTR [rip+0x816ad]        # a0e18 <top_pic>
   1f76b:	mov    QWORD PTR [rip+0x97c56],rax        # b73c8 <imgY_org>
   1f772:	mov    rax,QWORD PTR [rip+0x7eaef]        # 9e268 <imgUV_org_frm>
   1f779:	mov    QWORD PTR [rip+0x93350],rax        # b2ad0 <imgUV_org>
   1f780:	mov    rax,QWORD PTR [rip+0x68e19]        # 885a0 <snr>
   1f787:	mov    QWORD PTR [rax],0x0
   1f78e:	mov    DWORD PTR [rax+0x8],0x0
   1f795:	call   1b7e0 <writeout_picture>
   1f79a:	mov    rdi,QWORD PTR [rip+0x93747]        # b2ee8 <bottom_pic>
   1f7a1:	call   1b7e0 <writeout_picture>
   1f7a6:	jmp    1ed43 <encode_one_frame+0xa43>
   1f7ab:	nop    DWORD PTR [rax+rax*1+0x0]
   1f7b0:	test   eax,eax
   1f7b2:	je     1fcd0 <encode_one_frame+0x19d0>
   1f7b8:	mov    rdi,QWORD PTR [rip+0x6b1e1]        # 8a9a0 <enc_bottom_picture>
   1f7bf:	call   352a0 <store_picture_in_dpb>
   1f7c4:	mov    rdi,QWORD PTR [rip+0x6b1e5]        # 8a9b0 <enc_frame_picture>
   1f7cb:	call   317f0 <free_storable_picture>
   1f7d0:	jmp    1f10a <encode_one_frame+0xe0a>
   1f7d5:	nop    DWORD PTR [rax]
   1f7d8:	mov    r13d,DWORD PTR [rdx+0x11b30]
   1f7df:	mov    ecx,DWORD PTR [rip+0x692af]        # 88a94 <prev_frame_no.7618>
   1f7e5:	test   r13d,r13d
   1f7e8:	jne    1fcb0 <encode_one_frame+0x19b0>
   1f7ee:	mov    ebx,DWORD PTR [rip+0x692a4]        # 88a98 <consecutive_non_reference_pictures.7619>
   1f7f4:	lea    edx,[rbx+0x1]
   1f7f7:	mov    DWORD PTR [rip+0x6929b],edx        # 88a98 <consecutive_non_reference_pictures.7619>
   1f7fd:	cmp    ecx,r10d
   1f800:	jg     1f80b <encode_one_frame+0x150b>
   1f802:	cmp    edx,0x1
   1f805:	jle    1fcc3 <encode_one_frame+0x19c3>
   1f80b:	mov    esi,0xffffffff
   1f810:	lea    rdi,[rip+0x53f99]        # 737b0 <quant_coef+0xaf0>
   1f817:	call   19180 <error>
   1f81c:	mov    r10d,DWORD PTR [rip+0x936bd]        # b2ee0 <frame_no>
   1f823:	mov    rax,QWORD PTR [rip+0x68d7e]        # 885a8 <stats>
   1f82a:	jmp    1fcc3 <encode_one_frame+0x19c3>
   1f82f:	nop
   1f830:	movabs rsi,0x5555555555555556
   1f83a:	mov    rax,QWORD PTR [rsp+0x8]
   1f83f:	imul   rsi
   1f842:	mov    rax,QWORD PTR [rsp+0x8]
   1f847:	sar    rax,0x3f
   1f84b:	mov    rsi,rdx
   1f84e:	mov    edx,0x1
   1f853:	sub    rsi,rax
   1f856:	call   43a0 <lseek@plt>
   1f85b:	mov    edi,DWORD PTR [rip+0x931ff]        # b2a60 <p_in>
   1f861:	jmp    1e709 <encode_one_frame+0x409>
   1f866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f870:	mov    rax,QWORD PTR [rip+0x68d31]        # 885a8 <stats>
   1f877:	mov    edx,DWORD PTR [rax+0x10]
   1f87a:	sub    edx,DWORD PTR [rax+0x14]
   1f87d:	mov    edi,edx
   1f87f:	mov    DWORD PTR [rsp+0x10],edx
   1f883:	call   4bfd0 <rc_update_pict_frame>
   1f888:	mov    rdx,QWORD PTR [rip+0x68d29]        # 885b8 <input>
   1f88f:	jmp    1edb1 <encode_one_frame+0xab1>
   1f894:	nop    DWORD PTR [rax+0x0]
   1f898:	mov    edx,r10d
   1f89b:	lea    rsi,[rip+0x54161]        # 73a03 <quant_coef+0xd43>
   1f8a2:	mov    edi,0x1
   1f8a7:	xor    eax,eax
   1f8a9:	call   4490 <__printf_chk@plt>
   1f8ae:	mov    rax,QWORD PTR [rip+0x68cf3]        # 885a8 <stats>
   1f8b5:	mov    r10d,DWORD PTR [rip+0x93624]        # b2ee0 <frame_no>
   1f8bc:	jmp    1f160 <encode_one_frame+0xe60>
   1f8c1:	nop    DWORD PTR [rax+0x0]
   1f8c8:	mov    edi,DWORD PTR [rsp+0x10]
   1f8cc:	call   4bf50 <rc_update_pict>
   1f8d1:	mov    rdx,QWORD PTR [rip+0x68cd8]        # 885b0 <img>
   1f8d8:	mov    r10d,DWORD PTR [rdx+0x18]
   1f8dc:	test   r10d,r10d
   1f8df:	jne    1f908 <encode_one_frame+0x1608>
   1f8e1:	mov    rax,QWORD PTR [rip+0x96588]        # b5e70 <active_sps>
   1f8e8:	mov    r9d,DWORD PTR [rax+0x47c]
   1f8ef:	test   r9d,r9d
   1f8f2:	jne    1fde0 <encode_one_frame+0x1ae0>
   1f8f8:	mov    r8d,DWORD PTR [rdx+0x11ba4]
   1f8ff:	test   r8d,r8d
   1f902:	je     1fde0 <encode_one_frame+0x1ae0>
   1f908:	mov    rax,QWORD PTR [rip+0x68c99]        # 885a8 <stats>
   1f90f:	jmp    1f26e <encode_one_frame+0xf6e>
   1f914:	nop    DWORD PTR [rax+0x0]
   1f918:	test   ebx,ebx
   1f91a:	jne    20480 <encode_one_frame+0x2180>
   1f920:	movsd  xmm1,QWORD PTR [rip+0x52ea0]        # 727c8 <INIT_MB_TYPE_I+0x108>
   1f928:	mov    ebx,0x1
   1f92d:	jmp    1f36f <encode_one_frame+0x106f>
   1f932:	nop    WORD PTR [rax+rax*1+0x0]
   1f938:	cmp    r8d,0x3
   1f93c:	jne    1e517 <encode_one_frame+0x217>
   1f942:	mov    r8,QWORD PTR [rip+0x7f75f]        # 9f0a8 <gop_structure>
   1f949:	lea    rax,[rdx+rdx*2]
   1f94d:	lea    rax,[r8+rax*8]
   1f951:	mov    eax,DWORD PTR [rax-0xc]
   1f954:	mov    DWORD PTR [rcx+0x28],eax
   1f957:	jmp    1e517 <encode_one_frame+0x217>
   1f95c:	nop    DWORD PTR [rax+0x0]
   1f960:	movsd  QWORD PTR [rcx+0x118d8],xmm2
   1f968:	movapd xmm0,xmm2
   1f96c:	mov    r10,QWORD PTR [rip+0x7f735]        # 9f0a8 <gop_structure>
   1f973:	movsxd rax,edx
   1f976:	pxor   xmm1,xmm1
   1f97a:	lea    rax,[rax+rax*2]
   1f97e:	lea    rax,[r10+rax*8]
   1f982:	mov    edi,DWORD PTR [rax-0x14]
   1f985:	add    edi,0x1
   1f988:	cvtsi2sd xmm1,edi
   1f98c:	mulsd  xmm0,xmm1
   1f990:	cvttsd2si edi,xmm0
   1f994:	lea    eax,[rdi+rbx*1]
   1f997:	jmp    1e968 <encode_one_frame+0x668>
   1f99c:	nop    DWORD PTR [rax+0x0]
   1f9a0:	add    DWORD PTR [rip+0x94361],0x1        # b3d08 <Iframe_ctr>
   1f9a7:	jmp    1eb85 <encode_one_frame+0x885>
   1f9ac:	nop    DWORD PTR [rax+0x0]
   1f9b0:	mov    esi,DWORD PTR [rip+0x964b6]        # b5e6c <Bframe_ctr>
   1f9b6:	pxor   xmm1,xmm1
   1f9ba:	movss  xmm4,DWORD PTR [rax+0x1c]
   1f9bf:	pxor   xmm2,xmm2
   1f9c3:	cvtsi2ss xmm2,esi
   1f9c7:	lea    edx,[rsi-0x1]
   1f9ca:	cvtsi2ss xmm1,edx
   1f9ce:	mulss  xmm4,xmm1
   1f9d2:	addss  xmm0,xmm4
   1f9d6:	divss  xmm0,xmm2
   1f9da:	movss  DWORD PTR [rax+0x1c],xmm0
   1f9df:	movss  xmm0,DWORD PTR [rax+0x28]
   1f9e4:	mulss  xmm0,xmm1
   1f9e8:	mulss  xmm1,DWORD PTR [rax+0x34]
   1f9ed:	addss  xmm5,xmm0
   1f9f1:	addss  xmm1,xmm3
   1f9f5:	divss  xmm5,xmm2
   1f9f9:	divss  xmm1,xmm2
   1f9fd:	movss  DWORD PTR [rax+0x28],xmm5
   1fa02:	movss  DWORD PTR [rax+0x34],xmm1
   1fa07:	jmp    1f0ac <encode_one_frame+0xdac>
   1fa0c:	nop    DWORD PTR [rax+0x0]
   1fa10:	mov    rsi,QWORD PTR [rsp+0x8]
   1fa15:	mov    edi,DWORD PTR [rip+0x93045]        # b2a60 <p_in>
   1fa1b:	mov    edx,0x1
   1fa20:	neg    rsi
   1fa23:	call   43a0 <lseek@plt>
   1fa28:	mov    edi,DWORD PTR [rip+0x93032]        # b2a60 <p_in>
   1fa2e:	mov    rdx,rbx
   1fa31:	mov    rsi,rbp
   1fa34:	call   43f0 <read@plt>
   1fa39:	cmp    rbx,rax
   1fa3c:	jne    20562 <encode_one_frame+0x2262>
   1fa42:	mov    rax,QWORD PTR [rip+0x7e81f]        # 9e268 <imgUV_org_frm>
   1fa49:	mov    r8d,r12d
   1fa4c:	mov    ecx,r14d
   1fa4f:	mov    edx,r15d
   1fa52:	mov    rsi,rbp
   1fa55:	mov    rdi,QWORD PTR [rax+0x8]
   1fa59:	call   1e090 <buf2img>
   1fa5e:	mov    rcx,QWORD PTR [rsp+0x8]
   1fa63:	mov    edi,DWORD PTR [rip+0x92ff7]        # b2a60 <p_in>
   1fa69:	movabs rsi,0x5555555555555556
   1fa73:	add    rcx,rcx
   1fa76:	mov    rax,rcx
   1fa79:	sar    rcx,0x3f
   1fa7d:	imul   rsi
   1fa80:	mov    rsi,rdx
   1fa83:	mov    edx,0x1
   1fa88:	sub    rsi,rcx
   1fa8b:	call   43a0 <lseek@plt>
   1fa90:	mov    rbx,QWORD PTR [rip+0x68b19]        # 885b0 <img>
   1fa97:	jmp    1e7d7 <encode_one_frame+0x4d7>
   1fa9c:	nop    DWORD PTR [rax+0x0]
   1faa0:	mov    rdi,QWORD PTR [rip+0x6aef9]        # 8a9a0 <enc_bottom_picture>
   1faa7:	call   352a0 <store_picture_in_dpb>
   1faac:	jmp    1f10a <encode_one_frame+0xe0a>
   1fab1:	nop    DWORD PTR [rax+0x0]
   1fab8:	mov    ecx,0x12c
   1fabd:	mov    edx,0x1
   1fac2:	mov    esi,0x12c
   1fac7:	mov    rax,QWORD PTR [rip+0x68aea]        # 885b8 <input>
   1face:	lea    r8,[rip+0x53bf3]        # 736c8 <quant_coef+0xa08>
   1fad5:	lea    rdi,[rip+0x954c4]        # b4fa0 <errortext>
   1fadc:	add    ebx,DWORD PTR [rax+0x4d0]
   1fae2:	xor    eax,eax
   1fae4:	mov    r9d,ebx
   1fae7:	call   42c0 <__snprintf_chk@plt>
   1faec:	mov    esi,0xffffffff
   1faf1:	lea    rdi,[rip+0x954a8]        # b4fa0 <errortext>
   1faf8:	call   19180 <error>
   1fafd:	jmp    1e6e3 <encode_one_frame+0x3e3>
   1fb02:	nop    WORD PTR [rax+rax*1+0x0]
   1fb08:	mov    ecx,0x12c
   1fb0d:	mov    edx,0x1
   1fb12:	mov    esi,0x12c
   1fb17:	mov    rax,QWORD PTR [rip+0x68a9a]        # 885b8 <input>
   1fb1e:	lea    r8,[rip+0x53ba3]        # 736c8 <quant_coef+0xa08>
   1fb25:	lea    rdi,[rip+0x95474]        # b4fa0 <errortext>
   1fb2c:	mov    r9d,DWORD PTR [rax+0x4d0]
   1fb33:	xor    eax,eax
   1fb35:	call   42c0 <__snprintf_chk@plt>
   1fb3a:	mov    esi,0xffffffff
   1fb3f:	lea    rdi,[rip+0x9545a]        # b4fa0 <errortext>
   1fb46:	call   19180 <error>
   1fb4b:	jmp    1e6c0 <encode_one_frame+0x3c0>
   1fb50:	test   r8d,r8d
   1fb53:	pxor   xmm2,xmm2
   1fb57:	pxor   xmm1,xmm1
   1fb5b:	mov    r9d,DWORD PTR [rdx+0x28]
   1fb5f:	lea    rsi,[rip+0x53e87]        # 739ed <quant_coef+0xd2d>
   1fb66:	lea    rax,[rip+0x53e7c]        # 739e9 <quant_coef+0xd29>
   1fb6d:	pxor   xmm0,xmm0
   1fb71:	mov    edx,r10d
   1fb74:	cmove  rax,rsi
   1fb78:	mov    rsi,QWORD PTR [rip+0x68a21]        # 885a0 <snr>
   1fb7f:	xor    r8d,r8d
   1fb82:	cvtss2sd xmm2,DWORD PTR [rsi+0x8]
   1fb87:	cvtss2sd xmm1,DWORD PTR [rsi+0x4]
   1fb8c:	cvtss2sd xmm0,DWORD PTR [rsi]
   1fb90:	push   r11
   1fb92:	push   rax
   1fb93:	lea    rsi,[rip+0x53ca6]        # 73840 <quant_coef+0xb80>
   1fb9a:	mov    eax,0x3
   1fb9f:	push   rdi
   1fba0:	mov    edi,0x1
   1fba5:	push   0x0
   1fba7:	call   4490 <__printf_chk@plt>
   1fbac:	mov    rcx,QWORD PTR [rip+0x68a05]        # 885b8 <input>
   1fbb3:	mov    rax,QWORD PTR [rip+0x689ee]        # 885a8 <stats>
   1fbba:	add    rsp,0x20
   1fbbe:	mov    edx,DWORD PTR [rcx+0xca4]
   1fbc4:	mov    esi,DWORD PTR [rax+0x10]
   1fbc7:	test   edx,edx
   1fbc9:	je     1fbdb <encode_one_frame+0x18db>
   1fbcb:	cmp    QWORD PTR [rcx+0xb40],0x0
   1fbd3:	je     1fbdb <encode_one_frame+0x18db>
   1fbd5:	mov    DWORD PTR [rip+0x694f1],esi        # 890cc <Iprev_bits>
   1fbdb:	mov    DWORD PTR [rax+0x2c0],esi
   1fbe1:	xor    ecx,ecx
   1fbe3:	mov    DWORD PTR [rax+0x10],0x0
   1fbea:	jmp    1f25c <encode_one_frame+0xf5c>
   1fbef:	nop
   1fbf0:	mov    eax,DWORD PTR [rax+0xcb0]
   1fbf6:	cmp    eax,DWORD PTR [rbx+0x11ba0]
   1fbfc:	jge    1f6a8 <encode_one_frame+0x13a8>
   1fc02:	test   edx,edx
   1fc04:	jne    1f6a8 <encode_one_frame+0x13a8>
   1fc0a:	mov    ebp,DWORD PTR [rbx+0x11ba4]
   1fc10:	test   ebp,ebp
   1fc12:	jne    1f6a8 <encode_one_frame+0x13a8>
   1fc18:	add    eax,eax
   1fc1a:	jmp    1f6a8 <encode_one_frame+0x13a8>
   1fc1f:	nop
   1fc20:	mov    ebx,esi
   1fc22:	sub    ebx,DWORD PTR [rip+0x694a0]        # 890c8 <Pprev_bits>
   1fc28:	mov    DWORD PTR [rip+0x6949a],esi        # 890c8 <Pprev_bits>
   1fc2e:	mov    esi,DWORD PTR [rdx+0x18]
   1fc31:	mov    DWORD PTR [rsp+0x10],ebx
   1fc35:	cmp    esi,0x2
   1fc38:	jne    1f1c2 <encode_one_frame+0xec2>
   1fc3e:	add    DWORD PTR [rax+0x2c0],ecx
   1fc44:	mov    rax,QWORD PTR [rdx+0x3748]
   1fc4b:	cmp    DWORD PTR [rax+0x4],0x1
   1fc4f:	je     20330 <encode_one_frame+0x2030>
   1fc55:	test   r8d,r8d
   1fc58:	pxor   xmm2,xmm2
   1fc5c:	pxor   xmm1,xmm1
   1fc60:	mov    r9d,DWORD PTR [rdx+0x28]
   1fc64:	lea    rsi,[rip+0x53d82]        # 739ed <quant_coef+0xd2d>
   1fc6b:	lea    rax,[rip+0x53d77]        # 739e9 <quant_coef+0xd29>
   1fc72:	pxor   xmm0,xmm0
   1fc76:	mov    edx,r10d
   1fc79:	cmove  rax,rsi
   1fc7d:	mov    rsi,QWORD PTR [rip+0x6891c]        # 885a0 <snr>
   1fc84:	xor    r8d,r8d
   1fc87:	cvtss2sd xmm2,DWORD PTR [rsi+0x8]
   1fc8c:	cvtss2sd xmm1,DWORD PTR [rsi+0x4]
   1fc91:	cvtss2sd xmm0,DWORD PTR [rsi]
   1fc95:	push   r11
   1fc97:	lea    rsi,[rip+0x53bea]        # 73888 <quant_coef+0xbc8>
   1fc9e:	push   rax
   1fc9f:	push   rdi
   1fca0:	push   0x0
   1fca2:	jmp    1f232 <encode_one_frame+0xf32>
   1fca7:	nop    WORD PTR [rax+rax*1+0x0]
   1fcb0:	mov    DWORD PTR [rip+0x68dde],0x0        # 88a98 <consecutive_non_reference_pictures.7619>
   1fcba:	cmp    ecx,r10d
   1fcbd:	jg     1f80b <encode_one_frame+0x150b>
   1fcc3:	mov    DWORD PTR [rip+0x68dca],r10d        # 88a94 <prev_frame_no.7618>
   1fcca:	jmp    1f152 <encode_one_frame+0xe52>
   1fccf:	nop
   1fcd0:	mov    rdi,QWORD PTR [rip+0x6acd9]        # 8a9b0 <enc_frame_picture>
   1fcd7:	call   34790 <replace_top_pic_with_frame>
   1fcdc:	mov    rdi,QWORD PTR [rip+0x6acbd]        # 8a9a0 <enc_bottom_picture>
   1fce3:	call   317f0 <free_storable_picture>
   1fce8:	jmp    1f10a <encode_one_frame+0xe0a>
   1fced:	nop    DWORD PTR [rax]
   1fcf0:	xor    esi,esi
   1fcf2:	xor    edi,edi
   1fcf4:	call   191c0 <write_PPS>
   1fcf9:	mov    rcx,QWORD PTR [rip+0x688b0]        # 885b0 <img>
   1fd00:	mov    rsi,QWORD PTR [rip+0x688b1]        # 885b8 <input>
   1fd07:	mov    DWORD PTR [rbx+0x5d4],eax
   1fd0d:	mov    rbx,QWORD PTR [rip+0x68894]        # 885a8 <stats>
   1fd14:	mov    r10d,DWORD PTR [rcx]
   1fd17:	mov    eax,DWORD PTR [rbx+0x5d4]
   1fd1d:	add    DWORD PTR [rbx+0x5d0],eax
   1fd23:	jmp    1e37b <encode_one_frame+0x7b>
   1fd28:	nop    DWORD PTR [rax+rax*1+0x0]
   1fd30:	mov    edx,DWORD PTR [rcx+0x11870]
   1fd36:	mov    DWORD PTR [rip+0x7e5c8],edx        # 9e304 <nextP_tr_frm>
   1fd3c:	jmp    1e4b5 <encode_one_frame+0x1b5>
   1fd41:	nop    DWORD PTR [rax+0x0]
   1fd48:	mov    r14d,DWORD PTR [rax+0x28]
   1fd4c:	mov    r12d,DWORD PTR [rip+0x7e50d]        # 9e260 <intras>
   1fd53:	mov    r8d,DWORD PTR [rdx+0x3c]
   1fd57:	test   r8d,r8d
   1fd5a:	je     1f5c7 <encode_one_frame+0x12c7>
   1fd60:	test   ebx,ebx
   1fd62:	je     20498 <encode_one_frame+0x2198>
   1fd68:	lea    rbp,[rip+0xa83b1]        # c8120 <PicParSet+0x1e0>
   1fd6f:	mov    r13d,r14d
   1fd72:	mov    DWORD PTR [rax+0x11bb0],0x0
   1fd7c:	mov    QWORD PTR [rip+0x8107d],rbp        # a0e00 <active_pps>
   1fd83:	jmp    1f5e0 <encode_one_frame+0x12e0>
   1fd88:	nop    DWORD PTR [rax+rax*1+0x0]
   1fd90:	mov    edx,eax
   1fd92:	mov    r11d,eax
   1fd95:	sub    edx,ebx
   1fd97:	mov    DWORD PTR [rcx+0x118e0],edx
   1fd9d:	jmp    1e903 <encode_one_frame+0x603>
   1fda2:	nop    WORD PTR [rax+rax*1+0x0]
   1fda8:	test   edi,edi
   1fdaa:	jle    1fdf8 <encode_one_frame+0x1af8>
   1fdac:	cmp    DWORD PTR [rcx+0x11870],edi
   1fdb2:	jl     1fdf8 <encode_one_frame+0x1af8>
   1fdb4:	mov    edx,DWORD PTR [rsi+0x998]
   1fdba:	mov    DWORD PTR [rcx+0x28],edx
   1fdbd:	jmp    1e500 <encode_one_frame+0x200>
   1fdc2:	nop    WORD PTR [rax+rax*1+0x0]
   1fdc8:	mov    rdi,QWORD PTR [rip+0x95361]        # b5130 <frame_pic3>
   1fdcf:	call   1b7e0 <writeout_picture>
   1fdd4:	jmp    1ed43 <encode_one_frame+0xa43>
   1fdd9:	nop    DWORD PTR [rax+0x0]
   1fde0:	xor    eax,eax
   1fde2:	call   4cae0 <updateRCModel>
   1fde7:	mov    rax,QWORD PTR [rip+0x687ba]        # 885a8 <stats>
   1fdee:	jmp    1f267 <encode_one_frame+0xf67>
   1fdf3:	nop    DWORD PTR [rax+rax*1+0x0]
   1fdf8:	mov    edx,DWORD PTR [rsi+0xc]
   1fdfb:	mov    DWORD PTR [rcx+0x28],edx
   1fdfe:	jmp    1e500 <encode_one_frame+0x200>
   1fe03:	nop    DWORD PTR [rax+rax*1+0x0]
   1fe08:	mov    r9d,DWORD PTR [rdx+0x28]
   1fe0c:	pxor   xmm2,xmm2
   1fe10:	pxor   xmm1,xmm1
   1fe14:	pxor   xmm0,xmm0
   1fe18:	add    DWORD PTR [rax+0x2c4],ecx
   1fe1e:	lea    rsi,[rip+0x53bc8]        # 739ed <quant_coef+0xd2d>
   1fe25:	test   r8d,r8d
   1fe28:	mov    rdx,QWORD PTR [rip+0x80fd1]        # a0e00 <active_pps>
   1fe2f:	lea    rax,[rip+0x53bb3]        # 739e9 <quant_coef+0xd29>
   1fe36:	cmove  rax,rsi
   1fe3a:	mov    rsi,QWORD PTR [rip+0x6875f]        # 885a0 <snr>
   1fe41:	mov    r8d,DWORD PTR [rdx+0xc0]
   1fe48:	mov    edx,r10d
   1fe4b:	cvtss2sd xmm2,DWORD PTR [rsi+0x8]
   1fe50:	cvtss2sd xmm1,DWORD PTR [rsi+0x4]
   1fe55:	cvtss2sd xmm0,DWORD PTR [rsi]
   1fe59:	push   r11
   1fe5b:	lea    rsi,[rip+0x53a6e]        # 738d0 <quant_coef+0xc10>
   1fe62:	push   rax
   1fe63:	push   rdi
   1fe64:	push   0x0
   1fe66:	jmp    1f232 <encode_one_frame+0xf32>
   1fe6b:	nop    DWORD PTR [rax+rax*1+0x0]
   1fe70:	add    DWORD PTR [rax+0x2c8],ecx
   1fe76:	mov    ebp,DWORD PTR [rdx+0x11b30]
   1fe7c:	test   r8d,r8d
   1fe7f:	lea    rsi,[rip+0x53b67]        # 739ed <quant_coef+0xd2d>
   1fe86:	mov    r9d,DWORD PTR [rdx+0x28]
   1fe8a:	pxor   xmm2,xmm2
   1fe8e:	pxor   xmm1,xmm1
   1fe92:	pxor   xmm0,xmm0
   1fe96:	lea    rax,[rip+0x53b4c]        # 739e9 <quant_coef+0xd29>
   1fe9d:	mov    ebx,DWORD PTR [rdx+0x1193c]
   1fea3:	mov    rdx,QWORD PTR [rip+0x80f56]        # a0e00 <active_pps>
   1feaa:	cmove  rax,rsi
   1feae:	mov    rsi,QWORD PTR [rip+0x686eb]        # 885a0 <snr>
   1feb5:	test   ebp,ebp
   1feb7:	mov    r8d,DWORD PTR [rdx+0xc4]
   1febe:	cvtss2sd xmm2,DWORD PTR [rsi+0x8]
   1fec3:	cvtss2sd xmm1,DWORD PTR [rsi+0x4]
   1fec8:	cvtss2sd xmm0,DWORD PTR [rsi]
   1fecc:	jle    20300 <encode_one_frame+0x2000>
   1fed2:	sub    rsp,0x8
   1fed6:	mov    edx,r10d
   1fed9:	lea    rsi,[rip+0x53a38]        # 73918 <quant_coef+0xc58>
   1fee0:	push   rbx
   1fee1:	push   r11
   1fee3:	push   rax
   1fee4:	push   rdi
   1fee5:	push   0x0
   1fee7:	mov    edi,0x1
   1feec:	mov    eax,0x3
   1fef1:	call   4490 <__printf_chk@plt>
   1fef6:	mov    rax,QWORD PTR [rip+0x686ab]        # 885a8 <stats>
   1fefd:	mov    rdx,QWORD PTR [rip+0x686b4]        # 885b8 <input>
   1ff04:	add    rsp,0x30
   1ff08:	mov    ecx,DWORD PTR [rax+0x10]
   1ff0b:	mov    edx,DWORD PTR [rdx+0xca4]
   1ff11:	jmp    1f25c <encode_one_frame+0xf5c>
   1ff16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ff20:	mov    rsi,QWORD PTR [rip+0x92fc1]        # b2ee8 <bottom_pic>
   1ff27:	mov    rdi,QWORD PTR [rip+0x80eea]        # a0e18 <top_pic>
   1ff2e:	mov    DWORD PTR [rax+0x11b98],0x1
   1ff38:	mov    QWORD PTR [rax+0x11bb0],0x0
   1ff43:	mov    DWORD PTR [rax+0x11afc],0x1
   1ff4d:	call   1c210 <field_picture>
   1ff52:	mov    rdx,QWORD PTR [rip+0x68657]        # 885b0 <img>
   1ff59:	pxor   xmm0,xmm0
   1ff5d:	pxor   xmm1,xmm1
   1ff61:	mov    rbx,QWORD PTR [rip+0x80eb0]        # a0e18 <top_pic>
   1ff68:	mov    rbp,QWORD PTR [rip+0x95011]        # b4f80 <frame_pic>
   1ff6f:	cvtsi2sd xmm0,DWORD PTR [rdx+0x11be4]
   1ff77:	mov    eax,DWORD PTR [rdx+0x28]
   1ff7a:	mov    r12,QWORD PTR [rip+0x92f67]        # b2ee8 <bottom_pic>
   1ff81:	mov    r13d,DWORD PTR [rdx+0x18]
   1ff85:	sub    eax,0xc
   1ff88:	cvtsi2sd xmm1,eax
   1ff8c:	divsd  xmm1,QWORD PTR [rip+0x4aae4]        # 6aa78 <QP_SCALE_CR+0x38>
   1ff94:	addsd  xmm1,xmm0
   1ff98:	movsd  xmm0,QWORD PTR [rip+0x4aae0]        # 6aa80 <QP_SCALE_CR+0x40>
   1ffa0:	call   4360 <pow@plt>
   1ffa5:	movsd  xmm2,QWORD PTR [rip+0x4aadb]        # 6aa88 <QP_SCALE_CR+0x48>
   1ffad:	mulsd  xmm2,xmm0
   1ffb1:	cmp    r13d,0x1
   1ffb5:	jne    1ffbf <encode_one_frame+0x1cbf>
   1ffb7:	mulsd  xmm2,QWORD PTR [rip+0x4aad1]        # 6aa90 <QP_SCALE_CR+0x50>
   1ffbf:	movss  xmm1,DWORD PTR [rbx+0x32c]
   1ffc7:	movss  xmm0,DWORD PTR [rbp+0x32c]
   1ffcf:	addss  xmm1,DWORD PTR [rbx+0x330]
   1ffd7:	addss  xmm0,DWORD PTR [rbp+0x330]
   1ffdf:	addss  xmm1,DWORD PTR [rbx+0x334]
   1ffe7:	addss  xmm0,DWORD PTR [rbp+0x334]
   1ffef:	mov    esi,DWORD PTR [rbp+0x328]
   1fff5:	mov    edi,DWORD PTR [r12+0x328]
   1fffd:	add    edi,DWORD PTR [rbx+0x328]
   20003:	call   24bf0 <decide_fld_frame>
   20008:	mov    edi,eax
   2000a:	mov    rax,QWORD PTR [rip+0x6859f]        # 885b0 <img>
   20011:	mov    DWORD PTR [rax+0x11878],edi
   20017:	call   13130 <update_field_frame_contexts>
   2001c:	mov    rax,QWORD PTR [rip+0x6858d]        # 885b0 <img>
   20023:	mov    esi,DWORD PTR [rax+0x11878]
   20029:	test   esi,esi
   2002b:	jne    20320 <encode_one_frame+0x2020>
   20031:	mov    DWORD PTR [rax+0x11b9c],0x1
   2003b:	mov    rdx,QWORD PTR [rip+0x68576]        # 885b8 <input>
   20042:	jmp    1ec76 <encode_one_frame+0x976>
   20047:	nop    WORD PTR [rax+rax*1+0x0]
   20050:	lea    rax,[rip+0xa7ee9]        # c7f40 <PicParSet>
   20057:	mov    QWORD PTR [rip+0x80da2],rax        # a0e00 <active_pps>
   2005e:	lea    eax,[r14+0x1]
   20062:	mov    DWORD PTR [rcx+0x28],eax
   20065:	mov    eax,DWORD PTR [rcx+0x18]
   20068:	test   eax,eax
   2006a:	jne    2007e <encode_one_frame+0x1d7e>
   2006c:	mov    rax,QWORD PTR [rip+0x68545]        # 885b8 <input>
   20073:	mov    eax,DWORD PTR [rax+0x3c]
   20076:	test   eax,eax
   20078:	jne    203d0 <encode_one_frame+0x20d0>
   2007e:	mov    DWORD PTR [rcx+0x11bb0],0x0
   20088:	test   esi,esi
   2008a:	je     2017a <encode_one_frame+0x1e7a>
   20090:	mov    DWORD PTR [rcx+0x28],r14d
   20094:	mov    edx,DWORD PTR [rcx+0x1187c]
   2009a:	mov    rax,rcx
   2009d:	mov    QWORD PTR [rip+0x6a910],0x0        # 8a9b8 <enc_frame_picture3>
   200a8:	test   edx,edx
   200aa:	je     201d8 <encode_one_frame+0x1ed8>
   200b0:	cmp    edx,0x1
   200b3:	jne    200d8 <encode_one_frame+0x1dd8>
   200b5:	mov    rdx,QWORD PTR [rip+0x6a8cc]        # 8a988 <enc_frame_picture2>
   200bc:	mov    DWORD PTR [rax+0x18],ebx
   200bf:	mov    QWORD PTR [rip+0x80d3a],rbp        # a0e00 <active_pps>
   200c6:	mov    QWORD PTR [rip+0x6a8db],rdx        # 8a9a8 <enc_picture>
   200cd:	mov    DWORD PTR [rax+0x28],r13d
   200d1:	mov    DWORD PTR [rip+0x7e188],r12d        # 9e260 <intras>
   200d8:	mov    rdx,QWORD PTR [rip+0x684d9]        # 885b8 <input>
   200df:	jmp    1ec49 <encode_one_frame+0x949>
   200e4:	nop    DWORD PTR [rax+0x0]
   200e8:	mov    rdi,QWORD PTR [rip+0x6a899]        # 8a988 <enc_frame_picture2>
   200ef:	call   352a0 <store_picture_in_dpb>
   200f4:	mov    rdi,QWORD PTR [rip+0x6a8b5]        # 8a9b0 <enc_frame_picture>
   200fb:	call   317f0 <free_storable_picture>
   20100:	mov    rdi,QWORD PTR [rip+0x6a8b1]        # 8a9b8 <enc_frame_picture3>
   20107:	call   317f0 <free_storable_picture>
   2010c:	jmp    1f10a <encode_one_frame+0xe0a>
   20111:	nop    DWORD PTR [rax+0x0]
   20118:	mov    rcx,QWORD PTR [rip+0x68491]        # 885b0 <img>
   2011f:	lea    rax,[rip+0xa7f0a]        # c8030 <PicParSet+0xf0>
   20126:	mov    QWORD PTR [rip+0x80cd3],rax        # a0e00 <active_pps>
   2012d:	mov    eax,DWORD PTR [rcx+0x18]
   20130:	test   eax,eax
   20132:	jne    20170 <encode_one_frame+0x1e70>
   20134:	mov    rax,QWORD PTR [rip+0x6847d]        # 885b8 <input>
   2013b:	mov    esi,DWORD PTR [rax+0x3c]
   2013e:	test   esi,esi
   20140:	je     20170 <encode_one_frame+0x1e70>
   20142:	imul   eax,DWORD PTR [rip+0x7e117],0x64        # 9e260 <intras>
   20149:	xor    edx,edx
   2014b:	div    DWORD PTR [rcx+0x11b28]
   20151:	cmp    eax,0x4a
   20154:	jbe    20170 <encode_one_frame+0x1e70>
   20156:	lea    rax,[rip+0xa7de3]        # c7f40 <PicParSet>
   2015d:	mov    DWORD PTR [rcx+0x18],0x2
   20164:	mov    QWORD PTR [rip+0x80c95],rax        # a0e00 <active_pps>
   2016b:	nop    DWORD PTR [rax+rax*1+0x0]
   20170:	mov    DWORD PTR [rcx+0x11bb0],0x0
   2017a:	mov    rdi,QWORD PTR [rip+0x94faf]        # b5130 <frame_pic3>
   20181:	mov    esi,0x2
   20186:	call   1c070 <frame_picture>
   2018b:	mov    rax,QWORD PTR [rip+0x6841e]        # 885b0 <img>
   20192:	mov    rsi,QWORD PTR [rip+0x94f97]        # b5130 <frame_pic3>
   20199:	mov    edx,r14d
   2019c:	mov    r15d,DWORD PTR [rax+0x1187c]
   201a3:	test   r15d,r15d
   201a6:	jne    20450 <encode_one_frame+0x2150>
   201ac:	mov    rdi,QWORD PTR [rip+0x94dcd]        # b4f80 <frame_pic>
   201b3:	call   5daa0 <picture_coding_decision>
   201b8:	mov    r8d,eax
   201bb:	mov    rax,QWORD PTR [rip+0x683ee]        # 885b0 <img>
   201c2:	lea    edx,[r8+r8*1]
   201c6:	mov    DWORD PTR [rax+0x1187c],edx
   201cc:	test   edx,edx
   201ce:	jne    200d8 <encode_one_frame+0x1dd8>
   201d4:	nop    DWORD PTR [rax+0x0]
   201d8:	mov    rdx,QWORD PTR [rip+0x6a7d1]        # 8a9b0 <enc_frame_picture>
   201df:	mov    DWORD PTR [rax+0x18],ebx
   201e2:	lea    rbx,[rip+0xa7d57]        # c7f40 <PicParSet>
   201e9:	mov    QWORD PTR [rip+0x80c10],rbx        # a0e00 <active_pps>
   201f0:	mov    QWORD PTR [rip+0x6a7b1],rdx        # 8a9a8 <enc_picture>
   201f7:	mov    rdx,QWORD PTR [rip+0x683ba]        # 885b8 <input>
   201fe:	mov    DWORD PTR [rax+0x28],r14d
   20202:	mov    DWORD PTR [rip+0x7e057],r12d        # 9e260 <intras>
   20209:	jmp    1ec49 <encode_one_frame+0x949>
   2020e:	xchg   ax,ax
   20210:	mov    eax,DWORD PTR [rsp+0x34]
   20214:	pxor   xmm2,xmm2
   20218:	pxor   xmm1,xmm1
   2021c:	pxor   xmm0,xmm0
   20220:	cvtsi2sd xmm0,rbx
   20225:	imul   eax,eax
   20228:	cvtsi2sd xmm2,eax
   2022c:	mov    eax,DWORD PTR [rsp+0x8]
   20230:	imul   eax,DWORD PTR [rsp+0x18]
   20235:	cvtsi2sd xmm1,eax
   20239:	movsd  QWORD PTR [rsp+0x8],xmm2
   2023f:	movapd xmm6,xmm1
   20243:	movsd  QWORD PTR [rsp+0x18],xmm1
   20249:	divsd  xmm6,xmm0
   2024d:	movapd xmm0,xmm6
   20251:	mulsd  xmm0,xmm2
   20255:	call   4420 <log10@plt>
   2025a:	mulsd  xmm0,QWORD PTR [rip+0x537d6]        # 73a38 <ONE_FOURTH_TAP+0x18>
   20262:	mov    rax,QWORD PTR [rip+0x68337]        # 885a0 <snr>
   20269:	movsd  xmm1,QWORD PTR [rsp+0x18]
   2026f:	movsd  xmm2,QWORD PTR [rsp+0x8]
   20275:	cvtsd2ss xmm0,xmm0
   20279:	movss  DWORD PTR [rax+0x4],xmm0
   2027e:	pxor   xmm0,xmm0
   20282:	cvtsi2sd xmm0,rbp
   20287:	divsd  xmm1,xmm0
   2028b:	movapd xmm0,xmm1
   2028f:	mulsd  xmm0,xmm2
   20293:	call   4420 <log10@plt>
   20298:	mov    rax,QWORD PTR [rip+0x68301]        # 885a0 <snr>
   2029f:	pxor   xmm3,xmm3
   202a3:	movsd  xmm1,QWORD PTR [rip+0x5378d]        # 73a38 <ONE_FOURTH_TAP+0x18>
   202ab:	mov    rcx,QWORD PTR [rip+0x682fe]        # 885b0 <img>
   202b2:	mulsd  xmm1,xmm0
   202b6:	movss  xmm5,DWORD PTR [rax+0x4]
   202bb:	movss  xmm0,DWORD PTR [rax]
   202bf:	cvtsd2ss xmm3,xmm1
   202c3:	movss  DWORD PTR [rax+0x8],xmm3
   202c8:	jmp    1eff1 <encode_one_frame+0xcf1>
   202cd:	nop    DWORD PTR [rax]
   202d0:	mov    rdi,QWORD PTR [rip+0x6a6e1]        # 8a9b8 <enc_frame_picture3>
   202d7:	call   352a0 <store_picture_in_dpb>
   202dc:	mov    rdi,QWORD PTR [rip+0x6a6cd]        # 8a9b0 <enc_frame_picture>
   202e3:	call   317f0 <free_storable_picture>
   202e8:	mov    rdi,QWORD PTR [rip+0x6a699]        # 8a988 <enc_frame_picture2>
   202ef:	call   317f0 <free_storable_picture>
   202f4:	jmp    1f10a <encode_one_frame+0xe0a>
   202f9:	nop    DWORD PTR [rax+0x0]
   20300:	sub    rsp,0x8
   20304:	mov    edx,r10d
   20307:	lea    rsi,[rip+0x53652]        # 73960 <quant_coef+0xca0>
   2030e:	push   rbx
   2030f:	push   r11
   20311:	push   rax
   20312:	push   rdi
   20313:	push   0x0
   20315:	jmp    1fee7 <encode_one_frame+0x1be7>
   2031a:	nop    WORD PTR [rax+rax*1+0x0]
   20320:	mov    DWORD PTR [rax+0x11b9c],0x0
   2032a:	jmp    1f741 <encode_one_frame+0x1441>
   2032f:	nop
   20330:	test   r8d,r8d
   20333:	pxor   xmm2,xmm2
   20337:	pxor   xmm1,xmm1
   2033b:	mov    r9d,DWORD PTR [rdx+0x28]
   2033f:	lea    rsi,[rip+0x536a7]        # 739ed <quant_coef+0xd2d>
   20346:	lea    rax,[rip+0x5369c]        # 739e9 <quant_coef+0xd29>
   2034d:	pxor   xmm0,xmm0
   20351:	mov    edx,r10d
   20354:	cmove  rax,rsi
   20358:	mov    rsi,QWORD PTR [rip+0x68241]        # 885a0 <snr>
   2035f:	xor    r8d,r8d
   20362:	cvtss2sd xmm2,DWORD PTR [rsi+0x8]
   20367:	cvtss2sd xmm1,DWORD PTR [rsi+0x4]
   2036c:	cvtss2sd xmm0,DWORD PTR [rsi]
   20370:	push   r11
   20372:	lea    rsi,[rip+0x534c7]        # 73840 <quant_coef+0xb80>
   20379:	push   rax
   2037a:	push   rdi
   2037b:	push   0x0
   2037d:	jmp    1f232 <encode_one_frame+0xf32>
   20382:	nop    WORD PTR [rax+rax*1+0x0]
   20388:	mov    rdi,QWORD PTR [rip+0x7ee61]        # 9f1f0 <frame_pic2>
   2038f:	call   1b7e0 <writeout_picture>
   20394:	jmp    1ed43 <encode_one_frame+0xa43>
   20399:	nop    DWORD PTR [rax+0x0]
   203a0:	mov    edi,DWORD PTR [rsi+0x98c]
   203a6:	jmp    1e4e6 <encode_one_frame+0x1e6>
   203ab:	nop    DWORD PTR [rax+rax*1+0x0]
   203b0:	mov    eax,DWORD PTR [rsi+0x990]
   203b6:	mov    DWORD PTR [rcx+0x28],eax
   203b9:	test   edx,edx
   203bb:	je     1e517 <encode_one_frame+0x217>
   203c1:	add    eax,DWORD PTR [rsi+0x99c]
   203c7:	jmp    1e9c5 <encode_one_frame+0x6c5>
   203cc:	nop    DWORD PTR [rax+0x0]
   203d0:	imul   eax,DWORD PTR [rip+0x7de89],0x64        # 9e260 <intras>
   203d7:	xor    edx,edx
   203d9:	div    DWORD PTR [rcx+0x11b28]
   203df:	cmp    eax,0x4a
   203e2:	jbe    2007e <encode_one_frame+0x1d7e>
   203e8:	lea    rax,[rip+0xa7b51]        # c7f40 <PicParSet>
   203ef:	mov    DWORD PTR [rcx+0x18],0x2
   203f6:	mov    QWORD PTR [rip+0x80a03],rax        # a0e00 <active_pps>
   203fd:	jmp    2007e <encode_one_frame+0x1d7e>
   20402:	nop    WORD PTR [rax+rax*1+0x0]
   20408:	mov    edi,0x1
   2040d:	call   683d0 <test_wp_P_slice>
   20412:	cmp    eax,0x1
   20415:	je     20118 <encode_one_frame+0x1e18>
   2041b:	mov    rax,QWORD PTR [rip+0x68196]        # 885b8 <input>
   20422:	mov    rcx,QWORD PTR [rip+0x68187]        # 885b0 <img>
   20429:	mov    esi,DWORD PTR [rax+0x518]
   2042f:	lea    rax,[rip+0xa7b0a]        # c7f40 <PicParSet>
   20436:	add    DWORD PTR [rcx+0x28],0x1
   2043a:	mov    QWORD PTR [rip+0x809bf],rax        # a0e00 <active_pps>
   20441:	jmp    20065 <encode_one_frame+0x1d65>
   20446:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20450:	mov    rdi,QWORD PTR [rip+0x7ed99]        # 9f1f0 <frame_pic2>
   20457:	call   5daa0 <picture_coding_decision>
   2045c:	mov    r8d,eax
   2045f:	mov    rax,QWORD PTR [rip+0x6814a]        # 885b0 <img>
   20466:	mov    edx,DWORD PTR [rax+0x1187c]
   2046c:	add    edx,r8d
   2046f:	mov    DWORD PTR [rax+0x1187c],edx
   20475:	jmp    200a8 <encode_one_frame+0x1da8>
   2047a:	nop    WORD PTR [rax+rax*1+0x0]
   20480:	mov    r8d,DWORD PTR [rsp+0x18]
   20485:	xor    ecx,ecx
   20487:	test   r8d,r8d
   2048a:	jg     1ee89 <encode_one_frame+0xb89>
   20490:	jmp    1f920 <encode_one_frame+0x1620>
   20495:	nop    DWORD PTR [rax]
   20498:	xor    edi,edi
   2049a:	call   683d0 <test_wp_P_slice>
   2049f:	cmp    eax,0x1
   204a2:	je     2053a <encode_one_frame+0x223a>
   204a8:	mov    rcx,QWORD PTR [rip+0x68101]        # 885b0 <img>
   204af:	mov    rax,QWORD PTR [rip+0x68102]        # 885b8 <input>
   204b6:	lea    rbp,[rip+0xa7a83]        # c7f40 <PicParSet>
   204bd:	mov    QWORD PTR [rip+0x8093c],rbp        # a0e00 <active_pps>
   204c4:	mov    esi,DWORD PTR [rax+0x518]
   204ca:	mov    eax,DWORD PTR [rcx+0x28]
   204cd:	mov    DWORD PTR [rcx+0x11bb0],0x0
   204d7:	lea    r13d,[rax-0x1]
   204db:	mov    DWORD PTR [rcx+0x28],r13d
   204df:	test   esi,esi
   204e1:	je     1f5e0 <encode_one_frame+0x12e0>
   204e7:	mov    DWORD PTR [rcx+0x1187c],0x0
   204f1:	mov    QWORD PTR [rip+0x6a48c],0x0        # 8a988 <enc_frame_picture2>
   204fc:	mov    rax,QWORD PTR [rip+0x6a4ad]        # 8a9b0 <enc_frame_picture>
   20503:	mov    QWORD PTR [rip+0x6a49e],rax        # 8a9a8 <enc_picture>
   2050a:	mov    eax,DWORD PTR [rcx+0x18]
   2050d:	cmp    eax,0x2
   20510:	je     2052e <encode_one_frame+0x222e>
   20512:	mov    rdx,QWORD PTR [rip+0x6809f]        # 885b8 <input>
   20519:	mov    edi,DWORD PTR [rdx+0x3c]
   2051c:	test   edi,edi
   2051e:	je     2052e <encode_one_frame+0x222e>
   20520:	lea    rdi,[rip+0xa7a19]        # c7f40 <PicParSet>
   20527:	mov    QWORD PTR [rip+0x808d2],rdi        # a0e00 <active_pps>
   2052e:	mov    DWORD PTR [rip+0x7dd2b],r12d        # 9e260 <intras>
   20535:	jmp    1f628 <encode_one_frame+0x1328>
   2053a:	mov    rax,QWORD PTR [rip+0x6806f]        # 885b0 <img>
   20541:	lea    rbp,[rip+0xa7ae8]        # c8030 <PicParSet+0xf0>
   20548:	mov    QWORD PTR [rip+0x808b1],rbp        # a0e00 <active_pps>
   2054f:	mov    DWORD PTR [rax+0x11bb0],0x0
   20559:	mov    r13d,DWORD PTR [rax+0x28]
   2055d:	jmp    1f5e0 <encode_one_frame+0x12e0>
   20562:	mov    edx,DWORD PTR [rsp+0x18]
   20566:	mov    edi,0x1
   2056b:	lea    rsi,[rip+0x5319e]        # 73710 <quant_coef+0xa50>
   20572:	xor    eax,eax
   20574:	call   4490 <__printf_chk@plt>
   20579:	xor    eax,eax
   2057b:	call   248e0 <report_stats_on_error>
   20580:	or     edi,0xffffffff
   20583:	call   44e0 <exit@plt>
   20588:	lea    rdi,[rip+0x53462]        # 739f1 <quant_coef+0xd31>
   2058f:	call   38210 <no_mem_exit>
   20594:	jmp    1e66c <encode_one_frame+0x36c>
   20599:	mov    edi,0x1
   2059e:	lea    rsi,[rip+0x531bb]        # 73760 <quant_coef+0xaa0>
   205a5:	xor    eax,eax
   205a7:	call   4490 <__printf_chk@plt>
   205ac:	or     edi,0xffffffff
   205af:	call   44e0 <exit@plt>
   205b4:	xor    esi,esi
   205b6:	jmp    204fc <encode_one_frame+0x21fc>
   205bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000205c0 <RandomIntraInit>:
   205c0:	endbr64 
   205c4:	push   r12
   205c6:	mov    r12d,esi
   205c9:	push   rbp
   205ca:	mov    ebp,edx
   205cc:	push   rbx
   205cd:	mov    ebx,edi
   205cf:	mov    edi,0x1
   205d4:	call   690d0 <spec_srand>
   205d9:	mov    esi,ebx
   205db:	mov    DWORD PTR [rip+0x684bf],ebp        # 88aa0 <NumberIntraPerPicture>
   205e1:	imul   esi,r12d
   205e5:	lea    edi,[rsi+0x1]
   205e8:	mov    DWORD PTR [rip+0x684b6],esi        # 88aa4 <NumberOfMBs>
   205ee:	movsxd rdi,edi
   205f1:	shl    rdi,0x2
   205f5:	call   4460 <malloc@plt>
   205fa:	mov    QWORD PTR [rip+0x684b7],rax        # 88ab8 <RefreshPattern>
   20601:	test   rax,rax
   20604:	je     206a3 <RandomIntraInit+0xe3>
   2060a:	lea    edi,[rbp+0x1]
   2060d:	movsxd rdi,edi
   20610:	shl    rdi,0x2
   20614:	call   4460 <malloc@plt>
   20619:	mov    QWORD PTR [rip+0x68490],rax        # 88ab0 <IntraMBs>
   20620:	test   rax,rax
   20623:	je     206b4 <RandomIntraInit+0xf4>
   20629:	mov    eax,DWORD PTR [rip+0x68475]        # 88aa4 <NumberOfMBs>
   2062f:	test   eax,eax
   20631:	jle    2069e <RandomIntraInit+0xde>
   20633:	mov    rdx,QWORD PTR [rip+0x6847e]        # 88ab8 <RefreshPattern>
   2063a:	lea    ecx,[rax-0x1]
   2063d:	lea    rax,[rdx+0x4]
   20641:	lea    rcx,[rax+rcx*4]
   20645:	jmp    20654 <RandomIntraInit+0x94>
   20647:	nop    WORD PTR [rax+rax*1+0x0]
   20650:	add    rax,0x4
   20654:	mov    DWORD PTR [rdx],0xffffffff
   2065a:	mov    rdx,rax
   2065d:	cmp    rax,rcx
   20660:	jne    20650 <RandomIntraInit+0x90>
   20662:	xor    ebx,ebx
   20664:	nop    DWORD PTR [rax+0x0]
   20668:	call   690e0 <spec_rand>
   2066d:	mulsd  xmm0,QWORD PTR [rip+0x52193]        # 72808 <COEF.5132+0x18>
   20675:	mov    ecx,DWORD PTR [rip+0x68429]        # 88aa4 <NumberOfMBs>
   2067b:	cvttsd2si eax,xmm0
   2067f:	cdq    
   20680:	idiv   ecx
   20682:	movsxd rax,edx
   20685:	mov    rdx,QWORD PTR [rip+0x6842c]        # 88ab8 <RefreshPattern>
   2068c:	lea    rax,[rdx+rax*4]
   20690:	cmp    DWORD PTR [rax],0xffffffff
   20693:	jne    20668 <RandomIntraInit+0xa8>
   20695:	mov    DWORD PTR [rax],ebx
   20697:	add    ebx,0x1
   2069a:	cmp    ecx,ebx
   2069c:	jg     20668 <RandomIntraInit+0xa8>
   2069e:	pop    rbx
   2069f:	pop    rbp
   206a0:	pop    r12
   206a2:	ret    
   206a3:	lea    rdi,[rip+0x53396]        # 73a40 <ONE_FOURTH_TAP+0x20>
   206aa:	call   38210 <no_mem_exit>
   206af:	jmp    2060a <RandomIntraInit+0x4a>
   206b4:	lea    rdi,[rip+0x533a5]        # 73a60 <ONE_FOURTH_TAP+0x40>
   206bb:	call   38210 <no_mem_exit>
   206c0:	jmp    20629 <RandomIntraInit+0x69>
   206c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000206d0 <RandomIntra>:
   206d0:	endbr64 
   206d4:	mov    edx,DWORD PTR [rip+0x683c6]        # 88aa0 <NumberIntraPerPicture>
   206da:	test   edx,edx
   206dc:	jle    20708 <RandomIntra+0x38>
   206de:	mov    rax,QWORD PTR [rip+0x683cb]        # 88ab0 <IntraMBs>
   206e5:	sub    edx,0x1
   206e8:	lea    rdx,[rax+rdx*4+0x4]
   206ed:	jmp    206f9 <RandomIntra+0x29>
   206ef:	nop
   206f0:	add    rax,0x4
   206f4:	cmp    rax,rdx
   206f7:	je     20708 <RandomIntra+0x38>
   206f9:	cmp    DWORD PTR [rax],edi
   206fb:	jne    206f0 <RandomIntra+0x20>
   206fd:	mov    eax,0x1
   20702:	ret    
   20703:	nop    DWORD PTR [rax+rax*1+0x0]
   20708:	xor    eax,eax
   2070a:	ret    
   2070b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000020710 <RandomIntraNewPicture>:
   20710:	endbr64 
   20714:	mov    ecx,DWORD PTR [rip+0x6838e]        # 88aa8 <WalkAround>
   2071a:	mov    r8d,DWORD PTR [rip+0x6837f]        # 88aa0 <NumberIntraPerPicture>
   20721:	add    ecx,r8d
   20724:	mov    DWORD PTR [rip+0x6837e],ecx        # 88aa8 <WalkAround>
   2072a:	test   r8d,r8d
   2072d:	jle    2076b <RandomIntraNewPicture+0x5b>
   2072f:	mov    r9,QWORD PTR [rip+0x68382]        # 88ab8 <RefreshPattern>
   20736:	mov    edi,DWORD PTR [rip+0x68368]        # 88aa4 <NumberOfMBs>
   2073c:	add    r8d,ecx
   2073f:	mov    rsi,QWORD PTR [rip+0x6836a]        # 88ab0 <IntraMBs>
   20746:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20750:	mov    eax,ecx
   20752:	add    ecx,0x1
   20755:	add    rsi,0x4
   20759:	cdq    
   2075a:	idiv   edi
   2075c:	movsxd rdx,edx
   2075f:	mov    eax,DWORD PTR [r9+rdx*4]
   20763:	mov    DWORD PTR [rsi-0x4],eax
   20766:	cmp    ecx,r8d
   20769:	jne    20750 <RandomIntraNewPicture+0x40>
   2076b:	ret    
   2076c:	nop    DWORD PTR [rax+0x0]

0000000000020770 <RandomIntraUninit>:
   20770:	endbr64 
   20774:	sub    rsp,0x8
   20778:	mov    rdi,QWORD PTR [rip+0x68339]        # 88ab8 <RefreshPattern>
   2077f:	call   42d0 <free@plt>
   20784:	mov    rdi,QWORD PTR [rip+0x68325]        # 88ab0 <IntraMBs>
   2078b:	add    rsp,0x8
   2078f:	jmp    42d0 <free@plt>
   20794:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2079e:	xchg   ax,ax

00000000000207a0 <get_LeakyBucketRate>:
   207a0:	endbr64 
   207a4:	push   r15
   207a6:	push   r14
   207a8:	push   r13
   207aa:	push   r12
   207ac:	mov    r12,rsi
   207af:	lea    rsi,[rip+0x4afe8]        # 6b79e <maxpos+0x49e>
   207b6:	push   rbp
   207b7:	mov    rbp,rdi
   207ba:	push   rbx
   207bb:	sub    rsp,0x18
   207bf:	mov    rax,QWORD PTR fs:0x28
   207c8:	mov    QWORD PTR [rsp+0x8],rax
   207cd:	xor    eax,eax
   207cf:	mov    rax,QWORD PTR [rip+0x67de2]        # 885b8 <input>
   207d6:	lea    rdi,[rax+0x9b0]
   207dd:	call   44c0 <fopen@plt>
   207e2:	test   rax,rax
   207e5:	je     20880 <get_LeakyBucketRate+0xe0>
   207eb:	mov    r15,rax
   207ee:	xor    ebx,ebx
   207f0:	lea    r13,[rip+0x53283]        # 73a7a <ONE_FOURTH_TAP+0x5a>
   207f7:	mov    r14,rsp
   207fa:	test   rbp,rbp
   207fd:	jne    20819 <get_LeakyBucketRate+0x79>
   207ff:	jmp    20868 <get_LeakyBucketRate+0xc8>
   20801:	nop    DWORD PTR [rax+0x0]
   20808:	mov    rax,QWORD PTR [rsp]
   2080c:	mov    QWORD PTR [r12+rbx*8],rax
   20810:	add    rbx,0x1
   20814:	cmp    rbp,rbx
   20817:	je     20868 <get_LeakyBucketRate+0xc8>
   20819:	xor    eax,eax
   2081b:	mov    rdx,r14
   2081e:	mov    rsi,r13
   20821:	mov    rdi,r15
   20824:	call   4310 <__isoc99_fscanf@plt>
   20829:	cmp    eax,0x1
   2082c:	je     20808 <get_LeakyBucketRate+0x68>
   2082e:	lea    rdi,[rip+0x53333]        # 73b68 <ONE_FOURTH_TAP+0x148>
   20835:	call   4320 <puts@plt>
   2083a:	mov    rdi,r15
   2083d:	call   4370 <fclose@plt>
   20842:	xor    eax,eax
   20844:	mov    rcx,QWORD PTR [rsp+0x8]
   20849:	xor    rcx,QWORD PTR fs:0x28
   20852:	jne    20890 <get_LeakyBucketRate+0xf0>
   20854:	add    rsp,0x18
   20858:	pop    rbx
   20859:	pop    rbp
   2085a:	pop    r12
   2085c:	pop    r13
   2085e:	pop    r14
   20860:	pop    r15
   20862:	ret    
   20863:	nop    DWORD PTR [rax+rax*1+0x0]
   20868:	mov    rdi,r15
   2086b:	call   4370 <fclose@plt>
   20870:	mov    eax,0x1
   20875:	jmp    20844 <get_LeakyBucketRate+0xa4>
   20877:	nop    WORD PTR [rax+rax*1+0x0]
   20880:	lea    rdi,[rip+0x53291]        # 73b18 <ONE_FOURTH_TAP+0xf8>
   20887:	call   4320 <puts@plt>
   2088c:	xor    eax,eax
   2088e:	jmp    20844 <get_LeakyBucketRate+0xa4>
   20890:	call   4390 <__stack_chk_fail@plt>
   20895:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000208a0 <PutBigDoubleWord>:
   208a0:	endbr64 
   208a4:	push   rbp
   208a5:	mov    rbp,rsi
   208a8:	push   rbx
   208a9:	mov    rbx,rdi
   208ac:	shr    edi,0x18
   208af:	sub    rsp,0x8
   208b3:	call   43e0 <fputc@plt>
   208b8:	mov    rdi,rbx
   208bb:	mov    rsi,rbp
   208be:	shr    rdi,0x10
   208c2:	movzx  edi,dil
   208c6:	call   43e0 <fputc@plt>
   208cb:	movzx  edi,bh
   208ce:	mov    rsi,rbp
   208d1:	call   43e0 <fputc@plt>
   208d6:	add    rsp,0x8
   208da:	movzx  edi,bl
   208dd:	mov    rsi,rbp
   208e0:	pop    rbx
   208e1:	pop    rbp
   208e2:	jmp    43e0 <fputc@plt>
   208e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000208f0 <write_buffer>:
   208f0:	endbr64 
   208f4:	push   r15
   208f6:	push   r14
   208f8:	push   r13
   208fa:	mov    r13,rcx
   208fd:	push   r12
   208ff:	mov    r12,rdx
   20902:	push   rbp
   20903:	mov    rbp,rsi
   20906:	lea    rsi,[rip+0x496f7]        # 6a004 <_IO_stdin_used+0x4>
   2090d:	push   rbx
   2090e:	sub    rsp,0x18
   20912:	mov    rax,QWORD PTR [rip+0x67c9f]        # 885b8 <input>
   20919:	mov    QWORD PTR [rsp+0x8],rdi
   2091e:	lea    rdi,[rax+0xa78]
   20925:	call   44c0 <fopen@plt>
   2092a:	mov    r14,rax
   2092d:	test   rax,rax
   20930:	je     209d8 <write_buffer+0xe8>
   20936:	mov    rbx,QWORD PTR [rsp+0x8]
   2093b:	mov    rsi,r14
   2093e:	mov    rdi,rbx
   20941:	call   208a0 <PutBigDoubleWord>
   20946:	xor    eax,eax
   20948:	mov    rdx,rbx
   2094b:	mov    edi,0x1
   20950:	lea    rsi,[rip+0x53271]        # 73bc8 <ONE_FOURTH_TAP+0x1a8>
   20957:	call   4490 <__printf_chk@plt>
   2095c:	test   rbx,rbx
   2095f:	je     209be <write_buffer+0xce>
   20961:	xor    ebx,ebx
   20963:	lea    r15,[rip+0x5312a]        # 73a94 <ONE_FOURTH_TAP+0x74>
   2096a:	nop    WORD PTR [rax+rax*1+0x0]
   20970:	mov    rdi,QWORD PTR [rbp+rbx*8+0x0]
   20975:	mov    rsi,r14
   20978:	call   208a0 <PutBigDoubleWord>
   2097d:	mov    rdi,QWORD PTR [r12+rbx*8]
   20981:	mov    rsi,r14
   20984:	call   208a0 <PutBigDoubleWord>
   20989:	mov    rdi,QWORD PTR [r13+rbx*8+0x0]
   2098e:	mov    rsi,r14
   20991:	call   208a0 <PutBigDoubleWord>
   20996:	mov    rcx,QWORD PTR [r12+rbx*8]
   2099a:	mov    rdx,QWORD PTR [rbp+rbx*8+0x0]
   2099f:	xor    eax,eax
   209a1:	mov    r8,QWORD PTR [r13+rbx*8+0x0]
   209a6:	mov    rsi,r15
   209a9:	mov    edi,0x1
   209ae:	add    rbx,0x1
   209b2:	call   4490 <__printf_chk@plt>
   209b7:	cmp    QWORD PTR [rsp+0x8],rbx
   209bc:	jne    20970 <write_buffer+0x80>
   209be:	add    rsp,0x18
   209c2:	mov    rdi,r14
   209c5:	pop    rbx
   209c6:	pop    rbp
   209c7:	pop    r12
   209c9:	pop    r13
   209cb:	pop    r14
   209cd:	pop    r15
   209cf:	jmp    4370 <fclose@plt>
   209d4:	nop    DWORD PTR [rax+0x0]
   209d8:	mov    r9,QWORD PTR [rip+0x67bd9]        # 885b8 <input>
   209df:	lea    r8,[rip+0x53098]        # 73a7e <ONE_FOURTH_TAP+0x5e>
   209e6:	mov    ecx,0x12c
   209eb:	xor    eax,eax
   209ed:	mov    edx,0x1
   209f2:	mov    esi,0x12c
   209f7:	lea    rdi,[rip+0x945a2]        # b4fa0 <errortext>
   209fe:	add    r9,0xa78
   20a05:	call   42c0 <__snprintf_chk@plt>
   20a0a:	mov    esi,0x1
   20a0f:	lea    rdi,[rip+0x9458a]        # b4fa0 <errortext>
   20a16:	call   19180 <error>
   20a1b:	jmp    20936 <write_buffer+0x46>

0000000000020a20 <Sort>:
   20a20:	endbr64 
   20a24:	mov    r10,rdi
   20a27:	sub    r10,0x1
   20a2b:	je     20a75 <Sort+0x55>
   20a2d:	lea    r8,[rsi+0x8]
   20a31:	xor    r9d,r9d
   20a34:	lea    rsi,[rsi+rdi*8]
   20a38:	nop    DWORD PTR [rax+rax*1+0x0]
   20a40:	add    r9,0x1
   20a44:	cmp    rdi,r9
   20a47:	jbe    20a6c <Sort+0x4c>
   20a49:	mov    rax,r8
   20a4c:	nop    DWORD PTR [rax+0x0]
   20a50:	mov    rdx,QWORD PTR [r8-0x8]
   20a54:	mov    rcx,QWORD PTR [rax]
   20a57:	cmp    rdx,rcx
   20a5a:	jbe    20a63 <Sort+0x43>
   20a5c:	mov    QWORD PTR [r8-0x8],rcx
   20a60:	mov    QWORD PTR [rax],rdx
   20a63:	add    rax,0x8
   20a67:	cmp    rax,rsi
   20a6a:	jne    20a50 <Sort+0x30>
   20a6c:	add    r8,0x8
   20a70:	cmp    r9,r10
   20a73:	jne    20a40 <Sort+0x20>
   20a75:	ret    
   20a76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000020a80 <calc_buffer>:
   20a80:	endbr64 
   20a84:	push   r15
   20a86:	mov    edx,0x50
   20a8b:	mov    esi,0x1
   20a90:	lea    rdi,[rip+0x53171]        # 73c08 <ONE_FOURTH_TAP+0x1e8>
   20a97:	push   r14
   20a99:	push   r13
   20a9b:	push   r12
   20a9d:	push   rbp
   20a9e:	push   rbx
   20a9f:	sub    rsp,0x28
   20aa3:	mov    rcx,QWORD PTR [rip+0x67dd6]        # 88880 <stdout@@GLIBC_2.2.5>
   20aaa:	call   44f0 <fwrite@plt>
   20aaf:	mov    rax,QWORD PTR [rip+0x67b02]        # 885b8 <input>
   20ab6:	mov    edi,0x1
   20abb:	mov    rdx,QWORD PTR [rip+0x67ffe]        # 88ac0 <total_frame_buffer>
   20ac2:	lea    rsi,[rip+0x52fdd]        # 73aa6 <ONE_FOURTH_TAP+0x86>
   20ac9:	mov    ecx,DWORD PTR [rax+0x8]
   20acc:	xor    eax,eax
   20ace:	call   4490 <__printf_chk@plt>
   20ad3:	mov    rax,QWORD PTR [rip+0x67ade]        # 885b8 <input>
   20ada:	mov    esi,0x8
   20adf:	movsxd r12,DWORD PTR [rax+0x9ac]
   20ae6:	mov    rax,QWORD PTR [rip+0x67fd3]        # 88ac0 <total_frame_buffer>
   20aed:	lea    rdi,[rax+0x1]
   20af1:	call   4400 <calloc@plt>
   20af6:	mov    rbp,rax
   20af9:	test   rax,rax
   20afc:	je     20f7c <calc_buffer+0x4fc>
   20b02:	mov    esi,0x8
   20b07:	mov    rdi,r12
   20b0a:	call   4400 <calloc@plt>
   20b0f:	mov    r13,rax
   20b12:	test   rax,rax
   20b15:	je     20faf <calc_buffer+0x52f>
   20b1b:	mov    esi,0x8
   20b20:	mov    rdi,r12
   20b23:	call   4400 <calloc@plt>
   20b28:	mov    QWORD PTR [rsp+0x8],rax
   20b2d:	test   rax,rax
   20b30:	je     20f9e <calc_buffer+0x51e>
   20b36:	mov    esi,0x8
   20b3b:	mov    rdi,r12
   20b3e:	call   4400 <calloc@plt>
   20b43:	mov    QWORD PTR [rsp+0x10],rax
   20b48:	test   rax,rax
   20b4b:	je     20f8d <calc_buffer+0x50d>
   20b51:	mov    rsi,QWORD PTR [rip+0x67f68]        # 88ac0 <total_frame_buffer>
   20b58:	test   rsi,rsi
   20b5b:	je     20f70 <calc_buffer+0x4f0>
   20b61:	lea    rax,[rip+0x69e78]        # 8a9e0 <Bit_Buffer>
   20b68:	xor    edx,edx
   20b6a:	lea    rcx,[rax+rsi*8]
   20b6e:	xchg   ax,ax
   20b70:	add    rdx,QWORD PTR [rax]
   20b73:	add    rax,0x8
   20b77:	cmp    rcx,rax
   20b7a:	jne    20b70 <calc_buffer+0xf0>
   20b7c:	test   rdx,rdx
   20b7f:	js     20f52 <calc_buffer+0x4d2>
   20b85:	pxor   xmm0,xmm0
   20b89:	cvtsi2ss xmm0,rdx
   20b8e:	pxor   xmm1,xmm1
   20b92:	cvtsi2ss xmm1,rsi
   20b97:	divss  xmm0,xmm1
   20b9b:	comiss xmm0,DWORD PTR [rip+0x530ba]        # 73c5c <ONE_FOURTH_TAP+0x23c>
   20ba2:	jae    20f3b <calc_buffer+0x4bb>
   20ba8:	cvttss2si rbx,xmm0
   20bad:	mov    rsi,r13
   20bb0:	mov    rdi,r12
   20bb3:	call   207a0 <get_LeakyBucketRate>
   20bb8:	lea    r8,[rbx+rbx*4]
   20bbc:	lea    rsi,[r12-0x1]
   20bc1:	shl    r8,0x2
   20bc5:	cmp    eax,0x1
   20bc8:	je     20cb3 <calc_buffer+0x233>
   20bce:	test   r12,r12
   20bd1:	je     20cb8 <calc_buffer+0x238>
   20bd7:	mov    rax,QWORD PTR [rip+0x679d2]        # 885b0 <img>
   20bde:	mov    r10,rbx
   20be1:	mov    r14,rbx
   20be4:	xor    ecx,ecx
   20be6:	movss  xmm3,DWORD PTR [rip+0x5306e]        # 73c5c <ONE_FOURTH_TAP+0x23c>
   20bee:	shr    r10,0x2
   20bf2:	and    r14d,0x1
   20bf6:	movabs r11,0x8000000000000000
   20c00:	movss  xmm2,DWORD PTR [rax+0x30]
   20c05:	mov    rax,QWORD PTR [rip+0x679ac]        # 885b8 <input>
   20c0c:	movaps xmm4,xmm3
   20c0f:	mov    eax,DWORD PTR [rax+0x14]
   20c12:	lea    edi,[rax+0x1]
   20c15:	movsxd r9,edi
   20c18:	jmp    20c74 <calc_buffer+0x1f4>
   20c1a:	nop    WORD PTR [rax+rax*1+0x0]
   20c20:	pxor   xmm0,xmm0
   20c24:	pxor   xmm1,xmm1
   20c28:	mov    rax,QWORD PTR [r13+rcx*8-0x8]
   20c2d:	cvtsi2ss xmm0,r10
   20c32:	cvtsi2ss xmm1,edi
   20c36:	mulss  xmm0,xmm2
   20c3a:	divss  xmm0,xmm1
   20c3e:	test   rax,rax
   20c41:	js     20eb0 <calc_buffer+0x430>
   20c47:	pxor   xmm1,xmm1
   20c4b:	cvtsi2ss xmm1,rax
   20c50:	addss  xmm0,xmm1
   20c54:	comiss xmm0,DWORD PTR [rip+0x53001]        # 73c5c <ONE_FOURTH_TAP+0x23c>
   20c5b:	jae    20e90 <calc_buffer+0x410>
   20c61:	cvttss2si rax,xmm0
   20c66:	mov    QWORD PTR [r13+rcx*8+0x0],rax
   20c6b:	add    rcx,0x1
   20c6f:	cmp    r12,rcx
   20c72:	je     20cb3 <calc_buffer+0x233>
   20c74:	test   rcx,rcx
   20c77:	jne    20c20 <calc_buffer+0x1a0>
   20c79:	test   rbx,rbx
   20c7c:	js     20f20 <calc_buffer+0x4a0>
   20c82:	pxor   xmm0,xmm0
   20c86:	cvtsi2ss xmm0,rbx
   20c8b:	mulss  xmm0,xmm2
   20c8f:	comiss xmm0,DWORD PTR [rip+0x52fc6]        # 73c5c <ONE_FOURTH_TAP+0x23c>
   20c96:	jae    20ed0 <calc_buffer+0x450>
   20c9c:	cvttss2si rax,xmm0
   20ca1:	xor    edx,edx
   20ca3:	add    rcx,0x1
   20ca7:	div    r9
   20caa:	mov    QWORD PTR [r13+0x0],rax
   20cae:	cmp    r12,rcx
   20cb1:	jne    20c74 <calc_buffer+0x1f4>
   20cb3:	test   rsi,rsi
   20cb6:	je     20d06 <calc_buffer+0x286>
   20cb8:	lea    rdi,[r13+0x8]
   20cbc:	lea    r9,[r13+r12*8+0x0]
   20cc1:	xor    r10d,r10d
   20cc4:	nop    DWORD PTR [rax+0x0]
   20cc8:	add    r10,0x1
   20ccc:	mov    rax,rdi
   20ccf:	cmp    r12,r10
   20cd2:	jbe    20cf4 <calc_buffer+0x274>
   20cd4:	nop    DWORD PTR [rax+0x0]
   20cd8:	mov    rdx,QWORD PTR [rdi-0x8]
   20cdc:	mov    rcx,QWORD PTR [rax]
   20cdf:	cmp    rdx,rcx
   20ce2:	jbe    20ceb <calc_buffer+0x26b>
   20ce4:	mov    QWORD PTR [rdi-0x8],rcx
   20ce8:	mov    QWORD PTR [rax],rdx
   20ceb:	add    rax,0x8
   20cef:	cmp    rax,r9
   20cf2:	jne    20cd8 <calc_buffer+0x258>
   20cf4:	add    rdi,0x8
   20cf8:	cmp    r10,rsi
   20cfb:	jb     20cc8 <calc_buffer+0x248>
   20cfd:	test   r12,r12
   20d00:	je     20e3f <calc_buffer+0x3bf>
   20d06:	mov    rax,QWORD PTR [rip+0x678ab]        # 885b8 <input>
   20d0d:	mov    rbx,QWORD PTR [rip+0x67dac]        # 88ac0 <total_frame_buffer>
   20d14:	xor    r9d,r9d
   20d17:	xor    r14d,r14d
   20d1a:	mov    r15,QWORD PTR [rip+0x69cbf]        # 8a9e0 <Bit_Buffer>
   20d21:	lea    rdi,[rip+0x69cb8]        # 8a9e0 <Bit_Buffer>
   20d28:	mov    eax,DWORD PTR [rax+0x14]
   20d2b:	add    eax,0x1
   20d2e:	cdqe   
   20d30:	mov    QWORD PTR [rsp+0x18],rax
   20d35:	mov    rax,QWORD PTR [rip+0x67874]        # 885b0 <img>
   20d3c:	movss  xmm1,DWORD PTR [rax+0x30]
   20d41:	nop    DWORD PTR [rax+0x0]
   20d48:	mov    rax,QWORD PTR [rsp+0x18]
   20d4d:	imul   rax,QWORD PTR [r13+r14*8+0x0]
   20d53:	test   rax,rax
   20d56:	js     20ee8 <calc_buffer+0x468>
   20d5c:	pxor   xmm0,xmm0
   20d60:	cvtsi2ss xmm0,rax
   20d65:	divss  xmm0,xmm1
   20d69:	mov    QWORD PTR [rbp+0x0],r8
   20d6d:	cvttss2si rsi,xmm0
   20d72:	test   rbx,rbx
   20d75:	je     20f10 <calc_buffer+0x490>
   20d7b:	mov    rcx,r15
   20d7e:	mov    rax,r8
   20d81:	mov    r10,r8
   20d84:	xor    edx,edx
   20d86:	jmp    20d94 <calc_buffer+0x314>
   20d88:	nop    DWORD PTR [rax+rax*1+0x0]
   20d90:	mov    rcx,QWORD PTR [rdi+rdx*8]
   20d94:	sub    rax,rcx
   20d97:	mov    QWORD PTR [rbp+rdx*8+0x0],rax
   20d9c:	cmp    rax,r10
   20d9f:	jge    20da7 <calc_buffer+0x327>
   20da1:	mov    r9,rdx
   20da4:	mov    r10,rax
   20da7:	add    rax,rsi
   20daa:	add    rdx,0x1
   20dae:	cmp    rax,r8
   20db1:	cmovg  rax,r8
   20db5:	mov    QWORD PTR [rbp+rdx*8+0x0],rax
   20dba:	cmp    rdx,rbx
   20dbd:	jne    20d90 <calc_buffer+0x310>
   20dbf:	mov    rax,r8
   20dc2:	mov    QWORD PTR [rbp+0x0],r15
   20dc6:	mov    r11,r15
   20dc9:	xor    edx,edx
   20dcb:	sub    rax,r10
   20dce:	mov    r10,rax
   20dd1:	jmp    20df6 <calc_buffer+0x376>
   20dd3:	nop    DWORD PTR [rax+rax*1+0x0]
   20dd8:	mov    QWORD PTR [rbp+rdx*8+0x0],rax
   20ddd:	lea    rcx,[rdx+0x1]
   20de1:	add    rax,rsi
   20de4:	mov    QWORD PTR [rbp+rcx*8+0x0],rax
   20de9:	cmp    r10,rax
   20dec:	jl     20e20 <calc_buffer+0x3a0>
   20dee:	cmp    r9,rdx
   20df1:	je     20e20 <calc_buffer+0x3a0>
   20df3:	mov    rdx,rcx
   20df6:	mov    rax,QWORD PTR [rbp+rdx*8+0x0]
   20dfb:	sub    rax,QWORD PTR [rdi+rdx*8]
   20dff:	jns    20dd8 <calc_buffer+0x358>
   20e01:	mov    QWORD PTR [rbp+rdx*8+0x0],0x0
   20e0a:	sub    r11,rax
   20e0d:	lea    rcx,[rdx+0x1]
   20e11:	mov    rax,rsi
   20e14:	mov    QWORD PTR [rbp+rcx*8+0x0],rax
   20e19:	cmp    r10,rax
   20e1c:	jge    20dee <calc_buffer+0x36e>
   20e1e:	xchg   ax,ax
   20e20:	mov    rax,QWORD PTR [rsp+0x8]
   20e25:	mov    QWORD PTR [rax+r14*8],r10
   20e29:	mov    rax,QWORD PTR [rsp+0x10]
   20e2e:	mov    QWORD PTR [rax+r14*8],r11
   20e32:	add    r14,0x1
   20e36:	cmp    r12,r14
   20e39:	ja     20d48 <calc_buffer+0x2c8>
   20e3f:	mov    r15,QWORD PTR [rsp+0x10]
   20e44:	mov    rbx,QWORD PTR [rsp+0x8]
   20e49:	mov    rsi,r13
   20e4c:	mov    rdi,r12
   20e4f:	mov    rcx,r15
   20e52:	mov    rdx,rbx
   20e55:	call   208f0 <write_buffer>
   20e5a:	mov    rdi,rbp
   20e5d:	call   42d0 <free@plt>
   20e62:	mov    rdi,r13
   20e65:	call   42d0 <free@plt>
   20e6a:	mov    rdi,rbx
   20e6d:	call   42d0 <free@plt>
   20e72:	add    rsp,0x28
   20e76:	mov    rdi,r15
   20e79:	pop    rbx
   20e7a:	pop    rbp
   20e7b:	pop    r12
   20e7d:	pop    r13
   20e7f:	pop    r14
   20e81:	pop    r15
   20e83:	jmp    42d0 <free@plt>
   20e88:	nop    DWORD PTR [rax+rax*1+0x0]
   20e90:	subss  xmm0,xmm3
   20e94:	cvttss2si rax,xmm0
   20e99:	mov    QWORD PTR [r13+rcx*8+0x0],rax
   20e9e:	xor    QWORD PTR [r13+rcx*8+0x0],r11
   20ea3:	jmp    20c6b <calc_buffer+0x1eb>
   20ea8:	nop    DWORD PTR [rax+rax*1+0x0]
   20eb0:	mov    rdx,rax
   20eb3:	and    eax,0x1
   20eb6:	pxor   xmm1,xmm1
   20eba:	shr    rdx,1
   20ebd:	or     rdx,rax
   20ec0:	cvtsi2ss xmm1,rdx
   20ec5:	addss  xmm1,xmm1
   20ec9:	jmp    20c50 <calc_buffer+0x1d0>
   20ece:	xchg   ax,ax
   20ed0:	subss  xmm0,xmm4
   20ed4:	cvttss2si rax,xmm0
   20ed9:	xor    rax,r11
   20edc:	jmp    20ca1 <calc_buffer+0x221>
   20ee1:	nop    DWORD PTR [rax+0x0]
   20ee8:	mov    rdx,rax
   20eeb:	and    eax,0x1
   20eee:	pxor   xmm0,xmm0
   20ef2:	shr    rdx,1
   20ef5:	or     rdx,rax
   20ef8:	cvtsi2ss xmm0,rdx
   20efd:	addss  xmm0,xmm0
   20f01:	jmp    20d65 <calc_buffer+0x2e5>
   20f06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20f10:	mov    r10,r8
   20f13:	jmp    20dbf <calc_buffer+0x33f>
   20f18:	nop    DWORD PTR [rax+rax*1+0x0]
   20f20:	mov    rax,rbx
   20f23:	pxor   xmm0,xmm0
   20f27:	shr    rax,1
   20f2a:	or     rax,r14
   20f2d:	cvtsi2ss xmm0,rax
   20f32:	addss  xmm0,xmm0
   20f36:	jmp    20c8b <calc_buffer+0x20b>
   20f3b:	subss  xmm0,DWORD PTR [rip+0x52d19]        # 73c5c <ONE_FOURTH_TAP+0x23c>
   20f43:	cvttss2si rbx,xmm0
   20f48:	btc    rbx,0x3f
   20f4d:	jmp    20bad <calc_buffer+0x12d>
   20f52:	mov    rax,rdx
   20f55:	and    edx,0x1
   20f58:	pxor   xmm0,xmm0
   20f5c:	shr    rax,1
   20f5f:	or     rax,rdx
   20f62:	cvtsi2ss xmm0,rax
   20f67:	addss  xmm0,xmm0
   20f6b:	jmp    20b8e <calc_buffer+0x10e>
   20f70:	pxor   xmm1,xmm1
   20f74:	movaps xmm0,xmm1
   20f77:	jmp    20b97 <calc_buffer+0x117>
   20f7c:	lea    rdi,[rip+0x52b3e]        # 73ac1 <ONE_FOURTH_TAP+0xa1>
   20f83:	call   38210 <no_mem_exit>
   20f88:	jmp    20b02 <calc_buffer+0x82>
   20f8d:	lea    rdi,[rip+0x52b6b]        # 73aff <ONE_FOURTH_TAP+0xdf>
   20f94:	call   38210 <no_mem_exit>
   20f99:	jmp    20b51 <calc_buffer+0xd1>
   20f9e:	lea    rdi,[rip+0x52b48]        # 73aed <ONE_FOURTH_TAP+0xcd>
   20fa5:	call   38210 <no_mem_exit>
   20faa:	jmp    20b36 <calc_buffer+0xb6>
   20faf:	lea    rdi,[rip+0x52b25]        # 73adb <ONE_FOURTH_TAP+0xbb>
   20fb6:	call   38210 <no_mem_exit>
   20fbb:	jmp    20b1b <calc_buffer+0x9b>

0000000000020fc0 <free_picture.part.0>:
   20fc0:	push   rbp
   20fc1:	mov    rbp,rdi
   20fc4:	call   60610 <free_slice_list>
   20fc9:	mov    rdi,rbp
   20fcc:	pop    rbp
   20fcd:	jmp    42d0 <free@plt>
   20fd2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   20fdd:	nop    DWORD PTR [rax]

0000000000020fe0 <init_poc>:
   20fe0:	endbr64 
   20fe4:	mov    rdx,QWORD PTR [rip+0x675cd]        # 885b8 <input>
   20feb:	mov    rax,QWORD PTR [rip+0x675be]        # 885b0 <img>
   20ff2:	mov    ecx,DWORD PTR [rdx+0xc88]
   20ff8:	mov    DWORD PTR [rax+0x11ad8],0x0
   21002:	mov    DWORD PTR [rax+0x11ae4],0x1
   2100c:	mov    DWORD PTR [rax+0x11ad4],ecx
   21012:	mov    ecx,DWORD PTR [rdx+0x524]
   21018:	test   ecx,ecx
   2101a:	je     21060 <init_poc+0x80>
   2101c:	cmp    QWORD PTR [rdx+0xb40],0x0
   21024:	mov    DWORD PTR [rax+0x11adc],0x0
   2102e:	mov    DWORD PTR [rax+0x11ae8],0x2
   21038:	jne    21086 <init_poc+0xa6>
   2103a:	mov    DWORD PTR [rax+0x11ae0],0x0
   21044:	mov    DWORD PTR [rax+0x11b2c],0x0
   2104e:	mov    DWORD PTR [rax+0x11af0],0x0
   21058:	ret    
   21059:	nop    DWORD PTR [rax+0x0]
   21060:	mov    esi,DWORD PTR [rdx+0x4d4]
   21066:	mov    ecx,esi
   21068:	neg    ecx
   2106a:	add    ecx,ecx
   2106c:	cmp    QWORD PTR [rdx+0xb40],0x0
   21074:	mov    DWORD PTR [rax+0x11adc],ecx
   2107a:	lea    ecx,[rsi+rsi*1+0x2]
   2107e:	mov    DWORD PTR [rax+0x11ae8],ecx
   21084:	je     2103a <init_poc+0x5a>
   21086:	mov    DWORD PTR [rax+0x11ae0],0x1
   21090:	mov    DWORD PTR [rax+0x11b2c],0x1
   2109a:	mov    DWORD PTR [rax+0x11af0],0x1
   210a4:	ret    
   210a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000210b0 <CAVLC_init>:
   210b0:	endbr64 
   210b4:	mov    rcx,QWORD PTR [rip+0x674f5]        # 885b0 <img>
   210bb:	xor    r9d,r9d
   210be:	mov    eax,DWORD PTR [rcx+0x11b24]
   210c4:	test   eax,eax
   210c6:	je     21129 <CAVLC_init+0x79>
   210c8:	nop    DWORD PTR [rax+rax*1+0x0]
   210d0:	mov    r8d,r9d
   210d3:	xor    edi,edi
   210d5:	shl    r8,0x3
   210d9:	cmp    DWORD PTR [rcx+0x11bf4],0xfffffffc
   210e0:	je     21111 <CAVLC_init+0x61>
   210e2:	mov    rax,QWORD PTR [rcx+0x80]
   210e9:	mov    rax,QWORD PTR [rax+r8*1]
   210ed:	mov    rsi,QWORD PTR [rax+rdi*1]
   210f1:	xor    eax,eax
   210f3:	nop    DWORD PTR [rax+rax*1+0x0]
   210f8:	mov    edx,eax
   210fa:	add    eax,0x1
   210fd:	mov    DWORD PTR [rsi+rdx*4],0x0
   21104:	mov    edx,DWORD PTR [rcx+0x11bf4]
   2110a:	add    edx,0x4
   2110d:	cmp    edx,eax
   2110f:	ja     210f8 <CAVLC_init+0x48>
   21111:	add    rdi,0x8
   21115:	cmp    rdi,0x20
   21119:	jne    210d9 <CAVLC_init+0x29>
   2111b:	add    r9d,0x1
   2111f:	cmp    DWORD PTR [rcx+0x11b24],r9d
   21126:	ja     210d0 <CAVLC_init+0x20>
   21128:	ret    
   21129:	ret    
   2112a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000021130 <malloc_picture>:
   21130:	endbr64 
   21134:	sub    rsp,0x18
   21138:	mov    esi,0x338
   2113d:	mov    edi,0x1
   21142:	call   4400 <calloc@plt>
   21147:	test   rax,rax
   2114a:	je     21151 <malloc_picture+0x21>
   2114c:	add    rsp,0x18
   21150:	ret    
   21151:	lea    rdi,[rip+0x52b08]        # 73c60 <ONE_FOURTH_TAP+0x240>
   21158:	mov    QWORD PTR [rsp+0x8],rax
   2115d:	call   38210 <no_mem_exit>
   21162:	mov    rax,QWORD PTR [rsp+0x8]
   21167:	jmp    2114c <malloc_picture+0x1c>
   21169:	nop    DWORD PTR [rax+0x0]

0000000000021170 <free_picture>:
   21170:	endbr64 
   21174:	test   rdi,rdi
   21177:	je     21180 <free_picture+0x10>
   21179:	jmp    20fc0 <free_picture.part.0>
   2117e:	xchg   ax,ax
   21180:	ret    
   21181:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2118c:	nop    DWORD PTR [rax+0x0]

0000000000021190 <report_frame_statistic>:
   21190:	endbr64 
   21194:	push   r15
   21196:	lea    rsi,[rip+0x4a601]        # 6b79e <maxpos+0x49e>
   2119d:	lea    rdi,[rip+0x53bc3]        # 74d67 <ONE_FOURTH_TAP+0x1347>
   211a4:	push   r14
   211a6:	push   r13
   211a8:	push   r12
   211aa:	push   rbp
   211ab:	push   rbx
   211ac:	sub    rsp,0x428
   211b3:	mov    rax,QWORD PTR fs:0x28
   211bc:	mov    QWORD PTR [rsp+0x418],rax
   211c4:	xor    eax,eax
   211c6:	call   44c0 <fopen@plt>
   211cb:	test   rax,rax
   211ce:	je     21d10 <report_frame_statistic+0xb80>
   211d4:	mov    rdi,rax
   211d7:	call   4370 <fclose@plt>
   211dc:	lea    rsi,[rip+0x4aac9]        # 6bcac <maxpos+0x9ac>
   211e3:	lea    rdi,[rip+0x53b7d]        # 74d67 <ONE_FOURTH_TAP+0x1347>
   211ea:	call   44c0 <fopen@plt>
   211ef:	mov    rbp,rax
   211f2:	test   rax,rax
   211f5:	je     21d80 <report_frame_statistic+0xbf0>
   211fb:	mov    edx,DWORD PTR [rip+0x92f3b]        # b413c <frame_statistic_start>
   21201:	test   edx,edx
   21203:	jne    21cd0 <report_frame_statistic+0xb40>
   21209:	lea    r8,[rip+0x53c3d]        # 74e4d <ONE_FOURTH_TAP+0x142d>
   21210:	mov    esi,0x1
   21215:	xor    eax,eax
   21217:	xor    ebx,ebx
   21219:	lea    rcx,[rip+0x53b69]        # 74d89 <ONE_FOURTH_TAP+0x1369>
   21220:	mov    rdi,rbp
   21223:	lea    r12,[rsp+0x8]
   21228:	xor    r14d,r14d
   2122b:	lea    rdx,[rip+0x53b5b]        # 74d8d <ONE_FOURTH_TAP+0x136d>
   21232:	call   4500 <__fprintf_chk@plt>
   21237:	xor    edi,edi
   21239:	call   4450 <time@plt>
   2123e:	mov    rdi,r12
   21241:	mov    QWORD PTR [rsp+0x8],rax
   21246:	call   4450 <time@plt>
   2124b:	mov    rdi,r12
   2124e:	lea    r12,[rsp+0x30]
   21253:	call   42f0 <localtime@plt>
   21258:	mov    rdi,r12
   2125b:	mov    esi,0x3e8
   21260:	lea    rdx,[rip+0x53b2e]        # 74d95 <ONE_FOURTH_TAP+0x1375>
   21267:	mov    rcx,rax
   2126a:	mov    r13,rax
   2126d:	call   44a0 <strftime@plt>
   21272:	mov    rcx,r12
   21275:	mov    esi,0x1
   2127a:	mov    rdi,rbp
   2127d:	lea    rdx,[rip+0x53b1a]        # 74d9e <ONE_FOURTH_TAP+0x137e>
   21284:	xor    eax,eax
   21286:	call   4500 <__fprintf_chk@plt>
   2128b:	mov    rcx,r13
   2128e:	mov    rdi,r12
   21291:	mov    esi,0x3e8
   21296:	lea    rdx,[rip+0x53b0b]        # 74da8 <ONE_FOURTH_TAP+0x1388>
   2129d:	call   44a0 <strftime@plt>
   212a2:	mov    rcx,r12
   212a5:	mov    esi,0x1
   212aa:	mov    rdi,rbp
   212ad:	lea    rdx,[rip+0x53aeb]        # 74d9f <ONE_FOURTH_TAP+0x137f>
   212b4:	xor    eax,eax
   212b6:	lea    r12,[rsp+0x10]
   212bb:	call   4500 <__fprintf_chk@plt>
   212c0:	mov    r15,QWORD PTR [rip+0x672f1]        # 885b8 <input>
   212c7:	lea    r13,[r15+0xe0]
   212ce:	xchg   ax,ax
   212d0:	mov    rdi,r13
   212d3:	call   4380 <strlen@plt>
   212d8:	sub    eax,0x14
   212db:	cmovs  eax,ebx
   212de:	add    eax,r14d
   212e1:	cdqe   
   212e3:	movzx  eax,BYTE PTR [r15+rax*1+0xe0]
   212ec:	mov    BYTE PTR [r12+r14*1],al
   212f0:	add    r14,0x1
   212f4:	cmp    r14,0x14
   212f8:	jne    212d0 <report_frame_statistic+0x140>
   212fa:	mov    rcx,r12
   212fd:	lea    rdx,[rip+0x53aad]        # 74db1 <ONE_FOURTH_TAP+0x1391>
   21304:	mov    rdi,rbp
   21307:	xor    eax,eax
   21309:	mov    esi,0x1
   2130e:	call   4500 <__fprintf_chk@plt>
   21313:	mov    ecx,DWORD PTR [rip+0x91bc7]        # b2ee0 <frame_no>
   21319:	mov    rdi,rbp
   2131c:	xor    eax,eax
   2131e:	lea    rdx,[rip+0x53a95]        # 74dba <ONE_FOURTH_TAP+0x139a>
   21325:	mov    esi,0x1
   2132a:	call   4500 <__fprintf_chk@plt>
   2132f:	mov    rax,QWORD PTR [rip+0x6727a]        # 885b0 <img>
   21336:	mov    esi,0x1
   2133b:	mov    rdi,rbp
   2133e:	lea    rdx,[rip+0x53a75]        # 74dba <ONE_FOURTH_TAP+0x139a>
   21345:	mov    ecx,DWORD PTR [rax+0x28]
   21348:	xor    eax,eax
   2134a:	call   4500 <__fprintf_chk@plt>
   2134f:	mov    rax,QWORD PTR [rip+0x67262]        # 885b8 <input>
   21356:	mov    esi,0x1
   2135b:	mov    rdi,rbp
   2135e:	lea    rdx,[rip+0x53a5b]        # 74dc0 <ONE_FOURTH_TAP+0x13a0>
   21365:	mov    ecx,DWORD PTR [rax+0xb40]
   2136b:	mov    r8d,DWORD PTR [rax+0xb44]
   21372:	xor    eax,eax
   21374:	call   4500 <__fprintf_chk@plt>
   21379:	mov    rax,QWORD PTR [rip+0x67230]        # 885b0 <img>
   21380:	mov    eax,DWORD PTR [rax+0x11b10]
   21386:	test   eax,eax
   21388:	mov    rax,QWORD PTR [rip+0x67219]        # 885a8 <stats>
   2138f:	jne    21cb0 <report_frame_statistic+0xb20>
   21395:	mov    ecx,DWORD PTR [rax+0x2c0]
   2139b:	lea    rdx,[rip+0x53a29]        # 74dcb <ONE_FOURTH_TAP+0x13ab>
   213a2:	mov    esi,0x1
   213a7:	mov    rdi,rbp
   213aa:	xor    eax,eax
   213ac:	call   4500 <__fprintf_chk@plt>
   213b1:	pxor   xmm0,xmm0
   213b5:	pxor   xmm2,xmm2
   213b9:	mov    rdi,rbp
   213bc:	mov    rax,QWORD PTR [rip+0x671dd]        # 885a0 <snr>
   213c3:	pxor   xmm1,xmm1
   213c7:	mov    esi,0x1
   213cc:	lea    rdx,[rip+0x539fe]        # 74dd1 <ONE_FOURTH_TAP+0x13b1>
   213d3:	cvtss2sd xmm0,DWORD PTR [rax]
   213d7:	cvtss2sd xmm2,DWORD PTR [rax+0x8]
   213dc:	cvtss2sd xmm1,DWORD PTR [rax+0x4]
   213e1:	mov    eax,0x3
   213e6:	call   4500 <__fprintf_chk@plt>
   213eb:	mov    rax,QWORD PTR [rip+0x671b6]        # 885a8 <stats>
   213f2:	mov    esi,0x1
   213f7:	mov    rdi,rbp
   213fa:	lea    rdx,[rip+0x539e6]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21401:	mov    ecx,DWORD PTR [rax+0x374]
   21407:	xor    eax,eax
   21409:	sub    ecx,DWORD PTR [rip+0x677cd]        # 88bdc <last_mode_use.6692+0x9c>
   2140f:	call   4500 <__fprintf_chk@plt>
   21414:	mov    rax,QWORD PTR [rip+0x6718d]        # 885a8 <stats>
   2141b:	mov    esi,0x1
   21420:	mov    rdi,rbp
   21423:	lea    rdx,[rip+0x539bd]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2142a:	mov    ecx,DWORD PTR [rax+0x384]
   21430:	xor    eax,eax
   21432:	sub    ecx,DWORD PTR [rip+0x677b4]        # 88bec <last_mode_use.6692+0xac>
   21438:	call   4500 <__fprintf_chk@plt>
   2143d:	mov    rax,QWORD PTR [rip+0x67164]        # 885a8 <stats>
   21444:	mov    esi,0x1
   21449:	mov    rdi,rbp
   2144c:	lea    rdx,[rip+0x53994]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21453:	mov    ecx,DWORD PTR [rax+0x378]
   21459:	xor    eax,eax
   2145b:	sub    ecx,DWORD PTR [rip+0x6777f]        # 88be0 <last_mode_use.6692+0xa0>
   21461:	call   4500 <__fprintf_chk@plt>
   21466:	mov    rax,QWORD PTR [rip+0x6713b]        # 885a8 <stats>
   2146d:	mov    esi,0x1
   21472:	mov    rdi,rbp
   21475:	lea    rdx,[rip+0x5396b]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2147c:	mov    ecx,DWORD PTR [rax+0x2a0]
   21482:	xor    eax,eax
   21484:	sub    ecx,DWORD PTR [rip+0x676a6]        # 88b30 <last_mode_chroma_use.6694>
   2148a:	call   4500 <__fprintf_chk@plt>
   2148f:	mov    rax,QWORD PTR [rip+0x67112]        # 885a8 <stats>
   21496:	mov    esi,0x1
   2149b:	mov    rdi,rbp
   2149e:	lea    rdx,[rip+0x53942]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   214a5:	mov    ecx,DWORD PTR [rax+0x2a4]
   214ab:	xor    eax,eax
   214ad:	sub    ecx,DWORD PTR [rip+0x67681]        # 88b34 <last_mode_chroma_use.6694+0x4>
   214b3:	call   4500 <__fprintf_chk@plt>
   214b8:	mov    rax,QWORD PTR [rip+0x670e9]        # 885a8 <stats>
   214bf:	mov    esi,0x1
   214c4:	mov    rdi,rbp
   214c7:	lea    rdx,[rip+0x53919]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   214ce:	mov    ecx,DWORD PTR [rax+0x2a8]
   214d4:	xor    eax,eax
   214d6:	sub    ecx,DWORD PTR [rip+0x6765c]        # 88b38 <last_mode_chroma_use.6694+0x8>
   214dc:	call   4500 <__fprintf_chk@plt>
   214e1:	mov    rax,QWORD PTR [rip+0x670c0]        # 885a8 <stats>
   214e8:	mov    esi,0x1
   214ed:	mov    rdi,rbp
   214f0:	lea    rdx,[rip+0x538f0]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   214f7:	mov    ecx,DWORD PTR [rax+0x2ac]
   214fd:	xor    eax,eax
   214ff:	sub    ecx,DWORD PTR [rip+0x67637]        # 88b3c <last_mode_chroma_use.6694+0xc>
   21505:	call   4500 <__fprintf_chk@plt>
   2150a:	mov    rax,QWORD PTR [rip+0x67097]        # 885a8 <stats>
   21511:	mov    esi,0x1
   21516:	mov    rdi,rbp
   21519:	lea    rdx,[rip+0x538c7]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21520:	mov    ecx,DWORD PTR [rax+0x2fc]
   21526:	xor    eax,eax
   21528:	sub    ecx,DWORD PTR [rip+0x67636]        # 88b64 <last_mode_use.6692+0x24>
   2152e:	call   4500 <__fprintf_chk@plt>
   21533:	mov    rax,QWORD PTR [rip+0x6706e]        # 885a8 <stats>
   2153a:	mov    esi,0x1
   2153f:	mov    rdi,rbp
   21542:	lea    rdx,[rip+0x5389e]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21549:	mov    ecx,DWORD PTR [rax+0x30c]
   2154f:	xor    eax,eax
   21551:	sub    ecx,DWORD PTR [rip+0x6761d]        # 88b74 <last_mode_use.6692+0x34>
   21557:	call   4500 <__fprintf_chk@plt>
   2155c:	mov    rax,QWORD PTR [rip+0x67045]        # 885a8 <stats>
   21563:	mov    esi,0x1
   21568:	mov    rdi,rbp
   2156b:	lea    rdx,[rip+0x53875]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21572:	mov    ecx,DWORD PTR [rax+0x300]
   21578:	xor    eax,eax
   2157a:	sub    ecx,DWORD PTR [rip+0x675e8]        # 88b68 <last_mode_use.6692+0x28>
   21580:	call   4500 <__fprintf_chk@plt>
   21585:	mov    rax,QWORD PTR [rip+0x6701c]        # 885a8 <stats>
   2158c:	mov    esi,0x1
   21591:	mov    rdi,rbp
   21594:	lea    rdx,[rip+0x5384c]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2159b:	mov    ecx,DWORD PTR [rax+0x2d8]
   215a1:	xor    eax,eax
   215a3:	sub    ecx,DWORD PTR [rip+0x67597]        # 88b40 <last_mode_use.6692>
   215a9:	call   4500 <__fprintf_chk@plt>
   215ae:	mov    rax,QWORD PTR [rip+0x66ff3]        # 885a8 <stats>
   215b5:	mov    esi,0x1
   215ba:	mov    rdi,rbp
   215bd:	lea    rdx,[rip+0x53823]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   215c4:	mov    ecx,DWORD PTR [rax+0x2dc]
   215ca:	xor    eax,eax
   215cc:	sub    ecx,DWORD PTR [rip+0x67572]        # 88b44 <last_mode_use.6692+0x4>
   215d2:	call   4500 <__fprintf_chk@plt>
   215d7:	mov    rax,QWORD PTR [rip+0x66fca]        # 885a8 <stats>
   215de:	mov    esi,0x1
   215e3:	mov    rdi,rbp
   215e6:	lea    rdx,[rip+0x537fa]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   215ed:	mov    ecx,DWORD PTR [rax+0x2e0]
   215f3:	xor    eax,eax
   215f5:	sub    ecx,DWORD PTR [rip+0x6754d]        # 88b48 <last_mode_use.6692+0x8>
   215fb:	call   4500 <__fprintf_chk@plt>
   21600:	mov    rax,QWORD PTR [rip+0x66fa1]        # 885a8 <stats>
   21607:	mov    esi,0x1
   2160c:	mov    rdi,rbp
   2160f:	lea    rdx,[rip+0x537d1]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21616:	mov    ecx,DWORD PTR [rax+0x2e4]
   2161c:	xor    eax,eax
   2161e:	sub    ecx,DWORD PTR [rip+0x67528]        # 88b4c <last_mode_use.6692+0xc>
   21624:	call   4500 <__fprintf_chk@plt>
   21629:	mov    rax,QWORD PTR [rip+0x66f78]        # 885a8 <stats>
   21630:	mov    esi,0x1
   21635:	mov    rdi,rbp
   21638:	lea    rdx,[rip+0x537a8]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2163f:	mov    ecx,DWORD PTR [rax+0x4c]
   21642:	xor    eax,eax
   21644:	call   4500 <__fprintf_chk@plt>
   21649:	mov    rax,QWORD PTR [rip+0x66f58]        # 885a8 <stats>
   21650:	mov    esi,0x1
   21655:	mov    rdi,rbp
   21658:	lea    rdx,[rip+0x53788]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2165f:	mov    ecx,DWORD PTR [rax+0x178]
   21665:	xor    eax,eax
   21667:	call   4500 <__fprintf_chk@plt>
   2166c:	mov    rax,QWORD PTR [rip+0x66f35]        # 885a8 <stats>
   21673:	mov    esi,0x1
   21678:	mov    rdi,rbp
   2167b:	lea    rdx,[rip+0x53765]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21682:	mov    ecx,DWORD PTR [rax+0x50]
   21685:	xor    eax,eax
   21687:	call   4500 <__fprintf_chk@plt>
   2168c:	mov    rax,QWORD PTR [rip+0x66f15]        # 885a8 <stats>
   21693:	mov    esi,0x1
   21698:	mov    rdi,rbp
   2169b:	lea    rdx,[rip+0x53745]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   216a2:	mov    ecx,DWORD PTR [rax+0x17c]
   216a8:	xor    eax,eax
   216aa:	call   4500 <__fprintf_chk@plt>
   216af:	mov    rax,QWORD PTR [rip+0x66ef2]        # 885a8 <stats>
   216b6:	mov    esi,0x1
   216bb:	mov    rdi,rbp
   216be:	lea    rdx,[rip+0x53722]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   216c5:	mov    ecx,DWORD PTR [rax+0x54]
   216c8:	xor    eax,eax
   216ca:	call   4500 <__fprintf_chk@plt>
   216cf:	mov    rax,QWORD PTR [rip+0x66ed2]        # 885a8 <stats>
   216d6:	mov    esi,0x1
   216db:	mov    rdi,rbp
   216de:	lea    rdx,[rip+0x53702]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   216e5:	mov    ecx,DWORD PTR [rax+0x180]
   216eb:	xor    eax,eax
   216ed:	call   4500 <__fprintf_chk@plt>
   216f2:	mov    rax,QWORD PTR [rip+0x66eaf]        # 885a8 <stats>
   216f9:	mov    esi,0x1
   216fe:	mov    rdi,rbp
   21701:	lea    rdx,[rip+0x536df]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21708:	mov    ecx,DWORD PTR [rax+0x2f8]
   2170e:	xor    eax,eax
   21710:	sub    ecx,DWORD PTR [rip+0x6744a]        # 88b60 <last_mode_use.6692+0x20>
   21716:	call   4500 <__fprintf_chk@plt>
   2171b:	mov    rax,QWORD PTR [rip+0x66e86]        # 885a8 <stats>
   21722:	mov    esi,0x1
   21727:	mov    rdi,rbp
   2172a:	lea    rdx,[rip+0x536b6]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21731:	mov    ecx,DWORD PTR [rax+0x2e8]
   21737:	xor    eax,eax
   21739:	sub    ecx,DWORD PTR [rip+0x67411]        # 88b50 <last_mode_use.6692+0x10>
   2173f:	call   4500 <__fprintf_chk@plt>
   21744:	mov    rax,QWORD PTR [rip+0x66e5d]        # 885a8 <stats>
   2174b:	mov    esi,0x1
   21750:	mov    rdi,rbp
   21753:	lea    rdx,[rip+0x5368d]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2175a:	mov    ecx,DWORD PTR [rax+0x58]
   2175d:	xor    eax,eax
   2175f:	call   4500 <__fprintf_chk@plt>
   21764:	mov    rax,QWORD PTR [rip+0x66e3d]        # 885a8 <stats>
   2176b:	mov    esi,0x1
   21770:	mov    rdi,rbp
   21773:	lea    rdx,[rip+0x5366d]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2177a:	mov    ecx,DWORD PTR [rax+0x184]
   21780:	xor    eax,eax
   21782:	call   4500 <__fprintf_chk@plt>
   21787:	mov    rax,QWORD PTR [rip+0x66e1a]        # 885a8 <stats>
   2178e:	mov    esi,0x1
   21793:	mov    rdi,rbp
   21796:	lea    rdx,[rip+0x5364a]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2179d:	mov    ecx,DWORD PTR [rax+0x2ec]
   217a3:	xor    eax,eax
   217a5:	sub    ecx,DWORD PTR [rip+0x673a9]        # 88b54 <last_mode_use.6692+0x14>
   217ab:	call   4500 <__fprintf_chk@plt>
   217b0:	mov    rax,QWORD PTR [rip+0x66df1]        # 885a8 <stats>
   217b7:	mov    esi,0x1
   217bc:	mov    rdi,rbp
   217bf:	lea    rdx,[rip+0x53621]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   217c6:	mov    ecx,DWORD PTR [rax+0x2f0]
   217cc:	xor    eax,eax
   217ce:	sub    ecx,DWORD PTR [rip+0x67384]        # 88b58 <last_mode_use.6692+0x18>
   217d4:	call   4500 <__fprintf_chk@plt>
   217d9:	mov    rax,QWORD PTR [rip+0x66dc8]        # 885a8 <stats>
   217e0:	mov    esi,0x1
   217e5:	mov    rdi,rbp
   217e8:	lea    rdx,[rip+0x535f8]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   217ef:	mov    ecx,DWORD PTR [rax+0x2f4]
   217f5:	xor    eax,eax
   217f7:	sub    ecx,DWORD PTR [rip+0x6735f]        # 88b5c <last_mode_use.6692+0x1c>
   217fd:	call   4500 <__fprintf_chk@plt>
   21802:	mov    rax,QWORD PTR [rip+0x66d9f]        # 885a8 <stats>
   21809:	mov    esi,0x1
   2180e:	mov    rdi,rbp
   21811:	lea    rdx,[rip+0x535cf]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21818:	mov    ecx,DWORD PTR [rax+0x338]
   2181e:	xor    eax,eax
   21820:	sub    ecx,DWORD PTR [rip+0x6737a]        # 88ba0 <last_mode_use.6692+0x60>
   21826:	call   4500 <__fprintf_chk@plt>
   2182b:	mov    rax,QWORD PTR [rip+0x66d76]        # 885a8 <stats>
   21832:	mov    esi,0x1
   21837:	mov    rdi,rbp
   2183a:	lea    rdx,[rip+0x535a6]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21841:	mov    ecx,DWORD PTR [rax+0x348]
   21847:	xor    eax,eax
   21849:	sub    ecx,DWORD PTR [rip+0x67361]        # 88bb0 <last_mode_use.6692+0x70>
   2184f:	call   4500 <__fprintf_chk@plt>
   21854:	mov    rax,QWORD PTR [rip+0x66d4d]        # 885a8 <stats>
   2185b:	mov    esi,0x1
   21860:	mov    rdi,rbp
   21863:	lea    rdx,[rip+0x5357d]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2186a:	mov    ecx,DWORD PTR [rax+0x33c]
   21870:	xor    eax,eax
   21872:	sub    ecx,DWORD PTR [rip+0x6732c]        # 88ba4 <last_mode_use.6692+0x64>
   21878:	call   4500 <__fprintf_chk@plt>
   2187d:	mov    rax,QWORD PTR [rip+0x66d24]        # 885a8 <stats>
   21884:	mov    esi,0x1
   21889:	mov    rdi,rbp
   2188c:	lea    rdx,[rip+0x53554]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21893:	mov    ecx,DWORD PTR [rax+0x314]
   21899:	xor    eax,eax
   2189b:	sub    ecx,DWORD PTR [rip+0x672db]        # 88b7c <last_mode_use.6692+0x3c>
   218a1:	call   4500 <__fprintf_chk@plt>
   218a6:	mov    rax,QWORD PTR [rip+0x66cfb]        # 885a8 <stats>
   218ad:	mov    esi,0x1
   218b2:	mov    rdi,rbp
   218b5:	lea    rdx,[rip+0x5352b]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   218bc:	mov    ecx,DWORD PTR [rax+0x318]
   218c2:	xor    eax,eax
   218c4:	sub    ecx,DWORD PTR [rip+0x672b6]        # 88b80 <last_mode_use.6692+0x40>
   218ca:	call   4500 <__fprintf_chk@plt>
   218cf:	mov    rax,QWORD PTR [rip+0x66cd2]        # 885a8 <stats>
   218d6:	mov    esi,0x1
   218db:	mov    rdi,rbp
   218de:	lea    rdx,[rip+0x53502]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   218e5:	mov    ecx,DWORD PTR [rax+0x31c]
   218eb:	xor    eax,eax
   218ed:	sub    ecx,DWORD PTR [rip+0x67291]        # 88b84 <last_mode_use.6692+0x44>
   218f3:	call   4500 <__fprintf_chk@plt>
   218f8:	mov    rax,QWORD PTR [rip+0x66ca9]        # 885a8 <stats>
   218ff:	mov    esi,0x1
   21904:	mov    rdi,rbp
   21907:	lea    rdx,[rip+0x534d9]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2190e:	mov    ecx,DWORD PTR [rax+0x320]
   21914:	xor    eax,eax
   21916:	sub    ecx,DWORD PTR [rip+0x6726c]        # 88b88 <last_mode_use.6692+0x48>
   2191c:	call   4500 <__fprintf_chk@plt>
   21921:	mov    rax,QWORD PTR [rip+0x66c80]        # 885a8 <stats>
   21928:	mov    esi,0x1
   2192d:	mov    rdi,rbp
   21930:	lea    rdx,[rip+0x534b0]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21937:	mov    ecx,DWORD PTR [rax+0x84]
   2193d:	xor    eax,eax
   2193f:	call   4500 <__fprintf_chk@plt>
   21944:	mov    rax,QWORD PTR [rip+0x66c5d]        # 885a8 <stats>
   2194b:	mov    esi,0x1
   21950:	mov    rdi,rbp
   21953:	lea    rdx,[rip+0x5348d]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2195a:	mov    ecx,DWORD PTR [rax+0x1b0]
   21960:	xor    eax,eax
   21962:	call   4500 <__fprintf_chk@plt>
   21967:	mov    rax,QWORD PTR [rip+0x66c3a]        # 885a8 <stats>
   2196e:	mov    esi,0x1
   21973:	mov    rdi,rbp
   21976:	lea    rdx,[rip+0x5346a]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   2197d:	mov    ecx,DWORD PTR [rax+0x88]
   21983:	xor    eax,eax
   21985:	call   4500 <__fprintf_chk@plt>
   2198a:	mov    rax,QWORD PTR [rip+0x66c17]        # 885a8 <stats>
   21991:	mov    esi,0x1
   21996:	mov    rdi,rbp
   21999:	lea    rdx,[rip+0x53447]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   219a0:	mov    ecx,DWORD PTR [rax+0x1b4]
   219a6:	xor    eax,eax
   219a8:	call   4500 <__fprintf_chk@plt>
   219ad:	mov    rax,QWORD PTR [rip+0x66bf4]        # 885a8 <stats>
   219b4:	mov    esi,0x1
   219b9:	mov    rdi,rbp
   219bc:	lea    rdx,[rip+0x53424]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   219c3:	mov    ecx,DWORD PTR [rax+0x8c]
   219c9:	xor    eax,eax
   219cb:	call   4500 <__fprintf_chk@plt>
   219d0:	mov    rax,QWORD PTR [rip+0x66bd1]        # 885a8 <stats>
   219d7:	mov    esi,0x1
   219dc:	mov    rdi,rbp
   219df:	lea    rdx,[rip+0x53401]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   219e6:	mov    ecx,DWORD PTR [rax+0x1b8]
   219ec:	xor    eax,eax
   219ee:	call   4500 <__fprintf_chk@plt>
   219f3:	mov    rax,QWORD PTR [rip+0x66bae]        # 885a8 <stats>
   219fa:	mov    esi,0x1
   219ff:	mov    rdi,rbp
   21a02:	lea    rdx,[rip+0x533de]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21a09:	mov    ecx,DWORD PTR [rax+0x90]
   21a0f:	xor    eax,eax
   21a11:	call   4500 <__fprintf_chk@plt>
   21a16:	mov    rax,QWORD PTR [rip+0x66b8b]        # 885a8 <stats>
   21a1d:	mov    esi,0x1
   21a22:	mov    rdi,rbp
   21a25:	lea    rdx,[rip+0x533bb]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21a2c:	mov    ecx,DWORD PTR [rax+0x1bc]
   21a32:	xor    eax,eax
   21a34:	call   4500 <__fprintf_chk@plt>
   21a39:	mov    rax,QWORD PTR [rip+0x66b68]        # 885a8 <stats>
   21a40:	mov    esi,0x1
   21a45:	mov    rdi,rbp
   21a48:	lea    rdx,[rip+0x53398]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21a4f:	mov    ecx,DWORD PTR [rax+0x334]
   21a55:	xor    eax,eax
   21a57:	sub    ecx,DWORD PTR [rip+0x6713f]        # 88b9c <last_mode_use.6692+0x5c>
   21a5d:	call   4500 <__fprintf_chk@plt>
   21a62:	mov    rax,QWORD PTR [rip+0x66b3f]        # 885a8 <stats>
   21a69:	mov    esi,0x1
   21a6e:	mov    rdi,rbp
   21a71:	lea    rdx,[rip+0x5336f]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21a78:	mov    ecx,DWORD PTR [rax+0x2c]
   21a7b:	add    ecx,DWORD PTR [rax+0x28]
   21a7e:	xor    eax,eax
   21a80:	sub    ecx,DWORD PTR [rip+0x67086]        # 88b0c <last_b8_mode_0.6693+0xc>
   21a86:	sub    ecx,DWORD PTR [rip+0x6707c]        # 88b08 <last_b8_mode_0.6693+0x8>
   21a8c:	call   4500 <__fprintf_chk@plt>
   21a91:	mov    rax,QWORD PTR [rip+0x66b10]        # 885a8 <stats>
   21a98:	mov    esi,0x1
   21a9d:	mov    rdi,rbp
   21aa0:	lea    rdx,[rip+0x53340]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21aa7:	mov    ecx,DWORD PTR [rax+0x2c]
   21aaa:	xor    eax,eax
   21aac:	sub    ecx,DWORD PTR [rip+0x6705a]        # 88b0c <last_b8_mode_0.6693+0xc>
   21ab2:	call   4500 <__fprintf_chk@plt>
   21ab7:	mov    rax,QWORD PTR [rip+0x66aea]        # 885a8 <stats>
   21abe:	mov    esi,0x1
   21ac3:	mov    rdi,rbp
   21ac6:	lea    rdx,[rip+0x5331a]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21acd:	mov    ecx,DWORD PTR [rax+0x28]
   21ad0:	xor    eax,eax
   21ad2:	sub    ecx,DWORD PTR [rip+0x67030]        # 88b08 <last_b8_mode_0.6693+0x8>
   21ad8:	call   4500 <__fprintf_chk@plt>
   21add:	mov    rax,QWORD PTR [rip+0x66ac4]        # 885a8 <stats>
   21ae4:	mov    esi,0x1
   21ae9:	mov    rdi,rbp
   21aec:	lea    rdx,[rip+0x532f4]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21af3:	mov    ecx,DWORD PTR [rax+0x324]
   21af9:	sub    ecx,DWORD PTR [rip+0x6708d]        # 88b8c <last_mode_use.6692+0x4c>
   21aff:	xor    eax,eax
   21b01:	call   4500 <__fprintf_chk@plt>
   21b06:	mov    rax,QWORD PTR [rip+0x66a9b]        # 885a8 <stats>
   21b0d:	mov    esi,0x1
   21b12:	mov    rdi,rbp
   21b15:	lea    rdx,[rip+0x532cb]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21b1c:	mov    ecx,DWORD PTR [rax+0x94]
   21b22:	xor    eax,eax
   21b24:	call   4500 <__fprintf_chk@plt>
   21b29:	mov    rax,QWORD PTR [rip+0x66a78]        # 885a8 <stats>
   21b30:	mov    esi,0x1
   21b35:	mov    rdi,rbp
   21b38:	lea    rdx,[rip+0x532a8]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21b3f:	mov    ecx,DWORD PTR [rax+0x1c0]
   21b45:	xor    eax,eax
   21b47:	call   4500 <__fprintf_chk@plt>
   21b4c:	mov    rax,QWORD PTR [rip+0x66a55]        # 885a8 <stats>
   21b53:	mov    esi,0x1
   21b58:	mov    rdi,rbp
   21b5b:	lea    rdx,[rip+0x53285]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21b62:	mov    ecx,DWORD PTR [rax+0x328]
   21b68:	xor    eax,eax
   21b6a:	sub    ecx,DWORD PTR [rip+0x67020]        # 88b90 <last_mode_use.6692+0x50>
   21b70:	call   4500 <__fprintf_chk@plt>
   21b75:	mov    rax,QWORD PTR [rip+0x66a2c]        # 885a8 <stats>
   21b7c:	mov    esi,0x1
   21b81:	mov    rdi,rbp
   21b84:	lea    rdx,[rip+0x5325c]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21b8b:	mov    ecx,DWORD PTR [rax+0x32c]
   21b91:	xor    eax,eax
   21b93:	sub    ecx,DWORD PTR [rip+0x66ffb]        # 88b94 <last_mode_use.6692+0x54>
   21b99:	call   4500 <__fprintf_chk@plt>
   21b9e:	mov    rax,QWORD PTR [rip+0x66a03]        # 885a8 <stats>
   21ba5:	mov    esi,0x1
   21baa:	mov    rdi,rbp
   21bad:	lea    rdx,[rip+0x53233]        # 74de7 <ONE_FOURTH_TAP+0x13c7>
   21bb4:	mov    ecx,DWORD PTR [rax+0x330]
   21bba:	xor    eax,eax
   21bbc:	sub    ecx,DWORD PTR [rip+0x66fd6]        # 88b98 <last_mode_use.6692+0x58>
   21bc2:	call   4500 <__fprintf_chk@plt>
   21bc7:	mov    rsi,rbp
   21bca:	mov    edi,0xa
   21bcf:	call   43e0 <fputc@plt>
   21bd4:	mov    rdi,QWORD PTR [rip+0x669cd]        # 885a8 <stats>
   21bdb:	lea    rdx,[rip+0x66f5e]        # 88b40 <last_mode_use.6692>
   21be2:	lea    rsi,[rdx+0x3c]
   21be6:	mov    eax,DWORD PTR [rdi+0x384]
   21bec:	mov    DWORD PTR [rip+0x66ffa],eax        # 88bec <last_mode_use.6692+0xac>
   21bf2:	mov    rax,QWORD PTR [rdi+0x374]
   21bf9:	mov    QWORD PTR [rip+0x66fdc],rax        # 88bdc <last_mode_use.6692+0x9c>
   21c00:	lea    rax,[rdi+0x48]
   21c04:	nop    DWORD PTR [rax+0x0]
   21c08:	mov    ecx,DWORD PTR [rax+0x290]
   21c0e:	add    rdx,0x4
   21c12:	add    rax,0x4
   21c16:	mov    DWORD PTR [rdx-0x4],ecx
   21c19:	mov    ecx,DWORD PTR [rax+0x2c8]
   21c1f:	mov    DWORD PTR [rdx+0x38],ecx
   21c22:	mov    DWORD PTR [rax-0x4],0x0
   21c29:	mov    DWORD PTR [rax+0x38],0x0
   21c30:	mov    DWORD PTR [rax+0x128],0x0
   21c3a:	mov    DWORD PTR [rax+0x164],0x0
   21c44:	cmp    rdx,rsi
   21c47:	jne    21c08 <report_frame_statistic+0xa78>
   21c49:	mov    DWORD PTR [rip+0x924e9],0x0        # b413c <frame_statistic_start>
   21c53:	mov    rax,QWORD PTR [rdi+0x28]
   21c57:	mov    QWORD PTR [rip+0x66eaa],rax        # 88b08 <last_b8_mode_0.6693+0x8>
   21c5e:	mov    rax,QWORD PTR [rdi+0x2a0]
   21c65:	mov    QWORD PTR [rip+0x66ec4],rax        # 88b30 <last_mode_chroma_use.6694>
   21c6c:	mov    rax,QWORD PTR [rdi+0x2a8]
   21c73:	mov    rdi,rbp
   21c76:	mov    QWORD PTR [rip+0x66ebb],rax        # 88b38 <last_mode_chroma_use.6694+0x8>
   21c7d:	call   4370 <fclose@plt>
   21c82:	mov    rax,QWORD PTR [rsp+0x418]
   21c8a:	xor    rax,QWORD PTR fs:0x28
   21c93:	jne    21dc1 <report_frame_statistic+0xc31>
   21c99:	add    rsp,0x428
   21ca0:	pop    rbx
   21ca1:	pop    rbp
   21ca2:	pop    r12
   21ca4:	pop    r13
   21ca6:	pop    r14
   21ca8:	pop    r15
   21caa:	ret    
   21cab:	nop    DWORD PTR [rax+rax*1+0x0]
   21cb0:	mov    eax,DWORD PTR [rax+0x14]
   21cb3:	mov    ecx,eax
   21cb5:	sub    ecx,DWORD PTR [rip+0x66fb1]        # 88c6c <last_bit_ctr_n.6695>
   21cbb:	mov    DWORD PTR [rip+0x66fab],eax        # 88c6c <last_bit_ctr_n.6695>
   21cc1:	jmp    2139b <report_frame_statistic+0x20b>
   21cc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21cd0:	mov    rcx,rbp
   21cd3:	mov    edx,0x1d4
   21cd8:	mov    esi,0x1
   21cdd:	lea    rdi,[rip+0x52354]        # 74038 <ONE_FOURTH_TAP+0x618>
   21ce4:	call   44f0 <fwrite@plt>
   21ce9:	mov    rcx,rbp
   21cec:	mov    edx,0x1d4
   21cf1:	mov    esi,0x1
   21cf6:	lea    rdi,[rip+0x51f8b]        # 73c88 <ONE_FOURTH_TAP+0x268>
   21cfd:	call   44f0 <fwrite@plt>
   21d02:	jmp    21209 <report_frame_statistic+0x79>
   21d07:	nop    WORD PTR [rax+rax*1+0x0]
   21d10:	lea    rsi,[rip+0x49f95]        # 6bcac <maxpos+0x9ac>
   21d17:	lea    rdi,[rip+0x53049]        # 74d67 <ONE_FOURTH_TAP+0x1347>
   21d1e:	call   44c0 <fopen@plt>
   21d23:	mov    rbp,rax
   21d26:	test   rax,rax
   21d29:	je     21d80 <report_frame_statistic+0xbf0>
   21d2b:	mov    rcx,rax
   21d2e:	mov    edx,0x1d4
   21d33:	mov    esi,0x1
   21d38:	lea    rdi,[rip+0x51f49]        # 73c88 <ONE_FOURTH_TAP+0x268>
   21d3f:	call   44f0 <fwrite@plt>
   21d44:	mov    rcx,rbp
   21d47:	mov    edx,0x1d4
   21d4c:	mov    esi,0x1
   21d51:	lea    rdi,[rip+0x52108]        # 73e60 <ONE_FOURTH_TAP+0x440>
   21d58:	call   44f0 <fwrite@plt>
   21d5d:	mov    rcx,rbp
   21d60:	mov    edx,0x1d4
   21d65:	mov    esi,0x1
   21d6a:	lea    rdi,[rip+0x51f17]        # 73c88 <ONE_FOURTH_TAP+0x268>
   21d71:	call   44f0 <fwrite@plt>
   21d76:	jmp    211fb <report_frame_statistic+0x6b>
   21d7b:	nop    DWORD PTR [rax+rax*1+0x0]
   21d80:	lea    r9,[rip+0x52fef]        # 74d76 <ONE_FOURTH_TAP+0x1356>
   21d87:	lea    r8,[rip+0x51cf0]        # 73a7e <ONE_FOURTH_TAP+0x5e>
   21d8e:	mov    ecx,0x12c
   21d93:	xor    eax,eax
   21d95:	mov    edx,0x1
   21d9a:	mov    esi,0x12c
   21d9f:	lea    rdi,[rip+0x931fa]        # b4fa0 <errortext>
   21da6:	call   42c0 <__snprintf_chk@plt>
   21dab:	mov    esi,0x1f4
   21db0:	lea    rdi,[rip+0x931e9]        # b4fa0 <errortext>
   21db7:	call   19180 <error>
   21dbc:	jmp    211fb <report_frame_statistic+0x6b>
   21dc1:	call   4390 <__stack_chk_fail@plt>
   21dc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000021dd0 <report>:
   21dd0:	endbr64 
   21dd4:	push   r14
   21dd6:	pxor   xmm0,xmm0
   21dda:	pxor   xmm1,xmm1
   21dde:	pxor   xmm2,xmm2
   21de2:	push   r13
   21de4:	mov    esi,0x1
   21de9:	lea    rdi,[rip+0x51e18]        # 73c08 <ONE_FOURTH_TAP+0x1e8>
   21df0:	push   r12
   21df2:	push   rbp
   21df3:	push   rbx
   21df4:	sub    rsp,0x60
   21df8:	mov    rcx,QWORD PTR [rip+0x667b9]        # 885b8 <input>
   21dff:	mov    rdx,QWORD PTR [rip+0x667a2]        # 885a8 <stats>
   21e06:	mov    rax,QWORD PTR fs:0x28
   21e0f:	mov    QWORD PTR [rsp+0x58],rax
   21e14:	xor    eax,eax
   21e16:	mov    eax,DWORD PTR [rcx+0x4d4]
   21e1c:	cvtsi2ss xmm2,DWORD PTR [rdx+0x2c0]
   21e24:	add    eax,0x1
   21e27:	cvtsi2ss xmm0,eax
   21e2b:	mov    rax,QWORD PTR [rip+0x6677e]        # 885b0 <img>
   21e32:	mulss  xmm0,DWORD PTR [rax+0x30]
   21e37:	mov    eax,DWORD PTR [rcx+0x14]
   21e3a:	add    eax,0x1
   21e3d:	cvtsi2ss xmm1,eax
   21e41:	mov    eax,DWORD PTR [rcx+0x8]
   21e44:	add    eax,DWORD PTR [rip+0x94022]        # b5e6c <Bframe_ctr>
   21e4a:	mov    rcx,QWORD PTR [rip+0x66a2f]        # 88880 <stdout@@GLIBC_2.2.5>
   21e51:	divss  xmm0,xmm1
   21e55:	pxor   xmm1,xmm1
   21e59:	cvtsi2ss xmm1,eax
   21e5d:	mulss  xmm2,xmm0
   21e61:	divss  xmm2,xmm1
   21e65:	movss  DWORD PTR [rdx+0x2cc],xmm2
   21e6d:	pxor   xmm2,xmm2
   21e71:	cvtsi2ss xmm2,DWORD PTR [rdx+0x2c4]
   21e79:	mulss  xmm2,xmm0
   21e7d:	divss  xmm2,xmm1
   21e81:	movss  DWORD PTR [rdx+0x2d0],xmm2
   21e89:	pxor   xmm2,xmm2
   21e8d:	cvtsi2ss xmm2,DWORD PTR [rdx+0x2c8]
   21e95:	mulss  xmm0,xmm2
   21e99:	divss  xmm0,xmm1
   21e9d:	movss  DWORD PTR [rdx+0x2d4],xmm0
   21ea5:	mov    edx,0x50
   21eaa:	call   44f0 <fwrite@plt>
   21eaf:	mov    rax,QWORD PTR [rip+0x66702]        # 885b8 <input>
   21eb6:	pxor   xmm1,xmm1
   21eba:	mov    rdi,QWORD PTR [rip+0x669bf]        # 88880 <stdout@@GLIBC_2.2.5>
   21ec1:	lea    rdx,[rip+0x52348]        # 74210 <ONE_FOURTH_TAP+0x7f0>
   21ec8:	mov    esi,0x1
   21ecd:	mov    eax,DWORD PTR [rax+0x14]
   21ed0:	add    eax,0x1
   21ed3:	cvtsi2ss xmm1,eax
   21ed7:	mov    rax,QWORD PTR [rip+0x666d2]        # 885b0 <img>
   21ede:	movss  xmm0,DWORD PTR [rax+0x30]
   21ee3:	mov    eax,0x1
   21ee8:	divss  xmm0,xmm1
   21eec:	cvtss2sd xmm0,xmm0
   21ef0:	call   4500 <__fprintf_chk@plt>
   21ef5:	mov    rax,QWORD PTR [rip+0x666bc]        # 885b8 <input>
   21efc:	mov    rcx,QWORD PTR [rip+0x6697d]        # 88880 <stdout@@GLIBC_2.2.5>
   21f03:	mov    r9d,DWORD PTR [rax+0x18]
   21f07:	test   r9d,r9d
   21f0a:	je     227a0 <report+0x9d0>
   21f10:	mov    r8d,DWORD PTR [rax+0x1c]
   21f14:	test   r8d,r8d
   21f17:	jne    22238 <report+0x468>
   21f1d:	mov    edx,0x2a
   21f22:	mov    esi,0x1
   21f27:	lea    rdi,[rip+0x5234a]        # 74278 <ONE_FOURTH_TAP+0x858>
   21f2e:	call   44f0 <fwrite@plt>
   21f33:	mov    rax,QWORD PTR [rip+0x6667e]        # 885b8 <input>
   21f3a:	mov    rdi,QWORD PTR [rip+0x6693f]        # 88880 <stdout@@GLIBC_2.2.5>
   21f41:	mov    esi,0x1
   21f46:	lea    rdx,[rip+0x5238b]        # 742d8 <ONE_FOURTH_TAP+0x8b8>
   21f4d:	mov    ecx,DWORD PTR [rax+0x40]
   21f50:	mov    r8d,DWORD PTR [rax+0x44]
   21f54:	xor    eax,eax
   21f56:	call   4500 <__fprintf_chk@plt>
   21f5b:	mov    rax,QWORD PTR [rip+0x66656]        # 885b8 <input>
   21f62:	mov    rcx,QWORD PTR [rip+0x66917]        # 88880 <stdout@@GLIBC_2.2.5>
   21f69:	mov    edi,DWORD PTR [rax+0x4c]
   21f6c:	test   edi,edi
   21f6e:	je     22258 <report+0x488>
   21f74:	mov    edx,0x28
   21f79:	mov    esi,0x1
   21f7e:	lea    rdi,[rip+0x52383]        # 74308 <ONE_FOURTH_TAP+0x8e8>
   21f85:	call   44f0 <fwrite@plt>
   21f8a:	mov    rax,QWORD PTR [rip+0x66627]        # 885b8 <input>
   21f91:	mov    rdi,QWORD PTR [rip+0x668e8]        # 88880 <stdout@@GLIBC_2.2.5>
   21f98:	mov    esi,0x1
   21f9d:	lea    rdx,[rip+0x523c4]        # 74368 <ONE_FOURTH_TAP+0x948>
   21fa4:	mov    ecx,DWORD PTR [rax+0x20]
   21fa7:	xor    eax,eax
   21fa9:	call   4500 <__fprintf_chk@plt>
   21fae:	mov    rax,QWORD PTR [rip+0x66603]        # 885b8 <input>
   21fb5:	mov    esi,0x1
   21fba:	mov    rdi,QWORD PTR [rip+0x668bf]        # 88880 <stdout@@GLIBC_2.2.5>
   21fc1:	lea    rdx,[rip+0x523d0]        # 74398 <ONE_FOURTH_TAP+0x978>
   21fc8:	mov    ecx,DWORD PTR [rax+0x24]
   21fcb:	xor    eax,eax
   21fcd:	call   4500 <__fprintf_chk@plt>
   21fd2:	mov    rax,QWORD PTR [rip+0x665df]        # 885b8 <input>
   21fd9:	mov    ecx,DWORD PTR [rax+0x28]
   21fdc:	test   ecx,ecx
   21fde:	jne    21fe3 <report+0x213>
   21fe0:	mov    ecx,DWORD PTR [rax+0x24]
   21fe3:	mov    rdi,QWORD PTR [rip+0x66896]        # 88880 <stdout@@GLIBC_2.2.5>
   21fea:	mov    esi,0x1
   21fef:	lea    rdx,[rip+0x523d2]        # 743c8 <ONE_FOURTH_TAP+0x9a8>
   21ff6:	xor    eax,eax
   21ff8:	call   4500 <__fprintf_chk@plt>
   21ffd:	mov    rax,QWORD PTR [rip+0x665b4]        # 885b8 <input>
   22004:	mov    esi,DWORD PTR [rax+0x4d4]
   2200a:	test   esi,esi
   2200c:	je     2205d <report+0x28d>
   2200e:	mov    ecx,DWORD PTR [rax+0x2c]
   22011:	test   ecx,ecx
   22013:	jne    22018 <report+0x248>
   22015:	mov    ecx,DWORD PTR [rax+0x24]
   22018:	mov    rdi,QWORD PTR [rip+0x66861]        # 88880 <stdout@@GLIBC_2.2.5>
   2201f:	lea    rdx,[rip+0x523d2]        # 743f8 <ONE_FOURTH_TAP+0x9d8>
   22026:	mov    esi,0x1
   2202b:	xor    eax,eax
   2202d:	call   4500 <__fprintf_chk@plt>
   22032:	mov    rax,QWORD PTR [rip+0x6657f]        # 885b8 <input>
   22039:	mov    ecx,DWORD PTR [rax+0x30]
   2203c:	test   ecx,ecx
   2203e:	jne    22043 <report+0x273>
   22040:	mov    ecx,DWORD PTR [rax+0x24]
   22043:	mov    rdi,QWORD PTR [rip+0x66836]        # 88880 <stdout@@GLIBC_2.2.5>
   2204a:	lea    rdx,[rip+0x523d7]        # 74428 <ONE_FOURTH_TAP+0xa08>
   22051:	mov    esi,0x1
   22056:	xor    eax,eax
   22058:	call   4500 <__fprintf_chk@plt>
   2205d:	pxor   xmm0,xmm0
   22061:	mov    esi,0x1
   22066:	mov    eax,0x1
   2206b:	mov    rdi,QWORD PTR [rip+0x6680e]        # 88880 <stdout@@GLIBC_2.2.5>
   22072:	cvtsi2sd xmm0,DWORD PTR [rip+0x94736]        # b67b0 <tot_time>
   2207a:	mulsd  xmm0,QWORD PTR [rip+0x52e9e]        # 74f20 <mb_width_cr.6670+0x10>
   22082:	lea    rdx,[rip+0x523cf]        # 74458 <ONE_FOURTH_TAP+0xa38>
   22089:	call   4500 <__fprintf_chk@plt>
   2208e:	pxor   xmm0,xmm0
   22092:	mov    esi,0x1
   22097:	mov    rdi,QWORD PTR [rip+0x667e2]        # 88880 <stdout@@GLIBC_2.2.5>
   2209e:	cvtsi2sd xmm0,DWORD PTR [rip+0x9207a]        # b4120 <me_tot_time>
   220a6:	mulsd  xmm0,QWORD PTR [rip+0x52e72]        # 74f20 <mb_width_cr.6670+0x10>
   220ae:	mov    eax,0x1
   220b3:	lea    rdx,[rip+0x523ce]        # 74488 <ONE_FOURTH_TAP+0xa68>
   220ba:	call   4500 <__fprintf_chk@plt>
   220bf:	mov    edx,0x24
   220c4:	mov    rcx,QWORD PTR [rip+0x667b5]        # 88880 <stdout@@GLIBC_2.2.5>
   220cb:	mov    esi,0x1
   220d0:	lea    rdi,[rip+0x523e1]        # 744b8 <ONE_FOURTH_TAP+0xa98>
   220d7:	call   44f0 <fwrite@plt>
   220dc:	mov    r13,QWORD PTR [rip+0x664d5]        # 885b8 <input>
   220e3:	mov    eax,DWORD PTR [r13+0x4d4]
   220ea:	test   eax,eax
   220ec:	jle    22278 <report+0x4a8>
   220f2:	mov    ecx,DWORD PTR [r13+0x528]
   220f9:	mov    r12,QWORD PTR [rip+0x66780]        # 88880 <stdout@@GLIBC_2.2.5>
   22100:	test   ecx,ecx
   22102:	jne    22920 <report+0xb50>
   22108:	mov    edx,0x49
   2210d:	mov    ebp,0x2
   22112:	mov    r10,rsp
   22115:	mov    ebx,0x4f
   2211a:	mov    WORD PTR [rsp],dx
   2211e:	xor    r14d,r14d
   22121:	test   eax,eax
   22123:	jg     2214f <report+0x37f>
   22125:	jmp    221c0 <report+0x3f0>
   2212a:	nop    WORD PTR [rax+rax*1+0x0]
   22130:	mov    rdi,r10
   22133:	lea    rsi,[rip+0x52cb3]        # 74ded <ONE_FOURTH_TAP+0x13cd>
   2213a:	add    r14d,0x1
   2213e:	call   4510 <__strncat_chk@plt>
   22143:	mov    r10,rax
   22146:	cmp    DWORD PTR [r13+0x4d4],r14d
   2214d:	jle    221c0 <report+0x3f0>
   2214f:	mov    rdx,r10
   22152:	mov    ecx,DWORD PTR [rdx]
   22154:	add    rdx,0x4
   22158:	lea    eax,[rcx-0x1010101]
   2215e:	not    ecx
   22160:	and    eax,ecx
   22162:	and    eax,0x80808080
   22167:	je     22152 <report+0x382>
   22169:	mov    ecx,eax
   2216b:	shr    ecx,0x10
   2216e:	test   eax,0x8080
   22173:	cmove  eax,ecx
   22176:	lea    rcx,[rdx+0x2]
   2217a:	cmove  rdx,rcx
   2217e:	mov    ecx,0x50
   22183:	mov    esi,eax
   22185:	add    sil,al
   22188:	mov    eax,ebx
   2218a:	sbb    rdx,0x3
   2218e:	sub    rdx,r10
   22191:	sub    eax,edx
   22193:	mov    rdx,rax
   22196:	mov    eax,DWORD PTR [r13+0x524]
   2219d:	test   eax,eax
   2219f:	jne    22130 <report+0x360>
   221a1:	mov    rdi,r10
   221a4:	lea    rsi,[rip+0x52c46]        # 74df1 <ONE_FOURTH_TAP+0x13d1>
   221ab:	add    r14d,0x1
   221af:	call   4510 <__strncat_chk@plt>
   221b4:	mov    r10,rax
   221b7:	cmp    DWORD PTR [r13+0x4d4],r14d
   221be:	jg     2214f <report+0x37f>
   221c0:	mov    rdx,r10
   221c3:	mov    ecx,DWORD PTR [rdx]
   221c5:	add    rdx,0x4
   221c9:	lea    eax,[rcx-0x1010101]
   221cf:	not    ecx
   221d1:	and    eax,ecx
   221d3:	and    eax,0x80808080
   221d8:	je     221c3 <report+0x3f3>
   221da:	mov    ecx,eax
   221dc:	lea    rsi,[rip+0x52c11]        # 74df4 <ONE_FOURTH_TAP+0x13d4>
   221e3:	shr    ecx,0x10
   221e6:	test   eax,0x8080
   221eb:	cmove  eax,ecx
   221ee:	lea    rcx,[rdx+0x2]
   221f2:	cmove  rdx,rcx
   221f6:	mov    ecx,0x50
   221fb:	mov    edi,eax
   221fd:	add    dil,al
   22200:	mov    eax,ebx
   22202:	mov    rdi,r10
   22205:	sbb    rdx,0x3
   22209:	sub    rdx,r10
   2220c:	sub    eax,edx
   2220e:	mov    rdx,rax
   22211:	call   4510 <__strncat_chk@plt>
   22216:	mov    r10,rax
   22219:	cmp    ebp,0x1
   2221c:	je     226d8 <report+0x908>
   22222:	mov    eax,DWORD PTR [r13+0x4d4]
   22229:	mov    ebp,0x1
   2222e:	jmp    2211e <report+0x34e>
   22233:	nop    DWORD PTR [rax+rax*1+0x0]
   22238:	mov    edx,0x33
   2223d:	mov    esi,0x1
   22242:	lea    rdi,[rip+0x51ff7]        # 74240 <ONE_FOURTH_TAP+0x820>
   22249:	call   44f0 <fwrite@plt>
   2224e:	jmp    21f33 <report+0x163>
   22253:	nop    DWORD PTR [rax+rax*1+0x0]
   22258:	mov    edx,0x29
   2225d:	mov    esi,0x1
   22262:	lea    rdi,[rip+0x520cf]        # 74338 <ONE_FOURTH_TAP+0x918>
   22269:	call   44f0 <fwrite@plt>
   2226e:	jmp    21f8a <report+0x1ba>
   22273:	nop    DWORD PTR [rax+rax*1+0x0]
   22278:	mov    r8d,DWORD PTR [r13+0x10]
   2227c:	mov    ecx,DWORD PTR [r13+0xc]
   22280:	mov    rdi,QWORD PTR [rip+0x665f9]        # 88880 <stdout@@GLIBC_2.2.5>
   22287:	jne    22298 <report+0x4c8>
   22289:	mov    ebx,DWORD PTR [r13+0x4f8]
   22290:	test   ebx,ebx
   22292:	je     22950 <report+0xb80>
   22298:	mov    eax,DWORD PTR [r13+0x500]
   2229f:	sub    rsp,0x8
   222a3:	mov    r9d,DWORD PTR [r13+0x4fc]
   222aa:	lea    rdx,[rip+0x52257]        # 74508 <ONE_FOURTH_TAP+0xae8>
   222b1:	mov    esi,0x1
   222b6:	push   rax
   222b7:	xor    eax,eax
   222b9:	call   4500 <__fprintf_chk@plt>
   222be:	pop    r10
   222c0:	pop    r11
   222c2:	mov    rax,QWORD PTR [rip+0x662ef]        # 885b8 <input>
   222c9:	mov    edx,0x2b
   222ce:	mov    esi,0x1
   222d3:	mov    rcx,QWORD PTR [rip+0x665a6]        # 88880 <stdout@@GLIBC_2.2.5>
   222da:	mov    r9d,DWORD PTR [rax+0x934]
   222e1:	test   r9d,r9d
   222e4:	jne    22680 <report+0x8b0>
   222ea:	lea    rdi,[rip+0x52247]        # 74538 <ONE_FOURTH_TAP+0xb18>
   222f1:	call   44f0 <fwrite@plt>
   222f6:	mov    rax,QWORD PTR [rip+0x662bb]        # 885b8 <input>
   222fd:	mov    rdi,QWORD PTR [rip+0x6657c]        # 88880 <stdout@@GLIBC_2.2.5>
   22304:	mov    esi,0x1
   22309:	lea    rdx,[rip+0x52288]        # 74598 <ONE_FOURTH_TAP+0xb78>
   22310:	mov    ecx,DWORD PTR [rax]
   22312:	mov    r8d,DWORD PTR [rax+0x4]
   22316:	xor    eax,eax
   22318:	call   4500 <__fprintf_chk@plt>
   2231d:	mov    rax,QWORD PTR [rip+0x66294]        # 885b8 <input>
   22324:	mov    rcx,QWORD PTR [rip+0x66555]        # 88880 <stdout@@GLIBC_2.2.5>
   2232b:	mov    eax,DWORD PTR [rax+0x984]
   22331:	cmp    eax,0x2
   22334:	je     228d0 <report+0xb00>
   2233a:	cmp    eax,0x1
   2233d:	je     228b0 <report+0xae0>
   22343:	mov    edx,0x4f
   22348:	mov    esi,0x1
   2234d:	lea    rdi,[rip+0x522e4]        # 74638 <ONE_FOURTH_TAP+0xc18>
   22354:	call   44f0 <fwrite@plt>
   22359:	mov    rax,QWORD PTR [rip+0x66258]        # 885b8 <input>
   22360:	mov    rcx,QWORD PTR [rip+0x66519]        # 88880 <stdout@@GLIBC_2.2.5>
   22367:	mov    r8d,DWORD PTR [rax+0x9a0]
   2236e:	test   r8d,r8d
   22371:	je     226b8 <report+0x8e8>
   22377:	mov    edx,0x2a
   2237c:	mov    esi,0x1
   22381:	lea    rdi,[rip+0x52300]        # 74688 <ONE_FOURTH_TAP+0xc68>
   22388:	call   44f0 <fwrite@plt>
   2238d:	mov    rax,QWORD PTR [rip+0x66224]        # 885b8 <input>
   22394:	mov    rcx,QWORD PTR [rip+0x664e5]        # 88880 <stdout@@GLIBC_2.2.5>
   2239b:	mov    eax,DWORD PTR [rax+0x93c]
   223a1:	test   eax,eax
   223a3:	je     22780 <report+0x9b0>
   223a9:	cmp    eax,0x1
   223ac:	je     22740 <report+0x970>
   223b2:	mov    edx,0x33
   223b7:	mov    esi,0x1
   223bc:	lea    rdi,[rip+0x52395]        # 74758 <ONE_FOURTH_TAP+0xd38>
   223c3:	call   44f0 <fwrite@plt>
   223c8:	mov    rax,QWORD PTR [rip+0x661e9]        # 885b8 <input>
   223cf:	mov    rcx,QWORD PTR [rip+0x664aa]        # 88880 <stdout@@GLIBC_2.2.5>
   223d6:	mov    eax,DWORD PTR [rax+0x938]
   223dc:	test   eax,eax
   223de:	je     22720 <report+0x950>
   223e4:	cmp    eax,0x1
   223e7:	je     22760 <report+0x990>
   223ed:	mov    edx,0x33
   223f2:	mov    esi,0x1
   223f7:	lea    rdi,[rip+0x5241a]        # 74818 <ONE_FOURTH_TAP+0xdf8>
   223fe:	call   44f0 <fwrite@plt>
   22403:	mov    rax,QWORD PTR [rip+0x661ae]        # 885b8 <input>
   2240a:	mov    rcx,QWORD PTR [rip+0x6646f]        # 88880 <stdout@@GLIBC_2.2.5>
   22411:	mov    edi,DWORD PTR [rax+0xd00]
   22417:	test   edi,edi
   22419:	je     22698 <report+0x8c8>
   2241f:	mov    edx,0x2a
   22424:	mov    esi,0x1
   22429:	lea    rdi,[rip+0x52420]        # 74850 <ONE_FOURTH_TAP+0xe30>
   22430:	call   44f0 <fwrite@plt>
   22435:	mov    rcx,QWORD PTR [rip+0x66444]        # 88880 <stdout@@GLIBC_2.2.5>
   2243c:	mov    edx,0x50
   22441:	mov    esi,0x1
   22446:	lea    rdi,[rip+0x52463]        # 748b0 <ONE_FOURTH_TAP+0xe90>
   2244d:	call   44f0 <fwrite@plt>
   22452:	mov    rax,QWORD PTR [rip+0x66147]        # 885a0 <snr>
   22459:	pxor   xmm0,xmm0
   2245d:	mov    rdi,QWORD PTR [rip+0x6641c]        # 88880 <stdout@@GLIBC_2.2.5>
   22464:	lea    rdx,[rip+0x5249d]        # 74908 <ONE_FOURTH_TAP+0xee8>
   2246b:	mov    esi,0x1
   22470:	cvtss2sd xmm0,DWORD PTR [rax+0x3c]
   22475:	mov    eax,0x1
   2247a:	call   4500 <__fprintf_chk@plt>
   2247f:	mov    rax,QWORD PTR [rip+0x6611a]        # 885a0 <snr>
   22486:	pxor   xmm0,xmm0
   2248a:	mov    rdi,QWORD PTR [rip+0x663ef]        # 88880 <stdout@@GLIBC_2.2.5>
   22491:	lea    rdx,[rip+0x524a0]        # 74938 <ONE_FOURTH_TAP+0xf18>
   22498:	mov    esi,0x1
   2249d:	cvtss2sd xmm0,DWORD PTR [rax+0x40]
   224a2:	mov    eax,0x1
   224a7:	call   4500 <__fprintf_chk@plt>
   224ac:	mov    rax,QWORD PTR [rip+0x660ed]        # 885a0 <snr>
   224b3:	pxor   xmm0,xmm0
   224b7:	mov    rdi,QWORD PTR [rip+0x663c2]        # 88880 <stdout@@GLIBC_2.2.5>
   224be:	mov    esi,0x1
   224c3:	lea    rdx,[rip+0x5249e]        # 74968 <ONE_FOURTH_TAP+0xf48>
   224ca:	cvtss2sd xmm0,DWORD PTR [rax+0x44]
   224cf:	mov    eax,0x1
   224d4:	call   4500 <__fprintf_chk@plt>
   224d9:	mov    esi,DWORD PTR [rip+0x9398d]        # b5e6c <Bframe_ctr>
   224df:	mov    rax,QWORD PTR [rip+0x660c2]        # 885a8 <stats>
   224e6:	test   esi,esi
   224e8:	jne    22810 <report+0xa40>
   224ee:	mov    edx,DWORD PTR [rax+0x5d0]
   224f4:	mov    r9d,DWORD PTR [rax+0x2c4]
   224fb:	sub    rsp,0x8
   224ff:	mov    esi,0x1
   22504:	mov    r8d,DWORD PTR [rax+0x2c0]
   2250b:	mov    rdi,QWORD PTR [rip+0x6636e]        # 88880 <stdout@@GLIBC_2.2.5>
   22512:	xor    eax,eax
   22514:	push   rdx
   22515:	lea    ebx,[r9+r8*1]
   22519:	add    ebx,edx
   2251b:	lea    rdx,[rip+0x524ee]        # 74a10 <ONE_FOURTH_TAP+0xff0>
   22522:	mov    ecx,ebx
   22524:	call   4500 <__fprintf_chk@plt>
   22529:	mov    rdx,QWORD PTR [rip+0x66088]        # 885b8 <input>
   22530:	pxor   xmm1,xmm1
   22534:	pxor   xmm2,xmm2
   22538:	mov    eax,DWORD PTR [rdx+0x14]
   2253b:	cvtsi2ss xmm2,DWORD PTR [rdx+0x8]
   22540:	add    eax,0x1
   22543:	cvtsi2ss xmm1,eax
   22547:	mov    rax,QWORD PTR [rip+0x66062]        # 885b0 <img>
   2254e:	movss  xmm0,DWORD PTR [rax+0x30]
   22553:	divss  xmm0,xmm1
   22557:	pxor   xmm1,xmm1
   2255b:	cvtsi2ss xmm1,ebx
   2255f:	mulss  xmm1,xmm0
   22563:	divss  xmm1,xmm2
   22567:	mov    esi,0x1
   2256c:	cvtss2sd xmm0,xmm0
   22570:	mov    rax,QWORD PTR [rip+0x66031]        # 885a8 <stats>
   22577:	mov    rdi,QWORD PTR [rip+0x66302]        # 88880 <stdout@@GLIBC_2.2.5>
   2257e:	lea    rdx,[rip+0x5245b]        # 749e0 <ONE_FOURTH_TAP+0xfc0>
   22585:	movss  DWORD PTR [rax+0xc],xmm1
   2258a:	mov    eax,0x2
   2258f:	divss  xmm1,DWORD PTR [rip+0x52999]        # 74f30 <mb_width_cr.6670+0x20>
   22597:	cvtss2sd xmm1,xmm1
   2259b:	call   4500 <__fprintf_chk@plt>
   225a0:	pop    rax
   225a1:	mov    esi,0x1
   225a6:	pop    rdx
   225a7:	mov    rax,QWORD PTR [rip+0x65ffa]        # 885a8 <stats>
   225ae:	mov    rdi,QWORD PTR [rip+0x662cb]        # 88880 <stdout@@GLIBC_2.2.5>
   225b5:	lea    rdx,[rip+0x5249c]        # 74a58 <ONE_FOURTH_TAP+0x1038>
   225bc:	mov    ecx,DWORD PTR [rax+0x1c]
   225bf:	xor    eax,eax
   225c1:	call   4500 <__fprintf_chk@plt>
   225c6:	mov    rax,QWORD PTR [rip+0x65fdb]        # 885a8 <stats>
   225cd:	mov    esi,0x1
   225d2:	mov    rdi,QWORD PTR [rip+0x662a7]        # 88880 <stdout@@GLIBC_2.2.5>
   225d9:	lea    rdx,[rip+0x524a8]        # 74a88 <ONE_FOURTH_TAP+0x1068>
   225e0:	mov    ecx,DWORD PTR [rax+0x5d0]
   225e6:	xor    eax,eax
   225e8:	call   4500 <__fprintf_chk@plt>
   225ed:	mov    edx,0x50
   225f2:	mov    rcx,QWORD PTR [rip+0x66287]        # 88880 <stdout@@GLIBC_2.2.5>
   225f9:	mov    esi,0x1
   225fe:	lea    rdi,[rip+0x51603]        # 73c08 <ONE_FOURTH_TAP+0x1e8>
   22605:	call   44f0 <fwrite@plt>
   2260a:	mov    rdi,QWORD PTR [rip+0x6626f]        # 88880 <stdout@@GLIBC_2.2.5>
   22611:	xor    eax,eax
   22613:	lea    rcx,[rip+0x52831]        # 74e4b <ONE_FOURTH_TAP+0x142b>
   2261a:	lea    r8,[rip+0x52768]        # 74d89 <ONE_FOURTH_TAP+0x1369>
   22621:	lea    rdx,[rip+0x5282d]        # 74e55 <ONE_FOURTH_TAP+0x1435>
   22628:	mov    esi,0x1
   2262d:	call   4500 <__fprintf_chk@plt>
   22632:	mov    rsi,QWORD PTR [rip+0x66247]        # 88880 <stdout@@GLIBC_2.2.5>
   22639:	mov    edi,0xa
   2263e:	call   43e0 <fputc@plt>
   22643:	mov    rax,QWORD PTR [rip+0x65f6e]        # 885b8 <input>
   2264a:	mov    ecx,DWORD PTR [rax+0xc9c]
   22650:	test   ecx,ecx
   22652:	jne    227c0 <report+0x9f0>
   22658:	mov    rax,QWORD PTR [rsp+0x58]
   2265d:	xor    rax,QWORD PTR fs:0x28
   22666:	jne    229a0 <report+0xbd0>
   2266c:	add    rsp,0x60
   22670:	pop    rbx
   22671:	pop    rbp
   22672:	pop    r12
   22674:	pop    r13
   22676:	pop    r14
   22678:	ret    
   22679:	nop    DWORD PTR [rax+0x0]
   22680:	lea    rdi,[rip+0x51ee1]        # 74568 <ONE_FOURTH_TAP+0xb48>
   22687:	call   44f0 <fwrite@plt>
   2268c:	jmp    222f6 <report+0x526>
   22691:	nop    DWORD PTR [rax+0x0]
   22698:	mov    edx,0x2e
   2269d:	mov    esi,0x1
   226a2:	lea    rdi,[rip+0x521d7]        # 74880 <ONE_FOURTH_TAP+0xe60>
   226a9:	call   44f0 <fwrite@plt>
   226ae:	jmp    22435 <report+0x665>
   226b3:	nop    DWORD PTR [rax+rax*1+0x0]
   226b8:	mov    edx,0x2e
   226bd:	mov    esi,0x1
   226c2:	lea    rdi,[rip+0x51fef]        # 746b8 <ONE_FOURTH_TAP+0xc98>
   226c9:	call   44f0 <fwrite@plt>
   226ce:	jmp    2238d <report+0x5bd>
   226d3:	nop    DWORD PTR [rax+rax*1+0x0]
   226d8:	mov    r14d,DWORD PTR [r13+0x524]
   226df:	mov    eax,DWORD PTR [r13+0x4d8]
   226e6:	mov    r9d,DWORD PTR [r13+0x10]
   226ea:	mov    r8d,DWORD PTR [r13+0xc]
   226ee:	test   r14d,r14d
   226f1:	jne    228f0 <report+0xb20>
   226f7:	sub    rsp,0x8
   226fb:	mov    rcx,r10
   226fe:	lea    rdx,[rip+0x52710]        # 74e15 <ONE_FOURTH_TAP+0x13f5>
   22705:	push   rax
   22706:	mov    rdi,r12
   22709:	mov    esi,0x1
   2270e:	xor    eax,eax
   22710:	call   4500 <__fprintf_chk@plt>
   22715:	pop    rbp
   22716:	pop    r12
   22718:	jmp    222c2 <report+0x4f2>
   2271d:	nop    DWORD PTR [rax]
   22720:	mov    edx,0x43
   22725:	mov    esi,0x1
   2272a:	lea    rdi,[rip+0x5205f]        # 74790 <ONE_FOURTH_TAP+0xd70>
   22731:	call   44f0 <fwrite@plt>
   22736:	jmp    22403 <report+0x633>
   2273b:	nop    DWORD PTR [rax+rax*1+0x0]
   22740:	mov    edx,0x33
   22745:	mov    esi,0x1
   2274a:	lea    rdi,[rip+0x51fcf]        # 74720 <ONE_FOURTH_TAP+0xd00>
   22751:	call   44f0 <fwrite@plt>
   22756:	jmp    223c8 <report+0x5f8>
   2275b:	nop    DWORD PTR [rax+rax*1+0x0]
   22760:	mov    edx,0x3d
   22765:	mov    esi,0x1
   2276a:	lea    rdi,[rip+0x52067]        # 747d8 <ONE_FOURTH_TAP+0xdb8>
   22771:	call   44f0 <fwrite@plt>
   22776:	jmp    22403 <report+0x633>
   2277b:	nop    DWORD PTR [rax+rax*1+0x0]
   22780:	mov    edx,0x32
   22785:	mov    esi,0x1
   2278a:	lea    rdi,[rip+0x51f57]        # 746e8 <ONE_FOURTH_TAP+0xcc8>
   22791:	call   44f0 <fwrite@plt>
   22796:	jmp    223c8 <report+0x5f8>
   2279b:	nop    DWORD PTR [rax+rax*1+0x0]
   227a0:	mov    edx,0x2e
   227a5:	mov    esi,0x1
   227aa:	lea    rdi,[rip+0x51af7]        # 742a8 <ONE_FOURTH_TAP+0x888>
   227b1:	call   44f0 <fwrite@plt>
   227b6:	jmp    21f33 <report+0x163>
   227bb:	nop    DWORD PTR [rax+rax*1+0x0]
   227c0:	lea    rsi,[rip+0x494e5]        # 6bcac <maxpos+0x9ac>
   227c7:	lea    rdi,[rip+0x52599]        # 74d67 <ONE_FOURTH_TAP+0x1347>
   227ce:	call   44c0 <fopen@plt>
   227d3:	mov    QWORD PTR [rip+0x91966],rax        # b4140 <p_log>
   227da:	mov    rcx,rax
   227dd:	test   rax,rax
   227e0:	je     22970 <report+0xba0>
   227e6:	mov    edx,0x1d4
   227eb:	mov    esi,0x1
   227f0:	lea    rdi,[rip+0x51491]        # 73c88 <ONE_FOURTH_TAP+0x268>
   227f7:	call   44f0 <fwrite@plt>
   227fc:	mov    rdi,QWORD PTR [rip+0x9193d]        # b4140 <p_log>
   22803:	call   4370 <fclose@plt>
   22808:	jmp    22658 <report+0x888>
   2280d:	nop    DWORD PTR [rax]
   22810:	mov    r9d,DWORD PTR [rax+0x2c4]
   22817:	mov    r8d,DWORD PTR [rax+0x2c0]
   2281e:	mov    esi,0x1
   22823:	mov    ecx,DWORD PTR [rax+0x5d0]
   22829:	mov    edx,DWORD PTR [rax+0x2c8]
   2282f:	xor    eax,eax
   22831:	lea    ebx,[r9+r8*1]
   22835:	mov    rdi,QWORD PTR [rip+0x66044]        # 88880 <stdout@@GLIBC_2.2.5>
   2283c:	push   rcx
   2283d:	add    ebx,edx
   2283f:	push   rdx
   22840:	add    ebx,ecx
   22842:	lea    rdx,[rip+0x5214f]        # 74998 <ONE_FOURTH_TAP+0xf78>
   22849:	mov    ecx,ebx
   2284b:	call   4500 <__fprintf_chk@plt>
   22850:	mov    rdx,QWORD PTR [rip+0x65d61]        # 885b8 <input>
   22857:	pxor   xmm0,xmm0
   2285b:	pxor   xmm1,xmm1
   2285f:	pxor   xmm2,xmm2
   22863:	mov    eax,DWORD PTR [rdx+0x4d4]
   22869:	add    eax,0x1
   2286c:	cvtsi2ss xmm0,eax
   22870:	mov    rax,QWORD PTR [rip+0x65d39]        # 885b0 <img>
   22877:	mulss  xmm0,DWORD PTR [rax+0x30]
   2287c:	mov    eax,DWORD PTR [rdx+0x14]
   2287f:	add    eax,0x1
   22882:	cvtsi2ss xmm1,eax
   22886:	mov    eax,DWORD PTR [rip+0x935e0]        # b5e6c <Bframe_ctr>
   2288c:	add    eax,DWORD PTR [rdx+0x8]
   2288f:	cvtsi2ss xmm2,eax
   22893:	divss  xmm0,xmm1
   22897:	pxor   xmm1,xmm1
   2289b:	cvtsi2ss xmm1,ebx
   2289f:	mulss  xmm1,xmm0
   228a3:	jmp    22563 <report+0x793>
   228a8:	nop    DWORD PTR [rax+rax*1+0x0]
   228b0:	mov    edx,0x3c
   228b5:	mov    esi,0x1
   228ba:	lea    rdi,[rip+0x51d37]        # 745f8 <ONE_FOURTH_TAP+0xbd8>
   228c1:	call   44f0 <fwrite@plt>
   228c6:	jmp    22359 <report+0x589>
   228cb:	nop    DWORD PTR [rax+rax*1+0x0]
   228d0:	mov    edx,0x2a
   228d5:	mov    esi,0x1
   228da:	lea    rdi,[rip+0x51ce7]        # 745c8 <ONE_FOURTH_TAP+0xba8>
   228e1:	call   44f0 <fwrite@plt>
   228e6:	jmp    22359 <report+0x589>
   228eb:	nop    DWORD PTR [rax+rax*1+0x0]
   228f0:	add    eax,DWORD PTR [r13+0x4dc]
   228f7:	sub    rsp,0x8
   228fb:	mov    edx,0x33
   22900:	mov    rcx,r10
   22903:	cmp    eax,0x33
   22906:	cmovg  eax,edx
   22909:	mov    edx,0x0
   2290e:	test   eax,eax
   22910:	cmovs  eax,edx
   22913:	lea    rdx,[rip+0x524dd]        # 74df7 <ONE_FOURTH_TAP+0x13d7>
   2291a:	push   rax
   2291b:	jmp    22706 <report+0x936>
   22920:	mov    ecx,DWORD PTR [r13+0xc]
   22924:	mov    r9d,DWORD PTR [r13+0x4d8]
   2292b:	mov    rdi,r12
   2292e:	xor    eax,eax
   22930:	mov    r8d,DWORD PTR [r13+0x10]
   22934:	lea    rdx,[rip+0x51ba5]        # 744e0 <ONE_FOURTH_TAP+0xac0>
   2293b:	mov    esi,0x1
   22940:	call   4500 <__fprintf_chk@plt>
   22945:	jmp    222c2 <report+0x4f2>
   2294a:	nop    WORD PTR [rax+rax*1+0x0]
   22950:	lea    rdx,[rip+0x524db]        # 74e32 <ONE_FOURTH_TAP+0x1412>
   22957:	mov    esi,0x1
   2295c:	xor    eax,eax
   2295e:	call   4500 <__fprintf_chk@plt>
   22963:	jmp    222c2 <report+0x4f2>
   22968:	nop    DWORD PTR [rax+rax*1+0x0]
   22970:	lea    r9,[rip+0x523ff]        # 74d76 <ONE_FOURTH_TAP+0x1356>
   22977:	lea    r8,[rip+0x51100]        # 73a7e <ONE_FOURTH_TAP+0x5e>
   2297e:	mov    ecx,0x12c
   22983:	xor    eax,eax
   22985:	mov    edx,0x1
   2298a:	mov    esi,0x12c
   2298f:	lea    rdi,[rip+0x9260a]        # b4fa0 <errortext>
   22996:	call   42c0 <__snprintf_chk@plt>
   2299b:	jmp    22658 <report+0x888>
   229a0:	call   4390 <__stack_chk_fail@plt>
   229a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000229b0 <information_init>:
   229b0:	endbr64 
   229b4:	sub    rsp,0x38
   229b8:	mov    edx,0x30
   229bd:	mov    ecx,0x32
   229c2:	mov    esi,0x34
   229c7:	mov    rax,QWORD PTR fs:0x28
   229d0:	mov    QWORD PTR [rsp+0x28],rax
   229d5:	xor    eax,eax
   229d7:	mov    edi,0x1
   229dc:	mov    WORD PTR [rsp+0x12],dx
   229e1:	movabs rax,0x3a303a3420565559
   229eb:	mov    QWORD PTR [rsp],rax
   229ef:	mov    eax,0x30
   229f4:	lea    rdx,[rip+0x5238e]        # 74d89 <ONE_FOURTH_TAP+0x1369>
   229fb:	mov    WORD PTR [rsp+0x8],ax
   22a00:	movabs rax,0x3a323a3420565559
   22a0a:	mov    QWORD PTR [rsp+0xa],rax
   22a0f:	mov    QWORD PTR [rsp+0x14],rax
   22a14:	movabs rax,0x3a343a3420565559
   22a1e:	mov    WORD PTR [rsp+0x1c],cx
   22a23:	lea    rcx,[rip+0x52423]        # 74e4d <ONE_FOURTH_TAP+0x142d>
   22a2a:	mov    QWORD PTR [rsp+0x1e],rax
   22a2f:	xor    eax,eax
   22a31:	mov    WORD PTR [rsp+0x26],si
   22a36:	lea    rsi,[rip+0x5207b]        # 74ab8 <ONE_FOURTH_TAP+0x1098>
   22a3d:	call   4490 <__printf_chk@plt>
   22a42:	mov    rax,QWORD PTR [rip+0x65b6f]        # 885b8 <input>
   22a49:	mov    edi,0x1
   22a4e:	lea    rsi,[rip+0x520b3]        # 74b08 <ONE_FOURTH_TAP+0x10e8>
   22a55:	lea    rdx,[rax+0xe0]
   22a5c:	xor    eax,eax
   22a5e:	call   4490 <__printf_chk@plt>
   22a63:	mov    rax,QWORD PTR [rip+0x65b4e]        # 885b8 <input>
   22a6a:	mov    edi,0x1
   22a6f:	lea    rsi,[rip+0x520c2]        # 74b38 <ONE_FOURTH_TAP+0x1118>
   22a76:	lea    rdx,[rax+0x1a8]
   22a7d:	xor    eax,eax
   22a7f:	call   4490 <__printf_chk@plt>
   22a84:	cmp    DWORD PTR [rip+0x93c69],0xffffffff        # b66f4 <p_dec>
   22a8b:	je     22aae <information_init+0xfe>
   22a8d:	mov    rax,QWORD PTR [rip+0x65b24]        # 885b8 <input>
   22a94:	lea    rsi,[rip+0x520cd]        # 74b68 <ONE_FOURTH_TAP+0x1148>
   22a9b:	mov    edi,0x1
   22aa0:	lea    rdx,[rax+0x270]
   22aa7:	xor    eax,eax
   22aa9:	call   4490 <__printf_chk@plt>
   22aae:	mov    rax,QWORD PTR [rip+0x65afb]        # 885b0 <img>
   22ab5:	lea    rsi,[rip+0x520dc]        # 74b98 <ONE_FOURTH_TAP+0x1178>
   22abc:	mov    edi,0x1
   22ac1:	movsxd rax,DWORD PTR [rax+0x11bfc]
   22ac8:	lea    rax,[rax+rax*4]
   22acc:	lea    rdx,[rsp+rax*2]
   22ad0:	xor    eax,eax
   22ad2:	call   4490 <__printf_chk@plt>
   22ad7:	mov    rax,QWORD PTR [rip+0x65ada]        # 885b8 <input>
   22ade:	mov    edi,0x1
   22ae3:	lea    rsi,[rip+0x520de]        # 74bc8 <ONE_FOURTH_TAP+0x11a8>
   22aea:	mov    edx,DWORD PTR [rax+0x8]
   22aed:	lea    ecx,[rdx-0x1]
   22af0:	imul   ecx,DWORD PTR [rax+0x4d4]
   22af7:	xor    eax,eax
   22af9:	call   4490 <__printf_chk@plt>
   22afe:	mov    rax,QWORD PTR [rip+0x65ab3]        # 885b8 <input>
   22b05:	mov    edi,0x1
   22b0a:	lea    rsi,[rip+0x520e7]        # 74bf8 <ONE_FOURTH_TAP+0x11d8>
   22b11:	mov    ecx,DWORD PTR [rax+0xb44]
   22b17:	mov    edx,DWORD PTR [rax+0xb40]
   22b1d:	xor    eax,eax
   22b1f:	call   4490 <__printf_chk@plt>
   22b24:	mov    rax,QWORD PTR [rip+0x65a8d]        # 885b8 <input>
   22b2b:	mov    edi,0x1
   22b30:	lea    rsi,[rip+0x520f1]        # 74c28 <ONE_FOURTH_TAP+0x1208>
   22b37:	mov    edx,DWORD PTR [rax+0xc94]
   22b3d:	xor    eax,eax
   22b3f:	call   4490 <__printf_chk@plt>
   22b44:	lea    rdi,[rip+0x5210d]        # 74c58 <ONE_FOURTH_TAP+0x1238>
   22b4b:	call   4320 <puts@plt>
   22b50:	lea    rdi,[rip+0x52151]        # 74ca8 <ONE_FOURTH_TAP+0x1288>
   22b57:	call   4320 <puts@plt>
   22b5c:	lea    rdi,[rip+0x520f5]        # 74c58 <ONE_FOURTH_TAP+0x1238>
   22b63:	call   4320 <puts@plt>
   22b68:	mov    rax,QWORD PTR [rsp+0x28]
   22b6d:	xor    rax,QWORD PTR fs:0x28
   22b76:	jne    22b7d <information_init+0x1cd>
   22b78:	add    rsp,0x38
   22b7c:	ret    
   22b7d:	call   4390 <__stack_chk_fail@plt>
   22b82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   22b8d:	nop    DWORD PTR [rax]

0000000000022b90 <init_orig_buffers>:
   22b90:	endbr64 
   22b94:	mov    rax,QWORD PTR [rip+0x65a15]        # 885b0 <img>
   22b9b:	push   r12
   22b9d:	lea    rdi,[rip+0x9169c]        # b4240 <imgY_org_frm>
   22ba4:	mov    edx,DWORD PTR [rax+0x34]
   22ba7:	mov    esi,DWORD PTR [rax+0x3c]
   22baa:	call   38320 <get_mem2Dpel>
   22baf:	mov    r12d,eax
   22bb2:	mov    rax,QWORD PTR [rip+0x659f7]        # 885b0 <img>
   22bb9:	mov    ecx,DWORD PTR [rax+0x11bfc]
   22bbf:	test   ecx,ecx
   22bc1:	jne    22be0 <init_orig_buffers+0x50>
   22bc3:	mov    rax,QWORD PTR [rip+0x932a6]        # b5e70 <active_sps>
   22bca:	mov    edx,DWORD PTR [rax+0x47c]
   22bd0:	test   edx,edx
   22bd2:	je     22c00 <init_orig_buffers+0x70>
   22bd4:	mov    eax,r12d
   22bd7:	pop    r12
   22bd9:	ret    
   22bda:	nop    WORD PTR [rax+rax*1+0x0]
   22be0:	mov    ecx,DWORD PTR [rax+0x38]
   22be3:	mov    edx,DWORD PTR [rax+0x40]
   22be6:	mov    esi,0x2
   22beb:	lea    rdi,[rip+0x7b676]        # 9e268 <imgUV_org_frm>
   22bf2:	call   383e0 <get_mem3Dpel>
   22bf7:	add    r12d,eax
   22bfa:	jmp    22bc3 <init_orig_buffers+0x33>
   22bfc:	nop    DWORD PTR [rax+0x0]
   22c00:	mov    rax,QWORD PTR [rip+0x659a9]        # 885b0 <img>
   22c07:	mov    rdi,QWORD PTR [rip+0x91632]        # b4240 <imgY_org_frm>
   22c0e:	lea    r8,[rip+0x93273]        # b5e88 <imgY_org_bot>
   22c15:	lea    rcx,[rip+0x93acc]        # b66e8 <imgY_org_top>
   22c1c:	mov    edx,DWORD PTR [rax+0x34]
   22c1f:	mov    esi,DWORD PTR [rax+0x3c]
   22c22:	call   38260 <init_top_bot_planes>
   22c27:	mov    rax,QWORD PTR [rip+0x65982]        # 885b0 <img>
   22c2e:	mov    eax,DWORD PTR [rax+0x11bfc]
   22c34:	test   eax,eax
   22c36:	je     22bd4 <init_orig_buffers+0x44>
   22c38:	mov    esi,0x8
   22c3d:	mov    edi,0x2
   22c42:	call   4400 <calloc@plt>
   22c47:	mov    QWORD PTR [rip+0x7c442],rax        # 9f090 <imgUV_org_top>
   22c4e:	test   rax,rax
   22c51:	je     22cdb <init_orig_buffers+0x14b>
   22c57:	mov    esi,0x8
   22c5c:	mov    edi,0x2
   22c61:	call   4400 <calloc@plt>
   22c66:	mov    QWORD PTR [rip+0x93213],rax        # b5e80 <imgUV_org_bot>
   22c6d:	mov    r8,rax
   22c70:	test   rax,rax
   22c73:	je     22cec <init_orig_buffers+0x15c>
   22c75:	mov    rax,QWORD PTR [rip+0x65934]        # 885b0 <img>
   22c7c:	mov    rcx,QWORD PTR [rip+0x7c40d]        # 9f090 <imgUV_org_top>
   22c83:	add    r12d,0x20
   22c87:	mov    edx,DWORD PTR [rax+0x38]
   22c8a:	mov    esi,DWORD PTR [rax+0x40]
   22c8d:	mov    rax,QWORD PTR [rip+0x7b5d4]        # 9e268 <imgUV_org_frm>
   22c94:	mov    rdi,QWORD PTR [rax]
   22c97:	call   38260 <init_top_bot_planes>
   22c9c:	mov    rcx,QWORD PTR [rip+0x7c3ed]        # 9f090 <imgUV_org_top>
   22ca3:	add    r12d,eax
   22ca6:	mov    rax,QWORD PTR [rip+0x65903]        # 885b0 <img>
   22cad:	add    rcx,0x8
   22cb1:	mov    edx,DWORD PTR [rax+0x38]
   22cb4:	mov    esi,DWORD PTR [rax+0x40]
   22cb7:	mov    rax,QWORD PTR [rip+0x7b5aa]        # 9e268 <imgUV_org_frm>
   22cbe:	mov    rdi,QWORD PTR [rax+0x8]
   22cc2:	mov    rax,QWORD PTR [rip+0x931b7]        # b5e80 <imgUV_org_bot>
   22cc9:	lea    r8,[rax+0x8]
   22ccd:	call   38260 <init_top_bot_planes>
   22cd2:	add    r12d,eax
   22cd5:	mov    eax,r12d
   22cd8:	pop    r12
   22cda:	ret    
   22cdb:	lea    rdi,[rip+0x52016]        # 74cf8 <ONE_FOURTH_TAP+0x12d8>
   22ce2:	call   38210 <no_mem_exit>
   22ce7:	jmp    22c57 <init_orig_buffers+0xc7>
   22cec:	lea    rdi,[rip+0x5202d]        # 74d20 <ONE_FOURTH_TAP+0x1300>
   22cf3:	call   38210 <no_mem_exit>
   22cf8:	mov    r8,QWORD PTR [rip+0x93181]        # b5e80 <imgUV_org_bot>
   22cff:	jmp    22c75 <init_orig_buffers+0xe5>
   22d04:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   22d0f:	nop

0000000000022d10 <init_global_buffers>:
   22d10:	endbr64 
   22d14:	mov    rax,QWORD PTR [rip+0x65895]        # 885b0 <img>
   22d1b:	push   r12
   22d1d:	push   rbp
   22d1e:	push   rbx
   22d1f:	mov    edi,DWORD PTR [rax+0x24]
   22d22:	add    edi,edi
   22d24:	movsxd rdi,edi
   22d27:	shl    rdi,0x2
   22d2b:	call   4460 <malloc@plt>
   22d30:	mov    QWORD PTR [rip+0x67c89],rax        # 8a9c0 <last_P_no_frm>
   22d37:	test   rax,rax
   22d3a:	je     231a5 <init_global_buffers+0x495>
   22d40:	mov    rax,QWORD PTR [rip+0x93129]        # b5e70 <active_sps>
   22d47:	mov    ebp,DWORD PTR [rax+0x47c]
   22d4d:	test   ebp,ebp
   22d4f:	je     22f08 <init_global_buffers+0x1f8>
   22d55:	xor    eax,eax
   22d57:	call   22b90 <init_orig_buffers>
   22d5c:	mov    r12d,eax
   22d5f:	mov    rax,QWORD PTR [rip+0x65852]        # 885b8 <input>
   22d66:	mov    ebx,DWORD PTR [rax+0x504]
   22d6c:	test   ebx,ebx
   22d6e:	jne    22d80 <init_global_buffers+0x70>
   22d70:	mov    r11d,DWORD PTR [rax+0x508]
   22d77:	test   r11d,r11d
   22d7a:	je     22ef0 <init_global_buffers+0x1e0>
   22d80:	mov    ecx,0x3
   22d85:	mov    edx,0xf
   22d8a:	mov    esi,0x6
   22d8f:	lea    rdi,[rip+0x7e072]        # a0e08 <wp_weight>
   22d96:	call   38740 <get_mem3Dint>
   22d9b:	mov    ecx,0x3
   22da0:	mov    edx,0xf
   22da5:	mov    esi,0x6
   22daa:	lea    rdi,[rip+0x9137f]        # b4130 <wp_offset>
   22db1:	add    r12d,eax
   22db4:	call   38740 <get_mem3Dint>
   22db9:	mov    r8d,0x3
   22dbf:	mov    ecx,0xf
   22dc4:	mov    edx,0xf
   22dc9:	mov    esi,0x6
   22dce:	lea    rdi,[rip+0x91383]        # b4158 <wbp_weight>
   22dd5:	add    r12d,eax
   22dd8:	call   38880 <get_mem4Dint>
   22ddd:	add    r12d,eax
   22de0:	mov    rax,QWORD PTR [rip+0x657d1]        # 885b8 <input>
   22de7:	mov    r9d,DWORD PTR [rax+0x4d4]
   22dee:	test   r9d,r9d
   22df1:	jne    22dff <init_global_buffers+0xef>
   22df3:	mov    r8d,DWORD PTR [rax+0x524]
   22dfa:	test   r8d,r8d
   22dfd:	jle    22e68 <init_global_buffers+0x158>
   22dff:	mov    rdx,QWORD PTR [rip+0x657aa]        # 885b0 <img>
   22e06:	mov    esi,0x2
   22e0b:	lea    rdi,[rip+0x7c286]        # 9f098 <direct_ref_idx>
   22e12:	mov    eax,DWORD PTR [rdx+0x3c]
   22e15:	test   eax,eax
   22e17:	lea    ecx,[rax+0x3]
   22e1a:	cmovns ecx,eax
   22e1d:	mov    eax,DWORD PTR [rdx+0x34]
   22e20:	sar    ecx,0x2
   22e23:	lea    edx,[rax+0x3]
   22e26:	test   eax,eax
   22e28:	cmovns edx,eax
   22e2b:	sar    edx,0x2
   22e2e:	call   389e0 <get_mem3Dshort>
   22e33:	mov    rcx,QWORD PTR [rip+0x65776]        # 885b0 <img>
   22e3a:	lea    rdi,[rip+0x93037]        # b5e78 <direct_pdir>
   22e41:	add    r12d,eax
   22e44:	mov    eax,DWORD PTR [rcx+0x3c]
   22e47:	test   eax,eax
   22e49:	lea    edx,[rax+0x3]
   22e4c:	cmovns edx,eax
   22e4f:	mov    eax,DWORD PTR [rcx+0x34]
   22e52:	sar    edx,0x2
   22e55:	lea    esi,[rax+0x3]
   22e58:	test   eax,eax
   22e5a:	cmovns esi,eax
   22e5d:	sar    esi,0x2
   22e60:	call   38920 <get_mem2Dshort>
   22e65:	add    r12d,eax
   22e68:	mov    rax,QWORD PTR [rip+0x65741]        # 885b0 <img>
   22e6f:	lea    rdi,[rip+0x9454a]        # b73c0 <img4Y_tmp>
   22e76:	mov    edx,DWORD PTR [rax+0x34]
   22e79:	mov    esi,DWORD PTR [rax+0x3c]
   22e7c:	lea    edx,[rdx*4+0x20]
   22e83:	add    esi,0x8
   22e86:	call   38520 <get_mem2Dint>
   22e8b:	add    r12d,eax
   22e8e:	mov    rax,QWORD PTR [rip+0x65723]        # 885b8 <input>
   22e95:	cmp    DWORD PTR [rax+0x9a0],0x2
   22e9c:	je     23028 <init_global_buffers+0x318>
   22ea2:	mov    edi,DWORD PTR [rax+0xb5c]
   22ea8:	test   edi,edi
   22eaa:	jne    22fd0 <init_global_buffers+0x2c0>
   22eb0:	mov    rax,QWORD PTR [rip+0x92fb9]        # b5e70 <active_sps>
   22eb7:	mov    esi,DWORD PTR [rax+0x47c]
   22ebd:	test   esi,esi
   22ebf:	je     22f80 <init_global_buffers+0x270>
   22ec5:	mov    rax,QWORD PTR [rip+0x656ec]        # 885b8 <input>
   22ecc:	mov    edx,DWORD PTR [rax+0xcdc]
   22ed2:	test   edx,edx
   22ed4:	jne    22f60 <init_global_buffers+0x250>
   22eda:	mov    eax,DWORD PTR [rax+0xca4]
   22ee0:	test   eax,eax
   22ee2:	jne    22f48 <init_global_buffers+0x238>
   22ee4:	mov    eax,r12d
   22ee7:	pop    rbx
   22ee8:	pop    rbp
   22ee9:	pop    r12
   22eeb:	ret    
   22eec:	nop    DWORD PTR [rax+0x0]
   22ef0:	mov    r10d,DWORD PTR [rax+0x3c]
   22ef4:	test   r10d,r10d
   22ef7:	je     22de7 <init_global_buffers+0xd7>
   22efd:	jmp    22d80 <init_global_buffers+0x70>
   22f02:	nop    WORD PTR [rax+rax*1+0x0]
   22f08:	mov    rax,QWORD PTR [rip+0x656a1]        # 885b0 <img>
   22f0f:	mov    edi,DWORD PTR [rax+0x24]
   22f12:	shl    edi,0x2
   22f15:	movsxd rdi,edi
   22f18:	shl    rdi,0x2
   22f1c:	call   4460 <malloc@plt>
   22f21:	mov    QWORD PTR [rip+0x67a68],rax        # 8a990 <last_P_no_fld>
   22f28:	test   rax,rax
   22f2b:	jne    22d55 <init_global_buffers+0x45>
   22f31:	lea    rdi,[rip+0x51e10]        # 74d48 <ONE_FOURTH_TAP+0x1328>
   22f38:	call   38210 <no_mem_exit>
   22f3d:	jmp    22d55 <init_global_buffers+0x45>
   22f42:	nop    WORD PTR [rax+rax*1+0x0]
   22f48:	xor    eax,eax
   22f4a:	call   4ab80 <rc_alloc>
   22f4f:	mov    eax,r12d
   22f52:	pop    rbx
   22f53:	pop    rbp
   22f54:	pop    r12
   22f56:	ret    
   22f57:	nop    WORD PTR [rax+rax*1+0x0]
   22f60:	xor    eax,eax
   22f62:	call   16420 <get_mem_FME>
   22f67:	add    r12d,eax
   22f6a:	mov    rax,QWORD PTR [rip+0x65647]        # 885b8 <input>
   22f71:	jmp    22eda <init_global_buffers+0x1ca>
   22f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22f80:	mov    rax,QWORD PTR [rip+0x65629]        # 885b0 <img>
   22f87:	lea    rdi,[rip+0x92ed2]        # b5e60 <imgY_com>
   22f8e:	mov    edx,DWORD PTR [rax+0x34]
   22f91:	mov    esi,DWORD PTR [rax+0x3c]
   22f94:	call   38320 <get_mem2Dpel>
   22f99:	add    r12d,eax
   22f9c:	mov    rax,QWORD PTR [rip+0x6560d]        # 885b0 <img>
   22fa3:	mov    ecx,DWORD PTR [rax+0x11bfc]
   22fa9:	test   ecx,ecx
   22fab:	je     22ec5 <init_global_buffers+0x1b5>
   22fb1:	mov    ecx,DWORD PTR [rax+0x38]
   22fb4:	mov    edx,DWORD PTR [rax+0x40]
   22fb7:	mov    esi,0x2
   22fbc:	lea    rdi,[rip+0x91165]        # b4128 <imgUV_com>
   22fc3:	call   383e0 <get_mem3Dpel>
   22fc8:	add    r12d,eax
   22fcb:	jmp    22ec5 <init_global_buffers+0x1b5>
   22fd0:	mov    rax,QWORD PTR [rip+0x655d9]        # 885b0 <img>
   22fd7:	lea    rdi,[rip+0x932fa]        # b62d8 <pixel_map>
   22fde:	mov    edx,DWORD PTR [rax+0x34]
   22fe1:	mov    esi,DWORD PTR [rax+0x3c]
   22fe4:	call   38470 <get_mem2D>
   22fe9:	mov    rcx,QWORD PTR [rip+0x655c0]        # 885b0 <img>
   22ff0:	lea    rdi,[rip+0x91151]        # b4148 <refresh_map>
   22ff7:	add    r12d,eax
   22ffa:	mov    eax,DWORD PTR [rcx+0x34]
   22ffd:	test   eax,eax
   22fff:	lea    edx,[rax+0x7]
   23002:	cmovns edx,eax
   23005:	mov    eax,DWORD PTR [rcx+0x3c]
   23008:	sar    edx,0x3
   2300b:	lea    esi,[rax+0x7]
   2300e:	test   eax,eax
   23010:	cmovns esi,eax
   23013:	sar    esi,0x3
   23016:	call   38470 <get_mem2D>
   2301b:	add    r12d,eax
   2301e:	jmp    22eb0 <init_global_buffers+0x1a0>
   23023:	nop    DWORD PTR [rax+rax*1+0x0]
   23028:	mov    rdi,QWORD PTR [rip+0x65569]        # 88598 <decs>
   2302f:	mov    edx,0x10
   23034:	mov    esi,0x10
   23039:	call   38520 <get_mem2Dint>
   2303e:	mov    rbp,QWORD PTR [rip+0x65553]        # 88598 <decs>
   23045:	mov    esi,0x8
   2304a:	add    r12d,eax
   2304d:	mov    rax,QWORD PTR [rip+0x65564]        # 885b8 <input>
   23054:	movsxd rdi,DWORD PTR [rax+0xb58]
   2305b:	mov    rbx,rdi
   2305e:	call   4400 <calloc@plt>
   23063:	mov    QWORD PTR [rbp+0x10],rax
   23067:	test   rax,rax
   2306a:	je     231b6 <init_global_buffers+0x4a6>
   23070:	test   ebx,ebx
   23072:	jle    230bd <init_global_buffers+0x3ad>
   23074:	xor    ebx,ebx
   23076:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23080:	mov    rax,QWORD PTR [rip+0x65529]        # 885b0 <img>
   23087:	mov    esi,DWORD PTR [rax+0x24]
   2308a:	mov    ecx,DWORD PTR [rax+0x34]
   2308d:	mov    edx,DWORD PTR [rax+0x3c]
   23090:	mov    rax,QWORD PTR [rbp+0x10]
   23094:	add    esi,0x1
   23097:	lea    rdi,[rax+rbx*8]
   2309b:	add    rbx,0x1
   2309f:	call   383e0 <get_mem3Dpel>
   230a4:	mov    rbp,QWORD PTR [rip+0x654ed]        # 88598 <decs>
   230ab:	add    r12d,eax
   230ae:	mov    rax,QWORD PTR [rip+0x65503]        # 885b8 <input>
   230b5:	cmp    DWORD PTR [rax+0xb58],ebx
   230bb:	jg     23080 <init_global_buffers+0x370>
   230bd:	lea    rdi,[rbp+0x20]
   230c1:	mov    edx,0x4
   230c6:	mov    esi,0x4
   230cb:	call   38320 <get_mem2Dpel>
   230d0:	add    r12d,eax
   230d3:	mov    rax,QWORD PTR [rip+0x654d6]        # 885b0 <img>
   230da:	mov    ecx,DWORD PTR [rax+0x34]
   230dd:	mov    edx,DWORD PTR [rax+0x3c]
   230e0:	mov    rax,QWORD PTR [rip+0x654d1]        # 885b8 <input>
   230e7:	mov    esi,DWORD PTR [rax+0xb58]
   230ed:	mov    rax,QWORD PTR [rip+0x654a4]        # 88598 <decs>
   230f4:	lea    rdi,[rax+0x8]
   230f8:	call   383e0 <get_mem3Dpel>
   230fd:	add    r12d,eax
   23100:	mov    rax,QWORD PTR [rip+0x654a9]        # 885b0 <img>
   23107:	mov    ecx,DWORD PTR [rax+0x34]
   2310a:	mov    edx,DWORD PTR [rax+0x3c]
   2310d:	mov    rax,QWORD PTR [rip+0x654a4]        # 885b8 <input>
   23114:	mov    esi,DWORD PTR [rax+0xb58]
   2311a:	mov    rax,QWORD PTR [rip+0x65477]        # 88598 <decs>
   23121:	lea    rdi,[rax+0x18]
   23125:	call   383e0 <get_mem3Dpel>
   2312a:	mov    rcx,QWORD PTR [rip+0x6547f]        # 885b0 <img>
   23131:	add    r12d,eax
   23134:	mov    eax,DWORD PTR [rcx+0x34]
   23137:	test   eax,eax
   23139:	lea    edx,[rax+0xf]
   2313c:	cmovns edx,eax
   2313f:	mov    eax,DWORD PTR [rcx+0x3c]
   23142:	sar    edx,0x4
   23145:	lea    esi,[rax+0xf]
   23148:	test   eax,eax
   2314a:	cmovns esi,eax
   2314d:	mov    rax,QWORD PTR [rip+0x65444]        # 88598 <decs>
   23154:	sar    esi,0x4
   23157:	lea    rdi,[rax+0x28]
   2315b:	call   38470 <get_mem2D>
   23160:	mov    rcx,QWORD PTR [rip+0x65449]        # 885b0 <img>
   23167:	add    r12d,eax
   2316a:	mov    eax,DWORD PTR [rcx+0x3c]
   2316d:	test   eax,eax
   2316f:	lea    edx,[rax+0xf]
   23172:	cmovns edx,eax
   23175:	mov    eax,DWORD PTR [rcx+0x34]
   23178:	sar    edx,0x4
   2317b:	lea    esi,[rax+0xf]
   2317e:	test   eax,eax
   23180:	cmovns esi,eax
   23183:	mov    rax,QWORD PTR [rip+0x6540e]        # 88598 <decs>
   2318a:	sar    esi,0x4
   2318d:	lea    rdi,[rax+0x30]
   23191:	call   38470 <get_mem2D>
   23196:	add    r12d,eax
   23199:	mov    rax,QWORD PTR [rip+0x65418]        # 885b8 <input>
   231a0:	jmp    22ea2 <init_global_buffers+0x192>
   231a5:	lea    rdi,[rip+0x51b9c]        # 74d48 <ONE_FOURTH_TAP+0x1328>
   231ac:	call   38210 <no_mem_exit>
   231b1:	jmp    22d40 <init_global_buffers+0x30>
   231b6:	lea    rdi,[rip+0x51cb3]        # 74e70 <ONE_FOURTH_TAP+0x1450>
   231bd:	call   38210 <no_mem_exit>
   231c2:	mov    rax,QWORD PTR [rip+0x653ef]        # 885b8 <input>
   231c9:	mov    rbp,QWORD PTR [rip+0x653c8]        # 88598 <decs>
   231d0:	mov    ebx,DWORD PTR [rax+0xb58]
   231d6:	jmp    23070 <init_global_buffers+0x360>
   231db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000231e0 <free_orig_planes>:
   231e0:	endbr64 
   231e4:	sub    rsp,0x8
   231e8:	mov    rdi,QWORD PTR [rip+0x91051]        # b4240 <imgY_org_frm>
   231ef:	call   37ea0 <free_mem2Dpel>
   231f4:	mov    rax,QWORD PTR [rip+0x653b5]        # 885b0 <img>
   231fb:	mov    ecx,DWORD PTR [rax+0x11bfc]
   23201:	test   ecx,ecx
   23203:	jne    23220 <free_orig_planes+0x40>
   23205:	mov    rax,QWORD PTR [rip+0x92c64]        # b5e70 <active_sps>
   2320c:	mov    edx,DWORD PTR [rax+0x47c]
   23212:	test   edx,edx
   23214:	je     23238 <free_orig_planes+0x58>
   23216:	add    rsp,0x8
   2321a:	ret    
   2321b:	nop    DWORD PTR [rax+rax*1+0x0]
   23220:	mov    rdi,QWORD PTR [rip+0x7b041]        # 9e268 <imgUV_org_frm>
   23227:	mov    esi,0x2
   2322c:	call   37f00 <free_mem3Dpel>
   23231:	jmp    23205 <free_orig_planes+0x25>
   23233:	nop    DWORD PTR [rax+rax*1+0x0]
   23238:	mov    rsi,QWORD PTR [rip+0x92c49]        # b5e88 <imgY_org_bot>
   2323f:	mov    rdi,QWORD PTR [rip+0x934a2]        # b66e8 <imgY_org_top>
   23246:	call   37e80 <free_top_bot_planes>
   2324b:	mov    rax,QWORD PTR [rip+0x6535e]        # 885b0 <img>
   23252:	mov    eax,DWORD PTR [rax+0x11bfc]
   23258:	test   eax,eax
   2325a:	je     23216 <free_orig_planes+0x36>
   2325c:	mov    rax,QWORD PTR [rip+0x92c1d]        # b5e80 <imgUV_org_bot>
   23263:	mov    rsi,QWORD PTR [rax]
   23266:	mov    rax,QWORD PTR [rip+0x7be23]        # 9f090 <imgUV_org_top>
   2326d:	mov    rdi,QWORD PTR [rax]
   23270:	call   37e80 <free_top_bot_planes>
   23275:	mov    rax,QWORD PTR [rip+0x92c04]        # b5e80 <imgUV_org_bot>
   2327c:	mov    rsi,QWORD PTR [rax+0x8]
   23280:	mov    rax,QWORD PTR [rip+0x7be09]        # 9f090 <imgUV_org_top>
   23287:	mov    rdi,QWORD PTR [rax+0x8]
   2328b:	call   37e80 <free_top_bot_planes>
   23290:	mov    rdi,QWORD PTR [rip+0x7bdf9]        # 9f090 <imgUV_org_top>
   23297:	call   42d0 <free@plt>
   2329c:	mov    rdi,QWORD PTR [rip+0x92bdd]        # b5e80 <imgUV_org_bot>
   232a3:	add    rsp,0x8
   232a7:	jmp    42d0 <free@plt>
   232ac:	nop    DWORD PTR [rax+0x0]

00000000000232b0 <free_global_buffers>:
   232b0:	endbr64 
   232b4:	push   r12
   232b6:	mov    rdi,QWORD PTR [rip+0x67703]        # 8a9c0 <last_P_no_frm>
   232bd:	push   rbp
   232be:	push   rbx
   232bf:	call   42d0 <free@plt>
   232c4:	mov    rdi,QWORD PTR [rip+0x676c5]        # 8a990 <last_P_no_fld>
   232cb:	call   42d0 <free@plt>
   232d0:	xor    eax,eax
   232d2:	call   231e0 <free_orig_planes>
   232d7:	mov    rax,QWORD PTR [rip+0x652da]        # 885b8 <input>
   232de:	mov    edx,DWORD PTR [rax+0x504]
   232e4:	test   edx,edx
   232e6:	jne    232f8 <free_global_buffers+0x48>
   232e8:	mov    r12d,DWORD PTR [rax+0x508]
   232ef:	test   r12d,r12d
   232f2:	je     23438 <free_global_buffers+0x188>
   232f8:	mov    rdi,QWORD PTR [rip+0x7db09]        # a0e08 <wp_weight>
   232ff:	mov    esi,0x6
   23304:	call   380e0 <free_mem3Dint>
   23309:	mov    rdi,QWORD PTR [rip+0x90e20]        # b4130 <wp_offset>
   23310:	mov    esi,0x6
   23315:	call   380e0 <free_mem3Dint>
   2331a:	mov    edx,0xf
   2331f:	mov    esi,0x6
   23324:	mov    rdi,QWORD PTR [rip+0x90e2d]        # b4158 <wbp_weight>
   2332b:	call   381a0 <free_mem4Dint>
   23330:	mov    rax,QWORD PTR [rip+0x65281]        # 885b8 <input>
   23337:	mov    ebx,DWORD PTR [rax+0x4d4]
   2333d:	test   ebx,ebx
   2333f:	jne    2334d <free_global_buffers+0x9d>
   23341:	mov    r11d,DWORD PTR [rax+0x524]
   23348:	test   r11d,r11d
   2334b:	jle    2336a <free_global_buffers+0xba>
   2334d:	mov    rdi,QWORD PTR [rip+0x7bd44]        # 9f098 <direct_ref_idx>
   23354:	mov    esi,0x2
   23359:	call   38b70 <free_mem3Dshort>
   2335e:	mov    rdi,QWORD PTR [rip+0x92b13]        # b5e78 <direct_pdir>
   23365:	call   38b10 <free_mem2Dshort>
   2336a:	mov    rdi,QWORD PTR [rip+0x9404f]        # b73c0 <img4Y_tmp>
   23371:	call   37fc0 <free_mem2Dint>
   23376:	mov    rax,QWORD PTR [rip+0x65233]        # 885b0 <img>
   2337d:	mov    rdi,QWORD PTR [rax+0x68]
   23381:	call   37fc0 <free_mem2Dint>
   23386:	mov    rax,QWORD PTR [rip+0x65223]        # 885b0 <img>
   2338d:	mov    rdi,QWORD PTR [rax+0x70]
   23391:	call   37fc0 <free_mem2Dint>
   23396:	mov    rax,QWORD PTR [rip+0x65213]        # 885b0 <img>
   2339d:	mov    rdi,QWORD PTR [rax+0x3758]
   233a4:	call   42d0 <free@plt>
   233a9:	mov    rdi,QWORD PTR [rip+0x91af0]        # b4ea0 <rddata_top_frame_mb+0xc40>
   233b0:	call   37fc0 <free_mem2Dint>
   233b5:	mov    rax,QWORD PTR [rip+0x651fc]        # 885b8 <input>
   233bc:	mov    r10d,DWORD PTR [rax+0xd8]
   233c3:	test   r10d,r10d
   233c6:	jne    234f0 <free_global_buffers+0x240>
   233cc:	cmp    DWORD PTR [rax+0x9a0],0x2
   233d3:	je     23517 <free_global_buffers+0x267>
   233d9:	mov    edi,DWORD PTR [rax+0xb5c]
   233df:	test   edi,edi
   233e1:	jne    234b0 <free_global_buffers+0x200>
   233e7:	mov    rax,QWORD PTR [rip+0x92a82]        # b5e70 <active_sps>
   233ee:	mov    esi,DWORD PTR [rax+0x47c]
   233f4:	test   esi,esi
   233f6:	je     23470 <free_global_buffers+0x1c0>
   233f8:	mov    rax,QWORD PTR [rip+0x651b1]        # 885b0 <img>
   233ff:	mov    esi,DWORD PTR [rax+0x11b28]
   23405:	mov    rdi,QWORD PTR [rax+0x80]
   2340c:	call   380e0 <free_mem3Dint>
   23411:	mov    rax,QWORD PTR [rip+0x651a0]        # 885b8 <input>
   23418:	mov    edx,DWORD PTR [rax+0xcdc]
   2341e:	test   edx,edx
   23420:	jne    23460 <free_global_buffers+0x1b0>
   23422:	mov    eax,DWORD PTR [rax+0xca4]
   23428:	test   eax,eax
   2342a:	jne    23450 <free_global_buffers+0x1a0>
   2342c:	pop    rbx
   2342d:	pop    rbp
   2342e:	pop    r12
   23430:	ret    
   23431:	nop    DWORD PTR [rax+0x0]
   23438:	mov    ebp,DWORD PTR [rax+0x3c]
   2343b:	test   ebp,ebp
   2343d:	je     23337 <free_global_buffers+0x87>
   23443:	jmp    232f8 <free_global_buffers+0x48>
   23448:	nop    DWORD PTR [rax+rax*1+0x0]
   23450:	pop    rbx
   23451:	xor    eax,eax
   23453:	pop    rbp
   23454:	pop    r12
   23456:	jmp    4ad00 <rc_free>
   2345b:	nop    DWORD PTR [rax+rax*1+0x0]
   23460:	xor    eax,eax
   23462:	call   165e0 <free_mem_FME>
   23467:	mov    rax,QWORD PTR [rip+0x6514a]        # 885b8 <input>
   2346e:	jmp    23422 <free_global_buffers+0x172>
   23470:	mov    rdi,QWORD PTR [rip+0x929e9]        # b5e60 <imgY_com>
   23477:	call   37ea0 <free_mem2Dpel>
   2347c:	mov    rax,QWORD PTR [rip+0x6512d]        # 885b0 <img>
   23483:	mov    ecx,DWORD PTR [rax+0x11bfc]
   23489:	test   ecx,ecx
   2348b:	je     233ff <free_global_buffers+0x14f>
   23491:	mov    rdi,QWORD PTR [rip+0x90c90]        # b4128 <imgUV_com>
   23498:	mov    esi,0x2
   2349d:	call   37f00 <free_mem3Dpel>
   234a2:	jmp    233f8 <free_global_buffers+0x148>
   234a7:	nop    WORD PTR [rax+rax*1+0x0]
   234b0:	mov    rax,QWORD PTR [rip+0x92e21]        # b62d8 <pixel_map>
   234b7:	mov    rdi,QWORD PTR [rax]
   234ba:	call   42d0 <free@plt>
   234bf:	mov    rdi,QWORD PTR [rip+0x92e12]        # b62d8 <pixel_map>
   234c6:	call   42d0 <free@plt>
   234cb:	mov    rax,QWORD PTR [rip+0x90c76]        # b4148 <refresh_map>
   234d2:	mov    rdi,QWORD PTR [rax]
   234d5:	call   42d0 <free@plt>
   234da:	mov    rdi,QWORD PTR [rip+0x90c67]        # b4148 <refresh_map>
   234e1:	call   42d0 <free@plt>
   234e6:	jmp    233e7 <free_global_buffers+0x137>
   234eb:	nop    DWORD PTR [rax+rax*1+0x0]
   234f0:	mov    rax,QWORD PTR [rip+0x650b9]        # 885b0 <img>
   234f7:	mov    rdi,QWORD PTR [rax+0x11868]
   234fe:	call   42d0 <free@plt>
   23503:	mov    rax,QWORD PTR [rip+0x650ae]        # 885b8 <input>
   2350a:	cmp    DWORD PTR [rax+0x9a0],0x2
   23511:	jne    233d9 <free_global_buffers+0x129>
   23517:	mov    rax,QWORD PTR [rip+0x6507a]        # 88598 <decs>
   2351e:	xor    r12d,r12d
   23521:	mov    rax,QWORD PTR [rax]
   23524:	mov    rdi,QWORD PTR [rax]
   23527:	call   42d0 <free@plt>
   2352c:	mov    rax,QWORD PTR [rip+0x65065]        # 88598 <decs>
   23533:	mov    rdi,QWORD PTR [rax]
   23536:	call   42d0 <free@plt>
   2353b:	mov    rax,QWORD PTR [rip+0x65056]        # 88598 <decs>
   23542:	mov    rax,QWORD PTR [rax+0x20]
   23546:	mov    rdi,QWORD PTR [rax]
   23549:	call   42d0 <free@plt>
   2354e:	mov    rax,QWORD PTR [rip+0x65043]        # 88598 <decs>
   23555:	mov    rdi,QWORD PTR [rax+0x20]
   23559:	call   42d0 <free@plt>
   2355e:	mov    rax,QWORD PTR [rip+0x65053]        # 885b8 <input>
   23565:	mov    r9d,DWORD PTR [rax+0xb58]
   2356c:	test   r9d,r9d
   2356f:	jle    2365f <free_global_buffers+0x3af>
   23575:	nop    DWORD PTR [rax]
   23578:	mov    rax,QWORD PTR [rip+0x65019]        # 88598 <decs>
   2357f:	lea    rbp,[r12*8+0x0]
   23587:	xor    ebx,ebx
   23589:	mov    rax,QWORD PTR [rax+0x8]
   2358d:	mov    rax,QWORD PTR [rax+r12*8]
   23591:	mov    rdi,QWORD PTR [rax]
   23594:	call   42d0 <free@plt>
   23599:	mov    rax,QWORD PTR [rip+0x64ff8]        # 88598 <decs>
   235a0:	mov    rax,QWORD PTR [rax+0x8]
   235a4:	mov    rdi,QWORD PTR [rax+r12*8]
   235a8:	call   42d0 <free@plt>
   235ad:	mov    rax,QWORD PTR [rip+0x64fe4]        # 88598 <decs>
   235b4:	mov    rax,QWORD PTR [rax+0x18]
   235b8:	mov    rax,QWORD PTR [rax+r12*8]
   235bc:	mov    rdi,QWORD PTR [rax]
   235bf:	call   42d0 <free@plt>
   235c4:	mov    rax,QWORD PTR [rip+0x64fcd]        # 88598 <decs>
   235cb:	mov    rax,QWORD PTR [rax+0x18]
   235cf:	mov    rdi,QWORD PTR [rax+r12*8]
   235d3:	call   42d0 <free@plt>
   235d8:	mov    rax,QWORD PTR [rip+0x64fd1]        # 885b0 <img>
   235df:	mov    r8d,DWORD PTR [rax+0x24]
   235e3:	test   r8d,r8d
   235e6:	js     23633 <free_global_buffers+0x383>
   235e8:	nop    DWORD PTR [rax+rax*1+0x0]
   235f0:	mov    rax,QWORD PTR [rip+0x64fa1]        # 88598 <decs>
   235f7:	mov    rax,QWORD PTR [rax+0x10]
   235fb:	mov    rax,QWORD PTR [rax+rbp*1]
   235ff:	mov    rax,QWORD PTR [rax+rbx*8]
   23603:	mov    rdi,QWORD PTR [rax]
   23606:	call   42d0 <free@plt>
   2360b:	mov    rax,QWORD PTR [rip+0x64f86]        # 88598 <decs>
   23612:	mov    rax,QWORD PTR [rax+0x10]
   23616:	mov    rax,QWORD PTR [rax+rbp*1]
   2361a:	mov    rdi,QWORD PTR [rax+rbx*8]
   2361e:	add    rbx,0x1
   23622:	call   42d0 <free@plt>
   23627:	mov    rax,QWORD PTR [rip+0x64f82]        # 885b0 <img>
   2362e:	cmp    DWORD PTR [rax+0x24],ebx
   23631:	jge    235f0 <free_global_buffers+0x340>
   23633:	mov    rax,QWORD PTR [rip+0x64f5e]        # 88598 <decs>
   2363a:	add    r12,0x1
   2363e:	mov    rax,QWORD PTR [rax+0x10]
   23642:	mov    rdi,QWORD PTR [rax+rbp*1]
   23646:	call   42d0 <free@plt>
   2364b:	mov    rax,QWORD PTR [rip+0x64f66]        # 885b8 <input>
   23652:	cmp    DWORD PTR [rax+0xb58],r12d
   23659:	jg     23578 <free_global_buffers+0x2c8>
   2365f:	mov    rax,QWORD PTR [rip+0x64f32]        # 88598 <decs>
   23666:	mov    rdi,QWORD PTR [rax+0x8]
   2366a:	call   42d0 <free@plt>
   2366f:	mov    rax,QWORD PTR [rip+0x64f22]        # 88598 <decs>
   23676:	mov    rdi,QWORD PTR [rax+0x18]
   2367a:	call   42d0 <free@plt>
   2367f:	mov    rax,QWORD PTR [rip+0x64f12]        # 88598 <decs>
   23686:	mov    rdi,QWORD PTR [rax+0x10]
   2368a:	call   42d0 <free@plt>
   2368f:	mov    rax,QWORD PTR [rip+0x64f02]        # 88598 <decs>
   23696:	mov    rax,QWORD PTR [rax+0x28]
   2369a:	mov    rdi,QWORD PTR [rax]
   2369d:	call   42d0 <free@plt>
   236a2:	mov    rax,QWORD PTR [rip+0x64eef]        # 88598 <decs>
   236a9:	mov    rdi,QWORD PTR [rax+0x28]
   236ad:	call   42d0 <free@plt>
   236b2:	mov    rax,QWORD PTR [rip+0x64edf]        # 88598 <decs>
   236b9:	mov    rax,QWORD PTR [rax+0x30]
   236bd:	mov    rdi,QWORD PTR [rax]
   236c0:	call   42d0 <free@plt>
   236c5:	mov    rax,QWORD PTR [rip+0x64ecc]        # 88598 <decs>
   236cc:	mov    rdi,QWORD PTR [rax+0x30]
   236d0:	call   42d0 <free@plt>
   236d5:	mov    rax,QWORD PTR [rip+0x64edc]        # 885b8 <input>
   236dc:	jmp    233d9 <free_global_buffers+0x129>
   236e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   236ec:	nop    DWORD PTR [rax+0x0]

00000000000236f0 <get_mem_mv>:
   236f0:	endbr64 
   236f4:	push   r15
   236f6:	mov    esi,0x8
   236fb:	push   r14
   236fd:	push   r13
   236ff:	mov    r13,rdi
   23702:	mov    edi,0x4
   23707:	push   r12
   23709:	push   rbp
   2370a:	push   rbx
   2370b:	sub    rsp,0x18
   2370f:	call   4400 <calloc@plt>
   23714:	mov    QWORD PTR [r13+0x0],rax
   23718:	test   rax,rax
   2371b:	je     23905 <get_mem_mv+0x215>
   23721:	mov    rbx,rax
   23724:	mov    QWORD PTR [rsp],0x0
   2372c:	mov    esi,0x8
   23731:	mov    edi,0x4
   23736:	call   4400 <calloc@plt>
   2373b:	mov    rbp,rax
   2373e:	mov    rax,QWORD PTR [rsp]
   23742:	mov    QWORD PTR [rbx+rax*1],rbp
   23746:	test   rbp,rbp
   23749:	je     2395c <get_mem_mv+0x26c>
   2374f:	xor    r12d,r12d
   23752:	mov    esi,0x8
   23757:	mov    edi,0x2
   2375c:	call   4400 <calloc@plt>
   23761:	mov    QWORD PTR [rbp+r12*1+0x0],rax
   23766:	mov    rbx,rax
   23769:	test   rax,rax
   2376c:	je     2393b <get_mem_mv+0x24b>
   23772:	xor    ebp,ebp
   23774:	mov    rax,QWORD PTR [rip+0x64e35]        # 885b0 <img>
   2377b:	mov    esi,0x8
   23780:	movsxd rdi,DWORD PTR [rax+0x24]
   23784:	mov    DWORD PTR [rsp+0x8],edi
   23788:	call   4400 <calloc@plt>
   2378d:	mov    edx,DWORD PTR [rsp+0x8]
   23791:	test   rax,rax
   23794:	mov    QWORD PTR [rbx+rbp*1],rax
   23798:	je     23920 <get_mem_mv+0x230>
   2379e:	mov    QWORD PTR [rsp+0x8],0x0
   237a7:	test   edx,edx
   237a9:	jle    23855 <get_mem_mv+0x165>
   237af:	nop
   237b0:	mov    rax,QWORD PTR [rsp+0x8]
   237b5:	mov    rdx,QWORD PTR [rsp]
   237b9:	mov    esi,0x8
   237be:	mov    edi,0x9
   237c3:	lea    rbx,[rax*8+0x0]
   237cb:	mov    rax,QWORD PTR [r13+0x0]
   237cf:	mov    rax,QWORD PTR [rax+rdx*1]
   237d3:	mov    rax,QWORD PTR [rax+r12*1]
   237d7:	mov    r15,QWORD PTR [rax+rbp*1]
   237db:	call   4400 <calloc@plt>
   237e0:	add    r15,rbx
   237e3:	mov    r14,rax
   237e6:	mov    QWORD PTR [r15],rax
   237e9:	test   rax,rax
   237ec:	je     238d7 <get_mem_mv+0x1e7>
   237f2:	xor    r15d,r15d
   237f5:	jmp    23818 <get_mem_mv+0x128>
   237f7:	nop    WORD PTR [rax+rax*1+0x0]
   23800:	mov    rax,QWORD PTR [r13+0x0]
   23804:	mov    rcx,QWORD PTR [rsp]
   23808:	mov    rax,QWORD PTR [rax+rcx*1]
   2380c:	mov    rax,QWORD PTR [rax+r12*1]
   23810:	mov    rax,QWORD PTR [rax+rbp*1]
   23814:	mov    r14,QWORD PTR [rax+rbx*1]
   23818:	mov    esi,0x2
   2381d:	mov    edi,0x2
   23822:	call   4400 <calloc@plt>
   23827:	mov    QWORD PTR [r14+r15*1],rax
   2382b:	test   rax,rax
   2382e:	je     238a7 <get_mem_mv+0x1b7>
   23830:	add    r15,0x8
   23834:	cmp    r15,0x48
   23838:	jne    23800 <get_mem_mv+0x110>
   2383a:	mov    rax,QWORD PTR [rip+0x64d6f]        # 885b0 <img>
   23841:	add    QWORD PTR [rsp+0x8],0x1
   23847:	mov    rdx,QWORD PTR [rsp+0x8]
   2384c:	cmp    DWORD PTR [rax+0x24],edx
   2384f:	jg     237b0 <get_mem_mv+0xc0>
   23855:	add    rbp,0x8
   23859:	cmp    rbp,0x10
   2385d:	je     23874 <get_mem_mv+0x184>
   2385f:	mov    rax,QWORD PTR [r13+0x0]
   23863:	mov    rdx,QWORD PTR [rsp]
   23867:	mov    rax,QWORD PTR [rax+rdx*1]
   2386b:	mov    rbx,QWORD PTR [rax+r12*1]
   2386f:	jmp    23774 <get_mem_mv+0x84>
   23874:	add    r12,0x8
   23878:	cmp    r12,0x20
   2387c:	je     2388f <get_mem_mv+0x19f>
   2387e:	mov    rax,QWORD PTR [r13+0x0]
   23882:	mov    rdx,QWORD PTR [rsp]
   23886:	mov    rbp,QWORD PTR [rax+rdx*1]
   2388a:	jmp    23752 <get_mem_mv+0x62>
   2388f:	add    QWORD PTR [rsp],0x8
   23894:	mov    rax,QWORD PTR [rsp]
   23898:	cmp    rax,0x20
   2389c:	je     238b8 <get_mem_mv+0x1c8>
   2389e:	mov    rbx,QWORD PTR [r13+0x0]
   238a2:	jmp    2372c <get_mem_mv+0x3c>
   238a7:	lea    rdi,[rip+0x4f302]        # 72bb0 <COEF.5132+0x3c0>
   238ae:	call   38210 <no_mem_exit>
   238b3:	jmp    23830 <get_mem_mv+0x140>
   238b8:	mov    rax,QWORD PTR [rip+0x64cf1]        # 885b0 <img>
   238bf:	mov    eax,DWORD PTR [rax+0x24]
   238c2:	add    rsp,0x18
   238c6:	pop    rbx
   238c7:	pop    rbp
   238c8:	lea    eax,[rax+rax*8]
   238cb:	pop    r12
   238cd:	pop    r13
   238cf:	shl    eax,0x6
   238d2:	pop    r14
   238d4:	pop    r15
   238d6:	ret    
   238d7:	lea    rdi,[rip+0x4f2d2]        # 72bb0 <COEF.5132+0x3c0>
   238de:	call   38210 <no_mem_exit>
   238e3:	mov    rdx,QWORD PTR [rsp]
   238e7:	mov    rax,QWORD PTR [r13+0x0]
   238eb:	mov    rax,QWORD PTR [rax+rdx*1]
   238ef:	mov    rdx,QWORD PTR [rsp+0x8]
   238f4:	mov    rax,QWORD PTR [rax+r12*1]
   238f8:	mov    rax,QWORD PTR [rax+rbp*1]
   238fc:	mov    r14,QWORD PTR [rax+rdx*8]
   23900:	jmp    237f2 <get_mem_mv+0x102>
   23905:	lea    rdi,[rip+0x4f2a4]        # 72bb0 <COEF.5132+0x3c0>
   2390c:	call   38210 <no_mem_exit>
   23911:	mov    rbx,QWORD PTR [r13+0x0]
   23915:	jmp    23724 <get_mem_mv+0x34>
   2391a:	nop    WORD PTR [rax+rax*1+0x0]
   23920:	lea    rdi,[rip+0x4f289]        # 72bb0 <COEF.5132+0x3c0>
   23927:	call   38210 <no_mem_exit>
   2392c:	mov    rax,QWORD PTR [rip+0x64c7d]        # 885b0 <img>
   23933:	mov    edx,DWORD PTR [rax+0x24]
   23936:	jmp    2379e <get_mem_mv+0xae>
   2393b:	lea    rdi,[rip+0x4f26e]        # 72bb0 <COEF.5132+0x3c0>
   23942:	call   38210 <no_mem_exit>
   23947:	mov    rax,QWORD PTR [r13+0x0]
   2394b:	mov    rdx,QWORD PTR [rsp]
   2394f:	mov    rax,QWORD PTR [rax+rdx*1]
   23953:	mov    rbx,QWORD PTR [rax+r12*1]
   23957:	jmp    23772 <get_mem_mv+0x82>
   2395c:	lea    rdi,[rip+0x4f24d]        # 72bb0 <COEF.5132+0x3c0>
   23963:	call   38210 <no_mem_exit>
   23968:	mov    rax,QWORD PTR [r13+0x0]
   2396c:	mov    rdx,QWORD PTR [rsp]
   23970:	mov    rbp,QWORD PTR [rax+rdx*1]
   23974:	jmp    2374f <get_mem_mv+0x5f>
   23979:	nop    DWORD PTR [rax+0x0]

0000000000023980 <free_mem_mv>:
   23980:	endbr64 
   23984:	push   r15
   23986:	mov    rax,rdi
   23989:	mov    r15,rdi
   2398c:	push   r14
   2398e:	add    rax,0x20
   23992:	push   r13
   23994:	push   r12
   23996:	push   rbp
   23997:	push   rbx
   23998:	sub    rsp,0x18
   2399c:	mov    QWORD PTR [rsp+0x8],rdi
   239a1:	mov    QWORD PTR [rsp],rax
   239a5:	xor    r12d,r12d
   239a8:	xor    ebp,ebp
   239aa:	mov    rax,QWORD PTR [rip+0x64bff]        # 885b0 <img>
   239b1:	xor    r13d,r13d
   239b4:	mov    eax,DWORD PTR [rax+0x24]
   239b7:	test   eax,eax
   239b9:	jle    23a17 <free_mem_mv+0x97>
   239bb:	nop    DWORD PTR [rax+rax*1+0x0]
   239c0:	lea    rbx,[r13*8+0x0]
   239c8:	xor    r14d,r14d
   239cb:	nop    DWORD PTR [rax+rax*1+0x0]
   239d0:	mov    rdx,QWORD PTR [r15]
   239d3:	mov    rdx,QWORD PTR [rdx+r12*1]
   239d7:	mov    rdx,QWORD PTR [rdx+rbp*1]
   239db:	mov    rdx,QWORD PTR [rdx+rbx*1]
   239df:	mov    rdi,QWORD PTR [rdx+r14*1]
   239e3:	add    r14,0x8
   239e7:	call   42d0 <free@plt>
   239ec:	cmp    r14,0x48
   239f0:	jne    239d0 <free_mem_mv+0x50>
   239f2:	mov    rax,QWORD PTR [r15]
   239f5:	add    r13,0x1
   239f9:	mov    rax,QWORD PTR [rax+r12*1]
   239fd:	mov    rax,QWORD PTR [rax+rbp*1]
   23a01:	mov    rdi,QWORD PTR [rax+rbx*1]
   23a05:	call   42d0 <free@plt>
   23a0a:	mov    rax,QWORD PTR [rip+0x64b9f]        # 885b0 <img>
   23a11:	cmp    DWORD PTR [rax+0x24],r13d
   23a15:	jg     239c0 <free_mem_mv+0x40>
   23a17:	mov    rax,QWORD PTR [r15]
   23a1a:	mov    rax,QWORD PTR [rax+r12*1]
   23a1e:	mov    rdi,QWORD PTR [rax+rbp*1]
   23a22:	add    rbp,0x8
   23a26:	call   42d0 <free@plt>
   23a2b:	cmp    rbp,0x10
   23a2f:	jne    239aa <free_mem_mv+0x2a>
   23a35:	mov    rax,QWORD PTR [r15]
   23a38:	mov    rdi,QWORD PTR [rax+r12*1]
   23a3c:	add    r12,0x8
   23a40:	call   42d0 <free@plt>
   23a45:	cmp    r12,0x20
   23a49:	jne    239a8 <free_mem_mv+0x28>
   23a4f:	mov    rdi,QWORD PTR [r15]
   23a52:	add    r15,0x8
   23a56:	call   42d0 <free@plt>
   23a5b:	cmp    QWORD PTR [rsp],r15
   23a5f:	jne    239a5 <free_mem_mv+0x25>
   23a65:	mov    rdi,QWORD PTR [rsp+0x8]
   23a6a:	add    rsp,0x18
   23a6e:	pop    rbx
   23a6f:	pop    rbp
   23a70:	pop    r12
   23a72:	pop    r13
   23a74:	pop    r14
   23a76:	pop    r15
   23a78:	jmp    42d0 <free@plt>
   23a7d:	nop    DWORD PTR [rax]

0000000000023a80 <get_mem_ACcoeff>:
   23a80:	endbr64 
   23a84:	push   r15
   23a86:	mov    esi,0x8
   23a8b:	push   r14
   23a8d:	push   r13
   23a8f:	push   r12
   23a91:	mov    r12,rdi
   23a94:	push   rbp
   23a95:	push   rbx
   23a96:	sub    rsp,0x18
   23a9a:	mov    rax,QWORD PTR [rip+0x64b0f]        # 885b0 <img>
   23aa1:	mov    ebx,DWORD PTR [rax+0x11bf4]
   23aa7:	lea    eax,[rbx+0x4]
   23aaa:	movsxd rdi,eax
   23aad:	mov    DWORD PTR [rsp+0xc],eax
   23ab1:	call   4400 <calloc@plt>
   23ab6:	mov    QWORD PTR [r12],rax
   23aba:	test   rax,rax
   23abd:	je     23bf4 <get_mem_ACcoeff+0x174>
   23ac3:	mov    eax,DWORD PTR [rsp+0xc]
   23ac7:	test   eax,eax
   23ac9:	jle    23b85 <get_mem_ACcoeff+0x105>
   23acf:	lea    eax,[rbx+0x3]
   23ad2:	xor    ebp,ebp
   23ad4:	lea    r13,[rax*8+0x8]
   23adc:	nop    DWORD PTR [rax+0x0]
   23ae0:	mov    rbx,QWORD PTR [r12]
   23ae4:	mov    esi,0x8
   23ae9:	mov    edi,0x4
   23aee:	call   4400 <calloc@plt>
   23af3:	add    rbx,rbp
   23af6:	mov    r15,rax
   23af9:	mov    QWORD PTR [rbx],rax
   23afc:	test   rax,rax
   23aff:	je     23bdb <get_mem_ACcoeff+0x15b>
   23b05:	xor    ebx,ebx
   23b07:	mov    esi,0x8
   23b0c:	mov    edi,0x2
   23b11:	call   4400 <calloc@plt>
   23b16:	mov    QWORD PTR [r15+rbx*1],rax
   23b1a:	mov    r14,rax
   23b1d:	test   rax,rax
   23b20:	je     23b9f <get_mem_ACcoeff+0x11f>
   23b22:	mov    esi,0x4
   23b27:	mov    edi,0x41
   23b2c:	call   4400 <calloc@plt>
   23b31:	mov    QWORD PTR [r14],rax
   23b34:	test   rax,rax
   23b37:	je     23bca <get_mem_ACcoeff+0x14a>
   23b3d:	mov    rax,QWORD PTR [r12]
   23b41:	mov    esi,0x4
   23b46:	mov    edi,0x41
   23b4b:	mov    rax,QWORD PTR [rax+rbp*1]
   23b4f:	mov    r15,QWORD PTR [rax+rbx*1]
   23b53:	call   4400 <calloc@plt>
   23b58:	mov    QWORD PTR [r15+0x8],rax
   23b5c:	test   rax,rax
   23b5f:	je     23bbc <get_mem_ACcoeff+0x13c>
   23b61:	add    rbx,0x8
   23b65:	cmp    rbx,0x20
   23b69:	je     23b78 <get_mem_ACcoeff+0xf8>
   23b6b:	mov    rax,QWORD PTR [r12]
   23b6f:	mov    r15,QWORD PTR [rax+rbp*1]
   23b73:	jmp    23b07 <get_mem_ACcoeff+0x87>
   23b75:	nop    DWORD PTR [rax]
   23b78:	add    rbp,0x8
   23b7c:	cmp    rbp,r13
   23b7f:	jne    23ae0 <get_mem_ACcoeff+0x60>
   23b85:	imul   eax,DWORD PTR [rsp+0xc],0x208
   23b8d:	add    rsp,0x18
   23b91:	pop    rbx
   23b92:	pop    rbp
   23b93:	pop    r12
   23b95:	pop    r13
   23b97:	shl    eax,0x2
   23b9a:	pop    r14
   23b9c:	pop    r15
   23b9e:	ret    
   23b9f:	lea    rdi,[rip+0x512e6]        # 74e8c <ONE_FOURTH_TAP+0x146c>
   23ba6:	call   38210 <no_mem_exit>
   23bab:	mov    rax,QWORD PTR [r12]
   23baf:	mov    rax,QWORD PTR [rax+rbp*1]
   23bb3:	mov    r14,QWORD PTR [rax+rbx*1]
   23bb7:	jmp    23b22 <get_mem_ACcoeff+0xa2>
   23bbc:	lea    rdi,[rip+0x512c9]        # 74e8c <ONE_FOURTH_TAP+0x146c>
   23bc3:	call   38210 <no_mem_exit>
   23bc8:	jmp    23b61 <get_mem_ACcoeff+0xe1>
   23bca:	lea    rdi,[rip+0x512bb]        # 74e8c <ONE_FOURTH_TAP+0x146c>
   23bd1:	call   38210 <no_mem_exit>
   23bd6:	jmp    23b3d <get_mem_ACcoeff+0xbd>
   23bdb:	lea    rdi,[rip+0x512aa]        # 74e8c <ONE_FOURTH_TAP+0x146c>
   23be2:	call   38210 <no_mem_exit>
   23be7:	mov    rax,QWORD PTR [r12]
   23beb:	mov    r15,QWORD PTR [rax+rbp*1]
   23bef:	jmp    23b05 <get_mem_ACcoeff+0x85>
   23bf4:	lea    rdi,[rip+0x51291]        # 74e8c <ONE_FOURTH_TAP+0x146c>
   23bfb:	call   38210 <no_mem_exit>
   23c00:	jmp    23ac3 <get_mem_ACcoeff+0x43>
   23c05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000023c10 <get_mem_DCcoeff>:
   23c10:	endbr64 
   23c14:	push   r14
   23c16:	mov    esi,0x8
   23c1b:	push   r13
   23c1d:	push   r12
   23c1f:	mov    r12,rdi
   23c22:	mov    edi,0x3
   23c27:	push   rbp
   23c28:	push   rbx
   23c29:	call   4400 <calloc@plt>
   23c2e:	mov    QWORD PTR [r12],rax
   23c32:	test   rax,rax
   23c35:	je     23ce4 <get_mem_DCcoeff+0xd4>
   23c3b:	mov    r14,rax
   23c3e:	xor    ebp,ebp
   23c40:	lea    r13,[rip+0x5125c]        # 74ea3 <ONE_FOURTH_TAP+0x1483>
   23c47:	mov    esi,0x8
   23c4c:	mov    edi,0x2
   23c51:	call   4400 <calloc@plt>
   23c56:	mov    QWORD PTR [r14+rbp*1],rax
   23c5a:	mov    rbx,rax
   23c5d:	test   rax,rax
   23c60:	je     23cb6 <get_mem_DCcoeff+0xa6>
   23c62:	mov    esi,0x4
   23c67:	mov    edi,0x41
   23c6c:	call   4400 <calloc@plt>
   23c71:	mov    QWORD PTR [rbx],rax
   23c74:	test   rax,rax
   23c77:	je     23cd2 <get_mem_DCcoeff+0xc2>
   23c79:	mov    esi,0x4
   23c7e:	mov    edi,0x41
   23c83:	call   4400 <calloc@plt>
   23c88:	mov    QWORD PTR [rbx+0x8],rax
   23c8c:	test   rax,rax
   23c8f:	je     23cc8 <get_mem_DCcoeff+0xb8>
   23c91:	add    rbp,0x8
   23c95:	cmp    rbp,0x18
   23c99:	je     23ca8 <get_mem_DCcoeff+0x98>
   23c9b:	mov    r14,QWORD PTR [r12]
   23c9f:	jmp    23c47 <get_mem_DCcoeff+0x37>
   23ca1:	nop    DWORD PTR [rax+0x0]
   23ca8:	pop    rbx
   23ca9:	mov    eax,0x618
   23cae:	pop    rbp
   23caf:	pop    r12
   23cb1:	pop    r13
   23cb3:	pop    r14
   23cb5:	ret    
   23cb6:	mov    rdi,r13
   23cb9:	call   38210 <no_mem_exit>
   23cbe:	mov    rax,QWORD PTR [r12]
   23cc2:	mov    rbx,QWORD PTR [rax+rbp*1]
   23cc6:	jmp    23c62 <get_mem_DCcoeff+0x52>
   23cc8:	mov    rdi,r13
   23ccb:	call   38210 <no_mem_exit>
   23cd0:	jmp    23c91 <get_mem_DCcoeff+0x81>
   23cd2:	mov    rdi,r13
   23cd5:	call   38210 <no_mem_exit>
   23cda:	mov    rax,QWORD PTR [r12]
   23cde:	mov    rbx,QWORD PTR [rax+rbp*1]
   23ce2:	jmp    23c79 <get_mem_DCcoeff+0x69>
   23ce4:	lea    rdi,[rip+0x511b8]        # 74ea3 <ONE_FOURTH_TAP+0x1483>
   23ceb:	call   38210 <no_mem_exit>
   23cf0:	mov    r14,QWORD PTR [r12]
   23cf4:	jmp    23c3e <get_mem_DCcoeff+0x2e>
   23cf9:	nop    DWORD PTR [rax+0x0]

0000000000023d00 <init_img>:
   23d00:	endbr64 
   23d04:	mov    rsi,QWORD PTR [rip+0x648ad]        # 885b8 <input>
   23d0b:	mov    rax,QWORD PTR [rip+0x6489e]        # 885b0 <img>
   23d12:	push   r12
   23d14:	push   rbp
   23d15:	push   rbx
   23d16:	mov    edx,DWORD PTR [rsi+0x48]
   23d19:	mov    r8d,DWORD PTR [rsi+0xce0]
   23d20:	mov    ecx,DWORD PTR [rax+0x11bd8]
   23d26:	mov    DWORD PTR [rax+0x11bfc],edx
   23d2c:	mov    DWORD PTR [rax+0x11bd4],r8d
   23d33:	test   edx,edx
   23d35:	je     23d40 <init_img+0x40>
   23d37:	cmp    r8d,ecx
   23d3a:	jle    241dd <init_img+0x4dd>
   23d40:	xor    ecx,ecx
   23d42:	cmp    r8d,0x8
   23d46:	setg   cl
   23d49:	lea    ecx,[rcx*8+0x8]
   23d50:	mov    DWORD PTR [rax+0x11bd0],ecx
   23d56:	lea    ecx,[r8-0x8]
   23d5a:	lea    edi,[rcx+rcx*1]
   23d5d:	add    ecx,edi
   23d5f:	mov    DWORD PTR [rax+0x11be4],edi
   23d65:	mov    edi,0x1
   23d6a:	add    ecx,ecx
   23d6c:	mov    ebx,edi
   23d6e:	mov    DWORD PTR [rax+0x11bdc],ecx
   23d74:	lea    ecx,[r8-0x1]
   23d78:	shl    ebx,cl
   23d7a:	mov    ecx,r8d
   23d7d:	shl    edi,cl
   23d7f:	mov    DWORD PTR [rax+0x11be8],ebx
   23d85:	lea    ecx,[rdi-0x1]
   23d88:	mov    DWORD PTR [rax+0x11bec],ecx
   23d8e:	test   edx,edx
   23d90:	jne    2422b <init_img+0x52b>
   23d96:	mov    DWORD PTR [rax+0x11bd8],0x0
   23da0:	mov    QWORD PTR [rax+0x11bf0],0x0
   23dab:	mov    DWORD PTR [rax+0x11bf8],0x0
   23db5:	mov    DWORD PTR [rax+0x11be0],0x0
   23dbf:	mov    QWORD PTR [rax+0x11c04],0x0
   23dca:	mov    QWORD PTR [rax+0x11c0c],0x0
   23dd5:	mov    rcx,QWORD PTR [rip+0x92094]        # b5e70 <active_sps>
   23ddc:	mov    edx,DWORD PTR [rcx+0x46c]
   23de2:	mov    r11d,DWORD PTR [rcx+0x47c]
   23de9:	mov    DWORD PTR [rax+0x20],edx
   23dec:	test   r11d,r11d
   23def:	jne    23df3 <init_img+0xf3>
   23df1:	add    edx,edx
   23df3:	mov    DWORD PTR [rax+0x24],edx
   23df6:	mov    edx,DWORD PTR [rsi+0x24]
   23df9:	pxor   xmm0,xmm0
   23dfd:	lea    rdi,[rax+0x118f0]
   23e04:	mov    DWORD PTR [rax+0x11bbc],0x0
   23e0e:	cvtsd2ss xmm0,QWORD PTR [rsi+0x978]
   23e16:	mov    DWORD PTR [rax+0x11ab8],edx
   23e1c:	movss  DWORD PTR [rax+0x30],xmm0
   23e21:	call   236f0 <get_mem_mv>
   23e26:	mov    rax,QWORD PTR [rip+0x64783]        # 885b0 <img>
   23e2d:	lea    rdi,[rax+0x118f8]
   23e34:	call   236f0 <get_mem_mv>
   23e39:	mov    rax,QWORD PTR [rip+0x64778]        # 885b8 <input>
   23e40:	mov    r10d,DWORD PTR [rax+0x4e8]
   23e47:	test   r10d,r10d
   23e4a:	jne    243a2 <init_img+0x6a2>
   23e50:	mov    rax,QWORD PTR [rip+0x64759]        # 885b0 <img>
   23e57:	lea    rdi,[rax+0x3738]
   23e5e:	call   23a80 <get_mem_ACcoeff>
   23e63:	mov    rax,QWORD PTR [rip+0x64746]        # 885b0 <img>
   23e6a:	lea    rdi,[rax+0x3740]
   23e71:	call   23c10 <get_mem_DCcoeff>
   23e76:	mov    rax,QWORD PTR [rip+0x6473b]        # 885b8 <input>
   23e7d:	mov    r9d,DWORD PTR [rax+0xb44]
   23e84:	test   r9d,r9d
   23e87:	jne    243cd <init_img+0x6cd>
   23e8d:	mov    rbx,QWORD PTR [rip+0x6471c]        # 885b0 <img>
   23e94:	mov    eax,DWORD PTR [rbx+0x11bec]
   23e9a:	mov    ebp,DWORD PTR [rbx+0x11bf0]
   23ea0:	cmp    eax,ebp
   23ea2:	jle    241d0 <init_img+0x4d0>
   23ea8:	lea    ebp,[rax+0x1]
   23eab:	lea    r12d,[rbp+rbp*1+0x0]
   23eb0:	movsxd rdi,r12d
   23eb3:	mov    esi,0x4
   23eb8:	call   4400 <calloc@plt>
   23ebd:	mov    QWORD PTR [rbx+0x11860],rax
   23ec4:	test   rax,rax
   23ec7:	je     24529 <init_img+0x829>
   23ecd:	movsxd rdx,ebp
   23ed0:	lea    rsi,[rax+rdx*4]
   23ed4:	xor    eax,eax
   23ed6:	mov    QWORD PTR [rbx+0x11860],rsi
   23edd:	mov    rdx,rsi
   23ee0:	cmp    r12d,0x1
   23ee4:	jle    23f07 <init_img+0x207>
   23ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23ef0:	mov    ecx,eax
   23ef2:	sub    rdx,0x4
   23ef6:	imul   ecx,eax
   23ef9:	mov    DWORD PTR [rdx+0x4],ecx
   23efc:	mov    DWORD PTR [rsi+rax*4],ecx
   23eff:	add    rax,0x1
   23f03:	cmp    ebp,eax
   23f05:	jg     23ef0 <init_img+0x1f0>
   23f07:	mov    rbp,QWORD PTR [rip+0x646aa]        # 885b8 <input>
   23f0e:	mov    r8d,DWORD PTR [rbx+0x11c18]
   23f15:	mov    edi,DWORD PTR [rbx+0x11c1c]
   23f1b:	movsxd rcx,DWORD PTR [rbx+0x11bfc]
   23f22:	mov    r10d,DWORD PTR [rbp+0x40]
   23f26:	mov    r9d,DWORD PTR [rbp+0x44]
   23f2a:	add    r8d,r10d
   23f2d:	add    edi,r9d
   23f30:	mov    DWORD PTR [rbx+0x34],r8d
   23f34:	mov    DWORD PTR [rbx+0x3c],edi
   23f37:	test   ecx,ecx
   23f39:	je     24198 <init_img+0x498>
   23f3f:	mov    esi,0x10
   23f44:	lea    r11,[rip+0x50fc5]        # 74f10 <mb_width_cr.6670>
   23f4b:	lea    r12,[rip+0x50fae]        # 74f00 <mb_height_cr.6671>
   23f52:	mov    eax,esi
   23f54:	cdq    
   23f55:	idiv   DWORD PTR [r11+rcx*4]
   23f59:	mov    r11d,eax
   23f5c:	mov    eax,r8d
   23f5f:	cdq    
   23f60:	idiv   r11d
   23f63:	mov    DWORD PTR [rbx+0x38],eax
   23f66:	mov    eax,esi
   23f68:	cdq    
   23f69:	idiv   DWORD PTR [r12+rcx*4]
   23f6d:	mov    esi,eax
   23f6f:	mov    eax,edi
   23f71:	cdq    
   23f72:	idiv   esi
   23f74:	mov    DWORD PTR [rbx+0x40],eax
   23f77:	mov    ecx,eax
   23f79:	mov    eax,r10d
   23f7c:	cdq    
   23f7d:	idiv   r11d
   23f80:	mov    DWORD PTR [rbp+0xcec],eax
   23f86:	mov    eax,r9d
   23f89:	cdq    
   23f8a:	idiv   esi
   23f8c:	mov    DWORD PTR [rbp+0xce8],eax
   23f92:	test   r8d,r8d
   23f95:	lea    eax,[r8+0xf]
   23f99:	lea    edx,[rdi+0xf]
   23f9c:	mov    DWORD PTR [rbx+0x44],ecx
   23f9f:	cmovns eax,r8d
   23fa3:	mov    rcx,QWORD PTR [rip+0x91ec6]        # b5e70 <active_sps>
   23faa:	sar    eax,0x4
   23fad:	test   edi,edi
   23faf:	cmovns edx,edi
   23fb2:	mov    DWORD PTR [rbx+0x11b14],eax
   23fb8:	mov    edi,DWORD PTR [rcx+0x47c]
   23fbe:	sar    edx,0x4
   23fc1:	imul   eax,edx
   23fc4:	mov    DWORD PTR [rbx+0x11b1c],edx
   23fca:	mov    DWORD PTR [rbx+0x11b28],eax
   23fd0:	test   edi,edi
   23fd2:	jne    23fd6 <init_img+0x2d6>
   23fd4:	shr    edx,1
   23fd6:	mov    DWORD PTR [rbx+0x11b18],edx
   23fdc:	mov    edi,eax
   23fde:	mov    esi,0x278
   23fe3:	call   4400 <calloc@plt>
   23fe8:	mov    QWORD PTR [rbx+0x3758],rax
   23fef:	test   rax,rax
   23ff2:	je     2450a <init_img+0x80a>
   23ff8:	mov    esi,DWORD PTR [rbp+0xd8]
   23ffe:	test   esi,esi
   24000:	jne    242d1 <init_img+0x5d1>
   24006:	mov    eax,DWORD PTR [rbx+0x3c]
   24009:	lea    rdi,[rbx+0x68]
   2400d:	test   eax,eax
   2400f:	lea    edx,[rax+0x3]
   24012:	cmovns edx,eax
   24015:	mov    eax,DWORD PTR [rbx+0x34]
   24018:	sar    edx,0x2
   2401b:	lea    esi,[rax+0x3]
   2401e:	test   eax,eax
   24020:	cmovns esi,eax
   24023:	sar    esi,0x2
   24026:	call   38520 <get_mem2Dint>
   2402b:	mov    rax,QWORD PTR [rip+0x6457e]        # 885b0 <img>
   24032:	mov    ecx,DWORD PTR [rax+0x3c]
   24035:	lea    rdi,[rax+0x70]
   24039:	test   ecx,ecx
   2403b:	lea    edx,[rcx+0x3]
   2403e:	cmovns edx,ecx
   24041:	mov    ecx,DWORD PTR [rax+0x34]
   24044:	sar    edx,0x2
   24047:	lea    esi,[rcx+0x3]
   2404a:	test   ecx,ecx
   2404c:	cmovns esi,ecx
   2404f:	sar    esi,0x2
   24052:	call   38520 <get_mem2Dint>
   24057:	mov    rcx,QWORD PTR [rip+0x64552]        # 885b0 <img>
   2405e:	lea    rdi,[rip+0x90e3b]        # b4ea0 <rddata_top_frame_mb+0xc40>
   24065:	mov    eax,DWORD PTR [rcx+0x3c]
   24068:	test   eax,eax
   2406a:	lea    edx,[rax+0x3]
   2406d:	cmovns edx,eax
   24070:	mov    eax,DWORD PTR [rcx+0x34]
   24073:	sar    edx,0x2
   24076:	lea    esi,[rax+0x3]
   24079:	test   eax,eax
   2407b:	cmovns esi,eax
   2407e:	sar    esi,0x2
   24081:	call   38520 <get_mem2Dint>
   24086:	mov    rax,QWORD PTR [rip+0x6452b]        # 885b8 <input>
   2408d:	mov    ecx,DWORD PTR [rax+0xb44]
   24093:	test   ecx,ecx
   24095:	jne    24310 <init_img+0x610>
   2409b:	mov    rax,QWORD PTR [rip+0x6450e]        # 885b0 <img>
   240a2:	mov    edx,0x4
   240a7:	mov    ebx,DWORD PTR [rax+0x11bf4]
   240ad:	mov    esi,DWORD PTR [rax+0x11b28]
   240b3:	lea    rdi,[rax+0x80]
   240ba:	lea    ecx,[rbx+0x4]
   240bd:	call   38740 <get_mem3Dint>
   240c2:	xor    eax,eax
   240c4:	call   210b0 <CAVLC_init>
   240c9:	mov    rsi,QWORD PTR [rip+0x644e0]        # 885b0 <img>
   240d0:	mov    edx,DWORD PTR [rsi+0x34]
   240d3:	mov    ecx,DWORD PTR [rsi+0x3c]
   240d6:	cmp    edx,0x3
   240d9:	jle    2413c <init_img+0x43c>
   240db:	xor    r9d,r9d
   240de:	xchg   ax,ax
   240e0:	cmp    ecx,0x3
   240e3:	jle    24128 <init_img+0x428>
   240e5:	mov    rax,QWORD PTR [rsi+0x68]
   240e9:	xor    edx,edx
   240eb:	mov    r8,QWORD PTR [rax+r9*8]
   240ef:	mov    rax,QWORD PTR [rsi+0x70]
   240f3:	mov    rdi,QWORD PTR [rax+r9*8]
   240f7:	nop    WORD PTR [rax+rax*1+0x0]
   24100:	mov    DWORD PTR [r8+rdx*4],0xffffffff
   24108:	mov    DWORD PTR [rdi+rdx*4],0xffffffff
   2410f:	mov    ecx,DWORD PTR [rsi+0x3c]
   24112:	add    rdx,0x1
   24116:	lea    eax,[rcx+0x3]
   24119:	test   ecx,ecx
   2411b:	cmovns eax,ecx
   2411e:	sar    eax,0x2
   24121:	cmp    eax,edx
   24123:	jg     24100 <init_img+0x400>
   24125:	mov    edx,DWORD PTR [rsi+0x34]
   24128:	add    r9,0x1
   2412c:	lea    eax,[rdx+0x3]
   2412f:	test   edx,edx
   24131:	cmovns eax,edx
   24134:	sar    eax,0x2
   24137:	cmp    eax,r9d
   2413a:	jg     240e0 <init_img+0x3e0>
   2413c:	test   ecx,ecx
   2413e:	mov    DWORD PTR [rsi+0x58],0x0
   24145:	lea    esi,[rcx+0xf]
   24148:	mov    rax,QWORD PTR [rip+0x64469]        # 885b8 <input>
   2414f:	cmovns esi,ecx
   24152:	lea    edi,[rdx+0xf]
   24155:	mov    r8d,DWORD PTR [rax+0xb68]
   2415c:	sar    esi,0x4
   2415f:	test   edx,edx
   24161:	cmovns edi,edx
   24164:	mov    edx,r8d
   24167:	sar    edi,0x4
   2416a:	call   205c0 <RandomIntraInit>
   2416f:	xor    eax,eax
   24171:	call   60060 <InitSEIMessages>
   24176:	mov    rax,QWORD PTR [rip+0x6443b]        # 885b8 <input>
   2417d:	mov    edx,DWORD PTR [rax+0xb6c]
   24183:	test   edx,edx
   24185:	je     241b6 <init_img+0x4b6>
   24187:	shl    DWORD PTR [rax+0xb74],1
   2418d:	shl    DWORD PTR [rax+0xb78],1
   24193:	pop    rbx
   24194:	pop    rbp
   24195:	pop    r12
   24197:	ret    
   24198:	mov    DWORD PTR [rbx+0x38],0x0
   2419f:	mov    DWORD PTR [rbx+0x40],0x0
   241a6:	mov    QWORD PTR [rbp+0xce8],0x0
   241b1:	jmp    23f92 <init_img+0x292>
   241b6:	mov    QWORD PTR [rax+0xb70],0x0
   241c1:	mov    DWORD PTR [rax+0xb78],0x0
   241cb:	pop    rbx
   241cc:	pop    rbp
   241cd:	pop    r12
   241cf:	ret    
   241d0:	add    ebp,0x1
   241d3:	lea    r12d,[rbp+rbp*1+0x0]
   241d8:	jmp    23eb0 <init_img+0x1b0>
   241dd:	cmp    ecx,0x8
   241e0:	setg   cl
   241e3:	movzx  ecx,cl
   241e6:	lea    ecx,[rcx*8+0x8]
   241ed:	mov    DWORD PTR [rax+0x11bd0],ecx
   241f3:	lea    ecx,[r8-0x8]
   241f7:	lea    edi,[rcx+rcx*1]
   241fa:	add    ecx,edi
   241fc:	mov    DWORD PTR [rax+0x11be4],edi
   24202:	mov    edi,0x1
   24207:	add    ecx,ecx
   24209:	mov    ebx,edi
   2420b:	mov    DWORD PTR [rax+0x11bdc],ecx
   24211:	lea    ecx,[r8-0x1]
   24215:	shl    ebx,cl
   24217:	mov    ecx,r8d
   2421a:	shl    edi,cl
   2421c:	mov    DWORD PTR [rax+0x11be8],ebx
   24222:	lea    ecx,[rdi-0x1]
   24225:	mov    DWORD PTR [rax+0x11bec],ecx
   2422b:	mov    r8d,DWORD PTR [rsi+0xce4]
   24232:	mov    edi,0x1
   24237:	mov    ebx,edi
   24239:	mov    ecx,r8d
   2423c:	mov    DWORD PTR [rax+0x11bd8],r8d
   24243:	shl    ebx,cl
   24245:	mov    ecx,ebx
   24247:	mov    ebx,DWORD PTR [rax+0x11c14]
   2424d:	sub    ecx,0x1
   24250:	mov    DWORD PTR [rax+0x11bf0],ecx
   24256:	mov    ecx,edx
   24258:	shl    edi,cl
   2425a:	lea    ecx,[rdx-0x1]
   2425d:	and    edi,0xfffffffe
   24260:	mov    DWORD PTR [rax+0x11bf4],edi
   24266:	add    edi,edi
   24268:	cmp    ecx,0x2
   2426b:	sbb    ecx,ecx
   2426d:	sub    edx,0x2
   24270:	mov    DWORD PTR [rax+0x11bf8],edi
   24276:	and    ecx,0xfffffff8
   24279:	add    ecx,0x10
   2427c:	cmp    edx,0x2
   2427f:	sbb    edx,edx
   24281:	mov    DWORD PTR [rax+0x11c04],ecx
   24287:	and    edx,0x8
   2428a:	add    edx,0x8
   2428d:	mov    DWORD PTR [rax+0x11c08],edx
   24293:	lea    edx,[r8+r8*2-0x18]
   24298:	add    edx,edx
   2429a:	mov    DWORD PTR [rax+0x11be0],edx
   242a0:	test   ebx,ebx
   242a2:	je     242ad <init_img+0x5ad>
   242a4:	add    edx,0x6
   242a7:	mov    DWORD PTR [rax+0x11be0],edx
   242ad:	mov    rdx,QWORD PTR [rip+0x7cb4c]        # a0e00 <active_pps>
   242b4:	mov    ecx,DWORD PTR [rdx+0xd4]
   242ba:	mov    edx,DWORD PTR [rdx+0xd8]
   242c0:	mov    DWORD PTR [rax+0x11c0c],ecx
   242c6:	mov    DWORD PTR [rax+0x11c10],edx
   242cc:	jmp    23dd5 <init_img+0xd5>
   242d1:	mov    edi,DWORD PTR [rbx+0x11b28]
   242d7:	mov    esi,0x4
   242dc:	call   4400 <calloc@plt>
   242e1:	mov    QWORD PTR [rbx+0x11868],rax
   242e8:	test   rax,rax
   242eb:	jne    24006 <init_img+0x306>
   242f1:	lea    rdi,[rip+0x50bed]        # 74ee5 <ONE_FOURTH_TAP+0x14c5>
   242f8:	call   38210 <no_mem_exit>
   242fd:	mov    rbx,QWORD PTR [rip+0x642ac]        # 885b0 <img>
   24304:	jmp    24006 <init_img+0x306>
   24309:	nop    DWORD PTR [rax+0x0]
   24310:	mov    rcx,QWORD PTR [rip+0x64299]        # 885b0 <img>
   24317:	lea    rdi,[rip+0x7ac42]        # 9ef60 <rddata_bot_frame_mb+0xc40>
   2431e:	mov    eax,DWORD PTR [rcx+0x3c]
   24321:	test   eax,eax
   24323:	lea    edx,[rax+0x3]
   24326:	cmovns edx,eax
   24329:	mov    eax,DWORD PTR [rcx+0x34]
   2432c:	sar    edx,0x2
   2432f:	lea    esi,[rax+0x3]
   24332:	test   eax,eax
   24334:	cmovns esi,eax
   24337:	sar    esi,0x2
   2433a:	call   38520 <get_mem2Dint>
   2433f:	mov    rcx,QWORD PTR [rip+0x6426a]        # 885b0 <img>
   24346:	lea    rdi,[rip+0x7c113]        # a0460 <rddata_top_field_mb+0xc40>
   2434d:	mov    eax,DWORD PTR [rcx+0x3c]
   24350:	test   eax,eax
   24352:	lea    edx,[rax+0x3]
   24355:	cmovns edx,eax
   24358:	mov    eax,DWORD PTR [rcx+0x34]
   2435b:	sar    edx,0x2
   2435e:	lea    esi,[rax+0x3]
   24361:	test   eax,eax
   24363:	cmovns esi,eax
   24366:	sar    esi,0x2
   24369:	call   38520 <get_mem2Dint>
   2436e:	mov    rcx,QWORD PTR [rip+0x6423b]        # 885b0 <img>
   24375:	lea    rdi,[rip+0x91a04]        # b5d80 <rddata_bot_field_mb+0xc40>
   2437c:	mov    eax,DWORD PTR [rcx+0x3c]
   2437f:	test   eax,eax
   24381:	lea    edx,[rax+0x3]
   24384:	cmovns edx,eax
   24387:	mov    eax,DWORD PTR [rcx+0x34]
   2438a:	sar    edx,0x2
   2438d:	lea    esi,[rax+0x3]
   24390:	test   eax,eax
   24392:	cmovns esi,eax
   24395:	sar    esi,0x2
   24398:	call   38520 <get_mem2Dint>
   2439d:	jmp    2409b <init_img+0x39b>
   243a2:	mov    rax,QWORD PTR [rip+0x64207]        # 885b0 <img>
   243a9:	lea    rdi,[rax+0x11900]
   243b0:	call   236f0 <get_mem_mv>
   243b5:	mov    rax,QWORD PTR [rip+0x641f4]        # 885b0 <img>
   243bc:	lea    rdi,[rax+0x11908]
   243c3:	call   236f0 <get_mem_mv>
   243c8:	jmp    23e50 <init_img+0x150>
   243cd:	lea    rdi,[rip+0x90b2c]        # b4f00 <rddata_top_frame_mb+0xca0>
   243d4:	call   236f0 <get_mem_mv>
   243d9:	lea    rdi,[rip+0x90b28]        # b4f08 <rddata_top_frame_mb+0xca8>
   243e0:	call   236f0 <get_mem_mv>
   243e5:	lea    rdi,[rip+0x7abd4]        # 9efc0 <rddata_bot_frame_mb+0xca0>
   243ec:	call   236f0 <get_mem_mv>
   243f1:	lea    rdi,[rip+0x7abd0]        # 9efc8 <rddata_bot_frame_mb+0xca8>
   243f8:	call   236f0 <get_mem_mv>
   243fd:	lea    rdi,[rip+0x7c0bc]        # a04c0 <rddata_top_field_mb+0xca0>
   24404:	call   236f0 <get_mem_mv>
   24409:	lea    rdi,[rip+0x7c0b8]        # a04c8 <rddata_top_field_mb+0xca8>
   24410:	call   236f0 <get_mem_mv>
   24415:	lea    rdi,[rip+0x919c4]        # b5de0 <rddata_bot_field_mb+0xca0>
   2441c:	call   236f0 <get_mem_mv>
   24421:	lea    rdi,[rip+0x919c0]        # b5de8 <rddata_bot_field_mb+0xca8>
   24428:	call   236f0 <get_mem_mv>
   2442d:	mov    rax,QWORD PTR [rip+0x64184]        # 885b8 <input>
   24434:	mov    r8d,DWORD PTR [rax+0x4e8]
   2443b:	test   r8d,r8d
   2443e:	jne    244a5 <init_img+0x7a5>
   24440:	lea    rdi,[rip+0x90a21]        # b4e68 <rddata_top_frame_mb+0xc08>
   24447:	call   23a80 <get_mem_ACcoeff>
   2444c:	lea    rdi,[rip+0x90a1d]        # b4e70 <rddata_top_frame_mb+0xc10>
   24453:	call   23c10 <get_mem_DCcoeff>
   24458:	lea    rdi,[rip+0x7aac9]        # 9ef28 <rddata_bot_frame_mb+0xc08>
   2445f:	call   23a80 <get_mem_ACcoeff>
   24464:	lea    rdi,[rip+0x7aac5]        # 9ef30 <rddata_bot_frame_mb+0xc10>
   2446b:	call   23c10 <get_mem_DCcoeff>
   24470:	lea    rdi,[rip+0x7bfb1]        # a0428 <rddata_top_field_mb+0xc08>
   24477:	call   23a80 <get_mem_ACcoeff>
   2447c:	lea    rdi,[rip+0x7bfad]        # a0430 <rddata_top_field_mb+0xc10>
   24483:	call   23c10 <get_mem_DCcoeff>
   24488:	lea    rdi,[rip+0x918b9]        # b5d48 <rddata_bot_field_mb+0xc08>
   2448f:	call   23a80 <get_mem_ACcoeff>
   24494:	lea    rdi,[rip+0x918b5]        # b5d50 <rddata_bot_field_mb+0xc10>
   2449b:	call   23c10 <get_mem_DCcoeff>
   244a0:	jmp    23e8d <init_img+0x18d>
   244a5:	lea    rdi,[rip+0x90a64]        # b4f10 <rddata_top_frame_mb+0xcb0>
   244ac:	call   236f0 <get_mem_mv>
   244b1:	lea    rdi,[rip+0x90a60]        # b4f18 <rddata_top_frame_mb+0xcb8>
   244b8:	call   236f0 <get_mem_mv>
   244bd:	lea    rdi,[rip+0x7ab0c]        # 9efd0 <rddata_bot_frame_mb+0xcb0>
   244c4:	call   236f0 <get_mem_mv>
   244c9:	lea    rdi,[rip+0x7ab08]        # 9efd8 <rddata_bot_frame_mb+0xcb8>
   244d0:	call   236f0 <get_mem_mv>
   244d5:	lea    rdi,[rip+0x7bff4]        # a04d0 <rddata_top_field_mb+0xcb0>
   244dc:	call   236f0 <get_mem_mv>
   244e1:	lea    rdi,[rip+0x7bff0]        # a04d8 <rddata_top_field_mb+0xcb8>
   244e8:	call   236f0 <get_mem_mv>
   244ed:	lea    rdi,[rip+0x918fc]        # b5df0 <rddata_bot_field_mb+0xcb0>
   244f4:	call   236f0 <get_mem_mv>
   244f9:	lea    rdi,[rip+0x918f8]        # b5df8 <rddata_bot_field_mb+0xcb8>
   24500:	call   236f0 <get_mem_mv>
   24505:	jmp    24440 <init_img+0x740>
   2450a:	lea    rdi,[rip+0x509bd]        # 74ece <ONE_FOURTH_TAP+0x14ae>
   24511:	call   38210 <no_mem_exit>
   24516:	mov    rbp,QWORD PTR [rip+0x6409b]        # 885b8 <input>
   2451d:	mov    rbx,QWORD PTR [rip+0x6408c]        # 885b0 <img>
   24524:	jmp    23ff8 <init_img+0x2f8>
   24529:	lea    rdi,[rip+0x5098a]        # 74eba <ONE_FOURTH_TAP+0x149a>
   24530:	call   38210 <no_mem_exit>
   24535:	mov    rbx,QWORD PTR [rip+0x64074]        # 885b0 <img>
   2453c:	mov    rax,QWORD PTR [rbx+0x11860]
   24543:	jmp    23ecd <init_img+0x1cd>
   24548:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000024550 <free_mem_ACcoeff>:
   24550:	endbr64 
   24554:	push   r13
   24556:	mov    r13,rdi
   24559:	push   r12
   2455b:	push   rbp
   2455c:	push   rbx
   2455d:	sub    rsp,0x8
   24561:	mov    rax,QWORD PTR [rip+0x64048]        # 885b0 <img>
   24568:	cmp    DWORD PTR [rax+0x11bf4],0xfffffffd
   2456f:	jl     245e0 <free_mem_ACcoeff+0x90>
   24571:	mov    rbp,rdi
   24574:	xor    r12d,r12d
   24577:	nop    WORD PTR [rax+rax*1+0x0]
   24580:	xor    ebx,ebx
   24582:	mov    rax,QWORD PTR [rbp+0x0]
   24586:	mov    rax,QWORD PTR [rax+rbx*1]
   2458a:	mov    rdi,QWORD PTR [rax]
   2458d:	call   42d0 <free@plt>
   24592:	mov    rax,QWORD PTR [rbp+0x0]
   24596:	mov    rax,QWORD PTR [rax+rbx*1]
   2459a:	mov    rdi,QWORD PTR [rax+0x8]
   2459e:	call   42d0 <free@plt>
   245a3:	mov    rax,QWORD PTR [rbp+0x0]
   245a7:	mov    rdi,QWORD PTR [rax+rbx*1]
   245ab:	add    rbx,0x8
   245af:	call   42d0 <free@plt>
   245b4:	cmp    rbx,0x20
   245b8:	jne    24582 <free_mem_ACcoeff+0x32>
   245ba:	mov    rdi,QWORD PTR [rbp+0x0]
   245be:	add    r12d,0x1
   245c2:	add    rbp,0x8
   245c6:	call   42d0 <free@plt>
   245cb:	mov    rax,QWORD PTR [rip+0x63fde]        # 885b0 <img>
   245d2:	mov    eax,DWORD PTR [rax+0x11bf4]
   245d8:	add    eax,0x3
   245db:	cmp    eax,r12d
   245de:	jge    24580 <free_mem_ACcoeff+0x30>
   245e0:	add    rsp,0x8
   245e4:	mov    rdi,r13
   245e7:	pop    rbx
   245e8:	pop    rbp
   245e9:	pop    r12
   245eb:	pop    r13
   245ed:	jmp    42d0 <free@plt>
   245f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   245fd:	nop    DWORD PTR [rax]

0000000000024600 <free_mem_DCcoeff>:
   24600:	endbr64 
   24604:	push   r12
   24606:	lea    r12,[rdi+0x18]
   2460a:	push   rbp
   2460b:	mov    rbp,rdi
   2460e:	push   rbx
   2460f:	mov    rbx,rdi
   24612:	mov    rax,QWORD PTR [rbx]
   24615:	add    rbx,0x8
   24619:	mov    rdi,QWORD PTR [rax]
   2461c:	call   42d0 <free@plt>
   24621:	mov    rax,QWORD PTR [rbx-0x8]
   24625:	mov    rdi,QWORD PTR [rax+0x8]
   24629:	call   42d0 <free@plt>
   2462e:	mov    rdi,QWORD PTR [rbx-0x8]
   24632:	call   42d0 <free@plt>
   24637:	cmp    r12,rbx
   2463a:	jne    24612 <free_mem_DCcoeff+0x12>
   2463c:	pop    rbx
   2463d:	mov    rdi,rbp
   24640:	pop    rbp
   24641:	pop    r12
   24643:	jmp    42d0 <free@plt>
   24648:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000024650 <free_img>:
   24650:	endbr64 
   24654:	sub    rsp,0x8
   24658:	xor    eax,eax
   2465a:	call   602c0 <CloseSEIMessages>
   2465f:	mov    rax,QWORD PTR [rip+0x63f4a]        # 885b0 <img>
   24666:	mov    rdi,QWORD PTR [rax+0x118f0]
   2466d:	call   23980 <free_mem_mv>
   24672:	mov    rax,QWORD PTR [rip+0x63f37]        # 885b0 <img>
   24679:	mov    rdi,QWORD PTR [rax+0x118f8]
   24680:	call   23980 <free_mem_mv>
   24685:	mov    rax,QWORD PTR [rip+0x63f2c]        # 885b8 <input>
   2468c:	mov    esi,DWORD PTR [rax+0x4e8]
   24692:	test   esi,esi
   24694:	jne    24738 <free_img+0xe8>
   2469a:	mov    rax,QWORD PTR [rip+0x63f0f]        # 885b0 <img>
   246a1:	mov    rdi,QWORD PTR [rax+0x3738]
   246a8:	call   24550 <free_mem_ACcoeff>
   246ad:	mov    rax,QWORD PTR [rip+0x63efc]        # 885b0 <img>
   246b4:	mov    rdi,QWORD PTR [rax+0x3740]
   246bb:	call   24600 <free_mem_DCcoeff>
   246c0:	mov    rax,QWORD PTR [rip+0x63ef1]        # 885b8 <input>
   246c7:	mov    ecx,DWORD PTR [rax+0xb44]
   246cd:	test   ecx,ecx
   246cf:	jne    24790 <free_img+0x140>
   246d5:	mov    rcx,QWORD PTR [rip+0x63ed4]        # 885b0 <img>
   246dc:	movsxd rdx,DWORD PTR [rcx+0x11bec]
   246e3:	movsxd rax,DWORD PTR [rcx+0x11bf0]
   246ea:	mov    rcx,QWORD PTR [rcx+0x11860]
   246f1:	cmp    edx,eax
   246f3:	jle    24720 <free_img+0xd0>
   246f5:	shl    rdx,0x2
   246f9:	sub    rcx,rdx
   246fc:	lea    rdi,[rcx-0x4]
   24700:	call   42d0 <free@plt>
   24705:	mov    rax,QWORD PTR [rip+0x63eac]        # 885b8 <input>
   2470c:	mov    eax,DWORD PTR [rax+0xb44]
   24712:	test   eax,eax
   24714:	jne    24768 <free_img+0x118>
   24716:	add    rsp,0x8
   2471a:	ret    
   2471b:	nop    DWORD PTR [rax+rax*1+0x0]
   24720:	shl    rax,0x2
   24724:	sub    rcx,rax
   24727:	lea    rdi,[rcx-0x4]
   2472b:	call   42d0 <free@plt>
   24730:	jmp    24705 <free_img+0xb5>
   24732:	nop    WORD PTR [rax+rax*1+0x0]
   24738:	mov    rax,QWORD PTR [rip+0x63e71]        # 885b0 <img>
   2473f:	mov    rdi,QWORD PTR [rax+0x11900]
   24746:	call   23980 <free_mem_mv>
   2474b:	mov    rax,QWORD PTR [rip+0x63e5e]        # 885b0 <img>
   24752:	mov    rdi,QWORD PTR [rax+0x11908]
   24759:	call   23980 <free_mem_mv>
   2475e:	jmp    2469a <free_img+0x4a>
   24763:	nop    DWORD PTR [rax+rax*1+0x0]
   24768:	mov    rdi,QWORD PTR [rip+0x7a7f1]        # 9ef60 <rddata_bot_frame_mb+0xc40>
   2476f:	call   37fc0 <free_mem2Dint>
   24774:	mov    rdi,QWORD PTR [rip+0x7bce5]        # a0460 <rddata_top_field_mb+0xc40>
   2477b:	call   37fc0 <free_mem2Dint>
   24780:	mov    rdi,QWORD PTR [rip+0x915f9]        # b5d80 <rddata_bot_field_mb+0xc40>
   24787:	add    rsp,0x8
   2478b:	jmp    37fc0 <free_mem2Dint>
   24790:	mov    rdi,QWORD PTR [rip+0x90769]        # b4f00 <rddata_top_frame_mb+0xca0>
   24797:	call   23980 <free_mem_mv>
   2479c:	mov    rdi,QWORD PTR [rip+0x90765]        # b4f08 <rddata_top_frame_mb+0xca8>
   247a3:	call   23980 <free_mem_mv>
   247a8:	mov    rdi,QWORD PTR [rip+0x7a811]        # 9efc0 <rddata_bot_frame_mb+0xca0>
   247af:	call   23980 <free_mem_mv>
   247b4:	mov    rdi,QWORD PTR [rip+0x7a80d]        # 9efc8 <rddata_bot_frame_mb+0xca8>
   247bb:	call   23980 <free_mem_mv>
   247c0:	mov    rdi,QWORD PTR [rip+0x7bcf9]        # a04c0 <rddata_top_field_mb+0xca0>
   247c7:	call   23980 <free_mem_mv>
   247cc:	mov    rdi,QWORD PTR [rip+0x7bcf5]        # a04c8 <rddata_top_field_mb+0xca8>
   247d3:	call   23980 <free_mem_mv>
   247d8:	mov    rdi,QWORD PTR [rip+0x91601]        # b5de0 <rddata_bot_field_mb+0xca0>
   247df:	call   23980 <free_mem_mv>
   247e4:	mov    rdi,QWORD PTR [rip+0x915fd]        # b5de8 <rddata_bot_field_mb+0xca8>
   247eb:	call   23980 <free_mem_mv>
   247f0:	mov    rax,QWORD PTR [rip+0x63dc1]        # 885b8 <input>
   247f7:	mov    edx,DWORD PTR [rax+0x4e8]
   247fd:	test   edx,edx
   247ff:	jne    24870 <free_img+0x220>
   24801:	mov    rdi,QWORD PTR [rip+0x90660]        # b4e68 <rddata_top_frame_mb+0xc08>
   24808:	call   24550 <free_mem_ACcoeff>
   2480d:	mov    rdi,QWORD PTR [rip+0x9065c]        # b4e70 <rddata_top_frame_mb+0xc10>
   24814:	call   24600 <free_mem_DCcoeff>
   24819:	mov    rdi,QWORD PTR [rip+0x7a708]        # 9ef28 <rddata_bot_frame_mb+0xc08>
   24820:	call   24550 <free_mem_ACcoeff>
   24825:	mov    rdi,QWORD PTR [rip+0x7a704]        # 9ef30 <rddata_bot_frame_mb+0xc10>
   2482c:	call   24600 <free_mem_DCcoeff>
   24831:	mov    rdi,QWORD PTR [rip+0x7bbf0]        # a0428 <rddata_top_field_mb+0xc08>
   24838:	call   24550 <free_mem_ACcoeff>
   2483d:	mov    rdi,QWORD PTR [rip+0x7bbec]        # a0430 <rddata_top_field_mb+0xc10>
   24844:	call   24600 <free_mem_DCcoeff>
   24849:	mov    rdi,QWORD PTR [rip+0x914f8]        # b5d48 <rddata_bot_field_mb+0xc08>
   24850:	call   24550 <free_mem_ACcoeff>
   24855:	mov    rdi,QWORD PTR [rip+0x914f4]        # b5d50 <rddata_bot_field_mb+0xc10>
   2485c:	call   24600 <free_mem_DCcoeff>
   24861:	jmp    246d5 <free_img+0x85>
   24866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24870:	mov    rdi,QWORD PTR [rip+0x90699]        # b4f10 <rddata_top_frame_mb+0xcb0>
   24877:	call   23980 <free_mem_mv>
   2487c:	mov    rdi,QWORD PTR [rip+0x90695]        # b4f18 <rddata_top_frame_mb+0xcb8>
   24883:	call   23980 <free_mem_mv>
   24888:	mov    rdi,QWORD PTR [rip+0x7a741]        # 9efd0 <rddata_bot_frame_mb+0xcb0>
   2488f:	call   23980 <free_mem_mv>
   24894:	mov    rdi,QWORD PTR [rip+0x7a73d]        # 9efd8 <rddata_bot_frame_mb+0xcb8>
   2489b:	call   23980 <free_mem_mv>
   248a0:	mov    rdi,QWORD PTR [rip+0x7bc29]        # a04d0 <rddata_top_field_mb+0xcb0>
   248a7:	call   23980 <free_mem_mv>
   248ac:	mov    rdi,QWORD PTR [rip+0x7bc25]        # a04d8 <rddata_top_field_mb+0xcb8>
   248b3:	call   23980 <free_mem_mv>
   248b8:	mov    rdi,QWORD PTR [rip+0x91531]        # b5df0 <rddata_bot_field_mb+0xcb0>
   248bf:	call   23980 <free_mem_mv>
   248c4:	mov    rdi,QWORD PTR [rip+0x9152d]        # b5df8 <rddata_bot_field_mb+0xcb8>
   248cb:	call   23980 <free_mem_mv>
   248d0:	jmp    24801 <free_img+0x1b1>
   248d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000248e0 <report_stats_on_error>:
   248e0:	endbr64 
   248e4:	sub    rsp,0x8
   248e8:	mov    rax,QWORD PTR [rip+0x63cc1]        # 885b0 <img>
   248ef:	mov    rdx,QWORD PTR [rip+0x63cc2]        # 885b8 <input>
   248f6:	mov    eax,DWORD PTR [rax]
   248f8:	sub    eax,0x1
   248fb:	mov    DWORD PTR [rdx+0x8],eax
   248fe:	xor    eax,eax
   24900:	call   19300 <terminate_sequence>
   24905:	xor    eax,eax
   24907:	call   33570 <flush_dpb>
   2490c:	mov    edi,DWORD PTR [rip+0x8e14e]        # b2a60 <p_in>
   24912:	call   43c0 <close@plt>
   24917:	mov    edi,DWORD PTR [rip+0x91dd7]        # b66f4 <p_dec>
   2491d:	cmp    edi,0xffffffff
   24920:	je     24927 <report_stats_on_error+0x47>
   24922:	call   43c0 <close@plt>
   24927:	mov    rdi,QWORD PTR [rip+0x91db2]        # b66e0 <p_trace>
   2492e:	test   rdi,rdi
   24931:	je     24938 <report_stats_on_error+0x58>
   24933:	call   4370 <fclose@plt>
   24938:	xor    eax,eax
   2493a:	call   3b330 <Clear_Motion_Search_Module>
   2493f:	xor    eax,eax
   24941:	call   20770 <RandomIntraUninit>
   24946:	xor    eax,eax
   24948:	call   19a70 <FmoUninit>
   2494d:	mov    rax,QWORD PTR [rip+0x63c64]        # 885b8 <input>
   24954:	mov    edx,DWORD PTR [rax+0x528]
   2495a:	test   edx,edx
   2495c:	jne    24a00 <report_stats_on_error+0x120>
   24962:	xor    eax,eax
   24964:	call   4e680 <clear_rdopt>
   24969:	xor    eax,eax
   2496b:	call   20a80 <calc_buffer>
   24970:	mov    rax,QWORD PTR [rip+0x63c41]        # 885b8 <input>
   24977:	mov    eax,DWORD PTR [rax+0xc9c]
   2497d:	test   eax,eax
   2497f:	jne    24a10 <report_stats_on_error+0x130>
   24985:	xor    eax,eax
   24987:	call   21dd0 <report>
   2498c:	mov    rdi,QWORD PTR [rip+0x905ed]        # b4f80 <frame_pic>
   24993:	test   rdi,rdi
   24996:	je     2499d <report_stats_on_error+0xbd>
   24998:	call   20fc0 <free_picture.part.0>
   2499d:	mov    rdi,QWORD PTR [rip+0x7c474]        # a0e18 <top_pic>
   249a4:	test   rdi,rdi
   249a7:	je     249ae <report_stats_on_error+0xce>
   249a9:	call   20fc0 <free_picture.part.0>
   249ae:	mov    rdi,QWORD PTR [rip+0x8e533]        # b2ee8 <bottom_pic>
   249b5:	test   rdi,rdi
   249b8:	je     249bf <report_stats_on_error+0xdf>
   249ba:	call   20fc0 <free_picture.part.0>
   249bf:	xor    eax,eax
   249c1:	call   31a20 <free_dpb>
   249c6:	mov    rdi,QWORD PTR [rip+0x6443b]        # 88e08 <Co_located>
   249cd:	call   36470 <free_colocated>
   249d2:	xor    eax,eax
   249d4:	call   46ea0 <uninit_out_buffer>
   249d9:	xor    eax,eax
   249db:	call   232b0 <free_global_buffers>
   249e0:	xor    eax,eax
   249e2:	call   24650 <free_img>
   249e7:	xor    eax,eax
   249e9:	call   11b60 <free_context_memory>
   249ee:	xor    eax,eax
   249f0:	call   46770 <FreeNalPayloadBuffer>
   249f5:	xor    eax,eax
   249f7:	add    rsp,0x8
   249fb:	jmp    472a0 <FreeParameterSets>
   24a00:	xor    eax,eax
   24a02:	call   15100 <clear_gop_structure>
   24a07:	jmp    24962 <report_stats_on_error+0x82>
   24a0c:	nop    DWORD PTR [rax+0x0]
   24a10:	xor    eax,eax
   24a12:	call   21190 <report_frame_statistic>
   24a17:	jmp    24985 <report_stats_on_error+0xa5>
   24a1c:	nop    DWORD PTR [rax+0x0]

0000000000024a20 <combine_field>:
   24a20:	endbr64 
   24a24:	push   rbp
   24a25:	push   rbx
   24a26:	sub    rsp,0x8
   24a2a:	mov    rdx,QWORD PTR [rip+0x63b7f]        # 885b0 <img>
   24a31:	cmp    DWORD PTR [rdx+0x3c],0x1
   24a35:	jle    24abc <combine_field+0x9c>
   24a3b:	xor    ebx,ebx
   24a3d:	nop    DWORD PTR [rax]
   24a40:	mov    rax,QWORD PTR [rip+0x91419]        # b5e60 <imgY_com>
   24a47:	mov    rbp,rbx
   24a4a:	movsxd rdx,DWORD PTR [rdx+0x34]
   24a4e:	shl    rbp,0x4
   24a52:	mov    rdi,QWORD PTR [rax+rbp*1]
   24a56:	mov    rax,QWORD PTR [rip+0x65f3b]        # 8a998 <enc_top_picture>
   24a5d:	add    rdx,rdx
   24a60:	mov    rax,QWORD PTR [rax+0x1918]
   24a67:	mov    rsi,QWORD PTR [rax+rbx*8]
   24a6b:	call   4440 <memcpy@plt>
   24a70:	mov    rax,QWORD PTR [rip+0x913e9]        # b5e60 <imgY_com>
   24a77:	mov    rdi,QWORD PTR [rax+rbp*1+0x8]
   24a7c:	mov    rax,QWORD PTR [rip+0x63b2d]        # 885b0 <img>
   24a83:	movsxd rdx,DWORD PTR [rax+0x34]
   24a87:	mov    rax,QWORD PTR [rip+0x65f12]        # 8a9a0 <enc_bottom_picture>
   24a8e:	mov    rax,QWORD PTR [rax+0x1918]
   24a95:	add    rdx,rdx
   24a98:	mov    rsi,QWORD PTR [rax+rbx*8]
   24a9c:	add    rbx,0x1
   24aa0:	call   4440 <memcpy@plt>
   24aa5:	mov    rdx,QWORD PTR [rip+0x63b04]        # 885b0 <img>
   24aac:	mov    ecx,DWORD PTR [rdx+0x3c]
   24aaf:	mov    eax,ecx
   24ab1:	shr    eax,0x1f
   24ab4:	add    eax,ecx
   24ab6:	sar    eax,1
   24ab8:	cmp    eax,ebx
   24aba:	jg     24a40 <combine_field+0x20>
   24abc:	mov    eax,DWORD PTR [rdx+0x11bfc]
   24ac2:	test   eax,eax
   24ac4:	je     24bdd <combine_field+0x1bd>
   24aca:	cmp    DWORD PTR [rdx+0x40],0x1
   24ace:	jle    24bdd <combine_field+0x1bd>
   24ad4:	xor    ebx,ebx
   24ad6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24ae0:	mov    rax,QWORD PTR [rip+0x8f641]        # b4128 <imgUV_com>
   24ae7:	mov    rbp,rbx
   24aea:	movsxd rdx,DWORD PTR [rdx+0x38]
   24aee:	shl    rbp,0x4
   24af2:	mov    rax,QWORD PTR [rax]
   24af5:	add    rdx,rdx
   24af8:	mov    rdi,QWORD PTR [rax+rbp*1]
   24afc:	mov    rax,QWORD PTR [rip+0x65e95]        # 8a998 <enc_top_picture>
   24b03:	mov    rax,QWORD PTR [rax+0x1940]
   24b0a:	mov    rax,QWORD PTR [rax]
   24b0d:	mov    rsi,QWORD PTR [rax+rbx*8]
   24b11:	call   4440 <memcpy@plt>
   24b16:	mov    rax,QWORD PTR [rip+0x8f60b]        # b4128 <imgUV_com>
   24b1d:	mov    rax,QWORD PTR [rax]
   24b20:	mov    rdi,QWORD PTR [rax+rbp*1+0x8]
   24b25:	mov    rax,QWORD PTR [rip+0x63a84]        # 885b0 <img>
   24b2c:	movsxd rdx,DWORD PTR [rax+0x38]
   24b30:	mov    rax,QWORD PTR [rip+0x65e69]        # 8a9a0 <enc_bottom_picture>
   24b37:	mov    rax,QWORD PTR [rax+0x1940]
   24b3e:	add    rdx,rdx
   24b41:	mov    rax,QWORD PTR [rax]
   24b44:	mov    rsi,QWORD PTR [rax+rbx*8]
   24b48:	call   4440 <memcpy@plt>
   24b4d:	mov    rax,QWORD PTR [rip+0x8f5d4]        # b4128 <imgUV_com>
   24b54:	mov    rax,QWORD PTR [rax+0x8]
   24b58:	mov    rdi,QWORD PTR [rax+rbp*1]
   24b5c:	mov    rax,QWORD PTR [rip+0x63a4d]        # 885b0 <img>
   24b63:	movsxd rdx,DWORD PTR [rax+0x38]
   24b67:	mov    rax,QWORD PTR [rip+0x65e2a]        # 8a998 <enc_top_picture>
   24b6e:	mov    rax,QWORD PTR [rax+0x1940]
   24b75:	add    rdx,rdx
   24b78:	mov    rax,QWORD PTR [rax+0x8]
   24b7c:	mov    rsi,QWORD PTR [rax+rbx*8]
   24b80:	call   4440 <memcpy@plt>
   24b85:	mov    rax,QWORD PTR [rip+0x8f59c]        # b4128 <imgUV_com>
   24b8c:	mov    rax,QWORD PTR [rax+0x8]
   24b90:	mov    rdi,QWORD PTR [rax+rbp*1+0x8]
   24b95:	mov    rax,QWORD PTR [rip+0x63a14]        # 885b0 <img>
   24b9c:	movsxd rdx,DWORD PTR [rax+0x38]
   24ba0:	mov    rax,QWORD PTR [rip+0x65df9]        # 8a9a0 <enc_bottom_picture>
   24ba7:	mov    rax,QWORD PTR [rax+0x1940]
   24bae:	add    rdx,rdx
   24bb1:	mov    rax,QWORD PTR [rax+0x8]
   24bb5:	mov    rsi,QWORD PTR [rax+rbx*8]
   24bb9:	add    rbx,0x1
   24bbd:	call   4440 <memcpy@plt>
   24bc2:	mov    rdx,QWORD PTR [rip+0x639e7]        # 885b0 <img>
   24bc9:	mov    ecx,DWORD PTR [rdx+0x40]
   24bcc:	mov    eax,ecx
   24bce:	shr    eax,0x1f
   24bd1:	add    eax,ecx
   24bd3:	sar    eax,1
   24bd5:	cmp    eax,ebx
   24bd7:	jg     24ae0 <combine_field+0xc0>
   24bdd:	add    rsp,0x8
   24be1:	pop    rbx
   24be2:	pop    rbp
   24be3:	ret    
   24be4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   24bef:	nop

0000000000024bf0 <decide_fld_frame>:
   24bf0:	endbr64 
   24bf4:	movaps xmm4,xmm0
   24bf7:	pxor   xmm0,xmm0
   24bfb:	movapd xmm3,xmm2
   24bff:	cvtss2sd xmm1,xmm1
   24c03:	cvtsi2sd xmm0,esi
   24c07:	cvtss2sd xmm4,xmm4
   24c0b:	xor    eax,eax
   24c0d:	mulsd  xmm0,xmm2
   24c11:	pxor   xmm2,xmm2
   24c15:	cvtsi2sd xmm2,edi
   24c19:	mulsd  xmm2,xmm3
   24c1d:	addsd  xmm0,xmm4
   24c21:	addsd  xmm2,xmm1
   24c25:	comisd xmm2,xmm0
   24c29:	setbe  al
   24c2c:	ret    
   24c2d:	nop    DWORD PTR [rax]

0000000000024c30 <process_2nd_IGOP>:
   24c30:	endbr64 
   24c34:	mov    rdx,QWORD PTR [rip+0x6397d]        # 885b8 <input>
   24c3b:	mov    rsi,QWORD PTR [rip+0x6396e]        # 885b0 <img>
   24c42:	mov    eax,DWORD PTR [rdx+0x8]
   24c45:	lea    edi,[rax-0x1]
   24c48:	cmp    DWORD PTR [rsi],edi
   24c4a:	je     24c50 <process_2nd_IGOP+0x20>
   24c4c:	ret    
   24c4d:	nop    DWORD PTR [rax]
   24c50:	mov    r8d,DWORD PTR [rdx+0xb64]
   24c57:	test   r8d,r8d
   24c5a:	je     24c4c <process_2nd_IGOP+0x1c>
   24c5c:	mov    ecx,DWORD PTR [rip+0x63e8e]        # 88af0 <In2ndIGOP>
   24c62:	test   ecx,ecx
   24c64:	jne    24c4c <process_2nd_IGOP+0x1c>
   24c66:	mov    ecx,DWORD PTR [rdx+0x14]
   24c69:	mov    DWORD PTR [rip+0x63e7d],eax        # 88aec <start_frame_no_in_this_IGOP>
   24c6f:	add    eax,r8d
   24c72:	mov    DWORD PTR [rdx+0x8],eax
   24c75:	add    ecx,0x1
   24c78:	mov    DWORD PTR [rsi+0x8],0x0
   24c7f:	mov    DWORD PTR [rip+0x63e67],0x1        # 88af0 <In2ndIGOP>
   24c89:	imul   ecx,edi
   24c8c:	add    ecx,0x1
   24c8f:	mov    DWORD PTR [rip+0x63e53],ecx        # 88ae8 <start_tr_in_this_IGOP>
   24c95:	ret    
   24c96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000024ca0 <SetImgType>:
   24ca0:	endbr64 
   24ca4:	mov    r8,QWORD PTR [rip+0x6390d]        # 885b8 <input>
   24cab:	mov    rsi,QWORD PTR [rip+0x638fe]        # 885b0 <img>
   24cb2:	mov    edx,DWORD PTR [rip+0x63e34]        # 88aec <start_frame_no_in_this_IGOP>
   24cb8:	mov    edi,DWORD PTR [r8+0x4c8]
   24cbf:	mov    eax,DWORD PTR [rsi]
   24cc1:	test   edi,edi
   24cc3:	jne    24d00 <SetImgType+0x60>
   24cc5:	cmp    edx,eax
   24cc7:	je     24cf0 <SetImgType+0x50>
   24cc9:	mov    ecx,DWORD PTR [r8+0x4f8]
   24cd0:	mov    DWORD PTR [rsi+0x18],0x0
   24cd7:	test   ecx,ecx
   24cd9:	je     24ceb <SetImgType+0x4b>
   24cdb:	sub    eax,edx
   24cdd:	cdq    
   24cde:	idiv   ecx
   24ce0:	test   edx,edx
   24ce2:	jne    24ceb <SetImgType+0x4b>
   24ce4:	mov    DWORD PTR [rsi+0x18],0x3
   24ceb:	ret    
   24cec:	nop    DWORD PTR [rax+0x0]
   24cf0:	mov    DWORD PTR [rsi+0x18],0x2
   24cf7:	ret    
   24cf8:	nop    DWORD PTR [rax+rax*1+0x0]
   24d00:	sub    eax,edx
   24d02:	cdq    
   24d03:	mov    ecx,eax
   24d05:	idiv   edi
   24d07:	test   edx,edx
   24d09:	je     24cf0 <SetImgType+0x50>
   24d0b:	mov    edi,DWORD PTR [r8+0x4f8]
   24d12:	mov    DWORD PTR [rsi+0x18],0x0
   24d19:	test   edi,edi
   24d1b:	je     24ceb <SetImgType+0x4b>
   24d1d:	mov    eax,ecx
   24d1f:	cdq    
   24d20:	idiv   edi
   24d22:	test   edx,edx
   24d24:	je     24ce4 <SetImgType+0x44>
   24d26:	ret    
   24d27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000024d30 <GetStrength>:
   24d30:	endbr64 
   24d34:	push   r15
   24d36:	mov    r15d,r8d
   24d39:	push   r14
   24d3b:	mov    r14,rsi
   24d3e:	push   r13
   24d40:	push   r12
   24d42:	push   rbp
   24d43:	mov    ebp,ecx
   24d45:	push   rbx
   24d46:	mov    ebx,edx
   24d48:	sub    rsp,0xb8
   24d4f:	mov    QWORD PTR [rsp+0x10],rdi
   24d54:	mov    DWORD PTR [rsp+0x1c],edx
   24d58:	mov    DWORD PTR [rsp+0x78],r9d
   24d5d:	mov    rax,QWORD PTR fs:0x28
   24d66:	mov    QWORD PTR [rsp+0xa8],rax
   24d6e:	xor    eax,eax
   24d70:	mov    rax,QWORD PTR [rip+0x65c31]        # 8a9a8 <enc_picture>
   24d77:	mov    rdx,QWORD PTR [rax+0x1968]
   24d7e:	mov    rdi,QWORD PTR [rdx]
   24d81:	mov    QWORD PTR [rsp+0x60],rdi
   24d86:	mov    rdi,QWORD PTR [rdx+0x8]
   24d8a:	mov    rdx,QWORD PTR [rax+0x1950]
   24d91:	mov    rax,QWORD PTR [rax+0x1958]
   24d98:	mov    QWORD PTR [rsp+0x48],rdi
   24d9d:	mov    rdi,QWORD PTR [rdx]
   24da0:	mov    QWORD PTR [rsp+0x38],rdi
   24da5:	mov    rdi,QWORD PTR [rdx+0x8]
   24da9:	mov    QWORD PTR [rsp+0x40],rdi
   24dae:	mov    rdi,QWORD PTR [rax]
   24db1:	mov    rax,QWORD PTR [rax+0x8]
   24db5:	mov    QWORD PTR [rsp+0x50],rdi
   24dba:	mov    QWORD PTR [rsp+0x58],rax
   24dbf:	movsxd rax,ebx
   24dc2:	xor    ebx,ebx
   24dc4:	imul   rax,rax,0x278
   24dcb:	add    rax,QWORD PTR [rsi+0x3758]
   24dd2:	mov    r12,rbx
   24dd5:	mov    QWORD PTR [rsp+0x8],rax
   24dda:	lea    eax,[r8*4+0x0]
   24de2:	mov    DWORD PTR [rsp+0x2c],eax
   24de6:	mov    eax,0x1
   24deb:	sub    eax,ecx
   24ded:	mov    DWORD PTR [rsp+0x28],eax
   24df1:	lea    rax,[rsp+0x90]
   24df9:	mov    QWORD PTR [rsp+0x20],rax
   24dfe:	jmp    24ed2 <GetStrength+0x1a2>
   24e03:	nop    DWORD PTR [rax+rax*1+0x0]
   24e08:	mov    r13d,r12d
   24e0b:	mov    ebx,DWORD PTR [rsp+0x2c]
   24e0f:	mov    edx,r12d
   24e12:	and    r13d,0xfffffffc
   24e16:	mov    r8,QWORD PTR [rsp+0x20]
   24e1b:	mov    edi,DWORD PTR [rsp+0x1c]
   24e1f:	sub    edx,ebp
   24e21:	mov    ecx,0x1
   24e26:	mov    esi,ebx
   24e28:	sub    esi,DWORD PTR [rsp+0x28]
   24e2c:	call   30ae0 <getNeighbour>
   24e31:	mov    rcx,QWORD PTR [rsp+0x8]
   24e36:	mov    edx,DWORD PTR [r14+0x18]
   24e3a:	movsxd rax,DWORD PTR [rsp+0x94]
   24e42:	mov    edi,DWORD PTR [rsp+0x98]
   24e49:	mov    r8d,DWORD PTR [rcx+0x214]
   24e50:	mov    esi,DWORD PTR [rsp+0x9c]
   24e57:	imul   rax,rax,0x278
   24e5e:	add    rax,QWORD PTR [r14+0x3758]
   24e65:	mov    ecx,DWORD PTR [rax+0x214]
   24e6b:	cmp    r8d,ecx
   24e6e:	setne  BYTE PTR [rip+0x92560]        # b73d5 <mixedModeEdgeFlag>
   24e75:	sub    edx,0x3
   24e78:	cmp    edx,0x1
   24e7b:	jbe    24f00 <GetStrength+0x1d0>
   24e81:	mov    edx,0x3
   24e86:	test   r15d,r15d
   24e89:	jne    24ead <GetStrength+0x17d>
   24e8b:	mov    r9d,DWORD PTR [r14+0x11ad0]
   24e92:	mov    edx,0x4
   24e97:	test   r9d,r9d
   24e9a:	je     24fe0 <GetStrength+0x2b0>
   24ea0:	or     r8d,ecx
   24ea3:	je     24ead <GetStrength+0x17d>
   24ea5:	test   ebp,ebp
   24ea7:	sete   dl
   24eaa:	add    edx,0x3
   24ead:	mov    rcx,QWORD PTR [rsp+0x10]
   24eb2:	mov    BYTE PTR [rcx+r12*1],dl
   24eb6:	mov    edx,DWORD PTR [rax+0x48]
   24eb9:	and    edx,0xfffffffb
   24ebc:	sub    edx,0x9
   24ebf:	cmp    edx,0x1
   24ec2:	ja     24f70 <GetStrength+0x240>
   24ec8:	add    r12,0x1
   24ecc:	cmp    r12,0x10
   24ed0:	je     24f3f <GetStrength+0x20f>
   24ed2:	mov    ebx,r12d
   24ed5:	test   ebp,ebp
   24ed7:	je     24e08 <GetStrength+0xd8>
   24edd:	mov    eax,DWORD PTR [rsp+0x2c]
   24ee1:	cmp    r15d,0x4
   24ee5:	mov    r13d,0x0
   24eeb:	mov    edx,0x1
   24ef0:	cmovl  r13d,eax
   24ef4:	cmovl  edx,eax
   24ef7:	jmp    24e16 <GetStrength+0xe6>
   24efc:	nop    DWORD PTR [rax+0x0]
   24f00:	mov    eax,0x3
   24f05:	test   r15d,r15d
   24f08:	jne    24f2c <GetStrength+0x1fc>
   24f0a:	mov    r11d,DWORD PTR [r14+0x11ad0]
   24f11:	mov    eax,0x4
   24f16:	test   r11d,r11d
   24f19:	je     24ff8 <GetStrength+0x2c8>
   24f1f:	or     r8d,ecx
   24f22:	je     24f2c <GetStrength+0x1fc>
   24f24:	test   ebp,ebp
   24f26:	sete   al
   24f29:	add    eax,0x3
   24f2c:	mov    rdi,QWORD PTR [rsp+0x10]
   24f31:	mov    BYTE PTR [rdi+r12*1],al
   24f35:	add    r12,0x1
   24f39:	cmp    r12,0x10
   24f3d:	jne    24ed2 <GetStrength+0x1a2>
   24f3f:	mov    rax,QWORD PTR [rsp+0xa8]
   24f47:	xor    rax,QWORD PTR fs:0x28
   24f50:	jne    2541d <GetStrength+0x6ed>
   24f56:	add    rsp,0xb8
   24f5d:	pop    rbx
   24f5e:	pop    rbp
   24f5f:	pop    r12
   24f61:	pop    r13
   24f63:	pop    r14
   24f65:	pop    r15
   24f67:	ret    
   24f68:	nop    DWORD PTR [rax+rax*1+0x0]
   24f70:	mov    rcx,QWORD PTR [rsp+0x8]
   24f75:	mov    ecx,DWORD PTR [rcx+0x48]
   24f78:	mov    edx,ecx
   24f7a:	mov    DWORD PTR [rsp+0x30],ecx
   24f7e:	and    edx,0xfffffffb
   24f81:	sub    edx,0x9
   24f84:	cmp    edx,0x1
   24f87:	jbe    24ec8 <GetStrength+0x198>
   24f8d:	sar    ebx,0x2
   24f90:	mov    edx,0x1
   24f95:	add    r13d,ebx
   24f98:	mov    rbx,QWORD PTR [rsp+0x8]
   24f9d:	mov    ecx,r13d
   24fa0:	shl    edx,cl
   24fa2:	movsxd rdx,edx
   24fa5:	test   QWORD PTR [rbx+0x1d0],rdx
   24fac:	jne    24fca <GetStrength+0x29a>
   24fae:	and    esi,0xfffffffc
   24fb1:	sar    edi,0x2
   24fb4:	mov    edx,0x1
   24fb9:	lea    ecx,[rsi+rdi*1]
   24fbc:	shl    edx,cl
   24fbe:	movsxd rdx,edx
   24fc1:	test   QWORD PTR [rax+0x1d0],rdx
   24fc8:	je     25010 <GetStrength+0x2e0>
   24fca:	mov    rax,QWORD PTR [rsp+0x10]
   24fcf:	mov    BYTE PTR [rax+r12*1],0x2
   24fd4:	jmp    24ec8 <GetStrength+0x198>
   24fd9:	nop    DWORD PTR [rax+0x0]
   24fe0:	mov    ecx,DWORD PTR [r14+0x1c]
   24fe4:	test   ecx,ecx
   24fe6:	je     24ead <GetStrength+0x17d>
   24fec:	jmp    24ea5 <GetStrength+0x175>
   24ff1:	nop    DWORD PTR [rax+0x0]
   24ff8:	mov    r10d,DWORD PTR [r14+0x1c]
   24ffc:	test   r10d,r10d
   24fff:	je     24f2c <GetStrength+0x1fc>
   25005:	jmp    24f24 <GetStrength+0x1f4>
   2500a:	nop    WORD PTR [rax+rax*1+0x0]
   25010:	movzx  ebx,BYTE PTR [rip+0x923be]        # b73d5 <mixedModeEdgeFlag>
   25017:	test   bl,bl
   25019:	je     2502a <GetStrength+0x2fa>
   2501b:	mov    rax,QWORD PTR [rsp+0x10]
   25020:	mov    BYTE PTR [rax+r12*1],0x1
   25025:	jmp    24ec8 <GetStrength+0x198>
   2502a:	mov    edi,DWORD PTR [rsp+0x1c]
   2502e:	lea    rdx,[rsp+0x8c]
   25036:	lea    rsi,[rsp+0x88]
   2503e:	call   30380 <get_mb_block_pos>
   25043:	mov    edi,DWORD PTR [rsp+0x88]
   2504a:	mov    edx,r13d
   2504d:	sar    r13d,0x2
   25051:	and    edx,0x3
   25054:	mov    esi,DWORD PTR [rsp+0xa4]
   2505b:	mov    eax,DWORD PTR [rsp+0xa0]
   25062:	mov    r10,0xffffffffffffffff
   25069:	lea    edx,[rdx+rdi*4]
   2506c:	mov    edi,DWORD PTR [rsp+0x8c]
   25073:	sar    esi,0x2
   25076:	movsxd rdx,edx
   25079:	sar    eax,0x2
   2507c:	lea    r13d,[r13+rdi*4+0x0]
   25081:	mov    rdi,QWORD PTR [rsp+0x38]
   25086:	lea    r8,[rdx*8+0x0]
   2508e:	movsxd r13,r13d
   25091:	mov    rdi,QWORD PTR [rdi+rdx*8]
   25095:	cmp    WORD PTR [rdi+r13*2],0x0
   2509b:	js     250aa <GetStrength+0x37a>
   2509d:	mov    rdi,QWORD PTR [rsp+0x50]
   250a2:	mov    rdi,QWORD PTR [rdi+rdx*8]
   250a6:	mov    r10,QWORD PTR [rdi+r13*8]
   250aa:	cdqe   
   250ac:	movsxd r9,esi
   250af:	mov    r11,0xffffffffffffffff
   250b6:	lea    rdi,[rax*8+0x0]
   250be:	mov    QWORD PTR [rsp+0x30],rdi
   250c3:	mov    rdi,QWORD PTR [rsp+0x38]
   250c8:	mov    rsi,QWORD PTR [rdi+rax*8]
   250cc:	cmp    WORD PTR [rsi+r9*2],0x0
   250d2:	js     250e1 <GetStrength+0x3b1>
   250d4:	mov    rdi,QWORD PTR [rsp+0x50]
   250d9:	mov    rsi,QWORD PTR [rdi+rax*8]
   250dd:	mov    r11,QWORD PTR [rsi+r9*8]
   250e1:	mov    rdi,QWORD PTR [rsp+0x40]
   250e6:	mov    rsi,0xffffffffffffffff
   250ed:	mov    rdi,QWORD PTR [rdi+rdx*8]
   250f1:	cmp    WORD PTR [rdi+r13*2],0x0
   250f7:	js     25106 <GetStrength+0x3d6>
   250f9:	mov    rdi,QWORD PTR [rsp+0x58]
   250fe:	mov    rsi,QWORD PTR [rdi+rdx*8]
   25102:	mov    rsi,QWORD PTR [rsi+r13*8]
   25106:	mov    rdi,QWORD PTR [rsp+0x40]
   2510b:	mov    rdi,QWORD PTR [rdi+rax*8]
   2510f:	mov    rcx,rdi
   25112:	mov    rdi,0xffffffffffffffff
   25119:	cmp    WORD PTR [rcx+r9*2],0x0
   2511f:	js     2512e <GetStrength+0x3fe>
   25121:	mov    rdi,QWORD PTR [rsp+0x58]
   25126:	mov    rdi,QWORD PTR [rdi+rax*8]
   2512a:	mov    rdi,QWORD PTR [rdi+r9*8]
   2512e:	cmp    r10,r11
   25131:	jne    25209 <GetStrength+0x4d9>
   25137:	cmp    rsi,rdi
   2513a:	jne    25209 <GetStrength+0x4d9>
   25140:	mov    rdi,QWORD PTR [rsp+0x10]
   25145:	mov    BYTE PTR [rdi+r12*1],0x0
   2514a:	cmp    r10,rsi
   2514d:	jne    2531d <GetStrength+0x5ed>
   25153:	mov    rcx,QWORD PTR [rsp+0x60]
   25158:	mov    rsi,QWORD PTR [rcx+rdx*8]
   2515c:	mov    rdi,QWORD PTR [rsi+r13*8]
   25160:	mov    rsi,QWORD PTR [rcx+rax*8]
   25164:	mov    rsi,QWORD PTR [rsi+r9*8]
   25168:	movsx  r8d,WORD PTR [rdi]
   2516c:	movsx  edi,WORD PTR [rdi+0x2]
   25170:	movsx  ecx,WORD PTR [rsi]
   25173:	movsx  r10d,WORD PTR [rsi+0x2]
   25178:	mov    rsi,QWORD PTR [rsp+0x48]
   2517d:	mov    rax,QWORD PTR [rsi+rax*8]
   25181:	mov    rdx,QWORD PTR [rsi+rdx*8]
   25185:	mov    rax,QWORD PTR [rax+r9*8]
   25189:	mov    rdx,QWORD PTR [rdx+r13*8]
   2518d:	movsx  esi,WORD PTR [rax]
   25190:	movsx  r9d,WORD PTR [rax+0x2]
   25195:	mov    eax,r8d
   25198:	sub    eax,ecx
   2519a:	movsx  r13d,WORD PTR [rdx]
   2519e:	movsx  r11d,WORD PTR [rdx+0x2]
   251a3:	cdq    
   251a4:	xor    eax,edx
   251a6:	sub    eax,edx
   251a8:	cmp    eax,0x3
   251ab:	mov    eax,edi
   251ad:	setg   BYTE PTR [rsp+0x30]
   251b2:	sub    eax,r10d
   251b5:	cdq    
   251b6:	xor    eax,edx
   251b8:	sub    eax,edx
   251ba:	cmp    eax,DWORD PTR [rsp+0x78]
   251be:	setge  al
   251c1:	or     al,BYTE PTR [rsp+0x30]
   251c5:	mov    BYTE PTR [rsp+0x30],al
   251c9:	mov    eax,r13d
   251cc:	sub    eax,esi
   251ce:	cdq    
   251cf:	xor    eax,edx
   251d1:	sub    eax,edx
   251d3:	movzx  edx,BYTE PTR [rsp+0x30]
   251d8:	cmp    eax,0x3
   251db:	setg   al
   251de:	or     dl,al
   251e0:	jne    253bb <GetStrength+0x68b>
   251e6:	mov    eax,r11d
   251e9:	sub    eax,r9d
   251ec:	cdq    
   251ed:	xor    eax,edx
   251ef:	sub    eax,edx
   251f1:	cmp    eax,DWORD PTR [rsp+0x78]
   251f5:	jge    253bb <GetStrength+0x68b>
   251fb:	mov    rax,QWORD PTR [rsp+0x10]
   25200:	mov    BYTE PTR [rax+r12*1],bl
   25204:	jmp    24ec8 <GetStrength+0x198>
   25209:	cmp    r10,rdi
   2520c:	jne    2501b <GetStrength+0x2eb>
   25212:	cmp    r11,rsi
   25215:	jne    2501b <GetStrength+0x2eb>
   2521b:	mov    rdi,QWORD PTR [rsp+0x10]
   25220:	mov    rcx,QWORD PTR [rsp+0x60]
   25225:	mov    BYTE PTR [rdi+r12*1],0x0
   2522a:	lea    rdi,[rcx+r8*1]
   2522e:	add    r8,QWORD PTR [rsp+0x48]
   25233:	mov    QWORD PTR [rsp+0x70],rdi
   25238:	mov    rdi,QWORD PTR [rsp+0x48]
   2523d:	add    rdi,QWORD PTR [rsp+0x30]
   25242:	mov    QWORD PTR [rsp+0x68],r8
   25247:	mov    QWORD PTR [rsp+0x30],rdi
   2524c:	lea    rdi,[rax*8+0x0]
   25254:	add    rdi,rcx
   25257:	mov    r8,rdi
   2525a:	cmp    r10,rsi
   2525d:	je     25153 <GetStrength+0x423>
   25263:	mov    rbx,QWORD PTR [rsp+0x70]
   25268:	mov    rcx,QWORD PTR [rbx]
   2526b:	mov    rbx,QWORD PTR [rsp+0x30]
   25270:	mov    rsi,QWORD PTR [rcx+r13*8]
   25274:	mov    rcx,QWORD PTR [rbx]
   25277:	mov    rcx,QWORD PTR [rcx+r9*8]
   2527b:	movsx  edi,WORD PTR [rsi]
   2527e:	movsx  esi,WORD PTR [rsi+0x2]
   25282:	movsx  ebx,WORD PTR [rcx]
   25285:	mov    DWORD PTR [rsp+0x7c],esi
   25289:	movsx  esi,WORD PTR [rcx+0x2]
   2528d:	mov    DWORD PTR [rsp+0x30],ebx
   25291:	mov    rbx,QWORD PTR [rsp+0x68]
   25296:	mov    DWORD PTR [rsp+0x70],esi
   2529a:	mov    rcx,QWORD PTR [rbx]
   2529d:	mov    rsi,QWORD PTR [rcx+r13*8]
   252a1:	mov    rcx,QWORD PTR [r8]
   252a4:	mov    rcx,QWORD PTR [rcx+r9*8]
   252a8:	movsx  ebx,WORD PTR [rsi]
   252ab:	movsx  esi,WORD PTR [rsi+0x2]
   252af:	movsx  r8d,WORD PTR [rcx]
   252b3:	movsx  ecx,WORD PTR [rcx+0x2]
   252b7:	cmp    r10,r11
   252ba:	je     2531d <GetStrength+0x5ed>
   252bc:	sub    edi,DWORD PTR [rsp+0x30]
   252c0:	mov    r11d,DWORD PTR [rsp+0x78]
   252c5:	mov    eax,edi
   252c7:	sar    eax,0x1f
   252ca:	xor    edi,eax
   252cc:	sub    edi,eax
   252ce:	mov    eax,DWORD PTR [rsp+0x7c]
   252d2:	cmp    edi,0x3
   252d5:	setg   dil
   252d9:	sub    eax,DWORD PTR [rsp+0x70]
   252dd:	cdq    
   252de:	xor    eax,edx
   252e0:	sub    eax,edx
   252e2:	cmp    eax,r11d
   252e5:	setge  al
   252e8:	or     edi,eax
   252ea:	mov    eax,ebx
   252ec:	mov    rbx,QWORD PTR [rsp+0x10]
   252f1:	sub    eax,r8d
   252f4:	cdq    
   252f5:	xor    eax,edx
   252f7:	sub    eax,edx
   252f9:	cmp    eax,0x3
   252fc:	setg   al
   252ff:	sub    esi,ecx
   25301:	or     edi,eax
   25303:	mov    eax,esi
   25305:	sar    eax,0x1f
   25308:	xor    esi,eax
   2530a:	sub    esi,eax
   2530c:	cmp    esi,r11d
   2530f:	setge  al
   25312:	or     eax,edi
   25314:	mov    BYTE PTR [rbx+r12*1],al
   25318:	jmp    24ec8 <GetStrength+0x198>
   2531d:	mov    rbx,QWORD PTR [rsp+0x60]
   25322:	mov    rcx,QWORD PTR [rbx+rdx*8]
   25326:	mov    rsi,QWORD PTR [rcx+r13*8]
   2532a:	mov    rcx,QWORD PTR [rbx+rax*8]
   2532e:	mov    rbx,QWORD PTR [rsp+0x48]
   25333:	mov    rcx,QWORD PTR [rcx+r9*8]
   25337:	mov    rdx,QWORD PTR [rbx+rdx*8]
   2533b:	mov    rax,QWORD PTR [rbx+rax*8]
   2533f:	mov    ebx,DWORD PTR [rsp+0x78]
   25343:	mov    rdi,QWORD PTR [rdx+r13*8]
   25347:	mov    r8,QWORD PTR [rax+r9*8]
   2534b:	movsx  edx,WORD PTR [rcx]
   2534e:	movsx  eax,WORD PTR [rsi]
   25351:	movsx  ecx,WORD PTR [rcx+0x2]
   25355:	sub    eax,edx
   25357:	cdq    
   25358:	xor    eax,edx
   2535a:	sub    eax,edx
   2535c:	cmp    eax,0x3
   2535f:	movsx  eax,WORD PTR [rsi+0x2]
   25363:	setg   dl
   25366:	sub    eax,ecx
   25368:	mov    ecx,eax
   2536a:	sar    ecx,0x1f
   2536d:	xor    eax,ecx
   2536f:	sub    eax,ecx
   25371:	movsx  ecx,WORD PTR [r8]
   25375:	cmp    eax,ebx
   25377:	setge  al
   2537a:	or     edx,eax
   2537c:	movsx  eax,WORD PTR [rdi]
   2537f:	sub    eax,ecx
   25381:	mov    ecx,eax
   25383:	sar    ecx,0x1f
   25386:	xor    eax,ecx
   25388:	sub    eax,ecx
   2538a:	movsx  ecx,WORD PTR [r8+0x2]
   2538f:	cmp    eax,0x3
   25392:	setg   al
   25395:	or     edx,eax
   25397:	movsx  eax,WORD PTR [rdi+0x2]
   2539b:	sub    eax,ecx
   2539d:	mov    ecx,eax
   2539f:	sar    ecx,0x1f
   253a2:	xor    eax,ecx
   253a4:	sub    eax,ecx
   253a6:	cmp    eax,ebx
   253a8:	setge  al
   253ab:	or     edx,eax
   253ad:	mov    rax,QWORD PTR [rsp+0x10]
   253b2:	mov    BYTE PTR [rax+r12*1],dl
   253b6:	jmp    24ec8 <GetStrength+0x198>
   253bb:	sub    r8d,esi
   253be:	mov    ebx,DWORD PTR [rsp+0x78]
   253c2:	mov    eax,r8d
   253c5:	sar    eax,0x1f
   253c8:	xor    r8d,eax
   253cb:	sub    r8d,eax
   253ce:	cmp    r8d,0x3
   253d2:	setg   dl
   253d5:	sub    edi,r9d
   253d8:	mov    eax,edi
   253da:	sar    eax,0x1f
   253dd:	xor    edi,eax
   253df:	sub    edi,eax
   253e1:	cmp    edi,ebx
   253e3:	setge  al
   253e6:	sub    r13d,ecx
   253e9:	or     edx,eax
   253eb:	mov    eax,r13d
   253ee:	sar    eax,0x1f
   253f1:	xor    r13d,eax
   253f4:	sub    r13d,eax
   253f7:	mov    eax,r11d
   253fa:	cmp    r13d,0x3
   253fe:	setg   cl
   25401:	sub    eax,r10d
   25404:	or     edx,ecx
   25406:	mov    ecx,eax
   25408:	sar    ecx,0x1f
   2540b:	xor    eax,ecx
   2540d:	sub    eax,ecx
   2540f:	cmp    eax,ebx
   25411:	mov    ebx,edx
   25413:	setge  cl
   25416:	or     ebx,ecx
   25418:	jmp    251fb <GetStrength+0x4cb>
   2541d:	call   4390 <__stack_chk_fail@plt>
   25422:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2542d:	nop    DWORD PTR [rax]

0000000000025430 <EdgeLoop>:
   25430:	endbr64 
   25434:	push   r15
   25436:	mov    r15d,ecx
   25439:	push   r14
   2543b:	push   r13
   2543d:	mov    r13,rdx
   25440:	push   r12
   25442:	push   rbp
   25443:	push   rbx
   25444:	sub    rsp,0x188
   2544b:	mov    QWORD PTR [rsp+0x68],rdi
   25450:	movabs rdi,0x1000000010
   2545a:	mov    QWORD PTR [rsp+0x28],rsi
   2545f:	mov    DWORD PTR [rsp+0x70],r8d
   25464:	mov    DWORD PTR [rsp+0xa8],r9d
   2546c:	mov    rax,QWORD PTR fs:0x28
   25475:	mov    QWORD PTR [rsp+0x178],rax
   2547d:	xor    eax,eax
   2547f:	mov    QWORD PTR [rsp+0x158],rdi
   25487:	movabs rax,0x800000000
   25491:	mov    QWORD PTR [rsp+0x150],rax
   25499:	mov    QWORD PTR [rsp+0x160],rax
   254a1:	movabs rax,0x1000000008
   254ab:	mov    QWORD PTR [rsp+0x168],rax
   254b3:	mov    eax,DWORD PTR [rsp+0x1d8]
   254ba:	test   eax,eax
   254bc:	jne    25a90 <EdgeLoop+0x660>
   254c2:	mov    eax,DWORD PTR [rdx+0x11bd4]
   254c8:	mov    BYTE PTR [rsp+0x53],0x0
   254cd:	mov    DWORD PTR [rsp+0x4],0x10
   254d5:	lea    ecx,[rax-0x8]
   254d8:	mov    eax,0x1
   254dd:	shl    eax,cl
   254df:	mov    DWORD PTR [rsp+0x60],eax
   254e3:	mov    eax,DWORD PTR [rsp+0x1c8]
   254ea:	mov    edi,DWORD PTR [rsp+0x1d0]
   254f1:	xor    r14d,r14d
   254f4:	shl    eax,0x2
   254f7:	mov    DWORD PTR [rsp+0x10],eax
   254fb:	movsxd rax,r15d
   254fe:	imul   rax,rax,0x278
   25505:	mov    QWORD PTR [rsp+0x8],rax
   2550a:	mov    eax,DWORD PTR [rsp+0x1d0]
   25511:	lea    ebx,[rax+rax*1]
   25514:	mov    eax,0x1
   25519:	mov    r12d,eax
   2551c:	sub    eax,DWORD PTR [rsp+0x1c0]
   25523:	mov    DWORD PTR [rsp+0xd8],ebx
   2552a:	mov    DWORD PTR [rsp+0x14],eax
   2552e:	mov    eax,DWORD PTR [rsp+0x1d0]
   25535:	mov    DWORD PTR [rsp+0xf0],ebx
   2553c:	sub    r12d,DWORD PTR [rsp+0x1d8]
   25544:	neg    eax
   25546:	movsxd rdx,eax
   25549:	lea    rcx,[rdx+rdx*1]
   2554d:	lea    edx,[rax+rax*1]
   25550:	shl    eax,0x2
   25553:	mov    QWORD PTR [rsp+0x78],rcx
   25558:	movsxd rcx,DWORD PTR [rsp+0x1d0]
   25560:	movsxd rdx,edx
   25563:	cdqe   
   25565:	add    rax,rax
   25568:	mov    QWORD PTR [rsp+0xe0],rcx
   25570:	add    rcx,rcx
   25573:	mov    QWORD PTR [rsp+0x90],rcx
   2557b:	lea    rcx,[rdx+rdx*1]
   2557f:	movsxd rdx,ebx
   25582:	lea    rsi,[rdx+rdx*1]
   25586:	lea    edx,[rdi*4+0x0]
   2558d:	mov    QWORD PTR [rsp+0x80],rcx
   25595:	sub    edi,edx
   25597:	mov    QWORD PTR [rsp+0x98],rsi
   2559f:	movsxd rcx,edi
   255a2:	mov    QWORD PTR [rsp+0xc8],rax
   255aa:	mov    rdx,rcx
   255ad:	add    rcx,rcx
   255b0:	mov    QWORD PTR [rsp+0x88],rcx
   255b8:	mov    ecx,DWORD PTR [rsp+0x1d0]
   255bf:	add    edx,edx
   255c1:	movsxd rdx,edx
   255c4:	add    ecx,ebx
   255c6:	lea    rax,[rdx+rdx*1]
   255ca:	movsxd rcx,ecx
   255cd:	mov    QWORD PTR [rsp+0xd0],rax
   255d5:	lea    rax,[rsp+0x130]
   255dd:	lea    rsi,[rcx+rcx*1]
   255e1:	mov    ecx,ebx
   255e3:	mov    QWORD PTR [rsp+0x20],rax
   255e8:	lea    rax,[rsp+0x110]
   255f0:	neg    ecx
   255f2:	mov    QWORD PTR [rsp+0xa0],rsi
   255fa:	movsxd rcx,ecx
   255fd:	mov    QWORD PTR [rsp+0x18],rax
   25602:	lea    rdi,[rcx+rcx*1]
   25606:	mov    QWORD PTR [rsp+0xe8],rsi
   2560e:	mov    QWORD PTR [rsp+0xc0],rdi
   25616:	jmp    258ef <EdgeLoop+0x4bf>
   2561b:	nop    DWORD PTR [rax+rax*1+0x0]
   25620:	mov    ebp,DWORD PTR [rsp+0x10]
   25624:	mov    ebx,r14d
   25627:	mov    r8,QWORD PTR [rsp+0x20]
   2562c:	mov    edx,ebx
   2562e:	mov    ecx,r12d
   25631:	mov    esi,ebp
   25633:	mov    edi,r15d
   25636:	call   30ae0 <getNeighbour>
   2563b:	mov    r8,QWORD PTR [rsp+0x18]
   25640:	mov    ecx,r12d
   25643:	mov    esi,ebp
   25645:	sub    ebx,DWORD PTR [rsp+0x1c0]
   2564c:	sub    esi,DWORD PTR [rsp+0x14]
   25650:	mov    edi,r15d
   25653:	mov    edx,ebx
   25655:	call   30ae0 <getNeighbour>
   2565a:	mov    rcx,QWORD PTR [r13+0x3758]
   25661:	mov    rax,QWORD PTR [rsp+0x8]
   25666:	lea    rdx,[rcx+rax*1]
   2566a:	movsxd rax,DWORD PTR [rsp+0x114]
   25672:	mov    esi,DWORD PTR [rdx+0x214]
   25678:	imul   rax,rax,0x278
   2567f:	add    rax,rcx
   25682:	test   esi,esi
   25684:	jne    25920 <EdgeLoop+0x4f0>
   2568a:	mov    ebp,DWORD PTR [rax+0x214]
   25690:	xor    r8d,r8d
   25693:	mov    edi,DWORD PTR [rsp+0x110]
   2569a:	mov    ecx,r14d
   2569d:	test   ebp,ebp
   2569f:	setne  r8b
   256a3:	setne  BYTE PTR [rip+0x91d2a]        # b73d4 <fieldModeFilteringFlag>
   256aa:	cmp    BYTE PTR [rsp+0x53],0x0
   256af:	je     256c1 <EdgeLoop+0x291>
   256b1:	mov    r9d,r14d
   256b4:	mov    ecx,r14d
   256b7:	sar    r9d,1
   256ba:	and    ecx,0x1
   256bd:	lea    ecx,[rcx+r9*4]
   256c1:	test   edi,edi
   256c3:	jne    256d5 <EdgeLoop+0x2a5>
   256c5:	mov    r10d,DWORD PTR [rdx+0x264]
   256cc:	test   r10d,r10d
   256cf:	jne    258e0 <EdgeLoop+0x4b0>
   256d5:	mov    r9d,DWORD PTR [rsp+0x1c0]
   256dd:	test   r9d,r9d
   256e0:	je     259c8 <EdgeLoop+0x598>
   256e6:	test   r8d,r8d
   256e9:	jne    25af0 <EdgeLoop+0x6c0>
   256ef:	mov    rsi,QWORD PTR [rsp+0xa0]
   256f7:	mov    rdi,QWORD PTR [rsp+0x98]
   256ff:	mov    r9,QWORD PTR [rsp+0x90]
   25707:	mov    rbx,QWORD PTR [rsp+0x78]
   2570c:	mov    QWORD PTR [rsp+0x40],rsi
   25711:	mov    rsi,QWORD PTR [rsp+0x88]
   25719:	mov    QWORD PTR [rsp+0x30],rdi
   2571e:	mov    QWORD PTR [rsp+0x48],rsi
   25723:	mov    rsi,QWORD PTR [rsp+0x80]
   2572b:	mov    QWORD PTR [rsp+0x38],rsi
   25730:	mov    edi,DWORD PTR [rsp+0x1d8]
   25737:	mov    eax,DWORD PTR [rax+0xc]
   2573a:	mov    esi,DWORD PTR [rdx+0xc]
   2573d:	test   edi,edi
   2573f:	je     259b0 <EdgeLoop+0x580>
   25745:	movsxd rdx,DWORD PTR [rsp+0x1e0]
   2574d:	mov    r10d,0x33
   25753:	lea    rdi,[rip+0x452e6]        # 6aa40 <QP_SCALE_CR>
   2575a:	mov    edx,DWORD PTR [r13+rdx*4+0x11c0c]
   25762:	add    eax,edx
   25764:	cmp    eax,0x33
   25767:	cmovg  eax,r10d
   2576b:	xor    r8d,r8d
   2576e:	test   eax,eax
   25770:	cmovs  eax,r8d
   25774:	add    edx,esi
   25776:	cmp    edx,0x33
   25779:	cmovg  edx,r10d
   2577d:	cdqe   
   2577f:	movzx  eax,BYTE PTR [rdi+rax*1]
   25783:	test   edx,edx
   25785:	cmovs  edx,r8d
   25789:	movsxd rdx,edx
   2578c:	movzx  edx,BYTE PTR [rdi+rdx*1]
   25790:	lea    eax,[rax+rdx*1+0x1]
   25794:	sar    eax,1
   25796:	mov    rdi,QWORD PTR [rsp+0x28]
   2579b:	movsxd rcx,ecx
   2579e:	movzx  esi,BYTE PTR [rdi+rcx*1]
   257a2:	test   esi,esi
   257a4:	je     258e0 <EdgeLoop+0x4b0>
   257aa:	mov    r11,QWORD PTR [rsp+0x68]
   257af:	movsxd rdx,DWORD PTR [rsp+0x144]
   257b7:	movsxd rdi,DWORD PTR [rsp+0x140]
   257bf:	mov    rdx,QWORD PTR [r11+rdx*8]
   257c3:	lea    r10,[rdx+rdi*2]
   257c7:	movsxd rdx,DWORD PTR [rsp+0x124]
   257cf:	movsxd rdi,DWORD PTR [rsp+0x120]
   257d7:	mov    rdx,QWORD PTR [r11+rdx*8]
   257db:	movzx  r11d,WORD PTR [r10]
   257df:	lea    r8,[rdx+rdi*2]
   257e3:	mov    edi,DWORD PTR [rsp+0x70]
   257e7:	mov    DWORD PTR [rsp+0x64],r11d
   257ec:	mov    QWORD PTR [rsp+0x58],r8
   257f1:	lea    edx,[rax+rdi*1]
   257f4:	mov    edi,0x33
   257f9:	cmp    edx,0x33
   257fc:	cmovg  edx,edi
   257ff:	xor    ebp,ebp
   25801:	lea    rdi,[rip+0x62f98]        # 887a0 <ALPHA_TABLE>
   25808:	test   edx,edx
   2580a:	cmovs  edx,ebp
   2580d:	movsxd rdx,edx
   25810:	movzx  edi,BYTE PTR [rdi+rdx*1]
   25814:	imul   edi,DWORD PTR [rsp+0x60]
   25819:	mov    DWORD PTR [rsp+0x54],edi
   2581d:	movzx  edi,WORD PTR [r8]
   25821:	mov    r8d,r11d
   25824:	sub    r8d,edi
   25827:	mov    r11d,r8d
   2582a:	mov    DWORD PTR [rsp+0x74],r8d
   2582f:	sar    r11d,0x1f
   25833:	xor    r8d,r11d
   25836:	sub    r8d,r11d
   25839:	cmp    DWORD PTR [rsp+0x54],r8d
   2583e:	jle    258e0 <EdgeLoop+0x4b0>
   25844:	add    eax,DWORD PTR [rsp+0xa8]
   2584b:	mov    r11d,0x33
   25851:	cmp    eax,0x33
   25854:	cmovg  eax,r11d
   25858:	lea    r11,[rip+0x62f01]        # 88760 <BETA_TABLE>
   2585f:	test   eax,eax
   25861:	cmovs  eax,ebp
   25864:	add    rbx,QWORD PTR [rsp+0x58]
   25869:	movzx  ebp,WORD PTR [rbx]
   2586c:	mov    QWORD PTR [rsp+0xb8],rbx
   25874:	lea    rbx,[r10+r9*1]
   25878:	mov    QWORD PTR [rsp+0xb0],rbx
   25880:	mov    r9d,DWORD PTR [rsp+0x64]
   25885:	cdqe   
   25887:	movzx  ebx,WORD PTR [rbx]
   2588a:	movzx  r11d,BYTE PTR [r11+rax*1]
   2588f:	mov    WORD PTR [rsp+0x108],bp
   25897:	imul   r11d,DWORD PTR [rsp+0x60]
   2589d:	sub    r9d,ebx
   258a0:	mov    WORD PTR [rsp+0xde],bx
   258a8:	mov    DWORD PTR [rsp+0xac],ebx
   258af:	mov    ebx,r9d
   258b2:	sar    ebx,0x1f
   258b5:	xor    r9d,ebx
   258b8:	sub    r9d,ebx
   258bb:	mov    ebx,edi
   258bd:	sub    ebx,ebp
   258bf:	sub    r9d,r11d
   258c2:	mov    eax,ebx
   258c4:	sar    ebx,0x1f
   258c7:	xor    eax,ebx
   258c9:	sub    eax,ebx
   258cb:	sub    eax,r11d
   258ce:	test   r9d,eax
   258d1:	js     25b10 <EdgeLoop+0x6e0>
   258d7:	nop    WORD PTR [rax+rax*1+0x0]
   258e0:	add    r14d,0x1
   258e4:	cmp    r14d,DWORD PTR [rsp+0x4]
   258e9:	jge    25ac0 <EdgeLoop+0x690>
   258ef:	mov    eax,DWORD PTR [rsp+0x1c0]
   258f6:	test   eax,eax
   258f8:	je     25620 <EdgeLoop+0x1f0>
   258fe:	cmp    DWORD PTR [rsp+0x1c8],0x3
   25906:	mov    ebx,0x1
   2590b:	mov    ebp,r14d
   2590e:	cmovle ebx,DWORD PTR [rsp+0x10]
   25913:	jmp    25627 <EdgeLoop+0x1f7>
   25918:	nop    DWORD PTR [rax+rax*1+0x0]
   25920:	cmp    BYTE PTR [rsp+0x53],0x0
   25925:	mov    BYTE PTR [rip+0x91aa8],0x1        # b73d4 <fieldModeFilteringFlag>
   2592c:	mov    edi,DWORD PTR [rsp+0x110]
   25933:	jne    25a00 <EdgeLoop+0x5d0>
   25939:	test   edi,edi
   2593b:	je     25a70 <EdgeLoop+0x640>
   25941:	mov    ecx,DWORD PTR [rsp+0x1c0]
   25948:	test   ecx,ecx
   2594a:	je     259c0 <EdgeLoop+0x590>
   2594c:	mov    edi,DWORD PTR [rax+0x214]
   25952:	mov    r8d,DWORD PTR [rsp+0x1d0]
   2595a:	mov    ecx,r14d
   2595d:	lea    esi,[r8+r8*1]
   25961:	movsxd r9,r8d
   25964:	movsxd r10,esi
   25967:	add    esi,r8d
   2596a:	add    r9,r9
   2596d:	movsxd rsi,esi
   25970:	lea    rbx,[r10+r10*1]
   25974:	add    rsi,rsi
   25977:	mov    QWORD PTR [rsp+0x30],rbx
   2597c:	mov    QWORD PTR [rsp+0x40],rsi
   25981:	test   edi,edi
   25983:	je     25a49 <EdgeLoop+0x619>
   25989:	mov    rsi,QWORD PTR [rsp+0x88]
   25991:	mov    rbx,QWORD PTR [rsp+0x78]
   25996:	mov    QWORD PTR [rsp+0x48],rsi
   2599b:	mov    rsi,QWORD PTR [rsp+0x80]
   259a3:	mov    QWORD PTR [rsp+0x38],rsi
   259a8:	jmp    25730 <EdgeLoop+0x300>
   259ad:	nop    DWORD PTR [rax]
   259b0:	lea    eax,[rax+rsi*1+0x1]
   259b4:	sar    eax,1
   259b6:	jmp    25796 <EdgeLoop+0x366>
   259bb:	nop    DWORD PTR [rax+rax*1+0x0]
   259c0:	mov    ecx,r14d
   259c3:	nop    DWORD PTR [rax+rax*1+0x0]
   259c8:	mov    QWORD PTR [rsp+0x40],0x6
   259d1:	mov    r9d,0x2
   259d7:	mov    rbx,0xfffffffffffffffe
   259de:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffa
   259e7:	mov    QWORD PTR [rsp+0x30],0x4
   259f0:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffc
   259f9:	jmp    25730 <EdgeLoop+0x300>
   259fe:	xchg   ax,ax
   25a00:	mov    ebx,DWORD PTR [rax+0x214]
   25a06:	test   ebx,ebx
   25a08:	jne    25a80 <EdgeLoop+0x650>
   25a0a:	lea    ecx,[r14+r14*1]
   25a0e:	test   edi,edi
   25a10:	je     25a73 <EdgeLoop+0x643>
   25a12:	mov    r11d,DWORD PTR [rsp+0x1c0]
   25a1a:	test   r11d,r11d
   25a1d:	je     259c8 <EdgeLoop+0x598>
   25a1f:	mov    rsi,QWORD PTR [rsp+0xe0]
   25a27:	lea    r9,[rsi+rsi*1]
   25a2b:	movsxd rsi,DWORD PTR [rsp+0xf0]
   25a33:	lea    rdi,[rsi+rsi*1]
   25a37:	mov    rsi,QWORD PTR [rsp+0xe8]
   25a3f:	mov    QWORD PTR [rsp+0x30],rdi
   25a44:	mov    QWORD PTR [rsp+0x40],rsi
   25a49:	mov    rdi,QWORD PTR [rsp+0xd0]
   25a51:	mov    rsi,QWORD PTR [rsp+0xc8]
   25a59:	mov    rbx,QWORD PTR [rsp+0xc0]
   25a61:	mov    QWORD PTR [rsp+0x48],rdi
   25a66:	mov    QWORD PTR [rsp+0x38],rsi
   25a6b:	jmp    25730 <EdgeLoop+0x300>
   25a70:	mov    ecx,r14d
   25a73:	mov    r8d,0x1
   25a79:	jmp    256c5 <EdgeLoop+0x295>
   25a7e:	xchg   ax,ax
   25a80:	mov    r8d,0x1
   25a86:	jmp    256b1 <EdgeLoop+0x281>
   25a8b:	nop    DWORD PTR [rax+rax*1+0x0]
   25a90:	movsxd rax,DWORD PTR [rdx+0x11bfc]
   25a97:	mov    ecx,DWORD PTR [rdx+0x11bd8]
   25a9d:	movsxd rdx,DWORD PTR [rsp+0x1c0]
   25aa5:	lea    rax,[rax+rdx*4]
   25aa9:	mov    edi,DWORD PTR [rsp+rax*4+0x150]
   25ab0:	mov    DWORD PTR [rsp+0x4],edi
   25ab4:	test   edi,edi
   25ab6:	jg     25cc0 <EdgeLoop+0x890>
   25abc:	nop    DWORD PTR [rax+0x0]
   25ac0:	mov    rax,QWORD PTR [rsp+0x178]
   25ac8:	xor    rax,QWORD PTR fs:0x28
   25ad1:	jne    26007 <EdgeLoop+0xbd7>
   25ad7:	add    rsp,0x188
   25ade:	pop    rbx
   25adf:	pop    rbp
   25ae0:	pop    r12
   25ae2:	pop    r13
   25ae4:	pop    r14
   25ae6:	pop    r15
   25ae8:	ret    
   25ae9:	nop    DWORD PTR [rax+0x0]
   25af0:	mov    r8d,DWORD PTR [rsp+0xd8]
   25af8:	test   esi,esi
   25afa:	mov    edi,DWORD PTR [rax+0x214]
   25b00:	cmovne r8d,DWORD PTR [rsp+0x1d0]
   25b09:	jmp    2595d <EdgeLoop+0x52d>
   25b0e:	xchg   ax,ax
   25b10:	mov    rbx,QWORD PTR [rsp+0x38]
   25b15:	add    rbx,QWORD PTR [rsp+0x58]
   25b1a:	lea    rdx,[rdx+rdx*4]
   25b1e:	movzx  eax,WORD PTR [rbx]
   25b21:	mov    QWORD PTR [rsp+0xf8],rbx
   25b29:	mov    DWORD PTR [rsp+0x38],eax
   25b2d:	mov    r9d,eax
   25b30:	mov    rax,QWORD PTR [rsp+0x30]
   25b35:	add    rax,r10
   25b38:	movzx  ebx,WORD PTR [rax]
   25b3b:	mov    QWORD PTR [rsp+0x100],rax
   25b43:	lea    rax,[rip+0x62af6]        # 88640 <CLIP_TAB>
   25b4a:	add    rax,rdx
   25b4d:	mov    edx,DWORD PTR [rsp+0x1d8]
   25b54:	movzx  eax,BYTE PTR [rax+rsi*1]
   25b58:	imul   eax,DWORD PTR [rsp+0x60]
   25b5d:	mov    WORD PTR [rsp+0x10a],bx
   25b65:	mov    DWORD PTR [rsp+0x30],ebx
   25b69:	mov    ebx,eax
   25b6b:	mov    eax,DWORD PTR [rsp+0x64]
   25b6f:	lea    ecx,[rdi+rax*1]
   25b72:	mov    DWORD PTR [rsp+0xf4],ecx
   25b79:	test   edx,edx
   25b7b:	jne    25ce0 <EdgeLoop+0x8b0>
   25b81:	sub    eax,DWORD PTR [rsp+0x30]
   25b85:	cdq    
   25b86:	xor    eax,edx
   25b88:	sub    eax,edx
   25b8a:	mov    ecx,eax
   25b8c:	mov    eax,edi
   25b8e:	sub    eax,DWORD PTR [rsp+0x38]
   25b92:	cdq    
   25b93:	sub    ecx,r11d
   25b96:	xor    eax,edx
   25b98:	mov    DWORD PTR [rsp+0x10c],ecx
   25b9f:	shr    ecx,0x1f
   25ba2:	sub    eax,edx
   25ba4:	sub    eax,r11d
   25ba7:	mov    r11d,eax
   25baa:	shr    eax,0x1f
   25bad:	cmp    esi,0x4
   25bb0:	je     25dc0 <EdgeLoop+0x990>
   25bb6:	add    eax,ebx
   25bb8:	mov    esi,DWORD PTR [rsp+0x74]
   25bbc:	add    ecx,eax
   25bbe:	mov    eax,ebp
   25bc0:	sub    eax,DWORD PTR [rsp+0xac]
   25bc7:	lea    edx,[rax+rsi*4+0x4]
   25bcb:	mov    eax,ecx
   25bcd:	sar    edx,0x3
   25bd0:	neg    eax
   25bd2:	cmp    eax,edx
   25bd4:	jle    25d50 <EdgeLoop+0x920>
   25bda:	xor    edx,edx
   25bdc:	add    edi,eax
   25bde:	mov    ecx,edi
   25be0:	js     25bf3 <EdgeLoop+0x7c3>
   25be2:	cmp    DWORD PTR [r13+0x11bec],edi
   25be9:	cmovle ecx,DWORD PTR [r13+0x11bec]
   25bf1:	mov    edx,ecx
   25bf3:	mov    rdi,QWORD PTR [rsp+0x58]
   25bf8:	mov    WORD PTR [rdi],dx
   25bfb:	mov    edi,DWORD PTR [rsp+0x64]
   25bff:	xor    edx,edx
   25c01:	sub    edi,eax
   25c03:	mov    eax,edi
   25c05:	js     25c18 <EdgeLoop+0x7e8>
   25c07:	cmp    DWORD PTR [r13+0x11bec],edi
   25c0e:	cmovle eax,DWORD PTR [r13+0x11bec]
   25c16:	mov    edx,eax
   25c18:	mov    WORD PTR [r10],dx
   25c1c:	test   r11d,r11d
   25c1f:	jns    25c61 <EdgeLoop+0x831>
   25c21:	mov    rax,QWORD PTR [rsp+0xb8]
   25c29:	lea    edx,[rbp+rbp*1+0x0]
   25c2d:	movzx  ecx,WORD PTR [rax]
   25c30:	mov    eax,DWORD PTR [rsp+0xf4]
   25c37:	add    eax,0x1
   25c3a:	sar    eax,1
   25c3c:	add    eax,DWORD PTR [rsp+0x38]
   25c40:	sub    eax,edx
   25c42:	mov    edx,ebx
   25c44:	sar    eax,1
   25c46:	neg    edx
   25c48:	cmp    eax,edx
   25c4a:	jge    25f5f <EdgeLoop+0xb2f>
   25c50:	mov    eax,ebx
   25c52:	neg    eax
   25c54:	mov    rdi,QWORD PTR [rsp+0xb8]
   25c5c:	add    eax,ecx
   25c5e:	mov    WORD PTR [rdi],ax
   25c61:	mov    esi,DWORD PTR [rsp+0x10c]
   25c68:	test   esi,esi
   25c6a:	jns    258e0 <EdgeLoop+0x4b0>
   25c70:	mov    rax,QWORD PTR [rsp+0xb0]
   25c78:	mov    ecx,DWORD PTR [rsp+0xac]
   25c7f:	movzx  edx,WORD PTR [rax]
   25c82:	mov    eax,DWORD PTR [rsp+0xf4]
   25c89:	add    ecx,ecx
   25c8b:	add    eax,0x1
   25c8e:	sar    eax,1
   25c90:	add    eax,DWORD PTR [rsp+0x30]
   25c94:	sub    eax,ecx
   25c96:	mov    ecx,ebx
   25c98:	sar    eax,1
   25c9a:	neg    ecx
   25c9c:	cmp    eax,ecx
   25c9e:	jge    25f69 <EdgeLoop+0xb39>
   25ca4:	mov    eax,ebx
   25ca6:	neg    eax
   25ca8:	mov    rdi,QWORD PTR [rsp+0xb0]
   25cb0:	add    eax,edx
   25cb2:	mov    WORD PTR [rdi],ax
   25cb5:	jmp    258e0 <EdgeLoop+0x4b0>
   25cba:	nop    WORD PTR [rax+rax*1+0x0]
   25cc0:	sub    ecx,0x8
   25cc3:	mov    eax,0x1
   25cc8:	shl    eax,cl
   25cca:	cmp    edi,0x8
   25ccd:	mov    DWORD PTR [rsp+0x60],eax
   25cd1:	sete   BYTE PTR [rsp+0x53]
   25cd6:	jmp    254e3 <EdgeLoop+0xb3>
   25cdb:	nop    DWORD PTR [rax+rax*1+0x0]
   25ce0:	cmp    esi,0x4
   25ce3:	je     25d88 <EdgeLoop+0x958>
   25ce9:	mov    ecx,DWORD PTR [rsp+0x74]
   25ced:	mov    eax,ebp
   25cef:	sub    eax,DWORD PTR [rsp+0xac]
   25cf6:	lea    edx,[rax+rcx*4+0x4]
   25cfa:	mov    eax,ebx
   25cfc:	sar    edx,0x3
   25cff:	not    eax
   25d01:	cmp    eax,edx
   25d03:	jle    25d70 <EdgeLoop+0x940>
   25d05:	xor    edx,edx
   25d07:	add    edi,eax
   25d09:	mov    ecx,edi
   25d0b:	js     25d1e <EdgeLoop+0x8ee>
   25d0d:	cmp    DWORD PTR [r13+0x11bf0],edi
   25d14:	cmovle ecx,DWORD PTR [r13+0x11bf0]
   25d1c:	mov    edx,ecx
   25d1e:	mov    rcx,QWORD PTR [rsp+0x58]
   25d23:	mov    esi,DWORD PTR [rsp+0x64]
   25d27:	mov    WORD PTR [rcx],dx
   25d2a:	xor    edx,edx
   25d2c:	sub    esi,eax
   25d2e:	mov    eax,esi
   25d30:	js     25d43 <EdgeLoop+0x913>
   25d32:	cmp    DWORD PTR [r13+0x11bf0],esi
   25d39:	cmovle eax,DWORD PTR [r13+0x11bf0]
   25d41:	mov    edx,eax
   25d43:	mov    WORD PTR [r10],dx
   25d47:	jmp    258e0 <EdgeLoop+0x4b0>
   25d4c:	nop    DWORD PTR [rax+0x0]
   25d50:	cmp    ecx,edx
   25d52:	mov    eax,edx
   25d54:	cmovle eax,ecx
   25d57:	xor    edx,edx
   25d59:	add    edi,eax
   25d5b:	mov    ecx,edi
   25d5d:	jns    25be2 <EdgeLoop+0x7b2>
   25d63:	jmp    25bf3 <EdgeLoop+0x7c3>
   25d68:	nop    DWORD PTR [rax+rax*1+0x0]
   25d70:	lea    eax,[rbx+0x1]
   25d73:	cmp    eax,edx
   25d75:	cmovg  eax,edx
   25d78:	xor    edx,edx
   25d7a:	add    edi,eax
   25d7c:	mov    ecx,edi
   25d7e:	jns    25d0d <EdgeLoop+0x8dd>
   25d80:	jmp    25d1e <EdgeLoop+0x8ee>
   25d82:	nop    WORD PTR [rax+rax*1+0x0]
   25d88:	mov    ecx,DWORD PTR [rsp+0xac]
   25d8f:	mov    eax,DWORD PTR [rsp+0x64]
   25d93:	lea    eax,[rax+rcx*2]
   25d96:	lea    eax,[rbp+rax*1+0x2]
   25d9a:	sar    eax,0x2
   25d9d:	mov    WORD PTR [r10],ax
   25da1:	lea    eax,[rdi+rbp*2]
   25da4:	mov    rdi,QWORD PTR [rsp+0x58]
   25da9:	lea    eax,[rcx+rax*1+0x2]
   25dad:	sar    eax,0x2
   25db0:	mov    WORD PTR [rdi],ax
   25db3:	jmp    258e0 <EdgeLoop+0x4b0>
   25db8:	nop    DWORD PTR [rax+rax*1+0x0]
   25dc0:	mov    edx,DWORD PTR [rsp+0x54]
   25dc4:	mov    esi,eax
   25dc6:	sar    edx,0x2
   25dc9:	add    edx,0x1
   25dcc:	cmp    edx,r8d
   25dcf:	setge  dl
   25dd2:	and    esi,edx
   25dd4:	and    dl,cl
   25dd6:	je     25f45 <EdgeLoop+0xb15>
   25ddc:	mov    eax,DWORD PTR [rsp+0xac]
   25de3:	mov    ecx,DWORD PTR [rsp+0x30]
   25de7:	add    eax,DWORD PTR [rsp+0xf4]
   25dee:	lea    eax,[rbp+rax*2+0x0]
   25df2:	lea    eax,[rcx+rax*1+0x4]
   25df6:	sar    eax,0x3
   25df9:	mov    rcx,QWORD PTR [rsp+0x48]
   25dfe:	mov    rbx,QWORD PTR [rsp+0x58]
   25e03:	movzx  r8d,WORD PTR [rbx+rcx*1]
   25e08:	mov    rcx,QWORD PTR [rsp+0x40]
   25e0d:	movzx  ecx,WORD PTR [r10+rcx*1]
   25e12:	mov    WORD PTR [r10],ax
   25e16:	test   sil,sil
   25e19:	je     25eb2 <EdgeLoop+0xa82>
   25e1f:	mov    eax,DWORD PTR [rsp+0xf4]
   25e26:	mov    r10d,DWORD PTR [rsp+0xac]
   25e2e:	add    eax,ebp
   25e30:	lea    eax,[r10+rax*2]
   25e34:	movzx  r10d,r9w
   25e38:	lea    eax,[r10+rax*1+0x4]
   25e3d:	sar    eax,0x3
   25e40:	mov    WORD PTR [rbx],ax
   25e43:	test   dl,dl
   25e45:	je     25ed3 <EdgeLoop+0xaa3>
   25e4b:	mov    esi,DWORD PTR [rsp+0x64]
   25e4f:	mov    ebx,DWORD PTR [rsp+0x30]
   25e53:	mov    edx,DWORD PTR [rsp+0xac]
   25e5a:	mov    r10,QWORD PTR [rsp+0xb0]
   25e62:	mov    eax,esi
   25e64:	add    eax,ebx
   25e66:	add    eax,edx
   25e68:	lea    eax,[rdi+rax*1+0x2]
   25e6c:	sar    eax,0x2
   25e6f:	mov    WORD PTR [r10],ax
   25e73:	mov    eax,DWORD PTR [rsp+0x38]
   25e77:	add    eax,ebp
   25e79:	add    eax,edi
   25e7b:	mov    rdi,QWORD PTR [rsp+0xb8]
   25e83:	lea    eax,[rsi+rax*1+0x2]
   25e87:	sar    eax,0x2
   25e8a:	mov    WORD PTR [rdi],ax
   25e8d:	movzx  eax,cx
   25e90:	mov    edi,DWORD PTR [rsp+0xf4]
   25e97:	add    eax,ebx
   25e99:	lea    eax,[rbx+rax*2]
   25e9c:	add    eax,edx
   25e9e:	lea    eax,[rdi+rax*1+0x4]
   25ea2:	mov    rdi,QWORD PTR [rsp+0x100]
   25eaa:	sar    eax,0x3
   25ead:	mov    WORD PTR [rdi],ax
   25eb0:	jmp    25f20 <EdgeLoop+0xaf0>
   25eb2:	mov    ebx,DWORD PTR [rsp+0xac]
   25eb9:	lea    eax,[rdi+rbp*2]
   25ebc:	lea    eax,[rbx+rax*1+0x2]
   25ec0:	mov    rbx,QWORD PTR [rsp+0x58]
   25ec5:	sar    eax,0x2
   25ec8:	mov    WORD PTR [rbx],ax
   25ecb:	test   dl,dl
   25ecd:	jne    25f73 <EdgeLoop+0xb43>
   25ed3:	mov    rax,QWORD PTR [rsp+0xb0]
   25edb:	movzx  ecx,WORD PTR [rsp+0xde]
   25ee3:	mov    WORD PTR [rax],cx
   25ee6:	test   sil,sil
   25ee9:	je     25fdf <EdgeLoop+0xbaf>
   25eef:	mov    eax,DWORD PTR [rsp+0x38]
   25ef3:	add    eax,ebp
   25ef5:	add    eax,edi
   25ef7:	mov    edi,DWORD PTR [rsp+0x64]
   25efb:	lea    eax,[rdi+rax*1+0x2]
   25eff:	mov    rdi,QWORD PTR [rsp+0xb8]
   25f07:	sar    eax,0x2
   25f0a:	mov    WORD PTR [rdi],ax
   25f0d:	mov    rax,QWORD PTR [rsp+0x100]
   25f15:	movzx  edi,WORD PTR [rsp+0x10a]
   25f1d:	mov    WORD PTR [rax],di
   25f20:	mov    edi,DWORD PTR [rsp+0x38]
   25f24:	movzx  eax,r8w
   25f28:	add    eax,edi
   25f2a:	lea    eax,[rdi+rax*2]
   25f2d:	mov    edi,DWORD PTR [rsp+0xf4]
   25f34:	add    eax,ebp
   25f36:	lea    eax,[rdi+rax*1+0x4]
   25f3a:	sar    eax,0x3
   25f3d:	mov    r9d,eax
   25f40:	jmp    25fce <EdgeLoop+0xb9e>
   25f45:	mov    eax,DWORD PTR [rsp+0x64]
   25f49:	mov    ecx,DWORD PTR [rsp+0xac]
   25f50:	lea    eax,[rax+rcx*2]
   25f53:	lea    eax,[rbp+rax*1+0x2]
   25f57:	sar    eax,0x2
   25f5a:	jmp    25df9 <EdgeLoop+0x9c9>
   25f5f:	cmp    eax,ebx
   25f61:	cmovg  eax,ebx
   25f64:	jmp    25c54 <EdgeLoop+0x824>
   25f69:	cmp    eax,ebx
   25f6b:	cmovg  eax,ebx
   25f6e:	jmp    25ca8 <EdgeLoop+0x878>
   25f73:	mov    esi,DWORD PTR [rsp+0x30]
   25f77:	mov    eax,DWORD PTR [rsp+0x64]
   25f7b:	mov    ebx,DWORD PTR [rsp+0xac]
   25f82:	add    eax,esi
   25f84:	add    eax,ebx
   25f86:	lea    eax,[rdi+rax*1+0x2]
   25f8a:	mov    rdi,QWORD PTR [rsp+0xb0]
   25f92:	sar    eax,0x2
   25f95:	mov    WORD PTR [rdi],ax
   25f98:	mov    rax,QWORD PTR [rsp+0xb8]
   25fa0:	movzx  edi,WORD PTR [rsp+0x108]
   25fa8:	mov    WORD PTR [rax],di
   25fab:	movzx  eax,cx
   25fae:	mov    edi,DWORD PTR [rsp+0xf4]
   25fb5:	add    eax,esi
   25fb7:	lea    eax,[rsi+rax*2]
   25fba:	add    eax,ebx
   25fbc:	lea    eax,[rdi+rax*1+0x4]
   25fc0:	mov    rdi,QWORD PTR [rsp+0x100]
   25fc8:	sar    eax,0x3
   25fcb:	mov    WORD PTR [rdi],ax
   25fce:	mov    rax,QWORD PTR [rsp+0xf8]
   25fd6:	mov    WORD PTR [rax],r9w
   25fda:	jmp    258e0 <EdgeLoop+0x4b0>
   25fdf:	mov    rax,QWORD PTR [rsp+0xb8]
   25fe7:	movzx  edi,WORD PTR [rsp+0x108]
   25fef:	mov    WORD PTR [rax],di
   25ff2:	mov    rax,QWORD PTR [rsp+0x100]
   25ffa:	movzx  edi,WORD PTR [rsp+0x10a]
   26002:	mov    WORD PTR [rax],di
   26005:	jmp    25fce <EdgeLoop+0xb9e>
   26007:	call   4390 <__stack_chk_fail@plt>
   2600c:	nop    DWORD PTR [rax+0x0]

0000000000026010 <DeblockMb>:
   26010:	endbr64 
   26014:	push   r15
   26016:	mov    r15d,ecx
   26019:	push   r14
   2601b:	push   r13
   2601d:	push   r12
   2601f:	mov    r12,rdi
   26022:	push   rbp
   26023:	push   rbx
   26024:	sub    rsp,0x98
   2602b:	mov    QWORD PTR [rsp+0x48],rsi
   26030:	lea    rsi,[rsp+0x58]
   26035:	mov    QWORD PTR [rsp+0x40],rdx
   2603a:	lea    rdx,[rsp+0x5c]
   2603f:	mov    rax,QWORD PTR fs:0x28
   26048:	mov    QWORD PTR [rsp+0x88],rax
   26050:	xor    eax,eax
   26052:	mov    DWORD PTR [rsp+0x60],0x1
   2605a:	mov    DWORD PTR [rdi+0x11bbc],0x1
   26064:	mov    edi,ecx
   26066:	mov    DWORD PTR [rsp+0x68],0x1
   2606e:	call   303f0 <get_mb_pos>
   26073:	mov    edx,DWORD PTR [rsp+0x5c]
   26077:	xor    esi,esi
   26079:	movsxd rax,r15d
   2607c:	mov    ecx,DWORD PTR [r12+0x11ad0]
   26084:	mov    edi,DWORD PTR [rsp+0x58]
   26088:	test   edx,edx
   2608a:	setne  sil
   2608e:	imul   rax,rax,0x278
   26095:	add    rax,QWORD PTR [r12+0x3758]
   2609d:	mov    ebx,DWORD PTR [rax+0x23c]
   260a3:	mov    r14,rax
   260a6:	xor    eax,eax
   260a8:	test   ebx,ebx
   260aa:	sete   al
   260ad:	mov    DWORD PTR [rsp+0x6c],eax
   260b1:	mov    DWORD PTR [rsp+0x64],eax
   260b5:	test   ecx,ecx
   260b7:	je     26130 <DeblockMb+0x120>
   260b9:	mov    eax,DWORD PTR [r12+0x1c]
   260be:	cmp    edx,0x10
   260c1:	je     26358 <DeblockMb+0x348>
   260c7:	mov    DWORD PTR [rsp+0x18],0x2
   260cf:	test   eax,eax
   260d1:	jne    26142 <DeblockMb+0x132>
   260d3:	cmp    DWORD PTR [r14+0x214],0x1
   260db:	sbb    eax,eax
   260dd:	and    eax,0x2
   260e0:	add    eax,0x2
   260e3:	mov    DWORD PTR [rsp+0x18],eax
   260e7:	mov    eax,DWORD PTR [r14+0x264]
   260ee:	cmp    eax,0x1
   260f1:	jne    2614e <DeblockMb+0x13e>
   260f3:	nop    DWORD PTR [rax+rax*1+0x0]
   260f8:	mov    DWORD PTR [r12+0x11bbc],0x0
   26104:	mov    rax,QWORD PTR [rsp+0x88]
   2610c:	xor    rax,QWORD PTR fs:0x28
   26115:	jne    265d6 <DeblockMb+0x5c6>
   2611b:	add    rsp,0x98
   26122:	pop    rbx
   26123:	pop    rbp
   26124:	pop    r12
   26126:	pop    r13
   26128:	pop    r14
   2612a:	pop    r15
   2612c:	ret    
   2612d:	nop    DWORD PTR [rax]
   26130:	cmp    DWORD PTR [r12+0x1c],0x1
   26136:	sbb    eax,eax
   26138:	and    eax,0x2
   2613b:	add    eax,0x2
   2613e:	mov    DWORD PTR [rsp+0x18],eax
   26142:	mov    eax,DWORD PTR [r14+0x264]
   26149:	cmp    eax,0x1
   2614c:	je     260f8 <DeblockMb+0xe8>
   2614e:	cmp    eax,0x2
   26151:	je     26310 <DeblockMb+0x300>
   26157:	xor    eax,eax
   26159:	test   edi,edi
   2615b:	setne  al
   2615e:	mov    DWORD PTR [rsp+0x3c],eax
   26162:	mov    eax,esi
   26164:	and    eax,0x1
   26167:	mov    BYTE PTR [rsp+0x1f],al
   2616b:	mov    DWORD PTR [r12+0xc],r15d
   26170:	xor    eax,eax
   26172:	lea    rbp,[rsp+0x80]
   2617a:	call   2ffc0 <CheckAvailabilityOfNeighbors>
   2617f:	lea    rax,[rsp+0x70]
   26184:	xor    r11d,r11d
   26187:	mov    QWORD PTR [rsp+0x28],r14
   2618c:	mov    QWORD PTR [rsp+0x10],rax
   26191:	lea    rax,[rsp+0x71]
   26196:	mov    QWORD PTR [rsp+0x30],rax
   2619b:	mov    eax,r15d
   2619e:	mov    r15d,r11d
   261a1:	mov    r10d,r15d
   261a4:	mov    r11d,eax
   261a7:	test   r15b,r15b
   261aa:	je     262f5 <DeblockMb+0x2e5>
   261b0:	cmp    BYTE PTR [rsp+0x1f],0x0
   261b5:	mov    r13d,0x1
   261bb:	je     262f5 <DeblockMb+0x2e5>
   261c1:	movsxd rax,r15d
   261c4:	mov    BYTE PTR [rsp+0x1e],r10b
   261c9:	movsxd rdx,DWORD PTR [r12+0x11bfc]
   261d1:	mov    r10d,r15d
   261d4:	shl    rax,0x2
   261d8:	mov    r15,r12
   261db:	mov    r12d,r13d
   261de:	xor    ebx,ebx
   261e0:	mov    QWORD PTR [rsp+0x8],rax
   261e5:	mov    eax,r12d
   261e8:	mov    r14d,ebx
   261eb:	mov    r13d,ebx
   261ee:	or     eax,ebx
   261f0:	jne    26203 <DeblockMb+0x1f3>
   261f2:	add    rbx,0x1
   261f6:	mov    eax,r12d
   261f9:	or     eax,ebx
   261fb:	mov    r14d,ebx
   261fe:	mov    r13d,ebx
   26201:	je     261f2 <DeblockMb+0x1e2>
   26203:	lea    rax,[rip+0x62416]        # 88620 <chroma_edge>
   2620a:	movsxd rcx,ebx
   2620d:	mov    r8d,ebx
   26210:	mov    rsi,r15
   26213:	add    rcx,QWORD PTR [rsp+0x8]
   26218:	mov    r9d,DWORD PTR [rsp+0x18]
   2621d:	mov    DWORD PTR [rsp+0x24],r10d
   26222:	lea    rcx,[rax+rcx*4]
   26226:	mov    rdi,QWORD PTR [rsp+0x10]
   2622b:	mov    DWORD PTR [rsp+0x20],r11d
   26230:	movsx  eax,BYTE PTR [rcx+rdx*1]
   26234:	mov    ecx,r10d
   26237:	mov    edx,r11d
   2623a:	mov    DWORD PTR [rsp+0x38],eax
   2623e:	call   24d30 <GetStrength>
   26243:	movzx  ecx,BYTE PTR [rsp+0x70]
   26248:	mov    rdx,QWORD PTR [rsp+0x30]
   2624d:	mov    r10d,DWORD PTR [rsp+0x24]
   26252:	mov    r11d,DWORD PTR [rsp+0x20]
   26257:	nop    WORD PTR [rax+rax*1+0x0]
   26260:	movzx  eax,BYTE PTR [rdx]
   26263:	add    rdx,0x1
   26267:	add    ecx,eax
   26269:	cmp    rbp,rdx
   2626c:	jne    26260 <DeblockMb+0x250>
   2626e:	test   ecx,ecx
   26270:	je     26298 <DeblockMb+0x288>
   26272:	mov    edi,DWORD PTR [rsp+rbx*4+0x60]
   26276:	test   edi,edi
   26278:	jne    26580 <DeblockMb+0x570>
   2627e:	mov    r13,QWORD PTR [rsp+0x40]
   26283:	test   r13,r13
   26286:	je     26298 <DeblockMb+0x288>
   26288:	mov    edi,DWORD PTR [rsp+0x38]
   2628c:	test   edi,edi
   2628e:	jns    26380 <DeblockMb+0x370>
   26294:	nop    DWORD PTR [rax+0x0]
   26298:	test   ebx,ebx
   2629a:	jne    262d0 <DeblockMb+0x2c0>
   2629c:	cmp    BYTE PTR [rsp+0x1e],0x0
   262a1:	je     262d0 <DeblockMb+0x2c0>
   262a3:	mov    rax,QWORD PTR [rsp+0x28]
   262a8:	mov    esi,DWORD PTR [rax+0x214]
   262ae:	test   esi,esi
   262b0:	jne    262bf <DeblockMb+0x2af>
   262b2:	cmp    BYTE PTR [rip+0x9111c],0x0        # b73d5 <mixedModeEdgeFlag>
   262b9:	jne    26422 <DeblockMb+0x412>
   262bf:	movsxd rdx,DWORD PTR [r15+0x11bfc]
   262c6:	jmp    261f2 <DeblockMb+0x1e2>
   262cb:	nop    DWORD PTR [rax+rax*1+0x0]
   262d0:	cmp    r14d,0x3
   262d4:	jne    262bf <DeblockMb+0x2af>
   262d6:	mov    r12,r15
   262d9:	cmp    r10d,0x1
   262dd:	je     260f8 <DeblockMb+0xe8>
   262e3:	mov    r15d,0x1
   262e9:	mov    r10d,r15d
   262ec:	test   r15b,r15b
   262ef:	jne    261b0 <DeblockMb+0x1a0>
   262f5:	mov    r8d,DWORD PTR [rsp+0x3c]
   262fa:	mov    r13d,r15d
   262fd:	test   r8d,r8d
   26300:	setne  al
   26303:	xor    r13d,0x1
   26307:	and    r13d,eax
   2630a:	jmp    261c1 <DeblockMb+0x1b1>
   2630f:	nop
   26310:	mov    eax,DWORD PTR [r14+0x228]
   26317:	mov    DWORD PTR [rsp+0x3c],eax
   2631b:	test   ecx,ecx
   2631d:	je     26340 <DeblockMb+0x330>
   2631f:	mov    r10d,DWORD PTR [r14+0x214]
   26326:	test   r10d,r10d
   26329:	jne    26340 <DeblockMb+0x330>
   2632b:	mov    BYTE PTR [rsp+0x1f],0x1
   26330:	test   r15b,0x1
   26334:	jne    2616b <DeblockMb+0x15b>
   2633a:	nop    WORD PTR [rax+rax*1+0x0]
   26340:	mov    r9d,DWORD PTR [r14+0x22c]
   26347:	test   r9d,r9d
   2634a:	setne  BYTE PTR [rsp+0x1f]
   2634f:	jmp    2616b <DeblockMb+0x15b>
   26354:	nop    DWORD PTR [rax+0x0]
   26358:	mov    r11d,DWORD PTR [r14+0x214]
   2635f:	test   r11d,r11d
   26362:	je     260c7 <DeblockMb+0xb7>
   26368:	mov    DWORD PTR [rsp+0x18],0x2
   26370:	xor    esi,esi
   26372:	jmp    26142 <DeblockMb+0x132>
   26377:	nop    WORD PTR [rax+rax*1+0x0]
   26380:	mov    rcx,QWORD PTR [rsp+0x28]
   26385:	sub    rsp,0x8
   26389:	mov    r9d,DWORD PTR [rcx+0x26c]
   26390:	mov    r8d,DWORD PTR [rcx+0x268]
   26397:	push   0x0
   26399:	mov    ecx,r11d
   2639c:	push   0x1
   2639e:	mov    edx,DWORD PTR [r15+0x38]
   263a2:	push   rdx
   263a3:	mov    rdx,r15
   263a6:	mov    DWORD PTR [rsp+0x58],edi
   263aa:	push   rdi
   263ab:	mov    rdi,QWORD PTR [r13+0x0]
   263af:	push   r10
   263b1:	mov    rsi,QWORD PTR [rsp+0x40]
   263b6:	mov    DWORD PTR [rsp+0x54],r10d
   263bb:	mov    DWORD PTR [rsp+0x50],r11d
   263c0:	call   25430 <EdgeLoop>
   263c5:	mov    rcx,QWORD PTR [rsp+0x58]
   263ca:	add    rsp,0x28
   263ce:	mov    rdi,QWORD PTR [r13+0x8]
   263d2:	mov    r9d,DWORD PTR [rcx+0x26c]
   263d9:	mov    r8d,DWORD PTR [rcx+0x268]
   263e0:	push   0x1
   263e2:	push   0x1
   263e4:	mov    edx,DWORD PTR [r15+0x38]
   263e8:	push   rdx
   263e9:	mov    eax,DWORD PTR [rsp+0x58]
   263ed:	mov    rdx,r15
   263f0:	push   rax
   263f1:	mov    r10d,DWORD PTR [rsp+0x4c]
   263f6:	push   r10
   263f8:	mov    r11d,DWORD PTR [rsp+0x50]
   263fd:	mov    rsi,QWORD PTR [rsp+0x40]
   26402:	mov    ecx,r11d
   26405:	mov    DWORD PTR [rsp+0x54],r10d
   2640a:	call   25430 <EdgeLoop>
   2640f:	add    rsp,0x30
   26413:	mov    r10d,DWORD PTR [rsp+0x24]
   26418:	mov    r11d,DWORD PTR [rsp+0x20]
   2641d:	jmp    26298 <DeblockMb+0x288>
   26422:	mov    r14,QWORD PTR [rsp+0x10]
   26427:	mov    r9d,DWORD PTR [rsp+0x18]
   2642c:	mov    ecx,r10d
   2642f:	mov    edx,r11d
   26432:	mov    r8d,0x4
   26438:	mov    rsi,r15
   2643b:	mov    DWORD PTR [rsp+0x24],r10d
   26440:	mov    DWORD PTR [r15+0x11bbc],0x2
   2644b:	mov    rdi,r14
   2644e:	mov    DWORD PTR [rsp+0x20],r11d
   26453:	call   24d30 <GetStrength>
   26458:	mov    ecx,DWORD PTR [rsp+0x70]
   2645c:	mov    r11d,DWORD PTR [rsp+0x20]
   26461:	mov    r10d,DWORD PTR [rsp+0x24]
   26466:	test   ecx,ecx
   26468:	je     26569 <DeblockMb+0x559>
   2646e:	mov    r13,QWORD PTR [rsp+0x28]
   26473:	sub    rsp,0x8
   26477:	mov    ecx,r11d
   2647a:	mov    rsi,r14
   2647d:	mov    r9d,DWORD PTR [r13+0x26c]
   26484:	mov    r8d,DWORD PTR [r13+0x268]
   2648b:	push   0x0
   2648d:	push   0x0
   2648f:	mov    edx,DWORD PTR [r15+0x34]
   26493:	push   rdx
   26494:	mov    rdx,r15
   26497:	push   0x4
   26499:	push   r10
   2649b:	mov    rdi,QWORD PTR [rsp+0x78]
   264a0:	mov    DWORD PTR [rsp+0x54],r10d
   264a5:	mov    DWORD PTR [rsp+0x50],r11d
   264aa:	call   25430 <EdgeLoop>
   264af:	mov    rax,QWORD PTR [rsp+0x70]
   264b4:	add    rsp,0x30
   264b8:	mov    r11d,DWORD PTR [rsp+0x20]
   264bd:	mov    r10d,DWORD PTR [rsp+0x24]
   264c2:	test   rax,rax
   264c5:	je     26569 <DeblockMb+0x559>
   264cb:	mov    edx,DWORD PTR [rsp+0x38]
   264cf:	test   edx,edx
   264d1:	js     26569 <DeblockMb+0x559>
   264d7:	sub    rsp,0x8
   264db:	mov    rdi,QWORD PTR [rax]
   264de:	mov    ecx,r11d
   264e1:	mov    rsi,r14
   264e4:	mov    r9d,DWORD PTR [r13+0x26c]
   264eb:	mov    r8d,DWORD PTR [r13+0x268]
   264f2:	push   0x0
   264f4:	push   0x1
   264f6:	mov    edx,DWORD PTR [r15+0x38]
   264fa:	push   rdx
   264fb:	mov    rdx,r15
   264fe:	push   0x4
   26500:	push   r10
   26502:	mov    DWORD PTR [rsp+0x54],r10d
   26507:	mov    DWORD PTR [rsp+0x50],r11d
   2650c:	mov    QWORD PTR [rsp+0x70],rax
   26511:	call   25430 <EdgeLoop>
   26516:	mov    rax,QWORD PTR [rsp+0x70]
   2651b:	add    rsp,0x28
   2651f:	mov    r9d,DWORD PTR [r13+0x26c]
   26526:	mov    r8d,DWORD PTR [r13+0x268]
   2652d:	mov    rsi,r14
   26530:	mov    rdi,QWORD PTR [rax+0x8]
   26534:	push   0x1
   26536:	push   0x1
   26538:	mov    edx,DWORD PTR [r15+0x38]
   2653c:	push   rdx
   2653d:	mov    rdx,r15
   26540:	push   0x4
   26542:	mov    r10d,DWORD PTR [rsp+0x4c]
   26547:	push   r10
   26549:	mov    r11d,DWORD PTR [rsp+0x50]
   2654e:	mov    ecx,r11d
   26551:	mov    DWORD PTR [rsp+0x54],r10d
   26556:	call   25430 <EdgeLoop>
   2655b:	mov    r10d,DWORD PTR [rsp+0x54]
   26560:	mov    r11d,DWORD PTR [rsp+0x50]
   26565:	add    rsp,0x30
   26569:	mov    DWORD PTR [r15+0x11bbc],0x1
   26574:	movsxd rdx,DWORD PTR [r15+0x11bfc]
   2657b:	jmp    261f2 <DeblockMb+0x1e2>
   26580:	mov    rax,QWORD PTR [rsp+0x28]
   26585:	sub    rsp,0x8
   26589:	mov    ecx,r11d
   2658c:	mov    r9d,DWORD PTR [rax+0x26c]
   26593:	mov    r8d,DWORD PTR [rax+0x268]
   2659a:	push   0x0
   2659c:	push   0x0
   2659e:	mov    edx,DWORD PTR [r15+0x34]
   265a2:	push   rdx
   265a3:	mov    rdx,r15
   265a6:	push   r13
   265a8:	push   r10
   265aa:	mov    rsi,QWORD PTR [rsp+0x40]
   265af:	mov    rdi,QWORD PTR [rsp+0x78]
   265b4:	mov    DWORD PTR [rsp+0x54],r10d
   265b9:	mov    DWORD PTR [rsp+0x50],r11d
   265be:	call   25430 <EdgeLoop>
   265c3:	add    rsp,0x30
   265c7:	mov    r10d,DWORD PTR [rsp+0x24]
   265cc:	mov    r11d,DWORD PTR [rsp+0x20]
   265d1:	jmp    2627e <DeblockMb+0x26e>
   265d6:	call   4390 <__stack_chk_fail@plt>
   265db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000265e0 <DeblockFrame>:
   265e0:	endbr64 
   265e4:	mov    eax,DWORD PTR [rdi+0x11b24]
   265ea:	test   eax,eax
   265ec:	je     26630 <DeblockFrame+0x50>
   265ee:	push   r13
   265f0:	mov    r13,rdx
   265f3:	push   r12
   265f5:	mov    r12,rsi
   265f8:	push   rbp
   265f9:	mov    rbp,rdi
   265fc:	push   rbx
   265fd:	xor    ebx,ebx
   265ff:	sub    rsp,0x8
   26603:	nop    DWORD PTR [rax+rax*1+0x0]
   26608:	mov    ecx,ebx
   2660a:	mov    rdx,r13
   2660d:	mov    rsi,r12
   26610:	mov    rdi,rbp
   26613:	call   26010 <DeblockMb>
   26618:	add    ebx,0x1
   2661b:	cmp    DWORD PTR [rbp+0x11b24],ebx
   26621:	ja     26608 <DeblockFrame+0x28>
   26623:	add    rsp,0x8
   26627:	pop    rbx
   26628:	pop    rbp
   26629:	pop    r12
   2662b:	pop    r13
   2662d:	ret    
   2662e:	xchg   ax,ax
   26630:	ret    
   26631:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2663b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000026640 <set_MB_parameters>:
   26640:	endbr64 
   26644:	mov    rsi,QWORD PTR [rip+0x61f65]        # 885b0 <img>
   2664b:	push   rbx
   2664c:	mov    ebx,edi
   2664e:	mov    DWORD PTR [rsi+0xc],edi
   26651:	lea    rdx,[rsi+0x8c]
   26658:	add    rsi,0x88
   2665f:	call   30380 <get_mb_block_pos>
   26664:	mov    rcx,QWORD PTR [rip+0x61f45]        # 885b0 <img>
   2666b:	mov    esi,DWORD PTR [rcx+0x88]
   26671:	mov    edi,DWORD PTR [rcx+0x11ad0]
   26677:	lea    eax,[rsi*4+0x0]
   2667e:	shl    esi,0x4
   26681:	mov    DWORD PTR [rcx+0x90],eax
   26687:	mov    eax,DWORD PTR [rcx+0x8c]
   2668d:	mov    DWORD PTR [rcx+0x98],esi
   26693:	mov    r9d,eax
   26696:	lea    edx,[rax*4+0x0]
   2669d:	mov    DWORD PTR [rcx+0xa8],esi
   266a3:	shl    r9d,0x4
   266a7:	mov    DWORD PTR [rcx+0x94],edx
   266ad:	mov    DWORD PTR [rcx+0x9c],r9d
   266b4:	test   edi,edi
   266b6:	je     26718 <set_MB_parameters+0xd8>
   266b8:	movsxd r8,ebx
   266bb:	imul   r8,r8,0x278
   266c2:	add    r8,QWORD PTR [rcx+0x3758]
   266c9:	mov    edx,DWORD PTR [r8+0x214]
   266d0:	test   edx,edx
   266d2:	je     26780 <set_MB_parameters+0x140>
   266d8:	and    ebx,0x1
   266db:	jne    267b0 <set_MB_parameters+0x170>
   266e1:	mov    rdx,QWORD PTR [rip+0x90000]        # b66e8 <imgY_org_top>
   266e8:	mov    QWORD PTR [rip+0x90cd9],rdx        # b73c8 <imgY_org>
   266ef:	mov    rdx,QWORD PTR [rip+0x7899a]        # 9f090 <imgUV_org_top>
   266f6:	sar    eax,1
   266f8:	mov    QWORD PTR [rip+0x8c3d1],rdx        # b2ad0 <imgUV_org>
   266ff:	shl    eax,0x4
   26702:	mov    DWORD PTR [rcx+0xac],eax
   26708:	mov    eax,DWORD PTR [rcx+0x11bfc]
   2670e:	test   eax,eax
   26710:	jne    26729 <set_MB_parameters+0xe9>
   26712:	pop    rbx
   26713:	ret    
   26714:	nop    DWORD PTR [rax+0x0]
   26718:	mov    DWORD PTR [rcx+0xac],r9d
   2671f:	mov    eax,DWORD PTR [rcx+0x11bfc]
   26725:	test   eax,eax
   26727:	je     26712 <set_MB_parameters+0xd2>
   26729:	mov    edi,0x10
   2672e:	mov    eax,edi
   26730:	cdq    
   26731:	idiv   DWORD PTR [rcx+0x11c04]
   26737:	mov    r8d,eax
   2673a:	mov    eax,esi
   2673c:	cdq    
   2673d:	idiv   r8d
   26740:	mov    DWORD PTR [rcx+0xa0],eax
   26746:	mov    esi,eax
   26748:	mov    eax,edi
   2674a:	cdq    
   2674b:	mov    DWORD PTR [rcx+0xb0],esi
   26751:	idiv   DWORD PTR [rcx+0x11c08]
   26757:	mov    edi,eax
   26759:	mov    eax,r9d
   2675c:	cdq    
   2675d:	idiv   edi
   2675f:	mov    DWORD PTR [rcx+0xa4],eax
   26765:	mov    eax,DWORD PTR [rcx+0xac]
   2676b:	cdq    
   2676c:	idiv   edi
   2676e:	mov    DWORD PTR [rcx+0xb4],eax
   26774:	pop    rbx
   26775:	ret    
   26776:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26780:	mov    rax,QWORD PTR [rip+0x8dab9]        # b4240 <imgY_org_frm>
   26787:	mov    DWORD PTR [rcx+0xac],r9d
   2678e:	mov    QWORD PTR [rip+0x90c33],rax        # b73c8 <imgY_org>
   26795:	mov    rax,QWORD PTR [rip+0x77acc]        # 9e268 <imgUV_org_frm>
   2679c:	mov    QWORD PTR [rip+0x8c32d],rax        # b2ad0 <imgUV_org>
   267a3:	jmp    2671f <set_MB_parameters+0xdf>
   267a8:	nop    DWORD PTR [rax+rax*1+0x0]
   267b0:	mov    rdx,QWORD PTR [rip+0x8f6d1]        # b5e88 <imgY_org_bot>
   267b7:	mov    QWORD PTR [rip+0x90c0a],rdx        # b73c8 <imgY_org>
   267be:	mov    rdx,QWORD PTR [rip+0x8f6bb]        # b5e80 <imgUV_org_bot>
   267c5:	jmp    266f6 <set_MB_parameters+0xb6>
   267ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000000267d0 <clip1a>:
   267d0:	endbr64 
   267d4:	mov    rax,QWORD PTR [rip+0x61dd5]        # 885b0 <img>
   267db:	mov    eax,DWORD PTR [rax+0x11bec]
   267e1:	cmp    eax,edi
   267e3:	jl     267ef <clip1a+0x1f>
   267e5:	test   edi,edi
   267e7:	mov    eax,0x0
   267ec:	cmovns eax,edi
   267ef:	ret    

00000000000267f0 <clip1a_chr>:
   267f0:	endbr64 
   267f4:	mov    rax,QWORD PTR [rip+0x61db5]        # 885b0 <img>
   267fb:	mov    eax,DWORD PTR [rax+0x11bf0]
   26801:	cmp    eax,edi
   26803:	jl     2680f <clip1a_chr+0x1f>
   26805:	test   edi,edi
   26807:	mov    eax,0x0
   2680c:	cmovns eax,edi
   2680f:	ret    

0000000000026810 <proceed2nextMacroblock>:
   26810:	endbr64 
   26814:	mov    rdx,QWORD PTR [rip+0x61d95]        # 885b0 <img>
   2681b:	mov    rcx,QWORD PTR [rip+0x61d86]        # 885a8 <stats>
   26822:	movsxd rax,DWORD PTR [rdx+0xc]
   26826:	movsxd rsi,DWORD PTR [rdx+0x18]
   2682a:	imul   rax,rax,0x278
   26831:	add    rax,QWORD PTR [rdx+0x3758]
   26838:	lea    rdx,[rcx+rsi*4]
   2683c:	mov    r9,rsi
   2683f:	mov    edi,DWORD PTR [rax+0x1c]
   26842:	add    DWORD PTR [rdx+0x544],edi
   26848:	mov    edi,DWORD PTR [rax+0x28]
   2684b:	add    DWORD PTR [rdx+0x580],edi
   26851:	mov    edi,DWORD PTR [rax+0x24]
   26854:	add    DWORD PTR [rdx+0x56c],edi
   2685a:	mov    edi,DWORD PTR [rax+0x2c]
   2685d:	add    DWORD PTR [rdx+0x594],edi
   26863:	mov    edi,DWORD PTR [rax+0x30]
   26866:	add    DWORD PTR [rdx+0x5a8],edi
   2686c:	mov    edi,DWORD PTR [rax+0x48]
   2686f:	lea    edx,[rdi-0x9]
   26872:	cmp    edx,0x1
   26875:	jbe    268f0 <proceed2nextMacroblock+0xe0>
   26877:	movsxd rdx,edi
   2687a:	cmp    edi,0xd
   2687d:	je     268f0 <proceed2nextMacroblock+0xe0>
   2687f:	mov    r8,rsi
   26882:	shl    r8,0x4
   26886:	sub    r8,rsi
   26889:	add    rdx,r8
   2688c:	lea    rdx,[rcx+rdx*4]
   26890:	add    DWORD PTR [rdx+0x2d8],0x1
   26897:	mov    r10d,DWORD PTR [rax+0x20]
   2689b:	add    DWORD PTR [rdx+0x404],r10d
   268a2:	cmp    r9d,0x2
   268a6:	je     26940 <proceed2nextMacroblock+0x130>
   268ac:	cmp    edi,0x8
   268af:	je     26948 <proceed2nextMacroblock+0x138>
   268b5:	cmp    edi,0x3
   268b8:	ja     268d8 <proceed2nextMacroblock+0xc8>
   268ba:	test   BYTE PTR [rax+0x1cc],0xf
   268c1:	je     268d8 <proceed2nextMacroblock+0xc8>
   268c3:	mov    esi,DWORD PTR [rax+0x23c]
   268c9:	test   esi,esi
   268cb:	je     26a00 <proceed2nextMacroblock+0x1f0>
   268d1:	add    DWORD PTR [rdx+0x48],0x1
   268d5:	nop    DWORD PTR [rax]
   268d8:	test   r9d,r9d
   268db:	je     268e3 <proceed2nextMacroblock+0xd3>
   268dd:	cmp    r9d,0x3
   268e1:	jne    26940 <proceed2nextMacroblock+0x130>
   268e3:	mov    eax,DWORD PTR [rax+0xc]
   268e6:	add    DWORD PTR [rcx],0x1
   268e9:	add    DWORD PTR [rcx+0x4],eax
   268ec:	ret    
   268ed:	nop    DWORD PTR [rax]
   268f0:	movsxd rdx,DWORD PTR [rax+0x20c]
   268f7:	add    DWORD PTR [rcx+rdx*4+0x2a0],0x1
   268ff:	movsxd rdx,edi
   26902:	test   BYTE PTR [rax+0x1cc],0xf
   26909:	je     2687f <proceed2nextMacroblock+0x6f>
   2690f:	mov    r8,rsi
   26912:	mov    r10d,DWORD PTR [rax+0x23c]
   26919:	shl    r8,0x4
   2691d:	sub    r8,rsi
   26920:	add    r8,rdx
   26923:	test   r10d,r10d
   26926:	je     269f0 <proceed2nextMacroblock+0x1e0>
   2692c:	add    DWORD PTR [rcx+r8*4+0x48],0x1
   26932:	jmp    2687f <proceed2nextMacroblock+0x6f>
   26937:	nop    WORD PTR [rax+rax*1+0x0]
   26940:	ret    
   26941:	nop    DWORD PTR [rax+0x0]
   26948:	push   rbp
   26949:	mov    rbp,QWORD PTR [rip+0x61c68]        # 885b8 <input>
   26950:	lea    rdx,[rax+0x1d8]
   26957:	add    rsi,rsi
   2695a:	push   rbx
   2695b:	lea    r11,[rax+0x1e8]
   26962:	lea    rbx,[rcx+r8*4]
   26966:	mov    edi,DWORD PTR [rdx]
   26968:	test   edi,edi
   2696a:	jle    269d8 <proceed2nextMacroblock+0x1c8>
   2696c:	movsxd r10,edi
   2696f:	add    r10,r8
   26972:	add    DWORD PTR [rcx+r10*4+0x2d8],0x1
   2697b:	cmp    edi,0x4
   2697e:	jne    269a0 <proceed2nextMacroblock+0x190>
   26980:	mov    edi,DWORD PTR [rax+0x23c]
   26986:	test   edi,edi
   26988:	je     269c0 <proceed2nextMacroblock+0x1b0>
   2698a:	test   BYTE PTR [rax+0x1cc],0xf
   26991:	je     269c0 <proceed2nextMacroblock+0x1b0>
   26993:	add    DWORD PTR [rbx+0x58],0x1
   26997:	nop    WORD PTR [rax+rax*1+0x0]
   269a0:	add    rdx,0x4
   269a4:	cmp    rdx,r11
   269a7:	jne    26966 <proceed2nextMacroblock+0x156>
   269a9:	test   r9d,r9d
   269ac:	je     269b4 <proceed2nextMacroblock+0x1a4>
   269ae:	cmp    r9d,0x3
   269b2:	jne    269bd <proceed2nextMacroblock+0x1ad>
   269b4:	mov    eax,DWORD PTR [rax+0xc]
   269b7:	add    DWORD PTR [rcx],0x1
   269ba:	add    DWORD PTR [rcx+0x4],eax
   269bd:	pop    rbx
   269be:	pop    rbp
   269bf:	ret    
   269c0:	cmp    DWORD PTR [rbp+0xc94],0x2
   269c7:	je     26993 <proceed2nextMacroblock+0x183>
   269c9:	add    DWORD PTR [rbx+0x184],0x1
   269d0:	jmp    269a0 <proceed2nextMacroblock+0x190>
   269d2:	nop    WORD PTR [rax+rax*1+0x0]
   269d8:	movsxd rdi,DWORD PTR [rax+0x23c]
   269df:	add    rdi,rsi
   269e2:	add    DWORD PTR [rcx+rdi*4+0x20],0x1
   269e7:	jmp    269a0 <proceed2nextMacroblock+0x190>
   269e9:	nop    DWORD PTR [rax+0x0]
   269f0:	add    DWORD PTR [rcx+r8*4+0x174],0x1
   269f9:	jmp    2687f <proceed2nextMacroblock+0x6f>
   269fe:	xchg   ax,ax
   26a00:	add    DWORD PTR [rdx+0x174],0x1
   26a07:	jmp    268d8 <proceed2nextMacroblock+0xc8>
   26a0c:	nop    DWORD PTR [rax+0x0]

0000000000026a10 <start_macroblock>:
   26a10:	endbr64 
   26a14:	push   r15
   26a16:	movsxd rdx,edi
   26a19:	push   r14
   26a1b:	push   r13
   26a1d:	push   r12
   26a1f:	push   rbp
   26a20:	push   rbx
   26a21:	imul   rbx,rdx,0x278
   26a28:	sub    rsp,0x18
   26a2c:	mov    rax,QWORD PTR [rip+0x61b85]        # 885b8 <input>
   26a33:	mov    r13d,DWORD PTR [rax+0xd0]
   26a3a:	mov    rax,QWORD PTR [rip+0x61b6f]        # 885b0 <img>
   26a41:	mov    r12,QWORD PTR [rax+0x3750]
   26a48:	mov    ebp,DWORD PTR [rax+0x11bdc]
   26a4e:	sub    r13d,0x2
   26a52:	add    rbx,QWORD PTR [rax+0x3758]
   26a59:	mov    rax,QWORD PTR [rip+0x63f48]        # 8a9a8 <enc_picture>
   26a60:	mov    DWORD PTR [rbx+0x214],esi
   26a66:	mov    rax,QWORD PTR [rax+0x1948]
   26a6d:	mov    BYTE PTR [rax+rdx*1],sil
   26a71:	call   26640 <set_MB_parameters>
   26a76:	mov    rsi,QWORD PTR [rip+0x61b33]        # 885b0 <img>
   26a7d:	mov    r9,QWORD PTR [rip+0x61b34]        # 885b8 <input>
   26a84:	cmp    r13d,0x1
   26a88:	jbe    27070 <start_macroblock+0x660>
   26a8e:	mov    eax,DWORD PTR [rsi+0x14]
   26a91:	mov    r13d,DWORD PTR [r9+0xca4]
   26a98:	mov    edi,DWORD PTR [rsi+0xc]
   26a9b:	mov    DWORD PTR [rbx+0x4],eax
   26a9e:	mov    eax,DWORD PTR [rsi+0x2c]
   26aa1:	mov    DWORD PTR [rbx+0x10],eax
   26aa4:	test   r13d,r13d
   26aa7:	je     26c90 <start_macroblock+0x280>
   26aad:	call   19bd0 <FmoGetPreviousMBNr>
   26ab2:	test   eax,eax
   26ab4:	js     26ff4 <start_macroblock+0x5e4>
   26aba:	mov    rcx,QWORD PTR [rip+0x61aef]        # 885b0 <img>
   26ac1:	cdqe   
   26ac3:	imul   rax,rax,0x278
   26aca:	add    rax,QWORD PTR [rcx+0x3758]
   26ad1:	mov    edx,DWORD PTR [rax+0xc]
   26ad4:	mov    eax,DWORD PTR [rax+0x8]
   26ad7:	mov    DWORD PTR [rbx+0x250],edx
   26add:	mov    DWORD PTR [rbx+0x254],eax
   26ae3:	mov    rsi,QWORD PTR [rip+0x61ace]        # 885b8 <input>
   26aea:	mov    eax,DWORD PTR [rcx+0x11ba0]
   26af0:	cmp    DWORD PTR [rsi+0xcb0],eax
   26af6:	je     2702d <start_macroblock+0x61d>
   26afc:	mov    eax,DWORD PTR [rcx+0x18]
   26aff:	lea    edx,[rax-0x1]
   26b02:	cmp    edx,0x1
   26b05:	jbe    2702d <start_macroblock+0x61d>
   26b0b:	test   eax,eax
   26b0d:	jne    26cf7 <start_macroblock+0x2e7>
   26b13:	mov    r9d,DWORD PTR [rcx+0x11bb0]
   26b1a:	test   r9d,r9d
   26b1d:	je     27141 <start_macroblock+0x731>
   26b23:	mov    edi,DWORD PTR [rcx+0x11bb4]
   26b29:	test   edi,edi
   26b2b:	jne    271c4 <start_macroblock+0x7b4>
   26b31:	mov    edx,DWORD PTR [rcx+0x11bb8]
   26b37:	test   edx,edx
   26b39:	je     2727c <start_macroblock+0x86c>
   26b3f:	mov    eax,DWORD PTR [rip+0xb9b7b]        # e06c0 <DELTA_QP>
   26b45:	mov    DWORD PTR [rbx+0x8],eax
   26b48:	mov    eax,DWORD PTR [rip+0x8fbf2]        # b6740 <QP>
   26b4e:	mov    DWORD PTR [rbx+0xc],eax
   26b51:	mov    DWORD PTR [rcx+0x28],eax
   26b54:	mov    edi,DWORD PTR [rsi+0xb44]
   26b5a:	mov    eax,DWORD PTR [rbx+0x214]
   26b60:	test   eax,eax
   26b62:	jne    271a8 <start_macroblock+0x798>
   26b68:	mov    eax,DWORD PTR [rcx+0x11ba8]
   26b6e:	test   eax,eax
   26b70:	jle    26bd2 <start_macroblock+0x1c2>
   26b72:	cdq    
   26b73:	idiv   DWORD PTR [rcx+0x11bac]
   26b79:	test   edx,edx
   26b7b:	jne    26bd2 <start_macroblock+0x1c2>
   26b7d:	mov    rax,QWORD PTR [rip+0x8f2ec]        # b5e70 <active_sps>
   26b84:	mov    eax,DWORD PTR [rax+0x47c]
   26b8a:	test   eax,eax
   26b8c:	jne    272a4 <start_macroblock+0x894>
   26b92:	mov    rax,QWORD PTR [rsi+0xb40]
   26b99:	cmp    rax,0x2
   26b9d:	je     27296 <start_macroblock+0x886>
   26ba3:	cmp    rax,0x1
   26ba7:	je     27296 <start_macroblock+0x886>
   26bad:	test   edi,edi
   26baf:	je     26bd2 <start_macroblock+0x1c2>
   26bb1:	mov    eax,DWORD PTR [rcx+0x11ba4]
   26bb7:	test   eax,eax
   26bb9:	jne    26bd2 <start_macroblock+0x1c2>
   26bbb:	mov    eax,DWORD PTR [rcx+0x11b98]
   26bc1:	cmp    eax,0x1
   26bc4:	je     272a4 <start_macroblock+0x894>
   26bca:	test   eax,eax
   26bcc:	je     272a4 <start_macroblock+0x894>
   26bd2:	mov    eax,DWORD PTR [rcx+0xc]
   26bd5:	test   eax,eax
   26bd7:	je     27220 <start_macroblock+0x810>
   26bdd:	mov    esi,DWORD PTR [rcx+0x11b90]
   26be3:	mov    edx,ebp
   26be5:	mov    r10d,DWORD PTR [rbx+0xc]
   26be9:	mov    DWORD PTR [rbx+0x25c],esi
   26bef:	shr    edx,0x1f
   26bf2:	add    edx,ebp
   26bf4:	sar    edx,1
   26bf6:	lea    r9d,[rdx+0x19]
   26bfa:	lea    eax,[r10+r9*1]
   26bfe:	cmp    eax,esi
   26c00:	jl     271b9 <start_macroblock+0x7a9>
   26c06:	lea    eax,[rdx+0x1a]
   26c09:	mov    r15d,r10d
   26c0c:	sub    r15d,eax
   26c0f:	mov    eax,r15d
   26c12:	cmp    r15d,esi
   26c15:	jg     271b9 <start_macroblock+0x7a9>
   26c1b:	mov    eax,esi
   26c1d:	mov    r11d,DWORD PTR [rbx+0x8]
   26c21:	mov    r8d,0xffffffe6
   26c27:	sub    r8d,edx
   26c2a:	lea    esi,[r11+rax*1]
   26c2e:	sub    esi,r10d
   26c31:	mov    DWORD PTR [rip+0x907a5],esi        # b73dc <dq>
   26c37:	cmp    esi,r8d
   26c3a:	jge    2722e <start_macroblock+0x81e>
   26c40:	mov    eax,DWORD PTR [rcx+0x28]
   26c43:	mov    edx,r8d
   26c46:	mov    DWORD PTR [rip+0x9078f],r8d        # b73dc <dq>
   26c4d:	sub    edx,r11d
   26c50:	add    eax,edx
   26c52:	mov    DWORD PTR [rip+0x90780],edx        # b73d8 <predict_error>
   26c58:	mov    DWORD PTR [rcx+0x28],eax
   26c5b:	mov    DWORD PTR [rbx+0x8],r8d
   26c5f:	mov    DWORD PTR [rbx+0xc],eax
   26c62:	test   edi,edi
   26c64:	je     26c81 <start_macroblock+0x271>
   26c66:	mov    ecx,DWORD PTR [rbx+0x8]
   26c69:	mov    DWORD PTR [rip+0x8fad5],eax        # b6744 <QP2>
   26c6f:	mov    DWORD PTR [rip+0x8facb],eax        # b6740 <QP>
   26c75:	mov    DWORD PTR [rip+0xb7745],ecx        # de3c0 <DELTA_QP2>
   26c7b:	mov    DWORD PTR [rip+0xb9a3f],ecx        # e06c0 <DELTA_QP>
   26c81:	mov    DWORD PTR [rbx+0x260],edx
   26c87:	jmp    26cf7 <start_macroblock+0x2e7>
   26c89:	nop    DWORD PTR [rax+0x0]
   26c90:	mov    rbp,QWORD PTR [rsi+0x3750]
   26c97:	call   19bd0 <FmoGetPreviousMBNr>
   26c9c:	test   eax,eax
   26c9e:	js     27015 <start_macroblock+0x605>
   26ca4:	mov    rdx,QWORD PTR [rip+0x61905]        # 885b0 <img>
   26cab:	cdqe   
   26cad:	imul   rax,rax,0x278
   26cb4:	add    rax,QWORD PTR [rdx+0x3758]
   26cbb:	mov    edx,DWORD PTR [rax+0xc]
   26cbe:	mov    eax,DWORD PTR [rax+0x8]
   26cc1:	mov    DWORD PTR [rbx+0x254],eax
   26cc7:	mov    eax,DWORD PTR [rbp+0x4]
   26cca:	mov    DWORD PTR [rbx+0x250],edx
   26cd0:	mov    r13d,eax
   26cd3:	sub    r13d,edx
   26cd6:	mov    DWORD PTR [rbx+0xc],eax
   26cd9:	mov    DWORD PTR [rbx+0x8],r13d
   26cdd:	mov    DWORD PTR [rip+0xb76dc],r13d        # de3c0 <DELTA_QP2>
   26ce4:	mov    DWORD PTR [rip+0xb99d5],r13d        # e06c0 <DELTA_QP>
   26ceb:	mov    DWORD PTR [rip+0x8fa53],eax        # b6744 <QP2>
   26cf1:	mov    DWORD PTR [rip+0x8fa49],eax        # b6740 <QP>
   26cf7:	mov    rax,QWORD PTR [rip+0x7a102]        # a0e00 <active_pps>
   26cfe:	mov    DWORD PTR [rbx],0x0
   26d04:	mov    eax,DWORD PTR [rax+0xdc]
   26d0a:	test   eax,eax
   26d0c:	je     27056 <start_macroblock+0x646>
   26d12:	mov    rax,QWORD PTR [rip+0x61897]        # 885b0 <img>
   26d19:	mov    edx,DWORD PTR [rax+0x11930]
   26d1f:	mov    DWORD PTR [rbx+0x264],edx
   26d25:	mov    edx,DWORD PTR [rax+0x11934]
   26d2b:	mov    eax,DWORD PTR [rax+0x11938]
   26d31:	mov    DWORD PTR [rbx+0x268],edx
   26d37:	mov    DWORD PTR [rbx+0x26c],eax
   26d3d:	xor    eax,eax
   26d3f:	call   2ffc0 <CheckAvailabilityOfNeighbors>
   26d44:	mov    r12,QWORD PTR [rip+0x6186d]        # 885b8 <input>
   26d4b:	cmp    DWORD PTR [r12+0x934],0x1
   26d54:	je     2712e <start_macroblock+0x71e>
   26d5a:	mov    r11,QWORD PTR [rip+0x6184f]        # 885b0 <img>
   26d61:	mov    r14,QWORD PTR [rip+0x63c40]        # 8a9a8 <enc_picture>
   26d68:	xor    ebp,ebp
   26d6a:	movsxd rax,DWORD PTR [r11+0x94]
   26d71:	movsxd r9,DWORD PTR [r11+0x90]
   26d78:	mov    r15,QWORD PTR [r14+0x1968]
   26d7f:	mov    QWORD PTR [rsp+0x8],rax
   26d84:	lea    r13,[rax*8+0x0]
   26d8c:	shl    r9,0x3
   26d90:	lea    r10,[r13+0x20]
   26d94:	lea    rdi,[r9+0x20]
   26d98:	mov    rsi,QWORD PTR [r15+rbp*8]
   26d9c:	mov    rcx,r13
   26d9f:	lea    r8,[rsi+r9*1]
   26da3:	add    rsi,rdi
   26da6:	mov    rax,r8
   26da9:	mov    rdx,QWORD PTR [rax]
   26dac:	add    rax,0x8
   26db0:	mov    rdx,QWORD PTR [rdx+rcx*1]
   26db4:	mov    DWORD PTR [rdx],0x0
   26dba:	cmp    rsi,rax
   26dbd:	jne    26da9 <start_macroblock+0x399>
   26dbf:	add    rcx,0x8
   26dc3:	cmp    r10,rcx
   26dc6:	jne    26da6 <start_macroblock+0x396>
   26dc8:	cmp    rbp,0x1
   26dcc:	jne    27040 <start_macroblock+0x630>
   26dd2:	mov    rcx,QWORD PTR [r14+0x1950]
   26dd9:	mov    rax,QWORD PTR [r14+0x1958]
   26de0:	mov    rdx,QWORD PTR [rsp+0x8]
   26de5:	mov    r13,QWORD PTR [rcx]
   26de8:	mov    rbp,QWORD PTR [rax]
   26deb:	add    rdx,rdx
   26dee:	mov    r10,QWORD PTR [rcx+0x8]
   26df2:	mov    r8,QWORD PTR [rax+0x8]
   26df6:	lea    r14,[rdx+0x8]
   26dfa:	lea    rcx,[rdx*4+0x0]
   26e02:	mov    rax,r9
   26e05:	mov    rsi,QWORD PTR [r13+rax*1+0x0]
   26e0a:	mov    r15d,0xffffffff
   26e10:	mov    WORD PTR [rsi+rdx*1],r15w
   26e15:	mov    rsi,QWORD PTR [rbp+rax*1+0x0]
   26e1a:	mov    r15d,0xffffffff
   26e20:	mov    QWORD PTR [rsi+rcx*1],0xffffffffffffffff
   26e28:	mov    rsi,QWORD PTR [r10+rax*1]
   26e2c:	mov    WORD PTR [rsi+rdx*1],r15w
   26e31:	mov    rsi,QWORD PTR [r8+rax*1]
   26e35:	add    rax,0x8
   26e39:	mov    QWORD PTR [rsi+rcx*1],0xffffffffffffffff
   26e41:	cmp    rdi,rax
   26e44:	jne    26e05 <start_macroblock+0x3f5>
   26e46:	add    rdx,0x2
   26e4a:	cmp    r14,rdx
   26e4d:	jne    26dfa <start_macroblock+0x3ea>
   26e4f:	mov    DWORD PTR [rbx+0x48],0x0
   26e56:	lea    rdx,[rbx+0x4c]
   26e5a:	lea    rax,[rbx+0xcc]
   26e61:	mov    QWORD PTR [rbx+0x1d0],0x0
   26e6c:	mov    DWORD PTR [rbx+0x1cc],0x0
   26e76:	mov    DWORD PTR [rdx],0x0
   26e7c:	add    rdx,0x20
   26e80:	mov    DWORD PTR [rdx-0x1c],0x0
   26e87:	mov    DWORD PTR [rdx-0x18],0x0
   26e8e:	mov    DWORD PTR [rdx-0x14],0x0
   26e95:	mov    DWORD PTR [rdx-0x10],0x0
   26e9c:	mov    DWORD PTR [rdx-0xc],0x0
   26ea3:	mov    DWORD PTR [rdx-0x8],0x0
   26eaa:	mov    DWORD PTR [rdx-0x4],0x0
   26eb1:	cmp    rax,rdx
   26eb4:	jne    26e76 <start_macroblock+0x466>
   26eb6:	lea    rdx,[rbx+0x14c]
   26ebd:	mov    DWORD PTR [rax],0x0
   26ec3:	add    rax,0x20
   26ec7:	mov    DWORD PTR [rax-0x1c],0x0
   26ece:	mov    DWORD PTR [rax-0x18],0x0
   26ed5:	mov    DWORD PTR [rax-0x14],0x0
   26edc:	mov    DWORD PTR [rax-0x10],0x0
   26ee3:	mov    DWORD PTR [rax-0xc],0x0
   26eea:	mov    DWORD PTR [rax-0x8],0x0
   26ef1:	mov    DWORD PTR [rax-0x4],0x0
   26ef8:	cmp    rdx,rax
   26efb:	jne    26ebd <start_macroblock+0x4ad>
   26efd:	mov    QWORD PTR [rbx+0x1f8],0x0
   26f08:	lea    rax,[rbx+0x18c]
   26f0f:	mov    DWORD PTR [rbx+0x20c],0x0
   26f19:	nop    DWORD PTR [rax+0x0]
   26f20:	mov    DWORD PTR [rdx],0x2
   26f26:	add    rdx,0x4
   26f2a:	cmp    rax,rdx
   26f2d:	jne    26f20 <start_macroblock+0x510>
   26f2f:	lea    rdx,[rbx+0x1cc]
   26f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26f40:	mov    DWORD PTR [rax],0x2
   26f46:	add    rax,0x4
   26f4a:	cmp    rdx,rax
   26f4d:	jne    26f40 <start_macroblock+0x530>
   26f4f:	mov    ecx,DWORD PTR [r12+0xd8]
   26f57:	movsxd rax,DWORD PTR [r11+0xc]
   26f5b:	test   ecx,ecx
   26f5d:	je     26f71 <start_macroblock+0x561>
   26f5f:	mov    rdx,QWORD PTR [r11+0x11868]
   26f66:	mov    DWORD PTR [rdx+rax*4],0x1
   26f6d:	movsxd rax,DWORD PTR [r11+0xc]
   26f71:	mov    edx,DWORD PTR [r11+0x11930]
   26f78:	mov    DWORD PTR [rbx+0x200],edx
   26f7e:	mov    edx,DWORD PTR [r11+0x11934]
   26f85:	mov    DWORD PTR [rbx+0x204],edx
   26f8b:	mov    edx,DWORD PTR [r11+0x11938]
   26f92:	mov    DWORD PTR [rbx+0x208],edx
   26f98:	test   eax,eax
   26f9a:	je     2704a <start_macroblock+0x63a>
   26fa0:	imul   rax,rax,0x278
   26fa7:	add    rax,QWORD PTR [r11+0x3758]
   26fae:	mov    eax,DWORD PTR [rax-0x274]
   26fb4:	cmp    DWORD PTR [rbx+0x4],eax
   26fb7:	je     2704a <start_macroblock+0x63a>
   26fbd:	mov    QWORD PTR [rbx+0x1c],0x0
   26fc5:	mov    QWORD PTR [rbx+0x24],0x0
   26fcd:	mov    QWORD PTR [rbx+0x2c],0x0
   26fd5:	mov    edx,DWORD PTR [r12+0xcdc]
   26fdd:	test   edx,edx
   26fdf:	je     27119 <start_macroblock+0x709>
   26fe5:	add    rsp,0x18
   26fe9:	pop    rbx
   26fea:	pop    rbp
   26feb:	pop    r12
   26fed:	pop    r13
   26fef:	pop    r14
   26ff1:	pop    r15
   26ff3:	ret    
   26ff4:	mov    eax,DWORD PTR [r12+0x4]
   26ff9:	mov    rcx,QWORD PTR [rip+0x615b0]        # 885b0 <img>
   27000:	mov    DWORD PTR [rbx+0x254],0x0
   2700a:	mov    DWORD PTR [rbx+0x250],eax
   27010:	jmp    26ae3 <start_macroblock+0xd3>
   27015:	mov    eax,DWORD PTR [rbp+0x4]
   27018:	mov    DWORD PTR [rbx+0x254],0x0
   27022:	mov    DWORD PTR [rbx+0x250],eax
   27028:	jmp    26cd6 <start_macroblock+0x2c6>
   2702d:	mov    eax,DWORD PTR [rcx+0x28]
   27030:	mov    DWORD PTR [rbx+0x8],0x0
   27037:	mov    DWORD PTR [rbx+0xc],eax
   2703a:	jmp    26cf7 <start_macroblock+0x2e7>
   2703f:	nop
   27040:	mov    ebp,0x1
   27045:	jmp    26d98 <start_macroblock+0x388>
   2704a:	mov    DWORD PTR [rbx+0x14],0x0
   27051:	jmp    26fbd <start_macroblock+0x5ad>
   27056:	mov    DWORD PTR [rbx+0x264],0x0
   27060:	mov    QWORD PTR [rbx+0x268],0x0
   2706b:	jmp    26d3d <start_macroblock+0x32d>
   27070:	mov    r10d,DWORD PTR [rsi+0x78]
   27074:	test   r10d,r10d
   27077:	jne    26a8e <start_macroblock+0x7e>
   2707d:	mov    edx,DWORD PTR [r12+0x10]
   27082:	test   edx,edx
   27084:	jle    26a8e <start_macroblock+0x7e>
   2708a:	lea    ecx,[rdx-0x1]
   2708d:	mov    rax,QWORD PTR [r12+0x18]
   27092:	mov    r11d,DWORD PTR [r9+0x934]
   27099:	mov    rdx,rcx
   2709c:	shl    rdx,0x4
   270a0:	sub    rdx,rcx
   270a3:	lea    rcx,[rax+0x78]
   270a7:	lea    r10,[rcx+rdx*8]
   270ab:	jmp    270b4 <start_macroblock+0x6a4>
   270ad:	nop    DWORD PTR [rax]
   270b0:	add    rcx,0x78
   270b4:	mov    rdx,QWORD PTR [rax]
   270b7:	movzx  edi,BYTE PTR [rdx+0x8]
   270bb:	mov    r8,QWORD PTR [rdx]
   270be:	mov    BYTE PTR [rdx+0x14],dil
   270c2:	mov    QWORD PTR [rdx+0xc],r8
   270c6:	cmp    r11d,0x1
   270ca:	jne    2710c <start_macroblock+0x6fc>
   270cc:	mov    edx,DWORD PTR [rax+0x8]
   270cf:	mov    DWORD PTR [rax+0x30],edx
   270d2:	mov    edx,DWORD PTR [rax+0xc]
   270d5:	mov    DWORD PTR [rax+0x34],edx
   270d8:	mov    edx,DWORD PTR [rax+0x10]
   270db:	mov    DWORD PTR [rax+0x38],edx
   270de:	mov    edx,DWORD PTR [rax+0x14]
   270e1:	mov    DWORD PTR [rax+0x3c],edx
   270e4:	mov    edx,DWORD PTR [rax+0x18]
   270e7:	mov    DWORD PTR [rax+0x40],edx
   270ea:	mov    rdx,QWORD PTR [rax+0x20]
   270ee:	mov    QWORD PTR [rax+0x48],rdx
   270f2:	mov    rdx,QWORD PTR [rax+0x28]
   270f6:	mov    QWORD PTR [rax+0x50],rdx
   270fa:	mov    edx,DWORD PTR [rax+0x58]
   270fd:	mov    DWORD PTR [rax+0x5c],edx
   27100:	mov    edx,DWORD PTR [rax+0x68]
   27103:	mov    DWORD PTR [rax+0x6c],edx
   27106:	mov    edx,DWORD PTR [rax+0x60]
   27109:	mov    DWORD PTR [rax+0x64],edx
   2710c:	mov    rax,rcx
   2710f:	cmp    rcx,r10
   27112:	jne    270b0 <start_macroblock+0x6a0>
   27114:	jmp    26a8e <start_macroblock+0x7e>
   27119:	add    rsp,0x18
   2711d:	xor    eax,eax
   2711f:	pop    rbx
   27120:	pop    rbp
   27121:	pop    r12
   27123:	pop    r13
   27125:	pop    r14
   27127:	pop    r15
   27129:	jmp    394f0 <ResetFastFullIntegerSearch>
   2712e:	xor    eax,eax
   27130:	call   c9e0 <CheckAvailabilityOfNeighborsCABAC>
   27135:	mov    r12,QWORD PTR [rip+0x6147c]        # 885b8 <input>
   2713c:	jmp    26d5a <start_macroblock+0x34a>
   27141:	mov    edx,DWORD PTR [rbx+0x214]
   27147:	test   edx,edx
   27149:	jne    271ea <start_macroblock+0x7da>
   2714f:	movsxd rax,DWORD PTR [rcx+0xc]
   27153:	test   eax,eax
   27155:	jne    272e0 <start_macroblock+0x8d0>
   2715b:	mov    eax,DWORD PTR [rcx+0x28]
   2715e:	mov    edi,DWORD PTR [rsi+0xb44]
   27164:	mov    DWORD PTR [rbx+0x8],0x0
   2716b:	mov    DWORD PTR [rip+0xb724b],0x0        # de3c0 <DELTA_QP2>
   27175:	mov    DWORD PTR [rbx+0xc],eax
   27178:	mov    DWORD PTR [rip+0xb953e],0x0        # e06c0 <DELTA_QP>
   27182:	mov    DWORD PTR [rip+0x8f5bc],eax        # b6744 <QP2>
   27188:	mov    DWORD PTR [rip+0x8f5b2],eax        # b6740 <QP>
   2718e:	test   edi,edi
   27190:	je     26b68 <start_macroblock+0x158>
   27196:	cmp    DWORD PTR [rcx+0x11bb4],0x0
   2719d:	je     26b68 <start_macroblock+0x158>
   271a3:	jmp    27217 <start_macroblock+0x807>
   271a5:	nop    DWORD PTR [rax]
   271a8:	mov    eax,DWORD PTR [rbx+0x260]
   271ae:	mov    DWORD PTR [rip+0x90224],eax        # b73d8 <predict_error>
   271b4:	jmp    26cf7 <start_macroblock+0x2e7>
   271b9:	mov    DWORD PTR [rbx+0x25c],eax
   271bf:	jmp    26c1d <start_macroblock+0x20d>
   271c4:	mov    eax,DWORD PTR [rcx+0x28]
   271c7:	mov    edi,DWORD PTR [rsi+0xb44]
   271cd:	mov    DWORD PTR [rbx+0x8],0x0
   271d4:	mov    DWORD PTR [rbx+0xc],eax
   271d7:	test   edi,edi
   271d9:	je     2735b <start_macroblock+0x94b>
   271df:	mov    DWORD PTR [rbx+0x250],eax
   271e5:	jmp    26cf7 <start_macroblock+0x2e7>
   271ea:	mov    edx,DWORD PTR [rcx+0x11bb4]
   271f0:	test   edx,edx
   271f2:	jne    27257 <start_macroblock+0x847>
   271f4:	mov    eax,DWORD PTR [rip+0xb71c6]        # de3c0 <DELTA_QP2>
   271fa:	mov    DWORD PTR [rbx+0x8],eax
   271fd:	mov    eax,DWORD PTR [rip+0x8f541]        # b6744 <QP2>
   27203:	mov    DWORD PTR [rcx+0x28],eax
   27206:	mov    DWORD PTR [rbx+0xc],eax
   27209:	mov    eax,DWORD PTR [rsi+0xb44]
   2720f:	test   eax,eax
   27211:	je     271a8 <start_macroblock+0x798>
   27213:	test   edx,edx
   27215:	je     271a8 <start_macroblock+0x798>
   27217:	mov    eax,DWORD PTR [rcx+0x28]
   2721a:	jmp    271df <start_macroblock+0x7cf>
   2721c:	nop    DWORD PTR [rax+0x0]
   27220:	mov    esi,DWORD PTR [rcx+0x28]
   27223:	mov    DWORD PTR [rcx+0x11b90],esi
   27229:	jmp    26be3 <start_macroblock+0x1d3>
   2722e:	cmp    esi,r9d
   27231:	jle    27266 <start_macroblock+0x856>
   27233:	mov    eax,DWORD PTR [rcx+0x28]
   27236:	mov    edx,r9d
   27239:	mov    DWORD PTR [rip+0x9019c],r9d        # b73dc <dq>
   27240:	sub    edx,r11d
   27243:	add    eax,edx
   27245:	mov    DWORD PTR [rip+0x9018d],edx        # b73d8 <predict_error>
   2724b:	mov    DWORD PTR [rcx+0x28],eax
   2724e:	mov    DWORD PTR [rbx+0x8],r9d
   27252:	jmp    26c5f <start_macroblock+0x24f>
   27257:	mov    eax,DWORD PTR [rcx+0x28]
   2725a:	mov    DWORD PTR [rbx+0x8],0x0
   27261:	mov    DWORD PTR [rbx+0xc],eax
   27264:	jmp    27209 <start_macroblock+0x7f9>
   27266:	mov    edx,eax
   27268:	mov    DWORD PTR [rbx+0x8],esi
   2726b:	sub    edx,r10d
   2726e:	mov    DWORD PTR [rcx+0x28],eax
   27271:	mov    DWORD PTR [rip+0x90161],edx        # b73d8 <predict_error>
   27277:	jmp    26c5f <start_macroblock+0x24f>
   2727c:	mov    eax,DWORD PTR [rip+0xb713e]        # de3c0 <DELTA_QP2>
   27282:	mov    DWORD PTR [rbx+0x8],eax
   27285:	mov    eax,DWORD PTR [rip+0x8f4b9]        # b6744 <QP2>
   2728b:	mov    DWORD PTR [rbx+0xc],eax
   2728e:	mov    DWORD PTR [rcx+0x28],eax
   27291:	jmp    26b54 <start_macroblock+0x144>
   27296:	mov    eax,DWORD PTR [rcx+0x11ba4]
   2729c:	test   eax,eax
   2729e:	jne    26bad <start_macroblock+0x19d>
   272a4:	xor    eax,eax
   272a6:	call   4cae0 <updateRCModel>
   272ab:	mov    r12,QWORD PTR [rip+0x612fe]        # 885b0 <img>
   272b2:	mov    edi,DWORD PTR [r12+0x11b94]
   272ba:	call   4d160 <updateQuantizationParameter>
   272bf:	mov    rcx,QWORD PTR [rip+0x612ea]        # 885b0 <img>
   272c6:	mov    DWORD PTR [r12+0x11b90],eax
   272ce:	mov    rax,QWORD PTR [rip+0x612e3]        # 885b8 <input>
   272d5:	mov    edi,DWORD PTR [rax+0xb44]
   272db:	jmp    26bd2 <start_macroblock+0x1c2>
   272e0:	mov    edi,DWORD PTR [rsi+0xb44]
   272e6:	test   edi,edi
   272e8:	je     27308 <start_macroblock+0x8f8>
   272ea:	mov    r8d,DWORD PTR [rcx+0x11bb4]
   272f1:	test   r8d,r8d
   272f4:	je     27308 <start_macroblock+0x8f8>
   272f6:	mov    eax,DWORD PTR [rcx+0x28]
   272f9:	mov    DWORD PTR [rbx+0x8],0x0
   27300:	mov    DWORD PTR [rbx+0xc],eax
   27303:	jmp    271df <start_macroblock+0x7cf>
   27308:	imul   rax,rax,0x278
   2730f:	mov    r8,QWORD PTR [rcx+0x3758]
   27316:	lea    r8,[r8+rax*1-0x278]
   2731e:	cmp    DWORD PTR [r8+0x258],0x1
   27326:	je     27366 <start_macroblock+0x956>
   27328:	mov    eax,DWORD PTR [r8+0x250]
   2732f:	mov    DWORD PTR [rbx+0xc],eax
   27332:	mov    edx,eax
   27334:	sub    edx,DWORD PTR [r8+0xc]
   27338:	mov    DWORD PTR [rbx+0x8],edx
   2733b:	mov    DWORD PTR [rcx+0x28],eax
   2733e:	mov    DWORD PTR [rip+0xb707c],edx        # de3c0 <DELTA_QP2>
   27344:	mov    DWORD PTR [rip+0xb9376],edx        # e06c0 <DELTA_QP>
   2734a:	mov    DWORD PTR [rip+0x8f3f4],eax        # b6744 <QP2>
   27350:	mov    DWORD PTR [rip+0x8f3ea],eax        # b6740 <QP>
   27356:	jmp    2718e <start_macroblock+0x77e>
   2735b:	mov    eax,DWORD PTR [rbx+0x214]
   27361:	jmp    26b60 <start_macroblock+0x150>
   27366:	mov    eax,DWORD PTR [rcx+0x28]
   27369:	mov    DWORD PTR [rbx+0x8],0x0
   27370:	mov    DWORD PTR [rbx+0xc],eax
   27373:	jmp    2733e <start_macroblock+0x92e>
   27375:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000027380 <slice_too_big>:
   27380:	endbr64 
   27384:	push   rbp
   27385:	push   rbx
   27386:	sub    rsp,0x8
   2738a:	mov    rax,QWORD PTR [rip+0x6121f]        # 885b0 <img>
   27391:	mov    rdx,QWORD PTR [rip+0x61220]        # 885b8 <input>
   27398:	mov    rbp,QWORD PTR [rax+0x3750]
   2739f:	mov    eax,DWORD PTR [rdx+0x934]
   273a5:	test   eax,eax
   273a7:	jne    27408 <slice_too_big+0x88>
   273a9:	mov    eax,DWORD PTR [rbp+0x10]
   273ac:	test   eax,eax
   273ae:	jle    2740d <slice_too_big+0x8d>
   273b0:	lea    ecx,[rax-0x1]
   273b3:	mov    r8d,DWORD PTR [rdx+0xd4]
   273ba:	mov    rdx,QWORD PTR [rbp+0x18]
   273be:	mov    rax,rcx
   273c1:	shl    rax,0x4
   273c5:	sub    rax,rcx
   273c8:	lea    r9,[rdx+rax*8+0x78]
   273cd:	jmp    273d9 <slice_too_big+0x59>
   273cf:	nop
   273d0:	add    rdx,0x78
   273d4:	cmp    rdx,r9
   273d7:	je     2740d <slice_too_big+0x8d>
   273d9:	mov    rsi,QWORD PTR [rdx]
   273dc:	xor    eax,eax
   273de:	mov    ecx,DWORD PTR [rsi+0x4]
   273e1:	cmp    ecx,0x8
   273e4:	setl   al
   273e7:	add    eax,DWORD PTR [rsi]
   273e9:	cmp    ecx,edi
   273eb:	setl   cl
   273ee:	movzx  ecx,cl
   273f1:	add    eax,ecx
   273f3:	cmp    r8d,eax
   273f6:	jge    273d0 <slice_too_big+0x50>
   273f8:	mov    eax,0x1
   273fd:	add    rsp,0x8
   27401:	pop    rbx
   27402:	pop    rbp
   27403:	ret    
   27404:	nop    DWORD PTR [rax+0x0]
   27408:	cmp    eax,0x1
   2740b:	je     27420 <slice_too_big+0xa0>
   2740d:	add    rsp,0x8
   27411:	xor    eax,eax
   27413:	pop    rbx
   27414:	pop    rbp
   27415:	ret    
   27416:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27420:	mov    eax,DWORD PTR [rbp+0x10]
   27423:	test   eax,eax
   27425:	jle    2740d <slice_too_big+0x8d>
   27427:	xor    ebx,ebx
   27429:	jmp    27439 <slice_too_big+0xb9>
   2742b:	nop    DWORD PTR [rax+rax*1+0x0]
   27430:	add    rbx,0x1
   27434:	cmp    DWORD PTR [rbp+0x10],ebx
   27437:	jle    2740d <slice_too_big+0x8d>
   27439:	mov    rax,rbx
   2743c:	mov    rdx,QWORD PTR [rbp+0x18]
   27440:	shl    rax,0x4
   27444:	sub    rax,rbx
   27447:	lea    rdi,[rdx+rax*8+0x8]
   2744c:	call   4ee0 <arienco_bits_written>
   27451:	mov    r8d,eax
   27454:	mov    rax,QWORD PTR [rip+0x6115d]        # 885b8 <input>
   2745b:	mov    eax,DWORD PTR [rax+0xd4]
   27461:	shl    eax,0x3
   27464:	cmp    r8d,eax
   27467:	jle    27430 <slice_too_big+0xb0>
   27469:	mov    eax,0x1
   2746e:	jmp    273fd <slice_too_big+0x7d>

0000000000027470 <terminate_macroblock>:
   27470:	endbr64 
   27474:	push   r15
   27476:	lea    rdx,[rip+0x634f3]        # 8a970 <assignSE2partition>
   2747d:	push   r14
   2747f:	push   r13
   27481:	mov    r13,rdi
   27484:	push   r12
   27486:	push   rbp
   27487:	mov    rbp,rsi
   2748a:	push   rbx
   2748b:	sub    rsp,0x38
   2748f:	mov    r12,QWORD PTR [rip+0x6111a]        # 885b0 <img>
   27496:	movsxd rbx,DWORD PTR [r12+0xc]
   2749b:	mov    r14,QWORD PTR [r12+0x3750]
   274a3:	mov    rdi,rbx
   274a6:	imul   rbx,rbx,0x278
   274ad:	add    rbx,QWORD PTR [r12+0x3758]
   274b5:	movsxd r15,DWORD PTR [rbx]
   274b8:	lea    rax,[r15+r15*2]
   274bc:	shl    rax,0x4
   274c0:	lea    rax,[r12+rax*1+0x3760]
   274c8:	mov    QWORD PTR [rsp+0x10],rax
   274cd:	mov    rax,QWORD PTR [rip+0x610e4]        # 885b8 <input>
   274d4:	movsxd rcx,DWORD PTR [rax+0x93c]
   274db:	mov    rsi,QWORD PTR [rdx+rcx*8]
   274df:	mov    edx,0x1
   274e4:	mov    QWORD PTR [rsp+0x8],rsi
   274e9:	mov    esi,DWORD PTR [rax+0xd0]
   274ef:	mov    DWORD PTR [rsp+0x28],esi
   274f3:	test   edi,edi
   274f5:	jne    27778 <terminate_macroblock+0x308>
   274fb:	mov    DWORD PTR [rbp+0x0],0x0
   27502:	mov    r9d,DWORD PTR [rax+0xd0]
   27509:	cmp    r9d,0x2
   2750d:	je     277a0 <terminate_macroblock+0x330>
   27513:	jg     275b0 <terminate_macroblock+0x140>
   27519:	test   r9d,r9d
   2751c:	je     27878 <terminate_macroblock+0x408>
   27522:	cmp    r9d,0x1
   27526:	jne    27838 <terminate_macroblock+0x3c8>
   2752c:	mov    rax,QWORD PTR [rip+0x6107d]        # 885b0 <img>
   27533:	add    DWORD PTR [r14+0x14],0x1
   27538:	mov    DWORD PTR [rbp+0x0],0x0
   2753f:	mov    edx,DWORD PTR [rax+0xc]
   27542:	mov    edi,edx
   27544:	mov    DWORD PTR [rsp+0x18],edx
   27548:	call   19b60 <FmoMB2SliceGroup>
   2754d:	mov    edi,eax
   2754f:	call   19c80 <FmoGetLastCodedMBOfSliceGroup>
   27554:	mov    edx,DWORD PTR [rsp+0x18]
   27558:	cmp    edx,eax
   2755a:	sete   al
   2755d:	sete   dl
   27560:	movzx  eax,al
   27563:	mov    DWORD PTR [r13+0x0],eax
   27567:	mov    rax,QWORD PTR [rip+0x6104a]        # 885b8 <input>
   2756e:	mov    eax,DWORD PTR [rax+0xd4]
   27574:	cmp    DWORD PTR [r14+0x14],eax
   27578:	setge  al
   2757b:	or     eax,edx
   2757d:	movzx  eax,al
   27580:	mov    DWORD PTR [r13+0x0],eax
   27584:	mov    eax,DWORD PTR [rbp+0x0]
   27587:	cmp    eax,0x1
   2758a:	je     276d0 <terminate_macroblock+0x260>
   27590:	cmp    DWORD PTR [r13+0x0],0x1
   27595:	je     27610 <terminate_macroblock+0x1a0>
   27597:	add    rsp,0x38
   2759b:	pop    rbx
   2759c:	pop    rbp
   2759d:	pop    r12
   2759f:	pop    r13
   275a1:	pop    r14
   275a3:	pop    r15
   275a5:	ret    
   275a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   275b0:	cmp    r9d,0x3
   275b4:	jne    27838 <terminate_macroblock+0x3c8>
   275ba:	mov    rax,QWORD PTR [rip+0x60fef]        # 885b0 <img>
   275c1:	mov    ecx,DWORD PTR [rax+0xc]
   275c4:	test   edx,edx
   275c6:	jne    275d0 <terminate_macroblock+0x160>
   275c8:	test   ecx,ecx
   275ca:	jg     27ad8 <terminate_macroblock+0x668>
   275d0:	mov    edi,ecx
   275d2:	mov    DWORD PTR [rsp+0x18],ecx
   275d6:	call   19b60 <FmoMB2SliceGroup>
   275db:	mov    edi,eax
   275dd:	call   19c80 <FmoGetLastCodedMBOfSliceGroup>
   275e2:	mov    ecx,DWORD PTR [rsp+0x18]
   275e6:	cmp    eax,ecx
   275e8:	jne    2786d <terminate_macroblock+0x3fd>
   275ee:	mov    DWORD PTR [r13+0x0],0x1
   275f6:	cmp    DWORD PTR [rbp+0x0],0x1
   275fa:	jne    27610 <terminate_macroblock+0x1a0>
   275fc:	mov    edx,DWORD PTR [r14+0x10]
   27600:	test   edx,edx
   27602:	jg     276dc <terminate_macroblock+0x26c>
   27608:	nop    DWORD PTR [rax+rax*1+0x0]
   27610:	mov    rax,QWORD PTR [rip+0x60f99]        # 885b0 <img>
   27617:	cmp    DWORD PTR [rip+0x617e2],0x1        # 88e00 <skip.5274>
   2761e:	mov    edx,DWORD PTR [rax+0x78]
   27621:	je     27a20 <terminate_macroblock+0x5b0>
   27627:	mov    eax,DWORD PTR [rsp+0x28]
   2762b:	sub    eax,0x2
   2762e:	cmp    eax,0x1
   27631:	jbe    27597 <terminate_macroblock+0x127>
   27637:	test   edx,edx
   27639:	je     27597 <terminate_macroblock+0x127>
   2763f:	lea    rax,[r15+r15*2]
   27643:	mov    rdi,QWORD PTR [rsp+0x10]
   27648:	shl    rax,0x4
   2764c:	add    r12,rax
   2764f:	lea    rax,[rip+0x3ec5a]        # 662b0 <ue_linfo>
   27656:	mov    DWORD PTR [r12+0x3764],edx
   2765e:	mov    QWORD PTR [r12+0x3780],rax
   27666:	mov    rax,QWORD PTR [rsp+0x8]
   2766b:	mov    DWORD PTR [r12+0x3768],0x0
   27677:	mov    DWORD PTR [r12+0x3760],0x2
   27683:	movsxd rdx,DWORD PTR [rax+0x8]
   27687:	mov    rax,rdx
   2768a:	shl    rax,0x4
   2768e:	sub    rax,rdx
   27691:	mov    rdx,QWORD PTR [r14+0x18]
   27695:	lea    rax,[rdx+rax*8]
   27699:	mov    rsi,rax
   2769c:	call   QWORD PTR [rax+0x70]
   2769f:	mov    eax,DWORD PTR [r12+0x376c]
   276a7:	add    DWORD PTR [rbx+0x1c],eax
   276aa:	mov    rax,QWORD PTR [rip+0x60eff]        # 885b0 <img>
   276b1:	add    DWORD PTR [rbx],0x1
   276b4:	mov    DWORD PTR [rax+0x78],0x0
   276bb:	add    rsp,0x38
   276bf:	pop    rbx
   276c0:	pop    rbp
   276c1:	pop    r12
   276c3:	pop    r13
   276c5:	pop    r14
   276c7:	pop    r15
   276c9:	ret    
   276ca:	nop    WORD PTR [rax+rax*1+0x0]
   276d0:	mov    edx,DWORD PTR [r14+0x10]
   276d4:	test   edx,edx
   276d6:	jle    27590 <terminate_macroblock+0x120>
   276dc:	mov    rax,QWORD PTR [rip+0x60ed5]        # 885b8 <input>
   276e3:	lea    ecx,[rdx-0x1]
   276e6:	mov    rdx,rcx
   276e9:	mov    r9d,DWORD PTR [rax+0x934]
   276f0:	mov    rax,QWORD PTR [r14+0x18]
   276f4:	shl    rdx,0x4
   276f8:	sub    rdx,rcx
   276fb:	lea    rcx,[rax+0x78]
   276ff:	lea    r8,[rcx+rdx*8]
   27703:	jmp    2770c <terminate_macroblock+0x29c>
   27705:	nop    DWORD PTR [rax]
   27708:	add    rcx,0x78
   2770c:	mov    rdx,QWORD PTR [rax]
   2770f:	movzx  esi,BYTE PTR [rdx+0x14]
   27713:	mov    rdi,QWORD PTR [rdx+0xc]
   27717:	mov    BYTE PTR [rdx+0x8],sil
   2771b:	mov    QWORD PTR [rdx],rdi
   2771e:	cmp    r9d,0x1
   27722:	jne    27764 <terminate_macroblock+0x2f4>
   27724:	mov    edx,DWORD PTR [rax+0x30]
   27727:	mov    DWORD PTR [rax+0x8],edx
   2772a:	mov    edx,DWORD PTR [rax+0x34]
   2772d:	mov    DWORD PTR [rax+0xc],edx
   27730:	mov    edx,DWORD PTR [rax+0x38]
   27733:	mov    DWORD PTR [rax+0x10],edx
   27736:	mov    edx,DWORD PTR [rax+0x3c]
   27739:	mov    DWORD PTR [rax+0x14],edx
   2773c:	mov    edx,DWORD PTR [rax+0x40]
   2773f:	mov    DWORD PTR [rax+0x18],edx
   27742:	mov    rdx,QWORD PTR [rax+0x48]
   27746:	mov    QWORD PTR [rax+0x20],rdx
   2774a:	mov    rdx,QWORD PTR [rax+0x50]
   2774e:	mov    QWORD PTR [rax+0x28],rdx
   27752:	mov    edx,DWORD PTR [rax+0x5c]
   27755:	mov    DWORD PTR [rax+0x58],edx
   27758:	mov    edx,DWORD PTR [rax+0x6c]
   2775b:	mov    DWORD PTR [rax+0x68],edx
   2775e:	mov    edx,DWORD PTR [rax+0x64]
   27761:	mov    DWORD PTR [rax+0x60],edx
   27764:	mov    rax,rcx
   27767:	cmp    rcx,r8
   2776a:	jne    27708 <terminate_macroblock+0x298>
   2776c:	jmp    27590 <terminate_macroblock+0x120>
   27771:	nop    DWORD PTR [rax+0x0]
   27778:	mov    DWORD PTR [rsp+0x18],edx
   2777c:	call   19bd0 <FmoGetPreviousMBNr>
   27781:	test   eax,eax
   27783:	jns    278c8 <terminate_macroblock+0x458>
   27789:	mov    rax,QWORD PTR [rip+0x60e28]        # 885b8 <input>
   27790:	mov    edx,DWORD PTR [rsp+0x18]
   27794:	jmp    274fb <terminate_macroblock+0x8b>
   27799:	nop    DWORD PTR [rax+0x0]
   277a0:	mov    rax,QWORD PTR [rip+0x60e09]        # 885b0 <img>
   277a7:	mov    r8d,DWORD PTR [rax+0x78]
   277ab:	test   r8d,r8d
   277ae:	jne    27918 <terminate_macroblock+0x4a8>
   277b4:	test   edx,edx
   277b6:	je     27a70 <terminate_macroblock+0x600>
   277bc:	mov    ecx,DWORD PTR [rax+0xc]
   277bf:	mov    DWORD PTR [rsp+0x2c],r8d
   277c4:	mov    DWORD PTR [rsp+0x20],edx
   277c8:	mov    edi,ecx
   277ca:	mov    DWORD PTR [rsp+0x18],ecx
   277ce:	call   19b60 <FmoMB2SliceGroup>
   277d3:	mov    edi,eax
   277d5:	call   19c80 <FmoGetLastCodedMBOfSliceGroup>
   277da:	mov    ecx,DWORD PTR [rsp+0x18]
   277de:	mov    edx,DWORD PTR [rsp+0x20]
   277e2:	mov    r8d,DWORD PTR [rsp+0x2c]
   277e7:	cmp    ecx,eax
   277e9:	jne    279ce <terminate_macroblock+0x55e>
   277ef:	mov    rax,QWORD PTR [rip+0x60dba]        # 885b0 <img>
   277f6:	mov    DWORD PTR [r13+0x0],0x1
   277fe:	mov    eax,DWORD PTR [rax+0x78]
   27801:	test   eax,eax
   27803:	jne    279ce <terminate_macroblock+0x55e>
   27809:	mov    DWORD PTR [rip+0x615ed],0x0        # 88e00 <skip.5274>
   27813:	test   edx,edx
   27815:	jne    279ce <terminate_macroblock+0x55e>
   2781b:	mov    eax,DWORD PTR [rbp+0x0]
   2781e:	test   eax,eax
   27820:	jne    27587 <terminate_macroblock+0x117>
   27826:	add    DWORD PTR [r14+0x14],0x1
   2782b:	mov    eax,DWORD PTR [rbp+0x0]
   2782e:	jmp    27587 <terminate_macroblock+0x117>
   27833:	nop    DWORD PTR [rax+rax*1+0x0]
   27838:	mov    esi,0x12c
   2783d:	lea    rdi,[rip+0x8d75c]        # b4fa0 <errortext>
   27844:	mov    ecx,0x12c
   27849:	xor    eax,eax
   2784b:	lea    r8,[rip+0x4d6e2]        # 74f34 <mb_width_cr.6670+0x24>
   27852:	mov    edx,0x1
   27857:	call   42c0 <__snprintf_chk@plt>
   2785c:	mov    esi,0x258
   27861:	lea    rdi,[rip+0x8d738]        # b4fa0 <errortext>
   27868:	call   19180 <error>
   2786d:	mov    eax,DWORD PTR [rbp+0x0]
   27870:	jmp    27587 <terminate_macroblock+0x117>
   27875:	nop    DWORD PTR [rax]
   27878:	mov    rax,QWORD PTR [rip+0x60d31]        # 885b0 <img>
   2787f:	add    DWORD PTR [r14+0x14],0x1
   27884:	mov    DWORD PTR [rbp+0x0],0x0
   2788b:	mov    esi,DWORD PTR [rax+0x10]
   2788e:	cmp    DWORD PTR [r14+0x14],esi
   27892:	je     27a10 <terminate_macroblock+0x5a0>
   27898:	mov    edx,DWORD PTR [rax+0xc]
   2789b:	mov    edi,edx
   2789d:	mov    DWORD PTR [rsp+0x18],edx
   278a1:	call   19b60 <FmoMB2SliceGroup>
   278a6:	mov    edi,eax
   278a8:	call   19c80 <FmoGetLastCodedMBOfSliceGroup>
   278ad:	mov    edx,DWORD PTR [rsp+0x18]
   278b1:	cmp    edx,eax
   278b3:	sete   al
   278b6:	movzx  eax,al
   278b9:	or     DWORD PTR [r13+0x0],eax
   278bd:	mov    eax,DWORD PTR [rbp+0x0]
   278c0:	jmp    27587 <terminate_macroblock+0x117>
   278c5:	nop    DWORD PTR [rax]
   278c8:	mov    rax,QWORD PTR [rip+0x60ce1]        # 885b0 <img>
   278cf:	mov    rdx,QWORD PTR [rax+0x3758]
   278d6:	mov    edi,DWORD PTR [rax+0xc]
   278d9:	mov    QWORD PTR [rsp+0x18],rdx
   278de:	call   19bd0 <FmoGetPreviousMBNr>
   278e3:	mov    rdx,QWORD PTR [rsp+0x18]
   278e8:	mov    rcx,QWORD PTR [rip+0x60cc1]        # 885b0 <img>
   278ef:	cdqe   
   278f1:	imul   rax,rax,0x278
   278f8:	mov    esi,DWORD PTR [rcx+0x14]
   278fb:	cmp    DWORD PTR [rdx+rax*1+0x4],esi
   278ff:	mov    rax,QWORD PTR [rip+0x60cb2]        # 885b8 <input>
   27906:	setne  dl
   27909:	movzx  edx,dl
   2790c:	jmp    274fb <terminate_macroblock+0x8b>
   27911:	nop    DWORD PTR [rax+0x0]
   27918:	lea    rcx,[r15+r15*2]
   2791c:	lea    rax,[rip+0x3e98d]        # 662b0 <ue_linfo>
   27923:	mov    DWORD PTR [rsp+0x2c],edx
   27927:	shl    rcx,0x4
   2792b:	mov    rdi,QWORD PTR [rsp+0x10]
   27930:	add    rcx,r12
   27933:	mov    QWORD PTR [rcx+0x3780],rax
   2793a:	mov    rax,QWORD PTR [rsp+0x8]
   2793f:	mov    DWORD PTR [rcx+0x3764],r8d
   27946:	mov    DWORD PTR [rcx+0x3768],0x0
   27950:	mov    DWORD PTR [rcx+0x3760],0x2
   2795a:	movsxd rsi,DWORD PTR [rax+0x8]
   2795e:	mov    QWORD PTR [rsp+0x20],rcx
   27963:	mov    rax,rsi
   27966:	shl    rax,0x4
   2796a:	sub    rax,rsi
   2796d:	mov    rsi,QWORD PTR [r14+0x18]
   27971:	lea    rsi,[rsi+rax*8]
   27975:	mov    QWORD PTR [rsp+0x18],rsi
   2797a:	call   QWORD PTR [rsi+0x70]
   2797d:	mov    rsi,QWORD PTR [rsp+0x18]
   27982:	mov    rcx,QWORD PTR [rsp+0x20]
   27987:	mov    DWORD PTR [rip+0x6146f],0x1        # 88e00 <skip.5274>
   27991:	mov    edx,DWORD PTR [rsp+0x2c]
   27995:	mov    rax,QWORD PTR [rsi]
   27998:	mov    r8d,DWORD PTR [rcx+0x376c]
   2799f:	mov    rcx,QWORD PTR [rax]
   279a2:	mov    rsi,QWORD PTR [rax+0xc]
   279a6:	mov    QWORD PTR [rax+0x18],rcx
   279aa:	movzx  ecx,BYTE PTR [rax+0x8]
   279ae:	mov    QWORD PTR [rax],rsi
   279b1:	mov    BYTE PTR [rax+0x15],cl
   279b4:	movzx  ecx,BYTE PTR [rax+0x14]
   279b8:	mov    BYTE PTR [rax+0x8],cl
   279bb:	test   edx,edx
   279bd:	je     27a70 <terminate_macroblock+0x600>
   279c3:	mov    ecx,DWORD PTR [rbp+0x0]
   279c6:	test   ecx,ecx
   279c8:	je     27bae <terminate_macroblock+0x73e>
   279ce:	mov    edi,r8d
   279d1:	call   27380 <slice_too_big>
   279d6:	test   eax,eax
   279d8:	je     2781b <terminate_macroblock+0x3ab>
   279de:	mov    rax,QWORD PTR [rip+0x60bcb]        # 885b0 <img>
   279e5:	mov    DWORD PTR [r13+0x0],0x1
   279ed:	mov    edi,DWORD PTR [rax+0x78]
   279f0:	test   edi,edi
   279f2:	jne    2781b <terminate_macroblock+0x3ab>
   279f8:	mov    DWORD PTR [rip+0x613fe],0x0        # 88e00 <skip.5274>
   27a02:	jmp    2781b <terminate_macroblock+0x3ab>
   27a07:	nop    WORD PTR [rax+rax*1+0x0]
   27a10:	mov    DWORD PTR [r13+0x0],0x1
   27a18:	jmp    27898 <terminate_macroblock+0x428>
   27a1d:	nop    DWORD PTR [rax]
   27a20:	test   edx,edx
   27a22:	je     27a2e <terminate_macroblock+0x5be>
   27a24:	cmp    DWORD PTR [rbp+0x0],0x1
   27a28:	je     27b24 <terminate_macroblock+0x6b4>
   27a2e:	mov    rbx,QWORD PTR [rsp+0x8]
   27a33:	mov    rsi,QWORD PTR [r14+0x18]
   27a37:	mov    DWORD PTR [rip+0x613bf],0x0        # 88e00 <skip.5274>
   27a41:	movsxd rcx,DWORD PTR [rbx+0x8]
   27a45:	mov    rdx,rcx
   27a48:	shl    rdx,0x4
   27a4c:	sub    rdx,rcx
   27a4f:	lea    rdx,[rsi+rdx*8]
   27a53:	mov    rdx,QWORD PTR [rdx]
   27a56:	mov    rcx,QWORD PTR [rdx+0x18]
   27a5a:	mov    QWORD PTR [rdx],rcx
   27a5d:	movzx  ecx,BYTE PTR [rdx+0x15]
   27a61:	mov    BYTE PTR [rdx+0x8],cl
   27a64:	mov    DWORD PTR [rax+0x78],0x0
   27a6b:	jmp    27597 <terminate_macroblock+0x127>
   27a70:	mov    edi,r8d
   27a73:	call   27380 <slice_too_big>
   27a78:	test   eax,eax
   27a7a:	jne    27b10 <terminate_macroblock+0x6a0>
   27a80:	mov    rax,QWORD PTR [rip+0x60b29]        # 885b0 <img>
   27a87:	mov    r8d,DWORD PTR [rax+0x78]
   27a8b:	test   r8d,r8d
   27a8e:	jne    27a9a <terminate_macroblock+0x62a>
   27a90:	mov    DWORD PTR [rip+0x61366],0x0        # 88e00 <skip.5274>
   27a9a:	mov    eax,DWORD PTR [rbp+0x0]
   27a9d:	test   eax,eax
   27a9f:	jne    27587 <terminate_macroblock+0x117>
   27aa5:	mov    rax,QWORD PTR [rip+0x60b04]        # 885b0 <img>
   27aac:	mov    edx,DWORD PTR [rax+0xc]
   27aaf:	mov    edi,edx
   27ab1:	mov    DWORD PTR [rsp+0x18],edx
   27ab5:	call   19b60 <FmoMB2SliceGroup>
   27aba:	mov    edi,eax
   27abc:	call   19c80 <FmoGetLastCodedMBOfSliceGroup>
   27ac1:	mov    edx,DWORD PTR [rsp+0x18]
   27ac5:	cmp    eax,edx
   27ac7:	jne    2781b <terminate_macroblock+0x3ab>
   27acd:	jmp    279de <terminate_macroblock+0x56e>
   27ad2:	nop    WORD PTR [rax+rax*1+0x0]
   27ad8:	xor    edi,edi
   27ada:	call   QWORD PTR [r14+0x78]
   27ade:	test   eax,eax
   27ae0:	je     27af1 <terminate_macroblock+0x681>
   27ae2:	mov    DWORD PTR [rbp+0x0],0x1
   27ae9:	mov    DWORD PTR [r13+0x0],0x1
   27af1:	mov    eax,DWORD PTR [rbp+0x0]
   27af4:	test   eax,eax
   27af6:	jne    27587 <terminate_macroblock+0x117>
   27afc:	mov    rax,QWORD PTR [rip+0x60aad]        # 885b0 <img>
   27b03:	mov    ecx,DWORD PTR [rax+0xc]
   27b06:	jmp    275d0 <terminate_macroblock+0x160>
   27b0b:	nop    DWORD PTR [rax+rax*1+0x0]
   27b10:	mov    DWORD PTR [rbp+0x0],0x1
   27b17:	mov    DWORD PTR [r13+0x0],0x1
   27b1f:	jmp    27a9a <terminate_macroblock+0x62a>
   27b24:	sub    edx,0x1
   27b27:	mov    DWORD PTR [rax+0x78],edx
   27b2a:	je     27597 <terminate_macroblock+0x127>
   27b30:	lea    rax,[r15+r15*2]
   27b34:	mov    rdi,QWORD PTR [rsp+0x10]
   27b39:	shl    rax,0x4
   27b3d:	add    r12,rax
   27b40:	lea    rax,[rip+0x3e769]        # 662b0 <ue_linfo>
   27b47:	mov    DWORD PTR [r12+0x3764],edx
   27b4f:	mov    QWORD PTR [r12+0x3780],rax
   27b57:	mov    rax,QWORD PTR [rsp+0x8]
   27b5c:	mov    DWORD PTR [r12+0x3768],0x0
   27b68:	mov    DWORD PTR [r12+0x3760],0x2
   27b74:	movsxd rdx,DWORD PTR [rax+0x8]
   27b78:	mov    rax,rdx
   27b7b:	shl    rax,0x4
   27b7f:	sub    rax,rdx
   27b82:	mov    rdx,QWORD PTR [r14+0x18]
   27b86:	lea    rax,[rdx+rax*8]
   27b8a:	mov    rsi,rax
   27b8d:	call   QWORD PTR [rax+0x70]
   27b90:	mov    eax,DWORD PTR [r12+0x376c]
   27b98:	add    DWORD PTR [rbx+0x1c],eax
   27b9b:	mov    rax,QWORD PTR [rip+0x60a0e]        # 885b0 <img>
   27ba2:	mov    DWORD PTR [rax+0x78],0x0
   27ba9:	jmp    27597 <terminate_macroblock+0x127>
   27bae:	mov    rax,QWORD PTR [rip+0x609fb]        # 885b0 <img>
   27bb5:	jmp    277bc <terminate_macroblock+0x34c>
   27bba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000027bc0 <OneComponentLumaPrediction4x4>:
   27bc0:	endbr64 
   27bc4:	push   r15
   27bc6:	mov    r10d,esi
   27bc9:	movsx  r8,r8w
   27bcd:	push   r14
   27bcf:	push   r13
   27bd1:	push   r12
   27bd3:	push   rbp
   27bd4:	push   rbx
   27bd5:	mov    rbx,rdi
   27bd8:	sub    rsp,0x28
   27bdc:	movsx  eax,WORD PTR [rcx+0x2]
   27be0:	lea    esi,[rax+rdx*4]
   27be3:	lea    eax,[rsi+0xc]
   27be6:	lea    r15d,[rsi+0x4]
   27bea:	mov    DWORD PTR [rsp+0x18],esi
   27bee:	mov    DWORD PTR [rsp+0x14],eax
   27bf2:	movsx  eax,WORD PTR [rcx]
   27bf5:	lea    r14d,[rsi+0x8]
   27bf9:	lea    r10d,[rax+r10*4]
   27bfd:	mov    rax,QWORD PTR [r9+r8*8]
   27c01:	lea    edx,[r10+0x4]
   27c05:	lea    edi,[r10+0x8]
   27c09:	mov    DWORD PTR [rsp+0x1c],r10d
   27c0e:	mov    r13d,DWORD PTR [rax+0x18f8]
   27c15:	mov    r12d,DWORD PTR [rax+0x18fc]
   27c1c:	lea    ecx,[r10+0xc]
   27c20:	mov    DWORD PTR [rsp+0x10],edx
   27c24:	mov    rbp,QWORD PTR [rax+0x1930]
   27c2b:	mov    edx,r10d
   27c2e:	mov    DWORD PTR [rsp+0x8],edi
   27c32:	mov    DWORD PTR [rsp+0xc],ecx
   27c36:	mov    r8d,r13d
   27c39:	mov    ecx,r12d
   27c3c:	mov    rdi,rbp
   27c3f:	call   5df60 <UMVPelY_14>
   27c44:	mov    edx,DWORD PTR [rsp+0x10]
   27c48:	mov    esi,DWORD PTR [rsp+0x18]
   27c4c:	mov    r8d,r13d
   27c4f:	movzx  eax,ax
   27c52:	mov    ecx,r12d
   27c55:	mov    rdi,rbp
   27c58:	mov    DWORD PTR [rbx],eax
   27c5a:	call   5df60 <UMVPelY_14>
   27c5f:	mov    edx,DWORD PTR [rsp+0x8]
   27c63:	mov    esi,DWORD PTR [rsp+0x18]
   27c67:	mov    r8d,r13d
   27c6a:	movzx  eax,ax
   27c6d:	mov    ecx,r12d
   27c70:	mov    rdi,rbp
   27c73:	mov    DWORD PTR [rbx+0x4],eax
   27c76:	call   5df60 <UMVPelY_14>
   27c7b:	mov    edx,DWORD PTR [rsp+0xc]
   27c7f:	mov    esi,DWORD PTR [rsp+0x18]
   27c83:	mov    r8d,r13d
   27c86:	movzx  eax,ax
   27c89:	mov    ecx,r12d
   27c8c:	mov    rdi,rbp
   27c8f:	mov    DWORD PTR [rbx+0x8],eax
   27c92:	call   5df60 <UMVPelY_14>
   27c97:	mov    r10d,DWORD PTR [rsp+0x1c]
   27c9c:	mov    r8d,r13d
   27c9f:	mov    ecx,r12d
   27ca2:	movzx  eax,ax
   27ca5:	mov    esi,r15d
   27ca8:	mov    rdi,rbp
   27cab:	mov    DWORD PTR [rbx+0xc],eax
   27cae:	mov    edx,r10d
   27cb1:	mov    DWORD PTR [rsp+0x18],r10d
   27cb6:	call   5df60 <UMVPelY_14>
   27cbb:	mov    edx,DWORD PTR [rsp+0x10]
   27cbf:	mov    r8d,r13d
   27cc2:	mov    ecx,r12d
   27cc5:	movzx  eax,ax
   27cc8:	mov    esi,r15d
   27ccb:	mov    rdi,rbp
   27cce:	mov    DWORD PTR [rbx+0x10],eax
   27cd1:	call   5df60 <UMVPelY_14>
   27cd6:	mov    edx,DWORD PTR [rsp+0x8]
   27cda:	mov    r8d,r13d
   27cdd:	mov    ecx,r12d
   27ce0:	movzx  eax,ax
   27ce3:	mov    esi,r15d
   27ce6:	mov    rdi,rbp
   27ce9:	mov    DWORD PTR [rbx+0x14],eax
   27cec:	call   5df60 <UMVPelY_14>
   27cf1:	mov    edx,DWORD PTR [rsp+0xc]
   27cf5:	mov    r8d,r13d
   27cf8:	mov    ecx,r12d
   27cfb:	movzx  eax,ax
   27cfe:	mov    esi,r15d
   27d01:	mov    rdi,rbp
   27d04:	mov    DWORD PTR [rbx+0x18],eax
   27d07:	call   5df60 <UMVPelY_14>
   27d0c:	mov    r10d,DWORD PTR [rsp+0x18]
   27d11:	mov    r8d,r13d
   27d14:	mov    ecx,r12d
   27d17:	movzx  eax,ax
   27d1a:	mov    esi,r14d
   27d1d:	mov    rdi,rbp
   27d20:	mov    DWORD PTR [rbx+0x1c],eax
   27d23:	mov    edx,r10d
   27d26:	call   5df60 <UMVPelY_14>
   27d2b:	mov    r15d,DWORD PTR [rsp+0x10]
   27d30:	mov    r8d,r13d
   27d33:	mov    ecx,r12d
   27d36:	movzx  eax,ax
   27d39:	mov    esi,r14d
   27d3c:	mov    rdi,rbp
   27d3f:	mov    DWORD PTR [rbx+0x20],eax
   27d42:	mov    edx,r15d
   27d45:	call   5df60 <UMVPelY_14>
   27d4a:	mov    edx,DWORD PTR [rsp+0x8]
   27d4e:	mov    r8d,r13d
   27d51:	mov    ecx,r12d
   27d54:	movzx  eax,ax
   27d57:	mov    esi,r14d
   27d5a:	mov    rdi,rbp
   27d5d:	mov    DWORD PTR [rbx+0x24],eax
   27d60:	call   5df60 <UMVPelY_14>
   27d65:	mov    edx,DWORD PTR [rsp+0xc]
   27d69:	mov    r8d,r13d
   27d6c:	mov    ecx,r12d
   27d6f:	movzx  eax,ax
   27d72:	mov    esi,r14d
   27d75:	mov    rdi,rbp
   27d78:	mov    DWORD PTR [rbx+0x28],eax
   27d7b:	call   5df60 <UMVPelY_14>
   27d80:	mov    r14d,DWORD PTR [rsp+0x14]
   27d85:	mov    r8d,r13d
   27d88:	mov    ecx,r12d
   27d8b:	movzx  eax,ax
   27d8e:	mov    r10d,DWORD PTR [rsp+0x18]
   27d93:	mov    rdi,rbp
   27d96:	mov    DWORD PTR [rbx+0x2c],eax
   27d99:	mov    esi,r14d
   27d9c:	mov    edx,r10d
   27d9f:	call   5df60 <UMVPelY_14>
   27da4:	mov    r8d,r13d
   27da7:	mov    ecx,r12d
   27daa:	mov    edx,r15d
   27dad:	movzx  eax,ax
   27db0:	mov    esi,r14d
   27db3:	mov    rdi,rbp
   27db6:	mov    DWORD PTR [rbx+0x30],eax
   27db9:	call   5df60 <UMVPelY_14>
   27dbe:	mov    edx,DWORD PTR [rsp+0x8]
   27dc2:	mov    r8d,r13d
   27dc5:	mov    ecx,r12d
   27dc8:	movzx  eax,ax
   27dcb:	mov    esi,r14d
   27dce:	mov    rdi,rbp
   27dd1:	mov    DWORD PTR [rbx+0x34],eax
   27dd4:	call   5df60 <UMVPelY_14>
   27dd9:	mov    edx,DWORD PTR [rsp+0xc]
   27ddd:	mov    r8d,r13d
   27de0:	mov    ecx,r12d
   27de3:	movzx  eax,ax
   27de6:	mov    esi,r14d
   27de9:	mov    rdi,rbp
   27dec:	mov    DWORD PTR [rbx+0x38],eax
   27def:	call   5df60 <UMVPelY_14>
   27df4:	movzx  eax,ax
   27df7:	mov    DWORD PTR [rbx+0x3c],eax
   27dfa:	add    rsp,0x28
   27dfe:	pop    rbx
   27dff:	pop    rbp
   27e00:	pop    r12
   27e02:	pop    r13
   27e04:	pop    r14
   27e06:	pop    r15
   27e08:	ret    
   27e09:	nop    DWORD PTR [rax+0x0]

0000000000027e10 <copyblock4x4>:
   27e10:	endbr64 
   27e14:	mov    eax,DWORD PTR [rsi]
   27e16:	mov    DWORD PTR [rdi],eax
   27e18:	mov    eax,DWORD PTR [rsi+0x10]
   27e1b:	mov    DWORD PTR [rdi+0x4],eax
   27e1e:	mov    eax,DWORD PTR [rsi+0x20]
   27e21:	mov    DWORD PTR [rdi+0x8],eax
   27e24:	mov    eax,DWORD PTR [rsi+0x30]
   27e27:	mov    DWORD PTR [rdi+0xc],eax
   27e2a:	mov    eax,DWORD PTR [rsi+0x4]
   27e2d:	mov    DWORD PTR [rdi+0x10],eax
   27e30:	mov    eax,DWORD PTR [rsi+0x14]
   27e33:	mov    DWORD PTR [rdi+0x14],eax
   27e36:	mov    eax,DWORD PTR [rsi+0x24]
   27e39:	mov    DWORD PTR [rdi+0x18],eax
   27e3c:	mov    eax,DWORD PTR [rsi+0x34]
   27e3f:	mov    DWORD PTR [rdi+0x1c],eax
   27e42:	mov    eax,DWORD PTR [rsi+0x8]
   27e45:	mov    DWORD PTR [rdi+0x20],eax
   27e48:	mov    eax,DWORD PTR [rsi+0x18]
   27e4b:	mov    DWORD PTR [rdi+0x24],eax
   27e4e:	mov    eax,DWORD PTR [rsi+0x28]
   27e51:	mov    DWORD PTR [rdi+0x28],eax
   27e54:	mov    eax,DWORD PTR [rsi+0x38]
   27e57:	mov    DWORD PTR [rdi+0x2c],eax
   27e5a:	mov    eax,DWORD PTR [rsi+0xc]
   27e5d:	mov    DWORD PTR [rdi+0x30],eax
   27e60:	mov    eax,DWORD PTR [rsi+0x1c]
   27e63:	mov    DWORD PTR [rdi+0x34],eax
   27e66:	mov    eax,DWORD PTR [rsi+0x2c]
   27e69:	mov    DWORD PTR [rdi+0x38],eax
   27e6c:	mov    eax,DWORD PTR [rsi+0x3c]
   27e6f:	mov    DWORD PTR [rdi+0x3c],eax
   27e72:	ret    
   27e73:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   27e7e:	xchg   ax,ax

0000000000027e80 <LumaPrediction4x4>:
   27e80:	endbr64 
   27e84:	push   r15
   27e86:	push   r14
   27e88:	movsx  r14,r9w
   27e8c:	push   r13
   27e8e:	push   r12
   27e90:	mov    r12d,edx
   27e93:	push   rbp
   27e94:	movsxd rbp,esi
   27e97:	push   rbx
   27e98:	movsxd rbx,edi
   27e9b:	mov    eax,ebx
   27e9d:	sar    eax,0x2
   27ea0:	sub    rsp,0x38
   27ea4:	mov    rdi,QWORD PTR [rip+0x60705]        # 885b0 <img>
   27eab:	mov    r10,QWORD PTR [rip+0x78f4e]        # a0e00 <active_pps>
   27eb2:	mov    DWORD PTR [rsp+0x10],eax
   27eb6:	mov    r15d,DWORD PTR [rsp+0x70]
   27ebb:	mov    eax,ebp
   27ebd:	movsxd r11,DWORD PTR [rdi+0xc]
   27ec1:	mov    esi,DWORD PTR [rdi+0xa8]
   27ec7:	sar    eax,0x2
   27eca:	mov    DWORD PTR [rsp+0x18],r8d
   27ecf:	mov    edx,DWORD PTR [rdi+0xac]
   27ed5:	mov    r13d,DWORD PTR [r10+0xc0]
   27edc:	mov    r8d,r9d
   27edf:	mov    DWORD PTR [rsp+0x14],eax
   27ee3:	mov    r9,r11
   27ee6:	mov    WORD PTR [rsp+0xe],r15w
   27eec:	add    esi,ebx
   27eee:	imul   r11,r11,0x278
   27ef5:	add    edx,ebp
   27ef7:	add    r11,QWORD PTR [rdi+0x3758]
   27efe:	test   r13d,r13d
   27f01:	je     27f17 <LumaPrediction4x4+0x97>
   27f03:	mov    eax,DWORD PTR [rdi+0x18]
   27f06:	test   eax,eax
   27f08:	je     281c0 <LumaPrediction4x4+0x340>
   27f0e:	cmp    eax,0x3
   27f11:	je     281c0 <LumaPrediction4x4+0x340>
   27f17:	mov    r10d,DWORD PTR [r10+0xc4]
   27f1e:	xor    eax,eax
   27f20:	test   r10d,r10d
   27f23:	jne    280a0 <LumaPrediction4x4+0x220>
   27f29:	mov    r13d,DWORD PTR [rdi+0x11ad0]
   27f30:	mov    r10,QWORD PTR [rdi+0x118f8]
   27f37:	test   r13d,r13d
   27f3a:	je     27f4c <LumaPrediction4x4+0xcc>
   27f3c:	mov    r13d,DWORD PTR [r11+0x214]
   27f43:	test   r13d,r13d
   27f46:	jne    281a0 <LumaPrediction4x4+0x320>
   27f4c:	mov    r9d,DWORD PTR [r11+0x244]
   27f53:	test   r9d,r9d
   27f56:	je     27f65 <LumaPrediction4x4+0xe5>
   27f58:	mov    r11d,r15d
   27f5b:	or     r11w,r8w
   27f5f:	je     280b0 <LumaPrediction4x4+0x230>
   27f65:	test   r12d,0xfffffffd
   27f6c:	je     280ce <LumaPrediction4x4+0x24e>
   27f72:	lea    ecx,[r12-0x1]
   27f77:	cmp    ecx,0x1
   27f7a:	jbe    28140 <LumaPrediction4x4+0x2c0>
   27f80:	mov    rdx,QWORD PTR [rip+0x60629]        # 885b0 <img>
   27f87:	test   eax,eax
   27f89:	je     28040 <LumaPrediction4x4+0x1c0>
   27f8f:	mov    r9d,DWORD PTR [rip+0x8c21e]        # b41b4 <wp_luma_round>
   27f96:	mov    ecx,DWORD PTR [rip+0x8c1b4]        # b4150 <luma_log_weight_denom>
   27f9c:	mov    rax,QWORD PTR [rip+0x8c18d]        # b4130 <wp_offset>
   27fa3:	mov    r8d,DWORD PTR [rdx+0x11bec]
   27faa:	cmp    r12d,0x2
   27fae:	je     28230 <LumaPrediction4x4+0x3b0>
   27fb4:	mov    rdi,QWORD PTR [rip+0x78e4d]        # a0e08 <wp_weight>
   27fbb:	test   r12d,r12d
   27fbe:	jne    28300 <LumaPrediction4x4+0x480>
   27fc4:	mov    rax,QWORD PTR [rax]
   27fc7:	mov    rsi,QWORD PTR [rdi]
   27fca:	shl    rbx,0x4
   27fce:	lea    rdi,[rip+0x60deb]        # 88dc0 <fw_pred.5338>
   27fd5:	add    rbp,rbx
   27fd8:	mov    rax,QWORD PTR [rax+r14*8]
   27fdc:	mov    rsi,QWORD PTR [rsi+r14*8]
   27fe0:	lea    rbx,[rdx+rbp*2]
   27fe4:	xor    ebp,ebp
   27fe6:	mov    r11d,DWORD PTR [rax]
   27fe9:	mov    r10d,DWORD PTR [rsi]
   27fec:	lea    rsi,[rdi+0x40]
   27ff0:	xor    edx,edx
   27ff2:	mov    eax,DWORD PTR [rdi+rdx*1]
   27ff5:	mov    r12d,r8d
   27ff8:	imul   eax,r10d
   27ffc:	add    eax,r9d
   27fff:	sar    eax,cl
   28001:	add    eax,r11d
   28004:	cmp    eax,r8d
   28007:	jg     28011 <LumaPrediction4x4+0x191>
   28009:	test   eax,eax
   2800b:	cmovs  eax,ebp
   2800e:	mov    r12d,eax
   28011:	mov    WORD PTR [rbx+rdx*8+0x3138],r12w
   2801a:	add    rdx,0x4
   2801e:	cmp    rdx,0x10
   28022:	jne    27ff2 <LumaPrediction4x4+0x172>
   28024:	add    rdi,0x10
   28028:	add    rbx,0x2
   2802c:	cmp    rdi,rsi
   2802f:	jne    27ff0 <LumaPrediction4x4+0x170>
   28031:	add    rsp,0x38
   28035:	pop    rbx
   28036:	pop    rbp
   28037:	pop    r12
   28039:	pop    r13
   2803b:	pop    r14
   2803d:	pop    r15
   2803f:	ret    
   28040:	shl    rbx,0x4
   28044:	add    rbp,rbx
   28047:	cmp    r12d,0x2
   2804b:	je     281d0 <LumaPrediction4x4+0x350>
   28051:	test   r12d,r12d
   28054:	jne    28388 <LumaPrediction4x4+0x508>
   2805a:	lea    rcx,[rip+0x60d5f]        # 88dc0 <fw_pred.5338>
   28061:	lea    rdi,[rdx+rbp*2]
   28065:	lea    rsi,[rcx+0x40]
   28069:	xor    eax,eax
   2806b:	mov    edx,DWORD PTR [rcx+rax*1]
   2806e:	mov    WORD PTR [rdi+rax*8+0x3138],dx
   28076:	add    rax,0x4
   2807a:	cmp    rax,0x10
   2807e:	jne    2806b <LumaPrediction4x4+0x1eb>
   28080:	add    rcx,0x10
   28084:	add    rdi,0x2
   28088:	cmp    rcx,rsi
   2808b:	jne    28069 <LumaPrediction4x4+0x1e9>
   2808d:	add    rsp,0x38
   28091:	pop    rbx
   28092:	pop    rbp
   28093:	pop    r12
   28095:	pop    r13
   28097:	pop    r14
   28099:	pop    r15
   2809b:	ret    
   2809c:	nop    DWORD PTR [rax+0x0]
   280a0:	xor    eax,eax
   280a2:	cmp    DWORD PTR [rdi+0x18],0x1
   280a6:	sete   al
   280a9:	jmp    27f29 <LumaPrediction4x4+0xa9>
   280ae:	xchg   ax,ax
   280b0:	cmp    r12d,0x2
   280b4:	jne    27f65 <LumaPrediction4x4+0xe5>
   280ba:	cmp    ecx,0x1
   280bd:	jne    27f65 <LumaPrediction4x4+0xe5>
   280c3:	cmp    DWORD PTR [rsp+0x18],0x1
   280c8:	je     283d0 <LumaPrediction4x4+0x550>
   280ce:	movsxd r11,DWORD PTR [rsp+0x10]
   280d3:	movsxd r9,DWORD PTR [rsp+0x14]
   280d8:	movsxd rcx,ecx
   280db:	movsxd rdi,r13d
   280de:	movsx  r8d,r8w
   280e2:	mov    DWORD PTR [rsp+0x2c],eax
   280e6:	mov    r11,QWORD PTR [r10+r11*8]
   280ea:	mov    QWORD PTR [rsp+0x20],r10
   280ef:	mov    DWORD PTR [rsp+0x28],edx
   280f3:	mov    r11,QWORD PTR [r11+r9*8]
   280f7:	movsx  r9,r14w
   280fb:	mov    DWORD PTR [rsp+0x1c],esi
   280ff:	mov    r11,QWORD PTR [r11]
   28102:	mov    r9,QWORD PTR [r11+r9*8]
   28106:	mov    rcx,QWORD PTR [r9+rcx*8]
   2810a:	lea    r9,[rip+0x8f30f]        # b7420 <listX>
   28111:	mov    r9,QWORD PTR [r9+rdi*8]
   28115:	lea    rdi,[rip+0x60ca4]        # 88dc0 <fw_pred.5338>
   2811c:	call   27bc0 <OneComponentLumaPrediction4x4>
   28121:	lea    ecx,[r12-0x1]
   28126:	mov    eax,DWORD PTR [rsp+0x2c]
   2812a:	mov    r10,QWORD PTR [rsp+0x20]
   2812f:	mov    edx,DWORD PTR [rsp+0x28]
   28133:	mov    esi,DWORD PTR [rsp+0x1c]
   28137:	cmp    ecx,0x1
   2813a:	ja     27f80 <LumaPrediction4x4+0x100>
   28140:	movsxd rdi,DWORD PTR [rsp+0x10]
   28145:	movsxd rcx,DWORD PTR [rsp+0x14]
   2814a:	add    r13d,0x1
   2814e:	mov    DWORD PTR [rsp+0x1c],eax
   28152:	movsxd r8,DWORD PTR [rsp+0x18]
   28157:	movsxd r13,r13d
   2815a:	mov    rdi,QWORD PTR [r10+rdi*8]
   2815e:	mov    rdi,QWORD PTR [rdi+rcx*8]
   28162:	movsx  rcx,WORD PTR [rsp+0xe]
   28168:	mov    rdi,QWORD PTR [rdi+0x8]
   2816c:	mov    rcx,QWORD PTR [rdi+rcx*8]
   28170:	lea    rdi,[rip+0x8f2a9]        # b7420 <listX>
   28177:	mov    r9,QWORD PTR [rdi+r13*8]
   2817b:	lea    rdi,[rip+0x60bfe]        # 88d80 <bw_pred.5339>
   28182:	mov    rcx,QWORD PTR [rcx+r8*8]
   28186:	movsx  r8d,r15w
   2818a:	call   27bc0 <OneComponentLumaPrediction4x4>
   2818f:	mov    eax,DWORD PTR [rsp+0x1c]
   28193:	jmp    27f80 <LumaPrediction4x4+0x100>
   28198:	nop    DWORD PTR [rax+rax*1+0x0]
   281a0:	and    r9d,0x1
   281a4:	cmp    r9d,0x1
   281a8:	sbb    r13d,r13d
   281ab:	and    r13d,0xfffffffe
   281af:	add    r13d,0x4
   281b3:	jmp    27f4c <LumaPrediction4x4+0xcc>
   281b8:	nop    DWORD PTR [rax+rax*1+0x0]
   281c0:	mov    eax,0x1
   281c5:	jmp    27f29 <LumaPrediction4x4+0xa9>
   281ca:	nop    WORD PTR [rax+rax*1+0x0]
   281d0:	lea    rdi,[rip+0x60be9]        # 88dc0 <fw_pred.5338>
   281d7:	lea    r9,[rdx+rbp*2]
   281db:	lea    r8,[rip+0x60b9e]        # 88d80 <bw_pred.5339>
   281e2:	lea    rsi,[rdi+0x40]
   281e6:	xor    edx,edx
   281e8:	mov    eax,DWORD PTR [r8+rdx*1]
   281ec:	add    eax,DWORD PTR [rdi+rdx*1]
   281ef:	add    eax,0x1
   281f2:	mov    ecx,eax
   281f4:	shr    ecx,0x1f
   281f7:	add    eax,ecx
   281f9:	sar    eax,1
   281fb:	mov    WORD PTR [r9+rdx*8+0x3138],ax
   28204:	add    rdx,0x4
   28208:	cmp    rdx,0x10
   2820c:	jne    281e8 <LumaPrediction4x4+0x368>
   2820e:	add    rdi,0x10
   28212:	add    r8,0x10
   28216:	add    r9,0x2
   2821a:	cmp    rdi,rsi
   2821d:	jne    281e6 <LumaPrediction4x4+0x366>
   2821f:	add    rsp,0x38
   28223:	pop    rbx
   28224:	pop    rbp
   28225:	pop    r12
   28227:	pop    r13
   28229:	pop    r14
   2822b:	pop    r15
   2822d:	ret    
   2822e:	xchg   ax,ax
   28230:	movsx  rsi,WORD PTR [rsp+0xe]
   28236:	shl    rbx,0x4
   2823a:	add    r9d,r9d
   2823d:	add    ecx,0x1
   28240:	mov    rdi,QWORD PTR [rip+0x8bf11]        # b4158 <wbp_weight>
   28247:	add    rbp,rbx
   2824a:	mov    r10,QWORD PTR [rdi]
   2824d:	mov    rdi,QWORD PTR [rdi+0x8]
   28251:	mov    rdi,QWORD PTR [rdi+r14*8]
   28255:	mov    r10,QWORD PTR [r10+r14*8]
   28259:	mov    rdi,QWORD PTR [rdi+rsi*8]
   2825d:	mov    r10,QWORD PTR [r10+rsi*8]
   28261:	mov    r12d,DWORD PTR [rdi]
   28264:	mov    rdi,QWORD PTR [rax]
   28267:	mov    rax,QWORD PTR [rax+0x8]
   2826b:	mov    r13d,DWORD PTR [r10]
   2826e:	lea    r10,[rdx+rbp*2]
   28272:	xor    ebp,ebp
   28274:	mov    rdi,QWORD PTR [rdi+r14*8]
   28278:	mov    rax,QWORD PTR [rax+rsi*8]
   2827c:	lea    rsi,[rip+0x60afd]        # 88d80 <bw_pred.5339>
   28283:	lea    rbx,[rsi+0x40]
   28287:	mov    r11d,DWORD PTR [rax]
   2828a:	add    r11d,DWORD PTR [rdi]
   2828d:	lea    rdi,[rip+0x60b2c]        # 88dc0 <fw_pred.5338>
   28294:	add    r11d,0x1
   28298:	sar    r11d,1
   2829b:	xor    edx,edx
   2829d:	mov    eax,DWORD PTR [rdi+rdx*1]
   282a0:	mov    r14d,DWORD PTR [rsi+rdx*1]
   282a4:	imul   eax,r13d
   282a8:	imul   r14d,r12d
   282ac:	add    eax,r14d
   282af:	mov    r14d,r8d
   282b2:	add    eax,r9d
   282b5:	sar    eax,cl
   282b7:	add    eax,r11d
   282ba:	cmp    eax,r8d
   282bd:	jg     282c7 <LumaPrediction4x4+0x447>
   282bf:	test   eax,eax
   282c1:	cmovs  eax,ebp
   282c4:	mov    r14d,eax
   282c7:	mov    WORD PTR [r10+rdx*8+0x3138],r14w
   282d0:	add    rdx,0x4
   282d4:	cmp    rdx,0x10
   282d8:	jne    2829d <LumaPrediction4x4+0x41d>
   282da:	add    rsi,0x10
   282de:	add    rdi,0x10
   282e2:	add    r10,0x2
   282e6:	cmp    rsi,rbx
   282e9:	jne    2829b <LumaPrediction4x4+0x41b>
   282eb:	add    rsp,0x38
   282ef:	pop    rbx
   282f0:	pop    rbp
   282f1:	pop    r12
   282f3:	pop    r13
   282f5:	pop    r14
   282f7:	pop    r15
   282f9:	ret    
   282fa:	nop    WORD PTR [rax+rax*1+0x0]
   28300:	movsx  rsi,WORD PTR [rsp+0xe]
   28306:	mov    rax,QWORD PTR [rax+0x8]
   2830a:	shl    rbx,0x4
   2830e:	mov    rdi,QWORD PTR [rdi+0x8]
   28312:	add    rbp,rbx
   28315:	mov    rax,QWORD PTR [rax+rsi*8]
   28319:	mov    rdi,QWORD PTR [rdi+rsi*8]
   2831d:	lea    rsi,[rip+0x60a5c]        # 88d80 <bw_pred.5339>
   28324:	mov    r10d,DWORD PTR [rax]
   28327:	lea    rbx,[rsi+0x40]
   2832b:	mov    r11d,DWORD PTR [rdi]
   2832e:	lea    rdi,[rdx+rbp*2]
   28332:	xor    ebp,ebp
   28334:	xor    edx,edx
   28336:	mov    eax,DWORD PTR [rsi+rdx*1]
   28339:	mov    r12d,r8d
   2833c:	imul   eax,r11d
   28340:	add    eax,r9d
   28343:	sar    eax,cl
   28345:	add    eax,r10d
   28348:	cmp    eax,r8d
   2834b:	jg     28355 <LumaPrediction4x4+0x4d5>
   2834d:	test   eax,eax
   2834f:	cmovs  eax,ebp
   28352:	mov    r12d,eax
   28355:	mov    WORD PTR [rdi+rdx*8+0x3138],r12w
   2835e:	add    rdx,0x4
   28362:	cmp    rdx,0x10
   28366:	jne    28336 <LumaPrediction4x4+0x4b6>
   28368:	add    rsi,0x10
   2836c:	add    rdi,0x2
   28370:	cmp    rsi,rbx
   28373:	jne    28334 <LumaPrediction4x4+0x4b4>
   28375:	add    rsp,0x38
   28379:	pop    rbx
   2837a:	pop    rbp
   2837b:	pop    r12
   2837d:	pop    r13
   2837f:	pop    r14
   28381:	pop    r15
   28383:	ret    
   28384:	nop    DWORD PTR [rax+0x0]
   28388:	lea    rcx,[rip+0x609f1]        # 88d80 <bw_pred.5339>
   2838f:	lea    rsi,[rdx+rbp*2]
   28393:	lea    rbx,[rcx+0x40]
   28397:	xor    eax,eax
   28399:	mov    edx,DWORD PTR [rcx+rax*1]
   2839c:	mov    WORD PTR [rsi+rax*8+0x3138],dx
   283a4:	add    rax,0x4
   283a8:	cmp    rax,0x10
   283ac:	jne    28399 <LumaPrediction4x4+0x519>
   283ae:	add    rcx,0x10
   283b2:	add    rsi,0x2
   283b6:	cmp    rcx,rbx
   283b9:	jne    28397 <LumaPrediction4x4+0x517>
   283bb:	add    rsp,0x38
   283bf:	pop    rbx
   283c0:	pop    rbp
   283c1:	pop    r12
   283c3:	pop    r13
   283c5:	pop    r14
   283c7:	pop    r15
   283c9:	ret    
   283ca:	nop    WORD PTR [rax+rax*1+0x0]
   283d0:	cmp    r9d,0x1
   283d4:	je     283e2 <LumaPrediction4x4+0x562>
   283d6:	mov    r10,QWORD PTR [rdi+0x11908]
   283dd:	jmp    280ce <LumaPrediction4x4+0x24e>
   283e2:	mov    r10,QWORD PTR [rdi+0x11900]
   283e9:	jmp    280ce <LumaPrediction4x4+0x24e>
   283ee:	xchg   ax,ax

00000000000283f0 <LumaPrediction4x4Bi>:
   283f0:	endbr64 
   283f4:	push   r15
   283f6:	push   r14
   283f8:	push   r13
   283fa:	push   r12
   283fc:	mov    r12d,edx
   283ff:	push   rbp
   28400:	movsxd rbp,esi
   28403:	push   rbx
   28404:	movsxd rbx,edi
   28407:	mov    r15d,ebx
   2840a:	sar    r15d,0x2
   2840e:	sub    rsp,0x28
   28412:	mov    rdi,QWORD PTR [rip+0x60197]        # 885b0 <img>
   28419:	mov    DWORD PTR [rsp+0xc],r8d
   2841e:	mov    r8d,r9d
   28421:	mov    eax,DWORD PTR [rsp+0x60]
   28425:	mov    WORD PTR [rsp],r9w
   2842a:	mov    r9,QWORD PTR [rip+0x789cf]        # a0e00 <active_pps>
   28431:	mov    DWORD PTR [rsp+0x4],r15d
   28436:	mov    esi,DWORD PTR [rdi+0xa8]
   2843c:	mov    r15d,ebp
   2843f:	mov    edx,DWORD PTR [rdi+0xac]
   28445:	mov    r11d,DWORD PTR [r9+0xc0]
   2844c:	sar    r15d,0x2
   28450:	mov    WORD PTR [rsp+0x2],ax
   28455:	mov    DWORD PTR [rsp+0x8],r15d
   2845a:	add    esi,ebx
   2845c:	add    edx,ebp
   2845e:	test   r11d,r11d
   28461:	je     2847a <LumaPrediction4x4Bi+0x8a>
   28463:	mov    r10d,DWORD PTR [rdi+0x18]
   28467:	test   r10d,r10d
   2846a:	je     28650 <LumaPrediction4x4Bi+0x260>
   28470:	cmp    r10d,0x3
   28474:	je     28650 <LumaPrediction4x4Bi+0x260>
   2847a:	mov    r10d,DWORD PTR [r9+0xc4]
   28481:	xor    r15d,r15d
   28484:	test   r10d,r10d
   28487:	jne    28620 <LumaPrediction4x4Bi+0x230>
   2848d:	mov    r13d,DWORD PTR [rdi+0x11ad0]
   28494:	test   r13d,r13d
   28497:	je     284be <LumaPrediction4x4Bi+0xce>
   28499:	movsxd r10,DWORD PTR [rdi+0xc]
   2849d:	mov    r9,r10
   284a0:	imul   r10,r10,0x278
   284a7:	add    r10,QWORD PTR [rdi+0x3758]
   284ae:	mov    r13d,DWORD PTR [r10+0x214]
   284b5:	test   r13d,r13d
   284b8:	jne    28630 <LumaPrediction4x4Bi+0x240>
   284be:	mov    r9d,DWORD PTR [rsp+0x68]
   284c3:	mov    r10d,r12d
   284c6:	mov    r14,QWORD PTR [rdi+0x11908]
   284cd:	test   r9d,r9d
   284d0:	cmovne r14,QWORD PTR [rdi+0x11900]
   284d8:	and    r10d,0xfffffffd
   284dc:	je     28660 <LumaPrediction4x4Bi+0x270>
   284e2:	lea    ecx,[r12-0x1]
   284e7:	cmp    ecx,0x1
   284ea:	jbe    286d3 <LumaPrediction4x4Bi+0x2e3>
   284f0:	mov    rax,QWORD PTR [rip+0x600b9]        # 885b0 <img>
   284f7:	test   r15d,r15d
   284fa:	je     285c0 <LumaPrediction4x4Bi+0x1d0>
   28500:	mov    r9d,DWORD PTR [rip+0x8bcad]        # b41b4 <wp_luma_round>
   28507:	mov    ecx,DWORD PTR [rip+0x8bc43]        # b4150 <luma_log_weight_denom>
   2850d:	mov    rdx,QWORD PTR [rip+0x8bc1c]        # b4130 <wp_offset>
   28514:	mov    r8d,DWORD PTR [rax+0x11bec]
   2851b:	cmp    r12d,0x2
   2851f:	je     28790 <LumaPrediction4x4Bi+0x3a0>
   28525:	mov    rdi,QWORD PTR [rip+0x788dc]        # a0e08 <wp_weight>
   2852c:	test   r10d,r10d
   2852f:	jne    28860 <LumaPrediction4x4Bi+0x470>
   28535:	movsx  rsi,WORD PTR [rsp]
   2853a:	mov    rdi,QWORD PTR [rdi]
   2853d:	shl    rbx,0x4
   28541:	mov    rdx,QWORD PTR [rdx]
   28544:	add    rbp,rbx
   28547:	mov    rdi,QWORD PTR [rdi+rsi*8]
   2854b:	lea    rbx,[rax+rbp*2]
   2854f:	xor    ebp,ebp
   28551:	mov    rdx,QWORD PTR [rdx+rsi*8]
   28555:	mov    r10d,DWORD PTR [rdi]
   28558:	lea    rdi,[rip+0x607e1]        # 88d40 <fw_pred.5400>
   2855f:	mov    r11d,DWORD PTR [rdx]
   28562:	lea    rsi,[rdi+0x40]
   28566:	xor    edx,edx
   28568:	mov    eax,DWORD PTR [rdi+rdx*1]
   2856b:	mov    r12d,r8d
   2856e:	imul   eax,r10d
   28572:	add    eax,r9d
   28575:	sar    eax,cl
   28577:	add    eax,r11d
   2857a:	cmp    eax,r8d
   2857d:	jg     28587 <LumaPrediction4x4Bi+0x197>
   2857f:	test   eax,eax
   28581:	cmovs  eax,ebp
   28584:	mov    r12d,eax
   28587:	mov    WORD PTR [rbx+rdx*8+0x3138],r12w
   28590:	add    rdx,0x4
   28594:	cmp    rdx,0x10
   28598:	jne    28568 <LumaPrediction4x4Bi+0x178>
   2859a:	add    rdi,0x10
   2859e:	add    rbx,0x2
   285a2:	cmp    rdi,rsi
   285a5:	jne    28566 <LumaPrediction4x4Bi+0x176>
   285a7:	add    rsp,0x28
   285ab:	pop    rbx
   285ac:	pop    rbp
   285ad:	pop    r12
   285af:	pop    r13
   285b1:	pop    r14
   285b3:	pop    r15
   285b5:	ret    
   285b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   285c0:	shl    rbx,0x4
   285c4:	add    rbp,rbx
   285c7:	cmp    r12d,0x2
   285cb:	je     28730 <LumaPrediction4x4Bi+0x340>
   285d1:	test   r10d,r10d
   285d4:	jne    288e8 <LumaPrediction4x4Bi+0x4f8>
   285da:	lea    rcx,[rip+0x6075f]        # 88d40 <fw_pred.5400>
   285e1:	lea    rdi,[rax+rbp*2]
   285e5:	lea    rsi,[rcx+0x40]
   285e9:	xor    eax,eax
   285eb:	mov    edx,DWORD PTR [rcx+rax*1]
   285ee:	mov    WORD PTR [rdi+rax*8+0x3138],dx
   285f6:	add    rax,0x4
   285fa:	cmp    rax,0x10
   285fe:	jne    285eb <LumaPrediction4x4Bi+0x1fb>
   28600:	add    rcx,0x10
   28604:	add    rdi,0x2
   28608:	cmp    rcx,rsi
   2860b:	jne    285e9 <LumaPrediction4x4Bi+0x1f9>
   2860d:	add    rsp,0x28
   28611:	pop    rbx
   28612:	pop    rbp
   28613:	pop    r12
   28615:	pop    r13
   28617:	pop    r14
   28619:	pop    r15
   2861b:	ret    
   2861c:	nop    DWORD PTR [rax+0x0]
   28620:	xor    r15d,r15d
   28623:	cmp    DWORD PTR [rdi+0x18],0x1
   28627:	sete   r15b
   2862b:	jmp    2848d <LumaPrediction4x4Bi+0x9d>
   28630:	and    r9d,0x1
   28634:	cmp    r9d,0x1
   28638:	sbb    r13d,r13d
   2863b:	and    r13d,0xfffffffe
   2863f:	add    r13d,0x4
   28643:	jmp    284be <LumaPrediction4x4Bi+0xce>
   28648:	nop    DWORD PTR [rax+rax*1+0x0]
   28650:	mov    r15d,0x1
   28656:	jmp    2848d <LumaPrediction4x4Bi+0x9d>
   2865b:	nop    DWORD PTR [rax+rax*1+0x0]
   28660:	movsxd r11,DWORD PTR [rsp+0x4]
   28665:	movsxd r9,DWORD PTR [rsp+0x8]
   2866a:	movsxd rcx,ecx
   2866d:	movsxd rdi,r13d
   28670:	movsx  r8d,r8w
   28674:	mov    DWORD PTR [rsp+0x1c],eax
   28678:	mov    r11,QWORD PTR [r14+r11*8]
   2867c:	mov    DWORD PTR [rsp+0x18],r10d
   28681:	mov    DWORD PTR [rsp+0x14],edx
   28685:	mov    r11,QWORD PTR [r11+r9*8]
   28689:	movsx  r9,WORD PTR [rsp]
   2868e:	mov    DWORD PTR [rsp+0x10],esi
   28692:	mov    r11,QWORD PTR [r11]
   28695:	mov    r9,QWORD PTR [r11+r9*8]
   28699:	mov    rcx,QWORD PTR [r9+rcx*8]
   2869d:	lea    r9,[rip+0x8ed7c]        # b7420 <listX>
   286a4:	mov    r9,QWORD PTR [r9+rdi*8]
   286a8:	lea    rdi,[rip+0x60691]        # 88d40 <fw_pred.5400>
   286af:	call   27bc0 <OneComponentLumaPrediction4x4>
   286b4:	lea    ecx,[r12-0x1]
   286b9:	mov    eax,DWORD PTR [rsp+0x1c]
   286bd:	mov    r10d,DWORD PTR [rsp+0x18]
   286c2:	mov    edx,DWORD PTR [rsp+0x14]
   286c6:	mov    esi,DWORD PTR [rsp+0x10]
   286ca:	cmp    ecx,0x1
   286cd:	ja     284f0 <LumaPrediction4x4Bi+0x100>
   286d3:	movsxd rdi,DWORD PTR [rsp+0x4]
   286d8:	movsxd rcx,DWORD PTR [rsp+0x8]
   286dd:	add    r13d,0x1
   286e1:	mov    DWORD PTR [rsp+0x10],r10d
   286e6:	movsxd r8,DWORD PTR [rsp+0xc]
   286eb:	movsxd r13,r13d
   286ee:	mov    rdi,QWORD PTR [r14+rdi*8]
   286f2:	mov    rdi,QWORD PTR [rdi+rcx*8]
   286f6:	movsx  rcx,WORD PTR [rsp+0x2]
   286fc:	mov    rdi,QWORD PTR [rdi+0x8]
   28700:	mov    rcx,QWORD PTR [rdi+rcx*8]
   28704:	lea    rdi,[rip+0x8ed15]        # b7420 <listX>
   2870b:	mov    r9,QWORD PTR [rdi+r13*8]
   2870f:	lea    rdi,[rip+0x605ea]        # 88d00 <bw_pred.5401>
   28716:	mov    rcx,QWORD PTR [rcx+r8*8]
   2871a:	movsx  r8d,ax
   2871e:	call   27bc0 <OneComponentLumaPrediction4x4>
   28723:	mov    r10d,DWORD PTR [rsp+0x10]
   28728:	jmp    284f0 <LumaPrediction4x4Bi+0x100>
   2872d:	nop    DWORD PTR [rax]
   28730:	lea    rdi,[rip+0x60609]        # 88d40 <fw_pred.5400>
   28737:	lea    r9,[rax+rbp*2]
   2873b:	lea    r8,[rip+0x605be]        # 88d00 <bw_pred.5401>
   28742:	lea    rsi,[rdi+0x40]
   28746:	xor    edx,edx
   28748:	mov    eax,DWORD PTR [r8+rdx*1]
   2874c:	add    eax,DWORD PTR [rdi+rdx*1]
   2874f:	add    eax,0x1
   28752:	mov    ecx,eax
   28754:	shr    ecx,0x1f
   28757:	add    eax,ecx
   28759:	sar    eax,1
   2875b:	mov    WORD PTR [r9+rdx*8+0x3138],ax
   28764:	add    rdx,0x4
   28768:	cmp    rdx,0x10
   2876c:	jne    28748 <LumaPrediction4x4Bi+0x358>
   2876e:	add    rdi,0x10
   28772:	add    r8,0x10
   28776:	add    r9,0x2
   2877a:	cmp    rdi,rsi
   2877d:	jne    28746 <LumaPrediction4x4Bi+0x356>
   2877f:	add    rsp,0x28
   28783:	pop    rbx
   28784:	pop    rbp
   28785:	pop    r12
   28787:	pop    r13
   28789:	pop    r14
   2878b:	pop    r15
   2878d:	ret    
   2878e:	xchg   ax,ax
   28790:	movsx  rdi,WORD PTR [rsp]
   28795:	shl    rbx,0x4
   28799:	add    r9d,r9d
   2879c:	add    ecx,0x1
   2879f:	mov    r10,QWORD PTR [rip+0x8b9b2]        # b4158 <wbp_weight>
   287a6:	movsx  rsi,WORD PTR [rsp+0x2]
   287ac:	add    rbp,rbx
   287af:	mov    r11,QWORD PTR [r10]
   287b2:	mov    r10,QWORD PTR [r10+0x8]
   287b6:	mov    r10,QWORD PTR [r10+rdi*8]
   287ba:	mov    r11,QWORD PTR [r11+rdi*8]
   287be:	mov    r10,QWORD PTR [r10+rsi*8]
   287c2:	mov    r11,QWORD PTR [r11+rsi*8]
   287c6:	mov    r12d,DWORD PTR [r10]
   287c9:	mov    r10,QWORD PTR [rdx]
   287cc:	mov    rdx,QWORD PTR [rdx+0x8]
   287d0:	mov    r13d,DWORD PTR [r11]
   287d3:	mov    rdi,QWORD PTR [r10+rdi*8]
   287d7:	lea    r10,[rax+rbp*2]
   287db:	xor    ebp,ebp
   287dd:	mov    rdx,QWORD PTR [rdx+rsi*8]
   287e1:	lea    rsi,[rip+0x60518]        # 88d00 <bw_pred.5401>
   287e8:	lea    rbx,[rsi+0x40]
   287ec:	mov    r11d,DWORD PTR [rdx]
   287ef:	add    r11d,DWORD PTR [rdi]
   287f2:	lea    rdi,[rip+0x60547]        # 88d40 <fw_pred.5400>
   287f9:	add    r11d,0x1
   287fd:	sar    r11d,1
   28800:	xor    edx,edx
   28802:	mov    eax,DWORD PTR [rdi+rdx*1]
   28805:	mov    r14d,DWORD PTR [rsi+rdx*1]
   28809:	imul   eax,r13d
   2880d:	imul   r14d,r12d
   28811:	add    eax,r14d
   28814:	mov    r14d,r8d
   28817:	add    eax,r9d
   2881a:	sar    eax,cl
   2881c:	add    eax,r11d
   2881f:	cmp    eax,r8d
   28822:	jg     2882c <LumaPrediction4x4Bi+0x43c>
   28824:	test   eax,eax
   28826:	cmovs  eax,ebp
   28829:	mov    r14d,eax
   2882c:	mov    WORD PTR [r10+rdx*8+0x3138],r14w
   28835:	add    rdx,0x4
   28839:	cmp    rdx,0x10
   2883d:	jne    28802 <LumaPrediction4x4Bi+0x412>
   2883f:	add    rsi,0x10
   28843:	add    rdi,0x10
   28847:	add    r10,0x2
   2884b:	cmp    rsi,rbx
   2884e:	jne    28800 <LumaPrediction4x4Bi+0x410>
   28850:	add    rsp,0x28
   28854:	pop    rbx
   28855:	pop    rbp
   28856:	pop    r12
   28858:	pop    r13
   2885a:	pop    r14
   2885c:	pop    r15
   2885e:	ret    
   2885f:	nop
   28860:	movsx  rsi,WORD PTR [rsp+0x2]
   28866:	mov    rdx,QWORD PTR [rdx+0x8]
   2886a:	shl    rbx,0x4
   2886e:	mov    rdi,QWORD PTR [rdi+0x8]
   28872:	add    rbp,rbx
   28875:	mov    rdx,QWORD PTR [rdx+rsi*8]
   28879:	mov    rdi,QWORD PTR [rdi+rsi*8]
   2887d:	lea    rsi,[rip+0x6047c]        # 88d00 <bw_pred.5401>
   28884:	mov    r11d,DWORD PTR [rdx]
   28887:	lea    rbx,[rsi+0x40]
   2888b:	mov    r10d,DWORD PTR [rdi]
   2888e:	lea    rdi,[rax+rbp*2]
   28892:	xor    ebp,ebp
   28894:	xor    edx,edx
   28896:	mov    eax,DWORD PTR [rsi+rdx*1]
   28899:	mov    r12d,r8d
   2889c:	imul   eax,r10d
   288a0:	add    eax,r9d
   288a3:	sar    eax,cl
   288a5:	add    eax,r11d
   288a8:	cmp    eax,r8d
   288ab:	jg     288b5 <LumaPrediction4x4Bi+0x4c5>
   288ad:	test   eax,eax
   288af:	cmovs  eax,ebp
   288b2:	mov    r12d,eax
   288b5:	mov    WORD PTR [rdi+rdx*8+0x3138],r12w
   288be:	add    rdx,0x4
   288c2:	cmp    rdx,0x10
   288c6:	jne    28896 <LumaPrediction4x4Bi+0x4a6>
   288c8:	add    rsi,0x10
   288cc:	add    rdi,0x2
   288d0:	cmp    rsi,rbx
   288d3:	jne    28894 <LumaPrediction4x4Bi+0x4a4>
   288d5:	add    rsp,0x28
   288d9:	pop    rbx
   288da:	pop    rbp
   288db:	pop    r12
   288dd:	pop    r13
   288df:	pop    r14
   288e1:	pop    r15
   288e3:	ret    
   288e4:	nop    DWORD PTR [rax+0x0]
   288e8:	lea    rcx,[rip+0x60411]        # 88d00 <bw_pred.5401>
   288ef:	lea    rsi,[rax+rbp*2]
   288f3:	lea    rbx,[rcx+0x40]
   288f7:	xor    eax,eax
   288f9:	mov    edx,DWORD PTR [rcx+rax*1]
   288fc:	mov    WORD PTR [rsi+rax*8+0x3138],dx
   28904:	add    rax,0x4
   28908:	cmp    rax,0x10
   2890c:	jne    288f9 <LumaPrediction4x4Bi+0x509>
   2890e:	add    rcx,0x10
   28912:	add    rsi,0x2
   28916:	cmp    rcx,rbx
   28919:	jne    288f7 <LumaPrediction4x4Bi+0x507>
   2891b:	add    rsp,0x28
   2891f:	pop    rbx
   28920:	pop    rbp
   28921:	pop    r12
   28923:	pop    r13
   28925:	pop    r14
   28927:	pop    r15
   28929:	ret    
   2892a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000028930 <SetModesAndRefframe>:
   28930:	endbr64 
   28934:	mov    r10,rsi
   28937:	mov    rsi,QWORD PTR [rip+0x5fc72]        # 885b0 <img>
   2893e:	mov    eax,edi
   28940:	push   r12
   28942:	shr    eax,0x1f
   28945:	push   rbp
   28946:	mov    r12d,edi
   28949:	push   rbx
   2894a:	movsxd r11,DWORD PTR [rsi+0xc]
   2894e:	add    eax,edi
   28950:	shr    r12d,0x1f
   28954:	and    eax,0xfffffffe
   28957:	mov    rbx,QWORD PTR [rsi+0x3758]
   2895e:	imul   r11,r11,0x278
   28965:	mov    ebp,eax
   28967:	lea    eax,[rdi+r12*1]
   2896b:	movsxd rdi,edi
   2896e:	and    eax,0x1
   28971:	sub    eax,r12d
   28974:	mov    r12d,0xffffffff
   2897a:	lea    rdi,[r11+rdi*4]
   2897e:	mov    WORD PTR [r9],r12w
   28982:	mov    r12d,0xffffffff
   28988:	add    eax,eax
   2898a:	add    rbx,rdi
   2898d:	mov    WORD PTR [r8],r12w
   28991:	mov    DWORD PTR [rcx],0xffffffff
   28997:	mov    DWORD PTR [rdx],0xffffffff
   2899d:	mov    edi,DWORD PTR [rbx+0x1e8]
   289a3:	cmp    DWORD PTR [rsi+0x18],0x1
   289a7:	mov    WORD PTR [r10],di
   289ab:	je     289f8 <SetModesAndRefframe+0xc8>
   289ad:	mov    rdi,QWORD PTR [rip+0x61ff4]        # 8a9a8 <enc_picture>
   289b4:	add    eax,DWORD PTR [rsi+0x90]
   289ba:	cdqe   
   289bc:	add    ebp,DWORD PTR [rsi+0x94]
   289c2:	mov    rdi,QWORD PTR [rdi+0x1950]
   289c9:	movsxd rbp,ebp
   289cc:	mov    rdi,QWORD PTR [rdi]
   289cf:	mov    rax,QWORD PTR [rdi+rax*8]
   289d3:	movzx  eax,WORD PTR [rax+rbp*2]
   289d7:	xor    esi,esi
   289d9:	mov    WORD PTR [r8],ax
   289dd:	mov    eax,DWORD PTR [rbx+0x1d8]
   289e3:	mov    WORD PTR [r9],si
   289e7:	mov    DWORD PTR [rdx],eax
   289e9:	mov    DWORD PTR [rcx],0x0
   289ef:	pop    rbx
   289f0:	pop    rbp
   289f1:	pop    r12
   289f3:	ret    
   289f4:	nop    DWORD PTR [rax+0x0]
   289f8:	cmp    edi,0xffffffff
   289fb:	je     28a70 <SetModesAndRefframe+0x140>
   289fd:	add    ebp,DWORD PTR [rsi+0x94]
   28a03:	mov    r10,QWORD PTR [rip+0x61f9e]        # 8a9a8 <enc_picture>
   28a0a:	add    eax,DWORD PTR [rsi+0x90]
   28a10:	movsxd rbp,ebp
   28a13:	mov    r10,QWORD PTR [r10+0x1950]
   28a1a:	cdqe   
   28a1c:	lea    rsi,[rbp+rbp*1+0x0]
   28a21:	test   edi,edi
   28a23:	je     28a60 <SetModesAndRefframe+0x130>
   28a25:	mov    r11,QWORD PTR [r10+0x8]
   28a29:	add    rsi,QWORD PTR [r11+rax*8]
   28a2d:	cmp    edi,0x1
   28a30:	je     28a98 <SetModesAndRefframe+0x168>
   28a32:	mov    rdi,QWORD PTR [r10]
   28a35:	mov    rax,QWORD PTR [rdi+rax*8]
   28a39:	movzx  eax,WORD PTR [rax+rbp*2]
   28a3d:	mov    WORD PTR [r8],ax
   28a41:	movzx  eax,WORD PTR [rsi]
   28a44:	mov    WORD PTR [r9],ax
   28a48:	mov    eax,DWORD PTR [rbx+0x1d8]
   28a4e:	mov    DWORD PTR [rdx],eax
   28a50:	mov    eax,DWORD PTR [rbx+0x1d8]
   28a56:	mov    DWORD PTR [rcx],eax
   28a58:	jmp    289ef <SetModesAndRefframe+0xbf>
   28a5a:	nop    WORD PTR [rax+rax*1+0x0]
   28a60:	mov    rsi,QWORD PTR [r10]
   28a63:	mov    rax,QWORD PTR [rsi+rax*8]
   28a67:	jmp    289d3 <SetModesAndRefframe+0xa3>
   28a6c:	nop    DWORD PTR [rax+0x0]
   28a70:	mov    edi,0xffffffff
   28a75:	mov    WORD PTR [r8],di
   28a79:	mov    r8d,0xffffffff
   28a7f:	pop    rbx
   28a80:	mov    WORD PTR [r9],r8w
   28a84:	pop    rbp
   28a85:	mov    DWORD PTR [rdx],0x0
   28a8b:	pop    r12
   28a8d:	mov    DWORD PTR [rcx],0x0
   28a93:	ret    
   28a94:	nop    DWORD PTR [rax+0x0]
   28a98:	xor    eax,eax
   28a9a:	mov    WORD PTR [r8],ax
   28a9e:	movzx  eax,WORD PTR [rsi]
   28aa1:	mov    WORD PTR [r9],ax
   28aa5:	mov    DWORD PTR [rdx],0x0
   28aab:	mov    eax,DWORD PTR [rbx+0x1d8]
   28ab1:	mov    DWORD PTR [rcx],eax
   28ab3:	jmp    289ef <SetModesAndRefframe+0xbf>
   28ab8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000028ac0 <TransformDecision>:
   28ac0:	endbr64 
   28ac4:	push   r15
   28ac6:	push   r14
   28ac8:	push   r13
   28aca:	push   r12
   28acc:	push   rbp
   28acd:	push   rbx
   28ace:	sub    rsp,0x1a8
   28ad5:	mov    QWORD PTR [rsp+0x78],rsi
   28ada:	mov    rax,QWORD PTR fs:0x28
   28ae3:	mov    QWORD PTR [rsp+0x198],rax
   28aeb:	xor    eax,eax
   28aed:	cmp    edi,0xffffffff
   28af0:	je     28da4 <TransformDecision+0x2e4>
   28af6:	lea    eax,[rdi+0x1]
   28af9:	mov    ebx,edi
   28afb:	mov    DWORD PTR [rsp+0x44],eax
   28aff:	mov    DWORD PTR [rsp+0x48],eax
   28b03:	lea    rax,[rsp+0x86]
   28b0b:	mov    DWORD PTR [rsp+0x2c],0x0
   28b13:	mov    QWORD PTR [rsp+0x60],rax
   28b18:	lea    rax,[rsp+0x84]
   28b20:	mov    QWORD PTR [rsp+0x58],rax
   28b25:	lea    rax,[rsp+0x8c]
   28b2d:	mov    QWORD PTR [rsp+0x70],rax
   28b32:	lea    rax,[rsp+0x88]
   28b3a:	mov    QWORD PTR [rsp+0x68],rax
   28b3f:	lea    rax,[rsp+0x82]
   28b47:	mov    QWORD PTR [rsp+0x50],rax
   28b4c:	lea    rax,[rsp+0x90]
   28b54:	mov    DWORD PTR [rsp+0x4c],0x0
   28b5c:	mov    QWORD PTR [rsp+0x38],rax
   28b61:	nop    DWORD PTR [rax+0x0]
   28b68:	mov    rdx,QWORD PTR [rsp+0x68]
   28b6d:	mov    rsi,QWORD PTR [rsp+0x50]
   28b72:	mov    edi,ebx
   28b74:	mov    r9,QWORD PTR [rsp+0x60]
   28b79:	mov    r8,QWORD PTR [rsp+0x58]
   28b7e:	mov    rcx,QWORD PTR [rsp+0x70]
   28b83:	call   28930 <SetModesAndRefframe>
   28b88:	mov    eax,ebx
   28b8a:	mov    edx,ebx
   28b8c:	mov    DWORD PTR [rsp+0xc],0x30
   28b94:	shr    edx,0x1f
   28b97:	shr    eax,0x1f
   28b9a:	add    eax,ebx
   28b9c:	add    ebx,edx
   28b9e:	and    ebx,0x1
   28ba1:	sar    eax,1
   28ba3:	sub    ebx,edx
   28ba5:	shl    eax,0x3
   28ba8:	lea    esi,[rbx*8+0x0]
   28baf:	movsxd r13,eax
   28bb2:	mov    rbx,QWORD PTR [rsp+0x38]
   28bb7:	movsxd rax,esi
   28bba:	mov    DWORD PTR [rsp+0x40],esi
   28bbe:	shl    rax,0x4
   28bc2:	mov    QWORD PTR [rsp+0x20],rbx
   28bc7:	mov    QWORD PTR [rsp+0x30],rax
   28bcc:	mov    rax,QWORD PTR [rip+0x5f9dd]        # 885b0 <img>
   28bd3:	mov    esi,DWORD PTR [rsp+0xc]
   28bd7:	mov    DWORD PTR [rsp+0x28],r13d
   28bdc:	mov    r12,QWORD PTR [rsp+0x30]
   28be1:	mov    r15,QWORD PTR [rsp+0x20]
   28be6:	mov    QWORD PTR [rsp+0x10],r13
   28beb:	mov    edx,DWORD PTR [rax+0xac]
   28bf1:	mov    r14d,DWORD PTR [rsp+0x40]
   28bf6:	lea    ebp,[rsi-0x20]
   28bf9:	add    edx,r13d
   28bfc:	movsxd rdx,edx
   28bff:	lea    rbx,[rdx*8+0x0]
   28c07:	mov    QWORD PTR [rsp+0x18],rbx
   28c0c:	movsx  edx,WORD PTR [rsp+0x82]
   28c14:	sub    rsp,0x8
   28c18:	mov    ebx,DWORD PTR [rax+0xa8]
   28c1e:	mov    edi,r14d
   28c21:	movsx  eax,WORD PTR [rsp+0x8e]
   28c29:	lea    r13d,[rbp-0x10]
   28c2d:	add    ebx,r14d
   28c30:	push   rax
   28c31:	mov    r8d,DWORD PTR [rsp+0x9c]
   28c39:	movsxd rbx,ebx
   28c3c:	movsx  r9d,WORD PTR [rsp+0x94]
   28c45:	mov    ecx,DWORD PTR [rsp+0x98]
   28c4c:	add    rbx,rbx
   28c4f:	mov    esi,DWORD PTR [rsp+0x38]
   28c53:	call   27e80 <LumaPrediction4x4>
   28c58:	mov    rax,QWORD PTR [rsp+0x20]
   28c5d:	mov    r11,QWORD PTR [rsp+0x28]
   28c62:	mov    rdi,r15
   28c65:	add    r11,QWORD PTR [rip+0x8e75c]        # b73c8 <imgY_org>
   28c6c:	lea    rdx,[r12+rax*1]
   28c70:	mov    rax,QWORD PTR [rip+0x5f939]        # 885b0 <img>
   28c77:	lea    r9,[rax+rdx*2]
   28c7b:	pop    rax
   28c7c:	pop    rdx
   28c7d:	mov    r8,QWORD PTR [r11]
   28c80:	mov    rcx,r9
   28c83:	xor    eax,eax
   28c85:	add    r8,rbx
   28c88:	movzx  edx,WORD PTR [r8+rax*2]
   28c8d:	movzx  esi,WORD PTR [rcx+0x3138]
   28c94:	add    rcx,0x20
   28c98:	sub    edx,esi
   28c9a:	mov    DWORD PTR [rdi+rax*4],edx
   28c9d:	add    rax,0x1
   28ca1:	cmp    rax,0x4
   28ca5:	jne    28c88 <TransformDecision+0x1c8>
   28ca7:	add    r13d,0x4
   28cab:	add    r11,0x8
   28caf:	add    r9,0x2
   28cb3:	add    rdi,0x10
   28cb7:	cmp    ebp,r13d
   28cba:	jne    28c7d <TransformDecision+0x1bd>
   28cbc:	mov    rdi,r15
   28cbf:	add    r14d,0x4
   28cc3:	add    ebp,0x10
   28cc6:	add    r15,0x40
   28cca:	mov    rax,QWORD PTR [rip+0x5f8e7]        # 885b8 <input>
   28cd1:	add    r12,0x40
   28cd5:	mov    esi,DWORD PTR [rax+0x18]
   28cd8:	call   3bae0 <SATD>
   28cdd:	add    DWORD PTR [rsp+0x2c],eax
   28ce1:	cmp    DWORD PTR [rsp+0xc],ebp
   28ce5:	je     28cf8 <TransformDecision+0x238>
   28ce7:	mov    rax,QWORD PTR [rip+0x5f8c2]        # 885b0 <img>
   28cee:	jmp    28c0c <TransformDecision+0x14c>
   28cf3:	nop    DWORD PTR [rax+rax*1+0x0]
   28cf8:	add    DWORD PTR [rsp+0xc],0x20
   28cfd:	mov    r13,QWORD PTR [rsp+0x10]
   28d02:	mov    eax,DWORD PTR [rsp+0xc]
   28d06:	sub    QWORD PTR [rsp+0x20],0xffffffffffffff80
   28d0c:	add    r13,0x4
   28d10:	cmp    eax,0x70
   28d13:	jne    28bcc <TransformDecision+0x10c>
   28d19:	mov    rax,QWORD PTR [rip+0x5f898]        # 885b8 <input>
   28d20:	mov    rdi,QWORD PTR [rsp+0x38]
   28d25:	mov    esi,DWORD PTR [rax+0x18]
   28d28:	call   3bd40 <SATD8X8>
   28d2d:	add    DWORD PTR [rsp+0x4c],eax
   28d31:	mov    eax,DWORD PTR [rsp+0x44]
   28d35:	mov    ebx,eax
   28d37:	cmp    DWORD PTR [rsp+0x48],eax
   28d3b:	jle    28d49 <TransformDecision+0x289>
   28d3d:	add    eax,0x1
   28d40:	mov    DWORD PTR [rsp+0x44],eax
   28d44:	jmp    28b68 <TransformDecision+0xa8>
   28d49:	mov    rax,QWORD PTR [rip+0x5f868]        # 885b8 <input>
   28d50:	cmp    DWORD PTR [rax+0xc94],0x2
   28d57:	je     28d7a <TransformDecision+0x2ba>
   28d59:	mov    ebx,DWORD PTR [rsp+0x4c]
   28d5d:	mov    esi,DWORD PTR [rsp+0x2c]
   28d61:	cmp    ebx,esi
   28d63:	jl     28d7a <TransformDecision+0x2ba>
   28d65:	mov    rdi,QWORD PTR [rsp+0x78]
   28d6a:	mov    eax,DWORD PTR [rdi]
   28d6c:	mov    DWORD PTR [rsp+0xc],eax
   28d70:	sub    eax,ebx
   28d72:	add    eax,esi
   28d74:	mov    DWORD PTR [rdi],eax
   28d76:	xor    eax,eax
   28d78:	jmp    28d7f <TransformDecision+0x2bf>
   28d7a:	mov    eax,0x1
   28d7f:	mov    rbx,QWORD PTR [rsp+0x198]
   28d87:	xor    rbx,QWORD PTR fs:0x28
   28d90:	jne    28dbb <TransformDecision+0x2fb>
   28d92:	add    rsp,0x1a8
   28d99:	pop    rbx
   28d9a:	pop    rbp
   28d9b:	pop    r12
   28d9d:	pop    r13
   28d9f:	pop    r14
   28da1:	pop    r15
   28da3:	ret    
   28da4:	mov    DWORD PTR [rsp+0x48],0x4
   28dac:	xor    ebx,ebx
   28dae:	mov    DWORD PTR [rsp+0x44],0x1
   28db6:	jmp    28b03 <TransformDecision+0x43>
   28dbb:	call   4390 <__stack_chk_fail@plt>

0000000000028dc0 <OneComponentChromaPrediction4x4>:
   28dc0:	endbr64 
   28dc4:	push   r15
   28dc6:	mov    r11,QWORD PTR [rip+0x5f7e3]        # 885b0 <img>
   28dcd:	mov    r10d,0x40
   28dd3:	push   r14
   28dd5:	mov    eax,r10d
   28dd8:	push   r13
   28dda:	push   r12
   28ddc:	push   rbp
   28ddd:	mov    ebp,edx
   28ddf:	cdq    
   28de0:	push   rbx
   28de1:	movsxd rbx,r8d
   28de4:	mov    QWORD PTR [rsp-0x48],rdi
   28de9:	mov    edi,DWORD PTR [r11+0x11c04]
   28df0:	mov    DWORD PTR [rsp-0x14],esi
   28df4:	mov    esi,DWORD PTR [r11+0x11c08]
   28dfb:	idiv   edi
   28dfd:	mov    QWORD PTR [rsp-0x10],rcx
   28e02:	mov    r8d,eax
   28e05:	sub    eax,0x1
   28e08:	mov    DWORD PTR [rsp-0x54],eax
   28e0c:	mov    eax,r10d
   28e0f:	cdq    
   28e10:	idiv   esi
   28e12:	mov    edx,DWORD PTR [r11+0x11ad0]
   28e19:	mov    r10d,eax
   28e1c:	sub    eax,0x1
   28e1f:	mov    DWORD PTR [rsp-0x20],eax
   28e23:	mov    eax,r8d
   28e26:	imul   eax,r10d
   28e2a:	mov    DWORD PTR [rsp-0x1c],eax
   28e2e:	sar    eax,1
   28e30:	mov    DWORD PTR [rsp-0x18],eax
   28e34:	test   edx,edx
   28e36:	je     28e5b <OneComponentChromaPrediction4x4+0x9b>
   28e38:	movsxd rax,DWORD PTR [r11+0xc]
   28e3c:	mov    rdx,rax
   28e3f:	imul   rax,rax,0x278
   28e46:	add    rax,QWORD PTR [r11+0x3758]
   28e4d:	mov    eax,DWORD PTR [rax+0x214]
   28e53:	test   eax,eax
   28e55:	jne    29100 <OneComponentChromaPrediction4x4+0x340>
   28e5b:	mov    eax,DWORD PTR [r11+0x40]
   28e5f:	mov    edx,ebx
   28e61:	lea    r12d,[rax-0x1]
   28e65:	movsx  rax,r9w
   28e69:	movsxd rdx,edx
   28e6c:	mov    DWORD PTR [rsp-0x58],ebp
   28e70:	lea    rcx,[rax*8+0x0]
   28e78:	mov    QWORD PTR [rsp-0x40],rcx
   28e7d:	lea    rcx,[rip+0x8e59c]        # b7420 <listX>
   28e84:	mov    rdx,QWORD PTR [rcx+rdx*8]
   28e88:	mov    rax,QWORD PTR [rdx+rax*8]
   28e8c:	movsxd rdx,DWORD PTR [rsp+0x40]
   28e91:	mov    QWORD PTR [rsp-0x38],rax
   28e96:	mov    rax,QWORD PTR [rax+0x1940]
   28e9d:	mov    rax,QWORD PTR [rax+rdx*8]
   28ea1:	mov    QWORD PTR [rsp-0x50],rax
   28ea6:	lea    rax,[rbx*8+0x0]
   28eae:	mov    QWORD PTR [rsp-0x30],rax
   28eb3:	movsxd rax,DWORD PTR [rsp+0x38]
   28eb8:	shl    rax,0x3
   28ebc:	mov    QWORD PTR [rsp-0x28],rax
   28ec1:	mov    rax,QWORD PTR [rsp-0x48]
   28ec6:	add    rax,0x40
   28eca:	mov    QWORD PTR [rsp-0x8],rax
   28ecf:	xor    r9d,r9d
   28ed2:	mov    eax,DWORD PTR [rsp-0x14]
   28ed6:	test   edi,edi
   28ed8:	mov    rbx,QWORD PTR [rsp-0x10]
   28edd:	mov    ebp,DWORD PTR [r11+0x38]
   28ee1:	lea    ecx,[rax+r9*1]
   28ee5:	lea    eax,[rdi+0x3]
   28ee8:	cmovs  edi,eax
   28eeb:	mov    eax,ecx
   28eed:	cdq    
   28eee:	sar    edi,0x2
   28ef1:	idiv   edi
   28ef3:	test   esi,esi
   28ef5:	movsxd rdi,eax
   28ef8:	lea    eax,[rsi+0x3]
   28efb:	cmovs  esi,eax
   28efe:	mov    eax,DWORD PTR [rsp-0x58]
   28f02:	add    ecx,DWORD PTR [r11+0xb0]
   28f09:	imul   ecx,r8d
   28f0d:	sar    esi,0x2
   28f10:	cdq    
   28f11:	idiv   esi
   28f13:	mov    rdx,QWORD PTR [rbx+rdi*8]
   28f17:	mov    rbx,QWORD PTR [rsp-0x30]
   28f1c:	mov    esi,DWORD PTR [rsp-0x58]
   28f20:	add    esi,DWORD PTR [r11+0xb4]
   28f27:	imul   esi,r10d
   28f2b:	cdqe   
   28f2d:	mov    rax,QWORD PTR [rdx+rax*8]
   28f31:	mov    rdx,QWORD PTR [rsp-0x28]
   28f36:	mov    rax,QWORD PTR [rax+rbx*1]
   28f3a:	mov    rbx,QWORD PTR [rsp-0x40]
   28f3f:	mov    rax,QWORD PTR [rax+rbx*1]
   28f43:	mov    rdi,QWORD PTR [rax+rdx*1]
   28f47:	movsx  eax,WORD PTR [rdi]
   28f4a:	add    ecx,eax
   28f4c:	movsx  eax,WORD PTR [rdi+0x2]
   28f50:	add    esi,eax
   28f52:	mov    rax,QWORD PTR [rsp-0x38]
   28f57:	add    esi,DWORD PTR [rax+0x1908]
   28f5d:	mov    eax,ecx
   28f5f:	cdq    
   28f60:	idiv   r8d
   28f63:	movsxd rdi,eax
   28f66:	mov    eax,DWORD PTR [rsp-0x54]
   28f6a:	add    eax,ecx
   28f6c:	cdq    
   28f6d:	idiv   r8d
   28f70:	movsxd rbx,eax
   28f73:	mov    eax,esi
   28f75:	cdq    
   28f76:	idiv   r10d
   28f79:	mov    edx,0x0
   28f7e:	cmp    eax,r12d
   28f81:	cmovg  eax,r12d
   28f85:	test   eax,eax
   28f87:	cmovs  eax,edx
   28f8a:	cmp    ebp,edi
   28f8c:	jg     29060 <OneComponentChromaPrediction4x4+0x2a0>
   28f92:	test   ebp,ebp
   28f94:	jg     29090 <OneComponentChromaPrediction4x4+0x2d0>
   28f9a:	xor    edi,edi
   28f9c:	cmp    ebp,ebx
   28f9e:	jg     290a4 <OneComponentChromaPrediction4x4+0x2e4>
   28fa4:	xor    r14d,r14d
   28fa7:	xor    edi,edi
   28fa9:	nop    DWORD PTR [rax+0x0]
   28fb0:	mov    edx,DWORD PTR [rsp-0x20]
   28fb4:	mov    r15,QWORD PTR [rsp-0x50]
   28fb9:	cdqe   
   28fbb:	mov    ebx,r8d
   28fbe:	and    ecx,DWORD PTR [rsp-0x54]
   28fc2:	mov    ebp,r10d
   28fc5:	mov    r15,QWORD PTR [r15+rax*8]
   28fc9:	lea    eax,[rdx+rsi*1]
   28fcc:	mov    r13d,edx
   28fcf:	sub    ebx,ecx
   28fd1:	cdq    
   28fd2:	and    r13d,esi
   28fd5:	mov    esi,0x0
   28fda:	idiv   r10d
   28fdd:	mov    rdx,QWORD PTR [rsp-0x50]
   28fe2:	sub    ebp,r13d
   28fe5:	cmp    eax,r12d
   28fe8:	cmovg  eax,r12d
   28fec:	test   eax,eax
   28fee:	cmovs  eax,esi
   28ff1:	movzx  esi,WORD PTR [r15+rdi*1]
   28ff6:	cdqe   
   28ff8:	mov    rdx,QWORD PTR [rdx+rax*8]
   28ffc:	mov    eax,ebx
   28ffe:	imul   ebx,r13d
   29002:	imul   eax,ebp
   29005:	imul   ebp,ecx
   29008:	imul   ecx,r13d
   2900c:	imul   eax,esi
   2900f:	movzx  esi,WORD PTR [r15+r14*1]
   29014:	imul   ebp,esi
   29017:	add    eax,ebp
   29019:	movzx  ebp,WORD PTR [rdx+rdi*1]
   2901d:	mov    rdi,QWORD PTR [rsp-0x48]
   29022:	imul   ebx,ebp
   29025:	lea    ebp,[rax+rbx*1]
   29028:	movzx  ebx,WORD PTR [rdx+r14*1]
   2902d:	imul   ecx,ebx
   29030:	lea    eax,[rbp+rcx*1+0x0]
   29034:	add    eax,DWORD PTR [rsp-0x18]
   29038:	cdq    
   29039:	idiv   DWORD PTR [rsp-0x1c]
   2903d:	mov    DWORD PTR [rdi+r9*4],eax
   29041:	add    r9,0x1
   29045:	cmp    r9,0x4
   29049:	je     290c0 <OneComponentChromaPrediction4x4+0x300>
   2904b:	mov    edi,DWORD PTR [r11+0x11c04]
   29052:	mov    esi,DWORD PTR [r11+0x11c08]
   29059:	jmp    28ed2 <OneComponentChromaPrediction4x4+0x112>
   2905e:	xchg   ax,ax
   29060:	test   edi,edi
   29062:	mov    edx,0x0
   29067:	cmovs  rdi,rdx
   2906b:	add    rdi,rdi
   2906e:	cmp    ebp,ebx
   29070:	jg     290a4 <OneComponentChromaPrediction4x4+0x2e4>
   29072:	xor    r14d,r14d
   29075:	test   ebp,ebp
   29077:	jle    28fb0 <OneComponentChromaPrediction4x4+0x1f0>
   2907d:	lea    r14d,[rbp-0x1]
   29081:	movsxd r14,r14d
   29084:	add    r14,r14
   29087:	jmp    28fb0 <OneComponentChromaPrediction4x4+0x1f0>
   2908c:	nop    DWORD PTR [rax+0x0]
   29090:	lea    edi,[rbp-0x1]
   29093:	movsxd rdi,edi
   29096:	add    rdi,rdi
   29099:	mov    r14,rdi
   2909c:	cmp    ebp,ebx
   2909e:	jle    28fb0 <OneComponentChromaPrediction4x4+0x1f0>
   290a4:	test   ebx,ebx
   290a6:	mov    r14d,0x0
   290ac:	cmovns r14,rbx
   290b0:	add    r14,r14
   290b3:	jmp    28fb0 <OneComponentChromaPrediction4x4+0x1f0>
   290b8:	nop    DWORD PTR [rax+rax*1+0x0]
   290c0:	add    QWORD PTR [rsp-0x48],0x10
   290c6:	mov    rax,QWORD PTR [rsp-0x48]
   290cb:	add    DWORD PTR [rsp-0x58],0x1
   290d0:	cmp    rax,QWORD PTR [rsp-0x8]
   290d5:	je     290f0 <OneComponentChromaPrediction4x4+0x330>
   290d7:	mov    edi,DWORD PTR [r11+0x11c04]
   290de:	mov    esi,DWORD PTR [r11+0x11c08]
   290e5:	jmp    28ecf <OneComponentChromaPrediction4x4+0x10f>
   290ea:	nop    WORD PTR [rax+rax*1+0x0]
   290f0:	pop    rbx
   290f1:	pop    rbp
   290f2:	pop    r12
   290f4:	pop    r13
   290f6:	pop    r14
   290f8:	pop    r15
   290fa:	ret    
   290fb:	nop    DWORD PTR [rax+rax*1+0x0]
   29100:	mov    ecx,DWORD PTR [r11+0x40]
   29104:	and    edx,0x1
   29107:	cmp    edx,0x1
   2910a:	mov    eax,ecx
   2910c:	sbb    edx,edx
   2910e:	shr    eax,0x1f
   29111:	and    edx,0xfffffffe
   29114:	add    eax,ecx
   29116:	lea    edx,[rdx+rbx*1+0x4]
   2911a:	sar    eax,1
   2911c:	lea    r12d,[rax-0x1]
   29120:	jmp    28e65 <OneComponentChromaPrediction4x4+0xa5>
   29125:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000029130 <IntraChromaPrediction4x4>:
   29130:	endbr64 
   29134:	movsxd rsi,esi
   29137:	movsxd rax,edx
   2913a:	mov    rdx,QWORD PTR [rip+0x5f46f]        # 885b0 <img>
   29141:	movsxd rdi,edi
   29144:	shl    rsi,0x4
   29148:	shl    rdi,0xb
   2914c:	add    rax,rsi
   2914f:	add    rax,rax
   29152:	lea    rcx,[rdx+rax*1+0x80]
   2915a:	lea    r8,[rdx+rax*1+0x88]
   29162:	movsxd rax,DWORD PTR [rdx+0xc]
   29166:	imul   rax,rax,0x278
   2916d:	add    rax,QWORD PTR [rdx+0x3758]
   29174:	movsxd rsi,DWORD PTR [rax+0x20c]
   2917b:	shl    rsi,0x9
   2917f:	lea    rax,[rcx-0x80]
   29183:	lea    rdx,[rax+rdi*1]
   29187:	add    rax,0x20
   2918b:	movzx  edx,WORD PTR [rdx+rsi*1+0x2138]
   29193:	mov    WORD PTR [rax+0x3118],dx
   2919a:	cmp    rax,rcx
   2919d:	jne    29183 <IntraChromaPrediction4x4+0x53>
   2919f:	lea    rcx,[rax+0x2]
   291a3:	cmp    rcx,r8
   291a6:	jne    2917f <IntraChromaPrediction4x4+0x4f>
   291a8:	ret    
   291a9:	nop    DWORD PTR [rax+0x0]

00000000000291b0 <ChromaPrediction4x4>:
   291b0:	endbr64 
   291b4:	push   r15
   291b6:	push   r14
   291b8:	push   r13
   291ba:	mov    r13d,r9d
   291bd:	push   r12
   291bf:	mov    r12d,ecx
   291c2:	push   rbp
   291c3:	movsxd rbp,edi
   291c6:	push   rbx
   291c7:	movsxd rbx,esi
   291ca:	sub    rsp,0x18
   291ce:	mov    rdi,QWORD PTR [rip+0x5f3db]        # 885b0 <img>
   291d5:	mov    rsi,QWORD PTR [rip+0x77c24]        # a0e00 <active_pps>
   291dc:	mov    r9d,DWORD PTR [rsp+0x50]
   291e1:	mov    r14d,DWORD PTR [rsp+0x58]
   291e6:	movsxd r11,DWORD PTR [rdi+0xc]
   291ea:	mov    eax,DWORD PTR [rsi+0xc0]
   291f0:	mov    WORD PTR [rsp+0x4],r9w
   291f6:	mov    rcx,QWORD PTR [rdi+0x118f8]
   291fd:	imul   r11,r11,0x278
   29204:	mov    WORD PTR [rsp+0x6],r14w
   2920a:	add    r11,QWORD PTR [rdi+0x3758]
   29211:	test   eax,eax
   29213:	je     2922c <ChromaPrediction4x4+0x7c>
   29215:	mov    r10d,DWORD PTR [rdi+0x18]
   29219:	test   r10d,r10d
   2921c:	je     29480 <ChromaPrediction4x4+0x2d0>
   29222:	cmp    r10d,0x3
   29226:	je     29480 <ChromaPrediction4x4+0x2d0>
   2922c:	mov    r15d,DWORD PTR [rsi+0xc4]
   29233:	xor    r10d,r10d
   29236:	test   r15d,r15d
   29239:	jne    293c0 <ChromaPrediction4x4+0x210>
   2923f:	mov    esi,DWORD PTR [r11+0x244]
   29246:	test   esi,esi
   29248:	je     29257 <ChromaPrediction4x4+0xa7>
   2924a:	mov    eax,r14d
   2924d:	or     ax,r9w
   29251:	je     293d0 <ChromaPrediction4x4+0x220>
   29257:	cmp    r12d,0xffffffff
   2925b:	je     29490 <ChromaPrediction4x4+0x2e0>
   29261:	cmp    r12d,0x2
   29265:	sete   r15b
   29269:	xor    r11d,r11d
   2926c:	test   r12d,0xfffffffd
   29273:	je     293f2 <ChromaPrediction4x4+0x242>
   29279:	sub    r12d,0x1
   2927d:	cmp    r12d,0x1
   29281:	jbe    2943c <ChromaPrediction4x4+0x28c>
   29287:	mov    r12,QWORD PTR [rip+0x5f322]        # 885b0 <img>
   2928e:	test   r10d,r10d
   29291:	je     29360 <ChromaPrediction4x4+0x1b0>
   29297:	mov    r9d,DWORD PTR [rip+0x8af12]        # b41b0 <wp_chroma_round>
   2929e:	mov    ecx,DWORD PTR [rip+0x8d44c]        # b66f0 <chroma_log_weight_denom>
   292a4:	add    rbp,0x1
   292a8:	mov    rsi,QWORD PTR [rip+0x8ae81]        # b4130 <wp_offset>
   292af:	mov    r8d,DWORD PTR [r12+0x11bf0]
   292b7:	test   r15b,r15b
   292ba:	jne    295d8 <ChromaPrediction4x4+0x428>
   292c0:	mov    rdi,QWORD PTR [rip+0x77b41]        # a0e08 <wp_weight>
   292c7:	test   r11b,r11b
   292ca:	je     29500 <ChromaPrediction4x4+0x350>
   292d0:	movsx  rax,WORD PTR [rsp+0x4]
   292d6:	mov    rsi,QWORD PTR [rsi]
   292d9:	shl    rbx,0x4
   292dd:	movsxd rdx,edx
   292e0:	mov    rdi,QWORD PTR [rdi]
   292e3:	add    rdx,rbx
   292e6:	lea    r11,[rip+0x5f9d3]        # 88cc0 <fw_pred.5696>
   292ed:	lea    rbx,[r12+rdx*2]
   292f1:	mov    rdi,QWORD PTR [rdi+rax*8]
   292f5:	mov    rax,QWORD PTR [rsi+rax*8]
   292f9:	lea    rsi,[r11+0x40]
   292fd:	mov    edi,DWORD PTR [rdi+rbp*4]
   29300:	mov    r10d,DWORD PTR [rax+rbp*4]
   29304:	xor    ebp,ebp
   29306:	xor    edx,edx
   29308:	mov    eax,DWORD PTR [r11+rdx*1]
   2930c:	mov    r12d,r8d
   2930f:	imul   eax,edi
   29312:	add    eax,r9d
   29315:	sar    eax,cl
   29317:	add    eax,r10d
   2931a:	cmp    eax,r8d
   2931d:	jg     29327 <ChromaPrediction4x4+0x177>
   2931f:	test   eax,eax
   29321:	cmovs  eax,ebp
   29324:	mov    r12d,eax
   29327:	mov    WORD PTR [rbx+rdx*8+0x3138],r12w
   29330:	add    rdx,0x4
   29334:	cmp    rdx,0x10
   29338:	jne    29308 <ChromaPrediction4x4+0x158>
   2933a:	add    r11,0x10
   2933e:	add    rbx,0x2
   29342:	cmp    r11,rsi
   29345:	jne    29306 <ChromaPrediction4x4+0x156>
   29347:	add    rsp,0x18
   2934b:	pop    rbx
   2934c:	pop    rbp
   2934d:	pop    r12
   2934f:	pop    r13
   29351:	pop    r14
   29353:	pop    r15
   29355:	ret    
   29356:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29360:	shl    rbx,0x4
   29364:	movsxd rdx,edx
   29367:	add    rdx,rbx
   2936a:	test   r15b,r15b
   2936d:	jne    296b0 <ChromaPrediction4x4+0x500>
   29373:	test   r11b,r11b
   29376:	je     29590 <ChromaPrediction4x4+0x3e0>
   2937c:	lea    rcx,[rip+0x5f93d]        # 88cc0 <fw_pred.5696>
   29383:	lea    rdi,[r12+rdx*2]
   29387:	lea    rsi,[rcx+0x40]
   2938b:	xor    eax,eax
   2938d:	mov    edx,DWORD PTR [rcx+rax*1]
   29390:	mov    WORD PTR [rdi+rax*8+0x3138],dx
   29398:	add    rax,0x4
   2939c:	cmp    rax,0x10
   293a0:	jne    2938d <ChromaPrediction4x4+0x1dd>
   293a2:	add    rcx,0x10
   293a6:	add    rdi,0x2
   293aa:	cmp    rcx,rsi
   293ad:	jne    2938b <ChromaPrediction4x4+0x1db>
   293af:	add    rsp,0x18
   293b3:	pop    rbx
   293b4:	pop    rbp
   293b5:	pop    r12
   293b7:	pop    r13
   293b9:	pop    r14
   293bb:	pop    r15
   293bd:	ret    
   293be:	xchg   ax,ax
   293c0:	xor    r10d,r10d
   293c3:	cmp    DWORD PTR [rdi+0x18],0x1
   293c7:	sete   r10b
   293cb:	jmp    2923f <ChromaPrediction4x4+0x8f>
   293d0:	cmp    r12d,0x2
   293d4:	sete   al
   293d7:	cmp    r8d,0x1
   293db:	sete   r15b
   293df:	and    r15b,al
   293e2:	je     29257 <ChromaPrediction4x4+0xa7>
   293e8:	cmp    r13d,0x1
   293ec:	je     29710 <ChromaPrediction4x4+0x560>
   293f2:	mov    DWORD PTR [rsp+0x14],r10d
   293f7:	mov    esi,ebx
   293f9:	movsx  r9d,r9w
   293fd:	sub    r12d,0x1
   29401:	push   rbp
   29402:	lea    rdi,[rip+0x5f8b7]        # 88cc0 <fw_pred.5696>
   29409:	push   r8
   2940b:	xor    r8d,r8d
   2940e:	mov    DWORD PTR [rsp+0x20],edx
   29412:	mov    QWORD PTR [rsp+0x18],rcx
   29417:	call   28dc0 <OneComponentChromaPrediction4x4>
   2941c:	pop    rcx
   2941d:	mov    r11d,0x1
   29423:	pop    rsi
   29424:	mov    r10d,DWORD PTR [rsp+0x14]
   29429:	mov    rcx,QWORD PTR [rsp+0x8]
   2942e:	mov    edx,DWORD PTR [rsp+0x10]
   29432:	cmp    r12d,0x1
   29436:	ja     29287 <ChromaPrediction4x4+0xd7>
   2943c:	mov    BYTE PTR [rsp+0x14],r11b
   29441:	movsx  r9d,r14w
   29445:	mov    esi,ebx
   29447:	mov    r8d,0x1
   2944d:	mov    DWORD PTR [rsp+0x8],r10d
   29452:	lea    rdi,[rip+0x5f827]        # 88c80 <bw_pred.5697>
   29459:	push   rbp
   2945a:	push   r13
   2945c:	mov    DWORD PTR [rsp+0x20],edx
   29460:	call   28dc0 <OneComponentChromaPrediction4x4>
   29465:	pop    rax
   29466:	pop    rdx
   29467:	movzx  r11d,BYTE PTR [rsp+0x14]
   2946d:	mov    r10d,DWORD PTR [rsp+0x8]
   29472:	mov    edx,DWORD PTR [rsp+0x10]
   29476:	jmp    29287 <ChromaPrediction4x4+0xd7>
   2947b:	nop    DWORD PTR [rax+rax*1+0x0]
   29480:	mov    r10d,0x1
   29486:	jmp    2923f <ChromaPrediction4x4+0x8f>
   2948b:	nop    DWORD PTR [rax+rax*1+0x0]
   29490:	movsxd rax,ebx
   29493:	movsxd rdx,edx
   29496:	movsxd rsi,DWORD PTR [r11+0x20c]
   2949d:	shl    rbp,0xb
   294a1:	shl    rax,0x4
   294a5:	add    rax,rdx
   294a8:	shl    rsi,0x9
   294ac:	add    rax,rax
   294af:	lea    rdx,[rdi+rax*1+0x80]
   294b7:	lea    rdi,[rdi+rax*1+0x88]
   294bf:	lea    rax,[rdx-0x80]
   294c3:	lea    rcx,[rax+rbp*1]
   294c7:	add    rax,0x20
   294cb:	movzx  ecx,WORD PTR [rcx+rsi*1+0x2138]
   294d3:	mov    WORD PTR [rax+0x3118],cx
   294da:	cmp    rax,rdx
   294dd:	jne    294c3 <ChromaPrediction4x4+0x313>
   294df:	add    rdx,0x2
   294e3:	cmp    rdx,rdi
   294e6:	jne    294bf <ChromaPrediction4x4+0x30f>
   294e8:	add    rsp,0x18
   294ec:	pop    rbx
   294ed:	pop    rbp
   294ee:	pop    r12
   294f0:	pop    r13
   294f2:	pop    r14
   294f4:	pop    r15
   294f6:	ret    
   294f7:	nop    WORD PTR [rax+rax*1+0x0]
   29500:	mov    rsi,QWORD PTR [rsi+0x8]
   29504:	mov    rdi,QWORD PTR [rdi+0x8]
   29508:	shl    rbx,0x4
   2950c:	movsxd rdx,edx
   2950f:	movsx  rax,WORD PTR [rsp+0x6]
   29515:	add    rdx,rbx
   29518:	lea    r11,[r12+rdx*2]
   2951c:	mov    rdi,QWORD PTR [rdi+rax*8]
   29520:	mov    rax,QWORD PTR [rsi+rax*8]
   29524:	lea    rsi,[rip+0x5f755]        # 88c80 <bw_pred.5697>
   2952b:	lea    rbx,[rsi+0x40]
   2952f:	mov    edi,DWORD PTR [rdi+rbp*4]
   29532:	mov    r10d,DWORD PTR [rax+rbp*4]
   29536:	xor    ebp,ebp
   29538:	xor    edx,edx
   2953a:	mov    eax,DWORD PTR [rsi+rdx*1]
   2953d:	mov    r12d,r8d
   29540:	imul   eax,edi
   29543:	add    eax,r9d
   29546:	sar    eax,cl
   29548:	add    eax,r10d
   2954b:	cmp    eax,r8d
   2954e:	jg     29558 <ChromaPrediction4x4+0x3a8>
   29550:	test   eax,eax
   29552:	cmovs  eax,ebp
   29555:	mov    r12d,eax
   29558:	mov    WORD PTR [r11+rdx*8+0x3138],r12w
   29561:	add    rdx,0x4
   29565:	cmp    rdx,0x10
   29569:	jne    2953a <ChromaPrediction4x4+0x38a>
   2956b:	add    rsi,0x10
   2956f:	add    r11,0x2
   29573:	cmp    rsi,rbx
   29576:	jne    29538 <ChromaPrediction4x4+0x388>
   29578:	add    rsp,0x18
   2957c:	pop    rbx
   2957d:	pop    rbp
   2957e:	pop    r12
   29580:	pop    r13
   29582:	pop    r14
   29584:	pop    r15
   29586:	ret    
   29587:	nop    WORD PTR [rax+rax*1+0x0]
   29590:	lea    rcx,[rip+0x5f6e9]        # 88c80 <bw_pred.5697>
   29597:	lea    rsi,[r12+rdx*2]
   2959b:	lea    rbx,[rcx+0x40]
   2959f:	xor    eax,eax
   295a1:	mov    edx,DWORD PTR [rcx+rax*1]
   295a4:	mov    WORD PTR [rsi+rax*8+0x3138],dx
   295ac:	add    rax,0x4
   295b0:	cmp    rax,0x10
   295b4:	jne    295a1 <ChromaPrediction4x4+0x3f1>
   295b6:	add    rcx,0x10
   295ba:	add    rsi,0x2
   295be:	cmp    rcx,rbx
   295c1:	jne    2959f <ChromaPrediction4x4+0x3ef>
   295c3:	add    rsp,0x18
   295c7:	pop    rbx
   295c8:	pop    rbp
   295c9:	pop    r12
   295cb:	pop    r13
   295cd:	pop    r14
   295cf:	pop    r15
   295d1:	ret    
   295d2:	nop    WORD PTR [rax+rax*1+0x0]
   295d8:	mov    rdi,QWORD PTR [rip+0x8ab79]        # b4158 <wbp_weight>
   295df:	mov    r13,QWORD PTR [rsi]
   295e2:	movsxd rdx,edx
   295e5:	add    r9d,r9d
   295e8:	movsx  r11,WORD PTR [rsp+0x4]
   295ee:	mov    rsi,QWORD PTR [rsi+0x8]
   295f2:	shl    rbx,0x4
   295f6:	add    ecx,0x1
   295f9:	mov    r10,QWORD PTR [rdi]
   295fc:	mov    rdi,QWORD PTR [rdi+0x8]
   29600:	add    rdx,rbx
   29603:	movsx  rax,WORD PTR [rsp+0x6]
   29609:	lea    r12,[r12+rdx*2]
   2960d:	mov    r10,QWORD PTR [r10+r11*8]
   29611:	mov    rdi,QWORD PTR [rdi+r11*8]
   29615:	mov    r11,QWORD PTR [r13+r11*8+0x0]
   2961a:	xor    r13d,r13d
   2961d:	mov    r10,QWORD PTR [r10+rax*8]
   29621:	mov    rdi,QWORD PTR [rdi+rax*8]
   29625:	mov    rax,QWORD PTR [rsi+rax*8]
   29629:	lea    rsi,[rip+0x5f650]        # 88c80 <bw_pred.5697>
   29630:	mov    r10d,DWORD PTR [r10+rbp*4]
   29634:	mov    edi,DWORD PTR [rdi+rbp*4]
   29637:	lea    rbx,[rsi+0x40]
   2963b:	mov    eax,DWORD PTR [rax+rbp*4]
   2963e:	add    eax,DWORD PTR [r11+rbp*4]
   29642:	lea    r11,[rip+0x5f677]        # 88cc0 <fw_pred.5696>
   29649:	mov    ebp,eax
   2964b:	add    ebp,0x1
   2964e:	sar    ebp,1
   29650:	xor    edx,edx
   29652:	mov    eax,DWORD PTR [r11+rdx*1]
   29656:	mov    r14d,DWORD PTR [rsi+rdx*1]
   2965a:	imul   eax,r10d
   2965e:	imul   r14d,edi
   29662:	add    eax,r14d
   29665:	mov    r14d,r8d
   29668:	add    eax,r9d
   2966b:	sar    eax,cl
   2966d:	add    eax,ebp
   2966f:	cmp    eax,r8d
   29672:	jg     2967d <ChromaPrediction4x4+0x4cd>
   29674:	test   eax,eax
   29676:	cmovs  eax,r13d
   2967a:	mov    r14d,eax
   2967d:	mov    WORD PTR [r12+rdx*8+0x3138],r14w
   29686:	add    rdx,0x4
   2968a:	cmp    rdx,0x10
   2968e:	jne    29652 <ChromaPrediction4x4+0x4a2>
   29690:	add    rsi,0x10
   29694:	add    r11,0x10
   29698:	add    r12,0x2
   2969c:	cmp    rsi,rbx
   2969f:	jne    29650 <ChromaPrediction4x4+0x4a0>
   296a1:	add    rsp,0x18
   296a5:	pop    rbx
   296a6:	pop    rbp
   296a7:	pop    r12
   296a9:	pop    r13
   296ab:	pop    r14
   296ad:	pop    r15
   296af:	ret    
   296b0:	lea    rdi,[rip+0x5f609]        # 88cc0 <fw_pred.5696>
   296b7:	lea    r9,[r12+rdx*2]
   296bb:	lea    r8,[rip+0x5f5be]        # 88c80 <bw_pred.5697>
   296c2:	lea    rsi,[rdi+0x40]
   296c6:	xor    edx,edx
   296c8:	mov    eax,DWORD PTR [r8+rdx*1]
   296cc:	add    eax,DWORD PTR [rdi+rdx*1]
   296cf:	add    eax,0x1
   296d2:	mov    ecx,eax
   296d4:	shr    ecx,0x1f
   296d7:	add    eax,ecx
   296d9:	sar    eax,1
   296db:	mov    WORD PTR [r9+rdx*8+0x3138],ax
   296e4:	add    rdx,0x4
   296e8:	cmp    rdx,0x10
   296ec:	jne    296c8 <ChromaPrediction4x4+0x518>
   296ee:	add    rdi,0x10
   296f2:	add    r8,0x10
   296f6:	add    r9,0x2
   296fa:	cmp    rdi,rsi
   296fd:	jne    296c6 <ChromaPrediction4x4+0x516>
   296ff:	add    rsp,0x18
   29703:	pop    rbx
   29704:	pop    rbp
   29705:	pop    r12
   29707:	pop    r13
   29709:	pop    r14
   2970b:	pop    r15
   2970d:	ret    
   2970e:	xchg   ax,ax
   29710:	cmp    esi,0x1
   29713:	je     29721 <ChromaPrediction4x4+0x571>
   29715:	mov    rcx,QWORD PTR [rdi+0x11908]
   2971c:	jmp    293f2 <ChromaPrediction4x4+0x242>
   29721:	mov    rcx,QWORD PTR [rdi+0x11900]
   29728:	jmp    293f2 <ChromaPrediction4x4+0x242>
   2972d:	nop    DWORD PTR [rax]

0000000000029730 <LumaResidualCoding8x8>:
   29730:	endbr64 
   29734:	push   r15
   29736:	push   r14
   29738:	push   r13
   2973a:	push   r12
   2973c:	push   rbp
   2973d:	push   rbx
   2973e:	mov    ebx,edx
   29740:	sub    rsp,0xf8
   29747:	mov    r14,QWORD PTR [rip+0x5ee62]        # 885b0 <img>
   2974e:	mov    QWORD PTR [rsp+0xb0],rdi
   29756:	mov    edi,DWORD PTR [rsp+0x138]
   2975d:	mov    QWORD PTR [rsp+0xb8],rsi
   29765:	mov    esi,DWORD PTR [rsp+0x130]
   2976c:	mov    DWORD PTR [rsp+0xc8],edx
   29773:	mov    edx,ecx
   29775:	mov    ecx,ebx
   29777:	mov    DWORD PTR [rsp+0x48],r8d
   2977c:	shr    ecx,0x1f
   2977f:	mov    DWORD PTR [rsp+0x4c],r9d
   29784:	mov    rax,QWORD PTR fs:0x28
   2978d:	mov    QWORD PTR [rsp+0xe8],rax
   29795:	xor    eax,eax
   29797:	mov    eax,ebx
   29799:	mov    DWORD PTR [rsp+0xe4],0x0
   297a4:	mov    DWORD PTR [rsp+0x8c],0x0
   297af:	shr    eax,0x1f
   297b2:	add    eax,ebx
   297b4:	sar    eax,1
   297b6:	shl    eax,0x3
   297b9:	mov    DWORD PTR [rsp+0x88],eax
   297c0:	lea    eax,[rbx+rcx*1]
   297c3:	and    eax,0x1
   297c6:	sub    eax,ecx
   297c8:	mov    ecx,ebx
   297ca:	mov    DWORD PTR [rsp+0xcc],eax
   297d1:	shl    eax,0x3
   297d4:	mov    DWORD PTR [rsp+0x80],eax
   297db:	mov    eax,0x1
   297e0:	shl    eax,cl
   297e2:	or     r8d,r9d
   297e5:	mov    DWORD PTR [rsp+0xac],eax
   297ec:	jne    297ff <LumaResidualCoding8x8+0xcf>
   297ee:	xor    eax,eax
   297f0:	cmp    DWORD PTR [r14+0x18],0x1
   297f5:	setne  al
   297f8:	mov    DWORD PTR [rsp+0x8c],eax
   297ff:	mov    QWORD PTR [rsp+0x18],0x0
   29808:	movsxd rax,DWORD PTR [r14+0xc]
   2980c:	mov    DWORD PTR [rsp+0xa0],0x0
   29817:	imul   rax,rax,0x278
   2981e:	add    rax,QWORD PTR [r14+0x3758]
   29825:	mov    r15d,DWORD PTR [rax+0x23c]
   2982c:	movsx  eax,di
   2982f:	movsxd rdi,DWORD PTR [rsp+0x88]
   29837:	mov    DWORD PTR [rsp+0x3c],eax
   2983b:	movsx  eax,si
   2983e:	mov    DWORD PTR [rsp+0x40],eax
   29842:	movsx  eax,dx
   29845:	mov    DWORD PTR [rsp+0x44],eax
   29849:	movsxd rax,DWORD PTR [rsp+0x80]
   29851:	mov    QWORD PTR [rsp+0xc0],rdi
   29859:	mov    rbx,rax
   2985c:	mov    QWORD PTR [rsp+0xd0],rax
   29864:	shl    rax,0x5
   29868:	mov    QWORD PTR [rsp+0x90],rax
   29870:	movzx  eax,BYTE PTR [rsp+0x8c]
   29878:	shl    rbx,0x4
   2987c:	mov    QWORD PTR [rsp+0x78],rdi
   29881:	xor    eax,0x1
   29884:	mov    QWORD PTR [rsp+0xd8],rbx
   2988c:	lea    rbx,[rip+0x8cf2d]        # b67c0 <mprRGB>
   29893:	mov    BYTE PTR [rsp+0xab],al
   2989a:	mov    rdi,QWORD PTR [rsp+0x18]
   2989f:	mov    eax,DWORD PTR [rsp+0x88]
   298a6:	mov    QWORD PTR [rsp+0x8],0x0
   298af:	mov    rsi,QWORD PTR [rsp+0x90]
   298b7:	mov    DWORD PTR [rsp],0x0
   298be:	add    eax,edi
   298c0:	mov    DWORD PTR [rsp+0x38],edi
   298c4:	mov    rdi,QWORD PTR [rsp+0x78]
   298c9:	mov    DWORD PTR [rsp+0x4],eax
   298cd:	add    eax,DWORD PTR [r14+0xac]
   298d4:	cdqe   
   298d6:	lea    rsi,[rsi+rdi*2]
   298da:	shl    rax,0x3
   298de:	mov    QWORD PTR [rsp+0x10],rsi
   298e3:	mov    QWORD PTR [rsp+0x50],rax
   298e8:	mov    r13d,DWORD PTR [rsp]
   298ec:	add    r13d,DWORD PTR [rsp+0x80]
   298f4:	mov    ebp,DWORD PTR [r14+0xa8]
   298fb:	mov    eax,r13d
   298fe:	mov    r8d,DWORD PTR [r14+0x11c14]
   29905:	sar    eax,0x2
   29908:	add    eax,DWORD PTR [rsp+0x4]
   2990c:	mov    DWORD PTR [rsp+0x84],eax
   29913:	add    ebp,r13d
   29916:	test   r8d,r8d
   29919:	jne    29ec8 <LumaResidualCoding8x8+0x798>
   2991f:	sub    rsp,0x8
   29923:	mov    edi,r13d
   29926:	mov    eax,DWORD PTR [rsp+0x44]
   2992a:	push   rax
   2992b:	mov    r9d,DWORD PTR [rsp+0x50]
   29930:	mov    r8d,DWORD PTR [rsp+0x5c]
   29935:	mov    ecx,DWORD PTR [rsp+0x58]
   29939:	mov    edx,DWORD PTR [rsp+0x54]
   2993d:	mov    esi,DWORD PTR [rsp+0x14]
   29941:	call   27e80 <LumaPrediction4x4>
   29946:	mov    r14,QWORD PTR [rip+0x5ec63]        # 885b0 <img>
   2994d:	pop    r11
   2994f:	pop    r12
   29951:	mov    eax,DWORD PTR [r14+0x11c14]
   29958:	test   eax,eax
   2995a:	jne    29c50 <LumaResidualCoding8x8+0x520>
   29960:	mov    rax,QWORD PTR [rip+0x8da61]        # b73c8 <imgY_org>
   29967:	test   r15d,r15d
   2996a:	je     29b58 <LumaResidualCoding8x8+0x428>
   29970:	mov    rdi,QWORD PTR [rsp+0x50]
   29975:	mov    rsi,QWORD PTR [rsp+0x10]
   2997a:	movsxd rbp,ebp
   2997d:	mov    rdx,QWORD PTR [rsp+0x8]
   29982:	add    rbp,rbp
   29985:	add    rdx,QWORD PTR [rsp+0x18]
   2998a:	lea    r9,[rax+rdi*1]
   2998e:	lea    r11,[r14+rsi*1]
   29992:	lea    r10,[r14+rdx*4]
   29996:	lea    r12,[rax+rdi*1+0x20]
   2999b:	lea    r13,[rbp+0x8]
   2999f:	mov    rdi,QWORD PTR [r9]
   299a2:	mov    rsi,r10
   299a5:	mov    rcx,r11
   299a8:	lea    rax,[rdi+rbp*1]
   299ac:	add    rdi,r13
   299af:	movzx  edx,WORD PTR [rax]
   299b2:	add    rax,0x2
   299b6:	add    rcx,0x20
   299ba:	add    rsi,0x40
   299be:	movzx  r8d,WORD PTR [rcx+0x3118]
   299c6:	sub    edx,r8d
   299c9:	mov    DWORD PTR [rsi+0x32f8],edx
   299cf:	cmp    rax,rdi
   299d2:	jne    299af <LumaResidualCoding8x8+0x27f>
   299d4:	add    r9,0x8
   299d8:	add    r11,0x2
   299dc:	add    r10,0x4
   299e0:	cmp    r9,r12
   299e3:	jne    2999f <LumaResidualCoding8x8+0x26f>
   299e5:	add    DWORD PTR [rsp],0x4
   299e9:	mov    eax,DWORD PTR [rsp]
   299ec:	add    QWORD PTR [rsp+0x8],0x40
   299f2:	sub    QWORD PTR [rsp+0x10],0xffffffffffffff80
   299f8:	cmp    eax,0x8
   299fb:	jne    298e8 <LumaResidualCoding8x8+0x1b8>
   29a01:	add    QWORD PTR [rsp+0x18],0x4
   29a07:	mov    rax,QWORD PTR [rsp+0x18]
   29a0c:	add    QWORD PTR [rsp+0x78],0x4
   29a12:	cmp    rax,0x8
   29a16:	jne    2989a <LumaResidualCoding8x8+0x16a>
   29a1c:	mov    edx,DWORD PTR [r14+0x11ac8]
   29a23:	test   r15d,r15d
   29a26:	je     29fc0 <LumaResidualCoding8x8+0x890>
   29a2c:	cmp    edx,0x1
   29a2f:	je     2a150 <LumaResidualCoding8x8+0xa20>
   29a35:	mov    r8d,DWORD PTR [rsp+0x8c]
   29a3d:	test   r8d,r8d
   29a40:	jne    2a150 <LumaResidualCoding8x8+0xa20>
   29a46:	cmp    DWORD PTR [r14+0x18],0x3
   29a4b:	je     29a71 <LumaResidualCoding8x8+0x341>
   29a4d:	mov    edi,DWORD PTR [rsp+0xc8]
   29a54:	lea    rsi,[rsp+0xe4]
   29a5c:	xor    edx,edx
   29a5e:	call   63790 <dct_luma8x8>
   29a63:	mov    r14,QWORD PTR [rip+0x5eb46]        # 885b0 <img>
   29a6a:	mov    DWORD PTR [rsp+0xa0],eax
   29a71:	mov    edi,DWORD PTR [r14+0x11c14]
   29a78:	test   edi,edi
   29a7a:	je     29acb <LumaResidualCoding8x8+0x39b>
   29a7c:	mov    rax,QWORD PTR [rsp+0xd8]
   29a84:	lea    rdx,[rip+0x8c415]        # b5ea0 <rec_resG>
   29a8b:	mov    rcx,r14
   29a8e:	lea    rdi,[r14+0x20]
   29a92:	add    rax,QWORD PTR [rsp+0xc0]
   29a9a:	lea    rsi,[rdx+rax*4]
   29a9e:	xchg   ax,ax
   29aa0:	xor    eax,eax
   29aa2:	nop    WORD PTR [rax+rax*1+0x0]
   29aa8:	mov    edx,DWORD PTR [rcx+rax*1+0x3338]
   29aaf:	mov    DWORD PTR [rsi+rax*1],edx
   29ab2:	add    rax,0x40
   29ab6:	cmp    rax,0x200
   29abc:	jne    29aa8 <LumaResidualCoding8x8+0x378>
   29abe:	add    rcx,0x4
   29ac2:	add    rsi,0x4
   29ac6:	cmp    rdi,rcx
   29ac9:	jne    29aa0 <LumaResidualCoding8x8+0x370>
   29acb:	mov    esi,DWORD PTR [rsp+0xa0]
   29ad2:	test   esi,esi
   29ad4:	je     29b0e <LumaResidualCoding8x8+0x3de>
   29ad6:	mov    eax,DWORD PTR [rsp+0xc8]
   29add:	mov    rbx,QWORD PTR [rsp+0xb8]
   29ae5:	lea    ecx,[rax+rax*1]
   29ae8:	sub    ecx,DWORD PTR [rsp+0xcc]
   29aef:	mov    eax,0x33
   29af4:	add    ecx,ecx
   29af6:	shl    eax,cl
   29af8:	cdqe   
   29afa:	or     QWORD PTR [rbx],rax
   29afd:	mov    rax,QWORD PTR [rsp+0xb0]
   29b05:	mov    ebx,DWORD PTR [rsp+0xac]
   29b0c:	or     DWORD PTR [rax],ebx
   29b0e:	cmp    DWORD PTR [r14+0x11ac8],0x1
   29b16:	mov    eax,DWORD PTR [rsp+0xe4]
   29b1d:	jne    29fdf <LumaResidualCoding8x8+0x8af>
   29b23:	nop    DWORD PTR [rax+rax*1+0x0]
   29b28:	mov    rbx,QWORD PTR [rsp+0xe8]
   29b30:	xor    rbx,QWORD PTR fs:0x28
   29b39:	jne    2a18c <LumaResidualCoding8x8+0xa5c>
   29b3f:	add    rsp,0xf8
   29b46:	pop    rbx
   29b47:	pop    rbp
   29b48:	pop    r12
   29b4a:	pop    r13
   29b4c:	pop    r14
   29b4e:	pop    r15
   29b50:	ret    
   29b51:	nop    DWORD PTR [rax+0x0]
   29b58:	mov    rcx,QWORD PTR [rsp+0x50]
   29b5d:	movsxd rbp,ebp
   29b60:	lea    r8,[r14+0x100]
   29b67:	lea    r11,[r14+0x110]
   29b6e:	add    rbp,rbp
   29b71:	lea    r9,[rax+rcx*1]
   29b75:	mov    rax,QWORD PTR [rsp+0x10]
   29b7a:	lea    r10,[r14+rax*1]
   29b7e:	mov    rsi,QWORD PTR [r9]
   29b81:	lea    rax,[r8-0x100]
   29b88:	mov    rcx,r10
   29b8b:	add    rsi,rbp
   29b8e:	movzx  edx,WORD PTR [rsi]
   29b91:	add    rax,0x40
   29b95:	add    rsi,0x2
   29b99:	add    rcx,0x20
   29b9d:	movzx  edi,WORD PTR [rcx+0x3118]
   29ba4:	sub    edx,edi
   29ba6:	mov    DWORD PTR [rax+0x32f8],edx
   29bac:	cmp    rax,r8
   29baf:	jne    29b8e <LumaResidualCoding8x8+0x45e>
   29bb1:	lea    r8,[rax+0x4]
   29bb5:	add    r9,0x8
   29bb9:	add    r10,0x2
   29bbd:	cmp    r8,r11
   29bc0:	jne    29b7e <LumaResidualCoding8x8+0x44e>
   29bc2:	cmp    DWORD PTR [r14+0x11ac8],0x1
   29bca:	je     299e5 <LumaResidualCoding8x8+0x2b5>
   29bd0:	cmp    BYTE PTR [rsp+0xab],0x0
   29bd8:	je     299e5 <LumaResidualCoding8x8+0x2b5>
   29bde:	cmp    DWORD PTR [r14+0x18],0x3
   29be3:	lea    rdx,[rsp+0xe4]
   29beb:	je     2a15c <LumaResidualCoding8x8+0xa2c>
   29bf1:	mov    esi,DWORD PTR [rsp+0x4]
   29bf5:	xor    ecx,ecx
   29bf7:	mov    edi,r13d
   29bfa:	call   76d0 <dct_luma>
   29bff:	mov    DWORD PTR [rsp+0xa0],eax
   29c06:	mov    r10d,DWORD PTR [rsp+0xa0]
   29c0e:	test   r10d,r10d
   29c11:	je     29c40 <LumaResidualCoding8x8+0x510>
   29c13:	movzx  ecx,BYTE PTR [rsp+0x84]
   29c1b:	mov    eax,0x1
   29c20:	shl    eax,cl
   29c22:	mov    rcx,QWORD PTR [rsp+0xb8]
   29c2a:	cdqe   
   29c2c:	or     QWORD PTR [rcx],rax
   29c2f:	mov    rax,QWORD PTR [rsp+0xb0]
   29c37:	mov    ecx,DWORD PTR [rsp+0xac]
   29c3e:	or     DWORD PTR [rax],ecx
   29c40:	mov    r14,QWORD PTR [rip+0x5e969]        # 885b0 <img>
   29c47:	jmp    299e5 <LumaResidualCoding8x8+0x2b5>
   29c4c:	nop    DWORD PTR [rax+0x0]
   29c50:	mov    rax,QWORD PTR [rsp+0x10]
   29c55:	lea    rsi,[rax+rax*1]
   29c59:	lea    r8,[r14+rax*1+0x88]
   29c61:	mov    QWORD PTR [rsp+0x98],rsi
   29c69:	lea    rdi,[rbx+rsi*1]
   29c6d:	lea    rsi,[r14+rax*1+0x80]
   29c75:	lea    rax,[rsi-0x80]
   29c79:	mov    rdx,rdi
   29c7c:	movzx  ecx,WORD PTR [rax+0x3138]
   29c83:	add    rax,0x20
   29c87:	add    rdx,0x40
   29c8b:	mov    DWORD PTR [rdx-0x40],ecx
   29c8e:	cmp    rax,rsi
   29c91:	jne    29c7c <LumaResidualCoding8x8+0x54c>
   29c93:	lea    rsi,[rax+0x2]
   29c97:	add    rdi,0x4
   29c9b:	cmp    r8,rsi
   29c9e:	jne    29c75 <LumaResidualCoding8x8+0x545>
   29ca0:	mov    rdi,QWORD PTR [rsp+0x50]
   29ca5:	movsxd rbp,ebp
   29ca8:	mov    QWORD PTR [rsp+0x30],r14
   29cad:	xor    r8d,r8d
   29cb0:	mov    rax,QWORD PTR [rip+0x88e19]        # b2ad0 <imgUV_org>
   29cb7:	mov    DWORD PTR [rsp+0xa4],r13d
   29cbf:	lea    r12,[rip+0x76c9a]        # a0960 <resTrans_B>
   29cc6:	mov    rsi,QWORD PTR [rax]
   29cc9:	add    rsi,rdi
   29ccc:	mov    QWORD PTR [rsp+0x68],rsi
   29cd1:	mov    rsi,QWORD PTR [rip+0x8d6f0]        # b73c8 <imgY_org>
   29cd8:	add    rsi,rdi
   29cdb:	add    rdi,QWORD PTR [rax+0x8]
   29cdf:	lea    rax,[rbp+rbp*1+0x0]
   29ce4:	mov    QWORD PTR [rsp+0x70],rax
   29ce9:	mov    rax,QWORD PTR [rsp+0x98]
   29cf1:	lea    rbp,[rip+0x8c5e8]        # b62e0 <resTrans_G>
   29cf8:	mov    QWORD PTR [rsp+0x60],rsi
   29cfd:	mov    QWORD PTR [rsp+0x58],rdi
   29d02:	mov    QWORD PTR [rsp+0x20],rax
   29d07:	mov    rdi,QWORD PTR [rsp+0x68]
   29d0c:	mov    rax,QWORD PTR [rsp+0x70]
   29d11:	mov    QWORD PTR [rsp+0x28],r8
   29d16:	xor    esi,esi
   29d18:	mov    rcx,QWORD PTR [rsp+0x20]
   29d1d:	mov    r11,QWORD PTR [rdi+r8*8]
   29d21:	mov    rdi,QWORD PTR [rsp+0x60]
   29d26:	mov    r10,QWORD PTR [rdi+r8*8]
   29d2a:	mov    rdi,QWORD PTR [rsp+0x58]
   29d2f:	add    r11,rax
   29d32:	add    r10,rax
   29d35:	add    rax,QWORD PTR [rdi+r8*8]
   29d39:	mov    rdi,QWORD PTR [rsp+0x30]
   29d3e:	mov    r9,rax
   29d41:	mov    eax,DWORD PTR [rsp+0x38]
   29d45:	lea    r13,[rdi+r8*4]
   29d49:	add    eax,r8d
   29d4c:	add    rax,QWORD PTR [rsp+0x8]
   29d51:	lea    r14,[rdi+rax*4]
   29d55:	lea    rdi,[rip+0x8ce64]        # b6bc0 <mprRGB+0x400>
   29d5c:	movzx  eax,WORD PTR [r11+rsi*1]
   29d61:	movzx  edx,WORD PTR [r10+rsi*1]
   29d66:	lea    r8,[rip+0x8d253]        # b6fc0 <mprRGB+0x800>
   29d6d:	sub    eax,DWORD PTR [rdi+rcx*1]
   29d70:	sub    edx,DWORD PTR [rbx+rcx*1]
   29d73:	mov    edi,eax
   29d75:	movzx  eax,WORD PTR [r9+rsi*1]
   29d7a:	sub    eax,DWORD PTR [r8+rcx*1]
   29d7e:	lea    r8,[rip+0x88d5b]        # b2ae0 <resTrans_R>
   29d85:	sub    eax,edi
   29d87:	mov    DWORD PTR [r8+rcx*1],eax
   29d8b:	sar    eax,1
   29d8d:	add    eax,edi
   29d8f:	sub    edx,eax
   29d91:	mov    DWORD PTR [r12+rcx*1],edx
   29d95:	sar    edx,1
   29d97:	add    eax,edx
   29d99:	mov    rdx,rsi
   29d9c:	mov    DWORD PTR [rbp+rcx*1+0x0],eax
   29da0:	shl    rdx,0x5
   29da4:	test   r15d,r15d
   29da7:	jne    29eb8 <LumaResidualCoding8x8+0x788>
   29dad:	mov    DWORD PTR [r13+rdx*1+0x3338],eax
   29db5:	add    rsi,0x2
   29db9:	add    rcx,0x40
   29dbd:	cmp    rsi,0x8
   29dc1:	jne    29d55 <LumaResidualCoding8x8+0x625>
   29dc3:	mov    r8,QWORD PTR [rsp+0x28]
   29dc8:	add    QWORD PTR [rsp+0x20],0x4
   29dce:	add    r8,0x1
   29dd2:	cmp    r8,0x4
   29dd6:	jne    29d07 <LumaResidualCoding8x8+0x5d7>
   29ddc:	mov    r14,QWORD PTR [rsp+0x30]
   29de1:	mov    r13d,DWORD PTR [rsp+0xa4]
   29de9:	cmp    DWORD PTR [r14+0x11ac8],0x1
   29df1:	je     299e5 <LumaResidualCoding8x8+0x2b5>
   29df7:	mov    eax,DWORD PTR [rsp+0x8c]
   29dfe:	or     eax,r15d
   29e01:	jne    299e5 <LumaResidualCoding8x8+0x2b5>
   29e07:	cmp    DWORD PTR [r14+0x18],0x3
   29e0c:	lea    rdx,[rsp+0xe4]
   29e14:	je     2a174 <LumaResidualCoding8x8+0xa44>
   29e1a:	mov    esi,DWORD PTR [rsp+0x4]
   29e1e:	xor    ecx,ecx
   29e20:	mov    edi,r13d
   29e23:	call   76d0 <dct_luma>
   29e28:	mov    DWORD PTR [rsp+0xa0],eax
   29e2f:	mov    r14,QWORD PTR [rip+0x5e77a]        # 885b0 <img>
   29e36:	lea    rdx,[rip+0x8c063]        # b5ea0 <rec_resG>
   29e3d:	add    rdx,QWORD PTR [rsp+0x98]
   29e45:	mov    rsi,r14
   29e48:	lea    rdi,[r14+0x10]
   29e4c:	xor    eax,eax
   29e4e:	mov    ecx,DWORD PTR [rsi+rax*1+0x3338]
   29e55:	mov    DWORD PTR [rdx+rax*1],ecx
   29e58:	add    rax,0x40
   29e5c:	cmp    rax,0x100
   29e62:	jne    29e4e <LumaResidualCoding8x8+0x71e>
   29e64:	add    rsi,0x4
   29e68:	add    rdx,0x4
   29e6c:	cmp    rdi,rsi
   29e6f:	jne    29e4c <LumaResidualCoding8x8+0x71c>
   29e71:	mov    r9d,DWORD PTR [rsp+0xa0]
   29e79:	test   r9d,r9d
   29e7c:	je     299e5 <LumaResidualCoding8x8+0x2b5>
   29e82:	movzx  ecx,BYTE PTR [rsp+0x84]
   29e8a:	mov    eax,0x1
   29e8f:	shl    eax,cl
   29e91:	mov    rcx,QWORD PTR [rsp+0xb8]
   29e99:	cdqe   
   29e9b:	or     QWORD PTR [rcx],rax
   29e9e:	mov    rax,QWORD PTR [rsp+0xb0]
   29ea6:	mov    ecx,DWORD PTR [rsp+0xac]
   29ead:	or     DWORD PTR [rax],ecx
   29eaf:	jmp    299e5 <LumaResidualCoding8x8+0x2b5>
   29eb4:	nop    DWORD PTR [rax+0x0]
   29eb8:	mov    DWORD PTR [r14+rdx*1+0x3338],eax
   29ec0:	jmp    29db5 <LumaResidualCoding8x8+0x685>
   29ec5:	nop    DWORD PTR [rax]
   29ec8:	mov    eax,DWORD PTR [rsp+0x3c]
   29ecc:	mov    esi,r13d
   29ecf:	xor    edi,edi
   29ed1:	push   rax
   29ed2:	mov    eax,DWORD PTR [rsp+0x48]
   29ed6:	push   rax
   29ed7:	mov    r8d,DWORD PTR [rsp+0x58]
   29edc:	mov    r9d,DWORD PTR [rsp+0x5c]
   29ee1:	mov    ecx,DWORD PTR [rsp+0x54]
   29ee5:	mov    edx,DWORD PTR [rsp+0x14]
   29ee9:	call   291b0 <ChromaPrediction4x4>
   29eee:	mov    rdi,QWORD PTR [rsp+0x20]
   29ef3:	pop    rcx
   29ef4:	mov    rax,QWORD PTR [rip+0x5e6b5]        # 885b0 <img>
   29efb:	lea    r12,[rbx+rdi*2]
   29eff:	lea    rsi,[rax+rdi*1+0x80]
   29f07:	lea    r8,[rax+rdi*1+0x88]
   29f0f:	pop    rdi
   29f10:	mov    rdi,r12
   29f13:	lea    rax,[rsi-0x80]
   29f17:	mov    rdx,rdi
   29f1a:	movzx  ecx,WORD PTR [rax+0x3138]
   29f21:	add    rax,0x20
   29f25:	add    rdx,0x40
   29f29:	mov    DWORD PTR [rdx+0x3c0],ecx
   29f2f:	cmp    rax,rsi
   29f32:	jne    29f1a <LumaResidualCoding8x8+0x7ea>
   29f34:	lea    rsi,[rax+0x2]
   29f38:	add    rdi,0x4
   29f3c:	cmp    rsi,r8
   29f3f:	jne    29f13 <LumaResidualCoding8x8+0x7e3>
   29f41:	mov    eax,DWORD PTR [rsp+0x3c]
   29f45:	mov    esi,r13d
   29f48:	mov    edi,0x1
   29f4d:	push   rax
   29f4e:	mov    eax,DWORD PTR [rsp+0x48]
   29f52:	push   rax
   29f53:	mov    ecx,DWORD PTR [rsp+0x54]
   29f57:	mov    r9d,DWORD PTR [rsp+0x5c]
   29f5c:	mov    r8d,DWORD PTR [rsp+0x58]
   29f61:	mov    edx,DWORD PTR [rsp+0x14]
   29f65:	call   291b0 <ChromaPrediction4x4>
   29f6a:	mov    rsi,QWORD PTR [rsp+0x20]
   29f6f:	mov    rax,QWORD PTR [rip+0x5e63a]        # 885b0 <img>
   29f76:	lea    rcx,[rax+rsi*1+0x80]
   29f7e:	lea    rdi,[rax+rsi*1+0x88]
   29f86:	pop    rax
   29f87:	pop    rdx
   29f88:	lea    rax,[rcx-0x80]
   29f8c:	mov    rdx,r12
   29f8f:	movzx  esi,WORD PTR [rax+0x3138]
   29f96:	add    rax,0x20
   29f9a:	add    rdx,0x40
   29f9e:	mov    DWORD PTR [rdx+0x7c0],esi
   29fa4:	cmp    rax,rcx
   29fa7:	jne    29f8f <LumaResidualCoding8x8+0x85f>
   29fa9:	add    rcx,0x2
   29fad:	add    r12,0x4
   29fb1:	cmp    rcx,rdi
   29fb4:	jne    29f88 <LumaResidualCoding8x8+0x858>
   29fb6:	jmp    2991f <LumaResidualCoding8x8+0x1ef>
   29fbb:	nop    DWORD PTR [rax+rax*1+0x0]
   29fc0:	mov    eax,DWORD PTR [rsp+0xe4]
   29fc7:	cmp    edx,0x1
   29fca:	je     29b28 <LumaResidualCoding8x8+0x3f8>
   29fd0:	mov    ecx,DWORD PTR [rsp+0x8c]
   29fd7:	test   ecx,ecx
   29fd9:	jne    29b28 <LumaResidualCoding8x8+0x3f8>
   29fdf:	cmp    eax,0x4
   29fe2:	jg     29b28 <LumaResidualCoding8x8+0x3f8>
   29fe8:	mov    edx,DWORD PTR [r14+0x11bdc]
   29fef:	add    edx,DWORD PTR [r14+0x28]
   29ff3:	jne    2a004 <LumaResidualCoding8x8+0x8d4>
   29ff5:	mov    edx,DWORD PTR [r14+0x11c00]
   29ffc:	test   edx,edx
   29ffe:	jne    29b28 <LumaResidualCoding8x8+0x3f8>
   2a004:	mov    ecx,DWORD PTR [rsp+0xc8]
   2a00b:	mov    rbx,QWORD PTR [rsp+0xb0]
   2a013:	mov    eax,0x3f
   2a018:	mov    DWORD PTR [rsp+0xe4],0x0
   2a023:	sub    eax,DWORD PTR [rsp+0xac]
   2a02a:	mov    r10,QWORD PTR [rsp+0xd0]
   2a032:	add    ecx,ecx
   2a034:	sub    ecx,DWORD PTR [rsp+0xcc]
   2a03b:	and    DWORD PTR [rbx],eax
   2a03d:	mov    eax,0x33
   2a042:	add    ecx,ecx
   2a044:	mov    rbx,QWORD PTR [rsp+0xb8]
   2a04c:	shl    r10,0x6
   2a050:	mov    r9d,DWORD PTR [rsp+0x80]
   2a058:	shl    eax,cl
   2a05a:	mov    r12,QWORD PTR [rsp+0xc0]
   2a062:	mov    edi,DWORD PTR [r14+0x11c14]
   2a069:	not    eax
   2a06b:	mov    r11,QWORD PTR [rip+0x60936]        # 8a9a8 <enc_picture>
   2a072:	lea    ebp,[r9+0x8]
   2a076:	cdqe   
   2a078:	and    QWORD PTR [rbx],rax
   2a07b:	mov    rbx,QWORD PTR [rsp+0x90]
   2a083:	lea    rsi,[r12+0x8]
   2a088:	lea    rax,[rip+0x8be11]        # b5ea0 <rec_resG>
   2a08f:	add    rbx,r14
   2a092:	add    r10,rax
   2a095:	nop    DWORD PTR [rax]
   2a098:	mov    rax,r12
   2a09b:	jmp    2a0dc <LumaResidualCoding8x8+0x9ac>
   2a09d:	nop    DWORD PTR [rax]
   2a0a0:	mov    ecx,DWORD PTR [r14+0x9c]
   2a0a7:	mov    r13,QWORD PTR [r11+0x1918]
   2a0ae:	movzx  r8d,WORD PTR [rbx+rax*2+0x3138]
   2a0b7:	mov    edx,DWORD PTR [r14+0x98]
   2a0be:	add    ecx,eax
   2a0c0:	add    rax,0x1
   2a0c4:	movsxd rcx,ecx
   2a0c7:	add    edx,r9d
   2a0ca:	mov    rcx,QWORD PTR [r13+rcx*8+0x0]
   2a0cf:	movsxd rdx,edx
   2a0d2:	mov    WORD PTR [rcx+rdx*2],r8w
   2a0d7:	cmp    rax,rsi
   2a0da:	je     2a0f1 <LumaResidualCoding8x8+0x9c1>
   2a0dc:	test   edi,edi
   2a0de:	je     2a0a0 <LumaResidualCoding8x8+0x970>
   2a0e0:	mov    DWORD PTR [r10+rax*4],0x0
   2a0e8:	add    rax,0x1
   2a0ec:	cmp    rax,rsi
   2a0ef:	jne    2a0dc <LumaResidualCoding8x8+0x9ac>
   2a0f1:	add    r9d,0x1
   2a0f5:	add    rbx,0x20
   2a0f9:	add    r10,0x40
   2a0fd:	cmp    r9d,ebp
   2a100:	jne    2a098 <LumaResidualCoding8x8+0x968>
   2a102:	cmp    DWORD PTR [r14+0x18],0x3
   2a107:	je     2a110 <LumaResidualCoding8x8+0x9e0>
   2a109:	xor    eax,eax
   2a10b:	jmp    29b28 <LumaResidualCoding8x8+0x3f8>
   2a110:	mov    r15d,DWORD PTR [rsp+0x88]
   2a118:	mov    ebx,DWORD PTR [rsp+0x80]
   2a11f:	mov    esi,r15d
   2a122:	mov    edi,ebx
   2a124:	lea    r12d,[r15+0x4]
   2a128:	call   c630 <copyblock_sp>
   2a12d:	mov    edi,ebx
   2a12f:	mov    esi,r12d
   2a132:	add    ebx,0x4
   2a135:	call   c630 <copyblock_sp>
   2a13a:	mov    esi,r15d
   2a13d:	mov    edi,ebx
   2a13f:	call   c630 <copyblock_sp>
   2a144:	mov    esi,r12d
   2a147:	mov    edi,ebx
   2a149:	call   c630 <copyblock_sp>
   2a14e:	xchg   ax,ax
   2a150:	mov    eax,DWORD PTR [rsp+0xe4]
   2a157:	jmp    29b28 <LumaResidualCoding8x8+0x3f8>
   2a15c:	mov    esi,DWORD PTR [rsp+0x4]
   2a160:	mov    edi,r13d
   2a163:	call   a950 <dct_luma_sp>
   2a168:	mov    DWORD PTR [rsp+0xa0],eax
   2a16f:	jmp    29c06 <LumaResidualCoding8x8+0x4d6>
   2a174:	mov    esi,DWORD PTR [rsp+0x4]
   2a178:	mov    edi,r13d
   2a17b:	call   a950 <dct_luma_sp>
   2a180:	mov    DWORD PTR [rsp+0xa0],eax
   2a187:	jmp    29e2f <LumaResidualCoding8x8+0x6ff>
   2a18c:	call   4390 <__stack_chk_fail@plt>
   2a191:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2a19c:	nop    DWORD PTR [rax+0x0]

000000000002a1a0 <LumaResidualCoding>:
   2a1a0:	endbr64 
   2a1a4:	push   r15
   2a1a6:	push   r14
   2a1a8:	push   r13
   2a1aa:	push   r12
   2a1ac:	push   rbp
   2a1ad:	xor    ebp,ebp
   2a1af:	push   rbx
   2a1b0:	xor    ebx,ebx
   2a1b2:	sub    rsp,0x48
   2a1b6:	mov    rdx,QWORD PTR [rip+0x5e3f3]        # 885b0 <img>
   2a1bd:	mov    rax,QWORD PTR fs:0x28
   2a1c6:	mov    QWORD PTR [rsp+0x38],rax
   2a1cb:	xor    eax,eax
   2a1cd:	lea    r13,[rsp+0x2e]
   2a1d2:	lea    r12,[rsp+0x2c]
   2a1d7:	movsxd rax,DWORD PTR [rdx+0xc]
   2a1db:	imul   rax,rax,0x278
   2a1e2:	add    rax,QWORD PTR [rdx+0x3758]
   2a1e9:	mov    QWORD PTR [rsp+0x18],rax
   2a1ee:	lea    r15,[rax+0x1d0]
   2a1f5:	lea    r14,[rax+0x1cc]
   2a1fc:	mov    DWORD PTR [rax+0x1cc],0x0
   2a206:	mov    QWORD PTR [rax+0x1d0],0x0
   2a211:	lea    rax,[rsp+0x34]
   2a216:	mov    QWORD PTR [rsp+0x10],rax
   2a21b:	lea    rax,[rsp+0x30]
   2a220:	mov    QWORD PTR [rsp+0x8],rax
   2a225:	lea    rax,[rsp+0x2a]
   2a22a:	mov    QWORD PTR [rsp],rax
   2a22e:	mov    rcx,QWORD PTR [rsp+0x10]
   2a233:	mov    rdx,QWORD PTR [rsp+0x8]
   2a238:	mov    edi,ebp
   2a23a:	mov    r9,r13
   2a23d:	mov    rsi,QWORD PTR [rsp]
   2a241:	mov    r8,r12
   2a244:	call   28930 <SetModesAndRefframe>
   2a249:	movsx  eax,WORD PTR [rsp+0x2e]
   2a24e:	mov    edx,ebp
   2a250:	mov    rsi,r15
   2a253:	movsx  ecx,WORD PTR [rsp+0x2a]
   2a258:	mov    rdi,r14
   2a25b:	add    ebp,0x1
   2a25e:	push   rax
   2a25f:	movsx  eax,WORD PTR [rsp+0x34]
   2a264:	push   rax
   2a265:	mov    r9d,DWORD PTR [rsp+0x44]
   2a26a:	mov    r8d,DWORD PTR [rsp+0x40]
   2a26f:	call   29730 <LumaResidualCoding8x8>
   2a274:	pop    rdx
   2a275:	pop    rcx
   2a276:	add    ebx,eax
   2a278:	cmp    ebp,0x4
   2a27b:	jne    2a22e <LumaResidualCoding+0x8e>
   2a27d:	cmp    ebx,0x5
   2a280:	jg     2a340 <LumaResidualCoding+0x1a0>
   2a286:	mov    rsi,QWORD PTR [rip+0x5e323]        # 885b0 <img>
   2a28d:	mov    eax,DWORD PTR [rsi+0x11bdc]
   2a293:	add    eax,DWORD PTR [rsi+0x28]
   2a296:	je     2a35f <LumaResidualCoding+0x1bf>
   2a29c:	mov    rax,QWORD PTR [rsp+0x18]
   2a2a1:	mov    edi,DWORD PTR [rsi+0x11c14]
   2a2a7:	mov    rbx,rsi
   2a2aa:	xor    r10d,r10d
   2a2ad:	mov    rbp,QWORD PTR [rip+0x606f4]        # 8a9a8 <enc_picture>
   2a2b4:	lea    r11,[rip+0x8bbe5]        # b5ea0 <rec_resG>
   2a2bb:	and    DWORD PTR [rax+0x1cc],0xfffff0
   2a2c5:	and    QWORD PTR [rax+0x1d0],0xff0000
   2a2d0:	xor    eax,eax
   2a2d2:	jmp    2a312 <LumaResidualCoding+0x172>
   2a2d4:	nop    DWORD PTR [rax+0x0]
   2a2d8:	mov    ecx,DWORD PTR [rsi+0x9c]
   2a2de:	mov    r9,QWORD PTR [rbp+0x1918]
   2a2e5:	movzx  r8d,WORD PTR [rbx+rax*2+0x3138]
   2a2ee:	mov    edx,DWORD PTR [rsi+0x98]
   2a2f4:	add    ecx,eax
   2a2f6:	add    rax,0x1
   2a2fa:	movsxd rcx,ecx
   2a2fd:	add    edx,r10d
   2a300:	mov    rcx,QWORD PTR [r9+rcx*8]
   2a304:	movsxd rdx,edx
   2a307:	mov    WORD PTR [rcx+rdx*2],r8w
   2a30c:	cmp    rax,0x10
   2a310:	je     2a328 <LumaResidualCoding+0x188>
   2a312:	test   edi,edi
   2a314:	je     2a2d8 <LumaResidualCoding+0x138>
   2a316:	mov    DWORD PTR [r11+rax*4],0x0
   2a31e:	add    rax,0x1
   2a322:	cmp    rax,0x10
   2a326:	jne    2a312 <LumaResidualCoding+0x172>
   2a328:	add    r10d,0x1
   2a32c:	add    rbx,0x20
   2a330:	add    r11,0x40
   2a334:	cmp    r10d,0x10
   2a338:	jne    2a2d0 <LumaResidualCoding+0x130>
   2a33a:	cmp    DWORD PTR [rsi+0x18],0x3
   2a33e:	je     2a36e <LumaResidualCoding+0x1ce>
   2a340:	mov    rax,QWORD PTR [rsp+0x38]
   2a345:	xor    rax,QWORD PTR fs:0x28
   2a34e:	jne    2a3ba <LumaResidualCoding+0x21a>
   2a350:	add    rsp,0x48
   2a354:	pop    rbx
   2a355:	pop    rbp
   2a356:	pop    r12
   2a358:	pop    r13
   2a35a:	pop    r14
   2a35c:	pop    r15
   2a35e:	ret    
   2a35f:	mov    eax,DWORD PTR [rsi+0x11c00]
   2a365:	test   eax,eax
   2a367:	jne    2a340 <LumaResidualCoding+0x1a0>
   2a369:	jmp    2a29c <LumaResidualCoding+0xfc>
   2a36e:	xor    r12d,r12d
   2a371:	lea    ebx,[r12+r12*1]
   2a375:	mov    r13d,r12d
   2a378:	add    r12d,0x4
   2a37c:	and    ebx,0x8
   2a37f:	and    r13d,0x8
   2a383:	mov    esi,r13d
   2a386:	lea    r14d,[r13+0x4]
   2a38a:	lea    ebp,[rbx+0x4]
   2a38d:	mov    edi,ebx
   2a38f:	call   c630 <copyblock_sp>
   2a394:	mov    esi,r14d
   2a397:	mov    edi,ebx
   2a399:	call   c630 <copyblock_sp>
   2a39e:	mov    esi,r13d
   2a3a1:	mov    edi,ebp
   2a3a3:	call   c630 <copyblock_sp>
   2a3a8:	mov    esi,r14d
   2a3ab:	mov    edi,ebp
   2a3ad:	call   c630 <copyblock_sp>
   2a3b2:	cmp    r12d,0x10
   2a3b6:	jne    2a371 <LumaResidualCoding+0x1d1>
   2a3b8:	jmp    2a340 <LumaResidualCoding+0x1a0>
   2a3ba:	call   4390 <__stack_chk_fail@plt>
   2a3bf:	nop

000000000002a3c0 <ChromaResidualCoding>:
   2a3c0:	endbr64 
   2a3c4:	push   r15
   2a3c6:	push   r14
   2a3c8:	push   r13
   2a3ca:	push   r12
   2a3cc:	push   rbp
   2a3cd:	push   rbx
   2a3ce:	sub    rsp,0x128
   2a3d5:	mov    r9,QWORD PTR [rip+0x5e1d4]        # 885b0 <img>
   2a3dc:	mov    QWORD PTR [rsp+0x28],rdi
   2a3e1:	mov    rax,QWORD PTR fs:0x28
   2a3ea:	mov    QWORD PTR [rsp+0x118],rax
   2a3f2:	xor    eax,eax
   2a3f4:	movsxd rax,DWORD PTR [r9+0xc]
   2a3f8:	mov    DWORD PTR [rsp+0x30],0x0
   2a400:	imul   rax,rax,0x278
   2a407:	add    rax,QWORD PTR [r9+0x3758]
   2a40e:	mov    ecx,DWORD PTR [rax+0x48]
   2a411:	test   ecx,ecx
   2a413:	jne    2a42d <ChromaResidualCoding+0x6d>
   2a415:	mov    edx,DWORD PTR [r9+0x18]
   2a419:	test   edx,edx
   2a41b:	sete   al
   2a41e:	cmp    edx,0x3
   2a421:	sete   dl
   2a424:	or     eax,edx
   2a426:	movzx  eax,al
   2a429:	mov    DWORD PTR [rsp+0x30],eax
   2a42d:	mov    QWORD PTR [rsp+0x58],0x0
   2a436:	mov    eax,DWORD PTR [r9+0x11bfc]
   2a43d:	movabs rdx,0x100000000
   2a447:	mov    QWORD PTR [rsp+0x50],rdx
   2a44c:	sub    eax,0x1
   2a44f:	mov    QWORD PTR [rsp+0x90],rdx
   2a457:	mov    DWORD PTR [rsp+0x3c],eax
   2a45b:	movabs rax,0x300000002
   2a465:	mov    QWORD PTR [rsp+0x60],rax
   2a46a:	mov    QWORD PTR [rsp+0xb0],rax
   2a472:	mov    QWORD PTR [rsp+0xc0],rax
   2a47a:	movabs rax,0x100000001
   2a484:	mov    QWORD PTR [rsp+0xd8],rax
   2a48c:	mov    QWORD PTR [rsp+0xe8],rax
   2a494:	movabs rax,0x300000003
   2a49e:	mov    QWORD PTR [rsp+0xf8],rax
   2a4a6:	mov    QWORD PTR [rsp+0x108],rax
   2a4ae:	mov    rax,QWORD PTR [rsp+0x28]
   2a4b3:	mov    QWORD PTR [rsp+0xa0],rdx
   2a4bb:	movabs rdx,0x200000002
   2a4c5:	mov    QWORD PTR [rsp+0x68],0x0
   2a4ce:	mov    QWORD PTR [rsp+0x70],0x0
   2a4d7:	mov    QWORD PTR [rsp+0x78],0x0
   2a4e0:	mov    QWORD PTR [rsp+0x80],0x0
   2a4ec:	mov    QWORD PTR [rsp+0x88],0x0
   2a4f8:	mov    QWORD PTR [rsp+0x98],0x0
   2a504:	mov    QWORD PTR [rsp+0xa8],0x0
   2a510:	mov    QWORD PTR [rsp+0xb8],0x0
   2a51c:	mov    QWORD PTR [rsp+0xc8],0x0
   2a528:	mov    QWORD PTR [rsp+0xd0],0x0
   2a534:	mov    QWORD PTR [rsp+0xe0],0x0
   2a540:	mov    QWORD PTR [rsp+0xf0],rdx
   2a548:	mov    QWORD PTR [rsp+0x100],rdx
   2a550:	mov    DWORD PTR [rax],0x0
   2a556:	mov    QWORD PTR [rsp+0x20],0x0
   2a55f:	mov    esi,DWORD PTR [r9+0x11c08]
   2a566:	mov    r15d,DWORD PTR [rsp+0x20]
   2a56b:	xor    ebp,ebp
   2a56d:	test   esi,esi
   2a56f:	jle    2a998 <ChromaResidualCoding+0x5d8>
   2a575:	lea    rax,[rsp+0x46]
   2a57a:	mov    QWORD PTR [rsp+0x8],rax
   2a57f:	lea    rax,[rsp+0x44]
   2a584:	mov    QWORD PTR [rsp+0x10],rax
   2a589:	movsxd rax,DWORD PTR [rsp+0x3c]
   2a58e:	shl    rax,0x2
   2a592:	mov    QWORD PTR [rsp+0x18],rax
   2a597:	nop    WORD PTR [rax+rax*1+0x0]
   2a5a0:	mov    eax,DWORD PTR [r9+0x11c04]
   2a5a7:	test   eax,eax
   2a5a9:	jle    2a63e <ChromaResidualCoding+0x27e>
   2a5af:	mov    eax,ebp
   2a5b1:	lea    r13,[rsp+0x4c]
   2a5b6:	lea    r12,[rsp+0x48]
   2a5bb:	xor    r14d,r14d
   2a5be:	sar    eax,0x2
   2a5c1:	lea    rbx,[rsp+0x42]
   2a5c6:	cdqe   
   2a5c8:	add    rax,QWORD PTR [rsp+0x18]
   2a5cd:	shl    rax,0x2
   2a5d1:	mov    QWORD PTR [rsp],rax
   2a5d5:	nop    DWORD PTR [rax]
   2a5d8:	mov    eax,r14d
   2a5db:	mov    r9,QWORD PTR [rsp+0x8]
   2a5e0:	mov    r8,QWORD PTR [rsp+0x10]
   2a5e5:	mov    rcx,r13
   2a5e8:	sar    eax,0x2
   2a5eb:	mov    rdx,r12
   2a5ee:	mov    rsi,rbx
   2a5f1:	cdqe   
   2a5f3:	add    rax,QWORD PTR [rsp]
   2a5f7:	mov    edi,DWORD PTR [rsp+rax*4+0x50]
   2a5fb:	call   28930 <SetModesAndRefframe>
   2a600:	movsx  eax,WORD PTR [rsp+0x46]
   2a605:	mov    edx,ebp
   2a607:	mov    esi,r14d
   2a60a:	movsx  ecx,WORD PTR [rsp+0x42]
   2a60f:	mov    edi,r15d
   2a612:	add    r14d,0x4
   2a616:	push   rax
   2a617:	movsx  eax,WORD PTR [rsp+0x4c]
   2a61c:	push   rax
   2a61d:	mov    r9d,DWORD PTR [rsp+0x5c]
   2a622:	mov    r8d,DWORD PTR [rsp+0x58]
   2a627:	call   291b0 <ChromaPrediction4x4>
   2a62c:	mov    r9,QWORD PTR [rip+0x5df7d]        # 885b0 <img>
   2a633:	pop    rax
   2a634:	pop    rdx
   2a635:	cmp    DWORD PTR [r9+0x11c04],r14d
   2a63c:	jg     2a5d8 <ChromaResidualCoding+0x218>
   2a63e:	mov    esi,DWORD PTR [r9+0x11c08]
   2a645:	add    ebp,0x4
   2a648:	cmp    esi,ebp
   2a64a:	jg     2a5a0 <ChromaResidualCoding+0x1e0>
   2a650:	mov    eax,DWORD PTR [r9+0x11ac8]
   2a657:	test   eax,eax
   2a659:	jne    2aab2 <ChromaResidualCoding+0x6f2>
   2a65f:	mov    r11d,DWORD PTR [rsp+0x30]
   2a664:	mov    r14d,DWORD PTR [r9+0x18]
   2a668:	test   r11d,r11d
   2a66b:	jne    2a9b7 <ChromaResidualCoding+0x5f7>
   2a671:	test   esi,esi
   2a673:	jle    2a771 <ChromaResidualCoding+0x3b1>
   2a679:	mov    r13,QWORD PTR [rsp+0x20]
   2a67e:	mov    DWORD PTR [rsp+0x8],r15d
   2a683:	mov    rbp,r9
   2a686:	xor    r11d,r11d
   2a689:	mov    rax,QWORD PTR [rip+0x88440]        # b2ad0 <imgUV_org>
   2a690:	mov    edi,DWORD PTR [r9+0x11c04]
   2a697:	lea    r12d,[rsi-0x1]
   2a69b:	lea    rbx,[rax+r13*8]
   2a69f:	nop
   2a6a0:	mov    r10d,r11d
   2a6a3:	test   edi,edi
   2a6a5:	jle    2a73e <ChromaResidualCoding+0x37e>
   2a6ab:	mov    QWORD PTR [rsp],r11
   2a6af:	mov    r8d,DWORD PTR [r9+0x11c14]
   2a6b6:	mov    rcx,rbp
   2a6b9:	xor    eax,eax
   2a6bb:	lea    rdx,[r11*4+0x0]
   2a6c3:	jmp    2a70f <ChromaResidualCoding+0x34f>
   2a6c5:	nop    DWORD PTR [rax]
   2a6c8:	mov    r15d,DWORD PTR [r9+0xb4]
   2a6cf:	mov    esi,DWORD PTR [r9+0xb0]
   2a6d6:	mov    r11,QWORD PTR [rbx]
   2a6d9:	add    r15d,r10d
   2a6dc:	add    esi,eax
   2a6de:	movsxd r15,r15d
   2a6e1:	movsxd rsi,esi
   2a6e4:	mov    r15,QWORD PTR [r11+r15*8]
   2a6e8:	movzx  esi,WORD PTR [r15+rsi*2]
   2a6ed:	movzx  r15d,WORD PTR [rcx+0x3138]
   2a6f5:	sub    esi,r15d
   2a6f8:	mov    DWORD PTR [r9+rdx*1+0x3338],esi
   2a700:	add    eax,0x1
   2a703:	add    rcx,0x20
   2a707:	add    rdx,0x40
   2a70b:	cmp    edi,eax
   2a70d:	je     2a73a <ChromaResidualCoding+0x37a>
   2a70f:	test   r8d,r8d
   2a712:	je     2a6c8 <ChromaResidualCoding+0x308>
   2a714:	test   r13,r13
   2a717:	je     2a758 <ChromaResidualCoding+0x398>
   2a719:	lea    rsi,[rip+0x76240]        # a0960 <resTrans_B>
   2a720:	add    eax,0x1
   2a723:	add    rcx,0x20
   2a727:	mov    esi,DWORD PTR [rsi+rdx*1]
   2a72a:	mov    DWORD PTR [r9+rdx*1+0x3338],esi
   2a732:	add    rdx,0x40
   2a736:	cmp    edi,eax
   2a738:	jne    2a70f <ChromaResidualCoding+0x34f>
   2a73a:	mov    r11,QWORD PTR [rsp]
   2a73e:	lea    rax,[r11+0x1]
   2a742:	add    rbp,0x2
   2a746:	cmp    r12,r11
   2a749:	je     2a76c <ChromaResidualCoding+0x3ac>
   2a74b:	mov    r11,rax
   2a74e:	jmp    2a6a0 <ChromaResidualCoding+0x2e0>
   2a753:	nop    DWORD PTR [rax+rax*1+0x0]
   2a758:	lea    rsi,[rip+0x88381]        # b2ae0 <resTrans_R>
   2a75f:	mov    esi,DWORD PTR [rsi+rdx*1]
   2a762:	mov    DWORD PTR [r9+rdx*1+0x3338],esi
   2a76a:	jmp    2a700 <ChromaResidualCoding+0x340>
   2a76c:	mov    r15d,DWORD PTR [rsp+0x8]
   2a771:	mov    rax,QWORD PTR [rsp+0x28]
   2a776:	mov    esi,DWORD PTR [rax]
   2a778:	cmp    r14d,0x3
   2a77c:	jne    2a7a4 <ChromaResidualCoding+0x3e4>
   2a77e:	movsxd rax,DWORD PTR [r9+0xc]
   2a782:	imul   rax,rax,0x278
   2a789:	add    rax,QWORD PTR [r9+0x3758]
   2a790:	mov    eax,DWORD PTR [rax+0x48]
   2a793:	lea    edx,[rax-0x9]
   2a796:	cmp    edx,0x1
   2a799:	jbe    2a7a4 <ChromaResidualCoding+0x3e4>
   2a79b:	cmp    eax,0xd
   2a79e:	jne    2ac73 <ChromaResidualCoding+0x8b3>
   2a7a4:	mov    edi,r15d
   2a7a7:	call   7ea0 <dct_chroma>
   2a7ac:	mov    rbx,QWORD PTR [rsp+0x28]
   2a7b1:	mov    DWORD PTR [rbx],eax
   2a7b3:	mov    r9,QWORD PTR [rip+0x5ddf6]        # 885b0 <img>
   2a7ba:	mov    esi,DWORD PTR [r9+0x11c14]
   2a7c1:	test   esi,esi
   2a7c3:	jne    2abdd <ChromaResidualCoding+0x81d>
   2a7c9:	cmp    QWORD PTR [rsp+0x20],0x1
   2a7cf:	je     2a7df <ChromaResidualCoding+0x41f>
   2a7d1:	mov    QWORD PTR [rsp+0x20],0x1
   2a7da:	jmp    2a55f <ChromaResidualCoding+0x19f>
   2a7df:	mov    rbx,QWORD PTR [rsp+0x28]
   2a7e4:	movsxd rax,DWORD PTR [r9+0xc]
   2a7e8:	mov    ecx,DWORD PTR [r9+0x11c14]
   2a7ef:	mov    edx,DWORD PTR [rbx]
   2a7f1:	imul   rax,rax,0x278
   2a7f8:	add    rax,QWORD PTR [r9+0x3758]
   2a7ff:	shl    edx,0x4
   2a802:	add    DWORD PTR [rax+0x1cc],edx
   2a808:	test   ecx,ecx
   2a80a:	je     2a96f <ChromaResidualCoding+0x5af>
   2a810:	mov    rcx,QWORD PTR [rip+0x60191]        # 8a9a8 <enc_picture>
   2a817:	movsxd rax,DWORD PTR [r9+0x9c]
   2a81e:	mov    QWORD PTR [rsp+0x10],0x0
   2a827:	lea    r12,[rip+0x8b672]        # b5ea0 <rec_resG>
   2a82e:	mov    r10d,DWORD PTR [r9+0x11bf0]
   2a835:	mov    ebp,DWORD PTR [r9+0x11bec]
   2a83c:	lea    r14,[rip+0x75cfd]        # a0540 <rec_resB>
   2a843:	lea    r13,[rip+0x894d6]        # b3d20 <rec_resR>
   2a84a:	mov    rdx,QWORD PTR [rcx+0x1940]
   2a851:	shl    rax,0x3
   2a855:	mov    rbx,QWORD PTR [rdx]
   2a858:	add    rbx,rax
   2a85b:	mov    QWORD PTR [rsp+0x18],rbx
   2a860:	mov    rbx,QWORD PTR [rcx+0x1918]
   2a867:	add    rbx,rax
   2a86a:	add    rax,QWORD PTR [rdx+0x8]
   2a86e:	mov    QWORD PTR [rsp+0x20],rax
   2a873:	movsxd rax,DWORD PTR [r9+0x98]
   2a87a:	mov    QWORD PTR [rsp+0x28],rbx
   2a87f:	xor    ebx,ebx
   2a881:	add    rax,rax
   2a884:	mov    QWORD PTR [rsp+0x30],rax
   2a889:	nop    DWORD PTR [rax+0x0]
   2a890:	mov    rax,QWORD PTR [rsp+0x10]
   2a895:	mov    rcx,QWORD PTR [rsp+0x18]
   2a89a:	mov    r8,QWORD PTR [rsp+0x30]
   2a89f:	mov    r15,QWORD PTR [rcx+rax*2]
   2a8a3:	mov    rcx,QWORD PTR [rsp+0x28]
   2a8a8:	mov    rdi,QWORD PTR [rcx+rax*2]
   2a8ac:	mov    rcx,QWORD PTR [rsp+0x20]
   2a8b1:	mov    QWORD PTR [rsp],rdi
   2a8b5:	mov    rdi,QWORD PTR [rcx+rax*2]
   2a8b9:	lea    rcx,[rip+0x8bf00]        # b67c0 <mprRGB>
   2a8c0:	add    rcx,rax
   2a8c3:	mov    QWORD PTR [rsp+0x8],rdi
   2a8c8:	xor    edi,edi
   2a8ca:	nop    WORD PTR [rax+rax*1+0x0]
   2a8d0:	mov    edx,DWORD PTR [r14+rdi*1]
   2a8d4:	mov    r9d,DWORD PTR [r12+rdi*1]
   2a8d8:	mov    eax,edx
   2a8da:	sar    eax,1
   2a8dc:	sub    r9d,eax
   2a8df:	mov    eax,DWORD PTR [r13+rdi*1+0x0]
   2a8e4:	mov    r11d,r9d
   2a8e7:	mov    esi,eax
   2a8e9:	sar    esi,1
   2a8eb:	sub    r11d,esi
   2a8ee:	mov    esi,r11d
   2a8f1:	add    esi,DWORD PTR [rcx+0x400]
   2a8f7:	cmovs  esi,ebx
   2a8fa:	cmp    esi,r10d
   2a8fd:	cmovg  esi,r10d
   2a901:	add    edx,r9d
   2a904:	add    edx,DWORD PTR [rcx]
   2a906:	cmovs  edx,ebx
   2a909:	mov    WORD PTR [r15+r8*1],si
   2a90e:	mov    rsi,QWORD PTR [rsp]
   2a912:	cmp    edx,ebp
   2a914:	cmovg  edx,ebp
   2a917:	add    eax,r11d
   2a91a:	add    eax,DWORD PTR [rcx+0x800]
   2a920:	cmovs  eax,ebx
   2a923:	mov    WORD PTR [rsi+r8*1],dx
   2a928:	mov    rdx,QWORD PTR [rsp+0x8]
   2a92d:	cmp    eax,r10d
   2a930:	cmovg  eax,r10d
   2a934:	add    rdi,0x40
   2a938:	add    rcx,0x40
   2a93c:	mov    WORD PTR [rdx+r8*1],ax
   2a941:	add    r8,0x2
   2a945:	cmp    rdi,0x400
   2a94c:	jne    2a8d0 <ChromaResidualCoding+0x510>
   2a94e:	add    QWORD PTR [rsp+0x10],0x4
   2a954:	add    r12,0x4
   2a958:	add    r14,0x4
   2a95c:	add    r13,0x4
   2a960:	mov    rax,QWORD PTR [rsp+0x10]
   2a965:	cmp    rax,0x40
   2a969:	jne    2a890 <ChromaResidualCoding+0x4d0>
   2a96f:	mov    rax,QWORD PTR [rsp+0x118]
   2a977:	xor    rax,QWORD PTR fs:0x28
   2a980:	jne    2ace9 <ChromaResidualCoding+0x929>
   2a986:	add    rsp,0x128
   2a98d:	pop    rbx
   2a98e:	pop    rbp
   2a98f:	pop    r12
   2a991:	pop    r13
   2a993:	pop    r14
   2a995:	pop    r15
   2a997:	ret    
   2a998:	mov    edx,DWORD PTR [r9+0x11ac8]
   2a99f:	test   edx,edx
   2a9a1:	jne    2ab9a <ChromaResidualCoding+0x7da>
   2a9a7:	mov    eax,DWORD PTR [rsp+0x30]
   2a9ab:	mov    r14d,DWORD PTR [r9+0x18]
   2a9af:	test   eax,eax
   2a9b1:	je     2a771 <ChromaResidualCoding+0x3b1>
   2a9b7:	cmp    r14d,0x3
   2a9bb:	je     2ac87 <ChromaResidualCoding+0x8c7>
   2a9c1:	test   esi,esi
   2a9c3:	jle    2a7c9 <ChromaResidualCoding+0x409>
   2a9c9:	mov    eax,DWORD PTR [r9+0x11c04]
   2a9d0:	mov    DWORD PTR [rsp],esi
   2a9d3:	mov    rbp,r9
   2a9d6:	xor    ebx,ebx
   2a9d8:	mov    r11,QWORD PTR [rsp+0x20]
   2a9dd:	mov    r14,QWORD PTR [rip+0x5ffc4]        # 8a9a8 <enc_picture>
   2a9e4:	lea    r15,[rip+0x89335]        # b3d20 <rec_resR>
   2a9eb:	lea    r12,[rip+0x75b4e]        # a0540 <rec_resB>
   2a9f2:	mov    DWORD PTR [rsp+0x8],eax
   2a9f6:	lea    r8d,[rax-0x1]
   2a9fa:	lea    r13,[r11*8+0x0]
   2aa02:	nop    WORD PTR [rax+rax*1+0x0]
   2aa08:	mov    r10d,DWORD PTR [rsp+0x8]
   2aa0d:	test   r10d,r10d
   2aa10:	jle    2aa84 <ChromaResidualCoding+0x6c4>
   2aa12:	mov    esi,DWORD PTR [r9+0x11c14]
   2aa19:	xor    eax,eax
   2aa1b:	jmp    2aa63 <ChromaResidualCoding+0x6a3>
   2aa1d:	nop    DWORD PTR [rax]
   2aa20:	shl    rdx,0x5
   2aa24:	mov    ecx,DWORD PTR [r9+0xa4]
   2aa2b:	movzx  edi,WORD PTR [rbp+rdx*1+0x3138]
   2aa33:	mov    rdx,QWORD PTR [r14+0x1940]
   2aa3a:	add    ecx,ebx
   2aa3c:	mov    r10,QWORD PTR [rdx+r13*1]
   2aa40:	mov    edx,DWORD PTR [r9+0xa0]
   2aa47:	movsxd rcx,ecx
   2aa4a:	mov    rcx,QWORD PTR [r10+rcx*8]
   2aa4e:	add    edx,eax
   2aa50:	movsxd rdx,edx
   2aa53:	mov    WORD PTR [rcx+rdx*2],di
   2aa57:	lea    rdx,[rax+0x1]
   2aa5b:	cmp    r8,rax
   2aa5e:	je     2aa84 <ChromaResidualCoding+0x6c4>
   2aa60:	mov    rax,rdx
   2aa63:	mov    rdx,rax
   2aa66:	test   esi,esi
   2aa68:	je     2aa20 <ChromaResidualCoding+0x660>
   2aa6a:	shl    rdx,0x6
   2aa6e:	test   r11,r11
   2aa71:	je     2aaa8 <ChromaResidualCoding+0x6e8>
   2aa73:	mov    DWORD PTR [r12+rdx*1],0x0
   2aa7b:	lea    rdx,[rax+0x1]
   2aa7f:	cmp    r8,rax
   2aa82:	jne    2aa60 <ChromaResidualCoding+0x6a0>
   2aa84:	add    ebx,0x1
   2aa87:	add    rbp,0x2
   2aa8b:	add    r15,0x4
   2aa8f:	add    r12,0x4
   2aa93:	cmp    ebx,DWORD PTR [rsp]
   2aa96:	jne    2aa08 <ChromaResidualCoding+0x648>
   2aa9c:	jmp    2a7c9 <ChromaResidualCoding+0x409>
   2aaa1:	nop    DWORD PTR [rax+0x0]
   2aaa8:	mov    DWORD PTR [r15+rdx*1],0x0
   2aab0:	jmp    2aa57 <ChromaResidualCoding+0x697>
   2aab2:	test   esi,esi
   2aab4:	jle    2ab9a <ChromaResidualCoding+0x7da>
   2aaba:	mov    eax,DWORD PTR [r9+0x11c04]
   2aac1:	mov    DWORD PTR [rsp+0x8],esi
   2aac5:	mov    rbp,r9
   2aac8:	xor    ebx,ebx
   2aaca:	mov    r11,QWORD PTR [rsp+0x20]
   2aacf:	lea    rcx,[rip+0x8924a]        # b3d20 <rec_resR>
   2aad6:	mov    r13,QWORD PTR [rip+0x5fecb]        # 8a9a8 <enc_picture>
   2aadd:	mov    DWORD PTR [rsp+0x10],r15d
   2aae2:	mov    DWORD PTR [rsp],eax
   2aae5:	lea    r12,[rip+0x75a54]        # a0540 <rec_resB>
   2aaec:	lea    r8d,[rax-0x1]
   2aaf0:	mov    r15,rcx
   2aaf3:	lea    r14,[r11*8+0x0]
   2aafb:	nop    DWORD PTR [rax+rax*1+0x0]
   2ab00:	mov    eax,DWORD PTR [rsp]
   2ab03:	test   eax,eax
   2ab05:	jle    2ab7c <ChromaResidualCoding+0x7bc>
   2ab07:	mov    esi,DWORD PTR [r9+0x11c14]
   2ab0e:	xor    eax,eax
   2ab10:	jmp    2ab5b <ChromaResidualCoding+0x79b>
   2ab12:	nop    WORD PTR [rax+rax*1+0x0]
   2ab18:	shl    rdx,0x5
   2ab1c:	mov    ecx,DWORD PTR [r9+0xa4]
   2ab23:	movzx  edi,WORD PTR [rbp+rdx*1+0x3138]
   2ab2b:	mov    rdx,QWORD PTR [r13+0x1940]
   2ab32:	add    ecx,ebx
   2ab34:	mov    r10,QWORD PTR [rdx+r14*1]
   2ab38:	mov    edx,DWORD PTR [r9+0xa0]
   2ab3f:	movsxd rcx,ecx
   2ab42:	mov    rcx,QWORD PTR [r10+rcx*8]
   2ab46:	add    edx,eax
   2ab48:	movsxd rdx,edx
   2ab4b:	mov    WORD PTR [rcx+rdx*2],di
   2ab4f:	lea    rdx,[rax+0x1]
   2ab53:	cmp    r8,rax
   2ab56:	je     2ab7c <ChromaResidualCoding+0x7bc>
   2ab58:	mov    rax,rdx
   2ab5b:	mov    rdx,rax
   2ab5e:	test   esi,esi
   2ab60:	je     2ab18 <ChromaResidualCoding+0x758>
   2ab62:	shl    rdx,0x6
   2ab66:	test   r11,r11
   2ab69:	je     2abd0 <ChromaResidualCoding+0x810>
   2ab6b:	mov    DWORD PTR [r12+rdx*1],0x0
   2ab73:	lea    rdx,[rax+0x1]
   2ab77:	cmp    r8,rax
   2ab7a:	jne    2ab58 <ChromaResidualCoding+0x798>
   2ab7c:	add    ebx,0x1
   2ab7f:	add    rbp,0x2
   2ab83:	add    r15,0x4
   2ab87:	add    r12,0x4
   2ab8b:	cmp    DWORD PTR [rsp+0x8],ebx
   2ab8f:	jne    2ab00 <ChromaResidualCoding+0x740>
   2ab95:	mov    r15d,DWORD PTR [rsp+0x10]
   2ab9a:	mov    edi,DWORD PTR [rsp+0x30]
   2ab9e:	test   edi,edi
   2aba0:	je     2a7c9 <ChromaResidualCoding+0x409>
   2aba6:	cmp    DWORD PTR [r9+0x18],0x3
   2abab:	jne    2a7c9 <ChromaResidualCoding+0x409>
   2abb1:	mov    rbx,QWORD PTR [rsp+0x28]
   2abb6:	mov    edi,r15d
   2abb9:	mov    esi,DWORD PTR [rbx]
   2abbb:	call   b300 <dct_chroma_sp>
   2abc0:	mov    r9,QWORD PTR [rip+0x5d9e9]        # 885b0 <img>
   2abc7:	mov    DWORD PTR [rbx],eax
   2abc9:	jmp    2a7c9 <ChromaResidualCoding+0x409>
   2abce:	xchg   ax,ax
   2abd0:	mov    DWORD PTR [r15+rdx*1],0x0
   2abd8:	jmp    2ab4f <ChromaResidualCoding+0x78f>
   2abdd:	mov    esi,DWORD PTR [r9+0x11c08]
   2abe4:	test   esi,esi
   2abe6:	jle    2a7c9 <ChromaResidualCoding+0x409>
   2abec:	mov    r11d,DWORD PTR [r9+0x11c04]
   2abf3:	sub    esi,0x1
   2abf6:	mov    rbx,QWORD PTR [rsp+0x20]
   2abfb:	lea    rdi,[rip+0x8911e]        # b3d20 <rec_resR>
   2ac02:	lea    ecx,[r11-0x1]
   2ac06:	lea    rax,[rcx+0x1]
   2ac0a:	shl    rcx,0x4
   2ac0e:	mov    rdx,rax
   2ac11:	neg    rax
   2ac14:	lea    r10,[rsi+rcx*1+0x11]
   2ac19:	shl    rax,0x6
   2ac1d:	shl    rdx,0x6
   2ac21:	lea    rsi,[rip+0x75918]        # a0540 <rec_resB>
   2ac28:	shl    r10,0x2
   2ac2c:	mov    r8,rax
   2ac2f:	nop
   2ac30:	lea    rax,[r8+rdx*1]
   2ac34:	test   r11d,r11d
   2ac37:	jg     2ac4c <ChromaResidualCoding+0x88c>
   2ac39:	jmp    2ac65 <ChromaResidualCoding+0x8a5>
   2ac3b:	nop    DWORD PTR [rax+rax*1+0x0]
   2ac40:	mov    DWORD PTR [rsi+rax*1],ecx
   2ac43:	add    rax,0x40
   2ac47:	cmp    rdx,rax
   2ac4a:	je     2ac65 <ChromaResidualCoding+0x8a5>
   2ac4c:	mov    ecx,DWORD PTR [r9+rax*1+0x3338]
   2ac54:	test   rbx,rbx
   2ac57:	jne    2ac40 <ChromaResidualCoding+0x880>
   2ac59:	mov    DWORD PTR [rdi+rax*1],ecx
   2ac5c:	add    rax,0x40
   2ac60:	cmp    rdx,rax
   2ac63:	jne    2ac4c <ChromaResidualCoding+0x88c>
   2ac65:	add    rdx,0x4
   2ac69:	cmp    r10,rdx
   2ac6c:	jne    2ac30 <ChromaResidualCoding+0x870>
   2ac6e:	jmp    2a7c9 <ChromaResidualCoding+0x409>
   2ac73:	mov    edi,r15d
   2ac76:	call   b300 <dct_chroma_sp>
   2ac7b:	mov    rbx,QWORD PTR [rsp+0x28]
   2ac80:	mov    DWORD PTR [rbx],eax
   2ac82:	jmp    2a7b3 <ChromaResidualCoding+0x3f3>
   2ac87:	lea    rax,[r9+0x3338]
   2ac8e:	add    r9,0x3358
   2ac95:	mov    DWORD PTR [rax],0x0
   2ac9b:	add    rax,0x4
   2ac9f:	mov    DWORD PTR [rax+0x3c],0x0
   2aca6:	mov    DWORD PTR [rax+0x7c],0x0
   2acad:	mov    DWORD PTR [rax+0xbc],0x0
   2acb7:	mov    DWORD PTR [rax+0xfc],0x0
   2acc1:	mov    DWORD PTR [rax+0x13c],0x0
   2accb:	mov    DWORD PTR [rax+0x17c],0x0
   2acd5:	mov    DWORD PTR [rax+0x1bc],0x0
   2acdf:	cmp    r9,rax
   2ace2:	jne    2ac95 <ChromaResidualCoding+0x8d5>
   2ace4:	jmp    2abb1 <ChromaResidualCoding+0x7f1>
   2ace9:	call   4390 <__stack_chk_fail@plt>
   2acee:	xchg   ax,ax

000000000002acf0 <IntraChromaPrediction>:
   2acf0:	endbr64 
   2acf4:	movabs rcx,0x100000001
   2acfe:	push   r15
   2ad00:	push   r14
   2ad02:	push   r13
   2ad04:	mov    r13,rsi
   2ad07:	push   r12
   2ad09:	mov    r12,rdx
   2ad0c:	movabs rdx,0x100000000
   2ad16:	push   rbp
   2ad17:	push   rbx
   2ad18:	mov    rbx,rdi
   2ad1b:	sub    rsp,0x488
   2ad22:	mov    rax,QWORD PTR fs:0x28
   2ad2b:	mov    QWORD PTR [rsp+0x478],rax
   2ad33:	xor    eax,eax
   2ad35:	mov    rax,QWORD PTR [rip+0x5d874]        # 885b0 <img>
   2ad3c:	mov    QWORD PTR [rsp+0x220],rdx
   2ad44:	mov    QWORD PTR [rsp+0x260],rdx
   2ad4c:	mov    rdi,QWORD PTR [rax+0x3758]
   2ad53:	mov    QWORD PTR [rsp+0x230],0x0
   2ad5f:	mov    QWORD PTR [rsp+0x238],0x0
   2ad6b:	mov    QWORD PTR [rsp+0xb8],rdi
   2ad73:	mov    edi,DWORD PTR [rax+0xc]
   2ad76:	mov    QWORD PTR [rsp+0x240],0x0
   2ad82:	mov    DWORD PTR [rsp+0x70],edi
   2ad86:	mov    edi,DWORD PTR [rax+0x11c04]
   2ad8c:	mov    QWORD PTR [rsp+0x248],0x0
   2ad98:	mov    DWORD PTR [rsp+0x18],edi
   2ad9c:	mov    edi,DWORD PTR [rax+0x11c08]
   2ada2:	mov    eax,DWORD PTR [rax+0x11bfc]
   2ada8:	mov    QWORD PTR [rsp+0x250],0x0
   2adb4:	mov    DWORD PTR [rsp+0x20],edi
   2adb8:	mov    DWORD PTR [rsp+0x8],eax
   2adbc:	movabs rax,0x300000002
   2adc6:	mov    QWORD PTR [rsp+0x228],rax
   2adce:	mov    QWORD PTR [rsp+0x258],0x0
   2adda:	mov    QWORD PTR [rsp+0x268],rax
   2ade2:	mov    QWORD PTR [rsp+0x270],rax
   2adea:	mov    QWORD PTR [rsp+0x278],rax
   2adf2:	mov    QWORD PTR [rsp+0x280],0x0
   2adfe:	mov    QWORD PTR [rsp+0x2a0],rdx
   2ae06:	movabs rdx,0x300000003
   2ae10:	mov    QWORD PTR [rsp+0x288],0x0
   2ae1c:	mov    QWORD PTR [rsp+0x290],0x0
   2ae28:	mov    QWORD PTR [rsp+0x298],0x0
   2ae34:	mov    QWORD PTR [rsp+0x2a8],rax
   2ae3c:	mov    QWORD PTR [rsp+0x2b0],rcx
   2ae44:	mov    QWORD PTR [rsp+0x2b8],rdx
   2ae4c:	mov    QWORD PTR [rsp+0x2c0],rax
   2ae54:	mov    QWORD PTR [rsp+0x2c8],rax
   2ae5c:	mov    QWORD PTR [rsp+0x2d0],rdx
   2ae64:	mov    QWORD PTR [rsp+0x2d8],rdx
   2ae6c:	test   edi,edi
   2ae6e:	js     2aec0 <IntraChromaPrediction+0x1d0>
   2ae70:	lea    r15,[rsp+0x2e0]
   2ae78:	mov    rax,r12
   2ae7b:	mov    QWORD PTR [rsp],rbx
   2ae7f:	mov    ebp,DWORD PTR [rsp+0x70]
   2ae83:	mov    ebx,DWORD PTR [rsp+0x20]
   2ae87:	mov    r12,r15
   2ae8a:	mov    r14d,0xffffffff
   2ae90:	mov    r15,rax
   2ae93:	nop    DWORD PTR [rax+rax*1+0x0]
   2ae98:	mov    r8,r12
   2ae9b:	mov    edx,r14d
   2ae9e:	xor    ecx,ecx
   2aea0:	mov    esi,0xffffffff
   2aea5:	mov    edi,ebp
   2aea7:	add    r14d,0x1
   2aeab:	add    r12,0x18
   2aeaf:	call   30ae0 <getNeighbour>
   2aeb4:	cmp    r14d,ebx
   2aeb7:	jne    2ae98 <IntraChromaPrediction+0x1a8>
   2aeb9:	mov    rbx,QWORD PTR [rsp]
   2aebd:	mov    r12,r15
   2aec0:	mov    edi,DWORD PTR [rsp+0x70]
   2aec4:	xor    ecx,ecx
   2aec6:	lea    r8,[rsp+0x140]
   2aece:	xor    esi,esi
   2aed0:	mov    edx,0xffffffff
   2aed5:	call   30ae0 <getNeighbour>
   2aeda:	mov    eax,DWORD PTR [rsp+0x140]
   2aee1:	mov    edi,DWORD PTR [rsp+0x20]
   2aee5:	mov    rcx,QWORD PTR [rip+0x5d6cc]        # 885b8 <input>
   2aeec:	mov    DWORD PTR [rsp],eax
   2aeef:	mov    eax,DWORD PTR [rsp+0x2e0]
   2aef6:	mov    r9d,DWORD PTR [rcx+0xd8]
   2aefd:	mov    QWORD PTR [rsp+0x80],rcx
   2af05:	mov    DWORD PTR [rsp+0x64],eax
   2af09:	mov    eax,DWORD PTR [rsp+0x2f8]
   2af10:	mov    DWORD PTR [rsp+0x24],eax
   2af14:	mov    eax,edi
   2af16:	shr    eax,0x1f
   2af19:	add    eax,edi
   2af1b:	sar    eax,1
   2af1d:	mov    DWORD PTR [rsp+0x60],eax
   2af21:	test   r9d,r9d
   2af24:	je     2b025 <IntraChromaPrediction+0x335>
   2af2a:	mov    r8d,DWORD PTR [rsp]
   2af2e:	mov    rbp,QWORD PTR [rip+0x5d67b]        # 885b0 <img>
   2af35:	test   r8d,r8d
   2af38:	jne    2bbf7 <IntraChromaPrediction+0xf07>
   2af3e:	cmp    DWORD PTR [rsp+0x20],0x1
   2af43:	jle    2bc68 <IntraChromaPrediction+0xf78>
   2af49:	mov    esi,DWORD PTR [rsp+0x24]
   2af4d:	mov    edi,DWORD PTR [rsp+0x60]
   2af51:	mov    ecx,0x1
   2af56:	xor    edx,edx
   2af58:	lea    rax,[rsp+0x2fc]
   2af60:	jmp    2af67 <IntraChromaPrediction+0x277>
   2af62:	mov    ecx,esi
   2af64:	mov    esi,DWORD PTR [rax-0x4]
   2af67:	add    edx,0x1
   2af6a:	test   esi,esi
   2af6c:	je     2af7e <IntraChromaPrediction+0x28e>
   2af6e:	mov    rsi,QWORD PTR [rbp+0x11868]
   2af75:	movsxd r8,DWORD PTR [rax]
   2af78:	and    ecx,DWORD PTR [rsi+r8*4]
   2af7c:	mov    esi,ecx
   2af7e:	add    rax,0x18
   2af82:	cmp    edx,edi
   2af84:	jl     2af62 <IntraChromaPrediction+0x272>
   2af86:	mov    eax,esi
   2af88:	mov    DWORD PTR [rsp+0x24],esi
   2af8c:	and    eax,0x1
   2af8f:	mov    BYTE PTR [rsp+0x50],al
   2af93:	mov    ecx,DWORD PTR [rsp+0x20]
   2af97:	mov    edi,DWORD PTR [rsp+0x60]
   2af9b:	cmp    ecx,edi
   2af9d:	jle    2bc4b <IntraChromaPrediction+0xf5b>
   2afa3:	sub    ecx,0x1
   2afa6:	movsxd rsi,edi
   2afa9:	mov    edx,ecx
   2afab:	lea    rax,[rsi+rsi*2]
   2afaf:	mov    DWORD PTR [rsp+0x74],ecx
   2afb3:	mov    ecx,0x1
   2afb8:	sub    edx,edi
   2afba:	lea    rax,[rsp+rax*8+0x2e0]
   2afc2:	add    rdx,rsi
   2afc5:	lea    rdx,[rdx+rdx*2]
   2afc9:	lea    rdx,[rsp+rdx*8+0x2f8]
   2afd1:	jmp    2afeb <IntraChromaPrediction+0x2fb>
   2afd3:	movsxd r8,DWORD PTR [rax+0x1c]
   2afd7:	mov    rdi,QWORD PTR [rbp+0x11868]
   2afde:	add    rax,0x18
   2afe2:	and    ecx,DWORD PTR [rdi+r8*4]
   2afe6:	cmp    rax,rdx
   2afe9:	je     2affd <IntraChromaPrediction+0x30d>
   2afeb:	mov    edi,DWORD PTR [rax+0x18]
   2afee:	test   edi,edi
   2aff0:	jne    2afd3 <IntraChromaPrediction+0x2e3>
   2aff2:	add    rax,0x18
   2aff6:	xor    ecx,ecx
   2aff8:	cmp    rax,rdx
   2affb:	jne    2afeb <IntraChromaPrediction+0x2fb>
   2affd:	and    BYTE PTR [rsp+0x50],cl
   2b001:	mov    DWORD PTR [rsp+0x1c],ecx
   2b005:	mov    edx,DWORD PTR [rsp+0x64]
   2b009:	test   edx,edx
   2b00b:	je     2b04b <IntraChromaPrediction+0x35b>
   2b00d:	movsxd rdx,DWORD PTR [rsp+0x2e4]
   2b015:	mov    rax,QWORD PTR [rbp+0x11868]
   2b01c:	mov    eax,DWORD PTR [rax+rdx*4]
   2b01f:	mov    DWORD PTR [rsp+0x64],eax
   2b023:	jmp    2b04b <IntraChromaPrediction+0x35b>
   2b025:	mov    eax,DWORD PTR [rsp+0x24]
   2b029:	mov    rbp,QWORD PTR [rip+0x5d580]        # 885b0 <img>
   2b030:	movsxd rsi,DWORD PTR [rsp+0x60]
   2b035:	test   eax,eax
   2b037:	mov    DWORD PTR [rsp+0x1c],eax
   2b03b:	mov    eax,DWORD PTR [rsp+0x20]
   2b03f:	setne  BYTE PTR [rsp+0x50]
   2b044:	sub    eax,0x1
   2b047:	mov    DWORD PTR [rsp+0x74],eax
   2b04b:	test   rbx,rbx
   2b04e:	je     2b055 <IntraChromaPrediction+0x365>
   2b050:	mov    eax,DWORD PTR [rsp]
   2b053:	mov    DWORD PTR [rbx],eax
   2b055:	test   r13,r13
   2b058:	je     2b063 <IntraChromaPrediction+0x373>
   2b05a:	movzx  eax,BYTE PTR [rsp+0x50]
   2b05f:	mov    DWORD PTR [r13+0x0],eax
   2b063:	test   r12,r12
   2b066:	je     2b070 <IntraChromaPrediction+0x380>
   2b068:	mov    eax,DWORD PTR [rsp+0x64]
   2b06c:	mov    DWORD PTR [r12],eax
   2b070:	mov    ebx,DWORD PTR [rbp+0x11bf4]
   2b076:	mov    ecx,DWORD PTR [rsp+0x20]
   2b07a:	lea    r12,[rsp+0x1a0]
   2b082:	mov    eax,ebx
   2b084:	mov    DWORD PTR [rsp+0x90],ebx
   2b08b:	shr    eax,0x1f
   2b08e:	add    eax,ebx
   2b090:	mov    ebx,DWORD PTR [rsp+0x18]
   2b094:	sar    eax,1
   2b096:	mov    DWORD PTR [rsp+0x28],eax
   2b09a:	movsxd rax,DWORD PTR [rsp+0x154]
   2b0a2:	lea    r15d,[rbx-0x1]
   2b0a6:	mov    DWORD PTR [rsp+0x134],r15d
   2b0ae:	shl    rax,0x3
   2b0b2:	mov    QWORD PTR [rsp+0x100],r15
   2b0ba:	mov    QWORD PTR [rsp+0x78],rax
   2b0bf:	mov    eax,ebx
   2b0c1:	shr    eax,0x1f
   2b0c4:	add    eax,ebx
   2b0c6:	mov    edi,eax
   2b0c8:	movsxd rax,DWORD PTR [rsp+0x2f4]
   2b0d0:	sar    edi,1
   2b0d2:	shl    rax,0x3
   2b0d6:	mov    DWORD PTR [rsp+0x11c],edi
   2b0dd:	mov    QWORD PTR [rsp+0xc0],rax
   2b0e5:	movsxd rax,DWORD PTR [rsp+0x2f0]
   2b0ed:	add    rax,rax
   2b0f0:	mov    QWORD PTR [rsp+0xc8],rax
   2b0f8:	lea    eax,[rdi-0x1]
   2b0fb:	mov    DWORD PTR [rsp+0xe4],eax
   2b102:	mov    eax,DWORD PTR [rsp+0x60]
   2b106:	sub    eax,0x1
   2b109:	mov    DWORD PTR [rsp+0xe0],eax
   2b110:	lea    eax,[rbx+rbx*1]
   2b113:	mov    DWORD PTR [rsp+0x118],eax
   2b11a:	xor    eax,eax
   2b11c:	cmp    ebx,0x8
   2b11f:	setne  al
   2b122:	add    eax,0x5
   2b125:	mov    DWORD PTR [rsp+0x120],eax
   2b12c:	lea    eax,[rcx+rcx*1]
   2b12f:	mov    DWORD PTR [rsp+0x94],eax
   2b136:	mov    eax,edi
   2b138:	neg    eax
   2b13a:	mov    DWORD PTR [rsp+0x124],eax
   2b141:	mov    eax,ecx
   2b143:	shr    eax,0x1f
   2b146:	add    eax,ecx
   2b148:	lea    rcx,[rip+0x49f51]        # 750a0 <subblk_offset_y>
   2b14f:	sar    eax,1
   2b151:	neg    eax
   2b153:	mov    DWORD PTR [rsp+0x130],eax
   2b15a:	mov    rax,QWORD PTR [rip+0x5f847]        # 8a9a8 <enc_picture>
   2b161:	mov    rax,QWORD PTR [rax+0x1940]
   2b168:	mov    QWORD PTR [rsp+0x58],rax
   2b16d:	lea    rax,[r15+0x1]
   2b171:	mov    QWORD PTR [rsp+0x128],rax
   2b179:	shl    rax,0x5
   2b17d:	add    rax,rbp
   2b180:	mov    QWORD PTR [rsp+0x68],rax
   2b185:	mov    eax,DWORD PTR [rsp+0x8]
   2b189:	sub    eax,0x1
   2b18c:	cdqe   
   2b18e:	mov    rdx,rax
   2b191:	shl    rax,0x6
   2b195:	shl    rdx,0x5
   2b199:	lea    rax,[rsp+rax*1+0x220]
   2b1a1:	lea    rbx,[rdx+rcx*1]
   2b1a5:	mov    QWORD PTR [rsp+0xa8],rax
   2b1ad:	lea    rcx,[rip+0x49f4c]        # 75100 <subblk_offset_x>
   2b1b4:	movsxd rax,DWORD PTR [rsp+0x150]
   2b1bc:	mov    QWORD PTR [rsp+0x98],rbx
   2b1c4:	lea    rbx,[rdx+rcx*1]
   2b1c8:	lea    rcx,[rsp+0x160]
   2b1d0:	mov    QWORD PTR [rsp+0xa0],rbx
   2b1d8:	mov    QWORD PTR [rsp+0x38],rax
   2b1dd:	mov    ebx,DWORD PTR [rsp+0x74]
   2b1e1:	add    rax,rax
   2b1e4:	mov    QWORD PTR [rsp+0xf0],rax
   2b1ec:	lea    rax,[rbp+rbx*2+0x0]
   2b1f1:	mov    QWORD PTR [rsp+0x108],rbx
   2b1f9:	mov    QWORD PTR [rsp+0x110],rax
   2b201:	lea    rax,[rsp+r15*4+0x164]
   2b209:	xor    r15d,r15d
   2b20c:	mov    QWORD PTR [rsp+0xf8],rax
   2b214:	lea    rax,[rsp+rbx*4+0x1a4]
   2b21c:	mov    QWORD PTR [rsp+0xd0],rax
   2b224:	movsxd rax,edi
   2b227:	lea    rax,[rcx+rax*4]
   2b22b:	mov    QWORD PTR [rsp+0xb0],rcx
   2b233:	mov    QWORD PTR [rsp+0xd8],rax
   2b23b:	lea    rax,[r12+rsi*4]
   2b23f:	mov    QWORD PTR [rsp+0xe8],rax
   2b247:	lea    rax,[rsp+0x2e0]
   2b24f:	mov    QWORD PTR [rsp+0x40],rax
   2b254:	lea    rax,[rsp+0x340]
   2b25c:	mov    QWORD PTR [rsp+0x48],rax
   2b261:	mov    rax,rbx
   2b264:	not    rax
   2b267:	add    rax,rax
   2b26a:	mov    QWORD PTR [rsp+0x138],rax
   2b272:	mov    rax,QWORD PTR [rsp+0x58]
   2b277:	cmp    DWORD PTR [rsp+0x90],0x1
   2b27f:	mov    r14,QWORD PTR [rax]
   2b282:	jle    2b3a0 <IntraChromaPrediction+0x6b0>
   2b288:	mov    rax,QWORD PTR [rsp+0x78]
   2b28d:	mov    DWORD PTR [rsp+0x8],0x0
   2b295:	mov    QWORD PTR [rsp+0x88],r12
   2b29d:	mov    r10,QWORD PTR [rsp+0xa8]
   2b2a5:	add    rax,r14
   2b2a8:	mov    r9,QWORD PTR [rsp+0xa0]
   2b2b0:	mov    r8,QWORD PTR [rsp+0x98]
   2b2b8:	mov    QWORD PTR [rsp+0x30],rax
   2b2bd:	movzx  eax,WORD PTR [rbp+0x11be8]
   2b2c4:	mov    WORD PTR [rsp+0x10],ax
   2b2c9:	nop    DWORD PTR [rax+0x0]
   2b2d0:	xor    ecx,ecx
   2b2d2:	mov    esi,DWORD PTR [r10+rcx*4]
   2b2d6:	movzx  edi,BYTE PTR [r8+rcx*1]
   2b2db:	movzx  edx,BYTE PTR [r9+rcx*1]
   2b2e0:	cmp    esi,0x2
   2b2e3:	je     2b588 <IntraChromaPrediction+0x898>
   2b2e9:	jg     2b4a8 <IntraChromaPrediction+0x7b8>
   2b2ef:	test   esi,esi
   2b2f1:	je     2b520 <IntraChromaPrediction+0x830>
   2b2f7:	cmp    esi,0x1
   2b2fa:	jne    2b318 <IntraChromaPrediction+0x628>
   2b2fc:	mov    eax,DWORD PTR [rsp]
   2b2ff:	test   eax,eax
   2b301:	jne    2b69a <IntraChromaPrediction+0x9aa>
   2b307:	mov    eax,DWORD PTR [rsp+0x24]
   2b30b:	test   eax,eax
   2b30d:	jne    2b6c7 <IntraChromaPrediction+0x9d7>
   2b313:	nop    DWORD PTR [rax+rax*1+0x0]
   2b318:	movzx  esi,WORD PTR [rsp+0x10]
   2b31d:	lea    rax,[rdx+r15*1]
   2b321:	mov    rbx,rdx
   2b324:	neg    rdx
   2b327:	shl    rax,0x4
   2b32b:	shl    rbx,0x5
   2b32f:	add    rdi,rax
   2b332:	shl    rdx,0x5
   2b336:	lea    rax,[rbp+rdi*2+0x0]
   2b33b:	mov    edi,0x4
   2b340:	lea    r11,[rbx+rax*1]
   2b344:	add    rax,0x2
   2b348:	mov    WORD PTR [r11+rdx*1+0x2138],si
   2b351:	mov    WORD PTR [rax+0x2156],si
   2b358:	mov    WORD PTR [rax+0x2176],si
   2b35f:	mov    WORD PTR [rax+0x2196],si
   2b366:	sub    edi,0x1
   2b369:	jne    2b340 <IntraChromaPrediction+0x650>
   2b36b:	add    rcx,0x1
   2b36f:	cmp    rcx,0x4
   2b373:	jne    2b2d2 <IntraChromaPrediction+0x5e2>
   2b379:	add    DWORD PTR [rsp+0x8],0x1
   2b37e:	add    r8,0x4
   2b382:	mov    eax,DWORD PTR [rsp+0x8]
   2b386:	add    r9,0x4
   2b38a:	add    r10,0x10
   2b38e:	cmp    DWORD PTR [rsp+0x28],eax
   2b392:	jg     2b2d0 <IntraChromaPrediction+0x5e0>
   2b398:	mov    r12,QWORD PTR [rsp+0x88]
   2b3a0:	mov    eax,DWORD PTR [rsp]
   2b3a3:	test   eax,eax
   2b3a5:	jne    2b8ef <IntraChromaPrediction+0xbff>
   2b3ab:	cmp    BYTE PTR [rsp+0x50],0x0
   2b3b0:	jne    2b998 <IntraChromaPrediction+0xca8>
   2b3b6:	add    r15,0x40
   2b3ba:	add    QWORD PTR [rsp+0x58],0x8
   2b3c0:	add    QWORD PTR [rsp+0x68],0x800
   2b3c9:	cmp    r15,0x80
   2b3d0:	jne    2b272 <IntraChromaPrediction+0x582>
   2b3d6:	mov    rax,QWORD PTR [rsp+0x80]
   2b3de:	mov    r10d,DWORD PTR [rax+0x9a0]
   2b3e5:	test   r10d,r10d
   2b3e8:	jne    2b763 <IntraChromaPrediction+0xa73>
   2b3ee:	mov    r13d,DWORD PTR [rsp+0x20]
   2b3f3:	test   r13d,r13d
   2b3f6:	jle    2b433 <IntraChromaPrediction+0x743>
   2b3f8:	mov    r12d,DWORD PTR [rsp+0x70]
   2b3fd:	lea    rbp,[rsp+0x2e0]
   2b405:	xor    ebx,ebx
   2b407:	mov    r8,rbp
   2b40a:	mov    edx,ebx
   2b40c:	xor    ecx,ecx
   2b40e:	xor    esi,esi
   2b410:	mov    edi,r12d
   2b413:	add    ebx,0x1
   2b416:	add    rbp,0x18
   2b41a:	call   30ae0 <getNeighbour>
   2b41f:	cmp    r13d,ebx
   2b422:	jne    2b407 <IntraChromaPrediction+0x717>
   2b424:	mov    rax,QWORD PTR [rip+0x5d18d]        # 885b8 <input>
   2b42b:	mov    QWORD PTR [rsp+0x80],rax
   2b433:	mov    rax,QWORD PTR [rsp+0x80]
   2b43b:	mov    DWORD PTR [rsp+0x58],0x0
   2b443:	lea    r12,[rsp+0x1e0]
   2b44b:	mov    QWORD PTR [rsp+0x28],0x0
   2b454:	mov    DWORD PTR [rsp+0x60],0x7fffffff
   2b45c:	mov    eax,DWORD PTR [rax+0x974]
   2b462:	mov    rbx,QWORD PTR [rsp+0x28]
   2b467:	mov    DWORD PTR [rsp+0x48],ebx
   2b46b:	mov    DWORD PTR [rsp+0x40],ebx
   2b46f:	cmp    eax,0x1
   2b472:	je     2b78c <IntraChromaPrediction+0xa9c>
   2b478:	mov    r9d,DWORD PTR [rsp]
   2b47c:	mov    rbx,QWORD PTR [rsp+0x28]
   2b481:	test   r9d,r9d
   2b484:	mov    ecx,ebx
   2b486:	sete   dl
   2b489:	cmp    ebx,0x2
   2b48c:	jne    2b71f <IntraChromaPrediction+0xa2f>
   2b492:	test   dl,dl
   2b494:	je     2b71f <IntraChromaPrediction+0xa2f>
   2b49a:	add    QWORD PTR [rsp+0x28],0x1
   2b4a0:	jmp    2b462 <IntraChromaPrediction+0x772>
   2b4a2:	nop    WORD PTR [rax+rax*1+0x0]
   2b4a8:	cmp    esi,0x3
   2b4ab:	jne    2b318 <IntraChromaPrediction+0x628>
   2b4b1:	mov    ebx,DWORD PTR [rsp]
   2b4b4:	test   ebx,ebx
   2b4b6:	jne    2b662 <IntraChromaPrediction+0x972>
   2b4bc:	mov    r11d,DWORD PTR [rsp+0x1c]
   2b4c1:	test   r11d,r11d
   2b4c4:	je     2b318 <IntraChromaPrediction+0x628>
   2b4ca:	xor    eax,eax
   2b4cc:	movzx  edi,dil
   2b4d0:	mov    rsi,QWORD PTR [rsp+0x40]
   2b4d5:	xor    r11d,r11d
   2b4d8:	lea    rbx,[rdi+rdi*2]
   2b4dc:	shl    rbx,0x3
   2b4e0:	add    rsi,rbx
   2b4e3:	add    rbx,QWORD PTR [rsp+0x48]
   2b4e8:	movsxd r12,DWORD PTR [rsi+0x2c]
   2b4ec:	movsxd r13,DWORD PTR [rsi+0x28]
   2b4f0:	add    rsi,0x18
   2b4f4:	mov    r12,QWORD PTR [r14+r12*8]
   2b4f8:	movzx  r12d,WORD PTR [r12+r13*2]
   2b4fd:	add    r11d,r12d
   2b500:	cmp    rbx,rsi
   2b503:	jne    2b4e8 <IntraChromaPrediction+0x7f8>
   2b505:	mov    esi,DWORD PTR [rsp]
   2b508:	test   esi,esi
   2b50a:	je     2b713 <IntraChromaPrediction+0xa23>
   2b510:	lea    esi,[rax+r11*1+0x4]
   2b515:	sar    esi,0x3
   2b518:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b51d:	nop    DWORD PTR [rax]
   2b520:	mov    eax,DWORD PTR [rsp]
   2b523:	test   eax,eax
   2b525:	jne    2b61a <IntraChromaPrediction+0x92a>
   2b52b:	mov    eax,DWORD PTR [rsp+0x24]
   2b52f:	test   eax,eax
   2b531:	je     2b318 <IntraChromaPrediction+0x628>
   2b537:	xor    eax,eax
   2b539:	movzx  edi,dil
   2b53d:	mov    r11,QWORD PTR [rsp+0x40]
   2b542:	lea    rbx,[rdi+rdi*2]
   2b546:	shl    rbx,0x3
   2b54a:	add    r11,rbx
   2b54d:	add    rbx,QWORD PTR [rsp+0x48]
   2b552:	movsxd r12,DWORD PTR [r11+0x2c]
   2b556:	movsxd r13,DWORD PTR [r11+0x28]
   2b55a:	add    r11,0x18
   2b55e:	mov    r12,QWORD PTR [r14+r12*8]
   2b562:	movzx  r12d,WORD PTR [r12+r13*2]
   2b567:	add    esi,r12d
   2b56a:	cmp    r11,rbx
   2b56d:	jne    2b552 <IntraChromaPrediction+0x862>
   2b56f:	mov    r11d,DWORD PTR [rsp]
   2b573:	test   r11d,r11d
   2b576:	je     2b708 <IntraChromaPrediction+0xa18>
   2b57c:	lea    esi,[rax+rsi*1+0x4]
   2b580:	sar    esi,0x3
   2b583:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b588:	mov    r13d,DWORD PTR [rsp+0x1c]
   2b58d:	test   r13d,r13d
   2b590:	jne    2b5d9 <IntraChromaPrediction+0x8e9>
   2b592:	mov    r12d,DWORD PTR [rsp]
   2b596:	test   r12d,r12d
   2b599:	je     2b318 <IntraChromaPrediction+0x628>
   2b59f:	mov    rax,QWORD PTR [rsp+0x38]
   2b5a4:	lea    rsi,[rdx+rax*1]
   2b5a8:	mov    rax,QWORD PTR [rsp+0x30]
   2b5ad:	mov    rax,QWORD PTR [rax]
   2b5b0:	lea    rbx,[rax+rsi*2]
   2b5b4:	xor    esi,esi
   2b5b6:	xor    eax,eax
   2b5b8:	movzx  r11d,WORD PTR [rbx+rax*2]
   2b5bd:	add    rax,0x1
   2b5c1:	add    esi,r11d
   2b5c4:	cmp    rax,0x4
   2b5c8:	jne    2b5b8 <IntraChromaPrediction+0x8c8>
   2b5ca:	add    esi,0x2
   2b5cd:	movzx  edi,dil
   2b5d1:	sar    esi,0x2
   2b5d4:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b5d9:	mov    rax,QWORD PTR [rsp+0x40]
   2b5de:	lea    r11,[rdi+rdi*2]
   2b5e2:	xor    esi,esi
   2b5e4:	shl    r11,0x3
   2b5e8:	add    rax,r11
   2b5eb:	add    r11,QWORD PTR [rsp+0x48]
   2b5f0:	movsxd rbx,DWORD PTR [rax+0x2c]
   2b5f4:	movsxd r12,DWORD PTR [rax+0x28]
   2b5f8:	add    rax,0x18
   2b5fc:	mov    rbx,QWORD PTR [r14+rbx*8]
   2b600:	movzx  ebx,WORD PTR [rbx+r12*2]
   2b605:	add    esi,ebx
   2b607:	cmp    rax,r11
   2b60a:	jne    2b5f0 <IntraChromaPrediction+0x900>
   2b60c:	add    esi,0x2
   2b60f:	movzx  edx,dl
   2b612:	sar    esi,0x2
   2b615:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b61a:	mov    rax,QWORD PTR [rsp+0x38]
   2b61f:	lea    r11,[rdx+rax*1]
   2b623:	mov    rax,QWORD PTR [rsp+0x30]
   2b628:	mov    rax,QWORD PTR [rax]
   2b62b:	lea    r12,[rax+r11*2]
   2b62f:	xor    eax,eax
   2b631:	xor    r11d,r11d
   2b634:	movzx  ebx,WORD PTR [r12+r11*2]
   2b639:	add    r11,0x1
   2b63d:	add    eax,ebx
   2b63f:	cmp    r11,0x4
   2b643:	jne    2b634 <IntraChromaPrediction+0x944>
   2b645:	mov    r11d,DWORD PTR [rsp+0x24]
   2b64a:	test   r11d,r11d
   2b64d:	jne    2b539 <IntraChromaPrediction+0x849>
   2b653:	lea    esi,[rax+0x2]
   2b656:	movzx  edi,dil
   2b65a:	sar    esi,0x2
   2b65d:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b662:	mov    rax,QWORD PTR [rsp+0x38]
   2b667:	lea    rsi,[rdx+rax*1]
   2b66b:	mov    rax,QWORD PTR [rsp+0x30]
   2b670:	mov    rax,QWORD PTR [rax]
   2b673:	lea    rbx,[rax+rsi*2]
   2b677:	xor    esi,esi
   2b679:	xor    eax,eax
   2b67b:	movzx  r11d,WORD PTR [rbx+rsi*2]
   2b680:	add    rsi,0x1
   2b684:	add    eax,r11d
   2b687:	cmp    rsi,0x4
   2b68b:	jne    2b67b <IntraChromaPrediction+0x98b>
   2b68d:	mov    esi,DWORD PTR [rsp+0x1c]
   2b691:	test   esi,esi
   2b693:	je     2b653 <IntraChromaPrediction+0x963>
   2b695:	jmp    2b4cc <IntraChromaPrediction+0x7dc>
   2b69a:	mov    rax,QWORD PTR [rsp+0x38]
   2b69f:	lea    rsi,[rdx+rax*1]
   2b6a3:	mov    rax,QWORD PTR [rsp+0x30]
   2b6a8:	mov    rax,QWORD PTR [rax]
   2b6ab:	lea    rbx,[rax+rsi*2]
   2b6af:	xor    esi,esi
   2b6b1:	xor    eax,eax
   2b6b3:	movzx  r11d,WORD PTR [rbx+rsi*2]
   2b6b8:	add    rsi,0x1
   2b6bc:	add    eax,r11d
   2b6bf:	cmp    rsi,0x4
   2b6c3:	jne    2b6b3 <IntraChromaPrediction+0x9c3>
   2b6c5:	jmp    2b653 <IntraChromaPrediction+0x963>
   2b6c7:	mov    rax,QWORD PTR [rsp+0x40]
   2b6cc:	lea    r11,[rdi+rdi*2]
   2b6d0:	xor    esi,esi
   2b6d2:	shl    r11,0x3
   2b6d6:	add    rax,r11
   2b6d9:	add    r11,QWORD PTR [rsp+0x48]
   2b6de:	movsxd rbx,DWORD PTR [rax+0x2c]
   2b6e2:	movsxd r12,DWORD PTR [rax+0x28]
   2b6e6:	add    rax,0x18
   2b6ea:	mov    rbx,QWORD PTR [r14+rbx*8]
   2b6ee:	movzx  ebx,WORD PTR [rbx+r12*2]
   2b6f3:	add    esi,ebx
   2b6f5:	cmp    rax,r11
   2b6f8:	jne    2b6de <IntraChromaPrediction+0x9ee>
   2b6fa:	add    esi,0x2
   2b6fd:	movzx  edx,dl
   2b700:	sar    esi,0x2
   2b703:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b708:	add    esi,0x2
   2b70b:	sar    esi,0x2
   2b70e:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b713:	lea    esi,[r11+0x2]
   2b717:	sar    esi,0x2
   2b71a:	jmp    2b31d <IntraChromaPrediction+0x62d>
   2b71f:	cmp    QWORD PTR [rsp+0x28],0x1
   2b725:	je     2bc11 <IntraChromaPrediction+0xf21>
   2b72b:	cmp    ecx,0x3
   2b72e:	jne    2b795 <IntraChromaPrediction+0xaa5>
   2b730:	mov    esi,DWORD PTR [rsp+0x1c]
   2b734:	test   esi,esi
   2b736:	je     2b744 <IntraChromaPrediction+0xa54>
   2b738:	mov    ecx,DWORD PTR [rsp+0x24]
   2b73c:	test   ecx,ecx
   2b73e:	jne    2bc30 <IntraChromaPrediction+0xf40>
   2b744:	movsxd rax,DWORD PTR [rsp+0x70]
   2b749:	mov    rbx,QWORD PTR [rsp+0xb8]
   2b751:	mov    edi,DWORD PTR [rsp+0x58]
   2b755:	imul   rax,rax,0x278
   2b75c:	mov    DWORD PTR [rbx+rax*1+0x20c],edi
   2b763:	mov    rax,QWORD PTR [rsp+0x478]
   2b76b:	xor    rax,QWORD PTR fs:0x28
   2b774:	jne    2bc9f <IntraChromaPrediction+0xfaf>
   2b77a:	add    rsp,0x488
   2b781:	pop    rbx
   2b782:	pop    rbp
   2b783:	pop    r12
   2b785:	pop    r13
   2b787:	pop    r14
   2b789:	pop    r15
   2b78b:	ret    
   2b78c:	test   rbx,rbx
   2b78f:	jne    2b8d2 <IntraChromaPrediction+0xbe2>
   2b795:	mov    QWORD PTR [rsp+0x30],0x0
   2b79e:	mov    rax,QWORD PTR [rsp+0x28]
   2b7a3:	xor    ebp,ebp
   2b7a5:	shl    rax,0x4
   2b7a9:	mov    QWORD PTR [rsp+0x50],rax
   2b7ae:	mov    edx,DWORD PTR [rsp+0x20]
   2b7b2:	mov    rax,QWORD PTR [rsp+0x30]
   2b7b7:	add    rax,QWORD PTR [rip+0x87312]        # b2ad0 <imgUV_org>
   2b7be:	test   edx,edx
   2b7c0:	jle    2b8ad <IntraChromaPrediction+0xbbd>
   2b7c6:	mov    QWORD PTR [rsp+0x10],0x0
   2b7cf:	mov    r14,QWORD PTR [rax]
   2b7d2:	xor    ebx,ebx
   2b7d4:	lea    rax,[rsp+0x2e0]
   2b7dc:	mov    QWORD PTR [rsp+0x8],rax
   2b7e1:	mov    rax,QWORD PTR [rsp+0x50]
   2b7e6:	shl    rax,0x4
   2b7ea:	mov    QWORD PTR [rsp+0x38],rax
   2b7ef:	mov    eax,DWORD PTR [rsp+0x18]
   2b7f3:	mov    r15,QWORD PTR [rsp+0x38]
   2b7f8:	xor    r13d,r13d
   2b7fb:	test   eax,eax
   2b7fd:	jle    2b88e <IntraChromaPrediction+0xb9e>
   2b803:	mov    r9,QWORD PTR [rsp+0x8]
   2b808:	lea    r10,[rbx+r15*2]
   2b80c:	mov    rdi,r12
   2b80f:	xor    r11d,r11d
   2b812:	add    r10,QWORD PTR [rip+0x5cd97]        # 885b0 <img>
   2b819:	movsxd rdx,DWORD PTR [r9+0x14]
   2b81d:	movsxd rax,DWORD PTR [r9+0x10]
   2b821:	mov    rcx,r10
   2b824:	mov    rdx,QWORD PTR [r14+rdx*8]
   2b828:	add    rax,r13
   2b82b:	lea    rsi,[rdx+rax*2]
   2b82f:	xor    eax,eax
   2b831:	movzx  edx,WORD PTR [rsi+rax*2]
   2b835:	movzx  r8d,WORD PTR [rcx+0x2138]
   2b83d:	add    rcx,0x20
   2b841:	sub    edx,r8d
   2b844:	mov    DWORD PTR [rdi+rax*4],edx
   2b847:	add    rax,0x1
   2b84b:	cmp    rax,0x4
   2b84f:	jne    2b831 <IntraChromaPrediction+0xb41>
   2b851:	add    r11d,0x4
   2b855:	add    r9,0x18
   2b859:	add    r10,0x2
   2b85d:	add    rdi,0x10
   2b861:	cmp    r11d,0x10
   2b865:	jne    2b819 <IntraChromaPrediction+0xb29>
   2b867:	mov    rax,QWORD PTR [rip+0x5cd4a]        # 885b8 <input>
   2b86e:	mov    rdi,r12
   2b871:	add    r13,0x4
   2b875:	add    r15,0x40
   2b879:	mov    esi,DWORD PTR [rax+0x18]
   2b87c:	call   3bae0 <SATD>
   2b881:	add    ebp,eax
   2b883:	cmp    DWORD PTR [rsp+0x18],r13d
   2b888:	jg     2b803 <IntraChromaPrediction+0xb13>
   2b88e:	add    QWORD PTR [rsp+0x10],0x4
   2b894:	add    rbx,0x8
   2b898:	mov    rax,QWORD PTR [rsp+0x10]
   2b89d:	add    QWORD PTR [rsp+0x8],0x60
   2b8a3:	cmp    DWORD PTR [rsp+0x20],eax
   2b8a7:	jg     2b7ef <IntraChromaPrediction+0xaff>
   2b8ad:	add    QWORD PTR [rsp+0x30],0x8
   2b8b3:	mov    rax,QWORD PTR [rsp+0x30]
   2b8b8:	add    QWORD PTR [rsp+0x50],0x40
   2b8be:	cmp    rax,0x10
   2b8c2:	jne    2b7ae <IntraChromaPrediction+0xabe>
   2b8c8:	cmp    ebp,DWORD PTR [rsp+0x60]
   2b8cc:	jl     2bbe6 <IntraChromaPrediction+0xef6>
   2b8d2:	cmp    DWORD PTR [rsp+0x48],0x3
   2b8d7:	je     2b744 <IntraChromaPrediction+0xa54>
   2b8dd:	mov    rax,QWORD PTR [rip+0x5ccd4]        # 885b8 <input>
   2b8e4:	mov    eax,DWORD PTR [rax+0x974]
   2b8ea:	jmp    2b49a <IntraChromaPrediction+0x7aa>
   2b8ef:	mov    r9d,DWORD PTR [rsp+0x18]
   2b8f4:	test   r9d,r9d
   2b8f7:	jle    2b3ab <IntraChromaPrediction+0x6bb>
   2b8fd:	mov    rax,QWORD PTR [rsp+0x78]
   2b902:	mov    rsi,QWORD PTR [rsp+0x100]
   2b90a:	mov    rdi,QWORD PTR [rsp+0xb0]
   2b912:	mov    rcx,QWORD PTR [rsp+0xf0]
   2b91a:	add    rcx,QWORD PTR [r14+rax*1]
   2b91e:	xor    eax,eax
   2b920:	movzx  edx,WORD PTR [rcx+rax*2]
   2b924:	mov    DWORD PTR [rdi+rax*4],edx
   2b927:	mov    rdx,rax
   2b92a:	add    rax,0x1
   2b92e:	cmp    rdx,rsi
   2b931:	jne    2b920 <IntraChromaPrediction+0xc30>
   2b933:	mov    rbx,QWORD PTR [rsp+0x110]
   2b93b:	mov    rax,r15
   2b93e:	mov    edi,DWORD PTR [rsp+0x20]
   2b942:	shl    rax,0x5
   2b946:	mov    rsi,QWORD PTR [rsp+0xb0]
   2b94e:	mov    r8,QWORD PTR [rsp+0xf8]
   2b956:	mov    r9,QWORD PTR [rsp+0x138]
   2b95e:	lea    rdx,[rbx+rax*1+0x2]
   2b963:	test   edi,edi
   2b965:	jle    2b980 <IntraChromaPrediction+0xc90>
   2b967:	movzx  ecx,WORD PTR [rsi]
   2b96a:	lea    rax,[r9+rdx*1]
   2b96e:	xchg   ax,ax
   2b970:	mov    WORD PTR [rax+0x2538],cx
   2b977:	add    rax,0x2
   2b97b:	cmp    rax,rdx
   2b97e:	jne    2b970 <IntraChromaPrediction+0xc80>
   2b980:	add    rsi,0x4
   2b984:	add    rdx,0x20
   2b988:	cmp    r8,rsi
   2b98b:	jne    2b963 <IntraChromaPrediction+0xc73>
   2b98d:	cmp    BYTE PTR [rsp+0x50],0x0
   2b992:	je     2b3b6 <IntraChromaPrediction+0x6c6>
   2b998:	mov    r8d,DWORD PTR [rsp+0x20]
   2b99d:	mov    rdi,QWORD PTR [rsp+0xd0]
   2b9a5:	lea    rdx,[rsp+0x30c]
   2b9ad:	mov    rax,r12
   2b9b0:	test   r8d,r8d
   2b9b3:	jle    2b9d4 <IntraChromaPrediction+0xce4>
   2b9b5:	movsxd rcx,DWORD PTR [rdx]
   2b9b8:	movsxd rsi,DWORD PTR [rdx-0x4]
   2b9bc:	add    rax,0x4
   2b9c0:	add    rdx,0x18
   2b9c4:	mov    rcx,QWORD PTR [r14+rcx*8]
   2b9c8:	movzx  ecx,WORD PTR [rcx+rsi*2]
   2b9cc:	mov    DWORD PTR [rax-0x4],ecx
   2b9cf:	cmp    rdi,rax
   2b9d2:	jne    2b9b5 <IntraChromaPrediction+0xcc5>
   2b9d4:	mov    edi,DWORD PTR [rsp+0x18]
   2b9d8:	test   edi,edi
   2b9da:	jle    2ba21 <IntraChromaPrediction+0xd31>
   2b9dc:	mov    rcx,r15
   2b9df:	mov    edi,DWORD PTR [rsp+0x20]
   2b9e3:	mov    r8,QWORD PTR [rsp+0x68]
   2b9e8:	shl    rcx,0x5
   2b9ec:	mov    rsi,QWORD PTR [rsp+0x108]
   2b9f4:	add    rcx,rbp
   2b9f7:	xor    eax,eax
   2b9f9:	test   edi,edi
   2b9fb:	jle    2ba18 <IntraChromaPrediction+0xd28>
   2b9fd:	nop    DWORD PTR [rax]
   2ba00:	mov    edx,DWORD PTR [r12+rax*4]
   2ba04:	mov    WORD PTR [rcx+rax*2+0x2338],dx
   2ba0c:	mov    rdx,rax
   2ba0f:	add    rax,0x1
   2ba13:	cmp    rdx,rsi
   2ba16:	jne    2ba00 <IntraChromaPrediction+0xd10>
   2ba18:	add    rcx,0x20
   2ba1c:	cmp    rcx,r8
   2ba1f:	jne    2b9f7 <IntraChromaPrediction+0xd07>
   2ba21:	mov    eax,DWORD PTR [rsp]
   2ba24:	test   eax,eax
   2ba26:	je     2b3b6 <IntraChromaPrediction+0x6c6>
   2ba2c:	mov    eax,DWORD PTR [rsp+0x64]
   2ba30:	test   eax,eax
   2ba32:	je     2b3b6 <IntraChromaPrediction+0x6c6>
   2ba38:	movsxd rax,DWORD PTR [rsp+0x134]
   2ba40:	mov    rbx,QWORD PTR [rsp+0xc8]
   2ba48:	mov    esi,DWORD PTR [rsp+0xe4]
   2ba4f:	mov    r9d,DWORD PTR [rsp+rax*4+0x160]
   2ba57:	mov    rax,QWORD PTR [rsp+0xc0]
   2ba5f:	mov    rax,QWORD PTR [r14+rax*1]
   2ba63:	mov    edx,r9d
   2ba66:	movzx  edi,WORD PTR [rax+rbx*1]
   2ba6a:	mov    eax,DWORD PTR [rsp+0x11c]
   2ba71:	sub    edx,edi
   2ba73:	imul   edx,eax
   2ba76:	test   esi,esi
   2ba78:	jle    2baab <IntraChromaPrediction+0xdbb>
   2ba7a:	mov    r10,QWORD PTR [rsp+0xd8]
   2ba82:	sub    eax,0x2
   2ba85:	lea    r8,[rax+0x2]
   2ba89:	mov    eax,0x1
   2ba8e:	mov    rsi,r10
   2ba91:	mov    ecx,DWORD PTR [r10+rax*4-0x4]
   2ba96:	sub    ecx,DWORD PTR [rsi-0x8]
   2ba99:	sub    rsi,0x4
   2ba9d:	imul   ecx,eax
   2baa0:	add    rax,0x1
   2baa4:	add    edx,ecx
   2baa6:	cmp    r8,rax
   2baa9:	jne    2ba91 <IntraChromaPrediction+0xda1>
   2baab:	movsxd rax,DWORD PTR [rsp+0x74]
   2bab0:	mov    ebx,DWORD PTR [rsp+0x60]
   2bab4:	mov    ecx,DWORD PTR [rsp+0xe0]
   2babb:	mov    r8d,DWORD PTR [rsp+rax*4+0x1a0]
   2bac3:	mov    eax,r8d
   2bac6:	sub    eax,edi
   2bac8:	imul   eax,ebx
   2bacb:	test   ecx,ecx
   2bacd:	jle    2bb00 <IntraChromaPrediction+0xe10>
   2bacf:	mov    r11,QWORD PTR [rsp+0xe8]
   2bad7:	lea    ecx,[rbx-0x2]
   2bada:	lea    r10,[rcx+0x2]
   2bade:	mov    ecx,0x1
   2bae3:	mov    rdi,r11
   2bae6:	mov    esi,DWORD PTR [r11+rcx*4-0x4]
   2baeb:	sub    esi,DWORD PTR [rdi-0x8]
   2baee:	sub    rdi,0x4
   2baf2:	imul   esi,ecx
   2baf5:	add    rcx,0x1
   2baf9:	add    eax,esi
   2bafb:	cmp    r10,rcx
   2bafe:	jne    2bae6 <IntraChromaPrediction+0xdf6>
   2bb00:	cmp    DWORD PTR [rsp+0x18],0x8
   2bb05:	je     2bc7a <IntraChromaPrediction+0xf8a>
   2bb0b:	lea    edi,[rdx+rdx*4]
   2bb0e:	add    edi,DWORD PTR [rsp+0x118]
   2bb15:	movzx  ecx,BYTE PTR [rsp+0x120]
   2bb1d:	lea    edx,[r9+r8*1]
   2bb21:	sar    edi,cl
   2bb23:	mov    ecx,edx
   2bb25:	shl    ecx,0x4
   2bb28:	cmp    DWORD PTR [rsp+0x20],0x8
   2bb2d:	je     2bc88 <IntraChromaPrediction+0xf98>
   2bb33:	mov    r13d,DWORD PTR [rsp+0x20]
   2bb38:	lea    ebx,[rax+rax*4]
   2bb3b:	add    ebx,DWORD PTR [rsp+0x94]
   2bb42:	sar    ebx,0x6
   2bb45:	test   r13d,r13d
   2bb48:	jle    2b3b6 <IntraChromaPrediction+0x6c6>
   2bb4e:	mov    eax,DWORD PTR [rsp+0x130]
   2bb55:	xor    r11d,r11d
   2bb58:	xor    r9d,r9d
   2bb5b:	lea    r10d,[rax+0x1]
   2bb5f:	mov    rax,QWORD PTR [rsp+0x68]
   2bb64:	imul   r10d,ebx
   2bb68:	lea    r8,[rax+0x2738]
   2bb6f:	mov    eax,DWORD PTR [rsp+0x124]
   2bb76:	add    eax,0x1
   2bb79:	imul   eax,edi
   2bb7c:	lea    r13d,[rcx+rax*1+0x10]
   2bb81:	mov    rax,QWORD PTR [rsp+0x128]
   2bb89:	neg    rax
   2bb8c:	shl    rax,0x5
   2bb90:	mov    r14,rax
   2bb93:	mov    eax,DWORD PTR [rsp+0x18]
   2bb97:	test   eax,eax
   2bb99:	jle    2bbcf <IntraChromaPrediction+0xedf>
   2bb9b:	mov    esi,DWORD PTR [rbp+0x11bf0]
   2bba1:	lea    ecx,[r13+r10*1+0x0]
   2bba6:	lea    rdx,[r14+r8*1]
   2bbaa:	nop    WORD PTR [rax+rax*1+0x0]
   2bbb0:	mov    eax,ecx
   2bbb2:	sar    eax,0x5
   2bbb5:	cmp    eax,esi
   2bbb7:	cmovg  eax,esi
   2bbba:	test   eax,eax
   2bbbc:	cmovs  eax,r9d
   2bbc0:	add    rdx,0x20
   2bbc4:	add    ecx,edi
   2bbc6:	mov    WORD PTR [rdx-0x20],ax
   2bbca:	cmp    r8,rdx
   2bbcd:	jne    2bbb0 <IntraChromaPrediction+0xec0>
   2bbcf:	add    r11d,0x1
   2bbd3:	add    r10d,ebx
   2bbd6:	add    r8,0x2
   2bbda:	cmp    DWORD PTR [rsp+0x20],r11d
   2bbdf:	jg     2bb93 <IntraChromaPrediction+0xea3>
   2bbe1:	jmp    2b3b6 <IntraChromaPrediction+0x6c6>
   2bbe6:	mov    eax,DWORD PTR [rsp+0x40]
   2bbea:	mov    DWORD PTR [rsp+0x60],ebp
   2bbee:	mov    DWORD PTR [rsp+0x58],eax
   2bbf2:	jmp    2b8d2 <IntraChromaPrediction+0xbe2>
   2bbf7:	movsxd rdx,DWORD PTR [rsp+0x144]
   2bbff:	mov    rax,QWORD PTR [rbp+0x11868]
   2bc06:	mov    eax,DWORD PTR [rax+rdx*4]
   2bc09:	mov    DWORD PTR [rsp],eax
   2bc0c:	jmp    2af3e <IntraChromaPrediction+0x24e>
   2bc11:	mov    r8d,DWORD PTR [rsp+0x1c]
   2bc16:	test   r8d,r8d
   2bc19:	je     2b49a <IntraChromaPrediction+0x7aa>
   2bc1f:	mov    edi,DWORD PTR [rsp+0x24]
   2bc23:	test   edi,edi
   2bc25:	jne    2b795 <IntraChromaPrediction+0xaa5>
   2bc2b:	jmp    2b49a <IntraChromaPrediction+0x7aa>
   2bc30:	mov    r14d,DWORD PTR [rsp+0x64]
   2bc35:	test   r14d,r14d
   2bc38:	je     2b744 <IntraChromaPrediction+0xa54>
   2bc3e:	test   dl,dl
   2bc40:	je     2b795 <IntraChromaPrediction+0xaa5>
   2bc46:	jmp    2b744 <IntraChromaPrediction+0xa54>
   2bc4b:	mov    eax,DWORD PTR [rsp+0x20]
   2bc4f:	mov    DWORD PTR [rsp+0x1c],0x1
   2bc57:	movsxd rsi,DWORD PTR [rsp+0x60]
   2bc5c:	sub    eax,0x1
   2bc5f:	mov    DWORD PTR [rsp+0x74],eax
   2bc63:	jmp    2b005 <IntraChromaPrediction+0x315>
   2bc68:	mov    BYTE PTR [rsp+0x50],0x1
   2bc6d:	mov    DWORD PTR [rsp+0x24],0x1
   2bc75:	jmp    2af93 <IntraChromaPrediction+0x2a3>
   2bc7a:	mov    ecx,edx
   2bc7c:	shl    ecx,0x4
   2bc7f:	lea    edi,[rdx+rcx*1+0x10]
   2bc83:	jmp    2bb15 <IntraChromaPrediction+0xe25>
   2bc88:	mov    edx,eax
   2bc8a:	shl    edx,0x4
   2bc8d:	lea    ebx,[rdx+rax*1]
   2bc90:	add    ebx,DWORD PTR [rsp+0x94]
   2bc97:	sar    ebx,0x5
   2bc9a:	jmp    2bb4e <IntraChromaPrediction+0xe5e>
   2bc9f:	call   4390 <__stack_chk_fail@plt>
   2bca4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2bcaf:	nop

000000000002bcb0 <ZeroRef>:
   2bcb0:	endbr64 
   2bcb4:	mov    rax,QWORD PTR [rip+0x5eced]        # 8a9a8 <enc_picture>
   2bcbb:	mov    rcx,QWORD PTR [rax+0x1950]
   2bcc2:	mov    rax,QWORD PTR [rip+0x5c8e7]        # 885b0 <img>
   2bcc9:	movsxd rdx,DWORD PTR [rax+0x94]
   2bcd0:	movsxd rsi,DWORD PTR [rax+0x90]
   2bcd7:	mov    rax,QWORD PTR [rcx]
   2bcda:	add    rdx,rdx
   2bcdd:	lea    rsi,[rax+rsi*8]
   2bce1:	lea    r8,[rdx+0x8]
   2bce5:	lea    rdi,[rsi+0x20]
   2bce9:	mov    rax,rsi
   2bcec:	mov    rcx,QWORD PTR [rax]
   2bcef:	cmp    WORD PTR [rcx+rdx*1],0x0
   2bcf4:	jne    2bd10 <ZeroRef+0x60>
   2bcf6:	add    rax,0x8
   2bcfa:	cmp    rdi,rax
   2bcfd:	jne    2bcec <ZeroRef+0x3c>
   2bcff:	add    rdx,0x2
   2bd03:	cmp    rdx,r8
   2bd06:	jne    2bce9 <ZeroRef+0x39>
   2bd08:	mov    eax,0x1
   2bd0d:	ret    
   2bd0e:	xchg   ax,ax
   2bd10:	xor    eax,eax
   2bd12:	ret    
   2bd13:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2bd1e:	xchg   ax,ax

000000000002bd20 <MBType2Value>:
   2bd20:	endbr64 
   2bd24:	mov    rcx,QWORD PTR [rip+0x5c885]        # 885b0 <img>
   2bd2b:	mov    eax,DWORD PTR [rdi+0x48]
   2bd2e:	mov    edx,DWORD PTR [rcx+0x18]
   2bd31:	cmp    edx,0x1
   2bd34:	je     2bda0 <MBType2Value+0x80>
   2bd36:	mov    esi,eax
   2bd38:	and    esi,0xfffffffb
   2bd3b:	cmp    esi,0x9
   2bd3e:	je     2bd78 <MBType2Value+0x58>
   2bd40:	cmp    eax,0xa
   2bd43:	je     2bdf0 <MBType2Value+0xd0>
   2bd49:	cmp    eax,0x8
   2bd4c:	jne    2bd95 <MBType2Value+0x75>
   2bd4e:	mov    rdx,QWORD PTR [rip+0x5c863]        # 885b8 <input>
   2bd55:	mov    eax,0x4
   2bd5a:	mov    edx,DWORD PTR [rdx+0x934]
   2bd60:	test   edx,edx
   2bd62:	jne    2bd95 <MBType2Value+0x75>
   2bd64:	call   2bcb0 <ZeroRef>
   2bd69:	test   eax,eax
   2bd6b:	setne  al
   2bd6e:	movzx  eax,al
   2bd71:	add    eax,0x4
   2bd74:	ret    
   2bd75:	nop    DWORD PTR [rax]
   2bd78:	cmp    edx,0x2
   2bd7b:	mov    eax,0x0
   2bd80:	mov    edx,0x6
   2bd85:	cmovne eax,edx
   2bd88:	ret    
   2bd89:	nop    DWORD PTR [rax+0x0]
   2bd90:	mov    eax,0x16
   2bd95:	ret    
   2bd96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2bda0:	test   eax,eax
   2bda2:	je     2bd95 <MBType2Value+0x75>
   2bda4:	mov    edx,eax
   2bda6:	and    edx,0xfffffffb
   2bda9:	cmp    edx,0x9
   2bdac:	je     2be10 <MBType2Value+0xf0>
   2bdae:	cmp    eax,0xa
   2bdb1:	je     2be20 <MBType2Value+0x100>
   2bdb3:	cmp    eax,0x8
   2bdb6:	je     2bd90 <MBType2Value+0x70>
   2bdb8:	movsxd rdx,DWORD PTR [rdi+0x1e8]
   2bdbf:	cmp    eax,0x1
   2bdc2:	je     2be30 <MBType2Value+0x110>
   2bdc4:	movsxd rcx,DWORD PTR [rdi+0x1f4]
   2bdcb:	lea    rdx,[rdx+rdx*2]
   2bdcf:	add    rdx,rcx
   2bdd2:	cmp    eax,0x2
   2bdd5:	lea    rcx,[rip+0x49284]        # 75060 <dir2offset.5973>
   2bddc:	setne  al
   2bddf:	movzx  eax,al
   2bde2:	add    eax,DWORD PTR [rcx+rdx*4]
   2bde5:	add    eax,0x4
   2bde8:	ret    
   2bde9:	nop    DWORD PTR [rax+0x0]
   2bdf0:	cmp    edx,0x2
   2bdf3:	mov    eax,0x0
   2bdf8:	mov    edx,0x6
   2bdfd:	cmovne eax,edx
   2be00:	add    eax,DWORD PTR [rcx+0x11abc]
   2be06:	ret    
   2be07:	nop    WORD PTR [rax+rax*1+0x0]
   2be10:	mov    eax,0x17
   2be15:	ret    
   2be16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2be20:	mov    eax,DWORD PTR [rcx+0x11abc]
   2be26:	add    eax,0x17
   2be29:	ret    
   2be2a:	nop    WORD PTR [rax+rax*1+0x0]
   2be30:	lea    rax,[rip+0x49251]        # 75088 <dir1offset.5972>
   2be37:	mov    eax,DWORD PTR [rax+rdx*4]
   2be3a:	ret    
   2be3b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002be40 <writeIntra4x4Modes>:
   2be40:	endbr64 
   2be44:	push   r15
   2be46:	xor    r10d,r10d
   2be49:	push   r14
   2be4b:	push   r13
   2be4d:	push   r12
   2be4f:	xor    r12d,r12d
   2be52:	push   rbp
   2be53:	mov    ecx,r12d
   2be56:	push   rbx
   2be57:	sub    rsp,0xb8
   2be5e:	mov    r14,QWORD PTR [rip+0x5c753]        # 885b8 <input>
   2be65:	mov    rax,QWORD PTR fs:0x28
   2be6e:	mov    QWORD PTR [rsp+0xa8],rax
   2be76:	xor    eax,eax
   2be78:	mov    rax,QWORD PTR [rip+0x5c731]        # 885b0 <img>
   2be7f:	movsxd rbx,DWORD PTR [rax+0xc]
   2be83:	imul   rbx,rbx,0x278
   2be8a:	add    rbx,QWORD PTR [rax+0x3758]
   2be91:	movsxd rdx,DWORD PTR [rbx]
   2be94:	lea    rdx,[rdx+rdx*2]
   2be98:	shl    rdx,0x4
   2be9c:	lea    rbp,[rax+rdx*1+0x3760]
   2bea4:	mov    rax,QWORD PTR [rax+0x3750]
   2beab:	movsxd rdx,DWORD PTR [r14+0x93c]
   2beb2:	mov    r12,rbp
   2beb5:	mov    ebp,edi
   2beb7:	mov    QWORD PTR [rsp+0x8],rax
   2bebc:	lea    rax,[rip+0x5eaad]        # 8a970 <assignSE2partition>
   2bec3:	mov    rax,QWORD PTR [rax+rdx*8]
   2bec7:	mov    QWORD PTR [rsp+0x10],rax
   2becc:	mov    eax,edi
   2bece:	shr    eax,0x1f
   2bed1:	mov    DWORD PTR [rsp+0x18],eax
   2bed5:	mov    eax,DWORD PTR [rbx+r10*4+0x1d8]
   2bedd:	lea    edx,[rax-0xb]
   2bee0:	and    edx,0xfffffffd
   2bee3:	jne    2bef9 <writeIntra4x4Modes+0xb9>
   2bee5:	cmp    BYTE PTR [rsp+0x18],0x0
   2beea:	jne    2c030 <writeIntra4x4Modes+0x1f0>
   2bef0:	cmp    ebp,r10d
   2bef3:	je     2c030 <writeIntra4x4Modes+0x1f0>
   2bef9:	add    r10,0x1
   2befd:	cmp    r10,0x4
   2bf01:	jne    2bed5 <writeIntra4x4Modes+0x95>
   2bf03:	mov    rbp,r12
   2bf06:	mov    r12d,ecx
   2bf09:	test   ecx,ecx
   2bf0b:	je     2bffb <writeIntra4x4Modes+0x1bb>
   2bf11:	lea    r15d,[rcx-0x1]
   2bf15:	xor    r12d,r12d
   2bf18:	lea    r13,[rsp+0x20]
   2bf1d:	xor    edx,edx
   2bf1f:	lea    rax,[r15*4+0x0]
   2bf27:	mov    rsi,r14
   2bf2a:	lea    r15,[rsp+0x60]
   2bf2f:	mov    r14d,r12d
   2bf32:	mov    QWORD PTR [rsp+0x18],rax
   2bf37:	mov    r12,r13
   2bf3a:	mov    r13,rdx
   2bf3d:	jmp    2bf89 <writeIntra4x4Modes+0x149>
   2bf3f:	nop
   2bf40:	mov    rax,QWORD PTR [rsp+0x10]
   2bf45:	mov    DWORD PTR [rbp+0x0],0x4
   2bf4c:	movsxd rsi,DWORD PTR [rax+0x10]
   2bf50:	mov    rax,rsi
   2bf53:	shl    rax,0x4
   2bf57:	sub    rax,rsi
   2bf5a:	lea    rsi,[rdi+rax*8]
   2bf5e:	mov    rdi,rbp
   2bf61:	call   66b30 <writeSyntaxElement_Intra4x4PredictionMode>
   2bf66:	mov    eax,DWORD PTR [rbp+0xc]
   2bf69:	add    rbp,0x30
   2bf6d:	add    DWORD PTR [rbx+0x28],eax
   2bf70:	add    r14d,DWORD PTR [rbp-0x24]
   2bf74:	add    DWORD PTR [rbx],0x1
   2bf77:	cmp    QWORD PTR [rsp+0x18],r13
   2bf7c:	je     2bff8 <writeIntra4x4Modes+0x1b8>
   2bf7e:	mov    rsi,QWORD PTR [rip+0x5c633]        # 885b8 <input>
   2bf85:	add    r13,0x4
   2bf89:	mov    DWORD PTR [rbx+0x210],0x1
   2bf93:	mov    eax,DWORD PTR [r15+r13*1]
   2bf97:	mov    DWORD PTR [rbp+0x8],0x0
   2bf9e:	mov    DWORD PTR [rbp+0x18],eax
   2bfa1:	mov    eax,DWORD PTR [r12+r13*1]
   2bfa5:	mov    DWORD PTR [rbp+0x4],eax
   2bfa8:	mov    rax,QWORD PTR [rsp+0x8]
   2bfad:	mov    rdi,QWORD PTR [rax+0x18]
   2bfb1:	mov    eax,DWORD PTR [rsi+0x934]
   2bfb7:	test   eax,eax
   2bfb9:	je     2bf40 <writeIntra4x4Modes+0x100>
   2bfbb:	lea    rax,[rip+0xfffffffffffe186e]        # d830 <writeIntraPredMode_CABAC>
   2bfc2:	mov    DWORD PTR [rbp+0x0],0x4
   2bfc9:	mov    QWORD PTR [rbp+0x28],rax
   2bfcd:	mov    rax,QWORD PTR [rsp+0x10]
   2bfd2:	movsxd rsi,DWORD PTR [rax+0x10]
   2bfd6:	mov    rax,rsi
   2bfd9:	shl    rax,0x4
   2bfdd:	sub    rax,rsi
   2bfe0:	lea    rax,[rdi+rax*8]
   2bfe4:	mov    rdi,rbp
   2bfe7:	mov    rsi,rax
   2bfea:	call   QWORD PTR [rax+0x70]
   2bfed:	jmp    2bf66 <writeIntra4x4Modes+0x126>
   2bff2:	nop    WORD PTR [rax+rax*1+0x0]
   2bff8:	mov    r12d,r14d
   2bffb:	mov    rax,QWORD PTR [rsp+0xa8]
   2c003:	xor    rax,QWORD PTR fs:0x28
   2c00c:	jne    2c0a7 <writeIntra4x4Modes+0x267>
   2c012:	add    rsp,0xb8
   2c019:	mov    eax,r12d
   2c01c:	pop    rbx
   2c01d:	pop    rbp
   2c01e:	pop    r12
   2c020:	pop    r13
   2c022:	pop    r14
   2c024:	pop    r15
   2c026:	ret    
   2c027:	nop    WORD PTR [rax+rax*1+0x0]
   2c030:	xor    edi,edi
   2c032:	cmp    eax,0xd
   2c035:	lea    r11,[rsp+0x20]
   2c03a:	sete   dil
   2c03e:	lea    r13d,[r10*4+0x0]
   2c046:	lea    r9,[rsp+0x60]
   2c04b:	xor    r15d,r15d
   2c04e:	add    edi,0x1
   2c051:	nop    DWORD PTR [rax+0x0]
   2c058:	lea    esi,[r15+r15*1]
   2c05c:	mov    r8d,r13d
   2c05f:	lea    eax,[rcx+0x1]
   2c062:	xor    edx,edx
   2c064:	or     r8d,esi
   2c067:	cdqe   
   2c069:	add    esi,r13d
   2c06c:	nop    DWORD PTR [rax+0x0]
   2c070:	mov    ecx,r8d
   2c073:	or     ecx,edx
   2c075:	movsxd rcx,ecx
   2c078:	mov    ecx,DWORD PTR [rbx+rcx*4+0x14c]
   2c07f:	mov    DWORD PTR [r11+rax*4-0x4],ecx
   2c084:	lea    ecx,[rdx+rsi*1]
   2c087:	add    edx,edi
   2c089:	mov    DWORD PTR [r9+rax*4-0x4],ecx
   2c08e:	mov    ecx,eax
   2c090:	add    rax,0x1
   2c094:	cmp    edx,0x1
   2c097:	je     2c070 <writeIntra4x4Modes+0x230>
   2c099:	add    r15d,edi
   2c09c:	cmp    r15d,0x1
   2c0a0:	je     2c058 <writeIntra4x4Modes+0x218>
   2c0a2:	jmp    2bef9 <writeIntra4x4Modes+0xb9>
   2c0a7:	call   4390 <__stack_chk_fail@plt>
   2c0ac:	nop    DWORD PTR [rax+0x0]

000000000002c0b0 <B8Mode2Value>:
   2c0b0:	endbr64 
   2c0b4:	mov    rax,QWORD PTR [rip+0x5c4f5]        # 885b0 <img>
   2c0bb:	cmp    DWORD PTR [rax+0x18],0x1
   2c0bf:	je     2c0c8 <B8Mode2Value+0x18>
   2c0c1:	lea    eax,[rdi-0x4]
   2c0c4:	ret    
   2c0c5:	nop    DWORD PTR [rax]
   2c0c8:	movsxd rdx,edi
   2c0cb:	lea    rax,[rip+0x48f4e]        # 75020 <b8inc.6014>
   2c0d2:	imul   esi,DWORD PTR [rax+rdx*4]
   2c0d6:	lea    rax,[rip+0x48f63]        # 75040 <b8start.6013>
   2c0dd:	add    esi,DWORD PTR [rax+rdx*4]
   2c0e0:	mov    eax,esi
   2c0e2:	ret    
   2c0e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c0ee:	xchg   ax,ax

000000000002c0f0 <write_terminating_bit>:
   2c0f0:	endbr64 
   2c0f4:	mov    rax,QWORD PTR [rip+0x5c4b5]        # 885b0 <img>
   2c0fb:	mov    r8d,edi
   2c0fe:	movsx  esi,r8w
   2c102:	mov    rcx,QWORD PTR [rax+0x3750]
   2c109:	mov    rax,QWORD PTR [rip+0x5c4a8]        # 885b8 <input>
   2c110:	movsxd rdx,DWORD PTR [rax+0x93c]
   2c117:	lea    rax,[rip+0x5e852]        # 8a970 <assignSE2partition>
   2c11e:	mov    rax,QWORD PTR [rax+rdx*8]
   2c122:	movsxd rdx,DWORD PTR [rax+0x8]
   2c126:	mov    rax,rdx
   2c129:	shl    rax,0x4
   2c12d:	sub    rax,rdx
   2c130:	mov    rdx,QWORD PTR [rcx+0x18]
   2c134:	lea    rdi,[rdx+rax*8]
   2c138:	mov    rax,QWORD PTR [rdi]
   2c13b:	add    rdi,0x8
   2c13f:	mov    DWORD PTR [rax+0x28],0x1
   2c146:	jmp    5570 <biari_encode_symbol_final>
   2c14b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002c150 <writeChromaIntraPredMode>:
   2c150:	endbr64 
   2c154:	push   rbp
   2c155:	lea    r9,[rip+0x5e814]        # 8a970 <assignSE2partition>
   2c15c:	push   rbx
   2c15d:	sub    rsp,0x8
   2c161:	mov    rax,QWORD PTR [rip+0x5c448]        # 885b0 <img>
   2c168:	mov    rsi,QWORD PTR [rip+0x5c449]        # 885b8 <input>
   2c16f:	movsxd rbp,DWORD PTR [rax+0xc]
   2c173:	movsxd r10,DWORD PTR [rsi+0x93c]
   2c17a:	mov    esi,DWORD PTR [rsi+0x934]
   2c180:	mov    r8,QWORD PTR [rax+0x3750]
   2c187:	imul   rbp,rbp,0x278
   2c18e:	add    rbp,QWORD PTR [rax+0x3758]
   2c195:	mov    r9,QWORD PTR [r9+r10*8]
   2c199:	movsxd rdx,DWORD PTR [rbp+0x0]
   2c19d:	lea    rcx,[rdx+rdx*2]
   2c1a1:	shl    rcx,0x4
   2c1a5:	lea    rdi,[rax+rcx*1+0x3760]
   2c1ad:	test   esi,esi
   2c1af:	jne    2c228 <writeChromaIntraPredMode+0xd8>
   2c1b1:	lea    rsi,[rip+0x3a0f8]        # 662b0 <ue_linfo>
   2c1b8:	mov    QWORD PTR [rax+rcx*1+0x3780],rsi
   2c1c0:	lea    rbx,[rdx+rdx*2]
   2c1c4:	shl    rbx,0x4
   2c1c8:	add    rbx,rax
   2c1cb:	mov    eax,DWORD PTR [rbp+0x20c]
   2c1d1:	mov    DWORD PTR [rbx+0x3768],0x0
   2c1db:	mov    DWORD PTR [rbx+0x3764],eax
   2c1e1:	mov    DWORD PTR [rbx+0x3760],0x4
   2c1eb:	movsxd rdx,DWORD PTR [r9+0x10]
   2c1ef:	mov    rax,rdx
   2c1f2:	shl    rax,0x4
   2c1f6:	sub    rax,rdx
   2c1f9:	mov    rdx,QWORD PTR [r8+0x18]
   2c1fd:	lea    rax,[rdx+rax*8]
   2c201:	mov    rsi,rax
   2c204:	call   QWORD PTR [rax+0x70]
   2c207:	mov    eax,DWORD PTR [rbx+0x376c]
   2c20d:	add    DWORD PTR [rbp+0x2c],eax
   2c210:	mov    eax,DWORD PTR [rbx+0x376c]
   2c216:	add    DWORD PTR [rbp+0x0],0x1
   2c21a:	add    rsp,0x8
   2c21e:	pop    rbx
   2c21f:	pop    rbp
   2c220:	ret    
   2c221:	nop    DWORD PTR [rax+0x0]
   2c228:	lea    rsi,[rip+0xfffffffffffe2611]        # e840 <writeCIPredMode_CABAC>
   2c22f:	mov    QWORD PTR [rax+rcx*1+0x3788],rsi
   2c237:	jmp    2c1c0 <writeChromaIntraPredMode+0x70>
   2c239:	nop    DWORD PTR [rax+0x0]

000000000002c240 <set_last_dquant>:
   2c240:	endbr64 
   2c244:	mov    rcx,QWORD PTR [rip+0x5c365]        # 885b0 <img>
   2c24b:	movsxd rax,DWORD PTR [rcx+0xc]
   2c24f:	imul   rax,rax,0x278
   2c256:	add    rax,QWORD PTR [rcx+0x3758]
   2c25d:	mov    edx,DWORD PTR [rax+0x48]
   2c260:	lea    esi,[rdx-0x9]
   2c263:	cmp    edx,0xd
   2c266:	ja     2c290 <set_last_dquant+0x50>
   2c268:	mov    edi,0x2601
   2c26d:	bt     rdi,rdx
   2c271:	jae    2c290 <set_last_dquant+0x50>
   2c273:	cmp    esi,0x1
   2c276:	jbe    2c290 <set_last_dquant+0x50>
   2c278:	cmp    edx,0xd
   2c27b:	je     2c290 <set_last_dquant+0x50>
   2c27d:	xor    edx,edx
   2c27f:	cmp    DWORD PTR [rcx+0x18],0x1
   2c283:	jne    2c293 <set_last_dquant+0x53>
   2c285:	mov    edx,DWORD PTR [rax+0x1cc]
   2c28b:	test   edx,edx
   2c28d:	je     2c293 <set_last_dquant+0x53>
   2c28f:	nop
   2c290:	mov    edx,DWORD PTR [rax+0x8]
   2c293:	mov    DWORD PTR [rip+0x5c627],edx        # 888c0 <last_dquant>
   2c299:	ret    
   2c29a:	nop    WORD PTR [rax+rax*1+0x0]

000000000002c2a0 <BType2CtxRef>:
   2c2a0:	endbr64 
   2c2a4:	xor    eax,eax
   2c2a6:	cmp    edi,0x3
   2c2a9:	setg   al
   2c2ac:	ret    
   2c2ad:	nop    DWORD PTR [rax]

000000000002c2b0 <writeReferenceFrame>:
   2c2b0:	endbr64 
   2c2b4:	push   r14
   2c2b6:	push   r13
   2c2b8:	push   r12
   2c2ba:	push   rbp
   2c2bb:	mov    rbp,QWORD PTR [rip+0x5c2ee]        # 885b0 <img>
   2c2c2:	push   rbx
   2c2c3:	movsxd rbx,DWORD PTR [rbp+0xc]
   2c2c7:	mov    r10,rbx
   2c2ca:	imul   rbx,rbx,0x278
   2c2d1:	add    rbx,QWORD PTR [rbp+0x3758]
   2c2d8:	movsxd r12,DWORD PTR [rbx]
   2c2db:	lea    rax,[r12+r12*2]
   2c2df:	shl    rax,0x4
   2c2e3:	lea    r9,[rbp+rax*1+0x3760]
   2c2eb:	mov    eax,DWORD PTR [rbp+0x11ad0]
   2c2f1:	test   eax,eax
   2c2f3:	je     2c303 <writeReferenceFrame+0x53>
   2c2f5:	mov    eax,DWORD PTR [rbx+0x214]
   2c2fb:	test   eax,eax
   2c2fd:	jne    2c470 <writeReferenceFrame+0x1c0>
   2c303:	test   ecx,ecx
   2c305:	jne    2c30a <writeReferenceFrame+0x5a>
   2c307:	add    eax,0x1
   2c30a:	cdqe   
   2c30c:	lea    r10,[rip+0x8b13d]        # b7450 <listXsize>
   2c313:	mov    r10d,DWORD PTR [r10+rax*4]
   2c317:	xor    eax,eax
   2c319:	cmp    r10d,0x1
   2c31d:	je     2c3d2 <writeReferenceFrame+0x122>
   2c323:	mov    rax,QWORD PTR [rip+0x5c28e]        # 885b8 <input>
   2c32a:	lea    r11,[rip+0x5e63f]        # 8a970 <assignSE2partition>
   2c331:	movsxd r13,DWORD PTR [rax+0x93c]
   2c338:	mov    r14,QWORD PTR [r11+r13*8]
   2c33c:	mov    r11,QWORD PTR [rbp+0x3750]
   2c343:	mov    r13,QWORD PTR [r11+0x18]
   2c347:	mov    r11d,DWORD PTR [rax+0x934]
   2c34e:	cmp    r10d,0x2
   2c352:	je     2c3e0 <writeReferenceFrame+0x130>
   2c358:	lea    rax,[r12+r12*2]
   2c35c:	shl    rax,0x4
   2c360:	add    rax,rbp
   2c363:	mov    DWORD PTR [rax+0x3764],r8d
   2c36a:	mov    DWORD PTR [rax+0x3768],0x0
   2c374:	mov    DWORD PTR [rax+0x3760],0x3
   2c37e:	movsxd r10,DWORD PTR [r14+0xc]
   2c382:	mov    r8,r10
   2c385:	shl    r8,0x4
   2c389:	sub    r8,r10
   2c38c:	lea    r10,[r13+r8*8+0x0]
   2c391:	mov    r8,QWORD PTR [r10+0x70]
   2c395:	test   r11d,r11d
   2c398:	jne    2c422 <writeReferenceFrame+0x172>
   2c39e:	lea    rdx,[rip+0x39f0b]        # 662b0 <ue_linfo>
   2c3a5:	mov    rsi,r10
   2c3a8:	mov    rdi,r9
   2c3ab:	mov    QWORD PTR [rax+0x3780],rdx
   2c3b2:	call   r8
   2c3b5:	lea    rax,[r12+r12*2]
   2c3b9:	shl    rax,0x4
   2c3bd:	add    rbp,rax
   2c3c0:	mov    eax,DWORD PTR [rbp+0x376c]
   2c3c6:	add    DWORD PTR [rbx+0x20],eax
   2c3c9:	mov    eax,DWORD PTR [rbp+0x376c]
   2c3cf:	add    DWORD PTR [rbx],0x1
   2c3d2:	pop    rbx
   2c3d3:	pop    rbp
   2c3d4:	pop    r12
   2c3d6:	pop    r13
   2c3d8:	pop    r14
   2c3da:	ret    
   2c3db:	nop    DWORD PTR [rax+rax*1+0x0]
   2c3e0:	lea    rax,[r12+r12*2]
   2c3e4:	shl    rax,0x4
   2c3e8:	add    rax,rbp
   2c3eb:	mov    DWORD PTR [rax+0x3764],r8d
   2c3f2:	mov    DWORD PTR [rax+0x3768],0x0
   2c3fc:	mov    DWORD PTR [rax+0x3760],0x3
   2c406:	movsxd r10,DWORD PTR [r14+0xc]
   2c40a:	mov    r8,r10
   2c40d:	shl    r8,0x4
   2c411:	sub    r8,r10
   2c414:	lea    r10,[r13+r8*8+0x0]
   2c419:	test   r11d,r11d
   2c41c:	je     2c488 <writeReferenceFrame+0x1d8>
   2c41e:	mov    r8,QWORD PTR [r10+0x70]
   2c422:	lea    rax,[r12+r12*2]
   2c426:	shl    rax,0x4
   2c42a:	add    rax,rbp
   2c42d:	cmp    edi,0x3
   2c430:	setg   dil
   2c434:	movzx  edi,dil
   2c438:	mov    DWORD PTR [rax+0x3778],edi
   2c43e:	mov    rdi,r9
   2c441:	mov    DWORD PTR [rbp+0x4c],edx
   2c444:	lea    rdx,[rip+0xfffffffffffe1fc5]        # e410 <writeRefFrame_CABAC>
   2c44b:	mov    DWORD PTR [rbp+0x48],esi
   2c44e:	mov    rsi,r10
   2c451:	mov    QWORD PTR [rax+0x3788],rdx
   2c458:	xor    edx,edx
   2c45a:	test   ecx,ecx
   2c45c:	sete   dl
   2c45f:	mov    DWORD PTR [rax+0x3768],edx
   2c465:	call   r8
   2c468:	jmp    2c3b5 <writeReferenceFrame+0x105>
   2c46d:	nop    DWORD PTR [rax]
   2c470:	and    r10d,0x1
   2c474:	cmp    r10d,0x1
   2c478:	sbb    eax,eax
   2c47a:	and    eax,0xfffffffe
   2c47d:	add    eax,0x4
   2c480:	jmp    2c303 <writeReferenceFrame+0x53>
   2c485:	nop    DWORD PTR [rax]
   2c488:	mov    edx,0x1
   2c48d:	sub    edx,DWORD PTR [rax+0x3764]
   2c493:	mov    rsi,QWORD PTR [r10]
   2c496:	mov    rdi,r9
   2c499:	mov    DWORD PTR [rax+0x3774],edx
   2c49f:	mov    DWORD PTR [rax+0x376c],0x1
   2c4a9:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   2c4ae:	jmp    2c3b5 <writeReferenceFrame+0x105>
   2c4b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c4be:	xchg   ax,ax

000000000002c4c0 <writeMotionVector8x8>:
   2c4c0:	endbr64 
   2c4c4:	push   r15
   2c4c6:	push   r14
   2c4c8:	push   r13
   2c4ca:	push   r12
   2c4cc:	push   rbp
   2c4cd:	push   rbx
   2c4ce:	sub    rsp,0x98
   2c4d5:	mov    DWORD PTR [rsp+0x30],esi
   2c4d9:	movsxd rsi,DWORD PTR [rsp+0xd0]
   2c4e1:	mov    DWORD PTR [rsp+0x7c],ecx
   2c4e5:	mov    rcx,QWORD PTR [rip+0x5c0cc]        # 885b8 <input>
   2c4ec:	mov    DWORD PTR [rsp+0x6c],edx
   2c4f0:	movsxd rdx,r8d
   2c4f3:	mov    eax,DWORD PTR [rcx+rsi*8+0x94]
   2c4fa:	mov    ebx,DWORD PTR [rcx+rsi*8+0x90]
   2c501:	mov    DWORD PTR [rsp+0x78],r9d
   2c506:	mov    DWORD PTR [rsp+0x8c],edi
   2c50d:	mov    DWORD PTR [rsp+0x34],eax
   2c511:	mov    rax,QWORD PTR [rip+0x5c098]        # 885b0 <img>
   2c518:	movsxd r12,DWORD PTR [rax+0xc]
   2c51c:	mov    r9,QWORD PTR [rax+0x3750]
   2c523:	imul   r12,r12,0x278
   2c52a:	add    r12,QWORD PTR [rax+0x3758]
   2c531:	mov    QWORD PTR [rsp+0x48],r9
   2c536:	movsxd r8,DWORD PTR [r12]
   2c53a:	lea    r8,[r8+r8*2]
   2c53e:	shl    r8,0x4
   2c542:	lea    r10,[rax+r8*1+0x3760]
   2c54a:	movsxd r8,DWORD PTR [rcx+0x93c]
   2c551:	lea    rcx,[rip+0x5e418]        # 8a970 <assignSE2partition>
   2c558:	mov    QWORD PTR [rsp+0x60],r10
   2c55d:	mov    r10,QWORD PTR [rax+0x118f8]
   2c564:	mov    rcx,QWORD PTR [rcx+r8*8]
   2c568:	mov    QWORD PTR [rsp+0x50],rcx
   2c56d:	mov    rcx,QWORD PTR [rax+0x118f0]
   2c574:	mov    QWORD PTR [rsp+0x58],rcx
   2c579:	mov    ecx,DWORD PTR [r12+0x244]
   2c581:	test   ecx,ecx
   2c583:	je     2c594 <writeMotionVector8x8+0xd4>
   2c585:	cmp    DWORD PTR [r12+0x1e8],0x2
   2c58e:	je     2c812 <writeMotionVector8x8+0x352>
   2c594:	movsxd r8,DWORD PTR [rsp+0x30]
   2c599:	mov    eax,DWORD PTR [rsp+0x7c]
   2c59d:	cmp    r8d,eax
   2c5a0:	jge    2c834 <writeMotionVector8x8+0x374>
   2c5a6:	lea    rax,[rdx*8+0x0]
   2c5ae:	movsxd rcx,DWORD PTR [rsp+0x78]
   2c5b3:	xor    r13d,r13d
   2c5b6:	mov    QWORD PTR [rsp+0x38],rax
   2c5bb:	lea    rax,[rsi*8+0x0]
   2c5c3:	mov    QWORD PTR [rsp+0x40],rax
   2c5c8:	movsxd rax,DWORD PTR [rsp+0x34]
   2c5cd:	lea    r9,[rcx*8+0x0]
   2c5d5:	shl    rcx,0x2
   2c5d9:	mov    edi,eax
   2c5db:	shl    rax,0x3
   2c5df:	add    edi,r8d
   2c5e2:	mov    QWORD PTR [rsp+0x80],rax
   2c5ea:	movsxd rax,ebx
   2c5ed:	shl    r8,0x3
   2c5f1:	mov    DWORD PTR [rsp+0x88],edi
   2c5f8:	mov    r15d,edi
   2c5fb:	mov    QWORD PTR [rsp+0x70],rax
   2c600:	mov    eax,r13d
   2c603:	mov    r13,r12
   2c606:	mov    r12,r9
   2c609:	mov    r9d,eax
   2c60c:	movsxd r14,DWORD PTR [rsp+0x8c]
   2c614:	cmp    r14d,DWORD PTR [rsp+0x6c]
   2c619:	jge    2c78a <writeMotionVector8x8+0x2ca>
   2c61f:	mov    rax,rcx
   2c622:	mov    rcx,r12
   2c625:	mov    r12,rax
   2c628:	nop    DWORD PTR [rax+rax*1+0x0]
   2c630:	mov    DWORD PTR [rsp+0x68],r14d
   2c635:	mov    rdi,QWORD PTR [rsp+0x60]
   2c63a:	xor    ebp,ebp
   2c63c:	mov    rax,QWORD PTR [r10+r14*8]
   2c640:	mov    rdx,QWORD PTR [rsp+0x38]
   2c645:	mov    r11,QWORD PTR [rsp+0x40]
   2c64a:	mov    rax,QWORD PTR [rax+r8*1]
   2c64e:	mov    rax,QWORD PTR [rax+rcx*1]
   2c652:	mov    rax,QWORD PTR [rax+rdx*1]
   2c656:	mov    rax,QWORD PTR [rax+r11*1]
   2c65a:	movsx  esi,WORD PTR [rax+rbp*2]
   2c65e:	mov    rax,QWORD PTR [rsp+0x58]
   2c663:	mov    rax,QWORD PTR [rax+r14*8]
   2c667:	mov    rax,QWORD PTR [rax+r8*1]
   2c66b:	mov    rax,QWORD PTR [rax+rcx*1]
   2c66f:	mov    rax,QWORD PTR [rax+rdx*1]
   2c673:	mov    edx,DWORD PTR [rsp+0x34]
   2c677:	mov    rax,QWORD PTR [rax+r11*1]
   2c67b:	movsx  eax,WORD PTR [rax+rbp*2]
   2c67f:	sub    esi,eax
   2c681:	test   edx,edx
   2c683:	jle    2c6c5 <writeMotionVector8x8+0x205>
   2c685:	mov    r11d,DWORD PTR [rsp+0x30]
   2c68a:	nop    WORD PTR [rax+rax*1+0x0]
   2c690:	test   ebx,ebx
   2c692:	jle    2c6bc <writeMotionVector8x8+0x1fc>
   2c694:	movsxd rax,r11d
   2c697:	add    rax,r12
   2c69a:	lea    rax,[r14+rax*4]
   2c69e:	lea    rax,[rbp+rax*2+0x0]
   2c6a3:	lea    rdx,[r13+rax*4+0x0]
   2c6a8:	xor    eax,eax
   2c6aa:	nop    WORD PTR [rax+rax*1+0x0]
   2c6b0:	mov    DWORD PTR [rdx+rax*8+0x4c],esi
   2c6b4:	add    rax,0x1
   2c6b8:	cmp    ebx,eax
   2c6ba:	jg     2c6b0 <writeMotionVector8x8+0x1f0>
   2c6bc:	add    r11d,0x1
   2c6c0:	cmp    r15d,r11d
   2c6c3:	jne    2c690 <writeMotionVector8x8+0x1d0>
   2c6c5:	mov    rax,QWORD PTR [rip+0x5beec]        # 885b8 <input>
   2c6cc:	mov    DWORD PTR [rdi+0x4],esi
   2c6cf:	mov    DWORD PTR [rdi+0x8],0x0
   2c6d6:	mov    DWORD PTR [rdi],0x5
   2c6dc:	mov    eax,DWORD PTR [rax+0x934]
   2c6e2:	test   eax,eax
   2c6e4:	jne    2c7c0 <writeMotionVector8x8+0x300>
   2c6ea:	lea    rax,[rip+0x39c3f]        # 66330 <se_linfo>
   2c6f1:	mov    QWORD PTR [rdi+0x20],rax
   2c6f5:	mov    rax,QWORD PTR [rsp+0x50]
   2c6fa:	mov    QWORD PTR [rsp+0x10],rcx
   2c6ff:	mov    rcx,QWORD PTR [rsp+0x48]
   2c704:	mov    DWORD PTR [rsp+0x2c],r9d
   2c709:	movsxd rdx,DWORD PTR [rax+0x14]
   2c70d:	mov    QWORD PTR [rsp+0x20],r8
   2c712:	mov    QWORD PTR [rsp+0x18],r10
   2c717:	mov    rax,rdx
   2c71a:	mov    QWORD PTR [rsp+0x8],rdi
   2c71f:	shl    rax,0x4
   2c723:	sub    rax,rdx
   2c726:	mov    rdx,QWORD PTR [rcx+0x18]
   2c72a:	lea    rax,[rdx+rax*8]
   2c72e:	mov    rsi,rax
   2c731:	call   QWORD PTR [rax+0x70]
   2c734:	mov    rdi,QWORD PTR [rsp+0x8]
   2c739:	mov    r9d,DWORD PTR [rsp+0x2c]
   2c73e:	mov    rcx,QWORD PTR [rsp+0x10]
   2c743:	mov    r10,QWORD PTR [rsp+0x18]
   2c748:	mov    eax,DWORD PTR [rdi+0xc]
   2c74b:	add    rdi,0x30
   2c74f:	add    DWORD PTR [r13+0x20],eax
   2c753:	add    r9d,DWORD PTR [rdi-0x24]
   2c757:	add    DWORD PTR [r13+0x0],0x1
   2c75c:	cmp    rbp,0x1
   2c760:	mov    r8,QWORD PTR [rsp+0x20]
   2c765:	jne    2c7f0 <writeMotionVector8x8+0x330>
   2c76b:	add    QWORD PTR [rsp+0x60],0x60
   2c771:	add    r14,QWORD PTR [rsp+0x70]
   2c776:	cmp    DWORD PTR [rsp+0x6c],r14d
   2c77b:	jg     2c630 <writeMotionVector8x8+0x170>
   2c781:	mov    rax,r12
   2c784:	mov    r12,rcx
   2c787:	mov    rcx,rax
   2c78a:	mov    eax,DWORD PTR [rsp+0x88]
   2c791:	mov    edi,DWORD PTR [rsp+0x34]
   2c795:	add    r8,QWORD PTR [rsp+0x80]
   2c79d:	mov    DWORD PTR [rsp+0x30],eax
   2c7a1:	add    r15d,edi
   2c7a4:	cmp    DWORD PTR [rsp+0x7c],eax
   2c7a8:	jle    2c7fa <writeMotionVector8x8+0x33a>
   2c7aa:	add    eax,edi
   2c7ac:	mov    DWORD PTR [rsp+0x88],eax
   2c7b3:	jmp    2c60c <writeMotionVector8x8+0x14c>
   2c7b8:	nop    DWORD PTR [rax+rax*1+0x0]
   2c7c0:	mov    rax,QWORD PTR [rip+0x5bde9]        # 885b0 <img>
   2c7c7:	mov    edx,DWORD PTR [rsp+0x68]
   2c7cb:	mov    DWORD PTR [rax+0x48],edx
   2c7ce:	mov    edx,DWORD PTR [rsp+0x30]
   2c7d2:	mov    DWORD PTR [rax+0x4c],edx
   2c7d5:	mov    eax,DWORD PTR [rsp+0x78]
   2c7d9:	lea    eax,[rax+rbp*2]
   2c7dc:	mov    DWORD PTR [rdi+0x8],eax
   2c7df:	lea    rax,[rip+0xfffffffffffe257a]        # ed60 <writeMVD_CABAC>
   2c7e6:	mov    QWORD PTR [rdi+0x28],rax
   2c7ea:	jmp    2c6f5 <writeMotionVector8x8+0x235>
   2c7ef:	nop
   2c7f0:	mov    ebp,0x1
   2c7f5:	jmp    2c63c <writeMotionVector8x8+0x17c>
   2c7fa:	mov    r13d,r9d
   2c7fd:	add    rsp,0x98
   2c804:	mov    eax,r13d
   2c807:	pop    rbx
   2c808:	pop    rbp
   2c809:	pop    r12
   2c80b:	pop    r13
   2c80d:	pop    r14
   2c80f:	pop    r15
   2c811:	ret    
   2c812:	cmp    esi,0x1
   2c815:	jne    2c594 <writeMotionVector8x8+0xd4>
   2c81b:	test   edx,edx
   2c81d:	jne    2c594 <writeMotionVector8x8+0xd4>
   2c823:	cmp    ecx,0x1
   2c826:	je     2c839 <writeMotionVector8x8+0x379>
   2c828:	mov    r10,QWORD PTR [rax+0x11908]
   2c82f:	jmp    2c594 <writeMotionVector8x8+0xd4>
   2c834:	xor    r13d,r13d
   2c837:	jmp    2c7fd <writeMotionVector8x8+0x33d>
   2c839:	mov    r10,QWORD PTR [rax+0x11900]
   2c840:	jmp    2c594 <writeMotionVector8x8+0xd4>
   2c845:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002c850 <writeMotionInfo2NAL>:
   2c850:	endbr64 
   2c854:	push   r15
   2c856:	push   r14
   2c858:	push   r13
   2c85a:	push   r12
   2c85c:	push   rbp
   2c85d:	push   rbx
   2c85e:	sub    rsp,0x18
   2c862:	mov    rax,QWORD PTR [rip+0x5bd47]        # 885b0 <img>
   2c869:	mov    r9,QWORD PTR [rip+0x5bd48]        # 885b8 <input>
   2c870:	movsxd rbp,DWORD PTR [rax+0xc]
   2c874:	imul   rbp,rbp,0x278
   2c87b:	add    rbp,QWORD PTR [rax+0x3758]
   2c882:	mov    eax,DWORD PTR [rax+0x18]
   2c885:	mov    DWORD PTR [rsp+0x8],eax
   2c889:	mov    eax,DWORD PTR [rbp+0x48]
   2c88c:	cmp    eax,0x8
   2c88f:	je     2cbe8 <writeMotionInfo2NAL+0x398>
   2c895:	movsxd rdx,eax
   2c898:	mov    r15d,DWORD PTR [r9+rdx*8+0x50]
   2c89d:	mov    r13d,DWORD PTR [r9+rdx*8+0x54]
   2c8a2:	cmp    eax,0xd
   2c8a5:	jbe    2cbc0 <writeMotionInfo2NAL+0x370>
   2c8ab:	sar    r15d,0x2
   2c8af:	sar    r13d,0x2
   2c8b3:	xor    r12d,r12d
   2c8b6:	xor    ebx,ebx
   2c8b8:	nop    DWORD PTR [rax+rax*1+0x0]
   2c8c0:	xor    r14d,r14d
   2c8c3:	jmp    2c8d1 <writeMotionInfo2NAL+0x81>
   2c8c5:	nop    DWORD PTR [rax]
   2c8c8:	add    r14d,r15d
   2c8cb:	cmp    r14d,0x3
   2c8cf:	jg     2c950 <writeMotionInfo2NAL+0x100>
   2c8d1:	mov    eax,r14d
   2c8d4:	shr    eax,0x1f
   2c8d7:	add    eax,r14d
   2c8da:	sar    eax,1
   2c8dc:	add    eax,ebx
   2c8de:	cdqe   
   2c8e0:	lea    rax,[rbp+rax*4+0x0]
   2c8e5:	test   DWORD PTR [rax+0x1e8],0xfffffffd
   2c8ef:	jne    2c8c8 <writeMotionInfo2NAL+0x78>
   2c8f1:	mov    edi,DWORD PTR [rax+0x1d8]
   2c8f7:	test   edi,edi
   2c8f9:	je     2c8c8 <writeMotionInfo2NAL+0x78>
   2c8fb:	mov    rax,QWORD PTR [rip+0x5bcae]        # 885b0 <img>
   2c902:	mov    rcx,QWORD PTR [rip+0x5e09f]        # 8a9a8 <enc_picture>
   2c909:	mov    rsi,QWORD PTR [rcx+0x1950]
   2c910:	mov    ecx,DWORD PTR [rax+0x90]
   2c916:	mov    edx,DWORD PTR [rax+0x94]
   2c91c:	mov    rsi,QWORD PTR [rsi]
   2c91f:	add    ecx,r14d
   2c922:	movsxd rcx,ecx
   2c925:	add    edx,ebx
   2c927:	mov    rcx,QWORD PTR [rsi+rcx*8]
   2c92b:	movsxd rax,edx
   2c92e:	mov    esi,r14d
   2c931:	mov    edx,ebx
   2c933:	add    r14d,r15d
   2c936:	movsx  r8d,WORD PTR [rcx+rax*2]
   2c93b:	mov    ecx,0x1
   2c940:	call   2c2b0 <writeReferenceFrame>
   2c945:	add    r12d,eax
   2c948:	cmp    r14d,0x3
   2c94c:	jle    2c8d1 <writeMotionInfo2NAL+0x81>
   2c94e:	xchg   ax,ax
   2c950:	add    ebx,r13d
   2c953:	cmp    ebx,0x3
   2c956:	jle    2c8c0 <writeMotionInfo2NAL+0x70>
   2c95c:	xor    ebx,ebx
   2c95e:	xchg   ax,ax
   2c960:	xor    r14d,r14d
   2c963:	jmp    2c971 <writeMotionInfo2NAL+0x121>
   2c965:	nop    DWORD PTR [rax]
   2c968:	add    r14d,r15d
   2c96b:	cmp    r14d,0x3
   2c96f:	jg     2c9f0 <writeMotionInfo2NAL+0x1a0>
   2c971:	mov    eax,r14d
   2c974:	shr    eax,0x1f
   2c977:	add    eax,r14d
   2c97a:	sar    eax,1
   2c97c:	add    eax,ebx
   2c97e:	cdqe   
   2c980:	lea    rcx,[rbp+rax*4+0x0]
   2c985:	mov    eax,DWORD PTR [rcx+0x1e8]
   2c98b:	sub    eax,0x1
   2c98e:	cmp    eax,0x1
   2c991:	ja     2c968 <writeMotionInfo2NAL+0x118>
   2c993:	mov    edi,DWORD PTR [rcx+0x1d8]
   2c999:	test   edi,edi
   2c99b:	je     2c968 <writeMotionInfo2NAL+0x118>
   2c99d:	mov    rax,QWORD PTR [rip+0x5bc0c]        # 885b0 <img>
   2c9a4:	mov    rcx,QWORD PTR [rip+0x5dffd]        # 8a9a8 <enc_picture>
   2c9ab:	mov    rsi,QWORD PTR [rcx+0x1950]
   2c9b2:	mov    ecx,DWORD PTR [rax+0x90]
   2c9b8:	mov    edx,DWORD PTR [rax+0x94]
   2c9be:	mov    rsi,QWORD PTR [rsi+0x8]
   2c9c2:	add    ecx,r14d
   2c9c5:	movsxd rcx,ecx
   2c9c8:	add    edx,ebx
   2c9ca:	mov    rcx,QWORD PTR [rsi+rcx*8]
   2c9ce:	movsxd rax,edx
   2c9d1:	mov    esi,r14d
   2c9d4:	mov    edx,ebx
   2c9d6:	add    r14d,r15d
   2c9d9:	movsx  r8d,WORD PTR [rcx+rax*2]
   2c9de:	xor    ecx,ecx
   2c9e0:	call   2c2b0 <writeReferenceFrame>
   2c9e5:	add    r12d,eax
   2c9e8:	cmp    r14d,0x3
   2c9ec:	jle    2c971 <writeMotionInfo2NAL+0x121>
   2c9ee:	xchg   ax,ax
   2c9f0:	add    ebx,r13d
   2c9f3:	cmp    ebx,0x3
   2c9f6:	jle    2c960 <writeMotionInfo2NAL+0x110>
   2c9fc:	mov    eax,DWORD PTR [rbp+0x48]
   2c9ff:	cmp    eax,0xd
   2ca02:	ja     2ca13 <writeMotionInfo2NAL+0x1c3>
   2ca04:	mov    edx,0x2601
   2ca09:	bt     rdx,rax
   2ca0d:	jb     2cbd2 <writeMotionInfo2NAL+0x382>
   2ca13:	cmp    DWORD PTR [rsp+0x8],0x1
   2ca18:	sete   BYTE PTR [rsp+0xf]
   2ca1d:	xor    r14d,r14d
   2ca20:	mov    esi,r14d
   2ca23:	xor    ebx,ebx
   2ca25:	add    r14d,r13d
   2ca28:	jmp    2ca39 <writeMotionInfo2NAL+0x1e9>
   2ca2a:	nop    WORD PTR [rax+rax*1+0x0]
   2ca30:	cmp    ebx,0x3
   2ca33:	jg     2cad0 <writeMotionInfo2NAL+0x280>
   2ca39:	mov    eax,ebx
   2ca3b:	mov    edi,ebx
   2ca3d:	shr    eax,0x1f
   2ca40:	add    eax,ebx
   2ca42:	add    ebx,r15d
   2ca45:	sar    eax,1
   2ca47:	add    eax,esi
   2ca49:	cdqe   
   2ca4b:	lea    rax,[rbp+rax*4+0x0]
   2ca50:	test   DWORD PTR [rax+0x1e8],0xfffffffd
   2ca5a:	jne    2ca30 <writeMotionInfo2NAL+0x1e0>
   2ca5c:	mov    eax,DWORD PTR [rax+0x1d8]
   2ca62:	test   eax,eax
   2ca64:	je     2ca30 <writeMotionInfo2NAL+0x1e0>
   2ca66:	mov    rdx,QWORD PTR [rip+0x5bb43]        # 885b0 <img>
   2ca6d:	mov    r8,QWORD PTR [rip+0x5df34]        # 8a9a8 <enc_picture>
   2ca74:	sub    rsp,0x8
   2ca78:	mov    r9,QWORD PTR [r8+0x1950]
   2ca7f:	mov    r8d,DWORD PTR [rdx+0x90]
   2ca86:	mov    ecx,DWORD PTR [rdx+0x94]
   2ca8c:	mov    r9,QWORD PTR [r9]
   2ca8f:	add    r8d,edi
   2ca92:	movsxd r8,r8d
   2ca95:	add    ecx,esi
   2ca97:	mov    r8,QWORD PTR [r9+r8*8]
   2ca9b:	movsxd rdx,ecx
   2ca9e:	xor    r9d,r9d
   2caa1:	mov    ecx,r14d
   2caa4:	movsx  r8d,WORD PTR [r8+rdx*2]
   2caa9:	push   rax
   2caaa:	mov    edx,ebx
   2caac:	mov    DWORD PTR [rsp+0x18],esi
   2cab0:	call   2c4c0 <writeMotionVector8x8>
   2cab5:	pop    rcx
   2cab6:	pop    rsi
   2cab7:	add    r12d,eax
   2caba:	mov    esi,DWORD PTR [rsp+0x8]
   2cabe:	cmp    ebx,0x3
   2cac1:	jle    2ca39 <writeMotionInfo2NAL+0x1e9>
   2cac7:	nop    WORD PTR [rax+rax*1+0x0]
   2cad0:	cmp    r14d,0x3
   2cad4:	jle    2ca20 <writeMotionInfo2NAL+0x1d0>
   2cada:	mov    ecx,DWORD PTR [rbp+0x48]
   2cadd:	cmp    ecx,0xd
   2cae0:	ja     2caf1 <writeMotionInfo2NAL+0x2a1>
   2cae2:	mov    eax,0x2601
   2cae7:	shr    rax,cl
   2caea:	not    rax
   2caed:	and    BYTE PTR [rsp+0xf],al
   2caf1:	cmp    BYTE PTR [rsp+0xf],0x0
   2caf6:	je     2cbd2 <writeMotionInfo2NAL+0x382>
   2cafc:	xor    ecx,ecx
   2cafe:	xchg   ax,ax
   2cb00:	mov    r14d,ecx
   2cb03:	xor    ebx,ebx
   2cb05:	add    ecx,r13d
   2cb08:	jmp    2cb19 <writeMotionInfo2NAL+0x2c9>
   2cb0a:	nop    WORD PTR [rax+rax*1+0x0]
   2cb10:	cmp    ebx,0x3
   2cb13:	jg     2cbb0 <writeMotionInfo2NAL+0x360>
   2cb19:	mov    eax,ebx
   2cb1b:	mov    edi,ebx
   2cb1d:	shr    eax,0x1f
   2cb20:	add    eax,ebx
   2cb22:	add    ebx,r15d
   2cb25:	sar    eax,1
   2cb27:	add    eax,r14d
   2cb2a:	cdqe   
   2cb2c:	lea    rdx,[rbp+rax*4+0x0]
   2cb31:	mov    eax,DWORD PTR [rdx+0x1e8]
   2cb37:	sub    eax,0x1
   2cb3a:	cmp    eax,0x1
   2cb3d:	ja     2cb10 <writeMotionInfo2NAL+0x2c0>
   2cb3f:	mov    eax,DWORD PTR [rdx+0x1d8]
   2cb45:	test   eax,eax
   2cb47:	je     2cb10 <writeMotionInfo2NAL+0x2c0>
   2cb49:	mov    rdx,QWORD PTR [rip+0x5ba60]        # 885b0 <img>
   2cb50:	sub    rsp,0x8
   2cb54:	mov    rsi,QWORD PTR [rip+0x5de4d]        # 8a9a8 <enc_picture>
   2cb5b:	mov    r9d,0x1
   2cb61:	mov    r8,QWORD PTR [rsi+0x1950]
   2cb68:	mov    esi,DWORD PTR [rdx+0x90]
   2cb6e:	mov    r10d,DWORD PTR [rdx+0x94]
   2cb75:	mov    r8,QWORD PTR [r8+0x8]
   2cb79:	add    esi,edi
   2cb7b:	movsxd rsi,esi
   2cb7e:	add    r10d,r14d
   2cb81:	mov    rsi,QWORD PTR [r8+rsi*8]
   2cb85:	movsxd rdx,r10d
   2cb88:	movsx  r8d,WORD PTR [rsi+rdx*2]
   2cb8d:	push   rax
   2cb8e:	mov    edx,ebx
   2cb90:	mov    esi,r14d
   2cb93:	mov    DWORD PTR [rsp+0x18],ecx
   2cb97:	call   2c4c0 <writeMotionVector8x8>
   2cb9c:	add    r12d,eax
   2cb9f:	pop    rax
   2cba0:	pop    rdx
   2cba1:	mov    ecx,DWORD PTR [rsp+0x8]
   2cba5:	cmp    ebx,0x3
   2cba8:	jle    2cb19 <writeMotionInfo2NAL+0x2c9>
   2cbae:	xchg   ax,ax
   2cbb0:	cmp    ecx,0x3
   2cbb3:	jle    2cb00 <writeMotionInfo2NAL+0x2b0>
   2cbb9:	jmp    2cbd2 <writeMotionInfo2NAL+0x382>
   2cbbb:	nop    DWORD PTR [rax+rax*1+0x0]
   2cbc0:	mov    edx,0x2601
   2cbc5:	xor    r12d,r12d
   2cbc8:	bt     rdx,rax
   2cbcc:	jae    2c8ab <writeMotionInfo2NAL+0x5b>
   2cbd2:	add    rsp,0x18
   2cbd6:	mov    eax,r12d
   2cbd9:	pop    rbx
   2cbda:	pop    rbp
   2cbdb:	pop    r12
   2cbdd:	pop    r13
   2cbdf:	pop    r14
   2cbe1:	pop    r15
   2cbe3:	ret    
   2cbe4:	nop    DWORD PTR [rax+0x0]
   2cbe8:	mov    r15d,DWORD PTR [r9+0x70]
   2cbec:	mov    r13d,DWORD PTR [r9+0x74]
   2cbf0:	mov    rdi,rbp
   2cbf3:	sar    r15d,0x2
   2cbf7:	sar    r13d,0x2
   2cbfb:	call   2bcb0 <ZeroRef>
   2cc00:	test   eax,eax
   2cc02:	je     2c8b3 <writeMotionInfo2NAL+0x63>
   2cc08:	cmp    DWORD PTR [r9+0x934],0x1
   2cc10:	sete   r14b
   2cc14:	cmp    DWORD PTR [rsp+0x8],0x1
   2cc19:	sete   al
   2cc1c:	or     r14b,al
   2cc1f:	mov    BYTE PTR [rsp+0xf],r14b
   2cc24:	jne    2c8b3 <writeMotionInfo2NAL+0x63>
   2cc2a:	xor    r12d,r12d
   2cc2d:	jmp    2ca1d <writeMotionInfo2NAL+0x1cd>
   2cc32:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2cc3d:	nop    DWORD PTR [rax]

000000000002cc40 <writeLumaCoeff4x4_CABAC>:
   2cc40:	endbr64 
   2cc44:	push   r15
   2cc46:	movsxd r8,edi
   2cc49:	push   r14
   2cc4b:	push   r13
   2cc4d:	push   r12
   2cc4f:	push   rbp
   2cc50:	push   rbx
   2cc51:	sub    rsp,0x28
   2cc55:	mov    r11,QWORD PTR [rip+0x5b954]        # 885b0 <img>
   2cc5c:	movsxd r15,DWORD PTR [r11+0xc]
   2cc60:	mov    r13,QWORD PTR [r11+0x3750]
   2cc67:	imul   r15,r15,0x278
   2cc6e:	add    r15,QWORD PTR [r11+0x3758]
   2cc75:	movsxd rax,DWORD PTR [r15]
   2cc78:	lea    rax,[rax+rax*2]
   2cc7c:	shl    rax,0x4
   2cc80:	lea    rbx,[r11+rax*1+0x3760]
   2cc88:	mov    rax,QWORD PTR [rip+0x5b929]        # 885b8 <input>
   2cc8f:	movsxd rcx,DWORD PTR [rax+0x93c]
   2cc96:	lea    rax,[rip+0x5dcd3]        # 8a970 <assignSE2partition>
   2cc9d:	mov    rax,QWORD PTR [rax+rcx*8]
   2cca1:	movsxd rcx,esi
   2cca4:	mov    QWORD PTR [rsp+0x10],rax
   2cca9:	mov    rax,QWORD PTR [r11+0x3738]
   2ccb0:	mov    rax,QWORD PTR [rax+r8*8]
   2ccb4:	mov    rax,QWORD PTR [rax+rcx*8]
   2ccb8:	mov    rcx,QWORD PTR [rax]
   2ccbb:	mov    r14,QWORD PTR [rax+0x8]
   2ccbf:	mov    eax,esi
   2ccc1:	and    eax,0x1
   2ccc4:	test   dil,0x1
   2ccc8:	mov    QWORD PTR [rsp+0x18],rcx
   2cccd:	lea    ecx,[rax+0x2]
   2ccd0:	cmovne eax,ecx
   2ccd3:	mov    DWORD PTR [r11+0x48],eax
   2ccd7:	xor    eax,eax
   2ccd9:	cmp    esi,0x1
   2ccdc:	setg   al
   2ccdf:	cmp    edi,0x1
   2cce2:	jle    2cce7 <writeLumaCoeff4x4_CABAC+0xa7>
   2cce4:	add    eax,0x2
   2cce7:	mov    DWORD PTR [r11+0x4c],eax
   2cceb:	xor    ebp,ebp
   2cced:	xor    r12d,r12d
   2ccf0:	jmp    2cd73 <writeLumaCoeff4x4_CABAC+0x133>
   2ccf5:	nop    DWORD PTR [rax]
   2ccf8:	add    rax,0x1c
   2ccfc:	cmp    edx,0x1
   2ccff:	sbb    esi,esi
   2cd01:	and    esi,0x5
   2cd04:	add    esi,0x7
   2cd07:	mov    rdi,QWORD PTR [rsp+0x10]
   2cd0c:	mov    DWORD PTR [rbx],esi
   2cd0e:	mov    DWORD PTR [r11+0x50],edx
   2cd12:	movsxd rsi,DWORD PTR [rdi+rax*1]
   2cd16:	mov    DWORD PTR [rsp+0x8],ecx
   2cd1a:	mov    rdi,rbx
   2cd1d:	add    rbx,0x30
   2cd21:	mov    DWORD PTR [rsp+0xc],edx
   2cd25:	mov    rax,rsi
   2cd28:	shl    rax,0x4
   2cd2c:	sub    rax,rsi
   2cd2f:	mov    rsi,QWORD PTR [r13+0x18]
   2cd33:	lea    rax,[rsi+rax*8]
   2cd37:	mov    rsi,rax
   2cd3a:	call   QWORD PTR [rax+0x70]
   2cd3d:	mov    eax,DWORD PTR [rbx-0x24]
   2cd40:	mov    ecx,DWORD PTR [rsp+0x8]
   2cd44:	add    DWORD PTR [r15+0x28],eax
   2cd48:	lea    eax,[rbp+0x1]
   2cd4b:	add    r12d,DWORD PTR [rbx-0x24]
   2cd4f:	add    DWORD PTR [r15],0x1
   2cd53:	cmp    eax,0x10
   2cd56:	setle  sil
   2cd5a:	test   ecx,ecx
   2cd5c:	setne  al
   2cd5f:	add    rbp,0x1
   2cd63:	test   sil,al
   2cd66:	je     2cdc0 <writeLumaCoeff4x4_CABAC+0x180>
   2cd68:	mov    r11,QWORD PTR [rip+0x5b841]        # 885b0 <img>
   2cd6f:	mov    edx,DWORD PTR [rsp+0xc]
   2cd73:	mov    rax,QWORD PTR [rsp+0x18]
   2cd78:	cmp    edx,0x1
   2cd7b:	mov    ecx,DWORD PTR [rax+rbp*4]
   2cd7e:	mov    DWORD PTR [rbx+0x4],ecx
   2cd81:	mov    eax,DWORD PTR [r14+rbp*4]
   2cd85:	mov    DWORD PTR [rbx+0x18],0x5
   2cd8c:	mov    DWORD PTR [rbx+0x8],eax
   2cd8f:	lea    rax,[rip+0xfffffffffffe1dba]        # eb50 <writeRunLevel_CABAC>
   2cd96:	mov    QWORD PTR [rbx+0x28],rax
   2cd9a:	sbb    rax,rax
   2cd9d:	and    eax,0x14
   2cda0:	test   rbp,rbp
   2cda3:	je     2ccf8 <writeLumaCoeff4x4_CABAC+0xb8>
   2cda9:	add    rax,0x24
   2cdad:	cmp    edx,0x1
   2cdb0:	sbb    esi,esi
   2cdb2:	and    esi,0x5
   2cdb5:	add    esi,0x9
   2cdb8:	jmp    2cd07 <writeLumaCoeff4x4_CABAC+0xc7>
   2cdbd:	nop    DWORD PTR [rax]
   2cdc0:	add    rsp,0x28
   2cdc4:	mov    eax,r12d
   2cdc7:	pop    rbx
   2cdc8:	pop    rbp
   2cdc9:	pop    r12
   2cdcb:	pop    r13
   2cdcd:	pop    r14
   2cdcf:	pop    r15
   2cdd1:	ret    
   2cdd2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2cddd:	nop    DWORD PTR [rax]

000000000002cde0 <writeLumaCoeff8x8_CABAC>:
   2cde0:	endbr64 
   2cde4:	push   r15
   2cde6:	push   r14
   2cde8:	push   r13
   2cdea:	push   r12
   2cdec:	push   rbp
   2cded:	push   rbx
   2cdee:	sub    rsp,0x28
   2cdf2:	mov    DWORD PTR [rsp+0x4],esi
   2cdf6:	mov    rsi,QWORD PTR [rip+0x5b7b3]        # 885b0 <img>
   2cdfd:	movsxd rcx,DWORD PTR [rsi+0xc]
   2ce01:	imul   rcx,rcx,0x278
   2ce08:	add    rcx,QWORD PTR [rsi+0x3758]
   2ce0f:	movsxd rax,DWORD PTR [rcx]
   2ce12:	mov    r14,rcx
   2ce15:	lea    rax,[rax+rax*2]
   2ce19:	shl    rax,0x4
   2ce1d:	lea    rbx,[rsi+rax*1+0x3760]
   2ce25:	mov    rax,QWORD PTR [rsi+0x3750]
   2ce2c:	mov    QWORD PTR [rsp+0x8],rax
   2ce31:	mov    rax,QWORD PTR [rip+0x5b780]        # 885b8 <input>
   2ce38:	movsxd rdx,DWORD PTR [rax+0x93c]
   2ce3f:	lea    rax,[rip+0x5db2a]        # 8a970 <assignSE2partition>
   2ce46:	mov    rax,QWORD PTR [rax+rdx*8]
   2ce4a:	movsxd rdx,edi
   2ce4d:	mov    QWORD PTR [rsp+0x18],rax
   2ce52:	mov    rax,QWORD PTR [rsi+0x3738]
   2ce59:	mov    rax,QWORD PTR [rax+rdx*8]
   2ce5d:	mov    rax,QWORD PTR [rax]
   2ce60:	mov    rdx,QWORD PTR [rax]
   2ce63:	mov    r13,QWORD PTR [rax+0x8]
   2ce67:	mov    eax,edi
   2ce69:	and    eax,0x1
   2ce6c:	mov    QWORD PTR [rsp+0x10],rdx
   2ce71:	mov    edx,0x2
   2ce76:	cmovne eax,edx
   2ce79:	mov    DWORD PTR [rsi+0x48],eax
   2ce7c:	xor    eax,eax
   2ce7e:	cmp    edi,0x1
   2ce81:	setg   al
   2ce84:	xor    r15d,r15d
   2ce87:	xor    r12d,r12d
   2ce8a:	add    eax,eax
   2ce8c:	mov    DWORD PTR [rsi+0x4c],eax
   2ce8f:	jmp    2cf0c <writeLumaCoeff8x8_CABAC+0x12c>
   2ce91:	nop    DWORD PTR [rax+0x0]
   2ce98:	add    eax,0x7
   2ce9b:	mov    ecx,DWORD PTR [rsp+0x4]
   2ce9f:	mov    rdx,QWORD PTR [rsp+0x8]
   2cea4:	mov    DWORD PTR [rbx],eax
   2cea6:	cmp    DWORD PTR [rsi+0x18],0x1
   2ceaa:	mov    DWORD PTR [rsi+0x50],ecx
   2cead:	mov    rdi,QWORD PTR [rdx+0x18]
   2ceb1:	je     2cf50 <writeLumaCoeff8x8_CABAC+0x170>
   2ceb7:	mov    rcx,QWORD PTR [rsp+0x18]
   2cebc:	cdqe   
   2cebe:	movsxd rsi,DWORD PTR [rcx+rax*4]
   2cec2:	mov    rax,rsi
   2cec5:	shl    rax,0x4
   2cec9:	sub    rax,rsi
   2cecc:	lea    rax,[rdi+rax*8]
   2ced0:	mov    rsi,rax
   2ced3:	mov    rdi,rbx
   2ced6:	add    rbx,0x30
   2ceda:	call   QWORD PTR [rax+0x70]
   2cedd:	mov    eax,DWORD PTR [rbx-0x24]
   2cee0:	add    DWORD PTR [r14+0x28],eax
   2cee4:	lea    eax,[r15+0x1]
   2cee8:	add    r12d,DWORD PTR [rbx-0x24]
   2ceec:	add    DWORD PTR [r14],0x1
   2cef0:	cmp    eax,0x40
   2cef3:	setle  sil
   2cef7:	test   ebp,ebp
   2cef9:	setne  al
   2cefc:	add    r15,0x1
   2cf00:	test   sil,al
   2cf03:	je     2cf70 <writeLumaCoeff8x8_CABAC+0x190>
   2cf05:	mov    rsi,QWORD PTR [rip+0x5b6a4]        # 885b0 <img>
   2cf0c:	mov    rax,QWORD PTR [rsp+0x10]
   2cf11:	cmp    DWORD PTR [rsp+0x4],0x1
   2cf16:	mov    ebp,DWORD PTR [rax+r15*4]
   2cf1a:	mov    DWORD PTR [rbx+0x4],ebp
   2cf1d:	mov    eax,DWORD PTR [r13+r15*4+0x0]
   2cf22:	mov    DWORD PTR [rbx+0x18],0x2
   2cf29:	mov    DWORD PTR [rbx+0x8],eax
   2cf2c:	lea    rax,[rip+0xfffffffffffe1c1d]        # eb50 <writeRunLevel_CABAC>
   2cf33:	mov    QWORD PTR [rbx+0x28],rax
   2cf37:	sbb    eax,eax
   2cf39:	and    eax,0x5
   2cf3c:	test   r15,r15
   2cf3f:	je     2ce98 <writeLumaCoeff8x8_CABAC+0xb8>
   2cf45:	add    eax,0x9
   2cf48:	jmp    2ce9b <writeLumaCoeff8x8_CABAC+0xbb>
   2cf4d:	nop    DWORD PTR [rax]
   2cf50:	mov    rax,QWORD PTR [rsp+0x18]
   2cf55:	movsxd rsi,DWORD PTR [rax+0x48]
   2cf59:	mov    rax,rsi
   2cf5c:	shl    rax,0x4
   2cf60:	sub    rax,rsi
   2cf63:	lea    rax,[rdi+rax*8]
   2cf67:	jmp    2ced0 <writeLumaCoeff8x8_CABAC+0xf0>
   2cf6c:	nop    DWORD PTR [rax+0x0]
   2cf70:	add    rsp,0x28
   2cf74:	mov    eax,r12d
   2cf77:	pop    rbx
   2cf78:	pop    rbp
   2cf79:	pop    r12
   2cf7b:	pop    r13
   2cf7d:	pop    r14
   2cf7f:	pop    r15
   2cf81:	ret    
   2cf82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2cf8d:	nop    DWORD PTR [rax]

000000000002cf90 <predict_nnz>:
   2cf90:	endbr64 
   2cf94:	push   r15
   2cf96:	mov    edx,esi
   2cf98:	xor    r8d,r8d
   2cf9b:	mov    ecx,0xffffffff
   2cfa0:	push   r14
   2cfa2:	push   r13
   2cfa4:	mov    r13d,esi
   2cfa7:	mov    esi,edi
   2cfa9:	push   r12
   2cfab:	push   rbp
   2cfac:	mov    ebp,edi
   2cfae:	push   rbx
   2cfaf:	sub    rsp,0x28
   2cfb3:	mov    rax,QWORD PTR fs:0x28
   2cfbc:	mov    QWORD PTR [rsp+0x18],rax
   2cfc1:	xor    eax,eax
   2cfc3:	mov    rax,QWORD PTR [rip+0x5b5e6]        # 885b0 <img>
   2cfca:	mov    rbx,rsp
   2cfcd:	mov    r9,rbx
   2cfd0:	mov    r14d,DWORD PTR [rax+0xc]
   2cfd4:	mov    edi,r14d
   2cfd7:	call   30b60 <getLuma4x4Neighbour>
   2cfdc:	mov    eax,DWORD PTR [rsp]
   2cfdf:	test   eax,eax
   2cfe1:	jne    2d0a0 <predict_nnz+0x110>
   2cfe7:	xor    r15d,r15d
   2cfea:	xor    r12d,r12d
   2cfed:	mov    r9,rbx
   2cff0:	mov    r8d,0xffffffff
   2cff6:	xor    ecx,ecx
   2cff8:	mov    edx,r13d
   2cffb:	mov    esi,ebp
   2cffd:	mov    edi,r14d
   2d000:	call   30b60 <getLuma4x4Neighbour>
   2d005:	mov    eax,DWORD PTR [rsp]
   2d008:	test   eax,eax
   2d00a:	je     2d07e <predict_nnz+0xee>
   2d00c:	mov    rsi,QWORD PTR [rip+0x73ded]        # a0e00 <active_pps>
   2d013:	mov    rcx,QWORD PTR [rip+0x5b596]        # 885b0 <img>
   2d01a:	movsxd rdx,DWORD PTR [rsp+0x4]
   2d01f:	mov    edi,DWORD PTR [rsi+0xe0]
   2d025:	test   edi,edi
   2d027:	je     2d049 <predict_nnz+0xb9>
   2d029:	mov    rsi,QWORD PTR [rip+0x5b588]        # 885b8 <input>
   2d030:	mov    esi,DWORD PTR [rsi+0x93c]
   2d036:	test   esi,esi
   2d038:	je     2d049 <predict_nnz+0xb9>
   2d03a:	mov    rsi,QWORD PTR [rcx+0x11868]
   2d041:	and    eax,DWORD PTR [rsi+rdx*4]
   2d044:	mov    DWORD PTR [rsp],eax
   2d047:	je     2d07e <predict_nnz+0xee>
   2d049:	mov    rax,QWORD PTR [rcx+0x80]
   2d050:	movsxd rcx,DWORD PTR [rsp+0x8]
   2d055:	mov    rax,QWORD PTR [rax+rdx*8]
   2d059:	movsxd rdx,DWORD PTR [rsp+0xc]
   2d05e:	mov    rax,QWORD PTR [rax+rcx*8]
   2d062:	add    r12d,DWORD PTR [rax+rdx*4]
   2d066:	cmp    r15d,0x1
   2d06a:	jne    2d07e <predict_nnz+0xee>
   2d06c:	lea    eax,[r12+0x1]
   2d071:	mov    r12d,eax
   2d074:	shr    r12d,0x1f
   2d078:	add    r12d,eax
   2d07b:	sar    r12d,1
   2d07e:	mov    rax,QWORD PTR [rsp+0x18]
   2d083:	xor    rax,QWORD PTR fs:0x28
   2d08c:	jne    2d10d <predict_nnz+0x17d>
   2d08e:	add    rsp,0x28
   2d092:	mov    eax,r12d
   2d095:	pop    rbx
   2d096:	pop    rbp
   2d097:	pop    r12
   2d099:	pop    r13
   2d09b:	pop    r14
   2d09d:	pop    r15
   2d09f:	ret    
   2d0a0:	mov    rsi,QWORD PTR [rip+0x73d59]        # a0e00 <active_pps>
   2d0a7:	mov    rcx,QWORD PTR [rip+0x5b502]        # 885b0 <img>
   2d0ae:	movsxd rdx,DWORD PTR [rsp+0x4]
   2d0b3:	mov    r9d,DWORD PTR [rsi+0xe0]
   2d0ba:	test   r9d,r9d
   2d0bd:	je     2d0e5 <predict_nnz+0x155>
   2d0bf:	mov    rsi,QWORD PTR [rip+0x5b4f2]        # 885b8 <input>
   2d0c6:	mov    r8d,DWORD PTR [rsi+0x93c]
   2d0cd:	test   r8d,r8d
   2d0d0:	je     2d0e5 <predict_nnz+0x155>
   2d0d2:	mov    rsi,QWORD PTR [rcx+0x11868]
   2d0d9:	and    eax,DWORD PTR [rsi+rdx*4]
   2d0dc:	mov    DWORD PTR [rsp],eax
   2d0df:	je     2cfe7 <predict_nnz+0x57>
   2d0e5:	mov    rax,QWORD PTR [rcx+0x80]
   2d0ec:	movsxd rcx,DWORD PTR [rsp+0x8]
   2d0f1:	mov    r15d,0x1
   2d0f7:	mov    rax,QWORD PTR [rax+rdx*8]
   2d0fb:	movsxd rdx,DWORD PTR [rsp+0xc]
   2d100:	mov    rax,QWORD PTR [rax+rcx*8]
   2d104:	mov    r12d,DWORD PTR [rax+rdx*4]
   2d108:	jmp    2cfed <predict_nnz+0x5d>
   2d10d:	call   4390 <__stack_chk_fail@plt>
   2d112:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2d11d:	nop    DWORD PTR [rax]

000000000002d120 <predict_nnz_chroma>:
   2d120:	endbr64 
   2d124:	movabs rdx,0x400000004
   2d12e:	push   r15
   2d130:	push   r14
   2d132:	push   r13
   2d134:	push   r12
   2d136:	push   rbp
   2d137:	mov    ebp,edi
   2d139:	push   rbx
   2d13a:	sub    rsp,0x78
   2d13e:	mov    rax,QWORD PTR fs:0x28
   2d147:	mov    QWORD PTR [rsp+0x68],rax
   2d14c:	xor    eax,eax
   2d14e:	mov    rax,QWORD PTR [rip+0x5b45b]        # 885b0 <img>
   2d155:	mov    QWORD PTR [rsp+0x40],rdx
   2d15a:	mov    QWORD PTR [rsp+0x48],rdx
   2d15f:	movabs rdx,0x800000008
   2d169:	cmp    DWORD PTR [rax+0x11bfc],0x3
   2d170:	mov    r15d,DWORD PTR [rax+0xc]
   2d174:	mov    QWORD PTR [rsp+0x50],rdx
   2d179:	mov    QWORD PTR [rsp+0x30],0x0
   2d182:	mov    QWORD PTR [rsp+0x38],0x0
   2d18b:	mov    QWORD PTR [rsp+0x58],rdx
   2d190:	je     2d310 <predict_nnz_chroma+0x1f0>
   2d196:	mov    eax,edi
   2d198:	lea    r12d,[rsi-0x4]
   2d19c:	lea    r9,[rsp+0x10]
   2d1a1:	xor    r8d,r8d
   2d1a4:	shr    eax,0x1f
   2d1a7:	mov    ecx,0xffffffff
   2d1ac:	mov    edx,r12d
   2d1af:	mov    QWORD PTR [rsp+0x8],r9
   2d1b4:	lea    r14d,[rdi+rax*1]
   2d1b8:	mov    edi,r15d
   2d1bb:	and    r14d,0x1
   2d1bf:	sub    r14d,eax
   2d1c2:	mov    esi,r14d
   2d1c5:	call   30bd0 <getChroma4x4Neighbour>
   2d1ca:	mov    eax,DWORD PTR [rsp+0x10]
   2d1ce:	mov    r9,QWORD PTR [rsp+0x8]
   2d1d3:	test   eax,eax
   2d1d5:	jne    2d290 <predict_nnz_chroma+0x170>
   2d1db:	xor    ebx,ebx
   2d1dd:	xor    r13d,r13d
   2d1e0:	mov    r8d,0xffffffff
   2d1e6:	xor    ecx,ecx
   2d1e8:	mov    edx,r12d
   2d1eb:	mov    esi,r14d
   2d1ee:	mov    edi,r15d
   2d1f1:	call   30bd0 <getChroma4x4Neighbour>
   2d1f6:	mov    eax,DWORD PTR [rsp+0x10]
   2d1fa:	test   eax,eax
   2d1fc:	je     2d267 <predict_nnz_chroma+0x147>
   2d1fe:	mov    rsi,QWORD PTR [rip+0x73bfb]        # a0e00 <active_pps>
   2d205:	mov    rcx,QWORD PTR [rip+0x5b3a4]        # 885b0 <img>
   2d20c:	movsxd rdx,DWORD PTR [rsp+0x14]
   2d211:	mov    r12d,DWORD PTR [rsi+0xe0]
   2d218:	test   r12d,r12d
   2d21b:	jne    2d458 <predict_nnz_chroma+0x338>
   2d221:	mov    edi,ebp
   2d223:	mov    rax,QWORD PTR [rcx+0x80]
   2d22a:	add    ebx,0x1
   2d22d:	shr    edi,0x1f
   2d230:	add    ebp,edi
   2d232:	mov    rdx,QWORD PTR [rax+rdx*8]
   2d236:	mov    eax,DWORD PTR [rsp+0x1c]
   2d23a:	and    ebp,0xfffffffe
   2d23d:	add    ebp,DWORD PTR [rsp+0x18]
   2d241:	movsxd rbp,ebp
   2d244:	add    eax,0x4
   2d247:	mov    rdx,QWORD PTR [rdx+rbp*8]
   2d24b:	cdqe   
   2d24d:	add    r13d,DWORD PTR [rdx+rax*4]
   2d251:	cmp    ebx,0x2
   2d254:	jne    2d267 <predict_nnz_chroma+0x147>
   2d256:	lea    eax,[r13+0x1]
   2d25a:	mov    r13d,eax
   2d25d:	shr    r13d,0x1f
   2d261:	add    r13d,eax
   2d264:	sar    r13d,1
   2d267:	mov    rax,QWORD PTR [rsp+0x68]
   2d26c:	xor    rax,QWORD PTR fs:0x28
   2d275:	jne    2d488 <predict_nnz_chroma+0x368>
   2d27b:	add    rsp,0x78
   2d27f:	mov    eax,r13d
   2d282:	pop    rbx
   2d283:	pop    rbp
   2d284:	pop    r12
   2d286:	pop    r13
   2d288:	pop    r14
   2d28a:	pop    r15
   2d28c:	ret    
   2d28d:	nop    DWORD PTR [rax]
   2d290:	mov    rsi,QWORD PTR [rip+0x73b69]        # a0e00 <active_pps>
   2d297:	mov    rcx,QWORD PTR [rip+0x5b312]        # 885b0 <img>
   2d29e:	movsxd rdx,DWORD PTR [rsp+0x14]
   2d2a3:	mov    esi,DWORD PTR [rsi+0xe0]
   2d2a9:	test   esi,esi
   2d2ab:	je     2d2d4 <predict_nnz_chroma+0x1b4>
   2d2ad:	mov    rsi,QWORD PTR [rip+0x5b304]        # 885b8 <input>
   2d2b4:	mov    r13d,DWORD PTR [rsi+0x93c]
   2d2bb:	test   r13d,r13d
   2d2be:	je     2d2d4 <predict_nnz_chroma+0x1b4>
   2d2c0:	mov    rsi,QWORD PTR [rcx+0x11868]
   2d2c7:	and    eax,DWORD PTR [rsi+rdx*4]
   2d2ca:	mov    DWORD PTR [rsp+0x10],eax
   2d2ce:	je     2d1db <predict_nnz_chroma+0xbb>
   2d2d4:	mov    eax,ebp
   2d2d6:	mov    rcx,QWORD PTR [rcx+0x80]
   2d2dd:	mov    ebx,DWORD PTR [rsp+0x1c]
   2d2e1:	shr    eax,0x1f
   2d2e4:	add    eax,ebp
   2d2e6:	mov    rcx,QWORD PTR [rcx+rdx*8]
   2d2ea:	lea    edx,[rbx+0x4]
   2d2ed:	mov    ebx,0x1
   2d2f2:	and    eax,0xfffffffe
   2d2f5:	add    eax,DWORD PTR [rsp+0x18]
   2d2f9:	movsxd rdx,edx
   2d2fc:	cdqe   
   2d2fe:	mov    rax,QWORD PTR [rcx+rax*8]
   2d302:	mov    r13d,DWORD PTR [rax+rdx*4]
   2d306:	jmp    2d1e0 <predict_nnz_chroma+0xc0>
   2d30b:	nop    DWORD PTR [rax+rax*1+0x0]
   2d310:	movsxd rax,esi
   2d313:	lea    r9,[rsp+0x10]
   2d318:	xor    r8d,r8d
   2d31b:	mov    ecx,0xffffffff
   2d320:	mov    r14d,DWORD PTR [rsp+rax*4+0x30]
   2d325:	mov    QWORD PTR [rsp+0x8],r9
   2d32a:	sub    esi,r14d
   2d32d:	mov    edx,esi
   2d32f:	mov    r12d,esi
   2d332:	mov    esi,edi
   2d334:	mov    edi,r15d
   2d337:	call   30bd0 <getChroma4x4Neighbour>
   2d33c:	mov    eax,DWORD PTR [rsp+0x10]
   2d340:	mov    r9,QWORD PTR [rsp+0x8]
   2d345:	test   eax,eax
   2d347:	jne    2d3e0 <predict_nnz_chroma+0x2c0>
   2d34d:	xor    ebx,ebx
   2d34f:	xor    r13d,r13d
   2d352:	mov    r8d,0xffffffff
   2d358:	xor    ecx,ecx
   2d35a:	mov    edx,r12d
   2d35d:	mov    esi,ebp
   2d35f:	mov    edi,r15d
   2d362:	call   30bd0 <getChroma4x4Neighbour>
   2d367:	mov    eax,DWORD PTR [rsp+0x10]
   2d36b:	test   eax,eax
   2d36d:	je     2d267 <predict_nnz_chroma+0x147>
   2d373:	mov    rsi,QWORD PTR [rip+0x73a86]        # a0e00 <active_pps>
   2d37a:	mov    rcx,QWORD PTR [rip+0x5b22f]        # 885b0 <img>
   2d381:	movsxd rdx,DWORD PTR [rsp+0x14]
   2d386:	mov    edi,DWORD PTR [rsi+0xe0]
   2d38c:	test   edi,edi
   2d38e:	je     2d3b5 <predict_nnz_chroma+0x295>
   2d390:	mov    rsi,QWORD PTR [rip+0x5b221]        # 885b8 <input>
   2d397:	mov    esi,DWORD PTR [rsi+0x93c]
   2d39d:	test   esi,esi
   2d39f:	je     2d3b5 <predict_nnz_chroma+0x295>
   2d3a1:	mov    rsi,QWORD PTR [rcx+0x11868]
   2d3a8:	and    eax,DWORD PTR [rsi+rdx*4]
   2d3ab:	mov    DWORD PTR [rsp+0x10],eax
   2d3af:	je     2d267 <predict_nnz_chroma+0x147>
   2d3b5:	mov    rax,QWORD PTR [rcx+0x80]
   2d3bc:	movsxd rcx,DWORD PTR [rsp+0x18]
   2d3c1:	add    ebx,0x1
   2d3c4:	add    r14d,DWORD PTR [rsp+0x1c]
   2d3c9:	mov    rax,QWORD PTR [rax+rdx*8]
   2d3cd:	movsxd r14,r14d
   2d3d0:	mov    rax,QWORD PTR [rax+rcx*8]
   2d3d4:	add    r13d,DWORD PTR [rax+r14*4]
   2d3d8:	jmp    2d251 <predict_nnz_chroma+0x131>
   2d3dd:	nop    DWORD PTR [rax]
   2d3e0:	mov    rsi,QWORD PTR [rip+0x73a19]        # a0e00 <active_pps>
   2d3e7:	mov    rcx,QWORD PTR [rip+0x5b1c2]        # 885b0 <img>
   2d3ee:	movsxd rdx,DWORD PTR [rsp+0x14]
   2d3f3:	mov    r10d,DWORD PTR [rsi+0xe0]
   2d3fa:	test   r10d,r10d
   2d3fd:	je     2d426 <predict_nnz_chroma+0x306>
   2d3ff:	mov    rsi,QWORD PTR [rip+0x5b1b2]        # 885b8 <input>
   2d406:	mov    r8d,DWORD PTR [rsi+0x93c]
   2d40d:	test   r8d,r8d
   2d410:	je     2d426 <predict_nnz_chroma+0x306>
   2d412:	mov    rsi,QWORD PTR [rcx+0x11868]
   2d419:	and    eax,DWORD PTR [rsi+rdx*4]
   2d41c:	mov    DWORD PTR [rsp+0x10],eax
   2d420:	je     2d34d <predict_nnz_chroma+0x22d>
   2d426:	mov    rax,QWORD PTR [rcx+0x80]
   2d42d:	movsxd rcx,DWORD PTR [rsp+0x18]
   2d432:	mov    ebx,0x1
   2d437:	mov    rdx,QWORD PTR [rax+rdx*8]
   2d43b:	mov    eax,DWORD PTR [rsp+0x1c]
   2d43f:	mov    rdx,QWORD PTR [rdx+rcx*8]
   2d443:	add    eax,r14d
   2d446:	cdqe   
   2d448:	mov    r13d,DWORD PTR [rdx+rax*4]
   2d44c:	jmp    2d352 <predict_nnz_chroma+0x232>
   2d451:	nop    DWORD PTR [rax+0x0]
   2d458:	mov    rsi,QWORD PTR [rip+0x5b159]        # 885b8 <input>
   2d45f:	mov    r11d,DWORD PTR [rsi+0x93c]
   2d466:	test   r11d,r11d
   2d469:	je     2d221 <predict_nnz_chroma+0x101>
   2d46f:	mov    rsi,QWORD PTR [rcx+0x11868]
   2d476:	and    eax,DWORD PTR [rsi+rdx*4]
   2d479:	mov    DWORD PTR [rsp+0x10],eax
   2d47d:	jne    2d221 <predict_nnz_chroma+0x101>
   2d483:	jmp    2d267 <predict_nnz_chroma+0x147>
   2d488:	call   4390 <__stack_chk_fail@plt>
   2d48d:	nop    DWORD PTR [rax]

000000000002d490 <writeCoeff4x4_CAVLC>:
   2d490:	endbr64 
   2d494:	push   r15
   2d496:	mov    r8d,esi
   2d499:	push   r14
   2d49b:	mov    r14d,edi
   2d49e:	push   r13
   2d4a0:	push   r12
   2d4a2:	push   rbp
   2d4a3:	push   rbx
   2d4a4:	sub    rsp,0xa8
   2d4ab:	mov    rdi,QWORD PTR [rip+0x5b0fe]        # 885b0 <img>
   2d4b2:	mov    DWORD PTR [rsp+0x28],edx
   2d4b6:	movsxd r13,DWORD PTR [rdi+0xc]
   2d4ba:	mov    rbp,QWORD PTR [rdi+0x3750]
   2d4c1:	mov    DWORD PTR [rsp+0x5c],ecx
   2d4c5:	imul   r13,r13,0x278
   2d4cc:	add    r13,QWORD PTR [rdi+0x3758]
   2d4d3:	mov    rax,QWORD PTR fs:0x28
   2d4dc:	mov    QWORD PTR [rsp+0x98],rax
   2d4e4:	xor    eax,eax
   2d4e6:	movsxd r15,DWORD PTR [r13+0x0]
   2d4ea:	mov    QWORD PTR [rsp+0x20],rdi
   2d4ef:	mov    DWORD PTR [rsp+0x78],0x8000
   2d4f7:	lea    rax,[r15+r15*2]
   2d4fb:	shl    rax,0x4
   2d4ff:	lea    r9,[rdi+rax*1+0x3760]
   2d507:	lea    rax,[r13+0x14]
   2d50b:	mov    QWORD PTR [rsp+0x10],rax
   2d510:	mov    rax,QWORD PTR [rip+0x5b0a1]        # 885b8 <input>
   2d517:	movsxd rdx,DWORD PTR [rax+0x93c]
   2d51e:	lea    rax,[rip+0x5d44b]        # 8a970 <assignSE2partition>
   2d525:	mov    rbx,QWORD PTR [rax+rdx*8]
   2d529:	movabs rax,0x300000000
   2d533:	mov    QWORD PTR [rsp+0x60],rax
   2d538:	movabs rax,0xc00000006
   2d542:	mov    QWORD PTR [rsp+0x68],rax
   2d547:	movabs rax,0x3000000018
   2d551:	mov    QWORD PTR [rsp+0x70],rax
   2d556:	cmp    r14d,0x7
   2d55a:	ja     2d570 <writeCoeff4x4_CAVLC+0xe0>
   2d55c:	lea    rcx,[rip+0x47a3d]        # 74fa0 <mb_width_cr.6670+0x90>
   2d563:	mov    edx,r14d
   2d566:	movsxd rax,DWORD PTR [rcx+rdx*4]
   2d56a:	add    rax,rcx
   2d56d:	notrack jmp rax
   2d570:	lea    rdi,[rip+0x479f1]        # 74f68 <mb_width_cr.6670+0x58>
   2d577:	mov    esi,0x258
   2d57c:	mov    DWORD PTR [rsp+0x38],r8d
   2d581:	xor    r14d,r14d
   2d584:	mov    QWORD PTR [rsp+0x18],r9
   2d589:	call   19180 <error>
   2d58e:	mov    DWORD PTR [rsp+0x3c],0x0
   2d596:	xor    r10d,r10d
   2d599:	mov    rdi,QWORD PTR [rip+0x5b010]        # 885b0 <img>
   2d5a0:	mov    QWORD PTR [rsp+0x40],0x0
   2d5a9:	mov    r8d,DWORD PTR [rsp+0x38]
   2d5ae:	mov    DWORD PTR [rsp+0x58],0x0
   2d5b6:	mov    r9,QWORD PTR [rsp+0x18]
   2d5bb:	mov    DWORD PTR [rsp+0xc],0x0
   2d5c3:	nop    DWORD PTR [rax+rax*1+0x0]
   2d5c8:	movsxd rdx,DWORD PTR [rbx]
   2d5cb:	xor    ecx,ecx
   2d5cd:	xor    esi,esi
   2d5cf:	mov    QWORD PTR [rsp+0x30],r13
   2d5d4:	mov    QWORD PTR [rsp+0x48],r9
   2d5d9:	mov    r13,QWORD PTR [rsp+0x40]
   2d5de:	xor    ebx,ebx
   2d5e0:	xor    r12d,r12d
   2d5e3:	mov    rax,rdx
   2d5e6:	mov    DWORD PTR [rsp+0x54],r8d
   2d5eb:	mov    r11d,0x3
   2d5f1:	mov    r9d,ecx
   2d5f4:	shl    rax,0x4
   2d5f8:	mov    r8d,esi
   2d5fb:	sub    rax,rdx
   2d5fe:	mov    rdx,QWORD PTR [rbp+0x18]
   2d602:	mov    ebp,DWORD PTR [rsp+0x3c]
   2d606:	lea    rax,[rdx+rax*8]
   2d60a:	mov    edx,0x1
   2d60f:	mov    QWORD PTR [rsp+0x18],rax
   2d614:	xor    eax,eax
   2d616:	jmp    2d62d <writeCoeff4x4_CAVLC+0x19d>
   2d618:	nop    DWORD PTR [rax+rax*1+0x0]
   2d620:	xor    ebx,ebx
   2d622:	add    r8d,0x1
   2d626:	mov    r12d,esi
   2d629:	add    rax,0x1
   2d62d:	mov    esi,eax
   2d62f:	mov    ecx,0x10
   2d634:	test   ebp,ebp
   2d636:	je     2d63e <writeCoeff4x4_CAVLC+0x1ae>
   2d638:	mov    ecx,DWORD PTR [rdi+0x11bf8]
   2d63e:	cmp    ecx,eax
   2d640:	jl     2d8d8 <writeCoeff4x4_CAVLC+0x448>
   2d646:	test   edx,edx
   2d648:	je     2d8d8 <writeCoeff4x4_CAVLC+0x448>
   2d64e:	mov    edx,DWORD PTR [r10+rax*4]
   2d652:	mov    ecx,DWORD PTR [r13+rax*4+0x0]
   2d657:	test   edx,edx
   2d659:	je     2d629 <writeCoeff4x4_CAVLC+0x199>
   2d65b:	mov    r12d,edx
   2d65e:	add    r9d,ecx
   2d661:	sar    r12d,0x1f
   2d665:	mov    ecx,r12d
   2d668:	xor    ecx,edx
   2d66a:	sub    ecx,r12d
   2d66d:	cmp    ecx,0x1
   2d670:	jne    2d620 <writeCoeff4x4_CAVLC+0x190>
   2d672:	add    ebx,0x1
   2d675:	cmp    ebx,0x3
   2d678:	cmovg  ebx,r11d
   2d67c:	jmp    2d622 <writeCoeff4x4_CAVLC+0x192>
   2d67e:	xchg   ax,ax
   2d680:	mov    rcx,QWORD PTR [rdi+0x3738]
   2d687:	movsxd rdx,esi
   2d68a:	movsxd rax,DWORD PTR [rsp+0x28]
   2d68f:	lea    rsi,[r13+0x28]
   2d693:	mov    QWORD PTR [rsp+0x10],rsi
   2d698:	mov    rdx,QWORD PTR [rcx+rdx*8]
   2d69c:	mov    rax,QWORD PTR [rdx+rax*8]
   2d6a0:	mov    r10,QWORD PTR [rax]
   2d6a3:	mov    rax,QWORD PTR [rax+0x8]
   2d6a7:	mov    BYTE PTR [rsp+0x8d],0x0
   2d6af:	mov    DWORD PTR [rsp+0x89],0x616d754c
   2d6ba:	mov    QWORD PTR [rsp+0x40],rax
   2d6bf:	mov    eax,DWORD PTR [r13+0x48]
   2d6c3:	lea    edx,[rax-0x9]
   2d6c6:	cmp    edx,0x1
   2d6c9:	jbe    2de86 <writeCoeff4x4_CAVLC+0x9f6>
   2d6cf:	cmp    eax,0xd
   2d6d2:	je     2de86 <writeCoeff4x4_CAVLC+0x9f6>
   2d6d8:	mov    DWORD PTR [rsp+0x3c],r14d
   2d6dd:	add    rbx,0x38
   2d6e1:	mov    DWORD PTR [rsp+0x58],0x10
   2d6e9:	mov    DWORD PTR [rsp+0xc],0xe
   2d6f1:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2d6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d700:	mov    rax,QWORD PTR [rdi+0x3740]
   2d707:	add    rbx,0x1c
   2d70b:	xor    r14d,r14d
   2d70e:	mov    DWORD PTR [rsp+0x3c],0x0
   2d716:	mov    DWORD PTR [rsp+0x58],0x10
   2d71e:	mov    rax,QWORD PTR [rax]
   2d721:	mov    DWORD PTR [rsp+0xc],0x7
   2d729:	mov    r10,QWORD PTR [rax]
   2d72c:	mov    rax,QWORD PTR [rax+0x8]
   2d730:	mov    QWORD PTR [rsp+0x40],rax
   2d735:	movabs rax,0x434436316d754c
   2d73f:	mov    QWORD PTR [rsp+0x89],rax
   2d747:	lea    rax,[r13+0x28]
   2d74b:	mov    QWORD PTR [rsp+0x10],rax
   2d750:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2d755:	nop    DWORD PTR [rax]
   2d758:	mov    eax,DWORD PTR [rdi+0x11bf8]
   2d75e:	mov    rdx,QWORD PTR [rdi+0x3740]
   2d765:	mov    r14d,0x43
   2d76b:	lea    rsi,[r13+0x2c]
   2d76f:	mov    QWORD PTR [rsp+0x10],rsi
   2d774:	mov    DWORD PTR [rsp+0x58],eax
   2d778:	movsxd rax,DWORD PTR [rsp+0x5c]
   2d77d:	mov    rax,QWORD PTR [rdx+rax*8+0x8]
   2d782:	mov    r10,QWORD PTR [rax]
   2d785:	mov    rax,QWORD PTR [rax+0x8]
   2d789:	mov    DWORD PTR [rsp+0x89],0x44726843
   2d794:	mov    WORD PTR [rsp+0x8d],r14w
   2d79d:	mov    QWORD PTR [rsp+0x40],rax
   2d7a2:	mov    eax,DWORD PTR [r13+0x48]
   2d7a6:	lea    edx,[rax-0x9]
   2d7a9:	cmp    edx,0x1
   2d7ac:	jbe    2de6a <writeCoeff4x4_CAVLC+0x9da>
   2d7b2:	cmp    eax,0xd
   2d7b5:	je     2de6a <writeCoeff4x4_CAVLC+0x9da>
   2d7bb:	mov    DWORD PTR [rsp+0x3c],0x1
   2d7c3:	add    rbx,0x34
   2d7c7:	xor    r14d,r14d
   2d7ca:	mov    DWORD PTR [rsp+0xc],0xd
   2d7d2:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2d7d7:	nop    WORD PTR [rax+rax*1+0x0]
   2d7e0:	mov    rcx,QWORD PTR [rdi+0x3738]
   2d7e7:	movsxd rdx,esi
   2d7ea:	movsxd rax,DWORD PTR [rsp+0x28]
   2d7ef:	mov    r12d,0x43
   2d7f5:	mov    rdx,QWORD PTR [rcx+rdx*8]
   2d7f9:	mov    rax,QWORD PTR [rdx+rax*8]
   2d7fd:	lea    rdx,[r13+0x2c]
   2d801:	mov    QWORD PTR [rsp+0x10],rdx
   2d806:	mov    r10,QWORD PTR [rax]
   2d809:	mov    rax,QWORD PTR [rax+0x8]
   2d80d:	mov    DWORD PTR [rsp+0x89],0x41726843
   2d818:	mov    WORD PTR [rsp+0x8d],r12w
   2d821:	mov    QWORD PTR [rsp+0x40],rax
   2d826:	mov    eax,DWORD PTR [r13+0x48]
   2d82a:	lea    edx,[rax-0x9]
   2d82d:	cmp    edx,0x1
   2d830:	jbe    2dea4 <writeCoeff4x4_CAVLC+0xa14>
   2d836:	cmp    eax,0xd
   2d839:	je     2dea4 <writeCoeff4x4_CAVLC+0xa14>
   2d83f:	mov    DWORD PTR [rsp+0x3c],0x0
   2d847:	add    rbx,0x3c
   2d84b:	mov    r14d,0x1
   2d851:	mov    DWORD PTR [rsp+0x58],0xf
   2d859:	mov    DWORD PTR [rsp+0xc],0xf
   2d861:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2d866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d870:	mov    rcx,QWORD PTR [rdi+0x3738]
   2d877:	movsxd rdx,esi
   2d87a:	movsxd rax,DWORD PTR [rsp+0x28]
   2d87f:	mov    DWORD PTR [rsp+0x3c],0x0
   2d887:	mov    DWORD PTR [rsp+0x58],0xf
   2d88f:	add    rbx,0x24
   2d893:	xor    r14d,r14d
   2d896:	mov    rdx,QWORD PTR [rcx+rdx*8]
   2d89a:	mov    DWORD PTR [rsp+0xc],0x9
   2d8a2:	mov    rax,QWORD PTR [rdx+rax*8]
   2d8a6:	mov    r10,QWORD PTR [rax]
   2d8a9:	mov    rax,QWORD PTR [rax+0x8]
   2d8ad:	mov    QWORD PTR [rsp+0x40],rax
   2d8b2:	movabs rax,0x434136316d754c
   2d8bc:	mov    QWORD PTR [rsp+0x89],rax
   2d8c4:	lea    rax,[r13+0x28]
   2d8c8:	mov    QWORD PTR [rsp+0x10],rax
   2d8cd:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2d8d2:	nop    WORD PTR [rax+rax*1+0x0]
   2d8d8:	mov    ebp,DWORD PTR [rsp+0x3c]
   2d8dc:	mov    r13,QWORD PTR [rsp+0x30]
   2d8e1:	mov    DWORD PTR [rsp+0x38],r8d
   2d8e6:	mov    DWORD PTR [rsp+0x50],r9d
   2d8eb:	mov    r8d,DWORD PTR [rsp+0x54]
   2d8f0:	mov    r9,QWORD PTR [rsp+0x48]
   2d8f5:	test   ebp,ebp
   2d8f7:	jne    2dd28 <writeCoeff4x4_CAVLC+0x898>
   2d8fd:	test   r14d,r14d
   2d900:	jne    2de08 <writeCoeff4x4_CAVLC+0x978>
   2d906:	mov    edi,DWORD PTR [rsp+0x28]
   2d90a:	mov    r14d,edi
   2d90d:	and    r14d,0x1
   2d911:	test   r8b,0x1
   2d915:	lea    eax,[r14+0x2]
   2d919:	cmovne r14d,eax
   2d91d:	cmp    r8d,0x1
   2d921:	jle    2de50 <writeCoeff4x4_CAVLC+0x9c0>
   2d927:	xor    ebp,ebp
   2d929:	cmp    DWORD PTR [rsp+0x28],0x2
   2d92e:	setge  sil
   2d932:	setge  bpl
   2d936:	movzx  esi,sil
   2d93a:	lea    rbp,[rbp*4+0x8]
   2d942:	add    esi,0x2
   2d945:	mov    edi,r14d
   2d948:	mov    QWORD PTR [rsp+0x30],r9
   2d94d:	mov    QWORD PTR [rsp+0x28],r10
   2d952:	call   2cf90 <predict_nnz>
   2d957:	mov    r10,QWORD PTR [rsp+0x28]
   2d95c:	mov    r9,QWORD PTR [rsp+0x30]
   2d961:	mov    rdx,QWORD PTR [rip+0x5ac48]        # 885b0 <img>
   2d968:	movsxd r14,r14d
   2d96b:	mov    esi,DWORD PTR [rsp+0x38]
   2d96f:	movsxd rcx,DWORD PTR [rdx+0xc]
   2d973:	mov    rdx,QWORD PTR [rdx+0x80]
   2d97a:	mov    rdx,QWORD PTR [rdx+rcx*8]
   2d97e:	mov    rdx,QWORD PTR [rdx+r14*8]
   2d982:	mov    DWORD PTR [rdx+rbp*1],esi
   2d985:	xor    edx,edx
   2d987:	cmp    eax,0x1
   2d98a:	jle    2d9a1 <writeCoeff4x4_CAVLC+0x511>
   2d98c:	mov    edx,0x1
   2d991:	cmp    eax,0x3
   2d994:	jle    2d9a1 <writeCoeff4x4_CAVLC+0x511>
   2d996:	xor    edx,edx
   2d998:	cmp    eax,0x7
   2d99b:	setg   dl
   2d99e:	add    edx,0x2
   2d9a1:	mov    esi,DWORD PTR [rsp+0xc]
   2d9a5:	mov    edi,DWORD PTR [rsp+0x38]
   2d9a9:	lea    rax,[r15+r15*2]
   2d9ad:	mov    QWORD PTR [rsp+0x30],r10
   2d9b2:	shl    rax,0x4
   2d9b6:	add    rax,QWORD PTR [rsp+0x20]
   2d9bb:	mov    QWORD PTR [rsp+0x28],r9
   2d9c0:	mov    DWORD PTR [rax+0x3760],esi
   2d9c6:	mov    rsi,QWORD PTR [rsp+0x18]
   2d9cb:	mov    DWORD PTR [rax+0x3764],edi
   2d9d1:	mov    rdi,r9
   2d9d4:	mov    DWORD PTR [rax+0x3768],ebx
   2d9da:	mov    DWORD PTR [rax+0x376c],edx
   2d9e0:	call   66c90 <writeSyntaxElement_NumCoeffTrailingOnes>
   2d9e5:	mov    r9,QWORD PTR [rsp+0x28]
   2d9ea:	mov    r10,QWORD PTR [rsp+0x30]
   2d9ef:	lea    rax,[r15+r15*2]
   2d9f3:	mov    rdi,QWORD PTR [rsp+0x10]
   2d9f8:	mov    r11d,DWORD PTR [rsp+0x38]
   2d9fd:	shl    rax,0x4
   2da01:	add    rax,QWORD PTR [rsp+0x20]
   2da06:	mov    edx,DWORD PTR [rax+0x376c]
   2da0c:	add    DWORD PTR [rdi],edx
   2da0e:	mov    r15d,DWORD PTR [rax+0x376c]
   2da15:	add    DWORD PTR [r13+0x0],0x1
   2da1a:	test   r11d,r11d
   2da1d:	je     2db83 <writeCoeff4x4_CAVLC+0x6f3>
   2da23:	mov    esi,r12d
   2da26:	sub    esi,ebx
   2da28:	mov    DWORD PTR [rsp+0x20],esi
   2da2c:	cmp    r12d,esi
   2da2f:	jle    2decb <writeCoeff4x4_CAVLC+0xa3b>
   2da35:	movsxd rax,r12d
   2da38:	sub    r12d,0x1
   2da3c:	mov    QWORD PTR [rsp+0x48],rax
   2da41:	sub    r12d,esi
   2da44:	shl    rax,0x2
   2da48:	lea    rbp,[r10+rax*1-0x4]
   2da4d:	lea    rdx,[r10+rax*1]
   2da51:	lea    rax,[r12*4+0x0]
   2da59:	sub    rbp,rax
   2da5c:	xor    eax,eax
   2da5e:	xchg   ax,ax
   2da60:	mov    esi,DWORD PTR [rdx]
   2da62:	mov    edi,esi
   2da64:	sar    edi,0x1f
   2da67:	mov    ecx,edi
   2da69:	xor    ecx,esi
   2da6b:	sub    ecx,edi
   2da6d:	cmp    ecx,0x1
   2da70:	jg     2deda <writeCoeff4x4_CAVLC+0xa4a>
   2da76:	add    eax,eax
   2da78:	mov    ecx,eax
   2da7a:	or     ecx,0x1
   2da7d:	test   esi,esi
   2da7f:	cmovs  eax,ecx
   2da82:	sub    rdx,0x4
   2da86:	cmp    rbp,rdx
   2da89:	jne    2da60 <writeCoeff4x4_CAVLC+0x5d0>
   2da8b:	lea    rbp,[r9+0x30]
   2da8f:	test   ebx,ebx
   2da91:	jne    2dd80 <writeCoeff4x4_CAVLC+0x8f0>
   2da97:	cmp    DWORD PTR [rsp+0x38],0xa
   2da9c:	mov    r9d,DWORD PTR [rsp+0x20]
   2daa1:	setg   al
   2daa4:	xor    ecx,ecx
   2daa6:	cmp    ebx,0x2
   2daa9:	setle  cl
   2daac:	and    ecx,eax
   2daae:	mov    r14d,ecx
   2dab1:	test   r9d,r9d
   2dab4:	js     2dbcc <writeCoeff4x4_CAVLC+0x73c>
   2daba:	movsxd r12,DWORD PTR [rsp+0x20]
   2dabf:	mov    eax,DWORD PTR [rsp+0xc]
   2dac3:	mov    ebx,DWORD PTR [r10+r12*4]
   2dac7:	mov    DWORD PTR [rbp+0x0],eax
   2daca:	lea    edx,[rbx-0x1]
   2dacd:	lea    eax,[rbx+0x1]
   2dad0:	test   ebx,ebx
   2dad2:	cmovg  eax,edx
   2dad5:	mov    DWORD PTR [rbp+0x4],eax
   2dad8:	mov    eax,r15d
   2dadb:	mov    QWORD PTR [rsp+0x28],r10
   2dae0:	mov    r15d,r14d
   2dae3:	mov    r14,r12
   2dae6:	mov    QWORD PTR [rsp+0x30],rbp
   2daeb:	mov    r12,r13
   2daee:	mov    r13d,eax
   2daf1:	jmp    2db61 <writeCoeff4x4_CAVLC+0x6d1>
   2daf3:	nop    DWORD PTR [rax+rax*1+0x0]
   2daf8:	mov    rsi,QWORD PTR [rsp+0x18]
   2dafd:	mov    rdi,rbp
   2db00:	call   67050 <writeSyntaxElement_Level_VLC1>
   2db05:	mov    eax,ebx
   2db07:	sar    eax,0x1f
   2db0a:	xor    ebx,eax
   2db0c:	sub    ebx,eax
   2db0e:	movsxd rax,r15d
   2db11:	cmp    ebx,DWORD PTR [rsp+rax*4+0x60]
   2db15:	jle    2db1b <writeCoeff4x4_CAVLC+0x68b>
   2db17:	add    r15d,0x1
   2db1b:	cmp    ebx,0x3
   2db1e:	jle    2db2e <writeCoeff4x4_CAVLC+0x69e>
   2db20:	cmp    DWORD PTR [rsp+0x20],r14d
   2db25:	mov    eax,0x2
   2db2a:	cmove  r15d,eax
   2db2e:	mov    rsi,QWORD PTR [rsp+0x10]
   2db33:	sub    r14,0x1
   2db37:	mov    eax,DWORD PTR [rbp+0xc]
   2db3a:	add    rbp,0x30
   2db3e:	add    DWORD PTR [rsi],eax
   2db40:	add    r13d,DWORD PTR [rbp-0x24]
   2db44:	add    DWORD PTR [r12],0x1
   2db49:	test   r14d,r14d
   2db4c:	js     2dbb0 <writeCoeff4x4_CAVLC+0x720>
   2db4e:	mov    rax,QWORD PTR [rsp+0x28]
   2db53:	mov    ebx,DWORD PTR [rax+r14*4]
   2db57:	mov    eax,DWORD PTR [rsp+0xc]
   2db5b:	mov    DWORD PTR [rbp+0x4],ebx
   2db5e:	mov    DWORD PTR [rbp+0x0],eax
   2db61:	test   r15d,r15d
   2db64:	je     2daf8 <writeCoeff4x4_CAVLC+0x668>
   2db66:	mov    rdx,QWORD PTR [rsp+0x18]
   2db6b:	mov    esi,r15d
   2db6e:	mov    rdi,rbp
   2db71:	call   67110 <writeSyntaxElement_Level_VLCN>
   2db76:	jmp    2db05 <writeCoeff4x4_CAVLC+0x675>
   2db78:	nop    DWORD PTR [rax+rax*1+0x0]
   2db80:	mov    r15d,r8d
   2db83:	mov    rax,QWORD PTR [rsp+0x98]
   2db8b:	xor    rax,QWORD PTR fs:0x28
   2db94:	jne    2def0 <writeCoeff4x4_CAVLC+0xa60>
   2db9a:	add    rsp,0xa8
   2dba1:	mov    eax,r15d
   2dba4:	pop    rbx
   2dba5:	pop    rbp
   2dba6:	pop    r12
   2dba8:	pop    r13
   2dbaa:	pop    r14
   2dbac:	pop    r15
   2dbae:	ret    
   2dbaf:	nop
   2dbb0:	mov    r14d,DWORD PTR [rsp+0x20]
   2dbb5:	mov    rbp,QWORD PTR [rsp+0x30]
   2dbba:	mov    r15d,r13d
   2dbbd:	mov    r13,r12
   2dbc0:	lea    rax,[r14+r14*2+0x3]
   2dbc5:	shl    rax,0x4
   2dbc9:	add    rbp,rax
   2dbcc:	mov    eax,DWORD PTR [rsp+0x38]
   2dbd0:	mov    ebx,DWORD PTR [rsp+0x58]
   2dbd4:	cmp    eax,ebx
   2dbd6:	jge    2dc1e <writeCoeff4x4_CAVLC+0x78e>
   2dbd8:	mov    ebx,DWORD PTR [rsp+0xc]
   2dbdc:	mov    r8d,DWORD PTR [rsp+0x3c]
   2dbe1:	sub    eax,0x1
   2dbe4:	mov    rdi,rbp
   2dbe7:	mov    DWORD PTR [rbp+0xc],eax
   2dbea:	mov    rsi,QWORD PTR [rsp+0x18]
   2dbef:	mov    DWORD PTR [rbp+0x0],ebx
   2dbf2:	mov    ebx,DWORD PTR [rsp+0x50]
   2dbf6:	mov    DWORD PTR [rbp+0x4],ebx
   2dbf9:	test   r8d,r8d
   2dbfc:	jne    2de40 <writeCoeff4x4_CAVLC+0x9b0>
   2dc02:	call   66e50 <writeSyntaxElement_TotalZeros>
   2dc07:	mov    rbx,QWORD PTR [rsp+0x10]
   2dc0c:	mov    eax,DWORD PTR [rbp+0xc]
   2dc0f:	add    rbp,0x30
   2dc13:	add    DWORD PTR [rbx],eax
   2dc15:	add    r15d,DWORD PTR [rbp-0x24]
   2dc19:	add    DWORD PTR [r13+0x0],0x1
   2dc1e:	mov    rax,QWORD PTR [rsp+0x48]
   2dc23:	mov    r12,QWORD PTR [rsp+0x40]
   2dc28:	mov    ebx,DWORD PTR [rsp+0xc]
   2dc2c:	shl    rax,0x2
   2dc30:	add    r12,rax
   2dc33:	cmp    DWORD PTR [rsp+0x38],0x1
   2dc38:	mov    r14d,DWORD PTR [r12]
   2dc3c:	mov    DWORD PTR [rbp+0x0],ebx
   2dc3f:	mov    DWORD PTR [rbp+0x4],r14d
   2dc43:	jle    2db83 <writeCoeff4x4_CAVLC+0x6f3>
   2dc49:	mov    edx,DWORD PTR [rsp+0x50]
   2dc4d:	test   edx,edx
   2dc4f:	je     2db83 <writeCoeff4x4_CAVLC+0x6f3>
   2dc55:	mov    rbx,r12
   2dc58:	mov    r8d,r15d
   2dc5b:	mov    r15,r12
   2dc5e:	mov    r12d,DWORD PTR [rsp+0x50]
   2dc63:	sub    rbx,rax
   2dc66:	mov    r9,rbx
   2dc69:	mov    rbx,r13
   2dc6c:	mov    r13d,DWORD PTR [rsp+0x38]
   2dc71:	cmp    r13d,0x1
   2dc75:	jne    2dca8 <writeCoeff4x4_CAVLC+0x818>
   2dc77:	mov    r12,r15
   2dc7a:	mov    rbx,r9
   2dc7d:	mov    r15d,r8d
   2dc80:	jmp    2dc9b <writeCoeff4x4_CAVLC+0x80b>
   2dc82:	nop    WORD PTR [rax+rax*1+0x0]
   2dc88:	mov    eax,DWORD PTR [r12-0x4]
   2dc8d:	sub    r12,0x4
   2dc91:	mov    DWORD PTR [rbp+0x4],eax
   2dc94:	mov    eax,DWORD PTR [rsp+0xc]
   2dc98:	mov    DWORD PTR [rbp+0x0],eax
   2dc9b:	cmp    rbx,r12
   2dc9e:	jne    2dc88 <writeCoeff4x4_CAVLC+0x7f8>
   2dca0:	jmp    2db83 <writeCoeff4x4_CAVLC+0x6f3>
   2dca5:	nop    DWORD PTR [rax]
   2dca8:	lea    eax,[r12-0x1]
   2dcad:	mov    esi,0x6
   2dcb2:	mov    rdi,rbp
   2dcb5:	mov    DWORD PTR [rsp+0x28],r8d
   2dcba:	cmp    eax,0x6
   2dcbd:	mov    QWORD PTR [rsp+0x20],r9
   2dcc2:	cmovg  eax,esi
   2dcc5:	mov    rsi,QWORD PTR [rsp+0x18]
   2dcca:	sub    r12d,r14d
   2dccd:	sub    r13d,0x1
   2dcd1:	mov    DWORD PTR [rbp+0xc],eax
   2dcd4:	call   66fb0 <writeSyntaxElement_Run>
   2dcd9:	mov    rsi,QWORD PTR [rsp+0x10]
   2dcde:	mov    r9,QWORD PTR [rsp+0x20]
   2dce3:	mov    eax,DWORD PTR [rbp+0xc]
   2dce6:	mov    r8d,DWORD PTR [rsp+0x28]
   2dceb:	add    DWORD PTR [rsi],eax
   2dced:	lea    rax,[rbp+0x30]
   2dcf1:	add    r8d,DWORD PTR [rbp+0xc]
   2dcf5:	add    DWORD PTR [rbx],0x1
   2dcf8:	cmp    r9,r15
   2dcfb:	je     2db80 <writeCoeff4x4_CAVLC+0x6f0>
   2dd01:	mov    r14d,DWORD PTR [r15-0x4]
   2dd05:	mov    esi,DWORD PTR [rsp+0xc]
   2dd09:	sub    r15,0x4
   2dd0d:	mov    DWORD PTR [rbp+0x34],r14d
   2dd11:	mov    DWORD PTR [rbp+0x30],esi
   2dd14:	test   r12d,r12d
   2dd17:	je     2db80 <writeCoeff4x4_CAVLC+0x6f0>
   2dd1d:	mov    rbp,rax
   2dd20:	jmp    2dc71 <writeCoeff4x4_CAVLC+0x7e1>
   2dd25:	nop    DWORD PTR [rax]
   2dd28:	mov    edi,DWORD PTR [rsp+0x38]
   2dd2c:	mov    edx,DWORD PTR [rsp+0xc]
   2dd30:	lea    rax,[r15+r15*2]
   2dd34:	mov    QWORD PTR [rsp+0x30],r10
   2dd39:	shl    rax,0x4
   2dd3d:	add    rax,QWORD PTR [rsp+0x20]
   2dd42:	mov    rsi,QWORD PTR [rsp+0x18]
   2dd47:	mov    QWORD PTR [rsp+0x28],r9
   2dd4c:	mov    DWORD PTR [rax+0x3764],edi
   2dd52:	mov    rdi,r9
   2dd55:	mov    DWORD PTR [rax+0x3760],edx
   2dd5b:	mov    DWORD PTR [rax+0x3768],ebx
   2dd61:	mov    DWORD PTR [rax+0x376c],0x0
   2dd6b:	call   66d90 <writeSyntaxElement_NumCoeffTrailingOnesChromaDC>
   2dd70:	mov    r9,QWORD PTR [rsp+0x28]
   2dd75:	mov    r10,QWORD PTR [rsp+0x30]
   2dd7a:	jmp    2d9ef <writeCoeff4x4_CAVLC+0x55f>
   2dd7f:	nop
   2dd80:	mov    esi,DWORD PTR [rsp+0xc]
   2dd84:	mov    DWORD PTR [r9+0x38],ebx
   2dd88:	mov    rdi,rbp
   2dd8b:	mov    DWORD PTR [r9+0x34],eax
   2dd8f:	mov    DWORD PTR [r9+0x30],esi
   2dd93:	mov    rsi,QWORD PTR [rsp+0x18]
   2dd98:	mov    QWORD PTR [rsp+0x30],r10
   2dd9d:	mov    QWORD PTR [rsp+0x28],r9
   2dda2:	call   66c40 <writeSyntaxElement_VLC>
   2dda7:	mov    r9,QWORD PTR [rsp+0x28]
   2ddac:	mov    rdx,QWORD PTR [rsp+0x10]
   2ddb1:	mov    r10,QWORD PTR [rsp+0x30]
   2ddb6:	mov    eax,DWORD PTR [r9+0x3c]
   2ddba:	add    DWORD PTR [rdx],eax
   2ddbc:	lea    rbp,[r9+0x60]
   2ddc0:	add    r15d,DWORD PTR [r9+0x3c]
   2ddc4:	add    DWORD PTR [r13+0x0],0x1
   2ddc9:	cmp    DWORD PTR [rsp+0x38],0x3
   2ddce:	jle    2da97 <writeCoeff4x4_CAVLC+0x607>
   2ddd4:	cmp    ebx,0x3
   2ddd7:	jne    2da97 <writeCoeff4x4_CAVLC+0x607>
   2dddd:	mov    ecx,DWORD PTR [rsp+0x20]
   2dde1:	test   ecx,ecx
   2dde3:	js     2dbcc <writeCoeff4x4_CAVLC+0x73c>
   2dde9:	movsxd r12,DWORD PTR [rsp+0x20]
   2ddee:	mov    eax,DWORD PTR [rsp+0xc]
   2ddf2:	xor    r14d,r14d
   2ddf5:	mov    ebx,DWORD PTR [r10+r12*4]
   2ddf9:	mov    DWORD PTR [rbp+0x4],ebx
   2ddfc:	mov    DWORD PTR [r9+0x60],eax
   2de00:	jmp    2dad8 <writeCoeff4x4_CAVLC+0x648>
   2de05:	nop    DWORD PTR [rax]
   2de08:	mov    eax,DWORD PTR [rsp+0x5c]
   2de0c:	mov    QWORD PTR [rsp+0x30],r9
   2de11:	mov    QWORD PTR [rsp+0x28],r10
   2de16:	mov    r14d,eax
   2de19:	and    eax,0xf
   2de1c:	movsxd rbp,eax
   2de1f:	sar    r14d,0x4
   2de23:	mov    esi,ebp
   2de25:	mov    edi,r14d
   2de28:	shl    rbp,0x2
   2de2c:	call   2d120 <predict_nnz_chroma>
   2de31:	mov    r9,QWORD PTR [rsp+0x30]
   2de36:	mov    r10,QWORD PTR [rsp+0x28]
   2de3b:	jmp    2d961 <writeCoeff4x4_CAVLC+0x4d1>
   2de40:	call   66ef0 <writeSyntaxElement_TotalZerosChromaDC>
   2de45:	jmp    2dc07 <writeCoeff4x4_CAVLC+0x777>
   2de4a:	nop    WORD PTR [rax+rax*1+0x0]
   2de50:	xor    esi,esi
   2de52:	cmp    edi,0x1
   2de55:	setg   bpl
   2de59:	setg   sil
   2de5d:	movzx  ebp,bpl
   2de61:	shl    rbp,0x2
   2de65:	jmp    2d945 <writeCoeff4x4_CAVLC+0x4b5>
   2de6a:	mov    DWORD PTR [rsp+0x3c],0x1
   2de72:	add    rbx,0x20
   2de76:	xor    r14d,r14d
   2de79:	mov    DWORD PTR [rsp+0xc],0x8
   2de81:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2de86:	mov    DWORD PTR [rsp+0x3c],r14d
   2de8b:	add    rbx,0x24
   2de8f:	mov    DWORD PTR [rsp+0x58],0x10
   2de97:	mov    DWORD PTR [rsp+0xc],0x9
   2de9f:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2dea4:	mov    DWORD PTR [rsp+0x3c],0x0
   2deac:	add    rbx,0x28
   2deb0:	mov    r14d,0x1
   2deb6:	mov    DWORD PTR [rsp+0x58],0xf
   2debe:	mov    DWORD PTR [rsp+0xc],0xa
   2dec6:	jmp    2d5c8 <writeCoeff4x4_CAVLC+0x138>
   2decb:	movsxd rdi,r12d
   2dece:	xor    eax,eax
   2ded0:	mov    QWORD PTR [rsp+0x48],rdi
   2ded5:	jmp    2da8b <writeCoeff4x4_CAVLC+0x5fb>
   2deda:	lea    rdi,[rip+0x4706f]        # 74f50 <mb_width_cr.6670+0x40>
   2dee1:	call   4320 <puts@plt>
   2dee6:	mov    edi,0xffffffff
   2deeb:	call   44e0 <exit@plt>
   2def0:	call   4390 <__stack_chk_fail@plt>
   2def5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002df00 <writeChromaCoeff>:
   2df00:	endbr64 
   2df04:	push   r15
   2df06:	lea    rcx,[rip+0x5ca63]        # 8a970 <assignSE2partition>
   2df0d:	xor    r15d,r15d
   2df10:	push   r14
   2df12:	push   r13
   2df14:	push   r12
   2df16:	push   rbp
   2df17:	push   rbx
   2df18:	sub    rsp,0x78
   2df1c:	mov    rax,QWORD PTR fs:0x28
   2df25:	mov    QWORD PTR [rsp+0x68],rax
   2df2a:	xor    eax,eax
   2df2c:	mov    rax,QWORD PTR [rip+0x5a67d]        # 885b0 <img>
   2df33:	mov    DWORD PTR [rsp+0x64],0x9
   2df3b:	movsxd r8,DWORD PTR [rax+0xc]
   2df3f:	mov    r14,QWORD PTR [rax+0x3750]
   2df46:	imul   r8,r8,0x278
   2df4d:	add    r8,QWORD PTR [rax+0x3758]
   2df54:	movsxd rdx,DWORD PTR [r8]
   2df57:	mov    r12,r8
   2df5a:	lea    rdx,[rdx+rdx*2]
   2df5e:	shl    rdx,0x4
   2df62:	lea    rbx,[rax+rdx*1+0x3760]
   2df6a:	mov    rdx,QWORD PTR [rip+0x5a647]        # 885b8 <input>
   2df71:	mov    eax,DWORD PTR [rax+0x11bfc]
   2df77:	movsxd rsi,DWORD PTR [rdx+0x93c]
   2df7e:	sub    eax,0x1
   2df81:	mov    DWORD PTR [rsp+0x38],eax
   2df85:	mov    rdi,QWORD PTR [rcx+rsi*8]
   2df89:	movabs rcx,0x800000006
   2df93:	mov    QWORD PTR [rsp+0x5c],rcx
   2df98:	mov    QWORD PTR [rsp+0x20],rdi
   2df9d:	mov    edi,DWORD PTR [r8+0x1cc]
   2dfa4:	mov    DWORD PTR [rsp+0x30],edi
   2dfa8:	cmp    edi,0xf
   2dfab:	jle    2e019 <writeChromaCoeff+0x119>
   2dfad:	mov    QWORD PTR [rsp+0x28],0x0
   2dfb6:	cdqe   
   2dfb8:	mov    QWORD PTR [rsp+0x40],rax
   2dfbd:	mov    eax,r15d
   2dfc0:	mov    r15,r8
   2dfc3:	mov    r12d,eax
   2dfc6:	mov    rdi,QWORD PTR [rsp+0x28]
   2dfcb:	mov    eax,DWORD PTR [rdx+0x934]
   2dfd1:	mov    DWORD PTR [rsp+0x8],edi
   2dfd5:	test   eax,eax
   2dfd7:	jne    2e04f <writeChromaCoeff+0x14f>
   2dfd9:	mov    ecx,edi
   2dfdb:	xor    edx,edx
   2dfdd:	xor    esi,esi
   2dfdf:	mov    edi,0x6
   2dfe4:	call   2d490 <writeCoeff4x4_CAVLC>
   2dfe9:	add    r12d,eax
   2dfec:	cmp    QWORD PTR [rsp+0x28],0x1
   2dff2:	je     2e010 <writeChromaCoeff+0x110>
   2dff4:	mov    QWORD PTR [rsp+0x28],0x1
   2dffd:	mov    rdx,QWORD PTR [rip+0x5a5b4]        # 885b8 <input>
   2e004:	jmp    2dfc6 <writeChromaCoeff+0xc6>
   2e006:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e010:	mov    eax,r12d
   2e013:	mov    r12,r15
   2e016:	mov    r15d,eax
   2e019:	mov    eax,DWORD PTR [rsp+0x30]
   2e01d:	sar    eax,0x4
   2e020:	cmp    eax,0x2
   2e023:	je     2e1a2 <writeChromaCoeff+0x2a2>
   2e029:	mov    rax,QWORD PTR [rsp+0x68]
   2e02e:	xor    rax,QWORD PTR fs:0x28
   2e037:	jne    2e428 <writeChromaCoeff+0x528>
   2e03d:	add    rsp,0x78
   2e041:	mov    eax,r15d
   2e044:	pop    rbx
   2e045:	pop    rbp
   2e046:	pop    r12
   2e048:	pop    r13
   2e04a:	pop    r14
   2e04c:	pop    r15
   2e04e:	ret    
   2e04f:	mov    rdi,QWORD PTR [rip+0x5a55a]        # 885b0 <img>
   2e056:	mov    rcx,QWORD PTR [rsp+0x28]
   2e05b:	mov    rdx,QWORD PTR [rdi+0x3740]
   2e062:	add    rcx,0x1
   2e066:	mov    rdx,QWORD PTR [rdx+rcx*8]
   2e06a:	mov    rcx,QWORD PTR [rdx]
   2e06d:	mov    rbp,QWORD PTR [rdx+0x8]
   2e071:	mov    edx,DWORD PTR [rdi+0x11bf8]
   2e077:	mov    QWORD PTR [rsp+0x10],rcx
   2e07c:	test   edx,edx
   2e07e:	js     2dfec <writeChromaCoeff+0xec>
   2e084:	mov    rcx,QWORD PTR [rsp+0x40]
   2e089:	mov    r13d,0x1
   2e08f:	mov    ecx,DWORD PTR [rsp+rcx*4+0x5c]
   2e093:	mov    DWORD PTR [rsp+0x18],ecx
   2e097:	mov    ecx,r12d
   2e09a:	mov    r12,rbp
   2e09d:	mov    rbp,r14
   2e0a0:	mov    r14d,ecx
   2e0a3:	jmp    2e16a <writeChromaCoeff+0x26a>
   2e0a8:	nop    DWORD PTR [rax+rax*1+0x0]
   2e0b0:	lea    rax,[rip+0x38389]        # 66440 <levrun_linfo_c2x2>
   2e0b7:	mov    QWORD PTR [rbx+0x20],rax
   2e0bb:	mov    eax,DWORD PTR [rsp+0x18]
   2e0bf:	mov    DWORD PTR [rsp+0x4],ecx
   2e0c3:	mov    DWORD PTR [rbx+0x18],eax
   2e0c6:	mov    esi,DWORD PTR [r15+0x48]
   2e0ca:	lea    eax,[rsi-0x9]
   2e0cd:	cmp    eax,0x1
   2e0d0:	setbe  al
   2e0d3:	cmp    esi,0xd
   2e0d6:	sete   sil
   2e0da:	or     eax,esi
   2e0dc:	cmp    al,0x1
   2e0de:	sbb    rsi,rsi
   2e0e1:	and    esi,0x14
   2e0e4:	cmp    al,0x1
   2e0e6:	movzx  eax,al
   2e0e9:	sbb    r11d,r11d
   2e0ec:	and    r11d,0x5
   2e0f0:	add    r11d,0x8
   2e0f4:	mov    DWORD PTR [rbx],r11d
   2e0f7:	mov    DWORD PTR [rdi+0x50],eax
   2e0fa:	mov    eax,DWORD PTR [rsp+0x8]
   2e0fe:	mov    DWORD PTR [rdi+0x54],eax
   2e101:	mov    rax,QWORD PTR [rsp+0x20]
   2e106:	mov    rdi,rbx
   2e109:	add    rbx,0x30
   2e10d:	movsxd rsi,DWORD PTR [rax+rsi*1+0x20]
   2e112:	mov    rax,rsi
   2e115:	shl    rax,0x4
   2e119:	sub    rax,rsi
   2e11c:	mov    rsi,QWORD PTR [rbp+0x18]
   2e120:	lea    rax,[rsi+rax*8]
   2e124:	mov    rsi,rax
   2e127:	call   QWORD PTR [rax+0x70]
   2e12a:	mov    rdi,QWORD PTR [rip+0x5a47f]        # 885b0 <img>
   2e131:	mov    ecx,DWORD PTR [rsp+0x4]
   2e135:	mov    eax,DWORD PTR [rbx-0x24]
   2e138:	add    DWORD PTR [r15+0x2c],eax
   2e13c:	add    r14d,DWORD PTR [rbx-0x24]
   2e140:	add    DWORD PTR [r15],0x1
   2e144:	cmp    DWORD PTR [rdi+0x11bf8],r13d
   2e14b:	setge  sil
   2e14f:	test   ecx,ecx
   2e151:	setne  al
   2e154:	add    r13,0x1
   2e158:	test   sil,al
   2e15b:	je     2e197 <writeChromaCoeff+0x297>
   2e15d:	mov    rax,QWORD PTR [rip+0x5a454]        # 885b8 <input>
   2e164:	mov    eax,DWORD PTR [rax+0x934]
   2e16a:	mov    rcx,QWORD PTR [rsp+0x10]
   2e16f:	mov    ecx,DWORD PTR [rcx+r13*4-0x4]
   2e174:	mov    DWORD PTR [rbx+0x4],ecx
   2e177:	mov    esi,DWORD PTR [r12+r13*4-0x4]
   2e17c:	mov    DWORD PTR [rbx+0x8],esi
   2e17f:	test   eax,eax
   2e181:	je     2e0b0 <writeChromaCoeff+0x1b0>
   2e187:	lea    rax,[rip+0xfffffffffffe09c2]        # eb50 <writeRunLevel_CABAC>
   2e18e:	mov    QWORD PTR [rbx+0x28],rax
   2e192:	jmp    2e0bb <writeChromaCoeff+0x1bb>
   2e197:	mov    r12d,r14d
   2e19a:	mov    r14,rbp
   2e19d:	jmp    2dfec <writeChromaCoeff+0xec>
   2e1a2:	mov    rax,QWORD PTR [rip+0x5a407]        # 885b0 <img>
   2e1a9:	mov    eax,DWORD PTR [rax+0x11bf4]
   2e1af:	test   eax,eax
   2e1b1:	jle    2e029 <writeChromaCoeff+0x129>
   2e1b7:	movsxd rax,DWORD PTR [rsp+0x38]
   2e1bc:	lea    rdx,[rip+0x46dfd]        # 74fc0 <chroma_ac_param.6198>
   2e1c3:	mov    r13,r12
   2e1c6:	mov    QWORD PTR [rsp+0x40],0x20
   2e1cf:	mov    DWORD PTR [rsp+0x28],0x4
   2e1d7:	mov    r12,rbx
   2e1da:	shl    rax,0x5
   2e1de:	mov    DWORD PTR [rsp+0x10],0xffffffff
   2e1e6:	lea    rdi,[rax+rdx*1]
   2e1ea:	lea    rdx,[rip+0x46eaf]        # 750a0 <subblk_offset_y>
   2e1f1:	mov    QWORD PTR [rsp+0x30],rdi
   2e1f6:	lea    rdi,[rax+rdx*1]
   2e1fa:	lea    rdx,[rip+0x46eff]        # 75100 <subblk_offset_x>
   2e201:	add    rax,rdx
   2e204:	mov    QWORD PTR [rsp+0x38],rdi
   2e209:	mov    QWORD PTR [rsp+0x48],rax
   2e20e:	xchg   ax,ax
   2e210:	mov    QWORD PTR [rsp+0x8],0x0
   2e219:	mov    ebp,r15d
   2e21c:	mov    r15,r13
   2e21f:	mov    rax,QWORD PTR [rip+0x5a392]        # 885b8 <input>
   2e226:	mov    eax,DWORD PTR [rax+0x934]
   2e22c:	test   eax,eax
   2e22e:	jne    2e2a8 <writeChromaCoeff+0x3a8>
   2e230:	mov    rax,QWORD PTR [rsp+0x8]
   2e235:	mov    rbx,QWORD PTR [rsp+0x30]
   2e23a:	mov    edi,0x7
   2e23f:	mov    esi,DWORD PTR [rsp+0x28]
   2e243:	movzx  ecx,BYTE PTR [rbx+rax*1]
   2e247:	mov    edx,eax
   2e249:	call   2d490 <writeCoeff4x4_CAVLC>
   2e24e:	add    ebp,eax
   2e250:	add    QWORD PTR [rsp+0x8],0x1
   2e256:	mov    rax,QWORD PTR [rsp+0x8]
   2e25b:	cmp    rax,0x4
   2e25f:	jne    2e21f <writeChromaCoeff+0x31f>
   2e261:	mov    rax,QWORD PTR [rip+0x5a348]        # 885b0 <img>
   2e268:	add    DWORD PTR [rsp+0x28],0x1
   2e26d:	mov    r13,r15
   2e270:	mov    r15d,ebp
   2e273:	mov    ebx,DWORD PTR [rsp+0x28]
   2e277:	add    QWORD PTR [rsp+0x30],0x4
   2e27d:	mov    eax,DWORD PTR [rax+0x11bf4]
   2e283:	add    QWORD PTR [rsp+0x40],0x8
   2e289:	add    QWORD PTR [rsp+0x38],0x4
   2e28f:	add    eax,0x3
   2e292:	add    QWORD PTR [rsp+0x48],0x4
   2e298:	cmp    eax,ebx
   2e29a:	jge    2e210 <writeChromaCoeff+0x310>
   2e2a0:	jmp    2e029 <writeChromaCoeff+0x129>
   2e2a5:	nop    DWORD PTR [rax]
   2e2a8:	mov    rbx,QWORD PTR [rsp+0x40]
   2e2ad:	mov    rdi,QWORD PTR [rip+0x5a2fc]        # 885b0 <img>
   2e2b4:	mov    r13d,0x1
   2e2ba:	mov    rcx,QWORD PTR [rsp+0x8]
   2e2bf:	add    DWORD PTR [rsp+0x10],0x1
   2e2c4:	mov    rdx,QWORD PTR [rdi+0x3738]
   2e2cb:	mov    rdx,QWORD PTR [rdx+rbx*1]
   2e2cf:	mov    rdx,QWORD PTR [rdx+rcx*8]
   2e2d3:	mov    rbx,QWORD PTR [rdx]
   2e2d6:	mov    QWORD PTR [rsp+0x18],rbx
   2e2db:	mov    rbx,QWORD PTR [rdx+0x8]
   2e2df:	mov    rdx,QWORD PTR [rsp+0x38]
   2e2e4:	movzx  edx,BYTE PTR [rdx+rcx*1]
   2e2e8:	shr    dl,0x2
   2e2eb:	movzx  edx,dl
   2e2ee:	mov    DWORD PTR [rdi+0x4c],edx
   2e2f1:	mov    rdx,QWORD PTR [rsp+0x48]
   2e2f6:	movzx  ecx,BYTE PTR [rdx+rcx*1]
   2e2fa:	mov    edx,ecx
   2e2fc:	mov    BYTE PTR [rsp+0x4],cl
   2e300:	mov    rcx,r13
   2e303:	mov    r13,rbx
   2e306:	shr    dl,0x2
   2e309:	mov    rbx,r14
   2e30c:	mov    r14,rcx
   2e30f:	movzx  edx,dl
   2e312:	mov    DWORD PTR [rdi+0x48],edx
   2e315:	jmp    2e3ea <writeChromaCoeff+0x4ea>
   2e31a:	nop    WORD PTR [rax+rax*1+0x0]
   2e320:	lea    rax,[rip+0x38239]        # 66560 <levrun_linfo_inter>
   2e327:	mov    QWORD PTR [r12+0x20],rax
   2e32c:	mov    DWORD PTR [r12+0x18],0x7
   2e335:	mov    esi,DWORD PTR [r15+0x48]
   2e339:	mov    DWORD PTR [rsp+0x4],edx
   2e33d:	lea    eax,[rsi-0x9]
   2e340:	cmp    eax,0x1
   2e343:	setbe  al
   2e346:	cmp    esi,0xd
   2e349:	sete   sil
   2e34d:	or     eax,esi
   2e34f:	cmp    al,0x1
   2e351:	sbb    r10,r10
   2e354:	and    r10d,0x14
   2e358:	cmp    al,0x1
   2e35a:	movzx  eax,al
   2e35d:	sbb    esi,esi
   2e35f:	and    esi,0x5
   2e362:	add    esi,0xa
   2e365:	mov    DWORD PTR [r12],esi
   2e369:	mov    DWORD PTR [rdi+0x50],eax
   2e36c:	mov    eax,DWORD PTR [rdi+0x11bf4]
   2e372:	add    eax,eax
   2e374:	cmp    eax,DWORD PTR [rsp+0x10]
   2e378:	setle  al
   2e37b:	movzx  eax,al
   2e37e:	mov    DWORD PTR [rdi+0x54],eax
   2e381:	mov    rax,QWORD PTR [rsp+0x20]
   2e386:	mov    rdi,r12
   2e389:	add    r12,0x30
   2e38d:	movsxd rsi,DWORD PTR [rax+r10*1+0x28]
   2e392:	mov    rax,rsi
   2e395:	shl    rax,0x4
   2e399:	sub    rax,rsi
   2e39c:	mov    rsi,QWORD PTR [rbx+0x18]
   2e3a0:	lea    rax,[rsi+rax*8]
   2e3a4:	mov    rsi,rax
   2e3a7:	call   QWORD PTR [rax+0x70]
   2e3aa:	mov    edx,DWORD PTR [rsp+0x4]
   2e3ae:	mov    eax,DWORD PTR [r12-0x24]
   2e3b3:	add    DWORD PTR [r15+0x2c],eax
   2e3b7:	add    ebp,DWORD PTR [r12-0x24]
   2e3bc:	add    DWORD PTR [r15],0x1
   2e3c0:	cmp    r14d,0xf
   2e3c4:	setle  sil
   2e3c8:	test   edx,edx
   2e3ca:	setne  al
   2e3cd:	add    r14,0x1
   2e3d1:	test   sil,al
   2e3d4:	je     2e420 <writeChromaCoeff+0x520>
   2e3d6:	mov    rax,QWORD PTR [rip+0x5a1db]        # 885b8 <input>
   2e3dd:	mov    rdi,QWORD PTR [rip+0x5a1cc]        # 885b0 <img>
   2e3e4:	mov    eax,DWORD PTR [rax+0x934]
   2e3ea:	mov    rcx,QWORD PTR [rsp+0x18]
   2e3ef:	mov    edx,DWORD PTR [rcx+r14*4-0x4]
   2e3f4:	mov    DWORD PTR [r12+0x4],edx
   2e3f9:	mov    esi,DWORD PTR [r13+r14*4-0x4]
   2e3fe:	mov    DWORD PTR [r12+0x8],esi
   2e403:	test   eax,eax
   2e405:	je     2e320 <writeChromaCoeff+0x420>
   2e40b:	lea    rax,[rip+0xfffffffffffe073e]        # eb50 <writeRunLevel_CABAC>
   2e412:	mov    QWORD PTR [r12+0x28],rax
   2e417:	jmp    2e32c <writeChromaCoeff+0x42c>
   2e41c:	nop    DWORD PTR [rax+0x0]
   2e420:	mov    r14,rbx
   2e423:	jmp    2e250 <writeChromaCoeff+0x350>
   2e428:	call   4390 <__stack_chk_fail@plt>
   2e42d:	nop    DWORD PTR [rax]

000000000002e430 <writeLumaCoeff8x8>:
   2e430:	endbr64 
   2e434:	mov    rax,QWORD PTR [rip+0x5a17d]        # 885b8 <input>
   2e43b:	push   r14
   2e43d:	push   r13
   2e43f:	xor    r13d,r13d
   2e442:	cmp    esi,0xb
   2e445:	push   r12
   2e447:	sete   r13b
   2e44b:	push   rbp
   2e44c:	mov    ebp,edi
   2e44e:	push   rbx
   2e44f:	mov    eax,DWORD PTR [rax+0x934]
   2e455:	test   edx,edx
   2e457:	je     2e45d <writeLumaCoeff8x8+0x2d>
   2e459:	test   eax,eax
   2e45b:	jne    2e4c8 <writeLumaCoeff8x8+0x98>
   2e45d:	xor    r14d,r14d
   2e460:	cmp    esi,0xd
   2e463:	sete   r14b
   2e467:	test   edx,edx
   2e469:	cmove  r14d,r13d
   2e46d:	xor    r12d,r12d
   2e470:	xor    ebx,ebx
   2e472:	test   eax,eax
   2e474:	jne    2e4a0 <writeLumaCoeff8x8+0x70>
   2e476:	mov    edx,ebx
   2e478:	mov    ecx,r14d
   2e47b:	mov    esi,ebp
   2e47d:	xor    edi,edi
   2e47f:	call   2d490 <writeCoeff4x4_CAVLC>
   2e484:	add    ebx,0x1
   2e487:	add    r12d,eax
   2e48a:	cmp    ebx,0x4
   2e48d:	je     2e4b7 <writeLumaCoeff8x8+0x87>
   2e48f:	mov    rax,QWORD PTR [rip+0x5a122]        # 885b8 <input>
   2e496:	mov    eax,DWORD PTR [rax+0x934]
   2e49c:	test   eax,eax
   2e49e:	je     2e476 <writeLumaCoeff8x8+0x46>
   2e4a0:	mov    esi,ebx
   2e4a2:	mov    edx,r13d
   2e4a5:	mov    edi,ebp
   2e4a7:	add    ebx,0x1
   2e4aa:	call   2cc40 <writeLumaCoeff4x4_CABAC>
   2e4af:	add    r12d,eax
   2e4b2:	cmp    ebx,0x4
   2e4b5:	jne    2e48f <writeLumaCoeff8x8+0x5f>
   2e4b7:	pop    rbx
   2e4b8:	mov    eax,r12d
   2e4bb:	pop    rbp
   2e4bc:	pop    r12
   2e4be:	pop    r13
   2e4c0:	pop    r14
   2e4c2:	ret    
   2e4c3:	nop    DWORD PTR [rax+rax*1+0x0]
   2e4c8:	cmp    esi,0xd
   2e4cb:	je     2e4e0 <writeLumaCoeff8x8+0xb0>
   2e4cd:	xor    esi,esi
   2e4cf:	pop    rbx
   2e4d0:	mov    edi,ebp
   2e4d2:	pop    rbp
   2e4d3:	pop    r12
   2e4d5:	pop    r13
   2e4d7:	pop    r14
   2e4d9:	jmp    2cde0 <writeLumaCoeff8x8_CABAC>
   2e4de:	xchg   ax,ax
   2e4e0:	mov    esi,0x1
   2e4e5:	jmp    2e4cf <writeLumaCoeff8x8+0x9f>
   2e4e7:	nop    WORD PTR [rax+rax*1+0x0]

000000000002e4f0 <writeCBPandLumaCoeff>:
   2e4f0:	endbr64 
   2e4f4:	push   r15
   2e4f6:	lea    rsi,[rip+0x5c473]        # 8a970 <assignSE2partition>
   2e4fd:	push   r14
   2e4ff:	push   r13
   2e501:	push   r12
   2e503:	push   rbp
   2e504:	push   rbx
   2e505:	sub    rsp,0x48
   2e509:	mov    rdi,QWORD PTR [rip+0x5a0a8]        # 885b8 <input>
   2e510:	mov    rax,QWORD PTR [rip+0x5a099]        # 885b0 <img>
   2e517:	movsxd r8,DWORD PTR [rdi+0x93c]
   2e51e:	movsxd r9,DWORD PTR [rax+0xc]
   2e522:	mov    rbp,QWORD PTR [rax+0x3750]
   2e529:	mov    edi,DWORD PTR [rdi+0x934]
   2e52f:	mov    rbx,QWORD PTR [rsi+r8*8]
   2e533:	mov    rsi,QWORD PTR [rax+0x3740]
   2e53a:	imul   r9,r9,0x278
   2e541:	add    r9,QWORD PTR [rax+0x3758]
   2e548:	mov    rsi,QWORD PTR [rsi]
   2e54b:	movsxd rdx,DWORD PTR [r9]
   2e54e:	mov    QWORD PTR [rsp+0x10],rbx
   2e553:	mov    r12,r9
   2e556:	mov    ebx,DWORD PTR [r9+0x1cc]
   2e55d:	mov    r10,QWORD PTR [rsi]
   2e560:	mov    rsi,QWORD PTR [rsi+0x8]
   2e564:	lea    rcx,[rdx+rdx*2]
   2e568:	shl    rcx,0x4
   2e56c:	mov    QWORD PTR [rsp+0x8],rsi
   2e571:	mov    esi,DWORD PTR [r9+0x48]
   2e575:	lea    r13,[rax+rcx*1+0x3760]
   2e57d:	mov    QWORD PTR [rsp],r10
   2e581:	cmp    esi,0xa
   2e584:	je     2e89d <writeCBPandLumaCoeff+0x3ad>
   2e58a:	add    rcx,rax
   2e58d:	lea    r8d,[rsi-0xc]
   2e591:	mov    DWORD PTR [rcx+0x3764],ebx
   2e597:	cmp    r8d,0x1
   2e59b:	jbe    2e5d0 <writeCBPandLumaCoeff+0xe0>
   2e59d:	cmp    esi,0x9
   2e5a0:	je     2e5d0 <writeCBPandLumaCoeff+0xe0>
   2e5a2:	test   edi,edi
   2e5a4:	jne    2e5b4 <writeCBPandLumaCoeff+0xc4>
   2e5a6:	lea    rsi,[rip+0x37e53]        # 66400 <cbp_linfo_inter>
   2e5ad:	mov    QWORD PTR [rcx+0x3780],rsi
   2e5b4:	lea    rcx,[rdx+rdx*2]
   2e5b8:	shl    rcx,0x4
   2e5bc:	mov    DWORD PTR [rax+rcx*1+0x3760],0xb
   2e5c7:	jmp    2e5fe <writeCBPandLumaCoeff+0x10e>
   2e5c9:	nop    DWORD PTR [rax+0x0]
   2e5d0:	test   edi,edi
   2e5d2:	jne    2e5eb <writeCBPandLumaCoeff+0xfb>
   2e5d4:	lea    rsi,[rip+0x37de5]        # 663c0 <cbp_linfo_intra>
   2e5db:	lea    rcx,[rdx+rdx*2]
   2e5df:	shl    rcx,0x4
   2e5e3:	mov    QWORD PTR [rax+rcx*1+0x3780],rsi
   2e5eb:	lea    rcx,[rdx+rdx*2]
   2e5ef:	shl    rcx,0x4
   2e5f3:	mov    DWORD PTR [rax+rcx*1+0x3760],0x6
   2e5fe:	cmp    edi,0x1
   2e601:	jne    2e61a <writeCBPandLumaCoeff+0x12a>
   2e603:	lea    rsi,[rip+0xfffffffffffdf406]        # da10 <writeCBP_CABAC>
   2e60a:	lea    rcx,[rdx+rdx*2]
   2e60e:	shl    rcx,0x4
   2e612:	mov    QWORD PTR [rax+rcx*1+0x3788],rsi
   2e61a:	lea    r14,[rdx+rdx*2]
   2e61e:	mov    rcx,QWORD PTR [rsp+0x10]
   2e623:	mov    rdi,r13
   2e626:	shl    r14,0x4
   2e62a:	add    r14,rax
   2e62d:	movsxd rax,DWORD PTR [r14+0x3760]
   2e634:	movsxd rdx,DWORD PTR [rcx+rax*4]
   2e638:	mov    rax,rdx
   2e63b:	shl    rax,0x4
   2e63f:	sub    rax,rdx
   2e642:	mov    rdx,QWORD PTR [rbp+0x18]
   2e646:	lea    r8,[rdx+rax*8]
   2e64a:	mov    rsi,r8
   2e64d:	mov    QWORD PTR [rsp+0x18],r8
   2e652:	call   QWORD PTR [r8+0x70]
   2e656:	mov    esi,DWORD PTR [r12+0x48]
   2e65b:	mov    eax,DWORD PTR [r14+0x376c]
   2e662:	add    DWORD PTR [r12+0x24],eax
   2e667:	mov    r15d,DWORD PTR [r14+0x376c]
   2e66e:	lea    r14,[r13+0x30]
   2e672:	lea    eax,[rsi-0x1]
   2e675:	add    DWORD PTR [r12],0x1
   2e67a:	mov    r8,QWORD PTR [rsp+0x18]
   2e67f:	cmp    eax,0x2
   2e682:	ja     2e730 <writeCBPandLumaCoeff+0x240>
   2e688:	test   BYTE PTR [r12+0x1cc],0xf
   2e691:	je     2e6f6 <writeCBPandLumaCoeff+0x206>
   2e693:	mov    rax,QWORD PTR [rip+0x59f1e]        # 885b8 <input>
   2e69a:	mov    edi,DWORD PTR [rax+0xc94]
   2e6a0:	test   edi,edi
   2e6a2:	je     2e6f6 <writeCBPandLumaCoeff+0x206>
   2e6a4:	mov    edx,DWORD PTR [r12+0x23c]
   2e6ac:	mov    ecx,DWORD PTR [rax+0x934]
   2e6b2:	mov    DWORD PTR [r13+0x30],0x14
   2e6ba:	mov    DWORD PTR [r13+0x34],edx
   2e6be:	test   ecx,ecx
   2e6c0:	je     2ec74 <writeCBPandLumaCoeff+0x784>
   2e6c6:	lea    rax,[rip+0xfffffffffffde733]        # ce00 <writeMB_transform_size_CABAC>
   2e6cd:	mov    rsi,r8
   2e6d0:	mov    rdi,r14
   2e6d3:	mov    QWORD PTR [r13+0x58],rax
   2e6d7:	call   QWORD PTR [r8+0x70]
   2e6db:	mov    eax,DWORD PTR [r13+0x3c]
   2e6df:	add    DWORD PTR [r12+0x1c],eax
   2e6e4:	lea    r14,[r13+0x60]
   2e6e8:	add    r15d,DWORD PTR [r13+0x3c]
   2e6ec:	add    DWORD PTR [r12],0x1
   2e6f1:	mov    esi,DWORD PTR [r12+0x48]
   2e6f6:	mov    rcx,QWORD PTR [rip+0x59eb3]        # 885b0 <img>
   2e6fd:	test   ebx,ebx
   2e6ff:	jne    2e75d <writeCBPandLumaCoeff+0x26d>
   2e701:	cmp    esi,0xa
   2e704:	jne    2e7f6 <writeCBPandLumaCoeff+0x306>
   2e70a:	mov    rax,QWORD PTR [rip+0x59ea7]        # 885b8 <input>
   2e711:	mov    rdx,QWORD PTR [rcx+0x3750]
   2e718:	mov    r13,r14
   2e71b:	mov    edi,DWORD PTR [rax+0x934]
   2e721:	mov    eax,0xa
   2e726:	jmp    2e776 <writeCBPandLumaCoeff+0x286>
   2e728:	nop    DWORD PTR [rax+rax*1+0x0]
   2e730:	test   esi,esi
   2e732:	je     2eae1 <writeCBPandLumaCoeff+0x5f1>
   2e738:	mov    r9d,DWORD PTR [r12+0x240]
   2e740:	test   r9d,r9d
   2e743:	je     2e6f6 <writeCBPandLumaCoeff+0x206>
   2e745:	cmp    esi,0xd
   2e748:	jne    2ec2b <writeCBPandLumaCoeff+0x73b>
   2e74e:	mov    rcx,QWORD PTR [rip+0x59e5b]        # 885b0 <img>
   2e755:	test   ebx,ebx
   2e757:	je     2e7f6 <writeCBPandLumaCoeff+0x306>
   2e75d:	mov    rax,QWORD PTR [rip+0x59e54]        # 885b8 <input>
   2e764:	mov    rdx,QWORD PTR [rcx+0x3750]
   2e76b:	mov    r13,r14
   2e76e:	mov    edi,DWORD PTR [rax+0x934]
   2e774:	mov    eax,esi
   2e776:	mov    ecx,DWORD PTR [r12+0x8]
   2e77b:	mov    DWORD PTR [r13+0x4],ecx
   2e77f:	test   edi,edi
   2e781:	jne    2e8b9 <writeCBPandLumaCoeff+0x3c9>
   2e787:	lea    rcx,[rip+0x37ba2]        # 66330 <se_linfo>
   2e78e:	sub    eax,0x9
   2e791:	mov    QWORD PTR [r13+0x20],rcx
   2e795:	cmp    eax,0x1
   2e798:	jbe    2e8d0 <writeCBPandLumaCoeff+0x3e0>
   2e79e:	mov    eax,0x40
   2e7a3:	mov    ecx,0x10
   2e7a8:	cmp    esi,0xd
   2e7ab:	je     2e8d0 <writeCBPandLumaCoeff+0x3e0>
   2e7b1:	mov    DWORD PTR [r13+0x0],ecx
   2e7b5:	mov    rcx,QWORD PTR [rsp+0x10]
   2e7ba:	mov    rdi,r13
   2e7bd:	lea    r14,[r13+0x30]
   2e7c1:	mov    rdx,QWORD PTR [rdx+0x18]
   2e7c5:	movsxd rcx,DWORD PTR [rcx+rax*1]
   2e7c9:	mov    rax,rcx
   2e7cc:	shl    rax,0x4
   2e7d0:	sub    rax,rcx
   2e7d3:	lea    rax,[rdx+rax*8]
   2e7d7:	mov    rsi,rax
   2e7da:	call   QWORD PTR [rax+0x70]
   2e7dd:	mov    eax,DWORD PTR [r13+0xc]
   2e7e1:	add    DWORD PTR [r12+0x30],eax
   2e7e6:	add    r15d,DWORD PTR [r13+0xc]
   2e7ea:	add    DWORD PTR [r12],0x1
   2e7ef:	mov    rcx,QWORD PTR [rip+0x59dba]        # 885b0 <img>
   2e7f6:	cmp    DWORD PTR [rcx+0x11bf4],0xfffffffd
   2e7fd:	jl     2e848 <writeCBPandLumaCoeff+0x358>
   2e7ff:	mov    r11,QWORD PTR [rcx+0x80]
   2e806:	xor    edi,edi
   2e808:	nop    DWORD PTR [rax+rax*1+0x0]
   2e810:	lea    rsi,[rdi*4+0x0]
   2e818:	xor    eax,eax
   2e81a:	movsxd rdx,DWORD PTR [rcx+0xc]
   2e81e:	mov    rdx,QWORD PTR [r11+rdx*8]
   2e822:	mov    rdx,QWORD PTR [rdx+rax*1]
   2e826:	add    rax,0x8
   2e82a:	mov    DWORD PTR [rdx+rsi*1],0x0
   2e831:	cmp    rax,0x20
   2e835:	jne    2e81a <writeCBPandLumaCoeff+0x32a>
   2e837:	mov    eax,DWORD PTR [rcx+0x11bf4]
   2e83d:	add    rdi,0x1
   2e841:	add    eax,0x3
   2e844:	cmp    eax,edi
   2e846:	jge    2e810 <writeCBPandLumaCoeff+0x320>
   2e848:	xor    r13d,r13d
   2e84b:	cmp    DWORD PTR [r12+0x48],0xa
   2e851:	je     2e8df <writeCBPandLumaCoeff+0x3ef>
   2e857:	bt     ebx,r13d
   2e85b:	jb     2e880 <writeCBPandLumaCoeff+0x390>
   2e85d:	add    r13,0x1
   2e861:	cmp    r13,0x4
   2e865:	jne    2e857 <writeCBPandLumaCoeff+0x367>
   2e867:	add    rsp,0x48
   2e86b:	mov    eax,r15d
   2e86e:	pop    rbx
   2e86f:	pop    rbp
   2e870:	pop    r12
   2e872:	pop    r13
   2e874:	pop    r14
   2e876:	pop    r15
   2e878:	ret    
   2e879:	nop    DWORD PTR [rax+0x0]
   2e880:	mov    edx,DWORD PTR [r12+0x23c]
   2e888:	mov    esi,DWORD PTR [r12+r13*4+0x1d8]
   2e890:	mov    edi,r13d
   2e893:	call   2e430 <writeLumaCoeff8x8>
   2e898:	add    r15d,eax
   2e89b:	jmp    2e85d <writeCBPandLumaCoeff+0x36d>
   2e89d:	mov    ecx,DWORD PTR [r12+0x8]
   2e8a2:	mov    rdx,rbp
   2e8a5:	mov    eax,0xa
   2e8aa:	xor    r15d,r15d
   2e8ad:	mov    DWORD PTR [r13+0x4],ecx
   2e8b1:	test   edi,edi
   2e8b3:	je     2e787 <writeCBPandLumaCoeff+0x297>
   2e8b9:	lea    rcx,[rip+0xfffffffffffdfe40]        # e700 <writeDquant_CABAC>
   2e8c0:	sub    eax,0x9
   2e8c3:	mov    QWORD PTR [r13+0x28],rcx
   2e8c7:	cmp    eax,0x1
   2e8ca:	ja     2e79e <writeCBPandLumaCoeff+0x2ae>
   2e8d0:	mov    eax,0x44
   2e8d5:	mov    ecx,0x11
   2e8da:	jmp    2e7b1 <writeCBPandLumaCoeff+0x2c1>
   2e8df:	mov    rax,QWORD PTR [rip+0x59cd2]        # 885b8 <input>
   2e8e6:	mov    r13d,0x1
   2e8ec:	mov    eax,DWORD PTR [rax+0x934]
   2e8f2:	test   eax,eax
   2e8f4:	je     2ec40 <writeCBPandLumaCoeff+0x750>
   2e8fa:	mov    DWORD PTR [rsp+0x18],ebx
   2e8fe:	mov    rbx,rbp
   2e901:	mov    ebp,r15d
   2e904:	mov    r15,r12
   2e907:	jmp    2e993 <writeCBPandLumaCoeff+0x4a3>
   2e90c:	nop    DWORD PTR [rax+0x0]
   2e910:	lea    rax,[rip+0x37c49]        # 66560 <levrun_linfo_inter>
   2e917:	mov    QWORD PTR [r14+0x20],rax
   2e91b:	mov    rax,QWORD PTR [rsp+0x10]
   2e920:	mov    DWORD PTR [r14+0x18],0x0
   2e928:	mov    rdi,r14
   2e92b:	add    r14,0x30
   2e92f:	mov    DWORD PTR [r14-0x30],0x7
   2e937:	mov    DWORD PTR [rcx+0x50],0x1
   2e93e:	movsxd rcx,DWORD PTR [rax+0x1c]
   2e942:	mov    rax,rcx
   2e945:	shl    rax,0x4
   2e949:	sub    rax,rcx
   2e94c:	mov    rcx,QWORD PTR [rbx+0x18]
   2e950:	lea    rax,[rcx+rax*8]
   2e954:	mov    rsi,rax
   2e957:	call   QWORD PTR [rax+0x70]
   2e95a:	mov    eax,DWORD PTR [r14-0x24]
   2e95e:	add    DWORD PTR [r15+0x28],eax
   2e962:	add    ebp,DWORD PTR [r14-0x24]
   2e966:	add    DWORD PTR [r15],0x1
   2e96a:	cmp    r13d,0x10
   2e96e:	setle  cl
   2e971:	test   r12d,r12d
   2e974:	setne  al
   2e977:	add    r13,0x1
   2e97b:	test   cl,al
   2e97d:	je     2e9c6 <writeCBPandLumaCoeff+0x4d6>
   2e97f:	mov    rax,QWORD PTR [rip+0x59c32]        # 885b8 <input>
   2e986:	mov    rcx,QWORD PTR [rip+0x59c23]        # 885b0 <img>
   2e98d:	mov    eax,DWORD PTR [rax+0x934]
   2e993:	mov    rdi,QWORD PTR [rsp]
   2e997:	mov    r12d,DWORD PTR [rdi+r13*4-0x4]
   2e99c:	mov    rdi,QWORD PTR [rsp+0x8]
   2e9a1:	mov    DWORD PTR [r14+0x4],r12d
   2e9a5:	mov    esi,DWORD PTR [rdi+r13*4-0x4]
   2e9aa:	mov    DWORD PTR [r14+0x8],esi
   2e9ae:	test   eax,eax
   2e9b0:	je     2e910 <writeCBPandLumaCoeff+0x420>
   2e9b6:	lea    rax,[rip+0xfffffffffffe0193]        # eb50 <writeRunLevel_CABAC>
   2e9bd:	mov    QWORD PTR [r14+0x28],rax
   2e9c1:	jmp    2e91b <writeCBPandLumaCoeff+0x42b>
   2e9c6:	mov    r12,r15
   2e9c9:	mov    r15d,ebp
   2e9cc:	mov    rbp,rbx
   2e9cf:	mov    ebx,DWORD PTR [rsp+0x18]
   2e9d3:	and    ebx,0xf
   2e9d6:	je     2e867 <writeCBPandLumaCoeff+0x377>
   2e9dc:	mov    DWORD PTR [rsp+0x34],0x2
   2e9e4:	mov    r13d,r15d
   2e9e7:	mov    r15,rbp
   2e9ea:	mov    eax,DWORD PTR [rsp+0x34]
   2e9ee:	mov    DWORD PTR [rsp+0x28],0x2
   2e9f6:	sub    eax,0x2
   2e9f9:	mov    DWORD PTR [rsp+0x3c],eax
   2e9fd:	mov    eax,r13d
   2ea00:	mov    r13,r12
   2ea03:	mov    r12d,eax
   2ea06:	mov    eax,DWORD PTR [rsp+0x28]
   2ea0a:	sub    eax,0x2
   2ea0d:	mov    DWORD PTR [rsp+0x38],eax
   2ea11:	mov    eax,DWORD PTR [rsp+0x3c]
   2ea15:	mov    DWORD PTR [rsp+0x24],eax
   2ea19:	mov    eax,DWORD PTR [rsp+0x24]
   2ea1d:	mov    ebx,eax
   2ea1f:	and    eax,0x1
   2ea22:	add    eax,eax
   2ea24:	and    ebx,0xfffffffe
   2ea27:	mov    DWORD PTR [rsp+0x30],eax
   2ea2b:	mov    eax,DWORD PTR [rsp+0x38]
   2ea2f:	mov    DWORD PTR [rsp+0x2c],ebx
   2ea33:	mov    DWORD PTR [rsp+0x8],eax
   2ea37:	mov    rax,r13
   2ea3a:	mov    r13,r14
   2ea3d:	mov    r14,rax
   2ea40:	mov    eax,DWORD PTR [rsp+0x8]
   2ea44:	mov    edx,DWORD PTR [rsp+0x30]
   2ea48:	mov    r11d,eax
   2ea4b:	and    eax,0x1
   2ea4e:	add    edx,eax
   2ea50:	mov    rax,QWORD PTR [rip+0x59b61]        # 885b8 <input>
   2ea57:	sar    r11d,1
   2ea5a:	add    r11d,DWORD PTR [rsp+0x2c]
   2ea5f:	mov    eax,DWORD PTR [rax+0x934]
   2ea65:	test   eax,eax
   2ea67:	jne    2eb10 <writeCBPandLumaCoeff+0x620>
   2ea6d:	xor    ecx,ecx
   2ea6f:	mov    esi,r11d
   2ea72:	mov    edi,0x2
   2ea77:	call   2d490 <writeCoeff4x4_CAVLC>
   2ea7c:	add    r12d,eax
   2ea7f:	add    DWORD PTR [rsp+0x8],0x1
   2ea84:	mov    eax,DWORD PTR [rsp+0x8]
   2ea88:	cmp    eax,DWORD PTR [rsp+0x28]
   2ea8c:	jne    2ea40 <writeCBPandLumaCoeff+0x550>
   2ea8e:	mov    rax,r14
   2ea91:	add    DWORD PTR [rsp+0x24],0x1
   2ea96:	mov    r14,r13
   2ea99:	mov    r13,rax
   2ea9c:	mov    eax,DWORD PTR [rsp+0x24]
   2eaa0:	cmp    eax,DWORD PTR [rsp+0x34]
   2eaa4:	jne    2ea19 <writeCBPandLumaCoeff+0x529>
   2eaaa:	mov    eax,DWORD PTR [rsp+0x8]
   2eaae:	lea    ebx,[rax+0x2]
   2eab1:	mov    DWORD PTR [rsp+0x28],ebx
   2eab5:	cmp    eax,0x4
   2eab8:	jne    2ea06 <writeCBPandLumaCoeff+0x516>
   2eabe:	mov    eax,r12d
   2eac1:	add    DWORD PTR [rsp+0x34],0x2
   2eac6:	mov    r12,r13
   2eac9:	mov    r13d,eax
   2eacc:	mov    eax,DWORD PTR [rsp+0x34]
   2ead0:	cmp    eax,0x6
   2ead3:	jne    2e9ea <writeCBPandLumaCoeff+0x4fa>
   2ead9:	mov    r15d,r13d
   2eadc:	jmp    2e867 <writeCBPandLumaCoeff+0x377>
   2eae1:	mov    rcx,QWORD PTR [rip+0x59ac8]        # 885b0 <img>
   2eae8:	cmp    DWORD PTR [rcx+0x18],0x1
   2eaec:	je     2ec58 <writeCBPandLumaCoeff+0x768>
   2eaf2:	mov    eax,DWORD PTR [r12+0x240]
   2eafa:	test   eax,eax
   2eafc:	jne    2e688 <writeCBPandLumaCoeff+0x198>
   2eb02:	xor    esi,esi
   2eb04:	jmp    2e755 <writeCBPandLumaCoeff+0x265>
   2eb09:	nop    DWORD PTR [rax+0x0]
   2eb10:	mov    rsi,QWORD PTR [rip+0x59a99]        # 885b0 <img>
   2eb17:	movsxd r11,r11d
   2eb1a:	movsxd rdx,edx
   2eb1d:	mov    rcx,QWORD PTR [rsi+0x3738]
   2eb24:	mov    rcx,QWORD PTR [rcx+r11*8]
   2eb28:	mov    rdx,QWORD PTR [rcx+rdx*8]
   2eb2c:	mov    rbx,QWORD PTR [rdx]
   2eb2f:	mov    rbp,QWORD PTR [rdx+0x8]
   2eb33:	mov    edx,r12d
   2eb36:	mov    QWORD PTR [rsp+0x18],rbx
   2eb3b:	mov    ebx,DWORD PTR [rsp+0x24]
   2eb3f:	mov    r12,rbp
   2eb42:	mov    rbp,r15
   2eb45:	mov    DWORD PTR [rsi+0x4c],ebx
   2eb48:	mov    ebx,DWORD PTR [rsp+0x8]
   2eb4c:	mov    DWORD PTR [rsi+0x48],ebx
   2eb4f:	mov    ebx,0x1
   2eb54:	jmp    2ebea <writeCBPandLumaCoeff+0x6fa>
   2eb59:	nop    DWORD PTR [rax+0x0]
   2eb60:	lea    rax,[rip+0x379f9]        # 66560 <levrun_linfo_inter>
   2eb67:	mov    QWORD PTR [r13+0x20],rax
   2eb6b:	mov    rax,QWORD PTR [rsp+0x10]
   2eb70:	mov    DWORD PTR [r13+0x18],0x1
   2eb78:	mov    rdi,r13
   2eb7b:	add    r13,0x30
   2eb7f:	mov    DWORD PTR [r13-0x30],0x9
   2eb87:	mov    DWORD PTR [rsi+0x50],0x1
   2eb8e:	movsxd rsi,DWORD PTR [rax+0x24]
   2eb92:	mov    DWORD PTR [rsp],edx
   2eb95:	mov    rax,rsi
   2eb98:	shl    rax,0x4
   2eb9c:	sub    rax,rsi
   2eb9f:	mov    rsi,QWORD PTR [rbp+0x18]
   2eba3:	lea    rax,[rsi+rax*8]
   2eba7:	mov    rsi,rax
   2ebaa:	call   QWORD PTR [rax+0x70]
   2ebad:	mov    eax,DWORD PTR [r13-0x24]
   2ebb1:	mov    edx,DWORD PTR [rsp]
   2ebb4:	add    DWORD PTR [r14+0x28],eax
   2ebb8:	add    edx,DWORD PTR [r13-0x24]
   2ebbc:	add    DWORD PTR [r14],0x1
   2ebc0:	cmp    ebx,0xf
   2ebc3:	setle  sil
   2ebc7:	test   r15d,r15d
   2ebca:	setne  al
   2ebcd:	add    rbx,0x1
   2ebd1:	test   sil,al
   2ebd4:	je     2ec20 <writeCBPandLumaCoeff+0x730>
   2ebd6:	mov    rax,QWORD PTR [rip+0x599db]        # 885b8 <input>
   2ebdd:	mov    rsi,QWORD PTR [rip+0x599cc]        # 885b0 <img>
   2ebe4:	mov    eax,DWORD PTR [rax+0x934]
   2ebea:	mov    rdi,QWORD PTR [rsp+0x18]
   2ebef:	mov    r15d,DWORD PTR [rdi+rbx*4-0x4]
   2ebf4:	mov    DWORD PTR [r13+0x4],r15d
   2ebf8:	mov    edi,DWORD PTR [r12+rbx*4-0x4]
   2ebfd:	mov    DWORD PTR [r13+0x8],edi
   2ec01:	test   eax,eax
   2ec03:	je     2eb60 <writeCBPandLumaCoeff+0x670>
   2ec09:	lea    rax,[rip+0xfffffffffffdff40]        # eb50 <writeRunLevel_CABAC>
   2ec10:	mov    QWORD PTR [r13+0x28],rax
   2ec14:	jmp    2eb6b <writeCBPandLumaCoeff+0x67b>
   2ec19:	nop    DWORD PTR [rax+0x0]
   2ec20:	mov    r15,rbp
   2ec23:	mov    r12d,edx
   2ec26:	jmp    2ea7f <writeCBPandLumaCoeff+0x58f>
   2ec2b:	cmp    esi,0x9
   2ec2e:	je     2e74e <writeCBPandLumaCoeff+0x25e>
   2ec34:	jmp    2e688 <writeCBPandLumaCoeff+0x198>
   2ec39:	nop    DWORD PTR [rax+0x0]
   2ec40:	xor    ecx,ecx
   2ec42:	xor    edx,edx
   2ec44:	xor    esi,esi
   2ec46:	mov    edi,0x1
   2ec4b:	call   2d490 <writeCoeff4x4_CAVLC>
   2ec50:	add    r15d,eax
   2ec53:	jmp    2e9d3 <writeCBPandLumaCoeff+0x4e3>
   2ec58:	mov    rax,QWORD PTR [rip+0x87211]        # b5e70 <active_sps>
   2ec5f:	mov    r10d,DWORD PTR [rax+0x484]
   2ec66:	test   r10d,r10d
   2ec69:	jne    2e688 <writeCBPandLumaCoeff+0x198>
   2ec6f:	jmp    2eaf2 <writeCBPandLumaCoeff+0x602>
   2ec74:	lea    rax,[rip+0x37635]        # 662b0 <ue_linfo>
   2ec7b:	mov    rsi,QWORD PTR [r8]
   2ec7e:	mov    DWORD PTR [r13+0x44],edx
   2ec82:	mov    rdi,r14
   2ec85:	mov    DWORD PTR [r13+0x3c],0x1
   2ec8d:	mov    QWORD PTR [r13+0x50],rax
   2ec91:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   2ec96:	jmp    2e6db <writeCBPandLumaCoeff+0x1eb>
   2ec9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002eca0 <writeMBLayer>:
   2eca0:	endbr64 
   2eca4:	push   r15
   2eca6:	mov    edx,0x0
   2ecab:	push   r14
   2ecad:	push   r13
   2ecaf:	push   r12
   2ecb1:	push   rbp
   2ecb2:	push   rbx
   2ecb3:	sub    rsp,0x38
   2ecb7:	mov    r12,QWORD PTR [rip+0x598f2]        # 885b0 <img>
   2ecbe:	mov    r10,QWORD PTR [rip+0x598f3]        # 885b8 <input>
   2ecc5:	mov    DWORD PTR [rsp+0x1c],edi
   2ecc9:	movsxd rax,DWORD PTR [r12+0xc]
   2ecce:	mov    r11,QWORD PTR [r12+0x3758]
   2ecd6:	movsxd r8,DWORD PTR [r10+0x93c]
   2ecdd:	imul   rsi,rax,0x278
   2ece4:	test   eax,eax
   2ece6:	mov    rcx,rax
   2ece9:	lea    rbx,[r11+rsi*1]
   2eced:	lea    rdi,[r11+rsi*1-0x278]
   2ecf5:	movsxd r9,DWORD PTR [rbx]
   2ecf8:	cmovne rdx,rdi
   2ecfc:	mov    r13d,DWORD PTR [rbx+0x48]
   2ed00:	lea    rdi,[r9+r9*2]
   2ed04:	shl    rdi,0x4
   2ed08:	lea    rbp,[r12+rdi*1+0x3760]
   2ed10:	mov    rdi,QWORD PTR [r12+0x3750]
   2ed18:	mov    QWORD PTR [rsp+0x8],rdi
   2ed1d:	lea    rdi,[rip+0x5bc4c]        # 8a970 <assignSE2partition>
   2ed24:	mov    rdi,QWORD PTR [rdi+r8*8]
   2ed28:	xor    r8d,r8d
   2ed2b:	mov    QWORD PTR [rsp+0x10],rdi
   2ed30:	mov    edi,DWORD PTR [r12+0x18]
   2ed35:	test   r13d,r13d
   2ed38:	jne    2ed49 <writeMBLayer+0xa9>
   2ed3a:	mov    r8d,0x1
   2ed40:	cmp    edi,0x1
   2ed43:	je     2f4c0 <writeMBLayer+0x820>
   2ed49:	mov    r15d,DWORD PTR [r12+0x11ad0]
   2ed51:	test   r15d,r15d
   2ed54:	je     2eec8 <writeMBLayer+0x228>
   2ed5a:	test   cl,0x1
   2ed5d:	jne    2ef80 <writeMBLayer+0x2e0>
   2ed63:	mov    r15d,0x1
   2ed69:	xor    r11d,r11d
   2ed6c:	lea    edx,[r13-0x9]
   2ed70:	cmp    edx,0x1
   2ed73:	setbe  dl
   2ed76:	cmp    r13d,0xd
   2ed7a:	sete   sil
   2ed7e:	or     edx,esi
   2ed80:	mov    rsi,QWORD PTR [rsp+0x10]
   2ed85:	movzx  edx,dl
   2ed88:	mov    DWORD PTR [rbx+0x210],edx
   2ed8e:	movsxd rsi,DWORD PTR [rsi+0x8]
   2ed92:	mov    rdx,rsi
   2ed95:	shl    rdx,0x4
   2ed99:	sub    rdx,rsi
   2ed9c:	mov    rsi,QWORD PTR [rsp+0x8]
   2eda1:	mov    rsi,QWORD PTR [rsi+0x18]
   2eda5:	lea    r14,[rsi+rdx*8]
   2eda9:	cmp    edi,0x2
   2edac:	je     2efc0 <writeMBLayer+0x320>
   2edb2:	cmp    DWORD PTR [r10+0x934],0x1
   2edba:	jne    2ef1c <writeMBLayer+0x27c>
   2edc0:	and    ecx,0x1
   2edc3:	je     2f5c8 <writeMBLayer+0x928>
   2edc9:	test   r11d,r11d
   2edcc:	jne    2f5c8 <writeMBLayer+0x928>
   2edd2:	nop    WORD PTR [rax+rax*1+0x0]
   2edd8:	mov    rdi,rbx
   2eddb:	mov    DWORD PTR [rsp+0x28],r8d
   2ede0:	mov    QWORD PTR [rsp+0x20],r9
   2ede5:	call   2bd20 <MBType2Value>
   2edea:	mov    r9,QWORD PTR [rsp+0x20]
   2edef:	mov    rsi,r14
   2edf2:	mov    rdi,rbp
   2edf5:	mov    ecx,eax
   2edf7:	lea    rax,[r9+r9*2]
   2edfb:	mov    DWORD PTR [rsp+0x20],ecx
   2edff:	shl    rax,0x4
   2ee03:	add    r12,rax
   2ee06:	mov    eax,DWORD PTR [rbx+0x1cc]
   2ee0c:	mov    DWORD PTR [r12+0x3764],ecx
   2ee14:	mov    DWORD PTR [r12+0x3768],eax
   2ee1c:	lea    rax,[rip+0xfffffffffffdde6d]        # cc90 <writeMB_skip_flagInfo_CABAC>
   2ee23:	mov    DWORD PTR [r12+0x3760],0x2
   2ee2f:	mov    QWORD PTR [r12+0x3788],rax
   2ee37:	call   QWORD PTR [r14+0x70]
   2ee3b:	mov    eax,DWORD PTR [r12+0x376c]
   2ee43:	add    DWORD PTR [rbx+0x1c],eax
   2ee46:	xor    eax,eax
   2ee48:	mov    r13d,DWORD PTR [r12+0x376c]
   2ee50:	add    DWORD PTR [rbx],0x1
   2ee53:	lea    r12,[rbp+0x30]
   2ee57:	call   c9e0 <CheckAvailabilityOfNeighborsCABAC>
   2ee5c:	mov    rax,QWORD PTR [rip+0x5974d]        # 885b0 <img>
   2ee63:	mov    r8d,DWORD PTR [rsp+0x28]
   2ee68:	mov    ecx,DWORD PTR [rsp+0x20]
   2ee6c:	mov    r9d,DWORD PTR [rax+0x11ad0]
   2ee73:	mov    eax,r8d
   2ee76:	test   r9d,r9d
   2ee79:	setne  sil
   2ee7d:	xor    eax,0x1
   2ee80:	test   sil,al
   2ee83:	je     2ee8f <writeMBLayer+0x1ef>
   2ee85:	and    r15d,0x1
   2ee89:	jne    2f6bf <writeMBLayer+0xa1f>
   2ee8f:	mov    edi,DWORD PTR [rbx+0x48]
   2ee92:	test   edi,edi
   2ee94:	je     2f580 <writeMBLayer+0x8e0>
   2ee9a:	lea    rax,[rip+0xfffffffffffddfdf]        # ce80 <writeMB_typeInfo_CABAC>
   2eea1:	mov    DWORD PTR [r12+0x4],ecx
   2eea6:	mov    DWORD PTR [r12+0x8],0x0
   2eeaf:	mov    DWORD PTR [r12],0x2
   2eeb7:	mov    QWORD PTR [r12+0x28],rax
   2eebc:	jmp    2f24f <writeMBLayer+0x5af>
   2eec1:	nop    DWORD PTR [rax+0x0]
   2eec8:	lea    edx,[r13-0x9]
   2eecc:	cmp    edx,0x1
   2eecf:	setbe  dl
   2eed2:	cmp    r13d,0xd
   2eed6:	sete   sil
   2eeda:	or     edx,esi
   2eedc:	mov    rsi,QWORD PTR [rsp+0x10]
   2eee1:	movzx  edx,dl
   2eee4:	mov    DWORD PTR [rbx+0x210],edx
   2eeea:	movsxd rsi,DWORD PTR [rsi+0x8]
   2eeee:	mov    rdx,rsi
   2eef1:	shl    rdx,0x4
   2eef5:	sub    rdx,rsi
   2eef8:	mov    rsi,QWORD PTR [rsp+0x8]
   2eefd:	mov    rsi,QWORD PTR [rsi+0x18]
   2ef01:	lea    r14,[rsi+rdx*8]
   2ef05:	cmp    edi,0x2
   2ef08:	je     2f080 <writeMBLayer+0x3e0>
   2ef0e:	cmp    DWORD PTR [r10+0x934],0x1
   2ef16:	je     2edd8 <writeMBLayer+0x138>
   2ef1c:	test   r13d,r13d
   2ef1f:	jne    2f180 <writeMBLayer+0x4e0>
   2ef25:	cmp    edi,0x1
   2ef28:	je     2f170 <writeMBLayer+0x4d0>
   2ef2e:	add    DWORD PTR [r12+0x78],0x1
   2ef34:	cmp    DWORD PTR [r12+0x11bf4],0xfffffffd
   2ef3d:	jl     2f630 <writeMBLayer+0x990>
   2ef43:	mov    rdi,QWORD PTR [r12+0x80]
   2ef4b:	xor    esi,esi
   2ef4d:	nop    DWORD PTR [rax]
   2ef50:	lea    rcx,[rsi*4+0x0]
   2ef58:	xor    edx,edx
   2ef5a:	mov    rax,QWORD PTR [rdi+rax*8]
   2ef5e:	mov    rax,QWORD PTR [rax+rdx*1]
   2ef62:	add    rdx,0x8
   2ef66:	mov    DWORD PTR [rax+rcx*1],0x0
   2ef6d:	cmp    rdx,0x20
   2ef71:	je     2f608 <writeMBLayer+0x968>
   2ef77:	movsxd rax,DWORD PTR [r12+0xc]
   2ef7c:	jmp    2ef5a <writeMBLayer+0x2ba>
   2ef7e:	xchg   ax,ax
   2ef80:	lea    rsi,[r11+rsi*1-0x278]
   2ef88:	mov    r11d,DWORD PTR [rdx+0x48]
   2ef8c:	mov    r14d,DWORD PTR [rsi+0x48]
   2ef90:	test   r11d,r11d
   2ef93:	jne    2f508 <writeMBLayer+0x868>
   2ef99:	mov    r15d,0x1
   2ef9f:	cmp    edi,0x1
   2efa2:	je     2f784 <writeMBLayer+0xae4>
   2efa8:	xor    r11d,r11d
   2efab:	test   r14d,r14d
   2efae:	sete   r11b
   2efb2:	jmp    2ed6c <writeMBLayer+0xcc>
   2efb7:	nop    WORD PTR [rax+rax*1+0x0]
   2efc0:	mov    eax,r8d
   2efc3:	xor    eax,0x1
   2efc6:	and    eax,r15d
   2efc9:	xor    r15d,r15d
   2efcc:	test   al,al
   2efce:	je     2f080 <writeMBLayer+0x3e0>
   2efd4:	mov    r11d,DWORD PTR [r10+0x934]
   2efdb:	lea    rax,[r9+r9*2]
   2efdf:	mov    ecx,DWORD PTR [rbx+0x214]
   2efe5:	mov    QWORD PTR [rsp+0x20],r9
   2efea:	shl    rax,0x4
   2efee:	add    rax,r12
   2eff1:	test   r11d,r11d
   2eff4:	mov    DWORD PTR [rax+0x3764],ecx
   2effa:	mov    DWORD PTR [rax+0x3768],0x0
   2f004:	mov    DWORD PTR [rax+0x3760],0x2
   2f00e:	jne    2f798 <writeMBLayer+0xaf8>
   2f014:	test   ecx,ecx
   2f016:	lea    rsi,[rip+0x37293]        # 662b0 <ue_linfo>
   2f01d:	mov    rdi,rbp
   2f020:	mov    DWORD PTR [rax+0x376c],0x1
   2f02a:	setne  cl
   2f02d:	movzx  ecx,cl
   2f030:	mov    QWORD PTR [rax+0x3780],rsi
   2f037:	mov    rsi,QWORD PTR [r14]
   2f03a:	mov    DWORD PTR [rax+0x3774],ecx
   2f040:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   2f045:	mov    r9,QWORD PTR [rsp+0x20]
   2f04a:	lea    rax,[r9+r9*2]
   2f04e:	mov    r10,QWORD PTR [rip+0x59563]        # 885b8 <input>
   2f055:	add    rbp,0x30
   2f059:	shl    rax,0x4
   2f05d:	add    r12,rax
   2f060:	mov    eax,DWORD PTR [r12+0x376c]
   2f068:	add    DWORD PTR [rbx+0x1c],eax
   2f06b:	mov    r15d,DWORD PTR [r12+0x376c]
   2f073:	add    DWORD PTR [rbx],0x1
   2f076:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f080:	mov    rdi,rbx
   2f083:	call   2bd20 <MBType2Value>
   2f088:	mov    DWORD PTR [rbp+0x8],0x0
   2f08f:	mov    r10d,DWORD PTR [r10+0x934]
   2f096:	mov    DWORD PTR [rbp+0x4],eax
   2f099:	mov    DWORD PTR [rbp+0x0],0x2
   2f0a0:	test   r10d,r10d
   2f0a3:	je     2f4a8 <writeMBLayer+0x808>
   2f0a9:	lea    rax,[rip+0xfffffffffffdddd0]        # ce80 <writeMB_typeInfo_CABAC>
   2f0b0:	mov    QWORD PTR [rbp+0x28],rax
   2f0b4:	mov    rdi,rbp
   2f0b7:	mov    rsi,r14
   2f0ba:	add    rbp,0x30
   2f0be:	call   QWORD PTR [r14+0x70]
   2f0c2:	mov    eax,DWORD PTR [rbp-0x24]
   2f0c5:	add    DWORD PTR [rbx+0x1c],eax
   2f0c8:	mov    eax,DWORD PTR [rbx+0x48]
   2f0cb:	add    r15d,DWORD PTR [rbp-0x24]
   2f0cf:	mov    r13d,r15d
   2f0d2:	add    DWORD PTR [rbx],0x1
   2f0d5:	test   eax,eax
   2f0d7:	jne    2f279 <writeMBLayer+0x5d9>
   2f0dd:	mov    rdx,QWORD PTR [rip+0x594cc]        # 885b0 <img>
   2f0e4:	mov    eax,0x1
   2f0e9:	cmp    DWORD PTR [rdx+0x18],0x1
   2f0ed:	je     2f5a8 <writeMBLayer+0x908>
   2f0f3:	mov    DWORD PTR [rbx+0x240],eax
   2f0f9:	mov    edi,0xffffffff
   2f0fe:	call   2be40 <writeIntra4x4Modes>
   2f103:	mov    edi,DWORD PTR [rbx+0x210]
   2f109:	add    r13d,eax
   2f10c:	test   edi,edi
   2f10e:	je     2f125 <writeMBLayer+0x485>
   2f110:	mov    rax,QWORD PTR [rip+0x59499]        # 885b0 <img>
   2f117:	mov    esi,DWORD PTR [rax+0x11bfc]
   2f11d:	test   esi,esi
   2f11f:	jne    2f6b0 <writeMBLayer+0xa10>
   2f125:	mov    ecx,DWORD PTR [rsp+0x1c]
   2f129:	test   ecx,ecx
   2f12b:	jne    2f137 <writeMBLayer+0x497>
   2f12d:	mov    DWORD PTR [rbx+0x20c],0x0
   2f137:	mov    eax,DWORD PTR [rbx+0x48]
   2f13a:	test   eax,0xfffffff7
   2f13f:	jne    2f490 <writeMBLayer+0x7f0>
   2f145:	test   eax,eax
   2f147:	jne    2f45e <writeMBLayer+0x7be>
   2f14d:	mov    rax,QWORD PTR [rip+0x5945c]        # 885b0 <img>
   2f154:	cmp    DWORD PTR [rax+0x18],0x1
   2f158:	je     2f450 <writeMBLayer+0x7b0>
   2f15e:	add    rsp,0x38
   2f162:	mov    eax,r13d
   2f165:	pop    rbx
   2f166:	pop    rbp
   2f167:	pop    r12
   2f169:	pop    r13
   2f16b:	pop    r14
   2f16d:	pop    r15
   2f16f:	ret    
   2f170:	mov    edx,DWORD PTR [rbx+0x1cc]
   2f176:	test   edx,edx
   2f178:	je     2ef2e <writeMBLayer+0x28e>
   2f17e:	xchg   ax,ax
   2f180:	lea    r13,[r9+r9*2]
   2f184:	mov    eax,DWORD PTR [r12+0x78]
   2f189:	mov    rsi,r14
   2f18c:	mov    rdi,rbp
   2f18f:	shl    r13,0x4
   2f193:	mov    DWORD PTR [rsp+0x20],r8d
   2f198:	add    r13,r12
   2f19b:	lea    r12,[rbp+0x30]
   2f19f:	mov    DWORD PTR [r13+0x3764],eax
   2f1a6:	lea    rax,[rip+0x37103]        # 662b0 <ue_linfo>
   2f1ad:	mov    DWORD PTR [r13+0x3768],0x0
   2f1b8:	mov    QWORD PTR [r13+0x3780],rax
   2f1bf:	mov    DWORD PTR [r13+0x3760],0x2
   2f1ca:	call   QWORD PTR [r14+0x70]
   2f1ce:	mov    r10,QWORD PTR [rip+0x593db]        # 885b0 <img>
   2f1d5:	mov    eax,DWORD PTR [r13+0x376c]
   2f1dc:	mov    r8d,DWORD PTR [rsp+0x20]
   2f1e1:	add    DWORD PTR [rbx+0x1c],eax
   2f1e4:	mov    eax,DWORD PTR [r10+0x11ad0]
   2f1eb:	mov    r13d,DWORD PTR [r13+0x376c]
   2f1f2:	add    DWORD PTR [rbx],0x1
   2f1f5:	test   eax,eax
   2f1f7:	mov    eax,r8d
   2f1fa:	mov    DWORD PTR [r10+0x78],0x0
   2f202:	setne  cl
   2f205:	xor    eax,0x1
   2f208:	test   cl,al
   2f20a:	je     2f216 <writeMBLayer+0x576>
   2f20c:	and    r15d,0x1
   2f210:	jne    2f72f <writeMBLayer+0xa8f>
   2f216:	mov    rdi,rbx
   2f219:	call   2bd20 <MBType2Value>
   2f21e:	cmp    DWORD PTR [r10+0x18],0x1
   2f223:	mov    DWORD PTR [r12+0x4],eax
   2f228:	je     2f232 <writeMBLayer+0x592>
   2f22a:	sub    eax,0x1
   2f22d:	mov    DWORD PTR [r12+0x4],eax
   2f232:	lea    rax,[rip+0x37077]        # 662b0 <ue_linfo>
   2f239:	mov    DWORD PTR [r12],0x2
   2f241:	mov    DWORD PTR [r12+0x8],0x0
   2f24a:	mov    QWORD PTR [r12+0x20],rax
   2f24f:	mov    rsi,r14
   2f252:	mov    rdi,r12
   2f255:	lea    rbp,[r12+0x30]
   2f25a:	call   QWORD PTR [r14+0x70]
   2f25e:	mov    eax,DWORD PTR [r12+0xc]
   2f263:	add    DWORD PTR [rbx+0x1c],eax
   2f266:	add    r13d,DWORD PTR [r12+0xc]
   2f26b:	add    DWORD PTR [rbx],0x1
   2f26e:	mov    eax,DWORD PTR [rbx+0x48]
   2f271:	test   eax,eax
   2f273:	je     2f0dd <writeMBLayer+0x43d>
   2f279:	mov    DWORD PTR [rbx+0x240],0x1
   2f283:	cmp    eax,0x8
   2f286:	jne    2f390 <writeMBLayer+0x6f0>
   2f28c:	mov    rax,QWORD PTR [rsp+0x10]
   2f291:	mov    rcx,QWORD PTR [rsp+0x8]
   2f296:	lea    r15,[rbx+0x1d8]
   2f29d:	lea    r12,[rbx+0x1e8]
   2f2a4:	movsxd rdx,DWORD PTR [rax+0x8]
   2f2a8:	mov    rax,rdx
   2f2ab:	shl    rax,0x4
   2f2af:	sub    rax,rdx
   2f2b2:	mov    rdx,QWORD PTR [rcx+0x18]
   2f2b6:	lea    r14,[rdx+rax*8]
   2f2ba:	mov    rax,QWORD PTR [rip+0x592f7]        # 885b8 <input>
   2f2c1:	mov    r11d,DWORD PTR [rax+0x934]
   2f2c8:	test   r11d,r11d
   2f2cb:	jne    2f400 <writeMBLayer+0x760>
   2f2d1:	mov    rdx,QWORD PTR [rip+0x592d8]        # 885b0 <img>
   2f2d8:	lea    rax,[rip+0x36fd1]        # 662b0 <ue_linfo>
   2f2df:	cmp    DWORD PTR [rdx+0x18],0x1
   2f2e3:	mov    QWORD PTR [rbp+0x20],rax
   2f2e7:	mov    eax,DWORD PTR [r15]
   2f2ea:	je     2f41f <writeMBLayer+0x77f>
   2f2f0:	sub    eax,0x4
   2f2f3:	mov    rdi,rbp
   2f2f6:	mov    DWORD PTR [rbp+0x4],eax
   2f2f9:	mov    rsi,r14
   2f2fc:	add    rbp,0x30
   2f300:	mov    DWORD PTR [rbp-0x28],0x0
   2f307:	mov    DWORD PTR [rbp-0x30],0x2
   2f30e:	call   QWORD PTR [r14+0x70]
   2f312:	mov    eax,DWORD PTR [rbp-0x24]
   2f315:	add    DWORD PTR [rbx+0x1c],eax
   2f318:	mov    edi,DWORD PTR [rbp-0x24]
   2f31b:	add    DWORD PTR [rbx],0x1
   2f31e:	mov    edx,DWORD PTR [r15]
   2f321:	mov    eax,DWORD PTR [rbx+0x240]
   2f327:	add    edi,r13d
   2f32a:	mov    r13d,edi
   2f32d:	test   edx,edx
   2f32f:	jne    2f440 <writeMBLayer+0x7a0>
   2f335:	mov    rdx,QWORD PTR [rip+0x86b34]        # b5e70 <active_sps>
   2f33c:	mov    r10d,DWORD PTR [rdx+0x484]
   2f343:	xor    edx,edx
   2f345:	test   r10d,r10d
   2f348:	setne  dl
   2f34b:	and    eax,edx
   2f34d:	add    r15,0x4
   2f351:	mov    DWORD PTR [rbx+0x240],eax
   2f357:	cmp    r12,r15
   2f35a:	jne    2f2ba <writeMBLayer+0x61a>
   2f360:	xor    eax,eax
   2f362:	mov    DWORD PTR [rsp+0x8],edi
   2f366:	call   2c850 <writeMotionInfo2NAL>
   2f36b:	mov    edi,DWORD PTR [rsp+0x8]
   2f36f:	mov    rcx,QWORD PTR [rip+0x5923a]        # 885b0 <img>
   2f376:	lea    r13d,[rdi+rax*1]
   2f37a:	movsxd rax,DWORD PTR [rbx]
   2f37d:	lea    rax,[rax+rax*2]
   2f381:	shl    rax,0x4
   2f385:	lea    rbp,[rcx+rax*1+0x3760]
   2f38d:	mov    eax,DWORD PTR [rbx+0x48]
   2f390:	and    eax,0xfffffffb
   2f393:	cmp    eax,0x9
   2f396:	jne    2f0f9 <writeMBLayer+0x459>
   2f39c:	mov    rax,QWORD PTR [rip+0x59215]        # 885b8 <input>
   2f3a3:	mov    r9d,DWORD PTR [rax+0xc94]
   2f3aa:	test   r9d,r9d
   2f3ad:	je     2f0f9 <writeMBLayer+0x459>
   2f3b3:	mov    ecx,DWORD PTR [rbx+0x23c]
   2f3b9:	mov    r8d,DWORD PTR [rax+0x934]
   2f3c0:	mov    DWORD PTR [rbp+0x0],0x14
   2f3c7:	mov    DWORD PTR [rbp+0x4],ecx
   2f3ca:	test   r8d,r8d
   2f3cd:	je     2f4e0 <writeMBLayer+0x840>
   2f3d3:	lea    rax,[rip+0xfffffffffffdda26]        # ce00 <writeMB_transform_size_CABAC>
   2f3da:	mov    rsi,r14
   2f3dd:	mov    rdi,rbp
   2f3e0:	mov    QWORD PTR [rbp+0x28],rax
   2f3e4:	call   QWORD PTR [r14+0x70]
   2f3e8:	mov    eax,DWORD PTR [rbp+0xc]
   2f3eb:	add    DWORD PTR [rbx+0x1c],eax
   2f3ee:	add    r13d,DWORD PTR [rbp+0xc]
   2f3f2:	add    DWORD PTR [rbx],0x1
   2f3f5:	jmp    2f0f9 <writeMBLayer+0x459>
   2f3fa:	nop    WORD PTR [rax+rax*1+0x0]
   2f400:	mov    rdx,QWORD PTR [rip+0x591a9]        # 885b0 <img>
   2f407:	lea    rax,[rip+0xfffffffffffde1d2]        # d5e0 <writeB8_typeInfo_CABAC>
   2f40e:	cmp    DWORD PTR [rdx+0x18],0x1
   2f412:	mov    QWORD PTR [rbp+0x28],rax
   2f416:	mov    eax,DWORD PTR [r15]
   2f419:	jne    2f2f0 <writeMBLayer+0x650>
   2f41f:	movsxd rdx,eax
   2f422:	lea    rcx,[rip+0x45bf7]        # 75020 <b8inc.6014>
   2f429:	mov    eax,DWORD PTR [r15+0x10]
   2f42d:	imul   eax,DWORD PTR [rcx+rdx*4]
   2f431:	lea    rcx,[rip+0x45c08]        # 75040 <b8start.6013>
   2f438:	add    eax,DWORD PTR [rcx+rdx*4]
   2f43b:	jmp    2f2f3 <writeMBLayer+0x653>
   2f440:	cmp    edx,0x4
   2f443:	sete   dl
   2f446:	movzx  edx,dl
   2f449:	jmp    2f34b <writeMBLayer+0x6ab>
   2f44e:	xchg   ax,ax
   2f450:	mov    edx,DWORD PTR [rbx+0x1cc]
   2f456:	test   edx,edx
   2f458:	je     2f15e <writeMBLayer+0x4be>
   2f45e:	xor    eax,eax
   2f460:	call   2e4f0 <writeCBPandLumaCoeff>
   2f465:	add    r13d,eax
   2f468:	mov    rax,QWORD PTR [rip+0x59141]        # 885b0 <img>
   2f46f:	mov    eax,DWORD PTR [rax+0x11bfc]
   2f475:	test   eax,eax
   2f477:	je     2f15e <writeMBLayer+0x4be>
   2f47d:	xor    eax,eax
   2f47f:	call   2df00 <writeChromaCoeff>
   2f484:	add    r13d,eax
   2f487:	jmp    2f15e <writeMBLayer+0x4be>
   2f48c:	nop    DWORD PTR [rax+0x0]
   2f490:	xor    eax,eax
   2f492:	call   2c850 <writeMotionInfo2NAL>
   2f497:	add    r13d,eax
   2f49a:	mov    eax,DWORD PTR [rbx+0x48]
   2f49d:	jmp    2f145 <writeMBLayer+0x4a5>
   2f4a2:	nop    WORD PTR [rax+rax*1+0x0]
   2f4a8:	lea    rax,[rip+0x36e01]        # 662b0 <ue_linfo>
   2f4af:	mov    QWORD PTR [rbp+0x20],rax
   2f4b3:	jmp    2f0b4 <writeMBLayer+0x414>
   2f4b8:	nop    DWORD PTR [rax+rax*1+0x0]
   2f4c0:	mov    r14d,DWORD PTR [rbx+0x1cc]
   2f4c7:	xor    r8d,r8d
   2f4ca:	test   r14d,r14d
   2f4cd:	sete   r8b
   2f4d1:	jmp    2ed49 <writeMBLayer+0xa9>
   2f4d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f4e0:	lea    rax,[rip+0x36dc9]        # 662b0 <ue_linfo>
   2f4e7:	mov    rsi,QWORD PTR [r14]
   2f4ea:	mov    DWORD PTR [rbp+0x14],ecx
   2f4ed:	mov    rdi,rbp
   2f4f0:	mov    DWORD PTR [rbp+0xc],0x1
   2f4f7:	mov    QWORD PTR [rbp+0x20],rax
   2f4fb:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   2f500:	jmp    2f3e8 <writeMBLayer+0x748>
   2f505:	nop    DWORD PTR [rax]
   2f508:	xor    r15d,r15d
   2f50b:	cmp    edi,0x1
   2f50e:	jne    2efa8 <writeMBLayer+0x308>
   2f514:	xor    r11d,r11d
   2f517:	test   r14d,r14d
   2f51a:	jne    2f52d <writeMBLayer+0x88d>
   2f51c:	mov    r14d,DWORD PTR [rsi+0x1cc]
   2f523:	xor    r11d,r11d
   2f526:	test   r14d,r14d
   2f529:	sete   r11b
   2f52d:	lea    edx,[r13-0x9]
   2f531:	cmp    edx,0x1
   2f534:	setbe  dl
   2f537:	cmp    r13d,0xd
   2f53b:	sete   sil
   2f53f:	or     edx,esi
   2f541:	mov    rsi,QWORD PTR [rsp+0x10]
   2f546:	movzx  edx,dl
   2f549:	mov    DWORD PTR [rbx+0x210],edx
   2f54f:	movsxd rsi,DWORD PTR [rsi+0x8]
   2f553:	mov    rdx,rsi
   2f556:	shl    rdx,0x4
   2f55a:	sub    rdx,rsi
   2f55d:	mov    rsi,QWORD PTR [rsp+0x8]
   2f562:	cmp    DWORD PTR [r10+0x934],0x1
   2f56a:	mov    rsi,QWORD PTR [rsi+0x18]
   2f56e:	lea    r14,[rsi+rdx*8]
   2f572:	jne    2ef1c <writeMBLayer+0x27c>
   2f578:	jmp    2edc0 <writeMBLayer+0x120>
   2f57d:	nop    DWORD PTR [rax]
   2f580:	mov    rsi,QWORD PTR [rip+0x59029]        # 885b0 <img>
   2f587:	mov    eax,0x1
   2f58c:	cmp    DWORD PTR [rsi+0x18],0x1
   2f590:	jne    2f0f3 <writeMBLayer+0x453>
   2f596:	mov    esi,DWORD PTR [rbx+0x1cc]
   2f59c:	test   esi,esi
   2f59e:	jne    2ee9a <writeMBLayer+0x1fa>
   2f5a4:	nop    DWORD PTR [rax+0x0]
   2f5a8:	mov    rax,QWORD PTR [rip+0x868c1]        # b5e70 <active_sps>
   2f5af:	mov    ebp,DWORD PTR [rax+0x484]
   2f5b5:	xor    eax,eax
   2f5b7:	test   ebp,ebp
   2f5b9:	setne  al
   2f5bc:	jmp    2f0f3 <writeMBLayer+0x453>
   2f5c1:	nop    DWORD PTR [rax+0x0]
   2f5c8:	xor    eax,eax
   2f5ca:	mov    QWORD PTR [rsp+0x28],r9
   2f5cf:	mov    r13d,DWORD PTR [rbx+0x214]
   2f5d6:	mov    DWORD PTR [rsp+0x20],r8d
   2f5db:	call   53920 <field_flag_inference>
   2f5e0:	mov    DWORD PTR [rbx+0x214],eax
   2f5e6:	xor    eax,eax
   2f5e8:	call   c9e0 <CheckAvailabilityOfNeighborsCABAC>
   2f5ed:	mov    r9,QWORD PTR [rsp+0x28]
   2f5f2:	mov    r8d,DWORD PTR [rsp+0x20]
   2f5f7:	mov    DWORD PTR [rbx+0x214],r13d
   2f5fe:	jmp    2edd8 <writeMBLayer+0x138>
   2f603:	nop    DWORD PTR [rax+rax*1+0x0]
   2f608:	mov    eax,DWORD PTR [r12+0x11bf4]
   2f610:	add    rsi,0x1
   2f614:	mov    ecx,DWORD PTR [r12+0xc]
   2f619:	add    eax,0x3
   2f61c:	cmp    eax,esi
   2f61e:	jl     2f630 <writeMBLayer+0x990>
   2f620:	movsxd rax,ecx
   2f623:	jmp    2ef50 <writeMBLayer+0x2b0>
   2f628:	nop    DWORD PTR [rax+rax*1+0x0]
   2f630:	cmp    DWORD PTR [r12+0x10],ecx
   2f635:	jne    2f26e <writeMBLayer+0x5ce>
   2f63b:	lea    r13,[r9+r9*2]
   2f63f:	mov    eax,DWORD PTR [r12+0x78]
   2f644:	mov    rdi,rbp
   2f647:	mov    rsi,r14
   2f64a:	shl    r13,0x4
   2f64e:	add    rbp,0x30
   2f652:	add    r13,r12
   2f655:	mov    DWORD PTR [r13+0x3764],eax
   2f65c:	lea    rax,[rip+0x36c4d]        # 662b0 <ue_linfo>
   2f663:	mov    DWORD PTR [r13+0x3768],0x0
   2f66e:	mov    QWORD PTR [r13+0x3780],rax
   2f675:	mov    DWORD PTR [r13+0x3760],0x2
   2f680:	call   QWORD PTR [r14+0x70]
   2f684:	mov    eax,DWORD PTR [r13+0x376c]
   2f68b:	add    DWORD PTR [rbx+0x1c],eax
   2f68e:	mov    rax,QWORD PTR [rip+0x58f1b]        # 885b0 <img>
   2f695:	mov    r13d,DWORD PTR [r13+0x376c]
   2f69c:	add    DWORD PTR [rbx],0x1
   2f69f:	mov    DWORD PTR [rax+0x78],0x0
   2f6a6:	jmp    2f26e <writeMBLayer+0x5ce>
   2f6ab:	nop    DWORD PTR [rax+rax*1+0x0]
   2f6b0:	xor    eax,eax
   2f6b2:	call   2c150 <writeChromaIntraPredMode>
   2f6b7:	add    r13d,eax
   2f6ba:	jmp    2f137 <writeMBLayer+0x497>
   2f6bf:	mov    rsi,QWORD PTR [rip+0x58ef2]        # 885b8 <input>
   2f6c6:	mov    eax,DWORD PTR [rbx+0x214]
   2f6cc:	mov    DWORD PTR [rbp+0x38],0x0
   2f6d3:	mov    DWORD PTR [rbp+0x30],0x2
   2f6da:	mov    r8d,DWORD PTR [rsi+0x934]
   2f6e1:	mov    DWORD PTR [rbp+0x34],eax
   2f6e4:	test   r8d,r8d
   2f6e7:	jne    2f7ba <writeMBLayer+0xb1a>
   2f6ed:	test   eax,eax
   2f6ef:	lea    rsi,[rip+0x36bba]        # 662b0 <ue_linfo>
   2f6f6:	mov    DWORD PTR [rbp+0x3c],0x1
   2f6fd:	mov    rdi,r12
   2f700:	setne  al
   2f703:	movzx  eax,al
   2f706:	mov    QWORD PTR [rbp+0x50],rsi
   2f70a:	mov    rsi,QWORD PTR [r14]
   2f70d:	mov    DWORD PTR [rbp+0x44],eax
   2f710:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   2f715:	mov    ecx,DWORD PTR [rsp+0x20]
   2f719:	mov    eax,DWORD PTR [rbp+0x3c]
   2f71c:	lea    r12,[rbp+0x60]
   2f720:	add    DWORD PTR [rbx+0x1c],eax
   2f723:	add    r13d,DWORD PTR [rbp+0x3c]
   2f727:	add    DWORD PTR [rbx],0x1
   2f72a:	jmp    2ee8f <writeMBLayer+0x1ef>
   2f72f:	mov    eax,DWORD PTR [rbx+0x214]
   2f735:	mov    rsi,QWORD PTR [r14]
   2f738:	mov    DWORD PTR [rbp+0x30],0x2
   2f73f:	mov    rdi,r12
   2f742:	lea    rcx,[rip+0x36b67]        # 662b0 <ue_linfo>
   2f749:	mov    DWORD PTR [rbp+0x3c],0x1
   2f750:	lea    r12,[rbp+0x60]
   2f754:	test   eax,eax
   2f756:	mov    DWORD PTR [rbp+0x34],eax
   2f759:	setne  al
   2f75c:	mov    QWORD PTR [rbp+0x50],rcx
   2f760:	movzx  eax,al
   2f763:	mov    DWORD PTR [rbp+0x44],eax
   2f766:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   2f76b:	mov    eax,DWORD PTR [rbp+0x3c]
   2f76e:	mov    r10,QWORD PTR [rip+0x58e3b]        # 885b0 <img>
   2f775:	add    DWORD PTR [rbx+0x1c],eax
   2f778:	add    r13d,DWORD PTR [rbp+0x3c]
   2f77c:	add    DWORD PTR [rbx],0x1
   2f77f:	jmp    2f216 <writeMBLayer+0x576>
   2f784:	mov    edx,DWORD PTR [rdx+0x1cc]
   2f78a:	xor    r15d,r15d
   2f78d:	test   edx,edx
   2f78f:	sete   r15b
   2f793:	jmp    2f514 <writeMBLayer+0x874>
   2f798:	lea    rcx,[rip+0xfffffffffffdd441]        # cbe0 <writeFieldModeInfo_CABAC>
   2f79f:	mov    rsi,r14
   2f7a2:	mov    rdi,rbp
   2f7a5:	mov    QWORD PTR [rax+0x3788],rcx
   2f7ac:	call   QWORD PTR [r14+0x70]
   2f7b0:	mov    r9,QWORD PTR [rsp+0x20]
   2f7b5:	jmp    2f04a <writeMBLayer+0x3aa>
   2f7ba:	lea    rax,[rip+0xfffffffffffdd41f]        # cbe0 <writeFieldModeInfo_CABAC>
   2f7c1:	mov    DWORD PTR [rsp+0x20],ecx
   2f7c5:	mov    rsi,r14
   2f7c8:	mov    rdi,r12
   2f7cb:	mov    QWORD PTR [rbp+0x58],rax
   2f7cf:	call   QWORD PTR [r14+0x70]
   2f7d3:	mov    ecx,DWORD PTR [rsp+0x20]
   2f7d7:	jmp    2f719 <writeMBLayer+0xa79>
   2f7dc:	nop    DWORD PTR [rax+0x0]

000000000002f7e0 <write_one_macroblock>:
   2f7e0:	endbr64 
   2f7e4:	mov    rdx,QWORD PTR [rip+0x58dc5]        # 885b0 <img>
   2f7eb:	push   rbx
   2f7ec:	movsxd rbx,DWORD PTR [rdx+0xc]
   2f7f0:	mov    rax,rbx
   2f7f3:	imul   rbx,rbx,0x278
   2f7fa:	add    rbx,QWORD PTR [rdx+0x3758]
   2f801:	test   eax,eax
   2f803:	jne    2f80f <write_one_macroblock+0x2f>
   2f805:	mov    DWORD PTR [rip+0x6ea51],0x0        # 9e260 <intras>
   2f80f:	mov    ecx,DWORD PTR [rbx+0x48]
   2f812:	lea    esi,[rcx-0x9]
   2f815:	cmp    esi,0x1
   2f818:	jbe    2f978 <write_one_macroblock+0x198>
   2f81e:	cmp    ecx,0xd
   2f821:	je     2f978 <write_one_macroblock+0x198>
   2f827:	mov    rcx,QWORD PTR [rip+0x58d8a]        # 885b8 <input>
   2f82e:	cmp    DWORD PTR [rcx+0x934],0x1
   2f835:	je     2f993 <write_one_macroblock+0x1b3>
   2f83b:	mov    DWORD PTR [rip+0x5929b],0x1        # 88ae0 <cabac_encoding>
   2f845:	xor    edi,edi
   2f847:	call   2eca0 <writeMBLayer>
   2f84c:	mov    ecx,DWORD PTR [rbx+0x48]
   2f84f:	test   ecx,ecx
   2f851:	jne    2f8b8 <write_one_macroblock+0xd8>
   2f853:	mov    rcx,QWORD PTR [rip+0x58d56]        # 885b0 <img>
   2f85a:	cmp    DWORD PTR [rcx+0x18],0x1
   2f85e:	je     2f9f0 <write_one_macroblock+0x210>
   2f864:	cmp    DWORD PTR [rcx+0x11bf4],0xfffffffd
   2f86b:	jl     2f8b8 <write_one_macroblock+0xd8>
   2f86d:	mov    r8,QWORD PTR [rcx+0x80]
   2f874:	xor    edi,edi
   2f876:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f880:	lea    rsi,[rdi*4+0x0]
   2f888:	xor    eax,eax
   2f88a:	movsxd rdx,DWORD PTR [rcx+0xc]
   2f88e:	mov    rdx,QWORD PTR [r8+rdx*8]
   2f892:	mov    rdx,QWORD PTR [rdx+rax*1]
   2f896:	add    rax,0x8
   2f89a:	mov    DWORD PTR [rdx+rsi*1],0x0
   2f8a1:	cmp    rax,0x20
   2f8a5:	jne    2f88a <write_one_macroblock+0xaa>
   2f8a7:	mov    eax,DWORD PTR [rcx+0x11bf4]
   2f8ad:	add    rdi,0x1
   2f8b1:	add    eax,0x3
   2f8b4:	cmp    eax,edi
   2f8b6:	jge    2f880 <write_one_macroblock+0xa0>
   2f8b8:	xor    eax,eax
   2f8ba:	call   2c240 <set_last_dquant>
   2f8bf:	mov    rax,QWORD PTR [rip+0x58cf2]        # 885b8 <input>
   2f8c6:	mov    edx,DWORD PTR [rax+0xd8]
   2f8cc:	test   edx,edx
   2f8ce:	je     2f968 <write_one_macroblock+0x188>
   2f8d4:	mov    rax,QWORD PTR [rip+0x58cd5]        # 885b0 <img>
   2f8db:	cmp    DWORD PTR [rax+0x18],0x1
   2f8df:	jbe    2f9c0 <write_one_macroblock+0x1e0>
   2f8e5:	mov    ecx,DWORD PTR [rbx+0x1c]
   2f8e8:	mov    esi,DWORD PTR [rbx+0x28]
   2f8eb:	mov    edx,DWORD PTR [rbx+0x20]
   2f8ee:	mov    r8d,DWORD PTR [rbx+0x24]
   2f8f2:	add    esi,ecx
   2f8f4:	mov    edi,DWORD PTR [rbx+0x30]
   2f8f7:	add    esi,edx
   2f8f9:	add    edx,ecx
   2f8fb:	add    esi,r8d
   2f8fe:	add    edx,r8d
   2f901:	add    edx,edi
   2f903:	add    esi,edi
   2f905:	add    esi,DWORD PTR [rbx+0x2c]
   2f908:	mov    DWORD PTR [rbx+0x18],esi
   2f90b:	mov    edi,DWORD PTR [rax+0x11ba0]
   2f911:	mov    DWORD PTR [rax+0x11b6c],edx
   2f917:	mov    ecx,DWORD PTR [rbx+0x2c]
   2f91a:	add    ecx,DWORD PTR [rbx+0x28]
   2f91d:	add    DWORD PTR [rax+0x11b4c],edx
   2f923:	add    DWORD PTR [rax+0x11b50],ecx
   2f929:	mov    DWORD PTR [rax+0x11b68],ecx
   2f92f:	cmp    DWORD PTR [rax+0x11bac],edi
   2f935:	jge    2f943 <write_one_macroblock+0x163>
   2f937:	add    DWORD PTR [rax+0x11b54],edx
   2f93d:	add    DWORD PTR [rax+0x11b58],ecx
   2f943:	add    DWORD PTR [rax+0x11ba8],0x1
   2f94a:	mov    edx,DWORD PTR [rbx+0x18]
   2f94d:	mov    rax,QWORD PTR [rip+0x58c54]        # 885a8 <stats>
   2f954:	mov    DWORD PTR [rip+0x59182],0x0        # 88ae0 <cabac_encoding>
   2f95e:	add    DWORD PTR [rax+0x18],edx
   2f961:	pop    rbx
   2f962:	ret    
   2f963:	nop    DWORD PTR [rax+rax*1+0x0]
   2f968:	mov    rax,QWORD PTR [rip+0x58c41]        # 885b0 <img>
   2f96f:	jmp    2f8e5 <write_one_macroblock+0x105>
   2f974:	nop    DWORD PTR [rax+0x0]
   2f978:	mov    rcx,QWORD PTR [rip+0x58c39]        # 885b8 <input>
   2f97f:	add    DWORD PTR [rip+0x6e8da],0x1        # 9e260 <intras>
   2f986:	cmp    DWORD PTR [rcx+0x934],0x1
   2f98d:	jne    2f83b <write_one_macroblock+0x5b>
   2f993:	mov    rdx,QWORD PTR [rdx+0x3750]
   2f99a:	cmp    DWORD PTR [rdx+0xc],eax
   2f99d:	je     2f83b <write_one_macroblock+0x5b>
   2f9a3:	test   edi,edi
   2f9a5:	je     2f83b <write_one_macroblock+0x5b>
   2f9ab:	xor    edi,edi
   2f9ad:	call   2c0f0 <write_terminating_bit>
   2f9b2:	jmp    2f83b <write_one_macroblock+0x5b>
   2f9b7:	nop    WORD PTR [rax+rax*1+0x0]
   2f9c0:	mov    edx,DWORD PTR [rbx+0x48]
   2f9c3:	lea    ecx,[rdx-0x9]
   2f9c6:	cmp    ecx,0x1
   2f9c9:	jbe    2f8e5 <write_one_macroblock+0x105>
   2f9cf:	cmp    edx,0xd
   2f9d2:	je     2f8e5 <write_one_macroblock+0x105>
   2f9d8:	movsxd rcx,DWORD PTR [rax+0xc]
   2f9dc:	mov    rdx,QWORD PTR [rax+0x11868]
   2f9e3:	mov    DWORD PTR [rdx+rcx*4],0x0
   2f9ea:	jmp    2f8e5 <write_one_macroblock+0x105>
   2f9ef:	nop
   2f9f0:	mov    eax,DWORD PTR [rbx+0x1cc]
   2f9f6:	test   eax,eax
   2f9f8:	je     2f864 <write_one_macroblock+0x84>
   2f9fe:	jmp    2f8b8 <write_one_macroblock+0xd8>
   2fa03:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2fa0e:	xchg   ax,ax

000000000002fa10 <find_sad_16x16>:
   2fa10:	endbr64 
   2fa14:	push   r15
   2fa16:	push   r14
   2fa18:	push   r13
   2fa1a:	push   r12
   2fa1c:	mov    r12d,0xffffffff
   2fa22:	push   rbp
   2fa23:	push   rbx
   2fa24:	sub    rsp,0x678
   2fa2b:	mov    QWORD PTR [rsp+0x28],rdi
   2fa30:	lea    rbp,[rsp+0xc0]
   2fa38:	lea    rbx,[rsp+0x258]
   2fa40:	mov    rax,QWORD PTR fs:0x28
   2fa49:	mov    QWORD PTR [rsp+0x668],rax
   2fa51:	xor    eax,eax
   2fa53:	mov    rax,QWORD PTR [rip+0x58b56]        # 885b0 <img>
   2fa5a:	mov    r13d,DWORD PTR [rax+0xc]
   2fa5e:	xchg   ax,ax
   2fa60:	mov    r8,rbp
   2fa63:	mov    edx,r12d
   2fa66:	mov    ecx,0x1
   2fa6b:	mov    esi,0xffffffff
   2fa70:	mov    edi,r13d
   2fa73:	add    rbp,0x18
   2fa77:	add    r12d,0x1
   2fa7b:	call   30ae0 <getNeighbour>
   2fa80:	cmp    rbp,rbx
   2fa83:	jne    2fa60 <find_sad_16x16+0x50>
   2fa85:	xor    esi,esi
   2fa87:	lea    r8,[rsp+0x60]
   2fa8c:	mov    ecx,0x1
   2fa91:	mov    edi,r13d
   2fa94:	mov    edx,0xffffffff
   2fa99:	call   30ae0 <getNeighbour>
   2fa9e:	mov    rax,QWORD PTR [rip+0x58b13]        # 885b8 <input>
   2faa5:	mov    r10d,DWORD PTR [rax+0xd8]
   2faac:	mov    QWORD PTR [rsp+0x8],rax
   2fab1:	mov    eax,DWORD PTR [rsp+0x60]
   2fab5:	test   r10d,r10d
   2fab8:	mov    DWORD PTR [rsp+0x20],eax
   2fabc:	jne    2fec5 <find_sad_16x16+0x4b5>
   2fac2:	mov    eax,DWORD PTR [rsp+0xc0]
   2fac9:	mov    r13d,DWORD PTR [rsp+0xd8]
   2fad1:	mov    r15,QWORD PTR [rip+0x58ad8]        # 885b0 <img>
   2fad8:	mov    DWORD PTR [rsp+0x5c],eax
   2fadc:	mov    rax,QWORD PTR [rsp+0x28]
   2fae1:	mov    DWORD PTR [rsp+0x58],r13d
   2fae6:	xor    r14d,r14d
   2fae9:	lea    rbx,[rsp+0x260]
   2faf1:	mov    QWORD PTR [rsp+0x48],rbx
   2faf6:	lea    rbx,[rsp+0x80]
   2fafe:	mov    DWORD PTR [rax],0x2
   2fb04:	mov    rax,QWORD PTR [rip+0x878bd]        # b73c8 <imgY_org>
   2fb0b:	mov    QWORD PTR [rsp+0x30],rbx
   2fb10:	lea    rbx,[rsp+0x370]
   2fb18:	mov    QWORD PTR [rsp+0x40],rax
   2fb1d:	mov    rax,QWORD PTR [rsp+0x8]
   2fb22:	mov    QWORD PTR [rsp+0x50],rbx
   2fb27:	lea    rbx,[rsp+0xd0]
   2fb2f:	mov    eax,DWORD PTR [rax+0x95c]
   2fb35:	mov    DWORD PTR [rsp+0x24],0xf423f
   2fb3d:	mov    QWORD PTR [rsp+0x10],0x0
   2fb46:	mov    QWORD PTR [rsp+0x38],rbx
   2fb4b:	mov    QWORD PTR [rsp+0x18],r15
   2fb50:	test   eax,eax
   2fb52:	je     2fb5f <find_sad_16x16+0x14f>
   2fb54:	mov    rbx,QWORD PTR [rsp+0x18]
   2fb59:	cmp    DWORD PTR [rbx+0x18],0x2
   2fb5d:	je     2fb8f <find_sad_16x16+0x17f>
   2fb5f:	mov    rbx,QWORD PTR [rsp+0x8]
   2fb64:	mov    r8d,DWORD PTR [rbx+0x96c]
   2fb6b:	test   r8d,r8d
   2fb6e:	je     2fb7a <find_sad_16x16+0x16a>
   2fb70:	cmp    r14d,0x1
   2fb74:	jle    2feab <find_sad_16x16+0x49b>
   2fb7a:	mov    rbx,QWORD PTR [rsp+0x8]
   2fb7f:	mov    edi,DWORD PTR [rbx+0x970]
   2fb85:	test   edi,edi
   2fb87:	je     2fb8f <find_sad_16x16+0x17f>
   2fb89:	cmp    r14d,0x3
   2fb8d:	je     2fbd6 <find_sad_16x16+0x1c6>
   2fb8f:	mov    ebx,DWORD PTR [rsp+0x20]
   2fb93:	or     ebx,r14d
   2fb96:	je     2fbab <find_sad_16x16+0x19b>
   2fb98:	mov    esi,DWORD PTR [rsp+0x58]
   2fb9c:	test   esi,esi
   2fb9e:	sete   dl
   2fba1:	cmp    r14d,0x1
   2fba5:	jne    2fbbb <find_sad_16x16+0x1ab>
   2fba7:	test   dl,dl
   2fba9:	je     2fbbb <find_sad_16x16+0x1ab>
   2fbab:	add    QWORD PTR [rsp+0x10],0x10
   2fbb1:	add    r14d,0x1
   2fbb5:	test   eax,eax
   2fbb7:	je     2fb5f <find_sad_16x16+0x14f>
   2fbb9:	jmp    2fb54 <find_sad_16x16+0x144>
   2fbbb:	cmp    r14d,0x3
   2fbbf:	jne    2fc0c <find_sad_16x16+0x1fc>
   2fbc1:	mov    ecx,DWORD PTR [rsp+0x20]
   2fbc5:	test   ecx,ecx
   2fbc7:	sete   al
   2fbca:	or     al,dl
   2fbcc:	jne    2fbd6 <find_sad_16x16+0x1c6>
   2fbce:	mov    eax,DWORD PTR [rsp+0x5c]
   2fbd2:	test   eax,eax
   2fbd4:	jne    2fc0c <find_sad_16x16+0x1fc>
   2fbd6:	mov    ebx,DWORD PTR [rsp+0x24]
   2fbda:	mov    eax,ebx
   2fbdc:	shr    eax,0x1f
   2fbdf:	add    eax,ebx
   2fbe1:	sar    eax,1
   2fbe3:	mov    rbx,QWORD PTR [rsp+0x668]
   2fbeb:	xor    rbx,QWORD PTR fs:0x28
   2fbf4:	jne    2ff4f <find_sad_16x16+0x53f>
   2fbfa:	add    rsp,0x678
   2fc01:	pop    rbx
   2fc02:	pop    rbp
   2fc03:	pop    r12
   2fc05:	pop    r13
   2fc07:	pop    r14
   2fc09:	pop    r15
   2fc0b:	ret    
   2fc0c:	mov    rdi,QWORD PTR [rsp+0x18]
   2fc11:	mov    rbx,QWORD PTR [rsp+0x40]
   2fc16:	xor    r11d,r11d
   2fc19:	mov    r8,QWORD PTR [rsp+0x10]
   2fc1e:	movsxd rax,DWORD PTR [rdi+0xac]
   2fc25:	shl    r8,0x5
   2fc29:	lea    rbp,[rbx+rax*8]
   2fc2d:	movsxd rbx,DWORD PTR [rdi+0xa8]
   2fc34:	add    r8,rdi
   2fc37:	add    rbx,rbx
   2fc3a:	nop    WORD PTR [rax+rax*1+0x0]
   2fc40:	mov    r10,QWORD PTR [rbp+r11*8+0x0]
   2fc45:	mov    edi,r11d
   2fc48:	mov    r9,r11
   2fc4b:	xor    eax,eax
   2fc4d:	sar    edi,0x2
   2fc50:	and    r9d,0x3
   2fc54:	add    r10,rbx
   2fc57:	movsxd rdi,edi
   2fc5a:	nop    WORD PTR [rax+rax*1+0x0]
   2fc60:	movzx  esi,WORD PTR [r8+rax*2+0x12b8]
   2fc69:	mov    edx,eax
   2fc6b:	mov    rcx,rax
   2fc6e:	sar    edx,0x2
   2fc71:	and    ecx,0x3
   2fc74:	movsxd rdx,edx
   2fc77:	lea    rdx,[rdx+rcx*4]
   2fc7b:	lea    rdx,[r9+rdx*4]
   2fc7f:	lea    rcx,[rdi+rdx*4]
   2fc83:	movzx  edx,WORD PTR [r10+rax*2]
   2fc88:	add    rax,0x1
   2fc8c:	sub    edx,esi
   2fc8e:	mov    DWORD PTR [rsp+rcx*4+0x260],edx
   2fc95:	cmp    rax,0x10
   2fc99:	jne    2fc60 <find_sad_16x16+0x250>
   2fc9b:	add    r11,0x1
   2fc9f:	add    r8,0x20
   2fca3:	cmp    r11,0x10
   2fca7:	jne    2fc40 <find_sad_16x16+0x230>
   2fca9:	lea    r15,[rsp+0x2a0]
   2fcb1:	xor    r13d,r13d
   2fcb4:	xor    edi,edi
   2fcb6:	mov    r9,r15
   2fcb9:	xor    r10d,r10d
   2fcbc:	lea    rsi,[r9-0x40]
   2fcc0:	mov    rax,rsi
   2fcc3:	mov    ebx,DWORD PTR [rax+0x300]
   2fcc9:	mov    edx,DWORD PTR [rax]
   2fccb:	add    rax,0x10
   2fccf:	mov    ecx,DWORD PTR [rax+0xf0]
   2fcd5:	mov    ebp,DWORD PTR [rax+0x1f0]
   2fcdb:	lea    r8d,[rdx+rbx*1]
   2fcdf:	sub    edx,ebx
   2fce1:	lea    r11d,[rcx+rbp*1]
   2fce5:	sub    ecx,ebp
   2fce7:	lea    ebx,[r8+r11*1]
   2fceb:	sub    r8d,r11d
   2fcee:	mov    DWORD PTR [rax+0x1f0],r8d
   2fcf5:	lea    r8d,[rcx+rdx*1]
   2fcf9:	sub    edx,ecx
   2fcfb:	mov    DWORD PTR [rax-0x10],ebx
   2fcfe:	mov    DWORD PTR [rax+0xf0],r8d
   2fd05:	mov    DWORD PTR [rax+0x2f0],edx
   2fd0b:	cmp    rax,r9
   2fd0e:	jne    2fcc3 <find_sad_16x16+0x2b3>
   2fd10:	mov    r11d,0x4
   2fd16:	xor    ebx,ebx
   2fd18:	mov    ebp,DWORD PTR [rsi+0x30]
   2fd1b:	mov    eax,DWORD PTR [rsi]
   2fd1d:	mov    edx,DWORD PTR [rsi+0x10]
   2fd20:	mov    r12d,DWORD PTR [rsi+0x20]
   2fd24:	lea    ecx,[rax+rbp*1]
   2fd27:	sub    eax,ebp
   2fd29:	lea    r8d,[rdx+r12*1]
   2fd2d:	sub    edx,r12d
   2fd30:	lea    ebp,[rcx+r8*1]
   2fd34:	sub    ecx,r8d
   2fd37:	mov    DWORD PTR [rsi+0x20],ecx
   2fd3a:	lea    ecx,[rdx+rax*1]
   2fd3d:	sub    eax,edx
   2fd3f:	mov    rdx,rsi
   2fd42:	mov    DWORD PTR [rsi],ebp
   2fd44:	mov    DWORD PTR [rsi+0x10],ecx
   2fd47:	mov    DWORD PTR [rsi+0x30],eax
   2fd4a:	mov    eax,ebx
   2fd4c:	test   eax,eax
   2fd4e:	je     2fd61 <find_sad_16x16+0x351>
   2fd50:	mov    ecx,DWORD PTR [rdx]
   2fd52:	mov    r8d,DWORD PTR [rdx]
   2fd55:	sar    ecx,0x1f
   2fd58:	xor    r8d,ecx
   2fd5b:	sub    r8d,ecx
   2fd5e:	add    edi,r8d
   2fd61:	add    eax,0x1
   2fd64:	add    rdx,0x10
   2fd68:	cmp    r11d,eax
   2fd6b:	jne    2fd4c <find_sad_16x16+0x33c>
   2fd6d:	add    ebx,0x1
   2fd70:	add    rsi,0x100
   2fd77:	add    r11d,0x1
   2fd7b:	cmp    ebx,0x4
   2fd7e:	jne    2fd18 <find_sad_16x16+0x308>
   2fd80:	add    r10,0x1
   2fd84:	add    r9,0x40
   2fd88:	cmp    r10,0x4
   2fd8c:	jne    2fcbc <find_sad_16x16+0x2ac>
   2fd92:	add    r13,0x1
   2fd96:	add    r15,0x4
   2fd9a:	cmp    r13,0x4
   2fd9e:	jne    2fcb6 <find_sad_16x16+0x2a6>
   2fda4:	mov    rax,QWORD PTR [rsp+0x48]
   2fda9:	mov    r9,QWORD PTR [rsp+0x30]
   2fdae:	mov    r10,QWORD PTR [rsp+0x50]
   2fdb3:	lea    r8,[rax+0x100]
   2fdba:	lea    rdx,[r8-0x100]
   2fdc1:	mov    rsi,r9
   2fdc4:	mov    ecx,DWORD PTR [rdx]
   2fdc6:	test   ecx,ecx
   2fdc8:	lea    eax,[rcx+0x3]
   2fdcb:	cmovns eax,ecx
   2fdce:	add    rdx,0x40
   2fdd2:	add    rsi,0x10
   2fdd6:	sar    eax,0x2
   2fdd9:	mov    DWORD PTR [rsi-0x10],eax
   2fddc:	cmp    r8,rdx
   2fddf:	jne    2fdc4 <find_sad_16x16+0x3b4>
   2fde1:	add    r8,0x4
   2fde5:	add    r9,0x4
   2fde9:	cmp    r10,r8
   2fdec:	jne    2fdba <find_sad_16x16+0x3aa>
   2fdee:	mov    rdx,QWORD PTR [rsp+0x30]
   2fdf3:	lea    rax,[rdx+0x10]
   2fdf7:	mov    r10d,DWORD PTR [rdx+0x30]
   2fdfb:	mov    ecx,DWORD PTR [rdx]
   2fdfd:	add    rdx,0x4
   2fe01:	mov    esi,DWORD PTR [rdx+0xc]
   2fe04:	mov    r11d,DWORD PTR [rdx+0x1c]
   2fe08:	lea    r8d,[rcx+r10*1]
   2fe0c:	sub    ecx,r10d
   2fe0f:	lea    r9d,[rsi+r11*1]
   2fe13:	sub    esi,r11d
   2fe16:	lea    r10d,[r8+r9*1]
   2fe1a:	sub    r8d,r9d
   2fe1d:	mov    DWORD PTR [rdx+0x1c],r8d
   2fe21:	lea    r8d,[rsi+rcx*1]
   2fe25:	sub    ecx,esi
   2fe27:	mov    DWORD PTR [rdx-0x4],r10d
   2fe2b:	mov    DWORD PTR [rdx+0xc],r8d
   2fe2f:	mov    DWORD PTR [rdx+0x2c],ecx
   2fe32:	cmp    rax,rdx
   2fe35:	jne    2fdf7 <find_sad_16x16+0x3e7>
   2fe37:	mov    r8,QWORD PTR [rsp+0x38]
   2fe3c:	mov    r10d,DWORD PTR [rax-0x4]
   2fe40:	mov    edx,DWORD PTR [rax-0x10]
   2fe43:	mov    ecx,DWORD PTR [rax-0xc]
   2fe46:	mov    r11d,DWORD PTR [rax-0x8]
   2fe4a:	lea    esi,[rdx+r10*1]
   2fe4e:	sub    edx,r10d
   2fe51:	lea    r9d,[rcx+r11*1]
   2fe55:	sub    ecx,r11d
   2fe58:	lea    r10d,[rsi+r9*1]
   2fe5c:	sub    esi,r9d
   2fe5f:	mov    DWORD PTR [rax-0x8],esi
   2fe62:	lea    esi,[rcx+rdx*1]
   2fe65:	sub    edx,ecx
   2fe67:	mov    DWORD PTR [rax-0x10],r10d
   2fe6b:	mov    DWORD PTR [rax-0xc],esi
   2fe6e:	mov    DWORD PTR [rax-0x4],edx
   2fe71:	lea    rdx,[rax-0x10]
   2fe75:	mov    ecx,DWORD PTR [rdx]
   2fe77:	mov    esi,DWORD PTR [rdx]
   2fe79:	add    rdx,0x4
   2fe7d:	sar    ecx,0x1f
   2fe80:	xor    esi,ecx
   2fe82:	sub    esi,ecx
   2fe84:	add    edi,esi
   2fe86:	cmp    rax,rdx
   2fe89:	jne    2fe75 <find_sad_16x16+0x465>
   2fe8b:	add    rax,0x10
   2fe8f:	cmp    r8,rax
   2fe92:	jne    2fe3c <find_sad_16x16+0x42c>
   2fe94:	mov    QWORD PTR [rsp+0x38],r8
   2fe99:	cmp    edi,DWORD PTR [rsp+0x24]
   2fe9d:	jge    2feab <find_sad_16x16+0x49b>
   2fe9f:	mov    rax,QWORD PTR [rsp+0x28]
   2fea4:	mov    DWORD PTR [rsp+0x24],edi
   2fea8:	mov    DWORD PTR [rax],r14d
   2feab:	cmp    r14d,0x3
   2feaf:	je     2fbd6 <find_sad_16x16+0x1c6>
   2feb5:	mov    rax,QWORD PTR [rsp+0x8]
   2feba:	mov    eax,DWORD PTR [rax+0x95c]
   2fec0:	jmp    2fbab <find_sad_16x16+0x19b>
   2fec5:	mov    r15,QWORD PTR [rip+0x586e4]        # 885b0 <img>
   2fecc:	test   eax,eax
   2fece:	jne    2ff3a <find_sad_16x16+0x52a>
   2fed0:	lea    rax,[rsp+0xd8]
   2fed8:	mov    r13d,0x1
   2fede:	jmp    2fef8 <find_sad_16x16+0x4e8>
   2fee0:	movsxd rcx,DWORD PTR [rax+0x4]
   2fee4:	mov    rdx,QWORD PTR [r15+0x11868]
   2feeb:	add    rax,0x18
   2feef:	and    r13d,DWORD PTR [rdx+rcx*4]
   2fef3:	cmp    rax,rbx
   2fef6:	je     2ff0c <find_sad_16x16+0x4fc>
   2fef8:	mov    r9d,DWORD PTR [rax]
   2fefb:	test   r9d,r9d
   2fefe:	jne    2fee0 <find_sad_16x16+0x4d0>
   2ff00:	add    rax,0x18
   2ff04:	xor    r13d,r13d
   2ff07:	cmp    rax,rbx
   2ff0a:	jne    2fef8 <find_sad_16x16+0x4e8>
   2ff0c:	mov    eax,DWORD PTR [rsp+0xc0]
   2ff13:	mov    DWORD PTR [rsp+0x5c],eax
   2ff17:	test   eax,eax
   2ff19:	je     2fadc <find_sad_16x16+0xcc>
   2ff1f:	movsxd rdx,DWORD PTR [rsp+0xc4]
   2ff27:	mov    rax,QWORD PTR [r15+0x11868]
   2ff2e:	mov    eax,DWORD PTR [rax+rdx*4]
   2ff31:	mov    DWORD PTR [rsp+0x5c],eax
   2ff35:	jmp    2fadc <find_sad_16x16+0xcc>
   2ff3a:	movsxd rdx,DWORD PTR [rsp+0x64]
   2ff3f:	mov    rax,QWORD PTR [r15+0x11868]
   2ff46:	mov    eax,DWORD PTR [rax+rdx*4]
   2ff49:	mov    DWORD PTR [rsp+0x20],eax
   2ff4d:	jmp    2fed0 <find_sad_16x16+0x4c0>
   2ff4f:	call   4390 <__stack_chk_fail@plt>
   2ff54:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ff5e:	xchg   ax,ax

000000000002ff60 <mb_is_available>:
   2ff60:	endbr64 
   2ff64:	xor    eax,eax
   2ff66:	test   edi,edi
   2ff68:	js     2ffb1 <mb_is_available+0x51>
   2ff6a:	mov    rdx,QWORD PTR [rip+0x5863f]        # 885b0 <img>
   2ff71:	cmp    DWORD PTR [rdx+0x11b24],edi
   2ff77:	jle    2ffb1 <mb_is_available+0x51>
   2ff79:	mov    ecx,DWORD PTR [rdx+0x11bbc]
   2ff7f:	mov    eax,0x1
   2ff84:	test   ecx,ecx
   2ff86:	jne    2ffb1 <mb_is_available+0x51>
   2ff88:	movsxd rdi,edi
   2ff8b:	movsxd rsi,esi
   2ff8e:	mov    rax,QWORD PTR [rdx+0x3758]
   2ff95:	imul   rsi,rsi,0x278
   2ff9c:	imul   rdi,rdi,0x278
   2ffa3:	mov    ecx,DWORD PTR [rax+rsi*1+0x4]
   2ffa7:	cmp    DWORD PTR [rax+rdi*1+0x4],ecx
   2ffab:	sete   al
   2ffae:	movzx  eax,al
   2ffb1:	ret    
   2ffb2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2ffbd:	nop    DWORD PTR [rax]

000000000002ffc0 <CheckAvailabilityOfNeighbors>:
   2ffc0:	endbr64 
   2ffc4:	mov    rsi,QWORD PTR [rip+0x585e5]        # 885b0 <img>
   2ffcb:	push   r13
   2ffcd:	push   r12
   2ffcf:	push   rbp
   2ffd0:	push   rbx
   2ffd1:	movsxd rax,DWORD PTR [rsi+0xc]
   2ffd5:	mov    r8,QWORD PTR [rsi+0x3758]
   2ffdc:	mov    ebx,DWORD PTR [rsi+0x11ad0]
   2ffe2:	mov    rdi,rax
   2ffe5:	imul   rax,rax,0x278
   2ffec:	mov    r10d,DWORD PTR [rsi+0x11b14]
   2fff3:	lea    rcx,[r8+rax*1]
   2fff7:	mov    QWORD PTR [rcx+0x38],0x0
   2ffff:	mov    QWORD PTR [rcx+0x40],0x0
   30007:	test   ebx,ebx
   30009:	je     30140 <CheckAvailabilityOfNeighbors+0x180>
   3000f:	mov    eax,edi
   30011:	xor    r9d,r9d
   30014:	shr    eax,0x1f
   30017:	add    edi,eax
   30019:	sar    edi,1
   3001b:	mov    edx,edi
   3001d:	lea    eax,[rdi+rdi*1-0x2]
   30021:	sub    edx,r10d
   30024:	mov    DWORD PTR [rcx+0x218],eax
   3002a:	lea    ebx,[rdx+rdx*1]
   3002d:	lea    ebp,[rdx+rdx*1-0x2]
   30031:	lea    r12d,[rbx+0x2]
   30035:	mov    DWORD PTR [rcx+0x21c],ebx
   3003b:	mov    DWORD PTR [rcx+0x220],r12d
   30042:	mov    DWORD PTR [rcx+0x224],ebp
   30048:	test   eax,eax
   3004a:	js     30080 <CheckAvailabilityOfNeighbors+0xc0>
   3004c:	cmp    eax,DWORD PTR [rsi+0x11b24]
   30052:	jge    30080 <CheckAvailabilityOfNeighbors+0xc0>
   30054:	mov    r9d,DWORD PTR [rsi+0x11bbc]
   3005b:	test   r9d,r9d
   3005e:	jne    302d8 <CheckAvailabilityOfNeighbors+0x318>
   30064:	cdqe   
   30066:	mov    edx,DWORD PTR [rcx+0x4]
   30069:	imul   rax,rax,0x278
   30070:	cmp    DWORD PTR [r8+rax*1+0x4],edx
   30075:	je     302d8 <CheckAvailabilityOfNeighbors+0x318>
   3007b:	nop    DWORD PTR [rax+rax*1+0x0]
   30080:	mov    DWORD PTR [rcx+0x228],r9d
   30087:	xor    r11d,r11d
   3008a:	test   ebx,ebx
   3008c:	js     300aa <CheckAvailabilityOfNeighbors+0xea>
   3008e:	cmp    ebx,DWORD PTR [rsi+0x11b24]
   30094:	jge    300aa <CheckAvailabilityOfNeighbors+0xea>
   30096:	mov    edx,DWORD PTR [rsi+0x11bbc]
   3009c:	mov    r11d,0x1
   300a2:	test   edx,edx
   300a4:	je     30360 <CheckAvailabilityOfNeighbors+0x3a0>
   300aa:	mov    DWORD PTR [rcx+0x22c],r11d
   300b1:	xor    eax,eax
   300b3:	test   r12d,r12d
   300b6:	js     300f0 <CheckAvailabilityOfNeighbors+0x130>
   300b8:	cmp    r12d,DWORD PTR [rsi+0x11b24]
   300bf:	jge    300f0 <CheckAvailabilityOfNeighbors+0x130>
   300c1:	mov    eax,DWORD PTR [rsi+0x11bbc]
   300c7:	test   eax,eax
   300c9:	jne    302c0 <CheckAvailabilityOfNeighbors+0x300>
   300cf:	movsxd r12,r12d
   300d2:	mov    ebx,DWORD PTR [rcx+0x4]
   300d5:	imul   r12,r12,0x278
   300dc:	cmp    DWORD PTR [r8+r12*1+0x4],ebx
   300e1:	je     302c0 <CheckAvailabilityOfNeighbors+0x300>
   300e7:	nop    WORD PTR [rax+rax*1+0x0]
   300f0:	mov    DWORD PTR [rcx+0x230],eax
   300f6:	xor    eax,eax
   300f8:	test   ebp,ebp
   300fa:	js     30130 <CheckAvailabilityOfNeighbors+0x170>
   300fc:	cmp    ebp,DWORD PTR [rsi+0x11b24]
   30102:	jge    30130 <CheckAvailabilityOfNeighbors+0x170>
   30104:	mov    eax,DWORD PTR [rsi+0x11bbc]
   3010a:	test   eax,eax
   3010c:	jne    302a8 <CheckAvailabilityOfNeighbors+0x2e8>
   30112:	movsxd rbp,ebp
   30115:	mov    ebx,DWORD PTR [rcx+0x4]
   30118:	imul   rbp,rbp,0x278
   3011f:	cmp    DWORD PTR [r8+rbp*1+0x4],ebx
   30124:	je     302a8 <CheckAvailabilityOfNeighbors+0x2e8>
   3012a:	nop    WORD PTR [rax+rax*1+0x0]
   30130:	mov    DWORD PTR [rcx+0x234],eax
   30136:	jmp    30266 <CheckAvailabilityOfNeighbors+0x2a6>
   3013b:	nop    DWORD PTR [rax+rax*1+0x0]
   30140:	mov    ebp,edi
   30142:	lea    edx,[rdi-0x1]
   30145:	xor    r9d,r9d
   30148:	sub    ebp,r10d
   3014b:	mov    DWORD PTR [rcx+0x218],edx
   30151:	lea    r13d,[rbp+0x1]
   30155:	lea    r12d,[rbp-0x1]
   30159:	mov    DWORD PTR [rcx+0x21c],ebp
   3015f:	mov    DWORD PTR [rcx+0x220],r13d
   30166:	mov    DWORD PTR [rcx+0x224],r12d
   3016d:	test   edx,edx
   3016f:	js     301a0 <CheckAvailabilityOfNeighbors+0x1e0>
   30171:	mov    r9d,ebx
   30174:	cmp    edx,DWORD PTR [rsi+0x11b24]
   3017a:	jge    301a0 <CheckAvailabilityOfNeighbors+0x1e0>
   3017c:	mov    r9d,DWORD PTR [rsi+0x11bbc]
   30183:	test   r9d,r9d
   30186:	jne    302f0 <CheckAvailabilityOfNeighbors+0x330>
   3018c:	mov    edx,DWORD PTR [rcx+0x4]
   3018f:	cmp    DWORD PTR [r8+rax*1-0x274],edx
   30197:	je     302f0 <CheckAvailabilityOfNeighbors+0x330>
   3019d:	nop    DWORD PTR [rax]
   301a0:	mov    DWORD PTR [rcx+0x228],r9d
   301a7:	xor    r11d,r11d
   301aa:	test   ebp,ebp
   301ac:	js     301df <CheckAvailabilityOfNeighbors+0x21f>
   301ae:	cmp    ebp,DWORD PTR [rsi+0x11b24]
   301b4:	jge    301df <CheckAvailabilityOfNeighbors+0x21f>
   301b6:	mov    eax,DWORD PTR [rsi+0x11bbc]
   301bc:	mov    r11d,0x1
   301c2:	test   eax,eax
   301c4:	jne    301df <CheckAvailabilityOfNeighbors+0x21f>
   301c6:	movsxd rbp,ebp
   301c9:	xor    r11d,r11d
   301cc:	mov    eax,DWORD PTR [rcx+0x4]
   301cf:	imul   rbp,rbp,0x278
   301d6:	cmp    DWORD PTR [r8+rbp*1+0x4],eax
   301db:	sete   r11b
   301df:	mov    DWORD PTR [rcx+0x22c],r11d
   301e6:	xor    eax,eax
   301e8:	test   r13d,r13d
   301eb:	js     30220 <CheckAvailabilityOfNeighbors+0x260>
   301ed:	cmp    r13d,DWORD PTR [rsi+0x11b24]
   301f4:	jge    30220 <CheckAvailabilityOfNeighbors+0x260>
   301f6:	mov    eax,DWORD PTR [rsi+0x11bbc]
   301fc:	test   eax,eax
   301fe:	jne    30320 <CheckAvailabilityOfNeighbors+0x360>
   30204:	movsxd r13,r13d
   30207:	mov    edx,DWORD PTR [rcx+0x4]
   3020a:	imul   r13,r13,0x278
   30211:	cmp    DWORD PTR [r8+r13*1+0x4],edx
   30216:	je     30320 <CheckAvailabilityOfNeighbors+0x360>
   3021c:	nop    DWORD PTR [rax+0x0]
   30220:	mov    DWORD PTR [rcx+0x230],eax
   30226:	test   r12d,r12d
   30229:	js     30260 <CheckAvailabilityOfNeighbors+0x2a0>
   3022b:	cmp    r12d,DWORD PTR [rsi+0x11b24]
   30232:	jge    30260 <CheckAvailabilityOfNeighbors+0x2a0>
   30234:	mov    ebx,DWORD PTR [rsi+0x11bbc]
   3023a:	test   ebx,ebx
   3023c:	jne    30348 <CheckAvailabilityOfNeighbors+0x388>
   30242:	movsxd r12,r12d
   30245:	mov    eax,DWORD PTR [rcx+0x4]
   30248:	imul   r12,r12,0x278
   3024f:	cmp    DWORD PTR [r8+r12*1+0x4],eax
   30254:	je     30348 <CheckAvailabilityOfNeighbors+0x388>
   3025a:	nop    WORD PTR [rax+rax*1+0x0]
   30260:	mov    DWORD PTR [rcx+0x234],ebx
   30266:	test   r9d,r9d
   30269:	je     30280 <CheckAvailabilityOfNeighbors+0x2c0>
   3026b:	movsxd rax,DWORD PTR [rcx+0x218]
   30272:	imul   rax,rax,0x278
   30279:	add    rax,r8
   3027c:	mov    QWORD PTR [rcx+0x40],rax
   30280:	test   r11d,r11d
   30283:	je     3029a <CheckAvailabilityOfNeighbors+0x2da>
   30285:	movsxd rax,DWORD PTR [rcx+0x21c]
   3028c:	imul   rax,rax,0x278
   30293:	add    r8,rax
   30296:	mov    QWORD PTR [rcx+0x38],r8
   3029a:	pop    rbx
   3029b:	pop    rbp
   3029c:	pop    r12
   3029e:	pop    r13
   302a0:	ret    
   302a1:	nop    DWORD PTR [rax+0x0]
   302a8:	xor    edx,edx
   302aa:	mov    eax,edi
   302ac:	div    r10d
   302af:	xor    eax,eax
   302b1:	test   edx,edx
   302b3:	setne  al
   302b6:	mov    DWORD PTR [rcx+0x234],eax
   302bc:	jmp    30266 <CheckAvailabilityOfNeighbors+0x2a6>
   302be:	xchg   ax,ax
   302c0:	xor    edx,edx
   302c2:	lea    eax,[rdi+0x1]
   302c5:	div    r10d
   302c8:	xor    eax,eax
   302ca:	test   edx,edx
   302cc:	setne  al
   302cf:	jmp    300f0 <CheckAvailabilityOfNeighbors+0x130>
   302d4:	nop    DWORD PTR [rax+0x0]
   302d8:	xor    edx,edx
   302da:	mov    eax,edi
   302dc:	xor    r9d,r9d
   302df:	div    r10d
   302e2:	test   edx,edx
   302e4:	setne  r9b
   302e8:	jmp    30080 <CheckAvailabilityOfNeighbors+0xc0>
   302ed:	nop    DWORD PTR [rax]
   302f0:	xor    edx,edx
   302f2:	mov    eax,edi
   302f4:	xor    r9d,r9d
   302f7:	div    r10d
   302fa:	test   edx,edx
   302fc:	setne  r9b
   30300:	xor    r11d,r11d
   30303:	mov    DWORD PTR [rcx+0x228],r9d
   3030a:	test   ebp,ebp
   3030c:	jns    301ae <CheckAvailabilityOfNeighbors+0x1ee>
   30312:	jmp    301df <CheckAvailabilityOfNeighbors+0x21f>
   30317:	nop    WORD PTR [rax+rax*1+0x0]
   30320:	xor    edx,edx
   30322:	lea    eax,[rdi+0x1]
   30325:	div    r10d
   30328:	xor    eax,eax
   3032a:	test   edx,edx
   3032c:	setne  al
   3032f:	mov    DWORD PTR [rcx+0x230],eax
   30335:	test   r12d,r12d
   30338:	jns    3022b <CheckAvailabilityOfNeighbors+0x26b>
   3033e:	jmp    30260 <CheckAvailabilityOfNeighbors+0x2a0>
   30343:	nop    DWORD PTR [rax+rax*1+0x0]
   30348:	xor    edx,edx
   3034a:	mov    eax,edi
   3034c:	xor    ebx,ebx
   3034e:	div    r10d
   30351:	test   edx,edx
   30353:	setne  bl
   30356:	jmp    30260 <CheckAvailabilityOfNeighbors+0x2a0>
   3035b:	nop    DWORD PTR [rax+rax*1+0x0]
   30360:	movsxd rbx,ebx
   30363:	xor    r11d,r11d
   30366:	mov    eax,DWORD PTR [rcx+0x4]
   30369:	imul   rbx,rbx,0x278
   30370:	cmp    DWORD PTR [r8+rbx*1+0x4],eax
   30375:	sete   r11b
   30379:	jmp    300aa <CheckAvailabilityOfNeighbors+0xea>
   3037e:	xchg   ax,ax

0000000000030380 <get_mb_block_pos>:
   30380:	endbr64 
   30384:	mov    r8,QWORD PTR [rip+0x58225]        # 885b0 <img>
   3038b:	mov    r10,rdx
   3038e:	mov    eax,DWORD PTR [r8+0x11ad0]
   30395:	mov    r9d,DWORD PTR [r8+0x11b14]
   3039c:	test   eax,eax
   3039e:	je     303d0 <get_mb_block_pos+0x50>
   303a0:	mov    ecx,edi
   303a2:	xor    edx,edx
   303a4:	shr    ecx,0x1f
   303a7:	add    ecx,edi
   303a9:	sar    ecx,1
   303ab:	mov    eax,ecx
   303ad:	div    r9d
   303b0:	mov    eax,ecx
   303b2:	mov    DWORD PTR [rsi],edx
   303b4:	xor    edx,edx
   303b6:	div    DWORD PTR [r8+0x11b14]
   303bd:	mov    edx,edi
   303bf:	shr    edx,0x1f
   303c2:	add    edi,edx
   303c4:	and    edi,0x1
   303c7:	sub    edi,edx
   303c9:	lea    eax,[rdi+rax*2]
   303cc:	mov    DWORD PTR [r10],eax
   303cf:	ret    
   303d0:	mov    eax,edi
   303d2:	xor    edx,edx
   303d4:	div    r9d
   303d7:	mov    eax,edi
   303d9:	mov    DWORD PTR [rsi],edx
   303db:	xor    edx,edx
   303dd:	div    DWORD PTR [r8+0x11b14]
   303e4:	mov    DWORD PTR [r10],eax
   303e7:	ret    
   303e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000303f0 <get_mb_pos>:
   303f0:	endbr64 
   303f4:	mov    r8,QWORD PTR [rip+0x581b5]        # 885b0 <img>
   303fb:	mov    r10,rdx
   303fe:	mov    eax,DWORD PTR [r8+0x11ad0]
   30405:	mov    r9d,DWORD PTR [r8+0x11b14]
   3040c:	test   eax,eax
   3040e:	je     30450 <get_mb_pos+0x60>
   30410:	mov    ecx,edi
   30412:	xor    edx,edx
   30414:	shr    ecx,0x1f
   30417:	add    ecx,edi
   30419:	sar    ecx,1
   3041b:	mov    eax,ecx
   3041d:	div    r9d
   30420:	mov    eax,ecx
   30422:	mov    DWORD PTR [rsi],edx
   30424:	xor    edx,edx
   30426:	div    DWORD PTR [r8+0x11b14]
   3042d:	mov    edx,edi
   3042f:	shr    edx,0x1f
   30432:	add    edi,edx
   30434:	and    edi,0x1
   30437:	sub    edi,edx
   30439:	lea    eax,[rdi+rax*2]
   3043c:	mov    DWORD PTR [r10],eax
   3043f:	shl    DWORD PTR [rsi],0x4
   30442:	shl    DWORD PTR [r10],0x4
   30446:	ret    
   30447:	nop    WORD PTR [rax+rax*1+0x0]
   30450:	mov    eax,edi
   30452:	xor    edx,edx
   30454:	div    r9d
   30457:	mov    eax,edi
   30459:	mov    DWORD PTR [rsi],edx
   3045b:	xor    edx,edx
   3045d:	div    DWORD PTR [r8+0x11b14]
   30464:	mov    DWORD PTR [r10],eax
   30467:	shl    DWORD PTR [rsi],0x4
   3046a:	shl    DWORD PTR [r10],0x4
   3046e:	ret    
   3046f:	nop

0000000000030470 <getNonAffNeighbour>:
   30470:	endbr64 
   30474:	mov    r9d,edx
   30477:	mov    rdx,QWORD PTR [rip+0x58132]        # 885b0 <img>
   3047e:	mov    eax,edi
   30480:	push   rbx
   30481:	imul   rax,rax,0x278
   30488:	mov    ebx,ecx
   3048a:	mov    r11,r8
   3048d:	add    rax,QWORD PTR [rdx+0x3758]
   30494:	test   ecx,ecx
   30496:	jne    30518 <getNonAffNeighbour+0xa8>
   3049c:	mov    r8d,DWORD PTR [rdx+0x11c04]
   304a3:	mov    ecx,DWORD PTR [rdx+0x11c08]
   304a9:	test   esi,esi
   304ab:	jns    30527 <getNonAffNeighbour+0xb7>
   304ad:	test   r9d,r9d
   304b0:	jns    30550 <getNonAffNeighbour+0xe0>
   304b6:	mov    edi,DWORD PTR [rax+0x224]
   304bc:	mov    eax,DWORD PTR [rax+0x234]
   304c2:	mov    DWORD PTR [r11+0x4],edi
   304c6:	mov    DWORD PTR [r11],eax
   304c9:	test   eax,eax
   304cb:	jne    304d7 <getNonAffNeighbour+0x67>
   304cd:	mov    eax,DWORD PTR [rdx+0x11bbc]
   304d3:	test   eax,eax
   304d5:	je     30513 <getNonAffNeighbour+0xa3>
   304d7:	mov    edi,DWORD PTR [r11+0x4]
   304db:	lea    eax,[r8+rsi*1]
   304df:	lea    rsi,[r11+0x10]
   304e3:	cdq    
   304e4:	idiv   r8d
   304e7:	lea    eax,[rcx+r9*1]
   304eb:	mov    DWORD PTR [r11+0x8],edx
   304ef:	cdq    
   304f0:	idiv   ecx
   304f2:	mov    DWORD PTR [r11+0xc],edx
   304f6:	lea    rdx,[r11+0x14]
   304fa:	call   303f0 <get_mb_pos>
   304ff:	test   ebx,ebx
   30501:	je     30580 <getNonAffNeighbour+0x110>
   30503:	mov    eax,DWORD PTR [r11+0x8]
   30507:	add    DWORD PTR [r11+0x10],eax
   3050b:	mov    eax,DWORD PTR [r11+0xc]
   3050f:	add    DWORD PTR [r11+0x14],eax
   30513:	pop    rbx
   30514:	ret    
   30515:	nop    DWORD PTR [rax]
   30518:	mov    ecx,0x10
   3051d:	mov    r8d,0x10
   30523:	test   esi,esi
   30525:	js     304ad <getNonAffNeighbour+0x3d>
   30527:	cmp    r8d,esi
   3052a:	jle    305c8 <getNonAffNeighbour+0x158>
   30530:	test   r9d,r9d
   30533:	js     305f8 <getNonAffNeighbour+0x188>
   30539:	cmp    ecx,r9d
   3053c:	jle    305e8 <getNonAffNeighbour+0x178>
   30542:	mov    DWORD PTR [r11+0x4],edi
   30546:	mov    DWORD PTR [r11],0x1
   3054d:	jmp    304db <getNonAffNeighbour+0x6b>
   3054f:	nop
   30550:	test   esi,esi
   30552:	jns    30527 <getNonAffNeighbour+0xb7>
   30554:	test   r9d,r9d
   30557:	js     305e8 <getNonAffNeighbour+0x178>
   3055d:	cmp    ecx,r9d
   30560:	jle    305e8 <getNonAffNeighbour+0x178>
   30566:	mov    edi,DWORD PTR [rax+0x218]
   3056c:	mov    eax,DWORD PTR [rax+0x228]
   30572:	mov    DWORD PTR [r11+0x4],edi
   30576:	mov    DWORD PTR [r11],eax
   30579:	jmp    304c9 <getNonAffNeighbour+0x59>
   3057e:	xchg   ax,ax
   30580:	mov    ecx,0x10
   30585:	mov    rsi,QWORD PTR [rip+0x58024]        # 885b0 <img>
   3058c:	pop    rbx
   3058d:	mov    eax,ecx
   3058f:	cdq    
   30590:	idiv   DWORD PTR [rsi+0x11c04]
   30596:	mov    edi,eax
   30598:	mov    eax,DWORD PTR [r11+0x10]
   3059c:	cdq    
   3059d:	idiv   edi
   3059f:	add    eax,DWORD PTR [r11+0x8]
   305a3:	mov    DWORD PTR [r11+0x10],eax
   305a7:	mov    eax,ecx
   305a9:	cdq    
   305aa:	idiv   DWORD PTR [rsi+0x11c08]
   305b0:	mov    ecx,eax
   305b2:	mov    eax,DWORD PTR [r11+0x14]
   305b6:	cdq    
   305b7:	idiv   ecx
   305b9:	add    eax,DWORD PTR [r11+0xc]
   305bd:	mov    DWORD PTR [r11+0x14],eax
   305c1:	ret    
   305c2:	nop    WORD PTR [rax+rax*1+0x0]
   305c8:	test   r9d,r9d
   305cb:	jns    305e8 <getNonAffNeighbour+0x178>
   305cd:	mov    edi,DWORD PTR [rax+0x220]
   305d3:	mov    eax,DWORD PTR [rax+0x230]
   305d9:	mov    DWORD PTR [r11+0x4],edi
   305dd:	mov    DWORD PTR [r11],eax
   305e0:	jmp    304c9 <getNonAffNeighbour+0x59>
   305e5:	nop    DWORD PTR [rax]
   305e8:	mov    DWORD PTR [r11],0x0
   305ef:	jmp    304cd <getNonAffNeighbour+0x5d>
   305f4:	nop    DWORD PTR [rax+0x0]
   305f8:	mov    edi,DWORD PTR [rax+0x21c]
   305fe:	mov    eax,DWORD PTR [rax+0x22c]
   30604:	mov    DWORD PTR [r11+0x4],edi
   30608:	mov    DWORD PTR [r11],eax
   3060b:	jmp    304c9 <getNonAffNeighbour+0x59>

0000000000030610 <getAffNeighbour>:
   30610:	endbr64 
   30614:	mov    r11,r8
   30617:	mov    r8,QWORD PTR [rip+0x57f92]        # 885b0 <img>
   3061e:	push   r13
   30620:	push   r12
   30622:	push   rbp
   30623:	push   rbx
   30624:	mov    ebx,ecx
   30626:	mov    rbp,QWORD PTR [r8+0x3758]
   3062d:	test   ecx,ecx
   3062f:	jne    306e0 <getAffNeighbour+0xd0>
   30635:	mov    ecx,DWORD PTR [r8+0x11c04]
   3063c:	mov    r9d,DWORD PTR [r8+0x11c08]
   30643:	mov    DWORD PTR [r11],0x0
   3064a:	cmp    r9d,edx
   3064d:	jle    306d5 <getAffNeighbour+0xc5>
   30653:	cmp    ecx,esi
   30655:	jg     3065b <getAffNeighbour+0x4b>
   30657:	test   edx,edx
   30659:	jns    306d5 <getAffNeighbour+0xc5>
   3065b:	mov    r10d,edi
   3065e:	imul   r10,r10,0x278
   30665:	add    r10,rbp
   30668:	test   esi,esi
   3066a:	js     30720 <getAffNeighbour+0x110>
   30670:	cmp    ecx,esi
   30672:	jg     306f0 <getAffNeighbour+0xe0>
   30678:	test   edx,edx
   3067a:	js     308a0 <getAffNeighbour+0x290>
   30680:	mov    edx,0xffffffff
   30685:	mov    eax,DWORD PTR [r8+0x11bbc]
   3068c:	test   eax,eax
   3068e:	je     306d5 <getAffNeighbour+0xc5>
   30690:	mov    r12d,DWORD PTR [r11+0x4]
   30694:	lea    r8d,[r9+rdx*1]
   30698:	lea    eax,[rcx+rsi*1]
   3069b:	mov    edi,r12d
   3069e:	lea    rsi,[r11+0x10]
   306a2:	cdq    
   306a3:	idiv   ecx
   306a5:	mov    eax,r8d
   306a8:	mov    DWORD PTR [r11+0x8],edx
   306ac:	cdq    
   306ad:	idiv   r9d
   306b0:	mov    DWORD PTR [r11+0xc],edx
   306b4:	lea    rdx,[r11+0x14]
   306b8:	call   303f0 <get_mb_pos>
   306bd:	test   ebx,ebx
   306bf:	je     307a0 <getAffNeighbour+0x190>
   306c5:	mov    eax,DWORD PTR [r11+0x8]
   306c9:	add    DWORD PTR [r11+0x10],eax
   306cd:	mov    eax,DWORD PTR [r11+0xc]
   306d1:	add    DWORD PTR [r11+0x14],eax
   306d5:	pop    rbx
   306d6:	pop    rbp
   306d7:	pop    r12
   306d9:	pop    r13
   306db:	ret    
   306dc:	nop    DWORD PTR [rax+0x0]
   306e0:	mov    r9d,0x10
   306e6:	mov    ecx,0x10
   306eb:	jmp    30643 <getAffNeighbour+0x33>
   306f0:	test   edx,edx
   306f2:	js     30850 <getAffNeighbour+0x240>
   306f8:	jne    30708 <getAffNeighbour+0xf8>
   306fa:	cmp    DWORD PTR [r8+0x11bbc],0x2
   30702:	je     30a90 <getAffNeighbour+0x480>
   30708:	mov    DWORD PTR [r11+0x4],edi
   3070c:	mov    r12d,edi
   3070f:	lea    r8d,[r9+rdx*1]
   30713:	mov    DWORD PTR [r11],0x1
   3071a:	jmp    30698 <getAffNeighbour+0x88>
   3071f:	nop
   30720:	mov    eax,DWORD PTR [r10+0x214]
   30727:	and    edi,0x1
   3072a:	test   edx,edx
   3072c:	js     307f0 <getAffNeighbour+0x1e0>
   30732:	mov    r12d,DWORD PTR [r10+0x218]
   30739:	mov    r10d,DWORD PTR [r10+0x228]
   30740:	mov    DWORD PTR [r11+0x4],r12d
   30744:	mov    DWORD PTR [r11],r10d
   30747:	test   eax,eax
   30749:	je     30910 <getAffNeighbour+0x300>
   3074f:	test   edi,edi
   30751:	jne    30a08 <getAffNeighbour+0x3f8>
   30757:	test   r10d,r10d
   3075a:	je     30680 <getAffNeighbour+0x70>
   30760:	movsxd rax,r12d
   30763:	imul   rax,rax,0x278
   3076a:	mov    eax,DWORD PTR [rbp+rax*1+0x214]
   30771:	test   eax,eax
   30773:	jne    309f8 <getAffNeighbour+0x3e8>
   30779:	lea    r8d,[rdx+rdx*1]
   3077d:	mov    eax,r9d
   30780:	shr    eax,0x1f
   30783:	add    eax,r9d
   30786:	sar    eax,1
   30788:	cmp    eax,edx
   3078a:	jle    3094c <getAffNeighbour+0x33c>
   30790:	add    r8d,r9d
   30793:	jmp    30698 <getAffNeighbour+0x88>
   30798:	nop    DWORD PTR [rax+rax*1+0x0]
   307a0:	mov    ecx,0x10
   307a5:	mov    rsi,QWORD PTR [rip+0x57e04]        # 885b0 <img>
   307ac:	pop    rbx
   307ad:	mov    eax,ecx
   307af:	pop    rbp
   307b0:	pop    r12
   307b2:	cdq    
   307b3:	pop    r13
   307b5:	idiv   DWORD PTR [rsi+0x11c04]
   307bb:	mov    edi,eax
   307bd:	mov    eax,DWORD PTR [r11+0x10]
   307c1:	cdq    
   307c2:	idiv   edi
   307c4:	add    eax,DWORD PTR [r11+0x8]
   307c8:	mov    DWORD PTR [r11+0x10],eax
   307cc:	mov    eax,ecx
   307ce:	cdq    
   307cf:	idiv   DWORD PTR [rsi+0x11c08]
   307d5:	mov    ecx,eax
   307d7:	mov    eax,DWORD PTR [r11+0x14]
   307db:	cdq    
   307dc:	idiv   ecx
   307de:	add    eax,DWORD PTR [r11+0xc]
   307e2:	mov    DWORD PTR [r11+0x14],eax
   307e6:	ret    
   307e7:	nop    WORD PTR [rax+rax*1+0x0]
   307f0:	test   eax,eax
   307f2:	je     308e0 <getAffNeighbour+0x2d0>
   307f8:	mov    r12d,DWORD PTR [r10+0x224]
   307ff:	mov    eax,DWORD PTR [r10+0x234]
   30806:	test   edi,edi
   30808:	jne    308c9 <getAffNeighbour+0x2b9>
   3080e:	mov    DWORD PTR [r11+0x4],r12d
   30812:	mov    DWORD PTR [r11],eax
   30815:	test   eax,eax
   30817:	je     30680 <getAffNeighbour+0x70>
   3081d:	movsxd rax,r12d
   30820:	imul   rax,rax,0x278
   30827:	mov    edi,DWORD PTR [rbp+rax*1+0x214]
   3082e:	test   edi,edi
   30830:	jne    309f8 <getAffNeighbour+0x3e8>
   30836:	add    r12d,0x1
   3083a:	lea    r8d,[r9+rdx*2]
   3083e:	mov    DWORD PTR [r11+0x4],r12d
   30842:	jmp    30698 <getAffNeighbour+0x88>
   30847:	nop    WORD PTR [rax+rax*1+0x0]
   30850:	mov    eax,DWORD PTR [r10+0x214]
   30857:	mov    r13d,edi
   3085a:	and    r13d,0x1
   3085e:	test   eax,eax
   30860:	jne    30988 <getAffNeighbour+0x378>
   30866:	test   r13d,r13d
   30869:	jne    30a78 <getAffNeighbour+0x468>
   3086f:	mov    edi,DWORD PTR [r10+0x21c]
   30876:	mov    eax,DWORD PTR [r10+0x22c]
   3087d:	mov    DWORD PTR [r11+0x4],edi
   30881:	test   eax,eax
   30883:	je     308d2 <getAffNeighbour+0x2c2>
   30885:	cmp    DWORD PTR [r8+0x11bbc],0x1
   3088d:	je     30ac0 <getAffNeighbour+0x4b0>
   30893:	add    edi,0x1
   30896:	mov    DWORD PTR [r11+0x4],edi
   3089a:	jmp    308d2 <getAffNeighbour+0x2c2>
   3089c:	nop    DWORD PTR [rax+0x0]
   308a0:	mov    r12d,DWORD PTR [r10+0x214]
   308a7:	and    edi,0x1
   308aa:	test   r12d,r12d
   308ad:	je     30960 <getAffNeighbour+0x350>
   308b3:	mov    r12d,DWORD PTR [r10+0x220]
   308ba:	mov    eax,DWORD PTR [r10+0x230]
   308c1:	test   edi,edi
   308c3:	je     3080e <getAffNeighbour+0x1fe>
   308c9:	lea    edi,[r12+0x1]
   308ce:	mov    DWORD PTR [r11+0x4],edi
   308d2:	mov    DWORD PTR [r11],eax
   308d5:	jmp    30900 <getAffNeighbour+0x2f0>
   308d7:	nop    WORD PTR [rax+rax*1+0x0]
   308e0:	test   edi,edi
   308e2:	jne    309a8 <getAffNeighbour+0x398>
   308e8:	mov    eax,DWORD PTR [r10+0x224]
   308ef:	add    eax,0x1
   308f2:	mov    DWORD PTR [r11+0x4],eax
   308f6:	mov    eax,DWORD PTR [r10+0x234]
   308fd:	mov    DWORD PTR [r11],eax
   30900:	test   eax,eax
   30902:	je     30685 <getAffNeighbour+0x75>
   30908:	jmp    30690 <getAffNeighbour+0x80>
   3090d:	nop    DWORD PTR [rax]
   30910:	test   edi,edi
   30912:	jne    30a38 <getAffNeighbour+0x428>
   30918:	test   r10d,r10d
   3091b:	je     30680 <getAffNeighbour+0x70>
   30921:	movsxd rax,r12d
   30924:	imul   rax,rax,0x278
   3092b:	mov    eax,DWORD PTR [rbp+rax*1+0x214]
   30932:	test   eax,eax
   30934:	je     309f8 <getAffNeighbour+0x3e8>
   3093a:	mov    r8d,edx
   3093d:	sar    r8d,1
   30940:	add    r8d,r9d
   30943:	and    edx,0x1
   30946:	je     30698 <getAffNeighbour+0x88>
   3094c:	add    r12d,0x1
   30950:	mov    DWORD PTR [r11+0x4],r12d
   30954:	jmp    30698 <getAffNeighbour+0x88>
   30959:	nop    DWORD PTR [rax+0x0]
   30960:	test   edi,edi
   30962:	jne    30680 <getAffNeighbour+0x70>
   30968:	mov    eax,DWORD PTR [r10+0x220]
   3096f:	add    eax,0x1
   30972:	mov    DWORD PTR [r11+0x4],eax
   30976:	mov    eax,DWORD PTR [r10+0x230]
   3097d:	mov    DWORD PTR [r11],eax
   30980:	jmp    30900 <getAffNeighbour+0x2f0>
   30985:	nop    DWORD PTR [rax]
   30988:	mov    eax,DWORD PTR [r10+0x22c]
   3098f:	mov    r12d,DWORD PTR [r10+0x21c]
   30996:	test   r13d,r13d
   30999:	jne    308c9 <getAffNeighbour+0x2b9>
   3099f:	jmp    3080e <getAffNeighbour+0x1fe>
   309a4:	nop    DWORD PTR [rax+0x0]
   309a8:	mov    r12d,DWORD PTR [r10+0x218]
   309af:	mov    eax,DWORD PTR [r10+0x228]
   309b6:	mov    DWORD PTR [r11+0x4],r12d
   309ba:	mov    DWORD PTR [r11],eax
   309bd:	test   eax,eax
   309bf:	je     30680 <getAffNeighbour+0x70>
   309c5:	movsxd rax,r12d
   309c8:	lea    r8d,[r9+rdx*1]
   309cc:	imul   rax,rax,0x278
   309d3:	mov    edx,DWORD PTR [rbp+rax*1+0x214]
   309da:	test   edx,edx
   309dc:	je     30698 <getAffNeighbour+0x88>
   309e2:	add    r12d,0x1
   309e6:	sar    r8d,1
   309e9:	mov    DWORD PTR [r11+0x4],r12d
   309ed:	add    r8d,r9d
   309f0:	jmp    30698 <getAffNeighbour+0x88>
   309f5:	nop    DWORD PTR [rax]
   309f8:	lea    r8d,[r9+rdx*1]
   309fc:	jmp    30698 <getAffNeighbour+0x88>
   30a01:	nop    DWORD PTR [rax+0x0]
   30a08:	test   r10d,r10d
   30a0b:	je     30680 <getAffNeighbour+0x70>
   30a11:	movsxd rax,r12d
   30a14:	imul   rax,rax,0x278
   30a1b:	mov    eax,DWORD PTR [rbp+rax*1+0x214]
   30a22:	test   eax,eax
   30a24:	jne    30aaf <getAffNeighbour+0x49f>
   30a2a:	lea    r8d,[rdx+rdx*1+0x1]
   30a2f:	jmp    3077d <getAffNeighbour+0x16d>
   30a34:	nop    DWORD PTR [rax+0x0]
   30a38:	test   r10d,r10d
   30a3b:	je     30680 <getAffNeighbour+0x70>
   30a41:	movsxd rax,r12d
   30a44:	lea    r8d,[r9+rdx*1]
   30a48:	imul   rax,rax,0x278
   30a4f:	mov    eax,DWORD PTR [rbp+rax*1+0x214]
   30a56:	test   eax,eax
   30a58:	je     3094c <getAffNeighbour+0x33c>
   30a5e:	sar    r8d,1
   30a61:	add    r8d,r9d
   30a64:	and    edx,0x1
   30a67:	je     30698 <getAffNeighbour+0x88>
   30a6d:	jmp    3094c <getAffNeighbour+0x33c>
   30a72:	nop    WORD PTR [rax+rax*1+0x0]
   30a78:	lea    r12d,[rdi-0x1]
   30a7c:	mov    DWORD PTR [r11],0x1
   30a83:	lea    r8d,[r9+rdx*1]
   30a87:	mov    DWORD PTR [r11+0x4],r12d
   30a8b:	jmp    30698 <getAffNeighbour+0x88>
   30a90:	mov    edi,DWORD PTR [r10+0x21c]
   30a97:	lea    r8d,[r9-0x1]
   30a9b:	mov    DWORD PTR [r11],0x1
   30aa2:	lea    r12d,[rdi+0x1]
   30aa6:	mov    DWORD PTR [r11+0x4],r12d
   30aaa:	jmp    30698 <getAffNeighbour+0x88>
   30aaf:	add    r12d,0x1
   30ab3:	lea    r8d,[r9+rdx*1]
   30ab7:	mov    DWORD PTR [r11+0x4],r12d
   30abb:	jmp    30698 <getAffNeighbour+0x88>
   30ac0:	movsxd r10,edi
   30ac3:	imul   r10,r10,0x278
   30aca:	mov    r13d,DWORD PTR [rbp+r10*1+0x214]
   30ad2:	test   r13d,r13d
   30ad5:	jne    308d2 <getAffNeighbour+0x2c2>
   30adb:	jmp    30893 <getAffNeighbour+0x283>

0000000000030ae0 <getNeighbour>:
   30ae0:	endbr64 
   30ae4:	push   r12
   30ae6:	mov    r12d,esi
   30ae9:	push   rbp
   30aea:	mov    ebp,edi
   30aec:	sub    rsp,0x18
   30af0:	test   edi,edi
   30af2:	js     30b30 <getNeighbour+0x50>
   30af4:	mov    rax,QWORD PTR [rip+0x57ab5]        # 885b0 <img>
   30afb:	mov    esi,r12d
   30afe:	mov    edi,ebp
   30b00:	mov    eax,DWORD PTR [rax+0x11ad0]
   30b06:	test   eax,eax
   30b08:	je     30b20 <getNeighbour+0x40>
   30b0a:	add    rsp,0x18
   30b0e:	pop    rbp
   30b0f:	pop    r12
   30b11:	jmp    30610 <getAffNeighbour>
   30b16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30b20:	add    rsp,0x18
   30b24:	pop    rbp
   30b25:	pop    r12
   30b27:	jmp    30470 <getNonAffNeighbour>
   30b2c:	nop    DWORD PTR [rax+0x0]
   30b30:	mov    esi,0x64
   30b35:	lea    rdi,[rip+0x446fc]        # 75238 <MODTAB+0x18>
   30b3c:	mov    QWORD PTR [rsp+0x8],r8
   30b41:	mov    DWORD PTR [rsp+0x4],ecx
   30b45:	mov    DWORD PTR [rsp],edx
   30b48:	call   19180 <error>
   30b4d:	mov    r8,QWORD PTR [rsp+0x8]
   30b52:	mov    ecx,DWORD PTR [rsp+0x4]
   30b56:	mov    edx,DWORD PTR [rsp]
   30b59:	jmp    30af4 <getNeighbour+0x14>
   30b5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000030b60 <getLuma4x4Neighbour>:
   30b60:	endbr64 
   30b64:	push   rbx
   30b65:	lea    edx,[r8+rdx*4]
   30b69:	mov    rbx,r9
   30b6c:	lea    esi,[rcx+rsi*4]
   30b6f:	mov    r8,r9
   30b72:	mov    ecx,0x1
   30b77:	call   30ae0 <getNeighbour>
   30b7c:	mov    eax,DWORD PTR [rbx]
   30b7e:	test   eax,eax
   30b80:	je     30bc6 <getLuma4x4Neighbour+0x66>
   30b82:	mov    edx,DWORD PTR [rbx+0x8]
   30b85:	test   edx,edx
   30b87:	lea    eax,[rdx+0x3]
   30b8a:	cmovns eax,edx
   30b8d:	mov    edx,DWORD PTR [rbx+0xc]
   30b90:	sar    eax,0x2
   30b93:	test   edx,edx
   30b95:	mov    DWORD PTR [rbx+0x8],eax
   30b98:	lea    eax,[rdx+0x3]
   30b9b:	cmovns eax,edx
   30b9e:	mov    edx,DWORD PTR [rbx+0x10]
   30ba1:	sar    eax,0x2
   30ba4:	test   edx,edx
   30ba6:	mov    DWORD PTR [rbx+0xc],eax
   30ba9:	lea    eax,[rdx+0x3]
   30bac:	cmovns eax,edx
   30baf:	mov    edx,DWORD PTR [rbx+0x14]
   30bb2:	sar    eax,0x2
   30bb5:	test   edx,edx
   30bb7:	mov    DWORD PTR [rbx+0x10],eax
   30bba:	lea    eax,[rdx+0x3]
   30bbd:	cmovns eax,edx
   30bc0:	sar    eax,0x2
   30bc3:	mov    DWORD PTR [rbx+0x14],eax
   30bc6:	pop    rbx
   30bc7:	ret    
   30bc8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000030bd0 <getChroma4x4Neighbour>:
   30bd0:	endbr64 
   30bd4:	push   rbx
   30bd5:	lea    edx,[r8+rdx*4]
   30bd9:	mov    rbx,r9
   30bdc:	lea    esi,[rcx+rsi*4]
   30bdf:	mov    r8,r9
   30be2:	xor    ecx,ecx
   30be4:	call   30ae0 <getNeighbour>
   30be9:	mov    eax,DWORD PTR [rbx]
   30beb:	test   eax,eax
   30bed:	je     30c33 <getChroma4x4Neighbour+0x63>
   30bef:	mov    edx,DWORD PTR [rbx+0x8]
   30bf2:	test   edx,edx
   30bf4:	lea    eax,[rdx+0x3]
   30bf7:	cmovns eax,edx
   30bfa:	mov    edx,DWORD PTR [rbx+0xc]
   30bfd:	sar    eax,0x2
   30c00:	test   edx,edx
   30c02:	mov    DWORD PTR [rbx+0x8],eax
   30c05:	lea    eax,[rdx+0x3]
   30c08:	cmovns eax,edx
   30c0b:	mov    edx,DWORD PTR [rbx+0x10]
   30c0e:	sar    eax,0x2
   30c11:	test   edx,edx
   30c13:	mov    DWORD PTR [rbx+0xc],eax
   30c16:	lea    eax,[rdx+0x3]
   30c19:	cmovns eax,edx
   30c1c:	mov    edx,DWORD PTR [rbx+0x14]
   30c1f:	sar    eax,0x2
   30c22:	test   edx,edx
   30c24:	mov    DWORD PTR [rbx+0x10],eax
   30c27:	lea    eax,[rdx+0x3]
   30c2a:	cmovns eax,edx
   30c2d:	sar    eax,0x2
   30c30:	mov    DWORD PTR [rbx+0x14],eax
   30c33:	pop    rbx
   30c34:	ret    
   30c35:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30c3f:	nop

0000000000030c40 <unmark_for_long_term_reference>:
   30c40:	mov    rdx,QWORD PTR [rip+0x85229]        # b5e70 <active_sps>
   30c47:	mov    eax,DWORD PTR [rdi]
   30c49:	mov    edx,DWORD PTR [rdx+0x47c]
   30c4f:	test   edx,edx
   30c51:	jne    30c90 <unmark_for_long_term_reference+0x50>
   30c53:	test   al,0x1
   30c55:	je     30c66 <unmark_for_long_term_reference+0x26>
   30c57:	mov    rdx,QWORD PTR [rdi+0x30]
   30c5b:	mov    QWORD PTR [rdx+0x18e8],0x0
   30c66:	test   al,0x2
   30c68:	je     30c79 <unmark_for_long_term_reference+0x39>
   30c6a:	mov    rdx,QWORD PTR [rdi+0x38]
   30c6e:	mov    QWORD PTR [rdx+0x18e8],0x0
   30c79:	cmp    eax,0x3
   30c7c:	je     30cb0 <unmark_for_long_term_reference+0x70>
   30c7e:	mov    QWORD PTR [rdi+0x4],0x0
   30c86:	ret    
   30c87:	nop    WORD PTR [rax+rax*1+0x0]
   30c90:	cmp    eax,0x3
   30c93:	jne    30c7e <unmark_for_long_term_reference+0x3e>
   30c95:	mov    rax,QWORD PTR [rdi+0x28]
   30c99:	mov    QWORD PTR [rax+0x18e8],0x0
   30ca4:	mov    QWORD PTR [rdi+0x4],0x0
   30cac:	ret    
   30cad:	nop    DWORD PTR [rax]
   30cb0:	mov    rax,QWORD PTR [rdi+0x30]
   30cb4:	mov    QWORD PTR [rax+0x18e8],0x0
   30cbf:	mov    rax,QWORD PTR [rdi+0x38]
   30cc3:	mov    QWORD PTR [rax+0x18e8],0x0
   30cce:	mov    rax,QWORD PTR [rdi+0x28]
   30cd2:	mov    QWORD PTR [rax+0x18e8],0x0
   30cdd:	jmp    30ca4 <unmark_for_long_term_reference+0x64>
   30cdf:	nop

0000000000030ce0 <compare_pic_by_pic_num_desc>:
   30ce0:	endbr64 
   30ce4:	mov    rdx,QWORD PTR [rsi]
   30ce7:	mov    rcx,QWORD PTR [rdi]
   30cea:	mov    eax,0x1
   30cef:	mov    edx,DWORD PTR [rdx+0x18dc]
   30cf5:	cmp    DWORD PTR [rcx+0x18dc],edx
   30cfb:	jl     30d05 <compare_pic_by_pic_num_desc+0x25>
   30cfd:	setg   al
   30d00:	movzx  eax,al
   30d03:	neg    eax
   30d05:	ret    
   30d06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000030d10 <compare_pic_by_lt_pic_num_asc>:
   30d10:	endbr64 
   30d14:	mov    rdx,QWORD PTR [rsi]
   30d17:	mov    rcx,QWORD PTR [rdi]
   30d1a:	mov    eax,0xffffffff
   30d1f:	mov    edx,DWORD PTR [rdx+0x18e0]
   30d25:	cmp    DWORD PTR [rcx+0x18e0],edx
   30d2b:	jl     30d33 <compare_pic_by_lt_pic_num_asc+0x23>
   30d2d:	setg   al
   30d30:	movzx  eax,al
   30d33:	ret    
   30d34:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   30d3f:	nop

0000000000030d40 <compare_fs_by_frame_num_desc>:
   30d40:	endbr64 
   30d44:	mov    rdx,QWORD PTR [rsi]
   30d47:	mov    rcx,QWORD PTR [rdi]
   30d4a:	mov    eax,0x1
   30d4f:	mov    edx,DWORD PTR [rdx+0x18]
   30d52:	cmp    DWORD PTR [rcx+0x18],edx
   30d55:	jl     30d5f <compare_fs_by_frame_num_desc+0x1f>
   30d57:	setg   al
   30d5a:	movzx  eax,al
   30d5d:	neg    eax
   30d5f:	ret    

0000000000030d60 <compare_fs_by_lt_pic_idx_asc>:
   30d60:	endbr64 
   30d64:	mov    rdx,QWORD PTR [rsi]
   30d67:	mov    rcx,QWORD PTR [rdi]
   30d6a:	mov    eax,0xffffffff
   30d6f:	mov    edx,DWORD PTR [rdx+0x1c]
   30d72:	cmp    DWORD PTR [rcx+0x1c],edx
   30d75:	jl     30d7d <compare_fs_by_lt_pic_idx_asc+0x1d>
   30d77:	setg   al
   30d7a:	movzx  eax,al
   30d7d:	ret    
   30d7e:	xchg   ax,ax

0000000000030d80 <compare_pic_by_poc_asc>:
   30d80:	endbr64 
   30d84:	mov    rdx,QWORD PTR [rsi]
   30d87:	mov    rcx,QWORD PTR [rdi]
   30d8a:	mov    eax,0xffffffff
   30d8f:	mov    edx,DWORD PTR [rdx+0x4]
   30d92:	cmp    DWORD PTR [rcx+0x4],edx
   30d95:	jl     30d9d <compare_pic_by_poc_asc+0x1d>
   30d97:	setg   al
   30d9a:	movzx  eax,al
   30d9d:	ret    
   30d9e:	xchg   ax,ax

0000000000030da0 <compare_pic_by_poc_desc>:
   30da0:	endbr64 
   30da4:	mov    rdx,QWORD PTR [rsi]
   30da7:	mov    rcx,QWORD PTR [rdi]
   30daa:	mov    eax,0x1
   30daf:	mov    edx,DWORD PTR [rdx+0x4]
   30db2:	cmp    DWORD PTR [rcx+0x4],edx
   30db5:	jl     30dbf <compare_pic_by_poc_desc+0x1f>
   30db7:	setg   al
   30dba:	movzx  eax,al
   30dbd:	neg    eax
   30dbf:	ret    

0000000000030dc0 <compare_fs_by_poc_asc>:
   30dc0:	endbr64 
   30dc4:	mov    rdx,QWORD PTR [rsi]
   30dc7:	mov    rcx,QWORD PTR [rdi]
   30dca:	mov    eax,0xffffffff
   30dcf:	mov    edx,DWORD PTR [rdx+0x24]
   30dd2:	cmp    DWORD PTR [rcx+0x24],edx
   30dd5:	jl     30ddd <compare_fs_by_poc_asc+0x1d>
   30dd7:	setg   al
   30dda:	movzx  eax,al
   30ddd:	ret    
   30dde:	xchg   ax,ax

0000000000030de0 <compare_fs_by_poc_desc>:
   30de0:	endbr64 
   30de4:	mov    rdx,QWORD PTR [rsi]
   30de7:	mov    rcx,QWORD PTR [rdi]
   30dea:	mov    eax,0x1
   30def:	mov    edx,DWORD PTR [rdx+0x24]
   30df2:	cmp    DWORD PTR [rcx+0x24],edx
   30df5:	jl     30dff <compare_fs_by_poc_desc+0x1f>
   30df7:	setg   al
   30dfa:	movzx  eax,al
   30dfd:	neg    eax
   30dff:	ret    

0000000000030e00 <is_short_ref>:
   30e00:	endbr64 
   30e04:	mov    eax,DWORD PTR [rdi+0x18ec]
   30e0a:	test   eax,eax
   30e0c:	je     30e1b <is_short_ref+0x1b>
   30e0e:	mov    edx,DWORD PTR [rdi+0x18e8]
   30e14:	xor    eax,eax
   30e16:	test   edx,edx
   30e18:	sete   al
   30e1b:	ret    
   30e1c:	nop    DWORD PTR [rax+0x0]

0000000000030e20 <is_long_ref>:
   30e20:	endbr64 
   30e24:	mov    eax,DWORD PTR [rdi+0x18ec]
   30e2a:	test   eax,eax
   30e2c:	je     30e3b <is_long_ref+0x1b>
   30e2e:	mov    edx,DWORD PTR [rdi+0x18e8]
   30e34:	xor    eax,eax
   30e36:	test   edx,edx
   30e38:	setne  al
   30e3b:	ret    
   30e3c:	nop    DWORD PTR [rax+0x0]

0000000000030e40 <gen_pic_list_from_frame_list>:
   30e40:	push   r15
   30e42:	lea    rax,[rip+0xffffffffffffffb7]        # 30e00 <is_short_ref>
   30e49:	push   r14
   30e4b:	push   r13
   30e4d:	mov    r13,rsi
   30e50:	push   r12
   30e52:	lea    r12,[rip+0xffffffffffffffc7]        # 30e20 <is_long_ref>
   30e59:	push   rbp
   30e5a:	push   rbx
   30e5b:	mov    ebx,edx
   30e5d:	sub    rsp,0x18
   30e61:	test   r9d,r9d
   30e64:	mov    QWORD PTR [rsp],rcx
   30e68:	cmove  r12,rax
   30e6c:	mov    QWORD PTR [rsp+0x8],r8
   30e71:	cmp    edi,0x1
   30e74:	je     30f70 <gen_pic_list_from_frame_list+0x130>
   30e7a:	cmp    edi,0x2
   30e7d:	jne    30f05 <gen_pic_list_from_frame_list+0xc5>
   30e83:	xor    r15d,r15d
   30e86:	xor    ebp,ebp
   30e88:	test   edx,edx
   30e8a:	jle    30f05 <gen_pic_list_from_frame_list+0xc5>
   30e8c:	nop    DWORD PTR [rax+0x0]
   30e90:	movsxd rax,r15d
   30e93:	lea    r14,[r13+rax*8+0x0]
   30e98:	cmp    ebx,r15d
   30e9b:	jle    30ec7 <gen_pic_list_from_frame_list+0x87>
   30e9d:	nop    DWORD PTR [rax]
   30ea0:	mov    rax,QWORD PTR [r14]
   30ea3:	test   BYTE PTR [rax],0x2
   30ea6:	je     30eb7 <gen_pic_list_from_frame_list+0x77>
   30ea8:	mov    rdi,QWORD PTR [rax+0x38]
   30eac:	call   r12
   30eaf:	test   eax,eax
   30eb1:	jne    30f40 <gen_pic_list_from_frame_list+0x100>
   30eb7:	add    r15d,0x1
   30ebb:	add    r14,0x8
   30ebf:	cmp    ebx,r15d
   30ec2:	jne    30ea0 <gen_pic_list_from_frame_list+0x60>
   30ec4:	mov    r15d,ebx
   30ec7:	movsxd rax,ebp
   30eca:	lea    r14,[r13+rax*8+0x0]
   30ecf:	cmp    ebx,ebp
   30ed1:	jle    30ef8 <gen_pic_list_from_frame_list+0xb8>
   30ed3:	nop    DWORD PTR [rax+rax*1+0x0]
   30ed8:	mov    rax,QWORD PTR [r14]
   30edb:	test   BYTE PTR [rax],0x1
   30ede:	je     30eeb <gen_pic_list_from_frame_list+0xab>
   30ee0:	mov    rdi,QWORD PTR [rax+0x30]
   30ee4:	call   r12
   30ee7:	test   eax,eax
   30ee9:	jne    30f18 <gen_pic_list_from_frame_list+0xd8>
   30eeb:	add    ebp,0x1
   30eee:	add    r14,0x8
   30ef2:	cmp    ebx,ebp
   30ef4:	jne    30ed8 <gen_pic_list_from_frame_list+0x98>
   30ef6:	mov    ebp,ebx
   30ef8:	cmp    ebp,r15d
   30efb:	mov    eax,r15d
   30efe:	cmovle eax,ebp
   30f01:	cmp    eax,ebx
   30f03:	jl     30e90 <gen_pic_list_from_frame_list+0x50>
   30f05:	add    rsp,0x18
   30f09:	pop    rbx
   30f0a:	pop    rbp
   30f0b:	pop    r12
   30f0d:	pop    r13
   30f0f:	pop    r14
   30f11:	pop    r15
   30f13:	ret    
   30f14:	nop    DWORD PTR [rax+0x0]
   30f18:	mov    rdx,QWORD PTR [rsp+0x8]
   30f1d:	mov    rcx,QWORD PTR [r14]
   30f20:	add    ebp,0x1
   30f23:	mov    rdi,QWORD PTR [rsp]
   30f27:	mov    eax,DWORD PTR [rdx]
   30f29:	mov    rsi,QWORD PTR [rcx+0x30]
   30f2d:	movsxd rcx,eax
   30f30:	add    eax,0x1
   30f33:	mov    QWORD PTR [rdi+rcx*8],rsi
   30f37:	mov    DWORD PTR [rdx],eax
   30f39:	jmp    30ef8 <gen_pic_list_from_frame_list+0xb8>
   30f3b:	nop    DWORD PTR [rax+rax*1+0x0]
   30f40:	mov    rdx,QWORD PTR [rsp+0x8]
   30f45:	mov    rcx,QWORD PTR [r14]
   30f48:	add    r15d,0x1
   30f4c:	mov    rdi,QWORD PTR [rsp]
   30f50:	mov    eax,DWORD PTR [rdx]
   30f52:	mov    rsi,QWORD PTR [rcx+0x38]
   30f56:	movsxd rcx,eax
   30f59:	add    eax,0x1
   30f5c:	mov    QWORD PTR [rdi+rcx*8],rsi
   30f60:	mov    DWORD PTR [rdx],eax
   30f62:	jmp    30ec7 <gen_pic_list_from_frame_list+0x87>
   30f67:	nop    WORD PTR [rax+rax*1+0x0]
   30f70:	xor    r15d,r15d
   30f73:	xor    ebp,ebp
   30f75:	test   edx,edx
   30f77:	jle    30f05 <gen_pic_list_from_frame_list+0xc5>
   30f79:	nop    DWORD PTR [rax+0x0]
   30f80:	movsxd rax,ebp
   30f83:	lea    r14,[r13+rax*8+0x0]
   30f88:	cmp    ebx,ebp
   30f8a:	jle    30fb0 <gen_pic_list_from_frame_list+0x170>
   30f8c:	nop    DWORD PTR [rax+0x0]
   30f90:	mov    rax,QWORD PTR [r14]
   30f93:	test   BYTE PTR [rax],0x1
   30f96:	je     30fa3 <gen_pic_list_from_frame_list+0x163>
   30f98:	mov    rdi,QWORD PTR [rax+0x30]
   30f9c:	call   r12
   30f9f:	test   eax,eax
   30fa1:	jne    31000 <gen_pic_list_from_frame_list+0x1c0>
   30fa3:	add    ebp,0x1
   30fa6:	add    r14,0x8
   30faa:	cmp    ebx,ebp
   30fac:	jne    30f90 <gen_pic_list_from_frame_list+0x150>
   30fae:	mov    ebp,ebx
   30fb0:	movsxd rax,r15d
   30fb3:	lea    r14,[r13+rax*8+0x0]
   30fb8:	cmp    ebx,r15d
   30fbb:	jle    30fe3 <gen_pic_list_from_frame_list+0x1a3>
   30fbd:	nop    DWORD PTR [rax]
   30fc0:	mov    rax,QWORD PTR [r14]
   30fc3:	test   BYTE PTR [rax],0x2
   30fc6:	je     30fd3 <gen_pic_list_from_frame_list+0x193>
   30fc8:	mov    rdi,QWORD PTR [rax+0x38]
   30fcc:	call   r12
   30fcf:	test   eax,eax
   30fd1:	jne    31028 <gen_pic_list_from_frame_list+0x1e8>
   30fd3:	add    r15d,0x1
   30fd7:	add    r14,0x8
   30fdb:	cmp    ebx,r15d
   30fde:	jne    30fc0 <gen_pic_list_from_frame_list+0x180>
   30fe0:	mov    r15d,ebx
   30fe3:	cmp    r15d,ebp
   30fe6:	mov    eax,ebp
   30fe8:	cmovle eax,r15d
   30fec:	cmp    eax,ebx
   30fee:	jl     30f80 <gen_pic_list_from_frame_list+0x140>
   30ff0:	add    rsp,0x18
   30ff4:	pop    rbx
   30ff5:	pop    rbp
   30ff6:	pop    r12
   30ff8:	pop    r13
   30ffa:	pop    r14
   30ffc:	pop    r15
   30ffe:	ret    
   30fff:	nop
   31000:	mov    rdx,QWORD PTR [rsp+0x8]
   31005:	mov    rcx,QWORD PTR [r14]
   31008:	add    ebp,0x1
   3100b:	mov    rdi,QWORD PTR [rsp]
   3100f:	mov    eax,DWORD PTR [rdx]
   31011:	mov    rsi,QWORD PTR [rcx+0x30]
   31015:	movsxd rcx,eax
   31018:	add    eax,0x1
   3101b:	mov    QWORD PTR [rdi+rcx*8],rsi
   3101f:	mov    DWORD PTR [rdx],eax
   31021:	jmp    30fb0 <gen_pic_list_from_frame_list+0x170>
   31023:	nop    DWORD PTR [rax+rax*1+0x0]
   31028:	mov    rdx,QWORD PTR [rsp+0x8]
   3102d:	mov    rcx,QWORD PTR [r14]
   31030:	add    r15d,0x1
   31034:	mov    rdi,QWORD PTR [rsp]
   31038:	mov    eax,DWORD PTR [rdx]
   3103a:	mov    rsi,QWORD PTR [rcx+0x38]
   3103e:	movsxd rcx,eax
   31041:	add    eax,0x1
   31044:	mov    QWORD PTR [rdi+rcx*8],rsi
   31048:	mov    DWORD PTR [rdx],eax
   3104a:	jmp    30fe3 <gen_pic_list_from_frame_list+0x1a3>
   3104c:	nop    DWORD PTR [rax+0x0]

0000000000031050 <unmark_long_term_frame_for_reference_by_frame_idx>:
   31050:	mov    eax,DWORD PTR [rip+0x863ae]        # b7404 <dpb+0x24>
   31056:	mov    esi,edi
   31058:	test   eax,eax
   3105a:	je     3108d <unmark_long_term_frame_for_reference_by_frame_idx+0x3d>
   3105c:	xor    ecx,ecx
   3105e:	jmp    3106b <unmark_long_term_frame_for_reference_by_frame_idx+0x1b>
   31060:	add    ecx,0x1
   31063:	cmp    DWORD PTR [rip+0x8639b],ecx        # b7404 <dpb+0x24>
   31069:	jbe    3108d <unmark_long_term_frame_for_reference_by_frame_idx+0x3d>
   3106b:	mov    rdx,QWORD PTR [rip+0x8637e]        # b73f0 <dpb+0x10>
   31072:	mov    eax,ecx
   31074:	mov    rdi,QWORD PTR [rdx+rax*8]
   31078:	cmp    DWORD PTR [rdi+0x1c],esi
   3107b:	jne    31060 <unmark_long_term_frame_for_reference_by_frame_idx+0x10>
   3107d:	call   30c40 <unmark_for_long_term_reference>
   31082:	add    ecx,0x1
   31085:	cmp    DWORD PTR [rip+0x86379],ecx        # b7404 <dpb+0x24>
   3108b:	ja     3106b <unmark_long_term_frame_for_reference_by_frame_idx+0x1b>
   3108d:	ret    
   3108e:	xchg   ax,ax

0000000000031090 <unmark_long_term_field_for_reference_by_frame_idx>:
   31090:	mov    r11d,ecx
   31093:	mov    r9d,edi
   31096:	mov    ecx,DWORD PTR [rip+0x84dcc]        # b5e68 <log2_max_frame_num_minus4>
   3109c:	mov    r10d,edx
   3109f:	test   r8d,r8d
   310a2:	jns    310b1 <unmark_long_term_field_for_reference_by_frame_idx+0x21>
   310a4:	add    ecx,0x4
   310a7:	mov    eax,0x2
   310ac:	shl    eax,cl
   310ae:	add    r8d,eax
   310b1:	mov    eax,DWORD PTR [rip+0x8634d]        # b7404 <dpb+0x24>
   310b7:	test   eax,eax
   310b9:	je     31138 <unmark_long_term_field_for_reference_by_frame_idx+0xa8>
   310bb:	mov    eax,r8d
   310be:	xor    ecx,ecx
   310c0:	shr    eax,0x1f
   310c3:	add    r8d,eax
   310c6:	sar    r8d,1
   310c9:	jmp    310db <unmark_long_term_field_for_reference_by_frame_idx+0x4b>
   310cb:	nop    DWORD PTR [rax+rax*1+0x0]
   310d0:	add    ecx,0x1
   310d3:	cmp    DWORD PTR [rip+0x8632b],ecx        # b7404 <dpb+0x24>
   310d9:	jbe    31138 <unmark_long_term_field_for_reference_by_frame_idx+0xa8>
   310db:	mov    rdx,QWORD PTR [rip+0x8630e]        # b73f0 <dpb+0x10>
   310e2:	mov    eax,ecx
   310e4:	mov    rdi,QWORD PTR [rdx+rax*8]
   310e8:	cmp    DWORD PTR [rdi+0x1c],esi
   310eb:	jne    310d0 <unmark_long_term_field_for_reference_by_frame_idx+0x40>
   310ed:	cmp    r9d,0x1
   310f1:	je     31140 <unmark_long_term_field_for_reference_by_frame_idx+0xb0>
   310f3:	cmp    r9d,0x2
   310f7:	jne    310d0 <unmark_long_term_field_for_reference_by_frame_idx+0x40>
   310f9:	mov    eax,DWORD PTR [rdi+0x8]
   310fc:	cmp    eax,0x3
   310ff:	je     31128 <unmark_long_term_field_for_reference_by_frame_idx+0x98>
   31101:	cmp    eax,0x2
   31104:	je     31128 <unmark_long_term_field_for_reference_by_frame_idx+0x98>
   31106:	test   r10d,r10d
   31109:	je     31152 <unmark_long_term_field_for_reference_by_frame_idx+0xc2>
   3110b:	mov    rax,QWORD PTR [rip+0x86306]        # b7418 <dpb+0x38>
   31112:	test   rax,rax
   31115:	je     31128 <unmark_long_term_field_for_reference_by_frame_idx+0x98>
   31117:	cmp    rdi,rax
   3111a:	jne    31128 <unmark_long_term_field_for_reference_by_frame_idx+0x98>
   3111c:	cmp    DWORD PTR [rdi+0x14],r11d
   31120:	je     310d0 <unmark_long_term_field_for_reference_by_frame_idx+0x40>
   31122:	nop    WORD PTR [rax+rax*1+0x0]
   31128:	call   30c40 <unmark_for_long_term_reference>
   3112d:	add    ecx,0x1
   31130:	cmp    DWORD PTR [rip+0x862ce],ecx        # b7404 <dpb+0x24>
   31136:	ja     310db <unmark_long_term_field_for_reference_by_frame_idx+0x4b>
   31138:	ret    
   31139:	nop    DWORD PTR [rax+0x0]
   31140:	mov    eax,DWORD PTR [rdi+0x8]
   31143:	cmp    eax,0x3
   31146:	je     31128 <unmark_long_term_field_for_reference_by_frame_idx+0x98>
   31148:	cmp    eax,0x1
   3114b:	je     31128 <unmark_long_term_field_for_reference_by_frame_idx+0x98>
   3114d:	test   r10d,r10d
   31150:	jne    3110b <unmark_long_term_field_for_reference_by_frame_idx+0x7b>
   31152:	cmp    DWORD PTR [rdi+0x14],r8d
   31156:	je     310d0 <unmark_long_term_field_for_reference_by_frame_idx+0x40>
   3115c:	call   30c40 <unmark_for_long_term_reference>
   31161:	jmp    3112d <unmark_long_term_field_for_reference_by_frame_idx+0x9d>
   31163:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3116e:	xchg   ax,ax

0000000000031170 <get_smallest_poc>:
   31170:	push   rbp
   31171:	mov    rbp,rsi
   31174:	push   rbx
   31175:	mov    rbx,rdi
   31178:	sub    rsp,0x8
   3117c:	mov    esi,DWORD PTR [rip+0x8627a]        # b73fc <dpb+0x1c>
   31182:	test   esi,esi
   31184:	je     311e0 <get_smallest_poc+0x70>
   31186:	mov    DWORD PTR [rbp+0x0],0xffffffff
   3118d:	mov    DWORD PTR [rbx],0x7fffffff
   31193:	mov    ecx,DWORD PTR [rip+0x86263]        # b73fc <dpb+0x1c>
   31199:	test   ecx,ecx
   3119b:	je     311d6 <get_smallest_poc+0x66>
   3119d:	mov    rdi,QWORD PTR [rip+0x8623c]        # b73e0 <dpb>
   311a4:	mov    esi,0x7fffffff
   311a9:	xor    eax,eax
   311ab:	jmp    311b2 <get_smallest_poc+0x42>
   311ad:	nop    DWORD PTR [rax]
   311b0:	mov    esi,DWORD PTR [rbx]
   311b2:	mov    edx,eax
   311b4:	mov    rdx,QWORD PTR [rdi+rdx*8]
   311b8:	mov    ecx,DWORD PTR [rdx+0x24]
   311bb:	cmp    ecx,esi
   311bd:	jge    311cb <get_smallest_poc+0x5b>
   311bf:	mov    edx,DWORD PTR [rdx+0x20]
   311c2:	test   edx,edx
   311c4:	jne    311cb <get_smallest_poc+0x5b>
   311c6:	mov    DWORD PTR [rbx],ecx
   311c8:	mov    DWORD PTR [rbp+0x0],eax
   311cb:	add    eax,0x1
   311ce:	cmp    DWORD PTR [rip+0x86228],eax        # b73fc <dpb+0x1c>
   311d4:	ja     311b0 <get_smallest_poc+0x40>
   311d6:	add    rsp,0x8
   311da:	pop    rbx
   311db:	pop    rbp
   311dc:	ret    
   311dd:	nop    DWORD PTR [rax]
   311e0:	mov    esi,0x96
   311e5:	lea    rdi,[rip+0x44074]        # 75260 <MODTAB+0x40>
   311ec:	call   19180 <error>
   311f1:	jmp    31186 <get_smallest_poc+0x16>
   311f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   311fe:	xchg   ax,ax

0000000000031200 <unmark_for_reference>:
   31200:	mov    rcx,QWORD PTR [rip+0x84c69]        # b5e70 <active_sps>
   31207:	push   rbx
   31208:	mov    rbx,rdi
   3120b:	mov    edx,DWORD PTR [rdi]
   3120d:	mov    rax,QWORD PTR [rdi+0x28]
   31211:	mov    ecx,DWORD PTR [rcx+0x47c]
   31217:	test   ecx,ecx
   31219:	jne    312c0 <unmark_for_reference+0xc0>
   3121f:	test   dl,0x1
   31222:	je     31232 <unmark_for_reference+0x32>
   31224:	mov    rcx,QWORD PTR [rdi+0x30]
   31228:	mov    DWORD PTR [rcx+0x18ec],0x0
   31232:	test   dl,0x2
   31235:	je     31245 <unmark_for_reference+0x45>
   31237:	mov    rcx,QWORD PTR [rbx+0x38]
   3123b:	mov    DWORD PTR [rcx+0x18ec],0x0
   31245:	cmp    edx,0x3
   31248:	je     312d8 <unmark_for_reference+0xd8>
   3124e:	mov    rdi,QWORD PTR [rax+0x1938]
   31255:	mov    DWORD PTR [rbx+0x4],0x0
   3125c:	test   rdi,rdi
   3125f:	je     31275 <unmark_for_reference+0x75>
   31261:	call   37ea0 <free_mem2Dpel>
   31266:	mov    rax,QWORD PTR [rbx+0x28]
   3126a:	mov    QWORD PTR [rax+0x1938],0x0
   31275:	mov    rdi,QWORD PTR [rax+0x1930]
   3127c:	test   rdi,rdi
   3127f:	je     31295 <unmark_for_reference+0x95>
   31281:	call   37ea0 <free_mem2Dpel>
   31286:	mov    rax,QWORD PTR [rbx+0x28]
   3128a:	mov    QWORD PTR [rax+0x1930],0x0
   31295:	mov    rdi,QWORD PTR [rax+0x1928]
   3129c:	test   rdi,rdi
   3129f:	je     312b5 <unmark_for_reference+0xb5>
   312a1:	call   42d0 <free@plt>
   312a6:	mov    rax,QWORD PTR [rbx+0x28]
   312aa:	mov    QWORD PTR [rax+0x1928],0x0
   312b5:	pop    rbx
   312b6:	ret    
   312b7:	nop    WORD PTR [rax+rax*1+0x0]
   312c0:	cmp    edx,0x3
   312c3:	jne    3124e <unmark_for_reference+0x4e>
   312c5:	mov    DWORD PTR [rax+0x18ec],0x0
   312cf:	jmp    3124e <unmark_for_reference+0x4e>
   312d4:	nop    DWORD PTR [rax+0x0]
   312d8:	mov    rdx,QWORD PTR [rbx+0x30]
   312dc:	mov    DWORD PTR [rdx+0x18ec],0x0
   312e6:	mov    rdx,QWORD PTR [rbx+0x38]
   312ea:	mov    DWORD PTR [rdx+0x18ec],0x0
   312f4:	mov    DWORD PTR [rax+0x18ec],0x0
   312fe:	jmp    3124e <unmark_for_reference+0x4e>
   31303:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3130e:	xchg   ax,ax

0000000000031310 <is_used_for_reference>:
   31310:	mov    eax,DWORD PTR [rdi+0x4]
   31313:	test   eax,eax
   31315:	jne    31390 <is_used_for_reference+0x80>
   31317:	mov    edx,DWORD PTR [rdi]
   31319:	cmp    edx,0x3
   3131c:	je     31358 <is_used_for_reference+0x48>
   3131e:	mov    rcx,QWORD PTR [rip+0x84b4b]        # b5e70 <active_sps>
   31325:	mov    r9d,DWORD PTR [rcx+0x47c]
   3132c:	test   r9d,r9d
   3132f:	jne    3138a <is_used_for_reference+0x7a>
   31331:	mov    eax,edx
   31333:	and    eax,0x1
   31336:	jne    313a0 <is_used_for_reference+0x90>
   31338:	mov    eax,edx
   3133a:	and    eax,0x2
   3133d:	je     3138a <is_used_for_reference+0x7a>
   3133f:	mov    rax,QWORD PTR [rdi+0x38]
   31343:	mov    esi,DWORD PTR [rax+0x18ec]
   31349:	xor    eax,eax
   3134b:	test   esi,esi
   3134d:	setne  al
   31350:	ret    
   31351:	nop    DWORD PTR [rax+0x0]
   31358:	mov    rax,QWORD PTR [rdi+0x28]
   3135c:	mov    eax,DWORD PTR [rax+0x18ec]
   31362:	test   eax,eax
   31364:	jne    31390 <is_used_for_reference+0x80>
   31366:	mov    rdx,QWORD PTR [rip+0x84b03]        # b5e70 <active_sps>
   3136d:	mov    ecx,DWORD PTR [rdx+0x47c]
   31373:	test   ecx,ecx
   31375:	jne    3138a <is_used_for_reference+0x7a>
   31377:	mov    rdx,QWORD PTR [rdi+0x30]
   3137b:	mov    eax,0x1
   31380:	mov    edx,DWORD PTR [rdx+0x18ec]
   31386:	test   edx,edx
   31388:	je     3133f <is_used_for_reference+0x2f>
   3138a:	ret    
   3138b:	nop    DWORD PTR [rax+rax*1+0x0]
   31390:	mov    eax,0x1
   31395:	ret    
   31396:	nop    WORD PTR cs:[rax+rax*1+0x0]
   313a0:	mov    rcx,QWORD PTR [rdi+0x30]
   313a4:	mov    r8d,DWORD PTR [rcx+0x18ec]
   313ab:	test   r8d,r8d
   313ae:	je     31338 <is_used_for_reference+0x28>
   313b0:	ret    
   313b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   313bc:	nop    DWORD PTR [rax+0x0]

00000000000313c0 <dump_dpb>:
   313c0:	endbr64 
   313c4:	ret    
   313c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000313d0 <getDpbSize>:
   313d0:	endbr64 
   313d4:	mov    rdx,QWORD PTR [rip+0x84a95]        # b5e70 <active_sps>
   313db:	mov    eax,DWORD PTR [rdx+0x474]
   313e1:	mov    esi,DWORD PTR [rdx+0x478]
   313e7:	add    eax,0x1
   313ea:	lea    ecx,[rsi+0x1]
   313ed:	imul   eax,ecx
   313f0:	mov    ecx,DWORD PTR [rdx+0x47c]
   313f6:	test   ecx,ecx
   313f8:	jne    313fc <getDpbSize+0x2c>
   313fa:	add    eax,eax
   313fc:	lea    ecx,[rax+rax*2]
   313ff:	mov    eax,DWORD PTR [rdx+0x18]
   31402:	shl    ecx,0x7
   31405:	sub    eax,0xa
   31408:	cmp    eax,0x29
   3140b:	ja     31420 <getDpbSize+0x50>
   3140d:	lea    rdx,[rip+0x44448]        # 7585c <MODTAB+0x63c>
   31414:	movsxd rax,DWORD PTR [rdx+rax*4]
   31418:	add    rax,rdx
   3141b:	notrack jmp rax
   3141e:	xchg   ax,ax
   31420:	sub    rsp,0x8
   31424:	mov    esi,0x1f4
   31429:	lea    rdi,[rip+0x4432b]        # 7575b <MODTAB+0x53b>
   31430:	call   19180 <error>
   31435:	xor    eax,eax
   31437:	add    rsp,0x8
   3143b:	ret    
   3143c:	nop    DWORD PTR [rax+0x0]
   31440:	mov    eax,0xdec00
   31445:	cdq    
   31446:	idiv   ecx
   31448:	mov    edx,0x10
   3144d:	cmp    eax,0x10
   31450:	cmovg  eax,edx
   31453:	ret    
   31454:	nop    DWORD PTR [rax+0x0]
   31458:	mov    eax,0xc00000
   3145d:	cdq    
   3145e:	idiv   ecx
   31460:	mov    edx,0x10
   31465:	cmp    eax,0x10
   31468:	cmovg  eax,edx
   3146b:	ret    
   3146c:	nop    DWORD PTR [rax+0x0]
   31470:	mov    eax,0x2f7600
   31475:	cdq    
   31476:	idiv   ecx
   31478:	mov    edx,0x10
   3147d:	cmp    eax,0x10
   31480:	cmovg  eax,edx
   31483:	ret    
   31484:	nop    DWORD PTR [rax+0x0]
   31488:	mov    eax,0x697800
   3148d:	jmp    31445 <getDpbSize+0x75>
   3148f:	nop
   31490:	mov    eax,0x25200
   31495:	jmp    31445 <getDpbSize+0x75>
   31497:	nop    WORD PTR [rax+rax*1+0x0]
   314a0:	mov    eax,0x54600
   314a5:	jmp    31445 <getDpbSize+0x75>
   314a7:	nop    WORD PTR [rax+rax*1+0x0]
   314b0:	mov    eax,0x1bd800
   314b5:	jmp    31445 <getDpbSize+0x75>
   314b7:	nop    WORD PTR [rax+rax*1+0x0]
   314c0:	mov    eax,0x780000
   314c5:	jmp    31445 <getDpbSize+0x75>
   314ca:	nop    WORD PTR [rax+rax*1+0x0]
   314d0:	mov    eax,0x286e000
   314d5:	jmp    31445 <getDpbSize+0x75>
   314da:	nop    WORD PTR [rax+rax*1+0x0]
   314e0:	mov    eax,0x4380000
   314e5:	jmp    31445 <getDpbSize+0x75>
   314ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000000314f0 <alloc_frame_store>:
   314f0:	endbr64 
   314f4:	sub    rsp,0x18
   314f8:	mov    esi,0x40
   314fd:	mov    edi,0x1
   31502:	call   4400 <calloc@plt>
   31507:	test   rax,rax
   3150a:	je     3153f <alloc_frame_store+0x4f>
   3150c:	mov    QWORD PTR [rax],0x0
   31513:	mov    QWORD PTR [rax+0x8],0x0
   3151b:	mov    DWORD PTR [rax+0x20],0x0
   31522:	mov    QWORD PTR [rax+0x28],0x0
   3152a:	mov    QWORD PTR [rax+0x30],0x0
   31532:	mov    QWORD PTR [rax+0x38],0x0
   3153a:	add    rsp,0x18
   3153e:	ret    
   3153f:	lea    rdi,[rip+0x44225]        # 7576b <MODTAB+0x54b>
   31546:	mov    QWORD PTR [rsp+0x8],rax
   3154b:	call   38210 <no_mem_exit>
   31550:	mov    rax,QWORD PTR [rsp+0x8]
   31555:	jmp    3150c <alloc_frame_store+0x1c>
   31557:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031560 <alloc_storable_picture>:
   31560:	endbr64 
   31564:	push   r15
   31566:	push   r14
   31568:	mov    r14d,ecx
   3156b:	push   r13
   3156d:	push   r12
   3156f:	push   rbp
   31570:	mov    ebp,esi
   31572:	mov    esi,0x19b8
   31577:	push   rbx
   31578:	mov    ebx,edx
   3157a:	sub    rsp,0x18
   3157e:	mov    DWORD PTR [rsp+0xc],edi
   31582:	mov    edi,0x1
   31587:	mov    DWORD PTR [rsp+0x8],r8d
   3158c:	call   4400 <calloc@plt>
   31591:	mov    r12,rax
   31594:	test   rax,rax
   31597:	je     317c5 <alloc_storable_picture+0x265>
   3159d:	lea    rdi,[r12+0x1918]
   315a5:	mov    edx,ebp
   315a7:	mov    esi,ebx
   315a9:	call   38320 <get_mem2Dpel>
   315ae:	mov    rax,QWORD PTR [rip+0x57003]        # 885b8 <input>
   315b5:	mov    QWORD PTR [r12+0x1920],0x0
   315c1:	mov    QWORD PTR [r12+0x1930],0x0
   315cd:	mov    edi,DWORD PTR [rax+0x504]
   315d3:	mov    QWORD PTR [r12+0x1940],0x0
   315df:	test   edi,edi
   315e1:	jne    315f1 <alloc_storable_picture+0x91>
   315e3:	mov    esi,DWORD PTR [rax+0x508]
   315e9:	test   esi,esi
   315eb:	je     31790 <alloc_storable_picture+0x230>
   315f1:	mov    QWORD PTR [r12+0x1928],0x0
   315fd:	mov    QWORD PTR [r12+0x1938],0x0
   31609:	mov    rax,QWORD PTR [rip+0x56fa0]        # 885b0 <img>
   31610:	mov    edx,DWORD PTR [rax+0x11bfc]
   31616:	test   edx,edx
   31618:	jne    317a0 <alloc_storable_picture+0x240>
   3161e:	mov    edi,DWORD PTR [rax+0x11b24]
   31624:	mov    esi,0x4
   31629:	call   4400 <calloc@plt>
   3162e:	mov    QWORD PTR [r12+0x1948],rax
   31636:	test   rax,rax
   31639:	je     317d6 <alloc_storable_picture+0x276>
   3163f:	test   ebx,ebx
   31641:	lea    r10d,[rbx+0x3]
   31645:	lea    r9d,[rbp+0x3]
   31649:	mov    esi,0x2
   3164e:	cmovns r10d,ebx
   31652:	lea    rdi,[r12+0x1950]
   3165a:	sar    r10d,0x2
   3165e:	test   ebp,ebp
   31660:	cmovns r9d,ebp
   31664:	mov    r13d,r10d
   31667:	mov    ecx,r10d
   3166a:	sar    r9d,0x2
   3166e:	mov    r15d,r9d
   31671:	mov    edx,r9d
   31674:	call   389e0 <get_mem3Dshort>
   31679:	mov    ecx,r13d
   3167c:	mov    edx,r15d
   3167f:	mov    esi,0x6
   31684:	lea    rdi,[r12+0x1958]
   3168c:	call   387e0 <get_mem3Dint64>
   31691:	mov    ecx,r13d
   31694:	mov    edx,r15d
   31697:	mov    esi,0x6
   3169c:	lea    rdi,[r12+0x1960]
   316a4:	call   387e0 <get_mem3Dint64>
   316a9:	mov    ecx,r13d
   316ac:	mov    edx,r15d
   316af:	mov    esi,0x2
   316b4:	lea    rdi,[r12+0x1968]
   316bc:	mov    r8d,0x2
   316c2:	call   38a70 <get_mem4Dshort>
   316c7:	lea    rdi,[r12+0x1970]
   316cf:	mov    edx,r13d
   316d2:	mov    esi,r15d
   316d5:	call   38470 <get_mem2D>
   316da:	lea    rdi,[r12+0x1978]
   316e2:	mov    edx,r13d
   316e5:	mov    esi,r15d
   316e8:	call   38470 <get_mem2D>
   316ed:	mov    eax,DWORD PTR [rsp+0xc]
   316f1:	mov    DWORD PTR [r12+0x18f8],ebp
   316f9:	mov    DWORD PTR [r12+0x18fc],ebx
   31701:	mov    DWORD PTR [r12],eax
   31705:	mov    eax,DWORD PTR [rsp+0x8]
   31709:	mov    DWORD PTR [r12+0x1900],r14d
   31711:	mov    DWORD PTR [r12+0x1904],eax
   31719:	mov    rax,r12
   3171c:	mov    QWORD PTR [r12+0x18d8],0x0
   31728:	mov    QWORD PTR [r12+0x18e0],0x0
   31734:	mov    QWORD PTR [r12+0x18e8],0x0
   31740:	mov    QWORD PTR [r12+0x18f0],0x0
   3174c:	mov    QWORD PTR [r12+0x1980],0x0
   31758:	mov    QWORD PTR [r12+0x1988],0x0
   31764:	mov    QWORD PTR [r12+0x1990],0x0
   31770:	mov    QWORD PTR [r12+0x190c],0x0
   3177c:	add    rsp,0x18
   31780:	pop    rbx
   31781:	pop    rbp
   31782:	pop    r12
   31784:	pop    r13
   31786:	pop    r14
   31788:	pop    r15
   3178a:	ret    
   3178b:	nop    DWORD PTR [rax+rax*1+0x0]
   31790:	mov    ecx,DWORD PTR [rax+0x3c]
   31793:	test   ecx,ecx
   31795:	je     31609 <alloc_storable_picture+0xa9>
   3179b:	jmp    315f1 <alloc_storable_picture+0x91>
   317a0:	mov    edx,DWORD PTR [rsp+0x8]
   317a4:	lea    rdi,[r12+0x1940]
   317ac:	mov    ecx,r14d
   317af:	mov    esi,0x2
   317b4:	call   383e0 <get_mem3Dpel>
   317b9:	mov    rax,QWORD PTR [rip+0x56df0]        # 885b0 <img>
   317c0:	jmp    3161e <alloc_storable_picture+0xbe>
   317c5:	lea    rdi,[rip+0x43fb4]        # 75780 <MODTAB+0x560>
   317cc:	call   38210 <no_mem_exit>
   317d1:	jmp    3159d <alloc_storable_picture+0x3d>
   317d6:	lea    rdi,[rip+0x43ab3]        # 75290 <MODTAB+0x70>
   317dd:	call   38210 <no_mem_exit>
   317e2:	jmp    3163f <alloc_storable_picture+0xdf>
   317e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000317f0 <free_storable_picture>:
   317f0:	endbr64 
   317f4:	test   rdi,rdi
   317f7:	je     319b8 <free_storable_picture+0x1c8>
   317fd:	push   rbp
   317fe:	mov    rbp,rdi
   31801:	mov    rdi,QWORD PTR [rdi+0x1950]
   31808:	test   rdi,rdi
   3180b:	je     31822 <free_storable_picture+0x32>
   3180d:	mov    esi,0x2
   31812:	call   38b70 <free_mem3Dshort>
   31817:	mov    QWORD PTR [rbp+0x1950],0x0
   31822:	mov    rdi,QWORD PTR [rbp+0x1958]
   31829:	test   rdi,rdi
   3182c:	je     31843 <free_storable_picture+0x53>
   3182e:	mov    esi,0x6
   31833:	call   38140 <free_mem3Dint64>
   31838:	mov    QWORD PTR [rbp+0x1958],0x0
   31843:	mov    rdi,QWORD PTR [rbp+0x1960]
   3184a:	test   rdi,rdi
   3184d:	je     31864 <free_storable_picture+0x74>
   3184f:	mov    esi,0x6
   31854:	call   38140 <free_mem3Dint64>
   31859:	mov    QWORD PTR [rbp+0x1960],0x0
   31864:	mov    rdi,QWORD PTR [rbp+0x1968]
   3186b:	test   rdi,rdi
   3186e:	je     31896 <free_storable_picture+0xa6>
   31870:	mov    eax,DWORD PTR [rbp+0x18f8]
   31876:	mov    esi,0x2
   3187b:	test   eax,eax
   3187d:	lea    edx,[rax+0x3]
   31880:	cmovns edx,eax
   31883:	sar    edx,0x2
   31886:	call   38bd0 <free_mem4Dshort>
   3188b:	mov    QWORD PTR [rbp+0x1968],0x0
   31896:	mov    rdi,QWORD PTR [rbp+0x1970]
   3189d:	test   rdi,rdi
   318a0:	je     318b2 <free_storable_picture+0xc2>
   318a2:	call   37f60 <free_mem2D>
   318a7:	mov    QWORD PTR [rbp+0x1970],0x0
   318b2:	mov    rdi,QWORD PTR [rbp+0x1978]
   318b9:	test   rdi,rdi
   318bc:	je     318ce <free_storable_picture+0xde>
   318be:	call   37f60 <free_mem2D>
   318c3:	mov    QWORD PTR [rbp+0x1978],0x0
   318ce:	mov    rdi,QWORD PTR [rbp+0x1918]
   318d5:	test   rdi,rdi
   318d8:	je     318ea <free_storable_picture+0xfa>
   318da:	call   37ea0 <free_mem2Dpel>
   318df:	mov    QWORD PTR [rbp+0x1918],0x0
   318ea:	mov    rdi,QWORD PTR [rbp+0x1920]
   318f1:	test   rdi,rdi
   318f4:	je     31906 <free_storable_picture+0x116>
   318f6:	call   42d0 <free@plt>
   318fb:	mov    QWORD PTR [rbp+0x1920],0x0
   31906:	mov    rdi,QWORD PTR [rbp+0x1930]
   3190d:	test   rdi,rdi
   31910:	je     31922 <free_storable_picture+0x132>
   31912:	call   37ea0 <free_mem2Dpel>
   31917:	mov    QWORD PTR [rbp+0x1930],0x0
   31922:	mov    rdi,QWORD PTR [rbp+0x1940]
   31929:	test   rdi,rdi
   3192c:	je     31943 <free_storable_picture+0x153>
   3192e:	mov    esi,0x2
   31933:	call   37f00 <free_mem3Dpel>
   31938:	mov    QWORD PTR [rbp+0x1940],0x0
   31943:	mov    rax,QWORD PTR [rip+0x56c6e]        # 885b8 <input>
   3194a:	mov    ecx,DWORD PTR [rax+0x504]
   31950:	test   ecx,ecx
   31952:	je     319a0 <free_storable_picture+0x1b0>
   31954:	mov    rdi,QWORD PTR [rbp+0x1928]
   3195b:	test   rdi,rdi
   3195e:	je     31970 <free_storable_picture+0x180>
   31960:	call   42d0 <free@plt>
   31965:	mov    QWORD PTR [rbp+0x1928],0x0
   31970:	mov    rdi,QWORD PTR [rbp+0x1938]
   31977:	test   rdi,rdi
   3197a:	je     31981 <free_storable_picture+0x191>
   3197c:	call   37ea0 <free_mem2Dpel>
   31981:	mov    rdi,QWORD PTR [rbp+0x1948]
   31988:	test   rdi,rdi
   3198b:	je     31992 <free_storable_picture+0x1a2>
   3198d:	call   42d0 <free@plt>
   31992:	mov    rdi,rbp
   31995:	pop    rbp
   31996:	jmp    42d0 <free@plt>
   3199b:	nop    DWORD PTR [rax+rax*1+0x0]
   319a0:	mov    edx,DWORD PTR [rax+0x508]
   319a6:	test   edx,edx
   319a8:	jne    31954 <free_storable_picture+0x164>
   319aa:	mov    eax,DWORD PTR [rax+0x3c]
   319ad:	test   eax,eax
   319af:	je     31981 <free_storable_picture+0x191>
   319b1:	jmp    31954 <free_storable_picture+0x164>
   319b3:	nop    DWORD PTR [rax+rax*1+0x0]
   319b8:	ret    
   319b9:	nop    DWORD PTR [rax+0x0]

00000000000319c0 <free_frame_store>:
   319c0:	endbr64 
   319c4:	test   rdi,rdi
   319c7:	je     31a10 <free_frame_store+0x50>
   319c9:	push   rbp
   319ca:	mov    rbp,rdi
   319cd:	mov    rdi,QWORD PTR [rdi+0x28]
   319d1:	test   rdi,rdi
   319d4:	je     319e3 <free_frame_store+0x23>
   319d6:	call   317f0 <free_storable_picture>
   319db:	mov    QWORD PTR [rbp+0x28],0x0
   319e3:	mov    rdi,QWORD PTR [rbp+0x30]
   319e7:	test   rdi,rdi
   319ea:	je     319f9 <free_frame_store+0x39>
   319ec:	call   317f0 <free_storable_picture>
   319f1:	mov    QWORD PTR [rbp+0x30],0x0
   319f9:	mov    rdi,QWORD PTR [rbp+0x38]
   319fd:	test   rdi,rdi
   31a00:	je     31a07 <free_frame_store+0x47>
   31a02:	call   317f0 <free_storable_picture>
   31a07:	mov    rdi,rbp
   31a0a:	pop    rbp
   31a0b:	jmp    42d0 <free@plt>
   31a10:	ret    
   31a11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   31a1c:	nop    DWORD PTR [rax+0x0]

0000000000031a20 <free_dpb>:
   31a20:	endbr64 
   31a24:	push   rbp
   31a25:	push   rbx
   31a26:	sub    rsp,0x8
   31a2a:	mov    rdi,QWORD PTR [rip+0x859af]        # b73e0 <dpb>
   31a31:	test   rdi,rdi
   31a34:	je     31a7a <free_dpb+0x5a>
   31a36:	mov    eax,DWORD PTR [rip+0x859bc]        # b73f8 <dpb+0x18>
   31a3c:	test   eax,eax
   31a3e:	je     31a6a <free_dpb+0x4a>
   31a40:	xor    ebx,ebx
   31a42:	lea    rbp,[rip+0x85997]        # b73e0 <dpb>
   31a49:	nop    DWORD PTR [rax+0x0]
   31a50:	mov    eax,ebx
   31a52:	add    ebx,0x1
   31a55:	mov    rdi,QWORD PTR [rdi+rax*8]
   31a59:	call   319c0 <free_frame_store>
   31a5e:	cmp    DWORD PTR [rip+0x85994],ebx        # b73f8 <dpb+0x18>
   31a64:	mov    rdi,QWORD PTR [rbp+0x0]
   31a68:	ja     31a50 <free_dpb+0x30>
   31a6a:	call   42d0 <free@plt>
   31a6f:	mov    QWORD PTR [rip+0x85966],0x0        # b73e0 <dpb>
   31a7a:	mov    rdi,QWORD PTR [rip+0x85967]        # b73e8 <dpb+0x8>
   31a81:	test   rdi,rdi
   31a84:	je     31a8b <free_dpb+0x6b>
   31a86:	call   42d0 <free@plt>
   31a8b:	mov    rdi,QWORD PTR [rip+0x8595e]        # b73f0 <dpb+0x10>
   31a92:	test   rdi,rdi
   31a95:	je     31a9c <free_dpb+0x7c>
   31a97:	call   42d0 <free@plt>
   31a9c:	mov    DWORD PTR [rip+0x85962],0x80000000        # b7408 <dpb+0x28>
   31aa6:	lea    rbx,[rip+0x85973]        # b7420 <listX>
   31aad:	lea    rbp,[rbx+0x30]
   31ab1:	nop    DWORD PTR [rax+0x0]
   31ab8:	mov    rdi,QWORD PTR [rbx]
   31abb:	test   rdi,rdi
   31abe:	je     31acc <free_dpb+0xac>
   31ac0:	call   42d0 <free@plt>
   31ac5:	mov    QWORD PTR [rbx],0x0
   31acc:	add    rbx,0x8
   31ad0:	cmp    rbx,rbp
   31ad3:	jne    31ab8 <free_dpb+0x98>
   31ad5:	mov    DWORD PTR [rip+0x85931],0x0        # b7410 <dpb+0x30>
   31adf:	add    rsp,0x8
   31ae3:	pop    rbx
   31ae4:	pop    rbp
   31ae5:	ret    
   31ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000031af0 <init_dpb>:
   31af0:	endbr64 
   31af4:	push   r13
   31af6:	push   r12
   31af8:	push   rbp
   31af9:	push   rbx
   31afa:	sub    rsp,0x8
   31afe:	mov    eax,DWORD PTR [rip+0x8590c]        # b7410 <dpb+0x30>
   31b04:	test   eax,eax
   31b06:	jne    31ca1 <init_dpb+0x1b1>
   31b0c:	xor    eax,eax
   31b0e:	call   313d0 <getDpbSize>
   31b13:	mov    DWORD PTR [rip+0x858df],eax        # b73f8 <dpb+0x18>
   31b19:	mov    ebp,eax
   31b1b:	mov    rax,QWORD PTR [rip+0x56a96]        # 885b8 <input>
   31b22:	cmp    ebp,DWORD PTR [rax+0x24]
   31b25:	jb     31cad <init_dpb+0x1bd>
   31b2b:	mov    r12d,ebp
   31b2e:	mov    esi,0x8
   31b33:	mov    QWORD PTR [rip+0x858da],0x0        # b7418 <dpb+0x38>
   31b3e:	mov    DWORD PTR [rip+0x858b4],0x0        # b73fc <dpb+0x1c>
   31b48:	mov    rdi,r12
   31b4b:	mov    QWORD PTR [rip+0x858aa],0x0        # b7400 <dpb+0x20>
   31b56:	call   4400 <calloc@plt>
   31b5b:	mov    QWORD PTR [rip+0x8587e],rax        # b73e0 <dpb>
   31b62:	test   rax,rax
   31b65:	je     31cd6 <init_dpb+0x1e6>
   31b6b:	mov    esi,0x8
   31b70:	mov    rdi,r12
   31b73:	call   4400 <calloc@plt>
   31b78:	mov    QWORD PTR [rip+0x85869],rax        # b73e8 <dpb+0x8>
   31b7f:	test   rax,rax
   31b82:	je     31d08 <init_dpb+0x218>
   31b88:	mov    esi,0x8
   31b8d:	mov    rdi,r12
   31b90:	call   4400 <calloc@plt>
   31b95:	mov    QWORD PTR [rip+0x85854],rax        # b73f0 <dpb+0x10>
   31b9c:	test   rax,rax
   31b9f:	je     31cf1 <init_dpb+0x201>
   31ba5:	xor    ebx,ebx
   31ba7:	lea    r13,[rip+0x85832]        # b73e0 <dpb>
   31bae:	test   ebp,ebp
   31bb0:	je     31bf6 <init_dpb+0x106>
   31bb2:	nop    WORD PTR [rax+rax*1+0x0]
   31bb8:	mov    rax,QWORD PTR [r13+0x0]
   31bbc:	mov    ebp,ebx
   31bbe:	add    ebx,0x1
   31bc1:	lea    r12,[rax+rbp*8]
   31bc5:	xor    eax,eax
   31bc7:	call   314f0 <alloc_frame_store>
   31bcc:	cmp    DWORD PTR [rip+0x85826],ebx        # b73f8 <dpb+0x18>
   31bd2:	mov    QWORD PTR [r12],rax
   31bd6:	mov    rax,QWORD PTR [rip+0x8580b]        # b73e8 <dpb+0x8>
   31bdd:	mov    QWORD PTR [rax+rbp*8],0x0
   31be5:	mov    rax,QWORD PTR [rip+0x85804]        # b73f0 <dpb+0x10>
   31bec:	mov    QWORD PTR [rax+rbp*8],0x0
   31bf4:	ja     31bb8 <init_dpb+0xc8>
   31bf6:	lea    rbx,[rip+0x85823]        # b7420 <listX>
   31bfd:	lea    r13,[rip+0x43bd6]        # 757da <MODTAB+0x5ba>
   31c04:	mov    rbp,rbx
   31c07:	lea    r12,[rbx+0x30]
   31c0b:	nop    DWORD PTR [rax+rax*1+0x0]
   31c10:	mov    esi,0x8
   31c15:	mov    edi,0x21
   31c1a:	call   4400 <calloc@plt>
   31c1f:	mov    QWORD PTR [rbp+0x0],rax
   31c23:	test   rax,rax
   31c26:	je     31cc9 <init_dpb+0x1d9>
   31c2c:	add    rbp,0x8
   31c30:	cmp    r12,rbp
   31c33:	jne    31c10 <init_dpb+0x120>
   31c35:	xor    ecx,ecx
   31c37:	lea    rsi,[rip+0x85812]        # b7450 <listXsize>
   31c3e:	xchg   ax,ax
   31c40:	mov    rax,QWORD PTR [rbx+rcx*8]
   31c44:	lea    rdx,[rax+0x108]
   31c4b:	nop    DWORD PTR [rax+rax*1+0x0]
   31c50:	mov    QWORD PTR [rax],0x0
   31c57:	add    rax,0x8
   31c5b:	cmp    rax,rdx
   31c5e:	jne    31c50 <init_dpb+0x160>
   31c60:	mov    DWORD PTR [rsi+rcx*4],0x0
   31c67:	add    rcx,0x1
   31c6b:	cmp    rcx,0x6
   31c6f:	jne    31c40 <init_dpb+0x150>
   31c71:	mov    rax,QWORD PTR [rip+0x56938]        # 885b0 <img>
   31c78:	mov    DWORD PTR [rip+0x85786],0x80000000        # b7408 <dpb+0x28>
   31c82:	mov    DWORD PTR [rip+0x85784],0x1        # b7410 <dpb+0x30>
   31c8c:	mov    DWORD PTR [rax+0x11bc4],0x0
   31c96:	add    rsp,0x8
   31c9a:	pop    rbx
   31c9b:	pop    rbp
   31c9c:	pop    r12
   31c9e:	pop    r13
   31ca0:	ret    
   31ca1:	xor    eax,eax
   31ca3:	call   31a20 <free_dpb>
   31ca8:	jmp    31b0c <init_dpb+0x1c>
   31cad:	mov    esi,0x3e8
   31cb2:	lea    rdi,[rip+0x435ff]        # 752b8 <MODTAB+0x98>
   31cb9:	call   19180 <error>
   31cbe:	mov    ebp,DWORD PTR [rip+0x85734]        # b73f8 <dpb+0x18>
   31cc4:	jmp    31b2b <init_dpb+0x3b>
   31cc9:	mov    rdi,r13
   31ccc:	call   38210 <no_mem_exit>
   31cd1:	jmp    31c2c <init_dpb+0x13c>
   31cd6:	lea    rdi,[rip+0x43abd]        # 7579a <MODTAB+0x57a>
   31cdd:	call   38210 <no_mem_exit>
   31ce2:	mov    r12d,DWORD PTR [rip+0x8570f]        # b73f8 <dpb+0x18>
   31ce9:	mov    rbp,r12
   31cec:	jmp    31b6b <init_dpb+0x7b>
   31cf1:	lea    rdi,[rip+0x43aca]        # 757c2 <MODTAB+0x5a2>
   31cf8:	call   38210 <no_mem_exit>
   31cfd:	mov    ebp,DWORD PTR [rip+0x856f5]        # b73f8 <dpb+0x18>
   31d03:	jmp    31ba5 <init_dpb+0xb5>
   31d08:	lea    rdi,[rip+0x43a9d]        # 757ac <MODTAB+0x58c>
   31d0f:	call   38210 <no_mem_exit>
   31d14:	mov    r12d,DWORD PTR [rip+0x856dd]        # b73f8 <dpb+0x18>
   31d1b:	mov    rbp,r12
   31d1e:	jmp    31b88 <init_dpb+0x98>
   31d23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   31d2e:	xchg   ax,ax

0000000000031d30 <remove_frame_from_dpb>:
   31d30:	push   r12
   31d32:	movsxd r12,edi
   31d35:	mov    rdi,QWORD PTR [rip+0x856a4]        # b73e0 <dpb>
   31d3c:	push   rbp
   31d3d:	push   rbx
   31d3e:	mov    rbp,QWORD PTR [rdi+r12*8]
   31d42:	mov    rbx,r12
   31d45:	mov    eax,DWORD PTR [rbp+0x0]
   31d48:	cmp    eax,0x2
   31d4b:	je     31e40 <remove_frame_from_dpb+0x110>
   31d51:	jg     31df0 <remove_frame_from_dpb+0xc0>
   31d57:	mov    r10,rbp
   31d5a:	test   eax,eax
   31d5c:	je     31d88 <remove_frame_from_dpb+0x58>
   31d5e:	cmp    eax,0x1
   31d61:	jne    31e68 <remove_frame_from_dpb+0x138>
   31d67:	mov    rdi,QWORD PTR [rbp+0x30]
   31d6b:	call   317f0 <free_storable_picture>
   31d70:	mov    rdi,QWORD PTR [rip+0x85669]        # b73e0 <dpb>
   31d77:	mov    QWORD PTR [rbp+0x30],0x0
   31d7f:	mov    r10,QWORD PTR [rdi+r12*8]
   31d83:	nop    DWORD PTR [rax+rax*1+0x0]
   31d88:	mov    QWORD PTR [rbp+0x0],0x0
   31d90:	mov    QWORD PTR [rbp+0x8],0x0
   31d98:	mov    edx,DWORD PTR [rip+0x8565e]        # b73fc <dpb+0x1c>
   31d9e:	lea    r8d,[rdx-0x1]
   31da2:	cmp    ebx,r8d
   31da5:	jae    31dd9 <remove_frame_from_dpb+0xa9>
   31da7:	sub    edx,0x2
   31daa:	mov    r9d,ebx
   31dad:	lea    ecx,[rbx+0x1]
   31db0:	sub    edx,ebx
   31db2:	lea    rax,[rdi+r9*8]
   31db6:	sub    rcx,r9
   31db9:	lea    rdx,[r9+rdx*1+0x1]
   31dbe:	lea    rsi,[rdi+rdx*8]
   31dc2:	nop    WORD PTR [rax+rax*1+0x0]
   31dc8:	mov    rdx,QWORD PTR [rax+rcx*8]
   31dcc:	add    rax,0x8
   31dd0:	mov    QWORD PTR [rax-0x8],rdx
   31dd4:	cmp    rsi,rax
   31dd7:	jne    31dc8 <remove_frame_from_dpb+0x98>
   31dd9:	mov    eax,r8d
   31ddc:	mov    QWORD PTR [rdi+rax*8],r10
   31de0:	pop    rbx
   31de1:	mov    DWORD PTR [rip+0x85614],r8d        # b73fc <dpb+0x1c>
   31de8:	pop    rbp
   31de9:	pop    r12
   31deb:	ret    
   31dec:	nop    DWORD PTR [rax+0x0]
   31df0:	cmp    eax,0x3
   31df3:	jne    31e68 <remove_frame_from_dpb+0x138>
   31df5:	mov    rdi,QWORD PTR [rbp+0x28]
   31df9:	call   317f0 <free_storable_picture>
   31dfe:	mov    rdi,QWORD PTR [rbp+0x30]
   31e02:	call   317f0 <free_storable_picture>
   31e07:	mov    rdi,QWORD PTR [rbp+0x38]
   31e0b:	call   317f0 <free_storable_picture>
   31e10:	mov    rdi,QWORD PTR [rip+0x855c9]        # b73e0 <dpb>
   31e17:	mov    QWORD PTR [rbp+0x28],0x0
   31e1f:	mov    QWORD PTR [rbp+0x30],0x0
   31e27:	mov    QWORD PTR [rbp+0x38],0x0
   31e2f:	mov    r10,QWORD PTR [rdi+r12*8]
   31e33:	jmp    31d88 <remove_frame_from_dpb+0x58>
   31e38:	nop    DWORD PTR [rax+rax*1+0x0]
   31e40:	mov    rdi,QWORD PTR [rbp+0x38]
   31e44:	call   317f0 <free_storable_picture>
   31e49:	mov    rdi,QWORD PTR [rip+0x85590]        # b73e0 <dpb>
   31e50:	mov    QWORD PTR [rbp+0x38],0x0
   31e58:	mov    r10,QWORD PTR [rdi+r12*8]
   31e5c:	jmp    31d88 <remove_frame_from_dpb+0x58>
   31e61:	nop    DWORD PTR [rax+0x0]
   31e68:	lea    rdi,[rip+0x4397e]        # 757ed <MODTAB+0x5cd>
   31e6f:	mov    esi,0x1f4
   31e74:	call   19180 <error>
   31e79:	mov    rdi,QWORD PTR [rip+0x85560]        # b73e0 <dpb>
   31e80:	mov    r10,QWORD PTR [rdi+r12*8]
   31e84:	jmp    31d88 <remove_frame_from_dpb+0x58>
   31e89:	nop    DWORD PTR [rax+0x0]

0000000000031e90 <remove_unused_frame_from_dpb>:
   31e90:	mov    eax,DWORD PTR [rip+0x85566]        # b73fc <dpb+0x1c>
   31e96:	test   eax,eax
   31e98:	je     31ee7 <remove_unused_frame_from_dpb+0x57>
   31e9a:	push   rbx
   31e9b:	mov    r11,QWORD PTR [rip+0x8553e]        # b73e0 <dpb>
   31ea2:	lea    ebx,[rax-0x1]
   31ea5:	xor    r10d,r10d
   31ea8:	jmp    31eb3 <remove_unused_frame_from_dpb+0x23>
   31eaa:	nop    WORD PTR [rax+rax*1+0x0]
   31eb0:	mov    r10,rax
   31eb3:	mov    rdi,QWORD PTR [r11+r10*8]
   31eb7:	mov    eax,DWORD PTR [rdi+0x20]
   31eba:	test   eax,eax
   31ebc:	je     31ec7 <remove_unused_frame_from_dpb+0x37>
   31ebe:	call   31310 <is_used_for_reference>
   31ec3:	test   eax,eax
   31ec5:	je     31ed8 <remove_unused_frame_from_dpb+0x48>
   31ec7:	lea    rax,[r10+0x1]
   31ecb:	cmp    rbx,r10
   31ece:	jne    31eb0 <remove_unused_frame_from_dpb+0x20>
   31ed0:	xor    eax,eax
   31ed2:	pop    rbx
   31ed3:	ret    
   31ed4:	nop    DWORD PTR [rax+0x0]
   31ed8:	mov    edi,r10d
   31edb:	call   31d30 <remove_frame_from_dpb>
   31ee0:	mov    eax,0x1
   31ee5:	pop    rbx
   31ee6:	ret    
   31ee7:	xor    eax,eax
   31ee9:	ret    
   31eea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031ef0 <output_one_frame_from_dpb>:
   31ef0:	sub    rsp,0x18
   31ef4:	mov    rax,QWORD PTR fs:0x28
   31efd:	mov    QWORD PTR [rsp+0x8],rax
   31f02:	xor    eax,eax
   31f04:	mov    eax,DWORD PTR [rip+0x854f2]        # b73fc <dpb+0x1c>
   31f0a:	test   eax,eax
   31f0c:	je     31f90 <output_one_frame_from_dpb+0xa0>
   31f12:	lea    rsi,[rsp+0x4]
   31f17:	mov    rdi,rsp
   31f1a:	call   31170 <get_smallest_poc>
   31f1f:	cmp    DWORD PTR [rsp+0x4],0xffffffff
   31f24:	je     31fe0 <output_one_frame_from_dpb+0xf0>
   31f2a:	mov    esi,DWORD PTR [rip+0x847c4]        # b66f4 <p_dec>
   31f30:	cmp    esi,0xffffffff
   31f33:	je     31f4a <output_one_frame_from_dpb+0x5a>
   31f35:	movsxd rdx,DWORD PTR [rsp+0x4]
   31f3a:	mov    rax,QWORD PTR [rip+0x8549f]        # b73e0 <dpb>
   31f41:	mov    rdi,QWORD PTR [rax+rdx*8]
   31f45:	call   470f0 <write_stored_frame>
   31f4a:	mov    eax,DWORD PTR [rsp]
   31f4d:	cmp    DWORD PTR [rip+0x854b5],eax        # b7408 <dpb+0x28>
   31f53:	jge    31fc0 <output_one_frame_from_dpb+0xd0>
   31f55:	movsxd rdx,DWORD PTR [rsp+0x4]
   31f5a:	mov    DWORD PTR [rip+0x854a8],eax        # b7408 <dpb+0x28>
   31f60:	mov    rax,QWORD PTR [rip+0x85479]        # b73e0 <dpb>
   31f67:	mov    r10,rdx
   31f6a:	mov    rdi,QWORD PTR [rax+rdx*8]
   31f6e:	call   31310 <is_used_for_reference>
   31f73:	test   eax,eax
   31f75:	je     31fb0 <output_one_frame_from_dpb+0xc0>
   31f77:	mov    rax,QWORD PTR [rsp+0x8]
   31f7c:	xor    rax,QWORD PTR fs:0x28
   31f85:	jne    31ff6 <output_one_frame_from_dpb+0x106>
   31f87:	add    rsp,0x18
   31f8b:	ret    
   31f8c:	nop    DWORD PTR [rax+0x0]
   31f90:	mov    esi,0x96
   31f95:	lea    rdi,[rip+0x4338c]        # 75328 <MODTAB+0x108>
   31f9c:	call   19180 <error>
   31fa1:	jmp    31f12 <output_one_frame_from_dpb+0x22>
   31fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31fb0:	mov    edi,r10d
   31fb3:	call   31d30 <remove_frame_from_dpb>
   31fb8:	jmp    31f77 <output_one_frame_from_dpb+0x87>
   31fba:	nop    WORD PTR [rax+rax*1+0x0]
   31fc0:	mov    esi,0x96
   31fc5:	lea    rdi,[rip+0x4339c]        # 75368 <MODTAB+0x148>
   31fcc:	call   19180 <error>
   31fd1:	mov    eax,DWORD PTR [rsp]
   31fd4:	jmp    31f55 <output_one_frame_from_dpb+0x65>
   31fd9:	nop    DWORD PTR [rax+0x0]
   31fe0:	mov    esi,0x96
   31fe5:	lea    rdi,[rip+0x4335c]        # 75348 <MODTAB+0x128>
   31fec:	call   19180 <error>
   31ff1:	jmp    31f2a <output_one_frame_from_dpb+0x3a>
   31ff6:	call   4390 <__stack_chk_fail@plt>
   31ffb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000032000 <init_lists>:
   32000:	endbr64 
   32004:	push   r15
   32006:	mov    r9d,0x1
   3200c:	push   r14
   3200e:	push   r13
   32010:	push   r12
   32012:	push   rbp
   32013:	mov    ebp,esi
   32015:	push   rbx
   32016:	sub    rsp,0x28
   3201a:	mov    eax,DWORD PTR [rip+0x83e48]        # b5e68 <log2_max_frame_num_minus4>
   32020:	mov    r10d,DWORD PTR [rip+0x853d9]        # b7400 <dpb+0x20>
   32027:	lea    ecx,[rax+0x4]
   3202a:	shl    r9d,cl
   3202d:	test   esi,esi
   3202f:	jne    32188 <init_lists+0x188>
   32035:	test   r10d,r10d
   32038:	je     320c0 <init_lists+0xc0>
   3203e:	mov    rdx,QWORD PTR [rip+0x853a3]        # b73e8 <dpb+0x8>
   32045:	lea    ecx,[r10-0x1]
   32049:	mov    r11,QWORD PTR [rip+0x56560]        # 885b0 <img>
   32050:	lea    rax,[rdx+0x8]
   32054:	lea    rcx,[rax+rcx*8]
   32058:	jmp    3206c <init_lists+0x6c>
   3205a:	nop    WORD PTR [rax+rax*1+0x0]
   32060:	mov    rdx,rax
   32063:	cmp    rcx,rax
   32066:	je     320c0 <init_lists+0xc0>
   32068:	add    rax,0x8
   3206c:	mov    rdx,QWORD PTR [rdx]
   3206f:	cmp    DWORD PTR [rdx],0x3
   32072:	jne    32060 <init_lists+0x60>
   32074:	mov    rsi,QWORD PTR [rdx+0x28]
   32078:	mov    r12d,DWORD PTR [rsi+0x18ec]
   3207f:	test   r12d,r12d
   32082:	je     32060 <init_lists+0x60>
   32084:	mov    ebx,DWORD PTR [rsi+0x18e8]
   3208a:	test   ebx,ebx
   3208c:	jne    32060 <init_lists+0x60>
   3208e:	mov    r8d,DWORD PTR [rdx+0x14]
   32092:	cmp    r8d,DWORD PTR [r11+0x11b10]
   32099:	jbe    3209e <init_lists+0x9e>
   3209b:	sub    r8d,r9d
   3209e:	mov    DWORD PTR [rdx+0x18],r8d
   320a2:	mov    rdx,rax
   320a5:	mov    DWORD PTR [rsi+0x18dc],r8d
   320ac:	mov    DWORD PTR [rsi+0x14],0x0
   320b3:	cmp    rcx,rax
   320b6:	jne    32068 <init_lists+0x68>
   320b8:	nop    DWORD PTR [rax+rax*1+0x0]
   320c0:	xor    r12d,r12d
   320c3:	xor    ebx,ebx
   320c5:	lea    eax,[rdi-0x2]
   320c8:	and    eax,0xfffffffd
   320cb:	je     3221b <init_lists+0x21b>
   320d1:	test   edi,edi
   320d3:	je     32238 <init_lists+0x238>
   320d9:	cmp    edi,0x3
   320dc:	je     32238 <init_lists+0x238>
   320e2:	test   ebp,ebp
   320e4:	jne    32860 <init_lists+0x860>
   320ea:	mov    r8,QWORD PTR [rip+0x8532f]        # b7420 <listX>
   320f1:	test   r10d,r10d
   320f4:	je     32447 <init_lists+0x447>
   320fa:	mov    rdx,QWORD PTR [rip+0x852e7]        # b73e8 <dpb+0x8>
   32101:	lea    ecx,[r10-0x1]
   32105:	mov    r9,QWORD PTR [rip+0x564a4]        # 885b0 <img>
   3210c:	xor    ebx,ebx
   3210e:	lea    rax,[rdx+0x8]
   32112:	lea    rdi,[rax+rcx*8]
   32116:	xor    ecx,ecx
   32118:	jmp    32130 <init_lists+0x130>
   3211a:	nop    WORD PTR [rax+rax*1+0x0]
   32120:	mov    rdx,rax
   32123:	cmp    rdi,rax
   32126:	je     32450 <init_lists+0x450>
   3212c:	add    rax,0x8
   32130:	mov    rdx,QWORD PTR [rdx]
   32133:	mov    rsi,rcx
   32136:	lea    r13,[rcx*8+0x0]
   3213e:	cmp    DWORD PTR [rdx],0x3
   32141:	jne    32120 <init_lists+0x120>
   32143:	mov    rdx,QWORD PTR [rdx+0x28]
   32147:	mov    r11d,DWORD PTR [rdx+0x18ec]
   3214e:	test   r11d,r11d
   32151:	je     32120 <init_lists+0x120>
   32153:	mov    r10d,DWORD PTR [rdx+0x18e8]
   3215a:	test   r10d,r10d
   3215d:	jne    32120 <init_lists+0x120>
   3215f:	mov    r15d,DWORD PTR [rdx+0x4]
   32163:	cmp    DWORD PTR [r9+0x11b08],r15d
   3216a:	jle    32120 <init_lists+0x120>
   3216c:	mov    DWORD PTR [rdx+0x14],ebx
   3216f:	add    ebx,0x1
   32172:	movsxd rcx,ebx
   32175:	mov    QWORD PTR [r8+r13*1],rdx
   32179:	add    r13,0x8
   3217d:	mov    rsi,rcx
   32180:	jmp    32120 <init_lists+0x120>
   32182:	nop    WORD PTR [rax+rax*1+0x0]
   32188:	xor    r12d,r12d
   3218b:	cmp    esi,0x1
   3218e:	sete   bl
   32191:	setne  r12b
   32195:	movzx  ebx,bl
   32198:	test   r10d,r10d
   3219b:	je     320c5 <init_lists+0xc5>
   321a1:	mov    rdx,QWORD PTR [rip+0x85240]        # b73e8 <dpb+0x8>
   321a8:	lea    ecx,[r10-0x1]
   321ac:	mov    r11,QWORD PTR [rip+0x563fd]        # 885b0 <img>
   321b3:	lea    rax,[rdx+0x8]
   321b7:	lea    r8,[rax+rcx*8]
   321bb:	jmp    321c4 <init_lists+0x1c4>
   321bd:	nop    DWORD PTR [rax]
   321c0:	add    rax,0x8
   321c4:	mov    rdx,QWORD PTR [rdx]
   321c7:	mov    ecx,DWORD PTR [rdx+0x4]
   321ca:	test   ecx,ecx
   321cc:	je     32207 <init_lists+0x207>
   321ce:	mov    esi,DWORD PTR [rdx+0x14]
   321d1:	cmp    esi,DWORD PTR [r11+0x11b10]
   321d8:	jbe    321dd <init_lists+0x1dd>
   321da:	sub    esi,r9d
   321dd:	mov    DWORD PTR [rdx+0x18],esi
   321e0:	test   cl,0x1
   321e3:	je     321f4 <init_lists+0x1f4>
   321e5:	mov    r13,QWORD PTR [rdx+0x30]
   321e9:	lea    r14d,[rbx+rsi*2]
   321ed:	mov    DWORD PTR [r13+0x18dc],r14d
   321f4:	and    ecx,0x2
   321f7:	je     32207 <init_lists+0x207>
   321f9:	mov    rdx,QWORD PTR [rdx+0x38]
   321fd:	lea    ecx,[r12+rsi*2]
   32201:	mov    DWORD PTR [rdx+0x18dc],ecx
   32207:	mov    rdx,rax
   3220a:	cmp    r8,rax
   3220d:	jne    321c0 <init_lists+0x1c0>
   3220f:	lea    eax,[rdi-0x2]
   32212:	and    eax,0xfffffffd
   32215:	jne    320d1 <init_lists+0xd1>
   3221b:	mov    QWORD PTR [rip+0x8522a],0x0        # b7450 <listXsize>
   32226:	add    rsp,0x28
   3222a:	pop    rbx
   3222b:	pop    rbp
   3222c:	pop    r12
   3222e:	pop    r13
   32230:	pop    r14
   32232:	pop    r15
   32234:	ret    
   32235:	nop    DWORD PTR [rax]
   32238:	test   ebp,ebp
   3223a:	jne    326c8 <init_lists+0x6c8>
   32240:	mov    r8,QWORD PTR [rip+0x851d9]        # b7420 <listX>
   32247:	test   r10d,r10d
   3224a:	je     32b9c <init_lists+0xb9c>
   32250:	mov    rdx,QWORD PTR [rip+0x85191]        # b73e8 <dpb+0x8>
   32257:	lea    ecx,[r10-0x1]
   3225b:	xor    r12d,r12d
   3225e:	lea    rax,[rdx+0x8]
   32262:	lea    rdi,[rax+rcx*8]
   32266:	xor    ecx,ecx
   32268:	jmp    3227c <init_lists+0x27c>
   3226a:	nop    WORD PTR [rax+rax*1+0x0]
   32270:	mov    rdx,rax
   32273:	cmp    rdi,rax
   32276:	je     322c8 <init_lists+0x2c8>
   32278:	add    rax,0x8
   3227c:	mov    rdx,QWORD PTR [rdx]
   3227f:	mov    rsi,rcx
   32282:	lea    rbp,[rcx*8+0x0]
   3228a:	cmp    DWORD PTR [rdx],0x3
   3228d:	jne    32270 <init_lists+0x270>
   3228f:	mov    rdx,QWORD PTR [rdx+0x28]
   32293:	mov    r11d,DWORD PTR [rdx+0x18ec]
   3229a:	test   r11d,r11d
   3229d:	je     32270 <init_lists+0x270>
   3229f:	mov    r10d,DWORD PTR [rdx+0x18e8]
   322a6:	test   r10d,r10d
   322a9:	jne    32270 <init_lists+0x270>
   322ab:	add    r12d,0x1
   322af:	mov    QWORD PTR [r8+rbp*1],rdx
   322b3:	add    rbp,0x8
   322b7:	mov    rdx,rax
   322ba:	movsxd rcx,r12d
   322bd:	mov    rsi,rcx
   322c0:	cmp    rdi,rax
   322c3:	jne    32278 <init_lists+0x278>
   322c5:	nop    DWORD PTR [rax]
   322c8:	mov    rdi,r8
   322cb:	lea    rcx,[rip+0xffffffffffffea0e]        # 30ce0 <compare_pic_by_pic_num_desc>
   322d2:	mov    edx,0x8
   322d7:	call   4330 <qsort@plt>
   322dc:	mov    eax,DWORD PTR [rip+0x85122]        # b7404 <dpb+0x24>
   322e2:	mov    DWORD PTR [rip+0x85167],r12d        # b7450 <listXsize>
   322e9:	mov    rdi,QWORD PTR [rip+0x85130]        # b7420 <listX>
   322f0:	test   eax,eax
   322f2:	je     32ba8 <init_lists+0xba8>
   322f8:	mov    rdx,QWORD PTR [rip+0x850f1]        # b73f0 <dpb+0x10>
   322ff:	lea    ecx,[rax-0x1]
   32302:	mov    ebx,r12d
   32305:	lea    rax,[rdx+0x8]
   32309:	lea    rcx,[rax+rcx*8]
   3230d:	jmp    3231c <init_lists+0x31c>
   3230f:	nop
   32310:	mov    rdx,rax
   32313:	cmp    rcx,rax
   32316:	je     32358 <init_lists+0x358>
   32318:	add    rax,0x8
   3231c:	mov    rdx,QWORD PTR [rdx]
   3231f:	cmp    DWORD PTR [rdx],0x3
   32322:	jne    32310 <init_lists+0x310>
   32324:	mov    rdx,QWORD PTR [rdx+0x28]
   32328:	mov    r9d,DWORD PTR [rdx+0x18e8]
   3232f:	test   r9d,r9d
   32332:	je     32310 <init_lists+0x310>
   32334:	mov    esi,DWORD PTR [rdx+0x18e4]
   3233a:	mov    DWORD PTR [rdx+0x14],ebx
   3233d:	mov    DWORD PTR [rdx+0x18e0],esi
   32343:	movsxd rsi,ebx
   32346:	add    ebx,0x1
   32349:	mov    QWORD PTR [rdi+rsi*8],rdx
   3234d:	mov    rdx,rax
   32350:	cmp    rcx,rax
   32353:	jne    32318 <init_lists+0x318>
   32355:	nop    DWORD PTR [rax]
   32358:	mov    esi,ebx
   3235a:	sub    esi,r12d
   3235d:	movsxd rsi,esi
   32360:	add    rdi,rbp
   32363:	lea    rcx,[rip+0xffffffffffffe9a6]        # 30d10 <compare_pic_by_lt_pic_num_asc>
   3236a:	mov    edx,0x8
   3236f:	call   4330 <qsort@plt>
   32374:	mov    DWORD PTR [rip+0x850d6],ebx        # b7450 <listXsize>
   3237a:	mov    DWORD PTR [rip+0x850d0],0x0        # b7454 <listXsize+0x4>
   32384:	test   ebx,ebx
   32386:	sete   al
   32389:	xor    ecx,ecx
   3238b:	cmp    ebx,0x1
   3238e:	jle    32398 <init_lists+0x398>
   32390:	test   al,al
   32392:	jne    32670 <init_lists+0x670>
   32398:	mov    rax,QWORD PTR [rip+0x56211]        # 885b0 <img>
   3239f:	cmp    DWORD PTR [rax+0x11940],ebx
   323a5:	cmovle ebx,DWORD PTR [rax+0x11940]
   323ac:	cmp    DWORD PTR [rax+0x11944],ecx
   323b2:	cmovle ecx,DWORD PTR [rax+0x11944]
   323b9:	mov    DWORD PTR [rip+0x85091],ebx        # b7450 <listXsize>
   323bf:	mov    DWORD PTR [rip+0x8508f],ecx        # b7454 <listXsize+0x4>
   323c5:	cmp    ebx,0x20
   323c8:	ja     32400 <init_lists+0x400>
   323ca:	mov    edx,0x20
   323cf:	mov    rsi,QWORD PTR [rip+0x8504a]        # b7420 <listX>
   323d6:	mov    edi,ebx
   323d8:	sub    edx,ebx
   323da:	add    rdx,rdi
   323dd:	lea    rax,[rsi+rdi*8]
   323e1:	lea    rdx,[rsi+rdx*8+0x8]
   323e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   323f0:	mov    QWORD PTR [rax],0x0
   323f7:	add    rax,0x8
   323fb:	cmp    rdx,rax
   323fe:	jne    323f0 <init_lists+0x3f0>
   32400:	cmp    ecx,0x20
   32403:	ja     32226 <init_lists+0x226>
   32409:	mov    edx,0x20
   3240e:	mov    rsi,QWORD PTR [rip+0x85013]        # b7428 <listX+0x8>
   32415:	mov    edi,ecx
   32417:	sub    edx,ecx
   32419:	add    rdx,rdi
   3241c:	lea    rax,[rsi+rdi*8]
   32420:	lea    rdx,[rsi+rdx*8+0x8]
   32425:	nop    DWORD PTR [rax]
   32428:	mov    QWORD PTR [rax],0x0
   3242f:	add    rax,0x8
   32433:	cmp    rdx,rax
   32436:	jne    32428 <init_lists+0x428>
   32438:	add    rsp,0x28
   3243c:	pop    rbx
   3243d:	pop    rbp
   3243e:	pop    r12
   32440:	pop    r13
   32442:	pop    r14
   32444:	pop    r15
   32446:	ret    
   32447:	xor    r13d,r13d
   3244a:	xor    esi,esi
   3244c:	xor    ebx,ebx
   3244e:	xchg   ax,ax
   32450:	lea    rcx,[rip+0xffffffffffffe949]        # 30da0 <compare_pic_by_poc_desc>
   32457:	mov    edx,0x8
   3245c:	mov    rdi,r8
   3245f:	call   4330 <qsort@plt>
   32464:	mov    eax,DWORD PTR [rip+0x84f96]        # b7400 <dpb+0x20>
   3246a:	test   eax,eax
   3246c:	je     32bb2 <init_lists+0xbb2>
   32472:	mov    rdx,QWORD PTR [rip+0x84f6f]        # b73e8 <dpb+0x8>
   32479:	lea    ecx,[rax-0x1]
   3247c:	mov    r8,QWORD PTR [rip+0x5612d]        # 885b0 <img>
   32483:	mov    ebp,ebx
   32485:	mov    rdi,QWORD PTR [rip+0x84f94]        # b7420 <listX>
   3248c:	lea    rax,[rdx+0x8]
   32490:	lea    rsi,[rax+rcx*8]
   32494:	jmp    324ac <init_lists+0x4ac>
   32496:	nop    WORD PTR cs:[rax+rax*1+0x0]
   324a0:	mov    rdx,rax
   324a3:	cmp    rsi,rax
   324a6:	je     32500 <init_lists+0x500>
   324a8:	add    rax,0x8
   324ac:	mov    rdx,QWORD PTR [rdx]
   324af:	movsxd rcx,ebp
   324b2:	lea    r12,[rcx*8+0x0]
   324ba:	cmp    DWORD PTR [rdx],0x3
   324bd:	jne    324a0 <init_lists+0x4a0>
   324bf:	mov    rdx,QWORD PTR [rdx+0x28]
   324c3:	mov    r15d,DWORD PTR [rdx+0x18ec]
   324ca:	test   r15d,r15d
   324cd:	je     324a0 <init_lists+0x4a0>
   324cf:	mov    r14d,DWORD PTR [rdx+0x18e8]
   324d6:	test   r14d,r14d
   324d9:	jne    324a0 <init_lists+0x4a0>
   324db:	mov    r15d,DWORD PTR [rdx+0x4]
   324df:	cmp    DWORD PTR [r8+0x11b08],r15d
   324e6:	jge    324a0 <init_lists+0x4a0>
   324e8:	mov    DWORD PTR [rdx+0x14],ebp
   324eb:	add    r12,0x8
   324ef:	add    ebp,0x1
   324f2:	mov    QWORD PTR [rdi+rcx*8],rdx
   324f6:	jmp    324a0 <init_lists+0x4a0>
   324f8:	nop    DWORD PTR [rax+rax*1+0x0]
   32500:	mov    r14d,ebp
   32503:	sub    r14d,ebx
   32506:	movsxd rsi,r14d
   32509:	add    rdi,r13
   3250c:	lea    rcx,[rip+0xffffffffffffe86d]        # 30d80 <compare_pic_by_poc_asc>
   32513:	mov    edx,0x8
   32518:	call   4330 <qsort@plt>
   3251d:	mov    rdi,QWORD PTR [rip+0x84efc]        # b7420 <listX>
   32524:	test   ebx,ebx
   32526:	je     32554 <init_lists+0x554>
   32528:	mov    rax,QWORD PTR [rip+0x84ef9]        # b7428 <listX+0x8>
   3252f:	movsxd r14,r14d
   32532:	lea    esi,[rbx-0x1]
   32535:	lea    rcx,[rax+r14*8]
   32539:	xor    eax,eax
   3253b:	nop    DWORD PTR [rax+rax*1+0x0]
   32540:	mov    rdx,QWORD PTR [rdi+rax*8]
   32544:	mov    QWORD PTR [rcx+rax*8],rdx
   32548:	mov    rdx,rax
   3254b:	add    rax,0x1
   3254f:	cmp    rsi,rdx
   32552:	jne    32540 <init_lists+0x540>
   32554:	cmp    ebx,ebp
   32556:	jge    32580 <init_lists+0x580>
   32558:	movsxd rax,ebx
   3255b:	mov    rdx,QWORD PTR [rip+0x84ec6]        # b7428 <listX+0x8>
   32562:	mov    rcx,rax
   32565:	neg    rcx
   32568:	lea    rcx,[rdx+rcx*8]
   3256c:	nop    DWORD PTR [rax+0x0]
   32570:	mov    rdx,QWORD PTR [rdi+rax*8]
   32574:	mov    QWORD PTR [rcx+rax*8],rdx
   32578:	add    rax,0x1
   3257c:	cmp    ebp,eax
   3257e:	jg     32570 <init_lists+0x570>
   32580:	mov    eax,DWORD PTR [rip+0x84e7e]        # b7404 <dpb+0x24>
   32586:	mov    DWORD PTR [rip+0x84ec8],ebp        # b7454 <listXsize+0x4>
   3258c:	mov    ebx,ebp
   3258e:	xor    esi,esi
   32590:	mov    DWORD PTR [rip+0x84eba],ebp        # b7450 <listXsize>
   32596:	test   eax,eax
   32598:	je     32617 <init_lists+0x617>
   3259a:	mov    rdx,QWORD PTR [rip+0x84e4f]        # b73f0 <dpb+0x10>
   325a1:	lea    ecx,[rax-0x1]
   325a4:	mov    r9,QWORD PTR [rip+0x84e7d]        # b7428 <listX+0x8>
   325ab:	lea    rax,[rdx+0x8]
   325af:	lea    rsi,[rax+rcx*8]
   325b3:	jmp    325c4 <init_lists+0x5c4>
   325b5:	nop    DWORD PTR [rax]
   325b8:	mov    rdx,rax
   325bb:	cmp    rsi,rax
   325be:	je     32610 <init_lists+0x610>
   325c0:	add    rax,0x8
   325c4:	mov    rdx,QWORD PTR [rdx]
   325c7:	cmp    DWORD PTR [rdx],0x3
   325ca:	jne    325b8 <init_lists+0x5b8>
   325cc:	mov    rcx,QWORD PTR [rdx+0x28]
   325d0:	mov    r11d,DWORD PTR [rcx+0x18e8]
   325d7:	test   r11d,r11d
   325da:	je     325b8 <init_lists+0x5b8>
   325dc:	mov    r8d,DWORD PTR [rcx+0x18e4]
   325e3:	mov    DWORD PTR [rcx+0x14],ebx
   325e6:	mov    DWORD PTR [rcx+0x18e0],r8d
   325ed:	movsxd r8,ebx
   325f0:	add    ebx,0x1
   325f3:	mov    QWORD PTR [rdi+r8*8],rcx
   325f7:	mov    rdx,QWORD PTR [rdx+0x28]
   325fb:	mov    QWORD PTR [r9+r8*8],rdx
   325ff:	mov    rdx,rax
   32602:	cmp    rsi,rax
   32605:	jne    325c0 <init_lists+0x5c0>
   32607:	nop    WORD PTR [rax+rax*1+0x0]
   32610:	mov    esi,ebx
   32612:	sub    esi,ebp
   32614:	movsxd rsi,esi
   32617:	add    rdi,r12
   3261a:	lea    rcx,[rip+0xffffffffffffe6ef]        # 30d10 <compare_pic_by_lt_pic_num_asc>
   32621:	mov    edx,0x8
   32626:	call   4330 <qsort@plt>
   3262b:	movsxd rax,DWORD PTR [rip+0x84e1e]        # b7450 <listXsize>
   32632:	mov    esi,ebx
   32634:	mov    rdx,QWORD PTR [rip+0x84ded]        # b7428 <listX+0x8>
   3263b:	lea    rcx,[rip+0xffffffffffffe6ce]        # 30d10 <compare_pic_by_lt_pic_num_asc>
   32642:	sub    esi,eax
   32644:	lea    rdi,[rdx+rax*8]
   32648:	mov    edx,0x8
   3264d:	movsxd rsi,esi
   32650:	call   4330 <qsort@plt>
   32655:	mov    DWORD PTR [rip+0x84df9],ebx        # b7454 <listXsize+0x4>
   3265b:	mov    ecx,ebx
   3265d:	mov    eax,0x1
   32662:	mov    DWORD PTR [rip+0x84de8],ebx        # b7450 <listXsize>
   32668:	jmp    3238b <init_lists+0x38b>
   3266d:	nop    DWORD PTR [rax]
   32670:	mov    rdi,QWORD PTR [rip+0x84db1]        # b7428 <listX+0x8>
   32677:	lea    r9d,[rbx-0x1]
   3267b:	xor    eax,eax
   3267d:	xor    edx,edx
   3267f:	mov    r10,QWORD PTR [rip+0x84d9a]        # b7420 <listX>
   32686:	mov    r8d,0x1
   3268c:	jmp    32693 <init_lists+0x693>
   3268e:	xchg   ax,ax
   32690:	mov    rax,rsi
   32693:	mov    rsi,QWORD PTR [rdi+rax*8]
   32697:	cmp    QWORD PTR [r10+rax*8],rsi
   3269b:	lea    rsi,[rax+0x1]
   3269f:	cmovne edx,r8d
   326a3:	cmp    r9,rax
   326a6:	jne    32690 <init_lists+0x690>
   326a8:	test   edx,edx
   326aa:	jne    32398 <init_lists+0x398>
   326b0:	mov    rax,QWORD PTR [rdi]
   326b3:	mov    rdx,QWORD PTR [rdi+0x8]
   326b7:	mov    QWORD PTR [rdi+0x8],rax
   326bb:	mov    QWORD PTR [rdi],rdx
   326be:	jmp    32398 <init_lists+0x398>
   326c3:	nop    DWORD PTR [rax+rax*1+0x0]
   326c8:	mov    r14d,DWORD PTR [rip+0x84d29]        # b73f8 <dpb+0x18>
   326cf:	mov    esi,0x8
   326d4:	mov    rdi,r14
   326d7:	call   4400 <calloc@plt>
   326dc:	mov    r13,rax
   326df:	test   rax,rax
   326e2:	je     32c57 <init_lists+0xc57>
   326e8:	mov    rdi,r14
   326eb:	mov    esi,0x8
   326f0:	call   4400 <calloc@plt>
   326f5:	mov    r14,rax
   326f8:	test   rax,rax
   326fb:	je     32c1d <init_lists+0xc1d>
   32701:	mov    eax,DWORD PTR [rip+0x84cf9]        # b7400 <dpb+0x20>
   32707:	test   eax,eax
   32709:	je     32c13 <init_lists+0xc13>
   3270f:	mov    rcx,QWORD PTR [rip+0x84cd2]        # b73e8 <dpb+0x8>
   32716:	sub    eax,0x1
   32719:	xor    r15d,r15d
   3271c:	lea    rdx,[rcx+0x8]
   32720:	lea    rdi,[rdx+rax*8]
   32724:	xor    eax,eax
   32726:	jmp    32734 <init_lists+0x734>
   32728:	nop    DWORD PTR [rax+rax*1+0x0]
   32730:	add    rdx,0x8
   32734:	mov    rcx,QWORD PTR [rcx]
   32737:	mov    rsi,rax
   3273a:	mov    r8d,DWORD PTR [rcx+0x4]
   3273e:	test   r8d,r8d
   32741:	je     32752 <init_lists+0x752>
   32743:	add    r15d,0x1
   32747:	mov    QWORD PTR [r13+rax*8+0x0],rcx
   3274c:	movsxd rax,r15d
   3274f:	mov    rsi,rax
   32752:	mov    rcx,rdx
   32755:	cmp    rdi,rdx
   32758:	jne    32730 <init_lists+0x730>
   3275a:	lea    rcx,[rip+0xffffffffffffe5df]        # 30d40 <compare_fs_by_frame_num_desc>
   32761:	mov    edx,0x8
   32766:	mov    rdi,r13
   32769:	call   4330 <qsort@plt>
   3276e:	xor    r9d,r9d
   32771:	mov    edx,r15d
   32774:	mov    rsi,r13
   32777:	mov    rcx,QWORD PTR [rip+0x84ca2]        # b7420 <listX>
   3277e:	mov    edi,ebp
   32780:	lea    r8,[rip+0x84cc9]        # b7450 <listXsize>
   32787:	mov    DWORD PTR [rip+0x84cbf],0x0        # b7450 <listXsize>
   32791:	call   30e40 <gen_pic_list_from_frame_list>
   32796:	mov    r9d,DWORD PTR [rip+0x84c67]        # b7404 <dpb+0x24>
   3279d:	test   r9d,r9d
   327a0:	je     32c09 <init_lists+0xc09>
   327a6:	mov    rax,QWORD PTR [rip+0x84c43]        # b73f0 <dpb+0x10>
   327ad:	lea    r8d,[r9-0x1]
   327b1:	xor    edx,edx
   327b3:	jmp    327bb <init_lists+0x7bb>
   327b5:	nop    DWORD PTR [rax]
   327b8:	mov    rdx,rcx
   327bb:	mov    rcx,QWORD PTR [rax+rdx*8]
   327bf:	mov    QWORD PTR [r14+rdx*8],rcx
   327c3:	mov    rcx,QWORD PTR [rax+rdx*8]
   327c7:	mov    esi,DWORD PTR [rcx+0x8]
   327ca:	test   sil,0x1
   327ce:	je     327e6 <init_lists+0x7e6>
   327d0:	mov    rdi,QWORD PTR [rcx+0x30]
   327d4:	mov    r10d,DWORD PTR [rdi+0x18e4]
   327db:	lea    r10d,[rbx+r10*2]
   327df:	mov    DWORD PTR [rdi+0x18e0],r10d
   327e6:	and    esi,0x2
   327e9:	je     327ff <init_lists+0x7ff>
   327eb:	mov    rcx,QWORD PTR [rcx+0x38]
   327ef:	mov    esi,DWORD PTR [rcx+0x18e4]
   327f5:	lea    esi,[r12+rsi*2]
   327f9:	mov    DWORD PTR [rcx+0x18e0],esi
   327ff:	lea    rcx,[rdx+0x1]
   32803:	cmp    r8,rdx
   32806:	jne    327b8 <init_lists+0x7b8>
   32808:	movsxd rsi,r9d
   3280b:	mov    r12,rsi
   3280e:	lea    rcx,[rip+0xffffffffffffe54b]        # 30d60 <compare_fs_by_lt_pic_idx_asc>
   32815:	mov    edx,0x8
   3281a:	mov    rdi,r14
   3281d:	call   4330 <qsort@plt>
   32822:	mov    r9d,0x1
   32828:	mov    edx,r12d
   3282b:	mov    edi,ebp
   3282d:	mov    rcx,QWORD PTR [rip+0x84bec]        # b7420 <listX>
   32834:	lea    r8,[rip+0x84c15]        # b7450 <listXsize>
   3283b:	mov    rsi,r14
   3283e:	call   30e40 <gen_pic_list_from_frame_list>
   32843:	mov    rdi,r13
   32846:	call   42d0 <free@plt>
   3284b:	mov    rdi,r14
   3284e:	call   42d0 <free@plt>
   32853:	mov    ebx,DWORD PTR [rip+0x84bf7]        # b7450 <listXsize>
   32859:	jmp    3237a <init_lists+0x37a>
   3285e:	xchg   ax,ax
   32860:	mov    r14d,DWORD PTR [rip+0x84b91]        # b73f8 <dpb+0x18>
   32867:	mov    esi,0x8
   3286c:	mov    rdi,r14
   3286f:	call   4400 <calloc@plt>
   32874:	mov    r15,rax
   32877:	test   rax,rax
   3287a:	je     32c6f <init_lists+0xc6f>
   32880:	mov    esi,0x8
   32885:	mov    rdi,r14
   32888:	call   4400 <calloc@plt>
   3288d:	mov    QWORD PTR [rsp+0x8],rax
   32892:	test   rax,rax
   32895:	je     32c3f <init_lists+0xc3f>
   3289b:	mov    esi,0x8
   328a0:	mov    rdi,r14
   328a3:	call   4400 <calloc@plt>
   328a8:	mov    r13,rax
   328ab:	test   rax,rax
   328ae:	je     32c2e <init_lists+0xc2e>
   328b4:	movabs rax,0x100000000
   328be:	mov    QWORD PTR [rip+0x84b8b],rax        # b7450 <listXsize>
   328c5:	mov    eax,DWORD PTR [rip+0x84b35]        # b7400 <dpb+0x20>
   328cb:	test   eax,eax
   328cd:	je     32bfb <init_lists+0xbfb>
   328d3:	mov    rdx,QWORD PTR [rip+0x84b0e]        # b73e8 <dpb+0x8>
   328da:	lea    ecx,[rax-0x1]
   328dd:	mov    r11,QWORD PTR [rip+0x55ccc]        # 885b0 <img>
   328e4:	xor    r14d,r14d
   328e7:	lea    rax,[rdx+0x8]
   328eb:	lea    rdi,[rax+rcx*8]
   328ef:	xor    ecx,ecx
   328f1:	jmp    328fc <init_lists+0x8fc>
   328f3:	nop    DWORD PTR [rax+rax*1+0x0]
   328f8:	add    rax,0x8
   328fc:	mov    rdx,QWORD PTR [rdx]
   328ff:	lea    rsi,[rcx*8+0x0]
   32907:	mov    r9,rcx
   3290a:	lea    r8,[r15+rsi*1]
   3290e:	mov    r10d,DWORD PTR [rdx]
   32911:	test   r10d,r10d
   32914:	je     32935 <init_lists+0x935>
   32916:	mov    r10d,DWORD PTR [rdx+0x24]
   3291a:	cmp    DWORD PTR [r11+0x11b0c],r10d
   32921:	jl     32935 <init_lists+0x935>
   32923:	add    r14d,0x1
   32927:	mov    QWORD PTR [r8],rdx
   3292a:	lea    r8,[r15+rsi*1+0x8]
   3292f:	movsxd rcx,r14d
   32932:	mov    r9,rcx
   32935:	mov    rdx,rax
   32938:	cmp    rax,rdi
   3293b:	jne    328f8 <init_lists+0x8f8>
   3293d:	mov    edx,0x8
   32942:	mov    rsi,r9
   32945:	mov    rdi,r15
   32948:	mov    QWORD PTR [rsp+0x10],r8
   3294d:	lea    rcx,[rip+0xffffffffffffe48c]        # 30de0 <compare_fs_by_poc_desc>
   32954:	call   4330 <qsort@plt>
   32959:	mov    eax,DWORD PTR [rip+0x84aa1]        # b7400 <dpb+0x20>
   3295f:	mov    r8,QWORD PTR [rsp+0x10]
   32964:	test   eax,eax
   32966:	je     32bd2 <init_lists+0xbd2>
   3296c:	mov    rdx,QWORD PTR [rip+0x84a75]        # b73e8 <dpb+0x8>
   32973:	lea    ecx,[rax-0x1]
   32976:	mov    rsi,QWORD PTR [rip+0x55c33]        # 885b0 <img>
   3297d:	mov    r11d,r14d
   32980:	lea    rax,[rdx+0x8]
   32984:	lea    rcx,[rax+rcx*8]
   32988:	jmp    32994 <init_lists+0x994>
   3298a:	nop    WORD PTR [rax+rax*1+0x0]
   32990:	add    rax,0x8
   32994:	mov    rdx,QWORD PTR [rdx]
   32997:	mov    edi,DWORD PTR [rdx]
   32999:	test   edi,edi
   3299b:	je     329b3 <init_lists+0x9b3>
   3299d:	mov    edi,DWORD PTR [rdx+0x24]
   329a0:	cmp    DWORD PTR [rsi+0x11b0c],edi
   329a6:	jge    329b3 <init_lists+0x9b3>
   329a8:	movsxd rdi,r11d
   329ab:	add    r11d,0x1
   329af:	mov    QWORD PTR [r15+rdi*8],rdx
   329b3:	mov    rdx,rax
   329b6:	cmp    rcx,rax
   329b9:	jne    32990 <init_lists+0x990>
   329bb:	mov    eax,r11d
   329be:	mov    edx,0x8
   329c3:	mov    rdi,r8
   329c6:	mov    DWORD PTR [rsp+0x1c],r11d
   329cb:	sub    eax,r14d
   329ce:	lea    rcx,[rip+0xffffffffffffe3eb]        # 30dc0 <compare_fs_by_poc_asc>
   329d5:	cdqe   
   329d7:	mov    rsi,rax
   329da:	mov    QWORD PTR [rsp+0x10],rax
   329df:	call   4330 <qsort@plt>
   329e4:	test   r14d,r14d
   329e7:	mov    rax,QWORD PTR [rsp+0x10]
   329ec:	mov    r11d,DWORD PTR [rsp+0x1c]
   329f1:	je     32a1c <init_lists+0xa1c>
   329f3:	mov    rdi,QWORD PTR [rsp+0x8]
   329f8:	lea    esi,[r14-0x1]
   329fc:	lea    rcx,[rdi+rax*8]
   32a00:	xor    eax,eax
   32a02:	nop    WORD PTR [rax+rax*1+0x0]
   32a08:	mov    rdx,QWORD PTR [r15+rax*8]
   32a0c:	mov    QWORD PTR [rcx+rax*8],rdx
   32a10:	mov    rdx,rax
   32a13:	add    rax,0x1
   32a17:	cmp    rsi,rdx
   32a1a:	jne    32a08 <init_lists+0xa08>
   32a1c:	cmp    r11d,r14d
   32a1f:	jle    32a49 <init_lists+0xa49>
   32a21:	movsxd rdx,r14d
   32a24:	mov    rdi,QWORD PTR [rsp+0x8]
   32a29:	mov    rax,rdx
   32a2c:	neg    rax
   32a2f:	lea    rcx,[rdi+rax*8]
   32a33:	nop    DWORD PTR [rax+rax*1+0x0]
   32a38:	mov    rax,QWORD PTR [r15+rdx*8]
   32a3c:	mov    QWORD PTR [rcx+rdx*8],rax
   32a40:	add    rdx,0x1
   32a44:	cmp    r11d,edx
   32a47:	jg     32a38 <init_lists+0xa38>
   32a49:	mov    rcx,QWORD PTR [rip+0x849d0]        # b7420 <listX>
   32a50:	mov    edx,r11d
   32a53:	xor    r9d,r9d
   32a56:	mov    rsi,r15
   32a59:	lea    r8,[rip+0x849f0]        # b7450 <listXsize>
   32a60:	mov    edi,ebp
   32a62:	mov    DWORD PTR [rsp+0x10],r11d
   32a67:	mov    QWORD PTR [rip+0x849de],0x0        # b7450 <listXsize>
   32a72:	call   30e40 <gen_pic_list_from_frame_list>
   32a77:	mov    r11d,DWORD PTR [rsp+0x10]
   32a7c:	xor    r9d,r9d
   32a7f:	mov    edi,ebp
   32a81:	mov    rcx,QWORD PTR [rip+0x849a0]        # b7428 <listX+0x8>
   32a88:	mov    rsi,QWORD PTR [rsp+0x8]
   32a8d:	lea    r8,[rip+0x849c0]        # b7454 <listXsize+0x4>
   32a94:	mov    edx,r11d
   32a97:	call   30e40 <gen_pic_list_from_frame_list>
   32a9c:	mov    r8d,DWORD PTR [rip+0x84961]        # b7404 <dpb+0x24>
   32aa3:	test   r8d,r8d
   32aa6:	je     32bc8 <init_lists+0xbc8>
   32aac:	mov    rsi,QWORD PTR [rip+0x8493d]        # b73f0 <dpb+0x10>
   32ab3:	lea    edi,[r8-0x1]
   32ab7:	xor    edx,edx
   32ab9:	jmp    32ac3 <init_lists+0xac3>
   32abb:	nop    DWORD PTR [rax+rax*1+0x0]
   32ac0:	mov    rdx,rax
   32ac3:	mov    rax,QWORD PTR [rsi+rdx*8]
   32ac7:	mov    QWORD PTR [r13+rdx*8+0x0],rax
   32acc:	mov    rax,QWORD PTR [rsi+rdx*8]
   32ad0:	mov    ecx,DWORD PTR [rax+0x8]
   32ad3:	test   cl,0x1
   32ad6:	je     32aee <init_lists+0xaee>
   32ad8:	mov    r9,QWORD PTR [rax+0x30]
   32adc:	mov    r11d,DWORD PTR [r9+0x18e4]
   32ae3:	lea    r11d,[rbx+r11*2]
   32ae7:	mov    DWORD PTR [r9+0x18e0],r11d
   32aee:	and    ecx,0x2
   32af1:	je     32b07 <init_lists+0xb07>
   32af3:	mov    rax,QWORD PTR [rax+0x38]
   32af7:	mov    ecx,DWORD PTR [rax+0x18e4]
   32afd:	lea    ecx,[r12+rcx*2]
   32b01:	mov    DWORD PTR [rax+0x18e0],ecx
   32b07:	lea    rax,[rdx+0x1]
   32b0b:	cmp    rdi,rdx
   32b0e:	jne    32ac0 <init_lists+0xac0>
   32b10:	movsxd rsi,r8d
   32b13:	mov    r12,rsi
   32b16:	lea    rcx,[rip+0xffffffffffffe243]        # 30d60 <compare_fs_by_lt_pic_idx_asc>
   32b1d:	mov    edx,0x8
   32b22:	mov    rdi,r13
   32b25:	call   4330 <qsort@plt>
   32b2a:	mov    r9d,0x1
   32b30:	mov    edx,r12d
   32b33:	mov    edi,ebp
   32b35:	mov    rcx,QWORD PTR [rip+0x848e4]        # b7420 <listX>
   32b3c:	lea    r8,[rip+0x8490d]        # b7450 <listXsize>
   32b43:	mov    rsi,r13
   32b46:	call   30e40 <gen_pic_list_from_frame_list>
   32b4b:	mov    r9d,0x1
   32b51:	mov    edx,r12d
   32b54:	mov    edi,ebp
   32b56:	mov    rcx,QWORD PTR [rip+0x848cb]        # b7428 <listX+0x8>
   32b5d:	lea    r8,[rip+0x848f0]        # b7454 <listXsize+0x4>
   32b64:	mov    rsi,r13
   32b67:	call   30e40 <gen_pic_list_from_frame_list>
   32b6c:	mov    rdi,r15
   32b6f:	call   42d0 <free@plt>
   32b74:	mov    rdi,QWORD PTR [rsp+0x8]
   32b79:	call   42d0 <free@plt>
   32b7e:	mov    rdi,r13
   32b81:	call   42d0 <free@plt>
   32b86:	mov    ebx,DWORD PTR [rip+0x848c4]        # b7450 <listXsize>
   32b8c:	mov    ecx,DWORD PTR [rip+0x848c2]        # b7454 <listXsize+0x4>
   32b92:	cmp    ebx,ecx
   32b94:	sete   al
   32b97:	jmp    3238b <init_lists+0x38b>
   32b9c:	xor    ebp,ebp
   32b9e:	xor    esi,esi
   32ba0:	xor    r12d,r12d
   32ba3:	jmp    322c8 <init_lists+0x2c8>
   32ba8:	mov    ebx,r12d
   32bab:	xor    esi,esi
   32bad:	jmp    32360 <init_lists+0x360>
   32bb2:	mov    rdi,QWORD PTR [rip+0x84867]        # b7420 <listX>
   32bb9:	mov    r12,r13
   32bbc:	mov    ebp,ebx
   32bbe:	xor    esi,esi
   32bc0:	xor    r14d,r14d
   32bc3:	jmp    32509 <init_lists+0x509>
   32bc8:	xor    esi,esi
   32bca:	xor    r12d,r12d
   32bcd:	jmp    32b16 <init_lists+0xb16>
   32bd2:	lea    rcx,[rip+0xffffffffffffe1e7]        # 30dc0 <compare_fs_by_poc_asc>
   32bd9:	mov    edx,0x8
   32bde:	xor    esi,esi
   32be0:	mov    rdi,r8
   32be3:	call   4330 <qsort@plt>
   32be8:	mov    r11d,r14d
   32beb:	xor    eax,eax
   32bed:	test   r14d,r14d
   32bf0:	jne    329f3 <init_lists+0x9f3>
   32bf6:	jmp    32a49 <init_lists+0xa49>
   32bfb:	mov    r8,r15
   32bfe:	xor    r9d,r9d
   32c01:	xor    r14d,r14d
   32c04:	jmp    3293d <init_lists+0x93d>
   32c09:	xor    esi,esi
   32c0b:	xor    r12d,r12d
   32c0e:	jmp    3280e <init_lists+0x80e>
   32c13:	xor    esi,esi
   32c15:	xor    r15d,r15d
   32c18:	jmp    3275a <init_lists+0x75a>
   32c1d:	lea    rdi,[rip+0x42bf7]        # 7581b <MODTAB+0x5fb>
   32c24:	call   38210 <no_mem_exit>
   32c29:	jmp    32701 <init_lists+0x701>
   32c2e:	lea    rdi,[rip+0x42be6]        # 7581b <MODTAB+0x5fb>
   32c35:	call   38210 <no_mem_exit>
   32c3a:	jmp    328b4 <init_lists+0x8b4>
   32c3f:	lea    rdi,[rip+0x42beb]        # 75831 <MODTAB+0x611>
   32c46:	call   38210 <no_mem_exit>
   32c4b:	mov    r14d,DWORD PTR [rip+0x847a6]        # b73f8 <dpb+0x18>
   32c52:	jmp    3289b <init_lists+0x89b>
   32c57:	lea    rdi,[rip+0x42ba8]        # 75806 <MODTAB+0x5e6>
   32c5e:	call   38210 <no_mem_exit>
   32c63:	mov    r14d,DWORD PTR [rip+0x8478e]        # b73f8 <dpb+0x18>
   32c6a:	jmp    326e8 <init_lists+0x6e8>
   32c6f:	lea    rdi,[rip+0x42b90]        # 75806 <MODTAB+0x5e6>
   32c76:	call   38210 <no_mem_exit>
   32c7b:	mov    r14d,DWORD PTR [rip+0x84776]        # b73f8 <dpb+0x18>
   32c82:	jmp    32880 <init_lists+0x880>
   32c87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000032c90 <init_mbaff_lists>:
   32c90:	endbr64 
   32c94:	mov    ecx,0x2
   32c99:	lea    rsi,[rip+0x847b0]        # b7450 <listXsize>
   32ca0:	lea    rdi,[rip+0x84779]        # b7420 <listX>
   32ca7:	mov    rax,QWORD PTR [rdi+rcx*8]
   32cab:	lea    rdx,[rax+0x108]
   32cb2:	nop    WORD PTR [rax+rax*1+0x0]
   32cb8:	mov    QWORD PTR [rax],0x0
   32cbf:	add    rax,0x8
   32cc3:	cmp    rdx,rax
   32cc6:	jne    32cb8 <init_mbaff_lists+0x28>
   32cc8:	mov    DWORD PTR [rsi+rcx*4],0x0
   32ccf:	add    rcx,0x1
   32cd3:	cmp    rcx,0x6
   32cd7:	jne    32ca7 <init_mbaff_lists+0x17>
   32cd9:	mov    r9d,DWORD PTR [rsi]
   32cdc:	test   r9d,r9d
   32cdf:	jle    32d52 <init_mbaff_lists+0xc2>
   32ce1:	lea    r8d,[r9-0x1]
   32ce5:	mov    rsi,QWORD PTR [rip+0x84744]        # b7430 <listX+0x10>
   32cec:	mov    rcx,QWORD PTR [rip+0x8474d]        # b7440 <listX+0x20>
   32cf3:	xor    eax,eax
   32cf5:	add    r8,0x1
   32cf9:	mov    rdx,QWORD PTR [rip+0x84720]        # b7420 <listX>
   32d00:	shl    r8,0x4
   32d04:	nop    DWORD PTR [rax+0x0]
   32d08:	mov    rdi,QWORD PTR [rdx]
   32d0b:	add    rdx,0x8
   32d0f:	mov    rdi,QWORD PTR [rdi+0x1980]
   32d16:	mov    QWORD PTR [rsi+rax*1],rdi
   32d1a:	mov    rdi,QWORD PTR [rdx-0x8]
   32d1e:	mov    rdi,QWORD PTR [rdi+0x1988]
   32d25:	mov    QWORD PTR [rsi+rax*1+0x8],rdi
   32d2a:	mov    rdi,QWORD PTR [rdx-0x8]
   32d2e:	mov    rdi,QWORD PTR [rdi+0x1988]
   32d35:	mov    QWORD PTR [rcx+rax*1],rdi
   32d39:	mov    rdi,QWORD PTR [rdx-0x8]
   32d3d:	mov    rdi,QWORD PTR [rdi+0x1980]
   32d44:	mov    QWORD PTR [rcx+rax*1+0x8],rdi
   32d49:	add    rax,0x10
   32d4d:	cmp    rax,r8
   32d50:	jne    32d08 <init_mbaff_lists+0x78>
   32d52:	add    r9d,r9d
   32d55:	mov    DWORD PTR [rip+0x84704],r9d        # b7460 <listXsize+0x10>
   32d5c:	mov    DWORD PTR [rip+0x846f5],r9d        # b7458 <listXsize+0x8>
   32d63:	mov    r9d,DWORD PTR [rip+0x846ea]        # b7454 <listXsize+0x4>
   32d6a:	test   r9d,r9d
   32d6d:	jle    32de2 <init_mbaff_lists+0x152>
   32d6f:	lea    r8d,[r9-0x1]
   32d73:	mov    rsi,QWORD PTR [rip+0x846be]        # b7438 <listX+0x18>
   32d7a:	mov    rcx,QWORD PTR [rip+0x846c7]        # b7448 <listX+0x28>
   32d81:	xor    eax,eax
   32d83:	add    r8,0x1
   32d87:	mov    rdx,QWORD PTR [rip+0x8469a]        # b7428 <listX+0x8>
   32d8e:	shl    r8,0x4
   32d92:	nop    WORD PTR [rax+rax*1+0x0]
   32d98:	mov    rdi,QWORD PTR [rdx]
   32d9b:	add    rdx,0x8
   32d9f:	mov    rdi,QWORD PTR [rdi+0x1980]
   32da6:	mov    QWORD PTR [rsi+rax*1],rdi
   32daa:	mov    rdi,QWORD PTR [rdx-0x8]
   32dae:	mov    rdi,QWORD PTR [rdi+0x1988]
   32db5:	mov    QWORD PTR [rsi+rax*1+0x8],rdi
   32dba:	mov    rdi,QWORD PTR [rdx-0x8]
   32dbe:	mov    rdi,QWORD PTR [rdi+0x1988]
   32dc5:	mov    QWORD PTR [rcx+rax*1],rdi
   32dc9:	mov    rdi,QWORD PTR [rdx-0x8]
   32dcd:	mov    rdi,QWORD PTR [rdi+0x1980]
   32dd4:	mov    QWORD PTR [rcx+rax*1+0x8],rdi
   32dd9:	add    rax,0x10
   32ddd:	cmp    r8,rax
   32de0:	jne    32d98 <init_mbaff_lists+0x108>
   32de2:	add    r9d,r9d
   32de5:	mov    DWORD PTR [rip+0x84678],r9d        # b7464 <listXsize+0x14>
   32dec:	mov    DWORD PTR [rip+0x84669],r9d        # b745c <listXsize+0xc>
   32df3:	ret    
   32df4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   32dff:	nop

0000000000032e00 <reorder_ref_pic_list>:
   32e00:	endbr64 
   32e04:	push   r15
   32e06:	push   r14
   32e08:	mov    r14,rcx
   32e0b:	push   r13
   32e0d:	mov    r13d,edx
   32e10:	push   r12
   32e12:	mov    r12,rdi
   32e15:	push   rbp
   32e16:	push   rbx
   32e17:	sub    rsp,0x58
   32e1b:	mov    eax,DWORD PTR [rip+0x83047]        # b5e68 <log2_max_frame_num_minus4>
   32e21:	mov    QWORD PTR [rsp+0x18],r8
   32e26:	lea    ecx,[rax+0x4]
   32e29:	mov    rax,QWORD PTR [rip+0x55780]        # 885b0 <img>
   32e30:	mov    QWORD PTR [rsp+0x48],rsi
   32e35:	mov    QWORD PTR [rsp+0x40],r9
   32e3a:	mov    r8d,DWORD PTR [rax+0x1c]
   32e3e:	mov    esi,DWORD PTR [rax+0x11b10]
   32e44:	test   r8d,r8d
   32e47:	jne    33218 <reorder_ref_pic_list+0x418>
   32e4d:	mov    DWORD PTR [rsp+0x30],esi
   32e51:	mov    edx,0x1
   32e56:	shl    edx,cl
   32e58:	mov    esi,DWORD PTR [r14]
   32e5b:	lea    r8d,[r13+0x1]
   32e5f:	cmp    esi,0x3
   32e62:	je     33018 <reorder_ref_pic_list+0x218>
   32e68:	movsxd rax,r8d
   32e6b:	lea    rdi,[r12+0x10]
   32e70:	mov    r15d,DWORD PTR [rsp+0x30]
   32e75:	xor    ebx,ebx
   32e77:	lea    rax,[r12+rax*8]
   32e7b:	mov    QWORD PTR [rsp+0x10],rdi
   32e80:	xor    ecx,ecx
   32e82:	xor    ebp,ebp
   32e84:	mov    QWORD PTR [rsp],rax
   32e88:	movsxd rax,r13d
   32e8b:	lea    rax,[r12+rax*8]
   32e8f:	mov    QWORD PTR [rsp+0x8],rax
   32e94:	mov    rax,r14
   32e97:	mov    r14d,edx
   32e9a:	mov    rdx,rax
   32e9d:	nop    DWORD PTR [rax]
   32ea0:	cmp    esi,0x3
   32ea3:	jg     331c0 <reorder_ref_pic_list+0x3c0>
   32ea9:	mov    eax,DWORD PTR [rax]
   32eab:	cmp    eax,0x1
   32eae:	jg     33060 <reorder_ref_pic_list+0x260>
   32eb4:	mov    rdi,QWORD PTR [rsp+0x18]
   32eb9:	mov    ecx,DWORD PTR [rdi+rcx*1]
   32ebc:	add    ecx,0x1
   32ebf:	test   eax,eax
   32ec1:	jne    33200 <reorder_ref_pic_list+0x400>
   32ec7:	sub    r15d,ecx
   32eca:	lea    eax,[r15+r14*1]
   32ece:	cmovs  r15d,eax
   32ed2:	mov    ecx,r15d
   32ed5:	mov    eax,DWORD PTR [rip+0x84525]        # b7400 <dpb+0x20>
   32edb:	sub    ecx,r14d
   32ede:	cmp    DWORD PTR [rsp+0x30],r15d
   32ee3:	cmovge ecx,r15d
   32ee7:	test   eax,eax
   32ee9:	je     33050 <reorder_ref_pic_list+0x250>
   32eef:	mov    rsi,QWORD PTR [rip+0x556ba]        # 885b0 <img>
   32ef6:	sub    eax,0x1
   32ef9:	mov    r11d,DWORD PTR [rsi+0x1c]
   32efd:	mov    rsi,QWORD PTR [rip+0x844e4]        # b73e8 <dpb+0x8>
   32f04:	lea    r10,[rsi+rax*8+0x8]
   32f09:	jmp    32f27 <reorder_ref_pic_list+0x127>
   32f0b:	nop    DWORD PTR [rax+rax*1+0x0]
   32f10:	cmp    r9d,0x3
   32f14:	je     33030 <reorder_ref_pic_list+0x230>
   32f1a:	add    rsi,0x8
   32f1e:	cmp    r10,rsi
   32f21:	je     33050 <reorder_ref_pic_list+0x250>
   32f27:	mov    rdi,QWORD PTR [rsi]
   32f2a:	mov    r9d,DWORD PTR [rdi+0x4]
   32f2e:	test   r11d,r11d
   32f31:	je     32f10 <reorder_ref_pic_list+0x110>
   32f33:	test   r9b,0x1
   32f37:	je     32f4e <reorder_ref_pic_list+0x14e>
   32f39:	mov    rax,QWORD PTR [rdi+0x30]
   32f3d:	cmp    DWORD PTR [rax+0x18e8],0x0
   32f44:	jne    32f4e <reorder_ref_pic_list+0x14e>
   32f46:	cmp    ecx,DWORD PTR [rax+0x18dc]
   32f4c:	je     32f70 <reorder_ref_pic_list+0x170>
   32f4e:	and    r9d,0x2
   32f52:	je     32f1a <reorder_ref_pic_list+0x11a>
   32f54:	mov    rax,QWORD PTR [rdi+0x38]
   32f58:	mov    r9d,DWORD PTR [rax+0x18e8]
   32f5f:	test   r9d,r9d
   32f62:	jne    32f1a <reorder_ref_pic_list+0x11a>
   32f64:	cmp    ecx,DWORD PTR [rax+0x18dc]
   32f6a:	jne    32f1a <reorder_ref_pic_list+0x11a>
   32f6c:	nop    DWORD PTR [rax+0x0]
   32f70:	mov    edi,ebx
   32f72:	cmp    r8d,ebx
   32f75:	jle    32fa1 <reorder_ref_pic_list+0x1a1>
   32f77:	mov    esi,r13d
   32f7a:	mov    r9,QWORD PTR [rsp+0x8]
   32f7f:	sub    esi,ebx
   32f81:	shl    rsi,0x3
   32f85:	sub    r9,rsi
   32f88:	mov    rsi,QWORD PTR [rsp]
   32f8c:	nop    DWORD PTR [rax+0x0]
   32f90:	mov    r10,QWORD PTR [rsi-0x8]
   32f94:	sub    rsi,0x8
   32f98:	mov    QWORD PTR [rsi+0x8],r10
   32f9c:	cmp    r9,rsi
   32f9f:	jne    32f90 <reorder_ref_pic_list+0x190>
   32fa1:	lea    esi,[rbx+0x1]
   32fa4:	mov    QWORD PTR [r12+rbp*8],rax
   32fa8:	movsxd rbp,esi
   32fab:	cmp    r13d,edi
   32fae:	jl     32ffd <reorder_ref_pic_list+0x1fd>
   32fb0:	mov    eax,r13d
   32fb3:	mov    rdi,QWORD PTR [rsp+0x10]
   32fb8:	lea    r9,[r12+rbp*8]
   32fbc:	sub    eax,ebx
   32fbe:	add    rax,rbx
   32fc1:	lea    r10,[rdi+rax*8]
   32fc5:	mov    eax,esi
   32fc7:	nop    WORD PTR [rax+rax*1+0x0]
   32fd0:	mov    rsi,QWORD PTR [r9]
   32fd3:	test   rsi,rsi
   32fd6:	je     32ff4 <reorder_ref_pic_list+0x1f4>
   32fd8:	mov    edi,DWORD PTR [rsi+0x18e8]
   32fde:	test   edi,edi
   32fe0:	jne    32fea <reorder_ref_pic_list+0x1ea>
   32fe2:	cmp    ecx,DWORD PTR [rsi+0x18dc]
   32fe8:	je     32ff4 <reorder_ref_pic_list+0x1f4>
   32fea:	movsxd rdi,eax
   32fed:	add    eax,0x1
   32ff0:	mov    QWORD PTR [r12+rdi*8],rsi
   32ff4:	add    r9,0x8
   32ff8:	cmp    r10,r9
   32ffb:	jne    32fd0 <reorder_ref_pic_list+0x1d0>
   32ffd:	lea    rcx,[rbp*4+0x0]
   33005:	add    rbx,0x1
   33009:	lea    rax,[rdx+rcx*1]
   3300d:	mov    esi,DWORD PTR [rax]
   3300f:	cmp    esi,0x3
   33012:	jne    32ea0 <reorder_ref_pic_list+0xa0>
   33018:	mov    rax,QWORD PTR [rsp+0x48]
   3301d:	mov    DWORD PTR [rax],r8d
   33020:	add    rsp,0x58
   33024:	pop    rbx
   33025:	pop    rbp
   33026:	pop    r12
   33028:	pop    r13
   3302a:	pop    r14
   3302c:	pop    r15
   3302e:	ret    
   3302f:	nop
   33030:	mov    rax,QWORD PTR [rdi+0x28]
   33034:	mov    edi,DWORD PTR [rax+0x18e8]
   3303a:	test   edi,edi
   3303c:	je     32f64 <reorder_ref_pic_list+0x164>
   33042:	add    rsi,0x8
   33046:	cmp    r10,rsi
   33049:	jne    32f27 <reorder_ref_pic_list+0x127>
   3304f:	nop
   33050:	xor    eax,eax
   33052:	jmp    32f70 <reorder_ref_pic_list+0x170>
   33057:	nop    WORD PTR [rax+rax*1+0x0]
   33060:	mov    rax,QWORD PTR [rsp+0x40]
   33065:	mov    edi,DWORD PTR [rax+rcx*1]
   33068:	mov    eax,DWORD PTR [rip+0x84396]        # b7404 <dpb+0x24>
   3306e:	test   eax,eax
   33070:	je     331b0 <reorder_ref_pic_list+0x3b0>
   33076:	mov    rcx,QWORD PTR [rip+0x55533]        # 885b0 <img>
   3307d:	mov    rsi,QWORD PTR [rip+0x8436c]        # b73f0 <dpb+0x10>
   33084:	sub    eax,0x1
   33087:	mov    r11d,DWORD PTR [rcx+0x1c]
   3308b:	lea    r10,[rsi+rax*8+0x8]
   33090:	jmp    330af <reorder_ref_pic_list+0x2af>
   33092:	nop    WORD PTR [rax+rax*1+0x0]
   33098:	cmp    r9d,0x3
   3309c:	je     33190 <reorder_ref_pic_list+0x390>
   330a2:	add    rsi,0x8
   330a6:	cmp    rsi,r10
   330a9:	je     331b0 <reorder_ref_pic_list+0x3b0>
   330af:	mov    rcx,QWORD PTR [rsi]
   330b2:	mov    r9d,DWORD PTR [rcx+0x4]
   330b6:	test   r11d,r11d
   330b9:	je     33098 <reorder_ref_pic_list+0x298>
   330bb:	test   r9b,0x1
   330bf:	je     330d6 <reorder_ref_pic_list+0x2d6>
   330c1:	mov    rax,QWORD PTR [rcx+0x30]
   330c5:	cmp    DWORD PTR [rax+0x18e8],0x0
   330cc:	je     330d6 <reorder_ref_pic_list+0x2d6>
   330ce:	cmp    edi,DWORD PTR [rax+0x18e0]
   330d4:	je     330f8 <reorder_ref_pic_list+0x2f8>
   330d6:	and    r9d,0x2
   330da:	je     330a2 <reorder_ref_pic_list+0x2a2>
   330dc:	mov    rax,QWORD PTR [rcx+0x38]
   330e0:	mov    ecx,DWORD PTR [rax+0x18e8]
   330e6:	test   ecx,ecx
   330e8:	je     330a2 <reorder_ref_pic_list+0x2a2>
   330ea:	cmp    edi,DWORD PTR [rax+0x18e0]
   330f0:	jne    330a2 <reorder_ref_pic_list+0x2a2>
   330f2:	nop    WORD PTR [rax+rax*1+0x0]
   330f8:	mov    r9d,ebx
   330fb:	cmp    r8d,ebx
   330fe:	jle    33129 <reorder_ref_pic_list+0x329>
   33100:	mov    ecx,r13d
   33103:	mov    rsi,QWORD PTR [rsp+0x8]
   33108:	sub    ecx,ebx
   3310a:	shl    rcx,0x3
   3310e:	sub    rsi,rcx
   33111:	mov    rcx,QWORD PTR [rsp]
   33115:	nop    DWORD PTR [rax]
   33118:	mov    r10,QWORD PTR [rcx-0x8]
   3311c:	sub    rcx,0x8
   33120:	mov    QWORD PTR [rcx+0x8],r10
   33124:	cmp    rcx,rsi
   33127:	jne    33118 <reorder_ref_pic_list+0x318>
   33129:	lea    esi,[rbx+0x1]
   3312c:	mov    QWORD PTR [r12+rbp*8],rax
   33130:	movsxd rbp,esi
   33133:	cmp    r13d,r9d
   33136:	jl     32ffd <reorder_ref_pic_list+0x1fd>
   3313c:	mov    eax,r13d
   3313f:	mov    r11,QWORD PTR [rsp+0x10]
   33144:	lea    rcx,[r12+rbp*8]
   33148:	sub    eax,ebx
   3314a:	add    rax,rbx
   3314d:	lea    r9,[r11+rax*8]
   33151:	mov    eax,esi
   33153:	nop    DWORD PTR [rax+rax*1+0x0]
   33158:	mov    rsi,QWORD PTR [rcx]
   3315b:	mov    r10d,DWORD PTR [rsi+0x18e8]
   33162:	test   r10d,r10d
   33165:	je     3316f <reorder_ref_pic_list+0x36f>
   33167:	cmp    edi,DWORD PTR [rsi+0x18e0]
   3316d:	je     33179 <reorder_ref_pic_list+0x379>
   3316f:	movsxd r10,eax
   33172:	add    eax,0x1
   33175:	mov    QWORD PTR [r12+r10*8],rsi
   33179:	add    rcx,0x8
   3317d:	cmp    r9,rcx
   33180:	jne    33158 <reorder_ref_pic_list+0x358>
   33182:	jmp    32ffd <reorder_ref_pic_list+0x1fd>
   33187:	nop    WORD PTR [rax+rax*1+0x0]
   33190:	mov    rax,QWORD PTR [rcx+0x28]
   33194:	mov    ecx,DWORD PTR [rax+0x18e8]
   3319a:	test   ecx,ecx
   3319c:	jne    330ea <reorder_ref_pic_list+0x2ea>
   331a2:	add    rsi,0x8
   331a6:	cmp    rsi,r10
   331a9:	jne    330af <reorder_ref_pic_list+0x2af>
   331af:	nop
   331b0:	xor    eax,eax
   331b2:	jmp    330f8 <reorder_ref_pic_list+0x2f8>
   331b7:	nop    WORD PTR [rax+rax*1+0x0]
   331c0:	mov    esi,0x1f4
   331c5:	lea    rdi,[rip+0x421c4]        # 75390 <MODTAB+0x170>
   331cc:	mov    QWORD PTR [rsp+0x38],rdx
   331d1:	mov    DWORD PTR [rsp+0x34],r8d
   331d6:	mov    QWORD PTR [rsp+0x28],rax
   331db:	mov    QWORD PTR [rsp+0x20],rcx
   331e0:	call   19180 <error>
   331e5:	mov    rdx,QWORD PTR [rsp+0x38]
   331ea:	mov    r8d,DWORD PTR [rsp+0x34]
   331ef:	mov    rax,QWORD PTR [rsp+0x28]
   331f4:	mov    rcx,QWORD PTR [rsp+0x20]
   331f9:	jmp    32ea9 <reorder_ref_pic_list+0xa9>
   331fe:	xchg   ax,ax
   33200:	add    r15d,ecx
   33203:	mov    eax,r15d
   33206:	sub    eax,r14d
   33209:	cmp    r15d,r14d
   3320c:	cmovge r15d,eax
   33210:	jmp    32ed2 <reorder_ref_pic_list+0xd2>
   33215:	nop    DWORD PTR [rax]
   33218:	mov    edx,0x2
   3321d:	lea    eax,[rsi+rsi*1+0x1]
   33221:	mov    DWORD PTR [rsp+0x30],eax
   33225:	shl    edx,cl
   33227:	jmp    32e58 <reorder_ref_pic_list+0x58>
   3322c:	nop    DWORD PTR [rax+0x0]

0000000000033230 <update_ref_list>:
   33230:	endbr64 
   33234:	mov    esi,DWORD PTR [rip+0x841c2]        # b73fc <dpb+0x1c>
   3323a:	test   esi,esi
   3323c:	je     332f9 <update_ref_list+0xc9>
   33242:	mov    rdx,QWORD PTR [rip+0x84197]        # b73e0 <dpb>
   33249:	lea    ecx,[rsi-0x1]
   3324c:	xor    esi,esi
   3324e:	mov    r8,QWORD PTR [rip+0x82c1b]        # b5e70 <active_sps>
   33255:	mov    r10,QWORD PTR [rip+0x8418c]        # b73e8 <dpb+0x8>
   3325c:	lea    rax,[rdx+0x8]
   33260:	lea    rdi,[rax+rcx*8]
   33264:	jmp    3329a <update_ref_list+0x6a>
   33266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33270:	mov    r9d,DWORD PTR [r8+0x47c]
   33277:	test   r9d,r9d
   3327a:	jne    3328e <update_ref_list+0x5e>
   3327c:	test   cl,0x1
   3327f:	jne    33380 <update_ref_list+0x150>
   33285:	and    ecx,0x2
   33288:	jne    33340 <update_ref_list+0x110>
   3328e:	mov    rdx,rax
   33291:	cmp    rax,rdi
   33294:	je     332f9 <update_ref_list+0xc9>
   33296:	add    rax,0x8
   3329a:	mov    rdx,QWORD PTR [rdx]
   3329d:	mov    ecx,DWORD PTR [rdx]
   3329f:	cmp    ecx,0x3
   332a2:	jne    33270 <update_ref_list+0x40>
   332a4:	mov    r9,QWORD PTR [rdx+0x28]
   332a8:	mov    r11d,DWORD PTR [r9+0x18ec]
   332af:	test   r11d,r11d
   332b2:	je     332c0 <update_ref_list+0x90>
   332b4:	mov    r11d,DWORD PTR [r9+0x18e8]
   332bb:	test   r11d,r11d
   332be:	je     332e8 <update_ref_list+0xb8>
   332c0:	mov    r9d,DWORD PTR [r8+0x47c]
   332c7:	test   r9d,r9d
   332ca:	jne    3328e <update_ref_list+0x5e>
   332cc:	mov    r9,QWORD PTR [rdx+0x30]
   332d0:	mov    r11d,DWORD PTR [r9+0x18ec]
   332d7:	test   r11d,r11d
   332da:	je     33340 <update_ref_list+0x110>
   332dc:	mov    r11d,DWORD PTR [r9+0x18e8]
   332e3:	test   r11d,r11d
   332e6:	jne    33285 <update_ref_list+0x55>
   332e8:	mov    ecx,esi
   332ea:	add    esi,0x1
   332ed:	mov    QWORD PTR [r10+rcx*8],rdx
   332f1:	mov    rdx,rax
   332f4:	cmp    rax,rdi
   332f7:	jne    33296 <update_ref_list+0x66>
   332f9:	mov    edx,DWORD PTR [rip+0x840f9]        # b73f8 <dpb+0x18>
   332ff:	mov    DWORD PTR [rip+0x840fb],esi        # b7400 <dpb+0x20>
   33305:	cmp    esi,edx
   33307:	jae    33378 <update_ref_list+0x148>
   33309:	sub    edx,0x1
   3330c:	mov    rcx,QWORD PTR [rip+0x840d5]        # b73e8 <dpb+0x8>
   33313:	mov    edi,esi
   33315:	sub    edx,esi
   33317:	add    rdx,rdi
   3331a:	lea    rax,[rcx+rdi*8]
   3331e:	lea    rdx,[rcx+rdx*8+0x8]
   33323:	nop    DWORD PTR [rax+rax*1+0x0]
   33328:	mov    QWORD PTR [rax],0x0
   3332f:	add    rax,0x8
   33333:	cmp    rdx,rax
   33336:	jne    33328 <update_ref_list+0xf8>
   33338:	ret    
   33339:	nop    DWORD PTR [rax+0x0]
   33340:	mov    rcx,QWORD PTR [rdx+0x38]
   33344:	mov    r9d,DWORD PTR [rcx+0x18ec]
   3334b:	test   r9d,r9d
   3334e:	je     3328e <update_ref_list+0x5e>
   33354:	mov    r11d,DWORD PTR [rcx+0x18e8]
   3335b:	test   r11d,r11d
   3335e:	jne    3328e <update_ref_list+0x5e>
   33364:	mov    ecx,esi
   33366:	add    esi,0x1
   33369:	mov    QWORD PTR [r10+rcx*8],rdx
   3336d:	jmp    332f1 <update_ref_list+0xc1>
   33372:	nop    WORD PTR [rax+rax*1+0x0]
   33378:	ret    
   33379:	nop    DWORD PTR [rax+0x0]
   33380:	mov    r9,QWORD PTR [rdx+0x30]
   33384:	mov    r11d,DWORD PTR [r9+0x18ec]
   3338b:	test   r11d,r11d
   3338e:	je     33285 <update_ref_list+0x55>
   33394:	jmp    332dc <update_ref_list+0xac>
   33399:	nop    DWORD PTR [rax+0x0]

00000000000333a0 <update_ltref_list>:
   333a0:	endbr64 
   333a4:	mov    esi,DWORD PTR [rip+0x84052]        # b73fc <dpb+0x1c>
   333aa:	test   esi,esi
   333ac:	je     33469 <update_ltref_list+0xc9>
   333b2:	mov    rdx,QWORD PTR [rip+0x84027]        # b73e0 <dpb>
   333b9:	lea    ecx,[rsi-0x1]
   333bc:	xor    esi,esi
   333be:	mov    r8,QWORD PTR [rip+0x82aab]        # b5e70 <active_sps>
   333c5:	mov    r10,QWORD PTR [rip+0x84024]        # b73f0 <dpb+0x10>
   333cc:	lea    rax,[rdx+0x8]
   333d0:	lea    rdi,[rax+rcx*8]
   333d4:	jmp    3340a <update_ltref_list+0x6a>
   333d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   333e0:	mov    r9d,DWORD PTR [r8+0x47c]
   333e7:	test   r9d,r9d
   333ea:	jne    333fe <update_ltref_list+0x5e>
   333ec:	test   cl,0x1
   333ef:	jne    334f0 <update_ltref_list+0x150>
   333f5:	and    ecx,0x2
   333f8:	jne    334b0 <update_ltref_list+0x110>
   333fe:	mov    rdx,rax
   33401:	cmp    rax,rdi
   33404:	je     33469 <update_ltref_list+0xc9>
   33406:	add    rax,0x8
   3340a:	mov    rdx,QWORD PTR [rdx]
   3340d:	mov    ecx,DWORD PTR [rdx]
   3340f:	cmp    ecx,0x3
   33412:	jne    333e0 <update_ltref_list+0x40>
   33414:	mov    r9,QWORD PTR [rdx+0x28]
   33418:	mov    r11d,DWORD PTR [r9+0x18ec]
   3341f:	test   r11d,r11d
   33422:	je     33430 <update_ltref_list+0x90>
   33424:	mov    r11d,DWORD PTR [r9+0x18e8]
   3342b:	test   r11d,r11d
   3342e:	jne    33458 <update_ltref_list+0xb8>
   33430:	mov    r9d,DWORD PTR [r8+0x47c]
   33437:	test   r9d,r9d
   3343a:	jne    333fe <update_ltref_list+0x5e>
   3343c:	mov    r9,QWORD PTR [rdx+0x30]
   33440:	mov    r11d,DWORD PTR [r9+0x18ec]
   33447:	test   r11d,r11d
   3344a:	je     334b0 <update_ltref_list+0x110>
   3344c:	mov    r11d,DWORD PTR [r9+0x18e8]
   33453:	test   r11d,r11d
   33456:	je     333f5 <update_ltref_list+0x55>
   33458:	mov    ecx,esi
   3345a:	add    esi,0x1
   3345d:	mov    QWORD PTR [r10+rcx*8],rdx
   33461:	mov    rdx,rax
   33464:	cmp    rax,rdi
   33467:	jne    33406 <update_ltref_list+0x66>
   33469:	mov    edx,DWORD PTR [rip+0x83f89]        # b73f8 <dpb+0x18>
   3346f:	mov    DWORD PTR [rip+0x83f8f],esi        # b7404 <dpb+0x24>
   33475:	cmp    esi,edx
   33477:	jae    334e8 <update_ltref_list+0x148>
   33479:	sub    edx,0x1
   3347c:	mov    rcx,QWORD PTR [rip+0x83f6d]        # b73f0 <dpb+0x10>
   33483:	mov    edi,esi
   33485:	sub    edx,esi
   33487:	add    rdx,rdi
   3348a:	lea    rax,[rcx+rdi*8]
   3348e:	lea    rdx,[rcx+rdx*8+0x8]
   33493:	nop    DWORD PTR [rax+rax*1+0x0]
   33498:	mov    QWORD PTR [rax],0x0
   3349f:	add    rax,0x8
   334a3:	cmp    rdx,rax
   334a6:	jne    33498 <update_ltref_list+0xf8>
   334a8:	ret    
   334a9:	nop    DWORD PTR [rax+0x0]
   334b0:	mov    rcx,QWORD PTR [rdx+0x38]
   334b4:	mov    r9d,DWORD PTR [rcx+0x18ec]
   334bb:	test   r9d,r9d
   334be:	je     333fe <update_ltref_list+0x5e>
   334c4:	mov    r11d,DWORD PTR [rcx+0x18e8]
   334cb:	test   r11d,r11d
   334ce:	je     333fe <update_ltref_list+0x5e>
   334d4:	mov    ecx,esi
   334d6:	add    esi,0x1
   334d9:	mov    QWORD PTR [r10+rcx*8],rdx
   334dd:	jmp    33461 <update_ltref_list+0xc1>
   334e2:	nop    WORD PTR [rax+rax*1+0x0]
   334e8:	ret    
   334e9:	nop    DWORD PTR [rax+0x0]
   334f0:	mov    r9,QWORD PTR [rdx+0x30]
   334f4:	mov    r11d,DWORD PTR [r9+0x18ec]
   334fb:	test   r11d,r11d
   334fe:	je     333f5 <update_ltref_list+0x55>
   33504:	jmp    3344c <update_ltref_list+0xac>
   33509:	nop    DWORD PTR [rax+0x0]

0000000000033510 <mm_update_max_long_term_frame_idx>:
   33510:	endbr64 
   33514:	mov    eax,DWORD PTR [rip+0x83eea]        # b7404 <dpb+0x24>
   3351a:	sub    edi,0x1
   3351d:	mov    DWORD PTR [rip+0x83ee9],edi        # b740c <dpb+0x2c>
   33523:	test   eax,eax
   33525:	je     33567 <mm_update_max_long_term_frame_idx+0x57>
   33527:	xor    ecx,ecx
   33529:	jmp    33541 <mm_update_max_long_term_frame_idx+0x31>
   3352b:	nop    DWORD PTR [rax+rax*1+0x0]
   33530:	add    ecx,0x1
   33533:	cmp    DWORD PTR [rip+0x83ecb],ecx        # b7404 <dpb+0x24>
   33539:	jbe    33567 <mm_update_max_long_term_frame_idx+0x57>
   3353b:	mov    edi,DWORD PTR [rip+0x83ecb]        # b740c <dpb+0x2c>
   33541:	mov    rdx,QWORD PTR [rip+0x83ea8]        # b73f0 <dpb+0x10>
   33548:	mov    eax,ecx
   3354a:	mov    r8,QWORD PTR [rdx+rax*8]
   3354e:	cmp    DWORD PTR [r8+0x1c],edi
   33552:	jle    33530 <mm_update_max_long_term_frame_idx+0x20>
   33554:	mov    rdi,r8
   33557:	call   30c40 <unmark_for_long_term_reference>
   3355c:	add    ecx,0x1
   3355f:	cmp    DWORD PTR [rip+0x83e9f],ecx        # b7404 <dpb+0x24>
   33565:	ja     3353b <mm_update_max_long_term_frame_idx+0x2b>
   33567:	ret    
   33568:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000033570 <flush_dpb>:
   33570:	endbr64 
   33574:	push   rbp
   33575:	push   rbx
   33576:	sub    rsp,0x8
   3357a:	mov    edx,DWORD PTR [rip+0x83e7c]        # b73fc <dpb+0x1c>
   33580:	test   edx,edx
   33582:	je     335b0 <flush_dpb+0x40>
   33584:	xor    ebx,ebx
   33586:	lea    rbp,[rip+0x83e53]        # b73e0 <dpb>
   3358d:	nop    DWORD PTR [rax]
   33590:	mov    rax,QWORD PTR [rbp+0x0]
   33594:	mov    edx,ebx
   33596:	add    ebx,0x1
   33599:	mov    rdi,QWORD PTR [rax+rdx*8]
   3359d:	call   31200 <unmark_for_reference>
   335a2:	cmp    DWORD PTR [rip+0x83e54],ebx        # b73fc <dpb+0x1c>
   335a8:	ja     33590 <flush_dpb+0x20>
   335aa:	nop    WORD PTR [rax+rax*1+0x0]
   335b0:	xor    eax,eax
   335b2:	call   31e90 <remove_unused_frame_from_dpb>
   335b7:	test   eax,eax
   335b9:	je     335d7 <flush_dpb+0x67>
   335bb:	xor    eax,eax
   335bd:	call   31e90 <remove_unused_frame_from_dpb>
   335c2:	test   eax,eax
   335c4:	jne    335b0 <flush_dpb+0x40>
   335c6:	jmp    335d7 <flush_dpb+0x67>
   335c8:	nop    DWORD PTR [rax+rax*1+0x0]
   335d0:	xor    eax,eax
   335d2:	call   31ef0 <output_one_frame_from_dpb>
   335d7:	mov    eax,DWORD PTR [rip+0x83e1f]        # b73fc <dpb+0x1c>
   335dd:	test   eax,eax
   335df:	jne    335d0 <flush_dpb+0x60>
   335e1:	mov    DWORD PTR [rip+0x83e1d],0x80000000        # b7408 <dpb+0x28>
   335eb:	add    rsp,0x8
   335ef:	pop    rbx
   335f0:	pop    rbp
   335f1:	ret    
   335f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   335fd:	nop    DWORD PTR [rax]

0000000000033600 <gen_field_ref_ids>:
   33600:	endbr64 
   33604:	xor    r9d,r9d
   33607:	cmp    DWORD PTR [rdi+0x18f8],0x3
   3360e:	jle    336dc <gen_field_ref_ids+0xdc>
   33614:	nop    DWORD PTR [rax+0x0]
   33618:	xor    eax,eax
   3361a:	cmp    DWORD PTR [rdi+0x18fc],0x3
   33621:	lea    rcx,[r9*8+0x0]
   33629:	jle    336bd <gen_field_ref_ids+0xbd>
   3362f:	nop
   33630:	mov    rdx,QWORD PTR [rdi+0x1950]
   33637:	xor    r8d,r8d
   3363a:	mov    rsi,QWORD PTR [rdx]
   3363d:	mov    rdx,QWORD PTR [rdx+0x8]
   33641:	mov    rsi,QWORD PTR [rsi+rcx*1]
   33645:	mov    rdx,QWORD PTR [rdx+rcx*1]
   33649:	movsx  rsi,WORD PTR [rsi+rax*2]
   3364e:	movsx  rdx,WORD PTR [rdx+rax*2]
   33653:	test   esi,esi
   33655:	js     3365c <gen_field_ref_ids+0x5c>
   33657:	mov    r8,QWORD PTR [rdi+rsi*8+0x18]
   3365c:	mov    rsi,QWORD PTR [rdi+0x1960]
   33663:	lea    r10,[rax*8+0x0]
   3366b:	mov    r11,QWORD PTR [rsi]
   3366e:	mov    r11,QWORD PTR [r11+rcx*1]
   33672:	mov    QWORD PTR [r11+rax*8],r8
   33676:	xor    r8d,r8d
   33679:	test   edx,edx
   3367b:	js     33685 <gen_field_ref_ids+0x85>
   3367d:	mov    r8,QWORD PTR [rdi+rdx*8+0x120]
   33685:	mov    rdx,QWORD PTR [rsi+0x8]
   33689:	mov    rdx,QWORD PTR [rdx+rcx*1]
   3368d:	mov    QWORD PTR [rdx+r10*1],r8
   33691:	mov    rdx,QWORD PTR [rdi+0x1978]
   33698:	mov    rdx,QWORD PTR [rdx+rcx*1]
   3369c:	mov    BYTE PTR [rdx+rax*1],0x1
   336a0:	mov    esi,DWORD PTR [rdi+0x18fc]
   336a6:	add    rax,0x1
   336aa:	lea    edx,[rsi+0x3]
   336ad:	test   esi,esi
   336af:	cmovns edx,esi
   336b2:	sar    edx,0x2
   336b5:	cmp    edx,eax
   336b7:	jg     33630 <gen_field_ref_ids+0x30>
   336bd:	mov    edx,DWORD PTR [rdi+0x18f8]
   336c3:	add    r9,0x1
   336c7:	lea    eax,[rdx+0x3]
   336ca:	test   edx,edx
   336cc:	cmovns eax,edx
   336cf:	sar    eax,0x2
   336d2:	cmp    eax,r9d
   336d5:	jg     33618 <gen_field_ref_ids+0x18>
   336db:	ret    
   336dc:	ret    
   336dd:	nop    DWORD PTR [rax]

00000000000336e0 <dpb_split_field>:
   336e0:	endbr64 
   336e4:	push   r15
   336e6:	push   r14
   336e8:	mov    r14,rdi
   336eb:	push   r13
   336ed:	push   r12
   336ef:	push   rbp
   336f0:	push   rbx
   336f1:	sub    rsp,0x58
   336f5:	mov    r12,QWORD PTR [rdi+0x28]
   336f9:	mov    eax,DWORD PTR [r12+0x4]
   336fe:	mov    r8d,DWORD PTR [r12+0x199c]
   33706:	mov    ebp,DWORD PTR [r12+0x18fc]
   3370e:	mov    DWORD PTR [rdi+0x24],eax
   33711:	test   r8d,r8d
   33714:	je     342f3 <dpb_split_field+0xc13>
   3371a:	mov    QWORD PTR [rdi+0x30],0x0
   33722:	mov    r15,r12
   33725:	mov    QWORD PTR [rdi+0x38],0x0
   3372d:	mov    QWORD PTR [r12+0x1980],0x0
   33739:	mov    QWORD PTR [r12+0x1988],0x0
   33745:	test   ebp,ebp
   33747:	lea    eax,[rbp+0x3]
   3374a:	cmovns eax,ebp
   3374d:	sar    eax,0x2
   33750:	mov    DWORD PTR [rsp+0x28],eax
   33754:	cmp    ebp,0x3
   33757:	jle    33cbc <dpb_split_field+0x5dc>
   3375d:	mov    ebx,DWORD PTR [r12+0x18f8]
   33765:	mov    eax,DWORD PTR [r12+0x199c]
   3376d:	test   ebx,ebx
   3376f:	mov    DWORD PTR [rsp+0x40],eax
   33773:	lea    eax,[rbx+0x3]
   33776:	cmovns eax,ebx
   33779:	mov    DWORD PTR [rsp+0x20],ebx
   3377d:	sar    eax,0x2
   33780:	mov    DWORD PTR [rsp],eax
   33783:	mov    ebx,DWORD PTR [rsp+0x20]
   33787:	mov    QWORD PTR [rsp+0x38],r15
   3378c:	mov    QWORD PTR [rsp+0x18],0x0
   33795:	test   ebx,ebx
   33797:	lea    eax,[rbx+0xf]
   3379a:	mov    DWORD PTR [rsp+0x44],ebp
   3379e:	cmovns eax,ebx
   337a1:	mov    QWORD PTR [rsp+0x48],r14
   337a6:	sar    eax,0x4
   337a9:	mov    DWORD PTR [rsp+0x34],eax
   337ad:	nop    DWORD PTR [rax]
   337b0:	cmp    DWORD PTR [rsp+0x20],0x3
   337b5:	jle    339ba <dpb_split_field+0x2da>
   337bb:	mov    rbx,QWORD PTR [rsp+0x18]
   337c0:	mov    r14d,DWORD PTR [r12+0x1910]
   337c8:	mov    rdi,QWORD PTR [r12+0x1950]
   337d0:	mov    rdx,QWORD PTR [r12+0x1960]
   337d8:	mov    eax,ebx
   337da:	lea    r15,[rbx+rbx*1]
   337de:	lea    rcx,[rbx*8+0x0]
   337e6:	sar    eax,0x3
   337e9:	imul   eax,DWORD PTR [rsp+0x34]
   337ee:	mov    DWORD PTR [rsp+0x8],eax
   337f2:	mov    eax,ebx
   337f4:	sar    eax,0x2
   337f7:	and    eax,0x1
   337fa:	mov    DWORD PTR [rsp+0x10],eax
   337fe:	xor    eax,eax
   33800:	jmp    3394c <dpb_split_field+0x26c>
   33805:	nop    DWORD PTR [rax]
   33808:	mov    ebx,DWORD PTR [rsp+0x10]
   3380c:	mov    esi,eax
   3380e:	mov    r9,QWORD PTR [r12+0x1948]
   33816:	sar    esi,0x2
   33819:	add    esi,DWORD PTR [rsp+0x8]
   3381d:	lea    esi,[rbx+rsi*2]
   33820:	movsxd r8,esi
   33823:	cmp    BYTE PTR [r9+r8*1],0x0
   33828:	je     33955 <dpb_split_field+0x275>
   3382e:	and    esi,0x1
   33831:	mov    r10,QWORD PTR [rdi]
   33834:	mov    rbx,QWORD PTR [rdi+0x8]
   33838:	lea    r11,[rax*8+0x0]
   33840:	cmp    esi,0x1
   33843:	mov    r8d,esi
   33846:	sbb    r13,r13
   33849:	mov    r10,QWORD PTR [r10+rax*8]
   3384d:	mov    rbx,QWORD PTR [rbx+rax*8]
   33851:	and    r13,0xfffffffffffffff0
   33855:	add    r13,0x28
   33859:	cmp    esi,0x1
   3385c:	movsx  ebx,WORD PTR [rbx+r15*1]
   33861:	movsx  r10,WORD PTR [r10+r15*1]
   33866:	sbb    esi,esi
   33868:	and    esi,0xfffffffe
   3386b:	mov    DWORD PTR [rsp+0x30],ebx
   3386f:	add    esi,0x5
   33872:	cmp    r8d,0x1
   33876:	sbb    r9,r9
   33879:	and    r9,0xfffffffffffffff0
   3387d:	add    r9,0x20
   33881:	cmp    r8d,0x1
   33885:	sbb    r8d,r8d
   33888:	xor    ebp,ebp
   3388a:	and    r8d,0xfffffffe
   3388e:	add    r8d,0x4
   33892:	test   r10d,r10d
   33895:	js     338b4 <dpb_split_field+0x1d4>
   33897:	movsxd rbp,r8d
   3389a:	mov    rbx,rbp
   3389d:	shl    rbx,0x5
   338a1:	add    rbp,rbx
   338a4:	mov    rbx,rbp
   338a7:	movsxd rbp,r10d
   338aa:	lea    rbp,[rbp+rbx*1+0x2]
   338af:	mov    rbp,QWORD PTR [r12+rbp*8+0x8]
   338b4:	mov    r9,QWORD PTR [rdx+r9*1]
   338b8:	movsxd rbx,DWORD PTR [rsp+0x30]
   338bd:	mov    r9,QWORD PTR [r9+r11*1]
   338c1:	mov    QWORD PTR [r9+rcx*1],rbp
   338c5:	test   ebx,ebx
   338c7:	js     34038 <dpb_split_field+0x958>
   338cd:	movsxd rsi,esi
   338d0:	mov    rbp,QWORD PTR [rdx+r13*1]
   338d4:	mov    r9,rsi
   338d7:	shl    r9,0x5
   338db:	mov    rbp,QWORD PTR [rbp+r11*1+0x0]
   338e0:	add    r9,rsi
   338e3:	lea    r9,[r9+rbx*1+0x2]
   338e8:	mov    r9,QWORD PTR [r12+r9*8+0x8]
   338ed:	mov    QWORD PTR [rbp+rcx*1+0x0],r9
   338f2:	test   r10d,r10d
   338f5:	js     34080 <dpb_split_field+0x9a0>
   338fb:	movsxd r8,r8d
   338fe:	mov    r9,r8
   33901:	shl    r9,0x5
   33905:	add    r8,r9
   33908:	lea    r8,[r10+r8*1+0xc8]
   33910:	mov    r9,QWORD PTR [r12+r8*8+0x8]
   33915:	mov    r8,QWORD PTR [rdx]
   33918:	mov    r8,QWORD PTR [r8+r11*1]
   3391c:	mov    QWORD PTR [r8+rcx*1],r9
   33920:	mov    r8,rsi
   33923:	shl    r8,0x5
   33927:	add    rsi,r8
   3392a:	lea    rsi,[rsi+rbx*1+0xc8]
   33932:	mov    r8,QWORD PTR [r12+rsi*8+0x8]
   33937:	mov    rsi,QWORD PTR [rdx+0x8]
   3393b:	add    rax,0x1
   3393f:	mov    rsi,QWORD PTR [rsi+r11*1]
   33943:	mov    QWORD PTR [rsi+rcx*1],r8
   33947:	cmp    DWORD PTR [rsp],eax
   3394a:	jle    339ba <dpb_split_field+0x2da>
   3394c:	test   r14d,r14d
   3394f:	jne    33808 <dpb_split_field+0x128>
   33955:	mov    rsi,QWORD PTR [rdi]
   33958:	lea    r9,[rax*8+0x0]
   33960:	mov    r10,0xffffffffffffffff
   33967:	mov    rsi,QWORD PTR [rsi+rax*8]
   3396b:	movsx  r8,WORD PTR [rsi+r15*1]
   33970:	mov    rsi,QWORD PTR [rdi+0x8]
   33974:	mov    rsi,QWORD PTR [rsi+rax*8]
   33978:	movsx  rsi,WORD PTR [rsi+r15*1]
   3397d:	test   r8d,r8d
   33980:	js     33987 <dpb_split_field+0x2a7>
   33982:	mov    r10,QWORD PTR [r12+r8*8+0x18]
   33987:	mov    r8,QWORD PTR [rdx]
   3398a:	mov    r8,QWORD PTR [r8+r9*1]
   3398e:	mov    QWORD PTR [r8+rcx*1],r10
   33992:	mov    r8,0xffffffffffffffff
   33999:	test   esi,esi
   3399b:	js     339a5 <dpb_split_field+0x2c5>
   3399d:	mov    r8,QWORD PTR [r12+rsi*8+0x120]
   339a5:	mov    rsi,QWORD PTR [rdx+0x8]
   339a9:	add    rax,0x1
   339ad:	mov    rsi,QWORD PTR [rsi+r9*1]
   339b1:	mov    QWORD PTR [rsi+rcx*1],r8
   339b5:	cmp    DWORD PTR [rsp],eax
   339b8:	jg     3394c <dpb_split_field+0x26c>
   339ba:	add    QWORD PTR [rsp+0x18],0x1
   339c0:	mov    rax,QWORD PTR [rsp+0x18]
   339c5:	cmp    DWORD PTR [rsp+0x28],eax
   339c9:	jg     337b0 <dpb_split_field+0xd0>
   339cf:	mov    edi,DWORD PTR [rsp+0x40]
   339d3:	mov    r15,QWORD PTR [rsp+0x38]
   339d8:	mov    ebp,DWORD PTR [rsp+0x44]
   339dc:	mov    r14,QWORD PTR [rsp+0x48]
   339e1:	test   edi,edi
   339e3:	jne    33cbc <dpb_split_field+0x5dc>
   339e9:	cmp    DWORD PTR [rsp+0x20],0x3
   339ee:	jle    340d0 <dpb_split_field+0x9f0>
   339f4:	mov    QWORD PTR [rsp+0x8],0x0
   339fd:	mov    esi,DWORD PTR [r12+0x18f8]
   33a05:	nop    DWORD PTR [rax]
   33a08:	mov    rbx,QWORD PTR [rsp+0x8]
   33a0d:	mov    eax,ebx
   33a0f:	lea    rdx,[rbx*8+0x0]
   33a17:	sar    eax,0x2
   33a1a:	mov    DWORD PTR [rsp],eax
   33a1d:	xor    eax,eax
   33a1f:	cmp    ebp,0x7
   33a22:	jg     33ca5 <dpb_split_field+0x5c5>
   33a28:	jmp    342d0 <dpb_split_field+0xbf0>
   33a2d:	nop    DWORD PTR [rax]
   33a30:	mov    r8d,eax
   33a33:	lea    ecx,[rsi+0xf]
   33a36:	sar    r8d,0x2
   33a3a:	test   esi,esi
   33a3c:	cmovns ecx,esi
   33a3f:	mov    esi,eax
   33a41:	sar    esi,1
   33a43:	sar    ecx,0x4
   33a46:	and    esi,0x1
   33a49:	imul   ecx,r8d
   33a4d:	add    ecx,DWORD PTR [rsp]
   33a50:	lea    ecx,[rsi+rcx*2]
   33a53:	mov    rsi,QWORD PTR [r12+0x1948]
   33a5b:	movsxd rcx,ecx
   33a5e:	cmp    BYTE PTR [rsi+rcx*1],0x0
   33a62:	je     33cb7 <dpb_split_field+0x5d7>
   33a68:	mov    rcx,QWORD PTR [r14+0x30]
   33a6c:	and    edi,0x3
   33a6f:	mov    rcx,QWORD PTR [rcx+0x1978]
   33a76:	mov    rcx,QWORD PTR [rcx+rdx*1]
   33a7a:	mov    BYTE PTR [rcx+rax*1],0x1
   33a7e:	mov    rcx,QWORD PTR [r14+0x38]
   33a82:	mov    rcx,QWORD PTR [rcx+0x1978]
   33a89:	mov    rcx,QWORD PTR [rcx+rdx*1]
   33a8d:	mov    BYTE PTR [rcx+rax*1],0x1
   33a91:	mov    rcx,QWORD PTR [r14+0x28]
   33a95:	mov    rcx,QWORD PTR [rcx+0x1978]
   33a9c:	mov    rcx,QWORD PTR [rcx+rdx*1]
   33aa0:	mov    BYTE PTR [rcx+rax*2+0x1],0x1
   33aa5:	mov    rcx,QWORD PTR [r14+0x28]
   33aa9:	mov    rcx,QWORD PTR [rcx+0x1978]
   33ab0:	mov    rcx,QWORD PTR [rcx+rdx*1]
   33ab4:	mov    BYTE PTR [rcx+rax*2],0x1
   33ab8:	mov    r12,QWORD PTR [r14+0x28]
   33abc:	mov    rbx,QWORD PTR [r14+0x38]
   33ac0:	mov    r9,QWORD PTR [r12+0x1968]
   33ac8:	mov    r15,r12
   33acb:	mov    rcx,QWORD PTR [r9]
   33ace:	mov    r11,QWORD PTR [rcx+rdx*1]
   33ad2:	lea    ecx,[rdi+r8*8]
   33ad6:	mov    rdi,QWORD PTR [rbx+0x1968]
   33add:	movsxd rcx,ecx
   33ae0:	mov    r8,QWORD PTR [rdi]
   33ae3:	add    rcx,0x4
   33ae7:	mov    r10,QWORD PTR [r11+rcx*8]
   33aeb:	lea    rsi,[rcx*8+0x0]
   33af3:	lea    r13,[rcx+rcx*1]
   33af7:	mov    r8,QWORD PTR [r8+rdx*1]
   33afb:	movzx  ebp,WORD PTR [r10]
   33aff:	mov    r8,QWORD PTR [r8+rax*8]
   33b03:	mov    WORD PTR [r8],bp
   33b07:	movzx  r10d,WORD PTR [r10+0x2]
   33b0c:	mov    WORD PTR [r8+0x2],r10w
   33b11:	mov    r8,QWORD PTR [r9+0x8]
   33b15:	mov    r10,QWORD PTR [r8+rdx*1]
   33b19:	mov    QWORD PTR [rsp+0x10],r10
   33b1e:	mov    rdi,QWORD PTR [rdi+0x8]
   33b22:	mov    r8,QWORD PTR [r10+rcx*8]
   33b26:	mov    rdi,QWORD PTR [rdi+rdx*1]
   33b2a:	movzx  r9d,WORD PTR [r8]
   33b2e:	mov    rdi,QWORD PTR [rdi+rax*8]
   33b32:	mov    WORD PTR [rdi],r9w
   33b36:	movzx  r8d,WORD PTR [r8+0x2]
   33b3b:	mov    WORD PTR [rdi+0x2],r8w
   33b40:	mov    r8,QWORD PTR [r12+0x1950]
   33b48:	mov    rdi,QWORD PTR [r8]
   33b4b:	mov    r8,QWORD PTR [r8+0x8]
   33b4f:	mov    r9,QWORD PTR [rdi+rdx*1]
   33b53:	mov    rdi,QWORD PTR [rbx+0x1950]
   33b5a:	mov    r8,QWORD PTR [r8+rdx*1]
   33b5e:	mov    rbx,QWORD PTR [rbx+0x1960]
   33b65:	mov    rbp,QWORD PTR [rdi]
   33b68:	movzx  r10d,WORD PTR [r9+rcx*2]
   33b6d:	mov    rdi,QWORD PTR [rdi+0x8]
   33b71:	mov    rbp,QWORD PTR [rbp+rdx*1+0x0]
   33b76:	mov    rdi,QWORD PTR [rdi+rdx*1]
   33b7a:	mov    WORD PTR [rbp+rax*2+0x0],r10w
   33b80:	movzx  ebp,WORD PTR [r8+rcx*2]
   33b85:	mov    WORD PTR [rdi+rax*2],bp
   33b89:	mov    rdi,QWORD PTR [r12+0x1960]
   33b91:	mov    rbp,QWORD PTR [rdi+0x20]
   33b95:	mov    rbp,QWORD PTR [rbp+rdx*1+0x0]
   33b9a:	mov    r10,QWORD PTR [rbp+rcx*8+0x0]
   33b9f:	mov    rbp,QWORD PTR [rbx]
   33ba2:	mov    rbp,QWORD PTR [rbp+rdx*1+0x0]
   33ba7:	mov    QWORD PTR [rbp+rax*8+0x0],r10
   33bac:	mov    rbp,QWORD PTR [rdi+0x28]
   33bb0:	mov    rbp,QWORD PTR [rbp+rdx*1+0x0]
   33bb5:	mov    rcx,QWORD PTR [rbp+rcx*8+0x0]
   33bba:	mov    rbx,QWORD PTR [rbx+0x8]
   33bbe:	mov    rbp,QWORD PTR [r11+rsi*1-0x20]
   33bc3:	mov    rbx,QWORD PTR [rbx+rdx*1]
   33bc7:	movzx  r10d,WORD PTR [rbp+0x0]
   33bcc:	mov    QWORD PTR [rbx+rax*8],rcx
   33bd0:	mov    rcx,QWORD PTR [r14+0x30]
   33bd4:	mov    r11,QWORD PTR [rcx+0x1968]
   33bdb:	mov    rbx,QWORD PTR [r11]
   33bde:	mov    rbx,QWORD PTR [rbx+rdx*1]
   33be2:	mov    rbx,QWORD PTR [rbx+rax*8]
   33be6:	mov    WORD PTR [rbx],r10w
   33bea:	movzx  ebp,WORD PTR [rbp+0x2]
   33bee:	mov    r10,QWORD PTR [r11+0x8]
   33bf2:	mov    WORD PTR [rbx+0x2],bp
   33bf6:	mov    rbx,QWORD PTR [rsp+0x10]
   33bfb:	mov    r10,QWORD PTR [r10+rdx*1]
   33bff:	mov    rbx,QWORD PTR [rbx+rsi*1-0x20]
   33c04:	mov    r10,QWORD PTR [r10+rax*8]
   33c08:	movzx  r11d,WORD PTR [rbx]
   33c0c:	mov    WORD PTR [r10],r11w
   33c10:	movzx  r11d,WORD PTR [rbx+0x2]
   33c15:	mov    WORD PTR [r10+0x2],r11w
   33c1a:	mov    r10,QWORD PTR [rcx+0x1950]
   33c21:	movzx  r11d,WORD PTR [r9+r13*1-0x8]
   33c27:	mov    r9,QWORD PTR [r10]
   33c2a:	mov    r9,QWORD PTR [r9+rdx*1]
   33c2e:	mov    WORD PTR [r9+rax*2],r11w
   33c33:	movzx  r9d,WORD PTR [r8+r13*1-0x8]
   33c39:	mov    r8,QWORD PTR [r10+0x8]
   33c3d:	mov    r8,QWORD PTR [r8+rdx*1]
   33c41:	mov    WORD PTR [r8+rax*2],r9w
   33c46:	mov    rcx,QWORD PTR [rcx+0x1960]
   33c4d:	mov    r8,QWORD PTR [rdi+0x10]
   33c51:	mov    rdi,QWORD PTR [rdi+0x18]
   33c55:	mov    r8,QWORD PTR [r8+rdx*1]
   33c59:	mov    rdi,QWORD PTR [rdi+rdx*1]
   33c5d:	mov    r9,QWORD PTR [r8+rsi*1-0x20]
   33c62:	mov    r8,QWORD PTR [rcx]
   33c65:	mov    rcx,QWORD PTR [rcx+0x8]
   33c69:	mov    r8,QWORD PTR [r8+rdx*1]
   33c6d:	mov    rcx,QWORD PTR [rcx+rdx*1]
   33c71:	mov    QWORD PTR [r8+rax*8],r9
   33c75:	mov    rsi,QWORD PTR [rdi+rsi*1-0x20]
   33c7a:	mov    QWORD PTR [rcx+rax*8],rsi
   33c7e:	mov    ebp,DWORD PTR [r12+0x18fc]
   33c86:	add    rax,0x1
   33c8a:	mov    esi,DWORD PTR [r12+0x18f8]
   33c92:	test   ebp,ebp
   33c94:	lea    ecx,[rbp+0x7]
   33c97:	cmovns ecx,ebp
   33c9a:	sar    ecx,0x3
   33c9d:	cmp    ecx,eax
   33c9f:	jle    342d0 <dpb_split_field+0xbf0>
   33ca5:	mov    ecx,DWORD PTR [r12+0x1910]
   33cad:	mov    edi,eax
   33caf:	test   ecx,ecx
   33cb1:	jne    33a30 <dpb_split_field+0x350>
   33cb7:	mov    r15,r12
   33cba:	jmp    33c7e <dpb_split_field+0x59e>
   33cbc:	mov    rax,QWORD PTR [rip+0x821ad]        # b5e70 <active_sps>
   33cc3:	mov    esi,DWORD PTR [rax+0x484]
   33cc9:	test   esi,esi
   33ccb:	jne    340af <dpb_split_field+0x9cf>
   33cd1:	mov    esi,DWORD PTR [r12+0x18f8]
   33cd9:	mov    QWORD PTR [rsp+0x20],0x0
   33ce2:	cmp    esi,0x3
   33ce5:	jle    340be <dpb_split_field+0x9de>
   33ceb:	mov    QWORD PTR [rsp],r15
   33cef:	nop
   33cf0:	cmp    ebp,0x7
   33cf3:	jle    34280 <dpb_split_field+0xba0>
   33cf9:	mov    rdi,QWORD PTR [rsp+0x20]
   33cfe:	mov    eax,edi
   33d00:	mov    edx,edi
   33d02:	lea    r15,[rdi*8+0x0]
   33d0a:	sar    eax,0x2
   33d0d:	and    edx,0xfffffffe
   33d10:	mov    DWORD PTR [rsp+0x18],eax
   33d14:	mov    eax,edi
   33d16:	movsxd rdx,edx
   33d19:	or     eax,0x1
   33d1c:	shl    rdx,0x3
   33d20:	cdqe   
   33d22:	shl    rax,0x3
   33d26:	and    edi,0x2
   33d29:	cmove  rax,rdx
   33d2d:	xor    r8d,r8d
   33d30:	mov    QWORD PTR [rsp+0x8],rax
   33d35:	jmp    33da0 <dpb_split_field+0x6c0>
   33d37:	nop    WORD PTR [rax+rax*1+0x0]
   33d40:	test   esi,esi
   33d42:	lea    edx,[rsi+0xf]
   33d45:	mov    ecx,r8d
   33d48:	cmovns edx,esi
   33d4b:	sar    ecx,0x2
   33d4e:	sar    edx,0x4
   33d51:	imul   edx,ecx
   33d54:	mov    ecx,r8d
   33d57:	add    edx,DWORD PTR [rsp+0x18]
   33d5b:	sar    ecx,1
   33d5d:	and    ecx,0x1
   33d60:	lea    edx,[rcx+rdx*2]
   33d63:	mov    rcx,QWORD PTR [r12+0x1948]
   33d6b:	movsxd rdx,edx
   33d6e:	cmp    BYTE PTR [rcx+rdx*1],0x0
   33d72:	je     33daf <dpb_split_field+0x6cf>
   33d74:	mov    QWORD PTR [rsp],r12
   33d78:	mov    ebp,DWORD PTR [r12+0x18fc]
   33d80:	add    r8,0x1
   33d84:	mov    esi,DWORD PTR [r12+0x18f8]
   33d8c:	test   ebp,ebp
   33d8e:	lea    eax,[rbp+0x7]
   33d91:	cmovns eax,ebp
   33d94:	sar    eax,0x3
   33d97:	cmp    eax,r8d
   33d9a:	jle    34280 <dpb_split_field+0xba0>
   33da0:	mov    edx,DWORD PTR [r12+0x1910]
   33da8:	mov    eax,r8d
   33dab:	test   edx,edx
   33dad:	jne    33d40 <dpb_split_field+0x660>
   33daf:	mov    rcx,QWORD PTR [r12+0x1978]
   33db7:	lea    rdx,[r8+r8*1]
   33dbb:	mov    rcx,QWORD PTR [rcx+r15*1]
   33dbf:	mov    BYTE PTR [rcx+r8*2],0x0
   33dc4:	mov    rcx,QWORD PTR [r14+0x28]
   33dc8:	mov    rcx,QWORD PTR [rcx+0x1978]
   33dcf:	mov    rcx,QWORD PTR [rcx+r15*1]
   33dd3:	mov    BYTE PTR [rcx+rdx*1+0x1],0x0
   33dd8:	mov    r12,QWORD PTR [r14+0x28]
   33ddc:	mov    r13d,DWORD PTR [r12+0x199c]
   33de4:	mov    QWORD PTR [rsp],r12
   33de8:	test   r13d,r13d
   33deb:	jne    33d78 <dpb_split_field+0x698>
   33ded:	mov    rcx,QWORD PTR [r14+0x38]
   33df1:	mov    rdi,QWORD PTR [rsp+0x8]
   33df6:	mov    ebx,eax
   33df8:	and    ebx,0x2
   33dfb:	mov    rcx,QWORD PTR [rcx+0x1978]
   33e02:	mov    DWORD PTR [rsp+0x30],ebx
   33e06:	mov    rcx,QWORD PTR [rcx+r15*1]
   33e0a:	mov    BYTE PTR [rcx+r8*1],0x0
   33e0f:	mov    rcx,QWORD PTR [r14+0x30]
   33e13:	mov    rcx,QWORD PTR [rcx+0x1978]
   33e1a:	mov    rcx,QWORD PTR [rcx+r15*1]
   33e1e:	mov    BYTE PTR [rcx+r8*1],0x0
   33e23:	mov    r12,QWORD PTR [r14+0x28]
   33e27:	mov    r10,QWORD PTR [r12+0x1968]
   33e2f:	mov    QWORD PTR [rsp],r12
   33e33:	mov    rcx,QWORD PTR [r10]
   33e36:	mov    rsi,QWORD PTR [rcx+rdi*1]
   33e3a:	mov    ecx,eax
   33e3c:	je     34230 <dpb_split_field+0xb50>
   33e42:	or     ecx,0x1
   33e45:	add    ecx,ecx
   33e47:	movsxd rcx,ecx
   33e4a:	lea    rdi,[rcx*8+0x0]
   33e52:	mov    QWORD PTR [rsp+0x10],rdi
   33e57:	mov    r13,QWORD PTR [r14+0x38]
   33e5b:	lea    rdi,[r8*8+0x0]
   33e63:	mov    rbx,QWORD PTR [rsp+0x10]
   33e68:	mov    QWORD PTR [rsp+0x28],rdi
   33e6d:	mov    r10,QWORD PTR [r10+0x8]
   33e71:	mov    r9,QWORD PTR [r13+0x1968]
   33e78:	mov    rbp,QWORD PTR [rsi+rbx*1]
   33e7c:	mov    rsi,QWORD PTR [r9]
   33e7f:	movzx  ecx,WORD PTR [rbp+0x0]
   33e83:	mov    rsi,QWORD PTR [rsi+r15*1]
   33e87:	mov    rbx,QWORD PTR [rsi+r8*8]
   33e8b:	mov    rsi,QWORD PTR [r14+0x30]
   33e8f:	mov    rdi,QWORD PTR [rsi+0x1968]
   33e96:	mov    WORD PTR [rbx],cx
   33e99:	mov    r11,QWORD PTR [rdi]
   33e9c:	mov    rdi,QWORD PTR [rdi+0x8]
   33ea0:	mov    r11,QWORD PTR [r11+r15*1]
   33ea4:	mov    rdi,QWORD PTR [rdi+r15*1]
   33ea8:	mov    r11,QWORD PTR [r11+r8*8]
   33eac:	mov    rdi,QWORD PTR [rdi+r8*8]
   33eb0:	mov    WORD PTR [r11],cx
   33eb4:	movzx  ebp,WORD PTR [rbp+0x2]
   33eb8:	mov    rcx,QWORD PTR [r9+0x8]
   33ebc:	mov    WORD PTR [rbx+0x2],bp
   33ec0:	mov    rbx,QWORD PTR [rsp+0x10]
   33ec5:	mov    WORD PTR [r11+0x2],bp
   33eca:	mov    r11,QWORD PTR [rsp+0x8]
   33ecf:	mov    rcx,QWORD PTR [rcx+r15*1]
   33ed3:	mov    r10,QWORD PTR [r10+r11*1]
   33ed7:	mov    rcx,QWORD PTR [rcx+r8*8]
   33edb:	mov    r10,QWORD PTR [r10+rbx*1]
   33edf:	movzx  r9d,WORD PTR [r10]
   33ee3:	mov    WORD PTR [rcx],r9w
   33ee7:	mov    WORD PTR [rdi],r9w
   33eeb:	movzx  r9d,WORD PTR [r10+0x2]
   33ef0:	mov    ebp,DWORD PTR [rsp+0x30]
   33ef4:	mov    WORD PTR [rcx+0x2],r9w
   33ef9:	mov    WORD PTR [rdi+0x2],r9w
   33efe:	mov    rdi,QWORD PTR [r12+0x1950]
   33f06:	mov    rcx,QWORD PTR [rdi]
   33f09:	mov    rcx,QWORD PTR [rcx+r11*1]
   33f0d:	test   ebp,ebp
   33f0f:	je     34220 <dpb_split_field+0xb40>
   33f15:	or     eax,0x1
   33f18:	add    eax,eax
   33f1a:	cdqe   
   33f1c:	add    rax,rax
   33f1f:	mov    r9,QWORD PTR [r13+0x1950]
   33f26:	movsx  rcx,WORD PTR [rcx+rax*1]
   33f2b:	mov    r10,QWORD PTR [r9]
   33f2e:	mov    rbx,QWORD PTR [r10+r15*1]
   33f32:	mov    r10,QWORD PTR [rsi+0x1950]
   33f39:	mov    r11,QWORD PTR [r10]
   33f3c:	add    rbx,rdx
   33f3f:	mov    rbp,QWORD PTR [r11+r15*1]
   33f43:	add    rbp,rdx
   33f46:	cmp    cx,0xffff
   33f4a:	je     34268 <dpb_split_field+0xb88>
   33f50:	mov    r11,QWORD PTR [rsi+0x1960]
   33f57:	mov    WORD PTR [rbx],cx
   33f5a:	lea    rbx,[r8*8+0x0]
   33f62:	mov    WORD PTR [rbp+0x0],cx
   33f66:	mov    r11,QWORD PTR [r11]
   33f69:	add    rbx,QWORD PTR [r11+r15*1]
   33f6d:	mov    r11,rbx
   33f70:	test   cx,cx
   33f73:	js     342b0 <dpb_split_field+0xbd0>
   33f79:	lea    rcx,[r12+rcx*8]
   33f7d:	mov    rbx,QWORD PTR [rcx+0xc78]
   33f84:	mov    QWORD PTR [r11],rbx
   33f87:	mov    rcx,QWORD PTR [rcx+0x12a8]
   33f8e:	mov    r11,QWORD PTR [r13+0x1960]
   33f95:	lea    rbx,[r8*8+0x0]
   33f9d:	mov    r11,QWORD PTR [r11]
   33fa0:	mov    r11,QWORD PTR [r11+r15*1]
   33fa4:	mov    QWORD PTR [r11+rbx*1],rcx
   33fa8:	mov    rcx,QWORD PTR [rdi+0x8]
   33fac:	mov    rdi,QWORD PTR [rsp+0x8]
   33fb1:	mov    rcx,QWORD PTR [rcx+rdi*1]
   33fb5:	mov    rdi,QWORD PTR [r10+0x8]
   33fb9:	movsx  rax,WORD PTR [rcx+rax*1]
   33fbe:	mov    rcx,QWORD PTR [r9+0x8]
   33fc2:	mov    rbx,QWORD PTR [rcx+r15*1]
   33fc6:	add    rbx,rdx
   33fc9:	add    rdx,QWORD PTR [rdi+r15*1]
   33fcd:	mov    rcx,rbx
   33fd0:	cmp    ax,0xffff
   33fd4:	je     34250 <dpb_split_field+0xb70>
   33fda:	mov    WORD PTR [rbx],ax
   33fdd:	lea    rdi,[r8*8+0x0]
   33fe5:	mov    WORD PTR [rdx],ax
   33fe8:	mov    rdx,QWORD PTR [rsi+0x1960]
   33fef:	mov    rdx,QWORD PTR [rdx+0x8]
   33ff3:	add    rdi,QWORD PTR [rdx+r15*1]
   33ff7:	test   ax,ax
   33ffa:	js     342c0 <dpb_split_field+0xbe0>
   34000:	lea    rax,[r12+rax*8]
   34004:	mov    rcx,QWORD PTR [rax+0xd80]
   3400b:	mov    QWORD PTR [rdi],rcx
   3400e:	mov    rax,QWORD PTR [rax+0x13b0]
   34015:	mov    rdx,QWORD PTR [r13+0x1960]
   3401c:	lea    rdi,[r8*8+0x0]
   34024:	mov    rdx,QWORD PTR [rdx+0x8]
   34028:	mov    rdx,QWORD PTR [rdx+r15*1]
   3402c:	mov    QWORD PTR [rdx+rdi*1],rax
   34030:	jmp    33d78 <dpb_split_field+0x698>
   34035:	nop    DWORD PTR [rax]
   34038:	mov    rsi,QWORD PTR [rdx+r13*1]
   3403c:	mov    rsi,QWORD PTR [rsi+r11*1]
   34040:	mov    QWORD PTR [rsi+rcx*1],0x0
   34048:	test   r10d,r10d
   3404b:	js     34098 <dpb_split_field+0x9b8>
   3404d:	movsxd r8,r8d
   34050:	mov    rsi,r8
   34053:	shl    rsi,0x5
   34057:	add    r8,rsi
   3405a:	lea    rsi,[r10+r8*1+0xc8]
   34062:	mov    r8,QWORD PTR [r12+rsi*8+0x8]
   34067:	mov    rsi,QWORD PTR [rdx]
   3406a:	mov    rsi,QWORD PTR [rsi+r11*1]
   3406e:	mov    QWORD PTR [rsi+rcx*1],r8
   34072:	xor    r8d,r8d
   34075:	jmp    33937 <dpb_split_field+0x257>
   3407a:	nop    WORD PTR [rax+rax*1+0x0]
   34080:	mov    r8,QWORD PTR [rdx]
   34083:	mov    r8,QWORD PTR [r8+r11*1]
   34087:	mov    QWORD PTR [r8+rcx*1],0x0
   3408f:	jmp    33920 <dpb_split_field+0x240>
   34094:	nop    DWORD PTR [rax+0x0]
   34098:	mov    rsi,QWORD PTR [rdx]
   3409b:	xor    r8d,r8d
   3409e:	mov    rsi,QWORD PTR [rsi+r11*1]
   340a2:	mov    QWORD PTR [rsi+rcx*1],0x0
   340aa:	jmp    33937 <dpb_split_field+0x257>
   340af:	cmp    DWORD PTR [r12+0x18f8],0x3
   340b8:	jg     339f4 <dpb_split_field+0x314>
   340be:	cmp    ebp,0x3
   340c1:	jle    34768 <dpb_split_field+0x1088>
   340c7:	nop    WORD PTR [rax+rax*1+0x0]
   340d0:	xor    esi,esi
   340d2:	nop    WORD PTR [rax+rax*1+0x0]
   340d8:	xor    edx,edx
   340da:	cmp    DWORD PTR [r12+0x18f8],0x3
   340e3:	jle    3411a <dpb_split_field+0xa3a>
   340e5:	nop    DWORD PTR [rax]
   340e8:	mov    rax,QWORD PTR [r12+0x1978]
   340f0:	mov    rax,QWORD PTR [rax+rdx*8]
   340f4:	add    rdx,0x1
   340f8:	mov    BYTE PTR [rax+rsi*1],0x0
   340fc:	mov    r12,QWORD PTR [r14+0x28]
   34100:	mov    ecx,DWORD PTR [r12+0x18f8]
   34108:	mov    r15,r12
   3410b:	test   ecx,ecx
   3410d:	lea    eax,[rcx+0x3]
   34110:	cmovns eax,ecx
   34113:	sar    eax,0x2
   34116:	cmp    eax,edx
   34118:	jg     340e8 <dpb_split_field+0xa08>
   3411a:	mov    edx,DWORD PTR [r12+0x18fc]
   34122:	add    rsi,0x1
   34126:	lea    eax,[rdx+0x3]
   34129:	test   edx,edx
   3412b:	cmovns eax,edx
   3412e:	sar    eax,0x2
   34131:	cmp    eax,esi
   34133:	jg     340d8 <dpb_split_field+0x9f8>
   34135:	mov    rax,QWORD PTR [rip+0x81d34]        # b5e70 <active_sps>
   3413c:	mov    r11d,DWORD PTR [rax+0x47c]
   34143:	test   r11d,r11d
   34146:	je     34163 <dpb_split_field+0xa83>
   34148:	mov    r10d,DWORD PTR [rax+0x484]
   3414f:	test   r10d,r10d
   34152:	je     3420e <dpb_split_field+0xb2e>
   34158:	mov    edx,DWORD PTR [r12+0x18fc]
   34160:	mov    r15,r12
   34163:	xor    esi,esi
   34165:	cmp    edx,0x3
   34168:	jle    3420e <dpb_split_field+0xb2e>
   3416e:	xchg   ax,ax
   34170:	mov    edx,DWORD PTR [r15+0x18f8]
   34177:	cmp    edx,0x3
   3417a:	jle    341f0 <dpb_split_field+0xb10>
   3417c:	mov    edi,esi
   3417e:	mov    r8d,esi
   34181:	xor    ecx,ecx
   34183:	sar    edi,0x2
   34186:	sar    r8d,0x3
   3418a:	and    edi,0x1
   3418d:	nop    DWORD PTR [rax]
   34190:	mov    r9d,DWORD PTR [r15+0x1910]
   34197:	xor    eax,eax
   34199:	test   r9d,r9d
   3419c:	je     341c4 <dpb_split_field+0xae4>
   3419e:	test   edx,edx
   341a0:	lea    eax,[rdx+0xf]
   341a3:	cmovs  edx,eax
   341a6:	mov    eax,ecx
   341a8:	sar    eax,0x2
   341ab:	sar    edx,0x4
   341ae:	imul   edx,r8d
   341b2:	add    edx,eax
   341b4:	lea    eax,[rdi+rdx*2]
   341b7:	mov    rdx,QWORD PTR [r15+0x1948]
   341be:	cdqe   
   341c0:	movzx  eax,BYTE PTR [rdx+rax*1]
   341c4:	mov    rdx,QWORD PTR [r15+0x1978]
   341cb:	mov    rdx,QWORD PTR [rdx+rcx*8]
   341cf:	add    rcx,0x1
   341d3:	mov    BYTE PTR [rdx+rsi*1],al
   341d6:	mov    r15,QWORD PTR [r14+0x28]
   341da:	mov    edx,DWORD PTR [r15+0x18f8]
   341e1:	test   edx,edx
   341e3:	lea    eax,[rdx+0x3]
   341e6:	cmovns eax,edx
   341e9:	sar    eax,0x2
   341ec:	cmp    eax,ecx
   341ee:	jg     34190 <dpb_split_field+0xab0>
   341f0:	mov    edx,DWORD PTR [r15+0x18fc]
   341f7:	add    rsi,0x1
   341fb:	lea    eax,[rdx+0x3]
   341fe:	test   edx,edx
   34200:	cmovns eax,edx
   34203:	sar    eax,0x2
   34206:	cmp    eax,esi
   34208:	jg     34170 <dpb_split_field+0xa90>
   3420e:	add    rsp,0x58
   34212:	pop    rbx
   34213:	pop    rbp
   34214:	pop    r12
   34216:	pop    r13
   34218:	pop    r14
   3421a:	pop    r15
   3421c:	ret    
   3421d:	nop    DWORD PTR [rax]
   34220:	and    eax,0xfffffffe
   34223:	add    eax,eax
   34225:	cdqe   
   34227:	add    rax,rax
   3422a:	jmp    33f1f <dpb_split_field+0x83f>
   3422f:	nop
   34230:	and    ecx,0xfffffffe
   34233:	add    ecx,ecx
   34235:	movsxd rcx,ecx
   34238:	lea    rdi,[rcx*8+0x0]
   34240:	mov    QWORD PTR [rsp+0x10],rdi
   34245:	jmp    33e57 <dpb_split_field+0x777>
   3424a:	nop    WORD PTR [rax+rax*1+0x0]
   34250:	mov    ebx,0xffffffff
   34255:	mov    ebp,0xffffffff
   3425a:	mov    WORD PTR [rcx],bx
   3425d:	mov    WORD PTR [rdx],bp
   34260:	jmp    33d78 <dpb_split_field+0x698>
   34265:	nop    DWORD PTR [rax]
   34268:	mov    ecx,0xffffffff
   3426d:	mov    WORD PTR [rbx],cx
   34270:	mov    ebx,0xffffffff
   34275:	mov    WORD PTR [rbp+0x0],bx
   34279:	jmp    33fa8 <dpb_split_field+0x8c8>
   3427e:	xchg   ax,ax
   34280:	add    QWORD PTR [rsp+0x20],0x1
   34286:	lea    eax,[rsi+0x3]
   34289:	test   esi,esi
   3428b:	mov    rbx,QWORD PTR [rsp+0x20]
   34290:	cmovns eax,esi
   34293:	sar    eax,0x2
   34296:	cmp    eax,ebx
   34298:	jg     33cf0 <dpb_split_field+0x610>
   3429e:	mov    r15,QWORD PTR [rsp]
   342a2:	cmp    ebp,0x3
   342a5:	jg     340d0 <dpb_split_field+0x9f0>
   342ab:	jmp    34768 <dpb_split_field+0x1088>
   342b0:	mov    QWORD PTR [rbx],0x0
   342b7:	xor    ecx,ecx
   342b9:	jmp    33f8e <dpb_split_field+0x8ae>
   342be:	xchg   ax,ax
   342c0:	mov    QWORD PTR [rdi],0x0
   342c7:	xor    eax,eax
   342c9:	jmp    34015 <dpb_split_field+0x935>
   342ce:	xchg   ax,ax
   342d0:	add    QWORD PTR [rsp+0x8],0x1
   342d6:	lea    eax,[rsi+0x3]
   342d9:	test   esi,esi
   342db:	mov    rdi,QWORD PTR [rsp+0x8]
   342e0:	cmovns eax,esi
   342e3:	sar    eax,0x2
   342e6:	cmp    eax,edi
   342e8:	jg     33a08 <dpb_split_field+0x328>
   342ee:	jmp    33cd9 <dpb_split_field+0x5f9>
   342f3:	mov    eax,DWORD PTR [r12+0x1904]
   342fb:	mov    edx,ebp
   342fd:	mov    ecx,DWORD PTR [r12+0x1900]
   34305:	mov    edi,0x1
   3430a:	shr    edx,0x1f
   3430d:	mov    esi,DWORD PTR [r12+0x18f8]
   34315:	mov    r8d,eax
   34318:	add    edx,ebp
   3431a:	shr    r8d,0x1f
   3431e:	sar    edx,1
   34320:	add    r8d,eax
   34323:	sar    r8d,1
   34326:	call   31560 <alloc_storable_picture>
   3432b:	mov    edi,0x2
   34330:	mov    QWORD PTR [r14+0x30],rax
   34334:	mov    rax,QWORD PTR [r14+0x28]
   34338:	mov    edx,DWORD PTR [rax+0x1904]
   3433e:	mov    ecx,DWORD PTR [rax+0x18fc]
   34344:	mov    r9d,DWORD PTR [rax+0x1900]
   3434b:	mov    esi,DWORD PTR [rax+0x18f8]
   34351:	mov    r8d,edx
   34354:	shr    r8d,0x1f
   34358:	add    r8d,edx
   3435b:	mov    edx,ecx
   3435d:	shr    edx,0x1f
   34360:	sar    r8d,1
   34363:	add    edx,ecx
   34365:	mov    ecx,r9d
   34368:	sar    edx,1
   3436a:	call   31560 <alloc_storable_picture>
   3436f:	mov    QWORD PTR [r14+0x38],rax
   34373:	mov    rax,QWORD PTR [r14+0x28]
   34377:	cmp    DWORD PTR [rax+0x18fc],0x1
   3437e:	jle    343d2 <dpb_split_field+0xcf2>
   34380:	xor    ebx,ebx
   34382:	nop    WORD PTR [rax+rax*1+0x0]
   34388:	mov    rdx,QWORD PTR [r14+0x30]
   3438c:	mov    rcx,rbx
   3438f:	shl    rcx,0x4
   34393:	add    rcx,QWORD PTR [rax+0x1918]
   3439a:	mov    rdx,QWORD PTR [rdx+0x1918]
   343a1:	mov    rsi,QWORD PTR [rcx]
   343a4:	mov    rdi,QWORD PTR [rdx+rbx*8]
   343a8:	movsxd rdx,DWORD PTR [rax+0x18f8]
   343af:	add    rbx,0x1
   343b3:	add    rdx,rdx
   343b6:	call   4440 <memcpy@plt>
   343bb:	mov    rax,QWORD PTR [r14+0x28]
   343bf:	mov    ecx,DWORD PTR [rax+0x18fc]
   343c5:	mov    edx,ecx
   343c7:	shr    edx,0x1f
   343ca:	add    edx,ecx
   343cc:	sar    edx,1
   343ce:	cmp    edx,ebx
   343d0:	jg     34388 <dpb_split_field+0xca8>
   343d2:	cmp    DWORD PTR [rax+0x1904],0x1
   343d9:	jle    34472 <dpb_split_field+0xd92>
   343df:	xor    ebx,ebx
   343e1:	nop    DWORD PTR [rax+0x0]
   343e8:	mov    rdx,QWORD PTR [r14+0x30]
   343ec:	mov    rbp,rbx
   343ef:	shl    rbp,0x4
   343f3:	mov    rdx,QWORD PTR [rdx+0x1940]
   343fa:	mov    rdx,QWORD PTR [rdx]
   343fd:	mov    rdi,QWORD PTR [rdx+rbx*8]
   34401:	movsxd rdx,DWORD PTR [rax+0x1900]
   34408:	mov    rax,QWORD PTR [rax+0x1940]
   3440f:	add    rdx,rdx
   34412:	mov    rax,QWORD PTR [rax]
   34415:	mov    rsi,QWORD PTR [rax+rbp*1]
   34419:	call   4440 <memcpy@plt>
   3441e:	mov    rdx,QWORD PTR [r14+0x30]
   34422:	mov    rax,QWORD PTR [r14+0x28]
   34426:	mov    rdx,QWORD PTR [rdx+0x1940]
   3442d:	mov    rdx,QWORD PTR [rdx+0x8]
   34431:	mov    rdi,QWORD PTR [rdx+rbx*8]
   34435:	movsxd rdx,DWORD PTR [rax+0x1900]
   3443c:	add    rbx,0x1
   34440:	mov    rax,QWORD PTR [rax+0x1940]
   34447:	add    rdx,rdx
   3444a:	mov    rax,QWORD PTR [rax+0x8]
   3444e:	mov    rsi,QWORD PTR [rax+rbp*1]
   34452:	call   4440 <memcpy@plt>
   34457:	mov    rax,QWORD PTR [r14+0x28]
   3445b:	mov    ecx,DWORD PTR [rax+0x1904]
   34461:	mov    edx,ecx
   34463:	shr    edx,0x1f
   34466:	add    edx,ecx
   34468:	sar    edx,1
   3446a:	cmp    edx,ebx
   3446c:	jg     343e8 <dpb_split_field+0xd08>
   34472:	cmp    DWORD PTR [rax+0x18fc],0x1
   34479:	jle    344cb <dpb_split_field+0xdeb>
   3447b:	xor    ebx,ebx
   3447d:	nop    DWORD PTR [rax]
   34480:	mov    rdx,QWORD PTR [r14+0x38]
   34484:	mov    rcx,rbx
   34487:	shl    rcx,0x4
   3448b:	add    rcx,QWORD PTR [rax+0x1918]
   34492:	mov    rdx,QWORD PTR [rdx+0x1918]
   34499:	mov    rsi,QWORD PTR [rcx+0x8]
   3449d:	mov    rdi,QWORD PTR [rdx+rbx*8]
   344a1:	movsxd rdx,DWORD PTR [rax+0x18f8]
   344a8:	add    rbx,0x1
   344ac:	add    rdx,rdx
   344af:	call   4440 <memcpy@plt>
   344b4:	mov    rax,QWORD PTR [r14+0x28]
   344b8:	mov    ecx,DWORD PTR [rax+0x18fc]
   344be:	mov    edx,ecx
   344c0:	shr    edx,0x1f
   344c3:	add    edx,ecx
   344c5:	sar    edx,1
   344c7:	cmp    edx,ebx
   344c9:	jg     34480 <dpb_split_field+0xda0>
   344cb:	xor    ebx,ebx
   344cd:	cmp    DWORD PTR [rax+0x1904],0x1
   344d4:	jle    3456c <dpb_split_field+0xe8c>
   344da:	nop    WORD PTR [rax+rax*1+0x0]
   344e0:	mov    rdx,QWORD PTR [r14+0x38]
   344e4:	mov    rbp,rbx
   344e7:	shl    rbp,0x4
   344eb:	mov    rdx,QWORD PTR [rdx+0x1940]
   344f2:	mov    rdx,QWORD PTR [rdx]
   344f5:	mov    rdi,QWORD PTR [rdx+rbx*8]
   344f9:	movsxd rdx,DWORD PTR [rax+0x1900]
   34500:	mov    rax,QWORD PTR [rax+0x1940]
   34507:	add    rdx,rdx
   3450a:	mov    rax,QWORD PTR [rax]
   3450d:	mov    rsi,QWORD PTR [rax+rbp*1+0x8]
   34512:	call   4440 <memcpy@plt>
   34517:	mov    rdx,QWORD PTR [r14+0x38]
   3451b:	mov    rax,QWORD PTR [r14+0x28]
   3451f:	mov    rdx,QWORD PTR [rdx+0x1940]
   34526:	mov    rdx,QWORD PTR [rdx+0x8]
   3452a:	mov    rdi,QWORD PTR [rdx+rbx*8]
   3452e:	movsxd rdx,DWORD PTR [rax+0x1900]
   34535:	add    rbx,0x1
   34539:	mov    rax,QWORD PTR [rax+0x1940]
   34540:	add    rdx,rdx
   34543:	mov    rax,QWORD PTR [rax+0x8]
   34547:	mov    rsi,QWORD PTR [rax+rbp*1+0x8]
   3454c:	call   4440 <memcpy@plt>
   34551:	mov    rax,QWORD PTR [r14+0x28]
   34555:	mov    ecx,DWORD PTR [rax+0x1904]
   3455b:	mov    edx,ecx
   3455d:	shr    edx,0x1f
   34560:	add    edx,ecx
   34562:	sar    edx,1
   34564:	cmp    edx,ebx
   34566:	jg     344e0 <dpb_split_field+0xe00>
   3456c:	mov    rdi,QWORD PTR [r14+0x30]
   34570:	call   1c670 <UnifiedOneForthPix>
   34575:	mov    rdi,QWORD PTR [r14+0x38]
   34579:	call   1c670 <UnifiedOneForthPix>
   3457e:	mov    r12,QWORD PTR [r14+0x28]
   34582:	mov    rdx,QWORD PTR [r14+0x30]
   34586:	mov    rcx,QWORD PTR [r14+0x38]
   3458a:	mov    eax,DWORD PTR [r12+0x8]
   3458f:	mov    esi,DWORD PTR [r12+0xc]
   34594:	mov    r15,r12
   34597:	mov    edi,DWORD PTR [r12+0x10]
   3459c:	mov    DWORD PTR [rdx+0x4],eax
   3459f:	mov    DWORD PTR [rcx+0x4],esi
   345a2:	mov    DWORD PTR [rdx+0x10],edi
   345a5:	mov    DWORD PTR [rcx+0xc],esi
   345a8:	mov    DWORD PTR [rdx+0xc],esi
   345ab:	mov    DWORD PTR [rcx+0x8],eax
   345ae:	mov    DWORD PTR [rdx+0x8],eax
   345b1:	mov    eax,DWORD PTR [r12+0x10]
   345b6:	mov    DWORD PTR [rcx+0x10],eax
   345b9:	mov    eax,DWORD PTR [r12+0x18ec]
   345c1:	mov    DWORD PTR [rcx+0x18ec],eax
   345c7:	mov    DWORD PTR [rdx+0x18ec],eax
   345cd:	mov    eax,DWORD PTR [r12+0x18e8]
   345d5:	mov    DWORD PTR [rcx+0x18e8],eax
   345db:	mov    DWORD PTR [rdx+0x18e8],eax
   345e1:	mov    eax,DWORD PTR [r12+0x18e4]
   345e9:	mov    DWORD PTR [rcx+0x18e4],eax
   345ef:	mov    DWORD PTR [rdx+0x18e4],eax
   345f5:	mov    DWORD PTR [r14+0x1c],eax
   345f9:	mov    eax,DWORD PTR [r12+0x1910]
   34601:	mov    DWORD PTR [rcx+0x190c],0x1
   3460b:	mov    DWORD PTR [rdx+0x190c],0x1
   34615:	mov    DWORD PTR [rcx+0x1910],eax
   3461b:	mov    DWORD PTR [rdx+0x1910],eax
   34621:	mov    QWORD PTR [r12+0x1980],rdx
   34629:	mov    QWORD PTR [r12+0x1988],rcx
   34631:	mov    QWORD PTR [rdx+0x1988],rcx
   34638:	mov    eax,DWORD PTR [r12+0x1998]
   34640:	mov    QWORD PTR [rdx+0x1990],r12
   34647:	mov    DWORD PTR [rcx+0x1998],eax
   3464d:	mov    QWORD PTR [rcx+0x1980],rdx
   34654:	mov    QWORD PTR [rcx+0x1990],r12
   3465b:	mov    DWORD PTR [rdx+0x1998],eax
   34661:	mov    eax,DWORD PTR [r12+0x199c]
   34669:	mov    DWORD PTR [rsp+0x40],eax
   3466d:	test   eax,eax
   3466f:	jne    34782 <dpb_split_field+0x10a2>
   34675:	mov    eax,DWORD PTR [rip+0x82dd9]        # b7454 <listXsize+0x4>
   3467b:	test   eax,eax
   3467d:	jle    346cb <dpb_split_field+0xfeb>
   3467f:	lea    edi,[rax-0x1]
   34682:	mov    eax,0x120
   34687:	add    rdi,0x13
   3468b:	shl    rdi,0x4
   3468f:	nop
   34690:	mov    rsi,QWORD PTR [r12+rax*1+0x210]
   34698:	mov    QWORD PTR [rdx+rax*1],rsi
   3469c:	mov    rsi,QWORD PTR [r12+rax*1+0x218]
   346a4:	mov    QWORD PTR [rdx+rax*1+0x8],rsi
   346a9:	mov    rsi,QWORD PTR [r12+rax*1+0x420]
   346b1:	mov    QWORD PTR [rcx+rax*1],rsi
   346b5:	mov    rsi,QWORD PTR [r12+rax*1+0x428]
   346bd:	mov    QWORD PTR [rcx+rax*1+0x8],rsi
   346c2:	add    rax,0x10
   346c6:	cmp    rdi,rax
   346c9:	jne    34690 <dpb_split_field+0xfb0>
   346cb:	mov    eax,DWORD PTR [rip+0x82d7f]        # b7450 <listXsize>
   346d1:	test   eax,eax
   346d3:	jle    34723 <dpb_split_field+0x1043>
   346d5:	lea    edi,[rax-0x1]
   346d8:	mov    eax,0x18
   346dd:	shl    rdi,0x4
   346e1:	add    rdi,0x28
   346e5:	nop    DWORD PTR [rax]
   346e8:	mov    rsi,QWORD PTR [r12+rax*1+0x210]
   346f0:	mov    QWORD PTR [rdx+rax*1],rsi
   346f4:	mov    rsi,QWORD PTR [r12+rax*1+0x218]
   346fc:	mov    QWORD PTR [rdx+rax*1+0x8],rsi
   34701:	mov    rsi,QWORD PTR [r12+rax*1+0x420]
   34709:	mov    QWORD PTR [rcx+rax*1],rsi
   3470d:	mov    rsi,QWORD PTR [r12+rax*1+0x428]
   34715:	mov    QWORD PTR [rcx+rax*1+0x8],rsi
   3471a:	add    rax,0x10
   3471e:	cmp    rdi,rax
   34721:	jne    346e8 <dpb_split_field+0x1008>
   34723:	mov    ebp,DWORD PTR [r12+0x18fc]
   3472b:	mov    ebx,DWORD PTR [r12+0x18f8]
   34733:	test   ebp,ebp
   34735:	lea    eax,[rbp+0x3]
   34738:	mov    DWORD PTR [rsp+0x20],ebx
   3473c:	cmovns eax,ebp
   3473f:	sar    eax,0x2
   34742:	test   ebx,ebx
   34744:	mov    DWORD PTR [rsp+0x28],eax
   34748:	lea    eax,[rbx+0x3]
   3474b:	cmovns eax,ebx
   3474e:	sar    eax,0x2
   34751:	mov    DWORD PTR [rsp],eax
   34754:	cmp    ebp,0x3
   34757:	jg     33783 <dpb_split_field+0xa3>
   3475d:	cmp    DWORD PTR [rsp+0x20],0x3
   34762:	jg     339f4 <dpb_split_field+0x314>
   34768:	mov    rax,QWORD PTR [rip+0x81701]        # b5e70 <active_sps>
   3476f:	mov    edx,DWORD PTR [rax+0x47c]
   34775:	test   edx,edx
   34777:	je     3420e <dpb_split_field+0xb2e>
   3477d:	jmp    34148 <dpb_split_field+0xa68>
   34782:	mov    ebp,DWORD PTR [r12+0x18fc]
   3478a:	jmp    33745 <dpb_split_field+0x65>
   3478f:	nop

0000000000034790 <replace_top_pic_with_frame>:
   34790:	endbr64 
   34794:	push   rbp
   34795:	xor    edx,edx
   34797:	push   rbx
   34798:	mov    rbx,rdi
   3479b:	sub    rsp,0x8
   3479f:	mov    rax,QWORD PTR [rip+0x53e0a]        # 885b0 <img>
   347a6:	mov    eax,DWORD PTR [rax+0x11b30]
   347ac:	test   eax,eax
   347ae:	setne  dl
   347b1:	mov    DWORD PTR [rdi+0x18ec],edx
   347b7:	jne    34860 <replace_top_pic_with_frame+0xd0>
   347bd:	mov    ecx,DWORD PTR [rip+0x82c39]        # b73fc <dpb+0x1c>
   347c3:	test   ecx,ecx
   347c5:	je     3486a <replace_top_pic_with_frame+0xda>
   347cb:	mov    rax,QWORD PTR [rip+0x53dde]        # 885b0 <img>
   347d2:	sub    ecx,0x1
   347d5:	mov    edx,DWORD PTR [rax+0x11b10]
   347db:	mov    rax,QWORD PTR [rip+0x82bfe]        # b73e0 <dpb>
   347e2:	lea    rcx,[rax+rcx*8+0x8]
   347e7:	jmp    347f9 <replace_top_pic_with_frame+0x69>
   347e9:	nop    DWORD PTR [rax+0x0]
   347f0:	add    rax,0x8
   347f4:	cmp    rax,rcx
   347f7:	je     3486a <replace_top_pic_with_frame+0xda>
   347f9:	mov    rbp,QWORD PTR [rax]
   347fc:	cmp    DWORD PTR [rbp+0x14],edx
   347ff:	jne    347f0 <replace_top_pic_with_frame+0x60>
   34801:	cmp    DWORD PTR [rbp+0x0],0x1
   34805:	jne    347f0 <replace_top_pic_with_frame+0x60>
   34807:	mov    rdi,QWORD PTR [rbp+0x30]
   3480b:	call   317f0 <free_storable_picture>
   34810:	cmp    DWORD PTR [rbx+0x18ec],0x0
   34817:	mov    QWORD PTR [rbp+0x28],rbx
   3481b:	mov    QWORD PTR [rbp+0x30],0x0
   34823:	mov    DWORD PTR [rbp+0x0],0x3
   3482a:	je     34844 <replace_top_pic_with_frame+0xb4>
   3482c:	mov    eax,DWORD PTR [rbx+0x18e8]
   34832:	mov    DWORD PTR [rbp+0x4],0x3
   34839:	test   eax,eax
   3483b:	je     34844 <replace_top_pic_with_frame+0xb4>
   3483d:	mov    DWORD PTR [rbp+0x8],0x3
   34844:	mov    rdi,rbp
   34847:	call   336e0 <dpb_split_field>
   3484c:	xor    eax,eax
   3484e:	call   33230 <update_ref_list>
   34853:	add    rsp,0x8
   34857:	xor    eax,eax
   34859:	pop    rbx
   3485a:	pop    rbp
   3485b:	jmp    333a0 <update_ltref_list>
   34860:	call   1c670 <UnifiedOneForthPix>
   34865:	jmp    347bd <replace_top_pic_with_frame+0x2d>
   3486a:	mov    esi,0x1f4
   3486f:	lea    rdi,[rip+0x40b4a]        # 753c0 <MODTAB+0x1a0>
   34876:	call   19180 <error>
   3487b:	mov    rax,QWORD PTR ds:0x30
   34883:	ud2    
   34885:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000034890 <dpb_combine_field>:
   34890:	endbr64 
   34894:	push   r15
   34896:	push   r14
   34898:	push   r13
   3489a:	push   r12
   3489c:	mov    r12,rdi
   3489f:	push   rbp
   348a0:	push   rbx
   348a1:	sub    rsp,0x38
   348a5:	mov    rax,QWORD PTR [rdi+0x30]
   348a9:	mov    edi,DWORD PTR [rax+0x18fc]
   348af:	mov    r8d,DWORD PTR [rax+0x1904]
   348b6:	mov    ecx,DWORD PTR [rax+0x1900]
   348bc:	mov    esi,DWORD PTR [rax+0x18f8]
   348c2:	lea    edx,[rdi+rdi*1]
   348c5:	add    r8d,r8d
   348c8:	xor    edi,edi
   348ca:	call   31560 <alloc_storable_picture>
   348cf:	mov    rdx,QWORD PTR [r12+0x30]
   348d4:	mov    QWORD PTR [r12+0x28],rax
   348d9:	mov    rdi,rax
   348dc:	mov    ebx,DWORD PTR [rdx+0x18fc]
   348e2:	test   ebx,ebx
   348e4:	jle    34965 <dpb_combine_field+0xd5>
   348e6:	xor    ebx,ebx
   348e8:	nop    DWORD PTR [rax+rax*1+0x0]
   348f0:	mov    rax,QWORD PTR [rdi+0x1918]
   348f7:	mov    rbp,rbx
   348fa:	movsxd r8,DWORD PTR [rdx+0x18f8]
   34901:	shl    rbp,0x4
   34905:	mov    rdi,QWORD PTR [rax+rbp*1]
   34909:	mov    rax,QWORD PTR [rdx+0x1918]
   34910:	add    r8,r8
   34913:	mov    rdx,r8
   34916:	mov    rsi,QWORD PTR [rax+rbx*8]
   3491a:	call   4440 <memcpy@plt>
   3491f:	mov    rdx,QWORD PTR [r12+0x28]
   34924:	mov    rax,QWORD PTR [r12+0x38]
   34929:	mov    rdx,QWORD PTR [rdx+0x1918]
   34930:	mov    rdi,QWORD PTR [rdx+rbp*1+0x8]
   34935:	movsxd rdx,DWORD PTR [rax+0x18f8]
   3493c:	mov    rax,QWORD PTR [rax+0x1918]
   34943:	add    rdx,rdx
   34946:	mov    rsi,QWORD PTR [rax+rbx*8]
   3494a:	add    rbx,0x1
   3494e:	call   4440 <memcpy@plt>
   34953:	mov    rdx,QWORD PTR [r12+0x30]
   34958:	mov    rdi,QWORD PTR [r12+0x28]
   3495d:	cmp    DWORD PTR [rdx+0x18fc],ebx
   34963:	jg     348f0 <dpb_combine_field+0x60>
   34965:	mov    r11d,DWORD PTR [rdx+0x1904]
   3496c:	test   r11d,r11d
   3496f:	jle    34a74 <dpb_combine_field+0x1e4>
   34975:	xor    ebx,ebx
   34977:	nop    WORD PTR [rax+rax*1+0x0]
   34980:	mov    rax,QWORD PTR [rdi+0x1940]
   34987:	mov    rbp,rbx
   3498a:	movsxd r8,DWORD PTR [rdx+0x1900]
   34991:	shl    rbp,0x4
   34995:	mov    rax,QWORD PTR [rax]
   34998:	add    r8,r8
   3499b:	mov    rdi,QWORD PTR [rax+rbp*1]
   3499f:	mov    rax,QWORD PTR [rdx+0x1940]
   349a6:	mov    rdx,r8
   349a9:	mov    rax,QWORD PTR [rax]
   349ac:	mov    rsi,QWORD PTR [rax+rbx*8]
   349b0:	call   4440 <memcpy@plt>
   349b5:	mov    rdx,QWORD PTR [r12+0x28]
   349ba:	mov    rax,QWORD PTR [r12+0x38]
   349bf:	mov    rdx,QWORD PTR [rdx+0x1940]
   349c6:	mov    rdx,QWORD PTR [rdx]
   349c9:	mov    rdi,QWORD PTR [rdx+rbp*1+0x8]
   349ce:	movsxd rdx,DWORD PTR [rax+0x1900]
   349d5:	mov    rax,QWORD PTR [rax+0x1940]
   349dc:	add    rdx,rdx
   349df:	mov    rax,QWORD PTR [rax]
   349e2:	mov    rsi,QWORD PTR [rax+rbx*8]
   349e6:	call   4440 <memcpy@plt>
   349eb:	mov    rdx,QWORD PTR [r12+0x28]
   349f0:	mov    rax,QWORD PTR [r12+0x30]
   349f5:	mov    rdx,QWORD PTR [rdx+0x1940]
   349fc:	mov    rdx,QWORD PTR [rdx+0x8]
   34a00:	mov    rdi,QWORD PTR [rdx+rbp*1]
   34a04:	movsxd rdx,DWORD PTR [rax+0x1900]
   34a0b:	mov    rax,QWORD PTR [rax+0x1940]
   34a12:	add    rdx,rdx
   34a15:	mov    rax,QWORD PTR [rax+0x8]
   34a19:	mov    rsi,QWORD PTR [rax+rbx*8]
   34a1d:	call   4440 <memcpy@plt>
   34a22:	mov    rdx,QWORD PTR [r12+0x28]
   34a27:	mov    rax,QWORD PTR [r12+0x38]
   34a2c:	mov    rdx,QWORD PTR [rdx+0x1940]
   34a33:	mov    rdx,QWORD PTR [rdx+0x8]
   34a37:	mov    rdi,QWORD PTR [rdx+rbp*1+0x8]
   34a3c:	movsxd rdx,DWORD PTR [rax+0x1900]
   34a43:	mov    rax,QWORD PTR [rax+0x1940]
   34a4a:	add    rdx,rdx
   34a4d:	mov    rax,QWORD PTR [rax+0x8]
   34a51:	mov    rsi,QWORD PTR [rax+rbx*8]
   34a55:	add    rbx,0x1
   34a59:	call   4440 <memcpy@plt>
   34a5e:	mov    rdx,QWORD PTR [r12+0x30]
   34a63:	mov    rdi,QWORD PTR [r12+0x28]
   34a68:	cmp    DWORD PTR [rdx+0x1904],ebx
   34a6e:	jg     34980 <dpb_combine_field+0xf0>
   34a74:	call   1c670 <UnifiedOneForthPix>
   34a79:	mov    r14,QWORD PTR [r12+0x30]
   34a7e:	mov    rdi,QWORD PTR [r12+0x38]
   34a83:	mov    rcx,QWORD PTR [r12+0x28]
   34a88:	mov    eax,DWORD PTR [r14+0x4]
   34a8c:	cmp    DWORD PTR [rdi+0x4],eax
   34a8f:	mov    rsi,r14
   34a92:	cmovle eax,DWORD PTR [rdi+0x4]
   34a96:	mov    r13,rcx
   34a99:	mov    DWORD PTR [rcx+0x4],eax
   34a9c:	mov    DWORD PTR [r12+0x24],eax
   34aa1:	mov    eax,DWORD PTR [r14+0x4]
   34aa5:	mov    DWORD PTR [rcx+0x8],eax
   34aa8:	mov    DWORD PTR [rcx+0x10],eax
   34aab:	mov    DWORD PTR [rdi+0x8],eax
   34aae:	mov    DWORD PTR [r14+0x10],eax
   34ab2:	mov    DWORD PTR [rdi+0x10],eax
   34ab5:	mov    eax,DWORD PTR [rdi+0x4]
   34ab8:	mov    DWORD PTR [r14+0xc],eax
   34abc:	mov    DWORD PTR [rcx+0xc],eax
   34abf:	mov    eax,DWORD PTR [r14+0x18ec]
   34ac6:	test   eax,eax
   34ac8:	je     34ad9 <dpb_combine_field+0x249>
   34aca:	mov    r10d,DWORD PTR [rdi+0x18ec]
   34ad1:	xor    eax,eax
   34ad3:	test   r10d,r10d
   34ad6:	setne  al
   34ad9:	mov    r9d,DWORD PTR [r14+0x18e8]
   34ae0:	mov    DWORD PTR [r13+0x18ec],eax
   34ae7:	test   r9d,r9d
   34aea:	je     34afc <dpb_combine_field+0x26c>
   34aec:	mov    r8d,DWORD PTR [rdi+0x18e8]
   34af3:	test   r8d,r8d
   34af6:	jne    34f83 <dpb_combine_field+0x6f3>
   34afc:	mov    DWORD PTR [r13+0x18e8],0x0
   34b07:	mov    eax,DWORD PTR [r14+0x1998]
   34b0e:	mov    QWORD PTR [r13+0x1980],r14
   34b15:	mov    QWORD PTR [r13+0x1988],rdi
   34b1c:	mov    DWORD PTR [r13+0x1998],eax
   34b23:	mov    eax,DWORD PTR [r14+0x19a0]
   34b2a:	mov    DWORD PTR [r13+0x190c],0x0
   34b35:	mov    DWORD PTR [r13+0x19a0],eax
   34b3c:	test   eax,eax
   34b3e:	je     34b78 <dpb_combine_field+0x2e8>
   34b40:	mov    eax,DWORD PTR [r14+0x19ac]
   34b47:	mov    DWORD PTR [r13+0x19ac],eax
   34b4e:	mov    eax,DWORD PTR [r14+0x19b0]
   34b55:	mov    DWORD PTR [r13+0x19b0],eax
   34b5c:	mov    eax,DWORD PTR [r14+0x19a4]
   34b63:	mov    DWORD PTR [r13+0x19a4],eax
   34b6a:	mov    eax,DWORD PTR [r14+0x19a8]
   34b71:	mov    DWORD PTR [r13+0x19a8],eax
   34b78:	mov    eax,DWORD PTR [rip+0x828d6]        # b7454 <listXsize+0x4>
   34b7e:	xor    r8d,r8d
   34b81:	xor    r9d,r9d
   34b84:	mov    r11,r13
   34b87:	mov    QWORD PTR [rdi+0x1990],r13
   34b8e:	lea    edx,[rax+0x1]
   34b91:	mov    QWORD PTR [r14+0x1990],r13
   34b98:	mov    r10d,edx
   34b9b:	shr    r10d,0x1f
   34b9f:	add    r10d,edx
   34ba2:	sar    r10d,1
   34ba5:	test   eax,eax
   34ba7:	jle    34c04 <dpb_combine_field+0x374>
   34ba9:	nop    DWORD PTR [rax+0x0]
   34bb0:	mov    rax,QWORD PTR [r14+r8*2+0x120]
   34bb8:	mov    rcx,rax
   34bbb:	shr    rcx,0x3f
   34bbf:	add    rcx,rax
   34bc2:	mov    rax,QWORD PTR [rdi+r8*2+0x120]
   34bca:	mov    rbx,rcx
   34bcd:	and    rcx,0xfffffffffffffffe
   34bd1:	mov    rdx,rax
   34bd4:	sar    rbx,1
   34bd7:	shr    rdx,0x3f
   34bdb:	add    rax,rdx
   34bde:	mov    rdx,rax
   34be1:	and    rax,0xfffffffffffffffe
   34be5:	sar    rdx,1
   34be8:	cmp    rbx,rdx
   34beb:	cmovl  rax,rcx
   34bef:	add    r9d,0x1
   34bf3:	mov    QWORD PTR [r11+r8*1+0x120],rax
   34bfb:	add    r8,0x8
   34bff:	cmp    r9d,r10d
   34c02:	jl     34bb0 <dpb_combine_field+0x320>
   34c04:	mov    eax,DWORD PTR [rip+0x82846]        # b7450 <listXsize>
   34c0a:	xor    r8d,r8d
   34c0d:	xor    r9d,r9d
   34c10:	mov    r11,r13
   34c13:	lea    edx,[rax+0x1]
   34c16:	mov    r10d,edx
   34c19:	shr    r10d,0x1f
   34c1d:	add    r10d,edx
   34c20:	sar    r10d,1
   34c23:	test   eax,eax
   34c25:	jle    34c7b <dpb_combine_field+0x3eb>
   34c27:	nop    WORD PTR [rax+rax*1+0x0]
   34c30:	mov    rax,QWORD PTR [r14+r8*2+0x18]
   34c35:	mov    rcx,rax
   34c38:	shr    rcx,0x3f
   34c3c:	add    rcx,rax
   34c3f:	mov    rax,QWORD PTR [rdi+r8*2+0x18]
   34c44:	mov    rbx,rcx
   34c47:	and    rcx,0xfffffffffffffffe
   34c4b:	mov    rdx,rax
   34c4e:	sar    rbx,1
   34c51:	shr    rdx,0x3f
   34c55:	add    rax,rdx
   34c58:	mov    rdx,rax
   34c5b:	and    rax,0xfffffffffffffffe
   34c5f:	sar    rdx,1
   34c62:	cmp    rbx,rdx
   34c65:	cmovl  rax,rcx
   34c69:	add    r9d,0x1
   34c6d:	mov    QWORD PTR [r11+r8*1+0x18],rax
   34c72:	add    r8,0x8
   34c76:	cmp    r9d,r10d
   34c79:	jl     34c30 <dpb_combine_field+0x3a0>
   34c7b:	cmp    DWORD PTR [r14+0x18f8],0x3
   34c83:	mov    r15,r12
   34c86:	mov    QWORD PTR [rsp+0x28],0x0
   34c8f:	jle    3511a <dpb_combine_field+0x88a>
   34c95:	nop    DWORD PTR [rax]
   34c98:	mov    rax,QWORD PTR [rsp+0x28]
   34c9d:	xor    ebp,ebp
   34c9f:	cmp    DWORD PTR [r14+0x18fc],0x3
   34ca7:	mov    r8,r13
   34caa:	lea    r11,[rax*8+0x0]
   34cb2:	jg     34e15 <dpb_combine_field+0x585>
   34cb8:	jmp    3504e <dpb_combine_field+0x7be>
   34cbd:	nop    DWORD PTR [rax]
   34cc0:	movsxd rsi,esi
   34cc3:	mov    rbx,QWORD PTR [r14+rsi*8+0x120]
   34ccb:	mov    QWORD PTR [r12],rbx
   34ccf:	test   ecx,ecx
   34cd1:	js     34fd0 <dpb_combine_field+0x740>
   34cd7:	movsxd rcx,ecx
   34cda:	mov    rbx,QWORD PTR [rsp+0x20]
   34cdf:	mov    rcx,QWORD PTR [r14+rcx*8+0x648]
   34ce7:	mov    QWORD PTR [rbx],rcx
   34cea:	mov    rsi,QWORD PTR [r14+rsi*8+0x750]
   34cf2:	mov    rcx,QWORD PTR [r10+0x8]
   34cf6:	mov    r9,QWORD PTR [r9+rdi*1+0x20]
   34cfb:	mov    rbx,QWORD PTR [rsp]
   34cff:	mov    rcx,QWORD PTR [rcx+r11*1]
   34d03:	mov    QWORD PTR [rcx+rax*8],rsi
   34d07:	mov    rax,QWORD PTR [r15+0x38]
   34d0b:	mov    rsi,QWORD PTR [rax+0x1968]
   34d12:	mov    r10,QWORD PTR [rsi]
   34d15:	mov    rsi,QWORD PTR [rsi+0x8]
   34d19:	mov    r10,QWORD PTR [r10+r11*1]
   34d1d:	mov    rsi,QWORD PTR [rsi+r11*1]
   34d21:	mov    r10,QWORD PTR [r10+rdx*1]
   34d25:	mov    rsi,QWORD PTR [rsi+rdx*1]
   34d29:	movzx  r12d,WORD PTR [r10]
   34d2d:	mov    WORD PTR [r9],r12w
   34d31:	movzx  r10d,WORD PTR [r10+0x2]
   34d36:	mov    r12,QWORD PTR [rsp+0x8]
   34d3b:	mov    WORD PTR [r9+0x2],r10w
   34d40:	mov    r9,QWORD PTR [r13+rdi*1+0x20]
   34d45:	lea    r13,[rbp+rbp*1+0x0]
   34d4a:	movzx  r10d,WORD PTR [rsi]
   34d4e:	mov    WORD PTR [r9],r10w
   34d52:	movzx  esi,WORD PTR [rsi+0x2]
   34d56:	mov    WORD PTR [r9+0x2],si
   34d5b:	mov    r9,QWORD PTR [rax+0x1950]
   34d62:	mov    rsi,QWORD PTR [r9]
   34d65:	mov    r9,QWORD PTR [r9+0x8]
   34d69:	mov    rsi,QWORD PTR [rsi+r11*1]
   34d6d:	mov    r9,QWORD PTR [r9+r11*1]
   34d71:	movsx  r10,WORD PTR [rsi+r13*1]
   34d76:	mov    WORD PTR [rbx+r12*1+0x8],r10w
   34d7c:	mov    rbx,QWORD PTR [rsp+0x10]
   34d81:	movsx  r9d,WORD PTR [r9+r13*1]
   34d86:	mov    WORD PTR [rbx+r12*1+0x8],r9w
   34d8c:	mov    r13,QWORD PTR [rax+0x1960]
   34d93:	mov    r12,QWORD PTR [r13+0x0]
   34d97:	mov    r13,QWORD PTR [r13+0x8]
   34d9b:	mov    rbx,QWORD PTR [r12+r11*1]
   34d9f:	add    rbx,rdx
   34da2:	add    rdx,QWORD PTR [r13+r11*1+0x0]
   34da7:	mov    r12,rbx
   34daa:	mov    rbx,QWORD PTR [rsp+0x18]
   34daf:	lea    rbx,[rbx+rdi*1+0x20]
   34db4:	test   r10d,r10d
   34db7:	js     34fa0 <dpb_combine_field+0x710>
   34dbd:	lea    rsi,[rax+r10*8]
   34dc1:	mov    r13,QWORD PTR [rsi+0x18]
   34dc5:	mov    QWORD PTR [r12],r13
   34dc9:	test   r9d,r9d
   34dcc:	js     34fe8 <dpb_combine_field+0x758>
   34dd2:	movsxd r9,r9d
   34dd5:	mov    r10,QWORD PTR [rax+r9*8+0x120]
   34ddd:	mov    QWORD PTR [rdx],r10
   34de0:	mov    rdx,QWORD PTR [rsi+0x648]
   34de7:	mov    QWORD PTR [rbx],rdx
   34dea:	mov    rax,QWORD PTR [rax+r9*8+0x750]
   34df2:	mov    edx,DWORD PTR [r14+0x18fc]
   34df9:	mov    QWORD PTR [rcx+rdi*1+0x20],rax
   34dfe:	add    rbp,0x1
   34e02:	lea    eax,[rdx+0x3]
   34e05:	test   edx,edx
   34e07:	cmovns eax,edx
   34e0a:	sar    eax,0x2
   34e0d:	cmp    eax,ebp
   34e0f:	jle    35048 <dpb_combine_field+0x7b8>
   34e15:	mov    edx,ebp
   34e17:	mov    eax,ebp
   34e19:	sar    edx,0x2
   34e1c:	and    eax,0x3
   34e1f:	lea    eax,[rax+rdx*8]
   34e22:	mov    rdx,QWORD PTR [r8+0x1978]
   34e29:	cdqe   
   34e2b:	mov    rdx,QWORD PTR [rdx+r11*1]
   34e2f:	mov    BYTE PTR [rdx+rax*1+0x4],0x1
   34e34:	mov    rdx,QWORD PTR [r15+0x28]
   34e38:	mov    rdx,QWORD PTR [rdx+0x1978]
   34e3f:	mov    rdx,QWORD PTR [rdx+r11*1]
   34e43:	mov    BYTE PTR [rdx+rax*1],0x1
   34e47:	mov    r14,QWORD PTR [r15+0x30]
   34e4b:	lea    rdx,[rbp*8+0x0]
   34e53:	mov    r8,QWORD PTR [r15+0x28]
   34e57:	mov    rsi,QWORD PTR [r14+0x1968]
   34e5e:	mov    rcx,QWORD PTR [rsi]
   34e61:	mov    rsi,QWORD PTR [rsi+0x8]
   34e65:	mov    rcx,QWORD PTR [rcx+r11*1]
   34e69:	mov    rsi,QWORD PTR [rsi+r11*1]
   34e6d:	mov    rbx,QWORD PTR [rcx+rbp*8]
   34e71:	mov    rcx,QWORD PTR [r8+0x1968]
   34e78:	mov    rsi,QWORD PTR [rsi+rbp*8]
   34e7c:	mov    rdi,QWORD PTR [rcx]
   34e7f:	movzx  r12d,WORD PTR [rbx]
   34e83:	mov    rcx,QWORD PTR [rcx+0x8]
   34e87:	mov    r9,QWORD PTR [rdi+r11*1]
   34e8b:	lea    rdi,[rax*8+0x0]
   34e93:	mov    r13,QWORD PTR [rcx+r11*1]
   34e97:	mov    r10,QWORD PTR [r9+rax*8]
   34e9b:	mov    rcx,QWORD PTR [r13+rax*8+0x0]
   34ea0:	mov    WORD PTR [r10],r12w
   34ea4:	movzx  ebx,WORD PTR [rbx+0x2]
   34ea8:	mov    WORD PTR [r10+0x2],bx
   34ead:	movzx  r10d,WORD PTR [rsi]
   34eb1:	mov    WORD PTR [rcx],r10w
   34eb5:	movzx  esi,WORD PTR [rsi+0x2]
   34eb9:	mov    WORD PTR [rcx+0x2],si
   34ebd:	mov    rsi,QWORD PTR [r14+0x1950]
   34ec4:	mov    r10,QWORD PTR [r8+0x1950]
   34ecb:	mov    rcx,QWORD PTR [r10]
   34ece:	mov    r10,QWORD PTR [r10+0x8]
   34ed2:	mov    rbx,QWORD PTR [rcx+r11*1]
   34ed6:	lea    rcx,[rax+rax*1]
   34eda:	mov    QWORD PTR [rsp+0x8],rcx
   34edf:	mov    rcx,QWORD PTR [rsi]
   34ee2:	mov    rsi,QWORD PTR [rsi+0x8]
   34ee6:	mov    QWORD PTR [rsp],rbx
   34eea:	mov    rcx,QWORD PTR [rcx+r11*1]
   34eee:	mov    rsi,QWORD PTR [rsi+r11*1]
   34ef2:	movsx  ecx,WORD PTR [rcx+rbp*2]
   34ef6:	mov    WORD PTR [rbx+rax*2],cx
   34efa:	mov    rbx,QWORD PTR [r10+r11*1]
   34efe:	movsx  esi,WORD PTR [rsi+rbp*2]
   34f02:	mov    QWORD PTR [rsp+0x10],rbx
   34f07:	mov    WORD PTR [rbx+rax*2],si
   34f0b:	xor    ebx,ebx
   34f0d:	test   ecx,ecx
   34f0f:	js     34f19 <dpb_combine_field+0x689>
   34f11:	movsxd r10,ecx
   34f14:	mov    rbx,QWORD PTR [r14+r10*8+0x18]
   34f19:	mov    r10,QWORD PTR [r14+0x1960]
   34f20:	mov    r12,QWORD PTR [r10]
   34f23:	mov    r10,QWORD PTR [r10+0x8]
   34f27:	mov    r12,QWORD PTR [r12+r11*1]
   34f2b:	mov    QWORD PTR [r12+rdx*1],rbx
   34f2f:	mov    r12,QWORD PTR [r10+r11*1]
   34f33:	mov    r10,QWORD PTR [r8+0x1960]
   34f3a:	add    r12,rdx
   34f3d:	mov    rbx,QWORD PTR [r10]
   34f40:	mov    rbx,QWORD PTR [rbx+r11*1]
   34f44:	mov    QWORD PTR [rsp+0x18],rbx
   34f49:	add    rbx,rdi
   34f4c:	mov    QWORD PTR [rsp+0x20],rbx
   34f51:	test   esi,esi
   34f53:	jns    34cc0 <dpb_combine_field+0x430>
   34f59:	mov    QWORD PTR [r12],0x0
   34f61:	test   ecx,ecx
   34f63:	js     35030 <dpb_combine_field+0x7a0>
   34f69:	movsxd rcx,ecx
   34f6c:	mov    rbx,QWORD PTR [rsp+0x20]
   34f71:	xor    esi,esi
   34f73:	mov    rcx,QWORD PTR [r14+rcx*8+0x648]
   34f7b:	mov    QWORD PTR [rbx],rcx
   34f7e:	jmp    34cf2 <dpb_combine_field+0x462>
   34f83:	mov    DWORD PTR [r13+0x18e8],0x1
   34f8e:	mov    eax,DWORD PTR [r12+0x1c]
   34f93:	mov    DWORD PTR [r13+0x18e4],eax
   34f9a:	jmp    34b07 <dpb_combine_field+0x277>
   34f9f:	nop
   34fa0:	mov    QWORD PTR [r12],0x0
   34fa8:	test   r9d,r9d
   34fab:	js     35010 <dpb_combine_field+0x780>
   34fad:	movsxd r9,r9d
   34fb0:	mov    rsi,QWORD PTR [rax+r9*8+0x120]
   34fb8:	mov    QWORD PTR [rdx],rsi
   34fbb:	mov    QWORD PTR [rbx],0xffffffffffffffff
   34fc2:	jmp    34dea <dpb_combine_field+0x55a>
   34fc7:	nop    WORD PTR [rax+rax*1+0x0]
   34fd0:	mov    rcx,QWORD PTR [rsp+0x20]
   34fd5:	mov    QWORD PTR [rcx],0x0
   34fdc:	jmp    34cea <dpb_combine_field+0x45a>
   34fe1:	nop    DWORD PTR [rax+0x0]
   34fe8:	movsxd r10,r10d
   34feb:	mov    QWORD PTR [rdx],0x0
   34ff2:	mov    rax,QWORD PTR [rax+r10*8+0x648]
   34ffa:	mov    QWORD PTR [rbx],rax
   34ffd:	mov    rax,0xffffffffffffffff
   35004:	jmp    34df2 <dpb_combine_field+0x562>
   35009:	nop    DWORD PTR [rax+0x0]
   35010:	mov    QWORD PTR [rdx],0x0
   35017:	mov    rax,0xffffffffffffffff
   3501e:	mov    QWORD PTR [rbx],0xffffffffffffffff
   35025:	jmp    34df2 <dpb_combine_field+0x562>
   3502a:	nop    WORD PTR [rax+rax*1+0x0]
   35030:	mov    rcx,QWORD PTR [rsp+0x20]
   35035:	xor    esi,esi
   35037:	mov    QWORD PTR [rcx],0x0
   3503e:	jmp    34cf2 <dpb_combine_field+0x462>
   35043:	nop    DWORD PTR [rax+rax*1+0x0]
   35048:	mov    r13,r8
   3504b:	mov    rsi,r14
   3504e:	mov    edx,DWORD PTR [r14+0x18f8]
   35055:	add    QWORD PTR [rsp+0x28],0x1
   3505b:	mov    rdi,QWORD PTR [rsp+0x28]
   35060:	test   edx,edx
   35062:	lea    eax,[rdx+0x3]
   35065:	cmovns eax,edx
   35068:	sar    eax,0x2
   3506b:	cmp    eax,edi
   3506d:	jg     34c98 <dpb_combine_field+0x408>
   35073:	mov    rax,QWORD PTR [rip+0x80df6]        # b5e70 <active_sps>
   3507a:	mov    r12,r15
   3507d:	mov    edi,DWORD PTR [rax+0x47c]
   35083:	test   edi,edi
   35085:	jne    3512b <dpb_combine_field+0x89b>
   3508b:	xor    r8d,r8d
   3508e:	cmp    edx,0x3
   35091:	jle    3510b <dpb_combine_field+0x87b>
   35093:	nop    DWORD PTR [rax+rax*1+0x0]
   35098:	xor    edx,edx
   3509a:	cmp    DWORD PTR [rsi+0x18fc],0x3
   350a1:	lea    rdi,[r8*8+0x0]
   350a9:	jle    350f1 <dpb_combine_field+0x861>
   350ab:	nop    DWORD PTR [rax+rax*1+0x0]
   350b0:	mov    rax,QWORD PTR [rsi+0x1978]
   350b7:	mov    rax,QWORD PTR [rax+rdi*1]
   350bb:	mov    BYTE PTR [rax+rdx*1],0x1
   350bf:	mov    rax,QWORD PTR [r12+0x38]
   350c4:	mov    rax,QWORD PTR [rax+0x1978]
   350cb:	mov    rax,QWORD PTR [rax+rdi*1]
   350cf:	mov    BYTE PTR [rax+rdx*1],0x1
   350d3:	mov    rsi,QWORD PTR [r12+0x30]
   350d8:	add    rdx,0x1
   350dc:	mov    ecx,DWORD PTR [rsi+0x18fc]
   350e2:	test   ecx,ecx
   350e4:	lea    eax,[rcx+0x3]
   350e7:	cmovns eax,ecx
   350ea:	sar    eax,0x2
   350ed:	cmp    eax,edx
   350ef:	jg     350b0 <dpb_combine_field+0x820>
   350f1:	mov    edx,DWORD PTR [rsi+0x18f8]
   350f7:	add    r8,0x1
   350fb:	lea    eax,[rdx+0x3]
   350fe:	test   edx,edx
   35100:	cmovns eax,edx
   35103:	sar    eax,0x2
   35106:	cmp    eax,r8d
   35109:	jg     35098 <dpb_combine_field+0x808>
   3510b:	add    rsp,0x38
   3510f:	pop    rbx
   35110:	pop    rbp
   35111:	pop    r12
   35113:	pop    r13
   35115:	pop    r14
   35117:	pop    r15
   35119:	ret    
   3511a:	mov    rax,QWORD PTR [rip+0x80d4f]        # b5e70 <active_sps>
   35121:	mov    edx,DWORD PTR [rax+0x47c]
   35127:	test   edx,edx
   35129:	je     3510b <dpb_combine_field+0x87b>
   3512b:	mov    ecx,DWORD PTR [rax+0x484]
   35131:	test   ecx,ecx
   35133:	je     3510b <dpb_combine_field+0x87b>
   35135:	mov    edx,DWORD PTR [r14+0x18f8]
   3513c:	mov    rsi,r14
   3513f:	jmp    3508b <dpb_combine_field+0x7fb>
   35144:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3514f:	nop

0000000000035150 <insert_picture_in_dpb>:
   35150:	push   rbp
   35151:	mov    rbp,rdi
   35154:	push   rbx
   35155:	mov    rbx,rsi
   35158:	sub    rsp,0x8
   3515c:	mov    r10d,DWORD PTR [rsi+0x18ec]
   35163:	test   r10d,r10d
   35166:	jne    351a0 <insert_picture_in_dpb+0x50>
   35168:	mov    eax,DWORD PTR [rbx]
   3516a:	cmp    eax,0x1
   3516d:	je     351af <insert_picture_in_dpb+0x5f>
   3516f:	cmp    eax,0x2
   35172:	je     35250 <insert_picture_in_dpb+0x100>
   35178:	test   eax,eax
   3517a:	je     35208 <insert_picture_in_dpb+0xb8>
   35180:	mov    eax,DWORD PTR [rbx+0x18dc]
   35186:	mov    DWORD PTR [rbp+0x14],eax
   35189:	mov    eax,DWORD PTR [rbx+0x18f0]
   3518f:	mov    DWORD PTR [rbp+0x20],eax
   35192:	add    rsp,0x8
   35196:	pop    rbx
   35197:	pop    rbp
   35198:	ret    
   35199:	nop    DWORD PTR [rax+0x0]
   351a0:	mov    rdi,rsi
   351a3:	call   1c670 <UnifiedOneForthPix>
   351a8:	mov    eax,DWORD PTR [rbx]
   351aa:	cmp    eax,0x1
   351ad:	jne    3516f <insert_picture_in_dpb+0x1f>
   351af:	mov    eax,DWORD PTR [rbp+0x0]
   351b2:	mov    edi,DWORD PTR [rbx+0x18ec]
   351b8:	mov    QWORD PTR [rbp+0x30],rbx
   351bc:	or     eax,0x1
   351bf:	mov    DWORD PTR [rbp+0x0],eax
   351c2:	test   edi,edi
   351c4:	je     351e8 <insert_picture_in_dpb+0x98>
   351c6:	mov    esi,DWORD PTR [rbx+0x18e8]
   351cc:	or     DWORD PTR [rbp+0x4],0x1
   351d0:	or     DWORD PTR [rbp+0xc],0x1
   351d4:	test   esi,esi
   351d6:	je     351e8 <insert_picture_in_dpb+0x98>
   351d8:	mov    edx,DWORD PTR [rbx+0x18e4]
   351de:	or     DWORD PTR [rbp+0x8],0x1
   351e2:	mov    DWORD PTR [rbp+0x1c],edx
   351e5:	nop    DWORD PTR [rax]
   351e8:	cmp    eax,0x3
   351eb:	je     35290 <insert_picture_in_dpb+0x140>
   351f1:	mov    eax,DWORD PTR [rbx+0x4]
   351f4:	mov    rdi,rbx
   351f7:	mov    DWORD PTR [rbp+0x24],eax
   351fa:	call   33600 <gen_field_ref_ids>
   351ff:	jmp    35180 <insert_picture_in_dpb+0x30>
   35204:	nop    DWORD PTR [rax+0x0]
   35208:	mov    r9d,DWORD PTR [rbx+0x18ec]
   3520f:	mov    QWORD PTR [rbp+0x28],rbx
   35213:	mov    DWORD PTR [rbp+0x0],0x3
   3521a:	test   r9d,r9d
   3521d:	je     35240 <insert_picture_in_dpb+0xf0>
   3521f:	mov    r8d,DWORD PTR [rbx+0x18e8]
   35226:	mov    DWORD PTR [rbp+0x4],0x3
   3522d:	mov    DWORD PTR [rbp+0xc],0x3
   35234:	test   r8d,r8d
   35237:	je     35240 <insert_picture_in_dpb+0xf0>
   35239:	mov    DWORD PTR [rbp+0x8],0x3
   35240:	mov    rdi,rbp
   35243:	call   336e0 <dpb_split_field>
   35248:	jmp    35180 <insert_picture_in_dpb+0x30>
   3524d:	nop    DWORD PTR [rax]
   35250:	mov    eax,DWORD PTR [rbp+0x0]
   35253:	mov    ecx,DWORD PTR [rbx+0x18ec]
   35259:	mov    QWORD PTR [rbp+0x38],rbx
   3525d:	or     eax,0x2
   35260:	mov    DWORD PTR [rbp+0x0],eax
   35263:	test   ecx,ecx
   35265:	je     351e8 <insert_picture_in_dpb+0x98>
   35267:	mov    edx,DWORD PTR [rbx+0x18e8]
   3526d:	or     DWORD PTR [rbp+0x4],0x2
   35271:	or     DWORD PTR [rbp+0xc],0x2
   35275:	test   edx,edx
   35277:	je     351e8 <insert_picture_in_dpb+0x98>
   3527d:	mov    edx,DWORD PTR [rbx+0x18e4]
   35283:	or     DWORD PTR [rbp+0x8],0x2
   35287:	mov    DWORD PTR [rbp+0x1c],edx
   3528a:	jmp    351e8 <insert_picture_in_dpb+0x98>
   3528f:	nop
   35290:	mov    rdi,rbp
   35293:	call   34890 <dpb_combine_field>
   35298:	jmp    35180 <insert_picture_in_dpb+0x30>
   3529d:	nop    DWORD PTR [rax]

00000000000352a0 <store_picture_in_dpb>:
   352a0:	endbr64 
   352a4:	push   r15
   352a6:	xor    esi,esi
   352a8:	push   r14
   352aa:	push   r13
   352ac:	push   r12
   352ae:	push   rbp
   352af:	mov    rbp,rdi
   352b2:	push   rbx
   352b3:	sub    rsp,0x28
   352b7:	mov    rax,QWORD PTR fs:0x28
   352c0:	mov    QWORD PTR [rsp+0x18],rax
   352c5:	xor    eax,eax
   352c7:	mov    rax,QWORD PTR [rip+0x532e2]        # 885b0 <img>
   352ce:	mov    ecx,DWORD PTR [rax+0x11b30]
   352d4:	test   ecx,ecx
   352d6:	setne  sil
   352da:	mov    DWORD PTR [rdi+0x18ec],esi
   352e0:	xor    edi,edi
   352e2:	cmp    DWORD PTR [rax+0x1c],0x2
   352e6:	mov    DWORD PTR [rax+0x11bc4],0x0
   352f0:	sete   dil
   352f4:	mov    DWORD PTR [rax+0x11bc0],edi
   352fa:	mov    rdi,QWORD PTR [rax+0x3748]
   35301:	mov    r11d,DWORD PTR [rdi+0x4]
   35305:	test   r11d,r11d
   35308:	jne    354f8 <store_picture_in_dpb+0x258>
   3530e:	mov    rdx,rax
   35311:	test   ecx,ecx
   35313:	je     35323 <store_picture_in_dpb+0x83>
   35315:	mov    edi,DWORD PTR [rax+0x11b34]
   3531b:	test   edi,edi
   3531d:	jne    356ce <store_picture_in_dpb+0x42e>
   35323:	mov    ecx,DWORD PTR [rbp+0x0]
   35326:	lea    edi,[rcx-0x1]
   35329:	cmp    edi,0x1
   3532c:	jbe    35400 <store_picture_in_dpb+0x160>
   35332:	mov    edx,DWORD PTR [rip+0x820c4]        # b73fc <dpb+0x1c>
   35338:	test   esi,esi
   3533a:	je     35350 <store_picture_in_dpb+0xb0>
   3533c:	mov    r12d,DWORD PTR [rax+0x11b34]
   35343:	test   r12d,r12d
   35346:	je     35b38 <store_picture_in_dpb+0x898>
   3534c:	nop    DWORD PTR [rax+0x0]
   35350:	cmp    DWORD PTR [rip+0x820a2],edx        # b73f8 <dpb+0x18>
   35356:	je     35480 <store_picture_in_dpb+0x1e0>
   3535c:	mov    r10d,DWORD PTR [rbp+0x18ec]
   35363:	test   r10d,r10d
   35366:	je     35380 <store_picture_in_dpb+0xe0>
   35368:	mov    edi,DWORD PTR [rbp+0x18e8]
   3536e:	test   edi,edi
   35370:	je     35678 <store_picture_in_dpb+0x3d8>
   35376:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35380:	mov    edx,DWORD PTR [rip+0x82076]        # b73fc <dpb+0x1c>
   35386:	mov    rax,QWORD PTR [rip+0x82053]        # b73e0 <dpb>
   3538d:	mov    rsi,rbp
   35390:	mov    rdi,QWORD PTR [rax+rdx*8]
   35394:	call   35150 <insert_picture_in_dpb>
   35399:	mov    r8d,DWORD PTR [rbp+0x0]
   3539d:	test   r8d,r8d
   353a0:	je     35648 <store_picture_in_dpb+0x3a8>
   353a6:	mov    ecx,DWORD PTR [rip+0x82050]        # b73fc <dpb+0x1c>
   353ac:	mov    rdx,QWORD PTR [rip+0x8202d]        # b73e0 <dpb>
   353b3:	mov    rdx,QWORD PTR [rdx+rcx*8]
   353b7:	mov    rax,rcx
   353ba:	add    eax,0x1
   353bd:	mov    QWORD PTR [rip+0x82054],rdx        # b7418 <dpb+0x38>
   353c4:	mov    DWORD PTR [rip+0x82032],eax        # b73fc <dpb+0x1c>
   353ca:	xor    eax,eax
   353cc:	call   33230 <update_ref_list>
   353d1:	xor    eax,eax
   353d3:	call   333a0 <update_ltref_list>
   353d8:	mov    rax,QWORD PTR [rsp+0x18]
   353dd:	xor    rax,QWORD PTR fs:0x28
   353e6:	jne    35fb1 <store_picture_in_dpb+0xd11>
   353ec:	add    rsp,0x28
   353f0:	pop    rbx
   353f1:	pop    rbp
   353f2:	pop    r12
   353f4:	pop    r13
   353f6:	pop    r14
   353f8:	pop    r15
   353fa:	ret    
   353fb:	nop    DWORD PTR [rax+rax*1+0x0]
   35400:	mov    rdi,QWORD PTR [rip+0x82011]        # b7418 <dpb+0x38>
   35407:	test   rdi,rdi
   3540a:	je     35b66 <store_picture_in_dpb+0x8c6>
   35410:	mov    eax,DWORD PTR [rbp+0x18dc]
   35416:	cmp    DWORD PTR [rdi+0x14],eax
   35419:	je     35aef <store_picture_in_dpb+0x84f>
   3541f:	nop
   35420:	mov    rax,QWORD PTR [rip+0x53189]        # 885b0 <img>
   35427:	mov    edx,DWORD PTR [rip+0x81fcf]        # b73fc <dpb+0x1c>
   3542d:	mov    rcx,QWORD PTR [rax+0x3748]
   35434:	mov    r13d,DWORD PTR [rcx+0x4]
   35438:	test   r13d,r13d
   3543b:	jne    35350 <store_picture_in_dpb+0xb0>
   35441:	mov    esi,DWORD PTR [rbp+0x18ec]
   35447:	jmp    35338 <store_picture_in_dpb+0x98>
   3544c:	test   eax,eax
   3544e:	jne    35f35 <store_picture_in_dpb+0xc95>
   35454:	mov    rax,QWORD PTR [rip+0x53155]        # 885b0 <img>
   3545b:	mov    edx,DWORD PTR [rip+0x81f9b]        # b73fc <dpb+0x1c>
   35461:	mov    rcx,QWORD PTR [rax+0x3748]
   35468:	mov    ecx,DWORD PTR [rcx+0x4]
   3546b:	test   ecx,ecx
   3546d:	je     3533c <store_picture_in_dpb+0x9c>
   35473:	cmp    DWORD PTR [rip+0x81f7f],edx        # b73f8 <dpb+0x18>
   35479:	jne    35368 <store_picture_in_dpb+0xc8>
   3547f:	nop
   35480:	xor    eax,eax
   35482:	call   31e90 <remove_unused_frame_from_dpb>
   35487:	mov    eax,DWORD PTR [rip+0x81f6f]        # b73fc <dpb+0x1c>
   3548d:	cmp    DWORD PTR [rip+0x81f65],eax        # b73f8 <dpb+0x18>
   35493:	jne    3535c <store_picture_in_dpb+0xbc>
   35499:	lea    rbx,[rsp+0x14]
   3549e:	jmp    354c2 <store_picture_in_dpb+0x222>
   354a0:	mov    eax,DWORD PTR [rsp+0x10]
   354a4:	cmp    DWORD PTR [rbp+0x4],eax
   354a7:	jl     354e2 <store_picture_in_dpb+0x242>
   354a9:	xor    eax,eax
   354ab:	call   31ef0 <output_one_frame_from_dpb>
   354b0:	mov    eax,DWORD PTR [rip+0x81f42]        # b73f8 <dpb+0x18>
   354b6:	cmp    DWORD PTR [rip+0x81f40],eax        # b73fc <dpb+0x1c>
   354bc:	jne    3535c <store_picture_in_dpb+0xbc>
   354c2:	mov    r9d,DWORD PTR [rbp+0x18ec]
   354c9:	test   r9d,r9d
   354cc:	jne    354a9 <store_picture_in_dpb+0x209>
   354ce:	lea    rdi,[rsp+0x10]
   354d3:	mov    rsi,rbx
   354d6:	call   31170 <get_smallest_poc>
   354db:	cmp    DWORD PTR [rsp+0x14],0xffffffff
   354e0:	jne    354a0 <store_picture_in_dpb+0x200>
   354e2:	mov    esi,DWORD PTR [rip+0x8120c]        # b66f4 <p_dec>
   354e8:	mov    rdi,rbp
   354eb:	call   47150 <direct_output>
   354f0:	jmp    353d8 <store_picture_in_dpb+0x138>
   354f5:	nop    DWORD PTR [rax]
   354f8:	mov    r10d,DWORD PTR [rax+0x11b38]
   354ff:	test   r10d,r10d
   35502:	je     35be5 <store_picture_in_dpb+0x945>
   35508:	mov    r9d,DWORD PTR [rip+0x81eed]        # b73fc <dpb+0x1c>
   3550f:	xor    ebx,ebx
   35511:	lea    r13,[rip+0x81ec8]        # b73e0 <dpb>
   35518:	test   r9d,r9d
   3551b:	je     35551 <store_picture_in_dpb+0x2b1>
   3551d:	nop    DWORD PTR [rax]
   35520:	mov    rdx,QWORD PTR [r13+0x0]
   35524:	mov    eax,ebx
   35526:	add    ebx,0x1
   35529:	lea    r12,[rax*8+0x0]
   35531:	mov    rdi,QWORD PTR [rdx+rax*8]
   35535:	call   319c0 <free_frame_store>
   3553a:	xor    eax,eax
   3553c:	add    r12,QWORD PTR [r13+0x0]
   35540:	call   314f0 <alloc_frame_store>
   35545:	cmp    ebx,DWORD PTR [rip+0x81eb1]        # b73fc <dpb+0x1c>
   3554b:	mov    QWORD PTR [r12],rax
   3554f:	jb     35520 <store_picture_in_dpb+0x280>
   35551:	mov    eax,DWORD PTR [rip+0x81ea9]        # b7400 <dpb+0x20>
   35557:	test   eax,eax
   35559:	je     35583 <store_picture_in_dpb+0x2e3>
   3555b:	mov    rdx,QWORD PTR [rip+0x81e86]        # b73e8 <dpb+0x8>
   35562:	lea    ecx,[rax-0x1]
   35565:	lea    rax,[rdx+0x8]
   35569:	lea    rcx,[rax+rcx*8]
   3556d:	jmp    35574 <store_picture_in_dpb+0x2d4>
   3556f:	nop
   35570:	add    rax,0x8
   35574:	mov    QWORD PTR [rdx],0x0
   3557b:	mov    rdx,rax
   3557e:	cmp    rcx,rax
   35581:	jne    35570 <store_picture_in_dpb+0x2d0>
   35583:	mov    eax,DWORD PTR [rip+0x81e7b]        # b7404 <dpb+0x24>
   35589:	test   eax,eax
   3558b:	je     355bb <store_picture_in_dpb+0x31b>
   3558d:	mov    rdx,QWORD PTR [rip+0x81e5c]        # b73f0 <dpb+0x10>
   35594:	lea    ecx,[rax-0x1]
   35597:	lea    rax,[rdx+0x8]
   3559b:	lea    rcx,[rax+rcx*8]
   3559f:	jmp    355ac <store_picture_in_dpb+0x30c>
   355a1:	nop    DWORD PTR [rax+0x0]
   355a8:	add    rax,0x8
   355ac:	mov    QWORD PTR [rdx],0x0
   355b3:	mov    rdx,rax
   355b6:	cmp    rcx,rax
   355b9:	jne    355a8 <store_picture_in_dpb+0x308>
   355bb:	mov    DWORD PTR [rip+0x81e37],0x0        # b73fc <dpb+0x1c>
   355c5:	mov    QWORD PTR [rip+0x81e48],0x0        # b7418 <dpb+0x38>
   355d0:	xor    eax,eax
   355d2:	call   33230 <update_ref_list>
   355d7:	xor    eax,eax
   355d9:	call   333a0 <update_ltref_list>
   355de:	mov    rax,QWORD PTR [rip+0x52fcb]        # 885b0 <img>
   355e5:	mov    DWORD PTR [rip+0x81e19],0x80000000        # b7408 <dpb+0x28>
   355ef:	mov    r8d,DWORD PTR [rax+0x11b3c]
   355f6:	test   r8d,r8d
   355f9:	jne    35658 <store_picture_in_dpb+0x3b8>
   355fb:	mov    DWORD PTR [rip+0x81e07],0xffffffff        # b740c <dpb+0x2c>
   35605:	mov    ecx,DWORD PTR [rbp+0x0]
   35608:	mov    DWORD PTR [rbp+0x18e8],0x0
   35612:	lea    eax,[rcx-0x1]
   35615:	cmp    eax,0x1
   35618:	ja     35420 <store_picture_in_dpb+0x180>
   3561e:	mov    rdi,QWORD PTR [rip+0x81df3]        # b7418 <dpb+0x38>
   35625:	test   rdi,rdi
   35628:	je     35420 <store_picture_in_dpb+0x180>
   3562e:	mov    eax,DWORD PTR [rbp+0x18dc]
   35634:	cmp    DWORD PTR [rdi+0x14],eax
   35637:	jne    35420 <store_picture_in_dpb+0x180>
   3563d:	jmp    35aef <store_picture_in_dpb+0x84f>
   35642:	nop    WORD PTR [rax+rax*1+0x0]
   35648:	mov    eax,DWORD PTR [rip+0x81dae]        # b73fc <dpb+0x1c>
   3564e:	xor    edx,edx
   35650:	jmp    353ba <store_picture_in_dpb+0x11a>
   35655:	nop    DWORD PTR [rax]
   35658:	movabs rax,0x100000000
   35662:	mov    ecx,DWORD PTR [rbp+0x0]
   35665:	mov    DWORD PTR [rip+0x81d9d],0x0        # b740c <dpb+0x2c>
   3566f:	mov    QWORD PTR [rbp+0x18e4],rax
   35676:	jmp    35612 <store_picture_in_dpb+0x372>
   35678:	mov    esi,DWORD PTR [rip+0x81d82]        # b7400 <dpb+0x20>
   3567e:	test   esi,esi
   35680:	je     35380 <store_picture_in_dpb+0xe0>
   35686:	xor    ebx,ebx
   35688:	lea    r12,[rip+0x3fec9]        # 75558 <MODTAB+0x338>
   3568f:	jmp    356a7 <store_picture_in_dpb+0x407>
   35691:	nop    DWORD PTR [rax+0x0]
   35698:	add    ebx,0x1
   3569b:	cmp    DWORD PTR [rip+0x81d5f],ebx        # b7400 <dpb+0x20>
   356a1:	jbe    35380 <store_picture_in_dpb+0xe0>
   356a7:	mov    rdx,QWORD PTR [rip+0x81d3a]        # b73e8 <dpb+0x8>
   356ae:	mov    eax,ebx
   356b0:	mov    esi,DWORD PTR [rbp+0x18d8]
   356b6:	mov    rax,QWORD PTR [rdx+rax*8]
   356ba:	cmp    DWORD PTR [rax+0x14],esi
   356bd:	jne    35698 <store_picture_in_dpb+0x3f8>
   356bf:	mov    esi,0x1f4
   356c4:	mov    rdi,r12
   356c7:	call   19180 <error>
   356cc:	jmp    35698 <store_picture_in_dpb+0x3f8>
   356ce:	mov    r13,QWORD PTR [rax+0x11b40]
   356d5:	lea    rbx,[rip+0x40228]        # 75904 <MODTAB+0x6e4>
   356dc:	movabs r12,0x200000002
   356e6:	test   r13,r13
   356e9:	je     35deb <store_picture_in_dpb+0xb4b>
   356ef:	nop
   356f0:	cmp    DWORD PTR [r13+0x0],0x6
   356f5:	ja     35bc4 <store_picture_in_dpb+0x924>
   356fb:	mov    eax,DWORD PTR [r13+0x0]
   356ff:	movsxd rax,DWORD PTR [rbx+rax*4]
   35703:	add    rax,rbx
   35706:	notrack jmp rax
   35709:	mov    ecx,DWORD PTR [rip+0x81cf1]        # b7400 <dpb+0x20>
   3570f:	xor    r14d,r14d
   35712:	test   ecx,ecx
   35714:	je     35740 <store_picture_in_dpb+0x4a0>
   35716:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35720:	mov    rax,QWORD PTR [rip+0x81cc1]        # b73e8 <dpb+0x8>
   35727:	mov    edx,r14d
   3572a:	add    r14d,0x1
   3572e:	mov    rdi,QWORD PTR [rax+rdx*8]
   35732:	call   31200 <unmark_for_reference>
   35737:	cmp    r14d,DWORD PTR [rip+0x81cc2]        # b7400 <dpb+0x20>
   3573e:	jb     35720 <store_picture_in_dpb+0x480>
   35740:	xor    eax,eax
   35742:	call   33230 <update_ref_list>
   35747:	xor    edi,edi
   35749:	call   33510 <mm_update_max_long_term_frame_idx>
   3574e:	mov    rdx,QWORD PTR [rip+0x52e5b]        # 885b0 <img>
   35755:	mov    rax,QWORD PTR [r13+0x18]
   35759:	mov    DWORD PTR [rdx+0x11bc4],0x1
   35763:	jmp    35780 <store_picture_in_dpb+0x4e0>
   35765:	mov    edi,DWORD PTR [r13+0x10]
   35769:	call   33510 <mm_update_max_long_term_frame_idx>
   3576e:	xor    eax,eax
   35770:	call   333a0 <update_ltref_list>
   35775:	mov    rdx,QWORD PTR [rip+0x52e34]        # 885b0 <img>
   3577c:	mov    rax,QWORD PTR [r13+0x18]
   35780:	mov    QWORD PTR [rdx+0x11b40],rax
   35787:	mov    rdi,r13
   3578a:	call   42d0 <free@plt>
   3578f:	mov    rdx,QWORD PTR [rip+0x52e1a]        # 885b0 <img>
   35796:	mov    r13,QWORD PTR [rdx+0x11b40]
   3579d:	test   r13,r13
   357a0:	jne    356f0 <store_picture_in_dpb+0x450>
   357a6:	mov    r15d,DWORD PTR [rdx+0x11bc4]
   357ad:	mov    ecx,DWORD PTR [rbp+0x0]
   357b0:	test   r15d,r15d
   357b3:	je     35612 <store_picture_in_dpb+0x372>
   357b9:	mov    QWORD PTR [rbp+0x18d8],0x0
   357c4:	mov    DWORD PTR [rbp+0x4],0x0
   357cb:	mov    DWORD PTR [rdx+0x11b0c],0x0
   357d5:	cmp    ecx,0x1
   357d8:	je     35d58 <store_picture_in_dpb+0xab8>
   357de:	cmp    ecx,0x2
   357e1:	je     35d49 <store_picture_in_dpb+0xaa9>
   357e7:	test   ecx,ecx
   357e9:	je     35d3a <store_picture_in_dpb+0xa9a>
   357ef:	xor    eax,eax
   357f1:	call   33570 <flush_dpb>
   357f6:	mov    ecx,DWORD PTR [rbp+0x0]
   357f9:	jmp    35612 <store_picture_in_dpb+0x372>
   357fe:	mov    eax,DWORD PTR [r13+0x4]
   35802:	mov    r14d,DWORD PTR [rbp+0x0]
   35806:	mov    r15d,DWORD PTR [r13+0xc]
   3580a:	mov    r8d,DWORD PTR [rbp+0x18d8]
   35811:	add    eax,0x1
   35814:	test   r14d,r14d
   35817:	jne    35bf1 <store_picture_in_dpb+0x951>
   3581d:	sub    r8d,eax
   35820:	mov    edi,r15d
   35823:	mov    DWORD PTR [rsp+0xc],r8d
   35828:	call   31050 <unmark_long_term_frame_for_reference_by_frame_idx>
   3582d:	mov    r8d,DWORD PTR [rsp+0xc]
   35832:	mov    eax,DWORD PTR [rbp+0x0]
   35835:	mov    edx,DWORD PTR [rip+0x81bc5]        # b7400 <dpb+0x20>
   3583b:	test   eax,eax
   3583d:	jne    35ca6 <store_picture_in_dpb+0xa06>
   35843:	test   edx,edx
   35845:	je     35d67 <store_picture_in_dpb+0xac7>
   3584b:	mov    rax,QWORD PTR [rip+0x81b96]        # b73e8 <dpb+0x8>
   35852:	sub    edx,0x1
   35855:	lea    rcx,[rax+rdx*8+0x8]
   3585a:	jmp    3586d <store_picture_in_dpb+0x5cd>
   3585c:	nop    DWORD PTR [rax+0x0]
   35860:	add    rax,0x8
   35864:	cmp    rcx,rax
   35867:	je     35d67 <store_picture_in_dpb+0xac7>
   3586d:	mov    rdx,QWORD PTR [rax]
   35870:	cmp    DWORD PTR [rdx+0x4],0x3
   35874:	jne    35860 <store_picture_in_dpb+0x5c0>
   35876:	mov    rsi,QWORD PTR [rdx+0x28]
   3587a:	mov    r11d,DWORD PTR [rsi+0x18e8]
   35881:	test   r11d,r11d
   35884:	jne    35860 <store_picture_in_dpb+0x5c0>
   35886:	cmp    DWORD PTR [rsi+0x18dc],r8d
   3588d:	jne    35860 <store_picture_in_dpb+0x5c0>
   3588f:	mov    rcx,QWORD PTR [rdx+0x38]
   35893:	mov    rax,QWORD PTR [rdx+0x30]
   35897:	mov    DWORD PTR [rcx+0x18e4],r15d
   3589e:	mov    DWORD PTR [rax+0x18e4],r15d
   358a5:	mov    DWORD PTR [rsi+0x18e4],r15d
   358ac:	mov    DWORD PTR [rdx+0x1c],r15d
   358b0:	mov    DWORD PTR [rcx+0x18e0],r15d
   358b7:	mov    DWORD PTR [rax+0x18e0],r15d
   358be:	mov    DWORD PTR [rsi+0x18e0],r15d
   358c5:	mov    DWORD PTR [rcx+0x18e8],0x1
   358cf:	mov    DWORD PTR [rax+0x18e8],0x1
   358d9:	mov    DWORD PTR [rsi+0x18e8],0x1
   358e3:	mov    DWORD PTR [rdx+0x8],0x3
   358ea:	jmp    35d2e <store_picture_in_dpb+0xa8e>
   358ef:	nop
   358f0:	mov    eax,DWORD PTR [rbp+0x18d8]
   358f6:	mov    ecx,DWORD PTR [rbp+0x0]
   358f9:	mov    edx,DWORD PTR [rip+0x81b01]        # b7400 <dpb+0x20>
   358ff:	test   ecx,ecx
   35901:	lea    r8d,[rax+rax*1+0x1]
   35906:	cmove  r8d,eax
   3590a:	mov    eax,DWORD PTR [r13+0x4]
   3590e:	add    eax,0x1
   35911:	sub    r8d,eax
   35914:	test   edx,edx
   35916:	je     359a5 <store_picture_in_dpb+0x705>
   3591c:	mov    rax,QWORD PTR [rip+0x81ac5]        # b73e8 <dpb+0x8>
   35923:	sub    edx,0x1
   35926:	lea    rsi,[rax+rdx*8+0x8]
   3592b:	jmp    35942 <store_picture_in_dpb+0x6a2>
   3592d:	nop    DWORD PTR [rax]
   35930:	cmp    edx,0x3
   35933:	je     35b78 <store_picture_in_dpb+0x8d8>
   35939:	add    rax,0x8
   3593d:	cmp    rsi,rax
   35940:	je     359a5 <store_picture_in_dpb+0x705>
   35942:	mov    rdi,QWORD PTR [rax]
   35945:	mov    edx,DWORD PTR [rdi+0x4]
   35948:	test   ecx,ecx
   3594a:	je     35930 <store_picture_in_dpb+0x690>
   3594c:	mov    r9d,edx
   3594f:	and    r9d,0x1
   35953:	je     3596c <store_picture_in_dpb+0x6cc>
   35955:	test   BYTE PTR [rdi+0x8],0x1
   35959:	jne    3596c <store_picture_in_dpb+0x6cc>
   3595b:	mov    r10,QWORD PTR [rdi+0x30]
   3595f:	cmp    r8d,DWORD PTR [r10+0x18dc]
   35966:	je     35e22 <store_picture_in_dpb+0xb82>
   3596c:	and    edx,0x2
   3596f:	je     35939 <store_picture_in_dpb+0x699>
   35971:	test   BYTE PTR [rdi+0x8],0x2
   35975:	jne    35939 <store_picture_in_dpb+0x699>
   35977:	mov    rdx,QWORD PTR [rdi+0x38]
   3597b:	cmp    r8d,DWORD PTR [rdx+0x18dc]
   35982:	jne    35939 <store_picture_in_dpb+0x699>
   35984:	mov    DWORD PTR [rdx+0x18ec],0x0
   3598e:	cmp    DWORD PTR [rdi],0x3
   35991:	mov    DWORD PTR [rdi+0x4],r9d
   35995:	jne    359a5 <store_picture_in_dpb+0x705>
   35997:	mov    rax,QWORD PTR [rdi+0x28]
   3599b:	mov    DWORD PTR [rax+0x18ec],0x0
   359a5:	xor    eax,eax
   359a7:	call   33230 <update_ref_list>
   359ac:	mov    rdx,QWORD PTR [rip+0x52bfd]        # 885b0 <img>
   359b3:	mov    rax,QWORD PTR [r13+0x18]
   359b7:	jmp    35780 <store_picture_in_dpb+0x4e0>
   359bc:	mov    rax,QWORD PTR [r13+0x18]
   359c0:	test   rax,rax
   359c3:	je     35780 <store_picture_in_dpb+0x4e0>
   359c9:	mov    esi,0x1f4
   359ce:	lea    rdi,[rip+0x3fa3b]        # 75410 <MODTAB+0x1f0>
   359d5:	call   19180 <error>
   359da:	mov    rdx,QWORD PTR [rip+0x52bcf]        # 885b0 <img>
   359e1:	mov    rax,QWORD PTR [r13+0x18]
   359e5:	jmp    35780 <store_picture_in_dpb+0x4e0>
   359ea:	mov    eax,DWORD PTR [rip+0x81a14]        # b7404 <dpb+0x24>
   359f0:	mov    esi,DWORD PTR [r13+0x8]
   359f4:	xor    ecx,ecx
   359f6:	test   eax,eax
   359f8:	jne    35a18 <store_picture_in_dpb+0x778>
   359fa:	jmp    35aa0 <store_picture_in_dpb+0x800>
   359ff:	nop
   35a00:	cmp    eax,0x3
   35a03:	je     35ba0 <store_picture_in_dpb+0x900>
   35a09:	add    ecx,0x1
   35a0c:	cmp    ecx,DWORD PTR [rip+0x819f2]        # b7404 <dpb+0x24>
   35a12:	jae    35aa0 <store_picture_in_dpb+0x800>
   35a18:	mov    rdx,QWORD PTR [rip+0x819d1]        # b73f0 <dpb+0x10>
   35a1f:	mov    eax,ecx
   35a21:	mov    r15d,DWORD PTR [rbp+0x0]
   35a25:	mov    rdi,QWORD PTR [rdx+rax*8]
   35a29:	mov    eax,DWORD PTR [rdi+0x4]
   35a2c:	test   r15d,r15d
   35a2f:	je     35a00 <store_picture_in_dpb+0x760>
   35a31:	mov    edx,eax
   35a33:	and    edx,0x1
   35a36:	je     35a56 <store_picture_in_dpb+0x7b6>
   35a38:	mov    r8,QWORD PTR [rdi+0x4]
   35a3c:	and    r8,r12
   35a3f:	test   BYTE PTR [rdi+0x8],0x1
   35a43:	je     35a56 <store_picture_in_dpb+0x7b6>
   35a45:	mov    r9,QWORD PTR [rdi+0x30]
   35a49:	cmp    esi,DWORD PTR [r9+0x18e0]
   35a50:	je     35e05 <store_picture_in_dpb+0xb65>
   35a56:	test   al,0x2
   35a58:	je     35a09 <store_picture_in_dpb+0x769>
   35a5a:	mov    eax,DWORD PTR [rdi+0x8]
   35a5d:	test   al,0x2
   35a5f:	je     35a09 <store_picture_in_dpb+0x769>
   35a61:	mov    r8,QWORD PTR [rdi+0x38]
   35a65:	cmp    esi,DWORD PTR [r8+0x18e0]
   35a6c:	jne    35a09 <store_picture_in_dpb+0x769>
   35a6e:	mov    QWORD PTR [r8+0x18e8],0x0
   35a79:	and    eax,0x1
   35a7c:	cmp    DWORD PTR [rdi],0x3
   35a7f:	mov    DWORD PTR [rdi+0x4],edx
   35a82:	mov    DWORD PTR [rdi+0x8],eax
   35a85:	jne    35aa0 <store_picture_in_dpb+0x800>
   35a87:	mov    rax,QWORD PTR [rdi+0x28]
   35a8b:	mov    QWORD PTR [rax+0x18e8],0x0
   35a96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35aa0:	xor    eax,eax
   35aa2:	call   333a0 <update_ltref_list>
   35aa7:	mov    rdx,QWORD PTR [rip+0x52b02]        # 885b0 <img>
   35aae:	mov    rax,QWORD PTR [r13+0x18]
   35ab2:	jmp    35780 <store_picture_in_dpb+0x4e0>
   35ab7:	mov    edi,DWORD PTR [rbp+0x0]
   35aba:	mov    r14d,DWORD PTR [r13+0xc]
   35abe:	test   edi,edi
   35ac0:	jne    35c8b <store_picture_in_dpb+0x9eb>
   35ac6:	mov    edi,r14d
   35ac9:	call   31050 <unmark_long_term_frame_for_reference_by_frame_idx>
   35ace:	mov    DWORD PTR [rbp+0x18e8],0x1
   35ad8:	mov    rdx,QWORD PTR [rip+0x52ad1]        # 885b0 <img>
   35adf:	mov    DWORD PTR [rbp+0x18e4],r14d
   35ae6:	mov    rax,QWORD PTR [r13+0x18]
   35aea:	jmp    35780 <store_picture_in_dpb+0x4e0>
   35aef:	cmp    ecx,0x1
   35af2:	je     35d75 <store_picture_in_dpb+0xad5>
   35af8:	cmp    DWORD PTR [rdi],0x1
   35afb:	jne    35420 <store_picture_in_dpb+0x180>
   35b01:	mov    r14d,DWORD PTR [rbp+0x18ec]
   35b08:	mov    eax,DWORD PTR [rdi+0xc]
   35b0b:	test   r14d,r14d
   35b0e:	jne    3544c <store_picture_in_dpb+0x1ac>
   35b14:	test   eax,eax
   35b16:	je     35f35 <store_picture_in_dpb+0xc95>
   35b1c:	mov    eax,DWORD PTR [rip+0x818da]        # b73fc <dpb+0x1c>
   35b22:	cmp    DWORD PTR [rip+0x818d0],eax        # b73f8 <dpb+0x18>
   35b28:	jne    35380 <store_picture_in_dpb+0xe0>
   35b2e:	jmp    35480 <store_picture_in_dpb+0x1e0>
   35b33:	nop    DWORD PTR [rax+rax*1+0x0]
   35b38:	mov    rax,QWORD PTR [rip+0x80331]        # b5e70 <active_sps>
   35b3f:	mov    eax,DWORD PTR [rax+0x46c]
   35b45:	sub    eax,DWORD PTR [rip+0x818b9]        # b7404 <dpb+0x24>
   35b4b:	cmp    DWORD PTR [rip+0x818af],eax        # b7400 <dpb+0x20>
   35b51:	je     35d83 <store_picture_in_dpb+0xae3>
   35b57:	mov    DWORD PTR [rbp+0x18e8],0x0
   35b61:	jmp    35350 <store_picture_in_dpb+0xb0>
   35b66:	mov    rax,rdx
   35b69:	mov    edx,DWORD PTR [rip+0x8188d]        # b73fc <dpb+0x1c>
   35b6f:	jmp    35441 <store_picture_in_dpb+0x1a1>
   35b74:	nop    DWORD PTR [rax+0x0]
   35b78:	mov    edx,DWORD PTR [rdi+0x8]
   35b7b:	test   edx,edx
   35b7d:	jne    35939 <store_picture_in_dpb+0x699>
   35b83:	mov    rdx,QWORD PTR [rdi+0x28]
   35b87:	cmp    r8d,DWORD PTR [rdx+0x18dc]
   35b8e:	jne    35939 <store_picture_in_dpb+0x699>
   35b94:	call   31200 <unmark_for_reference>
   35b99:	jmp    359a5 <store_picture_in_dpb+0x705>
   35b9e:	xchg   ax,ax
   35ba0:	cmp    DWORD PTR [rdi+0x8],0x3
   35ba4:	jne    35a09 <store_picture_in_dpb+0x769>
   35baa:	mov    rax,QWORD PTR [rdi+0x28]
   35bae:	cmp    esi,DWORD PTR [rax+0x18e0]
   35bb4:	jne    35a09 <store_picture_in_dpb+0x769>
   35bba:	call   30c40 <unmark_for_long_term_reference>
   35bbf:	jmp    35a09 <store_picture_in_dpb+0x769>
   35bc4:	mov    esi,0x1f4
   35bc9:	lea    rdi,[rip+0x3f950]        # 75520 <MODTAB+0x300>
   35bd0:	call   19180 <error>
   35bd5:	mov    rdx,QWORD PTR [rip+0x529d4]        # 885b0 <img>
   35bdc:	mov    rax,QWORD PTR [r13+0x18]
   35be0:	jmp    35780 <store_picture_in_dpb+0x4e0>
   35be5:	xor    eax,eax
   35be7:	call   33570 <flush_dpb>
   35bec:	jmp    355c5 <store_picture_in_dpb+0x325>
   35bf1:	mov    edx,DWORD PTR [rip+0x81809]        # b7400 <dpb+0x20>
   35bf7:	lea    r8d,[r8+r8*1+0x1]
   35bfc:	sub    r8d,eax
   35bff:	test   edx,edx
   35c01:	je     35c53 <store_picture_in_dpb+0x9b3>
   35c03:	mov    rax,QWORD PTR [rip+0x817de]        # b73e8 <dpb+0x8>
   35c0a:	sub    edx,0x1
   35c0d:	lea    rsi,[rax+rdx*8+0x8]
   35c12:	nop    WORD PTR [rax+rax*1+0x0]
   35c18:	mov    rdx,QWORD PTR [rax]
   35c1b:	mov    ecx,DWORD PTR [rdx+0x4]
   35c1e:	test   cl,0x1
   35c21:	je     35c34 <store_picture_in_dpb+0x994>
   35c23:	mov    rdi,QWORD PTR [rdx+0x30]
   35c27:	cmp    DWORD PTR [rdi+0x18dc],r8d
   35c2e:	je     35de1 <store_picture_in_dpb+0xb41>
   35c34:	and    ecx,0x2
   35c37:	je     35c4a <store_picture_in_dpb+0x9aa>
   35c39:	mov    rdx,QWORD PTR [rdx+0x38]
   35c3d:	cmp    DWORD PTR [rdx+0x18dc],r8d
   35c44:	je     35dd7 <store_picture_in_dpb+0xb37>
   35c4a:	add    rax,0x8
   35c4e:	cmp    rsi,rax
   35c51:	jne    35c18 <store_picture_in_dpb+0x978>
   35c53:	lea    rdi,[rip+0x3f93e]        # 75598 <MODTAB+0x378>
   35c5a:	mov    esi,0xc8
   35c5f:	mov    DWORD PTR [rsp+0xc],r8d
   35c64:	call   19180 <error>
   35c69:	mov    r8d,DWORD PTR [rsp+0xc]
   35c6e:	xor    edi,edi
   35c70:	xor    ecx,ecx
   35c72:	xor    edx,edx
   35c74:	mov    esi,r15d
   35c77:	mov    DWORD PTR [rsp+0xc],r8d
   35c7c:	call   31090 <unmark_long_term_field_for_reference_by_frame_idx>
   35c81:	mov    r8d,DWORD PTR [rsp+0xc]
   35c86:	jmp    35832 <store_picture_in_dpb+0x592>
   35c8b:	mov    ecx,DWORD PTR [rbp+0x18dc]
   35c91:	xor    r8d,r8d
   35c94:	mov    edx,0x1
   35c99:	mov    esi,r14d
   35c9c:	call   31090 <unmark_long_term_field_for_reference_by_frame_idx>
   35ca1:	jmp    35ace <store_picture_in_dpb+0x82e>
   35ca6:	xor    r9d,r9d
   35ca9:	cmp    eax,0x1
   35cac:	sete   r9b
   35cb0:	test   edx,edx
   35cb2:	je     35d22 <store_picture_in_dpb+0xa82>
   35cb4:	lea    eax,[rdx-0x1]
   35cb7:	mov    rsi,QWORD PTR [rip+0x8172a]        # b73e8 <dpb+0x8>
   35cbe:	xor    r14d,r14d
   35cc1:	lea    rdi,[rax*8+0x8]
   35cc9:	nop    DWORD PTR [rax+0x0]
   35cd0:	mov    rax,QWORD PTR [rsi+r14*1]
   35cd4:	mov    edx,DWORD PTR [rax+0x4]
   35cd7:	test   dl,0x1
   35cda:	je     35cf9 <store_picture_in_dpb+0xa59>
   35cdc:	mov    rcx,QWORD PTR [rax+0x30]
   35ce0:	mov    r10d,DWORD PTR [rcx+0x18e8]
   35ce7:	test   r10d,r10d
   35cea:	jne    35cf9 <store_picture_in_dpb+0xa59>
   35cec:	cmp    DWORD PTR [rcx+0x18dc],r8d
   35cf3:	je     35e41 <store_picture_in_dpb+0xba1>
   35cf9:	and    edx,0x2
   35cfc:	je     35d19 <store_picture_in_dpb+0xa79>
   35cfe:	mov    rdx,QWORD PTR [rax+0x38]
   35d02:	mov    ecx,DWORD PTR [rdx+0x18e8]
   35d08:	test   ecx,ecx
   35d0a:	jne    35d19 <store_picture_in_dpb+0xa79>
   35d0c:	cmp    DWORD PTR [rdx+0x18dc],r8d
   35d13:	je     35ec9 <store_picture_in_dpb+0xc29>
   35d19:	add    r14,0x8
   35d1d:	cmp    rdi,r14
   35d20:	jne    35cd0 <store_picture_in_dpb+0xa30>
   35d22:	lea    rdi,[rip+0x3f7b7]        # 754e0 <MODTAB+0x2c0>
   35d29:	call   4320 <puts@plt>
   35d2e:	xor    eax,eax
   35d30:	call   33230 <update_ref_list>
   35d35:	jmp    35aa0 <store_picture_in_dpb+0x800>
   35d3a:	mov    DWORD PTR [rdx+0x11b08],0x0
   35d44:	jmp    357ef <store_picture_in_dpb+0x54f>
   35d49:	mov    DWORD PTR [rdx+0x11b04],0x0
   35d53:	jmp    357ef <store_picture_in_dpb+0x54f>
   35d58:	mov    DWORD PTR [rdx+0x11b00],0x0
   35d62:	jmp    357ef <store_picture_in_dpb+0x54f>
   35d67:	lea    rdi,[rip+0x3f6ea]        # 75458 <MODTAB+0x238>
   35d6e:	call   4320 <puts@plt>
   35d73:	jmp    35d2e <store_picture_in_dpb+0xa8e>
   35d75:	cmp    DWORD PTR [rdi],0x2
   35d78:	jne    35420 <store_picture_in_dpb+0x180>
   35d7e:	jmp    35b01 <store_picture_in_dpb+0x861>
   35d83:	test   edx,edx
   35d85:	je     35b57 <store_picture_in_dpb+0x8b7>
   35d8b:	mov    rax,QWORD PTR [rip+0x8164e]        # b73e0 <dpb>
   35d92:	lea    ecx,[rdx-0x1]
   35d95:	lea    rcx,[rax+rcx*8+0x8]
   35d9a:	jmp    35dad <store_picture_in_dpb+0xb0d>
   35d9c:	nop    DWORD PTR [rax+0x0]
   35da0:	add    rax,0x8
   35da4:	cmp    rcx,rax
   35da7:	je     35b57 <store_picture_in_dpb+0x8b7>
   35dad:	mov    rdi,QWORD PTR [rax]
   35db0:	mov    ebx,DWORD PTR [rdi+0x4]
   35db3:	test   ebx,ebx
   35db5:	je     35da0 <store_picture_in_dpb+0xb00>
   35db7:	mov    r11d,DWORD PTR [rdi+0x8]
   35dbb:	test   r11d,r11d
   35dbe:	jne    35da0 <store_picture_in_dpb+0xb00>
   35dc0:	call   31200 <unmark_for_reference>
   35dc5:	xor    eax,eax
   35dc7:	call   33230 <update_ref_list>
   35dcc:	mov    edx,DWORD PTR [rip+0x8162a]        # b73fc <dpb+0x1c>
   35dd2:	jmp    35b57 <store_picture_in_dpb+0x8b7>
   35dd7:	mov    edi,0x2
   35ddc:	jmp    35c70 <store_picture_in_dpb+0x9d0>
   35de1:	mov    edi,0x1
   35de6:	jmp    35c70 <store_picture_in_dpb+0x9d0>
   35deb:	mov    ecx,DWORD PTR [rbp+0x0]
   35dee:	lea    edx,[rcx-0x1]
   35df1:	cmp    edx,0x1
   35df4:	jbe    3561e <store_picture_in_dpb+0x37e>
   35dfa:	mov    edx,DWORD PTR [rip+0x815fc]        # b73fc <dpb+0x1c>
   35e00:	jmp    35441 <store_picture_in_dpb+0x1a1>
   35e05:	mov    QWORD PTR [r9+0x18e8],0x0
   35e10:	cmp    DWORD PTR [rdi],0x3
   35e13:	mov    QWORD PTR [rdi+0x4],r8
   35e17:	jne    35aa0 <store_picture_in_dpb+0x800>
   35e1d:	jmp    35a87 <store_picture_in_dpb+0x7e7>
   35e22:	mov    DWORD PTR [r10+0x18ec],0x0
   35e2d:	and    edx,0x2
   35e30:	cmp    DWORD PTR [rdi],0x3
   35e33:	mov    DWORD PTR [rdi+0x4],edx
   35e36:	jne    359a5 <store_picture_in_dpb+0x705>
   35e3c:	jmp    35997 <store_picture_in_dpb+0x6f7>
   35e41:	mov    edx,DWORD PTR [rax+0x8]
   35e44:	test   edx,edx
   35e46:	je     35f86 <store_picture_in_dpb+0xce6>
   35e4c:	cmp    r15d,DWORD PTR [rax+0x1c]
   35e50:	je     35e7a <store_picture_in_dpb+0xbda>
   35e52:	lea    rdi,[rip+0x3f63f]        # 75498 <MODTAB+0x278>
   35e59:	mov    DWORD PTR [rsp+0xc],r9d
   35e5e:	call   4320 <puts@plt>
   35e63:	mov    rax,QWORD PTR [rip+0x8157e]        # b73e8 <dpb+0x8>
   35e6a:	mov    r9d,DWORD PTR [rsp+0xc]
   35e6f:	mov    rax,QWORD PTR [rax+r14*1]
   35e73:	mov    rcx,QWORD PTR [rax+0x30]
   35e77:	mov    edx,DWORD PTR [rax+0x8]
   35e7a:	lea    esi,[r9+r15*2]
   35e7e:	or     edx,0x1
   35e81:	mov    DWORD PTR [rcx+0x18e4],r15d
   35e88:	mov    DWORD PTR [rax+0x1c],r15d
   35e8c:	mov    DWORD PTR [rcx+0x18e0],esi
   35e92:	mov    DWORD PTR [rcx+0x18e8],0x1
   35e9c:	mov    DWORD PTR [rax+0x8],edx
   35e9f:	cmp    edx,0x3
   35ea2:	jne    35d2e <store_picture_in_dpb+0xa8e>
   35ea8:	mov    rax,QWORD PTR [rax+0x28]
   35eac:	mov    DWORD PTR [rax+0x18e8],0x1
   35eb6:	mov    DWORD PTR [rax+0x18e0],r15d
   35ebd:	mov    DWORD PTR [rax+0x18e4],r15d
   35ec4:	jmp    35d2e <store_picture_in_dpb+0xa8e>
   35ec9:	mov    ecx,DWORD PTR [rax+0x8]
   35ecc:	test   ecx,ecx
   35ece:	je     35f5b <store_picture_in_dpb+0xcbb>
   35ed4:	cmp    r15d,DWORD PTR [rax+0x1c]
   35ed8:	je     35f02 <store_picture_in_dpb+0xc62>
   35eda:	lea    rdi,[rip+0x3f5b7]        # 75498 <MODTAB+0x278>
   35ee1:	mov    DWORD PTR [rsp+0xc],r9d
   35ee6:	call   4320 <puts@plt>
   35eeb:	mov    rax,QWORD PTR [rip+0x814f6]        # b73e8 <dpb+0x8>
   35ef2:	mov    r9d,DWORD PTR [rsp+0xc]
   35ef7:	mov    rax,QWORD PTR [rax+r14*1]
   35efb:	mov    rdx,QWORD PTR [rax+0x38]
   35eff:	mov    ecx,DWORD PTR [rax+0x8]
   35f02:	lea    esi,[r9+r15*2]
   35f06:	or     ecx,0x2
   35f09:	mov    DWORD PTR [rdx+0x18e4],r15d
   35f10:	mov    DWORD PTR [rax+0x1c],r15d
   35f14:	mov    DWORD PTR [rdx+0x18e0],esi
   35f1a:	mov    DWORD PTR [rdx+0x18e8],0x1
   35f24:	mov    DWORD PTR [rax+0x8],ecx
   35f27:	cmp    ecx,0x3
   35f2a:	je     35ea8 <store_picture_in_dpb+0xc08>
   35f30:	jmp    35d2e <store_picture_in_dpb+0xa8e>
   35f35:	mov    rsi,rbp
   35f38:	call   35150 <insert_picture_in_dpb>
   35f3d:	xor    eax,eax
   35f3f:	call   33230 <update_ref_list>
   35f44:	xor    eax,eax
   35f46:	call   333a0 <update_ltref_list>
   35f4b:	mov    QWORD PTR [rip+0x814c2],0x0        # b7418 <dpb+0x38>
   35f56:	jmp    353d8 <store_picture_in_dpb+0x138>
   35f5b:	lea    ecx,[r9+r15*2]
   35f5f:	mov    DWORD PTR [rdx+0x18e4],r15d
   35f66:	mov    DWORD PTR [rax+0x1c],r15d
   35f6a:	mov    DWORD PTR [rdx+0x18e0],ecx
   35f70:	mov    DWORD PTR [rdx+0x18e8],0x1
   35f7a:	mov    DWORD PTR [rax+0x8],0x2
   35f81:	jmp    35d2e <store_picture_in_dpb+0xa8e>
   35f86:	lea    edx,[r9+r15*2]
   35f8a:	mov    DWORD PTR [rcx+0x18e4],r15d
   35f91:	mov    DWORD PTR [rax+0x1c],r15d
   35f95:	mov    DWORD PTR [rcx+0x18e0],edx
   35f9b:	mov    DWORD PTR [rcx+0x18e8],0x1
   35fa5:	mov    DWORD PTR [rax+0x8],0x1
   35fac:	jmp    35d2e <store_picture_in_dpb+0xa8e>
   35fb1:	call   4390 <__stack_chk_fail@plt>
   35fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000035fc0 <alloc_ref_pic_list_reordering_buffer>:
   35fc0:	endbr64 
   35fc4:	push   rbp
   35fc5:	push   rbx
   35fc6:	mov    rbx,rdi
   35fc9:	sub    rsp,0x8
   35fcd:	mov    rdx,QWORD PTR [rip+0x525dc]        # 885b0 <img>
   35fd4:	mov    eax,DWORD PTR [rdx+0x18]
   35fd7:	lea    ecx,[rax-0x2]
   35fda:	and    ecx,0xfffffffd
   35fdd:	jne    36020 <alloc_ref_pic_list_reordering_buffer+0x60>
   35fdf:	mov    QWORD PTR [rdi+0x40],0x0
   35fe7:	mov    QWORD PTR [rdi+0x48],0x0
   35fef:	mov    QWORD PTR [rdi+0x50],0x0
   35ff7:	cmp    eax,0x1
   35ffa:	je     3608d <alloc_ref_pic_list_reordering_buffer+0xcd>
   36000:	mov    QWORD PTR [rbx+0x60],0x0
   36008:	mov    QWORD PTR [rbx+0x68],0x0
   36010:	mov    QWORD PTR [rbx+0x70],0x0
   36018:	add    rsp,0x8
   3601c:	pop    rbx
   3601d:	pop    rbp
   3601e:	ret    
   3601f:	nop
   36020:	mov    ebp,DWORD PTR [rdx+0x11940]
   36026:	mov    esi,0x4
   3602b:	add    ebp,0x1
   3602e:	movsxd rbp,ebp
   36031:	mov    rdi,rbp
   36034:	call   4400 <calloc@plt>
   36039:	mov    QWORD PTR [rbx+0x40],rax
   3603d:	test   rax,rax
   36040:	je     360ee <alloc_ref_pic_list_reordering_buffer+0x12e>
   36046:	mov    esi,0x4
   3604b:	mov    rdi,rbp
   3604e:	call   4400 <calloc@plt>
   36053:	mov    QWORD PTR [rbx+0x48],rax
   36057:	test   rax,rax
   3605a:	je     360ff <alloc_ref_pic_list_reordering_buffer+0x13f>
   36060:	mov    esi,0x4
   36065:	mov    rdi,rbp
   36068:	call   4400 <calloc@plt>
   3606d:	mov    QWORD PTR [rbx+0x50],rax
   36071:	test   rax,rax
   36074:	je     36110 <alloc_ref_pic_list_reordering_buffer+0x150>
   3607a:	mov    rdx,QWORD PTR [rip+0x5252f]        # 885b0 <img>
   36081:	mov    eax,DWORD PTR [rdx+0x18]
   36084:	cmp    eax,0x1
   36087:	jne    36000 <alloc_ref_pic_list_reordering_buffer+0x40>
   3608d:	mov    ebp,DWORD PTR [rdx+0x11944]
   36093:	mov    esi,0x4
   36098:	add    ebp,0x1
   3609b:	movsxd rbp,ebp
   3609e:	mov    rdi,rbp
   360a1:	call   4400 <calloc@plt>
   360a6:	mov    QWORD PTR [rbx+0x60],rax
   360aa:	test   rax,rax
   360ad:	je     36121 <alloc_ref_pic_list_reordering_buffer+0x161>
   360af:	mov    esi,0x4
   360b4:	mov    rdi,rbp
   360b7:	call   4400 <calloc@plt>
   360bc:	mov    QWORD PTR [rbx+0x68],rax
   360c0:	test   rax,rax
   360c3:	je     3612f <alloc_ref_pic_list_reordering_buffer+0x16f>
   360c5:	mov    esi,0x4
   360ca:	mov    rdi,rbp
   360cd:	call   4400 <calloc@plt>
   360d2:	mov    QWORD PTR [rbx+0x70],rax
   360d6:	test   rax,rax
   360d9:	jne    36018 <alloc_ref_pic_list_reordering_buffer+0x58>
   360df:	pop    rax
   360e0:	lea    rdi,[rip+0x3f639]        # 75720 <MODTAB+0x500>
   360e7:	pop    rbx
   360e8:	pop    rbp
   360e9:	jmp    38210 <no_mem_exit>
   360ee:	lea    rdi,[rip+0x3f4cb]        # 755c0 <MODTAB+0x3a0>
   360f5:	call   38210 <no_mem_exit>
   360fa:	jmp    36046 <alloc_ref_pic_list_reordering_buffer+0x86>
   360ff:	lea    rdi,[rip+0x3f502]        # 75608 <MODTAB+0x3e8>
   36106:	call   38210 <no_mem_exit>
   3610b:	jmp    36060 <alloc_ref_pic_list_reordering_buffer+0xa0>
   36110:	lea    rdi,[rip+0x3f539]        # 75650 <MODTAB+0x430>
   36117:	call   38210 <no_mem_exit>
   3611c:	jmp    3607a <alloc_ref_pic_list_reordering_buffer+0xba>
   36121:	lea    rdi,[rip+0x3f568]        # 75690 <MODTAB+0x470>
   36128:	call   38210 <no_mem_exit>
   3612d:	jmp    360af <alloc_ref_pic_list_reordering_buffer+0xef>
   3612f:	lea    rdi,[rip+0x3f5a2]        # 756d8 <MODTAB+0x4b8>
   36136:	call   38210 <no_mem_exit>
   3613b:	jmp    360c5 <alloc_ref_pic_list_reordering_buffer+0x105>
   3613d:	nop    DWORD PTR [rax]

0000000000036140 <free_ref_pic_list_reordering_buffer>:
   36140:	endbr64 
   36144:	push   rbx
   36145:	mov    rbx,rdi
   36148:	mov    rdi,QWORD PTR [rdi+0x40]
   3614c:	test   rdi,rdi
   3614f:	je     36156 <free_ref_pic_list_reordering_buffer+0x16>
   36151:	call   42d0 <free@plt>
   36156:	mov    rdi,QWORD PTR [rbx+0x48]
   3615a:	test   rdi,rdi
   3615d:	je     36164 <free_ref_pic_list_reordering_buffer+0x24>
   3615f:	call   42d0 <free@plt>
   36164:	mov    rdi,QWORD PTR [rbx+0x50]
   36168:	test   rdi,rdi
   3616b:	je     36172 <free_ref_pic_list_reordering_buffer+0x32>
   3616d:	call   42d0 <free@plt>
   36172:	mov    rdi,QWORD PTR [rbx+0x60]
   36176:	mov    QWORD PTR [rbx+0x40],0x0
   3617e:	mov    QWORD PTR [rbx+0x48],0x0
   36186:	mov    QWORD PTR [rbx+0x50],0x0
   3618e:	test   rdi,rdi
   36191:	je     36198 <free_ref_pic_list_reordering_buffer+0x58>
   36193:	call   42d0 <free@plt>
   36198:	mov    rdi,QWORD PTR [rbx+0x68]
   3619c:	test   rdi,rdi
   3619f:	je     361a6 <free_ref_pic_list_reordering_buffer+0x66>
   361a1:	call   42d0 <free@plt>
   361a6:	mov    rdi,QWORD PTR [rbx+0x70]
   361aa:	test   rdi,rdi
   361ad:	je     361b4 <free_ref_pic_list_reordering_buffer+0x74>
   361af:	call   42d0 <free@plt>
   361b4:	mov    QWORD PTR [rbx+0x60],0x0
   361bc:	mov    QWORD PTR [rbx+0x68],0x0
   361c4:	mov    QWORD PTR [rbx+0x70],0x0
   361cc:	pop    rbx
   361cd:	ret    
   361ce:	xchg   ax,ax

00000000000361d0 <fill_frame_num_gap>:
   361d0:	endbr64 
   361d4:	push   r15
   361d6:	mov    r15,rdi
   361d9:	push   r14
   361db:	push   r13
   361dd:	push   r12
   361df:	push   rbp
   361e0:	mov    ebp,0x1
   361e5:	push   rbx
   361e6:	sub    rsp,0x8
   361ea:	mov    eax,DWORD PTR [rip+0x7fc78]        # b5e68 <log2_max_frame_num_minus4>
   361f0:	mov    r12d,DWORD PTR [rdi+0x11b10]
   361f7:	mov    r14d,DWORD PTR [rdi+0x11b30]
   361fe:	mov    DWORD PTR [rdi+0x11b30],0x1
   36208:	lea    ecx,[rax+0x4]
   3620b:	mov    eax,DWORD PTR [rdi+0x11bc8]
   36211:	shl    ebp,cl
   36213:	add    eax,0x1
   36216:	cdq    
   36217:	idiv   ebp
   36219:	cmp    edx,r12d
   3621c:	je     3627e <fill_frame_num_gap+0xae>
   3621e:	movabs r13,0x100000001
   36228:	mov    ebx,edx
   3622a:	nop    WORD PTR [rax+rax*1+0x0]
   36230:	mov    edx,DWORD PTR [r15+0x3c]
   36234:	mov    ecx,DWORD PTR [r15+0x38]
   36238:	xor    edi,edi
   3623a:	mov    esi,DWORD PTR [r15+0x34]
   3623e:	mov    r8d,DWORD PTR [r15+0x40]
   36242:	call   31560 <alloc_storable_picture>
   36247:	mov    DWORD PTR [rax+0x18dc],ebx
   3624d:	mov    rdi,rax
   36250:	mov    DWORD PTR [rax+0x190c],0x1
   3625a:	mov    QWORD PTR [rax+0x18f0],r13
   36261:	mov    DWORD PTR [r15+0x11b34],0x0
   3626c:	call   352a0 <store_picture_in_dpb>
   36271:	lea    eax,[rbx+0x1]
   36274:	cdq    
   36275:	idiv   ebp
   36277:	mov    ebx,edx
   36279:	cmp    r12d,edx
   3627c:	jne    36230 <fill_frame_num_gap+0x60>
   3627e:	mov    DWORD PTR [r15+0x11b30],r14d
   36285:	add    rsp,0x8
   36289:	pop    rbx
   3628a:	pop    rbp
   3628b:	pop    r12
   3628d:	pop    r13
   3628f:	pop    r14
   36291:	pop    r15
   36293:	ret    
   36294:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3629f:	nop

00000000000362a0 <alloc_colocated>:
   362a0:	endbr64 
   362a4:	push   r14
   362a6:	mov    r14d,esi
   362a9:	mov    esi,0x1310
   362ae:	push   r13
   362b0:	push   r12
   362b2:	push   rbp
   362b3:	mov    ebp,edi
   362b5:	mov    edi,0x1
   362ba:	push   rbx
   362bb:	mov    ebx,edx
   362bd:	call   4400 <calloc@plt>
   362c2:	mov    r12,rax
   362c5:	test   rax,rax
   362c8:	je     36451 <alloc_colocated+0x1b1>
   362ce:	test   r14d,r14d
   362d1:	lea    r13d,[r14+0x3]
   362d5:	lea    edi,[rbp+0x3]
   362d8:	mov    DWORD PTR [r12+0x4],ebp
   362dd:	cmovns r13d,r14d
   362e1:	mov    esi,0x2
   362e6:	mov    DWORD PTR [r12+0x8],r14d
   362eb:	sar    r13d,0x2
   362ef:	test   ebp,ebp
   362f1:	cmovs  ebp,edi
   362f4:	mov    ecx,r13d
   362f7:	lea    rdi,[r12+0x640]
   362ff:	sar    ebp,0x2
   36302:	mov    edx,ebp
   36304:	call   389e0 <get_mem3Dshort>
   36309:	mov    ecx,r13d
   3630c:	mov    edx,ebp
   3630e:	mov    esi,0x2
   36313:	lea    rdi,[r12+0x648]
   3631b:	call   387e0 <get_mem3Dint64>
   36320:	mov    r8d,0x2
   36326:	mov    ecx,r13d
   36329:	mov    edx,ebp
   3632b:	lea    rdi,[r12+0x650]
   36333:	mov    esi,0x2
   36338:	call   38a70 <get_mem4Dshort>
   3633d:	lea    rdi,[r12+0x658]
   36345:	mov    edx,r13d
   36348:	mov    esi,ebp
   3634a:	call   38470 <get_mem2D>
   3634f:	lea    rdi,[r12+0x1308]
   36357:	mov    edx,r13d
   3635a:	mov    esi,ebp
   3635c:	call   38470 <get_mem2D>
   36361:	test   ebx,ebx
   36363:	jne    36378 <alloc_colocated+0xd8>
   36365:	mov    DWORD PTR [r12],ebx
   36369:	mov    rax,r12
   3636c:	pop    rbx
   3636d:	pop    rbp
   3636e:	pop    r12
   36370:	pop    r13
   36372:	pop    r14
   36374:	ret    
   36375:	nop    DWORD PTR [rax]
   36378:	test   r14d,r14d
   3637b:	lea    r13d,[r14+0x7]
   3637f:	mov    edx,ebp
   36381:	mov    esi,0x2
   36386:	cmovns r13d,r14d
   3638a:	lea    rdi,[r12+0xc90]
   36392:	sar    r13d,0x3
   36396:	mov    ecx,r13d
   36399:	call   389e0 <get_mem3Dshort>
   3639e:	mov    ecx,r13d
   363a1:	mov    edx,ebp
   363a3:	mov    esi,0x2
   363a8:	lea    rdi,[r12+0xc98]
   363b0:	call   387e0 <get_mem3Dint64>
   363b5:	mov    r8d,0x2
   363bb:	mov    ecx,r13d
   363be:	mov    edx,ebp
   363c0:	lea    rdi,[r12+0xca0]
   363c8:	mov    esi,0x2
   363cd:	call   38a70 <get_mem4Dshort>
   363d2:	lea    rdi,[r12+0xca8]
   363da:	mov    edx,r13d
   363dd:	mov    esi,ebp
   363df:	call   38470 <get_mem2D>
   363e4:	mov    ecx,r13d
   363e7:	mov    edx,ebp
   363e9:	mov    esi,0x2
   363ee:	lea    rdi,[r12+0x12e0]
   363f6:	call   389e0 <get_mem3Dshort>
   363fb:	mov    ecx,r13d
   363fe:	mov    edx,ebp
   36400:	mov    esi,0x2
   36405:	lea    rdi,[r12+0x12e8]
   3640d:	call   387e0 <get_mem3Dint64>
   36412:	mov    ecx,r13d
   36415:	mov    edx,ebp
   36417:	mov    r8d,0x2
   3641d:	lea    rdi,[r12+0x12f0]
   36425:	mov    esi,0x2
   3642a:	call   38a70 <get_mem4Dshort>
   3642f:	lea    rdi,[r12+0x12f8]
   36437:	mov    edx,r13d
   3643a:	mov    esi,ebp
   3643c:	call   38470 <get_mem2D>
   36441:	mov    DWORD PTR [r12],ebx
   36445:	mov    rax,r12
   36448:	pop    rbx
   36449:	pop    rbp
   3644a:	pop    r12
   3644c:	pop    r13
   3644e:	pop    r14
   36450:	ret    
   36451:	lea    rdi,[rip+0x3f3ee]        # 75846 <MODTAB+0x626>
   36458:	call   38210 <no_mem_exit>
   3645d:	jmp    362ce <alloc_colocated+0x2e>
   36462:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3646d:	nop    DWORD PTR [rax]

0000000000036470 <free_colocated>:
   36470:	endbr64 
   36474:	test   rdi,rdi
   36477:	je     36510 <free_colocated+0xa0>
   3647d:	push   rbp
   3647e:	mov    rbp,rdi
   36481:	mov    rdi,QWORD PTR [rdi+0x640]
   36488:	mov    esi,0x2
   3648d:	call   38b70 <free_mem3Dshort>
   36492:	mov    rdi,QWORD PTR [rbp+0x648]
   36499:	mov    esi,0x2
   3649e:	call   38140 <free_mem3Dint64>
   364a3:	mov    eax,DWORD PTR [rbp+0x4]
   364a6:	mov    esi,0x2
   364ab:	mov    rdi,QWORD PTR [rbp+0x650]
   364b2:	test   eax,eax
   364b4:	lea    edx,[rax+0x3]
   364b7:	cmovns edx,eax
   364ba:	sar    edx,0x2
   364bd:	call   38bd0 <free_mem4Dshort>
   364c2:	mov    rdi,QWORD PTR [rbp+0x658]
   364c9:	test   rdi,rdi
   364cc:	je     364de <free_colocated+0x6e>
   364ce:	call   37f60 <free_mem2D>
   364d3:	mov    QWORD PTR [rbp+0x658],0x0
   364de:	mov    rdi,QWORD PTR [rbp+0x1308]
   364e5:	test   rdi,rdi
   364e8:	je     364fa <free_colocated+0x8a>
   364ea:	call   37f60 <free_mem2D>
   364ef:	mov    QWORD PTR [rbp+0x1308],0x0
   364fa:	mov    eax,DWORD PTR [rbp+0x0]
   364fd:	test   eax,eax
   364ff:	jne    36518 <free_colocated+0xa8>
   36501:	mov    rdi,rbp
   36504:	pop    rbp
   36505:	jmp    42d0 <free@plt>
   3650a:	nop    WORD PTR [rax+rax*1+0x0]
   36510:	ret    
   36511:	nop    DWORD PTR [rax+0x0]
   36518:	mov    rdi,QWORD PTR [rbp+0xc90]
   3651f:	mov    esi,0x2
   36524:	call   38b70 <free_mem3Dshort>
   36529:	mov    rdi,QWORD PTR [rbp+0xc98]
   36530:	mov    esi,0x2
   36535:	call   38140 <free_mem3Dint64>
   3653a:	mov    eax,DWORD PTR [rbp+0x4]
   3653d:	mov    esi,0x2
   36542:	mov    rdi,QWORD PTR [rbp+0xca0]
   36549:	test   eax,eax
   3654b:	lea    edx,[rax+0x3]
   3654e:	cmovns edx,eax
   36551:	sar    edx,0x2
   36554:	call   38bd0 <free_mem4Dshort>
   36559:	mov    rdi,QWORD PTR [rbp+0xca8]
   36560:	test   rdi,rdi
   36563:	je     36575 <free_colocated+0x105>
   36565:	call   37f60 <free_mem2D>
   3656a:	mov    QWORD PTR [rbp+0xca8],0x0
   36575:	mov    rdi,QWORD PTR [rbp+0x12e0]
   3657c:	mov    esi,0x2
   36581:	call   38b70 <free_mem3Dshort>
   36586:	mov    rdi,QWORD PTR [rbp+0x12e8]
   3658d:	mov    esi,0x2
   36592:	call   38140 <free_mem3Dint64>
   36597:	mov    eax,DWORD PTR [rbp+0x4]
   3659a:	mov    esi,0x2
   3659f:	mov    rdi,QWORD PTR [rbp+0x12f0]
   365a6:	test   eax,eax
   365a8:	lea    edx,[rax+0x3]
   365ab:	cmovns edx,eax
   365ae:	sar    edx,0x2
   365b1:	call   38bd0 <free_mem4Dshort>
   365b6:	mov    rdi,QWORD PTR [rbp+0x12f8]
   365bd:	test   rdi,rdi
   365c0:	je     36501 <free_colocated+0x91>
   365c6:	call   37f60 <free_mem2D>
   365cb:	jmp    36501 <free_colocated+0x91>

00000000000365d0 <compute_colocated>:
   365d0:	endbr64 
   365d4:	push   r15
   365d6:	push   r14
   365d8:	mov    r14,rdi
   365db:	push   r13
   365dd:	push   r12
   365df:	push   rbp
   365e0:	push   rbx
   365e1:	sub    rsp,0x70
   365e5:	mov    rax,QWORD PTR [rsi+0x8]
   365e9:	mov    QWORD PTR [rsp+0x60],rsi
   365ee:	mov    r15,QWORD PTR [rax]
   365f1:	mov    rax,QWORD PTR [rip+0x51fb8]        # 885b0 <img>
   365f8:	mov    edx,DWORD PTR [rax+0x11ad0]
   365fe:	mov    QWORD PTR [rsp-0x48],rax
   36603:	mov    eax,DWORD PTR [rax+0x1c]
   36606:	mov    DWORD PTR [rsp-0x8],edx
   3660a:	mov    DWORD PTR [rsp+0x68],eax
   3660e:	test   edx,edx
   36610:	je     37d30 <compute_colocated+0x1760>
   36616:	mov    rax,QWORD PTR [rsi+0x18]
   3661a:	mov    rax,QWORD PTR [rax]
   3661d:	mov    QWORD PTR [rsp+0x10],rax
   36622:	mov    rax,QWORD PTR [rsi+0x28]
   36626:	mov    rax,QWORD PTR [rax]
   36629:	mov    QWORD PTR [rsp-0x68],rax
   3662e:	mov    rax,QWORD PTR [rip+0x7f83b]        # b5e70 <active_sps>
   36635:	mov    esi,DWORD PTR [r15+0x18fc]
   3663c:	mov    QWORD PTR [rsp+0x50],rax
   36641:	mov    eax,DWORD PTR [rax+0x47c]
   36647:	mov    DWORD PTR [rsp+0x58],esi
   3664b:	mov    DWORD PTR [rsp+0x5c],eax
   3664f:	test   eax,eax
   36651:	je     36668 <compute_colocated+0x98>
   36653:	mov    rax,QWORD PTR [rsp+0x50]
   36658:	mov    r10d,DWORD PTR [rax+0x484]
   3665f:	test   r10d,r10d
   36662:	je     37d77 <compute_colocated+0x17a7>
   36668:	mov    esi,DWORD PTR [rsp+0x58]
   3666c:	lea    edx,[rsi+0x3]
   3666f:	test   esi,esi
   36671:	mov    eax,esi
   36673:	cmovs  eax,edx
   36676:	mov    DWORD PTR [rsp+0x6c],edx
   3667a:	sar    eax,0x2
   3667d:	mov    DWORD PTR [rsp+0x48],eax
   36681:	cmp    esi,0x3
   36684:	jle    369f2 <compute_colocated+0x422>
   3668a:	mov    esi,DWORD PTR [r15+0x18f8]
   36691:	mov    QWORD PTR [rsp-0x58],r14
   36696:	mov    QWORD PTR [rsp+0x8],0x0
   3669f:	test   esi,esi
   366a1:	lea    eax,[rsi+0x3]
   366a4:	mov    DWORD PTR [rsp+0x4c],esi
   366a8:	cmovns eax,esi
   366ab:	sar    eax,0x2
   366ae:	mov    DWORD PTR [rsp],eax
   366b1:	mov    rax,QWORD PTR [rip+0x542f0]        # 8a9a8 <enc_picture>
   366b8:	mov    QWORD PTR [rsp+0x30],rax
   366bd:	nop    DWORD PTR [rax]
   366c0:	cmp    DWORD PTR [rsp+0x4c],0x3
   366c5:	jle    369d8 <compute_colocated+0x408>
   366cb:	mov    rdi,QWORD PTR [rsp+0x8]
   366d0:	mov    eax,edi
   366d2:	lea    rdx,[rdi*8+0x0]
   366da:	lea    rsi,[rdi+rdi*1]
   366de:	sar    eax,1
   366e0:	movsxd rcx,eax
   366e3:	lea    rbx,[rcx*8+0x0]
   366eb:	add    rcx,rcx
   366ee:	mov    QWORD PTR [rsp+0x28],rcx
   366f3:	mov    ecx,edi
   366f5:	mov    rdi,QWORD PTR [rsp-0x58]
   366fa:	sar    ecx,0x3
   366fd:	mov    QWORD PTR [rsp+0x20],rbx
   36702:	lea    eax,[rax+rcx*4]
   36705:	lea    rcx,[rax*8+0x20]
   3670d:	shl    rax,0x3
   36711:	mov    QWORD PTR [rsp+0x38],rax
   36716:	mov    rax,QWORD PTR [rdi+0x650]
   3671d:	mov    QWORD PTR [rsp+0x40],rcx
   36722:	mov    rbx,QWORD PTR [rax]
   36725:	mov    r10,QWORD PTR [rax+0x8]
   36729:	mov    rax,QWORD PTR [rdi+0x640]
   36730:	mov    QWORD PTR [rsp-0x18],rbx
   36735:	mov    rcx,QWORD PTR [rax]
   36738:	mov    rax,QWORD PTR [rax+0x8]
   3673c:	mov    QWORD PTR [rsp-0x10],r10
   36741:	mov    QWORD PTR [rsp-0x50],rcx
   36746:	mov    rcx,QWORD PTR [r15+0x1960]
   3674d:	mov    QWORD PTR [rsp-0x40],rax
   36752:	mov    rax,QWORD PTR [rcx]
   36755:	mov    rcx,QWORD PTR [rcx+0x8]
   36759:	mov    QWORD PTR [rsp-0x38],rax
   3675e:	mov    rax,QWORD PTR [rdi+0x648]
   36765:	mov    QWORD PTR [rsp-0x28],rcx
   3676a:	mov    rdi,QWORD PTR [rax]
   3676d:	mov    rax,QWORD PTR [rax+0x8]
   36771:	mov    QWORD PTR [rsp-0x30],rdi
   36776:	mov    QWORD PTR [rsp-0x20],rax
   3677b:	xor    eax,eax
   3677d:	jmp    368aa <compute_colocated+0x2da>
   36782:	nop    WORD PTR [rax+rax*1+0x0]
   36788:	mov    r9,QWORD PTR [r15+0x1978]
   3678f:	mov    r13,QWORD PTR [rsp+0x8]
   36794:	mov    r9,QWORD PTR [r9+rax*8]
   36798:	cmp    BYTE PTR [r9+r13*1],0x0
   3679d:	je     3692f <compute_colocated+0x35f>
   367a3:	mov    r13,QWORD PTR [rsp+0x30]
   367a8:	mov    r9,QWORD PTR [rsp-0x68]
   367ad:	mov    r11,QWORD PTR [rsp+0x10]
   367b2:	mov    r13d,DWORD PTR [r13+0x4]
   367b6:	mov    r10d,r13d
   367b9:	sub    r13d,DWORD PTR [r9+0x4]
   367bd:	mov    r9d,r13d
   367c0:	sar    r9d,0x1f
   367c4:	xor    r13d,r9d
   367c7:	sub    r13d,r9d
   367ca:	mov    DWORD PTR [rsp+0x1c],r13d
   367cf:	mov    r13d,r10d
   367d2:	sub    r13d,DWORD PTR [r11+0x4]
   367d6:	mov    r9d,r13d
   367d9:	sar    r13d,0x1f
   367dd:	xor    r9d,r13d
   367e0:	sub    r9d,r13d
   367e3:	cmp    DWORD PTR [rsp+0x1c],r9d
   367e8:	jle    36ea0 <compute_colocated+0x8d0>
   367ee:	mov    r9,QWORD PTR [r11+0x1968]
   367f5:	mov    r10,r11
   367f8:	mov    r11,QWORD PTR [rsp+0x20]
   367fd:	mov    r13,QWORD PTR [r9]
   36800:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   36805:	mov    r13,QWORD PTR [r13+r11*1+0x0]
   3680a:	movzx  r11d,WORD PTR [r13+0x0]
   3680f:	mov    WORD PTR [r8],r11w
   36813:	movzx  r13d,WORD PTR [r13+0x2]
   36818:	mov    r11,QWORD PTR [rsp+0x20]
   3681d:	mov    WORD PTR [r8+0x2],r13w
   36822:	mov    r8,QWORD PTR [r9+0x8]
   36826:	mov    r8,QWORD PTR [r8+rcx*1]
   3682a:	mov    r8,QWORD PTR [r8+r11*1]
   3682e:	mov    r11,QWORD PTR [rsp+0x28]
   36833:	movzx  r9d,WORD PTR [r8]
   36837:	mov    WORD PTR [rdi],r9w
   3683b:	movzx  r8d,WORD PTR [r8+0x2]
   36840:	mov    WORD PTR [rdi+0x2],r8w
   36845:	mov    rdi,QWORD PTR [r10+0x1950]
   3684c:	mov    r8,QWORD PTR [rdi]
   3684f:	mov    rdi,QWORD PTR [rdi+0x8]
   36853:	mov    r8,QWORD PTR [r8+rcx*1]
   36857:	mov    rcx,QWORD PTR [rdi+rcx*1]
   3685b:	mov    rdi,QWORD PTR [rsp+0x38]
   36860:	movzx  r8d,WORD PTR [r8+r11*1]
   36865:	mov    WORD PTR [r12],r8w
   3686a:	movzx  ecx,WORD PTR [rcx+r11*1]
   3686f:	mov    WORD PTR [rbp+0x0],cx
   36873:	mov    rcx,QWORD PTR [rbx+rdi*1]
   36877:	mov    rbx,QWORD PTR [rsp-0x78]
   3687c:	mov    QWORD PTR [rbx],rcx
   3687f:	mov    rcx,QWORD PTR [rsp-0x70]
   36884:	mov    rcx,QWORD PTR [rcx+rdi*1]
   36888:	mov    rbx,QWORD PTR [rsp-0x58]
   3688d:	mov    QWORD PTR [r14],rcx
   36890:	mov    ecx,DWORD PTR [r10+0x18e8]
   36897:	mov    DWORD PTR [rbx+0x1300],ecx
   3689d:	add    rax,0x1
   368a1:	cmp    DWORD PTR [rsp],eax
   368a4:	jle    369d8 <compute_colocated+0x408>
   368aa:	mov    rdi,QWORD PTR [rsp-0x18]
   368af:	mov    r9,QWORD PTR [rsp-0x30]
   368b4:	lea    rcx,[rax*8+0x0]
   368bc:	mov    rbx,QWORD PTR [rsp-0x10]
   368c1:	mov    r13,QWORD PTR [rsp-0x20]
   368c6:	mov    rdi,QWORD PTR [rdi+rax*8]
   368ca:	mov    r10,QWORD PTR [r9+rax*8]
   368ce:	mov    r9,QWORD PTR [rsp-0x28]
   368d3:	mov    r8,QWORD PTR [rdi+rdx*1]
   368d7:	mov    rdi,QWORD PTR [rbx+rax*8]
   368db:	add    r10,rdx
   368de:	mov    rbx,QWORD PTR [rsp-0x50]
   368e3:	mov    r14,QWORD PTR [r9+rax*8]
   368e7:	mov    QWORD PTR [rsp-0x78],r10
   368ec:	mov    r9,QWORD PTR [r13+rax*8+0x0]
   368f1:	mov    rdi,QWORD PTR [rdi+rdx*1]
   368f5:	mov    r12,QWORD PTR [rbx+rax*8]
   368f9:	mov    rbx,QWORD PTR [rsp-0x40]
   368fe:	mov    QWORD PTR [rsp-0x70],r14
   36903:	add    r9,rdx
   36906:	mov    rbp,QWORD PTR [rbx+rax*8]
   3690a:	mov    QWORD PTR [rsp-0x60],r9
   3690f:	mov    r14,r9
   36912:	add    r12,rsi
   36915:	mov    rbx,QWORD PTR [rsp-0x38]
   3691a:	mov    r9d,DWORD PTR [rsp-0x8]
   3691f:	add    rbp,rsi
   36922:	mov    rbx,QWORD PTR [rbx+rax*8]
   36926:	test   r9d,r9d
   36929:	jne    36788 <compute_colocated+0x1b8>
   3692f:	mov    r9,QWORD PTR [r15+0x1968]
   36936:	add    rax,0x1
   3693a:	mov    r13,QWORD PTR [r9]
   3693d:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   36942:	mov    r13,QWORD PTR [r13+rdx*1+0x0]
   36947:	movzx  r10d,WORD PTR [r13+0x0]
   3694c:	mov    WORD PTR [r8],r10w
   36950:	movzx  r13d,WORD PTR [r13+0x2]
   36955:	mov    WORD PTR [r8+0x2],r13w
   3695a:	mov    r8,QWORD PTR [r9+0x8]
   3695e:	mov    r8,QWORD PTR [r8+rcx*1]
   36962:	mov    r8,QWORD PTR [r8+rdx*1]
   36966:	movzx  r9d,WORD PTR [r8]
   3696a:	mov    WORD PTR [rdi],r9w
   3696e:	movzx  r8d,WORD PTR [r8+0x2]
   36973:	mov    WORD PTR [rdi+0x2],r8w
   36978:	mov    rdi,QWORD PTR [r15+0x1950]
   3697f:	mov    r8,QWORD PTR [rdi]
   36982:	mov    rdi,QWORD PTR [rdi+0x8]
   36986:	mov    r8,QWORD PTR [r8+rcx*1]
   3698a:	mov    rcx,QWORD PTR [rdi+rcx*1]
   3698e:	mov    rdi,QWORD PTR [rsp-0x78]
   36993:	movzx  r8d,WORD PTR [r8+rsi*1]
   36998:	mov    WORD PTR [r12],r8w
   3699d:	movzx  ecx,WORD PTR [rcx+rsi*1]
   369a1:	mov    WORD PTR [rbp+0x0],cx
   369a5:	mov    rcx,QWORD PTR [rbx+rdx*1]
   369a9:	mov    QWORD PTR [rdi],rcx
   369ac:	mov    rcx,QWORD PTR [rsp-0x70]
   369b1:	mov    rdi,QWORD PTR [rsp-0x60]
   369b6:	mov    rcx,QWORD PTR [rcx+rdx*1]
   369ba:	mov    QWORD PTR [rdi],rcx
   369bd:	mov    ecx,DWORD PTR [r15+0x18e8]
   369c4:	mov    rdi,QWORD PTR [rsp-0x58]
   369c9:	mov    DWORD PTR [rdi+0x1300],ecx
   369cf:	cmp    DWORD PTR [rsp],eax
   369d2:	jg     368aa <compute_colocated+0x2da>
   369d8:	add    QWORD PTR [rsp+0x8],0x1
   369de:	mov    rax,QWORD PTR [rsp+0x8]
   369e3:	cmp    DWORD PTR [rsp+0x48],eax
   369e7:	jg     366c0 <compute_colocated+0xf0>
   369ed:	mov    r14,QWORD PTR [rsp-0x58]
   369f2:	mov    rax,QWORD PTR [rsp-0x48]
   369f7:	mov    eax,DWORD PTR [rax+0x1193c]
   369fd:	mov    DWORD PTR [rsp-0x78],eax
   36a01:	mov    eax,DWORD PTR [rsp-0x8]
   36a05:	or     eax,DWORD PTR [rsp+0x68]
   36a09:	je     37e31 <compute_colocated+0x1861>
   36a0f:	cmp    DWORD PTR [r15+0x18f8],0x3
   36a17:	mov    r10d,DWORD PTR [rsp+0x58]
   36a1c:	mov    QWORD PTR [rsp-0x40],0x0
   36a25:	jle    3730d <compute_colocated+0xd3d>
   36a2b:	nop    DWORD PTR [rax+rax*1+0x0]
   36a30:	cmp    r10d,0x7
   36a34:	jle    372cd <compute_colocated+0xcfd>
   36a3a:	mov    rdx,QWORD PTR [rsp-0x40]
   36a3f:	mov    QWORD PTR [rsp-0x70],r15
   36a44:	mov    esi,edx
   36a46:	mov    eax,edx
   36a48:	and    esi,0xfffffffe
   36a4b:	or     eax,0x1
   36a4e:	movsxd rsi,esi
   36a51:	cdqe   
   36a53:	shl    rsi,0x3
   36a57:	shl    rax,0x3
   36a5b:	test   dl,0x2
   36a5e:	cmovne rsi,rax
   36a62:	shl    rdx,0x3
   36a66:	xor    ecx,ecx
   36a68:	jmp    36c1e <compute_colocated+0x64e>
   36a6d:	nop    DWORD PTR [rax]
   36a70:	mov    rdi,QWORD PTR [rsp-0x70]
   36a75:	mov    r8,QWORD PTR [rdi+0x1968]
   36a7c:	mov    rdi,QWORD PTR [r8]
   36a7f:	mov    r9,QWORD PTR [rdi+rsi*1]
   36a83:	mov    edi,ecx
   36a85:	test   r11d,r11d
   36a88:	je     37040 <compute_colocated+0xa70>
   36a8e:	or     edi,0x1
   36a91:	movsxd rdi,edi
   36a94:	shl    rdi,0x3
   36a98:	mov    rbx,QWORD PTR [r9+rdi*1]
   36a9c:	mov    r8,QWORD PTR [r8+0x8]
   36aa0:	lea    r15,[rcx*8+0x0]
   36aa8:	mov    r9,QWORD PTR [r14+0x650]
   36aaf:	mov    QWORD PTR [rsp-0x60],r15
   36ab4:	mov    r8,QWORD PTR [r8+rsi*1]
   36ab8:	mov    rbp,QWORD PTR [r9]
   36abb:	mov    r9,QWORD PTR [r9+0x8]
   36abf:	mov    r8,QWORD PTR [r8+rdi*1]
   36ac3:	mov    rbp,QWORD PTR [rbp+rdx*1+0x0]
   36ac8:	mov    r9,QWORD PTR [r9+rdx*1]
   36acc:	mov    r13,QWORD PTR [rbp+rcx*8+0x0]
   36ad1:	movzx  ebp,WORD PTR [rbx]
   36ad4:	mov    r9,QWORD PTR [r9+rcx*8]
   36ad8:	mov    WORD PTR [r13+0x0],bp
   36add:	movzx  ebx,WORD PTR [rbx+0x2]
   36ae1:	mov    WORD PTR [r13+0x2],bx
   36ae6:	movzx  ebx,WORD PTR [r8]
   36aea:	mov    WORD PTR [r9],bx
   36aee:	mov    rbx,QWORD PTR [rsp-0x70]
   36af3:	movzx  r8d,WORD PTR [r8+0x2]
   36af8:	mov    rbp,QWORD PTR [rbx+0x1950]
   36aff:	mov    WORD PTR [r9+0x2],r8w
   36b04:	mov    r8,QWORD PTR [rbp+0x0]
   36b08:	mov    r8,QWORD PTR [r8+rsi*1]
   36b0c:	test   r11d,r11d
   36b0f:	je     37030 <compute_colocated+0xa60>
   36b15:	or     eax,0x1
   36b18:	cdqe   
   36b1a:	add    rax,rax
   36b1d:	mov    rbx,QWORD PTR [r14+0x640]
   36b24:	movzx  r15d,WORD PTR [r8+rax*1]
   36b29:	lea    r8,[rcx+rcx*1]
   36b2d:	mov    r11,QWORD PTR [rbx]
   36b30:	mov    WORD PTR [rsp-0x60],r15w
   36b36:	mov    r15,QWORD PTR [r11+rdx*1]
   36b3a:	mov    r11,QWORD PTR [r14+0x648]
   36b41:	mov    r12,QWORD PTR [r11]
   36b44:	add    r15,r8
   36b47:	mov    QWORD PTR [rsp-0x58],r15
   36b4c:	lea    r15,[rcx*8+0x0]
   36b54:	add    r15,QWORD PTR [r12+rdx*1]
   36b58:	cmp    WORD PTR [rsp-0x60],0xffff
   36b5e:	mov    QWORD PTR [rsp-0x50],r15
   36b63:	mov    r15,QWORD PTR [rsp-0x58]
   36b68:	je     37068 <compute_colocated+0xa98>
   36b6e:	movzx  r12d,WORD PTR [rsp-0x60]
   36b74:	mov    WORD PTR [r15],r12w
   36b78:	mov    r15,QWORD PTR [rsp-0x70]
   36b7d:	mov    r12,QWORD PTR [r15+0x1960]
   36b84:	mov    r15,QWORD PTR [rsp-0x50]
   36b89:	mov    r12,QWORD PTR [r12]
   36b8d:	mov    r12,QWORD PTR [r12+rsi*1]
   36b91:	mov    r12,QWORD PTR [r12+rdi*1]
   36b95:	mov    QWORD PTR [r15],r12
   36b98:	mov    rbp,QWORD PTR [rbp+0x8]
   36b9c:	mov    rbx,QWORD PTR [rbx+0x8]
   36ba0:	mov    r11,QWORD PTR [r11+0x8]
   36ba4:	mov    rbp,QWORD PTR [rbp+rsi*1+0x0]
   36ba9:	add    r8,QWORD PTR [rbx+rdx*1]
   36bad:	lea    rbx,[rcx*8+0x0]
   36bb5:	add    rbx,QWORD PTR [r11+rdx*1]
   36bb9:	movzx  eax,WORD PTR [rbp+rax*1+0x0]
   36bbe:	cmp    ax,0xffff
   36bc2:	je     37050 <compute_colocated+0xa80>
   36bc8:	mov    WORD PTR [r8],ax
   36bcc:	mov    rax,QWORD PTR [rsp-0x70]
   36bd1:	mov    rax,QWORD PTR [rax+0x1960]
   36bd8:	mov    rax,QWORD PTR [rax+0x8]
   36bdc:	mov    rax,QWORD PTR [rax+rsi*1]
   36be0:	mov    rax,QWORD PTR [rax+rdi*1]
   36be4:	mov    QWORD PTR [rbx],rax
   36be7:	mov    rax,QWORD PTR [rsp-0x70]
   36bec:	cmp    DWORD PTR [rsp-0x78],0x1
   36bf1:	mov    eax,DWORD PTR [rax+0x18e8]
   36bf7:	mov    DWORD PTR [r14+0x1300],eax
   36bfe:	je     371b0 <compute_colocated+0xbe0>
   36c04:	add    rcx,0x1
   36c08:	lea    eax,[r10+0x7]
   36c0c:	test   r10d,r10d
   36c0f:	cmovns eax,r10d
   36c13:	sar    eax,0x3
   36c16:	cmp    eax,ecx
   36c18:	jle    372c8 <compute_colocated+0xcf8>
   36c1e:	mov    rdi,QWORD PTR [rsp-0x48]
   36c23:	mov    r11d,ecx
   36c26:	mov    eax,ecx
   36c28:	and    r11d,0x2
   36c2c:	mov    r13d,DWORD PTR [rdi+0x11ad0]
   36c33:	test   r13d,r13d
   36c36:	je     36a70 <compute_colocated+0x4a0>
   36c3c:	mov    rdi,QWORD PTR [rsp-0x68]
   36c41:	mov    rbx,QWORD PTR [rdi+0x1968]
   36c48:	mov    rdi,QWORD PTR [rbx]
   36c4b:	mov    r8,QWORD PTR [rdi+rsi*1]
   36c4f:	mov    edi,ecx
   36c51:	test   r11d,r11d
   36c54:	je     37020 <compute_colocated+0xa50>
   36c5a:	or     edi,0x1
   36c5d:	movsxd rdi,edi
   36c60:	shl    rdi,0x3
   36c64:	mov    r10,QWORD PTR [r14+0x12f0]
   36c6b:	mov    rbp,QWORD PTR [r8+rdi*1]
   36c6f:	lea    r8,[rcx*8+0x0]
   36c77:	mov    rbx,QWORD PTR [rbx+0x8]
   36c7b:	mov    r9,QWORD PTR [r10]
   36c7e:	movzx  r12d,WORD PTR [rbp+0x0]
   36c83:	mov    rbx,QWORD PTR [rbx+rsi*1]
   36c87:	mov    r10,QWORD PTR [r10+0x8]
   36c8b:	mov    r9,QWORD PTR [r9+rdx*1]
   36c8f:	mov    rbx,QWORD PTR [rbx+rdi*1]
   36c93:	mov    r10,QWORD PTR [r10+rdx*1]
   36c97:	mov    r9,QWORD PTR [r9+rcx*8]
   36c9b:	mov    r10,QWORD PTR [r10+rcx*8]
   36c9f:	mov    WORD PTR [r9],r12w
   36ca3:	movzx  ebp,WORD PTR [rbp+0x2]
   36ca7:	mov    WORD PTR [r9+0x2],bp
   36cac:	movzx  ebp,WORD PTR [rbx]
   36caf:	mov    WORD PTR [r10],bp
   36cb3:	movzx  ebx,WORD PTR [rbx+0x2]
   36cb7:	mov    WORD PTR [r10+0x2],bx
   36cbc:	mov    rbx,QWORD PTR [rsp-0x68]
   36cc1:	mov    rbx,QWORD PTR [rbx+0x1950]
   36cc8:	mov    rbp,QWORD PTR [rbx]
   36ccb:	mov    r12,QWORD PTR [rbp+rsi*1+0x0]
   36cd0:	test   r11d,r11d
   36cd3:	je     37010 <compute_colocated+0xa40>
   36cd9:	or     eax,0x1
   36cdc:	cdqe   
   36cde:	add    rax,rax
   36ce1:	mov    r11,QWORD PTR [r14+0x12e0]
   36ce8:	mov    rbx,QWORD PTR [rbx+0x8]
   36cec:	lea    rbp,[rcx+rcx*1]
   36cf0:	mov    r13,rbp
   36cf3:	mov    QWORD PTR [rsp-0x60],rbp
   36cf8:	movzx  r12d,WORD PTR [r12+rax*1]
   36cfd:	mov    rbp,QWORD PTR [r11]
   36d00:	mov    rbx,QWORD PTR [rbx+rsi*1]
   36d04:	mov    r11,QWORD PTR [r11+0x8]
   36d08:	add    r13,QWORD PTR [rbp+rdx*1+0x0]
   36d0d:	cmp    DWORD PTR [rsp-0x78],0x1
   36d12:	mov    WORD PTR [r13+0x0],r12w
   36d17:	movzx  r12d,WORD PTR [rbx+rax*1]
   36d1c:	mov    rbp,r13
   36d1f:	mov    rbx,QWORD PTR [rsp-0x68]
   36d24:	mov    r11,QWORD PTR [r11+rdx*1]
   36d28:	mov    rbx,QWORD PTR [rbx+0x1960]
   36d2f:	mov    WORD PTR [r11+rcx*2],r12w
   36d34:	mov    r11,QWORD PTR [r14+0x12e8]
   36d3b:	mov    r13,QWORD PTR [rbx]
   36d3e:	mov    rbx,QWORD PTR [rbx+0x8]
   36d42:	mov    r13,QWORD PTR [r13+rsi*1+0x0]
   36d47:	mov    rbx,QWORD PTR [rbx+rsi*1]
   36d4b:	mov    r15,QWORD PTR [r13+rdi*1+0x0]
   36d50:	mov    r13,QWORD PTR [r11]
   36d53:	mov    r11,QWORD PTR [r11+0x8]
   36d57:	mov    r13,QWORD PTR [r13+rdx*1+0x0]
   36d5c:	mov    r11,QWORD PTR [r11+rdx*1]
   36d60:	mov    QWORD PTR [r13+r8*1+0x0],r15
   36d65:	mov    rbx,QWORD PTR [rbx+rdi*1]
   36d69:	mov    QWORD PTR [r11+r8*1],rbx
   36d6d:	je     37110 <compute_colocated+0xb40>
   36d73:	mov    r13,QWORD PTR [rsp+0x10]
   36d78:	mov    r10,QWORD PTR [r14+0xca0]
   36d7f:	mov    r15,QWORD PTR [rsp-0x60]
   36d84:	mov    r11,QWORD PTR [r13+0x1968]
   36d8b:	mov    r9,QWORD PTR [r11]
   36d8e:	mov    r11,QWORD PTR [r11+0x8]
   36d92:	mov    r9,QWORD PTR [r9+rsi*1]
   36d96:	mov    r11,QWORD PTR [r11+rsi*1]
   36d9a:	mov    rbx,QWORD PTR [r9+rdi*1]
   36d9e:	mov    r9,QWORD PTR [r10]
   36da1:	mov    r10,QWORD PTR [r10+0x8]
   36da5:	mov    r11,QWORD PTR [r11+rdi*1]
   36da9:	mov    r9,QWORD PTR [r9+rdx*1]
   36dad:	movzx  ebp,WORD PTR [rbx]
   36db0:	mov    r10,QWORD PTR [r10+rdx*1]
   36db4:	mov    r9,QWORD PTR [r9+r8*1]
   36db8:	mov    r10,QWORD PTR [r10+r8*1]
   36dbc:	mov    WORD PTR [r9],bp
   36dc0:	movzx  ebx,WORD PTR [rbx+0x2]
   36dc4:	mov    rbp,QWORD PTR [r13+0x1950]
   36dcb:	mov    WORD PTR [r9+0x2],bx
   36dd0:	movzx  ebx,WORD PTR [r11]
   36dd4:	mov    WORD PTR [r10],bx
   36dd8:	movzx  r11d,WORD PTR [r11+0x2]
   36ddd:	mov    WORD PTR [r10+0x2],r11w
   36de2:	mov    r11,QWORD PTR [r14+0xc90]
   36de9:	mov    rbx,QWORD PTR [r11]
   36dec:	mov    r12,QWORD PTR [rbx+rdx*1]
   36df0:	add    r12,r15
   36df3:	mov    rbx,r12
   36df6:	mov    r12,QWORD PTR [rbp+0x0]
   36dfa:	mov    r12,QWORD PTR [r12+rsi*1]
   36dfe:	movzx  r12d,WORD PTR [r12+rax*1]
   36e03:	mov    WORD PTR [rbx],r12w
   36e07:	mov    rbp,QWORD PTR [rbp+0x8]
   36e0b:	cmp    DWORD PTR [rsp-0x78],0x1
   36e10:	mov    rbp,QWORD PTR [rbp+rsi*1+0x0]
   36e15:	movzx  ebp,WORD PTR [rbp+rax*1+0x0]
   36e1a:	mov    rax,QWORD PTR [r11+0x8]
   36e1e:	mov    r11,QWORD PTR [r13+0x1960]
   36e25:	mov    rax,QWORD PTR [rax+rdx*1]
   36e29:	mov    r12,QWORD PTR [r11]
   36e2c:	mov    r11,QWORD PTR [r11+0x8]
   36e30:	mov    WORD PTR [rax+r15*1],bp
   36e35:	mov    rax,QWORD PTR [r14+0xc98]
   36e3c:	mov    r12,QWORD PTR [r12+rsi*1]
   36e40:	mov    r11,QWORD PTR [r11+rsi*1]
   36e44:	mov    r13,QWORD PTR [r12+rdi*1]
   36e48:	mov    r12,QWORD PTR [rax]
   36e4b:	mov    rax,QWORD PTR [rax+0x8]
   36e4f:	mov    r12,QWORD PTR [r12+rdx*1]
   36e53:	mov    rax,QWORD PTR [rax+rdx*1]
   36e57:	mov    QWORD PTR [r12+r8*1],r13
   36e5b:	mov    rdi,QWORD PTR [r11+rdi*1]
   36e5f:	mov    QWORD PTR [rax+r8*1],rdi
   36e63:	je     37088 <compute_colocated+0xab8>
   36e69:	mov    eax,DWORD PTR [rsp-0x78]
   36e6d:	test   eax,eax
   36e6f:	jne    36ff6 <compute_colocated+0xa26>
   36e75:	mov    rbx,QWORD PTR [rsp-0x70]
   36e7a:	mov    rdi,QWORD PTR [rsp-0x60]
   36e7f:	mov    rax,QWORD PTR [rbx+0x1978]
   36e86:	mov    rax,QWORD PTR [rax+rdx*1]
   36e8a:	cmp    BYTE PTR [rax+rdi*1],0x0
   36e8e:	je     36f60 <compute_colocated+0x990>
   36e94:	mov    r10d,DWORD PTR [rbx+0x18fc]
   36e9b:	jmp    36c04 <compute_colocated+0x634>
   36ea0:	mov    r10,QWORD PTR [rsp-0x68]
   36ea5:	mov    r11,QWORD PTR [rsp+0x20]
   36eaa:	mov    r9,QWORD PTR [r10+0x1968]
   36eb1:	mov    r13,QWORD PTR [r9]
   36eb4:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   36eb9:	mov    r13,QWORD PTR [r13+r11*1+0x0]
   36ebe:	movzx  r14d,WORD PTR [r13+0x0]
   36ec3:	mov    WORD PTR [r8],r14w
   36ec7:	movzx  r13d,WORD PTR [r13+0x2]
   36ecc:	mov    WORD PTR [r8+0x2],r13w
   36ed1:	mov    r8,QWORD PTR [r9+0x8]
   36ed5:	mov    r8,QWORD PTR [r8+rcx*1]
   36ed9:	mov    r8,QWORD PTR [r8+r11*1]
   36edd:	mov    r11,QWORD PTR [rsp+0x28]
   36ee2:	movzx  r9d,WORD PTR [r8]
   36ee6:	mov    WORD PTR [rdi],r9w
   36eea:	movzx  r8d,WORD PTR [r8+0x2]
   36eef:	mov    WORD PTR [rdi+0x2],r8w
   36ef4:	mov    rdi,QWORD PTR [r10+0x1950]
   36efb:	mov    r8,QWORD PTR [rdi]
   36efe:	mov    rdi,QWORD PTR [rdi+0x8]
   36f02:	mov    r8,QWORD PTR [r8+rcx*1]
   36f06:	mov    rcx,QWORD PTR [rdi+rcx*1]
   36f0a:	mov    rdi,QWORD PTR [rsp+0x40]
   36f0f:	movzx  r8d,WORD PTR [r8+r11*1]
   36f14:	mov    WORD PTR [r12],r8w
   36f19:	movzx  ecx,WORD PTR [rcx+r11*1]
   36f1e:	mov    WORD PTR [rbp+0x0],cx
   36f22:	mov    rcx,QWORD PTR [rbx+rdi*1]
   36f26:	mov    rbx,QWORD PTR [rsp-0x78]
   36f2b:	mov    QWORD PTR [rbx],rcx
   36f2e:	mov    rcx,QWORD PTR [rsp-0x70]
   36f33:	mov    rcx,QWORD PTR [rcx+rdi*1]
   36f37:	mov    rdi,QWORD PTR [rsp-0x60]
   36f3c:	mov    QWORD PTR [rdi],rcx
   36f3f:	mov    ecx,DWORD PTR [r10+0x18e8]
   36f46:	mov    rdi,QWORD PTR [rsp-0x58]
   36f4b:	mov    DWORD PTR [rdi+0x1300],ecx
   36f51:	jmp    3689d <compute_colocated+0x2cd>
   36f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36f60:	mov    rdi,QWORD PTR [r14+0xca0]
   36f67:	mov    rax,QWORD PTR [rdi]
   36f6a:	mov    rax,QWORD PTR [rax+rdx*1]
   36f6e:	mov    r9,QWORD PTR [rax+r8*1]
   36f72:	movzx  r10d,WORD PTR [r9+0x2]
   36f77:	mov    eax,r10d
   36f7a:	shr    ax,0xf
   36f7e:	add    eax,r10d
   36f81:	sar    ax,1
   36f84:	mov    WORD PTR [r9+0x2],ax
   36f89:	mov    rax,QWORD PTR [rdi+0x8]
   36f8d:	mov    rax,QWORD PTR [rax+rdx*1]
   36f91:	mov    rdi,QWORD PTR [rax+r8*1]
   36f95:	movzx  r9d,WORD PTR [rdi+0x2]
   36f9a:	mov    eax,r9d
   36f9d:	shr    ax,0xf
   36fa1:	add    eax,r9d
   36fa4:	sar    ax,1
   36fa7:	mov    WORD PTR [rdi+0x2],ax
   36fab:	mov    rdi,QWORD PTR [r14+0x12f0]
   36fb2:	mov    rax,QWORD PTR [rdi]
   36fb5:	mov    rax,QWORD PTR [rax+rdx*1]
   36fb9:	mov    r9,QWORD PTR [rax+r8*1]
   36fbd:	movzx  r10d,WORD PTR [r9+0x2]
   36fc2:	mov    eax,r10d
   36fc5:	shr    ax,0xf
   36fc9:	add    eax,r10d
   36fcc:	sar    ax,1
   36fcf:	mov    WORD PTR [r9+0x2],ax
   36fd4:	mov    rax,QWORD PTR [rdi+0x8]
   36fd8:	mov    rax,QWORD PTR [rax+rdx*1]
   36fdc:	mov    rdi,QWORD PTR [rax+r8*1]
   36fe0:	movzx  r8d,WORD PTR [rdi+0x2]
   36fe5:	mov    eax,r8d
   36fe8:	shr    ax,0xf
   36fec:	add    eax,r8d
   36fef:	sar    ax,1
   36ff2:	mov    WORD PTR [rdi+0x2],ax
   36ff6:	mov    rax,QWORD PTR [rsp-0x70]
   36ffb:	mov    r10d,DWORD PTR [rax+0x18fc]
   37002:	jmp    36c04 <compute_colocated+0x634>
   37007:	nop    WORD PTR [rax+rax*1+0x0]
   37010:	and    eax,0xfffffffe
   37013:	cdqe   
   37015:	add    rax,rax
   37018:	jmp    36ce1 <compute_colocated+0x711>
   3701d:	nop    DWORD PTR [rax]
   37020:	and    edi,0xfffffffe
   37023:	movsxd rdi,edi
   37026:	shl    rdi,0x3
   3702a:	jmp    36c64 <compute_colocated+0x694>
   3702f:	nop
   37030:	and    eax,0xfffffffe
   37033:	cdqe   
   37035:	add    rax,rax
   37038:	jmp    36b1d <compute_colocated+0x54d>
   3703d:	nop    DWORD PTR [rax]
   37040:	and    edi,0xfffffffe
   37043:	movsxd rdi,edi
   37046:	shl    rdi,0x3
   3704a:	jmp    36a98 <compute_colocated+0x4c8>
   3704f:	nop
   37050:	mov    ebp,0xffffffff
   37055:	mov    WORD PTR [r8],bp
   37059:	mov    QWORD PTR [rbx],0xffffffffffffffff
   37060:	jmp    36be7 <compute_colocated+0x617>
   37065:	nop    DWORD PTR [rax]
   37068:	mov    r12d,0xffffffff
   3706e:	mov    WORD PTR [r15],r12w
   37072:	mov    r15,QWORD PTR [rsp-0x50]
   37077:	mov    QWORD PTR [r15],0xffffffffffffffff
   3707e:	jmp    36b98 <compute_colocated+0x5c8>
   37083:	nop    DWORD PTR [rax+rax*1+0x0]
   37088:	mov    rdi,QWORD PTR [rsp+0x10]
   3708d:	movzx  eax,WORD PTR [rbx]
   37090:	mov    edi,DWORD PTR [rdi+0x18e8]
   37096:	test   edi,edi
   37098:	jne    372a8 <compute_colocated+0xcd8>
   3709e:	test   ax,ax
   370a1:	jne    372a8 <compute_colocated+0xcd8>
   370a7:	movzx  eax,WORD PTR [r9]
   370ab:	movzx  edi,WORD PTR [r9]
   370af:	sar    ax,0xf
   370b3:	xor    edi,eax
   370b5:	sub    edi,eax
   370b7:	mov    eax,0x1
   370bc:	test   di,0xfffe
   370c1:	jne    370e0 <compute_colocated+0xb10>
   370c3:	movzx  eax,WORD PTR [r9+0x2]
   370c8:	movzx  edi,WORD PTR [r9+0x2]
   370cd:	sar    ax,0xf
   370d1:	xor    edi,eax
   370d3:	sub    edi,eax
   370d5:	mov    eax,edi
   370d7:	test   ax,0xfffe
   370db:	setne  al
   370de:	xchg   ax,ax
   370e0:	mov    rdi,QWORD PTR [r14+0xca8]
   370e7:	mov    rdi,QWORD PTR [rdi+rdx*1]
   370eb:	mov    BYTE PTR [rdi+rcx*1],al
   370ee:	mov    rax,QWORD PTR [rip+0x514bb]        # 885b0 <img>
   370f5:	mov    QWORD PTR [rsp-0x48],rax
   370fa:	mov    eax,DWORD PTR [rax+0x1193c]
   37100:	mov    DWORD PTR [rsp-0x78],eax
   37104:	jmp    36e69 <compute_colocated+0x899>
   37109:	nop    DWORD PTR [rax+0x0]
   37110:	mov    rbx,QWORD PTR [rsp-0x68]
   37115:	movzx  r11d,WORD PTR [rbp+0x0]
   3711a:	mov    ebx,DWORD PTR [rbx+0x18e8]
   37120:	test   ebx,ebx
   37122:	jne    37288 <compute_colocated+0xcb8>
   37128:	test   r11w,r11w
   3712c:	jne    37288 <compute_colocated+0xcb8>
   37132:	movzx  r10d,WORD PTR [r9]
   37136:	movzx  r11d,WORD PTR [r9]
   3713a:	sar    r10w,0xf
   3713f:	xor    r11d,r10d
   37142:	sub    r11d,r10d
   37145:	mov    r10d,r11d
   37148:	mov    r11d,0x1
   3714e:	test   r10w,0xfffe
   37154:	jne    37180 <compute_colocated+0xbb0>
   37156:	movzx  r10d,WORD PTR [r9+0x2]
   3715b:	movzx  ebx,WORD PTR [r9+0x2]
   37160:	sar    r10w,0xf
   37165:	xor    ebx,r10d
   37168:	mov    r9d,ebx
   3716b:	sub    r9d,r10d
   3716e:	test   r9w,0xfffe
   37174:	setne  r11b
   37178:	nop    DWORD PTR [rax+rax*1+0x0]
   37180:	mov    r9,QWORD PTR [r14+0x12f8]
   37187:	mov    r9,QWORD PTR [r9+rdx*1]
   3718b:	mov    BYTE PTR [r9+rcx*1],r11b
   3718f:	mov    rbx,QWORD PTR [rip+0x5141a]        # 885b0 <img>
   37196:	mov    QWORD PTR [rsp-0x48],rbx
   3719b:	mov    ebx,DWORD PTR [rbx+0x1193c]
   371a1:	mov    DWORD PTR [rsp-0x78],ebx
   371a5:	jmp    36d73 <compute_colocated+0x7a3>
   371aa:	nop    WORD PTR [rax+rax*1+0x0]
   371b0:	mov    rbx,QWORD PTR [rsp-0x58]
   371b5:	movzx  edi,WORD PTR [rbx]
   371b8:	test   eax,eax
   371ba:	jne    37238 <compute_colocated+0xc68>
   371bc:	test   di,di
   371bf:	jne    37238 <compute_colocated+0xc68>
   371c1:	movzx  eax,WORD PTR [r13+0x0]
   371c6:	movzx  edi,WORD PTR [r13+0x0]
   371cb:	sar    ax,0xf
   371cf:	xor    edi,eax
   371d1:	sub    edi,eax
   371d3:	mov    eax,0x1
   371d8:	test   di,0xfffe
   371dd:	jne    37200 <compute_colocated+0xc30>
   371df:	movzx  eax,WORD PTR [r13+0x2]
   371e4:	movzx  edi,WORD PTR [r13+0x2]
   371e9:	sar    ax,0xf
   371ed:	xor    edi,eax
   371ef:	sub    edi,eax
   371f1:	mov    eax,edi
   371f3:	test   ax,0xfffe
   371f7:	setne  al
   371fa:	nop    WORD PTR [rax+rax*1+0x0]
   37200:	mov    rdi,QWORD PTR [r14+0x658]
   37207:	mov    rdi,QWORD PTR [rdi+rdx*1]
   3720b:	mov    BYTE PTR [rdi+rcx*1],al
   3720e:	mov    rax,QWORD PTR [rip+0x5139b]        # 885b0 <img>
   37215:	mov    QWORD PTR [rsp-0x48],rax
   3721a:	mov    eax,DWORD PTR [rax+0x1193c]
   37220:	mov    DWORD PTR [rsp-0x78],eax
   37224:	mov    rax,QWORD PTR [rsp-0x70]
   37229:	mov    r10d,DWORD PTR [rax+0x18fc]
   37230:	jmp    36c04 <compute_colocated+0x634>
   37235:	nop    DWORD PTR [rax]
   37238:	mov    eax,0x1
   3723d:	cmp    di,0xffff
   37241:	jne    37200 <compute_colocated+0xc30>
   37243:	cmp    WORD PTR [r8],0x0
   37248:	jne    37200 <compute_colocated+0xc30>
   3724a:	movzx  edi,WORD PTR [r9]
   3724e:	movzx  r8d,WORD PTR [r9]
   37252:	sar    di,0xf
   37256:	xor    r8d,edi
   37259:	sub    r8d,edi
   3725c:	test   r8w,0xfffe
   37262:	jne    37200 <compute_colocated+0xc30>
   37264:	movzx  eax,WORD PTR [r9+0x2]
   37269:	movzx  edi,WORD PTR [r9+0x2]
   3726e:	sar    ax,0xf
   37272:	xor    edi,eax
   37274:	sub    edi,eax
   37276:	mov    eax,edi
   37278:	test   ax,0xfffe
   3727c:	setne  al
   3727f:	jmp    37200 <compute_colocated+0xc30>
   37284:	nop    DWORD PTR [rax+0x0]
   37288:	test   r12w,r12w
   3728c:	jne    37299 <compute_colocated+0xcc9>
   3728e:	cmp    r11w,0xffff
   37293:	je     37ca0 <compute_colocated+0x16d0>
   37299:	mov    r11d,0x1
   3729f:	jmp    37180 <compute_colocated+0xbb0>
   372a4:	nop    DWORD PTR [rax+0x0]
   372a8:	test   bp,bp
   372ab:	jne    372b7 <compute_colocated+0xce7>
   372ad:	cmp    ax,0xffff
   372b1:	je     37cf0 <compute_colocated+0x1720>
   372b7:	mov    eax,0x1
   372bc:	jmp    370e0 <compute_colocated+0xb10>
   372c1:	nop    DWORD PTR [rax+0x0]
   372c8:	mov    r15,QWORD PTR [rsp-0x70]
   372cd:	mov    edx,DWORD PTR [r15+0x18f8]
   372d4:	add    QWORD PTR [rsp-0x40],0x1
   372da:	mov    rsi,QWORD PTR [rsp-0x40]
   372df:	test   edx,edx
   372e1:	lea    eax,[rdx+0x3]
   372e4:	cmovns eax,edx
   372e7:	sar    eax,0x2
   372ea:	cmp    eax,esi
   372ec:	jg     36a30 <compute_colocated+0x460>
   372f2:	mov    rax,QWORD PTR [rip+0x7eb77]        # b5e70 <active_sps>
   372f9:	mov    DWORD PTR [rsp+0x58],r10d
   372fe:	mov    QWORD PTR [rsp+0x50],rax
   37303:	mov    eax,DWORD PTR [rax+0x47c]
   37309:	mov    DWORD PTR [rsp+0x5c],eax
   3730d:	mov    eax,DWORD PTR [rsp+0x5c]
   37311:	test   eax,eax
   37313:	je     375d3 <compute_colocated+0x1003>
   37319:	mov    rax,QWORD PTR [rsp+0x50]
   3731e:	mov    eax,DWORD PTR [rax+0x484]
   37324:	test   eax,eax
   37326:	jne    375d3 <compute_colocated+0x1003>
   3732c:	cmp    DWORD PTR [rsp+0x58],0x3
   37331:	jle    37e42 <compute_colocated+0x1872>
   37337:	mov    eax,DWORD PTR [r15+0x18f8]
   3733e:	mov    DWORD PTR [rsp-0x10],eax
   37342:	mov    r13d,DWORD PTR [rsp-0x10]
   37347:	mov    eax,DWORD PTR [rsp+0x58]
   3734b:	mov    QWORD PTR [rsp-0x50],r15
   37350:	mov    r15,r14
   37353:	mov    QWORD PTR [rsp-0x30],0x0
   3735c:	nop    DWORD PTR [rax+0x0]
   37360:	cmp    r13d,0x3
   37364:	jle    37a23 <compute_colocated+0x1453>
   3736a:	mov    rcx,QWORD PTR [rsp-0x30]
   3736f:	lea    rax,[rcx+rcx*1]
   37373:	mov    edx,ecx
   37375:	lea    rsi,[rcx*8+0x0]
   3737d:	mov    QWORD PTR [rsp-0x40],rax
   37382:	mov    eax,ecx
   37384:	and    edx,0xfffffffe
   37387:	or     eax,0x1
   3738a:	movsxd rdx,edx
   3738d:	and    ecx,0x2
   37390:	cdqe   
   37392:	lea    rdi,[rdx*8+0x0]
   3739a:	lea    r8,[rax*8+0x0]
   373a2:	cmove  r8,rdi
   373a6:	add    rdx,rdx
   373a9:	add    rax,rax
   373ac:	test   ecx,ecx
   373ae:	cmove  rax,rdx
   373b2:	xor    r14d,r14d
   373b5:	mov    rbp,r8
   373b8:	mov    QWORD PTR [rsp-0x38],rax
   373bd:	jmp    374bd <compute_colocated+0xeed>
   373c2:	nop    WORD PTR [rax+rax*1+0x0]
   373c8:	mov    r12d,DWORD PTR [rax+0x484]
   373cf:	test   r12d,r12d
   373d2:	jne    37540 <compute_colocated+0xf70>
   373d8:	mov    r10,QWORD PTR [rsp-0x50]
   373dd:	lea    rbx,[r14*8+0x0]
   373e5:	mov    r11,QWORD PTR [rsp-0x40]
   373ea:	mov    r9,QWORD PTR [rsp-0x70]
   373ef:	mov    rax,QWORD PTR [r10+0x1968]
   373f6:	mov    rdi,QWORD PTR [rax]
   373f9:	mov    rax,QWORD PTR [rax+0x8]
   373fd:	mov    rdi,QWORD PTR [rdi+rbx*1]
   37401:	mov    rax,QWORD PTR [rax+rbx*1]
   37405:	mov    rdi,QWORD PTR [rdi+rsi*1]
   37409:	mov    rax,QWORD PTR [rax+rsi*1]
   3740d:	movzx  r8d,WORD PTR [rdi]
   37411:	mov    WORD PTR [rdx],r8w
   37415:	movzx  edi,WORD PTR [rdi+0x2]
   37419:	mov    WORD PTR [rdx+0x2],di
   3741d:	movzx  edi,WORD PTR [rax]
   37420:	mov    WORD PTR [rcx],di
   37423:	movzx  eax,WORD PTR [rax+0x2]
   37427:	mov    WORD PTR [rcx+0x2],ax
   3742b:	mov    rax,QWORD PTR [r10+0x1950]
   37432:	mov    rdi,QWORD PTR [rax]
   37435:	mov    rax,QWORD PTR [rax+0x8]
   37439:	mov    rdi,QWORD PTR [rdi+rbx*1]
   3743d:	mov    rax,QWORD PTR [rax+rbx*1]
   37441:	movzx  edi,WORD PTR [rdi+r11*1]
   37446:	mov    WORD PTR [r9],di
   3744a:	mov    rdi,QWORD PTR [rsp-0x68]
   3744f:	movzx  eax,WORD PTR [rax+r11*1]
   37454:	mov    WORD PTR [rdi],ax
   37457:	mov    rax,QWORD PTR [r10+0x1960]
   3745e:	mov    rdi,QWORD PTR [rax]
   37461:	mov    rdi,QWORD PTR [rdi+rbx*1]
   37465:	mov    rdi,QWORD PTR [rdi+rsi*1]
   37469:	mov    r10,QWORD PTR [rsp-0x60]
   3746e:	mov    rax,QWORD PTR [rax+0x8]
   37472:	mov    QWORD PTR [r10],rdi
   37475:	mov    rdi,QWORD PTR [rsp-0x58]
   3747a:	mov    rax,QWORD PTR [rax+rbx*1]
   3747e:	mov    rax,QWORD PTR [rax+rsi*1]
   37482:	mov    QWORD PTR [rdi],rax
   37485:	mov    rax,QWORD PTR [rsp-0x50]
   3748a:	cmp    DWORD PTR [rsp-0x78],0x1
   3748f:	mov    eax,DWORD PTR [rax+0x18e8]
   37495:	mov    DWORD PTR [r15+0x1300],eax
   3749c:	je     37930 <compute_colocated+0x1360>
   374a2:	add    r14,0x1
   374a6:	lea    eax,[r13+0x3]
   374aa:	test   r13d,r13d
   374ad:	cmovns eax,r13d
   374b1:	sar    eax,0x2
   374b4:	cmp    eax,r14d
   374b7:	jle    37a18 <compute_colocated+0x1448>
   374bd:	mov    rdi,QWORD PTR [r15+0x640]
   374c4:	mov    r8,QWORD PTR [rsp-0x40]
   374c9:	mov    rcx,QWORD PTR [r15+0x650]
   374d0:	mov    rax,QWORD PTR [rip+0x7e999]        # b5e70 <active_sps>
   374d7:	mov    r10,QWORD PTR [rdi]
   374da:	mov    rbx,QWORD PTR [rcx]
   374dd:	mov    r11,QWORD PTR [rcx+0x8]
   374e1:	mov    r9,QWORD PTR [r10+r14*8]
   374e5:	mov    rdx,QWORD PTR [rbx+r14*8]
   374e9:	mov    rcx,QWORD PTR [r11+r14*8]
   374ed:	add    r9,r8
   374f0:	mov    rdx,QWORD PTR [rdx+rsi*1]
   374f4:	mov    rcx,QWORD PTR [rcx+rsi*1]
   374f8:	mov    QWORD PTR [rsp-0x70],r9
   374fd:	mov    r9,QWORD PTR [rdi+0x8]
   37501:	mov    rdi,QWORD PTR [r15+0x648]
   37508:	add    r8,QWORD PTR [r9+r14*8]
   3750c:	mov    QWORD PTR [rsp-0x68],r8
   37511:	mov    r8,QWORD PTR [rdi]
   37514:	mov    rdi,QWORD PTR [rdi+0x8]
   37518:	mov    r12,QWORD PTR [r8+r14*8]
   3751c:	add    r12,rsi
   3751f:	mov    QWORD PTR [rsp-0x60],r12
   37524:	mov    r12,QWORD PTR [rdi+r14*8]
   37528:	add    r12,rsi
   3752b:	mov    QWORD PTR [rsp-0x58],r12
   37530:	mov    r12d,DWORD PTR [rax+0x47c]
   37537:	test   r12d,r12d
   3753a:	jne    373c8 <compute_colocated+0xdf8>
   37540:	mov    eax,r14d
   37543:	test   al,0x2
   37545:	je     37918 <compute_colocated+0x1348>
   3754b:	or     eax,0x1
   3754e:	cdqe   
   37550:	shl    rax,0x3
   37554:	mov    rbx,QWORD PTR [rbx+rax*1]
   37558:	mov    r11,QWORD PTR [r11+rax*1]
   3755c:	mov    r10,QWORD PTR [r10+rax*1]
   37560:	mov    r9,QWORD PTR [r9+rax*1]
   37564:	mov    rbx,QWORD PTR [rbx+rbp*1]
   37568:	mov    r11,QWORD PTR [r11+rbp*1]
   3756c:	mov    r8,QWORD PTR [r8+rax*1]
   37570:	mov    rax,QWORD PTR [rdi+rax*1]
   37574:	movzx  r12d,WORD PTR [rbx]
   37578:	mov    rdi,QWORD PTR [rsp-0x58]
   3757d:	mov    r8,QWORD PTR [r8+rbp*1]
   37581:	mov    WORD PTR [rdx],r12w
   37585:	movzx  ebx,WORD PTR [rbx+0x2]
   37589:	mov    WORD PTR [rdx+0x2],bx
   3758d:	movzx  ebx,WORD PTR [r11]
   37591:	mov    WORD PTR [rcx],bx
   37594:	movzx  r11d,WORD PTR [r11+0x2]
   37599:	mov    rbx,QWORD PTR [rsp-0x70]
   3759e:	mov    WORD PTR [rcx+0x2],r11w
   375a3:	mov    r11,QWORD PTR [rsp-0x38]
   375a8:	movzx  r10d,WORD PTR [r10+r11*1]
   375ad:	mov    WORD PTR [rbx],r10w
   375b1:	mov    rbx,QWORD PTR [rsp-0x68]
   375b6:	movzx  r9d,WORD PTR [r9+r11*1]
   375bb:	mov    WORD PTR [rbx],r9w
   375bf:	mov    rbx,QWORD PTR [rsp-0x60]
   375c4:	mov    QWORD PTR [rbx],r8
   375c7:	mov    rax,QWORD PTR [rax+rbp*1]
   375cb:	mov    QWORD PTR [rdi],rax
   375ce:	jmp    37485 <compute_colocated+0xeb5>
   375d3:	mov    rax,QWORD PTR [rsp-0x48]
   375d8:	mov    r13d,DWORD PTR [rax+0x1c]
   375dc:	test   r13d,r13d
   375df:	jne    3732c <compute_colocated+0xd5c>
   375e5:	mov    eax,DWORD PTR [rsp+0x58]
   375e9:	add    eax,0x3
   375ec:	mov    DWORD PTR [rsp+0x6c],eax
   375f0:	mov    esi,DWORD PTR [rsp+0x58]
   375f4:	mov    eax,DWORD PTR [rsp+0x6c]
   375f8:	test   esi,esi
   375fa:	cmovns eax,esi
   375fd:	sar    eax,0x2
   37600:	mov    DWORD PTR [rsp+0x8],eax
   37604:	cmp    esi,0x3
   37607:	jle    37e42 <compute_colocated+0x1872>
   3760d:	mov    esi,DWORD PTR [r15+0x18f8]
   37614:	mov    rbp,r15
   37617:	test   esi,esi
   37619:	lea    eax,[rsi+0x3]
   3761c:	mov    DWORD PTR [rsp-0x10],esi
   37620:	cmovns eax,esi
   37623:	xor    r12d,r12d
   37626:	mov    r13,r12
   37629:	sar    eax,0x2
   3762c:	mov    DWORD PTR [rsp-0x60],eax
   37630:	mov    rax,QWORD PTR [rip+0x53371]        # 8a9a8 <enc_picture>
   37637:	mov    QWORD PTR [rsp-0x18],rax
   3763c:	nop    DWORD PTR [rax+0x0]
   37640:	cmp    DWORD PTR [rsp-0x10],0x3
   37645:	jle    378fb <compute_colocated+0x132b>
   3764b:	mov    eax,r13d
   3764e:	mov    QWORD PTR [rsp-0x68],r13
   37653:	mov    r12,QWORD PTR [rbp+0x1978]
   3765a:	lea    rbx,[r13*8+0x0]
   37662:	sar    eax,1
   37664:	movsxd rdx,eax
   37667:	lea    rsi,[rdx*8+0x0]
   3766f:	lea    r10,[rdx+rdx*1]
   37673:	mov    edx,r13d
   37676:	sar    edx,0x3
   37679:	mov    QWORD PTR [rsp-0x30],rsi
   3767e:	lea    rsi,[r13+r13*1+0x0]
   37683:	lea    eax,[rax+rdx*4]
   37686:	mov    QWORD PTR [rsp-0x28],rsi
   3768b:	lea    rsi,[rax*8+0x20]
   37693:	shl    rax,0x3
   37697:	mov    QWORD PTR [rsp-0x20],r10
   3769c:	mov    QWORD PTR [rsp-0x8],rax
   376a1:	xor    eax,eax
   376a3:	mov    QWORD PTR [rsp],rsi
   376a7:	jmp    37762 <compute_colocated+0x1192>
   376ac:	nop    DWORD PTR [rax+0x0]
   376b0:	mov    rdx,QWORD PTR [r8+0x1968]
   376b7:	mov    r11,QWORD PTR [rsp-0x30]
   376bc:	mov    rcx,QWORD PTR [rdx]
   376bf:	mov    rdx,QWORD PTR [rdx+0x8]
   376c3:	mov    rcx,QWORD PTR [rcx+rsi*1]
   376c7:	mov    rdx,QWORD PTR [rdx+rsi*1]
   376cb:	mov    rcx,QWORD PTR [rcx+r11*1]
   376cf:	mov    rdx,QWORD PTR [rdx+r11*1]
   376d3:	mov    r11,QWORD PTR [rsp-0x40]
   376d8:	movzx  edi,WORD PTR [rcx]
   376db:	mov    WORD PTR [r10],di
   376df:	movzx  ecx,WORD PTR [rcx+0x2]
   376e3:	mov    rdi,QWORD PTR [rsp-0x58]
   376e8:	mov    WORD PTR [r10+0x2],cx
   376ed:	movzx  ecx,WORD PTR [rdx]
   376f0:	mov    r10,QWORD PTR [rsp-0x20]
   376f5:	mov    WORD PTR [r9],cx
   376f9:	movzx  edx,WORD PTR [rdx+0x2]
   376fd:	mov    WORD PTR [r9+0x2],dx
   37702:	mov    rdx,QWORD PTR [r8+0x1950]
   37709:	mov    rcx,QWORD PTR [rdx]
   3770c:	mov    rdx,QWORD PTR [rdx+0x8]
   37710:	mov    rcx,QWORD PTR [rcx+rsi*1]
   37714:	mov    rdx,QWORD PTR [rdx+rsi*1]
   37718:	mov    rsi,QWORD PTR [rsp-0x50]
   3771d:	movzx  ecx,WORD PTR [rcx+r10*1]
   37722:	mov    WORD PTR [rdi],cx
   37725:	movzx  edx,WORD PTR [rdx+r10*1]
   3772a:	mov    WORD PTR [rsi],dx
   3772d:	mov    rsi,QWORD PTR [rsp-0x8]
   37732:	mov    rdx,QWORD PTR [r15+rsi*1]
   37736:	mov    QWORD PTR [r11],rdx
   37739:	mov    rdx,QWORD PTR [r13+rsi*1+0x0]
   3773e:	mov    rcx,QWORD PTR [rsp-0x38]
   37743:	mov    QWORD PTR [rcx],rdx
   37746:	mov    edx,DWORD PTR [r8+0x18e8]
   3774d:	mov    DWORD PTR [r14+0x1300],edx
   37754:	add    rax,0x1
   37758:	cmp    DWORD PTR [rsp-0x60],eax
   3775c:	jle    378f6 <compute_colocated+0x1326>
   37762:	mov    rdx,QWORD PTR [r12+rax*8]
   37766:	mov    rcx,QWORD PTR [rsp-0x68]
   3776b:	lea    rsi,[rax*8+0x0]
   37773:	cmp    BYTE PTR [rdx+rcx*1],0x0
   37777:	je     37754 <compute_colocated+0x1184>
   37779:	mov    rdx,QWORD PTR [rsp-0x18]
   3777e:	mov    r15,QWORD PTR [rsp-0x28]
   37783:	mov    rdi,QWORD PTR [rbp+0x1988]
   3778a:	mov    r8,QWORD PTR [rbp+0x1980]
   37791:	mov    ecx,DWORD PTR [rdx+0x4]
   37794:	mov    rdx,QWORD PTR [r14+0x650]
   3779b:	mov    DWORD PTR [rsp-0x70],ecx
   3779f:	mov    rcx,QWORD PTR [rdx]
   377a2:	mov    rdx,QWORD PTR [rdx+0x8]
   377a6:	mov    rcx,QWORD PTR [rcx+rax*8]
   377aa:	mov    rdx,QWORD PTR [rdx+rax*8]
   377ae:	mov    r10,QWORD PTR [rcx+rbx*1]
   377b2:	mov    r9,QWORD PTR [rdx+rbx*1]
   377b6:	mov    rdx,QWORD PTR [r14+0x640]
   377bd:	mov    rcx,QWORD PTR [rdx]
   377c0:	mov    rdx,QWORD PTR [rdx+0x8]
   377c4:	mov    r13,QWORD PTR [rcx+rax*8]
   377c8:	mov    rcx,QWORD PTR [rbp+0x1960]
   377cf:	add    r13,r15
   377d2:	add    r15,QWORD PTR [rdx+rax*8]
   377d6:	mov    rdx,QWORD PTR [rcx]
   377d9:	mov    QWORD PTR [rsp-0x50],r15
   377de:	mov    rcx,QWORD PTR [rcx+0x8]
   377e2:	mov    r15,QWORD PTR [rdx+rax*8]
   377e6:	mov    rdx,QWORD PTR [r14+0x648]
   377ed:	mov    QWORD PTR [rsp-0x58],r13
   377f2:	mov    r13,QWORD PTR [rdx]
   377f5:	mov    rdx,QWORD PTR [rdx+0x8]
   377f9:	mov    r11,QWORD PTR [r13+rax*8+0x0]
   377fe:	mov    r13,QWORD PTR [rcx+rax*8]
   37802:	mov    rcx,QWORD PTR [rdx+rax*8]
   37806:	add    r11,rbx
   37809:	add    rcx,rbx
   3780c:	mov    QWORD PTR [rsp-0x40],r11
   37811:	mov    QWORD PTR [rsp-0x38],rcx
   37816:	mov    ecx,DWORD PTR [rsp-0x70]
   3781a:	sub    ecx,DWORD PTR [rdi+0x4]
   3781d:	mov    edx,ecx
   3781f:	sar    edx,0x1f
   37822:	xor    ecx,edx
   37824:	mov    r11d,ecx
   37827:	sub    r11d,edx
   3782a:	mov    edx,DWORD PTR [rsp-0x70]
   3782e:	sub    edx,DWORD PTR [r8+0x4]
   37832:	mov    ecx,edx
   37834:	sar    ecx,0x1f
   37837:	xor    edx,ecx
   37839:	sub    edx,ecx
   3783b:	cmp    r11d,edx
   3783e:	jg     376b0 <compute_colocated+0x10e0>
   37844:	mov    rdx,QWORD PTR [rdi+0x1968]
   3784b:	mov    r11,QWORD PTR [rsp-0x30]
   37850:	add    rax,0x1
   37854:	mov    rcx,QWORD PTR [rdx]
   37857:	mov    rdx,QWORD PTR [rdx+0x8]
   3785b:	mov    rcx,QWORD PTR [rcx+rsi*1]
   3785f:	mov    rdx,QWORD PTR [rdx+rsi*1]
   37863:	mov    rcx,QWORD PTR [rcx+r11*1]
   37867:	mov    rdx,QWORD PTR [rdx+r11*1]
   3786b:	movzx  r8d,WORD PTR [rcx]
   3786f:	mov    WORD PTR [r10],r8w
   37873:	movzx  ecx,WORD PTR [rcx+0x2]
   37877:	mov    WORD PTR [r10+0x2],cx
   3787c:	movzx  ecx,WORD PTR [rdx]
   3787f:	mov    r10,QWORD PTR [rsp-0x58]
   37884:	mov    WORD PTR [r9],cx
   37888:	movzx  edx,WORD PTR [rdx+0x2]
   3788c:	mov    WORD PTR [r9+0x2],dx
   37891:	mov    rdx,QWORD PTR [rdi+0x1950]
   37898:	mov    r9,QWORD PTR [rsp-0x20]
   3789d:	mov    rcx,QWORD PTR [rdx]
   378a0:	mov    rdx,QWORD PTR [rdx+0x8]
   378a4:	mov    rcx,QWORD PTR [rcx+rsi*1]
   378a8:	mov    rdx,QWORD PTR [rdx+rsi*1]
   378ac:	mov    rsi,QWORD PTR [rsp-0x50]
   378b1:	movzx  ecx,WORD PTR [rcx+r9*1]
   378b6:	mov    WORD PTR [r10],cx
   378ba:	movzx  edx,WORD PTR [rdx+r9*1]
   378bf:	mov    rcx,QWORD PTR [rsp-0x40]
   378c4:	mov    WORD PTR [rsi],dx
   378c7:	mov    rsi,QWORD PTR [rsp]
   378cb:	mov    rdx,QWORD PTR [r15+rsi*1]
   378cf:	mov    QWORD PTR [rcx],rdx
   378d2:	mov    rdx,QWORD PTR [r13+rsi*1+0x0]
   378d7:	mov    rsi,QWORD PTR [rsp-0x38]
   378dc:	mov    QWORD PTR [rsi],rdx
   378df:	mov    edx,DWORD PTR [rdi+0x18e8]
   378e5:	mov    DWORD PTR [r14+0x1300],edx
   378ec:	cmp    DWORD PTR [rsp-0x60],eax
   378f0:	jg     37762 <compute_colocated+0x1192>
   378f6:	mov    r13,QWORD PTR [rsp-0x68]
   378fb:	add    r13,0x1
   378ff:	cmp    DWORD PTR [rsp+0x8],r13d
   37904:	jg     37640 <compute_colocated+0x1070>
   3790a:	mov    r15,rbp
   3790d:	jmp    37342 <compute_colocated+0xd72>
   37912:	nop    WORD PTR [rax+rax*1+0x0]
   37918:	and    eax,0xfffffffe
   3791b:	cdqe   
   3791d:	shl    rax,0x3
   37921:	jmp    37554 <compute_colocated+0xf84>
   37926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37930:	mov    rdi,QWORD PTR [rsp-0x70]
   37935:	movzx  edi,WORD PTR [rdi]
   37938:	test   eax,eax
   3793a:	jne    379c8 <compute_colocated+0x13f8>
   37940:	test   di,di
   37943:	jne    379c8 <compute_colocated+0x13f8>
   37949:	movzx  eax,WORD PTR [rdx]
   3794c:	movzx  ecx,WORD PTR [rdx]
   3794f:	sar    ax,0xf
   37953:	xor    ecx,eax
   37955:	sub    ecx,eax
   37957:	mov    eax,0x1
   3795c:	test   cx,0xfffe
   37961:	jne    37980 <compute_colocated+0x13b0>
   37963:	movzx  eax,WORD PTR [rdx+0x2]
   37967:	movzx  ecx,WORD PTR [rdx+0x2]
   3796b:	sar    ax,0xf
   3796f:	xor    ecx,eax
   37971:	mov    edx,ecx
   37973:	sub    edx,eax
   37975:	mov    eax,edx
   37977:	test   ax,0xfffe
   3797b:	setne  al
   3797e:	xchg   ax,ax
   37980:	mov    rdx,QWORD PTR [r15+0x658]
   37987:	lea    rcx,[r14*8+0x0]
   3798f:	mov    rdx,QWORD PTR [rdx+rcx*1]
   37993:	mov    rcx,QWORD PTR [rsp-0x30]
   37998:	mov    BYTE PTR [rdx+rcx*1],al
   3799b:	mov    rax,QWORD PTR [rip+0x50c0e]        # 885b0 <img>
   379a2:	mov    QWORD PTR [rsp-0x48],rax
   379a7:	mov    eax,DWORD PTR [rax+0x1193c]
   379ad:	mov    DWORD PTR [rsp-0x78],eax
   379b1:	mov    rax,QWORD PTR [rsp-0x50]
   379b6:	mov    r13d,DWORD PTR [rax+0x18f8]
   379bd:	jmp    374a2 <compute_colocated+0xed2>
   379c2:	nop    WORD PTR [rax+rax*1+0x0]
   379c8:	mov    eax,0x1
   379cd:	cmp    di,0xffff
   379d1:	jne    37980 <compute_colocated+0x13b0>
   379d3:	mov    rdx,QWORD PTR [rsp-0x68]
   379d8:	cmp    WORD PTR [rdx],0x0
   379dc:	jne    37980 <compute_colocated+0x13b0>
   379de:	movzx  edx,WORD PTR [rcx]
   379e1:	movzx  edi,WORD PTR [rcx]
   379e4:	sar    dx,0xf
   379e8:	xor    edi,edx
   379ea:	sub    edi,edx
   379ec:	test   di,0xfffe
   379f1:	jne    37980 <compute_colocated+0x13b0>
   379f3:	movzx  eax,WORD PTR [rcx+0x2]
   379f7:	movzx  edx,WORD PTR [rcx+0x2]
   379fb:	sar    ax,0xf
   379ff:	xor    edx,eax
   37a01:	sub    edx,eax
   37a03:	mov    eax,edx
   37a05:	test   ax,0xfffe
   37a09:	setne  al
   37a0c:	jmp    37980 <compute_colocated+0x13b0>
   37a11:	nop    DWORD PTR [rax+0x0]
   37a18:	mov    rax,QWORD PTR [rsp-0x50]
   37a1d:	mov    eax,DWORD PTR [rax+0x18fc]
   37a23:	test   eax,eax
   37a25:	lea    ecx,[rax+0x3]
   37a28:	cmovns ecx,eax
   37a2b:	add    QWORD PTR [rsp-0x30],0x1
   37a31:	mov    rsi,QWORD PTR [rsp-0x30]
   37a36:	sar    ecx,0x2
   37a39:	cmp    ecx,esi
   37a3b:	jg     37360 <compute_colocated+0xd90>
   37a41:	mov    edx,DWORD PTR [rsp-0x78]
   37a45:	mov    r14,r15
   37a48:	mov    DWORD PTR [rsp-0x10],r13d
   37a4d:	mov    DWORD PTR [rsp+0x58],eax
   37a51:	mov    r15,QWORD PTR [rsp-0x50]
   37a56:	test   edx,edx
   37a58:	jne    37c8b <compute_colocated+0x16bb>
   37a5e:	mov    rbx,QWORD PTR [rsp-0x48]
   37a63:	mov    r10d,DWORD PTR [rbx+0x11ad0]
   37a6a:	cmp    eax,0x3
   37a6d:	jle    37b24 <compute_colocated+0x1554>
   37a73:	test   r13d,r13d
   37a76:	lea    r9d,[r13+0x3]
   37a7a:	cmovns r9d,r13d
   37a7e:	xor    esi,esi
   37a80:	sar    r9d,0x2
   37a84:	nop    DWORD PTR [rax+0x0]
   37a88:	cmp    DWORD PTR [rsp-0x10],0x3
   37a8d:	jle    37b18 <compute_colocated+0x1548>
   37a93:	mov    rdi,QWORD PTR [r15+0x1978]
   37a9a:	lea    r8,[rsi*8+0x0]
   37aa2:	xor    eax,eax
   37aa4:	jmp    37aca <compute_colocated+0x14fa>
   37aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37ab0:	mov    r12d,DWORD PTR [rbx+0x1c]
   37ab4:	test   r12d,r12d
   37ab7:	je     37adf <compute_colocated+0x150f>
   37ab9:	test   dl,dl
   37abb:	je     37dcb <compute_colocated+0x17fb>
   37ac1:	add    rax,0x1
   37ac5:	cmp    r9d,eax
   37ac8:	jle    37b18 <compute_colocated+0x1548>
   37aca:	mov    rdx,QWORD PTR [rdi+rax*8]
   37ace:	lea    r11,[rax*8+0x0]
   37ad6:	movzx  edx,BYTE PTR [rdx+rsi*1]
   37ada:	test   r10d,r10d
   37add:	je     37ab0 <compute_colocated+0x14e0>
   37adf:	test   dl,dl
   37ae1:	je     37dc0 <compute_colocated+0x17f0>
   37ae7:	mov    rdx,QWORD PTR [r14+0x650]
   37aee:	add    rax,0x1
   37af2:	mov    rbp,QWORD PTR [rdx]
   37af5:	mov    rdx,QWORD PTR [rdx+0x8]
   37af9:	mov    rbp,QWORD PTR [rbp+r11*1+0x0]
   37afe:	mov    rdx,QWORD PTR [rdx+r11*1]
   37b02:	mov    rbp,QWORD PTR [rbp+r8*1+0x0]
   37b07:	mov    rdx,QWORD PTR [rdx+r8*1]
   37b0b:	shl    WORD PTR [rbp+0x2],1
   37b0f:	shl    WORD PTR [rdx+0x2],1
   37b13:	cmp    r9d,eax
   37b16:	jg     37aca <compute_colocated+0x14fa>
   37b18:	add    rsi,0x1
   37b1c:	cmp    ecx,esi
   37b1e:	jg     37a88 <compute_colocated+0x14b8>
   37b24:	lea    eax,[r10*4+0x1]
   37b2c:	mov    DWORD PTR [rsp-0x70],eax
   37b30:	test   eax,eax
   37b32:	js     37c8b <compute_colocated+0x16bb>
   37b38:	mov    r13,QWORD PTR [rip+0x52e69]        # 8a9a8 <enc_picture>
   37b3f:	mov    r10,QWORD PTR [rsp-0x48]
   37b44:	xor    r8d,r8d
   37b47:	mov    r9d,0x7f
   37b4d:	mov    rbp,QWORD PTR [rsp+0x60]
   37b52:	mov    r12d,0xffffff80
   37b58:	mov    r15d,0x3ff
   37b5e:	mov    r14d,0xfffffc00
   37b64:	lea    rax,[rip+0x7f8e5]        # b7450 <listXsize>
   37b6b:	mov    eax,DWORD PTR [rax+r8*4]
   37b6f:	test   eax,eax
   37b71:	jle    37c78 <compute_colocated+0x16a8>
   37b77:	mov    rdx,QWORD PTR [rbp+r8*8+0x8]
   37b7c:	sub    eax,0x1
   37b7f:	mov    r11,QWORD PTR [rbp+r8*8+0x0]
   37b84:	xor    esi,esi
   37b86:	mov    QWORD PTR [rsp-0x78],rax
   37b8b:	mov    rdx,QWORD PTR [rdx]
   37b8e:	mov    ebx,DWORD PTR [rdx+0x4]
   37b91:	jmp    37c28 <compute_colocated+0x1658>
   37b96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37ba0:	mov    rax,QWORD PTR [rbp+0x0]
   37ba4:	mov    ecx,DWORD PTR [r13+0x4]
   37ba8:	mov    rdi,QWORD PTR [rax+rsi*8]
   37bac:	sub    ecx,DWORD PTR [rdi+0x4]
   37baf:	mov    edi,ebx
   37bb1:	cmp    ecx,0x7f
   37bb4:	cmovg  ecx,r9d
   37bb8:	cmp    ecx,0xffffff80
   37bbb:	cmovl  ecx,r12d
   37bbf:	sub    edi,edx
   37bc1:	cmp    edi,0xffffff80
   37bc4:	jl     37c6b <compute_colocated+0x169b>
   37bca:	mov    eax,0x270f
   37bcf:	test   edi,edi
   37bd1:	je     37c12 <compute_colocated+0x1642>
   37bd3:	cmp    edi,0x7f
   37bd6:	cmovg  edi,r9d
   37bda:	mov    edx,edi
   37bdc:	shr    edx,0x1f
   37bdf:	add    edx,edi
   37be1:	mov    eax,edx
   37be3:	sar    edx,0x1f
   37be6:	sar    eax,1
   37be8:	xor    eax,edx
   37bea:	sub    eax,edx
   37bec:	add    eax,0x4000
   37bf1:	cdq    
   37bf2:	idiv   edi
   37bf4:	imul   eax,ecx
   37bf7:	lea    ecx,[rax+0x20]
   37bfa:	mov    eax,ecx
   37bfc:	sar    eax,0x6
   37bff:	cmp    ecx,0xffff
   37c05:	cmovg  eax,r15d
   37c09:	cmp    eax,0xfffffc00
   37c0e:	cmovl  eax,r14d
   37c12:	mov    DWORD PTR [r10+rsi*4+0x11950],eax
   37c1a:	lea    rax,[rsi+0x1]
   37c1e:	cmp    rsi,QWORD PTR [rsp-0x78]
   37c23:	je     37c78 <compute_colocated+0x16a8>
   37c25:	mov    rsi,rax
   37c28:	mov    rax,QWORD PTR [r11+rsi*8]
   37c2c:	lea    rcx,[rsi*8+0x0]
   37c34:	mov    edx,DWORD PTR [rax+0x4]
   37c37:	test   r8,r8
   37c3a:	je     37ba0 <compute_colocated+0x15d0>
   37c40:	cmp    r8d,0x2
   37c44:	je     37e20 <compute_colocated+0x1850>
   37c4a:	mov    ecx,DWORD PTR [r13+0xc]
   37c4e:	mov    edi,ebx
   37c50:	sub    ecx,edx
   37c52:	cmp    ecx,0x7f
   37c55:	cmovg  ecx,r9d
   37c59:	cmp    ecx,0xffffff80
   37c5c:	cmovl  ecx,r12d
   37c60:	sub    edi,edx
   37c62:	cmp    edi,0xffffff80
   37c65:	jge    37bca <compute_colocated+0x15fa>
   37c6b:	mov    eax,0xffffff80
   37c70:	jmp    37bf4 <compute_colocated+0x1624>
   37c72:	nop    WORD PTR [rax+rax*1+0x0]
   37c78:	add    r8,0x2
   37c7c:	add    r10,0x78
   37c80:	cmp    DWORD PTR [rsp-0x70],r8d
   37c85:	jge    37b64 <compute_colocated+0x1594>
   37c8b:	add    rsp,0x70
   37c8f:	pop    rbx
   37c90:	pop    rbp
   37c91:	pop    r12
   37c93:	pop    r13
   37c95:	pop    r14
   37c97:	pop    r15
   37c99:	ret    
   37c9a:	nop    WORD PTR [rax+rax*1+0x0]
   37ca0:	movzx  r9d,WORD PTR [r10]
   37ca4:	movzx  r11d,WORD PTR [r10]
   37ca8:	sar    r9w,0xf
   37cad:	xor    r11d,r9d
   37cb0:	sub    r11d,r9d
   37cb3:	mov    r9d,r11d
   37cb6:	mov    r11d,0x1
   37cbc:	test   r9w,0xfffe
   37cc2:	jne    37180 <compute_colocated+0xbb0>
   37cc8:	movzx  r9d,WORD PTR [r10+0x2]
   37ccd:	movzx  ebx,WORD PTR [r10+0x2]
   37cd2:	sar    r9w,0xf
   37cd7:	xor    ebx,r9d
   37cda:	mov    r10d,ebx
   37cdd:	sub    r10d,r9d
   37ce0:	test   r10w,0xfffe
   37ce6:	setne  r11b
   37cea:	jmp    37180 <compute_colocated+0xbb0>
   37cef:	nop
   37cf0:	movzx  eax,WORD PTR [r10]
   37cf4:	movzx  edi,WORD PTR [r10]
   37cf8:	sar    ax,0xf
   37cfc:	xor    edi,eax
   37cfe:	sub    edi,eax
   37d00:	mov    eax,0x1
   37d05:	test   di,0xfffe
   37d0a:	jne    370e0 <compute_colocated+0xb10>
   37d10:	movzx  eax,WORD PTR [r10+0x2]
   37d15:	movzx  edi,WORD PTR [r10+0x2]
   37d1a:	sar    ax,0xf
   37d1e:	xor    edi,eax
   37d20:	sub    edi,eax
   37d22:	mov    eax,edi
   37d24:	test   ax,0xfffe
   37d28:	setne  al
   37d2b:	jmp    370e0 <compute_colocated+0xb10>
   37d30:	mov    eax,DWORD PTR [rsp+0x68]
   37d34:	test   eax,eax
   37d36:	je     37d68 <compute_colocated+0x1798>
   37d38:	cmp    DWORD PTR [r15],eax
   37d3b:	je     37d68 <compute_colocated+0x1798>
   37d3d:	mov    r11d,DWORD PTR [r15+0x190c]
   37d44:	test   r11d,r11d
   37d47:	je     37d68 <compute_colocated+0x1798>
   37d49:	cmp    eax,0x1
   37d4c:	je     37e5f <compute_colocated+0x188f>
   37d52:	mov    r15,QWORD PTR [r15+0x1988]
   37d59:	mov    QWORD PTR [rsp-0x68],r15
   37d5e:	mov    QWORD PTR [rsp+0x10],r15
   37d63:	jmp    3662e <compute_colocated+0x5e>
   37d68:	mov    QWORD PTR [rsp-0x68],r15
   37d6d:	mov    QWORD PTR [rsp+0x10],r15
   37d72:	jmp    3662e <compute_colocated+0x5e>
   37d77:	mov    rax,QWORD PTR [rsp-0x48]
   37d7c:	mov    eax,DWORD PTR [rax+0x1193c]
   37d82:	mov    DWORD PTR [rsp-0x78],eax
   37d86:	mov    eax,DWORD PTR [rsp-0x8]
   37d8a:	or     eax,DWORD PTR [rsp+0x68]
   37d8e:	jne    36a0f <compute_colocated+0x43f>
   37d94:	mov    eax,DWORD PTR [rsp+0x58]
   37d98:	add    eax,0x3
   37d9b:	mov    DWORD PTR [rsp+0x6c],eax
   37d9f:	mov    rax,QWORD PTR [rsp+0x50]
   37da4:	mov    eax,DWORD PTR [rax+0x484]
   37daa:	test   eax,eax
   37dac:	jne    375f0 <compute_colocated+0x1020>
   37db2:	jmp    3732c <compute_colocated+0xd5c>
   37db7:	nop    WORD PTR [rax+rax*1+0x0]
   37dc0:	mov    ebp,DWORD PTR [rbx+0x1c]
   37dc3:	test   ebp,ebp
   37dc5:	je     37ac1 <compute_colocated+0x14f1>
   37dcb:	mov    rbp,QWORD PTR [r14+0x650]
   37dd2:	mov    rdx,QWORD PTR [rbp+0x0]
   37dd6:	mov    rdx,QWORD PTR [rdx+r11*1]
   37dda:	mov    r12,QWORD PTR [rdx+r8*1]
   37dde:	movzx  r13d,WORD PTR [r12+0x2]
   37de4:	mov    edx,r13d
   37de7:	shr    dx,0xf
   37deb:	add    edx,r13d
   37dee:	sar    dx,1
   37df1:	mov    WORD PTR [r12+0x2],dx
   37df7:	mov    rdx,QWORD PTR [rbp+0x8]
   37dfb:	mov    rdx,QWORD PTR [rdx+r11*1]
   37dff:	mov    r11,QWORD PTR [rdx+r8*1]
   37e03:	movzx  ebp,WORD PTR [r11+0x2]
   37e08:	mov    edx,ebp
   37e0a:	shr    dx,0xf
   37e0e:	add    edx,ebp
   37e10:	sar    dx,1
   37e13:	mov    WORD PTR [r11+0x2],dx
   37e18:	jmp    37ac1 <compute_colocated+0x14f1>
   37e1d:	nop    DWORD PTR [rax]
   37e20:	mov    rax,QWORD PTR [rbp+0x10]
   37e24:	mov    rdi,QWORD PTR [rax+rcx*1]
   37e28:	mov    ecx,DWORD PTR [r13+0x8]
   37e2c:	jmp    37bac <compute_colocated+0x15dc>
   37e31:	mov    edx,DWORD PTR [rsp+0x5c]
   37e35:	test   edx,edx
   37e37:	je     375f0 <compute_colocated+0x1020>
   37e3d:	jmp    37d94 <compute_colocated+0x17c4>
   37e42:	mov    ecx,DWORD PTR [rsp-0x78]
   37e46:	test   ecx,ecx
   37e48:	jne    37c8b <compute_colocated+0x16bb>
   37e4e:	mov    rax,QWORD PTR [rsp-0x48]
   37e53:	mov    r10d,DWORD PTR [rax+0x11ad0]
   37e5a:	jmp    37b24 <compute_colocated+0x1554>
   37e5f:	mov    r15,QWORD PTR [r15+0x1980]
   37e66:	mov    QWORD PTR [rsp-0x68],r15
   37e6b:	mov    QWORD PTR [rsp+0x10],r15
   37e70:	jmp    3662e <compute_colocated+0x5e>
   37e75:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37e7f:	nop

0000000000037e80 <free_top_bot_planes>:
   37e80:	endbr64 
   37e84:	push   rbp
   37e85:	mov    rbp,rsi
   37e88:	call   42d0 <free@plt>
   37e8d:	mov    rdi,rbp
   37e90:	pop    rbp
   37e91:	jmp    42d0 <free@plt>
   37e96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000037ea0 <free_mem2Dpel>:
   37ea0:	endbr64 
   37ea4:	test   rdi,rdi
   37ea7:	je     37ee8 <free_mem2Dpel+0x48>
   37ea9:	push   rbp
   37eaa:	mov    rbp,rdi
   37ead:	mov    rdi,QWORD PTR [rdi]
   37eb0:	test   rdi,rdi
   37eb3:	je     37ec8 <free_mem2Dpel+0x28>
   37eb5:	call   42d0 <free@plt>
   37eba:	mov    rdi,rbp
   37ebd:	pop    rbp
   37ebe:	jmp    42d0 <free@plt>
   37ec3:	nop    DWORD PTR [rax+rax*1+0x0]
   37ec8:	lea    rdi,[rip+0x3da51]        # 75920 <MODTAB+0x700>
   37ecf:	mov    esi,0x64
   37ed4:	call   19180 <error>
   37ed9:	mov    rdi,rbp
   37edc:	pop    rbp
   37edd:	jmp    42d0 <free@plt>
   37ee2:	nop    WORD PTR [rax+rax*1+0x0]
   37ee8:	mov    esi,0x64
   37eed:	lea    rdi,[rip+0x3da2c]        # 75920 <MODTAB+0x700>
   37ef4:	jmp    19180 <error>
   37ef9:	nop    DWORD PTR [rax+0x0]

0000000000037f00 <free_mem3Dpel>:
   37f00:	endbr64 
   37f04:	test   rdi,rdi
   37f07:	je     37f40 <free_mem3Dpel+0x40>
   37f09:	push   r12
   37f0b:	mov    r12,rdi
   37f0e:	push   rbp
   37f0f:	push   rbx
   37f10:	test   esi,esi
   37f12:	jle    37f31 <free_mem3Dpel+0x31>
   37f14:	lea    eax,[rsi-0x1]
   37f17:	mov    rbx,rdi
   37f1a:	lea    rbp,[rdi+rax*8+0x8]
   37f1f:	nop
   37f20:	mov    rdi,QWORD PTR [rbx]
   37f23:	add    rbx,0x8
   37f27:	call   37ea0 <free_mem2Dpel>
   37f2c:	cmp    rbx,rbp
   37f2f:	jne    37f20 <free_mem3Dpel+0x20>
   37f31:	pop    rbx
   37f32:	mov    rdi,r12
   37f35:	pop    rbp
   37f36:	pop    r12
   37f38:	jmp    42d0 <free@plt>
   37f3d:	nop    DWORD PTR [rax]
   37f40:	mov    esi,0x64
   37f45:	lea    rdi,[rip+0x3da04]        # 75950 <MODTAB+0x730>
   37f4c:	jmp    19180 <error>
   37f51:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   37f5c:	nop    DWORD PTR [rax+0x0]

0000000000037f60 <free_mem2D>:
   37f60:	endbr64 
   37f64:	test   rdi,rdi
   37f67:	je     37fa8 <free_mem2D+0x48>
   37f69:	push   rbp
   37f6a:	mov    rbp,rdi
   37f6d:	mov    rdi,QWORD PTR [rdi]
   37f70:	test   rdi,rdi
   37f73:	je     37f88 <free_mem2D+0x28>
   37f75:	call   42d0 <free@plt>
   37f7a:	mov    rdi,rbp
   37f7d:	pop    rbp
   37f7e:	jmp    42d0 <free@plt>
   37f83:	nop    DWORD PTR [rax+rax*1+0x0]
   37f88:	lea    rdi,[rip+0x3d9f1]        # 75980 <MODTAB+0x760>
   37f8f:	mov    esi,0x64
   37f94:	call   19180 <error>
   37f99:	mov    rdi,rbp
   37f9c:	pop    rbp
   37f9d:	jmp    42d0 <free@plt>
   37fa2:	nop    WORD PTR [rax+rax*1+0x0]
   37fa8:	mov    esi,0x64
   37fad:	lea    rdi,[rip+0x3d9cc]        # 75980 <MODTAB+0x760>
   37fb4:	jmp    19180 <error>
   37fb9:	nop    DWORD PTR [rax+0x0]

0000000000037fc0 <free_mem2Dint>:
   37fc0:	endbr64 
   37fc4:	test   rdi,rdi
   37fc7:	je     38008 <free_mem2Dint+0x48>
   37fc9:	push   rbp
   37fca:	mov    rbp,rdi
   37fcd:	mov    rdi,QWORD PTR [rdi]
   37fd0:	test   rdi,rdi
   37fd3:	je     37fe8 <free_mem2Dint+0x28>
   37fd5:	call   42d0 <free@plt>
   37fda:	mov    rdi,rbp
   37fdd:	pop    rbp
   37fde:	jmp    42d0 <free@plt>
   37fe3:	nop    DWORD PTR [rax+rax*1+0x0]
   37fe8:	lea    rdi,[rip+0x3d9c1]        # 759b0 <MODTAB+0x790>
   37fef:	mov    esi,0x64
   37ff4:	call   19180 <error>
   37ff9:	mov    rdi,rbp
   37ffc:	pop    rbp
   37ffd:	jmp    42d0 <free@plt>
   38002:	nop    WORD PTR [rax+rax*1+0x0]
   38008:	mov    esi,0x64
   3800d:	lea    rdi,[rip+0x3d99c]        # 759b0 <MODTAB+0x790>
   38014:	jmp    19180 <error>
   38019:	nop    DWORD PTR [rax+0x0]

0000000000038020 <free_mem2Dint64>:
   38020:	endbr64 
   38024:	test   rdi,rdi
   38027:	je     38068 <free_mem2Dint64+0x48>
   38029:	push   rbp
   3802a:	mov    rbp,rdi
   3802d:	mov    rdi,QWORD PTR [rdi]
   38030:	test   rdi,rdi
   38033:	je     38048 <free_mem2Dint64+0x28>
   38035:	call   42d0 <free@plt>
   3803a:	mov    rdi,rbp
   3803d:	pop    rbp
   3803e:	jmp    42d0 <free@plt>
   38043:	nop    DWORD PTR [rax+rax*1+0x0]
   38048:	lea    rdi,[rip+0x3d991]        # 759e0 <MODTAB+0x7c0>
   3804f:	mov    esi,0x64
   38054:	call   19180 <error>
   38059:	mov    rdi,rbp
   3805c:	pop    rbp
   3805d:	jmp    42d0 <free@plt>
   38062:	nop    WORD PTR [rax+rax*1+0x0]
   38068:	mov    esi,0x64
   3806d:	lea    rdi,[rip+0x3d96c]        # 759e0 <MODTAB+0x7c0>
   38074:	jmp    19180 <error>
   38079:	nop    DWORD PTR [rax+0x0]

0000000000038080 <free_mem3D>:
   38080:	endbr64 
   38084:	test   rdi,rdi
   38087:	je     380c0 <free_mem3D+0x40>
   38089:	push   r12
   3808b:	mov    r12,rdi
   3808e:	push   rbp
   3808f:	push   rbx
   38090:	test   esi,esi
   38092:	jle    380b1 <free_mem3D+0x31>
   38094:	lea    eax,[rsi-0x1]
   38097:	mov    rbx,rdi
   3809a:	lea    rbp,[rdi+rax*8+0x8]
   3809f:	nop
   380a0:	mov    rdi,QWORD PTR [rbx]
   380a3:	add    rbx,0x8
   380a7:	call   37f60 <free_mem2D>
   380ac:	cmp    rbx,rbp
   380af:	jne    380a0 <free_mem3D+0x20>
   380b1:	pop    rbx
   380b2:	mov    rdi,r12
   380b5:	pop    rbp
   380b6:	pop    r12
   380b8:	jmp    42d0 <free@plt>
   380bd:	nop    DWORD PTR [rax]
   380c0:	mov    esi,0x64
   380c5:	lea    rdi,[rip+0x3d944]        # 75a10 <MODTAB+0x7f0>
   380cc:	jmp    19180 <error>
   380d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   380dc:	nop    DWORD PTR [rax+0x0]

00000000000380e0 <free_mem3Dint>:
   380e0:	endbr64 
   380e4:	test   rdi,rdi
   380e7:	je     38120 <free_mem3Dint+0x40>
   380e9:	push   r12
   380eb:	mov    r12,rdi
   380ee:	push   rbp
   380ef:	push   rbx
   380f0:	test   esi,esi
   380f2:	jle    38111 <free_mem3Dint+0x31>
   380f4:	lea    eax,[rsi-0x1]
   380f7:	mov    rbx,rdi
   380fa:	lea    rbp,[rdi+rax*8+0x8]
   380ff:	nop
   38100:	mov    rdi,QWORD PTR [rbx]
   38103:	add    rbx,0x8
   38107:	call   37fc0 <free_mem2Dint>
   3810c:	cmp    rbx,rbp
   3810f:	jne    38100 <free_mem3Dint+0x20>
   38111:	pop    rbx
   38112:	mov    rdi,r12
   38115:	pop    rbp
   38116:	pop    r12
   38118:	jmp    42d0 <free@plt>
   3811d:	nop    DWORD PTR [rax]
   38120:	mov    esi,0x64
   38125:	lea    rdi,[rip+0x3d914]        # 75a40 <MODTAB+0x820>
   3812c:	jmp    19180 <error>
   38131:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3813c:	nop    DWORD PTR [rax+0x0]

0000000000038140 <free_mem3Dint64>:
   38140:	endbr64 
   38144:	test   rdi,rdi
   38147:	je     38180 <free_mem3Dint64+0x40>
   38149:	push   r12
   3814b:	mov    r12,rdi
   3814e:	push   rbp
   3814f:	push   rbx
   38150:	test   esi,esi
   38152:	jle    38171 <free_mem3Dint64+0x31>
   38154:	lea    eax,[rsi-0x1]
   38157:	mov    rbx,rdi
   3815a:	lea    rbp,[rdi+rax*8+0x8]
   3815f:	nop
   38160:	mov    rdi,QWORD PTR [rbx]
   38163:	add    rbx,0x8
   38167:	call   38020 <free_mem2Dint64>
   3816c:	cmp    rbx,rbp
   3816f:	jne    38160 <free_mem3Dint64+0x20>
   38171:	pop    rbx
   38172:	mov    rdi,r12
   38175:	pop    rbp
   38176:	pop    r12
   38178:	jmp    42d0 <free@plt>
   3817d:	nop    DWORD PTR [rax]
   38180:	mov    esi,0x64
   38185:	lea    rdi,[rip+0x3d8e4]        # 75a70 <MODTAB+0x850>
   3818c:	jmp    19180 <error>
   38191:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3819c:	nop    DWORD PTR [rax+0x0]

00000000000381a0 <free_mem4Dint>:
   381a0:	endbr64 
   381a4:	test   rdi,rdi
   381a7:	je     381f8 <free_mem4Dint+0x58>
   381a9:	push   r13
   381ab:	mov    r13,rdi
   381ae:	push   r12
   381b0:	push   rbp
   381b1:	push   rbx
   381b2:	sub    rsp,0x8
   381b6:	test   esi,esi
   381b8:	jle    381e3 <free_mem4Dint+0x43>
   381ba:	lea    eax,[rsi-0x1]
   381bd:	mov    ebp,edx
   381bf:	mov    rbx,rdi
   381c2:	lea    r12,[rdi+rax*8+0x8]
   381c7:	nop    WORD PTR [rax+rax*1+0x0]
   381d0:	mov    rdi,QWORD PTR [rbx]
   381d3:	mov    esi,ebp
   381d5:	add    rbx,0x8
   381d9:	call   380e0 <free_mem3Dint>
   381de:	cmp    rbx,r12
   381e1:	jne    381d0 <free_mem4Dint+0x30>
   381e3:	add    rsp,0x8
   381e7:	mov    rdi,r13
   381ea:	pop    rbx
   381eb:	pop    rbp
   381ec:	pop    r12
   381ee:	pop    r13
   381f0:	jmp    42d0 <free@plt>
   381f5:	nop    DWORD PTR [rax]
   381f8:	mov    esi,0x64
   381fd:	lea    rdi,[rip+0x3d89c]        # 75aa0 <MODTAB+0x880>
   38204:	jmp    19180 <error>
   38209:	nop    DWORD PTR [rax+0x0]

0000000000038210 <no_mem_exit>:
   38210:	endbr64 
   38214:	sub    rsp,0x8
   38218:	mov    r9,rdi
   3821b:	mov    esi,0x12c
   38220:	xor    eax,eax
   38222:	lea    rdi,[rip+0x7cd77]        # b4fa0 <errortext>
   38229:	mov    ecx,0x12c
   3822e:	mov    edx,0x1
   38233:	lea    r8,[rip+0x3d974]        # 75bae <MODTAB+0x98e>
   3823a:	call   42c0 <__snprintf_chk@plt>
   3823f:	mov    esi,0x64
   38244:	lea    rdi,[rip+0x7cd55]        # b4fa0 <errortext>
   3824b:	add    rsp,0x8
   3824f:	jmp    19180 <error>
   38254:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3825f:	nop

0000000000038260 <init_top_bot_planes>:
   38260:	endbr64 
   38264:	push   r15
   38266:	push   r14
   38268:	mov    r14,rcx
   3826b:	push   r13
   3826d:	mov    r13,r8
   38270:	push   r12
   38272:	mov    r12d,esi
   38275:	push   rbp
   38276:	mov    ebp,esi
   38278:	shr    ebp,0x1f
   3827b:	push   rbx
   3827c:	mov    rbx,rdi
   3827f:	add    ebp,esi
   38281:	mov    esi,0x8
   38286:	sar    ebp,1
   38288:	movsxd r15,ebp
   3828b:	sub    rsp,0x8
   3828f:	mov    rdi,r15
   38292:	call   4400 <calloc@plt>
   38297:	mov    QWORD PTR [r14],rax
   3829a:	test   rax,rax
   3829d:	je     38302 <init_top_bot_planes+0xa2>
   3829f:	mov    esi,0x8
   382a4:	mov    rdi,r15
   382a7:	call   4400 <calloc@plt>
   382ac:	mov    QWORD PTR [r13+0x0],rax
   382b0:	test   rax,rax
   382b3:	je     38310 <init_top_bot_planes+0xb0>
   382b5:	cmp    r12d,0x1
   382b9:	jle    382eb <init_top_bot_planes+0x8b>
   382bb:	mov    rsi,QWORD PTR [r14]
   382be:	mov    rcx,QWORD PTR [r13+0x0]
   382c2:	mov    rdi,rbx
   382c5:	xor    eax,eax
   382c7:	nop    WORD PTR [rax+rax*1+0x0]
   382d0:	mov    rdx,QWORD PTR [rdi]
   382d3:	add    rdi,0x10
   382d7:	mov    QWORD PTR [rsi+rax*8],rdx
   382db:	mov    rdx,QWORD PTR [rdi-0x8]
   382df:	mov    QWORD PTR [rcx+rax*8],rdx
   382e3:	add    rax,0x1
   382e7:	cmp    ebp,eax
   382e9:	jg     382d0 <init_top_bot_planes+0x70>
   382eb:	add    rsp,0x8
   382ef:	lea    eax,[r12*8+0x0]
   382f7:	pop    rbx
   382f8:	pop    rbp
   382f9:	pop    r12
   382fb:	pop    r13
   382fd:	pop    r14
   382ff:	pop    r15
   38301:	ret    
   38302:	lea    rdi,[rip+0x3d7c7]        # 75ad0 <MODTAB+0x8b0>
   38309:	call   38210 <no_mem_exit>
   3830e:	jmp    3829f <init_top_bot_planes+0x3f>
   38310:	lea    rdi,[rip+0x3d7e1]        # 75af8 <MODTAB+0x8d8>
   38317:	call   38210 <no_mem_exit>
   3831c:	jmp    382b5 <init_top_bot_planes+0x55>
   3831e:	xchg   ax,ax

0000000000038320 <get_mem2Dpel>:
   38320:	endbr64 
   38324:	push   r14
   38326:	push   r13
   38328:	mov    r13,rdi
   3832b:	movsxd rdi,esi
   3832e:	mov    esi,0x8
   38333:	push   r12
   38335:	push   rbp
   38336:	mov    rbp,rdi
   38339:	push   rbx
   3833a:	mov    ebx,edx
   3833c:	call   4400 <calloc@plt>
   38341:	mov    QWORD PTR [r13+0x0],rax
   38345:	test   rax,rax
   38348:	je     383b3 <get_mem2Dpel+0x93>
   3834a:	mov    r12,rax
   3834d:	mov    r14d,ebp
   38350:	mov    esi,0x2
   38355:	imul   r14d,ebx
   38359:	movsxd rdi,r14d
   3835c:	call   4400 <calloc@plt>
   38361:	mov    QWORD PTR [r12],rax
   38365:	test   rax,rax
   38368:	je     383c5 <get_mem2Dpel+0xa5>
   3836a:	cmp    ebp,0x1
   3836d:	jle    383a6 <get_mem2Dpel+0x86>
   3836f:	mov    rdx,QWORD PTR [r13+0x0]
   38373:	movsxd rsi,ebx
   38376:	lea    ecx,[rbp-0x2]
   38379:	add    rsi,rsi
   3837c:	lea    rax,[rdx+0x8]
   38380:	lea    rdi,[rax+rcx*8]
   38384:	jmp    38394 <get_mem2Dpel+0x74>
   38386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38390:	add    rax,0x8
   38394:	mov    rcx,QWORD PTR [rdx]
   38397:	add    rcx,rsi
   3839a:	mov    QWORD PTR [rdx+0x8],rcx
   3839e:	mov    rdx,rax
   383a1:	cmp    rax,rdi
   383a4:	jne    38390 <get_mem2Dpel+0x70>
   383a6:	pop    rbx
   383a7:	lea    eax,[r14+r14*1]
   383ab:	pop    rbp
   383ac:	pop    r12
   383ae:	pop    r13
   383b0:	pop    r14
   383b2:	ret    
   383b3:	lea    rdi,[rip+0x3d812]        # 75bcc <MODTAB+0x9ac>
   383ba:	call   38210 <no_mem_exit>
   383bf:	mov    r12,QWORD PTR [r13+0x0]
   383c3:	jmp    3834d <get_mem2Dpel+0x2d>
   383c5:	lea    rdi,[rip+0x3d800]        # 75bcc <MODTAB+0x9ac>
   383cc:	call   38210 <no_mem_exit>
   383d1:	jmp    3836a <get_mem2Dpel+0x4a>
   383d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   383de:	xchg   ax,ax

00000000000383e0 <get_mem3Dpel>:
   383e0:	endbr64 
   383e4:	push   r15
   383e6:	push   r14
   383e8:	mov    r14,rdi
   383eb:	movsxd rdi,esi
   383ee:	mov    esi,0x8
   383f3:	push   r13
   383f5:	mov    r13d,edx
   383f8:	push   r12
   383fa:	mov    r12d,ecx
   383fd:	push   rbp
   383fe:	mov    rbp,rdi
   38401:	push   rbx
   38402:	sub    rsp,0x8
   38406:	call   4400 <calloc@plt>
   3840b:	mov    QWORD PTR [r14],rax
   3840e:	test   rax,rax
   38411:	je     3845f <get_mem3Dpel+0x7f>
   38413:	test   ebp,ebp
   38415:	jle    38442 <get_mem3Dpel+0x62>
   38417:	lea    eax,[rbp-0x1]
   3841a:	xor    ebx,ebx
   3841c:	lea    r15,[rax*8+0x8]
   38424:	nop    DWORD PTR [rax+0x0]
   38428:	mov    rdi,QWORD PTR [r14]
   3842b:	mov    edx,r12d
   3842e:	mov    esi,r13d
   38431:	add    rdi,rbx
   38434:	add    rbx,0x8
   38438:	call   38320 <get_mem2Dpel>
   3843d:	cmp    r15,rbx
   38440:	jne    38428 <get_mem3Dpel+0x48>
   38442:	mov    eax,ebp
   38444:	add    rsp,0x8
   38448:	imul   eax,r13d
   3844c:	pop    rbx
   3844d:	pop    rbp
   3844e:	imul   r12d,eax
   38452:	lea    eax,[r12+r12*1]
   38456:	pop    r12
   38458:	pop    r13
   3845a:	pop    r14
   3845c:	pop    r15
   3845e:	ret    
   3845f:	lea    rdi,[rip+0x3d77c]        # 75be2 <MODTAB+0x9c2>
   38466:	call   38210 <no_mem_exit>
   3846b:	jmp    38413 <get_mem3Dpel+0x33>
   3846d:	nop    DWORD PTR [rax]

0000000000038470 <get_mem2D>:
   38470:	endbr64 
   38474:	push   r14
   38476:	push   r13
   38478:	mov    r13,rdi
   3847b:	movsxd rdi,esi
   3847e:	mov    esi,0x8
   38483:	push   r12
   38485:	push   rbp
   38486:	mov    rbp,rdi
   38489:	push   rbx
   3848a:	mov    ebx,edx
   3848c:	call   4400 <calloc@plt>
   38491:	mov    QWORD PTR [r13+0x0],rax
   38495:	test   rax,rax
   38498:	je     384fa <get_mem2D+0x8a>
   3849a:	mov    r12,rax
   3849d:	mov    r14d,ebp
   384a0:	mov    esi,0x1
   384a5:	imul   r14d,ebx
   384a9:	movsxd rdi,r14d
   384ac:	call   4400 <calloc@plt>
   384b1:	mov    QWORD PTR [r12],rax
   384b5:	test   rax,rax
   384b8:	je     3850c <get_mem2D+0x9c>
   384ba:	cmp    ebp,0x1
   384bd:	jle    384ee <get_mem2D+0x7e>
   384bf:	mov    rdx,QWORD PTR [r13+0x0]
   384c3:	lea    ecx,[rbp-0x2]
   384c6:	movsxd rsi,ebx
   384c9:	lea    rax,[rdx+0x8]
   384cd:	lea    rdi,[rax+rcx*8]
   384d1:	jmp    384dc <get_mem2D+0x6c>
   384d3:	nop    DWORD PTR [rax+rax*1+0x0]
   384d8:	add    rax,0x8
   384dc:	mov    rcx,QWORD PTR [rdx]
   384df:	add    rcx,rsi
   384e2:	mov    QWORD PTR [rdx+0x8],rcx
   384e6:	mov    rdx,rax
   384e9:	cmp    rax,rdi
   384ec:	jne    384d8 <get_mem2D+0x68>
   384ee:	pop    rbx
   384ef:	mov    eax,r14d
   384f2:	pop    rbp
   384f3:	pop    r12
   384f5:	pop    r13
   384f7:	pop    r14
   384f9:	ret    
   384fa:	lea    rdi,[rip+0x3d6f7]        # 75bf8 <MODTAB+0x9d8>
   38501:	call   38210 <no_mem_exit>
   38506:	mov    r12,QWORD PTR [r13+0x0]
   3850a:	jmp    3849d <get_mem2D+0x2d>
   3850c:	lea    rdi,[rip+0x3d6e5]        # 75bf8 <MODTAB+0x9d8>
   38513:	call   38210 <no_mem_exit>
   38518:	jmp    384ba <get_mem2D+0x4a>
   3851a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000038520 <get_mem2Dint>:
   38520:	endbr64 
   38524:	push   r14
   38526:	push   r13
   38528:	mov    r13,rdi
   3852b:	movsxd rdi,esi
   3852e:	mov    esi,0x8
   38533:	push   r12
   38535:	push   rbp
   38536:	mov    rbp,rdi
   38539:	push   rbx
   3853a:	mov    ebx,edx
   3853c:	call   4400 <calloc@plt>
   38541:	mov    QWORD PTR [r13+0x0],rax
   38545:	test   rax,rax
   38548:	je     385b7 <get_mem2Dint+0x97>
   3854a:	mov    r12,rax
   3854d:	mov    r14d,ebp
   38550:	mov    esi,0x4
   38555:	imul   r14d,ebx
   38559:	movsxd rdi,r14d
   3855c:	call   4400 <calloc@plt>
   38561:	mov    QWORD PTR [r12],rax
   38565:	test   rax,rax
   38568:	je     385c9 <get_mem2Dint+0xa9>
   3856a:	cmp    ebp,0x1
   3856d:	jle    385a6 <get_mem2Dint+0x86>
   3856f:	mov    rdx,QWORD PTR [r13+0x0]
   38573:	movsxd rsi,ebx
   38576:	lea    ecx,[rbp-0x2]
   38579:	shl    rsi,0x2
   3857d:	lea    rax,[rdx+0x8]
   38581:	lea    rdi,[rax+rcx*8]
   38585:	jmp    38594 <get_mem2Dint+0x74>
   38587:	nop    WORD PTR [rax+rax*1+0x0]
   38590:	add    rax,0x8
   38594:	mov    rcx,QWORD PTR [rdx]
   38597:	add    rcx,rsi
   3859a:	mov    QWORD PTR [rdx+0x8],rcx
   3859e:	mov    rdx,rax
   385a1:	cmp    rax,rdi
   385a4:	jne    38590 <get_mem2Dint+0x70>
   385a6:	pop    rbx
   385a7:	lea    eax,[r14*4+0x0]
   385af:	pop    rbp
   385b0:	pop    r12
   385b2:	pop    r13
   385b4:	pop    r14
   385b6:	ret    
   385b7:	lea    rdi,[rip+0x3d64d]        # 75c0b <MODTAB+0x9eb>
   385be:	call   38210 <no_mem_exit>
   385c3:	mov    r12,QWORD PTR [r13+0x0]
   385c7:	jmp    3854d <get_mem2Dint+0x2d>
   385c9:	lea    rdi,[rip+0x3d63b]        # 75c0b <MODTAB+0x9eb>
   385d0:	call   38210 <no_mem_exit>
   385d5:	jmp    3856a <get_mem2Dint+0x4a>
   385d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000385e0 <get_mem2Dint64>:
   385e0:	endbr64 
   385e4:	push   r14
   385e6:	push   r13
   385e8:	mov    r13,rdi
   385eb:	movsxd rdi,esi
   385ee:	mov    esi,0x8
   385f3:	push   r12
   385f5:	push   rbp
   385f6:	mov    rbp,rdi
   385f9:	push   rbx
   385fa:	mov    ebx,edx
   385fc:	call   4400 <calloc@plt>
   38601:	mov    QWORD PTR [r13+0x0],rax
   38605:	test   rax,rax
   38608:	je     38677 <get_mem2Dint64+0x97>
   3860a:	mov    r12,rax
   3860d:	mov    r14d,ebp
   38610:	mov    esi,0x8
   38615:	imul   r14d,ebx
   38619:	movsxd rdi,r14d
   3861c:	call   4400 <calloc@plt>
   38621:	mov    QWORD PTR [r12],rax
   38625:	test   rax,rax
   38628:	je     38689 <get_mem2Dint64+0xa9>
   3862a:	cmp    ebp,0x1
   3862d:	jle    38666 <get_mem2Dint64+0x86>
   3862f:	mov    rdx,QWORD PTR [r13+0x0]
   38633:	movsxd rsi,ebx
   38636:	lea    ecx,[rbp-0x2]
   38639:	shl    rsi,0x3
   3863d:	lea    rax,[rdx+0x8]
   38641:	lea    rdi,[rax+rcx*8]
   38645:	jmp    38654 <get_mem2Dint64+0x74>
   38647:	nop    WORD PTR [rax+rax*1+0x0]
   38650:	add    rax,0x8
   38654:	mov    rcx,QWORD PTR [rdx]
   38657:	add    rcx,rsi
   3865a:	mov    QWORD PTR [rdx+0x8],rcx
   3865e:	mov    rdx,rax
   38661:	cmp    rax,rdi
   38664:	jne    38650 <get_mem2Dint64+0x70>
   38666:	pop    rbx
   38667:	lea    eax,[r14*8+0x0]
   3866f:	pop    rbp
   38670:	pop    r12
   38672:	pop    r13
   38674:	pop    r14
   38676:	ret    
   38677:	lea    rdi,[rip+0x3d5a3]        # 75c21 <MODTAB+0xa01>
   3867e:	call   38210 <no_mem_exit>
   38683:	mov    r12,QWORD PTR [r13+0x0]
   38687:	jmp    3860d <get_mem2Dint64+0x2d>
   38689:	lea    rdi,[rip+0x3d591]        # 75c21 <MODTAB+0xa01>
   38690:	call   38210 <no_mem_exit>
   38695:	jmp    3862a <get_mem2Dint64+0x4a>
   38697:	nop    WORD PTR [rax+rax*1+0x0]

00000000000386a0 <get_mem3D>:
   386a0:	endbr64 
   386a4:	push   r15
   386a6:	push   r14
   386a8:	push   r13
   386aa:	mov    r13,rdi
   386ad:	movsxd rdi,esi
   386b0:	mov    esi,0x8
   386b5:	push   r12
   386b7:	mov    r14,rdi
   386ba:	mov    r12d,edx
   386bd:	push   rbp
   386be:	mov    ebp,ecx
   386c0:	push   rbx
   386c1:	sub    rsp,0x8
   386c5:	call   4400 <calloc@plt>
   386ca:	mov    QWORD PTR [r13+0x0],rax
   386ce:	test   rax,rax
   386d1:	je     38723 <get_mem3D+0x83>
   386d3:	test   r14d,r14d
   386d6:	jle    3870a <get_mem3D+0x6a>
   386d8:	lea    eax,[r14-0x1]
   386dc:	xor    ebx,ebx
   386de:	lea    r15,[rax*8+0x8]
   386e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   386f0:	mov    rdi,QWORD PTR [r13+0x0]
   386f4:	mov    edx,ebp
   386f6:	mov    esi,r12d
   386f9:	add    rdi,rbx
   386fc:	add    rbx,0x8
   38700:	call   38470 <get_mem2D>
   38705:	cmp    r15,rbx
   38708:	jne    386f0 <get_mem3D+0x50>
   3870a:	imul   r12d,r14d
   3870e:	add    rsp,0x8
   38712:	pop    rbx
   38713:	mov    eax,r12d
   38716:	imul   eax,ebp
   38719:	pop    rbp
   3871a:	pop    r12
   3871c:	pop    r13
   3871e:	pop    r14
   38720:	pop    r15
   38722:	ret    
   38723:	lea    rdi,[rip+0x3d50f]        # 75c39 <MODTAB+0xa19>
   3872a:	call   38210 <no_mem_exit>
   3872f:	jmp    386d3 <get_mem3D+0x33>
   38731:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3873c:	nop    DWORD PTR [rax+0x0]

0000000000038740 <get_mem3Dint>:
   38740:	endbr64 
   38744:	push   r15
   38746:	push   r14
   38748:	mov    r14,rdi
   3874b:	movsxd rdi,esi
   3874e:	mov    esi,0x8
   38753:	push   r13
   38755:	mov    r13d,edx
   38758:	push   r12
   3875a:	mov    r12d,ecx
   3875d:	push   rbp
   3875e:	mov    rbp,rdi
   38761:	push   rbx
   38762:	sub    rsp,0x8
   38766:	call   4400 <calloc@plt>
   3876b:	mov    QWORD PTR [r14],rax
   3876e:	test   rax,rax
   38771:	je     387c3 <get_mem3Dint+0x83>
   38773:	test   ebp,ebp
   38775:	jle    387a2 <get_mem3Dint+0x62>
   38777:	lea    eax,[rbp-0x1]
   3877a:	xor    ebx,ebx
   3877c:	lea    r15,[rax*8+0x8]
   38784:	nop    DWORD PTR [rax+0x0]
   38788:	mov    rdi,QWORD PTR [r14]
   3878b:	mov    edx,r12d
   3878e:	mov    esi,r13d
   38791:	add    rdi,rbx
   38794:	add    rbx,0x8
   38798:	call   38520 <get_mem2Dint>
   3879d:	cmp    r15,rbx
   387a0:	jne    38788 <get_mem3Dint+0x48>
   387a2:	mov    eax,ebp
   387a4:	add    rsp,0x8
   387a8:	imul   eax,r13d
   387ac:	pop    rbx
   387ad:	pop    rbp
   387ae:	imul   r12d,eax
   387b2:	lea    eax,[r12*4+0x0]
   387ba:	pop    r12
   387bc:	pop    r13
   387be:	pop    r14
   387c0:	pop    r15
   387c2:	ret    
   387c3:	lea    rdi,[rip+0x3d482]        # 75c4c <MODTAB+0xa2c>
   387ca:	call   38210 <no_mem_exit>
   387cf:	jmp    38773 <get_mem3Dint+0x33>
   387d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   387dc:	nop    DWORD PTR [rax+0x0]

00000000000387e0 <get_mem3Dint64>:
   387e0:	endbr64 
   387e4:	push   r15
   387e6:	push   r14
   387e8:	mov    r14,rdi
   387eb:	movsxd rdi,esi
   387ee:	mov    esi,0x8
   387f3:	push   r13
   387f5:	mov    r13d,edx
   387f8:	push   r12
   387fa:	mov    r12d,ecx
   387fd:	push   rbp
   387fe:	mov    rbp,rdi
   38801:	push   rbx
   38802:	sub    rsp,0x8
   38806:	call   4400 <calloc@plt>
   3880b:	mov    QWORD PTR [r14],rax
   3880e:	test   rax,rax
   38811:	je     38863 <get_mem3Dint64+0x83>
   38813:	test   ebp,ebp
   38815:	jle    38842 <get_mem3Dint64+0x62>
   38817:	lea    eax,[rbp-0x1]
   3881a:	xor    ebx,ebx
   3881c:	lea    r15,[rax*8+0x8]
   38824:	nop    DWORD PTR [rax+0x0]
   38828:	mov    rdi,QWORD PTR [r14]
   3882b:	mov    edx,r12d
   3882e:	mov    esi,r13d
   38831:	add    rdi,rbx
   38834:	add    rbx,0x8
   38838:	call   385e0 <get_mem2Dint64>
   3883d:	cmp    r15,rbx
   38840:	jne    38828 <get_mem3Dint64+0x48>
   38842:	mov    eax,ebp
   38844:	add    rsp,0x8
   38848:	imul   eax,r13d
   3884c:	pop    rbx
   3884d:	pop    rbp
   3884e:	imul   r12d,eax
   38852:	lea    eax,[r12*8+0x0]
   3885a:	pop    r12
   3885c:	pop    r13
   3885e:	pop    r14
   38860:	pop    r15
   38862:	ret    
   38863:	lea    rdi,[rip+0x3d3f8]        # 75c62 <MODTAB+0xa42>
   3886a:	call   38210 <no_mem_exit>
   3886f:	jmp    38813 <get_mem3Dint64+0x33>
   38871:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3887c:	nop    DWORD PTR [rax+0x0]

0000000000038880 <get_mem4Dint>:
   38880:	endbr64 
   38884:	push   r15
   38886:	push   r14
   38888:	mov    r14,rdi
   3888b:	movsxd rdi,esi
   3888e:	push   r13
   38890:	mov    r13d,edx
   38893:	push   r12
   38895:	mov    r12d,ecx
   38898:	push   rbp
   38899:	mov    ebp,r8d
   3889c:	push   rbx
   3889d:	sub    rsp,0x18
   388a1:	mov    DWORD PTR [rsp+0xc],esi
   388a5:	mov    esi,0x8
   388aa:	call   4400 <calloc@plt>
   388af:	mov    QWORD PTR [r14],rax
   388b2:	test   rax,rax
   388b5:	je     38911 <get_mem4Dint+0x91>
   388b7:	mov    eax,DWORD PTR [rsp+0xc]
   388bb:	test   eax,eax
   388bd:	jle    388ec <get_mem4Dint+0x6c>
   388bf:	sub    eax,0x1
   388c2:	xor    ebx,ebx
   388c4:	lea    r15,[rax*8+0x8]
   388cc:	nop    DWORD PTR [rax+0x0]
   388d0:	mov    rdi,QWORD PTR [r14]
   388d3:	mov    ecx,ebp
   388d5:	mov    edx,r12d
   388d8:	mov    esi,r13d
   388db:	add    rdi,rbx
   388de:	add    rbx,0x8
   388e2:	call   38740 <get_mem3Dint>
   388e7:	cmp    r15,rbx
   388ea:	jne    388d0 <get_mem4Dint+0x50>
   388ec:	mov    eax,DWORD PTR [rsp+0xc]
   388f0:	add    rsp,0x18
   388f4:	pop    rbx
   388f5:	imul   eax,r13d
   388f9:	imul   eax,r12d
   388fd:	imul   ebp,eax
   38900:	lea    eax,[rbp*4+0x0]
   38907:	pop    rbp
   38908:	pop    r12
   3890a:	pop    r13
   3890c:	pop    r14
   3890e:	pop    r15
   38910:	ret    
   38911:	lea    rdi,[rip+0x3d362]        # 75c7a <MODTAB+0xa5a>
   38918:	call   38210 <no_mem_exit>
   3891d:	jmp    388b7 <get_mem4Dint+0x37>
   3891f:	nop

0000000000038920 <get_mem2Dshort>:
   38920:	endbr64 
   38924:	push   r14
   38926:	push   r13
   38928:	mov    r13,rdi
   3892b:	movsxd rdi,esi
   3892e:	mov    esi,0x8
   38933:	push   r12
   38935:	push   rbp
   38936:	mov    rbp,rdi
   38939:	push   rbx
   3893a:	mov    ebx,edx
   3893c:	call   4400 <calloc@plt>
   38941:	mov    QWORD PTR [r13+0x0],rax
   38945:	test   rax,rax
   38948:	je     389b3 <get_mem2Dshort+0x93>
   3894a:	mov    r12,rax
   3894d:	mov    r14d,ebp
   38950:	mov    esi,0x2
   38955:	imul   r14d,ebx
   38959:	movsxd rdi,r14d
   3895c:	call   4400 <calloc@plt>
   38961:	mov    QWORD PTR [r12],rax
   38965:	test   rax,rax
   38968:	je     389c5 <get_mem2Dshort+0xa5>
   3896a:	cmp    ebp,0x1
   3896d:	jle    389a6 <get_mem2Dshort+0x86>
   3896f:	mov    rdx,QWORD PTR [r13+0x0]
   38973:	movsxd rsi,ebx
   38976:	lea    ecx,[rbp-0x2]
   38979:	add    rsi,rsi
   3897c:	lea    rax,[rdx+0x8]
   38980:	lea    rdi,[rax+rcx*8]
   38984:	jmp    38994 <get_mem2Dshort+0x74>
   38986:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38990:	add    rax,0x8
   38994:	mov    rcx,QWORD PTR [rdx]
   38997:	add    rcx,rsi
   3899a:	mov    QWORD PTR [rdx+0x8],rcx
   3899e:	mov    rdx,rax
   389a1:	cmp    rax,rdi
   389a4:	jne    38990 <get_mem2Dshort+0x70>
   389a6:	pop    rbx
   389a7:	lea    eax,[r14+r14*1]
   389ab:	pop    rbp
   389ac:	pop    r12
   389ae:	pop    r13
   389b0:	pop    r14
   389b2:	ret    
   389b3:	lea    rdi,[rip+0x3d2d6]        # 75c90 <MODTAB+0xa70>
   389ba:	call   38210 <no_mem_exit>
   389bf:	mov    r12,QWORD PTR [r13+0x0]
   389c3:	jmp    3894d <get_mem2Dshort+0x2d>
   389c5:	lea    rdi,[rip+0x3d2c4]        # 75c90 <MODTAB+0xa70>
   389cc:	call   38210 <no_mem_exit>
   389d1:	jmp    3896a <get_mem2Dshort+0x4a>
   389d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   389de:	xchg   ax,ax

00000000000389e0 <get_mem3Dshort>:
   389e0:	endbr64 
   389e4:	push   r15
   389e6:	push   r14
   389e8:	mov    r14,rdi
   389eb:	movsxd rdi,esi
   389ee:	mov    esi,0x8
   389f3:	push   r13
   389f5:	mov    r13d,edx
   389f8:	push   r12
   389fa:	mov    r12d,ecx
   389fd:	push   rbp
   389fe:	mov    rbp,rdi
   38a01:	push   rbx
   38a02:	sub    rsp,0x8
   38a06:	call   4400 <calloc@plt>
   38a0b:	mov    QWORD PTR [r14],rax
   38a0e:	test   rax,rax
   38a11:	je     38a5f <get_mem3Dshort+0x7f>
   38a13:	test   ebp,ebp
   38a15:	jle    38a42 <get_mem3Dshort+0x62>
   38a17:	lea    eax,[rbp-0x1]
   38a1a:	xor    ebx,ebx
   38a1c:	lea    r15,[rax*8+0x8]
   38a24:	nop    DWORD PTR [rax+0x0]
   38a28:	mov    rdi,QWORD PTR [r14]
   38a2b:	mov    edx,r12d
   38a2e:	mov    esi,r13d
   38a31:	add    rdi,rbx
   38a34:	add    rbx,0x8
   38a38:	call   38920 <get_mem2Dshort>
   38a3d:	cmp    r15,rbx
   38a40:	jne    38a28 <get_mem3Dshort+0x48>
   38a42:	mov    eax,ebp
   38a44:	add    rsp,0x8
   38a48:	imul   eax,r13d
   38a4c:	pop    rbx
   38a4d:	pop    rbp
   38a4e:	imul   r12d,eax
   38a52:	lea    eax,[r12+r12*1]
   38a56:	pop    r12
   38a58:	pop    r13
   38a5a:	pop    r14
   38a5c:	pop    r15
   38a5e:	ret    
   38a5f:	lea    rdi,[rip+0x3d242]        # 75ca8 <MODTAB+0xa88>
   38a66:	call   38210 <no_mem_exit>
   38a6b:	jmp    38a13 <get_mem3Dshort+0x33>
   38a6d:	nop    DWORD PTR [rax]

0000000000038a70 <get_mem4Dshort>:
   38a70:	endbr64 
   38a74:	push   r15
   38a76:	push   r14
   38a78:	mov    r14,rdi
   38a7b:	movsxd rdi,esi
   38a7e:	push   r13
   38a80:	mov    r13d,edx
   38a83:	push   r12
   38a85:	mov    r12d,ecx
   38a88:	push   rbp
   38a89:	mov    ebp,r8d
   38a8c:	push   rbx
   38a8d:	sub    rsp,0x18
   38a91:	mov    DWORD PTR [rsp+0xc],esi
   38a95:	mov    esi,0x8
   38a9a:	call   4400 <calloc@plt>
   38a9f:	mov    QWORD PTR [r14],rax
   38aa2:	test   rax,rax
   38aa5:	je     38afe <get_mem4Dshort+0x8e>
   38aa7:	mov    eax,DWORD PTR [rsp+0xc]
   38aab:	test   eax,eax
   38aad:	jle    38adc <get_mem4Dshort+0x6c>
   38aaf:	sub    eax,0x1
   38ab2:	xor    ebx,ebx
   38ab4:	lea    r15,[rax*8+0x8]
   38abc:	nop    DWORD PTR [rax+0x0]
   38ac0:	mov    rdi,QWORD PTR [r14]
   38ac3:	mov    ecx,ebp
   38ac5:	mov    edx,r12d
   38ac8:	mov    esi,r13d
   38acb:	add    rdi,rbx
   38ace:	add    rbx,0x8
   38ad2:	call   389e0 <get_mem3Dshort>
   38ad7:	cmp    r15,rbx
   38ada:	jne    38ac0 <get_mem4Dshort+0x50>
   38adc:	mov    eax,DWORD PTR [rsp+0xc]
   38ae0:	add    rsp,0x18
   38ae4:	pop    rbx
   38ae5:	imul   eax,r13d
   38ae9:	imul   eax,r12d
   38aed:	imul   ebp,eax
   38af0:	lea    eax,[rbp+rbp*1+0x0]
   38af4:	pop    rbp
   38af5:	pop    r12
   38af7:	pop    r13
   38af9:	pop    r14
   38afb:	pop    r15
   38afd:	ret    
   38afe:	lea    rdi,[rip+0x3d1bb]        # 75cc0 <MODTAB+0xaa0>
   38b05:	call   38210 <no_mem_exit>
   38b0a:	jmp    38aa7 <get_mem4Dshort+0x37>
   38b0c:	nop    DWORD PTR [rax+0x0]

0000000000038b10 <free_mem2Dshort>:
   38b10:	endbr64 
   38b14:	test   rdi,rdi
   38b17:	je     38b58 <free_mem2Dshort+0x48>
   38b19:	push   rbp
   38b1a:	mov    rbp,rdi
   38b1d:	mov    rdi,QWORD PTR [rdi]
   38b20:	test   rdi,rdi
   38b23:	je     38b38 <free_mem2Dshort+0x28>
   38b25:	call   42d0 <free@plt>
   38b2a:	mov    rdi,rbp
   38b2d:	pop    rbp
   38b2e:	jmp    42d0 <free@plt>
   38b33:	nop    DWORD PTR [rax+rax*1+0x0]
   38b38:	lea    rdi,[rip+0x3cfe1]        # 75b20 <MODTAB+0x900>
   38b3f:	mov    esi,0x64
   38b44:	call   19180 <error>
   38b49:	mov    rdi,rbp
   38b4c:	pop    rbp
   38b4d:	jmp    42d0 <free@plt>
   38b52:	nop    WORD PTR [rax+rax*1+0x0]
   38b58:	mov    esi,0x64
   38b5d:	lea    rdi,[rip+0x3cfbc]        # 75b20 <MODTAB+0x900>
   38b64:	jmp    19180 <error>
   38b69:	nop    DWORD PTR [rax+0x0]

0000000000038b70 <free_mem3Dshort>:
   38b70:	endbr64 
   38b74:	test   rdi,rdi
   38b77:	je     38bb0 <free_mem3Dshort+0x40>
   38b79:	push   r12
   38b7b:	mov    r12,rdi
   38b7e:	push   rbp
   38b7f:	push   rbx
   38b80:	test   esi,esi
   38b82:	jle    38ba1 <free_mem3Dshort+0x31>
   38b84:	lea    eax,[rsi-0x1]
   38b87:	mov    rbx,rdi
   38b8a:	lea    rbp,[rdi+rax*8+0x8]
   38b8f:	nop
   38b90:	mov    rdi,QWORD PTR [rbx]
   38b93:	add    rbx,0x8
   38b97:	call   38b10 <free_mem2Dshort>
   38b9c:	cmp    rbx,rbp
   38b9f:	jne    38b90 <free_mem3Dshort+0x20>
   38ba1:	pop    rbx
   38ba2:	mov    rdi,r12
   38ba5:	pop    rbp
   38ba6:	pop    r12
   38ba8:	jmp    42d0 <free@plt>
   38bad:	nop    DWORD PTR [rax]
   38bb0:	mov    esi,0x64
   38bb5:	lea    rdi,[rip+0x3cf94]        # 75b50 <MODTAB+0x930>
   38bbc:	jmp    19180 <error>
   38bc1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   38bcc:	nop    DWORD PTR [rax+0x0]

0000000000038bd0 <free_mem4Dshort>:
   38bd0:	endbr64 
   38bd4:	test   rdi,rdi
   38bd7:	je     38c28 <free_mem4Dshort+0x58>
   38bd9:	push   r13
   38bdb:	mov    r13,rdi
   38bde:	push   r12
   38be0:	push   rbp
   38be1:	push   rbx
   38be2:	sub    rsp,0x8
   38be6:	test   esi,esi
   38be8:	jle    38c13 <free_mem4Dshort+0x43>
   38bea:	lea    eax,[rsi-0x1]
   38bed:	mov    ebp,edx
   38bef:	mov    rbx,rdi
   38bf2:	lea    r12,[rdi+rax*8+0x8]
   38bf7:	nop    WORD PTR [rax+rax*1+0x0]
   38c00:	mov    rdi,QWORD PTR [rbx]
   38c03:	mov    esi,ebp
   38c05:	add    rbx,0x8
   38c09:	call   38b70 <free_mem3Dshort>
   38c0e:	cmp    rbx,r12
   38c11:	jne    38c00 <free_mem4Dshort+0x30>
   38c13:	add    rsp,0x8
   38c17:	mov    rdi,r13
   38c1a:	pop    rbx
   38c1b:	pop    rbp
   38c1c:	pop    r12
   38c1e:	pop    r13
   38c20:	jmp    42d0 <free@plt>
   38c25:	nop    DWORD PTR [rax]
   38c28:	mov    esi,0x64
   38c2d:	lea    rdi,[rip+0x3cf4c]        # 75b80 <MODTAB+0x960>
   38c34:	jmp    19180 <error>
   38c39:	nop    DWORD PTR [rax+0x0]

0000000000038c40 <SATD8X8.part.0>:
   38c40:	push   r15
   38c42:	push   r14
   38c44:	push   r13
   38c46:	push   r12
   38c48:	push   rbp
   38c49:	push   rbx
   38c4a:	sub    rsp,0x228
   38c51:	mov    rax,QWORD PTR fs:0x28
   38c5a:	mov    QWORD PTR [rsp+0x218],rax
   38c62:	xor    eax,eax
   38c64:	lea    rax,[rsp+0x110]
   38c6c:	lea    rcx,[rsp+0x10]
   38c71:	mov    QWORD PTR [rsp+0x8],rax
   38c76:	lea    r14,[rsp+0x210]
   38c7e:	mov    rdx,rax
   38c81:	nop    DWORD PTR [rax+0x0]
   38c88:	mov    r13d,DWORD PTR [rdi+0x14]
   38c8c:	mov    r12d,DWORD PTR [rdi+0x18]
   38c90:	add    rdx,0x20
   38c94:	add    rdi,0x20
   38c98:	mov    eax,DWORD PTR [rdi-0x20]
   38c9b:	mov    r15d,DWORD PTR [rdi-0x10]
   38c9f:	add    rcx,0x20
   38ca3:	mov    esi,DWORD PTR [rdi-0x1c]
   38ca6:	mov    r11d,DWORD PTR [rdi-0x18]
   38caa:	mov    r10d,DWORD PTR [rdi-0x14]
   38cae:	mov    ebx,DWORD PTR [rdi-0x4]
   38cb1:	lea    r8d,[rax+r15*1]
   38cb5:	sub    eax,r15d
   38cb8:	lea    ebp,[r11+r12*1]
   38cbc:	lea    r9d,[rsi+r13*1]
   38cc0:	sub    r11d,r12d
   38cc3:	sub    esi,r13d
   38cc6:	add    ebx,r10d
   38cc9:	lea    r12d,[r8+rbp*1]
   38ccd:	sub    r10d,DWORD PTR [rdi-0x4]
   38cd1:	sub    r8d,ebp
   38cd4:	lea    r13d,[r9+rbx*1]
   38cd8:	lea    ebp,[rsi+r10*1]
   38cdc:	sub    r9d,ebx
   38cdf:	sub    esi,r10d
   38ce2:	lea    r10d,[r12+r13*1]
   38ce6:	lea    ebx,[rax+r11*1]
   38cea:	mov    DWORD PTR [rcx-0x18],r8d
   38cee:	sub    eax,r11d
   38cf1:	mov    DWORD PTR [rdx-0x20],r10d
   38cf5:	lea    r10d,[r8+r9*1]
   38cf9:	sub    r8d,r9d
   38cfc:	mov    DWORD PTR [rdx-0x14],r8d
   38d00:	lea    r8d,[rbx+rbp*1]
   38d04:	mov    DWORD PTR [rcx-0x20],r12d
   38d08:	sub    r12d,r13d
   38d0b:	mov    DWORD PTR [rcx-0x10],ebx
   38d0e:	sub    ebx,ebp
   38d10:	mov    DWORD PTR [rcx-0x8],eax
   38d13:	mov    DWORD PTR [rdx-0x10],r8d
   38d17:	lea    r8d,[rax+rsi*1]
   38d1b:	sub    eax,esi
   38d1d:	mov    DWORD PTR [rcx-0x1c],r13d
   38d21:	mov    DWORD PTR [rcx-0x14],r9d
   38d25:	mov    DWORD PTR [rcx-0xc],ebp
   38d28:	mov    DWORD PTR [rcx-0x4],esi
   38d2b:	mov    DWORD PTR [rdx-0x1c],r12d
   38d2f:	mov    DWORD PTR [rdx-0x18],r10d
   38d33:	mov    DWORD PTR [rdx-0xc],ebx
   38d36:	mov    DWORD PTR [rdx-0x8],r8d
   38d3a:	mov    DWORD PTR [rdx-0x4],eax
   38d3d:	cmp    r14,rdx
   38d40:	jne    38c88 <SATD8X8.part.0+0x48>
   38d46:	mov    rax,QWORD PTR [rsp+0x8]
   38d4b:	lea    rdi,[rax+0x20]
   38d4f:	nop
   38d50:	mov    r12d,DWORD PTR [rax+0xc0]
   38d57:	mov    edx,DWORD PTR [rax]
   38d59:	add    rax,0x4
   38d5d:	mov    r8d,DWORD PTR [rax+0xdc]
   38d64:	mov    r14d,DWORD PTR [rax+0x7c]
   38d68:	mov    r9d,DWORD PTR [rax+0x1c]
   38d6c:	mov    r13d,DWORD PTR [rax+0x9c]
   38d73:	mov    ebx,DWORD PTR [rax+0x3c]
   38d76:	mov    r11d,DWORD PTR [rax+0x5c]
   38d7a:	lea    esi,[rdx+r14*1]
   38d7e:	sub    edx,r14d
   38d81:	lea    r10d,[r9+r13*1]
   38d85:	sub    r9d,r13d
   38d88:	lea    ebp,[rbx+r12*1]
   38d8c:	lea    ecx,[r11+r8*1]
   38d90:	sub    ebx,r12d
   38d93:	sub    r11d,r8d
   38d96:	lea    r12d,[r10+rcx*1]
   38d9a:	lea    r8d,[rsi+rbp*1]
   38d9e:	sub    r10d,ecx
   38da1:	sub    esi,ebp
   38da3:	lea    ebp,[r9+r11*1]
   38da7:	sub    r9d,r11d
   38daa:	lea    r11d,[r8+r12*1]
   38dae:	sub    r8d,r12d
   38db1:	lea    ecx,[rdx+rbx*1]
   38db4:	mov    DWORD PTR [rax+0x1c],r8d
   38db8:	lea    r8d,[rsi+r10*1]
   38dbc:	sub    esi,r10d
   38dbf:	sub    edx,ebx
   38dc1:	mov    DWORD PTR [rax+0x5c],esi
   38dc4:	lea    esi,[rcx+rbp*1]
   38dc7:	sub    ecx,ebp
   38dc9:	mov    DWORD PTR [rax+0x9c],ecx
   38dcf:	lea    ecx,[rdx+r9*1]
   38dd3:	sub    edx,r9d
   38dd6:	mov    DWORD PTR [rax-0x4],r11d
   38dda:	mov    DWORD PTR [rax+0x3c],r8d
   38dde:	mov    DWORD PTR [rax+0x7c],esi
   38de1:	mov    DWORD PTR [rax+0xbc],ecx
   38de7:	mov    DWORD PTR [rax+0xdc],edx
   38ded:	cmp    rdi,rax
   38df0:	jne    38d50 <SATD8X8.part.0+0x110>
   38df6:	mov    r8,QWORD PTR [rsp+0x8]
   38dfb:	xor    esi,esi
   38dfd:	add    r8,0x120
   38e04:	nop    DWORD PTR [rax+0x0]
   38e08:	lea    rax,[rdi-0x20]
   38e0c:	nop    DWORD PTR [rax+0x0]
   38e10:	mov    edx,DWORD PTR [rax]
   38e12:	mov    ecx,DWORD PTR [rax]
   38e14:	add    rax,0x4
   38e18:	sar    edx,0x1f
   38e1b:	xor    ecx,edx
   38e1d:	sub    ecx,edx
   38e1f:	add    esi,ecx
   38e21:	cmp    rdi,rax
   38e24:	jne    38e10 <SATD8X8.part.0+0x1d0>
   38e26:	add    rdi,0x20
   38e2a:	cmp    r8,rdi
   38e2d:	jne    38e08 <SATD8X8.part.0+0x1c8>
   38e2f:	lea    eax,[rsi+0x2]
   38e32:	sar    eax,0x2
   38e35:	mov    rbx,QWORD PTR [rsp+0x218]
   38e3d:	xor    rbx,QWORD PTR fs:0x28
   38e46:	jne    38e5a <SATD8X8.part.0+0x21a>
   38e48:	add    rsp,0x228
   38e4f:	pop    rbx
   38e50:	pop    rbp
   38e51:	pop    r12
   38e53:	pop    r13
   38e55:	pop    r14
   38e57:	pop    r15
   38e59:	ret    
   38e5a:	call   4390 <__stack_chk_fail@plt>
   38e5f:	nop

0000000000038e60 <InitializeFastFullIntegerSearch>:
   38e60:	endbr64 
   38e64:	push   r15
   38e66:	mov    edi,0x10
   38e6b:	push   r14
   38e6d:	push   r13
   38e6f:	push   r12
   38e71:	push   rbp
   38e72:	push   rbx
   38e73:	sub    rsp,0x18
   38e77:	mov    rax,QWORD PTR [rip+0x4f73a]        # 885b8 <input>
   38e7e:	mov    eax,DWORD PTR [rax+0x20]
   38e81:	mov    DWORD PTR [rsp+0xc],eax
   38e85:	lea    eax,[rax+rax*1+0x1]
   38e89:	imul   eax,eax
   38e8c:	movsxd rbp,eax
   38e8f:	call   4460 <malloc@plt>
   38e94:	mov    QWORD PTR [rip+0x5018d],rax        # 89028 <BlockSAD>
   38e9b:	test   rax,rax
   38e9e:	je     39374 <InitializeFastFullIntegerSearch+0x514>
   38ea4:	mov    rbx,rax
   38ea7:	shl    rbp,0x2
   38eab:	xor    r13d,r13d
   38eae:	mov    rax,QWORD PTR [rip+0x4f6fb]        # 885b0 <img>
   38eb5:	mov    r12d,DWORD PTR [rax+0x24]
   38eb9:	lea    edi,[r12+0x1]
   38ebe:	movsxd rdi,edi
   38ec1:	shl    rdi,0x3
   38ec5:	call   4460 <malloc@plt>
   38eca:	mov    QWORD PTR [rbx+r13*1],rax
   38ece:	test   rax,rax
   38ed1:	je     39358 <InitializeFastFullIntegerSearch+0x4f8>
   38ed7:	mov    QWORD PTR [rsp],0x0
   38edf:	test   r12d,r12d
   38ee2:	js     38fa9 <InitializeFastFullIntegerSearch+0x149>
   38ee8:	mov    rax,QWORD PTR [rsp]
   38eec:	mov    edi,0x40
   38ef1:	lea    r12,[rax*8+0x0]
   38ef9:	mov    rax,QWORD PTR [rip+0x50128]        # 89028 <BlockSAD>
   38f00:	mov    rbx,QWORD PTR [rax+r13*1]
   38f04:	call   4460 <malloc@plt>
   38f09:	add    rbx,r12
   38f0c:	mov    r15,rax
   38f0f:	mov    QWORD PTR [rbx],rax
   38f12:	test   rax,rax
   38f15:	je     39334 <InitializeFastFullIntegerSearch+0x4d4>
   38f1b:	mov    ebx,0x8
   38f20:	mov    edi,0x80
   38f25:	call   4460 <malloc@plt>
   38f2a:	mov    QWORD PTR [r15+rbx*1],rax
   38f2e:	mov    r14,rax
   38f31:	test   rax,rax
   38f34:	je     39310 <InitializeFastFullIntegerSearch+0x4b0>
   38f3a:	xor    r15d,r15d
   38f3d:	jmp    38f53 <InitializeFastFullIntegerSearch+0xf3>
   38f3f:	nop
   38f40:	mov    rax,QWORD PTR [rip+0x500e1]        # 89028 <BlockSAD>
   38f47:	mov    rax,QWORD PTR [rax+r13*1]
   38f4b:	mov    rax,QWORD PTR [rax+r12*1]
   38f4f:	mov    r14,QWORD PTR [rax+rbx*1]
   38f53:	mov    rdi,rbp
   38f56:	call   4460 <malloc@plt>
   38f5b:	mov    QWORD PTR [r14+r15*1],rax
   38f5f:	test   rax,rax
   38f62:	je     391a9 <InitializeFastFullIntegerSearch+0x349>
   38f68:	add    r15,0x8
   38f6c:	cmp    r15,0x80
   38f73:	jne    38f40 <InitializeFastFullIntegerSearch+0xe0>
   38f75:	add    rbx,0x8
   38f79:	cmp    rbx,0x40
   38f7d:	je     38f90 <InitializeFastFullIntegerSearch+0x130>
   38f7f:	mov    rax,QWORD PTR [rip+0x500a2]        # 89028 <BlockSAD>
   38f86:	mov    rax,QWORD PTR [rax+r13*1]
   38f8a:	mov    r15,QWORD PTR [rax+r12*1]
   38f8e:	jmp    38f20 <InitializeFastFullIntegerSearch+0xc0>
   38f90:	mov    rax,QWORD PTR [rip+0x4f619]        # 885b0 <img>
   38f97:	add    QWORD PTR [rsp],0x1
   38f9c:	mov    rsi,QWORD PTR [rsp]
   38fa0:	cmp    DWORD PTR [rax+0x24],esi
   38fa3:	jge    38ee8 <InitializeFastFullIntegerSearch+0x88>
   38fa9:	add    r13,0x8
   38fad:	cmp    r13,0x10
   38fb1:	je     38fbf <InitializeFastFullIntegerSearch+0x15f>
   38fb3:	mov    rbx,QWORD PTR [rip+0x5006e]        # 89028 <BlockSAD>
   38fba:	jmp    38eae <InitializeFastFullIntegerSearch+0x4e>
   38fbf:	mov    edi,0x10
   38fc4:	call   4460 <malloc@plt>
   38fc9:	mov    QWORD PTR [rip+0x50078],rax        # 89048 <search_setup_done>
   38fd0:	test   rax,rax
   38fd3:	je     392fc <InitializeFastFullIntegerSearch+0x49c>
   38fd9:	mov    edi,0x10
   38fde:	call   4460 <malloc@plt>
   38fe3:	mov    QWORD PTR [rip+0x50056],rax        # 89040 <search_center_x>
   38fea:	test   rax,rax
   38fed:	je     392eb <InitializeFastFullIntegerSearch+0x48b>
   38ff3:	mov    edi,0x10
   38ff8:	call   4460 <malloc@plt>
   38ffd:	mov    QWORD PTR [rip+0x50034],rax        # 89038 <search_center_y>
   39004:	test   rax,rax
   39007:	je     392da <InitializeFastFullIntegerSearch+0x47a>
   3900d:	mov    edi,0x10
   39012:	call   4460 <malloc@plt>
   39017:	mov    QWORD PTR [rip+0x50012],rax        # 89030 <pos_00>
   3901e:	test   rax,rax
   39021:	je     392c9 <InitializeFastFullIntegerSearch+0x469>
   39027:	mov    edi,0x10
   3902c:	call   4460 <malloc@plt>
   39031:	mov    QWORD PTR [rip+0x4ffe8],rax        # 89020 <max_search_range>
   39038:	test   rax,rax
   3903b:	je     392b8 <InitializeFastFullIntegerSearch+0x458>
   39041:	mov    rbx,QWORD PTR [rip+0x4f568]        # 885b0 <img>
   39048:	xor    r13d,r13d
   3904b:	lea    r14,[rip+0x3ccb6]        # 75d08 <MODTAB+0xae8>
   39052:	movsxd r12,DWORD PTR [rbx+0x24]
   39056:	lea    ebp,[r12+0x1]
   3905b:	mov    rdx,QWORD PTR [rip+0x4ffe6]        # 89048 <search_setup_done>
   39062:	movsxd rbp,ebp
   39065:	shl    rbp,0x2
   39069:	add    rdx,r13
   3906c:	mov    rdi,rbp
   3906f:	mov    QWORD PTR [rsp],rdx
   39073:	call   4460 <malloc@plt>
   39078:	mov    rdx,QWORD PTR [rsp]
   3907c:	mov    QWORD PTR [rdx],rax
   3907f:	test   rax,rax
   39082:	je     39294 <InitializeFastFullIntegerSearch+0x434>
   39088:	mov    rdx,QWORD PTR [rip+0x4ffb1]        # 89040 <search_center_x>
   3908f:	mov    rdi,rbp
   39092:	add    rdx,r13
   39095:	mov    QWORD PTR [rsp],rdx
   39099:	call   4460 <malloc@plt>
   3909e:	mov    rdx,QWORD PTR [rsp]
   390a2:	mov    QWORD PTR [rdx],rax
   390a5:	test   rax,rax
   390a8:	je     3926c <InitializeFastFullIntegerSearch+0x40c>
   390ae:	mov    rdx,QWORD PTR [rip+0x4ff83]        # 89038 <search_center_y>
   390b5:	mov    rdi,rbp
   390b8:	add    rdx,r13
   390bb:	mov    QWORD PTR [rsp],rdx
   390bf:	call   4460 <malloc@plt>
   390c4:	mov    rdx,QWORD PTR [rsp]
   390c8:	mov    QWORD PTR [rdx],rax
   390cb:	test   rax,rax
   390ce:	je     39244 <InitializeFastFullIntegerSearch+0x3e4>
   390d4:	mov    rdx,QWORD PTR [rip+0x4ff55]        # 89030 <pos_00>
   390db:	mov    rdi,rbp
   390de:	add    rdx,r13
   390e1:	mov    QWORD PTR [rsp],rdx
   390e5:	call   4460 <malloc@plt>
   390ea:	mov    rdx,QWORD PTR [rsp]
   390ee:	mov    QWORD PTR [rdx],rax
   390f1:	test   rax,rax
   390f4:	je     3921c <InitializeFastFullIntegerSearch+0x3bc>
   390fa:	mov    rdx,QWORD PTR [rip+0x4ff1f]        # 89020 <max_search_range>
   39101:	mov    rdi,rbp
   39104:	add    rdx,r13
   39107:	mov    QWORD PTR [rsp],rdx
   3910b:	call   4460 <malloc@plt>
   39110:	mov    rdx,QWORD PTR [rsp]
   39114:	mov    QWORD PTR [rdx],rax
   39117:	test   rax,rax
   3911a:	je     39200 <InitializeFastFullIntegerSearch+0x3a0>
   39120:	add    r13,0x8
   39124:	cmp    r13,0x10
   39128:	jne    39056 <InitializeFastFullIntegerSearch+0x1f6>
   3912e:	mov    rax,QWORD PTR [rip+0x4f483]        # 885b8 <input>
   39135:	mov    rcx,QWORD PTR [rip+0x4fee4]        # 89020 <max_search_range>
   3913c:	cmp    DWORD PTR [rax+0x984],0x2
   39143:	je     391ba <InitializeFastFullIntegerSearch+0x35a>
   39145:	mov    eax,DWORD PTR [rsp+0xc]
   39149:	mov    rsi,QWORD PTR [rcx]
   3914c:	mov    edx,eax
   3914e:	mov    DWORD PTR [rsi+r12*4],eax
   39152:	shr    edx,0x1f
   39155:	mov    DWORD PTR [rsi],eax
   39157:	add    edx,eax
   39159:	sar    edx,1
   3915b:	cmp    DWORD PTR [rbx+0x24],0x1
   3915f:	jle    39172 <InitializeFastFullIntegerSearch+0x312>
   39161:	mov    eax,0x1
   39166:	mov    DWORD PTR [rsi+rax*4],edx
   39169:	add    rax,0x1
   3916d:	cmp    DWORD PTR [rbx+0x24],eax
   39170:	jg     39166 <InitializeFastFullIntegerSearch+0x306>
   39172:	movsxd rax,DWORD PTR [rbx+0x24]
   39176:	mov    rcx,QWORD PTR [rcx+0x8]
   3917a:	mov    esi,DWORD PTR [rsp+0xc]
   3917e:	mov    DWORD PTR [rcx+rax*4],esi
   39181:	mov    eax,0x1
   39186:	mov    DWORD PTR [rcx],esi
   39188:	cmp    DWORD PTR [rbx+0x24],0x1
   3918c:	jle    3919a <InitializeFastFullIntegerSearch+0x33a>
   3918e:	mov    DWORD PTR [rcx+rax*4],edx
   39191:	add    rax,0x1
   39195:	cmp    DWORD PTR [rbx+0x24],eax
   39198:	jg     3918e <InitializeFastFullIntegerSearch+0x32e>
   3919a:	add    rsp,0x18
   3919e:	pop    rbx
   3919f:	pop    rbp
   391a0:	pop    r12
   391a2:	pop    r13
   391a4:	pop    r14
   391a6:	pop    r15
   391a8:	ret    
   391a9:	lea    rdi,[rip+0x3cb28]        # 75cd8 <MODTAB+0xab8>
   391b0:	call   38210 <no_mem_exit>
   391b5:	jmp    38f68 <InitializeFastFullIntegerSearch+0x108>
   391ba:	test   r12d,r12d
   391bd:	js     391d4 <InitializeFastFullIntegerSearch+0x374>
   391bf:	mov    rdx,QWORD PTR [rcx]
   391c2:	xor    eax,eax
   391c4:	mov    esi,DWORD PTR [rsp+0xc]
   391c8:	mov    DWORD PTR [rdx+rax*4],esi
   391cb:	add    rax,0x1
   391cf:	cmp    DWORD PTR [rbx+0x24],eax
   391d2:	jge    391c4 <InitializeFastFullIntegerSearch+0x364>
   391d4:	mov    eax,DWORD PTR [rbx+0x24]
   391d7:	test   eax,eax
   391d9:	js     3919a <InitializeFastFullIntegerSearch+0x33a>
   391db:	mov    rdx,QWORD PTR [rcx+0x8]
   391df:	xor    eax,eax
   391e1:	mov    ecx,DWORD PTR [rsp+0xc]
   391e5:	mov    DWORD PTR [rdx+rax*4],ecx
   391e8:	add    rax,0x1
   391ec:	cmp    DWORD PTR [rbx+0x24],eax
   391ef:	jge    391e1 <InitializeFastFullIntegerSearch+0x381>
   391f1:	add    rsp,0x18
   391f5:	pop    rbx
   391f6:	pop    rbp
   391f7:	pop    r12
   391f9:	pop    r13
   391fb:	pop    r14
   391fd:	pop    r15
   391ff:	ret    
   39200:	lea    rdi,[rip+0x3cbd1]        # 75dd8 <MODTAB+0xbb8>
   39207:	call   38210 <no_mem_exit>
   3920c:	mov    rbx,QWORD PTR [rip+0x4f39d]        # 885b0 <img>
   39213:	movsxd r12,DWORD PTR [rbx+0x24]
   39217:	jmp    39120 <InitializeFastFullIntegerSearch+0x2c0>
   3921c:	lea    rdi,[rip+0x3cb8d]        # 75db0 <MODTAB+0xb90>
   39223:	call   38210 <no_mem_exit>
   39228:	mov    rbx,QWORD PTR [rip+0x4f381]        # 885b0 <img>
   3922f:	movsxd r12,DWORD PTR [rbx+0x24]
   39233:	lea    ebp,[r12+0x1]
   39238:	movsxd rbp,ebp
   3923b:	shl    rbp,0x2
   3923f:	jmp    390fa <InitializeFastFullIntegerSearch+0x29a>
   39244:	lea    rdi,[rip+0x3cb2d]        # 75d78 <MODTAB+0xb58>
   3924b:	call   38210 <no_mem_exit>
   39250:	mov    rbx,QWORD PTR [rip+0x4f359]        # 885b0 <img>
   39257:	movsxd r12,DWORD PTR [rbx+0x24]
   3925b:	lea    ebp,[r12+0x1]
   39260:	movsxd rbp,ebp
   39263:	shl    rbp,0x2
   39267:	jmp    390d4 <InitializeFastFullIntegerSearch+0x274>
   3926c:	lea    rdi,[rip+0x3cacd]        # 75d40 <MODTAB+0xb20>
   39273:	call   38210 <no_mem_exit>
   39278:	mov    rbx,QWORD PTR [rip+0x4f331]        # 885b0 <img>
   3927f:	movsxd r12,DWORD PTR [rbx+0x24]
   39283:	lea    ebp,[r12+0x1]
   39288:	movsxd rbp,ebp
   3928b:	shl    rbp,0x2
   3928f:	jmp    390ae <InitializeFastFullIntegerSearch+0x24e>
   39294:	mov    rdi,r14
   39297:	call   38210 <no_mem_exit>
   3929c:	mov    rbx,QWORD PTR [rip+0x4f30d]        # 885b0 <img>
   392a3:	movsxd r12,DWORD PTR [rbx+0x24]
   392a7:	lea    ebp,[r12+0x1]
   392ac:	movsxd rbp,ebp
   392af:	shl    rbp,0x2
   392b3:	jmp    39088 <InitializeFastFullIntegerSearch+0x228>
   392b8:	lea    rdi,[rip+0x3cb19]        # 75dd8 <MODTAB+0xbb8>
   392bf:	call   38210 <no_mem_exit>
   392c4:	jmp    39041 <InitializeFastFullIntegerSearch+0x1e1>
   392c9:	lea    rdi,[rip+0x3cae0]        # 75db0 <MODTAB+0xb90>
   392d0:	call   38210 <no_mem_exit>
   392d5:	jmp    39027 <InitializeFastFullIntegerSearch+0x1c7>
   392da:	lea    rdi,[rip+0x3ca97]        # 75d78 <MODTAB+0xb58>
   392e1:	call   38210 <no_mem_exit>
   392e6:	jmp    3900d <InitializeFastFullIntegerSearch+0x1ad>
   392eb:	lea    rdi,[rip+0x3ca4e]        # 75d40 <MODTAB+0xb20>
   392f2:	call   38210 <no_mem_exit>
   392f7:	jmp    38ff3 <InitializeFastFullIntegerSearch+0x193>
   392fc:	lea    rdi,[rip+0x3ca05]        # 75d08 <MODTAB+0xae8>
   39303:	call   38210 <no_mem_exit>
   39308:	jmp    38fd9 <InitializeFastFullIntegerSearch+0x179>
   3930d:	nop    DWORD PTR [rax]
   39310:	lea    rdi,[rip+0x3c9c1]        # 75cd8 <MODTAB+0xab8>
   39317:	call   38210 <no_mem_exit>
   3931c:	mov    rax,QWORD PTR [rip+0x4fd05]        # 89028 <BlockSAD>
   39323:	mov    rax,QWORD PTR [rax+r13*1]
   39327:	mov    rax,QWORD PTR [rax+r12*1]
   3932b:	mov    r14,QWORD PTR [rax+rbx*1]
   3932f:	jmp    38f3a <InitializeFastFullIntegerSearch+0xda>
   39334:	lea    rdi,[rip+0x3c99d]        # 75cd8 <MODTAB+0xab8>
   3933b:	call   38210 <no_mem_exit>
   39340:	mov    rax,QWORD PTR [rip+0x4fce1]        # 89028 <BlockSAD>
   39347:	mov    rcx,QWORD PTR [rsp]
   3934b:	mov    rax,QWORD PTR [rax+r13*1]
   3934f:	mov    r15,QWORD PTR [rax+rcx*8]
   39353:	jmp    38f1b <InitializeFastFullIntegerSearch+0xbb>
   39358:	lea    rdi,[rip+0x3c979]        # 75cd8 <MODTAB+0xab8>
   3935f:	call   38210 <no_mem_exit>
   39364:	mov    rax,QWORD PTR [rip+0x4f245]        # 885b0 <img>
   3936b:	mov    r12d,DWORD PTR [rax+0x24]
   3936f:	jmp    38ed7 <InitializeFastFullIntegerSearch+0x77>
   39374:	lea    rdi,[rip+0x3c95d]        # 75cd8 <MODTAB+0xab8>
   3937b:	call   38210 <no_mem_exit>
   39380:	mov    rbx,QWORD PTR [rip+0x4fca1]        # 89028 <BlockSAD>
   39387:	jmp    38ea7 <InitializeFastFullIntegerSearch+0x47>
   3938c:	nop    DWORD PTR [rax+0x0]

0000000000039390 <ClearFastFullIntegerSearch>:
   39390:	endbr64 
   39394:	push   r15
   39396:	push   r14
   39398:	push   r13
   3939a:	push   r12
   3939c:	push   rbp
   3939d:	push   rbx
   3939e:	sub    rsp,0x18
   393a2:	mov    r14,QWORD PTR [rip+0x4fc7f]        # 89028 <BlockSAD>
   393a9:	lea    rax,[r14+0x10]
   393ad:	mov    r15,r14
   393b0:	mov    QWORD PTR [rsp+0x8],rax
   393b5:	mov    rax,QWORD PTR [rip+0x4f1f4]        # 885b0 <img>
   393bc:	xor    r13d,r13d
   393bf:	mov    eax,DWORD PTR [rax+0x24]
   393c2:	test   eax,eax
   393c4:	js     39438 <ClearFastFullIntegerSearch+0xa8>
   393c6:	lea    r12,[r13*8+0x0]
   393ce:	mov    ebp,0x8
   393d3:	nop    DWORD PTR [rax+rax*1+0x0]
   393d8:	xor    ebx,ebx
   393da:	nop    WORD PTR [rax+rax*1+0x0]
   393e0:	mov    rax,QWORD PTR [r15]
   393e3:	mov    rax,QWORD PTR [rax+r12*1]
   393e7:	mov    rax,QWORD PTR [rax+rbp*1]
   393eb:	mov    rdi,QWORD PTR [rax+rbx*1]
   393ef:	add    rbx,0x8
   393f3:	call   42d0 <free@plt>
   393f8:	cmp    rbx,0x80
   393ff:	jne    393e0 <ClearFastFullIntegerSearch+0x50>
   39401:	mov    rax,QWORD PTR [r15]
   39404:	mov    rax,QWORD PTR [rax+r12*1]
   39408:	mov    rdi,QWORD PTR [rax+rbp*1]
   3940c:	add    rbp,0x8
   39410:	call   42d0 <free@plt>
   39415:	cmp    rbp,0x40
   39419:	jne    393d8 <ClearFastFullIntegerSearch+0x48>
   3941b:	mov    rax,QWORD PTR [r15]
   3941e:	add    r13,0x1
   39422:	mov    rdi,QWORD PTR [rax+r12*1]
   39426:	call   42d0 <free@plt>
   3942b:	mov    rax,QWORD PTR [rip+0x4f17e]        # 885b0 <img>
   39432:	cmp    DWORD PTR [rax+0x24],r13d
   39436:	jge    393c6 <ClearFastFullIntegerSearch+0x36>
   39438:	mov    rdi,QWORD PTR [r15]
   3943b:	add    r15,0x8
   3943f:	call   42d0 <free@plt>
   39444:	cmp    QWORD PTR [rsp+0x8],r15
   39449:	jne    393b5 <ClearFastFullIntegerSearch+0x25>
   3944f:	mov    rdi,r14
   39452:	xor    ebx,ebx
   39454:	call   42d0 <free@plt>
   39459:	mov    r15,QWORD PTR [rip+0x4fbe8]        # 89048 <search_setup_done>
   39460:	mov    r14,QWORD PTR [rip+0x4fbd9]        # 89040 <search_center_x>
   39467:	mov    r13,QWORD PTR [rip+0x4fbca]        # 89038 <search_center_y>
   3946e:	mov    r12,QWORD PTR [rip+0x4fbbb]        # 89030 <pos_00>
   39475:	mov    rbp,QWORD PTR [rip+0x4fba4]        # 89020 <max_search_range>
   3947c:	mov    rdi,QWORD PTR [r15+rbx*1]
   39480:	call   42d0 <free@plt>
   39485:	mov    rdi,QWORD PTR [r14+rbx*1]
   39489:	call   42d0 <free@plt>
   3948e:	mov    rdi,QWORD PTR [r13+rbx*1+0x0]
   39493:	call   42d0 <free@plt>
   39498:	mov    rdi,QWORD PTR [r12+rbx*1]
   3949c:	call   42d0 <free@plt>
   394a1:	mov    rdi,QWORD PTR [rbp+rbx*1+0x0]
   394a6:	add    rbx,0x8
   394aa:	call   42d0 <free@plt>
   394af:	cmp    rbx,0x10
   394b3:	jne    3947c <ClearFastFullIntegerSearch+0xec>
   394b5:	mov    rdi,r15
   394b8:	call   42d0 <free@plt>
   394bd:	mov    rdi,r14
   394c0:	call   42d0 <free@plt>
   394c5:	mov    rdi,r13
   394c8:	call   42d0 <free@plt>
   394cd:	mov    rdi,r12
   394d0:	call   42d0 <free@plt>
   394d5:	add    rsp,0x18
   394d9:	mov    rdi,rbp
   394dc:	pop    rbx
   394dd:	pop    rbp
   394de:	pop    r12
   394e0:	pop    r13
   394e2:	pop    r14
   394e4:	pop    r15
   394e6:	jmp    42d0 <free@plt>
   394eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000394f0 <ResetFastFullIntegerSearch>:
   394f0:	endbr64 
   394f4:	mov    rdx,QWORD PTR [rip+0x4f0b5]        # 885b0 <img>
   394fb:	mov    rsi,QWORD PTR [rip+0x4fb46]        # 89048 <search_setup_done>
   39502:	mov    ecx,DWORD PTR [rdx+0x24]
   39505:	test   ecx,ecx
   39507:	js     39540 <ResetFastFullIntegerSearch+0x50>
   39509:	mov    rcx,QWORD PTR [rsi]
   3950c:	xor    eax,eax
   3950e:	xchg   ax,ax
   39510:	mov    DWORD PTR [rcx+rax*4],0x0
   39517:	add    rax,0x1
   3951b:	cmp    DWORD PTR [rdx+0x24],eax
   3951e:	jge    39510 <ResetFastFullIntegerSearch+0x20>
   39520:	mov    eax,DWORD PTR [rdx+0x24]
   39523:	test   eax,eax
   39525:	js     39540 <ResetFastFullIntegerSearch+0x50>
   39527:	mov    rcx,QWORD PTR [rsi+0x8]
   3952b:	xor    eax,eax
   3952d:	nop    DWORD PTR [rax]
   39530:	mov    DWORD PTR [rcx+rax*4],0x0
   39537:	add    rax,0x1
   3953b:	cmp    DWORD PTR [rdx+0x24],eax
   3953e:	jge    39530 <ResetFastFullIntegerSearch+0x40>
   39540:	ret    
   39541:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3954c:	nop    DWORD PTR [rax+0x0]

0000000000039550 <SetupLargerBlocks>:
   39550:	endbr64 
   39554:	push   r15
   39556:	movsxd rdi,edi
   39559:	movsxd rsi,esi
   3955c:	push   r14
   3955e:	push   r13
   39560:	push   r12
   39562:	push   rbp
   39563:	push   rbx
   39564:	sub    rsp,0x8
   39568:	mov    rax,QWORD PTR [rip+0x4fab9]        # 89028 <BlockSAD>
   3956f:	mov    rax,QWORD PTR [rax+rdi*8]
   39573:	mov    rax,QWORD PTR [rax+rsi*8]
   39577:	mov    rcx,QWORD PTR [rax+0x38]
   3957b:	mov    r14,QWORD PTR [rax+0x30]
   3957f:	mov    QWORD PTR [rsp-0x70],rax
   39584:	mov    r9,QWORD PTR [r14]
   39587:	mov    r10,QWORD PTR [rcx]
   3958a:	mov    rsi,QWORD PTR [rcx+0x20]
   3958e:	mov    QWORD PTR [rsp-0x68],r9
   39593:	mov    QWORD PTR [rsp-0x60],r10
   39598:	test   edx,edx
   3959a:	jle    399c3 <SetupLargerBlocks+0x473>
   395a0:	lea    eax,[rdx-0x1]
   395a3:	xor    edi,edi
   395a5:	nop    DWORD PTR [rax]
   395a8:	mov    r8d,DWORD PTR [rsi+rdi*4]
   395ac:	add    r8d,DWORD PTR [r10+rdi*4]
   395b0:	mov    DWORD PTR [r9+rdi*4],r8d
   395b4:	mov    r8,rdi
   395b7:	add    rdi,0x1
   395bb:	cmp    rax,r8
   395be:	jne    395a8 <SetupLargerBlocks+0x58>
   395c0:	mov    r11,QWORD PTR [r14+0x8]
   395c4:	mov    r8,QWORD PTR [rcx+0x8]
   395c8:	xor    r9d,r9d
   395cb:	mov    rdi,QWORD PTR [rcx+0x28]
   395cf:	mov    QWORD PTR [rsp-0x8],r11
   395d4:	nop    DWORD PTR [rax+0x0]
   395d8:	mov    r10d,DWORD PTR [rdi+r9*4]
   395dc:	add    r10d,DWORD PTR [r8+r9*4]
   395e0:	mov    DWORD PTR [r11+r9*4],r10d
   395e4:	mov    r10,r9
   395e7:	add    r9,0x1
   395eb:	cmp    rax,r10
   395ee:	jne    395d8 <SetupLargerBlocks+0x88>
   395f0:	mov    r11,QWORD PTR [r14+0x10]
   395f4:	mov    rbx,QWORD PTR [rcx+0x10]
   395f8:	xor    r9d,r9d
   395fb:	mov    rbp,QWORD PTR [rcx+0x30]
   395ff:	mov    QWORD PTR [rsp-0x20],r11
   39604:	mov    QWORD PTR [rsp-0x18],rbx
   39609:	mov    QWORD PTR [rsp-0x10],rbp
   3960e:	xchg   ax,ax
   39610:	mov    r10d,DWORD PTR [rbp+r9*4+0x0]
   39615:	add    r10d,DWORD PTR [rbx+r9*4]
   39619:	mov    DWORD PTR [r11+r9*4],r10d
   3961d:	mov    r10,r9
   39620:	add    r9,0x1
   39624:	cmp    rax,r10
   39627:	jne    39610 <SetupLargerBlocks+0xc0>
   39629:	mov    rbp,QWORD PTR [r14+0x18]
   3962d:	mov    r10,QWORD PTR [rcx+0x18]
   39631:	xor    r11d,r11d
   39634:	mov    r9,QWORD PTR [rcx+0x38]
   39638:	mov    QWORD PTR [rsp-0x28],rbp
   3963d:	nop    DWORD PTR [rax]
   39640:	mov    ebx,DWORD PTR [r9+r11*4]
   39644:	add    ebx,DWORD PTR [r10+r11*4]
   39648:	mov    DWORD PTR [rbp+r11*4+0x0],ebx
   3964d:	mov    rbx,r11
   39650:	add    r11,0x1
   39654:	cmp    rax,rbx
   39657:	jne    39640 <SetupLargerBlocks+0xf0>
   39659:	mov    rbp,QWORD PTR [r14+0x40]
   3965d:	mov    r12,QWORD PTR [rcx+0x40]
   39661:	xor    r11d,r11d
   39664:	mov    r13,QWORD PTR [rcx+0x60]
   39668:	mov    QWORD PTR [rsp-0x40],rbp
   3966d:	mov    QWORD PTR [rsp-0x38],r12
   39672:	mov    QWORD PTR [rsp-0x30],r13
   39677:	nop    WORD PTR [rax+rax*1+0x0]
   39680:	mov    ebx,DWORD PTR [r13+r11*4+0x0]
   39685:	add    ebx,DWORD PTR [r12+r11*4]
   39689:	mov    DWORD PTR [rbp+r11*4+0x0],ebx
   3968e:	mov    rbx,r11
   39691:	add    r11,0x1
   39695:	cmp    rax,rbx
   39698:	jne    39680 <SetupLargerBlocks+0x130>
   3969a:	mov    r13,QWORD PTR [r14+0x48]
   3969e:	mov    rbx,QWORD PTR [rcx+0x48]
   396a2:	xor    ebp,ebp
   396a4:	mov    r11,QWORD PTR [rcx+0x68]
   396a8:	mov    QWORD PTR [rsp-0x58],r13
   396ad:	nop    DWORD PTR [rax]
   396b0:	mov    r12d,DWORD PTR [r11+rbp*4]
   396b4:	add    r12d,DWORD PTR [rbx+rbp*4]
   396b8:	mov    DWORD PTR [r13+rbp*4+0x0],r12d
   396bd:	mov    r12,rbp
   396c0:	add    rbp,0x1
   396c4:	cmp    rax,r12
   396c7:	jne    396b0 <SetupLargerBlocks+0x160>
   396c9:	mov    r13,QWORD PTR [r14+0x50]
   396cd:	mov    r15,QWORD PTR [rcx+0x50]
   396d1:	mov    QWORD PTR [rsp-0x78],r14
   396d6:	xor    r12d,r12d
   396d9:	mov    rbp,QWORD PTR [rcx+0x70]
   396dd:	mov    QWORD PTR [rsp-0x50],r13
   396e2:	mov    r14,r13
   396e5:	mov    QWORD PTR [rsp-0x48],r15
   396ea:	nop    WORD PTR [rax+rax*1+0x0]
   396f0:	mov    r13d,DWORD PTR [rbp+r12*4+0x0]
   396f5:	add    r13d,DWORD PTR [r15+r12*4]
   396f9:	mov    DWORD PTR [r14+r12*4],r13d
   396fd:	mov    r13,r12
   39700:	add    r12,0x1
   39704:	cmp    rax,r13
   39707:	jne    396f0 <SetupLargerBlocks+0x1a0>
   39709:	mov    r14,QWORD PTR [rsp-0x78]
   3970e:	mov    r13,QWORD PTR [rcx+0x58]
   39712:	mov    r12,QWORD PTR [rcx+0x78]
   39716:	xor    ecx,ecx
   39718:	mov    r14,QWORD PTR [r14+0x58]
   3971c:	nop    DWORD PTR [rax+0x0]
   39720:	mov    r15d,DWORD PTR [r12+rcx*4]
   39724:	add    r15d,DWORD PTR [r13+rcx*4+0x0]
   39729:	mov    DWORD PTR [r14+rcx*4],r15d
   3972d:	mov    r15,rcx
   39730:	add    rcx,0x1
   39734:	cmp    rax,r15
   39737:	jne    39720 <SetupLargerBlocks+0x1d0>
   39739:	mov    rax,QWORD PTR [rsp-0x70]
   3973e:	mov    QWORD PTR [rsp],rsi
   39742:	mov    rsi,QWORD PTR [rsp-0x60]
   39747:	mov    rax,QWORD PTR [rax+0x28]
   3974b:	mov    QWORD PTR [rsp-0x78],rax
   39750:	mov    r15,QWORD PTR [rax]
   39753:	xor    eax,eax
   39755:	nop    DWORD PTR [rax]
   39758:	mov    ecx,DWORD PTR [r8+rax*4]
   3975c:	add    ecx,DWORD PTR [rsi+rax*4]
   3975f:	mov    DWORD PTR [r15+rax*4],ecx
   39763:	add    rax,0x1
   39767:	cmp    edx,eax
   39769:	jg     39758 <SetupLargerBlocks+0x208>
   3976b:	mov    rax,QWORD PTR [rsp-0x78]
   39770:	mov    rsi,QWORD PTR [rsp]
   39774:	mov    r15,QWORD PTR [rsp-0x18]
   39779:	mov    r8,QWORD PTR [rax+0x10]
   3977d:	xor    eax,eax
   3977f:	nop
   39780:	mov    ecx,DWORD PTR [r10+rax*4]
   39784:	add    ecx,DWORD PTR [r15+rax*4]
   39788:	mov    DWORD PTR [r8+rax*4],ecx
   3978c:	add    rax,0x1
   39790:	cmp    edx,eax
   39792:	jg     39780 <SetupLargerBlocks+0x230>
   39794:	mov    rax,QWORD PTR [rsp-0x78]
   39799:	mov    r8,QWORD PTR [rax+0x20]
   3979d:	xor    eax,eax
   3979f:	nop
   397a0:	mov    ecx,DWORD PTR [rdi+rax*4]
   397a3:	add    ecx,DWORD PTR [rsi+rax*4]
   397a6:	mov    DWORD PTR [r8+rax*4],ecx
   397aa:	add    rax,0x1
   397ae:	cmp    edx,eax
   397b0:	jg     397a0 <SetupLargerBlocks+0x250>
   397b2:	mov    rax,QWORD PTR [rsp-0x78]
   397b7:	mov    rdi,QWORD PTR [rsp-0x10]
   397bc:	mov    rsi,QWORD PTR [rax+0x30]
   397c0:	xor    eax,eax
   397c2:	nop    WORD PTR [rax+rax*1+0x0]
   397c8:	mov    ecx,DWORD PTR [r9+rax*4]
   397cc:	add    ecx,DWORD PTR [rdi+rax*4]
   397cf:	mov    DWORD PTR [rsi+rax*4],ecx
   397d2:	add    rax,0x1
   397d6:	cmp    edx,eax
   397d8:	jg     397c8 <SetupLargerBlocks+0x278>
   397da:	mov    rax,QWORD PTR [rsp-0x78]
   397df:	mov    rdi,QWORD PTR [rsp-0x38]
   397e4:	mov    rsi,QWORD PTR [rax+0x40]
   397e8:	xor    eax,eax
   397ea:	nop    WORD PTR [rax+rax*1+0x0]
   397f0:	mov    ecx,DWORD PTR [rbx+rax*4]
   397f3:	add    ecx,DWORD PTR [rdi+rax*4]
   397f6:	mov    DWORD PTR [rsi+rax*4],ecx
   397f9:	add    rax,0x1
   397fd:	cmp    edx,eax
   397ff:	jg     397f0 <SetupLargerBlocks+0x2a0>
   39801:	mov    rax,QWORD PTR [rsp-0x78]
   39806:	mov    rdi,QWORD PTR [rsp-0x48]
   3980b:	mov    rsi,QWORD PTR [rax+0x50]
   3980f:	xor    eax,eax
   39811:	nop    DWORD PTR [rax+0x0]
   39818:	mov    ecx,DWORD PTR [r13+rax*4+0x0]
   3981d:	add    ecx,DWORD PTR [rdi+rax*4]
   39820:	mov    DWORD PTR [rsi+rax*4],ecx
   39823:	add    rax,0x1
   39827:	cmp    edx,eax
   39829:	jg     39818 <SetupLargerBlocks+0x2c8>
   3982b:	mov    rax,QWORD PTR [rsp-0x78]
   39830:	mov    rdi,QWORD PTR [rsp-0x30]
   39835:	mov    rsi,QWORD PTR [rax+0x60]
   39839:	xor    eax,eax
   3983b:	nop    DWORD PTR [rax+rax*1+0x0]
   39840:	mov    ecx,DWORD PTR [r11+rax*4]
   39844:	add    ecx,DWORD PTR [rdi+rax*4]
   39847:	mov    DWORD PTR [rsi+rax*4],ecx
   3984a:	add    rax,0x1
   3984e:	cmp    edx,eax
   39850:	jg     39840 <SetupLargerBlocks+0x2f0>
   39852:	mov    rax,QWORD PTR [rsp-0x78]
   39857:	mov    rsi,QWORD PTR [rax+0x70]
   3985b:	xor    eax,eax
   3985d:	nop    DWORD PTR [rax]
   39860:	mov    ecx,DWORD PTR [r12+rax*4]
   39864:	add    ecx,DWORD PTR [rbp+rax*4+0x0]
   39868:	mov    DWORD PTR [rsi+rax*4],ecx
   3986b:	add    rax,0x1
   3986f:	cmp    edx,eax
   39871:	jg     39860 <SetupLargerBlocks+0x310>
   39873:	mov    rax,QWORD PTR [rsp-0x70]
   39878:	mov    r8,QWORD PTR [rsp-0x68]
   3987d:	mov    r9,QWORD PTR [rsp-0x8]
   39882:	mov    rsi,QWORD PTR [rax+0x20]
   39886:	xor    eax,eax
   39888:	mov    rcx,QWORD PTR [rsi]
   3988b:	nop    DWORD PTR [rax+rax*1+0x0]
   39890:	mov    edi,DWORD PTR [r9+rax*4]
   39894:	add    edi,DWORD PTR [r8+rax*4]
   39898:	mov    DWORD PTR [rcx+rax*4],edi
   3989b:	add    rax,0x1
   3989f:	cmp    edx,eax
   398a1:	jg     39890 <SetupLargerBlocks+0x340>
   398a3:	mov    rdi,QWORD PTR [rsi+0x10]
   398a7:	mov    r9,QWORD PTR [rsp-0x28]
   398ac:	xor    eax,eax
   398ae:	mov    r10,QWORD PTR [rsp-0x20]
   398b3:	nop    DWORD PTR [rax+rax*1+0x0]
   398b8:	mov    r8d,DWORD PTR [r9+rax*4]
   398bc:	add    r8d,DWORD PTR [r10+rax*4]
   398c0:	mov    DWORD PTR [rdi+rax*4],r8d
   398c4:	add    rax,0x1
   398c8:	cmp    edx,eax
   398ca:	jg     398b8 <SetupLargerBlocks+0x368>
   398cc:	mov    r8,QWORD PTR [rsi+0x40]
   398d0:	mov    r10,QWORD PTR [rsp-0x58]
   398d5:	xor    eax,eax
   398d7:	mov    r11,QWORD PTR [rsp-0x40]
   398dc:	nop    DWORD PTR [rax+0x0]
   398e0:	mov    r9d,DWORD PTR [r10+rax*4]
   398e4:	add    r9d,DWORD PTR [r11+rax*4]
   398e8:	mov    DWORD PTR [r8+rax*4],r9d
   398ec:	add    rax,0x1
   398f0:	cmp    edx,eax
   398f2:	jg     398e0 <SetupLargerBlocks+0x390>
   398f4:	mov    rsi,QWORD PTR [rsi+0x50]
   398f8:	mov    r10,QWORD PTR [rsp-0x50]
   398fd:	xor    eax,eax
   398ff:	nop
   39900:	mov    r9d,DWORD PTR [r14+rax*4]
   39904:	add    r9d,DWORD PTR [r10+rax*4]
   39908:	mov    DWORD PTR [rsi+rax*4],r9d
   3990c:	add    rax,0x1
   39910:	cmp    edx,eax
   39912:	jg     39900 <SetupLargerBlocks+0x3b0>
   39914:	mov    rax,QWORD PTR [rsp-0x70]
   39919:	mov    r11,QWORD PTR [rax+0x18]
   3991d:	xor    eax,eax
   3991f:	mov    r9,QWORD PTR [r11]
   39922:	nop    WORD PTR [rax+rax*1+0x0]
   39928:	mov    r10d,DWORD PTR [r8+rax*4]
   3992c:	add    r10d,DWORD PTR [rcx+rax*4]
   39930:	mov    DWORD PTR [r9+rax*4],r10d
   39934:	add    rax,0x1
   39938:	cmp    edx,eax
   3993a:	jg     39928 <SetupLargerBlocks+0x3d8>
   3993c:	mov    r10,QWORD PTR [r11+0x10]
   39940:	xor    eax,eax
   39942:	nop    WORD PTR [rax+rax*1+0x0]
   39948:	mov    r11d,DWORD PTR [rsi+rax*4]
   3994c:	add    r11d,DWORD PTR [rdi+rax*4]
   39950:	mov    DWORD PTR [r10+rax*4],r11d
   39954:	add    rax,0x1
   39958:	cmp    edx,eax
   3995a:	jg     39948 <SetupLargerBlocks+0x3f8>
   3995c:	mov    rax,QWORD PTR [rsp-0x70]
   39961:	mov    rbp,QWORD PTR [rax+0x10]
   39965:	xor    eax,eax
   39967:	mov    rbx,QWORD PTR [rbp+0x0]
   3996b:	nop    DWORD PTR [rax+rax*1+0x0]
   39970:	mov    r11d,DWORD PTR [rdi+rax*4]
   39974:	add    r11d,DWORD PTR [rcx+rax*4]
   39978:	mov    DWORD PTR [rbx+rax*4],r11d
   3997c:	add    rax,0x1
   39980:	cmp    edx,eax
   39982:	jg     39970 <SetupLargerBlocks+0x420>
   39984:	mov    rdi,QWORD PTR [rbp+0x40]
   39988:	xor    eax,eax
   3998a:	nop    WORD PTR [rax+rax*1+0x0]
   39990:	mov    ecx,DWORD PTR [rsi+rax*4]
   39993:	add    ecx,DWORD PTR [r8+rax*4]
   39997:	mov    DWORD PTR [rdi+rax*4],ecx
   3999a:	add    rax,0x1
   3999e:	cmp    edx,eax
   399a0:	jg     39990 <SetupLargerBlocks+0x440>
   399a2:	mov    rax,QWORD PTR [rsp-0x70]
   399a7:	mov    rax,QWORD PTR [rax+0x8]
   399ab:	mov    rsi,QWORD PTR [rax]
   399ae:	xor    eax,eax
   399b0:	mov    ecx,DWORD PTR [r10+rax*4]
   399b4:	add    ecx,DWORD PTR [r9+rax*4]
   399b8:	mov    DWORD PTR [rsi+rax*4],ecx
   399bb:	add    rax,0x1
   399bf:	cmp    edx,eax
   399c1:	jg     399b0 <SetupLargerBlocks+0x460>
   399c3:	add    rsp,0x8
   399c7:	pop    rbx
   399c8:	pop    rbp
   399c9:	pop    r12
   399cb:	pop    r13
   399cd:	pop    r14
   399cf:	pop    r15
   399d1:	ret    
   399d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   399dd:	nop    DWORD PTR [rax]

00000000000399e0 <SetMotionVectorPredictor>:
   399e0:	endbr64 
   399e4:	push   r15
   399e6:	push   r14
   399e8:	push   r13
   399ea:	mov    r13d,r9d
   399ed:	push   r12
   399ef:	push   rbp
   399f0:	mov    rbp,rsi
   399f3:	push   rbx
   399f4:	mov    ebx,ecx
   399f6:	sub    rsp,0x158
   399fd:	mov    QWORD PTR [rsp+0x8],rdi
   39a02:	mov    r12d,DWORD PTR [rsp+0x190]
   39a0a:	mov    QWORD PTR [rsp+0x48],rdx
   39a0f:	mov    DWORD PTR [rsp+0x4],r8d
   39a14:	lea    r14d,[r12*4+0x0]
   39a1c:	mov    WORD PTR [rsp+0x60],cx
   39a21:	mov    rax,QWORD PTR fs:0x28
   39a2a:	mov    QWORD PTR [rsp+0x148],rax
   39a32:	xor    eax,eax
   39a34:	lea    eax,[r9*4+0x0]
   39a3c:	mov    DWORD PTR [rsp+0x28],eax
   39a40:	mov    rax,QWORD PTR [rip+0x4eb69]        # 885b0 <img>
   39a47:	mov    r15d,DWORD PTR [rax+0xc]
   39a4b:	mov    rax,QWORD PTR [rip+0x4eb66]        # 885b8 <input>
   39a52:	mov    eax,DWORD PTR [rax+0xcdc]
   39a58:	test   eax,eax
   39a5a:	je     39a66 <SetMotionVectorPredictor+0x86>
   39a5c:	mov    DWORD PTR [rip+0x50e12],0x0        # 8a878 <pred_SAD_space>
   39a66:	xor    r8d,r8d
   39a69:	mov    ecx,0xffffffff
   39a6e:	mov    edx,r12d
   39a71:	mov    esi,r13d
   39a74:	lea    r9,[rsp+0xc0]
   39a7c:	mov    edi,r15d
   39a7f:	call   30b60 <getLuma4x4Neighbour>
   39a84:	xor    ecx,ecx
   39a86:	mov    r8d,0xffffffff
   39a8c:	mov    edx,r12d
   39a8f:	lea    r9,[rsp+0xe0]
   39a97:	mov    esi,r13d
   39a9a:	mov    edi,r15d
   39a9d:	call   30b60 <getLuma4x4Neighbour>
   39aa2:	mov    edx,r12d
   39aa5:	mov    esi,r13d
   39aa8:	mov    edi,r15d
   39aab:	mov    ecx,DWORD PTR [rsp+0x198]
   39ab2:	lea    r9,[rsp+0x100]
   39aba:	mov    r8d,0xffffffff
   39ac0:	call   30b60 <getLuma4x4Neighbour>
   39ac5:	mov    ecx,0xffffffff
   39aca:	mov    edx,r12d
   39acd:	mov    esi,r13d
   39ad0:	lea    r9,[rsp+0x120]
   39ad8:	mov    r8d,0xffffffff
   39ade:	mov    edi,r15d
   39ae1:	call   30b60 <getLuma4x4Neighbour>
   39ae6:	test   r14d,r14d
   39ae9:	jle    3a3b0 <SetMotionVectorPredictor+0x9d0>
   39aef:	cmp    DWORD PTR [rsp+0x28],0x7
   39af4:	jg     3a020 <SetMotionVectorPredictor+0x640>
   39afa:	cmp    r14d,0x8
   39afe:	je     3a640 <SetMotionVectorPredictor+0xc60>
   39b04:	mov    eax,DWORD PTR [rsp+0x28]
   39b08:	add    eax,DWORD PTR [rsp+0x198]
   39b0f:	cmp    eax,0x8
   39b12:	je     3a034 <SetMotionVectorPredictor+0x654>
   39b18:	mov    eax,DWORD PTR [rsp+0x100]
   39b1f:	and    eax,0x1
   39b22:	mov    DWORD PTR [rsp+0x100],eax
   39b29:	test   eax,eax
   39b2b:	je     3a034 <SetMotionVectorPredictor+0x654>
   39b31:	mov    rdx,QWORD PTR [rip+0x4ea78]        # 885b0 <img>
   39b38:	movsxd rcx,DWORD PTR [rsp+0xc4]
   39b40:	movsxd rsi,DWORD PTR [rsp+0xd0]
   39b48:	mov    r13d,DWORD PTR [rsp+0xc0]
   39b50:	mov    QWORD PTR [rsp+0x40],rdx
   39b55:	mov    r9d,DWORD PTR [rdx+0x11ad0]
   39b5c:	imul   rcx,rcx,0x278
   39b63:	movsxd rdx,DWORD PTR [rsp+0x4]
   39b68:	movsxd r10,DWORD PTR [rsp+0xd4]
   39b70:	lea    rdi,[rdx*8+0x0]
   39b78:	mov    QWORD PTR [rsp+0x50],rcx
   39b7d:	mov    QWORD PTR [rsp+0x38],rdi
   39b82:	lea    rdi,[rsi*8+0x0]
   39b8a:	mov    QWORD PTR [rsp+0x10],rdi
   39b8f:	test   r9d,r9d
   39b92:	jne    3a280 <SetMotionVectorPredictor+0x8a0>
   39b98:	mov    edi,0xffffffff
   39b9d:	test   r13d,r13d
   39ba0:	je     39bb0 <SetMotionVectorPredictor+0x1d0>
   39ba2:	mov    rcx,QWORD PTR [rbp+rdx*8+0x0]
   39ba7:	mov    rcx,QWORD PTR [rcx+rsi*8]
   39bab:	movsx  edi,WORD PTR [rcx+r10*2]
   39bb0:	movsxd rcx,DWORD PTR [rsp+0xf0]
   39bb8:	mov    r15d,DWORD PTR [rsp+0xe0]
   39bc0:	mov    r8d,0xffffffff
   39bc6:	movsxd r11,DWORD PTR [rsp+0xf4]
   39bce:	lea    rsi,[rcx*8+0x0]
   39bd6:	mov    QWORD PTR [rsp+0x20],rsi
   39bdb:	test   r15d,r15d
   39bde:	je     39bee <SetMotionVectorPredictor+0x20e>
   39be0:	mov    rsi,QWORD PTR [rbp+rdx*8+0x0]
   39be5:	mov    rcx,QWORD PTR [rsi+rcx*8]
   39be9:	movsx  r8d,WORD PTR [rcx+r11*2]
   39bee:	movsxd rsi,DWORD PTR [rsp+0x104]
   39bf6:	movsxd r12,DWORD PTR [rsp+0x114]
   39bfe:	imul   rcx,rsi,0x278
   39c05:	mov    QWORD PTR [rsp+0x30],r12
   39c0a:	mov    QWORD PTR [rsp+0x58],rcx
   39c0f:	movsxd rcx,DWORD PTR [rsp+0x110]
   39c17:	lea    rsi,[rcx*8+0x0]
   39c1f:	mov    QWORD PTR [rsp+0x18],rsi
   39c24:	movsxd rsi,DWORD PTR [rsp+0xe4]
   39c2c:	imul   rsi,rsi,0x278
   39c33:	mov    QWORD PTR [rsp+0x98],rsi
   39c3b:	mov    esi,0xffffffff
   39c40:	test   eax,eax
   39c42:	je     39c52 <SetMotionVectorPredictor+0x272>
   39c44:	mov    rdx,QWORD PTR [rbp+rdx*8+0x0]
   39c49:	mov    rdx,QWORD PTR [rdx+rcx*8]
   39c4d:	movsx  esi,WORD PTR [rdx+r12*2]
   39c52:	movsx  ebx,bx
   39c55:	cmp    ebx,esi
   39c57:	setne  dl
   39c5a:	cmp    ebx,edi
   39c5c:	je     3a3c0 <SetMotionVectorPredictor+0x9e0>
   39c62:	cmp    ebx,r8d
   39c65:	jne    39c70 <SetMotionVectorPredictor+0x290>
   39c67:	mov    ebp,0x2
   39c6c:	test   dl,dl
   39c6e:	jne    39c86 <SetMotionVectorPredictor+0x2a6>
   39c70:	cmp    ebx,esi
   39c72:	jne    3a5c8 <SetMotionVectorPredictor+0xbe8>
   39c78:	mov    ebp,0x3
   39c7d:	cmp    ebx,r8d
   39c80:	je     3a5c8 <SetMotionVectorPredictor+0xbe8>
   39c86:	cmp    DWORD PTR [rsp+0x198],0x8
   39c8e:	jne    3a230 <SetMotionVectorPredictor+0x850>
   39c94:	cmp    DWORD PTR [rsp+0x1a0],0x10
   39c9c:	jne    3a230 <SetMotionVectorPredictor+0x850>
   39ca2:	mov    r12d,DWORD PTR [rsp+0x28]
   39ca7:	test   r12d,r12d
   39caa:	je     3a268 <SetMotionVectorPredictor+0x888>
   39cb0:	cmp    ebx,esi
   39cb2:	mov    edx,0x3
   39cb7:	cmove  ebp,edx
   39cba:	lea    rbx,[r10*8+0x0]
   39cc2:	mov    rsi,QWORD PTR [rip+0x50b9f]        # 8a868 <all_mincost>
   39cc9:	mov    rcx,QWORD PTR [rip+0x4e8e8]        # 885b8 <input>
   39cd0:	mov    r8,QWORD PTR [rsp+0x20]
   39cd5:	mov    rdx,QWORD PTR [rsp+0x48]
   39cda:	mov    QWORD PTR [rsp+0x28],rbx
   39cdf:	lea    rbx,[r11*8+0x0]
   39ce7:	mov    edi,DWORD PTR [rsp+0x120]
   39cee:	mov    r11,QWORD PTR [rsp+0x10]
   39cf3:	mov    r10d,DWORD PTR [rcx+0xcdc]
   39cfa:	add    rdx,QWORD PTR [rsp+0x38]
   39cff:	lea    rcx,[rsi+r11*1]
   39d03:	mov    DWORD PTR [rsp+0x48],edi
   39d07:	lea    rdi,[rsi+r8*1]
   39d0b:	mov    r12,QWORD PTR [rsp+0x30]
   39d10:	mov    QWORD PTR [rsp+0x78],rcx
   39d15:	movsx  rcx,WORD PTR [rsp+0x60]
   39d1b:	mov    QWORD PTR [rsp+0x80],rdi
   39d23:	movsxd rdi,DWORD PTR [rsp+0x130]
   39d2b:	shl    r12,0x3
   39d2f:	shl    rcx,0x3
   39d33:	movsxd r14,DWORD PTR [rip+0x50b8e]        # 8a8c8 <FME_blocktype>
   39d3a:	shl    rdi,0x3
   39d3e:	mov    QWORD PTR [rsp+0x38],rcx
   39d43:	lea    rcx,[rsi+rdi*1]
   39d47:	shl    r14,0x3
   39d4b:	mov    QWORD PTR [rsp+0x88],rcx
   39d53:	movsxd rcx,DWORD PTR [rsp+0x134]
   39d5b:	shl    rcx,0x3
   39d5f:	mov    QWORD PTR [rsp+0x68],rcx
   39d64:	mov    rcx,QWORD PTR [rip+0x50af5]        # 8a860 <all_bwmincost>
   39d6b:	add    r11,rcx
   39d6e:	mov    QWORD PTR [rsp+0xa0],r11
   39d76:	lea    r11,[rcx+r8*1]
   39d7a:	mov    QWORD PTR [rsp+0xa8],r11
   39d82:	mov    r11,QWORD PTR [rsp+0x18]
   39d87:	add    rsi,r11
   39d8a:	mov    QWORD PTR [rsp+0x90],rsi
   39d92:	lea    rsi,[rcx+rdi*1]
   39d96:	mov    edi,r15d
   39d99:	add    rcx,r11
   39d9c:	or     edi,eax
   39d9e:	test   r9d,r9d
   39da1:	mov    QWORD PTR [rsp+0xb8],rcx
   39da9:	mov    DWORD PTR [rsp+0x70],edi
   39dad:	mov    rdi,r12
   39db0:	mov    r12,rbx
   39db3:	sete   BYTE PTR [rsp+0x30]
   39db8:	xor    ecx,ecx
   39dba:	mov    rbx,rdi
   39dbd:	mov    QWORD PTR [rsp+0xb0],rsi
   39dc5:	lea    r9,[rcx+rcx*1]
   39dc9:	test   rcx,rcx
   39dcc:	je     3a172 <SetMotionVectorPredictor+0x792>
   39dd2:	cmp    BYTE PTR [rsp+0x30],0x0
   39dd7:	jne    3a172 <SetMotionVectorPredictor+0x792>
   39ddd:	mov    rsi,QWORD PTR [rsp+0x40]
   39de2:	mov    r9,QWORD PTR [rsi+0x3758]
   39de9:	movsxd rsi,DWORD PTR [rsi+0xc]
   39ded:	imul   rsi,rsi,0x278
   39df4:	mov    r8d,DWORD PTR [r9+rsi*1+0x214]
   39dfc:	mov    esi,0x0
   39e01:	test   r8d,r8d
   39e04:	je     3a3e0 <SetMotionVectorPredictor+0xa00>
   39e0a:	test   r13d,r13d
   39e0d:	je     39e47 <SetMotionVectorPredictor+0x467>
   39e0f:	mov    rdi,QWORD PTR [rsp+0x10]
   39e14:	mov    rsi,QWORD PTR [rdx]
   39e17:	mov    rsi,QWORD PTR [rsi+rdi*1]
   39e1b:	mov    rdi,QWORD PTR [rsp+0x28]
   39e20:	mov    rsi,QWORD PTR [rsi+rdi*1]
   39e24:	mov    rdi,QWORD PTR [rsp+0x50]
   39e29:	mov    edi,DWORD PTR [r9+rdi*1+0x214]
   39e31:	movsx  esi,WORD PTR [rsi+0x2]
   39e35:	test   edi,edi
   39e37:	jne    39e47 <SetMotionVectorPredictor+0x467>
   39e39:	mov    edi,esi
   39e3b:	shr    di,0xf
   39e3f:	add    esi,edi
   39e41:	sar    si,1
   39e44:	movsx  esi,si
   39e47:	xor    edi,edi
   39e49:	test   r15d,r15d
   39e4c:	je     39e88 <SetMotionVectorPredictor+0x4a8>
   39e4e:	mov    r8,QWORD PTR [rsp+0x20]
   39e53:	mov    rdi,QWORD PTR [rdx]
   39e56:	mov    rdi,QWORD PTR [rdi+r8*1]
   39e5a:	mov    r8,QWORD PTR [rsp+0x98]
   39e62:	mov    rdi,QWORD PTR [rdi+r12*1]
   39e66:	mov    r11d,DWORD PTR [r9+r8*1+0x214]
   39e6e:	movsx  edi,WORD PTR [rdi+0x2]
   39e72:	test   r11d,r11d
   39e75:	jne    39e88 <SetMotionVectorPredictor+0x4a8>
   39e77:	mov    r8d,edi
   39e7a:	shr    r8w,0xf
   39e7f:	add    edi,r8d
   39e82:	sar    di,1
   39e85:	movsx  edi,di
   39e88:	xor    r8d,r8d
   39e8b:	test   eax,eax
   39e8d:	jne    3a5e0 <SetMotionVectorPredictor+0xc00>
   39e93:	nop    DWORD PTR [rax+rax*1+0x0]
   39e98:	test   r10d,r10d
   39e9b:	je     3a1d8 <SetMotionVectorPredictor+0x7f8>
   39ea1:	test   r13d,r13d
   39ea4:	je     3a068 <SetMotionVectorPredictor+0x688>
   39eaa:	cmp    DWORD PTR [rsp+0x4],0x1
   39eaf:	je     3a6f8 <SetMotionVectorPredictor+0xd18>
   39eb5:	mov    r11,QWORD PTR [rsp+0x78]
   39eba:	mov    r9,QWORD PTR [r11]
   39ebd:	mov    r11,QWORD PTR [rsp+0x28]
   39ec2:	mov    r9,QWORD PTR [r9+r11*1]
   39ec6:	mov    r11,QWORD PTR [rsp+0x38]
   39ecb:	mov    r9,QWORD PTR [r9+r11*1]
   39ecf:	mov    r9,QWORD PTR [r9+r14*1]
   39ed3:	mov    r9d,DWORD PTR [r9]
   39ed6:	mov    DWORD PTR [rsp+0x60],r9d
   39edb:	test   r15d,r15d
   39ede:	jne    3a080 <SetMotionVectorPredictor+0x6a0>
   39ee4:	mov    r9d,DWORD PTR [rsp+0x48]
   39ee9:	mov    DWORD PTR [rsp+0x74],0x0
   39ef1:	test   r9d,r9d
   39ef4:	jne    3a0ae <SetMotionVectorPredictor+0x6ce>
   39efa:	test   eax,eax
   39efc:	je     3a6e0 <SetMotionVectorPredictor+0xd00>
   39f02:	mov    r9d,DWORD PTR [rsp+0x48]
   39f07:	mov    DWORD PTR [rsp+0x74],r9d
   39f0c:	nop    DWORD PTR [rax+0x0]
   39f10:	mov    r11,QWORD PTR [rsp+0x90]
   39f18:	mov    r9,QWORD PTR [r11]
   39f1b:	mov    r11,QWORD PTR [rsp+0x38]
   39f20:	mov    r9,QWORD PTR [r9+rbx*1]
   39f24:	mov    r9,QWORD PTR [r9+r11*1]
   39f28:	mov    r9,QWORD PTR [r9+r14*1]
   39f2c:	mov    r11d,DWORD PTR [r9]
   39f2f:	mov    DWORD PTR [rsp+0x64],r11d
   39f34:	cmp    ebp,0x2
   39f37:	je     3a140 <SetMotionVectorPredictor+0x760>
   39f3d:	cmp    ebp,0x3
   39f40:	je     3a5b0 <SetMotionVectorPredictor+0xbd0>
   39f46:	cmp    ebp,0x1
   39f49:	je     3a5a0 <SetMotionVectorPredictor+0xbc0>
   39f4f:	mov    r9d,DWORD PTR [rsp+0x70]
   39f54:	test   r9d,r9d
   39f57:	je     3a740 <SetMotionVectorPredictor+0xd60>
   39f5d:	lea    r9d,[rsi+rdi*1]
   39f61:	add    r9d,r8d
   39f64:	cmp    esi,edi
   39f66:	mov    r11d,r9d
   39f69:	mov    r9d,edi
   39f6c:	cmovle r9d,esi
   39f70:	cmp    r9d,r8d
   39f73:	cmovg  r9d,r8d
   39f77:	sub    r11d,r9d
   39f7a:	cmp    esi,edi
   39f7c:	mov    r9d,edi
   39f7f:	cmovge r9d,esi
   39f83:	cmp    r9d,r8d
   39f86:	cmovge r8d,r9d
   39f8a:	mov    r9d,r11d
   39f8d:	sub    r9d,r8d
   39f90:	cmp    r9d,esi
   39f93:	mov    esi,r9d
   39f96:	sete   r8b
   39f9a:	mov    r11d,DWORD PTR [rsp+0x60]
   39f9f:	test   r11d,r11d
   39fa2:	je     3a6c0 <SetMotionVectorPredictor+0xce0>
   39fa8:	test   r8b,r8b
   39fab:	je     3a6c0 <SetMotionVectorPredictor+0xce0>
   39fb1:	mov    DWORD PTR [rsp+rcx*4+0x140],r11d
   39fb9:	nop    DWORD PTR [rax+0x0]
   39fc0:	mov    rdi,QWORD PTR [rsp+0x8]
   39fc5:	mov    WORD PTR [rdi+rcx*2],si
   39fc9:	cmp    rcx,0x1
   39fcd:	jne    3a160 <SetMotionVectorPredictor+0x780>
   39fd3:	test   r10d,r10d
   39fd6:	je     39ff4 <SetMotionVectorPredictor+0x614>
   39fd8:	mov    eax,DWORD PTR [rsp+0x144]
   39fdf:	cmp    DWORD PTR [rsp+0x140],eax
   39fe6:	cmovle eax,DWORD PTR [rsp+0x140]
   39fee:	mov    DWORD PTR [rip+0x50884],eax        # 8a878 <pred_SAD_space>
   39ff4:	mov    rax,QWORD PTR [rsp+0x148]
   39ffc:	xor    rax,QWORD PTR fs:0x28
   3a005:	jne    3a76d <SetMotionVectorPredictor+0xd8d>
   3a00b:	add    rsp,0x158
   3a012:	pop    rbx
   3a013:	pop    rbp
   3a014:	pop    r12
   3a016:	pop    r13
   3a018:	pop    r14
   3a01a:	pop    r15
   3a01c:	ret    
   3a01d:	nop    DWORD PTR [rax]
   3a020:	mov    eax,DWORD PTR [rsp+0x28]
   3a024:	add    eax,DWORD PTR [rsp+0x198]
   3a02b:	cmp    eax,0x10
   3a02e:	jne    39b18 <SetMotionVectorPredictor+0x138>
   3a034:	movdqa xmm0,XMMWORD PTR [rsp+0x120]
   3a03d:	mov    rdx,QWORD PTR [rsp+0x130]
   3a045:	mov    eax,DWORD PTR [rsp+0x120]
   3a04c:	mov    QWORD PTR [rsp+0x110],rdx
   3a054:	movaps XMMWORD PTR [rsp+0x100],xmm0
   3a05c:	jmp    39b31 <SetMotionVectorPredictor+0x151>
   3a061:	nop    DWORD PTR [rax+0x0]
   3a068:	test   r15d,r15d
   3a06b:	je     3a0e8 <SetMotionVectorPredictor+0x708>
   3a06d:	cmp    DWORD PTR [rsp+0x4],0x1
   3a072:	mov    DWORD PTR [rsp+0x60],0x0
   3a07a:	je     3a658 <SetMotionVectorPredictor+0xc78>
   3a080:	mov    r11,QWORD PTR [rsp+0x80]
   3a088:	mov    r9,QWORD PTR [r11]
   3a08b:	mov    r11,QWORD PTR [rsp+0x38]
   3a090:	mov    r9,QWORD PTR [r9+r12*1]
   3a094:	mov    r9,QWORD PTR [r9+r11*1]
   3a098:	mov    r9,QWORD PTR [r9+r14*1]
   3a09c:	mov    r11d,DWORD PTR [r9]
   3a09f:	mov    r9d,DWORD PTR [rsp+0x48]
   3a0a4:	mov    DWORD PTR [rsp+0x74],r11d
   3a0a9:	test   r9d,r9d
   3a0ac:	je     3a106 <SetMotionVectorPredictor+0x726>
   3a0ae:	mov    r11,QWORD PTR [rsp+0x88]
   3a0b6:	mov    r9,QWORD PTR [r11]
   3a0b9:	mov    r11,QWORD PTR [rsp+0x68]
   3a0be:	mov    r9,QWORD PTR [r9+r11*1]
   3a0c2:	mov    r11,QWORD PTR [rsp+0x38]
   3a0c7:	mov    r9,QWORD PTR [r9+r11*1]
   3a0cb:	mov    r9,QWORD PTR [r9+r14*1]
   3a0cf:	mov    r11d,DWORD PTR [r9]
   3a0d2:	mov    DWORD PTR [rsp+0x64],r11d
   3a0d7:	test   eax,eax
   3a0d9:	jne    39f10 <SetMotionVectorPredictor+0x530>
   3a0df:	jmp    39f34 <SetMotionVectorPredictor+0x554>
   3a0e4:	nop    DWORD PTR [rax+0x0]
   3a0e8:	mov    r11d,DWORD PTR [rsp+0x48]
   3a0ed:	mov    DWORD PTR [rsp+0x74],0x0
   3a0f5:	mov    DWORD PTR [rsp+0x60],0x0
   3a0fd:	test   r11d,r11d
   3a100:	jne    3a628 <SetMotionVectorPredictor+0xc48>
   3a106:	test   eax,eax
   3a108:	je     3a5d0 <SetMotionVectorPredictor+0xbf0>
   3a10e:	cmp    DWORD PTR [rsp+0x4],0x1
   3a113:	jne    39f10 <SetMotionVectorPredictor+0x530>
   3a119:	mov    r9,QWORD PTR [rsp+0xb8]
   3a121:	mov    r9,QWORD PTR [r9]
   3a124:	mov    r9,QWORD PTR [r9+rbx*1]
   3a128:	mov    r9,QWORD PTR [r9]
   3a12b:	mov    r9,QWORD PTR [r9+r14*1]
   3a12f:	mov    r11d,DWORD PTR [r9]
   3a132:	mov    DWORD PTR [rsp+0x64],r11d
   3a137:	cmp    ebp,0x2
   3a13a:	jne    39f3d <SetMotionVectorPredictor+0x55d>
   3a140:	mov    esi,DWORD PTR [rsp+0x74]
   3a144:	mov    DWORD PTR [rsp+rcx*4+0x140],esi
   3a14b:	mov    esi,edi
   3a14d:	mov    rdi,QWORD PTR [rsp+0x8]
   3a152:	mov    WORD PTR [rdi+rcx*2],si
   3a156:	cmp    rcx,0x1
   3a15a:	je     39fd3 <SetMotionVectorPredictor+0x5f3>
   3a160:	mov    ecx,0x1
   3a165:	lea    r9,[rcx+rcx*1]
   3a169:	test   rcx,rcx
   3a16c:	jne    39dd2 <SetMotionVectorPredictor+0x3f2>
   3a172:	xor    esi,esi
   3a174:	test   r13d,r13d
   3a177:	je     3a193 <SetMotionVectorPredictor+0x7b3>
   3a179:	mov    rdi,QWORD PTR [rsp+0x10]
   3a17e:	mov    rsi,QWORD PTR [rdx]
   3a181:	mov    rsi,QWORD PTR [rsi+rdi*1]
   3a185:	mov    rdi,QWORD PTR [rsp+0x28]
   3a18a:	mov    rsi,QWORD PTR [rsi+rdi*1]
   3a18e:	movsx  esi,WORD PTR [rsi+r9*1]
   3a193:	xor    edi,edi
   3a195:	test   r15d,r15d
   3a198:	je     3a1af <SetMotionVectorPredictor+0x7cf>
   3a19a:	mov    rdi,QWORD PTR [rdx]
   3a19d:	mov    r11,QWORD PTR [rsp+0x20]
   3a1a2:	mov    rdi,QWORD PTR [rdi+r11*1]
   3a1a6:	mov    rdi,QWORD PTR [rdi+r12*1]
   3a1aa:	movsx  edi,WORD PTR [rdi+r9*1]
   3a1af:	xor    r8d,r8d
   3a1b2:	test   eax,eax
   3a1b4:	je     39e98 <SetMotionVectorPredictor+0x4b8>
   3a1ba:	mov    r8,QWORD PTR [rdx]
   3a1bd:	mov    r11,QWORD PTR [rsp+0x18]
   3a1c2:	mov    r8,QWORD PTR [r8+r11*1]
   3a1c6:	mov    r8,QWORD PTR [r8+rbx*1]
   3a1ca:	movsx  r8d,WORD PTR [r8+r9*1]
   3a1cf:	test   r10d,r10d
   3a1d2:	jne    39ea1 <SetMotionVectorPredictor+0x4c1>
   3a1d8:	cmp    ebp,0x2
   3a1db:	je     3a488 <SetMotionVectorPredictor+0xaa8>
   3a1e1:	cmp    ebp,0x3
   3a1e4:	je     3a3d0 <SetMotionVectorPredictor+0x9f0>
   3a1ea:	cmp    ebp,0x1
   3a1ed:	je     39fc0 <SetMotionVectorPredictor+0x5e0>
   3a1f3:	cmp    DWORD PTR [rsp+0x70],0x0
   3a1f8:	je     39fc0 <SetMotionVectorPredictor+0x5e0>
   3a1fe:	lea    r9d,[rsi+rdi*1]
   3a202:	mov    r11d,edi
   3a205:	add    r9d,r8d
   3a208:	cmp    esi,edi
   3a20a:	cmovle r11d,esi
   3a20e:	cmp    r11d,r8d
   3a211:	cmovg  r11d,r8d
   3a215:	sub    r9d,r11d
   3a218:	cmp    esi,edi
   3a21a:	cmovl  esi,edi
   3a21d:	cmp    esi,r8d
   3a220:	cmovl  esi,r8d
   3a224:	sub    r9d,esi
   3a227:	mov    esi,r9d
   3a22a:	jmp    39fc0 <SetMotionVectorPredictor+0x5e0>
   3a22f:	nop
   3a230:	cmp    DWORD PTR [rsp+0x198],0x10
   3a238:	jne    39cba <SetMotionVectorPredictor+0x2da>
   3a23e:	cmp    DWORD PTR [rsp+0x1a0],0x8
   3a246:	jne    39cba <SetMotionVectorPredictor+0x2da>
   3a24c:	test   r14d,r14d
   3a24f:	jne    3a268 <SetMotionVectorPredictor+0x888>
   3a251:	cmp    ebx,r8d
   3a254:	mov    edx,0x2
   3a259:	cmove  ebp,edx
   3a25c:	jmp    39cba <SetMotionVectorPredictor+0x2da>
   3a261:	nop    DWORD PTR [rax+0x0]
   3a268:	cmp    ebx,edi
   3a26a:	mov    edx,0x1
   3a26f:	cmove  ebp,edx
   3a272:	jmp    39cba <SetMotionVectorPredictor+0x2da>
   3a277:	nop    WORD PTR [rax+rax*1+0x0]
   3a280:	mov    rdi,QWORD PTR [rsp+0x40]
   3a285:	mov    rcx,QWORD PTR [rdi+0x3758]
   3a28c:	movsxd rdi,DWORD PTR [rdi+0xc]
   3a290:	imul   rdi,rdi,0x278
   3a297:	mov    r11d,DWORD PTR [rcx+rdi*1+0x214]
   3a29f:	mov    edi,0xffffffff
   3a2a4:	test   r11d,r11d
   3a2a7:	je     3a490 <SetMotionVectorPredictor+0xab0>
   3a2ad:	test   r13d,r13d
   3a2b0:	je     3a2d4 <SetMotionVectorPredictor+0x8f4>
   3a2b2:	mov    rdi,QWORD PTR [rbp+rdx*8+0x0]
   3a2b7:	mov    rsi,QWORD PTR [rdi+rsi*8]
   3a2bb:	movsx  edi,WORD PTR [rsi+r10*2]
   3a2c0:	mov    rsi,QWORD PTR [rsp+0x50]
   3a2c5:	mov    r8d,DWORD PTR [rcx+rsi*1+0x214]
   3a2cd:	test   r8d,r8d
   3a2d0:	jne    3a2d4 <SetMotionVectorPredictor+0x8f4>
   3a2d2:	add    edi,edi
   3a2d4:	movsxd rsi,DWORD PTR [rsp+0xe4]
   3a2dc:	mov    r15d,DWORD PTR [rsp+0xe0]
   3a2e4:	movsxd r11,DWORD PTR [rsp+0xf4]
   3a2ec:	imul   r12,rsi,0x278
   3a2f3:	movsxd rsi,DWORD PTR [rsp+0xf0]
   3a2fb:	lea    r8,[rsi*8+0x0]
   3a303:	mov    QWORD PTR [rsp+0x20],r8
   3a308:	mov    r8d,0xffffffff
   3a30e:	mov    QWORD PTR [rsp+0x98],r12
   3a316:	test   r15d,r15d
   3a319:	je     3a338 <SetMotionVectorPredictor+0x958>
   3a31b:	mov    r8,QWORD PTR [rbp+rdx*8+0x0]
   3a320:	mov    rsi,QWORD PTR [r8+rsi*8]
   3a324:	movsx  r8d,WORD PTR [rsi+r11*2]
   3a329:	mov    esi,DWORD PTR [rcx+r12*1+0x214]
   3a331:	test   esi,esi
   3a333:	jne    3a338 <SetMotionVectorPredictor+0x958>
   3a335:	add    r8d,r8d
   3a338:	movsxd rsi,DWORD PTR [rsp+0x104]
   3a340:	movsxd r12,DWORD PTR [rsp+0x110]
   3a348:	imul   rsi,rsi,0x278
   3a34f:	mov    QWORD PTR [rsp+0x58],rsi
   3a354:	lea    rsi,[r12*8+0x0]
   3a35c:	mov    QWORD PTR [rsp+0x18],rsi
   3a361:	movsxd rsi,DWORD PTR [rsp+0x114]
   3a369:	mov    QWORD PTR [rsp+0x30],rsi
   3a36e:	mov    esi,0xffffffff
   3a373:	test   eax,eax
   3a375:	je     39c52 <SetMotionVectorPredictor+0x272>
   3a37b:	mov    rdx,QWORD PTR [rbp+rdx*8+0x0]
   3a380:	mov    rbp,QWORD PTR [rsp+0x30]
   3a385:	mov    rdx,QWORD PTR [rdx+r12*8]
   3a389:	movsx  esi,WORD PTR [rdx+rbp*2]
   3a38d:	mov    rdx,QWORD PTR [rsp+0x58]
   3a392:	mov    edx,DWORD PTR [rcx+rdx*1+0x214]
   3a399:	test   edx,edx
   3a39b:	jne    39c52 <SetMotionVectorPredictor+0x272>
   3a3a1:	add    esi,esi
   3a3a3:	jmp    39c52 <SetMotionVectorPredictor+0x272>
   3a3a8:	nop    DWORD PTR [rax+rax*1+0x0]
   3a3b0:	mov    eax,DWORD PTR [rsp+0x100]
   3a3b7:	jmp    39b29 <SetMotionVectorPredictor+0x149>
   3a3bc:	nop    DWORD PTR [rax+0x0]
   3a3c0:	xor    ebp,ebp
   3a3c2:	cmp    edi,r8d
   3a3c5:	setne  bpl
   3a3c9:	and    ebp,edx
   3a3cb:	jmp    39c86 <SetMotionVectorPredictor+0x2a6>
   3a3d0:	mov    esi,r8d
   3a3d3:	jmp    39fc0 <SetMotionVectorPredictor+0x5e0>
   3a3d8:	nop    DWORD PTR [rax+rax*1+0x0]
   3a3e0:	test   r13d,r13d
   3a3e3:	je     3a411 <SetMotionVectorPredictor+0xa31>
   3a3e5:	mov    rdi,QWORD PTR [rsp+0x10]
   3a3ea:	mov    rsi,QWORD PTR [rdx]
   3a3ed:	mov    rsi,QWORD PTR [rsi+rdi*1]
   3a3f1:	mov    rdi,QWORD PTR [rsp+0x28]
   3a3f6:	mov    rsi,QWORD PTR [rsi+rdi*1]
   3a3fa:	mov    rdi,QWORD PTR [rsp+0x50]
   3a3ff:	mov    edi,DWORD PTR [r9+rdi*1+0x214]
   3a407:	movsx  esi,WORD PTR [rsi+0x2]
   3a40b:	test   edi,edi
   3a40d:	je     3a411 <SetMotionVectorPredictor+0xa31>
   3a40f:	add    esi,esi
   3a411:	xor    edi,edi
   3a413:	test   r15d,r15d
   3a416:	je     3a443 <SetMotionVectorPredictor+0xa63>
   3a418:	mov    r8,QWORD PTR [rsp+0x20]
   3a41d:	mov    rdi,QWORD PTR [rdx]
   3a420:	mov    rdi,QWORD PTR [rdi+r8*1]
   3a424:	mov    r8,QWORD PTR [rsp+0x98]
   3a42c:	mov    rdi,QWORD PTR [rdi+r12*1]
   3a430:	mov    r11d,DWORD PTR [r9+r8*1+0x214]
   3a438:	movsx  edi,WORD PTR [rdi+0x2]
   3a43c:	test   r11d,r11d
   3a43f:	je     3a443 <SetMotionVectorPredictor+0xa63>
   3a441:	add    edi,edi
   3a443:	xor    r8d,r8d
   3a446:	test   eax,eax
   3a448:	je     39e98 <SetMotionVectorPredictor+0x4b8>
   3a44e:	mov    r11,QWORD PTR [rsp+0x18]
   3a453:	mov    r8,QWORD PTR [rdx]
   3a456:	mov    r8,QWORD PTR [r8+r11*1]
   3a45a:	mov    r11,QWORD PTR [rsp+0x58]
   3a45f:	mov    r8,QWORD PTR [r8+rbx*1]
   3a463:	mov    r9d,DWORD PTR [r9+r11*1+0x214]
   3a46b:	movsx  r8d,WORD PTR [r8+0x2]
   3a470:	test   r9d,r9d
   3a473:	je     39e98 <SetMotionVectorPredictor+0x4b8>
   3a479:	add    r8d,r8d
   3a47c:	jmp    39e98 <SetMotionVectorPredictor+0x4b8>
   3a481:	nop    DWORD PTR [rax+0x0]
   3a488:	mov    esi,edi
   3a48a:	jmp    39fc0 <SetMotionVectorPredictor+0x5e0>
   3a48f:	nop
   3a490:	test   r13d,r13d
   3a493:	je     3a4bd <SetMotionVectorPredictor+0xadd>
   3a495:	mov    rdi,QWORD PTR [rbp+rdx*8+0x0]
   3a49a:	mov    r15,QWORD PTR [rsp+0x50]
   3a49f:	mov    rsi,QWORD PTR [rdi+rsi*8]
   3a4a3:	mov    r15d,DWORD PTR [rcx+r15*1+0x214]
   3a4ab:	movsx  edi,WORD PTR [rsi+r10*2]
   3a4b0:	mov    esi,edi
   3a4b2:	test   r15d,r15d
   3a4b5:	je     3a4bd <SetMotionVectorPredictor+0xadd>
   3a4b7:	sar    si,1
   3a4ba:	movsx  edi,si
   3a4bd:	movsxd rsi,DWORD PTR [rsp+0xe4]
   3a4c5:	mov    r15d,DWORD PTR [rsp+0xe0]
   3a4cd:	movsxd r11,DWORD PTR [rsp+0xf4]
   3a4d5:	imul   r12,rsi,0x278
   3a4dc:	movsxd rsi,DWORD PTR [rsp+0xf0]
   3a4e4:	lea    r8,[rsi*8+0x0]
   3a4ec:	mov    QWORD PTR [rsp+0x20],r8
   3a4f1:	mov    r8d,0xffffffff
   3a4f7:	mov    QWORD PTR [rsp+0x98],r12
   3a4ff:	test   r15d,r15d
   3a502:	je     3a529 <SetMotionVectorPredictor+0xb49>
   3a504:	mov    r8,QWORD PTR [rbp+rdx*8+0x0]
   3a509:	mov    r12d,DWORD PTR [rcx+r12*1+0x214]
   3a511:	mov    rsi,QWORD PTR [r8+rsi*8]
   3a515:	movsx  r8d,WORD PTR [rsi+r11*2]
   3a51a:	mov    esi,r8d
   3a51d:	test   r12d,r12d
   3a520:	je     3a529 <SetMotionVectorPredictor+0xb49>
   3a522:	sar    si,1
   3a525:	movsx  r8d,si
   3a529:	movsxd rsi,DWORD PTR [rsp+0x104]
   3a531:	movsxd r12,DWORD PTR [rsp+0x110]
   3a539:	imul   rsi,rsi,0x278
   3a540:	mov    QWORD PTR [rsp+0x58],rsi
   3a545:	lea    rsi,[r12*8+0x0]
   3a54d:	mov    QWORD PTR [rsp+0x18],rsi
   3a552:	movsxd rsi,DWORD PTR [rsp+0x114]
   3a55a:	mov    QWORD PTR [rsp+0x30],rsi
   3a55f:	mov    esi,0xffffffff
   3a564:	test   eax,eax
   3a566:	je     39c52 <SetMotionVectorPredictor+0x272>
   3a56c:	mov    rdx,QWORD PTR [rbp+rdx*8+0x0]
   3a571:	mov    rbp,QWORD PTR [rsp+0x58]
   3a576:	mov    rdx,QWORD PTR [rdx+r12*8]
   3a57a:	mov    r12,QWORD PTR [rsp+0x30]
   3a57f:	mov    ecx,DWORD PTR [rcx+rbp*1+0x214]
   3a586:	movsx  esi,WORD PTR [rdx+r12*2]
   3a58b:	mov    edx,esi
   3a58d:	test   ecx,ecx
   3a58f:	je     39c52 <SetMotionVectorPredictor+0x272>
   3a595:	sar    dx,1
   3a598:	movsx  esi,dx
   3a59b:	jmp    39c52 <SetMotionVectorPredictor+0x272>
   3a5a0:	mov    edi,DWORD PTR [rsp+0x60]
   3a5a4:	mov    DWORD PTR [rsp+rcx*4+0x140],edi
   3a5ab:	jmp    39fc0 <SetMotionVectorPredictor+0x5e0>
   3a5b0:	mov    edi,DWORD PTR [rsp+0x64]
   3a5b4:	mov    esi,r8d
   3a5b7:	mov    DWORD PTR [rsp+rcx*4+0x140],edi
   3a5be:	jmp    39fc0 <SetMotionVectorPredictor+0x5e0>
   3a5c3:	nop    DWORD PTR [rax+rax*1+0x0]
   3a5c8:	xor    ebp,ebp
   3a5ca:	jmp    39c86 <SetMotionVectorPredictor+0x2a6>
   3a5cf:	nop
   3a5d0:	mov    DWORD PTR [rsp+0x64],0x0
   3a5d8:	jmp    39f34 <SetMotionVectorPredictor+0x554>
   3a5dd:	nop    DWORD PTR [rax]
   3a5e0:	mov    r11,QWORD PTR [rsp+0x18]
   3a5e5:	mov    r8,QWORD PTR [rdx]
   3a5e8:	mov    r8,QWORD PTR [r8+r11*1]
   3a5ec:	mov    r11,QWORD PTR [rsp+0x58]
   3a5f1:	mov    r8,QWORD PTR [r8+rbx*1]
   3a5f5:	mov    r9d,DWORD PTR [r9+r11*1+0x214]
   3a5fd:	movsx  r8d,WORD PTR [r8+0x2]
   3a602:	test   r9d,r9d
   3a605:	jne    39e98 <SetMotionVectorPredictor+0x4b8>
   3a60b:	mov    r9d,r8d
   3a60e:	shr    r9w,0xf
   3a613:	add    r8d,r9d
   3a616:	sar    r8w,1
   3a61a:	movsx  r8d,r8w
   3a61e:	jmp    39e98 <SetMotionVectorPredictor+0x4b8>
   3a623:	nop    DWORD PTR [rax+rax*1+0x0]
   3a628:	cmp    DWORD PTR [rsp+0x4],0x1
   3a62d:	jne    3a0ae <SetMotionVectorPredictor+0x6ce>
   3a633:	mov    DWORD PTR [rsp+0x74],r15d
   3a638:	mov    DWORD PTR [rsp+0x60],r15d
   3a63d:	jmp    3a689 <SetMotionVectorPredictor+0xca9>
   3a63f:	nop
   3a640:	cmp    DWORD PTR [rsp+0x198],0x10
   3a648:	jne    39b18 <SetMotionVectorPredictor+0x138>
   3a64e:	jmp    3a034 <SetMotionVectorPredictor+0x654>
   3a653:	nop    DWORD PTR [rax+rax*1+0x0]
   3a658:	mov    DWORD PTR [rsp+0x60],r13d
   3a65d:	mov    r11,QWORD PTR [rsp+0xa8]
   3a665:	mov    r9,QWORD PTR [r11]
   3a668:	mov    r9,QWORD PTR [r9+r12*1]
   3a66c:	mov    r9,QWORD PTR [r9]
   3a66f:	mov    r9,QWORD PTR [r9+r14*1]
   3a673:	mov    r11d,DWORD PTR [r9]
   3a676:	mov    DWORD PTR [rsp+0x74],r11d
   3a67b:	mov    r11d,DWORD PTR [rsp+0x48]
   3a680:	test   r11d,r11d
   3a683:	je     3a106 <SetMotionVectorPredictor+0x726>
   3a689:	mov    r11,QWORD PTR [rsp+0xb0]
   3a691:	mov    r9,QWORD PTR [r11]
   3a694:	mov    r11,QWORD PTR [rsp+0x68]
   3a699:	mov    r9,QWORD PTR [r9+r11*1]
   3a69d:	mov    r9,QWORD PTR [r9]
   3a6a0:	mov    r9,QWORD PTR [r9+r14*1]
   3a6a4:	mov    r11d,DWORD PTR [r9]
   3a6a7:	mov    DWORD PTR [rsp+0x64],r11d
   3a6ac:	test   eax,eax
   3a6ae:	jne    3a119 <SetMotionVectorPredictor+0x739>
   3a6b4:	jmp    39f34 <SetMotionVectorPredictor+0x554>
   3a6b9:	nop    DWORD PTR [rax+0x0]
   3a6c0:	cmp    edi,esi
   3a6c2:	jne    3a750 <SetMotionVectorPredictor+0xd70>
   3a6c8:	mov    edi,DWORD PTR [rsp+0x74]
   3a6cc:	test   edi,edi
   3a6ce:	je     3a750 <SetMotionVectorPredictor+0xd70>
   3a6d4:	mov    DWORD PTR [rsp+rcx*4+0x140],edi
   3a6db:	jmp    39fc0 <SetMotionVectorPredictor+0x5e0>
   3a6e0:	mov    DWORD PTR [rsp+0x64],0x0
   3a6e8:	mov    DWORD PTR [rsp+0x74],0x0
   3a6f0:	jmp    39f34 <SetMotionVectorPredictor+0x554>
   3a6f5:	nop    DWORD PTR [rax]
   3a6f8:	mov    r11,QWORD PTR [rsp+0xa0]
   3a700:	mov    r9,QWORD PTR [r11]
   3a703:	mov    r11,QWORD PTR [rsp+0x28]
   3a708:	mov    r9,QWORD PTR [r9+r11*1]
   3a70c:	mov    r9,QWORD PTR [r9]
   3a70f:	mov    r9,QWORD PTR [r9+r14*1]
   3a713:	mov    r11d,DWORD PTR [r9]
   3a716:	mov    DWORD PTR [rsp+0x60],r11d
   3a71b:	test   r15d,r15d
   3a71e:	jne    3a65d <SetMotionVectorPredictor+0xc7d>
   3a724:	mov    r11d,DWORD PTR [rsp+0x48]
   3a729:	test   r11d,r11d
   3a72c:	jne    3a760 <SetMotionVectorPredictor+0xd80>
   3a72e:	test   eax,eax
   3a730:	je     3a6e0 <SetMotionVectorPredictor+0xd00>
   3a732:	mov    DWORD PTR [rsp+0x74],0x0
   3a73a:	jmp    3a119 <SetMotionVectorPredictor+0x739>
   3a73f:	nop
   3a740:	mov    r8d,0x1
   3a746:	jmp    39f9a <SetMotionVectorPredictor+0x5ba>
   3a74b:	nop    DWORD PTR [rax+rax*1+0x0]
   3a750:	mov    edi,DWORD PTR [rsp+0x64]
   3a754:	jmp    3a6d4 <SetMotionVectorPredictor+0xcf4>
   3a759:	nop    DWORD PTR [rax+0x0]
   3a760:	mov    DWORD PTR [rsp+0x74],0x0
   3a768:	jmp    3a689 <SetMotionVectorPredictor+0xca9>
   3a76d:	call   4390 <__stack_chk_fail@plt>
   3a772:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3a77d:	nop    DWORD PTR [rax]

000000000003a780 <SetupFastFullPelSearch>:
   3a780:	endbr64 
   3a784:	push   r15
   3a786:	movsxd rdx,esi
   3a789:	mov    r8d,esi
   3a78c:	push   r14
   3a78e:	push   r13
   3a790:	push   r12
   3a792:	push   rbp
   3a793:	push   rbx
   3a794:	movsx  rbx,di
   3a798:	lea    rbp,[rbx*4+0x0]
   3a7a0:	sub    rsp,0x2a8
   3a7a7:	mov    DWORD PTR [rsp+0x78],esi
   3a7ab:	mov    rax,QWORD PTR fs:0x28
   3a7b4:	mov    QWORD PTR [rsp+0x298],rax
   3a7bc:	xor    eax,eax
   3a7be:	mov    rax,QWORD PTR [rip+0x4e863]        # 89028 <BlockSAD>
   3a7c5:	mov    QWORD PTR [rsp+0x60],rbx
   3a7ca:	mov    QWORD PTR [rsp+0x68],rdx
   3a7cf:	mov    rax,QWORD PTR [rax+rdx*8]
   3a7d3:	mov    rax,QWORD PTR [rax+rbx*8]
   3a7d7:	mov    rax,QWORD PTR [rax+0x38]
   3a7db:	mov    QWORD PTR [rsp+0x50],rax
   3a7e0:	mov    rax,QWORD PTR [rip+0x4e839]        # 89020 <max_search_range>
   3a7e7:	mov    rax,QWORD PTR [rax+rdx*8]
   3a7eb:	mov    rdx,QWORD PTR [rip+0x4ddbe]        # 885b0 <img>
   3a7f2:	mov    ebx,DWORD PTR [rax+rbx*4]
   3a7f5:	mov    r13d,DWORD PTR [rdx+0x11ad0]
   3a7fc:	lea    eax,[rbx+rbx*1+0x1]
   3a800:	imul   eax,eax
   3a803:	mov    DWORD PTR [rsp+0x40],eax
   3a807:	mov    eax,esi
   3a809:	test   r13d,r13d
   3a80c:	je     3a833 <SetupFastFullPelSearch+0xb3>
   3a80e:	movsxd rcx,DWORD PTR [rdx+0xc]
   3a812:	mov    rsi,rcx
   3a815:	imul   rcx,rcx,0x278
   3a81c:	add    rcx,QWORD PTR [rdx+0x3758]
   3a823:	mov    r12d,DWORD PTR [rcx+0x214]
   3a82a:	test   r12d,r12d
   3a82d:	jne    3ad0b <SetupFastFullPelSearch+0x58b>
   3a833:	mov    rcx,QWORD PTR [rip+0x665c6]        # a0e00 <active_pps>
   3a83a:	lea    rsi,[rip+0x7cbdf]        # b7420 <listX>
   3a841:	cdqe   
   3a843:	mov    rax,QWORD PTR [rsi+rax*8]
   3a847:	mov    rsi,QWORD PTR [rsp+0x60]
   3a84c:	mov    r11d,DWORD PTR [rcx+0xc0]
   3a853:	mov    rax,QWORD PTR [rax+rsi*8]
   3a857:	test   r11d,r11d
   3a85a:	je     3a870 <SetupFastFullPelSearch+0xf0>
   3a85c:	mov    esi,DWORD PTR [rdx+0x18]
   3a85f:	test   esi,esi
   3a861:	je     3ace3 <SetupFastFullPelSearch+0x563>
   3a867:	cmp    esi,0x3
   3a86a:	je     3ace3 <SetupFastFullPelSearch+0x563>
   3a870:	mov    r10d,DWORD PTR [rcx+0xc4]
   3a877:	test   r10d,r10d
   3a87a:	jne    3acd9 <SetupFastFullPelSearch+0x559>
   3a880:	mov    rdx,QWORD PTR [rax+0x1920]
   3a887:	mov    QWORD PTR [rsp+0x10],rdx
   3a88c:	mov    edx,DWORD PTR [rax+0x18f8]
   3a892:	mov    eax,DWORD PTR [rax+0x18fc]
   3a898:	movsx  ecx,di
   3a89b:	xor    r9d,r9d
   3a89e:	mov    DWORD PTR [rsp+0x7c],ecx
   3a8a2:	lea    rdi,[rsp+0x8c]
   3a8aa:	sub    rsp,0x8
   3a8ae:	mov    DWORD PTR [rsp+0x20],eax
   3a8b2:	sub    eax,0x11
   3a8b5:	mov    DWORD PTR [rsp+0x14],edx
   3a8b9:	sub    edx,0x11
   3a8bc:	mov    DWORD PTR [rsp+0x78],eax
   3a8c0:	mov    rax,QWORD PTR [rip+0x500e1]        # 8a9a8 <enc_picture>
   3a8c7:	mov    DWORD PTR [rsp+0x7c],edx
   3a8cb:	mov    rsi,QWORD PTR [rax+0x1950]
   3a8d2:	mov    rdx,QWORD PTR [rax+0x1968]
   3a8d9:	push   0x10
   3a8db:	push   0x10
   3a8dd:	push   0x0
   3a8df:	mov    r8d,DWORD PTR [rsp+0x98]
   3a8e7:	call   399e0 <SetMotionVectorPredictor>
   3a8ec:	mov    rdi,QWORD PTR [rsp+0x88]
   3a8f4:	mov    rax,QWORD PTR [rip+0x4e745]        # 89040 <search_center_x>
   3a8fb:	movzx  ecx,WORD PTR [rsp+0xac]
   3a903:	add    rsp,0x20
   3a907:	mov    r10,QWORD PTR [rip+0x4dcaa]        # 885b8 <input>
   3a90e:	mov    rdx,QWORD PTR [rax+rdi*8]
   3a912:	lea    eax,[rcx+0x3]
   3a915:	add    rdx,rbp
   3a918:	test   cx,cx
   3a91b:	cmovns eax,ecx
   3a91e:	movzx  ecx,WORD PTR [rsp+0x8e]
   3a926:	sar    ax,0x2
   3a92a:	cwde   
   3a92b:	mov    DWORD PTR [rdx],eax
   3a92d:	mov    rax,QWORD PTR [rip+0x4e704]        # 89038 <search_center_y>
   3a934:	add    rbp,QWORD PTR [rax+rdi*8]
   3a938:	test   cx,cx
   3a93b:	lea    eax,[rcx+0x3]
   3a93e:	cmovns eax,ecx
   3a941:	sar    ax,0x2
   3a945:	cwde   
   3a946:	mov    DWORD PTR [rbp+0x0],eax
   3a949:	mov    r8d,DWORD PTR [r10+0x9a0]
   3a950:	test   r8d,r8d
   3a953:	jne    3a978 <SetupFastFullPelSearch+0x1f8>
   3a955:	mov    ecx,ebx
   3a957:	mov    eax,ebx
   3a959:	neg    ecx
   3a95b:	cmp    DWORD PTR [rdx],ebx
   3a95d:	cmovle eax,DWORD PTR [rdx]
   3a960:	cmp    eax,ecx
   3a962:	cmovl  eax,ecx
   3a965:	mov    DWORD PTR [rdx],eax
   3a967:	mov    eax,ebx
   3a969:	cmp    DWORD PTR [rbp+0x0],ebx
   3a96c:	cmovle eax,DWORD PTR [rbp+0x0]
   3a970:	cmp    eax,ecx
   3a972:	cmovl  eax,ecx
   3a975:	mov    DWORD PTR [rbp+0x0],eax
   3a978:	mov    rax,QWORD PTR [rip+0x4dc31]        # 885b0 <img>
   3a97f:	lea    r8,[rsp+0x290]
   3a987:	mov    ecx,DWORD PTR [rax+0xa8]
   3a98d:	add    DWORD PTR [rdx],ecx
   3a98f:	mov    ecx,DWORD PTR [rax+0xac]
   3a995:	add    ecx,DWORD PTR [rbp+0x0]
   3a998:	mov    DWORD PTR [rbp+0x0],ecx
   3a99b:	mov    edi,DWORD PTR [rdx]
   3a99d:	mov    DWORD PTR [rsp+0x48],ecx
   3a9a1:	movsxd rdx,DWORD PTR [rax+0xac]
   3a9a8:	mov    DWORD PTR [rsp+0x44],edi
   3a9ac:	movsxd rdi,DWORD PTR [rax+0xa8]
   3a9b3:	mov    rax,QWORD PTR [rip+0x7ca0e]        # b73c8 <imgY_org>
   3a9ba:	mov    r11,rdx
   3a9bd:	mov    r9,rdi
   3a9c0:	add    rdi,rdi
   3a9c3:	lea    rsi,[rax+rdx*8]
   3a9c7:	lea    rdx,[rsp+0x90]
   3a9cf:	nop
   3a9d0:	mov    rbp,QWORD PTR [rsi]
   3a9d3:	xor    eax,eax
   3a9d5:	add    rbp,rdi
   3a9d8:	nop    DWORD PTR [rax+rax*1+0x0]
   3a9e0:	movzx  ecx,WORD PTR [rbp+rax*1+0x0]
   3a9e5:	mov    WORD PTR [rdx+rax*1],cx
   3a9e9:	add    rax,0x2
   3a9ed:	cmp    rax,0x20
   3a9f1:	jne    3a9e0 <SetupFastFullPelSearch+0x260>
   3a9f3:	add    rdx,0x20
   3a9f7:	add    rsi,0x8
   3a9fb:	cmp    rdx,r8
   3a9fe:	jne    3a9d0 <SetupFastFullPelSearch+0x250>
   3aa00:	mov    edi,DWORD PTR [rsp+0x44]
   3aa04:	mov    DWORD PTR [rsp+0x4c],0x1
   3aa0c:	cmp    ebx,edi
   3aa0e:	jg     3aa2e <SetupFastFullPelSearch+0x2ae>
   3aa10:	mov    eax,DWORD PTR [rsp+0x74]
   3aa14:	sub    eax,ebx
   3aa16:	cmp    eax,edi
   3aa18:	jl     3aa26 <SetupFastFullPelSearch+0x2a6>
   3aa1a:	mov    edi,DWORD PTR [rsp+0x48]
   3aa1e:	cmp    edi,ebx
   3aa20:	jge    3adfd <SetupFastFullPelSearch+0x67d>
   3aa26:	mov    DWORD PTR [rsp+0x4c],0x1
   3aa2e:	mov    edi,DWORD PTR [r10+0x9a0]
   3aa35:	test   edi,edi
   3aa37:	je     3ac72 <SetupFastFullPelSearch+0x4f2>
   3aa3d:	mov    esi,DWORD PTR [rsp+0x40]
   3aa41:	mov    rdx,QWORD PTR [rip+0x7ca20]        # b7468 <spiral_search_x>
   3aa48:	mov    rcx,QWORD PTR [rip+0x7ca41]        # b7490 <spiral_search_y>
   3aa4f:	test   esi,esi
   3aa51:	jle    3adab <SetupFastFullPelSearch+0x62b>
   3aa57:	lea    rax,[rsp+0x110]
   3aa5f:	mov    QWORD PTR [rsp+0x38],0x0
   3aa68:	mov    QWORD PTR [rsp+0x58],rax
   3aa6d:	lea    rax,[rsp+0x310]
   3aa75:	mov    QWORD PTR [rsp+0x30],rax
   3aa7a:	nop    WORD PTR [rax+rax*1+0x0]
   3aa80:	mov    rax,QWORD PTR [rsp+0x38]
   3aa85:	mov    ebx,DWORD PTR [rsp+0x44]
   3aa89:	lea    rdi,[rax*4+0x0]
   3aa91:	add    ebx,DWORD PTR [rdx+rax*4]
   3aa94:	mov    edx,DWORD PTR [rsp+0x4c]
   3aa98:	mov    QWORD PTR [rsp+0x28],rdi
   3aa9d:	mov    edi,DWORD PTR [rsp+0x48]
   3aaa1:	add    edi,DWORD PTR [rcx+rax*4]
   3aaa4:	mov    rax,QWORD PTR [rip+0x4e5a5]        # 89050 <PelYline_11>
   3aaab:	mov    DWORD PTR [rsp+0x8],ebx
   3aaaf:	mov    DWORD PTR [rsp+0x1c],edi
   3aab3:	test   edx,edx
   3aab5:	je     3aaf0 <SetupFastFullPelSearch+0x370>
   3aab7:	test   edi,edi
   3aab9:	js     3ad98 <SetupFastFullPelSearch+0x618>
   3aabf:	cmp    DWORD PTR [rsp+0x70],edi
   3aac3:	jl     3ad98 <SetupFastFullPelSearch+0x618>
   3aac9:	test   ebx,ebx
   3aacb:	js     3ad98 <SetupFastFullPelSearch+0x618>
   3aad1:	cmp    DWORD PTR [rsp+0x74],ebx
   3aad5:	jl     3ad98 <SetupFastFullPelSearch+0x618>
   3aadb:	lea    rax,[rip+0x2312e]        # 5dc10 <FastLine16Y_11>
   3aae2:	mov    QWORD PTR [rip+0x4e567],rax        # 89050 <PelYline_11>
   3aae9:	nop    DWORD PTR [rax+0x0]
   3aaf0:	mov    rdi,QWORD PTR [rsp+0x58]
   3aaf5:	mov    r14,QWORD PTR [rsp+0x50]
   3aafa:	mov    QWORD PTR [rsp],rdi
   3aafe:	mov    rdi,QWORD PTR [rsp]
   3ab02:	mov    QWORD PTR [rsp+0x20],r14
   3ab07:	xor    r13d,r13d
   3ab0a:	xor    r15d,r15d
   3ab0d:	mov    esi,DWORD PTR [rsp+0x1c]
   3ab11:	xor    r12d,r12d
   3ab14:	xor    ebp,ebp
   3ab16:	lea    rbx,[rdi-0x80]
   3ab1a:	mov    ecx,DWORD PTR [rsp+0x18]
   3ab1e:	mov    edx,DWORD PTR [rsp+0x8]
   3ab22:	lea    r14d,[rsi+0x1]
   3ab26:	add    rbx,0x20
   3ab2a:	mov    r8d,DWORD PTR [rsp+0xc]
   3ab2f:	mov    rdi,QWORD PTR [rsp+0x10]
   3ab34:	call   rax
   3ab36:	movzx  esi,WORD PTR [rbx-0x20]
   3ab3a:	mov    rdx,QWORD PTR [rip+0x7c957]        # b7498 <byte_abs>
   3ab41:	movzx  ecx,WORD PTR [rax]
   3ab44:	sub    ecx,esi
   3ab46:	movzx  esi,WORD PTR [rbx-0x1e]
   3ab4a:	movsxd rcx,ecx
   3ab4d:	add    ebp,DWORD PTR [rdx+rcx*4]
   3ab50:	movzx  ecx,WORD PTR [rax+0x2]
   3ab54:	sub    ecx,esi
   3ab56:	movzx  esi,WORD PTR [rbx-0x1c]
   3ab5a:	movsxd rcx,ecx
   3ab5d:	add    ebp,DWORD PTR [rdx+rcx*4]
   3ab60:	movzx  ecx,WORD PTR [rax+0x4]
   3ab64:	sub    ecx,esi
   3ab66:	movzx  esi,WORD PTR [rbx-0x1a]
   3ab6a:	movsxd rcx,ecx
   3ab6d:	add    ebp,DWORD PTR [rdx+rcx*4]
   3ab70:	movzx  ecx,WORD PTR [rax+0x6]
   3ab74:	sub    ecx,esi
   3ab76:	movzx  esi,WORD PTR [rbx-0x18]
   3ab7a:	movsxd rcx,ecx
   3ab7d:	add    ebp,DWORD PTR [rdx+rcx*4]
   3ab80:	movzx  ecx,WORD PTR [rax+0x8]
   3ab84:	sub    ecx,esi
   3ab86:	movzx  esi,WORD PTR [rbx-0x16]
   3ab8a:	movsxd rcx,ecx
   3ab8d:	mov    r9d,DWORD PTR [rdx+rcx*4]
   3ab91:	movzx  ecx,WORD PTR [rax+0xa]
   3ab95:	sub    ecx,esi
   3ab97:	add    r9d,r12d
   3ab9a:	movzx  esi,WORD PTR [rbx-0x14]
   3ab9e:	movsxd rcx,ecx
   3aba1:	add    r9d,DWORD PTR [rdx+rcx*4]
   3aba5:	movzx  ecx,WORD PTR [rax+0xc]
   3aba9:	sub    ecx,esi
   3abab:	movzx  esi,WORD PTR [rbx-0x12]
   3abaf:	movsxd rcx,ecx
   3abb2:	add    r9d,DWORD PTR [rdx+rcx*4]
   3abb6:	movzx  ecx,WORD PTR [rax+0xe]
   3abba:	sub    ecx,esi
   3abbc:	movzx  esi,WORD PTR [rbx-0x10]
   3abc0:	movsxd rcx,ecx
   3abc3:	add    r9d,DWORD PTR [rdx+rcx*4]
   3abc7:	movzx  ecx,WORD PTR [rax+0x10]
   3abcb:	mov    r12d,r9d
   3abce:	sub    ecx,esi
   3abd0:	movzx  esi,WORD PTR [rbx-0xe]
   3abd4:	movsxd rcx,ecx
   3abd7:	mov    r10d,DWORD PTR [rdx+rcx*4]
   3abdb:	movzx  ecx,WORD PTR [rax+0x12]
   3abdf:	sub    ecx,esi
   3abe1:	add    r10d,r13d
   3abe4:	movsxd rcx,ecx
   3abe7:	add    r10d,DWORD PTR [rdx+rcx*4]
   3abeb:	movzx  ecx,WORD PTR [rax+0x14]
   3abef:	movzx  esi,WORD PTR [rbx-0xc]
   3abf3:	sub    ecx,esi
   3abf5:	movzx  esi,WORD PTR [rbx-0xa]
   3abf9:	movsxd rcx,ecx
   3abfc:	add    r10d,DWORD PTR [rdx+rcx*4]
   3ac00:	movzx  ecx,WORD PTR [rax+0x16]
   3ac04:	sub    ecx,esi
   3ac06:	movzx  esi,WORD PTR [rbx-0x8]
   3ac0a:	movsxd rcx,ecx
   3ac0d:	add    r10d,DWORD PTR [rdx+rcx*4]
   3ac11:	movzx  ecx,WORD PTR [rax+0x18]
   3ac15:	mov    r13d,r10d
   3ac18:	sub    ecx,esi
   3ac1a:	movzx  esi,WORD PTR [rbx-0x6]
   3ac1e:	movsxd rcx,ecx
   3ac21:	add    r15d,DWORD PTR [rdx+rcx*4]
   3ac25:	movzx  ecx,WORD PTR [rax+0x1a]
   3ac29:	mov    r11d,r15d
   3ac2c:	sub    ecx,esi
   3ac2e:	movzx  esi,WORD PTR [rbx-0x4]
   3ac32:	movsxd rcx,ecx
   3ac35:	add    r11d,DWORD PTR [rdx+rcx*4]
   3ac39:	movzx  ecx,WORD PTR [rax+0x1c]
   3ac3d:	movzx  eax,WORD PTR [rax+0x1e]
   3ac41:	sub    ecx,esi
   3ac43:	movsxd rcx,ecx
   3ac46:	add    r11d,DWORD PTR [rdx+rcx*4]
   3ac4a:	movzx  ecx,WORD PTR [rbx-0x2]
   3ac4e:	sub    eax,ecx
   3ac50:	cdqe   
   3ac52:	mov    r15d,DWORD PTR [rdx+rax*4]
   3ac56:	add    r15d,r11d
   3ac59:	cmp    rbx,QWORD PTR [rsp]
   3ac5d:	je     3ad20 <SetupFastFullPelSearch+0x5a0>
   3ac63:	mov    rax,QWORD PTR [rip+0x4e3e6]        # 89050 <PelYline_11>
   3ac6a:	mov    esi,r14d
   3ac6d:	jmp    3ab1a <SetupFastFullPelSearch+0x39a>
   3ac72:	mov    eax,DWORD PTR [rsp+0x40]
   3ac76:	sub    r9d,DWORD PTR [rsp+0x44]
   3ac7b:	sub    r11d,DWORD PTR [rsp+0x48]
   3ac80:	test   eax,eax
   3ac82:	jle    3adab <SetupFastFullPelSearch+0x62b>
   3ac88:	lea    edi,[rax-0x1]
   3ac8b:	mov    rdx,QWORD PTR [rip+0x7c7d6]        # b7468 <spiral_search_x>
   3ac92:	mov    rcx,QWORD PTR [rip+0x7c7f7]        # b7490 <spiral_search_y>
   3ac99:	xor    eax,eax
   3ac9b:	jmp    3acb0 <SetupFastFullPelSearch+0x530>
   3ac9d:	nop    DWORD PTR [rax]
   3aca0:	lea    rsi,[rax+0x1]
   3aca4:	cmp    rdi,rax
   3aca7:	je     3aa57 <SetupFastFullPelSearch+0x2d7>
   3acad:	mov    rax,rsi
   3acb0:	cmp    DWORD PTR [rdx+rax*4],r9d
   3acb4:	jne    3aca0 <SetupFastFullPelSearch+0x520>
   3acb6:	cmp    DWORD PTR [rcx+rax*4],r11d
   3acba:	jne    3aca0 <SetupFastFullPelSearch+0x520>
   3acbc:	mov    rdi,QWORD PTR [rsp+0x68]
   3acc1:	mov    rsi,QWORD PTR [rip+0x4e368]        # 89030 <pos_00>
   3acc8:	mov    rsi,QWORD PTR [rsi+rdi*8]
   3accc:	mov    rdi,QWORD PTR [rsp+0x60]
   3acd1:	mov    DWORD PTR [rsi+rdi*4],eax
   3acd4:	jmp    3aa57 <SetupFastFullPelSearch+0x2d7>
   3acd9:	cmp    DWORD PTR [rdx+0x18],0x1
   3acdd:	jne    3a880 <SetupFastFullPelSearch+0x100>
   3ace3:	mov    rdx,QWORD PTR [rip+0x4d8ce]        # 885b8 <input>
   3acea:	mov    r9d,DWORD PTR [rdx+0x50c]
   3acf1:	test   r9d,r9d
   3acf4:	je     3a880 <SetupFastFullPelSearch+0x100>
   3acfa:	mov    rdx,QWORD PTR [rax+0x1928]
   3ad01:	mov    QWORD PTR [rsp+0x10],rdx
   3ad06:	jmp    3a88c <SetupFastFullPelSearch+0x10c>
   3ad0b:	lea    ecx,[r8+0x4]
   3ad0f:	lea    eax,[r8+0x2]
   3ad13:	and    esi,0x1
   3ad16:	cmovne eax,ecx
   3ad19:	jmp    3a833 <SetupFastFullPelSearch+0xb3>
   3ad1e:	xchg   ax,ax
   3ad20:	mov    r14,QWORD PTR [rsp+0x20]
   3ad25:	mov    rdi,QWORD PTR [rsp+0x28]
   3ad2a:	sub    QWORD PTR [rsp],0xffffffffffffff80
   3ad2f:	mov    rax,QWORD PTR [r14]
   3ad32:	add    DWORD PTR [rsp+0x1c],0x4
   3ad37:	add    r14,0x20
   3ad3b:	mov    DWORD PTR [rax+rdi*1],ebp
   3ad3e:	mov    rax,QWORD PTR [r14-0x18]
   3ad42:	mov    DWORD PTR [rax+rdi*1],r9d
   3ad46:	mov    rax,QWORD PTR [r14-0x10]
   3ad4a:	mov    DWORD PTR [rax+rdi*1],r10d
   3ad4e:	mov    rax,QWORD PTR [r14-0x8]
   3ad52:	mov    DWORD PTR [rax+rdi*1],r15d
   3ad56:	mov    rax,QWORD PTR [rsp]
   3ad5a:	cmp    QWORD PTR [rsp+0x30],rax
   3ad5f:	je     3ad70 <SetupFastFullPelSearch+0x5f0>
   3ad61:	mov    rax,QWORD PTR [rip+0x4e2e8]        # 89050 <PelYline_11>
   3ad68:	jmp    3aafe <SetupFastFullPelSearch+0x37e>
   3ad6d:	nop    DWORD PTR [rax]
   3ad70:	add    QWORD PTR [rsp+0x38],0x1
   3ad76:	mov    rax,QWORD PTR [rsp+0x38]
   3ad7b:	cmp    DWORD PTR [rsp+0x40],eax
   3ad7f:	jle    3adab <SetupFastFullPelSearch+0x62b>
   3ad81:	mov    rcx,QWORD PTR [rip+0x7c708]        # b7490 <spiral_search_y>
   3ad88:	mov    rdx,QWORD PTR [rip+0x7c6d9]        # b7468 <spiral_search_x>
   3ad8f:	jmp    3aa80 <SetupFastFullPelSearch+0x300>
   3ad94:	nop    DWORD PTR [rax+0x0]
   3ad98:	lea    rax,[rip+0x22e91]        # 5dc30 <UMVLine16Y_11>
   3ad9f:	mov    QWORD PTR [rip+0x4e2aa],rax        # 89050 <PelYline_11>
   3ada6:	jmp    3aaf0 <SetupFastFullPelSearch+0x370>
   3adab:	mov    edi,DWORD PTR [rsp+0x78]
   3adaf:	mov    edx,DWORD PTR [rsp+0x40]
   3adb3:	mov    esi,DWORD PTR [rsp+0x7c]
   3adb7:	call   39550 <SetupLargerBlocks>
   3adbc:	mov    rdi,QWORD PTR [rsp+0x68]
   3adc1:	mov    rax,QWORD PTR [rip+0x4e280]        # 89048 <search_setup_done>
   3adc8:	mov    rax,QWORD PTR [rax+rdi*8]
   3adcc:	mov    rdi,QWORD PTR [rsp+0x60]
   3add1:	mov    DWORD PTR [rax+rdi*4],0x1
   3add8:	mov    rax,QWORD PTR [rsp+0x298]
   3ade0:	xor    rax,QWORD PTR fs:0x28
   3ade9:	jne    3ae26 <SetupFastFullPelSearch+0x6a6>
   3adeb:	add    rsp,0x2a8
   3adf2:	pop    rbx
   3adf3:	pop    rbp
   3adf4:	pop    r12
   3adf6:	pop    r13
   3adf8:	pop    r14
   3adfa:	pop    r15
   3adfc:	ret    
   3adfd:	mov    eax,DWORD PTR [rsp+0x70]
   3ae01:	sub    eax,ebx
   3ae03:	cmp    edi,eax
   3ae05:	jg     3aa2e <SetupFastFullPelSearch+0x2ae>
   3ae0b:	lea    rax,[rip+0x22dfe]        # 5dc10 <FastLine16Y_11>
   3ae12:	mov    DWORD PTR [rsp+0x4c],0x0
   3ae1a:	mov    QWORD PTR [rip+0x4e22f],rax        # 89050 <PelYline_11>
   3ae21:	jmp    3aa2e <SetupFastFullPelSearch+0x2ae>
   3ae26:	call   4390 <__stack_chk_fail@plt>
   3ae2b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003ae30 <Init_Motion_Search_Module>:
   3ae30:	endbr64 
   3ae34:	push   r15
   3ae36:	push   r14
   3ae38:	push   r13
   3ae3a:	push   r12
   3ae3c:	push   rbp
   3ae3d:	push   rbx
   3ae3e:	sub    rsp,0x18
   3ae42:	mov    rdx,QWORD PTR [rip+0x4d767]        # 885b0 <img>
   3ae49:	mov    eax,DWORD PTR [rdx+0x11bec]
   3ae4f:	mov    ebp,DWORD PTR [rdx+0x11bf0]
   3ae55:	cmp    eax,ebp
   3ae57:	jle    3b2b5 <Init_Motion_Search_Module+0x485>
   3ae5d:	lea    ebp,[rax+0x1]
   3ae60:	lea    eax,[rbp+rbp*1+0x0]
   3ae64:	mov    DWORD PTR [rsp+0x8],eax
   3ae68:	mov    rax,QWORD PTR [rip+0x4d749]        # 885b8 <input>
   3ae6f:	cmp    DWORD PTR [rdx+0x24],0xf
   3ae73:	pxor   xmm0,xmm0
   3ae77:	mov    r14d,DWORD PTR [rax+0x20]
   3ae7b:	mov    eax,0xf
   3ae80:	cmovge eax,DWORD PTR [rdx+0x24]
   3ae84:	add    eax,0x1
   3ae87:	lea    ebx,[r14+r14*1]
   3ae8b:	cvtsi2sd xmm0,eax
   3ae8f:	lea    r13d,[rbx+0x1]
   3ae93:	call   43d0 <log@plt>
   3ae98:	divsd  xmm0,QWORD PTR [rip+0x386b8]        # 73558 <quant_coef+0x898>
   3aea0:	addsd  xmm0,QWORD PTR [rip+0x3b1d8]        # 76080 <QP2QUANT+0xa0>
   3aea8:	movq   xmm1,QWORD PTR [rip+0x386c0]        # 73570 <quant_coef+0x8b0>
   3aeb0:	movsd  xmm6,QWORD PTR [rip+0x386a8]        # 73560 <quant_coef+0x8a0>
   3aeb8:	movapd xmm3,xmm1
   3aebc:	movapd xmm2,xmm0
   3aec0:	andpd  xmm2,xmm1
   3aec4:	ucomisd xmm6,xmm2
   3aec8:	jbe    3aefd <Init_Motion_Search_Module+0xcd>
   3aeca:	cvttsd2si rax,xmm0
   3aecf:	pxor   xmm2,xmm2
   3aed3:	movsd  xmm5,QWORD PTR [rip+0x378ed]        # 727c8 <INIT_MB_TYPE_I+0x108>
   3aedb:	andnpd xmm3,xmm0
   3aedf:	cvtsi2sd xmm2,rax
   3aee4:	movapd xmm4,xmm2
   3aee8:	cmpnlesd xmm4,xmm0
   3aeed:	movapd xmm0,xmm3
   3aef1:	andpd  xmm4,xmm5
   3aef5:	subsd  xmm2,xmm4
   3aef9:	orpd   xmm0,xmm2
   3aefd:	cvttsd2si eax,xmm0
   3af01:	pxor   xmm0,xmm0
   3af05:	lea    r12d,[rax+rax*1+0x1]
   3af0a:	mov    eax,0x1
   3af0f:	mov    ecx,r12d
   3af12:	sar    ecx,1
   3af14:	add    ecx,0x1
   3af17:	shl    eax,cl
   3af19:	sub    eax,0x1
   3af1c:	mov    DWORD PTR [rsp+0xc],eax
   3af20:	lea    eax,[rbx*4+0xd]
   3af27:	cvtsi2sd xmm0,eax
   3af2b:	call   43d0 <log@plt>
   3af30:	divsd  xmm0,QWORD PTR [rip+0x38620]        # 73558 <quant_coef+0x898>
   3af38:	addsd  xmm0,QWORD PTR [rip+0x3b140]        # 76080 <QP2QUANT+0xa0>
   3af40:	movq   xmm1,QWORD PTR [rip+0x38628]        # 73570 <quant_coef+0x8b0>
   3af48:	movsd  xmm7,QWORD PTR [rip+0x38610]        # 73560 <quant_coef+0x8a0>
   3af50:	movapd xmm2,xmm0
   3af54:	andpd  xmm2,xmm1
   3af58:	ucomisd xmm7,xmm2
   3af5c:	jbe    3af91 <Init_Motion_Search_Module+0x161>
   3af5e:	cvttsd2si rax,xmm0
   3af63:	pxor   xmm2,xmm2
   3af67:	movapd xmm3,xmm0
   3af6b:	movsd  xmm4,QWORD PTR [rip+0x37855]        # 727c8 <INIT_MB_TYPE_I+0x108>
   3af73:	andnpd xmm1,xmm0
   3af77:	cvtsi2sd xmm2,rax
   3af7c:	cmpnlesd xmm3,xmm2
   3af81:	andpd  xmm3,xmm4
   3af85:	addsd  xmm2,xmm3
   3af89:	orpd   xmm2,xmm1
   3af8d:	movapd xmm0,xmm2
   3af91:	cvttsd2si ebx,xmm0
   3af95:	mov    eax,0x1
   3af9a:	mov    esi,0x4
   3af9f:	imul   r13d,r13d
   3afa3:	add    ebx,ebx
   3afa5:	lea    r15d,[rbx+0x3]
   3afa9:	mov    ecx,r15d
   3afac:	sar    ecx,1
   3afae:	shl    eax,cl
   3afb0:	sub    eax,0x1
   3afb3:	cmp    r13d,0x9
   3afb7:	mov    DWORD PTR [rip+0x7c4b3],eax        # b7470 <max_mvd>
   3afbd:	mov    eax,0x9
   3afc2:	cmovl  r13d,eax
   3afc6:	movsxd r13,r13d
   3afc9:	mov    rdi,r13
   3afcc:	call   4400 <calloc@plt>
   3afd1:	mov    QWORD PTR [rip+0x7c490],rax        # b7468 <spiral_search_x>
   3afd8:	test   rax,rax
   3afdb:	je     3b31e <Init_Motion_Search_Module+0x4ee>
   3afe1:	mov    esi,0x4
   3afe6:	mov    rdi,r13
   3afe9:	call   4400 <calloc@plt>
   3afee:	mov    QWORD PTR [rip+0x7c49b],rax        # b7490 <spiral_search_y>
   3aff5:	test   rax,rax
   3aff8:	je     3b30d <Init_Motion_Search_Module+0x4dd>
   3affe:	mov    eax,DWORD PTR [rip+0x7c46c]        # b7470 <max_mvd>
   3b004:	mov    esi,0x4
   3b009:	lea    edi,[rax+rax*1+0x1]
   3b00d:	movsxd rdi,edi
   3b010:	call   4400 <calloc@plt>
   3b015:	mov    QWORD PTR [rip+0x7c45c],rax        # b7478 <mvbits>
   3b01c:	test   rax,rax
   3b01f:	je     3b2fc <Init_Motion_Search_Module+0x4cc>
   3b025:	movsxd rdi,DWORD PTR [rsp+0xc]
   3b02a:	mov    esi,0x4
   3b02f:	call   4400 <calloc@plt>
   3b034:	mov    QWORD PTR [rip+0x7c44d],rax        # b7488 <refbits>
   3b03b:	test   rax,rax
   3b03e:	je     3b2eb <Init_Motion_Search_Module+0x4bb>
   3b044:	movsxd rdi,DWORD PTR [rsp+0x8]
   3b049:	mov    esi,0x4
   3b04e:	call   4400 <calloc@plt>
   3b053:	mov    QWORD PTR [rip+0x7c43e],rax        # b7498 <byte_abs>
   3b05a:	test   rax,rax
   3b05d:	je     3b2da <Init_Motion_Search_Module+0x4aa>
   3b063:	mov    rax,QWORD PTR [rip+0x4d546]        # 885b0 <img>
   3b06a:	mov    r8d,0x4
   3b070:	add    ebx,0x5
   3b073:	mov    edx,0x2
   3b078:	mov    esi,0x8
   3b07d:	lea    rdi,[rip+0x7c3fc]        # b7480 <motion_cost>
   3b084:	mov    ecx,DWORD PTR [rax+0x24]
   3b087:	add    ecx,0x1
   3b08a:	call   38880 <get_mem4Dint>
   3b08f:	mov    esi,0x3
   3b094:	mov    rax,QWORD PTR [rip+0x7c3dd]        # b7478 <mvbits>
   3b09b:	movsxd rdx,DWORD PTR [rip+0x7c3ce]        # b7470 <max_mvd>
   3b0a2:	mov    r9d,0x1
   3b0a8:	lea    rdi,[rax+rdx*4]
   3b0ac:	mov    rdx,QWORD PTR [rip+0x7c3e5]        # b7498 <byte_abs>
   3b0b3:	movsxd rax,ebp
   3b0b6:	mov    QWORD PTR [rip+0x7c3bb],rdi        # b7478 <mvbits>
   3b0bd:	lea    r10,[rdi+0x4]
   3b0c1:	lea    r8,[rdx+rax*4]
   3b0c5:	mov    QWORD PTR [rip+0x7c3cc],r8        # b7498 <byte_abs>
   3b0cc:	mov    DWORD PTR [rdi],0x1
   3b0d2:	cmp    r15d,0x2
   3b0d6:	jle    3b139 <Init_Motion_Search_Module+0x309>
   3b0d8:	nop    DWORD PTR [rax+rax*1+0x0]
   3b0e0:	mov    ecx,esi
   3b0e2:	mov    eax,r9d
   3b0e5:	sar    ecx,1
   3b0e7:	shl    eax,cl
   3b0e9:	mov    r13d,eax
   3b0ec:	mov    ecx,eax
   3b0ee:	sar    r13d,1
   3b0f1:	cmp    eax,r13d
   3b0f4:	jle    3b132 <Init_Motion_Search_Module+0x302>
   3b0f6:	mov    edx,r13d
   3b0f9:	sub    ecx,0x1
   3b0fc:	movsxd r11,r13d
   3b0ff:	neg    edx
   3b101:	sub    ecx,r13d
   3b104:	lea    rax,[rdi+r11*4]
   3b108:	movsxd rdx,edx
   3b10b:	add    rcx,r11
   3b10e:	lea    rdx,[rdi+rdx*4]
   3b112:	lea    rcx,[r10+rcx*4]
   3b116:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b120:	mov    DWORD PTR [rax],esi
   3b122:	add    rax,0x4
   3b126:	sub    rdx,0x4
   3b12a:	mov    DWORD PTR [rdx+0x4],esi
   3b12d:	cmp    rax,rcx
   3b130:	jne    3b120 <Init_Motion_Search_Module+0x2f0>
   3b132:	add    esi,0x2
   3b135:	cmp    esi,ebx
   3b137:	jne    3b0e0 <Init_Motion_Search_Module+0x2b0>
   3b139:	mov    rsi,QWORD PTR [rip+0x7c348]        # b7488 <refbits>
   3b140:	mov    edx,0x3
   3b145:	mov    edi,0x1
   3b14a:	mov    DWORD PTR [rsi],0x1
   3b150:	lea    r9,[rsi+0x4]
   3b154:	cmp    r12d,0x2
   3b158:	jle    3b1a3 <Init_Motion_Search_Module+0x373>
   3b15a:	nop    WORD PTR [rax+rax*1+0x0]
   3b160:	mov    ecx,edx
   3b162:	mov    eax,edi
   3b164:	sar    ecx,1
   3b166:	add    ecx,0x1
   3b169:	shl    eax,cl
   3b16b:	mov    ecx,eax
   3b16d:	lea    eax,[rax-0x1]
   3b170:	mov    r10d,eax
   3b173:	sar    r10d,1
   3b176:	cmp    eax,r10d
   3b179:	jle    3b19b <Init_Motion_Search_Module+0x36b>
   3b17b:	sub    ecx,0x2
   3b17e:	movsxd r11,r10d
   3b181:	sub    ecx,r10d
   3b184:	lea    rax,[rsi+r11*4]
   3b188:	add    rcx,r11
   3b18b:	lea    rcx,[r9+rcx*4]
   3b18f:	nop
   3b190:	mov    DWORD PTR [rax],edx
   3b192:	add    rax,0x4
   3b196:	cmp    rcx,rax
   3b199:	jne    3b190 <Init_Motion_Search_Module+0x360>
   3b19b:	add    edx,0x2
   3b19e:	cmp    r12d,edx
   3b1a1:	jge    3b160 <Init_Motion_Search_Module+0x330>
   3b1a3:	cmp    DWORD PTR [rsp+0x8],0x3
   3b1a8:	mov    DWORD PTR [r8],0x0
   3b1af:	lea    rdx,[r8-0x4]
   3b1b3:	mov    eax,0x1
   3b1b8:	jle    3b1d2 <Init_Motion_Search_Module+0x3a2>
   3b1ba:	nop    WORD PTR [rax+rax*1+0x0]
   3b1c0:	mov    DWORD PTR [rdx],eax
   3b1c2:	sub    rdx,0x4
   3b1c6:	mov    DWORD PTR [r8+rax*4],eax
   3b1ca:	add    rax,0x1
   3b1ce:	cmp    ebp,eax
   3b1d0:	jg     3b1c0 <Init_Motion_Search_Module+0x390>
   3b1d2:	mov    rdi,QWORD PTR [rip+0x7c2b7]        # b7490 <spiral_search_y>
   3b1d9:	mov    rsi,QWORD PTR [rip+0x7c288]        # b7468 <spiral_search_x>
   3b1e0:	test   r14d,r14d
   3b1e3:	mov    r10d,0x1
   3b1e9:	cmovg  r10d,r14d
   3b1ed:	mov    r9d,0x2
   3b1f3:	mov    ecx,0x1
   3b1f8:	xor    r11d,r11d
   3b1fb:	mov    DWORD PTR [rdi],0x0
   3b201:	mov    ebp,0x1
   3b206:	mov    ebx,0x1
   3b20b:	mov    DWORD PTR [rsi],0x0
   3b211:	add    r10d,0x1
   3b215:	nop    DWORD PTR [rax]
   3b218:	mov    edx,ebx
   3b21a:	mov    r8d,ecx
   3b21d:	movsxd rax,ebp
   3b220:	sub    edx,ecx
   3b222:	neg    r8d
   3b225:	shl    rax,0x2
   3b229:	nop    DWORD PTR [rax+0x0]
   3b230:	mov    DWORD PTR [rsi+rax*1],edx
   3b233:	mov    DWORD PTR [rdi+rax*1],r8d
   3b237:	mov    DWORD PTR [rsi+rax*1+0x4],edx
   3b23b:	add    edx,0x1
   3b23e:	mov    DWORD PTR [rdi+rax*1+0x4],ecx
   3b242:	add    rax,0x8
   3b246:	cmp    edx,ecx
   3b248:	jne    3b230 <Init_Motion_Search_Module+0x400>
   3b24a:	lea    ebp,[rbp+r9*2-0x2]
   3b24f:	mov    edx,r8d
   3b252:	movsxd rax,ebp
   3b255:	shl    rax,0x2
   3b259:	nop    DWORD PTR [rax+0x0]
   3b260:	mov    DWORD PTR [rsi+rax*1],r8d
   3b264:	mov    DWORD PTR [rdi+rax*1],edx
   3b267:	mov    DWORD PTR [rsi+rax*1+0x4],ecx
   3b26b:	mov    DWORD PTR [rdi+rax*1+0x4],edx
   3b26f:	add    edx,0x1
   3b272:	add    rax,0x8
   3b276:	cmp    edx,ecx
   3b278:	jle    3b260 <Init_Motion_Search_Module+0x430>
   3b27a:	cmp    ecx,r8d
   3b27d:	lea    eax,[r9+r9*1]
   3b281:	cmovl  eax,r11d
   3b285:	add    ecx,0x1
   3b288:	add    r9d,0x2
   3b28c:	lea    ebp,[rbp+rax*1+0x2]
   3b290:	cmp    ecx,r10d
   3b293:	jne    3b218 <Init_Motion_Search_Module+0x3e8>
   3b295:	mov    rax,QWORD PTR [rip+0x4d31c]        # 885b8 <input>
   3b29c:	mov    eax,DWORD PTR [rax+0xcdc]
   3b2a2:	test   eax,eax
   3b2a4:	je     3b2c5 <Init_Motion_Search_Module+0x495>
   3b2a6:	add    rsp,0x18
   3b2aa:	pop    rbx
   3b2ab:	pop    rbp
   3b2ac:	pop    r12
   3b2ae:	pop    r13
   3b2b0:	pop    r14
   3b2b2:	pop    r15
   3b2b4:	ret    
   3b2b5:	add    ebp,0x1
   3b2b8:	lea    eax,[rbp+rbp*1+0x0]
   3b2bc:	mov    DWORD PTR [rsp+0x8],eax
   3b2c0:	jmp    3ae68 <Init_Motion_Search_Module+0x38>
   3b2c5:	add    rsp,0x18
   3b2c9:	xor    eax,eax
   3b2cb:	pop    rbx
   3b2cc:	pop    rbp
   3b2cd:	pop    r12
   3b2cf:	pop    r13
   3b2d1:	pop    r14
   3b2d3:	pop    r15
   3b2d5:	jmp    38e60 <InitializeFastFullIntegerSearch>
   3b2da:	lea    rdi,[rip+0x3abdf]        # 75ec0 <MODTAB+0xca0>
   3b2e1:	call   38210 <no_mem_exit>
   3b2e6:	jmp    3b063 <Init_Motion_Search_Module+0x233>
   3b2eb:	lea    rdi,[rip+0x3aba6]        # 75e98 <MODTAB+0xc78>
   3b2f2:	call   38210 <no_mem_exit>
   3b2f7:	jmp    3b044 <Init_Motion_Search_Module+0x214>
   3b2fc:	lea    rdi,[rip+0x3ab6d]        # 75e70 <MODTAB+0xc50>
   3b303:	call   38210 <no_mem_exit>
   3b308:	jmp    3b025 <Init_Motion_Search_Module+0x1f5>
   3b30d:	lea    rdi,[rip+0x3ab2c]        # 75e40 <MODTAB+0xc20>
   3b314:	call   38210 <no_mem_exit>
   3b319:	jmp    3affe <Init_Motion_Search_Module+0x1ce>
   3b31e:	lea    rdi,[rip+0x3aaeb]        # 75e10 <MODTAB+0xbf0>
   3b325:	call   38210 <no_mem_exit>
   3b32a:	jmp    3afe1 <Init_Motion_Search_Module+0x1b1>
   3b32f:	nop

000000000003b330 <Clear_Motion_Search_Module>:
   3b330:	endbr64 
   3b334:	sub    rsp,0x8
   3b338:	movsxd rax,DWORD PTR [rip+0x7c131]        # b7470 <max_mvd>
   3b33f:	mov    rcx,QWORD PTR [rip+0x7c152]        # b7498 <byte_abs>
   3b346:	shl    rax,0x2
   3b34a:	sub    QWORD PTR [rip+0x7c127],rax        # b7478 <mvbits>
   3b351:	mov    rax,QWORD PTR [rip+0x4d258]        # 885b0 <img>
   3b358:	mov    edx,DWORD PTR [rax+0x11bec]
   3b35e:	mov    eax,DWORD PTR [rax+0x11bf0]
   3b364:	cmp    edx,eax
   3b366:	jle    3b3f0 <Clear_Motion_Search_Module+0xc0>
   3b36c:	lea    eax,[rdx+0x1]
   3b36f:	cdqe   
   3b371:	shl    rax,0x2
   3b375:	neg    rax
   3b378:	mov    rdi,QWORD PTR [rip+0x7c0e9]        # b7468 <spiral_search_x>
   3b37f:	add    rax,rcx
   3b382:	mov    QWORD PTR [rip+0x7c10f],rax        # b7498 <byte_abs>
   3b389:	call   42d0 <free@plt>
   3b38e:	mov    rdi,QWORD PTR [rip+0x7c0fb]        # b7490 <spiral_search_y>
   3b395:	call   42d0 <free@plt>
   3b39a:	mov    rdi,QWORD PTR [rip+0x7c0d7]        # b7478 <mvbits>
   3b3a1:	call   42d0 <free@plt>
   3b3a6:	mov    rdi,QWORD PTR [rip+0x7c0db]        # b7488 <refbits>
   3b3ad:	call   42d0 <free@plt>
   3b3b2:	mov    rdi,QWORD PTR [rip+0x7c0df]        # b7498 <byte_abs>
   3b3b9:	call   42d0 <free@plt>
   3b3be:	mov    edx,0x2
   3b3c3:	mov    esi,0x8
   3b3c8:	mov    rdi,QWORD PTR [rip+0x7c0b1]        # b7480 <motion_cost>
   3b3cf:	call   381a0 <free_mem4Dint>
   3b3d4:	mov    rax,QWORD PTR [rip+0x4d1dd]        # 885b8 <input>
   3b3db:	mov    eax,DWORD PTR [rax+0xcdc]
   3b3e1:	test   eax,eax
   3b3e3:	je     3b408 <Clear_Motion_Search_Module+0xd8>
   3b3e5:	add    rsp,0x8
   3b3e9:	ret    
   3b3ea:	nop    WORD PTR [rax+rax*1+0x0]
   3b3f0:	add    eax,0x1
   3b3f3:	cdqe   
   3b3f5:	shl    rax,0x2
   3b3f9:	neg    rax
   3b3fc:	jmp    3b378 <Clear_Motion_Search_Module+0x48>
   3b401:	nop    DWORD PTR [rax+0x0]
   3b408:	xor    eax,eax
   3b40a:	add    rsp,0x8
   3b40e:	jmp    39390 <ClearFastFullIntegerSearch>
   3b413:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b41e:	xchg   ax,ax

000000000003b420 <FullPelBlockMotionSearch>:
   3b420:	endbr64 
   3b424:	push   r15
   3b426:	mov    eax,edx
   3b428:	mov    r10d,esi
   3b42b:	push   r14
   3b42d:	push   r13
   3b42f:	push   r12
   3b431:	push   rbp
   3b432:	push   rbx
   3b433:	sub    rsp,0x78
   3b437:	mov    rdx,QWORD PTR [rip+0x4d172]        # 885b0 <img>
   3b43e:	mov    DWORD PTR [rsp+0x3c],ecx
   3b442:	mov    esi,DWORD PTR [rsp+0xb0]
   3b449:	movsx  rcx,r10w
   3b44d:	mov    r13d,DWORD PTR [rdx+0x11ad0]
   3b454:	mov    QWORD PTR [rsp+0x60],rdi
   3b459:	mov    DWORD PTR [rsp+0x40],r8d
   3b45e:	mov    r11d,DWORD PTR [rsp+0xb8]
   3b466:	mov    ebx,DWORD PTR [rsp+0xd0]
   3b46d:	mov    ebp,DWORD PTR [rsp+0xd8]
   3b474:	test   r13d,r13d
   3b477:	je     3b49e <FullPelBlockMotionSearch+0x7e>
   3b479:	movsxd rdi,DWORD PTR [rdx+0xc]
   3b47d:	mov    r8,rdi
   3b480:	imul   rdi,rdi,0x278
   3b487:	add    rdi,QWORD PTR [rdx+0x3758]
   3b48e:	mov    r12d,DWORD PTR [rdi+0x214]
   3b495:	test   r12d,r12d
   3b498:	jne    3b81a <FullPelBlockMotionSearch+0x3fa>
   3b49e:	mulsd  xmm0,QWORD PTR [rip+0x379aa]        # 72e50 <quant_coef+0x190>
   3b4a6:	cdqe   
   3b4a8:	movsxd r8,r9d
   3b4ab:	movsx  esi,si
   3b4ae:	addsd  xmm0,QWORD PTR [rip+0x379a2]        # 72e58 <quant_coef+0x198>
   3b4b6:	lea    rdi,[rip+0x7bf63]        # b7420 <listX>
   3b4bd:	movsx  r11d,r11w
   3b4c1:	mov    rax,QWORD PTR [rdi+rax*8]
   3b4c5:	cvttsd2si edi,xmm0
   3b4c9:	mov    rcx,QWORD PTR [rax+rcx*8]
   3b4cd:	mov    eax,DWORD PTR [rcx+0x18f8]
   3b4d3:	mov    r15,QWORD PTR [rcx+0x1920]
   3b4da:	mov    DWORD PTR [rsp+0x30],edi
   3b4de:	mov    rdi,QWORD PTR [rip+0x4d0d3]        # 885b8 <input>
   3b4e5:	mov    DWORD PTR [rsp+0x18],eax
   3b4e9:	mov    eax,DWORD PTR [rcx+0x18fc]
   3b4ef:	mov    r13d,DWORD PTR [rdi+r8*8+0x50]
   3b4f4:	mov    r14d,DWORD PTR [rdi+r8*8+0x54]
   3b4f9:	mov    DWORD PTR [rsp+0x1c],eax
   3b4fd:	lea    eax,[rbx+rbx*1+0x1]
   3b501:	mov    r8d,r13d
   3b504:	mov    DWORD PTR [rsp+0x68],r14d
   3b509:	mov    r14d,DWORD PTR [rsp+0x40]
   3b50e:	imul   eax,eax
   3b511:	sar    r8d,0x2
   3b515:	mov    DWORD PTR [rsp+0x8],r8d
   3b51a:	mov    r8d,DWORD PTR [rsp+0x3c]
   3b51f:	lea    esi,[rsi+r8*4]
   3b523:	mov    DWORD PTR [rsp+0x48],esi
   3b527:	lea    esi,[r11+r14*4]
   3b52b:	mov    DWORD PTR [rsp+0x4c],esi
   3b52f:	mov    rsi,QWORD PTR [rsp+0xc0]
   3b537:	movsx  esi,WORD PTR [rsi]
   3b53a:	add    esi,r8d
   3b53d:	mov    DWORD PTR [rsp+0x34],esi
   3b541:	mov    rsi,QWORD PTR [rsp+0xc8]
   3b549:	movsx  esi,WORD PTR [rsi]
   3b54c:	add    esi,r14d
   3b54f:	mov    DWORD PTR [rsp+0x44],esi
   3b553:	xor    esi,esi
   3b555:	cmp    r9d,0x1
   3b559:	je     3b82c <FullPelBlockMotionSearch+0x40c>
   3b55f:	mov    r8,QWORD PTR [rip+0x6589a]        # a0e00 <active_pps>
   3b566:	mov    r9d,DWORD PTR [r8+0xc0]
   3b56d:	test   r9d,r9d
   3b570:	je     3b589 <FullPelBlockMotionSearch+0x169>
   3b572:	mov    r9d,DWORD PTR [rdx+0x18]
   3b576:	test   r9d,r9d
   3b579:	je     3b800 <FullPelBlockMotionSearch+0x3e0>
   3b57f:	cmp    r9d,0x3
   3b583:	je     3b800 <FullPelBlockMotionSearch+0x3e0>
   3b589:	mov    r8d,DWORD PTR [r8+0xc4]
   3b590:	test   r8d,r8d
   3b593:	jne    3b7f6 <FullPelBlockMotionSearch+0x3d6>
   3b599:	mov    edi,DWORD PTR [rsp+0x34]
   3b59d:	cmp    ebx,edi
   3b59f:	jge    3b5bb <FullPelBlockMotionSearch+0x19b>
   3b5a1:	mov    ecx,ebx
   3b5a3:	not    ecx
   3b5a5:	add    ecx,DWORD PTR [rdx+0x34]
   3b5a8:	sub    ecx,r13d
   3b5ab:	cmp    ecx,edi
   3b5ad:	jle    3b5bb <FullPelBlockMotionSearch+0x19b>
   3b5af:	mov    edi,DWORD PTR [rsp+0x44]
   3b5b3:	cmp    ebx,edi
   3b5b5:	jl     3b857 <FullPelBlockMotionSearch+0x437>
   3b5bb:	lea    rbx,[rip+0x2280e]        # 5ddd0 <UMVLineX>
   3b5c2:	mov    QWORD PTR [rsp+0x10],rbx
   3b5c7:	test   eax,eax
   3b5c9:	jle    3b87b <FullPelBlockMotionSearch+0x45b>
   3b5cf:	sub    eax,0x1
   3b5d2:	mov    edx,DWORD PTR [rsp+0x30]
   3b5d6:	mov    ebx,esi
   3b5d8:	mov    DWORD PTR [rsp+0x4],ebp
   3b5dc:	mov    QWORD PTR [rsp+0x50],rax
   3b5e1:	mov    eax,DWORD PTR [rsp+0x8]
   3b5e5:	and    ebx,0x1
   3b5e8:	shl    edx,0x4
   3b5eb:	mov    BYTE PTR [rsp+0x5f],bl
   3b5ef:	sub    eax,0x1
   3b5f2:	sar    edx,0x10
   3b5f5:	mov    QWORD PTR [rsp+0x28],0x0
   3b5fe:	lea    rax,[rax*8+0x8]
   3b606:	mov    DWORD PTR [rsp+0x58],edx
   3b60a:	mov    QWORD PTR [rsp+0x20],rax
   3b60f:	mov    DWORD PTR [rsp+0x6c],0x0
   3b617:	jmp    3b639 <FullPelBlockMotionSearch+0x219>
   3b619:	nop    DWORD PTR [rax+0x0]
   3b620:	mov    rbx,QWORD PTR [rsp+0x28]
   3b625:	lea    rax,[rbx+0x1]
   3b629:	cmp    QWORD PTR [rsp+0x50],rbx
   3b62e:	je     3b7b0 <FullPelBlockMotionSearch+0x390>
   3b634:	mov    QWORD PTR [rsp+0x28],rax
   3b639:	mov    rbx,QWORD PTR [rsp+0x28]
   3b63e:	mov    rax,QWORD PTR [rip+0x7be23]        # b7468 <spiral_search_x>
   3b645:	mov    r14d,DWORD PTR [rsp+0x34]
   3b64a:	mov    edx,DWORD PTR [rsp+0x44]
   3b64e:	add    r14d,DWORD PTR [rax+rbx*4]
   3b652:	mov    rax,QWORD PTR [rip+0x7be37]        # b7490 <spiral_search_y>
   3b659:	mov    DWORD PTR [rsp+0x38],ebx
   3b65d:	mov    rdi,QWORD PTR [rip+0x7be14]        # b7478 <mvbits>
   3b664:	add    edx,DWORD PTR [rax+rbx*4]
   3b667:	lea    eax,[r14*4+0x0]
   3b66f:	sub    eax,DWORD PTR [rsp+0x48]
   3b673:	lea    esi,[rdx*4+0x0]
   3b67a:	sub    esi,DWORD PTR [rsp+0x4c]
   3b67e:	cdqe   
   3b680:	movsxd rsi,esi
   3b683:	mov    ebx,DWORD PTR [rdi+rsi*4]
   3b686:	add    ebx,DWORD PTR [rdi+rax*4]
   3b689:	imul   ebx,DWORD PTR [rsp+0x30]
   3b68e:	sar    ebx,0x10
   3b691:	cmp    DWORD PTR [rsp+0x3c],r14d
   3b696:	sete   sil
   3b69a:	cmp    DWORD PTR [rsp+0x40],edx
   3b69e:	sete   al
   3b6a1:	test   sil,al
   3b6a4:	je     3b6b4 <FullPelBlockMotionSearch+0x294>
   3b6a6:	mov    eax,ebx
   3b6a8:	sub    eax,DWORD PTR [rsp+0x58]
   3b6ac:	cmp    BYTE PTR [rsp+0x5f],0x0
   3b6b1:	cmovne ebx,eax
   3b6b4:	cmp    ebx,DWORD PTR [rsp+0x4]
   3b6b8:	jge    3b620 <FullPelBlockMotionSearch+0x200>
   3b6be:	mov    eax,DWORD PTR [rsp+0x68]
   3b6c2:	test   eax,eax
   3b6c4:	jle    3b790 <FullPelBlockMotionSearch+0x370>
   3b6ca:	add    eax,edx
   3b6cc:	mov    r12,QWORD PTR [rsp+0x60]
   3b6d1:	mov    edi,ebx
   3b6d3:	mov    ebx,r14d
   3b6d6:	mov    DWORD PTR [rsp+0xc],eax
   3b6da:	mov    r14d,edi
   3b6dd:	mov    rbp,r12
   3b6e0:	mov    r12d,edx
   3b6e3:	nop    DWORD PTR [rax+rax*1+0x0]
   3b6e8:	mov    ecx,ebx
   3b6ea:	mov    edx,r12d
   3b6ed:	mov    r9d,DWORD PTR [rsp+0x18]
   3b6f2:	mov    r8d,DWORD PTR [rsp+0x1c]
   3b6f7:	mov    rax,QWORD PTR [rsp+0x10]
   3b6fc:	mov    rsi,r15
   3b6ff:	mov    edi,r13d
   3b702:	call   rax
   3b704:	mov    edx,DWORD PTR [rsp+0x8]
   3b708:	mov    rcx,QWORD PTR [rbp+0x0]
   3b70c:	test   edx,edx
   3b70e:	jle    3b76f <FullPelBlockMotionSearch+0x34f>
   3b710:	mov    rsi,QWORD PTR [rsp+0x20]
   3b715:	mov    rdi,QWORD PTR [rip+0x7bd7c]        # b7498 <byte_abs>
   3b71c:	lea    r8,[rcx+rsi*1]
   3b720:	movzx  esi,WORD PTR [rax]
   3b723:	movzx  edx,WORD PTR [rcx]
   3b726:	add    rax,0x8
   3b72a:	add    rcx,0x8
   3b72e:	sub    edx,esi
   3b730:	movzx  esi,WORD PTR [rax-0x6]
   3b734:	movsxd rdx,edx
   3b737:	add    r14d,DWORD PTR [rdi+rdx*4]
   3b73b:	movzx  edx,WORD PTR [rcx-0x6]
   3b73f:	sub    edx,esi
   3b741:	movzx  esi,WORD PTR [rax-0x4]
   3b745:	movsxd rdx,edx
   3b748:	add    r14d,DWORD PTR [rdi+rdx*4]
   3b74c:	movzx  edx,WORD PTR [rcx-0x4]
   3b750:	sub    edx,esi
   3b752:	movzx  esi,WORD PTR [rax-0x2]
   3b756:	movsxd rdx,edx
   3b759:	add    r14d,DWORD PTR [rdi+rdx*4]
   3b75d:	movzx  edx,WORD PTR [rcx-0x2]
   3b761:	sub    edx,esi
   3b763:	movsxd rdx,edx
   3b766:	add    r14d,DWORD PTR [rdi+rdx*4]
   3b76a:	cmp    rcx,r8
   3b76d:	jne    3b720 <FullPelBlockMotionSearch+0x300>
   3b76f:	cmp    r14d,DWORD PTR [rsp+0x4]
   3b774:	jge    3b620 <FullPelBlockMotionSearch+0x200>
   3b77a:	add    r12d,0x1
   3b77e:	add    rbp,0x8
   3b782:	cmp    DWORD PTR [rsp+0xc],r12d
   3b787:	jne    3b6e8 <FullPelBlockMotionSearch+0x2c8>
   3b78d:	mov    ebx,r14d
   3b790:	mov    eax,DWORD PTR [rsp+0x38]
   3b794:	mov    DWORD PTR [rsp+0x4],ebx
   3b798:	mov    rbx,QWORD PTR [rsp+0x28]
   3b79d:	mov    DWORD PTR [rsp+0x6c],eax
   3b7a1:	lea    rax,[rbx+0x1]
   3b7a5:	cmp    QWORD PTR [rsp+0x50],rbx
   3b7aa:	jne    3b634 <FullPelBlockMotionSearch+0x214>
   3b7b0:	movsxd rax,DWORD PTR [rsp+0x6c]
   3b7b5:	test   eax,eax
   3b7b7:	je     3b7e3 <FullPelBlockMotionSearch+0x3c3>
   3b7b9:	mov    rdx,QWORD PTR [rip+0x7bca8]        # b7468 <spiral_search_x>
   3b7c0:	mov    rbx,QWORD PTR [rsp+0xc0]
   3b7c8:	mov    edx,DWORD PTR [rdx+rax*4]
   3b7cb:	add    WORD PTR [rbx],dx
   3b7ce:	mov    rdx,QWORD PTR [rip+0x7bcbb]        # b7490 <spiral_search_y>
   3b7d5:	mov    rbx,QWORD PTR [rsp+0xc8]
   3b7dd:	mov    eax,DWORD PTR [rdx+rax*4]
   3b7e0:	add    WORD PTR [rbx],ax
   3b7e3:	mov    eax,DWORD PTR [rsp+0x4]
   3b7e7:	add    rsp,0x78
   3b7eb:	pop    rbx
   3b7ec:	pop    rbp
   3b7ed:	pop    r12
   3b7ef:	pop    r13
   3b7f1:	pop    r14
   3b7f3:	pop    r15
   3b7f5:	ret    
   3b7f6:	cmp    DWORD PTR [rdx+0x18],0x1
   3b7fa:	jne    3b599 <FullPelBlockMotionSearch+0x179>
   3b800:	mov    edi,DWORD PTR [rdi+0x50c]
   3b806:	test   edi,edi
   3b808:	je     3b599 <FullPelBlockMotionSearch+0x179>
   3b80e:	mov    r15,QWORD PTR [rcx+0x1928]
   3b815:	jmp    3b599 <FullPelBlockMotionSearch+0x179>
   3b81a:	lea    edi,[rax+0x4]
   3b81d:	add    eax,0x2
   3b820:	and    r8d,0x1
   3b824:	cmovne eax,edi
   3b827:	jmp    3b49e <FullPelBlockMotionSearch+0x7e>
   3b82c:	mov    r11d,DWORD PTR [rdi+0x9a0]
   3b833:	test   r11d,r11d
   3b836:	jne    3b55f <FullPelBlockMotionSearch+0x13f>
   3b83c:	cmp    DWORD PTR [rdx+0x18],0x1
   3b840:	setne  sil
   3b844:	xor    r8d,r8d
   3b847:	test   r10w,r10w
   3b84b:	sete   r8b
   3b84f:	and    esi,r8d
   3b852:	jmp    3b55f <FullPelBlockMotionSearch+0x13f>
   3b857:	not    ebx
   3b859:	add    ebx,DWORD PTR [rdx+0x3c]
   3b85c:	mov    edx,ebx
   3b85e:	sub    edx,DWORD PTR [rsp+0x68]
   3b862:	cmp    edx,edi
   3b864:	jle    3b5bb <FullPelBlockMotionSearch+0x19b>
   3b86a:	lea    rbx,[rip+0x2253f]        # 5ddb0 <FastLineX>
   3b871:	mov    QWORD PTR [rsp+0x10],rbx
   3b876:	jmp    3b5c7 <FullPelBlockMotionSearch+0x1a7>
   3b87b:	mov    DWORD PTR [rsp+0x4],ebp
   3b87f:	jmp    3b7e3 <FullPelBlockMotionSearch+0x3c3>
   3b884:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b88f:	nop

000000000003b890 <FastFullPelBlockMotionSearch>:
   3b890:	endbr64 
   3b894:	push   r15
   3b896:	movsxd r10,edx
   3b899:	movsxd r9,r9d
   3b89c:	push   r14
   3b89e:	push   r13
   3b8a0:	push   r12
   3b8a2:	push   rbp
   3b8a3:	push   rbx
   3b8a4:	sub    rsp,0x28
   3b8a8:	mov    rbx,QWORD PTR [rip+0x4d779]        # 89028 <BlockSAD>
   3b8af:	mulsd  xmm0,QWORD PTR [rip+0x37599]        # 72e50 <quant_coef+0x190>
   3b8b7:	mov    eax,DWORD PTR [rsp+0x80]
   3b8be:	addsd  xmm0,QWORD PTR [rip+0x37592]        # 72e58 <quant_coef+0x198>
   3b8c6:	mov    rbx,QWORD PTR [rbx+r10*8]
   3b8ca:	lea    r15d,[rax+rax*1+0x1]
   3b8cf:	mov    r13d,DWORD PTR [rsp+0x60]
   3b8d4:	mov    r14d,DWORD PTR [rsp+0x68]
   3b8d9:	imul   r15d,r15d
   3b8dd:	cvttsd2si eax,xmm0
   3b8e1:	mov    WORD PTR [rsp+0xe],r14w
   3b8e7:	movsx  r12d,r13w
   3b8eb:	mov    DWORD PTR [rsp+0x8],eax
   3b8ef:	mov    rax,QWORD PTR [rip+0x4ccba]        # 885b0 <img>
   3b8f6:	mov    edi,DWORD PTR [rax+0xa8]
   3b8fc:	mov    edx,DWORD PTR [rax+0xac]
   3b902:	movsx  rax,si
   3b906:	mov    rbx,QWORD PTR [rbx+rax*8]
   3b90a:	sub    ecx,edi
   3b90c:	sub    r8d,edx
   3b90f:	sar    ecx,0x2
   3b912:	add    r8d,ecx
   3b915:	movsxd rcx,r8d
   3b918:	mov    r8,QWORD PTR [rbx+r9*8]
   3b91c:	mov    rbx,QWORD PTR [r8+rcx*8]
   3b920:	mov    rcx,QWORD PTR [rip+0x4d721]        # 89048 <search_setup_done>
   3b927:	mov    rcx,QWORD PTR [rcx+r10*8]
   3b92b:	mov    ecx,DWORD PTR [rcx+rax*4]
   3b92e:	test   ecx,ecx
   3b930:	je     3ba90 <FastFullPelBlockMotionSearch+0x200>
   3b936:	mov    rcx,QWORD PTR [rip+0x4d703]        # 89040 <search_center_x>
   3b93d:	xor    ebp,ebp
   3b93f:	mov    rcx,QWORD PTR [rcx+r10*8]
   3b943:	mov    r9d,DWORD PTR [rcx+rax*4]
   3b947:	mov    rcx,QWORD PTR [rip+0x4d6ea]        # 89038 <search_center_y>
   3b94e:	mov    rcx,QWORD PTR [rcx+r10*8]
   3b952:	sub    r9d,edi
   3b955:	mov    edi,DWORD PTR [rcx+rax*4]
   3b958:	sub    edi,edx
   3b95a:	mov    rdx,QWORD PTR [rip+0x4cc57]        # 885b8 <input>
   3b961:	mov    edx,DWORD PTR [rdx+0x9a0]
   3b967:	test   edx,edx
   3b969:	jne    3b9bf <FastFullPelBlockMotionSearch+0x12f>
   3b96b:	mov    rdx,QWORD PTR [rip+0x4d6be]        # 89030 <pos_00>
   3b972:	movsx  r13d,r13w
   3b976:	movsx  r14d,r14w
   3b97a:	mov    rcx,QWORD PTR [rip+0x7baf7]        # b7478 <mvbits>
   3b981:	neg    r13d
   3b984:	neg    r14d
   3b987:	mov    rdx,QWORD PTR [rdx+r10*8]
   3b98b:	movsxd rbp,DWORD PTR [rdx+rax*4]
   3b98f:	movsxd rax,r13d
   3b992:	movsxd rdx,r14d
   3b995:	mov    edx,DWORD PTR [rcx+rdx*4]
   3b998:	add    edx,DWORD PTR [rcx+rax*4]
   3b99b:	mov    eax,DWORD PTR [rsp+0x8]
   3b99f:	imul   eax,edx
   3b9a2:	movsxd rdx,ebp
   3b9a5:	sar    eax,0x10
   3b9a8:	add    eax,DWORD PTR [rbx+rdx*4]
   3b9ab:	cmp    DWORD PTR [rsp+0x88],eax
   3b9b2:	jle    3ba80 <FastFullPelBlockMotionSearch+0x1f0>
   3b9b8:	mov    DWORD PTR [rsp+0x88],eax
   3b9bf:	mov    r14,QWORD PTR [rip+0x7baa2]        # b7468 <spiral_search_x>
   3b9c6:	mov    r13,QWORD PTR [rip+0x7bac3]        # b7490 <spiral_search_y>
   3b9cd:	test   r15d,r15d
   3b9d0:	jle    3bad0 <FastFullPelBlockMotionSearch+0x240>
   3b9d6:	lea    r10d,[r15-0x1]
   3b9da:	mov    r11,QWORD PTR [rip+0x7ba97]        # b7478 <mvbits>
   3b9e1:	movsx  r15d,WORD PTR [rsp+0xe]
   3b9e7:	xor    edx,edx
   3b9e9:	mov    r8d,DWORD PTR [rsp+0x88]
   3b9f1:	jmp    3b9fb <FastFullPelBlockMotionSearch+0x16b>
   3b9f3:	nop    DWORD PTR [rax+rax*1+0x0]
   3b9f8:	mov    rdx,rax
   3b9fb:	mov    esi,DWORD PTR [rbx+rdx*4]
   3b9fe:	cmp    esi,r8d
   3ba01:	jge    3ba3f <FastFullPelBlockMotionSearch+0x1af>
   3ba03:	mov    ecx,DWORD PTR [r14+rdx*4]
   3ba07:	mov    eax,DWORD PTR [r13+rdx*4+0x0]
   3ba0c:	add    ecx,r9d
   3ba0f:	add    eax,edi
   3ba11:	shl    ecx,0x2
   3ba14:	shl    eax,0x2
   3ba17:	sub    ecx,r12d
   3ba1a:	sub    eax,r15d
   3ba1d:	movsxd rcx,ecx
   3ba20:	cdqe   
   3ba22:	mov    eax,DWORD PTR [r11+rax*4]
   3ba26:	add    eax,DWORD PTR [r11+rcx*4]
   3ba2a:	imul   eax,DWORD PTR [rsp+0x8]
   3ba2f:	sar    eax,0x10
   3ba32:	add    esi,eax
   3ba34:	cmp    esi,r8d
   3ba37:	jge    3ba3f <FastFullPelBlockMotionSearch+0x1af>
   3ba39:	movsxd rbp,edx
   3ba3c:	mov    r8d,esi
   3ba3f:	lea    rax,[rdx+0x1]
   3ba43:	cmp    r10,rdx
   3ba46:	jne    3b9f8 <FastFullPelBlockMotionSearch+0x168>
   3ba48:	mov    rax,QWORD PTR [rsp+0x70]
   3ba4d:	add    r9w,WORD PTR [r14+rbp*4]
   3ba52:	add    di,WORD PTR [r13+rbp*4+0x0]
   3ba58:	mov    WORD PTR [rax],r9w
   3ba5c:	mov    rax,QWORD PTR [rsp+0x78]
   3ba61:	mov    WORD PTR [rax],di
   3ba64:	add    rsp,0x28
   3ba68:	mov    eax,r8d
   3ba6b:	pop    rbx
   3ba6c:	pop    rbp
   3ba6d:	pop    r12
   3ba6f:	pop    r13
   3ba71:	pop    r14
   3ba73:	pop    r15
   3ba75:	ret    
   3ba76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ba80:	xor    ebp,ebp
   3ba82:	jmp    3b9bf <FastFullPelBlockMotionSearch+0x12f>
   3ba87:	nop    WORD PTR [rax+rax*1+0x0]
   3ba90:	movsx  edi,si
   3ba93:	mov    esi,r10d
   3ba96:	mov    QWORD PTR [rsp+0x18],r10
   3ba9b:	mov    QWORD PTR [rsp+0x10],rax
   3baa0:	call   3a780 <SetupFastFullPelSearch>
   3baa5:	mov    r10,QWORD PTR [rsp+0x18]
   3baaa:	mov    rax,QWORD PTR [rsp+0x10]
   3baaf:	mov    rdx,QWORD PTR [rip+0x4cafa]        # 885b0 <img>
   3bab6:	mov    edi,DWORD PTR [rdx+0xa8]
   3babc:	mov    edx,DWORD PTR [rdx+0xac]
   3bac2:	jmp    3b936 <FastFullPelBlockMotionSearch+0xa6>
   3bac7:	nop    WORD PTR [rax+rax*1+0x0]
   3bad0:	mov    r8d,DWORD PTR [rsp+0x88]
   3bad8:	jmp    3ba48 <FastFullPelBlockMotionSearch+0x1b8>
   3badd:	nop    DWORD PTR [rax]

000000000003bae0 <SATD>:
   3bae0:	endbr64 
   3bae4:	push   r15
   3bae6:	push   r14
   3bae8:	push   r13
   3baea:	push   r12
   3baec:	push   rbp
   3baed:	push   rbx
   3baee:	sub    rsp,0x78
   3baf2:	movsxd rdx,DWORD PTR [rdi]
   3baf5:	mov    rax,QWORD PTR fs:0x28
   3bafe:	mov    QWORD PTR [rsp+0x68],rax
   3bb03:	xor    eax,eax
   3bb05:	test   esi,esi
   3bb07:	je     3bd10 <SATD+0x230>
   3bb0d:	mov    eax,DWORD PTR [rdi+0x30]
   3bb10:	mov    ecx,DWORD PTR [rdi+0x20]
   3bb13:	mov    r9d,DWORD PTR [rdi+0x10]
   3bb17:	mov    r8d,DWORD PTR [rdi+0x4]
   3bb1b:	lea    r12d,[rax+rdx*1]
   3bb1f:	sub    edx,eax
   3bb21:	mov    esi,DWORD PTR [rdi+0x14]
   3bb24:	mov    r13d,DWORD PTR [rdi+0x8]
   3bb28:	mov    eax,edx
   3bb2a:	mov    edx,DWORD PTR [rdi+0x34]
   3bb2d:	lea    ebp,[r9+rcx*1]
   3bb31:	sub    r9d,ecx
   3bb34:	mov    ecx,DWORD PTR [rdi+0x24]
   3bb37:	mov    r14d,DWORD PTR [rdi+0x28]
   3bb3b:	lea    ebx,[r8+rdx*1]
   3bb3f:	sub    r8d,edx
   3bb42:	mov    edx,DWORD PTR [rdi+0x38]
   3bb45:	mov    r15d,DWORD PTR [rdi+0x18]
   3bb49:	lea    r11d,[rsi+rcx*1]
   3bb4d:	sub    esi,ecx
   3bb4f:	lea    ecx,[r13+rdx*1+0x0]
   3bb54:	sub    r13d,edx
   3bb57:	mov    edx,DWORD PTR [rdi+0xc]
   3bb5a:	lea    r10d,[r15+r14*1]
   3bb5e:	mov    DWORD PTR [rsp+0x14],r13d
   3bb63:	mov    r13d,DWORD PTR [rdi+0x3c]
   3bb67:	sub    r15d,r14d
   3bb6a:	mov    DWORD PTR [rsp+0x10],r15d
   3bb6f:	mov    r15d,DWORD PTR [rdi+0x2c]
   3bb73:	lea    r14d,[rdx+r13*1]
   3bb77:	sub    edx,r13d
   3bb7a:	mov    DWORD PTR [rsp+0x18],r14d
   3bb7f:	mov    r14d,DWORD PTR [rdi+0x1c]
   3bb83:	lea    edi,[r14+r15*1]
   3bb87:	sub    r14d,r15d
   3bb8a:	lea    r15d,[r12+rbp*1]
   3bb8e:	sub    r12d,ebp
   3bb91:	mov    DWORD PTR [rsp+0x1c],r15d
   3bb96:	lea    r15d,[r9+rax*1]
   3bb9a:	sub    eax,r9d
   3bb9d:	mov    ebp,DWORD PTR [rsp+0x18]
   3bba1:	mov    r13d,eax
   3bba4:	lea    eax,[rbx+r11*1]
   3bba8:	lea    r9d,[rsi+r8*1]
   3bbac:	sub    ebx,r11d
   3bbaf:	lea    r11d,[rcx+r10*1]
   3bbb3:	sub    r8d,esi
   3bbb6:	mov    esi,DWORD PTR [rsp+0x14]
   3bbba:	sub    ecx,r10d
   3bbbd:	mov    DWORD PTR [rsp+0xc],r11d
   3bbc2:	mov    r11d,DWORD PTR [rsp+0x10]
   3bbc7:	mov    r10d,r11d
   3bbca:	add    r10d,esi
   3bbcd:	sub    esi,r11d
   3bbd0:	lea    r11d,[rbp+rdi*1+0x0]
   3bbd5:	sub    ebp,edi
   3bbd7:	mov    DWORD PTR [rsp+0x14],ebp
   3bbdb:	mov    ebp,DWORD PTR [rsp+0xc]
   3bbdf:	lea    edi,[r14+rdx*1]
   3bbe3:	sub    edx,r14d
   3bbe6:	mov    r14d,DWORD PTR [rsp+0x1c]
   3bbeb:	mov    DWORD PTR [rsp+0x10],esi
   3bbef:	add    ebp,eax
   3bbf1:	sub    eax,DWORD PTR [rsp+0xc]
   3bbf5:	lea    esi,[r14+r11*1]
   3bbf9:	mov    DWORD PTR [rsp+0xc],eax
   3bbfd:	sub    r14d,r11d
   3bc00:	mov    eax,DWORD PTR [rsp+0x14]
   3bc04:	mov    DWORD PTR [rsp+0x18],r14d
   3bc09:	lea    r14d,[r9+r10*1]
   3bc0d:	sub    r9d,r10d
   3bc10:	mov    r10d,r15d
   3bc13:	lea    r11d,[r15+rdi*1]
   3bc17:	sub    r10d,edi
   3bc1a:	lea    r15d,[rbx+rcx*1]
   3bc1e:	mov    edi,eax
   3bc20:	add    edi,r12d
   3bc23:	sub    r12d,eax
   3bc26:	mov    eax,DWORD PTR [rsp+0x10]
   3bc2a:	sub    ebx,ecx
   3bc2c:	lea    ecx,[r13+rdx*1+0x0]
   3bc31:	sub    r13d,edx
   3bc34:	lea    edx,[rsi+rbp*1]
   3bc37:	sub    esi,ebp
   3bc39:	add    eax,r8d
   3bc3c:	mov    DWORD PTR [rsp+0x14],eax
   3bc40:	mov    eax,DWORD PTR [rsp+0x18]
   3bc44:	mov    ebp,DWORD PTR [rsp+0xc]
   3bc48:	sub    r8d,DWORD PTR [rsp+0x10]
   3bc4d:	mov    DWORD PTR [rsp+0x24],esi
   3bc51:	add    ebp,eax
   3bc53:	sub    eax,DWORD PTR [rsp+0xc]
   3bc57:	mov    DWORD PTR [rsp+0x28],ebp
   3bc5b:	lea    ebp,[r11+r14*1]
   3bc5f:	sub    r11d,r14d
   3bc62:	mov    DWORD PTR [rsp+0x2c],eax
   3bc66:	mov    eax,DWORD PTR [rsp+0x14]
   3bc6a:	mov    DWORD PTR [rsp+0x34],r11d
   3bc6f:	lea    r11d,[r9+r10*1]
   3bc73:	sub    r10d,r9d
   3bc76:	lea    r9d,[rdi+r15*1]
   3bc7a:	sub    edi,r15d
   3bc7d:	mov    DWORD PTR [rsp+0x30],ebp
   3bc81:	mov    DWORD PTR [rsp+0x44],edi
   3bc85:	lea    edi,[rbx+r12*1]
   3bc89:	sub    r12d,ebx
   3bc8c:	mov    DWORD PTR [rsp+0x48],edi
   3bc90:	lea    edi,[rcx+rax*1]
   3bc93:	sub    ecx,eax
   3bc95:	lea    eax,[r8+r13*1]
   3bc99:	sub    r13d,r8d
   3bc9c:	mov    DWORD PTR [rsp+0x54],ecx
   3bca0:	lea    r8,[rsp+0x64]
   3bca5:	lea    rcx,[rsp+0x28]
   3bcaa:	mov    DWORD PTR [rsp+0x58],eax
   3bcae:	xor    eax,eax
   3bcb0:	mov    DWORD PTR [rsp+0x38],r11d
   3bcb5:	mov    DWORD PTR [rsp+0x3c],r10d
   3bcba:	mov    DWORD PTR [rsp+0x40],r9d
   3bcbf:	mov    DWORD PTR [rsp+0x4c],r12d
   3bcc4:	mov    DWORD PTR [rsp+0x50],edi
   3bcc8:	mov    DWORD PTR [rsp+0x5c],r13d
   3bccd:	jmp    3bcda <SATD+0x1fa>
   3bccf:	nop
   3bcd0:	mov    edi,DWORD PTR [rcx]
   3bcd2:	mov    edx,esi
   3bcd4:	add    rcx,0x4
   3bcd8:	mov    esi,edi
   3bcda:	mov    edi,edx
   3bcdc:	sar    edi,0x1f
   3bcdf:	xor    edx,edi
   3bce1:	sub    edx,edi
   3bce3:	add    eax,edx
   3bce5:	cmp    r8,rcx
   3bce8:	jne    3bcd0 <SATD+0x1f0>
   3bcea:	add    eax,0x1
   3bced:	sar    eax,1
   3bcef:	mov    rbx,QWORD PTR [rsp+0x68]
   3bcf4:	xor    rbx,QWORD PTR fs:0x28
   3bcfd:	jne    3bd39 <SATD+0x259>
   3bcff:	add    rsp,0x78
   3bd03:	pop    rbx
   3bd04:	pop    rbp
   3bd05:	pop    r12
   3bd07:	pop    r13
   3bd09:	pop    r14
   3bd0b:	pop    r15
   3bd0d:	ret    
   3bd0e:	xchg   ax,ax
   3bd10:	lea    rcx,[rdi+0x4]
   3bd14:	mov    rsi,QWORD PTR [rip+0x7b77d]        # b7498 <byte_abs>
   3bd1b:	add    rdi,0x40
   3bd1f:	xor    eax,eax
   3bd21:	jmp    3bd2f <SATD+0x24f>
   3bd23:	nop    DWORD PTR [rax+rax*1+0x0]
   3bd28:	movsxd rdx,DWORD PTR [rcx]
   3bd2b:	add    rcx,0x4
   3bd2f:	add    eax,DWORD PTR [rsi+rdx*4]
   3bd32:	cmp    rdi,rcx
   3bd35:	jne    3bd28 <SATD+0x248>
   3bd37:	jmp    3bcef <SATD+0x20f>
   3bd39:	call   4390 <__stack_chk_fail@plt>
   3bd3e:	xchg   ax,ax

000000000003bd40 <SATD8X8>:
   3bd40:	endbr64 
   3bd44:	test   esi,esi
   3bd46:	je     3bd50 <SATD8X8+0x10>
   3bd48:	jmp    38c40 <SATD8X8.part.0>
   3bd4d:	nop    DWORD PTR [rax]
   3bd50:	mov    rsi,QWORD PTR [rip+0x7b741]        # b7498 <byte_abs>
   3bd57:	lea    rcx,[rdi+0x100]
   3bd5e:	xor    eax,eax
   3bd60:	movsxd rdx,DWORD PTR [rdi]
   3bd63:	add    rdi,0x4
   3bd67:	add    eax,DWORD PTR [rsi+rdx*4]
   3bd6a:	cmp    rcx,rdi
   3bd6d:	jne    3bd60 <SATD8X8+0x20>
   3bd6f:	ret    

000000000003bd70 <find_SATD>:
   3bd70:	endbr64 
   3bd74:	push   r15
   3bd76:	mov    r8d,esi
   3bd79:	push   r14
   3bd7b:	push   r13
   3bd7d:	push   r12
   3bd7f:	push   rbp
   3bd80:	push   rbx
   3bd81:	sub    rsp,0x458
   3bd88:	mov    rbx,QWORD PTR [rip+0x4c829]        # 885b8 <input>
   3bd8f:	mov    rax,QWORD PTR fs:0x28
   3bd98:	mov    QWORD PTR [rsp+0x448],rax
   3bda0:	xor    eax,eax
   3bda2:	movsxd rax,edx
   3bda5:	cmp    edx,0x4
   3bda8:	mov    esi,DWORD PTR [rbx+rax*8+0x50]
   3bdac:	mov    eax,DWORD PTR [rbx+rax*8+0x54]
   3bdb0:	mov    QWORD PTR [rsp+0x20],rbx
   3bdb5:	setle  r14b
   3bdb9:	mov    DWORD PTR [rsp+0x28],esi
   3bdbd:	mov    DWORD PTR [rsp+0x2c],eax
   3bdc1:	test   eax,eax
   3bdc3:	jle    3beba <find_SATD+0x14a>
   3bdc9:	movzx  r14d,r14b
   3bdcd:	mov    DWORD PTR [rsp+0x38],r8d
   3bdd2:	mov    r15,rdi
   3bdd5:	xor    r12d,r12d
   3bdd8:	lea    r14d,[r14*4+0x4]
   3bde0:	mov    DWORD PTR [rsp+0x3c],edx
   3bde4:	xor    r9d,r9d
   3bde7:	lea    r13,[rsp+0x40]
   3bdec:	movsxd rbx,r14d
   3bdef:	mov    rax,rbx
   3bdf2:	mov    QWORD PTR [rsp+0x10],rbx
   3bdf7:	shl    rax,0x6
   3bdfb:	mov    QWORD PTR [rsp+0x30],rax
   3be00:	lea    eax,[r14-0x1]
   3be04:	shl    rax,0x6
   3be08:	lea    rbp,[rdi+rax*1+0x40]
   3be0d:	mov    rax,rbx
   3be10:	xor    ebx,ebx
   3be12:	neg    rax
   3be15:	shl    rax,0x2
   3be19:	mov    QWORD PTR [rsp+0x18],rax
   3be1e:	mov    eax,DWORD PTR [rsp+0x28]
   3be22:	add    ebx,r14d
   3be25:	test   eax,eax
   3be27:	jle    3be99 <find_SATD+0x129>
   3be29:	xor    r10d,r10d
   3be2c:	xor    r8d,r8d
   3be2f:	xor    edi,edi
   3be31:	xor    esi,esi
   3be33:	nop    DWORD PTR [rax+rax*1+0x0]
   3be38:	add    esi,r14d
   3be3b:	mov    rdx,r15
   3be3e:	mov    r11d,esi
   3be41:	sub    r11d,edi
   3be44:	cmp    ebx,r12d
   3be47:	jle    3be86 <find_SATD+0x116>
   3be49:	nop    DWORD PTR [rax+0x0]
   3be50:	cmp    esi,edi
   3be52:	jle    3be7d <find_SATD+0x10d>
   3be54:	movsxd rax,r9d
   3be57:	mov    DWORD PTR [rsp+0xc],edi
   3be5b:	lea    rcx,[r10+rax*4]
   3be5f:	mov    rax,r8
   3be62:	add    rcx,r13
   3be65:	nop    DWORD PTR [rax]
   3be68:	mov    edi,DWORD PTR [rdx+rax*4]
   3be6b:	mov    DWORD PTR [rcx+rax*4],edi
   3be6e:	add    rax,0x1
   3be72:	cmp    esi,eax
   3be74:	jg     3be68 <find_SATD+0xf8>
   3be76:	mov    edi,DWORD PTR [rsp+0xc]
   3be7a:	add    r9d,r11d
   3be7d:	add    rdx,0x40
   3be81:	cmp    rdx,rbp
   3be84:	jne    3be50 <find_SATD+0xe0>
   3be86:	add    edi,r14d
   3be89:	add    r8,QWORD PTR [rsp+0x10]
   3be8e:	add    r10,QWORD PTR [rsp+0x18]
   3be93:	cmp    esi,DWORD PTR [rsp+0x28]
   3be97:	jl     3be38 <find_SATD+0xc8>
   3be99:	mov    rax,QWORD PTR [rsp+0x30]
   3be9e:	add    r12d,r14d
   3bea1:	add    rbp,rax
   3bea4:	add    r15,rax
   3bea7:	cmp    ebx,DWORD PTR [rsp+0x2c]
   3beab:	jl     3be1e <find_SATD+0xae>
   3beb1:	mov    r8d,DWORD PTR [rsp+0x38]
   3beb6:	mov    edx,DWORD PTR [rsp+0x3c]
   3beba:	test   r8d,r8d
   3bebd:	jne    3bef2 <find_SATD+0x182>
   3bebf:	mov    eax,DWORD PTR [rsp+0x28]
   3bec3:	imul   eax,DWORD PTR [rsp+0x2c]
   3bec8:	test   eax,eax
   3beca:	jle    3bf10 <find_SATD+0x1a0>
   3becc:	sub    eax,0x1
   3becf:	mov    rcx,QWORD PTR [rip+0x7b5c2]        # b7498 <byte_abs>
   3bed6:	lea    rdx,[rsp+0x40]
   3bedb:	lea    rax,[rsp+rax*4+0x44]
   3bee0:	movsxd rsi,DWORD PTR [rdx]
   3bee3:	add    rdx,0x4
   3bee7:	add    r8d,DWORD PTR [rcx+rsi*4]
   3beeb:	cmp    rdx,rax
   3beee:	jne    3bee0 <find_SATD+0x170>
   3bef0:	jmp    3bf10 <find_SATD+0x1a0>
   3bef2:	cmp    edx,0x7
   3bef5:	ja     3bf0a <find_SATD+0x19a>
   3bef7:	lea    rcx,[rip+0x3a002]        # 75f00 <MODTAB+0xce0>
   3befe:	mov    edx,edx
   3bf00:	movsxd rax,DWORD PTR [rcx+rdx*4]
   3bf04:	add    rax,rcx
   3bf07:	notrack jmp rax
   3bf0a:	mov    r8d,0xffffffff
   3bf10:	mov    rax,QWORD PTR [rsp+0x448]
   3bf18:	xor    rax,QWORD PTR fs:0x28
   3bf21:	jne    3c019 <find_SATD+0x2a9>
   3bf27:	add    rsp,0x458
   3bf2e:	mov    eax,r8d
   3bf31:	pop    rbx
   3bf32:	pop    rbp
   3bf33:	pop    r12
   3bf35:	pop    r13
   3bf37:	pop    r14
   3bf39:	pop    r15
   3bf3b:	ret    
   3bf3c:	mov    rax,QWORD PTR [rsp+0x20]
   3bf41:	lea    rdi,[rsp+0x40]
   3bf46:	mov    esi,DWORD PTR [rax+0x18]
   3bf49:	call   3bae0 <SATD>
   3bf4e:	mov    r8d,eax
   3bf51:	jmp    3bf10 <find_SATD+0x1a0>
   3bf53:	mov    rax,QWORD PTR [rsp+0x20]
   3bf58:	lea    rdi,[rsp+0x40]
   3bf5d:	mov    ebp,DWORD PTR [rax+0x18]
   3bf60:	mov    esi,ebp
   3bf62:	call   3bd40 <SATD8X8>
   3bf67:	lea    rdi,[rsp+0x140]
   3bf6f:	mov    esi,ebp
   3bf71:	mov    ebx,eax
   3bf73:	call   3bd40 <SATD8X8>
   3bf78:	lea    rdi,[rsp+0x240]
   3bf80:	mov    esi,ebp
   3bf82:	add    ebx,eax
   3bf84:	call   3bd40 <SATD8X8>
   3bf89:	lea    rdi,[rsp+0x340]
   3bf91:	mov    esi,ebp
   3bf93:	add    ebx,eax
   3bf95:	call   3bd40 <SATD8X8>
   3bf9a:	lea    r8d,[rbx+rax*1]
   3bf9e:	jmp    3bf10 <find_SATD+0x1a0>
   3bfa3:	mov    rax,QWORD PTR [rsp+0x20]
   3bfa8:	lea    rdi,[rsp+0x40]
   3bfad:	mov    ebp,DWORD PTR [rax+0x18]
   3bfb0:	mov    esi,ebp
   3bfb2:	call   3bd40 <SATD8X8>
   3bfb7:	lea    rdi,[rsp+0x140]
   3bfbf:	mov    esi,ebp
   3bfc1:	mov    ebx,eax
   3bfc3:	call   3bd40 <SATD8X8>
   3bfc8:	lea    r8d,[rbx+rax*1]
   3bfcc:	jmp    3bf10 <find_SATD+0x1a0>
   3bfd1:	mov    rax,QWORD PTR [rsp+0x20]
   3bfd6:	lea    rdi,[rsp+0x40]
   3bfdb:	mov    esi,DWORD PTR [rax+0x18]
   3bfde:	call   3bd40 <SATD8X8>
   3bfe3:	mov    r8d,eax
   3bfe6:	jmp    3bf10 <find_SATD+0x1a0>
   3bfeb:	mov    rax,QWORD PTR [rsp+0x20]
   3bff0:	lea    rdi,[rsp+0x40]
   3bff5:	mov    ebp,DWORD PTR [rax+0x18]
   3bff8:	mov    esi,ebp
   3bffa:	call   3bae0 <SATD>
   3bfff:	lea    rdi,[rsp+0x80]
   3c007:	mov    esi,ebp
   3c009:	mov    ebx,eax
   3c00b:	call   3bae0 <SATD>
   3c010:	lea    r8d,[rbx+rax*1]
   3c014:	jmp    3bf10 <find_SATD+0x1a0>
   3c019:	call   4390 <__stack_chk_fail@plt>
   3c01e:	xchg   ax,ax

000000000003c020 <SubPelBlockMotionSearch>:
   3c020:	endbr64 
   3c024:	push   r15
   3c026:	mov    eax,edx
   3c028:	mov    r10d,ecx
   3c02b:	mov    r11d,r9d
   3c02e:	push   r14
   3c030:	mov    r14d,r8d
   3c033:	push   r13
   3c035:	push   r12
   3c037:	push   rbp
   3c038:	push   rbx
   3c039:	sub    rsp,0x538
   3c040:	mov    ebx,DWORD PTR [rsp+0x570]
   3c047:	mov    rdx,QWORD PTR [rsp+0x580]
   3c04f:	mov    QWORD PTR [rsp+0xa0],rdi
   3c057:	mov    edi,esi
   3c059:	mulsd  xmm0,QWORD PTR [rip+0x36def]        # 72e50 <quant_coef+0x190>
   3c061:	mov    DWORD PTR [rsp+0xcc],r8d
   3c069:	movsx  rsi,si
   3c06d:	mov    DWORD PTR [rsp+0xd0],ebx
   3c074:	mov    ebx,DWORD PTR [rsp+0x578]
   3c07b:	mov    DWORD PTR [rsp+0xbc],r9d
   3c083:	addsd  xmm0,QWORD PTR [rip+0x36dcd]        # 72e58 <quant_coef+0x198>
   3c08b:	mov    DWORD PTR [rsp+0xd4],ebx
   3c092:	mov    rbx,QWORD PTR [rsp+0x588]
   3c09a:	mov    QWORD PTR [rsp+0x80],rdx
   3c0a2:	mov    r9,QWORD PTR [rip+0x4c50f]        # 885b8 <input>
   3c0a9:	mov    QWORD PTR [rsp+0x68],rbx
   3c0ae:	movzx  r8d,WORD PTR [rdx]
   3c0b2:	mov    DWORD PTR [rsp+0xc8],ecx
   3c0b9:	mov    ebx,DWORD PTR [rsp+0x5a0]
   3c0c0:	mov    edx,DWORD PTR [r9+0x1c]
   3c0c4:	mov    rcx,QWORD PTR fs:0x28
   3c0cd:	mov    QWORD PTR [rsp+0x528],rcx
   3c0d5:	xor    ecx,ecx
   3c0d7:	cvttsd2si ecx,xmm0
   3c0db:	mov    DWORD PTR [rsp+0x74],ecx
   3c0df:	mov    ecx,DWORD PTR [r9+0x18]
   3c0e3:	mov    DWORD PTR [rsp+0x40],ecx
   3c0e7:	movsxd rcx,r11d
   3c0ea:	mov    r15d,DWORD PTR [r9+rcx*8+0x50]
   3c0ef:	mov    DWORD PTR [rsp+0x28],r15d
   3c0f4:	mov    ecx,DWORD PTR [r9+rcx*8+0x54]
   3c0f9:	mov    DWORD PTR [rsp+0x70],ecx
   3c0fd:	lea    ecx,[r10*4+0x0]
   3c105:	mov    r10,QWORD PTR [rip+0x4c4a4]        # 885b0 <img>
   3c10c:	mov    DWORD PTR [rsp+0xc0],ecx
   3c113:	lea    ecx,[r14*4+0x0]
   3c11b:	mov    DWORD PTR [rsp+0xc4],ecx
   3c122:	cmp    r11d,0x1
   3c126:	je     3c806 <SubPelBlockMotionSearch+0x7e6>
   3c12c:	mov    r14d,DWORD PTR [rsp+0x40]
   3c131:	xor    ecx,ecx
   3c133:	test   r14d,r14d
   3c136:	je     3c82f <SubPelBlockMotionSearch+0x80f>
   3c13c:	mov    r13d,DWORD PTR [rsp+0x590]
   3c144:	xor    edi,edi
   3c146:	test   edx,edx
   3c148:	setne  dil
   3c14c:	mov    DWORD PTR [rsp+0x50],edi
   3c150:	test   r13d,r13d
   3c153:	mov    edi,0x1
   3c158:	cmovg  edi,DWORD PTR [rsp+0x590]
   3c160:	mov    DWORD PTR [rsp+0x590],edi
   3c167:	mov    r12d,DWORD PTR [r10+0x11ad0]
   3c16e:	test   r12d,r12d
   3c171:	je     3c196 <SubPelBlockMotionSearch+0x176>
   3c173:	movsxd rdi,DWORD PTR [r10+0xc]
   3c177:	mov    r11,rdi
   3c17a:	imul   rdi,rdi,0x278
   3c181:	add    rdi,QWORD PTR [r10+0x3758]
   3c188:	mov    ebp,DWORD PTR [rdi+0x214]
   3c18e:	test   ebp,ebp
   3c190:	jne    3d07c <SubPelBlockMotionSearch+0x105c>
   3c196:	mov    rdi,QWORD PTR [rip+0x64c63]        # a0e00 <active_pps>
   3c19d:	mov    r11d,DWORD PTR [rdi+0xc0]
   3c1a4:	test   r11d,r11d
   3c1a7:	je     3c1c0 <SubPelBlockMotionSearch+0x1a0>
   3c1a9:	mov    r11d,DWORD PTR [r10+0x18]
   3c1ad:	test   r11d,r11d
   3c1b0:	je     3cfd1 <SubPelBlockMotionSearch+0xfb1>
   3c1b6:	cmp    r11d,0x3
   3c1ba:	je     3cfd1 <SubPelBlockMotionSearch+0xfb1>
   3c1c0:	mov    edi,DWORD PTR [rdi+0xc4]
   3c1c6:	test   edi,edi
   3c1c8:	jne    3cfc6 <SubPelBlockMotionSearch+0xfa6>
   3c1ce:	cdqe   
   3c1d0:	lea    rdi,[rip+0x7b249]        # b7420 <listX>
   3c1d7:	mov    rax,QWORD PTR [rdi+rax*8]
   3c1db:	mov    rax,QWORD PTR [rax+rsi*8]
   3c1df:	xor    esi,esi
   3c1e1:	cmp    edx,0x1
   3c1e4:	setb   sil
   3c1e8:	test   edx,edx
   3c1ea:	mov    DWORD PTR [rsp+0x5c],esi
   3c1ee:	mov    esi,0x0
   3c1f3:	cmove  esi,DWORD PTR [rsp+0x40]
   3c1f8:	mov    DWORD PTR [rsp+0x40],esi
   3c1fc:	mov    r13,QWORD PTR [rax+0x1930]
   3c203:	mov    r14d,DWORD PTR [rax+0x18f8]
   3c20a:	mov    r15d,DWORD PTR [rax+0x18fc]
   3c211:	mov    r9,QWORD PTR [rsp+0x80]
   3c219:	mov    eax,r14d
   3c21c:	sub    eax,DWORD PTR [rsp+0x28]
   3c220:	lea    r10d,[rax*4+0x4]
   3c228:	mov    eax,r15d
   3c22b:	sub    eax,DWORD PTR [rsp+0x70]
   3c22f:	lea    r11d,[rax*4+0x4]
   3c237:	movsx  eax,r8w
   3c23b:	mov    DWORD PTR [rsp+0xd8],r10d
   3c243:	shl    eax,0x2
   3c246:	mov    DWORD PTR [rsp+0xdc],r11d
   3c24e:	mov    WORD PTR [r9],ax
   3c252:	mov    rax,QWORD PTR [rsp+0x68]
   3c257:	movsx  edi,WORD PTR [rax]
   3c25a:	shl    edi,0x2
   3c25d:	mov    WORD PTR [rax],di
   3c260:	movsx  eax,WORD PTR [r9]
   3c264:	mov    esi,edi
   3c266:	mov    r9d,DWORD PTR [rsp+0xc0]
   3c26e:	mov    ebp,eax
   3c270:	lea    r8d,[rax+r9*1]
   3c274:	cmp    r8d,0x1
   3c278:	jle    3c287 <SubPelBlockMotionSearch+0x267>
   3c27a:	lea    r9d,[r10-0x2]
   3c27e:	cmp    r8d,r9d
   3c281:	jl     3d050 <SubPelBlockMotionSearch+0x1030>
   3c287:	lea    rdi,[rip+0x21cd2]        # 5df60 <UMVPelY_14>
   3c28e:	mov    QWORD PTR [rip+0x4cdcb],rdi        # 89060 <PelY_14>
   3c295:	mov    edi,DWORD PTR [rsp+0x50]
   3c299:	cmp    DWORD PTR [rsp+0x590],edi
   3c2a0:	jle    3d0a1 <SubPelBlockMotionSearch+0x1081>
   3c2a6:	mov    edx,DWORD PTR [rsp+0x74]
   3c2aa:	and    ecx,0x1
   3c2ad:	mov    DWORD PTR [rsp+0x58],ebx
   3c2b1:	lea    rbx,[rsp+0x120]
   3c2b9:	mov    BYTE PTR [rsp+0x9c],cl
   3c2c0:	shl    edx,0x4
   3c2c3:	mov    QWORD PTR [rsp+0xa8],rbx
   3c2cb:	lea    rbx,[rsp+0xe0]
   3c2d3:	sar    edx,0x10
   3c2d6:	mov    QWORD PTR [rsp+0x38],rbx
   3c2db:	mov    DWORD PTR [rsp+0x98],edx
   3c2e2:	movsx  edx,WORD PTR [rsp+0xd0]
   3c2ea:	mov    DWORD PTR [rsp+0xb0],0x0
   3c2f5:	mov    DWORD PTR [rsp+0x88],edx
   3c2fc:	movsx  edx,WORD PTR [rsp+0xd4]
   3c304:	mov    DWORD PTR [rsp+0x94],edx
   3c30b:	movsxd rdx,edi
   3c30e:	lea    rcx,[rdx*4+0x0]
   3c316:	mov    QWORD PTR [rsp+0x78],rcx
   3c31b:	mov    ecx,DWORD PTR [rsp+0xcc]
   3c322:	shl    ecx,0x2
   3c325:	mov    DWORD PTR [rsp+0xb4],ecx
   3c32c:	mov    ecx,DWORD PTR [rsp+0xc8]
   3c333:	shl    ecx,0x2
   3c336:	mov    DWORD PTR [rsp+0xb8],ecx
   3c33d:	jmp    3c367 <SubPelBlockMotionSearch+0x347>
   3c33f:	nop
   3c340:	add    DWORD PTR [rsp+0x50],0x1
   3c345:	mov    eax,DWORD PTR [rsp+0x50]
   3c349:	add    QWORD PTR [rsp+0x78],0x4
   3c34f:	cmp    DWORD PTR [rsp+0x590],eax
   3c356:	je     3c8de <SubPelBlockMotionSearch+0x8be>
   3c35c:	mov    rax,QWORD PTR [rsp+0x68]
   3c361:	movzx  esi,WORD PTR [rax]
   3c364:	movsx  eax,bp
   3c367:	mov    rbx,QWORD PTR [rsp+0x78]
   3c36c:	mov    rdx,QWORD PTR [rip+0x7b0f5]        # b7468 <spiral_search_x>
   3c373:	mov    rdi,QWORD PTR [rip+0x7b0fe]        # b7478 <mvbits>
   3c37a:	mov    edx,DWORD PTR [rdx+rbx*1]
   3c37d:	lea    ecx,[rax+rdx*2]
   3c380:	mov    rax,QWORD PTR [rip+0x7b109]        # b7490 <spiral_search_y>
   3c387:	mov    edx,DWORD PTR [rax+rbx*1]
   3c38a:	movsx  eax,si
   3c38d:	lea    esi,[rax+rdx*2]
   3c390:	mov    edx,ecx
   3c392:	sub    edx,DWORD PTR [rsp+0x88]
   3c399:	mov    eax,esi
   3c39b:	sub    eax,DWORD PTR [rsp+0x94]
   3c3a2:	movsxd rdx,edx
   3c3a5:	cdqe   
   3c3a7:	mov    eax,DWORD PTR [rdi+rax*4]
   3c3aa:	add    eax,DWORD PTR [rdi+rdx*4]
   3c3ad:	imul   eax,DWORD PTR [rsp+0x74]
   3c3b2:	mov    edx,DWORD PTR [rsp+0x50]
   3c3b6:	sar    eax,0x10
   3c3b9:	mov    DWORD PTR [rsp+0x24],eax
   3c3bd:	test   edx,edx
   3c3bf:	jne    3c3d9 <SubPelBlockMotionSearch+0x3b9>
   3c3c1:	mov    ebx,eax
   3c3c3:	sub    eax,DWORD PTR [rsp+0x98]
   3c3ca:	cmp    BYTE PTR [rsp+0x9c],0x0
   3c3d2:	cmove  eax,ebx
   3c3d5:	mov    DWORD PTR [rsp+0x24],eax
   3c3d9:	mov    ebx,DWORD PTR [rsp+0x24]
   3c3dd:	cmp    DWORD PTR [rsp+0x58],ebx
   3c3e1:	jle    3c340 <SubPelBlockMotionSearch+0x320>
   3c3e7:	mov    eax,DWORD PTR [rsp+0x70]
   3c3eb:	test   eax,eax
   3c3ed:	jle    3cf99 <SubPelBlockMotionSearch+0xf79>
   3c3f3:	mov    rax,QWORD PTR [rsp+0xa8]
   3c3fb:	add    esi,DWORD PTR [rsp+0xb4]
   3c402:	mov    QWORD PTR [rsp+0x60],0x0
   3c40b:	add    ecx,DWORD PTR [rsp+0xb8]
   3c412:	mov    DWORD PTR [rsp+0x4],esi
   3c416:	mov    QWORD PTR [rsp+0x48],rax
   3c41b:	mov    rax,QWORD PTR [rsp+0xa0]
   3c423:	mov    DWORD PTR [rsp+0x90],ecx
   3c42a:	mov    QWORD PTR [rsp+0x10],rax
   3c42f:	mov    eax,DWORD PTR [rsp+0x28]
   3c433:	test   eax,eax
   3c435:	jle    3c840 <SubPelBlockMotionSearch+0x820>
   3c43b:	mov    QWORD PTR [rsp+0x18],0x0
   3c444:	mov    eax,DWORD PTR [rsp+0x4]
   3c448:	lea    ebx,[rax+0x4]
   3c44b:	mov    DWORD PTR [rsp+0x20],ebx
   3c44f:	lea    ebx,[rax+0x8]
   3c452:	add    eax,0xc
   3c455:	mov    DWORD PTR [rsp+0x8],eax
   3c459:	mov    eax,DWORD PTR [rsp+0x90]
   3c460:	mov    DWORD PTR [rsp+0xc],ebx
   3c464:	xor    ebx,ebx
   3c466:	mov    DWORD PTR [rsp],eax
   3c469:	jmp    3c4ad <SubPelBlockMotionSearch+0x48d>
   3c46b:	nop    DWORD PTR [rax+rax*1+0x0]
   3c470:	mov    esi,DWORD PTR [rsp+0x40]
   3c474:	mov    rdi,QWORD PTR [rsp+0x38]
   3c479:	call   3bae0 <SATD>
   3c47e:	add    DWORD PTR [rsp+0x24],eax
   3c482:	mov    edx,DWORD PTR [rsp+0x24]
   3c486:	cmp    DWORD PTR [rsp+0x58],edx
   3c48a:	jl     3c8c3 <SubPelBlockMotionSearch+0x8a3>
   3c490:	add    QWORD PTR [rsp+0x18],0x4
   3c496:	add    rbx,0x8
   3c49a:	mov    rax,QWORD PTR [rsp+0x18]
   3c49f:	add    DWORD PTR [rsp],0x10
   3c4a3:	cmp    DWORD PTR [rsp+0x28],eax
   3c4a7:	jle    3c840 <SubPelBlockMotionSearch+0x820>
   3c4ad:	mov    rax,QWORD PTR [rsp+0x10]
   3c4b2:	mov    edx,DWORD PTR [rsp]
   3c4b5:	mov    r8d,r14d
   3c4b8:	mov    ecx,r15d
   3c4bb:	mov    esi,DWORD PTR [rsp+0x4]
   3c4bf:	mov    rdi,r13
   3c4c2:	mov    rbp,QWORD PTR [rax]
   3c4c5:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3c4cb:	call   QWORD PTR [rip+0x4cb8f]        # 89060 <PelY_14>
   3c4d1:	mov    esi,DWORD PTR [rsp+0x4]
   3c4d5:	mov    r8d,r14d
   3c4d8:	mov    ecx,r15d
   3c4db:	movzx  eax,ax
   3c4de:	mov    rdi,r13
   3c4e1:	sub    r12d,eax
   3c4e4:	mov    eax,DWORD PTR [rsp]
   3c4e7:	mov    DWORD PTR [rsp+0xe0],r12d
   3c4ef:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3c4f5:	lea    r11d,[rax+0x4]
   3c4f9:	mov    edx,r11d
   3c4fc:	mov    DWORD PTR [rsp+0x34],r11d
   3c501:	call   QWORD PTR [rip+0x4cb59]        # 89060 <PelY_14>
   3c507:	mov    esi,DWORD PTR [rsp+0x4]
   3c50b:	mov    r8d,r14d
   3c50e:	mov    ecx,r15d
   3c511:	movzx  eax,ax
   3c514:	mov    rdi,r13
   3c517:	sub    r12d,eax
   3c51a:	mov    eax,DWORD PTR [rsp]
   3c51d:	mov    DWORD PTR [rsp+0xe4],r12d
   3c525:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3c52b:	lea    r10d,[rax+0x8]
   3c52f:	mov    edx,r10d
   3c532:	mov    DWORD PTR [rsp+0x30],r10d
   3c537:	call   QWORD PTR [rip+0x4cb23]        # 89060 <PelY_14>
   3c53d:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3c542:	mov    r8d,r14d
   3c545:	mov    ecx,r15d
   3c548:	movzx  eax,ax
   3c54b:	mov    esi,DWORD PTR [rsp+0x4]
   3c54f:	mov    rdi,r13
   3c552:	sub    r12d,eax
   3c555:	mov    eax,DWORD PTR [rsp]
   3c558:	mov    DWORD PTR [rsp+0xe8],r12d
   3c560:	lea    r9d,[rax+0xc]
   3c564:	mov    edx,r9d
   3c567:	mov    DWORD PTR [rsp+0x2c],r9d
   3c56c:	call   QWORD PTR [rip+0x4caee]        # 89060 <PelY_14>
   3c572:	mov    rdi,QWORD PTR [rsp+0x10]
   3c577:	mov    edx,DWORD PTR [rsp]
   3c57a:	mov    r8d,r14d
   3c57d:	movzx  eax,ax
   3c580:	mov    esi,DWORD PTR [rsp+0x20]
   3c584:	mov    ecx,r15d
   3c587:	sub    ebp,eax
   3c589:	mov    DWORD PTR [rsp+0xec],ebp
   3c590:	mov    rbp,QWORD PTR [rdi+0x8]
   3c594:	mov    rdi,r13
   3c597:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3c59d:	call   QWORD PTR [rip+0x4cabd]        # 89060 <PelY_14>
   3c5a3:	mov    r11d,DWORD PTR [rsp+0x34]
   3c5a8:	mov    r8d,r14d
   3c5ab:	mov    ecx,r15d
   3c5ae:	movzx  eax,ax
   3c5b1:	mov    esi,DWORD PTR [rsp+0x20]
   3c5b5:	mov    rdi,r13
   3c5b8:	sub    r12d,eax
   3c5bb:	mov    edx,r11d
   3c5be:	mov    DWORD PTR [rsp+0xf0],r12d
   3c5c6:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3c5cc:	call   QWORD PTR [rip+0x4ca8e]        # 89060 <PelY_14>
   3c5d2:	mov    r10d,DWORD PTR [rsp+0x30]
   3c5d7:	mov    r8d,r14d
   3c5da:	mov    ecx,r15d
   3c5dd:	movzx  eax,ax
   3c5e0:	mov    esi,DWORD PTR [rsp+0x20]
   3c5e4:	mov    rdi,r13
   3c5e7:	sub    r12d,eax
   3c5ea:	mov    edx,r10d
   3c5ed:	mov    DWORD PTR [rsp+0xf4],r12d
   3c5f5:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3c5fb:	call   QWORD PTR [rip+0x4ca5f]        # 89060 <PelY_14>
   3c601:	mov    r9d,DWORD PTR [rsp+0x2c]
   3c606:	mov    r8d,r14d
   3c609:	mov    ecx,r15d
   3c60c:	movzx  eax,ax
   3c60f:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3c614:	mov    esi,DWORD PTR [rsp+0x20]
   3c618:	mov    rdi,r13
   3c61b:	sub    r12d,eax
   3c61e:	mov    edx,r9d
   3c621:	mov    DWORD PTR [rsp+0xf8],r12d
   3c629:	call   QWORD PTR [rip+0x4ca31]        # 89060 <PelY_14>
   3c62f:	mov    rdi,QWORD PTR [rsp+0x10]
   3c634:	mov    edx,DWORD PTR [rsp]
   3c637:	mov    r8d,r14d
   3c63a:	movzx  eax,ax
   3c63d:	mov    esi,DWORD PTR [rsp+0xc]
   3c641:	mov    ecx,r15d
   3c644:	sub    ebp,eax
   3c646:	mov    DWORD PTR [rsp+0xfc],ebp
   3c64d:	mov    rbp,QWORD PTR [rdi+0x10]
   3c651:	mov    rdi,r13
   3c654:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3c65a:	call   QWORD PTR [rip+0x4ca00]        # 89060 <PelY_14>
   3c660:	mov    r11d,DWORD PTR [rsp+0x34]
   3c665:	mov    r8d,r14d
   3c668:	mov    ecx,r15d
   3c66b:	movzx  eax,ax
   3c66e:	mov    esi,DWORD PTR [rsp+0xc]
   3c672:	mov    rdi,r13
   3c675:	sub    r12d,eax
   3c678:	mov    edx,r11d
   3c67b:	mov    DWORD PTR [rsp+0x100],r12d
   3c683:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3c689:	call   QWORD PTR [rip+0x4c9d1]        # 89060 <PelY_14>
   3c68f:	mov    r10d,DWORD PTR [rsp+0x30]
   3c694:	mov    r8d,r14d
   3c697:	mov    ecx,r15d
   3c69a:	movzx  eax,ax
   3c69d:	mov    esi,DWORD PTR [rsp+0xc]
   3c6a1:	mov    rdi,r13
   3c6a4:	sub    r12d,eax
   3c6a7:	mov    edx,r10d
   3c6aa:	mov    DWORD PTR [rsp+0x104],r12d
   3c6b2:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3c6b8:	call   QWORD PTR [rip+0x4c9a2]        # 89060 <PelY_14>
   3c6be:	mov    r9d,DWORD PTR [rsp+0x2c]
   3c6c3:	mov    r8d,r14d
   3c6c6:	mov    ecx,r15d
   3c6c9:	movzx  eax,ax
   3c6cc:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3c6d1:	mov    esi,DWORD PTR [rsp+0xc]
   3c6d5:	mov    rdi,r13
   3c6d8:	sub    r12d,eax
   3c6db:	mov    edx,r9d
   3c6de:	mov    DWORD PTR [rsp+0x108],r12d
   3c6e6:	call   QWORD PTR [rip+0x4c974]        # 89060 <PelY_14>
   3c6ec:	mov    rdi,QWORD PTR [rsp+0x10]
   3c6f1:	mov    edx,DWORD PTR [rsp]
   3c6f4:	mov    r8d,r14d
   3c6f7:	movzx  eax,ax
   3c6fa:	mov    esi,DWORD PTR [rsp+0x8]
   3c6fe:	mov    ecx,r15d
   3c701:	sub    ebp,eax
   3c703:	mov    DWORD PTR [rsp+0x10c],ebp
   3c70a:	mov    rbp,QWORD PTR [rdi+0x18]
   3c70e:	mov    rdi,r13
   3c711:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3c717:	call   QWORD PTR [rip+0x4c943]        # 89060 <PelY_14>
   3c71d:	mov    r11d,DWORD PTR [rsp+0x34]
   3c722:	mov    r8d,r14d
   3c725:	mov    ecx,r15d
   3c728:	movzx  eax,ax
   3c72b:	mov    esi,DWORD PTR [rsp+0x8]
   3c72f:	mov    rdi,r13
   3c732:	sub    r12d,eax
   3c735:	mov    edx,r11d
   3c738:	mov    DWORD PTR [rsp+0x110],r12d
   3c740:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3c746:	call   QWORD PTR [rip+0x4c914]        # 89060 <PelY_14>
   3c74c:	mov    r10d,DWORD PTR [rsp+0x30]
   3c751:	mov    r8d,r14d
   3c754:	mov    ecx,r15d
   3c757:	movzx  eax,ax
   3c75a:	mov    esi,DWORD PTR [rsp+0x8]
   3c75e:	mov    rdi,r13
   3c761:	sub    r12d,eax
   3c764:	mov    edx,r10d
   3c767:	mov    DWORD PTR [rsp+0x114],r12d
   3c76f:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3c775:	call   QWORD PTR [rip+0x4c8e5]        # 89060 <PelY_14>
   3c77b:	mov    r9d,DWORD PTR [rsp+0x2c]
   3c780:	mov    r8d,r14d
   3c783:	mov    ecx,r15d
   3c786:	movzx  eax,ax
   3c789:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3c78e:	mov    esi,DWORD PTR [rsp+0x8]
   3c792:	mov    rdi,r13
   3c795:	sub    r12d,eax
   3c798:	mov    edx,r9d
   3c79b:	mov    DWORD PTR [rsp+0x118],r12d
   3c7a3:	call   QWORD PTR [rip+0x4c8b7]        # 89060 <PelY_14>
   3c7a9:	movzx  eax,ax
   3c7ac:	sub    ebp,eax
   3c7ae:	mov    rax,QWORD PTR [rip+0x4be03]        # 885b8 <input>
   3c7b5:	mov    DWORD PTR [rsp+0x11c],ebp
   3c7bc:	mov    eax,DWORD PTR [rax+0xc94]
   3c7c2:	test   eax,eax
   3c7c4:	je     3c470 <SubPelBlockMotionSearch+0x450>
   3c7ca:	mov    rax,QWORD PTR [rsp+0x48]
   3c7cf:	mov    rdx,QWORD PTR [rsp+0x18]
   3c7d4:	xor    edi,edi
   3c7d6:	mov    rsi,QWORD PTR [rsp+0x38]
   3c7db:	lea    rcx,[rax+rdx*4]
   3c7df:	xor    eax,eax
   3c7e1:	mov    edx,DWORD PTR [rsi+rax*1]
   3c7e4:	mov    DWORD PTR [rcx+rax*1],edx
   3c7e7:	add    rax,0x4
   3c7eb:	cmp    rax,0x10
   3c7ef:	jne    3c7e1 <SubPelBlockMotionSearch+0x7c1>
   3c7f1:	add    edi,0x4
   3c7f4:	add    rsi,0x10
   3c7f8:	add    rcx,0x40
   3c7fc:	cmp    edi,0x10
   3c7ff:	jne    3c7df <SubPelBlockMotionSearch+0x7bf>
   3c801:	jmp    3c490 <SubPelBlockMotionSearch+0x470>
   3c806:	test   r8w,r8w
   3c80a:	jne    3c12c <SubPelBlockMotionSearch+0x10c>
   3c810:	mov    rcx,QWORD PTR [rsp+0x68]
   3c815:	cmp    WORD PTR [rcx],0x0
   3c819:	jne    3c12c <SubPelBlockMotionSearch+0x10c>
   3c81f:	mov    r11d,DWORD PTR [rsp+0x40]
   3c824:	xor    ecx,ecx
   3c826:	test   r11d,r11d
   3c829:	jne    3d0aa <SubPelBlockMotionSearch+0x108a>
   3c82f:	mov    DWORD PTR [rsp+0x50],0x1
   3c837:	jmp    3c167 <SubPelBlockMotionSearch+0x147>
   3c83c:	nop    DWORD PTR [rax+0x0]
   3c840:	add    QWORD PTR [rsp+0x60],0x4
   3c846:	mov    rax,QWORD PTR [rsp+0x60]
   3c84b:	add    QWORD PTR [rsp+0x48],0x100
   3c854:	add    QWORD PTR [rsp+0x10],0x20
   3c85a:	add    DWORD PTR [rsp+0x4],0x10
   3c85f:	cmp    DWORD PTR [rsp+0x70],eax
   3c863:	jg     3c42f <SubPelBlockMotionSearch+0x40f>
   3c869:	mov    rax,QWORD PTR [rsp+0x80]
   3c871:	movzx  ebp,WORD PTR [rax]
   3c874:	mov    rax,QWORD PTR [rip+0x4bd3d]        # 885b8 <input>
   3c87b:	mov    eax,DWORD PTR [rax+0xc94]
   3c881:	test   eax,eax
   3c883:	je     3c8ce <SubPelBlockMotionSearch+0x8ae>
   3c885:	mov    edx,DWORD PTR [rsp+0xbc]
   3c88c:	mov    esi,DWORD PTR [rsp+0x40]
   3c890:	mov    rdi,QWORD PTR [rsp+0xa8]
   3c898:	call   3bd70 <find_SATD>
   3c89d:	add    DWORD PTR [rsp+0x24],eax
   3c8a1:	mov    ebx,DWORD PTR [rsp+0x24]
   3c8a5:	cmp    DWORD PTR [rsp+0x58],ebx
   3c8a9:	jle    3c340 <SubPelBlockMotionSearch+0x320>
   3c8af:	mov    eax,DWORD PTR [rsp+0x50]
   3c8b3:	mov    DWORD PTR [rsp+0x58],ebx
   3c8b7:	mov    DWORD PTR [rsp+0xb0],eax
   3c8be:	jmp    3c340 <SubPelBlockMotionSearch+0x320>
   3c8c3:	mov    rax,QWORD PTR [rsp+0x80]
   3c8cb:	movzx  ebp,WORD PTR [rax]
   3c8ce:	mov    ebx,DWORD PTR [rsp+0x24]
   3c8d2:	cmp    DWORD PTR [rsp+0x58],ebx
   3c8d6:	jle    3c340 <SubPelBlockMotionSearch+0x320>
   3c8dc:	jmp    3c8af <SubPelBlockMotionSearch+0x88f>
   3c8de:	mov    rax,QWORD PTR [rip+0x4bcd3]        # 885b8 <input>
   3c8e5:	mov    r12d,DWORD PTR [rsp+0xb0]
   3c8ed:	mov    edx,DWORD PTR [rax+0x1c]
   3c8f0:	test   r12d,r12d
   3c8f3:	je     3d08e <SubPelBlockMotionSearch+0x106e>
   3c8f9:	mov    rcx,QWORD PTR [rip+0x7ab68]        # b7468 <spiral_search_x>
   3c900:	movsxd rax,DWORD PTR [rsp+0xb0]
   3c908:	mov    rbx,QWORD PTR [rsp+0x80]
   3c910:	mov    rsi,QWORD PTR [rsp+0x68]
   3c915:	mov    ecx,DWORD PTR [rcx+rax*4]
   3c918:	mov    r8d,DWORD PTR [rsp+0xc0]
   3c920:	lea    ebp,[rbp+rcx*2+0x0]
   3c924:	mov    rcx,QWORD PTR [rip+0x7ab65]        # b7490 <spiral_search_y>
   3c92b:	mov    WORD PTR [rbx],bp
   3c92e:	mov    eax,DWORD PTR [rcx+rax*4]
   3c931:	add    eax,eax
   3c933:	add    WORD PTR [rsi],ax
   3c936:	movsx  eax,WORD PTR [rbx]
   3c939:	add    r8d,eax
   3c93c:	test   edx,edx
   3c93e:	mov    edx,0x7fffffff
   3c943:	cmove  edx,DWORD PTR [rsp+0x58]
   3c948:	mov    DWORD PTR [rsp+0x58],edx
   3c94c:	cmp    r8d,0x1
   3c950:	jle    3c965 <SubPelBlockMotionSearch+0x945>
   3c952:	mov    edx,DWORD PTR [rsp+0xd8]
   3c959:	sub    edx,0x1
   3c95c:	cmp    edx,r8d
   3c95f:	jg     3d01a <SubPelBlockMotionSearch+0xffa>
   3c965:	lea    rdx,[rip+0x215f4]        # 5df60 <UMVPelY_14>
   3c96c:	mov    QWORD PTR [rip+0x4c6ed],rdx        # 89060 <PelY_14>
   3c973:	mov    ebx,DWORD PTR [rsp+0x5c]
   3c977:	cmp    DWORD PTR [rsp+0x598],ebx
   3c97e:	jle    3cf50 <SubPelBlockMotionSearch+0xf30>
   3c984:	movsxd rdx,ebx
   3c987:	movsx  esi,WORD PTR [rsp+0xd0]
   3c98f:	mov    DWORD PTR [rsp+0x94],0x0
   3c99a:	lea    rbx,[rdx*4+0x0]
   3c9a2:	mov    QWORD PTR [rsp+0x50],rbx
   3c9a7:	mov    ebx,DWORD PTR [rsp+0xcc]
   3c9ae:	mov    DWORD PTR [rsp+0x78],esi
   3c9b2:	movsx  esi,WORD PTR [rsp+0xd4]
   3c9ba:	shl    ebx,0x2
   3c9bd:	mov    DWORD PTR [rsp+0x98],ebx
   3c9c4:	mov    ebx,DWORD PTR [rsp+0xc8]
   3c9cb:	mov    DWORD PTR [rsp+0x90],esi
   3c9d2:	shl    ebx,0x2
   3c9d5:	mov    DWORD PTR [rsp+0x9c],ebx
   3c9dc:	lea    rbx,[rsp+0x120]
   3c9e4:	mov    QWORD PTR [rsp+0x88],rbx
   3c9ec:	lea    rbx,[rsp+0xe0]
   3c9f4:	mov    QWORD PTR [rsp+0x38],rbx
   3c9f9:	jmp    3ca27 <SubPelBlockMotionSearch+0xa07>
   3c9fb:	nop    DWORD PTR [rax+rax*1+0x0]
   3ca00:	add    DWORD PTR [rsp+0x5c],0x1
   3ca05:	mov    eax,DWORD PTR [rsp+0x5c]
   3ca09:	add    QWORD PTR [rsp+0x50],0x4
   3ca0f:	cmp    DWORD PTR [rsp+0x598],eax
   3ca16:	je     3cf1d <SubPelBlockMotionSearch+0xefd>
   3ca1c:	mov    rax,QWORD PTR [rsp+0x80]
   3ca24:	movsx  eax,WORD PTR [rax]
   3ca27:	mov    rdx,QWORD PTR [rip+0x7aa3a]        # b7468 <spiral_search_x>
   3ca2e:	mov    rbx,QWORD PTR [rsp+0x50]
   3ca33:	mov    rdi,QWORD PTR [rip+0x7aa3e]        # b7478 <mvbits>
   3ca3a:	add    eax,DWORD PTR [rdx+rbx*1]
   3ca3d:	mov    ecx,eax
   3ca3f:	mov    rax,QWORD PTR [rsp+0x68]
   3ca44:	mov    esi,ecx
   3ca46:	sub    esi,DWORD PTR [rsp+0x78]
   3ca4a:	movsx  edx,WORD PTR [rax]
   3ca4d:	mov    rax,QWORD PTR [rip+0x7aa3c]        # b7490 <spiral_search_y>
   3ca54:	movsxd rsi,esi
   3ca57:	add    edx,DWORD PTR [rax+rbx*1]
   3ca5a:	mov    eax,edx
   3ca5c:	sub    eax,DWORD PTR [rsp+0x90]
   3ca63:	cdqe   
   3ca65:	mov    eax,DWORD PTR [rdi+rax*4]
   3ca68:	add    eax,DWORD PTR [rdi+rsi*4]
   3ca6b:	imul   eax,DWORD PTR [rsp+0x74]
   3ca70:	sar    eax,0x10
   3ca73:	mov    DWORD PTR [rsp+0x24],eax
   3ca77:	cmp    DWORD PTR [rsp+0x58],eax
   3ca7b:	jle    3ca00 <SubPelBlockMotionSearch+0x9e0>
   3ca7d:	mov    ebx,DWORD PTR [rsp+0x70]
   3ca81:	test   ebx,ebx
   3ca83:	jle    3cf7d <SubPelBlockMotionSearch+0xf5d>
   3ca89:	mov    rax,QWORD PTR [rsp+0x88]
   3ca91:	add    edx,DWORD PTR [rsp+0x98]
   3ca98:	mov    QWORD PTR [rsp+0x48],0x0
   3caa1:	add    ecx,DWORD PTR [rsp+0x9c]
   3caa8:	mov    DWORD PTR [rsp+0x4],edx
   3caac:	mov    QWORD PTR [rsp+0x40],rax
   3cab1:	mov    rax,QWORD PTR [rsp+0xa0]
   3cab9:	mov    DWORD PTR [rsp+0x60],ecx
   3cabd:	mov    QWORD PTR [rsp+0x10],rax
   3cac2:	mov    r11d,DWORD PTR [rsp+0x28]
   3cac7:	test   r11d,r11d
   3caca:	jle    3cea0 <SubPelBlockMotionSearch+0xe80>
   3cad0:	mov    QWORD PTR [rsp+0x18],0x0
   3cad9:	mov    eax,DWORD PTR [rsp+0x4]
   3cadd:	lea    ebx,[rax+0x4]
   3cae0:	mov    DWORD PTR [rsp+0x20],ebx
   3cae4:	lea    ebx,[rax+0x8]
   3cae7:	add    eax,0xc
   3caea:	mov    DWORD PTR [rsp+0x8],eax
   3caee:	mov    eax,DWORD PTR [rsp+0x60]
   3caf2:	mov    DWORD PTR [rsp+0xc],ebx
   3caf6:	xor    ebx,ebx
   3caf8:	mov    DWORD PTR [rsp],eax
   3cafb:	jmp    3cb3c <SubPelBlockMotionSearch+0xb1c>
   3cafd:	nop    DWORD PTR [rax]
   3cb00:	mov    rdi,QWORD PTR [rsp+0x38]
   3cb05:	mov    esi,DWORD PTR [rax+0x18]
   3cb08:	call   3bae0 <SATD>
   3cb0d:	add    DWORD PTR [rsp+0x24],eax
   3cb11:	mov    edi,DWORD PTR [rsp+0x24]
   3cb15:	cmp    DWORD PTR [rsp+0x58],edi
   3cb19:	jl     3cef7 <SubPelBlockMotionSearch+0xed7>
   3cb1f:	add    QWORD PTR [rsp+0x18],0x4
   3cb25:	add    rbx,0x8
   3cb29:	mov    rax,QWORD PTR [rsp+0x18]
   3cb2e:	add    DWORD PTR [rsp],0x10
   3cb32:	cmp    DWORD PTR [rsp+0x28],eax
   3cb36:	jle    3cea0 <SubPelBlockMotionSearch+0xe80>
   3cb3c:	mov    rax,QWORD PTR [rsp+0x10]
   3cb41:	mov    edx,DWORD PTR [rsp]
   3cb44:	mov    r8d,r14d
   3cb47:	mov    ecx,r15d
   3cb4a:	mov    esi,DWORD PTR [rsp+0x4]
   3cb4e:	mov    rdi,r13
   3cb51:	mov    rbp,QWORD PTR [rax]
   3cb54:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3cb5a:	call   QWORD PTR [rip+0x4c500]        # 89060 <PelY_14>
   3cb60:	mov    esi,DWORD PTR [rsp+0x4]
   3cb64:	mov    r8d,r14d
   3cb67:	mov    ecx,r15d
   3cb6a:	movzx  eax,ax
   3cb6d:	mov    rdi,r13
   3cb70:	sub    r12d,eax
   3cb73:	mov    eax,DWORD PTR [rsp]
   3cb76:	mov    DWORD PTR [rsp+0xe0],r12d
   3cb7e:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3cb84:	lea    r11d,[rax+0x4]
   3cb88:	mov    edx,r11d
   3cb8b:	mov    DWORD PTR [rsp+0x34],r11d
   3cb90:	call   QWORD PTR [rip+0x4c4ca]        # 89060 <PelY_14>
   3cb96:	mov    esi,DWORD PTR [rsp+0x4]
   3cb9a:	mov    r8d,r14d
   3cb9d:	mov    ecx,r15d
   3cba0:	movzx  eax,ax
   3cba3:	mov    rdi,r13
   3cba6:	sub    r12d,eax
   3cba9:	mov    eax,DWORD PTR [rsp]
   3cbac:	mov    DWORD PTR [rsp+0xe4],r12d
   3cbb4:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3cbba:	lea    r10d,[rax+0x8]
   3cbbe:	mov    edx,r10d
   3cbc1:	mov    DWORD PTR [rsp+0x30],r10d
   3cbc6:	call   QWORD PTR [rip+0x4c494]        # 89060 <PelY_14>
   3cbcc:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3cbd1:	mov    r8d,r14d
   3cbd4:	mov    ecx,r15d
   3cbd7:	movzx  eax,ax
   3cbda:	mov    esi,DWORD PTR [rsp+0x4]
   3cbde:	mov    rdi,r13
   3cbe1:	sub    r12d,eax
   3cbe4:	mov    eax,DWORD PTR [rsp]
   3cbe7:	mov    DWORD PTR [rsp+0xe8],r12d
   3cbef:	lea    r9d,[rax+0xc]
   3cbf3:	mov    edx,r9d
   3cbf6:	mov    DWORD PTR [rsp+0x2c],r9d
   3cbfb:	call   QWORD PTR [rip+0x4c45f]        # 89060 <PelY_14>
   3cc01:	mov    rdx,QWORD PTR [rsp+0x10]
   3cc06:	mov    r8d,r14d
   3cc09:	mov    ecx,r15d
   3cc0c:	movzx  eax,ax
   3cc0f:	mov    esi,DWORD PTR [rsp+0x20]
   3cc13:	mov    rdi,r13
   3cc16:	sub    ebp,eax
   3cc18:	mov    DWORD PTR [rsp+0xec],ebp
   3cc1f:	mov    rbp,QWORD PTR [rdx+0x8]
   3cc23:	mov    edx,DWORD PTR [rsp]
   3cc26:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3cc2c:	call   QWORD PTR [rip+0x4c42e]        # 89060 <PelY_14>
   3cc32:	mov    r11d,DWORD PTR [rsp+0x34]
   3cc37:	mov    r8d,r14d
   3cc3a:	mov    ecx,r15d
   3cc3d:	movzx  eax,ax
   3cc40:	mov    esi,DWORD PTR [rsp+0x20]
   3cc44:	mov    rdi,r13
   3cc47:	sub    r12d,eax
   3cc4a:	mov    edx,r11d
   3cc4d:	mov    DWORD PTR [rsp+0xf0],r12d
   3cc55:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3cc5b:	call   QWORD PTR [rip+0x4c3ff]        # 89060 <PelY_14>
   3cc61:	mov    r10d,DWORD PTR [rsp+0x30]
   3cc66:	mov    r8d,r14d
   3cc69:	mov    ecx,r15d
   3cc6c:	movzx  eax,ax
   3cc6f:	mov    esi,DWORD PTR [rsp+0x20]
   3cc73:	mov    rdi,r13
   3cc76:	sub    r12d,eax
   3cc79:	mov    edx,r10d
   3cc7c:	mov    DWORD PTR [rsp+0xf4],r12d
   3cc84:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3cc8a:	call   QWORD PTR [rip+0x4c3d0]        # 89060 <PelY_14>
   3cc90:	mov    r9d,DWORD PTR [rsp+0x2c]
   3cc95:	mov    r8d,r14d
   3cc98:	mov    ecx,r15d
   3cc9b:	movzx  eax,ax
   3cc9e:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3cca3:	mov    esi,DWORD PTR [rsp+0x20]
   3cca7:	mov    rdi,r13
   3ccaa:	sub    r12d,eax
   3ccad:	mov    edx,r9d
   3ccb0:	mov    DWORD PTR [rsp+0xf8],r12d
   3ccb8:	call   QWORD PTR [rip+0x4c3a2]        # 89060 <PelY_14>
   3ccbe:	mov    rcx,QWORD PTR [rsp+0x10]
   3ccc3:	mov    edx,DWORD PTR [rsp]
   3ccc6:	mov    r8d,r14d
   3ccc9:	movzx  eax,ax
   3cccc:	mov    esi,DWORD PTR [rsp+0xc]
   3ccd0:	mov    rdi,r13
   3ccd3:	sub    ebp,eax
   3ccd5:	mov    DWORD PTR [rsp+0xfc],ebp
   3ccdc:	mov    rbp,QWORD PTR [rcx+0x10]
   3cce0:	mov    ecx,r15d
   3cce3:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3cce9:	call   QWORD PTR [rip+0x4c371]        # 89060 <PelY_14>
   3ccef:	mov    r11d,DWORD PTR [rsp+0x34]
   3ccf4:	mov    r8d,r14d
   3ccf7:	mov    ecx,r15d
   3ccfa:	movzx  eax,ax
   3ccfd:	mov    esi,DWORD PTR [rsp+0xc]
   3cd01:	mov    rdi,r13
   3cd04:	sub    r12d,eax
   3cd07:	mov    edx,r11d
   3cd0a:	mov    DWORD PTR [rsp+0x100],r12d
   3cd12:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3cd18:	call   QWORD PTR [rip+0x4c342]        # 89060 <PelY_14>
   3cd1e:	mov    r10d,DWORD PTR [rsp+0x30]
   3cd23:	mov    r8d,r14d
   3cd26:	mov    ecx,r15d
   3cd29:	movzx  eax,ax
   3cd2c:	mov    esi,DWORD PTR [rsp+0xc]
   3cd30:	mov    rdi,r13
   3cd33:	sub    r12d,eax
   3cd36:	mov    edx,r10d
   3cd39:	mov    DWORD PTR [rsp+0x104],r12d
   3cd41:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3cd47:	call   QWORD PTR [rip+0x4c313]        # 89060 <PelY_14>
   3cd4d:	mov    r9d,DWORD PTR [rsp+0x2c]
   3cd52:	mov    r8d,r14d
   3cd55:	mov    ecx,r15d
   3cd58:	movzx  eax,ax
   3cd5b:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3cd60:	mov    esi,DWORD PTR [rsp+0xc]
   3cd64:	mov    rdi,r13
   3cd67:	sub    r12d,eax
   3cd6a:	mov    edx,r9d
   3cd6d:	mov    DWORD PTR [rsp+0x108],r12d
   3cd75:	call   QWORD PTR [rip+0x4c2e5]        # 89060 <PelY_14>
   3cd7b:	mov    rcx,QWORD PTR [rsp+0x10]
   3cd80:	mov    edx,DWORD PTR [rsp]
   3cd83:	mov    r8d,r14d
   3cd86:	movzx  eax,ax
   3cd89:	mov    esi,DWORD PTR [rsp+0x8]
   3cd8d:	mov    rdi,r13
   3cd90:	sub    ebp,eax
   3cd92:	mov    DWORD PTR [rsp+0x10c],ebp
   3cd99:	mov    rbp,QWORD PTR [rcx+0x18]
   3cd9d:	mov    ecx,r15d
   3cda0:	movzx  r12d,WORD PTR [rbp+rbx*1+0x0]
   3cda6:	call   QWORD PTR [rip+0x4c2b4]        # 89060 <PelY_14>
   3cdac:	mov    r11d,DWORD PTR [rsp+0x34]
   3cdb1:	mov    r8d,r14d
   3cdb4:	mov    ecx,r15d
   3cdb7:	movzx  eax,ax
   3cdba:	mov    esi,DWORD PTR [rsp+0x8]
   3cdbe:	mov    rdi,r13
   3cdc1:	sub    r12d,eax
   3cdc4:	mov    edx,r11d
   3cdc7:	mov    DWORD PTR [rsp+0x110],r12d
   3cdcf:	movzx  r12d,WORD PTR [rbp+rbx*1+0x2]
   3cdd5:	call   QWORD PTR [rip+0x4c285]        # 89060 <PelY_14>
   3cddb:	mov    r10d,DWORD PTR [rsp+0x30]
   3cde0:	mov    r8d,r14d
   3cde3:	mov    ecx,r15d
   3cde6:	movzx  eax,ax
   3cde9:	mov    esi,DWORD PTR [rsp+0x8]
   3cded:	mov    rdi,r13
   3cdf0:	sub    r12d,eax
   3cdf3:	mov    edx,r10d
   3cdf6:	mov    DWORD PTR [rsp+0x114],r12d
   3cdfe:	movzx  r12d,WORD PTR [rbp+rbx*1+0x4]
   3ce04:	call   QWORD PTR [rip+0x4c256]        # 89060 <PelY_14>
   3ce0a:	mov    r9d,DWORD PTR [rsp+0x2c]
   3ce0f:	mov    r8d,r14d
   3ce12:	mov    ecx,r15d
   3ce15:	movzx  eax,ax
   3ce18:	movzx  ebp,WORD PTR [rbp+rbx*1+0x6]
   3ce1d:	mov    esi,DWORD PTR [rsp+0x8]
   3ce21:	mov    rdi,r13
   3ce24:	sub    r12d,eax
   3ce27:	mov    edx,r9d
   3ce2a:	mov    DWORD PTR [rsp+0x118],r12d
   3ce32:	call   QWORD PTR [rip+0x4c228]        # 89060 <PelY_14>
   3ce38:	movzx  eax,ax
   3ce3b:	sub    ebp,eax
   3ce3d:	mov    rax,QWORD PTR [rip+0x4b774]        # 885b8 <input>
   3ce44:	mov    DWORD PTR [rsp+0x11c],ebp
   3ce4b:	mov    r10d,DWORD PTR [rax+0xc94]
   3ce52:	test   r10d,r10d
   3ce55:	je     3cb00 <SubPelBlockMotionSearch+0xae0>
   3ce5b:	mov    rax,QWORD PTR [rsp+0x40]
   3ce60:	mov    rdx,QWORD PTR [rsp+0x18]
   3ce65:	xor    edi,edi
   3ce67:	mov    rsi,QWORD PTR [rsp+0x38]
   3ce6c:	lea    rcx,[rax+rdx*4]
   3ce70:	xor    eax,eax
   3ce72:	mov    edx,DWORD PTR [rsi+rax*1]
   3ce75:	mov    DWORD PTR [rcx+rax*1],edx
   3ce78:	add    rax,0x4
   3ce7c:	cmp    rax,0x10
   3ce80:	jne    3ce72 <SubPelBlockMotionSearch+0xe52>
   3ce82:	add    edi,0x4
   3ce85:	add    rsi,0x10
   3ce89:	add    rcx,0x40
   3ce8d:	cmp    edi,0x10
   3ce90:	jne    3ce70 <SubPelBlockMotionSearch+0xe50>
   3ce92:	jmp    3cb1f <SubPelBlockMotionSearch+0xaff>
   3ce97:	nop    WORD PTR [rax+rax*1+0x0]
   3cea0:	add    QWORD PTR [rsp+0x48],0x4
   3cea6:	mov    rax,QWORD PTR [rsp+0x48]
   3ceab:	add    QWORD PTR [rsp+0x40],0x100
   3ceb4:	add    QWORD PTR [rsp+0x10],0x20
   3ceba:	add    DWORD PTR [rsp+0x4],0x10
   3cebf:	cmp    DWORD PTR [rsp+0x70],eax
   3cec3:	jg     3cac2 <SubPelBlockMotionSearch+0xaa2>
   3cec9:	mov    rax,QWORD PTR [rip+0x4b6e8]        # 885b8 <input>
   3ced0:	mov    r9d,DWORD PTR [rax+0xc94]
   3ced7:	test   r9d,r9d
   3ceda:	je     3cef7 <SubPelBlockMotionSearch+0xed7>
   3cedc:	mov    esi,DWORD PTR [rax+0x18]
   3cedf:	mov    edx,DWORD PTR [rsp+0xbc]
   3cee6:	mov    rdi,QWORD PTR [rsp+0x88]
   3ceee:	call   3bd70 <find_SATD>
   3cef3:	add    DWORD PTR [rsp+0x24],eax
   3cef7:	mov    ebx,DWORD PTR [rsp+0x58]
   3cefb:	cmp    DWORD PTR [rsp+0x24],ebx
   3ceff:	jge    3ca00 <SubPelBlockMotionSearch+0x9e0>
   3cf05:	mov    eax,DWORD PTR [rsp+0x5c]
   3cf09:	mov    DWORD PTR [rsp+0x94],eax
   3cf10:	mov    eax,DWORD PTR [rsp+0x24]
   3cf14:	mov    DWORD PTR [rsp+0x58],eax
   3cf18:	jmp    3ca00 <SubPelBlockMotionSearch+0x9e0>
   3cf1d:	movsxd rax,DWORD PTR [rsp+0x94]
   3cf25:	test   eax,eax
   3cf27:	je     3cf50 <SubPelBlockMotionSearch+0xf30>
   3cf29:	mov    rdx,QWORD PTR [rip+0x7a538]        # b7468 <spiral_search_x>
   3cf30:	mov    rbx,QWORD PTR [rsp+0x80]
   3cf38:	mov    edx,DWORD PTR [rdx+rax*4]
   3cf3b:	add    WORD PTR [rbx],dx
   3cf3e:	mov    rdx,QWORD PTR [rip+0x7a54b]        # b7490 <spiral_search_y>
   3cf45:	mov    rbx,QWORD PTR [rsp+0x68]
   3cf4a:	mov    eax,DWORD PTR [rdx+rax*4]
   3cf4d:	add    WORD PTR [rbx],ax
   3cf50:	mov    rax,QWORD PTR [rsp+0x528]
   3cf58:	xor    rax,QWORD PTR fs:0x28
   3cf61:	jne    3d0d4 <SubPelBlockMotionSearch+0x10b4>
   3cf67:	mov    eax,DWORD PTR [rsp+0x58]
   3cf6b:	add    rsp,0x538
   3cf72:	pop    rbx
   3cf73:	pop    rbp
   3cf74:	pop    r12
   3cf76:	pop    r13
   3cf78:	pop    r14
   3cf7a:	pop    r15
   3cf7c:	ret    
   3cf7d:	mov    rax,QWORD PTR [rip+0x4b634]        # 885b8 <input>
   3cf84:	mov    r8d,DWORD PTR [rax+0xc94]
   3cf8b:	test   r8d,r8d
   3cf8e:	je     3cf05 <SubPelBlockMotionSearch+0xee5>
   3cf94:	jmp    3cedc <SubPelBlockMotionSearch+0xebc>
   3cf99:	mov    rax,QWORD PTR [rip+0x4b618]        # 885b8 <input>
   3cfa0:	mov    edi,DWORD PTR [rax+0xc94]
   3cfa6:	test   edi,edi
   3cfa8:	jne    3c885 <SubPelBlockMotionSearch+0x865>
   3cfae:	mov    eax,DWORD PTR [rsp+0x50]
   3cfb2:	mov    DWORD PTR [rsp+0xb0],eax
   3cfb9:	mov    eax,DWORD PTR [rsp+0x24]
   3cfbd:	mov    DWORD PTR [rsp+0x58],eax
   3cfc1:	jmp    3c340 <SubPelBlockMotionSearch+0x320>
   3cfc6:	cmp    DWORD PTR [r10+0x18],0x1
   3cfcb:	jne    3c1ce <SubPelBlockMotionSearch+0x1ae>
   3cfd1:	cdqe   
   3cfd3:	lea    rdi,[rip+0x7a446]        # b7420 <listX>
   3cfda:	mov    rax,QWORD PTR [rdi+rax*8]
   3cfde:	mov    rax,QWORD PTR [rax+rsi*8]
   3cfe2:	xor    esi,esi
   3cfe4:	cmp    edx,0x1
   3cfe7:	setb   sil
   3cfeb:	test   edx,edx
   3cfed:	mov    DWORD PTR [rsp+0x5c],esi
   3cff1:	mov    esi,0x0
   3cff6:	cmove  esi,DWORD PTR [rsp+0x40]
   3cffb:	mov    DWORD PTR [rsp+0x40],esi
   3cfff:	mov    esi,DWORD PTR [r9+0x50c]
   3d006:	test   esi,esi
   3d008:	je     3c1fc <SubPelBlockMotionSearch+0x1dc>
   3d00e:	mov    r13,QWORD PTR [rax+0x1938]
   3d015:	jmp    3c203 <SubPelBlockMotionSearch+0x1e3>
   3d01a:	mov    rbx,QWORD PTR [rsp+0x68]
   3d01f:	movsx  ecx,WORD PTR [rbx]
   3d022:	add    ecx,DWORD PTR [rsp+0xc4]
   3d029:	cmp    ecx,0x1
   3d02c:	jle    3c965 <SubPelBlockMotionSearch+0x945>
   3d032:	mov    edx,DWORD PTR [rsp+0xdc]
   3d039:	sub    edx,0x1
   3d03c:	cmp    ecx,edx
   3d03e:	jge    3c965 <SubPelBlockMotionSearch+0x945>
   3d044:	lea    rdx,[rip+0x20f95]        # 5dfe0 <FastPelY_14>
   3d04b:	jmp    3c96c <SubPelBlockMotionSearch+0x94c>
   3d050:	movsx  edi,di
   3d053:	add    edi,DWORD PTR [rsp+0xc4]
   3d05a:	cmp    edi,0x1
   3d05d:	jle    3c287 <SubPelBlockMotionSearch+0x267>
   3d063:	lea    r9d,[r11-0x2]
   3d067:	cmp    edi,r9d
   3d06a:	jge    3c287 <SubPelBlockMotionSearch+0x267>
   3d070:	lea    rdi,[rip+0x20f69]        # 5dfe0 <FastPelY_14>
   3d077:	jmp    3c28e <SubPelBlockMotionSearch+0x26e>
   3d07c:	lea    edi,[rax+0x4]
   3d07f:	add    eax,0x2
   3d082:	and    r11d,0x1
   3d086:	cmovne eax,edi
   3d089:	jmp    3c196 <SubPelBlockMotionSearch+0x176>
   3d08e:	mov    r8d,DWORD PTR [rsp+0xc0]
   3d096:	movsx  eax,bp
   3d099:	add    r8d,eax
   3d09c:	jmp    3c93c <SubPelBlockMotionSearch+0x91c>
   3d0a1:	mov    DWORD PTR [rsp+0x58],ebx
   3d0a5:	jmp    3c93c <SubPelBlockMotionSearch+0x91c>
   3d0aa:	mov    r15d,DWORD PTR [r9+0x9a0]
   3d0b1:	test   r15d,r15d
   3d0b4:	jne    3c13c <SubPelBlockMotionSearch+0x11c>
   3d0ba:	cmp    DWORD PTR [r10+0x18],0x1
   3d0bf:	setne  cl
   3d0c2:	test   di,di
   3d0c5:	sete   dil
   3d0c9:	movzx  edi,dil
   3d0cd:	and    ecx,edi
   3d0cf:	jmp    3c13c <SubPelBlockMotionSearch+0x11c>
   3d0d4:	call   4390 <__stack_chk_fail@plt>
   3d0d9:	nop    DWORD PTR [rax+0x0]

000000000003d0e0 <FullPelBlockMotionBiPred>:
   3d0e0:	endbr64 
   3d0e4:	push   r15
   3d0e6:	movsx  r11,si
   3d0ea:	mov    r10d,r8d
   3d0ed:	push   r14
   3d0ef:	push   r13
   3d0f1:	push   r12
   3d0f3:	push   rbp
   3d0f4:	push   rbx
   3d0f5:	sub    rsp,0xb8
   3d0fc:	mov    rsi,QWORD PTR [rip+0x4b4ad]        # 885b0 <img>
   3d103:	mov    QWORD PTR [rsp+0x98],rdi
   3d10b:	mov    r12d,DWORD PTR [rsp+0xf8]
   3d113:	mov    edi,edx
   3d115:	movsxd rax,DWORD PTR [rsi+0x11ad0]
   3d11c:	mov    r15d,DWORD PTR [rsp+0x100]
   3d124:	mov    r14d,DWORD PTR [rsp+0x108]
   3d12c:	mov    r13d,DWORD PTR [rsp+0x110]
   3d134:	mov    ebx,DWORD PTR [rsp+0x138]
   3d13b:	test   eax,eax
   3d13d:	je     3d163 <FullPelBlockMotionBiPred+0x83>
   3d13f:	movsxd rax,DWORD PTR [rsi+0xc]
   3d143:	mov    r8,rax
   3d146:	imul   rax,rax,0x278
   3d14d:	add    rax,QWORD PTR [rsi+0x3758]
   3d154:	movsxd rax,DWORD PTR [rax+0x214]
   3d15b:	test   eax,eax
   3d15d:	jne    3d96e <FullPelBlockMotionBiPred+0x88e>
   3d163:	lea    rbp,[rip+0x7a2b6]        # b7420 <listX>
   3d16a:	movsxd rdi,edi
   3d16d:	cmp    edx,0x1
   3d170:	mov    rdi,QWORD PTR [rbp+rdi*8+0x0]
   3d175:	mulsd  xmm0,QWORD PTR [rip+0x35cd3]        # 72e50 <quant_coef+0x190>
   3d17d:	addsd  xmm0,QWORD PTR [rip+0x35cd3]        # 72e58 <quant_coef+0x198>
   3d185:	mov    rdi,QWORD PTR [rdi+r11*8]
   3d189:	mov    r8,QWORD PTR [rdi+0x1920]
   3d190:	mov    QWORD PTR [rsp+0x38],r8
   3d195:	mov    r8d,eax
   3d198:	adc    r8d,0x0
   3d19c:	movsxd r8,r8d
   3d19f:	mov    r8,QWORD PTR [rbp+r8*8+0x0]
   3d1a4:	lea    ebp,[rbx+rbx*1+0x1]
   3d1a8:	imul   ebp,ebp
   3d1ab:	mov    r8,QWORD PTR [r8]
   3d1ae:	mov    r8,QWORD PTR [r8+0x1920]
   3d1b5:	mov    QWORD PTR [rsp+0x40],r8
   3d1ba:	mov    r8d,DWORD PTR [rdi+0x18f8]
   3d1c1:	mov    edi,DWORD PTR [rdi+0x18fc]
   3d1c7:	mov    DWORD PTR [rsp+0x10],r8d
   3d1cc:	mov    r8,QWORD PTR [rip+0x4b3e5]        # 885b8 <input>
   3d1d3:	mov    DWORD PTR [rsp+0x14],edi
   3d1d7:	cvttsd2si edi,xmm0
   3d1db:	mov    DWORD PTR [rsp+0x78],edi
   3d1df:	movsxd rdi,r9d
   3d1e2:	mov    r9d,DWORD PTR [r8+rdi*8+0x54]
   3d1e7:	mov    edi,DWORD PTR [r8+rdi*8+0x50]
   3d1ec:	lea    r8d,[r10*4+0x0]
   3d1f4:	mov    DWORD PTR [rsp+0xc],edi
   3d1f8:	sar    edi,0x2
   3d1fb:	mov    DWORD PTR [rsp+0x90],r9d
   3d203:	lea    r9d,[rcx*4+0x0]
   3d20b:	mov    DWORD PTR [rsp+0x1c],edi
   3d20f:	movsx  edi,r12w
   3d213:	add    edi,r9d
   3d216:	mov    DWORD PTR [rsp+0x4],edi
   3d21a:	movsx  edi,r15w
   3d21e:	add    edi,r8d
   3d221:	mov    DWORD PTR [rsp+0x8],edi
   3d225:	movsx  edi,r14w
   3d229:	add    edi,r9d
   3d22c:	mov    DWORD PTR [rsp+0x7c],edi
   3d230:	movsx  edi,r13w
   3d234:	add    edi,r8d
   3d237:	mov    DWORD PTR [rsp+0x88],edi
   3d23e:	mov    rdi,QWORD PTR [rsp+0x118]
   3d246:	movzx  r8d,WORD PTR [rdi]
   3d24a:	mov    rdi,QWORD PTR [rsp+0x120]
   3d252:	movzx  r12d,WORD PTR [rdi]
   3d256:	mov    rdi,QWORD PTR [rsp+0x128]
   3d25e:	add    r8d,ecx
   3d261:	movzx  r9d,WORD PTR [rdi]
   3d265:	add    r12d,r10d
   3d268:	add    r9d,ecx
   3d26b:	mov    rcx,QWORD PTR [rsp+0x130]
   3d273:	add    r10w,WORD PTR [rcx]
   3d277:	mov    rcx,QWORD PTR [rip+0x63b82]        # a0e00 <active_pps>
   3d27e:	mov    edi,DWORD PTR [rcx+0xc4]
   3d284:	mov    DWORD PTR [rsp+0x94],edi
   3d28b:	test   edi,edi
   3d28d:	je     3d611 <FullPelBlockMotionBiPred+0x531>
   3d293:	add    rax,0x1
   3d297:	mov    rdi,QWORD PTR [rip+0x76eba]        # b4158 <wbp_weight>
   3d29e:	mov    r13,QWORD PTR [rip+0x76e8b]        # b4130 <wp_offset>
   3d2a5:	lea    rcx,[rax*8+0x0]
   3d2ad:	mov    r14,QWORD PTR [rdi+rax*8]
   3d2b1:	mov    r15,QWORD PTR [r13+rax*8+0x0]
   3d2b6:	mov    rdi,QWORD PTR [rdi+rcx*1-0x8]
   3d2bb:	mov    rcx,QWORD PTR [r13+rcx*1-0x8]
   3d2c0:	test   edx,edx
   3d2c2:	jne    3d93e <FullPelBlockMotionBiPred+0x85e>
   3d2c8:	mov    rax,QWORD PTR [rdi+r11*8]
   3d2cc:	mov    rdx,QWORD PTR [rcx+r11*8]
   3d2d0:	movsx  edi,r8w
   3d2d4:	mov    DWORD PTR [rsp+0x64],edi
   3d2d8:	mov    rax,QWORD PTR [rax]
   3d2db:	movsx  edx,WORD PTR [rdx]
   3d2de:	movzx  r13d,WORD PTR [rax]
   3d2e2:	mov    rax,QWORD PTR [r14+r11*8]
   3d2e6:	mov    rax,QWORD PTR [rax]
   3d2e9:	movzx  r14d,WORD PTR [rax]
   3d2ed:	mov    rax,QWORD PTR [r15+r11*8]
   3d2f1:	movsx  eax,WORD PTR [rax]
   3d2f4:	lea    eax,[rax+rdx*1+0x1]
   3d2f8:	sar    eax,1
   3d2fa:	mov    r15d,eax
   3d2fd:	cmp    edi,ebx
   3d2ff:	jg     3d637 <FullPelBlockMotionBiPred+0x557>
   3d305:	lea    rax,[rip+0x20ac4]        # 5ddd0 <UMVLineX>
   3d30c:	mov    QWORD PTR [rsp+0x28],rax
   3d311:	movsx  edi,r9w
   3d315:	mov    DWORD PTR [rsp+0x18],edi
   3d319:	cmp    edi,ebx
   3d31b:	jle    3d330 <FullPelBlockMotionBiPred+0x250>
   3d31d:	mov    eax,ebx
   3d31f:	not    eax
   3d321:	add    eax,DWORD PTR [rsi+0x34]
   3d324:	sub    eax,DWORD PTR [rsp+0xc]
   3d328:	cmp    edi,eax
   3d32a:	jl     3d90d <FullPelBlockMotionBiPred+0x82d>
   3d330:	lea    rax,[rip+0x20a99]        # 5ddd0 <UMVLineX>
   3d337:	mov    QWORD PTR [rsp+0x20],rax
   3d33c:	test   ebp,ebp
   3d33e:	jle    3d98e <FullPelBlockMotionBiPred+0x8ae>
   3d344:	mov    QWORD PTR [rsp+0x58],0x0
   3d34d:	mov    eax,DWORD PTR [rsp+0x18]
   3d351:	mov    DWORD PTR [rsp+0xac],0x0
   3d35c:	shl    eax,0x2
   3d35f:	sub    eax,DWORD PTR [rsp+0x4]
   3d363:	cdqe   
   3d365:	shl    rax,0x2
   3d369:	mov    QWORD PTR [rsp+0x68],rax
   3d36e:	movsx  eax,r10w
   3d372:	mov    DWORD PTR [rsp+0xa0],eax
   3d379:	shl    eax,0x2
   3d37c:	sub    eax,DWORD PTR [rsp+0x8]
   3d380:	cdqe   
   3d382:	shl    rax,0x2
   3d386:	mov    QWORD PTR [rsp+0x70],rax
   3d38b:	movsx  eax,r12w
   3d38f:	mov    DWORD PTR [rsp+0x8c],eax
   3d396:	lea    eax,[rbp-0x1]
   3d399:	mov    QWORD PTR [rsp+0x80],rax
   3d3a1:	mov    eax,DWORD PTR [rsp+0x1c]
   3d3a5:	sub    eax,0x1
   3d3a8:	lea    rax,[rax*8+0x8]
   3d3b0:	mov    QWORD PTR [rsp+0x48],rax
   3d3b5:	mov    eax,DWORD PTR [rsp+0x140]
   3d3bc:	mov    DWORD PTR [rsp+0x4],eax
   3d3c0:	mov    rdi,QWORD PTR [rsp+0x58]
   3d3c5:	mov    rax,QWORD PTR [rip+0x7a09c]        # b7468 <spiral_search_x>
   3d3cc:	mov    ecx,DWORD PTR [rsp+0x64]
   3d3d0:	mov    rsi,QWORD PTR [rip+0x7a0a1]        # b7478 <mvbits>
   3d3d7:	add    ecx,DWORD PTR [rax+rdi*4]
   3d3da:	mov    rax,QWORD PTR [rip+0x7a0af]        # b7490 <spiral_search_y>
   3d3e1:	mov    DWORD PTR [rsp+0x60],edi
   3d3e5:	mov    r12d,DWORD PTR [rsp+0x8c]
   3d3ed:	lea    edx,[rcx*4+0x0]
   3d3f4:	mov    DWORD PTR [rsp+0x8],ecx
   3d3f8:	add    r12d,DWORD PTR [rax+rdi*4]
   3d3fc:	mov    rax,QWORD PTR [rsp+0x70]
   3d401:	mov    edi,DWORD PTR [rsp+0x78]
   3d405:	sub    edx,DWORD PTR [rsp+0x7c]
   3d409:	lea    ecx,[r12*4+0x0]
   3d411:	mov    ebx,DWORD PTR [rsi+rax*1]
   3d414:	mov    rax,QWORD PTR [rsp+0x68]
   3d419:	movsxd rdx,edx
   3d41c:	sub    ecx,DWORD PTR [rsp+0x88]
   3d423:	add    ebx,DWORD PTR [rsi+rax*1]
   3d426:	movsxd rcx,ecx
   3d429:	imul   ebx,edi
   3d42c:	mov    eax,ebx
   3d42e:	mov    ebx,DWORD PTR [rsi+rcx*4]
   3d431:	add    ebx,DWORD PTR [rsi+rdx*4]
   3d434:	imul   ebx,edi
   3d437:	sar    eax,0x10
   3d43a:	sar    ebx,0x10
   3d43d:	add    ebx,eax
   3d43f:	cmp    ebx,DWORD PTR [rsp+0x4]
   3d443:	jge    3d5f0 <FullPelBlockMotionBiPred+0x510>
   3d449:	mov    r8d,DWORD PTR [rsp+0x94]
   3d451:	test   r8d,r8d
   3d454:	jne    3d680 <FullPelBlockMotionBiPred+0x5a0>
   3d45a:	mov    eax,DWORD PTR [rsp+0x90]
   3d461:	mov    r10,QWORD PTR [rsp+0x98]
   3d469:	lea    edi,[rax+r12*1]
   3d46d:	mov    DWORD PTR [rsp+0x54],edi
   3d471:	mov    edi,DWORD PTR [rsp+0xa0]
   3d478:	sub    edi,r12d
   3d47b:	mov    DWORD PTR [rsp+0x50],edi
   3d47f:	test   eax,eax
   3d481:	jle    3d88e <FullPelBlockMotionBiPred+0x7ae>
   3d487:	mov    WORD PTR [rsp+0xa4],r13w
   3d490:	mov    r13d,DWORD PTR [rsp+0x10]
   3d495:	mov    WORD PTR [rsp+0xa6],r14w
   3d49e:	mov    r14d,DWORD PTR [rsp+0x14]
   3d4a3:	mov    DWORD PTR [rsp+0xa8],r15d
   3d4ab:	mov    r15d,DWORD PTR [rsp+0xc]
   3d4b0:	mov    QWORD PTR [rsp+0x30],r10
   3d4b5:	mov    ecx,DWORD PTR [rsp+0x8]
   3d4b9:	mov    r9d,r13d
   3d4bc:	mov    r8d,r14d
   3d4bf:	mov    rsi,QWORD PTR [rsp+0x40]
   3d4c4:	mov    edx,r12d
   3d4c7:	mov    edi,r15d
   3d4ca:	mov    rax,QWORD PTR [rsp+0x28]
   3d4cf:	call   rax
   3d4d1:	mov    ecx,DWORD PTR [rsp+0x18]
   3d4d5:	mov    rsi,QWORD PTR [rsp+0x38]
   3d4da:	mov    r9d,r13d
   3d4dd:	mov    rbp,rax
   3d4e0:	mov    eax,DWORD PTR [rsp+0x50]
   3d4e4:	mov    r8d,r14d
   3d4e7:	mov    edi,r15d
   3d4ea:	lea    edx,[rax+r12*1]
   3d4ee:	mov    rax,QWORD PTR [rsp+0x20]
   3d4f3:	call   rax
   3d4f5:	mov    r10,QWORD PTR [rsp+0x30]
   3d4fa:	mov    ecx,DWORD PTR [rsp+0x1c]
   3d4fe:	mov    rdx,QWORD PTR [r10]
   3d501:	test   ecx,ecx
   3d503:	jle    3d5a8 <FullPelBlockMotionBiPred+0x4c8>
   3d509:	mov    rdi,QWORD PTR [rsp+0x48]
   3d50e:	mov    rsi,QWORD PTR [rip+0x79f83]        # b7498 <byte_abs>
   3d515:	add    rdi,rbp
   3d518:	nop    DWORD PTR [rax+rax*1+0x0]
   3d520:	movzx  r9d,WORD PTR [rbp+0x0]
   3d525:	movzx  ecx,WORD PTR [rdx]
   3d528:	add    rax,0x8
   3d52c:	add    rbp,0x8
   3d530:	movzx  r8d,WORD PTR [rax-0x8]
   3d535:	add    rdx,0x8
   3d539:	add    r8d,r9d
   3d53c:	movzx  r9d,WORD PTR [rbp-0x6]
   3d541:	sar    r8d,1
   3d544:	sub    ecx,r8d
   3d547:	movzx  r8d,WORD PTR [rax-0x6]
   3d54c:	movsxd rcx,ecx
   3d54f:	add    ebx,DWORD PTR [rsi+rcx*4]
   3d552:	add    r8d,r9d
   3d555:	movzx  ecx,WORD PTR [rdx-0x6]
   3d559:	sar    r8d,1
   3d55c:	movzx  r9d,WORD PTR [rbp-0x4]
   3d561:	sub    ecx,r8d
   3d564:	movzx  r8d,WORD PTR [rax-0x4]
   3d569:	movsxd rcx,ecx
   3d56c:	add    ebx,DWORD PTR [rsi+rcx*4]
   3d56f:	add    r8d,r9d
   3d572:	movzx  ecx,WORD PTR [rdx-0x4]
   3d576:	sar    r8d,1
   3d579:	movzx  r9d,WORD PTR [rbp-0x2]
   3d57e:	sub    ecx,r8d
   3d581:	movzx  r8d,WORD PTR [rax-0x2]
   3d586:	movsxd rcx,ecx
   3d589:	add    ebx,DWORD PTR [rsi+rcx*4]
   3d58c:	add    r8d,r9d
   3d58f:	movzx  ecx,WORD PTR [rdx-0x2]
   3d593:	sar    r8d,1
   3d596:	sub    ecx,r8d
   3d599:	movsxd rcx,ecx
   3d59c:	add    ebx,DWORD PTR [rsi+rcx*4]
   3d59f:	cmp    rbp,rdi
   3d5a2:	jne    3d520 <FullPelBlockMotionBiPred+0x440>
   3d5a8:	cmp    DWORD PTR [rsp+0x4],ebx
   3d5ac:	jle    3d8a2 <FullPelBlockMotionBiPred+0x7c2>
   3d5b2:	add    r12d,0x1
   3d5b6:	add    r10,0x8
   3d5ba:	cmp    DWORD PTR [rsp+0x54],r12d
   3d5bf:	jne    3d4b0 <FullPelBlockMotionBiPred+0x3d0>
   3d5c5:	mov    eax,DWORD PTR [rsp+0x60]
   3d5c9:	mov    DWORD PTR [rsp+0x4],ebx
   3d5cd:	movzx  r13d,WORD PTR [rsp+0xa4]
   3d5d6:	mov    r15d,DWORD PTR [rsp+0xa8]
   3d5de:	movzx  r14d,WORD PTR [rsp+0xa6]
   3d5e7:	mov    DWORD PTR [rsp+0xac],eax
   3d5ee:	xchg   ax,ax
   3d5f0:	mov    rdi,QWORD PTR [rsp+0x58]
   3d5f5:	lea    rax,[rdi+0x1]
   3d5f9:	cmp    QWORD PTR [rsp+0x80],rdi
   3d601:	je     3d8c1 <FullPelBlockMotionBiPred+0x7e1>
   3d607:	mov    QWORD PTR [rsp+0x58],rax
   3d60c:	jmp    3d3c0 <FullPelBlockMotionBiPred+0x2e0>
   3d611:	mov    ecx,DWORD PTR [rip+0x76b39]        # b4150 <luma_log_weight_denom>
   3d617:	mov    eax,0x1
   3d61c:	xor    r15d,r15d
   3d61f:	shl    eax,cl
   3d621:	mov    r13d,eax
   3d624:	mov    r14d,eax
   3d627:	movsx  edi,r8w
   3d62b:	mov    DWORD PTR [rsp+0x64],edi
   3d62f:	cmp    edi,ebx
   3d631:	jle    3d305 <FullPelBlockMotionBiPred+0x225>
   3d637:	mov    eax,ebx
   3d639:	not    eax
   3d63b:	add    eax,DWORD PTR [rsi+0x34]
   3d63e:	sub    eax,DWORD PTR [rsp+0xc]
   3d642:	cmp    edi,eax
   3d644:	jge    3d305 <FullPelBlockMotionBiPred+0x225>
   3d64a:	movsx  edx,r12w
   3d64e:	cmp    edx,ebx
   3d650:	jle    3d305 <FullPelBlockMotionBiPred+0x225>
   3d656:	mov    eax,ebx
   3d658:	not    eax
   3d65a:	add    eax,DWORD PTR [rsi+0x3c]
   3d65d:	sub    eax,DWORD PTR [rsp+0x90]
   3d664:	cmp    edx,eax
   3d666:	jge    3d305 <FullPelBlockMotionBiPred+0x225>
   3d66c:	lea    rax,[rip+0x2073d]        # 5ddb0 <FastLineX>
   3d673:	mov    QWORD PTR [rsp+0x28],rax
   3d678:	jmp    3d311 <FullPelBlockMotionBiPred+0x231>
   3d67d:	nop    DWORD PTR [rax]
   3d680:	mov    eax,DWORD PTR [rsp+0x90]
   3d687:	test   eax,eax
   3d689:	jle    3d88e <FullPelBlockMotionBiPred+0x7ae>
   3d68f:	add    eax,r12d
   3d692:	mov    rdi,QWORD PTR [rsp+0x98]
   3d69a:	mov    DWORD PTR [rsp+0x54],eax
   3d69e:	mov    eax,DWORD PTR [rsp+0xa0]
   3d6a5:	mov    QWORD PTR [rsp+0x30],rdi
   3d6aa:	sub    eax,r12d
   3d6ad:	mov    DWORD PTR [rsp+0x50],eax
   3d6b1:	nop    DWORD PTR [rax+0x0]
   3d6b8:	mov    r9d,DWORD PTR [rsp+0x10]
   3d6bd:	mov    r8d,DWORD PTR [rsp+0x14]
   3d6c2:	mov    edx,r12d
   3d6c5:	mov    ecx,DWORD PTR [rsp+0x8]
   3d6c9:	mov    rsi,QWORD PTR [rsp+0x40]
   3d6ce:	mov    edi,DWORD PTR [rsp+0xc]
   3d6d2:	mov    rax,QWORD PTR [rsp+0x28]
   3d6d7:	call   rax
   3d6d9:	mov    rsi,QWORD PTR [rsp+0x38]
   3d6de:	mov    edi,DWORD PTR [rsp+0xc]
   3d6e2:	mov    rbp,rax
   3d6e5:	mov    eax,DWORD PTR [rsp+0x50]
   3d6e9:	mov    r9d,DWORD PTR [rsp+0x10]
   3d6ee:	mov    r8d,DWORD PTR [rsp+0x14]
   3d6f3:	mov    ecx,DWORD PTR [rsp+0x18]
   3d6f7:	lea    edx,[rax+r12*1]
   3d6fb:	mov    rax,QWORD PTR [rsp+0x20]
   3d700:	call   rax
   3d702:	mov    rdi,QWORD PTR [rsp+0x30]
   3d707:	mov    rsi,QWORD PTR [rdi]
   3d70a:	mov    edi,DWORD PTR [rsp+0x1c]
   3d70e:	test   edi,edi
   3d710:	jle    3d86f <FullPelBlockMotionBiPred+0x78f>
   3d716:	mov    edi,DWORD PTR [rip+0x76a98]        # b41b4 <wp_luma_round>
   3d71c:	mov    rdx,QWORD PTR [rsp+0x48]
   3d721:	mov    r9,QWORD PTR [rip+0x79d70]        # b7498 <byte_abs>
   3d728:	lea    r8d,[rdi+rdi*1]
   3d72c:	mov    edi,DWORD PTR [rip+0x76a1e]        # b4150 <luma_log_weight_denom>
   3d732:	lea    r10,[rax+rdx*1]
   3d736:	lea    ecx,[rdi+0x1]
   3d739:	mov    rdi,QWORD PTR [rip+0x4ae70]        # 885b0 <img>
   3d740:	movzx  edx,WORD PTR [rax]
   3d743:	movzx  r11d,WORD PTR [rbp+0x0]
   3d748:	imul   edx,r13d
   3d74c:	imul   r11d,r14d
   3d750:	movsx  edx,dx
   3d753:	movsx  r11d,r11w
   3d757:	add    edx,r11d
   3d75a:	xor    r11d,r11d
   3d75d:	add    edx,r8d
   3d760:	sar    edx,cl
   3d762:	add    edx,r15d
   3d765:	js     3d778 <FullPelBlockMotionBiPred+0x698>
   3d767:	cmp    DWORD PTR [rdi+0x11bec],edx
   3d76d:	cmovle edx,DWORD PTR [rdi+0x11bec]
   3d774:	movsx  r11d,dx
   3d778:	movzx  edx,WORD PTR [rsi]
   3d77b:	sub    edx,r11d
   3d77e:	movzx  r11d,WORD PTR [rbp+0x2]
   3d783:	movsxd rdx,edx
   3d786:	add    ebx,DWORD PTR [r9+rdx*4]
   3d78a:	movzx  edx,WORD PTR [rax+0x2]
   3d78e:	imul   r11d,r14d
   3d792:	imul   edx,r13d
   3d796:	movsx  r11d,r11w
   3d79a:	movsx  edx,dx
   3d79d:	add    edx,r11d
   3d7a0:	xor    r11d,r11d
   3d7a3:	add    edx,r8d
   3d7a6:	sar    edx,cl
   3d7a8:	add    edx,r15d
   3d7ab:	js     3d7be <FullPelBlockMotionBiPred+0x6de>
   3d7ad:	cmp    DWORD PTR [rdi+0x11bec],edx
   3d7b3:	cmovle edx,DWORD PTR [rdi+0x11bec]
   3d7ba:	movsx  r11d,dx
   3d7be:	movzx  edx,WORD PTR [rsi+0x2]
   3d7c2:	sub    edx,r11d
   3d7c5:	movzx  r11d,WORD PTR [rbp+0x4]
   3d7ca:	movsxd rdx,edx
   3d7cd:	add    ebx,DWORD PTR [r9+rdx*4]
   3d7d1:	movzx  edx,WORD PTR [rax+0x4]
   3d7d5:	imul   r11d,r14d
   3d7d9:	imul   edx,r13d
   3d7dd:	movsx  r11d,r11w
   3d7e1:	movsx  edx,dx
   3d7e4:	add    edx,r11d
   3d7e7:	xor    r11d,r11d
   3d7ea:	add    edx,r8d
   3d7ed:	sar    edx,cl
   3d7ef:	add    edx,r15d
   3d7f2:	js     3d805 <FullPelBlockMotionBiPred+0x725>
   3d7f4:	cmp    DWORD PTR [rdi+0x11bec],edx
   3d7fa:	cmovle edx,DWORD PTR [rdi+0x11bec]
   3d801:	movsx  r11d,dx
   3d805:	movzx  edx,WORD PTR [rsi+0x4]
   3d809:	add    rax,0x8
   3d80d:	add    rbp,0x8
   3d811:	sub    edx,r11d
   3d814:	movzx  r11d,WORD PTR [rbp-0x2]
   3d819:	movsxd rdx,edx
   3d81c:	add    ebx,DWORD PTR [r9+rdx*4]
   3d820:	movzx  edx,WORD PTR [rax-0x2]
   3d824:	imul   r11d,r14d
   3d828:	imul   edx,r13d
   3d82c:	movsx  r11d,r11w
   3d830:	movsx  edx,dx
   3d833:	add    edx,r11d
   3d836:	xor    r11d,r11d
   3d839:	add    edx,r8d
   3d83c:	sar    edx,cl
   3d83e:	add    edx,r15d
   3d841:	js     3d854 <FullPelBlockMotionBiPred+0x774>
   3d843:	cmp    DWORD PTR [rdi+0x11bec],edx
   3d849:	cmovle edx,DWORD PTR [rdi+0x11bec]
   3d850:	movsx  r11d,dx
   3d854:	movzx  edx,WORD PTR [rsi+0x6]
   3d858:	add    rsi,0x8
   3d85c:	sub    edx,r11d
   3d85f:	movsxd rdx,edx
   3d862:	add    ebx,DWORD PTR [r9+rdx*4]
   3d866:	cmp    rax,r10
   3d869:	jne    3d740 <FullPelBlockMotionBiPred+0x660>
   3d86f:	cmp    ebx,DWORD PTR [rsp+0x4]
   3d873:	jge    3d5f0 <FullPelBlockMotionBiPred+0x510>
   3d879:	add    QWORD PTR [rsp+0x30],0x8
   3d87f:	add    r12d,0x1
   3d883:	cmp    DWORD PTR [rsp+0x54],r12d
   3d888:	jne    3d6b8 <FullPelBlockMotionBiPred+0x5d8>
   3d88e:	mov    eax,DWORD PTR [rsp+0x60]
   3d892:	mov    DWORD PTR [rsp+0x4],ebx
   3d896:	mov    DWORD PTR [rsp+0xac],eax
   3d89d:	jmp    3d5f0 <FullPelBlockMotionBiPred+0x510>
   3d8a2:	movzx  r13d,WORD PTR [rsp+0xa4]
   3d8ab:	mov    r15d,DWORD PTR [rsp+0xa8]
   3d8b3:	movzx  r14d,WORD PTR [rsp+0xa6]
   3d8bc:	jmp    3d5f0 <FullPelBlockMotionBiPred+0x510>
   3d8c1:	movsxd rax,DWORD PTR [rsp+0xac]
   3d8c9:	test   eax,eax
   3d8cb:	je     3d8f7 <FullPelBlockMotionBiPred+0x817>
   3d8cd:	mov    rdx,QWORD PTR [rip+0x79b94]        # b7468 <spiral_search_x>
   3d8d4:	mov    rdi,QWORD PTR [rsp+0x118]
   3d8dc:	mov    edx,DWORD PTR [rdx+rax*4]
   3d8df:	add    WORD PTR [rdi],dx
   3d8e2:	mov    rdx,QWORD PTR [rip+0x79ba7]        # b7490 <spiral_search_y>
   3d8e9:	mov    rdi,QWORD PTR [rsp+0x120]
   3d8f1:	mov    eax,DWORD PTR [rdx+rax*4]
   3d8f4:	add    WORD PTR [rdi],ax
   3d8f7:	mov    eax,DWORD PTR [rsp+0x4]
   3d8fb:	add    rsp,0xb8
   3d902:	pop    rbx
   3d903:	pop    rbp
   3d904:	pop    r12
   3d906:	pop    r13
   3d908:	pop    r14
   3d90a:	pop    r15
   3d90c:	ret    
   3d90d:	movsx  eax,r10w
   3d911:	cmp    eax,ebx
   3d913:	jle    3d330 <FullPelBlockMotionBiPred+0x250>
   3d919:	not    ebx
   3d91b:	add    ebx,DWORD PTR [rsi+0x3c]
   3d91e:	sub    ebx,DWORD PTR [rsp+0x90]
   3d925:	cmp    eax,ebx
   3d927:	jge    3d330 <FullPelBlockMotionBiPred+0x250>
   3d92d:	lea    rax,[rip+0x2047c]        # 5ddb0 <FastLineX>
   3d934:	mov    QWORD PTR [rsp+0x20],rax
   3d939:	jmp    3d33c <FullPelBlockMotionBiPred+0x25c>
   3d93e:	mov    rax,QWORD PTR [r14]
   3d941:	mov    rax,QWORD PTR [rax+r11*8]
   3d945:	movzx  r13d,WORD PTR [rax]
   3d949:	mov    rax,QWORD PTR [rdi]
   3d94c:	mov    rax,QWORD PTR [rax+r11*8]
   3d950:	movzx  r14d,WORD PTR [rax]
   3d954:	mov    rax,QWORD PTR [rcx]
   3d957:	movsx  edx,WORD PTR [rax]
   3d95a:	mov    rax,QWORD PTR [r15]
   3d95d:	movsx  eax,WORD PTR [rax]
   3d960:	lea    eax,[rdx+rax*1+0x1]
   3d964:	sar    eax,1
   3d966:	mov    r15d,eax
   3d969:	jmp    3d627 <FullPelBlockMotionBiPred+0x547>
   3d96e:	and    r8d,0x1
   3d972:	je     3d981 <FullPelBlockMotionBiPred+0x8a1>
   3d974:	lea    edi,[rdx+0x4]
   3d977:	mov    eax,0x4
   3d97c:	jmp    3d163 <FullPelBlockMotionBiPred+0x83>
   3d981:	lea    edi,[rdx+0x2]
   3d984:	mov    eax,0x2
   3d989:	jmp    3d163 <FullPelBlockMotionBiPred+0x83>
   3d98e:	mov    eax,DWORD PTR [rsp+0x140]
   3d995:	mov    DWORD PTR [rsp+0x4],eax
   3d999:	jmp    3d8f7 <FullPelBlockMotionBiPred+0x817>
   3d99e:	xchg   ax,ax

000000000003d9a0 <SubPelBlockSearchBiPred>:
   3d9a0:	endbr64 
   3d9a4:	push   r15
   3d9a6:	mov    r11d,r8d
   3d9a9:	mov    r10d,esi
   3d9ac:	push   r14
   3d9ae:	push   r13
   3d9b0:	push   r12
   3d9b2:	push   rbp
   3d9b3:	push   rbx
   3d9b4:	sub    rsp,0x598
   3d9bb:	mov    eax,DWORD PTR [rsp+0x5d0]
   3d9c2:	mulsd  xmm0,QWORD PTR [rip+0x35486]        # 72e50 <quant_coef+0x190>
   3d9ca:	mov    QWORD PTR [rsp+0xd0],rdi
   3d9d2:	mov    edi,edx
   3d9d4:	mov    DWORD PTR [rsp+0x128],r8d
   3d9dc:	addsd  xmm0,QWORD PTR [rip+0x35474]        # 72e58 <quant_coef+0x198>
   3d9e4:	movsxd rdx,r9d
   3d9e7:	mov    DWORD PTR [rsp+0x130],eax
   3d9ee:	mov    eax,DWORD PTR [rsp+0x5d8]
   3d9f5:	mov    DWORD PTR [rsp+0x124],ecx
   3d9fc:	mov    r8,QWORD PTR [rip+0x4abb5]        # 885b8 <input>
   3da03:	mov    DWORD PTR [rsp+0x134],eax
   3da0a:	mov    rax,QWORD PTR [rsp+0x5e0]
   3da12:	mov    DWORD PTR [rsp+0x12c],r9d
   3da1a:	mov    r12d,DWORD PTR [r8+rdx*8+0x50]
   3da1f:	mov    QWORD PTR [rsp+0xe8],rax
   3da27:	mov    rax,QWORD PTR [rsp+0x5e8]
   3da2f:	mov    QWORD PTR [rsp+0xf0],rax
   3da37:	mov    rax,QWORD PTR [rsp+0x5f0]
   3da3f:	mov    QWORD PTR [rsp+0x78],rax
   3da44:	mov    rax,QWORD PTR [rsp+0x5f8]
   3da4c:	mov    QWORD PTR [rsp+0xc0],rax
   3da54:	mov    eax,DWORD PTR [rsp+0x600]
   3da5b:	mov    rbx,QWORD PTR fs:0x28
   3da64:	mov    QWORD PTR [rsp+0x588],rbx
   3da6c:	xor    ebx,ebx
   3da6e:	cvttsd2si ebx,xmm0
   3da72:	mov    WORD PTR [rsp+0x82],r12w
   3da7b:	mov    DWORD PTR [rsp+0xfc],ebx
   3da82:	mov    ebx,DWORD PTR [r8+rdx*8+0x54]
   3da87:	mov    WORD PTR [rsp+0x108],ax
   3da8f:	mov    DWORD PTR [rsp+0x20],ebx
   3da93:	mov    WORD PTR [rsp+0xce],bx
   3da9b:	lea    ebx,[rcx*4+0x0]
   3daa2:	mov    DWORD PTR [rsp+0x10],ebx
   3daa6:	lea    ebx,[r11*4+0x0]
   3daae:	mov    DWORD PTR [rsp+0x120],ebx
   3dab5:	mov    ebx,DWORD PTR [r8+0x18]
   3dab9:	test   ebx,ebx
   3dabb:	mov    DWORD PTR [rsp+0x94],ebx
   3dac2:	sete   r13b
   3dac6:	movzx  esi,r13b
   3daca:	mov    WORD PTR [rsp+0xf8],si
   3dad2:	je     3dae5 <SubPelBlockSearchBiPred+0x145>
   3dad4:	test   eax,eax
   3dad6:	mov    edx,0x1
   3dadb:	cmovg  edx,eax
   3dade:	mov    DWORD PTR [rsp+0x108],edx
   3dae5:	mov    rax,QWORD PTR [rip+0x4aac4]        # 885b0 <img>
   3daec:	mov    ecx,DWORD PTR [rax+0x11ad0]
   3daf2:	test   ecx,ecx
   3daf4:	je     3db19 <SubPelBlockSearchBiPred+0x179>
   3daf6:	movsxd rcx,DWORD PTR [rax+0xc]
   3dafa:	mov    rdx,rcx
   3dafd:	imul   rcx,rcx,0x278
   3db04:	add    rcx,QWORD PTR [rax+0x3758]
   3db0b:	mov    ecx,DWORD PTR [rcx+0x214]
   3db11:	test   ecx,ecx
   3db13:	jne    3dc57 <SubPelBlockSearchBiPred+0x2b7>
   3db19:	mov    eax,edi
   3db1b:	xor    esi,esi
   3db1d:	mov    rdx,QWORD PTR [rip+0x632dc]        # a0e00 <active_pps>
   3db24:	mov    r9d,DWORD PTR [rdx+0xc4]
   3db2b:	movsx  rdx,r10w
   3db2f:	mov    WORD PTR [rsp+0xe0],r9w
   3db38:	test   r9w,r9w
   3db3c:	je     3dc72 <SubPelBlockSearchBiPred+0x2d2>
   3db42:	mov    r11,QWORD PTR [rip+0x7660f]        # b4158 <wbp_weight>
   3db49:	add    rsi,0x1
   3db4d:	lea    r10,[rsi*8+0x0]
   3db55:	mov    r9,QWORD PTR [r11+rsi*8]
   3db59:	mov    rbx,QWORD PTR [r11+r10*1-0x8]
   3db5e:	mov    r11,QWORD PTR [rip+0x765cb]        # b4130 <wp_offset>
   3db65:	mov    rsi,QWORD PTR [r11+rsi*8]
   3db69:	mov    r10,QWORD PTR [r11+r10*1-0x8]
   3db6e:	test   edi,edi
   3db70:	jne    3dbe0 <SubPelBlockSearchBiPred+0x240>
   3db72:	mov    rdi,QWORD PTR [rbx+rdx*8]
   3db76:	mov    rsi,QWORD PTR [rsi+rdx*8]
   3db7a:	mov    r8d,DWORD PTR [r8+0x1c]
   3db7e:	mov    rdi,QWORD PTR [rdi]
   3db81:	movsx  esi,WORD PTR [rsi]
   3db84:	movzx  ebx,WORD PTR [rdi]
   3db87:	mov    rdi,QWORD PTR [r9+rdx*8]
   3db8b:	mov    rdi,QWORD PTR [rdi]
   3db8e:	mov    WORD PTR [rsp+0xfa],bx
   3db96:	movzx  ebx,WORD PTR [rdi]
   3db99:	mov    rdi,QWORD PTR [r10+rdx*8]
   3db9d:	movsx  edi,WORD PTR [rdi]
   3dba0:	mov    WORD PTR [rsp+0xe4],bx
   3dba8:	lea    esi,[rsi+rdi*1+0x1]
   3dbac:	sar    esi,1
   3dbae:	mov    DWORD PTR [rsp+0xc],esi
   3dbb2:	test   r8d,r8d
   3dbb5:	jne    41fca <SubPelBlockSearchBiPred+0x462a>
   3dbbb:	lea    rsi,[rip+0x7985e]        # b7420 <listX>
   3dbc2:	cdqe   
   3dbc4:	mov    BYTE PTR [rsp+0x10c],0x1
   3dbcc:	mov    rax,QWORD PTR [rsi+rax*8]
   3dbd0:	mov    rax,QWORD PTR [rax+rdx*8]
   3dbd4:	mov    rbp,QWORD PTR [rax+0x1930]
   3dbdb:	jmp    3dcd7 <SubPelBlockSearchBiPred+0x337>
   3dbe0:	mov    rdi,QWORD PTR [r9]
   3dbe3:	mov    rsi,QWORD PTR [rsi]
   3dbe6:	mov    r8d,DWORD PTR [r8+0x1c]
   3dbea:	mov    rdi,QWORD PTR [rdi+rdx*8]
   3dbee:	movsx  esi,WORD PTR [rsi]
   3dbf1:	movzx  edi,WORD PTR [rdi]
   3dbf4:	mov    WORD PTR [rsp+0xfa],di
   3dbfc:	mov    rdi,QWORD PTR [rbx]
   3dbff:	mov    rdi,QWORD PTR [rdi+rdx*8]
   3dc03:	movzx  ebx,WORD PTR [rdi]
   3dc06:	mov    rdi,QWORD PTR [r10]
   3dc09:	movsx  edi,WORD PTR [rdi]
   3dc0c:	mov    WORD PTR [rsp+0xe4],bx
   3dc14:	lea    esi,[rdi+rsi*1+0x1]
   3dc18:	sar    esi,1
   3dc1a:	mov    DWORD PTR [rsp+0xc],esi
   3dc1e:	test   r8d,r8d
   3dc21:	je     41ffa <SubPelBlockSearchBiPred+0x465a>
   3dc27:	lea    rsi,[rip+0x797f2]        # b7420 <listX>
   3dc2e:	cdqe   
   3dc30:	mov    BYTE PTR [rsp+0x10c],0x0
   3dc38:	mov    DWORD PTR [rsp+0x94],0x0
   3dc43:	mov    rax,QWORD PTR [rsi+rax*8]
   3dc47:	mov    rax,QWORD PTR [rax+rdx*8]
   3dc4b:	mov    rbp,QWORD PTR [rax+0x1930]
   3dc52:	jmp    3dcda <SubPelBlockSearchBiPred+0x33a>
   3dc57:	and    edx,0x1
   3dc5a:	je     41fb8 <SubPelBlockSearchBiPred+0x4618>
   3dc60:	lea    eax,[rdi+0x4]
   3dc63:	mov    ecx,0x4
   3dc68:	mov    esi,0x4
   3dc6d:	jmp    3db1d <SubPelBlockSearchBiPred+0x17d>
   3dc72:	mov    r8d,DWORD PTR [r8+0x1c]
   3dc76:	mov    esi,0x0
   3dc7b:	cdqe   
   3dc7d:	mov    r9d,0x1
   3dc83:	mov    r10d,0x1
   3dc89:	mov    DWORD PTR [rsp+0xc],0x0
   3dc91:	mov    WORD PTR [rsp+0xe4],r9w
   3dc9a:	test   r8d,r8d
   3dc9d:	cmove  esi,DWORD PTR [rsp+0x94]
   3dca5:	mov    WORD PTR [rsp+0xfa],r10w
   3dcae:	mov    DWORD PTR [rsp+0x94],esi
   3dcb5:	lea    rsi,[rip+0x79764]        # b7420 <listX>
   3dcbc:	mov    rax,QWORD PTR [rsi+rax*8]
   3dcc0:	sete   BYTE PTR [rsp+0x10c]
   3dcc8:	mov    rax,QWORD PTR [rax+rdx*8]
   3dccc:	mov    rbp,QWORD PTR [rax+0x1930]
   3dcd3:	test   edi,edi
   3dcd5:	jne    3dcda <SubPelBlockSearchBiPred+0x33a>
   3dcd7:	add    ecx,0x1
   3dcda:	mov    r14d,DWORD PTR [rax+0x18f8]
   3dce1:	movsxd rcx,ecx
   3dce4:	movsx  r12d,r12w
   3dce8:	mov    ebx,DWORD PTR [rax+0x18fc]
   3dcee:	mov    rdx,QWORD PTR [rsi+rcx*8]
   3dcf2:	mov    rdi,QWORD PTR [rsp+0xf0]
   3dcfa:	mov    eax,r14d
   3dcfd:	mov    rdx,QWORD PTR [rdx]
   3dd00:	sub    eax,r12d
   3dd03:	lea    esi,[rax*4+0x4]
   3dd0a:	movsx  eax,WORD PTR [rsp+0x20]
   3dd0f:	mov    r15,QWORD PTR [rdx+0x1930]
   3dd16:	mov    edx,ebx
   3dd18:	mov    DWORD PTR [rsp+0x138],esi
   3dd1f:	sub    edx,eax
   3dd21:	lea    r10d,[rdx*4+0x4]
   3dd29:	mov    rdx,QWORD PTR [rsp+0xe8]
   3dd31:	mov    DWORD PTR [rsp+0x13c],r10d
   3dd39:	shl    WORD PTR [rdx],0x2
   3dd3d:	movsx  ecx,WORD PTR [rdi]
   3dd40:	shl    ecx,0x2
   3dd43:	mov    WORD PTR [rdi],cx
   3dd46:	movsx  edi,WORD PTR [rsp+0x10]
   3dd4b:	mov    eax,ecx
   3dd4d:	movsx  edx,WORD PTR [rdx]
   3dd50:	mov    DWORD PTR [rsp+0x11c],edi
   3dd57:	mov    r9d,edx
   3dd5a:	add    edx,edi
   3dd5c:	cmp    edx,0x1
   3dd5f:	jle    3dd98 <SubPelBlockSearchBiPred+0x3f8>
   3dd61:	movsx  esi,si
   3dd64:	sub    esi,0x2
   3dd67:	cmp    edx,esi
   3dd69:	jge    3dd98 <SubPelBlockSearchBiPred+0x3f8>
   3dd6b:	movsx  esi,WORD PTR [rsp+0x120]
   3dd73:	movsx  edi,cx
   3dd76:	mov    ecx,esi
   3dd78:	add    ecx,edi
   3dd7a:	cmp    ecx,0x1
   3dd7d:	jle    3dd98 <SubPelBlockSearchBiPred+0x3f8>
   3dd7f:	movsx  esi,r10w
   3dd83:	sub    esi,0x2
   3dd86:	cmp    ecx,esi
   3dd88:	jge    3dd98 <SubPelBlockSearchBiPred+0x3f8>
   3dd8a:	lea    rcx,[rip+0x2024f]        # 5dfe0 <FastPelY_14>
   3dd91:	jmp    3dd9f <SubPelBlockSearchBiPred+0x3ff>
   3dd93:	nop    DWORD PTR [rax+rax*1+0x0]
   3dd98:	lea    rcx,[rip+0x201c1]        # 5df60 <UMVPelY_14>
   3dd9f:	mov    rsi,QWORD PTR [rsp+0x78]
   3dda4:	mov    QWORD PTR [rip+0x4b2b5],rcx        # 89060 <PelY_14>
   3ddab:	movsx  ecx,WORD PTR [rsi]
   3ddae:	add    ecx,DWORD PTR [rsp+0x11c]
   3ddb5:	cmp    ecx,0x1
   3ddb8:	jle    3de00 <SubPelBlockSearchBiPred+0x460>
   3ddba:	movsx  esi,WORD PTR [rsp+0x138]
   3ddc2:	sub    esi,0x2
   3ddc5:	cmp    ecx,esi
   3ddc7:	jge    3de00 <SubPelBlockSearchBiPred+0x460>
   3ddc9:	mov    rsi,QWORD PTR [rsp+0xc0]
   3ddd1:	movsx  ecx,WORD PTR [rsi]
   3ddd4:	movsx  esi,WORD PTR [rsp+0x120]
   3dddc:	add    ecx,esi
   3ddde:	cmp    ecx,0x1
   3dde1:	jle    3de00 <SubPelBlockSearchBiPred+0x460>
   3dde3:	movsx  esi,WORD PTR [rsp+0x13c]
   3ddeb:	sub    esi,0x2
   3ddee:	cmp    ecx,esi
   3ddf0:	jge    3de00 <SubPelBlockSearchBiPred+0x460>
   3ddf2:	lea    rcx,[rip+0x201e7]        # 5dfe0 <FastPelY_14>
   3ddf9:	jmp    3de07 <SubPelBlockSearchBiPred+0x467>
   3ddfb:	nop    DWORD PTR [rax+rax*1+0x0]
   3de00:	lea    rcx,[rip+0x20159]        # 5df60 <UMVPelY_14>
   3de07:	mov    QWORD PTR [rip+0x4b24a],rcx        # 89058 <PelY_14b>
   3de0e:	movzx  edi,r13b
   3de12:	cmp    WORD PTR [rsp+0x108],di
   3de1a:	jle    3fe80 <SubPelBlockSearchBiPred+0x24e0>
   3de20:	movsx  esi,WORD PTR [rsp+0x130]
   3de28:	movzx  r13d,r13b
   3de2c:	xor    ecx,ecx
   3de2e:	mov    WORD PTR [rsp+0x110],cx
   3de36:	mov    DWORD PTR [rsp+0x114],esi
   3de3d:	movsx  esi,WORD PTR [rsp+0x134]
   3de45:	mov    DWORD PTR [rsp+0x118],esi
   3de4c:	lea    rsi,[r13*4+0x0]
   3de54:	mov    r13d,ebx
   3de57:	mov    ebx,r14d
   3de5a:	mov    QWORD PTR [rsp+0x100],rsi
   3de62:	movzx  esi,WORD PTR [rsp+0x128]
   3de6a:	mov    r14,r15
   3de6d:	mov    r15,rbp
   3de70:	mov    ebp,r9d
   3de73:	mov    WORD PTR [rsp+0x112],si
   3de7b:	movzx  esi,WORD PTR [rsp+0x124]
   3de83:	shl    esi,0x2
   3de86:	mov    WORD PTR [rsp+0xe6],si
   3de8e:	lea    rsi,[rsp+0x180]
   3de96:	mov    QWORD PTR [rsp+0xb8],rsi
   3de9e:	mov    rsi,QWORD PTR [rsp+0x100]
   3dea6:	mov    rdx,QWORD PTR [rip+0x795bb]        # b7468 <spiral_search_x>
   3dead:	mov    edx,DWORD PTR [rdx+rsi*1]
   3deb0:	lea    edi,[rbp+rdx*2+0x0]
   3deb4:	mov    rdx,QWORD PTR [rip+0x795d5]        # b7490 <spiral_search_y>
   3debb:	movsx  ecx,di
   3debe:	sub    ecx,DWORD PTR [rsp+0x114]
   3dec5:	mov    WORD PTR [rsp+0xc8],di
   3decd:	mov    edx,DWORD PTR [rdx+rsi*1]
   3ded0:	mov    rsi,QWORD PTR [rip+0x795a1]        # b7478 <mvbits>
   3ded7:	movsxd rcx,ecx
   3deda:	lea    eax,[rax+rdx*2]
   3dedd:	movsx  edx,ax
   3dee0:	sub    edx,DWORD PTR [rsp+0x118]
   3dee7:	movsxd rdx,edx
   3deea:	mov    edx,DWORD PTR [rsi+rdx*4]
   3deed:	add    edx,DWORD PTR [rsi+rcx*4]
   3def0:	imul   edx,DWORD PTR [rsp+0xfc]
   3def8:	shr    edx,0x10
   3defb:	cmp    WORD PTR [rsp+0xce],0x0
   3df04:	mov    DWORD PTR [rsp+0x6c],edx
   3df08:	jle    41f6c <SubPelBlockSearchBiPred+0x45cc>
   3df0e:	xor    edx,edx
   3df10:	movzx  esi,WORD PTR [rsp+0x112]
   3df18:	mov    ebp,ebx
   3df1a:	mov    WORD PTR [rsp+0xca],dx
   3df22:	mov    edx,0xfffffffc
   3df27:	lea    esi,[rax+rsi*4+0x4]
   3df2b:	sub    edx,eax
   3df2d:	movsx  eax,WORD PTR [rsp+0xfa]
   3df35:	mov    WORD PTR [rsp+0xcc],si
   3df3d:	mov    WORD PTR [rsp+0xe2],dx
   3df45:	mov    DWORD PTR [rsp+0x20],eax
   3df49:	nop    DWORD PTR [rax+0x0]
   3df50:	movzx  eax,WORD PTR [rsp+0xcc]
   3df58:	movzx  edx,WORD PTR [rsp+0xe2]
   3df60:	mov    rbx,QWORD PTR [rsp+0xc0]
   3df68:	add    edx,eax
   3df6a:	sub    eax,0x4
   3df6d:	add    dx,WORD PTR [rbx]
   3df70:	cmp    WORD PTR [rsp+0xe0],0x0
   3df79:	jne    3e740 <SubPelBlockSearchBiPred+0xda0>
   3df7f:	cmp    WORD PTR [rsp+0x82],0x0
   3df88:	jle    3e6f1 <SubPelBlockSearchBiPred+0xd51>
   3df8e:	movsx  rsi,WORD PTR [rsp+0xca]
   3df97:	mov    rbx,QWORD PTR [rsp+0xd0]
   3df9f:	cwde   
   3dfa0:	mov    QWORD PTR [rsp+0x10],r15
   3dfa5:	mov    DWORD PTR [rsp+0x38],eax
   3dfa9:	lea    eax,[rdx+0x4]
   3dfac:	lea    rcx,[rsi*8+0x0]
   3dfb4:	cwde   
   3dfb5:	shl    rsi,0x4
   3dfb9:	lea    rdi,[rbx+rcx*1]
   3dfbd:	mov    DWORD PTR [rsp+0x3c],eax
   3dfc1:	movsx  eax,WORD PTR [rsp+0xcc]
   3dfc9:	mov    QWORD PTR [rsp+0x98],rdi
   3dfd1:	lea    rdi,[rbx+rcx*1+0x8]
   3dfd6:	mov    QWORD PTR [rsp+0xa0],rdi
   3dfde:	lea    rdi,[rbx+rcx*1+0x10]
   3dfe3:	lea    rbx,[rbx+rcx*1+0x18]
   3dfe8:	mov    QWORD PTR [rsp+0xb0],rbx
   3dff0:	movsx  ebx,dx
   3dff3:	mov    DWORD PTR [rsp+0x34],ebx
   3dff7:	mov    ebx,eax
   3dff9:	mov    DWORD PTR [rsp+0x40],eax
   3dffd:	lea    eax,[rdx+0x8]
   3e000:	add    edx,0xc
   3e003:	cwde   
   3e004:	mov    QWORD PTR [rsp+0xa8],rdi
   3e00c:	mov    DWORD PTR [rsp+0x44],eax
   3e010:	lea    eax,[rbx+0x4]
   3e013:	cwde   
   3e014:	mov    QWORD PTR [rsp+0xd8],rsi
   3e01c:	mov    DWORD PTR [rsp+0x48],eax
   3e020:	movsx  eax,dx
   3e023:	mov    DWORD PTR [rsp+0x4c],eax
   3e027:	lea    eax,[rbx+0x8]
   3e02a:	xor    ebx,ebx
   3e02c:	cwde   
   3e02d:	mov    WORD PTR [rsp+0x68],bx
   3e032:	mov    DWORD PTR [rsp+0x50],eax
   3e036:	movzx  eax,WORD PTR [rsp+0xe6]
   3e03e:	mov    WORD PTR [rsp+0x60],ax
   3e043:	lea    rax,[rsp+0x140]
   3e04b:	mov    QWORD PTR [rsp+0x88],rax
   3e053:	jmp    3e0a2 <SubPelBlockSearchBiPred+0x702>
   3e055:	nop    DWORD PTR [rax]
   3e058:	mov    esi,DWORD PTR [rsp+0x94]
   3e05f:	mov    rdi,QWORD PTR [rsp+0x88]
   3e067:	call   3bae0 <SATD>
   3e06c:	add    WORD PTR [rsp+0x6c],ax
   3e071:	movsx  eax,WORD PTR [rsp+0x6c]
   3e076:	cmp    eax,DWORD PTR [rsp+0x610]
   3e07d:	jg     3fdac <SubPelBlockSearchBiPred+0x240c>
   3e083:	add    WORD PTR [rsp+0x68],0x4
   3e089:	movzx  eax,WORD PTR [rsp+0x68]
   3e08e:	add    WORD PTR [rsp+0x60],0x10
   3e094:	cmp    WORD PTR [rsp+0x82],ax
   3e09c:	jle    3e6ec <SubPelBlockSearchBiPred+0xd4c>
   3e0a2:	mov    rdx,QWORD PTR [rsp+0x78]
   3e0a7:	movzx  ebx,WORD PTR [rsp+0x60]
   3e0ac:	mov    r8d,ebp
   3e0af:	mov    ecx,r13d
   3e0b2:	mov    rax,QWORD PTR [rsp+0x98]
   3e0ba:	movsx  rdi,WORD PTR [rsp+0x68]
   3e0c0:	add    bx,WORD PTR [rdx]
   3e0c3:	mov    esi,DWORD PTR [rsp+0x34]
   3e0c7:	mov    r15,QWORD PTR [rax]
   3e0ca:	mov    QWORD PTR [rsp+0x28],rdi
   3e0cf:	lea    rax,[rdi+rdi*1]
   3e0d3:	mov    QWORD PTR [rsp+0x18],rax
   3e0d8:	movzx  r12d,WORD PTR [r15+rdi*2]
   3e0dd:	movsx  edi,bx
   3e0e0:	mov    edx,edi
   3e0e2:	mov    DWORD PTR [rsp+0x24],edi
   3e0e6:	mov    rdi,QWORD PTR [rsp+0x10]
   3e0eb:	call   QWORD PTR [rip+0x4af67]        # 89058 <PelY_14b>
   3e0f1:	mov    esi,DWORD PTR [rsp+0x38]
   3e0f5:	mov    r8d,ebp
   3e0f8:	mov    rdi,r14
   3e0fb:	movzx  r11d,WORD PTR [rsp+0xc8]
   3e104:	add    r11w,WORD PTR [rsp+0x60]
   3e10a:	movzx  ebx,ax
   3e10d:	movsx  ecx,r11w
   3e111:	mov    r11d,ecx
   3e114:	mov    ecx,r13d
   3e117:	mov    edx,r11d
   3e11a:	mov    DWORD PTR [rsp+0x30],r11d
   3e11f:	call   QWORD PTR [rip+0x4af3b]        # 89060 <PelY_14>
   3e125:	mov    esi,DWORD PTR [rsp+0x34]
   3e129:	mov    r8d,ebp
   3e12c:	mov    ecx,r13d
   3e12f:	movzx  eax,ax
   3e132:	mov    rdi,QWORD PTR [rsp+0x10]
   3e137:	add    ebx,eax
   3e139:	mov    rax,QWORD PTR [rsp+0x18]
   3e13e:	sar    ebx,1
   3e140:	sub    r12d,ebx
   3e143:	mov    ebx,DWORD PTR [rsp+0x24]
   3e147:	mov    DWORD PTR [rsp+0x140],r12d
   3e14f:	movzx  r12d,WORD PTR [r15+rax*1+0x2]
   3e155:	lea    r11d,[rbx+0x4]
   3e159:	mov    edx,r11d
   3e15c:	mov    DWORD PTR [rsp+0x90],r11d
   3e164:	call   QWORD PTR [rip+0x4aeee]        # 89058 <PelY_14b>
   3e16a:	mov    ecx,DWORD PTR [rsp+0x30]
   3e16e:	mov    esi,DWORD PTR [rsp+0x38]
   3e172:	mov    r8d,ebp
   3e175:	movzx  ebx,ax
   3e178:	mov    rdi,r14
   3e17b:	lea    r10d,[rcx+0x4]
   3e17f:	mov    ecx,r13d
   3e182:	mov    edx,r10d
   3e185:	mov    DWORD PTR [rsp+0x84],r10d
   3e18d:	call   QWORD PTR [rip+0x4aecd]        # 89060 <PelY_14>
   3e193:	mov    esi,DWORD PTR [rsp+0x34]
   3e197:	mov    r8d,ebp
   3e19a:	mov    ecx,r13d
   3e19d:	movzx  eax,ax
   3e1a0:	mov    rdi,QWORD PTR [rsp+0x10]
   3e1a5:	add    ebx,eax
   3e1a7:	mov    rax,QWORD PTR [rsp+0x18]
   3e1ac:	sar    ebx,1
   3e1ae:	sub    r12d,ebx
   3e1b1:	mov    ebx,DWORD PTR [rsp+0x24]
   3e1b5:	mov    DWORD PTR [rsp+0x144],r12d
   3e1bd:	movzx  r12d,WORD PTR [r15+rax*1+0x4]
   3e1c3:	lea    r9d,[rbx+0x8]
   3e1c7:	mov    edx,r9d
   3e1ca:	mov    DWORD PTR [rsp+0x70],r9d
   3e1cf:	call   QWORD PTR [rip+0x4ae83]        # 89058 <PelY_14b>
   3e1d5:	mov    ecx,DWORD PTR [rsp+0x30]
   3e1d9:	mov    esi,DWORD PTR [rsp+0x38]
   3e1dd:	mov    r8d,ebp
   3e1e0:	movzx  ebx,ax
   3e1e3:	mov    rdi,r14
   3e1e6:	lea    edx,[rcx+0x8]
   3e1e9:	mov    ecx,r13d
   3e1ec:	mov    DWORD PTR [rsp+0x54],edx
   3e1f0:	call   QWORD PTR [rip+0x4ae6a]        # 89060 <PelY_14>
   3e1f6:	mov    esi,DWORD PTR [rsp+0x34]
   3e1fa:	mov    r8d,ebp
   3e1fd:	mov    ecx,r13d
   3e200:	movzx  eax,ax
   3e203:	mov    rdi,QWORD PTR [rsp+0x10]
   3e208:	add    ebx,eax
   3e20a:	mov    rax,QWORD PTR [rsp+0x18]
   3e20f:	sar    ebx,1
   3e211:	sub    r12d,ebx
   3e214:	mov    ebx,DWORD PTR [rsp+0x24]
   3e218:	mov    DWORD PTR [rsp+0x148],r12d
   3e220:	movzx  r12d,WORD PTR [r15+rax*1+0x6]
   3e226:	lea    r9d,[rbx+0xc]
   3e22a:	mov    edx,r9d
   3e22d:	mov    DWORD PTR [rsp+0x58],r9d
   3e232:	call   QWORD PTR [rip+0x4ae20]        # 89058 <PelY_14b>
   3e238:	mov    ecx,DWORD PTR [rsp+0x30]
   3e23c:	mov    esi,DWORD PTR [rsp+0x38]
   3e240:	mov    r8d,ebp
   3e243:	movzx  ebx,ax
   3e246:	mov    rdi,r14
   3e249:	lea    r10d,[rcx+0xc]
   3e24d:	mov    ecx,r13d
   3e250:	mov    edx,r10d
   3e253:	mov    DWORD PTR [rsp+0x5c],r10d
   3e258:	call   QWORD PTR [rip+0x4ae02]        # 89060 <PelY_14>
   3e25e:	mov    rsi,QWORD PTR [rsp+0x28]
   3e263:	mov    r8d,ebp
   3e266:	mov    ecx,r13d
   3e269:	movzx  eax,ax
   3e26c:	mov    edx,DWORD PTR [rsp+0x24]
   3e270:	mov    rdi,QWORD PTR [rsp+0x10]
   3e275:	add    ebx,eax
   3e277:	mov    r15,QWORD PTR [rsp+0xa0]
   3e27f:	sar    ebx,1
   3e281:	sub    r12d,ebx
   3e284:	mov    DWORD PTR [rsp+0x14c],r12d
   3e28c:	mov    r12,QWORD PTR [r15]
   3e28f:	movzx  r15d,WORD PTR [r12+rsi*2]
   3e294:	mov    esi,DWORD PTR [rsp+0x3c]
   3e298:	call   QWORD PTR [rip+0x4adba]        # 89058 <PelY_14b>
   3e29e:	mov    edx,DWORD PTR [rsp+0x30]
   3e2a2:	mov    esi,DWORD PTR [rsp+0x40]
   3e2a6:	mov    r8d,ebp
   3e2a9:	movzx  ebx,ax
   3e2ac:	mov    ecx,r13d
   3e2af:	mov    rdi,r14
   3e2b2:	call   QWORD PTR [rip+0x4ada8]        # 89060 <PelY_14>
   3e2b8:	mov    esi,DWORD PTR [rsp+0x3c]
   3e2bc:	mov    r8d,ebp
   3e2bf:	mov    ecx,r13d
   3e2c2:	movzx  eax,ax
   3e2c5:	mov    r11d,DWORD PTR [rsp+0x90]
   3e2cd:	mov    rdi,QWORD PTR [rsp+0x10]
   3e2d2:	add    ebx,eax
   3e2d4:	mov    rax,QWORD PTR [rsp+0x18]
   3e2d9:	sar    ebx,0x2
   3e2dc:	mov    edx,r11d
   3e2df:	sub    r15d,ebx
   3e2e2:	mov    DWORD PTR [rsp+0x150],r15d
   3e2ea:	movzx  r15d,WORD PTR [r12+rax*1+0x2]
   3e2f0:	call   QWORD PTR [rip+0x4ad62]        # 89058 <PelY_14b>
   3e2f6:	mov    esi,DWORD PTR [rsp+0x40]
   3e2fa:	mov    r8d,ebp
   3e2fd:	mov    ecx,r13d
   3e300:	mov    r10d,DWORD PTR [rsp+0x84]
   3e308:	movzx  ebx,ax
   3e30b:	mov    rdi,r14
   3e30e:	mov    edx,r10d
   3e311:	call   QWORD PTR [rip+0x4ad49]        # 89060 <PelY_14>
   3e317:	mov    r9d,DWORD PTR [rsp+0x70]
   3e31c:	mov    r8d,ebp
   3e31f:	mov    ecx,r13d
   3e322:	movzx  eax,ax
   3e325:	mov    esi,DWORD PTR [rsp+0x3c]
   3e329:	mov    rdi,QWORD PTR [rsp+0x10]
   3e32e:	add    ebx,eax
   3e330:	mov    rax,QWORD PTR [rsp+0x18]
   3e335:	mov    edx,r9d
   3e338:	sar    ebx,0x2
   3e33b:	sub    r15d,ebx
   3e33e:	mov    DWORD PTR [rsp+0x154],r15d
   3e346:	movzx  r15d,WORD PTR [r12+rax*1+0x4]
   3e34c:	call   QWORD PTR [rip+0x4ad06]        # 89058 <PelY_14b>
   3e352:	mov    edx,DWORD PTR [rsp+0x54]
   3e356:	mov    esi,DWORD PTR [rsp+0x40]
   3e35a:	mov    r8d,ebp
   3e35d:	movzx  ebx,ax
   3e360:	mov    ecx,r13d
   3e363:	mov    rdi,r14
   3e366:	call   QWORD PTR [rip+0x4acf4]        # 89060 <PelY_14>
   3e36c:	mov    edx,DWORD PTR [rsp+0x58]
   3e370:	mov    esi,DWORD PTR [rsp+0x3c]
   3e374:	mov    r8d,ebp
   3e377:	movzx  eax,ax
   3e37a:	mov    rdi,QWORD PTR [rsp+0x10]
   3e37f:	mov    ecx,r13d
   3e382:	add    ebx,eax
   3e384:	mov    rax,QWORD PTR [rsp+0x18]
   3e389:	sar    ebx,0x2
   3e38c:	sub    r15d,ebx
   3e38f:	movzx  r12d,WORD PTR [r12+rax*1+0x6]
   3e395:	mov    DWORD PTR [rsp+0x158],r15d
   3e39d:	call   QWORD PTR [rip+0x4acb5]        # 89058 <PelY_14b>
   3e3a3:	mov    edx,DWORD PTR [rsp+0x5c]
   3e3a7:	mov    esi,DWORD PTR [rsp+0x40]
   3e3ab:	mov    r8d,ebp
   3e3ae:	movzx  ebx,ax
   3e3b1:	mov    ecx,r13d
   3e3b4:	mov    rdi,r14
   3e3b7:	call   QWORD PTR [rip+0x4aca3]        # 89060 <PelY_14>
   3e3bd:	mov    rsi,QWORD PTR [rsp+0x28]
   3e3c2:	mov    r8d,ebp
   3e3c5:	mov    ecx,r13d
   3e3c8:	movzx  eax,ax
   3e3cb:	mov    edx,DWORD PTR [rsp+0x24]
   3e3cf:	mov    rdi,QWORD PTR [rsp+0x10]
   3e3d4:	add    ebx,eax
   3e3d6:	mov    r11,QWORD PTR [rsp+0xa8]
   3e3de:	sar    ebx,0x2
   3e3e1:	sub    r12d,ebx
   3e3e4:	mov    DWORD PTR [rsp+0x15c],r12d
   3e3ec:	mov    r12,QWORD PTR [r11]
   3e3ef:	movzx  r15d,WORD PTR [r12+rsi*2]
   3e3f4:	mov    esi,DWORD PTR [rsp+0x44]
   3e3f8:	call   QWORD PTR [rip+0x4ac5a]        # 89058 <PelY_14b>
   3e3fe:	mov    edx,DWORD PTR [rsp+0x30]
   3e402:	mov    esi,DWORD PTR [rsp+0x48]
   3e406:	mov    r8d,ebp
   3e409:	movzx  ebx,ax
   3e40c:	mov    ecx,r13d
   3e40f:	mov    rdi,r14
   3e412:	call   QWORD PTR [rip+0x4ac48]        # 89060 <PelY_14>
   3e418:	mov    esi,DWORD PTR [rsp+0x44]
   3e41c:	mov    r8d,ebp
   3e41f:	mov    ecx,r13d
   3e422:	movzx  eax,ax
   3e425:	mov    r11d,DWORD PTR [rsp+0x90]
   3e42d:	mov    rdi,QWORD PTR [rsp+0x10]
   3e432:	add    ebx,eax
   3e434:	mov    rax,QWORD PTR [rsp+0x18]
   3e439:	sar    ebx,1
   3e43b:	mov    edx,r11d
   3e43e:	sub    r15d,ebx
   3e441:	mov    DWORD PTR [rsp+0x160],r15d
   3e449:	movzx  r15d,WORD PTR [r12+rax*1+0x2]
   3e44f:	call   QWORD PTR [rip+0x4ac03]        # 89058 <PelY_14b>
   3e455:	mov    esi,DWORD PTR [rsp+0x48]
   3e459:	mov    r8d,ebp
   3e45c:	mov    ecx,r13d
   3e45f:	mov    r10d,DWORD PTR [rsp+0x84]
   3e467:	movzx  ebx,ax
   3e46a:	mov    rdi,r14
   3e46d:	mov    edx,r10d
   3e470:	call   QWORD PTR [rip+0x4abea]        # 89060 <PelY_14>
   3e476:	mov    r9d,DWORD PTR [rsp+0x70]
   3e47b:	mov    r8d,ebp
   3e47e:	mov    ecx,r13d
   3e481:	movzx  eax,ax
   3e484:	mov    esi,DWORD PTR [rsp+0x44]
   3e488:	mov    rdi,QWORD PTR [rsp+0x10]
   3e48d:	add    ebx,eax
   3e48f:	mov    rax,QWORD PTR [rsp+0x18]
   3e494:	mov    edx,r9d
   3e497:	sar    ebx,1
   3e499:	sub    r15d,ebx
   3e49c:	mov    DWORD PTR [rsp+0x164],r15d
   3e4a4:	movzx  r15d,WORD PTR [r12+rax*1+0x4]
   3e4aa:	call   QWORD PTR [rip+0x4aba8]        # 89058 <PelY_14b>
   3e4b0:	mov    edx,DWORD PTR [rsp+0x54]
   3e4b4:	mov    esi,DWORD PTR [rsp+0x48]
   3e4b8:	mov    r8d,ebp
   3e4bb:	movzx  ebx,ax
   3e4be:	mov    ecx,r13d
   3e4c1:	mov    rdi,r14
   3e4c4:	call   QWORD PTR [rip+0x4ab96]        # 89060 <PelY_14>
   3e4ca:	mov    edx,DWORD PTR [rsp+0x58]
   3e4ce:	mov    esi,DWORD PTR [rsp+0x44]
   3e4d2:	mov    r8d,ebp
   3e4d5:	movzx  eax,ax
   3e4d8:	mov    rdi,QWORD PTR [rsp+0x10]
   3e4dd:	mov    ecx,r13d
   3e4e0:	add    ebx,eax
   3e4e2:	mov    rax,QWORD PTR [rsp+0x18]
   3e4e7:	sar    ebx,1
   3e4e9:	sub    r15d,ebx
   3e4ec:	movzx  r12d,WORD PTR [r12+rax*1+0x6]
   3e4f2:	mov    DWORD PTR [rsp+0x168],r15d
   3e4fa:	call   QWORD PTR [rip+0x4ab58]        # 89058 <PelY_14b>
   3e500:	mov    edx,DWORD PTR [rsp+0x5c]
   3e504:	mov    esi,DWORD PTR [rsp+0x48]
   3e508:	mov    r8d,ebp
   3e50b:	movzx  ebx,ax
   3e50e:	mov    ecx,r13d
   3e511:	mov    rdi,r14
   3e514:	call   QWORD PTR [rip+0x4ab46]        # 89060 <PelY_14>
   3e51a:	mov    rsi,QWORD PTR [rsp+0x28]
   3e51f:	mov    r8d,ebp
   3e522:	mov    ecx,r13d
   3e525:	movzx  eax,ax
   3e528:	mov    edx,DWORD PTR [rsp+0x24]
   3e52c:	mov    rdi,QWORD PTR [rsp+0x10]
   3e531:	add    ebx,eax
   3e533:	mov    r11,QWORD PTR [rsp+0xb0]
   3e53b:	sar    ebx,1
   3e53d:	sub    r12d,ebx
   3e540:	mov    DWORD PTR [rsp+0x16c],r12d
   3e548:	mov    r12,QWORD PTR [r11]
   3e54b:	movzx  r15d,WORD PTR [r12+rsi*2]
   3e550:	mov    esi,DWORD PTR [rsp+0x4c]
   3e554:	call   QWORD PTR [rip+0x4aafe]        # 89058 <PelY_14b>
   3e55a:	mov    edx,DWORD PTR [rsp+0x30]
   3e55e:	mov    esi,DWORD PTR [rsp+0x50]
   3e562:	mov    r8d,ebp
   3e565:	movzx  ebx,ax
   3e568:	mov    ecx,r13d
   3e56b:	mov    rdi,r14
   3e56e:	call   QWORD PTR [rip+0x4aaec]        # 89060 <PelY_14>
   3e574:	mov    esi,DWORD PTR [rsp+0x4c]
   3e578:	mov    r8d,ebp
   3e57b:	mov    ecx,r13d
   3e57e:	movzx  eax,ax
   3e581:	mov    r11d,DWORD PTR [rsp+0x90]
   3e589:	mov    rdi,QWORD PTR [rsp+0x10]
   3e58e:	add    ebx,eax
   3e590:	mov    rax,QWORD PTR [rsp+0x18]
   3e595:	sar    ebx,1
   3e597:	mov    edx,r11d
   3e59a:	sub    r15d,ebx
   3e59d:	mov    DWORD PTR [rsp+0x170],r15d
   3e5a5:	movzx  r15d,WORD PTR [r12+rax*1+0x2]
   3e5ab:	call   QWORD PTR [rip+0x4aaa7]        # 89058 <PelY_14b>
   3e5b1:	mov    esi,DWORD PTR [rsp+0x50]
   3e5b5:	mov    r8d,ebp
   3e5b8:	mov    ecx,r13d
   3e5bb:	mov    r10d,DWORD PTR [rsp+0x84]
   3e5c3:	movzx  ebx,ax
   3e5c6:	mov    rdi,r14
   3e5c9:	mov    edx,r10d
   3e5cc:	call   QWORD PTR [rip+0x4aa8e]        # 89060 <PelY_14>
   3e5d2:	mov    r9d,DWORD PTR [rsp+0x70]
   3e5d7:	mov    r8d,ebp
   3e5da:	mov    ecx,r13d
   3e5dd:	movzx  eax,ax
   3e5e0:	mov    esi,DWORD PTR [rsp+0x4c]
   3e5e4:	mov    rdi,QWORD PTR [rsp+0x10]
   3e5e9:	add    ebx,eax
   3e5eb:	mov    rax,QWORD PTR [rsp+0x18]
   3e5f0:	mov    edx,r9d
   3e5f3:	sar    ebx,1
   3e5f5:	sub    r15d,ebx
   3e5f8:	mov    DWORD PTR [rsp+0x174],r15d
   3e600:	movzx  r15d,WORD PTR [r12+rax*1+0x4]
   3e606:	call   QWORD PTR [rip+0x4aa4c]        # 89058 <PelY_14b>
   3e60c:	mov    edx,DWORD PTR [rsp+0x54]
   3e610:	mov    esi,DWORD PTR [rsp+0x50]
   3e614:	mov    r8d,ebp
   3e617:	movzx  ebx,ax
   3e61a:	mov    ecx,r13d
   3e61d:	mov    rdi,r14
   3e620:	call   QWORD PTR [rip+0x4aa3a]        # 89060 <PelY_14>
   3e626:	mov    edx,DWORD PTR [rsp+0x58]
   3e62a:	mov    esi,DWORD PTR [rsp+0x4c]
   3e62e:	mov    r8d,ebp
   3e631:	movzx  eax,ax
   3e634:	mov    rdi,QWORD PTR [rsp+0x10]
   3e639:	mov    ecx,r13d
   3e63c:	add    ebx,eax
   3e63e:	mov    rax,QWORD PTR [rsp+0x18]
   3e643:	sar    ebx,1
   3e645:	sub    r15d,ebx
   3e648:	movzx  ebx,WORD PTR [r12+rax*1+0x6]
   3e64e:	mov    DWORD PTR [rsp+0x178],r15d
   3e656:	call   QWORD PTR [rip+0x4a9fc]        # 89058 <PelY_14b>
   3e65c:	mov    edx,DWORD PTR [rsp+0x5c]
   3e660:	mov    esi,DWORD PTR [rsp+0x50]
   3e664:	mov    r8d,ebp
   3e667:	movzx  r12d,ax
   3e66b:	mov    ecx,r13d
   3e66e:	mov    rdi,r14
   3e671:	call   QWORD PTR [rip+0x4a9e9]        # 89060 <PelY_14>
   3e677:	movzx  eax,ax
   3e67a:	add    r12d,eax
   3e67d:	sar    r12d,1
   3e680:	sub    ebx,r12d
   3e683:	mov    r12,QWORD PTR [rip+0x49f2e]        # 885b8 <input>
   3e68a:	mov    DWORD PTR [rsp+0x17c],ebx
   3e691:	mov    r11d,DWORD PTR [r12+0xc94]
   3e699:	test   r11d,r11d
   3e69c:	je     3e058 <SubPelBlockSearchBiPred+0x6b8>
   3e6a2:	mov    rbx,QWORD PTR [rsp+0xb8]
   3e6aa:	mov    rax,QWORD PTR [rsp+0x28]
   3e6af:	xor    edi,edi
   3e6b1:	add    rax,QWORD PTR [rsp+0xd8]
   3e6b9:	mov    rsi,QWORD PTR [rsp+0x88]
   3e6c1:	lea    rcx,[rbx+rax*4]
   3e6c5:	xor    eax,eax
   3e6c7:	mov    edx,DWORD PTR [rsi+rax*1]
   3e6ca:	mov    DWORD PTR [rcx+rax*1],edx
   3e6cd:	add    rax,0x4
   3e6d1:	cmp    rax,0x10
   3e6d5:	jne    3e6c7 <SubPelBlockSearchBiPred+0xd27>
   3e6d7:	add    edi,0x4
   3e6da:	add    rsi,0x10
   3e6de:	add    rcx,0x40
   3e6e2:	cmp    edi,0x10
   3e6e5:	jne    3e6c5 <SubPelBlockSearchBiPred+0xd25>
   3e6e7:	jmp    3e083 <SubPelBlockSearchBiPred+0x6e3>
   3e6ec:	mov    r15,QWORD PTR [rsp+0x10]
   3e6f1:	add    WORD PTR [rsp+0xca],0x4
   3e6fa:	movzx  eax,WORD PTR [rsp+0xca]
   3e702:	add    WORD PTR [rsp+0xcc],0x10
   3e70b:	cmp    WORD PTR [rsp+0xce],ax
   3e713:	jg     3df50 <SubPelBlockSearchBiPred+0x5b0>
   3e719:	mov    r12,QWORD PTR [rip+0x49e98]        # 885b8 <input>
   3e720:	mov    rsi,QWORD PTR [rsp+0xe8]
   3e728:	mov    ebx,ebp
   3e72a:	mov    eax,DWORD PTR [r12+0xc94]
   3e732:	movzx  ebp,WORD PTR [rsi]
   3e735:	jmp    41f7b <SubPelBlockSearchBiPred+0x45db>
   3e73a:	nop    WORD PTR [rax+rax*1+0x0]
   3e740:	cmp    WORD PTR [rsp+0x82],0x0
   3e749:	jle    3e6f1 <SubPelBlockSearchBiPred+0xd51>
   3e74b:	movsx  rsi,WORD PTR [rsp+0xca]
   3e754:	mov    rbx,QWORD PTR [rsp+0xd0]
   3e75c:	cwde   
   3e75d:	mov    DWORD PTR [rsp+0x28],eax
   3e761:	lea    eax,[rdx+0x4]
   3e764:	lea    rcx,[rsi*8+0x0]
   3e76c:	cwde   
   3e76d:	shl    rsi,0x4
   3e771:	lea    rdi,[rbx+rcx*1]
   3e775:	mov    DWORD PTR [rsp+0x34],eax
   3e779:	movsx  eax,WORD PTR [rsp+0xcc]
   3e781:	mov    QWORD PTR [rsp+0x98],rdi
   3e789:	lea    rdi,[rbx+rcx*1+0x8]
   3e78e:	mov    QWORD PTR [rsp+0xa0],rdi
   3e796:	lea    rdi,[rbx+rcx*1+0x10]
   3e79b:	lea    rbx,[rbx+rcx*1+0x18]
   3e7a0:	mov    QWORD PTR [rsp+0xa8],rdi
   3e7a8:	movsx  edi,dx
   3e7ab:	mov    DWORD PTR [rsp+0x30],edi
   3e7af:	mov    edi,eax
   3e7b1:	mov    DWORD PTR [rsp+0x38],eax
   3e7b5:	lea    eax,[rdx+0x8]
   3e7b8:	add    edx,0xc
   3e7bb:	cwde   
   3e7bc:	mov    QWORD PTR [rsp+0xb0],rbx
   3e7c4:	movsx  ebx,WORD PTR [rsp+0xe4]
   3e7cc:	mov    DWORD PTR [rsp+0x3c],eax
   3e7d0:	lea    eax,[rdi+0x4]
   3e7d3:	cwde   
   3e7d4:	mov    QWORD PTR [rsp+0xd8],rsi
   3e7dc:	mov    DWORD PTR [rsp+0x40],eax
   3e7e0:	movsx  eax,dx
   3e7e3:	mov    DWORD PTR [rsp+0x44],eax
   3e7e7:	lea    eax,[rdi+0x8]
   3e7ea:	cwde   
   3e7eb:	mov    DWORD PTR [rsp+0x48],eax
   3e7ef:	movzx  eax,WORD PTR [rsp+0xe6]
   3e7f7:	mov    WORD PTR [rsp+0x90],ax
   3e7ff:	xor    eax,eax
   3e801:	mov    WORD PTR [rsp+0x84],ax
   3e809:	lea    rax,[rsp+0x140]
   3e811:	mov    QWORD PTR [rsp+0x88],rax
   3e819:	jmp    3e873 <SubPelBlockSearchBiPred+0xed3>
   3e81b:	nop    DWORD PTR [rax+rax*1+0x0]
   3e820:	mov    esi,DWORD PTR [rsp+0x94]
   3e827:	mov    rdi,QWORD PTR [rsp+0x88]
   3e82f:	call   3bae0 <SATD>
   3e834:	add    WORD PTR [rsp+0x6c],ax
   3e839:	movsx  eax,WORD PTR [rsp+0x6c]
   3e83e:	cmp    eax,DWORD PTR [rsp+0x610]
   3e845:	jg     3fdb1 <SubPelBlockSearchBiPred+0x2411>
   3e84b:	add    WORD PTR [rsp+0x84],0x4
   3e854:	movzx  eax,WORD PTR [rsp+0x84]
   3e85c:	add    WORD PTR [rsp+0x90],0x10
   3e865:	cmp    WORD PTR [rsp+0x82],ax
   3e86d:	jle    3e6f1 <SubPelBlockSearchBiPred+0xd51>
   3e873:	mov    rsi,QWORD PTR [rsp+0x78]
   3e878:	mov    r8d,ebp
   3e87b:	mov    ecx,r13d
   3e87e:	mov    rdi,r15
   3e881:	mov    rax,QWORD PTR [rsp+0x98]
   3e889:	mov    rax,QWORD PTR [rax]
   3e88c:	mov    QWORD PTR [rsp+0x60],rax
   3e891:	movzx  eax,WORD PTR [rsp+0x90]
   3e899:	add    ax,WORD PTR [rsi]
   3e89c:	movsx  esi,ax
   3e89f:	mov    edx,esi
   3e8a1:	mov    DWORD PTR [rsp+0x18],esi
   3e8a5:	mov    esi,DWORD PTR [rsp+0x30]
   3e8a9:	call   QWORD PTR [rip+0x4a7a9]        # 89058 <PelY_14b>
   3e8af:	mov    ecx,r13d
   3e8b2:	mov    rdi,r14
   3e8b5:	mov    esi,DWORD PTR [rsp+0x28]
   3e8b9:	movzx  r12d,ax
   3e8bd:	movzx  eax,WORD PTR [rsp+0xc8]
   3e8c5:	imul   r12d,DWORD PTR [rsp+0x20]
   3e8cb:	mov    r8d,ebp
   3e8ce:	add    ax,WORD PTR [rsp+0x90]
   3e8d6:	cwde   
   3e8d7:	mov    edx,eax
   3e8d9:	mov    DWORD PTR [rsp+0x24],eax
   3e8dd:	call   QWORD PTR [rip+0x4a77d]        # 89060 <PelY_14>
   3e8e3:	mov    edi,DWORD PTR [rip+0x75867]        # b4150 <luma_log_weight_denom>
   3e8e9:	xor    edx,edx
   3e8eb:	movzx  eax,ax
   3e8ee:	imul   eax,ebx
   3e8f1:	lea    ecx,[rdi+0x1]
   3e8f4:	add    r12d,eax
   3e8f7:	mov    eax,DWORD PTR [rip+0x758b7]        # b41b4 <wp_luma_round>
   3e8fd:	lea    eax,[r12+rax*2]
   3e901:	sar    eax,cl
   3e903:	mov    r9d,eax
   3e906:	add    r9d,DWORD PTR [rsp+0xc]
   3e90b:	js     3e9d8 <SubPelBlockSearchBiPred+0x1038>
   3e911:	mov    edx,DWORD PTR [rsp+0x18]
   3e915:	mov    esi,DWORD PTR [rsp+0x30]
   3e919:	mov    r8d,ebp
   3e91c:	mov    ecx,r13d
   3e91f:	mov    rdi,r15
   3e922:	call   QWORD PTR [rip+0x4a730]        # 89058 <PelY_14b>
   3e928:	mov    edx,DWORD PTR [rsp+0x24]
   3e92c:	mov    ecx,r13d
   3e92f:	mov    esi,DWORD PTR [rsp+0x28]
   3e933:	movzx  r12d,ax
   3e937:	imul   r12d,DWORD PTR [rsp+0x20]
   3e93d:	mov    r8d,ebp
   3e940:	mov    rdi,r14
   3e943:	call   QWORD PTR [rip+0x4a717]        # 89060 <PelY_14>
   3e949:	mov    rdx,QWORD PTR [rip+0x49c60]        # 885b0 <img>
   3e950:	mov    r11d,DWORD PTR [rip+0x757f9]        # b4150 <luma_log_weight_denom>
   3e957:	movzx  eax,ax
   3e95a:	imul   eax,ebx
   3e95d:	lea    ecx,[r11+0x1]
   3e961:	mov    edx,DWORD PTR [rdx+0x11bec]
   3e967:	add    r12d,eax
   3e96a:	mov    eax,DWORD PTR [rip+0x75844]        # b41b4 <wp_luma_round>
   3e970:	lea    eax,[r12+rax*2]
   3e974:	sar    eax,cl
   3e976:	add    eax,DWORD PTR [rsp+0xc]
   3e97a:	cmp    eax,edx
   3e97c:	jg     3e9d8 <SubPelBlockSearchBiPred+0x1038>
   3e97e:	mov    edx,DWORD PTR [rsp+0x18]
   3e982:	mov    esi,DWORD PTR [rsp+0x30]
   3e986:	mov    r8d,ebp
   3e989:	mov    ecx,r13d
   3e98c:	mov    rdi,r15
   3e98f:	call   QWORD PTR [rip+0x4a6c3]        # 89058 <PelY_14b>
   3e995:	mov    edx,DWORD PTR [rsp+0x24]
   3e999:	mov    ecx,r13d
   3e99c:	mov    esi,DWORD PTR [rsp+0x28]
   3e9a0:	movzx  r12d,ax
   3e9a4:	imul   r12d,DWORD PTR [rsp+0x20]
   3e9aa:	mov    r8d,ebp
   3e9ad:	mov    rdi,r14
   3e9b0:	call   QWORD PTR [rip+0x4a6aa]        # 89060 <PelY_14>
   3e9b6:	movzx  eax,ax
   3e9b9:	imul   eax,ebx
   3e9bc:	add    r12d,eax
   3e9bf:	mov    eax,DWORD PTR [rip+0x757ef]        # b41b4 <wp_luma_round>
   3e9c5:	lea    edx,[r12+rax*2]
   3e9c9:	mov    eax,DWORD PTR [rip+0x75781]        # b4150 <luma_log_weight_denom>
   3e9cf:	lea    ecx,[rax+0x1]
   3e9d2:	sar    edx,cl
   3e9d4:	add    edx,DWORD PTR [rsp+0xc]
   3e9d8:	movsx  rax,WORD PTR [rsp+0x84]
   3e9e1:	mov    r8d,ebp
   3e9e4:	mov    ecx,r13d
   3e9e7:	mov    rdi,r15
   3e9ea:	lea    rsi,[rax+rax*1]
   3e9ee:	mov    QWORD PTR [rsp+0x70],rax
   3e9f3:	mov    QWORD PTR [rsp+0x10],rsi
   3e9f8:	mov    rsi,QWORD PTR [rsp+0x60]
   3e9fd:	movzx  eax,WORD PTR [rsi+rax*2]
   3ea01:	mov    esi,DWORD PTR [rsp+0x30]
   3ea05:	sub    eax,edx
   3ea07:	mov    DWORD PTR [rsp+0x140],eax
   3ea0e:	mov    eax,DWORD PTR [rsp+0x18]
   3ea12:	add    eax,0x4
   3ea15:	mov    edx,eax
   3ea17:	mov    DWORD PTR [rsp+0x4c],eax
   3ea1b:	call   QWORD PTR [rip+0x4a637]        # 89058 <PelY_14b>
   3ea21:	mov    r11d,DWORD PTR [rsp+0x24]
   3ea26:	mov    ecx,r13d
   3ea29:	mov    r8d,ebp
   3ea2c:	movzx  r12d,ax
   3ea30:	mov    esi,DWORD PTR [rsp+0x28]
   3ea34:	imul   r12d,DWORD PTR [rsp+0x20]
   3ea3a:	lea    edi,[r11+0x4]
   3ea3e:	mov    edx,edi
   3ea40:	mov    DWORD PTR [rsp+0x50],edi
   3ea44:	mov    rdi,r14
   3ea47:	call   QWORD PTR [rip+0x4a613]        # 89060 <PelY_14>
   3ea4d:	mov    r10d,DWORD PTR [rip+0x756fc]        # b4150 <luma_log_weight_denom>
   3ea54:	xor    edx,edx
   3ea56:	movzx  eax,ax
   3ea59:	imul   eax,ebx
   3ea5c:	lea    ecx,[r10+0x1]
   3ea60:	add    r12d,eax
   3ea63:	mov    eax,DWORD PTR [rip+0x7574b]        # b41b4 <wp_luma_round>
   3ea69:	lea    eax,[r12+rax*2]
   3ea6d:	sar    eax,cl
   3ea6f:	mov    r11d,eax
   3ea72:	add    r11d,DWORD PTR [rsp+0xc]
   3ea77:	js     3eb44 <SubPelBlockSearchBiPred+0x11a4>
   3ea7d:	mov    edx,DWORD PTR [rsp+0x4c]
   3ea81:	mov    esi,DWORD PTR [rsp+0x30]
   3ea85:	mov    r8d,ebp
   3ea88:	mov    ecx,r13d
   3ea8b:	mov    rdi,r15
   3ea8e:	call   QWORD PTR [rip+0x4a5c4]        # 89058 <PelY_14b>
   3ea94:	mov    edx,DWORD PTR [rsp+0x50]
   3ea98:	mov    ecx,r13d
   3ea9b:	mov    esi,DWORD PTR [rsp+0x28]
   3ea9f:	movzx  r12d,ax
   3eaa3:	imul   r12d,DWORD PTR [rsp+0x20]
   3eaa9:	mov    r8d,ebp
   3eaac:	mov    rdi,r14
   3eaaf:	call   QWORD PTR [rip+0x4a5ab]        # 89060 <PelY_14>
   3eab5:	mov    rdx,QWORD PTR [rip+0x49af4]        # 885b0 <img>
   3eabc:	mov    r11d,DWORD PTR [rip+0x7568d]        # b4150 <luma_log_weight_denom>
   3eac3:	movzx  eax,ax
   3eac6:	imul   eax,ebx
   3eac9:	lea    ecx,[r11+0x1]
   3eacd:	mov    edx,DWORD PTR [rdx+0x11bec]
   3ead3:	add    r12d,eax
   3ead6:	mov    eax,DWORD PTR [rip+0x756d8]        # b41b4 <wp_luma_round>
   3eadc:	lea    eax,[r12+rax*2]
   3eae0:	sar    eax,cl
   3eae2:	add    eax,DWORD PTR [rsp+0xc]
   3eae6:	cmp    eax,edx
   3eae8:	jg     3eb44 <SubPelBlockSearchBiPred+0x11a4>
   3eaea:	mov    edx,DWORD PTR [rsp+0x4c]
   3eaee:	mov    esi,DWORD PTR [rsp+0x30]
   3eaf2:	mov    r8d,ebp
   3eaf5:	mov    ecx,r13d
   3eaf8:	mov    rdi,r15
   3eafb:	call   QWORD PTR [rip+0x4a557]        # 89058 <PelY_14b>
   3eb01:	mov    edx,DWORD PTR [rsp+0x50]
   3eb05:	mov    ecx,r13d
   3eb08:	mov    esi,DWORD PTR [rsp+0x28]
   3eb0c:	movzx  r12d,ax
   3eb10:	imul   r12d,DWORD PTR [rsp+0x20]
   3eb16:	mov    r8d,ebp
   3eb19:	mov    rdi,r14
   3eb1c:	call   QWORD PTR [rip+0x4a53e]        # 89060 <PelY_14>
   3eb22:	movzx  eax,ax
   3eb25:	imul   eax,ebx
   3eb28:	add    r12d,eax
   3eb2b:	mov    eax,DWORD PTR [rip+0x75683]        # b41b4 <wp_luma_round>
   3eb31:	lea    edx,[r12+rax*2]
   3eb35:	mov    eax,DWORD PTR [rip+0x75615]        # b4150 <luma_log_weight_denom>
   3eb3b:	lea    ecx,[rax+0x1]
   3eb3e:	sar    edx,cl
   3eb40:	add    edx,DWORD PTR [rsp+0xc]
   3eb44:	mov    rsi,QWORD PTR [rsp+0x10]
   3eb49:	mov    rax,QWORD PTR [rsp+0x60]
   3eb4e:	mov    r8d,ebp
   3eb51:	mov    ecx,r13d
   3eb54:	mov    rdi,r15
   3eb57:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   3eb5c:	mov    esi,DWORD PTR [rsp+0x30]
   3eb60:	sub    eax,edx
   3eb62:	mov    DWORD PTR [rsp+0x144],eax
   3eb69:	mov    eax,DWORD PTR [rsp+0x18]
   3eb6d:	add    eax,0x8
   3eb70:	mov    edx,eax
   3eb72:	mov    DWORD PTR [rsp+0x54],eax
   3eb76:	call   QWORD PTR [rip+0x4a4dc]        # 89058 <PelY_14b>
   3eb7c:	mov    r9d,DWORD PTR [rsp+0x24]
   3eb81:	mov    ecx,r13d
   3eb84:	mov    r8d,ebp
   3eb87:	movzx  r12d,ax
   3eb8b:	mov    esi,DWORD PTR [rsp+0x28]
   3eb8f:	imul   r12d,DWORD PTR [rsp+0x20]
   3eb95:	lea    edi,[r9+0x8]
   3eb99:	mov    edx,edi
   3eb9b:	mov    DWORD PTR [rsp+0x58],edi
   3eb9f:	mov    rdi,r14
   3eba2:	call   QWORD PTR [rip+0x4a4b8]        # 89060 <PelY_14>
   3eba8:	mov    r10d,DWORD PTR [rip+0x755a1]        # b4150 <luma_log_weight_denom>
   3ebaf:	xor    edx,edx
   3ebb1:	movzx  eax,ax
   3ebb4:	imul   eax,ebx
   3ebb7:	lea    ecx,[r10+0x1]
   3ebbb:	add    r12d,eax
   3ebbe:	mov    eax,DWORD PTR [rip+0x755f0]        # b41b4 <wp_luma_round>
   3ebc4:	lea    eax,[r12+rax*2]
   3ebc8:	sar    eax,cl
   3ebca:	mov    r9d,eax
   3ebcd:	add    r9d,DWORD PTR [rsp+0xc]
   3ebd2:	js     3ec9f <SubPelBlockSearchBiPred+0x12ff>
   3ebd8:	mov    edx,DWORD PTR [rsp+0x54]
   3ebdc:	mov    esi,DWORD PTR [rsp+0x30]
   3ebe0:	mov    r8d,ebp
   3ebe3:	mov    ecx,r13d
   3ebe6:	mov    rdi,r15
   3ebe9:	call   QWORD PTR [rip+0x4a469]        # 89058 <PelY_14b>
   3ebef:	mov    edx,DWORD PTR [rsp+0x58]
   3ebf3:	mov    ecx,r13d
   3ebf6:	mov    esi,DWORD PTR [rsp+0x28]
   3ebfa:	movzx  r12d,ax
   3ebfe:	imul   r12d,DWORD PTR [rsp+0x20]
   3ec04:	mov    r8d,ebp
   3ec07:	mov    rdi,r14
   3ec0a:	call   QWORD PTR [rip+0x4a450]        # 89060 <PelY_14>
   3ec10:	mov    rdx,QWORD PTR [rip+0x49999]        # 885b0 <img>
   3ec17:	mov    r9d,DWORD PTR [rip+0x75532]        # b4150 <luma_log_weight_denom>
   3ec1e:	movzx  eax,ax
   3ec21:	imul   eax,ebx
   3ec24:	lea    ecx,[r9+0x1]
   3ec28:	mov    edx,DWORD PTR [rdx+0x11bec]
   3ec2e:	add    r12d,eax
   3ec31:	mov    eax,DWORD PTR [rip+0x7557d]        # b41b4 <wp_luma_round>
   3ec37:	lea    eax,[r12+rax*2]
   3ec3b:	sar    eax,cl
   3ec3d:	add    eax,DWORD PTR [rsp+0xc]
   3ec41:	cmp    eax,edx
   3ec43:	jg     3ec9f <SubPelBlockSearchBiPred+0x12ff>
   3ec45:	mov    edx,DWORD PTR [rsp+0x54]
   3ec49:	mov    esi,DWORD PTR [rsp+0x30]
   3ec4d:	mov    r8d,ebp
   3ec50:	mov    ecx,r13d
   3ec53:	mov    rdi,r15
   3ec56:	call   QWORD PTR [rip+0x4a3fc]        # 89058 <PelY_14b>
   3ec5c:	mov    edx,DWORD PTR [rsp+0x58]
   3ec60:	mov    ecx,r13d
   3ec63:	mov    esi,DWORD PTR [rsp+0x28]
   3ec67:	movzx  r12d,ax
   3ec6b:	imul   r12d,DWORD PTR [rsp+0x20]
   3ec71:	mov    r8d,ebp
   3ec74:	mov    rdi,r14
   3ec77:	call   QWORD PTR [rip+0x4a3e3]        # 89060 <PelY_14>
   3ec7d:	movzx  eax,ax
   3ec80:	imul   eax,ebx
   3ec83:	add    r12d,eax
   3ec86:	mov    eax,DWORD PTR [rip+0x75528]        # b41b4 <wp_luma_round>
   3ec8c:	lea    edx,[r12+rax*2]
   3ec90:	mov    eax,DWORD PTR [rip+0x754ba]        # b4150 <luma_log_weight_denom>
   3ec96:	lea    ecx,[rax+0x1]
   3ec99:	sar    edx,cl
   3ec9b:	add    edx,DWORD PTR [rsp+0xc]
   3ec9f:	mov    rsi,QWORD PTR [rsp+0x10]
   3eca4:	mov    rax,QWORD PTR [rsp+0x60]
   3eca9:	mov    r8d,ebp
   3ecac:	mov    ecx,r13d
   3ecaf:	mov    rdi,r15
   3ecb2:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   3ecb7:	mov    esi,DWORD PTR [rsp+0x30]
   3ecbb:	sub    eax,edx
   3ecbd:	mov    DWORD PTR [rsp+0x148],eax
   3ecc4:	mov    eax,DWORD PTR [rsp+0x18]
   3ecc8:	add    eax,0xc
   3eccb:	mov    edx,eax
   3eccd:	mov    DWORD PTR [rsp+0x5c],eax
   3ecd1:	call   QWORD PTR [rip+0x4a381]        # 89058 <PelY_14b>
   3ecd7:	mov    r11d,DWORD PTR [rsp+0x24]
   3ecdc:	mov    ecx,r13d
   3ecdf:	mov    r8d,ebp
   3ece2:	movzx  r12d,ax
   3ece6:	mov    esi,DWORD PTR [rsp+0x28]
   3ecea:	imul   r12d,DWORD PTR [rsp+0x20]
   3ecf0:	lea    edi,[r11+0xc]
   3ecf4:	mov    edx,edi
   3ecf6:	mov    DWORD PTR [rsp+0x68],edi
   3ecfa:	mov    rdi,r14
   3ecfd:	call   QWORD PTR [rip+0x4a35d]        # 89060 <PelY_14>
   3ed03:	mov    r10d,DWORD PTR [rip+0x75446]        # b4150 <luma_log_weight_denom>
   3ed0a:	xor    edx,edx
   3ed0c:	movzx  eax,ax
   3ed0f:	imul   eax,ebx
   3ed12:	lea    ecx,[r10+0x1]
   3ed16:	add    r12d,eax
   3ed19:	mov    eax,DWORD PTR [rip+0x75495]        # b41b4 <wp_luma_round>
   3ed1f:	lea    eax,[r12+rax*2]
   3ed23:	sar    eax,cl
   3ed25:	mov    r9d,eax
   3ed28:	add    r9d,DWORD PTR [rsp+0xc]
   3ed2d:	js     3edfa <SubPelBlockSearchBiPred+0x145a>
   3ed33:	mov    edx,DWORD PTR [rsp+0x5c]
   3ed37:	mov    esi,DWORD PTR [rsp+0x30]
   3ed3b:	mov    r8d,ebp
   3ed3e:	mov    ecx,r13d
   3ed41:	mov    rdi,r15
   3ed44:	call   QWORD PTR [rip+0x4a30e]        # 89058 <PelY_14b>
   3ed4a:	mov    edx,DWORD PTR [rsp+0x68]
   3ed4e:	mov    ecx,r13d
   3ed51:	mov    esi,DWORD PTR [rsp+0x28]
   3ed55:	movzx  r12d,ax
   3ed59:	imul   r12d,DWORD PTR [rsp+0x20]
   3ed5f:	mov    r8d,ebp
   3ed62:	mov    rdi,r14
   3ed65:	call   QWORD PTR [rip+0x4a2f5]        # 89060 <PelY_14>
   3ed6b:	mov    rdx,QWORD PTR [rip+0x4983e]        # 885b0 <img>
   3ed72:	mov    r9d,DWORD PTR [rip+0x753d7]        # b4150 <luma_log_weight_denom>
   3ed79:	movzx  eax,ax
   3ed7c:	imul   eax,ebx
   3ed7f:	lea    ecx,[r9+0x1]
   3ed83:	mov    edx,DWORD PTR [rdx+0x11bec]
   3ed89:	add    r12d,eax
   3ed8c:	mov    eax,DWORD PTR [rip+0x75422]        # b41b4 <wp_luma_round>
   3ed92:	lea    eax,[r12+rax*2]
   3ed96:	sar    eax,cl
   3ed98:	add    eax,DWORD PTR [rsp+0xc]
   3ed9c:	cmp    eax,edx
   3ed9e:	jg     3edfa <SubPelBlockSearchBiPred+0x145a>
   3eda0:	mov    edx,DWORD PTR [rsp+0x5c]
   3eda4:	mov    esi,DWORD PTR [rsp+0x30]
   3eda8:	mov    r8d,ebp
   3edab:	mov    ecx,r13d
   3edae:	mov    rdi,r15
   3edb1:	call   QWORD PTR [rip+0x4a2a1]        # 89058 <PelY_14b>
   3edb7:	mov    edx,DWORD PTR [rsp+0x68]
   3edbb:	mov    ecx,r13d
   3edbe:	mov    esi,DWORD PTR [rsp+0x28]
   3edc2:	movzx  r12d,ax
   3edc6:	imul   r12d,DWORD PTR [rsp+0x20]
   3edcc:	mov    r8d,ebp
   3edcf:	mov    rdi,r14
   3edd2:	call   QWORD PTR [rip+0x4a288]        # 89060 <PelY_14>
   3edd8:	movzx  eax,ax
   3eddb:	imul   eax,ebx
   3edde:	add    r12d,eax
   3ede1:	mov    eax,DWORD PTR [rip+0x753cd]        # b41b4 <wp_luma_round>
   3ede7:	lea    edx,[r12+rax*2]
   3edeb:	mov    eax,DWORD PTR [rip+0x7535f]        # b4150 <luma_log_weight_denom>
   3edf1:	lea    ecx,[rax+0x1]
   3edf4:	sar    edx,cl
   3edf6:	add    edx,DWORD PTR [rsp+0xc]
   3edfa:	mov    rax,QWORD PTR [rsp+0x60]
   3edff:	mov    rsi,QWORD PTR [rsp+0x10]
   3ee04:	mov    r8d,ebp
   3ee07:	mov    ecx,r13d
   3ee0a:	mov    rdi,r15
   3ee0d:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   3ee12:	mov    esi,DWORD PTR [rsp+0x34]
   3ee16:	sub    eax,edx
   3ee18:	mov    edx,DWORD PTR [rsp+0x18]
   3ee1c:	mov    DWORD PTR [rsp+0x14c],eax
   3ee23:	mov    rax,QWORD PTR [rsp+0xa0]
   3ee2b:	mov    rax,QWORD PTR [rax]
   3ee2e:	mov    QWORD PTR [rsp+0x60],rax
   3ee33:	call   QWORD PTR [rip+0x4a21f]        # 89058 <PelY_14b>
   3ee39:	mov    edx,DWORD PTR [rsp+0x24]
   3ee3d:	mov    ecx,r13d
   3ee40:	mov    rdi,r14
   3ee43:	movzx  r12d,ax
   3ee47:	mov    esi,DWORD PTR [rsp+0x38]
   3ee4b:	imul   r12d,DWORD PTR [rsp+0x20]
   3ee51:	mov    r8d,ebp
   3ee54:	call   QWORD PTR [rip+0x4a206]        # 89060 <PelY_14>
   3ee5a:	mov    edi,DWORD PTR [rip+0x752f0]        # b4150 <luma_log_weight_denom>
   3ee60:	xor    edx,edx
   3ee62:	movzx  eax,ax
   3ee65:	imul   eax,ebx
   3ee68:	lea    ecx,[rdi+0x1]
   3ee6b:	add    r12d,eax
   3ee6e:	mov    eax,DWORD PTR [rip+0x75340]        # b41b4 <wp_luma_round>
   3ee74:	lea    eax,[r12+rax*2]
   3ee78:	sar    eax,cl
   3ee7a:	mov    ecx,eax
   3ee7c:	add    ecx,DWORD PTR [rsp+0xc]
   3ee80:	js     3ef4b <SubPelBlockSearchBiPred+0x15ab>
   3ee86:	mov    edx,DWORD PTR [rsp+0x18]
   3ee8a:	mov    esi,DWORD PTR [rsp+0x34]
   3ee8e:	mov    r8d,ebp
   3ee91:	mov    ecx,r13d
   3ee94:	mov    rdi,r15
   3ee97:	call   QWORD PTR [rip+0x4a1bb]        # 89058 <PelY_14b>
   3ee9d:	mov    edx,DWORD PTR [rsp+0x24]
   3eea1:	mov    ecx,r13d
   3eea4:	mov    esi,DWORD PTR [rsp+0x38]
   3eea8:	movzx  r12d,ax
   3eeac:	imul   r12d,DWORD PTR [rsp+0x20]
   3eeb2:	mov    r8d,ebp
   3eeb5:	mov    rdi,r14
   3eeb8:	call   QWORD PTR [rip+0x4a1a2]        # 89060 <PelY_14>
   3eebe:	mov    rdx,QWORD PTR [rip+0x496eb]        # 885b0 <img>
   3eec5:	mov    ecx,DWORD PTR [rip+0x75285]        # b4150 <luma_log_weight_denom>
   3eecb:	movzx  eax,ax
   3eece:	imul   eax,ebx
   3eed1:	add    ecx,0x1
   3eed4:	mov    edx,DWORD PTR [rdx+0x11bec]
   3eeda:	add    r12d,eax
   3eedd:	mov    eax,DWORD PTR [rip+0x752d1]        # b41b4 <wp_luma_round>
   3eee3:	lea    eax,[r12+rax*2]
   3eee7:	sar    eax,cl
   3eee9:	add    eax,DWORD PTR [rsp+0xc]
   3eeed:	cmp    eax,edx
   3eeef:	jg     3ef4b <SubPelBlockSearchBiPred+0x15ab>
   3eef1:	mov    edx,DWORD PTR [rsp+0x18]
   3eef5:	mov    esi,DWORD PTR [rsp+0x34]
   3eef9:	mov    r8d,ebp
   3eefc:	mov    ecx,r13d
   3eeff:	mov    rdi,r15
   3ef02:	call   QWORD PTR [rip+0x4a150]        # 89058 <PelY_14b>
   3ef08:	mov    edx,DWORD PTR [rsp+0x24]
   3ef0c:	mov    ecx,r13d
   3ef0f:	mov    esi,DWORD PTR [rsp+0x38]
   3ef13:	movzx  r12d,ax
   3ef17:	imul   r12d,DWORD PTR [rsp+0x20]
   3ef1d:	mov    r8d,ebp
   3ef20:	mov    rdi,r14
   3ef23:	call   QWORD PTR [rip+0x4a137]        # 89060 <PelY_14>
   3ef29:	movzx  eax,ax
   3ef2c:	imul   eax,ebx
   3ef2f:	add    r12d,eax
   3ef32:	mov    eax,DWORD PTR [rip+0x7527c]        # b41b4 <wp_luma_round>
   3ef38:	lea    edx,[r12+rax*2]
   3ef3c:	mov    eax,DWORD PTR [rip+0x7520e]        # b4150 <luma_log_weight_denom>
   3ef42:	lea    ecx,[rax+0x1]
   3ef45:	sar    edx,cl
   3ef47:	add    edx,DWORD PTR [rsp+0xc]
   3ef4b:	mov    rsi,QWORD PTR [rsp+0x70]
   3ef50:	mov    rax,QWORD PTR [rsp+0x60]
   3ef55:	mov    r8d,ebp
   3ef58:	mov    ecx,r13d
   3ef5b:	mov    rdi,r15
   3ef5e:	movzx  eax,WORD PTR [rax+rsi*2]
   3ef62:	mov    esi,DWORD PTR [rsp+0x34]
   3ef66:	sub    eax,edx
   3ef68:	mov    edx,DWORD PTR [rsp+0x4c]
   3ef6c:	mov    DWORD PTR [rsp+0x150],eax
   3ef73:	call   QWORD PTR [rip+0x4a0df]        # 89058 <PelY_14b>
   3ef79:	mov    edx,DWORD PTR [rsp+0x50]
   3ef7d:	mov    ecx,r13d
   3ef80:	mov    rdi,r14
   3ef83:	movzx  r12d,ax
   3ef87:	mov    esi,DWORD PTR [rsp+0x38]
   3ef8b:	imul   r12d,DWORD PTR [rsp+0x20]
   3ef91:	mov    r8d,ebp
   3ef94:	call   QWORD PTR [rip+0x4a0c6]        # 89060 <PelY_14>
   3ef9a:	mov    edi,DWORD PTR [rip+0x751b0]        # b4150 <luma_log_weight_denom>
   3efa0:	xor    edx,edx
   3efa2:	movzx  eax,ax
   3efa5:	imul   eax,ebx
   3efa8:	lea    ecx,[rdi+0x1]
   3efab:	add    r12d,eax
   3efae:	mov    eax,DWORD PTR [rip+0x75200]        # b41b4 <wp_luma_round>
   3efb4:	lea    eax,[r12+rax*2]
   3efb8:	sar    eax,cl
   3efba:	mov    ecx,eax
   3efbc:	add    ecx,DWORD PTR [rsp+0xc]
   3efc0:	js     3f08b <SubPelBlockSearchBiPred+0x16eb>
   3efc6:	mov    edx,DWORD PTR [rsp+0x4c]
   3efca:	mov    esi,DWORD PTR [rsp+0x34]
   3efce:	mov    r8d,ebp
   3efd1:	mov    ecx,r13d
   3efd4:	mov    rdi,r15
   3efd7:	call   QWORD PTR [rip+0x4a07b]        # 89058 <PelY_14b>
   3efdd:	mov    edx,DWORD PTR [rsp+0x50]
   3efe1:	mov    ecx,r13d
   3efe4:	mov    esi,DWORD PTR [rsp+0x38]
   3efe8:	movzx  r12d,ax
   3efec:	imul   r12d,DWORD PTR [rsp+0x20]
   3eff2:	mov    r8d,ebp
   3eff5:	mov    rdi,r14
   3eff8:	call   QWORD PTR [rip+0x4a062]        # 89060 <PelY_14>
   3effe:	mov    rdx,QWORD PTR [rip+0x495ab]        # 885b0 <img>
   3f005:	mov    ecx,DWORD PTR [rip+0x75145]        # b4150 <luma_log_weight_denom>
   3f00b:	movzx  eax,ax
   3f00e:	imul   eax,ebx
   3f011:	add    ecx,0x1
   3f014:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f01a:	add    r12d,eax
   3f01d:	mov    eax,DWORD PTR [rip+0x75191]        # b41b4 <wp_luma_round>
   3f023:	lea    eax,[r12+rax*2]
   3f027:	sar    eax,cl
   3f029:	add    eax,DWORD PTR [rsp+0xc]
   3f02d:	cmp    eax,edx
   3f02f:	jg     3f08b <SubPelBlockSearchBiPred+0x16eb>
   3f031:	mov    edx,DWORD PTR [rsp+0x4c]
   3f035:	mov    esi,DWORD PTR [rsp+0x34]
   3f039:	mov    r8d,ebp
   3f03c:	mov    ecx,r13d
   3f03f:	mov    rdi,r15
   3f042:	call   QWORD PTR [rip+0x4a010]        # 89058 <PelY_14b>
   3f048:	mov    edx,DWORD PTR [rsp+0x50]
   3f04c:	mov    ecx,r13d
   3f04f:	mov    esi,DWORD PTR [rsp+0x38]
   3f053:	movzx  r12d,ax
   3f057:	imul   r12d,DWORD PTR [rsp+0x20]
   3f05d:	mov    r8d,ebp
   3f060:	mov    rdi,r14
   3f063:	call   QWORD PTR [rip+0x49ff7]        # 89060 <PelY_14>
   3f069:	movzx  eax,ax
   3f06c:	imul   eax,ebx
   3f06f:	add    r12d,eax
   3f072:	mov    eax,DWORD PTR [rip+0x7513c]        # b41b4 <wp_luma_round>
   3f078:	lea    edx,[r12+rax*2]
   3f07c:	mov    eax,DWORD PTR [rip+0x750ce]        # b4150 <luma_log_weight_denom>
   3f082:	lea    ecx,[rax+0x1]
   3f085:	sar    edx,cl
   3f087:	add    edx,DWORD PTR [rsp+0xc]
   3f08b:	mov    rsi,QWORD PTR [rsp+0x10]
   3f090:	mov    rax,QWORD PTR [rsp+0x60]
   3f095:	mov    r8d,ebp
   3f098:	mov    ecx,r13d
   3f09b:	mov    rdi,r15
   3f09e:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   3f0a3:	mov    esi,DWORD PTR [rsp+0x34]
   3f0a7:	sub    eax,edx
   3f0a9:	mov    edx,DWORD PTR [rsp+0x54]
   3f0ad:	mov    DWORD PTR [rsp+0x154],eax
   3f0b4:	call   QWORD PTR [rip+0x49f9e]        # 89058 <PelY_14b>
   3f0ba:	mov    edx,DWORD PTR [rsp+0x58]
   3f0be:	mov    ecx,r13d
   3f0c1:	mov    rdi,r14
   3f0c4:	movzx  r12d,ax
   3f0c8:	mov    esi,DWORD PTR [rsp+0x38]
   3f0cc:	imul   r12d,DWORD PTR [rsp+0x20]
   3f0d2:	mov    r8d,ebp
   3f0d5:	call   QWORD PTR [rip+0x49f85]        # 89060 <PelY_14>
   3f0db:	mov    edi,DWORD PTR [rip+0x7506f]        # b4150 <luma_log_weight_denom>
   3f0e1:	xor    edx,edx
   3f0e3:	movzx  eax,ax
   3f0e6:	imul   eax,ebx
   3f0e9:	lea    ecx,[rdi+0x1]
   3f0ec:	add    r12d,eax
   3f0ef:	mov    eax,DWORD PTR [rip+0x750bf]        # b41b4 <wp_luma_round>
   3f0f5:	lea    eax,[r12+rax*2]
   3f0f9:	sar    eax,cl
   3f0fb:	mov    ecx,eax
   3f0fd:	add    ecx,DWORD PTR [rsp+0xc]
   3f101:	js     3f1cc <SubPelBlockSearchBiPred+0x182c>
   3f107:	mov    edx,DWORD PTR [rsp+0x54]
   3f10b:	mov    esi,DWORD PTR [rsp+0x34]
   3f10f:	mov    r8d,ebp
   3f112:	mov    ecx,r13d
   3f115:	mov    rdi,r15
   3f118:	call   QWORD PTR [rip+0x49f3a]        # 89058 <PelY_14b>
   3f11e:	mov    edx,DWORD PTR [rsp+0x58]
   3f122:	mov    ecx,r13d
   3f125:	mov    esi,DWORD PTR [rsp+0x38]
   3f129:	movzx  r12d,ax
   3f12d:	imul   r12d,DWORD PTR [rsp+0x20]
   3f133:	mov    r8d,ebp
   3f136:	mov    rdi,r14
   3f139:	call   QWORD PTR [rip+0x49f21]        # 89060 <PelY_14>
   3f13f:	mov    rdx,QWORD PTR [rip+0x4946a]        # 885b0 <img>
   3f146:	mov    ecx,DWORD PTR [rip+0x75004]        # b4150 <luma_log_weight_denom>
   3f14c:	movzx  eax,ax
   3f14f:	imul   eax,ebx
   3f152:	add    ecx,0x1
   3f155:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f15b:	add    r12d,eax
   3f15e:	mov    eax,DWORD PTR [rip+0x75050]        # b41b4 <wp_luma_round>
   3f164:	lea    eax,[r12+rax*2]
   3f168:	sar    eax,cl
   3f16a:	add    eax,DWORD PTR [rsp+0xc]
   3f16e:	cmp    eax,edx
   3f170:	jg     3f1cc <SubPelBlockSearchBiPred+0x182c>
   3f172:	mov    edx,DWORD PTR [rsp+0x54]
   3f176:	mov    esi,DWORD PTR [rsp+0x34]
   3f17a:	mov    r8d,ebp
   3f17d:	mov    ecx,r13d
   3f180:	mov    rdi,r15
   3f183:	call   QWORD PTR [rip+0x49ecf]        # 89058 <PelY_14b>
   3f189:	mov    edx,DWORD PTR [rsp+0x58]
   3f18d:	mov    ecx,r13d
   3f190:	mov    esi,DWORD PTR [rsp+0x38]
   3f194:	movzx  r12d,ax
   3f198:	imul   r12d,DWORD PTR [rsp+0x20]
   3f19e:	mov    r8d,ebp
   3f1a1:	mov    rdi,r14
   3f1a4:	call   QWORD PTR [rip+0x49eb6]        # 89060 <PelY_14>
   3f1aa:	movzx  eax,ax
   3f1ad:	imul   eax,ebx
   3f1b0:	add    r12d,eax
   3f1b3:	mov    eax,DWORD PTR [rip+0x74ffb]        # b41b4 <wp_luma_round>
   3f1b9:	lea    edx,[r12+rax*2]
   3f1bd:	mov    eax,DWORD PTR [rip+0x74f8d]        # b4150 <luma_log_weight_denom>
   3f1c3:	lea    ecx,[rax+0x1]
   3f1c6:	sar    edx,cl
   3f1c8:	add    edx,DWORD PTR [rsp+0xc]
   3f1cc:	mov    rsi,QWORD PTR [rsp+0x10]
   3f1d1:	mov    rax,QWORD PTR [rsp+0x60]
   3f1d6:	mov    r8d,ebp
   3f1d9:	mov    ecx,r13d
   3f1dc:	mov    rdi,r15
   3f1df:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   3f1e4:	mov    esi,DWORD PTR [rsp+0x34]
   3f1e8:	sub    eax,edx
   3f1ea:	mov    edx,DWORD PTR [rsp+0x5c]
   3f1ee:	mov    DWORD PTR [rsp+0x158],eax
   3f1f5:	call   QWORD PTR [rip+0x49e5d]        # 89058 <PelY_14b>
   3f1fb:	mov    edx,DWORD PTR [rsp+0x68]
   3f1ff:	mov    ecx,r13d
   3f202:	mov    rdi,r14
   3f205:	movzx  r12d,ax
   3f209:	mov    esi,DWORD PTR [rsp+0x38]
   3f20d:	imul   r12d,DWORD PTR [rsp+0x20]
   3f213:	mov    r8d,ebp
   3f216:	call   QWORD PTR [rip+0x49e44]        # 89060 <PelY_14>
   3f21c:	mov    edi,DWORD PTR [rip+0x74f2e]        # b4150 <luma_log_weight_denom>
   3f222:	xor    edx,edx
   3f224:	movzx  eax,ax
   3f227:	imul   eax,ebx
   3f22a:	lea    ecx,[rdi+0x1]
   3f22d:	add    r12d,eax
   3f230:	mov    eax,DWORD PTR [rip+0x74f7e]        # b41b4 <wp_luma_round>
   3f236:	lea    eax,[r12+rax*2]
   3f23a:	sar    eax,cl
   3f23c:	mov    ecx,eax
   3f23e:	add    ecx,DWORD PTR [rsp+0xc]
   3f242:	js     3f30d <SubPelBlockSearchBiPred+0x196d>
   3f248:	mov    edx,DWORD PTR [rsp+0x5c]
   3f24c:	mov    esi,DWORD PTR [rsp+0x34]
   3f250:	mov    r8d,ebp
   3f253:	mov    ecx,r13d
   3f256:	mov    rdi,r15
   3f259:	call   QWORD PTR [rip+0x49df9]        # 89058 <PelY_14b>
   3f25f:	mov    edx,DWORD PTR [rsp+0x68]
   3f263:	mov    ecx,r13d
   3f266:	mov    esi,DWORD PTR [rsp+0x38]
   3f26a:	movzx  r12d,ax
   3f26e:	imul   r12d,DWORD PTR [rsp+0x20]
   3f274:	mov    r8d,ebp
   3f277:	mov    rdi,r14
   3f27a:	call   QWORD PTR [rip+0x49de0]        # 89060 <PelY_14>
   3f280:	mov    rdx,QWORD PTR [rip+0x49329]        # 885b0 <img>
   3f287:	mov    ecx,DWORD PTR [rip+0x74ec3]        # b4150 <luma_log_weight_denom>
   3f28d:	movzx  eax,ax
   3f290:	imul   eax,ebx
   3f293:	add    ecx,0x1
   3f296:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f29c:	add    r12d,eax
   3f29f:	mov    eax,DWORD PTR [rip+0x74f0f]        # b41b4 <wp_luma_round>
   3f2a5:	lea    eax,[r12+rax*2]
   3f2a9:	sar    eax,cl
   3f2ab:	add    eax,DWORD PTR [rsp+0xc]
   3f2af:	cmp    eax,edx
   3f2b1:	jg     3f30d <SubPelBlockSearchBiPred+0x196d>
   3f2b3:	mov    edx,DWORD PTR [rsp+0x5c]
   3f2b7:	mov    esi,DWORD PTR [rsp+0x34]
   3f2bb:	mov    r8d,ebp
   3f2be:	mov    ecx,r13d
   3f2c1:	mov    rdi,r15
   3f2c4:	call   QWORD PTR [rip+0x49d8e]        # 89058 <PelY_14b>
   3f2ca:	mov    edx,DWORD PTR [rsp+0x68]
   3f2ce:	mov    ecx,r13d
   3f2d1:	mov    esi,DWORD PTR [rsp+0x38]
   3f2d5:	movzx  r12d,ax
   3f2d9:	imul   r12d,DWORD PTR [rsp+0x20]
   3f2df:	mov    r8d,ebp
   3f2e2:	mov    rdi,r14
   3f2e5:	call   QWORD PTR [rip+0x49d75]        # 89060 <PelY_14>
   3f2eb:	movzx  eax,ax
   3f2ee:	imul   eax,ebx
   3f2f1:	add    r12d,eax
   3f2f4:	mov    eax,DWORD PTR [rip+0x74eba]        # b41b4 <wp_luma_round>
   3f2fa:	lea    edx,[r12+rax*2]
   3f2fe:	mov    eax,DWORD PTR [rip+0x74e4c]        # b4150 <luma_log_weight_denom>
   3f304:	lea    ecx,[rax+0x1]
   3f307:	sar    edx,cl
   3f309:	add    edx,DWORD PTR [rsp+0xc]
   3f30d:	mov    rax,QWORD PTR [rsp+0x60]
   3f312:	mov    rsi,QWORD PTR [rsp+0x10]
   3f317:	mov    r8d,ebp
   3f31a:	mov    ecx,r13d
   3f31d:	mov    rdi,r15
   3f320:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   3f325:	mov    esi,DWORD PTR [rsp+0x3c]
   3f329:	sub    eax,edx
   3f32b:	mov    edx,DWORD PTR [rsp+0x18]
   3f32f:	mov    DWORD PTR [rsp+0x15c],eax
   3f336:	mov    rax,QWORD PTR [rsp+0xa8]
   3f33e:	mov    rax,QWORD PTR [rax]
   3f341:	mov    QWORD PTR [rsp+0x60],rax
   3f346:	call   QWORD PTR [rip+0x49d0c]        # 89058 <PelY_14b>
   3f34c:	mov    edx,DWORD PTR [rsp+0x24]
   3f350:	mov    ecx,r13d
   3f353:	mov    rdi,r14
   3f356:	movzx  r12d,ax
   3f35a:	mov    esi,DWORD PTR [rsp+0x40]
   3f35e:	imul   r12d,DWORD PTR [rsp+0x20]
   3f364:	mov    r8d,ebp
   3f367:	call   QWORD PTR [rip+0x49cf3]        # 89060 <PelY_14>
   3f36d:	mov    edi,DWORD PTR [rip+0x74ddd]        # b4150 <luma_log_weight_denom>
   3f373:	xor    edx,edx
   3f375:	movzx  eax,ax
   3f378:	imul   eax,ebx
   3f37b:	lea    ecx,[rdi+0x1]
   3f37e:	add    r12d,eax
   3f381:	mov    eax,DWORD PTR [rip+0x74e2d]        # b41b4 <wp_luma_round>
   3f387:	lea    eax,[r12+rax*2]
   3f38b:	sar    eax,cl
   3f38d:	mov    ecx,eax
   3f38f:	add    ecx,DWORD PTR [rsp+0xc]
   3f393:	js     3f45e <SubPelBlockSearchBiPred+0x1abe>
   3f399:	mov    edx,DWORD PTR [rsp+0x18]
   3f39d:	mov    esi,DWORD PTR [rsp+0x3c]
   3f3a1:	mov    r8d,ebp
   3f3a4:	mov    ecx,r13d
   3f3a7:	mov    rdi,r15
   3f3aa:	call   QWORD PTR [rip+0x49ca8]        # 89058 <PelY_14b>
   3f3b0:	mov    edx,DWORD PTR [rsp+0x24]
   3f3b4:	mov    ecx,r13d
   3f3b7:	mov    esi,DWORD PTR [rsp+0x40]
   3f3bb:	movzx  r12d,ax
   3f3bf:	imul   r12d,DWORD PTR [rsp+0x20]
   3f3c5:	mov    r8d,ebp
   3f3c8:	mov    rdi,r14
   3f3cb:	call   QWORD PTR [rip+0x49c8f]        # 89060 <PelY_14>
   3f3d1:	mov    rdx,QWORD PTR [rip+0x491d8]        # 885b0 <img>
   3f3d8:	mov    ecx,DWORD PTR [rip+0x74d72]        # b4150 <luma_log_weight_denom>
   3f3de:	movzx  eax,ax
   3f3e1:	imul   eax,ebx
   3f3e4:	add    ecx,0x1
   3f3e7:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f3ed:	add    r12d,eax
   3f3f0:	mov    eax,DWORD PTR [rip+0x74dbe]        # b41b4 <wp_luma_round>
   3f3f6:	lea    eax,[r12+rax*2]
   3f3fa:	sar    eax,cl
   3f3fc:	add    eax,DWORD PTR [rsp+0xc]
   3f400:	cmp    eax,edx
   3f402:	jg     3f45e <SubPelBlockSearchBiPred+0x1abe>
   3f404:	mov    edx,DWORD PTR [rsp+0x18]
   3f408:	mov    esi,DWORD PTR [rsp+0x3c]
   3f40c:	mov    r8d,ebp
   3f40f:	mov    ecx,r13d
   3f412:	mov    rdi,r15
   3f415:	call   QWORD PTR [rip+0x49c3d]        # 89058 <PelY_14b>
   3f41b:	mov    edx,DWORD PTR [rsp+0x24]
   3f41f:	mov    ecx,r13d
   3f422:	mov    esi,DWORD PTR [rsp+0x40]
   3f426:	movzx  r12d,ax
   3f42a:	imul   r12d,DWORD PTR [rsp+0x20]
   3f430:	mov    r8d,ebp
   3f433:	mov    rdi,r14
   3f436:	call   QWORD PTR [rip+0x49c24]        # 89060 <PelY_14>
   3f43c:	movzx  eax,ax
   3f43f:	imul   eax,ebx
   3f442:	add    r12d,eax
   3f445:	mov    eax,DWORD PTR [rip+0x74d69]        # b41b4 <wp_luma_round>
   3f44b:	lea    edx,[r12+rax*2]
   3f44f:	mov    eax,DWORD PTR [rip+0x74cfb]        # b4150 <luma_log_weight_denom>
   3f455:	lea    ecx,[rax+0x1]
   3f458:	sar    edx,cl
   3f45a:	add    edx,DWORD PTR [rsp+0xc]
   3f45e:	mov    rsi,QWORD PTR [rsp+0x70]
   3f463:	mov    rax,QWORD PTR [rsp+0x60]
   3f468:	mov    r8d,ebp
   3f46b:	mov    ecx,r13d
   3f46e:	mov    rdi,r15
   3f471:	movzx  eax,WORD PTR [rax+rsi*2]
   3f475:	mov    esi,DWORD PTR [rsp+0x3c]
   3f479:	sub    eax,edx
   3f47b:	mov    edx,DWORD PTR [rsp+0x4c]
   3f47f:	mov    DWORD PTR [rsp+0x160],eax
   3f486:	call   QWORD PTR [rip+0x49bcc]        # 89058 <PelY_14b>
   3f48c:	mov    edx,DWORD PTR [rsp+0x50]
   3f490:	mov    ecx,r13d
   3f493:	mov    rdi,r14
   3f496:	movzx  r12d,ax
   3f49a:	mov    esi,DWORD PTR [rsp+0x40]
   3f49e:	imul   r12d,DWORD PTR [rsp+0x20]
   3f4a4:	mov    r8d,ebp
   3f4a7:	call   QWORD PTR [rip+0x49bb3]        # 89060 <PelY_14>
   3f4ad:	mov    edi,DWORD PTR [rip+0x74c9d]        # b4150 <luma_log_weight_denom>
   3f4b3:	xor    edx,edx
   3f4b5:	movzx  eax,ax
   3f4b8:	imul   eax,ebx
   3f4bb:	lea    ecx,[rdi+0x1]
   3f4be:	add    r12d,eax
   3f4c1:	mov    eax,DWORD PTR [rip+0x74ced]        # b41b4 <wp_luma_round>
   3f4c7:	lea    eax,[r12+rax*2]
   3f4cb:	sar    eax,cl
   3f4cd:	mov    ecx,eax
   3f4cf:	add    ecx,DWORD PTR [rsp+0xc]
   3f4d3:	js     3f59e <SubPelBlockSearchBiPred+0x1bfe>
   3f4d9:	mov    edx,DWORD PTR [rsp+0x4c]
   3f4dd:	mov    esi,DWORD PTR [rsp+0x3c]
   3f4e1:	mov    r8d,ebp
   3f4e4:	mov    ecx,r13d
   3f4e7:	mov    rdi,r15
   3f4ea:	call   QWORD PTR [rip+0x49b68]        # 89058 <PelY_14b>
   3f4f0:	mov    edx,DWORD PTR [rsp+0x50]
   3f4f4:	mov    ecx,r13d
   3f4f7:	mov    esi,DWORD PTR [rsp+0x40]
   3f4fb:	movzx  r12d,ax
   3f4ff:	imul   r12d,DWORD PTR [rsp+0x20]
   3f505:	mov    r8d,ebp
   3f508:	mov    rdi,r14
   3f50b:	call   QWORD PTR [rip+0x49b4f]        # 89060 <PelY_14>
   3f511:	mov    rdx,QWORD PTR [rip+0x49098]        # 885b0 <img>
   3f518:	mov    ecx,DWORD PTR [rip+0x74c32]        # b4150 <luma_log_weight_denom>
   3f51e:	movzx  eax,ax
   3f521:	imul   eax,ebx
   3f524:	add    ecx,0x1
   3f527:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f52d:	add    r12d,eax
   3f530:	mov    eax,DWORD PTR [rip+0x74c7e]        # b41b4 <wp_luma_round>
   3f536:	lea    eax,[r12+rax*2]
   3f53a:	sar    eax,cl
   3f53c:	add    eax,DWORD PTR [rsp+0xc]
   3f540:	cmp    eax,edx
   3f542:	jg     3f59e <SubPelBlockSearchBiPred+0x1bfe>
   3f544:	mov    edx,DWORD PTR [rsp+0x4c]
   3f548:	mov    esi,DWORD PTR [rsp+0x3c]
   3f54c:	mov    r8d,ebp
   3f54f:	mov    ecx,r13d
   3f552:	mov    rdi,r15
   3f555:	call   QWORD PTR [rip+0x49afd]        # 89058 <PelY_14b>
   3f55b:	mov    edx,DWORD PTR [rsp+0x50]
   3f55f:	mov    ecx,r13d
   3f562:	mov    esi,DWORD PTR [rsp+0x40]
   3f566:	movzx  r12d,ax
   3f56a:	imul   r12d,DWORD PTR [rsp+0x20]
   3f570:	mov    r8d,ebp
   3f573:	mov    rdi,r14
   3f576:	call   QWORD PTR [rip+0x49ae4]        # 89060 <PelY_14>
   3f57c:	movzx  eax,ax
   3f57f:	imul   eax,ebx
   3f582:	add    r12d,eax
   3f585:	mov    eax,DWORD PTR [rip+0x74c29]        # b41b4 <wp_luma_round>
   3f58b:	lea    edx,[r12+rax*2]
   3f58f:	mov    eax,DWORD PTR [rip+0x74bbb]        # b4150 <luma_log_weight_denom>
   3f595:	lea    ecx,[rax+0x1]
   3f598:	sar    edx,cl
   3f59a:	add    edx,DWORD PTR [rsp+0xc]
   3f59e:	mov    rsi,QWORD PTR [rsp+0x10]
   3f5a3:	mov    rax,QWORD PTR [rsp+0x60]
   3f5a8:	mov    r8d,ebp
   3f5ab:	mov    ecx,r13d
   3f5ae:	mov    rdi,r15
   3f5b1:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   3f5b6:	mov    esi,DWORD PTR [rsp+0x3c]
   3f5ba:	sub    eax,edx
   3f5bc:	mov    edx,DWORD PTR [rsp+0x54]
   3f5c0:	mov    DWORD PTR [rsp+0x164],eax
   3f5c7:	call   QWORD PTR [rip+0x49a8b]        # 89058 <PelY_14b>
   3f5cd:	mov    edx,DWORD PTR [rsp+0x58]
   3f5d1:	mov    ecx,r13d
   3f5d4:	mov    rdi,r14
   3f5d7:	movzx  r12d,ax
   3f5db:	mov    esi,DWORD PTR [rsp+0x40]
   3f5df:	imul   r12d,DWORD PTR [rsp+0x20]
   3f5e5:	mov    r8d,ebp
   3f5e8:	call   QWORD PTR [rip+0x49a72]        # 89060 <PelY_14>
   3f5ee:	mov    edi,DWORD PTR [rip+0x74b5c]        # b4150 <luma_log_weight_denom>
   3f5f4:	xor    edx,edx
   3f5f6:	movzx  eax,ax
   3f5f9:	imul   eax,ebx
   3f5fc:	lea    ecx,[rdi+0x1]
   3f5ff:	add    r12d,eax
   3f602:	mov    eax,DWORD PTR [rip+0x74bac]        # b41b4 <wp_luma_round>
   3f608:	lea    eax,[r12+rax*2]
   3f60c:	sar    eax,cl
   3f60e:	mov    ecx,eax
   3f610:	add    ecx,DWORD PTR [rsp+0xc]
   3f614:	js     3f6df <SubPelBlockSearchBiPred+0x1d3f>
   3f61a:	mov    edx,DWORD PTR [rsp+0x54]
   3f61e:	mov    esi,DWORD PTR [rsp+0x3c]
   3f622:	mov    r8d,ebp
   3f625:	mov    ecx,r13d
   3f628:	mov    rdi,r15
   3f62b:	call   QWORD PTR [rip+0x49a27]        # 89058 <PelY_14b>
   3f631:	mov    edx,DWORD PTR [rsp+0x58]
   3f635:	mov    ecx,r13d
   3f638:	mov    esi,DWORD PTR [rsp+0x40]
   3f63c:	movzx  r12d,ax
   3f640:	imul   r12d,DWORD PTR [rsp+0x20]
   3f646:	mov    r8d,ebp
   3f649:	mov    rdi,r14
   3f64c:	call   QWORD PTR [rip+0x49a0e]        # 89060 <PelY_14>
   3f652:	mov    rdx,QWORD PTR [rip+0x48f57]        # 885b0 <img>
   3f659:	mov    ecx,DWORD PTR [rip+0x74af1]        # b4150 <luma_log_weight_denom>
   3f65f:	movzx  eax,ax
   3f662:	imul   eax,ebx
   3f665:	add    ecx,0x1
   3f668:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f66e:	add    r12d,eax
   3f671:	mov    eax,DWORD PTR [rip+0x74b3d]        # b41b4 <wp_luma_round>
   3f677:	lea    eax,[r12+rax*2]
   3f67b:	sar    eax,cl
   3f67d:	add    eax,DWORD PTR [rsp+0xc]
   3f681:	cmp    eax,edx
   3f683:	jg     3f6df <SubPelBlockSearchBiPred+0x1d3f>
   3f685:	mov    edx,DWORD PTR [rsp+0x54]
   3f689:	mov    esi,DWORD PTR [rsp+0x3c]
   3f68d:	mov    r8d,ebp
   3f690:	mov    ecx,r13d
   3f693:	mov    rdi,r15
   3f696:	call   QWORD PTR [rip+0x499bc]        # 89058 <PelY_14b>
   3f69c:	mov    edx,DWORD PTR [rsp+0x58]
   3f6a0:	mov    ecx,r13d
   3f6a3:	mov    esi,DWORD PTR [rsp+0x40]
   3f6a7:	movzx  r12d,ax
   3f6ab:	imul   r12d,DWORD PTR [rsp+0x20]
   3f6b1:	mov    r8d,ebp
   3f6b4:	mov    rdi,r14
   3f6b7:	call   QWORD PTR [rip+0x499a3]        # 89060 <PelY_14>
   3f6bd:	movzx  eax,ax
   3f6c0:	imul   eax,ebx
   3f6c3:	add    r12d,eax
   3f6c6:	mov    eax,DWORD PTR [rip+0x74ae8]        # b41b4 <wp_luma_round>
   3f6cc:	lea    edx,[r12+rax*2]
   3f6d0:	mov    eax,DWORD PTR [rip+0x74a7a]        # b4150 <luma_log_weight_denom>
   3f6d6:	lea    ecx,[rax+0x1]
   3f6d9:	sar    edx,cl
   3f6db:	add    edx,DWORD PTR [rsp+0xc]
   3f6df:	mov    rsi,QWORD PTR [rsp+0x10]
   3f6e4:	mov    rax,QWORD PTR [rsp+0x60]
   3f6e9:	mov    r8d,ebp
   3f6ec:	mov    ecx,r13d
   3f6ef:	mov    rdi,r15
   3f6f2:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   3f6f7:	mov    esi,DWORD PTR [rsp+0x3c]
   3f6fb:	sub    eax,edx
   3f6fd:	mov    edx,DWORD PTR [rsp+0x5c]
   3f701:	mov    DWORD PTR [rsp+0x168],eax
   3f708:	call   QWORD PTR [rip+0x4994a]        # 89058 <PelY_14b>
   3f70e:	mov    edx,DWORD PTR [rsp+0x68]
   3f712:	mov    ecx,r13d
   3f715:	mov    rdi,r14
   3f718:	movzx  r12d,ax
   3f71c:	mov    esi,DWORD PTR [rsp+0x40]
   3f720:	imul   r12d,DWORD PTR [rsp+0x20]
   3f726:	mov    r8d,ebp
   3f729:	call   QWORD PTR [rip+0x49931]        # 89060 <PelY_14>
   3f72f:	mov    edi,DWORD PTR [rip+0x74a1b]        # b4150 <luma_log_weight_denom>
   3f735:	xor    edx,edx
   3f737:	movzx  eax,ax
   3f73a:	imul   eax,ebx
   3f73d:	lea    ecx,[rdi+0x1]
   3f740:	add    r12d,eax
   3f743:	mov    eax,DWORD PTR [rip+0x74a6b]        # b41b4 <wp_luma_round>
   3f749:	lea    eax,[r12+rax*2]
   3f74d:	sar    eax,cl
   3f74f:	mov    ecx,eax
   3f751:	add    ecx,DWORD PTR [rsp+0xc]
   3f755:	js     3f820 <SubPelBlockSearchBiPred+0x1e80>
   3f75b:	mov    edx,DWORD PTR [rsp+0x5c]
   3f75f:	mov    esi,DWORD PTR [rsp+0x3c]
   3f763:	mov    r8d,ebp
   3f766:	mov    ecx,r13d
   3f769:	mov    rdi,r15
   3f76c:	call   QWORD PTR [rip+0x498e6]        # 89058 <PelY_14b>
   3f772:	mov    edx,DWORD PTR [rsp+0x68]
   3f776:	mov    ecx,r13d
   3f779:	mov    esi,DWORD PTR [rsp+0x40]
   3f77d:	movzx  r12d,ax
   3f781:	imul   r12d,DWORD PTR [rsp+0x20]
   3f787:	mov    r8d,ebp
   3f78a:	mov    rdi,r14
   3f78d:	call   QWORD PTR [rip+0x498cd]        # 89060 <PelY_14>
   3f793:	mov    rdx,QWORD PTR [rip+0x48e16]        # 885b0 <img>
   3f79a:	mov    ecx,DWORD PTR [rip+0x749b0]        # b4150 <luma_log_weight_denom>
   3f7a0:	movzx  eax,ax
   3f7a3:	imul   eax,ebx
   3f7a6:	add    ecx,0x1
   3f7a9:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f7af:	add    r12d,eax
   3f7b2:	mov    eax,DWORD PTR [rip+0x749fc]        # b41b4 <wp_luma_round>
   3f7b8:	lea    eax,[r12+rax*2]
   3f7bc:	sar    eax,cl
   3f7be:	add    eax,DWORD PTR [rsp+0xc]
   3f7c2:	cmp    eax,edx
   3f7c4:	jg     3f820 <SubPelBlockSearchBiPred+0x1e80>
   3f7c6:	mov    edx,DWORD PTR [rsp+0x5c]
   3f7ca:	mov    esi,DWORD PTR [rsp+0x3c]
   3f7ce:	mov    r8d,ebp
   3f7d1:	mov    ecx,r13d
   3f7d4:	mov    rdi,r15
   3f7d7:	call   QWORD PTR [rip+0x4987b]        # 89058 <PelY_14b>
   3f7dd:	mov    edx,DWORD PTR [rsp+0x68]
   3f7e1:	mov    ecx,r13d
   3f7e4:	mov    esi,DWORD PTR [rsp+0x40]
   3f7e8:	movzx  r12d,ax
   3f7ec:	imul   r12d,DWORD PTR [rsp+0x20]
   3f7f2:	mov    r8d,ebp
   3f7f5:	mov    rdi,r14
   3f7f8:	call   QWORD PTR [rip+0x49862]        # 89060 <PelY_14>
   3f7fe:	movzx  eax,ax
   3f801:	imul   eax,ebx
   3f804:	add    r12d,eax
   3f807:	mov    eax,DWORD PTR [rip+0x749a7]        # b41b4 <wp_luma_round>
   3f80d:	lea    edx,[r12+rax*2]
   3f811:	mov    eax,DWORD PTR [rip+0x74939]        # b4150 <luma_log_weight_denom>
   3f817:	lea    ecx,[rax+0x1]
   3f81a:	sar    edx,cl
   3f81c:	add    edx,DWORD PTR [rsp+0xc]
   3f820:	mov    rax,QWORD PTR [rsp+0x60]
   3f825:	mov    rsi,QWORD PTR [rsp+0x10]
   3f82a:	mov    r8d,ebp
   3f82d:	mov    ecx,r13d
   3f830:	mov    rdi,r15
   3f833:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   3f838:	mov    esi,DWORD PTR [rsp+0x44]
   3f83c:	sub    eax,edx
   3f83e:	mov    edx,DWORD PTR [rsp+0x18]
   3f842:	mov    DWORD PTR [rsp+0x16c],eax
   3f849:	mov    rax,QWORD PTR [rsp+0xb0]
   3f851:	mov    rax,QWORD PTR [rax]
   3f854:	mov    QWORD PTR [rsp+0x60],rax
   3f859:	call   QWORD PTR [rip+0x497f9]        # 89058 <PelY_14b>
   3f85f:	mov    edx,DWORD PTR [rsp+0x24]
   3f863:	mov    ecx,r13d
   3f866:	mov    rdi,r14
   3f869:	movzx  r12d,ax
   3f86d:	mov    esi,DWORD PTR [rsp+0x48]
   3f871:	imul   r12d,DWORD PTR [rsp+0x20]
   3f877:	mov    r8d,ebp
   3f87a:	call   QWORD PTR [rip+0x497e0]        # 89060 <PelY_14>
   3f880:	mov    edi,DWORD PTR [rip+0x748ca]        # b4150 <luma_log_weight_denom>
   3f886:	xor    edx,edx
   3f888:	movzx  eax,ax
   3f88b:	imul   eax,ebx
   3f88e:	lea    ecx,[rdi+0x1]
   3f891:	add    r12d,eax
   3f894:	mov    eax,DWORD PTR [rip+0x7491a]        # b41b4 <wp_luma_round>
   3f89a:	lea    eax,[r12+rax*2]
   3f89e:	sar    eax,cl
   3f8a0:	mov    ecx,eax
   3f8a2:	add    ecx,DWORD PTR [rsp+0xc]
   3f8a6:	js     3f971 <SubPelBlockSearchBiPred+0x1fd1>
   3f8ac:	mov    edx,DWORD PTR [rsp+0x18]
   3f8b0:	mov    esi,DWORD PTR [rsp+0x44]
   3f8b4:	mov    r8d,ebp
   3f8b7:	mov    ecx,r13d
   3f8ba:	mov    rdi,r15
   3f8bd:	call   QWORD PTR [rip+0x49795]        # 89058 <PelY_14b>
   3f8c3:	mov    edx,DWORD PTR [rsp+0x24]
   3f8c7:	mov    ecx,r13d
   3f8ca:	mov    esi,DWORD PTR [rsp+0x48]
   3f8ce:	movzx  r12d,ax
   3f8d2:	imul   r12d,DWORD PTR [rsp+0x20]
   3f8d8:	mov    r8d,ebp
   3f8db:	mov    rdi,r14
   3f8de:	call   QWORD PTR [rip+0x4977c]        # 89060 <PelY_14>
   3f8e4:	mov    rdx,QWORD PTR [rip+0x48cc5]        # 885b0 <img>
   3f8eb:	mov    ecx,DWORD PTR [rip+0x7485f]        # b4150 <luma_log_weight_denom>
   3f8f1:	movzx  eax,ax
   3f8f4:	imul   eax,ebx
   3f8f7:	add    ecx,0x1
   3f8fa:	mov    edx,DWORD PTR [rdx+0x11bec]
   3f900:	add    r12d,eax
   3f903:	mov    eax,DWORD PTR [rip+0x748ab]        # b41b4 <wp_luma_round>
   3f909:	lea    eax,[r12+rax*2]
   3f90d:	sar    eax,cl
   3f90f:	add    eax,DWORD PTR [rsp+0xc]
   3f913:	cmp    eax,edx
   3f915:	jg     3f971 <SubPelBlockSearchBiPred+0x1fd1>
   3f917:	mov    edx,DWORD PTR [rsp+0x18]
   3f91b:	mov    esi,DWORD PTR [rsp+0x44]
   3f91f:	mov    r8d,ebp
   3f922:	mov    ecx,r13d
   3f925:	mov    rdi,r15
   3f928:	call   QWORD PTR [rip+0x4972a]        # 89058 <PelY_14b>
   3f92e:	mov    edx,DWORD PTR [rsp+0x24]
   3f932:	mov    ecx,r13d
   3f935:	mov    esi,DWORD PTR [rsp+0x48]
   3f939:	movzx  r12d,ax
   3f93d:	imul   r12d,DWORD PTR [rsp+0x20]
   3f943:	mov    r8d,ebp
   3f946:	mov    rdi,r14
   3f949:	call   QWORD PTR [rip+0x49711]        # 89060 <PelY_14>
   3f94f:	movzx  eax,ax
   3f952:	imul   eax,ebx
   3f955:	add    r12d,eax
   3f958:	mov    eax,DWORD PTR [rip+0x74856]        # b41b4 <wp_luma_round>
   3f95e:	lea    edx,[r12+rax*2]
   3f962:	mov    eax,DWORD PTR [rip+0x747e8]        # b4150 <luma_log_weight_denom>
   3f968:	lea    ecx,[rax+0x1]
   3f96b:	sar    edx,cl
   3f96d:	add    edx,DWORD PTR [rsp+0xc]
   3f971:	mov    rsi,QWORD PTR [rsp+0x70]
   3f976:	mov    rax,QWORD PTR [rsp+0x60]
   3f97b:	mov    r8d,ebp
   3f97e:	mov    ecx,r13d
   3f981:	mov    rdi,r15
   3f984:	movzx  eax,WORD PTR [rax+rsi*2]
   3f988:	mov    esi,DWORD PTR [rsp+0x44]
   3f98c:	sub    eax,edx
   3f98e:	mov    edx,DWORD PTR [rsp+0x4c]
   3f992:	mov    DWORD PTR [rsp+0x170],eax
   3f999:	call   QWORD PTR [rip+0x496b9]        # 89058 <PelY_14b>
   3f99f:	mov    edx,DWORD PTR [rsp+0x50]
   3f9a3:	mov    ecx,r13d
   3f9a6:	mov    rdi,r14
   3f9a9:	movzx  r12d,ax
   3f9ad:	mov    esi,DWORD PTR [rsp+0x48]
   3f9b1:	imul   r12d,DWORD PTR [rsp+0x20]
   3f9b7:	mov    r8d,ebp
   3f9ba:	call   QWORD PTR [rip+0x496a0]        # 89060 <PelY_14>
   3f9c0:	mov    edi,DWORD PTR [rip+0x7478a]        # b4150 <luma_log_weight_denom>
   3f9c6:	xor    edx,edx
   3f9c8:	movzx  eax,ax
   3f9cb:	imul   eax,ebx
   3f9ce:	lea    ecx,[rdi+0x1]
   3f9d1:	add    r12d,eax
   3f9d4:	mov    eax,DWORD PTR [rip+0x747da]        # b41b4 <wp_luma_round>
   3f9da:	lea    eax,[r12+rax*2]
   3f9de:	sar    eax,cl
   3f9e0:	mov    ecx,eax
   3f9e2:	add    ecx,DWORD PTR [rsp+0xc]
   3f9e6:	js     3fab1 <SubPelBlockSearchBiPred+0x2111>
   3f9ec:	mov    edx,DWORD PTR [rsp+0x4c]
   3f9f0:	mov    esi,DWORD PTR [rsp+0x44]
   3f9f4:	mov    r8d,ebp
   3f9f7:	mov    ecx,r13d
   3f9fa:	mov    rdi,r15
   3f9fd:	call   QWORD PTR [rip+0x49655]        # 89058 <PelY_14b>
   3fa03:	mov    edx,DWORD PTR [rsp+0x50]
   3fa07:	mov    ecx,r13d
   3fa0a:	mov    esi,DWORD PTR [rsp+0x48]
   3fa0e:	movzx  r12d,ax
   3fa12:	imul   r12d,DWORD PTR [rsp+0x20]
   3fa18:	mov    r8d,ebp
   3fa1b:	mov    rdi,r14
   3fa1e:	call   QWORD PTR [rip+0x4963c]        # 89060 <PelY_14>
   3fa24:	mov    rdx,QWORD PTR [rip+0x48b85]        # 885b0 <img>
   3fa2b:	mov    ecx,DWORD PTR [rip+0x7471f]        # b4150 <luma_log_weight_denom>
   3fa31:	movzx  eax,ax
   3fa34:	imul   eax,ebx
   3fa37:	add    ecx,0x1
   3fa3a:	mov    edx,DWORD PTR [rdx+0x11bec]
   3fa40:	add    r12d,eax
   3fa43:	mov    eax,DWORD PTR [rip+0x7476b]        # b41b4 <wp_luma_round>
   3fa49:	lea    eax,[r12+rax*2]
   3fa4d:	sar    eax,cl
   3fa4f:	add    eax,DWORD PTR [rsp+0xc]
   3fa53:	cmp    eax,edx
   3fa55:	jg     3fab1 <SubPelBlockSearchBiPred+0x2111>
   3fa57:	mov    edx,DWORD PTR [rsp+0x4c]
   3fa5b:	mov    esi,DWORD PTR [rsp+0x44]
   3fa5f:	mov    r8d,ebp
   3fa62:	mov    ecx,r13d
   3fa65:	mov    rdi,r15
   3fa68:	call   QWORD PTR [rip+0x495ea]        # 89058 <PelY_14b>
   3fa6e:	mov    edx,DWORD PTR [rsp+0x50]
   3fa72:	mov    ecx,r13d
   3fa75:	mov    esi,DWORD PTR [rsp+0x48]
   3fa79:	movzx  r12d,ax
   3fa7d:	imul   r12d,DWORD PTR [rsp+0x20]
   3fa83:	mov    r8d,ebp
   3fa86:	mov    rdi,r14
   3fa89:	call   QWORD PTR [rip+0x495d1]        # 89060 <PelY_14>
   3fa8f:	movzx  eax,ax
   3fa92:	imul   eax,ebx
   3fa95:	add    r12d,eax
   3fa98:	mov    eax,DWORD PTR [rip+0x74716]        # b41b4 <wp_luma_round>
   3fa9e:	lea    edx,[r12+rax*2]
   3faa2:	mov    eax,DWORD PTR [rip+0x746a8]        # b4150 <luma_log_weight_denom>
   3faa8:	lea    ecx,[rax+0x1]
   3faab:	sar    edx,cl
   3faad:	add    edx,DWORD PTR [rsp+0xc]
   3fab1:	mov    rsi,QWORD PTR [rsp+0x10]
   3fab6:	mov    rax,QWORD PTR [rsp+0x60]
   3fabb:	mov    r8d,ebp
   3fabe:	mov    ecx,r13d
   3fac1:	mov    rdi,r15
   3fac4:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   3fac9:	mov    esi,DWORD PTR [rsp+0x44]
   3facd:	sub    eax,edx
   3facf:	mov    edx,DWORD PTR [rsp+0x54]
   3fad3:	mov    DWORD PTR [rsp+0x174],eax
   3fada:	call   QWORD PTR [rip+0x49578]        # 89058 <PelY_14b>
   3fae0:	mov    edx,DWORD PTR [rsp+0x58]
   3fae4:	mov    ecx,r13d
   3fae7:	mov    rdi,r14
   3faea:	movzx  r12d,ax
   3faee:	mov    esi,DWORD PTR [rsp+0x48]
   3faf2:	imul   r12d,DWORD PTR [rsp+0x20]
   3faf8:	mov    r8d,ebp
   3fafb:	call   QWORD PTR [rip+0x4955f]        # 89060 <PelY_14>
   3fb01:	mov    edi,DWORD PTR [rip+0x74649]        # b4150 <luma_log_weight_denom>
   3fb07:	xor    edx,edx
   3fb09:	movzx  eax,ax
   3fb0c:	imul   eax,ebx
   3fb0f:	lea    ecx,[rdi+0x1]
   3fb12:	add    r12d,eax
   3fb15:	mov    eax,DWORD PTR [rip+0x74699]        # b41b4 <wp_luma_round>
   3fb1b:	lea    eax,[r12+rax*2]
   3fb1f:	sar    eax,cl
   3fb21:	mov    ecx,eax
   3fb23:	add    ecx,DWORD PTR [rsp+0xc]
   3fb27:	js     3fbf2 <SubPelBlockSearchBiPred+0x2252>
   3fb2d:	mov    edx,DWORD PTR [rsp+0x54]
   3fb31:	mov    esi,DWORD PTR [rsp+0x44]
   3fb35:	mov    r8d,ebp
   3fb38:	mov    ecx,r13d
   3fb3b:	mov    rdi,r15
   3fb3e:	call   QWORD PTR [rip+0x49514]        # 89058 <PelY_14b>
   3fb44:	mov    edx,DWORD PTR [rsp+0x58]
   3fb48:	mov    ecx,r13d
   3fb4b:	mov    esi,DWORD PTR [rsp+0x48]
   3fb4f:	movzx  r12d,ax
   3fb53:	imul   r12d,DWORD PTR [rsp+0x20]
   3fb59:	mov    r8d,ebp
   3fb5c:	mov    rdi,r14
   3fb5f:	call   QWORD PTR [rip+0x494fb]        # 89060 <PelY_14>
   3fb65:	mov    rdx,QWORD PTR [rip+0x48a44]        # 885b0 <img>
   3fb6c:	mov    ecx,DWORD PTR [rip+0x745de]        # b4150 <luma_log_weight_denom>
   3fb72:	movzx  eax,ax
   3fb75:	imul   eax,ebx
   3fb78:	add    ecx,0x1
   3fb7b:	mov    edx,DWORD PTR [rdx+0x11bec]
   3fb81:	add    r12d,eax
   3fb84:	mov    eax,DWORD PTR [rip+0x7462a]        # b41b4 <wp_luma_round>
   3fb8a:	lea    eax,[r12+rax*2]
   3fb8e:	sar    eax,cl
   3fb90:	add    eax,DWORD PTR [rsp+0xc]
   3fb94:	cmp    eax,edx
   3fb96:	jg     3fbf2 <SubPelBlockSearchBiPred+0x2252>
   3fb98:	mov    edx,DWORD PTR [rsp+0x54]
   3fb9c:	mov    esi,DWORD PTR [rsp+0x44]
   3fba0:	mov    r8d,ebp
   3fba3:	mov    ecx,r13d
   3fba6:	mov    rdi,r15
   3fba9:	call   QWORD PTR [rip+0x494a9]        # 89058 <PelY_14b>
   3fbaf:	mov    edx,DWORD PTR [rsp+0x58]
   3fbb3:	mov    ecx,r13d
   3fbb6:	mov    esi,DWORD PTR [rsp+0x48]
   3fbba:	movzx  r12d,ax
   3fbbe:	imul   r12d,DWORD PTR [rsp+0x20]
   3fbc4:	mov    r8d,ebp
   3fbc7:	mov    rdi,r14
   3fbca:	call   QWORD PTR [rip+0x49490]        # 89060 <PelY_14>
   3fbd0:	movzx  eax,ax
   3fbd3:	imul   eax,ebx
   3fbd6:	add    r12d,eax
   3fbd9:	mov    eax,DWORD PTR [rip+0x745d5]        # b41b4 <wp_luma_round>
   3fbdf:	lea    edx,[r12+rax*2]
   3fbe3:	mov    eax,DWORD PTR [rip+0x74567]        # b4150 <luma_log_weight_denom>
   3fbe9:	lea    ecx,[rax+0x1]
   3fbec:	sar    edx,cl
   3fbee:	add    edx,DWORD PTR [rsp+0xc]
   3fbf2:	mov    rsi,QWORD PTR [rsp+0x10]
   3fbf7:	mov    rax,QWORD PTR [rsp+0x60]
   3fbfc:	mov    r8d,ebp
   3fbff:	mov    ecx,r13d
   3fc02:	mov    rdi,r15
   3fc05:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   3fc0a:	mov    esi,DWORD PTR [rsp+0x44]
   3fc0e:	sub    eax,edx
   3fc10:	mov    edx,DWORD PTR [rsp+0x5c]
   3fc14:	mov    DWORD PTR [rsp+0x178],eax
   3fc1b:	call   QWORD PTR [rip+0x49437]        # 89058 <PelY_14b>
   3fc21:	mov    edx,DWORD PTR [rsp+0x68]
   3fc25:	mov    ecx,r13d
   3fc28:	mov    rdi,r14
   3fc2b:	movzx  r12d,ax
   3fc2f:	mov    esi,DWORD PTR [rsp+0x48]
   3fc33:	imul   r12d,DWORD PTR [rsp+0x20]
   3fc39:	mov    r8d,ebp
   3fc3c:	call   QWORD PTR [rip+0x4941e]        # 89060 <PelY_14>
   3fc42:	mov    edi,DWORD PTR [rip+0x74508]        # b4150 <luma_log_weight_denom>
   3fc48:	xor    edx,edx
   3fc4a:	movzx  eax,ax
   3fc4d:	imul   eax,ebx
   3fc50:	lea    ecx,[rdi+0x1]
   3fc53:	add    r12d,eax
   3fc56:	mov    eax,DWORD PTR [rip+0x74558]        # b41b4 <wp_luma_round>
   3fc5c:	lea    eax,[r12+rax*2]
   3fc60:	sar    eax,cl
   3fc62:	mov    ecx,eax
   3fc64:	add    ecx,DWORD PTR [rsp+0xc]
   3fc68:	js     3fd33 <SubPelBlockSearchBiPred+0x2393>
   3fc6e:	mov    edx,DWORD PTR [rsp+0x5c]
   3fc72:	mov    esi,DWORD PTR [rsp+0x44]
   3fc76:	mov    r8d,ebp
   3fc79:	mov    ecx,r13d
   3fc7c:	mov    rdi,r15
   3fc7f:	call   QWORD PTR [rip+0x493d3]        # 89058 <PelY_14b>
   3fc85:	mov    edx,DWORD PTR [rsp+0x68]
   3fc89:	mov    ecx,r13d
   3fc8c:	mov    esi,DWORD PTR [rsp+0x48]
   3fc90:	movzx  r12d,ax
   3fc94:	imul   r12d,DWORD PTR [rsp+0x20]
   3fc9a:	mov    r8d,ebp
   3fc9d:	mov    rdi,r14
   3fca0:	call   QWORD PTR [rip+0x493ba]        # 89060 <PelY_14>
   3fca6:	mov    rdx,QWORD PTR [rip+0x48903]        # 885b0 <img>
   3fcad:	mov    ecx,DWORD PTR [rip+0x7449d]        # b4150 <luma_log_weight_denom>
   3fcb3:	movzx  eax,ax
   3fcb6:	imul   eax,ebx
   3fcb9:	add    ecx,0x1
   3fcbc:	mov    edx,DWORD PTR [rdx+0x11bec]
   3fcc2:	add    r12d,eax
   3fcc5:	mov    eax,DWORD PTR [rip+0x744e9]        # b41b4 <wp_luma_round>
   3fccb:	lea    eax,[r12+rax*2]
   3fccf:	sar    eax,cl
   3fcd1:	add    eax,DWORD PTR [rsp+0xc]
   3fcd5:	cmp    eax,edx
   3fcd7:	jg     3fd33 <SubPelBlockSearchBiPred+0x2393>
   3fcd9:	mov    edx,DWORD PTR [rsp+0x5c]
   3fcdd:	mov    esi,DWORD PTR [rsp+0x44]
   3fce1:	mov    r8d,ebp
   3fce4:	mov    ecx,r13d
   3fce7:	mov    rdi,r15
   3fcea:	call   QWORD PTR [rip+0x49368]        # 89058 <PelY_14b>
   3fcf0:	mov    edx,DWORD PTR [rsp+0x68]
   3fcf4:	mov    ecx,r13d
   3fcf7:	mov    esi,DWORD PTR [rsp+0x48]
   3fcfb:	movzx  r12d,ax
   3fcff:	imul   r12d,DWORD PTR [rsp+0x20]
   3fd05:	mov    r8d,ebp
   3fd08:	mov    rdi,r14
   3fd0b:	call   QWORD PTR [rip+0x4934f]        # 89060 <PelY_14>
   3fd11:	movzx  eax,ax
   3fd14:	imul   eax,ebx
   3fd17:	add    r12d,eax
   3fd1a:	mov    eax,DWORD PTR [rip+0x74494]        # b41b4 <wp_luma_round>
   3fd20:	lea    edx,[r12+rax*2]
   3fd24:	mov    eax,DWORD PTR [rip+0x74426]        # b4150 <luma_log_weight_denom>
   3fd2a:	lea    ecx,[rax+0x1]
   3fd2d:	sar    edx,cl
   3fd2f:	add    edx,DWORD PTR [rsp+0xc]
   3fd33:	mov    rax,QWORD PTR [rsp+0x60]
   3fd38:	mov    rsi,QWORD PTR [rsp+0x10]
   3fd3d:	mov    r12,QWORD PTR [rip+0x48874]        # 885b8 <input>
   3fd44:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   3fd49:	sub    eax,edx
   3fd4b:	mov    DWORD PTR [rsp+0x17c],eax
   3fd52:	mov    eax,DWORD PTR [r12+0xc94]
   3fd5a:	test   eax,eax
   3fd5c:	je     3e820 <SubPelBlockSearchBiPred+0xe80>
   3fd62:	mov    rdx,QWORD PTR [rsp+0xb8]
   3fd6a:	mov    rax,QWORD PTR [rsp+0x70]
   3fd6f:	xor    edi,edi
   3fd71:	add    rax,QWORD PTR [rsp+0xd8]
   3fd79:	mov    rsi,QWORD PTR [rsp+0x88]
   3fd81:	lea    rcx,[rdx+rax*4]
   3fd85:	xor    eax,eax
   3fd87:	mov    edx,DWORD PTR [rsi+rax*1]
   3fd8a:	mov    DWORD PTR [rcx+rax*1],edx
   3fd8d:	add    rax,0x4
   3fd91:	cmp    rax,0x10
   3fd95:	jne    3fd87 <SubPelBlockSearchBiPred+0x23e7>
   3fd97:	add    edi,0x4
   3fd9a:	add    rsi,0x10
   3fd9e:	add    rcx,0x40
   3fda2:	cmp    edi,0x10
   3fda5:	jne    3fd85 <SubPelBlockSearchBiPred+0x23e5>
   3fda7:	jmp    3e84b <SubPelBlockSearchBiPred+0xeab>
   3fdac:	mov    r15,QWORD PTR [rsp+0x10]
   3fdb1:	mov    rax,QWORD PTR [rsp+0xe8]
   3fdb9:	mov    ebx,ebp
   3fdbb:	movzx  ebp,WORD PTR [rax]
   3fdbe:	movsx  eax,WORD PTR [rsp+0x6c]
   3fdc3:	cmp    eax,DWORD PTR [rsp+0x610]
   3fdca:	jge    3fde3 <SubPelBlockSearchBiPred+0x2443>
   3fdcc:	movzx  esi,WORD PTR [rsp+0xf8]
   3fdd4:	mov    DWORD PTR [rsp+0x610],eax
   3fddb:	mov    WORD PTR [rsp+0x110],si
   3fde3:	add    WORD PTR [rsp+0xf8],0x1
   3fdec:	movzx  eax,WORD PTR [rsp+0xf8]
   3fdf4:	add    QWORD PTR [rsp+0x100],0x4
   3fdfd:	cmp    WORD PTR [rsp+0x108],ax
   3fe05:	je     3fe17 <SubPelBlockSearchBiPred+0x2477>
   3fe07:	mov    rax,QWORD PTR [rsp+0xf0]
   3fe0f:	movzx  eax,WORD PTR [rax]
   3fe12:	jmp    3de9e <SubPelBlockSearchBiPred+0x4fe>
   3fe17:	cmp    WORD PTR [rsp+0x110],0x0
   3fe20:	mov    r9d,ebp
   3fe23:	mov    r8d,DWORD PTR [r12+0x1c]
   3fe28:	mov    rbp,r15
   3fe2b:	mov    r15,r14
   3fe2e:	mov    r14d,ebx
   3fe31:	mov    ebx,r13d
   3fe34:	je     41fa8 <SubPelBlockSearchBiPred+0x4608>
   3fe3a:	mov    rdx,QWORD PTR [rip+0x77627]        # b7468 <spiral_search_x>
   3fe41:	mov    rsi,QWORD PTR [rsp+0xe8]
   3fe49:	movsx  rax,WORD PTR [rsp+0x110]
   3fe52:	mov    edx,DWORD PTR [rdx+rax*4]
   3fe55:	lea    edx,[r9+rdx*2]
   3fe59:	mov    WORD PTR [rsi],dx
   3fe5c:	mov    rdx,QWORD PTR [rip+0x7762d]        # b7490 <spiral_search_y>
   3fe63:	mov    eax,DWORD PTR [rdx+rax*4]
   3fe66:	mov    rdx,QWORD PTR [rsp+0xf0]
   3fe6e:	add    eax,eax
   3fe70:	add    WORD PTR [rdx],ax
   3fe73:	movsx  edx,WORD PTR [rsi]
   3fe76:	mov    r9d,edx
   3fe79:	add    edx,DWORD PTR [rsp+0x11c]
   3fe80:	test   r8d,r8d
   3fe83:	mov    eax,0x7fffffff
   3fe88:	cmove  eax,DWORD PTR [rsp+0x610]
   3fe90:	mov    DWORD PTR [rsp+0x610],eax
   3fe97:	cmp    edx,0x1
   3fe9a:	jle    3fee0 <SubPelBlockSearchBiPred+0x2540>
   3fe9c:	movsx  eax,WORD PTR [rsp+0x138]
   3fea4:	sub    eax,0x1
   3fea7:	cmp    eax,edx
   3fea9:	jle    3fee0 <SubPelBlockSearchBiPred+0x2540>
   3feab:	mov    rax,QWORD PTR [rsp+0xf0]
   3feb3:	movsx  edx,WORD PTR [rax]
   3feb6:	movsx  eax,WORD PTR [rsp+0x120]
   3febe:	add    edx,eax
   3fec0:	cmp    edx,0x1
   3fec3:	jle    3fee0 <SubPelBlockSearchBiPred+0x2540>
   3fec5:	movsx  eax,WORD PTR [rsp+0x13c]
   3fecd:	sub    eax,0x1
   3fed0:	cmp    edx,eax
   3fed2:	jge    3fee0 <SubPelBlockSearchBiPred+0x2540>
   3fed4:	lea    rax,[rip+0x1e105]        # 5dfe0 <FastPelY_14>
   3fedb:	jmp    3fee7 <SubPelBlockSearchBiPred+0x2547>
   3fedd:	nop    DWORD PTR [rax]
   3fee0:	lea    rax,[rip+0x1e079]        # 5df60 <UMVPelY_14>
   3fee7:	movzx  esi,BYTE PTR [rsp+0x10c]
   3feef:	mov    QWORD PTR [rip+0x4916a],rax        # 89060 <PelY_14>
   3fef6:	mov    WORD PTR [rsp+0xf8],si
   3fefe:	cmp    esi,DWORD PTR [rsp+0x608]
   3ff05:	jge    4201f <SubPelBlockSearchBiPred+0x467f>
   3ff0b:	movsx  eax,WORD PTR [rsp+0x130]
   3ff13:	xor    r10d,r10d
   3ff16:	mov    r13d,ebx
   3ff19:	mov    ebx,r14d
   3ff1c:	mov    WORD PTR [rsp+0x110],r10w
   3ff25:	mov    r14,r15
   3ff28:	mov    r15,rbp
   3ff2b:	mov    DWORD PTR [rsp+0x108],eax
   3ff32:	movsx  eax,WORD PTR [rsp+0x134]
   3ff3a:	mov    DWORD PTR [rsp+0x10c],eax
   3ff41:	movzx  eax,WORD PTR [rsp+0x128]
   3ff49:	mov    WORD PTR [rsp+0x100],ax
   3ff51:	movzx  eax,WORD PTR [rsp+0x124]
   3ff59:	shl    eax,0x2
   3ff5c:	mov    WORD PTR [rsp+0xe6],ax
   3ff64:	mov    eax,DWORD PTR [rsp+0x610]
   3ff6b:	mov    DWORD PTR [rsp+0x94],eax
   3ff72:	lea    rax,[rsp+0x180]
   3ff7a:	mov    QWORD PTR [rsp+0xb8],rax
   3ff82:	movsx  rdx,WORD PTR [rsp+0xf8]
   3ff8b:	mov    rax,QWORD PTR [rip+0x774d6]        # b7468 <spiral_search_x>
   3ff92:	mov    rcx,QWORD PTR [rip+0x774f7]        # b7490 <spiral_search_y>
   3ff99:	mov    rsi,QWORD PTR [rip+0x774d8]        # b7478 <mvbits>
   3ffa0:	movzx  edi,WORD PTR [rax+rdx*4]
   3ffa4:	mov    rax,QWORD PTR [rsp+0xf0]
   3ffac:	add    edi,r9d
   3ffaf:	movzx  eax,WORD PTR [rax]
   3ffb2:	add    ax,WORD PTR [rcx+rdx*4]
   3ffb6:	movsx  edx,ax
   3ffb9:	movsx  ecx,di
   3ffbc:	sub    edx,DWORD PTR [rsp+0x10c]
   3ffc3:	sub    ecx,DWORD PTR [rsp+0x108]
   3ffca:	movsxd rcx,ecx
   3ffcd:	movsxd rdx,edx
   3ffd0:	mov    WORD PTR [rsp+0xc8],di
   3ffd8:	mov    edx,DWORD PTR [rsi+rdx*4]
   3ffdb:	add    edx,DWORD PTR [rsi+rcx*4]
   3ffde:	imul   edx,DWORD PTR [rsp+0xfc]
   3ffe6:	shr    edx,0x10
   3ffe9:	cmp    WORD PTR [rsp+0xce],0x0
   3fff2:	mov    DWORD PTR [rsp+0x6c],edx
   3fff6:	jle    41ed5 <SubPelBlockSearchBiPred+0x4535>
   3fffc:	movzx  esi,WORD PTR [rsp+0x100]
   40004:	mov    edx,0xfffffffc
   40009:	xor    r8d,r8d
   4000c:	mov    ebp,ebx
   4000e:	mov    WORD PTR [rsp+0xca],r8w
   40017:	sub    edx,eax
   40019:	lea    esi,[rax+rsi*4+0x4]
   4001d:	movsx  eax,WORD PTR [rsp+0xfa]
   40025:	mov    WORD PTR [rsp+0xe2],dx
   4002d:	mov    WORD PTR [rsp+0xcc],si
   40035:	mov    DWORD PTR [rsp+0x20],eax
   40039:	nop    DWORD PTR [rax+0x0]
   40040:	movzx  eax,WORD PTR [rsp+0xcc]
   40048:	movzx  edx,WORD PTR [rsp+0xe2]
   40050:	mov    rbx,QWORD PTR [rsp+0xc0]
   40058:	add    edx,eax
   4005a:	sub    eax,0x4
   4005d:	add    dx,WORD PTR [rbx]
   40060:	cmp    WORD PTR [rsp+0xe0],0x0
   40069:	jne    40818 <SubPelBlockSearchBiPred+0x2e78>
   4006f:	cmp    WORD PTR [rsp+0x82],0x0
   40078:	jle    407d6 <SubPelBlockSearchBiPred+0x2e36>
   4007e:	movsx  rsi,WORD PTR [rsp+0xca]
   40087:	mov    rbx,QWORD PTR [rsp+0xd0]
   4008f:	cwde   
   40090:	mov    QWORD PTR [rsp+0x10],r15
   40095:	mov    DWORD PTR [rsp+0x38],eax
   40099:	lea    eax,[rdx+0x4]
   4009c:	lea    rcx,[rsi*8+0x0]
   400a4:	cwde   
   400a5:	shl    rsi,0x4
   400a9:	lea    rdi,[rbx+rcx*1]
   400ad:	mov    DWORD PTR [rsp+0x3c],eax
   400b1:	movsx  eax,WORD PTR [rsp+0xcc]
   400b9:	mov    QWORD PTR [rsp+0x98],rdi
   400c1:	lea    rdi,[rbx+rcx*1+0x8]
   400c6:	mov    QWORD PTR [rsp+0xa0],rdi
   400ce:	lea    rdi,[rbx+rcx*1+0x10]
   400d3:	lea    rbx,[rbx+rcx*1+0x18]
   400d8:	xor    ecx,ecx
   400da:	mov    QWORD PTR [rsp+0xb0],rbx
   400e2:	movsx  ebx,dx
   400e5:	mov    DWORD PTR [rsp+0x34],ebx
   400e9:	mov    ebx,eax
   400eb:	mov    DWORD PTR [rsp+0x40],eax
   400ef:	lea    eax,[rdx+0x8]
   400f2:	add    edx,0xc
   400f5:	cwde   
   400f6:	mov    QWORD PTR [rsp+0xa8],rdi
   400fe:	mov    DWORD PTR [rsp+0x44],eax
   40102:	lea    eax,[rbx+0x4]
   40105:	cwde   
   40106:	mov    QWORD PTR [rsp+0xd8],rsi
   4010e:	mov    DWORD PTR [rsp+0x48],eax
   40112:	movsx  eax,dx
   40115:	mov    DWORD PTR [rsp+0x4c],eax
   40119:	lea    eax,[rbx+0x8]
   4011c:	cwde   
   4011d:	mov    WORD PTR [rsp+0x68],cx
   40122:	mov    DWORD PTR [rsp+0x50],eax
   40126:	movzx  eax,WORD PTR [rsp+0xe6]
   4012e:	mov    WORD PTR [rsp+0x60],ax
   40133:	lea    rax,[rsp+0x140]
   4013b:	mov    QWORD PTR [rsp+0x88],rax
   40143:	jmp    4018e <SubPelBlockSearchBiPred+0x27ee>
   40145:	nop    DWORD PTR [rax]
   40148:	mov    esi,DWORD PTR [rax+0x18]
   4014b:	mov    rdi,QWORD PTR [rsp+0x88]
   40153:	call   3bae0 <SATD>
   40158:	add    WORD PTR [rsp+0x6c],ax
   4015d:	movsx  eax,WORD PTR [rsp+0x6c]
   40162:	cmp    eax,DWORD PTR [rsp+0x94]
   40169:	jg     41e7e <SubPelBlockSearchBiPred+0x44de>
   4016f:	add    WORD PTR [rsp+0x68],0x4
   40175:	movzx  eax,WORD PTR [rsp+0x68]
   4017a:	add    WORD PTR [rsp+0x60],0x10
   40180:	cmp    WORD PTR [rsp+0x82],ax
   40188:	jle    407d1 <SubPelBlockSearchBiPred+0x2e31>
   4018e:	mov    rdx,QWORD PTR [rsp+0x78]
   40193:	movzx  ebx,WORD PTR [rsp+0x60]
   40198:	mov    r8d,ebp
   4019b:	mov    ecx,r13d
   4019e:	mov    rax,QWORD PTR [rsp+0x98]
   401a6:	movsx  rdi,WORD PTR [rsp+0x68]
   401ac:	add    bx,WORD PTR [rdx]
   401af:	mov    esi,DWORD PTR [rsp+0x34]
   401b3:	mov    r15,QWORD PTR [rax]
   401b6:	mov    QWORD PTR [rsp+0x28],rdi
   401bb:	lea    rax,[rdi+rdi*1]
   401bf:	mov    QWORD PTR [rsp+0x18],rax
   401c4:	movzx  r12d,WORD PTR [r15+rdi*2]
   401c9:	movsx  edi,bx
   401cc:	mov    edx,edi
   401ce:	mov    DWORD PTR [rsp+0x24],edi
   401d2:	mov    rdi,QWORD PTR [rsp+0x10]
   401d7:	call   QWORD PTR [rip+0x48e7b]        # 89058 <PelY_14b>
   401dd:	mov    esi,DWORD PTR [rsp+0x38]
   401e1:	mov    r8d,ebp
   401e4:	mov    rdi,r14
   401e7:	movzx  r10d,WORD PTR [rsp+0xc8]
   401f0:	add    r10w,WORD PTR [rsp+0x60]
   401f6:	movzx  ebx,ax
   401f9:	movsx  ecx,r10w
   401fd:	mov    r10d,ecx
   40200:	mov    ecx,r13d
   40203:	mov    edx,r10d
   40206:	mov    DWORD PTR [rsp+0x30],r10d
   4020b:	call   QWORD PTR [rip+0x48e4f]        # 89060 <PelY_14>
   40211:	mov    esi,DWORD PTR [rsp+0x34]
   40215:	mov    r8d,ebp
   40218:	mov    ecx,r13d
   4021b:	movzx  eax,ax
   4021e:	mov    rdi,QWORD PTR [rsp+0x10]
   40223:	add    ebx,eax
   40225:	mov    rax,QWORD PTR [rsp+0x18]
   4022a:	sar    ebx,1
   4022c:	sub    r12d,ebx
   4022f:	mov    ebx,DWORD PTR [rsp+0x24]
   40233:	mov    DWORD PTR [rsp+0x140],r12d
   4023b:	movzx  r12d,WORD PTR [r15+rax*1+0x2]
   40241:	lea    r11d,[rbx+0x4]
   40245:	mov    edx,r11d
   40248:	mov    DWORD PTR [rsp+0x90],r11d
   40250:	call   QWORD PTR [rip+0x48e02]        # 89058 <PelY_14b>
   40256:	mov    ecx,DWORD PTR [rsp+0x30]
   4025a:	mov    esi,DWORD PTR [rsp+0x38]
   4025e:	mov    r8d,ebp
   40261:	movzx  ebx,ax
   40264:	mov    rdi,r14
   40267:	lea    r10d,[rcx+0x4]
   4026b:	mov    ecx,r13d
   4026e:	mov    edx,r10d
   40271:	mov    DWORD PTR [rsp+0x84],r10d
   40279:	call   QWORD PTR [rip+0x48de1]        # 89060 <PelY_14>
   4027f:	mov    esi,DWORD PTR [rsp+0x34]
   40283:	mov    r8d,ebp
   40286:	mov    ecx,r13d
   40289:	movzx  eax,ax
   4028c:	mov    rdi,QWORD PTR [rsp+0x10]
   40291:	add    ebx,eax
   40293:	mov    rax,QWORD PTR [rsp+0x18]
   40298:	sar    ebx,1
   4029a:	sub    r12d,ebx
   4029d:	mov    ebx,DWORD PTR [rsp+0x24]
   402a1:	mov    DWORD PTR [rsp+0x144],r12d
   402a9:	movzx  r12d,WORD PTR [r15+rax*1+0x4]
   402af:	lea    r9d,[rbx+0x8]
   402b3:	mov    edx,r9d
   402b6:	mov    DWORD PTR [rsp+0x70],r9d
   402bb:	call   QWORD PTR [rip+0x48d97]        # 89058 <PelY_14b>
   402c1:	mov    ecx,DWORD PTR [rsp+0x30]
   402c5:	mov    esi,DWORD PTR [rsp+0x38]
   402c9:	mov    r8d,ebp
   402cc:	movzx  ebx,ax
   402cf:	mov    rdi,r14
   402d2:	lea    edx,[rcx+0x8]
   402d5:	mov    ecx,r13d
   402d8:	mov    DWORD PTR [rsp+0x54],edx
   402dc:	call   QWORD PTR [rip+0x48d7e]        # 89060 <PelY_14>
   402e2:	mov    esi,DWORD PTR [rsp+0x34]
   402e6:	mov    r8d,ebp
   402e9:	mov    ecx,r13d
   402ec:	movzx  eax,ax
   402ef:	mov    rdi,QWORD PTR [rsp+0x10]
   402f4:	add    ebx,eax
   402f6:	mov    rax,QWORD PTR [rsp+0x18]
   402fb:	sar    ebx,1
   402fd:	sub    r12d,ebx
   40300:	mov    ebx,DWORD PTR [rsp+0x24]
   40304:	mov    DWORD PTR [rsp+0x148],r12d
   4030c:	movzx  r12d,WORD PTR [r15+rax*1+0x6]
   40312:	lea    r11d,[rbx+0xc]
   40316:	mov    edx,r11d
   40319:	mov    DWORD PTR [rsp+0x58],r11d
   4031e:	call   QWORD PTR [rip+0x48d34]        # 89058 <PelY_14b>
   40324:	mov    ecx,DWORD PTR [rsp+0x30]
   40328:	mov    esi,DWORD PTR [rsp+0x38]
   4032c:	mov    r8d,ebp
   4032f:	movzx  ebx,ax
   40332:	mov    rdi,r14
   40335:	lea    r9d,[rcx+0xc]
   40339:	mov    ecx,r13d
   4033c:	mov    edx,r9d
   4033f:	mov    DWORD PTR [rsp+0x5c],r9d
   40344:	call   QWORD PTR [rip+0x48d16]        # 89060 <PelY_14>
   4034a:	mov    rsi,QWORD PTR [rsp+0x28]
   4034f:	mov    r8d,ebp
   40352:	mov    ecx,r13d
   40355:	movzx  eax,ax
   40358:	mov    edx,DWORD PTR [rsp+0x24]
   4035c:	mov    rdi,QWORD PTR [rsp+0x10]
   40361:	add    ebx,eax
   40363:	mov    r15,QWORD PTR [rsp+0xa0]
   4036b:	sar    ebx,1
   4036d:	sub    r12d,ebx
   40370:	mov    DWORD PTR [rsp+0x14c],r12d
   40378:	mov    r12,QWORD PTR [r15]
   4037b:	movzx  r15d,WORD PTR [r12+rsi*2]
   40380:	mov    esi,DWORD PTR [rsp+0x3c]
   40384:	call   QWORD PTR [rip+0x48cce]        # 89058 <PelY_14b>
   4038a:	mov    edx,DWORD PTR [rsp+0x30]
   4038e:	mov    esi,DWORD PTR [rsp+0x40]
   40392:	mov    r8d,ebp
   40395:	movzx  ebx,ax
   40398:	mov    ecx,r13d
   4039b:	mov    rdi,r14
   4039e:	call   QWORD PTR [rip+0x48cbc]        # 89060 <PelY_14>
   403a4:	mov    esi,DWORD PTR [rsp+0x3c]
   403a8:	mov    r8d,ebp
   403ab:	mov    ecx,r13d
   403ae:	movzx  eax,ax
   403b1:	mov    r11d,DWORD PTR [rsp+0x90]
   403b9:	mov    rdi,QWORD PTR [rsp+0x10]
   403be:	add    ebx,eax
   403c0:	mov    rax,QWORD PTR [rsp+0x18]
   403c5:	sar    ebx,1
   403c7:	mov    edx,r11d
   403ca:	sub    r15d,ebx
   403cd:	mov    DWORD PTR [rsp+0x150],r15d
   403d5:	movzx  r15d,WORD PTR [r12+rax*1+0x2]
   403db:	call   QWORD PTR [rip+0x48c77]        # 89058 <PelY_14b>
   403e1:	mov    esi,DWORD PTR [rsp+0x40]
   403e5:	mov    r8d,ebp
   403e8:	mov    ecx,r13d
   403eb:	mov    r10d,DWORD PTR [rsp+0x84]
   403f3:	movzx  ebx,ax
   403f6:	mov    rdi,r14
   403f9:	mov    edx,r10d
   403fc:	call   QWORD PTR [rip+0x48c5e]        # 89060 <PelY_14>
   40402:	mov    r9d,DWORD PTR [rsp+0x70]
   40407:	mov    r8d,ebp
   4040a:	mov    ecx,r13d
   4040d:	movzx  eax,ax
   40410:	mov    esi,DWORD PTR [rsp+0x3c]
   40414:	mov    rdi,QWORD PTR [rsp+0x10]
   40419:	add    ebx,eax
   4041b:	mov    rax,QWORD PTR [rsp+0x18]
   40420:	mov    edx,r9d
   40423:	sar    ebx,1
   40425:	sub    r15d,ebx
   40428:	mov    DWORD PTR [rsp+0x154],r15d
   40430:	movzx  r15d,WORD PTR [r12+rax*1+0x4]
   40436:	call   QWORD PTR [rip+0x48c1c]        # 89058 <PelY_14b>
   4043c:	mov    edx,DWORD PTR [rsp+0x54]
   40440:	mov    esi,DWORD PTR [rsp+0x40]
   40444:	mov    r8d,ebp
   40447:	movzx  ebx,ax
   4044a:	mov    ecx,r13d
   4044d:	mov    rdi,r14
   40450:	call   QWORD PTR [rip+0x48c0a]        # 89060 <PelY_14>
   40456:	mov    edx,DWORD PTR [rsp+0x58]
   4045a:	mov    esi,DWORD PTR [rsp+0x3c]
   4045e:	mov    r8d,ebp
   40461:	movzx  eax,ax
   40464:	mov    rdi,QWORD PTR [rsp+0x10]
   40469:	mov    ecx,r13d
   4046c:	add    ebx,eax
   4046e:	mov    rax,QWORD PTR [rsp+0x18]
   40473:	sar    ebx,1
   40475:	sub    r15d,ebx
   40478:	movzx  r12d,WORD PTR [r12+rax*1+0x6]
   4047e:	mov    DWORD PTR [rsp+0x158],r15d
   40486:	call   QWORD PTR [rip+0x48bcc]        # 89058 <PelY_14b>
   4048c:	mov    edx,DWORD PTR [rsp+0x5c]
   40490:	mov    esi,DWORD PTR [rsp+0x40]
   40494:	mov    r8d,ebp
   40497:	movzx  ebx,ax
   4049a:	mov    ecx,r13d
   4049d:	mov    rdi,r14
   404a0:	call   QWORD PTR [rip+0x48bba]        # 89060 <PelY_14>
   404a6:	mov    rsi,QWORD PTR [rsp+0x28]
   404ab:	mov    r8d,ebp
   404ae:	mov    ecx,r13d
   404b1:	movzx  eax,ax
   404b4:	mov    edx,DWORD PTR [rsp+0x24]
   404b8:	mov    rdi,QWORD PTR [rsp+0x10]
   404bd:	add    ebx,eax
   404bf:	mov    r10,QWORD PTR [rsp+0xa8]
   404c7:	sar    ebx,1
   404c9:	sub    r12d,ebx
   404cc:	mov    DWORD PTR [rsp+0x15c],r12d
   404d4:	mov    r12,QWORD PTR [r10]
   404d7:	movzx  r15d,WORD PTR [r12+rsi*2]
   404dc:	mov    esi,DWORD PTR [rsp+0x44]
   404e0:	call   QWORD PTR [rip+0x48b72]        # 89058 <PelY_14b>
   404e6:	mov    edx,DWORD PTR [rsp+0x30]
   404ea:	mov    esi,DWORD PTR [rsp+0x48]
   404ee:	mov    r8d,ebp
   404f1:	movzx  ebx,ax
   404f4:	mov    ecx,r13d
   404f7:	mov    rdi,r14
   404fa:	call   QWORD PTR [rip+0x48b60]        # 89060 <PelY_14>
   40500:	mov    esi,DWORD PTR [rsp+0x44]
   40504:	mov    r8d,ebp
   40507:	mov    ecx,r13d
   4050a:	movzx  eax,ax
   4050d:	mov    r11d,DWORD PTR [rsp+0x90]
   40515:	mov    rdi,QWORD PTR [rsp+0x10]
   4051a:	add    ebx,eax
   4051c:	mov    rax,QWORD PTR [rsp+0x18]
   40521:	sar    ebx,1
   40523:	mov    edx,r11d
   40526:	sub    r15d,ebx
   40529:	mov    DWORD PTR [rsp+0x160],r15d
   40531:	movzx  r15d,WORD PTR [r12+rax*1+0x2]
   40537:	call   QWORD PTR [rip+0x48b1b]        # 89058 <PelY_14b>
   4053d:	mov    esi,DWORD PTR [rsp+0x48]
   40541:	mov    r8d,ebp
   40544:	mov    ecx,r13d
   40547:	mov    r10d,DWORD PTR [rsp+0x84]
   4054f:	movzx  ebx,ax
   40552:	mov    rdi,r14
   40555:	mov    edx,r10d
   40558:	call   QWORD PTR [rip+0x48b02]        # 89060 <PelY_14>
   4055e:	mov    r9d,DWORD PTR [rsp+0x70]
   40563:	mov    r8d,ebp
   40566:	mov    ecx,r13d
   40569:	movzx  eax,ax
   4056c:	mov    esi,DWORD PTR [rsp+0x44]
   40570:	mov    rdi,QWORD PTR [rsp+0x10]
   40575:	add    ebx,eax
   40577:	mov    rax,QWORD PTR [rsp+0x18]
   4057c:	mov    edx,r9d
   4057f:	sar    ebx,1
   40581:	sub    r15d,ebx
   40584:	mov    DWORD PTR [rsp+0x164],r15d
   4058c:	movzx  r15d,WORD PTR [r12+rax*1+0x4]
   40592:	call   QWORD PTR [rip+0x48ac0]        # 89058 <PelY_14b>
   40598:	mov    edx,DWORD PTR [rsp+0x54]
   4059c:	mov    esi,DWORD PTR [rsp+0x48]
   405a0:	mov    r8d,ebp
   405a3:	movzx  ebx,ax
   405a6:	mov    ecx,r13d
   405a9:	mov    rdi,r14
   405ac:	call   QWORD PTR [rip+0x48aae]        # 89060 <PelY_14>
   405b2:	mov    edx,DWORD PTR [rsp+0x58]
   405b6:	mov    esi,DWORD PTR [rsp+0x44]
   405ba:	mov    r8d,ebp
   405bd:	movzx  eax,ax
   405c0:	mov    rdi,QWORD PTR [rsp+0x10]
   405c5:	mov    ecx,r13d
   405c8:	add    ebx,eax
   405ca:	mov    rax,QWORD PTR [rsp+0x18]
   405cf:	sar    ebx,1
   405d1:	sub    r15d,ebx
   405d4:	movzx  r12d,WORD PTR [r12+rax*1+0x6]
   405da:	mov    DWORD PTR [rsp+0x168],r15d
   405e2:	call   QWORD PTR [rip+0x48a70]        # 89058 <PelY_14b>
   405e8:	mov    edx,DWORD PTR [rsp+0x5c]
   405ec:	mov    esi,DWORD PTR [rsp+0x48]
   405f0:	mov    r8d,ebp
   405f3:	movzx  ebx,ax
   405f6:	mov    ecx,r13d
   405f9:	mov    rdi,r14
   405fc:	call   QWORD PTR [rip+0x48a5e]        # 89060 <PelY_14>
   40602:	mov    rsi,QWORD PTR [rsp+0x28]
   40607:	mov    r8d,ebp
   4060a:	mov    ecx,r13d
   4060d:	movzx  eax,ax
   40610:	mov    edx,DWORD PTR [rsp+0x24]
   40614:	mov    rdi,QWORD PTR [rsp+0x10]
   40619:	add    ebx,eax
   4061b:	mov    r10,QWORD PTR [rsp+0xb0]
   40623:	sar    ebx,1
   40625:	sub    r12d,ebx
   40628:	mov    DWORD PTR [rsp+0x16c],r12d
   40630:	mov    r12,QWORD PTR [r10]
   40633:	movzx  r15d,WORD PTR [r12+rsi*2]
   40638:	mov    esi,DWORD PTR [rsp+0x4c]
   4063c:	call   QWORD PTR [rip+0x48a16]        # 89058 <PelY_14b>
   40642:	mov    edx,DWORD PTR [rsp+0x30]
   40646:	mov    esi,DWORD PTR [rsp+0x50]
   4064a:	mov    r8d,ebp
   4064d:	movzx  ebx,ax
   40650:	mov    ecx,r13d
   40653:	mov    rdi,r14
   40656:	call   QWORD PTR [rip+0x48a04]        # 89060 <PelY_14>
   4065c:	mov    esi,DWORD PTR [rsp+0x4c]
   40660:	mov    r8d,ebp
   40663:	mov    ecx,r13d
   40666:	movzx  eax,ax
   40669:	mov    r11d,DWORD PTR [rsp+0x90]
   40671:	mov    rdi,QWORD PTR [rsp+0x10]
   40676:	add    ebx,eax
   40678:	mov    rax,QWORD PTR [rsp+0x18]
   4067d:	sar    ebx,1
   4067f:	mov    edx,r11d
   40682:	sub    r15d,ebx
   40685:	mov    DWORD PTR [rsp+0x170],r15d
   4068d:	movzx  r15d,WORD PTR [r12+rax*1+0x2]
   40693:	call   QWORD PTR [rip+0x489bf]        # 89058 <PelY_14b>
   40699:	mov    esi,DWORD PTR [rsp+0x50]
   4069d:	mov    r8d,ebp
   406a0:	mov    ecx,r13d
   406a3:	mov    r10d,DWORD PTR [rsp+0x84]
   406ab:	movzx  ebx,ax
   406ae:	mov    rdi,r14
   406b1:	mov    edx,r10d
   406b4:	call   QWORD PTR [rip+0x489a6]        # 89060 <PelY_14>
   406ba:	mov    r9d,DWORD PTR [rsp+0x70]
   406bf:	mov    r8d,ebp
   406c2:	mov    ecx,r13d
   406c5:	movzx  eax,ax
   406c8:	mov    esi,DWORD PTR [rsp+0x4c]
   406cc:	mov    rdi,QWORD PTR [rsp+0x10]
   406d1:	add    ebx,eax
   406d3:	mov    rax,QWORD PTR [rsp+0x18]
   406d8:	mov    edx,r9d
   406db:	sar    ebx,1
   406dd:	sub    r15d,ebx
   406e0:	mov    DWORD PTR [rsp+0x174],r15d
   406e8:	movzx  r15d,WORD PTR [r12+rax*1+0x4]
   406ee:	call   QWORD PTR [rip+0x48964]        # 89058 <PelY_14b>
   406f4:	mov    edx,DWORD PTR [rsp+0x54]
   406f8:	mov    esi,DWORD PTR [rsp+0x50]
   406fc:	mov    r8d,ebp
   406ff:	movzx  ebx,ax
   40702:	mov    ecx,r13d
   40705:	mov    rdi,r14
   40708:	call   QWORD PTR [rip+0x48952]        # 89060 <PelY_14>
   4070e:	mov    edx,DWORD PTR [rsp+0x58]
   40712:	mov    esi,DWORD PTR [rsp+0x4c]
   40716:	mov    r8d,ebp
   40719:	movzx  eax,ax
   4071c:	mov    rdi,QWORD PTR [rsp+0x10]
   40721:	mov    ecx,r13d
   40724:	add    ebx,eax
   40726:	mov    rax,QWORD PTR [rsp+0x18]
   4072b:	sar    ebx,1
   4072d:	sub    r15d,ebx
   40730:	movzx  ebx,WORD PTR [r12+rax*1+0x6]
   40736:	mov    DWORD PTR [rsp+0x178],r15d
   4073e:	call   QWORD PTR [rip+0x48914]        # 89058 <PelY_14b>
   40744:	mov    edx,DWORD PTR [rsp+0x5c]
   40748:	mov    esi,DWORD PTR [rsp+0x50]
   4074c:	mov    r8d,ebp
   4074f:	movzx  r12d,ax
   40753:	mov    ecx,r13d
   40756:	mov    rdi,r14
   40759:	call   QWORD PTR [rip+0x48901]        # 89060 <PelY_14>
   4075f:	movzx  eax,ax
   40762:	add    r12d,eax
   40765:	mov    rax,QWORD PTR [rip+0x47e4c]        # 885b8 <input>
   4076c:	sar    r12d,1
   4076f:	mov    edx,DWORD PTR [rax+0xc94]
   40775:	sub    ebx,r12d
   40778:	mov    DWORD PTR [rsp+0x17c],ebx
   4077f:	test   edx,edx
   40781:	je     40148 <SubPelBlockSearchBiPred+0x27a8>
   40787:	mov    rbx,QWORD PTR [rsp+0xb8]
   4078f:	mov    rax,QWORD PTR [rsp+0x28]
   40794:	xor    edi,edi
   40796:	add    rax,QWORD PTR [rsp+0xd8]
   4079e:	mov    rsi,QWORD PTR [rsp+0x88]
   407a6:	lea    rcx,[rbx+rax*4]
   407aa:	xor    eax,eax
   407ac:	mov    edx,DWORD PTR [rsi+rax*1]
   407af:	mov    DWORD PTR [rcx+rax*1],edx
   407b2:	add    rax,0x4
   407b6:	cmp    rax,0x10
   407ba:	jne    407ac <SubPelBlockSearchBiPred+0x2e0c>
   407bc:	add    edi,0x4
   407bf:	add    rsi,0x10
   407c3:	add    rcx,0x40
   407c7:	cmp    edi,0x10
   407ca:	jne    407aa <SubPelBlockSearchBiPred+0x2e0a>
   407cc:	jmp    4016f <SubPelBlockSearchBiPred+0x27cf>
   407d1:	mov    r15,QWORD PTR [rsp+0x10]
   407d6:	add    WORD PTR [rsp+0xca],0x4
   407df:	movzx  eax,WORD PTR [rsp+0xca]
   407e7:	add    WORD PTR [rsp+0xcc],0x10
   407f0:	cmp    WORD PTR [rsp+0xce],ax
   407f8:	jg     40040 <SubPelBlockSearchBiPred+0x26a0>
   407fe:	mov    rax,QWORD PTR [rip+0x47db3]        # 885b8 <input>
   40805:	mov    ebx,ebp
   40807:	mov    edx,DWORD PTR [rax+0xc94]
   4080d:	jmp    41ee2 <SubPelBlockSearchBiPred+0x4542>
   40812:	nop    WORD PTR [rax+rax*1+0x0]
   40818:	cmp    WORD PTR [rsp+0x82],0x0
   40821:	jle    407d6 <SubPelBlockSearchBiPred+0x2e36>
   40823:	movsx  rsi,WORD PTR [rsp+0xca]
   4082c:	mov    rbx,QWORD PTR [rsp+0xd0]
   40834:	cwde   
   40835:	mov    DWORD PTR [rsp+0x28],eax
   40839:	lea    eax,[rdx+0x4]
   4083c:	lea    rcx,[rsi*8+0x0]
   40844:	cwde   
   40845:	shl    rsi,0x4
   40849:	lea    rdi,[rbx+rcx*1]
   4084d:	mov    DWORD PTR [rsp+0x34],eax
   40851:	movsx  eax,WORD PTR [rsp+0xcc]
   40859:	mov    QWORD PTR [rsp+0x98],rdi
   40861:	lea    rdi,[rbx+rcx*1+0x8]
   40866:	mov    QWORD PTR [rsp+0xa0],rdi
   4086e:	lea    rdi,[rbx+rcx*1+0x10]
   40873:	lea    rbx,[rbx+rcx*1+0x18]
   40878:	mov    QWORD PTR [rsp+0xa8],rdi
   40880:	movsx  edi,dx
   40883:	mov    DWORD PTR [rsp+0x30],edi
   40887:	mov    edi,eax
   40889:	mov    DWORD PTR [rsp+0x38],eax
   4088d:	lea    eax,[rdx+0x8]
   40890:	add    edx,0xc
   40893:	cwde   
   40894:	mov    QWORD PTR [rsp+0xb0],rbx
   4089c:	movsx  ebx,WORD PTR [rsp+0xe4]
   408a4:	mov    DWORD PTR [rsp+0x3c],eax
   408a8:	lea    eax,[rdi+0x4]
   408ab:	cwde   
   408ac:	mov    QWORD PTR [rsp+0xd8],rsi
   408b4:	mov    DWORD PTR [rsp+0x40],eax
   408b8:	movsx  eax,dx
   408bb:	mov    DWORD PTR [rsp+0x44],eax
   408bf:	lea    eax,[rdi+0x8]
   408c2:	xor    edi,edi
   408c4:	cwde   
   408c5:	mov    WORD PTR [rsp+0x84],di
   408cd:	mov    DWORD PTR [rsp+0x48],eax
   408d1:	movzx  eax,WORD PTR [rsp+0xe6]
   408d9:	mov    WORD PTR [rsp+0x90],ax
   408e1:	lea    rax,[rsp+0x140]
   408e9:	mov    QWORD PTR [rsp+0x88],rax
   408f1:	jmp    40947 <SubPelBlockSearchBiPred+0x2fa7>
   408f3:	nop    DWORD PTR [rax+rax*1+0x0]
   408f8:	mov    esi,DWORD PTR [rax+0x18]
   408fb:	mov    rdi,QWORD PTR [rsp+0x88]
   40903:	call   3bae0 <SATD>
   40908:	add    WORD PTR [rsp+0x6c],ax
   4090d:	movsx  eax,WORD PTR [rsp+0x6c]
   40912:	cmp    eax,DWORD PTR [rsp+0x94]
   40919:	jg     41e83 <SubPelBlockSearchBiPred+0x44e3>
   4091f:	add    WORD PTR [rsp+0x84],0x4
   40928:	movzx  eax,WORD PTR [rsp+0x84]
   40930:	add    WORD PTR [rsp+0x90],0x10
   40939:	cmp    WORD PTR [rsp+0x82],ax
   40941:	jle    407d6 <SubPelBlockSearchBiPred+0x2e36>
   40947:	mov    rsi,QWORD PTR [rsp+0x78]
   4094c:	mov    r8d,ebp
   4094f:	mov    ecx,r13d
   40952:	mov    rdi,r15
   40955:	mov    rax,QWORD PTR [rsp+0x98]
   4095d:	mov    rax,QWORD PTR [rax]
   40960:	mov    QWORD PTR [rsp+0x60],rax
   40965:	movzx  eax,WORD PTR [rsp+0x90]
   4096d:	add    ax,WORD PTR [rsi]
   40970:	movsx  esi,ax
   40973:	mov    edx,esi
   40975:	mov    DWORD PTR [rsp+0x18],esi
   40979:	mov    esi,DWORD PTR [rsp+0x30]
   4097d:	call   QWORD PTR [rip+0x486d5]        # 89058 <PelY_14b>
   40983:	mov    ecx,r13d
   40986:	mov    rdi,r14
   40989:	mov    esi,DWORD PTR [rsp+0x28]
   4098d:	movzx  r12d,ax
   40991:	movzx  eax,WORD PTR [rsp+0xc8]
   40999:	imul   r12d,DWORD PTR [rsp+0x20]
   4099f:	mov    r8d,ebp
   409a2:	add    ax,WORD PTR [rsp+0x90]
   409aa:	cwde   
   409ab:	mov    edx,eax
   409ad:	mov    DWORD PTR [rsp+0x24],eax
   409b1:	call   QWORD PTR [rip+0x486a9]        # 89060 <PelY_14>
   409b7:	mov    edi,DWORD PTR [rip+0x73793]        # b4150 <luma_log_weight_denom>
   409bd:	xor    edx,edx
   409bf:	movzx  eax,ax
   409c2:	imul   eax,ebx
   409c5:	lea    ecx,[rdi+0x1]
   409c8:	add    r12d,eax
   409cb:	mov    eax,DWORD PTR [rip+0x737e3]        # b41b4 <wp_luma_round>
   409d1:	lea    eax,[r12+rax*2]
   409d5:	sar    eax,cl
   409d7:	mov    r10d,eax
   409da:	add    r10d,DWORD PTR [rsp+0xc]
   409df:	js     40aac <SubPelBlockSearchBiPred+0x310c>
   409e5:	mov    edx,DWORD PTR [rsp+0x18]
   409e9:	mov    esi,DWORD PTR [rsp+0x30]
   409ed:	mov    r8d,ebp
   409f0:	mov    ecx,r13d
   409f3:	mov    rdi,r15
   409f6:	call   QWORD PTR [rip+0x4865c]        # 89058 <PelY_14b>
   409fc:	mov    edx,DWORD PTR [rsp+0x24]
   40a00:	mov    ecx,r13d
   40a03:	mov    esi,DWORD PTR [rsp+0x28]
   40a07:	movzx  r12d,ax
   40a0b:	imul   r12d,DWORD PTR [rsp+0x20]
   40a11:	mov    r8d,ebp
   40a14:	mov    rdi,r14
   40a17:	call   QWORD PTR [rip+0x48643]        # 89060 <PelY_14>
   40a1d:	mov    rdx,QWORD PTR [rip+0x47b8c]        # 885b0 <img>
   40a24:	mov    r11d,DWORD PTR [rip+0x73725]        # b4150 <luma_log_weight_denom>
   40a2b:	movzx  eax,ax
   40a2e:	imul   eax,ebx
   40a31:	lea    ecx,[r11+0x1]
   40a35:	mov    edx,DWORD PTR [rdx+0x11bec]
   40a3b:	add    r12d,eax
   40a3e:	mov    eax,DWORD PTR [rip+0x73770]        # b41b4 <wp_luma_round>
   40a44:	lea    eax,[r12+rax*2]
   40a48:	sar    eax,cl
   40a4a:	add    eax,DWORD PTR [rsp+0xc]
   40a4e:	cmp    eax,edx
   40a50:	jg     40aac <SubPelBlockSearchBiPred+0x310c>
   40a52:	mov    edx,DWORD PTR [rsp+0x18]
   40a56:	mov    esi,DWORD PTR [rsp+0x30]
   40a5a:	mov    r8d,ebp
   40a5d:	mov    ecx,r13d
   40a60:	mov    rdi,r15
   40a63:	call   QWORD PTR [rip+0x485ef]        # 89058 <PelY_14b>
   40a69:	mov    edx,DWORD PTR [rsp+0x24]
   40a6d:	mov    ecx,r13d
   40a70:	mov    esi,DWORD PTR [rsp+0x28]
   40a74:	movzx  r12d,ax
   40a78:	imul   r12d,DWORD PTR [rsp+0x20]
   40a7e:	mov    r8d,ebp
   40a81:	mov    rdi,r14
   40a84:	call   QWORD PTR [rip+0x485d6]        # 89060 <PelY_14>
   40a8a:	movzx  eax,ax
   40a8d:	imul   eax,ebx
   40a90:	add    r12d,eax
   40a93:	mov    eax,DWORD PTR [rip+0x7371b]        # b41b4 <wp_luma_round>
   40a99:	lea    edx,[r12+rax*2]
   40a9d:	mov    eax,DWORD PTR [rip+0x736ad]        # b4150 <luma_log_weight_denom>
   40aa3:	lea    ecx,[rax+0x1]
   40aa6:	sar    edx,cl
   40aa8:	add    edx,DWORD PTR [rsp+0xc]
   40aac:	movsx  rax,WORD PTR [rsp+0x84]
   40ab5:	mov    r8d,ebp
   40ab8:	mov    ecx,r13d
   40abb:	mov    rdi,r15
   40abe:	lea    rsi,[rax+rax*1]
   40ac2:	mov    QWORD PTR [rsp+0x70],rax
   40ac7:	mov    QWORD PTR [rsp+0x10],rsi
   40acc:	mov    rsi,QWORD PTR [rsp+0x60]
   40ad1:	movzx  eax,WORD PTR [rsi+rax*2]
   40ad5:	mov    esi,DWORD PTR [rsp+0x30]
   40ad9:	sub    eax,edx
   40adb:	mov    DWORD PTR [rsp+0x140],eax
   40ae2:	mov    eax,DWORD PTR [rsp+0x18]
   40ae6:	add    eax,0x4
   40ae9:	mov    edx,eax
   40aeb:	mov    DWORD PTR [rsp+0x4c],eax
   40aef:	call   QWORD PTR [rip+0x48563]        # 89058 <PelY_14b>
   40af5:	mov    r9d,DWORD PTR [rsp+0x24]
   40afa:	mov    ecx,r13d
   40afd:	mov    r8d,ebp
   40b00:	movzx  r12d,ax
   40b04:	mov    esi,DWORD PTR [rsp+0x28]
   40b08:	imul   r12d,DWORD PTR [rsp+0x20]
   40b0e:	lea    edi,[r9+0x4]
   40b12:	mov    edx,edi
   40b14:	mov    DWORD PTR [rsp+0x50],edi
   40b18:	mov    rdi,r14
   40b1b:	call   QWORD PTR [rip+0x4853f]        # 89060 <PelY_14>
   40b21:	mov    r10d,DWORD PTR [rip+0x73628]        # b4150 <luma_log_weight_denom>
   40b28:	xor    edx,edx
   40b2a:	movzx  eax,ax
   40b2d:	imul   eax,ebx
   40b30:	lea    ecx,[r10+0x1]
   40b34:	add    r12d,eax
   40b37:	mov    eax,DWORD PTR [rip+0x73677]        # b41b4 <wp_luma_round>
   40b3d:	lea    eax,[r12+rax*2]
   40b41:	sar    eax,cl
   40b43:	mov    r11d,eax
   40b46:	add    r11d,DWORD PTR [rsp+0xc]
   40b4b:	js     40c18 <SubPelBlockSearchBiPred+0x3278>
   40b51:	mov    edx,DWORD PTR [rsp+0x4c]
   40b55:	mov    esi,DWORD PTR [rsp+0x30]
   40b59:	mov    r8d,ebp
   40b5c:	mov    ecx,r13d
   40b5f:	mov    rdi,r15
   40b62:	call   QWORD PTR [rip+0x484f0]        # 89058 <PelY_14b>
   40b68:	mov    edx,DWORD PTR [rsp+0x50]
   40b6c:	mov    ecx,r13d
   40b6f:	mov    esi,DWORD PTR [rsp+0x28]
   40b73:	movzx  r12d,ax
   40b77:	imul   r12d,DWORD PTR [rsp+0x20]
   40b7d:	mov    r8d,ebp
   40b80:	mov    rdi,r14
   40b83:	call   QWORD PTR [rip+0x484d7]        # 89060 <PelY_14>
   40b89:	mov    rdx,QWORD PTR [rip+0x47a20]        # 885b0 <img>
   40b90:	mov    r11d,DWORD PTR [rip+0x735b9]        # b4150 <luma_log_weight_denom>
   40b97:	movzx  eax,ax
   40b9a:	imul   eax,ebx
   40b9d:	lea    ecx,[r11+0x1]
   40ba1:	mov    edx,DWORD PTR [rdx+0x11bec]
   40ba7:	add    r12d,eax
   40baa:	mov    eax,DWORD PTR [rip+0x73604]        # b41b4 <wp_luma_round>
   40bb0:	lea    eax,[r12+rax*2]
   40bb4:	sar    eax,cl
   40bb6:	add    eax,DWORD PTR [rsp+0xc]
   40bba:	cmp    eax,edx
   40bbc:	jg     40c18 <SubPelBlockSearchBiPred+0x3278>
   40bbe:	mov    edx,DWORD PTR [rsp+0x4c]
   40bc2:	mov    esi,DWORD PTR [rsp+0x30]
   40bc6:	mov    r8d,ebp
   40bc9:	mov    ecx,r13d
   40bcc:	mov    rdi,r15
   40bcf:	call   QWORD PTR [rip+0x48483]        # 89058 <PelY_14b>
   40bd5:	mov    edx,DWORD PTR [rsp+0x50]
   40bd9:	mov    ecx,r13d
   40bdc:	mov    esi,DWORD PTR [rsp+0x28]
   40be0:	movzx  r12d,ax
   40be4:	imul   r12d,DWORD PTR [rsp+0x20]
   40bea:	mov    r8d,ebp
   40bed:	mov    rdi,r14
   40bf0:	call   QWORD PTR [rip+0x4846a]        # 89060 <PelY_14>
   40bf6:	movzx  eax,ax
   40bf9:	imul   eax,ebx
   40bfc:	add    r12d,eax
   40bff:	mov    eax,DWORD PTR [rip+0x735af]        # b41b4 <wp_luma_round>
   40c05:	lea    edx,[r12+rax*2]
   40c09:	mov    eax,DWORD PTR [rip+0x73541]        # b4150 <luma_log_weight_denom>
   40c0f:	lea    ecx,[rax+0x1]
   40c12:	sar    edx,cl
   40c14:	add    edx,DWORD PTR [rsp+0xc]
   40c18:	mov    rsi,QWORD PTR [rsp+0x10]
   40c1d:	mov    rax,QWORD PTR [rsp+0x60]
   40c22:	mov    r8d,ebp
   40c25:	mov    ecx,r13d
   40c28:	mov    rdi,r15
   40c2b:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   40c30:	mov    esi,DWORD PTR [rsp+0x30]
   40c34:	sub    eax,edx
   40c36:	mov    DWORD PTR [rsp+0x144],eax
   40c3d:	mov    eax,DWORD PTR [rsp+0x18]
   40c41:	add    eax,0x8
   40c44:	mov    edx,eax
   40c46:	mov    DWORD PTR [rsp+0x54],eax
   40c4a:	call   QWORD PTR [rip+0x48408]        # 89058 <PelY_14b>
   40c50:	mov    r9d,DWORD PTR [rsp+0x24]
   40c55:	mov    ecx,r13d
   40c58:	mov    r8d,ebp
   40c5b:	movzx  r12d,ax
   40c5f:	mov    esi,DWORD PTR [rsp+0x28]
   40c63:	imul   r12d,DWORD PTR [rsp+0x20]
   40c69:	lea    edi,[r9+0x8]
   40c6d:	mov    edx,edi
   40c6f:	mov    DWORD PTR [rsp+0x58],edi
   40c73:	mov    rdi,r14
   40c76:	call   QWORD PTR [rip+0x483e4]        # 89060 <PelY_14>
   40c7c:	mov    r10d,DWORD PTR [rip+0x734cd]        # b4150 <luma_log_weight_denom>
   40c83:	xor    edx,edx
   40c85:	movzx  eax,ax
   40c88:	imul   eax,ebx
   40c8b:	lea    ecx,[r10+0x1]
   40c8f:	add    r12d,eax
   40c92:	mov    eax,DWORD PTR [rip+0x7351c]        # b41b4 <wp_luma_round>
   40c98:	lea    eax,[r12+rax*2]
   40c9c:	sar    eax,cl
   40c9e:	mov    r9d,eax
   40ca1:	add    r9d,DWORD PTR [rsp+0xc]
   40ca6:	js     40d73 <SubPelBlockSearchBiPred+0x33d3>
   40cac:	mov    edx,DWORD PTR [rsp+0x54]
   40cb0:	mov    esi,DWORD PTR [rsp+0x30]
   40cb4:	mov    r8d,ebp
   40cb7:	mov    ecx,r13d
   40cba:	mov    rdi,r15
   40cbd:	call   QWORD PTR [rip+0x48395]        # 89058 <PelY_14b>
   40cc3:	mov    edx,DWORD PTR [rsp+0x58]
   40cc7:	mov    ecx,r13d
   40cca:	mov    esi,DWORD PTR [rsp+0x28]
   40cce:	movzx  r12d,ax
   40cd2:	imul   r12d,DWORD PTR [rsp+0x20]
   40cd8:	mov    r8d,ebp
   40cdb:	mov    rdi,r14
   40cde:	call   QWORD PTR [rip+0x4837c]        # 89060 <PelY_14>
   40ce4:	mov    rdx,QWORD PTR [rip+0x478c5]        # 885b0 <img>
   40ceb:	mov    r9d,DWORD PTR [rip+0x7345e]        # b4150 <luma_log_weight_denom>
   40cf2:	movzx  eax,ax
   40cf5:	imul   eax,ebx
   40cf8:	lea    ecx,[r9+0x1]
   40cfc:	mov    edx,DWORD PTR [rdx+0x11bec]
   40d02:	add    r12d,eax
   40d05:	mov    eax,DWORD PTR [rip+0x734a9]        # b41b4 <wp_luma_round>
   40d0b:	lea    eax,[r12+rax*2]
   40d0f:	sar    eax,cl
   40d11:	add    eax,DWORD PTR [rsp+0xc]
   40d15:	cmp    eax,edx
   40d17:	jg     40d73 <SubPelBlockSearchBiPred+0x33d3>
   40d19:	mov    edx,DWORD PTR [rsp+0x54]
   40d1d:	mov    esi,DWORD PTR [rsp+0x30]
   40d21:	mov    r8d,ebp
   40d24:	mov    ecx,r13d
   40d27:	mov    rdi,r15
   40d2a:	call   QWORD PTR [rip+0x48328]        # 89058 <PelY_14b>
   40d30:	mov    edx,DWORD PTR [rsp+0x58]
   40d34:	mov    ecx,r13d
   40d37:	mov    esi,DWORD PTR [rsp+0x28]
   40d3b:	movzx  r12d,ax
   40d3f:	imul   r12d,DWORD PTR [rsp+0x20]
   40d45:	mov    r8d,ebp
   40d48:	mov    rdi,r14
   40d4b:	call   QWORD PTR [rip+0x4830f]        # 89060 <PelY_14>
   40d51:	movzx  eax,ax
   40d54:	imul   eax,ebx
   40d57:	add    r12d,eax
   40d5a:	mov    eax,DWORD PTR [rip+0x73454]        # b41b4 <wp_luma_round>
   40d60:	lea    edx,[r12+rax*2]
   40d64:	mov    eax,DWORD PTR [rip+0x733e6]        # b4150 <luma_log_weight_denom>
   40d6a:	lea    ecx,[rax+0x1]
   40d6d:	sar    edx,cl
   40d6f:	add    edx,DWORD PTR [rsp+0xc]
   40d73:	mov    rsi,QWORD PTR [rsp+0x10]
   40d78:	mov    rax,QWORD PTR [rsp+0x60]
   40d7d:	mov    r8d,ebp
   40d80:	mov    ecx,r13d
   40d83:	mov    rdi,r15
   40d86:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   40d8b:	mov    esi,DWORD PTR [rsp+0x30]
   40d8f:	sub    eax,edx
   40d91:	mov    DWORD PTR [rsp+0x148],eax
   40d98:	mov    eax,DWORD PTR [rsp+0x18]
   40d9c:	add    eax,0xc
   40d9f:	mov    edx,eax
   40da1:	mov    DWORD PTR [rsp+0x5c],eax
   40da5:	call   QWORD PTR [rip+0x482ad]        # 89058 <PelY_14b>
   40dab:	mov    r11d,DWORD PTR [rsp+0x24]
   40db0:	mov    ecx,r13d
   40db3:	mov    r8d,ebp
   40db6:	movzx  r12d,ax
   40dba:	mov    esi,DWORD PTR [rsp+0x28]
   40dbe:	imul   r12d,DWORD PTR [rsp+0x20]
   40dc4:	lea    edi,[r11+0xc]
   40dc8:	mov    edx,edi
   40dca:	mov    DWORD PTR [rsp+0x68],edi
   40dce:	mov    rdi,r14
   40dd1:	call   QWORD PTR [rip+0x48289]        # 89060 <PelY_14>
   40dd7:	mov    r10d,DWORD PTR [rip+0x73372]        # b4150 <luma_log_weight_denom>
   40dde:	xor    edx,edx
   40de0:	movzx  eax,ax
   40de3:	imul   eax,ebx
   40de6:	lea    ecx,[r10+0x1]
   40dea:	add    r12d,eax
   40ded:	mov    eax,DWORD PTR [rip+0x733c1]        # b41b4 <wp_luma_round>
   40df3:	lea    eax,[r12+rax*2]
   40df7:	sar    eax,cl
   40df9:	mov    r9d,eax
   40dfc:	add    r9d,DWORD PTR [rsp+0xc]
   40e01:	js     40ece <SubPelBlockSearchBiPred+0x352e>
   40e07:	mov    edx,DWORD PTR [rsp+0x5c]
   40e0b:	mov    esi,DWORD PTR [rsp+0x30]
   40e0f:	mov    r8d,ebp
   40e12:	mov    ecx,r13d
   40e15:	mov    rdi,r15
   40e18:	call   QWORD PTR [rip+0x4823a]        # 89058 <PelY_14b>
   40e1e:	mov    edx,DWORD PTR [rsp+0x68]
   40e22:	mov    ecx,r13d
   40e25:	mov    esi,DWORD PTR [rsp+0x28]
   40e29:	movzx  r12d,ax
   40e2d:	imul   r12d,DWORD PTR [rsp+0x20]
   40e33:	mov    r8d,ebp
   40e36:	mov    rdi,r14
   40e39:	call   QWORD PTR [rip+0x48221]        # 89060 <PelY_14>
   40e3f:	mov    rdx,QWORD PTR [rip+0x4776a]        # 885b0 <img>
   40e46:	mov    r9d,DWORD PTR [rip+0x73303]        # b4150 <luma_log_weight_denom>
   40e4d:	movzx  eax,ax
   40e50:	imul   eax,ebx
   40e53:	lea    ecx,[r9+0x1]
   40e57:	mov    edx,DWORD PTR [rdx+0x11bec]
   40e5d:	add    r12d,eax
   40e60:	mov    eax,DWORD PTR [rip+0x7334e]        # b41b4 <wp_luma_round>
   40e66:	lea    eax,[r12+rax*2]
   40e6a:	sar    eax,cl
   40e6c:	add    eax,DWORD PTR [rsp+0xc]
   40e70:	cmp    eax,edx
   40e72:	jg     40ece <SubPelBlockSearchBiPred+0x352e>
   40e74:	mov    edx,DWORD PTR [rsp+0x5c]
   40e78:	mov    esi,DWORD PTR [rsp+0x30]
   40e7c:	mov    r8d,ebp
   40e7f:	mov    ecx,r13d
   40e82:	mov    rdi,r15
   40e85:	call   QWORD PTR [rip+0x481cd]        # 89058 <PelY_14b>
   40e8b:	mov    edx,DWORD PTR [rsp+0x68]
   40e8f:	mov    ecx,r13d
   40e92:	mov    esi,DWORD PTR [rsp+0x28]
   40e96:	movzx  r12d,ax
   40e9a:	imul   r12d,DWORD PTR [rsp+0x20]
   40ea0:	mov    r8d,ebp
   40ea3:	mov    rdi,r14
   40ea6:	call   QWORD PTR [rip+0x481b4]        # 89060 <PelY_14>
   40eac:	movzx  eax,ax
   40eaf:	imul   eax,ebx
   40eb2:	add    r12d,eax
   40eb5:	mov    eax,DWORD PTR [rip+0x732f9]        # b41b4 <wp_luma_round>
   40ebb:	lea    edx,[r12+rax*2]
   40ebf:	mov    eax,DWORD PTR [rip+0x7328b]        # b4150 <luma_log_weight_denom>
   40ec5:	lea    ecx,[rax+0x1]
   40ec8:	sar    edx,cl
   40eca:	add    edx,DWORD PTR [rsp+0xc]
   40ece:	mov    rax,QWORD PTR [rsp+0x60]
   40ed3:	mov    rsi,QWORD PTR [rsp+0x10]
   40ed8:	mov    r8d,ebp
   40edb:	mov    ecx,r13d
   40ede:	mov    rdi,r15
   40ee1:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   40ee6:	mov    esi,DWORD PTR [rsp+0x34]
   40eea:	sub    eax,edx
   40eec:	mov    edx,DWORD PTR [rsp+0x18]
   40ef0:	mov    DWORD PTR [rsp+0x14c],eax
   40ef7:	mov    rax,QWORD PTR [rsp+0xa0]
   40eff:	mov    rax,QWORD PTR [rax]
   40f02:	mov    QWORD PTR [rsp+0x60],rax
   40f07:	call   QWORD PTR [rip+0x4814b]        # 89058 <PelY_14b>
   40f0d:	mov    edx,DWORD PTR [rsp+0x24]
   40f11:	mov    ecx,r13d
   40f14:	mov    esi,DWORD PTR [rsp+0x38]
   40f18:	movzx  r12d,ax
   40f1c:	imul   r12d,DWORD PTR [rsp+0x20]
   40f22:	mov    r8d,ebp
   40f25:	mov    rdi,r14
   40f28:	call   QWORD PTR [rip+0x48132]        # 89060 <PelY_14>
   40f2e:	mov    ecx,DWORD PTR [rip+0x7321c]        # b4150 <luma_log_weight_denom>
   40f34:	xor    edx,edx
   40f36:	movzx  eax,ax
   40f39:	imul   eax,ebx
   40f3c:	add    ecx,0x1
   40f3f:	add    r12d,eax
   40f42:	mov    eax,DWORD PTR [rip+0x7326c]        # b41b4 <wp_luma_round>
   40f48:	lea    eax,[r12+rax*2]
   40f4c:	sar    eax,cl
   40f4e:	mov    ecx,eax
   40f50:	add    ecx,DWORD PTR [rsp+0xc]
   40f54:	js     4101f <SubPelBlockSearchBiPred+0x367f>
   40f5a:	mov    edx,DWORD PTR [rsp+0x18]
   40f5e:	mov    esi,DWORD PTR [rsp+0x34]
   40f62:	mov    r8d,ebp
   40f65:	mov    ecx,r13d
   40f68:	mov    rdi,r15
   40f6b:	call   QWORD PTR [rip+0x480e7]        # 89058 <PelY_14b>
   40f71:	mov    edx,DWORD PTR [rsp+0x24]
   40f75:	mov    ecx,r13d
   40f78:	mov    esi,DWORD PTR [rsp+0x38]
   40f7c:	movzx  r12d,ax
   40f80:	imul   r12d,DWORD PTR [rsp+0x20]
   40f86:	mov    r8d,ebp
   40f89:	mov    rdi,r14
   40f8c:	call   QWORD PTR [rip+0x480ce]        # 89060 <PelY_14>
   40f92:	mov    rdx,QWORD PTR [rip+0x47617]        # 885b0 <img>
   40f99:	mov    ecx,DWORD PTR [rip+0x731b1]        # b4150 <luma_log_weight_denom>
   40f9f:	movzx  eax,ax
   40fa2:	imul   eax,ebx
   40fa5:	add    ecx,0x1
   40fa8:	mov    edx,DWORD PTR [rdx+0x11bec]
   40fae:	add    r12d,eax
   40fb1:	mov    eax,DWORD PTR [rip+0x731fd]        # b41b4 <wp_luma_round>
   40fb7:	lea    eax,[r12+rax*2]
   40fbb:	sar    eax,cl
   40fbd:	add    eax,DWORD PTR [rsp+0xc]
   40fc1:	cmp    eax,edx
   40fc3:	jg     4101f <SubPelBlockSearchBiPred+0x367f>
   40fc5:	mov    edx,DWORD PTR [rsp+0x18]
   40fc9:	mov    esi,DWORD PTR [rsp+0x34]
   40fcd:	mov    r8d,ebp
   40fd0:	mov    ecx,r13d
   40fd3:	mov    rdi,r15
   40fd6:	call   QWORD PTR [rip+0x4807c]        # 89058 <PelY_14b>
   40fdc:	mov    edx,DWORD PTR [rsp+0x24]
   40fe0:	mov    ecx,r13d
   40fe3:	mov    esi,DWORD PTR [rsp+0x38]
   40fe7:	movzx  r12d,ax
   40feb:	imul   r12d,DWORD PTR [rsp+0x20]
   40ff1:	mov    r8d,ebp
   40ff4:	mov    rdi,r14
   40ff7:	call   QWORD PTR [rip+0x48063]        # 89060 <PelY_14>
   40ffd:	movzx  eax,ax
   41000:	imul   eax,ebx
   41003:	add    r12d,eax
   41006:	mov    eax,DWORD PTR [rip+0x731a8]        # b41b4 <wp_luma_round>
   4100c:	lea    edx,[r12+rax*2]
   41010:	mov    eax,DWORD PTR [rip+0x7313a]        # b4150 <luma_log_weight_denom>
   41016:	lea    ecx,[rax+0x1]
   41019:	sar    edx,cl
   4101b:	add    edx,DWORD PTR [rsp+0xc]
   4101f:	mov    rsi,QWORD PTR [rsp+0x70]
   41024:	mov    rax,QWORD PTR [rsp+0x60]
   41029:	mov    r8d,ebp
   4102c:	mov    ecx,r13d
   4102f:	mov    rdi,r15
   41032:	movzx  eax,WORD PTR [rax+rsi*2]
   41036:	mov    esi,DWORD PTR [rsp+0x34]
   4103a:	sub    eax,edx
   4103c:	mov    edx,DWORD PTR [rsp+0x4c]
   41040:	mov    DWORD PTR [rsp+0x150],eax
   41047:	call   QWORD PTR [rip+0x4800b]        # 89058 <PelY_14b>
   4104d:	mov    edx,DWORD PTR [rsp+0x50]
   41051:	mov    ecx,r13d
   41054:	mov    rdi,r14
   41057:	movzx  r12d,ax
   4105b:	mov    esi,DWORD PTR [rsp+0x38]
   4105f:	imul   r12d,DWORD PTR [rsp+0x20]
   41065:	mov    r8d,ebp
   41068:	call   QWORD PTR [rip+0x47ff2]        # 89060 <PelY_14>
   4106e:	mov    edi,DWORD PTR [rip+0x730dc]        # b4150 <luma_log_weight_denom>
   41074:	xor    edx,edx
   41076:	movzx  eax,ax
   41079:	imul   eax,ebx
   4107c:	lea    ecx,[rdi+0x1]
   4107f:	add    r12d,eax
   41082:	mov    eax,DWORD PTR [rip+0x7312c]        # b41b4 <wp_luma_round>
   41088:	lea    eax,[r12+rax*2]
   4108c:	sar    eax,cl
   4108e:	mov    ecx,eax
   41090:	add    ecx,DWORD PTR [rsp+0xc]
   41094:	js     4115f <SubPelBlockSearchBiPred+0x37bf>
   4109a:	mov    edx,DWORD PTR [rsp+0x4c]
   4109e:	mov    esi,DWORD PTR [rsp+0x34]
   410a2:	mov    r8d,ebp
   410a5:	mov    ecx,r13d
   410a8:	mov    rdi,r15
   410ab:	call   QWORD PTR [rip+0x47fa7]        # 89058 <PelY_14b>
   410b1:	mov    edx,DWORD PTR [rsp+0x50]
   410b5:	mov    ecx,r13d
   410b8:	mov    esi,DWORD PTR [rsp+0x38]
   410bc:	movzx  r12d,ax
   410c0:	imul   r12d,DWORD PTR [rsp+0x20]
   410c6:	mov    r8d,ebp
   410c9:	mov    rdi,r14
   410cc:	call   QWORD PTR [rip+0x47f8e]        # 89060 <PelY_14>
   410d2:	mov    rdx,QWORD PTR [rip+0x474d7]        # 885b0 <img>
   410d9:	mov    ecx,DWORD PTR [rip+0x73071]        # b4150 <luma_log_weight_denom>
   410df:	movzx  eax,ax
   410e2:	imul   eax,ebx
   410e5:	add    ecx,0x1
   410e8:	mov    edx,DWORD PTR [rdx+0x11bec]
   410ee:	add    r12d,eax
   410f1:	mov    eax,DWORD PTR [rip+0x730bd]        # b41b4 <wp_luma_round>
   410f7:	lea    eax,[r12+rax*2]
   410fb:	sar    eax,cl
   410fd:	add    eax,DWORD PTR [rsp+0xc]
   41101:	cmp    eax,edx
   41103:	jg     4115f <SubPelBlockSearchBiPred+0x37bf>
   41105:	mov    edx,DWORD PTR [rsp+0x4c]
   41109:	mov    esi,DWORD PTR [rsp+0x34]
   4110d:	mov    r8d,ebp
   41110:	mov    ecx,r13d
   41113:	mov    rdi,r15
   41116:	call   QWORD PTR [rip+0x47f3c]        # 89058 <PelY_14b>
   4111c:	mov    edx,DWORD PTR [rsp+0x50]
   41120:	mov    ecx,r13d
   41123:	mov    esi,DWORD PTR [rsp+0x38]
   41127:	movzx  r12d,ax
   4112b:	imul   r12d,DWORD PTR [rsp+0x20]
   41131:	mov    r8d,ebp
   41134:	mov    rdi,r14
   41137:	call   QWORD PTR [rip+0x47f23]        # 89060 <PelY_14>
   4113d:	movzx  eax,ax
   41140:	imul   eax,ebx
   41143:	add    r12d,eax
   41146:	mov    eax,DWORD PTR [rip+0x73068]        # b41b4 <wp_luma_round>
   4114c:	lea    edx,[r12+rax*2]
   41150:	mov    eax,DWORD PTR [rip+0x72ffa]        # b4150 <luma_log_weight_denom>
   41156:	lea    ecx,[rax+0x1]
   41159:	sar    edx,cl
   4115b:	add    edx,DWORD PTR [rsp+0xc]
   4115f:	mov    rsi,QWORD PTR [rsp+0x10]
   41164:	mov    rax,QWORD PTR [rsp+0x60]
   41169:	mov    r8d,ebp
   4116c:	mov    ecx,r13d
   4116f:	mov    rdi,r15
   41172:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   41177:	mov    esi,DWORD PTR [rsp+0x34]
   4117b:	sub    eax,edx
   4117d:	mov    edx,DWORD PTR [rsp+0x54]
   41181:	mov    DWORD PTR [rsp+0x154],eax
   41188:	call   QWORD PTR [rip+0x47eca]        # 89058 <PelY_14b>
   4118e:	mov    edx,DWORD PTR [rsp+0x58]
   41192:	mov    ecx,r13d
   41195:	mov    rdi,r14
   41198:	movzx  r12d,ax
   4119c:	mov    esi,DWORD PTR [rsp+0x38]
   411a0:	imul   r12d,DWORD PTR [rsp+0x20]
   411a6:	mov    r8d,ebp
   411a9:	call   QWORD PTR [rip+0x47eb1]        # 89060 <PelY_14>
   411af:	mov    edi,DWORD PTR [rip+0x72f9b]        # b4150 <luma_log_weight_denom>
   411b5:	xor    edx,edx
   411b7:	movzx  eax,ax
   411ba:	imul   eax,ebx
   411bd:	lea    ecx,[rdi+0x1]
   411c0:	add    r12d,eax
   411c3:	mov    eax,DWORD PTR [rip+0x72feb]        # b41b4 <wp_luma_round>
   411c9:	lea    eax,[r12+rax*2]
   411cd:	sar    eax,cl
   411cf:	mov    ecx,eax
   411d1:	add    ecx,DWORD PTR [rsp+0xc]
   411d5:	js     412a0 <SubPelBlockSearchBiPred+0x3900>
   411db:	mov    edx,DWORD PTR [rsp+0x54]
   411df:	mov    esi,DWORD PTR [rsp+0x34]
   411e3:	mov    r8d,ebp
   411e6:	mov    ecx,r13d
   411e9:	mov    rdi,r15
   411ec:	call   QWORD PTR [rip+0x47e66]        # 89058 <PelY_14b>
   411f2:	mov    edx,DWORD PTR [rsp+0x58]
   411f6:	mov    ecx,r13d
   411f9:	mov    esi,DWORD PTR [rsp+0x38]
   411fd:	movzx  r12d,ax
   41201:	imul   r12d,DWORD PTR [rsp+0x20]
   41207:	mov    r8d,ebp
   4120a:	mov    rdi,r14
   4120d:	call   QWORD PTR [rip+0x47e4d]        # 89060 <PelY_14>
   41213:	mov    rdx,QWORD PTR [rip+0x47396]        # 885b0 <img>
   4121a:	mov    ecx,DWORD PTR [rip+0x72f30]        # b4150 <luma_log_weight_denom>
   41220:	movzx  eax,ax
   41223:	imul   eax,ebx
   41226:	add    ecx,0x1
   41229:	mov    edx,DWORD PTR [rdx+0x11bec]
   4122f:	add    r12d,eax
   41232:	mov    eax,DWORD PTR [rip+0x72f7c]        # b41b4 <wp_luma_round>
   41238:	lea    eax,[r12+rax*2]
   4123c:	sar    eax,cl
   4123e:	add    eax,DWORD PTR [rsp+0xc]
   41242:	cmp    eax,edx
   41244:	jg     412a0 <SubPelBlockSearchBiPred+0x3900>
   41246:	mov    edx,DWORD PTR [rsp+0x54]
   4124a:	mov    esi,DWORD PTR [rsp+0x34]
   4124e:	mov    r8d,ebp
   41251:	mov    ecx,r13d
   41254:	mov    rdi,r15
   41257:	call   QWORD PTR [rip+0x47dfb]        # 89058 <PelY_14b>
   4125d:	mov    edx,DWORD PTR [rsp+0x58]
   41261:	mov    ecx,r13d
   41264:	mov    esi,DWORD PTR [rsp+0x38]
   41268:	movzx  r12d,ax
   4126c:	imul   r12d,DWORD PTR [rsp+0x20]
   41272:	mov    r8d,ebp
   41275:	mov    rdi,r14
   41278:	call   QWORD PTR [rip+0x47de2]        # 89060 <PelY_14>
   4127e:	movzx  eax,ax
   41281:	imul   eax,ebx
   41284:	add    r12d,eax
   41287:	mov    eax,DWORD PTR [rip+0x72f27]        # b41b4 <wp_luma_round>
   4128d:	lea    edx,[r12+rax*2]
   41291:	mov    eax,DWORD PTR [rip+0x72eb9]        # b4150 <luma_log_weight_denom>
   41297:	lea    ecx,[rax+0x1]
   4129a:	sar    edx,cl
   4129c:	add    edx,DWORD PTR [rsp+0xc]
   412a0:	mov    rsi,QWORD PTR [rsp+0x10]
   412a5:	mov    rax,QWORD PTR [rsp+0x60]
   412aa:	mov    r8d,ebp
   412ad:	mov    ecx,r13d
   412b0:	mov    rdi,r15
   412b3:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   412b8:	mov    esi,DWORD PTR [rsp+0x34]
   412bc:	sub    eax,edx
   412be:	mov    edx,DWORD PTR [rsp+0x5c]
   412c2:	mov    DWORD PTR [rsp+0x158],eax
   412c9:	call   QWORD PTR [rip+0x47d89]        # 89058 <PelY_14b>
   412cf:	mov    edx,DWORD PTR [rsp+0x68]
   412d3:	mov    ecx,r13d
   412d6:	mov    rdi,r14
   412d9:	movzx  r12d,ax
   412dd:	mov    esi,DWORD PTR [rsp+0x38]
   412e1:	imul   r12d,DWORD PTR [rsp+0x20]
   412e7:	mov    r8d,ebp
   412ea:	call   QWORD PTR [rip+0x47d70]        # 89060 <PelY_14>
   412f0:	mov    edi,DWORD PTR [rip+0x72e5a]        # b4150 <luma_log_weight_denom>
   412f6:	xor    edx,edx
   412f8:	movzx  eax,ax
   412fb:	imul   eax,ebx
   412fe:	lea    ecx,[rdi+0x1]
   41301:	add    r12d,eax
   41304:	mov    eax,DWORD PTR [rip+0x72eaa]        # b41b4 <wp_luma_round>
   4130a:	lea    eax,[r12+rax*2]
   4130e:	sar    eax,cl
   41310:	mov    ecx,eax
   41312:	add    ecx,DWORD PTR [rsp+0xc]
   41316:	js     413e1 <SubPelBlockSearchBiPred+0x3a41>
   4131c:	mov    edx,DWORD PTR [rsp+0x5c]
   41320:	mov    esi,DWORD PTR [rsp+0x34]
   41324:	mov    r8d,ebp
   41327:	mov    ecx,r13d
   4132a:	mov    rdi,r15
   4132d:	call   QWORD PTR [rip+0x47d25]        # 89058 <PelY_14b>
   41333:	mov    edx,DWORD PTR [rsp+0x68]
   41337:	mov    ecx,r13d
   4133a:	mov    esi,DWORD PTR [rsp+0x38]
   4133e:	movzx  r12d,ax
   41342:	imul   r12d,DWORD PTR [rsp+0x20]
   41348:	mov    r8d,ebp
   4134b:	mov    rdi,r14
   4134e:	call   QWORD PTR [rip+0x47d0c]        # 89060 <PelY_14>
   41354:	mov    rdx,QWORD PTR [rip+0x47255]        # 885b0 <img>
   4135b:	mov    ecx,DWORD PTR [rip+0x72def]        # b4150 <luma_log_weight_denom>
   41361:	movzx  eax,ax
   41364:	imul   eax,ebx
   41367:	add    ecx,0x1
   4136a:	mov    edx,DWORD PTR [rdx+0x11bec]
   41370:	add    r12d,eax
   41373:	mov    eax,DWORD PTR [rip+0x72e3b]        # b41b4 <wp_luma_round>
   41379:	lea    eax,[r12+rax*2]
   4137d:	sar    eax,cl
   4137f:	add    eax,DWORD PTR [rsp+0xc]
   41383:	cmp    eax,edx
   41385:	jg     413e1 <SubPelBlockSearchBiPred+0x3a41>
   41387:	mov    edx,DWORD PTR [rsp+0x5c]
   4138b:	mov    esi,DWORD PTR [rsp+0x34]
   4138f:	mov    r8d,ebp
   41392:	mov    ecx,r13d
   41395:	mov    rdi,r15
   41398:	call   QWORD PTR [rip+0x47cba]        # 89058 <PelY_14b>
   4139e:	mov    edx,DWORD PTR [rsp+0x68]
   413a2:	mov    ecx,r13d
   413a5:	mov    esi,DWORD PTR [rsp+0x38]
   413a9:	movzx  r12d,ax
   413ad:	imul   r12d,DWORD PTR [rsp+0x20]
   413b3:	mov    r8d,ebp
   413b6:	mov    rdi,r14
   413b9:	call   QWORD PTR [rip+0x47ca1]        # 89060 <PelY_14>
   413bf:	movzx  eax,ax
   413c2:	imul   eax,ebx
   413c5:	add    r12d,eax
   413c8:	mov    eax,DWORD PTR [rip+0x72de6]        # b41b4 <wp_luma_round>
   413ce:	lea    edx,[r12+rax*2]
   413d2:	mov    eax,DWORD PTR [rip+0x72d78]        # b4150 <luma_log_weight_denom>
   413d8:	lea    ecx,[rax+0x1]
   413db:	sar    edx,cl
   413dd:	add    edx,DWORD PTR [rsp+0xc]
   413e1:	mov    rax,QWORD PTR [rsp+0x60]
   413e6:	mov    rsi,QWORD PTR [rsp+0x10]
   413eb:	mov    r8d,ebp
   413ee:	mov    ecx,r13d
   413f1:	mov    rdi,r15
   413f4:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   413f9:	mov    esi,DWORD PTR [rsp+0x3c]
   413fd:	sub    eax,edx
   413ff:	mov    edx,DWORD PTR [rsp+0x18]
   41403:	mov    DWORD PTR [rsp+0x15c],eax
   4140a:	mov    rax,QWORD PTR [rsp+0xa8]
   41412:	mov    rax,QWORD PTR [rax]
   41415:	mov    QWORD PTR [rsp+0x60],rax
   4141a:	call   QWORD PTR [rip+0x47c38]        # 89058 <PelY_14b>
   41420:	mov    edx,DWORD PTR [rsp+0x24]
   41424:	mov    ecx,r13d
   41427:	mov    rdi,r14
   4142a:	movzx  r12d,ax
   4142e:	mov    esi,DWORD PTR [rsp+0x40]
   41432:	imul   r12d,DWORD PTR [rsp+0x20]
   41438:	mov    r8d,ebp
   4143b:	call   QWORD PTR [rip+0x47c1f]        # 89060 <PelY_14>
   41441:	mov    edi,DWORD PTR [rip+0x72d09]        # b4150 <luma_log_weight_denom>
   41447:	xor    edx,edx
   41449:	movzx  eax,ax
   4144c:	imul   eax,ebx
   4144f:	lea    ecx,[rdi+0x1]
   41452:	add    r12d,eax
   41455:	mov    eax,DWORD PTR [rip+0x72d59]        # b41b4 <wp_luma_round>
   4145b:	lea    eax,[r12+rax*2]
   4145f:	sar    eax,cl
   41461:	mov    ecx,eax
   41463:	add    ecx,DWORD PTR [rsp+0xc]
   41467:	js     41532 <SubPelBlockSearchBiPred+0x3b92>
   4146d:	mov    edx,DWORD PTR [rsp+0x18]
   41471:	mov    esi,DWORD PTR [rsp+0x3c]
   41475:	mov    r8d,ebp
   41478:	mov    ecx,r13d
   4147b:	mov    rdi,r15
   4147e:	call   QWORD PTR [rip+0x47bd4]        # 89058 <PelY_14b>
   41484:	mov    edx,DWORD PTR [rsp+0x24]
   41488:	mov    ecx,r13d
   4148b:	mov    esi,DWORD PTR [rsp+0x40]
   4148f:	movzx  r12d,ax
   41493:	imul   r12d,DWORD PTR [rsp+0x20]
   41499:	mov    r8d,ebp
   4149c:	mov    rdi,r14
   4149f:	call   QWORD PTR [rip+0x47bbb]        # 89060 <PelY_14>
   414a5:	mov    rdx,QWORD PTR [rip+0x47104]        # 885b0 <img>
   414ac:	mov    ecx,DWORD PTR [rip+0x72c9e]        # b4150 <luma_log_weight_denom>
   414b2:	movzx  eax,ax
   414b5:	imul   eax,ebx
   414b8:	add    ecx,0x1
   414bb:	mov    edx,DWORD PTR [rdx+0x11bec]
   414c1:	add    r12d,eax
   414c4:	mov    eax,DWORD PTR [rip+0x72cea]        # b41b4 <wp_luma_round>
   414ca:	lea    eax,[r12+rax*2]
   414ce:	sar    eax,cl
   414d0:	add    eax,DWORD PTR [rsp+0xc]
   414d4:	cmp    eax,edx
   414d6:	jg     41532 <SubPelBlockSearchBiPred+0x3b92>
   414d8:	mov    edx,DWORD PTR [rsp+0x18]
   414dc:	mov    esi,DWORD PTR [rsp+0x3c]
   414e0:	mov    r8d,ebp
   414e3:	mov    ecx,r13d
   414e6:	mov    rdi,r15
   414e9:	call   QWORD PTR [rip+0x47b69]        # 89058 <PelY_14b>
   414ef:	mov    edx,DWORD PTR [rsp+0x24]
   414f3:	mov    ecx,r13d
   414f6:	mov    esi,DWORD PTR [rsp+0x40]
   414fa:	movzx  r12d,ax
   414fe:	imul   r12d,DWORD PTR [rsp+0x20]
   41504:	mov    r8d,ebp
   41507:	mov    rdi,r14
   4150a:	call   QWORD PTR [rip+0x47b50]        # 89060 <PelY_14>
   41510:	movzx  eax,ax
   41513:	imul   eax,ebx
   41516:	add    r12d,eax
   41519:	mov    eax,DWORD PTR [rip+0x72c95]        # b41b4 <wp_luma_round>
   4151f:	lea    edx,[r12+rax*2]
   41523:	mov    eax,DWORD PTR [rip+0x72c27]        # b4150 <luma_log_weight_denom>
   41529:	lea    ecx,[rax+0x1]
   4152c:	sar    edx,cl
   4152e:	add    edx,DWORD PTR [rsp+0xc]
   41532:	mov    rsi,QWORD PTR [rsp+0x70]
   41537:	mov    rax,QWORD PTR [rsp+0x60]
   4153c:	mov    r8d,ebp
   4153f:	mov    ecx,r13d
   41542:	mov    rdi,r15
   41545:	movzx  eax,WORD PTR [rax+rsi*2]
   41549:	mov    esi,DWORD PTR [rsp+0x3c]
   4154d:	sub    eax,edx
   4154f:	mov    edx,DWORD PTR [rsp+0x4c]
   41553:	mov    DWORD PTR [rsp+0x160],eax
   4155a:	call   QWORD PTR [rip+0x47af8]        # 89058 <PelY_14b>
   41560:	mov    edx,DWORD PTR [rsp+0x50]
   41564:	mov    ecx,r13d
   41567:	mov    rdi,r14
   4156a:	movzx  r12d,ax
   4156e:	mov    esi,DWORD PTR [rsp+0x40]
   41572:	imul   r12d,DWORD PTR [rsp+0x20]
   41578:	mov    r8d,ebp
   4157b:	call   QWORD PTR [rip+0x47adf]        # 89060 <PelY_14>
   41581:	mov    edi,DWORD PTR [rip+0x72bc9]        # b4150 <luma_log_weight_denom>
   41587:	xor    edx,edx
   41589:	movzx  eax,ax
   4158c:	imul   eax,ebx
   4158f:	lea    ecx,[rdi+0x1]
   41592:	add    r12d,eax
   41595:	mov    eax,DWORD PTR [rip+0x72c19]        # b41b4 <wp_luma_round>
   4159b:	lea    eax,[r12+rax*2]
   4159f:	sar    eax,cl
   415a1:	mov    ecx,eax
   415a3:	add    ecx,DWORD PTR [rsp+0xc]
   415a7:	js     41672 <SubPelBlockSearchBiPred+0x3cd2>
   415ad:	mov    edx,DWORD PTR [rsp+0x4c]
   415b1:	mov    esi,DWORD PTR [rsp+0x3c]
   415b5:	mov    r8d,ebp
   415b8:	mov    ecx,r13d
   415bb:	mov    rdi,r15
   415be:	call   QWORD PTR [rip+0x47a94]        # 89058 <PelY_14b>
   415c4:	mov    edx,DWORD PTR [rsp+0x50]
   415c8:	mov    ecx,r13d
   415cb:	mov    esi,DWORD PTR [rsp+0x40]
   415cf:	movzx  r12d,ax
   415d3:	imul   r12d,DWORD PTR [rsp+0x20]
   415d9:	mov    r8d,ebp
   415dc:	mov    rdi,r14
   415df:	call   QWORD PTR [rip+0x47a7b]        # 89060 <PelY_14>
   415e5:	mov    rdx,QWORD PTR [rip+0x46fc4]        # 885b0 <img>
   415ec:	mov    ecx,DWORD PTR [rip+0x72b5e]        # b4150 <luma_log_weight_denom>
   415f2:	movzx  eax,ax
   415f5:	imul   eax,ebx
   415f8:	add    ecx,0x1
   415fb:	mov    edx,DWORD PTR [rdx+0x11bec]
   41601:	add    r12d,eax
   41604:	mov    eax,DWORD PTR [rip+0x72baa]        # b41b4 <wp_luma_round>
   4160a:	lea    eax,[r12+rax*2]
   4160e:	sar    eax,cl
   41610:	add    eax,DWORD PTR [rsp+0xc]
   41614:	cmp    eax,edx
   41616:	jg     41672 <SubPelBlockSearchBiPred+0x3cd2>
   41618:	mov    edx,DWORD PTR [rsp+0x4c]
   4161c:	mov    esi,DWORD PTR [rsp+0x3c]
   41620:	mov    r8d,ebp
   41623:	mov    ecx,r13d
   41626:	mov    rdi,r15
   41629:	call   QWORD PTR [rip+0x47a29]        # 89058 <PelY_14b>
   4162f:	mov    edx,DWORD PTR [rsp+0x50]
   41633:	mov    ecx,r13d
   41636:	mov    esi,DWORD PTR [rsp+0x40]
   4163a:	movzx  r12d,ax
   4163e:	imul   r12d,DWORD PTR [rsp+0x20]
   41644:	mov    r8d,ebp
   41647:	mov    rdi,r14
   4164a:	call   QWORD PTR [rip+0x47a10]        # 89060 <PelY_14>
   41650:	movzx  eax,ax
   41653:	imul   eax,ebx
   41656:	add    r12d,eax
   41659:	mov    eax,DWORD PTR [rip+0x72b55]        # b41b4 <wp_luma_round>
   4165f:	lea    edx,[r12+rax*2]
   41663:	mov    eax,DWORD PTR [rip+0x72ae7]        # b4150 <luma_log_weight_denom>
   41669:	lea    ecx,[rax+0x1]
   4166c:	sar    edx,cl
   4166e:	add    edx,DWORD PTR [rsp+0xc]
   41672:	mov    rsi,QWORD PTR [rsp+0x10]
   41677:	mov    rax,QWORD PTR [rsp+0x60]
   4167c:	mov    r8d,ebp
   4167f:	mov    ecx,r13d
   41682:	mov    rdi,r15
   41685:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   4168a:	mov    esi,DWORD PTR [rsp+0x3c]
   4168e:	sub    eax,edx
   41690:	mov    edx,DWORD PTR [rsp+0x54]
   41694:	mov    DWORD PTR [rsp+0x164],eax
   4169b:	call   QWORD PTR [rip+0x479b7]        # 89058 <PelY_14b>
   416a1:	mov    edx,DWORD PTR [rsp+0x58]
   416a5:	mov    ecx,r13d
   416a8:	mov    rdi,r14
   416ab:	movzx  r12d,ax
   416af:	mov    esi,DWORD PTR [rsp+0x40]
   416b3:	imul   r12d,DWORD PTR [rsp+0x20]
   416b9:	mov    r8d,ebp
   416bc:	call   QWORD PTR [rip+0x4799e]        # 89060 <PelY_14>
   416c2:	mov    edi,DWORD PTR [rip+0x72a88]        # b4150 <luma_log_weight_denom>
   416c8:	xor    edx,edx
   416ca:	movzx  eax,ax
   416cd:	imul   eax,ebx
   416d0:	lea    ecx,[rdi+0x1]
   416d3:	add    r12d,eax
   416d6:	mov    eax,DWORD PTR [rip+0x72ad8]        # b41b4 <wp_luma_round>
   416dc:	lea    eax,[r12+rax*2]
   416e0:	sar    eax,cl
   416e2:	mov    ecx,eax
   416e4:	add    ecx,DWORD PTR [rsp+0xc]
   416e8:	js     417b3 <SubPelBlockSearchBiPred+0x3e13>
   416ee:	mov    edx,DWORD PTR [rsp+0x54]
   416f2:	mov    esi,DWORD PTR [rsp+0x3c]
   416f6:	mov    r8d,ebp
   416f9:	mov    ecx,r13d
   416fc:	mov    rdi,r15
   416ff:	call   QWORD PTR [rip+0x47953]        # 89058 <PelY_14b>
   41705:	mov    edx,DWORD PTR [rsp+0x58]
   41709:	mov    ecx,r13d
   4170c:	mov    esi,DWORD PTR [rsp+0x40]
   41710:	movzx  r12d,ax
   41714:	imul   r12d,DWORD PTR [rsp+0x20]
   4171a:	mov    r8d,ebp
   4171d:	mov    rdi,r14
   41720:	call   QWORD PTR [rip+0x4793a]        # 89060 <PelY_14>
   41726:	mov    rdx,QWORD PTR [rip+0x46e83]        # 885b0 <img>
   4172d:	mov    ecx,DWORD PTR [rip+0x72a1d]        # b4150 <luma_log_weight_denom>
   41733:	movzx  eax,ax
   41736:	imul   eax,ebx
   41739:	add    ecx,0x1
   4173c:	mov    edx,DWORD PTR [rdx+0x11bec]
   41742:	add    r12d,eax
   41745:	mov    eax,DWORD PTR [rip+0x72a69]        # b41b4 <wp_luma_round>
   4174b:	lea    eax,[r12+rax*2]
   4174f:	sar    eax,cl
   41751:	add    eax,DWORD PTR [rsp+0xc]
   41755:	cmp    eax,edx
   41757:	jg     417b3 <SubPelBlockSearchBiPred+0x3e13>
   41759:	mov    edx,DWORD PTR [rsp+0x54]
   4175d:	mov    esi,DWORD PTR [rsp+0x3c]
   41761:	mov    r8d,ebp
   41764:	mov    ecx,r13d
   41767:	mov    rdi,r15
   4176a:	call   QWORD PTR [rip+0x478e8]        # 89058 <PelY_14b>
   41770:	mov    edx,DWORD PTR [rsp+0x58]
   41774:	mov    ecx,r13d
   41777:	mov    esi,DWORD PTR [rsp+0x40]
   4177b:	movzx  r12d,ax
   4177f:	imul   r12d,DWORD PTR [rsp+0x20]
   41785:	mov    r8d,ebp
   41788:	mov    rdi,r14
   4178b:	call   QWORD PTR [rip+0x478cf]        # 89060 <PelY_14>
   41791:	movzx  eax,ax
   41794:	imul   eax,ebx
   41797:	add    r12d,eax
   4179a:	mov    eax,DWORD PTR [rip+0x72a14]        # b41b4 <wp_luma_round>
   417a0:	lea    edx,[r12+rax*2]
   417a4:	mov    eax,DWORD PTR [rip+0x729a6]        # b4150 <luma_log_weight_denom>
   417aa:	lea    ecx,[rax+0x1]
   417ad:	sar    edx,cl
   417af:	add    edx,DWORD PTR [rsp+0xc]
   417b3:	mov    rsi,QWORD PTR [rsp+0x10]
   417b8:	mov    rax,QWORD PTR [rsp+0x60]
   417bd:	mov    r8d,ebp
   417c0:	mov    ecx,r13d
   417c3:	mov    rdi,r15
   417c6:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   417cb:	mov    esi,DWORD PTR [rsp+0x3c]
   417cf:	sub    eax,edx
   417d1:	mov    edx,DWORD PTR [rsp+0x5c]
   417d5:	mov    DWORD PTR [rsp+0x168],eax
   417dc:	call   QWORD PTR [rip+0x47876]        # 89058 <PelY_14b>
   417e2:	mov    edx,DWORD PTR [rsp+0x68]
   417e6:	mov    ecx,r13d
   417e9:	mov    rdi,r14
   417ec:	movzx  r12d,ax
   417f0:	mov    esi,DWORD PTR [rsp+0x40]
   417f4:	imul   r12d,DWORD PTR [rsp+0x20]
   417fa:	mov    r8d,ebp
   417fd:	call   QWORD PTR [rip+0x4785d]        # 89060 <PelY_14>
   41803:	mov    edi,DWORD PTR [rip+0x72947]        # b4150 <luma_log_weight_denom>
   41809:	xor    edx,edx
   4180b:	movzx  eax,ax
   4180e:	imul   eax,ebx
   41811:	lea    ecx,[rdi+0x1]
   41814:	add    r12d,eax
   41817:	mov    eax,DWORD PTR [rip+0x72997]        # b41b4 <wp_luma_round>
   4181d:	lea    eax,[r12+rax*2]
   41821:	sar    eax,cl
   41823:	mov    ecx,eax
   41825:	add    ecx,DWORD PTR [rsp+0xc]
   41829:	js     418f4 <SubPelBlockSearchBiPred+0x3f54>
   4182f:	mov    edx,DWORD PTR [rsp+0x5c]
   41833:	mov    esi,DWORD PTR [rsp+0x3c]
   41837:	mov    r8d,ebp
   4183a:	mov    ecx,r13d
   4183d:	mov    rdi,r15
   41840:	call   QWORD PTR [rip+0x47812]        # 89058 <PelY_14b>
   41846:	mov    edx,DWORD PTR [rsp+0x68]
   4184a:	mov    ecx,r13d
   4184d:	mov    esi,DWORD PTR [rsp+0x40]
   41851:	movzx  r12d,ax
   41855:	imul   r12d,DWORD PTR [rsp+0x20]
   4185b:	mov    r8d,ebp
   4185e:	mov    rdi,r14
   41861:	call   QWORD PTR [rip+0x477f9]        # 89060 <PelY_14>
   41867:	mov    rdx,QWORD PTR [rip+0x46d42]        # 885b0 <img>
   4186e:	mov    ecx,DWORD PTR [rip+0x728dc]        # b4150 <luma_log_weight_denom>
   41874:	movzx  eax,ax
   41877:	imul   eax,ebx
   4187a:	add    ecx,0x1
   4187d:	mov    edx,DWORD PTR [rdx+0x11bec]
   41883:	add    r12d,eax
   41886:	mov    eax,DWORD PTR [rip+0x72928]        # b41b4 <wp_luma_round>
   4188c:	lea    eax,[r12+rax*2]
   41890:	sar    eax,cl
   41892:	add    eax,DWORD PTR [rsp+0xc]
   41896:	cmp    eax,edx
   41898:	jg     418f4 <SubPelBlockSearchBiPred+0x3f54>
   4189a:	mov    edx,DWORD PTR [rsp+0x5c]
   4189e:	mov    esi,DWORD PTR [rsp+0x3c]
   418a2:	mov    r8d,ebp
   418a5:	mov    ecx,r13d
   418a8:	mov    rdi,r15
   418ab:	call   QWORD PTR [rip+0x477a7]        # 89058 <PelY_14b>
   418b1:	mov    edx,DWORD PTR [rsp+0x68]
   418b5:	mov    ecx,r13d
   418b8:	mov    esi,DWORD PTR [rsp+0x40]
   418bc:	movzx  r12d,ax
   418c0:	imul   r12d,DWORD PTR [rsp+0x20]
   418c6:	mov    r8d,ebp
   418c9:	mov    rdi,r14
   418cc:	call   QWORD PTR [rip+0x4778e]        # 89060 <PelY_14>
   418d2:	movzx  eax,ax
   418d5:	imul   eax,ebx
   418d8:	add    r12d,eax
   418db:	mov    eax,DWORD PTR [rip+0x728d3]        # b41b4 <wp_luma_round>
   418e1:	lea    edx,[r12+rax*2]
   418e5:	mov    eax,DWORD PTR [rip+0x72865]        # b4150 <luma_log_weight_denom>
   418eb:	lea    ecx,[rax+0x1]
   418ee:	sar    edx,cl
   418f0:	add    edx,DWORD PTR [rsp+0xc]
   418f4:	mov    rax,QWORD PTR [rsp+0x60]
   418f9:	mov    rsi,QWORD PTR [rsp+0x10]
   418fe:	mov    r8d,ebp
   41901:	mov    ecx,r13d
   41904:	mov    rdi,r15
   41907:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   4190c:	mov    esi,DWORD PTR [rsp+0x44]
   41910:	sub    eax,edx
   41912:	mov    edx,DWORD PTR [rsp+0x18]
   41916:	mov    DWORD PTR [rsp+0x16c],eax
   4191d:	mov    rax,QWORD PTR [rsp+0xb0]
   41925:	mov    rax,QWORD PTR [rax]
   41928:	mov    QWORD PTR [rsp+0x60],rax
   4192d:	call   QWORD PTR [rip+0x47725]        # 89058 <PelY_14b>
   41933:	mov    edx,DWORD PTR [rsp+0x24]
   41937:	mov    ecx,r13d
   4193a:	mov    rdi,r14
   4193d:	movzx  r12d,ax
   41941:	mov    esi,DWORD PTR [rsp+0x48]
   41945:	imul   r12d,DWORD PTR [rsp+0x20]
   4194b:	mov    r8d,ebp
   4194e:	call   QWORD PTR [rip+0x4770c]        # 89060 <PelY_14>
   41954:	mov    edi,DWORD PTR [rip+0x727f6]        # b4150 <luma_log_weight_denom>
   4195a:	xor    edx,edx
   4195c:	movzx  eax,ax
   4195f:	imul   eax,ebx
   41962:	lea    ecx,[rdi+0x1]
   41965:	add    r12d,eax
   41968:	mov    eax,DWORD PTR [rip+0x72846]        # b41b4 <wp_luma_round>
   4196e:	lea    eax,[r12+rax*2]
   41972:	sar    eax,cl
   41974:	mov    ecx,eax
   41976:	add    ecx,DWORD PTR [rsp+0xc]
   4197a:	js     41a45 <SubPelBlockSearchBiPred+0x40a5>
   41980:	mov    edx,DWORD PTR [rsp+0x18]
   41984:	mov    esi,DWORD PTR [rsp+0x44]
   41988:	mov    r8d,ebp
   4198b:	mov    ecx,r13d
   4198e:	mov    rdi,r15
   41991:	call   QWORD PTR [rip+0x476c1]        # 89058 <PelY_14b>
   41997:	mov    edx,DWORD PTR [rsp+0x24]
   4199b:	mov    ecx,r13d
   4199e:	mov    esi,DWORD PTR [rsp+0x48]
   419a2:	movzx  r12d,ax
   419a6:	imul   r12d,DWORD PTR [rsp+0x20]
   419ac:	mov    r8d,ebp
   419af:	mov    rdi,r14
   419b2:	call   QWORD PTR [rip+0x476a8]        # 89060 <PelY_14>
   419b8:	mov    rdx,QWORD PTR [rip+0x46bf1]        # 885b0 <img>
   419bf:	mov    ecx,DWORD PTR [rip+0x7278b]        # b4150 <luma_log_weight_denom>
   419c5:	movzx  eax,ax
   419c8:	imul   eax,ebx
   419cb:	add    ecx,0x1
   419ce:	mov    edx,DWORD PTR [rdx+0x11bec]
   419d4:	add    r12d,eax
   419d7:	mov    eax,DWORD PTR [rip+0x727d7]        # b41b4 <wp_luma_round>
   419dd:	lea    eax,[r12+rax*2]
   419e1:	sar    eax,cl
   419e3:	add    eax,DWORD PTR [rsp+0xc]
   419e7:	cmp    eax,edx
   419e9:	jg     41a45 <SubPelBlockSearchBiPred+0x40a5>
   419eb:	mov    edx,DWORD PTR [rsp+0x18]
   419ef:	mov    esi,DWORD PTR [rsp+0x44]
   419f3:	mov    r8d,ebp
   419f6:	mov    ecx,r13d
   419f9:	mov    rdi,r15
   419fc:	call   QWORD PTR [rip+0x47656]        # 89058 <PelY_14b>
   41a02:	mov    edx,DWORD PTR [rsp+0x24]
   41a06:	mov    ecx,r13d
   41a09:	mov    esi,DWORD PTR [rsp+0x48]
   41a0d:	movzx  r12d,ax
   41a11:	imul   r12d,DWORD PTR [rsp+0x20]
   41a17:	mov    r8d,ebp
   41a1a:	mov    rdi,r14
   41a1d:	call   QWORD PTR [rip+0x4763d]        # 89060 <PelY_14>
   41a23:	movzx  eax,ax
   41a26:	imul   eax,ebx
   41a29:	add    r12d,eax
   41a2c:	mov    eax,DWORD PTR [rip+0x72782]        # b41b4 <wp_luma_round>
   41a32:	lea    edx,[r12+rax*2]
   41a36:	mov    eax,DWORD PTR [rip+0x72714]        # b4150 <luma_log_weight_denom>
   41a3c:	lea    ecx,[rax+0x1]
   41a3f:	sar    edx,cl
   41a41:	add    edx,DWORD PTR [rsp+0xc]
   41a45:	mov    rsi,QWORD PTR [rsp+0x70]
   41a4a:	mov    rax,QWORD PTR [rsp+0x60]
   41a4f:	mov    r8d,ebp
   41a52:	mov    ecx,r13d
   41a55:	mov    rdi,r15
   41a58:	movzx  eax,WORD PTR [rax+rsi*2]
   41a5c:	mov    esi,DWORD PTR [rsp+0x44]
   41a60:	sub    eax,edx
   41a62:	mov    edx,DWORD PTR [rsp+0x4c]
   41a66:	mov    DWORD PTR [rsp+0x170],eax
   41a6d:	call   QWORD PTR [rip+0x475e5]        # 89058 <PelY_14b>
   41a73:	mov    edx,DWORD PTR [rsp+0x50]
   41a77:	mov    ecx,r13d
   41a7a:	mov    rdi,r14
   41a7d:	movzx  r12d,ax
   41a81:	mov    esi,DWORD PTR [rsp+0x48]
   41a85:	imul   r12d,DWORD PTR [rsp+0x20]
   41a8b:	mov    r8d,ebp
   41a8e:	call   QWORD PTR [rip+0x475cc]        # 89060 <PelY_14>
   41a94:	mov    edi,DWORD PTR [rip+0x726b6]        # b4150 <luma_log_weight_denom>
   41a9a:	xor    edx,edx
   41a9c:	movzx  eax,ax
   41a9f:	imul   eax,ebx
   41aa2:	lea    ecx,[rdi+0x1]
   41aa5:	add    r12d,eax
   41aa8:	mov    eax,DWORD PTR [rip+0x72706]        # b41b4 <wp_luma_round>
   41aae:	lea    eax,[r12+rax*2]
   41ab2:	sar    eax,cl
   41ab4:	mov    ecx,eax
   41ab6:	add    ecx,DWORD PTR [rsp+0xc]
   41aba:	js     41b85 <SubPelBlockSearchBiPred+0x41e5>
   41ac0:	mov    edx,DWORD PTR [rsp+0x4c]
   41ac4:	mov    esi,DWORD PTR [rsp+0x44]
   41ac8:	mov    r8d,ebp
   41acb:	mov    ecx,r13d
   41ace:	mov    rdi,r15
   41ad1:	call   QWORD PTR [rip+0x47581]        # 89058 <PelY_14b>
   41ad7:	mov    edx,DWORD PTR [rsp+0x50]
   41adb:	mov    ecx,r13d
   41ade:	mov    esi,DWORD PTR [rsp+0x48]
   41ae2:	movzx  r12d,ax
   41ae6:	imul   r12d,DWORD PTR [rsp+0x20]
   41aec:	mov    r8d,ebp
   41aef:	mov    rdi,r14
   41af2:	call   QWORD PTR [rip+0x47568]        # 89060 <PelY_14>
   41af8:	mov    rdx,QWORD PTR [rip+0x46ab1]        # 885b0 <img>
   41aff:	mov    ecx,DWORD PTR [rip+0x7264b]        # b4150 <luma_log_weight_denom>
   41b05:	movzx  eax,ax
   41b08:	imul   eax,ebx
   41b0b:	add    ecx,0x1
   41b0e:	mov    edx,DWORD PTR [rdx+0x11bec]
   41b14:	add    r12d,eax
   41b17:	mov    eax,DWORD PTR [rip+0x72697]        # b41b4 <wp_luma_round>
   41b1d:	lea    eax,[r12+rax*2]
   41b21:	sar    eax,cl
   41b23:	add    eax,DWORD PTR [rsp+0xc]
   41b27:	cmp    eax,edx
   41b29:	jg     41b85 <SubPelBlockSearchBiPred+0x41e5>
   41b2b:	mov    edx,DWORD PTR [rsp+0x4c]
   41b2f:	mov    esi,DWORD PTR [rsp+0x44]
   41b33:	mov    r8d,ebp
   41b36:	mov    ecx,r13d
   41b39:	mov    rdi,r15
   41b3c:	call   QWORD PTR [rip+0x47516]        # 89058 <PelY_14b>
   41b42:	mov    edx,DWORD PTR [rsp+0x50]
   41b46:	mov    ecx,r13d
   41b49:	mov    esi,DWORD PTR [rsp+0x48]
   41b4d:	movzx  r12d,ax
   41b51:	imul   r12d,DWORD PTR [rsp+0x20]
   41b57:	mov    r8d,ebp
   41b5a:	mov    rdi,r14
   41b5d:	call   QWORD PTR [rip+0x474fd]        # 89060 <PelY_14>
   41b63:	movzx  eax,ax
   41b66:	imul   eax,ebx
   41b69:	add    r12d,eax
   41b6c:	mov    eax,DWORD PTR [rip+0x72642]        # b41b4 <wp_luma_round>
   41b72:	lea    edx,[r12+rax*2]
   41b76:	mov    eax,DWORD PTR [rip+0x725d4]        # b4150 <luma_log_weight_denom>
   41b7c:	lea    ecx,[rax+0x1]
   41b7f:	sar    edx,cl
   41b81:	add    edx,DWORD PTR [rsp+0xc]
   41b85:	mov    rsi,QWORD PTR [rsp+0x10]
   41b8a:	mov    rax,QWORD PTR [rsp+0x60]
   41b8f:	mov    r8d,ebp
   41b92:	mov    ecx,r13d
   41b95:	mov    rdi,r15
   41b98:	movzx  eax,WORD PTR [rax+rsi*1+0x2]
   41b9d:	mov    esi,DWORD PTR [rsp+0x44]
   41ba1:	sub    eax,edx
   41ba3:	mov    edx,DWORD PTR [rsp+0x54]
   41ba7:	mov    DWORD PTR [rsp+0x174],eax
   41bae:	call   QWORD PTR [rip+0x474a4]        # 89058 <PelY_14b>
   41bb4:	mov    edx,DWORD PTR [rsp+0x58]
   41bb8:	mov    ecx,r13d
   41bbb:	mov    rdi,r14
   41bbe:	movzx  r12d,ax
   41bc2:	mov    esi,DWORD PTR [rsp+0x48]
   41bc6:	imul   r12d,DWORD PTR [rsp+0x20]
   41bcc:	mov    r8d,ebp
   41bcf:	call   QWORD PTR [rip+0x4748b]        # 89060 <PelY_14>
   41bd5:	mov    edi,DWORD PTR [rip+0x72575]        # b4150 <luma_log_weight_denom>
   41bdb:	xor    edx,edx
   41bdd:	movzx  eax,ax
   41be0:	imul   eax,ebx
   41be3:	lea    ecx,[rdi+0x1]
   41be6:	add    r12d,eax
   41be9:	mov    eax,DWORD PTR [rip+0x725c5]        # b41b4 <wp_luma_round>
   41bef:	lea    eax,[r12+rax*2]
   41bf3:	sar    eax,cl
   41bf5:	mov    ecx,eax
   41bf7:	add    ecx,DWORD PTR [rsp+0xc]
   41bfb:	js     41cc6 <SubPelBlockSearchBiPred+0x4326>
   41c01:	mov    edx,DWORD PTR [rsp+0x54]
   41c05:	mov    esi,DWORD PTR [rsp+0x44]
   41c09:	mov    r8d,ebp
   41c0c:	mov    ecx,r13d
   41c0f:	mov    rdi,r15
   41c12:	call   QWORD PTR [rip+0x47440]        # 89058 <PelY_14b>
   41c18:	mov    edx,DWORD PTR [rsp+0x58]
   41c1c:	mov    ecx,r13d
   41c1f:	mov    esi,DWORD PTR [rsp+0x48]
   41c23:	movzx  r12d,ax
   41c27:	imul   r12d,DWORD PTR [rsp+0x20]
   41c2d:	mov    r8d,ebp
   41c30:	mov    rdi,r14
   41c33:	call   QWORD PTR [rip+0x47427]        # 89060 <PelY_14>
   41c39:	mov    rdx,QWORD PTR [rip+0x46970]        # 885b0 <img>
   41c40:	mov    ecx,DWORD PTR [rip+0x7250a]        # b4150 <luma_log_weight_denom>
   41c46:	movzx  eax,ax
   41c49:	imul   eax,ebx
   41c4c:	add    ecx,0x1
   41c4f:	mov    edx,DWORD PTR [rdx+0x11bec]
   41c55:	add    r12d,eax
   41c58:	mov    eax,DWORD PTR [rip+0x72556]        # b41b4 <wp_luma_round>
   41c5e:	lea    eax,[r12+rax*2]
   41c62:	sar    eax,cl
   41c64:	add    eax,DWORD PTR [rsp+0xc]
   41c68:	cmp    eax,edx
   41c6a:	jg     41cc6 <SubPelBlockSearchBiPred+0x4326>
   41c6c:	mov    edx,DWORD PTR [rsp+0x54]
   41c70:	mov    esi,DWORD PTR [rsp+0x44]
   41c74:	mov    r8d,ebp
   41c77:	mov    ecx,r13d
   41c7a:	mov    rdi,r15
   41c7d:	call   QWORD PTR [rip+0x473d5]        # 89058 <PelY_14b>
   41c83:	mov    edx,DWORD PTR [rsp+0x58]
   41c87:	mov    ecx,r13d
   41c8a:	mov    esi,DWORD PTR [rsp+0x48]
   41c8e:	movzx  r12d,ax
   41c92:	imul   r12d,DWORD PTR [rsp+0x20]
   41c98:	mov    r8d,ebp
   41c9b:	mov    rdi,r14
   41c9e:	call   QWORD PTR [rip+0x473bc]        # 89060 <PelY_14>
   41ca4:	movzx  eax,ax
   41ca7:	imul   eax,ebx
   41caa:	add    r12d,eax
   41cad:	mov    eax,DWORD PTR [rip+0x72501]        # b41b4 <wp_luma_round>
   41cb3:	lea    edx,[r12+rax*2]
   41cb7:	mov    eax,DWORD PTR [rip+0x72493]        # b4150 <luma_log_weight_denom>
   41cbd:	lea    ecx,[rax+0x1]
   41cc0:	sar    edx,cl
   41cc2:	add    edx,DWORD PTR [rsp+0xc]
   41cc6:	mov    rsi,QWORD PTR [rsp+0x10]
   41ccb:	mov    rax,QWORD PTR [rsp+0x60]
   41cd0:	mov    r8d,ebp
   41cd3:	mov    ecx,r13d
   41cd6:	mov    rdi,r15
   41cd9:	movzx  eax,WORD PTR [rax+rsi*1+0x4]
   41cde:	mov    esi,DWORD PTR [rsp+0x44]
   41ce2:	sub    eax,edx
   41ce4:	mov    edx,DWORD PTR [rsp+0x5c]
   41ce8:	mov    DWORD PTR [rsp+0x178],eax
   41cef:	call   QWORD PTR [rip+0x47363]        # 89058 <PelY_14b>
   41cf5:	mov    edx,DWORD PTR [rsp+0x68]
   41cf9:	mov    ecx,r13d
   41cfc:	mov    rdi,r14
   41cff:	movzx  r12d,ax
   41d03:	mov    esi,DWORD PTR [rsp+0x48]
   41d07:	imul   r12d,DWORD PTR [rsp+0x20]
   41d0d:	mov    r8d,ebp
   41d10:	call   QWORD PTR [rip+0x4734a]        # 89060 <PelY_14>
   41d16:	mov    edi,DWORD PTR [rip+0x72434]        # b4150 <luma_log_weight_denom>
   41d1c:	xor    edx,edx
   41d1e:	movzx  eax,ax
   41d21:	imul   eax,ebx
   41d24:	lea    ecx,[rdi+0x1]
   41d27:	add    r12d,eax
   41d2a:	mov    eax,DWORD PTR [rip+0x72484]        # b41b4 <wp_luma_round>
   41d30:	lea    eax,[r12+rax*2]
   41d34:	sar    eax,cl
   41d36:	mov    edi,eax
   41d38:	add    edi,DWORD PTR [rsp+0xc]
   41d3c:	js     41e07 <SubPelBlockSearchBiPred+0x4467>
   41d42:	mov    edx,DWORD PTR [rsp+0x5c]
   41d46:	mov    esi,DWORD PTR [rsp+0x44]
   41d4a:	mov    r8d,ebp
   41d4d:	mov    ecx,r13d
   41d50:	mov    rdi,r15
   41d53:	call   QWORD PTR [rip+0x472ff]        # 89058 <PelY_14b>
   41d59:	mov    edx,DWORD PTR [rsp+0x68]
   41d5d:	mov    ecx,r13d
   41d60:	mov    rdi,r14
   41d63:	movzx  r12d,ax
   41d67:	mov    esi,DWORD PTR [rsp+0x48]
   41d6b:	imul   r12d,DWORD PTR [rsp+0x20]
   41d71:	mov    r8d,ebp
   41d74:	call   QWORD PTR [rip+0x472e6]        # 89060 <PelY_14>
   41d7a:	mov    rdx,QWORD PTR [rip+0x4682f]        # 885b0 <img>
   41d81:	mov    edi,DWORD PTR [rip+0x723c9]        # b4150 <luma_log_weight_denom>
   41d87:	movzx  eax,ax
   41d8a:	imul   eax,ebx
   41d8d:	lea    ecx,[rdi+0x1]
   41d90:	mov    edx,DWORD PTR [rdx+0x11bec]
   41d96:	add    r12d,eax
   41d99:	mov    eax,DWORD PTR [rip+0x72415]        # b41b4 <wp_luma_round>
   41d9f:	lea    eax,[r12+rax*2]
   41da3:	sar    eax,cl
   41da5:	add    eax,DWORD PTR [rsp+0xc]
   41da9:	cmp    eax,edx
   41dab:	jg     41e07 <SubPelBlockSearchBiPred+0x4467>
   41dad:	mov    edx,DWORD PTR [rsp+0x5c]
   41db1:	mov    esi,DWORD PTR [rsp+0x44]
   41db5:	mov    r8d,ebp
   41db8:	mov    ecx,r13d
   41dbb:	mov    rdi,r15
   41dbe:	call   QWORD PTR [rip+0x47294]        # 89058 <PelY_14b>
   41dc4:	mov    edx,DWORD PTR [rsp+0x68]
   41dc8:	mov    ecx,r13d
   41dcb:	mov    esi,DWORD PTR [rsp+0x48]
   41dcf:	movzx  r12d,ax
   41dd3:	imul   r12d,DWORD PTR [rsp+0x20]
   41dd9:	mov    r8d,ebp
   41ddc:	mov    rdi,r14
   41ddf:	call   QWORD PTR [rip+0x4727b]        # 89060 <PelY_14>
   41de5:	movzx  eax,ax
   41de8:	imul   eax,ebx
   41deb:	add    r12d,eax
   41dee:	mov    eax,DWORD PTR [rip+0x723c0]        # b41b4 <wp_luma_round>
   41df4:	lea    edx,[r12+rax*2]
   41df8:	mov    eax,DWORD PTR [rip+0x72352]        # b4150 <luma_log_weight_denom>
   41dfe:	lea    ecx,[rax+0x1]
   41e01:	sar    edx,cl
   41e03:	add    edx,DWORD PTR [rsp+0xc]
   41e07:	mov    rsi,QWORD PTR [rsp+0x10]
   41e0c:	mov    rax,QWORD PTR [rsp+0x60]
   41e11:	movzx  eax,WORD PTR [rax+rsi*1+0x6]
   41e16:	sub    eax,edx
   41e18:	mov    DWORD PTR [rsp+0x17c],eax
   41e1f:	mov    rax,QWORD PTR [rip+0x46792]        # 885b8 <input>
   41e26:	mov    esi,DWORD PTR [rax+0xc94]
   41e2c:	test   esi,esi
   41e2e:	je     408f8 <SubPelBlockSearchBiPred+0x2f58>
   41e34:	mov    rdx,QWORD PTR [rsp+0xb8]
   41e3c:	mov    rax,QWORD PTR [rsp+0x70]
   41e41:	xor    edi,edi
   41e43:	add    rax,QWORD PTR [rsp+0xd8]
   41e4b:	mov    rsi,QWORD PTR [rsp+0x88]
   41e53:	lea    rcx,[rdx+rax*4]
   41e57:	xor    eax,eax
   41e59:	mov    edx,DWORD PTR [rsi+rax*1]
   41e5c:	mov    DWORD PTR [rcx+rax*1],edx
   41e5f:	add    rax,0x4
   41e63:	cmp    rax,0x10
   41e67:	jne    41e59 <SubPelBlockSearchBiPred+0x44b9>
   41e69:	add    edi,0x4
   41e6c:	add    rsi,0x10
   41e70:	add    rcx,0x40
   41e74:	cmp    edi,0x10
   41e77:	jne    41e57 <SubPelBlockSearchBiPred+0x44b7>
   41e79:	jmp    4091f <SubPelBlockSearchBiPred+0x2f7f>
   41e7e:	mov    r15,QWORD PTR [rsp+0x10]
   41e83:	mov    ebx,ebp
   41e85:	movsx  eax,WORD PTR [rsp+0x6c]
   41e8a:	cmp    eax,DWORD PTR [rsp+0x94]
   41e91:	jge    41eaa <SubPelBlockSearchBiPred+0x450a>
   41e93:	movzx  esi,WORD PTR [rsp+0xf8]
   41e9b:	mov    DWORD PTR [rsp+0x94],eax
   41ea2:	mov    WORD PTR [rsp+0x110],si
   41eaa:	add    WORD PTR [rsp+0xf8],0x1
   41eb3:	movsx  eax,WORD PTR [rsp+0xf8]
   41ebb:	cmp    eax,DWORD PTR [rsp+0x608]
   41ec2:	jge    41f04 <SubPelBlockSearchBiPred+0x4564>
   41ec4:	mov    rax,QWORD PTR [rsp+0xe8]
   41ecc:	movzx  r9d,WORD PTR [rax]
   41ed0:	jmp    3ff82 <SubPelBlockSearchBiPred+0x25e2>
   41ed5:	mov    rax,QWORD PTR [rip+0x466dc]        # 885b8 <input>
   41edc:	mov    edx,DWORD PTR [rax+0xc94]
   41ee2:	test   edx,edx
   41ee4:	je     41e85 <SubPelBlockSearchBiPred+0x44e5>
   41ee6:	mov    esi,DWORD PTR [rax+0x18]
   41ee9:	mov    edx,DWORD PTR [rsp+0x12c]
   41ef0:	mov    rdi,QWORD PTR [rsp+0xb8]
   41ef8:	call   3bd70 <find_SATD>
   41efd:	add    WORD PTR [rsp+0x6c],ax
   41f02:	jmp    41e85 <SubPelBlockSearchBiPred+0x44e5>
   41f04:	movsx  rax,WORD PTR [rsp+0x110]
   41f0d:	test   ax,ax
   41f10:	je     41f3c <SubPelBlockSearchBiPred+0x459c>
   41f12:	mov    rdx,QWORD PTR [rip+0x7554f]        # b7468 <spiral_search_x>
   41f19:	mov    rbx,QWORD PTR [rsp+0xe8]
   41f21:	mov    edx,DWORD PTR [rdx+rax*4]
   41f24:	add    WORD PTR [rbx],dx
   41f27:	mov    rdx,QWORD PTR [rip+0x75562]        # b7490 <spiral_search_y>
   41f2e:	mov    rbx,QWORD PTR [rsp+0xf0]
   41f36:	mov    eax,DWORD PTR [rdx+rax*4]
   41f39:	add    WORD PTR [rbx],ax
   41f3c:	mov    rax,QWORD PTR [rsp+0x588]
   41f44:	xor    rax,QWORD PTR fs:0x28
   41f4d:	jne    42032 <SubPelBlockSearchBiPred+0x4692>
   41f53:	mov    eax,DWORD PTR [rsp+0x94]
   41f5a:	add    rsp,0x598
   41f61:	pop    rbx
   41f62:	pop    rbp
   41f63:	pop    r12
   41f65:	pop    r13
   41f67:	pop    r14
   41f69:	pop    r15
   41f6b:	ret    
   41f6c:	mov    r12,QWORD PTR [rip+0x46645]        # 885b8 <input>
   41f73:	mov    eax,DWORD PTR [r12+0xc94]
   41f7b:	test   eax,eax
   41f7d:	je     3fdbe <SubPelBlockSearchBiPred+0x241e>
   41f83:	mov    edx,DWORD PTR [rsp+0x12c]
   41f8a:	mov    esi,DWORD PTR [rsp+0x94]
   41f91:	mov    rdi,QWORD PTR [rsp+0xb8]
   41f99:	call   3bd70 <find_SATD>
   41f9e:	add    WORD PTR [rsp+0x6c],ax
   41fa3:	jmp    3fdbe <SubPelBlockSearchBiPred+0x241e>
   41fa8:	movsx  edx,r9w
   41fac:	add    edx,DWORD PTR [rsp+0x11c]
   41fb3:	jmp    3fe80 <SubPelBlockSearchBiPred+0x24e0>
   41fb8:	lea    eax,[rdi+0x2]
   41fbb:	mov    ecx,0x2
   41fc0:	mov    esi,0x2
   41fc5:	jmp    3db1d <SubPelBlockSearchBiPred+0x17d>
   41fca:	lea    rsi,[rip+0x7544f]        # b7420 <listX>
   41fd1:	cdqe   
   41fd3:	mov    BYTE PTR [rsp+0x10c],0x0
   41fdb:	mov    DWORD PTR [rsp+0x94],0x0
   41fe6:	mov    rax,QWORD PTR [rsi+rax*8]
   41fea:	mov    rax,QWORD PTR [rax+rdx*8]
   41fee:	mov    rbp,QWORD PTR [rax+0x1930]
   41ff5:	jmp    3dcd7 <SubPelBlockSearchBiPred+0x337>
   41ffa:	lea    rsi,[rip+0x7541f]        # b7420 <listX>
   42001:	cdqe   
   42003:	mov    BYTE PTR [rsp+0x10c],0x1
   4200b:	mov    rax,QWORD PTR [rsi+rax*8]
   4200f:	mov    rax,QWORD PTR [rax+rdx*8]
   42013:	mov    rbp,QWORD PTR [rax+0x1930]
   4201a:	jmp    3dcda <SubPelBlockSearchBiPred+0x33a>
   4201f:	mov    eax,DWORD PTR [rsp+0x610]
   42026:	mov    DWORD PTR [rsp+0x94],eax
   4202d:	jmp    41f3c <SubPelBlockSearchBiPred+0x459c>
   42032:	call   4390 <__stack_chk_fail@plt>
   42037:	nop    WORD PTR [rax+rax*1+0x0]

0000000000042040 <BPredPartitionCost>:
   42040:	endbr64 
   42044:	push   r15
   42046:	movsxd rax,edi
   42049:	movsxd r10,esi
   4204c:	push   r14
   4204e:	lea    rsi,[rax*8+0x0]
   42056:	push   r13
   42058:	push   r12
   4205a:	push   rbp
   4205b:	mov    ebp,edx
   4205d:	push   rbx
   4205e:	sub    rsp,0x598
   42065:	mov    DWORD PTR [rsp+0x60],eax
   42069:	mov    DWORD PTR [rsp+0x50],r8d
   4206e:	mov    WORD PTR [rsp+0x66],dx
   42073:	mov    WORD PTR [rsp+0x34],cx
   42078:	mov    DWORD PTR [rsp+0x30],r9d
   4207d:	mov    rdi,QWORD PTR fs:0x28
   42086:	mov    QWORD PTR [rsp+0x588],rdi
   4208e:	xor    edi,edi
   42090:	mov    rdi,QWORD PTR [rip+0x46521]        # 885b8 <input>
   42097:	cmp    eax,0x4
   4209a:	lea    rdx,[rdi+rsi*1]
   4209e:	mov    r13d,DWORD PTR [rdi+rax*8+0x94]
   420a6:	mov    QWORD PTR [rsp+0x40],rdi
   420ab:	mov    ecx,DWORD PTR [rdx+0x50]
   420ae:	mov    r8d,DWORD PTR [rdx+0x90]
   420b5:	lea    rdx,[rip+0x33ec4]        # 75f80 <by0.6981>
   420bc:	mov    DWORD PTR [rsp+0x1c],r13d
   420c1:	mov    DWORD PTR [rsp+0x68],ecx
   420c5:	mov    ecx,DWORD PTR [rdi+rax*8+0x54]
   420c9:	mov    DWORD PTR [rsp+0x6c],ecx
   420cd:	mov    ecx,0x4
   420d2:	cmovle ecx,eax
   420d5:	mov    rax,QWORD PTR [rip+0x464d4]        # 885b0 <img>
   420dc:	test   r9d,r9d
   420df:	movsxd rbx,ecx
   420e2:	mov    r14,QWORD PTR [rax+0x11908]
   420e9:	mov    QWORD PTR [rsp+0x70],rax
   420ee:	mov    r11d,DWORD PTR [rdi+rbx*8+0x94]
   420f6:	cmovne r14,QWORD PTR [rax+0x11900]
   420fe:	mov    QWORD PTR [rsp+0x78],rbx
   42103:	mov    r15,QWORD PTR [rax+0x118f0]
   4210a:	lea    rax,[r10+rbx*4]
   4210e:	mov    ecx,DWORD PTR [rdi+rbx*8+0x90]
   42115:	mov    DWORD PTR [rsp+0x28],r11d
   4211a:	mov    ebx,DWORD PTR [rdx+rax*4]
   4211d:	add    r11d,ebx
   42120:	mov    DWORD PTR [rsp+0x3c],ebx
   42124:	mov    DWORD PTR [rsp+0x10],r11d
   42129:	cmp    r11d,ebx
   4212c:	jle    4256b <BPredPartitionCost+0x52b>
   42132:	lea    rdx,[rip+0x33de7]        # 75f20 <bx0.6980>
   42139:	movsx  r12,bp
   4213d:	movsxd rbx,ebx
   42140:	movsx  rbp,WORD PTR [rsp+0x34]
   42146:	mov    eax,DWORD PTR [rdx+rax*4]
   42149:	mov    rdi,QWORD PTR [rip+0x75328]        # b7478 <mvbits>
   42150:	shl    r12,0x3
   42154:	shl    rbp,0x3
   42158:	add    ecx,eax
   4215a:	mov    DWORD PTR [rsp+0x38],eax
   4215e:	movsxd rax,r13d
   42161:	mov    DWORD PTR [rsp+0x18],ecx
   42165:	movsxd rcx,r8d
   42168:	shl    rax,0x3
   4216c:	mov    QWORD PTR [rsp],rcx
   42170:	mov    QWORD PTR [rsp+0x20],rax
   42175:	mov    rax,rbx
   42178:	shl    rbx,0x3
   4217c:	mov    DWORD PTR [rsp+0x8],eax
   42180:	xor    eax,eax
   42182:	movsxd rcx,DWORD PTR [rsp+0x38]
   42187:	cmp    DWORD PTR [rsp+0x18],ecx
   4218b:	jle    4222c <BPredPartitionCost+0x1ec>
   42191:	nop    DWORD PTR [rax+0x0]
   42198:	mov    rdx,QWORD PTR [r14+rcx*8]
   4219c:	mov    r9,QWORD PTR [rdx+rbx*1]
   421a0:	mov    rdx,QWORD PTR [r9]
   421a3:	mov    rdx,QWORD PTR [rdx+r12*1]
   421a7:	mov    r11,QWORD PTR [rdx+rsi*1]
   421ab:	mov    rdx,QWORD PTR [r15+rcx*8]
   421af:	add    rcx,QWORD PTR [rsp]
   421b3:	mov    r8,QWORD PTR [rdx+rbx*1]
   421b7:	mov    rdx,QWORD PTR [r8]
   421ba:	mov    r8,QWORD PTR [r8+0x8]
   421be:	mov    rdx,QWORD PTR [rdx+r12*1]
   421c2:	mov    r8,QWORD PTR [r8+rbp*1]
   421c6:	mov    r10,QWORD PTR [rdx+rsi*1]
   421ca:	movsx  edx,WORD PTR [r11]
   421ce:	mov    r8,QWORD PTR [r8+rsi*1]
   421d2:	movsx  r13d,WORD PTR [r10]
   421d6:	movsx  r10d,WORD PTR [r10+0x2]
   421db:	sub    edx,r13d
   421de:	movsxd rdx,edx
   421e1:	add    eax,DWORD PTR [rdi+rdx*4]
   421e4:	movsx  edx,WORD PTR [r11+0x2]
   421e9:	sub    edx,r10d
   421ec:	movsx  r10d,WORD PTR [r8]
   421f0:	movsx  r8d,WORD PTR [r8+0x2]
   421f5:	movsxd rdx,edx
   421f8:	add    eax,DWORD PTR [rdi+rdx*4]
   421fb:	mov    rdx,QWORD PTR [r9+0x8]
   421ff:	mov    rdx,QWORD PTR [rdx+rbp*1]
   42203:	mov    rdx,QWORD PTR [rdx+rsi*1]
   42207:	movsx  r9d,WORD PTR [rdx]
   4220b:	movsx  edx,WORD PTR [rdx+0x2]
   4220f:	sub    r9d,r10d
   42212:	sub    edx,r8d
   42215:	movsxd r9,r9d
   42218:	movsxd rdx,edx
   4221b:	add    eax,DWORD PTR [rdi+r9*4]
   4221f:	add    eax,DWORD PTR [rdi+rdx*4]
   42222:	cmp    DWORD PTR [rsp+0x18],ecx
   42226:	jg     42198 <BPredPartitionCost+0x158>
   4222c:	mov    edx,DWORD PTR [rsp+0x1c]
   42230:	add    rbx,QWORD PTR [rsp+0x20]
   42235:	add    DWORD PTR [rsp+0x8],edx
   42239:	mov    ecx,DWORD PTR [rsp+0x8]
   4223d:	cmp    DWORD PTR [rsp+0x10],ecx
   42241:	jg     42182 <BPredPartitionCost+0x142>
   42247:	imul   eax,DWORD PTR [rsp+0x50]
   4224c:	mov    DWORD PTR [rsp+0x50],0x0
   42254:	mov    QWORD PTR [rsp+0x48],0x0
   4225d:	mov    r13,QWORD PTR [rsp+0x70]
   42262:	mov    r14,QWORD PTR [rsp+0x40]
   42267:	sar    eax,0x10
   4226a:	mov    ebp,eax
   4226c:	mov    eax,DWORD PTR [rsp+0x28]
   42270:	lea    eax,[rax*4-0x4]
   42277:	mov    DWORD PTR [rsp+0x54],eax
   4227b:	mov    eax,DWORD PTR [rsp+0x3c]
   4227f:	mov    DWORD PTR [rsp+0x3c],ebp
   42283:	mov    ebp,DWORD PTR [rsp+0x60]
   42287:	shl    eax,0x2
   4228a:	mov    DWORD PTR [rsp+0x58],eax
   4228e:	mov    eax,DWORD PTR [rsp+0x38]
   42292:	shl    eax,0x2
   42295:	mov    DWORD PTR [rsp+0x5c],eax
   42299:	mov    eax,DWORD PTR [rsp+0x18]
   4229d:	shl    eax,0x2
   422a0:	mov    DWORD PTR [rsp+0x28],eax
   422a4:	movsx  eax,WORD PTR [rsp+0x34]
   422a9:	mov    DWORD PTR [rsp+0x34],eax
   422ad:	mov    eax,DWORD PTR [r13+0xac]
   422b4:	mov    edi,DWORD PTR [rsp+0x50]
   422b8:	add    edi,DWORD PTR [rsp+0x58]
   422bc:	mov    esi,DWORD PTR [rsp+0x38]
   422c0:	mov    DWORD PTR [rsp+0x8],edi
   422c4:	add    eax,edi
   422c6:	cmp    DWORD PTR [rsp+0x18],esi
   422ca:	jle    423fe <BPredPartitionCost+0x3be>
   422d0:	cmp    ebp,0x4
   422d3:	cdqe   
   422d5:	movsx  ebx,WORD PTR [rsp+0x66]
   422da:	mov    r12d,DWORD PTR [rsp+0x5c]
   422df:	setg   BYTE PTR [rsp+0x40]
   422e4:	shl    rax,0x3
   422e8:	mov    QWORD PTR [rsp+0x10],rax
   422ed:	movsxd rax,edi
   422f0:	mov    QWORD PTR [rsp+0x20],rax
   422f5:	lea    rax,[rsp+0x80]
   422fd:	mov    DWORD PTR [rsp+0x1c],ebx
   42301:	mov    rbx,QWORD PTR [rsp+0x48]
   42306:	mov    QWORD PTR [rsp],rax
   4230a:	lea    rbx,[rsp+rbx*4+0x180]
   42312:	mov    eax,DWORD PTR [rsp+0x30]
   42316:	mov    r14d,DWORD PTR [r13+0xa8]
   4231d:	mov    r8d,ebp
   42320:	mov    ecx,ebp
   42322:	mov    edi,r12d
   42325:	mov    edx,0x2
   4232a:	push   rax
   4232b:	mov    eax,DWORD PTR [rsp+0x3c]
   4232f:	add    r14d,r12d
   42332:	movsxd r14,r14d
   42335:	push   rax
   42336:	mov    r9d,DWORD PTR [rsp+0x2c]
   4233b:	add    r14,r14
   4233e:	mov    esi,DWORD PTR [rsp+0x18]
   42342:	call   283f0 <LumaPrediction4x4Bi>
   42347:	movsxd rax,r12d
   4234a:	mov    r15,QWORD PTR [rsp+0x20]
   4234f:	xor    r8d,r8d
   42352:	mov    r13,QWORD PTR [rip+0x46257]        # 885b0 <img>
   42359:	shl    rax,0x4
   4235d:	add    rax,QWORD PTR [rsp+0x30]
   42362:	mov    r9,QWORD PTR [rsp+0x10]
   42367:	add    r15,QWORD PTR [rip+0x7505a]        # b73c8 <imgY_org>
   4236e:	pop    rsi
   4236f:	lea    r11,[r13+rax*2+0x0]
   42374:	pop    rdi
   42375:	mov    rdi,rbx
   42378:	mov    rsi,QWORD PTR [r15]
   4237b:	mov    rcx,r11
   4237e:	xor    eax,eax
   42380:	add    rsi,r14
   42383:	movzx  edx,WORD PTR [rsi+rax*2]
   42387:	movzx  r10d,WORD PTR [rcx+0x3138]
   4238f:	add    rcx,0x20
   42393:	sub    edx,r10d
   42396:	mov    DWORD PTR [rdi+rax*4],edx
   42399:	mov    DWORD PTR [r9+rax*4],edx
   4239d:	add    rax,0x1
   423a1:	cmp    rax,0x4
   423a5:	jne    42383 <BPredPartitionCost+0x343>
   423a7:	add    r8d,0x4
   423ab:	add    r15,0x8
   423af:	add    r11,0x2
   423b3:	add    rdi,0x40
   423b7:	add    r9,0x10
   423bb:	cmp    r8d,0x10
   423bf:	jne    42378 <BPredPartitionCost+0x338>
   423c1:	mov    r14,QWORD PTR [rip+0x461f0]        # 885b8 <input>
   423c8:	mov    ecx,DWORD PTR [r14+0xc94]
   423cf:	test   ecx,ecx
   423d1:	je     423da <BPredPartitionCost+0x39a>
   423d3:	cmp    BYTE PTR [rsp+0x40],0x0
   423d8:	je     423eb <BPredPartitionCost+0x3ab>
   423da:	mov    esi,DWORD PTR [r14+0x18]
   423de:	mov    rdi,QWORD PTR [rsp]
   423e2:	call   3bae0 <SATD>
   423e7:	add    DWORD PTR [rsp+0x3c],eax
   423eb:	add    r12d,0x4
   423ef:	add    rbx,0x10
   423f3:	cmp    DWORD PTR [rsp+0x28],r12d
   423f8:	jne    42312 <BPredPartitionCost+0x2d2>
   423fe:	add    QWORD PTR [rsp+0x48],0x40
   42404:	mov    edi,DWORD PTR [rsp+0x54]
   42408:	cmp    DWORD PTR [rsp+0x50],edi
   4240c:	je     42418 <BPredPartitionCost+0x3d8>
   4240e:	add    DWORD PTR [rsp+0x50],0x4
   42413:	jmp    422ad <BPredPartitionCost+0x26d>
   42418:	mov    QWORD PTR [rsp+0x40],r14
   4241d:	mov    ebp,DWORD PTR [rsp+0x3c]
   42421:	mov    rbx,QWORD PTR [rsp+0x40]
   42426:	mov    edx,DWORD PTR [rbx+0xc94]
   4242c:	test   edx,edx
   4242e:	je     42437 <BPredPartitionCost+0x3f7>
   42430:	cmp    DWORD PTR [rsp+0x60],0x4
   42435:	jle    42462 <BPredPartitionCost+0x422>
   42437:	mov    rax,QWORD PTR [rsp+0x588]
   4243f:	xor    rax,QWORD PTR fs:0x28
   42448:	jne    42572 <BPredPartitionCost+0x532>
   4244e:	add    rsp,0x598
   42455:	mov    eax,ebp
   42457:	pop    rbx
   42458:	pop    rbp
   42459:	pop    r12
   4245b:	pop    r13
   4245d:	pop    r14
   4245f:	pop    r15
   42461:	ret    
   42462:	mov    rsi,QWORD PTR [rsp+0x78]
   42467:	mov    eax,DWORD PTR [rbx+rsi*8+0x54]
   4246b:	mov    DWORD PTR [rsp+0x1c],eax
   4246f:	test   eax,eax
   42471:	jle    42437 <BPredPartitionCost+0x3f7>
   42473:	mov    edi,DWORD PTR [rsp+0x68]
   42477:	movsxd rcx,DWORD PTR [rsp+0x6c]
   4247c:	mov    eax,0x8
   42481:	mov    DWORD PTR [rsp+0x10],0x0
   42489:	mov    ebx,DWORD PTR [rbx+rsi*8+0x50]
   4248d:	lea    r15,[rsp+0x80]
   42495:	cmp    edi,0x8
   42498:	mov    r14,r15
   4249b:	cmovg  edi,eax
   4249e:	cmp    ecx,0x8
   424a1:	mov    DWORD PTR [rsp+0x18],ebx
   424a5:	lea    rbx,[rsp+0x180]
   424ad:	cmovle rax,rcx
   424b1:	mov    DWORD PTR [rsp],edi
   424b4:	mov    DWORD PTR [rsp+0x20],eax
   424b8:	shl    rax,0x6
   424bc:	mov    QWORD PTR [rsp+0x28],rax
   424c1:	movsxd rax,edi
   424c4:	mov    QWORD PTR [rsp+0x8],rax
   424c9:	mov    eax,DWORD PTR [rsp+0x18]
   424cd:	test   eax,eax
   424cf:	jle    4254b <BPredPartitionCost+0x50b>
   424d1:	mov    rax,QWORD PTR [rsp+0x40]
   424d6:	xor    r15d,r15d
   424d9:	xor    r12d,r12d
   424dc:	mov    r13d,DWORD PTR [rax+0x18]
   424e0:	mov    rax,r14
   424e3:	mov    r14d,r13d
   424e6:	mov    r13,rbx
   424e9:	mov    ebx,r15d
   424ec:	mov    r15,rax
   424ef:	nop
   424f0:	lea    rsi,[r13+r12*4+0x0]
   424f5:	mov    rcx,r15
   424f8:	xor    r10d,r10d
   424fb:	nop    DWORD PTR [rax+rax*1+0x0]
   42500:	xor    eax,eax
   42502:	nop    WORD PTR [rax+rax*1+0x0]
   42508:	mov    edx,DWORD PTR [rsi+rax*1]
   4250b:	mov    DWORD PTR [rcx+rax*1],edx
   4250e:	add    rax,0x4
   42512:	cmp    rax,0x20
   42516:	jne    42508 <BPredPartitionCost+0x4c8>
   42518:	add    r10d,0x8
   4251c:	add    rsi,0x40
   42520:	add    rcx,0x20
   42524:	cmp    r10d,0x40
   42528:	jne    42500 <BPredPartitionCost+0x4c0>
   4252a:	mov    esi,r14d
   4252d:	mov    rdi,r15
   42530:	call   3bd40 <SATD8X8>
   42535:	add    ebx,DWORD PTR [rsp]
   42538:	add    r12,QWORD PTR [rsp+0x8]
   4253d:	add    ebp,eax
   4253f:	cmp    ebx,DWORD PTR [rsp+0x18]
   42543:	jl     424f0 <BPredPartitionCost+0x4b0>
   42545:	mov    rbx,r13
   42548:	mov    r14,r15
   4254b:	mov    edi,DWORD PTR [rsp+0x20]
   4254f:	add    rbx,QWORD PTR [rsp+0x28]
   42554:	add    DWORD PTR [rsp+0x10],edi
   42558:	mov    eax,DWORD PTR [rsp+0x10]
   4255c:	cmp    DWORD PTR [rsp+0x1c],eax
   42560:	jg     424c9 <BPredPartitionCost+0x489>
   42566:	jmp    42437 <BPredPartitionCost+0x3f7>
   4256b:	xor    ebp,ebp
   4256d:	jmp    42421 <BPredPartitionCost+0x3e1>
   42572:	call   4390 <__stack_chk_fail@plt>
   42577:	nop    WORD PTR [rax+rax*1+0x0]

0000000000042580 <BIDPartitionCost>:
   42580:	endbr64 
   42584:	push   r15
   42586:	movsxd r9,esi
   42589:	push   r14
   4258b:	push   r13
   4258d:	mov    r13d,ecx
   42590:	push   r12
   42592:	push   rbp
   42593:	mov    ebp,edx
   42595:	push   rbx
   42596:	sub    rsp,0x598
   4259d:	mov    rbx,QWORD PTR [rip+0x46014]        # 885b8 <input>
   425a4:	mov    DWORD PTR [rsp+0x60],edi
   425a8:	mov    DWORD PTR [rsp+0x50],r8d
   425ad:	mov    WORD PTR [rsp+0x66],dx
   425b2:	mov    WORD PTR [rsp+0x3c],cx
   425b7:	mov    rax,QWORD PTR fs:0x28
   425c0:	mov    QWORD PTR [rsp+0x588],rax
   425c8:	xor    eax,eax
   425ca:	movsxd rax,edi
   425cd:	mov    QWORD PTR [rsp+0x40],rbx
   425d2:	lea    rsi,[rax*8+0x0]
   425da:	cmp    eax,0x4
   425dd:	mov    r10d,DWORD PTR [rbx+rax*8+0x94]
   425e5:	lea    rdi,[rbx+rsi*1]
   425e9:	mov    edx,DWORD PTR [rdi+0x50]
   425ec:	mov    r8d,DWORD PTR [rdi+0x90]
   425f3:	mov    DWORD PTR [rsp+0x30],r10d
   425f8:	mov    DWORD PTR [rsp+0x68],edx
   425fc:	mov    edx,DWORD PTR [rbx+rax*8+0x54]
   42600:	mov    DWORD PTR [rsp+0x6c],edx
   42604:	mov    edx,0x4
   42609:	cmovle rdx,rax
   4260d:	mov    rax,QWORD PTR [rip+0x45f9c]        # 885b0 <img>
   42614:	mov    r11d,DWORD PTR [rbx+rdx*8+0x94]
   4261c:	mov    ecx,DWORD PTR [rbx+rdx*8+0x90]
   42623:	mov    QWORD PTR [rsp+0x78],rdx
   42628:	mov    QWORD PTR [rsp+0x70],rax
   4262d:	mov    r14,QWORD PTR [rax+0x118f8]
   42634:	mov    r15,QWORD PTR [rax+0x118f0]
   4263b:	lea    rax,[r9+rdx*4]
   4263f:	mov    DWORD PTR [rsp+0x28],r11d
   42644:	lea    rdx,[rip+0x33935]        # 75f80 <by0.6981>
   4264b:	mov    ebx,DWORD PTR [rdx+rax*4]
   4264e:	add    r11d,ebx
   42651:	mov    DWORD PTR [rsp+0x34],ebx
   42655:	mov    DWORD PTR [rsp+0x18],r11d
   4265a:	cmp    r11d,ebx
   4265d:	jle    42aac <BIDPartitionCost+0x52c>
   42663:	lea    rdx,[rip+0x338b6]        # 75f20 <bx0.6980>
   4266a:	movsxd rbx,ebx
   4266d:	movsx  r12,bp
   42671:	mov    rdi,QWORD PTR [rip+0x74e00]        # b7478 <mvbits>
   42678:	mov    eax,DWORD PTR [rdx+rax*4]
   4267b:	movsx  rbp,r13w
   4267f:	shl    r12,0x3
   42683:	shl    rbp,0x3
   42687:	add    ecx,eax
   42689:	mov    DWORD PTR [rsp+0x38],eax
   4268d:	movsxd rax,r10d
   42690:	mov    DWORD PTR [rsp+0x4],ecx
   42694:	movsxd rcx,r8d
   42697:	shl    rax,0x3
   4269b:	mov    QWORD PTR [rsp+0x8],rcx
   426a0:	mov    QWORD PTR [rsp+0x20],rax
   426a5:	mov    rax,rbx
   426a8:	shl    rbx,0x3
   426ac:	mov    DWORD PTR [rsp+0x10],eax
   426b0:	xor    eax,eax
   426b2:	movsxd rcx,DWORD PTR [rsp+0x38]
   426b7:	cmp    DWORD PTR [rsp+0x4],ecx
   426bb:	jle    4275d <BIDPartitionCost+0x1dd>
   426c1:	nop    DWORD PTR [rax+0x0]
   426c8:	mov    rdx,QWORD PTR [r14+rcx*8]
   426cc:	mov    r9,QWORD PTR [rdx+rbx*1]
   426d0:	mov    rdx,QWORD PTR [r9]
   426d3:	mov    rdx,QWORD PTR [rdx+r12*1]
   426d7:	mov    r11,QWORD PTR [rdx+rsi*1]
   426db:	mov    rdx,QWORD PTR [r15+rcx*8]
   426df:	add    rcx,QWORD PTR [rsp+0x8]
   426e4:	mov    r8,QWORD PTR [rdx+rbx*1]
   426e8:	mov    rdx,QWORD PTR [r8]
   426eb:	mov    r8,QWORD PTR [r8+0x8]
   426ef:	mov    rdx,QWORD PTR [rdx+r12*1]
   426f3:	mov    r8,QWORD PTR [r8+rbp*1]
   426f7:	mov    r10,QWORD PTR [rdx+rsi*1]
   426fb:	movsx  edx,WORD PTR [r11]
   426ff:	mov    r8,QWORD PTR [r8+rsi*1]
   42703:	movsx  r13d,WORD PTR [r10]
   42707:	movsx  r10d,WORD PTR [r10+0x2]
   4270c:	sub    edx,r13d
   4270f:	movsxd rdx,edx
   42712:	add    eax,DWORD PTR [rdi+rdx*4]
   42715:	movsx  edx,WORD PTR [r11+0x2]
   4271a:	sub    edx,r10d
   4271d:	movsx  r10d,WORD PTR [r8]
   42721:	movsx  r8d,WORD PTR [r8+0x2]
   42726:	movsxd rdx,edx
   42729:	add    eax,DWORD PTR [rdi+rdx*4]
   4272c:	mov    rdx,QWORD PTR [r9+0x8]
   42730:	mov    rdx,QWORD PTR [rdx+rbp*1]
   42734:	mov    rdx,QWORD PTR [rdx+rsi*1]
   42738:	movsx  r9d,WORD PTR [rdx]
   4273c:	movsx  edx,WORD PTR [rdx+0x2]
   42740:	sub    r9d,r10d
   42743:	sub    edx,r8d
   42746:	movsxd r9,r9d
   42749:	movsxd rdx,edx
   4274c:	add    eax,DWORD PTR [rdi+r9*4]
   42750:	add    eax,DWORD PTR [rdi+rdx*4]
   42753:	cmp    DWORD PTR [rsp+0x4],ecx
   42757:	jg     426c8 <BIDPartitionCost+0x148>
   4275d:	mov    edx,DWORD PTR [rsp+0x30]
   42761:	add    rbx,QWORD PTR [rsp+0x20]
   42766:	add    DWORD PTR [rsp+0x10],edx
   4276a:	mov    ecx,DWORD PTR [rsp+0x10]
   4276e:	cmp    DWORD PTR [rsp+0x18],ecx
   42772:	jg     426b2 <BIDPartitionCost+0x132>
   42778:	imul   eax,DWORD PTR [rsp+0x50]
   4277d:	mov    DWORD PTR [rsp+0x50],0x0
   42785:	mov    QWORD PTR [rsp+0x48],0x0
   4278e:	mov    r13,QWORD PTR [rsp+0x70]
   42793:	mov    r14,QWORD PTR [rsp+0x40]
   42798:	sar    eax,0x10
   4279b:	mov    ebp,eax
   4279d:	mov    eax,DWORD PTR [rsp+0x28]
   427a1:	lea    eax,[rax*4-0x4]
   427a8:	mov    DWORD PTR [rsp+0x54],eax
   427ac:	mov    eax,DWORD PTR [rsp+0x34]
   427b0:	shl    eax,0x2
   427b3:	mov    DWORD PTR [rsp+0x58],eax
   427b7:	mov    eax,DWORD PTR [rsp+0x38]
   427bb:	shl    eax,0x2
   427be:	mov    DWORD PTR [rsp+0x5c],eax
   427c2:	mov    eax,DWORD PTR [rsp+0x4]
   427c6:	shl    eax,0x2
   427c9:	mov    DWORD PTR [rsp+0x28],eax
   427cd:	movsx  eax,WORD PTR [rsp+0x3c]
   427d2:	mov    DWORD PTR [rsp+0x3c],ebp
   427d6:	mov    ebp,DWORD PTR [rsp+0x60]
   427da:	mov    DWORD PTR [rsp+0x34],eax
   427de:	mov    eax,DWORD PTR [r13+0xac]
   427e5:	mov    edi,DWORD PTR [rsp+0x50]
   427e9:	add    edi,DWORD PTR [rsp+0x58]
   427ed:	mov    esi,DWORD PTR [rsp+0x38]
   427f1:	mov    DWORD PTR [rsp+0x10],edi
   427f5:	add    eax,edi
   427f7:	cmp    DWORD PTR [rsp+0x4],esi
   427fb:	jle    42930 <BIDPartitionCost+0x3b0>
   42801:	cmp    ebp,0x4
   42804:	cdqe   
   42806:	movsx  ebx,WORD PTR [rsp+0x66]
   4280b:	mov    r12d,DWORD PTR [rsp+0x5c]
   42810:	setg   BYTE PTR [rsp+0x40]
   42815:	shl    rax,0x3
   42819:	mov    QWORD PTR [rsp+0x18],rax
   4281e:	movsxd rax,edi
   42821:	mov    QWORD PTR [rsp+0x20],rax
   42826:	lea    rax,[rsp+0x80]
   4282e:	mov    DWORD PTR [rsp+0x30],ebx
   42832:	mov    rbx,QWORD PTR [rsp+0x48]
   42837:	mov    QWORD PTR [rsp+0x8],rax
   4283c:	lea    rbx,[rsp+rbx*4+0x180]
   42844:	sub    rsp,0x8
   42848:	mov    r14d,DWORD PTR [r13+0xa8]
   4284f:	mov    r8d,ebp
   42852:	mov    ecx,ebp
   42854:	mov    eax,DWORD PTR [rsp+0x3c]
   42858:	mov    edi,r12d
   4285b:	mov    edx,0x2
   42860:	add    r14d,r12d
   42863:	push   rax
   42864:	mov    r9d,DWORD PTR [rsp+0x40]
   42869:	movsxd r14,r14d
   4286c:	mov    esi,DWORD PTR [rsp+0x20]
   42870:	add    r14,r14
   42873:	call   27e80 <LumaPrediction4x4>
   42878:	movsxd rax,r12d
   4287b:	mov    r15,QWORD PTR [rsp+0x28]
   42880:	xor    r8d,r8d
   42883:	mov    r13,QWORD PTR [rip+0x45d26]        # 885b0 <img>
   4288a:	shl    rax,0x4
   4288e:	add    rax,QWORD PTR [rsp+0x30]
   42893:	mov    r9,QWORD PTR [rsp+0x18]
   42898:	add    r15,QWORD PTR [rip+0x74b29]        # b73c8 <imgY_org>
   4289f:	pop    rsi
   428a0:	lea    r11,[r13+rax*2+0x0]
   428a5:	pop    rdi
   428a6:	mov    rdi,rbx
   428a9:	mov    rsi,QWORD PTR [r15]
   428ac:	mov    rcx,r11
   428af:	xor    eax,eax
   428b1:	add    rsi,r14
   428b4:	movzx  edx,WORD PTR [rsi+rax*2]
   428b8:	movzx  r10d,WORD PTR [rcx+0x3138]
   428c0:	add    rcx,0x20
   428c4:	sub    edx,r10d
   428c7:	mov    DWORD PTR [rdi+rax*4],edx
   428ca:	mov    DWORD PTR [r9+rax*4],edx
   428ce:	add    rax,0x1
   428d2:	cmp    rax,0x4
   428d6:	jne    428b4 <BIDPartitionCost+0x334>
   428d8:	add    r8d,0x4
   428dc:	add    r15,0x8
   428e0:	add    r11,0x2
   428e4:	add    rdi,0x40
   428e8:	add    r9,0x10
   428ec:	cmp    r8d,0x10
   428f0:	jne    428a9 <BIDPartitionCost+0x329>
   428f2:	mov    r14,QWORD PTR [rip+0x45cbf]        # 885b8 <input>
   428f9:	mov    ecx,DWORD PTR [r14+0xc94]
   42900:	test   ecx,ecx
   42902:	je     4290b <BIDPartitionCost+0x38b>
   42904:	cmp    BYTE PTR [rsp+0x40],0x0
   42909:	je     4291d <BIDPartitionCost+0x39d>
   4290b:	mov    esi,DWORD PTR [r14+0x18]
   4290f:	mov    rdi,QWORD PTR [rsp+0x8]
   42914:	call   3bae0 <SATD>
   42919:	add    DWORD PTR [rsp+0x3c],eax
   4291d:	add    r12d,0x4
   42921:	add    rbx,0x10
   42925:	cmp    DWORD PTR [rsp+0x28],r12d
   4292a:	jne    42844 <BIDPartitionCost+0x2c4>
   42930:	add    QWORD PTR [rsp+0x48],0x40
   42936:	mov    edi,DWORD PTR [rsp+0x54]
   4293a:	cmp    DWORD PTR [rsp+0x50],edi
   4293e:	je     4294a <BIDPartitionCost+0x3ca>
   42940:	add    DWORD PTR [rsp+0x50],0x4
   42945:	jmp    427de <BIDPartitionCost+0x25e>
   4294a:	mov    QWORD PTR [rsp+0x40],r14
   4294f:	mov    ebp,DWORD PTR [rsp+0x3c]
   42953:	mov    rbx,QWORD PTR [rsp+0x40]
   42958:	mov    edx,DWORD PTR [rbx+0xc94]
   4295e:	test   edx,edx
   42960:	je     42969 <BIDPartitionCost+0x3e9>
   42962:	cmp    DWORD PTR [rsp+0x60],0x4
   42967:	jle    42994 <BIDPartitionCost+0x414>
   42969:	mov    rax,QWORD PTR [rsp+0x588]
   42971:	xor    rax,QWORD PTR fs:0x28
   4297a:	jne    42ab3 <BIDPartitionCost+0x533>
   42980:	add    rsp,0x598
   42987:	mov    eax,ebp
   42989:	pop    rbx
   4298a:	pop    rbp
   4298b:	pop    r12
   4298d:	pop    r13
   4298f:	pop    r14
   42991:	pop    r15
   42993:	ret    
   42994:	mov    rsi,QWORD PTR [rsp+0x78]
   42999:	mov    eax,DWORD PTR [rbx+rsi*8+0x54]
   4299d:	mov    DWORD PTR [rsp+0x30],eax
   429a1:	test   eax,eax
   429a3:	jle    42969 <BIDPartitionCost+0x3e9>
   429a5:	mov    edi,DWORD PTR [rsp+0x68]
   429a9:	movsxd rcx,DWORD PTR [rsp+0x6c]
   429ae:	mov    eax,0x8
   429b3:	mov    DWORD PTR [rsp+0x18],0x0
   429bb:	mov    ebx,DWORD PTR [rbx+rsi*8+0x50]
   429bf:	lea    r15,[rsp+0x80]
   429c7:	cmp    edi,0x8
   429ca:	mov    r14,r15
   429cd:	cmovg  edi,eax
   429d0:	cmp    ecx,0x8
   429d3:	mov    DWORD PTR [rsp+0x4],ebx
   429d7:	lea    rbx,[rsp+0x180]
   429df:	cmovle rax,rcx
   429e3:	mov    DWORD PTR [rsp+0x8],edi
   429e7:	mov    DWORD PTR [rsp+0x20],eax
   429eb:	shl    rax,0x6
   429ef:	mov    QWORD PTR [rsp+0x28],rax
   429f4:	movsxd rax,edi
   429f7:	mov    QWORD PTR [rsp+0x10],rax
   429fc:	mov    eax,DWORD PTR [rsp+0x4]
   42a00:	test   eax,eax
   42a02:	jle    42a8c <BIDPartitionCost+0x50c>
   42a08:	mov    rax,QWORD PTR [rsp+0x40]
   42a0d:	xor    r15d,r15d
   42a10:	xor    r12d,r12d
   42a13:	mov    r13d,DWORD PTR [rax+0x18]
   42a17:	mov    rax,r14
   42a1a:	mov    r14d,r13d
   42a1d:	mov    r13,rbx
   42a20:	mov    ebx,r15d
   42a23:	mov    r15,rax
   42a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42a30:	lea    rsi,[r13+r12*4+0x0]
   42a35:	mov    rcx,r15
   42a38:	xor    r10d,r10d
   42a3b:	nop    DWORD PTR [rax+rax*1+0x0]
   42a40:	xor    eax,eax
   42a42:	nop    WORD PTR [rax+rax*1+0x0]
   42a48:	mov    edx,DWORD PTR [rsi+rax*1]
   42a4b:	mov    DWORD PTR [rcx+rax*1],edx
   42a4e:	add    rax,0x4
   42a52:	cmp    rax,0x20
   42a56:	jne    42a48 <BIDPartitionCost+0x4c8>
   42a58:	add    r10d,0x8
   42a5c:	add    rsi,0x40
   42a60:	add    rcx,0x20
   42a64:	cmp    r10d,0x40
   42a68:	jne    42a40 <BIDPartitionCost+0x4c0>
   42a6a:	mov    esi,r14d
   42a6d:	mov    rdi,r15
   42a70:	call   3bd40 <SATD8X8>
   42a75:	add    ebx,DWORD PTR [rsp+0x8]
   42a79:	add    r12,QWORD PTR [rsp+0x10]
   42a7e:	add    ebp,eax
   42a80:	cmp    ebx,DWORD PTR [rsp+0x4]
   42a84:	jl     42a30 <BIDPartitionCost+0x4b0>
   42a86:	mov    rbx,r13
   42a89:	mov    r14,r15
   42a8c:	mov    edi,DWORD PTR [rsp+0x20]
   42a90:	add    rbx,QWORD PTR [rsp+0x28]
   42a95:	add    DWORD PTR [rsp+0x18],edi
   42a99:	mov    eax,DWORD PTR [rsp+0x18]
   42a9d:	cmp    DWORD PTR [rsp+0x30],eax
   42aa1:	jg     429fc <BIDPartitionCost+0x47c>
   42aa7:	jmp    42969 <BIDPartitionCost+0x3e9>
   42aac:	xor    ebp,ebp
   42aae:	jmp    42953 <BIDPartitionCost+0x3d3>
   42ab3:	call   4390 <__stack_chk_fail@plt>
   42ab8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000042ac0 <GetSkipCostMB>:
   42ac0:	endbr64 
   42ac4:	push   r15
   42ac6:	push   r14
   42ac8:	push   r13
   42aca:	push   r12
   42acc:	push   rbp
   42acd:	push   rbx
   42ace:	sub    rsp,0x2a8
   42ad5:	mov    rbp,QWORD PTR [rip+0x45ad4]        # 885b0 <img>
   42adc:	mov    rax,QWORD PTR fs:0x28
   42ae5:	mov    QWORD PTR [rsp+0x298],rax
   42aed:	xor    eax,eax
   42aef:	lea    rax,[rsp+0x90]
   42af7:	mov    DWORD PTR [rsp+0x30],0x0
   42aff:	mov    QWORD PTR [rsp+0x48],rax
   42b04:	lea    rax,[rsp+0x50]
   42b09:	mov    r12,rbp
   42b0c:	mov    DWORD PTR [rsp+0x34],0x0
   42b14:	mov    QWORD PTR [rsp+0x10],rax
   42b19:	mov    QWORD PTR [rsp+0x18],0x0
   42b22:	mov    ebx,DWORD PTR [rsp+0x30]
   42b26:	mov    eax,ebx
   42b28:	lea    edx,[rbx*8+0x0]
   42b2f:	sar    eax,1
   42b31:	mov    ebx,edx
   42b33:	shl    eax,0x3
   42b36:	and    ebx,0x8
   42b39:	cdqe   
   42b3b:	mov    DWORD PTR [rsp+0x2c],ebx
   42b3f:	mov    QWORD PTR [rsp+0x8],rax
   42b44:	movsxd rax,ebx
   42b47:	shl    rax,0x4
   42b4b:	mov    QWORD PTR [rsp+0x38],rax
   42b50:	mov    rbx,QWORD PTR [rsp+0x18]
   42b55:	mov    rax,QWORD PTR [rsp+0x48]
   42b5a:	xor    r13d,r13d
   42b5d:	mov    rdi,QWORD PTR [rsp+0x8]
   42b62:	mov    rbp,QWORD PTR [rsp+0x38]
   42b67:	shl    rbx,0x7
   42b6b:	mov    QWORD PTR [rsp+0x40],rax
   42b70:	add    rbx,rax
   42b73:	mov    eax,DWORD PTR [r12+0xac]
   42b7b:	mov    DWORD PTR [rsp+0x28],edi
   42b7f:	add    eax,edi
   42b81:	cdqe   
   42b83:	shl    rax,0x3
   42b87:	mov    QWORD PTR [rsp+0x20],rax
   42b8c:	mov    eax,DWORD PTR [rsp+0x2c]
   42b90:	sub    rsp,0x8
   42b94:	xor    r8d,r8d
   42b97:	xor    ecx,ecx
   42b99:	mov    r14d,DWORD PTR [r12+0xa8]
   42ba1:	push   0x0
   42ba3:	xor    r9d,r9d
   42ba6:	xor    edx,edx
   42ba8:	mov    esi,DWORD PTR [rsp+0x38]
   42bac:	lea    edi,[rax+r13*1]
   42bb0:	add    r14d,edi
   42bb3:	call   27e80 <LumaPrediction4x4>
   42bb8:	mov    rax,QWORD PTR [rsp+0x18]
   42bbd:	movsxd r14,r14d
   42bc0:	mov    rdi,rbx
   42bc3:	mov    r15,QWORD PTR [rsp+0x30]
   42bc8:	mov    r8,QWORD PTR [rsp+0x20]
   42bcd:	add    r14,r14
   42bd0:	xor    r10d,r10d
   42bd3:	mov    r12,QWORD PTR [rip+0x459d6]        # 885b0 <img>
   42bda:	add    rax,rbp
   42bdd:	pop    rcx
   42bde:	add    r15,QWORD PTR [rip+0x747e3]        # b73c8 <imgY_org>
   42be5:	pop    rsi
   42be6:	lea    r11,[r12+rax*2]
   42bea:	mov    rsi,QWORD PTR [r15]
   42bed:	mov    rcx,r11
   42bf0:	xor    eax,eax
   42bf2:	add    rsi,r14
   42bf5:	movzx  edx,WORD PTR [rsi+rax*2]
   42bf9:	movzx  r9d,WORD PTR [rcx+0x3138]
   42c01:	add    rcx,0x20
   42c05:	sub    edx,r9d
   42c08:	mov    DWORD PTR [rdi+rax*4],edx
   42c0b:	mov    DWORD PTR [r8+rax*4],edx
   42c0f:	add    rax,0x1
   42c13:	cmp    rax,0x4
   42c17:	jne    42bf5 <GetSkipCostMB+0x135>
   42c19:	add    r10d,0x4
   42c1d:	add    r15,0x8
   42c21:	add    r11,0x2
   42c25:	add    rdi,0x20
   42c29:	add    r8,0x10
   42c2d:	cmp    r10d,0x10
   42c31:	jne    42bea <GetSkipCostMB+0x12a>
   42c33:	mov    r14,QWORD PTR [rip+0x4597e]        # 885b8 <input>
   42c3a:	mov    r15d,DWORD PTR [r14+0x9a0]
   42c41:	test   r15d,r15d
   42c44:	jne    42c51 <GetSkipCostMB+0x191>
   42c46:	mov    edx,DWORD PTR [r14+0xc94]
   42c4d:	test   edx,edx
   42c4f:	jne    42c63 <GetSkipCostMB+0x1a3>
   42c51:	mov    esi,DWORD PTR [r14+0x18]
   42c55:	mov    rdi,QWORD PTR [rsp+0x10]
   42c5a:	call   3bae0 <SATD>
   42c5f:	add    DWORD PTR [rsp+0x34],eax
   42c63:	add    r13,0x4
   42c67:	add    rbx,0x10
   42c6b:	add    rbp,0x40
   42c6f:	cmp    r13,0x8
   42c73:	jne    42b8c <GetSkipCostMB+0xcc>
   42c79:	add    QWORD PTR [rsp+0x8],0x4
   42c7f:	cmp    QWORD PTR [rsp+0x18],0x1
   42c85:	je     42c95 <GetSkipCostMB+0x1d5>
   42c87:	mov    QWORD PTR [rsp+0x18],0x1
   42c90:	jmp    42b50 <GetSkipCostMB+0x90>
   42c95:	mov    rbp,QWORD PTR [rsp+0x40]
   42c9a:	test   r15d,r15d
   42c9d:	jne    42cb5 <GetSkipCostMB+0x1f5>
   42c9f:	mov    eax,DWORD PTR [r14+0xc94]
   42ca6:	lea    rdi,[rsp+0x190]
   42cae:	mov    rcx,rdi
   42cb1:	test   eax,eax
   42cb3:	jne    42d02 <GetSkipCostMB+0x242>
   42cb5:	add    DWORD PTR [rsp+0x30],0x1
   42cba:	mov    eax,DWORD PTR [rsp+0x30]
   42cbe:	cmp    eax,0x4
   42cc1:	jne    42b19 <GetSkipCostMB+0x59>
   42cc7:	mov    rax,QWORD PTR [rsp+0x298]
   42ccf:	xor    rax,QWORD PTR fs:0x28
   42cd8:	jne    42d2a <GetSkipCostMB+0x26a>
   42cda:	mov    eax,DWORD PTR [rsp+0x34]
   42cde:	add    rsp,0x2a8
   42ce5:	pop    rbx
   42ce6:	pop    rbp
   42ce7:	pop    r12
   42ce9:	pop    r13
   42ceb:	pop    r14
   42ced:	pop    r15
   42cef:	ret    
   42cf0:	add    r15d,0x8
   42cf4:	add    rbp,0x20
   42cf8:	add    rcx,0x20
   42cfc:	cmp    r15d,0x40
   42d00:	je     42d1b <GetSkipCostMB+0x25b>
   42d02:	xor    eax,eax
   42d04:	nop    DWORD PTR [rax+0x0]
   42d08:	mov    edx,DWORD PTR [rbp+rax*1+0x0]
   42d0c:	mov    DWORD PTR [rcx+rax*1],edx
   42d0f:	add    rax,0x4
   42d13:	cmp    rax,0x20
   42d17:	jne    42d08 <GetSkipCostMB+0x248>
   42d19:	jmp    42cf0 <GetSkipCostMB+0x230>
   42d1b:	mov    esi,DWORD PTR [r14+0x18]
   42d1f:	call   3bd40 <SATD8X8>
   42d24:	add    DWORD PTR [rsp+0x34],eax
   42d28:	jmp    42cb5 <GetSkipCostMB+0x1f5>
   42d2a:	call   4390 <__stack_chk_fail@plt>
   42d2f:	nop

0000000000042d30 <FindSkipModeMotionVector>:
   42d30:	endbr64 
   42d34:	push   r13
   42d36:	xor    r8d,r8d
   42d39:	mov    ecx,0xffffffff
   42d3e:	xor    esi,esi
   42d40:	push   r12
   42d42:	push   rbp
   42d43:	push   rbx
   42d44:	sub    rsp,0x58
   42d48:	mov    rdx,QWORD PTR [rip+0x45861]        # 885b0 <img>
   42d4f:	mov    rax,QWORD PTR fs:0x28
   42d58:	mov    QWORD PTR [rsp+0x48],rax
   42d5d:	xor    eax,eax
   42d5f:	mov    r9,rsp
   42d62:	movsxd rax,DWORD PTR [rdx+0xc]
   42d66:	mov    rbx,QWORD PTR [rdx+0x118f8]
   42d6d:	mov    rdi,rax
   42d70:	imul   rax,rax,0x278
   42d77:	add    rax,QWORD PTR [rdx+0x3758]
   42d7e:	xor    edx,edx
   42d80:	mov    rbp,rax
   42d83:	call   30b60 <getLuma4x4Neighbour>
   42d88:	mov    rax,QWORD PTR [rip+0x45821]        # 885b0 <img>
   42d8f:	xor    edx,edx
   42d91:	xor    ecx,ecx
   42d93:	lea    r9,[rsp+0x20]
   42d98:	mov    r8d,0xffffffff
   42d9e:	xor    esi,esi
   42da0:	mov    edi,DWORD PTR [rax+0xc]
   42da3:	call   30b60 <getLuma4x4Neighbour>
   42da8:	mov    edx,DWORD PTR [rsp]
   42dab:	test   edx,edx
   42dad:	je     42e90 <FindSkipModeMotionVector+0x160>
   42db3:	mov    rax,QWORD PTR [rip+0x47bee]        # 8a9a8 <enc_picture>
   42dba:	movsxd r8,DWORD PTR [rsp+0x10]
   42dbf:	mov    rcx,QWORD PTR [rax+0x1968]
   42dc6:	mov    rsi,QWORD PTR [rcx]
   42dc9:	movsxd rcx,DWORD PTR [rsp+0x14]
   42dce:	mov    rdi,QWORD PTR [rsi+r8*8]
   42dd2:	mov    rdi,QWORD PTR [rdi+rcx*8]
   42dd6:	movsx  r11d,WORD PTR [rdi+0x2]
   42ddb:	mov    rdi,QWORD PTR [rax+0x1950]
   42de2:	mov    rdi,QWORD PTR [rdi]
   42de5:	mov    r8,QWORD PTR [rdi+r8*8]
   42de9:	movsx  r10d,WORD PTR [r8+rcx*2]
   42dee:	mov    rcx,QWORD PTR [rip+0x457bb]        # 885b0 <img>
   42df5:	mov    r8d,DWORD PTR [rbp+0x214]
   42dfc:	mov    r9,QWORD PTR [rcx+0x3758]
   42e03:	movsxd rcx,DWORD PTR [rsp+0x4]
   42e08:	imul   rcx,rcx,0x278
   42e0f:	mov    ecx,DWORD PTR [r9+rcx*1+0x214]
   42e17:	test   r8d,r8d
   42e1a:	je     42fa0 <FindSkipModeMotionVector+0x270>
   42e20:	test   ecx,ecx
   42e22:	jne    42e33 <FindSkipModeMotionVector+0x103>
   42e24:	mov    ecx,r11d
   42e27:	add    r10d,r10d
   42e2a:	shr    ecx,0x1f
   42e2d:	add    r11d,ecx
   42e30:	sar    r11d,1
   42e33:	mov    ecx,DWORD PTR [rsp+0x20]
   42e37:	test   ecx,ecx
   42e39:	jne    42ece <FindSkipModeMotionVector+0x19e>
   42e3f:	xor    ecx,ecx
   42e41:	lea    rsi,[rbx+0x20]
   42e45:	mov    rax,rbx
   42e48:	mov    rdx,QWORD PTR [rax]
   42e4b:	add    rax,0x8
   42e4f:	mov    rdx,QWORD PTR [rdx+rcx*1]
   42e53:	mov    rdx,QWORD PTR [rdx]
   42e56:	mov    rdx,QWORD PTR [rdx]
   42e59:	mov    rdx,QWORD PTR [rdx]
   42e5c:	mov    DWORD PTR [rdx],0x0
   42e62:	cmp    rsi,rax
   42e65:	jne    42e48 <FindSkipModeMotionVector+0x118>
   42e67:	add    rcx,0x8
   42e6b:	cmp    rcx,0x20
   42e6f:	jne    42e45 <FindSkipModeMotionVector+0x115>
   42e71:	mov    rax,QWORD PTR [rsp+0x48]
   42e76:	xor    rax,QWORD PTR fs:0x28
   42e7f:	jne    43050 <FindSkipModeMotionVector+0x320>
   42e85:	add    rsp,0x58
   42e89:	pop    rbx
   42e8a:	pop    rbp
   42e8b:	pop    r12
   42e8d:	pop    r13
   42e8f:	ret    
   42e90:	mov    esi,DWORD PTR [rsp+0x20]
   42e94:	test   esi,esi
   42e96:	je     42e3f <FindSkipModeMotionVector+0x10f>
   42e98:	mov    rax,QWORD PTR [rip+0x47b09]        # 8a9a8 <enc_picture>
   42e9f:	mov    r8d,DWORD PTR [rbp+0x214]
   42ea6:	xor    r10d,r10d
   42ea9:	xor    r11d,r11d
   42eac:	mov    rcx,QWORD PTR [rax+0x1968]
   42eb3:	mov    rsi,QWORD PTR [rcx]
   42eb6:	mov    rcx,QWORD PTR [rax+0x1950]
   42ebd:	mov    rdi,QWORD PTR [rcx]
   42ec0:	mov    rcx,QWORD PTR [rip+0x456e9]        # 885b0 <img>
   42ec7:	mov    r9,QWORD PTR [rcx+0x3758]
   42ece:	movsxd rbp,DWORD PTR [rsp+0x30]
   42ed3:	movsxd rcx,DWORD PTR [rsp+0x34]
   42ed8:	mov    rsi,QWORD PTR [rsi+rbp*8]
   42edc:	mov    rdi,QWORD PTR [rdi+rbp*8]
   42ee0:	mov    r13,rcx
   42ee3:	mov    r12,rbp
   42ee6:	mov    rsi,QWORD PTR [rsi+rcx*8]
   42eea:	movsx  edi,WORD PTR [rdi+rcx*2]
   42eee:	movsxd rcx,DWORD PTR [rsp+0x24]
   42ef3:	movsx  esi,WORD PTR [rsi+0x2]
   42ef7:	imul   rcx,rcx,0x278
   42efe:	mov    ecx,DWORD PTR [r9+rcx*1+0x214]
   42f06:	test   r8d,r8d
   42f09:	je     42fc0 <FindSkipModeMotionVector+0x290>
   42f0f:	test   ecx,ecx
   42f11:	je     43040 <FindSkipModeMotionVector+0x310>
   42f17:	test   edx,edx
   42f19:	je     42e3f <FindSkipModeMotionVector+0x10f>
   42f1f:	test   r10d,r10d
   42f22:	je     42fd1 <FindSkipModeMotionVector+0x2a1>
   42f28:	test   edi,edi
   42f2a:	je     4300d <FindSkipModeMotionVector+0x2dd>
   42f30:	lea    rdi,[rsp+0x44]
   42f35:	sub    rsp,0x8
   42f39:	xor    r9d,r9d
   42f3c:	xor    r8d,r8d
   42f3f:	mov    rsi,QWORD PTR [rax+0x1950]
   42f46:	mov    rdx,QWORD PTR [rax+0x1968]
   42f4d:	push   0x10
   42f4f:	xor    ecx,ecx
   42f51:	push   0x10
   42f53:	push   0x0
   42f55:	call   399e0 <SetMotionVectorPredictor>
   42f5a:	add    rsp,0x20
   42f5e:	xor    edi,edi
   42f60:	lea    rsi,[rbx+0x20]
   42f64:	mov    rax,rbx
   42f67:	mov    rdx,QWORD PTR [rax]
   42f6a:	movzx  ecx,WORD PTR [rsp+0x44]
   42f6f:	add    rax,0x8
   42f73:	mov    rdx,QWORD PTR [rdx+rdi*1]
   42f77:	mov    rdx,QWORD PTR [rdx]
   42f7a:	mov    rdx,QWORD PTR [rdx]
   42f7d:	mov    rdx,QWORD PTR [rdx]
   42f80:	mov    WORD PTR [rdx],cx
   42f83:	movzx  ecx,WORD PTR [rsp+0x46]
   42f88:	mov    WORD PTR [rdx+0x2],cx
   42f8c:	cmp    rsi,rax
   42f8f:	jne    42f67 <FindSkipModeMotionVector+0x237>
   42f91:	add    rdi,0x8
   42f95:	cmp    rdi,0x20
   42f99:	jne    42f64 <FindSkipModeMotionVector+0x234>
   42f9b:	jmp    42e71 <FindSkipModeMotionVector+0x141>
   42fa0:	test   ecx,ecx
   42fa2:	je     42e33 <FindSkipModeMotionVector+0x103>
   42fa8:	mov    ecx,DWORD PTR [rsp+0x20]
   42fac:	add    r11d,r11d
   42faf:	sar    r10d,1
   42fb2:	test   ecx,ecx
   42fb4:	je     42e3f <FindSkipModeMotionVector+0x10f>
   42fba:	jmp    42ece <FindSkipModeMotionVector+0x19e>
   42fbf:	nop
   42fc0:	test   ecx,ecx
   42fc2:	je     42f17 <FindSkipModeMotionVector+0x1e7>
   42fc8:	add    esi,esi
   42fca:	sar    edi,1
   42fcc:	jmp    42f17 <FindSkipModeMotionVector+0x1e7>
   42fd1:	mov    rdx,QWORD PTR [rax+0x1968]
   42fd8:	movsxd r8,DWORD PTR [rsp+0x10]
   42fdd:	movsxd rcx,DWORD PTR [rsp+0x14]
   42fe2:	mov    rdx,QWORD PTR [rdx]
   42fe5:	mov    rdx,QWORD PTR [rdx+r8*8]
   42fe9:	mov    rdx,QWORD PTR [rdx+rcx*8]
   42fed:	cmp    WORD PTR [rdx],0x0
   42ff1:	jne    42f28 <FindSkipModeMotionVector+0x1f8>
   42ff7:	test   r11d,r11d
   42ffa:	jne    42f28 <FindSkipModeMotionVector+0x1f8>
   43000:	test   edi,edi
   43002:	jne    42e3f <FindSkipModeMotionVector+0x10f>
   43008:	mov    edi,0x1
   4300d:	mov    rdx,QWORD PTR [rax+0x1968]
   43014:	mov    rdx,QWORD PTR [rdx]
   43017:	mov    rdx,QWORD PTR [rdx+r12*8]
   4301b:	mov    rdx,QWORD PTR [rdx+r13*8]
   4301f:	cmp    WORD PTR [rdx],0x0
   43023:	jne    4302d <FindSkipModeMotionVector+0x2fd>
   43025:	test   esi,esi
   43027:	je     42e3f <FindSkipModeMotionVector+0x10f>
   4302d:	test   edi,edi
   4302f:	je     42f30 <FindSkipModeMotionVector+0x200>
   43035:	jmp    42e3f <FindSkipModeMotionVector+0x10f>
   4303a:	nop    WORD PTR [rax+rax*1+0x0]
   43040:	mov    ecx,esi
   43042:	add    edi,edi
   43044:	shr    ecx,0x1f
   43047:	add    esi,ecx
   43049:	sar    esi,1
   4304b:	jmp    42f17 <FindSkipModeMotionVector+0x1e7>
   43050:	call   4390 <__stack_chk_fail@plt>
   43055:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000043060 <BlockMotionSearch>:
   43060:	endbr64 
   43064:	push   r15
   43066:	push   r14
   43068:	mov    r14d,esi
   4306b:	movsx  rsi,di
   4306f:	push   r13
   43071:	mov    r13d,ecx
   43074:	push   r12
   43076:	mov    r12d,edx
   43079:	sar    r13d,0x2
   4307d:	push   rbp
   4307e:	sar    r12d,0x2
   43082:	push   rbx
   43083:	movsxd rbx,r8d
   43086:	sub    rsp,0xe8
   4308d:	mov    r11,QWORD PTR [rip+0x4551c]        # 885b0 <img>
   43094:	mov    DWORD PTR [rsp+0x70],edi
   43098:	mov    DWORD PTR [rsp+0x8],r8d
   4309d:	add    edx,DWORD PTR [r11+0xa8]
   430a4:	mov    DWORD PTR [rsp+0x74],r9d
   430a9:	add    ecx,DWORD PTR [r11+0xac]
   430b0:	movsd  QWORD PTR [rsp+0x40],xmm0
   430b6:	mov    rax,QWORD PTR fs:0x28
   430bf:	mov    QWORD PTR [rsp+0xd8],rax
   430c7:	xor    eax,eax
   430c9:	mov    rax,QWORD PTR [rip+0x454e8]        # 885b8 <input>
   430d0:	mov    QWORD PTR [rsp+0x60],rbx
   430d5:	mov    DWORD PTR [rsp+0x28],edx
   430d9:	mov    edi,DWORD PTR [rax+rbx*8+0x50]
   430dd:	mov    ebx,DWORD PTR [rax+rbx*8+0x54]
   430e1:	mov    QWORD PTR [rsp+0xa0],rax
   430e9:	mov    DWORD PTR [rsp+0x2c],ecx
   430ed:	mov    DWORD PTR [rsp+0x24],ebx
   430f1:	mov    rbx,QWORD PTR [rip+0x478b0]        # 8a9a8 <enc_picture>
   430f8:	mov    DWORD PTR [rsp+0x38],edi
   430fc:	mov    rdi,QWORD PTR [rbx+0x1968]
   43103:	mov    QWORD PTR [rsp+0x78],rbx
   43108:	movsxd rbx,r14d
   4310b:	mov    QWORD PTR [rsp+0x50],rbx
   43110:	lea    r15,[rbx*8+0x0]
   43118:	mov    rbx,QWORD PTR [rdi+rbx*8]
   4311c:	mov    QWORD PTR [rsp+0x80],rdi
   43124:	mov    QWORD PTR [rsp+0xb0],rbx
   4312c:	mov    rbx,QWORD PTR [r11+0x118f8]
   43133:	mov    QWORD PTR [rsp+0x58],rbx
   43138:	mov    ebx,DWORD PTR [rax+0xcdc]
   4313e:	mov    DWORD PTR [rsp+0xb8],ebx
   43145:	test   ebx,ebx
   43147:	je     43c3f <BlockMotionSearch+0xbdf>
   4314d:	mov    ebx,DWORD PTR [rax+0x4d4]
   43153:	mov    DWORD PTR [rsp+0xa8],0x0
   4315e:	mov    DWORD PTR [rsp+0xbc],ebx
   43165:	test   ebx,ebx
   43167:	jne    43e89 <BlockMotionSearch+0xe29>
   4316d:	movsxd rdi,r13d
   43170:	movsxd rcx,r12d
   43173:	mov    rdx,QWORD PTR [rsp+0x60]
   43178:	mov    QWORD PTR [rsp+0x10],rsi
   4317d:	lea    rax,[rdi*8+0x0]
   43185:	mov    QWORD PTR [rsp+0x68],rdi
   4318a:	lea    rbp,[rsi*8+0x0]
   43192:	mov    QWORD PTR [rsp+0x18],rax
   43197:	mov    rax,QWORD PTR [r11+0x118f0]
   4319e:	lea    rbx,[rdx*8+0x0]
   431a6:	mov    QWORD PTR [rsp+0x98],rcx
   431ae:	mov    rax,QWORD PTR [rax+rcx*8]
   431b2:	mov    rax,QWORD PTR [rax+rdi*8]
   431b6:	mov    rdi,QWORD PTR [rsp+0x50]
   431bb:	mov    rax,QWORD PTR [rax+rdi*8]
   431bf:	mov    rax,QWORD PTR [rax+rsi*8]
   431c3:	mov    rax,QWORD PTR [rax+rdx*8]
   431c7:	mov    QWORD PTR [rsp+0x48],rax
   431cc:	mov    eax,DWORD PTR [rsp+0x24]
   431d0:	test   eax,eax
   431d2:	jle    4326e <BlockMotionSearch+0x20e>
   431d8:	mov    edi,DWORD PTR [rsp+0x2c]
   431dc:	mov    esi,DWORD PTR [rsp+0x38]
   431e0:	mov    QWORD PTR [rsp+0x30],r11
   431e5:	lea    r9,[rip+0x455f4]        # 887e0 <orig_pic.7046>
   431ec:	mov    rcx,QWORD PTR [rip+0x741d5]        # b73c8 <imgY_org>
   431f3:	movsxd r10,DWORD PTR [rsp+0x28]
   431f8:	mov    QWORD PTR [rsp+0x88],r15
   43200:	add    eax,edi
   43202:	mov    QWORD PTR [rsp+0x90],rbp
   4320a:	mov    r8d,edi
   4320d:	mov    r11d,esi
   43210:	add    r10,r10
   43213:	lea    edi,[rsi-0x1]
   43216:	mov    r15,rcx
   43219:	mov    ebp,eax
   4321b:	nop    DWORD PTR [rax+rax*1+0x0]
   43220:	test   r11d,r11d
   43223:	jle    4324c <BlockMotionSearch+0x1ec>
   43225:	movsxd rax,r8d
   43228:	mov    rsi,QWORD PTR [r9]
   4322b:	mov    rcx,QWORD PTR [r15+rax*8]
   4322f:	xor    eax,eax
   43231:	add    rcx,r10
   43234:	nop    DWORD PTR [rax+0x0]
   43238:	movzx  edx,WORD PTR [rcx+rax*2]
   4323c:	mov    WORD PTR [rsi+rax*2],dx
   43240:	mov    rdx,rax
   43243:	add    rax,0x1
   43247:	cmp    rdi,rdx
   4324a:	jne    43238 <BlockMotionSearch+0x1d8>
   4324c:	add    r8d,0x1
   43250:	add    r9,0x8
   43254:	cmp    ebp,r8d
   43257:	jne    43220 <BlockMotionSearch+0x1c0>
   43259:	mov    r11,QWORD PTR [rsp+0x30]
   4325e:	mov    r15,QWORD PTR [rsp+0x88]
   43266:	mov    rbp,QWORD PTR [rsp+0x90]
   4326e:	movsx  eax,WORD PTR [rsp+0x70]
   43273:	mov    r10d,DWORD PTR [rsp+0xb8]
   4327b:	mov    DWORD PTR [rsp+0x30],eax
   4327f:	test   r10d,r10d
   43282:	je     4347d <BlockMotionSearch+0x41d>
   43288:	cmp    DWORD PTR [rsp+0x8],0x6
   4328d:	jle    43def <BlockMotionSearch+0xd8f>
   43293:	mov    rdi,QWORD PTR [rsp+0x98]
   4329b:	mov    rax,QWORD PTR [rsp+0x58]
   432a0:	mov    rax,QWORD PTR [rax+rdi*8]
   432a4:	mov    rdi,QWORD PTR [rsp+0x68]
   432a9:	mov    rax,QWORD PTR [rax+rdi*8]
   432ad:	mov    rdi,QWORD PTR [rsp+0x50]
   432b2:	mov    rax,QWORD PTR [rax+rdi*8]
   432b6:	mov    rdi,QWORD PTR [rsp+0x10]
   432bb:	mov    rax,QWORD PTR [rax+rdi*8]
   432bf:	mov    rax,QWORD PTR [rax+0x28]
   432c3:	movsx  edx,WORD PTR [rax]
   432c6:	movsx  eax,WORD PTR [rax+0x2]
   432ca:	mov    DWORD PTR [rip+0x475b0],edx        # 8a880 <pred_MV_uplayer>
   432d0:	mov    edx,DWORD PTR [r11+0x98]
   432d7:	mov    DWORD PTR [rip+0x475a7],eax        # 8a884 <pred_MV_uplayer+0x4>
   432dd:	mov    eax,DWORD PTR [r11+0x9c]
   432e4:	sar    edx,0x2
   432e7:	sar    eax,0x2
   432ea:	add    edx,r12d
   432ed:	add    eax,r13d
   432f0:	movsxd rdx,edx
   432f3:	cdqe   
   432f5:	cmp    r14d,0x1
   432f9:	je     4403a <BlockMotionSearch+0xfda>
   432ff:	mov    rcx,QWORD PTR [rip+0x47562]        # 8a868 <all_mincost>
   43306:	mov    rdi,QWORD PTR [rsp+0x10]
   4330b:	mov    rdx,QWORD PTR [rcx+rdx*8]
   4330f:	mov    rax,QWORD PTR [rdx+rax*8]
   43313:	mov    rax,QWORD PTR [rax+rdi*8]
   43317:	mov    rax,QWORD PTR [rax+0x28]
   4331b:	mov    edx,DWORD PTR [rax]
   4331d:	mov    eax,edx
   4331f:	shr    eax,0x1f
   43322:	add    eax,edx
   43324:	sar    eax,1
   43326:	mov    DWORD PTR [rip+0x475f4],eax        # 8a920 <pred_SAD_uplayer>
   4332c:	mov    r8d,DWORD PTR [r11+0x18]
   43330:	cmp    r8d,0x1
   43334:	je     440a3 <BlockMotionSearch+0x1043>
   4333a:	mov    esi,DWORD PTR [rip+0x47580]        # 8a8c0 <flag_intra_SAD>
   43340:	mov    eax,0x0
   43345:	test   esi,esi
   43347:	cmove  eax,DWORD PTR [rip+0x475d2]        # 8a920 <pred_SAD_uplayer>
   4334e:	mov    DWORD PTR [rip+0x475cc],eax        # 8a920 <pred_SAD_uplayer>
   43354:	mov    eax,DWORD PTR [rsp+0x30]
   43358:	lea    edi,[rax+0x1]
   4335b:	cmp    DWORD PTR [r11],edi
   4335e:	jle    433ba <BlockMotionSearch+0x35a>
   43360:	mov    edx,DWORD PTR [r11+0x98]
   43367:	mov    eax,DWORD PTR [r11+0x9c]
   4336e:	mov    rcx,QWORD PTR [rip+0x474f3]        # 8a868 <all_mincost>
   43375:	sar    edx,0x2
   43378:	sar    eax,0x2
   4337b:	add    edx,r12d
   4337e:	add    eax,r13d
   43381:	movsxd rdx,edx
   43384:	cdqe   
   43386:	mov    rdx,QWORD PTR [rcx+rdx*8]
   4338a:	mov    rcx,QWORD PTR [rsp+0x10]
   4338f:	mov    rax,QWORD PTR [rdx+rax*8]
   43393:	mov    rax,QWORD PTR [rax+rcx*8]
   43397:	mov    rcx,QWORD PTR [rsp+0x60]
   4339c:	mov    rax,QWORD PTR [rax+rcx*8]
   433a0:	mov    edx,DWORD PTR [rax]
   433a2:	mov    DWORD PTR [rip+0x474e0],edx        # 8a888 <pred_SAD_time>
   433a8:	mov    edx,DWORD PTR [rax+0x4]
   433ab:	mov    eax,DWORD PTR [rax+0x8]
   433ae:	mov    DWORD PTR [rip+0x4754c],edx        # 8a900 <pred_MV_time>
   433b4:	mov    DWORD PTR [rip+0x4754a],eax        # 8a904 <pred_MV_time+0x4>
   433ba:	cmp    r14d,0x1
   433be:	je     4420a <BlockMotionSearch+0x11aa>
   433c4:	mov    rax,QWORD PTR [rsp+0xa0]
   433cc:	cmp    DWORD PTR [rax+0xb40],0x1
   433d3:	je     4415c <BlockMotionSearch+0x10fc>
   433d9:	cmp    WORD PTR [rsp+0x70],0x0
   433df:	jle    442df <BlockMotionSearch+0x127f>
   433e5:	mov    edx,DWORD PTR [r11+0x98]
   433ec:	mov    eax,DWORD PTR [r11+0x9c]
   433f3:	pxor   xmm1,xmm1
   433f7:	pxor   xmm0,xmm0
   433fb:	mov    rcx,QWORD PTR [rip+0x47466]        # 8a868 <all_mincost>
   43402:	cvtsi2ss xmm1,DWORD PTR [rsp+0x30]
   43408:	sar    edx,0x2
   4340b:	sar    eax,0x2
   4340e:	add    edx,r12d
   43411:	add    eax,r13d
   43414:	test   esi,esi
   43416:	movsxd rdx,edx
   43419:	cdqe   
   4341b:	mov    rdx,QWORD PTR [rcx+rdx*8]
   4341f:	mov    rcx,QWORD PTR [rsp+0x60]
   43424:	mov    rax,QWORD PTR [rdx+rax*8]
   43428:	mov    rax,QWORD PTR [rax+rbp*1-0x8]
   4342d:	mov    rdx,QWORD PTR [rax+rcx*8]
   43431:	mov    ecx,0x0
   43436:	mov    eax,DWORD PTR [rdx]
   43438:	cmovne eax,ecx
   4343b:	mov    DWORD PTR [rip+0x4742f],eax        # 8a870 <pred_SAD_ref>
   43441:	mov    eax,DWORD PTR [rdx+0x4]
   43444:	imul   eax,edi
   43447:	imul   edi,DWORD PTR [rdx+0x8]
   4344b:	cvtsi2ss xmm0,eax
   4344f:	divss  xmm0,xmm1
   43453:	cvttss2si eax,xmm0
   43457:	pxor   xmm0,xmm0
   4345b:	cvtsi2ss xmm0,edi
   4345f:	mov    DWORD PTR [rip+0x474a3],eax        # 8a908 <pred_MV_ref>
   43465:	divss  xmm0,xmm1
   43469:	cvttss2si eax,xmm0
   4346d:	mov    DWORD PTR [rip+0x47499],eax        # 8a90c <pred_MV_ref+0x4>
   43473:	mov    eax,DWORD PTR [rsp+0x8]
   43477:	mov    DWORD PTR [rip+0x4744b],eax        # 8a8c8 <FME_blocktype>
   4347d:	mov    rax,QWORD PTR [rsp+0x78]
   43482:	sub    rsp,0x8
   43486:	mov    r8d,r14d
   43489:	mov    r9d,r12d
   4348c:	mov    rsi,QWORD PTR [rax+0x1950]
   43493:	mov    eax,DWORD PTR [rsp+0x2c]
   43497:	push   rax
   43498:	mov    eax,DWORD PTR [rsp+0x48]
   4349c:	push   rax
   4349d:	push   r13
   4349f:	mov    ecx,DWORD PTR [rsp+0x50]
   434a3:	mov    rdi,QWORD PTR [rsp+0x68]
   434a8:	mov    rdx,QWORD PTR [rsp+0xa0]
   434b0:	call   399e0 <SetMotionVectorPredictor>
   434b5:	mov    rdi,QWORD PTR [rsp+0x68]
   434ba:	mov    eax,DWORD PTR [rsp+0x58]
   434be:	movzx  ecx,WORD PTR [rdi]
   434c1:	movzx  esi,WORD PTR [rdi+0x2]
   434c5:	sar    eax,0x2
   434c8:	mov    rdi,QWORD PTR [rip+0x450e9]        # 885b8 <input>
   434cf:	mov    DWORD PTR [rsp+0x30],eax
   434d3:	add    rsp,0x20
   434d7:	mov    r8d,DWORD PTR [rdi+0xcdc]
   434de:	test   r8d,r8d
   434e1:	je     43f28 <BlockMotionSearch+0xec8>
   434e7:	test   cx,cx
   434ea:	lea    edx,[rcx+0x3]
   434ed:	lea    eax,[rsi+0x3]
   434f0:	mov    edi,DWORD PTR [rdi+0x9a0]
   434f6:	cmovns edx,ecx
   434f9:	sar    dx,0x2
   434fd:	test   si,si
   43500:	cmovns eax,esi
   43503:	mov    WORD PTR [rsp+0xc8],dx
   4350b:	sar    ax,0x2
   4350f:	mov    WORD PTR [rsp+0xca],ax
   43517:	test   edi,edi
   43519:	je     43db4 <BlockMotionSearch+0xd54>
   4351f:	movsx  eax,si
   43522:	movsx  edi,cx
   43525:	mov    edx,r14d
   43528:	mov    DWORD PTR [rsp+0xb8],edi
   4352f:	mov    DWORD PTR [rsp+0x80],eax
   43536:	push   0x7fffffff
   4353b:	mov    esi,DWORD PTR [rsp+0x7c]
   4353f:	push   rsi
   43540:	lea    rsi,[rsp+0xda]
   43548:	mov    QWORD PTR [rsp+0xa0],rsi
   43550:	push   rsi
   43551:	lea    rsi,[rsp+0xe0]
   43559:	mov    QWORD PTR [rsp+0xa0],rsi
   43561:	push   rsi
   43562:	push   rax
   43563:	push   rdi
   43564:	movsd  xmm0,QWORD PTR [rsp+0x70]
   4356a:	lea    rdi,[rip+0x4526f]        # 887e0 <orig_pic.7046>
   43571:	mov    r9d,DWORD PTR [rsp+0x38]
   43576:	mov    r8d,DWORD PTR [rsp+0x5c]
   4357b:	mov    ecx,DWORD PTR [rsp+0x58]
   4357f:	mov    esi,DWORD PTR [rsp+0x60]
   43583:	call   167a0 <FastIntegerPelBlockMotionSearch>
   43588:	mov    esi,DWORD PTR [rsp+0x40]
   4358c:	add    rsp,0x30
   43590:	test   esi,esi
   43592:	jle    43642 <BlockMotionSearch+0x5e2>
   43598:	mov    r9d,DWORD PTR [rsp+0x24]
   4359d:	mov    QWORD PTR [rsp+0x50],r15
   435a2:	xor    r8d,r8d
   435a5:	mov    r15d,esi
   435a8:	mov    r11,QWORD PTR [rip+0x472b1]        # 8a860 <all_bwmincost>
   435af:	mov    rdi,QWORD PTR [rip+0x44ffa]        # 885b0 <img>
   435b6:	mov    r10,QWORD PTR [rip+0x472ab]        # 8a868 <all_mincost>
   435bd:	sar    r9d,0x2
   435c1:	nop    DWORD PTR [rax+0x0]
   435c8:	xor    esi,esi
   435ca:	test   r9d,r9d
   435cd:	jg     435f2 <BlockMotionSearch+0x592>
   435cf:	jmp    43634 <BlockMotionSearch+0x5d4>
   435d1:	nop    DWORD PTR [rax+0x0]
   435d8:	mov    rcx,QWORD PTR [r10+rcx*8]
   435dc:	add    esi,0x1
   435df:	mov    rdx,QWORD PTR [rcx+rdx*8]
   435e3:	mov    rdx,QWORD PTR [rdx+rbp*1]
   435e7:	mov    rdx,QWORD PTR [rdx+rbx*1]
   435eb:	mov    DWORD PTR [rdx],eax
   435ed:	cmp    esi,r9d
   435f0:	je     43634 <BlockMotionSearch+0x5d4>
   435f2:	mov    ecx,DWORD PTR [rdi+0x98]
   435f8:	mov    edx,DWORD PTR [rdi+0x9c]
   435fe:	sar    ecx,0x2
   43601:	sar    edx,0x2
   43604:	add    ecx,r12d
   43607:	add    edx,r13d
   4360a:	add    ecx,r8d
   4360d:	add    edx,esi
   4360f:	movsxd rcx,ecx
   43612:	movsxd rdx,edx
   43615:	test   r14d,r14d
   43618:	je     435d8 <BlockMotionSearch+0x578>
   4361a:	mov    rcx,QWORD PTR [r11+rcx*8]
   4361e:	add    esi,0x1
   43621:	mov    rdx,QWORD PTR [rcx+rdx*8]
   43625:	mov    rdx,QWORD PTR [rdx+rbp*1]
   43629:	mov    rdx,QWORD PTR [rdx+rbx*1]
   4362d:	mov    DWORD PTR [rdx],eax
   4362f:	cmp    esi,r9d
   43632:	jne    435f2 <BlockMotionSearch+0x592>
   43634:	add    r8d,0x1
   43638:	cmp    r8d,r15d
   4363b:	jne    435c8 <BlockMotionSearch+0x568>
   4363d:	mov    r15,QWORD PTR [rsp+0x50]
   43642:	mov    rdx,QWORD PTR [rip+0x44f6f]        # 885b8 <input>
   43649:	mov    esi,DWORD PTR [rdx+0x18]
   4364c:	mov    ecx,DWORD PTR [rdx+0xcdc]
   43652:	test   esi,esi
   43654:	je     43a80 <BlockMotionSearch+0xa20>
   4365a:	mov    edx,DWORD PTR [rdx+0x1c]
   4365d:	test   edx,edx
   4365f:	jne    43a80 <BlockMotionSearch+0xa20>
   43665:	mov    eax,0x7fffffff
   4366a:	test   ecx,ecx
   4366c:	jne    43a88 <BlockMotionSearch+0xa28>
   43672:	sub    rsp,0x8
   43676:	mov    edx,r14d
   43679:	lea    rdi,[rip+0x45160]        # 887e0 <orig_pic.7046>
   43680:	push   rax
   43681:	push   0x9
   43683:	push   0x9
   43685:	push   QWORD PTR [rsp+0xb0]
   4368c:	push   QWORD PTR [rsp+0xb0]
   43693:	mov    eax,DWORD PTR [rsp+0xb0]
   4369a:	push   rax
   4369b:	mov    eax,DWORD PTR [rsp+0xf0]
   436a2:	push   rax
   436a3:	mov    r9d,DWORD PTR [rsp+0x48]
   436a8:	movsd  xmm0,QWORD PTR [rsp+0x80]
   436b1:	mov    r8d,DWORD PTR [rsp+0x6c]
   436b6:	mov    ecx,DWORD PTR [rsp+0x68]
   436ba:	mov    esi,DWORD PTR [rsp+0x70]
   436be:	call   3c020 <SubPelBlockMotionSearch>
   436c3:	mov    rdx,QWORD PTR [rip+0x44ee6]        # 885b0 <img>
   436ca:	mov    DWORD PTR [rsp+0xb8],eax
   436d1:	add    rsp,0x40
   436d5:	cmp    DWORD PTR [rsp+0x8],0x1
   436da:	sete   BYTE PTR [rsp+0x74]
   436df:	mov    rax,QWORD PTR [rip+0x44ed2]        # 885b8 <input>
   436e6:	mov    edi,DWORD PTR [rdx+0x18]
   436e9:	mov    r9d,DWORD PTR [rax+0x9a0]
   436f0:	mov    QWORD PTR [rsp+0x50],rax
   436f5:	mov    DWORD PTR [rsp+0x60],edi
   436f9:	test   r9d,r9d
   436fc:	sete   al
   436ff:	and    al,BYTE PTR [rsp+0x74]
   43703:	jne    44080 <BlockMotionSearch+0x1020>
   43709:	mov    rax,QWORD PTR [rsp+0x50]
   4370e:	mov    r8d,DWORD PTR [rax+0xcdc]
   43715:	test   r8d,r8d
   43718:	jne    43c5a <BlockMotionSearch+0xbfa>
   4371e:	mov    eax,DWORD PTR [rsp+0x10]
   43722:	test   eax,eax
   43724:	jle    43d7c <BlockMotionSearch+0xd1c>
   4372a:	mov    r9d,DWORD PTR [rsp+0x24]
   4372f:	mov    rsi,QWORD PTR [rsp+0x68]
   43734:	lea    r10d,[rax+r12*1]
   43738:	mov    edi,r12d
   4373b:	mov    QWORD PTR [rsp+0x30],rdx
   43740:	mov    r11,QWORD PTR [rsp+0x58]
   43745:	sar    r9d,0x2
   43749:	lea    eax,[r9-0x1]
   4374d:	lea    r8,[rsi+rax*1+0x1]
   43752:	mov    rsi,QWORD PTR [rsp+0x18]
   43757:	shl    r8,0x3
   4375b:	nop    DWORD PTR [rax+rax*1+0x0]
   43760:	test   r9d,r9d
   43763:	jle    437b4 <BlockMotionSearch+0x754>
   43765:	movsxd rax,edi
   43768:	mov    QWORD PTR [rsp+0x8],rsi
   4376d:	mov    rcx,QWORD PTR [r11+rax*8]
   43771:	lea    rax,[rcx+rsi*1]
   43775:	add    rcx,r8
   43778:	nop    DWORD PTR [rax+rax*1+0x0]
   43780:	mov    rdx,QWORD PTR [rax]
   43783:	movzx  esi,WORD PTR [rsp+0xc8]
   4378b:	add    rax,0x8
   4378f:	mov    rdx,QWORD PTR [rdx+r15*1]
   43793:	mov    rdx,QWORD PTR [rdx+rbp*1]
   43797:	mov    rdx,QWORD PTR [rdx+rbx*1]
   4379b:	mov    WORD PTR [rdx],si
   4379e:	movzx  esi,WORD PTR [rsp+0xca]
   437a6:	mov    WORD PTR [rdx+0x2],si
   437aa:	cmp    rcx,rax
   437ad:	jne    43780 <BlockMotionSearch+0x720>
   437af:	mov    rsi,QWORD PTR [rsp+0x8]
   437b4:	add    edi,0x1
   437b7:	cmp    r10d,edi
   437ba:	jne    43760 <BlockMotionSearch+0x700>
   437bc:	cmp    DWORD PTR [rsp+0x60],0x1
   437c1:	mov    rdx,QWORD PTR [rsp+0x30]
   437c6:	jne    43d87 <BlockMotionSearch+0xd27>
   437cc:	mov    rax,QWORD PTR [rsp+0x50]
   437d1:	mov    edi,DWORD PTR [rax+0x4e8]
   437d7:	test   edi,edi
   437d9:	je     43d87 <BlockMotionSearch+0xd27>
   437df:	cmp    WORD PTR [rsp+0x70],0x0
   437e5:	jne    43d87 <BlockMotionSearch+0xd27>
   437eb:	cmp    BYTE PTR [rsp+0x74],0x0
   437f0:	je     43d87 <BlockMotionSearch+0xd27>
   437f6:	test   r14d,r14d
   437f9:	mov    rax,QWORD PTR [rdx+0x11908]
   43800:	mov    r9d,r12d
   43803:	mov    r15d,r14d
   43806:	cmovne rax,QWORD PTR [rdx+0x11900]
   4380e:	sete   r8b
   43812:	mov    WORD PTR [rsp+0x74],r14w
   43818:	lea    rdi,[rsp+0xd4]
   43820:	movzx  r8d,r8b
   43824:	sete   BYTE PTR [rsp+0x70]
   43829:	sub    rsp,0x8
   4382d:	mov    QWORD PTR [rsp+0xa8],rax
   43835:	mov    rax,QWORD PTR [rip+0x4716c]        # 8a9a8 <enc_picture>
   4383c:	xor    ecx,ecx
   4383e:	mov    DWORD PTR [rsp+0x68],r8d
   43843:	mov    rdx,QWORD PTR [rax+0x1968]
   4384a:	mov    rsi,QWORD PTR [rax+0x1950]
   43851:	mov    eax,DWORD PTR [rsp+0x2c]
   43855:	push   rax
   43856:	mov    eax,DWORD PTR [rsp+0x48]
   4385a:	push   rax
   4385b:	push   r13
   4385d:	call   399e0 <SetMotionVectorPredictor>
   43862:	movsx  eax,WORD PTR [rsp+0xe8]
   4386a:	add    eax,0x2
   4386d:	sar    eax,0x2
   43870:	mov    WORD PTR [rsp+0xe8],ax
   43878:	mov    ecx,eax
   4387a:	movsx  eax,WORD PTR [rsp+0xea]
   43882:	add    eax,0x2
   43885:	sar    eax,0x2
   43888:	mov    WORD PTR [rsp+0xea],ax
   43890:	mov    edx,eax
   43892:	add    rsp,0x20
   43896:	mov    rax,QWORD PTR [rip+0x44d1b]        # 885b8 <input>
   4389d:	mov    esi,DWORD PTR [rax+0x4ec]
   438a3:	test   esi,esi
   438a5:	js     449f6 <BlockMotionSearch+0x1996>
   438ab:	lea    rdi,[rsp+0xd2]
   438b3:	mov    QWORD PTR [rsp+0xa8],rbx
   438bb:	mov    r14d,0x7fffffff
   438c1:	xor    ebp,ebp
   438c3:	mov    QWORD PTR [rsp+0x58],rdi
   438c8:	lea    rdi,[rsp+0xd0]
   438d0:	mov    rbx,QWORD PTR [rsp+0x48]
   438d5:	mov    QWORD PTR [rsp+0x50],rdi
   438da:	lea    rdi,[rsp+0xce]
   438e2:	mov    QWORD PTR [rsp+0x38],rdi
   438e7:	lea    rdi,[rsp+0xcc]
   438ef:	mov    QWORD PTR [rsp+0x30],rdi
   438f4:	movsx  edi,r15w
   438f8:	mov    DWORD PTR [rsp+0x98],edi
   438ff:	mov    DWORD PTR [rsp+0xb0],r12d
   43907:	jmp    439e3 <BlockMotionSearch+0x983>
   4390c:	movzx  r10d,WORD PTR [rsp+0xcc]
   43915:	mov    WORD PTR [rsp+0xcc],cx
   4391d:	movzx  ecx,BYTE PTR [rsp+0x70]
   43922:	mov    WORD PTR [rsp+0xd0],r10w
   4392b:	movzx  r10d,WORD PTR [rsp+0xce]
   43934:	mov    WORD PTR [rsp+0x8],cx
   43939:	mov    WORD PTR [rsp+0xce],dx
   43941:	mov    WORD PTR [rsp+0xd2],r10w
   4394a:	mov    r10d,DWORD PTR [rsp+0x60]
   4394f:	sub    rsp,0x8
   43953:	mov    ecx,ebp
   43955:	mov    edx,r10d
   43958:	push   r14
   4395a:	mov    eax,DWORD PTR [rax+0x4f0]
   43960:	sar    eax,cl
   43962:	push   rax
   43963:	push   QWORD PTR [rsp+0x70]
   43967:	push   QWORD PTR [rsp+0x70]
   4396b:	push   QWORD PTR [rsp+0x60]
   4396f:	push   QWORD PTR [rsp+0x60]
   43973:	push   r9
   43975:	mov    r9d,0x1
   4397b:	push   r8
   4397d:	push   rdi
   4397e:	lea    rdi,[rip+0x44e5b]        # 887e0 <orig_pic.7046>
   43985:	push   rsi
   43986:	xor    esi,esi
   43988:	push   rbp
   43989:	mov    ecx,DWORD PTR [rsp+0x88]
   43990:	add    ebp,0x1
   43993:	movsd  xmm0,QWORD PTR [rsp+0xa0]
   4399c:	mov    r8d,DWORD PTR [rsp+0x8c]
   439a4:	call   3d0e0 <FullPelBlockMotionBiPred>
   439a9:	movsx  ecx,WORD PTR [rsp+0x130]
   439b1:	movsx  edx,WORD PTR [rsp+0x132]
   439b9:	mov    r14d,eax
   439bc:	mov    rax,QWORD PTR [rip+0x44bf5]        # 885b8 <input>
   439c3:	mov    WORD PTR [rsp+0x128],cx
   439cb:	mov    WORD PTR [rsp+0x12a],dx
   439d3:	add    rsp,0x60
   439d7:	cmp    DWORD PTR [rax+0x4ec],ebp
   439dd:	jl     44457 <BlockMotionSearch+0x13f7>
   439e3:	movsx  r8d,WORD PTR [rbx]
   439e7:	movsx  r9d,WORD PTR [rbx+0x2]
   439ec:	movsx  esi,WORD PTR [rsp+0xd4]
   439f4:	movsx  edi,WORD PTR [rsp+0xd6]
   439fc:	mov    r13d,r8d
   439ff:	mov    r15d,r9d
   43a02:	mov    r11d,esi
   43a05:	mov    r12d,edi
   43a08:	test   bpl,0x1
   43a0c:	jne    4390c <BlockMotionSearch+0x8ac>
   43a12:	mov    r10d,DWORD PTR [rsp+0x98]
   43a1a:	test   ebp,ebp
   43a1c:	je     44057 <BlockMotionSearch+0xff7>
   43a22:	movzx  r13d,WORD PTR [rsp+0xcc]
   43a2b:	mov    WORD PTR [rsp+0xcc],cx
   43a33:	mov    WORD PTR [rsp+0xd0],r13w
   43a3c:	movzx  r13d,WORD PTR [rsp+0xce]
   43a45:	mov    WORD PTR [rsp+0xd2],r13w
   43a4e:	mov    WORD PTR [rsp+0xce],dx
   43a56:	movzx  ecx,WORD PTR [rsp+0x74]
   43a5b:	mov    edx,r8d
   43a5e:	mov    r8d,esi
   43a61:	mov    esi,edx
   43a63:	mov    edx,r9d
   43a66:	movsx  r15d,r12w
   43a6a:	mov    r9d,edi
   43a6d:	mov    WORD PTR [rsp+0x8],cx
   43a72:	mov    edi,edx
   43a74:	mov    r13d,r11d
   43a77:	jmp    4394f <BlockMotionSearch+0x8ef>
   43a7c:	nop    DWORD PTR [rax+0x0]
   43a80:	test   ecx,ecx
   43a82:	je     43672 <BlockMotionSearch+0x612>
   43a88:	mov    r9d,DWORD PTR [rsp+0x8]
   43a8d:	cmp    r9d,0x1
   43a91:	sete   BYTE PTR [rsp+0x74]
   43a96:	cmp    r9d,0x3
   43a9a:	jg     43ea1 <BlockMotionSearch+0xe41>
   43aa0:	sub    rsp,0x8
   43aa4:	mov    edx,r14d
   43aa7:	lea    rdi,[rip+0x44d32]        # 887e0 <orig_pic.7046>
   43aae:	push   rax
   43aaf:	push   0x9
   43ab1:	push   0x9
   43ab3:	push   QWORD PTR [rsp+0xb0]
   43aba:	push   QWORD PTR [rsp+0xb0]
   43ac1:	mov    eax,DWORD PTR [rsp+0xb0]
   43ac8:	push   rax
   43ac9:	mov    eax,DWORD PTR [rsp+0xf0]
   43ad0:	push   rax
   43ad1:	mov    r9d,DWORD PTR [rsp+0x48]
   43ad6:	movsd  xmm0,QWORD PTR [rsp+0x80]
   43adf:	mov    r8d,DWORD PTR [rsp+0x6c]
   43ae4:	mov    ecx,DWORD PTR [rsp+0x68]
   43ae8:	mov    esi,DWORD PTR [rsp+0x70]
   43aec:	call   3c020 <SubPelBlockMotionSearch>
   43af1:	mov    rdx,QWORD PTR [rip+0x44ab8]        # 885b0 <img>
   43af8:	mov    DWORD PTR [rsp+0xb8],eax
   43aff:	mov    r10d,DWORD PTR [rsp+0x50]
   43b04:	add    rsp,0x40
   43b08:	test   r10d,r10d
   43b0b:	jle    436df <BlockMotionSearch+0x67f>
   43b11:	mov    eax,DWORD PTR [rsp+0x24]
   43b15:	mov    QWORD PTR [rsp+0x8],r15
   43b1a:	xor    edi,edi
   43b1c:	mov    r8,QWORD PTR [rip+0x46d3d]        # 8a860 <all_bwmincost>
   43b23:	mov    rdx,QWORD PTR [rip+0x44a86]        # 885b0 <img>
   43b2a:	sar    eax,0x2
   43b2d:	mov    r9,QWORD PTR [rip+0x46d34]        # 8a868 <all_mincost>
   43b34:	movsx  r11d,WORD PTR [rsp+0xc8]
   43b3d:	movsx  r10d,WORD PTR [rsp+0xca]
   43b46:	mov    r15d,eax
   43b49:	nop    DWORD PTR [rax+0x0]
   43b50:	xor    esi,esi
   43b52:	test   r15d,r15d
   43b55:	jg     43bb1 <BlockMotionSearch+0xb51>
   43b57:	jmp    43c28 <BlockMotionSearch+0xbc8>
   43b5c:	nop    DWORD PTR [rax+0x0]
   43b60:	mov    rcx,QWORD PTR [r9+rcx*8]
   43b64:	mov    rax,QWORD PTR [rcx+rax*8]
   43b68:	mov    rax,QWORD PTR [rax+rbp*1]
   43b6c:	mov    rax,QWORD PTR [rax+rbx*1]
   43b70:	mov    DWORD PTR [rax+0x4],r11d
   43b74:	mov    ecx,DWORD PTR [rdx+0x98]
   43b7a:	mov    eax,DWORD PTR [rdx+0x9c]
   43b80:	sar    ecx,0x2
   43b83:	add    ecx,r12d
   43b86:	sar    eax,0x2
   43b89:	add    ecx,edi
   43b8b:	add    eax,r13d
   43b8e:	movsxd rcx,ecx
   43b91:	add    eax,esi
   43b93:	add    esi,0x1
   43b96:	mov    rcx,QWORD PTR [r9+rcx*8]
   43b9a:	cdqe   
   43b9c:	mov    rax,QWORD PTR [rcx+rax*8]
   43ba0:	mov    rax,QWORD PTR [rax+rbp*1]
   43ba4:	mov    rax,QWORD PTR [rax+rbx*1]
   43ba8:	mov    DWORD PTR [rax+0x8],r10d
   43bac:	cmp    esi,r15d
   43baf:	je     43c28 <BlockMotionSearch+0xbc8>
   43bb1:	mov    ecx,DWORD PTR [rdx+0x98]
   43bb7:	mov    eax,DWORD PTR [rdx+0x9c]
   43bbd:	sar    ecx,0x2
   43bc0:	sar    eax,0x2
   43bc3:	add    ecx,r12d
   43bc6:	add    eax,r13d
   43bc9:	add    ecx,edi
   43bcb:	add    eax,esi
   43bcd:	movsxd rcx,ecx
   43bd0:	cdqe   
   43bd2:	test   r14d,r14d
   43bd5:	je     43b60 <BlockMotionSearch+0xb00>
   43bd7:	mov    rcx,QWORD PTR [r8+rcx*8]
   43bdb:	mov    rax,QWORD PTR [rcx+rax*8]
   43bdf:	mov    rax,QWORD PTR [rax+rbp*1]
   43be3:	mov    rax,QWORD PTR [rax+rbx*1]
   43be7:	mov    DWORD PTR [rax+0x4],r11d
   43beb:	mov    ecx,DWORD PTR [rdx+0x98]
   43bf1:	mov    eax,DWORD PTR [rdx+0x9c]
   43bf7:	sar    ecx,0x2
   43bfa:	add    ecx,r12d
   43bfd:	sar    eax,0x2
   43c00:	add    ecx,edi
   43c02:	add    eax,r13d
   43c05:	movsxd rcx,ecx
   43c08:	add    eax,esi
   43c0a:	add    esi,0x1
   43c0d:	mov    rcx,QWORD PTR [r8+rcx*8]
   43c11:	cdqe   
   43c13:	mov    rax,QWORD PTR [rcx+rax*8]
   43c17:	mov    rax,QWORD PTR [rax+rbp*1]
   43c1b:	mov    rax,QWORD PTR [rax+rbx*1]
   43c1f:	mov    DWORD PTR [rax+0x8],r10d
   43c23:	cmp    esi,r15d
   43c26:	jne    43bb1 <BlockMotionSearch+0xb51>
   43c28:	add    edi,0x1
   43c2b:	cmp    edi,DWORD PTR [rsp+0x10]
   43c2f:	jl     43b50 <BlockMotionSearch+0xaf0>
   43c35:	mov    r15,QWORD PTR [rsp+0x8]
   43c3a:	jmp    436df <BlockMotionSearch+0x67f>
   43c3f:	mov    DWORD PTR [rsp+0xa8],0x0
   43c4a:	mov    DWORD PTR [rsp+0xbc],0x0
   43c55:	jmp    4316d <BlockMotionSearch+0x10d>
   43c5a:	mov    r11d,DWORD PTR [rdx+0x9c]
   43c61:	mov    eax,DWORD PTR [rdx+0x98]
   43c67:	mov    edi,DWORD PTR [rsp+0x10]
   43c6b:	sar    r11d,0x2
   43c6f:	sar    eax,0x2
   43c72:	add    r11d,r13d
   43c75:	test   edi,edi
   43c77:	jle    43d7c <BlockMotionSearch+0xd1c>
   43c7d:	add    edi,r12d
   43c80:	mov    r8d,DWORD PTR [rsp+0x24]
   43c85:	movsxd r11,r11d
   43c88:	mov    r10d,r12d
   43c8b:	mov    DWORD PTR [rsp+0x30],edi
   43c8f:	shl    r11,0x3
   43c93:	mov    QWORD PTR [rsp+0x98],rdx
   43c9b:	sar    r8d,0x2
   43c9f:	mov    DWORD PTR [rsp+0xa8],r13d
   43ca7:	mov    r13,QWORD PTR [rsp+0xb0]
   43caf:	lea    r9d,[r8-0x1]
   43cb3:	mov    DWORD PTR [rsp+0xb0],r14d
   43cbb:	mov    r14,QWORD PTR [rsp+0x58]
   43cc0:	mov    DWORD PTR [rsp+0xa0],r12d
   43cc8:	mov    r12d,eax
   43ccb:	nop    DWORD PTR [rax+rax*1+0x0]
   43cd0:	test   r8d,r8d
   43cd3:	jle    43d4d <BlockMotionSearch+0xced>
   43cd5:	movsxd rax,r10d
   43cd8:	mov    rdi,QWORD PTR [rsp+0x18]
   43cdd:	mov    DWORD PTR [rsp+0x8],r8d
   43ce2:	add    rdi,QWORD PTR [r14+rax*8]
   43ce6:	lea    eax,[r12+r10*1]
   43cea:	cdqe   
   43cec:	mov    rsi,QWORD PTR [r13+rax*8+0x0]
   43cf1:	xor    eax,eax
   43cf3:	add    rsi,r11
   43cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43d00:	mov    rdx,QWORD PTR [rdi+rax*8]
   43d04:	mov    rdx,QWORD PTR [rdx+r15*1]
   43d08:	mov    rdx,QWORD PTR [rdx+rbp*1]
   43d0c:	mov    rcx,QWORD PTR [rdx+rbx*1]
   43d10:	movzx  edx,WORD PTR [rsp+0xc8]
   43d18:	mov    WORD PTR [rcx],dx
   43d1b:	movzx  r8d,WORD PTR [rsp+0xca]
   43d24:	mov    WORD PTR [rcx+0x2],r8w
   43d29:	mov    rcx,QWORD PTR [rsi+rax*8]
   43d2d:	mov    WORD PTR [rcx],dx
   43d30:	movzx  edx,WORD PTR [rsp+0xca]
   43d38:	mov    WORD PTR [rcx+0x2],dx
   43d3c:	mov    rdx,rax
   43d3f:	add    rax,0x1
   43d43:	cmp    r9,rdx
   43d46:	jne    43d00 <BlockMotionSearch+0xca0>
   43d48:	mov    r8d,DWORD PTR [rsp+0x8]
   43d4d:	add    r10d,0x1
   43d51:	cmp    DWORD PTR [rsp+0x30],r10d
   43d56:	jne    43cd0 <BlockMotionSearch+0xc70>
   43d5c:	mov    rdx,QWORD PTR [rsp+0x98]
   43d64:	mov    r12d,DWORD PTR [rsp+0xa0]
   43d6c:	mov    r13d,DWORD PTR [rsp+0xa8]
   43d74:	mov    r14d,DWORD PTR [rsp+0xb0]
   43d7c:	cmp    DWORD PTR [rsp+0x60],0x1
   43d81:	je     437cc <BlockMotionSearch+0x76c>
   43d87:	mov    rax,QWORD PTR [rsp+0xd8]
   43d8f:	xor    rax,QWORD PTR fs:0x28
   43d98:	jne    44ae2 <BlockMotionSearch+0x1a82>
   43d9e:	mov    eax,DWORD PTR [rsp+0x78]
   43da2:	add    rsp,0xe8
   43da9:	pop    rbx
   43daa:	pop    rbp
   43dab:	pop    r12
   43dad:	pop    r13
   43daf:	pop    r14
   43db1:	pop    r15
   43db3:	ret    
   43db4:	mov    r11d,DWORD PTR [rsp+0x74]
   43db9:	movsx  edx,dx
   43dbc:	cwde   
   43dbd:	mov    edi,r11d
   43dc0:	neg    edi
   43dc2:	cmp    edx,r11d
   43dc5:	cmovg  edx,r11d
   43dc9:	cmp    edx,edi
   43dcb:	cmovl  edx,edi
   43dce:	cmp    eax,r11d
   43dd1:	cmovg  eax,r11d
   43dd5:	mov    WORD PTR [rsp+0xc8],dx
   43ddd:	cmp    eax,edi
   43ddf:	cmovl  eax,edi
   43de2:	mov    WORD PTR [rsp+0xca],ax
   43dea:	jmp    4351f <BlockMotionSearch+0x4bf>
   43def:	cmp    DWORD PTR [rsp+0x8],0x4
   43df4:	jle    43f9a <BlockMotionSearch+0xf3a>
   43dfa:	mov    rdi,QWORD PTR [rsp+0x98]
   43e02:	mov    rax,QWORD PTR [rsp+0x58]
   43e07:	mov    ecx,DWORD PTR [r11+0x98]
   43e0e:	mov    rax,QWORD PTR [rax+rdi*8]
   43e12:	mov    rdi,QWORD PTR [rsp+0x68]
   43e17:	sar    ecx,0x2
   43e1a:	mov    rax,QWORD PTR [rax+rdi*8]
   43e1e:	mov    rdi,QWORD PTR [rsp+0x50]
   43e23:	add    ecx,r12d
   43e26:	movsxd rcx,ecx
   43e29:	mov    rax,QWORD PTR [rax+rdi*8]
   43e2d:	mov    rdi,QWORD PTR [rsp+0x10]
   43e32:	mov    rax,QWORD PTR [rax+rdi*8]
   43e36:	mov    rax,QWORD PTR [rax+0x20]
   43e3a:	movsx  edx,WORD PTR [rax]
   43e3d:	movsx  eax,WORD PTR [rax+0x2]
   43e41:	mov    DWORD PTR [rip+0x46a3d],eax        # 8a884 <pred_MV_uplayer+0x4>
   43e47:	mov    eax,DWORD PTR [r11+0x9c]
   43e4e:	mov    DWORD PTR [rip+0x46a2c],edx        # 8a880 <pred_MV_uplayer>
   43e54:	sar    eax,0x2
   43e57:	add    eax,r13d
   43e5a:	cdqe   
   43e5c:	cmp    r14d,0x1
   43e60:	je     44877 <BlockMotionSearch+0x1817>
   43e66:	mov    rdx,QWORD PTR [rip+0x469fb]        # 8a868 <all_mincost>
   43e6d:	mov    rdi,QWORD PTR [rsp+0x10]
   43e72:	mov    rdx,QWORD PTR [rdx+rcx*8]
   43e76:	mov    rax,QWORD PTR [rdx+rax*8]
   43e7a:	mov    rax,QWORD PTR [rax+rdi*8]
   43e7e:	mov    rax,QWORD PTR [rax+0x20]
   43e82:	mov    edx,DWORD PTR [rax]
   43e84:	jmp    4331d <BlockMotionSearch+0x2bd>
   43e89:	mov    eax,DWORD PTR [rip+0x71fdd]        # b5e6c <Bframe_ctr>
   43e8f:	cdq    
   43e90:	idiv   ebx
   43e92:	lea    eax,[rdx+0x1]
   43e95:	mov    DWORD PTR [rsp+0xa8],eax
   43e9c:	jmp    4316d <BlockMotionSearch+0x10d>
   43ea1:	push   0x0
   43ea3:	mov    edx,r14d
   43ea6:	lea    rdi,[rip+0x44933]        # 887e0 <orig_pic.7046>
   43ead:	push   rax
   43eae:	push   0x9
   43eb0:	push   0x9
   43eb2:	push   QWORD PTR [rsp+0xb0]
   43eb9:	push   QWORD PTR [rsp+0xb0]
   43ec0:	mov    eax,DWORD PTR [rsp+0xb0]
   43ec7:	push   rax
   43ec8:	mov    eax,DWORD PTR [rsp+0xf0]
   43ecf:	push   rax
   43ed0:	mov    r8d,DWORD PTR [rsp+0x6c]
   43ed5:	movsd  xmm0,QWORD PTR [rsp+0x80]
   43ede:	mov    ecx,DWORD PTR [rsp+0x68]
   43ee2:	mov    esi,DWORD PTR [rsp+0x70]
   43ee6:	call   18a80 <FastSubPelBlockMotionSearch>
   43eeb:	mov    DWORD PTR [rsp+0xb8],eax
   43ef2:	mov    r11d,DWORD PTR [rsp+0x50]
   43ef7:	add    rsp,0x40
   43efb:	test   r11d,r11d
   43efe:	jg     43b11 <BlockMotionSearch+0xab1>
   43f04:	mov    rax,QWORD PTR [rip+0x446ad]        # 885b8 <input>
   43f0b:	mov    rdx,QWORD PTR [rip+0x4469e]        # 885b0 <img>
   43f12:	mov    QWORD PTR [rsp+0x50],rax
   43f17:	mov    eax,DWORD PTR [rdx+0x18]
   43f1a:	mov    DWORD PTR [rsp+0x60],eax
   43f1e:	jmp    43d7c <BlockMotionSearch+0xd1c>
   43f23:	nop    DWORD PTR [rax+rax*1+0x0]
   43f28:	movsx  eax,si
   43f2b:	movsx  edi,cx
   43f2e:	mov    edx,r14d
   43f31:	mov    DWORD PTR [rsp+0xb8],edi
   43f38:	mov    DWORD PTR [rsp+0x80],eax
   43f3f:	push   0x7fffffff
   43f44:	mov    esi,DWORD PTR [rsp+0x7c]
   43f48:	push   rsi
   43f49:	lea    rsi,[rsp+0xda]
   43f51:	mov    QWORD PTR [rsp+0xa0],rsi
   43f59:	push   rsi
   43f5a:	lea    rsi,[rsp+0xe0]
   43f62:	mov    QWORD PTR [rsp+0xa0],rsi
   43f6a:	push   rsi
   43f6b:	push   rax
   43f6c:	push   rdi
   43f6d:	movsd  xmm0,QWORD PTR [rsp+0x70]
   43f73:	lea    rdi,[rip+0x44866]        # 887e0 <orig_pic.7046>
   43f7a:	mov    r9d,DWORD PTR [rsp+0x38]
   43f7f:	mov    r8d,DWORD PTR [rsp+0x5c]
   43f84:	mov    ecx,DWORD PTR [rsp+0x58]
   43f88:	mov    esi,DWORD PTR [rsp+0x60]
   43f8c:	call   3b890 <FastFullPelBlockMotionSearch>
   43f91:	add    rsp,0x30
   43f95:	jmp    43642 <BlockMotionSearch+0x5e2>
   43f9a:	je     44894 <BlockMotionSearch+0x1834>
   43fa0:	cmp    DWORD PTR [rsp+0x8],0x1
   43fa5:	jle    4332c <BlockMotionSearch+0x2cc>
   43fab:	mov    rdi,QWORD PTR [rsp+0x98]
   43fb3:	mov    rax,QWORD PTR [rsp+0x58]
   43fb8:	mov    ecx,DWORD PTR [r11+0x98]
   43fbf:	mov    rax,QWORD PTR [rax+rdi*8]
   43fc3:	mov    rdi,QWORD PTR [rsp+0x68]
   43fc8:	sar    ecx,0x2
   43fcb:	mov    rax,QWORD PTR [rax+rdi*8]
   43fcf:	mov    rdi,QWORD PTR [rsp+0x50]
   43fd4:	add    ecx,r12d
   43fd7:	movsxd rcx,ecx
   43fda:	mov    rax,QWORD PTR [rax+rdi*8]
   43fde:	mov    rdi,QWORD PTR [rsp+0x10]
   43fe3:	mov    rax,QWORD PTR [rax+rdi*8]
   43fe7:	mov    rax,QWORD PTR [rax+0x8]
   43feb:	movsx  edx,WORD PTR [rax]
   43fee:	movsx  eax,WORD PTR [rax+0x2]
   43ff2:	mov    DWORD PTR [rip+0x4688c],eax        # 8a884 <pred_MV_uplayer+0x4>
   43ff8:	mov    eax,DWORD PTR [r11+0x9c]
   43fff:	mov    DWORD PTR [rip+0x4687b],edx        # 8a880 <pred_MV_uplayer>
   44005:	sar    eax,0x2
   44008:	add    eax,r13d
   4400b:	cdqe   
   4400d:	cmp    r14d,0x1
   44011:	je     449d9 <BlockMotionSearch+0x1979>
   44017:	mov    rdx,QWORD PTR [rip+0x4684a]        # 8a868 <all_mincost>
   4401e:	mov    rdi,QWORD PTR [rsp+0x10]
   44023:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44027:	mov    rax,QWORD PTR [rdx+rax*8]
   4402b:	mov    rax,QWORD PTR [rax+rdi*8]
   4402f:	mov    rax,QWORD PTR [rax+0x8]
   44033:	mov    edx,DWORD PTR [rax]
   44035:	jmp    4331d <BlockMotionSearch+0x2bd>
   4403a:	mov    rcx,QWORD PTR [rip+0x4681f]        # 8a860 <all_bwmincost>
   44041:	mov    rdx,QWORD PTR [rcx+rdx*8]
   44045:	mov    rax,QWORD PTR [rdx+rax*8]
   44049:	mov    rax,QWORD PTR [rax]
   4404c:	mov    rax,QWORD PTR [rax+0x28]
   44050:	mov    edx,DWORD PTR [rax]
   44052:	jmp    4331d <BlockMotionSearch+0x2bd>
   44057:	mov    WORD PTR [rsp+0xd2],dx
   4405f:	lea    edx,[rsi+0x2]
   44062:	sar    edx,0x2
   44065:	mov    WORD PTR [rsp+0xd0],cx
   4406d:	mov    WORD PTR [rsp+0xcc],dx
   44075:	lea    edx,[rdi+0x2]
   44078:	sar    edx,0x2
   4407b:	jmp    43a4e <BlockMotionSearch+0x9ee>
   44080:	test   edi,edi
   44082:	sete   sil
   44086:	cmp    edi,0x3
   44089:	sete   cl
   4408c:	or     sil,cl
   4408f:	mov    BYTE PTR [rsp+0x74],sil
   44094:	jne    44592 <BlockMotionSearch+0x1532>
   4409a:	mov    BYTE PTR [rsp+0x74],al
   4409e:	jmp    43709 <BlockMotionSearch+0x6a9>
   440a3:	mov    r9d,DWORD PTR [r11+0x11b30]
   440aa:	test   r9d,r9d
   440ad:	jle    4333a <BlockMotionSearch+0x2da>
   440b3:	cmp    DWORD PTR [rsp+0x8],0x6
   440b8:	jle    44640 <BlockMotionSearch+0x15e0>
   440be:	mov    rdi,QWORD PTR [rsp+0x98]
   440c6:	mov    rax,QWORD PTR [rsp+0x58]
   440cb:	mov    ecx,DWORD PTR [r11+0x98]
   440d2:	mov    rax,QWORD PTR [rax+rdi*8]
   440d6:	mov    rdi,QWORD PTR [rsp+0x68]
   440db:	sar    ecx,0x2
   440de:	mov    rax,QWORD PTR [rax+rdi*8]
   440e2:	mov    rdi,QWORD PTR [rsp+0x50]
   440e7:	add    ecx,r12d
   440ea:	movsxd rcx,ecx
   440ed:	mov    rax,QWORD PTR [rax+rdi*8]
   440f1:	mov    rdi,QWORD PTR [rsp+0x10]
   440f6:	mov    rax,QWORD PTR [rax+rdi*8]
   440fa:	mov    rax,QWORD PTR [rax+0x28]
   440fe:	movsx  edx,WORD PTR [rax]
   44101:	movsx  eax,WORD PTR [rax+0x2]
   44105:	mov    DWORD PTR [rip+0x46779],eax        # 8a884 <pred_MV_uplayer+0x4>
   4410b:	mov    eax,DWORD PTR [r11+0x9c]
   44112:	mov    DWORD PTR [rip+0x46768],edx        # 8a880 <pred_MV_uplayer>
   44118:	sar    eax,0x2
   4411b:	add    eax,r13d
   4411e:	cdqe   
   44120:	cmp    r14d,0x1
   44124:	je     4485a <BlockMotionSearch+0x17fa>
   4412a:	mov    rdx,QWORD PTR [rip+0x46737]        # 8a868 <all_mincost>
   44131:	mov    rdi,QWORD PTR [rsp+0x10]
   44136:	mov    rdx,QWORD PTR [rdx+rcx*8]
   4413a:	mov    rax,QWORD PTR [rdx+rax*8]
   4413e:	mov    rax,QWORD PTR [rax+rdi*8]
   44142:	mov    rax,QWORD PTR [rax+0x28]
   44146:	mov    edx,DWORD PTR [rax]
   44148:	mov    eax,edx
   4414a:	shr    eax,0x1f
   4414d:	add    eax,edx
   4414f:	sar    eax,1
   44151:	mov    DWORD PTR [rip+0x467c9],eax        # 8a920 <pred_SAD_uplayer>
   44157:	jmp    4333a <BlockMotionSearch+0x2da>
   4415c:	test   r8d,r8d
   4415f:	jne    443b6 <BlockMotionSearch+0x1356>
   44165:	mov    edi,DWORD PTR [rsp+0x70]
   44169:	cmp    di,0x1
   4416d:	jle    43473 <BlockMotionSearch+0x413>
   44173:	mov    ecx,DWORD PTR [r11+0x98]
   4417a:	mov    eax,DWORD PTR [r11+0x9c]
   44181:	pxor   xmm1,xmm1
   44185:	mov    rdx,QWORD PTR [rip+0x466dc]        # 8a868 <all_mincost>
   4418c:	sar    ecx,0x2
   4418f:	sar    eax,0x2
   44192:	add    ecx,r12d
   44195:	add    eax,r13d
   44198:	test   esi,esi
   4419a:	movsxd rcx,ecx
   4419d:	cdqe   
   4419f:	mov    rdx,QWORD PTR [rdx+rcx*8]
   441a3:	mov    rcx,QWORD PTR [rsp+0x60]
   441a8:	mov    rax,QWORD PTR [rdx+rax*8]
   441ac:	mov    edx,edi
   441ae:	mov    rax,QWORD PTR [rax+rbp*1-0x10]
   441b3:	mov    rcx,QWORD PTR [rax+rcx*8]
   441b7:	cmove  r8d,DWORD PTR [rcx]
   441bb:	sar    dx,1
   441be:	movsx  edx,dx
   441c1:	cvtsi2ss xmm1,edx
   441c5:	mov    DWORD PTR [rip+0x466a4],r8d        # 8a870 <pred_SAD_ref>
   441cc:	lea    eax,[rdx+0x1]
   441cf:	mov    edx,DWORD PTR [rcx+0x4]
   441d2:	pxor   xmm0,xmm0
   441d6:	imul   edx,eax
   441d9:	cvtsi2ss xmm0,edx
   441dd:	divss  xmm0,xmm1
   441e1:	cvttss2si edx,xmm0
   441e5:	pxor   xmm0,xmm0
   441e9:	mov    DWORD PTR [rip+0x46719],edx        # 8a908 <pred_MV_ref>
   441ef:	imul   eax,DWORD PTR [rcx+0x8]
   441f3:	cvtsi2ss xmm0,eax
   441f7:	divss  xmm0,xmm1
   441fb:	cvttss2si eax,xmm0
   441ff:	mov    DWORD PTR [rip+0x46707],eax        # 8a90c <pred_MV_ref+0x4>
   44205:	jmp    43473 <BlockMotionSearch+0x413>
   4420a:	mov    eax,DWORD PTR [rip+0x71c5c]        # b5e6c <Bframe_ctr>
   44210:	cdq    
   44211:	idiv   DWORD PTR [rsp+0xbc]
   44218:	cmp    edx,0x1
   4421b:	jle    433c4 <BlockMotionSearch+0x364>
   44221:	mov    ecx,DWORD PTR [r11+0x98]
   44228:	mov    eax,DWORD PTR [r11+0x9c]
   4422f:	pxor   xmm2,xmm2
   44233:	mov    rdx,QWORD PTR [rip+0x46626]        # 8a860 <all_bwmincost>
   4423a:	sar    ecx,0x2
   4423d:	sar    eax,0x2
   44240:	add    ecx,r12d
   44243:	add    eax,r13d
   44246:	cmp    DWORD PTR [rsp+0xa8],0x1
   4424e:	movsxd rcx,ecx
   44251:	cdqe   
   44253:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44257:	mov    rcx,QWORD PTR [rsp+0x10]
   4425c:	mov    rax,QWORD PTR [rdx+rax*8]
   44260:	mov    rdx,QWORD PTR [rax+rcx*8]
   44264:	mov    rcx,QWORD PTR [rsp+0x60]
   44269:	mov    rax,QWORD PTR [rax]
   4426c:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44270:	mov    edx,DWORD PTR [rdx]
   44272:	mov    DWORD PTR [rip+0x46610],edx        # 8a888 <pred_SAD_time>
   44278:	mov    rdx,QWORD PTR [rax+rcx*8]
   4427c:	cvtsi2sd xmm2,DWORD PTR [rdx+0x4]
   44281:	je     44923 <BlockMotionSearch+0x18c3>
   44287:	mov    eax,DWORD PTR [rsp+0xbc]
   4428e:	pxor   xmm0,xmm0
   44292:	sub    eax,DWORD PTR [rsp+0xa8]
   44299:	cvtsi2sd xmm0,eax
   4429d:	movsd  xmm1,QWORD PTR [rip+0x2e523]        # 727c8 <INIT_MB_TYPE_I+0x108>
   442a5:	addsd  xmm1,xmm0
   442a9:	addsd  xmm0,QWORD PTR [rip+0x267cf]        # 6aa80 <QP_SCALE_CR+0x40>
   442b1:	divsd  xmm1,xmm0
   442b5:	mulsd  xmm2,xmm1
   442b9:	pxor   xmm0,xmm0
   442bd:	cvtsi2sd xmm0,DWORD PTR [rdx+0x8]
   442c2:	mulsd  xmm0,xmm1
   442c6:	cvttsd2si eax,xmm2
   442ca:	mov    DWORD PTR [rip+0x46630],eax        # 8a900 <pred_MV_time>
   442d0:	cvttsd2si eax,xmm0
   442d4:	mov    DWORD PTR [rip+0x4662a],eax        # 8a904 <pred_MV_time+0x4>
   442da:	jmp    433c4 <BlockMotionSearch+0x364>
   442df:	cmp    r8d,0x1
   442e3:	jne    43473 <BlockMotionSearch+0x413>
   442e9:	test   r14d,r14d
   442ec:	jne    43473 <BlockMotionSearch+0x413>
   442f2:	cmp    WORD PTR [rsp+0x70],0x0
   442f8:	jne    43473 <BlockMotionSearch+0x413>
   442fe:	mov    ecx,DWORD PTR [r11+0x98]
   44305:	mov    eax,DWORD PTR [r11+0x9c]
   4430c:	pxor   xmm0,xmm0
   44310:	pxor   xmm1,xmm1
   44314:	mov    rdx,QWORD PTR [rip+0x46545]        # 8a860 <all_bwmincost>
   4431b:	mov    rdi,QWORD PTR [rsp+0x60]
   44320:	sar    ecx,0x2
   44323:	sar    eax,0x2
   44326:	add    ecx,r12d
   44329:	add    eax,r13d
   4432c:	test   esi,esi
   4432e:	movsxd rcx,ecx
   44331:	cdqe   
   44333:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44337:	mov    ecx,0x0
   4433c:	mov    rdx,QWORD PTR [rdx+rax*8]
   44340:	mov    rax,QWORD PTR [rdx]
   44343:	mov    rax,QWORD PTR [rax+rdi*8]
   44347:	mov    eax,DWORD PTR [rax]
   44349:	cmovne eax,ecx
   4434c:	mov    DWORD PTR [rip+0x4651e],eax        # 8a870 <pred_SAD_ref>
   44352:	mov    rax,QWORD PTR [rsp+0x10]
   44357:	mov    rax,QWORD PTR [rdx+rax*8]
   4435b:	mov    rcx,QWORD PTR [rax+rdi*8]
   4435f:	mov    edi,DWORD PTR [rsp+0xa8]
   44366:	mov    eax,DWORD PTR [rsp+0xbc]
   4436d:	mov    edx,edi
   4436f:	sub    eax,edi
   44371:	neg    edx
   44373:	cvtsi2ss xmm0,eax
   44377:	mov    eax,DWORD PTR [rcx+0x4]
   4437a:	addss  xmm0,DWORD PTR [rip+0x2f1ce]        # 73550 <quant_coef+0x890>
   44382:	imul   eax,edx
   44385:	imul   edx,DWORD PTR [rcx+0x8]
   44389:	cvtsi2ss xmm1,eax
   4438d:	divss  xmm1,xmm0
   44391:	cvttss2si eax,xmm1
   44395:	pxor   xmm1,xmm1
   44399:	cvtsi2ss xmm1,edx
   4439d:	mov    DWORD PTR [rip+0x46565],eax        # 8a908 <pred_MV_ref>
   443a3:	divss  xmm1,xmm0
   443a7:	cvttss2si eax,xmm1
   443ab:	mov    DWORD PTR [rip+0x4655b],eax        # 8a90c <pred_MV_ref+0x4>
   443b1:	jmp    43473 <BlockMotionSearch+0x413>
   443b6:	cmp    r8d,0x1
   443ba:	jne    43473 <BlockMotionSearch+0x413>
   443c0:	test   r14d,r14d
   443c3:	jne    43473 <BlockMotionSearch+0x413>
   443c9:	cmp    WORD PTR [rsp+0x70],0x1
   443cf:	ja     43473 <BlockMotionSearch+0x413>
   443d5:	mov    ecx,DWORD PTR [r11+0x98]
   443dc:	mov    eax,DWORD PTR [r11+0x9c]
   443e3:	pxor   xmm1,xmm1
   443e7:	mov    rdx,QWORD PTR [rip+0x46472]        # 8a860 <all_bwmincost>
   443ee:	mov    rdi,QWORD PTR [rsp+0x60]
   443f3:	sar    ecx,0x2
   443f6:	sar    eax,0x2
   443f9:	add    ecx,r12d
   443fc:	add    eax,r13d
   443ff:	test   esi,esi
   44401:	movsxd rcx,ecx
   44404:	cdqe   
   44406:	mov    rdx,QWORD PTR [rdx+rcx*8]
   4440a:	mov    ecx,0x0
   4440f:	mov    rdx,QWORD PTR [rdx+rax*8]
   44413:	mov    rax,QWORD PTR [rdx]
   44416:	mov    rax,QWORD PTR [rax+rdi*8]
   4441a:	mov    eax,DWORD PTR [rax]
   4441c:	cmovne eax,ecx
   4441f:	mov    DWORD PTR [rip+0x4644b],eax        # 8a870 <pred_SAD_ref>
   44425:	mov    rax,QWORD PTR [rsp+0x10]
   4442a:	mov    rax,QWORD PTR [rdx+rax*8]
   4442e:	mov    edx,DWORD PTR [rsp+0xbc]
   44435:	mov    rcx,QWORD PTR [rax+rdi*8]
   44439:	mov    edi,DWORD PTR [rsp+0xa8]
   44440:	mov    eax,edi
   44442:	sub    edx,edi
   44444:	cvtsi2ss xmm1,edx
   44448:	neg    eax
   4444a:	addss  xmm1,DWORD PTR [rip+0x2f0fe]        # 73550 <quant_coef+0x890>
   44452:	jmp    441cf <BlockMotionSearch+0x116f>
   44457:	mov    rbx,QWORD PTR [rsp+0xa8]
   4445f:	mov    r12d,DWORD PTR [rsp+0xb0]
   44467:	shl    ecx,0x2
   4446a:	shl    edx,0x2
   4446d:	mov    WORD PTR [rsp+0xd0],cx
   44475:	mov    ecx,DWORD PTR [rax+0x4f4]
   4447b:	mov    WORD PTR [rsp+0xd2],dx
   44483:	test   ecx,ecx
   44485:	jne    446eb <BlockMotionSearch+0x168b>
   4448b:	shl    WORD PTR [rsp+0xcc],0x2
   44494:	shl    WORD PTR [rsp+0xce],0x2
   4449d:	cmp    DWORD PTR [rax+0x4f4],0x2
   444a4:	je     44935 <BlockMotionSearch+0x18d5>
   444aa:	movzx  eax,WORD PTR [rsp+0xd0]
   444b2:	mov    WORD PTR [rsp+0xc8],ax
   444ba:	movzx  eax,WORD PTR [rsp+0xd2]
   444c2:	mov    WORD PTR [rsp+0xca],ax
   444ca:	mov    eax,DWORD PTR [rsp+0x10]
   444ce:	test   eax,eax
   444d0:	jle    43d87 <BlockMotionSearch+0xd27>
   444d6:	movsx  rdi,WORD PTR [rsp+0x8]
   444dc:	mov    r8d,DWORD PTR [rsp+0x24]
   444e1:	mov    rbp,QWORD PTR [rsp+0x18]
   444e6:	mov    r13,QWORD PTR [rsp+0xa0]
   444ee:	mov    rsi,rdi
   444f1:	sar    r8d,0x2
   444f5:	shl    rdi,0x3
   444f9:	cmp    si,0x1
   444fd:	mov    rsi,QWORD PTR [rsp+0x68]
   44502:	sbb    r9,r9
   44505:	add    eax,r12d
   44508:	mov    r10d,eax
   4450b:	lea    eax,[r8-0x1]
   4450f:	and    r9d,0x8
   44513:	lea    r11,[rsi+rax*1+0x1]
   44518:	shl    r11,0x3
   4451c:	test   r8d,r8d
   4451f:	jle    44584 <BlockMotionSearch+0x1524>
   44521:	movsxd rax,r12d
   44524:	mov    rsi,QWORD PTR [r13+rax*8+0x0]
   44529:	lea    rax,[rsi+rbp*1]
   4452d:	add    rsi,r11
   44530:	movzx  r14d,WORD PTR [rsp+0xc8]
   44539:	mov    rdx,QWORD PTR [rax]
   4453c:	add    rax,0x8
   44540:	mov    rcx,QWORD PTR [rdx+rdi*1]
   44544:	mov    rdx,QWORD PTR [rdx+r9*1]
   44548:	mov    rcx,QWORD PTR [rcx]
   4454b:	mov    rdx,QWORD PTR [rdx]
   4454e:	mov    rcx,QWORD PTR [rcx+rbx*1]
   44552:	mov    rdx,QWORD PTR [rdx+rbx*1]
   44556:	mov    WORD PTR [rcx],r14w
   4455a:	movzx  r14d,WORD PTR [rsp+0xca]
   44563:	mov    WORD PTR [rcx+0x2],r14w
   44568:	movzx  ecx,WORD PTR [rsp+0xcc]
   44570:	mov    WORD PTR [rdx],cx
   44573:	movzx  ecx,WORD PTR [rsp+0xce]
   4457b:	mov    WORD PTR [rdx+0x2],cx
   4457f:	cmp    rax,rsi
   44582:	jne    44530 <BlockMotionSearch+0x14d0>
   44584:	add    r12d,0x1
   44588:	cmp    r12d,r10d
   4458b:	jne    4451c <BlockMotionSearch+0x14bc>
   4458d:	jmp    43d87 <BlockMotionSearch+0xd27>
   44592:	xor    eax,eax
   44594:	call   42d30 <FindSkipModeMotionVector>
   44599:	movsd  xmm0,QWORD PTR [rsp+0x40]
   4459f:	call   42ac0 <GetSkipCostMB>
   445a4:	movsd  xmm0,QWORD PTR [rsp+0x40]
   445aa:	mulsd  xmm0,QWORD PTR [rip+0x31ad6]        # 76088 <QP2QUANT+0xa8>
   445b2:	addsd  xmm0,QWORD PTR [rip+0x31ad6]        # 76090 <QP2QUANT+0xb0>
   445ba:	movsd  xmm2,QWORD PTR [rip+0x2efae]        # 73570 <quant_coef+0x8b0>
   445c2:	mov    edx,eax
   445c4:	movsd  xmm3,QWORD PTR [rip+0x2ef94]        # 73560 <quant_coef+0x8a0>
   445cc:	movapd xmm1,xmm0
   445d0:	andpd  xmm1,xmm2
   445d4:	ucomisd xmm3,xmm1
   445d8:	ja     44793 <BlockMotionSearch+0x1733>
   445de:	cvttsd2si eax,xmm0
   445e2:	sub    edx,eax
   445e4:	mov    eax,edx
   445e6:	cmp    DWORD PTR [rsp+0x78],edx
   445ea:	jle    44774 <BlockMotionSearch+0x1714>
   445f0:	mov    rdx,QWORD PTR [rip+0x43fb9]        # 885b0 <img>
   445f7:	mov    rdi,QWORD PTR [rip+0x43fba]        # 885b8 <input>
   445fe:	mov    DWORD PTR [rsp+0x78],eax
   44602:	mov    rcx,QWORD PTR [rdx+0x118f8]
   44609:	mov    QWORD PTR [rsp+0x50],rdi
   4460e:	mov    edi,DWORD PTR [rdx+0x18]
   44611:	mov    rcx,QWORD PTR [rcx]
   44614:	mov    DWORD PTR [rsp+0x60],edi
   44618:	mov    rcx,QWORD PTR [rcx]
   4461b:	mov    rcx,QWORD PTR [rcx]
   4461e:	mov    rcx,QWORD PTR [rcx]
   44621:	mov    rcx,QWORD PTR [rcx]
   44624:	movzx  esi,WORD PTR [rcx]
   44627:	movzx  ecx,WORD PTR [rcx+0x2]
   4462b:	mov    WORD PTR [rsp+0xc8],si
   44633:	mov    WORD PTR [rsp+0xca],cx
   4463b:	jmp    43709 <BlockMotionSearch+0x6a9>
   44640:	cmp    DWORD PTR [rsp+0x8],0x4
   44645:	jg     447cb <BlockMotionSearch+0x176b>
   4464b:	je     44a1d <BlockMotionSearch+0x19bd>
   44651:	cmp    DWORD PTR [rsp+0x8],0x1
   44656:	jle    4333a <BlockMotionSearch+0x2da>
   4465c:	mov    rdi,QWORD PTR [rsp+0x98]
   44664:	mov    rax,QWORD PTR [rsp+0x58]
   44669:	mov    ecx,DWORD PTR [r11+0x98]
   44670:	mov    rax,QWORD PTR [rax+rdi*8]
   44674:	mov    rdi,QWORD PTR [rsp+0x68]
   44679:	sar    ecx,0x2
   4467c:	mov    rax,QWORD PTR [rax+rdi*8]
   44680:	mov    rdi,QWORD PTR [rsp+0x50]
   44685:	add    ecx,r12d
   44688:	movsxd rcx,ecx
   4468b:	mov    rax,QWORD PTR [rax+rdi*8]
   4468f:	mov    rdi,QWORD PTR [rsp+0x10]
   44694:	mov    rax,QWORD PTR [rax+rdi*8]
   44698:	mov    rax,QWORD PTR [rax+0x8]
   4469c:	movsx  edx,WORD PTR [rax]
   4469f:	movsx  eax,WORD PTR [rax+0x2]
   446a3:	mov    DWORD PTR [rip+0x461db],eax        # 8a884 <pred_MV_uplayer+0x4>
   446a9:	mov    eax,DWORD PTR [r11+0x9c]
   446b0:	mov    DWORD PTR [rip+0x461ca],edx        # 8a880 <pred_MV_uplayer>
   446b6:	sar    eax,0x2
   446b9:	add    eax,r13d
   446bc:	cdqe   
   446be:	cmp    r14d,0x1
   446c2:	je     44ac5 <BlockMotionSearch+0x1a65>
   446c8:	mov    rdx,QWORD PTR [rip+0x46199]        # 8a868 <all_mincost>
   446cf:	mov    rdi,QWORD PTR [rsp+0x10]
   446d4:	mov    rdx,QWORD PTR [rdx+rcx*8]
   446d8:	mov    rax,QWORD PTR [rdx+rax*8]
   446dc:	mov    rax,QWORD PTR [rax+rdi*8]
   446e0:	mov    rax,QWORD PTR [rax+0x8]
   446e4:	mov    edx,DWORD PTR [rax]
   446e6:	jmp    44148 <BlockMotionSearch+0x10e8>
   446eb:	mov    edx,DWORD PTR [rax+0x18]
   446ee:	mov    eax,0x7fffffff
   446f3:	mov    r9d,0x1
   446f9:	lea    rdi,[rip+0x440e0]        # 887e0 <orig_pic.7046>
   44700:	test   edx,edx
   44702:	movsx  edx,WORD PTR [rsp+0x8]
   44707:	cmovne r14d,eax
   4470b:	sub    rsp,0x8
   4470f:	xor    esi,esi
   44711:	push   r14
   44713:	push   0x9
   44715:	push   0x9
   44717:	lea    rax,[rsp+0xf2]
   4471f:	push   rax
   44720:	lea    rax,[rsp+0xf8]
   44728:	push   rax
   44729:	lea    rax,[rsp+0xfe]
   44731:	push   rax
   44732:	lea    rax,[rsp+0x104]
   4473a:	push   rax
   4473b:	movsx  eax,r13w
   4473f:	push   r15
   44741:	push   rax
   44742:	mov    r8d,DWORD PTR [rsp+0x7c]
   44747:	movsd  xmm0,QWORD PTR [rsp+0x90]
   44750:	mov    ecx,DWORD PTR [rsp+0x78]
   44754:	mulsd  xmm0,QWORD PTR [rip+0x2e6fc]        # 72e58 <quant_coef+0x198>
   4475c:	call   3d9a0 <SubPelBlockSearchBiPred>
   44761:	add    rsp,0x50
   44765:	mov    r14d,eax
   44768:	mov    rax,QWORD PTR [rip+0x43e49]        # 885b8 <input>
   4476f:	jmp    4449d <BlockMotionSearch+0x143d>
   44774:	mov    rax,QWORD PTR [rip+0x43e3d]        # 885b8 <input>
   4477b:	mov    rdx,QWORD PTR [rip+0x43e2e]        # 885b0 <img>
   44782:	mov    QWORD PTR [rsp+0x50],rax
   44787:	mov    eax,DWORD PTR [rdx+0x18]
   4478a:	mov    DWORD PTR [rsp+0x60],eax
   4478e:	jmp    43709 <BlockMotionSearch+0x6a9>
   44793:	cvttsd2si rax,xmm0
   44798:	pxor   xmm1,xmm1
   4479c:	movsd  xmm4,QWORD PTR [rip+0x2e024]        # 727c8 <INIT_MB_TYPE_I+0x108>
   447a4:	andnpd xmm2,xmm0
   447a8:	cvtsi2sd xmm1,rax
   447ad:	movapd xmm3,xmm1
   447b1:	cmpnlesd xmm3,xmm0
   447b6:	movapd xmm0,xmm2
   447ba:	andpd  xmm3,xmm4
   447be:	subsd  xmm1,xmm3
   447c2:	orpd   xmm0,xmm1
   447c6:	jmp    445de <BlockMotionSearch+0x157e>
   447cb:	mov    rdi,QWORD PTR [rsp+0x98]
   447d3:	mov    rax,QWORD PTR [rsp+0x58]
   447d8:	mov    ecx,DWORD PTR [r11+0x98]
   447df:	mov    rax,QWORD PTR [rax+rdi*8]
   447e3:	mov    rdi,QWORD PTR [rsp+0x68]
   447e8:	sar    ecx,0x2
   447eb:	mov    rax,QWORD PTR [rax+rdi*8]
   447ef:	mov    rdi,QWORD PTR [rsp+0x50]
   447f4:	add    ecx,r12d
   447f7:	movsxd rcx,ecx
   447fa:	mov    rax,QWORD PTR [rax+rdi*8]
   447fe:	mov    rdi,QWORD PTR [rsp+0x10]
   44803:	mov    rax,QWORD PTR [rax+rdi*8]
   44807:	mov    rax,QWORD PTR [rax+0x20]
   4480b:	movsx  edx,WORD PTR [rax]
   4480e:	movsx  eax,WORD PTR [rax+0x2]
   44812:	mov    DWORD PTR [rip+0x4606c],eax        # 8a884 <pred_MV_uplayer+0x4>
   44818:	mov    eax,DWORD PTR [r11+0x9c]
   4481f:	mov    DWORD PTR [rip+0x4605b],edx        # 8a880 <pred_MV_uplayer>
   44825:	sar    eax,0x2
   44828:	add    eax,r13d
   4482b:	cdqe   
   4482d:	cmp    r14d,0x1
   44831:	je     44aa8 <BlockMotionSearch+0x1a48>
   44837:	mov    rdx,QWORD PTR [rip+0x4602a]        # 8a868 <all_mincost>
   4483e:	mov    rdi,QWORD PTR [rsp+0x10]
   44843:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44847:	mov    rax,QWORD PTR [rdx+rax*8]
   4484b:	mov    rax,QWORD PTR [rax+rdi*8]
   4484f:	mov    rax,QWORD PTR [rax+0x20]
   44853:	mov    edx,DWORD PTR [rax]
   44855:	jmp    44148 <BlockMotionSearch+0x10e8>
   4485a:	mov    rdx,QWORD PTR [rip+0x45fff]        # 8a860 <all_bwmincost>
   44861:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44865:	mov    rax,QWORD PTR [rdx+rax*8]
   44869:	mov    rax,QWORD PTR [rax]
   4486c:	mov    rax,QWORD PTR [rax+0x28]
   44870:	mov    edx,DWORD PTR [rax]
   44872:	jmp    44148 <BlockMotionSearch+0x10e8>
   44877:	mov    rdx,QWORD PTR [rip+0x45fe2]        # 8a860 <all_bwmincost>
   4487e:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44882:	mov    rax,QWORD PTR [rdx+rax*8]
   44886:	mov    rax,QWORD PTR [rax]
   44889:	mov    rax,QWORD PTR [rax+0x20]
   4488d:	mov    edx,DWORD PTR [rax]
   4488f:	jmp    4331d <BlockMotionSearch+0x2bd>
   44894:	mov    rdi,QWORD PTR [rsp+0x98]
   4489c:	mov    rax,QWORD PTR [rsp+0x58]
   448a1:	mov    ecx,DWORD PTR [r11+0x98]
   448a8:	mov    rax,QWORD PTR [rax+rdi*8]
   448ac:	mov    rdi,QWORD PTR [rsp+0x68]
   448b1:	sar    ecx,0x2
   448b4:	mov    rax,QWORD PTR [rax+rdi*8]
   448b8:	mov    rdi,QWORD PTR [rsp+0x50]
   448bd:	add    ecx,r12d
   448c0:	movsxd rcx,ecx
   448c3:	mov    rax,QWORD PTR [rax+rdi*8]
   448c7:	mov    rdi,QWORD PTR [rsp+0x10]
   448cc:	mov    rax,QWORD PTR [rax+rdi*8]
   448d0:	mov    rax,QWORD PTR [rax+0x10]
   448d4:	movsx  edx,WORD PTR [rax]
   448d7:	movsx  eax,WORD PTR [rax+0x2]
   448db:	mov    DWORD PTR [rip+0x45fa3],eax        # 8a884 <pred_MV_uplayer+0x4>
   448e1:	mov    eax,DWORD PTR [r11+0x9c]
   448e8:	mov    DWORD PTR [rip+0x45f92],edx        # 8a880 <pred_MV_uplayer>
   448ee:	sar    eax,0x2
   448f1:	add    eax,r13d
   448f4:	cdqe   
   448f6:	cmp    r14d,0x1
   448fa:	je     449bc <BlockMotionSearch+0x195c>
   44900:	mov    rdx,QWORD PTR [rip+0x45f61]        # 8a868 <all_mincost>
   44907:	mov    rdi,QWORD PTR [rsp+0x10]
   4490c:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44910:	mov    rax,QWORD PTR [rdx+rax*8]
   44914:	mov    rax,QWORD PTR [rax+rdi*8]
   44918:	mov    rax,QWORD PTR [rax+0x10]
   4491c:	mov    edx,DWORD PTR [rax]
   4491e:	jmp    4331d <BlockMotionSearch+0x2bd>
   44923:	pxor   xmm1,xmm1
   44927:	cvtsi2sd xmm1,DWORD PTR [rsp+0xbc]
   44930:	jmp    442b5 <BlockMotionSearch+0x1255>
   44935:	mov    eax,DWORD PTR [rax+0x18]
   44938:	movsd  xmm0,QWORD PTR [rsp+0x40]
   4493e:	mov    r9d,0x1
   44944:	lea    rdi,[rip+0x43e95]        # 887e0 <orig_pic.7046>
   4494b:	mulsd  xmm0,QWORD PTR [rip+0x2e505]        # 72e58 <quant_coef+0x198>
   44953:	test   eax,eax
   44955:	mov    eax,0x7fffffff
   4495a:	cmovne r14d,eax
   4495e:	xor    edx,edx
   44960:	cmp    WORD PTR [rsp+0x8],0x0
   44966:	sete   dl
   44969:	sub    rsp,0x8
   4496d:	xor    esi,esi
   4496f:	push   r14
   44971:	push   0x9
   44973:	push   0x9
   44975:	lea    rax,[rsp+0xee]
   4497d:	push   rax
   4497e:	lea    rax,[rsp+0xf4]
   44986:	push   rax
   44987:	push   QWORD PTR [rsp+0xc0]
   4498e:	push   QWORD PTR [rsp+0xc0]
   44995:	mov    eax,DWORD PTR [rsp+0xc0]
   4499c:	push   rax
   4499d:	mov    eax,DWORD PTR [rsp+0x100]
   449a4:	push   rax
   449a5:	mov    r8d,DWORD PTR [rsp+0x7c]
   449aa:	mov    ecx,DWORD PTR [rsp+0x78]
   449ae:	call   3d9a0 <SubPelBlockSearchBiPred>
   449b3:	add    rsp,0x50
   449b7:	jmp    444ca <BlockMotionSearch+0x146a>
   449bc:	mov    rdx,QWORD PTR [rip+0x45e9d]        # 8a860 <all_bwmincost>
   449c3:	mov    rdx,QWORD PTR [rdx+rcx*8]
   449c7:	mov    rax,QWORD PTR [rdx+rax*8]
   449cb:	mov    rax,QWORD PTR [rax]
   449ce:	mov    rax,QWORD PTR [rax+0x10]
   449d2:	mov    edx,DWORD PTR [rax]
   449d4:	jmp    4331d <BlockMotionSearch+0x2bd>
   449d9:	mov    rdx,QWORD PTR [rip+0x45e80]        # 8a860 <all_bwmincost>
   449e0:	mov    rdx,QWORD PTR [rdx+rcx*8]
   449e4:	mov    rax,QWORD PTR [rdx+rax*8]
   449e8:	mov    rax,QWORD PTR [rax]
   449eb:	mov    rax,QWORD PTR [rax+0x8]
   449ef:	mov    edx,DWORD PTR [rax]
   449f1:	jmp    4331d <BlockMotionSearch+0x2bd>
   449f6:	mov    WORD PTR [rsp+0x8],r14w
   449fc:	xor    r15d,r15d
   449ff:	xor    r13d,r13d
   44a02:	mov    r14d,0x7fffffff
   44a08:	movsx  ecx,WORD PTR [rsp+0xd0]
   44a10:	movsx  edx,WORD PTR [rsp+0xd2]
   44a18:	jmp    44467 <BlockMotionSearch+0x1407>
   44a1d:	mov    rdi,QWORD PTR [rsp+0x98]
   44a25:	mov    rax,QWORD PTR [rsp+0x58]
   44a2a:	mov    ecx,DWORD PTR [r11+0x98]
   44a31:	mov    rax,QWORD PTR [rax+rdi*8]
   44a35:	mov    rdi,QWORD PTR [rsp+0x68]
   44a3a:	sar    ecx,0x2
   44a3d:	mov    rax,QWORD PTR [rax+rdi*8]
   44a41:	mov    rdi,QWORD PTR [rsp+0x50]
   44a46:	add    ecx,r12d
   44a49:	movsxd rcx,ecx
   44a4c:	mov    rax,QWORD PTR [rax+rdi*8]
   44a50:	mov    rdi,QWORD PTR [rsp+0x10]
   44a55:	mov    rax,QWORD PTR [rax+rdi*8]
   44a59:	mov    rax,QWORD PTR [rax+0x10]
   44a5d:	movsx  edx,WORD PTR [rax]
   44a60:	movsx  eax,WORD PTR [rax+0x2]
   44a64:	mov    DWORD PTR [rip+0x45e1a],eax        # 8a884 <pred_MV_uplayer+0x4>
   44a6a:	mov    eax,DWORD PTR [r11+0x9c]
   44a71:	mov    DWORD PTR [rip+0x45e09],edx        # 8a880 <pred_MV_uplayer>
   44a77:	sar    eax,0x2
   44a7a:	add    eax,r13d
   44a7d:	cdqe   
   44a7f:	cmp    r14d,0x1
   44a83:	je     44ae7 <BlockMotionSearch+0x1a87>
   44a85:	mov    rdx,QWORD PTR [rip+0x45ddc]        # 8a868 <all_mincost>
   44a8c:	mov    rdi,QWORD PTR [rsp+0x10]
   44a91:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44a95:	mov    rax,QWORD PTR [rdx+rax*8]
   44a99:	mov    rax,QWORD PTR [rax+rdi*8]
   44a9d:	mov    rax,QWORD PTR [rax+0x10]
   44aa1:	mov    edx,DWORD PTR [rax]
   44aa3:	jmp    44148 <BlockMotionSearch+0x10e8>
   44aa8:	mov    rdx,QWORD PTR [rip+0x45db1]        # 8a860 <all_bwmincost>
   44aaf:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44ab3:	mov    rax,QWORD PTR [rdx+rax*8]
   44ab7:	mov    rax,QWORD PTR [rax]
   44aba:	mov    rax,QWORD PTR [rax+0x20]
   44abe:	mov    edx,DWORD PTR [rax]
   44ac0:	jmp    44148 <BlockMotionSearch+0x10e8>
   44ac5:	mov    rdx,QWORD PTR [rip+0x45d94]        # 8a860 <all_bwmincost>
   44acc:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44ad0:	mov    rax,QWORD PTR [rdx+rax*8]
   44ad4:	mov    rax,QWORD PTR [rax]
   44ad7:	mov    rax,QWORD PTR [rax+0x8]
   44adb:	mov    edx,DWORD PTR [rax]
   44add:	jmp    44148 <BlockMotionSearch+0x10e8>
   44ae2:	call   4390 <__stack_chk_fail@plt>
   44ae7:	mov    rdx,QWORD PTR [rip+0x45d72]        # 8a860 <all_bwmincost>
   44aee:	mov    rdx,QWORD PTR [rdx+rcx*8]
   44af2:	mov    rax,QWORD PTR [rdx+rax*8]
   44af6:	mov    rax,QWORD PTR [rax]
   44af9:	mov    rax,QWORD PTR [rax+0x10]
   44afd:	mov    edx,DWORD PTR [rax]
   44aff:	jmp    44148 <BlockMotionSearch+0x10e8>
   44b04:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   44b0f:	nop

0000000000044b10 <Get_Direct_Cost8x8>:
   44b10:	endbr64 
   44b14:	push   r15
   44b16:	mov    edx,edi
   44b18:	push   r14
   44b1a:	shr    edx,0x1f
   44b1d:	push   r13
   44b1f:	push   r12
   44b21:	push   rbp
   44b22:	push   rbx
   44b23:	sub    rsp,0x2c8
   44b2a:	mov    r12,QWORD PTR [rip+0x43a7f]        # 885b0 <img>
   44b31:	mov    QWORD PTR [rsp+0x68],rsi
   44b36:	mov    rax,QWORD PTR fs:0x28
   44b3f:	mov    QWORD PTR [rsp+0x2b8],rax
   44b47:	xor    eax,eax
   44b49:	mov    eax,edi
   44b4b:	mov    QWORD PTR [rsp+0x38],0x0
   44b54:	shr    eax,0x1f
   44b57:	mov    DWORD PTR [rsp+0x48],0x0
   44b5f:	add    eax,edi
   44b61:	mov    DWORD PTR [rsp+0x30],0x0
   44b69:	sar    eax,1
   44b6b:	lea    ebx,[rax*8+0x0]
   44b72:	lea    eax,[rdi+rdx*1]
   44b75:	and    eax,0x1
   44b78:	mov    DWORD PTR [rsp+0x64],ebx
   44b7c:	sub    eax,edx
   44b7e:	mov    DWORD PTR [rsp+0x1c],ebx
   44b82:	lea    edi,[rax*8+0x0]
   44b89:	lea    eax,[rbx+0x7]
   44b8c:	mov    DWORD PTR [rsp+0x60],eax
   44b90:	lea    eax,[rdi+0x7]
   44b93:	mov    DWORD PTR [rsp+0x34],eax
   44b97:	movsxd rax,ebx
   44b9a:	add    rax,rax
   44b9d:	mov    DWORD PTR [rsp+0x4c],edi
   44ba1:	mov    QWORD PTR [rsp+0x20],rax
   44ba6:	movsxd rax,edi
   44ba9:	shl    rax,0x4
   44bad:	mov    QWORD PTR [rsp+0x40],rax
   44bb2:	lea    rax,[rsp+0xb0]
   44bba:	mov    QWORD PTR [rsp+0x50],rax
   44bbf:	lea    rax,[rsp+0x70]
   44bc4:	mov    QWORD PTR [rsp+0x10],rax
   44bc9:	mov    rdi,QWORD PTR [rsp+0x50]
   44bce:	mov    eax,DWORD PTR [rsp+0x1c]
   44bd2:	mov    rsi,QWORD PTR [rsp+0x38]
   44bd7:	add    eax,DWORD PTR [r12+0xac]
   44bdf:	mov    ebx,eax
   44be1:	cdqe   
   44be3:	mov    QWORD PTR [rsp+0x58],rdi
   44be8:	mov    rbp,QWORD PTR [rsp+0x40]
   44bed:	lea    rdi,[rdi+rsi*4]
   44bf1:	shl    rax,0x3
   44bf5:	sar    ebx,0x2
   44bf8:	mov    r13d,DWORD PTR [rsp+0x4c]
   44bfd:	mov    QWORD PTR [rsp+0x8],rdi
   44c02:	movsxd rbx,ebx
   44c05:	mov    QWORD PTR [rsp+0x28],rax
   44c0a:	add    rbx,rbx
   44c0d:	nop    DWORD PTR [rax]
   44c10:	mov    r15d,DWORD PTR [r12+0xa8]
   44c18:	mov    rdx,QWORD PTR [rip+0x71259]        # b5e78 <direct_pdir>
   44c1f:	add    r15d,r13d
   44c22:	mov    eax,r15d
   44c25:	sar    eax,0x2
   44c28:	cdqe   
   44c2a:	mov    rdx,QWORD PTR [rdx+rax*8]
   44c2e:	movsx  edx,WORD PTR [rdx+rbx*1]
   44c32:	test   dx,dx
   44c35:	js     44da8 <Get_Direct_Cost8x8+0x298>
   44c3b:	mov    rcx,QWORD PTR [rip+0x5a456]        # 9f098 <direct_ref_idx>
   44c42:	xor    r8d,r8d
   44c45:	mov    edi,r13d
   44c48:	movsxd r15,r15d
   44c4b:	sub    rsp,0x8
   44c4f:	add    r15,r15
   44c52:	mov    rsi,QWORD PTR [rcx]
   44c55:	mov    rcx,QWORD PTR [rcx+0x8]
   44c59:	mov    rsi,QWORD PTR [rsi+rax*8]
   44c5d:	mov    rax,QWORD PTR [rcx+rax*8]
   44c61:	xor    ecx,ecx
   44c63:	movsx  eax,WORD PTR [rax+rbx*1]
   44c67:	movsx  r9d,WORD PTR [rsi+rbx*1]
   44c6c:	push   rax
   44c6d:	mov    esi,DWORD PTR [rsp+0x2c]
   44c71:	call   27e80 <LumaPrediction4x4>
   44c76:	mov    rax,QWORD PTR [rsp+0x30]
   44c7b:	mov    r14,QWORD PTR [rsp+0x38]
   44c80:	xor    r11d,r11d
   44c83:	mov    r12,QWORD PTR [rip+0x43926]        # 885b0 <img>
   44c8a:	mov    r8,QWORD PTR [rsp+0x20]
   44c8f:	lea    r10,[rax+rbp*2]
   44c93:	pop    rdx
   44c94:	pop    rcx
   44c95:	mov    rdi,QWORD PTR [rsp+0x8]
   44c9a:	add    r14,QWORD PTR [rip+0x72727]        # b73c8 <imgY_org>
   44ca1:	add    r10,r12
   44ca4:	mov    rsi,QWORD PTR [r14]
   44ca7:	mov    rcx,r10
   44caa:	xor    eax,eax
   44cac:	add    rsi,r15
   44caf:	movzx  edx,WORD PTR [rsi+rax*2]
   44cb3:	movzx  r9d,WORD PTR [rcx+0x3138]
   44cbb:	add    rcx,0x20
   44cbf:	sub    edx,r9d
   44cc2:	mov    DWORD PTR [rdi+rax*4],edx
   44cc5:	mov    DWORD PTR [r8+rax*4],edx
   44cc9:	add    rax,0x1
   44ccd:	cmp    rax,0x4
   44cd1:	jne    44caf <Get_Direct_Cost8x8+0x19f>
   44cd3:	add    r11d,0x4
   44cd7:	add    r14,0x8
   44cdb:	add    r10,0x2
   44cdf:	add    rdi,0x20
   44ce3:	add    r8,0x10
   44ce7:	cmp    r11d,0x10
   44ceb:	jne    44ca4 <Get_Direct_Cost8x8+0x194>
   44ced:	mov    r14,QWORD PTR [rip+0x438c4]        # 885b8 <input>
   44cf4:	mov    rdi,QWORD PTR [rsp+0x10]
   44cf9:	add    r13d,0x4
   44cfd:	add    rbp,0x40
   44d01:	mov    r15d,DWORD PTR [r14+0x18]
   44d05:	mov    esi,r15d
   44d08:	call   3bae0 <SATD>
   44d0d:	add    QWORD PTR [rsp+0x8],0x10
   44d13:	add    DWORD PTR [rsp+0x30],eax
   44d17:	cmp    r13d,DWORD PTR [rsp+0x34]
   44d1c:	jle    44c10 <Get_Direct_Cost8x8+0x100>
   44d22:	add    DWORD PTR [rsp+0x48],0x4
   44d27:	mov    eax,DWORD PTR [rsp+0x48]
   44d2b:	add    eax,DWORD PTR [rsp+0x64]
   44d2f:	add    QWORD PTR [rsp+0x20],0x8
   44d35:	add    QWORD PTR [rsp+0x38],0x20
   44d3b:	mov    DWORD PTR [rsp+0x1c],eax
   44d3f:	cmp    DWORD PTR [rsp+0x60],eax
   44d43:	jge    44bc9 <Get_Direct_Cost8x8+0xb9>
   44d49:	mov    esi,DWORD PTR [r14+0x9a0]
   44d50:	test   esi,esi
   44d52:	jne    44dbb <Get_Direct_Cost8x8+0x2ab>
   44d54:	mov    eax,DWORD PTR [r14+0xc94]
   44d5b:	test   eax,eax
   44d5d:	je     44dbb <Get_Direct_Cost8x8+0x2ab>
   44d5f:	lea    rdi,[rsp+0x1b0]
   44d67:	mov    r8,QWORD PTR [rsp+0x58]
   44d6c:	mov    rcx,rdi
   44d6f:	xor    eax,eax
   44d71:	mov    edx,DWORD PTR [r8+rax*1]
   44d75:	mov    DWORD PTR [rcx+rax*1],edx
   44d78:	add    rax,0x4
   44d7c:	cmp    rax,0x20
   44d80:	jne    44d71 <Get_Direct_Cost8x8+0x261>
   44d82:	add    esi,0x8
   44d85:	add    r8,0x20
   44d89:	add    rcx,0x20
   44d8d:	cmp    esi,0x40
   44d90:	jne    44d6f <Get_Direct_Cost8x8+0x25f>
   44d92:	mov    esi,r15d
   44d95:	call   3bd40 <SATD8X8>
   44d9a:	mov    rbx,QWORD PTR [rsp+0x68]
   44d9f:	add    DWORD PTR [rbx],eax
   44da1:	jmp    44dbb <Get_Direct_Cost8x8+0x2ab>
   44da3:	nop    DWORD PTR [rax+rax*1+0x0]
   44da8:	mov    rax,QWORD PTR [rsp+0x68]
   44dad:	mov    DWORD PTR [rsp+0x30],0x7fffffff
   44db5:	mov    DWORD PTR [rax],0x7fffffff
   44dbb:	mov    rax,QWORD PTR [rsp+0x2b8]
   44dc3:	xor    rax,QWORD PTR fs:0x28
   44dcc:	jne    44de4 <Get_Direct_Cost8x8+0x2d4>
   44dce:	mov    eax,DWORD PTR [rsp+0x30]
   44dd2:	add    rsp,0x2c8
   44dd9:	pop    rbx
   44dda:	pop    rbp
   44ddb:	pop    r12
   44ddd:	pop    r13
   44ddf:	pop    r14
   44de1:	pop    r15
   44de3:	ret    
   44de4:	call   4390 <__stack_chk_fail@plt>
   44de9:	nop    DWORD PTR [rax+0x0]

0000000000044df0 <Get_Direct_CostMB>:
   44df0:	endbr64 
   44df4:	push   r12
   44df6:	xor    r12d,r12d
   44df9:	push   rbp
   44dfa:	push   rbx
   44dfb:	xor    ebx,ebx
   44dfd:	sub    rsp,0x10
   44e01:	mov    rax,QWORD PTR fs:0x28
   44e0a:	mov    QWORD PTR [rsp+0x8],rax
   44e0f:	xor    eax,eax
   44e11:	mov    DWORD PTR [rsp+0x4],0x0
   44e19:	lea    rbp,[rsp+0x4]
   44e1e:	mov    rsi,rbp
   44e21:	mov    edi,ebx
   44e23:	call   44b10 <Get_Direct_Cost8x8>
   44e28:	add    r12d,eax
   44e2b:	cmp    r12d,0x7fffffff
   44e32:	je     44e60 <Get_Direct_CostMB+0x70>
   44e34:	mov    eax,DWORD PTR [rsp+0x4]
   44e38:	cmp    eax,0x7fffffff
   44e3d:	je     44e60 <Get_Direct_CostMB+0x70>
   44e3f:	add    ebx,0x1
   44e42:	cmp    ebx,0x4
   44e45:	jne    44e1e <Get_Direct_CostMB+0x2e>
   44e47:	mov    rcx,QWORD PTR [rip+0x4376a]        # 885b8 <input>
   44e4e:	mov    edx,DWORD PTR [rcx+0xc94]
   44e54:	cmp    edx,0x1
   44e57:	je     44e80 <Get_Direct_CostMB+0x90>
   44e59:	cmp    edx,0x2
   44e5c:	cmove  r12d,eax
   44e60:	mov    rax,QWORD PTR [rsp+0x8]
   44e65:	xor    rax,QWORD PTR fs:0x28
   44e6e:	jne    44eb3 <Get_Direct_CostMB+0xc3>
   44e70:	add    rsp,0x10
   44e74:	mov    eax,r12d
   44e77:	pop    rbx
   44e78:	pop    rbp
   44e79:	pop    r12
   44e7b:	ret    
   44e7c:	nop    DWORD PTR [rax+0x0]
   44e80:	cmp    eax,r12d
   44e83:	jl     44ea0 <Get_Direct_CostMB+0xb0>
   44e85:	mov    edi,DWORD PTR [rcx+0x950]
   44e8b:	test   edi,edi
   44e8d:	je     44ea0 <Get_Direct_CostMB+0xb0>
   44e8f:	mov    esi,DWORD PTR [rcx+0x954]
   44e95:	test   esi,esi
   44e97:	jne    44ea5 <Get_Direct_CostMB+0xb5>
   44e99:	nop    DWORD PTR [rax+0x0]
   44ea0:	mov    r12d,eax
   44ea3:	jmp    44e60 <Get_Direct_CostMB+0x70>
   44ea5:	mov    edx,DWORD PTR [rcx+0x958]
   44eab:	test   edx,edx
   44ead:	cmove  r12d,eax
   44eb1:	jmp    44e60 <Get_Direct_CostMB+0x70>
   44eb3:	call   4390 <__stack_chk_fail@plt>
   44eb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000044ec0 <PartitionMotionSearch>:
   44ec0:	endbr64 
   44ec4:	push   r15
   44ec6:	mov    edx,0x4
   44ecb:	movsxd rcx,esi
   44ece:	push   r14
   44ed0:	push   r13
   44ed2:	push   r12
   44ed4:	push   rbp
   44ed5:	push   rbx
   44ed6:	movsxd rbx,edi
   44ed9:	sub    rsp,0xc8
   44ee0:	cmp    ebx,0x4
   44ee3:	mov    rax,QWORD PTR [rip+0x436ce]        # 885b8 <input>
   44eea:	mov    r9,QWORD PTR [rip+0x436bf]        # 885b0 <img>
   44ef1:	cmovle rdx,rbx
   44ef5:	mov    DWORD PTR [rsp+0x44],ebx
   44ef9:	mov    r8d,DWORD PTR [r9+0x18]
   44efd:	movsd  QWORD PTR [rsp+0x60],xmm0
   44f03:	mov    edi,DWORD PTR [rax+rdx*8+0x90]
   44f0a:	mov    DWORD PTR [rsp+0x9c],edi
   44f11:	mov    edi,DWORD PTR [rax+rdx*8+0x94]
   44f18:	mov    DWORD PTR [rsp+0xb8],edi
   44f1f:	movsxd rdi,ebx
   44f22:	mov    r10d,DWORD PTR [rax+rdi*8+0x90]
   44f2a:	mov    eax,DWORD PTR [rax+rdi*8+0x94]
   44f31:	mov    DWORD PTR [rsp+0x38],eax
   44f35:	movsxd rax,DWORD PTR [r9+0xc]
   44f39:	mov    rsi,rax
   44f3c:	imul   rax,rax,0x278
   44f43:	add    rax,QWORD PTR [r9+0x3758]
   44f4a:	mov    eax,DWORD PTR [rax+0x214]
   44f50:	test   eax,eax
   44f52:	je     44f62 <PartitionMotionSearch+0xa2>
   44f54:	and    esi,0x1
   44f57:	cmp    esi,0x1
   44f5a:	sbb    eax,eax
   44f5c:	and    eax,0xfffffffe
   44f5f:	add    eax,0x4
   44f62:	cdqe   
   44f64:	lea    rsi,[rip+0x724e5]        # b7450 <listXsize>
   44f6b:	xor    ebx,ebx
   44f6d:	cmp    r8d,0x1
   44f71:	lea    rax,[rsi+rax*4]
   44f75:	sete   bl
   44f78:	mov    QWORD PTR [rsp+0x70],0x0
   44f81:	lea    r15,[rdi*8+0x0]
   44f89:	mov    QWORD PTR [rsp+0x80],rax
   44f91:	movsxd rax,DWORD PTR [rsp+0x38]
   44f96:	add    ebx,0x1
   44f99:	mov    r14,r15
   44f9c:	mov    DWORD PTR [rsp+0x98],ebx
   44fa3:	lea    rbx,[rcx*4+0x0]
   44fab:	mov    r15d,r10d
   44fae:	shl    rax,0x3
   44fb2:	mov    QWORD PTR [rsp+0x30],rbx
   44fb7:	mov    QWORD PTR [rsp+0xa8],rax
   44fbf:	movsxd rax,r10d
   44fc2:	shl    rax,0x3
   44fc6:	mov    QWORD PTR [rsp+0x58],rax
   44fcb:	lea    rax,[rcx+rdx*4]
   44fcf:	mov    QWORD PTR [rsp+0x90],rax
   44fd7:	mov    eax,DWORD PTR [rsp+0x70]
   44fdb:	mov    DWORD PTR [rsp+0x54],eax
   44fdf:	mov    rax,QWORD PTR [rsp+0x80]
   44fe7:	mov    eax,DWORD PTR [rax]
   44fe9:	test   eax,eax
   44feb:	jle    45344 <PartitionMotionSearch+0x484>
   44ff1:	mov    rax,QWORD PTR [rsp+0x70]
   44ff6:	mov    rbx,QWORD PTR [rsp+0x90]
   44ffe:	xor    r13d,r13d
   45001:	mov    DWORD PTR [rsp+0x3c],0x0
   45009:	shl    rax,0x3
   4500d:	mov    QWORD PTR [rsp+0x8],rax
   45012:	lea    rax,[rip+0x30f67]        # 75f80 <by0.6981>
   45019:	movsxd rax,DWORD PTR [rax+rbx*4]
   4501d:	mov    ebx,DWORD PTR [rsp+0xb8]
   45024:	mov    DWORD PTR [rsp+0x88],eax
   4502b:	add    ebx,eax
   4502d:	shl    rax,0x3
   45031:	mov    QWORD PTR [rsp+0xa0],rax
   45039:	mov    rax,QWORD PTR [rip+0x72440]        # b7480 <motion_cost>
   45040:	mov    DWORD PTR [rsp+0x8c],ebx
   45047:	mov    QWORD PTR [rsp+0x48],rax
   4504c:	mov    eax,r13d
   4504f:	mov    r13,r14
   45052:	mov    r14d,eax
   45055:	mov    rdx,QWORD PTR [rip+0x4355c]        # 885b8 <input>
   4505c:	mov    ebx,DWORD PTR [rdx+0x20]
   4505f:	mov    eax,DWORD PTR [rdx+0x984]
   45065:	mov    DWORD PTR [rsp+0x2c],ebx
   45069:	cmp    eax,0x2
   4506c:	je     450a7 <PartitionMotionSearch+0x1e7>
   4506e:	test   r14w,r14w
   45072:	mov    ecx,0x1
   45077:	cmovle ecx,r14d
   4507b:	movsx  ecx,cx
   4507e:	add    ecx,0x1
   45081:	cmp    eax,0x1
   45084:	je     45377 <PartitionMotionSearch+0x4b7>
   4508a:	mov    ebx,DWORD PTR [rsp+0x44]
   4508e:	mov    eax,0x2
   45093:	cmp    ebx,0x2
   45096:	cmovle eax,ebx
   45099:	imul   ecx,eax
   4509c:	mov    eax,DWORD PTR [rsp+0x2c]
   450a0:	cdq    
   450a1:	idiv   ecx
   450a3:	mov    DWORD PTR [rsp+0x2c],eax
   450a7:	mov    rax,QWORD PTR [rip+0x458fa]        # 8a9a8 <enc_picture>
   450ae:	mov    rbx,QWORD PTR [rsp+0x8]
   450b3:	mov    rdx,QWORD PTR [rax+0x1950]
   450ba:	mov    rax,QWORD PTR [rax+0x1968]
   450c1:	mov    rbp,QWORD PTR [rax+rbx*1]
   450c5:	movsx  rax,r14w
   450c9:	mov    r10,QWORD PTR [rdx+rbx*1]
   450cd:	lea    rdi,[rax*8+0x0]
   450d5:	mov    QWORD PTR [rsp+0x10],rdi
   450da:	mov    rdi,QWORD PTR [rsp+0x48]
   450df:	mov    rdx,QWORD PTR [rdi+r13*1]
   450e3:	mov    rdx,QWORD PTR [rdx+rbx*1]
   450e7:	mov    rbx,QWORD PTR [rsp+0x30]
   450ec:	mov    rax,QWORD PTR [rdx+rax*8]
   450f0:	mov    DWORD PTR [rax+rbx*1],0x0
   450f7:	mov    ebx,DWORD PTR [rsp+0x8c]
   450fe:	cmp    DWORD PTR [rsp+0x88],ebx
   45105:	jge    45325 <PartitionMotionSearch+0x465>
   4510b:	mov    rbx,QWORD PTR [rsp+0x90]
   45113:	lea    rax,[rip+0x30e06]        # 75f20 <bx0.6980>
   4511a:	mov    r12,r10
   4511d:	mov    r10,r13
   45120:	movsxd rax,DWORD PTR [rax+rbx*4]
   45124:	mov    ebx,DWORD PTR [rsp+0x9c]
   4512b:	mov    DWORD PTR [rsp+0xbc],eax
   45132:	add    ebx,eax
   45134:	shl    rax,0x3
   45138:	mov    QWORD PTR [rsp+0xb0],rax
   45140:	mov    rax,QWORD PTR [rsp+0xa0]
   45148:	mov    DWORD PTR [rsp+0x40],ebx
   4514c:	mov    QWORD PTR [rsp+0x20],rax
   45151:	mov    eax,DWORD PTR [rsp+0x88]
   45158:	mov    DWORD PTR [rsp+0x7c],eax
   4515c:	lea    eax,[r15-0x1]
   45160:	add    rax,0x1
   45164:	mov    QWORD PTR [rsp+0x68],rax
   45169:	mov    rax,QWORD PTR [rip+0x43440]        # 885b0 <img>
   45170:	mov    edi,DWORD PTR [rsp+0x7c]
   45174:	mov    esi,DWORD PTR [rsp+0xbc]
   4517b:	mov    ecx,DWORD PTR [rsp+0x40]
   4517f:	mov    ebx,DWORD PTR [rax+0x94]
   45185:	add    ebx,edi
   45187:	mov    DWORD PTR [rsp+0x78],ebx
   4518b:	cmp    esi,ecx
   4518d:	jge    452fc <PartitionMotionSearch+0x43c>
   45193:	shl    edi,0x2
   45196:	mov    DWORD PTR [rsp+0x28],esi
   4519a:	mov    r13,QWORD PTR [rsp+0xb0]
   451a2:	mov    DWORD PTR [rsp+0x50],edi
   451a6:	mov    edi,DWORD PTR [rsp+0x38]
   451aa:	add    edi,ebx
   451ac:	mov    rbx,r10
   451af:	mov    DWORD PTR [rsp+0x1c],edi
   451b3:	nop    DWORD PTR [rax+rax*1+0x0]
   451b8:	mov    edi,DWORD PTR [rsp+0x28]
   451bc:	mov    esi,DWORD PTR [rax+0x90]
   451c2:	mov    r8d,DWORD PTR [rsp+0x44]
   451c7:	mov    ecx,DWORD PTR [rsp+0x50]
   451cb:	add    esi,edi
   451cd:	movsd  xmm0,QWORD PTR [rsp+0x60]
   451d3:	mov    r9d,DWORD PTR [rsp+0x2c]
   451d8:	lea    edx,[rdi*4+0x0]
   451df:	mov    DWORD PTR [rsp+0x18],esi
   451e3:	mov    edi,DWORD PTR [rsp+0x3c]
   451e7:	mov    esi,DWORD PTR [rsp+0x54]
   451eb:	call   43060 <BlockMotionSearch>
   451f0:	mov    rcx,QWORD PTR [rsp+0x8]
   451f5:	mov    rdx,QWORD PTR [rsp+0x10]
   451fa:	mov    r8d,eax
   451fd:	mov    rax,QWORD PTR [rip+0x7227c]        # b7480 <motion_cost>
   45204:	mov    QWORD PTR [rsp+0x48],rax
   45209:	mov    rax,QWORD PTR [rax+rbx*1]
   4520d:	mov    rax,QWORD PTR [rax+rcx*1]
   45211:	mov    rcx,QWORD PTR [rsp+0x30]
   45216:	add    rcx,QWORD PTR [rax+rdx*1]
   4521a:	mov    edx,DWORD PTR [rsp+0x38]
   4521e:	add    DWORD PTR [rcx],r8d
   45221:	test   edx,edx
   45223:	jle    452d9 <PartitionMotionSearch+0x419>
   45229:	movsxd rax,DWORD PTR [rsp+0x18]
   4522e:	mov    r11,QWORD PTR [rip+0x4337b]        # 885b0 <img>
   45235:	mov    r9d,DWORD PTR [rsp+0x78]
   4523a:	lea    r10,[rax*8+0x0]
   45242:	add    rax,QWORD PTR [rsp+0x68]
   45247:	lea    rdi,[rax*8+0x0]
   4524f:	nop
   45250:	test   r15d,r15d
   45253:	jle    452ca <PartitionMotionSearch+0x40a>
   45255:	mov    rax,QWORD PTR [r11+0x118f8]
   4525c:	mov    rsi,QWORD PTR [rsp+0x20]
   45261:	mov    DWORD PTR [rsp+0x18],r9d
   45266:	mov    rax,QWORD PTR [rax+r13*1]
   4526a:	mov    rax,QWORD PTR [rax+rsi*1]
   4526e:	mov    rsi,QWORD PTR [rsp+0x8]
   45273:	mov    rax,QWORD PTR [rax+rsi*1]
   45277:	mov    rsi,QWORD PTR [rsp+0x10]
   4527c:	mov    rax,QWORD PTR [rax+rsi*1]
   45280:	movsxd rsi,r9d
   45283:	lea    r8,[rsi*8+0x0]
   4528b:	add    rsi,rsi
   4528e:	mov    rcx,QWORD PTR [rax+rbx*1]
   45292:	mov    rax,r10
   45295:	nop    DWORD PTR [rax]
   45298:	mov    rdx,QWORD PTR [rbp+rax*1+0x0]
   4529d:	movzx  r9d,WORD PTR [rcx]
   452a1:	mov    rdx,QWORD PTR [rdx+r8*1]
   452a5:	mov    WORD PTR [rdx],r9w
   452a9:	movzx  r9d,WORD PTR [rcx+0x2]
   452ae:	mov    WORD PTR [rdx+0x2],r9w
   452b3:	mov    rdx,QWORD PTR [r12+rax*1]
   452b7:	add    rax,0x8
   452bb:	mov    WORD PTR [rdx+rsi*1],r14w
   452c0:	cmp    rax,rdi
   452c3:	jne    45298 <PartitionMotionSearch+0x3d8>
   452c5:	mov    r9d,DWORD PTR [rsp+0x18]
   452ca:	add    r9d,0x1
   452ce:	cmp    DWORD PTR [rsp+0x1c],r9d
   452d3:	jne    45250 <PartitionMotionSearch+0x390>
   452d9:	add    DWORD PTR [rsp+0x28],r15d
   452de:	add    r13,QWORD PTR [rsp+0x58]
   452e3:	mov    eax,DWORD PTR [rsp+0x28]
   452e7:	cmp    eax,DWORD PTR [rsp+0x40]
   452eb:	jge    452f9 <PartitionMotionSearch+0x439>
   452ed:	mov    rax,QWORD PTR [rip+0x432bc]        # 885b0 <img>
   452f4:	jmp    451b8 <PartitionMotionSearch+0x2f8>
   452f9:	mov    r10,rbx
   452fc:	mov    ebx,DWORD PTR [rsp+0x38]
   45300:	mov    rdi,QWORD PTR [rsp+0xa8]
   45308:	add    DWORD PTR [rsp+0x7c],ebx
   4530c:	mov    eax,DWORD PTR [rsp+0x7c]
   45310:	add    QWORD PTR [rsp+0x20],rdi
   45315:	cmp    eax,DWORD PTR [rsp+0x8c]
   4531c:	jl     45169 <PartitionMotionSearch+0x2a9>
   45322:	mov    r13,r10
   45325:	add    r14d,0x1
   45329:	mov    rbx,QWORD PTR [rsp+0x80]
   45331:	movsx  eax,r14w
   45335:	mov    DWORD PTR [rsp+0x3c],eax
   45339:	cmp    eax,DWORD PTR [rbx]
   4533b:	jl     45055 <PartitionMotionSearch+0x195>
   45341:	mov    r14,r13
   45344:	add    QWORD PTR [rsp+0x70],0x1
   4534a:	mov    rax,QWORD PTR [rsp+0x70]
   4534f:	add    QWORD PTR [rsp+0x80],0x4
   45358:	cmp    DWORD PTR [rsp+0x98],eax
   4535f:	jg     44fd7 <PartitionMotionSearch+0x117>
   45365:	add    rsp,0xc8
   4536c:	pop    rbx
   4536d:	pop    rbp
   4536e:	pop    r12
   45370:	pop    r13
   45372:	pop    r14
   45374:	pop    r15
   45376:	ret    
   45377:	mov    eax,ebx
   45379:	cdq    
   4537a:	idiv   ecx
   4537c:	mov    DWORD PTR [rsp+0x2c],eax
   45380:	jmp    450a7 <PartitionMotionSearch+0x1e7>
   45385:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000045390 <Get_Direct_Motion_Vectors>:
   45390:	endbr64 
   45394:	push   r15
   45396:	push   r14
   45398:	push   r13
   4539a:	push   r12
   4539c:	push   rbp
   4539d:	push   rbx
   4539e:	sub    rsp,0x118
   453a5:	mov    r15,QWORD PTR [rip+0x43204]        # 885b0 <img>
   453ac:	mov    rax,QWORD PTR fs:0x28
   453b5:	mov    QWORD PTR [rsp+0x108],rax
   453bd:	xor    eax,eax
   453bf:	movsxd rax,DWORD PTR [r15+0xc]
   453c3:	mov    r14,QWORD PTR [r15+0x118f8]
   453ca:	mov    rdi,rax
   453cd:	imul   rax,rax,0x278
   453d4:	add    rax,QWORD PTR [r15+0x3758]
   453db:	mov    QWORD PTR [rsp+0x50],rax
   453e0:	mov    rbx,rax
   453e3:	mov    eax,DWORD PTR [r15+0x11ad0]
   453ea:	mov    edx,eax
   453ec:	mov    DWORD PTR [rsp+0x10],eax
   453f0:	mov    rax,QWORD PTR [rip+0x43a11]        # 88e08 <Co_located>
   453f7:	test   edx,edx
   453f9:	je     45409 <Get_Direct_Motion_Vectors+0x79>
   453fb:	mov    edx,DWORD PTR [rbx+0x214]
   45401:	test   edx,edx
   45403:	jne    4579b <Get_Direct_Motion_Vectors+0x40b>
   45409:	mov    rdx,QWORD PTR [rax+0x650]
   45410:	mov    rbx,QWORD PTR [rax+0x658]
   45417:	mov    r13,QWORD PTR [rax+0x640]
   4541e:	mov    rax,QWORD PTR [rax+0x648]
   45425:	mov    QWORD PTR [rsp+0x68],rdx
   4542a:	mov    QWORD PTR [rsp+0x58],rax
   4542f:	mov    eax,DWORD PTR [r15+0x1193c]
   45436:	test   eax,eax
   45438:	jne    457da <Get_Direct_Motion_Vectors+0x44a>
   4543e:	mov    rax,QWORD PTR [rip+0x45563]        # 8a9a8 <enc_picture>
   45445:	mov    r12,QWORD PTR [r13+0x0]
   45449:	and    edi,0x1
   4544c:	mov    QWORD PTR [rsp+0x8],0x0
   45455:	mov    ecx,DWORD PTR [r15+0xac]
   4545c:	mov    rdx,QWORD PTR [rip+0x59c35]        # 9f098 <direct_ref_idx>
   45463:	mov    DWORD PTR [rsp+0x7c],edi
   45467:	mov    QWORD PTR [rsp+0x60],rax
   4546c:	mov    eax,DWORD PTR [r15+0x9c]
   45473:	sar    ecx,0x2
   45476:	mov    rbx,QWORD PTR [rdx]
   45479:	mov    QWORD PTR [rsp+0x48],r15
   4547e:	sar    eax,0x2
   45481:	movsxd rcx,ecx
   45484:	mov    QWORD PTR [rsp+0x40],r14
   45489:	cdqe   
   4548b:	lea    r11,[rcx+rcx*1]
   4548f:	sub    rax,rcx
   45492:	add    rax,rax
   45495:	mov    QWORD PTR [rsp+0x70],rax
   4549a:	mov    eax,DWORD PTR [r15+0xa8]
   454a1:	sar    eax,0x2
   454a4:	cdqe   
   454a6:	shl    rax,0x3
   454aa:	mov    QWORD PTR [rsp+0x30],rax
   454af:	add    r12,rax
   454b2:	mov    eax,DWORD PTR [r15+0x98]
   454b9:	sar    eax,0x2
   454bc:	cdqe   
   454be:	shl    rax,0x3
   454c2:	add    rbx,rax
   454c5:	mov    QWORD PTR [rsp+0x28],rbx
   454ca:	mov    rbx,QWORD PTR [rdx+0x8]
   454ce:	add    rbx,rax
   454d1:	add    rax,QWORD PTR [rip+0x709a0]        # b5e78 <direct_pdir>
   454d8:	mov    QWORD PTR [rsp+0x20],rbx
   454dd:	mov    QWORD PTR [rsp+0x18],rax
   454e2:	lea    rax,[r11*4+0x0]
   454ea:	xor    edx,edx
   454ec:	mov    QWORD PTR [rsp+0x38],rax
   454f1:	mov    rax,QWORD PTR [rsp+0x70]
   454f6:	lea    r10,[rax+r11*1]
   454fa:	mov    r15d,DWORD PTR [rsp+0x10]
   454ff:	xor    esi,esi
   45501:	test   r15d,r15d
   45504:	je     45522 <Get_Direct_Motion_Vectors+0x192>
   45506:	mov    rax,QWORD PTR [rsp+0x50]
   4550b:	mov    esi,DWORD PTR [rax+0x214]
   45511:	test   esi,esi
   45513:	je     45522 <Get_Direct_Motion_Vectors+0x192>
   45515:	cmp    DWORD PTR [rsp+0x7c],0x1
   4551a:	sbb    esi,esi
   4551c:	and    esi,0xfffffffe
   4551f:	add    esi,0x4
   45522:	mov    rax,QWORD PTR [rsp+0x30]
   45527:	mov    rdi,QWORD PTR [rsp+0x28]
   4552c:	xor    ebp,ebp
   4552e:	lea    rbx,[rax+rdx*1]
   45532:	mov    rax,QWORD PTR [r12+rdx*1]
   45536:	cmp    WORD PTR [rax+r11*1],0xffff
   4553c:	mov    rax,QWORD PTR [rdi+rdx*1]
   45540:	sete   bpl
   45544:	add    rax,r10
   45547:	mov    QWORD PTR [rsp],rax
   4554b:	mov    rax,QWORD PTR [rsp+0x20]
   45550:	mov    r14,QWORD PTR [rax+rdx*1]
   45554:	mov    rax,QWORD PTR [rsp+0x18]
   45559:	mov    r15,QWORD PTR [rax+rdx*1]
   4555d:	mov    rax,QWORD PTR [r13+rbp*8+0x0]
   45562:	add    r14,r10
   45565:	mov    rax,QWORD PTR [rax+rbx*1]
   45569:	add    r15,r10
   4556c:	cmp    WORD PTR [rax+r11*1],0xffff
   45572:	jne    45618 <Get_Direct_Motion_Vectors+0x288>
   45578:	mov    rax,QWORD PTR [rsp+0x40]
   4557d:	mov    rbx,QWORD PTR [rsp+0x8]
   45582:	xor    ebp,ebp
   45584:	mov    rax,QWORD PTR [rax+rdx*1]
   45588:	mov    rax,QWORD PTR [rax+rbx*1]
   4558c:	xor    ebx,ebx
   4558e:	mov    rcx,QWORD PTR [rax]
   45591:	mov    rax,QWORD PTR [rax+0x8]
   45595:	mov    rcx,QWORD PTR [rcx]
   45598:	mov    rax,QWORD PTR [rax]
   4559b:	mov    rcx,QWORD PTR [rcx]
   4559e:	mov    rax,QWORD PTR [rax]
   455a1:	mov    DWORD PTR [rcx],0x0
   455a7:	mov    DWORD PTR [rax],0x0
   455ad:	mov    rax,QWORD PTR [rsp]
   455b1:	mov    WORD PTR [rax],bx
   455b4:	mov    WORD PTR [r14],bp
   455b8:	mov    r14d,0x2
   455be:	mov    WORD PTR [r15],r14w
   455c2:	add    rdx,0x8
   455c6:	cmp    rdx,0x20
   455ca:	jne    454fa <Get_Direct_Motion_Vectors+0x16a>
   455d0:	add    QWORD PTR [rsp+0x8],0x8
   455d6:	mov    rax,QWORD PTR [rsp+0x8]
   455db:	add    r11,0x2
   455df:	cmp    rax,0x20
   455e3:	jne    454e2 <Get_Direct_Motion_Vectors+0x152>
   455e9:	mov    rax,QWORD PTR [rsp+0x108]
   455f1:	xor    rax,QWORD PTR fs:0x28
   455fa:	jne    46571 <Get_Direct_Motion_Vectors+0x11e1>
   45600:	add    rsp,0x118
   45607:	pop    rbx
   45608:	pop    rbp
   45609:	pop    r12
   4560b:	pop    r13
   4560d:	pop    r14
   4560f:	pop    r15
   45611:	ret    
   45612:	nop    WORD PTR [rax+rax*1+0x0]
   45618:	mov    rax,QWORD PTR [rsp+0x48]
   4561d:	movsxd rsi,esi
   45620:	lea    rdi,[rip+0x71e29]        # b7450 <listXsize>
   45627:	mov    eax,DWORD PTR [rax+0x11940]
   4562d:	cmp    DWORD PTR [rdi+rsi*4],eax
   45630:	cmovle eax,DWORD PTR [rdi+rsi*4]
   45634:	test   eax,eax
   45636:	jle    45758 <Get_Direct_Motion_Vectors+0x3c8>
   4563c:	mov    rdi,QWORD PTR [rsp+0x58]
   45641:	lea    r9d,[rax-0x1]
   45645:	mov    rax,rsi
   45648:	shl    rax,0x5
   4564c:	mov    rcx,QWORD PTR [rdi+rbp*8]
   45650:	mov    rdi,QWORD PTR [rsp+0x38]
   45655:	add    rax,rsi
   45658:	mov    rcx,QWORD PTR [rcx+rbx*1]
   4565c:	mov    r8,QWORD PTR [rcx+rdi*1]
   45660:	mov    rcx,QWORD PTR [rsp+0x60]
   45665:	lea    rdi,[rcx+rax*8]
   45669:	xor    eax,eax
   4566b:	jmp    45680 <Get_Direct_Motion_Vectors+0x2f0>
   4566d:	nop    DWORD PTR [rax]
   45670:	lea    rcx,[rax+0x1]
   45674:	cmp    r9,rax
   45677:	je     45758 <Get_Direct_Motion_Vectors+0x3c8>
   4567d:	mov    rax,rcx
   45680:	movsxd rcx,eax
   45683:	cmp    QWORD PTR [rdi+rax*8+0x18],r8
   45688:	jne    45670 <Get_Direct_Motion_Vectors+0x2e0>
   4568a:	mov    rdi,rsi
   4568d:	shl    rdi,0x4
   45691:	sub    rdi,rsi
   45694:	lea    rsi,[rcx+rdi*1+0x4654]
   4569c:	mov    rdi,QWORD PTR [rsp+0x48]
   456a1:	mov    edi,DWORD PTR [rdi+rsi*4]
   456a4:	mov    rsi,QWORD PTR [rsp+0x68]
   456a9:	mov    rsi,QWORD PTR [rsi+rbp*8]
   456ad:	mov    rsi,QWORD PTR [rsi+rbx*1]
   456b1:	mov    rbx,QWORD PTR [rsp+0x38]
   456b6:	mov    r8,QWORD PTR [rsi+rbx*1]
   456ba:	mov    rbx,QWORD PTR [rsp+0x40]
   456bf:	mov    r9,QWORD PTR [rbx+rdx*1]
   456c3:	mov    rbx,QWORD PTR [rsp+0x8]
   456c8:	movsx  esi,WORD PTR [r8]
   456cc:	mov    r9,QWORD PTR [r9+rbx*1]
   456d0:	mov    rbx,QWORD PTR [r9]
   456d3:	mov    r9,QWORD PTR [r9+0x8]
   456d7:	mov    r9,QWORD PTR [r9]
   456da:	mov    r9,QWORD PTR [r9]
   456dd:	cmp    edi,0x270f
   456e3:	je     45780 <Get_Direct_Motion_Vectors+0x3f0>
   456e9:	imul   esi,edi
   456ec:	mov    rcx,QWORD PTR [rbx+rcx*8]
   456f0:	mov    rcx,QWORD PTR [rcx]
   456f3:	sub    esi,0xffffff80
   456f6:	sar    esi,0x8
   456f9:	mov    WORD PTR [rcx],si
   456fc:	movsx  esi,WORD PTR [r8+0x2]
   45701:	imul   esi,edi
   45704:	sub    edi,0x100
   4570a:	sub    esi,0xffffff80
   4570d:	sar    esi,0x8
   45710:	mov    WORD PTR [rcx+0x2],si
   45714:	movsx  ecx,WORD PTR [r8]
   45718:	imul   ecx,edi
   4571b:	sub    ecx,0xffffff80
   4571e:	sar    ecx,0x8
   45721:	mov    WORD PTR [r9],cx
   45725:	movsx  ecx,WORD PTR [r8+0x2]
   4572a:	imul   edi,ecx
   4572d:	sub    edi,0xffffff80
   45730:	sar    edi,0x8
   45733:	mov    WORD PTR [r9+0x2],di
   45738:	mov    rbx,QWORD PTR [rsp]
   4573c:	xor    r8d,r8d
   4573f:	mov    r9d,0x2
   45745:	mov    WORD PTR [rbx],ax
   45748:	mov    WORD PTR [r14],r8w
   4574c:	mov    WORD PTR [r15],r9w
   45750:	jmp    455c2 <Get_Direct_Motion_Vectors+0x232>
   45755:	nop    DWORD PTR [rax]
   45758:	mov    rax,QWORD PTR [rsp]
   4575c:	mov    ecx,0xffffffff
   45761:	mov    esi,0xffffffff
   45766:	mov    edi,0xffffffff
   4576b:	mov    WORD PTR [rax],cx
   4576e:	mov    WORD PTR [r14],si
   45772:	mov    WORD PTR [r15],di
   45776:	jmp    455c2 <Get_Direct_Motion_Vectors+0x232>
   4577b:	nop    DWORD PTR [rax+rax*1+0x0]
   45780:	mov    rcx,QWORD PTR [rbx]
   45783:	mov    rcx,QWORD PTR [rcx]
   45786:	mov    WORD PTR [rcx],si
   45789:	movzx  esi,WORD PTR [r8+0x2]
   4578e:	mov    WORD PTR [rcx+0x2],si
   45792:	mov    DWORD PTR [r9],0x0
   45799:	jmp    45738 <Get_Direct_Motion_Vectors+0x3a8>
   4579b:	test   dil,0x1
   4579f:	je     45f56 <Get_Direct_Motion_Vectors+0xbc6>
   457a5:	mov    rdx,QWORD PTR [rax+0x12f0]
   457ac:	mov    rbx,QWORD PTR [rax+0x12f8]
   457b3:	mov    r13,QWORD PTR [rax+0x12e0]
   457ba:	mov    rax,QWORD PTR [rax+0x12e8]
   457c1:	mov    QWORD PTR [rsp+0x68],rdx
   457c6:	mov    QWORD PTR [rsp+0x58],rax
   457cb:	mov    eax,DWORD PTR [r15+0x1193c]
   457d2:	test   eax,eax
   457d4:	je     4543e <Get_Direct_Motion_Vectors+0xae>
   457da:	lea    r9,[rsp+0x80]
   457e2:	xor    r8d,r8d
   457e5:	xor    edx,edx
   457e7:	xor    esi,esi
   457e9:	mov    DWORD PTR [rsp+0x100],0x0
   457f4:	mov    ecx,0xffffffff
   457f9:	mov    DWORD PTR [rsp+0x104],0x0
   45804:	call   30b60 <getLuma4x4Neighbour>
   45809:	mov    rax,QWORD PTR [rip+0x42da0]        # 885b0 <img>
   45810:	xor    ecx,ecx
   45812:	xor    edx,edx
   45814:	lea    r9,[rsp+0xa0]
   4581c:	mov    r8d,0xffffffff
   45822:	xor    esi,esi
   45824:	mov    edi,DWORD PTR [rax+0xc]
   45827:	call   30b60 <getLuma4x4Neighbour>
   4582c:	mov    rax,QWORD PTR [rip+0x42d7d]        # 885b0 <img>
   45833:	xor    edx,edx
   45835:	xor    esi,esi
   45837:	lea    r9,[rsp+0xe0]
   4583f:	mov    r8d,0xffffffff
   45845:	mov    ecx,0x10
   4584a:	mov    edi,DWORD PTR [rax+0xc]
   4584d:	call   30b60 <getLuma4x4Neighbour>
   45852:	mov    rax,QWORD PTR [rip+0x42d57]        # 885b0 <img>
   45859:	xor    esi,esi
   4585b:	xor    edx,edx
   4585d:	lea    r9,[rsp+0xc0]
   45865:	mov    r8d,0xffffffff
   4586b:	mov    ecx,0xffffffff
   45870:	mov    edi,DWORD PTR [rax+0xc]
   45873:	call   30b60 <getLuma4x4Neighbour>
   45878:	mov    rsi,QWORD PTR [rip+0x42d31]        # 885b0 <img>
   4587f:	mov    r12d,DWORD PTR [rsi+0x11ad0]
   45886:	test   r12d,r12d
   45889:	jne    45c57 <Get_Direct_Motion_Vectors+0x8c7>
   4588f:	mov    ecx,DWORD PTR [rsp+0x80]
   45896:	test   ecx,ecx
   45898:	je     463ff <Get_Direct_Motion_Vectors+0x106f>
   4589e:	mov    rax,QWORD PTR [rip+0x45103]        # 8a9a8 <enc_picture>
   458a5:	movsxd rsi,DWORD PTR [rsp+0x90]
   458ad:	movsxd rdx,DWORD PTR [rsp+0x94]
   458b5:	mov    rax,QWORD PTR [rax+0x1950]
   458bc:	mov    rax,QWORD PTR [rax]
   458bf:	mov    rax,QWORD PTR [rax+rsi*8]
   458c3:	movzx  edx,WORD PTR [rax+rdx*2]
   458c7:	mov    eax,edx
   458c9:	not    eax
   458cb:	shr    ax,0xf
   458cf:	mov    r9d,DWORD PTR [rsp+0xa0]
   458d7:	test   r9d,r9d
   458da:	je     463f2 <Get_Direct_Motion_Vectors+0x1062>
   458e0:	mov    rsi,QWORD PTR [rip+0x450c1]        # 8a9a8 <enc_picture>
   458e7:	movsxd r8,DWORD PTR [rsp+0xb0]
   458ef:	movsxd rdi,DWORD PTR [rsp+0xb4]
   458f7:	mov    rsi,QWORD PTR [rsi+0x1950]
   458fe:	mov    rsi,QWORD PTR [rsi]
   45901:	mov    rsi,QWORD PTR [rsi+r8*8]
   45905:	movzx  r8d,WORD PTR [rsi+rdi*2]
   4590a:	mov    edi,r8d
   4590d:	not    edi
   4590f:	shr    di,0xf
   45913:	and    edi,eax
   45915:	mov    r10d,DWORD PTR [rsp+0xc0]
   4591d:	mov    r12d,0xffffffff
   45923:	test   r10d,r10d
   45926:	je     45952 <Get_Direct_Motion_Vectors+0x5c2>
   45928:	mov    rax,QWORD PTR [rip+0x45079]        # 8a9a8 <enc_picture>
   4592f:	movsxd r11,DWORD PTR [rsp+0xd0]
   45937:	movsxd rsi,DWORD PTR [rsp+0xd4]
   4593f:	mov    rax,QWORD PTR [rax+0x1950]
   45946:	mov    rax,QWORD PTR [rax]
   45949:	mov    rax,QWORD PTR [rax+r11*8]
   4594d:	movzx  r12d,WORD PTR [rax+rsi*2]
   45952:	mov    esi,DWORD PTR [rsp+0xe0]
   45959:	test   esi,esi
   4595b:	je     45987 <Get_Direct_Motion_Vectors+0x5f7>
   4595d:	mov    rax,QWORD PTR [rip+0x45044]        # 8a9a8 <enc_picture>
   45964:	movsxd rbp,DWORD PTR [rsp+0xf0]
   4596c:	movsxd r11,DWORD PTR [rsp+0xf4]
   45974:	mov    rax,QWORD PTR [rax+0x1950]
   4597b:	mov    rax,QWORD PTR [rax]
   4597e:	mov    rax,QWORD PTR [rax+rbp*8]
   45982:	movzx  r12d,WORD PTR [rax+r11*2]
   45987:	test   ecx,ecx
   45989:	je     463e6 <Get_Direct_Motion_Vectors+0x1056>
   4598f:	mov    rax,QWORD PTR [rip+0x45012]        # 8a9a8 <enc_picture>
   45996:	movsxd r11,DWORD PTR [rsp+0x90]
   4599e:	movsxd rcx,DWORD PTR [rsp+0x94]
   459a6:	mov    rax,QWORD PTR [rax+0x1950]
   459ad:	mov    rax,QWORD PTR [rax+0x8]
   459b1:	mov    rax,QWORD PTR [rax+r11*8]
   459b5:	movzx  eax,WORD PTR [rax+rcx*2]
   459b9:	mov    ecx,eax
   459bb:	not    ecx
   459bd:	shr    cx,0xf
   459c1:	test   r9d,r9d
   459c4:	je     463d9 <Get_Direct_Motion_Vectors+0x1049>
   459ca:	mov    r9,QWORD PTR [rip+0x44fd7]        # 8a9a8 <enc_picture>
   459d1:	movsxd rbp,DWORD PTR [rsp+0xb0]
   459d9:	movsxd r11,DWORD PTR [rsp+0xb4]
   459e1:	mov    r9,QWORD PTR [r9+0x1950]
   459e8:	mov    r9,QWORD PTR [r9+0x8]
   459ec:	mov    r9,QWORD PTR [r9+rbp*8]
   459f0:	movzx  r9d,WORD PTR [r9+r11*2]
   459f5:	mov    r11d,r9d
   459f8:	not    r11d
   459fb:	shr    r11w,0xf
   45a00:	and    ecx,r11d
   45a03:	mov    ebp,0xffffffff
   45a08:	test   r10d,r10d
   45a0b:	je     45a38 <Get_Direct_Motion_Vectors+0x6a8>
   45a0d:	mov    r10,QWORD PTR [rip+0x44f94]        # 8a9a8 <enc_picture>
   45a14:	movsxd rbp,DWORD PTR [rsp+0xd0]
   45a1c:	movsxd r11,DWORD PTR [rsp+0xd4]
   45a24:	mov    r10,QWORD PTR [r10+0x1950]
   45a2b:	mov    r10,QWORD PTR [r10+0x8]
   45a2f:	mov    r10,QWORD PTR [r10+rbp*8]
   45a33:	movzx  ebp,WORD PTR [r10+r11*2]
   45a38:	test   esi,esi
   45a3a:	je     45a67 <Get_Direct_Motion_Vectors+0x6d7>
   45a3c:	mov    rsi,QWORD PTR [rip+0x44f65]        # 8a9a8 <enc_picture>
   45a43:	movsxd r11,DWORD PTR [rsp+0xf0]
   45a4b:	movsxd r10,DWORD PTR [rsp+0xf4]
   45a53:	mov    rsi,QWORD PTR [rsi+0x1950]
   45a5a:	mov    rsi,QWORD PTR [rsi+0x8]
   45a5e:	mov    rsi,QWORD PTR [rsi+r11*8]
   45a62:	movzx  ebp,WORD PTR [rsi+r10*2]
   45a67:	test   dil,dil
   45a6a:	je     460b2 <Get_Direct_Motion_Vectors+0xd22>
   45a70:	cmp    dx,r8w
   45a74:	cmovg  edx,r8d
   45a78:	test   dx,dx
   45a7b:	js     460a5 <Get_Direct_Motion_Vectors+0xd15>
   45a81:	test   r12w,r12w
   45a85:	js     460a5 <Get_Direct_Motion_Vectors+0xd15>
   45a8b:	cmp    r12w,dx
   45a8f:	cmovg  r12d,edx
   45a93:	test   cl,cl
   45a95:	je     46098 <Get_Direct_Motion_Vectors+0xd08>
   45a9b:	cmp    ax,r9w
   45a9f:	cmovg  eax,r9d
   45aa3:	test   ax,ax
   45aa6:	js     4607e <Get_Direct_Motion_Vectors+0xcee>
   45aac:	test   bp,bp
   45aaf:	js     4607e <Get_Direct_Motion_Vectors+0xcee>
   45ab5:	cmp    bp,ax
   45ab8:	cmovg  ebp,eax
   45abb:	test   r12w,r12w
   45abf:	jns    460bf <Get_Direct_Motion_Vectors+0xd2f>
   45ac5:	mov    rax,QWORD PTR [rip+0x44edc]        # 8a9a8 <enc_picture>
   45acc:	movsx  ecx,bp
   45acf:	xor    r9d,r9d
   45ad2:	mov    r8d,0x1
   45ad8:	lea    rdi,[rsp+0x104]
   45ae0:	sub    rsp,0x8
   45ae4:	mov    rdx,QWORD PTR [rax+0x1968]
   45aeb:	mov    rsi,QWORD PTR [rax+0x1950]
   45af2:	push   0x10
   45af4:	push   0x10
   45af6:	push   0x0
   45af8:	call   399e0 <SetMotionVectorPredictor>
   45afd:	add    rsp,0x20
   45b01:	mov    rsi,QWORD PTR [rip+0x42aa8]        # 885b0 <img>
   45b08:	movsx  rax,bp
   45b0c:	movsx  r15,r12w
   45b10:	xor    r9d,r9d
   45b13:	shl    rax,0x3
   45b17:	mov    rcx,QWORD PTR [rip+0x5957a]        # 9f098 <direct_ref_idx>
   45b1e:	mov    r10,QWORD PTR [rip+0x70353]        # b5e78 <direct_pdir>
   45b25:	shl    r15,0x3
   45b29:	mov    QWORD PTR [rsp+0x8],rax
   45b2e:	mov    eax,DWORD PTR [rsi+0x98]
   45b34:	mov    edx,DWORD PTR [rsi+0x9c]
   45b3a:	mov    r11d,DWORD PTR [rsi+0xac]
   45b41:	sar    eax,0x2
   45b44:	mov    r13,QWORD PTR [rcx+0x8]
   45b48:	mov    r8,QWORD PTR [rcx]
   45b4b:	sar    edx,0x2
   45b4e:	cdqe   
   45b50:	sar    r11d,0x2
   45b54:	shl    rax,0x3
   45b58:	movsxd rdx,edx
   45b5b:	movsxd r11,r11d
   45b5e:	mov    QWORD PTR [rsp+0x10],rax
   45b63:	mov    eax,DWORD PTR [rsi+0xa8]
   45b69:	add    rdx,rdx
   45b6c:	sar    eax,0x2
   45b6f:	cdqe   
   45b71:	lea    rbx,[rbx+rax*8]
   45b75:	mov    QWORD PTR [rsp],r15
   45b79:	mov    rax,QWORD PTR [rsp+0x10]
   45b7e:	xor    ecx,ecx
   45b80:	mov    rsi,QWORD PTR [r14+rcx*1]
   45b84:	mov    rsi,QWORD PTR [rsi+r9*1]
   45b88:	mov    rdi,QWORD PTR [rsi]
   45b8b:	test   r12w,r12w
   45b8f:	js     45ff8 <Get_Direct_Motion_Vectors+0xc68>
   45b95:	jne    45fc0 <Get_Direct_Motion_Vectors+0xc30>
   45b9b:	mov    r15,QWORD PTR [rbx+rcx*1]
   45b9f:	cmp    BYTE PTR [r15+r11*1],0x0
   45ba4:	jne    45fc0 <Get_Direct_Motion_Vectors+0xc30>
   45baa:	mov    rdi,QWORD PTR [rdi]
   45bad:	xor    r15d,r15d
   45bb0:	mov    rdi,QWORD PTR [rdi]
   45bb3:	mov    DWORD PTR [rdi],0x0
   45bb9:	mov    rdi,QWORD PTR [r8+rax*1]
   45bbd:	mov    WORD PTR [rdi+rdx*1],r15w
   45bc2:	mov    rdi,QWORD PTR [r13+rax*1+0x0]
   45bc7:	mov    rsi,QWORD PTR [rsi+0x8]
   45bcb:	add    rdi,rdx
   45bce:	test   bp,bp
   45bd1:	js     46576 <Get_Direct_Motion_Vectors+0x11e6>
   45bd7:	test   bp,bp
   45bda:	jne    45f88 <Get_Direct_Motion_Vectors+0xbf8>
   45be0:	mov    r15,QWORD PTR [rbx+rcx*1]
   45be4:	cmp    BYTE PTR [r15+r11*1],0x0
   45be9:	jne    45f88 <Get_Direct_Motion_Vectors+0xbf8>
   45bef:	mov    rsi,QWORD PTR [rsi]
   45bf2:	xor    r15d,r15d
   45bf5:	mov    rsi,QWORD PTR [rsi]
   45bf8:	mov    DWORD PTR [rsi],0x0
   45bfe:	mov    WORD PTR [rdi],r15w
   45c02:	lea    rsi,[r10+rax*1]
   45c06:	mov    rdi,QWORD PTR [rsi]
   45c09:	add    rdi,rdx
   45c0c:	mov    rsi,rdi
   45c0f:	mov    rdi,QWORD PTR [r8+rax*1]
   45c13:	cmp    WORD PTR [rdi+rdx*1],0xffff
   45c18:	je     46060 <Get_Direct_Motion_Vectors+0xcd0>
   45c1e:	mov    edi,0x2
   45c23:	mov    WORD PTR [rsi],di
   45c26:	add    rcx,0x8
   45c2a:	add    rax,0x8
   45c2e:	cmp    rcx,0x20
   45c32:	jne    45b80 <Get_Direct_Motion_Vectors+0x7f0>
   45c38:	add    r9,0x8
   45c3c:	mov    r15,QWORD PTR [rsp]
   45c40:	add    rdx,0x2
   45c44:	add    r11,0x1
   45c48:	cmp    r9,0x20
   45c4c:	jne    45b75 <Get_Direct_Motion_Vectors+0x7e5>
   45c52:	jmp    455e9 <Get_Direct_Motion_Vectors+0x259>
   45c57:	mov    rdx,QWORD PTR [rsp+0x50]
   45c5c:	mov    eax,DWORD PTR [rsp+0x80]
   45c63:	mov    ebp,DWORD PTR [rdx+0x214]
   45c69:	test   ebp,ebp
   45c6b:	je     460fb <Get_Direct_Motion_Vectors+0xd6b>
   45c71:	test   eax,eax
   45c73:	jne    46474 <Get_Direct_Motion_Vectors+0x10e4>
   45c79:	xor    edi,edi
   45c7b:	mov    edx,0xffffffff
   45c80:	mov    r9d,DWORD PTR [rsp+0xa0]
   45c88:	test   r9d,r9d
   45c8b:	je     464df <Get_Direct_Motion_Vectors+0x114f>
   45c91:	mov    rcx,QWORD PTR [rip+0x44d10]        # 8a9a8 <enc_picture>
   45c98:	movsxd r10,DWORD PTR [rsp+0xb0]
   45ca0:	movsxd r8,DWORD PTR [rsp+0xb4]
   45ca8:	mov    rcx,QWORD PTR [rcx+0x1950]
   45caf:	mov    rcx,QWORD PTR [rcx]
   45cb2:	mov    rcx,QWORD PTR [rcx+r10*8]
   45cb6:	movzx  r8d,WORD PTR [rcx+r8*2]
   45cbb:	movsxd rcx,DWORD PTR [rsp+0xa4]
   45cc3:	imul   rcx,rcx,0x278
   45cca:	add    rcx,QWORD PTR [rsi+0x3758]
   45cd1:	mov    r10d,DWORD PTR [rcx+0x214]
   45cd8:	test   r10d,r10d
   45cdb:	jne    45ce6 <Get_Direct_Motion_Vectors+0x956>
   45cdd:	test   r8w,r8w
   45ce1:	js     45ce6 <Get_Direct_Motion_Vectors+0x956>
   45ce3:	add    r8d,r8d
   45ce6:	mov    ecx,r8d
   45ce9:	not    ecx
   45ceb:	shr    cx,0xf
   45cef:	and    edi,ecx
   45cf1:	mov    r11d,DWORD PTR [rsp+0xc0]
   45cf9:	mov    r12d,0xffffffff
   45cff:	test   r11d,r11d
   45d02:	je     45d5a <Get_Direct_Motion_Vectors+0x9ca>
   45d04:	mov    rcx,QWORD PTR [rip+0x44c9d]        # 8a9a8 <enc_picture>
   45d0b:	movsxd rbp,DWORD PTR [rsp+0xd0]
   45d13:	movsxd r10,DWORD PTR [rsp+0xd4]
   45d1b:	mov    rcx,QWORD PTR [rcx+0x1950]
   45d22:	mov    rcx,QWORD PTR [rcx]
   45d25:	mov    rcx,QWORD PTR [rcx+rbp*8]
   45d29:	movzx  r12d,WORD PTR [rcx+r10*2]
   45d2e:	movsxd rcx,DWORD PTR [rsp+0xc4]
   45d36:	imul   rcx,rcx,0x278
   45d3d:	add    rcx,QWORD PTR [rsi+0x3758]
   45d44:	mov    ecx,DWORD PTR [rcx+0x214]
   45d4a:	test   ecx,ecx
   45d4c:	jne    45d5a <Get_Direct_Motion_Vectors+0x9ca>
   45d4e:	lea    ecx,[r12+r12*1]
   45d52:	test   r12w,r12w
   45d56:	cmovns r12d,ecx
   45d5a:	mov    r10d,DWORD PTR [rsp+0xe0]
   45d62:	test   r10d,r10d
   45d65:	je     45dbf <Get_Direct_Motion_Vectors+0xa2f>
   45d67:	mov    rcx,QWORD PTR [rip+0x44c3a]        # 8a9a8 <enc_picture>
   45d6e:	movsxd r12,DWORD PTR [rsp+0xf0]
   45d76:	movsxd rbp,DWORD PTR [rsp+0xf4]
   45d7e:	mov    rcx,QWORD PTR [rcx+0x1950]
   45d85:	mov    rcx,QWORD PTR [rcx]
   45d88:	mov    rcx,QWORD PTR [rcx+r12*8]
   45d8c:	movzx  r12d,WORD PTR [rcx+rbp*2]
   45d91:	movsxd rcx,DWORD PTR [rsp+0xe4]
   45d99:	imul   rcx,rcx,0x278
   45da0:	add    rcx,QWORD PTR [rsi+0x3758]
   45da7:	mov    r15d,DWORD PTR [rcx+0x214]
   45dae:	test   r15d,r15d
   45db1:	jne    45dbf <Get_Direct_Motion_Vectors+0xa2f>
   45db3:	lea    ecx,[r12+r12*1]
   45db7:	test   r12w,r12w
   45dbb:	cmovns r12d,ecx
   45dbf:	test   eax,eax
   45dc1:	je     464d3 <Get_Direct_Motion_Vectors+0x1143>
   45dc7:	mov    rax,QWORD PTR [rip+0x44bda]        # 8a9a8 <enc_picture>
   45dce:	movsxd rbp,DWORD PTR [rsp+0x90]
   45dd6:	movsxd rcx,DWORD PTR [rsp+0x94]
   45dde:	mov    rax,QWORD PTR [rax+0x1950]
   45de5:	mov    rax,QWORD PTR [rax+0x8]
   45de9:	mov    rax,QWORD PTR [rax+rbp*8]
   45ded:	movzx  eax,WORD PTR [rax+rcx*2]
   45df1:	movsxd rcx,DWORD PTR [rsp+0x84]
   45df9:	imul   rcx,rcx,0x278
   45e00:	add    rcx,QWORD PTR [rsi+0x3758]
   45e07:	mov    r13d,DWORD PTR [rcx+0x214]
   45e0e:	test   r13d,r13d
   45e11:	jne    45e1a <Get_Direct_Motion_Vectors+0xa8a>
   45e13:	test   ax,ax
   45e16:	js     45e1a <Get_Direct_Motion_Vectors+0xa8a>
   45e18:	add    eax,eax
   45e1a:	mov    ecx,eax
   45e1c:	not    ecx
   45e1e:	shr    cx,0xf
   45e22:	test   r9d,r9d
   45e25:	je     464f8 <Get_Direct_Motion_Vectors+0x1168>
   45e2b:	mov    r9,QWORD PTR [rip+0x44b76]        # 8a9a8 <enc_picture>
   45e32:	movsxd r13,DWORD PTR [rsp+0xb0]
   45e3a:	movsxd rbp,DWORD PTR [rsp+0xb4]
   45e42:	mov    r9,QWORD PTR [r9+0x1950]
   45e49:	mov    r9,QWORD PTR [r9+0x8]
   45e4d:	mov    r9,QWORD PTR [r9+r13*8]
   45e51:	movzx  r9d,WORD PTR [r9+rbp*2]
   45e56:	movsxd rbp,DWORD PTR [rsp+0xa4]
   45e5e:	imul   rbp,rbp,0x278
   45e65:	add    rbp,QWORD PTR [rsi+0x3758]
   45e6c:	mov    ebp,DWORD PTR [rbp+0x214]
   45e72:	test   ebp,ebp
   45e74:	jne    45e7f <Get_Direct_Motion_Vectors+0xaef>
   45e76:	test   r9w,r9w
   45e7a:	js     45e7f <Get_Direct_Motion_Vectors+0xaef>
   45e7c:	add    r9d,r9d
   45e7f:	mov    ebp,r9d
   45e82:	not    ebp
   45e84:	shr    bp,0xf
   45e88:	and    ecx,ebp
   45e8a:	mov    ebp,0xffffffff
   45e8f:	test   r11d,r11d
   45e92:	je     45eed <Get_Direct_Motion_Vectors+0xb5d>
   45e94:	mov    r11,QWORD PTR [rip+0x44b0d]        # 8a9a8 <enc_picture>
   45e9b:	movsxd r13,DWORD PTR [rsp+0xd0]
   45ea3:	movsxd rbp,DWORD PTR [rsp+0xd4]
   45eab:	mov    r11,QWORD PTR [r11+0x1950]
   45eb2:	mov    r11,QWORD PTR [r11+0x8]
   45eb6:	mov    r11,QWORD PTR [r11+r13*8]
   45eba:	movzx  ebp,WORD PTR [r11+rbp*2]
   45ebf:	movsxd r11,DWORD PTR [rsp+0xc4]
   45ec7:	imul   r11,r11,0x278
   45ece:	add    r11,QWORD PTR [rsi+0x3758]
   45ed5:	mov    r15d,DWORD PTR [r11+0x214]
   45edc:	test   r15d,r15d
   45edf:	jne    45eed <Get_Direct_Motion_Vectors+0xb5d>
   45ee1:	lea    r11d,[rbp+rbp*1+0x0]
   45ee6:	test   bp,bp
   45ee9:	cmovns ebp,r11d
   45eed:	test   r10d,r10d
   45ef0:	je     45a67 <Get_Direct_Motion_Vectors+0x6d7>
   45ef6:	mov    r10,QWORD PTR [rip+0x44aab]        # 8a9a8 <enc_picture>
   45efd:	movsxd rbp,DWORD PTR [rsp+0xf0]
   45f05:	movsxd r11,DWORD PTR [rsp+0xf4]
   45f0d:	mov    r10,QWORD PTR [r10+0x1950]
   45f14:	mov    r10,QWORD PTR [r10+0x8]
   45f18:	mov    r10,QWORD PTR [r10+rbp*8]
   45f1c:	movzx  ebp,WORD PTR [r10+r11*2]
   45f21:	movsxd r10,DWORD PTR [rsp+0xe4]
   45f29:	imul   r10,r10,0x278
   45f30:	add    r10,QWORD PTR [rsi+0x3758]
   45f37:	mov    r13d,DWORD PTR [r10+0x214]
   45f3e:	test   r13d,r13d
   45f41:	jne    45a67 <Get_Direct_Motion_Vectors+0x6d7>
   45f47:	lea    esi,[rbp+rbp*1+0x0]
   45f4b:	test   bp,bp
   45f4e:	cmovns ebp,esi
   45f51:	jmp    45a67 <Get_Direct_Motion_Vectors+0x6d7>
   45f56:	mov    rdx,QWORD PTR [rax+0xca0]
   45f5d:	mov    rbx,QWORD PTR [rax+0xca8]
   45f64:	mov    r13,QWORD PTR [rax+0xc90]
   45f6b:	mov    rax,QWORD PTR [rax+0xc98]
   45f72:	mov    QWORD PTR [rsp+0x68],rdx
   45f77:	mov    QWORD PTR [rsp+0x58],rax
   45f7c:	jmp    4542f <Get_Direct_Motion_Vectors+0x9f>
   45f81:	nop    DWORD PTR [rax+0x0]
   45f88:	mov    r15,QWORD PTR [rsp+0x8]
   45f8d:	mov    rsi,QWORD PTR [rsi+r15*1]
   45f91:	movzx  r15d,WORD PTR [rsp+0x104]
   45f9a:	mov    rsi,QWORD PTR [rsi]
   45f9d:	mov    WORD PTR [rsi],r15w
   45fa1:	movzx  r15d,WORD PTR [rsp+0x106]
   45faa:	mov    WORD PTR [rsi+0x2],r15w
   45faf:	mov    WORD PTR [rdi],bp
   45fb2:	jmp    45c02 <Get_Direct_Motion_Vectors+0x872>
   45fb7:	nop    WORD PTR [rax+rax*1+0x0]
   45fc0:	mov    r15,QWORD PTR [rsp]
   45fc4:	mov    rdi,QWORD PTR [rdi+r15*1]
   45fc8:	movzx  r15d,WORD PTR [rsp+0x100]
   45fd1:	mov    rdi,QWORD PTR [rdi]
   45fd4:	mov    WORD PTR [rdi],r15w
   45fd8:	movzx  r15d,WORD PTR [rsp+0x102]
   45fe1:	mov    WORD PTR [rdi+0x2],r15w
   45fe6:	mov    rdi,QWORD PTR [r8+rax*1]
   45fea:	mov    WORD PTR [rdi+rdx*1],r12w
   45fef:	jmp    45bc2 <Get_Direct_Motion_Vectors+0x832>
   45ff4:	nop    DWORD PTR [rax+0x0]
   45ff8:	mov    rdi,QWORD PTR [rdi]
   45ffb:	mov    r15d,0xffffffff
   46001:	mov    rsi,QWORD PTR [rsi+0x8]
   46005:	mov    rdi,QWORD PTR [rdi]
   46008:	mov    DWORD PTR [rdi],0x0
   4600e:	mov    rdi,QWORD PTR [r8+rax*1]
   46012:	mov    WORD PTR [rdi+rdx*1],r15w
   46017:	mov    rdi,QWORD PTR [r13+rax*1+0x0]
   4601c:	add    rdi,rdx
   4601f:	test   bp,bp
   46022:	jns    45bd7 <Get_Direct_Motion_Vectors+0x847>
   46028:	mov    rsi,QWORD PTR [rsi]
   4602b:	xor    r15d,r15d
   4602e:	mov    rsi,QWORD PTR [rsi]
   46031:	mov    DWORD PTR [rsi],0x0
   46037:	xor    esi,esi
   46039:	mov    WORD PTR [rdi],si
   4603c:	mov    rsi,QWORD PTR [r8+rax*1]
   46040:	mov    WORD PTR [rsi+rdx*1],r15w
   46045:	cmp    WORD PTR [rdi],0xffff
   46049:	lea    rsi,[r10+rax*1]
   4604d:	jne    46070 <Get_Direct_Motion_Vectors+0xce0>
   4604f:	mov    rsi,QWORD PTR [r10+rax*1]
   46053:	xor    edi,edi
   46055:	mov    WORD PTR [rsi+rdx*1],di
   46059:	jmp    45c26 <Get_Direct_Motion_Vectors+0x896>
   4605e:	xchg   ax,ax
   46060:	mov    r15d,0x1
   46066:	mov    WORD PTR [rsi],r15w
   4606a:	jmp    45c26 <Get_Direct_Motion_Vectors+0x896>
   4606f:	nop
   46070:	mov    rdi,QWORD PTR [rsi]
   46073:	add    rdi,rdx
   46076:	mov    rsi,rdi
   46079:	jmp    45c1e <Get_Direct_Motion_Vectors+0x88e>
   4607e:	cmp    bp,ax
   46081:	cmovl  ebp,eax
   46084:	test   r12w,r12w
   46088:	jns    460bf <Get_Direct_Motion_Vectors+0xd2f>
   4608a:	test   bp,bp
   4608d:	js     45b01 <Get_Direct_Motion_Vectors+0x771>
   46093:	jmp    45ac5 <Get_Direct_Motion_Vectors+0x735>
   46098:	cmp    ax,r9w
   4609c:	cmovl  eax,r9d
   460a0:	jmp    45aa3 <Get_Direct_Motion_Vectors+0x713>
   460a5:	cmp    r12w,dx
   460a9:	cmovl  r12d,edx
   460ad:	jmp    45a93 <Get_Direct_Motion_Vectors+0x703>
   460b2:	cmp    dx,r8w
   460b6:	cmovl  edx,r8d
   460ba:	jmp    45a78 <Get_Direct_Motion_Vectors+0x6e8>
   460bf:	mov    rax,QWORD PTR [rip+0x448e2]        # 8a9a8 <enc_picture>
   460c6:	movsx  ecx,r12w
   460ca:	xor    r9d,r9d
   460cd:	xor    r8d,r8d
   460d0:	lea    rdi,[rsp+0x100]
   460d8:	sub    rsp,0x8
   460dc:	mov    rdx,QWORD PTR [rax+0x1968]
   460e3:	mov    rsi,QWORD PTR [rax+0x1950]
   460ea:	push   0x10
   460ec:	push   0x10
   460ee:	push   0x0
   460f0:	call   399e0 <SetMotionVectorPredictor>
   460f5:	add    rsp,0x20
   460f9:	jmp    4608a <Get_Direct_Motion_Vectors+0xcfa>
   460fb:	test   eax,eax
   460fd:	jne    4640b <Get_Direct_Motion_Vectors+0x107b>
   46103:	xor    edi,edi
   46105:	mov    edx,0xffffffff
   4610a:	mov    r9d,DWORD PTR [rsp+0xa0]
   46112:	test   r9d,r9d
   46115:	je     46512 <Get_Direct_Motion_Vectors+0x1182>
   4611b:	mov    rcx,QWORD PTR [rip+0x44886]        # 8a9a8 <enc_picture>
   46122:	movsxd r10,DWORD PTR [rsp+0xb0]
   4612a:	movsxd r8,DWORD PTR [rsp+0xb4]
   46132:	mov    rcx,QWORD PTR [rcx+0x1950]
   46139:	mov    rcx,QWORD PTR [rcx]
   4613c:	mov    rcx,QWORD PTR [rcx+r10*8]
   46140:	movzx  r8d,WORD PTR [rcx+r8*2]
   46145:	movsxd rcx,DWORD PTR [rsp+0xa4]
   4614d:	imul   rcx,rcx,0x278
   46154:	add    rcx,QWORD PTR [rsi+0x3758]
   4615b:	mov    r10d,DWORD PTR [rcx+0x214]
   46162:	test   r10d,r10d
   46165:	jne    46533 <Get_Direct_Motion_Vectors+0x11a3>
   4616b:	test   r8w,r8w
   4616f:	js     46533 <Get_Direct_Motion_Vectors+0x11a3>
   46175:	mov    r11d,DWORD PTR [rsp+0xc0]
   4617d:	mov    r12d,0xffffffff
   46183:	test   r11d,r11d
   46186:	je     461e0 <Get_Direct_Motion_Vectors+0xe50>
   46188:	mov    rcx,QWORD PTR [rip+0x44819]        # 8a9a8 <enc_picture>
   4618f:	movsxd rbp,DWORD PTR [rsp+0xd0]
   46197:	movsxd r10,DWORD PTR [rsp+0xd4]
   4619f:	mov    rcx,QWORD PTR [rcx+0x1950]
   461a6:	mov    rcx,QWORD PTR [rcx]
   461a9:	mov    rcx,QWORD PTR [rcx+rbp*8]
   461ad:	movzx  r12d,WORD PTR [rcx+r10*2]
   461b2:	movsxd rcx,DWORD PTR [rsp+0xc4]
   461ba:	imul   rcx,rcx,0x278
   461c1:	add    rcx,QWORD PTR [rsi+0x3758]
   461c8:	mov    ecx,DWORD PTR [rcx+0x214]
   461ce:	test   ecx,ecx
   461d0:	jne    46568 <Get_Direct_Motion_Vectors+0x11d8>
   461d6:	test   r12w,r12w
   461da:	js     46568 <Get_Direct_Motion_Vectors+0x11d8>
   461e0:	mov    r10d,DWORD PTR [rsp+0xe0]
   461e8:	test   r10d,r10d
   461eb:	je     46247 <Get_Direct_Motion_Vectors+0xeb7>
   461ed:	mov    rcx,QWORD PTR [rip+0x447b4]        # 8a9a8 <enc_picture>
   461f4:	movsxd r12,DWORD PTR [rsp+0xf0]
   461fc:	movsxd rbp,DWORD PTR [rsp+0xf4]
   46204:	mov    rcx,QWORD PTR [rcx+0x1950]
   4620b:	mov    rcx,QWORD PTR [rcx]
   4620e:	mov    rcx,QWORD PTR [rcx+r12*8]
   46212:	movzx  r12d,WORD PTR [rcx+rbp*2]
   46217:	movsxd rcx,DWORD PTR [rsp+0xe4]
   4621f:	imul   rcx,rcx,0x278
   46226:	add    rcx,QWORD PTR [rsi+0x3758]
   4622d:	mov    r15d,DWORD PTR [rcx+0x214]
   46234:	test   r15d,r15d
   46237:	jne    46547 <Get_Direct_Motion_Vectors+0x11b7>
   4623d:	test   r12w,r12w
   46241:	js     46547 <Get_Direct_Motion_Vectors+0x11b7>
   46247:	test   eax,eax
   46249:	je     464ec <Get_Direct_Motion_Vectors+0x115c>
   4624f:	mov    rax,QWORD PTR [rip+0x44752]        # 8a9a8 <enc_picture>
   46256:	movsxd rbp,DWORD PTR [rsp+0x90]
   4625e:	movsxd rcx,DWORD PTR [rsp+0x94]
   46266:	mov    rax,QWORD PTR [rax+0x1950]
   4626d:	mov    rax,QWORD PTR [rax+0x8]
   46271:	mov    rax,QWORD PTR [rax+rbp*8]
   46275:	movzx  eax,WORD PTR [rax+rcx*2]
   46279:	movsxd rcx,DWORD PTR [rsp+0x84]
   46281:	imul   rcx,rcx,0x278
   46288:	add    rcx,QWORD PTR [rsi+0x3758]
   4628f:	mov    r13d,DWORD PTR [rcx+0x214]
   46296:	test   r13d,r13d
   46299:	jne    46558 <Get_Direct_Motion_Vectors+0x11c8>
   4629f:	mov    ecx,0x1
   462a4:	test   ax,ax
   462a7:	js     46558 <Get_Direct_Motion_Vectors+0x11c8>
   462ad:	test   r9d,r9d
   462b0:	je     46505 <Get_Direct_Motion_Vectors+0x1175>
   462b6:	mov    r9,QWORD PTR [rip+0x446eb]        # 8a9a8 <enc_picture>
   462bd:	movsxd r13,DWORD PTR [rsp+0xb0]
   462c5:	movsxd rbp,DWORD PTR [rsp+0xb4]
   462cd:	mov    r9,QWORD PTR [r9+0x1950]
   462d4:	mov    r9,QWORD PTR [r9+0x8]
   462d8:	mov    r9,QWORD PTR [r9+r13*8]
   462dc:	movzx  r9d,WORD PTR [r9+rbp*2]
   462e1:	movsxd rbp,DWORD PTR [rsp+0xa4]
   462e9:	imul   rbp,rbp,0x278
   462f0:	add    rbp,QWORD PTR [rsi+0x3758]
   462f7:	mov    ebp,DWORD PTR [rbp+0x214]
   462fd:	test   ebp,ebp
   462ff:	jne    4651f <Get_Direct_Motion_Vectors+0x118f>
   46305:	test   r9w,r9w
   46309:	js     4651f <Get_Direct_Motion_Vectors+0x118f>
   4630f:	mov    ebp,0xffffffff
   46314:	test   r11d,r11d
   46317:	je     46373 <Get_Direct_Motion_Vectors+0xfe3>
   46319:	mov    r11,QWORD PTR [rip+0x44688]        # 8a9a8 <enc_picture>
   46320:	movsxd r13,DWORD PTR [rsp+0xd0]
   46328:	movsxd rbp,DWORD PTR [rsp+0xd4]
   46330:	mov    r11,QWORD PTR [r11+0x1950]
   46337:	mov    r11,QWORD PTR [r11+0x8]
   4633b:	mov    r11,QWORD PTR [r11+r13*8]
   4633f:	movzx  ebp,WORD PTR [r11+rbp*2]
   46344:	movsxd r11,DWORD PTR [rsp+0xc4]
   4634c:	imul   r11,r11,0x278
   46353:	add    r11,QWORD PTR [rsi+0x3758]
   4635a:	mov    r11d,DWORD PTR [r11+0x214]
   46361:	test   r11d,r11d
   46364:	jne    46550 <Get_Direct_Motion_Vectors+0x11c0>
   4636a:	test   bp,bp
   4636d:	js     46550 <Get_Direct_Motion_Vectors+0x11c0>
   46373:	test   r10d,r10d
   46376:	je     45a67 <Get_Direct_Motion_Vectors+0x6d7>
   4637c:	mov    r10,QWORD PTR [rip+0x44625]        # 8a9a8 <enc_picture>
   46383:	movsxd rbp,DWORD PTR [rsp+0xf0]
   4638b:	movsxd r11,DWORD PTR [rsp+0xf4]
   46393:	mov    r10,QWORD PTR [r10+0x1950]
   4639a:	mov    r10,QWORD PTR [r10+0x8]
   4639e:	mov    r10,QWORD PTR [r10+rbp*8]
   463a2:	movzx  ebp,WORD PTR [r10+r11*2]
   463a7:	movsxd r10,DWORD PTR [rsp+0xe4]
   463af:	imul   r10,r10,0x278
   463b6:	add    r10,QWORD PTR [rsi+0x3758]
   463bd:	mov    esi,DWORD PTR [r10+0x214]
   463c4:	test   esi,esi
   463c6:	jne    463d1 <Get_Direct_Motion_Vectors+0x1041>
   463c8:	test   bp,bp
   463cb:	jns    45a67 <Get_Direct_Motion_Vectors+0x6d7>
   463d1:	sar    bp,1
   463d4:	jmp    45a67 <Get_Direct_Motion_Vectors+0x6d7>
   463d9:	xor    ecx,ecx
   463db:	mov    r9d,0xffffffff
   463e1:	jmp    45a03 <Get_Direct_Motion_Vectors+0x673>
   463e6:	xor    ecx,ecx
   463e8:	mov    eax,0xffffffff
   463ed:	jmp    459c1 <Get_Direct_Motion_Vectors+0x631>
   463f2:	xor    edi,edi
   463f4:	mov    r8d,0xffffffff
   463fa:	jmp    45915 <Get_Direct_Motion_Vectors+0x585>
   463ff:	xor    eax,eax
   46401:	mov    edx,0xffffffff
   46406:	jmp    458cf <Get_Direct_Motion_Vectors+0x53f>
   4640b:	mov    rdx,QWORD PTR [rip+0x44596]        # 8a9a8 <enc_picture>
   46412:	movsxd rdi,DWORD PTR [rsp+0x90]
   4641a:	movsxd rcx,DWORD PTR [rsp+0x94]
   46422:	mov    rdx,QWORD PTR [rdx+0x1950]
   46429:	mov    rdx,QWORD PTR [rdx]
   4642c:	mov    rdx,QWORD PTR [rdx+rdi*8]
   46430:	movzx  edx,WORD PTR [rdx+rcx*2]
   46434:	movsxd rcx,DWORD PTR [rsp+0x84]
   4643c:	imul   rcx,rcx,0x278
   46443:	add    rcx,QWORD PTR [rsi+0x3758]
   4644a:	mov    r11d,DWORD PTR [rcx+0x214]
   46451:	test   r11d,r11d
   46454:	jne    46464 <Get_Direct_Motion_Vectors+0x10d4>
   46456:	mov    edi,0x1
   4645b:	test   dx,dx
   4645e:	jns    4610a <Get_Direct_Motion_Vectors+0xd7a>
   46464:	sar    dx,1
   46467:	mov    edi,edx
   46469:	not    edi
   4646b:	shr    di,0xf
   4646f:	jmp    4610a <Get_Direct_Motion_Vectors+0xd7a>
   46474:	mov    rdx,QWORD PTR [rip+0x4452d]        # 8a9a8 <enc_picture>
   4647b:	movsxd rdi,DWORD PTR [rsp+0x90]
   46483:	movsxd rcx,DWORD PTR [rsp+0x94]
   4648b:	mov    rdx,QWORD PTR [rdx+0x1950]
   46492:	mov    rdx,QWORD PTR [rdx]
   46495:	mov    rdx,QWORD PTR [rdx+rdi*8]
   46499:	movzx  edx,WORD PTR [rdx+rcx*2]
   4649d:	movsxd rcx,DWORD PTR [rsp+0x84]
   464a5:	imul   rcx,rcx,0x278
   464ac:	add    rcx,QWORD PTR [rsi+0x3758]
   464b3:	mov    r11d,DWORD PTR [rcx+0x214]
   464ba:	test   r11d,r11d
   464bd:	jne    464c6 <Get_Direct_Motion_Vectors+0x1136>
   464bf:	test   dx,dx
   464c2:	js     464c6 <Get_Direct_Motion_Vectors+0x1136>
   464c4:	add    edx,edx
   464c6:	mov    edi,edx
   464c8:	not    edi
   464ca:	shr    di,0xf
   464ce:	jmp    45c80 <Get_Direct_Motion_Vectors+0x8f0>
   464d3:	xor    ecx,ecx
   464d5:	mov    eax,0xffffffff
   464da:	jmp    45e22 <Get_Direct_Motion_Vectors+0xa92>
   464df:	xor    edi,edi
   464e1:	mov    r8d,0xffffffff
   464e7:	jmp    45cf1 <Get_Direct_Motion_Vectors+0x961>
   464ec:	xor    ecx,ecx
   464ee:	mov    eax,0xffffffff
   464f3:	jmp    462ad <Get_Direct_Motion_Vectors+0xf1d>
   464f8:	xor    ecx,ecx
   464fa:	mov    r9d,0xffffffff
   46500:	jmp    45e8a <Get_Direct_Motion_Vectors+0xafa>
   46505:	xor    ecx,ecx
   46507:	mov    r9d,0xffffffff
   4650d:	jmp    4630f <Get_Direct_Motion_Vectors+0xf7f>
   46512:	xor    edi,edi
   46514:	mov    r8d,0xffffffff
   4651a:	jmp    46175 <Get_Direct_Motion_Vectors+0xde5>
   4651f:	sar    r9w,1
   46523:	mov    ebp,r9d
   46526:	not    ebp
   46528:	shr    bp,0xf
   4652c:	and    ecx,ebp
   4652e:	jmp    4630f <Get_Direct_Motion_Vectors+0xf7f>
   46533:	sar    r8w,1
   46537:	mov    ecx,r8d
   4653a:	not    ecx
   4653c:	shr    cx,0xf
   46540:	and    edi,ecx
   46542:	jmp    46175 <Get_Direct_Motion_Vectors+0xde5>
   46547:	sar    r12w,1
   4654b:	jmp    46247 <Get_Direct_Motion_Vectors+0xeb7>
   46550:	sar    bp,1
   46553:	jmp    46373 <Get_Direct_Motion_Vectors+0xfe3>
   46558:	sar    ax,1
   4655b:	mov    ecx,eax
   4655d:	not    ecx
   4655f:	shr    cx,0xf
   46563:	jmp    462ad <Get_Direct_Motion_Vectors+0xf1d>
   46568:	sar    r12w,1
   4656c:	jmp    461e0 <Get_Direct_Motion_Vectors+0xe50>
   46571:	call   4390 <__stack_chk_fail@plt>
   46576:	mov    rsi,QWORD PTR [rsi]
   46579:	mov    WORD PTR [rdi],0xffff
   4657e:	mov    rsi,QWORD PTR [rsi]
   46581:	mov    DWORD PTR [rsi],0x0
   46587:	cmp    WORD PTR [rdi],0xffff
   4658b:	lea    rsi,[r10+rax*1]
   4658f:	je     4604f <Get_Direct_Motion_Vectors+0xcbf>
   46595:	jmp    45c06 <Get_Direct_Motion_Vectors+0x876>
   4659a:	nop    WORD PTR [rax+rax*1+0x0]

00000000000465a0 <sign>:
   465a0:	endbr64 
   465a4:	mov    eax,edi
   465a6:	cdq    
   465a7:	xor    eax,edx
   465a9:	sub    eax,edx
   465ab:	mov    edx,eax
   465ad:	neg    edx
   465af:	test   esi,esi
   465b1:	cmovs  eax,edx
   465b4:	ret    
   465b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
   465bf:	nop

00000000000465c0 <SODBtoRBSP>:
   465c0:	endbr64 
   465c4:	movzx  eax,BYTE PTR [rdi+0x8]
   465c8:	mov    esi,DWORD PTR [rdi+0x4]
   465cb:	movsxd rdx,DWORD PTR [rdi]
   465ce:	lea    eax,[rax+rax*1+0x1]
   465d2:	lea    ecx,[rsi-0x1]
   465d5:	movzx  eax,al
   465d8:	lea    esi,[rdx+0x1]
   465db:	shl    eax,cl
   465dd:	mov    rcx,QWORD PTR [rdi+0x20]
   465e1:	mov    DWORD PTR [rdi],esi
   465e3:	mov    BYTE PTR [rcx+rdx*1],al
   465e6:	mov    DWORD PTR [rdi+0x4],0x8
   465ed:	mov    BYTE PTR [rdi+0x8],0x0
   465f1:	ret    
   465f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   465fd:	nop    DWORD PTR [rax]

0000000000046600 <RBSPtoEBSP>:
   46600:	endbr64 
   46604:	push   r13
   46606:	push   r12
   46608:	push   rbp
   46609:	push   rbx
   4660a:	cmp    esi,edx
   4660c:	jge    466b0 <RBSPtoEBSP+0xb0>
   46612:	mov    r11,QWORD PTR [rip+0x42a4f]        # 89068 <NAL_Payload_buffer>
   46619:	movsxd rax,esi
   4661c:	nop    DWORD PTR [rax+0x0]
   46620:	movzx  r8d,BYTE PTR [rdi+rax*1]
   46625:	mov    BYTE PTR [r11+rax*1],r8b
   46629:	add    rax,0x1
   4662d:	cmp    edx,eax
   4662f:	jg     46620 <RBSPtoEBSP+0x20>
   46631:	mov    r8d,esi
   46634:	mov    r12d,esi
   46637:	xor    ebp,ebp
   46639:	nop    DWORD PTR [rax+0x0]
   46640:	movsxd r13,r12d
   46643:	mov    r10d,r8d
   46646:	lea    r9,[r11+r13*1]
   4664a:	movzx  ebx,BYTE PTR [r9]
   4664e:	cmp    ebp,0x2
   46651:	jne    4666a <RBSPtoEBSP+0x6a>
   46653:	test   bl,0xfc
   46656:	jne    4666a <RBSPtoEBSP+0x6a>
   46658:	movsxd r8,r8d
   4665b:	add    r10d,0x1
   4665f:	xor    ebp,ebp
   46661:	mov    BYTE PTR [rdi+r8*1],0x3
   46666:	movzx  ebx,BYTE PTR [r9]
   4666a:	movsxd r9,r10d
   4666d:	lea    eax,[r12+0x1]
   46672:	sub    r10d,r12d
   46675:	sub    r9,r13
   46678:	cdqe   
   4667a:	add    r9,rdi
   4667d:	mov    BYTE PTR [r9+rax*1-0x1],bl
   46682:	cmp    BYTE PTR [r11+rax*1-0x1],0x0
   46688:	lea    r8d,[r10+rax*1]
   4668c:	je     466a0 <RBSPtoEBSP+0xa0>
   4668e:	cmp    edx,eax
   46690:	jle    466b8 <RBSPtoEBSP+0xb8>
   46692:	movzx  ebx,BYTE PTR [r11+rax*1]
   46697:	xor    ebp,ebp
   46699:	add    rax,0x1
   4669d:	jmp    4667d <RBSPtoEBSP+0x7d>
   4669f:	nop
   466a0:	add    ebp,0x1
   466a3:	cmp    edx,eax
   466a5:	jle    466b8 <RBSPtoEBSP+0xb8>
   466a7:	mov    r12d,eax
   466aa:	jmp    46640 <RBSPtoEBSP+0x40>
   466ac:	nop    DWORD PTR [rax+0x0]
   466b0:	mov    r8d,esi
   466b3:	nop    DWORD PTR [rax+rax*1+0x0]
   466b8:	add    esi,ecx
   466ba:	cmp    r8d,esi
   466bd:	jge    466fa <RBSPtoEBSP+0xfa>
   466bf:	movsxd rax,r8d
   466c2:	add    rdi,rax
   466c5:	nop    DWORD PTR [rax]
   466c8:	mov    BYTE PTR [rdi],0x0
   466cb:	add    r8d,0x3
   466cf:	add    rdi,0x3
   466d3:	mov    BYTE PTR [rdi-0x2],0x0
   466d7:	mov    BYTE PTR [rdi-0x1],0x3
   466db:	mov    rax,QWORD PTR [rip+0x41ece]        # 885b0 <img>
   466e2:	movsxd rdx,DWORD PTR [rax+0x18]
   466e6:	mov    rax,QWORD PTR [rip+0x41ebb]        # 885a8 <stats>
   466ed:	add    DWORD PTR [rax+rdx*4+0x530],0x10
   466f5:	cmp    r8d,esi
   466f8:	jl     466c8 <RBSPtoEBSP+0xc8>
   466fa:	pop    rbx
   466fb:	mov    eax,r8d
   466fe:	pop    rbp
   466ff:	pop    r12
   46701:	pop    r13
   46703:	ret    
   46704:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4670f:	nop

0000000000046710 <AllocNalPayloadBuffer>:
   46710:	endbr64 
   46714:	mov    rax,QWORD PTR [rip+0x41e9d]        # 885b8 <input>
   4671b:	mov    rdx,QWORD PTR [rip+0x41e8e]        # 885b0 <img>
   46722:	push   rbx
   46723:	mov    ebx,DWORD PTR [rdx+0x11c18]
   46729:	mov    edi,DWORD PTR [rdx+0x11c1c]
   4672f:	add    ebx,DWORD PTR [rax+0x40]
   46732:	add    edi,DWORD PTR [rax+0x44]
   46735:	imul   ebx,edi
   46738:	mov    rdi,QWORD PTR [rip+0x42929]        # 89068 <NAL_Payload_buffer>
   4673f:	shl    ebx,0x2
   46742:	test   rdi,rdi
   46745:	je     4674c <AllocNalPayloadBuffer+0x3c>
   46747:	call   42d0 <free@plt>
   4674c:	movsxd rdi,ebx
   4674f:	mov    esi,0x1
   46754:	call   4400 <calloc@plt>
   46759:	pop    rbx
   4675a:	mov    QWORD PTR [rip+0x42907],rax        # 89068 <NAL_Payload_buffer>
   46761:	ret    
   46762:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4676d:	nop    DWORD PTR [rax]

0000000000046770 <FreeNalPayloadBuffer>:
   46770:	endbr64 
   46774:	mov    rdi,QWORD PTR [rip+0x428ed]        # 89068 <NAL_Payload_buffer>
   4677b:	test   rdi,rdi
   4677e:	je     467a0 <FreeNalPayloadBuffer+0x30>
   46780:	sub    rsp,0x8
   46784:	call   42d0 <free@plt>
   46789:	mov    QWORD PTR [rip+0x428d4],0x0        # 89068 <NAL_Payload_buffer>
   46794:	add    rsp,0x8
   46798:	ret    
   46799:	nop    DWORD PTR [rax+0x0]
   467a0:	ret    
   467a1:	nop    WORD PTR cs:[rax+rax*1+0x0]
   467ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000467b0 <RBSPtoNALU>:
   467b0:	endbr64 
   467b4:	push   r13
   467b6:	xor    eax,eax
   467b8:	mov    r10,rdi
   467bb:	movsxd rdx,edx
   467be:	push   r12
   467c0:	mov    r13d,r9d
   467c3:	mov    r12,rdx
   467c6:	push   rbx
   467c7:	mov    rbx,rsi
   467ca:	mov    DWORD PTR [rsi+0x10],r8d
   467ce:	mov    DWORD PTR [rsi+0xc],ecx
   467d1:	mov    DWORD PTR [rsi+0x14],0x0
   467d8:	mov    esi,DWORD PTR [rsp+0x20]
   467dc:	test   esi,esi
   467de:	mov    rsi,r10
   467e1:	setne  al
   467e4:	shl    r8d,0x5
   467e8:	add    eax,0x3
   467eb:	or     r8d,ecx
   467ee:	mov    DWORD PTR [rbx],eax
   467f0:	mov    rax,QWORD PTR [rbx+0x18]
   467f4:	mov    BYTE PTR [rax],r8b
   467f7:	mov    rax,QWORD PTR [rbx+0x18]
   467fb:	lea    rdi,[rax+0x1]
   467ff:	call   4440 <memcpy@plt>
   46804:	mov    rax,QWORD PTR [rbx+0x18]
   46808:	mov    ecx,r13d
   4680b:	mov    edx,r12d
   4680e:	xor    esi,esi
   46810:	lea    rdi,[rax+0x1]
   46814:	call   46600 <RBSPtoEBSP>
   46819:	add    eax,0x1
   4681c:	mov    DWORD PTR [rbx+0x4],eax
   4681f:	pop    rbx
   46820:	pop    r12
   46822:	pop    r13
   46824:	ret    
   46825:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4682f:	nop

0000000000046830 <AllocNALU>:
   46830:	endbr64 
   46834:	push   r12
   46836:	mov    esi,0x20
   4683b:	push   rbx
   4683c:	mov    ebx,edi
   4683e:	mov    edi,0x1
   46843:	sub    rsp,0x8
   46847:	call   4400 <calloc@plt>
   4684c:	mov    r12,rax
   4684f:	test   rax,rax
   46852:	je     4687b <AllocNALU+0x4b>
   46854:	movsxd rdi,ebx
   46857:	mov    esi,0x1
   4685c:	mov    DWORD PTR [r12+0x8],ebx
   46861:	call   4400 <calloc@plt>
   46866:	mov    QWORD PTR [r12+0x18],rax
   4686b:	test   rax,rax
   4686e:	je     46889 <AllocNALU+0x59>
   46870:	add    rsp,0x8
   46874:	mov    rax,r12
   46877:	pop    rbx
   46878:	pop    r12
   4687a:	ret    
   4687b:	lea    rdi,[rip+0x2f816]        # 76098 <QP2QUANT+0xb8>
   46882:	call   38210 <no_mem_exit>
   46887:	jmp    46854 <AllocNALU+0x24>
   46889:	lea    rdi,[rip+0x2f815]        # 760a5 <QP2QUANT+0xc5>
   46890:	call   38210 <no_mem_exit>
   46895:	jmp    46870 <AllocNALU+0x40>
   46897:	nop    WORD PTR [rax+rax*1+0x0]

00000000000468a0 <FreeNALU>:
   468a0:	endbr64 
   468a4:	test   rdi,rdi
   468a7:	je     468c8 <FreeNALU+0x28>
   468a9:	push   rbp
   468aa:	mov    rbp,rdi
   468ad:	mov    rdi,QWORD PTR [rdi+0x18]
   468b1:	test   rdi,rdi
   468b4:	je     468bb <FreeNALU+0x1b>
   468b6:	call   42d0 <free@plt>
   468bb:	mov    rdi,rbp
   468be:	pop    rbp
   468bf:	jmp    42d0 <free@plt>
   468c4:	nop    DWORD PTR [rax+0x0]
   468c8:	ret    
   468c9:	nop    DWORD PTR [rax+0x0]

00000000000468d0 <testEndian>:
   468d0:	endbr64 
   468d4:	xor    eax,eax
   468d6:	ret    
   468d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000468e0 <img2buf>:
   468e0:	endbr64 
   468e4:	push   r15
   468e6:	mov    r11d,edx
   468e9:	mov    r15d,edx
   468ec:	mov    eax,r8d
   468ef:	push   r14
   468f1:	push   r13
   468f3:	mov    r13,rdi
   468f6:	push   r12
   468f8:	mov    r12d,ecx
   468fb:	push   rbp
   468fc:	mov    ebp,r9d
   468ff:	push   rbx
   46900:	sub    r11d,ebp
   46903:	mov    rbx,rsi
   46906:	sub    rsp,0x28
   4690a:	mov    r14d,DWORD PTR [rsp+0x60]
   4690f:	mov    r9d,DWORD PTR [rsp+0x68]
   46914:	sub    r11d,r14d
   46917:	cmp    r8d,0x2
   4691b:	ja     469e1 <img2buf+0x101>
   46921:	sub    r12d,DWORD PTR [rsp+0x70]
   46926:	cmp    r9d,r12d
   46929:	jge    469d2 <img2buf+0xf2>
   4692f:	movsxd rcx,r9d
   46932:	not    r9d
   46935:	sub    r15d,r14d
   46938:	lea    edx,[r9+r12*1]
   4693c:	lea    r10,[r13+rcx*8+0x0]
   46941:	mov    r14d,r15d
   46944:	mov    r15d,r11d
   46947:	add    rdx,rcx
   4694a:	mov    ecx,ebp
   4694c:	movsxd r11,eax
   4694f:	movsxd r9,r8d
   46952:	not    ecx
   46954:	imul   r15d,r8d
   46958:	lea    rdx,[r13+rdx*8+0x8]
   4695d:	mov    r8d,r11d
   46960:	mov    QWORD PTR [rsp+0x18],rdx
   46965:	movsxd rdx,ebp
   46968:	add    ecx,r14d
   4696b:	xor    r13d,r13d
   4696e:	lea    rsi,[rdx+rdx*1]
   46972:	lea    r12,[rdx+rcx*1+0x1]
   46977:	mov    QWORD PTR [rsp+0x10],rsi
   4697c:	add    r12,r12
   4697f:	nop
   46980:	movsxd rsi,r13d
   46983:	mov    rcx,QWORD PTR [rsp+0x10]
   46988:	add    rsi,rbx
   4698b:	cmp    ebp,r14d
   4698e:	jge    469c4 <img2buf+0xe4>
   46990:	mov    rdi,QWORD PTR [r10]
   46993:	add    rdi,rcx
   46996:	test   r11d,r11d
   46999:	je     469b8 <img2buf+0xd8>
   4699b:	mov    QWORD PTR [rsp+0x8],rcx
   469a0:	xor    eax,eax
   469a2:	mov    edx,eax
   469a4:	add    eax,0x1
   469a7:	movzx  ecx,BYTE PTR [rdi+rdx*1]
   469ab:	mov    BYTE PTR [rsi+rdx*1],cl
   469ae:	cmp    eax,r8d
   469b1:	jb     469a2 <img2buf+0xc2>
   469b3:	mov    rcx,QWORD PTR [rsp+0x8]
   469b8:	add    rcx,0x2
   469bc:	add    rsi,r9
   469bf:	cmp    rcx,r12
   469c2:	jne    46990 <img2buf+0xb0>
   469c4:	add    r10,0x8
   469c8:	add    r13d,r15d
   469cb:	cmp    r10,QWORD PTR [rsp+0x18]
   469d0:	jne    46980 <img2buf+0xa0>
   469d2:	add    rsp,0x28
   469d6:	pop    rbx
   469d7:	pop    rbp
   469d8:	pop    r12
   469da:	pop    r13
   469dc:	pop    r14
   469de:	pop    r15
   469e0:	ret    
   469e1:	mov    edx,ecx
   469e3:	xor    esi,esi
   469e5:	mov    rdi,rbx
   469e8:	mov    DWORD PTR [rsp+0x10],r11d
   469ed:	sub    edx,r9d
   469f0:	sub    edx,DWORD PTR [rsp+0x70]
   469f4:	mov    DWORD PTR [rsp+0x8],r8d
   469f9:	imul   edx,r11d
   469fd:	imul   edx,r8d
   46a01:	movsxd rdx,edx
   46a04:	call   43b0 <memset@plt>
   46a09:	mov    r9d,DWORD PTR [rsp+0x68]
   46a0e:	mov    r11d,DWORD PTR [rsp+0x10]
   46a13:	mov    eax,0x2
   46a18:	mov    r8d,DWORD PTR [rsp+0x8]
   46a1d:	jmp    46921 <img2buf+0x41>
   46a22:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   46a2d:	nop    DWORD PTR [rax]

0000000000046a30 <write_out_picture>:
   46a30:	endbr64 
   46a34:	push   r15
   46a36:	push   r14
   46a38:	mov    r14,rdi
   46a3b:	push   r13
   46a3d:	push   r12
   46a3f:	push   rbp
   46a40:	push   rbx
   46a41:	sub    rsp,0x48
   46a45:	mov    DWORD PTR [rsp+0xc],esi
   46a49:	movabs rsi,0x100000002
   46a53:	mov    rax,QWORD PTR fs:0x28
   46a5c:	mov    QWORD PTR [rsp+0x38],rax
   46a61:	xor    eax,eax
   46a63:	mov    QWORD PTR [rsp+0x18],rsi
   46a68:	movabs rax,0x200000001
   46a72:	mov    QWORD PTR [rsp+0x10],rax
   46a77:	mov    QWORD PTR [rsp+0x20],rax
   46a7c:	movabs rax,0x100000001
   46a86:	mov    QWORD PTR [rsp+0x28],rax
   46a8b:	mov    rax,QWORD PTR [rip+0x41b26]        # 885b8 <input>
   46a92:	mov    ecx,DWORD PTR [rax+0xcf0]
   46a98:	mov    DWORD PTR [rsp+0x4],ecx
   46a9c:	test   ecx,ecx
   46a9e:	je     46aae <write_out_picture+0x7e>
   46aa0:	cmp    DWORD PTR [rax+0x48],0x3
   46aa4:	sete   al
   46aa7:	movzx  eax,al
   46aaa:	mov    DWORD PTR [rsp+0x4],eax
   46aae:	mov    edi,DWORD PTR [r14+0x18f4]
   46ab5:	test   edi,edi
   46ab7:	jne    46c10 <write_out_picture+0x1e0>
   46abd:	mov    r15d,DWORD PTR [r14+0x19a0]
   46ac4:	test   r15d,r15d
   46ac7:	jne    46bc0 <write_out_picture+0x190>
   46acd:	mov    DWORD PTR [rsp+0x8],0x0
   46ad5:	xor    ebp,ebp
   46ad7:	xor    r13d,r13d
   46ada:	mov    rax,QWORD PTR [rip+0x41acf]        # 885b0 <img>
   46ae1:	mov    edi,DWORD PTR [r14+0x18f8]
   46ae8:	mov    edx,DWORD PTR [rax+0x11bd0]
   46aee:	test   edx,edx
   46af0:	lea    ebx,[rdx+0x7]
   46af3:	cmovns ebx,edx
   46af6:	imul   edi,DWORD PTR [r14+0x18fc]
   46afe:	sar    ebx,0x3
   46b01:	imul   edi,ebx
   46b04:	movsxd rdi,edi
   46b07:	call   4460 <malloc@plt>
   46b0c:	mov    r12,rax
   46b0f:	test   rax,rax
   46b12:	je     46e5a <write_out_picture+0x42a>
   46b18:	mov    esi,DWORD PTR [rsp+0x4]
   46b1c:	test   esi,esi
   46b1e:	jne    46d48 <write_out_picture+0x318>
   46b24:	sub    rsp,0x8
   46b28:	mov    r9d,r15d
   46b2b:	mov    r8d,ebx
   46b2e:	mov    rsi,r12
   46b31:	mov    ecx,DWORD PTR [r14+0x18fc]
   46b38:	mov    edx,DWORD PTR [r14+0x18f8]
   46b3f:	push   rbp
   46b40:	mov    eax,DWORD PTR [rsp+0x18]
   46b44:	mov    rdi,QWORD PTR [r14+0x1918]
   46b4b:	push   rax
   46b4c:	push   r13
   46b4e:	call   468e0 <img2buf>
   46b53:	mov    edi,DWORD PTR [rsp+0x2c]
   46b57:	add    rsp,0x20
   46b5b:	mov    rsi,r12
   46b5e:	mov    eax,DWORD PTR [r14+0x18f8]
   46b65:	mov    edx,DWORD PTR [r14+0x18fc]
   46b6c:	sub    eax,r13d
   46b6f:	sub    edx,ebp
   46b71:	sub    edx,DWORD PTR [rsp+0x8]
   46b75:	sub    eax,r15d
   46b78:	imul   edx,eax
   46b7b:	imul   edx,ebx
   46b7e:	movsxd rdx,edx
   46b81:	call   4350 <write@plt>
   46b86:	mov    edx,DWORD PTR [r14+0x1998]
   46b8d:	test   edx,edx
   46b8f:	jne    46c38 <write_out_picture+0x208>
   46b95:	mov    rax,QWORD PTR [rsp+0x38]
   46b9a:	xor    rax,QWORD PTR fs:0x28
   46ba3:	jne    46e55 <write_out_picture+0x425>
   46ba9:	add    rsp,0x48
   46bad:	mov    rdi,r12
   46bb0:	pop    rbx
   46bb1:	pop    rbp
   46bb2:	pop    r12
   46bb4:	pop    r13
   46bb6:	pop    r14
   46bb8:	pop    r15
   46bba:	jmp    42d0 <free@plt>
   46bbf:	nop
   46bc0:	movsxd rax,DWORD PTR [r14+0x1998]
   46bc7:	mov    ebp,0x2
   46bcc:	sub    ebp,DWORD PTR [r14+0x199c]
   46bd3:	mov    r15d,DWORD PTR [r14+0x19a4]
   46bda:	imul   ebp,DWORD PTR [rsp+rax*4+0x20]
   46bdf:	mov    r13d,DWORD PTR [rsp+rax*4+0x10]
   46be4:	mov    eax,DWORD PTR [r14+0x19ac]
   46beb:	imul   r15d,r13d
   46bef:	imul   eax,ebp
   46bf2:	imul   r13d,DWORD PTR [r14+0x19a8]
   46bfa:	imul   ebp,DWORD PTR [r14+0x19b0]
   46c02:	mov    DWORD PTR [rsp+0x8],eax
   46c06:	jmp    46ada <write_out_picture+0xaa>
   46c0b:	nop    DWORD PTR [rax+rax*1+0x0]
   46c10:	mov    rax,QWORD PTR [rsp+0x38]
   46c15:	xor    rax,QWORD PTR fs:0x28
   46c1e:	jne    46e55 <write_out_picture+0x425>
   46c24:	add    rsp,0x48
   46c28:	pop    rbx
   46c29:	pop    rbp
   46c2a:	pop    r12
   46c2c:	pop    r13
   46c2e:	pop    r14
   46c30:	pop    r15
   46c32:	ret    
   46c33:	nop    DWORD PTR [rax+rax*1+0x0]
   46c38:	mov    r15d,DWORD PTR [r14+0x19ac]
   46c3f:	mov    ebp,0x2
   46c44:	sub    ebp,DWORD PTR [r14+0x199c]
   46c4b:	sub    rsp,0x8
   46c4f:	mov    esi,DWORD PTR [r14+0x19a8]
   46c56:	mov    rax,QWORD PTR [r14+0x1940]
   46c5d:	mov    r8d,ebx
   46c60:	imul   r15d,ebp
   46c64:	mov    r13d,DWORD PTR [r14+0x19a4]
   46c6b:	mov    ecx,DWORD PTR [r14+0x1904]
   46c72:	imul   ebp,DWORD PTR [r14+0x19b0]
   46c7a:	mov    edx,DWORD PTR [r14+0x1900]
   46c81:	mov    r9d,r13d
   46c84:	push   rbp
   46c85:	push   r15
   46c87:	mov    DWORD PTR [rsp+0x20],esi
   46c8b:	push   rsi
   46c8c:	mov    rdi,QWORD PTR [rax]
   46c8f:	mov    rsi,r12
   46c92:	call   468e0 <img2buf>
   46c97:	mov    edi,DWORD PTR [rsp+0x2c]
   46c9b:	add    rsp,0x20
   46c9f:	mov    rsi,r12
   46ca2:	mov    edx,DWORD PTR [r14+0x1904]
   46ca9:	mov    eax,DWORD PTR [r14+0x1900]
   46cb0:	sub    eax,DWORD PTR [rsp+0x8]
   46cb4:	sub    edx,ebp
   46cb6:	sub    eax,r13d
   46cb9:	sub    edx,r15d
   46cbc:	imul   edx,eax
   46cbf:	imul   edx,ebx
   46cc2:	movsxd rdx,edx
   46cc5:	call   4350 <write@plt>
   46cca:	mov    eax,DWORD PTR [rsp+0x4]
   46cce:	test   eax,eax
   46cd0:	jne    46b95 <write_out_picture+0x165>
   46cd6:	mov    rax,QWORD PTR [r14+0x1940]
   46cdd:	mov    r8d,ebx
   46ce0:	mov    rsi,r12
   46ce3:	mov    r9d,r13d
   46ce6:	sub    rsp,0x8
   46cea:	mov    edx,DWORD PTR [r14+0x1900]
   46cf1:	mov    ecx,DWORD PTR [r14+0x1904]
   46cf8:	mov    rdi,QWORD PTR [rax+0x8]
   46cfc:	push   rbp
   46cfd:	push   r15
   46cff:	mov    eax,DWORD PTR [rsp+0x20]
   46d03:	push   rax
   46d04:	call   468e0 <img2buf>
   46d09:	mov    edi,DWORD PTR [rsp+0x2c]
   46d0d:	add    rsp,0x20
   46d11:	mov    rsi,r12
   46d14:	mov    edx,DWORD PTR [r14+0x1904]
   46d1b:	mov    eax,DWORD PTR [r14+0x1900]
   46d22:	sub    eax,DWORD PTR [rsp+0x8]
   46d26:	sub    edx,ebp
   46d28:	sub    eax,r13d
   46d2b:	sub    edx,r15d
   46d2e:	imul   edx,eax
   46d31:	imul   ebx,edx
   46d34:	movsxd rdx,ebx
   46d37:	call   4350 <write@plt>
   46d3c:	jmp    46b95 <write_out_picture+0x165>
   46d41:	nop    DWORD PTR [rax+0x0]
   46d48:	mov    r10d,0x2
   46d4e:	mov    eax,DWORD PTR [r14+0x19ac]
   46d55:	sub    rsp,0x8
   46d59:	mov    rsi,QWORD PTR [r14+0x1940]
   46d60:	mov    ebp,r10d
   46d63:	sub    ebp,DWORD PTR [r14+0x199c]
   46d6a:	mov    r15d,DWORD PTR [r14+0x19a8]
   46d71:	mov    r8d,ebx
   46d74:	imul   eax,ebp
   46d77:	mov    rdi,QWORD PTR [rsi+0x8]
   46d7b:	mov    r13d,DWORD PTR [r14+0x19a4]
   46d82:	mov    rsi,r12
   46d85:	imul   ebp,DWORD PTR [r14+0x19b0]
   46d8d:	mov    ecx,DWORD PTR [r14+0x1904]
   46d94:	mov    edx,DWORD PTR [r14+0x1900]
   46d9b:	mov    r9d,r13d
   46d9e:	push   rbp
   46d9f:	push   rax
   46da0:	mov    DWORD PTR [rsp+0x20],eax
   46da4:	push   r15
   46da6:	call   468e0 <img2buf>
   46dab:	mov    eax,DWORD PTR [rsp+0x28]
   46daf:	mov    edi,DWORD PTR [rsp+0x2c]
   46db3:	mov    rsi,r12
   46db6:	mov    edx,DWORD PTR [r14+0x1904]
   46dbd:	add    rsp,0x20
   46dc1:	sub    edx,ebp
   46dc3:	sub    edx,eax
   46dc5:	mov    eax,DWORD PTR [r14+0x1900]
   46dcc:	sub    eax,r15d
   46dcf:	sub    eax,r13d
   46dd2:	imul   edx,eax
   46dd5:	imul   edx,ebx
   46dd8:	movsxd rdx,edx
   46ddb:	call   4350 <write@plt>
   46de0:	mov    rax,QWORD PTR [rip+0x6f089]        # b5e70 <active_sps>
   46de7:	mov    ecx,DWORD PTR [rax+0x488]
   46ded:	test   ecx,ecx
   46def:	je     46e40 <write_out_picture+0x410>
   46df1:	movsxd rax,DWORD PTR [r14+0x1998]
   46df8:	mov    r10d,0x2
   46dfe:	sub    r10d,DWORD PTR [r14+0x199c]
   46e05:	mov    r15d,DWORD PTR [r14+0x19a4]
   46e0c:	mov    ebp,DWORD PTR [rsp+rax*4+0x20]
   46e10:	mov    r13d,DWORD PTR [rsp+rax*4+0x10]
   46e15:	mov    eax,DWORD PTR [r14+0x19ac]
   46e1c:	imul   ebp,r10d
   46e20:	imul   r15d,r13d
   46e24:	imul   r13d,DWORD PTR [r14+0x19a8]
   46e2c:	imul   eax,ebp
   46e2f:	imul   ebp,DWORD PTR [r14+0x19b0]
   46e37:	mov    DWORD PTR [rsp+0x8],eax
   46e3b:	jmp    46b24 <write_out_picture+0xf4>
   46e40:	mov    DWORD PTR [rsp+0x8],0x0
   46e48:	xor    ebp,ebp
   46e4a:	xor    r13d,r13d
   46e4d:	xor    r15d,r15d
   46e50:	jmp    46b24 <write_out_picture+0xf4>
   46e55:	call   4390 <__stack_chk_fail@plt>
   46e5a:	lea    rdi,[rip+0x2f256]        # 760b7 <QP2QUANT+0xd7>
   46e61:	call   38210 <no_mem_exit>
   46e66:	jmp    46b18 <write_out_picture+0xe8>
   46e6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000046e70 <write_picture>:
   46e70:	endbr64 
   46e74:	jmp    46a30 <write_out_picture>
   46e79:	nop    DWORD PTR [rax+0x0]

0000000000046e80 <init_out_buffer>:
   46e80:	endbr64 
   46e84:	sub    rsp,0x8
   46e88:	xor    eax,eax
   46e8a:	call   314f0 <alloc_frame_store>
   46e8f:	mov    QWORD PTR [rip+0x70612],rax        # b74a8 <out_buffer>
   46e96:	add    rsp,0x8
   46e9a:	ret    
   46e9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000046ea0 <uninit_out_buffer>:
   46ea0:	endbr64 
   46ea4:	sub    rsp,0x8
   46ea8:	mov    rdi,QWORD PTR [rip+0x705f9]        # b74a8 <out_buffer>
   46eaf:	call   319c0 <free_frame_store>
   46eb4:	mov    QWORD PTR [rip+0x705e9],0x0        # b74a8 <out_buffer>
   46ebf:	add    rsp,0x8
   46ec3:	ret    
   46ec4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   46ecf:	nop

0000000000046ed0 <clear_picture>:
   46ed0:	endbr64 
   46ed4:	push   rbp
   46ed5:	xor    ebp,ebp
   46ed7:	push   rbx
   46ed8:	mov    rbx,rdi
   46edb:	sub    rsp,0x8
   46edf:	mov    edx,DWORD PTR [rdi+0x18fc]
   46ee5:	test   edx,edx
   46ee7:	jle    46f23 <clear_picture+0x53>
   46ee9:	nop    DWORD PTR [rax+0x0]
   46ef0:	mov    rax,QWORD PTR [rip+0x416b9]        # 885b0 <img>
   46ef7:	movsxd rdx,DWORD PTR [rbx+0x18f8]
   46efe:	mov    esi,DWORD PTR [rax+0x11be8]
   46f04:	mov    rax,QWORD PTR [rbx+0x1918]
   46f0b:	add    rdx,rdx
   46f0e:	mov    rdi,QWORD PTR [rax+rbp*8]
   46f12:	add    rbp,0x1
   46f16:	call   43b0 <memset@plt>
   46f1b:	cmp    DWORD PTR [rbx+0x18fc],ebp
   46f21:	jg     46ef0 <clear_picture+0x20>
   46f23:	mov    eax,DWORD PTR [rbx+0x1904]
   46f29:	xor    ebp,ebp
   46f2b:	test   eax,eax
   46f2d:	jle    46fa7 <clear_picture+0xd7>
   46f2f:	nop
   46f30:	mov    rax,QWORD PTR [rip+0x41679]        # 885b0 <img>
   46f37:	movsxd rdx,DWORD PTR [rbx+0x1900]
   46f3e:	mov    esi,DWORD PTR [rax+0x11be8]
   46f44:	mov    rax,QWORD PTR [rbx+0x1940]
   46f4b:	add    rdx,rdx
   46f4e:	mov    rax,QWORD PTR [rax]
   46f51:	mov    rdi,QWORD PTR [rax+rbp*8]
   46f55:	add    rbp,0x1
   46f59:	call   43b0 <memset@plt>
   46f5e:	mov    eax,DWORD PTR [rbx+0x1904]
   46f64:	cmp    eax,ebp
   46f66:	jg     46f30 <clear_picture+0x60>
   46f68:	test   eax,eax
   46f6a:	jle    46fa7 <clear_picture+0xd7>
   46f6c:	xor    ebp,ebp
   46f6e:	xchg   ax,ax
   46f70:	mov    rax,QWORD PTR [rip+0x41639]        # 885b0 <img>
   46f77:	movsxd rdx,DWORD PTR [rbx+0x1900]
   46f7e:	mov    esi,DWORD PTR [rax+0x11be8]
   46f84:	mov    rax,QWORD PTR [rbx+0x1940]
   46f8b:	add    rdx,rdx
   46f8e:	mov    rax,QWORD PTR [rax+0x8]
   46f92:	mov    rdi,QWORD PTR [rax+rbp*8]
   46f96:	add    rbp,0x1
   46f9a:	call   43b0 <memset@plt>
   46f9f:	cmp    DWORD PTR [rbx+0x1904],ebp
   46fa5:	jg     46f70 <clear_picture+0xa0>
   46fa7:	add    rsp,0x8
   46fab:	pop    rbx
   46fac:	pop    rbp
   46fad:	ret    
   46fae:	xchg   ax,ax

0000000000046fb0 <write_unpaired_field>:
   46fb0:	endbr64 
   46fb4:	push   rbp
   46fb5:	mov    ebp,esi
   46fb7:	push   rbx
   46fb8:	mov    rbx,rdi
   46fbb:	sub    rsp,0x8
   46fbf:	mov    eax,DWORD PTR [rdi]
   46fc1:	test   al,0x1
   46fc3:	jne    46fe0 <write_unpaired_field+0x30>
   46fc5:	test   al,0x2
   46fc7:	jne    4702c <write_unpaired_field+0x7c>
   46fc9:	mov    DWORD PTR [rbx],0x3
   46fcf:	add    rsp,0x8
   46fd3:	pop    rbx
   46fd4:	pop    rbp
   46fd5:	ret    
   46fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46fe0:	mov    rax,QWORD PTR [rdi+0x30]
   46fe4:	mov    edi,0x2
   46fe9:	mov    ecx,DWORD PTR [rax+0x1900]
   46fef:	mov    edx,DWORD PTR [rax+0x18fc]
   46ff5:	mov    esi,DWORD PTR [rax+0x18f8]
   46ffb:	mov    r8d,DWORD PTR [rax+0x1904]
   47002:	call   31560 <alloc_storable_picture>
   47007:	mov    QWORD PTR [rbx+0x38],rax
   4700b:	mov    rdi,rax
   4700e:	call   46ed0 <clear_picture>
   47013:	mov    rdi,rbx
   47016:	call   34890 <dpb_combine_field>
   4701b:	mov    rdi,QWORD PTR [rbx+0x28]
   4701f:	mov    esi,ebp
   47021:	call   46a30 <write_out_picture>
   47026:	mov    eax,DWORD PTR [rbx]
   47028:	test   al,0x2
   4702a:	je     46fc9 <write_unpaired_field+0x19>
   4702c:	mov    rax,QWORD PTR [rbx+0x38]
   47030:	mov    edi,0x1
   47035:	mov    ecx,DWORD PTR [rax+0x1900]
   4703b:	mov    edx,DWORD PTR [rax+0x18fc]
   47041:	mov    esi,DWORD PTR [rax+0x18f8]
   47047:	mov    r8d,DWORD PTR [rax+0x1904]
   4704e:	call   31560 <alloc_storable_picture>
   47053:	mov    QWORD PTR [rbx+0x30],rax
   47057:	mov    rdi,rax
   4705a:	call   46ed0 <clear_picture>
   4705f:	mov    rdi,rbx
   47062:	call   34890 <dpb_combine_field>
   47067:	mov    rdi,QWORD PTR [rbx+0x28]
   4706b:	mov    esi,ebp
   4706d:	call   46a30 <write_out_picture>
   47072:	mov    DWORD PTR [rbx],0x3
   47078:	add    rsp,0x8
   4707c:	pop    rbx
   4707d:	pop    rbp
   4707e:	ret    
   4707f:	nop

0000000000047080 <flush_direct_output>:
   47080:	endbr64 
   47084:	sub    rsp,0x8
   47088:	mov    esi,edi
   4708a:	mov    rdi,QWORD PTR [rip+0x70417]        # b74a8 <out_buffer>
   47091:	call   46fb0 <write_unpaired_field>
   47096:	mov    rax,QWORD PTR [rip+0x7040b]        # b74a8 <out_buffer>
   4709d:	mov    rdi,QWORD PTR [rax+0x28]
   470a1:	call   317f0 <free_storable_picture>
   470a6:	mov    rax,QWORD PTR [rip+0x703fb]        # b74a8 <out_buffer>
   470ad:	mov    QWORD PTR [rax+0x28],0x0
   470b5:	mov    rdi,QWORD PTR [rax+0x30]
   470b9:	call   317f0 <free_storable_picture>
   470be:	mov    rax,QWORD PTR [rip+0x703e3]        # b74a8 <out_buffer>
   470c5:	mov    QWORD PTR [rax+0x30],0x0
   470cd:	mov    rdi,QWORD PTR [rax+0x38]
   470d1:	call   317f0 <free_storable_picture>
   470d6:	mov    rax,QWORD PTR [rip+0x703cb]        # b74a8 <out_buffer>
   470dd:	mov    QWORD PTR [rax+0x38],0x0
   470e5:	mov    DWORD PTR [rax],0x0
   470eb:	add    rsp,0x8
   470ef:	ret    

00000000000470f0 <write_stored_frame>:
   470f0:	endbr64 
   470f4:	push   rbp
   470f5:	mov    ebp,esi
   470f7:	push   rbx
   470f8:	mov    rbx,rdi
   470fb:	mov    edi,esi
   470fd:	sub    rsp,0x8
   47101:	call   47080 <flush_direct_output>
   47106:	cmp    DWORD PTR [rbx],0x2
   47109:	jg     47128 <write_stored_frame+0x38>
   4710b:	mov    esi,ebp
   4710d:	mov    rdi,rbx
   47110:	call   46fb0 <write_unpaired_field>
   47115:	mov    DWORD PTR [rbx+0x20],0x1
   4711c:	add    rsp,0x8
   47120:	pop    rbx
   47121:	pop    rbp
   47122:	ret    
   47123:	nop    DWORD PTR [rax+rax*1+0x0]
   47128:	mov    rdi,QWORD PTR [rbx+0x28]
   4712c:	mov    esi,ebp
   4712e:	call   46a30 <write_out_picture>
   47133:	mov    DWORD PTR [rbx+0x20],0x1
   4713a:	add    rsp,0x8
   4713e:	pop    rbx
   4713f:	pop    rbp
   47140:	ret    
   47141:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4714c:	nop    DWORD PTR [rax+0x0]

0000000000047150 <direct_output>:
   47150:	endbr64 
   47154:	push   r12
   47156:	mov    r12d,esi
   47159:	push   rbp
   4715a:	mov    rbp,rdi
   4715d:	sub    rsp,0x8
   47161:	mov    edx,DWORD PTR [rdi]
   47163:	test   edx,edx
   47165:	je     47238 <direct_output+0xe8>
   4716b:	mov    rdi,QWORD PTR [rip+0x70336]        # b74a8 <out_buffer>
   47172:	mov    eax,DWORD PTR [rdi]
   47174:	cmp    edx,0x1
   47177:	je     47220 <direct_output+0xd0>
   4717d:	cmp    edx,0x2
   47180:	je     47190 <direct_output+0x40>
   47182:	cmp    eax,0x3
   47185:	je     471a6 <direct_output+0x56>
   47187:	add    rsp,0x8
   4718b:	pop    rbp
   4718c:	pop    r12
   4718e:	ret    
   4718f:	nop
   47190:	test   al,0x2
   47192:	jne    47288 <direct_output+0x138>
   47198:	or     eax,0x2
   4719b:	mov    QWORD PTR [rdi+0x38],rbp
   4719f:	mov    DWORD PTR [rdi],eax
   471a1:	cmp    eax,0x3
   471a4:	jne    47187 <direct_output+0x37>
   471a6:	call   34890 <dpb_combine_field>
   471ab:	mov    rax,QWORD PTR [rip+0x702f6]        # b74a8 <out_buffer>
   471b2:	mov    esi,r12d
   471b5:	mov    rdi,QWORD PTR [rax+0x28]
   471b9:	call   46a30 <write_out_picture>
   471be:	mov    rax,QWORD PTR [rip+0x702e3]        # b74a8 <out_buffer>
   471c5:	mov    rdi,QWORD PTR [rax+0x28]
   471c9:	call   317f0 <free_storable_picture>
   471ce:	mov    rax,QWORD PTR [rip+0x702d3]        # b74a8 <out_buffer>
   471d5:	mov    QWORD PTR [rax+0x28],0x0
   471dd:	mov    rdi,QWORD PTR [rax+0x30]
   471e1:	call   317f0 <free_storable_picture>
   471e6:	mov    rax,QWORD PTR [rip+0x702bb]        # b74a8 <out_buffer>
   471ed:	mov    QWORD PTR [rax+0x30],0x0
   471f5:	mov    rdi,QWORD PTR [rax+0x38]
   471f9:	call   317f0 <free_storable_picture>
   471fe:	mov    rax,QWORD PTR [rip+0x702a3]        # b74a8 <out_buffer>
   47205:	mov    QWORD PTR [rax+0x38],0x0
   4720d:	mov    DWORD PTR [rax],0x0
   47213:	add    rsp,0x8
   47217:	pop    rbp
   47218:	pop    r12
   4721a:	ret    
   4721b:	nop    DWORD PTR [rax+rax*1+0x0]
   47220:	test   al,0x1
   47222:	jne    47260 <direct_output+0x110>
   47224:	or     eax,0x1
   47227:	mov    QWORD PTR [rdi+0x30],rbp
   4722b:	mov    DWORD PTR [rdi],eax
   4722d:	jmp    47182 <direct_output+0x32>
   47232:	nop    WORD PTR [rax+rax*1+0x0]
   47238:	mov    edi,esi
   4723a:	call   47080 <flush_direct_output>
   4723f:	mov    rdi,rbp
   47242:	mov    esi,r12d
   47245:	call   46a30 <write_out_picture>
   4724a:	add    rsp,0x8
   4724e:	mov    rdi,rbp
   47251:	pop    rbp
   47252:	pop    r12
   47254:	jmp    317f0 <free_storable_picture>
   47259:	nop    DWORD PTR [rax+0x0]
   47260:	mov    edi,esi
   47262:	call   47080 <flush_direct_output>
   47267:	mov    rdi,QWORD PTR [rip+0x7023a]        # b74a8 <out_buffer>
   4726e:	mov    edx,DWORD PTR [rbp+0x0]
   47271:	mov    eax,DWORD PTR [rdi]
   47273:	mov    QWORD PTR [rdi+0x30],rbp
   47277:	or     eax,0x1
   4727a:	mov    DWORD PTR [rdi],eax
   4727c:	jmp    4717d <direct_output+0x2d>
   47281:	nop    DWORD PTR [rax+0x0]
   47288:	mov    edi,r12d
   4728b:	call   47080 <flush_direct_output>
   47290:	mov    rdi,QWORD PTR [rip+0x70211]        # b74a8 <out_buffer>
   47297:	mov    eax,DWORD PTR [rdi]
   47299:	jmp    47198 <direct_output+0x48>
   4729e:	xchg   ax,ax

00000000000472a0 <FreeParameterSets>:
   472a0:	endbr64 
   472a4:	mov    rdi,QWORD PTR [rip+0x6ebc5]        # b5e70 <active_sps>
   472ab:	jmp    49020 <FreeSPS>

00000000000472b0 <GenerateSequenceParameterSet>:
   472b0:	endbr64 
   472b4:	movabs rsi,0x100000002
   472be:	push   rbp
   472bf:	xor    ebp,ebp
   472c1:	push   rbx
   472c2:	mov    rbx,rdi
   472c5:	sub    rsp,0x38
   472c9:	mov    r8,QWORD PTR [rip+0x412e8]        # 885b8 <input>
   472d0:	mov    rax,QWORD PTR fs:0x28
   472d9:	mov    QWORD PTR [rsp+0x28],rax
   472de:	xor    eax,eax
   472e0:	mov    QWORD PTR [rsp+0x8],rsi
   472e5:	movabs rax,0x200000001
   472ef:	mov    QWORD PTR [rsp],rax
   472f3:	mov    QWORD PTR [rsp+0x10],rax
   472f8:	movabs rax,0x100000001
   47302:	mov    QWORD PTR [rsp+0x18],rax
   47307:	mov    eax,DWORD PTR [r8]
   4730a:	lea    ecx,[rax-0x64]
   4730d:	cmp    ecx,0x2c
   47310:	ja     47322 <GenerateSequenceParameterSet+0x72>
   47312:	movabs rbp,0x100000400401
   4731c:	shr    rbp,cl
   4731f:	and    ebp,0x1
   47322:	mov    edx,DWORD PTR [r8+0x4]
   47326:	mov    QWORD PTR [rbx+0x8],0x0
   4732e:	cmp    eax,0x90
   47333:	mov    QWORD PTR [rbx+0x10],0x0
   4733b:	mov    esi,DWORD PTR [r8+0xce0]
   47342:	mov    edi,DWORD PTR [r8+0xce4]
   47349:	mov    rcx,QWORD PTR [rip+0x41260]        # 885b0 <img>
   47350:	mov    DWORD PTR [rbx+0x4],eax
   47353:	sete   al
   47356:	mov    DWORD PTR [rbx+0x18],edx
   47359:	lea    edx,[rsi-0x8]
   4735c:	movzx  eax,al
   4735f:	and    eax,DWORD PTR [r8+0xcfc]
   47366:	mov    DWORD PTR [rbx+0x48],edx
   47369:	lea    edx,[rdi-0x8]
   4736c:	mov    DWORD PTR [rbx+0x4c],edx
   4736f:	mov    edx,DWORD PTR [rcx+0x11ad8]
   47375:	mov    DWORD PTR [rbx+0x1c],0x0
   4737c:	mov    DWORD PTR [rcx+0x11c00],eax
   47382:	mov    eax,DWORD PTR [r8+0xd00]
   47389:	mov    DWORD PTR [rcx+0x11c14],eax
   4738f:	mov    eax,DWORD PTR [rip+0x6ead3]        # b5e68 <log2_max_frame_num_minus4>
   47395:	mov    DWORD PTR [rbx+0x50],eax
   47398:	mov    eax,DWORD PTR [rip+0x595a2]        # a0940 <log2_max_pic_order_cnt_lsb_minus4>
   4739e:	mov    DWORD PTR [rbx+0x58],eax
   473a1:	mov    eax,DWORD PTR [r8+0xc88]
   473a8:	mov    DWORD PTR [rbx+0x54],eax
   473ab:	mov    eax,DWORD PTR [rcx+0x11ae4]
   473b1:	mov    DWORD PTR [rbx+0x5c],edx
   473b4:	mov    edx,DWORD PTR [rcx+0x11adc]
   473ba:	mov    DWORD PTR [rbx+0x68],eax
   473bd:	mov    DWORD PTR [rbx+0x60],edx
   473c0:	mov    edx,DWORD PTR [rcx+0x11ae0]
   473c6:	mov    DWORD PTR [rbx+0x64],edx
   473c9:	test   eax,eax
   473cb:	je     473d6 <GenerateSequenceParameterSet+0x126>
   473cd:	mov    eax,DWORD PTR [rcx+0x11ae8]
   473d3:	mov    DWORD PTR [rbx+0x6c],eax
   473d6:	mov    eax,DWORD PTR [r8+0x24]
   473da:	xor    r9d,r9d
   473dd:	cmp    QWORD PTR [r8+0xb40],0x0
   473e5:	mov    esi,0x2
   473ea:	mov    DWORD PTR [rbx+0x470],0x0
   473f4:	sete   r9b
   473f8:	mov    DWORD PTR [rbx+0x46c],eax
   473fe:	mov    eax,DWORD PTR [rcx+0x11c18]
   47404:	add    eax,DWORD PTR [r8+0x40]
   47408:	mov    DWORD PTR [rbx+0x47c],r9d
   4740f:	lea    edi,[rax+0xf]
   47412:	cmovns edi,eax
   47415:	sub    esi,r9d
   47418:	sar    edi,0x4
   4741b:	lea    eax,[rdi-0x1]
   4741e:	mov    DWORD PTR [rbx+0x474],eax
   47424:	mov    eax,DWORD PTR [rcx+0x11c1c]
   4742a:	add    eax,DWORD PTR [r8+0x44]
   4742e:	mov    ecx,DWORD PTR [r8+0xb44]
   47435:	mov    edx,eax
   47437:	lea    eax,[rax+0xf]
   4743a:	cmovns eax,edx
   4743d:	xor    edx,edx
   4743f:	sar    eax,0x4
   47442:	div    esi
   47444:	lea    edx,[rax-0x1]
   47447:	mov    DWORD PTR [rbx+0x478],edx
   4744d:	xor    edx,edx
   4744f:	test   ecx,ecx
   47451:	mov    ecx,DWORD PTR [r8+0x4e4]
   47458:	setne  dl
   4745b:	xor    r9d,r9d
   4745e:	mov    DWORD PTR [rbx+0x484],ecx
   47464:	mov    ecx,DWORD PTR [r8+0x48]
   47468:	mov    r8d,DWORD PTR [r8+0xcf0]
   4746f:	mov    DWORD PTR [rbx+0x480],edx
   47475:	test   r8d,r8d
   47478:	je     47484 <GenerateSequenceParameterSet+0x1d4>
   4747a:	xor    r9d,r9d
   4747d:	cmp    ecx,0x3
   47480:	sete   r9b
   47484:	imul   esi,eax
   47487:	mov    DWORD PTR [rbx+0x49c],r9d
   4748e:	shl    edi,0x4
   47491:	mov    DWORD PTR [rbx+0x20],ecx
   47494:	shl    esi,0x4
   47497:	call   362a0 <alloc_colocated>
   4749c:	mov    QWORD PTR [rip+0x41965],rax        # 88e08 <Co_located>
   474a3:	test   bpl,bpl
   474a6:	je     475c0 <GenerateSequenceParameterSet+0x310>
   474ac:	mov    rcx,QWORD PTR [rip+0x41105]        # 885b8 <input>
   474b3:	mov    eax,DWORD PTR [rcx+0xcb8]
   474b9:	mov    edi,DWORD PTR [rcx+0xc94]
   474bf:	and    eax,0x1
   474c2:	mov    DWORD PTR [rbx+0x24],eax
   474c5:	xor    eax,eax
   474c7:	jmp    474e2 <GenerateSequenceParameterSet+0x232>
   474c9:	nop    DWORD PTR [rax+0x0]
   474d0:	mov    edx,DWORD PTR [rcx+rax*4+0xcbc]
   474d7:	and    edx,0x1
   474da:	mov    DWORD PTR [rbx+rax*4+0x28],edx
   474de:	add    rax,0x1
   474e2:	mov    edx,eax
   474e4:	cmp    rax,0x5
   474e8:	jbe    474d0 <GenerateSequenceParameterSet+0x220>
   474ea:	test   edi,edi
   474ec:	je     475b0 <GenerateSequenceParameterSet+0x300>
   474f2:	mov    esi,DWORD PTR [rcx+rax*4+0xcbc]
   474f9:	and    esi,0x1
   474fc:	mov    DWORD PTR [rbx+rax*4+0x28],esi
   47500:	cmp    edx,0x6
   47503:	je     474de <GenerateSequenceParameterSet+0x22e>
   47505:	mov    rcx,QWORD PTR [rip+0x410a4]        # 885b0 <img>
   4750c:	cmp    QWORD PTR [rcx+0x11c18],0x0
   47514:	je     475a0 <GenerateSequenceParameterSet+0x2f0>
   4751a:	mov    QWORD PTR [rbx+0x488],0x1
   47525:	mov    eax,DWORD PTR [rcx+0x11c18]
   4752b:	mov    ebp,0x2
   47530:	mov    edi,DWORD PTR [rbx+0x20]
   47533:	mov    esi,DWORD PTR [rcx+0x11c1c]
   47539:	mov    ecx,ebp
   4753b:	mov    DWORD PTR [rbx+0x494],0x0
   47545:	cdq    
   47546:	sub    ecx,DWORD PTR [rbx+0x47c]
   4754c:	idiv   DWORD PTR [rsp+rdi*4]
   4754f:	imul   ecx,DWORD PTR [rsp+rdi*4+0x10]
   47554:	mov    DWORD PTR [rbx+0x490],eax
   4755a:	mov    r8d,edx
   4755d:	mov    eax,esi
   4755f:	xor    edx,edx
   47561:	div    ecx
   47563:	mov    DWORD PTR [rbx+0x498],eax
   47569:	test   r8d,r8d
   4756c:	jne    47620 <GenerateSequenceParameterSet+0x370>
   47572:	mov    eax,esi
   47574:	xor    edx,edx
   47576:	div    ecx
   47578:	test   edx,edx
   4757a:	jne    475f0 <GenerateSequenceParameterSet+0x340>
   4757c:	mov    rax,QWORD PTR [rsp+0x28]
   47581:	xor    rax,QWORD PTR fs:0x28
   4758a:	jne    4765e <GenerateSequenceParameterSet+0x3ae>
   47590:	add    rsp,0x38
   47594:	pop    rbx
   47595:	pop    rbp
   47596:	ret    
   47597:	nop    WORD PTR [rax+rax*1+0x0]
   475a0:	mov    DWORD PTR [rbx+0x488],0x0
   475aa:	jmp    4757c <GenerateSequenceParameterSet+0x2cc>
   475ac:	nop    DWORD PTR [rax+0x0]
   475b0:	mov    DWORD PTR [rbx+rax*4+0x28],0x0
   475b8:	jmp    47500 <GenerateSequenceParameterSet+0x250>
   475bd:	nop    DWORD PTR [rax]
   475c0:	mov    QWORD PTR [rbx+0x24],0x0
   475c8:	mov    QWORD PTR [rbx+0x2c],0x0
   475d0:	mov    QWORD PTR [rbx+0x34],0x0
   475d8:	mov    QWORD PTR [rbx+0x3c],0x0
   475e0:	mov    DWORD PTR [rbx+0x44],0x0
   475e7:	jmp    47505 <GenerateSequenceParameterSet+0x255>
   475ec:	nop    DWORD PTR [rax+0x0]
   475f0:	mov    rax,QWORD PTR [rsp+0x28]
   475f5:	xor    rax,QWORD PTR fs:0x28
   475fe:	jne    4765e <GenerateSequenceParameterSet+0x3ae>
   47600:	add    rsp,0x38
   47604:	mov    esi,0x1f4
   47609:	lea    rdi,[rip+0x2eaf0]        # 76100 <QP2QUANT+0x120>
   47610:	pop    rbx
   47611:	pop    rbp
   47612:	jmp    19180 <error>
   47617:	nop    WORD PTR [rax+rax*1+0x0]
   47620:	mov    esi,0x1f4
   47625:	lea    rdi,[rip+0x2eaa4]        # 760d0 <QP2QUANT+0xf0>
   4762c:	call   19180 <error>
   47631:	mov    rax,QWORD PTR [rip+0x40f78]        # 885b0 <img>
   47638:	mov    ecx,ebp
   4763a:	xor    edx,edx
   4763c:	sub    ecx,DWORD PTR [rbx+0x47c]
   47642:	mov    esi,DWORD PTR [rax+0x11c1c]
   47648:	mov    eax,DWORD PTR [rbx+0x20]
   4764b:	imul   ecx,DWORD PTR [rsp+rax*4+0x10]
   47650:	mov    eax,esi
   47652:	div    ecx
   47654:	test   edx,edx
   47656:	je     4757c <GenerateSequenceParameterSet+0x2cc>
   4765c:	jmp    475f0 <GenerateSequenceParameterSet+0x340>
   4765e:	call   4390 <__stack_chk_fail@plt>
   47663:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4766e:	xchg   ax,ax

0000000000047670 <GeneratePictureParameterSet>:
   47670:	endbr64 
   47674:	push   r13
   47676:	push   r12
   47678:	mov    r12d,ecx
   4767b:	xor    ecx,ecx
   4767d:	push   rbp
   4767e:	mov    rbp,rsi
   47681:	push   rbx
   47682:	mov    rbx,rdi
   47685:	sub    rsp,0x18
   47689:	mov    rdi,QWORD PTR [rip+0x40f28]        # 885b8 <input>
   47690:	mov    esi,DWORD PTR [rsi+0x1c]
   47693:	mov    r10d,DWORD PTR [rdi+0x934]
   4769a:	mov    eax,DWORD PTR [rdi]
   4769c:	test   r10d,r10d
   4769f:	setne  cl
   476a2:	cmp    eax,0x64
   476a5:	je     47700 <GeneratePictureParameterSet+0x90>
   476a7:	cmp    eax,0x6e
   476aa:	je     47700 <GeneratePictureParameterSet+0x90>
   476ac:	cmp    eax,0x7a
   476af:	je     47700 <GeneratePictureParameterSet+0x90>
   476b1:	mov    DWORD PTR [rbx+0x8],esi
   476b4:	mov    DWORD PTR [rbx+0x4],edx
   476b7:	mov    DWORD PTR [rbx+0xc],ecx
   476ba:	cmp    eax,0x90
   476bf:	je     47709 <GeneratePictureParameterSet+0x99>
   476c1:	mov    DWORD PTR [rbx+0x14],0x0
   476c8:	xor    r13d,r13d
   476cb:	mov    QWORD PTR [rbx+0x18],0x0
   476d3:	mov    QWORD PTR [rbx+0x20],0x0
   476db:	mov    QWORD PTR [rbx+0x28],0x0
   476e3:	mov    QWORD PTR [rbx+0x30],0x0
   476eb:	mov    DWORD PTR [rdi+0xc94],0x0
   476f5:	mov    DWORD PTR [rbx+0x10],0x0
   476fc:	jmp    4776f <GeneratePictureParameterSet+0xff>
   476fe:	xchg   ax,ax
   47700:	mov    DWORD PTR [rbx+0x8],esi
   47703:	mov    DWORD PTR [rbx+0x4],edx
   47706:	mov    DWORD PTR [rbx+0xc],ecx
   47709:	mov    esi,DWORD PTR [rdi+0xc94]
   4770f:	xor    eax,eax
   47711:	test   esi,esi
   47713:	setne  al
   47716:	mov    DWORD PTR [rbx+0x10],eax
   47719:	mov    eax,DWORD PTR [rdi+0xcb8]
   4771f:	sar    eax,1
   47721:	and    eax,0x1
   47724:	mov    DWORD PTR [rbx+0x14],eax
   47727:	xor    eax,eax
   47729:	jmp    47744 <GeneratePictureParameterSet+0xd4>
   4772b:	nop    DWORD PTR [rax+rax*1+0x0]
   47730:	mov    edx,DWORD PTR [rdi+rax*4+0xcbc]
   47737:	sar    edx,1
   47739:	and    edx,0x1
   4773c:	mov    DWORD PTR [rbx+rax*4+0x18],edx
   47740:	add    rax,0x1
   47744:	mov    edx,eax
   47746:	cmp    rax,0x5
   4774a:	jbe    47730 <GeneratePictureParameterSet+0xc0>
   4774c:	test   esi,esi
   4774e:	je     47860 <GeneratePictureParameterSet+0x1f0>
   47754:	mov    ecx,DWORD PTR [rdi+rax*4+0xcbc]
   4775b:	sar    ecx,1
   4775d:	and    ecx,0x1
   47760:	mov    DWORD PTR [rbx+rax*4+0x18],ecx
   47764:	cmp    edx,0x6
   47767:	je     47740 <GeneratePictureParameterSet+0xd0>
   47769:	mov    r13d,0x1
   4776f:	mov    rcx,QWORD PTR [rip+0x40e3a]        # 885b0 <img>
   47776:	mov    edx,DWORD PTR [rdi+0xc50]
   4777c:	mov    eax,DWORD PTR [rcx+0x11b2c]
   47782:	mov    DWORD PTR [rbx+0x3c],edx
   47785:	mov    DWORD PTR [rbx+0x38],eax
   47788:	test   edx,edx
   4778a:	je     477d8 <GeneratePictureParameterSet+0x168>
   4778c:	mov    r10d,DWORD PTR [rdi+0xc54]
   47793:	cmp    r10d,0x6
   47797:	ja     477ad <GeneratePictureParameterSet+0x13d>
   47799:	lea    r11,[rip+0x2f000]        # 767a0 <QP2QUANT+0x7c0>
   477a0:	mov    esi,r10d
   477a3:	movsxd rax,DWORD PTR [r11+rsi*4]
   477a7:	add    rax,r11
   477aa:	notrack jmp rax
   477ad:	lea    rdi,[rip+0x2e97c]        # 76130 <QP2QUANT+0x150>
   477b4:	mov    DWORD PTR [rsp+0xc],r9d
   477b9:	mov    DWORD PTR [rsp+0x8],r8d
   477be:	call   4320 <puts@plt>
   477c3:	mov    r9d,DWORD PTR [rsp+0xc]
   477c8:	mov    r8d,DWORD PTR [rsp+0x8]
   477cd:	mov    rdi,QWORD PTR [rip+0x40de4]        # 885b8 <input>
   477d4:	nop    DWORD PTR [rax+0x0]
   477d8:	mov    edx,DWORD PTR [rbp+0x47c]
   477de:	mov    eax,DWORD PTR [rbp+0x46c]
   477e4:	test   edx,edx
   477e6:	je     47880 <GeneratePictureParameterSet+0x210>
   477ec:	sub    eax,0x1
   477ef:	mov    DWORD PTR [rbx+0xb8],eax
   477f5:	mov    DWORD PTR [rbx+0xbc],eax
   477fb:	mov    DWORD PTR [rbx+0xc0],r12d
   47802:	mov    DWORD PTR [rbx+0xc4],r8d
   47809:	mov    QWORD PTR [rbx+0xc8],0x0
   47814:	mov    DWORD PTR [rbx+0xd0],r9d
   4781b:	test   r13d,r13d
   4781e:	je     47870 <GeneratePictureParameterSet+0x200>
   47820:	mov    eax,DWORD PTR [rsp+0x40]
   47824:	mov    DWORD PTR [rbx+0xd4],r9d
   4782b:	mov    DWORD PTR [rbx+0xd8],eax
   47831:	mov    eax,DWORD PTR [rdi+0xb6c]
   47837:	mov    DWORD PTR [rbx+0xdc],eax
   4783d:	mov    eax,DWORD PTR [rdi+0xd8]
   47843:	mov    DWORD PTR [rbx+0xe4],0x0
   4784d:	mov    DWORD PTR [rbx+0xe0],eax
   47853:	add    rsp,0x18
   47857:	pop    rbx
   47858:	pop    rbp
   47859:	pop    r12
   4785b:	pop    r13
   4785d:	ret    
   4785e:	xchg   ax,ax
   47860:	mov    DWORD PTR [rbx+rax*4+0x18],0x0
   47868:	jmp    47764 <GeneratePictureParameterSet+0xf4>
   4786d:	nop    DWORD PTR [rax]
   47870:	mov    DWORD PTR [rbx+0xd8],r9d
   47877:	mov    DWORD PTR [rbx+0xd4],r9d
   4787e:	jmp    47831 <GeneratePictureParameterSet+0x1c1>
   47880:	lea    eax,[rax+rax*1-0x1]
   47884:	jmp    477ef <GeneratePictureParameterSet+0x17f>
   47889:	nop    DWORD PTR [rax+0x0]
   47890:	mov    eax,DWORD PTR [rdi+0xc78]
   47896:	mov    DWORD PTR [rbx+0x40],r10d
   4789a:	mov    DWORD PTR [rbx+0xa4],eax
   478a0:	mov    eax,DWORD PTR [rdi+0xc7c]
   478a6:	mov    DWORD PTR [rbx+0xa8],eax
   478ac:	jmp    477d8 <GeneratePictureParameterSet+0x168>
   478b1:	nop    DWORD PTR [rax+0x0]
   478b8:	mov    eax,DWORD PTR [rcx+0x11c1c]
   478be:	add    eax,DWORD PTR [rdi+0x44]
   478c1:	mov    esi,0x2
   478c6:	mov    DWORD PTR [rbx+0x40],0x6
   478cd:	mov    edx,eax
   478cf:	lea    eax,[rax+0xf]
   478d2:	cmovns eax,edx
   478d5:	sub    esi,DWORD PTR [rbp+0x47c]
   478db:	xor    edx,edx
   478dd:	sar    eax,0x4
   478e0:	div    esi
   478e2:	mov    edx,DWORD PTR [rcx+0x11c18]
   478e8:	mov    ecx,edx
   478ea:	add    ecx,DWORD PTR [rdi+0x40]
   478ed:	lea    edx,[rcx+0xf]
   478f0:	cmovns edx,ecx
   478f3:	sar    edx,0x4
   478f6:	imul   eax,edx
   478f9:	sub    eax,0x1
   478fc:	mov    DWORD PTR [rbx+0xac],eax
   47902:	xor    eax,eax
   47904:	nop    DWORD PTR [rax+0x0]
   47908:	mov    rcx,QWORD PTR [rdi+0xc68]
   4790f:	mov    edx,eax
   47911:	add    eax,0x1
   47914:	movzx  esi,BYTE PTR [rcx+rdx*1]
   47918:	mov    rcx,QWORD PTR [rbx+0xb0]
   4791f:	mov    BYTE PTR [rcx+rdx*1],sil
   47923:	mov    rdi,QWORD PTR [rip+0x40c8e]        # 885b8 <input>
   4792a:	cmp    DWORD PTR [rbx+0xac],eax
   47930:	jae    47908 <GeneratePictureParameterSet+0x298>
   47932:	jmp    477d8 <GeneratePictureParameterSet+0x168>
   47937:	nop    WORD PTR [rax+rax*1+0x0]
   47940:	mov    DWORD PTR [rbx+0x40],0x0
   47947:	mov    rsi,QWORD PTR [rdi+0xc70]
   4794e:	xor    eax,eax
   47950:	mov    ecx,DWORD PTR [rsi+rax*4]
   47953:	mov    DWORD PTR [rbx+rax*4+0x44],ecx
   47957:	mov    rcx,rax
   4795a:	add    rax,0x1
   4795e:	cmp    rdx,rcx
   47961:	jne    47950 <GeneratePictureParameterSet+0x2e0>
   47963:	jmp    477d8 <GeneratePictureParameterSet+0x168>
   47968:	nop    DWORD PTR [rax+rax*1+0x0]
   47970:	mov    DWORD PTR [rbx+0x40],0x1
   47977:	jmp    477d8 <GeneratePictureParameterSet+0x168>
   4797c:	nop    DWORD PTR [rax+0x0]
   47980:	mov    DWORD PTR [rbx+0x40],0x2
   47987:	mov    r10,QWORD PTR [rdi+0xc58]
   4798e:	xor    eax,eax
   47990:	mov    rsi,QWORD PTR [rdi+0xc60]
   47997:	nop    WORD PTR [rax+rax*1+0x0]
   479a0:	mov    ecx,DWORD PTR [r10+rax*4]
   479a4:	mov    DWORD PTR [rbx+rax*4+0x64],ecx
   479a8:	mov    ecx,DWORD PTR [rsi+rax*4]
   479ab:	mov    DWORD PTR [rbx+rax*4+0x84],ecx
   479b2:	add    rax,0x1
   479b6:	cmp    edx,eax
   479b8:	ja     479a0 <GeneratePictureParameterSet+0x330>
   479ba:	jmp    477d8 <GeneratePictureParameterSet+0x168>
   479bf:	nop

00000000000479c0 <GenerateParameterSets>:
   479c0:	endbr64 
   479c4:	push   rbp
   479c5:	xor    eax,eax
   479c7:	push   rbx
   479c8:	sub    rsp,0x8
   479cc:	call   48fb0 <AllocSPS>
   479d1:	mov    rbp,rax
   479d4:	xor    eax,eax
   479d6:	call   48f50 <AllocPPS>
   479db:	xor    esi,esi
   479dd:	mov    rdi,rbp
   479e0:	mov    rbx,rax
   479e3:	call   472b0 <GenerateSequenceParameterSet>
   479e8:	mov    rax,QWORD PTR [rip+0x40bc9]        # 885b8 <input>
   479ef:	mov    r9d,DWORD PTR [rax+0x3c]
   479f3:	test   r9d,r9d
   479f6:	je     47cf0 <GenerateParameterSets+0x330>
   479fc:	cmp    DWORD PTR [rbp+0x4],0x63
   47a00:	jbe    47e30 <GenerateParameterSets+0x470>
   47a06:	mov    r9d,DWORD PTR [rax+0xcf4]
   47a0d:	sub    rsp,0x8
   47a11:	xor    r8d,r8d
   47a14:	xor    ecx,ecx
   47a16:	mov    eax,DWORD PTR [rax+0xcf8]
   47a1c:	xor    edx,edx
   47a1e:	mov    rsi,rbp
   47a21:	mov    rdi,rbx
   47a24:	push   rax
   47a25:	call   47670 <GeneratePictureParameterSet>
   47a2a:	mov    ecx,0x1
   47a2f:	mov    rsi,rbp
   47a32:	mov    rdi,rbx
   47a35:	movdqu xmm7,XMMWORD PTR [rbx]
   47a39:	mov    r8d,0x1
   47a3f:	mov    edx,0x1
   47a44:	mov    rax,QWORD PTR [rip+0x40b6d]        # 885b8 <input>
   47a4b:	movaps XMMWORD PTR [rip+0x804ee],xmm7        # c7f40 <PicParSet>
   47a52:	movdqu xmm7,XMMWORD PTR [rbx+0x10]
   47a57:	mov    r9d,DWORD PTR [rax+0xcf4]
   47a5e:	movaps XMMWORD PTR [rip+0x804eb],xmm7        # c7f50 <PicParSet+0x10>
   47a65:	movdqu xmm0,XMMWORD PTR [rbx+0x20]
   47a6a:	movaps XMMWORD PTR [rip+0x804ef],xmm0        # c7f60 <PicParSet+0x20>
   47a71:	movdqu xmm1,XMMWORD PTR [rbx+0x30]
   47a76:	movaps XMMWORD PTR [rip+0x804f3],xmm1        # c7f70 <PicParSet+0x30>
   47a7d:	movdqu xmm2,XMMWORD PTR [rbx+0x40]
   47a82:	movaps XMMWORD PTR [rip+0x804f7],xmm2        # c7f80 <PicParSet+0x40>
   47a89:	movdqu xmm3,XMMWORD PTR [rbx+0x50]
   47a8e:	movaps XMMWORD PTR [rip+0x804fb],xmm3        # c7f90 <PicParSet+0x50>
   47a95:	movdqu xmm4,XMMWORD PTR [rbx+0x60]
   47a9a:	movaps XMMWORD PTR [rip+0x804ff],xmm4        # c7fa0 <PicParSet+0x60>
   47aa1:	movdqu xmm5,XMMWORD PTR [rbx+0x70]
   47aa6:	movaps XMMWORD PTR [rip+0x80503],xmm5        # c7fb0 <PicParSet+0x70>
   47aad:	movdqu xmm6,XMMWORD PTR [rbx+0x80]
   47ab5:	movaps XMMWORD PTR [rip+0x80504],xmm6        # c7fc0 <PicParSet+0x80>
   47abc:	movdqu xmm7,XMMWORD PTR [rbx+0x90]
   47ac4:	movaps XMMWORD PTR [rip+0x80505],xmm7        # c7fd0 <PicParSet+0x90>
   47acb:	movdqu xmm0,XMMWORD PTR [rbx+0xa0]
   47ad3:	movaps XMMWORD PTR [rip+0x80506],xmm0        # c7fe0 <PicParSet+0xa0>
   47ada:	movdqu xmm1,XMMWORD PTR [rbx+0xb0]
   47ae2:	movaps XMMWORD PTR [rip+0x80507],xmm1        # c7ff0 <PicParSet+0xb0>
   47ae9:	movdqu xmm2,XMMWORD PTR [rbx+0xc0]
   47af1:	movaps XMMWORD PTR [rip+0x80508],xmm2        # c8000 <PicParSet+0xc0>
   47af8:	movdqu xmm3,XMMWORD PTR [rbx+0xd0]
   47b00:	movaps XMMWORD PTR [rip+0x80509],xmm3        # c8010 <PicParSet+0xd0>
   47b07:	movdqu xmm4,XMMWORD PTR [rbx+0xe0]
   47b0f:	movaps XMMWORD PTR [rip+0x8050a],xmm4        # c8020 <PicParSet+0xe0>
   47b16:	mov    eax,DWORD PTR [rax+0xcf8]
   47b1c:	mov    DWORD PTR [rsp],eax
   47b1f:	call   47670 <GeneratePictureParameterSet>
   47b24:	movdqu xmm5,XMMWORD PTR [rbx]
   47b28:	mov    rdi,rbx
   47b2b:	mov    rsi,rbp
   47b2e:	mov    r8d,0x2
   47b34:	mov    ecx,0x1
   47b39:	mov    edx,0x2
   47b3e:	mov    rax,QWORD PTR [rip+0x40a73]        # 885b8 <input>
   47b45:	movaps XMMWORD PTR [rip+0x804e4],xmm5        # c8030 <PicParSet+0xf0>
   47b4c:	movdqu xmm6,XMMWORD PTR [rbx+0x10]
   47b51:	mov    r9d,DWORD PTR [rax+0xcf4]
   47b58:	movaps XMMWORD PTR [rip+0x804e1],xmm6        # c8040 <PicParSet+0x100>
   47b5f:	movdqu xmm7,XMMWORD PTR [rbx+0x20]
   47b64:	movaps XMMWORD PTR [rip+0x804e5],xmm7        # c8050 <PicParSet+0x110>
   47b6b:	movdqu xmm0,XMMWORD PTR [rbx+0x30]
   47b70:	movaps XMMWORD PTR [rip+0x804e9],xmm0        # c8060 <PicParSet+0x120>
   47b77:	movdqu xmm1,XMMWORD PTR [rbx+0x40]
   47b7c:	movaps XMMWORD PTR [rip+0x804ed],xmm1        # c8070 <PicParSet+0x130>
   47b83:	movdqu xmm2,XMMWORD PTR [rbx+0x50]
   47b88:	movaps XMMWORD PTR [rip+0x804f1],xmm2        # c8080 <PicParSet+0x140>
   47b8f:	movdqu xmm3,XMMWORD PTR [rbx+0x60]
   47b94:	movaps XMMWORD PTR [rip+0x804f5],xmm3        # c8090 <PicParSet+0x150>
   47b9b:	movdqu xmm4,XMMWORD PTR [rbx+0x70]
   47ba0:	movaps XMMWORD PTR [rip+0x804f9],xmm4        # c80a0 <PicParSet+0x160>
   47ba7:	movdqu xmm5,XMMWORD PTR [rbx+0x80]
   47baf:	movaps XMMWORD PTR [rip+0x804fa],xmm5        # c80b0 <PicParSet+0x170>
   47bb6:	movdqu xmm6,XMMWORD PTR [rbx+0x90]
   47bbe:	movaps XMMWORD PTR [rip+0x804fb],xmm6        # c80c0 <PicParSet+0x180>
   47bc5:	movdqu xmm7,XMMWORD PTR [rbx+0xa0]
   47bcd:	movaps XMMWORD PTR [rip+0x804fc],xmm7        # c80d0 <PicParSet+0x190>
   47bd4:	movdqu xmm0,XMMWORD PTR [rbx+0xb0]
   47bdc:	movaps XMMWORD PTR [rip+0x804fd],xmm0        # c80e0 <PicParSet+0x1a0>
   47be3:	movdqu xmm1,XMMWORD PTR [rbx+0xc0]
   47beb:	movaps XMMWORD PTR [rip+0x804fe],xmm1        # c80f0 <PicParSet+0x1b0>
   47bf2:	movdqu xmm2,XMMWORD PTR [rbx+0xd0]
   47bfa:	movaps XMMWORD PTR [rip+0x804ff],xmm2        # c8100 <PicParSet+0x1c0>
   47c01:	movdqu xmm3,XMMWORD PTR [rbx+0xe0]
   47c09:	movaps XMMWORD PTR [rip+0x80500],xmm3        # c8110 <PicParSet+0x1d0>
   47c10:	mov    eax,DWORD PTR [rax+0xcf8]
   47c16:	mov    DWORD PTR [rsp],eax
   47c19:	call   47670 <GeneratePictureParameterSet>
   47c1e:	movdqu xmm4,XMMWORD PTR [rbx]
   47c22:	pop    rdi
   47c23:	pop    r8
   47c25:	movaps XMMWORD PTR [rip+0x804f4],xmm4        # c8120 <PicParSet+0x1e0>
   47c2c:	movdqu xmm5,XMMWORD PTR [rbx+0x10]
   47c31:	movaps XMMWORD PTR [rip+0x804f8],xmm5        # c8130 <PicParSet+0x1f0>
   47c38:	movdqu xmm6,XMMWORD PTR [rbx+0x20]
   47c3d:	movaps XMMWORD PTR [rip+0x804fc],xmm6        # c8140 <PicParSet+0x200>
   47c44:	movdqu xmm7,XMMWORD PTR [rbx+0x30]
   47c49:	movaps XMMWORD PTR [rip+0x80500],xmm7        # c8150 <PicParSet+0x210>
   47c50:	movdqu xmm0,XMMWORD PTR [rbx+0x40]
   47c55:	movaps XMMWORD PTR [rip+0x80504],xmm0        # c8160 <PicParSet+0x220>
   47c5c:	movdqu xmm1,XMMWORD PTR [rbx+0x50]
   47c61:	movaps XMMWORD PTR [rip+0x80508],xmm1        # c8170 <PicParSet+0x230>
   47c68:	movdqu xmm2,XMMWORD PTR [rbx+0x60]
   47c6d:	movaps XMMWORD PTR [rip+0x8050c],xmm2        # c8180 <PicParSet+0x240>
   47c74:	movdqu xmm3,XMMWORD PTR [rbx+0x70]
   47c79:	movaps XMMWORD PTR [rip+0x80510],xmm3        # c8190 <PicParSet+0x250>
   47c80:	movdqu xmm4,XMMWORD PTR [rbx+0x80]
   47c88:	movaps XMMWORD PTR [rip+0x80511],xmm4        # c81a0 <PicParSet+0x260>
   47c8f:	movdqu xmm5,XMMWORD PTR [rbx+0x90]
   47c97:	movaps XMMWORD PTR [rip+0x80512],xmm5        # c81b0 <PicParSet+0x270>
   47c9e:	movdqu xmm6,XMMWORD PTR [rbx+0xa0]
   47ca6:	movaps XMMWORD PTR [rip+0x80513],xmm6        # c81c0 <PicParSet+0x280>
   47cad:	movdqu xmm7,XMMWORD PTR [rbx+0xb0]
   47cb5:	movaps XMMWORD PTR [rip+0x80514],xmm7        # c81d0 <PicParSet+0x290>
   47cbc:	movdqu xmm0,XMMWORD PTR [rbx+0xc0]
   47cc4:	movaps XMMWORD PTR [rip+0x80515],xmm0        # c81e0 <PicParSet+0x2a0>
   47ccb:	movdqu xmm1,XMMWORD PTR [rbx+0xd0]
   47cd3:	movaps XMMWORD PTR [rip+0x80516],xmm1        # c81f0 <PicParSet+0x2b0>
   47cda:	movdqu xmm2,XMMWORD PTR [rbx+0xe0]
   47ce2:	movaps XMMWORD PTR [rip+0x80517],xmm2        # c8200 <PicParSet+0x2c0>
   47ce9:	jmp    47deb <GenerateParameterSets+0x42b>
   47cee:	xchg   ax,ax
   47cf0:	cmp    DWORD PTR [rbp+0x4],0x63
   47cf4:	mov    r8d,DWORD PTR [rax+0x508]
   47cfb:	mov    ecx,DWORD PTR [rax+0x504]
   47d01:	ja     47e10 <GenerateParameterSets+0x450>
   47d07:	sub    rsp,0x8
   47d0b:	mov    r9d,DWORD PTR [rax+0x980]
   47d12:	push   0x0
   47d14:	xor    edx,edx
   47d16:	mov    rsi,rbp
   47d19:	mov    rdi,rbx
   47d1c:	call   47670 <GeneratePictureParameterSet>
   47d21:	movdqu xmm0,XMMWORD PTR [rbx]
   47d25:	pop    rax
   47d26:	pop    rdx
   47d27:	movaps XMMWORD PTR [rip+0x80212],xmm0        # c7f40 <PicParSet>
   47d2e:	movdqu xmm1,XMMWORD PTR [rbx+0x10]
   47d33:	movaps XMMWORD PTR [rip+0x80216],xmm1        # c7f50 <PicParSet+0x10>
   47d3a:	movdqu xmm2,XMMWORD PTR [rbx+0x20]
   47d3f:	movaps XMMWORD PTR [rip+0x8021a],xmm2        # c7f60 <PicParSet+0x20>
   47d46:	movdqu xmm3,XMMWORD PTR [rbx+0x30]
   47d4b:	movaps XMMWORD PTR [rip+0x8021e],xmm3        # c7f70 <PicParSet+0x30>
   47d52:	movdqu xmm4,XMMWORD PTR [rbx+0x40]
   47d57:	movaps XMMWORD PTR [rip+0x80222],xmm4        # c7f80 <PicParSet+0x40>
   47d5e:	movdqu xmm5,XMMWORD PTR [rbx+0x50]
   47d63:	movaps XMMWORD PTR [rip+0x80226],xmm5        # c7f90 <PicParSet+0x50>
   47d6a:	movdqu xmm6,XMMWORD PTR [rbx+0x60]
   47d6f:	movaps XMMWORD PTR [rip+0x8022a],xmm6        # c7fa0 <PicParSet+0x60>
   47d76:	movdqu xmm7,XMMWORD PTR [rbx+0x70]
   47d7b:	movaps XMMWORD PTR [rip+0x8022e],xmm7        # c7fb0 <PicParSet+0x70>
   47d82:	movdqu xmm0,XMMWORD PTR [rbx+0x80]
   47d8a:	movaps XMMWORD PTR [rip+0x8022f],xmm0        # c7fc0 <PicParSet+0x80>
   47d91:	movdqu xmm1,XMMWORD PTR [rbx+0x90]
   47d99:	movaps XMMWORD PTR [rip+0x80230],xmm1        # c7fd0 <PicParSet+0x90>
   47da0:	movdqu xmm2,XMMWORD PTR [rbx+0xa0]
   47da8:	movaps XMMWORD PTR [rip+0x80231],xmm2        # c7fe0 <PicParSet+0xa0>
   47daf:	movdqu xmm3,XMMWORD PTR [rbx+0xb0]
   47db7:	movaps XMMWORD PTR [rip+0x80232],xmm3        # c7ff0 <PicParSet+0xb0>
   47dbe:	movdqu xmm4,XMMWORD PTR [rbx+0xc0]
   47dc6:	movaps XMMWORD PTR [rip+0x80233],xmm4        # c8000 <PicParSet+0xc0>
   47dcd:	movdqu xmm5,XMMWORD PTR [rbx+0xd0]
   47dd5:	movaps XMMWORD PTR [rip+0x80234],xmm5        # c8010 <PicParSet+0xd0>
   47ddc:	movdqu xmm6,XMMWORD PTR [rbx+0xe0]
   47de4:	movaps XMMWORD PTR [rip+0x80235],xmm6        # c8020 <PicParSet+0xe0>
   47deb:	lea    rax,[rip+0x8014e]        # c7f40 <PicParSet>
   47df2:	mov    QWORD PTR [rip+0x6e077],rbp        # b5e70 <active_sps>
   47df9:	mov    QWORD PTR [rip+0x59000],rax        # a0e00 <active_pps>
   47e00:	add    rsp,0x8
   47e04:	pop    rbx
   47e05:	pop    rbp
   47e06:	ret    
   47e07:	nop    WORD PTR [rax+rax*1+0x0]
   47e10:	mov    r9d,DWORD PTR [rax+0xcf4]
   47e17:	mov    eax,DWORD PTR [rax+0xcf8]
   47e1d:	sub    rsp,0x8
   47e21:	push   rax
   47e22:	jmp    47d14 <GenerateParameterSets+0x354>
   47e27:	nop    WORD PTR [rax+rax*1+0x0]
   47e30:	sub    rsp,0x8
   47e34:	mov    r9d,DWORD PTR [rax+0x980]
   47e3b:	xor    r8d,r8d
   47e3e:	xor    ecx,ecx
   47e40:	push   0x0
   47e42:	xor    edx,edx
   47e44:	mov    rsi,rbp
   47e47:	mov    rdi,rbx
   47e4a:	call   47670 <GeneratePictureParameterSet>
   47e4f:	mov    ecx,0x1
   47e54:	mov    rsi,rbp
   47e57:	mov    rdi,rbx
   47e5a:	movdqu xmm3,XMMWORD PTR [rbx]
   47e5e:	mov    r8d,0x1
   47e64:	mov    edx,0x1
   47e69:	mov    rax,QWORD PTR [rip+0x40748]        # 885b8 <input>
   47e70:	movaps XMMWORD PTR [rip+0x800c9],xmm3        # c7f40 <PicParSet>
   47e77:	movdqu xmm4,XMMWORD PTR [rbx+0x10]
   47e7c:	mov    r9d,DWORD PTR [rax+0x980]
   47e83:	movaps XMMWORD PTR [rip+0x800c6],xmm4        # c7f50 <PicParSet+0x10>
   47e8a:	movdqu xmm5,XMMWORD PTR [rbx+0x20]
   47e8f:	movaps XMMWORD PTR [rip+0x800ca],xmm5        # c7f60 <PicParSet+0x20>
   47e96:	movdqu xmm6,XMMWORD PTR [rbx+0x30]
   47e9b:	movaps XMMWORD PTR [rip+0x800ce],xmm6        # c7f70 <PicParSet+0x30>
   47ea2:	movdqu xmm7,XMMWORD PTR [rbx+0x40]
   47ea7:	movaps XMMWORD PTR [rip+0x800d2],xmm7        # c7f80 <PicParSet+0x40>
   47eae:	movdqu xmm0,XMMWORD PTR [rbx+0x50]
   47eb3:	movaps XMMWORD PTR [rip+0x800d6],xmm0        # c7f90 <PicParSet+0x50>
   47eba:	movdqu xmm1,XMMWORD PTR [rbx+0x60]
   47ebf:	movaps XMMWORD PTR [rip+0x800da],xmm1        # c7fa0 <PicParSet+0x60>
   47ec6:	movdqu xmm2,XMMWORD PTR [rbx+0x70]
   47ecb:	movaps XMMWORD PTR [rip+0x800de],xmm2        # c7fb0 <PicParSet+0x70>
   47ed2:	movdqu xmm3,XMMWORD PTR [rbx+0x80]
   47eda:	movaps XMMWORD PTR [rip+0x800df],xmm3        # c7fc0 <PicParSet+0x80>
   47ee1:	movdqu xmm4,XMMWORD PTR [rbx+0x90]
   47ee9:	movaps XMMWORD PTR [rip+0x800e0],xmm4        # c7fd0 <PicParSet+0x90>
   47ef0:	movdqu xmm5,XMMWORD PTR [rbx+0xa0]
   47ef8:	movaps XMMWORD PTR [rip+0x800e1],xmm5        # c7fe0 <PicParSet+0xa0>
   47eff:	movdqu xmm6,XMMWORD PTR [rbx+0xb0]
   47f07:	movaps XMMWORD PTR [rip+0x800e2],xmm6        # c7ff0 <PicParSet+0xb0>
   47f0e:	movdqu xmm7,XMMWORD PTR [rbx+0xc0]
   47f16:	movaps XMMWORD PTR [rip+0x800e3],xmm7        # c8000 <PicParSet+0xc0>
   47f1d:	movdqu xmm0,XMMWORD PTR [rbx+0xd0]
   47f25:	movaps XMMWORD PTR [rip+0x800e4],xmm0        # c8010 <PicParSet+0xd0>
   47f2c:	movdqu xmm1,XMMWORD PTR [rbx+0xe0]
   47f34:	movaps XMMWORD PTR [rip+0x800e5],xmm1        # c8020 <PicParSet+0xe0>
   47f3b:	mov    DWORD PTR [rsp],0x0
   47f42:	call   47670 <GeneratePictureParameterSet>
   47f47:	movdqu xmm2,XMMWORD PTR [rbx]
   47f4b:	mov    rsi,rbp
   47f4e:	mov    rdi,rbx
   47f51:	mov    ecx,0x1
   47f56:	mov    r8d,0x2
   47f5c:	mov    edx,0x2
   47f61:	mov    rax,QWORD PTR [rip+0x40650]        # 885b8 <input>
   47f68:	movaps XMMWORD PTR [rip+0x800c1],xmm2        # c8030 <PicParSet+0xf0>
   47f6f:	movdqu xmm3,XMMWORD PTR [rbx+0x10]
   47f74:	mov    r9d,DWORD PTR [rax+0x980]
   47f7b:	movaps XMMWORD PTR [rip+0x800be],xmm3        # c8040 <PicParSet+0x100>
   47f82:	movdqu xmm4,XMMWORD PTR [rbx+0x20]
   47f87:	movaps XMMWORD PTR [rip+0x800c2],xmm4        # c8050 <PicParSet+0x110>
   47f8e:	movdqu xmm5,XMMWORD PTR [rbx+0x30]
   47f93:	movaps XMMWORD PTR [rip+0x800c6],xmm5        # c8060 <PicParSet+0x120>
   47f9a:	movdqu xmm6,XMMWORD PTR [rbx+0x40]
   47f9f:	movaps XMMWORD PTR [rip+0x800ca],xmm6        # c8070 <PicParSet+0x130>
   47fa6:	movdqu xmm7,XMMWORD PTR [rbx+0x50]
   47fab:	movaps XMMWORD PTR [rip+0x800ce],xmm7        # c8080 <PicParSet+0x140>
   47fb2:	movdqu xmm0,XMMWORD PTR [rbx+0x60]
   47fb7:	movaps XMMWORD PTR [rip+0x800d2],xmm0        # c8090 <PicParSet+0x150>
   47fbe:	movdqu xmm1,XMMWORD PTR [rbx+0x70]
   47fc3:	movaps XMMWORD PTR [rip+0x800d6],xmm1        # c80a0 <PicParSet+0x160>
   47fca:	movdqu xmm2,XMMWORD PTR [rbx+0x80]
   47fd2:	movaps XMMWORD PTR [rip+0x800d7],xmm2        # c80b0 <PicParSet+0x170>
   47fd9:	movdqu xmm3,XMMWORD PTR [rbx+0x90]
   47fe1:	movaps XMMWORD PTR [rip+0x800d8],xmm3        # c80c0 <PicParSet+0x180>
   47fe8:	movdqu xmm4,XMMWORD PTR [rbx+0xa0]
   47ff0:	movaps XMMWORD PTR [rip+0x800d9],xmm4        # c80d0 <PicParSet+0x190>
   47ff7:	movdqu xmm5,XMMWORD PTR [rbx+0xb0]
   47fff:	movaps XMMWORD PTR [rip+0x800da],xmm5        # c80e0 <PicParSet+0x1a0>
   48006:	movdqu xmm6,XMMWORD PTR [rbx+0xc0]
   4800e:	movaps XMMWORD PTR [rip+0x800db],xmm6        # c80f0 <PicParSet+0x1b0>
   48015:	movdqu xmm7,XMMWORD PTR [rbx+0xd0]
   4801d:	movaps XMMWORD PTR [rip+0x800dc],xmm7        # c8100 <PicParSet+0x1c0>
   48024:	movdqu xmm0,XMMWORD PTR [rbx+0xe0]
   4802c:	movaps XMMWORD PTR [rip+0x800dd],xmm0        # c8110 <PicParSet+0x1d0>
   48033:	mov    DWORD PTR [rsp],0x0
   4803a:	call   47670 <GeneratePictureParameterSet>
   4803f:	movdqu xmm1,XMMWORD PTR [rbx]
   48043:	pop    rcx
   48044:	pop    rsi
   48045:	movaps XMMWORD PTR [rip+0x800d4],xmm1        # c8120 <PicParSet+0x1e0>
   4804c:	movdqu xmm2,XMMWORD PTR [rbx+0x10]
   48051:	movaps XMMWORD PTR [rip+0x800d8],xmm2        # c8130 <PicParSet+0x1f0>
   48058:	movdqu xmm3,XMMWORD PTR [rbx+0x20]
   4805d:	movaps XMMWORD PTR [rip+0x800dc],xmm3        # c8140 <PicParSet+0x200>
   48064:	movdqu xmm4,XMMWORD PTR [rbx+0x30]
   48069:	movaps XMMWORD PTR [rip+0x800e0],xmm4        # c8150 <PicParSet+0x210>
   48070:	movdqu xmm5,XMMWORD PTR [rbx+0x40]
   48075:	movaps XMMWORD PTR [rip+0x800e4],xmm5        # c8160 <PicParSet+0x220>
   4807c:	movdqu xmm6,XMMWORD PTR [rbx+0x50]
   48081:	movaps XMMWORD PTR [rip+0x800e8],xmm6        # c8170 <PicParSet+0x230>
   48088:	movdqu xmm7,XMMWORD PTR [rbx+0x60]
   4808d:	movaps XMMWORD PTR [rip+0x800ec],xmm7        # c8180 <PicParSet+0x240>
   48094:	movdqu xmm0,XMMWORD PTR [rbx+0x70]
   48099:	movaps XMMWORD PTR [rip+0x800f0],xmm0        # c8190 <PicParSet+0x250>
   480a0:	movdqu xmm1,XMMWORD PTR [rbx+0x80]
   480a8:	movaps XMMWORD PTR [rip+0x800f1],xmm1        # c81a0 <PicParSet+0x260>
   480af:	movdqu xmm2,XMMWORD PTR [rbx+0x90]
   480b7:	movaps XMMWORD PTR [rip+0x800f2],xmm2        # c81b0 <PicParSet+0x270>
   480be:	movdqu xmm3,XMMWORD PTR [rbx+0xa0]
   480c6:	movaps XMMWORD PTR [rip+0x800f3],xmm3        # c81c0 <PicParSet+0x280>
   480cd:	movdqu xmm4,XMMWORD PTR [rbx+0xb0]
   480d5:	movaps XMMWORD PTR [rip+0x800f4],xmm4        # c81d0 <PicParSet+0x290>
   480dc:	movdqu xmm5,XMMWORD PTR [rbx+0xc0]
   480e4:	movaps XMMWORD PTR [rip+0x800f5],xmm5        # c81e0 <PicParSet+0x2a0>
   480eb:	movdqu xmm6,XMMWORD PTR [rbx+0xd0]
   480f3:	movaps XMMWORD PTR [rip+0x800f6],xmm6        # c81f0 <PicParSet+0x2b0>
   480fa:	movdqu xmm7,XMMWORD PTR [rbx+0xe0]
   48102:	movaps XMMWORD PTR [rip+0x800f7],xmm7        # c8200 <PicParSet+0x2c0>
   48109:	jmp    47deb <GenerateParameterSets+0x42b>
   4810e:	xchg   ax,ax

0000000000048110 <Scaling_List>:
   48110:	endbr64 
   48114:	push   r15
   48116:	push   r14
   48118:	push   r13
   4811a:	push   r12
   4811c:	push   rbp
   4811d:	push   rbx
   4811e:	sub    rsp,0x38
   48122:	mov    QWORD PTR [rsp+0x20],rdi
   48127:	mov    QWORD PTR [rsp+0x28],r8
   4812c:	test   edx,edx
   4812e:	jle    48260 <Scaling_List+0x150>
   48134:	lea    rbx,[rip+0x2e6c5]        # 76800 <ZZ_SCAN>
   4813b:	mov    r9d,edx
   4813e:	lea    edx,[rdx-0x1]
   48141:	xor    r15d,r15d
   48144:	lea    rax,[rbx+0x1]
   48148:	mov    r8d,0x8
   4814e:	mov    r14d,r15d
   48151:	mov    r10,rsi
   48154:	add    rax,rdx
   48157:	mov    DWORD PTR [rsp+0x8],r9d
   4815c:	lea    r13,[rip+0x2e65d]        # 767c0 <ZZ_SCAN8>
   48163:	mov    r15d,r8d
   48166:	mov    QWORD PTR [rsp],rax
   4816a:	mov    eax,0x8
   4816f:	jmp    481f3 <Scaling_List+0xe3>
   48174:	nop    DWORD PTR [rax+0x0]
   48178:	add    r12,QWORD PTR [rsp+0x20]
   4817d:	movsx  esi,WORD PTR [r12]
   48182:	sub    esi,r15d
   48185:	cmp    esi,0x7f
   48188:	jle    48230 <Scaling_List+0x120>
   4818e:	sub    esi,0x100
   48194:	mov    rdx,QWORD PTR [rsp+0x28]
   48199:	lea    rdi,[rip+0x2e670]        # 76810 <ZZ_SCAN+0x10>
   481a0:	mov    QWORD PTR [rsp+0x18],rcx
   481a5:	mov    QWORD PTR [rsp+0x10],r10
   481aa:	mov    DWORD PTR [rsp+0xc],r9d
   481af:	call   669b0 <se_v>
   481b4:	mov    r9d,DWORD PTR [rsp+0xc]
   481b9:	mov    rcx,QWORD PTR [rsp+0x18]
   481be:	xor    esi,esi
   481c0:	add    r14d,eax
   481c3:	movsx  eax,WORD PTR [r12]
   481c8:	mov    r10,QWORD PTR [rsp+0x10]
   481cd:	or     r9d,eax
   481d0:	mov    edx,eax
   481d2:	sete   sil
   481d6:	or     WORD PTR [rcx],si
   481d9:	test   eax,eax
   481db:	je     4820f <Scaling_List+0xff>
   481dd:	mov    r15d,eax
   481e0:	mov    WORD PTR [r10+rbp*2],dx
   481e5:	add    rbx,0x1
   481e9:	add    r13,0x1
   481ed:	cmp    rbx,QWORD PTR [rsp]
   481f1:	je     48248 <Scaling_List+0x138>
   481f3:	cmp    DWORD PTR [rsp+0x8],0x10
   481f8:	je     48220 <Scaling_List+0x110>
   481fa:	movzx  r9d,BYTE PTR [r13+0x0]
   481ff:	movsxd rbp,r9d
   48202:	lea    r12,[rbp+rbp*1+0x0]
   48207:	test   eax,eax
   48209:	jne    48178 <Scaling_List+0x68>
   4820f:	mov    edx,r15d
   48212:	xor    eax,eax
   48214:	jmp    481e0 <Scaling_List+0xd0>
   48216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48220:	movzx  r9d,BYTE PTR [rbx]
   48224:	jmp    481ff <Scaling_List+0xef>
   48226:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48230:	lea    eax,[rsi+0x100]
   48236:	cmp    esi,0xffffff80
   48239:	cmovl  esi,eax
   4823c:	jmp    48194 <Scaling_List+0x84>
   48241:	nop    DWORD PTR [rax+0x0]
   48248:	mov    r15d,r14d
   4824b:	add    rsp,0x38
   4824f:	mov    eax,r15d
   48252:	pop    rbx
   48253:	pop    rbp
   48254:	pop    r12
   48256:	pop    r13
   48258:	pop    r14
   4825a:	pop    r15
   4825c:	ret    
   4825d:	nop    DWORD PTR [rax]
   48260:	xor    r15d,r15d
   48263:	jmp    4824b <Scaling_List+0x13b>
   48265:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000048270 <GenerateSeq_parameter_set_rbsp>:
   48270:	endbr64 
   48274:	push   r15
   48276:	push   r14
   48278:	push   r13
   4827a:	push   r12
   4827c:	mov    r12,rsi
   4827f:	mov    esi,0x78
   48284:	push   rbp
   48285:	push   rbx
   48286:	mov    rbx,rdi
   48289:	mov    edi,0x1
   4828e:	sub    rsp,0x8
   48292:	call   4400 <calloc@plt>
   48297:	mov    rbp,rax
   4829a:	test   rax,rax
   4829d:	je     488b4 <GenerateSeq_parameter_set_rbsp+0x644>
   482a3:	mov    esi,0x30
   482a8:	mov    edi,0x1
   482ad:	call   4400 <calloc@plt>
   482b2:	mov    QWORD PTR [rbp+0x0],rax
   482b6:	test   rax,rax
   482b9:	je     4889f <GenerateSeq_parameter_set_rbsp+0x62f>
   482bf:	mov    QWORD PTR [rax+0x20],r12
   482c3:	mov    edx,DWORD PTR [rbx+0x4]
   482c6:	mov    rcx,rbp
   482c9:	mov    edi,0x8
   482ce:	mov    DWORD PTR [rax+0x4],0x8
   482d5:	lea    rsi,[rip+0x2e579]        # 76855 <ZZ_SCAN+0x55>
   482dc:	call   66ac0 <u_v>
   482e1:	mov    esi,DWORD PTR [rbx+0x8]
   482e4:	mov    rdx,rbp
   482e7:	lea    rdi,[rip+0x2e578]        # 76866 <ZZ_SCAN+0x66>
   482ee:	call   66a40 <u_1>
   482f3:	mov    esi,DWORD PTR [rbx+0xc]
   482f6:	mov    rdx,rbp
   482f9:	lea    rdi,[rip+0x2e581]        # 76881 <ZZ_SCAN+0x81>
   48300:	call   66a40 <u_1>
   48305:	mov    esi,DWORD PTR [rbx+0x10]
   48308:	mov    rdx,rbp
   4830b:	lea    rdi,[rip+0x2e58a]        # 7689c <ZZ_SCAN+0x9c>
   48312:	call   66a40 <u_1>
   48317:	mov    esi,DWORD PTR [rbx+0x14]
   4831a:	mov    rdx,rbp
   4831d:	lea    rdi,[rip+0x2e593]        # 768b7 <ZZ_SCAN+0xb7>
   48324:	call   66a40 <u_1>
   48329:	mov    rcx,rbp
   4832c:	xor    edx,edx
   4832e:	mov    edi,0x4
   48333:	lea    rsi,[rip+0x2e598]        # 768d2 <ZZ_SCAN+0xd2>
   4833a:	call   66ac0 <u_v>
   4833f:	mov    edx,DWORD PTR [rbx+0x18]
   48342:	mov    rcx,rbp
   48345:	mov    edi,0x8
   4834a:	lea    rsi,[rip+0x2e59a]        # 768eb <ZZ_SCAN+0xeb>
   48351:	call   66ac0 <u_v>
   48356:	mov    esi,DWORD PTR [rbx+0x1c]
   48359:	mov    rdx,rbp
   4835c:	lea    rdi,[rip+0x2e597]        # 768fa <ZZ_SCAN+0xfa>
   48363:	call   66950 <ue_v>
   48368:	mov    eax,DWORD PTR [rbx+0x4]
   4836b:	sub    eax,0x64
   4836e:	cmp    eax,0x2c
   48371:	ja     48410 <GenerateSeq_parameter_set_rbsp+0x1a0>
   48377:	movabs rdx,0x100000400401
   48381:	bt     rdx,rax
   48385:	jae    48410 <GenerateSeq_parameter_set_rbsp+0x1a0>
   4838b:	mov    esi,DWORD PTR [rbx+0x20]
   4838e:	mov    rdx,rbp
   48391:	lea    rdi,[rip+0x2e57c]        # 76914 <ZZ_SCAN+0x114>
   48398:	call   66950 <ue_v>
   4839d:	mov    rax,QWORD PTR [rip+0x4020c]        # 885b0 <img>
   483a4:	cmp    DWORD PTR [rax+0x11bfc],0x3
   483ab:	je     48800 <GenerateSeq_parameter_set_rbsp+0x590>
   483b1:	mov    esi,DWORD PTR [rbx+0x48]
   483b4:	mov    rdx,rbp
   483b7:	lea    rdi,[rip+0x2e589]        # 76947 <ZZ_SCAN+0x147>
   483be:	call   66950 <ue_v>
   483c3:	mov    esi,DWORD PTR [rbx+0x4c]
   483c6:	mov    rdx,rbp
   483c9:	lea    rdi,[rip+0x2e592]        # 76962 <ZZ_SCAN+0x162>
   483d0:	call   66950 <ue_v>
   483d5:	mov    rax,QWORD PTR [rip+0x401d4]        # 885b0 <img>
   483dc:	mov    rdx,rbp
   483df:	lea    rdi,[rip+0x2dd7a]        # 76160 <QP2QUANT+0x180>
   483e6:	mov    esi,DWORD PTR [rax+0x11c00]
   483ec:	call   66a40 <u_1>
   483f1:	mov    esi,DWORD PTR [rbx+0x24]
   483f4:	mov    rdx,rbp
   483f7:	lea    rdi,[rip+0x2dd8a]        # 76188 <QP2QUANT+0x1a8>
   483fe:	call   66a40 <u_1>
   48403:	mov    r10d,DWORD PTR [rbx+0x24]
   48407:	test   r10d,r10d
   4840a:	jne    48550 <GenerateSeq_parameter_set_rbsp+0x2e0>
   48410:	mov    esi,DWORD PTR [rbx+0x50]
   48413:	mov    rdx,rbp
   48416:	lea    rdi,[rip+0x2ddbb]        # 761d8 <QP2QUANT+0x1f8>
   4841d:	call   66950 <ue_v>
   48422:	mov    esi,DWORD PTR [rbx+0x54]
   48425:	mov    rdx,rbp
   48428:	lea    rdi,[rip+0x2e550]        # 7697f <ZZ_SCAN+0x17f>
   4842f:	call   66950 <ue_v>
   48434:	mov    eax,DWORD PTR [rbx+0x54]
   48437:	test   eax,eax
   48439:	je     487e0 <GenerateSeq_parameter_set_rbsp+0x570>
   4843f:	cmp    eax,0x1
   48442:	je     48820 <GenerateSeq_parameter_set_rbsp+0x5b0>
   48448:	mov    esi,DWORD PTR [rbx+0x46c]
   4844e:	mov    rdx,rbp
   48451:	lea    rdi,[rip+0x2e575]        # 769cd <ZZ_SCAN+0x1cd>
   48458:	call   66950 <ue_v>
   4845d:	mov    esi,DWORD PTR [rbx+0x470]
   48463:	mov    rdx,rbp
   48466:	lea    rdi,[rip+0x2de33]        # 762a0 <QP2QUANT+0x2c0>
   4846d:	call   66a40 <u_1>
   48472:	mov    esi,DWORD PTR [rbx+0x474]
   48478:	mov    rdx,rbp
   4847b:	lea    rdi,[rip+0x2e55f]        # 769e1 <ZZ_SCAN+0x1e1>
   48482:	call   66950 <ue_v>
   48487:	mov    esi,DWORD PTR [rbx+0x478]
   4848d:	mov    rdx,rbp
   48490:	lea    rdi,[rip+0x2de39]        # 762d0 <QP2QUANT+0x2f0>
   48497:	call   66950 <ue_v>
   4849c:	mov    esi,DWORD PTR [rbx+0x47c]
   484a2:	lea    rdi,[rip+0x2e555]        # 769fe <ZZ_SCAN+0x1fe>
   484a9:	mov    rdx,rbp
   484ac:	call   66a40 <u_1>
   484b1:	mov    edi,DWORD PTR [rbx+0x47c]
   484b7:	test   edi,edi
   484b9:	je     487c0 <GenerateSeq_parameter_set_rbsp+0x550>
   484bf:	mov    esi,DWORD PTR [rbx+0x484]
   484c5:	mov    rdx,rbp
   484c8:	lea    rdi,[rip+0x2de51]        # 76320 <QP2QUANT+0x340>
   484cf:	call   66a40 <u_1>
   484d4:	mov    esi,DWORD PTR [rbx+0x488]
   484da:	mov    rdx,rbp
   484dd:	lea    rdi,[rip+0x2e533]        # 76a17 <ZZ_SCAN+0x217>
   484e4:	call   66a40 <u_1>
   484e9:	mov    esi,DWORD PTR [rbx+0x488]
   484ef:	test   esi,esi
   484f1:	jne    48760 <GenerateSeq_parameter_set_rbsp+0x4f0>
   484f7:	mov    esi,DWORD PTR [rbx+0x49c]
   484fd:	mov    rdx,rbp
   48500:	lea    rdi,[rip+0x2ded9]        # 763e0 <QP2QUANT+0x400>
   48507:	call   66a40 <u_1>
   4850c:	mov    ecx,DWORD PTR [rbx+0x49c]
   48512:	test   ecx,ecx
   48514:	jne    48608 <GenerateSeq_parameter_set_rbsp+0x398>
   4851a:	mov    rdi,QWORD PTR [rbp+0x0]
   4851e:	call   465c0 <SODBtoRBSP>
   48523:	mov    rdi,QWORD PTR [rbp+0x0]
   48527:	mov    r12d,DWORD PTR [rdi]
   4852a:	call   42d0 <free@plt>
   4852f:	mov    rdi,rbp
   48532:	call   42d0 <free@plt>
   48537:	add    rsp,0x8
   4853b:	mov    eax,r12d
   4853e:	pop    rbx
   4853f:	pop    rbp
   48540:	pop    r12
   48542:	pop    r13
   48544:	pop    r14
   48546:	pop    r15
   48548:	ret    
   48549:	nop    DWORD PTR [rax+0x0]
   48550:	xor    r13d,r13d
   48553:	lea    r15,[rip+0x8fd66]        # d82c0 <UseDefaultScalingMatrix8x8Flag>
   4855a:	lea    r14,[rip+0x8fe5f]        # d83c0 <ScalingList8x8>
   48561:	lea    r12,[rip+0x8fe38]        # d83a0 <UseDefaultScalingMatrix4x4Flag>
   48568:	jmp    485a6 <GenerateSeq_parameter_set_rbsp+0x336>
   4856a:	nop    WORD PTR [rax+rax*1+0x0]
   48570:	cmp    r13,0x5
   48574:	ja     485d0 <GenerateSeq_parameter_set_rbsp+0x360>
   48576:	mov    rdi,r13
   48579:	lea    rcx,[r12+r13*2]
   4857d:	mov    r8,rbp
   48580:	mov    edx,0x10
   48585:	shl    rdi,0x5
   48589:	lea    rsi,[rip+0x8fd50]        # d82e0 <ScalingList4x4>
   48590:	lea    rax,[rip+0x90fa9]        # d9540 <ScalingList4x4input>
   48597:	add    rsi,rdi
   4859a:	add    rdi,rax
   4859d:	call   48110 <Scaling_List>
   485a2:	add    r13,0x1
   485a6:	mov    esi,DWORD PTR [rbx+r13*4+0x28]
   485ab:	mov    rdx,rbp
   485ae:	lea    rdi,[rip+0x2dbfb]        # 761b0 <QP2QUANT+0x1d0>
   485b5:	call   66a40 <u_1>
   485ba:	mov    r9d,DWORD PTR [rbx+r13*4+0x28]
   485bf:	test   r9d,r9d
   485c2:	jne    48570 <GenerateSeq_parameter_set_rbsp+0x300>
   485c4:	cmp    r13d,0x7
   485c8:	jne    485a2 <GenerateSeq_parameter_set_rbsp+0x332>
   485ca:	jmp    48410 <GenerateSeq_parameter_set_rbsp+0x1a0>
   485cf:	nop
   485d0:	lea    eax,[r13-0x6]
   485d4:	mov    r8,rbp
   485d7:	mov    edx,0x40
   485dc:	mov    rdi,rax
   485df:	lea    rcx,[r15+rax*2]
   485e3:	lea    rax,[rip+0x91016]        # d9600 <ScalingList8x8input>
   485ea:	shl    rdi,0x7
   485ee:	lea    rsi,[rdi+r14*1]
   485f2:	add    rdi,rax
   485f5:	call   48110 <Scaling_List>
   485fa:	cmp    r13d,0x7
   485fe:	jne    485a2 <GenerateSeq_parameter_set_rbsp+0x332>
   48600:	jmp    48410 <GenerateSeq_parameter_set_rbsp+0x1a0>
   48605:	nop    DWORD PTR [rax]
   48608:	mov    rax,QWORD PTR [rip+0x3ffa9]        # 885b8 <input>
   4860f:	mov    edx,DWORD PTR [rax+0xcf0]
   48615:	test   edx,edx
   48617:	je     488c5 <GenerateSeq_parameter_set_rbsp+0x655>
   4861d:	cmp    DWORD PTR [rax+0x48],0x3
   48621:	jne    488c5 <GenerateSeq_parameter_set_rbsp+0x655>
   48627:	lea    rdi,[rip+0x2ddda]        # 76408 <QP2QUANT+0x428>
   4862e:	call   4320 <puts@plt>
   48633:	mov    rdx,rbp
   48636:	xor    esi,esi
   48638:	lea    rdi,[rip+0x2de09]        # 76448 <QP2QUANT+0x468>
   4863f:	call   66a40 <u_1>
   48644:	mov    rdx,rbp
   48647:	xor    esi,esi
   48649:	lea    rdi,[rip+0x2de20]        # 76470 <QP2QUANT+0x490>
   48650:	call   66a40 <u_1>
   48655:	mov    rdx,rbp
   48658:	mov    esi,0x1
   4865d:	lea    rdi,[rip+0x2de2c]        # 76490 <QP2QUANT+0x4b0>
   48664:	call   66a40 <u_1>
   48669:	mov    rcx,rbp
   4866c:	mov    edx,0x2
   48671:	lea    rsi,[rip+0x2e3b8]        # 76a30 <ZZ_SCAN+0x230>
   48678:	mov    edi,0x3
   4867d:	call   66ac0 <u_v>
   48682:	mov    rdx,rbp
   48685:	mov    esi,0x1
   4868a:	lea    rdi,[rip+0x2e3b1]        # 76a42 <ZZ_SCAN+0x242>
   48691:	call   66a40 <u_1>
   48696:	mov    rdx,rbp
   48699:	mov    esi,0x1
   4869e:	lea    rdi,[rip+0x2de13]        # 764b8 <QP2QUANT+0x4d8>
   486a5:	call   66a40 <u_1>
   486aa:	mov    rcx,rbp
   486ad:	mov    edx,0x2
   486b2:	lea    rsi,[rip+0x2e3a4]        # 76a5d <ZZ_SCAN+0x25d>
   486b9:	mov    edi,0x8
   486be:	call   66ac0 <u_v>
   486c3:	mov    rcx,rbp
   486c6:	mov    edx,0x2
   486cb:	lea    rsi,[rip+0x2e3a1]        # 76a73 <ZZ_SCAN+0x273>
   486d2:	mov    edi,0x8
   486d7:	call   66ac0 <u_v>
   486dc:	mov    rcx,rbp
   486df:	xor    edx,edx
   486e1:	mov    edi,0x8
   486e6:	lea    rsi,[rip+0x2e3a4]        # 76a91 <ZZ_SCAN+0x291>
   486ed:	call   66ac0 <u_v>
   486f2:	mov    rdx,rbp
   486f5:	xor    esi,esi
   486f7:	lea    rdi,[rip+0x2dde2]        # 764e0 <QP2QUANT+0x500>
   486fe:	call   66a40 <u_1>
   48703:	mov    rdx,rbp
   48706:	xor    esi,esi
   48708:	lea    rdi,[rip+0x2e39b]        # 76aaa <ZZ_SCAN+0x2aa>
   4870f:	call   66a40 <u_1>
   48714:	mov    rdx,rbp
   48717:	xor    esi,esi
   48719:	lea    rdi,[rip+0x2dde8]        # 76508 <QP2QUANT+0x528>
   48720:	call   66a40 <u_1>
   48725:	mov    rdx,rbp
   48728:	xor    esi,esi
   4872a:	lea    rdi,[rip+0x2ddff]        # 76530 <QP2QUANT+0x550>
   48731:	call   66a40 <u_1>
   48736:	mov    rdx,rbp
   48739:	xor    esi,esi
   4873b:	lea    rdi,[rip+0x2e386]        # 76ac8 <ZZ_SCAN+0x2c8>
   48742:	call   66a40 <u_1>
   48747:	mov    rdx,rbp
   4874a:	xor    esi,esi
   4874c:	lea    rdi,[rip+0x2de05]        # 76558 <QP2QUANT+0x578>
   48753:	call   66a40 <u_1>
   48758:	jmp    4851a <GenerateSeq_parameter_set_rbsp+0x2aa>
   4875d:	nop    DWORD PTR [rax]
   48760:	mov    esi,DWORD PTR [rbx+0x48c]
   48766:	mov    rdx,rbp
   48769:	lea    rdi,[rip+0x2dbd0]        # 76340 <QP2QUANT+0x360>
   48770:	call   66950 <ue_v>
   48775:	mov    esi,DWORD PTR [rbx+0x490]
   4877b:	mov    rdx,rbp
   4877e:	lea    rdi,[rip+0x2dbe3]        # 76368 <QP2QUANT+0x388>
   48785:	call   66950 <ue_v>
   4878a:	mov    esi,DWORD PTR [rbx+0x494]
   48790:	mov    rdx,rbp
   48793:	lea    rdi,[rip+0x2dbf6]        # 76390 <QP2QUANT+0x3b0>
   4879a:	call   66950 <ue_v>
   4879f:	mov    esi,DWORD PTR [rbx+0x498]
   487a5:	mov    rdx,rbp
   487a8:	lea    rdi,[rip+0x2dc09]        # 763b8 <QP2QUANT+0x3d8>
   487af:	call   66950 <ue_v>
   487b4:	jmp    484f7 <GenerateSeq_parameter_set_rbsp+0x287>
   487b9:	nop    DWORD PTR [rax+0x0]
   487c0:	mov    esi,DWORD PTR [rbx+0x480]
   487c6:	mov    rdx,rbp
   487c9:	lea    rdi,[rip+0x2db28]        # 762f8 <QP2QUANT+0x318>
   487d0:	call   66a40 <u_1>
   487d5:	jmp    484bf <GenerateSeq_parameter_set_rbsp+0x24f>
   487da:	nop    WORD PTR [rax+rax*1+0x0]
   487e0:	mov    esi,DWORD PTR [rbx+0x58]
   487e3:	mov    rdx,rbp
   487e6:	lea    rdi,[rip+0x2da0b]        # 761f8 <QP2QUANT+0x218>
   487ed:	call   66950 <ue_v>
   487f2:	jmp    48448 <GenerateSeq_parameter_set_rbsp+0x1d8>
   487f7:	nop    WORD PTR [rax+rax*1+0x0]
   48800:	mov    esi,DWORD PTR [rax+0x11c14]
   48806:	mov    rdx,rbp
   48809:	lea    rdi,[rip+0x2e11b]        # 7692b <ZZ_SCAN+0x12b>
   48810:	call   66a40 <u_1>
   48815:	jmp    483b1 <GenerateSeq_parameter_set_rbsp+0x141>
   4881a:	nop    WORD PTR [rax+rax*1+0x0]
   48820:	mov    esi,DWORD PTR [rbx+0x5c]
   48823:	mov    rdx,rbp
   48826:	lea    rdi,[rip+0x2d9f3]        # 76220 <QP2QUANT+0x240>
   4882d:	call   66a40 <u_1>
   48832:	mov    esi,DWORD PTR [rbx+0x60]
   48835:	mov    rdx,rbp
   48838:	lea    rdi,[rip+0x2e158]        # 76997 <ZZ_SCAN+0x197>
   4883f:	call   669b0 <se_v>
   48844:	mov    esi,DWORD PTR [rbx+0x64]
   48847:	mov    rdx,rbp
   4884a:	lea    rdi,[rip+0x2d9f7]        # 76248 <QP2QUANT+0x268>
   48851:	call   669b0 <se_v>
   48856:	mov    esi,DWORD PTR [rbx+0x68]
   48859:	mov    rdx,rbp
   4885c:	lea    rdi,[rip+0x2da0d]        # 76270 <QP2QUANT+0x290>
   48863:	call   66950 <ue_v>
   48868:	mov    r8d,DWORD PTR [rbx+0x68]
   4886c:	test   r8d,r8d
   4886f:	je     48448 <GenerateSeq_parameter_set_rbsp+0x1d8>
   48875:	xor    r12d,r12d
   48878:	lea    r13,[rip+0x2e134]        # 769b3 <ZZ_SCAN+0x1b3>
   4887f:	nop
   48880:	mov    esi,DWORD PTR [rbx+r12*4+0x6c]
   48885:	mov    rdx,rbp
   48888:	mov    rdi,r13
   4888b:	add    r12,0x1
   4888f:	call   669b0 <se_v>
   48894:	cmp    DWORD PTR [rbx+0x68],r12d
   48898:	ja     48880 <GenerateSeq_parameter_set_rbsp+0x610>
   4889a:	jmp    48448 <GenerateSeq_parameter_set_rbsp+0x1d8>
   4889f:	lea    rdi,[rip+0x2df95]        # 7683b <ZZ_SCAN+0x3b>
   488a6:	call   38210 <no_mem_exit>
   488ab:	mov    rax,QWORD PTR [rbp+0x0]
   488af:	jmp    482bf <GenerateSeq_parameter_set_rbsp+0x4f>
   488b4:	lea    rdi,[rip+0x2df66]        # 76821 <ZZ_SCAN+0x21>
   488bb:	call   38210 <no_mem_exit>
   488c0:	jmp    482a3 <GenerateSeq_parameter_set_rbsp+0x33>
   488c5:	lea    rdi,[rip+0x2dcac]        # 76578 <QP2QUANT+0x598>
   488cc:	call   4320 <puts@plt>
   488d1:	or     edi,0xffffffff
   488d4:	call   44e0 <exit@plt>
   488d9:	nop    DWORD PTR [rax+0x0]

00000000000488e0 <GenerateSeq_parameter_set_NALU>:
   488e0:	endbr64 
   488e4:	push   r12
   488e6:	push   rbp
   488e7:	lea    r11,[rsp-0xf000]
   488ef:	sub    rsp,0x1000
   488f6:	or     QWORD PTR [rsp],0x0
   488fb:	cmp    rsp,r11
   488fe:	jne    488ef <GenerateSeq_parameter_set_NALU+0xf>
   48900:	sub    rsp,0xa18
   48907:	mov    edi,0xfa00
   4890c:	mov    rax,QWORD PTR fs:0x28
   48915:	mov    QWORD PTR [rsp+0xfa08],rax
   4891d:	xor    eax,eax
   4891f:	mov    rbp,rsp
   48922:	call   46830 <AllocNALU>
   48927:	mov    rdi,QWORD PTR [rip+0x6d542]        # b5e70 <active_sps>
   4892e:	mov    rsi,rbp
   48931:	mov    r12,rax
   48934:	call   48270 <GenerateSeq_parameter_set_rbsp>
   48939:	sub    rsp,0x8
   4893d:	xor    r9d,r9d
   48940:	mov    rsi,r12
   48943:	push   0x1
   48945:	mov    edx,eax
   48947:	mov    r8d,0x3
   4894d:	mov    ecx,0x7
   48952:	mov    rdi,rbp
   48955:	call   467b0 <RBSPtoNALU>
   4895a:	mov    DWORD PTR [r12],0x4
   48962:	pop    rax
   48963:	pop    rdx
   48964:	mov    rax,QWORD PTR [rsp+0xfa08]
   4896c:	xor    rax,QWORD PTR fs:0x28
   48975:	jne    48985 <GenerateSeq_parameter_set_NALU+0xa5>
   48977:	add    rsp,0xfa18
   4897e:	mov    rax,r12
   48981:	pop    rbp
   48982:	pop    r12
   48984:	ret    
   48985:	call   4390 <__stack_chk_fail@plt>
   4898a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000048990 <GeneratePic_parameter_set_rbsp>:
   48990:	endbr64 
   48994:	push   r15
   48996:	push   r14
   48998:	push   r13
   4899a:	push   r12
   4899c:	mov    r12,rsi
   4899f:	mov    esi,0x78
   489a4:	push   rbp
   489a5:	push   rbx
   489a6:	mov    rbx,rdi
   489a9:	mov    edi,0x1
   489ae:	sub    rsp,0x8
   489b2:	call   4400 <calloc@plt>
   489b7:	mov    rbp,rax
   489ba:	test   rax,rax
   489bd:	je     48e4f <GeneratePic_parameter_set_rbsp+0x4bf>
   489c3:	mov    esi,0x30
   489c8:	mov    edi,0x1
   489cd:	call   4400 <calloc@plt>
   489d2:	mov    QWORD PTR [rbp+0x0],rax
   489d6:	test   rax,rax
   489d9:	je     48e60 <GeneratePic_parameter_set_rbsp+0x4d0>
   489df:	mov    QWORD PTR [rax+0x20],r12
   489e3:	mov    esi,DWORD PTR [rbx+0x4]
   489e6:	mov    rdx,rbp
   489e9:	lea    rdi,[rip+0x2e128]        # 76b18 <ZZ_SCAN+0x318>
   489f0:	mov    DWORD PTR [rax+0x4],0x8
   489f7:	mov    rax,QWORD PTR [rip+0x3fbb2]        # 885b0 <img>
   489fe:	mov    eax,DWORD PTR [rax+0x11b2c]
   48a04:	mov    DWORD PTR [rbx+0x38],eax
   48a07:	call   66950 <ue_v>
   48a0c:	mov    esi,DWORD PTR [rbx+0x8]
   48a0f:	mov    rdx,rbp
   48a12:	lea    rdi,[rip+0x2e119]        # 76b32 <ZZ_SCAN+0x332>
   48a19:	call   66950 <ue_v>
   48a1e:	mov    esi,DWORD PTR [rbx+0xc]
   48a21:	mov    rdx,rbp
   48a24:	lea    rdi,[rip+0x2e121]        # 76b4c <ZZ_SCAN+0x34c>
   48a2b:	call   66a40 <u_1>
   48a30:	mov    esi,DWORD PTR [rbx+0x38]
   48a33:	mov    rdx,rbp
   48a36:	lea    rdi,[rip+0x2e12d]        # 76b6a <ZZ_SCAN+0x36a>
   48a3d:	call   66a40 <u_1>
   48a42:	mov    esi,DWORD PTR [rbx+0x3c]
   48a45:	mov    rdx,rbp
   48a48:	lea    rdi,[rip+0x2e137]        # 76b86 <ZZ_SCAN+0x386>
   48a4f:	call   66950 <ue_v>
   48a54:	mov    esi,DWORD PTR [rbx+0x3c]
   48a57:	test   esi,esi
   48a59:	jne    48cf8 <GeneratePic_parameter_set_rbsp+0x368>
   48a5f:	mov    esi,DWORD PTR [rbx+0xb8]
   48a65:	mov    rdx,rbp
   48a68:	lea    rdi,[rip+0x2dbd1]        # 76640 <QP2QUANT+0x660>
   48a6f:	call   66950 <ue_v>
   48a74:	mov    esi,DWORD PTR [rbx+0xbc]
   48a7a:	mov    rdx,rbp
   48a7d:	lea    rdi,[rip+0x2dbe4]        # 76668 <QP2QUANT+0x688>
   48a84:	call   66950 <ue_v>
   48a89:	mov    esi,DWORD PTR [rbx+0xc0]
   48a8f:	mov    rdx,rbp
   48a92:	lea    rdi,[rip+0x2e17c]        # 76c15 <ZZ_SCAN+0x415>
   48a99:	call   66a40 <u_1>
   48a9e:	mov    edx,DWORD PTR [rbx+0xc4]
   48aa4:	mov    rcx,rbp
   48aa7:	lea    rsi,[rip+0x2e17f]        # 76c2d <ZZ_SCAN+0x42d>
   48aae:	mov    edi,0x2
   48ab3:	call   66ac0 <u_v>
   48ab8:	mov    esi,DWORD PTR [rbx+0xc8]
   48abe:	mov    rdx,rbp
   48ac1:	lea    rdi,[rip+0x2e17e]        # 76c46 <ZZ_SCAN+0x446>
   48ac8:	call   669b0 <se_v>
   48acd:	mov    esi,DWORD PTR [rbx+0xcc]
   48ad3:	mov    rdx,rbp
   48ad6:	lea    rdi,[rip+0x2e182]        # 76c5f <ZZ_SCAN+0x45f>
   48add:	call   669b0 <se_v>
   48ae2:	mov    rax,QWORD PTR [rip+0x3facf]        # 885b8 <input>
   48ae9:	mov    eax,DWORD PTR [rax]
   48aeb:	cmp    eax,0x64
   48aee:	je     48b60 <GeneratePic_parameter_set_rbsp+0x1d0>
   48af0:	cmp    eax,0x6e
   48af3:	je     48b60 <GeneratePic_parameter_set_rbsp+0x1d0>
   48af5:	cmp    eax,0x7a
   48af8:	je     48b60 <GeneratePic_parameter_set_rbsp+0x1d0>
   48afa:	cmp    eax,0x90
   48aff:	je     48b60 <GeneratePic_parameter_set_rbsp+0x1d0>
   48b01:	mov    esi,DWORD PTR [rbx+0xd0]
   48b07:	mov    rdx,rbp
   48b0a:	lea    rdi,[rip+0x2e167]        # 76c78 <ZZ_SCAN+0x478>
   48b11:	call   669b0 <se_v>
   48b16:	mov    esi,DWORD PTR [rbx+0xdc]
   48b1c:	mov    rdx,rbp
   48b1f:	lea    rdi,[rip+0x2db6a]        # 76690 <QP2QUANT+0x6b0>
   48b26:	call   66a40 <u_1>
   48b2b:	mov    esi,DWORD PTR [rbx+0xe0]
   48b31:	mov    rdx,rbp
   48b34:	lea    rdi,[rip+0x2db85]        # 766c0 <QP2QUANT+0x6e0>
   48b3b:	call   66a40 <u_1>
   48b40:	mov    esi,DWORD PTR [rbx+0xe4]
   48b46:	mov    rdx,rbp
   48b49:	lea    rdi,[rip+0x2db98]        # 766e8 <QP2QUANT+0x708>
   48b50:	call   66a40 <u_1>
   48b55:	jmp    48cc5 <GeneratePic_parameter_set_rbsp+0x335>
   48b5a:	nop    WORD PTR [rax+rax*1+0x0]
   48b60:	mov    esi,DWORD PTR [rbx+0xd4]
   48b66:	mov    rdx,rbp
   48b69:	lea    rdi,[rip+0x2e108]        # 76c78 <ZZ_SCAN+0x478>
   48b70:	call   669b0 <se_v>
   48b75:	mov    esi,DWORD PTR [rbx+0xdc]
   48b7b:	mov    rdx,rbp
   48b7e:	lea    rdi,[rip+0x2db0b]        # 76690 <QP2QUANT+0x6b0>
   48b85:	call   66a40 <u_1>
   48b8a:	mov    esi,DWORD PTR [rbx+0xe0]
   48b90:	mov    rdx,rbp
   48b93:	lea    rdi,[rip+0x2db26]        # 766c0 <QP2QUANT+0x6e0>
   48b9a:	call   66a40 <u_1>
   48b9f:	mov    esi,DWORD PTR [rbx+0xe4]
   48ba5:	mov    rdx,rbp
   48ba8:	lea    rdi,[rip+0x2db39]        # 766e8 <QP2QUANT+0x708>
   48baf:	call   66a40 <u_1>
   48bb4:	mov    esi,DWORD PTR [rbx+0x10]
   48bb7:	mov    rdx,rbp
   48bba:	lea    rdi,[rip+0x2e0d3]        # 76c94 <ZZ_SCAN+0x494>
   48bc1:	call   66a40 <u_1>
   48bc6:	mov    esi,DWORD PTR [rbx+0x14]
   48bc9:	mov    rdx,rbp
   48bcc:	lea    rdi,[rip+0x2db3d]        # 76710 <QP2QUANT+0x730>
   48bd3:	call   66a40 <u_1>
   48bd8:	mov    edx,DWORD PTR [rbx+0x14]
   48bdb:	test   edx,edx
   48bdd:	je     48cb0 <GeneratePic_parameter_set_rbsp+0x320>
   48be3:	mov    eax,DWORD PTR [rbx+0x10]
   48be6:	add    eax,eax
   48be8:	cmp    eax,0xfffffffa
   48beb:	je     48cb0 <GeneratePic_parameter_set_rbsp+0x320>
   48bf1:	xor    r13d,r13d
   48bf4:	lea    r15,[rip+0x8f6c5]        # d82c0 <UseDefaultScalingMatrix8x8Flag>
   48bfb:	lea    r14,[rip+0x8f7be]        # d83c0 <ScalingList8x8>
   48c02:	lea    r12,[rip+0x8f797]        # d83a0 <UseDefaultScalingMatrix4x4Flag>
   48c09:	jmp    48c4c <GeneratePic_parameter_set_rbsp+0x2bc>
   48c0b:	nop    DWORD PTR [rax+rax*1+0x0]
   48c10:	mov    rdi,r13
   48c13:	lea    rcx,[r12+r13*2]
   48c17:	mov    r8,rbp
   48c1a:	mov    edx,0x10
   48c1f:	shl    rdi,0x5
   48c23:	lea    rsi,[rip+0x8f6b6]        # d82e0 <ScalingList4x4>
   48c2a:	lea    rax,[rip+0x9090f]        # d9540 <ScalingList4x4input>
   48c31:	add    rsi,rdi
   48c34:	add    rdi,rax
   48c37:	call   48110 <Scaling_List>
   48c3c:	mov    eax,DWORD PTR [rbx+0x10]
   48c3f:	add    r13,0x1
   48c43:	lea    eax,[rax+rax*1+0x6]
   48c47:	cmp    eax,r13d
   48c4a:	jbe    48cb0 <GeneratePic_parameter_set_rbsp+0x320>
   48c4c:	mov    esi,DWORD PTR [rbx+r13*4+0x18]
   48c51:	mov    rdx,rbp
   48c54:	lea    rdi,[rip+0x2db05]        # 76760 <QP2QUANT+0x780>
   48c5b:	call   66a40 <u_1>
   48c60:	mov    eax,DWORD PTR [rbx+r13*4+0x18]
   48c65:	test   eax,eax
   48c67:	je     48c3c <GeneratePic_parameter_set_rbsp+0x2ac>
   48c69:	cmp    r13,0x5
   48c6d:	jbe    48c10 <GeneratePic_parameter_set_rbsp+0x280>
   48c6f:	lea    eax,[r13-0x6]
   48c73:	mov    r8,rbp
   48c76:	mov    edx,0x40
   48c7b:	add    r13,0x1
   48c7f:	mov    rdi,rax
   48c82:	lea    rcx,[r15+rax*2]
   48c86:	lea    rax,[rip+0x90973]        # d9600 <ScalingList8x8input>
   48c8d:	shl    rdi,0x7
   48c91:	lea    rsi,[rdi+r14*1]
   48c95:	add    rdi,rax
   48c98:	call   48110 <Scaling_List>
   48c9d:	mov    eax,DWORD PTR [rbx+0x10]
   48ca0:	lea    eax,[rax+rax*1+0x6]
   48ca4:	cmp    eax,r13d
   48ca7:	ja     48c4c <GeneratePic_parameter_set_rbsp+0x2bc>
   48ca9:	nop    DWORD PTR [rax+0x0]
   48cb0:	mov    esi,DWORD PTR [rbx+0xd8]
   48cb6:	mov    rdx,rbp
   48cb9:	lea    rdi,[rip+0x2da78]        # 76738 <QP2QUANT+0x758>
   48cc0:	call   669b0 <se_v>
   48cc5:	mov    rdi,QWORD PTR [rbp+0x0]
   48cc9:	call   465c0 <SODBtoRBSP>
   48cce:	mov    rdi,QWORD PTR [rbp+0x0]
   48cd2:	mov    r12d,DWORD PTR [rdi]
   48cd5:	call   42d0 <free@plt>
   48cda:	mov    rdi,rbp
   48cdd:	call   42d0 <free@plt>
   48ce2:	add    rsp,0x8
   48ce6:	mov    eax,r12d
   48ce9:	pop    rbx
   48cea:	pop    rbp
   48ceb:	pop    r12
   48ced:	pop    r13
   48cef:	pop    r14
   48cf1:	pop    r15
   48cf3:	ret    
   48cf4:	nop    DWORD PTR [rax+0x0]
   48cf8:	mov    esi,DWORD PTR [rbx+0x40]
   48cfb:	mov    rdx,rbp
   48cfe:	lea    rdi,[rip+0x2de9e]        # 76ba3 <ZZ_SCAN+0x3a3>
   48d05:	call   66950 <ue_v>
   48d0a:	mov    eax,DWORD PTR [rbx+0x40]
   48d0d:	test   eax,eax
   48d0f:	je     48da0 <GeneratePic_parameter_set_rbsp+0x410>
   48d15:	cmp    eax,0x2
   48d18:	je     48dd0 <GeneratePic_parameter_set_rbsp+0x440>
   48d1e:	lea    edx,[rax-0x3]
   48d21:	cmp    edx,0x2
   48d24:	jbe    48e20 <GeneratePic_parameter_set_rbsp+0x490>
   48d2a:	cmp    eax,0x6
   48d2d:	jne    48a5f <GeneratePic_parameter_set_rbsp+0xcf>
   48d33:	mov    eax,DWORD PTR [rbx+0x3c]
   48d36:	mov    r13d,0x3
   48d3c:	cmp    eax,0x3
   48d3f:	ja     48d4e <GeneratePic_parameter_set_rbsp+0x3be>
   48d41:	cmp    eax,0x1
   48d44:	mov    r13d,0x2
   48d4a:	cmovbe r13d,eax
   48d4e:	mov    esi,DWORD PTR [rbx+0xac]
   48d54:	mov    rdx,rbp
   48d57:	lea    rdi,[rip+0x2d8ba]        # 76618 <QP2QUANT+0x638>
   48d5e:	xor    r12d,r12d
   48d61:	lea    r14,[rip+0x2de95]        # 76bfd <ZZ_SCAN+0x3fd>
   48d68:	call   66950 <ue_v>
   48d6d:	nop    DWORD PTR [rax]
   48d70:	mov    rdx,QWORD PTR [rbx+0xb0]
   48d77:	mov    eax,r12d
   48d7a:	mov    rcx,rbp
   48d7d:	mov    rsi,r14
   48d80:	mov    edi,r13d
   48d83:	add    r12d,0x1
   48d87:	movzx  edx,BYTE PTR [rdx+rax*1]
   48d8b:	call   66ac0 <u_v>
   48d90:	cmp    DWORD PTR [rbx+0xac],r12d
   48d97:	jae    48d70 <GeneratePic_parameter_set_rbsp+0x3e0>
   48d99:	jmp    48a5f <GeneratePic_parameter_set_rbsp+0xcf>
   48d9e:	xchg   ax,ax
   48da0:	xor    r12d,r12d
   48da3:	lea    r13,[rip+0x2de13]        # 76bbd <ZZ_SCAN+0x3bd>
   48daa:	nop    WORD PTR [rax+rax*1+0x0]
   48db0:	mov    esi,DWORD PTR [rbx+r12*4+0x44]
   48db5:	mov    rdx,rbp
   48db8:	mov    rdi,r13
   48dbb:	add    r12,0x1
   48dbf:	call   66950 <ue_v>
   48dc4:	cmp    DWORD PTR [rbx+0x3c],r12d
   48dc8:	jae    48db0 <GeneratePic_parameter_set_rbsp+0x420>
   48dca:	jmp    48a5f <GeneratePic_parameter_set_rbsp+0xcf>
   48dcf:	nop
   48dd0:	mov    ecx,DWORD PTR [rbx+0x3c]
   48dd3:	test   ecx,ecx
   48dd5:	je     48a5f <GeneratePic_parameter_set_rbsp+0xcf>
   48ddb:	xor    r12d,r12d
   48dde:	lea    r13,[rip+0x2ddf2]        # 76bd7 <ZZ_SCAN+0x3d7>
   48de5:	nop    DWORD PTR [rax]
   48de8:	mov    esi,DWORD PTR [rbx+r12*4+0x64]
   48ded:	mov    rdx,rbp
   48df0:	mov    rdi,r13
   48df3:	call   66950 <ue_v>
   48df8:	mov    esi,DWORD PTR [rbx+r12*4+0x84]
   48e00:	mov    rdx,rbp
   48e03:	lea    rdi,[rip+0x2ddde]        # 76be8 <ZZ_SCAN+0x3e8>
   48e0a:	add    r12,0x1
   48e0e:	call   66950 <ue_v>
   48e13:	cmp    DWORD PTR [rbx+0x3c],r12d
   48e17:	ja     48de8 <GeneratePic_parameter_set_rbsp+0x458>
   48e19:	jmp    48a5f <GeneratePic_parameter_set_rbsp+0xcf>
   48e1e:	xchg   ax,ax
   48e20:	mov    esi,DWORD PTR [rbx+0xa4]
   48e26:	mov    rdx,rbp
   48e29:	lea    rdi,[rip+0x2d798]        # 765c8 <QP2QUANT+0x5e8>
   48e30:	call   66a40 <u_1>
   48e35:	mov    esi,DWORD PTR [rbx+0xa8]
   48e3b:	mov    rdx,rbp
   48e3e:	lea    rdi,[rip+0x2d7ab]        # 765f0 <QP2QUANT+0x610>
   48e45:	call   66950 <ue_v>
   48e4a:	jmp    48a5f <GeneratePic_parameter_set_rbsp+0xcf>
   48e4f:	lea    rdi,[rip+0x2dc8e]        # 76ae4 <ZZ_SCAN+0x2e4>
   48e56:	call   38210 <no_mem_exit>
   48e5b:	jmp    489c3 <GeneratePic_parameter_set_rbsp+0x33>
   48e60:	lea    rdi,[rip+0x2dc97]        # 76afe <ZZ_SCAN+0x2fe>
   48e67:	call   38210 <no_mem_exit>
   48e6c:	mov    rax,QWORD PTR [rbp+0x0]
   48e70:	jmp    489df <GeneratePic_parameter_set_rbsp+0x4f>
   48e75:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000048e80 <GeneratePic_parameter_set_NALU>:
   48e80:	endbr64 
   48e84:	push   r12
   48e86:	push   rbp
   48e87:	push   rbx
   48e88:	lea    r11,[rsp-0xf000]
   48e90:	sub    rsp,0x1000
   48e97:	or     QWORD PTR [rsp],0x0
   48e9c:	cmp    rsp,r11
   48e9f:	jne    48e90 <GeneratePic_parameter_set_NALU+0x10>
   48ea1:	sub    rsp,0xa10
   48ea8:	mov    rax,QWORD PTR fs:0x28
   48eb1:	mov    QWORD PTR [rsp+0xfa08],rax
   48eb9:	xor    eax,eax
   48ebb:	mov    ebx,edi
   48ebd:	mov    edi,0xfa00
   48ec2:	mov    rbp,rsp
   48ec5:	call   46830 <AllocNALU>
   48eca:	mov    rsi,rbp
   48ecd:	mov    r12,rax
   48ed0:	movsxd rax,ebx
   48ed3:	mov    rdi,rax
   48ed6:	shl    rdi,0x4
   48eda:	sub    rdi,rax
   48edd:	lea    rax,[rip+0x7f05c]        # c7f40 <PicParSet>
   48ee4:	shl    rdi,0x4
   48ee8:	add    rdi,rax
   48eeb:	call   48990 <GeneratePic_parameter_set_rbsp>
   48ef0:	sub    rsp,0x8
   48ef4:	xor    r9d,r9d
   48ef7:	mov    rsi,r12
   48efa:	push   0x1
   48efc:	mov    edx,eax
   48efe:	mov    r8d,0x3
   48f04:	mov    ecx,0x8
   48f09:	mov    rdi,rbp
   48f0c:	call   467b0 <RBSPtoNALU>
   48f11:	mov    DWORD PTR [r12],0x4
   48f19:	pop    rax
   48f1a:	pop    rdx
   48f1b:	mov    rax,QWORD PTR [rsp+0xfa08]
   48f23:	xor    rax,QWORD PTR fs:0x28
   48f2c:	jne    48f3d <GeneratePic_parameter_set_NALU+0xbd>
   48f2e:	add    rsp,0xfa10
   48f35:	mov    rax,r12
   48f38:	pop    rbx
   48f39:	pop    rbp
   48f3a:	pop    r12
   48f3c:	ret    
   48f3d:	call   4390 <__stack_chk_fail@plt>
   48f42:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48f4c:	nop    DWORD PTR [rax+0x0]

0000000000048f50 <AllocPPS>:
   48f50:	endbr64 
   48f54:	push   r12
   48f56:	mov    esi,0x1
   48f5b:	mov    edi,0xf0
   48f60:	call   4400 <calloc@plt>
   48f65:	mov    r12,rax
   48f68:	test   rax,rax
   48f6b:	je     48f8f <AllocPPS+0x3f>
   48f6d:	mov    esi,0x1
   48f72:	mov    edi,0xea60
   48f77:	call   4400 <calloc@plt>
   48f7c:	mov    QWORD PTR [r12+0xb0],rax
   48f84:	test   rax,rax
   48f87:	je     48f9d <AllocPPS+0x4d>
   48f89:	mov    rax,r12
   48f8c:	pop    r12
   48f8e:	ret    
   48f8f:	lea    rdi,[rip+0x2dd1b]        # 76cb1 <ZZ_SCAN+0x4b1>
   48f96:	call   38210 <no_mem_exit>
   48f9b:	jmp    48f6d <AllocPPS+0x1d>
   48f9d:	lea    rdi,[rip+0x2dd1b]        # 76cbf <ZZ_SCAN+0x4bf>
   48fa4:	call   38210 <no_mem_exit>
   48fa9:	jmp    48f89 <AllocPPS+0x39>
   48fab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000048fb0 <AllocSPS>:
   48fb0:	endbr64 
   48fb4:	sub    rsp,0x18
   48fb8:	mov    esi,0x1
   48fbd:	mov    edi,0x854
   48fc2:	call   4400 <calloc@plt>
   48fc7:	test   rax,rax
   48fca:	je     48fd1 <AllocSPS+0x21>
   48fcc:	add    rsp,0x18
   48fd0:	ret    
   48fd1:	lea    rdi,[rip+0x2dd00]        # 76cd8 <ZZ_SCAN+0x4d8>
   48fd8:	mov    QWORD PTR [rsp+0x8],rax
   48fdd:	call   38210 <no_mem_exit>
   48fe2:	mov    rax,QWORD PTR [rsp+0x8]
   48fe7:	jmp    48fcc <AllocSPS+0x1c>
   48fe9:	nop    DWORD PTR [rax+0x0]

0000000000048ff0 <FreePPS>:
   48ff0:	endbr64 
   48ff4:	push   rbp
   48ff5:	mov    rbp,rdi
   48ff8:	mov    rdi,QWORD PTR [rdi+0xb0]
   48fff:	test   rdi,rdi
   49002:	je     49009 <FreePPS+0x19>
   49004:	call   42d0 <free@plt>
   49009:	mov    rdi,rbp
   4900c:	pop    rbp
   4900d:	jmp    42d0 <free@plt>
   49012:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4901d:	nop    DWORD PTR [rax]

0000000000049020 <FreeSPS>:
   49020:	endbr64 
   49024:	jmp    42d0 <free@plt>
   49029:	nop    DWORD PTR [rax+0x0]

0000000000049030 <CheckParameterName>:
   49030:	endbr64 
   49034:	push   r14
   49036:	mov    r14,rdi
   49039:	push   r13
   4903b:	mov    r13,rsi
   4903e:	push   r12
   49040:	push   rbp
   49041:	lea    rbp,[rip+0x2dfb8]        # 77000 <MatrixType4x4>
   49048:	push   rbx
   49049:	xor    ebx,ebx
   4904b:	mov    DWORD PTR [rsi],0x0
   49051:	lea    rax,[rbx+rbx*4]
   49055:	mov    rsi,r14
   49058:	mov    r12d,ebx
   4905b:	lea    rdi,[rbp+rax*4+0x0]
   49060:	call   4410 <strcmp@plt>
   49065:	test   eax,eax
   49067:	je     490ae <CheckParameterName+0x7e>
   49069:	add    rbx,0x1
   4906d:	cmp    rbx,0x6
   49071:	jne    49051 <CheckParameterName+0x21>
   49073:	mov    DWORD PTR [r13+0x0],0x1
   4907b:	mov    rsi,r14
   4907e:	lea    rdi,[rip+0x2df3b]        # 76fc0 <MatrixType8x8>
   49085:	call   4410 <strcmp@plt>
   4908a:	mov    r12d,eax
   4908d:	test   eax,eax
   4908f:	je     490ae <CheckParameterName+0x7e>
   49091:	mov    rsi,r14
   49094:	lea    rdi,[rip+0x2df39]        # 76fd4 <MatrixType8x8+0x14>
   4909b:	call   4410 <strcmp@plt>
   490a0:	cmp    eax,0x1
   490a3:	sbb    r12d,r12d
   490a6:	and    r12d,0x2
   490aa:	sub    r12d,0x1
   490ae:	pop    rbx
   490af:	mov    eax,r12d
   490b2:	pop    rbp
   490b3:	pop    r12
   490b5:	pop    r13
   490b7:	pop    r14
   490b9:	ret    
   490ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000000490c0 <ParseMatrix>:
   490c0:	endbr64 
   490c4:	push   r15
   490c6:	push   r14
   490c8:	push   r13
   490ca:	push   r12
   490cc:	push   rbp
   490cd:	push   rbx
   490ce:	sub    rsp,0x1000
   490d5:	or     QWORD PTR [rsp],0x0
   490da:	sub    rsp,0xf98
   490e1:	mov    rax,QWORD PTR fs:0x28
   490ea:	mov    QWORD PTR [rsp+0x1f88],rax
   490f2:	xor    eax,eax
   490f4:	movsxd rdx,esi
   490f7:	add    rdx,rdi
   490fa:	cmp    rdi,rdx
   490fd:	jae    49388 <ParseMatrix+0x2c8>
   49103:	xor    esi,esi
   49105:	xor    r8d,r8d
   49108:	lea    rcx,[rip+0x2dcd1]        # 76de0 <ZZ_SCAN+0x5e0>
   4910f:	xor    r9d,r9d
   49112:	nop    WORD PTR [rax+rax*1+0x0]
   49118:	movzx  eax,BYTE PTR [rdi]
   4911b:	sub    eax,0x9
   4911e:	cmp    al,0x23
   49120:	ja     49130 <ParseMatrix+0x70>
   49122:	movzx  eax,al
   49125:	movsxd rax,DWORD PTR [rcx+rax*4]
   49129:	add    rax,rcx
   4912c:	notrack jmp rax
   4912f:	nop
   49130:	test   esi,esi
   49132:	jne    49140 <ParseMatrix+0x80>
   49134:	movsxd rax,r9d
   49137:	add    r9d,0x1
   4913b:	mov    QWORD PTR [rsp+rax*8+0x40],rdi
   49140:	add    rdi,0x1
   49144:	mov    esi,0xffffffff
   49149:	nop    DWORD PTR [rax+0x0]
   49150:	cmp    rdi,rdx
   49153:	jb     49118 <ParseMatrix+0x58>
   49155:	lea    eax,[r9-0x1]
   49159:	mov    DWORD PTR [rsp+0x1c],eax
   4915d:	test   eax,eax
   4915f:	jle    49388 <ParseMatrix+0x2c8>
   49165:	lea    rax,[rsp+0x3c]
   4916a:	mov    DWORD PTR [rsp+0x14],0x0
   49172:	lea    r15,[rsp+0x38]
   49177:	mov    QWORD PTR [rsp+0x20],rax
   4917c:	lea    rax,[rsp+0x40]
   49181:	mov    QWORD PTR [rsp+0x28],rax
   49186:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49190:	movsxd rbp,DWORD PTR [rsp+0x14]
   49195:	mov    rsi,QWORD PTR [rsp+0x20]
   4919a:	mov    r14,QWORD PTR [rsp+rbp*8+0x40]
   4919f:	mov    rdi,r14
   491a2:	call   49030 <CheckParameterName>
   491a7:	mov    ebx,eax
   491a9:	test   eax,eax
   491ab:	js     49480 <ParseMatrix+0x3c0>
   491b1:	mov    eax,DWORD PTR [rsp+0x14]
   491b5:	add    eax,0x1
   491b8:	cdqe   
   491ba:	mov    rax,QWORD PTR [rsp+rax*8+0x40]
   491bf:	cmp    BYTE PTR [rax],0x3d
   491c2:	je     49470 <ParseMatrix+0x3b0>
   491c8:	movabs rax,0x676e697372615020
   491d2:	mov    esi,0x2e
   491d7:	movabs rdx,0x6920726f72726520
   491e1:	mov    DWORD PTR [rip+0x6bdfd],0x6d657469        # b4fe8 <errortext+0x48>
   491eb:	mov    QWORD PTR [rip+0x6bdae],rax        # b4fa0 <errortext>
   491f2:	lea    rdi,[rip+0x6bda7]        # b4fa0 <errortext>
   491f9:	movabs rax,0x6769666e6f63206e
   49203:	mov    QWORD PTR [rip+0x6bd9e],rdx        # b4fa8 <errortext+0x8>
   4920a:	movabs rdx,0x27203a656c696620
   49214:	mov    QWORD PTR [rip+0x6bd95],rax        # b4fb0 <errortext+0x10>
   4921b:	movabs rax,0x636570786520273d
   49225:	mov    QWORD PTR [rip+0x6bd8c],rdx        # b4fb8 <errortext+0x18>
   4922c:	movabs rdx,0x7420736120646574
   49236:	mov    QWORD PTR [rip+0x6bd83],rax        # b4fc0 <errortext+0x20>
   4923d:	movabs rax,0x6e6f636573206568
   49247:	mov    QWORD PTR [rip+0x6bd7a],rdx        # b4fc8 <errortext+0x28>
   4924e:	movabs rdx,0x206e656b6f742064
   49258:	mov    QWORD PTR [rip+0x6bd71],rax        # b4fd0 <errortext+0x30>
   4925f:	movabs rax,0x2068636165206e69
   49269:	mov    WORD PTR [rip+0x6bd7c],si        # b4fec <errortext+0x4c>
   49270:	mov    esi,0x12c
   49275:	mov    QWORD PTR [rip+0x6bd5c],rdx        # b4fd8 <errortext+0x38>
   4927c:	mov    QWORD PTR [rip+0x6bd5d],rax        # b4fe0 <errortext+0x40>
   49283:	call   19180 <error>
   49288:	mov    ecx,DWORD PTR [rsp+0x3c]
   4928c:	movsxd rax,ebx
   4928f:	mov    rbx,rax
   49292:	test   ecx,ecx
   49294:	jne    49440 <ParseMatrix+0x380>
   4929a:	lea    rdx,[rip+0x9029f]        # d9540 <ScalingList4x4input>
   492a1:	shl    rbx,0x5
   492a5:	mov    DWORD PTR [rsp+0x18],0x10
   492ad:	lea    rcx,[rbx+rdx*1]
   492b1:	lea    rdx,[rip+0x3fdc8]        # 89080 <matrix4x4_check>
   492b8:	mov    QWORD PTR [rsp+0x8],rcx
   492bd:	mov    DWORD PTR [rdx+rax*4],0x1
   492c4:	mov    eax,DWORD PTR [rsp+0x18]
   492c8:	xor    r13d,r13d
   492cb:	mov    rbx,r13
   492ce:	sub    eax,0x1
   492d1:	mov    QWORD PTR [rsp],rax
   492d5:	mov    rax,QWORD PTR [rsp+0x28]
   492da:	lea    r12,[rax+rbp*8]
   492de:	lea    rbp,[rip+0x22043]        # 6b328 <maxpos+0x28>
   492e5:	mov    r13,r12
   492e8:	jmp    492f3 <ParseMatrix+0x233>
   492ea:	nop    WORD PTR [rax+rax*1+0x0]
   492f0:	mov    rbx,rax
   492f3:	mov    r12,QWORD PTR [r13+rbx*8+0x10]
   492f8:	xor    eax,eax
   492fa:	mov    rdx,r15
   492fd:	mov    rsi,rbp
   49300:	mov    rdi,r12
   49303:	call   4470 <__isoc99_sscanf@plt>
   49308:	cmp    eax,0x1
   4930b:	je     4934d <ParseMatrix+0x28d>
   4930d:	sub    rsp,0x8
   49311:	mov    edx,0x1
   49316:	mov    r9,r14
   49319:	xor    eax,eax
   4931b:	push   r12
   4931d:	mov    ecx,0x12c
   49322:	lea    r8,[rip+0x22a7f]        # 6bda8 <maxpos+0xaa8>
   49329:	mov    esi,0x12c
   4932e:	lea    rdi,[rip+0x6bc6b]        # b4fa0 <errortext>
   49335:	call   42c0 <__snprintf_chk@plt>
   4933a:	mov    esi,0x12c
   4933f:	lea    rdi,[rip+0x6bc5a]        # b4fa0 <errortext>
   49346:	call   19180 <error>
   4934b:	pop    rax
   4934c:	pop    rdx
   4934d:	mov    eax,DWORD PTR [rsp+0x38]
   49351:	mov    rcx,QWORD PTR [rsp+0x8]
   49356:	mov    WORD PTR [rcx+rbx*2],ax
   4935a:	lea    rax,[rbx+0x1]
   4935e:	cmp    QWORD PTR [rsp],rbx
   49362:	jne    492f0 <ParseMatrix+0x230>
   49364:	mov    edi,0x2e
   49369:	call   42e0 <putchar@plt>
   4936e:	mov    ecx,DWORD PTR [rsp+0x14]
   49372:	mov    eax,DWORD PTR [rsp+0x18]
   49376:	lea    eax,[rax+rcx*1+0x2]
   4937a:	mov    DWORD PTR [rsp+0x14],eax
   4937e:	cmp    DWORD PTR [rsp+0x1c],eax
   49382:	jg     49190 <ParseMatrix+0xd0>
   49388:	mov    rax,QWORD PTR [rsp+0x1f88]
   49390:	xor    rax,QWORD PTR fs:0x28
   49399:	jne    494d2 <ParseMatrix+0x412>
   4939f:	add    rsp,0x1f98
   493a6:	pop    rbx
   493a7:	pop    rbp
   493a8:	pop    r12
   493aa:	pop    r13
   493ac:	pop    r14
   493ae:	pop    r15
   493b0:	ret    
   493b1:	lea    rax,[rdi+0x1]
   493b5:	test   r8d,r8d
   493b8:	jne    494bd <ParseMatrix+0x3fd>
   493be:	mov    BYTE PTR [rdi],0x0
   493c1:	xor    esi,esi
   493c3:	mov    rdi,rax
   493c6:	jmp    49150 <ParseMatrix+0x90>
   493cb:	mov    BYTE PTR [rdi],0x0
   493ce:	add    rdi,0x1
   493d2:	xor    esi,esi
   493d4:	xor    r8d,r8d
   493d7:	jmp    49150 <ParseMatrix+0x90>
   493dc:	mov    BYTE PTR [rdi],0x0
   493df:	lea    rax,[rdi+0x1]
   493e3:	test   r8d,r8d
   493e6:	jne    494cb <ParseMatrix+0x40b>
   493ec:	movsxd rdi,r9d
   493ef:	not    esi
   493f1:	add    r9d,0x1
   493f5:	mov    QWORD PTR [rsp+rdi*8+0x40],rax
   493fa:	not    r8d
   493fd:	mov    rdi,rax
   49400:	jmp    49150 <ParseMatrix+0x90>
   49405:	add    rdi,0x1
   49409:	jmp    49150 <ParseMatrix+0x90>
   4940e:	add    rdi,0x1
   49412:	xor    esi,esi
   49414:	jmp    49150 <ParseMatrix+0x90>
   49419:	mov    BYTE PTR [rdi],0x0
   4941c:	cmp    rdx,rdi
   4941f:	ja     49435 <ParseMatrix+0x375>
   49421:	jmp    49155 <ParseMatrix+0x95>
   49426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49430:	cmp    rdx,rdi
   49433:	jbe    493d2 <ParseMatrix+0x312>
   49435:	add    rdi,0x1
   49439:	cmp    BYTE PTR [rdi],0xa
   4943c:	jne    49430 <ParseMatrix+0x370>
   4943e:	jmp    493d2 <ParseMatrix+0x312>
   49440:	shl    rbx,0x7
   49444:	lea    rdx,[rip+0x901b5]        # d9600 <ScalingList8x8input>
   4944b:	mov    DWORD PTR [rsp+0x18],0x40
   49453:	add    rdx,rbx
   49456:	mov    QWORD PTR [rsp+0x8],rdx
   4945b:	lea    rdx,[rip+0x3fc0e]        # 89070 <matrix8x8_check>
   49462:	mov    DWORD PTR [rdx+rax*4],0x1
   49469:	jmp    492c4 <ParseMatrix+0x204>
   4946e:	xchg   ax,ax
   49470:	cmp    BYTE PTR [rax+0x1],0x0
   49474:	je     49288 <ParseMatrix+0x1c8>
   4947a:	jmp    491c8 <ParseMatrix+0x108>
   4947f:	nop
   49480:	mov    r9,r14
   49483:	mov    ecx,0x12c
   49488:	mov    edx,0x1
   4948d:	xor    eax,eax
   4948f:	lea    r8,[rip+0x22962]        # 6bdf8 <maxpos+0xaf8>
   49496:	mov    esi,0x12c
   4949b:	lea    rdi,[rip+0x6bafe]        # b4fa0 <errortext>
   494a2:	call   42c0 <__snprintf_chk@plt>
   494a7:	mov    esi,0x12c
   494ac:	lea    rdi,[rip+0x6baed]        # b4fa0 <errortext>
   494b3:	call   19180 <error>
   494b8:	jmp    491b1 <ParseMatrix+0xf1>
   494bd:	mov    rdi,rax
   494c0:	mov    r8d,0xffffffff
   494c6:	jmp    49150 <ParseMatrix+0x90>
   494cb:	xor    esi,esi
   494cd:	jmp    493fa <ParseMatrix+0x33a>
   494d2:	call   4390 <__stack_chk_fail@plt>
   494d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000494e0 <PatchMatrix>:
   494e0:	endbr64 
   494e4:	push   r14
   494e6:	mov    rdx,QWORD PTR [rip+0x3f0cb]        # 885b8 <input>
   494ed:	push   r13
   494ef:	push   r12
   494f1:	lea    r12,[rip+0x90108]        # d9600 <ScalingList8x8input>
   494f8:	push   rbp
   494f9:	lea    r13,[r12+0x80]
   49501:	lea    rbp,[rip+0x90058]        # d9560 <ScalingList4x4input+0x20>
   49508:	push   rbx
   49509:	xor    ebx,ebx
   4950b:	jmp    4958a <PatchMatrix+0xaa>
   4950d:	nop    DWORD PTR [rax]
   49510:	lea    rcx,[rip+0x3fb69]        # 89080 <matrix4x4_check>
   49517:	lea    rax,[rbp-0x20]
   4951b:	mov    esi,DWORD PTR [rcx+rbx*4]
   4951e:	test   esi,esi
   49520:	jne    49668 <PatchMatrix+0x188>
   49526:	lea    rax,[rbx+rbx*4]
   4952a:	lea    rdx,[rip+0x2dacf]        # 77000 <MatrixType4x4>
   49531:	mov    edi,0x1
   49536:	lea    rdx,[rdx+rax*4]
   4953a:	lea    rsi,[rip+0x2d7a7]        # 76ce8 <ZZ_SCAN+0x4e8>
   49541:	xor    eax,eax
   49543:	call   4490 <__printf_chk@plt>
   49548:	cmp    rbx,0x2
   4954c:	jbe    496f0 <PatchMatrix+0x210>
   49552:	movdqa xmm0,XMMWORD PTR [rip+0x2da26]        # 76f80 <Quant_inter_default>
   4955a:	movdqa xmm1,XMMWORD PTR [rip+0x2da2e]        # 76f90 <Quant_inter_default+0x10>
   49562:	movaps XMMWORD PTR [rbp-0x20],xmm0
   49566:	movaps XMMWORD PTR [rbp-0x10],xmm1
   4956a:	lea    eax,[r14+0x1]
   4956e:	cmp    eax,0x6
   49571:	je     496e0 <PatchMatrix+0x200>
   49577:	mov    rdx,QWORD PTR [rip+0x3f03a]        # 885b8 <input>
   4957e:	add    rbx,0x1
   49582:	add    rbp,0x20
   49586:	sub    r13,0xffffffffffffff80
   4958a:	movsxd rax,ebx
   4958d:	mov    r14d,ebx
   49590:	mov    edi,DWORD PTR [rdx+rax*4+0xcbc]
   49597:	test   edi,edi
   49599:	jne    49510 <PatchMatrix+0x30>
   4959f:	lea    eax,[r14+0x1]
   495a3:	cmp    rbx,0x1
   495a7:	ja     4956e <PatchMatrix+0x8e>
   495a9:	add    r14d,0x6
   495ad:	movsxd r14,r14d
   495b0:	mov    ecx,DWORD PTR [rdx+r14*4+0xcbc]
   495b8:	test   ecx,ecx
   495ba:	je     4957e <PatchMatrix+0x9e>
   495bc:	lea    rax,[rip+0x3faad]        # 89070 <matrix8x8_check>
   495c3:	mov    eax,DWORD PTR [rax+rbx*4]
   495c6:	test   eax,eax
   495c8:	jne    49720 <PatchMatrix+0x240>
   495ce:	lea    rax,[rbx+rbx*4]
   495d2:	lea    rdx,[rip+0x2d9e7]        # 76fc0 <MatrixType8x8>
   495d9:	mov    edi,0x1
   495de:	lea    rdx,[rdx+rax*4]
   495e2:	lea    rsi,[rip+0x2d6ff]        # 76ce8 <ZZ_SCAN+0x4e8>
   495e9:	xor    eax,eax
   495eb:	call   4490 <__printf_chk@plt>
   495f0:	movdqa xmm4,XMMWORD PTR [rip+0x2d908]        # 76f00 <Quant8_intra_default>
   495f8:	movdqa xmm5,XMMWORD PTR [rip+0x2d910]        # 76f10 <Quant8_intra_default+0x10>
   49600:	movdqa xmm6,XMMWORD PTR [rip+0x2d918]        # 76f20 <Quant8_intra_default+0x20>
   49608:	movdqa xmm7,XMMWORD PTR [rip+0x2d920]        # 76f30 <Quant8_intra_default+0x30>
   49610:	movdqa xmm2,XMMWORD PTR [rip+0x2d928]        # 76f40 <Quant8_intra_default+0x40>
   49618:	movdqa xmm3,XMMWORD PTR [rip+0x2d930]        # 76f50 <Quant8_intra_default+0x50>
   49620:	movaps XMMWORD PTR [r13-0x80],xmm4
   49625:	movaps XMMWORD PTR [r13-0x70],xmm5
   4962a:	movdqa xmm4,XMMWORD PTR [rip+0x2d92e]        # 76f60 <Quant8_intra_default+0x60>
   49632:	movdqa xmm5,XMMWORD PTR [rip+0x2d936]        # 76f70 <Quant8_intra_default+0x70>
   4963a:	mov    rdx,QWORD PTR [rip+0x3ef77]        # 885b8 <input>
   49641:	movaps XMMWORD PTR [r13-0x60],xmm6
   49646:	movaps XMMWORD PTR [r13-0x50],xmm7
   4964b:	movaps XMMWORD PTR [r13-0x40],xmm2
   49650:	movaps XMMWORD PTR [r13-0x30],xmm3
   49655:	movaps XMMWORD PTR [r13-0x20],xmm4
   4965a:	movaps XMMWORD PTR [r13-0x10],xmm5
   4965f:	jmp    4957e <PatchMatrix+0x9e>
   49664:	nop    DWORD PTR [rax+0x0]
   49668:	cmp    WORD PTR [rax],0xff
   4966d:	ja     49684 <PatchMatrix+0x1a4>
   4966f:	nop
   49670:	add    rax,0x2
   49674:	cmp    rbp,rax
   49677:	je     4959f <PatchMatrix+0xbf>
   4967d:	cmp    WORD PTR [rax],0xff
   49682:	jbe    49670 <PatchMatrix+0x190>
   49684:	lea    rax,[rbx+rbx*4]
   49688:	lea    rdx,[rip+0x2d971]        # 77000 <MatrixType4x4>
   4968f:	mov    edi,0x1
   49694:	lea    rdx,[rdx+rax*4]
   49698:	lea    rsi,[rip+0x2d689]        # 76d28 <ZZ_SCAN+0x528>
   4969f:	xor    eax,eax
   496a1:	call   4490 <__printf_chk@plt>
   496a6:	xor    eax,eax
   496a8:	mov    edi,0x1
   496ad:	lea    rsi,[rip+0x2d6ac]        # 76d60 <ZZ_SCAN+0x560>
   496b4:	call   4490 <__printf_chk@plt>
   496b9:	cmp    rbx,0x2
   496bd:	jbe    497f0 <PatchMatrix+0x310>
   496c3:	movdqa xmm6,XMMWORD PTR [rip+0x2d8b5]        # 76f80 <Quant_inter_default>
   496cb:	movdqa xmm7,XMMWORD PTR [rip+0x2d8bd]        # 76f90 <Quant_inter_default+0x10>
   496d3:	movaps XMMWORD PTR [rbp-0x20],xmm6
   496d7:	movaps XMMWORD PTR [rbp-0x10],xmm7
   496db:	jmp    4956a <PatchMatrix+0x8a>
   496e0:	pop    rbx
   496e1:	pop    rbp
   496e2:	pop    r12
   496e4:	pop    r13
   496e6:	pop    r14
   496e8:	ret    
   496e9:	nop    DWORD PTR [rax+0x0]
   496f0:	movdqa xmm2,XMMWORD PTR [rip+0x2d8a8]        # 76fa0 <Quant_intra_default>
   496f8:	movdqa xmm3,XMMWORD PTR [rip+0x2d8b0]        # 76fb0 <Quant_intra_default+0x10>
   49700:	movaps XMMWORD PTR [rbp-0x20],xmm2
   49704:	movaps XMMWORD PTR [rbp-0x10],xmm3
   49708:	mov    rdx,QWORD PTR [rip+0x3eea9]        # 885b8 <input>
   4970f:	cmp    rbx,0x1
   49713:	ja     4957e <PatchMatrix+0x9e>
   49719:	jmp    495a9 <PatchMatrix+0xc9>
   4971e:	xchg   ax,ax
   49720:	mov    rax,rbx
   49723:	shl    rax,0x7
   49727:	add    rax,r12
   4972a:	jmp    4973d <PatchMatrix+0x25d>
   4972c:	nop    DWORD PTR [rax+0x0]
   49730:	add    rax,0x2
   49734:	cmp    rax,r13
   49737:	je     4957e <PatchMatrix+0x9e>
   4973d:	cmp    WORD PTR [rax],0xff
   49742:	jbe    49730 <PatchMatrix+0x250>
   49744:	lea    rax,[rbx+rbx*4]
   49748:	lea    rdx,[rip+0x2d871]        # 76fc0 <MatrixType8x8>
   4974f:	mov    edi,0x1
   49754:	lea    rdx,[rdx+rax*4]
   49758:	lea    rsi,[rip+0x2d5c9]        # 76d28 <ZZ_SCAN+0x528>
   4975f:	xor    eax,eax
   49761:	call   4490 <__printf_chk@plt>
   49766:	lea    rsi,[rip+0x2d5f3]        # 76d60 <ZZ_SCAN+0x560>
   4976d:	mov    edi,0x1
   49772:	xor    eax,eax
   49774:	call   4490 <__printf_chk@plt>
   49779:	movdqa xmm6,XMMWORD PTR [rip+0x2d77f]        # 76f00 <Quant8_intra_default>
   49781:	movdqa xmm7,XMMWORD PTR [rip+0x2d787]        # 76f10 <Quant8_intra_default+0x10>
   49789:	movdqa xmm0,XMMWORD PTR [rip+0x2d7af]        # 76f40 <Quant8_intra_default+0x40>
   49791:	movdqa xmm1,XMMWORD PTR [rip+0x2d7b7]        # 76f50 <Quant8_intra_default+0x50>
   49799:	movdqa xmm2,XMMWORD PTR [rip+0x2d7bf]        # 76f60 <Quant8_intra_default+0x60>
   497a1:	movdqa xmm3,XMMWORD PTR [rip+0x2d7c7]        # 76f70 <Quant8_intra_default+0x70>
   497a9:	movaps XMMWORD PTR [r13-0x80],xmm6
   497ae:	movaps XMMWORD PTR [r13-0x70],xmm7
   497b3:	movdqa xmm6,XMMWORD PTR [rip+0x2d765]        # 76f20 <Quant8_intra_default+0x20>
   497bb:	movdqa xmm7,XMMWORD PTR [rip+0x2d76d]        # 76f30 <Quant8_intra_default+0x30>
   497c3:	mov    rdx,QWORD PTR [rip+0x3edee]        # 885b8 <input>
   497ca:	movaps XMMWORD PTR [r13-0x40],xmm0
   497cf:	movaps XMMWORD PTR [r13-0x60],xmm6
   497d4:	movaps XMMWORD PTR [r13-0x50],xmm7
   497d9:	movaps XMMWORD PTR [r13-0x30],xmm1
   497de:	movaps XMMWORD PTR [r13-0x20],xmm2
   497e3:	movaps XMMWORD PTR [r13-0x10],xmm3
   497e8:	jmp    4957e <PatchMatrix+0x9e>
   497ed:	nop    DWORD PTR [rax]
   497f0:	movdqa xmm6,XMMWORD PTR [rip+0x2d7a8]        # 76fa0 <Quant_intra_default>
   497f8:	movdqa xmm7,XMMWORD PTR [rip+0x2d7b0]        # 76fb0 <Quant_intra_default+0x10>
   49800:	movaps XMMWORD PTR [rbp-0x20],xmm6
   49804:	movaps XMMWORD PTR [rbp-0x10],xmm7
   49808:	jmp    49708 <PatchMatrix+0x228>
   4980d:	nop    DWORD PTR [rax]

0000000000049810 <Init_QMatrix>:
   49810:	endbr64 
   49814:	mov    rdx,QWORD PTR [rip+0x3ed9d]        # 885b8 <input>
   4981b:	mov    eax,DWORD PTR [rdx+0xcb8]
   49821:	test   eax,eax
   49823:	jne    49830 <Init_QMatrix+0x20>
   49825:	ret    
   49826:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49830:	push   rbp
   49831:	add    rdx,0x400
   49838:	mov    edi,0x1
   4983d:	xor    eax,eax
   4983f:	lea    rsi,[rip+0x2d57e]        # 76dc4 <ZZ_SCAN+0x5c4>
   49846:	call   4490 <__printf_chk@plt>
   4984b:	mov    rax,QWORD PTR [rip+0x3ed66]        # 885b8 <input>
   49852:	xor    esi,esi
   49854:	lea    rdi,[rax+0x400]
   4985b:	call   f5b0 <GetConfigFileContent>
   49860:	mov    rbp,rax
   49863:	test   rax,rax
   49866:	je     498b8 <Init_QMatrix+0xa8>
   49868:	mov    rdi,rax
   4986b:	call   4380 <strlen@plt>
   49870:	mov    rdi,rbp
   49873:	mov    rsi,rax
   49876:	call   490c0 <ParseMatrix>
   4987b:	call   494e0 <PatchMatrix>
   49880:	mov    edi,0xa
   49885:	call   42e0 <putchar@plt>
   4988a:	mov    rdi,rbp
   4988d:	pop    rbp
   4988e:	mov    QWORD PTR [rip+0x8eb07],0x0        # d83a0 <UseDefaultScalingMatrix4x4Flag>
   49899:	mov    DWORD PTR [rip+0x8eb05],0x0        # d83a8 <UseDefaultScalingMatrix4x4Flag+0x8>
   498a3:	mov    DWORD PTR [rip+0x8ea13],0x0        # d82c0 <UseDefaultScalingMatrix8x8Flag>
   498ad:	jmp    42d0 <free@plt>
   498b2:	nop    WORD PTR [rax+rax*1+0x0]
   498b8:	lea    rdx,[rip+0x6b6e1]        # b4fa0 <errortext>
   498bf:	lea    rsi,[rip+0x2d4c2]        # 76d88 <ZZ_SCAN+0x588>
   498c6:	mov    edi,0x1
   498cb:	xor    eax,eax
   498cd:	call   4490 <__printf_chk@plt>
   498d2:	jmp    4987b <Init_QMatrix+0x6b>
   498d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   498df:	nop

00000000000498e0 <CalculateQuantParam>:
   498e0:	endbr64 
   498e4:	push   r15
   498e6:	push   r14
   498e8:	push   r13
   498ea:	push   r12
   498ec:	push   rbp
   498ed:	push   rbx
   498ee:	sub    rsp,0xb8
   498f5:	mov    rsi,QWORD PTR [rip+0x6c574]        # b5e70 <active_sps>
   498fc:	mov    rdi,QWORD PTR [rip+0x574fd]        # a0e00 <active_pps>
   49903:	mov    rax,QWORD PTR fs:0x28
   4990c:	mov    QWORD PTR [rsp+0xa8],rax
   49914:	xor    eax,eax
   49916:	mov    eax,DWORD PTR [rsi+0x24]
   49919:	mov    r8d,DWORD PTR [rdi+0x14]
   4991d:	test   eax,eax
   4991f:	jne    49ed7 <CalculateQuantParam+0x5f7>
   49925:	test   r8d,r8d
   49928:	jne    49a77 <CalculateQuantParam+0x197>
   4992e:	lea    rbp,[rip+0x8fdcb]        # d9700 <LevelScale4x4Chroma_Inter>
   49935:	xor    r8d,r8d
   49938:	mov    edi,0x50
   4993d:	lea    rbx,[rip+0x8ee7c]        # d87c0 <InvLevelScale4x4Luma_Intra>
   49944:	lea    r9,[rip+0x8eb75]        # d84c0 <LevelScale4x4Chroma_Intra>
   4994b:	mov    QWORD PTR [rsp+0x30],r8
   49950:	lea    rdx,[rbp+0x180]
   49957:	mov    QWORD PTR [rsp+0x8],rbx
   4995c:	lea    r15,[rip+0x8efdd]        # d8940 <InvLevelScale4x4Chroma_Intra>
   49963:	lea    rbx,[r9+0x180]
   4996a:	mov    QWORD PTR [rsp+0x20],rdx
   4996f:	lea    rax,[rip+0x209aa]        # 6a320 <dequant_coef>
   49976:	mov    QWORD PTR [rsp+0x18],rbx
   4997b:	lea    rsi,[r15+0x180]
   49982:	lea    rbx,[rip+0x90077]        # d9a00 <InvLevelScale4x4Chroma_Inter>
   49989:	mov    QWORD PTR [rsp+0x28],rdi
   4998e:	lea    r13,[rip+0x20b0b]        # 6a4a0 <quant_coef>
   49995:	lea    r11,[rip+0x8f2a4]        # d8c40 <LevelScale4x4Luma_Intra>
   4999c:	mov    rdi,rax
   4999f:	lea    r14,[rip+0x8fa1a]        # d93c0 <LevelScale4x4Luma_Inter>
   499a6:	lea    r12,[rip+0x8db93]        # d7540 <InvLevelScale4x4Luma_Inter>
   499ad:	mov    r8,rsi
   499b0:	lea    r10,[rbx+0x180]
   499b7:	nop    WORD PTR [rax+rax*1+0x0]
   499c0:	mov    rax,QWORD PTR [rsp+0x28]
   499c5:	lea    rsi,[rax-0x40]
   499c9:	mov    QWORD PTR [rsp+0x10],rsi
   499ce:	lea    rax,[rsi-0x10]
   499d2:	mov    edx,DWORD PTR [rdi+rax*1]
   499d5:	mov    rsi,QWORD PTR [rsp+0x8]
   499da:	mov    ecx,DWORD PTR [r13+rax*1+0x0]
   499df:	shl    edx,0x4
   499e2:	mov    DWORD PTR [rsi+rax*1],edx
   499e5:	mov    rsi,QWORD PTR [rsp+0x18]
   499ea:	mov    DWORD PTR [r9+rax*1],ecx
   499ee:	mov    DWORD PTR [rsi+rax*1],ecx
   499f1:	mov    rsi,QWORD PTR [rsp+0x20]
   499f6:	mov    DWORD PTR [r15+rax*1],edx
   499fa:	mov    DWORD PTR [rbp+rax*1+0x0],ecx
   499fe:	mov    DWORD PTR [rbx+rax*1],edx
   49a01:	mov    DWORD PTR [r11+rax*1],ecx
   49a05:	mov    DWORD PTR [r8+rax*1],edx
   49a09:	mov    DWORD PTR [r14+rax*1],ecx
   49a0d:	mov    DWORD PTR [r12+rax*1],edx
   49a11:	mov    DWORD PTR [rsi+rax*1],ecx
   49a14:	mov    DWORD PTR [r10+rax*1],edx
   49a18:	add    rax,0x4
   49a1c:	cmp    QWORD PTR [rsp+0x10],rax
   49a21:	jne    499d2 <CalculateQuantParam+0xf2>
   49a23:	mov    rsi,QWORD PTR [rsp+0x10]
   49a28:	add    rsi,0x10
   49a2c:	cmp    rsi,QWORD PTR [rsp+0x28]
   49a31:	jne    499c9 <CalculateQuantParam+0xe9>
   49a33:	add    QWORD PTR [rsp+0x30],0x4
   49a39:	mov    rax,QWORD PTR [rsp+0x30]
   49a3e:	add    QWORD PTR [rsp+0x28],0x40
   49a44:	cmp    rax,0x18
   49a48:	jne    499c0 <CalculateQuantParam+0xe0>
   49a4e:	mov    rax,QWORD PTR [rsp+0xa8]
   49a56:	xor    rax,QWORD PTR fs:0x28
   49a5f:	jne    49f1f <CalculateQuantParam+0x63f>
   49a65:	add    rsp,0xb8
   49a6c:	pop    rbx
   49a6d:	pop    rbp
   49a6e:	pop    r12
   49a70:	pop    r13
   49a72:	pop    r14
   49a74:	pop    r15
   49a76:	ret    
   49a77:	mov    QWORD PTR [rsp+0xa0],0x0
   49a83:	pxor   xmm0,xmm0
   49a87:	lea    rcx,[rsp+0x90]
   49a8f:	movaps XMMWORD PTR [rsp+0x90],xmm0
   49a97:	xor    eax,eax
   49a99:	jmp    49ab2 <CalculateQuantParam+0x1d2>
   49a9b:	nop    DWORD PTR [rax+rax*1+0x0]
   49aa0:	cmp    eax,0x3
   49aa3:	je     49aba <CalculateQuantParam+0x1da>
   49aa5:	mov    DWORD PTR [rcx+rax*4],edx
   49aa8:	add    rax,0x1
   49aac:	cmp    rax,0x6
   49ab0:	je     49aca <CalculateQuantParam+0x1ea>
   49ab2:	mov    edx,DWORD PTR [rdi+rax*4+0x18]
   49ab6:	test   eax,eax
   49ab8:	jne    49aa0 <CalculateQuantParam+0x1c0>
   49aba:	or     edx,DWORD PTR [rcx+rax*4]
   49abd:	mov    DWORD PTR [rcx+rax*4],edx
   49ac0:	add    rax,0x1
   49ac4:	cmp    rax,0x6
   49ac8:	jne    49ab2 <CalculateQuantParam+0x1d2>
   49aca:	mov    eax,DWORD PTR [rsp+0x90]
   49ad1:	lea    r15,[rip+0x8ee68]        # d8940 <InvLevelScale4x4Chroma_Intra>
   49ad8:	lea    rbp,[rip+0x8fc21]        # d9700 <LevelScale4x4Chroma_Inter>
   49adf:	mov    QWORD PTR [rsp+0x88],0x0
   49aeb:	lea    rbx,[rip+0x8ff0e]        # d9a00 <InvLevelScale4x4Chroma_Inter>
   49af2:	lea    r13,[rip+0x209a7]        # 6a4a0 <quant_coef>
   49af9:	mov    DWORD PTR [rsp+0x44],eax
   49afd:	movzx  eax,WORD PTR [rip+0x8e89c]        # d83a0 <UseDefaultScalingMatrix4x4Flag>
   49b04:	lea    r14,[rip+0x8f8b5]        # d93c0 <LevelScale4x4Luma_Inter>
   49b0b:	lea    r12,[rip+0x8da2e]        # d7540 <InvLevelScale4x4Luma_Inter>
   49b12:	mov    WORD PTR [rsp+0x7c],ax
   49b17:	mov    eax,DWORD PTR [rsp+0x94]
   49b1e:	mov    DWORD PTR [rsp+0x48],eax
   49b22:	movzx  eax,WORD PTR [rip+0x8e879]        # d83a2 <UseDefaultScalingMatrix4x4Flag+0x2>
   49b29:	mov    WORD PTR [rsp+0x7e],ax
   49b2e:	mov    eax,DWORD PTR [rsp+0x98]
   49b35:	mov    DWORD PTR [rsp+0x4c],eax
   49b39:	movzx  eax,WORD PTR [rip+0x8e864]        # d83a4 <UseDefaultScalingMatrix4x4Flag+0x4>
   49b40:	mov    WORD PTR [rsp+0x80],ax
   49b48:	mov    eax,DWORD PTR [rsp+0x9c]
   49b4f:	mov    DWORD PTR [rsp+0x50],eax
   49b53:	movzx  eax,WORD PTR [rip+0x8e84c]        # d83a6 <UseDefaultScalingMatrix4x4Flag+0x6>
   49b5a:	mov    WORD PTR [rsp+0x82],ax
   49b62:	mov    eax,DWORD PTR [rsp+0xa0]
   49b69:	mov    DWORD PTR [rsp+0x54],eax
   49b6d:	movzx  eax,WORD PTR [rip+0x8e834]        # d83a8 <UseDefaultScalingMatrix4x4Flag+0x8>
   49b74:	mov    WORD PTR [rsp+0x84],ax
   49b7c:	mov    eax,DWORD PTR [rsp+0xa4]
   49b83:	mov    DWORD PTR [rsp+0x78],eax
   49b87:	movzx  eax,WORD PTR [rip+0x8e81c]        # d83aa <UseDefaultScalingMatrix4x4Flag+0xa>
   49b8e:	mov    WORD PTR [rsp+0x86],ax
   49b96:	lea    rax,[rip+0x8f0a3]        # d8c40 <LevelScale4x4Luma_Intra>
   49b9d:	mov    QWORD PTR [rsp+0x30],rax
   49ba2:	lea    rax,[rip+0x20777]        # 6a320 <dequant_coef>
   49ba9:	mov    QWORD PTR [rsp+0x58],rax
   49bae:	lea    rax,[rip+0x8ec0b]        # d87c0 <InvLevelScale4x4Luma_Intra>
   49bb5:	mov    QWORD PTR [rsp+0x8],rax
   49bba:	lea    rax,[rip+0x8e8ff]        # d84c0 <LevelScale4x4Chroma_Intra>
   49bc1:	mov    QWORD PTR [rsp+0x28],rax
   49bc6:	add    rax,0x180
   49bcc:	mov    QWORD PTR [rsp+0x18],rax
   49bd1:	lea    rax,[r15+0x180]
   49bd8:	mov    QWORD PTR [rsp+0x60],rax
   49bdd:	lea    rax,[rbp+0x180]
   49be4:	mov    QWORD PTR [rsp+0x20],rax
   49be9:	lea    rax,[rbx+0x180]
   49bf0:	mov    QWORD PTR [rsp+0x68],rax
   49bf5:	nop    DWORD PTR [rax]
   49bf8:	mov    QWORD PTR [rsp+0x38],0x0
   49c01:	lea    rax,[rip+0x2d398]        # 76fa0 <Quant_intra_default>
   49c08:	mov    QWORD PTR [rsp+0x10],rax
   49c0d:	mov    rax,QWORD PTR [rsp+0x88]
   49c15:	shl    rax,0x4
   49c19:	mov    QWORD PTR [rsp+0x70],rax
   49c1e:	mov    rax,QWORD PTR [rsp+0x10]
   49c23:	mov    rcx,QWORD PTR [rsp+0x70]
   49c28:	lea    r8,[rax-0x20]
   49c2c:	mov    rax,QWORD PTR [rsp+0x38]
   49c31:	lea    r10,[rax+rax*1]
   49c35:	lea    rax,[rip+0x8e6a4]        # d82e0 <ScalingList4x4>
   49c3c:	lea    r11,[rax+r10*1]
   49c40:	lea    rax,[rip+0x2d359]        # 76fa0 <Quant_intra_default>
   49c47:	add    r10,rax
   49c4a:	mov    rax,QWORD PTR [rsp+0x58]
   49c4f:	mov    esi,DWORD PTR [r13+rcx*1+0x0]
   49c54:	mov    edi,DWORD PTR [rax+rcx*1]
   49c57:	mov    eax,DWORD PTR [rsp+0x44]
   49c5b:	shl    esi,0x4
   49c5e:	test   eax,eax
   49c60:	je     49dc8 <CalculateQuantParam+0x4e8>
   49c66:	cmp    WORD PTR [rsp+0x7c],0x0
   49c6c:	jne    49dc8 <CalculateQuantParam+0x4e8>
   49c72:	movsx  r9d,WORD PTR [r11]
   49c76:	mov    eax,esi
   49c78:	cdq    
   49c79:	idiv   r9d
   49c7c:	mov    rdx,QWORD PTR [rsp+0x30]
   49c81:	imul   r9d,edi
   49c85:	mov    DWORD PTR [rdx+rcx*1],eax
   49c88:	mov    rax,QWORD PTR [rsp+0x8]
   49c8d:	mov    DWORD PTR [rax+rcx*1],r9d
   49c91:	mov    eax,DWORD PTR [rsp+0x48]
   49c95:	test   eax,eax
   49c97:	jne    49e70 <CalculateQuantParam+0x590>
   49c9d:	mov    rax,QWORD PTR [rsp+0x30]
   49ca2:	mov    rdx,QWORD PTR [rsp+0x28]
   49ca7:	mov    eax,DWORD PTR [rax+rcx*1]
   49caa:	mov    DWORD PTR [rdx+rcx*1],eax
   49cad:	mov    rax,QWORD PTR [rsp+0x8]
   49cb2:	mov    eax,DWORD PTR [rax+rcx*1]
   49cb5:	mov    DWORD PTR [r15+rcx*1],eax
   49cb9:	mov    eax,DWORD PTR [rsp+0x4c]
   49cbd:	test   eax,eax
   49cbf:	jne    49e40 <CalculateQuantParam+0x560>
   49cc5:	mov    rax,QWORD PTR [rsp+0x28]
   49cca:	mov    rdx,QWORD PTR [rsp+0x18]
   49ccf:	mov    eax,DWORD PTR [rax+rcx*1]
   49cd2:	mov    DWORD PTR [rdx+rcx*1],eax
   49cd5:	mov    eax,DWORD PTR [r15+rcx*1]
   49cd9:	mov    rdx,QWORD PTR [rsp+0x60]
   49cde:	mov    DWORD PTR [rdx+rcx*1],eax
   49ce1:	mov    r9d,DWORD PTR [rsp+0x50]
   49ce6:	test   r9d,r9d
   49ce9:	je     49db8 <CalculateQuantParam+0x4d8>
   49cef:	cmp    WORD PTR [rsp+0x82],0x0
   49cf8:	jne    49db8 <CalculateQuantParam+0x4d8>
   49cfe:	movsx  r9d,WORD PTR [r11+0x60]
   49d03:	mov    eax,esi
   49d05:	cdq    
   49d06:	idiv   r9d
   49d09:	mov    edx,DWORD PTR [rsp+0x54]
   49d0d:	imul   r9d,edi
   49d11:	mov    DWORD PTR [r12+rcx*1],r9d
   49d15:	mov    DWORD PTR [r14+rcx*1],eax
   49d19:	test   edx,edx
   49d1b:	jne    49e10 <CalculateQuantParam+0x530>
   49d21:	mov    eax,DWORD PTR [r14+rcx*1]
   49d25:	mov    DWORD PTR [rbp+rcx*1+0x0],eax
   49d29:	mov    eax,DWORD PTR [r12+rcx*1]
   49d2d:	mov    DWORD PTR [rbx+rcx*1],eax
   49d30:	mov    eax,DWORD PTR [rsp+0x78]
   49d34:	test   eax,eax
   49d36:	jne    49dd8 <CalculateQuantParam+0x4f8>
   49d3c:	mov    eax,DWORD PTR [rbp+rcx*1+0x0]
   49d40:	mov    rdi,QWORD PTR [rsp+0x20]
   49d45:	mov    DWORD PTR [rdi+rcx*1],eax
   49d48:	mov    eax,DWORD PTR [rbx+rcx*1]
   49d4b:	mov    rdi,QWORD PTR [rsp+0x68]
   49d50:	mov    DWORD PTR [rdi+rcx*1],eax
   49d53:	add    r8,0x8
   49d57:	add    r11,0x8
   49d5b:	add    r10,0x8
   49d5f:	add    rcx,0x4
   49d63:	cmp    r8,QWORD PTR [rsp+0x10]
   49d68:	jne    49c4a <CalculateQuantParam+0x36a>
   49d6e:	add    QWORD PTR [rsp+0x38],0x1
   49d74:	mov    rax,QWORD PTR [rsp+0x38]
   49d79:	lea    rdi,[r8+0x2]
   49d7d:	add    QWORD PTR [rsp+0x70],0x10
   49d83:	mov    QWORD PTR [rsp+0x10],rdi
   49d88:	cmp    rax,0x4
   49d8c:	jne    49c1e <CalculateQuantParam+0x33e>
   49d92:	add    QWORD PTR [rsp+0x88],0x4
   49d9b:	mov    rax,QWORD PTR [rsp+0x88]
   49da3:	cmp    rax,0x18
   49da7:	jne    49bf8 <CalculateQuantParam+0x318>
   49dad:	jmp    49a4e <CalculateQuantParam+0x16e>
   49db2:	nop    WORD PTR [rax+rax*1+0x0]
   49db8:	movsx  r9d,WORD PTR [r8]
   49dbc:	jmp    49d03 <CalculateQuantParam+0x423>
   49dc1:	nop    DWORD PTR [rax+0x0]
   49dc8:	movsx  r9d,WORD PTR [r10]
   49dcc:	jmp    49c76 <CalculateQuantParam+0x396>
   49dd1:	nop    DWORD PTR [rax+0x0]
   49dd8:	cmp    WORD PTR [rsp+0x86],0x0
   49de1:	je     49ea0 <CalculateQuantParam+0x5c0>
   49de7:	movsx  r9d,WORD PTR [r8]
   49deb:	mov    eax,esi
   49ded:	mov    rsi,QWORD PTR [rsp+0x20]
   49df2:	imul   edi,r9d
   49df6:	cdq    
   49df7:	idiv   r9d
   49dfa:	mov    DWORD PTR [rsi+rcx*1],eax
   49dfd:	mov    rax,QWORD PTR [rsp+0x68]
   49e02:	mov    DWORD PTR [rax+rcx*1],edi
   49e05:	jmp    49d53 <CalculateQuantParam+0x473>
   49e0a:	nop    WORD PTR [rax+rax*1+0x0]
   49e10:	cmp    WORD PTR [rsp+0x84],0x0
   49e19:	je     49eb0 <CalculateQuantParam+0x5d0>
   49e1f:	movsx  r9d,WORD PTR [r8]
   49e23:	mov    eax,esi
   49e25:	cdq    
   49e26:	idiv   r9d
   49e29:	imul   r9d,edi
   49e2d:	mov    DWORD PTR [rbx+rcx*1],r9d
   49e31:	mov    DWORD PTR [rbp+rcx*1+0x0],eax
   49e35:	jmp    49d30 <CalculateQuantParam+0x450>
   49e3a:	nop    WORD PTR [rax+rax*1+0x0]
   49e40:	cmp    WORD PTR [rsp+0x80],0x0
   49e49:	je     49ec0 <CalculateQuantParam+0x5e0>
   49e4b:	movsx  r9d,WORD PTR [r10]
   49e4f:	mov    eax,esi
   49e51:	cdq    
   49e52:	idiv   r9d
   49e55:	mov    rdx,QWORD PTR [rsp+0x18]
   49e5a:	imul   r9d,edi
   49e5e:	mov    DWORD PTR [rdx+rcx*1],eax
   49e61:	mov    rax,QWORD PTR [rsp+0x60]
   49e66:	mov    DWORD PTR [rax+rcx*1],r9d
   49e6a:	jmp    49ce1 <CalculateQuantParam+0x401>
   49e6f:	nop
   49e70:	cmp    WORD PTR [rsp+0x7e],0x0
   49e76:	je     49ed0 <CalculateQuantParam+0x5f0>
   49e78:	movsx  r9d,WORD PTR [r10]
   49e7c:	mov    eax,esi
   49e7e:	cdq    
   49e7f:	idiv   r9d
   49e82:	mov    rdx,QWORD PTR [rsp+0x28]
   49e87:	imul   r9d,edi
   49e8b:	mov    DWORD PTR [r15+rcx*1],r9d
   49e8f:	mov    DWORD PTR [rdx+rcx*1],eax
   49e92:	jmp    49cb9 <CalculateQuantParam+0x3d9>
   49e97:	nop    WORD PTR [rax+rax*1+0x0]
   49ea0:	movsx  r9d,WORD PTR [r11+0xa0]
   49ea8:	jmp    49deb <CalculateQuantParam+0x50b>
   49ead:	nop    DWORD PTR [rax]
   49eb0:	movsx  r9d,WORD PTR [r11+0x80]
   49eb8:	jmp    49e23 <CalculateQuantParam+0x543>
   49ebd:	nop    DWORD PTR [rax]
   49ec0:	movsx  r9d,WORD PTR [r11+0x40]
   49ec5:	jmp    49e4f <CalculateQuantParam+0x56f>
   49ec7:	nop    WORD PTR [rax+rax*1+0x0]
   49ed0:	movsx  r9d,WORD PTR [r11+0x20]
   49ed5:	jmp    49e7c <CalculateQuantParam+0x59c>
   49ed7:	pxor   xmm0,xmm0
   49edb:	xor    eax,eax
   49edd:	mov    QWORD PTR [rsp+0xa0],0x0
   49ee9:	lea    rcx,[rsp+0x90]
   49ef1:	movaps XMMWORD PTR [rsp+0x90],xmm0
   49ef9:	nop    DWORD PTR [rax+0x0]
   49f00:	mov    edx,DWORD PTR [rsi+rax*1+0x28]
   49f04:	mov    DWORD PTR [rcx+rax*1],edx
   49f07:	add    rax,0x4
   49f0b:	cmp    rax,0x18
   49f0f:	jne    49f00 <CalculateQuantParam+0x620>
   49f11:	test   r8d,r8d
   49f14:	je     49aca <CalculateQuantParam+0x1ea>
   49f1a:	jmp    49a97 <CalculateQuantParam+0x1b7>
   49f1f:	call   4390 <__stack_chk_fail@plt>
   49f24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   49f2f:	nop

0000000000049f30 <CalculateQuant8Param>:
   49f30:	endbr64 
   49f34:	push   r15
   49f36:	push   r14
   49f38:	push   r13
   49f3a:	push   r12
   49f3c:	push   rbp
   49f3d:	push   rbx
   49f3e:	sub    rsp,0x48
   49f42:	mov    rdx,QWORD PTR [rip+0x6bf27]        # b5e70 <active_sps>
   49f49:	mov    rax,QWORD PTR fs:0x28
   49f52:	mov    QWORD PTR [rsp+0x38],rax
   49f57:	xor    eax,eax
   49f59:	mov    rax,QWORD PTR [rip+0x56ea0]        # a0e00 <active_pps>
   49f60:	mov    esi,DWORD PTR [rdx+0x24]
   49f63:	mov    ecx,DWORD PTR [rax+0x14]
   49f66:	test   esi,esi
   49f68:	jne    4a1b0 <CalculateQuant8Param+0x280>
   49f6e:	test   ecx,ecx
   49f70:	je     4a0b5 <CalculateQuant8Param+0x185>
   49f76:	xor    r15d,r15d
   49f79:	xor    r14d,r14d
   49f7c:	or     r14d,DWORD PTR [rax+0x30]
   49f80:	or     r15d,DWORD PTR [rax+0x34]
   49f84:	mov    DWORD PTR [rsp+0x30],r14d
   49f89:	mov    DWORD PTR [rsp+0x34],r15d
   49f8e:	movzx  eax,WORD PTR [rip+0x8e32b]        # d82c0 <UseDefaultScalingMatrix8x8Flag>
   49f95:	lea    rbx,[rip+0x2e544]        # 784e0 <quant_coef8>
   49f9c:	mov    QWORD PTR [rsp+0x28],0x0
   49fa5:	lea    r11,[rip+0x8d714]        # d76c0 <LevelScale8x8Luma_Intra>
   49fac:	lea    r10,[rip+0x2df2d]        # 77ee0 <dequant_coef8>
   49fb3:	lea    r12,[rip+0x8cf86]        # d6f40 <InvLevelScale8x8Luma_Intra>
   49fba:	mov    WORD PTR [rsp+0x18],ax
   49fbf:	movzx  eax,WORD PTR [rip+0x8e2fc]        # d82c2 <UseDefaultScalingMatrix8x8Flag+0x2>
   49fc6:	lea    rbp,[rip+0x8edf3]        # d8dc0 <LevelScale8x8Luma_Inter>
   49fcd:	lea    r13,[rip+0x8dcec]        # d7cc0 <InvLevelScale8x8Luma_Inter>
   49fd4:	mov    WORD PTR [rsp+0x1a],ax
   49fd9:	nop    DWORD PTR [rax+0x0]
   49fe0:	lea    rax,[rip+0x2ce99]        # 76e80 <Quant8_inter_default>
   49fe7:	mov    DWORD PTR [rsp+0x1c],0x0
   49fef:	mov    QWORD PTR [rsp],rax
   49ff3:	lea    rax,[rip+0x8e3c6]        # d83c0 <ScalingList8x8>
   49ffa:	mov    QWORD PTR [rsp+0x10],rax
   49fff:	lea    rax,[rip+0x2cefa]        # 76f00 <Quant8_intra_default>
   4a006:	mov    QWORD PTR [rsp+0x8],rax
   4a00b:	mov    rax,QWORD PTR [rsp+0x28]
   4a010:	shl    rax,0x5
   4a014:	mov    QWORD PTR [rsp+0x20],rax
   4a019:	nop    DWORD PTR [rax+0x0]
   4a020:	mov    rsi,QWORD PTR [rsp+0x20]
   4a025:	xor    edi,edi
   4a027:	jmp    4a09f <CalculateQuant8Param+0x16f>
   4a029:	nop    DWORD PTR [rax+0x0]
   4a030:	cmp    WORD PTR [rsp+0x18],0x0
   4a036:	jne    4a0ae <CalculateQuant8Param+0x17e>
   4a038:	mov    rax,QWORD PTR [rsp+0x10]
   4a03d:	movsx  r8d,WORD PTR [rax+rdi*1]
   4a042:	mov    eax,ecx
   4a044:	cdq    
   4a045:	idiv   r8d
   4a048:	imul   r8d,r9d
   4a04c:	mov    DWORD PTR [r12+rsi*1],r8d
   4a050:	mov    DWORD PTR [r11+rsi*1],eax
   4a054:	test   r15d,r15d
   4a057:	je     4a160 <CalculateQuant8Param+0x230>
   4a05d:	cmp    WORD PTR [rsp+0x1a],0x0
   4a063:	jne    4a160 <CalculateQuant8Param+0x230>
   4a069:	mov    rax,QWORD PTR [rsp+0x10]
   4a06e:	movsx  r8d,WORD PTR [rax+rdi*1+0x80]
   4a077:	mov    eax,ecx
   4a079:	add    rdi,0x10
   4a07d:	cdq    
   4a07e:	idiv   r8d
   4a081:	imul   r8d,r9d
   4a085:	mov    DWORD PTR [r13+rsi*1+0x0],r8d
   4a08a:	mov    DWORD PTR [rbp+rsi*1+0x0],eax
   4a08e:	add    rsi,0x4
   4a092:	cmp    rdi,0x80
   4a099:	je     4a170 <CalculateQuant8Param+0x240>
   4a09f:	mov    ecx,DWORD PTR [rbx+rsi*1]
   4a0a2:	mov    r9d,DWORD PTR [r10+rsi*1]
   4a0a6:	shl    ecx,0x4
   4a0a9:	test   r14d,r14d
   4a0ac:	jne    4a030 <CalculateQuant8Param+0x100>
   4a0ae:	mov    rax,QWORD PTR [rsp+0x8]
   4a0b3:	jmp    4a03d <CalculateQuant8Param+0x10d>
   4a0b5:	xor    r8d,r8d
   4a0b8:	mov    edi,0x120
   4a0bd:	lea    rbx,[rip+0x2e41c]        # 784e0 <quant_coef8>
   4a0c4:	lea    r11,[rip+0x8d5f5]        # d76c0 <LevelScale8x8Luma_Intra>
   4a0cb:	lea    r10,[rip+0x2de0e]        # 77ee0 <dequant_coef8>
   4a0d2:	lea    r12,[rip+0x8ce67]        # d6f40 <InvLevelScale8x8Luma_Intra>
   4a0d9:	lea    rbp,[rip+0x8ece0]        # d8dc0 <LevelScale8x8Luma_Inter>
   4a0e0:	lea    r13,[rip+0x8dbd9]        # d7cc0 <InvLevelScale8x8Luma_Inter>
   4a0e7:	lea    rsi,[rdi-0x100]
   4a0ee:	xchg   ax,ax
   4a0f0:	lea    rax,[rsi-0x20]
   4a0f4:	nop    DWORD PTR [rax+0x0]
   4a0f8:	mov    edx,DWORD PTR [r10+rax*1]
   4a0fc:	mov    ecx,DWORD PTR [rbx+rax*1]
   4a0ff:	shl    edx,0x4
   4a102:	mov    DWORD PTR [r11+rax*1],ecx
   4a106:	mov    DWORD PTR [r12+rax*1],edx
   4a10a:	mov    DWORD PTR [rbp+rax*1+0x0],ecx
   4a10e:	mov    DWORD PTR [r13+rax*1+0x0],edx
   4a113:	add    rax,0x4
   4a117:	cmp    rsi,rax
   4a11a:	jne    4a0f8 <CalculateQuant8Param+0x1c8>
   4a11c:	add    rsi,0x20
   4a120:	cmp    rsi,rdi
   4a123:	jne    4a0f0 <CalculateQuant8Param+0x1c0>
   4a125:	add    r8,0x8
   4a129:	add    rdi,0x100
   4a130:	cmp    r8,0x30
   4a134:	jne    4a0e7 <CalculateQuant8Param+0x1b7>
   4a136:	mov    rax,QWORD PTR [rsp+0x38]
   4a13b:	xor    rax,QWORD PTR fs:0x28
   4a144:	jne    4a1cf <CalculateQuant8Param+0x29f>
   4a14a:	add    rsp,0x48
   4a14e:	pop    rbx
   4a14f:	pop    rbp
   4a150:	pop    r12
   4a152:	pop    r13
   4a154:	pop    r14
   4a156:	pop    r15
   4a158:	ret    
   4a159:	nop    DWORD PTR [rax+0x0]
   4a160:	mov    rax,QWORD PTR [rsp]
   4a164:	movsx  r8d,WORD PTR [rax+rdi*1]
   4a169:	jmp    4a077 <CalculateQuant8Param+0x147>
   4a16e:	xchg   ax,ax
   4a170:	add    DWORD PTR [rsp+0x1c],0x1
   4a175:	mov    eax,DWORD PTR [rsp+0x1c]
   4a179:	add    QWORD PTR [rsp],0x2
   4a17e:	add    QWORD PTR [rsp+0x10],0x2
   4a184:	add    QWORD PTR [rsp+0x8],0x2
   4a18a:	add    QWORD PTR [rsp+0x20],0x20
   4a190:	cmp    eax,0x8
   4a193:	jne    4a020 <CalculateQuant8Param+0xf0>
   4a199:	add    QWORD PTR [rsp+0x28],0x8
   4a19f:	mov    rax,QWORD PTR [rsp+0x28]
   4a1a4:	cmp    rax,0x30
   4a1a8:	jne    49fe0 <CalculateQuant8Param+0xb0>
   4a1ae:	jmp    4a136 <CalculateQuant8Param+0x206>
   4a1b0:	mov    r14d,DWORD PTR [rdx+0x40]
   4a1b4:	mov    r15d,DWORD PTR [rdx+0x44]
   4a1b8:	mov    DWORD PTR [rsp+0x30],r14d
   4a1bd:	mov    DWORD PTR [rsp+0x34],r15d
   4a1c2:	test   ecx,ecx
   4a1c4:	je     49f8e <CalculateQuant8Param+0x5e>
   4a1ca:	jmp    49f7c <CalculateQuant8Param+0x4c>
   4a1cf:	call   4390 <__stack_chk_fail@plt>
   4a1d4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a1de:	xchg   ax,ax

000000000004a1e0 <CheckOffsetParameterName>:
   4a1e0:	endbr64 
   4a1e4:	push   r14
   4a1e6:	mov    r14,rdi
   4a1e9:	push   r13
   4a1eb:	mov    r13,rsi
   4a1ee:	push   r12
   4a1f0:	push   rbp
   4a1f1:	lea    rbp,[rip+0x2d108]        # 77300 <OffsetType4x4>
   4a1f8:	push   rbx
   4a1f9:	xor    ebx,ebx
   4a1fb:	mov    DWORD PTR [rsi],0x0
   4a201:	nop    DWORD PTR [rax+0x0]
   4a208:	lea    rax,[rbx+rbx*2]
   4a20c:	mov    rsi,r14
   4a20f:	mov    r12d,ebx
   4a212:	lea    rdi,[rbp+rax*8+0x0]
   4a217:	call   4410 <strcmp@plt>
   4a21c:	test   eax,eax
   4a21e:	je     4a278 <CheckOffsetParameterName+0x98>
   4a220:	add    rbx,0x1
   4a224:	cmp    rbx,0x9
   4a228:	jne    4a208 <CheckOffsetParameterName+0x28>
   4a22a:	mov    DWORD PTR [r13+0x0],0x1
   4a232:	mov    rsi,r14
   4a235:	lea    rdi,[rip+0x2d064]        # 772a0 <OffsetType8x8>
   4a23c:	call   4410 <strcmp@plt>
   4a241:	mov    r12d,eax
   4a244:	test   eax,eax
   4a246:	je     4a278 <CheckOffsetParameterName+0x98>
   4a248:	mov    rsi,r14
   4a24b:	lea    rdi,[rip+0x2d066]        # 772b8 <OffsetType8x8+0x18>
   4a252:	call   4410 <strcmp@plt>
   4a257:	test   eax,eax
   4a259:	je     4a284 <CheckOffsetParameterName+0xa4>
   4a25b:	mov    rsi,r14
   4a25e:	lea    rdi,[rip+0x2d06b]        # 772d0 <OffsetType8x8+0x30>
   4a265:	call   4410 <strcmp@plt>
   4a26a:	cmp    eax,0x1
   4a26d:	sbb    r12d,r12d
   4a270:	and    r12d,0x3
   4a274:	sub    r12d,0x1
   4a278:	pop    rbx
   4a279:	mov    eax,r12d
   4a27c:	pop    rbp
   4a27d:	pop    r12
   4a27f:	pop    r13
   4a281:	pop    r14
   4a283:	ret    
   4a284:	mov    r12d,0x1
   4a28a:	jmp    4a278 <CheckOffsetParameterName+0x98>
   4a28c:	nop    DWORD PTR [rax+0x0]

000000000004a290 <ParseQOffsetMatrix>:
   4a290:	endbr64 
   4a294:	push   r15
   4a296:	push   r14
   4a298:	push   r13
   4a29a:	push   r12
   4a29c:	push   rbp
   4a29d:	push   rbx
   4a29e:	sub    rsp,0x1000
   4a2a5:	or     QWORD PTR [rsp],0x0
   4a2aa:	sub    rsp,0xf98
   4a2b1:	mov    rax,QWORD PTR fs:0x28
   4a2ba:	mov    QWORD PTR [rsp+0x1f88],rax
   4a2c2:	xor    eax,eax
   4a2c4:	movsxd rdx,esi
   4a2c7:	add    rdx,rdi
   4a2ca:	cmp    rdi,rdx
   4a2cd:	jae    4a558 <ParseQOffsetMatrix+0x2c8>
   4a2d3:	xor    esi,esi
   4a2d5:	xor    r8d,r8d
   4a2d8:	lea    rcx,[rip+0x2cde1]        # 770c0 <MatrixType4x4+0xc0>
   4a2df:	xor    r9d,r9d
   4a2e2:	nop    WORD PTR [rax+rax*1+0x0]
   4a2e8:	movzx  eax,BYTE PTR [rdi]
   4a2eb:	sub    eax,0x9
   4a2ee:	cmp    al,0x23
   4a2f0:	ja     4a300 <ParseQOffsetMatrix+0x70>
   4a2f2:	movzx  eax,al
   4a2f5:	movsxd rax,DWORD PTR [rcx+rax*4]
   4a2f9:	add    rax,rcx
   4a2fc:	notrack jmp rax
   4a2ff:	nop
   4a300:	test   esi,esi
   4a302:	jne    4a310 <ParseQOffsetMatrix+0x80>
   4a304:	movsxd rax,r9d
   4a307:	add    r9d,0x1
   4a30b:	mov    QWORD PTR [rsp+rax*8+0x40],rdi
   4a310:	add    rdi,0x1
   4a314:	mov    esi,0xffffffff
   4a319:	nop    DWORD PTR [rax+0x0]
   4a320:	cmp    rdi,rdx
   4a323:	jb     4a2e8 <ParseQOffsetMatrix+0x58>
   4a325:	lea    eax,[r9-0x1]
   4a329:	mov    DWORD PTR [rsp+0x1c],eax
   4a32d:	test   eax,eax
   4a32f:	jle    4a558 <ParseQOffsetMatrix+0x2c8>
   4a335:	lea    rax,[rsp+0x3c]
   4a33a:	mov    DWORD PTR [rsp+0x14],0x0
   4a342:	lea    r15,[rsp+0x38]
   4a347:	mov    QWORD PTR [rsp+0x20],rax
   4a34c:	lea    rax,[rsp+0x40]
   4a351:	mov    QWORD PTR [rsp+0x28],rax
   4a356:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a360:	movsxd rbp,DWORD PTR [rsp+0x14]
   4a365:	mov    rsi,QWORD PTR [rsp+0x20]
   4a36a:	mov    r14,QWORD PTR [rsp+rbp*8+0x40]
   4a36f:	mov    rdi,r14
   4a372:	call   4a1e0 <CheckOffsetParameterName>
   4a377:	mov    ebx,eax
   4a379:	test   eax,eax
   4a37b:	js     4a650 <ParseQOffsetMatrix+0x3c0>
   4a381:	mov    eax,DWORD PTR [rsp+0x14]
   4a385:	add    eax,0x1
   4a388:	cdqe   
   4a38a:	mov    rax,QWORD PTR [rsp+rax*8+0x40]
   4a38f:	cmp    BYTE PTR [rax],0x3d
   4a392:	je     4a640 <ParseQOffsetMatrix+0x3b0>
   4a398:	movabs rax,0x676e697372615020
   4a3a2:	mov    esi,0x2e
   4a3a7:	movabs rdx,0x6920726f72726520
   4a3b1:	mov    DWORD PTR [rip+0x6ac2d],0x6d657469        # b4fe8 <errortext+0x48>
   4a3bb:	mov    QWORD PTR [rip+0x6abde],rax        # b4fa0 <errortext>
   4a3c2:	lea    rdi,[rip+0x6abd7]        # b4fa0 <errortext>
   4a3c9:	movabs rax,0x6769666e6f63206e
   4a3d3:	mov    QWORD PTR [rip+0x6abce],rdx        # b4fa8 <errortext+0x8>
   4a3da:	movabs rdx,0x27203a656c696620
   4a3e4:	mov    QWORD PTR [rip+0x6abc5],rax        # b4fb0 <errortext+0x10>
   4a3eb:	movabs rax,0x636570786520273d
   4a3f5:	mov    QWORD PTR [rip+0x6abbc],rdx        # b4fb8 <errortext+0x18>
   4a3fc:	movabs rdx,0x7420736120646574
   4a406:	mov    QWORD PTR [rip+0x6abb3],rax        # b4fc0 <errortext+0x20>
   4a40d:	movabs rax,0x6e6f636573206568
   4a417:	mov    QWORD PTR [rip+0x6abaa],rdx        # b4fc8 <errortext+0x28>
   4a41e:	movabs rdx,0x206e656b6f742064
   4a428:	mov    QWORD PTR [rip+0x6aba1],rax        # b4fd0 <errortext+0x30>
   4a42f:	movabs rax,0x2068636165206e69
   4a439:	mov    WORD PTR [rip+0x6abac],si        # b4fec <errortext+0x4c>
   4a440:	mov    esi,0x12c
   4a445:	mov    QWORD PTR [rip+0x6ab8c],rdx        # b4fd8 <errortext+0x38>
   4a44c:	mov    QWORD PTR [rip+0x6ab8d],rax        # b4fe0 <errortext+0x40>
   4a453:	call   19180 <error>
   4a458:	mov    ecx,DWORD PTR [rsp+0x3c]
   4a45c:	movsxd rax,ebx
   4a45f:	mov    rbx,rax
   4a462:	test   ecx,ecx
   4a464:	jne    4a610 <ParseQOffsetMatrix+0x380>
   4a46a:	lea    rdx,[rip+0x9136f]        # db7e0 <OffsetList4x4input>
   4a471:	shl    rbx,0x5
   4a475:	mov    DWORD PTR [rsp+0x18],0x10
   4a47d:	lea    rcx,[rbx+rdx*1]
   4a481:	lea    rdx,[rip+0x3ec28]        # 890b0 <offset4x4_check>
   4a488:	mov    QWORD PTR [rsp+0x8],rcx
   4a48d:	mov    DWORD PTR [rdx+rax*4],0x1
   4a494:	mov    eax,DWORD PTR [rsp+0x18]
   4a498:	xor    r13d,r13d
   4a49b:	mov    rbx,r13
   4a49e:	sub    eax,0x1
   4a4a1:	mov    QWORD PTR [rsp],rax
   4a4a5:	mov    rax,QWORD PTR [rsp+0x28]
   4a4aa:	lea    r12,[rax+rbp*8]
   4a4ae:	lea    rbp,[rip+0x20e73]        # 6b328 <maxpos+0x28>
   4a4b5:	mov    r13,r12
   4a4b8:	jmp    4a4c3 <ParseQOffsetMatrix+0x233>
   4a4ba:	nop    WORD PTR [rax+rax*1+0x0]
   4a4c0:	mov    rbx,rax
   4a4c3:	mov    r12,QWORD PTR [r13+rbx*8+0x10]
   4a4c8:	xor    eax,eax
   4a4ca:	mov    rdx,r15
   4a4cd:	mov    rsi,rbp
   4a4d0:	mov    rdi,r12
   4a4d3:	call   4470 <__isoc99_sscanf@plt>
   4a4d8:	cmp    eax,0x1
   4a4db:	je     4a51d <ParseQOffsetMatrix+0x28d>
   4a4dd:	sub    rsp,0x8
   4a4e1:	mov    edx,0x1
   4a4e6:	mov    r9,r14
   4a4e9:	xor    eax,eax
   4a4eb:	push   r12
   4a4ed:	mov    ecx,0x12c
   4a4f2:	lea    r8,[rip+0x218af]        # 6bda8 <maxpos+0xaa8>
   4a4f9:	mov    esi,0x12c
   4a4fe:	lea    rdi,[rip+0x6aa9b]        # b4fa0 <errortext>
   4a505:	call   42c0 <__snprintf_chk@plt>
   4a50a:	mov    esi,0x12c
   4a50f:	lea    rdi,[rip+0x6aa8a]        # b4fa0 <errortext>
   4a516:	call   19180 <error>
   4a51b:	pop    rax
   4a51c:	pop    rdx
   4a51d:	mov    eax,DWORD PTR [rsp+0x38]
   4a521:	mov    rcx,QWORD PTR [rsp+0x8]
   4a526:	mov    WORD PTR [rcx+rbx*2],ax
   4a52a:	lea    rax,[rbx+0x1]
   4a52e:	cmp    QWORD PTR [rsp],rbx
   4a532:	jne    4a4c0 <ParseQOffsetMatrix+0x230>
   4a534:	mov    edi,0x2e
   4a539:	call   42e0 <putchar@plt>
   4a53e:	mov    ecx,DWORD PTR [rsp+0x14]
   4a542:	mov    eax,DWORD PTR [rsp+0x18]
   4a546:	lea    eax,[rax+rcx*1+0x2]
   4a54a:	mov    DWORD PTR [rsp+0x14],eax
   4a54e:	cmp    DWORD PTR [rsp+0x1c],eax
   4a552:	jg     4a360 <ParseQOffsetMatrix+0xd0>
   4a558:	mov    rax,QWORD PTR [rsp+0x1f88]
   4a560:	xor    rax,QWORD PTR fs:0x28
   4a569:	jne    4a6a2 <ParseQOffsetMatrix+0x412>
   4a56f:	add    rsp,0x1f98
   4a576:	pop    rbx
   4a577:	pop    rbp
   4a578:	pop    r12
   4a57a:	pop    r13
   4a57c:	pop    r14
   4a57e:	pop    r15
   4a580:	ret    
   4a581:	lea    rax,[rdi+0x1]
   4a585:	test   r8d,r8d
   4a588:	jne    4a68d <ParseQOffsetMatrix+0x3fd>
   4a58e:	mov    BYTE PTR [rdi],0x0
   4a591:	xor    esi,esi
   4a593:	mov    rdi,rax
   4a596:	jmp    4a320 <ParseQOffsetMatrix+0x90>
   4a59b:	mov    BYTE PTR [rdi],0x0
   4a59e:	add    rdi,0x1
   4a5a2:	xor    esi,esi
   4a5a4:	xor    r8d,r8d
   4a5a7:	jmp    4a320 <ParseQOffsetMatrix+0x90>
   4a5ac:	mov    BYTE PTR [rdi],0x0
   4a5af:	lea    rax,[rdi+0x1]
   4a5b3:	test   r8d,r8d
   4a5b6:	jne    4a69b <ParseQOffsetMatrix+0x40b>
   4a5bc:	movsxd rdi,r9d
   4a5bf:	not    esi
   4a5c1:	add    r9d,0x1
   4a5c5:	mov    QWORD PTR [rsp+rdi*8+0x40],rax
   4a5ca:	not    r8d
   4a5cd:	mov    rdi,rax
   4a5d0:	jmp    4a320 <ParseQOffsetMatrix+0x90>
   4a5d5:	add    rdi,0x1
   4a5d9:	jmp    4a320 <ParseQOffsetMatrix+0x90>
   4a5de:	add    rdi,0x1
   4a5e2:	xor    esi,esi
   4a5e4:	jmp    4a320 <ParseQOffsetMatrix+0x90>
   4a5e9:	mov    BYTE PTR [rdi],0x0
   4a5ec:	cmp    rdx,rdi
   4a5ef:	ja     4a605 <ParseQOffsetMatrix+0x375>
   4a5f1:	jmp    4a325 <ParseQOffsetMatrix+0x95>
   4a5f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a600:	cmp    rdx,rdi
   4a603:	jbe    4a5a2 <ParseQOffsetMatrix+0x312>
   4a605:	add    rdi,0x1
   4a609:	cmp    BYTE PTR [rdi],0xa
   4a60c:	jne    4a600 <ParseQOffsetMatrix+0x370>
   4a60e:	jmp    4a5a2 <ParseQOffsetMatrix+0x312>
   4a610:	shl    rbx,0x7
   4a614:	lea    rdx,[rip+0x909c5]        # dafe0 <OffsetList8x8input>
   4a61b:	mov    DWORD PTR [rsp+0x18],0x40
   4a623:	add    rdx,rbx
   4a626:	mov    QWORD PTR [rsp+0x8],rdx
   4a62b:	lea    rdx,[rip+0x3ea6e]        # 890a0 <offset8x8_check>
   4a632:	mov    DWORD PTR [rdx+rax*4],0x1
   4a639:	jmp    4a494 <ParseQOffsetMatrix+0x204>
   4a63e:	xchg   ax,ax
   4a640:	cmp    BYTE PTR [rax+0x1],0x0
   4a644:	je     4a458 <ParseQOffsetMatrix+0x1c8>
   4a64a:	jmp    4a398 <ParseQOffsetMatrix+0x108>
   4a64f:	nop
   4a650:	mov    r9,r14
   4a653:	mov    ecx,0x12c
   4a658:	mov    edx,0x1
   4a65d:	xor    eax,eax
   4a65f:	lea    r8,[rip+0x21792]        # 6bdf8 <maxpos+0xaf8>
   4a666:	mov    esi,0x12c
   4a66b:	lea    rdi,[rip+0x6a92e]        # b4fa0 <errortext>
   4a672:	call   42c0 <__snprintf_chk@plt>
   4a677:	mov    esi,0x12c
   4a67c:	lea    rdi,[rip+0x6a91d]        # b4fa0 <errortext>
   4a683:	call   19180 <error>
   4a688:	jmp    4a381 <ParseQOffsetMatrix+0xf1>
   4a68d:	mov    rdi,rax
   4a690:	mov    r8d,0xffffffff
   4a696:	jmp    4a320 <ParseQOffsetMatrix+0x90>
   4a69b:	xor    esi,esi
   4a69d:	jmp    4a5ca <ParseQOffsetMatrix+0x33a>
   4a6a2:	call   4390 <__stack_chk_fail@plt>
   4a6a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000004a6b0 <Init_QOffsetMatrix>:
   4a6b0:	endbr64 
   4a6b4:	mov    rdx,QWORD PTR [rip+0x3defd]        # 885b8 <input>
   4a6bb:	mov    eax,DWORD PTR [rdx+0xe00]
   4a6c1:	test   eax,eax
   4a6c3:	jne    4a6d0 <Init_QOffsetMatrix+0x20>
   4a6c5:	ret    
   4a6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a6d0:	push   rbp
   4a6d1:	add    rdx,0xd38
   4a6d8:	mov    edi,0x1
   4a6dd:	xor    eax,eax
   4a6df:	lea    rsi,[rip+0x2c992]        # 77078 <MatrixType4x4+0x78>
   4a6e6:	call   4490 <__printf_chk@plt>
   4a6eb:	mov    rax,QWORD PTR [rip+0x3dec6]        # 885b8 <input>
   4a6f2:	xor    esi,esi
   4a6f4:	lea    rdi,[rax+0xd38]
   4a6fb:	call   f5b0 <GetConfigFileContent>
   4a700:	mov    rbp,rax
   4a703:	test   rax,rax
   4a706:	je     4a730 <Init_QOffsetMatrix+0x80>
   4a708:	mov    rdi,rax
   4a70b:	call   4380 <strlen@plt>
   4a710:	mov    rdi,rbp
   4a713:	mov    rsi,rax
   4a716:	call   4a290 <ParseQOffsetMatrix>
   4a71b:	mov    edi,0xa
   4a720:	call   42e0 <putchar@plt>
   4a725:	mov    rdi,rbp
   4a728:	pop    rbp
   4a729:	jmp    42d0 <free@plt>
   4a72e:	xchg   ax,ax
   4a730:	lea    rdx,[rip+0x6a869]        # b4fa0 <errortext>
   4a737:	lea    rsi,[rip+0x2c64a]        # 76d88 <ZZ_SCAN+0x588>
   4a73e:	mov    edi,0x1
   4a743:	xor    eax,eax
   4a745:	call   4490 <__printf_chk@plt>
   4a74a:	mov    rax,QWORD PTR [rip+0x3de67]        # 885b8 <input>
   4a751:	mov    DWORD PTR [rax+0xe00],0x0
   4a75b:	jmp    4a71b <Init_QOffsetMatrix+0x6b>
   4a75d:	nop    DWORD PTR [rax]

000000000004a760 <CalculateOffsetParam>:
   4a760:	endbr64 
   4a764:	mov    rax,QWORD PTR [rip+0x3de45]        # 885b0 <img>
   4a76b:	push   r15
   4a76d:	push   r14
   4a76f:	push   r13
   4a771:	push   r12
   4a773:	push   rbp
   4a774:	push   rbx
   4a775:	mov    r13d,DWORD PTR [rax+0x18]
   4a779:	mov    rax,QWORD PTR [rip+0x3de38]        # 885b8 <input>
   4a780:	mov    eax,DWORD PTR [rax+0xe00]
   4a786:	test   eax,eax
   4a788:	je     4a8a2 <CalculateOffsetParam+0x142>
   4a78e:	mov    QWORD PTR [rsp-0x18],0x0
   4a797:	lea    r10,[rip+0x921a2]        # dc940 <LevelOffset4x4Chroma_Intra>
   4a79e:	mov    ecx,0x5
   4a7a3:	lea    rdi,[rip+0x909b6]        # db160 <LevelOffset4x4Chroma_Inter>
   4a7aa:	mov    r15d,0x10
   4a7b0:	lea    r11,[rip+0x91149]        # db900 <LevelOffset4x4Luma_Intra>
   4a7b7:	lea    r9,[r10+0x340]
   4a7be:	lea    r8,[rip+0x8f53b]        # d9d00 <LevelOffset4x4Luma_Inter>
   4a7c5:	lea    r14,[rdi+0x340]
   4a7cc:	nop    DWORD PTR [rax+0x0]
   4a7d0:	lea    r12,[rip+0x91009]        # db7e0 <OffsetList4x4input>
   4a7d7:	mov    rbx,r15
   4a7da:	xor    ebp,ebp
   4a7dc:	lea    rax,[rbx-0x10]
   4a7e0:	mov    rdx,r12
   4a7e3:	cmp    r13d,0x2
   4a7e7:	je     4a880 <CalculateOffsetParam+0x120>
   4a7ed:	movsx  esi,WORD PTR [rdx+0x60]
   4a7f1:	shl    esi,cl
   4a7f3:	mov    DWORD PTR [r11+rax*1],esi
   4a7f7:	movsx  esi,WORD PTR [rdx+0x80]
   4a7fe:	shl    esi,cl
   4a800:	mov    DWORD PTR [r10+rax*1],esi
   4a804:	movsx  esi,WORD PTR [rdx+0xa0]
   4a80b:	shl    esi,cl
   4a80d:	mov    DWORD PTR [r9+rax*1],esi
   4a811:	movsx  esi,WORD PTR [rdx+0xc0]
   4a818:	add    rdx,0x8
   4a81c:	shl    esi,cl
   4a81e:	mov    DWORD PTR [r8+rax*1],esi
   4a822:	movsx  esi,WORD PTR [rdx+0xd8]
   4a829:	shl    esi,cl
   4a82b:	mov    DWORD PTR [rdi+rax*1],esi
   4a82e:	movsx  esi,WORD PTR [rdx+0xf8]
   4a835:	shl    esi,cl
   4a837:	mov    DWORD PTR [r14+rax*1],esi
   4a83b:	add    rax,0x4
   4a83f:	cmp    rax,rbx
   4a842:	jne    4a7e3 <CalculateOffsetParam+0x83>
   4a844:	add    ebp,0x1
   4a847:	lea    rbx,[rax+0x10]
   4a84b:	add    r12,0x2
   4a84f:	cmp    ebp,0x4
   4a852:	jne    4a7dc <CalculateOffsetParam+0x7c>
   4a854:	add    QWORD PTR [rsp-0x18],0x4
   4a85a:	mov    rax,QWORD PTR [rsp-0x18]
   4a85f:	add    ecx,0x1
   4a862:	add    r15,0x40
   4a866:	cmp    rax,0x34
   4a86a:	jne    4a7d0 <CalculateOffsetParam+0x70>
   4a870:	pop    rbx
   4a871:	pop    rbp
   4a872:	pop    r12
   4a874:	pop    r13
   4a876:	pop    r14
   4a878:	pop    r15
   4a87a:	ret    
   4a87b:	nop    DWORD PTR [rax+rax*1+0x0]
   4a880:	movsx  esi,WORD PTR [rdx]
   4a883:	shl    esi,cl
   4a885:	mov    DWORD PTR [r11+rax*1],esi
   4a889:	movsx  esi,WORD PTR [rdx+0x20]
   4a88d:	shl    esi,cl
   4a88f:	mov    DWORD PTR [r10+rax*1],esi
   4a893:	movsx  esi,WORD PTR [rdx+0x40]
   4a897:	shl    esi,cl
   4a899:	mov    DWORD PTR [r9+rax*1],esi
   4a89d:	jmp    4a811 <CalculateOffsetParam+0xb1>
   4a8a2:	mov    QWORD PTR [rsp-0x8],0x0
   4a8ab:	lea    r10,[rip+0x9208e]        # dc940 <LevelOffset4x4Chroma_Intra>
   4a8b2:	lea    rdi,[rip+0x908a7]        # db160 <LevelOffset4x4Chroma_Inter>
   4a8b9:	mov    ecx,0x5
   4a8be:	lea    r11,[rip+0x9103b]        # db900 <LevelOffset4x4Luma_Intra>
   4a8c5:	lea    r9,[r10+0x340]
   4a8cc:	lea    r8,[rip+0x8f42d]        # d9d00 <LevelOffset4x4Luma_Inter>
   4a8d3:	lea    r14,[rdi+0x340]
   4a8da:	nop    WORD PTR [rax+rax*1+0x0]
   4a8e0:	mov    rax,QWORD PTR [rsp-0x8]
   4a8e5:	mov    DWORD PTR [rsp-0x18],0x0
   4a8ed:	lea    rbx,[rip+0x2c96c]        # 77260 <Offset_inter_default>
   4a8f4:	lea    r12,[rip+0x2c985]        # 77280 <Offset_intra_default_intra>
   4a8fb:	lea    rbp,[rip+0x2c95e]        # 77260 <Offset_inter_default>
   4a902:	mov    edx,0xab
   4a907:	shl    rax,0x4
   4a90b:	mov    QWORD PTR [rsp-0x10],rax
   4a910:	mov    rax,QWORD PTR [rsp-0x10]
   4a915:	xor    esi,esi
   4a917:	cmp    r13d,0x2
   4a91b:	je     4a957 <CalculateOffsetParam+0x1f7>
   4a91d:	movsx  r15d,WORD PTR [rbp+rsi*1+0x0]
   4a923:	shl    r15d,cl
   4a926:	mov    DWORD PTR [r10+rax*1],r15d
   4a92a:	mov    DWORD PTR [r11+rax*1],r15d
   4a92e:	mov    DWORD PTR [r9+rax*1],r15d
   4a932:	shl    edx,cl
   4a934:	add    rsi,0x8
   4a938:	mov    DWORD PTR [rdi+rax*1],edx
   4a93b:	mov    DWORD PTR [r8+rax*1],edx
   4a93f:	mov    DWORD PTR [r14+rax*1],edx
   4a943:	add    rax,0x4
   4a947:	cmp    rsi,0x20
   4a94b:	je     4a970 <CalculateOffsetParam+0x210>
   4a94d:	movsx  edx,WORD PTR [rbx+rsi*1]
   4a951:	cmp    r13d,0x2
   4a955:	jne    4a91d <CalculateOffsetParam+0x1bd>
   4a957:	movsx  r15d,WORD PTR [r12+rsi*1]
   4a95c:	shl    r15d,cl
   4a95f:	mov    DWORD PTR [r10+rax*1],r15d
   4a963:	mov    DWORD PTR [r11+rax*1],r15d
   4a967:	mov    DWORD PTR [r9+rax*1],r15d
   4a96b:	jmp    4a932 <CalculateOffsetParam+0x1d2>
   4a96d:	nop    DWORD PTR [rax]
   4a970:	add    DWORD PTR [rsp-0x18],0x1
   4a975:	mov    eax,DWORD PTR [rsp-0x18]
   4a979:	add    rbx,0x2
   4a97d:	add    r12,0x2
   4a981:	add    QWORD PTR [rsp-0x10],0x10
   4a987:	add    rbp,0x2
   4a98b:	cmp    eax,0x4
   4a98e:	je     4a9a0 <CalculateOffsetParam+0x240>
   4a990:	movsx  edx,WORD PTR [rbx]
   4a993:	jmp    4a910 <CalculateOffsetParam+0x1b0>
   4a998:	nop    DWORD PTR [rax+rax*1+0x0]
   4a9a0:	add    QWORD PTR [rsp-0x8],0x4
   4a9a6:	mov    rax,QWORD PTR [rsp-0x8]
   4a9ab:	add    ecx,0x1
   4a9ae:	cmp    rax,0x34
   4a9b2:	jne    4a8e0 <CalculateOffsetParam+0x180>
   4a9b8:	pop    rbx
   4a9b9:	pop    rbp
   4a9ba:	pop    r12
   4a9bc:	pop    r13
   4a9be:	pop    r14
   4a9c0:	pop    r15
   4a9c2:	ret    
   4a9c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4a9ce:	xchg   ax,ax

000000000004a9d0 <CalculateOffset8Param>:
   4a9d0:	endbr64 
   4a9d4:	mov    rax,QWORD PTR [rip+0x3dbd5]        # 885b0 <img>
   4a9db:	push   r14
   4a9dd:	push   r13
   4a9df:	push   r12
   4a9e1:	push   rbp
   4a9e2:	push   rbx
   4a9e3:	mov    esi,DWORD PTR [rax+0x18]
   4a9e6:	mov    rax,QWORD PTR [rip+0x3dbcb]        # 885b8 <input>
   4a9ed:	mov    eax,DWORD PTR [rax+0xe00]
   4a9f3:	test   eax,eax
   4a9f5:	je     4aaae <CalculateOffset8Param+0xde>
   4a9fb:	lea    rbp,[rip+0x8f8de]        # da2e0 <LevelOffset8x8Luma_Intra>
   4aa02:	lea    rbx,[rip+0x91237]        # dbc40 <LevelOffset8x8Luma_Inter>
   4aa09:	mov    ecx,0x6
   4aa0e:	xor    r11d,r11d
   4aa11:	nop    DWORD PTR [rax+0x0]
   4aa18:	lea    rdi,[rip+0x905c1]        # dafe0 <OffsetList8x8input>
   4aa1f:	mov    r9,rbx
   4aa22:	mov    r8,rbp
   4aa25:	xor    r10d,r10d
   4aa28:	nop    DWORD PTR [rax+rax*1+0x0]
   4aa30:	xor    eax,eax
   4aa32:	jmp    4aa5e <CalculateOffset8Param+0x8e>
   4aa34:	nop    DWORD PTR [rax+0x0]
   4aa38:	movsx  edx,WORD PTR [rdi+rax*4+0x80]
   4aa40:	shl    edx,cl
   4aa42:	mov    DWORD PTR [r8+rax*1],edx
   4aa46:	movsx  edx,WORD PTR [rdi+rax*4+0x100]
   4aa4e:	shl    edx,cl
   4aa50:	mov    DWORD PTR [r9+rax*1],edx
   4aa54:	add    rax,0x4
   4aa58:	cmp    rax,0x20
   4aa5c:	je     4aa70 <CalculateOffset8Param+0xa0>
   4aa5e:	cmp    esi,0x2
   4aa61:	jne    4aa38 <CalculateOffset8Param+0x68>
   4aa63:	movsx  edx,WORD PTR [rdi+rax*4]
   4aa67:	shl    edx,cl
   4aa69:	jmp    4aa42 <CalculateOffset8Param+0x72>
   4aa6b:	nop    DWORD PTR [rax+rax*1+0x0]
   4aa70:	add    r10d,0x1
   4aa74:	add    r8,0x20
   4aa78:	add    rdi,0x2
   4aa7c:	add    r9,0x20
   4aa80:	cmp    r10d,0x8
   4aa84:	jne    4aa30 <CalculateOffset8Param+0x60>
   4aa86:	add    r11,0x8
   4aa8a:	add    ecx,0x1
   4aa8d:	add    rbp,0x100
   4aa94:	add    rbx,0x100
   4aa9b:	cmp    r11,0x68
   4aa9f:	jne    4aa18 <CalculateOffset8Param+0x48>
   4aaa5:	pop    rbx
   4aaa6:	pop    rbp
   4aaa7:	pop    r12
   4aaa9:	pop    r13
   4aaab:	pop    r14
   4aaad:	ret    
   4aaae:	lea    r13,[rip+0x8f82b]        # da2e0 <LevelOffset8x8Luma_Intra>
   4aab5:	lea    r12,[rip+0x91184]        # dbc40 <LevelOffset8x8Luma_Inter>
   4aabc:	mov    ecx,0x6
   4aac1:	xor    ebp,ebp
   4aac3:	nop    DWORD PTR [rax+rax*1+0x0]
   4aac8:	lea    r9,[rip+0x2c691]        # 77160 <Offset8_inter_default>
   4aacf:	mov    r8,r12
   4aad2:	mov    rdi,r13
   4aad5:	xor    ebx,ebx
   4aad7:	lea    r11,[rip+0x2c702]        # 771e0 <Offset8_intra_default_intra>
   4aade:	lea    r10,[rip+0x2c67b]        # 77160 <Offset8_inter_default>
   4aae5:	mov    edx,0xab
   4aaea:	nop    WORD PTR [rax+rax*1+0x0]
   4aaf0:	xor    eax,eax
   4aaf2:	jmp    4ab19 <CalculateOffset8Param+0x149>
   4aaf4:	nop    DWORD PTR [rax+0x0]
   4aaf8:	movsx  r14d,WORD PTR [r10+rax*4]
   4aafd:	shl    r14d,cl
   4ab00:	shl    edx,cl
   4ab02:	mov    DWORD PTR [rdi+rax*1],r14d
   4ab06:	mov    DWORD PTR [r8+rax*1],edx
   4ab0a:	add    rax,0x4
   4ab0e:	cmp    rax,0x20
   4ab12:	je     4ab30 <CalculateOffset8Param+0x160>
   4ab14:	movsx  edx,WORD PTR [r9+rax*4]
   4ab19:	cmp    esi,0x2
   4ab1c:	jne    4aaf8 <CalculateOffset8Param+0x128>
   4ab1e:	movsx  r14d,WORD PTR [r11+rax*4]
   4ab23:	shl    r14d,cl
   4ab26:	jmp    4ab00 <CalculateOffset8Param+0x130>
   4ab28:	nop    DWORD PTR [rax+rax*1+0x0]
   4ab30:	add    ebx,0x1
   4ab33:	add    r9,0x2
   4ab37:	add    rdi,0x20
   4ab3b:	add    r8,0x20
   4ab3f:	add    r11,0x2
   4ab43:	add    r10,0x2
   4ab47:	cmp    ebx,0x8
   4ab4a:	je     4ab58 <CalculateOffset8Param+0x188>
   4ab4c:	movsx  edx,WORD PTR [r9]
   4ab50:	jmp    4aaf0 <CalculateOffset8Param+0x120>
   4ab52:	nop    WORD PTR [rax+rax*1+0x0]
   4ab58:	add    rbp,0x8
   4ab5c:	add    ecx,0x1
   4ab5f:	add    r13,0x100
   4ab66:	add    r12,0x100
   4ab6d:	cmp    rbp,0x68
   4ab71:	jne    4aac8 <CalculateOffset8Param+0xf8>
   4ab77:	pop    rbx
   4ab78:	pop    rbp
   4ab79:	pop    r12
   4ab7b:	pop    r13
   4ab7d:	pop    r14
   4ab7f:	ret    

000000000004ab80 <rc_alloc>:
   4ab80:	endbr64 
   4ab84:	push   rbp
   4ab85:	mov    esi,0x8
   4ab8a:	push   rbx
   4ab8b:	sub    rsp,0x8
   4ab8f:	mov    rbx,QWORD PTR [rip+0x3da1a]        # 885b0 <img>
   4ab96:	mov    edi,DWORD PTR [rbx+0x11b28]
   4ab9c:	mov    rbp,rdi
   4ab9f:	call   4400 <calloc@plt>
   4aba4:	mov    QWORD PTR [rbx+0x11b88],rax
   4abab:	test   rax,rax
   4abae:	je     4ac3b <rc_alloc+0xbb>
   4abb4:	mov    rcx,QWORD PTR [rip+0x3d9fd]        # 885b8 <input>
   4abbb:	mov    eax,ebp
   4abbd:	xor    edx,edx
   4abbf:	mov    esi,0x8
   4abc4:	div    DWORD PTR [rcx+0xcb0]
   4abca:	mov    rdi,rax
   4abcd:	mov    rbp,rax
   4abd0:	call   4400 <calloc@plt>
   4abd5:	mov    QWORD PTR [rip+0x92d5c],rax        # dd938 <BUPFMAD>
   4abdc:	test   rax,rax
   4abdf:	je     4acc9 <rc_alloc+0x149>
   4abe5:	mov    esi,0x8
   4abea:	mov    rdi,rbp
   4abed:	call   4400 <calloc@plt>
   4abf2:	mov    QWORD PTR [rip+0x932a7],rax        # ddea0 <BUCFMAD>
   4abf9:	test   rax,rax
   4abfc:	je     4ac97 <rc_alloc+0x117>
   4ac02:	mov    esi,0x8
   4ac07:	mov    rdi,rbp
   4ac0a:	call   4400 <calloc@plt>
   4ac0f:	mov    QWORD PTR [rip+0x92dd2],rax        # dd9e8 <FCBUCFMAD>
   4ac16:	test   rax,rax
   4ac19:	je     4ac68 <rc_alloc+0xe8>
   4ac1b:	mov    esi,0x8
   4ac20:	mov    rdi,rbp
   4ac23:	call   4400 <calloc@plt>
   4ac28:	mov    QWORD PTR [rip+0x92599],rax        # dd1c8 <FCBUPFMAD>
   4ac2f:	test   rax,rax
   4ac32:	je     4ac59 <rc_alloc+0xd9>
   4ac34:	add    rsp,0x8
   4ac38:	pop    rbx
   4ac39:	pop    rbp
   4ac3a:	ret    
   4ac3b:	lea    rdi,[rip+0x2c796]        # 773d8 <OffsetType4x4+0xd8>
   4ac42:	call   38210 <no_mem_exit>
   4ac47:	mov    rax,QWORD PTR [rip+0x3d962]        # 885b0 <img>
   4ac4e:	mov    ebp,DWORD PTR [rax+0x11b28]
   4ac54:	jmp    4abb4 <rc_alloc+0x34>
   4ac59:	pop    rax
   4ac5a:	lea    rdi,[rip+0x2c7d5]        # 77436 <OffsetType4x4+0x136>
   4ac61:	pop    rbx
   4ac62:	pop    rbp
   4ac63:	jmp    38210 <no_mem_exit>
   4ac68:	lea    rdi,[rip+0x2c7ae]        # 7741d <OffsetType4x4+0x11d>
   4ac6f:	call   38210 <no_mem_exit>
   4ac74:	mov    rax,QWORD PTR [rip+0x3d935]        # 885b0 <img>
   4ac7b:	mov    rcx,QWORD PTR [rip+0x3d936]        # 885b8 <input>
   4ac82:	mov    edx,DWORD PTR [rax+0x11b28]
   4ac88:	mov    eax,edx
   4ac8a:	xor    edx,edx
   4ac8c:	div    DWORD PTR [rcx+0xcb0]
   4ac92:	mov    rbp,rax
   4ac95:	jmp    4ac1b <rc_alloc+0x9b>
   4ac97:	lea    rdi,[rip+0x2c768]        # 77406 <OffsetType4x4+0x106>
   4ac9e:	call   38210 <no_mem_exit>
   4aca3:	mov    rax,QWORD PTR [rip+0x3d906]        # 885b0 <img>
   4acaa:	mov    rcx,QWORD PTR [rip+0x3d907]        # 885b8 <input>
   4acb1:	mov    edx,DWORD PTR [rax+0x11b28]
   4acb7:	mov    eax,edx
   4acb9:	xor    edx,edx
   4acbb:	div    DWORD PTR [rcx+0xcb0]
   4acc1:	mov    rbp,rax
   4acc4:	jmp    4ac02 <rc_alloc+0x82>
   4acc9:	lea    rdi,[rip+0x2c71f]        # 773ef <OffsetType4x4+0xef>
   4acd0:	call   38210 <no_mem_exit>
   4acd5:	mov    rax,QWORD PTR [rip+0x3d8d4]        # 885b0 <img>
   4acdc:	mov    rcx,QWORD PTR [rip+0x3d8d5]        # 885b8 <input>
   4ace3:	mov    edx,DWORD PTR [rax+0x11b28]
   4ace9:	mov    eax,edx
   4aceb:	xor    edx,edx
   4aced:	div    DWORD PTR [rcx+0xcb0]
   4acf3:	mov    rbp,rax
   4acf6:	jmp    4abe5 <rc_alloc+0x65>
   4acfb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004ad00 <rc_free>:
   4ad00:	endbr64 
   4ad04:	sub    rsp,0x8
   4ad08:	mov    rax,QWORD PTR [rip+0x3d8a1]        # 885b0 <img>
   4ad0f:	mov    rdi,QWORD PTR [rax+0x11b88]
   4ad16:	test   rdi,rdi
   4ad19:	je     4ad32 <rc_free+0x32>
   4ad1b:	call   42d0 <free@plt>
   4ad20:	mov    rax,QWORD PTR [rip+0x3d889]        # 885b0 <img>
   4ad27:	mov    QWORD PTR [rax+0x11b88],0x0
   4ad32:	mov    rdi,QWORD PTR [rip+0x92bff]        # dd938 <BUPFMAD>
   4ad39:	test   rdi,rdi
   4ad3c:	je     4ad4e <rc_free+0x4e>
   4ad3e:	call   42d0 <free@plt>
   4ad43:	mov    QWORD PTR [rip+0x92bea],0x0        # dd938 <BUPFMAD>
   4ad4e:	mov    rdi,QWORD PTR [rip+0x9314b]        # ddea0 <BUCFMAD>
   4ad55:	test   rdi,rdi
   4ad58:	je     4ad6a <rc_free+0x6a>
   4ad5a:	call   42d0 <free@plt>
   4ad5f:	mov    QWORD PTR [rip+0x93136],0x0        # ddea0 <BUCFMAD>
   4ad6a:	mov    rdi,QWORD PTR [rip+0x92c77]        # dd9e8 <FCBUCFMAD>
   4ad71:	test   rdi,rdi
   4ad74:	je     4ad86 <rc_free+0x86>
   4ad76:	call   42d0 <free@plt>
   4ad7b:	mov    QWORD PTR [rip+0x92c62],0x0        # dd9e8 <FCBUCFMAD>
   4ad86:	mov    rdi,QWORD PTR [rip+0x9243b]        # dd1c8 <FCBUPFMAD>
   4ad8d:	test   rdi,rdi
   4ad90:	je     4ada2 <rc_free+0xa2>
   4ad92:	call   42d0 <free@plt>
   4ad97:	mov    QWORD PTR [rip+0x92426],0x0        # dd1c8 <FCBUPFMAD>
   4ada2:	add    rsp,0x8
   4ada6:	ret    
   4ada7:	nop    WORD PTR [rax+rax*1+0x0]

000000000004adb0 <rc_init_seq>:
   4adb0:	endbr64 
   4adb4:	mov    r10,QWORD PTR [rip+0x3d7fd]        # 885b8 <input>
   4adbb:	pxor   xmm0,xmm0
   4adbf:	pxor   xmm1,xmm1
   4adc3:	pxor   xmm2,xmm2
   4adc7:	mov    r9,QWORD PTR [rip+0x3d7e2]        # 885b0 <img>
   4adce:	mov    DWORD PTR [rip+0x92598],0x0        # dd370 <Xp>
   4add8:	mov    ecx,DWORD PTR [r10+0x4d4]
   4addf:	cvtsi2sd xmm2,DWORD PTR [r10+0xca8]
   4ade8:	mov    esi,DWORD PTR [r10+0xcb0]
   4adef:	mov    DWORD PTR [rip+0x9257b],0x0        # dd374 <Xb>
   4adf9:	mov    r11d,DWORD PTR [r9+0x3c]
   4adfd:	mov    r8d,DWORD PTR [r9+0x34]
   4ae01:	lea    eax,[rcx+0x1]
   4ae04:	cvtsi2ss xmm0,eax
   4ae08:	mov    eax,DWORD PTR [r10+0x14]
   4ae0c:	mulss  xmm0,DWORD PTR [r9+0x30]
   4ae12:	mov    edx,r11d
   4ae15:	imul   edx,r8d
   4ae19:	movsd  QWORD PTR [rip+0x921af],xmm2        # dcfd0 <bit_rate>
   4ae21:	add    eax,0x1
   4ae24:	movsd  QWORD PTR [rip+0x926ec],xmm2        # dd518 <PreviousBit_Rate>
   4ae2c:	cvtsi2ss xmm1,eax
   4ae30:	test   edx,edx
   4ae32:	lea    eax,[rdx+0xff]
   4ae38:	cmovns eax,edx
   4ae3b:	divss  xmm0,xmm1
   4ae3f:	sar    eax,0x8
   4ae42:	mov    DWORD PTR [r9+0x11ba0],eax
   4ae49:	cvtss2sd xmm0,xmm0
   4ae4d:	movsd  QWORD PTR [rip+0x92513],xmm0        # dd368 <frame_rate>
   4ae55:	cmp    eax,esi
   4ae57:	jge    4b070 <rc_init_seq+0x2c0>
   4ae5d:	mov    DWORD PTR [r10+0xcb0],eax
   4ae64:	mov    eax,DWORD PTR [rip+0x92ab6]        # dd920 <TotalNumberofBasicUnit>
   4ae6a:	movsd  xmm1,QWORD PTR [rip+0x2c66e]        # 774e0 <THETA+0x40>
   4ae72:	mov    rdi,QWORD PTR [rip+0x1fc17]        # 6aa90 <QP_SCALE_CR+0x50>
   4ae79:	mov    QWORD PTR [rip+0x925c4],0x0        # dd448 <CurrentBufferFullness>
   4ae84:	mov    QWORD PTR [rip+0x92b51],0x0        # dd9e0 <GOPTargetBufferLevel>
   4ae8f:	mulsd  xmm1,xmm2
   4ae93:	mov    QWORD PTR [rip+0x92b5e],rdi        # dd9f8 <MINVALUE>
   4ae9a:	mov    DWORD PTR [rip+0x92ff8],0x0        # dde9c <m_windowSize>
   4aea4:	mov    DWORD PTR [rip+0x92fda],0x0        # dde88 <MADm_windowSize>
   4aeae:	mov    QWORD PTR [r9+0x11b70],0x0
   4aeb9:	mov    DWORD PTR [r9+0x11b78],0x0
   4aec4:	movsd  QWORD PTR [rip+0x92634],xmm1        # dd500 <BufferSize>
   4aecc:	mulsd  xmm1,QWORD PTR [rip+0x2c61c]        # 774f0 <THETA+0x50>
   4aed4:	mov    DWORD PTR [rip+0x3e202],0x0        # 890e0 <R>
   4aede:	movsd  QWORD PTR [rip+0x9262a],xmm1        # dd510 <InitialDelayOffset>
   4aee6:	test   ecx,ecx
   4aee8:	jle    4b0a8 <rc_init_seq+0x2f8>
   4aeee:	mov    rsi,QWORD PTR [rip+0x2c603]        # 774f8 <THETA+0x58>
   4aef5:	mov    rcx,QWORD PTR [rip+0x2c604]        # 77500 <THETA+0x60>
   4aefc:	mov    QWORD PTR [rip+0x9306d],rsi        # ddf70 <GAMMAP>
   4af03:	mov    QWORD PTR [rip+0x922c6],rcx        # dd1d0 <BETAP>
   4af0a:	mov    rdi,QWORD PTR [rip+0x278b7]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4af11:	xor    edx,edx
   4af13:	mov    DWORD PTR [rip+0x92a3f],0x0        # dd95c <PPreHeader>
   4af1d:	lea    rsi,[rip+0x9253c]        # dd460 <Pm_rgRp>
   4af24:	movsd  QWORD PTR [rip+0x93054],xmm2        # ddf80 <Pm_X1>
   4af2c:	lea    rcx,[rip+0x920ad]        # dcfe0 <PPictureMAD>
   4af33:	mov    QWORD PTR [rip+0x92a02],0x0        # dd940 <Pm_X2>
   4af3e:	mov    QWORD PTR [rip+0x92a57],0x0        # dd9a0 <PMADPictureC2>
   4af49:	mov    QWORD PTR [rip+0x92288],rdi        # dd1d8 <PMADPictureC1>
   4af50:	lea    rdi,[rip+0x92369]        # dd2c0 <Pm_rgQp>
   4af57:	nop    WORD PTR [rax+rax*1+0x0]
   4af60:	mov    QWORD PTR [rdi+rdx*1],0x0
   4af68:	mov    QWORD PTR [rsi+rdx*1],0x0
   4af70:	mov    QWORD PTR [rcx+rdx*1],0x0
   4af78:	add    rdx,0x8
   4af7c:	cmp    rdx,0xa0
   4af83:	jne    4af60 <rc_init_seq+0x1b0>
   4af85:	mov    QWORD PTR [rip+0x920f0],0x0        # dd080 <PPictureMAD+0xa0>
   4af90:	cmp    eax,0x9
   4af93:	mov    DWORD PTR [rip+0x92987],0x2        # dd924 <PDuantQp>
   4af9d:	setl   al
   4afa0:	mov    DWORD PTR [rip+0x923d2],0x0        # dd37c <PAveHeaderBits1>
   4afaa:	movzx  eax,al
   4afad:	mov    DWORD PTR [rip+0x92a1d],0x0        # dd9d4 <PAveHeaderBits3>
   4afb7:	add    eax,0x1
   4afba:	test   r8d,r8d
   4afbd:	mov    DWORD PTR [rip+0x929b9],eax        # dd97c <DDquant>
   4afc3:	lea    eax,[r8+0xf]
   4afc7:	mov    DWORD PTR [r9+0x11b98],0x0
   4afd2:	cmovns eax,r8d
   4afd6:	mov    DWORD PTR [rip+0x92eb8],0x33        # dde98 <RC_MAX_QUANT>
   4afe0:	mov    DWORD PTR [rip+0x929aa],0x0        # dd994 <RC_MIN_QUANT>
   4afea:	sar    eax,0x4
   4afed:	mov    DWORD PTR [rip+0x92935],eax        # dd928 <MBPerRow>
   4aff3:	cmp    r8d,0xb0
   4affa:	je     4b0c8 <rc_init_seq+0x318>
   4b000:	cmp    r8d,0x160
   4b007:	je     4b088 <rc_init_seq+0x2d8>
   4b009:	movsd  xmm5,QWORD PTR [rip+0x2c497]        # 774a8 <THETA+0x8>
   4b011:	movsd  xmm4,QWORD PTR [rip+0x2c497]        # 774b0 <THETA+0x10>
   4b019:	movsd  xmm3,QWORD PTR [rip+0x2c497]        # 774b8 <THETA+0x18>
   4b021:	mov    eax,DWORD PTR [r10+0xcac]
   4b028:	test   eax,eax
   4b02a:	jne    4b06b <rc_init_seq+0x2bb>
   4b02c:	pxor   xmm1,xmm1
   4b030:	mov    eax,0x23
   4b035:	cvtsi2sd xmm1,r8d
   4b03a:	mulsd  xmm0,xmm1
   4b03e:	pxor   xmm1,xmm1
   4b042:	cvtsi2sd xmm1,r11d
   4b047:	mulsd  xmm0,xmm1
   4b04b:	divsd  xmm2,xmm0
   4b04f:	comisd xmm3,xmm2
   4b053:	jae    4b064 <rc_init_seq+0x2b4>
   4b055:	comisd xmm4,xmm2
   4b059:	mov    eax,0x19
   4b05e:	jb     4b0e5 <rc_init_seq+0x335>
   4b064:	mov    DWORD PTR [r10+0xcac],eax
   4b06b:	ret    
   4b06c:	nop    DWORD PTR [rax+0x0]
   4b070:	jle    4b0fd <rc_init_seq+0x34d>
   4b076:	cdq    
   4b077:	idiv   esi
   4b079:	mov    DWORD PTR [rip+0x928a1],eax        # dd920 <TotalNumberofBasicUnit>
   4b07f:	jmp    4ae6a <rc_init_seq+0xba>
   4b084:	nop    DWORD PTR [rax+0x0]
   4b088:	movsd  xmm5,QWORD PTR [rip+0x2c440]        # 774d0 <THETA+0x30>
   4b090:	movsd  xmm4,QWORD PTR [rip+0x2c420]        # 774b8 <THETA+0x18>
   4b098:	movsd  xmm3,QWORD PTR [rip+0x2c438]        # 774d8 <THETA+0x38>
   4b0a0:	jmp    4b021 <rc_init_seq+0x271>
   4b0a5:	nop    DWORD PTR [rax]
   4b0a8:	movsd  xmm1,QWORD PTR [rip+0x27da8]        # 72e58 <quant_coef+0x198>
   4b0b0:	movsd  QWORD PTR [rip+0x92eb8],xmm1        # ddf70 <GAMMAP>
   4b0b8:	movsd  QWORD PTR [rip+0x92110],xmm1        # dd1d0 <BETAP>
   4b0c0:	jmp    4af0a <rc_init_seq+0x15a>
   4b0c5:	nop    DWORD PTR [rax]
   4b0c8:	movsd  xmm5,QWORD PTR [rip+0x2c3e8]        # 774b8 <THETA+0x18>
   4b0d0:	movsd  xmm4,QWORD PTR [rip+0x2c3e8]        # 774c0 <THETA+0x20>
   4b0d8:	movsd  xmm3,QWORD PTR [rip+0x2c3e8]        # 774c8 <THETA+0x28>
   4b0e0:	jmp    4b021 <rc_init_seq+0x271>
   4b0e5:	comisd xmm5,xmm2
   4b0e9:	sbb    eax,eax
   4b0eb:	and    eax,0xfffffff6
   4b0ee:	add    eax,0x14
   4b0f1:	mov    DWORD PTR [r10+0xcac],eax
   4b0f8:	jmp    4b06b <rc_init_seq+0x2bb>
   4b0fd:	mov    eax,DWORD PTR [rip+0x9281d]        # dd920 <TotalNumberofBasicUnit>
   4b103:	jmp    4ae6a <rc_init_seq+0xba>
   4b108:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004b110 <rc_init_GOP>:
   4b110:	endbr64 
   4b114:	movsd  xmm4,QWORD PTR [rip+0x91eb4]        # dcfd0 <bit_rate>
   4b11c:	movsd  xmm3,QWORD PTR [rip+0x92244]        # dd368 <frame_rate>
   4b124:	pxor   xmm1,xmm1
   4b128:	pxor   xmm0,xmm0
   4b12c:	mov    ecx,DWORD PTR [rip+0x3dfae]        # 890e0 <R>
   4b132:	movapd xmm2,xmm4
   4b136:	divsd  xmm2,xmm3
   4b13a:	cvtsi2sd xmm1,ecx
   4b13e:	addsd  xmm2,xmm1
   4b142:	addsd  xmm1,QWORD PTR [rip+0x923c6]        # dd510 <InitialDelayOffset>
   4b14a:	cvttsd2si rdx,xmm2
   4b14f:	movsd  xmm2,QWORD PTR [rip+0x28419]        # 73570 <quant_coef+0x8b0>
   4b157:	mov    QWORD PTR [rip+0x9285a],rdx        # dd9b8 <LowerBound>
   4b15e:	cvttsd2si rdx,xmm1
   4b163:	mov    QWORD PTR [rip+0x927fe],rdx        # dd968 <UpperBound1>
   4b16a:	lea    edx,[rdi+rsi*1+0x1]
   4b16e:	cvtsi2sd xmm0,edx
   4b172:	mulsd  xmm0,xmm4
   4b176:	movsd  xmm4,QWORD PTR [rip+0x283e2]        # 73560 <quant_coef+0x8a0>
   4b17e:	divsd  xmm0,xmm3
   4b182:	movsd  xmm3,QWORD PTR [rip+0x27cce]        # 72e58 <quant_coef+0x198>
   4b18a:	addsd  xmm0,xmm3
   4b18e:	movapd xmm1,xmm0
   4b192:	andpd  xmm1,xmm2
   4b196:	ucomisd xmm4,xmm1
   4b19a:	jbe    4b1cf <rc_init_GOP+0xbf>
   4b19c:	cvttsd2si rdx,xmm0
   4b1a1:	pxor   xmm1,xmm1
   4b1a5:	movsd  xmm5,QWORD PTR [rip+0x2761b]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4b1ad:	andnpd xmm2,xmm0
   4b1b1:	cvtsi2sd xmm1,rdx
   4b1b6:	movapd xmm4,xmm1
   4b1ba:	cmpnlesd xmm4,xmm0
   4b1bf:	andpd  xmm4,xmm5
   4b1c3:	subsd  xmm1,xmm4
   4b1c7:	movapd xmm0,xmm1
   4b1cb:	orpd   xmm0,xmm2
   4b1cf:	cvttsd2si eax,xmm0
   4b1d3:	mov    r8,QWORD PTR [rip+0x3d3d6]        # 885b0 <img>
   4b1da:	mov    DWORD PTR [rip+0x3def8],edi        # 890d8 <Np>
   4b1e0:	mov    DWORD PTR [rip+0x3deee],esi        # 890d4 <Nb>
   4b1e6:	mov    rdx,QWORD PTR [rip+0x3d3cb]        # 885b8 <input>
   4b1ed:	mov    DWORD PTR [rip+0x92799],0x0        # dd990 <GOPOverdue>
   4b1f7:	mov    DWORD PTR [r8+0x11ba4],0x1
   4b202:	add    eax,ecx
   4b204:	mov    DWORD PTR [rip+0x927ce],edi        # dd9d8 <TotalPFrame>
   4b20a:	mov    DWORD PTR [rip+0x3ded0],eax        # 890e0 <R>
   4b210:	mov    eax,DWORD PTR [r8+0x11b78]
   4b217:	add    eax,0x1
   4b21a:	mov    DWORD PTR [r8+0x11b78],eax
   4b221:	cmp    eax,0x1
   4b224:	je     4b348 <rc_init_GOP+0x238>
   4b22a:	cmp    DWORD PTR [rdx+0xb40],0x2
   4b231:	mov    eax,DWORD PTR [r8+0x11b7c]
   4b238:	je     4b24b <rc_init_GOP+0x13b>
   4b23a:	mov    edx,DWORD PTR [rdx+0xb44]
   4b240:	mov    r9d,DWORD PTR [rip+0x926e9]        # dd930 <QPLastPFrame>
   4b247:	test   edx,edx
   4b249:	je     4b271 <rc_init_GOP+0x161>
   4b24b:	cmp    DWORD PTR [r8+0x11b9c],0x1
   4b253:	je     4b368 <rc_init_GOP+0x258>
   4b259:	mov    r9d,DWORD PTR [rip+0x927a8]        # dda08 <FieldQPBuffer>
   4b260:	add    eax,r9d
   4b263:	mov    DWORD PTR [rip+0x926c6],r9d        # dd930 <QPLastPFrame>
   4b26a:	mov    DWORD PTR [r8+0x11b7c],eax
   4b271:	lea    edx,[rdi+rsi*1+0x1]
   4b275:	pxor   xmm1,xmm1
   4b279:	pxor   xmm0,xmm0
   4b27d:	mov    ecx,0x2
   4b282:	cvtsi2sd xmm1,edx
   4b286:	divsd  xmm1,QWORD PTR [rip+0x2c27a]        # 77508 <THETA+0x68>
   4b28e:	addsd  xmm1,xmm3
   4b292:	cvtsi2sd xmm0,eax
   4b296:	cvttsd2si edx,xmm1
   4b29a:	pxor   xmm1,xmm1
   4b29e:	cvtsi2sd xmm1,DWORD PTR [r8+0x11b80]
   4b2a7:	cmp    edx,0x2
   4b2aa:	divsd  xmm0,xmm1
   4b2ae:	cmovg  edx,ecx
   4b2b1:	sub    r9d,0x1
   4b2b5:	addsd  xmm0,xmm3
   4b2b9:	cvttsd2si eax,xmm0
   4b2bd:	sub    eax,edx
   4b2bf:	mov    edx,DWORD PTR [rip+0x92667]        # dd92c <QPLastGOP>
   4b2c5:	mov    ecx,eax
   4b2c7:	xor    eax,eax
   4b2c9:	cmp    ecx,r9d
   4b2cc:	lea    esi,[rdx-0x1]
   4b2cf:	setge  al
   4b2d2:	sub    ecx,eax
   4b2d4:	lea    eax,[rdx-0x2]
   4b2d7:	cmp    esi,ecx
   4b2d9:	cmovg  ecx,eax
   4b2dc:	mov    eax,DWORD PTR [rip+0x92bb6]        # dde98 <RC_MAX_QUANT>
   4b2e2:	add    edx,0x2
   4b2e5:	cmp    edx,eax
   4b2e7:	cmovle eax,edx
   4b2ea:	mov    edx,DWORD PTR [rip+0x926a4]        # dd994 <RC_MIN_QUANT>
   4b2f0:	cmp    eax,ecx
   4b2f2:	cmovg  eax,ecx
   4b2f5:	cmp    eax,edx
   4b2f7:	cmovl  eax,edx
   4b2fa:	mov    edx,DWORD PTR [rip+0x92664]        # dd964 <PreviousQp2>
   4b300:	mov    DWORD PTR [rip+0x926ba],eax        # dd9c0 <PAverageQp>
   4b306:	mov    DWORD PTR [rip+0x91e3c],eax        # dd148 <MyInitialQp>
   4b30c:	mov    DWORD PTR [rip+0x9261a],eax        # dd92c <QPLastGOP>
   4b312:	mov    DWORD PTR [rip+0x91f90],eax        # dd2a8 <Pm_Qp>
   4b318:	mov    DWORD PTR [rip+0x92c4a],eax        # ddf68 <PAveFrameQP>
   4b31e:	sub    eax,0x1
   4b321:	mov    DWORD PTR [rip+0x91d61],edx        # dd088 <PreviousQp1>
   4b327:	mov    DWORD PTR [rip+0x92637],eax        # dd964 <PreviousQp2>
   4b32d:	mov    QWORD PTR [r8+0x11b7c],0x0
   4b338:	mov    DWORD PTR [rip+0x92636],0x0        # dd978 <NumberofBFrames>
   4b342:	ret    
   4b343:	nop    DWORD PTR [rax+rax*1+0x0]
   4b348:	mov    eax,DWORD PTR [rdx+0xcac]
   4b34e:	lea    edx,[rax-0x1]
   4b351:	mov    DWORD PTR [rip+0x91df1],eax        # dd148 <MyInitialQp>
   4b357:	mov    DWORD PTR [rip+0x92607],edx        # dd964 <PreviousQp2>
   4b35d:	mov    DWORD PTR [rip+0x925c9],eax        # dd92c <QPLastGOP>
   4b363:	jmp    4b32d <rc_init_GOP+0x21d>
   4b365:	nop    DWORD PTR [rax]
   4b368:	mov    r9d,DWORD PTR [rip+0x925e9]        # dd958 <FrameQPBuffer>
   4b36f:	add    eax,r9d
   4b372:	mov    DWORD PTR [rip+0x925b7],r9d        # dd930 <QPLastPFrame>
   4b379:	mov    DWORD PTR [r8+0x11b7c],eax
   4b380:	jmp    4b271 <rc_init_GOP+0x161>
   4b385:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004b390 <rc_init_pict>:
   4b390:	endbr64 
   4b394:	push   r15
   4b396:	mov    ecx,edx
   4b398:	mov    r15d,edi
   4b39b:	push   r14
   4b39d:	push   r13
   4b39f:	push   r12
   4b3a1:	push   rbp
   4b3a2:	mov    ebp,esi
   4b3a4:	push   rbx
   4b3a5:	sub    rsp,0x28
   4b3a9:	mov    r12,QWORD PTR [rip+0x3d208]        # 885b8 <input>
   4b3b0:	mov    rbx,QWORD PTR [rip+0x3d1f9]        # 885b0 <img>
   4b3b7:	mov    r14d,DWORD PTR [r12+0xb44]
   4b3bf:	test   r14d,r14d
   4b3c2:	je     4b3d7 <rc_init_pict+0x47>
   4b3c4:	mov    eax,DWORD PTR [rbx+0x11ba0]
   4b3ca:	cdq    
   4b3cb:	idiv   DWORD PTR [rbx+0x11bac]
   4b3d1:	mov    DWORD PTR [rip+0x92549],eax        # dd920 <TotalNumberofBasicUnit>
   4b3d7:	cmp    DWORD PTR [r12+0xcb4],0x1
   4b3e0:	mov    DWORD PTR [rbx+0x11ba8],0x0
   4b3ea:	je     4b590 <rc_init_pict+0x200>
   4b3f0:	mov    eax,r15d
   4b3f3:	mov    r13d,DWORD PTR [rbx+0x18]
   4b3f7:	or     eax,ebp
   4b3f9:	je     4b520 <rc_init_pict+0x190>
   4b3ff:	mov    edx,DWORD PTR [rbx+0x11ba0]
   4b405:	mov    esi,DWORD PTR [rbx+0x11bac]
   4b40b:	test   ecx,ecx
   4b40d:	jne    4b480 <rc_init_pict+0xf0>
   4b40f:	mov    QWORD PTR [rbx+0x11b4c],0x0
   4b41a:	cmp    edx,esi
   4b41c:	jle    4b46f <rc_init_pict+0xdf>
   4b41e:	mov    ecx,DWORD PTR [rbx+0x11b98]
   4b424:	mov    DWORD PTR [rip+0x925a2],0x0        # dd9d0 <TotalFrameQP>
   4b42e:	mov    QWORD PTR [rbx+0x11b54],0x0
   4b439:	mov    eax,DWORD PTR [rip+0x924e1]        # dd920 <TotalNumberofBasicUnit>
   4b43f:	mov    QWORD PTR [rbx+0x11b60],0x0
   4b44a:	test   ecx,ecx
   4b44c:	je     4b5c0 <rc_init_pict+0x230>
   4b452:	mov    edx,eax
   4b454:	shr    edx,0x1f
   4b457:	add    edx,eax
   4b459:	sar    edx,1
   4b45b:	mov    DWORD PTR [rip+0x924e7],edx        # dd948 <NumberofBasicUnit>
   4b461:	test   r13d,r13d
   4b464:	jne    4b46f <rc_init_pict+0xdf>
   4b466:	cmp    ecx,0x1
   4b469:	je     4b940 <rc_init_pict+0x5b0>
   4b46f:	add    rsp,0x28
   4b473:	pop    rbx
   4b474:	pop    rbp
   4b475:	pop    r12
   4b477:	pop    r13
   4b479:	pop    r14
   4b47b:	pop    r15
   4b47d:	ret    
   4b47e:	xchg   ax,ax
   4b480:	test   r13d,r13d
   4b483:	je     4b5d0 <rc_init_pict+0x240>
   4b489:	cmp    r13d,0x1
   4b48d:	jne    4b40f <rc_init_pict+0x7f>
   4b48f:	movsd  xmm2,QWORD PTR [rip+0x92081]        # dd518 <PreviousBit_Rate>
   4b497:	movsd  xmm1,QWORD PTR [rip+0x91b31]        # dcfd0 <bit_rate>
   4b49f:	ucomisd xmm2,xmm1
   4b4a3:	jp     4ba10 <rc_init_pict+0x680>
   4b4a9:	jne    4ba10 <rc_init_pict+0x680>
   4b4af:	movabs rax,0x100000001
   4b4b9:	cmp    QWORD PTR [rbx+0x11b70],rax
   4b4c0:	je     4bc20 <rc_init_pict+0x890>
   4b4c6:	mov    eax,DWORD PTR [rbx+0x11b70]
   4b4cc:	cmp    eax,0x1
   4b4cf:	jle    4b40f <rc_init_pict+0x7f>
   4b4d5:	movsd  xmm2,QWORD PTR [rip+0x924bb]        # dd998 <Wb>
   4b4dd:	movsd  xmm1,QWORD PTR [rip+0x92ebb]        # de3a0 <AWb>
   4b4e5:	cmp    eax,0x7
   4b4e8:	jg     4be40 <rc_init_pict+0xab0>
   4b4ee:	pxor   xmm3,xmm3
   4b4f2:	pxor   xmm0,xmm0
   4b4f6:	cvtsi2sd xmm3,eax
   4b4fa:	sub    eax,0x1
   4b4fd:	cvtsi2sd xmm0,eax
   4b501:	divsd  xmm1,xmm3
   4b505:	mulsd  xmm0,xmm2
   4b509:	divsd  xmm0,xmm3
   4b50d:	addsd  xmm0,xmm1
   4b511:	movsd  QWORD PTR [rip+0x92e87],xmm0        # de3a0 <AWb>
   4b519:	jmp    4b40f <rc_init_pict+0x7f>
   4b51e:	xchg   ax,ax
   4b520:	test   r13d,r13d
   4b523:	jne    4b46f <rc_init_pict+0xdf>
   4b529:	mov    eax,DWORD PTR [rbx+0x11ba0]
   4b52f:	cmp    DWORD PTR [rbx+0x11bac],eax
   4b535:	jge    4b46f <rc_init_pict+0xdf>
   4b53b:	cmp    DWORD PTR [rbx+0x11b98],0x1
   4b542:	jne    4b46f <rc_init_pict+0xdf>
   4b548:	mov    edx,DWORD PTR [rip+0x3db8e]        # 890dc <T_field>
   4b54e:	mov    eax,DWORD PTR [rip+0x923cc]        # dd920 <TotalNumberofBasicUnit>
   4b554:	sub    edx,DWORD PTR [rip+0x3db76]        # 890d0 <bits_topfield>
   4b55a:	mov    QWORD PTR [rbx+0x11b54],0x0
   4b565:	mov    QWORD PTR [rbx+0x11b60],0x0
   4b570:	movsxd rdx,edx
   4b573:	mov    QWORD PTR [rip+0x91c3e],rdx        # dd1b8 <T>
   4b57a:	mov    edx,eax
   4b57c:	shr    edx,0x1f
   4b57f:	add    eax,edx
   4b581:	sar    eax,1
   4b583:	mov    DWORD PTR [rip+0x923bf],eax        # dd948 <NumberofBasicUnit>
   4b589:	jmp    4b46f <rc_init_pict+0xdf>
   4b58e:	xchg   ax,ax
   4b590:	mov    eax,DWORD PTR [rbx+0x11b74]
   4b596:	cmp    eax,0x3a
   4b599:	je     4b920 <rc_init_pict+0x590>
   4b59f:	cmp    eax,0x3b
   4b5a2:	jne    4b3f0 <rc_init_pict+0x60>
   4b5a8:	movsd  xmm0,QWORD PTR [rip+0x91a20]        # dcfd0 <bit_rate>
   4b5b0:	movsd  QWORD PTR [rip+0x91f60],xmm0        # dd518 <PreviousBit_Rate>
   4b5b8:	jmp    4b3f0 <rc_init_pict+0x60>
   4b5bd:	nop    DWORD PTR [rax]
   4b5c0:	mov    DWORD PTR [rip+0x92382],eax        # dd948 <NumberofBasicUnit>
   4b5c6:	jmp    4b461 <rc_init_pict+0xd1>
   4b5cb:	nop    DWORD PTR [rax+rax*1+0x0]
   4b5d0:	movsd  xmm2,QWORD PTR [rip+0x91f40]        # dd518 <PreviousBit_Rate>
   4b5d8:	movsd  xmm1,QWORD PTR [rip+0x919f0]        # dcfd0 <bit_rate>
   4b5e0:	ucomisd xmm2,xmm1
   4b5e4:	jp     4b980 <rc_init_pict+0x5f0>
   4b5ea:	jne    4b980 <rc_init_pict+0x5f0>
   4b5f0:	movsd  xmm1,QWORD PTR [rip+0x271d0]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4b5f8:	mov    ecx,DWORD PTR [rbx+0x11b74]
   4b5fe:	cmp    edx,esi
   4b600:	je     4baa0 <rc_init_pict+0x710>
   4b606:	test   ecx,ecx
   4b608:	jle    4b660 <rc_init_pict+0x2d0>
   4b60a:	cmp    DWORD PTR [r12+0xb40],0x2
   4b613:	mov    eax,DWORD PTR [rip+0x92307]        # dd920 <TotalNumberofBasicUnit>
   4b619:	je     4b620 <rc_init_pict+0x290>
   4b61b:	test   r14d,r14d
   4b61e:	je     4b62d <rc_init_pict+0x29d>
   4b620:	cmp    DWORD PTR [rbx+0x11b98],0x1
   4b627:	je     4bec3 <rc_init_pict+0xb33>
   4b62d:	test   eax,eax
   4b62f:	jle    4b660 <rc_init_pict+0x2d0>
   4b631:	mov    r10,QWORD PTR [rip+0x92868]        # ddea0 <BUCFMAD>
   4b638:	mov    r9,QWORD PTR [rip+0x922f9]        # dd938 <BUPFMAD>
   4b63f:	lea    r8d,[rax-0x1]
   4b643:	xor    eax,eax
   4b645:	nop    DWORD PTR [rax]
   4b648:	movsd  xmm0,QWORD PTR [r10+rax*8]
   4b64e:	mov    rdi,rax
   4b651:	movsd  QWORD PTR [r9+rax*8],xmm0
   4b657:	add    rax,0x1
   4b65b:	cmp    r8,rdi
   4b65e:	jne    4b648 <rc_init_pict+0x2b8>
   4b660:	cmp    DWORD PTR [rbx+0x11b78],0x1
   4b667:	je     4baa0 <rc_init_pict+0x710>
   4b66d:	jle    4b6b8 <rc_init_pict+0x328>
   4b66f:	mov    eax,DWORD PTR [rbx+0x11b80]
   4b675:	test   eax,eax
   4b677:	jne    4beb8 <rc_init_pict+0xb28>
   4b67d:	movsd  xmm0,QWORD PTR [rip+0x91dc3]        # dd448 <CurrentBufferFullness>
   4b685:	pxor   xmm3,xmm3
   4b689:	cvtsi2sd xmm3,DWORD PTR [rip+0x92347]        # dd9d8 <TotalPFrame>
   4b691:	movapd xmm2,xmm0
   4b695:	subsd  xmm2,QWORD PTR [rip+0x92343]        # dd9e0 <GOPTargetBufferLevel>
   4b69d:	divsd  xmm2,xmm3
   4b6a1:	subsd  xmm0,xmm2
   4b6a5:	movsd  QWORD PTR [rip+0x922a3],xmm2        # dd950 <DeltaP>
   4b6ad:	movsd  QWORD PTR [rip+0x91d9b],xmm0        # dd450 <TargetBufferLevel>
   4b6b5:	nop    DWORD PTR [rax]
   4b6b8:	cmp    ecx,0x1
   4b6bb:	je     4bc08 <rc_init_pict+0x878>
   4b6c1:	lea    eax,[rcx-0x2]
   4b6c4:	cmp    eax,0x5
   4b6c7:	ja     4bdf8 <rc_init_pict+0xa68>
   4b6cd:	lea    eax,[rcx-0x1]
   4b6d0:	pxor   xmm0,xmm0
   4b6d4:	pxor   xmm2,xmm2
   4b6d8:	movsd  xmm3,QWORD PTR [rip+0x918e8]        # dcfc8 <AWp>
   4b6e0:	cvtsi2sd xmm0,eax
   4b6e4:	mulsd  xmm0,QWORD PTR [rip+0x92284]        # dd970 <Wp>
   4b6ec:	cvtsi2sd xmm2,ecx
   4b6f0:	divsd  xmm0,xmm2
   4b6f4:	divsd  xmm3,xmm2
   4b6f8:	addsd  xmm0,xmm3
   4b6fc:	movsd  QWORD PTR [rip+0x918c4],xmm0        # dcfc8 <AWp>
   4b704:	mov    eax,DWORD PTR [r12+0x4d4]
   4b70c:	pxor   xmm3,xmm3
   4b710:	cvtsi2sd xmm3,eax
   4b714:	test   eax,eax
   4b716:	jle    4b773 <rc_init_pict+0x3e3>
   4b718:	movsd  xmm2,QWORD PTR [rip+0x92c80]        # de3a0 <AWb>
   4b720:	add    eax,0x1
   4b723:	pxor   xmm0,xmm0
   4b727:	movsd  xmm6,QWORD PTR [rip+0x91899]        # dcfc8 <AWp>
   4b72f:	cvtsi2sd xmm0,eax
   4b733:	movsd  xmm4,QWORD PTR [rip+0x91895]        # dcfd0 <bit_rate>
   4b73b:	movsd  xmm5,QWORD PTR [rip+0x91c25]        # dd368 <frame_rate>
   4b743:	mulsd  xmm2,xmm3
   4b747:	mulsd  xmm0,xmm6
   4b74b:	addsd  xmm2,xmm6
   4b74f:	mulsd  xmm0,xmm4
   4b753:	mulsd  xmm2,xmm5
   4b757:	divsd  xmm4,xmm5
   4b75b:	divsd  xmm0,xmm2
   4b75f:	subsd  xmm0,xmm4
   4b763:	addsd  xmm0,QWORD PTR [rip+0x91ce5]        # dd450 <TargetBufferLevel>
   4b76b:	movsd  QWORD PTR [rip+0x91cdd],xmm0        # dd450 <TargetBufferLevel>
   4b773:	cmp    edx,esi
   4b775:	je     4bae0 <rc_init_pict+0x750>
   4b77b:	cmp    DWORD PTR [rbx+0x11b78],0x1
   4b782:	je     4bc48 <rc_init_pict+0x8b8>
   4b788:	jle    4bad0 <rc_init_pict+0x740>
   4b78e:	pxor   xmm4,xmm4
   4b792:	pxor   xmm0,xmm0
   4b796:	pxor   xmm2,xmm2
   4b79a:	mov    DWORD PTR [rsp+0x1c],esi
   4b79e:	cvtsi2sd xmm4,DWORD PTR [rip+0x3d932]        # 890d8 <Np>
   4b7a6:	movsd  xmm5,QWORD PTR [rip+0x921c2]        # dd970 <Wp>
   4b7ae:	mov    DWORD PTR [rsp+0x18],edx
   4b7b2:	cvtsi2sd xmm0,DWORD PTR [rip+0x3d926]        # 890e0 <R>
   4b7ba:	movsd  QWORD PTR [rsp+0x10],xmm3
   4b7c0:	cvtsi2sd xmm2,DWORD PTR [rip+0x3d90c]        # 890d4 <Nb>
   4b7c8:	mulsd  xmm2,QWORD PTR [rip+0x921c8]        # dd998 <Wb>
   4b7d0:	movsd  QWORD PTR [rsp],xmm1
   4b7d5:	mulsd  xmm4,xmm5
   4b7d9:	mulsd  xmm0,xmm5
   4b7dd:	addsd  xmm2,xmm4
   4b7e1:	divsd  xmm0,xmm2
   4b7e5:	addsd  xmm0,QWORD PTR [rip+0x2766b]        # 72e58 <quant_coef+0x198>
   4b7ed:	call   44d0 <floor@plt>
   4b7f2:	movsd  xmm2,QWORD PTR [rip+0x91c4e]        # dd448 <CurrentBufferFullness>
   4b7fa:	subsd  xmm2,QWORD PTR [rip+0x91c4e]        # dd450 <TargetBufferLevel>
   4b802:	mulsd  xmm2,QWORD PTR [rip+0x92766]        # ddf70 <GAMMAP>
   4b80a:	cvttsd2si rcx,xmm0
   4b80f:	movsd  xmm0,QWORD PTR [rip+0x917b9]        # dcfd0 <bit_rate>
   4b817:	divsd  xmm0,QWORD PTR [rip+0x91b49]        # dd368 <frame_rate>
   4b81f:	mov    QWORD PTR [rsp+0x8],rcx
   4b824:	subsd  xmm0,xmm2
   4b828:	addsd  xmm0,QWORD PTR [rip+0x27628]        # 72e58 <quant_coef+0x198>
   4b830:	call   44d0 <floor@plt>
   4b835:	mov    edi,0x0
   4b83a:	movsd  xmm1,QWORD PTR [rsp]
   4b83f:	movsd  xmm4,QWORD PTR [rip+0x91989]        # dd1d0 <BETAP>
   4b847:	cvttsd2si rax,xmm0
   4b84c:	pxor   xmm0,xmm0
   4b850:	mov    rcx,QWORD PTR [rsp+0x8]
   4b855:	movapd xmm2,xmm1
   4b859:	subsd  xmm2,xmm4
   4b85d:	test   rax,rax
   4b860:	cmovs  rax,rdi
   4b864:	cvtsi2sd xmm0,rax
   4b869:	mov    QWORD PTR [rip+0x91970],rax        # dd1e0 <T1>
   4b870:	mulsd  xmm0,xmm2
   4b874:	pxor   xmm2,xmm2
   4b878:	cvtsi2sd xmm2,rcx
   4b87d:	mulsd  xmm2,xmm4
   4b881:	addsd  xmm0,xmm2
   4b885:	addsd  xmm0,QWORD PTR [rip+0x275cb]        # 72e58 <quant_coef+0x198>
   4b88d:	call   44d0 <floor@plt>
   4b892:	mov    esi,DWORD PTR [rsp+0x1c]
   4b896:	mov    edx,DWORD PTR [rsp+0x18]
   4b89a:	cvttsd2si rax,xmm0
   4b89f:	movsd  xmm3,QWORD PTR [rsp+0x10]
   4b8a5:	movsd  xmm1,QWORD PTR [rsp]
   4b8aa:	mulsd  xmm3,QWORD PTR [rip+0x2bc36]        # 774e8 <THETA+0x48>
   4b8b2:	pxor   xmm0,xmm0
   4b8b6:	mov    rcx,QWORD PTR [rip+0x920fb]        # dd9b8 <LowerBound>
   4b8bd:	cvtsi2sd xmm0,rax
   4b8c2:	subsd  xmm1,xmm3
   4b8c6:	mulsd  xmm1,xmm0
   4b8ca:	cvttsd2si rax,xmm1
   4b8cf:	cmp    rax,rcx
   4b8d2:	cmovl  rax,rcx
   4b8d6:	mov    rcx,QWORD PTR [rip+0x91873]        # dd150 <UpperBound2>
   4b8dd:	cmp    rax,rcx
   4b8e0:	cmovg  rax,rcx
   4b8e4:	mov    QWORD PTR [rip+0x918cd],rax        # dd1b8 <T>
   4b8eb:	test   ebp,ebp
   4b8ed:	jne    4b910 <rc_init_pict+0x580>
   4b8ef:	test   r15d,r15d
   4b8f2:	je     4b40f <rc_init_pict+0x7f>
   4b8f8:	cmp    DWORD PTR [r12+0xb40],0x2
   4b901:	je     4b910 <rc_init_pict+0x580>
   4b903:	test   r14d,r14d
   4b906:	je     4b40f <rc_init_pict+0x7f>
   4b90c:	nop    DWORD PTR [rax+0x0]
   4b910:	mov    DWORD PTR [rip+0x3d7c6],eax        # 890dc <T_field>
   4b916:	jmp    4b40f <rc_init_pict+0x7f>
   4b91b:	nop    DWORD PTR [rax+rax*1+0x0]
   4b920:	movsd  xmm0,QWORD PTR [rip+0x2bbe8]        # 77510 <THETA+0x70>
   4b928:	mulsd  xmm0,QWORD PTR [rip+0x916a0]        # dcfd0 <bit_rate>
   4b930:	movsd  QWORD PTR [rip+0x91698],xmm0        # dcfd0 <bit_rate>
   4b938:	jmp    4b3f0 <rc_init_pict+0x60>
   4b93d:	nop    DWORD PTR [rax]
   4b940:	mov    edx,DWORD PTR [rip+0x3d796]        # 890dc <T_field>
   4b946:	test   ebp,ebp
   4b948:	je     4b554 <rc_init_pict+0x1c4>
   4b94e:	mov    DWORD PTR [rip+0x3d778],0x0        # 890d0 <bits_topfield>
   4b958:	pxor   xmm0,xmm0
   4b95c:	cvtsi2sd xmm0,edx
   4b960:	mulsd  xmm0,QWORD PTR [rip+0x2bb50]        # 774b8 <THETA+0x18>
   4b968:	cvttsd2si rax,xmm0
   4b96d:	mov    QWORD PTR [rip+0x91844],rax        # dd1b8 <T>
   4b974:	jmp    4b46f <rc_init_pict+0xdf>
   4b979:	nop    DWORD PTR [rax+0x0]
   4b980:	mov    eax,DWORD PTR [rip+0x3d74e]        # 890d4 <Nb>
   4b986:	pxor   xmm0,xmm0
   4b98a:	add    eax,DWORD PTR [rip+0x3d748]        # 890d8 <Np>
   4b990:	subsd  xmm1,xmm2
   4b994:	cvtsi2sd xmm0,eax
   4b998:	movsd  xmm3,QWORD PTR [rip+0x27bd0]        # 73570 <quant_coef+0x8b0>
   4b9a0:	mulsd  xmm0,xmm1
   4b9a4:	movsd  xmm1,QWORD PTR [rip+0x27bb4]        # 73560 <quant_coef+0x8a0>
   4b9ac:	divsd  xmm0,QWORD PTR [rip+0x919b4]        # dd368 <frame_rate>
   4b9b4:	addsd  xmm0,QWORD PTR [rip+0x2749c]        # 72e58 <quant_coef+0x198>
   4b9bc:	movapd xmm2,xmm0
   4b9c0:	andpd  xmm2,xmm3
   4b9c4:	ucomisd xmm1,xmm2
   4b9c8:	movsd  xmm1,QWORD PTR [rip+0x26df8]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4b9d0:	jbe    4b9fd <rc_init_pict+0x66d>
   4b9d2:	cvttsd2si rax,xmm0
   4b9d7:	pxor   xmm2,xmm2
   4b9db:	andnpd xmm3,xmm0
   4b9df:	cvtsi2sd xmm2,rax
   4b9e4:	movapd xmm4,xmm2
   4b9e8:	cmpnlesd xmm4,xmm0
   4b9ed:	movapd xmm0,xmm3
   4b9f1:	andpd  xmm4,xmm1
   4b9f5:	subsd  xmm2,xmm4
   4b9f9:	orpd   xmm0,xmm2
   4b9fd:	cvttsd2si eax,xmm0
   4ba01:	add    DWORD PTR [rip+0x3d6d9],eax        # 890e0 <R>
   4ba07:	jmp    4b5f8 <rc_init_pict+0x268>
   4ba0c:	nop    DWORD PTR [rax+0x0]
   4ba10:	mov    eax,DWORD PTR [rip+0x3d6be]        # 890d4 <Nb>
   4ba16:	pxor   xmm0,xmm0
   4ba1a:	add    eax,DWORD PTR [rip+0x3d6b8]        # 890d8 <Np>
   4ba20:	subsd  xmm1,xmm2
   4ba24:	cvtsi2sd xmm0,eax
   4ba28:	movsd  xmm2,QWORD PTR [rip+0x27b40]        # 73570 <quant_coef+0x8b0>
   4ba30:	movsd  xmm3,QWORD PTR [rip+0x27b28]        # 73560 <quant_coef+0x8a0>
   4ba38:	mulsd  xmm0,xmm1
   4ba3c:	divsd  xmm0,QWORD PTR [rip+0x91924]        # dd368 <frame_rate>
   4ba44:	addsd  xmm0,QWORD PTR [rip+0x2740c]        # 72e58 <quant_coef+0x198>
   4ba4c:	movapd xmm1,xmm0
   4ba50:	andpd  xmm1,xmm2
   4ba54:	ucomisd xmm3,xmm1
   4ba58:	jbe    4ba8d <rc_init_pict+0x6fd>
   4ba5a:	cvttsd2si rax,xmm0
   4ba5f:	pxor   xmm1,xmm1
   4ba63:	movsd  xmm4,QWORD PTR [rip+0x26d5d]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4ba6b:	andnpd xmm2,xmm0
   4ba6f:	cvtsi2sd xmm1,rax
   4ba74:	movapd xmm3,xmm1
   4ba78:	cmpnlesd xmm3,xmm0
   4ba7d:	movapd xmm0,xmm2
   4ba81:	andpd  xmm3,xmm4
   4ba85:	subsd  xmm1,xmm3
   4ba89:	orpd   xmm0,xmm1
   4ba8d:	cvttsd2si eax,xmm0
   4ba91:	add    DWORD PTR [rip+0x3d649],eax        # 890e0 <R>
   4ba97:	jmp    4b4af <rc_init_pict+0x11f>
   4ba9c:	nop    DWORD PTR [rax+0x0]
   4baa0:	cmp    DWORD PTR [rbx+0x11b80],0x1
   4baa7:	je     4be70 <rc_init_pict+0xae0>
   4baad:	jle    4b6b8 <rc_init_pict+0x328>
   4bab3:	movsd  xmm0,QWORD PTR [rip+0x91995]        # dd450 <TargetBufferLevel>
   4babb:	subsd  xmm0,QWORD PTR [rip+0x91e8d]        # dd950 <DeltaP>
   4bac3:	movsd  QWORD PTR [rip+0x91985],xmm0        # dd450 <TargetBufferLevel>
   4bacb:	jmp    4b6b8 <rc_init_pict+0x328>
   4bad0:	mov    rax,QWORD PTR [rip+0x916e1]        # dd1b8 <T>
   4bad7:	jmp    4b8aa <rc_init_pict+0x51a>
   4badc:	nop    DWORD PTR [rax+0x0]
   4bae0:	test   ecx,ecx
   4bae2:	jle    4bad0 <rc_init_pict+0x740>
   4bae4:	pxor   xmm4,xmm4
   4bae8:	pxor   xmm0,xmm0
   4baec:	pxor   xmm2,xmm2
   4baf0:	mov    DWORD PTR [rsp+0x1c],esi
   4baf4:	cvtsi2sd xmm4,DWORD PTR [rip+0x3d5dc]        # 890d8 <Np>
   4bafc:	movsd  xmm5,QWORD PTR [rip+0x91e6c]        # dd970 <Wp>
   4bb04:	mov    DWORD PTR [rsp+0x18],edx
   4bb08:	cvtsi2sd xmm0,DWORD PTR [rip+0x3d5d0]        # 890e0 <R>
   4bb10:	movsd  QWORD PTR [rsp+0x10],xmm3
   4bb16:	cvtsi2sd xmm2,DWORD PTR [rip+0x3d5b6]        # 890d4 <Nb>
   4bb1e:	mulsd  xmm2,QWORD PTR [rip+0x91e72]        # dd998 <Wb>
   4bb26:	movsd  QWORD PTR [rsp],xmm1
   4bb2b:	mulsd  xmm4,xmm5
   4bb2f:	mulsd  xmm0,xmm5
   4bb33:	addsd  xmm2,xmm4
   4bb37:	divsd  xmm0,xmm2
   4bb3b:	addsd  xmm0,QWORD PTR [rip+0x27315]        # 72e58 <quant_coef+0x198>
   4bb43:	call   44d0 <floor@plt>
   4bb48:	movsd  xmm2,QWORD PTR [rip+0x918f8]        # dd448 <CurrentBufferFullness>
   4bb50:	subsd  xmm2,QWORD PTR [rip+0x918f8]        # dd450 <TargetBufferLevel>
   4bb58:	mulsd  xmm2,QWORD PTR [rip+0x92410]        # ddf70 <GAMMAP>
   4bb60:	cvttsd2si rcx,xmm0
   4bb65:	movsd  xmm0,QWORD PTR [rip+0x91463]        # dcfd0 <bit_rate>
   4bb6d:	divsd  xmm0,QWORD PTR [rip+0x917f3]        # dd368 <frame_rate>
   4bb75:	mov    QWORD PTR [rsp+0x8],rcx
   4bb7a:	subsd  xmm0,xmm2
   4bb7e:	addsd  xmm0,QWORD PTR [rip+0x272d2]        # 72e58 <quant_coef+0x198>
   4bb86:	call   44d0 <floor@plt>
   4bb8b:	mov    edi,0x0
   4bb90:	movsd  xmm1,QWORD PTR [rsp]
   4bb95:	movsd  xmm4,QWORD PTR [rip+0x91633]        # dd1d0 <BETAP>
   4bb9d:	cvttsd2si rax,xmm0
   4bba2:	pxor   xmm0,xmm0
   4bba6:	mov    rcx,QWORD PTR [rsp+0x8]
   4bbab:	movapd xmm2,xmm1
   4bbaf:	subsd  xmm2,xmm4
   4bbb3:	test   rax,rax
   4bbb6:	cmovs  rax,rdi
   4bbba:	cvtsi2sd xmm0,rax
   4bbbf:	mov    QWORD PTR [rip+0x9161a],rax        # dd1e0 <T1>
   4bbc6:	mulsd  xmm0,xmm2
   4bbca:	pxor   xmm2,xmm2
   4bbce:	cvtsi2sd xmm2,rcx
   4bbd3:	mulsd  xmm2,xmm4
   4bbd7:	addsd  xmm0,xmm2
   4bbdb:	addsd  xmm0,QWORD PTR [rip+0x27275]        # 72e58 <quant_coef+0x198>
   4bbe3:	call   44d0 <floor@plt>
   4bbe8:	movsd  xmm1,QWORD PTR [rsp]
   4bbed:	movsd  xmm3,QWORD PTR [rsp+0x10]
   4bbf3:	cvttsd2si rax,xmm0
   4bbf8:	mov    edx,DWORD PTR [rsp+0x18]
   4bbfc:	mov    esi,DWORD PTR [rsp+0x1c]
   4bc00:	jmp    4b8aa <rc_init_pict+0x51a>
   4bc05:	nop    DWORD PTR [rax]
   4bc08:	movsd  xmm0,QWORD PTR [rip+0x91d60]        # dd970 <Wp>
   4bc10:	movsd  QWORD PTR [rip+0x913b0],xmm0        # dcfc8 <AWp>
   4bc18:	jmp    4b704 <rc_init_pict+0x374>
   4bc1d:	nop    DWORD PTR [rax]
   4bc20:	movsd  xmm0,QWORD PTR [rip+0x91d48]        # dd970 <Wp>
   4bc28:	movsd  QWORD PTR [rip+0x91398],xmm0        # dcfc8 <AWp>
   4bc30:	movsd  xmm0,QWORD PTR [rip+0x91d60]        # dd998 <Wb>
   4bc38:	movsd  QWORD PTR [rip+0x92760],xmm0        # de3a0 <AWb>
   4bc40:	jmp    4b40f <rc_init_pict+0x7f>
   4bc45:	nop    DWORD PTR [rax]
   4bc48:	test   ecx,ecx
   4bc4a:	jle    4bad0 <rc_init_pict+0x740>
   4bc50:	pxor   xmm4,xmm4
   4bc54:	movsd  xmm5,QWORD PTR [rip+0x91d14]        # dd970 <Wp>
   4bc5c:	pxor   xmm2,xmm2
   4bc60:	pxor   xmm0,xmm0
   4bc64:	cvtsi2sd xmm4,DWORD PTR [rip+0x3d46c]        # 890d8 <Np>
   4bc6c:	movsd  xmm8,QWORD PTR [rip+0x271e3]        # 72e58 <quant_coef+0x198>
   4bc75:	movsd  xmm7,QWORD PTR [rip+0x278e3]        # 73560 <quant_coef+0x8a0>
   4bc7d:	cvtsi2sd xmm2,DWORD PTR [rip+0x3d45b]        # 890e0 <R>
   4bc85:	cvtsi2sd xmm0,DWORD PTR [rip+0x3d447]        # 890d4 <Nb>
   4bc8d:	mulsd  xmm0,QWORD PTR [rip+0x91d03]        # dd998 <Wb>
   4bc95:	mulsd  xmm4,xmm5
   4bc99:	mulsd  xmm2,xmm5
   4bc9d:	movq   xmm5,QWORD PTR [rip+0x278cb]        # 73570 <quant_coef+0x8b0>
   4bca5:	addsd  xmm0,xmm4
   4bca9:	movapd xmm4,xmm5
   4bcad:	divsd  xmm2,xmm0
   4bcb1:	addsd  xmm2,xmm8
   4bcb6:	movapd xmm0,xmm2
   4bcba:	andpd  xmm0,xmm5
   4bcbe:	ucomisd xmm7,xmm0
   4bcc2:	jbe    4bcef <rc_init_pict+0x95f>
   4bcc4:	cvttsd2si rax,xmm2
   4bcc9:	pxor   xmm0,xmm0
   4bccd:	andnpd xmm4,xmm2
   4bcd1:	cvtsi2sd xmm0,rax
   4bcd6:	movapd xmm6,xmm0
   4bcda:	cmpnlesd xmm6,xmm2
   4bcdf:	movapd xmm2,xmm4
   4bce3:	andpd  xmm6,xmm1
   4bce7:	subsd  xmm0,xmm6
   4bceb:	orpd   xmm2,xmm0
   4bcef:	movsd  xmm6,QWORD PTR [rip+0x91751]        # dd448 <CurrentBufferFullness>
   4bcf7:	subsd  xmm6,QWORD PTR [rip+0x91751]        # dd450 <TargetBufferLevel>
   4bcff:	mulsd  xmm6,QWORD PTR [rip+0x92269]        # ddf70 <GAMMAP>
   4bd07:	movsd  xmm4,QWORD PTR [rip+0x912c1]        # dcfd0 <bit_rate>
   4bd0f:	divsd  xmm4,QWORD PTR [rip+0x91651]        # dd368 <frame_rate>
   4bd17:	subsd  xmm4,xmm6
   4bd1b:	movapd xmm6,xmm5
   4bd1f:	addsd  xmm4,xmm8
   4bd24:	movapd xmm0,xmm4
   4bd28:	andpd  xmm0,xmm5
   4bd2c:	ucomisd xmm7,xmm0
   4bd30:	jbe    4bd61 <rc_init_pict+0x9d1>
   4bd32:	cvttsd2si rax,xmm4
   4bd37:	pxor   xmm0,xmm0
   4bd3b:	andnpd xmm6,xmm4
   4bd3f:	cvtsi2sd xmm0,rax
   4bd44:	movapd xmm9,xmm0
   4bd49:	cmpnlesd xmm9,xmm4
   4bd4f:	movapd xmm4,xmm6
   4bd53:	andpd  xmm9,xmm1
   4bd58:	subsd  xmm0,xmm9
   4bd5d:	orpd   xmm4,xmm0
   4bd61:	cvttsd2si ecx,xmm4
   4bd65:	mov    eax,0x0
   4bd6a:	movsd  xmm4,QWORD PTR [rip+0x9145e]        # dd1d0 <BETAP>
   4bd72:	pxor   xmm0,xmm0
   4bd76:	movapd xmm6,xmm1
   4bd7a:	subsd  xmm6,xmm4
   4bd7e:	movsxd rcx,ecx
   4bd81:	test   rcx,rcx
   4bd84:	cmovs  rcx,rax
   4bd88:	cvttsd2si eax,xmm2
   4bd8c:	pxor   xmm2,xmm2
   4bd90:	cvtsi2sd xmm2,rcx
   4bd95:	mov    QWORD PTR [rip+0x91444],rcx        # dd1e0 <T1>
   4bd9c:	cvtsi2sd xmm0,eax
   4bda0:	mulsd  xmm2,xmm6
   4bda4:	mulsd  xmm0,xmm4
   4bda8:	addsd  xmm0,xmm2
   4bdac:	addsd  xmm0,xmm8
   4bdb1:	movapd xmm2,xmm0
   4bdb5:	andpd  xmm2,xmm5
   4bdb9:	ucomisd xmm7,xmm2
   4bdbd:	jbe    4bdea <rc_init_pict+0xa5a>
   4bdbf:	cvttsd2si rax,xmm0
   4bdc4:	pxor   xmm2,xmm2
   4bdc8:	andnpd xmm5,xmm0
   4bdcc:	cvtsi2sd xmm2,rax
   4bdd1:	movapd xmm4,xmm2
   4bdd5:	cmpnlesd xmm4,xmm0
   4bdda:	andpd  xmm4,xmm1
   4bdde:	subsd  xmm2,xmm4
   4bde2:	orpd   xmm2,xmm5
   4bde6:	movapd xmm0,xmm2
   4bdea:	cvttsd2si eax,xmm0
   4bdee:	cdqe   
   4bdf0:	jmp    4b8aa <rc_init_pict+0x51a>
   4bdf5:	nop    DWORD PTR [rax]
   4bdf8:	cmp    ecx,0x1
   4bdfb:	jle    4b704 <rc_init_pict+0x374>
   4be01:	movsd  xmm0,QWORD PTR [rip+0x2b70f]        # 77518 <THETA+0x78>
   4be09:	mulsd  xmm0,QWORD PTR [rip+0x911b7]        # dcfc8 <AWp>
   4be11:	movsd  xmm2,QWORD PTR [rip+0x2b707]        # 77520 <THETA+0x80>
   4be19:	mulsd  xmm0,xmm2
   4be1d:	mulsd  xmm2,QWORD PTR [rip+0x91b4b]        # dd970 <Wp>
   4be25:	addsd  xmm0,xmm2
   4be29:	movsd  QWORD PTR [rip+0x91197],xmm0        # dcfc8 <AWp>
   4be31:	jmp    4b704 <rc_init_pict+0x374>
   4be36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4be40:	mulsd  xmm1,QWORD PTR [rip+0x2b6d0]        # 77518 <THETA+0x78>
   4be48:	movsd  xmm0,QWORD PTR [rip+0x2b6d0]        # 77520 <THETA+0x80>
   4be50:	mulsd  xmm1,xmm0
   4be54:	mulsd  xmm0,xmm2
   4be58:	addsd  xmm0,xmm1
   4be5c:	movsd  QWORD PTR [rip+0x9253c],xmm0        # de3a0 <AWb>
   4be64:	jmp    4b40f <rc_init_pict+0x7f>
   4be69:	nop    DWORD PTR [rax+0x0]
   4be70:	mov    eax,DWORD PTR [rip+0x91b62]        # dd9d8 <TotalPFrame>
   4be76:	movsd  xmm2,QWORD PTR [rip+0x915ca]        # dd448 <CurrentBufferFullness>
   4be7e:	pxor   xmm0,xmm0
   4be82:	sub    eax,0x1
   4be85:	movapd xmm3,xmm2
   4be89:	subsd  xmm3,QWORD PTR [rip+0x91b4f]        # dd9e0 <GOPTargetBufferLevel>
   4be91:	cvtsi2sd xmm0,eax
   4be95:	divsd  xmm3,xmm0
   4be99:	subsd  xmm2,xmm3
   4be9d:	movsd  QWORD PTR [rip+0x91aab],xmm3        # dd950 <DeltaP>
   4bea5:	movsd  QWORD PTR [rip+0x915a3],xmm2        # dd450 <TargetBufferLevel>
   4bead:	jmp    4b6b8 <rc_init_pict+0x328>
   4beb2:	nop    WORD PTR [rax+rax*1+0x0]
   4beb8:	jg     4bab3 <rc_init_pict+0x723>
   4bebe:	jmp    4b6b8 <rc_init_pict+0x328>
   4bec3:	test   eax,eax
   4bec5:	jle    4b660 <rc_init_pict+0x2d0>
   4becb:	mov    r10,QWORD PTR [rip+0x91b16]        # dd9e8 <FCBUCFMAD>
   4bed2:	mov    r9,QWORD PTR [rip+0x912ef]        # dd1c8 <FCBUPFMAD>
   4bed9:	lea    r8d,[rax-0x1]
   4bedd:	xor    eax,eax
   4bedf:	nop
   4bee0:	movsd  xmm0,QWORD PTR [r10+rax*8]
   4bee6:	mov    rdi,rax
   4bee9:	movsd  QWORD PTR [r9+rax*8],xmm0
   4beef:	add    rax,0x1
   4bef3:	cmp    rdi,r8
   4bef6:	jne    4bee0 <rc_init_pict+0xb50>
   4bef8:	jmp    4b660 <rc_init_pict+0x2d0>
   4befd:	nop    DWORD PTR [rax]

000000000004bf00 <calc_MAD>:
   4bf00:	endbr64 
   4bf04:	lea    rdi,[rip+0x920d5]        # ddfe0 <diffy+0x40>
   4bf0b:	xor    esi,esi
   4bf0d:	lea    r8,[rdi+0x400]
   4bf14:	nop    DWORD PTR [rax+0x0]
   4bf18:	lea    rax,[rdi-0x40]
   4bf1c:	nop    DWORD PTR [rax+0x0]
   4bf20:	mov    edx,DWORD PTR [rax]
   4bf22:	mov    ecx,DWORD PTR [rax]
   4bf24:	add    rax,0x4
   4bf28:	sar    edx,0x1f
   4bf2b:	xor    ecx,edx
   4bf2d:	sub    ecx,edx
   4bf2f:	add    esi,ecx
   4bf31:	cmp    rax,rdi
   4bf34:	jne    4bf20 <calc_MAD+0x20>
   4bf36:	lea    rdi,[rax+0x40]
   4bf3a:	cmp    rdi,r8
   4bf3d:	jne    4bf18 <calc_MAD+0x18>
   4bf3f:	pxor   xmm0,xmm0
   4bf43:	cvtsi2sd xmm0,esi
   4bf47:	mulsd  xmm0,QWORD PTR [rip+0x2b5d9]        # 77528 <THETA+0x88>
   4bf4f:	ret    

000000000004bf50 <rc_update_pict>:
   4bf50:	endbr64 
   4bf54:	pxor   xmm1,xmm1
   4bf58:	movsd  xmm0,QWORD PTR [rip+0x91070]        # dcfd0 <bit_rate>
   4bf60:	divsd  xmm0,QWORD PTR [rip+0x91400]        # dd368 <frame_rate>
   4bf68:	sub    DWORD PTR [rip+0x3d172],edi        # 890e0 <R>
   4bf6e:	cvtsi2sd xmm1,edi
   4bf72:	movapd xmm2,xmm1
   4bf76:	subsd  xmm2,xmm0
   4bf7a:	subsd  xmm0,xmm1
   4bf7e:	addsd  xmm2,QWORD PTR [rip+0x914c2]        # dd448 <CurrentBufferFullness>
   4bf86:	cvttsd2si rax,xmm0
   4bf8b:	pxor   xmm0,xmm0
   4bf8f:	add    QWORD PTR [rip+0x91a22],rax        # dd9b8 <LowerBound>
   4bf96:	add    rax,QWORD PTR [rip+0x919cb]        # dd968 <UpperBound1>
   4bf9d:	cvtsi2sd xmm0,rax
   4bfa2:	mulsd  xmm0,QWORD PTR [rip+0x2b556]        # 77500 <THETA+0x60>
   4bfaa:	mov    QWORD PTR [rip+0x919b7],rax        # dd968 <UpperBound1>
   4bfb1:	movsd  QWORD PTR [rip+0x9148f],xmm2        # dd448 <CurrentBufferFullness>
   4bfb9:	cvttsd2si rax,xmm0
   4bfbe:	mov    QWORD PTR [rip+0x9118b],rax        # dd150 <UpperBound2>
   4bfc5:	ret    
   4bfc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000004bfd0 <rc_update_pict_frame>:
   4bfd0:	endbr64 
   4bfd4:	mov    rcx,QWORD PTR [rip+0x3c5d5]        # 885b0 <img>
   4bfdb:	mov    edx,DWORD PTR [rcx+0x18]
   4bfde:	mov    eax,DWORD PTR [rcx+0x11ba0]
   4bfe4:	cmp    DWORD PTR [rcx+0x11bac],eax
   4bfea:	je     4c108 <rc_update_pict_frame+0x138>
   4bff0:	test   edx,edx
   4bff2:	jne    4c0e0 <rc_update_pict_frame+0x110>
   4bff8:	mov    r8d,DWORD PTR [rcx+0x11ba4]
   4bfff:	mov    esi,DWORD PTR [rcx+0x11b98]
   4c005:	test   r8d,r8d
   4c008:	jne    4c0f0 <rc_update_pict_frame+0x120>
   4c00e:	cmp    esi,0x1
   4c011:	jne    4c0f0 <rc_update_pict_frame+0x120>
   4c017:	mov    eax,DWORD PTR [rip+0x919b3]        # dd9d0 <TotalFrameQP>
   4c01d:	pxor   xmm0,xmm0
   4c021:	movsd  xmm2,QWORD PTR [rip+0x27547]        # 73570 <quant_coef+0x8b0>
   4c029:	movsd  xmm3,QWORD PTR [rip+0x2752f]        # 73560 <quant_coef+0x8a0>
   4c031:	cdq    
   4c032:	idiv   DWORD PTR [rip+0x918e8]        # dd920 <TotalNumberofBasicUnit>
   4c038:	imul   edi,eax
   4c03b:	cvtsi2sd xmm0,edi
   4c03f:	addsd  xmm0,QWORD PTR [rip+0x26e11]        # 72e58 <quant_coef+0x198>
   4c047:	movapd xmm1,xmm0
   4c04b:	andpd  xmm1,xmm2
   4c04f:	ucomisd xmm3,xmm1
   4c053:	jbe    4c088 <rc_update_pict_frame+0xb8>
   4c055:	cvttsd2si rax,xmm0
   4c05a:	pxor   xmm1,xmm1
   4c05e:	movsd  xmm4,QWORD PTR [rip+0x26762]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4c066:	andnpd xmm2,xmm0
   4c06a:	cvtsi2sd xmm1,rax
   4c06f:	movapd xmm3,xmm1
   4c073:	cmpnlesd xmm3,xmm0
   4c078:	movapd xmm0,xmm2
   4c07c:	andpd  xmm3,xmm4
   4c080:	subsd  xmm1,xmm3
   4c084:	orpd   xmm0,xmm1
   4c088:	cvttsd2si edx,xmm0
   4c08c:	test   r8d,r8d
   4c08f:	jne    4c1d0 <rc_update_pict_frame+0x200>
   4c095:	cmp    esi,0x1
   4c098:	je     4c09e <rc_update_pict_frame+0xce>
   4c09a:	test   esi,esi
   4c09c:	jne    4c0e9 <rc_update_pict_frame+0x119>
   4c09e:	pxor   xmm0,xmm0
   4c0a2:	mov    eax,DWORD PTR [rcx+0x11b4c]
   4c0a8:	sub    DWORD PTR [rip+0x3d029],0x1        # 890d8 <Np>
   4c0af:	cvtsi2sd xmm0,edx
   4c0b3:	add    DWORD PTR [rcx+0x11b74],0x1
   4c0ba:	add    DWORD PTR [rcx+0x11b80],0x1
   4c0c1:	mov    DWORD PTR [rip+0x912a9],edx        # dd370 <Xp>
   4c0c7:	mov    DWORD PTR [rip+0x91893],eax        # dd960 <Pm_Hp>
   4c0cd:	movsd  QWORD PTR [rip+0x9189b],xmm0        # dd970 <Wp>
   4c0d5:	ret    
   4c0d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c0e0:	cmp    edx,0x1
   4c0e3:	je     4c1f0 <rc_update_pict_frame+0x220>
   4c0e9:	ret    
   4c0ea:	nop    WORD PTR [rax+rax*1+0x0]
   4c0f0:	test   esi,esi
   4c0f2:	je     4c017 <rc_update_pict_frame+0x47>
   4c0f8:	test   r8d,r8d
   4c0fb:	jne    4c1d0 <rc_update_pict_frame+0x200>
   4c101:	jmp    4c095 <rc_update_pict_frame+0xc5>
   4c103:	nop    DWORD PTR [rax+rax*1+0x0]
   4c108:	imul   edi,DWORD PTR [rip+0x91269]        # dd378 <m_Qc>
   4c10f:	pxor   xmm0,xmm0
   4c113:	movsd  xmm2,QWORD PTR [rip+0x27455]        # 73570 <quant_coef+0x8b0>
   4c11b:	movsd  xmm3,QWORD PTR [rip+0x2743d]        # 73560 <quant_coef+0x8a0>
   4c123:	cvtsi2sd xmm0,edi
   4c127:	addsd  xmm0,QWORD PTR [rip+0x26d29]        # 72e58 <quant_coef+0x198>
   4c12f:	movapd xmm1,xmm0
   4c133:	andpd  xmm1,xmm2
   4c137:	ucomisd xmm3,xmm1
   4c13b:	ja     4c190 <rc_update_pict_frame+0x1c0>
   4c13d:	cvttsd2si eax,xmm0
   4c141:	test   edx,edx
   4c143:	je     4c269 <rc_update_pict_frame+0x299>
   4c149:	cmp    edx,0x1
   4c14c:	jne    4c268 <rc_update_pict_frame+0x298>
   4c152:	pxor   xmm0,xmm0
   4c156:	sub    DWORD PTR [rip+0x3cf77],0x1        # 890d4 <Nb>
   4c15d:	cvtsi2sd xmm0,eax
   4c161:	add    DWORD PTR [rcx+0x11b70],0x1
   4c168:	divsd  xmm0,QWORD PTR [rip+0x2b3c0]        # 77530 <THETA+0x90>
   4c170:	add    DWORD PTR [rip+0x91801],0x1        # dd978 <NumberofBFrames>
   4c177:	mov    DWORD PTR [rip+0x911f7],eax        # dd374 <Xb>
   4c17d:	movsd  QWORD PTR [rip+0x91813],xmm0        # dd998 <Wb>
   4c185:	ret    
   4c186:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c190:	cvttsd2si rax,xmm0
   4c195:	pxor   xmm1,xmm1
   4c199:	movsd  xmm4,QWORD PTR [rip+0x26627]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4c1a1:	andnpd xmm2,xmm0
   4c1a5:	cvtsi2sd xmm1,rax
   4c1aa:	movapd xmm3,xmm1
   4c1ae:	cmpnlesd xmm3,xmm0
   4c1b3:	movapd xmm0,xmm2
   4c1b7:	andpd  xmm3,xmm4
   4c1bb:	subsd  xmm1,xmm3
   4c1bf:	orpd   xmm0,xmm1
   4c1c3:	jmp    4c13d <rc_update_pict_frame+0x16d>
   4c1c8:	nop    DWORD PTR [rax+rax*1+0x0]
   4c1d0:	test   esi,esi
   4c1d2:	je     4c09e <rc_update_pict_frame+0xce>
   4c1d8:	cmp    esi,0x1
   4c1db:	jne    4c0e9 <rc_update_pict_frame+0x119>
   4c1e1:	mov    DWORD PTR [rcx+0x11ba4],0x0
   4c1eb:	ret    
   4c1ec:	nop    DWORD PTR [rax+0x0]
   4c1f0:	imul   edi,DWORD PTR [rip+0x91181]        # dd378 <m_Qc>
   4c1f7:	pxor   xmm0,xmm0
   4c1fb:	movsd  xmm2,QWORD PTR [rip+0x2736d]        # 73570 <quant_coef+0x8b0>
   4c203:	movsd  xmm3,QWORD PTR [rip+0x27355]        # 73560 <quant_coef+0x8a0>
   4c20b:	cvtsi2sd xmm0,edi
   4c20f:	addsd  xmm0,QWORD PTR [rip+0x26c41]        # 72e58 <quant_coef+0x198>
   4c217:	movapd xmm1,xmm0
   4c21b:	andpd  xmm1,xmm2
   4c21f:	ucomisd xmm3,xmm1
   4c223:	jbe    4c258 <rc_update_pict_frame+0x288>
   4c225:	cvttsd2si rax,xmm0
   4c22a:	pxor   xmm1,xmm1
   4c22e:	movsd  xmm4,QWORD PTR [rip+0x26592]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4c236:	andnpd xmm2,xmm0
   4c23a:	cvtsi2sd xmm1,rax
   4c23f:	movapd xmm3,xmm1
   4c243:	cmpnlesd xmm3,xmm0
   4c248:	movapd xmm0,xmm2
   4c24c:	andpd  xmm3,xmm4
   4c250:	subsd  xmm1,xmm3
   4c254:	orpd   xmm0,xmm1
   4c258:	cvttsd2si eax,xmm0
   4c25c:	jmp    4c152 <rc_update_pict_frame+0x182>
   4c261:	nop    DWORD PTR [rax+0x0]
   4c268:	ret    
   4c269:	mov    r8d,DWORD PTR [rcx+0x11ba4]
   4c270:	mov    esi,DWORD PTR [rcx+0x11b98]
   4c276:	mov    edx,eax
   4c278:	jmp    4c08c <rc_update_pict_frame+0xbc>
   4c27d:	nop    DWORD PTR [rax]

000000000004c280 <setbitscount>:
   4c280:	endbr64 
   4c284:	mov    DWORD PTR [rip+0x3ce46],edi        # 890d0 <bits_topfield>
   4c28a:	ret    
   4c28b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004c290 <RCModelEstimator>:
   4c290:	endbr64 
   4c294:	test   edi,edi
   4c296:	jle    4c4c0 <RCModelEstimator+0x230>
   4c29c:	lea    rcx,[rip+0x9177d]        # dda20 <m_rgRejected>
   4c2a3:	lea    edx,[rdi-0x1]
   4c2a6:	lea    rsi,[rcx+0x4]
   4c2aa:	mov    rax,rcx
   4c2ad:	lea    rsi,[rsi+rdx*4]
   4c2b1:	nop    DWORD PTR [rax+0x0]
   4c2b8:	cmp    DWORD PTR [rax],0x1
   4c2bb:	adc    edi,0xffffffff
   4c2be:	add    rax,0x4
   4c2c2:	cmp    rsi,rax
   4c2c5:	jne    4c2b8 <RCModelEstimator+0x28>
   4c2c7:	mov    QWORD PTR [rip+0x910ae],0x0        # dd380 <m_X2>
   4c2d2:	xor    eax,eax
   4c2d4:	lea    r8,[rip+0x910c5]        # dd3a0 <m_rgQp>
   4c2db:	mov    QWORD PTR [rip+0x9170a],0x0        # dd9f0 <m_X1>
   4c2e6:	jmp    4c2f3 <RCModelEstimator+0x63>
   4c2e8:	nop    DWORD PTR [rax+rax*1+0x0]
   4c2f0:	mov    rax,rsi
   4c2f3:	mov    r9d,DWORD PTR [rcx+rax*4]
   4c2f7:	test   r9d,r9d
   4c2fa:	jne    4c302 <RCModelEstimator+0x72>
   4c2fc:	movsd  xmm1,QWORD PTR [r8+rax*8]
   4c302:	lea    rsi,[rax+0x1]
   4c306:	cmp    rax,rdx
   4c309:	jne    4c2f0 <RCModelEstimator+0x60>
   4c30b:	xor    eax,eax
   4c30d:	xor    r9d,r9d
   4c310:	pxor   xmm2,xmm2
   4c314:	xor    r11d,r11d
   4c317:	lea    r10,[rip+0x91ba2]        # ddec0 <m_rgRp>
   4c31e:	jmp    4c352 <RCModelEstimator+0xc2>
   4c320:	test   esi,esi
   4c322:	jne    4c346 <RCModelEstimator+0xb6>
   4c324:	mov    r11d,0x1
   4c32a:	mulsd  xmm0,QWORD PTR [r10+rax*8]
   4c330:	pxor   xmm3,xmm3
   4c334:	mov    r9d,0x1
   4c33a:	cvtsi2sd xmm3,edi
   4c33e:	divsd  xmm0,xmm3
   4c342:	addsd  xmm2,xmm0
   4c346:	lea    rsi,[rax+0x1]
   4c34a:	cmp    rax,rdx
   4c34d:	je     4c370 <RCModelEstimator+0xe0>
   4c34f:	mov    rax,rsi
   4c352:	movsd  xmm0,QWORD PTR [r8+rax*8]
   4c358:	mov    esi,DWORD PTR [rcx+rax*4]
   4c35b:	ucomisd xmm0,xmm1
   4c35f:	jp     4c320 <RCModelEstimator+0x90>
   4c361:	jne    4c320 <RCModelEstimator+0x90>
   4c363:	test   esi,esi
   4c365:	je     4c32a <RCModelEstimator+0x9a>
   4c367:	lea    rsi,[rax+0x1]
   4c36b:	cmp    rax,rdx
   4c36e:	jne    4c34f <RCModelEstimator+0xbf>
   4c370:	test   r9b,r9b
   4c373:	je     4c37d <RCModelEstimator+0xed>
   4c375:	movsd  QWORD PTR [rip+0x91673],xmm2        # dd9f0 <m_X1>
   4c37d:	test   edi,edi
   4c37f:	jle    4c467 <RCModelEstimator+0x1d7>
   4c385:	test   r11d,r11d
   4c388:	je     4c467 <RCModelEstimator+0x1d7>
   4c38e:	pxor   xmm1,xmm1
   4c392:	xor    eax,eax
   4c394:	movsd  xmm3,QWORD PTR [rip+0x2642c]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4c39c:	lea    rdi,[rip+0x91b1d]        # ddec0 <m_rgRp>
   4c3a3:	movapd xmm6,xmm1
   4c3a7:	movapd xmm2,xmm1
   4c3ab:	movapd xmm4,xmm1
   4c3af:	movapd xmm7,xmm1
   4c3b3:	jmp    4c3bb <RCModelEstimator+0x12b>
   4c3b5:	nop    DWORD PTR [rax]
   4c3b8:	mov    rax,rsi
   4c3bb:	mov    esi,DWORD PTR [rcx+rax*4]
   4c3be:	test   esi,esi
   4c3c0:	jne    4c400 <RCModelEstimator+0x170>
   4c3c2:	movsd  xmm0,QWORD PTR [r8+rax*8]
   4c3c8:	movapd xmm5,xmm3
   4c3cc:	movapd xmm8,xmm3
   4c3d1:	addsd  xmm7,xmm3
   4c3d5:	divsd  xmm5,xmm0
   4c3d9:	addsd  xmm4,xmm5
   4c3dd:	movapd xmm5,xmm0
   4c3e1:	mulsd  xmm5,xmm0
   4c3e5:	divsd  xmm8,xmm5
   4c3ea:	movsd  xmm5,QWORD PTR [rdi+rax*8]
   4c3ef:	mulsd  xmm0,xmm5
   4c3f3:	addsd  xmm1,xmm5
   4c3f7:	addsd  xmm6,xmm0
   4c3fb:	addsd  xmm2,xmm8
   4c400:	lea    rsi,[rax+0x1]
   4c404:	cmp    rdx,rax
   4c407:	jne    4c3b8 <RCModelEstimator+0x128>
   4c409:	movapd xmm3,xmm4
   4c40d:	movapd xmm0,xmm7
   4c411:	mulsd  xmm3,xmm4
   4c415:	mulsd  xmm0,xmm2
   4c419:	subsd  xmm0,xmm3
   4c41d:	movapd xmm3,xmm0
   4c421:	andpd  xmm3,XMMWORD PTR [rip+0x27147]        # 73570 <quant_coef+0x8b0>
   4c429:	comisd xmm3,QWORD PTR [rip+0x2b107]        # 77538 <THETA+0x98>
   4c431:	jbe    4c4a8 <RCModelEstimator+0x218>
   4c433:	mulsd  xmm2,xmm6
   4c437:	movapd xmm3,xmm4
   4c43b:	mulsd  xmm3,xmm1
   4c43f:	mulsd  xmm4,xmm6
   4c443:	mulsd  xmm1,xmm7
   4c447:	subsd  xmm2,xmm3
   4c44b:	subsd  xmm1,xmm4
   4c44f:	divsd  xmm2,xmm0
   4c453:	divsd  xmm1,xmm0
   4c457:	movsd  QWORD PTR [rip+0x91591],xmm2        # dd9f0 <m_X1>
   4c45f:	movsd  QWORD PTR [rip+0x90f19],xmm1        # dd380 <m_X2>
   4c467:	mov    rax,QWORD PTR [rip+0x3c142]        # 885b0 <img>
   4c46e:	mov    eax,DWORD PTR [rax+0x18]
   4c471:	test   eax,eax
   4c473:	jne    4c4a0 <RCModelEstimator+0x210>
   4c475:	movsd  xmm0,QWORD PTR [rip+0x91573]        # dd9f0 <m_X1>
   4c47d:	movsd  QWORD PTR [rip+0x91afb],xmm0        # ddf80 <Pm_X1>
   4c485:	movsd  xmm0,QWORD PTR [rip+0x90ef3]        # dd380 <m_X2>
   4c48d:	movsd  QWORD PTR [rip+0x914ab],xmm0        # dd940 <Pm_X2>
   4c495:	ret    
   4c496:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c4a0:	ret    
   4c4a1:	nop    DWORD PTR [rax+0x0]
   4c4a8:	divsd  xmm6,xmm7
   4c4ac:	movsd  QWORD PTR [rip+0x9153c],xmm6        # dd9f0 <m_X1>
   4c4b4:	jmp    4c467 <RCModelEstimator+0x1d7>
   4c4b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c4c0:	mov    QWORD PTR [rip+0x90eb5],0x0        # dd380 <m_X2>
   4c4cb:	mov    QWORD PTR [rip+0x9151a],0x0        # dd9f0 <m_X1>
   4c4d6:	jmp    4c467 <RCModelEstimator+0x1d7>
   4c4d8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004c4e0 <ComputeFrameMAD>:
   4c4e0:	endbr64 
   4c4e4:	mov    rax,QWORD PTR [rip+0x3c0c5]        # 885b0 <img>
   4c4eb:	mov    esi,DWORD PTR [rax+0x11ba0]
   4c4f1:	test   esi,esi
   4c4f3:	jle    4c530 <ComputeFrameMAD+0x50>
   4c4f5:	mov    rdx,QWORD PTR [rax+0x11b88]
   4c4fc:	lea    ecx,[rsi-0x1]
   4c4ff:	pxor   xmm0,xmm0
   4c503:	lea    rax,[rdx+0x8]
   4c507:	lea    rcx,[rax+rcx*8]
   4c50b:	jmp    4c514 <ComputeFrameMAD+0x34>
   4c50d:	nop    DWORD PTR [rax]
   4c510:	add    rax,0x8
   4c514:	addsd  xmm0,QWORD PTR [rdx]
   4c518:	mov    rdx,rax
   4c51b:	cmp    rax,rcx
   4c51e:	jne    4c510 <ComputeFrameMAD+0x30>
   4c520:	pxor   xmm1,xmm1
   4c524:	cvtsi2sd xmm1,esi
   4c528:	divsd  xmm0,xmm1
   4c52c:	ret    
   4c52d:	nop    DWORD PTR [rax]
   4c530:	pxor   xmm1,xmm1
   4c534:	pxor   xmm0,xmm0
   4c538:	cvtsi2sd xmm1,esi
   4c53c:	divsd  xmm0,xmm1
   4c540:	ret    
   4c541:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4c54c:	nop    DWORD PTR [rax+0x0]

000000000004c550 <MADModelEstimator>:
   4c550:	endbr64 
   4c554:	test   edi,edi
   4c556:	jle    4c760 <MADModelEstimator+0x210>
   4c55c:	lea    rcx,[rip+0x90bfd]        # dd160 <PictureRejected>
   4c563:	lea    edx,[rdi-0x1]
   4c566:	lea    rsi,[rcx+0x4]
   4c56a:	mov    rax,rcx
   4c56d:	lea    rsi,[rsi+rdx*4]
   4c571:	nop    DWORD PTR [rax+0x0]
   4c578:	cmp    DWORD PTR [rax],0x1
   4c57b:	adc    edi,0xffffffff
   4c57e:	add    rax,0x4
   4c582:	cmp    rsi,rax
   4c585:	jne    4c578 <MADModelEstimator+0x28>
   4c587:	mov    QWORD PTR [rip+0x913f6],0x0        # dd988 <MADPictureC2>
   4c592:	xor    eax,eax
   4c594:	lea    r8,[rip+0x90b05]        # dd0a0 <PictureMAD>
   4c59b:	mov    QWORD PTR [rip+0x90c1a],0x0        # dd1c0 <MADPictureC1>
   4c5a6:	jmp    4c5b3 <MADModelEstimator+0x63>
   4c5a8:	nop    DWORD PTR [rax+rax*1+0x0]
   4c5b0:	mov    rax,rsi
   4c5b3:	mov    r9d,DWORD PTR [rcx+rax*4]
   4c5b7:	test   r9d,r9d
   4c5ba:	jne    4c5c2 <MADModelEstimator+0x72>
   4c5bc:	movsd  xmm2,QWORD PTR [r8+rax*8]
   4c5c2:	lea    rsi,[rax+0x1]
   4c5c6:	cmp    rax,rdx
   4c5c9:	jne    4c5b0 <MADModelEstimator+0x60>
   4c5cb:	xor    eax,eax
   4c5cd:	xor    r9d,r9d
   4c5d0:	pxor   xmm3,xmm3
   4c5d4:	xor    r11d,r11d
   4c5d7:	lea    r10,[rip+0x90c22]        # dd200 <ReferenceMAD>
   4c5de:	jmp    4c612 <MADModelEstimator+0xc2>
   4c5e0:	test   esi,esi
   4c5e2:	jne    4c606 <MADModelEstimator+0xb6>
   4c5e4:	mov    r11d,0x1
   4c5ea:	pxor   xmm1,xmm1
   4c5ee:	mov    r9d,0x1
   4c5f4:	cvtsi2sd xmm1,edi
   4c5f8:	mulsd  xmm1,QWORD PTR [r10+rax*8]
   4c5fe:	divsd  xmm0,xmm1
   4c602:	addsd  xmm3,xmm0
   4c606:	lea    rsi,[rax+0x1]
   4c60a:	cmp    rax,rdx
   4c60d:	je     4c630 <MADModelEstimator+0xe0>
   4c60f:	mov    rax,rsi
   4c612:	movsd  xmm0,QWORD PTR [r8+rax*8]
   4c618:	mov    esi,DWORD PTR [rcx+rax*4]
   4c61b:	ucomisd xmm0,xmm2
   4c61f:	jp     4c5e0 <MADModelEstimator+0x90>
   4c621:	jne    4c5e0 <MADModelEstimator+0x90>
   4c623:	test   esi,esi
   4c625:	je     4c5ea <MADModelEstimator+0x9a>
   4c627:	lea    rsi,[rax+0x1]
   4c62b:	cmp    rax,rdx
   4c62e:	jne    4c60f <MADModelEstimator+0xbf>
   4c630:	test   r9b,r9b
   4c633:	je     4c63d <MADModelEstimator+0xed>
   4c635:	movsd  QWORD PTR [rip+0x90b83],xmm3        # dd1c0 <MADPictureC1>
   4c63d:	test   edi,edi
   4c63f:	jle    4c714 <MADModelEstimator+0x1c4>
   4c645:	test   r11d,r11d
   4c648:	je     4c714 <MADModelEstimator+0x1c4>
   4c64e:	pxor   xmm1,xmm1
   4c652:	xor    eax,eax
   4c654:	movsd  xmm7,QWORD PTR [rip+0x2616c]        # 727c8 <INIT_MB_TYPE_I+0x108>
   4c65c:	lea    rdi,[rip+0x90b9d]        # dd200 <ReferenceMAD>
   4c663:	movapd xmm6,xmm1
   4c667:	movapd xmm3,xmm1
   4c66b:	movapd xmm4,xmm1
   4c66f:	movapd xmm2,xmm1
   4c673:	jmp    4c67b <MADModelEstimator+0x12b>
   4c675:	nop    DWORD PTR [rax]
   4c678:	mov    rax,rsi
   4c67b:	mov    esi,DWORD PTR [rcx+rax*4]
   4c67e:	test   esi,esi
   4c680:	jne    4c6ad <MADModelEstimator+0x15d>
   4c682:	movsd  xmm0,QWORD PTR [rdi+rax*8]
   4c687:	addsd  xmm2,xmm7
   4c68b:	movapd xmm5,xmm0
   4c68f:	addsd  xmm4,xmm0
   4c693:	mulsd  xmm5,xmm0
   4c697:	addsd  xmm3,xmm5
   4c69b:	movsd  xmm5,QWORD PTR [r8+rax*8]
   4c6a1:	mulsd  xmm0,xmm5
   4c6a5:	addsd  xmm6,xmm5
   4c6a9:	addsd  xmm1,xmm0
   4c6ad:	lea    rsi,[rax+0x1]
   4c6b1:	cmp    rdx,rax
   4c6b4:	jne    4c678 <MADModelEstimator+0x128>
   4c6b6:	movapd xmm5,xmm4
   4c6ba:	movapd xmm0,xmm2
   4c6be:	mulsd  xmm5,xmm4
   4c6c2:	mulsd  xmm0,xmm3
   4c6c6:	subsd  xmm0,xmm5
   4c6ca:	movapd xmm5,xmm0
   4c6ce:	andpd  xmm5,XMMWORD PTR [rip+0x26e9a]        # 73570 <quant_coef+0x8b0>
   4c6d6:	comisd xmm5,QWORD PTR [rip+0x2ae5a]        # 77538 <THETA+0x98>
   4c6de:	jbe    4c750 <MADModelEstimator+0x200>
   4c6e0:	mulsd  xmm3,xmm6
   4c6e4:	movapd xmm5,xmm4
   4c6e8:	mulsd  xmm5,xmm1
   4c6ec:	mulsd  xmm4,xmm6
   4c6f0:	mulsd  xmm1,xmm2
   4c6f4:	subsd  xmm3,xmm5
   4c6f8:	subsd  xmm1,xmm4
   4c6fc:	divsd  xmm3,xmm0
   4c700:	divsd  xmm1,xmm0
   4c704:	movsd  QWORD PTR [rip+0x9127c],xmm3        # dd988 <MADPictureC2>
   4c70c:	movsd  QWORD PTR [rip+0x90aac],xmm1        # dd1c0 <MADPictureC1>
   4c714:	mov    rax,QWORD PTR [rip+0x3be95]        # 885b0 <img>
   4c71b:	mov    eax,DWORD PTR [rax+0x18]
   4c71e:	test   eax,eax
   4c720:	jne    4c748 <MADModelEstimator+0x1f8>
   4c722:	movsd  xmm0,QWORD PTR [rip+0x90a96]        # dd1c0 <MADPictureC1>
   4c72a:	movsd  QWORD PTR [rip+0x90aa6],xmm0        # dd1d8 <PMADPictureC1>
   4c732:	movsd  xmm0,QWORD PTR [rip+0x9124e]        # dd988 <MADPictureC2>
   4c73a:	movsd  QWORD PTR [rip+0x9125e],xmm0        # dd9a0 <PMADPictureC2>
   4c742:	ret    
   4c743:	nop    DWORD PTR [rax+rax*1+0x0]
   4c748:	ret    
   4c749:	nop    DWORD PTR [rax+0x0]
   4c750:	divsd  xmm6,xmm4
   4c754:	movsd  QWORD PTR [rip+0x90a64],xmm6        # dd1c0 <MADPictureC1>
   4c75c:	jmp    4c714 <MADModelEstimator+0x1c4>
   4c75e:	xchg   ax,ax
   4c760:	mov    QWORD PTR [rip+0x9121d],0x0        # dd988 <MADPictureC2>
   4c76b:	mov    QWORD PTR [rip+0x90a4a],0x0        # dd1c0 <MADPictureC1>
   4c776:	jmp    4c714 <MADModelEstimator+0x1c4>
   4c778:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004c780 <updateMADModel>:
   4c780:	endbr64 
   4c784:	push   r15
   4c786:	push   r14
   4c788:	push   r13
   4c78a:	push   r12
   4c78c:	push   rbp
   4c78d:	push   rbx
   4c78e:	sub    rsp,0xc8
   4c795:	mov    rdi,QWORD PTR [rip+0x3be14]        # 885b0 <img>
   4c79c:	mov    rax,QWORD PTR fs:0x28
   4c7a5:	mov    QWORD PTR [rsp+0xb8],rax
   4c7ad:	xor    eax,eax
   4c7af:	mov    esi,DWORD PTR [rdi+0x11b74]
   4c7b5:	test   esi,esi
   4c7b7:	jle    4ca20 <updateMADModel+0x2a0>
   4c7bd:	mov    r9d,DWORD PTR [rdi+0x11bac]
   4c7c4:	mov    r8d,DWORD PTR [rdi+0x11ba0]
   4c7cb:	cmp    r9d,r8d
   4c7ce:	je     4c7dd <updateMADModel+0x5d>
   4c7d0:	imul   esi,DWORD PTR [rip+0x91149]        # dd920 <TotalNumberofBasicUnit>
   4c7d7:	add    esi,DWORD PTR [rip+0x911e7]        # dd9c4 <CodedBasicUnit>
   4c7dd:	lea    rcx,[rip+0x907f4]        # dcfd8 <bit_rate+0x8>
   4c7e4:	lea    rdx,[rip+0x90a0d]        # dd1f8 <PreAveMBHeader+0x8>
   4c7eb:	mov    ebx,0x98
   4c7f0:	lea    rax,[rcx+0x8]
   4c7f4:	lea    rbp,[rip+0x908a5]        # dd0a0 <PictureMAD>
   4c7fb:	lea    r12,[rdx+0x8]
   4c7ff:	nop
   4c800:	movsd  xmm0,QWORD PTR [rcx+rbx*1]
   4c805:	movsd  QWORD PTR [rax+rbx*1],xmm0
   4c80a:	movsd  QWORD PTR [rbp+rbx*1+0x0],xmm0
   4c810:	movsd  xmm0,QWORD PTR [rdx+rbx*1]
   4c815:	movsd  QWORD PTR [r12+rbx*1],xmm0
   4c81b:	sub    rbx,0x8
   4c81f:	jne    4c800 <updateMADModel+0x80>
   4c821:	movsd  xmm1,QWORD PTR [rip+0x90a87]        # dd2b0 <CurrentFrameMAD>
   4c829:	movsd  QWORD PTR [rax],xmm1
   4c82d:	movsd  QWORD PTR [rbp+0x0],xmm1
   4c832:	cmp    r9d,r8d
   4c835:	je     4c888 <updateMADModel+0x108>
   4c837:	mov    rdx,QWORD PTR [rip+0x3bd7a]        # 885b8 <input>
   4c83e:	mov    eax,DWORD PTR [rip+0x910dc]        # dd920 <TotalNumberofBasicUnit>
   4c844:	sub    eax,0x1
   4c847:	sub    eax,DWORD PTR [rip+0x910fb]        # dd948 <NumberofBasicUnit>
   4c84d:	cmp    DWORD PTR [rdx+0xb40],0x2
   4c854:	cdqe   
   4c856:	je     4c862 <updateMADModel+0xe2>
   4c858:	mov    edx,DWORD PTR [rdx+0xb44]
   4c85e:	test   edx,edx
   4c860:	je     4c86f <updateMADModel+0xef>
   4c862:	cmp    DWORD PTR [rdi+0x11b98],0x1
   4c869:	je     4caa3 <updateMADModel+0x323>
   4c86f:	mov    rdx,QWORD PTR [rip+0x910c2]        # dd938 <BUPFMAD>
   4c876:	movsd  xmm0,QWORD PTR [rdx+rax*8]
   4c87b:	movsd  QWORD PTR [rip+0x9097d],xmm0        # dd200 <ReferenceMAD>
   4c883:	jmp    4c896 <updateMADModel+0x116>
   4c885:	nop    DWORD PTR [rax]
   4c888:	movsd  xmm0,QWORD PTR [rip+0x90818]        # dd0a8 <PictureMAD+0x8>
   4c890:	movsd  QWORD PTR [r12],xmm0
   4c896:	movsd  xmm0,QWORD PTR [rip+0x9093a]        # dd1d8 <PMADPictureC1>
   4c89e:	movsd  QWORD PTR [rip+0x9091a],xmm0        # dd1c0 <MADPictureC1>
   4c8a6:	movsd  xmm0,QWORD PTR [rip+0x910f2]        # dd9a0 <PMADPictureC2>
   4c8ae:	movsd  QWORD PTR [rip+0x910d2],xmm0        # dd988 <MADPictureC2>
   4c8b6:	movsd  xmm0,QWORD PTR [rip+0x910f2]        # dd9b0 <PreviousFrameMAD>
   4c8be:	comisd xmm1,xmm0
   4c8c2:	jbe    4ca50 <updateMADModel+0x2d0>
   4c8c8:	divsd  xmm0,xmm1
   4c8cc:	mulsd  xmm0,QWORD PTR [rip+0x2ac6c]        # 77540 <THETA+0xa0>
   4c8d4:	cvttsd2si eax,xmm0
   4c8d8:	lea    r14d,[rsi-0x1]
   4c8dc:	mov    r13d,0x14
   4c8e2:	lea    r15,[rip+0x90877]        # dd160 <PictureRejected>
   4c8e9:	cmp    r14d,eax
   4c8ec:	cmovg  r14d,eax
   4c8f0:	mov    eax,0x1
   4c8f5:	test   r14d,r14d
   4c8f8:	cmovle r14d,eax
   4c8fc:	mov    eax,DWORD PTR [rip+0x91586]        # dde88 <MADm_windowSize>
   4c902:	lea    edx,[rax+0x1]
   4c905:	cmp    eax,r14d
   4c908:	mov    rax,r15
   4c90b:	cmovl  r14d,edx
   4c90f:	lea    rdx,[r15+0x50]
   4c913:	cmp    r14d,0x14
   4c917:	cmovle r13d,r14d
   4c91b:	mov    DWORD PTR [rip+0x91566],r13d        # dde88 <MADm_windowSize>
   4c922:	nop    WORD PTR [rax+rax*1+0x0]
   4c928:	mov    DWORD PTR [rax],0x0
   4c92e:	add    rax,0x4
   4c932:	cmp    rdx,rax
   4c935:	jne    4c928 <updateMADModel+0x1a8>
   4c937:	mov    eax,DWORD PTR [rdi+0x18]
   4c93a:	test   eax,eax
   4c93c:	jne    4c946 <updateMADModel+0x1c6>
   4c93e:	movsd  QWORD PTR [rip+0x9106a],xmm1        # dd9b0 <PreviousFrameMAD>
   4c946:	mov    edi,r13d
   4c949:	call   4c550 <MADModelEstimator>
   4c94e:	test   r14d,r14d
   4c951:	jle    4ca6d <updateMADModel+0x2ed>
   4c957:	pxor   xmm4,xmm4
   4c95b:	movsd  xmm3,QWORD PTR [rip+0x9085d]        # dd1c0 <MADPictureC1>
   4c963:	xor    eax,eax
   4c965:	lea    rdx,[rsp+0x10]
   4c96a:	movsd  xmm2,QWORD PTR [rip+0x91016]        # dd988 <MADPictureC2>
   4c972:	movapd xmm0,xmm4
   4c976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c980:	movsd  xmm1,QWORD PTR [r12+rax*8]
   4c986:	mulsd  xmm1,xmm3
   4c98a:	addsd  xmm1,xmm2
   4c98e:	subsd  xmm1,QWORD PTR [rbp+rax*8+0x0]
   4c994:	movsd  QWORD PTR [rdx+rax*8],xmm1
   4c999:	mulsd  xmm1,xmm1
   4c99d:	add    rax,0x1
   4c9a1:	addsd  xmm0,xmm1
   4c9a5:	cmp    r13d,eax
   4c9a8:	jg     4c980 <updateMADModel+0x200>
   4c9aa:	movapd xmm1,xmm4
   4c9ae:	cmp    r14d,0x2
   4c9b2:	jne    4ca75 <updateMADModel+0x2f5>
   4c9b8:	movq   xmm2,QWORD PTR [rip+0x26bb0]        # 73570 <quant_coef+0x8b0>
   4c9c0:	movsd  xmm0,QWORD PTR [rdx+rbx*8]
   4c9c5:	andpd  xmm0,xmm2
   4c9c9:	comisd xmm0,xmm1
   4c9cd:	jbe    4c9d7 <updateMADModel+0x257>
   4c9cf:	mov    DWORD PTR [r15+rbx*4],0x1
   4c9d7:	add    rbx,0x1
   4c9db:	cmp    r13d,ebx
   4c9de:	jg     4c9c0 <updateMADModel+0x240>
   4c9e0:	mov    DWORD PTR [rip+0x90776],0x0        # dd160 <PictureRejected>
   4c9ea:	mov    rax,QWORD PTR [rsp+0xb8]
   4c9f2:	xor    rax,QWORD PTR fs:0x28
   4c9fb:	jne    4cabc <updateMADModel+0x33c>
   4ca01:	add    rsp,0xc8
   4ca08:	mov    edi,r13d
   4ca0b:	pop    rbx
   4ca0c:	pop    rbp
   4ca0d:	pop    r12
   4ca0f:	pop    r13
   4ca11:	pop    r14
   4ca13:	pop    r15
   4ca15:	jmp    4c550 <MADModelEstimator>
   4ca1a:	nop    WORD PTR [rax+rax*1+0x0]
   4ca20:	mov    rax,QWORD PTR [rsp+0xb8]
   4ca28:	xor    rax,QWORD PTR fs:0x28
   4ca31:	jne    4cabc <updateMADModel+0x33c>
   4ca37:	add    rsp,0xc8
   4ca3e:	pop    rbx
   4ca3f:	pop    rbp
   4ca40:	pop    r12
   4ca42:	pop    r13
   4ca44:	pop    r14
   4ca46:	pop    r15
   4ca48:	ret    
   4ca49:	nop    DWORD PTR [rax+0x0]
   4ca50:	movapd xmm5,xmm1
   4ca54:	divsd  xmm5,xmm0
   4ca58:	movsd  xmm0,QWORD PTR [rip+0x2aae0]        # 77540 <THETA+0xa0>
   4ca60:	mulsd  xmm0,xmm5
   4ca64:	cvttsd2si eax,xmm0
   4ca68:	jmp    4c8d8 <updateMADModel+0x158>
   4ca6d:	pxor   xmm4,xmm4
   4ca71:	movapd xmm0,xmm4
   4ca75:	pxor   xmm1,xmm1
   4ca79:	cvtsi2sd xmm1,r13d
   4ca7e:	divsd  xmm0,xmm1
   4ca82:	ucomisd xmm4,xmm0
   4ca86:	movapd xmm1,xmm0
   4ca8a:	sqrtsd xmm1,xmm1
   4ca8e:	ja     4cac1 <updateMADModel+0x341>
   4ca90:	lea    rdx,[rsp+0x10]
   4ca95:	test   r14d,r14d
   4ca98:	jg     4c9b8 <updateMADModel+0x238>
   4ca9e:	jmp    4c9e0 <updateMADModel+0x260>
   4caa3:	mov    rdx,QWORD PTR [rip+0x9071e]        # dd1c8 <FCBUPFMAD>
   4caaa:	movsd  xmm0,QWORD PTR [rdx+rax*8]
   4caaf:	movsd  QWORD PTR [rip+0x90749],xmm0        # dd200 <ReferenceMAD>
   4cab7:	jmp    4c896 <updateMADModel+0x116>
   4cabc:	call   4390 <__stack_chk_fail@plt>
   4cac1:	movsd  QWORD PTR [rsp+0x8],xmm1
   4cac7:	call   4520 <sqrt@plt>
   4cacc:	movsd  xmm1,QWORD PTR [rsp+0x8]
   4cad2:	jmp    4ca90 <updateMADModel+0x310>
   4cad4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4cadf:	nop

000000000004cae0 <updateRCModel>:
   4cae0:	endbr64 
   4cae4:	push   r14
   4cae6:	push   r13
   4cae8:	push   r12
   4caea:	push   rbp
   4caeb:	push   rbx
   4caec:	sub    rsp,0xc0
   4caf3:	mov    r8,QWORD PTR [rip+0x3bab6]        # 885b0 <img>
   4cafa:	mov    rax,QWORD PTR fs:0x28
   4cb03:	mov    QWORD PTR [rsp+0xb8],rax
   4cb0b:	xor    eax,eax
   4cb0d:	mov    eax,DWORD PTR [r8+0x18]
   4cb11:	test   eax,eax
   4cb13:	jne    4cec6 <updateRCModel+0x3e6>
   4cb19:	mov    r9d,DWORD PTR [r8+0x11bac]
   4cb20:	mov    r10d,DWORD PTR [r8+0x11ba0]
   4cb27:	cmp    r9d,r10d
   4cb2a:	je     4cef0 <updateRCModel+0x410>
   4cb30:	pxor   xmm0,xmm0
   4cb34:	mov    rdi,QWORD PTR [rip+0x3ba7d]        # 885b8 <input>
   4cb3b:	movsd  xmm1,QWORD PTR [r8+0x11b60]
   4cb44:	cvtsi2sd xmm0,r9d
   4cb49:	mov    r11d,DWORD PTR [rdi+0xb44]
   4cb50:	divsd  xmm1,xmm0
   4cb54:	test   r11d,r11d
   4cb57:	je     4cb6c <updateRCModel+0x8c>
   4cb59:	mov    edx,DWORD PTR [r8+0x11b98]
   4cb60:	test   edx,edx
   4cb62:	jne    4cb6c <updateRCModel+0x8c>
   4cb64:	mulsd  xmm1,QWORD PTR [rip+0x262ec]        # 72e58 <quant_coef+0x198>
   4cb6c:	mov    r12d,DWORD PTR [rip+0x90dad]        # dd920 <TotalNumberofBasicUnit>
   4cb73:	mov    esi,DWORD PTR [rip+0x90dcf]        # dd948 <NumberofBasicUnit>
   4cb79:	mov    QWORD PTR [r8+0x11b60],0x0
   4cb84:	movsd  QWORD PTR [rip+0x90724],xmm1        # dd2b0 <CurrentFrameMAD>
   4cb8c:	mov    ecx,r12d
   4cb8f:	sub    ecx,esi
   4cb91:	mov    DWORD PTR [rip+0x90e2d],ecx        # dd9c4 <CodedBasicUnit>
   4cb97:	test   ecx,ecx
   4cb99:	jle    4cc0b <updateRCModel+0x12b>
   4cb9b:	lea    edx,[rcx-0x1]
   4cb9e:	pxor   xmm0,xmm0
   4cba2:	pxor   xmm2,xmm2
   4cba6:	mov    ebx,DWORD PTR [rip+0x90e28]        # dd9d4 <PAveHeaderBits3>
   4cbac:	imul   edx,DWORD PTR [rip+0x907c9]        # dd37c <PAveHeaderBits1>
   4cbb3:	add    edx,DWORD PTR [r8+0x11b54]
   4cbba:	cvtsi2sd xmm0,edx
   4cbbe:	cvtsi2sd xmm2,ecx
   4cbc2:	divsd  xmm0,xmm2
   4cbc6:	movsd  xmm2,QWORD PTR [rip+0x2628a]        # 72e58 <quant_coef+0x198>
   4cbce:	addsd  xmm0,xmm2
   4cbd2:	cvttsd2si edx,xmm0
   4cbd6:	mov    DWORD PTR [rip+0x907a0],edx        # dd37c <PAveHeaderBits1>
   4cbdc:	test   ebx,ebx
   4cbde:	je     4cc05 <updateRCModel+0x125>
   4cbe0:	imul   edx,ecx
   4cbe3:	pxor   xmm0,xmm0
   4cbe7:	pxor   xmm3,xmm3
   4cbeb:	imul   ebx,esi
   4cbee:	cvtsi2sd xmm3,r12d
   4cbf3:	add    edx,ebx
   4cbf5:	cvtsi2sd xmm0,edx
   4cbf9:	divsd  xmm0,xmm3
   4cbfd:	addsd  xmm0,xmm2
   4cc01:	cvttsd2si edx,xmm0
   4cc05:	mov    DWORD PTR [rip+0x90df9],edx        # dda04 <PAveHeaderBits2>
   4cc0b:	lea    edx,[r12-0x1]
   4cc10:	sub    edx,esi
   4cc12:	cmp    DWORD PTR [rdi+0xb40],0x2
   4cc19:	movsxd rdx,edx
   4cc1c:	je     4cc23 <updateRCModel+0x143>
   4cc1e:	test   r11d,r11d
   4cc21:	je     4cc31 <updateRCModel+0x151>
   4cc23:	cmp    DWORD PTR [r8+0x11b98],0x1
   4cc2b:	je     4cf69 <updateRCModel+0x489>
   4cc31:	mov    rdi,QWORD PTR [rip+0x91268]        # ddea0 <BUCFMAD>
   4cc38:	movsd  QWORD PTR [rdi+rdx*8],xmm1
   4cc3d:	mov    edx,DWORD PTR [r8+0x11b74]
   4cc44:	movsd  xmm1,QWORD PTR [rip+0x90664]        # dd2b0 <CurrentFrameMAD>
   4cc4c:	test   esi,esi
   4cc4e:	jne    4cf58 <updateRCModel+0x478>
   4cc54:	lea    r12d,[rdx-0x1]
   4cc58:	pxor   xmm9,xmm9
   4cc5d:	imul   r12d,ecx
   4cc61:	add    r12d,ecx
   4cc64:	mov    edx,DWORD PTR [r8+0x11b4c]
   4cc6b:	lea    rdi,[rip+0x90646]        # dd2b8 <CurrentFrameMAD+0x8>
   4cc72:	lea    rcx,[rip+0x907df]        # dd458 <TargetBufferLevel+0x8>
   4cc79:	mov    ebx,0x98
   4cc7e:	lea    rsi,[rdi+0x8]
   4cc82:	lea    r13,[rip+0x90717]        # dd3a0 <m_rgQp>
   4cc89:	mov    DWORD PTR [rip+0x90ccd],edx        # dd95c <PPreHeader>
   4cc8f:	lea    rbp,[rip+0x9122a]        # ddec0 <m_rgRp>
   4cc96:	lea    rdx,[rcx+0x8]
   4cc9a:	nop    WORD PTR [rax+rax*1+0x0]
   4cca0:	movsd  xmm0,QWORD PTR [rdi+rbx*1]
   4cca5:	movsd  QWORD PTR [rsi+rbx*1],xmm0
   4ccaa:	movsd  QWORD PTR [r13+rbx*1+0x0],xmm0
   4ccb1:	movsd  xmm0,QWORD PTR [rcx+rbx*1]
   4ccb6:	movsd  QWORD PTR [rdx+rbx*1],xmm0
   4ccbb:	movsd  QWORD PTR [rbp+rbx*1+0x0],xmm0
   4ccc1:	sub    rbx,0x8
   4ccc5:	jne    4cca0 <updateRCModel+0x1c0>
   4ccc7:	movsxd rdx,DWORD PTR [rip+0x906aa]        # dd378 <m_Qc>
   4ccce:	mov    rcx,rdx
   4ccd1:	imul   rdx,rdx,0x2aaaaaab
   4ccd8:	mov    esi,ecx
   4ccda:	mov    edi,ecx
   4ccdc:	sar    esi,0x1f
   4ccdf:	shr    rdx,0x20
   4cce3:	sub    edx,esi
   4cce5:	lea    esi,[rdx+rdx*2]
   4cce8:	add    esi,esi
   4ccea:	sub    edi,esi
   4ccec:	movsxd rsi,edi
   4ccef:	lea    rdi,[rip+0x2a76a]        # 77460 <QP2QSTEP.6024>
   4ccf6:	movsd  xmm0,QWORD PTR [rdi+rsi*8]
   4ccfb:	cmp    ecx,0x5
   4ccfe:	jle    4cd0b <updateRCModel+0x22b>
   4cd00:	add    eax,0x1
   4cd03:	addsd  xmm0,xmm0
   4cd07:	cmp    eax,edx
   4cd09:	jl     4cd00 <updateRCModel+0x220>
   4cd0b:	movsd  QWORD PTR [rip+0x905ad],xmm0        # dd2c0 <Pm_rgQp>
   4cd13:	cmp    r9d,r10d
   4cd16:	je     4cfd0 <updateRCModel+0x4f0>
   4cd1c:	pxor   xmm2,xmm2
   4cd20:	cvtsi2sd xmm2,DWORD PTR [r8+0x11b58]
   4cd29:	divsd  xmm2,xmm1
   4cd2d:	movsd  QWORD PTR [rip+0x9066b],xmm0        # dd3a0 <m_rgQp>
   4cd35:	movsd  xmm0,QWORD PTR [rip+0x91243]        # ddf80 <Pm_X1>
   4cd3d:	movsd  QWORD PTR [rip+0x9071b],xmm2        # dd460 <Pm_rgRp>
   4cd45:	movsd  QWORD PTR [rip+0x90ca3],xmm0        # dd9f0 <m_X1>
   4cd4d:	movsd  xmm0,QWORD PTR [rip+0x90beb]        # dd940 <Pm_X2>
   4cd55:	movsd  QWORD PTR [rip+0x91163],xmm2        # ddec0 <m_rgRp>
   4cd5d:	movsd  QWORD PTR [rip+0x9061b],xmm0        # dd380 <m_X2>
   4cd65:	movsd  xmm0,QWORD PTR [rip+0x90c43]        # dd9b0 <PreviousFrameMAD>
   4cd6d:	comisd xmm1,xmm0
   4cd71:	jbe    4cf80 <updateRCModel+0x4a0>
   4cd77:	divsd  xmm0,xmm1
   4cd7b:	mulsd  xmm0,QWORD PTR [rip+0x2a7bd]        # 77540 <THETA+0xa0>
   4cd83:	cvttsd2si edi,xmm0
   4cd87:	test   edi,edi
   4cd89:	mov    eax,0x1
   4cd8e:	lea    r14,[rip+0x90c8b]        # dda20 <m_rgRejected>
   4cd95:	cmovle edi,eax
   4cd98:	mov    eax,DWORD PTR [rip+0x910fe]        # dde9c <m_windowSize>
   4cd9e:	cmp    r12d,edi
   4cda1:	lea    edx,[rax+0x1]
   4cda4:	cmovle edi,r12d
   4cda8:	cmp    eax,edi
   4cdaa:	mov    eax,0x14
   4cdaf:	cmovl  edi,edx
   4cdb2:	lea    rdx,[r14+0x50]
   4cdb6:	cmp    edi,0x14
   4cdb9:	cmovg  edi,eax
   4cdbc:	mov    rax,r14
   4cdbf:	mov    DWORD PTR [rip+0x910d7],edi        # dde9c <m_windowSize>
   4cdc5:	nop    DWORD PTR [rax]
   4cdc8:	mov    DWORD PTR [rax],0x0
   4cdce:	add    rax,0x4
   4cdd2:	cmp    rdx,rax
   4cdd5:	jne    4cdc8 <updateRCModel+0x2e8>
   4cdd7:	call   4c290 <RCModelEstimator>
   4cddc:	mov    edi,DWORD PTR [rip+0x910ba]        # dde9c <m_windowSize>
   4cde2:	test   edi,edi
   4cde4:	jle    4cf99 <updateRCModel+0x4b9>
   4cdea:	lea    esi,[rdi-0x1]
   4cded:	movapd xmm0,xmm9
   4cdf2:	lea    rdx,[rsp+0x10]
   4cdf7:	xor    eax,eax
   4cdf9:	movsd  xmm4,QWORD PTR [rip+0x90bef]        # dd9f0 <m_X1>
   4ce01:	movsd  xmm3,QWORD PTR [rip+0x90577]        # dd380 <m_X2>
   4ce09:	nop    DWORD PTR [rax+0x0]
   4ce10:	movsd  xmm2,QWORD PTR [r13+rax*8+0x0]
   4ce17:	movapd xmm5,xmm3
   4ce1b:	movapd xmm6,xmm4
   4ce1f:	mov    rcx,rax
   4ce22:	divsd  xmm6,xmm2
   4ce26:	movapd xmm1,xmm2
   4ce2a:	mulsd  xmm1,xmm2
   4ce2e:	divsd  xmm5,xmm1
   4ce32:	movapd xmm1,xmm5
   4ce36:	addsd  xmm1,xmm6
   4ce3a:	subsd  xmm1,QWORD PTR [rbp+rax*8+0x0]
   4ce40:	movsd  QWORD PTR [rdx+rax*8],xmm1
   4ce45:	mulsd  xmm1,xmm1
   4ce49:	add    rax,0x1
   4ce4d:	addsd  xmm0,xmm1
   4ce51:	cmp    rsi,rcx
   4ce54:	jne    4ce10 <updateRCModel+0x330>
   4ce56:	movapd xmm1,xmm9
   4ce5b:	cmp    edi,0x2
   4ce5e:	jne    4cf9e <updateRCModel+0x4be>
   4ce64:	movq   xmm2,QWORD PTR [rip+0x26704]        # 73570 <quant_coef+0x8b0>
   4ce6c:	nop    DWORD PTR [rax+0x0]
   4ce70:	movsd  xmm0,QWORD PTR [rdx+rbx*8]
   4ce75:	andpd  xmm0,xmm2
   4ce79:	comisd xmm0,xmm1
   4ce7d:	jbe    4ce87 <updateRCModel+0x3a7>
   4ce7f:	mov    DWORD PTR [r14+rbx*4],0x1
   4ce87:	add    rbx,0x1
   4ce8b:	cmp    edi,ebx
   4ce8d:	jg     4ce70 <updateRCModel+0x390>
   4ce8f:	mov    DWORD PTR [rip+0x90b87],0x0        # dda20 <m_rgRejected>
   4ce99:	call   4c290 <RCModelEstimator>
   4ce9e:	cmp    r12d,0x1
   4cea2:	jg     4cff0 <updateRCModel+0x510>
   4cea8:	mov    rax,QWORD PTR [rip+0x3b701]        # 885b0 <img>
   4ceaf:	mov    eax,DWORD PTR [rax+0x18]
   4ceb2:	test   eax,eax
   4ceb4:	jne    4cec6 <updateRCModel+0x3e6>
   4ceb6:	movsd  xmm0,QWORD PTR [rip+0x903f2]        # dd2b0 <CurrentFrameMAD>
   4cebe:	movsd  QWORD PTR [rip+0x9011a],xmm0        # dcfe0 <PPictureMAD>
   4cec6:	mov    rax,QWORD PTR [rsp+0xb8]
   4cece:	xor    rax,QWORD PTR fs:0x28
   4ced7:	jne    4d028 <updateRCModel+0x548>
   4cedd:	add    rsp,0xc0
   4cee4:	pop    rbx
   4cee5:	pop    rbp
   4cee6:	pop    r12
   4cee8:	pop    r13
   4ceea:	pop    r14
   4ceec:	ret    
   4ceed:	nop    DWORD PTR [rax]
   4cef0:	test   r9d,r9d
   4cef3:	jle    4d019 <updateRCModel+0x539>
   4cef9:	mov    rcx,QWORD PTR [r8+0x11b88]
   4cf00:	lea    esi,[r9-0x1]
   4cf04:	pxor   xmm9,xmm9
   4cf09:	movapd xmm0,xmm9
   4cf0e:	lea    rdx,[rcx+0x8]
   4cf12:	lea    rsi,[rdx+rsi*8]
   4cf16:	jmp    4cf24 <updateRCModel+0x444>
   4cf18:	nop    DWORD PTR [rax+rax*1+0x0]
   4cf20:	add    rdx,0x8
   4cf24:	addsd  xmm0,QWORD PTR [rcx]
   4cf28:	mov    rcx,rdx
   4cf2b:	cmp    rdx,rsi
   4cf2e:	jne    4cf20 <updateRCModel+0x440>
   4cf30:	pxor   xmm1,xmm1
   4cf34:	mov    r12d,DWORD PTR [r8+0x11b74]
   4cf3b:	cvtsi2sd xmm1,r10d
   4cf40:	divsd  xmm0,xmm1
   4cf44:	movapd xmm1,xmm0
   4cf48:	movsd  QWORD PTR [rip+0x90360],xmm0        # dd2b0 <CurrentFrameMAD>
   4cf50:	jmp    4cc64 <updateRCModel+0x184>
   4cf55:	nop    DWORD PTR [rax]
   4cf58:	imul   r12d,edx
   4cf5c:	pxor   xmm9,xmm9
   4cf61:	add    r12d,ecx
   4cf64:	jmp    4cc64 <updateRCModel+0x184>
   4cf69:	mov    rdi,QWORD PTR [rip+0x90a78]        # dd9e8 <FCBUCFMAD>
   4cf70:	movsd  QWORD PTR [rdi+rdx*8],xmm1
   4cf75:	jmp    4cc3d <updateRCModel+0x15d>
   4cf7a:	nop    WORD PTR [rax+rax*1+0x0]
   4cf80:	divsd  xmm1,xmm0
   4cf84:	movsd  xmm0,QWORD PTR [rip+0x2a5b4]        # 77540 <THETA+0xa0>
   4cf8c:	mulsd  xmm0,xmm1
   4cf90:	cvttsd2si edi,xmm0
   4cf94:	jmp    4cd87 <updateRCModel+0x2a7>
   4cf99:	movapd xmm0,xmm9
   4cf9e:	pxor   xmm1,xmm1
   4cfa2:	cvtsi2sd xmm1,edi
   4cfa6:	divsd  xmm0,xmm1
   4cfaa:	ucomisd xmm9,xmm0
   4cfaf:	movapd xmm1,xmm0
   4cfb3:	sqrtsd xmm1,xmm1
   4cfb7:	ja     4d02d <updateRCModel+0x54d>
   4cfb9:	lea    rdx,[rsp+0x10]
   4cfbe:	test   edi,edi
   4cfc0:	jg     4ce64 <updateRCModel+0x384>
   4cfc6:	jmp    4ce8f <updateRCModel+0x3af>
   4cfcb:	nop    DWORD PTR [rax+rax*1+0x0]
   4cfd0:	pxor   xmm2,xmm2
   4cfd4:	cvtsi2sd xmm2,DWORD PTR [r8+0x11b50]
   4cfdd:	divsd  xmm2,xmm1
   4cfe1:	jmp    4cd2d <updateRCModel+0x24d>
   4cfe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4cff0:	mov    rax,QWORD PTR [rsp+0xb8]
   4cff8:	xor    rax,QWORD PTR fs:0x28
   4d001:	jne    4d028 <updateRCModel+0x548>
   4d003:	add    rsp,0xc0
   4d00a:	xor    eax,eax
   4d00c:	pop    rbx
   4d00d:	pop    rbp
   4d00e:	pop    r12
   4d010:	pop    r13
   4d012:	pop    r14
   4d014:	jmp    4c780 <updateMADModel>
   4d019:	pxor   xmm9,xmm9
   4d01e:	movapd xmm0,xmm9
   4d023:	jmp    4cf30 <updateRCModel+0x450>
   4d028:	call   4390 <__stack_chk_fail@plt>
   4d02d:	mov    DWORD PTR [rsp+0xc],edi
   4d031:	movsd  QWORD PTR [rsp],xmm1
   4d036:	call   4520 <sqrt@plt>
   4d03b:	mov    edi,DWORD PTR [rsp+0xc]
   4d03f:	movsd  xmm1,QWORD PTR [rsp]
   4d044:	jmp    4cfb9 <updateRCModel+0x4d9>
   4d049:	nop    DWORD PTR [rax+0x0]

000000000004d050 <QP2Qstep>:
   4d050:	endbr64 
   4d054:	movsxd rdx,edi
   4d057:	mov    eax,edi
   4d059:	lea    rcx,[rip+0x2a400]        # 77460 <QP2QSTEP.6024>
   4d060:	mov    esi,edi
   4d062:	imul   rdx,rdx,0x2aaaaaab
   4d069:	sar    eax,0x1f
   4d06c:	shr    rdx,0x20
   4d070:	sub    edx,eax
   4d072:	lea    eax,[rdx+rdx*2]
   4d075:	add    eax,eax
   4d077:	sub    esi,eax
   4d079:	movsxd rax,esi
   4d07c:	movsd  xmm0,QWORD PTR [rcx+rax*8]
   4d081:	cmp    edi,0x5
   4d084:	jle    4d09b <QP2Qstep+0x4b>
   4d086:	xor    eax,eax
   4d088:	nop    DWORD PTR [rax+rax*1+0x0]
   4d090:	add    eax,0x1
   4d093:	addsd  xmm0,xmm0
   4d097:	cmp    eax,edx
   4d099:	jl     4d090 <QP2Qstep+0x40>
   4d09b:	ret    
   4d09c:	nop    DWORD PTR [rax+0x0]

000000000004d0a0 <Qstep2QP>:
   4d0a0:	endbr64 
   4d0a4:	movsd  xmm1,QWORD PTR [rip+0x2a49c]        # 77548 <THETA+0xa8>
   4d0ac:	xor    eax,eax
   4d0ae:	comisd xmm1,xmm0
   4d0b2:	ja     4d143 <Qstep2QP+0xa3>
   4d0b8:	comisd xmm0,QWORD PTR [rip+0x2a490]        # 77550 <THETA+0xb0>
   4d0c0:	mov    eax,0x33
   4d0c5:	ja     4d143 <Qstep2QP+0xa3>
   4d0c7:	movsd  xmm1,QWORD PTR [rip+0x2a489]        # 77558 <THETA+0xb8>
   4d0cf:	xor    eax,eax
   4d0d1:	movsd  xmm2,QWORD PTR [rip+0x25d7f]        # 72e58 <quant_coef+0x198>
   4d0d9:	comisd xmm0,xmm1
   4d0dd:	jbe    4d14c <Qstep2QP+0xac>
   4d0df:	nop
   4d0e0:	mulsd  xmm0,xmm2
   4d0e4:	add    eax,0x1
   4d0e7:	comisd xmm0,xmm1
   4d0eb:	ja     4d0e0 <Qstep2QP+0x40>
   4d0ed:	lea    eax,[rax+rax*2]
   4d0f0:	add    eax,eax
   4d0f2:	movsd  xmm1,QWORD PTR [rip+0x2a466]        # 77560 <THETA+0xc0>
   4d0fa:	comisd xmm1,xmm0
   4d0fe:	jae    4d143 <Qstep2QP+0xa3>
   4d100:	movsd  xmm1,QWORD PTR [rip+0x2a460]        # 77568 <THETA+0xc8>
   4d108:	comisd xmm1,xmm0
   4d10c:	jae    4d148 <Qstep2QP+0xa8>
   4d10e:	movsd  xmm1,QWORD PTR [rip+0x2a45a]        # 77570 <THETA+0xd0>
   4d116:	comisd xmm1,xmm0
   4d11a:	jb     4d120 <Qstep2QP+0x80>
   4d11c:	add    eax,0x2
   4d11f:	ret    
   4d120:	movsd  xmm1,QWORD PTR [rip+0x2a450]        # 77578 <THETA+0xd8>
   4d128:	comisd xmm1,xmm0
   4d12c:	jae    4d150 <Qstep2QP+0xb0>
   4d12e:	movsd  xmm1,QWORD PTR [rip+0x2a44a]        # 77580 <THETA+0xe0>
   4d136:	lea    edx,[rax+0x5]
   4d139:	add    eax,0x4
   4d13c:	comisd xmm1,xmm0
   4d140:	cmovb  eax,edx
   4d143:	ret    
   4d144:	nop    DWORD PTR [rax+0x0]
   4d148:	add    eax,0x1
   4d14b:	ret    
   4d14c:	xor    eax,eax
   4d14e:	jmp    4d0f2 <Qstep2QP+0x52>
   4d150:	add    eax,0x3
   4d153:	ret    
   4d154:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4d15f:	nop

000000000004d160 <updateQuantizationParameter>:
   4d160:	endbr64 
   4d164:	push   rbp
   4d165:	push   rbx
   4d166:	sub    rsp,0x38
   4d16a:	mov    rsi,QWORD PTR [rip+0x3b43f]        # 885b0 <img>
   4d171:	mov    edx,DWORD PTR [rsi+0x18]
   4d174:	mov    eax,DWORD PTR [rsi+0x11ba0]
   4d17a:	cmp    DWORD PTR [rsi+0x11bac],eax
   4d180:	je     4d5c8 <updateQuantizationParameter+0x468>
   4d186:	cmp    edx,0x2
   4d189:	je     4d65a <updateQuantizationParameter+0x4fa>
   4d18f:	test   edx,edx
   4d191:	jne    4d4f0 <updateQuantizationParameter+0x390>
   4d197:	mov    eax,DWORD PTR [rsi+0x11ba4]
   4d19d:	mov    r11d,DWORD PTR [rsi+0x11b98]
   4d1a4:	cmp    eax,0x1
   4d1a7:	je     4d650 <updateQuantizationParameter+0x4f0>
   4d1ad:	mov    ebx,DWORD PTR [rsi+0x11b78]
   4d1b3:	cmp    ebx,0x1
   4d1b6:	je     4d870 <updateQuantizationParameter+0x710>
   4d1bc:	mov    eax,DWORD PTR [rip+0x9079a]        # dd95c <PPreHeader>
   4d1c2:	movsd  xmm6,QWORD PTR [rip+0x90db6]        # ddf80 <Pm_X1>
   4d1ca:	movsd  xmm3,QWORD PTR [rip+0x9076e]        # dd940 <Pm_X2>
   4d1d2:	mov    ecx,DWORD PTR [rip+0x900d0]        # dd2a8 <Pm_Qp>
   4d1d8:	mov    DWORD PTR [rip+0x901aa],eax        # dd388 <m_Hp>
   4d1de:	movsd  xmm2,QWORD PTR [rip+0x8fff2]        # dd1d8 <PMADPictureC1>
   4d1e6:	mov    eax,DWORD PTR [rip+0x90738]        # dd924 <PDuantQp>
   4d1ec:	movsd  xmm7,QWORD PTR [rip+0x907ac]        # dd9a0 <PMADPictureC2>
   4d1f4:	mov    DWORD PTR [rip+0x90806],ecx        # dda00 <m_Qp>
   4d1fa:	mov    r10d,DWORD PTR [rip+0x9071f]        # dd920 <TotalNumberofBasicUnit>
   4d201:	movsd  QWORD PTR [rip+0x907e7],xmm6        # dd9f0 <m_X1>
   4d209:	mov    DWORD PTR [rip+0x902f9],eax        # dd508 <DuantQp>
   4d20f:	movsd  QWORD PTR [rip+0x90169],xmm3        # dd380 <m_X2>
   4d217:	mov    eax,r10d
   4d21a:	movsd  QWORD PTR [rip+0x8ff9e],xmm2        # dd1c0 <MADPictureC1>
   4d222:	movsd  QWORD PTR [rip+0x9075e],xmm7        # dd988 <MADPictureC2>
   4d22a:	test   r11d,r11d
   4d22d:	je     4d237 <updateQuantizationParameter+0xd7>
   4d22f:	shr    eax,0x1f
   4d232:	add    eax,r10d
   4d235:	sar    eax,1
   4d237:	mov    r8d,DWORD PTR [rip+0x9070a]        # dd948 <NumberofBasicUnit>
   4d23e:	mov    r9,QWORD PTR [rip+0x3b373]        # 885b8 <input>
   4d245:	mov    rdx,QWORD PTR [rip+0x8ff6c]        # dd1b8 <T>
   4d24c:	cmp    r8d,eax
   4d24f:	je     4dc88 <updateQuantizationParameter+0xb28>
   4d255:	mov    eax,DWORD PTR [rsi+0x11b58]
   4d25b:	add    eax,DWORD PTR [rsi+0x11b54]
   4d261:	mov    QWORD PTR [rsi+0x11b54],0x0
   4d26c:	mov    DWORD PTR [rip+0x9070e],eax        # dd980 <TotalBasicUnitBits>
   4d272:	cdqe   
   4d274:	sub    rdx,rax
   4d277:	mov    QWORD PTR [rip+0x8ff3a],rdx        # dd1b8 <T>
   4d27e:	js     4daf0 <updateQuantizationParameter+0x990>
   4d284:	mov    esi,r10d
   4d287:	lea    eax,[r10-0x1]
   4d28b:	sub    esi,r8d
   4d28e:	cmp    DWORD PTR [r9+0xb40],0x2
   4d296:	movsxd rbx,esi
   4d299:	je     4d2a6 <updateQuantizationParameter+0x146>
   4d29b:	mov    ebp,DWORD PTR [r9+0xb44]
   4d2a2:	test   ebp,ebp
   4d2a4:	je     4d2b0 <updateQuantizationParameter+0x150>
   4d2a6:	cmp    r11d,0x1
   4d2aa:	je     4ddc0 <updateQuantizationParameter+0xc60>
   4d2b0:	mov    r11,QWORD PTR [rip+0x90681]        # dd938 <BUPFMAD>
   4d2b7:	pxor   xmm5,xmm5
   4d2bb:	movsd  xmm4,QWORD PTR [r11+rbx*8]
   4d2c1:	mov    QWORD PTR [rip+0x8ff1c],0x0        # dd1e8 <TotalBUMAD>
   4d2cc:	mulsd  xmm4,xmm2
   4d2d0:	addsd  xmm4,xmm7
   4d2d4:	movsd  QWORD PTR [rip+0x8ffd4],xmm4        # dd2b0 <CurrentFrameMAD>
   4d2dc:	cmp    esi,eax
   4d2de:	jg     4dffd <updateQuantizationParameter+0xe9d>
   4d2e4:	cdqe   
   4d2e6:	movapd xmm1,xmm5
   4d2ea:	nop    WORD PTR [rax+rax*1+0x0]
   4d2f0:	movsd  xmm0,QWORD PTR [r11+rax*8]
   4d2f6:	sub    rax,0x1
   4d2fa:	mulsd  xmm0,xmm2
   4d2fe:	addsd  xmm0,xmm7
   4d302:	movsd  QWORD PTR [rip+0x90c6e],xmm0        # ddf78 <CurrentBUMAD>
   4d30a:	mulsd  xmm0,xmm0
   4d30e:	addsd  xmm1,xmm0
   4d312:	movsd  QWORD PTR [rip+0x8fece],xmm1        # dd1e8 <TotalBUMAD>
   4d31a:	cmp    esi,eax
   4d31c:	jle    4d2f0 <updateQuantizationParameter+0x190>
   4d31e:	pxor   xmm0,xmm0
   4d322:	movapd xmm2,xmm6
   4d326:	cvtsi2sd xmm0,rdx
   4d32b:	mulsd  xmm2,xmm4
   4d32f:	mulsd  xmm0,xmm4
   4d333:	mulsd  xmm0,xmm4
   4d337:	divsd  xmm0,xmm1
   4d33b:	movsd  xmm1,QWORD PTR [rip+0x906b5]        # dd9f8 <MINVALUE>
   4d343:	mulsd  xmm1,QWORD PTR [rip+0x9001d]        # dd368 <frame_rate>
   4d34b:	cvttsd2si eax,xmm0
   4d34f:	pxor   xmm0,xmm0
   4d353:	sub    eax,DWORD PTR [rip+0x906ab]        # dda04 <PAveHeaderBits2>
   4d359:	cvtsi2sd xmm0,r10d
   4d35e:	mulsd  xmm1,xmm0
   4d362:	movsd  xmm0,QWORD PTR [rip+0x8fc66]        # dcfd0 <bit_rate>
   4d36a:	divsd  xmm0,xmm1
   4d36e:	pxor   xmm1,xmm1
   4d372:	cvttsd2si edx,xmm0
   4d376:	cmp    edx,eax
   4d378:	cmovge eax,edx
   4d37b:	ucomisd xmm3,xmm5
   4d37f:	cvtsi2sd xmm1,eax
   4d383:	jp     4dc28 <updateQuantizationParameter+0xac8>
   4d389:	jne    4dc28 <updateQuantizationParameter+0xac8>
   4d38f:	divsd  xmm2,xmm1
   4d393:	pxor   xmm0,xmm0
   4d397:	cvtsd2ss xmm0,xmm2
   4d39b:	cvtss2sd xmm0,xmm0
   4d39f:	movsd  QWORD PTR [rip+0x8fc19],xmm0        # dcfc0 <m_Qstep>
   4d3a7:	mov    DWORD PTR [rsp+0x8],edi
   4d3ab:	call   4d0a0 <Qstep2QP>
   4d3b0:	mov    esi,DWORD PTR [rip+0x905c6]        # dd97c <DDquant>
   4d3b6:	mov    ebx,DWORD PTR [rip+0x9056c]        # dd928 <MBPerRow>
   4d3bc:	mov    edx,eax
   4d3be:	mov    r10d,DWORD PTR [rip+0x90ad3]        # dde98 <RC_MAX_QUANT>
   4d3c5:	mov    edi,DWORD PTR [rsp+0x8]
   4d3c9:	lea    eax,[rsi+rcx*1]
   4d3cc:	cmp    eax,edx
   4d3ce:	cmovg  eax,edx
   4d3d1:	sub    ecx,esi
   4d3d3:	cmp    DWORD PTR [r9+0xcb0],ebx
   4d3da:	mov    edx,DWORD PTR [rip+0x90b88]        # ddf68 <PAveFrameQP>
   4d3e0:	jl     4dc00 <updateQuantizationParameter+0xaa0>
   4d3e6:	lea    esi,[rdx+0x6]
   4d3e9:	cmp    esi,r10d
   4d3ec:	cmovg  esi,r10d
   4d3f0:	cmp    esi,eax
   4d3f2:	cmovle eax,esi
   4d3f5:	cmp    eax,ecx
   4d3f7:	cmovl  eax,ecx
   4d3fa:	lea    ecx,[rdx-0x5]
   4d3fd:	sub    edx,0x6
   4d400:	cmp    ecx,eax
   4d402:	cmovg  eax,edx
   4d405:	cmp    DWORD PTR [rip+0x90589],eax        # dd994 <RC_MIN_QUANT>
   4d40b:	mov    edx,DWORD PTR [rip+0x905bf]        # dd9d0 <TotalFrameQP>
   4d411:	cmovge eax,DWORD PTR [rip+0x9057c]        # dd994 <RC_MIN_QUANT>
   4d418:	add    edx,eax
   4d41a:	sub    r8d,0x1
   4d41e:	mov    DWORD PTR [rip+0x8ff54],eax        # dd378 <m_Qc>
   4d424:	mov    DWORD PTR [rip+0x905a6],edx        # dd9d0 <TotalFrameQP>
   4d42a:	mov    DWORD PTR [rip+0x8fe78],eax        # dd2a8 <Pm_Qp>
   4d430:	mov    DWORD PTR [rip+0x90511],r8d        # dd948 <NumberofBasicUnit>
   4d437:	jne    4d5be <updateQuantizationParameter+0x45e>
   4d43d:	mov    rcx,QWORD PTR [rip+0x3b16c]        # 885b0 <img>
   4d444:	mov    r10d,DWORD PTR [rcx+0x18]
   4d448:	test   r10d,r10d
   4d44b:	jne    4d5be <updateQuantizationParameter+0x45e>
   4d451:	test   edi,edi
   4d453:	je     4d465 <updateQuantizationParameter+0x305>
   4d455:	mov    r8d,DWORD PTR [rcx+0x11b98]
   4d45c:	test   r8d,r8d
   4d45f:	jne    4d5be <updateQuantizationParameter+0x45e>
   4d465:	mov    rsi,QWORD PTR [rip+0x68a04]        # b5e70 <active_sps>
   4d46c:	mov    edi,DWORD PTR [rsi+0x47c]
   4d472:	test   edi,edi
   4d474:	jne    4df92 <updateQuantizationParameter+0xe32>
   4d47a:	mov    esi,DWORD PTR [r9+0xb40]
   4d481:	cmp    esi,0x1
   4d484:	je     4df92 <updateQuantizationParameter+0xe32>
   4d48a:	cmp    esi,0x2
   4d48d:	je     4d49e <updateQuantizationParameter+0x33e>
   4d48f:	mov    esi,DWORD PTR [r9+0xb44]
   4d496:	test   esi,esi
   4d498:	je     4d5be <updateQuantizationParameter+0x45e>
   4d49e:	pxor   xmm0,xmm0
   4d4a2:	pxor   xmm1,xmm1
   4d4a6:	mov    ecx,DWORD PTR [rcx+0x11b98]
   4d4ac:	mov    esi,DWORD PTR [rip+0x90552]        # dda04 <PAveHeaderBits2>
   4d4b2:	cvtsi2sd xmm0,edx
   4d4b6:	cvtsi2sd xmm1,DWORD PTR [rip+0x90462]        # dd920 <TotalNumberofBasicUnit>
   4d4be:	divsd  xmm0,xmm1
   4d4c2:	addsd  xmm0,QWORD PTR [rip+0x2598e]        # 72e58 <quant_coef+0x198>
   4d4ca:	cvttsd2si edx,xmm0
   4d4ce:	test   ecx,ecx
   4d4d0:	jne    4e222 <updateQuantizationParameter+0x10c2>
   4d4d6:	mov    DWORD PTR [rip+0x9047c],edx        # dd958 <FrameQPBuffer>
   4d4dc:	mov    DWORD PTR [rip+0x904c6],esi        # dd9a8 <FrameAveHeaderBits>
   4d4e2:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4d4e7:	nop    WORD PTR [rax+rax*1+0x0]
   4d4f0:	cmp    edx,0x1
   4d4f3:	jne    4d5b8 <updateQuantizationParameter+0x458>
   4d4f9:	test   edi,edi
   4d4fb:	jne    4d50b <updateQuantizationParameter+0x3ab>
   4d4fd:	mov    eax,DWORD PTR [rsi+0x11b98]
   4d503:	test   eax,eax
   4d505:	jne    4d5b8 <updateQuantizationParameter+0x458>
   4d50b:	mov    rdi,QWORD PTR [rip+0x3b0a6]        # 885b8 <input>
   4d512:	mov    r8d,DWORD PTR [rip+0x9044b]        # dd964 <PreviousQp2>
   4d519:	mov    ecx,DWORD PTR [rdi+0x4d4]
   4d51f:	cmp    ecx,0x1
   4d522:	je     4d8e0 <updateQuantizationParameter+0x780>
   4d528:	mov    eax,DWORD PTR [rip+0x9044a]        # dd978 <NumberofBFrames>
   4d52e:	lea    r9d,[rcx-0x1]
   4d532:	add    eax,0x1
   4d535:	cdq    
   4d536:	idiv   ecx
   4d538:	test   edx,edx
   4d53a:	je     4da38 <updateQuantizationParameter+0x8d8>
   4d540:	cmp    edx,0x1
   4d543:	jne    4de58 <updateQuantizationParameter+0xcf8>
   4d549:	cmp    DWORD PTR [rdi+0xb40],0x2
   4d550:	je     4dd50 <updateQuantizationParameter+0xbf0>
   4d556:	mov    eax,DWORD PTR [rdi+0xb44]
   4d55c:	test   eax,eax
   4d55e:	jne    4dd50 <updateQuantizationParameter+0xbf0>
   4d564:	mov    esi,DWORD PTR [rip+0x8fb1e]        # dd088 <PreviousQp1>
   4d56a:	mov    edi,r8d
   4d56d:	sub    edi,esi
   4d56f:	nop
   4d570:	not    ecx
   4d572:	mov    edx,ecx
   4d574:	add    edx,edx
   4d576:	cmp    edx,edi
   4d578:	jg     4dac0 <updateQuantizationParameter+0x960>
   4d57e:	je     4dd40 <updateQuantizationParameter+0xbe0>
   4d584:	lea    ecx,[rdx+0x1]
   4d587:	lea    r8d,[rdx+0x2]
   4d58b:	cmp    ecx,edi
   4d58d:	je     4de90 <updateQuantizationParameter+0xd30>
   4d593:	cmp    r8d,edi
   4d596:	je     4d9fd <updateQuantizationParameter+0x89d>
   4d59c:	add    edx,0x3
   4d59f:	mov    ecx,esi
   4d5a1:	xor    esi,esi
   4d5a3:	cmp    edx,edi
   4d5a5:	setne  sil
   4d5a9:	lea    esi,[rsi+rcx*1+0x1]
   4d5ad:	jmp    4d9fd <updateQuantizationParameter+0x89d>
   4d5b2:	nop    WORD PTR [rax+rax*1+0x0]
   4d5b8:	mov    eax,DWORD PTR [rip+0x8fdba]        # dd378 <m_Qc>
   4d5be:	add    rsp,0x38
   4d5c2:	pop    rbx
   4d5c3:	pop    rbp
   4d5c4:	ret    
   4d5c5:	nop    DWORD PTR [rax]
   4d5c8:	test   edi,edi
   4d5ca:	je     4d670 <updateQuantizationParameter+0x510>
   4d5d0:	cmp    edx,0x2
   4d5d3:	je     4d65a <updateQuantizationParameter+0x4fa>
   4d5d9:	cmp    edx,0x1
   4d5dc:	je     4d970 <updateQuantizationParameter+0x810>
   4d5e2:	test   edx,edx
   4d5e4:	jne    4d6c0 <updateQuantizationParameter+0x560>
   4d5ea:	mov    r11d,DWORD PTR [rsi+0x11b80]
   4d5f1:	test   r11d,r11d
   4d5f4:	jne    4d6c0 <updateQuantizationParameter+0x560>
   4d5fa:	mov    eax,DWORD PTR [rip+0x8fb48]        # dd148 <MyInitialQp>
   4d600:	mov    DWORD PTR [rip+0x8fd72],eax        # dd378 <m_Qc>
   4d606:	mov    r10d,DWORD PTR [rsi+0x11b98]
   4d60d:	test   r10d,r10d
   4d610:	jne    4d5be <updateQuantizationParameter+0x45e>
   4d612:	mov    rdx,QWORD PTR [rip+0x68857]        # b5e70 <active_sps>
   4d619:	mov    ecx,DWORD PTR [rdx+0x47c]
   4d61f:	test   ecx,ecx
   4d621:	je     4da28 <updateQuantizationParameter+0x8c8>
   4d627:	add    DWORD PTR [rsi+0x11b7c],eax
   4d62d:	mov    edx,DWORD PTR [rip+0x90331]        # dd964 <PreviousQp2>
   4d633:	mov    DWORD PTR [rip+0x8fc6f],eax        # dd2a8 <Pm_Qp>
   4d639:	mov    DWORD PTR [rip+0x8fa49],edx        # dd088 <PreviousQp1>
   4d63f:	mov    DWORD PTR [rip+0x9031f],eax        # dd964 <PreviousQp2>
   4d645:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4d64a:	nop    WORD PTR [rax+rax*1+0x0]
   4d650:	cmp    r11d,0x1
   4d654:	jne    4d1ad <updateQuantizationParameter+0x4d>
   4d65a:	mov    eax,DWORD PTR [rip+0x8fae8]        # dd148 <MyInitialQp>
   4d660:	mov    DWORD PTR [rip+0x8fd12],eax        # dd378 <m_Qc>
   4d666:	add    rsp,0x38
   4d66a:	pop    rbx
   4d66b:	pop    rbp
   4d66c:	ret    
   4d66d:	nop    DWORD PTR [rax]
   4d670:	mov    ebx,DWORD PTR [rsi+0x11b98]
   4d676:	test   ebx,ebx
   4d678:	je     4d5d0 <updateQuantizationParameter+0x470>
   4d67e:	mov    eax,DWORD PTR [rip+0x8fcf4]        # dd378 <m_Qc>
   4d684:	test   edx,edx
   4d686:	jne    4d5be <updateQuantizationParameter+0x45e>
   4d68c:	mov    edx,DWORD PTR [rsi+0x11ba4]
   4d692:	test   edx,edx
   4d694:	jne    4d5be <updateQuantizationParameter+0x45e>
   4d69a:	mov    rdx,QWORD PTR [rip+0x3af17]        # 885b8 <input>
   4d6a1:	cmp    DWORD PTR [rdx+0xb40],0x1
   4d6a8:	je     4e0c9 <updateQuantizationParameter+0xf69>
   4d6ae:	mov    DWORD PTR [rip+0x90354],eax        # dda08 <FieldQPBuffer>
   4d6b4:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4d6b9:	nop    DWORD PTR [rax+0x0]
   4d6c0:	mov    rax,QWORD PTR [rip+0x3aef1]        # 885b8 <input>
   4d6c7:	cmp    DWORD PTR [rax+0xb40],0x2
   4d6ce:	je     4d830 <updateQuantizationParameter+0x6d0>
   4d6d4:	mov    r9d,DWORD PTR [rax+0xb44]
   4d6db:	test   r9d,r9d
   4d6de:	jne    4d830 <updateQuantizationParameter+0x6d0>
   4d6e4:	mov    edi,DWORD PTR [rip+0x8fbbe]        # dd2a8 <Pm_Qp>
   4d6ea:	movsd  xmm0,QWORD PTR [rip+0x8fae6]        # dd1d8 <PMADPictureC1>
   4d6f2:	movsd  xmm3,QWORD PTR [rip+0x8f8e6]        # dcfe0 <PPictureMAD>
   4d6fa:	mov    DWORD PTR [rip+0x90300],edi        # dda00 <m_Qp>
   4d700:	movsd  xmm1,QWORD PTR [rip+0x90298]        # dd9a0 <PMADPictureC2>
   4d708:	movsd  xmm6,QWORD PTR [rip+0x90870]        # ddf80 <Pm_X1>
   4d710:	movsd  QWORD PTR [rip+0x8faa8],xmm0        # dd1c0 <MADPictureC1>
   4d718:	mulsd  xmm0,xmm3
   4d71c:	movsd  xmm2,QWORD PTR [rip+0x9021c]        # dd940 <Pm_X2>
   4d724:	mov    edx,DWORD PTR [rip+0x90232]        # dd95c <PPreHeader>
   4d72a:	mov    ecx,DWORD PTR [rip+0x901f4]        # dd924 <PDuantQp>
   4d730:	mov    rax,QWORD PTR [rip+0x8fa81]        # dd1b8 <T>
   4d737:	movsd  QWORD PTR [rip+0x902b1],xmm6        # dd9f0 <m_X1>
   4d73f:	mov    DWORD PTR [rip+0x8fc43],edx        # dd388 <m_Hp>
   4d745:	mov    DWORD PTR [rip+0x8fdbd],ecx        # dd508 <DuantQp>
   4d74b:	movsd  QWORD PTR [rip+0x8fc2d],xmm2        # dd380 <m_X2>
   4d753:	movapd xmm7,xmm0
   4d757:	movsd  QWORD PTR [rip+0x90229],xmm1        # dd988 <MADPictureC2>
   4d75f:	addsd  xmm7,xmm1
   4d763:	movsd  QWORD PTR [rip+0x9025d],xmm3        # dd9c8 <PreviousPictureMAD>
   4d76b:	movsd  QWORD PTR [rip+0x8fb3d],xmm7        # dd2b0 <CurrentFrameMAD>
   4d773:	test   rax,rax
   4d776:	js     4dad0 <updateQuantizationParameter+0x970>
   4d77c:	pxor   xmm5,xmm5
   4d780:	movapd xmm3,xmm6
   4d784:	pxor   xmm1,xmm1
   4d788:	sub    eax,edx
   4d78a:	movsd  xmm4,QWORD PTR [rip+0x90266]        # dd9f8 <MINVALUE>
   4d792:	mulsd  xmm4,QWORD PTR [rip+0x8fbce]        # dd368 <frame_rate>
   4d79a:	mov    edx,eax
   4d79c:	movsd  xmm0,QWORD PTR [rip+0x8f82c]        # dcfd0 <bit_rate>
   4d7a4:	mulsd  xmm3,xmm7
   4d7a8:	divsd  xmm0,xmm4
   4d7ac:	cvttsd2si eax,xmm0
   4d7b0:	cmp    eax,edx
   4d7b2:	cmovl  eax,edx
   4d7b5:	ucomisd xmm2,xmm5
   4d7b9:	cvtsi2sd xmm1,eax
   4d7bd:	jp     4da60 <updateQuantizationParameter+0x900>
   4d7c3:	jne    4da60 <updateQuantizationParameter+0x900>
   4d7c9:	divsd  xmm3,xmm1
   4d7cd:	pxor   xmm0,xmm0
   4d7d1:	cvtsd2ss xmm0,xmm3
   4d7d5:	cvtss2sd xmm0,xmm0
   4d7d9:	movsd  QWORD PTR [rip+0x8f7df],xmm0        # dcfc0 <m_Qstep>
   4d7e1:	call   4d0a0 <Qstep2QP>
   4d7e6:	cmp    DWORD PTR [rip+0x906ac],eax        # dde98 <RC_MAX_QUANT>
   4d7ec:	cmovle eax,DWORD PTR [rip+0x906a5]        # dde98 <RC_MAX_QUANT>
   4d7f3:	lea    edx,[rdi+rcx*1]
   4d7f6:	cmp    eax,edx
   4d7f8:	cmovle edx,eax
   4d7fb:	mov    eax,edi
   4d7fd:	sub    eax,ecx
   4d7ff:	mov    ecx,DWORD PTR [rip+0x9018f]        # dd994 <RC_MIN_QUANT>
   4d805:	cmp    eax,ecx
   4d807:	cmovl  eax,ecx
   4d80a:	cmp    edx,eax
   4d80c:	cmovge eax,edx
   4d80f:	mov    DWORD PTR [rip+0x8fb63],eax        # dd378 <m_Qc>
   4d815:	mov    edi,DWORD PTR [rsi+0x11b98]
   4d81b:	test   edi,edi
   4d81d:	jne    4d5be <updateQuantizationParameter+0x45e>
   4d823:	jmp    4d612 <updateQuantizationParameter+0x4b2>
   4d828:	nop    DWORD PTR [rax+rax*1+0x0]
   4d830:	mov    r8d,DWORD PTR [rsi+0x11b98]
   4d837:	test   r8d,r8d
   4d83a:	jne    4d6e4 <updateQuantizationParameter+0x584>
   4d840:	cmp    DWORD PTR [rsi+0x11b9c],0x1
   4d847:	mov    eax,DWORD PTR [rsi+0x11b7c]
   4d84d:	je     4de38 <updateQuantizationParameter+0xcd8>
   4d853:	mov    edi,DWORD PTR [rip+0x901af]        # dda08 <FieldQPBuffer>
   4d859:	add    eax,edi
   4d85b:	mov    DWORD PTR [rip+0x8fa47],edi        # dd2a8 <Pm_Qp>
   4d861:	mov    DWORD PTR [rsi+0x11b7c],eax
   4d867:	jmp    4d6ea <updateQuantizationParameter+0x58a>
   4d86c:	nop    DWORD PTR [rax+0x0]
   4d870:	mov    ebp,DWORD PTR [rsi+0x11b80]
   4d876:	test   ebp,ebp
   4d878:	jne    4d1bc <updateQuantizationParameter+0x5c>
   4d87e:	test   r11d,r11d
   4d881:	je     4d898 <updateQuantizationParameter+0x738>
   4d883:	cmp    r11d,0x1
   4d887:	jne    4d5b8 <updateQuantizationParameter+0x458>
   4d88d:	test   eax,eax
   4d88f:	jne    4d5b8 <updateQuantizationParameter+0x458>
   4d895:	nop    DWORD PTR [rax]
   4d898:	mov    ebx,DWORD PTR [rip+0x900aa]        # dd948 <NumberofBasicUnit>
   4d89e:	mov    eax,DWORD PTR [rip+0x8f8a4]        # dd148 <MyInitialQp>
   4d8a4:	mov    QWORD PTR [rsi+0x11b54],0x0
   4d8af:	lea    edx,[rbx-0x1]
   4d8b2:	mov    DWORD PTR [rip+0x8fac0],eax        # dd378 <m_Qc>
   4d8b8:	mov    DWORD PTR [rip+0x9008a],edx        # dd948 <NumberofBasicUnit>
   4d8be:	or     edx,edi
   4d8c0:	je     4e174 <updateQuantizationParameter+0x1014>
   4d8c6:	add    DWORD PTR [rip+0x90104],eax        # dd9d0 <TotalFrameQP>
   4d8cc:	mov    DWORD PTR [rip+0x8f9d6],eax        # dd2a8 <Pm_Qp>
   4d8d2:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4d8d7:	nop    WORD PTR [rax+rax*1+0x0]
   4d8e0:	cmp    DWORD PTR [rdi+0xb40],0x2
   4d8e7:	je     4d8f7 <updateQuantizationParameter+0x797>
   4d8e9:	mov    eax,DWORD PTR [rdi+0xb44]
   4d8ef:	test   eax,eax
   4d8f1:	je     4dbf0 <updateQuantizationParameter+0xa90>
   4d8f7:	mov    eax,DWORD PTR [rsi+0x11b98]
   4d8fd:	test   eax,eax
   4d8ff:	jne    4dbf0 <updateQuantizationParameter+0xa90>
   4d905:	cmp    DWORD PTR [rsi+0x11b9c],0x1
   4d90c:	mov    DWORD PTR [rip+0x8f775],r8d        # dd088 <PreviousQp1>
   4d913:	je     4e046 <updateQuantizationParameter+0xee6>
   4d919:	mov    edx,DWORD PTR [rip+0x900e9]        # dda08 <FieldQPBuffer>
   4d91f:	mov    eax,r8d
   4d922:	mov    DWORD PTR [rip+0x9003c],edx        # dd964 <PreviousQp2>
   4d928:	mov    r8d,edx
   4d92b:	cmp    eax,r8d
   4d92e:	je     4dd30 <updateQuantizationParameter+0xbd0>
   4d934:	add    r8d,eax
   4d937:	mov    eax,r8d
   4d93a:	shr    eax,0x1f
   4d93d:	add    eax,r8d
   4d940:	sar    eax,1
   4d942:	add    eax,0x1
   4d945:	mov    edx,DWORD PTR [rip+0x90049]        # dd994 <RC_MIN_QUANT>
   4d94b:	cmp    DWORD PTR [rip+0x90547],eax        # dde98 <RC_MAX_QUANT>
   4d951:	cmovle eax,DWORD PTR [rip+0x90540]        # dde98 <RC_MAX_QUANT>
   4d958:	cmp    eax,edx
   4d95a:	cmovl  eax,edx
   4d95d:	mov    DWORD PTR [rip+0x8fa15],eax        # dd378 <m_Qc>
   4d963:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4d968:	nop    DWORD PTR [rax+rax*1+0x0]
   4d970:	mov    rdi,QWORD PTR [rip+0x3ac41]        # 885b8 <input>
   4d977:	mov    r8d,DWORD PTR [rip+0x8ffe6]        # dd964 <PreviousQp2>
   4d97e:	mov    ecx,DWORD PTR [rdi+0x4d4]
   4d984:	cmp    ecx,0x1
   4d987:	je     4d8e0 <updateQuantizationParameter+0x780>
   4d98d:	mov    eax,DWORD PTR [rip+0x8ffe5]        # dd978 <NumberofBFrames>
   4d993:	lea    r9d,[rcx-0x1]
   4d997:	add    eax,0x1
   4d99a:	cdq    
   4d99b:	idiv   ecx
   4d99d:	test   edx,edx
   4d99f:	jne    4dd70 <updateQuantizationParameter+0xc10>
   4d9a5:	mov    eax,r9d
   4d9a8:	mov    esi,DWORD PTR [rip+0x8f6da]        # dd088 <PreviousQp1>
   4d9ae:	mov    edi,r8d
   4d9b1:	neg    eax
   4d9b3:	sub    edi,esi
   4d9b5:	add    eax,eax
   4d9b7:	cmp    eax,edi
   4d9b9:	cmovl  eax,edi
   4d9bc:	add    r9d,r9d
   4d9bf:	cmp    eax,r9d
   4d9c2:	cmovg  eax,r9d
   4d9c6:	not    ecx
   4d9c8:	add    ecx,ecx
   4d9ca:	cmp    ecx,edi
   4d9cc:	jg     4dac0 <updateQuantizationParameter+0x960>
   4d9d2:	je     4dd40 <updateQuantizationParameter+0xbe0>
   4d9d8:	lea    edx,[rcx+0x1]
   4d9db:	lea    r8d,[rcx+0x2]
   4d9df:	cmp    edx,edi
   4d9e1:	je     4de90 <updateQuantizationParameter+0xd30>
   4d9e7:	cmp    r8d,edi
   4d9ea:	je     4d9fd <updateQuantizationParameter+0x89d>
   4d9ec:	add    ecx,0x3
   4d9ef:	mov    edx,esi
   4d9f1:	xor    esi,esi
   4d9f3:	cmp    ecx,edi
   4d9f5:	setne  sil
   4d9f9:	lea    esi,[rsi+rdx*1+0x1]
   4d9fd:	mov    edx,DWORD PTR [rip+0x90495]        # dde98 <RC_MAX_QUANT>
   4da03:	add    eax,esi
   4da05:	cmp    eax,edx
   4da07:	cmovg  eax,edx
   4da0a:	mov    edx,DWORD PTR [rip+0x8ff84]        # dd994 <RC_MIN_QUANT>
   4da10:	cmp    eax,edx
   4da12:	cmovl  eax,edx
   4da15:	mov    DWORD PTR [rip+0x8f95d],eax        # dd378 <m_Qc>
   4da1b:	add    rsp,0x38
   4da1f:	pop    rbx
   4da20:	pop    rbp
   4da21:	ret    
   4da22:	nop    WORD PTR [rax+rax*1+0x0]
   4da28:	mov    DWORD PTR [rip+0x8ff2a],eax        # dd958 <FrameQPBuffer>
   4da2e:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4da33:	nop    DWORD PTR [rax+rax*1+0x0]
   4da38:	mov    eax,r9d
   4da3b:	mov    esi,DWORD PTR [rip+0x8f647]        # dd088 <PreviousQp1>
   4da41:	mov    edi,r8d
   4da44:	neg    eax
   4da46:	sub    edi,esi
   4da48:	add    eax,eax
   4da4a:	cmp    eax,edi
   4da4c:	cmovl  eax,edi
   4da4f:	add    r9d,r9d
   4da52:	cmp    eax,r9d
   4da55:	cmovg  eax,r9d
   4da59:	jmp    4d570 <updateQuantizationParameter+0x410>
   4da5e:	xchg   ax,ax
   4da60:	mulsd  xmm2,QWORD PTR [rip+0x1d028]        # 6aa90 <QP_SCALE_CR+0x50>
   4da68:	movapd xmm0,xmm7
   4da6c:	mulsd  xmm0,xmm3
   4da70:	mulsd  xmm2,xmm7
   4da74:	mulsd  xmm6,xmm0
   4da78:	mulsd  xmm2,xmm1
   4da7c:	addsd  xmm2,xmm6
   4da80:	comisd xmm5,xmm2
   4da84:	ja     4d7c9 <updateQuantizationParameter+0x669>
   4da8a:	ucomisd xmm5,xmm2
   4da8e:	movapd xmm4,xmm2
   4da92:	sqrtsd xmm4,xmm4
   4da96:	ja     4e25b <updateQuantizationParameter+0x10fb>
   4da9c:	subsd  xmm4,xmm3
   4daa0:	comisd xmm5,xmm4
   4daa4:	movapd xmm0,xmm4
   4daa8:	jb     4e05d <updateQuantizationParameter+0xefd>
   4daae:	mov    edi,DWORD PTR [rip+0x8ff4c]        # dda00 <m_Qp>
   4dab4:	mov    ecx,DWORD PTR [rip+0x8fa4e]        # dd508 <DuantQp>
   4daba:	jmp    4d7c9 <updateQuantizationParameter+0x669>
   4dabf:	nop
   4dac0:	sub    esi,0x3
   4dac3:	jmp    4d9fd <updateQuantizationParameter+0x89d>
   4dac8:	nop    DWORD PTR [rax+rax*1+0x0]
   4dad0:	mov    edx,DWORD PTR [rip+0x903c2]        # dde98 <RC_MAX_QUANT>
   4dad6:	lea    eax,[rcx+rdi*1]
   4dad9:	cmp    eax,edx
   4dadb:	cmovg  eax,edx
   4dade:	mov    DWORD PTR [rip+0x8f894],eax        # dd378 <m_Qc>
   4dae4:	jmp    4d815 <updateQuantizationParameter+0x6b5>
   4dae9:	nop    DWORD PTR [rax+0x0]
   4daf0:	mov    ebp,DWORD PTR [rip+0x8fe9a]        # dd990 <GOPOverdue>
   4daf6:	mov    eax,DWORD PTR [rip+0x8fe80]        # dd97c <DDquant>
   4dafc:	lea    edx,[rcx+0x2]
   4daff:	add    eax,ecx
   4db01:	cmp    ebp,0x1
   4db04:	mov    ecx,DWORD PTR [rip+0x8fe1e]        # dd928 <MBPerRow>
   4db0a:	cmove  eax,edx
   4db0d:	mov    edx,DWORD PTR [rip+0x90455]        # ddf68 <PAveFrameQP>
   4db13:	cmp    DWORD PTR [rip+0x9037f],eax        # dde98 <RC_MAX_QUANT>
   4db19:	cmovle eax,DWORD PTR [rip+0x90378]        # dde98 <RC_MAX_QUANT>
   4db20:	cmp    DWORD PTR [r9+0xcb0],ecx
   4db27:	jl     4dcd8 <updateQuantizationParameter+0xb78>
   4db2d:	lea    ecx,[rdx+0x5]
   4db30:	add    edx,0x6
   4db33:	cmp    eax,ecx
   4db35:	cmovg  eax,edx
   4db38:	mov    DWORD PTR [rip+0x8f83a],eax        # dd378 <m_Qc>
   4db3e:	mov    edx,DWORD PTR [rip+0x8fe8c]        # dd9d0 <TotalFrameQP>
   4db44:	add    edx,eax
   4db46:	sub    r8d,0x1
   4db4a:	mov    DWORD PTR [rip+0x8fe80],edx        # dd9d0 <TotalFrameQP>
   4db50:	mov    DWORD PTR [rip+0x8fdf1],r8d        # dd948 <NumberofBasicUnit>
   4db57:	jne    4dbd8 <updateQuantizationParameter+0xa78>
   4db59:	test   edi,edi
   4db5b:	je     4db62 <updateQuantizationParameter+0xa02>
   4db5d:	test   r11d,r11d
   4db60:	jne    4dbd8 <updateQuantizationParameter+0xa78>
   4db62:	mov    rcx,QWORD PTR [rip+0x68307]        # b5e70 <active_sps>
   4db69:	mov    edi,DWORD PTR [rcx+0x47c]
   4db6f:	test   edi,edi
   4db71:	jne    4dee0 <updateQuantizationParameter+0xd80>
   4db77:	mov    ecx,DWORD PTR [r9+0xb40]
   4db7e:	cmp    ecx,0x1
   4db81:	je     4dee0 <updateQuantizationParameter+0xd80>
   4db87:	cmp    ecx,0x2
   4db8a:	je     4db97 <updateQuantizationParameter+0xa37>
   4db8c:	mov    ecx,DWORD PTR [r9+0xb44]
   4db93:	test   ecx,ecx
   4db95:	je     4dbd8 <updateQuantizationParameter+0xa78>
   4db97:	pxor   xmm0,xmm0
   4db9b:	pxor   xmm1,xmm1
   4db9f:	mov    ecx,DWORD PTR [rip+0x8fe5f]        # dda04 <PAveHeaderBits2>
   4dba5:	cvtsi2sd xmm0,edx
   4dba9:	cvtsi2sd xmm1,r10d
   4dbae:	divsd  xmm0,xmm1
   4dbb2:	addsd  xmm0,QWORD PTR [rip+0x2529e]        # 72e58 <quant_coef+0x198>
   4dbba:	cvttsd2si edx,xmm0
   4dbbe:	test   r11d,r11d
   4dbc1:	jne    4e211 <updateQuantizationParameter+0x10b1>
   4dbc7:	mov    DWORD PTR [rip+0x8fd8b],edx        # dd958 <FrameQPBuffer>
   4dbcd:	mov    DWORD PTR [rip+0x8fdd5],ecx        # dd9a8 <FrameAveHeaderBits>
   4dbd3:	nop    DWORD PTR [rax+rax*1+0x0]
   4dbd8:	cmp    ebp,0x1
   4dbdb:	je     4dda8 <updateQuantizationParameter+0xc48>
   4dbe1:	mov    DWORD PTR [rip+0x8f6c1],eax        # dd2a8 <Pm_Qp>
   4dbe7:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4dbec:	nop    DWORD PTR [rax+0x0]
   4dbf0:	mov    eax,DWORD PTR [rip+0x8f492]        # dd088 <PreviousQp1>
   4dbf6:	jmp    4d92b <updateQuantizationParameter+0x7cb>
   4dbfb:	nop    DWORD PTR [rax+rax*1+0x0]
   4dc00:	lea    esi,[rdx+0x3]
   4dc03:	cmp    esi,r10d
   4dc06:	cmovg  esi,r10d
   4dc0a:	cmp    esi,eax
   4dc0c:	cmovle eax,esi
   4dc0f:	cmp    eax,ecx
   4dc11:	cmovl  eax,ecx
   4dc14:	lea    ecx,[rdx-0x2]
   4dc17:	sub    edx,0x3
   4dc1a:	cmp    ecx,eax
   4dc1c:	cmovg  eax,edx
   4dc1f:	jmp    4d405 <updateQuantizationParameter+0x2a5>
   4dc24:	nop    DWORD PTR [rax+0x0]
   4dc28:	mulsd  xmm3,QWORD PTR [rip+0x1ce60]        # 6aa90 <QP_SCALE_CR+0x50>
   4dc30:	movapd xmm0,xmm2
   4dc34:	mulsd  xmm0,xmm4
   4dc38:	mulsd  xmm3,xmm4
   4dc3c:	mulsd  xmm6,xmm0
   4dc40:	mulsd  xmm3,xmm1
   4dc44:	addsd  xmm6,xmm3
   4dc48:	comisd xmm5,xmm6
   4dc4c:	ja     4d38f <updateQuantizationParameter+0x22f>
   4dc52:	ucomisd xmm5,xmm6
   4dc56:	movapd xmm7,xmm6
   4dc5a:	sqrtsd xmm7,xmm7
   4dc5e:	ja     4e320 <updateQuantizationParameter+0x11c0>
   4dc64:	movapd xmm3,xmm7
   4dc68:	subsd  xmm3,xmm2
   4dc6c:	comisd xmm5,xmm3
   4dc70:	jb     4e096 <updateQuantizationParameter+0xf36>
   4dc76:	mov    ecx,DWORD PTR [rip+0x8fd84]        # dda00 <m_Qp>
   4dc7c:	jmp    4d38f <updateQuantizationParameter+0x22f>
   4dc81:	nop    DWORD PTR [rax+0x0]
   4dc88:	cmp    DWORD PTR [r9+0xb40],0x2
   4dc90:	je     4dcf0 <updateQuantizationParameter+0xb90>
   4dc92:	mov    r9d,DWORD PTR [r9+0xb44]
   4dc99:	test   r9d,r9d
   4dc9c:	jne    4dcf0 <updateQuantizationParameter+0xb90>
   4dc9e:	mov    ecx,DWORD PTR [rip+0x902c4]        # ddf68 <PAveFrameQP>
   4dca4:	test   rdx,rdx
   4dca7:	jle    4dea0 <updateQuantizationParameter+0xd40>
   4dcad:	mov    DWORD PTR [rip+0x8f6c5],ecx        # dd378 <m_Qc>
   4dcb3:	mov    eax,ecx
   4dcb5:	sub    r8d,0x1
   4dcb9:	add    DWORD PTR [rip+0x8fd11],eax        # dd9d0 <TotalFrameQP>
   4dcbf:	mov    DWORD PTR [rip+0x8fc82],r8d        # dd948 <NumberofBasicUnit>
   4dcc6:	mov    DWORD PTR [rip+0x8f5dc],ecx        # dd2a8 <Pm_Qp>
   4dccc:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4dcd1:	nop    DWORD PTR [rax+0x0]
   4dcd8:	lea    ecx,[rdx+0x2]
   4dcdb:	add    edx,0x3
   4dcde:	cmp    eax,ecx
   4dce0:	cmovg  eax,edx
   4dce3:	mov    DWORD PTR [rip+0x8f68f],eax        # dd378 <m_Qc>
   4dce9:	jmp    4db3e <updateQuantizationParameter+0x9de>
   4dcee:	xchg   ax,ax
   4dcf0:	test   r11d,r11d
   4dcf3:	jne    4dc9e <updateQuantizationParameter+0xb3e>
   4dcf5:	cmp    DWORD PTR [rsi+0x11b9c],0x1
   4dcfc:	mov    eax,DWORD PTR [rsi+0x11b80]
   4dd02:	je     4e14d <updateQuantizationParameter+0xfed>
   4dd08:	mov    ecx,DWORD PTR [rip+0x8fcfa]        # dda08 <FieldQPBuffer>
   4dd0e:	test   eax,eax
   4dd10:	jle    4dd18 <updateQuantizationParameter+0xbb8>
   4dd12:	add    DWORD PTR [rsi+0x11b7c],ecx
   4dd18:	mov    eax,DWORD PTR [rip+0x8f642]        # dd360 <FieldAveHeaderBits>
   4dd1e:	mov    DWORD PTR [rip+0x90244],ecx        # ddf68 <PAveFrameQP>
   4dd24:	mov    DWORD PTR [rip+0x8fcaa],eax        # dd9d4 <PAveHeaderBits3>
   4dd2a:	jmp    4dca4 <updateQuantizationParameter+0xb44>
   4dd2f:	nop
   4dd30:	add    eax,0x2
   4dd33:	jmp    4d945 <updateQuantizationParameter+0x7e5>
   4dd38:	nop    DWORD PTR [rax+rax*1+0x0]
   4dd40:	sub    esi,0x2
   4dd43:	jmp    4d9fd <updateQuantizationParameter+0x89d>
   4dd48:	nop    DWORD PTR [rax+rax*1+0x0]
   4dd50:	mov    eax,DWORD PTR [rsi+0x11b98]
   4dd56:	test   eax,eax
   4dd58:	je     4df67 <updateQuantizationParameter+0xe07>
   4dd5e:	mov    esi,DWORD PTR [rip+0x8f324]        # dd088 <PreviousQp1>
   4dd64:	mov    edi,r8d
   4dd67:	xor    eax,eax
   4dd69:	sub    edi,esi
   4dd6b:	jmp    4d570 <updateQuantizationParameter+0x410>
   4dd70:	cmp    edx,0x1
   4dd73:	jne    4e0ef <updateQuantizationParameter+0xf8f>
   4dd79:	cmp    DWORD PTR [rdi+0xb40],0x2
   4dd80:	je     4e006 <updateQuantizationParameter+0xea6>
   4dd86:	mov    eax,DWORD PTR [rdi+0xb44]
   4dd8c:	test   eax,eax
   4dd8e:	jne    4e006 <updateQuantizationParameter+0xea6>
   4dd94:	mov    esi,DWORD PTR [rip+0x8f2ee]        # dd088 <PreviousQp1>
   4dd9a:	mov    edi,r8d
   4dd9d:	sub    edi,esi
   4dd9f:	jmp    4d9c6 <updateQuantizationParameter+0x866>
   4dda4:	nop    DWORD PTR [rax+0x0]
   4dda8:	mov    edx,DWORD PTR [rip+0x901ba]        # ddf68 <PAveFrameQP>
   4ddae:	mov    DWORD PTR [rip+0x8f4f4],edx        # dd2a8 <Pm_Qp>
   4ddb4:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4ddb9:	nop    DWORD PTR [rax+0x0]
   4ddc0:	mov    r11,QWORD PTR [rip+0x8f401]        # dd1c8 <FCBUPFMAD>
   4ddc7:	pxor   xmm5,xmm5
   4ddcb:	movsd  xmm4,QWORD PTR [r11+rbx*8]
   4ddd1:	mov    QWORD PTR [rip+0x8f40c],0x0        # dd1e8 <TotalBUMAD>
   4dddc:	mulsd  xmm4,xmm2
   4dde0:	addsd  xmm4,xmm7
   4dde4:	movsd  QWORD PTR [rip+0x8f4c4],xmm4        # dd2b0 <CurrentFrameMAD>
   4ddec:	cmp    esi,eax
   4ddee:	jg     4dffd <updateQuantizationParameter+0xe9d>
   4ddf4:	cdqe   
   4ddf6:	movapd xmm1,xmm5
   4ddfa:	nop    WORD PTR [rax+rax*1+0x0]
   4de00:	movsd  xmm0,QWORD PTR [r11+rax*8]
   4de06:	sub    rax,0x1
   4de0a:	mulsd  xmm0,xmm2
   4de0e:	addsd  xmm0,xmm7
   4de12:	movsd  QWORD PTR [rip+0x9015e],xmm0        # ddf78 <CurrentBUMAD>
   4de1a:	mulsd  xmm0,xmm0
   4de1e:	addsd  xmm1,xmm0
   4de22:	movsd  QWORD PTR [rip+0x8f3be],xmm1        # dd1e8 <TotalBUMAD>
   4de2a:	cmp    esi,eax
   4de2c:	jle    4de00 <updateQuantizationParameter+0xca0>
   4de2e:	jmp    4d31e <updateQuantizationParameter+0x1be>
   4de33:	nop    DWORD PTR [rax+rax*1+0x0]
   4de38:	mov    edi,DWORD PTR [rip+0x8fb1a]        # dd958 <FrameQPBuffer>
   4de3e:	add    eax,edi
   4de40:	mov    DWORD PTR [rip+0x8f462],edi        # dd2a8 <Pm_Qp>
   4de46:	mov    DWORD PTR [rsi+0x11b7c],eax
   4de4c:	jmp    4d6ea <updateQuantizationParameter+0x58a>
   4de51:	nop    DWORD PTR [rax+0x0]
   4de58:	mov    esi,DWORD PTR [rip+0x8f22a]        # dd088 <PreviousQp1>
   4de5e:	lea    r10d,[rdx-0x1]
   4de62:	mov    edi,r8d
   4de65:	mov    eax,r10d
   4de68:	sub    edi,esi
   4de6a:	imul   eax,edi
   4de6d:	cdq    
   4de6e:	idiv   r9d
   4de71:	mov    edx,r10d
   4de74:	neg    edx
   4de76:	add    edx,edx
   4de78:	cmp    eax,edx
   4de7a:	cmovl  eax,edx
   4de7d:	lea    edx,[r10+r10*1]
   4de81:	cmp    eax,edx
   4de83:	cmovg  eax,edx
   4de86:	jmp    4d570 <updateQuantizationParameter+0x410>
   4de8b:	nop    DWORD PTR [rax+rax*1+0x0]
   4de90:	sub    esi,0x1
   4de93:	jmp    4d9fd <updateQuantizationParameter+0x89d>
   4de98:	nop    DWORD PTR [rax+rax*1+0x0]
   4dea0:	mov    edx,DWORD PTR [rip+0x8fff2]        # dde98 <RC_MAX_QUANT>
   4dea6:	lea    eax,[rcx+0x2]
   4dea9:	mov    DWORD PTR [rip+0x8f4c9],eax        # dd378 <m_Qc>
   4deaf:	cmp    eax,edx
   4deb1:	jle    4debb <updateQuantizationParameter+0xd5b>
   4deb3:	mov    DWORD PTR [rip+0x8f4bf],edx        # dd378 <m_Qc>
   4deb9:	mov    eax,edx
   4debb:	test   r11d,r11d
   4debe:	je     4dec8 <updateQuantizationParameter+0xd68>
   4dec0:	test   edi,edi
   4dec2:	je     4dcb5 <updateQuantizationParameter+0xb55>
   4dec8:	mov    DWORD PTR [rip+0x8fabe],0x1        # dd990 <GOPOverdue>
   4ded2:	jmp    4dcb5 <updateQuantizationParameter+0xb55>
   4ded7:	nop    WORD PTR [rax+rax*1+0x0]
   4dee0:	pxor   xmm0,xmm0
   4dee4:	pxor   xmm1,xmm1
   4dee8:	mov    ecx,DWORD PTR [r9+0x4c8]
   4deef:	mov    edi,DWORD PTR [rsi+0x11b80]
   4def5:	cvtsi2sd xmm0,edx
   4def9:	cvtsi2sd xmm1,r10d
   4defe:	sub    ecx,0x2
   4df01:	divsd  xmm0,xmm1
   4df05:	addsd  xmm0,QWORD PTR [rip+0x24f4b]        # 72e58 <quant_coef+0x198>
   4df0d:	cvttsd2si edx,xmm0
   4df11:	cmp    edi,ecx
   4df13:	jne    4df1b <updateQuantizationParameter+0xdbb>
   4df15:	mov    DWORD PTR [rip+0x8fa15],edx        # dd930 <QPLastPFrame>
   4df1b:	add    DWORD PTR [rsi+0x11b7c],edx
   4df21:	cmp    ebp,0x1
   4df24:	je     4e02c <updateQuantizationParameter+0xecc>
   4df2a:	test   edi,edi
   4df2c:	jne    4e026 <updateQuantizationParameter+0xec6>
   4df32:	cmp    ebx,0x1
   4df35:	jle    4df50 <updateQuantizationParameter+0xdf0>
   4df37:	mov    ecx,DWORD PTR [rip+0x8fa27]        # dd964 <PreviousQp2>
   4df3d:	mov    DWORD PTR [rip+0x8fa21],edx        # dd964 <PreviousQp2>
   4df43:	mov    DWORD PTR [rip+0x8f13f],ecx        # dd088 <PreviousQp1>
   4df49:	nop    DWORD PTR [rax+0x0]
   4df50:	mov    DWORD PTR [rip+0x90012],edx        # ddf68 <PAveFrameQP>
   4df56:	mov    edx,DWORD PTR [rip+0x8faa8]        # dda04 <PAveHeaderBits2>
   4df5c:	mov    DWORD PTR [rip+0x8fa72],edx        # dd9d4 <PAveHeaderBits3>
   4df62:	jmp    4dbd8 <updateQuantizationParameter+0xa78>
   4df67:	cmp    DWORD PTR [rsi+0x11b9c],0x1
   4df6e:	mov    DWORD PTR [rip+0x8f113],r8d        # dd088 <PreviousQp1>
   4df75:	je     4e1cb <updateQuantizationParameter+0x106b>
   4df7b:	mov    edi,DWORD PTR [rip+0x8fa87]        # dda08 <FieldQPBuffer>
   4df81:	mov    esi,r8d
   4df84:	mov    DWORD PTR [rip+0x8f9da],edi        # dd964 <PreviousQp2>
   4df8a:	sub    edi,r8d
   4df8d:	jmp    4d570 <updateQuantizationParameter+0x410>
   4df92:	pxor   xmm0,xmm0
   4df96:	pxor   xmm1,xmm1
   4df9a:	mov    esi,DWORD PTR [r9+0x4c8]
   4dfa1:	cvtsi2sd xmm0,edx
   4dfa5:	cvtsi2sd xmm1,DWORD PTR [rip+0x8f973]        # dd920 <TotalNumberofBasicUnit>
   4dfad:	sub    esi,0x2
   4dfb0:	divsd  xmm0,xmm1
   4dfb4:	addsd  xmm0,QWORD PTR [rip+0x24e9c]        # 72e58 <quant_coef+0x198>
   4dfbc:	cvttsd2si edx,xmm0
   4dfc0:	cmp    DWORD PTR [rcx+0x11b80],esi
   4dfc6:	jne    4dfce <updateQuantizationParameter+0xe6e>
   4dfc8:	mov    DWORD PTR [rip+0x8f962],edx        # dd930 <QPLastPFrame>
   4dfce:	add    DWORD PTR [rcx+0x11b7c],edx
   4dfd4:	mov    ecx,DWORD PTR [rip+0x8f98a]        # dd964 <PreviousQp2>
   4dfda:	mov    DWORD PTR [rip+0x8ff88],edx        # ddf68 <PAveFrameQP>
   4dfe0:	mov    DWORD PTR [rip+0x8f97e],edx        # dd964 <PreviousQp2>
   4dfe6:	mov    edx,DWORD PTR [rip+0x8fa18]        # dda04 <PAveHeaderBits2>
   4dfec:	mov    DWORD PTR [rip+0x8f096],ecx        # dd088 <PreviousQp1>
   4dff2:	mov    DWORD PTR [rip+0x8f9dc],edx        # dd9d4 <PAveHeaderBits3>
   4dff8:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4dffd:	movapd xmm1,xmm5
   4e001:	jmp    4d31e <updateQuantizationParameter+0x1be>
   4e006:	mov    eax,DWORD PTR [rsi+0x11b98]
   4e00c:	test   eax,eax
   4e00e:	je     4e122 <updateQuantizationParameter+0xfc2>
   4e014:	mov    esi,DWORD PTR [rip+0x8f06e]        # dd088 <PreviousQp1>
   4e01a:	mov    edi,r8d
   4e01d:	xor    eax,eax
   4e01f:	sub    edi,esi
   4e021:	jmp    4d9c6 <updateQuantizationParameter+0x866>
   4e026:	jle    4df50 <updateQuantizationParameter+0xdf0>
   4e02c:	mov    ebx,DWORD PTR [rip+0x8f932]        # dd964 <PreviousQp2>
   4e032:	mov    DWORD PTR [rip+0x8f92c],edx        # dd964 <PreviousQp2>
   4e038:	lea    ecx,[rbx+0x1]
   4e03b:	mov    DWORD PTR [rip+0x8f047],ecx        # dd088 <PreviousQp1>
   4e041:	jmp    4df50 <updateQuantizationParameter+0xdf0>
   4e046:	mov    edx,DWORD PTR [rip+0x8f90c]        # dd958 <FrameQPBuffer>
   4e04c:	mov    eax,r8d
   4e04f:	mov    DWORD PTR [rip+0x8f90f],edx        # dd964 <PreviousQp2>
   4e055:	mov    r8d,edx
   4e058:	jmp    4d92b <updateQuantizationParameter+0x7cb>
   4e05d:	movsd  xmm1,QWORD PTR [rip+0x8f31b]        # dd380 <m_X2>
   4e065:	addsd  xmm1,xmm1
   4e069:	mulsd  xmm1,xmm7
   4e06d:	divsd  xmm1,xmm0
   4e071:	pxor   xmm0,xmm0
   4e075:	mov    edi,DWORD PTR [rip+0x8f985]        # dda00 <m_Qp>
   4e07b:	mov    ecx,DWORD PTR [rip+0x8f487]        # dd508 <DuantQp>
   4e081:	cvtsd2ss xmm0,xmm1
   4e085:	cvtss2sd xmm0,xmm0
   4e089:	movsd  QWORD PTR [rip+0x8ef2f],xmm0        # dcfc0 <m_Qstep>
   4e091:	jmp    4d7e1 <updateQuantizationParameter+0x681>
   4e096:	movsd  xmm0,QWORD PTR [rip+0x8f2e2]        # dd380 <m_X2>
   4e09e:	addsd  xmm0,xmm0
   4e0a2:	mulsd  xmm4,xmm0
   4e0a6:	divsd  xmm4,xmm3
   4e0aa:	pxor   xmm0,xmm0
   4e0ae:	mov    ecx,DWORD PTR [rip+0x8f94c]        # dda00 <m_Qp>
   4e0b4:	cvtsd2ss xmm0,xmm4
   4e0b8:	cvtss2sd xmm0,xmm0
   4e0bc:	movsd  QWORD PTR [rip+0x8eefc],xmm0        # dcfc0 <m_Qstep>
   4e0c4:	jmp    4d3a7 <updateQuantizationParameter+0x247>
   4e0c9:	mov    ebx,DWORD PTR [rip+0x8f895]        # dd964 <PreviousQp2>
   4e0cf:	add    DWORD PTR [rsi+0x11b7c],eax
   4e0d5:	mov    DWORD PTR [rip+0x8f889],eax        # dd964 <PreviousQp2>
   4e0db:	lea    edx,[rbx+0x1]
   4e0de:	mov    DWORD PTR [rip+0x8f1c4],eax        # dd2a8 <Pm_Qp>
   4e0e4:	mov    DWORD PTR [rip+0x8ef9e],edx        # dd088 <PreviousQp1>
   4e0ea:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4e0ef:	mov    esi,DWORD PTR [rip+0x8ef93]        # dd088 <PreviousQp1>
   4e0f5:	lea    r10d,[rdx-0x1]
   4e0f9:	mov    edi,r8d
   4e0fc:	mov    eax,r10d
   4e0ff:	sub    edi,esi
   4e101:	imul   eax,edi
   4e104:	cdq    
   4e105:	idiv   r9d
   4e108:	mov    edx,r10d
   4e10b:	neg    edx
   4e10d:	add    edx,edx
   4e10f:	cmp    eax,edx
   4e111:	cmovl  eax,edx
   4e114:	lea    edx,[r10+r10*1]
   4e118:	cmp    eax,edx
   4e11a:	cmovg  eax,edx
   4e11d:	jmp    4d9c6 <updateQuantizationParameter+0x866>
   4e122:	cmp    DWORD PTR [rsi+0x11b9c],0x1
   4e129:	mov    DWORD PTR [rip+0x8ef58],r8d        # dd088 <PreviousQp1>
   4e130:	je     4e233 <updateQuantizationParameter+0x10d3>
   4e136:	mov    edi,DWORD PTR [rip+0x8f8cc]        # dda08 <FieldQPBuffer>
   4e13c:	mov    esi,r8d
   4e13f:	mov    DWORD PTR [rip+0x8f81f],edi        # dd964 <PreviousQp2>
   4e145:	sub    edi,r8d
   4e148:	jmp    4d9c6 <updateQuantizationParameter+0x866>
   4e14d:	mov    ecx,DWORD PTR [rip+0x8f805]        # dd958 <FrameQPBuffer>
   4e153:	test   eax,eax
   4e155:	jle    4e15d <updateQuantizationParameter+0xffd>
   4e157:	add    DWORD PTR [rsi+0x11b7c],ecx
   4e15d:	mov    eax,DWORD PTR [rip+0x8f845]        # dd9a8 <FrameAveHeaderBits>
   4e163:	mov    DWORD PTR [rip+0x8fdff],ecx        # ddf68 <PAveFrameQP>
   4e169:	mov    DWORD PTR [rip+0x8f865],eax        # dd9d4 <PAveHeaderBits3>
   4e16f:	jmp    4dca4 <updateQuantizationParameter+0xb44>
   4e174:	mov    rdx,QWORD PTR [rip+0x67cf5]        # b5e70 <active_sps>
   4e17b:	mov    r10d,DWORD PTR [rdx+0x47c]
   4e182:	test   r10d,r10d
   4e185:	jne    4e1e2 <updateQuantizationParameter+0x1082>
   4e187:	mov    rdx,QWORD PTR [rip+0x3a42a]        # 885b8 <input>
   4e18e:	mov    ecx,DWORD PTR [rdx+0xb40]
   4e194:	cmp    ecx,0x1
   4e197:	je     4e1e2 <updateQuantizationParameter+0x1082>
   4e199:	cmp    ecx,0x2
   4e19c:	je     4e1ab <updateQuantizationParameter+0x104b>
   4e19e:	cmp    DWORD PTR [rdx+0xb44],0x0
   4e1a5:	je     4d8c6 <updateQuantizationParameter+0x766>
   4e1ab:	mov    edx,DWORD PTR [rip+0x8f853]        # dda04 <PAveHeaderBits2>
   4e1b1:	test   r11d,r11d
   4e1b4:	jne    4e24a <updateQuantizationParameter+0x10ea>
   4e1ba:	mov    DWORD PTR [rip+0x8f798],eax        # dd958 <FrameQPBuffer>
   4e1c0:	mov    DWORD PTR [rip+0x8f7e2],edx        # dd9a8 <FrameAveHeaderBits>
   4e1c6:	jmp    4d8c6 <updateQuantizationParameter+0x766>
   4e1cb:	mov    edi,DWORD PTR [rip+0x8f787]        # dd958 <FrameQPBuffer>
   4e1d1:	mov    esi,r8d
   4e1d4:	mov    DWORD PTR [rip+0x8f78a],edi        # dd964 <PreviousQp2>
   4e1da:	sub    edi,r8d
   4e1dd:	jmp    4d570 <updateQuantizationParameter+0x410>
   4e1e2:	mov    edx,DWORD PTR [rip+0x8f77c]        # dd964 <PreviousQp2>
   4e1e8:	add    DWORD PTR [rsi+0x11b7c],eax
   4e1ee:	mov    DWORD PTR [rip+0x8f770],eax        # dd964 <PreviousQp2>
   4e1f4:	mov    DWORD PTR [rip+0x8ee8e],edx        # dd088 <PreviousQp1>
   4e1fa:	mov    edx,DWORD PTR [rip+0x8f804]        # dda04 <PAveHeaderBits2>
   4e200:	mov    DWORD PTR [rip+0x8fd62],eax        # ddf68 <PAveFrameQP>
   4e206:	mov    DWORD PTR [rip+0x8f7c8],edx        # dd9d4 <PAveHeaderBits3>
   4e20c:	jmp    4d8c6 <updateQuantizationParameter+0x766>
   4e211:	mov    DWORD PTR [rip+0x8f7f1],edx        # dda08 <FieldQPBuffer>
   4e217:	mov    DWORD PTR [rip+0x8f143],ecx        # dd360 <FieldAveHeaderBits>
   4e21d:	jmp    4dbd8 <updateQuantizationParameter+0xa78>
   4e222:	mov    DWORD PTR [rip+0x8f7e0],edx        # dda08 <FieldQPBuffer>
   4e228:	mov    DWORD PTR [rip+0x8f132],esi        # dd360 <FieldAveHeaderBits>
   4e22e:	jmp    4d5be <updateQuantizationParameter+0x45e>
   4e233:	mov    edi,DWORD PTR [rip+0x8f71f]        # dd958 <FrameQPBuffer>
   4e239:	mov    esi,r8d
   4e23c:	mov    DWORD PTR [rip+0x8f722],edi        # dd964 <PreviousQp2>
   4e242:	sub    edi,r8d
   4e245:	jmp    4d9c6 <updateQuantizationParameter+0x866>
   4e24a:	mov    DWORD PTR [rip+0x8f7b8],eax        # dda08 <FieldQPBuffer>
   4e250:	mov    DWORD PTR [rip+0x8f10a],edx        # dd360 <FieldAveHeaderBits>
   4e256:	jmp    4d8c6 <updateQuantizationParameter+0x766>
   4e25b:	movapd xmm0,xmm2
   4e25f:	movsd  QWORD PTR [rsp+0x20],xmm5
   4e265:	movsd  QWORD PTR [rsp+0x18],xmm4
   4e26b:	movsd  QWORD PTR [rsp+0x10],xmm1
   4e271:	movsd  QWORD PTR [rsp+0x8],xmm2
   4e277:	call   4520 <sqrt@plt>
   4e27c:	movsd  xmm6,QWORD PTR [rip+0x8f02c]        # dd2b0 <CurrentFrameMAD>
   4e284:	movsd  xmm3,QWORD PTR [rip+0x8f764]        # dd9f0 <m_X1>
   4e28c:	movsd  xmm4,QWORD PTR [rsp+0x18]
   4e292:	movsd  xmm5,QWORD PTR [rsp+0x20]
   4e298:	mulsd  xmm3,xmm6
   4e29c:	mov    rsi,QWORD PTR [rip+0x3a30d]        # 885b0 <img>
   4e2a3:	movsd  xmm2,QWORD PTR [rsp+0x8]
   4e2a9:	movapd xmm0,xmm4
   4e2ad:	movsd  xmm1,QWORD PTR [rsp+0x10]
   4e2b3:	subsd  xmm0,xmm3
   4e2b7:	comisd xmm5,xmm0
   4e2bb:	jae    4daae <updateQuantizationParameter+0x94e>
   4e2c1:	movsd  xmm1,QWORD PTR [rip+0x8f0b7]        # dd380 <m_X2>
   4e2c9:	ucomisd xmm5,xmm2
   4e2cd:	movsd  QWORD PTR [rsp+0x10],xmm4
   4e2d3:	addsd  xmm1,xmm1
   4e2d7:	mulsd  xmm1,xmm6
   4e2db:	jbe    4e06d <updateQuantizationParameter+0xf0d>
   4e2e1:	movapd xmm0,xmm2
   4e2e5:	movsd  QWORD PTR [rsp+0x8],xmm1
   4e2eb:	call   4520 <sqrt@plt>
   4e2f0:	movsd  xmm0,QWORD PTR [rip+0x8f6f8]        # dd9f0 <m_X1>
   4e2f8:	mulsd  xmm0,QWORD PTR [rip+0x8efb0]        # dd2b0 <CurrentFrameMAD>
   4e300:	movsd  xmm4,QWORD PTR [rsp+0x10]
   4e306:	mov    rsi,QWORD PTR [rip+0x3a2a3]        # 885b0 <img>
   4e30d:	movsd  xmm1,QWORD PTR [rsp+0x8]
   4e313:	subsd  xmm4,xmm0
   4e317:	movapd xmm0,xmm4
   4e31b:	jmp    4e06d <updateQuantizationParameter+0xf0d>
   4e320:	movapd xmm0,xmm6
   4e324:	mov    DWORD PTR [rsp+0x20],edi
   4e328:	movsd  QWORD PTR [rsp+0x28],xmm5
   4e32e:	movsd  QWORD PTR [rsp+0x18],xmm7
   4e334:	movsd  QWORD PTR [rsp+0x8],xmm6
   4e33a:	movsd  QWORD PTR [rsp+0x10],xmm1
   4e340:	call   4520 <sqrt@plt>
   4e345:	movsd  xmm7,QWORD PTR [rsp+0x18]
   4e34b:	mov    edi,DWORD PTR [rsp+0x20]
   4e34f:	movsd  xmm0,QWORD PTR [rip+0x8ef59]        # dd2b0 <CurrentFrameMAD>
   4e357:	movsd  xmm2,QWORD PTR [rip+0x8f691]        # dd9f0 <m_X1>
   4e35f:	movapd xmm3,xmm7
   4e363:	movsd  xmm5,QWORD PTR [rsp+0x28]
   4e369:	movsd  xmm6,QWORD PTR [rsp+0x8]
   4e36f:	mulsd  xmm2,xmm0
   4e373:	subsd  xmm3,xmm2
   4e377:	comisd xmm5,xmm3
   4e37b:	jb     4e396 <updateQuantizationParameter+0x1236>
   4e37d:	mov    r9,QWORD PTR [rip+0x3a234]        # 885b8 <input>
   4e384:	mov    r8d,DWORD PTR [rip+0x8f5bd]        # dd948 <NumberofBasicUnit>
   4e38b:	movsd  xmm1,QWORD PTR [rsp+0x10]
   4e391:	jmp    4dc76 <updateQuantizationParameter+0xb16>
   4e396:	movsd  xmm4,QWORD PTR [rip+0x8efe2]        # dd380 <m_X2>
   4e39e:	ucomisd xmm5,xmm6
   4e3a2:	addsd  xmm4,xmm4
   4e3a6:	mulsd  xmm4,xmm0
   4e3aa:	jbe    4e400 <updateQuantizationParameter+0x12a0>
   4e3ac:	movapd xmm0,xmm6
   4e3b0:	mov    DWORD PTR [rsp+0x18],edi
   4e3b4:	movsd  QWORD PTR [rsp+0x10],xmm4
   4e3ba:	movsd  QWORD PTR [rsp+0x8],xmm7
   4e3c0:	call   4520 <sqrt@plt>
   4e3c5:	movsd  xmm7,QWORD PTR [rsp+0x8]
   4e3cb:	mov    edi,DWORD PTR [rsp+0x18]
   4e3cf:	movsd  xmm0,QWORD PTR [rip+0x8f619]        # dd9f0 <m_X1>
   4e3d7:	mulsd  xmm0,QWORD PTR [rip+0x8eed1]        # dd2b0 <CurrentFrameMAD>
   4e3df:	movapd xmm3,xmm7
   4e3e3:	mov    r9,QWORD PTR [rip+0x3a1ce]        # 885b8 <input>
   4e3ea:	mov    r8d,DWORD PTR [rip+0x8f557]        # dd948 <NumberofBasicUnit>
   4e3f1:	movsd  xmm4,QWORD PTR [rsp+0x10]
   4e3f7:	subsd  xmm3,xmm0
   4e3fb:	jmp    4e0a6 <updateQuantizationParameter+0xf46>
   4e400:	mov    r9,QWORD PTR [rip+0x3a1b1]        # 885b8 <input>
   4e407:	mov    r8d,DWORD PTR [rip+0x8f53a]        # dd948 <NumberofBasicUnit>
   4e40e:	jmp    4e0a6 <updateQuantizationParameter+0xf46>
   4e413:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4e41d:	nop    DWORD PTR [rax]

000000000004e420 <GetBestTransformP8x8.part.0>:
   4e420:	push   r15
   4e422:	push   r14
   4e424:	push   r13
   4e426:	push   r12
   4e428:	push   rbp
   4e429:	push   rbx
   4e42a:	sub    rsp,0x288
   4e431:	mov    rax,QWORD PTR fs:0x28
   4e43a:	mov    QWORD PTR [rsp+0x278],rax
   4e442:	xor    eax,eax
   4e444:	lea    rax,[rsp+0x70]
   4e449:	mov    DWORD PTR [rsp+0x58],0x0
   4e451:	mov    QWORD PTR [rsp+0x50],rax
   4e456:	lea    rax,[rsp+0x170]
   4e45e:	mov    DWORD PTR [rsp+0x6c],0x0
   4e466:	mov    DWORD PTR [rsp+0x5c],0x0
   4e46e:	mov    QWORD PTR [rsp+0x30],rax
   4e473:	mov    QWORD PTR [rsp+0x20],0x0
   4e47c:	mov    ebx,DWORD PTR [rsp+0x5c]
   4e480:	mov    eax,ebx
   4e482:	sar    eax,1
   4e484:	lea    ecx,[rax*8+0x0]
   4e48b:	lea    eax,[rbx*8+0x0]
   4e492:	and    eax,0x8
   4e495:	mov    DWORD PTR [rsp+0x3c],ecx
   4e499:	mov    ebx,eax
   4e49b:	mov    DWORD PTR [rsp+0x68],eax
   4e49f:	movsxd rax,ecx
   4e4a2:	shl    rax,0x4
   4e4a6:	mov    QWORD PTR [rsp+0x40],rax
   4e4ab:	movsxd rax,ebx
   4e4ae:	mov    QWORD PTR [rsp+0x60],rax
   4e4b3:	add    rax,0x8
   4e4b7:	mov    QWORD PTR [rsp+0x48],rax
   4e4bc:	mov    rax,QWORD PTR [rip+0x3a0ed]        # 885b0 <img>
   4e4c3:	mov    edx,DWORD PTR [rsp+0x3c]
   4e4c7:	mov    rdi,QWORD PTR [rsp+0x20]
   4e4cc:	mov    rcx,QWORD PTR [rsp+0x60]
   4e4d1:	add    edx,DWORD PTR [rax+0xac]
   4e4d7:	mov    rbp,QWORD PTR [rsp+0x40]
   4e4dc:	movsxd rdx,edx
   4e4df:	mov    ebx,edi
   4e4e1:	mov    QWORD PTR [rsp+0x10],rcx
   4e4e6:	shl    rdi,0x7
   4e4ea:	shl    ebx,0x5
   4e4ed:	add    rbp,rcx
   4e4f0:	mov    r14d,DWORD PTR [rsp+0x68]
   4e4f5:	mov    r12,rdi
   4e4f8:	lea    rsi,[rdx*8+0x0]
   4e500:	add    ebx,0x10
   4e503:	add    rbp,rbp
   4e506:	mov    QWORD PTR [rsp+0x28],rsi
   4e50b:	mov    rdi,QWORD PTR [rsp+0x50]
   4e510:	mov    r15d,DWORD PTR [rax+0xa8]
   4e517:	lea    rcx,[rip+0x93842]        # e1d60 <mpr_8x8ts>
   4e51e:	lea    r13d,[rbx-0x10]
   4e522:	mov    r11,QWORD PTR [rsp+0x28]
   4e527:	lea    r8,[rcx+rbp*1]
   4e52b:	add    r11,QWORD PTR [rip+0x68e96]        # b73c8 <imgY_org>
   4e532:	lea    rsi,[rdi+r12*1]
   4e536:	lea    rdi,[rip+0x90fe3]        # df520 <mpr8x8>
   4e53d:	add    r15d,r14d
   4e540:	lea    r9,[rdi+rbp*1]
   4e544:	mov    QWORD PTR [rsp+0x18],rsi
   4e549:	mov    rdi,QWORD PTR [rsp+0x30]
   4e54e:	movsxd r15,r15d
   4e551:	add    r15,r15
   4e554:	add    rdi,r12
   4e557:	mov    rcx,QWORD PTR [r11]
   4e55a:	mov    QWORD PTR [rsp+0x8],r11
   4e55f:	xor    eax,eax
   4e561:	add    rcx,r15
   4e564:	movzx  edx,WORD PTR [rcx+rax*1]
   4e568:	movzx  r10d,WORD PTR [r9+rax*1]
   4e56d:	mov    r11d,edx
   4e570:	sub    r11d,r10d
   4e573:	movzx  r10d,WORD PTR [r8+rax*1]
   4e578:	mov    DWORD PTR [rsi+rax*2],r11d
   4e57c:	sub    edx,r10d
   4e57f:	mov    DWORD PTR [rdi+rax*2],edx
   4e582:	add    rax,0x2
   4e586:	cmp    rax,0x8
   4e58a:	jne    4e564 <GetBestTransformP8x8.part.0+0x144>
   4e58c:	add    r13d,0x4
   4e590:	add    r9,0x20
   4e594:	add    rsi,0x10
   4e598:	add    r8,0x20
   4e59c:	mov    r11,QWORD PTR [rsp+0x8]
   4e5a1:	add    rdi,0x10
   4e5a5:	add    r11,0x8
   4e5a9:	cmp    r13d,ebx
   4e5ac:	jne    4e557 <GetBestTransformP8x8.part.0+0x137>
   4e5ae:	mov    rdi,QWORD PTR [rsp+0x18]
   4e5b3:	add    r14d,0x4
   4e5b7:	add    ebx,0x10
   4e5ba:	add    r12,0x40
   4e5be:	mov    rax,QWORD PTR [rip+0x39ff3]        # 885b8 <input>
   4e5c5:	add    rbp,0x8
   4e5c9:	mov    esi,DWORD PTR [rax+0x18]
   4e5cc:	call   3bae0 <SATD>
   4e5d1:	add    QWORD PTR [rsp+0x10],0x4
   4e5d7:	add    DWORD PTR [rsp+0x58],eax
   4e5db:	mov    rax,QWORD PTR [rsp+0x10]
   4e5e0:	cmp    QWORD PTR [rsp+0x48],rax
   4e5e5:	je     4e5f8 <GetBestTransformP8x8.part.0+0x1d8>
   4e5e7:	mov    rax,QWORD PTR [rip+0x39fc2]        # 885b0 <img>
   4e5ee:	jmp    4e50b <GetBestTransformP8x8.part.0+0xeb>
   4e5f3:	nop    DWORD PTR [rax+rax*1+0x0]
   4e5f8:	add    DWORD PTR [rsp+0x3c],0x4
   4e5fd:	add    QWORD PTR [rsp+0x40],0x40
   4e603:	cmp    QWORD PTR [rsp+0x20],0x1
   4e609:	je     4e619 <GetBestTransformP8x8.part.0+0x1f9>
   4e60b:	mov    QWORD PTR [rsp+0x20],0x1
   4e614:	jmp    4e4bc <GetBestTransformP8x8.part.0+0x9c>
   4e619:	mov    rax,QWORD PTR [rip+0x39f98]        # 885b8 <input>
   4e620:	mov    rdi,QWORD PTR [rsp+0x30]
   4e625:	mov    esi,DWORD PTR [rax+0x18]
   4e628:	call   3bd40 <SATD8X8>
   4e62d:	add    DWORD PTR [rsp+0x5c],0x1
   4e632:	add    DWORD PTR [rsp+0x6c],eax
   4e636:	mov    eax,DWORD PTR [rsp+0x5c]
   4e63a:	cmp    eax,0x4
   4e63d:	jne    4e473 <GetBestTransformP8x8.part.0+0x53>
   4e643:	mov    ebx,DWORD PTR [rsp+0x6c]
   4e647:	xor    eax,eax
   4e649:	cmp    DWORD PTR [rsp+0x58],ebx
   4e64d:	setg   al
   4e650:	mov    rbx,QWORD PTR [rsp+0x278]
   4e658:	xor    rbx,QWORD PTR fs:0x28
   4e661:	jne    4e675 <GetBestTransformP8x8.part.0+0x255>
   4e663:	add    rsp,0x288
   4e66a:	pop    rbx
   4e66b:	pop    rbp
   4e66c:	pop    r12
   4e66e:	pop    r13
   4e670:	pop    r14
   4e672:	pop    r15
   4e674:	ret    
   4e675:	call   4390 <__stack_chk_fail@plt>
   4e67a:	nop    WORD PTR [rax+rax*1+0x0]

000000000004e680 <clear_rdopt>:
   4e680:	endbr64 
   4e684:	sub    rsp,0x8
   4e688:	mov    rdi,QWORD PTR [rip+0x3aac1]        # 89150 <cofDC>
   4e68f:	call   24600 <free_mem_DCcoeff>
   4e694:	mov    rdi,QWORD PTR [rip+0x3aac5]        # 89160 <cofAC>
   4e69b:	call   24550 <free_mem_ACcoeff>
   4e6a0:	mov    rdi,QWORD PTR [rip+0x3aab1]        # 89158 <cofAC8x8>
   4e6a7:	call   24550 <free_mem_ACcoeff>
   4e6ac:	mov    rdi,QWORD PTR [rip+0x3aa8d]        # 89140 <cofAC4x4intern>
   4e6b3:	call   24550 <free_mem_ACcoeff>
   4e6b8:	mov    rax,QWORD PTR [rip+0x39ef9]        # 885b8 <input>
   4e6bf:	mov    eax,DWORD PTR [rax+0xc94]
   4e6c5:	test   eax,eax
   4e6c7:	jne    4e728 <clear_rdopt+0xa8>
   4e6c9:	mov    rdi,QWORD PTR [rip+0x3aa68]        # 89138 <cs_mb>
   4e6d0:	call   5d2e0 <delete_coding_state>
   4e6d5:	mov    rdi,QWORD PTR [rip+0x3aa54]        # 89130 <cs_b8>
   4e6dc:	call   5d2e0 <delete_coding_state>
   4e6e1:	mov    rdi,QWORD PTR [rip+0x3aa40]        # 89128 <cs_cm>
   4e6e8:	call   5d2e0 <delete_coding_state>
   4e6ed:	mov    rdi,QWORD PTR [rip+0x3aa2c]        # 89120 <cs_imb>
   4e6f4:	call   5d2e0 <delete_coding_state>
   4e6f9:	mov    rdi,QWORD PTR [rip+0x3aa18]        # 89118 <cs_ib8>
   4e700:	call   5d2e0 <delete_coding_state>
   4e705:	mov    rdi,QWORD PTR [rip+0x3aa04]        # 89110 <cs_ib4>
   4e70c:	call   5d2e0 <delete_coding_state>
   4e711:	mov    rdi,QWORD PTR [rip+0x3a9f0]        # 89108 <cs_pc>
   4e718:	add    rsp,0x8
   4e71c:	jmp    5d2e0 <delete_coding_state>
   4e721:	nop    DWORD PTR [rax+0x0]
   4e728:	mov    rdi,QWORD PTR [rip+0x3a9d1]        # 89100 <cofAC_8x8ts>
   4e72f:	call   24550 <free_mem_ACcoeff>
   4e734:	jmp    4e6c9 <clear_rdopt+0x49>
   4e736:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000004e740 <init_rdopt>:
   4e740:	endbr64 
   4e744:	sub    rsp,0x8
   4e748:	lea    rdi,[rip+0x3aa01]        # 89150 <cofDC>
   4e74f:	mov    QWORD PTR [rip+0x52606],0x0        # a0d60 <rdopt>
   4e75a:	call   23c10 <get_mem_DCcoeff>
   4e75f:	lea    rdi,[rip+0x3a9fa]        # 89160 <cofAC>
   4e766:	call   23a80 <get_mem_ACcoeff>
   4e76b:	lea    rdi,[rip+0x3a9e6]        # 89158 <cofAC8x8>
   4e772:	call   23a80 <get_mem_ACcoeff>
   4e777:	lea    rdi,[rip+0x3a9c2]        # 89140 <cofAC4x4intern>
   4e77e:	call   23a80 <get_mem_ACcoeff>
   4e783:	mov    rax,QWORD PTR [rip+0x3a9b6]        # 89140 <cofAC4x4intern>
   4e78a:	mov    rax,QWORD PTR [rax]
   4e78d:	mov    rax,QWORD PTR [rax]
   4e790:	mov    QWORD PTR [rip+0x3a9b1],rax        # 89148 <cofAC4x4>
   4e797:	mov    rax,QWORD PTR [rip+0x39e1a]        # 885b8 <input>
   4e79e:	mov    eax,DWORD PTR [rax+0xc94]
   4e7a4:	test   eax,eax
   4e7a6:	jne    4e810 <init_rdopt+0xd0>
   4e7a8:	xor    eax,eax
   4e7aa:	call   5d330 <create_coding_state>
   4e7af:	mov    QWORD PTR [rip+0x3a982],rax        # 89138 <cs_mb>
   4e7b6:	xor    eax,eax
   4e7b8:	call   5d330 <create_coding_state>
   4e7bd:	mov    QWORD PTR [rip+0x3a96c],rax        # 89130 <cs_b8>
   4e7c4:	xor    eax,eax
   4e7c6:	call   5d330 <create_coding_state>
   4e7cb:	mov    QWORD PTR [rip+0x3a956],rax        # 89128 <cs_cm>
   4e7d2:	xor    eax,eax
   4e7d4:	call   5d330 <create_coding_state>
   4e7d9:	mov    QWORD PTR [rip+0x3a940],rax        # 89120 <cs_imb>
   4e7e0:	xor    eax,eax
   4e7e2:	call   5d330 <create_coding_state>
   4e7e7:	mov    QWORD PTR [rip+0x3a92a],rax        # 89118 <cs_ib8>
   4e7ee:	xor    eax,eax
   4e7f0:	call   5d330 <create_coding_state>
   4e7f5:	mov    QWORD PTR [rip+0x3a914],rax        # 89110 <cs_ib4>
   4e7fc:	xor    eax,eax
   4e7fe:	call   5d330 <create_coding_state>
   4e803:	mov    QWORD PTR [rip+0x3a8fe],rax        # 89108 <cs_pc>
   4e80a:	add    rsp,0x8
   4e80e:	ret    
   4e80f:	nop
   4e810:	lea    rdi,[rip+0x3a8e9]        # 89100 <cofAC_8x8ts>
   4e817:	call   23a80 <get_mem_ACcoeff>
   4e81c:	jmp    4e7a8 <init_rdopt+0x68>
   4e81e:	xchg   ax,ax

000000000004e820 <UpdatePixelMap>:
   4e820:	endbr64 
   4e824:	mov    rcx,QWORD PTR [rip+0x39d85]        # 885b0 <img>
   4e82b:	cmp    DWORD PTR [rcx+0x18],0x2
   4e82f:	mov    eax,DWORD PTR [rcx+0x3c]
   4e832:	je     4e982 <UpdatePixelMap+0x162>
   4e838:	push   r15
   4e83a:	push   r14
   4e83c:	push   r13
   4e83e:	xor    r13d,r13d
   4e841:	push   r12
   4e843:	push   rbp
   4e844:	mov    ebp,0x8
   4e849:	push   rbx
   4e84a:	mov    DWORD PTR [rsp-0x4],0x0
   4e852:	cmp    eax,0x7
   4e855:	jle    4e910 <UpdatePixelMap+0xf0>
   4e85b:	add    DWORD PTR [rsp-0x4],0x1
   4e860:	cmp    DWORD PTR [rcx+0x34],0x7
   4e864:	jle    4e8f1 <UpdatePixelMap+0xd1>
   4e86a:	mov    r15d,r13d
   4e86d:	lea    r14,[r13*8+0x0]
   4e875:	xor    ebx,ebx
   4e877:	xor    r12d,r12d
   4e87a:	mov    r8d,0x8
   4e880:	mov    rax,QWORD PTR [rip+0x658c1]        # b4148 <refresh_map>
   4e887:	mov    rax,QWORD PTR [rax+r13*1]
   4e88b:	cmp    BYTE PTR [rax+r12*1],0x0
   4e890:	je     4e920 <UpdatePixelMap+0x100>
   4e896:	mov    rcx,r14
   4e899:	mov    esi,r15d
   4e89c:	nop    DWORD PTR [rax+0x0]
   4e8a0:	mov    rax,rbx
   4e8a3:	nop    DWORD PTR [rax+rax*1+0x0]
   4e8a8:	mov    rdx,QWORD PTR [rip+0x67a29]        # b62d8 <pixel_map>
   4e8af:	mov    rdx,QWORD PTR [rdx+rcx*1]
   4e8b3:	mov    BYTE PTR [rdx+rax*1],0x1
   4e8b7:	add    rax,0x1
   4e8bb:	cmp    r8d,eax
   4e8be:	jg     4e8a8 <UpdatePixelMap+0x88>
   4e8c0:	add    esi,0x1
   4e8c3:	add    rcx,0x8
   4e8c7:	cmp    esi,ebp
   4e8c9:	jl     4e8a0 <UpdatePixelMap+0x80>
   4e8cb:	mov    rcx,QWORD PTR [rip+0x39cde]        # 885b0 <img>
   4e8d2:	add    r12,0x1
   4e8d6:	add    r8d,0x8
   4e8da:	add    rbx,0x8
   4e8de:	mov    edx,DWORD PTR [rcx+0x34]
   4e8e1:	test   edx,edx
   4e8e3:	lea    eax,[rdx+0x7]
   4e8e6:	cmovns eax,edx
   4e8e9:	sar    eax,0x3
   4e8ec:	cmp    eax,r12d
   4e8ef:	jg     4e880 <UpdatePixelMap+0x60>
   4e8f1:	mov    edx,DWORD PTR [rcx+0x3c]
   4e8f4:	add    ebp,0x8
   4e8f7:	add    r13,0x8
   4e8fb:	lea    eax,[rdx+0x7]
   4e8fe:	test   edx,edx
   4e900:	cmovns eax,edx
   4e903:	sar    eax,0x3
   4e906:	cmp    eax,DWORD PTR [rsp-0x4]
   4e90a:	jg     4e85b <UpdatePixelMap+0x3b>
   4e910:	pop    rbx
   4e911:	pop    rbp
   4e912:	pop    r12
   4e914:	pop    r13
   4e916:	pop    r14
   4e918:	pop    r15
   4e91a:	ret    
   4e91b:	nop    DWORD PTR [rax+rax*1+0x0]
   4e920:	mov    rdi,r14
   4e923:	mov    r9d,r15d
   4e926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4e930:	mov    rdx,rbx
   4e933:	nop    DWORD PTR [rax+rax*1+0x0]
   4e938:	mov    rax,QWORD PTR [rip+0x67999]        # b62d8 <pixel_map>
   4e93f:	mov    rsi,QWORD PTR [rip+0x39c72]        # 885b8 <input>
   4e946:	mov    rcx,QWORD PTR [rax+rdi*1]
   4e94a:	mov    esi,DWORD PTR [rsi+0x24]
   4e94d:	add    rcx,rdx
   4e950:	lea    r11d,[rsi+0x1]
   4e954:	movzx  r10d,BYTE PTR [rcx]
   4e958:	mov    eax,r10d
   4e95b:	add    eax,0x1
   4e95e:	cmp    r10d,esi
   4e961:	cmovge eax,r11d
   4e965:	add    rdx,0x1
   4e969:	mov    BYTE PTR [rcx],al
   4e96b:	cmp    r8d,edx
   4e96e:	jg     4e938 <UpdatePixelMap+0x118>
   4e970:	add    r9d,0x1
   4e974:	add    rdi,0x8
   4e978:	cmp    r9d,ebp
   4e97b:	jl     4e930 <UpdatePixelMap+0x110>
   4e97d:	jmp    4e8cb <UpdatePixelMap+0xab>
   4e982:	xor    edi,edi
   4e984:	test   eax,eax
   4e986:	jle    4e9c9 <UpdatePixelMap+0x1a9>
   4e988:	mov    edx,DWORD PTR [rcx+0x34]
   4e98b:	lea    rsi,[rdi*8+0x0]
   4e993:	xor    eax,eax
   4e995:	test   edx,edx
   4e997:	jle    4e9bf <UpdatePixelMap+0x19f>
   4e999:	nop    DWORD PTR [rax+0x0]
   4e9a0:	mov    rdx,QWORD PTR [rip+0x67931]        # b62d8 <pixel_map>
   4e9a7:	mov    rdx,QWORD PTR [rdx+rsi*1]
   4e9ab:	mov    BYTE PTR [rdx+rax*1],0x1
   4e9af:	mov    rcx,QWORD PTR [rip+0x39bfa]        # 885b0 <img>
   4e9b6:	add    rax,0x1
   4e9ba:	cmp    DWORD PTR [rcx+0x34],eax
   4e9bd:	jg     4e9a0 <UpdatePixelMap+0x180>
   4e9bf:	add    rdi,0x1
   4e9c3:	cmp    DWORD PTR [rcx+0x3c],edi
   4e9c6:	jg     4e988 <UpdatePixelMap+0x168>
   4e9c8:	ret    
   4e9c9:	ret    
   4e9ca:	nop    WORD PTR [rax+rax*1+0x0]

000000000004e9d0 <CheckReliabilityOfRef>:
   4e9d0:	endbr64 
   4e9d4:	push   r15
   4e9d6:	push   r14
   4e9d8:	mov    r14,QWORD PTR [rip+0x39bd1]        # 885b0 <img>
   4e9df:	push   r13
   4e9e1:	lea    r13d,[rdx+0x1]
   4e9e5:	push   r12
   4e9e7:	push   rbp
   4e9e8:	push   rbx
   4e9e9:	mov    eax,DWORD PTR [r14+0x34]
   4e9ed:	lea    r11d,[rax-0x1]
   4e9f1:	mov    eax,DWORD PTR [r14+0x3c]
   4e9f5:	lea    r8d,[rax-0x1]
   4e9f9:	cmp    ecx,0x3
   4e9fc:	jle    4ec80 <CheckReliabilityOfRef+0x2b0>
   4ea02:	mov    eax,edi
   4ea04:	shr    eax,0x1f
   4ea07:	add    eax,edi
   4ea09:	and    eax,0xfffffffe
   4ea0c:	mov    DWORD PTR [rsp-0x64],eax
   4ea10:	add    eax,0x2
   4ea13:	mov    DWORD PTR [rsp-0x1c],eax
   4ea17:	mov    eax,edi
   4ea19:	shr    eax,0x1f
   4ea1c:	add    edi,eax
   4ea1e:	and    edi,0x1
   4ea21:	sub    edi,eax
   4ea23:	lea    eax,[rdi+rdi*1]
   4ea26:	mov    DWORD PTR [rsp-0x68],eax
   4ea2a:	add    eax,0x2
   4ea2d:	mov    DWORD PTR [rsp-0x5c],eax
   4ea31:	mov    ebx,DWORD PTR [rsp-0x1c]
   4ea35:	cmp    DWORD PTR [rsp-0x64],ebx
   4ea39:	jge    4ed71 <CheckReliabilityOfRef+0x3a1>
   4ea3f:	movsxd rsi,esi
   4ea42:	movsxd rdx,edx
   4ea45:	movsxd rcx,ecx
   4ea48:	mov    rdi,QWORD PTR [rip+0x67889]        # b62d8 <pixel_map>
   4ea4f:	lea    rax,[rsi*8+0x0]
   4ea57:	mov    QWORD PTR [rsp-0x28],r14
   4ea5c:	xor    esi,esi
   4ea5e:	mov    r14d,r13d
   4ea61:	mov    QWORD PTR [rsp-0x50],rax
   4ea66:	lea    rax,[rdx*8+0x0]
   4ea6e:	movsxd rdx,r8d
   4ea71:	mov    r13,rdi
   4ea74:	mov    QWORD PTR [rsp-0x48],rax
   4ea79:	lea    rax,[rcx*8+0x0]
   4ea81:	movsxd rcx,DWORD PTR [rsp-0x68]
   4ea86:	mov    QWORD PTR [rsp-0x40],rax
   4ea8b:	movsxd rax,DWORD PTR [rsp-0x64]
   4ea90:	shl    rax,0x3
   4ea94:	mov    QWORD PTR [rsp-0x58],rax
   4ea99:	lea    rax,[rcx*8+0x0]
   4eaa1:	mov    QWORD PTR [rsp-0x30],rax
   4eaa6:	mov    eax,DWORD PTR [rsp-0x5c]
   4eaaa:	sub    eax,0x1
   4eaad:	sub    eax,ecx
   4eaaf:	add    rax,rcx
   4eab2:	shl    rax,0x3
   4eab6:	mov    QWORD PTR [rsp-0x38],rax
   4eabb:	lea    rax,[rdi+rdx*8]
   4eabf:	mov    QWORD PTR [rsp-0x10],rax
   4eac4:	mov    edi,DWORD PTR [rsp-0x68]
   4eac8:	cmp    DWORD PTR [rsp-0x5c],edi
   4eacc:	jle    4ed58 <CheckReliabilityOfRef+0x388>
   4ead2:	mov    rbx,QWORD PTR [rsp-0x28]
   4ead7:	mov    edx,DWORD PTR [rsp-0x64]
   4eadb:	mov    rdi,QWORD PTR [rsp-0x30]
   4eae0:	add    edx,DWORD PTR [rbx+0x94]
   4eae6:	mov    rax,QWORD PTR [rbx+0x118f8]
   4eaed:	shl    edx,0x4
   4eaf0:	mov    DWORD PTR [rsp-0x20],edx
   4eaf4:	mov    edx,DWORD PTR [rsp-0x68]
   4eaf8:	add    rdi,rax
   4eafb:	add    edx,DWORD PTR [rbx+0x90]
   4eb01:	mov    rbx,QWORD PTR [rsp-0x38]
   4eb06:	mov    QWORD PTR [rsp-0x70],rdi
   4eb0b:	shl    edx,0x4
   4eb0e:	lea    rax,[rax+rbx*1+0x8]
   4eb13:	mov    DWORD PTR [rsp-0x60],edx
   4eb17:	mov    QWORD PTR [rsp-0x18],rax
   4eb1c:	mov    rax,QWORD PTR [rsp-0x70]
   4eb21:	mov    rdi,QWORD PTR [rsp-0x58]
   4eb26:	mov    rbx,QWORD PTR [rsp-0x48]
   4eb2b:	mov    rax,QWORD PTR [rax]
   4eb2e:	mov    rax,QWORD PTR [rax+rdi*1]
   4eb32:	mov    rdi,QWORD PTR [rsp-0x50]
   4eb37:	mov    rax,QWORD PTR [rax+rdi*1]
   4eb3b:	mov    rdi,QWORD PTR [rsp-0x40]
   4eb40:	mov    rax,QWORD PTR [rax+rbx*1]
   4eb44:	mov    ebx,DWORD PTR [rsp-0x20]
   4eb48:	mov    rax,QWORD PTR [rax+rdi*1]
   4eb4c:	movsx  r15d,WORD PTR [rax+0x2]
   4eb51:	movsx  ecx,WORD PTR [rax]
   4eb54:	add    ecx,DWORD PTR [rsp-0x60]
   4eb58:	lea    edi,[rbx+r15*1]
   4eb5c:	mov    ebx,ecx
   4eb5e:	and    r15d,0x3
   4eb62:	mov    r9d,ecx
   4eb65:	mov    eax,edi
   4eb67:	and    ebx,0x3
   4eb6a:	sub    eax,r15d
   4eb6d:	lea    edx,[rax+0x3]
   4eb70:	cmovns edx,eax
   4eb73:	mov    eax,ecx
   4eb75:	or     eax,0x3
   4eb78:	sar    edx,0x2
   4eb7b:	and    r9d,0xfffffffc
   4eb7f:	cmovns eax,r9d
   4eb83:	or     ecx,edi
   4eb85:	sar    eax,0x2
   4eb88:	and    ecx,0x3
   4eb8b:	je     4ecd8 <CheckReliabilityOfRef+0x308>
   4eb91:	test   r15d,r15d
   4eb94:	je     4ed80 <CheckReliabilityOfRef+0x3b0>
   4eb9a:	test   ebx,ebx
   4eb9c:	je     4ede8 <CheckReliabilityOfRef+0x418>
   4eba2:	cmp    ebx,0x2
   4eba5:	je     4ef20 <CheckReliabilityOfRef+0x550>
   4ebab:	cmp    r15d,0x2
   4ebaf:	je     4ee50 <CheckReliabilityOfRef+0x480>
   4ebb5:	lea    edi,[rdx+0x8]
   4ebb8:	lea    r10d,[rdx+0x4]
   4ebbc:	mov    DWORD PTR [rsp-0x8],edi
   4ebc0:	lea    r12d,[rax+0x8]
   4ebc4:	lea    edi,[rax+0x4]
   4ebc7:	lea    edx,[r10-0x4]
   4ebcb:	cmp    r15d,0x1
   4ebcf:	lea    eax,[r10-0x3]
   4ebd3:	cmove  eax,edx
   4ebd6:	mov    edx,edi
   4ebd8:	cmp    eax,r8d
   4ebdb:	cmovg  eax,r8d
   4ebdf:	test   eax,eax
   4ebe1:	cmovs  eax,esi
   4ebe4:	cdqe   
   4ebe6:	mov    rcx,QWORD PTR [r13+rax*8+0x0]
   4ebeb:	lea    r9d,[rdx-0x6]
   4ebef:	cmp    r9d,r11d
   4ebf2:	mov    eax,r11d
   4ebf5:	cmovle eax,r9d
   4ebf9:	test   eax,eax
   4ebfb:	cmovs  eax,esi
   4ebfe:	cdqe   
   4ec00:	movzx  eax,BYTE PTR [rcx+rax*1]
   4ec04:	cmp    eax,r14d
   4ec07:	jl     4ecc0 <CheckReliabilityOfRef+0x2f0>
   4ec0d:	add    r9d,0x1
   4ec11:	cmp    edx,r9d
   4ec14:	jne    4ebef <CheckReliabilityOfRef+0x21f>
   4ec16:	xor    ebp,ebp
   4ec18:	cmp    ebx,0x1
   4ec1b:	lea    r9d,[r10-0x6]
   4ec1f:	setne  bpl
   4ec23:	lea    ebp,[rbp+rdx*1-0x4]
   4ec27:	cmp    ebp,r11d
   4ec2a:	cmovg  ebp,r11d
   4ec2e:	test   ebp,ebp
   4ec30:	cmovs  ebp,esi
   4ec33:	movsxd rbp,ebp
   4ec36:	cmp    r9d,r8d
   4ec39:	mov    eax,r8d
   4ec3c:	cmovle eax,r9d
   4ec40:	test   eax,eax
   4ec42:	cmovs  eax,esi
   4ec45:	cdqe   
   4ec47:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   4ec4c:	movzx  eax,BYTE PTR [rax+rbp*1]
   4ec50:	cmp    eax,r14d
   4ec53:	jl     4ecc0 <CheckReliabilityOfRef+0x2f0>
   4ec55:	add    r9d,0x1
   4ec59:	cmp    r10d,r9d
   4ec5c:	jne    4ec36 <CheckReliabilityOfRef+0x266>
   4ec5e:	add    edx,0x1
   4ec61:	cmp    r12d,edx
   4ec64:	jne    4ebeb <CheckReliabilityOfRef+0x21b>
   4ec66:	add    r10d,0x1
   4ec6a:	cmp    DWORD PTR [rsp-0x8],r10d
   4ec6f:	je     4ed3d <CheckReliabilityOfRef+0x36d>
   4ec75:	jmp    4ebc7 <CheckReliabilityOfRef+0x1f7>
   4ec7a:	nop    WORD PTR [rax+rax*1+0x0]
   4ec80:	cmp    ecx,0x2
   4ec83:	je     4eed0 <CheckReliabilityOfRef+0x500>
   4ec89:	cmp    ecx,0x3
   4ec8c:	je     4eef8 <CheckReliabilityOfRef+0x528>
   4ec92:	mov    DWORD PTR [rsp-0x5c],0x4
   4ec9a:	mov    DWORD PTR [rsp-0x1c],0x4
   4eca2:	mov    DWORD PTR [rsp-0x68],0x0
   4ecaa:	mov    DWORD PTR [rsp-0x64],0x0
   4ecb2:	jmp    4ea3f <CheckReliabilityOfRef+0x6f>
   4ecb7:	nop    WORD PTR [rax+rax*1+0x0]
   4ecc0:	xor    r15d,r15d
   4ecc3:	pop    rbx
   4ecc4:	mov    eax,r15d
   4ecc7:	pop    rbp
   4ecc8:	pop    r12
   4ecca:	pop    r13
   4eccc:	pop    r14
   4ecce:	pop    r15
   4ecd0:	ret    
   4ecd1:	nop    DWORD PTR [rax+0x0]
   4ecd8:	movsxd rcx,edx
   4ecdb:	mov    r15,QWORD PTR [rsp-0x10]
   4ece0:	lea    r12d,[rdx+0x4]
   4ece4:	lea    edi,[rax+0x4]
   4ece7:	lea    rbp,[r13+rcx*8+0x0]
   4ecec:	cmp    edx,r8d
   4ecef:	mov    ebx,r8d
   4ecf2:	mov    r9d,eax
   4ecf5:	cmovle ebx,edx
   4ecf8:	mov    r10,r13
   4ecfb:	test   ebx,ebx
   4ecfd:	js     4ed09 <CheckReliabilityOfRef+0x339>
   4ecff:	cmp    edx,r8d
   4ed02:	mov    r10,rbp
   4ed05:	cmovg  r10,r15
   4ed09:	cmp    r9d,r11d
   4ed0c:	mov    ecx,r11d
   4ed0f:	mov    r10,QWORD PTR [r10]
   4ed12:	cmovle ecx,r9d
   4ed16:	test   ecx,ecx
   4ed18:	cmovs  ecx,esi
   4ed1b:	movsxd rcx,ecx
   4ed1e:	movzx  ecx,BYTE PTR [r10+rcx*1]
   4ed23:	cmp    ecx,r14d
   4ed26:	jl     4ecc0 <CheckReliabilityOfRef+0x2f0>
   4ed28:	add    r9d,0x1
   4ed2c:	cmp    edi,r9d
   4ed2f:	jne    4ecf8 <CheckReliabilityOfRef+0x328>
   4ed31:	add    edx,0x1
   4ed34:	add    rbp,0x8
   4ed38:	cmp    r12d,edx
   4ed3b:	jne    4ecec <CheckReliabilityOfRef+0x31c>
   4ed3d:	add    QWORD PTR [rsp-0x70],0x8
   4ed43:	mov    rax,QWORD PTR [rsp-0x70]
   4ed48:	add    DWORD PTR [rsp-0x60],0x10
   4ed4d:	cmp    QWORD PTR [rsp-0x18],rax
   4ed52:	jne    4eb1c <CheckReliabilityOfRef+0x14c>
   4ed58:	add    DWORD PTR [rsp-0x64],0x1
   4ed5d:	mov    eax,DWORD PTR [rsp-0x64]
   4ed61:	add    QWORD PTR [rsp-0x58],0x8
   4ed67:	cmp    eax,DWORD PTR [rsp-0x1c]
   4ed6b:	jne    4eac4 <CheckReliabilityOfRef+0xf4>
   4ed71:	mov    r15d,0x1
   4ed77:	jmp    4ecc3 <CheckReliabilityOfRef+0x2f3>
   4ed7c:	nop    DWORD PTR [rax+0x0]
   4ed80:	lea    r10d,[rdx+0x4]
   4ed84:	lea    edi,[rax+0x4]
   4ed87:	lea    r12d,[rax+0x8]
   4ed8b:	cmp    edx,r8d
   4ed8e:	mov    eax,r8d
   4ed91:	mov    r9d,edi
   4ed94:	cmovle eax,edx
   4ed97:	test   eax,eax
   4ed99:	cmovs  eax,esi
   4ed9c:	cdqe   
   4ed9e:	mov    rbx,QWORD PTR [r13+rax*8+0x0]
   4eda3:	lea    ecx,[r9-0x6]
   4eda7:	cmp    ecx,r11d
   4edaa:	mov    eax,r11d
   4edad:	cmovle eax,ecx
   4edb0:	test   eax,eax
   4edb2:	cmovs  eax,esi
   4edb5:	cdqe   
   4edb7:	movzx  eax,BYTE PTR [rbx+rax*1]
   4edbb:	cmp    eax,r14d
   4edbe:	jl     4ecc3 <CheckReliabilityOfRef+0x2f3>
   4edc4:	add    ecx,0x1
   4edc7:	cmp    r9d,ecx
   4edca:	jne    4eda7 <CheckReliabilityOfRef+0x3d7>
   4edcc:	add    r9d,0x1
   4edd0:	cmp    r12d,r9d
   4edd3:	jne    4eda3 <CheckReliabilityOfRef+0x3d3>
   4edd5:	add    edx,0x1
   4edd8:	cmp    r10d,edx
   4eddb:	jne    4ed8b <CheckReliabilityOfRef+0x3bb>
   4eddd:	jmp    4ed3d <CheckReliabilityOfRef+0x36d>
   4ede2:	nop    WORD PTR [rax+rax*1+0x0]
   4ede8:	lea    ebx,[rdx+0x4]
   4edeb:	lea    edi,[rax+0x4]
   4edee:	add    edx,0x8
   4edf1:	mov    ebp,eax
   4edf3:	lea    r12d,[rbx-0x6]
   4edf7:	cmp    ebp,r11d
   4edfa:	mov    r10d,r11d
   4edfd:	mov    r9d,r12d
   4ee00:	cmovle r10d,ebp
   4ee04:	test   r10d,r10d
   4ee07:	cmovs  r10d,esi
   4ee0b:	movsxd r10,r10d
   4ee0e:	cmp    r9d,r8d
   4ee11:	mov    ecx,r8d
   4ee14:	cmovle ecx,r9d
   4ee18:	test   ecx,ecx
   4ee1a:	cmovs  ecx,esi
   4ee1d:	movsxd rcx,ecx
   4ee20:	mov    rcx,QWORD PTR [r13+rcx*8+0x0]
   4ee25:	movzx  ecx,BYTE PTR [rcx+r10*1]
   4ee2a:	cmp    ecx,r14d
   4ee2d:	jl     4ecc0 <CheckReliabilityOfRef+0x2f0>
   4ee33:	add    r9d,0x1
   4ee37:	cmp    ebx,r9d
   4ee3a:	jne    4ee0e <CheckReliabilityOfRef+0x43e>
   4ee3c:	add    ebp,0x1
   4ee3f:	cmp    edi,ebp
   4ee41:	jne    4edf7 <CheckReliabilityOfRef+0x427>
   4ee43:	add    ebx,0x1
   4ee46:	cmp    edx,ebx
   4ee48:	jne    4edf1 <CheckReliabilityOfRef+0x421>
   4ee4a:	jmp    4ed3d <CheckReliabilityOfRef+0x36d>
   4ee4f:	nop
   4ee50:	lea    r9d,[rdx+0x4]
   4ee54:	lea    ebx,[rdx-0x2]
   4ee57:	lea    r15d,[rdx+0x8]
   4ee5b:	lea    edi,[rax+0x4]
   4ee5e:	lea    r12d,[rax+0x8]
   4ee62:	mov    ebp,edi
   4ee64:	lea    r10d,[rbp-0x6]
   4ee68:	cmp    r10d,r11d
   4ee6b:	mov    ecx,r11d
   4ee6e:	mov    edx,ebx
   4ee70:	cmovle ecx,r10d
   4ee74:	test   ecx,ecx
   4ee76:	cmovs  ecx,esi
   4ee79:	movsxd rcx,ecx
   4ee7c:	cmp    edx,r8d
   4ee7f:	mov    eax,r8d
   4ee82:	cmovle eax,edx
   4ee85:	test   eax,eax
   4ee87:	cmovs  eax,esi
   4ee8a:	cdqe   
   4ee8c:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   4ee91:	movzx  eax,BYTE PTR [rax+rcx*1]
   4ee95:	cmp    eax,r14d
   4ee98:	jl     4ecc0 <CheckReliabilityOfRef+0x2f0>
   4ee9e:	add    edx,0x1
   4eea1:	cmp    r9d,edx
   4eea4:	jne    4ee7c <CheckReliabilityOfRef+0x4ac>
   4eea6:	add    r10d,0x1
   4eeaa:	cmp    ebp,r10d
   4eead:	jne    4ee68 <CheckReliabilityOfRef+0x498>
   4eeaf:	add    ebp,0x1
   4eeb2:	cmp    r12d,ebp
   4eeb5:	jne    4ee64 <CheckReliabilityOfRef+0x494>
   4eeb7:	add    r9d,0x1
   4eebb:	add    ebx,0x1
   4eebe:	cmp    r15d,r9d
   4eec1:	je     4ed3d <CheckReliabilityOfRef+0x36d>
   4eec7:	jmp    4ee62 <CheckReliabilityOfRef+0x492>
   4eec9:	nop    DWORD PTR [rax+0x0]
   4eed0:	lea    eax,[rdi+rdi*1]
   4eed3:	mov    DWORD PTR [rsp-0x5c],0x4
   4eedb:	mov    DWORD PTR [rsp-0x64],eax
   4eedf:	add    eax,0x2
   4eee2:	mov    DWORD PTR [rsp-0x1c],eax
   4eee6:	mov    DWORD PTR [rsp-0x68],0x0
   4eeee:	jmp    4ea31 <CheckReliabilityOfRef+0x61>
   4eef3:	nop    DWORD PTR [rax+rax*1+0x0]
   4eef8:	lea    eax,[rdi+rdi*1]
   4eefb:	mov    DWORD PTR [rsp-0x1c],0x4
   4ef03:	mov    DWORD PTR [rsp-0x68],eax
   4ef07:	add    eax,0x2
   4ef0a:	mov    DWORD PTR [rsp-0x5c],eax
   4ef0e:	mov    DWORD PTR [rsp-0x64],0x0
   4ef16:	jmp    4ea3f <CheckReliabilityOfRef+0x6f>
   4ef1b:	nop    DWORD PTR [rax+rax*1+0x0]
   4ef20:	lea    ebx,[rdx+0x8]
   4ef23:	lea    edi,[rax+0x4]
   4ef26:	lea    r12d,[rax+0x8]
   4ef2a:	sub    eax,0x2
   4ef2d:	mov    DWORD PTR [rsp-0x4],ebx
   4ef31:	lea    r15d,[rdx+0x4]
   4ef35:	mov    DWORD PTR [rsp-0x8],eax
   4ef39:	mov    ebx,DWORD PTR [rsp-0x8]
   4ef3d:	mov    r9d,edi
   4ef40:	lea    ebp,[r15-0x6]
   4ef44:	mov    r10d,ebp
   4ef47:	cmp    r10d,r8d
   4ef4a:	mov    eax,r8d
   4ef4d:	mov    edx,ebx
   4ef4f:	cmovle eax,r10d
   4ef53:	test   eax,eax
   4ef55:	cmovs  eax,esi
   4ef58:	cdqe   
   4ef5a:	mov    rcx,QWORD PTR [r13+rax*8+0x0]
   4ef5f:	cmp    edx,r11d
   4ef62:	mov    eax,r11d
   4ef65:	cmovle eax,edx
   4ef68:	test   eax,eax
   4ef6a:	cmovs  eax,esi
   4ef6d:	cdqe   
   4ef6f:	movzx  eax,BYTE PTR [rcx+rax*1]
   4ef73:	cmp    eax,r14d
   4ef76:	jl     4ecc0 <CheckReliabilityOfRef+0x2f0>
   4ef7c:	add    edx,0x1
   4ef7f:	cmp    r9d,edx
   4ef82:	jne    4ef5f <CheckReliabilityOfRef+0x58f>
   4ef84:	add    r10d,0x1
   4ef88:	cmp    r15d,r10d
   4ef8b:	jne    4ef47 <CheckReliabilityOfRef+0x577>
   4ef8d:	add    r9d,0x1
   4ef91:	add    ebx,0x1
   4ef94:	cmp    r12d,r9d
   4ef97:	jne    4ef44 <CheckReliabilityOfRef+0x574>
   4ef99:	add    r15d,0x1
   4ef9d:	cmp    DWORD PTR [rsp-0x4],r15d
   4efa2:	je     4ed3d <CheckReliabilityOfRef+0x36d>
   4efa8:	jmp    4ef39 <CheckReliabilityOfRef+0x569>
   4efaa:	nop    WORD PTR [rax+rax*1+0x0]

000000000004efb0 <RDCost_for_4x4IntraBlocks>:
   4efb0:	endbr64 
   4efb4:	push   r15
   4efb6:	mov    r15d,ecx
   4efb9:	push   r14
   4efbb:	push   r13
   4efbd:	mov    r13d,edx
   4efc0:	push   r12
   4efc2:	mov    ecx,r13d
   4efc5:	mov    r12d,esi
   4efc8:	push   rbp
   4efc9:	shr    ecx,0x1f
   4efcc:	push   rbx
   4efcd:	mov    rbx,rdi
   4efd0:	sub    rsp,0x68
   4efd4:	mov    rbp,QWORD PTR [rip+0x395d5]        # 885b0 <img>
   4efdb:	mov    DWORD PTR [rsp+0x24],r8d
   4efe0:	movsd  QWORD PTR [rsp+0x40],xmm0
   4efe6:	mov    rax,QWORD PTR fs:0x28
   4efef:	mov    QWORD PTR [rsp+0x58],rax
   4eff4:	xor    eax,eax
   4eff6:	mov    eax,esi
   4eff8:	shr    eax,0x1f
   4effb:	lea    edx,[rsi+rax*1]
   4effe:	shr    esi,0x1f
   4f001:	and    edx,0x1
   4f004:	add    esi,r12d
   4f007:	sub    edx,eax
   4f009:	lea    eax,[r13+rcx*1+0x0]
   4f00e:	and    eax,0x1
   4f011:	sub    eax,ecx
   4f013:	lea    r10d,[rax+rdx*2]
   4f017:	mov    eax,esi
   4f019:	mov    esi,ecx
   4f01b:	mov    ecx,DWORD PTR [rbp+0x98]
   4f021:	add    esi,r13d
   4f024:	and    eax,0xfffffffe
   4f027:	shl    r10d,0x2
   4f02b:	sar    esi,1
   4f02d:	mov    DWORD PTR [rsp+0x28],ecx
   4f031:	mov    ecx,0x1
   4f036:	add    esi,eax
   4f038:	mov    eax,DWORD PTR [rbp+0x9c]
   4f03e:	shl    esi,0x2
   4f041:	mov    DWORD PTR [rsp+0x30],eax
   4f045:	mov    eax,DWORD PTR [rbp+0xac]
   4f04b:	mov    DWORD PTR [rsp+0x34],eax
   4f04f:	mov    rax,QWORD PTR [rip+0x3b952]        # 8a9a8 <enc_picture>
   4f056:	mov    rdi,QWORD PTR [rax+0x1918]
   4f05d:	movsxd rax,DWORD PTR [rbp+0xc]
   4f061:	imul   rax,rax,0x278
   4f068:	add    rax,QWORD PTR [rbp+0x3758]
   4f06f:	mov    QWORD PTR [rsp+0x38],rdi
   4f074:	movsxd r14,DWORD PTR [rax]
   4f077:	mov    rdi,QWORD PTR [rbp+0x3750]
   4f07e:	mov    QWORD PTR [rsp+0x8],rax
   4f083:	lea    rax,[r14+r14*2]
   4f087:	mov    QWORD PTR [rsp],rdi
   4f08b:	shl    rax,0x4
   4f08f:	lea    rdi,[rbp+rax*1+0x3760]
   4f097:	mov    rax,QWORD PTR [rip+0x3951a]        # 885b8 <input>
   4f09e:	mov    QWORD PTR [rsp+0x10],rdi
   4f0a3:	movsxd rdx,DWORD PTR [rax+0x93c]
   4f0aa:	lea    rax,[rip+0x3b8bf]        # 8a970 <assignSE2partition>
   4f0b1:	mov    rdi,QWORD PTR [rax+rdx*8]
   4f0b5:	lea    rdx,[rsp+0x54]
   4f0ba:	mov    QWORD PTR [rsp+0x18],rdi
   4f0bf:	mov    edi,r10d
   4f0c2:	mov    DWORD PTR [rsp+0x54],0x0
   4f0ca:	mov    DWORD PTR [rsp+0x4c],esi
   4f0ce:	mov    DWORD PTR [rsp+0x48],r10d
   4f0d3:	call   76d0 <dct_luma>
   4f0d8:	mov    DWORD PTR [rbx],eax
   4f0da:	mov    rax,QWORD PTR [rip+0x394cf]        # 885b0 <img>
   4f0e1:	mov    ebx,DWORD PTR [rax+0x11c14]
   4f0e7:	test   ebx,ebx
   4f0e9:	jne    4f2f0 <RDCost_for_4x4IntraBlocks+0x340>
   4f0ef:	mov    esi,DWORD PTR [rsp+0x4c]
   4f0f3:	mov    r11,QWORD PTR [rax+0x11860]
   4f0fa:	mov    eax,DWORD PTR [rsp+0x34]
   4f0fe:	mov    rdx,QWORD PTR [rip+0x682c3]        # b73c8 <imgY_org>
   4f105:	mov    rdi,QWORD PTR [rsp+0x38]
   4f10a:	mov    r10d,DWORD PTR [rsp+0x48]
   4f10f:	add    eax,esi
   4f111:	add    esi,DWORD PTR [rsp+0x30]
   4f115:	add    r10d,DWORD PTR [rsp+0x28]
   4f11a:	mov    DWORD PTR [rsp+0x30],r12d
   4f11f:	cdqe   
   4f121:	movsxd rsi,esi
   4f124:	movsxd r10,r10d
   4f127:	mov    QWORD PTR [rsp+0x28],rbp
   4f12c:	lea    rcx,[rdx+rax*8]
   4f130:	lea    rax,[rdi+rsi*8]
   4f134:	xor    esi,esi
   4f136:	lea    r9,[r10+0x4]
   4f13a:	mov    rbp,rax
   4f13d:	mov    r12,rcx
   4f140:	mov    r8,QWORD PTR [r12+rsi*1]
   4f144:	mov    rdi,QWORD PTR [rbp+rsi*1+0x0]
   4f149:	mov    rdx,r10
   4f14c:	movzx  eax,WORD PTR [r8+rdx*2]
   4f151:	movzx  ecx,WORD PTR [rdi+rdx*2]
   4f155:	add    rdx,0x1
   4f159:	sub    eax,ecx
   4f15b:	cdqe   
   4f15d:	add    ebx,DWORD PTR [r11+rax*4]
   4f161:	cmp    r9,rdx
   4f164:	jne    4f14c <RDCost_for_4x4IntraBlocks+0x19c>
   4f166:	add    rsi,0x8
   4f16a:	cmp    rsi,0x20
   4f16e:	jne    4f140 <RDCost_for_4x4IntraBlocks+0x190>
   4f170:	mov    rbp,QWORD PTR [rsp+0x28]
   4f175:	mov    r12d,DWORD PTR [rsp+0x30]
   4f17a:	mov    rdi,QWORD PTR [rip+0x39fa7]        # 89128 <cs_cm>
   4f181:	call   5d450 <store_coding_state>
   4f186:	mov    edi,DWORD PTR [rsp+0x24]
   4f18a:	xor    eax,eax
   4f18c:	mov    ecx,r15d
   4f18f:	lea    edx,[r13+r12*4+0x0]
   4f194:	cmp    edi,r15d
   4f197:	setle  al
   4f19a:	sub    ecx,eax
   4f19c:	cmp    edi,r15d
   4f19f:	mov    rdi,QWORD PTR [rsp]
   4f1a3:	mov    eax,ecx
   4f1a5:	mov    ecx,0xffffffff
   4f1aa:	cmovne ecx,eax
   4f1ad:	lea    rax,[r14+r14*2]
   4f1b1:	shl    rax,0x4
   4f1b5:	add    rax,rbp
   4f1b8:	mov    DWORD PTR [rax+0x3778],edx
   4f1be:	mov    rdx,QWORD PTR [rip+0x393f3]        # 885b8 <input>
   4f1c5:	mov    DWORD PTR [rax+0x3764],ecx
   4f1cb:	mov    rcx,QWORD PTR [rdi+0x18]
   4f1cf:	mov    DWORD PTR [rax+0x3760],0x4
   4f1d9:	mov    esi,DWORD PTR [rdx+0x934]
   4f1df:	test   esi,esi
   4f1e1:	jne    4f2a0 <RDCost_for_4x4IntraBlocks+0x2f0>
   4f1e7:	mov    rax,QWORD PTR [rsp+0x18]
   4f1ec:	mov    rdi,QWORD PTR [rsp+0x10]
   4f1f1:	movsxd rdx,DWORD PTR [rax+0x10]
   4f1f5:	mov    rax,rdx
   4f1f8:	shl    rax,0x4
   4f1fc:	sub    rax,rdx
   4f1ff:	lea    rsi,[rcx+rax*8]
   4f203:	call   66b30 <writeSyntaxElement_Intra4x4PredictionMode>
   4f208:	lea    rax,[r14+r14*2]
   4f20c:	shl    rax,0x4
   4f210:	mov    ebp,DWORD PTR [rbp+rax*1+0x376c]
   4f217:	mov    rax,QWORD PTR [rsp+0x8]
   4f21c:	add    DWORD PTR [rax],0x1
   4f21f:	mov    rax,QWORD PTR [rip+0x39392]        # 885b8 <input>
   4f226:	mov    edx,DWORD PTR [rax+0x934]
   4f22c:	test   edx,edx
   4f22e:	jne    4f2d8 <RDCost_for_4x4IntraBlocks+0x328>
   4f234:	xor    ecx,ecx
   4f236:	mov    edx,r13d
   4f239:	mov    esi,r12d
   4f23c:	xor    edi,edi
   4f23e:	call   2d490 <writeCoeff4x4_CAVLC>
   4f243:	add    ebp,eax
   4f245:	mov    rdi,QWORD PTR [rip+0x39edc]        # 89128 <cs_cm>
   4f24c:	call   5d750 <reset_coding_state>
   4f251:	mov    rax,QWORD PTR [rip+0x39358]        # 885b0 <img>
   4f258:	pxor   xmm0,xmm0
   4f25c:	cvtsi2sd xmm0,ebp
   4f260:	mov    eax,DWORD PTR [rax+0x11c14]
   4f266:	test   eax,eax
   4f268:	jne    4f27c <RDCost_for_4x4IntraBlocks+0x2cc>
   4f26a:	mulsd  xmm0,QWORD PTR [rsp+0x40]
   4f270:	pxor   xmm1,xmm1
   4f274:	cvtsi2sd xmm1,ebx
   4f278:	addsd  xmm0,xmm1
   4f27c:	mov    rax,QWORD PTR [rsp+0x58]
   4f281:	xor    rax,QWORD PTR fs:0x28
   4f28a:	jne    4f2f7 <RDCost_for_4x4IntraBlocks+0x347>
   4f28c:	add    rsp,0x68
   4f290:	pop    rbx
   4f291:	pop    rbp
   4f292:	pop    r12
   4f294:	pop    r13
   4f296:	pop    r14
   4f298:	pop    r15
   4f29a:	ret    
   4f29b:	nop    DWORD PTR [rax+rax*1+0x0]
   4f2a0:	lea    rdx,[rip+0xfffffffffffbe589]        # d830 <writeIntraPredMode_CABAC>
   4f2a7:	mov    rdi,QWORD PTR [rsp+0x10]
   4f2ac:	mov    QWORD PTR [rax+0x3788],rdx
   4f2b3:	mov    rax,QWORD PTR [rsp+0x18]
   4f2b8:	movsxd rdx,DWORD PTR [rax+0x10]
   4f2bc:	mov    rax,rdx
   4f2bf:	shl    rax,0x4
   4f2c3:	sub    rax,rdx
   4f2c6:	lea    rax,[rcx+rax*8]
   4f2ca:	mov    rsi,rax
   4f2cd:	call   QWORD PTR [rax+0x70]
   4f2d0:	jmp    4f208 <RDCost_for_4x4IntraBlocks+0x258>
   4f2d5:	nop    DWORD PTR [rax]
   4f2d8:	mov    edx,0x1
   4f2dd:	mov    esi,r13d
   4f2e0:	mov    edi,r12d
   4f2e3:	call   2cc40 <writeLumaCoeff4x4_CABAC>
   4f2e8:	add    ebp,eax
   4f2ea:	jmp    4f245 <RDCost_for_4x4IntraBlocks+0x295>
   4f2ef:	nop
   4f2f0:	xor    ebx,ebx
   4f2f2:	jmp    4f17a <RDCost_for_4x4IntraBlocks+0x1ca>
   4f2f7:	call   4390 <__stack_chk_fail@plt>
   4f2fc:	nop    DWORD PTR [rax+0x0]

000000000004f300 <RDCost_for_4x4Blocks_Chroma>:
   4f300:	endbr64 
   4f304:	push   r15
   4f306:	mov    r9d,edi
   4f309:	mov    edi,edx
   4f30b:	mov    ecx,esi
   4f30d:	push   r14
   4f30f:	push   r13
   4f311:	push   r12
   4f313:	mov    r12d,esi
   4f316:	push   rbp
   4f317:	mov    r10d,r12d
   4f31a:	push   rbx
   4f31b:	sub    rsp,0x38
   4f31f:	mov    r11,QWORD PTR [rip+0x3928a]        # 885b0 <img>
   4f326:	mov    DWORD PTR [rsp+0xc],r9d
   4f32b:	movsxd rbx,DWORD PTR [r11+0xc]
   4f32f:	mov    r13,QWORD PTR [r11+0x3750]
   4f336:	mov    QWORD PTR [rsp+0x20],r11
   4f33b:	imul   rbx,rbx,0x278
   4f342:	add    rbx,QWORD PTR [r11+0x3758]
   4f349:	mov    eax,DWORD PTR [rbx]
   4f34b:	mov    DWORD PTR [rsp+0x2c],eax
   4f34f:	mov    rax,QWORD PTR [rip+0x39262]        # 885b8 <input>
   4f356:	movsxd rdx,DWORD PTR [rax+0x93c]
   4f35d:	lea    rax,[rip+0x3b60c]        # 8a970 <assignSE2partition>
   4f364:	mov    rax,QWORD PTR [rax+rdx*8]
   4f368:	mov    edx,r9d
   4f36b:	mov    QWORD PTR [rsp+0x10],rax
   4f370:	xor    eax,eax
   4f372:	cmp    r9d,0x7
   4f376:	setg   al
   4f379:	shr    ecx,0x1f
   4f37c:	mov    DWORD PTR [rsp+0x28],eax
   4f380:	add    eax,0x1
   4f383:	shr    r10d,0x1f
   4f387:	shl    eax,0x2
   4f38a:	add    r10d,r12d
   4f38d:	sub    edx,eax
   4f38f:	mov    eax,ecx
   4f391:	add    ecx,esi
   4f393:	sar    r10d,1
   4f396:	mov    esi,edx
   4f398:	and    ecx,0x1
   4f39b:	mov    DWORD PTR [rsp+0x18],r10d
   4f3a0:	shr    esi,0x1f
   4f3a3:	sub    ecx,eax
   4f3a5:	mov    ebp,esi
   4f3a7:	lea    eax,[rdx+rsi*1]
   4f3aa:	mov    r14d,ecx
   4f3ad:	add    ebp,edx
   4f3af:	and    eax,0x1
   4f3b2:	mov    edx,r12d
   4f3b5:	sub    eax,esi
   4f3b7:	and    ebp,0xfffffffe
   4f3ba:	mov    esi,r9d
   4f3bd:	add    ebp,r10d
   4f3c0:	lea    r15d,[rcx+rax*2]
   4f3c4:	call   9f00 <dct_chroma4x4>
   4f3c9:	movsxd r15,r15d
   4f3cc:	movsxd rbp,ebp
   4f3cf:	mov    rdi,QWORD PTR [rip+0x39d52]        # 89128 <cs_cm>
   4f3d6:	mov    r8d,eax
   4f3d9:	movsxd rax,DWORD PTR [rsp+0x28]
   4f3de:	lea    rax,[r15+rax*4]
   4f3e2:	lea    rdx,[rbp+rax*4+0x0]
   4f3e7:	lea    rax,[rip+0x4ee92]        # 9e280 <cbp_chroma_block_temp>
   4f3ee:	mov    DWORD PTR [rax+rdx*4],r8d
   4f3f2:	call   5d450 <store_coding_state>
   4f3f7:	movsxd r9,DWORD PTR [rsp+0xc]
   4f3fc:	mov    r10d,DWORD PTR [rsp+0x18]
   4f401:	mov    rax,QWORD PTR [rip+0x391b0]        # 885b8 <input>
   4f408:	mov    r11,QWORD PTR [rsp+0x20]
   4f40d:	mov    eax,DWORD PTR [rax+0x934]
   4f413:	test   eax,eax
   4f415:	je     4f550 <RDCost_for_4x4Blocks_Chroma+0x250>
   4f41b:	movsxd rdx,DWORD PTR [rsp+0x2c]
   4f420:	movsxd r8,r12d
   4f423:	mov    ebp,0x1
   4f428:	lea    rdx,[rdx+rdx*2]
   4f42c:	shl    rdx,0x4
   4f430:	lea    r15,[r11+rdx*1+0x3760]
   4f438:	mov    r11,QWORD PTR [rip+0x39171]        # 885b0 <img>
   4f43f:	mov    rdx,QWORD PTR [r11+0x3738]
   4f446:	mov    rdx,QWORD PTR [rdx+r9*8]
   4f44a:	mov    rdx,QWORD PTR [rdx+r8*8]
   4f44e:	mov    rdi,QWORD PTR [rdx]
   4f451:	mov    r12,QWORD PTR [rdx+0x8]
   4f455:	mov    DWORD PTR [r11+0x48],r14d
   4f459:	xor    r14d,r14d
   4f45c:	mov    DWORD PTR [r11+0x4c],r10d
   4f460:	mov    QWORD PTR [rsp+0x18],rdi
   4f465:	jmp    4f519 <RDCost_for_4x4Blocks_Chroma+0x219>
   4f46a:	nop    WORD PTR [rax+rax*1+0x0]
   4f470:	lea    rax,[rip+0x170e9]        # 66560 <levrun_linfo_inter>
   4f477:	mov    QWORD PTR [r15+0x20],rax
   4f47b:	mov    DWORD PTR [r15+0x18],0x7
   4f483:	mov    rdi,r15
   4f486:	mov    DWORD PTR [r15],0xa
   4f48d:	mov    esi,DWORD PTR [rbx+0x48]
   4f490:	mov    DWORD PTR [rsp+0xc],ecx
   4f494:	lea    eax,[rsi-0x9]
   4f497:	cmp    eax,0x1
   4f49a:	setbe  al
   4f49d:	cmp    esi,0xd
   4f4a0:	sete   sil
   4f4a4:	add    r15,0x30
   4f4a8:	or     eax,esi
   4f4aa:	movzx  eax,al
   4f4ad:	mov    DWORD PTR [r11+0x50],eax
   4f4b1:	mov    eax,DWORD PTR [rsp+0x28]
   4f4b5:	mov    DWORD PTR [r11+0x54],eax
   4f4b9:	mov    rax,QWORD PTR [rsp+0x10]
   4f4be:	movsxd rsi,DWORD PTR [rax+0x28]
   4f4c2:	mov    rax,rsi
   4f4c5:	shl    rax,0x4
   4f4c9:	sub    rax,rsi
   4f4cc:	mov    rsi,QWORD PTR [r13+0x18]
   4f4d0:	lea    rax,[rsi+rax*8]
   4f4d4:	mov    rsi,rax
   4f4d7:	call   QWORD PTR [rax+0x70]
   4f4da:	mov    ecx,DWORD PTR [rsp+0xc]
   4f4de:	mov    eax,DWORD PTR [r15-0x24]
   4f4e2:	add    DWORD PTR [rbx+0x2c],eax
   4f4e5:	add    r14d,DWORD PTR [r15-0x24]
   4f4e9:	add    DWORD PTR [rbx],0x1
   4f4ec:	cmp    ebp,0x10
   4f4ef:	setle  sil
   4f4f3:	test   ecx,ecx
   4f4f5:	setne  al
   4f4f8:	add    rbp,0x1
   4f4fc:	test   sil,al
   4f4ff:	je     4f58d <RDCost_for_4x4Blocks_Chroma+0x28d>
   4f505:	mov    rax,QWORD PTR [rip+0x390ac]        # 885b8 <input>
   4f50c:	mov    r11,QWORD PTR [rip+0x3909d]        # 885b0 <img>
   4f513:	mov    eax,DWORD PTR [rax+0x934]
   4f519:	mov    rdi,QWORD PTR [rsp+0x18]
   4f51e:	mov    ecx,DWORD PTR [rdi+rbp*4-0x4]
   4f522:	mov    DWORD PTR [r15+0x4],ecx
   4f526:	mov    esi,DWORD PTR [r12+rbp*4-0x4]
   4f52b:	mov    DWORD PTR [r15+0x8],esi
   4f52f:	test   eax,eax
   4f531:	je     4f470 <RDCost_for_4x4Blocks_Chroma+0x170>
   4f537:	lea    rax,[rip+0xfffffffffffbf612]        # eb50 <writeRunLevel_CABAC>
   4f53e:	mov    QWORD PTR [r15+0x28],rax
   4f542:	jmp    4f47b <RDCost_for_4x4Blocks_Chroma+0x17b>
   4f547:	nop    WORD PTR [rax+rax*1+0x0]
   4f550:	mov    edx,r9d
   4f553:	mov    esi,r9d
   4f556:	mov    edi,0x7
   4f55b:	shr    edx,0x1f
   4f55e:	lea    eax,[r9+rdx*1]
   4f562:	and    eax,0x1
   4f565:	sub    eax,edx
   4f567:	lea    ecx,[r14+rax*2]
   4f56b:	mov    eax,r9d
   4f56e:	shr    eax,0x1f
   4f571:	mov    edx,ecx
   4f573:	add    eax,r9d
   4f576:	shl    edx,0x4
   4f579:	and    eax,0xfffffffe
   4f57c:	lea    ecx,[rax+r10*1]
   4f580:	or     ecx,edx
   4f582:	mov    edx,r12d
   4f585:	call   2d490 <writeCoeff4x4_CAVLC>
   4f58a:	mov    r14d,eax
   4f58d:	mov    rdi,QWORD PTR [rip+0x39b94]        # 89128 <cs_cm>
   4f594:	call   5d750 <reset_coding_state>
   4f599:	add    rsp,0x38
   4f59d:	mov    eax,r14d
   4f5a0:	pop    rbx
   4f5a1:	pop    rbp
   4f5a2:	pop    r12
   4f5a4:	pop    r13
   4f5a6:	pop    r14
   4f5a8:	pop    r15
   4f5aa:	ret    
   4f5ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004f5b0 <Mode_Decision_for_4x4IntraBlocks>:
   4f5b0:	endbr64 
   4f5b4:	push   r15
   4f5b6:	mov    ecx,esi
   4f5b8:	push   r14
   4f5ba:	shr    ecx,0x1f
   4f5bd:	push   r13
   4f5bf:	push   r12
   4f5c1:	push   rbp
   4f5c2:	push   rbx
   4f5c3:	mov    ebx,edi
   4f5c5:	mov    ebp,ebx
   4f5c7:	shr    ebp,0x1f
   4f5ca:	sub    rsp,0x2d8
   4f5d1:	add    ebp,ebx
   4f5d3:	mov    DWORD PTR [rsp+0x74],edi
   4f5d7:	mov    edi,esi
   4f5d9:	lea    r9,[rsp+0x180]
   4f5e1:	mov    DWORD PTR [rsp+0x98],esi
   4f5e8:	mov    QWORD PTR [rsp+0xc0],rdx
   4f5f0:	movsd  QWORD PTR [rsp+0xa8],xmm0
   4f5f9:	mov    rax,QWORD PTR fs:0x28
   4f602:	mov    QWORD PTR [rsp+0x2c8],rax
   4f60a:	xor    eax,eax
   4f60c:	mov    eax,ebx
   4f60e:	shr    eax,0x1f
   4f611:	lea    edx,[rbx+rax*1]
   4f614:	and    edx,0x1
   4f617:	sub    edx,eax
   4f619:	lea    eax,[rsi+rcx*1]
   4f61c:	and    eax,0x1
   4f61f:	sub    eax,ecx
   4f621:	lea    r14d,[rax+rdx*2]
   4f625:	mov    edx,ebp
   4f627:	lea    ebp,[rcx+rdi*1]
   4f62a:	mov    ecx,0xffffffff
   4f62f:	mov    eax,ebp
   4f631:	and    edx,0xfffffffe
   4f634:	lea    esi,[r14*4+0x0]
   4f63c:	sar    eax,1
   4f63e:	mov    DWORD PTR [rsp+0xd8],esi
   4f645:	lea    ebp,[rdx+rax*1]
   4f648:	mov    rax,QWORD PTR [rip+0x38f61]        # 885b0 <img>
   4f64f:	lea    ebx,[rbp*4+0x0]
   4f656:	mov    r15d,DWORD PTR [rax+0x98]
   4f65d:	mov    r12d,DWORD PTR [rax+0x9c]
   4f664:	mov    DWORD PTR [rsp+0xdc],ebx
   4f66b:	add    r15d,esi
   4f66e:	add    r12d,ebx
   4f671:	add    esi,DWORD PTR [rax+0xa8]
   4f677:	add    ebx,DWORD PTR [rax+0xac]
   4f67d:	lea    edx,[r15+0x3]
   4f681:	test   r15d,r15d
   4f684:	mov    DWORD PTR [rsp+0x8],ebx
   4f688:	movsxd r13,esi
   4f68b:	cmovns edx,r15d
   4f68f:	mov    esi,r14d
   4f692:	sar    edx,0x2
   4f695:	test   r12d,r12d
   4f698:	mov    DWORD PTR [rsp+0xf8],edx
   4f69f:	lea    edx,[r12+0x3]
   4f6a4:	cmovns edx,r12d
   4f6a8:	xor    r8d,r8d
   4f6ab:	sar    edx,0x2
   4f6ae:	mov    DWORD PTR [rsp+0xfc],edx
   4f6b5:	movsxd rdx,DWORD PTR [rax+0xc]
   4f6b9:	mov    rdi,rdx
   4f6bc:	imul   rdx,rdx,0x278
   4f6c3:	add    rdx,QWORD PTR [rax+0x3758]
   4f6ca:	mov    ebx,DWORD PTR [rdx+0x20c]
   4f6d0:	mov    edx,ebp
   4f6d2:	call   30b60 <getLuma4x4Neighbour>
   4f6d7:	mov    rax,QWORD PTR [rip+0x38ed2]        # 885b0 <img>
   4f6de:	xor    ecx,ecx
   4f6e0:	mov    edx,ebp
   4f6e2:	lea    r9,[rsp+0x1a0]
   4f6ea:	mov    r8d,0xffffffff
   4f6f0:	mov    esi,r14d
   4f6f3:	mov    edi,DWORD PTR [rax+0xc]
   4f6f6:	call   30b60 <getLuma4x4Neighbour>
   4f6fb:	mov    rax,QWORD PTR [rip+0x38eb6]        # 885b8 <input>
   4f702:	mov    ecx,DWORD PTR [rax+0xd8]
   4f708:	test   ecx,ecx
   4f70a:	jne    50cb8 <Mode_Decision_for_4x4IntraBlocks+0x1708>
   4f710:	mov    edx,DWORD PTR [rsp+0x1a0]
   4f717:	mov    eax,DWORD PTR [rsp+0x180]
   4f71e:	mov    DWORD PTR [rsp+0x9c],0x2
   4f729:	test   edx,edx
   4f72b:	je     4f786 <Mode_Decision_for_4x4IntraBlocks+0x1d6>
   4f72d:	mov    rdx,QWORD PTR [rip+0x38e7c]        # 885b0 <img>
   4f734:	movsxd rsi,DWORD PTR [rsp+0x1b4]
   4f73c:	mov    rcx,QWORD PTR [rdx+0x68]
   4f740:	movsxd rdx,DWORD PTR [rsp+0x1b0]
   4f748:	mov    rdx,QWORD PTR [rcx+rdx*8]
   4f74c:	mov    edx,DWORD PTR [rdx+rsi*4]
   4f74f:	test   eax,eax
   4f751:	je     4f786 <Mode_Decision_for_4x4IntraBlocks+0x1d6>
   4f753:	movsxd rax,DWORD PTR [rsp+0x190]
   4f75b:	movsxd rsi,DWORD PTR [rsp+0x194]
   4f763:	mov    rax,QWORD PTR [rcx+rax*8]
   4f767:	mov    eax,DWORD PTR [rax+rsi*4]
   4f76a:	test   edx,edx
   4f76c:	js     50e12 <Mode_Decision_for_4x4IntraBlocks+0x1862>
   4f772:	test   eax,eax
   4f774:	js     50e12 <Mode_Decision_for_4x4IntraBlocks+0x1862>
   4f77a:	cmp    edx,eax
   4f77c:	cmovle eax,edx
   4f77f:	mov    DWORD PTR [rsp+0x9c],eax
   4f786:	mov    rax,QWORD PTR [rsp+0xc0]
   4f78e:	mov    esi,r12d
   4f791:	mov    edi,r15d
   4f794:	lea    rcx,[rsp+0x178]
   4f79c:	lea    rdx,[rsp+0x174]
   4f7a4:	lea    r8,[rsp+0x17c]
   4f7ac:	movsxd r12,r12d
   4f7af:	mov    DWORD PTR [rax],0x7fffffff
   4f7b5:	call   57b0 <intrapred_luma>
   4f7ba:	movsxd rax,DWORD PTR [rsp+0x74]
   4f7bf:	movsxd rsi,ebx
   4f7c2:	movsxd rdi,DWORD PTR [rsp+0x98]
   4f7ca:	shl    rsi,0x4
   4f7ce:	mov    rcx,QWORD PTR [rip+0x38de3]        # 885b8 <input>
   4f7d5:	movsxd rdx,DWORD PTR [rsp+0xdc]
   4f7dd:	mov    QWORD PTR [rsp+0x38],0x0
   4f7e6:	mov    QWORD PTR [rsp+0x110],rax
   4f7ee:	shl    rax,0x3
   4f7f2:	movsd  xmm3,QWORD PTR [rip+0x22fe6]        # 727e0 <INIT_MB_TYPE_I+0x120>
   4f7fa:	mov    QWORD PTR [rsp+0x100],rdi
   4f802:	shl    rdi,0x3
   4f806:	mov    QWORD PTR [rsp+0x108],rax
   4f80e:	mov    QWORD PTR [rsp+0xf0],rdi
   4f816:	lea    rdi,[rax+0x20]
   4f81a:	add    rax,0x40
   4f81e:	mov    QWORD PTR [rsp+0x140],rax
   4f826:	mov    rax,QWORD PTR [rip+0x38d83]        # 885b0 <img>
   4f82d:	mov    QWORD PTR [rsp+0x138],rdi
   4f835:	movsxd rdi,ebp
   4f838:	mov    QWORD PTR [rsp+0x30],rax
   4f83d:	movsxd rax,DWORD PTR [rsp+0xd8]
   4f845:	mov    QWORD PTR [rsp+0x128],rdi
   4f84d:	add    rsi,rax
   4f850:	shl    rax,0x4
   4f854:	shl    rsi,0x4
   4f858:	add    rsi,rdx
   4f85b:	add    rdx,rax
   4f85e:	lea    rbx,[rsi+rsi*1]
   4f862:	mov    rsi,r13
   4f865:	lea    rax,[rdx+rdx*1]
   4f869:	neg    rsi
   4f86c:	mov    QWORD PTR [rsp+0xb8],rbx
   4f874:	lea    rbx,[rsi+rsi*1]
   4f878:	movsxd rsi,DWORD PTR [rsp+0x8]
   4f87d:	mov    QWORD PTR [rsp+0xd0],rax
   4f885:	mov    QWORD PTR [rsp+0xe0],rbx
   4f88d:	lea    rbx,[rsi*8+0x0]
   4f895:	mov    QWORD PTR [rsp+0xb0],rbx
   4f89d:	lea    rbx,[r13+r13*1+0x0]
   4f8a2:	mov    QWORD PTR [rsp+0x60],rbx
   4f8a7:	lea    rbx,[r13+r13*1+0x8]
   4f8ac:	mov    QWORD PTR [rsp+0x10],rbx
   4f8b1:	lea    rbx,[r12*8+0x0]
   4f8b9:	mov    QWORD PTR [rsp+0x78],rbx
   4f8be:	movsxd rbx,r15d
   4f8c1:	lea    r15,[rip+0x63218]        # b2ae0 <resTrans_R>
   4f8c8:	mov    QWORD PTR [rsp+0x88],rbx
   4f8d0:	add    rbx,rbx
   4f8d3:	mov    QWORD PTR [rsp+0x68],rbx
   4f8d8:	lea    rbx,[r12*8+0x20]
   4f8e0:	mov    QWORD PTR [rsp+0xa0],rbx
   4f8e8:	movsxd rbx,r14d
   4f8eb:	xor    r14d,r14d
   4f8ee:	lea    rsi,[rdi+rbx*4]
   4f8f2:	mov    QWORD PTR [rsp+0x120],rbx
   4f8fa:	lea    rbx,[rip+0x5147f]        # a0d80 <dc_level_temp>
   4f901:	mov    r12d,r14d
   4f904:	shl    rsi,0x2
   4f908:	lea    rdi,[rip+0x4e971]        # 9e280 <cbp_chroma_block_temp>
   4f90f:	add    rbx,rsi
   4f912:	mov    QWORD PTR [rsp+0x130],rbx
   4f91a:	lea    rbx,[rip+0x6489f]        # b41c0 <dc_level>
   4f921:	add    rbx,rsi
   4f924:	mov    QWORD PTR [rsp+0x158],rbx
   4f92c:	lea    rbx,[rsi+rdi*1]
   4f930:	mov    QWORD PTR [rsp+0x150],rbx
   4f938:	lea    rbx,[rip+0x4f781]        # 9f0c0 <cbp_chroma_block>
   4f93f:	add    rbx,rsi
   4f942:	mov    QWORD PTR [rsp+0x148],rbx
   4f94a:	movsd  QWORD PTR [rsp+0x90],xmm3
   4f953:	mov    DWORD PTR [rsp+0xcc],0x0
   4f95e:	mov    DWORD PTR [rsp+0xc8],0x0
   4f969:	jmp    4f984 <Mode_Decision_for_4x4IntraBlocks+0x3d4>
   4f96b:	nop    DWORD PTR [rax+rax*1+0x0]
   4f970:	add    r12d,0x1
   4f974:	add    QWORD PTR [rsp+0x38],0x10
   4f97a:	cmp    r12d,0x9
   4f97e:	je     4fb80 <Mode_Decision_for_4x4IntraBlocks+0x5d0>
   4f984:	mov    eax,DWORD PTR [rcx+0x95c]
   4f98a:	cmp    r12d,0x2
   4f98e:	je     4fdd8 <Mode_Decision_for_4x4IntraBlocks+0x828>
   4f994:	mov    edx,r12d
   4f997:	and    edx,0xfffffffb
   4f99a:	cmp    edx,0x3
   4f99d:	je     4fd90 <Mode_Decision_for_4x4IntraBlocks+0x7e0>
   4f9a3:	test   r12d,r12d
   4f9a6:	je     4fd90 <Mode_Decision_for_4x4IntraBlocks+0x7e0>
   4f9ac:	cmp    r12d,0x1
   4f9b0:	je     4fdc0 <Mode_Decision_for_4x4IntraBlocks+0x810>
   4f9b6:	cmp    r12d,0x8
   4f9ba:	je     4fdc0 <Mode_Decision_for_4x4IntraBlocks+0x810>
   4f9c0:	mov    r11d,DWORD PTR [rsp+0x17c]
   4f9c8:	xor    edx,edx
   4f9ca:	test   r11d,r11d
   4f9cd:	setne  dl
   4f9d0:	test   eax,eax
   4f9d2:	je     4f9df <Mode_Decision_for_4x4IntraBlocks+0x42f>
   4f9d4:	mov    rax,QWORD PTR [rsp+0x30]
   4f9d9:	cmp    DWORD PTR [rax+0x18],0x2
   4f9dd:	je     4fa25 <Mode_Decision_for_4x4IntraBlocks+0x475>
   4f9df:	mov    r10d,DWORD PTR [rcx+0x960]
   4f9e6:	test   r10d,r10d
   4f9e9:	je     4f9f5 <Mode_Decision_for_4x4IntraBlocks+0x445>
   4f9eb:	cmp    r12d,0x1
   4f9ef:	jle    4f970 <Mode_Decision_for_4x4IntraBlocks+0x3c0>
   4f9f5:	mov    r9d,DWORD PTR [rcx+0x964]
   4f9fc:	test   r9d,r9d
   4f9ff:	je     4fa0f <Mode_Decision_for_4x4IntraBlocks+0x45f>
   4fa01:	lea    eax,[r12-0x3]
   4fa06:	cmp    eax,0x1
   4fa09:	jbe    4f970 <Mode_Decision_for_4x4IntraBlocks+0x3c0>
   4fa0f:	mov    r8d,DWORD PTR [rcx+0x968]
   4fa16:	test   r8d,r8d
   4fa19:	je     4fa25 <Mode_Decision_for_4x4IntraBlocks+0x475>
   4fa1b:	cmp    r12d,0x4
   4fa1f:	jg     4f970 <Mode_Decision_for_4x4IntraBlocks+0x3c0>
   4fa25:	test   edx,edx
   4fa27:	je     4f970 <Mode_Decision_for_4x4IntraBlocks+0x3c0>
   4fa2d:	mov    ebx,DWORD PTR [rcx+0x9a0]
   4fa33:	mov    r8,QWORD PTR [rip+0x6798e]        # b73c8 <imgY_org>
   4fa3a:	test   ebx,ebx
   4fa3c:	je     505a0 <Mode_Decision_for_4x4IntraBlocks+0xff0>
   4fa42:	mov    r11,QWORD PTR [rsp+0x30]
   4fa47:	mov    edi,DWORD PTR [r11+0x11c14]
   4fa4e:	test   edi,edi
   4fa50:	jne    4fe00 <Mode_Decision_for_4x4IntraBlocks+0x850>
   4fa56:	mov    r9,QWORD PTR [rsp+0x38]
   4fa5b:	mov    rbx,QWORD PTR [rsp+0xd0]
   4fa63:	lea    rbp,[r11+0x10]
   4fa67:	mov    r10,QWORD PTR [rsp+0x60]
   4fa6c:	add    r8,QWORD PTR [rsp+0xb0]
   4fa74:	shl    r9,0x5
   4fa78:	add    rbx,r11
   4fa7b:	add    r9,r11
   4fa7e:	mov    rdi,QWORD PTR [r8]
   4fa81:	mov    rsi,r11
   4fa84:	mov    rcx,rbx
   4fa87:	xor    eax,eax
   4fa89:	add    rdi,r10
   4fa8c:	movzx  edx,WORD PTR [r9+rax*1+0xb8]
   4fa95:	add    rcx,0x20
   4fa99:	add    rsi,0x40
   4fa9d:	mov    WORD PTR [rcx+0x3118],dx
   4faa4:	movzx  r13d,WORD PTR [rdi+rax*1]
   4faa9:	add    rax,0x2
   4faad:	sub    r13d,edx
   4fab0:	mov    DWORD PTR [rsi+0x32f8],r13d
   4fab7:	cmp    rax,0x8
   4fabb:	jne    4fa8c <Mode_Decision_for_4x4IntraBlocks+0x4dc>
   4fabd:	add    r11,0x4
   4fac1:	add    r8,0x8
   4fac5:	add    rbx,0x2
   4fac9:	add    r9,0x20
   4facd:	cmp    rbp,r11
   4fad0:	jne    4fa7e <Mode_Decision_for_4x4IntraBlocks+0x4ce>
   4fad2:	mov    rdi,QWORD PTR [rip+0x3964f]        # 89128 <cs_cm>
   4fad9:	call   5d450 <store_coding_state>
   4fade:	mov    r8d,DWORD PTR [rsp+0x9c]
   4fae6:	mov    ecx,r12d
   4fae9:	movsd  xmm1,QWORD PTR [rsp+0x90]
   4faf2:	movsd  xmm0,QWORD PTR [rsp+0xa8]
   4fafb:	mov    edx,DWORD PTR [rsp+0x98]
   4fb02:	lea    rdi,[rsp+0x170]
   4fb0a:	mov    esi,DWORD PTR [rsp+0x74]
   4fb0e:	call   4efb0 <RDCost_for_4x4IntraBlocks>
   4fb13:	movsd  xmm4,QWORD PTR [rsp+0x90]
   4fb1c:	movapd xmm5,xmm0
   4fb20:	subsd  xmm5,xmm4
   4fb24:	movapd xmm1,xmm5
   4fb28:	andpd  xmm1,XMMWORD PTR [rip+0x23a40]        # 73570 <quant_coef+0x8b0>
   4fb30:	comisd xmm1,QWORD PTR [rip+0x27b58]        # 77690 <b8_mode_table.7699+0x30>
   4fb38:	jbe    4fb44 <Mode_Decision_for_4x4IntraBlocks+0x594>
   4fb3a:	comisd xmm4,xmm0
   4fb3e:	ja     50d39 <Mode_Decision_for_4x4IntraBlocks+0x1789>
   4fb44:	mov    rdi,QWORD PTR [rip+0x395dd]        # 89128 <cs_cm>
   4fb4b:	call   5d750 <reset_coding_state>
   4fb50:	mov    rax,QWORD PTR [rip+0x38a59]        # 885b0 <img>
   4fb57:	add    r12d,0x1
   4fb5b:	add    QWORD PTR [rsp+0x38],0x10
   4fb61:	mov    rcx,QWORD PTR [rip+0x38a50]        # 885b8 <input>
   4fb68:	mov    QWORD PTR [rsp+0x30],rax
   4fb6d:	cmp    r12d,0x9
   4fb71:	jne    4f984 <Mode_Decision_for_4x4IntraBlocks+0x3d4>
   4fb77:	nop    WORD PTR [rax+rax*1+0x0]
   4fb80:	mov    rdi,QWORD PTR [rsp+0x30]
   4fb85:	movsxd rdx,DWORD PTR [rsp+0xf8]
   4fb8d:	mov    ebx,DWORD PTR [rsp+0xc8]
   4fb94:	movsxd rax,DWORD PTR [rsp+0xfc]
   4fb9c:	mov    rsi,QWORD PTR [rdi+0x68]
   4fba0:	mov    rdx,QWORD PTR [rsi+rdx*8]
   4fba4:	mov    esi,DWORD PTR [rsp+0x9c]
   4fbab:	mov    DWORD PTR [rdx+rax*4],ebx
   4fbae:	xor    eax,eax
   4fbb0:	cmp    ebx,esi
   4fbb2:	mov    edx,ebx
   4fbb4:	setge  al
   4fbb7:	sub    edx,eax
   4fbb9:	cmp    ebx,esi
   4fbbb:	mov    eax,0xffffffff
   4fbc0:	mov    ebx,DWORD PTR [rsp+0x98]
   4fbc7:	mov    esi,DWORD PTR [rsp+0x74]
   4fbcb:	cmove  edx,eax
   4fbce:	movsxd rax,DWORD PTR [rdi+0xc]
   4fbd2:	imul   rax,rax,0x278
   4fbd9:	lea    esi,[rbx+rsi*4]
   4fbdc:	add    rax,QWORD PTR [rdi+0x3758]
   4fbe3:	movsxd rsi,esi
   4fbe6:	mov    DWORD PTR [rax+rsi*4+0x14c],edx
   4fbed:	mov    esi,DWORD PTR [rcx+0x9a0]
   4fbf3:	test   esi,esi
   4fbf5:	je     50688 <Mode_Decision_for_4x4IntraBlocks+0x10d8>
   4fbfb:	mov    rcx,QWORD PTR [rdi+0x3738]
   4fc02:	mov    rax,QWORD PTR [rsp+0x110]
   4fc0a:	mov    rbx,QWORD PTR [rsp+0x100]
   4fc12:	mov    r9,QWORD PTR [rip+0x3952f]        # 89148 <cofAC4x4>
   4fc19:	mov    rax,QWORD PTR [rcx+rax*8]
   4fc1d:	mov    rdi,QWORD PTR [r9]
   4fc20:	mov    r8,QWORD PTR [rax+rbx*8]
   4fc24:	xor    eax,eax
   4fc26:	mov    rsi,QWORD PTR [r8]
   4fc29:	nop    DWORD PTR [rax+0x0]
   4fc30:	mov    edx,DWORD PTR [rdi+rax*1]
   4fc33:	mov    DWORD PTR [rsi+rax*1],edx
   4fc36:	add    rax,0x4
   4fc3a:	cmp    rax,0x48
   4fc3e:	jne    4fc30 <Mode_Decision_for_4x4IntraBlocks+0x680>
   4fc40:	mov    rdi,QWORD PTR [r9+0x8]
   4fc44:	mov    rsi,QWORD PTR [r8+0x8]
   4fc48:	xor    eax,eax
   4fc4a:	nop    WORD PTR [rax+rax*1+0x0]
   4fc50:	mov    edx,DWORD PTR [rdi+rax*1]
   4fc53:	mov    DWORD PTR [rsi+rax*1],edx
   4fc56:	add    rax,0x4
   4fc5a:	cmp    rax,0x48
   4fc5e:	jne    4fc50 <Mode_Decision_for_4x4IntraBlocks+0x6a0>
   4fc60:	mov    rax,QWORD PTR [rsp+0x30]
   4fc65:	mov    edi,DWORD PTR [rax+0x11c14]
   4fc6b:	test   edi,edi
   4fc6d:	jne    507a0 <Mode_Decision_for_4x4IntraBlocks+0x11f0>
   4fc73:	movsxd rdx,DWORD PTR [rsp+0xc8]
   4fc7b:	mov    rax,QWORD PTR [rsp+0x30]
   4fc80:	lea    r8,[rsp+0x1c0]
   4fc88:	lea    rbp,[rsp+0x200]
   4fc90:	mov    r10,QWORD PTR [rip+0x3ad11]        # 8a9a8 <enc_picture>
   4fc97:	mov    r11,QWORD PTR [rsp+0xd0]
   4fc9f:	shl    rdx,0x9
   4fca3:	mov    r12,QWORD PTR [rsp+0x68]
   4fca8:	mov    r9,QWORD PTR [rsp+0x78]
   4fcad:	add    r11,rax
   4fcb0:	add    r9,QWORD PTR [r10+0x1918]
   4fcb7:	add    rdx,rax
   4fcba:	mov    rbx,QWORD PTR [r9]
   4fcbd:	mov    rcx,r11
   4fcc0:	xor    eax,eax
   4fcc2:	add    rbx,r12
   4fcc5:	mov    esi,DWORD PTR [r8+rax*2]
   4fcc9:	add    rcx,0x20
   4fccd:	mov    WORD PTR [rbx+rax*1],si
   4fcd1:	movzx  esi,WORD PTR [rdx+rax*1+0xb8]
   4fcd9:	add    rax,0x2
   4fcdd:	mov    WORD PTR [rcx+0x3118],si
   4fce4:	cmp    rax,0x8
   4fce8:	jne    4fcc5 <Mode_Decision_for_4x4IntraBlocks+0x715>
   4fcea:	add    r8,0x10
   4fcee:	add    r9,0x8
   4fcf2:	add    r11,0x2
   4fcf6:	add    rdx,0x20
   4fcfa:	cmp    rbp,r8
   4fcfd:	jne    4fcba <Mode_Decision_for_4x4IntraBlocks+0x70a>
   4fcff:	test   edi,edi
   4fd01:	je     4fd5e <Mode_Decision_for_4x4IntraBlocks+0x7ae>
   4fd03:	mov    r10,QWORD PTR [r10+0x1940]
   4fd0a:	mov    rbx,QWORD PTR [rsp+0x78]
   4fd0f:	xor    r9d,r9d
   4fd12:	lea    r8,[rsp+0x280]
   4fd1a:	mov    r11,QWORD PTR [rsp+0x68]
   4fd1f:	mov    rdi,QWORD PTR [r10+r9*2]
   4fd23:	lea    rcx,[r8-0x40]
   4fd27:	add    rdi,rbx
   4fd2a:	mov    rsi,QWORD PTR [rdi]
   4fd2d:	xor    eax,eax
   4fd2f:	add    rsi,r11
   4fd32:	mov    edx,DWORD PTR [rcx+rax*4]
   4fd35:	mov    WORD PTR [rsi+rax*2],dx
   4fd39:	add    rax,0x1
   4fd3d:	cmp    rax,0x4
   4fd41:	jne    4fd32 <Mode_Decision_for_4x4IntraBlocks+0x782>
   4fd43:	add    rcx,0x10
   4fd47:	add    rdi,0x8
   4fd4b:	cmp    r8,rcx
   4fd4e:	jne    4fd2a <Mode_Decision_for_4x4IntraBlocks+0x77a>
   4fd50:	add    r9,0x4
   4fd54:	add    r8,0x40
   4fd58:	cmp    r9,0x8
   4fd5c:	jne    4fd1f <Mode_Decision_for_4x4IntraBlocks+0x76f>
   4fd5e:	mov    rax,QWORD PTR [rsp+0x2c8]
   4fd66:	xor    rax,QWORD PTR fs:0x28
   4fd6f:	jne    50e22 <Mode_Decision_for_4x4IntraBlocks+0x1872>
   4fd75:	mov    eax,DWORD PTR [rsp+0xcc]
   4fd7c:	add    rsp,0x2d8
   4fd83:	pop    rbx
   4fd84:	pop    rbp
   4fd85:	pop    r12
   4fd87:	pop    r13
   4fd89:	pop    r14
   4fd8b:	pop    r15
   4fd8d:	ret    
   4fd8e:	xchg   ax,ax
   4fd90:	mov    ebp,DWORD PTR [rsp+0x178]
   4fd97:	test   ebp,ebp
   4fd99:	je     4f9ac <Mode_Decision_for_4x4IntraBlocks+0x3fc>
   4fd9f:	mov    edx,0x1
   4fda4:	test   eax,eax
   4fda6:	je     4f9df <Mode_Decision_for_4x4IntraBlocks+0x42f>
   4fdac:	mov    rax,QWORD PTR [rsp+0x30]
   4fdb1:	cmp    DWORD PTR [rax+0x18],0x2
   4fdb5:	jne    4f9df <Mode_Decision_for_4x4IntraBlocks+0x42f>
   4fdbb:	jmp    4fa2d <Mode_Decision_for_4x4IntraBlocks+0x47d>
   4fdc0:	mov    ebx,DWORD PTR [rsp+0x174]
   4fdc7:	test   ebx,ebx
   4fdc9:	je     4f9c0 <Mode_Decision_for_4x4IntraBlocks+0x410>
   4fdcf:	jmp    4fd9f <Mode_Decision_for_4x4IntraBlocks+0x7ef>
   4fdd1:	nop    DWORD PTR [rax+0x0]
   4fdd8:	test   eax,eax
   4fdda:	je     4fa2d <Mode_Decision_for_4x4IntraBlocks+0x47d>
   4fde0:	mov    rax,QWORD PTR [rsp+0x30]
   4fde5:	mov    edx,0x1
   4fdea:	cmp    DWORD PTR [rax+0x18],0x2
   4fdee:	jne    4f9f5 <Mode_Decision_for_4x4IntraBlocks+0x445>
   4fdf4:	jmp    4fa2d <Mode_Decision_for_4x4IntraBlocks+0x47d>
   4fdf9:	nop    DWORD PTR [rax+0x0]
   4fe00:	mov    rbx,QWORD PTR [rsp+0x30]
   4fe05:	mov    DWORD PTR [rsp+0x40],r12d
   4fe0a:	xor    r10d,r10d
   4fe0d:	lea    r14,[rip+0x664cc]        # b62e0 <resTrans_G>
   4fe14:	mov    rdi,QWORD PTR [rsp+0xb8]
   4fe1c:	mov    r11,QWORD PTR [rsp+0xe0]
   4fe24:	mov    rax,QWORD PTR [rip+0x62ca5]        # b2ad0 <imgUV_org>
   4fe2b:	add    rdi,rbx
   4fe2e:	mov    QWORD PTR [rsp+0x8],rdi
   4fe33:	mov    rdi,QWORD PTR [rsp+0x38]
   4fe38:	shl    rdi,0x5
   4fe3c:	add    r11,rdi
   4fe3f:	mov    QWORD PTR [rsp+0x50],rdi
   4fe44:	mov    rdi,QWORD PTR [rax]
   4fe47:	add    r11,rbx
   4fe4a:	mov    rbx,QWORD PTR [rsp+0xb0]
   4fe52:	add    rdi,rbx
   4fe55:	add    r8,rbx
   4fe58:	add    rbx,QWORD PTR [rax+0x8]
   4fe5c:	mov    QWORD PTR [rsp+0x18],rdi
   4fe61:	mov    QWORD PTR [rsp+0x20],r8
   4fe66:	mov    QWORD PTR [rsp+0x28],rbx
   4fe6b:	lea    rbx,[rip+0x50aee]        # a0960 <resTrans_B>
   4fe72:	mov    rax,QWORD PTR [rsp+0x18]
   4fe77:	mov    rcx,QWORD PTR [rsp+0x60]
   4fe7c:	mov    rsi,r10
   4fe7f:	mov    r8,QWORD PTR [rsp+0x8]
   4fe84:	mov    r13,QWORD PTR [rax+r10*2]
   4fe88:	mov    rax,QWORD PTR [rsp+0x20]
   4fe8d:	mov    r12,QWORD PTR [rax+r10*2]
   4fe91:	mov    rax,QWORD PTR [rsp+0x28]
   4fe96:	mov    rbp,QWORD PTR [rax+r10*2]
   4fe9a:	movzx  edi,WORD PTR [r13+rcx*1+0x0]
   4fea0:	movzx  eax,WORD PTR [r8+0x2138]
   4fea8:	add    r8,0x20
   4feac:	movzx  edx,WORD PTR [r12+rcx*1]
   4feb1:	movzx  r9d,WORD PTR [r8+0x2918]
   4feb9:	sub    edi,eax
   4febb:	movzx  eax,WORD PTR [r11+rcx*1+0xb8]
   4fec4:	sub    edx,eax
   4fec6:	movzx  eax,WORD PTR [rbp+rcx*1+0x0]
   4fecb:	add    rcx,0x2
   4fecf:	sub    eax,r9d
   4fed2:	sub    eax,edi
   4fed4:	mov    DWORD PTR [r15+rsi*1],eax
   4fed8:	sar    eax,1
   4feda:	add    edi,eax
   4fedc:	sub    edx,edi
   4fede:	mov    DWORD PTR [rbx+rsi*1],edx
   4fee1:	sar    edx,1
   4fee3:	add    edi,edx
   4fee5:	mov    DWORD PTR [r14+rsi*1],edi
   4fee9:	add    rsi,0x40
   4feed:	cmp    rcx,QWORD PTR [rsp+0x10]
   4fef2:	jne    4fe9a <Mode_Decision_for_4x4IntraBlocks+0x8ea>
   4fef4:	add    r10,0x4
   4fef8:	add    QWORD PTR [rsp+0x8],0x2
   4fefe:	add    r11,0x20
   4ff02:	cmp    r10,0x10
   4ff06:	jne    4fe72 <Mode_Decision_for_4x4IntraBlocks+0x8c2>
   4ff0c:	mov    rdx,QWORD PTR [rsp+0x30]
   4ff11:	lea    rax,[rip+0x663c8]        # b62e0 <resTrans_G>
   4ff18:	mov    r12d,DWORD PTR [rsp+0x40]
   4ff1d:	lea    rsi,[rax+0x10]
   4ff21:	add    rdx,0x3338
   4ff28:	mov    ecx,DWORD PTR [rax]
   4ff2a:	add    rax,0x4
   4ff2e:	add    rdx,0x4
   4ff32:	mov    DWORD PTR [rdx-0x4],ecx
   4ff35:	mov    ecx,DWORD PTR [rax+0x3c]
   4ff38:	mov    DWORD PTR [rdx+0x3c],ecx
   4ff3b:	mov    ecx,DWORD PTR [rax+0x7c]
   4ff3e:	mov    DWORD PTR [rdx+0x7c],ecx
   4ff41:	mov    ecx,DWORD PTR [rax+0xbc]
   4ff47:	mov    DWORD PTR [rdx+0xbc],ecx
   4ff4d:	cmp    rax,rsi
   4ff50:	jne    4ff28 <Mode_Decision_for_4x4IntraBlocks+0x978>
   4ff52:	mov    rdi,QWORD PTR [rip+0x391cf]        # 89128 <cs_cm>
   4ff59:	call   5d450 <store_coding_state>
   4ff5e:	mov    edx,DWORD PTR [rsp+0x98]
   4ff65:	mov    ecx,r12d
   4ff68:	mov    esi,DWORD PTR [rsp+0x74]
   4ff6c:	mov    r8d,DWORD PTR [rsp+0x9c]
   4ff74:	lea    rdi,[rsp+0x170]
   4ff7c:	movsd  xmm1,QWORD PTR [rsp+0x90]
   4ff85:	movsd  xmm0,QWORD PTR [rsp+0xa8]
   4ff8e:	call   4efb0 <RDCost_for_4x4IntraBlocks>
   4ff93:	mov    rdi,QWORD PTR [rip+0x3918e]        # 89128 <cs_cm>
   4ff9a:	cvttsd2si ebp,xmm0
   4ff9e:	call   5d750 <reset_coding_state>
   4ffa3:	mov    rdx,QWORD PTR [rip+0x38606]        # 885b0 <img>
   4ffaa:	mov    esi,0x100
   4ffaf:	lea    rdi,[rip+0x65eea]        # b5ea0 <rec_resG>
   4ffb6:	lea    rax,[rsi-0x100]
   4ffbd:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   4ffc4:	mov    DWORD PTR [rdi+rax*1],ecx
   4ffc7:	mov    ecx,DWORD PTR [r15+rax*1]
   4ffcb:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   4ffd2:	add    rax,0x40
   4ffd6:	cmp    rax,rsi
   4ffd9:	jne    4ffbd <Mode_Decision_for_4x4IntraBlocks+0xa0d>
   4ffdb:	lea    rsi,[rax+0x4]
   4ffdf:	cmp    rax,0x10c
   4ffe5:	jne    4ffb6 <Mode_Decision_for_4x4IntraBlocks+0xa06>
   4ffe7:	mov    rdi,QWORD PTR [rip+0x3913a]        # 89128 <cs_cm>
   4ffee:	call   5d450 <store_coding_state>
   4fff3:	mov    eax,DWORD PTR [rsp+0x74]
   4fff7:	mov    esi,DWORD PTR [rsp+0x98]
   4fffe:	xor    edx,edx
   50000:	lea    edi,[rax+0x4]
   50003:	call   4f300 <RDCost_for_4x4Blocks_Chroma>
   50008:	mov    rcx,QWORD PTR [rip+0x385a1]        # 885b0 <img>
   5000f:	mov    edx,0x100
   50014:	lea    rdi,[rip+0x63d05]        # b3d20 <rec_resR>
   5001b:	add    ebp,eax
   5001d:	lea    rax,[rdx-0x100]
   50024:	mov    esi,DWORD PTR [rcx+rax*1+0x3338]
   5002b:	mov    DWORD PTR [rdi+rax*1],esi
   5002e:	mov    esi,DWORD PTR [rbx+rax*1]
   50031:	mov    DWORD PTR [rcx+rax*1+0x3338],esi
   50038:	add    rax,0x40
   5003c:	cmp    rdx,rax
   5003f:	jne    50024 <Mode_Decision_for_4x4IntraBlocks+0xa74>
   50041:	add    rdx,0x4
   50045:	cmp    rdx,0x110
   5004c:	jne    5001d <Mode_Decision_for_4x4IntraBlocks+0xa6d>
   5004e:	mov    eax,DWORD PTR [rsp+0x74]
   50052:	mov    esi,DWORD PTR [rsp+0x98]
   50059:	mov    edx,0x1
   5005e:	lea    r13,[rip+0x504db]        # a0540 <rec_resB>
   50065:	lea    edi,[rax+0x8]
   50068:	call   4f300 <RDCost_for_4x4Blocks_Chroma>
   5006d:	mov    rdi,QWORD PTR [rip+0x390b4]        # 89128 <cs_cm>
   50074:	add    eax,ebp
   50076:	mov    DWORD PTR [rsp+0xe8],eax
   5007d:	call   5d750 <reset_coding_state>
   50082:	mov    rax,QWORD PTR [rip+0x38527]        # 885b0 <img>
   50089:	lea    rcx,[r13+0x10]
   5008d:	mov    QWORD PTR [rsp+0x30],rax
   50092:	lea    rdx,[rax+0x3338]
   50099:	mov    rax,r13
   5009c:	mov    esi,DWORD PTR [rdx]
   5009e:	add    rax,0x4
   500a2:	add    rdx,0x4
   500a6:	mov    DWORD PTR [rax-0x4],esi
   500a9:	mov    esi,DWORD PTR [rdx+0x3c]
   500ac:	mov    DWORD PTR [rax+0x3c],esi
   500af:	mov    esi,DWORD PTR [rdx+0x7c]
   500b2:	mov    DWORD PTR [rax+0x7c],esi
   500b5:	mov    esi,DWORD PTR [rdx+0xbc]
   500bb:	mov    DWORD PTR [rax+0xbc],esi
   500c1:	cmp    rcx,rax
   500c4:	jne    5009c <Mode_Decision_for_4x4IntraBlocks+0xaec>
   500c6:	mov    rax,QWORD PTR [rip+0x3a8db]        # 8a9a8 <enc_picture>
   500cd:	mov    rdi,QWORD PTR [rsp+0x30]
   500d2:	lea    r14,[rip+0x63c47]        # b3d20 <rec_resR>
   500d9:	mov    DWORD PTR [rsp+0xec],r12d
   500e1:	lea    rbp,[rip+0x65db8]        # b5ea0 <rec_resG>
   500e8:	xor    r11d,r11d
   500eb:	mov    rsi,QWORD PTR [rax+0x1940]
   500f2:	mov    rax,QWORD PTR [rax+0x1918]
   500f9:	mov    r9d,DWORD PTR [rdi+0x11bf0]
   50100:	mov    QWORD PTR [rsp+0x40],rax
   50105:	mov    rax,QWORD PTR [rsi+0x8]
   50109:	mov    rbx,QWORD PTR [rsi]
   5010c:	mov    QWORD PTR [rsp+0x118],rsi
   50114:	mov    QWORD PTR [rsp+0x80],rax
   5011c:	mov    rax,QWORD PTR [rsp+0xb8]
   50124:	mov    QWORD PTR [rsp+0x48],rbx
   50129:	mov    ebx,DWORD PTR [rdi+0x11bec]
   5012f:	add    rax,rdi
   50132:	mov    QWORD PTR [rsp+0x58],rax
   50137:	mov    rax,QWORD PTR [rsp+0x50]
   5013c:	add    rax,rdi
   5013f:	mov    rdi,QWORD PTR [rsp+0x78]
   50144:	mov    r12,rax
   50147:	mov    rax,r13
   5014a:	mov    r13,r14
   5014d:	mov    QWORD PTR [rsp+0x50],rdi
   50152:	mov    r14,rax
   50155:	mov    rsi,QWORD PTR [rsp+0x50]
   5015a:	mov    rcx,QWORD PTR [rsp+0x48]
   5015f:	mov    QWORD PTR [rsp+0x8],rbp
   50164:	xor    edx,edx
   50166:	mov    rax,QWORD PTR [rsp+0x68]
   5016b:	mov    r8,QWORD PTR [rsp+0x58]
   50170:	mov    rdi,QWORD PTR [rcx+rsi*1]
   50174:	mov    rcx,QWORD PTR [rsp+0x40]
   50179:	add    rdi,rax
   5017c:	mov    QWORD PTR [rsp+0x28],rdi
   50181:	mov    rdi,QWORD PTR [rcx+rsi*1]
   50185:	add    rdi,rax
   50188:	mov    QWORD PTR [rsp+0x20],rdi
   5018d:	mov    rdi,QWORD PTR [rsp+0x80]
   50195:	add    rax,QWORD PTR [rdi+rsi*1]
   50199:	mov    QWORD PTR [rsp+0x18],rax
   5019e:	mov    rax,rdx
   501a1:	mov    rdi,QWORD PTR [rsp+0x8]
   501a6:	mov    rbp,QWORD PTR [rsp+0x28]
   501ab:	shl    rax,0x5
   501af:	mov    esi,DWORD PTR [r14+rax*1]
   501b3:	mov    edi,DWORD PTR [rdi+rax*1]
   501b6:	mov    ecx,esi
   501b8:	sar    ecx,1
   501ba:	sub    edi,ecx
   501bc:	mov    ecx,DWORD PTR [r13+rax*1+0x0]
   501c1:	mov    r10d,edi
   501c4:	mov    eax,ecx
   501c6:	sar    eax,1
   501c8:	sub    r10d,eax
   501cb:	movzx  eax,WORD PTR [r8+0x2138]
   501d3:	add    eax,r10d
   501d6:	cmovs  eax,r11d
   501da:	cmp    eax,r9d
   501dd:	cmovg  eax,r9d
   501e1:	add    esi,edi
   501e3:	mov    rdi,QWORD PTR [rsp+0x18]
   501e8:	mov    WORD PTR [rbp+rdx*1+0x0],ax
   501ed:	movzx  eax,WORD PTR [r12+rdx*1+0xb8]
   501f6:	add    esi,eax
   501f8:	mov    rax,QWORD PTR [rsp+0x20]
   501fd:	cmovs  esi,r11d
   50201:	cmp    esi,ebx
   50203:	cmovg  esi,ebx
   50206:	add    ecx,r10d
   50209:	mov    WORD PTR [rax+rdx*1],si
   5020d:	movzx  eax,WORD PTR [r8+0x2938]
   50215:	add    eax,ecx
   50217:	cmovs  eax,r11d
   5021b:	cmp    eax,r9d
   5021e:	cmovg  eax,r9d
   50222:	add    r8,0x20
   50226:	mov    WORD PTR [rdi+rdx*1],ax
   5022a:	add    rdx,0x2
   5022e:	cmp    rdx,0x8
   50232:	jne    5019e <Mode_Decision_for_4x4IntraBlocks+0xbee>
   50238:	mov    rbp,QWORD PTR [rsp+0x8]
   5023d:	add    QWORD PTR [rsp+0x58],0x2
   50243:	add    r14,0x4
   50247:	lea    rax,[rip+0x65c62]        # b5eb0 <rec_resG+0x10>
   5024e:	add    QWORD PTR [rsp+0x50],0x8
   50254:	add    r13,0x4
   50258:	add    r12,0x20
   5025c:	add    rbp,0x4
   50260:	cmp    rax,rbp
   50263:	jne    50155 <Mode_Decision_for_4x4IntraBlocks+0xba5>
   50269:	mov    rax,QWORD PTR [rip+0x67158]        # b73c8 <imgY_org>
   50270:	mov    r12d,DWORD PTR [rsp+0xec]
   50278:	mov    rbx,QWORD PTR [rsp+0x88]
   50280:	mov    rsi,QWORD PTR [rsp+0x78]
   50285:	mov    QWORD PTR [rsp+0x8],rax
   5028a:	mov    rax,QWORD PTR [rip+0x6283f]        # b2ad0 <imgUV_org>
   50291:	mov    DWORD PTR [rsp+0x20],r12d
   50296:	mov    r12,QWORD PTR [rsp+0x80]
   5029e:	lea    rbp,[rbx+0x4]
   502a2:	mov    r13,QWORD PTR [rax]
   502a5:	mov    rax,QWORD PTR [rax+0x8]
   502a9:	mov    QWORD PTR [rsp+0x18],rax
   502ae:	xor    eax,eax
   502b0:	mov    rdi,QWORD PTR [rsp+0x40]
   502b5:	mov    rbx,QWORD PTR [rsp+0x8]
   502ba:	mov    r10,QWORD PTR [r13+rsi*1+0x0]
   502bf:	mov    rcx,QWORD PTR [rsp+0x88]
   502c7:	mov    r11,QWORD PTR [rdi+rsi*1]
   502cb:	mov    rdi,QWORD PTR [rsp+0x48]
   502d0:	mov    rbx,QWORD PTR [rbx+rsi*1]
   502d4:	mov    r9,QWORD PTR [rdi+rsi*1]
   502d8:	mov    rdi,QWORD PTR [rsp+0x18]
   502dd:	mov    r8,QWORD PTR [rdi+rsi*1]
   502e1:	mov    rdi,QWORD PTR [r12+rsi*1]
   502e5:	movzx  edx,WORD PTR [r11+rcx*2]
   502ea:	movzx  r14d,WORD PTR [rbx+rcx*2]
   502ef:	sub    r14d,edx
   502f2:	movzx  edx,WORD PTR [r9+rcx*2]
   502f7:	imul   r14d,r14d
   502fb:	add    r14d,eax
   502fe:	movzx  eax,WORD PTR [r10+rcx*2]
   50303:	sub    eax,edx
   50305:	movzx  edx,WORD PTR [r8+rcx*2]
   5030a:	imul   eax,eax
   5030d:	add    eax,r14d
   50310:	movzx  r14d,WORD PTR [rdi+rcx*2]
   50315:	add    rcx,0x1
   50319:	sub    edx,r14d
   5031c:	imul   edx,edx
   5031f:	add    eax,edx
   50321:	cmp    rbp,rcx
   50324:	jne    502e5 <Mode_Decision_for_4x4IntraBlocks+0xd35>
   50326:	add    rsi,0x8
   5032a:	cmp    QWORD PTR [rsp+0xa0],rsi
   50332:	jne    502b0 <Mode_Decision_for_4x4IntraBlocks+0xd00>
   50338:	pxor   xmm0,xmm0
   5033c:	mov    r12d,DWORD PTR [rsp+0x20]
   50341:	movsd  xmm1,QWORD PTR [rsp+0xa8]
   5034a:	cvtsi2sd xmm0,DWORD PTR [rsp+0xe8]
   50353:	mov    rcx,QWORD PTR [rip+0x3825e]        # 885b8 <input>
   5035a:	movsd  xmm7,QWORD PTR [rsp+0x90]
   50363:	mulsd  xmm1,xmm0
   50367:	pxor   xmm0,xmm0
   5036b:	cvtsi2sd xmm0,eax
   5036f:	addsd  xmm0,xmm1
   50373:	comisd xmm7,xmm0
   50377:	jbe    4f970 <Mode_Decision_for_4x4IntraBlocks+0x3c0>
   5037d:	mov    rax,QWORD PTR [rsp+0x30]
   50382:	mov    rbx,QWORD PTR [rsp+0xf0]
   5038a:	mov    r8,QWORD PTR [rip+0x38db7]        # 89148 <cofAC4x4>
   50391:	mov    rdi,QWORD PTR [rax+0x3738]
   50398:	mov    rax,QWORD PTR [rsp+0x108]
   503a0:	mov    rdx,QWORD PTR [r8]
   503a3:	mov    rax,QWORD PTR [rdi+rax*1]
   503a7:	mov    r9,QWORD PTR [rax+rbx*1]
   503ab:	xor    eax,eax
   503ad:	mov    rsi,QWORD PTR [r9]
   503b0:	mov    r10d,DWORD PTR [rsi+rax*1]
   503b4:	mov    DWORD PTR [rdx+rax*1],r10d
   503b8:	add    rax,0x4
   503bc:	cmp    rax,0x48
   503c0:	jne    503b0 <Mode_Decision_for_4x4IntraBlocks+0xe00>
   503c2:	mov    rdx,QWORD PTR [r9+0x8]
   503c6:	mov    rsi,QWORD PTR [r8+0x8]
   503ca:	xor    eax,eax
   503cc:	nop    DWORD PTR [rax+0x0]
   503d0:	mov    r8d,DWORD PTR [rdx+rax*1]
   503d4:	mov    DWORD PTR [rsi+rax*1],r8d
   503d8:	add    rax,0x4
   503dc:	cmp    rax,0x48
   503e0:	jne    503d0 <Mode_Decision_for_4x4IntraBlocks+0xe20>
   503e2:	mov    rax,QWORD PTR [rsp+0x138]
   503ea:	mov    rbx,QWORD PTR [rsp+0xf0]
   503f2:	lea    rdx,[rip+0x8f547]        # df940 <cofAC4x4_chroma>
   503f9:	mov    rax,QWORD PTR [rdi+rax*1]
   503fd:	mov    r8,QWORD PTR [rax+rbx*1]
   50401:	xor    eax,eax
   50403:	mov    rsi,QWORD PTR [r8]
   50406:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50410:	mov    r9d,DWORD PTR [rsi+rax*1]
   50414:	mov    DWORD PTR [rdx+rax*1],r9d
   50418:	add    rax,0x4
   5041c:	cmp    rax,0x48
   50420:	jne    50410 <Mode_Decision_for_4x4IntraBlocks+0xe60>
   50422:	mov    rsi,QWORD PTR [r8+0x8]
   50426:	xor    eax,eax
   50428:	lea    rdx,[rip+0x8f559]        # df988 <cofAC4x4_chroma+0x48>
   5042f:	nop
   50430:	mov    r8d,DWORD PTR [rsi+rax*1]
   50434:	mov    DWORD PTR [rdx+rax*1],r8d
   50438:	add    rax,0x4
   5043c:	cmp    rax,0x48
   50440:	jne    50430 <Mode_Decision_for_4x4IntraBlocks+0xe80>
   50442:	mov    rax,QWORD PTR [rsp+0x140]
   5044a:	mov    rbx,QWORD PTR [rsp+0xf0]
   50452:	lea    rdx,[rip+0x8f577]        # df9d0 <cofAC4x4_chroma+0x90>
   50459:	mov    rax,QWORD PTR [rdi+rax*1]
   5045d:	mov    rdi,QWORD PTR [rax+rbx*1]
   50461:	xor    eax,eax
   50463:	mov    rsi,QWORD PTR [rdi]
   50466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50470:	mov    r8d,DWORD PTR [rsi+rax*1]
   50474:	mov    DWORD PTR [rdx+rax*1],r8d
   50478:	add    rax,0x4
   5047c:	cmp    rax,0x48
   50480:	jne    50470 <Mode_Decision_for_4x4IntraBlocks+0xec0>
   50482:	mov    rsi,QWORD PTR [rdi+0x8]
   50486:	xor    eax,eax
   50488:	lea    rdx,[rip+0x8f589]        # dfa18 <cofAC4x4_chroma+0xd8>
   5048f:	nop
   50490:	mov    edi,DWORD PTR [rsi+rax*1]
   50493:	mov    DWORD PTR [rdx+rax*1],edi
   50496:	add    rax,0x4
   5049a:	cmp    rax,0x48
   5049e:	jne    50490 <Mode_Decision_for_4x4IntraBlocks+0xee0>
   504a0:	mov    rbx,QWORD PTR [rsp+0x130]
   504a8:	mov    r11,QWORD PTR [rsp+0x68]
   504ad:	lea    r8,[rsp+0x280]
   504b5:	xor    r9d,r9d
   504b8:	mov    r10,QWORD PTR [rsp+0x48]
   504bd:	mov    rbp,QWORD PTR [rsp+0x148]
   504c5:	mov    r13,QWORD PTR [rsp+0x150]
   504cd:	mov    r14,QWORD PTR [rsp+0x158]
   504d5:	mov    rax,r9
   504d8:	add    r10,QWORD PTR [rsp+0x78]
   504dd:	lea    rsi,[r8-0x40]
   504e1:	shl    rax,0x4
   504e5:	mov    edx,DWORD PTR [rbx+rax*1]
   504e8:	mov    DWORD PTR [r14+rax*1],edx
   504ec:	mov    edx,DWORD PTR [r13+rax*1+0x0]
   504f1:	mov    DWORD PTR [rbp+rax*1+0x0],edx
   504f5:	mov    rdi,QWORD PTR [r10]
   504f8:	xor    eax,eax
   504fa:	add    rdi,r11
   504fd:	movzx  edx,WORD PTR [rdi+rax*2]
   50501:	mov    DWORD PTR [rsi+rax*4],edx
   50504:	add    rax,0x1
   50508:	cmp    rax,0x4
   5050c:	jne    504fd <Mode_Decision_for_4x4IntraBlocks+0xf4d>
   5050e:	add    rsi,0x10
   50512:	add    r10,0x8
   50516:	cmp    r8,rsi
   50519:	jne    504f5 <Mode_Decision_for_4x4IntraBlocks+0xf45>
   5051b:	add    r9,0x4
   5051f:	add    r8,0x40
   50523:	cmp    r9,0x8
   50527:	jne    50d28 <Mode_Decision_for_4x4IntraBlocks+0x1778>
   5052d:	mov    r10,QWORD PTR [rsp+0x68]
   50532:	mov    rdx,QWORD PTR [rsp+0x40]
   50537:	lea    rdi,[rsp+0x1c0]
   5053f:	lea    r9,[rsp+0x200]
   50547:	add    rdx,QWORD PTR [rsp+0x78]
   5054c:	mov    r8,QWORD PTR [rdx]
   5054f:	xor    eax,eax
   50551:	add    r8,r10
   50554:	movzx  esi,WORD PTR [r8+rax*2]
   50559:	mov    DWORD PTR [rdi+rax*4],esi
   5055c:	add    rax,0x1
   50560:	cmp    rax,0x4
   50564:	jne    50554 <Mode_Decision_for_4x4IntraBlocks+0xfa4>
   50566:	add    rdi,0x10
   5056a:	add    rdx,0x8
   5056e:	cmp    r9,rdi
   50571:	jne    5054c <Mode_Decision_for_4x4IntraBlocks+0xf9c>
   50573:	mov    eax,DWORD PTR [rsp+0x170]
   5057a:	mov    DWORD PTR [rsp+0xc8],r12d
   50582:	movsd  QWORD PTR [rsp+0x90],xmm0
   5058b:	mov    DWORD PTR [rsp+0xcc],eax
   50592:	jmp    4f970 <Mode_Decision_for_4x4IntraBlocks+0x3c0>
   50597:	nop    WORD PTR [rax+rax*1+0x0]
   505a0:	mov    rdi,QWORD PTR [rsp+0x38]
   505a5:	mov    r13,QWORD PTR [rsp+0x60]
   505aa:	xor    ebp,ebp
   505ac:	lea    r11,[rsp+0x200]
   505b4:	add    r8,QWORD PTR [rsp+0xb0]
   505bc:	mov    r9,r11
   505bf:	shl    rdi,0x5
   505c3:	add    rdi,QWORD PTR [rsp+0x30]
   505c8:	mov    r10,QWORD PTR [r8]
   505cb:	xor    eax,eax
   505cd:	add    r10,r13
   505d0:	movzx  edx,WORD PTR [r10+rax*1]
   505d5:	movzx  esi,WORD PTR [rdi+rax*1+0xb8]
   505dd:	sub    edx,esi
   505df:	mov    DWORD PTR [r9+rax*2],edx
   505e3:	add    rax,0x2
   505e7:	cmp    rax,0x8
   505eb:	jne    505d0 <Mode_Decision_for_4x4IntraBlocks+0x1020>
   505ed:	add    ebp,0x4
   505f0:	add    r8,0x8
   505f4:	add    rdi,0x20
   505f8:	add    r9,0x10
   505fc:	cmp    ebp,0x10
   505ff:	jne    505c8 <Mode_Decision_for_4x4IntraBlocks+0x1018>
   50601:	cmp    DWORD PTR [rsp+0x9c],r12d
   50609:	je     5063e <Mode_Decision_for_4x4IntraBlocks+0x108e>
   5060b:	movsd  xmm1,QWORD PTR [rip+0x27085]        # 77698 <b8_mode_table.7699+0x38>
   50613:	movsd  xmm2,QWORD PTR [rip+0x22f45]        # 73560 <quant_coef+0x8a0>
   5061b:	movsd  xmm0,QWORD PTR [rsp+0xa8]
   50624:	mulsd  xmm0,QWORD PTR [rip+0x1a464]        # 6aa90 <QP_SCALE_CR+0x50>
   5062c:	andpd  xmm1,xmm0
   50630:	ucomisd xmm2,xmm1
   50634:	ja     50758 <Mode_Decision_for_4x4IntraBlocks+0x11a8>
   5063a:	cvttsd2si ebx,xmm0
   5063e:	mov    esi,DWORD PTR [rcx+0x18]
   50641:	mov    rdi,r11
   50644:	call   3bae0 <SATD>
   50649:	add    ebx,eax
   5064b:	mov    rax,QWORD PTR [rsp+0xc0]
   50653:	cmp    DWORD PTR [rax],ebx
   50655:	jle    4fb50 <Mode_Decision_for_4x4IntraBlocks+0x5a0>
   5065b:	mov    rax,QWORD PTR [rsp+0xc0]
   50663:	mov    DWORD PTR [rsp+0xc8],r12d
   5066b:	mov    rcx,QWORD PTR [rip+0x37f46]        # 885b8 <input>
   50672:	mov    DWORD PTR [rax],ebx
   50674:	mov    rax,QWORD PTR [rip+0x37f35]        # 885b0 <img>
   5067b:	mov    QWORD PTR [rsp+0x30],rax
   50680:	jmp    4f970 <Mode_Decision_for_4x4IntraBlocks+0x3c0>
   50685:	nop    DWORD PTR [rax]
   50688:	mov    rax,QWORD PTR [rsp+0x30]
   5068d:	mov    rdx,QWORD PTR [rip+0x66d34]        # b73c8 <imgY_org>
   50694:	mov    ecx,DWORD PTR [rax+0x11c14]
   5069a:	test   ecx,ecx
   5069c:	jne    50860 <Mode_Decision_for_4x4IntraBlocks+0x12b0>
   506a2:	movsxd rdi,DWORD PTR [rsp+0xc8]
   506aa:	mov    r9,QWORD PTR [rsp+0xb0]
   506b2:	mov    r11,rax
   506b5:	lea    rbx,[rax+0x10]
   506b9:	mov    r10,QWORD PTR [rsp+0xd0]
   506c1:	mov    r12,QWORD PTR [rsp+0x60]
   506c6:	shl    rdi,0x9
   506ca:	add    r9,rdx
   506cd:	add    r10,rax
   506d0:	add    rdi,rax
   506d3:	mov    rbp,QWORD PTR [r9]
   506d6:	mov    r8,r11
   506d9:	mov    rsi,r10
   506dc:	xor    eax,eax
   506de:	add    rbp,r12
   506e1:	movzx  edx,WORD PTR [rdi+rax*1+0xb8]
   506e9:	add    rsi,0x20
   506ed:	add    r8,0x40
   506f1:	mov    WORD PTR [rsi+0x3118],dx
   506f8:	movzx  ecx,WORD PTR [rbp+rax*1+0x0]
   506fd:	add    rax,0x2
   50701:	sub    ecx,edx
   50703:	mov    DWORD PTR [r8+0x32f8],ecx
   5070a:	cmp    rax,0x8
   5070e:	jne    506e1 <Mode_Decision_for_4x4IntraBlocks+0x1131>
   50710:	add    r11,0x4
   50714:	add    r9,0x8
   50718:	add    r10,0x2
   5071c:	add    rdi,0x20
   50720:	cmp    r11,rbx
   50723:	jne    506d3 <Mode_Decision_for_4x4IntraBlocks+0x1123>
   50725:	mov    esi,DWORD PTR [rsp+0xdc]
   5072c:	mov    edi,DWORD PTR [rsp+0xd8]
   50733:	mov    ecx,0x1
   50738:	lea    rdx,[rsp+0x16c]
   50740:	call   76d0 <dct_luma>
   50745:	mov    DWORD PTR [rsp+0xcc],eax
   5074c:	jmp    4fd5e <Mode_Decision_for_4x4IntraBlocks+0x7ae>
   50751:	nop    DWORD PTR [rax+0x0]
   50758:	cvttsd2si rax,xmm0
   5075d:	pxor   xmm1,xmm1
   50761:	movsd  xmm3,QWORD PTR [rip+0x2205f]        # 727c8 <INIT_MB_TYPE_I+0x108>
   50769:	movsd  xmm6,QWORD PTR [rip+0x26f27]        # 77698 <b8_mode_table.7699+0x38>
   50771:	andnpd xmm6,xmm0
   50775:	cvtsi2sd xmm1,rax
   5077a:	movapd xmm2,xmm1
   5077e:	cmpnlesd xmm2,xmm0
   50783:	movapd xmm0,xmm6
   50787:	andpd  xmm2,xmm3
   5078b:	subsd  xmm1,xmm2
   5078f:	orpd   xmm0,xmm1
   50793:	jmp    5063a <Mode_Decision_for_4x4IntraBlocks+0x108a>
   50798:	nop    DWORD PTR [rax+rax*1+0x0]
   507a0:	mov    rax,QWORD PTR [rsp+0x108]
   507a8:	mov    rbx,QWORD PTR [rsp+0x100]
   507b0:	lea    rsi,[rip+0x8f189]        # df940 <cofAC4x4_chroma>
   507b7:	mov    rax,QWORD PTR [rcx+rax*1+0x20]
   507bc:	mov    r8,QWORD PTR [rax+rbx*8]
   507c0:	xor    eax,eax
   507c2:	mov    rdi,QWORD PTR [r8]
   507c5:	nop    DWORD PTR [rax]
   507c8:	mov    edx,DWORD PTR [rsi+rax*1]
   507cb:	mov    DWORD PTR [rdi+rax*1],edx
   507ce:	add    rax,0x4
   507d2:	cmp    rax,0x48
   507d6:	jne    507c8 <Mode_Decision_for_4x4IntraBlocks+0x1218>
   507d8:	mov    rdi,QWORD PTR [r8+0x8]
   507dc:	xor    eax,eax
   507de:	lea    rsi,[rip+0x8f1a3]        # df988 <cofAC4x4_chroma+0x48>
   507e5:	nop    DWORD PTR [rax]
   507e8:	mov    edx,DWORD PTR [rsi+rax*1]
   507eb:	mov    DWORD PTR [rdi+rax*1],edx
   507ee:	add    rax,0x4
   507f2:	cmp    rax,0x48
   507f6:	jne    507e8 <Mode_Decision_for_4x4IntraBlocks+0x1238>
   507f8:	mov    rax,QWORD PTR [rsp+0x108]
   50800:	mov    rbx,QWORD PTR [rsp+0x100]
   50808:	mov    rax,QWORD PTR [rcx+rax*1+0x40]
   5080d:	lea    rcx,[rip+0x8f1bc]        # df9d0 <cofAC4x4_chroma+0x90>
   50814:	mov    rdi,QWORD PTR [rax+rbx*8]
   50818:	xor    eax,eax
   5081a:	mov    rsi,QWORD PTR [rdi]
   5081d:	nop    DWORD PTR [rax]
   50820:	mov    edx,DWORD PTR [rcx+rax*1]
   50823:	mov    DWORD PTR [rsi+rax*1],edx
   50826:	add    rax,0x4
   5082a:	cmp    rax,0x48
   5082e:	jne    50820 <Mode_Decision_for_4x4IntraBlocks+0x1270>
   50830:	mov    rsi,QWORD PTR [rdi+0x8]
   50834:	xor    eax,eax
   50836:	lea    rcx,[rip+0x8f1db]        # dfa18 <cofAC4x4_chroma+0xd8>
   5083d:	nop    DWORD PTR [rax]
   50840:	mov    edx,DWORD PTR [rcx+rax*1]
   50843:	mov    DWORD PTR [rsi+rax*1],edx
   50846:	add    rax,0x4
   5084a:	cmp    rax,0x48
   5084e:	jne    50840 <Mode_Decision_for_4x4IntraBlocks+0x1290>
   50850:	mov    rax,QWORD PTR [rsp+0x30]
   50855:	mov    edi,DWORD PTR [rax+0x11c14]
   5085b:	jmp    4fc73 <Mode_Decision_for_4x4IntraBlocks+0x6c3>
   50860:	mov    rbx,QWORD PTR [rsp+0x30]
   50865:	mov    rdi,QWORD PTR [rsp+0xb8]
   5086d:	xor    r11d,r11d
   50870:	lea    rbp,[rip+0x62269]        # b2ae0 <resTrans_R>
   50877:	movsxd rcx,DWORD PTR [rsp+0xc8]
   5087f:	mov    rsi,QWORD PTR [rsp+0xe0]
   50887:	lea    r15,[rip+0x65a52]        # b62e0 <resTrans_G>
   5088e:	add    rdi,rbx
   50891:	mov    rax,QWORD PTR [rip+0x62238]        # b2ad0 <imgUV_org>
   50898:	mov    QWORD PTR [rsp+0x8],rdi
   5089d:	mov    rdi,rcx
   508a0:	shl    rdi,0x9
   508a4:	add    rsi,rdi
   508a7:	mov    QWORD PTR [rsp+0x40],rdi
   508ac:	mov    rdi,QWORD PTR [rax]
   508af:	lea    r9,[rbx+rsi*1]
   508b3:	mov    rbx,QWORD PTR [rsp+0xb0]
   508bb:	add    rdi,rbx
   508be:	add    rdx,rbx
   508c1:	add    rbx,QWORD PTR [rax+0x8]
   508c5:	mov    QWORD PTR [rsp+0x28],rdi
   508ca:	mov    QWORD PTR [rsp+0x20],rdx
   508cf:	mov    QWORD PTR [rsp+0x18],rbx
   508d4:	lea    rbx,[rip+0x50085]        # a0960 <resTrans_B>
   508db:	mov    rax,QWORD PTR [rsp+0x28]
   508e0:	mov    rcx,QWORD PTR [rsp+0x60]
   508e5:	mov    rsi,r11
   508e8:	mov    r8,QWORD PTR [rsp+0x8]
   508ed:	mov    r14,QWORD PTR [rax+r11*2]
   508f1:	mov    rax,QWORD PTR [rsp+0x20]
   508f6:	mov    r13,QWORD PTR [rax+r11*2]
   508fa:	mov    rax,QWORD PTR [rsp+0x18]
   508ff:	mov    r12,QWORD PTR [rax+r11*2]
   50903:	movzx  edi,WORD PTR [r14+rcx*1]
   50908:	movzx  eax,WORD PTR [r8+0x2138]
   50910:	add    r8,0x20
   50914:	movzx  edx,WORD PTR [r13+rcx*1+0x0]
   5091a:	movzx  r10d,WORD PTR [r8+0x2918]
   50922:	sub    edi,eax
   50924:	movzx  eax,WORD PTR [r9+rcx*1+0xb8]
   5092d:	sub    edx,eax
   5092f:	movzx  eax,WORD PTR [r12+rcx*1]
   50934:	add    rcx,0x2
   50938:	sub    eax,r10d
   5093b:	sub    eax,edi
   5093d:	mov    DWORD PTR [rbp+rsi*1+0x0],eax
   50941:	sar    eax,1
   50943:	add    edi,eax
   50945:	sub    edx,edi
   50947:	mov    DWORD PTR [rbx+rsi*1],edx
   5094a:	sar    edx,1
   5094c:	add    edi,edx
   5094e:	mov    DWORD PTR [r15+rsi*1],edi
   50952:	add    rsi,0x40
   50956:	cmp    QWORD PTR [rsp+0x10],rcx
   5095b:	jne    50903 <Mode_Decision_for_4x4IntraBlocks+0x1353>
   5095d:	add    r11,0x4
   50961:	add    QWORD PTR [rsp+0x8],0x2
   50967:	add    r9,0x20
   5096b:	cmp    r11,0x10
   5096f:	jne    508db <Mode_Decision_for_4x4IntraBlocks+0x132b>
   50975:	mov    rdx,QWORD PTR [rsp+0x30]
   5097a:	lea    rax,[rip+0x6595f]        # b62e0 <resTrans_G>
   50981:	lea    rsi,[rax+0x10]
   50985:	add    rdx,0x3338
   5098c:	mov    ecx,DWORD PTR [rax]
   5098e:	add    rax,0x4
   50992:	add    rdx,0x4
   50996:	mov    DWORD PTR [rdx-0x4],ecx
   50999:	mov    ecx,DWORD PTR [rax+0x3c]
   5099c:	mov    DWORD PTR [rdx+0x3c],ecx
   5099f:	mov    ecx,DWORD PTR [rax+0x7c]
   509a2:	mov    DWORD PTR [rdx+0x7c],ecx
   509a5:	mov    ecx,DWORD PTR [rax+0xbc]
   509ab:	mov    DWORD PTR [rdx+0xbc],ecx
   509b1:	cmp    rsi,rax
   509b4:	jne    5098c <Mode_Decision_for_4x4IntraBlocks+0x13dc>
   509b6:	mov    edi,DWORD PTR [rsp+0xd8]
   509bd:	mov    esi,DWORD PTR [rsp+0xdc]
   509c4:	mov    ecx,0x1
   509c9:	lea    rdx,[rsp+0x16c]
   509d1:	call   76d0 <dct_luma>
   509d6:	mov    rdx,QWORD PTR [rip+0x37bd3]        # 885b0 <img>
   509dd:	mov    ecx,0x100
   509e2:	lea    rdi,[rip+0x654b7]        # b5ea0 <rec_resG>
   509e9:	mov    DWORD PTR [rsp+0xcc],eax
   509f0:	lea    rax,[rcx-0x100]
   509f7:	mov    esi,DWORD PTR [rdx+rax*1+0x3338]
   509fe:	mov    DWORD PTR [rdi+rax*1],esi
   50a01:	mov    esi,DWORD PTR [rbp+rax*1+0x0]
   50a05:	mov    DWORD PTR [rdx+rax*1+0x3338],esi
   50a0c:	add    rax,0x40
   50a10:	cmp    rcx,rax
   50a13:	jne    509f7 <Mode_Decision_for_4x4IntraBlocks+0x1447>
   50a15:	add    rcx,0x4
   50a19:	cmp    rcx,0x110
   50a20:	jne    509f0 <Mode_Decision_for_4x4IntraBlocks+0x1440>
   50a22:	mov    eax,DWORD PTR [rsp+0x74]
   50a26:	mov    edx,DWORD PTR [rsp+0x98]
   50a2d:	xor    edi,edi
   50a2f:	lea    esi,[rax+0x4]
   50a32:	call   9f00 <dct_chroma4x4>
   50a37:	mov    rdi,QWORD PTR [rsp+0x120]
   50a3f:	mov    ecx,0x100
   50a44:	mov    r8d,eax
   50a47:	mov    rax,QWORD PTR [rsp+0x128]
   50a4f:	lea    rax,[rax+rdi*4]
   50a53:	lea    rdi,[rip+0x4e666]        # 9f0c0 <cbp_chroma_block>
   50a5a:	mov    DWORD PTR [rdi+rax*4],r8d
   50a5e:	lea    rdi,[rip+0x5031b]        # a0d80 <dc_level_temp>
   50a65:	mov    edx,DWORD PTR [rdi+rax*4]
   50a68:	lea    rdi,[rip+0x63751]        # b41c0 <dc_level>
   50a6f:	mov    DWORD PTR [rdi+rax*4],edx
   50a72:	mov    rdx,QWORD PTR [rip+0x37b37]        # 885b0 <img>
   50a79:	lea    rdi,[rip+0x632a0]        # b3d20 <rec_resR>
   50a80:	lea    rax,[rcx-0x100]
   50a87:	mov    esi,DWORD PTR [rdx+rax*1+0x3338]
   50a8e:	mov    DWORD PTR [rdi+rax*1],esi
   50a91:	mov    esi,DWORD PTR [rbx+rax*1]
   50a94:	mov    DWORD PTR [rdx+rax*1+0x3338],esi
   50a9b:	add    rax,0x40
   50a9f:	cmp    rcx,rax
   50aa2:	jne    50a87 <Mode_Decision_for_4x4IntraBlocks+0x14d7>
   50aa4:	add    rcx,0x4
   50aa8:	cmp    rcx,0x110
   50aaf:	jne    50a80 <Mode_Decision_for_4x4IntraBlocks+0x14d0>
   50ab1:	mov    esi,DWORD PTR [rsp+0x74]
   50ab5:	mov    edx,DWORD PTR [rsp+0x98]
   50abc:	mov    edi,0x1
   50ac1:	lea    r12,[rip+0x4fa78]        # a0540 <rec_resB>
   50ac8:	add    esi,0x8
   50acb:	call   9f00 <dct_chroma4x4>
   50ad0:	mov    rbx,QWORD PTR [rsp+0x120]
   50ad8:	lea    rdi,[r12+0x10]
   50add:	mov    r8d,eax
   50ae0:	mov    rax,QWORD PTR [rsp+0x128]
   50ae8:	lea    rax,[rax+rbx*4+0x10]
   50aed:	lea    rbx,[rip+0x4e5cc]        # 9f0c0 <cbp_chroma_block>
   50af4:	mov    DWORD PTR [rbx+rax*4],r8d
   50af8:	lea    rbx,[rip+0x50281]        # a0d80 <dc_level_temp>
   50aff:	mov    edx,DWORD PTR [rbx+rax*4]
   50b02:	lea    rbx,[rip+0x636b7]        # b41c0 <dc_level>
   50b09:	mov    DWORD PTR [rbx+rax*4],edx
   50b0c:	mov    rax,QWORD PTR [rip+0x37a9d]        # 885b0 <img>
   50b13:	mov    rdx,r12
   50b16:	lea    rcx,[rax+0x3338]
   50b1d:	mov    esi,DWORD PTR [rcx]
   50b1f:	add    rdx,0x4
   50b23:	add    rcx,0x4
   50b27:	mov    DWORD PTR [rdx-0x4],esi
   50b2a:	mov    esi,DWORD PTR [rcx+0x3c]
   50b2d:	mov    DWORD PTR [rdx+0x3c],esi
   50b30:	mov    esi,DWORD PTR [rcx+0x7c]
   50b33:	mov    DWORD PTR [rdx+0x7c],esi
   50b36:	mov    esi,DWORD PTR [rcx+0xbc]
   50b3c:	mov    DWORD PTR [rdx+0xbc],esi
   50b42:	cmp    rdi,rdx
   50b45:	jne    50b1d <Mode_Decision_for_4x4IntraBlocks+0x156d>
   50b47:	mov    rcx,QWORD PTR [rip+0x39e5a]        # 8a9a8 <enc_picture>
   50b4e:	mov    r13,QWORD PTR [rsp+0x40]
   50b53:	lea    rbp,[rip+0x65346]        # b5ea0 <rec_resG>
   50b5a:	lea    r14,[rip+0x631bf]        # b3d20 <rec_resR>
   50b61:	mov    r9d,DWORD PTR [rax+0x11bf0]
   50b68:	xor    r11d,r11d
   50b6b:	mov    rdx,QWORD PTR [rcx+0x1940]
   50b72:	mov    rdi,QWORD PTR [rcx+0x1918]
   50b79:	add    r13,rax
   50b7c:	mov    QWORD PTR [rsp+0x30],rdi
   50b81:	mov    rdi,QWORD PTR [rdx+0x8]
   50b85:	mov    rbx,QWORD PTR [rdx]
   50b88:	mov    QWORD PTR [rsp+0x38],rdi
   50b8d:	mov    rdi,QWORD PTR [rsp+0xb8]
   50b95:	mov    QWORD PTR [rsp+0x28],rbx
   50b9a:	mov    ebx,DWORD PTR [rax+0x11bec]
   50ba0:	add    rdi,rax
   50ba3:	mov    QWORD PTR [rsp+0x20],rdi
   50ba8:	mov    rsi,QWORD PTR [rsp+0x78]
   50bad:	mov    rcx,QWORD PTR [rsp+0x28]
   50bb2:	xor    edx,edx
   50bb4:	mov    rax,QWORD PTR [rsp+0x68]
   50bb9:	mov    r8,QWORD PTR [rsp+0x20]
   50bbe:	mov    rdi,QWORD PTR [rcx+rsi*1]
   50bc2:	mov    rcx,QWORD PTR [rsp+0x30]
   50bc7:	add    rdi,rax
   50bca:	mov    r15,QWORD PTR [rcx+rsi*1]
   50bce:	mov    QWORD PTR [rsp+0x10],rdi
   50bd3:	mov    rdi,rsi
   50bd6:	mov    rsi,QWORD PTR [rsp+0x38]
   50bdb:	add    r15,rax
   50bde:	add    rax,QWORD PTR [rsi+rdi*1]
   50be2:	mov    QWORD PTR [rsp+0x18],r15
   50be7:	mov    QWORD PTR [rsp+0x8],rax
   50bec:	mov    rax,rdx
   50bef:	mov    r15,QWORD PTR [rsp+0x10]
   50bf4:	shl    rax,0x5
   50bf8:	mov    esi,DWORD PTR [r12+rax*1]
   50bfc:	mov    edi,DWORD PTR [rbp+rax*1+0x0]
   50c00:	mov    ecx,esi
   50c02:	sar    ecx,1
   50c04:	sub    edi,ecx
   50c06:	mov    ecx,DWORD PTR [r14+rax*1]
   50c0a:	mov    r10d,edi
   50c0d:	mov    eax,ecx
   50c0f:	sar    eax,1
   50c11:	sub    r10d,eax
   50c14:	movzx  eax,WORD PTR [r8+0x2138]
   50c1c:	add    eax,r10d
   50c1f:	cmovs  eax,r11d
   50c23:	cmp    eax,r9d
   50c26:	cmovg  eax,r9d
   50c2a:	add    esi,edi
   50c2c:	mov    WORD PTR [r15+rdx*1],ax
   50c31:	movzx  eax,WORD PTR [r13+rdx*1+0xb8]
   50c3a:	add    esi,eax
   50c3c:	mov    rax,QWORD PTR [rsp+0x18]
   50c41:	cmovs  esi,r11d
   50c45:	cmp    esi,ebx
   50c47:	cmovg  esi,ebx
   50c4a:	add    ecx,r10d
   50c4d:	mov    WORD PTR [rax+rdx*1],si
   50c51:	movzx  eax,WORD PTR [r8+0x2938]
   50c59:	add    ecx,eax
   50c5b:	mov    rax,QWORD PTR [rsp+0x8]
   50c60:	cmovs  ecx,r11d
   50c64:	cmp    ecx,r9d
   50c67:	cmovg  ecx,r9d
   50c6b:	add    r8,0x20
   50c6f:	mov    WORD PTR [rax+rdx*1],cx
   50c73:	add    rdx,0x2
   50c77:	cmp    rdx,0x8
   50c7b:	jne    50bec <Mode_Decision_for_4x4IntraBlocks+0x163c>
   50c81:	add    rbp,0x4
   50c85:	add    r12,0x4
   50c89:	add    r14,0x4
   50c8d:	add    r13,0x20
   50c91:	lea    rax,[rip+0x65218]        # b5eb0 <rec_resG+0x10>
   50c98:	add    QWORD PTR [rsp+0x20],0x2
   50c9e:	add    QWORD PTR [rsp+0x78],0x8
   50ca4:	cmp    rax,rbp
   50ca7:	jne    50ba8 <Mode_Decision_for_4x4IntraBlocks+0x15f8>
   50cad:	jmp    4fd5e <Mode_Decision_for_4x4IntraBlocks+0x7ae>
   50cb2:	nop    WORD PTR [rax+rax*1+0x0]
   50cb8:	mov    eax,DWORD PTR [rsp+0x180]
   50cbf:	test   eax,eax
   50cc1:	je     50cdc <Mode_Decision_for_4x4IntraBlocks+0x172c>
   50cc3:	mov    rax,QWORD PTR [rip+0x378e6]        # 885b0 <img>
   50cca:	movsxd rdx,DWORD PTR [rsp+0x184]
   50cd2:	mov    rax,QWORD PTR [rax+0x11868]
   50cd9:	mov    eax,DWORD PTR [rax+rdx*4]
   50cdc:	mov    edx,DWORD PTR [rsp+0x1a0]
   50ce3:	mov    DWORD PTR [rsp+0x180],eax
   50cea:	mov    DWORD PTR [rsp+0x9c],0x2
   50cf5:	test   edx,edx
   50cf7:	je     4f786 <Mode_Decision_for_4x4IntraBlocks+0x1d6>
   50cfd:	mov    rdx,QWORD PTR [rip+0x378ac]        # 885b0 <img>
   50d04:	movsxd rcx,DWORD PTR [rsp+0x1a4]
   50d0c:	mov    rdx,QWORD PTR [rdx+0x11868]
   50d13:	mov    edx,DWORD PTR [rdx+rcx*4]
   50d16:	mov    DWORD PTR [rsp+0x1a0],edx
   50d1d:	jmp    4f71e <Mode_Decision_for_4x4IntraBlocks+0x16e>
   50d22:	nop    WORD PTR [rax+rax*1+0x0]
   50d28:	mov    rax,QWORD PTR [rsp+0x118]
   50d30:	mov    r10,QWORD PTR [rax+r9*2]
   50d34:	jmp    504d5 <Mode_Decision_for_4x4IntraBlocks+0xf25>
   50d39:	mov    rax,QWORD PTR [rip+0x37870]        # 885b0 <img>
   50d40:	mov    rbx,QWORD PTR [rsp+0x108]
   50d48:	mov    rsi,QWORD PTR [rip+0x383f9]        # 89148 <cofAC4x4>
   50d4f:	mov    rax,QWORD PTR [rax+0x3738]
   50d56:	mov    rdx,QWORD PTR [rsi]
   50d59:	mov    rax,QWORD PTR [rax+rbx*1]
   50d5d:	mov    rbx,QWORD PTR [rsp+0xf0]
   50d65:	mov    rdi,QWORD PTR [rax+rbx*1]
   50d69:	xor    eax,eax
   50d6b:	mov    rcx,QWORD PTR [rdi]
   50d6e:	xchg   ax,ax
   50d70:	mov    r8d,DWORD PTR [rcx+rax*1]
   50d74:	mov    DWORD PTR [rdx+rax*1],r8d
   50d78:	add    rax,0x4
   50d7c:	cmp    rax,0x48
   50d80:	jne    50d70 <Mode_Decision_for_4x4IntraBlocks+0x17c0>
   50d82:	mov    rdi,QWORD PTR [rdi+0x8]
   50d86:	mov    rcx,QWORD PTR [rsi+0x8]
   50d8a:	xor    eax,eax
   50d8c:	nop    DWORD PTR [rax+0x0]
   50d90:	mov    edx,DWORD PTR [rdi+rax*1]
   50d93:	mov    DWORD PTR [rcx+rax*1],edx
   50d96:	add    rax,0x4
   50d9a:	cmp    rax,0x48
   50d9e:	jne    50d90 <Mode_Decision_for_4x4IntraBlocks+0x17e0>
   50da0:	mov    rax,QWORD PTR [rip+0x39c01]        # 8a9a8 <enc_picture>
   50da7:	mov    r9,QWORD PTR [rsp+0x68]
   50dac:	lea    rcx,[rsp+0x1c0]
   50db4:	lea    r8,[rsp+0x200]
   50dbc:	mov    rdi,QWORD PTR [rsp+0x78]
   50dc1:	add    rdi,QWORD PTR [rax+0x1918]
   50dc8:	mov    rsi,QWORD PTR [rdi]
   50dcb:	xor    eax,eax
   50dcd:	add    rsi,r9
   50dd0:	movzx  edx,WORD PTR [rsi+rax*2]
   50dd4:	mov    DWORD PTR [rcx+rax*4],edx
   50dd7:	add    rax,0x1
   50ddb:	cmp    rax,0x4
   50ddf:	jne    50dd0 <Mode_Decision_for_4x4IntraBlocks+0x1820>
   50de1:	add    rcx,0x10
   50de5:	add    rdi,0x8
   50de9:	cmp    r8,rcx
   50dec:	jne    50dc8 <Mode_Decision_for_4x4IntraBlocks+0x1818>
   50dee:	mov    eax,DWORD PTR [rsp+0x170]
   50df5:	mov    DWORD PTR [rsp+0xc8],r12d
   50dfd:	movsd  QWORD PTR [rsp+0x90],xmm0
   50e06:	mov    DWORD PTR [rsp+0xcc],eax
   50e0d:	jmp    4fb44 <Mode_Decision_for_4x4IntraBlocks+0x594>
   50e12:	mov    DWORD PTR [rsp+0x9c],0x2
   50e1d:	jmp    4f786 <Mode_Decision_for_4x4IntraBlocks+0x1d6>
   50e22:	call   4390 <__stack_chk_fail@plt>
   50e27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000050e30 <Mode_Decision_for_8x8IntraBlocks>:
   50e30:	endbr64 
   50e34:	push   r15
   50e36:	push   r14
   50e38:	push   r13
   50e3a:	mov    r13d,edi
   50e3d:	push   r12
   50e3f:	push   rbp
   50e40:	mov    rbp,rsi
   50e43:	push   rbx
   50e44:	sub    rsp,0x28
   50e48:	movsd  xmm1,QWORD PTR [rip+0x26850]        # 776a0 <b8_mode_table.7699+0x40>
   50e50:	movsd  xmm3,QWORD PTR [rip+0x22718]        # 73570 <quant_coef+0x8b0>
   50e58:	mov    rax,QWORD PTR fs:0x28
   50e61:	mov    QWORD PTR [rsp+0x18],rax
   50e66:	xor    eax,eax
   50e68:	movsd  xmm4,QWORD PTR [rip+0x226f0]        # 73560 <quant_coef+0x8a0>
   50e70:	mulsd  xmm1,xmm0
   50e74:	addsd  xmm1,QWORD PTR [rip+0x25214]        # 76090 <QP2QUANT+0xb0>
   50e7c:	movapd xmm2,xmm1
   50e80:	andpd  xmm2,xmm3
   50e84:	ucomisd xmm4,xmm2
   50e88:	jbe    50ebd <Mode_Decision_for_8x8IntraBlocks+0x8d>
   50e8a:	cvttsd2si rax,xmm1
   50e8f:	pxor   xmm2,xmm2
   50e93:	movsd  xmm5,QWORD PTR [rip+0x2192d]        # 727c8 <INIT_MB_TYPE_I+0x108>
   50e9b:	andnpd xmm3,xmm1
   50e9f:	cvtsi2sd xmm2,rax
   50ea4:	movapd xmm4,xmm2
   50ea8:	cmpnlesd xmm4,xmm1
   50ead:	movapd xmm1,xmm3
   50eb1:	andpd  xmm4,xmm5
   50eb5:	subsd  xmm2,xmm4
   50eb9:	orpd   xmm1,xmm2
   50ebd:	cvttsd2si eax,xmm1
   50ec1:	xor    ebx,ebx
   50ec3:	xor    r12d,r12d
   50ec6:	mov    r14d,0x1
   50ecc:	lea    r15,[rsp+0x14]
   50ed1:	mov    DWORD PTR [rbp+0x0],eax
   50ed4:	mov    esi,ebx
   50ed6:	mov    rdx,r15
   50ed9:	mov    edi,r13d
   50edc:	movsd  QWORD PTR [rsp+0x8],xmm0
   50ee2:	call   4f5b0 <Mode_Decision_for_4x4IntraBlocks>
   50ee7:	movsd  xmm0,QWORD PTR [rsp+0x8]
   50eed:	test   eax,eax
   50eef:	mov    eax,DWORD PTR [rsp+0x14]
   50ef3:	cmovne r12d,r14d
   50ef7:	add    ebx,0x1
   50efa:	add    DWORD PTR [rbp+0x0],eax
   50efd:	cmp    ebx,0x4
   50f00:	jne    50ed4 <Mode_Decision_for_8x8IntraBlocks+0xa4>
   50f02:	mov    rax,QWORD PTR [rsp+0x18]
   50f07:	xor    rax,QWORD PTR fs:0x28
   50f10:	jne    50f24 <Mode_Decision_for_8x8IntraBlocks+0xf4>
   50f12:	add    rsp,0x28
   50f16:	mov    eax,r12d
   50f19:	pop    rbx
   50f1a:	pop    rbp
   50f1b:	pop    r12
   50f1d:	pop    r13
   50f1f:	pop    r14
   50f21:	pop    r15
   50f23:	ret    
   50f24:	call   4390 <__stack_chk_fail@plt>
   50f29:	nop    DWORD PTR [rax+0x0]

0000000000050f30 <Mode_Decision_for_Intra4x4Macroblock>:
   50f30:	endbr64 
   50f34:	push   r14
   50f36:	push   r13
   50f38:	xor    r13d,r13d
   50f3b:	push   r12
   50f3d:	xor    r12d,r12d
   50f40:	push   rbp
   50f41:	mov    ebp,0x1
   50f46:	push   rbx
   50f47:	mov    rbx,rdi
   50f4a:	sub    rsp,0x20
   50f4e:	movsd  QWORD PTR [rsp+0x8],xmm0
   50f54:	lea    r14,[rsp+0x14]
   50f59:	mov    rax,QWORD PTR fs:0x28
   50f62:	mov    QWORD PTR [rsp+0x18],rax
   50f67:	xor    eax,eax
   50f69:	mov    DWORD PTR [rdi],0x0
   50f6f:	movsd  xmm0,QWORD PTR [rsp+0x8]
   50f75:	mov    rsi,r14
   50f78:	mov    edi,r13d
   50f7b:	call   50e30 <Mode_Decision_for_8x8IntraBlocks>
   50f80:	mov    ecx,r13d
   50f83:	mov    esi,ebp
   50f85:	mov    edx,r12d
   50f88:	shl    esi,cl
   50f8a:	or     r12d,esi
   50f8d:	test   eax,eax
   50f8f:	mov    eax,DWORD PTR [rsp+0x14]
   50f93:	cmove  r12d,edx
   50f97:	add    r13d,0x1
   50f9b:	add    DWORD PTR [rbx],eax
   50f9d:	cmp    r13d,0x4
   50fa1:	jne    50f6f <Mode_Decision_for_Intra4x4Macroblock+0x3f>
   50fa3:	mov    rax,QWORD PTR [rsp+0x18]
   50fa8:	xor    rax,QWORD PTR fs:0x28
   50fb1:	jne    50fc3 <Mode_Decision_for_Intra4x4Macroblock+0x93>
   50fb3:	add    rsp,0x20
   50fb7:	mov    eax,r12d
   50fba:	pop    rbx
   50fbb:	pop    rbp
   50fbc:	pop    r12
   50fbe:	pop    r13
   50fc0:	pop    r14
   50fc2:	ret    
   50fc3:	call   4390 <__stack_chk_fail@plt>
   50fc8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000050fd0 <RDCost_for_8x8blocks>:
   50fd0:	endbr64 
   50fd4:	push   r15
   50fd6:	push   r14
   50fd8:	push   r13
   50fda:	movsx  r13d,r8w
   50fde:	push   r12
   50fe0:	mov    r12,rsi
   50fe3:	push   rbp
   50fe4:	push   rbx
   50fe5:	mov    ebx,edx
   50fe7:	sub    rsp,0xe8
   50fee:	mov    eax,DWORD PTR [rsp+0x120]
   50ff5:	mov    QWORD PTR [rsp+0x60],rdi
   50ffa:	mov    edi,ecx
   50ffc:	mov    DWORD PTR [rsp+0x5c],edx
   51000:	shr    edx,0x1f
   51003:	mov    DWORD PTR [rsp+0x70],ecx
   51007:	mov    DWORD PTR [rsp+0x94],r8d
   5100f:	mov    DWORD PTR [rsp+0x74],r9d
   51014:	mov    DWORD PTR [rsp+0xb0],eax
   5101b:	movsd  QWORD PTR [rsp+0x88],xmm0
   51024:	mov    rax,QWORD PTR fs:0x28
   5102d:	mov    QWORD PTR [rsp+0xd8],rax
   51035:	xor    eax,eax
   51037:	lea    eax,[rbx+rdx*1]
   5103a:	mov    DWORD PTR [rsp+0xd4],0x0
   51045:	and    eax,0x1
   51048:	sub    eax,edx
   5104a:	lea    esi,[rax*8+0x0]
   51051:	mov    eax,edx
   51053:	add    eax,ebx
   51055:	mov    DWORD PTR [rsp+0x20],esi
   51059:	sar    eax,1
   5105b:	test   esi,esi
   5105d:	lea    edx,[rax*8+0x0]
   51064:	lea    eax,[rsi+0x3]
   51067:	cmovns eax,esi
   5106a:	mov    DWORD PTR [rsp+0x28],edx
   5106e:	mov    esi,r13d
   51071:	sar    eax,0x2
   51074:	test   edx,edx
   51076:	mov    DWORD PTR [rsp+0xb8],eax
   5107d:	mov    r15d,eax
   51080:	lea    eax,[rdx+0x3]
   51083:	cmovns eax,edx
   51086:	sar    eax,0x2
   51089:	mov    DWORD PTR [rsp+0xbc],eax
   51090:	mov    ebp,eax
   51092:	mov    rax,QWORD PTR [rip+0x37517]        # 885b0 <img>
   51099:	cmp    DWORD PTR [rax+0x18],0x1
   5109d:	sete   dl
   510a0:	test   ecx,ecx
   510a2:	sete   al
   510a5:	and    edx,eax
   510a7:	mov    BYTE PTR [rsp+0x87],dl
   510ae:	mov    r14d,edx
   510b1:	call   2c0b0 <B8Mode2Value>
   510b6:	mov    rcx,QWORD PTR [rip+0x374f3]        # 885b0 <img>
   510bd:	mov    DWORD PTR [rsp+0x90],eax
   510c4:	movsxd rax,DWORD PTR [rcx+0xc]
   510c8:	mov    QWORD PTR [rsp+0xa8],rcx
   510d0:	imul   rax,rax,0x278
   510d7:	add    rax,QWORD PTR [rcx+0x3758]
   510de:	mov    rsi,rax
   510e1:	mov    QWORD PTR [rsp+0x78],rax
   510e6:	mov    eax,DWORD PTR [rax]
   510e8:	mov    DWORD PTR [rsp+0xb4],eax
   510ef:	mov    rax,QWORD PTR [rcx+0x3750]
   510f6:	mov    QWORD PTR [rsp+0x98],rax
   510fe:	mov    rax,QWORD PTR [rip+0x374b3]        # 885b8 <input>
   51105:	movsxd rdx,DWORD PTR [rax+0x93c]
   5110c:	lea    rax,[rip+0x3985d]        # 8a970 <assignSE2partition>
   51113:	mov    DWORD PTR [rsi+0x244],0x0
   5111d:	mov    rax,QWORD PTR [rax+rdx*8]
   51121:	mov    QWORD PTR [rsp+0xa0],rax
   51129:	test   r14b,r14b
   5112c:	je     511a6 <RDCost_for_8x8blocks+0x1d6>
   5112e:	mov    edx,DWORD PTR [rcx+0x90]
   51134:	mov    eax,DWORD PTR [rcx+0x94]
   5113a:	mov    rcx,QWORD PTR [rip+0x64d37]        # b5e78 <direct_pdir>
   51141:	movsd  xmm0,QWORD PTR [rip+0x2655f]        # 776a8 <b8_mode_table.7699+0x48>
   51149:	add    edx,r15d
   5114c:	add    eax,ebp
   5114e:	movsxd rdx,edx
   51151:	cdqe   
   51153:	mov    rcx,QWORD PTR [rcx+rdx*8]
   51157:	movsx  ecx,WORD PTR [rcx+rax*2]
   5115b:	test   cx,cx
   5115e:	js     514eb <RDCost_for_8x8blocks+0x51b>
   51164:	mov    rsi,QWORD PTR [rip+0x4df2d]        # 9f098 <direct_ref_idx>
   5116b:	lea    rdi,[rsp+0xd4]
   51173:	mov    r8,QWORD PTR [rsi+0x8]
   51177:	mov    rsi,QWORD PTR [rsi]
   5117a:	mov    rsi,QWORD PTR [rsi+rdx*8]
   5117e:	mov    r8,QWORD PTR [r8+rdx*8]
   51182:	mov    edx,0x0
   51187:	cmp    WORD PTR [rsi+rax*2],0x0
   5118c:	cmovns dx,WORD PTR [rsi+rax*2]
   51191:	xor    r9d,r9d
   51194:	movsx  r8d,WORD PTR [r8+rax*2]
   51199:	movsx  eax,dx
   5119c:	mov    edx,ebx
   5119e:	push   r8
   511a0:	xor    r8d,r8d
   511a3:	push   rax
   511a4:	jmp    511ea <RDCost_for_8x8blocks+0x21a>
   511a6:	mov    ecx,DWORD PTR [rsp+0x94]
   511ad:	mov    ebx,DWORD PTR [rsp+0x70]
   511b1:	xor    eax,eax
   511b3:	lea    rdi,[rsp+0xd4]
   511bb:	test   cx,0xfffd
   511c0:	lea    edx,[rcx-0x1]
   511c3:	mov    r8d,ebx
   511c6:	mov    ecx,r13d
   511c9:	cmovne r8d,eax
   511cd:	cmp    dx,0x2
   511d1:	cmovb  eax,ebx
   511d4:	mov    r9d,eax
   511d7:	movsx  eax,WORD PTR [rsp+0xb0]
   511df:	push   rax
   511e0:	movsx  ebp,WORD PTR [rsp+0x7c]
   511e5:	push   rbp
   511e6:	mov    edx,DWORD PTR [rsp+0x6c]
   511ea:	mov    rsi,r12
   511ed:	call   29730 <LumaResidualCoding8x8>
   511f2:	mov    rbx,QWORD PTR [rsp+0x70]
   511f7:	mov    DWORD PTR [rbx],eax
   511f9:	mov    rax,QWORD PTR [rip+0x373b0]        # 885b0 <img>
   51200:	pop    r11
   51202:	pop    rbx
   51203:	mov    ebx,DWORD PTR [rax+0x11c14]
   51209:	mov    QWORD PTR [rsp+0x68],rax
   5120e:	mov    DWORD PTR [rsp+0x80],ebx
   51215:	test   ebx,ebx
   51217:	jne    51514 <RDCost_for_8x8blocks+0x544>
   5121d:	mov    r15,QWORD PTR [rip+0x37394]        # 885b8 <input>
   51224:	cmp    DWORD PTR [r15+0x9a0],0x2
   5122c:	mov    rax,r15
   5122f:	je     517f5 <RDCost_for_8x8blocks+0x825>
   51235:	mov    rbx,QWORD PTR [rsp+0x68]
   5123a:	mov    rax,QWORD PTR [rip+0x66187]        # b73c8 <imgY_org>
   51241:	movsxd rdx,DWORD PTR [rsp+0x28]
   51246:	mov    r14,QWORD PTR [rip+0x3975b]        # 8a9a8 <enc_picture>
   5124d:	mov    QWORD PTR [rsp+0x28],r15
   51252:	mov    QWORD PTR [rsp+0x8],rax
   51257:	movsxd rax,DWORD PTR [rbx+0xac]
   5125e:	mov    rcx,QWORD PTR [rbx+0x11860]
   51265:	mov    r12d,DWORD PTR [rbx+0x11c14]
   5126c:	lea    rsi,[rdx+rax*1]
   51270:	lea    rdx,[rdx+rax*1+0x8]
   51275:	mov    rbp,QWORD PTR [rip+0x61854]        # b2ad0 <imgUV_org>
   5127c:	lea    rdi,[rdx*8+0x0]
   51284:	movsxd rdx,DWORD PTR [rbx+0x9c]
   5128b:	shl    rsi,0x3
   5128f:	mov    QWORD PTR [rsp+0x18],rdi
   51294:	mov    rdi,rdx
   51297:	sub    rdx,rax
   5129a:	sub    rdi,rax
   5129d:	mov    rax,QWORD PTR [r14+0x1918]
   512a4:	shl    rdi,0x3
   512a8:	mov    QWORD PTR [rsp+0x10],rdi
   512ad:	lea    rdi,[rax+rdx*8]
   512b1:	mov    eax,DWORD PTR [rsp+0x20]
   512b5:	add    eax,DWORD PTR [rbx+0x98]
   512bb:	mov    r15,rdi
   512be:	cdqe   
   512c0:	lea    rbx,[rax+rax*1]
   512c4:	lea    r11,[rax+rax*1+0x10]
   512c9:	mov    QWORD PTR [rsp+0x20],rbx
   512ce:	xor    ebx,ebx
   512d0:	mov    rax,QWORD PTR [rsp+0x8]
   512d5:	mov    r8,QWORD PTR [r15+rsi*1]
   512d9:	mov    r10,QWORD PTR [rax+rsi*1]
   512dd:	mov    rax,QWORD PTR [rsp+0x10]
   512e2:	lea    r9,[rax+rsi*1]
   512e6:	mov    rax,QWORD PTR [rsp+0x20]
   512eb:	nop    DWORD PTR [rax+rax*1+0x0]
   512f0:	movzx  edx,WORD PTR [r10+rax*1]
   512f5:	movzx  edi,WORD PTR [r8+rax*1]
   512fa:	sub    edx,edi
   512fc:	movsxd rdx,edx
   512ff:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   51303:	add    rbx,rdx
   51306:	test   r12d,r12d
   51309:	je     5135d <RDCost_for_8x8blocks+0x38d>
   5130b:	mov    rdi,QWORD PTR [r14+0x1940]
   51312:	mov    rdx,QWORD PTR [rbp+0x0]
   51316:	mov    r13,QWORD PTR [rdi]
   51319:	mov    rdx,QWORD PTR [rdx+rsi*1]
   5131d:	mov    rdi,QWORD PTR [rdi+0x8]
   51321:	mov    r13,QWORD PTR [r13+r9*1+0x0]
   51326:	movzx  edx,WORD PTR [rdx+rax*1]
   5132a:	mov    rdi,QWORD PTR [rdi+r9*1]
   5132e:	movzx  r13d,WORD PTR [r13+rax*1+0x0]
   51334:	movzx  edi,WORD PTR [rdi+rax*1]
   51338:	sub    edx,r13d
   5133b:	movsxd rdx,edx
   5133e:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   51342:	add    rbx,rdx
   51345:	mov    rdx,QWORD PTR [rbp+0x8]
   51349:	mov    rdx,QWORD PTR [rdx+rsi*1]
   5134d:	movzx  edx,WORD PTR [rdx+rax*1]
   51351:	sub    edx,edi
   51353:	movsxd rdx,edx
   51356:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   5135a:	add    rbx,rdx
   5135d:	add    rax,0x2
   51361:	cmp    r11,rax
   51364:	jne    512f0 <RDCost_for_8x8blocks+0x320>
   51366:	add    rsi,0x8
   5136a:	cmp    QWORD PTR [rsp+0x18],rsi
   5136f:	jne    512d0 <RDCost_for_8x8blocks+0x300>
   51375:	mov    r15,QWORD PTR [rsp+0x28]
   5137a:	mov    r9d,DWORD PTR [r15+0x934]
   51381:	test   r9d,r9d
   51384:	je     51808 <RDCost_for_8x8blocks+0x838>
   5138a:	movsxd rax,DWORD PTR [rsp+0xb4]
   51392:	mov    rdi,QWORD PTR [rsp+0xa8]
   5139a:	mov    ecx,DWORD PTR [rsp+0x90]
   513a1:	lea    rdx,[rip+0xfffffffffffbc238]        # d5e0 <writeB8_typeInfo_CABAC>
   513a8:	lea    rax,[rax+rax*2]
   513ac:	shl    rax,0x4
   513b0:	lea    rbp,[rdi+rax*1]
   513b4:	lea    rdi,[rdi+rax*1+0x3760]
   513bc:	mov    DWORD PTR [rbp+0x3764],ecx
   513c2:	mov    rcx,QWORD PTR [rsp+0xa0]
   513ca:	mov    QWORD PTR [rbp+0x3788],rdx
   513d1:	mov    DWORD PTR [rbp+0x3760],0x2
   513db:	movsxd rcx,DWORD PTR [rcx+0x8]
   513df:	mov    rdx,rcx
   513e2:	shl    rdx,0x4
   513e6:	sub    rdx,rcx
   513e9:	mov    rcx,QWORD PTR [rsp+0x98]
   513f1:	mov    rcx,QWORD PTR [rcx+0x18]
   513f5:	lea    rdx,[rcx+rdx*8]
   513f9:	mov    rsi,rdx
   513fc:	call   QWORD PTR [rdx+0x70]
   513ff:	mov    rax,QWORD PTR [rsp+0x78]
   51404:	mov    r12d,DWORD PTR [rsp+0x80]
   5140c:	add    r12d,DWORD PTR [rbp+0x376c]
   51413:	add    DWORD PTR [rax],0x1
   51416:	cmp    BYTE PTR [rsp+0x87],0x0
   5141e:	jne    514a9 <RDCost_for_8x8blocks+0x4d9>
   51424:	mov    ecx,DWORD PTR [rsp+0x94]
   5142b:	mov    rax,QWORD PTR [rip+0x3717e]        # 885b0 <img>
   51432:	mov    r13d,ecx
   51435:	mov    r15d,ecx
   51438:	and    r13d,0xfffffffd
   5143c:	sub    r15d,0x1
   51440:	cmp    DWORD PTR [rax+0x11940],0x1
   51447:	jle    51a44 <RDCost_for_8x8blocks+0xa74>
   5144d:	test   r13w,r13w
   51451:	je     5198b <RDCost_for_8x8blocks+0x9bb>
   51457:	cmp    DWORD PTR [rax+0x11944],0x1
   5145e:	jle    5146a <RDCost_for_8x8blocks+0x49a>
   51460:	cmp    DWORD PTR [rax+0x18],0x1
   51464:	je     51aeb <RDCost_for_8x8blocks+0xb1b>
   5146a:	cmp    r15w,0x1
   5146f:	ja     514a9 <RDCost_for_8x8blocks+0x4d9>
   51471:	movsx  ebp,WORD PTR [rsp+0xb0]
   51479:	mov    esi,DWORD PTR [rsp+0xbc]
   51480:	mov    edi,DWORD PTR [rsp+0xb8]
   51487:	sub    rsp,0x8
   5148b:	mov    r8d,ebp
   5148e:	mov    eax,DWORD PTR [rsp+0x78]
   51492:	mov    r9d,0x1
   51498:	lea    ecx,[rsi+0x2]
   5149b:	lea    edx,[rdi+0x2]
   5149e:	push   rax
   5149f:	call   2c4c0 <writeMotionVector8x8>
   514a4:	pop    rcx
   514a5:	pop    rsi
   514a6:	add    r12d,eax
   514a9:	mov    rax,QWORD PTR [rip+0x37108]        # 885b8 <input>
   514b0:	cmp    DWORD PTR [rax+0x934],0x1
   514b7:	je     51a6b <RDCost_for_8x8blocks+0xa9b>
   514bd:	mov    rax,QWORD PTR [rsp+0x60]
   514c2:	mov    eax,DWORD PTR [rax]
   514c4:	test   eax,eax
   514c6:	jne    51840 <RDCost_for_8x8blocks+0x870>
   514cc:	pxor   xmm0,xmm0
   514d0:	pxor   xmm1,xmm1
   514d4:	cvtsi2sd xmm0,r12d
   514d9:	mulsd  xmm0,QWORD PTR [rsp+0x88]
   514e2:	cvtsi2sd xmm1,rbx
   514e7:	addsd  xmm0,xmm1
   514eb:	mov    rax,QWORD PTR [rsp+0xd8]
   514f3:	xor    rax,QWORD PTR fs:0x28
   514fc:	jne    51b51 <RDCost_for_8x8blocks+0xb81>
   51502:	add    rsp,0xe8
   51509:	pop    rbx
   5150a:	pop    rbp
   5150b:	pop    r12
   5150d:	pop    r13
   5150f:	pop    r14
   51511:	pop    r15
   51513:	ret    
   51514:	mov    ebx,DWORD PTR [rsp+0x5c]
   51518:	xor    r15d,r15d
   5151b:	lea    rdi,[rax+0x10]
   5151f:	mov    r9,rax
   51522:	lea    r13,[rip+0x627f7]        # b3d20 <rec_resR>
   51529:	lea    r12d,[rbx+0x8]
   5152d:	lea    ebp,[rbx+0x4]
   51530:	xor    ebx,ebx
   51532:	mov    ecx,r12d
   51535:	mov    r12d,ebp
   51538:	mov    ebp,r15d
   5153b:	mov    r15d,ecx
   5153e:	mov    ecx,DWORD PTR [rsp+0x20]
   51542:	mov    eax,ebp
   51544:	mov    esi,DWORD PTR [rsp+0x28]
   51548:	mov    r8,r9
   5154b:	and    eax,0x1
   5154e:	lea    ecx,[rcx+rax*4]
   51551:	mov    eax,ebp
   51553:	sar    eax,1
   51555:	movsxd rcx,ecx
   51558:	lea    eax,[rsi+rax*4]
   5155b:	shl    rcx,0x4
   5155f:	cdqe   
   51561:	add    rcx,rax
   51564:	lea    rax,[rip+0x61575]        # b2ae0 <resTrans_R>
   5156b:	lea    r14,[rcx*4+0x0]
   51573:	lea    r10,[rax+r14*1]
   51577:	xor    eax,eax
   51579:	mov    edx,DWORD PTR [r10+rax*1]
   5157d:	mov    DWORD PTR [r8+rax*1+0x3338],edx
   51585:	add    rax,0x40
   51589:	cmp    rax,0x100
   5158f:	jne    51579 <RDCost_for_8x8blocks+0x5a9>
   51591:	add    r8,0x4
   51595:	add    r10,0x4
   51599:	cmp    rdi,r8
   5159c:	jne    51577 <RDCost_for_8x8blocks+0x5a7>
   5159e:	xor    edx,edx
   515a0:	mov    esi,ebp
   515a2:	mov    edi,r12d
   515a5:	call   4f300 <RDCost_for_4x4Blocks_Chroma>
   515aa:	mov    rdx,QWORD PTR [rip+0x36fff]        # 885b0 <img>
   515b1:	lea    r9,[r13+r14*1+0x0]
   515b6:	add    ebx,eax
   515b8:	lea    rax,[rip+0x4f3a1]        # a0960 <resTrans_B>
   515bf:	lea    r8,[rax+r14*1]
   515c3:	lea    r10,[rdx+0x10]
   515c7:	xor    eax,eax
   515c9:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   515d0:	mov    DWORD PTR [r9+rax*1],ecx
   515d4:	mov    ecx,DWORD PTR [r8+rax*1]
   515d8:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   515df:	add    rax,0x40
   515e3:	cmp    rax,0x100
   515e9:	jne    515c9 <RDCost_for_8x8blocks+0x5f9>
   515eb:	add    rdx,0x4
   515ef:	add    r9,0x4
   515f3:	add    r8,0x4
   515f7:	cmp    r10,rdx
   515fa:	jne    515c7 <RDCost_for_8x8blocks+0x5f7>
   515fc:	mov    edi,r15d
   515ff:	mov    edx,0x1
   51604:	mov    esi,ebp
   51606:	call   4f300 <RDCost_for_4x4Blocks_Chroma>
   5160b:	mov    r9,QWORD PTR [rip+0x36f9e]        # 885b0 <img>
   51612:	add    ebx,eax
   51614:	lea    rax,[rip+0x4ef25]        # a0540 <rec_resB>
   5161b:	mov    r8,r9
   5161e:	lea    rcx,[rax+r14*1]
   51622:	lea    rdi,[r9+0x10]
   51626:	xor    eax,eax
   51628:	mov    edx,DWORD PTR [r8+rax*1+0x3338]
   51630:	mov    DWORD PTR [rcx+rax*1],edx
   51633:	add    rax,0x40
   51637:	cmp    rax,0x100
   5163d:	jne    51628 <RDCost_for_8x8blocks+0x658>
   5163f:	add    r8,0x4
   51643:	add    rcx,0x4
   51647:	cmp    rdi,r8
   5164a:	jne    51626 <RDCost_for_8x8blocks+0x656>
   5164c:	add    ebp,0x1
   5164f:	cmp    ebp,0x4
   51652:	jne    5153e <RDCost_for_8x8blocks+0x56e>
   51658:	movsxd rdx,DWORD PTR [rsp+0x20]
   5165d:	movsxd rcx,DWORD PTR [rsp+0x28]
   51662:	lea    rdi,[rip+0x4eed7]        # a0540 <rec_resB>
   51669:	lea    r12,[rip+0x64830]        # b5ea0 <rec_resG>
   51670:	mov    r8,QWORD PTR [rip+0x39331]        # 8a9a8 <enc_picture>
   51677:	mov    QWORD PTR [rsp+0x68],r9
   5167c:	mov    rax,rdx
   5167f:	mov    r10d,DWORD PTR [r9+0x11bf0]
   51686:	mov    QWORD PTR [rsp+0x18],0x0
   5168f:	shl    rax,0x4
   51693:	mov    rsi,QWORD PTR [r8+0x1940]
   5169a:	mov    ebp,DWORD PTR [r9+0x11bec]
   516a1:	mov    DWORD PTR [rsp+0x80],ebx
   516a8:	add    rax,rcx
   516ab:	xor    ebx,ebx
   516ad:	shl    rax,0x2
   516b1:	lea    r14,[rdi+rax*1]
   516b5:	movsxd rdi,DWORD PTR [r9+0x9c]
   516bc:	add    r12,rax
   516bf:	add    r13,rax
   516c2:	add    rcx,rdi
   516c5:	mov    rdi,QWORD PTR [rsi]
   516c8:	shl    rcx,0x3
   516cc:	add    rdi,rcx
   516cf:	mov    QWORD PTR [rsp+0x48],rdi
   516d4:	mov    rdi,QWORD PTR [r8+0x1918]
   516db:	add    rdi,rcx
   516de:	add    rcx,QWORD PTR [rsi+0x8]
   516e2:	mov    QWORD PTR [rsp+0x38],rcx
   516e7:	lea    rcx,[rip+0x650d2]        # b67c0 <mprRGB>
   516ee:	add    rax,rcx
   516f1:	mov    QWORD PTR [rsp+0x40],rdi
   516f6:	mov    QWORD PTR [rsp+0x30],rax
   516fb:	movsxd rax,DWORD PTR [r9+0x98]
   51702:	add    rax,rdx
   51705:	add    rax,rax
   51708:	mov    QWORD PTR [rsp+0x50],rax
   5170d:	nop    DWORD PTR [rax]
   51710:	mov    rax,QWORD PTR [rsp+0x18]
   51715:	mov    rcx,QWORD PTR [rsp+0x48]
   5171a:	xor    edi,edi
   5171c:	mov    r8,QWORD PTR [rsp+0x50]
   51721:	mov    r15,QWORD PTR [rcx+rax*2]
   51725:	mov    rcx,QWORD PTR [rsp+0x40]
   5172a:	mov    rcx,QWORD PTR [rcx+rax*2]
   5172e:	mov    QWORD PTR [rsp+0x8],rcx
   51733:	mov    rcx,QWORD PTR [rsp+0x38]
   51738:	mov    rcx,QWORD PTR [rcx+rax*2]
   5173c:	mov    QWORD PTR [rsp+0x10],rcx
   51741:	mov    rcx,QWORD PTR [rsp+0x30]
   51746:	add    rcx,rax
   51749:	nop    DWORD PTR [rax+0x0]
   51750:	mov    edx,DWORD PTR [r14+rdi*1]
   51754:	mov    r9d,DWORD PTR [r12+rdi*1]
   51758:	mov    eax,edx
   5175a:	sar    eax,1
   5175c:	sub    r9d,eax
   5175f:	mov    eax,DWORD PTR [r13+rdi*1+0x0]
   51764:	mov    r11d,r9d
   51767:	mov    esi,eax
   51769:	sar    esi,1
   5176b:	sub    r11d,esi
   5176e:	mov    esi,r11d
   51771:	add    esi,DWORD PTR [rcx+0x400]
   51777:	cmovs  esi,ebx
   5177a:	cmp    esi,r10d
   5177d:	cmovg  esi,r10d
   51781:	add    edx,r9d
   51784:	add    edx,DWORD PTR [rcx]
   51786:	cmovs  edx,ebx
   51789:	mov    WORD PTR [r15+r8*1],si
   5178e:	mov    rsi,QWORD PTR [rsp+0x8]
   51793:	cmp    edx,ebp
   51795:	cmovg  edx,ebp
   51798:	add    eax,r11d
   5179b:	add    eax,DWORD PTR [rcx+0x800]
   517a1:	cmovs  eax,ebx
   517a4:	mov    WORD PTR [rsi+r8*1],dx
   517a9:	mov    rsi,QWORD PTR [rsp+0x10]
   517ae:	cmp    eax,r10d
   517b1:	cmovg  eax,r10d
   517b5:	add    rdi,0x40
   517b9:	add    rcx,0x40
   517bd:	mov    WORD PTR [rsi+r8*1],ax
   517c2:	add    r8,0x2
   517c6:	cmp    rdi,0x200
   517cd:	jne    51750 <RDCost_for_8x8blocks+0x780>
   517cf:	add    QWORD PTR [rsp+0x18],0x4
   517d5:	add    r12,0x4
   517d9:	add    r14,0x4
   517dd:	add    r13,0x4
   517e1:	mov    rax,QWORD PTR [rsp+0x18]
   517e6:	cmp    rax,0x20
   517ea:	jne    51710 <RDCost_for_8x8blocks+0x740>
   517f0:	jmp    5121d <RDCost_for_8x8blocks+0x24d>
   517f5:	mov    rbx,QWORD PTR [rsp+0x68]
   517fa:	cmp    DWORD PTR [rbx+0x18],0x1
   517fe:	jne    51860 <RDCost_for_8x8blocks+0x890>
   51800:	mov    r15,rax
   51803:	jmp    51235 <RDCost_for_8x8blocks+0x265>
   51808:	mov    esi,DWORD PTR [rsp+0xcc]
   5180f:	mov    edi,DWORD PTR [rsp+0x90]
   51816:	lea    rcx,[rsp+0xcc]
   5181e:	lea    rdx,[rsp+0xd0]
   51826:	call   662b0 <ue_linfo>
   5182b:	mov    r12d,DWORD PTR [rsp+0x80]
   51833:	add    r12d,DWORD PTR [rsp+0xd0]
   5183b:	jmp    51416 <RDCost_for_8x8blocks+0x446>
   51840:	mov    rax,QWORD PTR [rsp+0x78]
   51845:	mov    esi,DWORD PTR [rsp+0x70]
   51849:	mov    edi,DWORD PTR [rsp+0x5c]
   5184d:	mov    edx,DWORD PTR [rax+0x23c]
   51853:	call   2e430 <writeLumaCoeff8x8>
   51858:	add    r12d,eax
   5185b:	jmp    514cc <RDCost_for_8x8blocks+0x4fc>
   51860:	mov    edi,DWORD PTR [rsp+0x5c]
   51864:	mov    esi,0xffffffff
   51869:	call   140d0 <compute_residue_b8block>
   5186e:	mov    r15,QWORD PTR [rip+0x36d43]        # 885b8 <input>
   51875:	cmp    DWORD PTR [r15+0x9a0],0x2
   5187d:	mov    rax,r15
   51880:	jne    51b40 <RDCost_for_8x8blocks+0xb70>
   51886:	mov    rbx,QWORD PTR [rip+0x36d23]        # 885b0 <img>
   5188d:	cmp    DWORD PTR [rbx+0x18],0x1
   51891:	mov    QWORD PTR [rsp+0x68],rbx
   51896:	je     51800 <RDCost_for_8x8blocks+0x830>
   5189c:	mov    r10d,DWORD PTR [r15+0xb58]
   518a3:	test   r10d,r10d
   518a6:	jle    51b0d <RDCost_for_8x8blocks+0xb3d>
   518ac:	movsx  ebp,WORD PTR [rsp+0x74]
   518b1:	xor    r12d,r12d
   518b4:	xor    ebx,ebx
   518b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   518c0:	mov    edx,DWORD PTR [rsp+0x5c]
   518c4:	mov    ecx,DWORD PTR [rsp+0x70]
   518c8:	mov    r8d,ebp
   518cb:	mov    esi,0x8
   518d0:	mov    edi,r12d
   518d3:	call   139c0 <decode_one_b8block>
   518d8:	mov    r11d,DWORD PTR [rsp+0x20]
   518dd:	mov    r10d,DWORD PTR [rsp+0x28]
   518e2:	mov    rdx,QWORD PTR [rip+0x36caf]        # 88598 <decs>
   518e9:	mov    rax,QWORD PTR [rip+0x36cc0]        # 885b0 <img>
   518f0:	mov    r15,QWORD PTR [rip+0x65ad1]        # b73c8 <imgY_org>
   518f7:	mov    rdx,QWORD PTR [rdx+0x8]
   518fb:	add    r11d,DWORD PTR [rax+0xa8]
   51902:	add    r10d,DWORD PTR [rax+0xac]
   51909:	movsxd r11,r11d
   5190c:	mov    r9,QWORD PTR [rax+0x11860]
   51913:	movsxd r10,r10d
   51916:	mov    r14,QWORD PTR [rdx+r12*8]
   5191a:	lea    r8,[r11+0x8]
   5191e:	lea    r13,[r10+0x8]
   51922:	nop    WORD PTR [rax+rax*1+0x0]
   51928:	mov    rsi,QWORD PTR [r15+r10*8]
   5192c:	mov    rcx,QWORD PTR [r14+r10*8]
   51930:	mov    rdx,r11
   51933:	nop    DWORD PTR [rax+rax*1+0x0]
   51938:	movzx  eax,WORD PTR [rsi+rdx*2]
   5193c:	movzx  edi,WORD PTR [rcx+rdx*2]
   51940:	add    rdx,0x1
   51944:	sub    eax,edi
   51946:	cdqe   
   51948:	movsxd rax,DWORD PTR [r9+rax*4]
   5194c:	add    rbx,rax
   5194f:	cmp    r8,rdx
   51952:	jne    51938 <RDCost_for_8x8blocks+0x968>
   51954:	add    r10,0x1
   51958:	cmp    r13,r10
   5195b:	jne    51928 <RDCost_for_8x8blocks+0x958>
   5195d:	mov    r15,QWORD PTR [rip+0x36c54]        # 885b8 <input>
   51964:	add    r12,0x1
   51968:	mov    eax,DWORD PTR [r15+0xb58]
   5196f:	cmp    eax,r12d
   51972:	jg     518c0 <RDCost_for_8x8blocks+0x8f0>
   51978:	movsxd rcx,eax
   5197b:	mov    rax,rbx
   5197e:	cqo    
   51980:	idiv   rcx
   51983:	mov    rbx,rax
   51986:	jmp    5137a <RDCost_for_8x8blocks+0x3aa>
   5198b:	movsx  ebp,WORD PTR [rsp+0x74]
   51990:	mov    edx,DWORD PTR [rsp+0xbc]
   51997:	mov    ecx,0x1
   5199c:	mov    esi,DWORD PTR [rsp+0xb8]
   519a3:	mov    edi,DWORD PTR [rsp+0x70]
   519a7:	mov    r8d,ebp
   519aa:	mov    r14d,ebp
   519ad:	call   2c2b0 <writeReferenceFrame>
   519b2:	add    r12d,eax
   519b5:	mov    rax,QWORD PTR [rip+0x36bf4]        # 885b0 <img>
   519bc:	cmp    DWORD PTR [rax+0x11944],0x1
   519c3:	jle    51a11 <RDCost_for_8x8blocks+0xa41>
   519c5:	cmp    DWORD PTR [rax+0x18],0x1
   519c9:	jne    51a66 <RDCost_for_8x8blocks+0xa96>
   519cf:	cmp    r15w,0x1
   519d4:	ja     51a66 <RDCost_for_8x8blocks+0xa96>
   519da:	movsx  ebp,WORD PTR [rsp+0xb0]
   519e2:	mov    edx,DWORD PTR [rsp+0xbc]
   519e9:	xor    ecx,ecx
   519eb:	mov    esi,DWORD PTR [rsp+0xb8]
   519f2:	mov    edi,DWORD PTR [rsp+0x70]
   519f6:	mov    r8d,ebp
   519f9:	call   2c2b0 <writeReferenceFrame>
   519fe:	add    r12d,eax
   51a01:	test   r13w,r13w
   51a05:	jne    51479 <RDCost_for_8x8blocks+0x4a9>
   51a0b:	movsx  r14d,WORD PTR [rsp+0x74]
   51a11:	mov    esi,DWORD PTR [rsp+0xbc]
   51a18:	mov    edi,DWORD PTR [rsp+0xb8]
   51a1f:	mov    r8d,r14d
   51a22:	xor    r9d,r9d
   51a25:	sub    rsp,0x8
   51a29:	mov    eax,DWORD PTR [rsp+0x78]
   51a2d:	lea    edx,[rdi+0x2]
   51a30:	lea    ecx,[rsi+0x2]
   51a33:	push   rax
   51a34:	call   2c4c0 <writeMotionVector8x8>
   51a39:	pop    rdi
   51a3a:	pop    r8
   51a3c:	add    r12d,eax
   51a3f:	jmp    5146a <RDCost_for_8x8blocks+0x49a>
   51a44:	cmp    DWORD PTR [rax+0x11944],0x1
   51a4b:	jle    51a57 <RDCost_for_8x8blocks+0xa87>
   51a4d:	cmp    DWORD PTR [rax+0x18],0x1
   51a51:	je     51b01 <RDCost_for_8x8blocks+0xb31>
   51a57:	test   r13w,r13w
   51a5b:	jne    5146a <RDCost_for_8x8blocks+0x49a>
   51a61:	movsx  ebp,WORD PTR [rsp+0x74]
   51a66:	mov    r14d,ebp
   51a69:	jmp    51a11 <RDCost_for_8x8blocks+0xa41>
   51a6b:	mov    rax,QWORD PTR [rsp+0xa0]
   51a73:	mov    rcx,QWORD PTR [rsp+0x98]
   51a7b:	movsxd rdx,DWORD PTR [rax+0x2c]
   51a7f:	mov    rax,rdx
   51a82:	shl    rax,0x4
   51a86:	sub    rax,rdx
   51a89:	mov    rdx,QWORD PTR [rcx+0x18]
   51a8d:	lea    rbp,[rdx+rax*8+0x8]
   51a92:	mov    rdi,rbp
   51a95:	call   4ee0 <arienco_bits_written>
   51a9a:	mov    rcx,QWORD PTR [rsp+0x78]
   51a9f:	mov    edi,DWORD PTR [rsp+0x5c]
   51aa3:	xor    esi,esi
   51aa5:	mov    DWORD PTR [rsp+0xd0],eax
   51aac:	mov    rax,QWORD PTR [rsp+0x60]
   51ab1:	mov    r9,rbp
   51ab4:	mov    r8d,0x1
   51aba:	mov    edx,DWORD PTR [rax]
   51abc:	test   edx,edx
   51abe:	mov    edx,DWORD PTR [rip+0x8dfdc]        # dfaa0 <cbp8x8>
   51ac4:	setg   sil
   51ac8:	call   d8b0 <writeCBP_BIT_CABAC>
   51acd:	mov    rdi,rbp
   51ad0:	call   4ee0 <arienco_bits_written>
   51ad5:	sub    eax,DWORD PTR [rsp+0xd0]
   51adc:	mov    DWORD PTR [rsp+0xd0],eax
   51ae3:	add    r12d,eax
   51ae6:	jmp    514bd <RDCost_for_8x8blocks+0x4ed>
   51aeb:	cmp    r15w,0x1
   51af0:	jbe    51b14 <RDCost_for_8x8blocks+0xb44>
   51af2:	test   r13w,r13w
   51af6:	jne    514a9 <RDCost_for_8x8blocks+0x4d9>
   51afc:	jmp    51a61 <RDCost_for_8x8blocks+0xa91>
   51b01:	cmp    r15w,0x1
   51b06:	ja     51af2 <RDCost_for_8x8blocks+0xb22>
   51b08:	jmp    519da <RDCost_for_8x8blocks+0xa0a>
   51b0d:	xor    ebx,ebx
   51b0f:	jmp    5137a <RDCost_for_8x8blocks+0x3aa>
   51b14:	movsx  ebp,WORD PTR [rsp+0xb0]
   51b1c:	mov    edx,DWORD PTR [rsp+0xbc]
   51b23:	xor    ecx,ecx
   51b25:	mov    esi,DWORD PTR [rsp+0xb8]
   51b2c:	mov    edi,DWORD PTR [rsp+0x70]
   51b30:	mov    r8d,ebp
   51b33:	call   2c2b0 <writeReferenceFrame>
   51b38:	add    r12d,eax
   51b3b:	jmp    51479 <RDCost_for_8x8blocks+0x4a9>
   51b40:	mov    rax,QWORD PTR [rip+0x36a69]        # 885b0 <img>
   51b47:	mov    QWORD PTR [rsp+0x68],rax
   51b4c:	jmp    51235 <RDCost_for_8x8blocks+0x265>
   51b51:	call   4390 <__stack_chk_fail@plt>
   51b56:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000051b60 <I16Offset>:
   51b60:	endbr64 
   51b64:	mov    eax,edi
   51b66:	and    eax,0xf
   51b69:	cmp    eax,0x1
   51b6c:	sbb    eax,eax
   51b6e:	sar    edi,0x2
   51b71:	and    eax,0xfffffff4
   51b74:	and    edi,0xc
   51b77:	lea    eax,[rax+rsi*1+0xd]
   51b7b:	add    eax,edi
   51b7d:	ret    
   51b7e:	xchg   ax,ax

0000000000051b80 <SetModesAndRefframeForBlocks>:
   51b80:	endbr64 
   51b84:	push   r15
   51b86:	push   r14
   51b88:	push   r13
   51b8a:	push   r12
   51b8c:	push   rbp
   51b8d:	push   rbx
   51b8e:	sub    rsp,0x58
   51b92:	mov    rdx,QWORD PTR [rip+0x36a17]        # 885b0 <img>
   51b99:	movsxd rax,DWORD PTR [rdx+0xc]
   51b9d:	mov    ebx,DWORD PTR [rdx+0x18]
   51ba0:	mov    r13d,DWORD PTR [rdx+0x11ad0]
   51ba7:	mov    rcx,rax
   51baa:	mov    DWORD PTR [rsp+0x4],ebx
   51bae:	imul   rax,rax,0x278
   51bb5:	add    rax,QWORD PTR [rdx+0x3758]
   51bbc:	test   r13d,r13d
   51bbf:	je     51bcd <SetModesAndRefframeForBlocks+0x4d>
   51bc1:	mov    r13d,DWORD PTR [rax+0x214]
   51bc8:	test   r13d,r13d
   51bcb:	jne    51c00 <SetModesAndRefframeForBlocks+0x80>
   51bcd:	mov    DWORD PTR [rax+0x48],edi
   51bd0:	cmp    edi,0x1
   51bd3:	je     51c19 <SetModesAndRefframeForBlocks+0x99>
   51bd5:	mov    DWORD PTR [rax+0x244],0x0
   51bdf:	cmp    edi,0xd
   51be2:	ja     5230e <SetModesAndRefframeForBlocks+0x78e>
   51be8:	lea    r8,[rip+0x259d1]        # 775c0 <THETA+0x120>
   51bef:	mov    esi,edi
   51bf1:	movsxd rcx,DWORD PTR [r8+rsi*4]
   51bf5:	add    rcx,r8
   51bf8:	notrack jmp rcx
   51bfb:	nop    DWORD PTR [rax+rax*1+0x0]
   51c00:	and    ecx,0x1
   51c03:	mov    DWORD PTR [rax+0x48],edi
   51c06:	cmp    ecx,0x1
   51c09:	sbb    r13d,r13d
   51c0c:	and    r13d,0xfffffffe
   51c10:	add    r13d,0x4
   51c14:	cmp    edi,0x1
   51c17:	jne    51bd5 <SetModesAndRefframeForBlocks+0x55>
   51c19:	movsx  ecx,WORD PTR [rdx+0x11912]
   51c20:	mov    DWORD PTR [rax+0x244],ecx
   51c26:	movsxd rcx,edi
   51c29:	lea    r9,[rip+0x903b0]        # e1fe0 <best8x8pdir>
   51c30:	lea    r8,[r9+rcx*8]
   51c34:	xor    ecx,ecx
   51c36:	movsx  esi,WORD PTR [r8+rcx*2]
   51c3b:	mov    DWORD PTR [rax+rcx*4+0x1d8],edi
   51c42:	mov    DWORD PTR [rax+rcx*4+0x1e8],esi
   51c49:	add    rcx,0x1
   51c4d:	cmp    rcx,0x4
   51c51:	jne    51c36 <SetModesAndRefframeForBlocks+0xb6>
   51c53:	mov    r12d,DWORD PTR [rdx+0x90]
   51c5a:	mov    ecx,DWORD PTR [rdx+0x94]
   51c60:	cmp    edi,0xd
   51c63:	ja     51ed7 <SetModesAndRefframeForBlocks+0x357>
   51c69:	mov    edx,0x2601
   51c6e:	bt     rdx,rdi
   51c72:	jae    51ed7 <SetModesAndRefframeForBlocks+0x357>
   51c78:	mov    r11,QWORD PTR [rip+0x38d29]        # 8a9a8 <enc_picture>
   51c7f:	cmp    DWORD PTR [rsp+0x4],0x1
   51c84:	mov    rax,QWORD PTR [r11+0x1950]
   51c8b:	mov    QWORD PTR [rsp+0x18],rax
   51c90:	mov    r8,QWORD PTR [rax]
   51c93:	je     51ff8 <SetModesAndRefframeForBlocks+0x478>
   51c99:	movsxd rax,ecx
   51c9c:	xor    esi,esi
   51c9e:	test   edi,edi
   51ca0:	lea    rcx,[rax+rax*1]
   51ca4:	mov    QWORD PTR [rsp+0x10],rax
   51ca9:	movsxd rax,r12d
   51cac:	setne  sil
   51cb0:	mov    QWORD PTR [rsp+0x8],rax
   51cb5:	shl    rax,0x3
   51cb9:	neg    esi
   51cbb:	lea    r10,[rcx+0x8]
   51cbf:	lea    r9,[r8+rax*1]
   51cc3:	lea    rdi,[r8+rax*1+0x20]
   51cc8:	mov    rax,r9
   51ccb:	mov    rdx,QWORD PTR [rax]
   51cce:	add    rax,0x8
   51cd2:	mov    WORD PTR [rdx+rcx*1],si
   51cd6:	cmp    rdi,rax
   51cd9:	jne    51ccb <SetModesAndRefframeForBlocks+0x14b>
   51cdb:	add    rcx,0x2
   51cdf:	cmp    r10,rcx
   51ce2:	jne    51cc8 <SetModesAndRefframeForBlocks+0x148>
   51ce4:	movsxd rax,r13d
   51ce7:	mov    rbx,QWORD PTR [rsp+0x10]
   51cec:	mov    r12,QWORD PTR [rsp+0x8]
   51cf1:	mov    r15,QWORD PTR [r11+0x1958]
   51cf8:	mov    rbp,rax
   51cfb:	shl    r12,0x3
   51cff:	add    rbx,rbx
   51d02:	shl    rbp,0x5
   51d06:	mov    r10,QWORD PTR [r15]
   51d09:	lea    r14,[rbx+0x8]
   51d0d:	lea    rdi,[r12+0x20]
   51d12:	mov    rsi,rbx
   51d15:	add    rbp,rax
   51d18:	lea    rcx,[rsi*4+0x0]
   51d20:	mov    rax,r12
   51d23:	mov    rdx,QWORD PTR [r8+rax*1]
   51d27:	mov    r9,0xffffffffffffffff
   51d2e:	movsx  rdx,WORD PTR [rdx+rsi*1]
   51d33:	test   dx,dx
   51d36:	js     51d42 <SetModesAndRefframeForBlocks+0x1c2>
   51d38:	lea    rdx,[rdx+rbp*1+0x2]
   51d3d:	mov    r9,QWORD PTR [r11+rdx*8+0x8]
   51d42:	mov    rdx,QWORD PTR [r10+rax*1]
   51d46:	add    rax,0x8
   51d4a:	mov    QWORD PTR [rdx+rcx*1],r9
   51d4e:	cmp    rdi,rax
   51d51:	jne    51d23 <SetModesAndRefframeForBlocks+0x1a3>
   51d53:	add    rsi,0x2
   51d57:	cmp    r14,rsi
   51d5a:	jne    51d18 <SetModesAndRefframeForBlocks+0x198>
   51d5c:	cmp    DWORD PTR [rsp+0x4],0x1
   51d61:	je     51f80 <SetModesAndRefframeForBlocks+0x400>
   51d67:	add    rsp,0x58
   51d6b:	pop    rbx
   51d6c:	pop    rbp
   51d6d:	pop    r12
   51d6f:	pop    r13
   51d71:	pop    r14
   51d73:	pop    r15
   51d75:	ret    
   51d76:	movabs rcx,0xb0000000b
   51d80:	mov    QWORD PTR [rax+0x1e8],0xffffffffffffffff
   51d8b:	mov    QWORD PTR [rax+0x1d8],rcx
   51d92:	mov    QWORD PTR [rax+0x1e0],rcx
   51d99:	mov    QWORD PTR [rax+0x1f0],0xffffffffffffffff
   51da4:	mov    r12d,DWORD PTR [rdx+0x90]
   51dab:	mov    ecx,DWORD PTR [rdx+0x94]
   51db1:	jmp    51c78 <SetModesAndRefframeForBlocks+0xf8>
   51db6:	movabs rcx,0xd0000000d
   51dc0:	mov    QWORD PTR [rax+0x1e8],0xffffffffffffffff
   51dcb:	mov    QWORD PTR [rax+0x1d8],rcx
   51dd2:	mov    QWORD PTR [rax+0x1e0],rcx
   51dd9:	mov    QWORD PTR [rax+0x1f0],0xffffffffffffffff
   51de4:	mov    DWORD PTR [rax+0x23c],0x1
   51dee:	mov    r12d,DWORD PTR [rdx+0x90]
   51df5:	mov    ecx,DWORD PTR [rdx+0x94]
   51dfb:	jmp    51c78 <SetModesAndRefframeForBlocks+0xf8>
   51e00:	mov    r9,QWORD PTR [rip+0x64071]        # b5e78 <direct_pdir>
   51e07:	mov    r10d,DWORD PTR [rsp+0x4]
   51e0c:	mov    r12d,DWORD PTR [rdx+0x90]
   51e13:	mov    ecx,DWORD PTR [rdx+0x94]
   51e19:	xor    edx,edx
   51e1b:	mov    DWORD PTR [rax+rdx*4+0x1d8],0x0
   51e26:	mov    esi,edi
   51e28:	cmp    r10d,0x1
   51e2c:	jne    51e4d <SetModesAndRefframeForBlocks+0x2cd>
   51e2e:	mov    esi,edx
   51e30:	and    esi,0x1
   51e33:	lea    r8d,[r12+rsi*2]
   51e37:	mov    esi,edx
   51e39:	movsxd r8,r8d
   51e3c:	and    esi,0xfffffffe
   51e3f:	mov    r8,QWORD PTR [r9+r8*8]
   51e43:	add    esi,ecx
   51e45:	movsxd rsi,esi
   51e48:	movsx  esi,WORD PTR [r8+rsi*2]
   51e4d:	mov    DWORD PTR [rax+rdx*4+0x1e8],esi
   51e54:	add    rdx,0x1
   51e58:	cmp    rdx,0x4
   51e5c:	jne    51e1b <SetModesAndRefframeForBlocks+0x29b>
   51e5e:	jmp    51c78 <SetModesAndRefframeForBlocks+0xf8>
   51e63:	mov    QWORD PTR [rax+0x1d8],0x0
   51e6e:	mov    QWORD PTR [rax+0x1e0],0x0
   51e79:	mov    QWORD PTR [rax+0x1e8],0xffffffffffffffff
   51e84:	mov    QWORD PTR [rax+0x1f0],0xffffffffffffffff
   51e8f:	jmp    51dee <SetModesAndRefframeForBlocks+0x26e>
   51e94:	xor    ecx,ecx
   51e96:	lea    r9,[rip+0x8f873]        # e1710 <best8x8mode>
   51e9d:	lea    r8,[rip+0x9017c]        # e2020 <best8x8pdir+0x40>
   51ea4:	nop    DWORD PTR [rax+0x0]
   51ea8:	movsx  esi,WORD PTR [r9+rcx*1]
   51ead:	mov    DWORD PTR [rax+rcx*2+0x1d8],esi
   51eb4:	movsx  esi,WORD PTR [r8+rcx*1]
   51eb9:	mov    DWORD PTR [rax+rcx*2+0x1e8],esi
   51ec0:	add    rcx,0x2
   51ec4:	cmp    rcx,0x8
   51ec8:	jne    51ea8 <SetModesAndRefframeForBlocks+0x328>
   51eca:	mov    r12d,DWORD PTR [rdx+0x90]
   51ed1:	mov    ecx,DWORD PTR [rdx+0x94]
   51ed7:	mov    r11,QWORD PTR [rip+0x38aca]        # 8a9a8 <enc_picture>
   51ede:	cmp    DWORD PTR [rsp+0x4],0x1
   51ee3:	mov    rbx,QWORD PTR [r11+0x1950]
   51eea:	mov    QWORD PTR [rsp+0x18],rbx
   51eef:	mov    r8,QWORD PTR [rbx]
   51ef2:	je     52094 <SetModesAndRefframeForBlocks+0x514>
   51ef8:	movsxd rax,ecx
   51efb:	movsxd rcx,edi
   51efe:	lea    r9,[rip+0x900db]        # e1fe0 <best8x8pdir>
   51f05:	xor    ebx,ebx
   51f07:	mov    QWORD PTR [rsp+0x10],rax
   51f0c:	lea    rsi,[rax+rax*1]
   51f10:	movsxd rax,r12d
   51f13:	lea    rdi,[rcx*4+0x0]
   51f1b:	mov    QWORD PTR [rsp+0x8],rax
   51f20:	lea    rbp,[r8+rax*8]
   51f24:	lea    r12,[rip+0x90e75]        # e2da0 <best8x8fwref>
   51f2b:	mov    ecx,ebx
   51f2d:	xor    edx,edx
   51f2f:	and    ecx,0xfffffffe
   51f32:	mov    eax,edx
   51f34:	mov    r10d,0xffffffff
   51f3a:	sar    eax,1
   51f3c:	add    eax,ecx
   51f3e:	cdqe   
   51f40:	add    rax,rdi
   51f43:	test   WORD PTR [r9+rax*2],0xfffd
   51f4a:	jne    51f51 <SetModesAndRefframeForBlocks+0x3d1>
   51f4c:	movzx  r10d,WORD PTR [r12+rax*2]
   51f51:	mov    rax,QWORD PTR [rbp+rdx*8+0x0]
   51f56:	add    rdx,0x1
   51f5a:	mov    WORD PTR [rax+rsi*1],r10w
   51f5f:	cmp    rdx,0x4
   51f63:	jne    51f32 <SetModesAndRefframeForBlocks+0x3b2>
   51f65:	add    ebx,0x1
   51f68:	add    rsi,0x2
   51f6c:	cmp    ebx,0x4
   51f6f:	jne    51f2b <SetModesAndRefframeForBlocks+0x3ab>
   51f71:	jmp    51ce4 <SetModesAndRefframeForBlocks+0x164>
   51f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51f80:	add    r13d,0x1
   51f84:	mov    rax,QWORD PTR [rsp+0x18]
   51f89:	mov    r9,QWORD PTR [r15+0x8]
   51f8d:	movsxd r13,r13d
   51f90:	mov    r10,r13
   51f93:	mov    r8,QWORD PTR [rax+0x8]
   51f97:	shl    r10,0x5
   51f9b:	add    r10,r13
   51f9e:	lea    rsi,[rbx*4+0x0]
   51fa6:	mov    rax,r12
   51fa9:	mov    rdx,QWORD PTR [r8+rax*1]
   51fad:	mov    rcx,0xffffffffffffffff
   51fb4:	movsx  rdx,WORD PTR [rdx+rbx*1]
   51fb9:	test   dx,dx
   51fbc:	js     51fc8 <SetModesAndRefframeForBlocks+0x448>
   51fbe:	lea    rdx,[rdx+r10*1+0x2]
   51fc3:	mov    rcx,QWORD PTR [r11+rdx*8+0x8]
   51fc8:	mov    rdx,QWORD PTR [r9+rax*1]
   51fcc:	add    rax,0x8
   51fd0:	mov    QWORD PTR [rdx+rsi*1],rcx
   51fd4:	cmp    rdi,rax
   51fd7:	jne    51fa9 <SetModesAndRefframeForBlocks+0x429>
   51fd9:	add    rbx,0x2
   51fdd:	cmp    r14,rbx
   51fe0:	jne    51f9e <SetModesAndRefframeForBlocks+0x41e>
   51fe2:	add    rsp,0x58
   51fe6:	pop    rbx
   51fe7:	pop    rbp
   51fe8:	pop    r12
   51fea:	pop    r13
   51fec:	pop    r14
   51fee:	pop    r15
   51ff0:	ret    
   51ff1:	nop    DWORD PTR [rax+0x0]
   51ff8:	mov    rax,QWORD PTR [rsp+0x18]
   51ffd:	mov    rbx,QWORD PTR [rip+0x4d094]        # 9f098 <direct_ref_idx>
   52004:	mov    r10,QWORD PTR [rax+0x8]
   52008:	movsxd rax,ecx
   5200b:	lea    rdx,[rax+rax*1]
   5200f:	mov    QWORD PTR [rsp+0x10],rax
   52014:	movsxd rax,r12d
   52017:	mov    QWORD PTR [rsp+0x8],rax
   5201c:	lea    r12,[rax*8+0x0]
   52024:	lea    r14,[rdx+0x8]
   52028:	lea    r9,[r12+0x20]
   5202d:	mov    rax,r12
   52030:	mov    rsi,QWORD PTR [r8+rax*1]
   52034:	mov    rcx,QWORD PTR [r10+rax*1]
   52038:	add    rsi,rdx
   5203b:	add    rcx,rdx
   5203e:	test   edi,edi
   52040:	jne    52080 <SetModesAndRefframeForBlocks+0x500>
   52042:	mov    rbp,QWORD PTR [rbx]
   52045:	mov    rbp,QWORD PTR [rbp+rax*1+0x0]
   5204a:	movzx  ebp,WORD PTR [rbp+rdx*1+0x0]
   5204f:	mov    WORD PTR [rsi],bp
   52052:	mov    rsi,QWORD PTR [rbx+0x8]
   52056:	mov    rsi,QWORD PTR [rsi+rax*1]
   5205a:	movzx  esi,WORD PTR [rsi+rdx*1]
   5205e:	mov    WORD PTR [rcx],si
   52061:	add    rax,0x8
   52065:	cmp    r9,rax
   52068:	jne    52030 <SetModesAndRefframeForBlocks+0x4b0>
   5206a:	add    rdx,0x2
   5206e:	cmp    r14,rdx
   52071:	jne    5202d <SetModesAndRefframeForBlocks+0x4ad>
   52073:	jmp    51ce4 <SetModesAndRefframeForBlocks+0x164>
   52078:	nop    DWORD PTR [rax+rax*1+0x0]
   52080:	mov    ebp,0xffffffff
   52085:	mov    r15d,0xffffffff
   5208b:	mov    WORD PTR [rsi],bp
   5208e:	mov    WORD PTR [rcx],r15w
   52092:	jmp    52061 <SetModesAndRefframeForBlocks+0x4e1>
   52094:	mov    rbx,QWORD PTR [rsp+0x18]
   52099:	mov    rsi,QWORD PTR [rip+0x4cff8]        # 9f098 <direct_ref_idx>
   520a0:	mov    QWORD PTR [rsp+0x30],rax
   520a5:	xor    ebp,ebp
   520a7:	mov    QWORD PTR [rsp+0x48],r11
   520ac:	lea    r15,[rip+0x8ff2d]        # e1fe0 <best8x8pdir>
   520b3:	mov    rdx,QWORD PTR [rbx+0x8]
   520b7:	movsxd rbx,ecx
   520ba:	mov    DWORD PTR [rsp+0x44],r13d
   520bf:	mov    r13,rsi
   520c2:	mov    QWORD PTR [rsp+0x10],rbx
   520c7:	lea    r9,[rbx+rbx*1]
   520cb:	movsxd rbx,r12d
   520ce:	mov    QWORD PTR [rsp+0x8],rbx
   520d3:	shl    rbx,0x3
   520d7:	mov    r12,rdx
   520da:	mov    QWORD PTR [rsp+0x38],rbx
   520df:	movsxd rbx,edi
   520e2:	mov    QWORD PTR [rsp+0x20],rbx
   520e7:	shl    rbx,0x2
   520eb:	mov    QWORD PTR [rsp+0x28],rbx
   520f0:	mov    DWORD PTR [rsp+0x40],ebp
   520f4:	mov    ebx,ebp
   520f6:	mov    rdx,QWORD PTR [rsp+0x38]
   520fb:	xor    ecx,ecx
   520fd:	and    ebx,0xfffffffe
   52100:	mov    r10,QWORD PTR [r8+rdx*1]
   52104:	mov    rsi,QWORD PTR [r12+rdx*1]
   52108:	mov    eax,ecx
   5210a:	sar    eax,1
   5210c:	add    eax,ebx
   5210e:	add    r10,r9
   52111:	add    rsi,r9
   52114:	cmp    edi,0x8
   52117:	je     52198 <SetModesAndRefframeForBlocks+0x618>
   52119:	cmp    edi,0x1
   5211c:	je     52268 <SetModesAndRefframeForBlocks+0x6e8>
   52122:	mov    r14,QWORD PTR [rsp+0x28]
   52127:	cdqe   
   52129:	mov    r11,QWORD PTR [rsp+0x20]
   5212e:	add    r14,rax
   52131:	test   WORD PTR [r15+r14*2],0xfffd
   52138:	je     521fb <SetModesAndRefframeForBlocks+0x67b>
   5213e:	mov    ebp,0xffffffff
   52143:	mov    WORD PTR [r10],bp
   52147:	movzx  r10d,WORD PTR [r15+r14*2]
   5214c:	sub    r10d,0x1
   52150:	cmp    r10w,0x1
   52155:	jbe    5224e <SetModesAndRefframeForBlocks+0x6ce>
   5215b:	mov    r10d,0xffffffff
   52161:	mov    WORD PTR [rsi],r10w
   52165:	add    ecx,0x1
   52168:	add    rdx,0x8
   5216c:	cmp    ecx,0x4
   5216f:	jne    52100 <SetModesAndRefframeForBlocks+0x580>
   52171:	mov    ebp,DWORD PTR [rsp+0x40]
   52175:	add    r9,0x2
   52179:	add    ebp,0x1
   5217c:	cmp    ebp,0x4
   5217f:	jne    520f0 <SetModesAndRefframeForBlocks+0x570>
   52185:	mov    r13d,DWORD PTR [rsp+0x44]
   5218a:	mov    r11,QWORD PTR [rsp+0x48]
   5218f:	jmp    51ce4 <SetModesAndRefframeForBlocks+0x164>
   52194:	nop    DWORD PTR [rax+0x0]
   52198:	cdqe   
   5219a:	lea    r14,[rip+0x8f56f]        # e1710 <best8x8mode>
   521a1:	cmp    WORD PTR [r14+rax*2],0x0
   521a7:	jne    521d0 <SetModesAndRefframeForBlocks+0x650>
   521a9:	mov    rax,QWORD PTR [r13+0x0]
   521ad:	mov    rax,QWORD PTR [rax+rdx*1]
   521b1:	movzx  eax,WORD PTR [rax+r9*1]
   521b6:	mov    WORD PTR [r10],ax
   521ba:	mov    rax,QWORD PTR [r13+0x8]
   521be:	mov    rax,QWORD PTR [rax+rdx*1]
   521c2:	movzx  eax,WORD PTR [rax+r9*1]
   521c7:	mov    WORD PTR [rsi],ax
   521ca:	jmp    52165 <SetModesAndRefframeForBlocks+0x5e5>
   521cc:	nop    DWORD PTR [rax+0x0]
   521d0:	lea    r11,[rax+0x20]
   521d4:	test   WORD PTR [r15+rax*2+0x40],0xfffd
   521dc:	jne    522ec <SetModesAndRefframeForBlocks+0x76c>
   521e2:	lea    r14,[rip+0x8f527]        # e1710 <best8x8mode>
   521e9:	cmp    WORD PTR [r14+rax*2],0x0
   521ef:	je     522ec <SetModesAndRefframeForBlocks+0x76c>
   521f5:	mov    r11d,0x8
   521fb:	lea    r14,[rax+r11*4]
   521ff:	lea    rbp,[rip+0x90b9a]        # e2da0 <best8x8fwref>
   52206:	movzx  ebp,WORD PTR [rbp+r14*2+0x0]
   5220c:	mov    WORD PTR [r10],bp
   52210:	movzx  r14d,WORD PTR [r15+r14*2]
   52215:	mov    r10d,0xffffffff
   5221b:	sub    r14d,0x1
   5221f:	cmp    r14w,0x1
   52224:	ja     52161 <SetModesAndRefframeForBlocks+0x5e1>
   5222a:	cmp    edi,0x8
   5222d:	jne    5224e <SetModesAndRefframeForBlocks+0x6ce>
   5222f:	lea    r14,[rip+0x8f4da]        # e1710 <best8x8mode>
   52236:	mov    r10d,0xffffffff
   5223c:	cmp    WORD PTR [r14+rax*2],0x0
   52242:	je     52161 <SetModesAndRefframeForBlocks+0x5e1>
   52248:	mov    r11d,0x8
   5224e:	lea    rax,[rax+r11*4]
   52252:	lea    r14,[rip+0x8cdc7]        # df020 <best8x8bwref>
   52259:	movzx  r10d,WORD PTR [r14+rax*2]
   5225e:	jmp    52161 <SetModesAndRefframeForBlocks+0x5e1>
   52263:	nop    DWORD PTR [rax+rax*1+0x0]
   52268:	mov    r14,QWORD PTR [rsp+0x30]
   5226d:	cdqe   
   5226f:	mov    r11d,DWORD PTR [r14+0x244]
   52276:	test   r11d,r11d
   52279:	je     522ae <SetModesAndRefframeForBlocks+0x72e>
   5227b:	movzx  r11d,WORD PTR [r15+rax*2+0x8]
   52281:	test   r11w,0xfffd
   52287:	jne    522c2 <SetModesAndRefframeForBlocks+0x742>
   52289:	lea    r14d,[r11-0x1]
   5228d:	mov    r11d,0x1
   52293:	cmp    r14w,0x1
   52298:	ja     521fb <SetModesAndRefframeForBlocks+0x67b>
   5229e:	xor    eax,eax
   522a0:	mov    WORD PTR [r10],ax
   522a4:	xor    eax,eax
   522a6:	mov    WORD PTR [rsi],ax
   522a9:	jmp    52165 <SetModesAndRefframeForBlocks+0x5e5>
   522ae:	mov    r11d,0x1
   522b4:	test   WORD PTR [r15+rax*2+0x8],0xfffd
   522bc:	je     521fb <SetModesAndRefframeForBlocks+0x67b>
   522c2:	mov    r14d,0xffffffff
   522c8:	mov    r11d,0x1
   522ce:	mov    WORD PTR [r10],r14w
   522d2:	movzx  r14d,WORD PTR [r15+rax*2+0x8]
   522d8:	lea    r10d,[r14-0x1]
   522dc:	cmp    r10w,0x1
   522e1:	ja     5215b <SetModesAndRefframeForBlocks+0x5db>
   522e7:	jmp    5224e <SetModesAndRefframeForBlocks+0x6ce>
   522ec:	mov    ebp,0xffffffff
   522f1:	mov    WORD PTR [r10],bp
   522f5:	movzx  r10d,WORD PTR [r15+r11*2]
   522fa:	sub    r10d,0x1
   522fe:	cmp    r10w,0x1
   52303:	ja     5215b <SetModesAndRefframeForBlocks+0x5db>
   52309:	jmp    5222f <SetModesAndRefframeForBlocks+0x6af>
   5230e:	lea    rdi,[rip+0x25273]        # 77588 <THETA+0xe8>
   52315:	call   4320 <puts@plt>
   5231a:	mov    edi,0x1
   5231f:	call   44e0 <exit@plt>
   52324:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5232f:	nop

0000000000052330 <Intra16x16_Mode_Decision>:
   52330:	endbr64 
   52334:	push   r15
   52336:	push   r14
   52338:	push   r13
   5233a:	push   r12
   5233c:	push   rbp
   5233d:	push   rbx
   5233e:	mov    rbx,rsi
   52341:	sub    rsp,0x58
   52345:	mov    rdx,QWORD PTR [rip+0x36264]        # 885b0 <img>
   5234c:	mov    r12,QWORD PTR [rip+0x65075]        # b73c8 <imgY_org>
   52353:	mov    QWORD PTR [rsp+0x38],rdi
   52358:	mov    rbp,QWORD PTR [rip+0x60771]        # b2ad0 <imgUV_org>
   5235f:	movsxd rax,DWORD PTR [rdx+0xc]
   52363:	imul   rax,rax,0x278
   5236a:	add    rax,QWORD PTR [rdx+0x3758]
   52371:	mov    eax,DWORD PTR [rax+0x20c]
   52377:	mov    DWORD PTR [rsp+0x44],eax
   5237b:	mov    eax,DWORD PTR [rdx+0x98]
   52381:	mov    DWORD PTR [rsp+0x48],eax
   52385:	mov    eax,DWORD PTR [rdx+0x9c]
   5238b:	mov    DWORD PTR [rsp+0x4c],eax
   5238f:	xor    eax,eax
   52391:	call   6530 <intrapred_luma_16x16>
   52396:	mov    r8,QWORD PTR [rip+0x36213]        # 885b0 <img>
   5239d:	mov    ecx,DWORD PTR [r8+0x11c14]
   523a4:	test   ecx,ecx
   523a6:	je     527e0 <Intra16x16_Mode_Decision+0x4b0>
   523ac:	movsxd rax,DWORD PTR [rsp+0x44]
   523b1:	movsxd rdx,DWORD PTR [rsp+0x4c]
   523b6:	mov    DWORD PTR [rsp+0x8],0x0
   523be:	lea    r10,[rip+0x6071b]        # b2ae0 <resTrans_R>
   523c5:	lea    r9,[rip+0x4e594]        # a0960 <resTrans_B>
   523cc:	lea    r14,[rip+0x63f0d]        # b62e0 <resTrans_G>
   523d3:	mov    rdi,rax
   523d6:	neg    rax
   523d9:	shl    rdi,0x9
   523dd:	mov    rcx,rax
   523e0:	shl    rax,0xa
   523e4:	mov    QWORD PTR [rsp+0x10],rdi
   523e9:	shl    rcx,0xb
   523ed:	mov    rdi,QWORD PTR [rbp+0x0]
   523f1:	add    r10,rax
   523f4:	lea    rdx,[rcx+rdx*8]
   523f8:	add    r9,rax
   523fb:	lea    r11,[r8+rax*1]
   523ff:	add    r14,rax
   52402:	add    rdi,rdx
   52405:	mov    QWORD PTR [rsp+0x28],rdi
   5240a:	lea    rdi,[r12+rdx*1]
   5240e:	add    rdx,QWORD PTR [rbp+0x8]
   52412:	mov    QWORD PTR [rsp+0x18],rdx
   52417:	movsxd rdx,DWORD PTR [rsp+0x48]
   5241c:	mov    QWORD PTR [rsp+0x20],rdi
   52421:	lea    rdi,[rdx+rdx*1]
   52425:	mov    QWORD PTR [rsp+0x30],rdi
   5242a:	nop    WORD PTR [rax+rax*1+0x0]
   52430:	mov    rcx,QWORD PTR [rsp+0x10]
   52435:	mov    rdi,QWORD PTR [rsp+0x28]
   5243a:	xor    esi,esi
   5243c:	mov    rax,QWORD PTR [rsp+0x30]
   52441:	mov    r13,QWORD PTR [rdi+rcx*4]
   52445:	mov    rdi,QWORD PTR [rsp+0x20]
   5244a:	mov    r12,QWORD PTR [rdi+rcx*4]
   5244e:	mov    rdi,QWORD PTR [rsp+0x18]
   52453:	add    r13,rax
   52456:	add    r12,rax
   52459:	add    rax,QWORD PTR [rdi+rcx*4]
   5245d:	mov    rbp,rax
   52460:	movsxd rax,DWORD PTR [rsp+0x8]
   52465:	mov    QWORD PTR [rsp],rax
   52469:	nop    DWORD PTR [rax+0x0]
   52470:	movsxd rdx,DWORD PTR [rbx]
   52473:	movzx  edi,WORD PTR [r13+rsi*2+0x0]
   52479:	movsxd r15,esi
   5247c:	movzx  eax,WORD PTR [r8+rcx*1+0x2138]
   52485:	shl    rdx,0x4
   52489:	add    rdx,QWORD PTR [rsp]
   5248d:	shl    rdx,0x4
   52491:	sub    edi,eax
   52493:	movzx  eax,WORD PTR [r12+rsi*2]
   52498:	lea    rdx,[r15+rdx*1+0x958]
   524a0:	movzx  r15d,WORD PTR [r8+rcx*1+0x2938]
   524a9:	movzx  edx,WORD PTR [r8+rdx*2+0x8]
   524af:	sub    eax,edx
   524b1:	movzx  edx,WORD PTR [rbp+rsi*2+0x0]
   524b6:	add    rsi,0x1
   524ba:	sub    edx,r15d
   524bd:	sub    edx,edi
   524bf:	mov    DWORD PTR [r10+rcx*2],edx
   524c3:	sar    edx,1
   524c5:	add    edi,edx
   524c7:	sub    eax,edi
   524c9:	mov    DWORD PTR [r9+rcx*2],eax
   524cd:	sar    eax,1
   524cf:	add    edi,eax
   524d1:	mov    DWORD PTR [r14+rcx*2],edi
   524d5:	mov    DWORD PTR [r11+rcx*2+0x3338],edi
   524dd:	add    rcx,0x20
   524e1:	cmp    rsi,0x10
   524e5:	jne    52470 <Intra16x16_Mode_Decision+0x140>
   524e7:	add    DWORD PTR [rsp+0x8],0x1
   524ec:	mov    eax,DWORD PTR [rsp+0x8]
   524f0:	add    QWORD PTR [rsp+0x10],0x2
   524f6:	cmp    eax,0x10
   524f9:	jne    52430 <Intra16x16_Mode_Decision+0x100>
   524ff:	mov    edi,DWORD PTR [rbx]
   52501:	call   69f0 <dct_luma_16x16>
   52506:	mov    rdi,QWORD PTR [rsp+0x38]
   5250b:	mov    rdx,QWORD PTR [rip+0x3609e]        # 885b0 <img>
   52512:	mov    DWORD PTR [rdi+0x1cc],eax
   52518:	mov    eax,DWORD PTR [rdx+0x11c14]
   5251e:	test   eax,eax
   52520:	je     527d1 <Intra16x16_Mode_Decision+0x4a1>
   52526:	mov    esi,0x400
   5252b:	lea    r10,[rip+0x605ae]        # b2ae0 <resTrans_R>
   52532:	nop    WORD PTR [rax+rax*1+0x0]
   52538:	lea    rax,[rsi-0x400]
   5253f:	nop
   52540:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   52547:	lea    rdi,[rip+0x63952]        # b5ea0 <rec_resG>
   5254e:	mov    DWORD PTR [rdi+rax*1],ecx
   52551:	mov    ecx,DWORD PTR [r10+rax*1]
   52555:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   5255c:	add    rax,0x40
   52560:	cmp    rsi,rax
   52563:	jne    52540 <Intra16x16_Mode_Decision+0x210>
   52565:	add    rsi,0x4
   52569:	cmp    rsi,0x440
   52570:	jne    52538 <Intra16x16_Mode_Decision+0x208>
   52572:	xor    esi,esi
   52574:	xor    edi,edi
   52576:	call   7ea0 <dct_chroma>
   5257b:	mov    rdx,QWORD PTR [rip+0x3602e]        # 885b0 <img>
   52582:	mov    esi,0x400
   52587:	lea    r9,[rip+0x4e3d2]        # a0960 <resTrans_B>
   5258e:	mov    r8d,eax
   52591:	nop    DWORD PTR [rax+0x0]
   52598:	lea    rax,[rsi-0x400]
   5259f:	nop
   525a0:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   525a7:	lea    rdi,[rip+0x61772]        # b3d20 <rec_resR>
   525ae:	mov    DWORD PTR [rdi+rax*1],ecx
   525b1:	mov    ecx,DWORD PTR [r9+rax*1]
   525b5:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   525bc:	add    rax,0x40
   525c0:	cmp    rsi,rax
   525c3:	jne    525a0 <Intra16x16_Mode_Decision+0x270>
   525c5:	add    rsi,0x4
   525c9:	cmp    rsi,0x440
   525d0:	jne    52598 <Intra16x16_Mode_Decision+0x268>
   525d2:	mov    esi,r8d
   525d5:	mov    edi,0x1
   525da:	call   7ea0 <dct_chroma>
   525df:	mov    rsi,QWORD PTR [rip+0x35fca]        # 885b0 <img>
   525e6:	lea    r8,[rip+0x4df93]        # a0580 <rec_resB+0x40>
   525ed:	mov    r9d,eax
   525f0:	lea    rcx,[r8-0x40]
   525f4:	mov    rdi,rsi
   525f7:	nop    WORD PTR [rax+rax*1+0x0]
   52600:	xor    eax,eax
   52602:	nop    WORD PTR [rax+rax*1+0x0]
   52608:	mov    edx,DWORD PTR [rdi+rax*1+0x3338]
   5260f:	mov    DWORD PTR [rcx+rax*1],edx
   52612:	add    rax,0x40
   52616:	cmp    rax,0x400
   5261c:	jne    52608 <Intra16x16_Mode_Decision+0x2d8>
   5261e:	add    rcx,0x4
   52622:	add    rdi,0x4
   52626:	cmp    r8,rcx
   52629:	jne    52600 <Intra16x16_Mode_Decision+0x2d0>
   5262b:	movsxd rcx,DWORD PTR [rsp+0x44]
   52630:	mov    rdi,QWORD PTR [rsp+0x38]
   52635:	mov    eax,r9d
   52638:	xor    r12d,r12d
   5263b:	mov    rdx,QWORD PTR [rip+0x38366]        # 8a9a8 <enc_picture>
   52642:	shl    eax,0x4
   52645:	mov    QWORD PTR [rsp+0x10],0x0
   5264e:	shl    rcx,0x9
   52652:	add    DWORD PTR [rdi+0x1cc],eax
   52658:	mov    r9d,DWORD PTR [rsi+0x11bf0]
   5265f:	lea    rdi,[rsi+rcx*1]
   52663:	movsxd rcx,DWORD PTR [rbx]
   52666:	mov    rax,QWORD PTR [rdx+0x1940]
   5266d:	mov    QWORD PTR [rsp+0x18],rdi
   52672:	mov    r14d,DWORD PTR [rsi+0x11bec]
   52679:	shl    rcx,0x9
   5267d:	mov    rbx,QWORD PTR [rax]
   52680:	lea    r13,[rsi+rcx*1]
   52684:	movsxd rcx,DWORD PTR [rsp+0x4c]
   52689:	shl    rcx,0x3
   5268d:	add    rbx,rcx
   52690:	mov    QWORD PTR [rsp+0x30],rbx
   52695:	mov    rbx,QWORD PTR [rdx+0x1918]
   5269c:	add    rbx,rcx
   5269f:	add    rcx,QWORD PTR [rax+0x8]
   526a3:	movsxd rax,DWORD PTR [rsp+0x48]
   526a8:	mov    QWORD PTR [rsp+0x28],rbx
   526ad:	add    rax,rax
   526b0:	mov    QWORD PTR [rsp+0x20],rcx
   526b5:	mov    QWORD PTR [rsp+0x38],rax
   526ba:	nop    WORD PTR [rax+rax*1+0x0]
   526c0:	mov    rax,QWORD PTR [rsp+0x10]
   526c5:	mov    rsi,QWORD PTR [rsp+0x30]
   526ca:	xor    edx,edx
   526cc:	lea    rbx,[rip+0x637cd]        # b5ea0 <rec_resG>
   526d3:	mov    rdi,QWORD PTR [rsp+0x38]
   526d8:	lea    r11,[rip+0x61641]        # b3d20 <rec_resR>
   526df:	mov    r8,QWORD PTR [rsp+0x18]
   526e4:	mov    rcx,QWORD PTR [rsi+rax*2]
   526e8:	mov    rsi,QWORD PTR [rsp+0x28]
   526ed:	lea    rbp,[rbx+rax*1]
   526f1:	add    r11,rax
   526f4:	lea    rbx,[rip+0x4de45]        # a0540 <rec_resB>
   526fb:	add    rcx,rdi
   526fe:	add    rbx,rax
   52701:	mov    r15,rcx
   52704:	mov    rcx,QWORD PTR [rsi+rax*2]
   52708:	mov    rsi,QWORD PTR [rsp+0x20]
   5270d:	add    rcx,rdi
   52710:	add    rdi,QWORD PTR [rsi+rax*2]
   52714:	mov    QWORD PTR [rsp+0x8],rcx
   52719:	mov    QWORD PTR [rsp],rdi
   5271d:	nop    DWORD PTR [rax]
   52720:	mov    esi,DWORD PTR [rbx]
   52722:	mov    ecx,DWORD PTR [r11]
   52725:	mov    edi,DWORD PTR [rbp+0x0]
   52728:	mov    eax,esi
   5272a:	sar    eax,1
   5272c:	sub    edi,eax
   5272e:	mov    eax,ecx
   52730:	sar    eax,1
   52732:	mov    r10d,edi
   52735:	sub    r10d,eax
   52738:	movzx  eax,WORD PTR [r8+0x2138]
   52740:	add    eax,r10d
   52743:	cmovs  eax,r12d
   52747:	cmp    eax,r9d
   5274a:	cmovg  eax,r9d
   5274e:	add    esi,edi
   52750:	mov    WORD PTR [r15+rdx*1],ax
   52755:	movzx  eax,WORD PTR [r13+rdx*1+0x12b8]
   5275e:	add    esi,eax
   52760:	mov    rax,QWORD PTR [rsp+0x8]
   52765:	cmovs  esi,r12d
   52769:	cmp    esi,r14d
   5276c:	cmovg  esi,r14d
   52770:	add    ecx,r10d
   52773:	mov    WORD PTR [rax+rdx*1],si
   52777:	movzx  eax,WORD PTR [r8+0x2938]
   5277f:	mov    rsi,QWORD PTR [rsp]
   52783:	add    eax,ecx
   52785:	cmovs  eax,r12d
   52789:	cmp    eax,r9d
   5278c:	cmovg  eax,r9d
   52790:	add    rbp,0x40
   52794:	add    rbx,0x40
   52798:	add    r11,0x40
   5279c:	add    r8,0x20
   527a0:	mov    WORD PTR [rsi+rdx*1],ax
   527a4:	add    rdx,0x2
   527a8:	cmp    rdx,0x20
   527ac:	jne    52720 <Intra16x16_Mode_Decision+0x3f0>
   527b2:	add    QWORD PTR [rsp+0x10],0x4
   527b8:	mov    rax,QWORD PTR [rsp+0x10]
   527bd:	add    r13,0x20
   527c1:	add    QWORD PTR [rsp+0x18],0x2
   527c7:	cmp    rax,0x40
   527cb:	jne    526c0 <Intra16x16_Mode_Decision+0x390>
   527d1:	add    rsp,0x58
   527d5:	pop    rbx
   527d6:	pop    rbp
   527d7:	pop    r12
   527d9:	pop    r13
   527db:	pop    r14
   527dd:	pop    r15
   527df:	ret    
   527e0:	mov    rdi,rbx
   527e3:	call   2fa10 <find_sad_16x16>
   527e8:	mov    r8,QWORD PTR [rip+0x35dc1]        # 885b0 <img>
   527ef:	mov    edx,DWORD PTR [r8+0x11c14]
   527f6:	test   edx,edx
   527f8:	je     524ff <Intra16x16_Mode_Decision+0x1cf>
   527fe:	jmp    523ac <Intra16x16_Mode_Decision+0x7c>
   52803:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5280e:	xchg   ax,ax

0000000000052810 <SetMotionVectorsMB>:
   52810:	endbr64 
   52814:	push   r15
   52816:	push   r14
   52818:	push   r13
   5281a:	push   r12
   5281c:	mov    r12,rdi
   5281f:	push   rbp
   52820:	xor    ebp,ebp
   52822:	push   rbx
   52823:	sub    rsp,0x48
   52827:	mov    r9,QWORD PTR [rip+0x35d82]        # 885b0 <img>
   5282e:	mov    DWORD PTR [rsp+0x8],esi
   52832:	mov    rax,QWORD PTR [r9+0x118f0]
   52839:	mov    r13,QWORD PTR [r9+0x118f8]
   52840:	mov    QWORD PTR [rsp+0x28],rax
   52845:	mov    eax,ebp
   52847:	mov    QWORD PTR [rsp+0x18],rbp
   5284c:	xor    ebx,ebx
   5284e:	and    eax,0xfffffffe
   52851:	mov    DWORD PTR [rsp],eax
   52854:	lea    rax,[rbp*8+0x0]
   5285c:	mov    QWORD PTR [rsp+0x10],rax
   52861:	mov    rsi,QWORD PTR [rip+0x38140]        # 8a9a8 <enc_picture>
   52868:	mov    eax,ebx
   5286a:	mov    edx,DWORD PTR [r9+0x90]
   52871:	sar    eax,1
   52873:	add    eax,DWORD PTR [rsp]
   52876:	mov    r11d,DWORD PTR [r12+0x244]
   5287e:	mov    r10,QWORD PTR [rsi+0x1950]
   52885:	cdqe   
   52887:	add    edx,ebx
   52889:	lea    rax,[r12+rax*4]
   5288d:	movsxd rdx,edx
   52890:	mov    rcx,QWORD PTR [r10]
   52893:	movsxd rdi,DWORD PTR [rax+0x1d8]
   5289a:	mov    r8d,DWORD PTR [rax+0x1e8]
   528a1:	mov    r10,QWORD PTR [r10+0x8]
   528a5:	mov    eax,DWORD PTR [r9+0x94]
   528ac:	mov    rcx,QWORD PTR [rcx+rdx*8]
   528b0:	mov    r10,QWORD PTR [r10+rdx*8]
   528b4:	add    eax,ebp
   528b6:	cdqe   
   528b8:	movsx  r14,WORD PTR [rcx+rax*2]
   528bd:	movsx  r15,WORD PTR [r10+rax*2]
   528c2:	mov    rcx,r14
   528c5:	mov    r10,r15
   528c8:	test   r11d,r11d
   528cb:	je     528d7 <SetMotionVectorsMB+0xc7>
   528cd:	cmp    r8d,0x2
   528d1:	je     52b5a <SetMotionVectorsMB+0x34a>
   528d7:	mov    r11d,DWORD PTR [rsp+0x8]
   528dc:	test   r11d,r11d
   528df:	jne    52aca <SetMotionVectorsMB+0x2ba>
   528e5:	mov    rsi,QWORD PTR [rsi+0x1968]
   528ec:	mov    rsi,QWORD PTR [rsi]
   528ef:	mov    rdx,QWORD PTR [rsi+rdx*8]
   528f3:	mov    rax,QWORD PTR [rdx+rax*8]
   528f7:	test   r8d,r8d
   528fa:	js     52b4f <SetMotionVectorsMB+0x33f>
   52900:	movsx  rdx,cx
   52904:	shl    rdx,0x3
   52908:	mov    rcx,QWORD PTR [r13+rbx*8+0x0]
   5290d:	mov    rsi,QWORD PTR [rsp+0x10]
   52912:	mov    rcx,QWORD PTR [rcx+rsi*1]
   52916:	mov    rcx,QWORD PTR [rcx]
   52919:	mov    rdx,QWORD PTR [rcx+rdx*1]
   5291d:	mov    rdx,QWORD PTR [rdx+rdi*8]
   52921:	movzx  ecx,WORD PTR [rdx]
   52924:	mov    WORD PTR [rax],cx
   52927:	movzx  edx,WORD PTR [rdx+0x2]
   5292b:	mov    WORD PTR [rax+0x2],dx
   5292f:	add    rbx,0x1
   52933:	cmp    rbx,0x4
   52937:	jne    52861 <SetMotionVectorsMB+0x51>
   5293d:	mov    rbp,QWORD PTR [rsp+0x18]
   52942:	add    rbp,0x1
   52946:	cmp    rbp,0x4
   5294a:	jne    52845 <SetMotionVectorsMB+0x35>
   52950:	mov    r10d,DWORD PTR [r9+0x11ad0]
   52957:	test   r10d,r10d
   5295a:	je     52abb <SetMotionVectorsMB+0x2ab>
   52960:	mov    eax,DWORD PTR [r9+0x24]
   52964:	mov    rbx,QWORD PTR [rip+0x4e3f5]        # a0d60 <rdopt>
   5296b:	mov    QWORD PTR [rsp+0x30],r13
   52970:	mov    QWORD PTR [rsp+0x18],0x0
   52979:	mov    DWORD PTR [rsp+0x24],eax
   5297d:	lea    r15d,[rax-0x1]
   52981:	mov    QWORD PTR [rsp+0x38],rbx
   52986:	mov    QWORD PTR [rsp+0x10],0x0
   5298f:	mov    QWORD PTR [rsp+0x8],0x0
   52998:	mov    r9d,DWORD PTR [rsp+0x24]
   5299d:	test   r9d,r9d
   529a0:	jle    52a70 <SetMotionVectorsMB+0x260>
   529a6:	mov    rax,QWORD PTR [rsp+0x30]
   529ab:	mov    rbx,QWORD PTR [rsp+0x10]
   529b0:	mov    rsi,QWORD PTR [rsp+0x8]
   529b5:	mov    rdi,QWORD PTR [rsp+0x38]
   529ba:	mov    rax,QWORD PTR [rax]
   529bd:	mov    rcx,QWORD PTR [rsp+0x18]
   529c2:	mov    rax,QWORD PTR [rax+rbx*1]
   529c6:	mov    r14,QWORD PTR [rax+rsi*1]
   529ca:	mov    rax,QWORD PTR [rdi+0xca8]
   529d1:	mov    rax,QWORD PTR [rax+rcx*1]
   529d5:	mov    rax,QWORD PTR [rax+rbx*1]
   529d9:	mov    r13,QWORD PTR [rax+rsi*1]
   529dd:	mov    rax,QWORD PTR [rsp+0x28]
   529e2:	mov    rax,QWORD PTR [rax]
   529e5:	mov    rax,QWORD PTR [rax+rbx*1]
   529e9:	mov    r12,QWORD PTR [rax+rsi*1]
   529ed:	mov    rax,QWORD PTR [rdi+0xca0]
   529f4:	mov    rax,QWORD PTR [rax+rcx*1]
   529f8:	mov    rax,QWORD PTR [rax+rbx*1]
   529fc:	xor    ebx,ebx
   529fe:	mov    rbp,QWORD PTR [rax+rsi*1]
   52a02:	nop    WORD PTR [rax+rax*1+0x0]
   52a08:	mov    r11,QWORD PTR [r14+rbx*8]
   52a0c:	mov    r10,QWORD PTR [r13+rbx*8+0x0]
   52a11:	mov    QWORD PTR [rsp],rbx
   52a15:	xor    eax,eax
   52a17:	mov    r9,QWORD PTR [r12+rbx*8]
   52a1b:	mov    r8,QWORD PTR [rbp+rbx*8+0x0]
   52a20:	mov    rdi,QWORD PTR [r11+rax*1]
   52a24:	mov    rcx,QWORD PTR [r9+rax*1]
   52a28:	mov    rsi,QWORD PTR [r10+rax*1]
   52a2c:	movzx  edx,WORD PTR [rdi]
   52a2f:	mov    WORD PTR [rsi],dx
   52a32:	mov    rdx,QWORD PTR [r8+rax*1]
   52a36:	add    rax,0x8
   52a3a:	movzx  ebx,WORD PTR [rcx]
   52a3d:	mov    WORD PTR [rdx],bx
   52a40:	movzx  edi,WORD PTR [rdi+0x2]
   52a44:	mov    WORD PTR [rsi+0x2],di
   52a48:	movzx  ecx,WORD PTR [rcx+0x2]
   52a4c:	mov    WORD PTR [rdx+0x2],cx
   52a50:	cmp    rax,0x48
   52a54:	jne    52a20 <SetMotionVectorsMB+0x210>
   52a56:	mov    rbx,QWORD PTR [rsp]
   52a5a:	lea    rax,[rbx+0x1]
   52a5e:	cmp    r15,rbx
   52a61:	je     52a70 <SetMotionVectorsMB+0x260>
   52a63:	mov    rbx,rax
   52a66:	jmp    52a08 <SetMotionVectorsMB+0x1f8>
   52a68:	nop    DWORD PTR [rax+rax*1+0x0]
   52a70:	add    QWORD PTR [rsp+0x8],0x8
   52a76:	mov    rax,QWORD PTR [rsp+0x8]
   52a7b:	cmp    rax,0x10
   52a7f:	jne    52998 <SetMotionVectorsMB+0x188>
   52a85:	add    QWORD PTR [rsp+0x10],0x8
   52a8b:	mov    rax,QWORD PTR [rsp+0x10]
   52a90:	cmp    rax,0x20
   52a94:	jne    5298f <SetMotionVectorsMB+0x17f>
   52a9a:	add    QWORD PTR [rsp+0x18],0x8
   52aa0:	mov    rax,QWORD PTR [rsp+0x18]
   52aa5:	add    QWORD PTR [rsp+0x30],0x8
   52aab:	add    QWORD PTR [rsp+0x28],0x8
   52ab1:	cmp    rax,0x20
   52ab5:	jne    52986 <SetMotionVectorsMB+0x176>
   52abb:	add    rsp,0x48
   52abf:	pop    rbx
   52ac0:	pop    rbp
   52ac1:	pop    r12
   52ac3:	pop    r13
   52ac5:	pop    r14
   52ac7:	pop    r15
   52ac9:	ret    
   52aca:	cmp    r8d,0xffffffff
   52ace:	je     52b2b <SetMotionVectorsMB+0x31b>
   52ad0:	test   r8d,r8d
   52ad3:	jne    52b8b <SetMotionVectorsMB+0x37b>
   52ad9:	mov    r8,QWORD PTR [r13+rbx*8+0x0]
   52ade:	mov    r14,QWORD PTR [rsp+0x10]
   52ae3:	mov    r8,QWORD PTR [r8+r14*1]
   52ae7:	mov    r8,QWORD PTR [r8]
   52aea:	mov    rcx,QWORD PTR [r8+rcx*8]
   52aee:	mov    rdi,QWORD PTR [rcx+rdi*8]
   52af2:	mov    rcx,QWORD PTR [rsi+0x1968]
   52af9:	mov    rsi,QWORD PTR [rcx]
   52afc:	mov    rcx,QWORD PTR [rcx+0x8]
   52b00:	movzx  r8d,WORD PTR [rdi]
   52b04:	mov    rsi,QWORD PTR [rsi+rdx*8]
   52b08:	mov    rdx,QWORD PTR [rcx+rdx*8]
   52b0c:	mov    rsi,QWORD PTR [rsi+rax*8]
   52b10:	mov    rax,QWORD PTR [rdx+rax*8]
   52b14:	mov    WORD PTR [rsi],r8w
   52b18:	movzx  edi,WORD PTR [rdi+0x2]
   52b1c:	mov    WORD PTR [rsi+0x2],di
   52b20:	mov    DWORD PTR [rax],0x0
   52b26:	jmp    5292f <SetMotionVectorsMB+0x11f>
   52b2b:	mov    rcx,QWORD PTR [rsi+0x1968]
   52b32:	mov    rsi,QWORD PTR [rcx]
   52b35:	mov    rcx,QWORD PTR [rcx+0x8]
   52b39:	mov    rsi,QWORD PTR [rsi+rdx*8]
   52b3d:	mov    rdx,QWORD PTR [rcx+rdx*8]
   52b41:	mov    rsi,QWORD PTR [rsi+rax*8]
   52b45:	mov    rax,QWORD PTR [rdx+rax*8]
   52b49:	mov    DWORD PTR [rsi],0x0
   52b4f:	mov    DWORD PTR [rax],0x0
   52b55:	jmp    5292f <SetMotionVectorsMB+0x11f>
   52b5a:	cmp    DWORD PTR [r12+0x48],0x1
   52b60:	je     52be6 <SetMotionVectorsMB+0x3d6>
   52b66:	mov    r8d,DWORD PTR [rsp+0x8]
   52b6b:	test   r8d,r8d
   52b6e:	jne    52c0d <SetMotionVectorsMB+0x3fd>
   52b74:	mov    rsi,QWORD PTR [rsi+0x1968]
   52b7b:	mov    rsi,QWORD PTR [rsi]
   52b7e:	mov    rdx,QWORD PTR [rsi+rdx*8]
   52b82:	mov    rax,QWORD PTR [rdx+rax*8]
   52b86:	jmp    52900 <SetMotionVectorsMB+0xf0>
   52b8b:	cmp    r8d,0x1
   52b8f:	jne    52c7b <SetMotionVectorsMB+0x46b>
   52b95:	mov    rsi,QWORD PTR [rsi+0x1968]
   52b9c:	mov    r14,QWORD PTR [rsp+0x10]
   52ba1:	mov    rcx,QWORD PTR [rsi]
   52ba4:	mov    rsi,QWORD PTR [rsi+0x8]
   52ba8:	mov    rcx,QWORD PTR [rcx+rdx*8]
   52bac:	mov    rdx,QWORD PTR [rsi+rdx*8]
   52bb0:	mov    rcx,QWORD PTR [rcx+rax*8]
   52bb4:	mov    rax,QWORD PTR [rdx+rax*8]
   52bb8:	mov    DWORD PTR [rcx],0x0
   52bbe:	mov    rcx,QWORD PTR [r13+rbx*8+0x0]
   52bc3:	mov    rcx,QWORD PTR [rcx+r14*1]
   52bc7:	mov    rcx,QWORD PTR [rcx+0x8]
   52bcb:	mov    rcx,QWORD PTR [rcx+r10*8]
   52bcf:	mov    rcx,QWORD PTR [rcx+rdi*8]
   52bd3:	movzx  edx,WORD PTR [rcx]
   52bd6:	mov    WORD PTR [rax],dx
   52bd9:	movzx  edx,WORD PTR [rcx+0x2]
   52bdd:	mov    WORD PTR [rax+0x2],dx
   52be1:	jmp    5292f <SetMotionVectorsMB+0x11f>
   52be6:	mov    r14d,DWORD PTR [rsp+0x8]
   52beb:	mov    r13,QWORD PTR [r9+0x11908]
   52bf2:	cmp    r11d,0x1
   52bf6:	cmove  r13,QWORD PTR [r9+0x11900]
   52bfe:	test   r14d,r14d
   52c01:	je     52c9e <SetMotionVectorsMB+0x48e>
   52c07:	xor    r15d,r15d
   52c0a:	xor    r14d,r14d
   52c0d:	mov    rcx,QWORD PTR [r13+rbx*8+0x0]
   52c12:	mov    r11,QWORD PTR [rsp+0x10]
   52c17:	movsxd r14,r14d
   52c1a:	movsxd r15,r15d
   52c1d:	mov    r8,QWORD PTR [rcx+r11*1]
   52c21:	mov    rcx,QWORD PTR [r8]
   52c24:	mov    rcx,QWORD PTR [rcx+r14*8]
   52c28:	mov    r10,QWORD PTR [rcx+rdi*8]
   52c2c:	mov    rcx,QWORD PTR [rsi+0x1968]
   52c33:	mov    rsi,QWORD PTR [rcx]
   52c36:	movzx  r11d,WORD PTR [r10]
   52c3a:	mov    rcx,QWORD PTR [rcx+0x8]
   52c3e:	mov    rsi,QWORD PTR [rsi+rdx*8]
   52c42:	mov    rdx,QWORD PTR [rcx+rdx*8]
   52c46:	mov    rsi,QWORD PTR [rsi+rax*8]
   52c4a:	mov    rax,QWORD PTR [rdx+rax*8]
   52c4e:	mov    WORD PTR [rsi],r11w
   52c52:	movzx  r10d,WORD PTR [r10+0x2]
   52c57:	mov    WORD PTR [rsi+0x2],r10w
   52c5c:	mov    rsi,QWORD PTR [r8+0x8]
   52c60:	mov    rsi,QWORD PTR [rsi+r15*8]
   52c64:	mov    rsi,QWORD PTR [rsi+rdi*8]
   52c68:	movzx  edx,WORD PTR [rsi]
   52c6b:	mov    WORD PTR [rax],dx
   52c6e:	movzx  edx,WORD PTR [rsi+0x2]
   52c72:	mov    WORD PTR [rax+0x2],dx
   52c76:	jmp    5292f <SetMotionVectorsMB+0x11f>
   52c7b:	cmp    r8d,0x2
   52c7f:	je     52c0d <SetMotionVectorsMB+0x3fd>
   52c81:	mov    esi,0xff
   52c86:	lea    rdi,[rip+0x249eb]        # 77678 <b8_mode_table.7699+0x18>
   52c8d:	call   19180 <error>
   52c92:	mov    r9,QWORD PTR [rip+0x35917]        # 885b0 <img>
   52c99:	jmp    5292f <SetMotionVectorsMB+0x11f>
   52c9e:	mov    rcx,QWORD PTR [rsi+0x1968]
   52ca5:	mov    rcx,QWORD PTR [rcx]
   52ca8:	mov    rdx,QWORD PTR [rcx+rdx*8]
   52cac:	mov    rax,QWORD PTR [rdx+rax*8]
   52cb0:	xor    edx,edx
   52cb2:	jmp    52908 <SetMotionVectorsMB+0xf8>
   52cb7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000052cc0 <store_macroblock_parameters>:
   52cc0:	endbr64 
   52cc4:	push   r15
   52cc6:	xor    eax,eax
   52cc8:	push   r14
   52cca:	push   r13
   52ccc:	push   r12
   52cce:	push   rbp
   52ccf:	push   rbx
   52cd0:	mov    rbx,QWORD PTR [rip+0x358d9]        # 885b0 <img>
   52cd7:	mov    DWORD PTR [rip+0x8fa43],edi        # e2720 <best_mode>
   52cdd:	movsxd r10,DWORD PTR [rbx+0xc]
   52ce1:	mov    ebp,DWORD PTR [rbx+0x18]
   52ce4:	mov    DWORD PTR [rsp-0x4],edi
   52ce8:	imul   r10,r10,0x278
   52cef:	add    r10,QWORD PTR [rbx+0x3758]
   52cf6:	cmp    ebp,0x1
   52cf9:	sete   al
   52cfc:	mov    DWORD PTR [rsp-0x8],eax
   52d00:	mov    eax,DWORD PTR [r10+0x20c]
   52d07:	mov    DWORD PTR [rip+0x8ec13],eax        # e1920 <best_c_imode>
   52d0d:	mov    eax,DWORD PTR [rbx+0x11abc]
   52d13:	mov    DWORD PTR [rip+0x8e5c7],eax        # e12e0 <best_i16offset>
   52d19:	xor    eax,eax
   52d1b:	cmp    edi,0x1
   52d1e:	jne    52d27 <store_macroblock_parameters+0x67>
   52d20:	mov    eax,DWORD PTR [r10+0x244]
   52d27:	mov    DWORD PTR [rip+0x8c597],eax        # df2c4 <bi_pred_me>
   52d2d:	lea    rsi,[rip+0x8bacc]        # de800 <b8mode>
   52d34:	xor    eax,eax
   52d36:	lea    rcx,[rip+0x8c7c3]        # df500 <b8pdir>
   52d3d:	mov    edx,DWORD PTR [r10+rax*2+0x1d8]
   52d45:	mov    WORD PTR [rsi+rax*1],dx
   52d49:	mov    edx,DWORD PTR [r10+rax*2+0x1e8]
   52d51:	mov    WORD PTR [rcx+rax*1],dx
   52d55:	add    rax,0x2
   52d59:	cmp    rax,0x8
   52d5d:	jne    52d3d <store_macroblock_parameters+0x7d>
   52d5f:	movsxd rax,DWORD PTR [rbx+0x94]
   52d66:	movsxd r13,DWORD PTR [rbx+0x90]
   52d6d:	mov    esi,0x4
   52d72:	xor    r11d,r11d
   52d75:	mov    rcx,QWORD PTR [rbx+0x68]
   52d79:	lea    r9,[rip+0x8f540]        # e22c0 <b4_ipredmode>
   52d80:	lea    r8,[rip+0x8ccd9]        # dfa60 <b4_intra_pred_modes>
   52d87:	mov    QWORD PTR [rsp-0x10],rax
   52d8c:	shl    r13,0x3
   52d90:	lea    r12,[rax*4+0x0]
   52d98:	add    rcx,r13
   52d9b:	lea    rdi,[r11+r12*1]
   52d9f:	mov    rax,r11
   52da2:	mov    rdx,QWORD PTR [rcx+rax*8]
   52da6:	mov    edx,DWORD PTR [rdx+rdi*1]
   52da9:	mov    DWORD PTR [r9+rax*4],edx
   52dad:	mov    edx,DWORD PTR [r10+rax*4+0x14c]
   52db5:	mov    DWORD PTR [r8+rax*4],edx
   52db9:	add    rax,0x1
   52dbd:	cmp    rax,rsi
   52dc0:	jne    52da2 <store_macroblock_parameters+0xe2>
   52dc2:	add    r11,0x4
   52dc6:	sub    rcx,0x20
   52dca:	lea    rsi,[rax+0x4]
   52dce:	cmp    rax,0x10
   52dd2:	jne    52d9b <store_macroblock_parameters+0xdb>
   52dd4:	mov    r9,QWORD PTR [rbx+0x70]
   52dd8:	mov    rcx,r10
   52ddb:	xor    r8d,r8d
   52dde:	lea    rsi,[rip+0x6391b]        # b6700 <b8_ipredmode8x8>
   52de5:	lea    rdx,[rip+0x4c414]        # 9f200 <b8_intra_pred_modes8x8>
   52dec:	add    r9,r13
   52def:	mov    r11,QWORD PTR [r9]
   52df2:	xor    eax,eax
   52df4:	add    r11,r12
   52df7:	mov    edi,DWORD PTR [r11+rax*1]
   52dfb:	mov    DWORD PTR [rsi+rax*1],edi
   52dfe:	mov    edi,DWORD PTR [rcx+rax*1+0x18c]
   52e05:	mov    DWORD PTR [rdx+rax*1],edi
   52e08:	add    rax,0x4
   52e0c:	cmp    rax,0x10
   52e10:	jne    52df7 <store_macroblock_parameters+0x137>
   52e12:	add    r8d,0x4
   52e16:	add    r9,0x8
   52e1a:	add    rsi,0x10
   52e1e:	add    rcx,0x10
   52e22:	add    rdx,0x10
   52e26:	cmp    r8d,0x10
   52e2a:	jne    52def <store_macroblock_parameters+0x12f>
   52e2c:	movsxd rax,DWORD PTR [rbx+0x9c]
   52e33:	mov    r14,QWORD PTR [rip+0x37b6e]        # 8a9a8 <enc_picture>
   52e3a:	lea    rdx,[rip+0x8fd1f]        # e2b60 <rec_mbY>
   52e41:	movsxd rsi,DWORD PTR [rbx+0x98]
   52e48:	lea    r8,[rdx+0x200]
   52e4f:	shl    rax,0x3
   52e53:	mov    rdi,QWORD PTR [r14+0x1918]
   52e5a:	mov    QWORD PTR [rsp-0x30],rax
   52e5f:	add    rsi,rsi
   52e62:	add    rdi,rax
   52e65:	nop    DWORD PTR [rax]
   52e68:	mov    r9,QWORD PTR [rdi]
   52e6b:	xor    eax,eax
   52e6d:	add    r9,rsi
   52e70:	movzx  ecx,WORD PTR [r9+rax*1]
   52e75:	mov    WORD PTR [rdx+rax*1],cx
   52e79:	add    rax,0x2
   52e7d:	cmp    rax,0x20
   52e81:	jne    52e70 <store_macroblock_parameters+0x1b0>
   52e83:	add    rdx,0x20
   52e87:	add    rdi,0x8
   52e8b:	cmp    r8,rdx
   52e8e:	jne    52e68 <store_macroblock_parameters+0x1a8>
   52e90:	mov    eax,DWORD PTR [rbx+0x11bfc]
   52e96:	test   eax,eax
   52e98:	je     52f4c <store_macroblock_parameters+0x28c>
   52e9e:	mov    eax,DWORD PTR [rbx+0x11c08]
   52ea4:	test   eax,eax
   52ea6:	jle    52f4c <store_macroblock_parameters+0x28c>
   52eac:	mov    r15d,DWORD PTR [rbx+0x11c04]
   52eb3:	mov    QWORD PTR [rsp-0x28],rsi
   52eb8:	xor    r12d,r12d
   52ebb:	mov    esi,eax
   52ebd:	lea    r8,[rip+0x8ff5c]        # e2e20 <rec_mbU>
   52ec4:	lea    rdi,[rip+0x8c875]        # df740 <rec_mbV>
   52ecb:	lea    r11d,[r15-0x1]
   52ecf:	test   r15d,r15d
   52ed2:	jle    52f36 <store_macroblock_parameters+0x276>
   52ed4:	mov    rdx,QWORD PTR [r14+0x1940]
   52edb:	mov    eax,DWORD PTR [rbx+0xa4]
   52ee1:	movsxd rcx,DWORD PTR [rbx+0xa0]
   52ee8:	mov    r9,QWORD PTR [rdx]
   52eeb:	add    eax,r12d
   52eee:	mov    QWORD PTR [rsp-0x38],rdx
   52ef3:	cdqe   
   52ef5:	add    rcx,rcx
   52ef8:	mov    rdx,QWORD PTR [r9+rax*8]
   52efc:	add    rdx,rcx
   52eff:	mov    r9,rdx
   52f02:	mov    rdx,QWORD PTR [rsp-0x38]
   52f07:	mov    rdx,QWORD PTR [rdx+0x8]
   52f0b:	add    rcx,QWORD PTR [rdx+rax*8]
   52f0f:	xor    eax,eax
   52f11:	nop    DWORD PTR [rax+0x0]
   52f18:	movzx  edx,WORD PTR [r9+rax*2]
   52f1d:	mov    WORD PTR [r8+rax*2],dx
   52f22:	movzx  edx,WORD PTR [rcx+rax*2]
   52f26:	mov    WORD PTR [rdi+rax*2],dx
   52f2a:	mov    rdx,rax
   52f2d:	add    rax,0x1
   52f31:	cmp    r11,rdx
   52f34:	jne    52f18 <store_macroblock_parameters+0x258>
   52f36:	add    r12d,0x1
   52f3a:	add    r8,0x20
   52f3e:	add    rdi,0x20
   52f42:	cmp    esi,r12d
   52f45:	jne    52ecf <store_macroblock_parameters+0x20f>
   52f47:	mov    rsi,QWORD PTR [rsp-0x28]
   52f4c:	mov    rax,QWORD PTR [rip+0x35665]        # 885b8 <input>
   52f53:	cmp    DWORD PTR [rax+0x9a0],0x2
   52f5a:	jne    52f65 <store_macroblock_parameters+0x2a5>
   52f5c:	cmp    ebp,0x1
   52f5f:	jne    53062 <store_macroblock_parameters+0x3a2>
   52f65:	mov    eax,DWORD PTR [rsp-0x8]
   52f69:	or     eax,DWORD PTR [rsp-0x4]
   52f6d:	jne    5300a <store_macroblock_parameters+0x34a>
   52f73:	mov    DWORD PTR [rip+0x8c58b],0x0        # df508 <cbp>
   52f7d:	mov    QWORD PTR [rip+0x8c798],0x0        # df720 <cbp_blk>
   52f88:	mov    eax,DWORD PTR [r10+0x23c]
   52f8f:	mov    r10,QWORD PTR [r14+0x1950]
   52f96:	lea    r8,[rip+0x8f2e3]        # e2280 <brefframe>
   52f9d:	lea    rdi,[rip+0x8c2fc]        # df2a0 <frefframe>
   52fa4:	mov    rcx,QWORD PTR [rsp-0x10]
   52fa9:	lea    r11,[r8+0x20]
   52fad:	mov    DWORD PTR [rip+0x8f34d],eax        # e2300 <luma_transform_size_8x8_flag>
   52fb3:	mov    r9,QWORD PTR [r10]
   52fb6:	add    rcx,rcx
   52fb9:	mov    rdx,r13
   52fbc:	xor    eax,eax
   52fbe:	mov    rsi,QWORD PTR [r9+rdx*1]
   52fc2:	movzx  esi,WORD PTR [rsi+rcx*1]
   52fc6:	mov    WORD PTR [rdi+rax*2],si
   52fca:	cmp    ebp,0x1
   52fcd:	jne    52fe0 <store_macroblock_parameters+0x320>
   52fcf:	mov    rsi,QWORD PTR [r10+0x8]
   52fd3:	mov    rsi,QWORD PTR [rsi+rdx*1]
   52fd7:	movzx  esi,WORD PTR [rsi+rcx*1]
   52fdb:	mov    WORD PTR [r8+rax*2],si
   52fe0:	add    rax,0x1
   52fe4:	add    rdx,0x8
   52fe8:	cmp    rax,0x4
   52fec:	jne    52fbe <store_macroblock_parameters+0x2fe>
   52fee:	add    r8,0x8
   52ff2:	add    rcx,0x2
   52ff6:	add    rdi,0x8
   52ffa:	cmp    r11,r8
   52ffd:	jne    52fb9 <store_macroblock_parameters+0x2f9>
   52fff:	pop    rbx
   53000:	pop    rbp
   53001:	pop    r12
   53003:	pop    r13
   53005:	pop    r14
   53007:	pop    r15
   53009:	ret    
   5300a:	mov    rax,QWORD PTR [rip+0x3614f]        # 89160 <cofAC>
   53011:	mov    rdx,QWORD PTR [rbx+0x3738]
   53018:	mov    QWORD PTR [rbx+0x3738],rax
   5301f:	mov    rax,QWORD PTR [rip+0x3612a]        # 89150 <cofDC>
   53026:	mov    QWORD PTR [rip+0x36133],rdx        # 89160 <cofAC>
   5302d:	mov    rdx,QWORD PTR [rbx+0x3740]
   53034:	mov    QWORD PTR [rbx+0x3740],rax
   5303b:	mov    eax,DWORD PTR [r10+0x1cc]
   53042:	mov    QWORD PTR [rip+0x36107],rdx        # 89150 <cofDC>
   53049:	mov    DWORD PTR [rip+0x8c4b9],eax        # df508 <cbp>
   5304f:	mov    rax,QWORD PTR [r10+0x1d0]
   53056:	mov    QWORD PTR [rip+0x8c6c3],rax        # df720 <cbp_blk>
   5305d:	jmp    52f88 <store_macroblock_parameters+0x2c8>
   53062:	mov    eax,DWORD PTR [rax+0xb58]
   53068:	test   eax,eax
   5306a:	jle    52f65 <store_macroblock_parameters+0x2a5>
   53070:	mov    rdx,QWORD PTR [rip+0x35521]        # 88598 <decs>
   53077:	sub    eax,0x1
   5307a:	xor    r15d,r15d
   5307d:	mov    QWORD PTR [rsp-0x18],rax
   53082:	mov    rax,QWORD PTR [rsp-0x30]
   53087:	mov    rdi,QWORD PTR [rdx+0x8]
   5308b:	lea    r12,[rax+0x80]
   53092:	mov    QWORD PTR [rsp-0x28],rdi
   53097:	mov    rdi,QWORD PTR [rdx+0x18]
   5309b:	mov    QWORD PTR [rsp-0x20],rdi
   530a0:	lea    rdi,[rsi+0x20]
   530a4:	mov    rax,QWORD PTR [rsp-0x28]
   530a9:	mov    r8,QWORD PTR [rsp-0x30]
   530ae:	mov    r11,QWORD PTR [rax+r15*8]
   530b2:	mov    rax,QWORD PTR [rsp-0x20]
   530b7:	mov    r9,QWORD PTR [rax+r15*8]
   530bb:	nop    DWORD PTR [rax+rax*1+0x0]
   530c0:	mov    rcx,QWORD PTR [r11+r8*1]
   530c4:	mov    rdx,QWORD PTR [r9+r8*1]
   530c8:	mov    QWORD PTR [rsp-0x38],rsi
   530cd:	mov    rax,rsi
   530d0:	movzx  esi,WORD PTR [rcx+rax*1]
   530d4:	mov    WORD PTR [rdx+rax*1],si
   530d8:	add    rax,0x2
   530dc:	cmp    rdi,rax
   530df:	jne    530d0 <store_macroblock_parameters+0x410>
   530e1:	add    r8,0x8
   530e5:	mov    rsi,QWORD PTR [rsp-0x38]
   530ea:	cmp    r12,r8
   530ed:	jne    530c0 <store_macroblock_parameters+0x400>
   530ef:	lea    rax,[r15+0x1]
   530f3:	cmp    QWORD PTR [rsp-0x18],r15
   530f8:	je     52f65 <store_macroblock_parameters+0x2a5>
   530fe:	mov    r15,rax
   53101:	jmp    530a4 <store_macroblock_parameters+0x3e4>
   53103:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5310e:	xchg   ax,ax

0000000000053110 <SetRefAndMotionVectors>:
   53110:	endbr64 
   53114:	push   r15
   53116:	lea    eax,[rsi-0x1]
   53119:	push   r14
   5311b:	mov    r14d,edx
   5311e:	mov    edx,edi
   53120:	push   r13
   53122:	push   r12
   53124:	push   rbp
   53125:	push   rbx
   53126:	sub    rsp,0x18
   5312a:	cmp    eax,0x3
   5312d:	mov    eax,0x4
   53132:	mov    r13,QWORD PTR [rip+0x35477]        # 885b0 <img>
   53139:	cmovb  eax,esi
   5313c:	shr    edx,0x1f
   5313f:	mov    DWORD PTR [rsp-0x50],ecx
   53143:	add    edx,edi
   53145:	mov    DWORD PTR [rsp-0x70],esi
   53149:	and    edx,0xfffffffe
   5314c:	cdqe   
   5314e:	mov    DWORD PTR [rsp-0x30],r8d
   53153:	mov    r15d,edx
   53156:	mov    edx,edi
   53158:	shr    edx,0x1f
   5315b:	add    edi,edx
   5315d:	and    edi,0x1
   53160:	sub    edi,edx
   53162:	mov    rdx,QWORD PTR [rip+0x3544f]        # 885b8 <input>
   53169:	add    edi,edi
   5316b:	mov    ecx,DWORD PTR [rdx+rax*8+0x94]
   53172:	mov    DWORD PTR [rsp-0x4c],edi
   53176:	add    edi,DWORD PTR [rdx+rax*8+0x90]
   5317d:	movsxd rdx,DWORD PTR [r13+0xc]
   53181:	add    ecx,r15d
   53184:	mov    DWORD PTR [rsp-0x74],edi
   53188:	mov    rdi,QWORD PTR [r13+0x3758]
   5318f:	mov    DWORD PTR [rsp-0x2c],ecx
   53193:	mov    rcx,rdx
   53196:	imul   rdx,rdx,0x278
   5319d:	mov    eax,DWORD PTR [r13+0x11ad0]
   531a4:	add    rdi,rdx
   531a7:	mov    QWORD PTR [rsp-0x48],rdi
   531ac:	test   eax,eax
   531ae:	je     531be <SetRefAndMotionVectors+0xae>
   531b0:	mov    eax,DWORD PTR [rdi+0x214]
   531b6:	test   eax,eax
   531b8:	jne    53317 <SetRefAndMotionVectors+0x207>
   531be:	test   r14d,r14d
   531c1:	js     5332e <SetRefAndMotionVectors+0x21e>
   531c7:	cmp    DWORD PTR [r13+0x18],0x1
   531cc:	je     53440 <SetRefAndMotionVectors+0x330>
   531d2:	cmp    r15d,DWORD PTR [rsp-0x2c]
   531d7:	jge    53308 <SetRefAndMotionVectors+0x1f8>
   531dd:	cdqe   
   531df:	movsxd rdx,DWORD PTR [rsp-0x50]
   531e4:	movsxd rdi,DWORD PTR [rsp-0x70]
   531e9:	movsxd r11,r15d
   531ec:	mov    rcx,rax
   531ef:	mov    r10,QWORD PTR [rip+0x377b2]        # 8a9a8 <enc_picture>
   531f6:	mov    QWORD PTR [rsp-0x68],r13
   531fb:	shl    r11,0x3
   531ff:	shl    rcx,0x5
   53203:	mov    ebx,edx
   53205:	mov    DWORD PTR [rsp-0x50],r15d
   5320a:	shl    rdi,0x3
   5320e:	lea    rsi,[rdx*8+0x0]
   53216:	add    rax,rcx
   53219:	movsx  rdx,dx
   5321d:	mov    r15d,ebx
   53220:	lea    r14,[rdx+rax*1+0x2]
   53225:	mov    r13,rsi
   53228:	nop    DWORD PTR [rax+rax*1+0x0]
   53230:	mov    esi,DWORD PTR [rsp-0x74]
   53234:	cmp    DWORD PTR [rsp-0x4c],esi
   53238:	jge    532f1 <SetRefAndMotionVectors+0x1e1>
   5323e:	mov    rdx,QWORD PTR [r10+0x1968]
   53245:	mov    rcx,QWORD PTR [rsp-0x68]
   5324a:	mov    r9d,DWORD PTR [rsp-0x50]
   5324f:	movsxd rax,DWORD PTR [rsp-0x4c]
   53254:	mov    rbp,QWORD PTR [rdx]
   53257:	mov    rdx,QWORD PTR [r10+0x1950]
   5325e:	movsxd r8,DWORD PTR [rcx+0x90]
   53265:	add    r9d,DWORD PTR [rcx+0x94]
   5326c:	mov    rbx,QWORD PTR [rdx]
   5326f:	mov    rdx,QWORD PTR [r10+0x1958]
   53276:	movsxd r9,r9d
   53279:	shl    r8,0x3
   5327d:	mov    r12,QWORD PTR [rcx+0x118f8]
   53284:	lea    rsi,[r9*8+0x0]
   5328c:	add    r9,r9
   5328f:	add    rbp,r8
   53292:	add    rbx,r8
   53295:	add    r8,QWORD PTR [rdx]
   53298:	mov    QWORD PTR [rsp-0x70],r8
   5329d:	nop    DWORD PTR [rax]
   532a0:	mov    rdx,QWORD PTR [r12+rax*8]
   532a4:	mov    rdx,QWORD PTR [rdx+r11*1]
   532a8:	mov    rdx,QWORD PTR [rdx]
   532ab:	mov    rdx,QWORD PTR [rdx+r13*1]
   532af:	mov    rcx,QWORD PTR [rdx+rdi*1]
   532b3:	mov    rdx,QWORD PTR [rbp+rax*8+0x0]
   532b8:	movzx  r8d,WORD PTR [rcx]
   532bc:	mov    rdx,QWORD PTR [rdx+rsi*1]
   532c0:	mov    WORD PTR [rdx],r8w
   532c4:	movzx  ecx,WORD PTR [rcx+0x2]
   532c8:	mov    WORD PTR [rdx+0x2],cx
   532cc:	mov    rdx,QWORD PTR [rbx+rax*8]
   532d0:	mov    rcx,QWORD PTR [r10+r14*8+0x8]
   532d5:	mov    WORD PTR [rdx+r9*1],r15w
   532da:	mov    rdx,QWORD PTR [rsp-0x70]
   532df:	mov    rdx,QWORD PTR [rdx+rax*8]
   532e3:	add    rax,0x1
   532e7:	mov    QWORD PTR [rdx+rsi*1],rcx
   532eb:	cmp    DWORD PTR [rsp-0x74],eax
   532ef:	jg     532a0 <SetRefAndMotionVectors+0x190>
   532f1:	add    DWORD PTR [rsp-0x50],0x1
   532f6:	add    r11,0x8
   532fa:	mov    eax,DWORD PTR [rsp-0x50]
   532fe:	cmp    DWORD PTR [rsp-0x2c],eax
   53302:	jne    53230 <SetRefAndMotionVectors+0x120>
   53308:	add    rsp,0x18
   5330c:	pop    rbx
   5330d:	pop    rbp
   5330e:	pop    r12
   53310:	pop    r13
   53312:	pop    r14
   53314:	pop    r15
   53316:	ret    
   53317:	and    ecx,0x1
   5331a:	cmp    ecx,0x1
   5331d:	sbb    eax,eax
   5331f:	and    eax,0xfffffffe
   53322:	add    eax,0x4
   53325:	test   r14d,r14d
   53328:	jns    531c7 <SetRefAndMotionVectors+0xb7>
   5332e:	cmp    r15d,DWORD PTR [rsp-0x2c]
   53333:	jge    53308 <SetRefAndMotionVectors+0x1f8>
   53335:	movsxd r14,DWORD PTR [rsp-0x4c]
   5333a:	mov    edi,DWORD PTR [rsp-0x74]
   5333e:	mov    r12,QWORD PTR [rip+0x37663]        # 8a9a8 <enc_picture>
   53345:	mov    rax,r14
   53348:	not    eax
   5334a:	add    eax,edi
   5334c:	mov    QWORD PTR [rsp-0x70],rax
   53351:	nop    DWORD PTR [rax+0x0]
   53358:	mov    edi,DWORD PTR [rsp-0x74]
   5335c:	cmp    DWORD PTR [rsp-0x4c],edi
   53360:	jge    53422 <SetRefAndMotionVectors+0x312>
   53366:	mov    rax,QWORD PTR [r12+0x1968]
   5336e:	mov    ecx,DWORD PTR [r13+0x94]
   53375:	movsxd rsi,DWORD PTR [r13+0x90]
   5337c:	mov    rbp,QWORD PTR [rax]
   5337f:	mov    rbx,QWORD PTR [rax+0x8]
   53383:	add    ecx,r15d
   53386:	mov    rax,QWORD PTR [r12+0x1950]
   5338e:	movsxd rcx,ecx
   53391:	lea    rdi,[rsi+r14*1+0x1]
   53396:	add    rdi,QWORD PTR [rsp-0x70]
   5339b:	lea    rdx,[rcx*8+0x0]
   533a3:	shl    rdi,0x3
   533a7:	add    rcx,rcx
   533aa:	mov    r11,QWORD PTR [rax]
   533ad:	mov    r10,QWORD PTR [rax+0x8]
   533b1:	mov    rax,QWORD PTR [r12+0x1958]
   533b9:	mov    r9,QWORD PTR [rax]
   533bc:	mov    r8,QWORD PTR [rax+0x8]
   533c0:	lea    rax,[r14+rsi*1]
   533c4:	shl    rax,0x3
   533c8:	nop    DWORD PTR [rax+rax*1+0x0]
   533d0:	mov    rsi,QWORD PTR [rbp+rax*1+0x0]
   533d5:	mov    rsi,QWORD PTR [rsi+rdx*1]
   533d9:	mov    DWORD PTR [rsi],0x0
   533df:	mov    rsi,QWORD PTR [rbx+rax*1]
   533e3:	mov    rsi,QWORD PTR [rsi+rdx*1]
   533e7:	mov    DWORD PTR [rsi],0x0
   533ed:	mov    rsi,QWORD PTR [r11+rax*1]
   533f1:	mov    WORD PTR [rsi+rcx*1],0xffff
   533f7:	mov    rsi,QWORD PTR [r10+rax*1]
   533fb:	mov    WORD PTR [rsi+rcx*1],0xffff
   53401:	mov    rsi,QWORD PTR [r9+rax*1]
   53405:	mov    QWORD PTR [rsi+rdx*1],0xffffffffffffffff
   5340d:	mov    rsi,QWORD PTR [r8+rax*1]
   53411:	add    rax,0x8
   53415:	mov    QWORD PTR [rsi+rdx*1],0xffffffffffffffff
   5341d:	cmp    rdi,rax
   53420:	jne    533d0 <SetRefAndMotionVectors+0x2c0>
   53422:	add    r15d,0x1
   53426:	cmp    DWORD PTR [rsp-0x2c],r15d
   5342b:	jne    53358 <SetRefAndMotionVectors+0x248>
   53431:	add    rsp,0x18
   53435:	pop    rbx
   53436:	pop    rbp
   53437:	pop    r12
   53439:	pop    r13
   5343b:	pop    r14
   5343d:	pop    r15
   5343f:	ret    
   53440:	cmp    r15d,DWORD PTR [rsp-0x2c]
   53445:	jge    53308 <SetRefAndMotionVectors+0x1f8>
   5344b:	movsxd rdx,DWORD PTR [rsp-0x70]
   53450:	mov    rdi,QWORD PTR [rip+0x62a21]        # b5e78 <direct_pdir>
   53457:	mov    QWORD PTR [rsp-0x60],r13
   5345c:	mov    r12,QWORD PTR [rip+0x4bc35]        # 9f098 <direct_ref_idx>
   53463:	lea    rcx,[rdx*8+0x0]
   5346b:	movsxd rdx,r15d
   5346e:	mov    QWORD PTR [rsp-0x28],rdi
   53473:	mov    rdi,QWORD PTR [rip+0x3752e]        # 8a9a8 <enc_picture>
   5347a:	mov    QWORD PTR [rsp-0x38],rcx
   5347f:	lea    rcx,[rdx*8+0x0]
   53487:	movsxd rdx,DWORD PTR [rsp-0x4c]
   5348c:	mov    QWORD PTR [rsp-0x68],rcx
   53491:	lea    rcx,[rdx*8+0x0]
   53499:	lea    edx,[rax+0x1]
   5349c:	cdqe   
   5349e:	mov    QWORD PTR [rsp-0x58],rdi
   534a3:	movsxd rdx,edx
   534a6:	mov    QWORD PTR [rsp+0x8],rcx
   534ab:	mov    rcx,rdx
   534ae:	shl    rcx,0x5
   534b2:	add    rcx,rdx
   534b5:	mov    rdx,rax
   534b8:	shl    rdx,0x5
   534bc:	lea    rdi,[rdi+rcx*8]
   534c0:	mov    QWORD PTR [rsp-0x18],rcx
   534c5:	add    rax,rdx
   534c8:	mov    QWORD PTR [rsp+0x10],rdi
   534cd:	mov    QWORD PTR [rsp-0x20],rax
   534d2:	nop    WORD PTR [rax+rax*1+0x0]
   534d8:	mov    edi,DWORD PTR [rsp-0x74]
   534dc:	cmp    DWORD PTR [rsp-0x4c],edi
   534e0:	jge    5377c <SetRefAndMotionVectors+0x66c>
   534e6:	mov    rbx,QWORD PTR [rsp-0x20]
   534eb:	mov    rdi,QWORD PTR [rsp-0x60]
   534f0:	mov    QWORD PTR [rsp-0x40],r12
   534f5:	mov    rsi,QWORD PTR [rsp-0x58]
   534fa:	mov    rdx,QWORD PTR [rsp+0x8]
   534ff:	shl    rbx,0x3
   53503:	mov    ecx,DWORD PTR [rdi+0x94]
   53509:	mov    r13d,DWORD PTR [rdi+0x90]
   53510:	mov    r8,QWORD PTR [rsi+0x1968]
   53517:	mov    eax,DWORD PTR [rsp-0x4c]
   5351b:	mov    QWORD PTR [rsp-0x10],rbx
   53520:	mov    rdi,QWORD PTR [rsi+0x1950]
   53527:	mov    rsi,QWORD PTR [rsi+0x1958]
   5352e:	jmp    53673 <SetRefAndMotionVectors+0x563>
   53533:	nop    DWORD PTR [rax+rax*1+0x0]
   53538:	mov    rbx,QWORD PTR [rsp-0x48]
   5353d:	mov    r9d,DWORD PTR [rbx+0x244]
   53544:	test   r9d,r9d
   53547:	je     537a0 <SetRefAndMotionVectors+0x690>
   5354d:	cmp    DWORD PTR [rsp-0x70],0x1
   53552:	jne    537a0 <SetRefAndMotionVectors+0x690>
   53558:	test   r11b,r11b
   5355b:	je     537a0 <SetRefAndMotionVectors+0x690>
   53561:	mov    rbx,QWORD PTR [rsp-0x60]
   53566:	cmp    r9d,0x1
   5356a:	mov    r11,QWORD PTR [rbx+0x11900]
   53571:	mov    r10,QWORD PTR [rbx+0x11908]
   53578:	mov    rbx,QWORD PTR [rsp-0x68]
   5357d:	mov    QWORD PTR [rsp],r10
   53581:	cmove  r10,r11
   53585:	mov    QWORD PTR [rsp-0x8],r11
   5358a:	lea    r11d,[rax+r13*1]
   5358e:	mov    r10,QWORD PTR [r10+rdx*1]
   53592:	movsxd r11,r11d
   53595:	mov    r10,QWORD PTR [r10+rbx*1]
   53599:	mov    rbx,QWORD PTR [r8]
   5359c:	mov    r10,QWORD PTR [r10]
   5359f:	mov    rbx,QWORD PTR [rbx+r11*8]
   535a3:	mov    r10,QWORD PTR [r10]
   535a6:	mov    rbp,QWORD PTR [r10+0x8]
   535aa:	lea    r10d,[r15+rcx*1]
   535ae:	movsxd r10,r10d
   535b1:	mov    rbx,QWORD PTR [rbx+r10*8]
   535b5:	movzx  r12d,WORD PTR [rbp+0x0]
   535ba:	mov    WORD PTR [rbx],r12w
   535be:	movzx  ebp,WORD PTR [rbp+0x2]
   535c2:	mov    WORD PTR [rbx+0x2],bp
   535c6:	mov    rbx,QWORD PTR [rdi]
   535c9:	xor    ebp,ebp
   535cb:	mov    rbx,QWORD PTR [rbx+r11*8]
   535cf:	mov    WORD PTR [rbx+r10*2],bp
   535d4:	mov    rbx,QWORD PTR [rsp-0x58]
   535d9:	mov    rbp,QWORD PTR [rsp-0x10]
   535de:	mov    rbp,QWORD PTR [rbx+rbp*1+0x18]
   535e3:	mov    rbx,QWORD PTR [rsi]
   535e6:	mov    r11,QWORD PTR [rbx+r11*8]
   535ea:	mov    QWORD PTR [r11+r10*8],rbp
   535ee:	cmp    r9d,0x1
   535f2:	mov    r9,QWORD PTR [rsp]
   535f6:	mov    r11,QWORD PTR [r8+0x8]
   535fa:	lea    r10d,[rax+r13*1]
   535fe:	cmove  r9,QWORD PTR [rsp-0x8]
   53604:	mov    rbx,QWORD PTR [rsp-0x68]
   53609:	movsxd r10,r10d
   5360c:	mov    r11,QWORD PTR [r11+r10*8]
   53610:	mov    r9,QWORD PTR [r9+rdx*1]
   53614:	mov    r9,QWORD PTR [r9+rbx*1]
   53618:	mov    r9,QWORD PTR [r9+0x8]
   5361c:	mov    r9,QWORD PTR [r9]
   5361f:	mov    rbx,QWORD PTR [r9+0x8]
   53623:	lea    r9d,[r15+rcx*1]
   53627:	movsxd r9,r9d
   5362a:	movzx  ebp,WORD PTR [rbx]
   5362d:	mov    r11,QWORD PTR [r11+r9*8]
   53631:	mov    WORD PTR [r11],bp
   53635:	movzx  ebx,WORD PTR [rbx+0x2]
   53639:	xor    ebp,ebp
   5363b:	mov    WORD PTR [r11+0x2],bx
   53640:	mov    r11,QWORD PTR [rdi+0x8]
   53644:	mov    rbx,QWORD PTR [rsp+0x10]
   53649:	mov    r11,QWORD PTR [r11+r10*8]
   5364d:	mov    rbx,QWORD PTR [rbx+0x18]
   53651:	mov    WORD PTR [r11+r9*2],bp
   53656:	mov    r11,QWORD PTR [rsi+0x8]
   5365a:	mov    r10,QWORD PTR [r11+r10*8]
   5365e:	mov    QWORD PTR [r10+r9*8],rbx
   53662:	add    eax,0x1
   53665:	add    rdx,0x8
   53669:	cmp    DWORD PTR [rsp-0x74],eax
   5366d:	je     53777 <SetRefAndMotionVectors+0x667>
   53673:	mov    r12d,DWORD PTR [rsp-0x70]
   53678:	test   r12d,r12d
   5367b:	jne    536c0 <SetRefAndMotionVectors+0x5b0>
   5367d:	mov    rbx,QWORD PTR [rsp-0x28]
   53682:	lea    r10d,[rax+r13*1]
   53686:	mov    rbp,QWORD PTR [rsp-0x40]
   5368b:	lea    r9d,[r15+rcx*1]
   5368f:	movsxd r10,r10d
   53692:	movsxd r9,r9d
   53695:	mov    r11,QWORD PTR [rbx+r10*8]
   53699:	movsx  r14d,WORD PTR [r11+r9*2]
   5369e:	mov    r11,QWORD PTR [rbp+0x0]
   536a2:	mov    r11,QWORD PTR [r11+r10*8]
   536a6:	movsx  ebx,WORD PTR [r11+r9*2]
   536ab:	mov    r11,QWORD PTR [rbp+0x8]
   536af:	mov    r10,QWORD PTR [r11+r10*8]
   536b3:	mov    DWORD PTR [rsp-0x50],ebx
   536b7:	movsx  ebx,WORD PTR [r10+r9*2]
   536bc:	mov    DWORD PTR [rsp-0x30],ebx
   536c0:	cmp    r14d,0x2
   536c4:	sete   r11b
   536c8:	test   r14d,0xfffffffd
   536cf:	je     53538 <SetRefAndMotionVectors+0x428>
   536d5:	mov    rbx,QWORD PTR [r8]
   536d8:	lea    r10d,[rax+r13*1]
   536dc:	lea    r9d,[r15+rcx*1]
   536e0:	mov    r12d,0xffffffff
   536e6:	movsxd r10,r10d
   536e9:	movsxd r9,r9d
   536ec:	mov    rbx,QWORD PTR [rbx+r10*8]
   536f0:	mov    rbx,QWORD PTR [rbx+r9*8]
   536f4:	mov    DWORD PTR [rbx],0x0
   536fa:	mov    rbx,QWORD PTR [rdi]
   536fd:	mov    rbx,QWORD PTR [rbx+r10*8]
   53701:	mov    WORD PTR [rbx+r9*2],r12w
   53706:	mov    rbx,QWORD PTR [rsi]
   53709:	mov    r10,QWORD PTR [rbx+r10*8]
   5370d:	mov    QWORD PTR [r10+r9*8],0xffffffffffffffff
   53715:	lea    r9d,[r14-0x1]
   53719:	cmp    r9d,0x1
   5371d:	jbe    5383a <SetRefAndMotionVectors+0x72a>
   53723:	mov    r11,QWORD PTR [r8+0x8]
   53727:	lea    r10d,[rax+r13*1]
   5372b:	lea    r9d,[r15+rcx*1]
   5372f:	add    eax,0x1
   53732:	movsxd r10,r10d
   53735:	movsxd r9,r9d
   53738:	mov    ebx,0xffffffff
   5373d:	add    rdx,0x8
   53741:	mov    r11,QWORD PTR [r11+r10*8]
   53745:	mov    r11,QWORD PTR [r11+r9*8]
   53749:	mov    DWORD PTR [r11],0x0
   53750:	mov    r11,QWORD PTR [rdi+0x8]
   53754:	mov    r11,QWORD PTR [r11+r10*8]
   53758:	mov    WORD PTR [r11+r9*2],bx
   5375d:	mov    r11,QWORD PTR [rsi+0x8]
   53761:	mov    r10,QWORD PTR [r11+r10*8]
   53765:	mov    QWORD PTR [r10+r9*8],0xffffffffffffffff
   5376d:	cmp    DWORD PTR [rsp-0x74],eax
   53771:	jne    53673 <SetRefAndMotionVectors+0x563>
   53777:	mov    r12,QWORD PTR [rsp-0x40]
   5377c:	add    QWORD PTR [rsp-0x68],0x8
   53782:	add    r15d,0x1
   53786:	cmp    DWORD PTR [rsp-0x2c],r15d
   5378b:	jne    534d8 <SetRefAndMotionVectors+0x3c8>
   53791:	add    rsp,0x18
   53795:	pop    rbx
   53796:	pop    rbp
   53797:	pop    r12
   53799:	pop    r13
   5379b:	pop    r14
   5379d:	pop    r15
   5379f:	ret    
   537a0:	mov    rbx,QWORD PTR [rsp-0x60]
   537a5:	mov    r9,QWORD PTR [rbx+0x118f8]
   537ac:	mov    rbx,QWORD PTR [rsp-0x68]
   537b1:	mov    r9,QWORD PTR [r9+rdx*1]
   537b5:	mov    r10,QWORD PTR [r9+rbx*1]
   537b9:	movsxd r9,DWORD PTR [rsp-0x50]
   537be:	mov    rbx,QWORD PTR [r8]
   537c1:	mov    r10,QWORD PTR [r10]
   537c4:	mov    r9,QWORD PTR [r10+r9*8]
   537c8:	mov    r10,QWORD PTR [rsp-0x38]
   537cd:	mov    rbp,QWORD PTR [r9+r10*1]
   537d1:	lea    r10d,[rax+r13*1]
   537d5:	lea    r9d,[r15+rcx*1]
   537d9:	movsxd r10,r10d
   537dc:	movsxd r9,r9d
   537df:	mov    rbx,QWORD PTR [rbx+r10*8]
   537e3:	movzx  r12d,WORD PTR [rbp+0x0]
   537e8:	mov    rbx,QWORD PTR [rbx+r9*8]
   537ec:	mov    WORD PTR [rbx],r12w
   537f0:	movzx  ebp,WORD PTR [rbp+0x2]
   537f4:	mov    WORD PTR [rbx+0x2],bp
   537f8:	mov    rbx,QWORD PTR [rdi]
   537fb:	mov    ebp,DWORD PTR [rsp-0x50]
   537ff:	mov    rbx,QWORD PTR [rbx+r10*8]
   53803:	mov    WORD PTR [rbx+r9*2],bp
   53808:	movsx  rbx,bp
   5380c:	mov    rbp,QWORD PTR [rsp-0x20]
   53811:	lea    rbx,[rbx+rbp*1+0x2]
   53816:	mov    rbp,QWORD PTR [rsp-0x58]
   5381b:	mov    rbx,QWORD PTR [rbp+rbx*8+0x8]
   53820:	mov    rbp,QWORD PTR [rsi]
   53823:	mov    r10,QWORD PTR [rbp+r10*8+0x0]
   53828:	mov    QWORD PTR [r10+r9*8],rbx
   5382c:	lea    r9d,[r14-0x1]
   53830:	cmp    r9d,0x1
   53834:	ja     53723 <SetRefAndMotionVectors+0x613>
   5383a:	mov    rbx,QWORD PTR [rsp-0x48]
   5383f:	mov    r9d,DWORD PTR [rbx+0x244]
   53846:	test   r9d,r9d
   53849:	jne    538e8 <SetRefAndMotionVectors+0x7d8>
   5384f:	mov    rbx,QWORD PTR [rsp-0x60]
   53854:	mov    r12d,DWORD PTR [rsp-0x30]
   53859:	mov    r11,QWORD PTR [rsp-0x38]
   5385e:	mov    r9,QWORD PTR [rbx+0x118f8]
   53865:	mov    rbx,QWORD PTR [rsp-0x68]
   5386a:	mov    r9,QWORD PTR [r9+rdx*1]
   5386e:	mov    r10,QWORD PTR [r9+rbx*1]
   53872:	movsxd r9,r12d
   53875:	mov    r10,QWORD PTR [r10+0x8]
   53879:	mov    r9,QWORD PTR [r10+r9*8]
   5387d:	lea    r10d,[rax+r13*1]
   53881:	movsxd r10,r10d
   53884:	mov    rbx,QWORD PTR [r9+r11*1]
   53888:	mov    r11,QWORD PTR [r8+0x8]
   5388c:	lea    r9d,[r15+rcx*1]
   53890:	movsxd r9,r9d
   53893:	mov    r11,QWORD PTR [r11+r10*8]
   53897:	movzx  ebp,WORD PTR [rbx]
   5389a:	mov    r11,QWORD PTR [r11+r9*8]
   5389e:	mov    WORD PTR [r11],bp
   538a2:	movzx  ebx,WORD PTR [rbx+0x2]
   538a6:	mov    WORD PTR [r11+0x2],bx
   538ab:	mov    r11,QWORD PTR [rdi+0x8]
   538af:	mov    rbx,QWORD PTR [rsp-0x18]
   538b4:	mov    r11,QWORD PTR [r11+r10*8]
   538b8:	mov    WORD PTR [r11+r9*2],r12w
   538bd:	movsx  r11,r12w
   538c1:	lea    r11,[r11+rbx*1+0x2]
   538c6:	mov    rbx,QWORD PTR [rsp-0x58]
   538cb:	mov    r11,QWORD PTR [rbx+r11*8+0x8]
   538d0:	mov    rbx,QWORD PTR [rsi+0x8]
   538d4:	mov    r10,QWORD PTR [rbx+r10*8]
   538d8:	mov    QWORD PTR [r10+r9*8],r11
   538dc:	jmp    53662 <SetRefAndMotionVectors+0x552>
   538e1:	nop    DWORD PTR [rax+0x0]
   538e8:	cmp    DWORD PTR [rsp-0x70],0x1
   538ed:	jne    5384f <SetRefAndMotionVectors+0x73f>
   538f3:	test   r11b,r11b
   538f6:	je     5384f <SetRefAndMotionVectors+0x73f>
   538fc:	mov    rbx,QWORD PTR [rsp-0x60]
   53901:	mov    r11,QWORD PTR [rbx+0x11900]
   53908:	mov    rbx,QWORD PTR [rbx+0x11908]
   5390f:	mov    QWORD PTR [rsp-0x8],r11
   53914:	mov    QWORD PTR [rsp],rbx
   53918:	jmp    535ee <SetRefAndMotionVectors+0x4de>
   5391d:	nop    DWORD PTR [rax]

0000000000053920 <field_flag_inference>:
   53920:	endbr64 
   53924:	mov    rax,QWORD PTR [rip+0x34c85]        # 885b0 <img>
   5392b:	mov    rdx,QWORD PTR [rax+0x3758]
   53932:	movsxd rax,DWORD PTR [rax+0xc]
   53936:	imul   rax,rax,0x278
   5393d:	add    rax,rdx
   53940:	mov    ecx,DWORD PTR [rax+0x228]
   53946:	test   ecx,ecx
   53948:	je     53968 <field_flag_inference+0x48>
   5394a:	movsxd rax,DWORD PTR [rax+0x218]
   53951:	imul   rax,rax,0x278
   53958:	mov    r8d,DWORD PTR [rdx+rax*1+0x214]
   53960:	mov    eax,r8d
   53963:	ret    
   53964:	nop    DWORD PTR [rax+0x0]
   53968:	mov    r8d,DWORD PTR [rax+0x22c]
   5396f:	test   r8d,r8d
   53972:	je     53960 <field_flag_inference+0x40>
   53974:	movsxd rax,DWORD PTR [rax+0x21c]
   5397b:	imul   rax,rax,0x278
   53982:	mov    r8d,DWORD PTR [rdx+rax*1+0x214]
   5398a:	mov    eax,r8d
   5398d:	ret    
   5398e:	xchg   ax,ax

0000000000053990 <StoreMVBlock8x8>:
   53990:	endbr64 
   53994:	mov    rax,QWORD PTR [rip+0x34c15]        # 885b0 <img>
   5399b:	push   r15
   5399d:	push   r14
   5399f:	push   r13
   539a1:	movsxd r13,edx
   539a4:	push   r12
   539a6:	push   rbp
   539a7:	push   rbx
   539a8:	mov    r10,QWORD PTR [rax+0x118f8]
   539af:	mov    r11,QWORD PTR [rax+0x118f0]
   539b6:	mov    eax,esi
   539b8:	shr    eax,0x1f
   539bb:	lea    edx,[rsi+rax*1]
   539be:	and    edx,0x1
   539c1:	sub    edx,eax
   539c3:	mov    eax,esi
   539c5:	shr    eax,0x1f
   539c8:	add    edx,edx
   539ca:	add    eax,esi
   539cc:	mov    esi,DWORD PTR [rsp+0x38]
   539d0:	and    eax,0xfffffffe
   539d3:	test   esi,esi
   539d5:	jne    53ab0 <StoreMVBlock8x8+0x120>
   539db:	test   r9d,r9d
   539de:	js     53a9c <StoreMVBlock8x8+0x10c>
   539e4:	movsxd rcx,ecx
   539e7:	movsxd rdx,edx
   539ea:	movsxd rdi,edi
   539ed:	cdqe   
   539ef:	lea    rsi,[rcx*8+0x0]
   539f7:	lea    rcx,[rdx+rdi*8]
   539fb:	lea    r13,[rax+rcx*4]
   539ff:	lea    r12,[rip+0x8b8da]        # df2e0 <all_mv8x8>
   53a06:	shl    rax,0x3
   53a0a:	lea    rbx,[rip+0x8b9ef]        # df400 <pred_mv8x8>
   53a11:	shl    r13,0x2
   53a15:	lea    r15,[rax+0x10]
   53a19:	lea    rbp,[r12+0x2]
   53a1e:	lea    r9,[rbx+0x2]
   53a22:	lea    r14,[rdx+0x2]
   53a26:	mov    QWORD PTR [rsp-0x50],rdx
   53a2b:	mov    rcx,r13
   53a2e:	mov    rdi,rdx
   53a31:	mov    r8,QWORD PTR [r10+rdi*8]
   53a35:	mov    r8,QWORD PTR [r8+rax*1]
   53a39:	mov    r8,QWORD PTR [r8]
   53a3c:	mov    r8,QWORD PTR [r8+rsi*1]
   53a40:	mov    r8,QWORD PTR [r8+0x20]
   53a44:	movzx  edx,WORD PTR [r8]
   53a48:	mov    WORD PTR [r12+rcx*1],dx
   53a4d:	movzx  r8d,WORD PTR [r8+0x2]
   53a52:	mov    WORD PTR [rbp+rcx*1+0x0],r8w
   53a58:	mov    r8,QWORD PTR [r11+rdi*8]
   53a5c:	add    rdi,0x1
   53a60:	mov    r8,QWORD PTR [r8+rax*1]
   53a64:	mov    r8,QWORD PTR [r8]
   53a67:	mov    r8,QWORD PTR [r8+rsi*1]
   53a6b:	mov    r8,QWORD PTR [r8+0x20]
   53a6f:	movzx  edx,WORD PTR [r8]
   53a73:	mov    WORD PTR [rbx+rcx*1],dx
   53a77:	movzx  r8d,WORD PTR [r8+0x2]
   53a7c:	mov    WORD PTR [r9+rcx*1],r8w
   53a81:	add    rcx,0x10
   53a85:	cmp    r14,rdi
   53a88:	jne    53a31 <StoreMVBlock8x8+0xa1>
   53a8a:	add    rax,0x8
   53a8e:	mov    rdx,QWORD PTR [rsp-0x50]
   53a93:	add    r13,0x4
   53a97:	cmp    r15,rax
   53a9a:	jne    53a26 <StoreMVBlock8x8+0x96>
   53a9c:	pop    rbx
   53a9d:	pop    rbp
   53a9e:	pop    r12
   53aa0:	pop    r13
   53aa2:	pop    r14
   53aa4:	pop    r15
   53aa6:	ret    
   53aa7:	nop    WORD PTR [rax+rax*1+0x0]
   53ab0:	test   r9d,r9d
   53ab3:	jne    53b98 <StoreMVBlock8x8+0x208>
   53ab9:	movsxd rdx,edx
   53abc:	movsxd rdi,edi
   53abf:	cdqe   
   53ac1:	movsxd rcx,ecx
   53ac4:	lea    rsi,[rdx+rdi*8]
   53ac8:	shl    rcx,0x3
   53acc:	lea    r15,[rdx+0x2]
   53ad0:	lea    r14,[rax+rsi*4]
   53ad4:	shl    rax,0x3
   53ad8:	lea    r12,[rip+0x8b801]        # df2e0 <all_mv8x8>
   53adf:	lea    rbx,[rax+0x10]
   53ae3:	shl    r14,0x2
   53ae7:	lea    rbp,[r12+0x2]
   53aec:	mov    QWORD PTR [rsp-0x48],rbx
   53af1:	lea    rbx,[rip+0x8b908]        # df400 <pred_mv8x8>
   53af8:	lea    r8,[r13*8+0x0]
   53b00:	lea    r9,[rbx+0x2]
   53b04:	mov    QWORD PTR [rsp-0x50],rdx
   53b09:	mov    rsi,r14
   53b0c:	mov    rdi,rdx
   53b0f:	mov    r13,QWORD PTR [r10+rdi*8]
   53b13:	mov    r13,QWORD PTR [r13+rax*1+0x0]
   53b18:	mov    r13,QWORD PTR [r13+0x0]
   53b1c:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   53b21:	mov    r13,QWORD PTR [r13+r8*1+0x0]
   53b26:	movzx  edx,WORD PTR [r13+0x0]
   53b2b:	mov    WORD PTR [r12+rsi*1],dx
   53b30:	movzx  r13d,WORD PTR [r13+0x2]
   53b35:	mov    WORD PTR [rbp+rsi*1+0x0],r13w
   53b3b:	mov    r13,QWORD PTR [r11+rdi*8]
   53b3f:	add    rdi,0x1
   53b43:	mov    r13,QWORD PTR [r13+rax*1+0x0]
   53b48:	mov    r13,QWORD PTR [r13+0x0]
   53b4c:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   53b51:	mov    r13,QWORD PTR [r13+r8*1+0x0]
   53b56:	movzx  edx,WORD PTR [r13+0x0]
   53b5b:	mov    WORD PTR [rbx+rsi*1],dx
   53b5f:	movzx  r13d,WORD PTR [r13+0x2]
   53b64:	mov    WORD PTR [r9+rsi*1],r13w
   53b69:	add    rsi,0x10
   53b6d:	cmp    r15,rdi
   53b70:	jne    53b0f <StoreMVBlock8x8+0x17f>
   53b72:	mov    rdx,QWORD PTR [rsp-0x50]
   53b77:	add    r14,0x4
   53b7b:	add    rax,0x8
   53b7f:	cmp    QWORD PTR [rsp-0x48],rax
   53b84:	jne    53b04 <StoreMVBlock8x8+0x174>
   53b8a:	pop    rbx
   53b8b:	pop    rbp
   53b8c:	pop    r12
   53b8e:	pop    r13
   53b90:	pop    r14
   53b92:	pop    r15
   53b94:	ret    
   53b95:	nop    DWORD PTR [rax]
   53b98:	cmp    r9d,0x1
   53b9c:	je     53d18 <StoreMVBlock8x8+0x388>
   53ba2:	cmp    r9d,0x2
   53ba6:	jne    53df8 <StoreMVBlock8x8+0x468>
   53bac:	movsxd rsi,edx
   53baf:	movsxd rdi,edi
   53bb2:	cdqe   
   53bb4:	movsxd rcx,ecx
   53bb7:	lea    rdx,[rsi+rdi*8]
   53bbb:	mov    QWORD PTR [rsp-0x10],rsi
   53bc0:	add    rsi,0x2
   53bc4:	movsxd r8,r8d
   53bc7:	lea    rdx,[rax+rdx*4]
   53bcb:	lea    r12,[rip+0x8b70e]        # df2e0 <all_mv8x8>
   53bd2:	shl    rax,0x3
   53bd6:	shl    rcx,0x3
   53bda:	lea    rbx,[rdx*4+0x0]
   53be2:	lea    rbp,[r12+0x2]
   53be7:	shl    r13,0x3
   53beb:	shl    r8,0x3
   53bef:	lea    rdi,[rbp+0x3e]
   53bf3:	mov    QWORD PTR [rsp-0x40],rbx
   53bf8:	lea    rbx,[rax+0x10]
   53bfc:	mov    QWORD PTR [rsp-0x18],rbx
   53c01:	lea    rbx,[rip+0x8b7f8]        # df400 <pred_mv8x8>
   53c08:	mov    QWORD PTR [rsp-0x28],rdi
   53c0d:	lea    rdi,[rbp+0x40]
   53c11:	lea    r9,[rbx+0x2]
   53c15:	mov    QWORD PTR [rsp-0x20],rdi
   53c1a:	lea    rdi,[rbx+0x40]
   53c1e:	mov    QWORD PTR [rsp-0x50],rdi
   53c23:	lea    rdi,[rbx+0x42]
   53c27:	mov    QWORD PTR [rsp-0x38],rdi
   53c2c:	mov    QWORD PTR [rsp-0x30],rsi
   53c31:	mov    rdx,QWORD PTR [rsp-0x40]
   53c36:	mov    rsi,QWORD PTR [rsp-0x10]
   53c3b:	mov    QWORD PTR [rsp-0x48],r9
   53c40:	mov    rdi,QWORD PTR [r10+rsi*8]
   53c44:	mov    r14,QWORD PTR [rdi+rax*1]
   53c48:	mov    rdi,QWORD PTR [r14]
   53c4b:	mov    r14,QWORD PTR [r14+0x8]
   53c4f:	mov    rdi,QWORD PTR [rdi+rcx*1]
   53c53:	mov    r14,QWORD PTR [r14+r8*1]
   53c57:	mov    rdi,QWORD PTR [rdi+r13*1]
   53c5b:	mov    r14,QWORD PTR [r14+r13*1]
   53c5f:	movzx  r15d,WORD PTR [rdi]
   53c63:	mov    WORD PTR [r12+rdx*1],r15w
   53c68:	movzx  edi,WORD PTR [rdi+0x2]
   53c6c:	mov    WORD PTR [rbp+rdx*1+0x0],di
   53c71:	mov    rdi,QWORD PTR [r11+rsi*8]
   53c75:	add    rsi,0x1
   53c79:	mov    rdi,QWORD PTR [rdi+rax*1]
   53c7d:	mov    r15,QWORD PTR [rdi]
   53c80:	mov    rdi,QWORD PTR [rdi+0x8]
   53c84:	mov    r15,QWORD PTR [r15+rcx*1]
   53c88:	mov    rdi,QWORD PTR [rdi+r8*1]
   53c8c:	mov    r15,QWORD PTR [r15+r13*1]
   53c90:	mov    rdi,QWORD PTR [rdi+r13*1]
   53c94:	movzx  r9d,WORD PTR [r15]
   53c98:	mov    WORD PTR [rbx+rdx*1],r9w
   53c9d:	mov    r9,QWORD PTR [rsp-0x48]
   53ca2:	movzx  r15d,WORD PTR [r15+0x2]
   53ca7:	mov    WORD PTR [r9+rdx*1],r15w
   53cac:	mov    r9,QWORD PTR [rsp-0x28]
   53cb1:	movzx  r15d,WORD PTR [r14]
   53cb5:	mov    WORD PTR [r9+rdx*1],r15w
   53cba:	mov    r15,QWORD PTR [rsp-0x20]
   53cbf:	movzx  r14d,WORD PTR [r14+0x2]
   53cc4:	mov    WORD PTR [r15+rdx*1],r14w
   53cc9:	movzx  r14d,WORD PTR [rdi]
   53ccd:	mov    r15,QWORD PTR [rsp-0x50]
   53cd2:	mov    WORD PTR [r15+rdx*1],r14w
   53cd7:	mov    r15,QWORD PTR [rsp-0x38]
   53cdc:	movzx  edi,WORD PTR [rdi+0x2]
   53ce0:	mov    WORD PTR [r15+rdx*1],di
   53ce5:	add    rdx,0x10
   53ce9:	cmp    QWORD PTR [rsp-0x30],rsi
   53cee:	jne    53c40 <StoreMVBlock8x8+0x2b0>
   53cf4:	add    QWORD PTR [rsp-0x40],0x4
   53cfa:	mov    r9,QWORD PTR [rsp-0x48]
   53cff:	add    rax,0x8
   53d03:	cmp    QWORD PTR [rsp-0x18],rax
   53d08:	jne    53c31 <StoreMVBlock8x8+0x2a1>
   53d0e:	jmp    53a9c <StoreMVBlock8x8+0x10c>
   53d13:	nop    DWORD PTR [rax+rax*1+0x0]
   53d18:	movsxd rdx,edx
   53d1b:	movsxd rdi,edi
   53d1e:	cdqe   
   53d20:	movsxd rcx,r13d
   53d23:	lea    rsi,[rdx+rdi*8]
   53d27:	movsxd r8,r8d
   53d2a:	shl    rcx,0x3
   53d2e:	lea    rbp,[rdx+0x2]
   53d32:	lea    rbx,[rax+rsi*4]
   53d36:	lea    rsi,[rip+0x8b703]        # df440 <pred_mv8x8+0x40>
   53d3d:	shl    rax,0x3
   53d41:	mov    QWORD PTR [rsp-0x50],rsi
   53d46:	shl    rbx,0x2
   53d4a:	lea    r12,[rax+0x10]
   53d4e:	lea    r13,[rsi+0x2]
   53d52:	lea    r14,[rip+0x8b5c7]        # df320 <all_mv8x8+0x40>
   53d59:	lea    r9,[r8*8+0x0]
   53d61:	lea    r15,[r14+0x2]
   53d65:	mov    QWORD PTR [rsp-0x48],rdx
   53d6a:	mov    rsi,rbx
   53d6d:	mov    rdi,rdx
   53d70:	mov    QWORD PTR [rsp-0x40],rbx
   53d75:	mov    r8,QWORD PTR [r10+rdi*8]
   53d79:	mov    r8,QWORD PTR [r8+rax*1]
   53d7d:	mov    r8,QWORD PTR [r8+0x8]
   53d81:	mov    r8,QWORD PTR [r8+r9*1]
   53d85:	mov    r8,QWORD PTR [r8+rcx*1]
   53d89:	movzx  edx,WORD PTR [r8]
   53d8d:	mov    WORD PTR [r14+rsi*1],dx
   53d92:	movzx  r8d,WORD PTR [r8+0x2]
   53d97:	mov    rdx,QWORD PTR [rsp-0x50]
   53d9c:	mov    WORD PTR [r15+rsi*1],r8w
   53da1:	mov    r8,QWORD PTR [r11+rdi*8]
   53da5:	add    rdi,0x1
   53da9:	mov    r8,QWORD PTR [r8+rax*1]
   53dad:	mov    r8,QWORD PTR [r8+0x8]
   53db1:	mov    r8,QWORD PTR [r8+r9*1]
   53db5:	mov    r8,QWORD PTR [r8+rcx*1]
   53db9:	movzx  ebx,WORD PTR [r8]
   53dbd:	mov    WORD PTR [rdx+rsi*1],bx
   53dc1:	movzx  r8d,WORD PTR [r8+0x2]
   53dc6:	mov    WORD PTR [r13+rsi*1+0x0],r8w
   53dcc:	add    rsi,0x10
   53dd0:	cmp    rbp,rdi
   53dd3:	jne    53d75 <StoreMVBlock8x8+0x3e5>
   53dd5:	mov    rbx,QWORD PTR [rsp-0x40]
   53dda:	add    rax,0x8
   53dde:	mov    rdx,QWORD PTR [rsp-0x48]
   53de3:	add    rbx,0x4
   53de7:	cmp    r12,rax
   53dea:	jne    53d65 <StoreMVBlock8x8+0x3d5>
   53df0:	jmp    53a9c <StoreMVBlock8x8+0x10c>
   53df5:	nop    DWORD PTR [rax]
   53df8:	pop    rbx
   53df9:	mov    esi,0xff
   53dfe:	lea    rdi,[rip+0x23873]        # 77678 <b8_mode_table.7699+0x18>
   53e05:	pop    rbp
   53e06:	pop    r12
   53e08:	pop    r13
   53e0a:	pop    r14
   53e0c:	pop    r15
   53e0e:	jmp    19180 <error>
   53e13:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   53e1e:	xchg   ax,ax

0000000000053e20 <StoreMV8x8>:
   53e20:	endbr64 
   53e24:	push   r15
   53e26:	xor    r15d,r15d
   53e29:	push   r14
   53e2b:	lea    r14,[rip+0x8d8d6]        # e1708 <part8x8pdir>
   53e32:	push   r13
   53e34:	lea    r13,[rip+0x8ed05]        # e2b40 <part8x8bwref>
   53e3b:	push   r12
   53e3d:	lea    r12,[rip+0x8a9ac]        # de7f0 <part8x8mode>
   53e44:	push   rbp
   53e45:	mov    ebp,edi
   53e47:	push   rbx
   53e48:	sub    rsp,0x8
   53e4c:	mov    rax,QWORD PTR [rip+0x3475d]        # 885b0 <img>
   53e53:	cmp    DWORD PTR [rax+0x18],0x1
   53e57:	sete   r15b
   53e5b:	xor    ebx,ebx
   53e5d:	sub    rsp,0x8
   53e61:	lea    rax,[rip+0x8e438]        # e22a0 <part8x8fwref>
   53e68:	mov    esi,ebx
   53e6a:	mov    edi,ebp
   53e6c:	movsx  ecx,WORD PTR [rax+rbx*2]
   53e70:	mov    edx,DWORD PTR [r12+rbx*4]
   53e74:	push   r15
   53e76:	movsx  r9d,WORD PTR [r14+rbx*2]
   53e7b:	movsx  r8d,WORD PTR [r13+rbx*2+0x0]
   53e81:	add    rbx,0x1
   53e85:	call   53990 <StoreMVBlock8x8>
   53e8a:	pop    rax
   53e8b:	pop    rdx
   53e8c:	cmp    rbx,0x4
   53e90:	jne    53e5d <StoreMV8x8+0x3d>
   53e92:	add    rsp,0x8
   53e96:	pop    rbx
   53e97:	pop    rbp
   53e98:	pop    r12
   53e9a:	pop    r13
   53e9c:	pop    r14
   53e9e:	pop    r15
   53ea0:	ret    
   53ea1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   53eac:	nop    DWORD PTR [rax+0x0]

0000000000053eb0 <RestoreMVBlock8x8>:
   53eb0:	endbr64 
   53eb4:	mov    rax,QWORD PTR [rip+0x346f5]        # 885b0 <img>
   53ebb:	push   r15
   53ebd:	push   r14
   53ebf:	push   r13
   53ec1:	push   r12
   53ec3:	push   rbp
   53ec4:	push   rbx
   53ec5:	mov    r10,QWORD PTR [rax+0x118f8]
   53ecc:	mov    ebx,edx
   53ece:	mov    r11,QWORD PTR [rax+0x118f0]
   53ed5:	mov    eax,esi
   53ed7:	shr    eax,0x1f
   53eda:	lea    edx,[rsi+rax*1]
   53edd:	and    edx,0x1
   53ee0:	sub    edx,eax
   53ee2:	mov    eax,esi
   53ee4:	shr    eax,0x1f
   53ee7:	add    edx,edx
   53ee9:	add    eax,esi
   53eeb:	mov    esi,DWORD PTR [rsp+0x38]
   53eef:	and    eax,0xfffffffe
   53ef2:	test   esi,esi
   53ef4:	jne    53fc8 <RestoreMVBlock8x8+0x118>
   53efa:	test   r9d,r9d
   53efd:	js     53fba <RestoreMVBlock8x8+0x10a>
   53f03:	movsxd rcx,ecx
   53f06:	movsxd rdx,edx
   53f09:	movsxd rdi,edi
   53f0c:	cdqe   
   53f0e:	lea    rsi,[rcx*8+0x0]
   53f16:	lea    rcx,[rdx+rdi*8]
   53f1a:	lea    r13,[rax+rcx*4]
   53f1e:	lea    r12,[rip+0x8b3bb]        # df2e0 <all_mv8x8>
   53f25:	shl    rax,0x3
   53f29:	lea    rbx,[rip+0x8b4d0]        # df400 <pred_mv8x8>
   53f30:	shl    r13,0x2
   53f34:	lea    r15,[rax+0x10]
   53f38:	lea    rbp,[r12+0x2]
   53f3d:	lea    r9,[rbx+0x2]
   53f41:	lea    r14,[rdx+0x2]
   53f45:	mov    QWORD PTR [rsp-0x50],rdx
   53f4a:	mov    rcx,r13
   53f4d:	mov    rdi,rdx
   53f50:	mov    r8,QWORD PTR [r10+rdi*8]
   53f54:	movzx  edx,WORD PTR [r12+rcx*1]
   53f59:	mov    r8,QWORD PTR [r8+rax*1]
   53f5d:	mov    r8,QWORD PTR [r8]
   53f60:	mov    r8,QWORD PTR [r8+rsi*1]
   53f64:	mov    r8,QWORD PTR [r8+0x20]
   53f68:	mov    WORD PTR [r8],dx
   53f6c:	movzx  edx,WORD PTR [rbp+rcx*1+0x0]
   53f71:	mov    WORD PTR [r8+0x2],dx
   53f76:	mov    r8,QWORD PTR [r11+rdi*8]
   53f7a:	add    rdi,0x1
   53f7e:	movzx  edx,WORD PTR [rbx+rcx*1]
   53f82:	mov    r8,QWORD PTR [r8+rax*1]
   53f86:	mov    r8,QWORD PTR [r8]
   53f89:	mov    r8,QWORD PTR [r8+rsi*1]
   53f8d:	mov    r8,QWORD PTR [r8+0x20]
   53f91:	mov    WORD PTR [r8],dx
   53f95:	movzx  edx,WORD PTR [r9+rcx*1]
   53f9a:	add    rcx,0x10
   53f9e:	mov    WORD PTR [r8+0x2],dx
   53fa3:	cmp    r14,rdi
   53fa6:	jne    53f50 <RestoreMVBlock8x8+0xa0>
   53fa8:	add    rax,0x8
   53fac:	mov    rdx,QWORD PTR [rsp-0x50]
   53fb1:	add    r13,0x4
   53fb5:	cmp    r15,rax
   53fb8:	jne    53f45 <RestoreMVBlock8x8+0x95>
   53fba:	pop    rbx
   53fbb:	pop    rbp
   53fbc:	pop    r12
   53fbe:	pop    r13
   53fc0:	pop    r14
   53fc2:	pop    r15
   53fc4:	ret    
   53fc5:	nop    DWORD PTR [rax]
   53fc8:	test   r9d,r9d
   53fcb:	jne    540b0 <RestoreMVBlock8x8+0x200>
   53fd1:	movsxd rdx,edx
   53fd4:	movsxd rdi,edi
   53fd7:	cdqe   
   53fd9:	movsxd r8,ebx
   53fdc:	lea    rsi,[rdx+rdi*8]
   53fe0:	movsxd rcx,ecx
   53fe3:	shl    r8,0x3
   53fe7:	lea    r15,[rdx+0x2]
   53feb:	lea    r14,[rax+rsi*4]
   53fef:	shl    rax,0x3
   53ff3:	lea    r12,[rip+0x8b2e6]        # df2e0 <all_mv8x8>
   53ffa:	shl    rcx,0x3
   53ffe:	lea    rbx,[rax+0x10]
   54002:	shl    r14,0x2
   54006:	lea    rbp,[r12+0x2]
   5400b:	mov    QWORD PTR [rsp-0x48],rbx
   54010:	lea    rbx,[rip+0x8b3e9]        # df400 <pred_mv8x8>
   54017:	lea    r9,[rbx+0x2]
   5401b:	mov    QWORD PTR [rsp-0x50],rdx
   54020:	mov    rsi,r14
   54023:	mov    rdi,rdx
   54026:	mov    r13,QWORD PTR [r10+rdi*8]
   5402a:	movzx  edx,WORD PTR [r12+rsi*1]
   5402f:	mov    r13,QWORD PTR [r13+rax*1+0x0]
   54034:	mov    r13,QWORD PTR [r13+0x0]
   54038:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   5403d:	mov    r13,QWORD PTR [r13+r8*1+0x0]
   54042:	mov    WORD PTR [r13+0x0],dx
   54047:	movzx  edx,WORD PTR [rbp+rsi*1+0x0]
   5404c:	mov    WORD PTR [r13+0x2],dx
   54051:	mov    r13,QWORD PTR [r11+rdi*8]
   54055:	add    rdi,0x1
   54059:	movzx  edx,WORD PTR [rbx+rsi*1]
   5405d:	mov    r13,QWORD PTR [r13+rax*1+0x0]
   54062:	mov    r13,QWORD PTR [r13+0x0]
   54066:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   5406b:	mov    r13,QWORD PTR [r13+r8*1+0x0]
   54070:	mov    WORD PTR [r13+0x0],dx
   54075:	movzx  edx,WORD PTR [r9+rsi*1]
   5407a:	add    rsi,0x10
   5407e:	mov    WORD PTR [r13+0x2],dx
   54083:	cmp    r15,rdi
   54086:	jne    54026 <RestoreMVBlock8x8+0x176>
   54088:	mov    rdx,QWORD PTR [rsp-0x50]
   5408d:	add    r14,0x4
   54091:	add    rax,0x8
   54095:	cmp    QWORD PTR [rsp-0x48],rax
   5409a:	jne    5401b <RestoreMVBlock8x8+0x16b>
   540a0:	pop    rbx
   540a1:	pop    rbp
   540a2:	pop    r12
   540a4:	pop    r13
   540a6:	pop    r14
   540a8:	pop    r15
   540aa:	ret    
   540ab:	nop    DWORD PTR [rax+rax*1+0x0]
   540b0:	cmp    r9d,0x1
   540b4:	je     54240 <RestoreMVBlock8x8+0x390>
   540ba:	cmp    r9d,0x2
   540be:	jne    54310 <RestoreMVBlock8x8+0x460>
   540c4:	movsxd rsi,edx
   540c7:	movsxd rdi,edi
   540ca:	movsxd rcx,ecx
   540cd:	cdqe   
   540cf:	lea    rdx,[rsi+rdi*8]
   540d3:	shl    rcx,0x3
   540d7:	movsxd r8,r8d
   540da:	mov    QWORD PTR [rsp-0x10],rsi
   540df:	lea    rdx,[rax+rdx*4]
   540e3:	mov    QWORD PTR [rsp-0x48],rcx
   540e8:	movsxd rcx,ebx
   540eb:	shl    rax,0x3
   540ef:	lea    rbx,[r8*8+0x0]
   540f7:	lea    r12,[rip+0x8b1e2]        # df2e0 <all_mv8x8>
   540fe:	add    rsi,0x2
   54102:	shl    rcx,0x3
   54106:	mov    QWORD PTR [rsp-0x40],rbx
   5410b:	lea    rbx,[rdx*4+0x0]
   54113:	lea    rbp,[r12+0x2]
   54118:	mov    QWORD PTR [rsp-0x38],rbx
   5411d:	lea    rbx,[rax+0x10]
   54121:	lea    rdi,[rbp+0x40]
   54125:	mov    QWORD PTR [rsp-0x18],rbx
   5412a:	lea    rbx,[rip+0x8b2cf]        # df400 <pred_mv8x8>
   54131:	lea    r15,[rbp+0x3e]
   54135:	mov    QWORD PTR [rsp-0x20],rdi
   5413a:	lea    rdi,[rbx+0x40]
   5413e:	lea    r9,[rbx+0x2]
   54142:	mov    QWORD PTR [rsp-0x30],rdi
   54147:	lea    r14,[rbx+0x42]
   5414b:	mov    QWORD PTR [rsp-0x28],rsi
   54150:	mov    rdx,QWORD PTR [rsp-0x38]
   54155:	mov    rsi,QWORD PTR [rsp-0x10]
   5415a:	mov    QWORD PTR [rsp-0x50],r9
   5415f:	mov    rdi,QWORD PTR [r10+rsi*8]
   54163:	mov    r9,QWORD PTR [rsp-0x48]
   54168:	movzx  r13d,WORD PTR [r12+rdx*1]
   5416d:	mov    r8,QWORD PTR [rdi+rax*1]
   54171:	mov    rdi,QWORD PTR [r8]
   54174:	mov    r8,QWORD PTR [r8+0x8]
   54178:	mov    rdi,QWORD PTR [rdi+r9*1]
   5417c:	mov    rdi,QWORD PTR [rdi+rcx*1]
   54180:	mov    WORD PTR [rdi],r13w
   54184:	movzx  r13d,WORD PTR [rbp+rdx*1+0x0]
   5418a:	mov    WORD PTR [rdi+0x2],r13w
   5418f:	mov    rdi,QWORD PTR [r11+rsi*8]
   54193:	add    rsi,0x1
   54197:	mov    rdi,QWORD PTR [rdi+rax*1]
   5419b:	mov    r13,QWORD PTR [rdi]
   5419e:	mov    rdi,QWORD PTR [rdi+0x8]
   541a2:	mov    r13,QWORD PTR [r13+r9*1+0x0]
   541a7:	movzx  r9d,WORD PTR [rbx+rdx*1]
   541ac:	mov    r13,QWORD PTR [r13+rcx*1+0x0]
   541b1:	mov    WORD PTR [r13+0x0],r9w
   541b6:	mov    r9,QWORD PTR [rsp-0x50]
   541bb:	movzx  r9d,WORD PTR [r9+rdx*1]
   541c0:	mov    WORD PTR [r13+0x2],r9w
   541c5:	mov    r9,QWORD PTR [rsp-0x40]
   541ca:	movzx  r13d,WORD PTR [r15+rdx*1]
   541cf:	mov    r8,QWORD PTR [r8+r9*1]
   541d3:	mov    rdi,QWORD PTR [rdi+r9*1]
   541d7:	mov    r8,QWORD PTR [r8+rcx*1]
   541db:	mov    rdi,QWORD PTR [rdi+rcx*1]
   541df:	mov    WORD PTR [r8],r13w
   541e3:	mov    r13,QWORD PTR [rsp-0x20]
   541e8:	movzx  r13d,WORD PTR [r13+rdx*1+0x0]
   541ee:	mov    WORD PTR [r8+0x2],r13w
   541f3:	mov    r9,QWORD PTR [rsp-0x30]
   541f8:	movzx  r8d,WORD PTR [r9+rdx*1]
   541fd:	mov    WORD PTR [rdi],r8w
   54201:	movzx  r8d,WORD PTR [r14+rdx*1]
   54206:	add    rdx,0x10
   5420a:	mov    WORD PTR [rdi+0x2],r8w
   5420f:	cmp    QWORD PTR [rsp-0x28],rsi
   54214:	jne    5415f <RestoreMVBlock8x8+0x2af>
   5421a:	add    QWORD PTR [rsp-0x38],0x4
   54220:	mov    r9,QWORD PTR [rsp-0x50]
   54225:	add    rax,0x8
   54229:	cmp    QWORD PTR [rsp-0x18],rax
   5422e:	jne    54150 <RestoreMVBlock8x8+0x2a0>
   54234:	jmp    53fba <RestoreMVBlock8x8+0x10a>
   54239:	nop    DWORD PTR [rax+0x0]
   54240:	movsxd rdx,edx
   54243:	movsxd rdi,edi
   54246:	cdqe   
   54248:	movsxd rcx,ebx
   5424b:	lea    rsi,[rdx+rdi*8]
   5424f:	movsxd r8,r8d
   54252:	shl    rcx,0x3
   54256:	lea    rbp,[rdx+0x2]
   5425a:	lea    rbx,[rax+rsi*4]
   5425e:	shl    rax,0x3
   54262:	lea    rdi,[rip+0x8b1d7]        # df440 <pred_mv8x8+0x40>
   54269:	lea    r12,[rax+0x10]
   5426d:	lea    r15,[rip+0x8b0ac]        # df320 <all_mv8x8+0x40>
   54274:	shl    rbx,0x2
   54278:	mov    QWORD PTR [rsp-0x48],r12
   5427d:	lea    r13,[r15+0x2]
   54281:	lea    r14,[rdi+0x2]
   54285:	mov    r12,rdi
   54288:	lea    r9,[r8*8+0x0]
   54290:	mov    QWORD PTR [rsp-0x50],rdx
   54295:	mov    rsi,rbx
   54298:	mov    rdi,rdx
   5429b:	mov    r8,QWORD PTR [r10+rdi*8]
   5429f:	movzx  edx,WORD PTR [r15+rsi*1]
   542a4:	mov    r8,QWORD PTR [r8+rax*1]
   542a8:	mov    r8,QWORD PTR [r8+0x8]
   542ac:	mov    r8,QWORD PTR [r8+r9*1]
   542b0:	mov    r8,QWORD PTR [r8+rcx*1]
   542b4:	mov    WORD PTR [r8],dx
   542b8:	movzx  edx,WORD PTR [r13+rsi*1+0x0]
   542be:	mov    WORD PTR [r8+0x2],dx
   542c3:	mov    r8,QWORD PTR [r11+rdi*8]
   542c7:	add    rdi,0x1
   542cb:	movzx  edx,WORD PTR [r12+rsi*1]
   542d0:	mov    r8,QWORD PTR [r8+rax*1]
   542d4:	mov    r8,QWORD PTR [r8+0x8]
   542d8:	mov    r8,QWORD PTR [r8+r9*1]
   542dc:	mov    r8,QWORD PTR [r8+rcx*1]
   542e0:	mov    WORD PTR [r8],dx
   542e4:	movzx  edx,WORD PTR [r14+rsi*1]
   542e9:	add    rsi,0x10
   542ed:	mov    WORD PTR [r8+0x2],dx
   542f2:	cmp    rbp,rdi
   542f5:	jne    5429b <RestoreMVBlock8x8+0x3eb>
   542f7:	mov    rdx,QWORD PTR [rsp-0x50]
   542fc:	add    rbx,0x4
   54300:	add    rax,0x8
   54304:	cmp    QWORD PTR [rsp-0x48],rax
   54309:	jne    54290 <RestoreMVBlock8x8+0x3e0>
   5430b:	jmp    53fba <RestoreMVBlock8x8+0x10a>
   54310:	pop    rbx
   54311:	mov    esi,0xff
   54316:	lea    rdi,[rip+0x2335b]        # 77678 <b8_mode_table.7699+0x18>
   5431d:	pop    rbp
   5431e:	pop    r12
   54320:	pop    r13
   54322:	pop    r14
   54324:	pop    r15
   54326:	jmp    19180 <error>
   5432b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000054330 <RestoreMV8x8>:
   54330:	endbr64 
   54334:	push   r15
   54336:	xor    r15d,r15d
   54339:	push   r14
   5433b:	lea    r14,[rip+0x8d3c6]        # e1708 <part8x8pdir>
   54342:	push   r13
   54344:	lea    r13,[rip+0x8e7f5]        # e2b40 <part8x8bwref>
   5434b:	push   r12
   5434d:	lea    r12,[rip+0x8a49c]        # de7f0 <part8x8mode>
   54354:	push   rbp
   54355:	mov    ebp,edi
   54357:	push   rbx
   54358:	sub    rsp,0x8
   5435c:	mov    rax,QWORD PTR [rip+0x3424d]        # 885b0 <img>
   54363:	cmp    DWORD PTR [rax+0x18],0x1
   54367:	sete   r15b
   5436b:	xor    ebx,ebx
   5436d:	sub    rsp,0x8
   54371:	lea    rax,[rip+0x8df28]        # e22a0 <part8x8fwref>
   54378:	mov    esi,ebx
   5437a:	mov    edi,ebp
   5437c:	movsx  ecx,WORD PTR [rax+rbx*2]
   54380:	mov    edx,DWORD PTR [r12+rbx*4]
   54384:	push   r15
   54386:	movsx  r9d,WORD PTR [r14+rbx*2]
   5438b:	movsx  r8d,WORD PTR [r13+rbx*2+0x0]
   54391:	add    rbx,0x1
   54395:	call   53eb0 <RestoreMVBlock8x8>
   5439a:	pop    rax
   5439b:	pop    rdx
   5439c:	cmp    rbx,0x4
   543a0:	jne    5436d <RestoreMV8x8+0x3d>
   543a2:	add    rsp,0x8
   543a6:	pop    rbx
   543a7:	pop    rbp
   543a8:	pop    r12
   543aa:	pop    r13
   543ac:	pop    r14
   543ae:	pop    r15
   543b0:	ret    
   543b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   543bc:	nop    DWORD PTR [rax+0x0]

00000000000543c0 <SetCoeffAndReconstruction8x8>:
   543c0:	endbr64 
   543c4:	push   r15
   543c6:	push   r14
   543c8:	push   r13
   543ca:	push   r12
   543cc:	push   rbp
   543cd:	push   rbx
   543ce:	mov    rbx,rdi
   543d1:	sub    rsp,0x28
   543d5:	mov    rdi,QWORD PTR [rip+0x341d4]        # 885b0 <img>
   543dc:	mov    eax,DWORD PTR [rdi+0x11ad0]
   543e2:	test   eax,eax
   543e4:	je     543f4 <SetCoeffAndReconstruction8x8+0x34>
   543e6:	mov    eax,DWORD PTR [rbx+0x214]
   543ec:	test   eax,eax
   543ee:	jne    549dd <SetCoeffAndReconstruction8x8+0x61d>
   543f4:	mov    r8d,DWORD PTR [rbx+0x23c]
   543fb:	test   r8d,r8d
   543fe:	jne    545fc <SetCoeffAndReconstruction8x8+0x23c>
   54404:	cmp    DWORD PTR [rdi+0x11bf4],0xfffffffd
   5440b:	jl     5448d <SetCoeffAndReconstruction8x8+0xcd>
   54411:	mov    r13,QWORD PTR [rip+0x34d40]        # 89158 <cofAC8x8>
   54418:	mov    r12,QWORD PTR [rdi+0x3738]
   5441f:	xor    ebp,ebp
   54421:	mov    r11,QWORD PTR [r13+rbp*8+0x0]
   54426:	mov    r10,QWORD PTR [r12+rbp*8]
   5442a:	xor    r9d,r9d
   5442d:	mov    r15,QWORD PTR [r11+r9*1]
   54431:	mov    r14,QWORD PTR [r10+r9*1]
   54435:	xor    eax,eax
   54437:	mov    rsi,QWORD PTR [r15]
   5443a:	mov    rcx,QWORD PTR [r14]
   5443d:	nop    DWORD PTR [rax]
   54440:	mov    edx,DWORD PTR [rsi+rax*1]
   54443:	mov    DWORD PTR [rcx+rax*1],edx
   54446:	add    rax,0x4
   5444a:	cmp    rax,0x104
   54450:	jne    54440 <SetCoeffAndReconstruction8x8+0x80>
   54452:	mov    rsi,QWORD PTR [r15+0x8]
   54456:	mov    rcx,QWORD PTR [r14+0x8]
   5445a:	xor    eax,eax
   5445c:	nop    DWORD PTR [rax+0x0]
   54460:	mov    edx,DWORD PTR [rsi+rax*1]
   54463:	mov    DWORD PTR [rcx+rax*1],edx
   54466:	add    rax,0x4
   5446a:	cmp    rax,0x104
   54470:	jne    54460 <SetCoeffAndReconstruction8x8+0xa0>
   54472:	add    r9,0x8
   54476:	cmp    r9,0x20
   5447a:	jne    5442d <SetCoeffAndReconstruction8x8+0x6d>
   5447c:	mov    eax,DWORD PTR [rdi+0x11bf4]
   54482:	add    rbp,0x1
   54486:	add    eax,0x3
   54489:	cmp    eax,ebp
   5448b:	jge    54421 <SetCoeffAndReconstruction8x8+0x61>
   5448d:	cmp    DWORD PTR [rip+0x8ae2c],0x5        # df2c0 <cnt_nonz_8x8>
   54494:	jg     5492c <SetCoeffAndReconstruction8x8+0x56c>
   5449a:	cmp    DWORD PTR [rdi+0x18],0x3
   5449e:	je     5492c <SetCoeffAndReconstruction8x8+0x56c>
   544a4:	mov    eax,DWORD PTR [rdi+0x11bdc]
   544aa:	add    eax,DWORD PTR [rdi+0x28]
   544ad:	jne    544bd <SetCoeffAndReconstruction8x8+0xfd>
   544af:	mov    eax,DWORD PTR [rdi+0x11c00]
   544b5:	test   eax,eax
   544b7:	jne    5492c <SetCoeffAndReconstruction8x8+0x56c>
   544bd:	mov    esi,DWORD PTR [rdi+0x11c14]
   544c3:	mov    rbp,QWORD PTR [rip+0x364de]        # 8a9a8 <enc_picture>
   544ca:	mov    DWORD PTR [rbx+0x1cc],0x0
   544d4:	lea    r11,[rip+0x619c5]        # b5ea0 <rec_resG>
   544db:	mov    QWORD PTR [rbx+0x1d0],0x0
   544e6:	lea    rbx,[rip+0x8b033]        # df520 <mpr8x8>
   544ed:	xor    eax,eax
   544ef:	jmp    54527 <SetCoeffAndReconstruction8x8+0x167>
   544f1:	mov    ecx,DWORD PTR [rdi+0x9c]
   544f7:	mov    r10,QWORD PTR [rbp+0x1918]
   544fe:	mov    edx,DWORD PTR [rdi+0x98]
   54504:	movzx  r9d,WORD PTR [rbx+rax*2]
   54509:	add    ecx,r8d
   5450c:	movsxd rcx,ecx
   5450f:	add    edx,eax
   54511:	add    rax,0x1
   54515:	mov    rcx,QWORD PTR [r10+rcx*8]
   54519:	movsxd rdx,edx
   5451c:	mov    WORD PTR [rcx+rdx*2],r9w
   54521:	cmp    rax,0x10
   54525:	je     54544 <SetCoeffAndReconstruction8x8+0x184>
   54527:	test   esi,esi
   54529:	je     544f1 <SetCoeffAndReconstruction8x8+0x131>
   5452b:	mov    rdx,rax
   5452e:	add    rax,0x1
   54532:	shl    rdx,0x6
   54536:	mov    DWORD PTR [r11+rdx*1],0x0
   5453e:	cmp    rax,0x10
   54542:	jne    54527 <SetCoeffAndReconstruction8x8+0x167>
   54544:	add    r8d,0x1
   54548:	add    rbx,0x20
   5454c:	add    r11,0x4
   54550:	cmp    r8d,0x10
   54554:	jne    544ed <SetCoeffAndReconstruction8x8+0x12d>
   54556:	lea    r11,[rip+0x8c183]        # e06e0 <mprRGB_8x8>
   5455d:	lea    rbx,[rip+0x6225c]        # b67c0 <mprRGB>
   54564:	lea    r10,[rip+0x8cd95]        # e1300 <resTrans_R_8x8>
   5456b:	lea    r9,[rip+0x5e56e]        # b2ae0 <resTrans_R>
   54572:	lea    r8,[rip+0x8dda7]        # e2320 <resTrans_B_8x8>
   54579:	lea    rdi,[rip+0x4c3e0]        # a0960 <resTrans_B>
   54580:	lea    rbp,[r11+0x40]
   54584:	mov    rcx,rbx
   54587:	mov    rdx,r11
   5458a:	xor    eax,eax
   5458c:	nop    DWORD PTR [rax+0x0]
   54590:	mov    esi,DWORD PTR [rdx]
   54592:	add    rcx,0x40
   54596:	add    rdx,0x40
   5459a:	mov    DWORD PTR [rcx-0x40],esi
   5459d:	mov    esi,DWORD PTR [rdx+0x3c0]
   545a3:	mov    DWORD PTR [rcx+0x3c0],esi
   545a9:	mov    esi,DWORD PTR [rdx+0x7c0]
   545af:	mov    DWORD PTR [rcx+0x7c0],esi
   545b5:	mov    esi,DWORD PTR [r10+rax*1]
   545b9:	mov    DWORD PTR [r9+rax*1],esi
   545bd:	mov    esi,DWORD PTR [r8+rax*1]
   545c1:	mov    DWORD PTR [rdi+rax*1],esi
   545c4:	add    rax,0x40
   545c8:	cmp    rax,0x400
   545ce:	jne    54590 <SetCoeffAndReconstruction8x8+0x1d0>
   545d0:	add    r11,0x4
   545d4:	add    rbx,0x4
   545d8:	add    r10,0x4
   545dc:	add    r9,0x4
   545e0:	add    r8,0x4
   545e4:	add    rdi,0x4
   545e8:	cmp    r11,rbp
   545eb:	jne    54584 <SetCoeffAndReconstruction8x8+0x1c4>
   545ed:	add    rsp,0x28
   545f1:	pop    rbx
   545f2:	pop    rbp
   545f3:	pop    r12
   545f5:	pop    r13
   545f7:	pop    r14
   545f9:	pop    r15
   545fb:	ret    
   545fc:	mov    ecx,DWORD PTR [rdi+0x18]
   545ff:	xor    edx,edx
   54601:	lea    rsi,[rip+0x8a1e8]        # de7f0 <part8x8mode>
   54608:	mov    DWORD PTR [rsp+0xc],ecx
   5460c:	lea    rcx,[rip+0x8d0f5]        # e1708 <part8x8pdir>
   54613:	mov    r8d,DWORD PTR [rsi+rdx*4]
   54617:	mov    DWORD PTR [rbx+rdx*4+0x1d8],r8d
   5461f:	movsx  r8d,WORD PTR [rcx+rdx*2]
   54624:	mov    DWORD PTR [rbx+rdx*4+0x1e8],r8d
   5462c:	add    rdx,0x1
   54630:	cmp    rdx,0x4
   54634:	jne    54613 <SetCoeffAndReconstruction8x8+0x253>
   54636:	mov    r8,QWORD PTR [rip+0x3636b]        # 8a9a8 <enc_picture>
   5463d:	cmp    DWORD PTR [rsp+0xc],0x1
   54642:	movsxd rcx,DWORD PTR [rdi+0x90]
   54649:	movsxd rdx,DWORD PTR [rdi+0x94]
   54650:	mov    r12,QWORD PTR [r8+0x1950]
   54657:	mov    r9,QWORD PTR [r12]
   5465b:	je     54ab5 <SetCoeffAndReconstruction8x8+0x6f5>
   54661:	lea    r11,[rdx+rdx*1]
   54665:	lea    r14,[r9+rcx*8]
   54669:	xor    edi,edi
   5466b:	lea    r10,[rip+0x8dc2e]        # e22a0 <part8x8fwref>
   54672:	mov    r13d,edi
   54675:	xor    ebp,ebp
   54677:	and    r13d,0xfffffffe
   5467b:	mov    esi,ebp
   5467d:	sar    esi,1
   5467f:	add    esi,r13d
   54682:	movsxd rsi,esi
   54685:	movzx  r15d,WORD PTR [r10+rsi*2]
   5468a:	mov    rsi,QWORD PTR [r14+rbp*8]
   5468e:	add    rbp,0x1
   54692:	mov    WORD PTR [rsi+r11*1],r15w
   54697:	cmp    rbp,0x4
   5469b:	jne    5467b <SetCoeffAndReconstruction8x8+0x2bb>
   5469d:	add    edi,0x1
   546a0:	add    r11,0x2
   546a4:	cmp    edi,0x4
   546a7:	jne    54672 <SetCoeffAndReconstruction8x8+0x2b2>
   546a9:	add    rdx,rdx
   546ac:	movsxd rsi,eax
   546af:	mov    r14,QWORD PTR [r8+0x1958]
   546b6:	shl    rcx,0x3
   546ba:	lea    rdi,[rdx+0x8]
   546be:	lea    rbp,[rcx+0x20]
   546c2:	mov    r10,rdx
   546c5:	mov    QWORD PTR [rsp+0x10],rdi
   546ca:	mov    rdi,rsi
   546cd:	mov    r13,QWORD PTR [r14]
   546d0:	shl    rdi,0x5
   546d4:	add    rdi,rsi
   546d7:	mov    QWORD PTR [rsp+0x18],rdi
   546dc:	lea    r15,[r10*4+0x0]
   546e4:	mov    rsi,rcx
   546e7:	mov    rdi,QWORD PTR [r9+rsi*1]
   546eb:	mov    r11,0xffffffffffffffff
   546f2:	movsx  rdi,WORD PTR [rdi+r10*1]
   546f7:	test   di,di
   546fa:	js     5470b <SetCoeffAndReconstruction8x8+0x34b>
   546fc:	mov    r11,QWORD PTR [rsp+0x18]
   54701:	lea    rdi,[rdi+r11*1+0x2]
   54706:	mov    r11,QWORD PTR [r8+rdi*8+0x8]
   5470b:	mov    rdi,QWORD PTR [r13+rsi*1+0x0]
   54710:	add    rsi,0x8
   54714:	mov    QWORD PTR [rdi+r15*1],r11
   54718:	cmp    rbp,rsi
   5471b:	jne    546e7 <SetCoeffAndReconstruction8x8+0x327>
   5471d:	add    r10,0x2
   54721:	cmp    QWORD PTR [rsp+0x10],r10
   54726:	jne    546dc <SetCoeffAndReconstruction8x8+0x31c>
   54728:	cmp    DWORD PTR [rsp+0xc],0x1
   5472d:	je     54b34 <SetCoeffAndReconstruction8x8+0x774>
   54733:	mov    edi,0x1
   54738:	call   53e20 <StoreMV8x8>
   5473d:	xor    edi,edi
   5473f:	call   54330 <RestoreMV8x8>
   54744:	mov    rdi,QWORD PTR [rip+0x33e65]        # 885b0 <img>
   5474b:	mov    r12,QWORD PTR [rip+0x349ae]        # 89100 <cofAC_8x8ts>
   54752:	xor    r9d,r9d
   54755:	mov    rbp,QWORD PTR [rdi+0x3738]
   5475c:	mov    r11,QWORD PTR [r12+r9*1]
   54760:	mov    r10,QWORD PTR [rbp+r9*1+0x0]
   54765:	xor    r8d,r8d
   54768:	mov    r13,QWORD PTR [r11+r8*1]
   5476c:	mov    r14,QWORD PTR [r10+r8*1]
   54770:	xor    eax,eax
   54772:	mov    rsi,QWORD PTR [r13+0x0]
   54776:	mov    rcx,QWORD PTR [r14]
   54779:	nop    DWORD PTR [rax+0x0]
   54780:	mov    edx,DWORD PTR [rsi+rax*1]
   54783:	mov    DWORD PTR [rcx+rax*1],edx
   54786:	add    rax,0x4
   5478a:	cmp    rax,0x104
   54790:	jne    54780 <SetCoeffAndReconstruction8x8+0x3c0>
   54792:	mov    rsi,QWORD PTR [r13+0x8]
   54796:	mov    rcx,QWORD PTR [r14+0x8]
   5479a:	xor    eax,eax
   5479c:	nop    DWORD PTR [rax+0x0]
   547a0:	mov    edx,DWORD PTR [rsi+rax*1]
   547a3:	mov    DWORD PTR [rcx+rax*1],edx
   547a6:	add    rax,0x4
   547aa:	cmp    rax,0x104
   547b0:	jne    547a0 <SetCoeffAndReconstruction8x8+0x3e0>
   547b2:	add    r8,0x8
   547b6:	cmp    r8,0x20
   547ba:	jne    54768 <SetCoeffAndReconstruction8x8+0x3a8>
   547bc:	add    r9,0x8
   547c0:	cmp    r9,0x20
   547c4:	jne    5475c <SetCoeffAndReconstruction8x8+0x39c>
   547c6:	cmp    DWORD PTR [rip+0x8a013],0x5        # de7e0 <cnt_nonz8_8x8ts>
   547cd:	jg     54a01 <SetCoeffAndReconstruction8x8+0x641>
   547d3:	mov    eax,DWORD PTR [rdi+0x11bdc]
   547d9:	add    eax,DWORD PTR [rdi+0x28]
   547dc:	je     549f3 <SetCoeffAndReconstruction8x8+0x633>
   547e2:	mov    esi,DWORD PTR [rdi+0x11c14]
   547e8:	xor    r10d,r10d
   547eb:	mov    rbp,QWORD PTR [rip+0x361b6]        # 8a9a8 <enc_picture>
   547f2:	mov    DWORD PTR [rbx+0x1cc],0x0
   547fc:	mov    QWORD PTR [rbx+0x1d0],0x0
   54807:	lea    r11,[rip+0x61692]        # b5ea0 <rec_resG>
   5480e:	lea    rbx,[rip+0x8d54b]        # e1d60 <mpr_8x8ts>
   54815:	xor    eax,eax
   54817:	jmp    54856 <SetCoeffAndReconstruction8x8+0x496>
   54819:	nop    DWORD PTR [rax+0x0]
   54820:	mov    ecx,DWORD PTR [rdi+0x9c]
   54826:	mov    r9,QWORD PTR [rbp+0x1918]
   5482d:	mov    edx,DWORD PTR [rdi+0x98]
   54833:	movzx  r8d,WORD PTR [rbx+rax*2]
   54838:	add    ecx,r10d
   5483b:	movsxd rcx,ecx
   5483e:	add    edx,eax
   54840:	add    rax,0x1
   54844:	mov    rcx,QWORD PTR [r9+rcx*8]
   54848:	movsxd rdx,edx
   5484b:	mov    WORD PTR [rcx+rdx*2],r8w
   54850:	cmp    rax,0x10
   54854:	je     54873 <SetCoeffAndReconstruction8x8+0x4b3>
   54856:	test   esi,esi
   54858:	je     54820 <SetCoeffAndReconstruction8x8+0x460>
   5485a:	mov    rdx,rax
   5485d:	add    rax,0x1
   54861:	shl    rdx,0x6
   54865:	mov    DWORD PTR [r11+rdx*1],0x0
   5486d:	cmp    rax,0x10
   54871:	jne    54856 <SetCoeffAndReconstruction8x8+0x496>
   54873:	add    r10d,0x1
   54877:	add    rbx,0x20
   5487b:	add    r11,0x4
   5487f:	cmp    r10d,0x10
   54883:	jne    54815 <SetCoeffAndReconstruction8x8+0x455>
   54885:	lea    r11,[rip+0x8b234]        # dfac0 <mprRGB_8x8ts>
   5488c:	lea    rbx,[rip+0x61f2d]        # b67c0 <mprRGB>
   54893:	lea    r10,[rip+0x89b46]        # de3e0 <resTrans_R_8x8ts>
   5489a:	lea    r9,[rip+0x5e23f]        # b2ae0 <resTrans_R>
   548a1:	lea    r8,[rip+0x8de98]        # e2740 <resTrans_B_8x8ts>
   548a8:	lea    rdi,[rip+0x4c0b1]        # a0960 <resTrans_B>
   548af:	lea    rbp,[r11+0x40]
   548b3:	mov    rcx,rbx
   548b6:	mov    rdx,r11
   548b9:	xor    eax,eax
   548bb:	nop    DWORD PTR [rax+rax*1+0x0]
   548c0:	mov    esi,DWORD PTR [rdx]
   548c2:	add    rcx,0x40
   548c6:	add    rdx,0x40
   548ca:	mov    DWORD PTR [rcx-0x40],esi
   548cd:	mov    esi,DWORD PTR [rdx+0x3c0]
   548d3:	mov    DWORD PTR [rcx+0x3c0],esi
   548d9:	mov    esi,DWORD PTR [rdx+0x7c0]
   548df:	mov    DWORD PTR [rcx+0x7c0],esi
   548e5:	mov    esi,DWORD PTR [r10+rax*1]
   548e9:	mov    DWORD PTR [r9+rax*1],esi
   548ed:	mov    esi,DWORD PTR [r8+rax*1]
   548f1:	mov    DWORD PTR [rdi+rax*1],esi
   548f4:	add    rax,0x40
   548f8:	cmp    rax,0x400
   548fe:	jne    548c0 <SetCoeffAndReconstruction8x8+0x500>
   54900:	add    r11,0x4
   54904:	add    rbx,0x4
   54908:	add    r10,0x4
   5490c:	add    r9,0x4
   54910:	add    r8,0x4
   54914:	add    rdi,0x4
   54918:	cmp    rbp,r11
   5491b:	jne    548b3 <SetCoeffAndReconstruction8x8+0x4f3>
   5491d:	add    rsp,0x28
   54921:	pop    rbx
   54922:	pop    rbp
   54923:	pop    r12
   54925:	pop    r13
   54927:	pop    r14
   54929:	pop    r15
   5492b:	ret    
   5492c:	mov    eax,DWORD PTR [rip+0x8b16e]        # dfaa0 <cbp8x8>
   54932:	mov    esi,DWORD PTR [rdi+0x11c14]
   54938:	lea    r11,[rip+0x8d741]        # e2080 <rec_mbY8x8>
   5493f:	lea    r10,[rip+0x8a2da]        # dec20 <rec_resG_8x8>
   54946:	lea    r9,[rip+0x61553]        # b5ea0 <rec_resG>
   5494d:	mov    DWORD PTR [rbx+0x1cc],eax
   54953:	movsxd rax,DWORD PTR [rip+0x8e6c6]        # e3020 <cbp_blk8x8>
   5495a:	mov    QWORD PTR [rbx+0x1d0],rax
   54961:	mov    rbx,QWORD PTR [rip+0x36040]        # 8a9a8 <enc_picture>
   54968:	xor    eax,eax
   5496a:	jmp    549a5 <SetCoeffAndReconstruction8x8+0x5e5>
   5496c:	nop    DWORD PTR [rax+0x0]
   54970:	mov    ecx,DWORD PTR [rdi+0x9c]
   54976:	mov    r12,QWORD PTR [rbx+0x1918]
   5497d:	mov    edx,DWORD PTR [rdi+0x98]
   54983:	movzx  ebp,WORD PTR [r11+rax*2]
   54988:	add    ecx,r8d
   5498b:	movsxd rcx,ecx
   5498e:	add    edx,eax
   54990:	add    rax,0x1
   54994:	mov    rcx,QWORD PTR [r12+rcx*8]
   54998:	movsxd rdx,edx
   5499b:	mov    WORD PTR [rcx+rdx*2],bp
   5499f:	cmp    rax,0x10
   549a3:	je     549c2 <SetCoeffAndReconstruction8x8+0x602>
   549a5:	test   esi,esi
   549a7:	je     54970 <SetCoeffAndReconstruction8x8+0x5b0>
   549a9:	mov    rdx,rax
   549ac:	add    rax,0x1
   549b0:	shl    rdx,0x6
   549b4:	mov    ecx,DWORD PTR [r10+rdx*1]
   549b8:	mov    DWORD PTR [r9+rdx*1],ecx
   549bc:	cmp    rax,0x10
   549c0:	jne    549a5 <SetCoeffAndReconstruction8x8+0x5e5>
   549c2:	add    r8d,0x1
   549c6:	add    r11,0x20
   549ca:	add    r10,0x4
   549ce:	add    r9,0x4
   549d2:	cmp    r8d,0x10
   549d6:	jne    54968 <SetCoeffAndReconstruction8x8+0x5a8>
   549d8:	jmp    54556 <SetCoeffAndReconstruction8x8+0x196>
   549dd:	mov    eax,DWORD PTR [rdi+0xc]
   549e0:	and    eax,0x1
   549e3:	cmp    eax,0x1
   549e6:	sbb    eax,eax
   549e8:	and    eax,0xfffffffe
   549eb:	add    eax,0x4
   549ee:	jmp    543f4 <SetCoeffAndReconstruction8x8+0x34>
   549f3:	mov    edx,DWORD PTR [rdi+0x11c00]
   549f9:	test   edx,edx
   549fb:	je     547e2 <SetCoeffAndReconstruction8x8+0x422>
   54a01:	mov    eax,DWORD PTR [rip+0x8a9d9]        # df3e0 <cbp8_8x8ts>
   54a07:	mov    esi,DWORD PTR [rdi+0x11c14]
   54a0d:	lea    r11,[rip+0x8cf2c]        # e1940 <rec_mbY_8x8ts>
   54a14:	lea    r10,[rip+0x89e05]        # de820 <rec_resG_8x8ts>
   54a1b:	lea    r9,[rip+0x6147e]        # b5ea0 <rec_resG>
   54a22:	xor    r8d,r8d
   54a25:	mov    DWORD PTR [rbx+0x1cc],eax
   54a2b:	mov    rax,QWORD PTR [rip+0x8ccce]        # e1700 <cbp_blk8_8x8ts>
   54a32:	mov    QWORD PTR [rbx+0x1d0],rax
   54a39:	mov    rbx,QWORD PTR [rip+0x35f68]        # 8a9a8 <enc_picture>
   54a40:	xor    eax,eax
   54a42:	jmp    54a7d <SetCoeffAndReconstruction8x8+0x6bd>
   54a44:	nop    DWORD PTR [rax+0x0]
   54a48:	mov    ecx,DWORD PTR [rdi+0x9c]
   54a4e:	mov    r12,QWORD PTR [rbx+0x1918]
   54a55:	mov    edx,DWORD PTR [rdi+0x98]
   54a5b:	movzx  ebp,WORD PTR [r11+rax*2]
   54a60:	add    ecx,r8d
   54a63:	movsxd rcx,ecx
   54a66:	add    edx,eax
   54a68:	add    rax,0x1
   54a6c:	mov    rcx,QWORD PTR [r12+rcx*8]
   54a70:	movsxd rdx,edx
   54a73:	mov    WORD PTR [rcx+rdx*2],bp
   54a77:	cmp    rax,0x10
   54a7b:	je     54a9a <SetCoeffAndReconstruction8x8+0x6da>
   54a7d:	test   esi,esi
   54a7f:	je     54a48 <SetCoeffAndReconstruction8x8+0x688>
   54a81:	mov    rdx,rax
   54a84:	add    rax,0x1
   54a88:	shl    rdx,0x6
   54a8c:	mov    ecx,DWORD PTR [r10+rdx*1]
   54a90:	mov    DWORD PTR [r9+rdx*1],ecx
   54a94:	cmp    rax,0x10
   54a98:	jne    54a7d <SetCoeffAndReconstruction8x8+0x6bd>
   54a9a:	add    r8d,0x1
   54a9e:	add    r11,0x20
   54aa2:	add    r10,0x4
   54aa6:	add    r9,0x4
   54aaa:	cmp    r8d,0x10
   54aae:	jne    54a40 <SetCoeffAndReconstruction8x8+0x680>
   54ab0:	jmp    54885 <SetCoeffAndReconstruction8x8+0x4c5>
   54ab5:	lea    r15,[rcx*8+0x0]
   54abd:	lea    rbp,[rdx+rdx*1]
   54ac1:	xor    r11d,r11d
   54ac4:	lea    r13,[r9+r15*1]
   54ac8:	lea    r10,[rip+0x8d7d1]        # e22a0 <part8x8fwref>
   54acf:	add    r15,QWORD PTR [r12+0x8]
   54ad4:	mov    edi,r11d
   54ad7:	mov    DWORD PTR [rsp+0x18],eax
   54adb:	xor    esi,esi
   54add:	and    edi,0xfffffffe
   54ae0:	mov    DWORD PTR [rsp+0x10],edi
   54ae4:	mov    edi,esi
   54ae6:	mov    r14,QWORD PTR [r13+rsi*8+0x0]
   54aeb:	sar    edi,1
   54aed:	add    edi,DWORD PTR [rsp+0x10]
   54af1:	movsxd rdi,edi
   54af4:	movzx  eax,WORD PTR [r10+rdi*2]
   54af9:	mov    WORD PTR [r14+rbp*1],ax
   54afe:	lea    rax,[rip+0x8e03b]        # e2b40 <part8x8bwref>
   54b05:	movzx  r14d,WORD PTR [rax+rdi*2]
   54b0a:	mov    rdi,QWORD PTR [r15+rsi*8]
   54b0e:	add    rsi,0x1
   54b12:	mov    WORD PTR [rdi+rbp*1],r14w
   54b17:	cmp    rsi,0x4
   54b1b:	jne    54ae4 <SetCoeffAndReconstruction8x8+0x724>
   54b1d:	add    r11d,0x1
   54b21:	mov    eax,DWORD PTR [rsp+0x18]
   54b25:	add    rbp,0x2
   54b29:	cmp    r11d,0x4
   54b2d:	jne    54ad4 <SetCoeffAndReconstruction8x8+0x714>
   54b2f:	jmp    546a9 <SetCoeffAndReconstruction8x8+0x2e9>
   54b34:	add    eax,0x1
   54b37:	mov    r9,QWORD PTR [r12+0x8]
   54b3c:	mov    r10,QWORD PTR [r14+0x8]
   54b40:	cdqe   
   54b42:	mov    rdi,rax
   54b45:	shl    rdi,0x5
   54b49:	add    rdi,rax
   54b4c:	lea    r12,[rdx*4+0x0]
   54b54:	mov    rax,rcx
   54b57:	mov    rsi,QWORD PTR [r9+rax*1]
   54b5b:	mov    r11,0xffffffffffffffff
   54b62:	movsx  rsi,WORD PTR [rsi+rdx*1]
   54b67:	test   si,si
   54b6a:	js     54b76 <SetCoeffAndReconstruction8x8+0x7b6>
   54b6c:	lea    rsi,[rsi+rdi*1+0x2]
   54b71:	mov    r11,QWORD PTR [r8+rsi*8+0x8]
   54b76:	mov    rsi,QWORD PTR [r10+rax*1]
   54b7a:	add    rax,0x8
   54b7e:	mov    QWORD PTR [rsi+r12*1],r11
   54b82:	cmp    rbp,rax
   54b85:	jne    54b57 <SetCoeffAndReconstruction8x8+0x797>
   54b87:	add    rdx,0x2
   54b8b:	cmp    QWORD PTR [rsp+0x10],rdx
   54b90:	jne    54b4c <SetCoeffAndReconstruction8x8+0x78c>
   54b92:	jmp    54733 <SetCoeffAndReconstruction8x8+0x373>
   54b97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000054ba0 <RDCost_for_macroblocks>:
   54ba0:	endbr64 
   54ba4:	push   r15
   54ba6:	push   r14
   54ba8:	push   r13
   54baa:	push   r12
   54bac:	push   rbp
   54bad:	push   rbx
   54bae:	mov    ebx,edi
   54bb0:	sub    rsp,0x68
   54bb4:	mov    QWORD PTR [rsp+0x20],rsi
   54bb9:	mov    DWORD PTR [rsp+0x3c],edx
   54bbd:	mov    rdx,QWORD PTR [rip+0x339ec]        # 885b0 <img>
   54bc4:	movsd  QWORD PTR [rsp+0x18],xmm0
   54bca:	mov    rsi,QWORD PTR [rdx+0x3758]
   54bd1:	mov    rax,QWORD PTR fs:0x28
   54bda:	mov    QWORD PTR [rsp+0x58],rax
   54bdf:	xor    eax,eax
   54be1:	movsxd rax,DWORD PTR [rdx+0xc]
   54be5:	mov    DWORD PTR [rsp+0x4c],0x0
   54bed:	mov    rcx,rax
   54bf0:	imul   rax,rax,0x278
   54bf7:	test   ecx,ecx
   54bf9:	lea    rdi,[rsi+rax*1]
   54bfd:	lea    rsi,[rsi+rax*1-0x278]
   54c05:	mov    eax,0x0
   54c0a:	cmovne rax,rsi
   54c0e:	mov    QWORD PTR [rsp+0x8],rdi
   54c13:	mov    QWORD PTR [rsp+0x28],rax
   54c18:	mov    eax,DWORD PTR [rdx+0x18]
   54c1b:	cmp    eax,0x1
   54c1e:	mov    DWORD PTR [rsp+0x38],eax
   54c22:	sete   bpl
   54c26:	cmp    eax,0x2
   54c29:	je     550d2 <RDCost_for_macroblocks+0x532>
   54c2f:	mov    rax,QWORD PTR [rip+0x33982]        # 885b8 <input>
   54c36:	mov    edi,ebx
   54c38:	cmp    DWORD PTR [rax+0x934],0x1
   54c3f:	setne  al
   54c42:	movzx  eax,al
   54c45:	mov    DWORD PTR [rsp+0x34],eax
   54c49:	call   51b80 <SetModesAndRefframeForBlocks>
   54c4e:	test   ebx,ebx
   54c50:	sete   al
   54c53:	mov    BYTE PTR [rsp+0x33],al
   54c57:	test   bpl,bpl
   54c5a:	je     550e8 <RDCost_for_macroblocks+0x548>
   54c60:	test   al,al
   54c62:	je     550e8 <RDCost_for_macroblocks+0x548>
   54c68:	mov    rdx,QWORD PTR [rip+0x33941]        # 885b0 <img>
   54c6f:	mov    rcx,QWORD PTR [rip+0x61202]        # b5e78 <direct_pdir>
   54c76:	mov    eax,DWORD PTR [rdx+0x98]
   54c7c:	sar    eax,0x2
   54c7f:	cdqe   
   54c81:	shl    rax,0x3
   54c85:	lea    rsi,[rcx+rax*1]
   54c89:	lea    rdi,[rcx+rax*1+0x20]
   54c8e:	mov    ecx,DWORD PTR [rdx+0x9c]
   54c94:	sar    ecx,0x2
   54c97:	movsxd rcx,ecx
   54c9a:	add    rcx,rcx
   54c9d:	lea    r8,[rcx+0x8]
   54ca1:	mov    rdx,QWORD PTR [rsi]
   54ca4:	lea    rax,[rdx+rcx*1]
   54ca8:	add    rdx,r8
   54cab:	cmp    WORD PTR [rax],0x0
   54caf:	js     552f9 <RDCost_for_macroblocks+0x759>
   54cb5:	add    rax,0x2
   54cb9:	cmp    rdx,rax
   54cbc:	jne    54cab <RDCost_for_macroblocks+0x10b>
   54cbe:	add    rsi,0x8
   54cc2:	cmp    rdi,rsi
   54cc5:	jne    54ca1 <RDCost_for_macroblocks+0x101>
   54cc7:	xor    eax,eax
   54cc9:	call   2a1a0 <LumaResidualCoding>
   54cce:	mov    rax,QWORD PTR [rsp+0x8]
   54cd3:	mov    r11d,DWORD PTR [rax+0x1cc]
   54cda:	test   r11d,r11d
   54cdd:	jne    54cf1 <RDCost_for_macroblocks+0x151>
   54cdf:	mov    rax,QWORD PTR [rsp+0x8]
   54ce4:	cmp    DWORD PTR [rax+0x23c],0x1
   54ceb:	je     552f9 <RDCost_for_macroblocks+0x759>
   54cf1:	mov    rax,QWORD PTR [rip+0x338c0]        # 885b8 <input>
   54cf8:	mov    rdi,QWORD PTR [rip+0x338b1]        # 885b0 <img>
   54cff:	mov    BYTE PTR [rsp+0x33],0x1
   54d04:	cmp    DWORD PTR [rax+0x9a0],0x2
   54d0b:	mov    r12,rdi
   54d0e:	je     55286 <RDCost_for_macroblocks+0x6e6>
   54d14:	cmp    ebx,0xa
   54d17:	jne    55133 <RDCost_for_macroblocks+0x593>
   54d1d:	movsxd rax,DWORD PTR [rsp+0x3c]
   54d22:	lea    rsi,[rip+0x34857]        # 89580 <line>
   54d29:	lea    r9,[rsi+0x40]
   54d2d:	mov    r10,rax
   54d30:	shl    rax,0x9
   54d34:	lea    r8,[rdi+rax*1+0x12b8]
   54d3c:	nop    DWORD PTR [rax+0x0]
   54d40:	lea    rax,[rsi-0x400]
   54d47:	mov    rdx,r8
   54d4a:	nop    WORD PTR [rax+rax*1+0x0]
   54d50:	movzx  ecx,WORD PTR [rdx]
   54d53:	add    rax,0x40
   54d57:	add    rdx,0x20
   54d5b:	mov    DWORD PTR [rax-0x40],ecx
   54d5e:	cmp    rsi,rax
   54d61:	jne    54d50 <RDCost_for_macroblocks+0x1b0>
   54d63:	add    rsi,0x4
   54d67:	add    r8,0x2
   54d6b:	cmp    r9,rsi
   54d6e:	jne    54d40 <RDCost_for_macroblocks+0x1a0>
   54d70:	mov    eax,DWORD PTR [rdi+0x11c14]
   54d76:	mov    DWORD PTR [rsp+0x54],0x0
   54d7e:	mov    DWORD PTR [rdi+0x11abc],0x0
   54d88:	test   eax,eax
   54d8a:	je     551a3 <RDCost_for_macroblocks+0x603>
   54d90:	mov    rax,QWORD PTR [rsp+0x8]
   54d95:	mov    eax,DWORD PTR [rax+0x1cc]
   54d9b:	mov    edx,eax
   54d9d:	and    edx,0xf
   54da0:	cmp    edx,0x1
   54da3:	sbb    edx,edx
   54da5:	sar    eax,0x2
   54da8:	and    edx,0xfffffff4
   54dab:	and    eax,0xc
   54dae:	lea    edx,[rdx+r10*1+0xd]
   54db3:	add    eax,edx
   54db5:	mov    DWORD PTR [r12+0x11abc],eax
   54dbd:	mov    rax,QWORD PTR [rip+0x337f4]        # 885b8 <input>
   54dc4:	cmp    DWORD PTR [rax+0x9a0],0x2
   54dcb:	jne    551d1 <RDCost_for_macroblocks+0x631>
   54dd1:	cmp    DWORD PTR [r12+0x18],0x1
   54dd7:	je     551d1 <RDCost_for_macroblocks+0x631>
   54ddd:	mov    ebx,DWORD PTR [rax+0xb58]
   54de3:	test   ebx,ebx
   54de5:	jle    5556f <RDCost_for_macroblocks+0x9cf>
   54deb:	xor    r13d,r13d
   54dee:	xor    ebx,ebx
   54df0:	mov    rsi,QWORD PTR [rsp+0x8]
   54df5:	mov    edi,r13d
   54df8:	call   13220 <decode_one_mb>
   54dfd:	mov    r12,QWORD PTR [rip+0x337ac]        # 885b0 <img>
   54e04:	mov    rax,QWORD PTR [rip+0x3378d]        # 88598 <decs>
   54e0b:	mov    r15,QWORD PTR [rip+0x625b6]        # b73c8 <imgY_org>
   54e12:	mov    rax,QWORD PTR [rax+0x8]
   54e16:	movsxd r10,DWORD PTR [r12+0xac]
   54e1e:	movsxd r11,DWORD PTR [r12+0xa8]
   54e26:	mov    r9,QWORD PTR [r12+0x11860]
   54e2e:	shl    r10,0x3
   54e32:	mov    r14,QWORD PTR [rax+r13*8]
   54e36:	add    r11,r11
   54e39:	lea    rbp,[r10+0x80]
   54e40:	lea    r8,[r11+0x20]
   54e44:	nop    DWORD PTR [rax+0x0]
   54e48:	mov    rsi,QWORD PTR [r15+r10*1]
   54e4c:	mov    rcx,QWORD PTR [r14+r10*1]
   54e50:	mov    rdx,r11
   54e53:	nop    DWORD PTR [rax+rax*1+0x0]
   54e58:	movzx  eax,WORD PTR [rsi+rdx*1]
   54e5c:	movzx  edi,WORD PTR [rcx+rdx*1]
   54e60:	add    rdx,0x2
   54e64:	sub    eax,edi
   54e66:	cdqe   
   54e68:	movsxd rax,DWORD PTR [r9+rax*4]
   54e6c:	add    rbx,rax
   54e6f:	cmp    r8,rdx
   54e72:	jne    54e58 <RDCost_for_macroblocks+0x2b8>
   54e74:	add    r10,0x8
   54e78:	cmp    rbp,r10
   54e7b:	jne    54e48 <RDCost_for_macroblocks+0x2a8>
   54e7d:	mov    rax,QWORD PTR [rip+0x33734]        # 885b8 <input>
   54e84:	add    r13,0x1
   54e88:	mov    eax,DWORD PTR [rax+0xb58]
   54e8e:	cmp    eax,r13d
   54e91:	jg     54df0 <RDCost_for_macroblocks+0x250>
   54e97:	movsxd rcx,eax
   54e9a:	mov    rax,rbx
   54e9d:	cqo    
   54e9f:	idiv   rcx
   54ea2:	mov    rbx,rax
   54ea5:	mov    r11d,DWORD PTR [r12+0x11bfc]
   54ead:	test   r11d,r11d
   54eb0:	je     54f8d <RDCost_for_macroblocks+0x3ed>
   54eb6:	mov    eax,DWORD PTR [r12+0x11c08]
   54ebe:	mov    DWORD PTR [rsp+0x14],eax
   54ec2:	test   eax,eax
   54ec4:	jle    54f8d <RDCost_for_macroblocks+0x3ed>
   54eca:	mov    r15d,DWORD PTR [r12+0xb0]
   54ed2:	mov    esi,DWORD PTR [r12+0x11c04]
   54eda:	xor    r11d,r11d
   54edd:	mov    rbp,QWORD PTR [rip+0x5dbec]        # b2ad0 <imgUV_org>
   54ee4:	mov    r13,QWORD PTR [rip+0x35abd]        # 8a9a8 <enc_picture>
   54eeb:	add    esi,r15d
   54eee:	cmp    r15d,esi
   54ef1:	jge    54f7e <RDCost_for_macroblocks+0x3de>
   54ef7:	mov    edx,DWORD PTR [r12+0xb4]
   54eff:	mov    rax,QWORD PTR [rbp+0x0]
   54f03:	mov    rdi,QWORD PTR [r13+0x1940]
   54f0a:	mov    rcx,QWORD PTR [r12+0x11860]
   54f12:	add    edx,r11d
   54f15:	movsxd rdx,edx
   54f18:	mov    r8,QWORD PTR [rdi]
   54f1b:	mov    r10,QWORD PTR [rax+rdx*8]
   54f1f:	mov    eax,DWORD PTR [r12+0xa4]
   54f27:	add    eax,r11d
   54f2a:	cdqe   
   54f2c:	mov    r9,QWORD PTR [r8+rax*8]
   54f30:	mov    r8,QWORD PTR [rbp+0x8]
   54f34:	mov    r8,QWORD PTR [r8+rdx*8]
   54f38:	mov    rdx,QWORD PTR [rdi+0x8]
   54f3c:	mov    rdi,QWORD PTR [rdx+rax*8]
   54f40:	movsxd rax,r15d
   54f43:	nop    DWORD PTR [rax+rax*1+0x0]
   54f48:	movzx  r14d,WORD PTR [r9+rax*2]
   54f4d:	movzx  edx,WORD PTR [r10+rax*2]
   54f52:	sub    edx,r14d
   54f55:	movzx  r14d,WORD PTR [rdi+rax*2]
   54f5a:	movsxd rdx,edx
   54f5d:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   54f61:	add    rbx,rdx
   54f64:	movzx  edx,WORD PTR [r8+rax*2]
   54f69:	add    rax,0x1
   54f6d:	sub    edx,r14d
   54f70:	movsxd rdx,edx
   54f73:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   54f77:	add    rbx,rdx
   54f7a:	cmp    esi,eax
   54f7c:	jg     54f48 <RDCost_for_macroblocks+0x3a8>
   54f7e:	add    r11d,0x1
   54f82:	cmp    r11d,DWORD PTR [rsp+0x14]
   54f87:	jne    54eee <RDCost_for_macroblocks+0x34e>
   54f8d:	mov    rdi,QWORD PTR [rip+0x34194]        # 89128 <cs_cm>
   54f94:	call   5d450 <store_coding_state>
   54f99:	mov    r10d,DWORD PTR [rsp+0x34]
   54f9e:	test   r10d,r10d
   54fa1:	je     5530a <RDCost_for_macroblocks+0x76a>
   54fa7:	mov    rax,QWORD PTR [rsp+0x8]
   54fac:	mov    r9d,DWORD PTR [rax+0x48]
   54fb0:	test   r9d,r9d
   54fb3:	jne    5531d <RDCost_for_macroblocks+0x77d>
   54fb9:	cmp    DWORD PTR [rsp+0x38],0x1
   54fbe:	jne    54fd0 <RDCost_for_macroblocks+0x430>
   54fc0:	mov    r8d,DWORD PTR [rax+0x1cc]
   54fc7:	test   r8d,r8d
   54fca:	jne    5531d <RDCost_for_macroblocks+0x77d>
   54fd0:	mov    rax,QWORD PTR [rip+0x335d9]        # 885b0 <img>
   54fd7:	mov    esi,DWORD PTR [rsp+0x54]
   54fdb:	lea    r12,[rsp+0x54]
   54fe0:	lea    rdx,[rsp+0x4c]
   54fe5:	mov    rcx,r12
   54fe8:	mov    edi,DWORD PTR [rax+0x78]
   54feb:	add    edi,0x1
   54fee:	call   662b0 <ue_linfo>
   54ff3:	mov    rax,QWORD PTR [rip+0x335b6]        # 885b0 <img>
   54ffa:	mov    esi,DWORD PTR [rsp+0x54]
   54ffe:	mov    rcx,r12
   55001:	lea    rdx,[rsp+0x50]
   55006:	mov    edi,DWORD PTR [rax+0x78]
   55009:	call   662b0 <ue_linfo>
   5500e:	mov    eax,DWORD PTR [rsp+0x50]
   55012:	sub    DWORD PTR [rsp+0x4c],eax
   55016:	mov    rdi,QWORD PTR [rip+0x3410b]        # 89128 <cs_cm>
   5501d:	call   5d750 <reset_coding_state>
   55022:	mov    eax,DWORD PTR [rsp+0x4c]
   55026:	pxor   xmm1,xmm1
   5502a:	movsd  xmm0,QWORD PTR [rip+0x1de26]        # 72e58 <quant_coef+0x198>
   55032:	cvtsi2sd xmm1,rbx
   55037:	test   eax,eax
   55039:	jle    55043 <RDCost_for_macroblocks+0x4a3>
   5503b:	pxor   xmm0,xmm0
   5503f:	cvtsi2sd xmm0,eax
   55043:	mulsd  xmm0,QWORD PTR [rsp+0x18]
   55049:	mov    rax,QWORD PTR [rsp+0x20]
   5504e:	addsd  xmm0,xmm1
   55052:	movapd xmm1,xmm0
   55056:	subsd  xmm1,QWORD PTR [rax]
   5505a:	comisd xmm1,QWORD PTR [rip+0x2264e]        # 776b0 <b8_mode_table.7699+0x50>
   55062:	jae    552f9 <RDCost_for_macroblocks+0x759>
   55068:	mov    rax,QWORD PTR [rip+0x33541]        # 885b0 <img>
   5506f:	mov    edx,DWORD PTR [rax+0x11bdc]
   55075:	add    edx,DWORD PTR [rax+0x28]
   55078:	jne    5508c <RDCost_for_macroblocks+0x4ec>
   5507a:	cmp    DWORD PTR [rax+0x11c00],0x1
   55081:	jne    5508c <RDCost_for_macroblocks+0x4ec>
   55083:	test   rbx,rbx
   55086:	jne    552f9 <RDCost_for_macroblocks+0x759>
   5508c:	mov    edi,DWORD PTR [rax+0x11ad0]
   55092:	test   edi,edi
   55094:	je     550a1 <RDCost_for_macroblocks+0x501>
   55096:	cmp    BYTE PTR [rsp+0x33],0x0
   5509b:	jne    552b2 <RDCost_for_macroblocks+0x712>
   550a1:	mov    rax,QWORD PTR [rsp+0x20]
   550a6:	movsd  QWORD PTR [rax],xmm0
   550aa:	mov    eax,0x1
   550af:	mov    rbx,QWORD PTR [rsp+0x58]
   550b4:	xor    rbx,QWORD PTR fs:0x28
   550bd:	jne    55576 <RDCost_for_macroblocks+0x9d6>
   550c3:	add    rsp,0x68
   550c7:	pop    rbx
   550c8:	pop    rbp
   550c9:	pop    r12
   550cb:	pop    r13
   550cd:	pop    r14
   550cf:	pop    r15
   550d1:	ret    
   550d2:	mov    edi,ebx
   550d4:	call   51b80 <SetModesAndRefframeForBlocks>
   550d9:	mov    DWORD PTR [rsp+0x34],0x0
   550e1:	test   ebx,ebx
   550e3:	sete   BYTE PTR [rsp+0x33]
   550e8:	cmp    ebx,0x7
   550eb:	jle    55377 <RDCost_for_macroblocks+0x7d7>
   550f1:	cmp    ebx,0x8
   550f4:	je     5525e <RDCost_for_macroblocks+0x6be>
   550fa:	cmp    ebx,0x9
   550fd:	je     55390 <RDCost_for_macroblocks+0x7f0>
   55103:	cmp    ebx,0xa
   55106:	je     55446 <RDCost_for_macroblocks+0x8a6>
   5510c:	cmp    ebx,0xd
   5510f:	je     55486 <RDCost_for_macroblocks+0x8e6>
   55115:	mov    rax,QWORD PTR [rip+0x3349c]        # 885b8 <input>
   5511c:	mov    rdi,QWORD PTR [rip+0x3348d]        # 885b0 <img>
   55123:	cmp    DWORD PTR [rax+0x9a0],0x2
   5512a:	mov    r12,rdi
   5512d:	je     55286 <RDCost_for_macroblocks+0x6e6>
   55133:	lea    rsi,[rip+0x34446]        # 89580 <line>
   5513a:	lea    r8,[rdi+0x3138]
   55141:	lea    r9,[rsi+0x40]
   55145:	nop    DWORD PTR [rax]
   55148:	lea    rax,[rsi-0x400]
   5514f:	mov    rdx,r8
   55152:	nop    WORD PTR [rax+rax*1+0x0]
   55158:	movzx  ecx,WORD PTR [rdx]
   5515b:	add    rax,0x40
   5515f:	add    rdx,0x2
   55163:	mov    DWORD PTR [rax-0x40],ecx
   55166:	cmp    rsi,rax
   55169:	jne    55158 <RDCost_for_macroblocks+0x5b8>
   5516b:	add    rsi,0x4
   5516f:	add    r8,0x20
   55173:	cmp    r9,rsi
   55176:	jne    55148 <RDCost_for_macroblocks+0x5a8>
   55178:	mov    r13d,DWORD PTR [rdi+0x11c14]
   5517f:	mov    DWORD PTR [rsp+0x54],0x0
   55187:	mov    DWORD PTR [rdi+0x11abc],0x0
   55191:	test   r13d,r13d
   55194:	je     551a3 <RDCost_for_macroblocks+0x603>
   55196:	lea    eax,[rbx-0x9]
   55199:	cmp    eax,0x1
   5519c:	jbe    551b4 <RDCost_for_macroblocks+0x614>
   5519e:	cmp    ebx,0xd
   551a1:	je     551b4 <RDCost_for_macroblocks+0x614>
   551a3:	mov    ebp,DWORD PTR [rdi+0x11bfc]
   551a9:	mov    r12,rdi
   551ac:	test   ebp,ebp
   551ae:	jne    55361 <RDCost_for_macroblocks+0x7c1>
   551b4:	cmp    ebx,0xa
   551b7:	je     55300 <RDCost_for_macroblocks+0x760>
   551bd:	mov    rax,QWORD PTR [rip+0x333f4]        # 885b8 <input>
   551c4:	cmp    DWORD PTR [rax+0x9a0],0x2
   551cb:	je     54dd1 <RDCost_for_macroblocks+0x231>
   551d1:	movsxd rdx,DWORD PTR [r12+0xac]
   551d9:	xor    r10d,r10d
   551dc:	xor    ebx,ebx
   551de:	mov    rax,QWORD PTR [rip+0x621e3]        # b73c8 <imgY_org>
   551e5:	movsxd r11,DWORD PTR [r12+0xa8]
   551ed:	mov    r9,QWORD PTR [r12+0x11860]
   551f5:	lea    r13,[rax+rdx*8]
   551f9:	mov    rax,QWORD PTR [rip+0x357a8]        # 8a9a8 <enc_picture>
   55200:	movsxd rdx,DWORD PTR [r12+0x9c]
   55208:	add    r11,r11
   5520b:	mov    rax,QWORD PTR [rax+0x1918]
   55212:	lea    r8,[r11+0x20]
   55216:	lea    rbp,[rax+rdx*8]
   5521a:	nop    WORD PTR [rax+rax*1+0x0]
   55220:	mov    rsi,QWORD PTR [r13+r10*1+0x0]
   55225:	mov    rcx,QWORD PTR [rbp+r10*1+0x0]
   5522a:	mov    rdx,r11
   5522d:	nop    DWORD PTR [rax]
   55230:	movzx  eax,WORD PTR [rsi+rdx*1]
   55234:	movzx  edi,WORD PTR [rcx+rdx*1]
   55238:	add    rdx,0x2
   5523c:	sub    eax,edi
   5523e:	cdqe   
   55240:	movsxd rax,DWORD PTR [r9+rax*4]
   55244:	add    rbx,rax
   55247:	cmp    r8,rdx
   5524a:	jne    55230 <RDCost_for_macroblocks+0x690>
   5524c:	add    r10,0x8
   55250:	cmp    r10,0x80
   55257:	jne    55220 <RDCost_for_macroblocks+0x680>
   55259:	jmp    54ea5 <RDCost_for_macroblocks+0x305>
   5525e:	mov    rdi,QWORD PTR [rsp+0x8]
   55263:	call   543c0 <SetCoeffAndReconstruction8x8>
   55268:	mov    rdi,QWORD PTR [rip+0x33341]        # 885b0 <img>
   5526f:	mov    r12,rdi
   55272:	mov    rax,QWORD PTR [rip+0x3333f]        # 885b8 <input>
   55279:	cmp    DWORD PTR [rax+0x9a0],0x2
   55280:	jne    55133 <RDCost_for_macroblocks+0x593>
   55286:	cmp    DWORD PTR [rdi+0x18],0x1
   5528a:	je     54d14 <RDCost_for_macroblocks+0x174>
   55290:	mov    edi,0xffffffff
   55295:	cmp    ebx,0xa
   55298:	je     5547d <RDCost_for_macroblocks+0x8dd>
   5529e:	call   14230 <compute_residue_mb>
   552a3:	mov    rdi,QWORD PTR [rip+0x33306]        # 885b0 <img>
   552aa:	mov    r12,rdi
   552ad:	jmp    54d14 <RDCost_for_macroblocks+0x174>
   552b2:	mov    edx,DWORD PTR [rax+0x18]
   552b5:	cmp    edx,0x1
   552b8:	je     55544 <RDCost_for_macroblocks+0x9a4>
   552be:	test   BYTE PTR [rax+0xc],0x1
   552c2:	je     550a1 <RDCost_for_macroblocks+0x501>
   552c8:	mov    rax,QWORD PTR [rsp+0x28]
   552cd:	mov    ecx,DWORD PTR [rax+0x48]
   552d0:	test   ecx,ecx
   552d2:	jne    550a1 <RDCost_for_macroblocks+0x501>
   552d8:	cmp    edx,0x1
   552db:	je     5555c <RDCost_for_macroblocks+0x9bc>
   552e1:	xor    eax,eax
   552e3:	call   53920 <field_flag_inference>
   552e8:	mov    rbx,QWORD PTR [rsp+0x8]
   552ed:	cmp    eax,DWORD PTR [rbx+0x214]
   552f3:	je     550a1 <RDCost_for_macroblocks+0x501>
   552f9:	xor    eax,eax
   552fb:	jmp    550af <RDCost_for_macroblocks+0x50f>
   55300:	mov    r10d,DWORD PTR [rsp+0x3c]
   55305:	jmp    54d90 <RDCost_for_macroblocks+0x1f0>
   5530a:	mov    edi,0x1
   5530f:	call   2eca0 <writeMBLayer>
   55314:	mov    DWORD PTR [rsp+0x4c],eax
   55318:	jmp    55016 <RDCost_for_macroblocks+0x476>
   5531d:	mov    rax,QWORD PTR [rip+0x3328c]        # 885b0 <img>
   55324:	mov    edi,0x1
   55329:	mov    ebp,DWORD PTR [rax+0x78]
   5532c:	call   2eca0 <writeMBLayer>
   55331:	mov    esi,DWORD PTR [rsp+0x54]
   55335:	lea    rcx,[rsp+0x54]
   5533a:	lea    rdx,[rsp+0x50]
   5533f:	mov    edi,ebp
   55341:	mov    DWORD PTR [rsp+0x4c],eax
   55345:	call   662b0 <ue_linfo>
   5534a:	mov    eax,DWORD PTR [rsp+0x50]
   5534e:	sub    DWORD PTR [rsp+0x4c],eax
   55352:	mov    rax,QWORD PTR [rip+0x33257]        # 885b0 <img>
   55359:	mov    DWORD PTR [rax+0x78],ebp
   5535c:	jmp    55016 <RDCost_for_macroblocks+0x476>
   55361:	lea    rdi,[rsp+0x54]
   55366:	call   2a3c0 <ChromaResidualCoding>
   5536b:	mov    r12,QWORD PTR [rip+0x3323e]        # 885b0 <img>
   55372:	jmp    551b4 <RDCost_for_macroblocks+0x614>
   55377:	xor    eax,eax
   55379:	call   2a1a0 <LumaResidualCoding>
   5537e:	cmp    BYTE PTR [rsp+0x33],0x0
   55383:	je     55268 <RDCost_for_macroblocks+0x6c8>
   55389:	jmp    54cce <RDCost_for_macroblocks+0x12e>
   5538e:	xchg   ax,ax
   55390:	movsd  xmm0,QWORD PTR [rsp+0x18]
   55396:	lea    rdi,[rsp+0x54]
   5539b:	call   50f30 <Mode_Decision_for_Intra4x4Macroblock>
   553a0:	mov    rdi,QWORD PTR [rip+0x33209]        # 885b0 <img>
   553a7:	mov    rsi,QWORD PTR [rsp+0x8]
   553ac:	mov    r10d,DWORD PTR [rdi+0x11c14]
   553b3:	mov    DWORD PTR [rsi+0x1cc],eax
   553b9:	mov    r12,rdi
   553bc:	test   r10d,r10d
   553bf:	je     55272 <RDCost_for_macroblocks+0x6d2>
   553c5:	lea    rax,[rip+0x49d04]        # 9f0d0 <cbp_chroma_block+0x10>
   553cc:	xor    esi,esi
   553ce:	mov    r8d,0x2
   553d4:	lea    rdi,[rax+0x40]
   553d8:	mov    rdx,rax
   553db:	lea    rcx,[rdx-0x10]
   553df:	mov    r9d,DWORD PTR [rcx]
   553e2:	test   r9d,r9d
   553e5:	cmovne esi,r8d
   553e9:	add    rcx,0x4
   553ed:	cmp    rdx,rcx
   553f0:	jne    553df <RDCost_for_macroblocks+0x83f>
   553f2:	add    rdx,0x10
   553f6:	cmp    rdi,rdx
   553f9:	jne    553db <RDCost_for_macroblocks+0x83b>
   553fb:	mov    ecx,0x2
   55400:	lea    rdx,[rax-0x10]
   55404:	mov    r8d,DWORD PTR [rdx+0x40]
   55408:	test   r8d,r8d
   5540b:	cmovne esi,ecx
   5540e:	add    rdx,0x4
   55412:	cmp    rax,rdx
   55415:	jne    55404 <RDCost_for_macroblocks+0x864>
   55417:	add    rax,0x10
   5541b:	cmp    rdi,rax
   5541e:	jne    55400 <RDCost_for_macroblocks+0x860>
   55420:	xor    edi,edi
   55422:	call   a830 <dct_chroma_DC>
   55427:	mov    edi,0x1
   5542c:	mov    esi,eax
   5542e:	call   a830 <dct_chroma_DC>
   55433:	mov    rsi,QWORD PTR [rsp+0x8]
   55438:	shl    eax,0x4
   5543b:	add    DWORD PTR [rsi+0x1cc],eax
   55441:	jmp    55115 <RDCost_for_macroblocks+0x575>
   55446:	mov    rdi,QWORD PTR [rsp+0x8]
   5544b:	lea    rsi,[rsp+0x3c]
   55450:	call   52330 <Intra16x16_Mode_Decision>
   55455:	mov    rax,QWORD PTR [rip+0x3315c]        # 885b8 <input>
   5545c:	mov    rdi,QWORD PTR [rip+0x3314d]        # 885b0 <img>
   55463:	cmp    DWORD PTR [rax+0x9a0],0x2
   5546a:	mov    r12,rdi
   5546d:	jne    54d1d <RDCost_for_macroblocks+0x17d>
   55473:	cmp    DWORD PTR [rdi+0x18],0x1
   55477:	je     54d1d <RDCost_for_macroblocks+0x17d>
   5547d:	mov    edi,DWORD PTR [rsp+0x3c]
   55481:	jmp    5529e <RDCost_for_macroblocks+0x6fe>
   55486:	movsd  xmm0,QWORD PTR [rsp+0x18]
   5548c:	lea    rdi,[rsp+0x54]
   55491:	call   661b0 <Mode_Decision_for_new_Intra8x8Macroblock>
   55496:	mov    rdi,QWORD PTR [rip+0x33113]        # 885b0 <img>
   5549d:	mov    rsi,QWORD PTR [rsp+0x8]
   554a2:	mov    DWORD PTR [rsi+0x1cc],eax
   554a8:	mov    eax,DWORD PTR [rdi+0x11c14]
   554ae:	mov    r12,rdi
   554b1:	test   eax,eax
   554b3:	je     55272 <RDCost_for_macroblocks+0x6d2>
   554b9:	lea    rax,[rip+0x49c10]        # 9f0d0 <cbp_chroma_block+0x10>
   554c0:	xor    esi,esi
   554c2:	mov    r8d,0x2
   554c8:	lea    rdi,[rax+0x40]
   554cc:	mov    rdx,rax
   554cf:	lea    rcx,[rdx-0x10]
   554d3:	mov    r15d,DWORD PTR [rcx]
   554d6:	test   r15d,r15d
   554d9:	cmovne esi,r8d
   554dd:	add    rcx,0x4
   554e1:	cmp    rdx,rcx
   554e4:	jne    554d3 <RDCost_for_macroblocks+0x933>
   554e6:	add    rdx,0x10
   554ea:	cmp    rdx,rdi
   554ed:	jne    554cf <RDCost_for_macroblocks+0x92f>
   554ef:	mov    ecx,0x2
   554f4:	lea    rdx,[rax-0x10]
   554f8:	mov    r14d,DWORD PTR [rdx+0x40]
   554fc:	test   r14d,r14d
   554ff:	cmovne esi,ecx
   55502:	add    rdx,0x4
   55506:	cmp    rax,rdx
   55509:	jne    554f8 <RDCost_for_macroblocks+0x958>
   5550b:	add    rax,0x10
   5550f:	cmp    rax,rdi
   55512:	jne    554f4 <RDCost_for_macroblocks+0x954>
   55514:	xor    edi,edi
   55516:	call   a830 <dct_chroma_DC>
   5551b:	mov    edi,0x1
   55520:	mov    esi,eax
   55522:	call   a830 <dct_chroma_DC>
   55527:	mov    rsi,QWORD PTR [rsp+0x8]
   5552c:	mov    rdi,QWORD PTR [rip+0x3307d]        # 885b0 <img>
   55533:	shl    eax,0x4
   55536:	mov    r12,rdi
   55539:	add    DWORD PTR [rsi+0x1cc],eax
   5553f:	jmp    55272 <RDCost_for_macroblocks+0x6d2>
   55544:	mov    rbx,QWORD PTR [rsp+0x8]
   55549:	mov    esi,DWORD PTR [rbx+0x1cc]
   5554f:	test   esi,esi
   55551:	jne    550a1 <RDCost_for_macroblocks+0x501>
   55557:	jmp    552be <RDCost_for_macroblocks+0x71e>
   5555c:	mov    edx,DWORD PTR [rax+0x1cc]
   55562:	test   edx,edx
   55564:	jne    550a1 <RDCost_for_macroblocks+0x501>
   5556a:	jmp    552e1 <RDCost_for_macroblocks+0x741>
   5556f:	xor    ebx,ebx
   55571:	jmp    54ea5 <RDCost_for_macroblocks+0x305>
   55576:	call   4390 <__stack_chk_fail@plt>
   5557b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000055580 <set_stored_macroblock_parameters>:
   55580:	endbr64 
   55584:	push   r15
   55586:	push   r14
   55588:	push   r13
   5558a:	push   r12
   5558c:	push   rbp
   5558d:	push   rbx
   5558e:	sub    rsp,0x88
   55595:	mov    rax,QWORD PTR [rip+0x33014]        # 885b0 <img>
   5559c:	mov    ebx,DWORD PTR [rip+0x8d17e]        # e2720 <best_mode>
   555a2:	mov    rcx,QWORD PTR [rip+0x353ff]        # 8a9a8 <enc_picture>
   555a9:	mov    DWORD PTR [rsp+0x44],0x0
   555b1:	movsxd rbp,DWORD PTR [rax+0xc]
   555b5:	mov    esi,DWORD PTR [rax+0x11ad0]
   555bb:	mov    DWORD PTR [rsp+0x38],ebx
   555bf:	mov    ebx,DWORD PTR [rax+0x18]
   555c2:	mov    r14,QWORD PTR [rax+0x68]
   555c6:	mov    rdx,rbp
   555c9:	imul   rbp,rbp,0x278
   555d0:	add    rbp,QWORD PTR [rax+0x3758]
   555d7:	mov    rdi,QWORD PTR [rcx+0x1918]
   555de:	cmp    ebx,0x1
   555e1:	mov    DWORD PTR [rsp+0x60],ebx
   555e5:	mov    r13,QWORD PTR [rcx+0x1940]
   555ec:	sete   bl
   555ef:	movzx  ebx,bl
   555f2:	mov    DWORD PTR [rsp+0x6c],ebx
   555f6:	test   esi,esi
   555f8:	je     5560c <set_stored_macroblock_parameters+0x8c>
   555fa:	mov    ebx,DWORD PTR [rbp+0x214]
   55600:	mov    DWORD PTR [rsp+0x44],ebx
   55604:	test   ebx,ebx
   55606:	jne    55eea <set_stored_macroblock_parameters+0x96a>
   5560c:	mov    r12,QWORD PTR [rip+0x4b74d]        # a0d60 <rdopt>
   55613:	movsxd rdx,DWORD PTR [rax+0x9c]
   5561a:	lea    rcx,[rip+0x8d53f]        # e2b60 <rec_mbY>
   55621:	movsxd r11,DWORD PTR [rax+0x98]
   55628:	lea    rbx,[rcx+0x200]
   5562f:	lea    r10,[rdi+rdx*8]
   55633:	mov    r9,r12
   55636:	add    r11,r11
   55639:	mov    r8,QWORD PTR [r10]
   5563c:	xor    edx,edx
   5563e:	add    r8,r11
   55641:	nop    DWORD PTR [rax+0x0]
   55648:	movzx  edi,WORD PTR [rcx+rdx*1]
   5564c:	mov    WORD PTR [r8+rdx*1],di
   55651:	test   esi,esi
   55653:	je     5565e <set_stored_macroblock_parameters+0xde>
   55655:	movzx  edi,WORD PTR [rcx+rdx*1]
   55659:	mov    DWORD PTR [r9+rdx*2+0x8],edi
   5565e:	add    rdx,0x2
   55662:	cmp    rdx,0x20
   55666:	jne    55648 <set_stored_macroblock_parameters+0xc8>
   55668:	add    rcx,0x20
   5566c:	add    r10,0x8
   55670:	add    r9,0x40
   55674:	cmp    rbx,rcx
   55677:	jne    55639 <set_stored_macroblock_parameters+0xb9>
   55679:	mov    ecx,DWORD PTR [rax+0x11bfc]
   5567f:	test   ecx,ecx
   55681:	je     55763 <set_stored_macroblock_parameters+0x1e3>
   55687:	mov    ebx,DWORD PTR [rax+0x11c08]
   5568d:	mov    DWORD PTR [rsp+0x8],ebx
   55691:	test   ebx,ebx
   55693:	jle    55763 <set_stored_macroblock_parameters+0x1e3>
   55699:	mov    ebx,DWORD PTR [rax+0x11c04]
   5569f:	mov    QWORD PTR [rsp],0x0
   556a7:	xor    r15d,r15d
   556aa:	lea    rdi,[rip+0x8d76f]        # e2e20 <rec_mbU>
   556b1:	lea    rcx,[rip+0x8a088]        # df740 <rec_mbV>
   556b8:	lea    edx,[rbx-0x1]
   556bb:	lea    r9,[rdx+rdx*1+0x2]
   556c0:	test   ebx,ebx
   556c2:	jle    5574b <set_stored_macroblock_parameters+0x1cb>
   556c8:	mov    r10,QWORD PTR [rsp]
   556cc:	mov    r11d,DWORD PTR [rax+0xa4]
   556d3:	movsxd r8,DWORD PTR [rax+0xa0]
   556da:	mov    rdx,r10
   556dd:	add    r11d,r15d
   556e0:	lea    r8,[r10+r8*2]
   556e4:	mov    r10,QWORD PTR [r13+0x0]
   556e8:	movsxd r11,r11d
   556eb:	neg    rdx
   556ee:	mov    QWORD PTR [rsp+0x10],rdx
   556f3:	mov    rdx,QWORD PTR [r10+r11*8]
   556f7:	add    rdx,r8
   556fa:	mov    r10,rdx
   556fd:	mov    rdx,QWORD PTR [r13+0x8]
   55701:	add    r8,QWORD PTR [rdx+r11*8]
   55705:	mov    rdx,QWORD PTR [rsp+0x10]
   5570a:	nop    WORD PTR [rax+rax*1+0x0]
   55710:	movzx  r11d,WORD PTR [rdi+rdx*1]
   55715:	mov    WORD PTR [r10+rdx*1],r11w
   5571a:	movzx  r11d,WORD PTR [rcx+rdx*1]
   5571f:	mov    WORD PTR [r8+rdx*1],r11w
   55724:	test   esi,esi
   55726:	je     55742 <set_stored_macroblock_parameters+0x1c2>
   55728:	movzx  r11d,WORD PTR [rdi+rdx*1]
   5572d:	mov    DWORD PTR [r12+rdx*2+0x408],r11d
   55735:	movzx  r11d,WORD PTR [rcx+rdx*1]
   5573a:	mov    DWORD PTR [r12+rdx*2+0x808],r11d
   55742:	add    rdx,0x2
   55746:	cmp    r9,rdx
   55749:	jne    55710 <set_stored_macroblock_parameters+0x190>
   5574b:	sub    QWORD PTR [rsp],0x20
   55750:	add    r15d,0x1
   55754:	add    r9,0x20
   55758:	cmp    DWORD PTR [rsp+0x8],r15d
   5575d:	jne    556c0 <set_stored_macroblock_parameters+0x140>
   55763:	mov    rdx,QWORD PTR [rax+0x3738]
   5576a:	mov    r15,QWORD PTR [rip+0x339ef]        # 89160 <cofAC>
   55771:	mov    r13,QWORD PTR [rip+0x339d8]        # 89150 <cofDC>
   55778:	mov    ebx,DWORD PTR [rsp+0x38]
   5577c:	mov    QWORD PTR [rip+0x339dd],rdx        # 89160 <cofAC>
   55783:	mov    rdx,QWORD PTR [rax+0x3740]
   5578a:	mov    edi,DWORD PTR [rip+0x89d78]        # df508 <cbp>
   55790:	mov    QWORD PTR [rax+0x3738],r15
   55797:	mov    ecx,ebx
   55799:	mov    QWORD PTR [rip+0x339b0],rdx        # 89150 <cofDC>
   557a0:	mov    rdx,QWORD PTR [rip+0x89f79]        # df720 <cbp_blk>
   557a7:	mov    QWORD PTR [rax+0x3740],r13
   557ae:	mov    DWORD PTR [rbp+0x1cc],edi
   557b4:	mov    QWORD PTR [rbp+0x1d0],rdx
   557bb:	mov    DWORD PTR [rbp+0x48],ebx
   557be:	test   esi,esi
   557c0:	je     55924 <set_stored_macroblock_parameters+0x3a4>
   557c6:	mov    ecx,DWORD PTR [rax+0x11abc]
   557cc:	mov    QWORD PTR [r12+0xc90],rdx
   557d4:	mov    edx,DWORD PTR [rbp+0x250]
   557da:	cmp    DWORD PTR [rax+0x11bf4],0xfffffffd
   557e1:	mov    DWORD PTR [r12+0xc98],ebx
   557e9:	mov    DWORD PTR [r12+0xd00],ecx
   557f1:	mov    DWORD PTR [r12+0xd14],edx
   557f9:	mov    edx,DWORD PTR [rbp+0x254]
   557ff:	mov    DWORD PTR [r12+0xc88],edi
   55807:	mov    DWORD PTR [r12+0xd18],edx
   5580f:	mov    edx,DWORD PTR [rbp+0xc]
   55812:	mov    DWORD PTR [r12+0xc18],ebx
   5581a:	mov    DWORD PTR [r12+0xd10],edx
   55822:	jl     558bb <set_stored_macroblock_parameters+0x33b>
   55828:	mov    rbx,QWORD PTR [r12+0xc08]
   55830:	mov    QWORD PTR [rsp+0x8],rbx
   55835:	xor    ebx,ebx
   55837:	mov    rdi,QWORD PTR [rsp+0x8]
   5583c:	mov    r11,QWORD PTR [r15+rbx*8]
   55840:	mov    r10,QWORD PTR [rdi+rbx*8]
   55844:	xor    edi,edi
   55846:	mov    r8,QWORD PTR [r11+rdi*1]
   5584a:	mov    r9,QWORD PTR [r10+rdi*1]
   5584e:	mov    QWORD PTR [rsp],rax
   55852:	xor    edx,edx
   55854:	mov    rsi,QWORD PTR [r8]
   55857:	mov    rcx,QWORD PTR [r9]
   5585a:	nop    WORD PTR [rax+rax*1+0x0]
   55860:	mov    eax,DWORD PTR [rsi+rdx*1]
   55863:	mov    DWORD PTR [rcx+rdx*1],eax
   55866:	add    rdx,0x4
   5586a:	cmp    rdx,0x104
   55871:	jne    55860 <set_stored_macroblock_parameters+0x2e0>
   55873:	mov    rax,QWORD PTR [rsp]
   55877:	mov    r8,QWORD PTR [r8+0x8]
   5587b:	xor    edx,edx
   5587d:	mov    rsi,QWORD PTR [r9+0x8]
   55881:	nop    DWORD PTR [rax+0x0]
   55888:	mov    ecx,DWORD PTR [r8+rdx*1]
   5588c:	mov    DWORD PTR [rsi+rdx*1],ecx
   5588f:	add    rdx,0x4
   55893:	cmp    rdx,0x104
   5589a:	jne    55888 <set_stored_macroblock_parameters+0x308>
   5589c:	add    rdi,0x8
   558a0:	cmp    rdi,0x20
   558a4:	jne    55846 <set_stored_macroblock_parameters+0x2c6>
   558a6:	mov    edi,DWORD PTR [rax+0x11bf4]
   558ac:	add    rbx,0x1
   558b0:	lea    edx,[rdi+0x3]
   558b3:	cmp    edx,ebx
   558b5:	jge    55837 <set_stored_macroblock_parameters+0x2b7>
   558bb:	mov    r10,QWORD PTR [r12+0xc10]
   558c3:	xor    edi,edi
   558c5:	mov    r9,QWORD PTR [r13+rdi*1+0x0]
   558ca:	mov    r11,QWORD PTR [r10+rdi*1]
   558ce:	xor    edx,edx
   558d0:	mov    r8,QWORD PTR [r9]
   558d3:	mov    rsi,QWORD PTR [r11]
   558d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   558e0:	mov    ecx,DWORD PTR [r8+rdx*1]
   558e4:	mov    DWORD PTR [rsi+rdx*1],ecx
   558e7:	add    rdx,0x4
   558eb:	cmp    rdx,0x48
   558ef:	jne    558e0 <set_stored_macroblock_parameters+0x360>
   558f1:	mov    r8,QWORD PTR [r9+0x8]
   558f5:	mov    rsi,QWORD PTR [r11+0x8]
   558f9:	xor    edx,edx
   558fb:	nop    DWORD PTR [rax+rax*1+0x0]
   55900:	mov    ecx,DWORD PTR [r8+rdx*1]
   55904:	mov    DWORD PTR [rsi+rdx*1],ecx
   55907:	add    rdx,0x4
   5590b:	cmp    rdx,0x48
   5590f:	jne    55900 <set_stored_macroblock_parameters+0x380>
   55911:	add    rdi,0x8
   55915:	cmp    rdi,0x18
   55919:	jne    558c5 <set_stored_macroblock_parameters+0x345>
   5591b:	mov    esi,DWORD PTR [rax+0x11ad0]
   55921:	mov    ecx,DWORD PTR [rbp+0x48]
   55924:	xor    edx,edx
   55926:	lea    r10,[rip+0x88ed3]        # de800 <b8mode>
   5592d:	lea    r9,[rip+0x89bcc]        # df500 <b8pdir>
   55934:	movsx  r8d,WORD PTR [r10+rdx*1]
   55939:	movsx  edi,WORD PTR [r9+rdx*1]
   5593e:	mov    DWORD PTR [rbp+rdx*2+0x1d8],r8d
   55946:	mov    DWORD PTR [rbp+rdx*2+0x1e8],edi
   5594d:	test   esi,esi
   5594f:	je     55961 <set_stored_macroblock_parameters+0x3e1>
   55951:	mov    DWORD PTR [r12+rdx*2+0xc20],r8d
   55959:	mov    DWORD PTR [r12+rdx*2+0xc30],edi
   55961:	add    rdx,0x2
   55965:	cmp    rdx,0x8
   55969:	jne    55934 <set_stored_macroblock_parameters+0x3b4>
   5596b:	cmp    ecx,0x1
   5596e:	mov    edx,0x0
   55973:	cmove  edx,DWORD PTR [rip+0x8994a]        # df2c4 <bi_pred_me>
   5597a:	cmp    DWORD PTR [rsp+0x38],0x8
   5597f:	mov    rcx,QWORD PTR [rip+0x32c32]        # 885b8 <input>
   55986:	mov    DWORD PTR [rbp+0x244],edx
   5598c:	je     55f01 <set_stored_macroblock_parameters+0x981>
   55992:	mov    edx,DWORD PTR [rbp+0x1cc]
   55998:	and    edx,0xf
   5599b:	jne    55d38 <set_stored_macroblock_parameters+0x7b8>
   559a1:	mov    ebx,DWORD PTR [rbp+0x48]
   559a4:	and    ebx,0xfffffffb
   559a7:	cmp    ebx,0x9
   559aa:	je     55d38 <set_stored_macroblock_parameters+0x7b8>
   559b0:	cmp    DWORD PTR [rcx+0x9a0],0x2
   559b7:	mov    DWORD PTR [rbp+0x23c],edx
   559bd:	mov    DWORD PTR [r12+0xd08],edx
   559c5:	je     561f1 <set_stored_macroblock_parameters+0xc71>
   559cb:	movsxd rdx,DWORD PTR [rsp+0x44]
   559d0:	mov    esi,DWORD PTR [rbp+0x48]
   559d3:	mov    QWORD PTR [rsp+0x30],0x0
   559dc:	mov    ebx,DWORD PTR [rax+0x90]
   559e2:	mov    rdi,QWORD PTR [rip+0x34fbf]        # 8a9a8 <enc_picture>
   559e9:	mov    QWORD PTR [rsp+0x78],r14
   559ee:	mov    rcx,rdx
   559f1:	mov    DWORD PTR [rsp+0x8],esi
   559f5:	sub    esi,0x9
   559f8:	mov    DWORD PTR [rsp+0x3c],ebx
   559fc:	shl    rcx,0x5
   55a00:	mov    ebx,DWORD PTR [rax+0x94]
   55a06:	mov    DWORD PTR [rsp+0x10],esi
   55a0a:	lea    rsi,[rcx+rdx*1]
   55a0e:	mov    r9,QWORD PTR [rdi+0x1958]
   55a15:	mov    QWORD PTR [rsp+0x48],rdi
   55a1a:	mov    r15,QWORD PTR [rdi+0x1968]
   55a21:	mov    DWORD PTR [rsp+0x40],ebx
   55a25:	mov    rbx,QWORD PTR [rdi+0x1950]
   55a2c:	lea    rdi,[rdi+rsi*8]
   55a30:	mov    DWORD PTR [rsp+0x68],0x0
   55a38:	mov    QWORD PTR [rsp+0x58],rsi
   55a3d:	mov    QWORD PTR [rsp+0x70],rdi
   55a42:	mov    QWORD PTR [rsp+0x20],r12
   55a47:	mov    r12,rbp
   55a4a:	mov    edi,DWORD PTR [rsp+0x68]
   55a4e:	mov    r11d,DWORD PTR [rsp+0x3c]
   55a53:	mov    QWORD PTR [rsp],r12
   55a57:	xor    ecx,ecx
   55a59:	mov    esi,edi
   55a5b:	add    edi,DWORD PTR [rsp+0x40]
   55a5f:	and    esi,0xfffffffe
   55a62:	movsxd r10,edi
   55a65:	mov    DWORD PTR [rsp+0x1c],esi
   55a69:	mov    rsi,QWORD PTR [rsp+0x30]
   55a6e:	lea    rdi,[r10*8+0x0]
   55a76:	mov    r8d,ecx
   55a79:	mov    r14,QWORD PTR [rsp]
   55a7d:	mov    edx,ecx
   55a7f:	sar    r8d,1
   55a82:	add    r8d,DWORD PTR [rsp+0x1c]
   55a87:	movsxd r8,r8d
   55a8a:	lea    r13,[r14+r8*4]
   55a8e:	mov    r8d,DWORD PTR [r13+0x1e8]
   55a95:	cmp    r8d,0x1
   55a99:	je     55da5 <set_stored_macroblock_parameters+0x825>
   55a9f:	cmp    DWORD PTR [rsp+0x10],0x1
   55aa4:	jbe    55da5 <set_stored_macroblock_parameters+0x825>
   55aaa:	cmp    DWORD PTR [rsp+0x8],0xd
   55aaf:	je     55da5 <set_stored_macroblock_parameters+0x825>
   55ab5:	mov    r14,QWORD PTR [rsp]
   55ab9:	cmp    DWORD PTR [rsp+0x8],0x1
   55abe:	mov    ebp,DWORD PTR [r14+0x244]
   55ac5:	lea    r14,[rcx*8+0x0]
   55acd:	mov    QWORD PTR [rsp+0x28],r14
   55ad2:	movsxd r14,DWORD PTR [r13+0x1d8]
   55ad9:	mov    QWORD PTR [rsp+0x50],r14
   55ade:	sete   r14b
   55ae2:	test   ebp,ebp
   55ae4:	setne  r13b
   55ae8:	test   r14b,r13b
   55aeb:	je     55af7 <set_stored_macroblock_parameters+0x577>
   55aed:	cmp    r8d,0x2
   55af1:	je     56233 <set_stored_macroblock_parameters+0xcb3>
   55af7:	lea    r14,[rip+0x897a2]        # df2a0 <frefframe>
   55afe:	lea    ebp,[rdx+r11*1]
   55b02:	movsx  r13,WORD PTR [r14+rsi*1]
   55b07:	mov    r12,r14
   55b0a:	mov    r14,QWORD PTR [rbx]
   55b0d:	movsxd rbp,ebp
   55b10:	mov    r14,QWORD PTR [r14+rbp*8]
   55b14:	mov    WORD PTR [r14+r10*2],r13w
   55b19:	mov    r14,QWORD PTR [rsp+0x58]
   55b1e:	lea    r13,[r13+r14*1+0x2]
   55b23:	mov    r14,QWORD PTR [rsp+0x48]
   55b28:	mov    r14,QWORD PTR [r14+r13*8+0x8]
   55b2d:	mov    r13,QWORD PTR [r9]
   55b30:	mov    r13,QWORD PTR [r13+rbp*8+0x0]
   55b35:	mov    QWORD PTR [r13+rdi*1+0x0],r14
   55b3a:	mov    r13,QWORD PTR [rax+0x118f8]
   55b41:	lea    r14,[rcx*8+0x0]
   55b49:	mov    r13,QWORD PTR [r13+r14*1+0x0]
   55b4e:	mov    r14,QWORD PTR [rsp+0x30]
   55b53:	mov    r13,QWORD PTR [r13+r14*1+0x0]
   55b58:	mov    r14,QWORD PTR [r15]
   55b5b:	mov    rbp,QWORD PTR [r14+rbp*8]
   55b5f:	mov    r13,QWORD PTR [r13+0x0]
   55b63:	mov    r14,QWORD PTR [rbp+rdi*1+0x0]
   55b68:	mov    rbp,QWORD PTR [rsp+0x50]
   55b6d:	mov    QWORD PTR [rsp+0x28],r14
   55b72:	movsx  r14,WORD PTR [r12+rsi*1]
   55b77:	mov    r12,QWORD PTR [rsp+0x28]
   55b7c:	mov    r14,QWORD PTR [r13+r14*8+0x0]
   55b81:	mov    r14,QWORD PTR [r14+rbp*8]
   55b85:	movzx  r14d,WORD PTR [r14]
   55b89:	mov    WORD PTR [r12],r14w
   55b8e:	lea    r14,[rip+0x8970b]        # df2a0 <frefframe>
   55b95:	mov    r12,r14
   55b98:	movsx  r14,WORD PTR [r14+rsi*1]
   55b9d:	mov    r13,QWORD PTR [r13+r14*8+0x0]
   55ba2:	mov    r14,QWORD PTR [rsp+0x28]
   55ba7:	mov    r13,QWORD PTR [r13+rbp*8+0x0]
   55bac:	movzx  r13d,WORD PTR [r13+0x2]
   55bb1:	mov    WORD PTR [r14+0x2],r13w
   55bb6:	mov    ebp,DWORD PTR [rax+0x11ad0]
   55bbc:	test   ebp,ebp
   55bbe:	je     55bd3 <set_stored_macroblock_parameters+0x653>
   55bc0:	movzx  ebp,WORD PTR [r12+rsi*1]
   55bc5:	mov    r14,QWORD PTR [rsp+0x20]
   55bca:	mov    WORD PTR [r14+rsi*1+0xcc0],bp
   55bd3:	test   r8d,r8d
   55bd6:	je     55d43 <set_stored_macroblock_parameters+0x7c3>
   55bdc:	cmp    DWORD PTR [rsp+0x10],0x1
   55be1:	jbe    55d43 <set_stored_macroblock_parameters+0x7c3>
   55be7:	cmp    DWORD PTR [rsp+0x8],0xd
   55bec:	je     55d43 <set_stored_macroblock_parameters+0x7c3>
   55bf2:	add    rcx,0x1
   55bf6:	add    rsi,0x2
   55bfa:	cmp    rcx,0x4
   55bfe:	jne    55a76 <set_stored_macroblock_parameters+0x4f6>
   55c04:	add    DWORD PTR [rsp+0x68],0x1
   55c09:	mov    edi,DWORD PTR [rsp+0x68]
   55c0d:	add    QWORD PTR [rsp+0x30],0x8
   55c13:	mov    r12,QWORD PTR [rsp]
   55c17:	cmp    edi,0x4
   55c1a:	jne    55a4a <set_stored_macroblock_parameters+0x4ca>
   55c20:	cmp    DWORD PTR [rsp+0x60],0x1
   55c25:	mov    rbp,r12
   55c28:	mov    r14,QWORD PTR [rsp+0x78]
   55c2d:	mov    r12,QWORD PTR [rsp+0x20]
   55c32:	je     55fbd <set_stored_macroblock_parameters+0xa3d>
   55c38:	mov    edx,DWORD PTR [rip+0x8bce2]        # e1920 <best_c_imode>
   55c3e:	cmp    DWORD PTR [rsp+0x8],0xd
   55c43:	mov    DWORD PTR [rbp+0x20c],edx
   55c49:	mov    edx,DWORD PTR [rip+0x8b691]        # e12e0 <best_i16offset>
   55c4f:	mov    DWORD PTR [rax+0x11abc],edx
   55c55:	je     55f43 <set_stored_macroblock_parameters+0x9c3>
   55c5b:	mov    edx,DWORD PTR [rsp+0x38]
   55c5f:	and    edx,0xfffffffb
   55c62:	cmp    edx,0x9
   55c65:	jne    55e0d <set_stored_macroblock_parameters+0x88d>
   55c6b:	cmp    DWORD PTR [rsp+0x38],0x9
   55c70:	je     562d9 <set_stored_macroblock_parameters+0xd59>
   55c76:	mov    edx,DWORD PTR [rax+0x11ad0]
   55c7c:	test   edx,edx
   55c7e:	je     55d1b <set_stored_macroblock_parameters+0x79b>
   55c84:	movsxd rsi,DWORD PTR [rax+0x94]
   55c8b:	mov    r9,QWORD PTR [r12+0xc40]
   55c93:	xor    r11d,r11d
   55c96:	mov    edi,DWORD PTR [rax+0x90]
   55c9c:	mov    r10,rsi
   55c9f:	shl    rsi,0x2
   55ca3:	lea    edx,[r11+0x1]
   55ca7:	movsxd rcx,edi
   55caa:	movsxd rdx,edx
   55cad:	nop    DWORD PTR [rax]
   55cb0:	mov    rdi,QWORD PTR [r14+rcx*8]
   55cb4:	mov    r11d,edx
   55cb7:	mov    r8d,DWORD PTR [rdi+rsi*1]
   55cbb:	mov    rdi,QWORD PTR [r9+rcx*8]
   55cbf:	add    rcx,0x1
   55cc3:	mov    DWORD PTR [rdi+rsi*1],r8d
   55cc7:	mov    edi,DWORD PTR [rbp+rdx*4+0x148]
   55cce:	mov    DWORD PTR [r12+rdx*4+0xc44],edi
   55cd6:	mov    edi,DWORD PTR [rax+0x90]
   55cdc:	add    rdx,0x1
   55ce0:	lea    r8d,[rdi+0x3]
   55ce4:	cmp    r8d,ecx
   55ce7:	jge    55cb0 <set_stored_macroblock_parameters+0x730>
   55ce9:	mov    ebx,DWORD PTR [rax+0x94]
   55cef:	add    r10d,0x1
   55cf3:	add    rsi,0x4
   55cf7:	lea    edx,[rbx+0x3]
   55cfa:	cmp    edx,r10d
   55cfd:	jge    55ca3 <set_stored_macroblock_parameters+0x723>
   55cff:	mov    edx,DWORD PTR [rbp+0x20c]
   55d05:	mov    eax,DWORD PTR [rax+0x11abc]
   55d0b:	mov    DWORD PTR [r12+0xd04],edx
   55d13:	mov    DWORD PTR [r12+0xd00],eax
   55d1b:	mov    esi,DWORD PTR [rsp+0x6c]
   55d1f:	add    rsp,0x88
   55d26:	mov    rdi,rbp
   55d29:	pop    rbx
   55d2a:	pop    rbp
   55d2b:	pop    r12
   55d2d:	pop    r13
   55d2f:	pop    r14
   55d31:	pop    r15
   55d33:	jmp    52810 <SetMotionVectorsMB>
   55d38:	mov    edx,DWORD PTR [rip+0x8c5c2]        # e2300 <luma_transform_size_8x8_flag>
   55d3e:	jmp    559b0 <set_stored_macroblock_parameters+0x430>
   55d43:	mov    r8,QWORD PTR [rbx+0x8]
   55d47:	add    edx,r11d
   55d4a:	mov    r14d,0xffffffff
   55d50:	movsxd rdx,edx
   55d53:	mov    r8,QWORD PTR [r8+rdx*8]
   55d57:	mov    WORD PTR [r8+r10*2],r14w
   55d5c:	mov    r8,QWORD PTR [r9+0x8]
   55d60:	mov    r8,QWORD PTR [r8+rdx*8]
   55d64:	mov    QWORD PTR [r8+rdi*1],0xffffffffffffffff
   55d6c:	mov    r8,QWORD PTR [r15+0x8]
   55d70:	mov    rdx,QWORD PTR [r8+rdx*8]
   55d74:	mov    rdx,QWORD PTR [rdx+rdi*1]
   55d78:	mov    DWORD PTR [rdx],0x0
   55d7e:	mov    edx,DWORD PTR [rax+0x11ad0]
   55d84:	test   edx,edx
   55d86:	je     55bf2 <set_stored_macroblock_parameters+0x672>
   55d8c:	mov    rdx,QWORD PTR [rsp+0x20]
   55d91:	mov    r13d,0xffffffff
   55d97:	mov    WORD PTR [rdx+rsi*1+0xce0],r13w
   55da0:	jmp    55bf2 <set_stored_macroblock_parameters+0x672>
   55da5:	mov    r13,QWORD PTR [rbx]
   55da8:	lea    ebp,[rdx+r11*1]
   55dac:	mov    r12d,0xffffffff
   55db2:	movsxd rbp,ebp
   55db5:	mov    r13,QWORD PTR [r13+rbp*8+0x0]
   55dba:	mov    WORD PTR [r13+r10*2+0x0],r12w
   55dc0:	mov    r13,QWORD PTR [r9]
   55dc3:	mov    r13,QWORD PTR [r13+rbp*8+0x0]
   55dc8:	mov    QWORD PTR [r13+rdi*1+0x0],0xffffffffffffffff
   55dd1:	mov    r13,QWORD PTR [r15]
   55dd4:	mov    rbp,QWORD PTR [r13+rbp*8+0x0]
   55dd9:	mov    r13d,DWORD PTR [rax+0x11ad0]
   55de0:	mov    rbp,QWORD PTR [rbp+rdi*1+0x0]
   55de5:	mov    DWORD PTR [rbp+0x0],0x0
   55dec:	test   r13d,r13d
   55def:	je     55bd3 <set_stored_macroblock_parameters+0x653>
   55df5:	mov    r14,QWORD PTR [rsp+0x20]
   55dfa:	mov    ebp,0xffffffff
   55dff:	mov    WORD PTR [r14+rsi*1+0xcc0],bp
   55e08:	jmp    55bd3 <set_stored_macroblock_parameters+0x653>
   55e0d:	movsxd r9,DWORD PTR [rsp+0x40]
   55e12:	mov    edi,DWORD PTR [rsp+0x3c]
   55e16:	xor    ecx,ecx
   55e18:	mov    r10,r9
   55e1b:	shl    r9,0x2
   55e1f:	lea    edx,[rcx+0x1]
   55e22:	movsxd rsi,edi
   55e25:	movsxd rdx,edx
   55e28:	nop    DWORD PTR [rax+rax*1+0x0]
   55e30:	mov    rcx,QWORD PTR [r14+rsi*8]
   55e34:	add    rsi,0x1
   55e38:	mov    DWORD PTR [rcx+r9*1],0x2
   55e40:	mov    ecx,edx
   55e42:	mov    DWORD PTR [rbp+rdx*4+0x148],0x2
   55e4d:	add    rdx,0x1
   55e51:	mov    edi,DWORD PTR [rax+0x90]
   55e57:	lea    r8d,[rdi+0x3]
   55e5b:	cmp    r8d,esi
   55e5e:	jge    55e30 <set_stored_macroblock_parameters+0x8b0>
   55e60:	mov    ebx,DWORD PTR [rax+0x94]
   55e66:	add    r10d,0x1
   55e6a:	add    r9,0x4
   55e6e:	lea    edx,[rbx+0x3]
   55e71:	cmp    edx,r10d
   55e74:	jge    55e1f <set_stored_macroblock_parameters+0x89f>
   55e76:	cmp    DWORD PTR [rbp+0x48],0xd
   55e7a:	jne    55c76 <set_stored_macroblock_parameters+0x6f6>
   55e80:	mov    rbx,QWORD PTR [rax+0x68]
   55e84:	lea    r10,[rip+0x60875]        # b6700 <b8_ipredmode8x8>
   55e8b:	mov    r8,rbp
   55e8e:	xor    edi,edi
   55e90:	lea    r9,[rip+0x49369]        # 9f200 <b8_intra_pred_modes8x8>
   55e97:	xor    edx,edx
   55e99:	mov    esi,DWORD PTR [rax+0x90]
   55e9f:	mov    ecx,DWORD PTR [rax+0x94]
   55ea5:	mov    r11d,DWORD PTR [r10+rdx*4]
   55ea9:	add    esi,edi
   55eab:	add    ecx,edx
   55ead:	movsxd rsi,esi
   55eb0:	movsxd rcx,ecx
   55eb3:	mov    rsi,QWORD PTR [rbx+rsi*8]
   55eb7:	mov    DWORD PTR [rsi+rcx*4],r11d
   55ebb:	mov    ecx,DWORD PTR [r9+rdx*4]
   55ebf:	mov    DWORD PTR [r8+rdx*4+0x14c],ecx
   55ec7:	add    rdx,0x1
   55ecb:	cmp    rdx,0x4
   55ecf:	jne    55e99 <set_stored_macroblock_parameters+0x919>
   55ed1:	add    edi,0x1
   55ed4:	add    r10,0x10
   55ed8:	add    r9,0x10
   55edc:	add    r8,0x10
   55ee0:	cmp    edi,0x4
   55ee3:	jne    55e97 <set_stored_macroblock_parameters+0x917>
   55ee5:	jmp    55c76 <set_stored_macroblock_parameters+0x6f6>
   55eea:	and    edx,0x1
   55eed:	cmp    edx,0x1
   55ef0:	sbb    ebx,ebx
   55ef2:	and    ebx,0xfffffffe
   55ef5:	add    ebx,0x4
   55ef8:	mov    DWORD PTR [rsp+0x44],ebx
   55efc:	jmp    5560c <set_stored_macroblock_parameters+0x8c>
   55f01:	mov    edx,DWORD PTR [rip+0x8c3f9]        # e2300 <luma_transform_size_8x8_flag>
   55f07:	test   edx,edx
   55f09:	jne    55992 <set_stored_macroblock_parameters+0x412>
   55f0f:	mov    r15d,DWORD PTR [rcx+0xc94]
   55f16:	test   r15d,r15d
   55f19:	je     55992 <set_stored_macroblock_parameters+0x412>
   55f1f:	mov    edi,0x1
   55f24:	call   54330 <RestoreMV8x8>
   55f29:	mov    r12,QWORD PTR [rip+0x4ae30]        # a0d60 <rdopt>
   55f30:	mov    rcx,QWORD PTR [rip+0x32681]        # 885b8 <input>
   55f37:	mov    rax,QWORD PTR [rip+0x32672]        # 885b0 <img>
   55f3e:	jmp    55992 <set_stored_macroblock_parameters+0x412>
   55f43:	mov    r11,QWORD PTR [rax+0x70]
   55f47:	mov    r10,QWORD PTR [rax+0x68]
   55f4b:	mov    r9,rbp
   55f4e:	xor    r8d,r8d
   55f51:	mov    ecx,DWORD PTR [rsp+0x3c]
   55f55:	mov    edx,DWORD PTR [rsp+0x40]
   55f59:	mov    rdi,r9
   55f5c:	xor    esi,esi
   55f5e:	add    ecx,r8d
   55f61:	add    edx,esi
   55f63:	add    esi,0x1
   55f66:	add    rdi,0x4
   55f6a:	movsxd rcx,ecx
   55f6d:	movsxd rdx,edx
   55f70:	mov    rbx,QWORD PTR [r11+rcx*8]
   55f74:	mov    rcx,QWORD PTR [r10+rcx*8]
   55f78:	mov    ebx,DWORD PTR [rbx+rdx*4]
   55f7b:	mov    DWORD PTR [rcx+rdx*4],ebx
   55f7e:	mov    edx,DWORD PTR [rdi+0x188]
   55f84:	mov    DWORD PTR [rdi+0x148],edx
   55f8a:	cmp    esi,0x4
   55f8d:	je     55f9d <set_stored_macroblock_parameters+0xa1d>
   55f8f:	mov    ecx,DWORD PTR [rax+0x90]
   55f95:	mov    edx,DWORD PTR [rax+0x94]
   55f9b:	jmp    55f5e <set_stored_macroblock_parameters+0x9de>
   55f9d:	add    r8d,0x1
   55fa1:	add    r9,0x10
   55fa5:	cmp    r8d,0x4
   55fa9:	je     55e76 <set_stored_macroblock_parameters+0x8f6>
   55faf:	mov    ecx,DWORD PTR [rax+0x90]
   55fb5:	mov    edx,DWORD PTR [rax+0x94]
   55fbb:	jmp    55f59 <set_stored_macroblock_parameters+0x9d9>
   55fbd:	mov    edi,DWORD PTR [rsp+0x8]
   55fc1:	mov    DWORD PTR [rsp],0x0
   55fc8:	mov    QWORD PTR [rsp+0x60],r14
   55fcd:	mov    r14,r12
   55fd0:	lea    edx,[rdi-0x9]
   55fd3:	cmp    edx,0x1
   55fd6:	setbe  cl
   55fd9:	cmp    edi,0xd
   55fdc:	sete   dl
   55fdf:	or     ecx,edx
   55fe1:	movsxd rdx,DWORD PTR [rsp+0x40]
   55fe6:	cmp    edi,0x1
   55fe9:	mov    edi,DWORD PTR [rax+0x11ad0]
   55fef:	sete   BYTE PTR [rsp+0x68]
   55ff4:	lea    r8,[rdx+rdx*1]
   55ff8:	movsxd rdx,DWORD PTR [rsp+0x3c]
   55ffd:	mov    DWORD PTR [rsp+0x10],edi
   56001:	mov    rdi,QWORD PTR [rbx+0x8]
   56005:	mov    rbx,QWORD PTR [r9+0x8]
   56009:	mov    BYTE PTR [rsp+0x1c],cl
   5600d:	shl    rdx,0x3
   56011:	add    rdi,rdx
   56014:	add    rbx,rdx
   56017:	add    rdx,QWORD PTR [r15+0x8]
   5601b:	xor    r15d,r15d
   5601e:	mov    QWORD PTR [rsp+0x20],rdx
   56023:	mov    edx,DWORD PTR [rsp+0x44]
   56027:	mov    QWORD PTR [rsp+0x30],rdi
   5602c:	mov    rdi,QWORD PTR [rsp+0x48]
   56031:	add    edx,0x1
   56034:	mov    QWORD PTR [rsp+0x28],rbx
   56039:	movsxd rdx,edx
   5603c:	mov    rcx,rdx
   5603f:	shl    rcx,0x5
   56043:	lea    rbx,[rcx+rdx*1]
   56047:	mov    QWORD PTR [rsp+0x50],rbx
   5604c:	lea    rbx,[rdi+rbx*8]
   56050:	mov    QWORD PTR [rsp+0x58],rbx
   56055:	mov    ebx,DWORD PTR [rsp]
   56058:	mov    QWORD PTR [rsp+0x70],r14
   5605d:	lea    rsi,[r14+r15*1]
   56061:	xor    edx,edx
   56063:	lea    rdi,[rip+0x8c216]        # e2280 <brefframe>
   5606a:	and    ebx,0xfffffffe
   5606d:	lea    rcx,[rdi+r15*1]
   56071:	mov    DWORD PTR [rsp+0x44],ebx
   56075:	lea    rbx,[r8*4+0x0]
   5607d:	mov    rdi,QWORD PTR [rsp+0x30]
   56082:	mov    r10,QWORD PTR [rdi+rdx*8]
   56086:	mov    rdi,QWORD PTR [rsp+0x28]
   5608b:	mov    r9,QWORD PTR [rdi+rdx*8]
   5608f:	mov    rdi,QWORD PTR [rsp+0x20]
   56094:	add    r10,r8
   56097:	mov    rdi,QWORD PTR [rdi+rdx*8]
   5609b:	add    r9,rbx
   5609e:	cmp    BYTE PTR [rsp+0x1c],0x0
   560a3:	mov    rdi,QWORD PTR [rdi+rbx*1]
   560a7:	jne    561c0 <set_stored_macroblock_parameters+0xc40>
   560ad:	mov    r11d,edx
   560b0:	sar    r11d,1
   560b3:	add    r11d,DWORD PTR [rsp+0x44]
   560b8:	movsxd r11,r11d
   560bb:	lea    r11,[rbp+r11*4+0x0]
   560c0:	mov    r13d,DWORD PTR [r11+0x1e8]
   560c7:	test   r13d,r13d
   560ca:	je     561c0 <set_stored_macroblock_parameters+0xc40>
   560d0:	mov    r14d,DWORD PTR [rbp+0x244]
   560d7:	lea    r12,[rdx*8+0x0]
   560df:	movsxd r11,DWORD PTR [r11+0x1d8]
   560e6:	mov    QWORD PTR [rsp+0x78],r12
   560eb:	test   r14d,r14d
   560ee:	setne  r12b
   560f2:	test   BYTE PTR [rsp+0x68],r12b
   560f7:	je     56103 <set_stored_macroblock_parameters+0xb83>
   560f9:	cmp    r13d,0x2
   560fd:	je     5634c <set_stored_macroblock_parameters+0xdcc>
   56103:	movsx  r13,WORD PTR [rcx]
   56107:	mov    r14,QWORD PTR [rsp+0x48]
   5610c:	mov    WORD PTR [r10],r13w
   56110:	mov    r10,QWORD PTR [rsp+0x50]
   56115:	lea    r10,[r13+r10*1+0x2]
   5611a:	mov    r10,QWORD PTR [r14+r10*8+0x8]
   5611f:	mov    QWORD PTR [r9],r10
   56122:	mov    r9,QWORD PTR [rax+0x118f8]
   56129:	lea    r10,[rdx*8+0x0]
   56131:	mov    r9,QWORD PTR [r9+r10*1]
   56135:	movsx  r10,WORD PTR [rcx]
   56139:	mov    r9,QWORD PTR [r9+r15*1]
   5613d:	mov    r9,QWORD PTR [r9+0x8]
   56141:	mov    r10,QWORD PTR [r9+r10*8]
   56145:	mov    r10,QWORD PTR [r10+r11*8]
   56149:	movzx  r10d,WORD PTR [r10]
   5614d:	mov    WORD PTR [rdi],r10w
   56151:	movsx  r10,WORD PTR [rcx]
   56155:	mov    r9,QWORD PTR [r9+r10*8]
   56159:	mov    r9,QWORD PTR [r9+r11*8]
   5615d:	movzx  r9d,WORD PTR [r9+0x2]
   56162:	mov    WORD PTR [rdi+0x2],r9w
   56167:	mov    edi,DWORD PTR [rsp+0x10]
   5616b:	test   edi,edi
   5616d:	je     56179 <set_stored_macroblock_parameters+0xbf9>
   5616f:	movzx  edi,WORD PTR [rcx]
   56172:	mov    WORD PTR [rsi+0xce0],di
   56179:	add    rdx,0x1
   5617d:	add    rsi,0x2
   56181:	add    rcx,0x2
   56185:	cmp    rdx,0x4
   56189:	jne    5607d <set_stored_macroblock_parameters+0xafd>
   5618f:	add    DWORD PTR [rsp],0x1
   56193:	mov    ebx,DWORD PTR [rsp]
   56196:	add    r15,0x8
   5619a:	add    r8,0x2
   5619e:	mov    r14,QWORD PTR [rsp+0x70]
   561a3:	cmp    ebx,0x4
   561a6:	jne    56055 <set_stored_macroblock_parameters+0xad5>
   561ac:	mov    r12,r14
   561af:	mov    r14,QWORD PTR [rsp+0x60]
   561b4:	jmp    55c38 <set_stored_macroblock_parameters+0x6b8>
   561b9:	nop    DWORD PTR [rax+0x0]
   561c0:	mov    r12d,DWORD PTR [rsp+0x10]
   561c5:	mov    r11d,0xffffffff
   561cb:	mov    WORD PTR [r10],r11w
   561cf:	mov    QWORD PTR [r9],0xffffffffffffffff
   561d6:	mov    DWORD PTR [rdi],0x0
   561dc:	test   r12d,r12d
   561df:	je     56179 <set_stored_macroblock_parameters+0xbf9>
   561e1:	mov    r14d,0xffffffff
   561e7:	mov    WORD PTR [rsi+0xce0],r14w
   561ef:	jmp    56179 <set_stored_macroblock_parameters+0xbf9>
   561f1:	cmp    DWORD PTR [rax+0x18],0x1
   561f5:	je     559cb <set_stored_macroblock_parameters+0x44b>
   561fb:	mov    rdx,QWORD PTR [rip+0x32396]        # 88598 <decs>
   56202:	movsxd rcx,DWORD PTR [rax+0x88]
   56209:	movzx  ebx,BYTE PTR [rsp+0x38]
   5620e:	movsxd rax,DWORD PTR [rax+0x8c]
   56215:	mov    rdx,QWORD PTR [rdx+0x30]
   56219:	mov    rdx,QWORD PTR [rdx+rcx*8]
   5621d:	mov    BYTE PTR [rdx+rax*1],bl
   56220:	mov    rax,QWORD PTR [rip+0x32389]        # 885b0 <img>
   56227:	mov    r12,QWORD PTR [rip+0x4ab32]        # a0d60 <rdopt>
   5622e:	jmp    559cb <set_stored_macroblock_parameters+0x44b>
   56233:	mov    r8,QWORD PTR [rax+0x11908]
   5623a:	cmp    ebp,0x1
   5623d:	mov    rbp,QWORD PTR [rbx]
   56240:	cmove  r8,QWORD PTR [rax+0x11900]
   56248:	add    edx,r11d
   5624b:	mov    r14,QWORD PTR [rsp+0x70]
   56250:	xor    r13d,r13d
   56253:	movsxd rdx,edx
   56256:	mov    rbp,QWORD PTR [rbp+rdx*8+0x0]
   5625b:	mov    WORD PTR [rbp+r10*2+0x0],r13w
   56261:	mov    r13,QWORD PTR [r14+0x18]
   56265:	lea    r14,[rcx*8+0x0]
   5626d:	mov    r8,QWORD PTR [r8+r14*1]
   56271:	mov    r14,QWORD PTR [rsp+0x30]
   56276:	mov    rbp,QWORD PTR [r9]
   56279:	mov    r8,QWORD PTR [r8+r14*1]
   5627d:	mov    r14,QWORD PTR [rsp+0x50]
   56282:	mov    rbp,QWORD PTR [rbp+rdx*8+0x0]
   56287:	mov    r8,QWORD PTR [r8]
   5628a:	mov    QWORD PTR [rbp+rdi*1+0x0],r13
   5628f:	mov    rbp,QWORD PTR [r15]
   56292:	mov    r8,QWORD PTR [r8]
   56295:	mov    rdx,QWORD PTR [rbp+rdx*8+0x0]
   5629a:	mov    r8,QWORD PTR [r8+r14*8]
   5629e:	mov    r14d,DWORD PTR [rax+0x11ad0]
   562a5:	mov    rdx,QWORD PTR [rdx+rdi*1]
   562a9:	movzx  ebp,WORD PTR [r8]
   562ad:	mov    WORD PTR [rdx],bp
   562b0:	movzx  r8d,WORD PTR [r8+0x2]
   562b5:	mov    WORD PTR [rdx+0x2],r8w
   562ba:	test   r14d,r14d
   562bd:	je     55bf2 <set_stored_macroblock_parameters+0x672>
   562c3:	mov    rdx,QWORD PTR [rsp+0x20]
   562c8:	xor    r12d,r12d
   562cb:	mov    WORD PTR [rdx+rsi*1+0xcc0],r12w
   562d4:	jmp    55bf2 <set_stored_macroblock_parameters+0x672>
   562d9:	movsxd r8,DWORD PTR [rsp+0x40]
   562de:	mov    ecx,DWORD PTR [rsp+0x3c]
   562e2:	xor    esi,esi
   562e4:	lea    rbx,[rip+0x8bfd1]        # e22bc <part8x8fwref+0x1c>
   562eb:	lea    r11,[rip+0x8976a]        # dfa5c <cofAC4x4_chroma+0x11c>
   562f2:	mov    r10,r8
   562f5:	shl    r8,0x2
   562f9:	lea    edx,[rsi+0x1]
   562fc:	movsxd rdi,ecx
   562ff:	movsxd rdx,edx
   56302:	mov    esi,DWORD PTR [rbx+rdx*4]
   56305:	mov    rcx,QWORD PTR [r14+rdi*8]
   56309:	add    rdi,0x1
   5630d:	mov    DWORD PTR [rcx+r8*1],esi
   56311:	mov    ecx,DWORD PTR [r11+rdx*4]
   56315:	mov    esi,edx
   56317:	mov    DWORD PTR [rbp+rdx*4+0x148],ecx
   5631e:	mov    ecx,DWORD PTR [rax+0x90]
   56324:	add    rdx,0x1
   56328:	lea    r9d,[rcx+0x3]
   5632c:	cmp    r9d,edi
   5632f:	jge    56302 <set_stored_macroblock_parameters+0xd82>
   56331:	mov    edi,DWORD PTR [rax+0x94]
   56337:	add    r10d,0x1
   5633b:	add    r8,0x4
   5633f:	lea    edx,[rdi+0x3]
   56342:	cmp    edx,r10d
   56345:	jge    562f9 <set_stored_macroblock_parameters+0xd79>
   56347:	jmp    55e76 <set_stored_macroblock_parameters+0x8f6>
   5634c:	mov    r13,QWORD PTR [rax+0x11908]
   56353:	cmp    r14d,0x1
   56357:	cmove  r13,QWORD PTR [rax+0x11900]
   5635f:	xor    r12d,r12d
   56362:	mov    WORD PTR [r10],r12w
   56366:	mov    r10,QWORD PTR [rsp+0x58]
   5636b:	mov    r10,QWORD PTR [r10+0x18]
   5636f:	mov    QWORD PTR [r9],r10
   56372:	lea    r10,[rdx*8+0x0]
   5637a:	mov    r9,QWORD PTR [r13+r10*1+0x0]
   5637f:	mov    r13d,DWORD PTR [rsp+0x10]
   56384:	mov    r9,QWORD PTR [r9+r15*1]
   56388:	mov    r9,QWORD PTR [r9+0x8]
   5638c:	mov    r9,QWORD PTR [r9]
   5638f:	mov    r9,QWORD PTR [r9+r11*8]
   56393:	movzx  r10d,WORD PTR [r9]
   56397:	mov    WORD PTR [rdi],r10w
   5639b:	movzx  r9d,WORD PTR [r9+0x2]
   563a0:	mov    WORD PTR [rdi+0x2],r9w
   563a5:	test   r13d,r13d
   563a8:	je     56179 <set_stored_macroblock_parameters+0xbf9>
   563ae:	xor    r9d,r9d
   563b1:	mov    WORD PTR [rsi+0xce0],r9w
   563b9:	jmp    56179 <set_stored_macroblock_parameters+0xbf9>
   563be:	xchg   ax,ax

00000000000563c0 <StoreNewMotionVectorsBlock8x8>:
   563c0:	endbr64 
   563c4:	mov    eax,esi
   563c6:	push   r15
   563c8:	shr    eax,0x1f
   563cb:	push   r14
   563cd:	push   r13
   563cf:	push   r12
   563d1:	push   rbp
   563d2:	lea    ebp,[rsi+rax*1]
   563d5:	and    ebp,0x1
   563d8:	push   rbx
   563d9:	sub    ebp,eax
   563db:	mov    eax,esi
   563dd:	shr    eax,0x1f
   563e0:	add    ebp,ebp
   563e2:	add    eax,esi
   563e4:	mov    DWORD PTR [rsp-0x38],r8d
   563e9:	lea    ebx,[rbp+0x1]
   563ec:	and    eax,0xfffffffe
   563ef:	test   r9d,r9d
   563f2:	js     565f8 <StoreNewMotionVectorsBlock8x8+0x238>
   563f8:	mov    r12d,ecx
   563fb:	mov    r14d,DWORD PTR [rsp+0x38]
   56400:	mov    rcx,QWORD PTR [rip+0x321a9]        # 885b0 <img>
   56407:	mov    r10,QWORD PTR [rcx+0x118f8]
   5640e:	mov    r11,QWORD PTR [rcx+0x118f0]
   56415:	test   r14d,r14d
   56418:	jne    564e0 <StoreNewMotionVectorsBlock8x8+0x120>
   5641e:	movsxd rcx,ebp
   56421:	movsxd rdi,edi
   56424:	cdqe   
   56426:	movsxd r8,r12d
   56429:	lea    rdx,[rcx+rdi*8]
   5642d:	lea    r9,[rip+0x88eac]        # df2e0 <all_mv8x8>
   56434:	shl    r8,0x3
   56438:	lea    rbx,[rax+rdx*4]
   5643c:	lea    r13,[rip+0x88fbd]        # df400 <pred_mv8x8>
   56443:	shl    rax,0x3
   56447:	shl    rbx,0x2
   5644b:	lea    r15,[rax+0x10]
   5644f:	lea    r14,[r9+0x2]
   56453:	lea    r12,[r13+0x2]
   56457:	lea    rbp,[rcx+0x2]
   5645b:	mov    QWORD PTR [rsp-0x38],rcx
   56460:	mov    rdx,rbx
   56463:	mov    rsi,rcx
   56466:	mov    rdi,QWORD PTR [r10+rsi*8]
   5646a:	mov    rdi,QWORD PTR [rdi+rax*1]
   5646e:	mov    rdi,QWORD PTR [rdi]
   56471:	mov    rdi,QWORD PTR [rdi+r8*1]
   56475:	mov    rdi,QWORD PTR [rdi+0x20]
   56479:	movzx  ecx,WORD PTR [rdi]
   5647c:	mov    WORD PTR [r9+rdx*1],cx
   56481:	movzx  edi,WORD PTR [rdi+0x2]
   56485:	mov    WORD PTR [r14+rdx*1],di
   5648a:	mov    rdi,QWORD PTR [r11+rsi*8]
   5648e:	add    rsi,0x1
   56492:	mov    rdi,QWORD PTR [rdi+rax*1]
   56496:	mov    rdi,QWORD PTR [rdi]
   56499:	mov    rdi,QWORD PTR [rdi+r8*1]
   5649d:	mov    rdi,QWORD PTR [rdi+0x20]
   564a1:	movzx  ecx,WORD PTR [rdi]
   564a4:	mov    WORD PTR [r13+rdx*1+0x0],cx
   564aa:	movzx  edi,WORD PTR [rdi+0x2]
   564ae:	mov    WORD PTR [r12+rdx*1],di
   564b3:	add    rdx,0x10
   564b7:	cmp    rsi,rbp
   564ba:	jne    56466 <StoreNewMotionVectorsBlock8x8+0xa6>
   564bc:	add    rax,0x8
   564c0:	mov    rcx,QWORD PTR [rsp-0x38]
   564c5:	add    rbx,0x4
   564c9:	cmp    r15,rax
   564cc:	jne    5645b <StoreNewMotionVectorsBlock8x8+0x9b>
   564ce:	pop    rbx
   564cf:	pop    rbp
   564d0:	pop    r12
   564d2:	pop    r13
   564d4:	pop    r14
   564d6:	pop    r15
   564d8:	ret    
   564d9:	nop    DWORD PTR [rax+0x0]
   564e0:	lea    ecx,[rax+0x1]
   564e3:	mov    DWORD PTR [rsp-0x10],ecx
   564e7:	lea    ecx,[r9-0x1]
   564eb:	and    r9d,0xfffffffd
   564ef:	mov    DWORD PTR [rsp-0x1c],ecx
   564f3:	jne    566e8 <StoreNewMotionVectorsBlock8x8+0x328>
   564f9:	cdqe   
   564fb:	movsxd rcx,ebp
   564fe:	movsxd rsi,edi
   56501:	movsxd r8,r12d
   56504:	lea    rbp,[rax*8+0x0]
   5650c:	mov    QWORD PTR [rsp-0x28],rsi
   56511:	lea    rsi,[rcx+rsi*8]
   56515:	movsxd rdx,edx
   56518:	lea    rsi,[rax+rsi*4]
   5651c:	lea    rdi,[rbp+0x10]
   56520:	mov    DWORD PTR [rsp-0xc],ebx
   56524:	shl    r8,0x3
   56528:	mov    QWORD PTR [rsp-0x18],rdi
   5652d:	shl    rsi,0x2
   56531:	lea    rdi,[rcx+0x2]
   56535:	lea    r9,[rip+0x88da4]        # df2e0 <all_mv8x8>
   5653c:	mov    QWORD PTR [rsp-0x8],rax
   56541:	shl    rdx,0x3
   56545:	lea    r14,[r9+0x2]
   56549:	mov    rax,rsi
   5654c:	lea    r13,[rip+0x88ead]        # df400 <pred_mv8x8>
   56553:	mov    rbx,rdi
   56556:	lea    r12,[r13+0x2]
   5655a:	mov    QWORD PTR [rsp-0x30],rax
   5655f:	mov    rsi,rax
   56562:	mov    rdi,rcx
   56565:	mov    r15,QWORD PTR [r10+rdi*8]
   56569:	mov    r15,QWORD PTR [r15+rbp*1]
   5656d:	mov    r15,QWORD PTR [r15]
   56570:	mov    r15,QWORD PTR [r15+r8*1]
   56574:	mov    r15,QWORD PTR [r15+rdx*1]
   56578:	movzx  eax,WORD PTR [r15]
   5657c:	mov    WORD PTR [r9+rsi*1],ax
   56581:	movzx  r15d,WORD PTR [r15+0x2]
   56586:	mov    WORD PTR [r14+rsi*1],r15w
   5658b:	mov    r15,QWORD PTR [r11+rdi*8]
   5658f:	add    rdi,0x1
   56593:	mov    r15,QWORD PTR [r15+rbp*1]
   56597:	mov    r15,QWORD PTR [r15]
   5659a:	mov    r15,QWORD PTR [r15+r8*1]
   5659e:	mov    r15,QWORD PTR [r15+rdx*1]
   565a2:	movzx  eax,WORD PTR [r15]
   565a6:	mov    WORD PTR [r13+rsi*1+0x0],ax
   565ac:	movzx  r15d,WORD PTR [r15+0x2]
   565b1:	mov    WORD PTR [r12+rsi*1],r15w
   565b6:	add    rsi,0x10
   565ba:	cmp    rbx,rdi
   565bd:	jne    56565 <StoreNewMotionVectorsBlock8x8+0x1a5>
   565bf:	mov    rax,QWORD PTR [rsp-0x30]
   565c4:	add    rbp,0x8
   565c8:	add    rax,0x4
   565cc:	cmp    QWORD PTR [rsp-0x18],rbp
   565d1:	jne    5655a <StoreNewMotionVectorsBlock8x8+0x19a>
   565d3:	cmp    DWORD PTR [rsp-0x1c],0x1
   565d8:	movsxd rbx,DWORD PTR [rsp-0xc]
   565dd:	mov    rax,QWORD PTR [rsp-0x8]
   565e2:	jbe    56817 <StoreNewMotionVectorsBlock8x8+0x457>
   565e8:	movsxd rsi,DWORD PTR [rsp-0x10]
   565ed:	jmp    56776 <StoreNewMotionVectorsBlock8x8+0x3b6>
   565f2:	nop    WORD PTR [rax+rax*1+0x0]
   565f8:	movsxd rdi,edi
   565fb:	movsxd rcx,ebp
   565fe:	movsxd r10,eax
   56601:	xor    r11d,r11d
   56604:	lea    rsi,[rdi*8+0x0]
   5660c:	movsxd rbx,ebx
   5660f:	xor    r15d,r15d
   56612:	xor    ebp,ebp
   56614:	lea    r8,[rsi+rcx*1]
   56618:	shl    rdi,0x5
   5661c:	xor    r12d,r12d
   5661f:	xor    r13d,r13d
   56622:	shl    r8,0x2
   56626:	lea    rdx,[rip+0x88cb3]        # df2e0 <all_mv8x8>
   5662d:	xor    r14d,r14d
   56630:	add    eax,0x1
   56633:	lea    r9,[r8+r10*1]
   56637:	cdqe   
   56639:	mov    WORD PTR [rdx+r9*4+0x2],r11w
   5663f:	lea    r11,[rdi+rcx*4]
   56643:	lea    rdi,[rdi+rbx*4]
   56647:	lea    rcx,[r10+r11*1+0x10]
   5664c:	mov    WORD PTR [rdx+r9*4],r15w
   56651:	xor    r15d,r15d
   56654:	mov    WORD PTR [rdx+rcx*4],bp
   56658:	lea    rcx,[rsi+rbx*1]
   5665c:	xor    ebp,ebp
   5665e:	xor    ebx,ebx
   56660:	shl    rcx,0x2
   56664:	mov    WORD PTR [rdx+r9*4+0x42],r12w
   5666a:	lea    r9,[r10+rdi*1+0x10]
   5666f:	xor    r12d,r12d
   56672:	lea    rsi,[rcx+r10*1]
   56676:	add    rcx,rax
   56679:	xor    r10d,r10d
   5667c:	mov    WORD PTR [rdx+rsi*4],r13w
   56681:	xor    r13d,r13d
   56684:	mov    WORD PTR [rdx+rsi*4+0x2],r14w
   5668a:	xor    r14d,r14d
   5668d:	mov    WORD PTR [rdx+r9*4],r15w
   56692:	xor    r9d,r9d
   56695:	xor    r15d,r15d
   56698:	mov    WORD PTR [rdx+rsi*4+0x42],r9w
   5669e:	lea    rsi,[r8+rax*1]
   566a2:	lea    r8,[r11+rax*1+0x10]
   566a7:	lea    rax,[rdi+rax*1+0x10]
   566ac:	mov    WORD PTR [rdx+rsi*4],r10w
   566b1:	mov    WORD PTR [rdx+rsi*4+0x2],bx
   566b6:	mov    WORD PTR [rdx+r8*4],bp
   566bb:	mov    WORD PTR [rdx+rsi*4+0x42],r12w
   566c1:	mov    WORD PTR [rdx+rcx*4],r13w
   566c6:	mov    WORD PTR [rdx+rcx*4+0x2],r14w
   566cc:	mov    WORD PTR [rdx+rax*4],r15w
   566d1:	xor    eax,eax
   566d3:	mov    WORD PTR [rdx+rcx*4+0x42],ax
   566d8:	pop    rbx
   566d9:	pop    rbp
   566da:	pop    r12
   566dc:	pop    r13
   566de:	pop    r14
   566e0:	pop    r15
   566e2:	ret    
   566e3:	nop    DWORD PTR [rax+rax*1+0x0]
   566e8:	movsxd rsi,edi
   566eb:	movsxd rcx,ebp
   566ee:	movsxd rbx,ebx
   566f1:	cdqe   
   566f3:	lea    rdi,[rsi*8+0x0]
   566fb:	xor    ebp,ebp
   566fd:	xor    r12d,r12d
   56700:	xor    r13d,r13d
   56703:	lea    r8,[rdi+rcx*1]
   56707:	add    rdi,rbx
   5670a:	mov    QWORD PTR [rsp-0x28],rsi
   5670f:	xor    r14d,r14d
   56712:	shl    r8,0x2
   56716:	lea    r9,[rip+0x88bc3]        # df2e0 <all_mv8x8>
   5671d:	shl    rdi,0x2
   56721:	xor    r15d,r15d
   56724:	lea    rsi,[r8+rax*1]
   56728:	mov    WORD PTR [r9+rsi*4],bp
   5672d:	xor    ebp,ebp
   5672f:	mov    WORD PTR [r9+rsi*4+0x2],r12w
   56735:	lea    rsi,[rdi+rax*1]
   56739:	xor    r12d,r12d
   5673c:	mov    WORD PTR [r9+rsi*4],r13w
   56741:	xor    r13d,r13d
   56744:	mov    WORD PTR [r9+rsi*4+0x2],r14w
   5674a:	movsxd rsi,DWORD PTR [rsp-0x10]
   5674f:	add    r8,rsi
   56752:	add    rdi,rsi
   56755:	cmp    DWORD PTR [rsp-0x1c],0x1
   5675a:	mov    WORD PTR [r9+r8*4],r15w
   5675f:	mov    WORD PTR [r9+r8*4+0x2],bp
   56765:	mov    WORD PTR [r9+rdi*4],r12w
   5676a:	mov    WORD PTR [r9+rdi*4+0x2],r13w
   56770:	jbe    56810 <StoreNewMotionVectorsBlock8x8+0x450>
   56776:	mov    r14,QWORD PTR [rsp-0x28]
   5677b:	xor    r10d,r10d
   5677e:	xor    r11d,r11d
   56781:	xor    ebp,ebp
   56783:	xor    r12d,r12d
   56786:	xor    r13d,r13d
   56789:	xor    r15d,r15d
   5678c:	mov    rdx,r14
   5678f:	shl    rdx,0x5
   56793:	lea    r8,[rdx+rcx*4]
   56797:	lea    rdx,[rdx+rbx*4]
   5679b:	lea    rdi,[r8+rax*1+0x10]
   567a0:	mov    WORD PTR [r9+rdi*4],r10w
   567a5:	mov    rdi,r14
   567a8:	xor    r14d,r14d
   567ab:	shl    rdi,0x3
   567af:	add    rcx,rdi
   567b2:	add    rbx,rdi
   567b5:	shl    rcx,0x2
   567b9:	shl    rbx,0x2
   567bd:	lea    r10,[rcx+rax*1]
   567c1:	add    rcx,rsi
   567c4:	mov    WORD PTR [r9+r10*4+0x42],r11w
   567ca:	lea    r10,[rdx+rax*1+0x10]
   567cf:	add    rax,rbx
   567d2:	add    rbx,rsi
   567d5:	mov    WORD PTR [r9+r10*4],bp
   567da:	mov    WORD PTR [r9+rax*4+0x42],r12w
   567e0:	lea    rax,[r8+rsi*1+0x10]
   567e5:	mov    WORD PTR [r9+rax*4],r13w
   567ea:	lea    rax,[rdx+rsi*1+0x10]
   567ef:	mov    WORD PTR [r9+rcx*4+0x42],r14w
   567f5:	mov    WORD PTR [r9+rax*4],r15w
   567fa:	xor    eax,eax
   567fc:	mov    WORD PTR [r9+rbx*4+0x42],ax
   56802:	pop    rbx
   56803:	pop    rbp
   56804:	pop    r12
   56806:	pop    r13
   56808:	pop    r14
   5680a:	pop    r15
   5680c:	ret    
   5680d:	nop    DWORD PTR [rax]
   56810:	movsxd rdx,edx
   56813:	shl    rdx,0x3
   56817:	mov    rbx,QWORD PTR [rsp-0x28]
   5681c:	movsxd r9,DWORD PTR [rsp-0x38]
   56821:	lea    rbp,[rcx+0x2]
   56825:	lea    r15,[rip+0x88af4]        # df320 <all_mv8x8+0x40>
   5682c:	lea    r13,[rip+0x88c0d]        # df440 <pred_mv8x8+0x40>
   56833:	lea    r14,[r15+0x2]
   56837:	lea    rsi,[rcx+rbx*8]
   5683b:	shl    r9,0x3
   5683f:	lea    r12,[r13+0x2]
   56843:	lea    rbx,[rax+rsi*4]
   56847:	shl    rax,0x3
   5684b:	lea    rsi,[rax+0x10]
   5684f:	shl    rbx,0x2
   56853:	mov    QWORD PTR [rsp-0x30],rsi
   56858:	mov    QWORD PTR [rsp-0x38],rcx
   5685d:	mov    rsi,rbx
   56860:	mov    rdi,rcx
   56863:	mov    r8,QWORD PTR [r10+rdi*8]
   56867:	mov    r8,QWORD PTR [r8+rax*1]
   5686b:	mov    r8,QWORD PTR [r8+0x8]
   5686f:	mov    r8,QWORD PTR [r8+r9*1]
   56873:	mov    r8,QWORD PTR [r8+rdx*1]
   56877:	movzx  ecx,WORD PTR [r8]
   5687b:	mov    WORD PTR [r15+rsi*1],cx
   56880:	movzx  r8d,WORD PTR [r8+0x2]
   56885:	mov    WORD PTR [r14+rsi*1],r8w
   5688a:	mov    r8,QWORD PTR [r11+rdi*8]
   5688e:	add    rdi,0x1
   56892:	mov    r8,QWORD PTR [r8+rax*1]
   56896:	mov    r8,QWORD PTR [r8+0x8]
   5689a:	mov    r8,QWORD PTR [r8+r9*1]
   5689e:	mov    r8,QWORD PTR [r8+rdx*1]
   568a2:	movzx  ecx,WORD PTR [r8]
   568a6:	mov    WORD PTR [r13+rsi*1+0x0],cx
   568ac:	movzx  r8d,WORD PTR [r8+0x2]
   568b1:	mov    WORD PTR [r12+rsi*1],r8w
   568b6:	add    rsi,0x10
   568ba:	cmp    rbp,rdi
   568bd:	jne    56863 <StoreNewMotionVectorsBlock8x8+0x4a3>
   568bf:	mov    rcx,QWORD PTR [rsp-0x38]
   568c4:	add    rbx,0x4
   568c8:	add    rax,0x8
   568cc:	cmp    QWORD PTR [rsp-0x30],rax
   568d1:	jne    56858 <StoreNewMotionVectorsBlock8x8+0x498>
   568d3:	pop    rbx
   568d4:	pop    rbp
   568d5:	pop    r12
   568d7:	pop    r13
   568d9:	pop    r14
   568db:	pop    r15
   568dd:	ret    
   568de:	xchg   ax,ax

00000000000568e0 <GetBestTransformP8x8>:
   568e0:	endbr64 
   568e4:	mov    rax,QWORD PTR [rip+0x31ccd]        # 885b8 <input>
   568eb:	cmp    DWORD PTR [rax+0xc94],0x2
   568f2:	je     56900 <GetBestTransformP8x8+0x20>
   568f4:	xor    eax,eax
   568f6:	jmp    4e420 <GetBestTransformP8x8.part.0>
   568fb:	nop    DWORD PTR [rax+rax*1+0x0]
   56900:	mov    eax,0x1
   56905:	ret    
   56906:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000056910 <set_mbaff_parameters>:
   56910:	endbr64 
   56914:	mov    rax,QWORD PTR [rip+0x31c95]        # 885b0 <img>
   5691b:	mov    esi,DWORD PTR [rax+0x11ad0]
   56921:	test   esi,esi
   56923:	je     56d46 <set_mbaff_parameters+0x436>
   56929:	push   r15
   5692b:	mov    r15,QWORD PTR [rip+0x34076]        # 8a9a8 <enc_picture>
   56932:	push   r14
   56934:	mov    rdx,QWORD PTR [rip+0x4a425]        # a0d60 <rdopt>
   5693b:	push   r13
   5693d:	push   r12
   5693f:	mov    r8,rdx
   56942:	mov    r12,rdx
   56945:	push   rbp
   56946:	mov    ebp,DWORD PTR [rip+0x8bdd4]        # e2720 <best_mode>
   5694c:	push   rbx
   5694d:	mov    rbx,QWORD PTR [rax+0x3758]
   56954:	movsxd rsi,DWORD PTR [rax+0x9c]
   5695b:	mov    rcx,QWORD PTR [r15+0x1918]
   56962:	movsxd r11,DWORD PTR [rax+0x98]
   56969:	mov    rdi,QWORD PTR [rax+0x68]
   5696d:	mov    QWORD PTR [rsp-0x20],rbx
   56972:	mov    ebx,DWORD PTR [rax+0xc]
   56975:	lea    r10,[rcx+rsi*8]
   56979:	add    r11,r11
   5697c:	mov    DWORD PTR [rsp-0x18],ebx
   56980:	mov    ebx,DWORD PTR [rax+0x18]
   56983:	mov    DWORD PTR [rsp-0xc],ebx
   56987:	lea    rbx,[rdx+0x400]
   5698e:	mov    r9,QWORD PTR [r10]
   56991:	xor    ecx,ecx
   56993:	add    r9,r11
   56996:	nop    WORD PTR cs:[rax+rax*1+0x0]
   569a0:	movzx  esi,WORD PTR [r9+rcx*2]
   569a5:	mov    DWORD PTR [r8+rcx*4+0x8],esi
   569aa:	add    rcx,0x1
   569ae:	cmp    rcx,0x10
   569b2:	jne    569a0 <set_mbaff_parameters+0x90>
   569b4:	add    r8,0x40
   569b8:	add    r10,0x8
   569bc:	cmp    rbx,r8
   569bf:	jne    5698e <set_mbaff_parameters+0x7e>
   569c1:	mov    ecx,DWORD PTR [rax+0x11bfc]
   569c7:	test   ecx,ecx
   569c9:	je     56a63 <set_mbaff_parameters+0x153>
   569cf:	mov    r14d,DWORD PTR [rax+0x11c08]
   569d6:	test   r14d,r14d
   569d9:	jle    56a63 <set_mbaff_parameters+0x153>
   569df:	mov    r13d,DWORD PTR [rax+0x11c04]
   569e6:	mov    rsi,rdx
   569e9:	xor    ebx,ebx
   569eb:	lea    r10d,[r13-0x1]
   569ef:	test   r13d,r13d
   569f2:	jle    56a57 <set_mbaff_parameters+0x147>
   569f4:	mov    r11,QWORD PTR [r15+0x1940]
   569fb:	mov    ecx,DWORD PTR [rax+0xa4]
   56a01:	movsxd r9,DWORD PTR [rax+0xa0]
   56a08:	mov    QWORD PTR [rsp-0x8],r11
   56a0d:	add    ecx,ebx
   56a0f:	mov    r11,QWORD PTR [r11]
   56a12:	movsxd rcx,ecx
   56a15:	add    r9,r9
   56a18:	mov    r8,QWORD PTR [r11+rcx*8]
   56a1c:	add    r8,r9
   56a1f:	mov    r11,r8
   56a22:	mov    r8,QWORD PTR [rsp-0x8]
   56a27:	mov    r8,QWORD PTR [r8+0x8]
   56a2b:	add    r9,QWORD PTR [r8+rcx*8]
   56a2f:	xor    ecx,ecx
   56a31:	movzx  r8d,WORD PTR [r11+rcx*2]
   56a36:	mov    DWORD PTR [rsi+rcx*4+0x408],r8d
   56a3e:	movzx  r8d,WORD PTR [r9+rcx*2]
   56a43:	mov    DWORD PTR [rsi+rcx*4+0x808],r8d
   56a4b:	mov    r8,rcx
   56a4e:	add    rcx,0x1
   56a52:	cmp    r10,r8
   56a55:	jne    56a31 <set_mbaff_parameters+0x121>
   56a57:	add    ebx,0x1
   56a5a:	add    rsi,0x40
   56a5e:	cmp    ebx,r14d
   56a61:	jne    569ef <set_mbaff_parameters+0xdf>
   56a63:	movsxd rsi,DWORD PTR [rsp-0x18]
   56a68:	mov    ecx,DWORD PTR [rax+0x11abc]
   56a6e:	mov    DWORD PTR [rdx+0xc98],ebp
   56a74:	imul   rsi,rsi,0x278
   56a7b:	add    rsi,QWORD PTR [rsp-0x20]
   56a80:	mov    DWORD PTR [rdx+0xd00],ecx
   56a86:	mov    ecx,DWORD PTR [rsi+0x1cc]
   56a8c:	mov    r8d,DWORD PTR [rsi+0x23c]
   56a93:	mov    DWORD PTR [rdx+0xc88],ecx
   56a99:	mov    rcx,QWORD PTR [rsi+0x1d0]
   56aa0:	mov    QWORD PTR [rdx+0xc90],rcx
   56aa7:	mov    ecx,DWORD PTR [rsi+0x48]
   56aaa:	mov    DWORD PTR [rdx+0xd08],r8d
   56ab1:	mov    DWORD PTR [rdx+0xc18],ecx
   56ab7:	test   ecx,ecx
   56ab9:	jne    56ac3 <set_mbaff_parameters+0x1b3>
   56abb:	test   ebp,ebp
   56abd:	jne    56d47 <set_mbaff_parameters+0x437>
   56ac3:	cmp    DWORD PTR [rax+0x11bf4],0xfffffffd
   56aca:	jl     56b7d <set_mbaff_parameters+0x26d>
   56ad0:	mov    rbx,QWORD PTR [rax+0x3738]
   56ad7:	xor    r14d,r14d
   56ada:	mov    QWORD PTR [rsp-0x18],rbx
   56adf:	mov    rbx,QWORD PTR [rdx+0xc08]
   56ae6:	mov    QWORD PTR [rsp-0x8],rbx
   56aeb:	mov    rbx,QWORD PTR [rsp-0x18]
   56af0:	xor    r10d,r10d
   56af3:	mov    r13,QWORD PTR [rbx+r14*8]
   56af7:	mov    rbx,QWORD PTR [rsp-0x8]
   56afc:	mov    rbp,QWORD PTR [rbx+r14*8]
   56b00:	mov    r11,QWORD PTR [r13+r10*1+0x0]
   56b05:	mov    rbx,QWORD PTR [rbp+r10*1+0x0]
   56b0a:	mov    QWORD PTR [rsp-0x20],rax
   56b0f:	xor    ecx,ecx
   56b11:	mov    r9,QWORD PTR [r11]
   56b14:	mov    r8,QWORD PTR [rbx]
   56b17:	nop    WORD PTR [rax+rax*1+0x0]
   56b20:	mov    eax,DWORD PTR [r9+rcx*1]
   56b24:	mov    DWORD PTR [r8+rcx*1],eax
   56b28:	add    rcx,0x4
   56b2c:	cmp    rcx,0x104
   56b33:	jne    56b20 <set_mbaff_parameters+0x210>
   56b35:	mov    rax,QWORD PTR [rsp-0x20]
   56b3a:	mov    r11,QWORD PTR [r11+0x8]
   56b3e:	xor    ecx,ecx
   56b40:	mov    r9,QWORD PTR [rbx+0x8]
   56b44:	nop    DWORD PTR [rax+0x0]
   56b48:	mov    r8d,DWORD PTR [r11+rcx*1]
   56b4c:	mov    DWORD PTR [r9+rcx*1],r8d
   56b50:	add    rcx,0x4
   56b54:	cmp    rcx,0x104
   56b5b:	jne    56b48 <set_mbaff_parameters+0x238>
   56b5d:	add    r10,0x8
   56b61:	cmp    r10,0x20
   56b65:	jne    56b00 <set_mbaff_parameters+0x1f0>
   56b67:	mov    ebx,DWORD PTR [rax+0x11bf4]
   56b6d:	add    r14,0x1
   56b71:	lea    ecx,[rbx+0x3]
   56b74:	cmp    ecx,r14d
   56b77:	jge    56aeb <set_mbaff_parameters+0x1db>
   56b7d:	mov    r13,QWORD PTR [rax+0x3740]
   56b84:	mov    rbp,QWORD PTR [rdx+0xc10]
   56b8b:	xor    r10d,r10d
   56b8e:	mov    r14,QWORD PTR [r13+r10*1+0x0]
   56b93:	mov    rbx,QWORD PTR [rbp+r10*1+0x0]
   56b98:	xor    ecx,ecx
   56b9a:	mov    r11,QWORD PTR [r14]
   56b9d:	mov    r9,QWORD PTR [rbx]
   56ba0:	mov    r8d,DWORD PTR [r11+rcx*1]
   56ba4:	mov    DWORD PTR [r9+rcx*1],r8d
   56ba8:	add    rcx,0x4
   56bac:	cmp    rcx,0x48
   56bb0:	jne    56ba0 <set_mbaff_parameters+0x290>
   56bb2:	mov    r11,QWORD PTR [r14+0x8]
   56bb6:	mov    r9,QWORD PTR [rbx+0x8]
   56bba:	xor    ecx,ecx
   56bbc:	nop    DWORD PTR [rax+0x0]
   56bc0:	mov    r8d,DWORD PTR [r11+rcx*1]
   56bc4:	mov    DWORD PTR [r9+rcx*1],r8d
   56bc8:	add    rcx,0x4
   56bcc:	cmp    rcx,0x48
   56bd0:	jne    56bc0 <set_mbaff_parameters+0x2b0>
   56bd2:	add    r10,0x8
   56bd6:	cmp    r10,0x18
   56bda:	jne    56b8e <set_mbaff_parameters+0x27e>
   56bdc:	xor    ecx,ecx
   56bde:	mov    r8d,DWORD PTR [rsi+rcx*1+0x1d8]
   56be6:	mov    DWORD PTR [rdx+rcx*1+0xc20],r8d
   56bee:	mov    r8d,DWORD PTR [rsi+rcx*1+0x1e8]
   56bf6:	mov    DWORD PTR [rdx+rcx*1+0xc30],r8d
   56bfe:	add    rcx,0x4
   56c02:	cmp    rcx,0x10
   56c06:	jne    56bde <set_mbaff_parameters+0x2ce>
   56c08:	movsxd rcx,DWORD PTR [rax+0x94]
   56c0f:	mov    r15,QWORD PTR [r15+0x1950]
   56c16:	mov    r9,rdx
   56c19:	lea    r13,[rcx+rcx*1]
   56c1d:	mov    QWORD PTR [rsp-0x18],rcx
   56c22:	mov    rbx,rcx
   56c25:	lea    rcx,[rdx+0x20]
   56c29:	mov    QWORD PTR [rsp-0x20],rcx
   56c2e:	movsxd rcx,DWORD PTR [rax+0x90]
   56c35:	mov    r10,r13
   56c38:	mov    r14,QWORD PTR [r15]
   56c3b:	lea    rbp,[rcx*8+0x0]
   56c43:	add    r14,rbp
   56c46:	xor    r8d,r8d
   56c49:	mov    r11,QWORD PTR [r14+r8*8]
   56c4d:	movzx  r11d,WORD PTR [r11+r10*1]
   56c52:	mov    WORD PTR [r9+r8*2+0xcc0],r11w
   56c5b:	add    r8,0x1
   56c5f:	cmp    r8,0x4
   56c63:	jne    56c49 <set_mbaff_parameters+0x339>
   56c65:	add    r10,0x2
   56c69:	add    r9,0x8
   56c6d:	cmp    QWORD PTR [rsp-0x20],r9
   56c72:	jne    56c46 <set_mbaff_parameters+0x336>
   56c74:	cmp    DWORD PTR [rsp-0xc],0x1
   56c79:	je     56d00 <set_mbaff_parameters+0x3f0>
   56c7f:	mov    r9,QWORD PTR [rsp-0x18]
   56c84:	mov    rbp,QWORD PTR [rdx+0xc40]
   56c8b:	xor    r12d,r12d
   56c8e:	shl    r9,0x2
   56c92:	lea    r8d,[r12+0x1]
   56c97:	movsxd r8,r8d
   56c9a:	nop    WORD PTR [rax+rax*1+0x0]
   56ca0:	mov    r10,QWORD PTR [rdi+rcx*8]
   56ca4:	mov    r12d,r8d
   56ca7:	mov    r11d,DWORD PTR [r10+r9*1]
   56cab:	mov    r10,QWORD PTR [rbp+rcx*8+0x0]
   56cb0:	add    rcx,0x1
   56cb4:	mov    DWORD PTR [r10+r9*1],r11d
   56cb8:	mov    r10d,DWORD PTR [rsi+r8*4+0x148]
   56cc0:	mov    DWORD PTR [rdx+r8*4+0xc44],r10d
   56cc8:	mov    r10d,DWORD PTR [rax+0x90]
   56ccf:	add    r8,0x1
   56cd3:	lea    r11d,[r10+0x3]
   56cd7:	cmp    r11d,ecx
   56cda:	jge    56ca0 <set_mbaff_parameters+0x390>
   56cdc:	mov    ecx,DWORD PTR [rax+0x94]
   56ce2:	add    ebx,0x1
   56ce5:	add    r9,0x4
   56ce9:	add    ecx,0x3
   56cec:	cmp    ecx,ebx
   56cee:	jl     56cf5 <set_mbaff_parameters+0x3e5>
   56cf0:	movsxd rcx,r10d
   56cf3:	jmp    56c92 <set_mbaff_parameters+0x382>
   56cf5:	pop    rbx
   56cf6:	pop    rbp
   56cf7:	pop    r12
   56cf9:	pop    r13
   56cfb:	pop    r14
   56cfd:	pop    r15
   56cff:	ret    
   56d00:	add    rbp,QWORD PTR [r15+0x8]
   56d04:	xor    r8d,r8d
   56d07:	mov    r9,QWORD PTR [rbp+r8*8+0x0]
   56d0c:	movzx  r9d,WORD PTR [r9+r13*1]
   56d11:	mov    WORD PTR [r12+r8*2+0xce0],r9w
   56d1a:	add    r8,0x1
   56d1e:	cmp    r8,0x4
   56d22:	jne    56d07 <set_mbaff_parameters+0x3f7>
   56d24:	add    r13,0x2
   56d28:	add    r12,0x8
   56d2c:	cmp    r12,QWORD PTR [rsp-0x20]
   56d31:	jne    56d04 <set_mbaff_parameters+0x3f4>
   56d33:	mov    r8d,DWORD PTR [rsi+0x244]
   56d3a:	mov    DWORD PTR [rdx+0xc1c],r8d
   56d41:	jmp    56c7f <set_mbaff_parameters+0x36f>
   56d46:	ret    
   56d47:	mov    DWORD PTR [rdx+0xc98],0x0
   56d51:	jmp    56ac3 <set_mbaff_parameters+0x1b3>
   56d56:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000056d60 <encode_one_macroblock>:
   56d60:	endbr64 
   56d64:	push   r15
   56d66:	push   r14
   56d68:	push   r13
   56d6a:	push   r12
   56d6c:	push   rbp
   56d6d:	push   rbx
   56d6e:	sub    rsp,0x228
   56d75:	mov    rax,QWORD PTR fs:0x28
   56d7e:	mov    QWORD PTR [rsp+0x218],rax
   56d86:	xor    eax,eax
   56d88:	mov    rax,QWORD PTR [rip+0x31821]        # 885b0 <img>
   56d8f:	mov    DWORD PTR [rsp+0x1a4],0x0
   56d9a:	mov    DWORD PTR [rsp+0x1a8],0x0
   56da5:	mov    ebx,DWORD PTR [rax+0x18]
   56da8:	test   ebx,ebx
   56daa:	mov    DWORD PTR [rsp+0x14],ebx
   56dae:	sete   dl
   56db1:	cmp    ebx,0x3
   56db4:	sete   cl
   56db7:	or     dl,cl
   56db9:	je     56dca <encode_one_macroblock+0x6a>
   56dbb:	mov    ecx,DWORD PTR [rax+0x58]
   56dbe:	cmp    DWORD PTR [rax+0x8c],ecx
   56dc4:	je     58e8b <encode_one_macroblock+0x212b>
   56dca:	xor    ebx,ebx
   56dcc:	cmp    DWORD PTR [rsp+0x14],0x2
   56dd1:	sete   bl
   56dd4:	mov    edi,DWORD PTR [rsp+0x14]
   56dd8:	xor    ebp,ebp
   56dda:	mov    rcx,QWORD PTR [rip+0x317d7]        # 885b8 <input>
   56de1:	mov    DWORD PTR [rsp+0x5c],0x1
   56de9:	cmp    edi,0x4
   56dec:	mov    esi,DWORD PTR [rcx+0x9a0]
   56df2:	sete   bpl
   56df6:	cmp    edi,0x1
   56df9:	sete   dil
   56dfd:	sete   BYTE PTR [rsp+0xce]
   56e05:	movzx  edi,dil
   56e09:	mov    DWORD PTR [rsp+0x178],edi
   56e10:	mov    edi,DWORD PTR [rcx+0xb5c]
   56e16:	cmp    edi,0x1
   56e19:	je     582d0 <encode_one_macroblock+0x1570>
   56e1f:	test   esi,esi
   56e21:	setne  sil
   56e25:	test   edi,edi
   56e27:	setne  dil
   56e2b:	and    esi,edi
   56e2d:	and    esi,edx
   56e2f:	movsxd rdx,DWORD PTR [rax+0xc]
   56e33:	mov    BYTE PTR [rsp+0xcf],sil
   56e3b:	mov    rsi,QWORD PTR [rax+0x3758]
   56e42:	mov    rdi,rdx
   56e45:	imul   rdx,rdx,0x278
   56e4c:	test   edi,edi
   56e4e:	lea    r12,[rsi+rdx*1]
   56e52:	lea    rsi,[rsi+rdx*1-0x278]
   56e5a:	mov    edx,0x0
   56e5f:	cmovne rdx,rsi
   56e63:	mov    rsi,QWORD PTR [rax+0x68]
   56e67:	mov    QWORD PTR [rsp+0xe8],rsi
   56e6f:	mov    rsi,QWORD PTR [rax+0x118f8]
   56e76:	mov    eax,DWORD PTR [rax+0x11ad0]
   56e7c:	mov    QWORD PTR [rsp+0xe0],rdx
   56e84:	mov    QWORD PTR [rsp+0x118],rsi
   56e8c:	mov    DWORD PTR [rsp+0xa4],eax
   56e93:	test   eax,eax
   56e95:	je     56eae <encode_one_macroblock+0x14e>
   56e97:	mov    eax,DWORD PTR [r12+0x214]
   56e9f:	mov    DWORD PTR [rsp+0xa4],eax
   56ea6:	test   eax,eax
   56ea8:	jne    57490 <encode_one_macroblock+0x730>
   56eae:	mov    r10d,DWORD PTR [rcx+0xcdc]
   56eb5:	mov    DWORD PTR [rsp+0xf8],0x0
   56ec0:	mov    DWORD PTR [rsp+0xbc],0x1
   56ecb:	test   r10d,r10d
   56ece:	jne    574d4 <encode_one_macroblock+0x774>
   56ed4:	call   206d0 <RandomIntra>
   56ed9:	mov    r8,QWORD PTR [rip+0x316d8]        # 885b8 <input>
   56ee0:	xor    ecx,ecx
   56ee2:	mov    DWORD PTR [rsp+0x1f8],0x1
   56eed:	mov    edx,DWORD PTR [r8+0xc94]
   56ef4:	cmp    edx,0x2
   56ef7:	mov    DWORD PTR [rsp+0x204],edx
   56efe:	setne  cl
   56f01:	or     ebx,eax
   56f03:	sete   al
   56f06:	mov    DWORD PTR [rsp+0x1f4],ecx
   56f0d:	movzx  eax,al
   56f10:	mov    DWORD PTR [rsp+0xb8],ebx
   56f17:	mov    DWORD PTR [rsp+0x1d0],eax
   56f1e:	jne    56ff0 <encode_one_macroblock+0x290>
   56f24:	mov    esi,DWORD PTR [r8+0x940]
   56f2b:	xor    eax,eax
   56f2d:	mov    edi,DWORD PTR [r8+0x944]
   56f34:	mov    r9d,DWORD PTR [r8+0x948]
   56f3b:	test   esi,esi
   56f3d:	setne  al
   56f40:	mov    DWORD PTR [rsp+0x1d4],eax
   56f47:	xor    eax,eax
   56f49:	test   edi,edi
   56f4b:	setne  al
   56f4e:	mov    DWORD PTR [rsp+0x1d8],eax
   56f55:	xor    eax,eax
   56f57:	test   r9d,r9d
   56f5a:	setne  al
   56f5d:	mov    DWORD PTR [rsp+0x1dc],eax
   56f64:	mov    eax,DWORD PTR [r8+0x94c]
   56f6b:	test   eax,eax
   56f6d:	jne    57447 <encode_one_macroblock+0x6e7>
   56f73:	mov    ecx,DWORD PTR [r8+0x950]
   56f7a:	mov    DWORD PTR [rsp+0x1e0],0x0
   56f85:	test   ecx,ecx
   56f87:	jne    57466 <encode_one_macroblock+0x706>
   56f8d:	mov    r15d,DWORD PTR [r8+0x954]
   56f94:	mov    DWORD PTR [rsp+0x1e4],0x0
   56f9f:	test   r15d,r15d
   56fa2:	jne    57480 <encode_one_macroblock+0x720>
   56fa8:	mov    DWORD PTR [rsp+0x1e8],0x0
   56fb3:	mov    r14d,DWORD PTR [r8+0x958]
   56fba:	xor    ecx,ecx
   56fbc:	test   r14d,r14d
   56fbf:	setne  cl
   56fc2:	mov    DWORD PTR [rsp+0x1ec],ecx
   56fc9:	cmp    edx,0x2
   56fcc:	jne    5702c <encode_one_macroblock+0x2cc>
   56fce:	mov    DWORD PTR [rsp+0x1e4],0x0
   56fd9:	mov    QWORD PTR [rsp+0x1e8],0x0
   56fe5:	test   eax,eax
   56fe7:	jne    57039 <encode_one_macroblock+0x2d9>
   56fe9:	jmp    5703e <encode_one_macroblock+0x2de>
   56feb:	nop    DWORD PTR [rax+rax*1+0x0]
   56ff0:	mov    DWORD PTR [rsp+0x1d4],0x0
   56ffb:	mov    QWORD PTR [rsp+0x1d8],0x0
   57007:	mov    QWORD PTR [rsp+0x1e0],0x0
   57013:	mov    QWORD PTR [rsp+0x1e8],0x0
   5701f:	cmp    edx,0x2
   57022:	je     58e9e <encode_one_macroblock+0x213e>
   57028:	xor    eax,eax
   5702a:	xor    ecx,ecx
   5702c:	or     eax,DWORD PTR [rsp+0x1e4]
   57033:	je     59409 <encode_one_macroblock+0x26a9>
   57039:	mov    eax,0x1
   5703e:	mov    rcx,QWORD PTR [rip+0x3156b]        # 885b0 <img>
   57045:	mov    DWORD PTR [rsp+0x1f0],eax
   5704c:	mov    DWORD PTR [rsp+0x200],ebp
   57053:	movsxd rax,DWORD PTR [rsp+0xa4]
   5705b:	mov    r13d,DWORD PTR [rcx+0x11ad0]
   57062:	test   r13d,r13d
   57065:	jne    57a7b <encode_one_macroblock+0xd1b>
   5706b:	lea    rbx,[rip+0x603de]        # b7450 <listXsize>
   57072:	mov    QWORD PTR [rsp+0x60],rax
   57077:	mov    r9,rax
   5707a:	lea    r11,[rax+0x2]
   5707e:	mov    QWORD PTR [rsp+0x50],rbx
   57083:	lea    r10,[rip+0x60396]        # b7420 <listX>
   5708a:	mov    eax,DWORD PTR [rbx+r9*4]
   5708e:	test   eax,eax
   57090:	jle    570f9 <encode_one_macroblock+0x399>
   57092:	mov    rdx,QWORD PTR [r10+r9*8]
   57096:	lea    edi,[rax-0x1]
   57099:	mov    esi,DWORD PTR [rcx+0x1c]
   5709c:	lea    rax,[rdx+0x8]
   570a0:	lea    rdi,[rax+rdi*8]
   570a4:	jmp    570d0 <encode_one_macroblock+0x370>
   570a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   570b0:	cmp    esi,0x2
   570b3:	jne    570c4 <encode_one_macroblock+0x364>
   570b5:	cmp    DWORD PTR [rdx],0x2
   570b8:	je     570c4 <encode_one_macroblock+0x364>
   570ba:	mov    DWORD PTR [rdx+0x1908],0x2
   570c4:	mov    rdx,rax
   570c7:	cmp    rdi,rax
   570ca:	je     570f9 <encode_one_macroblock+0x399>
   570cc:	add    rax,0x8
   570d0:	mov    rdx,QWORD PTR [rdx]
   570d3:	mov    DWORD PTR [rdx+0x1908],0x0
   570dd:	cmp    esi,0x1
   570e0:	jne    570b0 <encode_one_macroblock+0x350>
   570e2:	cmp    DWORD PTR [rdx],0x1
   570e5:	je     570c4 <encode_one_macroblock+0x364>
   570e7:	mov    DWORD PTR [rdx+0x1908],0xfffffffe
   570f1:	mov    rdx,rax
   570f4:	cmp    rdi,rax
   570f7:	jne    570cc <encode_one_macroblock+0x36c>
   570f9:	add    r9,0x1
   570fd:	cmp    r11,r9
   57100:	jne    5708a <encode_one_macroblock+0x32a>
   57102:	mov    ebx,DWORD PTR [r8+0x9a0]
   57109:	mov    eax,DWORD PTR [rcx+0x28]
   5710c:	test   ebx,ebx
   5710e:	je     57b04 <encode_one_macroblock+0xda4>
   57114:	pxor   xmm1,xmm1
   57118:	pxor   xmm2,xmm2
   5711c:	mov    r11d,DWORD PTR [r8+0xd04]
   57123:	cvtsi2sd xmm1,DWORD PTR [rcx+0x11be4]
   5712b:	cvtsi2sd xmm2,eax
   5712f:	subsd  xmm2,QWORD PTR [rip+0x20581]        # 776b8 <b8_mode_table.7699+0x58>
   57137:	movsxd rax,DWORD PTR [rcx+0x18]
   5713b:	movapd xmm0,xmm2
   5713f:	divsd  xmm0,QWORD PTR [rip+0x13931]        # 6aa78 <QP_SCALE_CR+0x38>
   57147:	addsd  xmm1,xmm0
   5714b:	test   r11d,r11d
   5714e:	je     58ce4 <encode_one_macroblock+0x1f84>
   57154:	cmp    eax,0x1
   57157:	jne    57169 <encode_one_macroblock+0x409>
   57159:	mov    r10d,DWORD PTR [rcx+0x11b30]
   57160:	test   r10d,r10d
   57163:	jne    5afd0 <encode_one_macroblock+0x4270>
   57169:	movsd  xmm6,QWORD PTR [r8+rax*8+0xd08]
   57173:	movsd  xmm0,QWORD PTR [rip+0x13905]        # 6aa80 <QP_SCALE_CR+0x40>
   5717b:	movsd  QWORD PTR [rsp+0x8],xmm6
   57181:	call   4360 <pow@plt>
   57186:	mulsd  xmm0,QWORD PTR [rsp+0x8]
   5718c:	mov    rdx,QWORD PTR [rip+0x31425]        # 885b8 <input>
   57193:	movsd  QWORD PTR [rsp+0x18],xmm0
   57199:	mov    eax,DWORD PTR [rdx+0x1c]
   5719c:	test   eax,eax
   5719e:	je     571b4 <encode_one_macroblock+0x454>
   571a0:	movsd  xmm6,QWORD PTR [rsp+0x18]
   571a6:	mulsd  xmm6,QWORD PTR [rip+0x2052a]        # 776d8 <b8_mode_table.7699+0x78>
   571ae:	movsd  QWORD PTR [rsp+0x18],xmm6
   571b4:	movsd  xmm4,QWORD PTR [rsp+0x18]
   571ba:	movapd xmm7,xmm4
   571be:	sqrtsd xmm7,xmm7
   571c2:	movsd  QWORD PTR [rsp+0x28],xmm7
   571c8:	pxor   xmm7,xmm7
   571cc:	movsd  QWORD PTR [rsp+0xd0],xmm7
   571d5:	ucomisd xmm7,xmm4
   571d9:	ja     5cde7 <encode_one_macroblock+0x6087>
   571df:	mov    rcx,QWORD PTR [rip+0x313ca]        # 885b0 <img>
   571e6:	movsd  xmm0,QWORD PTR [rsp+0x28]
   571ec:	mulsd  xmm0,QWORD PTR [rip+0x1bc5c]        # 72e50 <quant_coef+0x190>
   571f4:	addsd  xmm0,QWORD PTR [rip+0x1bc5c]        # 72e58 <quant_coef+0x198>
   571fc:	cvttsd2si eax,xmm0
   57200:	mov    DWORD PTR [rsp+0x30],eax
   57204:	lea    rax,[rcx+0x11910]
   5720b:	add    rcx,0x1192e
   57212:	nop    WORD PTR [rax+rax*1+0x0]
   57218:	xor    r15d,r15d
   5721b:	add    rax,0x2
   5721f:	mov    WORD PTR [rax-0x2],r15w
   57224:	cmp    rcx,rax
   57227:	jne    57218 <encode_one_macroblock+0x4b8>
   57229:	mov    r13d,0xffffffff
   5722f:	xor    r14d,r14d
   57232:	movsd  xmm7,QWORD PTR [rsp+0xd0]
   5723b:	mov    DWORD PTR [rsp+0x68],0x0
   57243:	mov    WORD PTR [rsp+0x40],r13w
   57249:	mov    DWORD PTR [rsp+0xc8],0x0
   57254:	mov    DWORD PTR [rsp+0xfc],0x0
   5725f:	mov    DWORD PTR [rsp+0xdc],0x0
   5726a:	mov    DWORD PTR [rsp+0xd8],0x0
   57275:	mov    DWORD PTR [rsp+0x6c],0x0
   5727d:	mov    WORD PTR [rsp+0x48],r14w
   57283:	mov    DWORD PTR [rsp+0xa0],0x0
   5728e:	mov    DWORD PTR [rsp+0x34],0x0
   57296:	mov    QWORD PTR [rsp+0x8],r12
   5729b:	movsd  QWORD PTR [rsp+0x88],xmm7
   572a4:	cmp    DWORD PTR [rsp+0x5c],0x2
   572a9:	je     57979 <encode_one_macroblock+0xc19>
   572af:	mov    rax,QWORD PTR [rsp+0x8]
   572b4:	mov    ebx,DWORD PTR [rsp+0xb8]
   572bb:	mov    DWORD PTR [rax+0x20c],0x0
   572c5:	test   ebx,ebx
   572c7:	je     5799b <encode_one_macroblock+0xc3b>
   572cd:	mov    DWORD PTR [rsp+0x58],0x7fffffff
   572d5:	mov    r9,QWORD PTR [rip+0x312d4]        # 885b0 <img>
   572dc:	mov    rax,QWORD PTR [rip+0x312d5]        # 885b8 <input>
   572e3:	mov    r13d,DWORD PTR [r9+0x11bfc]
   572ea:	mov    r12d,DWORD PTR [rax+0x9a0]
   572f1:	test   r12d,r12d
   572f4:	je     574ea <encode_one_macroblock+0x78a>
   572fa:	mov    rbx,QWORD PTR [rip+0x1b4df]        # 727e0 <INIT_MB_TYPE_I+0x120>
   57301:	mov    QWORD PTR [rsp+0x1c0],rbx
   57309:	test   r13d,r13d
   5730c:	jne    58695 <encode_one_macroblock+0x1935>
   57312:	mov    esi,DWORD PTR [rax+0x4e8]
   57318:	test   esi,esi
   5731a:	je     57326 <encode_one_macroblock+0x5c6>
   5731c:	xor    ecx,ecx
   5731e:	mov    WORD PTR [r9+0x11912],cx
   57326:	xor    r15d,r15d
   57329:	mov    rbx,QWORD PTR [rsp+0x8]
   5732e:	xor    r14d,r14d
   57331:	lea    r12,[rip+0x31e88]        # 891c0 <pred+0x40>
   57338:	mov    DWORD PTR [rsp+0x20],r15d
   5733d:	nop    DWORD PTR [rax]
   57340:	mov    DWORD PTR [r9+0x11ac8],0x0
   5734b:	movsxd r15,r13d
   5734e:	mov    edx,DWORD PTR [rsp+r15*4+0x1d0]
   57356:	test   edx,edx
   57358:	je     573f0 <encode_one_macroblock+0x690>
   5735e:	cmp    DWORD PTR [rax+0xc94],0x2
   57365:	mov    DWORD PTR [rbx+0x23c],0x0
   5736f:	je     57935 <encode_one_macroblock+0xbd5>
   57375:	mov    edi,r13d
   57378:	call   51b80 <SetModesAndRefframeForBlocks>
   5737d:	mov    r11d,DWORD PTR [rbx+0x20c]
   57384:	test   r11d,r11d
   57387:	je     57802 <encode_one_macroblock+0xaa2>
   5738d:	mov    eax,DWORD PTR [rbx+0x48]
   57390:	lea    edx,[rax-0x9]
   57393:	cmp    edx,0x1
   57396:	jbe    57802 <encode_one_macroblock+0xaa2>
   5739c:	cmp    eax,0xd
   5739f:	je     57802 <encode_one_macroblock+0xaa2>
   573a5:	mov    rax,QWORD PTR [rip+0x3120c]        # 885b8 <input>
   573ac:	mov    edi,DWORD PTR [rsp+0x1d0]
   573b3:	test   edi,edi
   573b5:	je     573f0 <encode_one_macroblock+0x690>
   573b7:	test   r13d,r13d
   573ba:	jne    573f0 <encode_one_macroblock+0x690>
   573bc:	cmp    BYTE PTR [rsp+0xce],0x0
   573c4:	je     573f0 <encode_one_macroblock+0x690>
   573c6:	mov    edx,DWORD PTR [rbx+0x1cc]
   573cc:	test   edx,edx
   573ce:	je     573f0 <encode_one_macroblock+0x690>
   573d0:	and    edx,0xf
   573d3:	cmp    edx,0xf
   573d6:	je     573f0 <encode_one_macroblock+0x690>
   573d8:	mov    esi,DWORD PTR [rax+0x9a8]
   573de:	test   esi,esi
   573e0:	je     59020 <encode_one_macroblock+0x22c0>
   573e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   573f0:	mov    esi,DWORD PTR [rax+0x4e8]
   573f6:	test   esi,esi
   573f8:	je     57412 <encode_one_macroblock+0x6b2>
   573fa:	mov    rdx,QWORD PTR [rip+0x311af]        # 885b0 <img>
   57401:	cmp    DWORD PTR [rdx+0x18],0x1
   57405:	jne    57412 <encode_one_macroblock+0x6b2>
   57407:	cmp    DWORD PTR [rsp+0x20],0x2
   5740c:	je     58637 <encode_one_macroblock+0x18d7>
   57412:	lea    ecx,[r14+0x1]
   57416:	cmp    r14d,0x7
   5741a:	je     5758f <encode_one_macroblock+0x82f>
   57420:	movsxd rdx,ecx
   57423:	lea    rdi,[rip+0x20216]        # 77640 <mb_mode_table.7700>
   5742a:	mov    r9,QWORD PTR [rip+0x3117f]        # 885b0 <img>
   57431:	mov    r13d,DWORD PTR [rdi+rdx*4]
   57435:	cmp    r13d,0x1
   57439:	je     577b1 <encode_one_macroblock+0xa51>
   5743f:	mov    r14d,ecx
   57442:	jmp    57340 <encode_one_macroblock+0x5e0>
   57447:	mov    ecx,DWORD PTR [r8+0x950]
   5744e:	mov    eax,0x1
   57453:	mov    DWORD PTR [rsp+0x1e0],0x1
   5745e:	test   ecx,ecx
   57460:	je     56f8d <encode_one_macroblock+0x22d>
   57466:	mov    esi,DWORD PTR [r8+0x954]
   5746d:	mov    DWORD PTR [rsp+0x1e4],0x1
   57478:	test   esi,esi
   5747a:	je     56fa8 <encode_one_macroblock+0x248>
   57480:	mov    DWORD PTR [rsp+0x1e8],0x1
   5748b:	jmp    56fb3 <encode_one_macroblock+0x253>
   57490:	mov    eax,edi
   57492:	mov    r10d,DWORD PTR [rcx+0xcdc]
   57499:	mov    DWORD PTR [rsp+0xf8],0x1
   574a4:	and    eax,0x1
   574a7:	cmp    eax,0x1
   574aa:	sbb    esi,esi
   574ac:	and    esi,0xfffffffe
   574af:	add    esi,0x5
   574b2:	cmp    eax,0x1
   574b5:	sbb    eax,eax
   574b7:	mov    DWORD PTR [rsp+0xbc],esi
   574be:	and    eax,0xfffffffe
   574c1:	add    eax,0x4
   574c4:	mov    DWORD PTR [rsp+0xa4],eax
   574cb:	test   r10d,r10d
   574ce:	je     56ed4 <encode_one_macroblock+0x174>
   574d4:	xor    eax,eax
   574d6:	call   19000 <decide_intrabk_SAD>
   574db:	mov    rax,QWORD PTR [rip+0x310ce]        # 885b0 <img>
   574e2:	mov    edi,DWORD PTR [rax+0xc]
   574e5:	jmp    56ed4 <encode_one_macroblock+0x174>
   574ea:	mov    rax,QWORD PTR [rsp+0x8]
   574ef:	mov    ebx,DWORD PTR [rax+0x23c]
   574f5:	mov    ebp,DWORD PTR [rax+0x240]
   574fb:	test   r13d,r13d
   574fe:	jne    58cd4 <encode_one_macroblock+0x1f74>
   57504:	mov    ecx,DWORD PTR [rsp+0x1d0]
   5750b:	test   ecx,ecx
   5750d:	je     5751d <encode_one_macroblock+0x7bd>
   5750f:	cmp    BYTE PTR [rsp+0xce],0x0
   57517:	jne    59521 <encode_one_macroblock+0x27c1>
   5751d:	mov    eax,DWORD PTR [rsp+0x204]
   57524:	test   eax,eax
   57526:	jne    58392 <encode_one_macroblock+0x1632>
   5752c:	mov    r12d,DWORD PTR [rsp+0x1f4]
   57534:	test   r12d,r12d
   57537:	jne    58320 <encode_one_macroblock+0x15c0>
   5753d:	mov    r8d,DWORD PTR [rsp+0x1f8]
   57545:	test   r8d,r8d
   57548:	je     5758f <encode_one_macroblock+0x82f>
   5754a:	mov    rax,QWORD PTR [rsp+0x8]
   5754f:	mov    DWORD PTR [rax+0x23c],0x0
   57559:	xor    eax,eax
   5755b:	call   6530 <intrapred_luma_16x16>
   57560:	lea    rdi,[rsp+0x1ac]
   57568:	call   2fa10 <find_sad_16x16>
   5756d:	mov    DWORD PTR [rsp+0x1a8],eax
   57574:	cmp    eax,DWORD PTR [rsp+0x58]
   57578:	jl     5a821 <encode_one_macroblock+0x3ac1>
   5757e:	mov    rax,QWORD PTR [rsp+0x8]
   57583:	mov    DWORD PTR [rax+0x23c],ebx
   57589:	mov    DWORD PTR [rax+0x240],ebp
   5758f:	mov    ecx,DWORD PTR [rsp+0x34]
   57593:	test   ecx,ecx
   57595:	jne    575ba <encode_one_macroblock+0x85a>
   57597:	mov    rax,QWORD PTR [rsp+0x8]
   5759c:	mov    edx,DWORD PTR [rax+0x48]
   5759f:	lea    eax,[rdx-0x9]
   575a2:	cmp    eax,0x1
   575a5:	setbe  al
   575a8:	cmp    edx,0xd
   575ab:	sete   dl
   575ae:	or     eax,edx
   575b0:	movzx  eax,al
   575b3:	mov    DWORD PTR [rsp+0xdc],eax
   575ba:	add    DWORD PTR [rsp+0x34],0x1
   575bf:	mov    eax,DWORD PTR [rsp+0x34]
   575c3:	cmp    DWORD PTR [rsp+0x5c],eax
   575c7:	jne    572a4 <encode_one_macroblock+0x544>
   575cd:	mov    rax,QWORD PTR [rip+0x30fe4]        # 885b8 <input>
   575d4:	mov    r12,QWORD PTR [rsp+0x8]
   575d9:	mov    ebx,DWORD PTR [rax+0x9a0]
   575df:	test   ebx,ebx
   575e1:	je     583df <encode_one_macroblock+0x167f>
   575e7:	mov    edx,DWORD PTR [rip+0x87f1b]        # df508 <cbp>
   575ed:	test   edx,edx
   575ef:	jne    57b42 <encode_one_macroblock+0xde2>
   575f5:	cmp    DWORD PTR [rip+0x8b124],0xa        # e2720 <best_mode>
   575fc:	je     57b42 <encode_one_macroblock+0xde2>
   57602:	mov    eax,DWORD PTR [rax+0xca4]
   57608:	test   eax,eax
   5760a:	je     58ee9 <encode_one_macroblock+0x2189>
   57610:	xor    eax,eax
   57612:	call   55580 <set_stored_macroblock_parameters>
   57617:	mov    rsi,QWORD PTR [rip+0x30f92]        # 885b0 <img>
   5761e:	mov    rdi,QWORD PTR [rip+0x30f93]        # 885b8 <input>
   57625:	mov    r11d,DWORD PTR [rdi+0xca4]
   5762c:	test   r11d,r11d
   5762f:	je     5763e <encode_one_macroblock+0x8de>
   57631:	mov    r10d,DWORD PTR [rsi+0x18]
   57635:	test   r10d,r10d
   57638:	je     59470 <encode_one_macroblock+0x2710>
   5763e:	mov    r9d,DWORD PTR [rdi+0x9a0]
   57645:	mov    r10,QWORD PTR [rip+0x49714]        # a0d60 <rdopt>
   5764c:	test   r9d,r9d
   5764f:	je     57a67 <encode_one_macroblock+0xd07>
   57655:	movsd  xmm0,QWORD PTR [rsp+0x1c0]
   5765e:	movsd  QWORD PTR [r10],xmm0
   57663:	mov    eax,DWORD PTR [rsi+0x11ad0]
   57669:	test   eax,eax
   5766b:	je     57680 <encode_one_macroblock+0x920>
   5766d:	test   BYTE PTR [rsi+0xc],0x1
   57671:	je     57680 <encode_one_macroblock+0x920>
   57673:	mov    eax,DWORD PTR [r12+0x48]
   57678:	test   eax,eax
   5767a:	je     58f1a <encode_one_macroblock+0x21ba>
   57680:	mov    eax,DWORD PTR [rdi+0xb5c]
   57686:	cmp    eax,0x1
   57689:	je     581ec <encode_one_macroblock+0x148c>
   5768f:	cmp    eax,0x2
   57692:	jne    57778 <encode_one_macroblock+0xa18>
   57698:	mov    eax,DWORD PTR [rsi+0x8c]
   5769e:	mov    ebx,DWORD PTR [r12+0x48]
   576a3:	mov    rcx,QWORD PTR [rip+0x5ca9e]        # b4148 <refresh_map>
   576aa:	lea    edx,[rax+rax*1]
   576ad:	mov    eax,DWORD PTR [rsi+0x88]
   576b3:	movsxd rdx,edx
   576b6:	mov    rcx,QWORD PTR [rcx+rdx*8]
   576ba:	add    eax,eax
   576bc:	lea    edx,[rbx-0x9]
   576bf:	cmp    edx,0x1
   576c2:	cdqe   
   576c4:	setbe  BYTE PTR [rcx+rax*1]
   576c8:	mov    rax,QWORD PTR [rip+0x30ee1]        # 885b0 <img>
   576cf:	mov    rcx,QWORD PTR [rip+0x5ca72]        # b4148 <refresh_map>
   576d6:	mov    ebx,DWORD PTR [rax+0x8c]
   576dc:	mov    eax,DWORD PTR [rax+0x88]
   576e2:	lea    edx,[rbx+rbx*1]
   576e5:	mov    ebx,DWORD PTR [r12+0x48]
   576ea:	add    eax,eax
   576ec:	movsxd rdx,edx
   576ef:	cdqe   
   576f1:	mov    rcx,QWORD PTR [rcx+rdx*8]
   576f5:	lea    edx,[rbx-0x9]
   576f8:	cmp    edx,0x1
   576fb:	setbe  BYTE PTR [rcx+rax*1+0x1]
   57700:	mov    rax,QWORD PTR [rip+0x30ea9]        # 885b0 <img>
   57707:	mov    rcx,QWORD PTR [rip+0x5ca3a]        # b4148 <refresh_map>
   5770e:	mov    ebx,DWORD PTR [rax+0x8c]
   57714:	mov    eax,DWORD PTR [rax+0x88]
   5771a:	lea    edx,[rbx+rbx*1]
   5771d:	mov    ebx,DWORD PTR [r12+0x48]
   57722:	add    eax,eax
   57724:	movsxd rdx,edx
   57727:	cdqe   
   57729:	mov    rcx,QWORD PTR [rcx+rdx*8+0x8]
   5772e:	lea    edx,[rbx-0x9]
   57731:	cmp    edx,0x1
   57734:	setbe  BYTE PTR [rcx+rax*1]
   57738:	mov    rax,QWORD PTR [rip+0x30e71]        # 885b0 <img>
   5773f:	mov    rcx,QWORD PTR [rip+0x5ca02]        # b4148 <refresh_map>
   57746:	mov    ebx,DWORD PTR [rax+0x8c]
   5774c:	mov    eax,DWORD PTR [rax+0x88]
   57752:	lea    edx,[rbx+rbx*1]
   57755:	add    eax,eax
   57757:	movsxd rdx,edx
   5775a:	cdqe   
   5775c:	mov    rcx,QWORD PTR [rcx+rdx*8+0x8]
   57761:	mov    edx,DWORD PTR [r12+0x48]
   57766:	sub    edx,0x9
   57769:	cmp    edx,0x1
   5776c:	setbe  BYTE PTR [rcx+rax*1+0x1]
   57771:	mov    rdi,QWORD PTR [rip+0x30e40]        # 885b8 <input>
   57778:	mov    r14d,DWORD PTR [rdi+0xcdc]
   5777f:	test   r14d,r14d
   57782:	jne    58678 <encode_one_macroblock+0x1918>
   57788:	mov    rax,QWORD PTR [rsp+0x218]
   57790:	xor    rax,QWORD PTR fs:0x28
   57799:	jne    5cfa3 <encode_one_macroblock+0x6243>
   5779f:	add    rsp,0x228
   577a6:	pop    rbx
   577a7:	pop    rbp
   577a8:	pop    r12
   577aa:	pop    r13
   577ac:	pop    r14
   577ae:	pop    r15
   577b0:	ret    
   577b1:	cmp    DWORD PTR [r9+0x18],0x1
   577b6:	jne    5743f <encode_one_macroblock+0x6df>
   577bc:	mov    edi,DWORD PTR [rsp+0x20]
   577c0:	mov    WORD PTR [rip+0x8a827],di        # e1fee <best8x8pdir+0xe>
   577c7:	mov    WORD PTR [rip+0x8a81e],di        # e1fec <best8x8pdir+0xc>
   577ce:	mov    WORD PTR [rip+0x8a815],di        # e1fea <best8x8pdir+0xa>
   577d5:	mov    WORD PTR [rip+0x8a80c],di        # e1fe8 <best8x8pdir+0x8>
   577dc:	cmp    edi,0x2
   577df:	jne    577e9 <encode_one_macroblock+0xa89>
   577e1:	test   esi,esi
   577e3:	jne    59afb <encode_one_macroblock+0x2d9b>
   577e9:	mov    edi,DWORD PTR [rsp+0x20]
   577ed:	lea    edx,[rdi+0x1]
   577f0:	cmp    edi,0x1
   577f3:	jle    58e52 <encode_one_macroblock+0x20f2>
   577f9:	mov    DWORD PTR [rsp+0x20],edx
   577fd:	jmp    5743f <encode_one_macroblock+0x6df>
   57802:	mov    DWORD PTR [rsp+0x38],r14d
   57807:	lea    rbp,[rsp+0x1c0]
   5780f:	mov    QWORD PTR [rsp+0x70],r15
   57814:	mov    r15,rbp
   57817:	mov    edx,DWORD PTR [rsp+0x1ac]
   5781e:	movsd  xmm0,QWORD PTR [rsp+0x18]
   57824:	mov    rsi,r15
   57827:	mov    edi,r13d
   5782a:	call   54ba0 <RDCost_for_macroblocks>
   5782f:	test   eax,eax
   57831:	je     578af <encode_one_macroblock+0xb4f>
   57833:	mov    rax,QWORD PTR [rip+0x30d76]        # 885b0 <img>
   5783a:	mov    rcx,QWORD PTR [rip+0x5fb87]        # b73c8 <imgY_org>
   57841:	movsxd rdx,DWORD PTR [rax+0xac]
   57848:	movsxd rax,DWORD PTR [rax+0xa8]
   5784f:	cmp    r13d,0x8
   57853:	je     58176 <encode_one_macroblock+0x1416>
   57859:	lea    rdi,[rax+rax*1]
   5785d:	lea    rsi,[rip+0x3191c]        # 89180 <pred>
   57864:	lea    r8,[rip+0x86735]        # ddfa0 <diffy>
   5786b:	lea    r9,[rcx+rdx*8]
   5786f:	nop
   57870:	mov    rcx,r9
   57873:	xor    eax,eax
   57875:	nop    DWORD PTR [rax]
   57878:	mov    rdx,QWORD PTR [rcx]
   5787b:	add    rcx,0x8
   5787f:	movzx  edx,WORD PTR [rdx+rdi*1]
   57883:	sub    edx,DWORD PTR [rsi+rax*1]
   57886:	mov    DWORD PTR [r8+rax*1],edx
   5788a:	add    rax,0x40
   5788e:	cmp    rax,0x400
   57894:	jne    57878 <encode_one_macroblock+0xb18>
   57896:	add    rsi,0x4
   5789a:	add    rdi,0x2
   5789e:	add    r8,0x4
   578a2:	cmp    r12,rsi
   578a5:	jne    57870 <encode_one_macroblock+0xb10>
   578a7:	mov    edi,r13d
   578aa:	call   52cc0 <store_macroblock_parameters>
   578af:	mov    rax,QWORD PTR [rip+0x30d02]        # 885b8 <input>
   578b6:	cmp    DWORD PTR [rax+0xc94],0x1
   578bd:	jne    5ae77 <encode_one_macroblock+0x4117>
   578c3:	lea    edx,[r13-0x1]
   578c7:	cmp    edx,0x2
   578ca:	jbe    5791a <encode_one_macroblock+0xbba>
   578cc:	test   r13d,r13d
   578cf:	jne    57907 <encode_one_macroblock+0xba7>
   578d1:	cmp    BYTE PTR [rsp+0xce],0x0
   578d9:	je     57907 <encode_one_macroblock+0xba7>
   578db:	mov    rdx,QWORD PTR [rip+0x5e58e]        # b5e70 <active_sps>
   578e2:	mov    r10d,DWORD PTR [rdx+0x484]
   578e9:	test   r10d,r10d
   578ec:	jne    5791a <encode_one_macroblock+0xbba>
   578ee:	mov    DWORD PTR [rbx+0x23c],0x0
   578f8:	mov    r14d,DWORD PTR [rsp+0x38]
   578fd:	mov    r15,QWORD PTR [rsp+0x70]
   57902:	jmp    573ac <encode_one_macroblock+0x64c>
   57907:	cmp    r13d,0x8
   5790b:	jne    578ee <encode_one_macroblock+0xb8e>
   5790d:	mov    r9d,DWORD PTR [rsp+0x1e0]
   57915:	test   r9d,r9d
   57918:	je     578ee <encode_one_macroblock+0xb8e>
   5791a:	mov    r8d,DWORD PTR [rbx+0x23c]
   57921:	test   r8d,r8d
   57924:	jne    578ee <encode_one_macroblock+0xb8e>
   57926:	mov    DWORD PTR [rbx+0x23c],0x1
   57930:	jmp    57817 <encode_one_macroblock+0xab7>
   57935:	lea    eax,[r13-0x1]
   57939:	cmp    eax,0x2
   5793c:	jbe    5796a <encode_one_macroblock+0xc0a>
   5793e:	test   r13d,r13d
   57941:	jne    58e5e <encode_one_macroblock+0x20fe>
   57947:	cmp    BYTE PTR [rsp+0xce],0x0
   5794f:	je     58e5e <encode_one_macroblock+0x20fe>
   57955:	mov    rax,QWORD PTR [rip+0x5e514]        # b5e70 <active_sps>
   5795c:	mov    eax,DWORD PTR [rax+0x484]
   57962:	test   eax,eax
   57964:	je     57375 <encode_one_macroblock+0x615>
   5796a:	mov    DWORD PTR [rbx+0x23c],0x1
   57974:	jmp    57375 <encode_one_macroblock+0x615>
   57979:	mov    ebp,DWORD PTR [rsp+0x34]
   5797d:	mov    rax,QWORD PTR [rip+0x30c34]        # 885b8 <input>
   57984:	test   ebp,ebp
   57986:	je     58e7c <encode_one_macroblock+0x211c>
   5798c:	mov    DWORD PTR [rax+0x9a0],0x2
   57996:	jmp    572af <encode_one_macroblock+0x54f>
   5799b:	cmp    DWORD PTR [rsp+0x14],0x1
   579a0:	je     59ade <encode_one_macroblock+0x2d7e>
   579a6:	mov    ebx,0x1
   579ab:	lea    rax,[rsp+0x1d0]
   579b3:	mov    DWORD PTR [rip+0x8ad63],0x1        # e2720 <best_mode>
   579bd:	movzx  ebp,WORD PTR [rsp+0x48]
   579c2:	mov    DWORD PTR [rsp+0x58],0x7fffffff
   579ca:	mov    QWORD PTR [rsp+0xf0],rax
   579d2:	mov    QWORD PTR [rsp+0x20],rbx
   579d7:	mov    rbx,QWORD PTR [rsp+0x20]
   579dc:	xor    r10d,r10d
   579df:	mov    rdx,QWORD PTR [rip+0x30bca]        # 885b0 <img>
   579e6:	mov    DWORD PTR [rip+0x878d4],0x0        # df2c4 <bi_pred_me>
   579f0:	movsxd rax,ebx
   579f3:	mov    DWORD PTR [rsp+0x78],ebx
   579f7:	mov    WORD PTR [rdx+rax*2+0x11910],r10w
   57a00:	mov    rax,QWORD PTR [rsp+0xf0]
   57a08:	mov    r11d,DWORD PTR [rax+rbx*4]
   57a0c:	test   r11d,r11d
   57a0f:	jne    57b53 <encode_one_macroblock+0xdf3>
   57a15:	add    QWORD PTR [rsp+0x20],0x1
   57a1b:	mov    rax,QWORD PTR [rsp+0x20]
   57a20:	cmp    rax,0x4
   57a24:	jne    579d7 <encode_one_macroblock+0xc77>
   57a26:	mov    r14d,DWORD PTR [rsp+0x1f0]
   57a2e:	mov    WORD PTR [rsp+0x48],bp
   57a33:	test   r14d,r14d
   57a36:	jne    59db0 <encode_one_macroblock+0x3050>
   57a3c:	mov    r9,QWORD PTR [rip+0x30b6d]        # 885b0 <img>
   57a43:	mov    eax,DWORD PTR [r9+0x18]
   57a47:	test   eax,eax
   57a49:	je     57a54 <encode_one_macroblock+0xcf4>
   57a4b:	cmp    eax,0x3
   57a4e:	jne    572dc <encode_one_macroblock+0x57c>
   57a54:	xor    eax,eax
   57a56:	call   42d30 <FindSkipModeMotionVector>
   57a5b:	mov    r9,QWORD PTR [rip+0x30b4e]        # 885b0 <img>
   57a62:	jmp    572dc <encode_one_macroblock+0x57c>
   57a67:	pxor   xmm0,xmm0
   57a6b:	cvtsi2sd xmm0,DWORD PTR [rsp+0x58]
   57a71:	movsd  QWORD PTR [r10],xmm0
   57a76:	jmp    57663 <encode_one_macroblock+0x903>
   57a7b:	mov    ebp,DWORD PTR [rsp+0xf8]
   57a82:	mov    QWORD PTR [rsp+0x60],rax
   57a87:	test   ebp,ebp
   57a89:	jne    58da1 <encode_one_macroblock+0x2041>
   57a8f:	mov    rdi,rax
   57a92:	lea    r10,[rax+0x2]
   57a96:	lea    rax,[rip+0x5f9b3]        # b7450 <listXsize>
   57a9d:	mov    QWORD PTR [rsp+0x50],rax
   57aa2:	lea    r9,[rip+0x5f977]        # b7420 <listX>
   57aa9:	mov    rax,QWORD PTR [rsp+0x50]
   57aae:	mov    eax,DWORD PTR [rax+rdi*4]
   57ab1:	test   eax,eax
   57ab3:	jle    57ae9 <encode_one_macroblock+0xd89>
   57ab5:	mov    rdx,QWORD PTR [r9+rdi*8]
   57ab9:	lea    esi,[rax-0x1]
   57abc:	lea    rax,[rdx+0x8]
   57ac0:	lea    rsi,[rax+rsi*8]
   57ac4:	jmp    57ad4 <encode_one_macroblock+0xd74>
   57ac6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   57ad0:	add    rax,0x8
   57ad4:	mov    rdx,QWORD PTR [rdx]
   57ad7:	mov    DWORD PTR [rdx+0x1908],0x0
   57ae1:	mov    rdx,rax
   57ae4:	cmp    rsi,rax
   57ae7:	jne    57ad0 <encode_one_macroblock+0xd70>
   57ae9:	add    rdi,0x1
   57aed:	cmp    r10,rdi
   57af0:	jne    57aa9 <encode_one_macroblock+0xd49>
   57af2:	mov    ebx,DWORD PTR [r8+0x9a0]
   57af9:	mov    eax,DWORD PTR [rcx+0x28]
   57afc:	test   ebx,ebx
   57afe:	jne    57114 <encode_one_macroblock+0x3b4>
   57b04:	cmp    eax,0xc
   57b07:	pxor   xmm4,xmm4
   57b0b:	pxor   xmm3,xmm3
   57b0f:	mov    edx,0xc
   57b14:	movsd  QWORD PTR [rsp+0xd0],xmm3
   57b1d:	cmovl  eax,edx
   57b20:	lea    rdx,[rip+0x1e4b9]        # 75fe0 <QP2QUANT>
   57b27:	sub    eax,0xc
   57b2a:	cdqe   
   57b2c:	cvtsi2sd xmm4,DWORD PTR [rdx+rax*4]
   57b31:	movsd  QWORD PTR [rsp+0x18],xmm4
   57b37:	movsd  QWORD PTR [rsp+0x28],xmm4
   57b3d:	jmp    571e6 <encode_one_macroblock+0x486>
   57b42:	mov    DWORD PTR [r12+0x258],0x1
   57b4e:	jmp    57610 <encode_one_macroblock+0x8b0>
   57b53:	mov    DWORD PTR [rsp+0x1a8],0x0
   57b5e:	mov    rax,rbx
   57b61:	lea    rbx,[rbx*8+0x0]
   57b69:	cmp    eax,0x1
   57b6c:	mov    QWORD PTR [rsp+0x120],rbx
   57b74:	movzx  ebx,WORD PTR [rsp+0x40]
   57b79:	mov    QWORD PTR [rsp+0x70],0x0
   57b82:	setne  al
   57b85:	movzx  eax,al
   57b88:	add    eax,0x1
   57b8b:	cdqe   
   57b8d:	mov    QWORD PTR [rsp+0x100],rax
   57b95:	mov    rax,QWORD PTR [rsp+0x70]
   57b9a:	mov    DWORD PTR [rsp+0x98],eax
   57ba1:	mov    r12d,eax
   57ba4:	cmp    QWORD PTR [rsp+0x100],rax
   57bac:	je     5810b <encode_one_macroblock+0x13ab>
   57bb2:	mov    r13,QWORD PTR [rsp+0x70]
   57bb7:	movsd  xmm0,QWORD PTR [rsp+0x28]
   57bbd:	mov    edi,DWORD PTR [rsp+0x78]
   57bc1:	mov    esi,r13d
   57bc4:	call   44ec0 <PartitionMotionSearch>
   57bc9:	mov    rax,QWORD PTR [rsp+0x50]
   57bce:	mov    rsi,QWORD PTR [rsp+0x60]
   57bd3:	mov    r15d,DWORD PTR [rax+rsi*4]
   57bd7:	test   r15d,r15d
   57bda:	jle    5a7b4 <encode_one_macroblock+0x3a54>
   57be0:	mov    rax,QWORD PTR [rip+0x309d1]        # 885b8 <input>
   57be7:	mov    r10d,0x7fffffff
   57bed:	mov    r14,QWORD PTR [rsp+0x120]
   57bf5:	mov    WORD PTR [rsp+0x80],bp
   57bfd:	add    r14,QWORD PTR [rip+0x5f87c]        # b7480 <motion_cost>
   57c04:	mov    WORD PTR [rsp+0xa8],bx
   57c0c:	xor    edx,edx
   57c0e:	mov    ebx,r10d
   57c11:	mov    QWORD PTR [rsp+0x38],rax
   57c16:	mov    rax,QWORD PTR [rip+0x5f86b]        # b7488 <refbits>
   57c1d:	mov    ebp,DWORD PTR [rsp+0x78]
   57c21:	mov    QWORD PTR [rsp+0x90],rax
   57c29:	lea    rax,[r13*4+0x0]
   57c31:	xor    r13d,r13d
   57c34:	mov    QWORD PTR [rsp+0x40],rax
   57c39:	movzx  eax,BYTE PTR [rsp+0xcf]
   57c41:	xor    eax,0x1
   57c44:	mov    BYTE PTR [rsp+0x48],al
   57c48:	mov    eax,r15d
   57c4b:	mov    r15,r14
   57c4e:	mov    r14d,eax
   57c51:	jmp    57c9c <encode_one_macroblock+0xf3c>
   57c53:	xor    eax,eax
   57c55:	cmp    r14d,0x1
   57c59:	je     57c6e <encode_one_macroblock+0xf0e>
   57c5b:	mov    rdi,QWORD PTR [rsp+0x90]
   57c63:	mov    eax,DWORD PTR [rsp+0x30]
   57c67:	imul   eax,DWORD PTR [rdi+rdx*4]
   57c6b:	sar    eax,0x10
   57c6e:	mov    rcx,QWORD PTR [r15]
   57c71:	mov    rdi,QWORD PTR [rsp+0x40]
   57c76:	mov    rcx,QWORD PTR [rcx]
   57c79:	mov    rdx,QWORD PTR [rcx+rdx*8]
   57c7d:	add    eax,DWORD PTR [rdx+rdi*1]
   57c80:	cmp    ebx,eax
   57c82:	jle    57c8f <encode_one_macroblock+0xf2f>
   57c84:	mov    WORD PTR [rsp+0x80],r13w
   57c8d:	mov    ebx,eax
   57c8f:	add    r13d,0x1
   57c93:	movsx  edx,r13w
   57c97:	cmp    edx,r14d
   57c9a:	jge    57cfb <encode_one_macroblock+0xf9b>
   57c9c:	test   r13w,r13w
   57ca0:	je     57cb9 <encode_one_macroblock+0xf59>
   57ca2:	cmp    BYTE PTR [rsp+0x48],0x0
   57ca7:	jne    57cb9 <encode_one_macroblock+0xf59>
   57ca9:	xor    esi,esi
   57cab:	mov    ecx,ebp
   57cad:	mov    edi,r12d
   57cb0:	call   4e9d0 <CheckReliabilityOfRef>
   57cb5:	test   eax,eax
   57cb7:	je     57c8f <encode_one_macroblock+0xf2f>
   57cb9:	mov    rax,QWORD PTR [rsp+0x38]
   57cbe:	movsx  rdx,r13w
   57cc2:	mov    r9d,DWORD PTR [rax+0x9a0]
   57cc9:	test   r9d,r9d
   57ccc:	jne    57c53 <encode_one_macroblock+0xef3>
   57cce:	movsd  xmm5,QWORD PTR [rsp+0x28]
   57cd4:	movapd xmm0,xmm5
   57cd8:	addsd  xmm0,xmm5
   57cdc:	test   r13w,r13w
   57ce0:	jg     57cf2 <encode_one_macroblock+0xf92>
   57ce2:	movsx  eax,r13w
   57ce6:	pxor   xmm1,xmm1
   57cea:	cvtsi2sd xmm1,eax
   57cee:	mulsd  xmm0,xmm1
   57cf2:	cvttsd2si eax,xmm0
   57cf6:	jmp    57c6e <encode_one_macroblock+0xf0e>
   57cfb:	mov    r10d,ebx
   57cfe:	movzx  ebp,WORD PTR [rsp+0x80]
   57d06:	movzx  ebx,WORD PTR [rsp+0xa8]
   57d0e:	mov    r15d,r14d
   57d11:	cmp    DWORD PTR [rsp+0x14],0x1
   57d16:	je     5990b <encode_one_macroblock+0x2bab>
   57d1c:	movsx  rdx,bp
   57d20:	add    DWORD PTR [rsp+0x1a8],r10d
   57d28:	cmp    QWORD PTR [rsp+0x20],0x1
   57d2e:	lea    rax,[rdx*8+0x0]
   57d36:	mov    rcx,QWORD PTR [rip+0x30873]        # 885b0 <img>
   57d3d:	mov    QWORD PTR [rsp+0x38],rax
   57d42:	je     59265 <encode_one_macroblock+0x2505>
   57d48:	movsx  rax,bx
   57d4c:	xor    esi,esi
   57d4e:	shl    rax,0x3
   57d52:	mov    QWORD PTR [rsp+0x90],rax
   57d5a:	mov    eax,DWORD PTR [rsp+0x98]
   57d61:	mov    r15d,DWORD PTR [rcx+0x90]
   57d68:	mov    r14,QWORD PTR [rip+0x32c39]        # 8a9a8 <enc_picture>
   57d6f:	add    eax,eax
   57d71:	mov    DWORD PTR [rsp+0x40],eax
   57d75:	mov    DWORD PTR [rsp+0xb0],eax
   57d7c:	mov    eax,DWORD PTR [rcx+0x94]
   57d82:	mov    DWORD PTR [rsp+0xa8],eax
   57d89:	mov    rax,QWORD PTR [rsp+0x20]
   57d8e:	mov    DWORD PTR [rsp+0x138],eax
   57d95:	cmp    rax,0x2
   57d99:	je     595ee <encode_one_macroblock+0x288e>
   57d9f:	mov    eax,DWORD PTR [rsp+0x40]
   57da3:	movsx  rdx,bx
   57da7:	mov    WORD PTR [rsp+0x130],bx
   57daf:	xor    r9d,r9d
   57db2:	mov    DWORD PTR [rsp+0x148],r12d
   57dba:	mov    r12,QWORD PTR [rsp+0x60]
   57dbf:	add    eax,r15d
   57dc2:	mov    WORD PTR [rsp+0x98],bp
   57dca:	cdqe   
   57dcc:	shl    rax,0x3
   57dd0:	mov    QWORD PTR [rsp+0xc0],rax
   57dd8:	mov    rax,QWORD PTR [r14+0x1950]
   57ddf:	mov    r11,QWORD PTR [rax]
   57de2:	mov    QWORD PTR [rsp+0x108],rax
   57dea:	mov    rax,QWORD PTR [r14+0x1958]
   57df1:	mov    QWORD PTR [rsp+0x110],rax
   57df9:	mov    rax,QWORD PTR [rax]
   57dfc:	mov    QWORD PTR [rsp+0x48],rax
   57e01:	mov    rax,QWORD PTR [r14+0x1968]
   57e08:	mov    QWORD PTR [rsp+0x128],rax
   57e10:	mov    r15,QWORD PTR [rax]
   57e13:	movsxd rax,DWORD PTR [rsp+0xbc]
   57e1b:	mov    rdi,rax
   57e1e:	shl    rdi,0x5
   57e22:	add    rax,rdi
   57e25:	lea    rax,[rdx+rax*1+0x2]
   57e2a:	mov    QWORD PTR [rsp+0x140],rax
   57e32:	movsx  rax,bp
   57e36:	mov    rbp,r11
   57e39:	mov    QWORD PTR [rsp+0xb0],rax
   57e41:	mov    ebx,DWORD PTR [rsp+0xa8]
   57e48:	mov    QWORD PTR [rsp+0x80],r9
   57e50:	xor    edi,edi
   57e52:	lea    r13,[r9*8+0x0]
   57e5a:	mov    rax,QWORD PTR [rsp+0xc0]
   57e62:	lea    edx,[rbx+r9*1]
   57e66:	movsxd rdx,edx
   57e69:	lea    rbx,[rdx+rdx*1]
   57e6d:	shl    rdx,0x3
   57e71:	mov    r8,QWORD PTR [rsp+0x48]
   57e76:	mov    r10,QWORD PTR [rbp+rax*1+0x0]
   57e7b:	mov    r11,QWORD PTR [r8+rax*1]
   57e7f:	mov    r8,QWORD PTR [r15+rax*1]
   57e83:	add    r10,rbx
   57e86:	mov    r8,QWORD PTR [r8+rdx*1]
   57e8a:	add    r11,rdx
   57e8d:	cmp    si,0x1
   57e91:	je     57fde <encode_one_macroblock+0x127e>
   57e97:	movzx  r9d,WORD PTR [rsp+0x98]
   57ea0:	mov    WORD PTR [r10],r9w
   57ea4:	mov    r10,r12
   57ea7:	mov    r9,QWORD PTR [rsp+0xb0]
   57eaf:	shl    r10,0x5
   57eb3:	add    r10,r12
   57eb6:	cmp    DWORD PTR [rsp+0x14],0x1
   57ebb:	lea    r10,[r10+r9*1+0x2]
   57ec0:	mov    r10,QWORD PTR [r14+r10*8+0x8]
   57ec5:	mov    QWORD PTR [r11],r10
   57ec8:	mov    r11d,DWORD PTR [rsp+0x40]
   57ecd:	lea    r10d,[rdi+r11*1]
   57ed1:	mov    r11,QWORD PTR [rcx+0x118f8]
   57ed8:	mov    r10,QWORD PTR [r11+r10*8]
   57edc:	mov    r11,QWORD PTR [rsp+0x38]
   57ee1:	mov    r10,QWORD PTR [r10+r13*1]
   57ee5:	mov    r10,QWORD PTR [r10]
   57ee8:	mov    r10,QWORD PTR [r10+r11*1]
   57eec:	mov    r10,QWORD PTR [r10+0x18]
   57ef0:	movzx  r11d,WORD PTR [r10]
   57ef4:	mov    WORD PTR [r8],r11w
   57ef8:	movzx  r10d,WORD PTR [r10+0x2]
   57efd:	mov    WORD PTR [r8+0x2],r10w
   57f02:	je     580a8 <encode_one_macroblock+0x1348>
   57f08:	add    rax,0x8
   57f0c:	cmp    edi,0x1
   57f0f:	jne    57fd4 <encode_one_macroblock+0x1274>
   57f15:	mov    r9,QWORD PTR [rsp+0x80]
   57f1d:	add    r9,0x1
   57f21:	cmp    r9,0x4
   57f25:	jne    57e41 <encode_one_macroblock+0x10e1>
   57f2b:	cmp    DWORD PTR [rsp+0x138],0x3
   57f33:	mov    r12d,DWORD PTR [rsp+0x148]
   57f3b:	movzx  ebp,WORD PTR [rsp+0x98]
   57f43:	movzx  ebx,WORD PTR [rsp+0x130]
   57f4b:	je     59222 <encode_one_macroblock+0x24c2>
   57f51:	mov    WORD PTR [rip+0x8ae56],bp        # e2dae <best8x8fwref+0xe>
   57f58:	mov    WORD PTR [rip+0x8ae4d],bp        # e2dac <best8x8fwref+0xc>
   57f5f:	mov    WORD PTR [rip+0x8ae44],bp        # e2daa <best8x8fwref+0xa>
   57f66:	mov    WORD PTR [rip+0x8ae3b],bp        # e2da8 <best8x8fwref+0x8>
   57f6d:	mov    WORD PTR [rip+0x8a07a],si        # e1fee <best8x8pdir+0xe>
   57f74:	mov    WORD PTR [rip+0x8a071],si        # e1fec <best8x8pdir+0xc>
   57f7b:	mov    WORD PTR [rip+0x8a068],si        # e1fea <best8x8pdir+0xa>
   57f82:	mov    WORD PTR [rip+0x8a05f],si        # e1fe8 <best8x8pdir+0x8>
   57f89:	mov    WORD PTR [rip+0x8709e],bx        # df02e <best8x8bwref+0xe>
   57f90:	mov    WORD PTR [rip+0x87095],bx        # df02c <best8x8bwref+0xc>
   57f97:	mov    WORD PTR [rip+0x8708c],bx        # df02a <best8x8bwref+0xa>
   57f9e:	mov    WORD PTR [rip+0x87083],bx        # df028 <best8x8bwref+0x8>
   57fa5:	cmp    DWORD PTR [rsp+0x20],0x1
   57faa:	jle    57fc9 <encode_one_macroblock+0x1269>
   57fac:	test   r12b,0x1
   57fb0:	jne    57fc9 <encode_one_macroblock+0x1269>
   57fb2:	movsx  edx,bp
   57fb5:	movsx  r8d,bx
   57fb9:	mov    edi,r12d
   57fbc:	mov    ecx,edx
   57fbe:	mov    edx,esi
   57fc0:	mov    esi,DWORD PTR [rsp+0x78]
   57fc4:	call   53110 <SetRefAndMotionVectors>
   57fc9:	add    QWORD PTR [rsp+0x70],0x1
   57fcf:	jmp    57b95 <encode_one_macroblock+0xe35>
   57fd4:	mov    edi,0x1
   57fd9:	jmp    57e71 <encode_one_macroblock+0x1111>
   57fde:	mov    r9d,0xffffffff
   57fe4:	cmp    DWORD PTR [rsp+0x14],0x1
   57fe9:	mov    WORD PTR [r10],r9w
   57fed:	mov    QWORD PTR [r11],0xffffffffffffffff
   57ff4:	mov    DWORD PTR [r8],0x0
   57ffb:	jne    57f08 <encode_one_macroblock+0x11a8>
   58001:	mov    r11,QWORD PTR [rsp+0x108]
   58009:	mov    r8,QWORD PTR [r11+0x8]
   5800d:	mov    r11,QWORD PTR [rsp+0x110]
   58015:	mov    r10,QWORD PTR [r8+rax*1]
   58019:	mov    r8,QWORD PTR [r11+0x8]
   5801d:	mov    r11,QWORD PTR [r8+rax*1]
   58021:	add    r10,rbx
   58024:	add    r11,rdx
   58027:	mov    r8,r11
   5802a:	movzx  r11d,WORD PTR [rsp+0x130]
   58033:	mov    WORD PTR [r10],r11w
   58037:	mov    r10,QWORD PTR [rsp+0x140]
   5803f:	mov    r10,QWORD PTR [r14+r10*8+0x8]
   58044:	mov    QWORD PTR [r8],r10
   58047:	test   r11w,r11w
   5804b:	js     57f08 <encode_one_macroblock+0x11a8>
   58051:	mov    r11d,DWORD PTR [rsp+0x40]
   58056:	mov    r10,QWORD PTR [rcx+0x118f8]
   5805d:	lea    r8d,[rdi+r11*1]
   58061:	mov    r11,QWORD PTR [rsp+0x90]
   58069:	mov    r8,QWORD PTR [r10+r8*8]
   5806d:	mov    r8,QWORD PTR [r8+r13*1]
   58071:	mov    r8,QWORD PTR [r8+0x8]
   58075:	mov    r8,QWORD PTR [r8+r11*1]
   58079:	mov    r11,QWORD PTR [rsp+0x128]
   58081:	mov    r10,QWORD PTR [r8+0x18]
   58085:	mov    r8,QWORD PTR [r11+0x8]
   58089:	mov    r8,QWORD PTR [r8+rax*1]
   5808d:	movzx  r11d,WORD PTR [r10]
   58091:	mov    r8,QWORD PTR [r8+rdx*1]
   58095:	mov    WORD PTR [r8],r11w
   58099:	movzx  r10d,WORD PTR [r10+0x2]
   5809e:	mov    WORD PTR [r8+0x2],r10w
   580a3:	jmp    57f08 <encode_one_macroblock+0x11a8>
   580a8:	mov    r11,QWORD PTR [rsp+0x108]
   580b0:	mov    r8,QWORD PTR [r11+0x8]
   580b4:	mov    r11,QWORD PTR [rsp+0x110]
   580bc:	mov    r10,QWORD PTR [r8+rax*1]
   580c0:	mov    r8,QWORD PTR [r11+0x8]
   580c4:	mov    r11,QWORD PTR [r8+rax*1]
   580c8:	add    r10,rbx
   580cb:	add    r11,rdx
   580ce:	mov    r8,r11
   580d1:	test   si,si
   580d4:	jne    5802a <encode_one_macroblock+0x12ca>
   580da:	mov    r9d,0xffffffff
   580e0:	mov    WORD PTR [r10],r9w
   580e4:	mov    QWORD PTR [r11],0xffffffffffffffff
   580eb:	mov    r11,QWORD PTR [rsp+0x128]
   580f3:	mov    r8,QWORD PTR [r11+0x8]
   580f7:	mov    r8,QWORD PTR [r8+rax*1]
   580fb:	mov    r8,QWORD PTR [r8+rdx*1]
   580ff:	mov    DWORD PTR [r8],0x0
   58106:	jmp    57f08 <encode_one_macroblock+0x11a8>
   5810b:	mov    rax,QWORD PTR [rip+0x304a6]        # 885b8 <input>
   58112:	mov    WORD PTR [rsp+0x40],bx
   58117:	mov    edx,DWORD PTR [rax+0x9a0]
   5811d:	test   edx,edx
   5811f:	jne    58140 <encode_one_macroblock+0x13e0>
   58121:	mov    rbx,QWORD PTR [rsp+0x8]
   58126:	mov    r15d,DWORD PTR [rax+0xc94]
   5812d:	mov    DWORD PTR [rbx+0x23c],0x0
   58137:	test   r15d,r15d
   5813a:	jne    591da <encode_one_macroblock+0x247a>
   58140:	mov    eax,DWORD PTR [rsp+0x1a8]
   58147:	cmp    eax,DWORD PTR [rsp+0x58]
   5814b:	jge    57a15 <encode_one_macroblock+0xcb5>
   58151:	mov    ebx,DWORD PTR [rsp+0x78]
   58155:	mov    DWORD PTR [rsp+0x58],eax
   58159:	mov    DWORD PTR [rip+0x8a5c1],ebx        # e2720 <best_mode>
   5815f:	mov    rbx,QWORD PTR [rsp+0x8]
   58164:	mov    ebx,DWORD PTR [rbx+0x23c]
   5816a:	mov    DWORD PTR [rsp+0xfc],ebx
   58171:	jmp    57a15 <encode_one_macroblock+0xcb5>
   58176:	lea    r8,[rip+0x875a3]        # df720 <cbp_blk>
   5817d:	add    rax,rax
   58180:	lea    r10,[rip+0x85e19]        # ddfa0 <diffy>
   58187:	lea    rdi,[r8-0x200]
   5818e:	lea    r14,[r8+0x20]
   58192:	sub    rax,rdi
   58195:	lea    rbp,[rcx+rdx*8]
   58199:	lea    r11,[rax-0x200]
   581a0:	lea    rdi,[r11+r8*1]
   581a4:	lea    rax,[r8-0x200]
   581ab:	mov    rsi,r10
   581ae:	mov    rcx,rbp
   581b1:	nop    DWORD PTR [rax+0x0]
   581b8:	mov    rdx,QWORD PTR [rcx]
   581bb:	movzx  r9d,WORD PTR [rax]
   581bf:	add    rax,0x20
   581c3:	add    rcx,0x8
   581c7:	add    rsi,0x40
   581cb:	movzx  edx,WORD PTR [rdx+rdi*1]
   581cf:	sub    edx,r9d
   581d2:	mov    DWORD PTR [rsi-0x40],edx
   581d5:	cmp    r8,rax
   581d8:	jne    581b8 <encode_one_macroblock+0x1458>
   581da:	add    r8,0x2
   581de:	add    r10,0x4
   581e2:	cmp    r14,r8
   581e5:	jne    581a0 <encode_one_macroblock+0x1440>
   581e7:	jmp    578a7 <encode_one_macroblock+0xb47>
   581ec:	cmp    r9d,0x1
   581f0:	je     59b17 <encode_one_macroblock+0x2db7>
   581f6:	cmp    r9d,0x2
   581fa:	jne    57778 <encode_one_macroblock+0xa18>
   58200:	mov    eax,DWORD PTR [rsi+0x8c]
   58206:	mov    rcx,QWORD PTR [rip+0x5bf3b]        # b4148 <refresh_map>
   5820d:	mov    r15d,DWORD PTR [rsp+0xdc]
   58215:	lea    edx,[rax+rax*1]
   58218:	mov    eax,DWORD PTR [rsi+0x88]
   5821e:	movsxd rdx,edx
   58221:	add    eax,eax
   58223:	cdqe   
   58225:	add    rax,QWORD PTR [rcx+rdx*8]
   58229:	test   r15d,r15d
   5822c:	jne    5af6c <encode_one_macroblock+0x420c>
   58232:	mov    ebx,DWORD PTR [r12+0x48]
   58237:	lea    edx,[rbx-0x9]
   5823a:	cmp    edx,0x2
   5823d:	setb   BYTE PTR [rax]
   58240:	mov    rax,QWORD PTR [rip+0x30369]        # 885b0 <img>
   58247:	mov    rcx,QWORD PTR [rip+0x5befa]        # b4148 <refresh_map>
   5824e:	mov    ebx,DWORD PTR [rax+0x8c]
   58254:	mov    eax,DWORD PTR [rax+0x88]
   5825a:	lea    edx,[rbx+rbx*1]
   5825d:	mov    ebx,DWORD PTR [r12+0x48]
   58262:	add    eax,eax
   58264:	movsxd rdx,edx
   58267:	cdqe   
   58269:	mov    rcx,QWORD PTR [rcx+rdx*8]
   5826d:	lea    edx,[rbx-0x9]
   58270:	cmp    edx,0x1
   58273:	setbe  BYTE PTR [rcx+rax*1+0x1]
   58278:	mov    rax,QWORD PTR [rip+0x30331]        # 885b0 <img>
   5827f:	mov    rcx,QWORD PTR [rip+0x5bec2]        # b4148 <refresh_map>
   58286:	mov    ebx,DWORD PTR [rax+0x8c]
   5828c:	mov    eax,DWORD PTR [rax+0x88]
   58292:	lea    edx,[rbx+rbx*1]
   58295:	mov    ebx,DWORD PTR [r12+0x48]
   5829a:	add    eax,eax
   5829c:	movsxd rdx,edx
   5829f:	cdqe   
   582a1:	add    rax,QWORD PTR [rcx+rdx*8+0x8]
   582a6:	lea    edx,[rbx-0x9]
   582a9:	mov    ecx,0x1
   582ae:	cmp    edx,0x2
   582b1:	setb   BYTE PTR [rax]
   582b4:	mov    eax,DWORD PTR [r12+0x48]
   582b9:	sub    eax,0x9
   582bc:	cmp    eax,0x1
   582bf:	jbe    59b9f <encode_one_macroblock+0x2e3f>
   582c5:	xor    ecx,ecx
   582c7:	jmp    59b9f <encode_one_macroblock+0x2e3f>
   582cc:	nop    DWORD PTR [rax+0x0]
   582d0:	mov    DWORD PTR [rsp+0x5c],edi
   582d4:	cmp    esi,0x2
   582d7:	jne    56e1f <encode_one_macroblock+0xbf>
   582dd:	mov    DWORD PTR [rsp+0x5c],0x2
   582e5:	test   dl,dl
   582e7:	jne    56e1f <encode_one_macroblock+0xbf>
   582ed:	cmp    DWORD PTR [rsp+0x14],0x1
   582f2:	mov    DWORD PTR [rsp+0x5c],0x1
   582fa:	jne    56e1f <encode_one_macroblock+0xbf>
   58300:	mov    r11d,DWORD PTR [rax+0x11b30]
   58307:	xor    r15d,r15d
   5830a:	test   r11d,r11d
   5830d:	setg   r15b
   58311:	add    r15d,0x1
   58315:	mov    DWORD PTR [rsp+0x5c],r15d
   5831a:	jmp    56e1f <encode_one_macroblock+0xbf>
   5831f:	nop
   58320:	mov    rax,QWORD PTR [rsp+0x8]
   58325:	movsd  xmm0,QWORD PTR [rsp+0x18]
   5832b:	lea    rdi,[rsp+0x1a8]
   58333:	mov    DWORD PTR [rax+0x23c],0x0
   5833d:	mov    DWORD PTR [rax+0x48],0x9
   58344:	call   50f30 <Mode_Decision_for_Intra4x4Macroblock>
   58349:	mov    r12d,DWORD PTR [rsp+0x1a8]
   58351:	mov    r13d,eax
   58354:	cmp    r12d,DWORD PTR [rsp+0x58]
   58359:	jle    5a70a <encode_one_macroblock+0x39aa>
   5835f:	mov    rax,QWORD PTR [rsp+0x8]
   58364:	mov    rdx,QWORD PTR [rip+0x30df5]        # 89160 <cofAC>
   5836b:	mov    DWORD PTR [rax+0x23c],ebx
   58371:	mov    rax,QWORD PTR [rip+0x30238]        # 885b0 <img>
   58378:	mov    rcx,QWORD PTR [rax+0x3738]
   5837f:	mov    QWORD PTR [rax+0x3738],rdx
   58386:	mov    QWORD PTR [rip+0x30dd3],rcx        # 89160 <cofAC>
   5838d:	jmp    5753d <encode_one_macroblock+0x7dd>
   58392:	mov    rax,QWORD PTR [rsp+0x8]
   58397:	movsd  xmm0,QWORD PTR [rsp+0x18]
   5839d:	lea    rdi,[rsp+0x1a8]
   583a5:	mov    DWORD PTR [rax+0x23c],0x1
   583af:	mov    DWORD PTR [rax+0x48],0xd
   583b6:	call   661b0 <Mode_Decision_for_new_Intra8x8Macroblock>
   583bb:	mov    r12d,eax
   583be:	mov    eax,DWORD PTR [rsp+0x1a8]
   583c5:	cmp    eax,DWORD PTR [rsp+0x58]
   583c9:	jle    59c8a <encode_one_macroblock+0x2f2a>
   583cf:	mov    rax,QWORD PTR [rsp+0x8]
   583d4:	mov    DWORD PTR [rax+0x23c],ebx
   583da:	jmp    5752c <encode_one_macroblock+0x7cc>
   583df:	mov    edi,DWORD PTR [rip+0x8a33b]        # e2720 <best_mode>
   583e5:	call   51b80 <SetModesAndRefframeForBlocks>
   583ea:	mov    r11d,DWORD PTR [rip+0x8a32f]        # e2720 <best_mode>
   583f1:	cmp    r11d,0x8
   583f5:	je     59bef <encode_one_macroblock+0x2e8f>
   583fb:	mov    rdx,QWORD PTR [rip+0x301ae]        # 885b0 <img>
   58402:	cmp    r11d,0xd
   58406:	je     59099 <encode_one_macroblock+0x2339>
   5840c:	and    r11d,0xfffffffb
   58410:	cmp    r11d,0x9
   58414:	je     58536 <encode_one_macroblock+0x17d6>
   5841a:	movsxd r8,DWORD PTR [rdx+0x94]
   58421:	mov    esi,DWORD PTR [rdx+0x90]
   58427:	mov    r10,QWORD PTR [rsp+0xe8]
   5842f:	mov    r9,r8
   58432:	shl    r8,0x2
   58436:	lea    eax,[rbx+0x1]
   58439:	movsxd rcx,esi
   5843c:	cdqe   
   5843e:	xchg   ax,ax
   58440:	mov    rsi,QWORD PTR [r10+rcx*8]
   58444:	add    rcx,0x1
   58448:	mov    ebx,eax
   5844a:	mov    DWORD PTR [rsi+r8*1],0x2
   58452:	mov    DWORD PTR [r12+rax*4+0x148],0x2
   5845e:	add    rax,0x1
   58462:	mov    esi,DWORD PTR [rdx+0x90]
   58468:	lea    edi,[rsi+0x3]
   5846b:	cmp    edi,ecx
   5846d:	jge    58440 <encode_one_macroblock+0x16e0>
   5846f:	mov    eax,DWORD PTR [rdx+0x94]
   58475:	add    r9d,0x1
   58479:	add    r8,0x4
   5847d:	add    eax,0x3
   58480:	cmp    eax,r9d
   58483:	jge    58436 <encode_one_macroblock+0x16d6>
   58485:	mov    eax,DWORD PTR [rip+0x8a295]        # e2720 <best_mode>
   5848b:	cmp    eax,0xa
   5848e:	je     58536 <encode_one_macroblock+0x17d6>
   58494:	sub    eax,0x1
   58497:	cmp    eax,0x2
   5849a:	ja     584ab <encode_one_macroblock+0x174b>
   5849c:	mov    eax,DWORD PTR [rsp+0xfc]
   584a3:	mov    DWORD PTR [r12+0x23c],eax
   584ab:	xor    eax,eax
   584ad:	call   2a1a0 <LumaResidualCoding>
   584b2:	mov    eax,DWORD PTR [r12+0x1cc]
   584ba:	or     eax,DWORD PTR [rip+0x8a260]        # e2720 <best_mode>
   584c0:	je     5af5b <encode_one_macroblock+0x41fb>
   584c6:	mov    rdx,QWORD PTR [rip+0x300e3]        # 885b0 <img>
   584cd:	mov    rax,QWORD PTR [rip+0x5eef4]        # b73c8 <imgY_org>
   584d4:	lea    r11,[rip+0x85ac5]        # ddfa0 <diffy>
   584db:	lea    rbx,[r11+0x40]
   584df:	movsxd r8,DWORD PTR [rdx+0x98]
   584e6:	movsxd rcx,DWORD PTR [rdx+0x9c]
   584ed:	mov    r9,rdx
   584f0:	add    r8,r8
   584f3:	lea    r10,[rax+rcx*8]
   584f7:	mov    rsi,r11
   584fa:	xor    eax,eax
   584fc:	nop    DWORD PTR [rax+0x0]
   58500:	mov    rcx,QWORD PTR [r10+rax*8]
   58504:	add    rsi,0x40
   58508:	movzx  edi,WORD PTR [r9+rax*2+0x3138]
   58511:	add    rax,0x1
   58515:	movzx  ecx,WORD PTR [rcx+r8*1]
   5851a:	sub    ecx,edi
   5851c:	mov    DWORD PTR [rsi-0x40],ecx
   5851f:	cmp    rax,0x10
   58523:	jne    58500 <encode_one_macroblock+0x17a0>
   58525:	add    r11,0x4
   58529:	add    r8,0x2
   5852d:	add    r9,0x20
   58531:	cmp    r11,rbx
   58534:	jne    584f7 <encode_one_macroblock+0x1797>
   58536:	test   BYTE PTR [r12+0x1cc],0xf
   5853f:	jne    5855a <encode_one_macroblock+0x17fa>
   58541:	mov    eax,DWORD PTR [r12+0x48]
   58546:	and    eax,0xfffffffb
   58549:	cmp    eax,0x9
   5854c:	je     5855a <encode_one_macroblock+0x17fa>
   5854e:	mov    DWORD PTR [r12+0x23c],0x0
   5855a:	mov    r15d,DWORD PTR [rdx+0x11bfc]
   58561:	test   r15d,r15d
   58564:	jne    59bd8 <encode_one_macroblock+0x2e78>
   5856a:	mov    r14d,DWORD PTR [rdx+0x11c14]
   58571:	mov    DWORD PTR [rdx+0x11abc],0x0
   5857b:	mov    DWORD PTR [rsp+0x1a0],0x0
   58586:	test   r14d,r14d
   58589:	je     5859e <encode_one_macroblock+0x183e>
   5858b:	mov    eax,DWORD PTR [rip+0x8a18f]        # e2720 <best_mode>
   58591:	lea    ecx,[rax-0x9]
   58594:	cmp    ecx,0x1
   58597:	jbe    585b4 <encode_one_macroblock+0x1854>
   58599:	cmp    eax,0xd
   5859c:	je     585b4 <encode_one_macroblock+0x1854>
   5859e:	mov    r13d,DWORD PTR [rdx+0x11bfc]
   585a5:	test   r13d,r13d
   585a8:	jne    59087 <encode_one_macroblock+0x2327>
   585ae:	mov    eax,DWORD PTR [rip+0x8a16c]        # e2720 <best_mode>
   585b4:	cmp    eax,0xa
   585b7:	jne    585ec <encode_one_macroblock+0x188c>
   585b9:	mov    eax,DWORD PTR [r12+0x1cc]
   585c1:	mov    edx,eax
   585c3:	and    edx,0xf
   585c6:	cmp    edx,0x1
   585c9:	sbb    edx,edx
   585cb:	sar    eax,0x2
   585ce:	and    eax,0xc
   585d1:	and    edx,0xfffffff4
   585d4:	add    edx,DWORD PTR [rsp+0x1ac]
   585db:	lea    edx,[rdx+rax*1+0xd]
   585df:	mov    rax,QWORD PTR [rip+0x2ffca]        # 885b0 <img>
   585e6:	mov    DWORD PTR [rax+0x11abc],edx
   585ec:	mov    esi,DWORD PTR [rsp+0x178]
   585f3:	mov    rdi,r12
   585f6:	call   52810 <SetMotionVectorsMB>
   585fb:	mov    rsi,QWORD PTR [rip+0x2ffae]        # 885b0 <img>
   58602:	mov    eax,DWORD PTR [rsi+0x18]
   58605:	test   eax,eax
   58607:	je     58f5c <encode_one_macroblock+0x21fc>
   5860d:	cmp    eax,0x3
   58610:	je     58f5c <encode_one_macroblock+0x21fc>
   58616:	mov    ebx,DWORD PTR [rsi+0x11ad0]
   5861c:	test   ebx,ebx
   5861e:	je     5761e <encode_one_macroblock+0x8be>
   58624:	xor    eax,eax
   58626:	call   56910 <set_mbaff_parameters>
   5862b:	mov    rsi,QWORD PTR [rip+0x2ff7e]        # 885b0 <img>
   58632:	jmp    5761e <encode_one_macroblock+0x8be>
   58637:	movzx  ecx,WORD PTR [rdx+r15*2+0x11910]
   58640:	cmp    cx,0x1
   58644:	jg     57412 <encode_one_macroblock+0x6b2>
   5864a:	cmp    r13d,0x1
   5864e:	jne    57412 <encode_one_macroblock+0x6b2>
   58654:	cmp    WORD PTR [rip+0x8998c],0x2        # e1fe8 <best8x8pdir+0x8>
   5865c:	jne    57412 <encode_one_macroblock+0x6b2>
   58662:	add    ecx,0x1
   58665:	mov    WORD PTR [rdx+0x11912],cx
   5866c:	jmp    57412 <encode_one_macroblock+0x6b2>
   58671:	nop    DWORD PTR [rax+0x0]
   58678:	mov    rax,QWORD PTR [rsp+0x50]
   5867d:	mov    rbx,QWORD PTR [rsp+0x60]
   58682:	mov    edi,DWORD PTR [rip+0x8a098]        # e2720 <best_mode>
   58688:	mov    esi,DWORD PTR [rax+rbx*4]
   5868b:	call   190b0 <skip_intrabk_SAD>
   58690:	jmp    57788 <encode_one_macroblock+0xa28>
   58695:	lea    rdx,[rsp+0x1bc]
   5869d:	lea    rsi,[rsp+0x1b8]
   586a5:	lea    rdi,[rsp+0x1b4]
   586ad:	call   2acf0 <IntraChromaPrediction>
   586b2:	mov    rbx,QWORD PTR [rsp+0x8]
   586b7:	mov    rax,QWORD PTR [rip+0x2fefa]        # 885b8 <input>
   586be:	xor    edx,edx
   586c0:	mov    DWORD PTR [rbx+0x20c],0x0
   586ca:	jmp    58719 <encode_one_macroblock+0x19b9>
   586cc:	cmp    edx,0x1
   586cf:	je     58b86 <encode_one_macroblock+0x1e26>
   586d5:	cmp    edx,0x3
   586d8:	jne    58736 <encode_one_macroblock+0x19d6>
   586da:	mov    r10d,DWORD PTR [rsp+0x1b8]
   586e2:	test   r10d,r10d
   586e5:	je     58701 <encode_one_macroblock+0x19a1>
   586e7:	mov    r9d,DWORD PTR [rsp+0x1b4]
   586ef:	test   r9d,r9d
   586f2:	je     58701 <encode_one_macroblock+0x19a1>
   586f4:	mov    r8d,DWORD PTR [rsp+0x1bc]
   586fc:	test   r8d,r8d
   586ff:	jne    58736 <encode_one_macroblock+0x19d6>
   58701:	mov    edi,DWORD PTR [rbx+0x20c]
   58707:	lea    edx,[rdi+0x1]
   5870a:	mov    DWORD PTR [rbx+0x20c],edx
   58710:	cmp    edx,0x3
   58713:	jg     5758f <encode_one_macroblock+0x82f>
   58719:	cmp    DWORD PTR [rax+0x974],0x1
   58720:	jne    58726 <encode_one_macroblock+0x19c6>
   58722:	test   edx,edx
   58724:	jne    58701 <encode_one_macroblock+0x19a1>
   58726:	cmp    edx,0x2
   58729:	jne    586cc <encode_one_macroblock+0x196c>
   5872b:	mov    ebp,DWORD PTR [rsp+0x1b4]
   58732:	test   ebp,ebp
   58734:	je     58701 <encode_one_macroblock+0x19a1>
   58736:	mov    rdx,QWORD PTR [rip+0x2fe73]        # 885b0 <img>
   5873d:	mov    edi,DWORD PTR [rax+0x4e8]
   58743:	mov    ecx,DWORD PTR [rdx+0x11c14]
   58749:	cmp    ecx,0x1
   5874c:	sbb    r15d,r15d
   5874f:	and    r15d,0xfffffffd
   58753:	add    r15d,0xb
   58757:	test   edi,edi
   58759:	je     58764 <encode_one_macroblock+0x1a04>
   5875b:	xor    esi,esi
   5875d:	mov    WORD PTR [rdx+0x11912],si
   58764:	xor    r12d,r12d
   58767:	xor    r14d,r14d
   5876a:	xor    r13d,r13d
   5876d:	mov    ebp,r15d
   58770:	jmp    5883d <encode_one_macroblock+0x1add>
   58775:	nop    DWORD PTR [rax]
   58778:	movsxd rsi,r13d
   5877b:	lea    rdi,[rip+0x1ee7e]        # 77600 <mb_mode_table_RCT.7701>
   58782:	mov    r12d,DWORD PTR [rdi+rsi*4]
   58786:	cmp    r12d,0xa
   5878a:	je     58ab6 <encode_one_macroblock+0x1d56>
   58790:	cmp    r12d,0x1
   58794:	je     5885a <encode_one_macroblock+0x1afa>
   5879a:	add    r13d,0x1
   5879e:	mov    DWORD PTR [rdx+0x11ac8],0x0
   587a8:	mov    edi,DWORD PTR [rax+0x520]
   587ae:	test   edi,edi
   587b0:	je     58872 <encode_one_macroblock+0x1b12>
   587b6:	cmp    DWORD PTR [rdx+0x18],0x2
   587ba:	je     58872 <encode_one_macroblock+0x1b12>
   587c0:	cmp    r12d,0x9
   587c4:	jle    58872 <encode_one_macroblock+0x1b12>
   587ca:	mov    esi,DWORD PTR [rip+0x89f50]        # e2720 <best_mode>
   587d0:	test   esi,esi
   587d2:	jne    58872 <encode_one_macroblock+0x1b12>
   587d8:	mov    ecx,DWORD PTR [rbx+0x1cc]
   587de:	test   ecx,ecx
   587e0:	jne    58872 <encode_one_macroblock+0x1b12>
   587e6:	movsxd rdx,r12d
   587e9:	mov    DWORD PTR [rsp+rdx*4+0x1d0],0x0
   587f4:	nop    DWORD PTR [rax+0x0]
   587f8:	mov    edi,DWORD PTR [rax+0x4e8]
   587fe:	test   edi,edi
   58800:	je     58819 <encode_one_macroblock+0x1ab9>
   58802:	mov    rdx,QWORD PTR [rip+0x2fda7]        # 885b0 <img>
   58809:	cmp    DWORD PTR [rdx+0x18],0x1
   5880d:	jne    58819 <encode_one_macroblock+0x1ab9>
   5880f:	cmp    r14d,0x2
   58813:	je     58c3c <encode_one_macroblock+0x1edc>
   58819:	cmp    ebp,r13d
   5881c:	jle    58701 <encode_one_macroblock+0x19a1>
   58822:	mov    rdx,QWORD PTR [rip+0x2fd87]        # 885b0 <img>
   58829:	movsxd rsi,r13d
   5882c:	lea    rdi,[rip+0x1ee0d]        # 77640 <mb_mode_table.7700>
   58833:	mov    r12d,DWORD PTR [rdi+rsi*4]
   58837:	mov    ecx,DWORD PTR [rdx+0x11c14]
   5883d:	test   ecx,ecx
   5883f:	jne    58778 <encode_one_macroblock+0x1a18>
   58845:	mov    DWORD PTR [rsp+0x1ac],0x0
   58850:	cmp    r12d,0x1
   58854:	jne    5879a <encode_one_macroblock+0x1a3a>
   5885a:	cmp    DWORD PTR [rdx+0x18],0x1
   5885e:	je     58b36 <encode_one_macroblock+0x1dd6>
   58864:	add    r13d,0x1
   58868:	mov    DWORD PTR [rdx+0x11ac8],0x0
   58872:	movsxd rdx,r12d
   58875:	mov    edx,DWORD PTR [rsp+rdx*4+0x1d0]
   5887c:	test   edx,edx
   5887e:	je     587f8 <encode_one_macroblock+0x1a98>
   58884:	cmp    DWORD PTR [rax+0xc94],0x2
   5888b:	mov    DWORD PTR [rbx+0x23c],0x0
   58895:	je     58af1 <encode_one_macroblock+0x1d91>
   5889b:	mov    edi,r12d
   5889e:	call   51b80 <SetModesAndRefframeForBlocks>
   588a3:	mov    r15d,DWORD PTR [rbx+0x20c]
   588aa:	test   r15d,r15d
   588ad:	je     58978 <encode_one_macroblock+0x1c18>
   588b3:	mov    eax,DWORD PTR [rbx+0x48]
   588b6:	lea    edx,[rax-0x9]
   588b9:	cmp    edx,0x1
   588bc:	jbe    58978 <encode_one_macroblock+0x1c18>
   588c2:	cmp    eax,0xd
   588c5:	je     58978 <encode_one_macroblock+0x1c18>
   588cb:	mov    rax,QWORD PTR [rip+0x2fce6]        # 885b8 <input>
   588d2:	mov    r9d,DWORD PTR [rsp+0x1d0]
   588da:	test   r9d,r9d
   588dd:	je     587f8 <encode_one_macroblock+0x1a98>
   588e3:	test   r12d,r12d
   588e6:	jne    587f8 <encode_one_macroblock+0x1a98>
   588ec:	cmp    BYTE PTR [rsp+0xce],0x0
   588f4:	je     587f8 <encode_one_macroblock+0x1a98>
   588fa:	mov    r12d,DWORD PTR [rbx+0x1cc]
   58901:	test   r12d,r12d
   58904:	je     587f8 <encode_one_macroblock+0x1a98>
   5890a:	mov    edx,r12d
   5890d:	xor    r12d,r12d
   58910:	and    edx,0xf
   58913:	cmp    edx,0xf
   58916:	je     587f8 <encode_one_macroblock+0x1a98>
   5891c:	mov    r8d,DWORD PTR [rax+0x9a8]
   58923:	test   r8d,r8d
   58926:	jne    587f8 <encode_one_macroblock+0x1a98>
   5892c:	mov    rax,QWORD PTR [rip+0x2fc7d]        # 885b0 <img>
   58933:	movsd  xmm0,QWORD PTR [rsp+0x18]
   58939:	xor    edi,edi
   5893b:	lea    r15,[rsp+0x1c0]
   58943:	mov    edx,DWORD PTR [rsp+0x1ac]
   5894a:	mov    rsi,r15
   5894d:	mov    DWORD PTR [rax+0x11ac8],0x1
   58957:	call   54ba0 <RDCost_for_macroblocks>
   5895c:	mov    r12d,eax
   5895f:	test   eax,eax
   58961:	jne    5c7d2 <encode_one_macroblock+0x5a72>
   58967:	mov    rax,QWORD PTR [rip+0x2fc4a]        # 885b8 <input>
   5896e:	jmp    587f8 <encode_one_macroblock+0x1a98>
   58973:	nop    DWORD PTR [rax+rax*1+0x0]
   58978:	mov    DWORD PTR [rsp+0x20],ebp
   5897c:	lea    r15,[rsp+0x1c0]
   58984:	mov    DWORD PTR [rsp+0x38],r13d
   58989:	mov    r13,r15
   5898c:	mov    edx,DWORD PTR [rsp+0x1ac]
   58993:	movsd  xmm0,QWORD PTR [rsp+0x18]
   58999:	mov    rsi,r13
   5899c:	mov    edi,r12d
   5899f:	call   54ba0 <RDCost_for_macroblocks>
   589a4:	test   eax,eax
   589a6:	je     58a2f <encode_one_macroblock+0x1ccf>
   589ac:	mov    rcx,QWORD PTR [rip+0x2fbfd]        # 885b0 <img>
   589b3:	mov    rdx,QWORD PTR [rip+0x5ea0e]        # b73c8 <imgY_org>
   589ba:	movsxd rax,DWORD PTR [rcx+0xac]
   589c1:	movsxd rcx,DWORD PTR [rcx+0xa8]
   589c8:	cmp    r12d,0x8
   589cc:	je     58bc1 <encode_one_macroblock+0x1e61>
   589d2:	lea    rsi,[rip+0x307a7]        # 89180 <pred>
   589d9:	lea    rdi,[rcx+rcx*1]
   589dd:	lea    r8,[rip+0x855bc]        # ddfa0 <diffy>
   589e4:	lea    r10,[rsi+0x40]
   589e8:	lea    r9,[rdx+rax*8]
   589ec:	nop    DWORD PTR [rax+0x0]
   589f0:	mov    rcx,r9
   589f3:	xor    eax,eax
   589f5:	nop    DWORD PTR [rax]
   589f8:	mov    rdx,QWORD PTR [rcx]
   589fb:	add    rcx,0x8
   589ff:	movzx  edx,WORD PTR [rdx+rdi*1]
   58a03:	sub    edx,DWORD PTR [rsi+rax*1]
   58a06:	mov    DWORD PTR [r8+rax*1],edx
   58a0a:	add    rax,0x40
   58a0e:	cmp    rax,0x400
   58a14:	jne    589f8 <encode_one_macroblock+0x1c98>
   58a16:	add    rsi,0x4
   58a1a:	add    rdi,0x2
   58a1e:	add    r8,0x4
   58a22:	cmp    r10,rsi
   58a25:	jne    589f0 <encode_one_macroblock+0x1c90>
   58a27:	mov    edi,r12d
   58a2a:	call   52cc0 <store_macroblock_parameters>
   58a2f:	mov    rax,QWORD PTR [rip+0x2fb82]        # 885b8 <input>
   58a36:	cmp    DWORD PTR [rax+0xc94],0x1
   58a3d:	jne    5a6fc <encode_one_macroblock+0x399c>
   58a43:	lea    edx,[r12-0x1]
   58a48:	cmp    edx,0x2
   58a4b:	jbe    58a9b <encode_one_macroblock+0x1d3b>
   58a4d:	test   r12d,r12d
   58a50:	jne    58a88 <encode_one_macroblock+0x1d28>
   58a52:	cmp    BYTE PTR [rsp+0xce],0x0
   58a5a:	je     58a88 <encode_one_macroblock+0x1d28>
   58a5c:	mov    rdx,QWORD PTR [rip+0x5d40d]        # b5e70 <active_sps>
   58a63:	mov    ebp,DWORD PTR [rdx+0x484]
   58a69:	test   ebp,ebp
   58a6b:	jne    58a9b <encode_one_macroblock+0x1d3b>
   58a6d:	nop    DWORD PTR [rax]
   58a70:	mov    DWORD PTR [rbx+0x23c],0x0
   58a7a:	mov    ebp,DWORD PTR [rsp+0x20]
   58a7e:	mov    r13d,DWORD PTR [rsp+0x38]
   58a83:	jmp    588d2 <encode_one_macroblock+0x1b72>
   58a88:	cmp    r12d,0x8
   58a8c:	jne    58a70 <encode_one_macroblock+0x1d10>
   58a8e:	mov    r11d,DWORD PTR [rsp+0x1e0]
   58a96:	test   r11d,r11d
   58a99:	je     58a70 <encode_one_macroblock+0x1d10>
   58a9b:	mov    r10d,DWORD PTR [rbx+0x23c]
   58aa2:	test   r10d,r10d
   58aa5:	jne    58a70 <encode_one_macroblock+0x1d10>
   58aa7:	mov    DWORD PTR [rbx+0x23c],0x1
   58ab1:	jmp    5898c <encode_one_macroblock+0x1c2c>
   58ab6:	lea    esi,[r13-0x5]
   58aba:	mov    DWORD PTR [rsp+0x1ac],esi
   58ac1:	test   esi,esi
   58ac3:	jne    58b9c <encode_one_macroblock+0x1e3c>
   58ac9:	mov    r15d,DWORD PTR [rsp+0x1b4]
   58ad1:	mov    r13d,0x6
   58ad7:	test   r15d,r15d
   58ada:	jne    5879e <encode_one_macroblock+0x1a3e>
   58ae0:	mov    r12d,0x9
   58ae6:	mov    r13d,0x6
   58aec:	jmp    5883d <encode_one_macroblock+0x1add>
   58af1:	lea    eax,[r12-0x1]
   58af6:	cmp    eax,0x2
   58af9:	jbe    58b27 <encode_one_macroblock+0x1dc7>
   58afb:	test   r12d,r12d
   58afe:	jne    58cb6 <encode_one_macroblock+0x1f56>
   58b04:	cmp    BYTE PTR [rsp+0xce],0x0
   58b0c:	je     58cb6 <encode_one_macroblock+0x1f56>
   58b12:	mov    rax,QWORD PTR [rip+0x5d357]        # b5e70 <active_sps>
   58b19:	mov    eax,DWORD PTR [rax+0x484]
   58b1f:	test   eax,eax
   58b21:	je     5889b <encode_one_macroblock+0x1b3b>
   58b27:	mov    DWORD PTR [rbx+0x23c],0x1
   58b31:	jmp    5889b <encode_one_macroblock+0x1b3b>
   58b36:	mov    r8d,DWORD PTR [rax+0x4e8]
   58b3d:	mov    WORD PTR [rip+0x894a9],r14w        # e1fee <best8x8pdir+0xe>
   58b45:	mov    WORD PTR [rip+0x8949f],r14w        # e1fec <best8x8pdir+0xc>
   58b4d:	mov    WORD PTR [rip+0x89495],r14w        # e1fea <best8x8pdir+0xa>
   58b55:	mov    WORD PTR [rip+0x8948b],r14w        # e1fe8 <best8x8pdir+0x8>
   58b5d:	test   r8d,r8d
   58b60:	je     58b6c <encode_one_macroblock+0x1e0c>
   58b62:	cmp    r14d,0x2
   58b66:	je     59ac1 <encode_one_macroblock+0x2d61>
   58b6c:	lea    ecx,[r14+0x1]
   58b70:	cmp    r14d,0x1
   58b74:	jle    58c67 <encode_one_macroblock+0x1f07>
   58b7a:	add    r13d,0x1
   58b7e:	mov    r14d,ecx
   58b81:	jmp    58868 <encode_one_macroblock+0x1b08>
   58b86:	mov    r11d,DWORD PTR [rsp+0x1b8]
   58b8e:	test   r11d,r11d
   58b91:	jne    58736 <encode_one_macroblock+0x19d6>
   58b97:	jmp    58701 <encode_one_macroblock+0x19a1>
   58b9c:	cmp    esi,0x1
   58b9f:	jne    58c6f <encode_one_macroblock+0x1f0f>
   58ba5:	mov    r13d,DWORD PTR [rsp+0x1b8]
   58bad:	test   r13d,r13d
   58bb0:	je     59aea <encode_one_macroblock+0x2d8a>
   58bb6:	mov    r13d,0x7
   58bbc:	jmp    5879e <encode_one_macroblock+0x1a3e>
   58bc1:	lea    r8,[rip+0x86b58]        # df720 <cbp_blk>
   58bc8:	add    rcx,rcx
   58bcb:	lea    r10,[rip+0x853ce]        # ddfa0 <diffy>
   58bd2:	lea    rdi,[r8-0x200]
   58bd9:	lea    r15,[r8+0x20]
   58bdd:	sub    rcx,rdi
   58be0:	lea    rbp,[rdx+rax*8]
   58be4:	lea    r11,[rcx-0x200]
   58beb:	nop    DWORD PTR [rax+rax*1+0x0]
   58bf0:	lea    rdi,[r11+r8*1]
   58bf4:	lea    rax,[r8-0x200]
   58bfb:	mov    rsi,r10
   58bfe:	mov    rcx,rbp
   58c01:	nop    DWORD PTR [rax+0x0]
   58c08:	mov    rdx,QWORD PTR [rcx]
   58c0b:	movzx  r9d,WORD PTR [rax]
   58c0f:	add    rax,0x20
   58c13:	add    rcx,0x8
   58c17:	add    rsi,0x40
   58c1b:	movzx  edx,WORD PTR [rdx+rdi*1]
   58c1f:	sub    edx,r9d
   58c22:	mov    DWORD PTR [rsi-0x40],edx
   58c25:	cmp    r8,rax
   58c28:	jne    58c08 <encode_one_macroblock+0x1ea8>
   58c2a:	add    r8,0x2
   58c2e:	add    r10,0x4
   58c32:	cmp    r15,r8
   58c35:	jne    58bf0 <encode_one_macroblock+0x1e90>
   58c37:	jmp    58a27 <encode_one_macroblock+0x1cc7>
   58c3c:	movsxd rcx,r12d
   58c3f:	movzx  ecx,WORD PTR [rdx+rcx*2+0x11910]
   58c47:	cmp    r12d,0x1
   58c4b:	jne    58c57 <encode_one_macroblock+0x1ef7>
   58c4d:	cmp    cx,0x1
   58c51:	jle    59205 <encode_one_macroblock+0x24a5>
   58c57:	mov    r14d,0x2
   58c5d:	jmp    58819 <encode_one_macroblock+0x1ab9>
   58c62:	mov    ecx,0x2
   58c67:	mov    r14d,ecx
   58c6a:	jmp    58868 <encode_one_macroblock+0x1b08>
   58c6f:	cmp    esi,0x3
   58c72:	jne    5879a <encode_one_macroblock+0x1a3a>
   58c78:	mov    r11d,DWORD PTR [rsp+0x1b8]
   58c80:	mov    r13d,0x9
   58c86:	test   r11d,r11d
   58c89:	je     58819 <encode_one_macroblock+0x1ab9>
   58c8f:	mov    r10d,DWORD PTR [rsp+0x1b4]
   58c97:	test   r10d,r10d
   58c9a:	je     58819 <encode_one_macroblock+0x1ab9>
   58ca0:	mov    r9d,DWORD PTR [rsp+0x1bc]
   58ca8:	test   r9d,r9d
   58cab:	jne    5879e <encode_one_macroblock+0x1a3e>
   58cb1:	jmp    58819 <encode_one_macroblock+0x1ab9>
   58cb6:	cmp    r12d,0x8
   58cba:	jne    5889b <encode_one_macroblock+0x1b3b>
   58cc0:	mov    eax,DWORD PTR [rsp+0x1e0]
   58cc7:	test   eax,eax
   58cc9:	je     5889b <encode_one_macroblock+0x1b3b>
   58ccf:	jmp    58b27 <encode_one_macroblock+0x1dc7>
   58cd4:	xor    edx,edx
   58cd6:	xor    esi,esi
   58cd8:	xor    edi,edi
   58cda:	call   2acf0 <IntraChromaPrediction>
   58cdf:	jmp    57504 <encode_one_macroblock+0x7a4>
   58ce4:	cmp    eax,0x1
   58ce7:	je     59064 <encode_one_macroblock+0x2304>
   58ced:	pxor   xmm0,xmm0
   58cf1:	movsd  xmm3,QWORD PTR [rip+0x19acf]        # 727c8 <INIT_MB_TYPE_I+0x108>
   58cf9:	cvtsi2sd xmm0,DWORD PTR [r8+0x14]
   58cff:	mulsd  xmm0,QWORD PTR [rip+0x1e9b9]        # 776c0 <b8_mode_table.7699+0x60>
   58d07:	movapd xmm7,xmm3
   58d0b:	subsd  xmm7,xmm0
   58d0f:	movsd  QWORD PTR [rsp+0x8],xmm7
   58d15:	mov    edi,DWORD PTR [r8+0x4d4]
   58d1c:	movsd  QWORD PTR [rsp+0x20],xmm3
   58d22:	movsd  QWORD PTR [rsp+0x18],xmm2
   58d28:	test   edi,edi
   58d2a:	jle    58eb0 <encode_one_macroblock+0x2150>
   58d30:	mov    rax,QWORD PTR [rip+0x11d49]        # 6aa80 <QP_SCALE_CR+0x40>
   58d37:	movq   xmm0,rax
   58d3c:	call   4360 <pow@plt>
   58d41:	cmp    DWORD PTR [rsp+0x14],0x1
   58d46:	movsd  xmm2,QWORD PTR [rsp+0x18]
   58d4c:	mulsd  xmm0,QWORD PTR [rip+0x1e974]        # 776c8 <b8_mode_table.7699+0x68>
   58d54:	movsd  xmm3,QWORD PTR [rsp+0x20]
   58d5a:	je     5ad35 <encode_one_macroblock+0x3fd5>
   58d60:	cmp    DWORD PTR [rsp+0x14],0x3
   58d65:	je     5ad04 <encode_one_macroblock+0x3fa4>
   58d6b:	mov    rdx,QWORD PTR [rip+0x2f846]        # 885b8 <input>
   58d72:	mov    rax,QWORD PTR [rip+0x2f837]        # 885b0 <img>
   58d79:	cmp    DWORD PTR [rdx+0x528],0x2
   58d80:	je     5a7bf <encode_one_macroblock+0x3a5f>
   58d86:	cmp    DWORD PTR [rax+0x18],0x1
   58d8a:	je     5ae5c <encode_one_macroblock+0x40fc>
   58d90:	mulsd  xmm0,QWORD PTR [rsp+0x8]
   58d96:	movsd  QWORD PTR [rsp+0x18],xmm0
   58d9c:	jmp    57199 <encode_one_macroblock+0x439>
   58da1:	mov    r10,rax
   58da4:	lea    rbx,[rax+0x2]
   58da8:	lea    rax,[rip+0x5e6a1]        # b7450 <listXsize>
   58daf:	mov    QWORD PTR [rsp+0x50],rax
   58db4:	lea    r11,[rip+0x5e665]        # b7420 <listX>
   58dbb:	mov    rax,QWORD PTR [rsp+0x50]
   58dc0:	mov    edi,DWORD PTR [rax+r10*4]
   58dc4:	test   edi,edi
   58dc6:	jle    58e2f <encode_one_macroblock+0x20cf>
   58dc8:	mov    eax,DWORD PTR [rcx+0xc]
   58dcb:	sub    edi,0x1
   58dce:	mov    edx,eax
   58dd0:	mov    r9d,eax
   58dd3:	shr    edx,0x1f
   58dd6:	and    r9d,0x1
   58dda:	lea    esi,[rax+rdx*1]
   58ddd:	and    esi,0x1
   58de0:	sub    esi,edx
   58de2:	mov    rdx,QWORD PTR [r11+r10*8]
   58de6:	lea    rax,[rdx+0x8]
   58dea:	lea    rdi,[rax+rdi*8]
   58dee:	jmp    58dfc <encode_one_macroblock+0x209c>
   58df0:	mov    rdx,rax
   58df3:	cmp    rdi,rax
   58df6:	je     58e2f <encode_one_macroblock+0x20cf>
   58df8:	add    rax,0x8
   58dfc:	mov    rdx,QWORD PTR [rdx]
   58dff:	mov    DWORD PTR [rdx+0x1908],0x0
   58e09:	test   r9d,r9d
   58e0c:	jne    58e13 <encode_one_macroblock+0x20b3>
   58e0e:	cmp    DWORD PTR [rdx],0x2
   58e11:	je     58e41 <encode_one_macroblock+0x20e1>
   58e13:	cmp    esi,0x1
   58e16:	jne    58df0 <encode_one_macroblock+0x2090>
   58e18:	cmp    DWORD PTR [rdx],0x1
   58e1b:	jne    58df0 <encode_one_macroblock+0x2090>
   58e1d:	mov    DWORD PTR [rdx+0x1908],0x2
   58e27:	mov    rdx,rax
   58e2a:	cmp    rdi,rax
   58e2d:	jne    58df8 <encode_one_macroblock+0x2098>
   58e2f:	add    r10,0x1
   58e33:	cmp    rbx,r10
   58e36:	jne    58dbb <encode_one_macroblock+0x205b>
   58e3c:	jmp    57102 <encode_one_macroblock+0x3a2>
   58e41:	mov    DWORD PTR [rdx+0x1908],0xfffffffe
   58e4b:	jmp    58df0 <encode_one_macroblock+0x2090>
   58e4d:	mov    edx,0x2
   58e52:	mov    DWORD PTR [rsp+0x20],edx
   58e56:	mov    ecx,r14d
   58e59:	jmp    5743f <encode_one_macroblock+0x6df>
   58e5e:	cmp    r13d,0x8
   58e62:	jne    57375 <encode_one_macroblock+0x615>
   58e68:	mov    ebp,DWORD PTR [rsp+0x1e0]
   58e6f:	test   ebp,ebp
   58e71:	je     57375 <encode_one_macroblock+0x615>
   58e77:	jmp    5796a <encode_one_macroblock+0xc0a>
   58e7c:	mov    DWORD PTR [rax+0x9a0],0x1
   58e86:	jmp    572af <encode_one_macroblock+0x54f>
   58e8b:	mov    ebx,0x1
   58e90:	cmp    ecx,DWORD PTR [rax+0x5c]
   58e93:	jne    56dd4 <encode_one_macroblock+0x74>
   58e99:	jmp    56dca <encode_one_macroblock+0x6a>
   58e9e:	mov    DWORD PTR [rsp+0x1e4],0x0
   58ea9:	xor    eax,eax
   58eab:	jmp    5703e <encode_one_macroblock+0x2de>
   58eb0:	movsd  xmm0,QWORD PTR [rip+0x11bc8]        # 6aa80 <QP_SCALE_CR+0x40>
   58eb8:	call   4360 <pow@plt>
   58ebd:	cmp    DWORD PTR [rsp+0x14],0x1
   58ec2:	movsd  xmm2,QWORD PTR [rsp+0x18]
   58ec8:	mulsd  xmm0,QWORD PTR [rip+0x11bb8]        # 6aa88 <QP_SCALE_CR+0x48>
   58ed0:	movsd  xmm3,QWORD PTR [rsp+0x20]
   58ed6:	jne    58d60 <encode_one_macroblock+0x2000>
   58edc:	mulsd  xmm0,QWORD PTR [rip+0x11bac]        # 6aa90 <QP_SCALE_CR+0x50>
   58ee4:	jmp    58d6b <encode_one_macroblock+0x200b>
   58ee9:	mov    eax,DWORD PTR [r12+0x250]
   58ef1:	mov    rdx,QWORD PTR [rip+0x2f6b8]        # 885b0 <img>
   58ef8:	mov    DWORD PTR [r12+0x8],0x0
   58f01:	mov    DWORD PTR [r12+0xc],eax
   58f06:	mov    DWORD PTR [rdx+0x28],eax
   58f09:	mov    DWORD PTR [r12+0x258],0x0
   58f15:	jmp    57610 <encode_one_macroblock+0x8b0>
   58f1a:	cmp    DWORD PTR [rsi+0x18],0x1
   58f1e:	je     5c792 <encode_one_macroblock+0x5a32>
   58f24:	mov    rax,QWORD PTR [rsp+0xe0]
   58f2c:	mov    r8d,DWORD PTR [rax+0x48]
   58f30:	test   r8d,r8d
   58f33:	jne    57680 <encode_one_macroblock+0x920>
   58f39:	xor    eax,eax
   58f3b:	call   53920 <field_flag_inference>
   58f40:	cmp    DWORD PTR [rsp+0xf8],eax
   58f47:	je     57680 <encode_one_macroblock+0x920>
   58f4d:	mov    rax,QWORD PTR [rip+0x1988c]        # 727e0 <INIT_MB_TYPE_I+0x120>
   58f54:	mov    QWORD PTR [r10],rax
   58f57:	jmp    57680 <encode_one_macroblock+0x920>
   58f5c:	cmp    DWORD PTR [rip+0x897bd],0x1        # e2720 <best_mode>
   58f63:	jne    58616 <encode_one_macroblock+0x18b6>
   58f69:	mov    ebp,DWORD PTR [r12+0x1cc]
   58f71:	test   ebp,ebp
   58f73:	jne    58616 <encode_one_macroblock+0x18b6>
   58f79:	mov    rcx,QWORD PTR [rip+0x31a28]        # 8a9a8 <enc_picture>
   58f80:	movsxd rdx,DWORD PTR [rsi+0x90]
   58f87:	movsxd rax,DWORD PTR [rsi+0x94]
   58f8e:	mov    rdi,QWORD PTR [rcx+0x1950]
   58f95:	mov    rdi,QWORD PTR [rdi]
   58f98:	mov    rdi,QWORD PTR [rdi+rdx*8]
   58f9c:	cmp    WORD PTR [rdi+rax*2],0x0
   58fa1:	jne    58616 <encode_one_macroblock+0x18b6>
   58fa7:	mov    rcx,QWORD PTR [rcx+0x1968]
   58fae:	mov    rcx,QWORD PTR [rcx]
   58fb1:	mov    rdx,QWORD PTR [rcx+rdx*8]
   58fb5:	mov    rdx,QWORD PTR [rdx+rax*8]
   58fb9:	mov    rax,QWORD PTR [rsp+0x118]
   58fc1:	mov    rax,QWORD PTR [rax]
   58fc4:	mov    rax,QWORD PTR [rax]
   58fc7:	mov    rax,QWORD PTR [rax]
   58fca:	mov    rax,QWORD PTR [rax]
   58fcd:	mov    rax,QWORD PTR [rax]
   58fd0:	movzx  ebx,WORD PTR [rax]
   58fd3:	cmp    WORD PTR [rdx],bx
   58fd6:	jne    58616 <encode_one_macroblock+0x18b6>
   58fdc:	movzx  eax,WORD PTR [rax+0x2]
   58fe0:	cmp    WORD PTR [rdx+0x2],ax
   58fe4:	jne    58616 <encode_one_macroblock+0x18b6>
   58fea:	mov    QWORD PTR [r12+0x1d8],0x0
   58ff6:	mov    QWORD PTR [r12+0x1e0],0x0
   59002:	mov    DWORD PTR [r12+0x48],0x0
   5900b:	mov    DWORD PTR [r12+0x23c],0x0
   59017:	jmp    58616 <encode_one_macroblock+0x18b6>
   5901c:	nop    DWORD PTR [rax+0x0]
   59020:	mov    rax,QWORD PTR [rip+0x2f589]        # 885b0 <img>
   59027:	lea    rbp,[rsp+0x1c0]
   5902f:	movsd  xmm0,QWORD PTR [rsp+0x18]
   59035:	xor    edi,edi
   59037:	mov    edx,DWORD PTR [rsp+0x1ac]
   5903e:	mov    rsi,rbp
   59041:	mov    DWORD PTR [rax+0x11ac8],0x1
   5904b:	call   54ba0 <RDCost_for_macroblocks>
   59050:	test   eax,eax
   59052:	jne    5c57c <encode_one_macroblock+0x581c>
   59058:	mov    rax,QWORD PTR [rip+0x2f559]        # 885b8 <input>
   5905f:	jmp    573f0 <encode_one_macroblock+0x690>
   59064:	mov    r9d,DWORD PTR [rcx+0x11b30]
   5906b:	test   r9d,r9d
   5906e:	jne    58ced <encode_one_macroblock+0x1f8d>
   59074:	movsd  xmm3,QWORD PTR [rip+0x1974c]        # 727c8 <INIT_MB_TYPE_I+0x108>
   5907c:	movsd  QWORD PTR [rsp+0x8],xmm3
   59082:	jmp    58d15 <encode_one_macroblock+0x1fb5>
   59087:	lea    rdi,[rsp+0x1a0]
   5908f:	call   2a3c0 <ChromaResidualCoding>
   59094:	jmp    585ae <encode_one_macroblock+0x184e>
   59099:	mov    r10,QWORD PTR [rdx+0x70]
   5909d:	mov    r11,QWORD PTR [rdx+0x68]
   590a1:	mov    rbp,r12
   590a4:	xor    r8d,r8d
   590a7:	mov    rdi,rbp
   590aa:	xor    esi,esi
   590ac:	mov    ecx,DWORD PTR [rdx+0x90]
   590b2:	mov    eax,DWORD PTR [rdx+0x94]
   590b8:	add    rdi,0x4
   590bc:	add    ecx,r8d
   590bf:	add    eax,esi
   590c1:	add    esi,0x1
   590c4:	movsxd rcx,ecx
   590c7:	cdqe   
   590c9:	mov    r9,QWORD PTR [r10+rcx*8]
   590cd:	mov    rcx,QWORD PTR [r11+rcx*8]
   590d1:	mov    r9d,DWORD PTR [r9+rax*4]
   590d5:	mov    DWORD PTR [rcx+rax*4],r9d
   590d9:	mov    eax,DWORD PTR [rdi+0x188]
   590df:	mov    DWORD PTR [rdi+0x148],eax
   590e5:	cmp    esi,0x4
   590e8:	jne    590ac <encode_one_macroblock+0x234c>
   590ea:	add    r8d,0x1
   590ee:	add    rbp,0x10
   590f2:	cmp    r8d,0x4
   590f6:	jne    590a7 <encode_one_macroblock+0x2347>
   590f8:	mov    rbp,QWORD PTR [rip+0x318a9]        # 8a9a8 <enc_picture>
   590ff:	movsxd r9,DWORD PTR [rdx+0x9c]
   59106:	lea    rcx,[rip+0x88a33]        # e1b40 <temp_imgY>
   5910d:	movsxd r10,DWORD PTR [rdx+0x98]
   59114:	lea    r8,[rcx+0x200]
   5911b:	mov    rdi,QWORD PTR [rbp+0x1918]
   59122:	shl    r9,0x3
   59126:	add    r10,r10
   59129:	add    rdi,r9
   5912c:	mov    r11,QWORD PTR [rdi]
   5912f:	xor    eax,eax
   59131:	add    r11,r10
   59134:	nop    DWORD PTR [rax+0x0]
   59138:	movzx  esi,WORD PTR [rcx+rax*1]
   5913c:	mov    WORD PTR [r11+rax*1],si
   59141:	add    rax,0x2
   59145:	cmp    rax,0x20
   59149:	jne    59138 <encode_one_macroblock+0x23d8>
   5914b:	add    rcx,0x20
   5914f:	add    rdi,0x8
   59153:	cmp    rcx,r8
   59156:	jne    5912c <encode_one_macroblock+0x23cc>
   59158:	mov    eax,DWORD PTR [rdx+0x11c14]
   5915e:	mov    r11d,DWORD PTR [rip+0x895bb]        # e2720 <best_mode>
   59165:	test   eax,eax
   59167:	je     5840c <encode_one_macroblock+0x16ac>
   5916d:	mov    rax,QWORD PTR [rbp+0x1940]
   59174:	lea    rcx,[rip+0x885a5]        # e1720 <temp_imgU>
   5917b:	lea    rsi,[rip+0x85f1e]        # df0a0 <temp_imgV>
   59182:	lea    r13,[rcx+0x200]
   59189:	mov    rbp,QWORD PTR [rax]
   5918c:	mov    r14,QWORD PTR [rax+0x8]
   59190:	mov    r15,QWORD PTR [rbp+r9*1+0x0]
   59195:	mov    r8,QWORD PTR [r14+r9*1]
   59199:	xor    eax,eax
   5919b:	add    r15,r10
   5919e:	add    r8,r10
   591a1:	nop    DWORD PTR [rax+0x0]
   591a8:	movzx  edi,WORD PTR [rcx+rax*1]
   591ac:	mov    WORD PTR [r15+rax*1],di
   591b1:	movzx  edi,WORD PTR [rsi+rax*1]
   591b5:	mov    WORD PTR [r8+rax*1],di
   591ba:	add    rax,0x2
   591be:	cmp    rax,0x20
   591c2:	jne    591a8 <encode_one_macroblock+0x2448>
   591c4:	add    rcx,0x20
   591c8:	add    rsi,0x20
   591cc:	add    r9,0x8
   591d0:	cmp    r13,rcx
   591d3:	jne    59190 <encode_one_macroblock+0x2430>
   591d5:	jmp    5840c <encode_one_macroblock+0x16ac>
   591da:	mov    edi,DWORD PTR [rsp+0x78]
   591de:	call   51b80 <SetModesAndRefframeForBlocks>
   591e3:	lea    rsi,[rsp+0x1a8]
   591eb:	mov    edi,0xffffffff
   591f0:	call   28ac0 <TransformDecision>
   591f5:	mov    rbx,QWORD PTR [rsp+0x8]
   591fa:	mov    DWORD PTR [rbx+0x23c],eax
   59200:	jmp    58140 <encode_one_macroblock+0x13e0>
   59205:	cmp    WORD PTR [rip+0x88ddb],0x2        # e1fe8 <best8x8pdir+0x8>
   5920d:	jne    58819 <encode_one_macroblock+0x1ab9>
   59213:	add    ecx,0x1
   59216:	mov    WORD PTR [rdx+0x11912],cx
   5921d:	jmp    58819 <encode_one_macroblock+0x1ab9>
   59222:	mov    rdi,QWORD PTR [rsp+0x70]
   59227:	lea    rax,[rip+0x89b8e]        # e2dbc <best8x8fwref+0x1c>
   5922e:	mov    WORD PTR [rax+rdi*2],bp
   59232:	sub    rax,0x4
   59236:	mov    WORD PTR [rax+rdi*2],bp
   5923a:	lea    rax,[rip+0x88dbb]        # e1ffc <best8x8pdir+0x1c>
   59241:	mov    WORD PTR [rax+rdi*2],si
   59245:	sub    rax,0x4
   59249:	mov    WORD PTR [rax+rdi*2],si
   5924d:	lea    rax,[rip+0x85de8]        # df03c <best8x8bwref+0x1c>
   59254:	mov    WORD PTR [rax+rdi*2],bx
   59258:	sub    rax,0x4
   5925c:	mov    WORD PTR [rax+rdi*2],bx
   59260:	jmp    57fa5 <encode_one_macroblock+0x1245>
   59265:	movzx  edx,WORD PTR [rcx+0x11912]
   5926c:	xor    esi,esi
   5926e:	mov    r8,QWORD PTR [rip+0x31733]        # 8a9a8 <enc_picture>
   59275:	mov    eax,DWORD PTR [rcx+0x90]
   5927b:	mov    WORD PTR [rsp+0x128],si
   59283:	mov    r11d,DWORD PTR [rsp+0x98]
   5928b:	movsxd r14,DWORD PTR [rcx+0x94]
   59292:	mov    DWORD PTR [rsp+0x130],r12d
   5929a:	mov    r15,QWORD PTR [r8+0x1958]
   592a1:	mov    r9,QWORD PTR [r8+0x1968]
   592a8:	mov    DWORD PTR [rsp+0xa8],eax
   592af:	lea    eax,[rax+r11*2]
   592b3:	mov    rdi,QWORD PTR [r8+0x1950]
   592ba:	mov    QWORD PTR [rsp+0xb0],r14
   592c2:	add    r14,r14
   592c5:	cdqe   
   592c7:	mov    r10,QWORD PTR [r15]
   592ca:	mov    r13,QWORD PTR [r9]
   592cd:	mov    QWORD PTR [rsp+0x110],r9
   592d5:	lea    r11,[rax*8+0x0]
   592dd:	mov    r9,QWORD PTR [rsp+0x60]
   592e2:	mov    QWORD PTR [rsp+0x48],rdi
   592e7:	mov    QWORD PTR [rsp+0x108],rax
   592ef:	mov    rax,r11
   592f2:	add    r10,rax
   592f5:	add    r13,rax
   592f8:	mov    rax,r9
   592fb:	mov    QWORD PTR [rsp+0xc0],r11
   59303:	shl    rax,0x5
   59307:	add    r11,QWORD PTR [rdi]
   5930a:	movsx  rdi,bp
   5930e:	mov    QWORD PTR [rsp+0x40],r14
   59313:	add    rax,r9
   59316:	mov    QWORD PTR [rsp+0x80],r15
   5931e:	mov    rsi,r10
   59321:	xor    r15d,r15d
   59324:	lea    rdi,[rdi+rax*1+0x2]
   59329:	lea    rax,[r8+rax*8]
   5932d:	mov    WORD PTR [rsp+0x138],bx
   59335:	mov    rbx,r11
   59338:	mov    QWORD PTR [rsp+0x90],rax
   59340:	mov    r12,rdi
   59343:	lea    r9,[r14*4+0x0]
   5934b:	xor    eax,eax
   5934d:	mov    r11,QWORD PTR [rbx+rax*1]
   59351:	mov    r10,QWORD PTR [rsi+rax*1]
   59355:	mov    rdi,QWORD PTR [r13+rax*1+0x0]
   5935a:	add    r11,r14
   5935d:	add    r10,r9
   59360:	mov    rdi,QWORD PTR [rdi+r9*1]
   59364:	test   dx,dx
   59367:	je     593c6 <encode_one_macroblock+0x2666>
   59369:	cmp    dx,0x1
   5936d:	mov    rdx,QWORD PTR [rcx+0x11908]
   59374:	cmove  rdx,QWORD PTR [rcx+0x11900]
   5937c:	mov    WORD PTR [r11],0x0
   59382:	mov    r11,QWORD PTR [rsp+0x90]
   5938a:	mov    rdx,QWORD PTR [rdx+rax*1]
   5938e:	mov    r11,QWORD PTR [r11+0x18]
   59392:	mov    rdx,QWORD PTR [rdx+r15*1]
   59396:	mov    QWORD PTR [r10],r11
   59399:	mov    rdx,QWORD PTR [rdx]
   5939c:	mov    rdx,QWORD PTR [rdx]
   5939f:	mov    rdx,QWORD PTR [rdx+0x8]
   593a3:	add    rax,0x8
   593a7:	movzx  r10d,WORD PTR [rdx]
   593ab:	mov    WORD PTR [rdi],r10w
   593af:	movzx  edx,WORD PTR [rdx+0x2]
   593b3:	mov    WORD PTR [rdi+0x2],dx
   593b7:	cmp    rax,0x20
   593bb:	je     593ef <encode_one_macroblock+0x268f>
   593bd:	movzx  edx,WORD PTR [rcx+0x11912]
   593c4:	jmp    5934d <encode_one_macroblock+0x25ed>
   593c6:	mov    rdx,QWORD PTR [r8+r12*8+0x8]
   593cb:	mov    WORD PTR [r11],bp
   593cf:	mov    r11,QWORD PTR [rsp+0x38]
   593d4:	mov    QWORD PTR [r10],rdx
   593d7:	mov    rdx,QWORD PTR [rcx+0x118f8]
   593de:	mov    rdx,QWORD PTR [rdx+rax*1]
   593e2:	mov    rdx,QWORD PTR [rdx+r15*1]
   593e6:	mov    rdx,QWORD PTR [rdx]
   593e9:	mov    rdx,QWORD PTR [rdx+r11*1]
   593ed:	jmp    5939f <encode_one_macroblock+0x263f>
   593ef:	add    r15,0x8
   593f3:	add    r14,0x2
   593f7:	cmp    r15,0x20
   593fb:	je     5941a <encode_one_macroblock+0x26ba>
   593fd:	movzx  edx,WORD PTR [rcx+0x11912]
   59404:	jmp    59343 <encode_one_macroblock+0x25e3>
   59409:	xor    eax,eax
   5940b:	or     ecx,DWORD PTR [rsp+0x1e8]
   59412:	setne  al
   59415:	jmp    5703e <encode_one_macroblock+0x2de>
   5941a:	cmp    DWORD PTR [rsp+0x14],0x1
   5941f:	movsx  esi,WORD PTR [rsp+0x128]
   59427:	mov    r12d,DWORD PTR [rsp+0x130]
   5942f:	movzx  ebx,WORD PTR [rsp+0x138]
   59437:	je     5c4d8 <encode_one_macroblock+0x5778>
   5943d:	cmp    QWORD PTR [rsp+0x20],0x3
   59443:	je     59222 <encode_one_macroblock+0x24c2>
   59449:	cmp    DWORD PTR [rsp+0x20],0x2
   5944e:	jne    57f51 <encode_one_macroblock+0x11f1>
   59454:	mov    eax,DWORD PTR [rsp+0x98]
   5945b:	add    eax,eax
   5945d:	mov    DWORD PTR [rsp+0xb0],eax
   59464:	jmp    598b9 <encode_one_macroblock+0x2b59>
   59469:	nop    DWORD PTR [rax+0x0]
   59470:	mov    rax,QWORD PTR [rsi+0x11b88]
   59477:	movsxd rdx,DWORD PTR [rsi+0xc]
   5947b:	lea    rbx,[rax+rdx*8]
   5947f:	xor    eax,eax
   59481:	call   4bf00 <calc_MAD>
   59486:	mov    rsi,QWORD PTR [rip+0x2f123]        # 885b0 <img>
   5948d:	mov    rdi,QWORD PTR [rip+0x2f124]        # 885b8 <input>
   59494:	movsd  QWORD PTR [rbx],xmm0
   59498:	mov    eax,DWORD PTR [rsi+0x11ba0]
   5949e:	cmp    DWORD PTR [rdi+0xcb0],eax
   594a4:	jge    5763e <encode_one_macroblock+0x8de>
   594aa:	movsxd rdx,DWORD PTR [rsi+0xc]
   594ae:	mov    rax,QWORD PTR [rsi+0x11b88]
   594b5:	movsd  xmm0,QWORD PTR [rsi+0x11b60]
   594bd:	mov    r9d,DWORD PTR [rip+0x86044]        # df508 <cbp>
   594c4:	addsd  xmm0,QWORD PTR [rax+rdx*8]
   594c9:	movsd  QWORD PTR [rsi+0x11b60],xmm0
   594d1:	test   r9d,r9d
   594d4:	je     5af0a <encode_one_macroblock+0x41aa>
   594da:	mov    DWORD PTR [r12+0x258],0x1
   594e6:	mov    r8d,DWORD PTR [rdi+0xb44]
   594ed:	test   r8d,r8d
   594f0:	je     5763e <encode_one_macroblock+0x8de>
   594f6:	mov    ecx,DWORD PTR [r12+0x214]
   594fe:	mov    edx,DWORD PTR [r12+0x8]
   59503:	mov    eax,DWORD PTR [r12+0xc]
   59508:	test   ecx,ecx
   5950a:	jne    5b1d8 <encode_one_macroblock+0x4478>
   59510:	mov    DWORD PTR [rip+0x871aa],edx        # e06c0 <DELTA_QP>
   59516:	mov    DWORD PTR [rip+0x5d224],eax        # b6740 <QP>
   5951c:	jmp    5763e <encode_one_macroblock+0x8de>
   59521:	mov    edx,DWORD PTR [rsp+0xd8]
   59528:	test   edx,edx
   5952a:	je     5ae86 <encode_one_macroblock+0x4126>
   59530:	mov    rax,QWORD PTR [rip+0x2f081]        # 885b8 <input>
   59537:	mov    eax,DWORD PTR [rax+0xc94]
   5953d:	cmp    eax,0x1
   59540:	je     5b192 <encode_one_macroblock+0x4432>
   59546:	mov    r10d,DWORD PTR [rsp+0xc8]
   5954e:	cmp    eax,0x2
   59551:	cmovne r10d,DWORD PTR [rsp+0x6c]
   59557:	movsd  xmm0,QWORD PTR [rsp+0x28]
   5955d:	movsd  xmm2,QWORD PTR [rip+0x1a00b]        # 73570 <quant_coef+0x8b0>
   59565:	mulsd  xmm0,QWORD PTR [rip+0x1e173]        # 776e0 <b8_mode_table.7699+0x80>
   5956d:	movsd  xmm3,QWORD PTR [rip+0x19feb]        # 73560 <quant_coef+0x8a0>
   59575:	addsd  xmm0,QWORD PTR [rip+0x1cb13]        # 76090 <QP2QUANT+0xb0>
   5957d:	movapd xmm1,xmm0
   59581:	andpd  xmm1,xmm2
   59585:	ucomisd xmm3,xmm1
   59589:	jbe    595be <encode_one_macroblock+0x285e>
   5958b:	cvttsd2si rax,xmm0
   59590:	pxor   xmm1,xmm1
   59594:	movsd  xmm4,QWORD PTR [rip+0x1922c]        # 727c8 <INIT_MB_TYPE_I+0x108>
   5959c:	andnpd xmm2,xmm0
   595a0:	cvtsi2sd xmm1,rax
   595a5:	movapd xmm3,xmm1
   595a9:	cmpnlesd xmm3,xmm0
   595ae:	movapd xmm0,xmm2
   595b2:	andpd  xmm3,xmm4
   595b6:	subsd  xmm1,xmm3
   595ba:	orpd   xmm0,xmm1
   595be:	cvttsd2si eax,xmm0
   595c2:	sub    r10d,eax
   595c5:	mov    DWORD PTR [rsp+0x1a8],r10d
   595cd:	cmp    r10d,DWORD PTR [rsp+0x58]
   595d2:	jle    5b022 <encode_one_macroblock+0x42c2>
   595d8:	mov    rax,QWORD PTR [rsp+0x8]
   595dd:	mov    DWORD PTR [rax+0x23c],ebx
   595e3:	mov    DWORD PTR [rax+0x240],ebp
   595e9:	jmp    5751d <encode_one_macroblock+0x7bd>
   595ee:	mov    eax,DWORD PTR [rsp+0xa8]
   595f5:	add    eax,DWORD PTR [rsp+0x40]
   595f9:	movsx  rdx,bx
   595fd:	mov    DWORD PTR [rsp+0x98],0x0
   59608:	mov    DWORD PTR [rsp+0x138],eax
   5960f:	mov    rax,QWORD PTR [r14+0x1950]
   59616:	mov    DWORD PTR [rsp+0x148],r12d
   5961e:	mov    QWORD PTR [rsp+0xa8],rax
   59626:	mov    rax,QWORD PTR [rax]
   59629:	mov    QWORD PTR [rsp+0x48],rax
   5962e:	mov    rax,QWORD PTR [r14+0x1958]
   59635:	mov    QWORD PTR [rsp+0xc0],rax
   5963d:	mov    rax,QWORD PTR [rax]
   59640:	mov    QWORD PTR [rsp+0x80],rax
   59648:	mov    rax,QWORD PTR [r14+0x1968]
   5964f:	mov    QWORD PTR [rsp+0x108],rax
   59657:	mov    r13,QWORD PTR [rax]
   5965a:	movsxd rax,DWORD PTR [rsp+0xbc]
   59662:	mov    rdi,rax
   59665:	shl    rdi,0x5
   59669:	add    rax,rdi
   5966c:	lea    rax,[rdx+rax*1+0x2]
   59671:	mov    QWORD PTR [rsp+0x140],rax
   59679:	movsx  rax,bp
   5967d:	mov    QWORD PTR [rsp+0x110],rax
   59685:	mov    eax,DWORD PTR [rsp+0x98]
   5968c:	mov    edx,DWORD PTR [rsp+0x40]
   59690:	mov    WORD PTR [rsp+0x130],bx
   59698:	mov    edi,DWORD PTR [rsp+0x138]
   5969f:	add    edi,eax
   596a1:	add    eax,edx
   596a3:	xor    edx,edx
   596a5:	lea    r12,[rax*8+0x0]
   596ad:	mov    rax,QWORD PTR [rsp+0x60]
   596b2:	movsxd rdi,edi
   596b5:	lea    r9,[rdi+rdi*1]
   596b9:	shl    rdi,0x3
   596bd:	shl    rax,0x5
   596c1:	mov    QWORD PTR [rsp+0x128],rax
   596c9:	mov    r10,QWORD PTR [rsp+0x48]
   596ce:	mov    r8,QWORD PTR [rsp+0x80]
   596d6:	lea    eax,[r15+rdx*1]
   596da:	cdqe   
   596dc:	mov    r11,QWORD PTR [r10+rax*8]
   596e0:	mov    r10,QWORD PTR [r8+rax*8]
   596e4:	mov    r8,QWORD PTR [r13+rax*8+0x0]
   596e9:	add    r11,r9
   596ec:	add    r10,rdi
   596ef:	mov    r8,QWORD PTR [r8+rdi*1]
   596f3:	cmp    si,0x1
   596f7:	je     59793 <encode_one_macroblock+0x2a33>
   596fd:	mov    rbx,QWORD PTR [rsp+0x110]
   59705:	mov    WORD PTR [r11],bp
   59709:	mov    r11,QWORD PTR [rsp+0x128]
   59711:	add    r11,QWORD PTR [rsp+0x60]
   59716:	lea    r11,[r11+rbx*1+0x2]
   5971b:	mov    rbx,QWORD PTR [rsp+0x38]
   59720:	cmp    DWORD PTR [rsp+0x14],0x1
   59725:	mov    r11,QWORD PTR [r14+r11*8+0x8]
   5972a:	mov    QWORD PTR [r10],r11
   5972d:	mov    r10,QWORD PTR [rcx+0x118f8]
   59734:	mov    r10,QWORD PTR [r10+rdx*8]
   59738:	mov    r10,QWORD PTR [r10+r12*1]
   5973c:	mov    r10,QWORD PTR [r10]
   5973f:	mov    r10,QWORD PTR [r10+rbx*1]
   59743:	mov    r10,QWORD PTR [r10+0x10]
   59747:	movzx  r11d,WORD PTR [r10]
   5974b:	mov    WORD PTR [r8],r11w
   5974f:	movzx  r10d,WORD PTR [r10+0x2]
   59754:	mov    WORD PTR [r8+0x2],r10w
   59759:	je     5984f <encode_one_macroblock+0x2aef>
   5975f:	add    rdx,0x1
   59763:	cmp    rdx,0x4
   59767:	jne    596c9 <encode_one_macroblock+0x2969>
   5976d:	cmp    DWORD PTR [rsp+0x98],0x1
   59775:	movzx  ebx,WORD PTR [rsp+0x130]
   5977d:	je     598b1 <encode_one_macroblock+0x2b51>
   59783:	mov    DWORD PTR [rsp+0x98],0x1
   5978e:	jmp    59685 <encode_one_macroblock+0x2925>
   59793:	mov    ebx,0xffffffff
   59798:	cmp    DWORD PTR [rsp+0x14],0x1
   5979d:	mov    WORD PTR [r11],bx
   597a1:	mov    QWORD PTR [r10],0xffffffffffffffff
   597a8:	mov    DWORD PTR [r8],0x0
   597af:	jne    5975f <encode_one_macroblock+0x29ff>
   597b1:	mov    rbx,QWORD PTR [rsp+0xa8]
   597b9:	mov    r8,QWORD PTR [rbx+0x8]
   597bd:	mov    rbx,QWORD PTR [rsp+0xc0]
   597c5:	mov    r10,QWORD PTR [r8+rax*8]
   597c9:	mov    r8,QWORD PTR [rbx+0x8]
   597cd:	mov    rbx,QWORD PTR [r8+rax*8]
   597d1:	add    r10,r9
   597d4:	add    rbx,rdi
   597d7:	mov    r8,rbx
   597da:	movzx  r11d,WORD PTR [rsp+0x130]
   597e3:	mov    rbx,QWORD PTR [rsp+0x140]
   597eb:	mov    WORD PTR [r10],r11w
   597ef:	mov    r10,QWORD PTR [r14+rbx*8+0x8]
   597f4:	mov    QWORD PTR [r8],r10
   597f7:	test   r11w,r11w
   597fb:	js     5975f <encode_one_macroblock+0x29ff>
   59801:	mov    r8,QWORD PTR [rcx+0x118f8]
   59808:	mov    rbx,QWORD PTR [rsp+0x90]
   59810:	mov    r8,QWORD PTR [r8+rdx*8]
   59814:	mov    r8,QWORD PTR [r8+r12*1]
   59818:	mov    r8,QWORD PTR [r8+0x8]
   5981c:	mov    r8,QWORD PTR [r8+rbx*1]
   59820:	mov    rbx,QWORD PTR [rsp+0x108]
   59828:	mov    r10,QWORD PTR [rbx+0x8]
   5982c:	mov    r8,QWORD PTR [r8+0x10]
   59830:	mov    rax,QWORD PTR [r10+rax*8]
   59834:	movzx  r10d,WORD PTR [r8]
   59838:	mov    rax,QWORD PTR [rax+rdi*1]
   5983c:	mov    WORD PTR [rax],r10w
   59840:	movzx  r8d,WORD PTR [r8+0x2]
   59845:	mov    WORD PTR [rax+0x2],r8w
   5984a:	jmp    5975f <encode_one_macroblock+0x29ff>
   5984f:	mov    rbx,QWORD PTR [rsp+0xa8]
   59857:	mov    r8,QWORD PTR [rbx+0x8]
   5985b:	mov    rbx,QWORD PTR [rsp+0xc0]
   59863:	mov    r10,QWORD PTR [r8+rax*8]
   59867:	mov    r8,QWORD PTR [rbx+0x8]
   5986b:	mov    rbx,QWORD PTR [r8+rax*8]
   5986f:	add    r10,r9
   59872:	add    rbx,rdi
   59875:	mov    r8,rbx
   59878:	test   si,si
   5987b:	jne    597da <encode_one_macroblock+0x2a7a>
   59881:	mov    r11d,0xffffffff
   59887:	mov    WORD PTR [r10],r11w
   5988b:	mov    QWORD PTR [rbx],0xffffffffffffffff
   59892:	mov    rbx,QWORD PTR [rsp+0x108]
   5989a:	mov    r8,QWORD PTR [rbx+0x8]
   5989e:	mov    rax,QWORD PTR [r8+rax*8]
   598a2:	mov    rax,QWORD PTR [rax+rdi*1]
   598a6:	mov    DWORD PTR [rax],0x0
   598ac:	jmp    5975f <encode_one_macroblock+0x29ff>
   598b1:	mov    r12d,DWORD PTR [rsp+0x148]
   598b9:	mov    rdi,QWORD PTR [rsp+0x70]
   598be:	lea    rax,[rip+0x894ed]        # e2db2 <best8x8fwref+0x12>
   598c5:	lea    rdx,[rip+0x894d4]        # e2da0 <best8x8fwref>
   598cc:	mov    WORD PTR [rax+rdi*4],bp
   598d0:	movsxd rax,DWORD PTR [rsp+0xb0]
   598d8:	add    rax,0x8
   598dc:	mov    WORD PTR [rdx+rax*2],bp
   598e0:	lea    rdx,[rip+0x8870b]        # e1ff2 <best8x8pdir+0x12>
   598e7:	mov    WORD PTR [rdx+rdi*4],si
   598eb:	sub    rdx,0x12
   598ef:	mov    WORD PTR [rdx+rax*2],si
   598f3:	lea    rdx,[rip+0x85738]        # df032 <best8x8bwref+0x12>
   598fa:	mov    WORD PTR [rdx+rdi*4],bx
   598fe:	sub    rdx,0x12
   59902:	mov    WORD PTR [rdx+rax*2],bx
   59906:	jmp    57fa5 <encode_one_macroblock+0x1245>
   5990b:	movsxd rax,DWORD PTR [rsp+0xbc]
   59913:	mov    rdi,QWORD PTR [rsp+0x50]
   59918:	mov    QWORD PTR [rsp+0x38],rax
   5991d:	mov    ecx,DWORD PTR [rdi+rax*4]
   59920:	mov    rax,QWORD PTR [rip+0x2ec91]        # 885b8 <input>
   59927:	mov    edi,DWORD PTR [rax+0x9a0]
   5992d:	test   ecx,ecx
   5992f:	jle    599c9 <encode_one_macroblock+0x2c69>
   59935:	mov    rax,QWORD PTR [rip+0x5db44]        # b7480 <motion_cost>
   5993c:	mov    rsi,QWORD PTR [rsp+0x120]
   59944:	mov    r13d,0x7fffffff
   5994a:	xor    edx,edx
   5994c:	mov    r14,QWORD PTR [rip+0x5db35]        # b7488 <refbits>
   59953:	mov    rax,QWORD PTR [rax+rsi*1]
   59957:	mov    r8,QWORD PTR [rax+0x8]
   5995b:	mov    rax,QWORD PTR [rsp+0x70]
   59960:	lea    r11,[rax*4+0x0]
   59968:	jmp    59999 <encode_one_macroblock+0x2c39>
   5996a:	xor    eax,eax
   5996c:	cmp    ecx,0x1
   5996f:	je     5997d <encode_one_macroblock+0x2c1d>
   59971:	mov    eax,DWORD PTR [rsp+0x30]
   59975:	imul   eax,DWORD PTR [r14+rsi*4]
   5997a:	sar    eax,0x10
   5997d:	mov    rsi,QWORD PTR [r8+rsi*8]
   59981:	add    eax,DWORD PTR [rsi+r11*1]
   59985:	cmp    eax,r13d
   59988:	jge    5998f <encode_one_macroblock+0x2c2f>
   5998a:	mov    ebx,edx
   5998c:	mov    r13d,eax
   5998f:	add    edx,0x1
   59992:	movsx  eax,dx
   59995:	cmp    eax,ecx
   59997:	jge    599cf <encode_one_macroblock+0x2c6f>
   59999:	movsx  rsi,dx
   5999d:	test   edi,edi
   5999f:	jne    5996a <encode_one_macroblock+0x2c0a>
   599a1:	movsd  xmm6,QWORD PTR [rsp+0x28]
   599a7:	movapd xmm0,xmm6
   599ab:	addsd  xmm0,xmm6
   599af:	test   dx,dx
   599b2:	jg     599c3 <encode_one_macroblock+0x2c63>
   599b4:	movsx  eax,dx
   599b7:	pxor   xmm1,xmm1
   599bb:	cvtsi2sd xmm1,eax
   599bf:	mulsd  xmm0,xmm1
   599c3:	cvttsd2si eax,xmm0
   599c7:	jmp    5997d <encode_one_macroblock+0x2c1d>
   599c9:	mov    r13d,0x7fffffff
   599cf:	test   edi,edi
   599d1:	je     5ad66 <encode_one_macroblock+0x4006>
   599d7:	xor    r14d,r14d
   599da:	cmp    r15d,0x1
   599de:	jle    599f9 <encode_one_macroblock+0x2c99>
   599e0:	mov    rdx,QWORD PTR [rip+0x5daa1]        # b7488 <refbits>
   599e7:	movsx  rax,bp
   599eb:	mov    r14d,DWORD PTR [rsp+0x30]
   599f0:	imul   r14d,DWORD PTR [rdx+rax*4]
   599f5:	sar    r14d,0x10
   599f9:	movsx  edx,bp
   599fc:	cmp    ecx,0x1
   599ff:	jle    59a17 <encode_one_macroblock+0x2cb7>
   59a01:	mov    rax,QWORD PTR [rip+0x5da80]        # b7488 <refbits>
   59a08:	mov    edi,DWORD PTR [rsp+0x30]
   59a0c:	imul   edi,DWORD PTR [rax]
   59a0f:	mov    eax,edi
   59a11:	sar    eax,0x10
   59a14:	add    r14d,eax
   59a17:	mov    r8d,DWORD PTR [rsp+0x30]
   59a1c:	mov    edi,DWORD PTR [rsp+0x78]
   59a20:	xor    ecx,ecx
   59a22:	mov    esi,r12d
   59a25:	mov    DWORD PTR [rsp+0x40],r10d
   59a2a:	call   42580 <BIDPartitionCost>
   59a2f:	mov    r10d,DWORD PTR [rsp+0x40]
   59a34:	add    r14d,eax
   59a37:	mov    rax,QWORD PTR [rsp+0x20]
   59a3c:	cmp    rax,0x1
   59a40:	mov    esi,eax
   59a42:	je     5b105 <encode_one_macroblock+0x43a5>
   59a48:	cmp    DWORD PTR [rsp+0x20],0x1
   59a4d:	mov    eax,r14d
   59a50:	mov    edx,DWORD PTR [rsp+0x1a8]
   59a57:	sete   sil
   59a5b:	cmp    r13d,r14d
   59a5e:	cmovle eax,r13d
   59a62:	cmp    r10d,eax
   59a65:	jle    5afeb <encode_one_macroblock+0x428b>
   59a6b:	mov    rax,QWORD PTR [rip+0x2eb3e]        # 885b0 <img>
   59a72:	cmp    r14d,r10d
   59a75:	cmovle r10d,r14d
   59a79:	cmp    r13d,r10d
   59a7c:	jg     5aecb <encode_one_macroblock+0x416b>
   59a82:	add    edx,r13d
   59a85:	mov    rcx,rax
   59a88:	mov    DWORD PTR [rsp+0x1a8],edx
   59a8f:	movsx  rdx,bx
   59a93:	lea    rdi,[rdx*8+0x0]
   59a9b:	mov    QWORD PTR [rsp+0x90],rdi
   59aa3:	test   sil,sil
   59aa6:	jne    5cc74 <encode_one_macroblock+0x5f14>
   59aac:	mov    QWORD PTR [rsp+0x38],0x0
   59ab5:	xor    ebp,ebp
   59ab7:	mov    esi,0x1
   59abc:	jmp    57d5a <encode_one_macroblock+0xffa>
   59ac1:	cmp    WORD PTR [rdx+0x11912],0x1
   59ac9:	jle    58c62 <encode_one_macroblock+0x1f02>
   59acf:	add    r13d,0x1
   59ad3:	mov    r14d,0x3
   59ad9:	jmp    58868 <encode_one_macroblock+0x1b08>
   59ade:	xor    eax,eax
   59ae0:	call   45390 <Get_Direct_Motion_Vectors>
   59ae5:	jmp    579a6 <encode_one_macroblock+0xc46>
   59aea:	mov    r12d,0xd
   59af0:	mov    r13d,0x7
   59af6:	jmp    5883d <encode_one_macroblock+0x1add>
   59afb:	cmp    WORD PTR [r9+0x11912],0x1
   59b04:	jle    58e4d <encode_one_macroblock+0x20ed>
   59b0a:	mov    DWORD PTR [rsp+0x20],0x3
   59b12:	jmp    5743f <encode_one_macroblock+0x6df>
   59b17:	mov    eax,DWORD PTR [rsp+0xb8]
   59b1e:	test   eax,eax
   59b20:	mov    eax,DWORD PTR [rsi+0x8c]
   59b26:	setne  cl
   59b29:	lea    edx,[rax+rax*1]
   59b2c:	mov    eax,DWORD PTR [rsi+0x88]
   59b32:	mov    rsi,QWORD PTR [rip+0x5a60f]        # b4148 <refresh_map>
   59b39:	movsxd rdx,edx
   59b3c:	mov    rdx,QWORD PTR [rsi+rdx*8]
   59b40:	add    eax,eax
   59b42:	cdqe   
   59b44:	mov    BYTE PTR [rdx+rax*1],cl
   59b47:	mov    rax,QWORD PTR [rip+0x2ea62]        # 885b0 <img>
   59b4e:	mov    rsi,QWORD PTR [rip+0x5a5f3]        # b4148 <refresh_map>
   59b55:	mov    ebx,DWORD PTR [rax+0x8c]
   59b5b:	mov    eax,DWORD PTR [rax+0x88]
   59b61:	lea    edx,[rbx+rbx*1]
   59b64:	add    eax,eax
   59b66:	movsxd rdx,edx
   59b69:	cdqe   
   59b6b:	mov    rdx,QWORD PTR [rsi+rdx*8]
   59b6f:	mov    BYTE PTR [rdx+rax*1+0x1],cl
   59b73:	mov    rax,QWORD PTR [rip+0x2ea36]        # 885b0 <img>
   59b7a:	mov    rsi,QWORD PTR [rip+0x5a5c7]        # b4148 <refresh_map>
   59b81:	mov    ebx,DWORD PTR [rax+0x8c]
   59b87:	mov    eax,DWORD PTR [rax+0x88]
   59b8d:	lea    edx,[rbx+rbx*1]
   59b90:	add    eax,eax
   59b92:	movsxd rdx,edx
   59b95:	cdqe   
   59b97:	mov    rdx,QWORD PTR [rsi+rdx*8+0x8]
   59b9c:	mov    BYTE PTR [rdx+rax*1],cl
   59b9f:	mov    rax,QWORD PTR [rip+0x2ea0a]        # 885b0 <img>
   59ba6:	mov    rsi,QWORD PTR [rip+0x5a59b]        # b4148 <refresh_map>
   59bad:	mov    ebx,DWORD PTR [rax+0x8c]
   59bb3:	mov    eax,DWORD PTR [rax+0x88]
   59bb9:	lea    edx,[rbx+rbx*1]
   59bbc:	add    eax,eax
   59bbe:	movsxd rdx,edx
   59bc1:	cdqe   
   59bc3:	mov    rdx,QWORD PTR [rsi+rdx*8+0x8]
   59bc8:	mov    BYTE PTR [rdx+rax*1+0x1],cl
   59bcc:	mov    rdi,QWORD PTR [rip+0x2e9e5]        # 885b8 <input>
   59bd3:	jmp    57778 <encode_one_macroblock+0xa18>
   59bd8:	xor    edx,edx
   59bda:	xor    esi,esi
   59bdc:	xor    edi,edi
   59bde:	call   2acf0 <IntraChromaPrediction>
   59be3:	mov    rdx,QWORD PTR [rip+0x2e9c6]        # 885b0 <img>
   59bea:	jmp    5856a <encode_one_macroblock+0x180a>
   59bef:	mov    eax,DWORD PTR [r12+0x23c]
   59bf7:	test   eax,eax
   59bf9:	je     59c09 <encode_one_macroblock+0x2ea9>
   59bfb:	mov    eax,DWORD PTR [rip+0x857df]        # df3e0 <cbp8_8x8ts>
   59c01:	test   eax,eax
   59c03:	je     5aea6 <encode_one_macroblock+0x4146>
   59c09:	mov    rdi,r12
   59c0c:	call   543c0 <SetCoeffAndReconstruction8x8>
   59c11:	mov    rdx,QWORD PTR [rip+0x2e998]        # 885b0 <img>
   59c18:	mov    r10,QWORD PTR [rsp+0xe8]
   59c20:	movsxd r8,DWORD PTR [rdx+0x94]
   59c27:	mov    esi,DWORD PTR [rdx+0x90]
   59c2d:	mov    r9,r8
   59c30:	shl    r8,0x2
   59c34:	lea    eax,[rbx+0x1]
   59c37:	movsxd rcx,esi
   59c3a:	cdqe   
   59c3c:	nop    DWORD PTR [rax+0x0]
   59c40:	mov    rsi,QWORD PTR [r10+rcx*8]
   59c44:	add    rcx,0x1
   59c48:	mov    ebx,eax
   59c4a:	mov    DWORD PTR [rsi+r8*1],0x2
   59c52:	mov    DWORD PTR [r12+rax*4+0x148],0x2
   59c5e:	add    rax,0x1
   59c62:	mov    esi,DWORD PTR [rdx+0x90]
   59c68:	lea    edi,[rsi+0x3]
   59c6b:	cmp    edi,ecx
   59c6d:	jge    59c40 <encode_one_macroblock+0x2ee0>
   59c6f:	mov    eax,DWORD PTR [rdx+0x94]
   59c75:	add    r9d,0x1
   59c79:	add    r8,0x4
   59c7d:	add    eax,0x3
   59c80:	cmp    eax,r9d
   59c83:	jge    59c34 <encode_one_macroblock+0x2ed4>
   59c85:	jmp    58536 <encode_one_macroblock+0x17d6>
   59c8a:	mov    rdx,QWORD PTR [rip+0x2e91f]        # 885b0 <img>
   59c91:	mov    r15d,DWORD PTR [rdx+0x11c14]
   59c98:	test   r15d,r15d
   59c9b:	jne    5c081 <encode_one_macroblock+0x5321>
   59ca1:	mov    DWORD PTR [rsp+0x58],eax
   59ca5:	mov    r11,QWORD PTR [rip+0x30cfc]        # 8a9a8 <enc_picture>
   59cac:	movsxd rcx,DWORD PTR [rdx+0x9c]
   59cb3:	movsxd rbx,DWORD PTR [rdx+0x98]
   59cba:	mov    rax,QWORD PTR [rsp+0x8]
   59cbf:	mov    DWORD PTR [rax+0x1cc],r12d
   59cc6:	mov    rax,QWORD PTR [rip+0x2e8eb]        # 885b8 <input>
   59ccd:	cmp    DWORD PTR [rax+0xc94],0x2
   59cd4:	je     59cf2 <encode_one_macroblock+0x2f92>
   59cd6:	mov    rax,QWORD PTR [rip+0x2f483]        # 89160 <cofAC>
   59cdd:	mov    rsi,QWORD PTR [rdx+0x3738]
   59ce4:	mov    QWORD PTR [rdx+0x3738],rax
   59ceb:	mov    QWORD PTR [rip+0x2f46e],rsi        # 89160 <cofAC>
   59cf2:	mov    r8,QWORD PTR [r11+0x1918]
   59cf9:	shl    rcx,0x3
   59cfd:	lea    rdi,[rip+0x87e3c]        # e1b40 <temp_imgY>
   59d04:	add    rbx,rbx
   59d07:	lea    r9,[rdi+0x200]
   59d0e:	add    r8,rcx
   59d11:	mov    r10,QWORD PTR [r8]
   59d14:	xor    eax,eax
   59d16:	add    r10,rbx
   59d19:	nop    DWORD PTR [rax+0x0]
   59d20:	movzx  esi,WORD PTR [r10+rax*1]
   59d25:	mov    WORD PTR [rdi+rax*1],si
   59d29:	add    rax,0x2
   59d2d:	cmp    rax,0x20
   59d31:	jne    59d20 <encode_one_macroblock+0x2fc0>
   59d33:	add    rdi,0x20
   59d37:	add    r8,0x8
   59d3b:	cmp    r9,rdi
   59d3e:	jne    59d11 <encode_one_macroblock+0x2fb1>
   59d40:	mov    rdi,QWORD PTR [rip+0x5d681]        # b73c8 <imgY_org>
   59d47:	lea    r8,[rip+0x84252]        # ddfa0 <diffy>
   59d4e:	lea    r9,[r8+0x40]
   59d52:	add    rdi,rcx
   59d55:	mov    rsi,r8
   59d58:	xor    eax,eax
   59d5a:	nop    WORD PTR [rax+rax*1+0x0]
   59d60:	mov    rcx,QWORD PTR [rdi+rax*8]
   59d64:	add    rsi,0x40
   59d68:	movzx  r10d,WORD PTR [rdx+rax*2+0x3138]
   59d71:	add    rax,0x1
   59d75:	movzx  ecx,WORD PTR [rcx+rbx*1]
   59d79:	sub    ecx,r10d
   59d7c:	mov    DWORD PTR [rsi-0x40],ecx
   59d7f:	cmp    rax,0x10
   59d83:	jne    59d60 <encode_one_macroblock+0x3000>
   59d85:	add    r8,0x4
   59d89:	add    rbx,0x2
   59d8d:	add    rdx,0x20
   59d91:	cmp    r9,r8
   59d94:	jne    59d55 <encode_one_macroblock+0x2ff5>
   59d96:	mov    DWORD PTR [rip+0x88980],0xd        # e2720 <best_mode>
   59da0:	mov    rax,QWORD PTR [rsp+0x8]
   59da5:	mov    ebx,DWORD PTR [rax+0x23c]
   59dab:	jmp    5752c <encode_one_macroblock+0x7cc>
   59db0:	mov    rdi,QWORD PTR [rip+0x2f381]        # 89138 <cs_mb>
   59db7:	mov    DWORD PTR [rip+0x87f7f],0x7fffffff        # e1d40 <cost8_8x8ts>
   59dc1:	call   5d450 <store_coding_state>
   59dc6:	mov    rax,QWORD PTR [rsp+0x8]
   59dcb:	mov    DWORD PTR [rax+0x238],0xffffffff
   59dd5:	xor    eax,eax
   59dd7:	cmp    DWORD PTR [rsp+0x14],0x1
   59ddc:	setne  al
   59ddf:	mov    QWORD PTR [rsp+0x180],rax
   59de7:	mov    rax,QWORD PTR [rip+0x2e7ca]        # 885b8 <input>
   59dee:	mov    r13d,DWORD PTR [rax+0xc94]
   59df5:	test   r13d,r13d
   59df8:	jne    5b1e9 <encode_one_macroblock+0x4489>
   59dfe:	lea    rax,[rip+0x8521b]        # df020 <best8x8bwref>
   59e05:	mov    DWORD PTR [rip+0x854b1],0x0        # df2c0 <cnt_nonz_8x8>
   59e0f:	mov    QWORD PTR [rsp+0xa8],rax
   59e17:	lea    rax,[rip+0x88f82]        # e2da0 <best8x8fwref>
   59e1e:	mov    QWORD PTR [rsp+0x98],rax
   59e26:	lea    rax,[rip+0x881b3]        # e1fe0 <best8x8pdir>
   59e2d:	mov    QWORD PTR [rsp+0x90],rax
   59e35:	mov    rax,QWORD PTR [rsp+0x8]
   59e3a:	mov    DWORD PTR [rip+0x891dc],0x0        # e3020 <cbp_blk8x8>
   59e44:	add    rax,0x14c
   59e4a:	mov    DWORD PTR [rsp+0x6c],0x0
   59e52:	mov    QWORD PTR [rsp+0x158],rax
   59e5a:	lea    rax,[rip+0x878af]        # e1710 <best8x8mode>
   59e61:	mov    DWORD PTR [rip+0x85c35],0x0        # dfaa0 <cbp8x8>
   59e6b:	mov    QWORD PTR [rsp+0x80],rax
   59e73:	mov    DWORD PTR [rsp+0x70],0x0
   59e7b:	mov    QWORD PTR [rsp+0x120],0x0
   59e87:	mov    rbx,QWORD PTR [rsp+0x120]
   59e8f:	mov    rsi,QWORD PTR [rip+0x1894a]        # 727e0 <INIT_MB_TYPE_I+0x120>
   59e96:	mov    DWORD PTR [rsp+0x78],0x7fffffff
   59e9e:	mov    eax,ebx
   59ea0:	mov    QWORD PTR [rsp+0x1c0],rsi
   59ea8:	lea    rsi,[rbx*4+0x0]
   59eb0:	sar    eax,1
   59eb2:	mov    QWORD PTR [rsp+0x148],rsi
   59eba:	lea    edi,[rax*8+0x0]
   59ec1:	mov    DWORD PTR [rsp+0x138],eax
   59ec8:	mov    eax,ebx
   59eca:	and    eax,0x1
   59ecd:	mov    esi,edi
   59ecf:	mov    DWORD PTR [rsp+0x100],edi
   59ed6:	lea    edx,[rax*8+0x0]
   59edd:	mov    DWORD PTR [rsp+0x140],eax
   59ee4:	add    eax,eax
   59ee6:	mov    DWORD PTR [rsp+0xf0],eax
   59eed:	add    eax,edi
   59eef:	mov    edi,eax
   59ef1:	mov    DWORD PTR [rsp+0x19c],eax
   59ef8:	mov    eax,0x33
   59efd:	mov    ecx,edi
   59eff:	mov    DWORD PTR [rsp+0x20],ebx
   59f03:	lea    rdi,[rip+0x88176]        # e2080 <rec_mbY8x8>
   59f0a:	shl    eax,cl
   59f0c:	mov    DWORD PTR [rsp+0x108],edx
   59f13:	not    eax
   59f15:	mov    DWORD PTR [rsp+0x198],eax
   59f1c:	lea    rax,[rbx*8+0x0]
   59f24:	movsxd rbx,esi
   59f27:	mov    QWORD PTR [rsp+0x150],rax
   59f2f:	mov    rax,QWORD PTR [rsp+0x180]
   59f37:	mov    QWORD PTR [rsp+0x128],rbx
   59f3f:	mov    QWORD PTR [rsp+0x38],rax
   59f44:	mov    rax,rbx
   59f47:	shl    rax,0x5
   59f4b:	add    rdi,rax
   59f4e:	mov    QWORD PTR [rsp+0xb0],rdi
   59f56:	lea    rdi,[rbx+rbx*1]
   59f5a:	mov    QWORD PTR [rsp+0x168],rdi
   59f62:	lea    rdi,[rip+0x855b7]        # df520 <mpr8x8>
   59f69:	add    rdi,rax
   59f6c:	mov    QWORD PTR [rsp+0x130],rdi
   59f74:	lea    rdi,[rip+0x88205]        # e2180 <rec_mbY8x8+0x100>
   59f7b:	add    rax,rdi
   59f7e:	movsxd rdi,edx
   59f81:	mov    QWORD PTR [rsp+0x160],rax
   59f89:	mov    rax,rbx
   59f8c:	mov    QWORD PTR [rsp+0xc0],rdi
   59f94:	shl    rdi,0x4
   59f98:	add    rax,rdi
   59f9b:	mov    QWORD PTR [rsp+0x188],rdi
   59fa3:	shl    rax,0x2
   59fa7:	mov    QWORD PTR [rsp+0x190],rax
   59faf:	mov    rbx,QWORD PTR [rsp+0x38]
   59fb4:	lea    rax,[rip+0x1d6a5]        # 77660 <b8_mode_table.7699>
   59fbb:	movsxd r13,DWORD PTR [rax+rbx*4]
   59fbf:	mov    ebx,DWORD PTR [rsp+r13*4+0x1d0]
   59fc7:	mov    rbp,r13
   59fca:	test   ebx,ebx
   59fcc:	je     5a150 <encode_one_macroblock+0x33f0>
   59fd2:	mov    QWORD PTR [rsp+0x1c8],0x0
   59fde:	test   r13d,r13d
   59fe1:	jne    5abd0 <encode_one_macroblock+0x3e70>
   59fe7:	mov    rax,QWORD PTR [rip+0x2e5ca]        # 885b8 <input>
   59fee:	mov    r11d,DWORD PTR [rax+0x9a0]
   59ff5:	test   r11d,r11d
   59ff8:	je     5a679 <encode_one_macroblock+0x3919>
   59ffe:	mov    rsi,QWORD PTR [rip+0x2e5ab]        # 885b0 <img>
   5a005:	mov    rcx,QWORD PTR [rip+0x4508c]        # 9f098 <direct_ref_idx>
   5a00c:	mov    eax,DWORD PTR [rsp+0x20]
   5a010:	mov    edx,DWORD PTR [rsp+0xf0]
   5a017:	add    edx,DWORD PTR [rsi+0x90]
   5a01d:	and    eax,0x2
   5a020:	add    eax,DWORD PTR [rsi+0x94]
   5a026:	mov    rsi,QWORD PTR [rcx]
   5a029:	movsxd rdx,edx
   5a02c:	mov    rcx,QWORD PTR [rcx+0x8]
   5a030:	cdqe   
   5a032:	mov    rsi,QWORD PTR [rsi+rdx*8]
   5a036:	mov    rcx,QWORD PTR [rcx+rdx*8]
   5a03a:	movzx  ebx,WORD PTR [rsi+rax*2]
   5a03e:	mov    WORD PTR [rsp+0x48],bx
   5a043:	movzx  ebx,WORD PTR [rcx+rax*2]
   5a047:	mov    rcx,QWORD PTR [rip+0x5be2a]        # b5e78 <direct_pdir>
   5a04e:	mov    WORD PTR [rsp+0x40],bx
   5a053:	mov    rdx,QWORD PTR [rcx+rdx*8]
   5a057:	movzx  ebx,WORD PTR [rdx+rax*2]
   5a05b:	mov    rdi,QWORD PTR [rip+0x2f0c6]        # 89128 <cs_cm>
   5a062:	call   5d450 <store_coding_state>
   5a067:	mov    rax,QWORD PTR [rip+0x2e54a]        # 885b8 <input>
   5a06e:	mov    esi,DWORD PTR [rax+0x9a0]
   5a074:	test   esi,esi
   5a076:	jne    5a355 <encode_one_macroblock+0x35f5>
   5a07c:	mov    edx,DWORD PTR [rsp+0x1a8]
   5a083:	cmp    edx,0x7fffffff
   5a089:	je     5a144 <encode_one_macroblock+0x33e4>
   5a08f:	xor    eax,eax
   5a091:	test   bx,bx
   5a094:	mov    rdi,QWORD PTR [rsp+0x50]
   5a099:	setg   al
   5a09c:	add    eax,DWORD PTR [rsp+0xa4]
   5a0a3:	cdqe   
   5a0a5:	cmp    DWORD PTR [rdi+rax*4],0x1
   5a0a9:	jg     5a6bf <encode_one_macroblock+0x395f>
   5a0af:	sub    edx,0x1
   5a0b2:	mov    DWORD PTR [rsp+0x1a8],edx
   5a0b9:	mov    eax,DWORD PTR [rsp+0x1a8]
   5a0c0:	cmp    DWORD PTR [rsp+0x78],eax
   5a0c4:	jle    5a144 <encode_one_macroblock+0x33e4>
   5a0c6:	mov    rdi,QWORD PTR [rsp+0x80]
   5a0ce:	mov    rdx,QWORD PTR [rip+0x2e4db]        # 885b0 <img>
   5a0d5:	movsd  xmm6,QWORD PTR [rsp+0x88]
   5a0de:	mov    WORD PTR [rdi],bp
   5a0e1:	mov    rdi,QWORD PTR [rsp+0x90]
   5a0e9:	movsd  QWORD PTR [rsp+0x1c0],xmm6
   5a0f2:	mov    WORD PTR [rdi+0x40],bx
   5a0f6:	mov    rbx,QWORD PTR [rsp+0x98]
   5a0fe:	movzx  edi,WORD PTR [rsp+0x48]
   5a103:	mov    WORD PTR [rbx+0x40],di
   5a107:	mov    rbx,QWORD PTR [rsp+0xa8]
   5a10f:	movzx  edi,WORD PTR [rsp+0x40]
   5a114:	mov    WORD PTR [rbx+0x40],di
   5a118:	mov    ebx,DWORD PTR [rsp+0x1a4]
   5a11f:	mov    DWORD PTR [rsp+0xa0],ebx
   5a126:	mov    ebx,DWORD PTR [rdx+0x11c14]
   5a12c:	test   ebx,ebx
   5a12e:	jne    5c471 <encode_one_macroblock+0x5711>
   5a134:	mov    DWORD PTR [rsp+0x78],eax
   5a138:	mov    rdi,QWORD PTR [rip+0x2eff1]        # 89130 <cs_b8>
   5a13f:	call   5d450 <store_coding_state>
   5a144:	mov    rdi,QWORD PTR [rip+0x2efdd]        # 89128 <cs_cm>
   5a14b:	call   5d750 <reset_coding_state>
   5a150:	add    QWORD PTR [rsp+0x38],0x1
   5a156:	mov    rax,QWORD PTR [rsp+0x38]
   5a15b:	cmp    eax,0x4
   5a15e:	jle    59faf <encode_one_macroblock+0x324f>
   5a164:	mov    rax,QWORD PTR [rip+0x2e44d]        # 885b8 <input>
   5a16b:	mov    ebx,DWORD PTR [rsp+0x78]
   5a16f:	mov    rdx,QWORD PTR [rip+0x2e43a]        # 885b0 <img>
   5a176:	add    DWORD PTR [rsp+0x70],ebx
   5a17a:	mov    r8d,DWORD PTR [rax+0x9a0]
   5a181:	mov    rax,QWORD PTR [rsp+0x80]
   5a189:	movsx  esi,WORD PTR [rax]
   5a18c:	test   r8d,r8d
   5a18f:	je     5c1b1 <encode_one_macroblock+0x5451>
   5a195:	mov    ebx,DWORD PTR [rsp+0xa0]
   5a19c:	test   ebx,ebx
   5a19e:	je     5a1b8 <encode_one_macroblock+0x3458>
   5a1a0:	movzx  ecx,BYTE PTR [rsp+0x20]
   5a1a5:	mov    eax,0x1
   5a1aa:	add    DWORD PTR [rip+0x85110],ebx        # df2c0 <cnt_nonz_8x8>
   5a1b0:	shl    eax,cl
   5a1b2:	or     DWORD PTR [rip+0x858e8],eax        # dfaa0 <cbp8x8>
   5a1b8:	mov    ebx,DWORD PTR [rsp+0x140]
   5a1bf:	mov    eax,DWORD PTR [rdx+0x90]
   5a1c5:	mov    ecx,DWORD PTR [rdx+0x94]
   5a1cb:	lea    eax,[rax+rbx*2]
   5a1ce:	mov    ebx,DWORD PTR [rsp+0x138]
   5a1d5:	lea    ecx,[rcx+rbx*2]
   5a1d8:	mov    rbx,QWORD PTR [rsp+0xe8]
   5a1e0:	movsxd rcx,ecx
   5a1e3:	lea    rdi,[rcx*4+0x0]
   5a1eb:	lea    r8,[rcx*4+0x8]
   5a1f3:	movsxd rcx,eax
   5a1f6:	add    eax,0x1
   5a1f9:	cdqe   
   5a1fb:	mov    rcx,QWORD PTR [rbx+rcx*8]
   5a1ff:	mov    rax,QWORD PTR [rbx+rax*8]
   5a203:	mov    DWORD PTR [rcx+rdi*1],0x2
   5a20a:	mov    DWORD PTR [rax+rdi*1],0x2
   5a211:	add    rdi,0x4
   5a215:	cmp    r8,rdi
   5a218:	jne    5a203 <encode_one_macroblock+0x34a3>
   5a21a:	mov    rax,QWORD PTR [rsp+0x158]
   5a222:	cmp    QWORD PTR [rsp+0x120],0x3
   5a22b:	mov    DWORD PTR [rax],0x2
   5a231:	mov    DWORD PTR [rax+0x4],0x2
   5a238:	mov    DWORD PTR [rax+0x8],0x2
   5a23f:	mov    DWORD PTR [rax+0xc],0x2
   5a246:	je     5c495 <encode_one_macroblock+0x5735>
   5a24c:	mov    r11d,DWORD PTR [rsp+0x138]
   5a254:	mov    rcx,QWORD PTR [rip+0x3074d]        # 8a9a8 <enc_picture>
   5a25b:	movsxd rax,DWORD PTR [rdx+0x9c]
   5a262:	mov    r9d,DWORD PTR [rsp+0x140]
   5a26a:	shl    r11d,0x3
   5a26e:	mov    rcx,QWORD PTR [rcx+0x1918]
   5a275:	movsxd r10,DWORD PTR [rdx+0x98]
   5a27c:	movsxd r11,r11d
   5a27f:	shl    r9d,0x3
   5a283:	add    rax,r11
   5a286:	shl    r11,0x5
   5a28a:	movsxd r9,r9d
   5a28d:	add    r10,r10
   5a290:	lea    r8,[rcx+rax*8]
   5a294:	lea    rax,[rip+0x87de5]        # e2080 <rec_mbY8x8>
   5a29b:	lea    rcx,[rax+r11*1]
   5a29f:	add    rax,0x100
   5a2a5:	lea    rdi,[r9+0x8]
   5a2a9:	add    r11,rax
   5a2ac:	mov    rbx,QWORD PTR [r8]
   5a2af:	mov    rax,r9
   5a2b2:	add    rbx,r10
   5a2b5:	nop    DWORD PTR [rax]
   5a2b8:	movzx  edx,WORD PTR [rcx+rax*2]
   5a2bc:	mov    WORD PTR [rbx+rax*2],dx
   5a2c0:	add    rax,0x1
   5a2c4:	cmp    rdi,rax
   5a2c7:	jne    5a2b8 <encode_one_macroblock+0x3558>
   5a2c9:	add    rcx,0x20
   5a2cd:	add    r8,0x8
   5a2d1:	cmp    r11,rcx
   5a2d4:	jne    5a2ac <encode_one_macroblock+0x354c>
   5a2d6:	mov    rbx,QWORD PTR [rsp+0x98]
   5a2de:	mov    r15,QWORD PTR [rsp+0x90]
   5a2e6:	mov    r14,QWORD PTR [rsp+0xa8]
   5a2ee:	mov    edi,DWORD PTR [rsp+0x20]
   5a2f2:	movsx  ecx,WORD PTR [rbx+0x40]
   5a2f6:	movsx  edx,WORD PTR [r15+0x40]
   5a2fb:	add    rbx,0x2
   5a2ff:	add    r15,0x2
   5a303:	movsx  r8d,WORD PTR [r14+0x40]
   5a308:	add    r14,0x2
   5a30c:	call   53110 <SetRefAndMotionVectors>
   5a311:	mov    rdi,QWORD PTR [rip+0x2ee18]        # 89130 <cs_b8>
   5a318:	call   5d750 <reset_coding_state>
   5a31d:	mov    QWORD PTR [rsp+0xa8],r14
   5a325:	add    QWORD PTR [rsp+0x120],0x1
   5a32e:	add    QWORD PTR [rsp+0x158],0x10
   5a337:	add    QWORD PTR [rsp+0x80],0x2
   5a340:	mov    QWORD PTR [rsp+0x98],rbx
   5a348:	mov    QWORD PTR [rsp+0x90],r15
   5a350:	jmp    59e87 <encode_one_macroblock+0x3127>
   5a355:	lea    rsi,[rsp+0x1c8]
   5a35d:	lea    rdi,[rsp+0x1a4]
   5a365:	sub    rsp,0x8
   5a369:	mov    ecx,ebp
   5a36b:	movsx  eax,WORD PTR [rsp+0x48]
   5a370:	movsx  r8d,bx
   5a374:	push   rax
   5a375:	mov    edx,DWORD PTR [rsp+0x30]
   5a379:	movsx  r9d,WORD PTR [rsp+0x58]
   5a37f:	movsd  xmm0,QWORD PTR [rsp+0x28]
   5a385:	call   50fd0 <RDCost_for_8x8blocks>
   5a38a:	mov    rax,QWORD PTR [rip+0x2e227]        # 885b8 <input>
   5a391:	movsd  QWORD PTR [rsp+0x98],xmm0
   5a39a:	mov    edx,DWORD PTR [rax+0x9a0]
   5a3a0:	pop    rax
   5a3a1:	pop    rcx
   5a3a2:	test   edx,edx
   5a3a4:	je     5a0b9 <encode_one_macroblock+0x3359>
   5a3aa:	movsd  xmm0,QWORD PTR [rsp+0x1c0]
   5a3b3:	comisd xmm0,QWORD PTR [rsp+0x88]
   5a3bc:	jbe    5a144 <encode_one_macroblock+0x33e4>
   5a3c2:	mov    eax,DWORD PTR [rsp+0x1a8]
   5a3c9:	mov    r11,QWORD PTR [rip+0x2e1e0]        # 885b0 <img>
   5a3d0:	xor    esi,esi
   5a3d2:	movsd  xmm7,QWORD PTR [rsp+0x88]
   5a3db:	mov    DWORD PTR [rsp+0x78],eax
   5a3df:	mov    rax,QWORD PTR [rsp+0x80]
   5a3e7:	movsd  QWORD PTR [rsp+0x1c0],xmm7
   5a3f0:	mov    WORD PTR [rax],bp
   5a3f3:	mov    rax,QWORD PTR [rsp+0x90]
   5a3fb:	mov    WORD PTR [rax+0x40],bx
   5a3ff:	mov    rax,QWORD PTR [rsp+0x98]
   5a407:	movzx  ebx,WORD PTR [rsp+0x48]
   5a40c:	mov    WORD PTR [rax+0x40],bx
   5a410:	mov    rax,QWORD PTR [rsp+0xa8]
   5a418:	movzx  ebx,WORD PTR [rsp+0x40]
   5a41d:	mov    WORD PTR [rax+0x40],bx
   5a421:	mov    eax,DWORD PTR [rsp+0x1a4]
   5a428:	mov    rbx,QWORD PTR [rsp+0x150]
   5a430:	mov    DWORD PTR [rsp+0xa0],eax
   5a437:	mov    eax,DWORD PTR [rsp+0x198]
   5a43e:	and    eax,DWORD PTR [rip+0x88bdc]        # e3020 <cbp_blk8x8>
   5a444:	or     eax,DWORD PTR [rsp+0x1c8]
   5a44b:	mov    DWORD PTR [rip+0x88bcf],eax        # e3020 <cbp_blk8x8>
   5a451:	mov    rax,QWORD PTR [r11+0x3738]
   5a458:	mov    r10,QWORD PTR [rax+rbx*1]
   5a45c:	mov    rax,QWORD PTR [rip+0x2ecf5]        # 89158 <cofAC8x8>
   5a463:	mov    r9,QWORD PTR [rax+rbx*1]
   5a467:	mov    rdi,QWORD PTR [r10+rsi*1]
   5a46b:	mov    r8,QWORD PTR [r9+rsi*1]
   5a46f:	xor    eax,eax
   5a471:	mov    rcx,QWORD PTR [rdi]
   5a474:	mov    rdx,QWORD PTR [r8]
   5a477:	nop    WORD PTR [rax+rax*1+0x0]
   5a480:	mov    ebx,DWORD PTR [rcx+rax*1]
   5a483:	mov    DWORD PTR [rdx+rax*1],ebx
   5a486:	add    rax,0x4
   5a48a:	cmp    rax,0x104
   5a490:	jne    5a480 <encode_one_macroblock+0x3720>
   5a492:	mov    rdi,QWORD PTR [rdi+0x8]
   5a496:	mov    rcx,QWORD PTR [r8+0x8]
   5a49a:	xor    eax,eax
   5a49c:	nop    DWORD PTR [rax+0x0]
   5a4a0:	mov    edx,DWORD PTR [rdi+rax*1]
   5a4a3:	mov    DWORD PTR [rcx+rax*1],edx
   5a4a6:	add    rax,0x4
   5a4aa:	cmp    rax,0x104
   5a4b0:	jne    5a4a0 <encode_one_macroblock+0x3740>
   5a4b2:	add    rsi,0x8
   5a4b6:	cmp    rsi,0x20
   5a4ba:	jne    5a467 <encode_one_macroblock+0x3707>
   5a4bc:	mov    eax,DWORD PTR [rsp+0x100]
   5a4c3:	mov    rdx,QWORD PTR [rip+0x304de]        # 8a9a8 <enc_picture>
   5a4ca:	movsxd rbp,DWORD PTR [r11+0x98]
   5a4d1:	mov    rdi,QWORD PTR [rsp+0x130]
   5a4d9:	add    eax,0x7
   5a4dc:	mov    rdx,QWORD PTR [rdx+0x1918]
   5a4e3:	mov    rsi,QWORD PTR [rsp+0xb0]
   5a4eb:	mov    DWORD PTR [rsp+0x17c],eax
   5a4f2:	mov    eax,DWORD PTR [rsp+0x108]
   5a4f9:	add    rbp,rbp
   5a4fc:	lea    ecx,[rax+0x7]
   5a4ff:	movsxd rax,DWORD PTR [r11+0x9c]
   5a506:	add    rax,QWORD PTR [rsp+0x128]
   5a50e:	lea    rbx,[rdx+rax*8]
   5a512:	mov    rax,QWORD PTR [rsp+0x168]
   5a51a:	lea    r8,[r11+rax*1]
   5a51e:	mov    rax,QWORD PTR [rsp+0xc0]
   5a526:	lea    r9,[rax+0x8]
   5a52a:	mov    r10,QWORD PTR [rbx]
   5a52d:	mov    rax,QWORD PTR [rsp+0xc0]
   5a535:	add    r10,rbp
   5a538:	nop    DWORD PTR [rax+rax*1+0x0]
   5a540:	movzx  edx,WORD PTR [r10+rax*2]
   5a545:	mov    WORD PTR [rsi+rax*2],dx
   5a549:	mov    rdx,rax
   5a54c:	shl    rdx,0x5
   5a550:	movzx  edx,WORD PTR [r8+rdx*1+0x3138]
   5a559:	mov    WORD PTR [rdi+rax*2],dx
   5a55d:	add    rax,0x1
   5a561:	cmp    r9,rax
   5a564:	jne    5a540 <encode_one_macroblock+0x37e0>
   5a566:	add    rbx,0x8
   5a56a:	add    rsi,0x20
   5a56e:	add    r8,0x2
   5a572:	add    rdi,0x20
   5a576:	cmp    QWORD PTR [rsp+0x160],rsi
   5a57e:	jne    5a52a <encode_one_macroblock+0x37ca>
   5a580:	mov    eax,DWORD PTR [r11+0x11c14]
   5a587:	test   eax,eax
   5a589:	je     5a138 <encode_one_macroblock+0x33d8>
   5a58f:	mov    rax,QWORD PTR [rsp+0x190]
   5a597:	lea    r12,[rip+0x5c222]        # b67c0 <mprRGB>
   5a59e:	lea    r8,[rip+0x8613b]        # e06e0 <mprRGB_8x8>
   5a5a5:	lea    rbp,[r12+0x400]
   5a5ad:	lea    rdi,[r8+0x400]
   5a5b4:	mov    QWORD PTR [rsp+0x170],rax
   5a5bc:	mov    eax,DWORD PTR [rsp+0x100]
   5a5c3:	lea    r14,[rip+0x58516]        # b2ae0 <resTrans_R>
   5a5ca:	lea    r13,[rip+0x4638f]        # a0960 <resTrans_B>
   5a5d1:	lea    rbx,[rbp+0x400]
   5a5d8:	lea    r11,[rip+0x84641]        # dec20 <rec_resG_8x8>
   5a5df:	mov    DWORD PTR [rsp+0x110],eax
   5a5e6:	lea    r10,[rip+0x86d13]        # e1300 <resTrans_R_8x8>
   5a5ed:	lea    r9,[rip+0x87d2c]        # e2320 <resTrans_B_8x8>
   5a5f4:	lea    rsi,[rdi+0x400]
   5a5fb:	mov    rax,QWORD PTR [rsp+0x170]
   5a603:	mov    edx,DWORD PTR [rsp+0x108]
   5a60a:	mov    r15d,ecx
   5a60d:	nop    DWORD PTR [rax]
   5a610:	lea    rcx,[rip+0x5b889]        # b5ea0 <rec_resG>
   5a617:	add    edx,0x1
   5a61a:	mov    ecx,DWORD PTR [rcx+rax*1]
   5a61d:	mov    DWORD PTR [r11+rax*1],ecx
   5a621:	mov    ecx,DWORD PTR [r14+rax*1]
   5a625:	mov    DWORD PTR [r10+rax*1],ecx
   5a629:	mov    ecx,DWORD PTR [r13+rax*1+0x0]
   5a62e:	mov    DWORD PTR [r9+rax*1],ecx
   5a632:	mov    ecx,DWORD PTR [r12+rax*1]
   5a636:	mov    DWORD PTR [r8+rax*1],ecx
   5a63a:	mov    ecx,DWORD PTR [rbp+rax*1+0x0]
   5a63e:	mov    DWORD PTR [rdi+rax*1],ecx
   5a641:	mov    ecx,DWORD PTR [rbx+rax*1]
   5a644:	mov    DWORD PTR [rsi+rax*1],ecx
   5a647:	add    rax,0x40
   5a64b:	cmp    edx,r15d
   5a64e:	jle    5a610 <encode_one_macroblock+0x38b0>
   5a650:	add    DWORD PTR [rsp+0x110],0x1
   5a658:	mov    ecx,r15d
   5a65b:	mov    eax,DWORD PTR [rsp+0x110]
   5a662:	add    QWORD PTR [rsp+0x170],0x4
   5a66b:	cmp    eax,DWORD PTR [rsp+0x17c]
   5a672:	jle    5a5fb <encode_one_macroblock+0x389b>
   5a674:	jmp    5a138 <encode_one_macroblock+0x33d8>
   5a679:	mov    edi,DWORD PTR [rsp+0x20]
   5a67d:	lea    rsi,[rsp+0x1b0]
   5a685:	call   44b10 <Get_Direct_Cost8x8>
   5a68a:	mov    ebx,DWORD PTR [rsp+0x6c]
   5a68e:	mov    DWORD PTR [rsp+0x1a8],eax
   5a695:	cmp    ebx,0x7fffffff
   5a69b:	je     5ae99 <encode_one_macroblock+0x4139>
   5a6a1:	cmp    eax,0x7fffffff
   5a6a6:	je     5ae99 <encode_one_macroblock+0x4139>
   5a6ac:	add    ebx,eax
   5a6ae:	mov    DWORD PTR [rsp+0x6c],ebx
   5a6b2:	add    DWORD PTR [rsp+0xd8],0x1
   5a6ba:	jmp    59ffe <encode_one_macroblock+0x329e>
   5a6bf:	mov    edi,ebp
   5a6c1:	movsx  esi,bx
   5a6c4:	mov    r12,QWORD PTR [rip+0x5cdbd]        # b7488 <refbits>
   5a6cb:	call   2c0b0 <B8Mode2Value>
   5a6d0:	mov    edi,DWORD PTR [rsp+0x30]
   5a6d4:	mov    rdx,QWORD PTR [rip+0x2dedd]        # 885b8 <input>
   5a6db:	cdqe   
   5a6dd:	imul   edi,DWORD PTR [r12+rax*4]
   5a6e2:	mov    edx,DWORD PTR [rdx+0x9a0]
   5a6e8:	mov    eax,edi
   5a6ea:	sar    eax,0x10
   5a6ed:	sub    eax,0x1
   5a6f0:	add    DWORD PTR [rsp+0x1a8],eax
   5a6f7:	jmp    5a3a2 <encode_one_macroblock+0x3642>
   5a6fc:	mov    ebp,DWORD PTR [rsp+0x20]
   5a700:	mov    r13d,DWORD PTR [rsp+0x38]
   5a705:	jmp    588d2 <encode_one_macroblock+0x1b72>
   5a70a:	mov    rdi,QWORD PTR [rip+0x2de9f]        # 885b0 <img>
   5a711:	mov    r11d,DWORD PTR [rdi+0x11c14]
   5a718:	test   r11d,r11d
   5a71b:	jne    5c6f3 <encode_one_macroblock+0x5993>
   5a721:	mov    rax,QWORD PTR [rsp+0x8]
   5a726:	movsxd r8,DWORD PTR [rdi+0x98]
   5a72d:	lea    r10,[rip+0x8386c]        # ddfa0 <diffy>
   5a734:	movsxd rdx,DWORD PTR [rdi+0x9c]
   5a73b:	lea    r11,[r10+0x40]
   5a73f:	mov    DWORD PTR [rax+0x1cc],r13d
   5a746:	mov    rax,QWORD PTR [rip+0x5cc7b]        # b73c8 <imgY_org>
   5a74d:	add    r8,r8
   5a750:	lea    r9,[rax+rdx*8]
   5a754:	mov    rcx,r10
   5a757:	xor    eax,eax
   5a759:	nop    DWORD PTR [rax+0x0]
   5a760:	mov    rdx,QWORD PTR [r9+rax*8]
   5a764:	movzx  esi,WORD PTR [rdi+rax*2+0x3138]
   5a76c:	add    rax,0x1
   5a770:	add    rcx,0x40
   5a774:	movzx  edx,WORD PTR [rdx+r8*1]
   5a779:	sub    edx,esi
   5a77b:	mov    DWORD PTR [rcx-0x40],edx
   5a77e:	cmp    rax,0x10
   5a782:	jne    5a760 <encode_one_macroblock+0x3a00>
   5a784:	add    r10,0x4
   5a788:	add    r8,0x2
   5a78c:	add    rdi,0x20
   5a790:	cmp    r11,r10
   5a793:	jne    5a754 <encode_one_macroblock+0x39f4>
   5a795:	mov    rax,QWORD PTR [rsp+0x8]
   5a79a:	mov    DWORD PTR [rsp+0x58],r12d
   5a79f:	mov    DWORD PTR [rip+0x87f77],0x9        # e2720 <best_mode>
   5a7a9:	mov    ebx,DWORD PTR [rax+0x23c]
   5a7af:	jmp    5753d <encode_one_macroblock+0x7dd>
   5a7b4:	mov    r10d,0x7fffffff
   5a7ba:	jmp    57d11 <encode_one_macroblock+0xfb1>
   5a7bf:	cmp    DWORD PTR [rax+0x18],0x1
   5a7c3:	jne    58d90 <encode_one_macroblock+0x2030>
   5a7c9:	mov    esi,DWORD PTR [rax+0x11b30]
   5a7cf:	test   esi,esi
   5a7d1:	je     58d90 <encode_one_macroblock+0x2030>
   5a7d7:	movsxd rax,DWORD PTR [rax+0x118e4]
   5a7de:	mov    rcx,QWORD PTR [rip+0x448c3]        # 9f0a8 <gop_structure>
   5a7e5:	pxor   xmm1,xmm1
   5a7e9:	movsd  xmm2,QWORD PTR [rip+0x1ccc7]        # 774b8 <THETA+0x18>
   5a7f1:	lea    rax,[rax+rax*2]
   5a7f5:	lea    rax,[rcx+rax*8]
   5a7f9:	cvtsi2sd xmm1,DWORD PTR [rax-0x8]
   5a7fe:	mulsd  xmm1,QWORD PTR [rip+0x1ccd2]        # 774d8 <THETA+0x38>
   5a806:	comisd xmm1,QWORD PTR [rip+0x1cec2]        # 776d0 <b8_mode_table.7699+0x70>
   5a80e:	ja     5a818 <encode_one_macroblock+0x3ab8>
   5a810:	subsd  xmm3,xmm1
   5a814:	movapd xmm2,xmm3
   5a818:	mulsd  xmm0,xmm2
   5a81c:	jmp    58d90 <encode_one_macroblock+0x2030>
   5a821:	mov    r9,QWORD PTR [rip+0x2dd88]        # 885b0 <img>
   5a828:	mov    r13,QWORD PTR [rip+0x5cb99]        # b73c8 <imgY_org>
   5a82f:	lea    r8,[rip+0x83b6a]        # de3a0 <AWb>
   5a836:	movsxd rax,DWORD PTR [rsp+0x1ac]
   5a83e:	lea    rbp,[r8+0x40]
   5a842:	movsxd r12,DWORD PTR [r9+0x9c]
   5a849:	movsxd rdx,DWORD PTR [r9+0x98]
   5a850:	mov    DWORD PTR [rsp+0x20],eax
   5a854:	shl    rax,0x9
   5a858:	shl    r12,0x3
   5a85c:	lea    rbx,[rdx+rdx*1]
   5a860:	lea    r15,[r9+rax*1]
   5a864:	add    r13,r12
   5a867:	mov    QWORD PTR [rsp+0x38],rbx
   5a86c:	sub    rbx,rax
   5a86f:	mov    r11,r15
   5a872:	mov    QWORD PTR [rsp+0x70],r13
   5a877:	sub    rbx,r9
   5a87a:	lea    r10,[rbx+r11*1]
   5a87e:	lea    rax,[r8-0x400]
   5a885:	mov    rsi,r11
   5a888:	mov    rcx,r13
   5a88b:	nop    DWORD PTR [rax+rax*1+0x0]
   5a890:	mov    rdx,QWORD PTR [rcx]
   5a893:	add    rax,0x40
   5a897:	add    rcx,0x8
   5a89b:	add    rsi,0x20
   5a89f:	movzx  edi,WORD PTR [rsi+0x1298]
   5a8a6:	movzx  edx,WORD PTR [rdx+r10*1]
   5a8ab:	sub    edx,edi
   5a8ad:	mov    DWORD PTR [rax-0x40],edx
   5a8b0:	cmp    r8,rax
   5a8b3:	jne    5a890 <encode_one_macroblock+0x3b30>
   5a8b5:	add    r8,0x4
   5a8b9:	add    r11,0x2
   5a8bd:	cmp    rbp,r8
   5a8c0:	jne    5a87a <encode_one_macroblock+0x3b1a>
   5a8c2:	mov    edi,DWORD PTR [r9+0x11c14]
   5a8c9:	test   edi,edi
   5a8cb:	jne    5c5f3 <encode_one_macroblock+0x5893>
   5a8d1:	mov    DWORD PTR [rip+0x87e45],0xa        # e2720 <best_mode>
   5a8db:	mov    edi,DWORD PTR [rsp+0x20]
   5a8df:	call   69f0 <dct_luma_16x16>
   5a8e4:	mov    rdx,QWORD PTR [rip+0x2dcc5]        # 885b0 <img>
   5a8eb:	mov    rbx,QWORD PTR [rsp+0x8]
   5a8f0:	mov    esi,DWORD PTR [rdx+0x11c14]
   5a8f6:	mov    DWORD PTR [rbx+0x1cc],eax
   5a8fc:	test   esi,esi
   5a8fe:	je     5758f <encode_one_macroblock+0x82f>
   5a904:	mov    esi,0x400
   5a909:	lea    r11,[rip+0x581d0]        # b2ae0 <resTrans_R>
   5a910:	lea    rax,[rsi-0x400]
   5a917:	nop    WORD PTR [rax+rax*1+0x0]
   5a920:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   5a927:	lea    rbx,[rip+0x5b572]        # b5ea0 <rec_resG>
   5a92e:	mov    DWORD PTR [rbx+rax*1],ecx
   5a931:	mov    ecx,DWORD PTR [r11+rax*1]
   5a935:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   5a93c:	add    rax,0x40
   5a940:	cmp    rsi,rax
   5a943:	jne    5a920 <encode_one_macroblock+0x3bc0>
   5a945:	add    rsi,0x4
   5a949:	cmp    rsi,0x440
   5a950:	jne    5a910 <encode_one_macroblock+0x3bb0>
   5a952:	xor    esi,esi
   5a954:	xor    edi,edi
   5a956:	call   7ea0 <dct_chroma>
   5a95b:	mov    rdx,QWORD PTR [rip+0x2dc4e]        # 885b0 <img>
   5a962:	mov    esi,0x400
   5a967:	lea    r10,[rip+0x45ff2]        # a0960 <resTrans_B>
   5a96e:	mov    r8d,eax
   5a971:	lea    rax,[rsi-0x400]
   5a978:	nop    DWORD PTR [rax+rax*1+0x0]
   5a980:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   5a987:	lea    rbx,[rip+0x59392]        # b3d20 <rec_resR>
   5a98e:	mov    DWORD PTR [rbx+rax*1],ecx
   5a991:	mov    ecx,DWORD PTR [r10+rax*1]
   5a995:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   5a99c:	add    rax,0x40
   5a9a0:	cmp    rsi,rax
   5a9a3:	jne    5a980 <encode_one_macroblock+0x3c20>
   5a9a5:	add    rsi,0x4
   5a9a9:	cmp    rsi,0x440
   5a9b0:	jne    5a971 <encode_one_macroblock+0x3c11>
   5a9b2:	mov    esi,r8d
   5a9b5:	mov    edi,0x1
   5a9ba:	call   7ea0 <dct_chroma>
   5a9bf:	lea    r8,[rip+0x45bba]        # a0580 <rec_resB+0x40>
   5a9c6:	mov    DWORD PTR [rsp+0x68],eax
   5a9ca:	mov    rax,QWORD PTR [rip+0x2dbdf]        # 885b0 <img>
   5a9d1:	lea    rsi,[r8-0x40]
   5a9d5:	mov    rdi,rax
   5a9d8:	xor    edx,edx
   5a9da:	nop    WORD PTR [rax+rax*1+0x0]
   5a9e0:	mov    ecx,DWORD PTR [rdi+rdx*1+0x3338]
   5a9e7:	mov    DWORD PTR [rsi+rdx*1],ecx
   5a9ea:	add    rdx,0x40
   5a9ee:	cmp    rdx,0x400
   5a9f5:	jne    5a9e0 <encode_one_macroblock+0x3c80>
   5a9f7:	add    rsi,0x4
   5a9fb:	add    rdi,0x4
   5a9ff:	cmp    r8,rsi
   5aa02:	jne    5a9d8 <encode_one_macroblock+0x3c78>
   5aa04:	mov    rbx,QWORD PTR [rsp+0x8]
   5aa09:	mov    edx,DWORD PTR [rsp+0x68]
   5aa0d:	mov    QWORD PTR [rsp+0x70],0x0
   5aa16:	xor    r11d,r11d
   5aa19:	mov    rsi,QWORD PTR [rip+0x2ff88]        # 8a9a8 <enc_picture>
   5aa20:	mov    r8d,DWORD PTR [rax+0x11bf0]
   5aa27:	shl    edx,0x4
   5aa2a:	add    DWORD PTR [rbx+0x1cc],edx
   5aa30:	movsxd rdx,DWORD PTR [rbx+0x20c]
   5aa37:	mov    rcx,QWORD PTR [rsi+0x1940]
   5aa3e:	mov    r14d,DWORD PTR [rax+0x11bec]
   5aa45:	shl    rdx,0x9
   5aa49:	lea    rbx,[rax+rdx*1]
   5aa4d:	movsxd rdx,DWORD PTR [rsp+0x1ac]
   5aa55:	mov    QWORD PTR [rsp+0x78],rbx
   5aa5a:	mov    rbx,QWORD PTR [rcx]
   5aa5d:	shl    rdx,0x9
   5aa61:	lea    r13,[rax+rdx*1]
   5aa65:	movsxd rdx,DWORD PTR [rax+0x9c]
   5aa6c:	movsxd rax,DWORD PTR [rax+0x98]
   5aa73:	shl    rdx,0x3
   5aa77:	add    rax,rax
   5aa7a:	add    rbx,rdx
   5aa7d:	mov    QWORD PTR [rsp+0xa8],rax
   5aa85:	mov    QWORD PTR [rsp+0x98],rbx
   5aa8d:	mov    rbx,QWORD PTR [rsi+0x1918]
   5aa94:	add    rbx,rdx
   5aa97:	add    rdx,QWORD PTR [rcx+0x8]
   5aa9b:	mov    QWORD PTR [rsp+0x90],rbx
   5aaa3:	mov    QWORD PTR [rsp+0x80],rdx
   5aaab:	mov    rax,QWORD PTR [rsp+0x70]
   5aab0:	lea    rbx,[rip+0x5b3e9]        # b5ea0 <rec_resG>
   5aab7:	xor    edx,edx
   5aab9:	mov    rcx,QWORD PTR [rsp+0x98]
   5aac1:	mov    rdi,QWORD PTR [rsp+0xa8]
   5aac9:	lea    rbp,[rip+0x45a70]        # a0540 <rec_resB>
   5aad0:	mov    r9,QWORD PTR [rsp+0x78]
   5aad5:	mov    rsi,QWORD PTR [rcx+rax*2]
   5aad9:	mov    rcx,QWORD PTR [rsp+0x90]
   5aae1:	lea    r12,[rbx+rax*1]
   5aae5:	add    rbp,rax
   5aae8:	lea    rbx,[rip+0x59231]        # b3d20 <rec_resR>
   5aaef:	add    rsi,rdi
   5aaf2:	add    rbx,rax
   5aaf5:	mov    r15,rsi
   5aaf8:	mov    rsi,QWORD PTR [rcx+rax*2]
   5aafc:	add    rsi,rdi
   5aaff:	mov    QWORD PTR [rsp+0x38],rsi
   5ab04:	mov    rsi,QWORD PTR [rsp+0x80]
   5ab0c:	add    rdi,QWORD PTR [rsi+rax*2]
   5ab10:	mov    QWORD PTR [rsp+0x20],rdi
   5ab15:	nop    DWORD PTR [rax]
   5ab18:	mov    esi,DWORD PTR [rbp+0x0]
   5ab1b:	mov    ecx,DWORD PTR [rbx]
   5ab1d:	mov    edi,DWORD PTR [r12]
   5ab21:	mov    eax,esi
   5ab23:	sar    eax,1
   5ab25:	sub    edi,eax
   5ab27:	mov    eax,ecx
   5ab29:	sar    eax,1
   5ab2b:	mov    r10d,edi
   5ab2e:	sub    r10d,eax
   5ab31:	movzx  eax,WORD PTR [r9+0x2138]
   5ab39:	add    eax,r10d
   5ab3c:	cmovs  eax,r11d
   5ab40:	cmp    eax,r8d
   5ab43:	cmovg  eax,r8d
   5ab47:	add    esi,edi
   5ab49:	mov    rdi,QWORD PTR [rsp+0x20]
   5ab4e:	mov    WORD PTR [r15+rdx*1],ax
   5ab53:	movzx  eax,WORD PTR [r13+rdx*1+0x12b8]
   5ab5c:	add    esi,eax
   5ab5e:	mov    rax,QWORD PTR [rsp+0x38]
   5ab63:	cmovs  esi,r11d
   5ab67:	cmp    esi,r14d
   5ab6a:	cmovg  esi,r14d
   5ab6e:	add    ecx,r10d
   5ab71:	mov    WORD PTR [rax+rdx*1],si
   5ab75:	movzx  eax,WORD PTR [r9+0x2938]
   5ab7d:	add    eax,ecx
   5ab7f:	cmovs  eax,r11d
   5ab83:	cmp    eax,r8d
   5ab86:	cmovg  eax,r8d
   5ab8a:	add    r12,0x40
   5ab8e:	add    rbp,0x40
   5ab92:	add    rbx,0x40
   5ab96:	add    r9,0x20
   5ab9a:	mov    WORD PTR [rdi+rdx*1],ax
   5ab9e:	add    rdx,0x2
   5aba2:	cmp    rdx,0x20
   5aba6:	jne    5ab18 <encode_one_macroblock+0x3db8>
   5abac:	add    QWORD PTR [rsp+0x70],0x4
   5abb2:	mov    rax,QWORD PTR [rsp+0x70]
   5abb7:	add    r13,0x20
   5abbb:	add    QWORD PTR [rsp+0x78],0x2
   5abc1:	cmp    rax,0x40
   5abc5:	jne    5aaab <encode_one_macroblock+0x3d4b>
   5abcb:	jmp    5758f <encode_one_macroblock+0x82f>
   5abd0:	movsd  xmm0,QWORD PTR [rsp+0x28]
   5abd6:	mov    esi,DWORD PTR [rsp+0x20]
   5abda:	mov    edi,r13d
   5abdd:	call   44ec0 <PartitionMotionSearch>
   5abe2:	mov    rax,QWORD PTR [rsp+0x50]
   5abe7:	mov    rbx,QWORD PTR [rsp+0x60]
   5abec:	mov    r14d,DWORD PTR [rax+rbx*4]
   5abf0:	test   r14d,r14d
   5abf3:	jle    5cf84 <encode_one_macroblock+0x6224>
   5abf9:	mov    r9,QWORD PTR [rip+0x2d9b8]        # 885b8 <input>
   5ac00:	mov    ecx,r13d
   5ac03:	mov    r15,r13
   5ac06:	xor    edx,edx
   5ac08:	mov    r10,QWORD PTR [rip+0x5c879]        # b7488 <refbits>
   5ac0f:	mov    rax,QWORD PTR [rip+0x5c86a]        # b7480 <motion_cost>
   5ac16:	mov    r12d,0x7fffffff
   5ac1c:	xor    ebx,ebx
   5ac1e:	movzx  r11d,BYTE PTR [rsp+0xcf]
   5ac27:	mov    rbp,r9
   5ac2a:	lea    r8,[rax+r13*8]
   5ac2e:	mov    r13,r10
   5ac31:	xor    r11d,0x1
   5ac35:	jmp    5ac7d <encode_one_macroblock+0x3f1d>
   5ac37:	xor    eax,eax
   5ac39:	cmp    r14d,0x1
   5ac3d:	je     5ac4c <encode_one_macroblock+0x3eec>
   5ac3f:	mov    eax,DWORD PTR [rsp+0x30]
   5ac43:	imul   eax,DWORD PTR [r13+rdx*4+0x0]
   5ac49:	sar    eax,0x10
   5ac4c:	mov    rsi,QWORD PTR [r8]
   5ac4f:	mov    rdi,QWORD PTR [rsp+0x148]
   5ac57:	mov    rsi,QWORD PTR [rsi]
   5ac5a:	mov    rdx,QWORD PTR [rsi+rdx*8]
   5ac5e:	add    eax,DWORD PTR [rdx+rdi*1]
   5ac61:	cmp    eax,r12d
   5ac64:	jge    5ac6e <encode_one_macroblock+0x3f0e>
   5ac66:	mov    WORD PTR [rsp+0x48],bx
   5ac6b:	mov    r12d,eax
   5ac6e:	add    ebx,0x1
   5ac71:	movsx  edx,bx
   5ac74:	cmp    edx,r14d
   5ac77:	jge    5ad8a <encode_one_macroblock+0x402a>
   5ac7d:	test   bx,bx
   5ac80:	je     5acc5 <encode_one_macroblock+0x3f65>
   5ac82:	test   r11b,r11b
   5ac85:	jne    5acc5 <encode_one_macroblock+0x3f65>
   5ac87:	mov    edi,DWORD PTR [rsp+0x20]
   5ac8b:	xor    esi,esi
   5ac8d:	mov    BYTE PTR [rsp+0x17c],r11b
   5ac95:	mov    QWORD PTR [rsp+0x170],r8
   5ac9d:	mov    DWORD PTR [rsp+0x110],ecx
   5aca4:	call   4e9d0 <CheckReliabilityOfRef>
   5aca9:	mov    ecx,DWORD PTR [rsp+0x110]
   5acb0:	mov    r8,QWORD PTR [rsp+0x170]
   5acb8:	movzx  r11d,BYTE PTR [rsp+0x17c]
   5acc1:	test   eax,eax
   5acc3:	je     5ac6e <encode_one_macroblock+0x3f0e>
   5acc5:	mov    r10d,DWORD PTR [rbp+0x9a0]
   5accc:	movsx  rdx,bx
   5acd0:	test   r10d,r10d
   5acd3:	jne    5ac37 <encode_one_macroblock+0x3ed7>
   5acd9:	movsd  xmm6,QWORD PTR [rsp+0x28]
   5acdf:	movapd xmm0,xmm6
   5ace3:	addsd  xmm0,xmm6
   5ace7:	test   bx,bx
   5acea:	jg     5acfb <encode_one_macroblock+0x3f9b>
   5acec:	movsx  eax,bx
   5acef:	pxor   xmm1,xmm1
   5acf3:	cvtsi2sd xmm1,eax
   5acf7:	mulsd  xmm0,xmm1
   5acfb:	cvttsd2si eax,xmm0
   5acff:	jmp    5ac4c <encode_one_macroblock+0x3eec>
   5ad04:	divsd  xmm2,QWORD PTR [rip+0x1c9ac]        # 776b8 <b8_mode_table.7699+0x58>
   5ad0c:	comisd xmm2,QWORD PTR [rip+0xfd64]        # 6aa78 <QP_SCALE_CR+0x38>
   5ad14:	ja     5afde <encode_one_macroblock+0x427e>
   5ad1a:	movsd  xmm1,QWORD PTR [rip+0x1c78e]        # 774b0 <THETA+0x10>
   5ad22:	comisd xmm1,xmm2
   5ad26:	ja     5af52 <encode_one_macroblock+0x41f2>
   5ad2c:	mulsd  xmm0,xmm2
   5ad30:	jmp    58d6b <encode_one_macroblock+0x200b>
   5ad35:	movsd  xmm1,QWORD PTR [rip+0xfd53]        # 6aa90 <QP_SCALE_CR+0x50>
   5ad3d:	divsd  xmm2,QWORD PTR [rip+0x1c95b]        # 776a0 <b8_mode_table.7699+0x40>
   5ad45:	comisd xmm2,xmm1
   5ad49:	ja     5af52 <encode_one_macroblock+0x41f2>
   5ad4f:	movsd  xmm4,QWORD PTR [rip+0xfd29]        # 6aa80 <QP_SCALE_CR+0x40>
   5ad57:	comisd xmm4,xmm2
   5ad5b:	jbe    5ad2c <encode_one_macroblock+0x3fcc>
   5ad5d:	addsd  xmm0,xmm0
   5ad61:	jmp    58d6b <encode_one_macroblock+0x200b>
   5ad66:	movsd  xmm4,QWORD PTR [rsp+0x28]
   5ad6c:	movsx  edx,bp
   5ad6f:	movapd xmm0,xmm4
   5ad73:	addsd  xmm0,xmm4
   5ad77:	test   bp,bp
   5ad7a:	jle    5af41 <encode_one_macroblock+0x41e1>
   5ad80:	cvttsd2si r14d,xmm0
   5ad85:	jmp    59a17 <encode_one_macroblock+0x2cb7>
   5ad8a:	mov    ebp,ecx
   5ad8c:	mov    r13,r15
   5ad8f:	mov    rcx,QWORD PTR [rip+0x2fc12]        # 8a9a8 <enc_picture>
   5ad96:	mov    ebx,DWORD PTR [rsp+0x20]
   5ad9a:	mov    r8d,DWORD PTR [rsp+0xf0]
   5ada2:	mov    r15,QWORD PTR [rsp+0x60]
   5ada7:	mov    rax,QWORD PTR [rcx+0x1950]
   5adae:	mov    rdx,QWORD PTR [rcx+0x1958]
   5adb5:	and    ebx,0x2
   5adb8:	mov    DWORD PTR [rsp+0x110],ebx
   5adbf:	movsx  r9d,WORD PTR [rsp+0x48]
   5adc5:	mov    rdi,QWORD PTR [rax]
   5adc8:	mov    rax,QWORD PTR [rip+0x2d7e1]        # 885b0 <img>
   5adcf:	mov    rsi,QWORD PTR [rdx]
   5add2:	add    ebx,DWORD PTR [rax+0x94]
   5add8:	add    r8d,DWORD PTR [rax+0x90]
   5addf:	movsxd rax,ebx
   5ade2:	lea    rdx,[rax+rax*1]
   5ade6:	lea    r10,[rax+rax*1+0x4]
   5adeb:	movsxd rax,r8d
   5adee:	mov    r11,QWORD PTR [rdi+rax*8]
   5adf2:	mov    rbx,QWORD PTR [rsi+rax*8]
   5adf6:	lea    eax,[r8+0x1]
   5adfa:	movsx  r8,r9w
   5adfe:	cdqe   
   5ae00:	mov    rdi,QWORD PTR [rdi+rax*8]
   5ae04:	mov    rsi,QWORD PTR [rsi+rax*8]
   5ae08:	mov    rax,r15
   5ae0b:	shl    rax,0x5
   5ae0f:	add    rax,r15
   5ae12:	add    rax,r8
   5ae15:	lea    rax,[rcx+rax*8]
   5ae19:	mov    rcx,QWORD PTR [rax+0x18]
   5ae1d:	movzx  r15d,WORD PTR [rsp+0x48]
   5ae23:	mov    WORD PTR [r11+rdx*1],r15w
   5ae28:	mov    QWORD PTR [rbx+rdx*4],rcx
   5ae2c:	mov    rcx,QWORD PTR [rax+0x18]
   5ae30:	mov    WORD PTR [rdi+rdx*1],r15w
   5ae35:	mov    QWORD PTR [rsi+rdx*4],rcx
   5ae39:	add    rdx,0x2
   5ae3d:	cmp    r10,rdx
   5ae40:	jne    5ae19 <encode_one_macroblock+0x40b9>
   5ae42:	cmp    DWORD PTR [rsp+0x14],0x1
   5ae47:	je     5cd38 <encode_one_macroblock+0x5fd8>
   5ae4d:	mov    DWORD PTR [rsp+0x1a8],r12d
   5ae55:	xor    ebx,ebx
   5ae57:	jmp    5a05b <encode_one_macroblock+0x32fb>
   5ae5c:	mov    eax,DWORD PTR [rax+0x11b30]
   5ae62:	test   eax,eax
   5ae64:	je     58d90 <encode_one_macroblock+0x2030>
   5ae6a:	mulsd  xmm0,QWORD PTR [rip+0x1c67e]        # 774f0 <THETA+0x50>
   5ae72:	jmp    58d90 <encode_one_macroblock+0x2030>
   5ae77:	mov    r14d,DWORD PTR [rsp+0x38]
   5ae7c:	mov    r15,QWORD PTR [rsp+0x70]
   5ae81:	jmp    573ac <encode_one_macroblock+0x64c>
   5ae86:	movsd  xmm0,QWORD PTR [rsp+0x18]
   5ae8c:	call   44df0 <Get_Direct_CostMB>
   5ae91:	mov    r10d,eax
   5ae94:	jmp    59557 <encode_one_macroblock+0x27f7>
   5ae99:	mov    DWORD PTR [rsp+0x6c],0x7fffffff
   5aea1:	jmp    5a6b2 <encode_one_macroblock+0x3952>
   5aea6:	mov    rax,QWORD PTR [rip+0x2d70b]        # 885b8 <input>
   5aead:	cmp    DWORD PTR [rax+0xc94],0x2
   5aeb4:	je     59c09 <encode_one_macroblock+0x2ea9>
   5aeba:	mov    DWORD PTR [r12+0x23c],0x0
   5aec6:	jmp    59c09 <encode_one_macroblock+0x2ea9>
   5aecb:	add    edx,r14d
   5aece:	mov    rcx,rax
   5aed1:	mov    DWORD PTR [rsp+0x1a8],edx
   5aed8:	movsx  rdx,bp
   5aedc:	lea    rbx,[rdx*8+0x0]
   5aee4:	mov    QWORD PTR [rsp+0x38],rbx
   5aee9:	test   sil,sil
   5aeec:	jne    5cf71 <encode_one_macroblock+0x6211>
   5aef2:	mov    QWORD PTR [rsp+0x90],0x0
   5aefe:	xor    ebx,ebx
   5af00:	mov    esi,0x2
   5af05:	jmp    57d5a <encode_one_macroblock+0xffa>
   5af0a:	cmp    DWORD PTR [rip+0x8780f],0xa        # e2720 <best_mode>
   5af11:	je     594da <encode_one_macroblock+0x277a>
   5af17:	mov    eax,DWORD PTR [r12+0x250]
   5af1f:	mov    DWORD PTR [r12+0x8],0x0
   5af28:	mov    DWORD PTR [r12+0xc],eax
   5af2d:	mov    DWORD PTR [rsi+0x28],eax
   5af30:	mov    DWORD PTR [r12+0x258],0x0
   5af3c:	jmp    594e6 <encode_one_macroblock+0x2786>
   5af41:	pxor   xmm1,xmm1
   5af45:	cvtsi2sd xmm1,edx
   5af49:	mulsd  xmm0,xmm1
   5af4d:	jmp    5ad80 <encode_one_macroblock+0x4020>
   5af52:	mulsd  xmm0,xmm1
   5af56:	jmp    58d6b <encode_one_macroblock+0x200b>
   5af5b:	mov    DWORD PTR [r12+0x23c],0x0
   5af67:	jmp    584c6 <encode_one_macroblock+0x1766>
   5af6c:	mov    BYTE PTR [rax],0x0
   5af6f:	mov    rax,QWORD PTR [rip+0x2d63a]        # 885b0 <img>
   5af76:	mov    rcx,QWORD PTR [rip+0x591cb]        # b4148 <refresh_map>
   5af7d:	mov    ebx,DWORD PTR [rax+0x8c]
   5af83:	mov    eax,DWORD PTR [rax+0x88]
   5af89:	lea    edx,[rbx+rbx*1]
   5af8c:	add    eax,eax
   5af8e:	movsxd rdx,edx
   5af91:	cdqe   
   5af93:	mov    rdx,QWORD PTR [rcx+rdx*8]
   5af97:	mov    BYTE PTR [rdx+rax*1+0x1],0x0
   5af9c:	mov    rax,QWORD PTR [rip+0x2d60d]        # 885b0 <img>
   5afa3:	mov    rcx,QWORD PTR [rip+0x5919e]        # b4148 <refresh_map>
   5afaa:	mov    ebx,DWORD PTR [rax+0x8c]
   5afb0:	mov    eax,DWORD PTR [rax+0x88]
   5afb6:	lea    edx,[rbx+rbx*1]
   5afb9:	add    eax,eax
   5afbb:	movsxd rdx,edx
   5afbe:	cdqe   
   5afc0:	mov    rdx,QWORD PTR [rcx+rdx*8+0x8]
   5afc5:	xor    ecx,ecx
   5afc7:	mov    BYTE PTR [rdx+rax*1],0x0
   5afcb:	jmp    59b9f <encode_one_macroblock+0x2e3f>
   5afd0:	movsd  xmm6,QWORD PTR [r8+0xd30]
   5afd9:	jmp    57173 <encode_one_macroblock+0x413>
   5afde:	mulsd  xmm0,QWORD PTR [rip+0xfa92]        # 6aa78 <QP_SCALE_CR+0x38>
   5afe6:	jmp    58d6b <encode_one_macroblock+0x200b>
   5afeb:	add    edx,r10d
   5afee:	mov    rcx,QWORD PTR [rip+0x2d5bb]        # 885b0 <img>
   5aff5:	xor    ebx,ebx
   5aff7:	xor    esi,esi
   5aff9:	mov    DWORD PTR [rsp+0x1a8],edx
   5b000:	movsx  rdx,bp
   5b004:	lea    rax,[rdx*8+0x0]
   5b00c:	mov    QWORD PTR [rsp+0x90],0x0
   5b018:	mov    QWORD PTR [rsp+0x38],rax
   5b01d:	jmp    57d5a <encode_one_macroblock+0xffa>
   5b022:	mov    rax,QWORD PTR [rip+0x5ae47]        # b5e70 <active_sps>
   5b029:	mov    eax,DWORD PTR [rax+0x484]
   5b02f:	test   eax,eax
   5b031:	je     5b0f1 <encode_one_macroblock+0x4391>
   5b037:	mov    rax,QWORD PTR [rip+0x2d57a]        # 885b8 <input>
   5b03e:	mov    eax,DWORD PTR [rax+0xc94]
   5b044:	test   eax,eax
   5b046:	je     5b0f1 <encode_one_macroblock+0x4391>
   5b04c:	cmp    eax,0x2
   5b04f:	je     5cf8f <encode_one_macroblock+0x622f>
   5b055:	mov    edi,DWORD PTR [rsp+0xc8]
   5b05c:	xor    eax,eax
   5b05e:	cmp    DWORD PTR [rsp+0x6c],edi
   5b062:	mov    rdi,QWORD PTR [rsp+0x8]
   5b067:	setg   al
   5b06a:	mov    DWORD PTR [rdi+0x23c],eax
   5b070:	mov    rdi,QWORD PTR [rip+0x2d539]        # 885b0 <img>
   5b077:	mov    rax,QWORD PTR [rip+0x5c34a]        # b73c8 <imgY_org>
   5b07e:	lea    r11,[rip+0x82f1b]        # ddfa0 <diffy>
   5b085:	lea    r12,[r11+0x40]
   5b089:	movsxd r8,DWORD PTR [rdi+0x98]
   5b090:	movsxd rdx,DWORD PTR [rdi+0x9c]
   5b097:	add    r8,r8
   5b09a:	lea    r9,[rax+rdx*8]
   5b09e:	mov    rcx,r11
   5b0a1:	xor    eax,eax
   5b0a3:	nop    DWORD PTR [rax+rax*1+0x0]
   5b0a8:	mov    rdx,QWORD PTR [r9+rax*8]
   5b0ac:	movzx  esi,WORD PTR [rdi+rax*2+0x3138]
   5b0b4:	add    rax,0x1
   5b0b8:	add    rcx,0x40
   5b0bc:	movzx  edx,WORD PTR [rdx+r8*1]
   5b0c1:	sub    edx,esi
   5b0c3:	mov    DWORD PTR [rcx-0x40],edx
   5b0c6:	cmp    rax,0x10
   5b0ca:	jne    5b0a8 <encode_one_macroblock+0x4348>
   5b0cc:	add    r11,0x4
   5b0d0:	add    r8,0x2
   5b0d4:	add    rdi,0x20
   5b0d8:	cmp    r12,r11
   5b0db:	jne    5b09e <encode_one_macroblock+0x433e>
   5b0dd:	mov    DWORD PTR [rip+0x87639],0x0        # e2720 <best_mode>
   5b0e7:	mov    DWORD PTR [rsp+0x58],r10d
   5b0ec:	jmp    5751d <encode_one_macroblock+0x7bd>
   5b0f1:	mov    rax,QWORD PTR [rsp+0x8]
   5b0f6:	mov    DWORD PTR [rax+0x23c],0x0
   5b100:	jmp    5b070 <encode_one_macroblock+0x4310>
   5b105:	mov    rax,QWORD PTR [rip+0x2d4a4]        # 885b0 <img>
   5b10c:	mov    rdx,QWORD PTR [rip+0x2d4a5]        # 885b8 <input>
   5b113:	mov    r11d,0x7fffffff
   5b119:	mov    r15d,0x7fffffff
   5b11f:	cmp    DWORD PTR [rax+0x18],0x1
   5b123:	mov    ecx,DWORD PTR [rdx+0x4e8]
   5b129:	je     5cff4 <encode_one_macroblock+0x6294>
   5b12f:	cmp    r13d,r14d
   5b132:	mov    esi,r14d
   5b135:	mov    edx,DWORD PTR [rsp+0x1a8]
   5b13c:	cmovle esi,r13d
   5b140:	test   ecx,ecx
   5b142:	je     5cfb0 <encode_one_macroblock+0x6250>
   5b148:	mov    rcx,rax
   5b14b:	cmp    r10d,esi
   5b14e:	jg     5cc30 <encode_one_macroblock+0x5ed0>
   5b154:	cmp    r15d,r11d
   5b157:	mov    esi,r11d
   5b15a:	cmovle esi,r15d
   5b15e:	cmp    esi,r10d
   5b161:	jle    5cc30 <encode_one_macroblock+0x5ed0>
   5b167:	add    edx,r10d
   5b16a:	xor    ebx,ebx
   5b16c:	xor    esi,esi
   5b16e:	mov    DWORD PTR [rsp+0x1a8],edx
   5b175:	movsx  rdx,bp
   5b179:	lea    rax,[rdx*8+0x0]
   5b181:	movzx  edx,WORD PTR [rcx+0x11912]
   5b188:	mov    QWORD PTR [rsp+0x38],rax
   5b18d:	jmp    5926e <encode_one_macroblock+0x250e>
   5b192:	mov    eax,DWORD PTR [rsp+0xc8]
   5b199:	mov    edi,DWORD PTR [rsp+0x6c]
   5b19d:	mov    r10d,eax
   5b1a0:	cmp    edi,eax
   5b1a2:	jg     59557 <encode_one_macroblock+0x27f7>
   5b1a8:	mov    eax,DWORD PTR [rsp+0x1e4]
   5b1af:	test   eax,eax
   5b1b1:	je     59557 <encode_one_macroblock+0x27f7>
   5b1b7:	mov    eax,DWORD PTR [rsp+0x1e8]
   5b1be:	test   eax,eax
   5b1c0:	je     59557 <encode_one_macroblock+0x27f7>
   5b1c6:	mov    eax,DWORD PTR [rsp+0x1ec]
   5b1cd:	test   eax,eax
   5b1cf:	cmovne r10d,edi
   5b1d3:	jmp    59557 <encode_one_macroblock+0x27f7>
   5b1d8:	mov    DWORD PTR [rip+0x831e2],edx        # de3c0 <DELTA_QP2>
   5b1de:	mov    DWORD PTR [rip+0x5b560],eax        # b6744 <QP2>
   5b1e4:	jmp    5763e <encode_one_macroblock+0x8de>
   5b1e9:	lea    rax,[rip+0x87950]        # e2b40 <part8x8bwref>
   5b1f0:	mov    DWORD PTR [rip+0x840c6],0x0        # df2c0 <cnt_nonz_8x8>
   5b1fa:	mov    QWORD PTR [rsp+0x90],rax
   5b202:	lea    rax,[rip+0x87097]        # e22a0 <part8x8fwref>
   5b209:	mov    QWORD PTR [rsp+0x80],rax
   5b211:	lea    rax,[rip+0x864f0]        # e1708 <part8x8pdir>
   5b218:	mov    QWORD PTR [rsp+0x78],rax
   5b21d:	lea    rax,[rip+0x835cc]        # de7f0 <part8x8mode>
   5b224:	mov    DWORD PTR [rip+0x87df2],0x0        # e3020 <cbp_blk8x8>
   5b22e:	mov    DWORD PTR [rip+0x84868],0x0        # dfaa0 <cbp8x8>
   5b238:	mov    QWORD PTR [rsp+0x70],rax
   5b23d:	mov    DWORD PTR [rsp+0x6c],0x0
   5b245:	mov    DWORD PTR [rsp+0x128],0x0
   5b250:	mov    QWORD PTR [rsp+0x110],0x0
   5b25c:	mov    rbx,QWORD PTR [rsp+0x110]
   5b264:	mov    rdi,QWORD PTR [rsp+0x8]
   5b269:	mov    edx,0x33
   5b26e:	mov    DWORD PTR [rsp+0x98],0x7fffffff
   5b279:	mov    eax,ebx
   5b27b:	lea    rcx,[rbx*4+0x0]
   5b283:	mov    r13d,ebx
   5b286:	mov    DWORD PTR [rdi+0x23c],0x1
   5b290:	sar    eax,1
   5b292:	mov    rdi,QWORD PTR [rip+0x17547]        # 727e0 <INIT_MB_TYPE_I+0x120>
   5b299:	mov    QWORD PTR [rsp+0x138],rcx
   5b2a1:	lea    esi,[rax*8+0x0]
   5b2a8:	mov    eax,ebx
   5b2aa:	shl    rbx,0x3
   5b2ae:	and    eax,0x1
   5b2b1:	mov    QWORD PTR [rsp+0x1c0],rdi
   5b2b9:	lea    edi,[rax+rax*1]
   5b2bc:	mov    QWORD PTR [rsp+0x130],rbx
   5b2c4:	mov    rbx,QWORD PTR [rsp+0x180]
   5b2cc:	shl    eax,0x3
   5b2cf:	mov    DWORD PTR [rsp+0x108],edi
   5b2d6:	add    edi,esi
   5b2d8:	cdqe   
   5b2da:	mov    ecx,edi
   5b2dc:	mov    QWORD PTR [rsp+0xa8],rbx
   5b2e4:	lea    rbx,[rip+0x86655]        # e1940 <rec_mbY_8x8ts>
   5b2eb:	shl    edx,cl
   5b2ed:	mov    QWORD PTR [rsp+0xb0],rax
   5b2f5:	shl    rax,0x4
   5b2f9:	not    edx
   5b2fb:	mov    DWORD PTR [rsp+0x20],esi
   5b2ff:	mov    DWORD PTR [rsp+0x150],edx
   5b306:	movsxd rdx,esi
   5b309:	mov    rcx,rdx
   5b30c:	add    rax,rdx
   5b30f:	mov    DWORD PTR [rsp+0x160],edi
   5b316:	shl    rcx,0x5
   5b31a:	shl    rax,0x2
   5b31e:	add    rbx,rcx
   5b321:	mov    QWORD PTR [rsp+0x120],rax
   5b329:	mov    QWORD PTR [rsp+0x100],rbx
   5b331:	lea    rbx,[rdx+rdx*1]
   5b335:	mov    QWORD PTR [rsp+0x148],rbx
   5b33d:	lea    rbx,[rip+0x86a1c]        # e1d60 <mpr_8x8ts>
   5b344:	add    rbx,rcx
   5b347:	mov    QWORD PTR [rsp+0xf0],rbx
   5b34f:	movzx  ebx,WORD PTR [rsp+0x48]
   5b354:	mov    rdi,QWORD PTR [rsp+0xa8]
   5b35c:	lea    rax,[rip+0x1c2fd]        # 77660 <b8_mode_table.7699>
   5b363:	movsxd rbp,DWORD PTR [rax+rdi*4]
   5b367:	mov    r12d,DWORD PTR [rsp+rbp*4+0x1d0]
   5b36f:	mov    r14,rbp
   5b372:	test   r12d,r12d
   5b375:	je     5b4d6 <encode_one_macroblock+0x4776>
   5b37b:	test   ebp,ebp
   5b37d:	je     5b5fd <encode_one_macroblock+0x489d>
   5b383:	movsd  xmm0,QWORD PTR [rsp+0x28]
   5b389:	mov    edi,ebp
   5b38b:	mov    esi,r13d
   5b38e:	mov    QWORD PTR [rsp+0x1c8],0x0
   5b39a:	mov    r12d,0x7fffffff
   5b3a0:	call   44ec0 <PartitionMotionSearch>
   5b3a5:	mov    rax,QWORD PTR [rsp+0x50]
   5b3aa:	mov    rdi,QWORD PTR [rsp+0x60]
   5b3af:	mov    r8d,DWORD PTR [rax+rdi*4]
   5b3b3:	test   r8d,r8d
   5b3b6:	jle    5bfa7 <encode_one_macroblock+0x5247>
   5b3bc:	mov    rax,QWORD PTR [rip+0x5c0bd]        # b7480 <motion_cost>
   5b3c3:	mov    ecx,r14d
   5b3c6:	mov    edi,r13d
   5b3c9:	xor    edx,edx
   5b3cb:	mov    r10,QWORD PTR [rip+0x2d1e6]        # 885b8 <input>
   5b3d2:	mov    r11,QWORD PTR [rip+0x5c0af]        # b7488 <refbits>
   5b3d9:	mov    QWORD PTR [rsp+0x48],rbp
   5b3de:	xor    r15d,r15d
   5b3e1:	lea    r9,[rax+rbp*8]
   5b3e5:	movzx  eax,BYTE PTR [rsp+0xcf]
   5b3ed:	mov    r12d,0x7fffffff
   5b3f3:	mov    r14,r9
   5b3f6:	mov    r13,r11
   5b3f9:	mov    rbp,r10
   5b3fc:	xor    eax,0x1
   5b3ff:	mov    BYTE PTR [rsp+0x38],al
   5b403:	mov    eax,r8d
   5b406:	mov    r8d,ebx
   5b409:	mov    ebx,eax
   5b40b:	jmp    5b451 <encode_one_macroblock+0x46f1>
   5b40d:	xor    eax,eax
   5b40f:	cmp    ebx,0x1
   5b412:	je     5b421 <encode_one_macroblock+0x46c1>
   5b414:	mov    eax,DWORD PTR [rsp+0x30]
   5b418:	imul   eax,DWORD PTR [r13+rdx*4+0x0]
   5b41e:	sar    eax,0x10
   5b421:	mov    rsi,QWORD PTR [r14]
   5b424:	mov    rsi,QWORD PTR [rsi]
   5b427:	mov    rdx,QWORD PTR [rsi+rdx*8]
   5b42b:	mov    rsi,QWORD PTR [rsp+0x138]
   5b433:	add    eax,DWORD PTR [rdx+rsi*1]
   5b436:	cmp    eax,r12d
   5b439:	jge    5b441 <encode_one_macroblock+0x46e1>
   5b43b:	mov    r8d,r15d
   5b43e:	mov    r12d,eax
   5b441:	add    r15d,0x1
   5b445:	movsx  edx,r15w
   5b449:	cmp    edx,ebx
   5b44b:	jge    5bf94 <encode_one_macroblock+0x5234>
   5b451:	test   r15w,r15w
   5b455:	je     5b495 <encode_one_macroblock+0x4735>
   5b457:	cmp    BYTE PTR [rsp+0x38],0x0
   5b45c:	jne    5b495 <encode_one_macroblock+0x4735>
   5b45e:	xor    esi,esi
   5b460:	mov    DWORD PTR [rsp+0x158],r8d
   5b468:	mov    DWORD PTR [rsp+0x140],ecx
   5b46f:	mov    DWORD PTR [rsp+0xc0],edi
   5b476:	call   4e9d0 <CheckReliabilityOfRef>
   5b47b:	mov    edi,DWORD PTR [rsp+0xc0]
   5b482:	mov    ecx,DWORD PTR [rsp+0x140]
   5b489:	test   eax,eax
   5b48b:	mov    r8d,DWORD PTR [rsp+0x158]
   5b493:	je     5b441 <encode_one_macroblock+0x46e1>
   5b495:	mov    r9d,DWORD PTR [rbp+0x9a0]
   5b49c:	movsx  rdx,r15w
   5b4a0:	test   r9d,r9d
   5b4a3:	jne    5b40d <encode_one_macroblock+0x46ad>
   5b4a9:	movsd  xmm4,QWORD PTR [rsp+0x28]
   5b4af:	movapd xmm0,xmm4
   5b4b3:	addsd  xmm0,xmm4
   5b4b7:	test   r15w,r15w
   5b4bb:	jg     5b4cd <encode_one_macroblock+0x476d>
   5b4bd:	movsx  eax,r15w
   5b4c1:	pxor   xmm1,xmm1
   5b4c5:	cvtsi2sd xmm1,eax
   5b4c9:	mulsd  xmm0,xmm1
   5b4cd:	cvttsd2si eax,xmm0
   5b4d1:	jmp    5b421 <encode_one_macroblock+0x46c1>
   5b4d6:	test   ebp,ebp
   5b4d8:	je     5b5fd <encode_one_macroblock+0x489d>
   5b4de:	add    QWORD PTR [rsp+0xa8],0x1
   5b4e7:	mov    rax,QWORD PTR [rsp+0xa8]
   5b4ef:	cmp    eax,0x2
   5b4f2:	jne    5b354 <encode_one_macroblock+0x45f4>
   5b4f8:	mov    rax,QWORD PTR [rip+0x2d0b9]        # 885b8 <input>
   5b4ff:	mov    WORD PTR [rsp+0x48],bx
   5b504:	mov    r8d,DWORD PTR [rax+0x9a0]
   5b50b:	mov    rax,QWORD PTR [rsp+0x90]
   5b513:	movsx  esi,WORD PTR [rax]
   5b516:	mov    rax,QWORD PTR [rsp+0x80]
   5b51e:	movsx  r11d,WORD PTR [rax]
   5b522:	mov    rax,QWORD PTR [rsp+0x70]
   5b527:	mov    r10d,DWORD PTR [rax]
   5b52a:	mov    rax,QWORD PTR [rsp+0x78]
   5b52f:	movzx  eax,WORD PTR [rax]
   5b532:	test   r8d,r8d
   5b535:	je     5bd10 <encode_one_macroblock+0x4fb0>
   5b53b:	mov    ebx,DWORD PTR [rsp+0xa0]
   5b542:	test   ebx,ebx
   5b544:	je     5b55c <encode_one_macroblock+0x47fc>
   5b546:	mov    edx,0x1
   5b54b:	mov    ecx,r13d
   5b54e:	add    DWORD PTR [rip+0x83d6c],ebx        # df2c0 <cnt_nonz_8x8>
   5b554:	shl    edx,cl
   5b556:	or     DWORD PTR [rip+0x84544],edx        # dfaa0 <cbp8x8>
   5b55c:	sub    rsp,0x8
   5b560:	movsx  r9d,ax
   5b564:	mov    r8d,esi
   5b567:	mov    ecx,r11d
   5b56a:	mov    ebx,DWORD PTR [rsp+0x180]
   5b571:	mov    edx,r10d
   5b574:	xor    edi,edi
   5b576:	mov    esi,r13d
   5b579:	push   rbx
   5b57a:	call   563c0 <StoreNewMotionVectorsBlock8x8>
   5b57f:	mov    rax,QWORD PTR [rsp+0x90]
   5b587:	mov    edi,r13d
   5b58a:	movsx  ecx,WORD PTR [rax]
   5b58d:	mov    rax,QWORD PTR [rsp+0x88]
   5b595:	movsx  edx,WORD PTR [rax]
   5b598:	mov    rax,QWORD PTR [rsp+0xa0]
   5b5a0:	movsx  r8d,WORD PTR [rax]
   5b5a4:	mov    rax,QWORD PTR [rsp+0x80]
   5b5ac:	mov    esi,DWORD PTR [rax]
   5b5ae:	call   53110 <SetRefAndMotionVectors>
   5b5b3:	pop    rbp
   5b5b4:	pop    r12
   5b5b6:	cmp    QWORD PTR [rsp+0x110],0x3
   5b5bf:	je     5bb42 <encode_one_macroblock+0x4de2>
   5b5c5:	mov    rdi,QWORD PTR [rip+0x2db64]        # 89130 <cs_b8>
   5b5cc:	call   5d750 <reset_coding_state>
   5b5d1:	add    QWORD PTR [rsp+0x78],0x2
   5b5d7:	add    QWORD PTR [rsp+0x110],0x1
   5b5e0:	add    QWORD PTR [rsp+0x90],0x2
   5b5e9:	add    QWORD PTR [rsp+0x80],0x2
   5b5f2:	add    QWORD PTR [rsp+0x70],0x4
   5b5f8:	jmp    5b25c <encode_one_macroblock+0x44fc>
   5b5fd:	mov    rax,QWORD PTR [rip+0x5a86c]        # b5e70 <active_sps>
   5b604:	mov    ebp,DWORD PTR [rax+0x484]
   5b60a:	test   ebp,ebp
   5b60c:	je     5b4de <encode_one_macroblock+0x477e>
   5b612:	mov    rax,QWORD PTR [rip+0x2cf9f]        # 885b8 <input>
   5b619:	mov    QWORD PTR [rsp+0x1c8],0x0
   5b625:	mov    ebp,DWORD PTR [rax+0x9a0]
   5b62b:	test   ebp,ebp
   5b62d:	je     5ba80 <encode_one_macroblock+0x4d20>
   5b633:	mov    rsi,QWORD PTR [rip+0x2cf76]        # 885b0 <img>
   5b63a:	mov    rcx,QWORD PTR [rip+0x43a57]        # 9f098 <direct_ref_idx>
   5b641:	mov    eax,r13d
   5b644:	mov    edx,DWORD PTR [rsp+0x108]
   5b64b:	and    eax,0x2
   5b64e:	add    edx,DWORD PTR [rsi+0x90]
   5b654:	add    eax,DWORD PTR [rsi+0x94]
   5b65a:	mov    rsi,QWORD PTR [rcx]
   5b65d:	mov    rcx,QWORD PTR [rcx+0x8]
   5b661:	movsxd rdx,edx
   5b664:	cdqe   
   5b666:	mov    rcx,QWORD PTR [rcx+rdx*8]
   5b66a:	mov    rsi,QWORD PTR [rsi+rdx*8]
   5b66e:	movzx  edi,WORD PTR [rcx+rax*2]
   5b672:	mov    rcx,QWORD PTR [rip+0x5a7ff]        # b5e78 <direct_pdir>
   5b679:	movzx  ebx,WORD PTR [rsi+rax*2]
   5b67d:	mov    rdx,QWORD PTR [rcx+rdx*8]
   5b681:	mov    WORD PTR [rsp+0x40],di
   5b686:	movzx  ebp,WORD PTR [rdx+rax*2]
   5b68a:	mov    rdi,QWORD PTR [rip+0x2da97]        # 89128 <cs_cm>
   5b691:	call   5d450 <store_coding_state>
   5b696:	mov    rax,QWORD PTR [rip+0x2cf1b]        # 885b8 <input>
   5b69d:	mov    esi,DWORD PTR [rax+0x9a0]
   5b6a3:	test   esi,esi
   5b6a5:	jne    5b767 <encode_one_macroblock+0x4a07>
   5b6ab:	mov    edx,DWORD PTR [rsp+0x1a8]
   5b6b2:	cmp    edx,0x7fffffff
   5b6b8:	je     5b756 <encode_one_macroblock+0x49f6>
   5b6be:	xor    eax,eax
   5b6c0:	test   bp,bp
   5b6c3:	mov    rdi,QWORD PTR [rsp+0x50]
   5b6c8:	setg   al
   5b6cb:	add    eax,DWORD PTR [rsp+0xa4]
   5b6d2:	cdqe   
   5b6d4:	cmp    DWORD PTR [rdi+rax*4],0x1
   5b6d8:	jg     5bb04 <encode_one_macroblock+0x4da4>
   5b6de:	sub    edx,0x1
   5b6e1:	mov    DWORD PTR [rsp+0x1a8],edx
   5b6e8:	mov    eax,DWORD PTR [rsp+0x1a8]
   5b6ef:	cmp    DWORD PTR [rsp+0x98],eax
   5b6f6:	jle    5b756 <encode_one_macroblock+0x49f6>
   5b6f8:	mov    rdi,QWORD PTR [rsp+0x70]
   5b6fd:	movzx  esi,WORD PTR [rsp+0x40]
   5b702:	mov    DWORD PTR [rsp+0x98],eax
   5b709:	movsd  xmm4,QWORD PTR [rsp+0x88]
   5b712:	mov    DWORD PTR [rdi],r14d
   5b715:	mov    rdi,QWORD PTR [rsp+0x78]
   5b71a:	movsd  QWORD PTR [rsp+0x1c0],xmm4
   5b723:	mov    WORD PTR [rdi],bp
   5b726:	mov    rdi,QWORD PTR [rsp+0x80]
   5b72e:	mov    WORD PTR [rdi],bx
   5b731:	mov    rdi,QWORD PTR [rsp+0x90]
   5b739:	mov    WORD PTR [rdi],si
   5b73c:	mov    edi,DWORD PTR [rsp+0x1a4]
   5b743:	mov    DWORD PTR [rsp+0xa0],edi
   5b74a:	mov    rdi,QWORD PTR [rip+0x2d9df]        # 89130 <cs_b8>
   5b751:	call   5d450 <store_coding_state>
   5b756:	mov    rdi,QWORD PTR [rip+0x2d9cb]        # 89128 <cs_cm>
   5b75d:	call   5d750 <reset_coding_state>
   5b762:	jmp    5b4de <encode_one_macroblock+0x477e>
   5b767:	mov    ecx,r14d
   5b76a:	mov    edx,r13d
   5b76d:	movsx  r9d,bx
   5b771:	movsx  r8d,bp
   5b775:	lea    rsi,[rsp+0x1c8]
   5b77d:	lea    rdi,[rsp+0x1a4]
   5b785:	sub    rsp,0x8
   5b789:	movsx  eax,WORD PTR [rsp+0x48]
   5b78e:	push   rax
   5b78f:	movsd  xmm0,QWORD PTR [rsp+0x28]
   5b795:	call   50fd0 <RDCost_for_8x8blocks>
   5b79a:	mov    rax,QWORD PTR [rip+0x2ce17]        # 885b8 <input>
   5b7a1:	movsd  QWORD PTR [rsp+0x98],xmm0
   5b7aa:	mov    edx,DWORD PTR [rax+0x9a0]
   5b7b0:	pop    rax
   5b7b1:	pop    rcx
   5b7b2:	test   edx,edx
   5b7b4:	je     5b6e8 <encode_one_macroblock+0x4988>
   5b7ba:	movsd  xmm0,QWORD PTR [rsp+0x1c0]
   5b7c3:	comisd xmm0,QWORD PTR [rsp+0x88]
   5b7cc:	jbe    5b756 <encode_one_macroblock+0x49f6>
   5b7ce:	mov    eax,DWORD PTR [rsp+0x1a8]
   5b7d5:	movzx  edi,WORD PTR [rsp+0x40]
   5b7da:	xor    r8d,r8d
   5b7dd:	mov    rsi,QWORD PTR [rsp+0x130]
   5b7e5:	movsd  xmm3,QWORD PTR [rsp+0x88]
   5b7ee:	mov    DWORD PTR [rsp+0x98],eax
   5b7f5:	mov    rax,QWORD PTR [rsp+0x70]
   5b7fa:	movsd  QWORD PTR [rsp+0x1c0],xmm3
   5b803:	mov    DWORD PTR [rax],r14d
   5b806:	mov    rax,QWORD PTR [rsp+0x78]
   5b80b:	mov    WORD PTR [rax],bp
   5b80e:	mov    rax,QWORD PTR [rsp+0x80]
   5b816:	mov    WORD PTR [rax],bx
   5b819:	mov    rax,QWORD PTR [rsp+0x90]
   5b821:	mov    WORD PTR [rax],di
   5b824:	mov    eax,DWORD PTR [rsp+0x1a4]
   5b82b:	mov    rdi,QWORD PTR [rip+0x2cd7e]        # 885b0 <img>
   5b832:	mov    DWORD PTR [rsp+0xa0],eax
   5b839:	mov    eax,DWORD PTR [rsp+0x150]
   5b840:	and    eax,DWORD PTR [rip+0x877da]        # e3020 <cbp_blk8x8>
   5b846:	or     eax,DWORD PTR [rsp+0x1c8]
   5b84d:	mov    DWORD PTR [rip+0x877cd],eax        # e3020 <cbp_blk8x8>
   5b853:	mov    rax,QWORD PTR [rdi+0x3738]
   5b85a:	mov    rbp,QWORD PTR [rax+rsi*1]
   5b85e:	mov    rax,QWORD PTR [rip+0x2d89b]        # 89100 <cofAC_8x8ts>
   5b865:	mov    r11,QWORD PTR [rax+rsi*1]
   5b869:	mov    r9,QWORD PTR [rbp+r8*1+0x0]
   5b86e:	mov    r10,QWORD PTR [r11+r8*1]
   5b872:	xor    eax,eax
   5b874:	mov    rsi,QWORD PTR [r9]
   5b877:	mov    rcx,QWORD PTR [r10]
   5b87a:	nop    WORD PTR [rax+rax*1+0x0]
   5b880:	mov    edx,DWORD PTR [rsi+rax*1]
   5b883:	mov    DWORD PTR [rcx+rax*1],edx
   5b886:	add    rax,0x4
   5b88a:	cmp    rax,0x104
   5b890:	jne    5b880 <encode_one_macroblock+0x4b20>
   5b892:	mov    rsi,QWORD PTR [r9+0x8]
   5b896:	mov    rcx,QWORD PTR [r10+0x8]
   5b89a:	xor    eax,eax
   5b89c:	nop    DWORD PTR [rax+0x0]
   5b8a0:	mov    edx,DWORD PTR [rsi+rax*1]
   5b8a3:	mov    DWORD PTR [rcx+rax*1],edx
   5b8a6:	add    rax,0x4
   5b8aa:	cmp    rax,0x104
   5b8b0:	jne    5b8a0 <encode_one_macroblock+0x4b40>
   5b8b2:	add    r8,0x8
   5b8b6:	cmp    r8,0x20
   5b8ba:	jne    5b869 <encode_one_macroblock+0x4b09>
   5b8bc:	mov    rax,QWORD PTR [rsp+0x148]
   5b8c4:	mov    r8d,DWORD PTR [rdi+0x11c14]
   5b8cb:	lea    r11,[rip+0x5a5ce]        # b5ea0 <rec_resG>
   5b8d2:	lea    r10,[rip+0x57207]        # b2ae0 <resTrans_R>
   5b8d9:	mov    rbp,QWORD PTR [rip+0x2f0c8]        # 8a9a8 <enc_picture>
   5b8e0:	lea    r9,[rdi+rax*1]
   5b8e4:	mov    eax,DWORD PTR [rsp+0x20]
   5b8e8:	lea    esi,[rax+0x8]
   5b8eb:	mov    DWORD PTR [rsp+0x38],eax
   5b8ef:	mov    rax,QWORD PTR [rsp+0xb0]
   5b8f7:	mov    DWORD PTR [rsp+0x158],esi
   5b8fe:	mov    rsi,QWORD PTR [rsp+0x120]
   5b906:	add    rax,0x8
   5b90a:	mov    QWORD PTR [rsp+0x140],rsi
   5b912:	mov    rsi,QWORD PTR [rsp+0xf0]
   5b91a:	mov    QWORD PTR [rsp+0x168],rax
   5b922:	mov    QWORD PTR [rsp+0x48],rsi
   5b927:	mov    rsi,QWORD PTR [rsp+0x100]
   5b92f:	mov    QWORD PTR [rsp+0xc0],rsi
   5b937:	lea    r14,[rip+0x5ae82]        # b67c0 <mprRGB>
   5b93e:	mov    WORD PTR [rsp+0x170],bx
   5b946:	mov    rax,QWORD PTR [rsp+0x140]
   5b94e:	lea    r15,[rip+0x4500b]        # a0960 <resTrans_B>
   5b955:	mov    DWORD PTR [rsp+0x17c],r13d
   5b95d:	mov    rdx,QWORD PTR [rsp+0xb0]
   5b965:	lea    r12,[r14+0x400]
   5b96c:	mov    rbx,QWORD PTR [rsp+0x168]
   5b974:	jmp    5b9d0 <encode_one_macroblock+0x4c70>
   5b976:	mov    ecx,DWORD PTR [rdi+0x98]
   5b97c:	mov    r13,QWORD PTR [rbp+0x1918]
   5b983:	add    rax,0x40
   5b987:	mov    esi,DWORD PTR [rsp+0x38]
   5b98b:	add    esi,DWORD PTR [rdi+0x9c]
   5b991:	movsxd rsi,esi
   5b994:	add    ecx,edx
   5b996:	mov    rsi,QWORD PTR [r13+rsi*8+0x0]
   5b99b:	movsxd rcx,ecx
   5b99e:	movzx  ecx,WORD PTR [rsi+rcx*2]
   5b9a2:	mov    rsi,QWORD PTR [rsp+0xc0]
   5b9aa:	mov    WORD PTR [rsi+rdx*2],cx
   5b9ae:	mov    rcx,rdx
   5b9b1:	mov    rsi,QWORD PTR [rsp+0x48]
   5b9b6:	shl    rcx,0x5
   5b9ba:	movzx  ecx,WORD PTR [r9+rcx*1+0x3138]
   5b9c3:	mov    WORD PTR [rsi+rdx*2],cx
   5b9c7:	add    rdx,0x1
   5b9cb:	cmp    rbx,rdx
   5b9ce:	je     5ba39 <encode_one_macroblock+0x4cd9>
   5b9d0:	test   r8d,r8d
   5b9d3:	je     5b976 <encode_one_macroblock+0x4c16>
   5b9d5:	mov    ecx,DWORD PTR [r11+rax*1]
   5b9d9:	lea    rsi,[rip+0x82e40]        # de820 <rec_resG_8x8ts>
   5b9e0:	add    rdx,0x1
   5b9e4:	mov    DWORD PTR [rsi+rax*1],ecx
   5b9e7:	mov    ecx,DWORD PTR [r10+rax*1]
   5b9eb:	lea    rsi,[rip+0x829ee]        # de3e0 <resTrans_R_8x8ts>
   5b9f2:	mov    DWORD PTR [rsi+rax*1],ecx
   5b9f5:	mov    ecx,DWORD PTR [r15+rax*1]
   5b9f9:	lea    rsi,[rip+0x86d40]        # e2740 <resTrans_B_8x8ts>
   5ba00:	mov    DWORD PTR [rsi+rax*1],ecx
   5ba03:	mov    ecx,DWORD PTR [r14+rax*1]
   5ba07:	lea    rsi,[rip+0x840b2]        # dfac0 <mprRGB_8x8ts>
   5ba0e:	mov    DWORD PTR [rsi+rax*1],ecx
   5ba11:	mov    ecx,DWORD PTR [r12+rax*1]
   5ba15:	mov    DWORD PTR [rax+rsi*1+0x400],ecx
   5ba1c:	lea    rcx,[rip+0x5b59d]        # b6fc0 <mprRGB+0x800>
   5ba23:	mov    esi,DWORD PTR [rcx+rax*1]
   5ba26:	lea    rcx,[rip+0x84893]        # e02c0 <mprRGB_8x8ts+0x800>
   5ba2d:	mov    DWORD PTR [rcx+rax*1],esi
   5ba30:	add    rax,0x40
   5ba34:	cmp    rbx,rdx
   5ba37:	jne    5b9d0 <encode_one_macroblock+0x4c70>
   5ba39:	add    DWORD PTR [rsp+0x38],0x1
   5ba3e:	add    r9,0x2
   5ba42:	movzx  ebx,WORD PTR [rsp+0x170]
   5ba4a:	add    QWORD PTR [rsp+0xc0],0x20
   5ba53:	mov    r13d,DWORD PTR [rsp+0x17c]
   5ba5b:	add    QWORD PTR [rsp+0x48],0x20
   5ba61:	mov    eax,DWORD PTR [rsp+0x38]
   5ba65:	add    QWORD PTR [rsp+0x140],0x4
   5ba6e:	cmp    eax,DWORD PTR [rsp+0x158]
   5ba75:	jne    5b937 <encode_one_macroblock+0x4bd7>
   5ba7b:	jmp    5b74a <encode_one_macroblock+0x49ea>
   5ba80:	lea    rsi,[rsp+0x1b0]
   5ba88:	mov    edi,r13d
   5ba8b:	mov    DWORD PTR [rsp+0x1b0],0x0
   5ba96:	call   44b10 <Get_Direct_Cost8x8>
   5ba9b:	cmp    eax,0x7fffffff
   5baa0:	je     5bcd0 <encode_one_macroblock+0x4f70>
   5baa6:	mov    ebx,DWORD PTR [rsp+0x6c]
   5baaa:	cmp    ebx,0x7fffffff
   5bab0:	je     5bcd0 <encode_one_macroblock+0x4f70>
   5bab6:	mov    edi,DWORD PTR [rsp+0x1b0]
   5babd:	add    ebx,eax
   5babf:	add    DWORD PTR [rsp+0xc8],edi
   5bac6:	mov    DWORD PTR [rsp+0x6c],ebx
   5baca:	mov    rdx,QWORD PTR [rip+0x2cae7]        # 885b8 <input>
   5bad1:	mov    edx,DWORD PTR [rdx+0xc94]
   5bad7:	cmp    edx,0x1
   5bada:	je     5bc8c <encode_one_macroblock+0x4f2c>
   5bae0:	mov    ebx,DWORD PTR [rsp+0x98]
   5bae7:	cmp    edx,0x2
   5baea:	lea    ecx,[rbx+0x1]
   5baed:	cmove  eax,ecx
   5baf0:	mov    DWORD PTR [rsp+0x1a8],eax
   5baf7:	add    DWORD PTR [rsp+0xd8],0x1
   5baff:	jmp    5b633 <encode_one_macroblock+0x48d3>
   5bb04:	mov    edi,r14d
   5bb07:	movsx  esi,bp
   5bb0a:	mov    r12,QWORD PTR [rip+0x5b977]        # b7488 <refbits>
   5bb11:	call   2c0b0 <B8Mode2Value>
   5bb16:	mov    edi,DWORD PTR [rsp+0x30]
   5bb1a:	mov    rdx,QWORD PTR [rip+0x2ca97]        # 885b8 <input>
   5bb21:	cdqe   
   5bb23:	imul   edi,DWORD PTR [r12+rax*4]
   5bb28:	mov    edx,DWORD PTR [rdx+0x9a0]
   5bb2e:	mov    eax,edi
   5bb30:	sar    eax,0x10
   5bb33:	sub    eax,0x1
   5bb36:	add    DWORD PTR [rsp+0x1a8],eax
   5bb3d:	jmp    5b7b2 <encode_one_macroblock+0x4a52>
   5bb42:	mov    eax,DWORD PTR [rip+0x83f58]        # dfaa0 <cbp8x8>
   5bb48:	mov    DWORD PTR [rip+0x83892],eax        # df3e0 <cbp8_8x8ts>
   5bb4e:	movsxd rax,DWORD PTR [rip+0x874cb]        # e3020 <cbp_blk8x8>
   5bb55:	mov    QWORD PTR [rip+0x85ba4],rax        # e1700 <cbp_blk8_8x8ts>
   5bb5c:	mov    eax,DWORD PTR [rip+0x8375e]        # df2c0 <cnt_nonz_8x8>
   5bb62:	mov    DWORD PTR [rip+0x82c78],eax        # de7e0 <cnt_nonz8_8x8ts>
   5bb68:	mov    eax,DWORD PTR [rsp+0x128]
   5bb6f:	mov    DWORD PTR [rip+0x861cb],eax        # e1d40 <cost8_8x8ts>
   5bb75:	mov    rax,QWORD PTR [rsp+0x8]
   5bb7a:	mov    DWORD PTR [rax+0x23c],0x0
   5bb84:	mov    rax,QWORD PTR [rip+0x2ca2d]        # 885b8 <input>
   5bb8b:	cmp    DWORD PTR [rax+0xc94],0x2
   5bb92:	jne    59dfe <encode_one_macroblock+0x309e>
   5bb98:	mov    DWORD PTR [rsp+0x70],0x7fffffff
   5bba0:	mov    rdi,QWORD PTR [rip+0x2d591]        # 89138 <cs_mb>
   5bba7:	call   5d750 <reset_coding_state>
   5bbac:	mov    r9,QWORD PTR [rip+0x2c9fd]        # 885b0 <img>
   5bbb3:	mov    rax,QWORD PTR [rip+0x5b80e]        # b73c8 <imgY_org>
   5bbba:	lea    r11,[rip+0x823df]        # ddfa0 <diffy>
   5bbc1:	lea    rbx,[r11+0x40]
   5bbc5:	movsxd rdi,DWORD PTR [r9+0xa8]
   5bbcc:	movsxd rdx,DWORD PTR [r9+0xac]
   5bbd3:	mov    r8,r9
   5bbd6:	add    rdi,rdi
   5bbd9:	lea    r10,[rax+rdx*8]
   5bbdd:	mov    rcx,r11
   5bbe0:	xor    eax,eax
   5bbe2:	nop    WORD PTR [rax+rax*1+0x0]
   5bbe8:	mov    rdx,QWORD PTR [r10+rax*8]
   5bbec:	add    rcx,0x40
   5bbf0:	movzx  esi,WORD PTR [r8+rax*2+0x3138]
   5bbf9:	add    rax,0x1
   5bbfd:	movzx  edx,WORD PTR [rdx+rdi*1]
   5bc01:	sub    edx,esi
   5bc03:	mov    DWORD PTR [rcx-0x40],edx
   5bc06:	cmp    rax,0x10
   5bc0a:	jne    5bbe8 <encode_one_macroblock+0x4e88>
   5bc0c:	add    r11,0x4
   5bc10:	add    rdi,0x2
   5bc14:	add    r8,0x20
   5bc18:	cmp    rbx,r11
   5bc1b:	jne    5bbdd <encode_one_macroblock+0x4e7d>
   5bc1d:	mov    rax,QWORD PTR [rip+0x2c994]        # 885b8 <input>
   5bc24:	mov    r13d,DWORD PTR [rax+0x9a0]
   5bc2b:	test   r13d,r13d
   5bc2e:	jne    57a43 <encode_one_macroblock+0xce3>
   5bc34:	mov    ebx,DWORD PTR [rsp+0x58]
   5bc38:	mov    edi,DWORD PTR [rsp+0x70]
   5bc3c:	cmp    ebx,edi
   5bc3e:	jg     5bc4c <encode_one_macroblock+0x4eec>
   5bc40:	cmp    DWORD PTR [rip+0x860fa],ebx        # e1d40 <cost8_8x8ts>
   5bc46:	jge    57a43 <encode_one_macroblock+0xce3>
   5bc4c:	mov    DWORD PTR [rip+0x86aca],0x8        # e2720 <best_mode>
   5bc56:	mov    eax,DWORD PTR [rax+0xc94]
   5bc5c:	test   eax,eax
   5bc5e:	je     5bcf4 <encode_one_macroblock+0x4f94>
   5bc64:	mov    ebx,DWORD PTR [rip+0x860d6]        # e1d40 <cost8_8x8ts>
   5bc6a:	mov    DWORD PTR [rsp+0x58],ebx
   5bc6e:	cmp    ebx,DWORD PTR [rsp+0x70]
   5bc72:	jge    5c855 <encode_one_macroblock+0x5af5>
   5bc78:	mov    rax,QWORD PTR [rsp+0x8]
   5bc7d:	mov    DWORD PTR [rax+0x23c],0x1
   5bc87:	jmp    57a43 <encode_one_macroblock+0xce3>
   5bc8c:	mov    edx,DWORD PTR [rsp+0x1b0]
   5bc93:	cmp    edx,eax
   5bc95:	jl     5bce8 <encode_one_macroblock+0x4f88>
   5bc97:	mov    ebx,DWORD PTR [rsp+0x1e4]
   5bc9e:	test   ebx,ebx
   5bca0:	je     5bce8 <encode_one_macroblock+0x4f88>
   5bca2:	mov    r11d,DWORD PTR [rsp+0x1e8]
   5bcaa:	test   r11d,r11d
   5bcad:	je     5bce8 <encode_one_macroblock+0x4f88>
   5bcaf:	mov    r10d,DWORD PTR [rsp+0x1ec]
   5bcb7:	test   r10d,r10d
   5bcba:	je     5bce8 <encode_one_macroblock+0x4f88>
   5bcbc:	mov    DWORD PTR [rsp+0x1a8],eax
   5bcc3:	jmp    5baf7 <encode_one_macroblock+0x4d97>
   5bcc8:	nop    DWORD PTR [rax+rax*1+0x0]
   5bcd0:	mov    DWORD PTR [rsp+0xc8],0x7fffffff
   5bcdb:	mov    DWORD PTR [rsp+0x6c],0x7fffffff
   5bce3:	jmp    5baca <encode_one_macroblock+0x4d6a>
   5bce8:	mov    DWORD PTR [rsp+0x1a8],edx
   5bcef:	jmp    5baf7 <encode_one_macroblock+0x4d97>
   5bcf4:	mov    rax,QWORD PTR [rsp+0x8]
   5bcf9:	mov    DWORD PTR [rax+0x23c],0x0
   5bd03:	mov    eax,DWORD PTR [rsp+0x70]
   5bd07:	mov    DWORD PTR [rsp+0x58],eax
   5bd0b:	jmp    57a43 <encode_one_macroblock+0xce3>
   5bd10:	lea    edx,[rax-0x1]
   5bd13:	mov    edi,DWORD PTR [rsp+0x98]
   5bd1a:	mov    r9d,r8d
   5bd1d:	movsx  ecx,ax
   5bd20:	add    DWORD PTR [rsp+0x128],edi
   5bd27:	cmp    dx,0x2
   5bd2b:	lea    rdi,[rsp+0x1a0]
   5bd33:	mov    edx,r13d
   5bd36:	mov    QWORD PTR [rsp+0x1c8],0x0
   5bd42:	cmovb  r9d,r10d
   5bd46:	test   ax,0xfffd
   5bd4a:	cmove  r8d,r10d
   5bd4e:	lea    r10,[rsp+0x1c8]
   5bd56:	push   rsi
   5bd57:	push   r11
   5bd59:	mov    rsi,r10
   5bd5c:	call   29730 <LumaResidualCoding8x8>
   5bd61:	movzx  ecx,BYTE PTR [rsp+0x170]
   5bd69:	mov    rbx,QWORD PTR [rsp+0x140]
   5bd71:	xor    edi,edi
   5bd73:	mov    DWORD PTR [rsp+0xb0],eax
   5bd7a:	mov    eax,0x33
   5bd7f:	shl    eax,cl
   5bd81:	mov    rcx,QWORD PTR [rip+0x2c828]        # 885b0 <img>
   5bd88:	not    eax
   5bd8a:	and    eax,DWORD PTR [rip+0x87290]        # e3020 <cbp_blk8x8>
   5bd90:	or     eax,DWORD PTR [rsp+0x1d8]
   5bd97:	mov    DWORD PTR [rip+0x87283],eax        # e3020 <cbp_blk8x8>
   5bd9d:	mov    rax,QWORD PTR [rcx+0x3738]
   5bda4:	pop    r14
   5bda6:	pop    r15
   5bda8:	mov    r11,QWORD PTR [rax+rbx*1]
   5bdac:	mov    rax,QWORD PTR [rip+0x2d34d]        # 89100 <cofAC_8x8ts>
   5bdb3:	mov    r10,QWORD PTR [rax+rbx*1]
   5bdb7:	mov    r8,QWORD PTR [r11+rdi*1]
   5bdbb:	mov    r9,QWORD PTR [r10+rdi*1]
   5bdbf:	xor    eax,eax
   5bdc1:	mov    rsi,QWORD PTR [r8]
   5bdc4:	mov    rdx,QWORD PTR [r9]
   5bdc7:	nop    WORD PTR [rax+rax*1+0x0]
   5bdd0:	mov    ebx,DWORD PTR [rsi+rax*1]
   5bdd3:	mov    DWORD PTR [rdx+rax*1],ebx
   5bdd6:	add    rax,0x4
   5bdda:	cmp    rax,0x104
   5bde0:	jne    5bdd0 <encode_one_macroblock+0x5070>
   5bde2:	mov    r8,QWORD PTR [r8+0x8]
   5bde6:	mov    rsi,QWORD PTR [r9+0x8]
   5bdea:	xor    eax,eax
   5bdec:	nop    DWORD PTR [rax+0x0]
   5bdf0:	mov    edx,DWORD PTR [r8+rax*1]
   5bdf4:	mov    DWORD PTR [rsi+rax*1],edx
   5bdf7:	add    rax,0x4
   5bdfb:	cmp    rax,0x104
   5be01:	jne    5bdf0 <encode_one_macroblock+0x5090>
   5be03:	add    rdi,0x8
   5be07:	cmp    rdi,0x20
   5be0b:	jne    5bdb7 <encode_one_macroblock+0x5057>
   5be0d:	mov    eax,DWORD PTR [rsp+0x20]
   5be11:	mov    r10,QWORD PTR [rsp+0x148]
   5be19:	lea    r15,[rip+0x5a080]        # b5ea0 <rec_resG>
   5be20:	lea    r14,[rip+0x56cb9]        # b2ae0 <resTrans_R>
   5be27:	mov    r9d,DWORD PTR [rcx+0x11c14]
   5be2e:	mov    r12,QWORD PTR [rip+0x2eb73]        # 8a9a8 <enc_picture>
   5be35:	add    eax,0x8
   5be38:	add    r10,rcx
   5be3b:	mov    DWORD PTR [rsp+0x38],eax
   5be3f:	mov    rax,QWORD PTR [rsp+0xb0]
   5be47:	lea    r8,[rax+0x8]
   5be4b:	lea    rbx,[rip+0x5a96e]        # b67c0 <mprRGB>
   5be52:	mov    rax,QWORD PTR [rsp+0x120]
   5be5a:	mov    rdx,QWORD PTR [rsp+0xb0]
   5be62:	lea    rbp,[rbx+0x400]
   5be69:	jmp    5bec8 <encode_one_macroblock+0x5168>
   5be6b:	mov    esi,DWORD PTR [rcx+0x98]
   5be71:	mov    r11,QWORD PTR [r12+0x1918]
   5be79:	add    rax,0x40
   5be7d:	mov    edi,DWORD PTR [rsp+0x20]
   5be81:	add    edi,DWORD PTR [rcx+0x9c]
   5be87:	movsxd rdi,edi
   5be8a:	add    esi,edx
   5be8c:	mov    rdi,QWORD PTR [r11+rdi*8]
   5be90:	movsxd rsi,esi
   5be93:	movzx  esi,WORD PTR [rdi+rsi*2]
   5be97:	mov    rdi,QWORD PTR [rsp+0x100]
   5be9f:	mov    WORD PTR [rdi+rdx*2],si
   5bea3:	mov    rsi,rdx
   5bea6:	mov    rdi,QWORD PTR [rsp+0xf0]
   5beae:	shl    rsi,0x5
   5beb2:	movzx  esi,WORD PTR [r10+rsi*1+0x3138]
   5bebb:	mov    WORD PTR [rdi+rdx*2],si
   5bebf:	add    rdx,0x1
   5bec3:	cmp    r8,rdx
   5bec6:	je     5bf36 <encode_one_macroblock+0x51d6>
   5bec8:	test   r9d,r9d
   5becb:	je     5be6b <encode_one_macroblock+0x510b>
   5becd:	mov    esi,DWORD PTR [r15+rax*1]
   5bed1:	lea    rdi,[rip+0x82948]        # de820 <rec_resG_8x8ts>
   5bed8:	add    rdx,0x1
   5bedc:	mov    DWORD PTR [rdi+rax*1],esi
   5bedf:	mov    esi,DWORD PTR [r14+rax*1]
   5bee3:	lea    rdi,[rip+0x824f6]        # de3e0 <resTrans_R_8x8ts>
   5beea:	mov    DWORD PTR [rdi+rax*1],esi
   5beed:	lea    rdi,[rip+0x44a6c]        # a0960 <resTrans_B>
   5bef4:	mov    esi,DWORD PTR [rdi+rax*1]
   5bef7:	lea    rdi,[rip+0x86842]        # e2740 <resTrans_B_8x8ts>
   5befe:	mov    DWORD PTR [rdi+rax*1],esi
   5bf01:	mov    esi,DWORD PTR [rbx+rax*1]
   5bf04:	lea    rdi,[rip+0x83bb5]        # dfac0 <mprRGB_8x8ts>
   5bf0b:	mov    DWORD PTR [rdi+rax*1],esi
   5bf0e:	mov    esi,DWORD PTR [rbp+rax*1+0x0]
   5bf12:	mov    DWORD PTR [rax+rdi*1+0x400],esi
   5bf19:	lea    rsi,[rip+0x5b0a0]        # b6fc0 <mprRGB+0x800>
   5bf20:	mov    edi,DWORD PTR [rsi+rax*1]
   5bf23:	lea    rsi,[rip+0x84396]        # e02c0 <mprRGB_8x8ts+0x800>
   5bf2a:	mov    DWORD PTR [rsi+rax*1],edi
   5bf2d:	add    rax,0x40
   5bf31:	cmp    r8,rdx
   5bf34:	jne    5bec8 <encode_one_macroblock+0x5168>
   5bf36:	add    DWORD PTR [rsp+0x20],0x1
   5bf3b:	add    r10,0x2
   5bf3f:	mov    eax,DWORD PTR [rsp+0x20]
   5bf43:	add    QWORD PTR [rsp+0x100],0x20
   5bf4c:	add    QWORD PTR [rsp+0xf0],0x20
   5bf55:	add    QWORD PTR [rsp+0x120],0x4
   5bf5e:	cmp    eax,DWORD PTR [rsp+0x38]
   5bf62:	jne    5be4b <encode_one_macroblock+0x50eb>
   5bf68:	mov    rbx,QWORD PTR [rsp+0x90]
   5bf70:	mov    rax,QWORD PTR [rsp+0x78]
   5bf75:	movsx  esi,WORD PTR [rbx]
   5bf78:	mov    rbx,QWORD PTR [rsp+0x80]
   5bf80:	movzx  eax,WORD PTR [rax]
   5bf83:	movsx  r11d,WORD PTR [rbx]
   5bf87:	mov    rbx,QWORD PTR [rsp+0x70]
   5bf8c:	mov    r10d,DWORD PTR [rbx]
   5bf8f:	jmp    5b53b <encode_one_macroblock+0x47db>
   5bf94:	mov    eax,ebx
   5bf96:	mov    rbp,QWORD PTR [rsp+0x48]
   5bf9b:	mov    ebx,r8d
   5bf9e:	mov    r14d,ecx
   5bfa1:	mov    r13d,edi
   5bfa4:	mov    r8d,eax
   5bfa7:	mov    rcx,QWORD PTR [rip+0x2e9fa]        # 8a9a8 <enc_picture>
   5bfae:	mov    r15d,r13d
   5bfb1:	mov    r10d,DWORD PTR [rsp+0x108]
   5bfb9:	movsx  r9d,bx
   5bfbd:	and    r15d,0x2
   5bfc1:	mov    rax,QWORD PTR [rcx+0x1950]
   5bfc8:	mov    rdx,QWORD PTR [rcx+0x1958]
   5bfcf:	mov    DWORD PTR [rsp+0x48],r15d
   5bfd4:	mov    rdi,QWORD PTR [rax]
   5bfd7:	mov    rax,QWORD PTR [rip+0x2c5d2]        # 885b0 <img>
   5bfde:	mov    rsi,QWORD PTR [rdx]
   5bfe1:	mov    edx,DWORD PTR [rax+0x94]
   5bfe7:	add    r10d,DWORD PTR [rax+0x90]
   5bfee:	add    edx,r15d
   5bff1:	movsxd rdx,edx
   5bff4:	lea    rax,[rdx+rdx*1]
   5bff8:	lea    rdx,[rdx+rdx*1+0x4]
   5bffd:	mov    QWORD PTR [rsp+0xc0],rdx
   5c005:	movsxd rdx,r10d
   5c008:	mov    r15,QWORD PTR [rdi+rdx*8]
   5c00c:	mov    r11,QWORD PTR [rsi+rdx*8]
   5c010:	lea    edx,[r10+0x1]
   5c014:	movsxd rdx,edx
   5c017:	mov    r10,QWORD PTR [rsi+rdx*8]
   5c01b:	movsx  rsi,bx
   5c01f:	mov    rdi,QWORD PTR [rdi+rdx*8]
   5c023:	mov    QWORD PTR [rsp+0x38],rsi
   5c028:	mov    rsi,QWORD PTR [rsp+0x60]
   5c02d:	mov    rdx,rsi
   5c030:	shl    rdx,0x5
   5c034:	add    rdx,rsi
   5c037:	add    rdx,QWORD PTR [rsp+0x38]
   5c03c:	lea    rdx,[rcx+rdx*8]
   5c040:	mov    rcx,QWORD PTR [rdx+0x18]
   5c044:	mov    WORD PTR [r15+rax*1],bx
   5c049:	mov    QWORD PTR [r11+rax*4],rcx
   5c04d:	mov    rcx,QWORD PTR [rdx+0x18]
   5c051:	mov    WORD PTR [rdi+rax*1],bx
   5c055:	mov    QWORD PTR [r10+rax*4],rcx
   5c059:	add    rax,0x2
   5c05d:	cmp    QWORD PTR [rsp+0xc0],rax
   5c065:	jne    5c040 <encode_one_macroblock+0x52e0>
   5c067:	cmp    DWORD PTR [rsp+0x14],0x1
   5c06c:	je     5c8a5 <encode_one_macroblock+0x5b45>
   5c072:	mov    DWORD PTR [rsp+0x1a8],r12d
   5c07a:	xor    ebp,ebp
   5c07c:	jmp    5b68a <encode_one_macroblock+0x492a>
   5c081:	lea    rax,[rip+0x43048]        # 9f0d0 <cbp_chroma_block+0x10>
   5c088:	mov    edi,0x2
   5c08d:	lea    rsi,[rax+0x40]
   5c091:	mov    rdx,rax
   5c094:	mov    r8d,DWORD PTR [rsp+0x68]
   5c099:	lea    rcx,[rdx-0x10]
   5c09d:	mov    r14d,DWORD PTR [rcx]
   5c0a0:	test   r14d,r14d
   5c0a3:	cmovne r8d,edi
   5c0a7:	add    rcx,0x4
   5c0ab:	cmp    rdx,rcx
   5c0ae:	jne    5c09d <encode_one_macroblock+0x533d>
   5c0b0:	add    rdx,0x10
   5c0b4:	mov    DWORD PTR [rsp+0x68],r8d
   5c0b9:	cmp    rsi,rdx
   5c0bc:	jne    5c094 <encode_one_macroblock+0x5334>
   5c0be:	mov    ecx,0x2
   5c0c3:	mov    edi,DWORD PTR [rsp+0x68]
   5c0c7:	lea    rdx,[rax-0x10]
   5c0cb:	mov    r13d,DWORD PTR [rdx+0x40]
   5c0cf:	test   r13d,r13d
   5c0d2:	cmovne edi,ecx
   5c0d5:	add    rdx,0x4
   5c0d9:	cmp    rax,rdx
   5c0dc:	jne    5c0cb <encode_one_macroblock+0x536b>
   5c0de:	add    rax,0x10
   5c0e2:	mov    DWORD PTR [rsp+0x68],edi
   5c0e6:	cmp    rsi,rax
   5c0e9:	jne    5c0c3 <encode_one_macroblock+0x5363>
   5c0eb:	mov    esi,DWORD PTR [rsp+0x68]
   5c0ef:	xor    edi,edi
   5c0f1:	call   a830 <dct_chroma_DC>
   5c0f6:	mov    edi,0x1
   5c0fb:	mov    esi,eax
   5c0fd:	call   a830 <dct_chroma_DC>
   5c102:	mov    r11,QWORD PTR [rip+0x2e89f]        # 8a9a8 <enc_picture>
   5c109:	mov    rdx,QWORD PTR [rip+0x2c4a0]        # 885b0 <img>
   5c110:	lea    rsi,[rip+0x85609]        # e1720 <temp_imgU>
   5c117:	mov    DWORD PTR [rsp+0x68],eax
   5c11b:	shl    eax,0x4
   5c11e:	lea    rdi,[rip+0x82f7b]        # df0a0 <temp_imgV>
   5c125:	add    r12d,eax
   5c128:	mov    rax,QWORD PTR [r11+0x1940]
   5c12f:	movsxd rcx,DWORD PTR [rdx+0x9c]
   5c136:	movsxd rbx,DWORD PTR [rdx+0x98]
   5c13d:	mov    r14,QWORD PTR [rax]
   5c140:	mov    r15,QWORD PTR [rax+0x8]
   5c144:	lea    r10,[rcx*8+0x0]
   5c14c:	lea    r13,[rbx+rbx*1]
   5c150:	mov    r9,QWORD PTR [r14+r10*1]
   5c154:	mov    r8,QWORD PTR [r15+r10*1]
   5c158:	mov    QWORD PTR [rsp+0x20],rdx
   5c15d:	xor    eax,eax
   5c15f:	add    r9,r13
   5c162:	add    r8,r13
   5c165:	nop    DWORD PTR [rax]
   5c168:	movzx  edx,WORD PTR [r9+rax*1]
   5c16d:	mov    WORD PTR [rsi+rax*1],dx
   5c171:	movzx  edx,WORD PTR [r8+rax*1]
   5c176:	mov    WORD PTR [rdi+rax*1],dx
   5c17a:	add    rax,0x2
   5c17e:	cmp    rax,0x20
   5c182:	jne    5c168 <encode_one_macroblock+0x5408>
   5c184:	add    rsi,0x20
   5c188:	lea    rax,[rip+0x85791]        # e1920 <best_c_imode>
   5c18f:	add    rdi,0x20
   5c193:	add    r10,0x8
   5c197:	mov    rdx,QWORD PTR [rsp+0x20]
   5c19c:	cmp    rax,rsi
   5c19f:	jne    5c150 <encode_one_macroblock+0x53f0>
   5c1a1:	mov    eax,DWORD PTR [rsp+0x1a8]
   5c1a8:	mov    DWORD PTR [rsp+0x58],eax
   5c1ac:	jmp    59cba <encode_one_macroblock+0x2f5a>
   5c1b1:	mov    rax,QWORD PTR [rsp+0x90]
   5c1b9:	mov    r9d,r8d
   5c1bc:	mov    QWORD PTR [rsp+0x1c8],0x0
   5c1c8:	movsx  ecx,WORD PTR [rax+0x40]
   5c1cc:	mov    rax,QWORD PTR [rsp+0xa8]
   5c1d4:	movsx  edx,WORD PTR [rax+0x40]
   5c1d8:	mov    rax,QWORD PTR [rsp+0x98]
   5c1e0:	lea    edi,[rcx-0x1]
   5c1e3:	cmp    di,0x2
   5c1e7:	lea    rdi,[rsp+0x1a0]
   5c1ef:	movsx  eax,WORD PTR [rax+0x40]
   5c1f3:	cmovb  r9d,esi
   5c1f7:	test   cx,0xfffd
   5c1fc:	cmove  r8d,esi
   5c200:	lea    rsi,[rsp+0x1c8]
   5c208:	push   rdx
   5c209:	push   rax
   5c20a:	mov    edx,DWORD PTR [rsp+0x30]
   5c20e:	call   29730 <LumaResidualCoding8x8>
   5c213:	movzx  ecx,BYTE PTR [rsp+0x1ac]
   5c21b:	mov    rdx,QWORD PTR [rip+0x2c38e]        # 885b0 <img>
   5c222:	xor    edi,edi
   5c224:	mov    DWORD PTR [rsp+0xb0],eax
   5c22b:	mov    eax,0x33
   5c230:	mov    rbx,QWORD PTR [rsp+0x160]
   5c238:	shl    eax,cl
   5c23a:	not    eax
   5c23c:	and    eax,DWORD PTR [rip+0x86dde]        # e3020 <cbp_blk8x8>
   5c242:	or     eax,DWORD PTR [rsp+0x1d8]
   5c249:	mov    DWORD PTR [rip+0x86dd1],eax        # e3020 <cbp_blk8x8>
   5c24f:	mov    rax,QWORD PTR [rdx+0x3738]
   5c256:	pop    r14
   5c258:	pop    r15
   5c25a:	mov    r10,QWORD PTR [rax+rbx*1]
   5c25e:	mov    rax,QWORD PTR [rip+0x2cef3]        # 89158 <cofAC8x8>
   5c265:	mov    r11,QWORD PTR [rax+rbx*1]
   5c269:	mov    r8,QWORD PTR [r10+rdi*1]
   5c26d:	mov    r9,QWORD PTR [r11+rdi*1]
   5c271:	xor    eax,eax
   5c273:	mov    rsi,QWORD PTR [r8]
   5c276:	mov    rcx,QWORD PTR [r9]
   5c279:	nop    DWORD PTR [rax+0x0]
   5c280:	mov    ebx,DWORD PTR [rsi+rax*1]
   5c283:	mov    DWORD PTR [rcx+rax*1],ebx
   5c286:	add    rax,0x4
   5c28a:	cmp    rax,0x104
   5c290:	jne    5c280 <encode_one_macroblock+0x5520>
   5c292:	mov    rsi,QWORD PTR [r8+0x8]
   5c296:	mov    r8,QWORD PTR [r9+0x8]
   5c29a:	xor    eax,eax
   5c29c:	nop    DWORD PTR [rax+0x0]
   5c2a0:	mov    ecx,DWORD PTR [rsi+rax*1]
   5c2a3:	mov    DWORD PTR [r8+rax*1],ecx
   5c2a7:	add    rax,0x4
   5c2ab:	cmp    rax,0x104
   5c2b1:	jne    5c2a0 <encode_one_macroblock+0x5540>
   5c2b3:	add    rdi,0x8
   5c2b7:	cmp    rdi,0x20
   5c2bb:	jne    5c269 <encode_one_macroblock+0x5509>
   5c2bd:	mov    rcx,QWORD PTR [rip+0x2e6e4]        # 8a9a8 <enc_picture>
   5c2c4:	movsxd rax,DWORD PTR [rdx+0x9c]
   5c2cb:	add    rax,QWORD PTR [rsp+0x128]
   5c2d3:	mov    rsi,QWORD PTR [rsp+0x168]
   5c2db:	mov    rcx,QWORD PTR [rcx+0x1918]
   5c2e2:	movsxd r9,DWORD PTR [rdx+0x98]
   5c2e9:	add    rsi,rdx
   5c2ec:	lea    r10,[rcx+rax*8]
   5c2f0:	mov    rax,QWORD PTR [rsp+0xc0]
   5c2f8:	add    r9,r9
   5c2fb:	lea    rdi,[rax+0x8]
   5c2ff:	mov    r8,QWORD PTR [r10]
   5c302:	mov    rax,QWORD PTR [rsp+0xc0]
   5c30a:	mov    r11,QWORD PTR [rsp+0x130]
   5c312:	mov    rbx,QWORD PTR [rsp+0xb0]
   5c31a:	add    r8,r9
   5c31d:	movzx  ecx,WORD PTR [r8+rax*2]
   5c322:	mov    WORD PTR [rbx+rax*2],cx
   5c326:	mov    rcx,rax
   5c329:	shl    rcx,0x5
   5c32d:	movzx  ecx,WORD PTR [rsi+rcx*1+0x3138]
   5c335:	mov    WORD PTR [r11+rax*2],cx
   5c33a:	add    rax,0x1
   5c33e:	cmp    rdi,rax
   5c341:	jne    5c31d <encode_one_macroblock+0x55bd>
   5c343:	add    QWORD PTR [rsp+0xb0],0x20
   5c34c:	add    r10,0x8
   5c350:	add    rsi,0x2
   5c354:	mov    rax,QWORD PTR [rsp+0xb0]
   5c35c:	add    QWORD PTR [rsp+0x130],0x20
   5c365:	cmp    QWORD PTR [rsp+0x160],rax
   5c36d:	jne    5c2ff <encode_one_macroblock+0x559f>
   5c36f:	mov    rax,QWORD PTR [rsp+0x80]
   5c377:	mov    ecx,DWORD PTR [rdx+0x11c14]
   5c37d:	movsx  esi,WORD PTR [rax]
   5c380:	test   ecx,ecx
   5c382:	je     5a195 <encode_one_macroblock+0x3435>
   5c388:	mov    rbx,QWORD PTR [rsp+0x188]
   5c390:	mov    rax,QWORD PTR [rsp+0x128]
   5c398:	lea    r13,[rip+0x84341]        # e06e0 <mprRGB_8x8>
   5c39f:	lea    r8,[rip+0x5a41a]        # b67c0 <mprRGB>
   5c3a6:	lea    rdi,[r8+0x400]
   5c3ad:	lea    r11,[rip+0x5672c]        # b2ae0 <resTrans_R>
   5c3b4:	lea    rcx,[rax+rbx*1+0x80]
   5c3bc:	lea    rax,[rax+rbx*1+0x88]
   5c3c4:	shl    rax,0x2
   5c3c8:	shl    rcx,0x2
   5c3cc:	lea    r10,[rip+0x4458d]        # a0960 <resTrans_B>
   5c3d3:	lea    r9,[rdi+0x400]
   5c3da:	mov    QWORD PTR [rsp+0x78],rax
   5c3df:	lea    rax,[r13+0x800]
   5c3e6:	lea    rbx,[rip+0x82833]        # dec20 <rec_resG_8x8>
   5c3ed:	mov    QWORD PTR [rsp+0x38],rax
   5c3f2:	lea    rbp,[rip+0x84f07]        # e1300 <resTrans_R_8x8>
   5c3f9:	lea    r12,[rip+0x85f20]        # e2320 <resTrans_B_8x8>
   5c400:	lea    r14,[r13+0x400]
   5c407:	mov    QWORD PTR [rsp+0xb0],rdx
   5c40f:	lea    rax,[rcx-0x200]
   5c416:	lea    rdx,[rip+0x59a83]        # b5ea0 <rec_resG>
   5c41d:	mov    r15d,DWORD PTR [r9+rax*1]
   5c421:	mov    edx,DWORD PTR [rdx+rax*1]
   5c424:	mov    DWORD PTR [rbx+rax*1],edx
   5c427:	mov    edx,DWORD PTR [r11+rax*1]
   5c42b:	mov    DWORD PTR [rbp+rax*1+0x0],edx
   5c42f:	mov    edx,DWORD PTR [r10+rax*1]
   5c433:	mov    DWORD PTR [r12+rax*1],edx
   5c437:	mov    edx,DWORD PTR [r8+rax*1]
   5c43b:	mov    DWORD PTR [r13+rax*1+0x0],edx
   5c440:	mov    edx,DWORD PTR [rdi+rax*1]
   5c443:	mov    DWORD PTR [r14+rax*1],edx
   5c447:	mov    rdx,QWORD PTR [rsp+0x38]
   5c44c:	mov    DWORD PTR [rdx+rax*1],r15d
   5c450:	add    rax,0x40
   5c454:	cmp    rcx,rax
   5c457:	jne    5c416 <encode_one_macroblock+0x56b6>
   5c459:	mov    rdx,QWORD PTR [rsp+0xb0]
   5c461:	add    rcx,0x4
   5c465:	cmp    QWORD PTR [rsp+0x78],rcx
   5c46a:	jne    5c407 <encode_one_macroblock+0x56a7>
   5c46c:	jmp    5a195 <encode_one_macroblock+0x3435>
   5c471:	mov    ebx,DWORD PTR [rsp+0x100]
   5c478:	mov    DWORD PTR [rsp+0x78],eax
   5c47c:	add    ebx,0x7
   5c47f:	mov    DWORD PTR [rsp+0x17c],ebx
   5c486:	mov    ebx,DWORD PTR [rsp+0x108]
   5c48d:	lea    ecx,[rbx+0x7]
   5c490:	jmp    5a58f <encode_one_macroblock+0x382f>
   5c495:	movsxd rax,DWORD PTR [rsp+0x20]
   5c49a:	lea    rbx,[rip+0x868ff]        # e2da0 <best8x8fwref>
   5c4a1:	movsx  ecx,WORD PTR [rbx+rax*2+0x40]
   5c4a6:	lea    rbx,[rip+0x85b33]        # e1fe0 <best8x8pdir>
   5c4ad:	mov    rdi,rax
   5c4b0:	movsx  edx,WORD PTR [rbx+rax*2+0x40]
   5c4b5:	lea    rbx,[rip+0x82b64]        # df020 <best8x8bwref>
   5c4bc:	movsx  r8d,WORD PTR [rbx+rax*2+0x40]
   5c4c2:	call   53110 <SetRefAndMotionVectors>
   5c4c7:	mov    rdi,QWORD PTR [rip+0x2cc62]        # 89130 <cs_b8>
   5c4ce:	call   5d750 <reset_coding_state>
   5c4d3:	jmp    5bba0 <encode_one_macroblock+0x4e40>
   5c4d8:	mov    rax,QWORD PTR [rsp+0x48]
   5c4dd:	mov    r9,QWORD PTR [rax+0x8]
   5c4e1:	mov    rax,QWORD PTR [rsp+0x80]
   5c4e9:	mov    rax,QWORD PTR [rax+0x8]
   5c4ed:	test   si,si
   5c4f0:	jne    5caa6 <encode_one_macroblock+0x5d46>
   5c4f6:	mov    rdi,QWORD PTR [rsp+0x110]
   5c4fe:	mov    r8,QWORD PTR [rdi+0x8]
   5c502:	mov    rdi,QWORD PTR [rsp+0x40]
   5c507:	lea    r10,[rdi+0x8]
   5c50b:	mov    rdi,QWORD PTR [rsp+0x108]
   5c513:	lea    r11,[rdi*8+0x20]
   5c51b:	mov    rdi,QWORD PTR [rsp+0x40]
   5c520:	mov    rdx,QWORD PTR [rsp+0xc0]
   5c528:	lea    rcx,[rdi*4+0x0]
   5c530:	mov    rdi,QWORD PTR [r9+rdx*1]
   5c534:	mov    r15,QWORD PTR [rsp+0x40]
   5c539:	mov    r13d,0xffffffff
   5c53f:	mov    WORD PTR [rdi+r15*1],r13w
   5c544:	mov    rdi,QWORD PTR [rax+rdx*1]
   5c548:	mov    QWORD PTR [rdi+rcx*1],0xffffffffffffffff
   5c550:	mov    rdi,QWORD PTR [r8+rdx*1]
   5c554:	add    rdx,0x8
   5c558:	mov    rdi,QWORD PTR [rdi+rcx*1]
   5c55c:	mov    DWORD PTR [rdi],0x0
   5c562:	cmp    r11,rdx
   5c565:	jne    5c530 <encode_one_macroblock+0x57d0>
   5c567:	add    QWORD PTR [rsp+0x40],0x2
   5c56d:	mov    rdi,QWORD PTR [rsp+0x40]
   5c572:	cmp    r10,rdi
   5c575:	jne    5c51b <encode_one_macroblock+0x57bb>
   5c577:	jmp    5943d <encode_one_macroblock+0x26dd>
   5c57c:	mov    rax,QWORD PTR [rip+0x2c02d]        # 885b0 <img>
   5c583:	lea    rdi,[rip+0x2cbf6]        # 89180 <pred>
   5c58a:	lea    r8,[rip+0x81a0f]        # ddfa0 <diffy>
   5c591:	movsxd rsi,DWORD PTR [rax+0xa8]
   5c598:	movsxd rdx,DWORD PTR [rax+0xac]
   5c59f:	mov    rax,QWORD PTR [rip+0x5ae22]        # b73c8 <imgY_org>
   5c5a6:	add    rsi,rsi
   5c5a9:	lea    r9,[rax+rdx*8]
   5c5ad:	mov    rcx,r9
   5c5b0:	xor    eax,eax
   5c5b2:	nop    WORD PTR [rax+rax*1+0x0]
   5c5b8:	mov    rdx,QWORD PTR [rcx]
   5c5bb:	add    rcx,0x8
   5c5bf:	movzx  edx,WORD PTR [rdx+rsi*1]
   5c5c3:	sub    edx,DWORD PTR [rdi+rax*1]
   5c5c6:	mov    DWORD PTR [r8+rax*1],edx
   5c5ca:	add    rax,0x40
   5c5ce:	cmp    rax,0x400
   5c5d4:	jne    5c5b8 <encode_one_macroblock+0x5858>
   5c5d6:	add    rdi,0x4
   5c5da:	add    rsi,0x2
   5c5de:	add    r8,0x4
   5c5e2:	cmp    r12,rdi
   5c5e5:	jne    5c5ad <encode_one_macroblock+0x584d>
   5c5e7:	xor    edi,edi
   5c5e9:	call   52cc0 <store_macroblock_parameters>
   5c5ee:	jmp    59058 <encode_one_macroblock+0x22f8>
   5c5f3:	mov    rax,QWORD PTR [rip+0x564d6]        # b2ad0 <imgUV_org>
   5c5fa:	lea    r11,[rip+0x564df]        # b2ae0 <resTrans_R>
   5c601:	lea    r10,[rip+0x44358]        # a0960 <resTrans_B>
   5c608:	lea    rbp,[rip+0x59cd1]        # b62e0 <resTrans_G>
   5c60f:	mov    rbx,QWORD PTR [rax]
   5c612:	add    rbx,r12
   5c615:	add    r12,QWORD PTR [rax+0x8]
   5c619:	mov    QWORD PTR [rsp+0x78],r12
   5c61e:	mov    QWORD PTR [rsp+0x80],rbx
   5c626:	xor    ebx,ebx
   5c628:	mov    rdi,QWORD PTR [rsp+0x80]
   5c630:	mov    rax,QWORD PTR [rsp+0x38]
   5c635:	lea    rsi,[rbx*4+0x0]
   5c63d:	xor    ecx,ecx
   5c63f:	mov    r14,QWORD PTR [rdi+rbx*8]
   5c643:	mov    rdi,QWORD PTR [rsp+0x70]
   5c648:	mov    r13,QWORD PTR [rdi+rbx*8]
   5c64c:	mov    rdi,QWORD PTR [rsp+0x78]
   5c651:	add    r14,rax
   5c654:	add    r13,rax
   5c657:	add    rax,QWORD PTR [rdi+rbx*8]
   5c65b:	mov    r12,rax
   5c65e:	xchg   ax,ax
   5c660:	mov    rax,QWORD PTR [rsp+0x8]
   5c665:	movzx  edi,WORD PTR [r14+rcx*2]
   5c66a:	movzx  edx,WORD PTR [r15+rcx*2+0x12b8]
   5c673:	movsxd rax,DWORD PTR [rax+0x20c]
   5c67a:	shl    rax,0x4
   5c67e:	add    rax,rcx
   5c681:	shl    rax,0x4
   5c685:	add    rax,rbx
   5c688:	lea    r8,[r9+rax*2]
   5c68c:	movzx  eax,WORD PTR [r8+0x2138]
   5c694:	movzx  r8d,WORD PTR [r8+0x2938]
   5c69c:	sub    edi,eax
   5c69e:	movzx  eax,WORD PTR [r13+rcx*2+0x0]
   5c6a4:	sub    eax,edx
   5c6a6:	movzx  edx,WORD PTR [r12+rcx*2]
   5c6ab:	add    rcx,0x1
   5c6af:	sub    edx,r8d
   5c6b2:	sub    edx,edi
   5c6b4:	mov    DWORD PTR [r11+rsi*1],edx
   5c6b8:	sar    edx,1
   5c6ba:	add    edi,edx
   5c6bc:	sub    eax,edi
   5c6be:	mov    DWORD PTR [r10+rsi*1],eax
   5c6c2:	sar    eax,1
   5c6c4:	add    edi,eax
   5c6c6:	mov    DWORD PTR [rbp+rsi*1+0x0],edi
   5c6ca:	mov    DWORD PTR [r9+rsi*1+0x3338],edi
   5c6d2:	add    rsi,0x40
   5c6d6:	cmp    rcx,0x10
   5c6da:	jne    5c660 <encode_one_macroblock+0x5900>
   5c6dc:	add    rbx,0x1
   5c6e0:	add    r15,0x20
   5c6e4:	cmp    rbx,0x10
   5c6e8:	jne    5c628 <encode_one_macroblock+0x58c8>
   5c6ee:	jmp    5a8d1 <encode_one_macroblock+0x3b71>
   5c6f3:	lea    rax,[rip+0x429d6]        # 9f0d0 <cbp_chroma_block+0x10>
   5c6fa:	mov    edi,0x2
   5c6ff:	lea    rsi,[rax+0x40]
   5c703:	mov    rdx,rax
   5c706:	mov    r8d,DWORD PTR [rsp+0x68]
   5c70b:	lea    rcx,[rdx-0x10]
   5c70f:	mov    r10d,DWORD PTR [rcx]
   5c712:	test   r10d,r10d
   5c715:	cmovne r8d,edi
   5c719:	add    rcx,0x4
   5c71d:	cmp    rdx,rcx
   5c720:	jne    5c70f <encode_one_macroblock+0x59af>
   5c722:	add    rdx,0x10
   5c726:	mov    DWORD PTR [rsp+0x68],r8d
   5c72b:	cmp    rsi,rdx
   5c72e:	jne    5c706 <encode_one_macroblock+0x59a6>
   5c730:	mov    ecx,0x2
   5c735:	mov    edi,DWORD PTR [rsp+0x68]
   5c739:	lea    rdx,[rax-0x10]
   5c73d:	mov    r9d,DWORD PTR [rdx+0x40]
   5c741:	test   r9d,r9d
   5c744:	cmovne edi,ecx
   5c747:	add    rdx,0x4
   5c74b:	cmp    rax,rdx
   5c74e:	jne    5c73d <encode_one_macroblock+0x59dd>
   5c750:	add    rax,0x10
   5c754:	mov    DWORD PTR [rsp+0x68],edi
   5c758:	cmp    rsi,rax
   5c75b:	jne    5c735 <encode_one_macroblock+0x59d5>
   5c75d:	mov    esi,DWORD PTR [rsp+0x68]
   5c761:	xor    edi,edi
   5c763:	call   a830 <dct_chroma_DC>
   5c768:	mov    edi,0x1
   5c76d:	mov    esi,eax
   5c76f:	call   a830 <dct_chroma_DC>
   5c774:	mov    rdi,QWORD PTR [rip+0x2be35]        # 885b0 <img>
   5c77b:	mov    r12d,DWORD PTR [rsp+0x1a8]
   5c783:	mov    DWORD PTR [rsp+0x68],eax
   5c787:	shl    eax,0x4
   5c78a:	add    r13d,eax
   5c78d:	jmp    5a721 <encode_one_macroblock+0x39c1>
   5c792:	mov    eax,DWORD PTR [r12+0x1cc]
   5c79a:	test   eax,eax
   5c79c:	jne    57680 <encode_one_macroblock+0x920>
   5c7a2:	mov    rax,QWORD PTR [rsp+0xe0]
   5c7aa:	mov    r11d,DWORD PTR [rax+0x48]
   5c7ae:	test   r11d,r11d
   5c7b1:	jne    57680 <encode_one_macroblock+0x920>
   5c7b7:	mov    rax,QWORD PTR [rsp+0xe0]
   5c7bf:	mov    eax,DWORD PTR [rax+0x1cc]
   5c7c5:	test   eax,eax
   5c7c7:	jne    57680 <encode_one_macroblock+0x920>
   5c7cd:	jmp    58f39 <encode_one_macroblock+0x21d9>
   5c7d2:	mov    rax,QWORD PTR [rip+0x2bdd7]        # 885b0 <img>
   5c7d9:	lea    rdi,[rip+0x2c9a0]        # 89180 <pred>
   5c7e0:	lea    r8,[rip+0x817b9]        # ddfa0 <diffy>
   5c7e7:	lea    r10,[rdi+0x40]
   5c7eb:	movsxd rsi,DWORD PTR [rax+0xa8]
   5c7f2:	movsxd rdx,DWORD PTR [rax+0xac]
   5c7f9:	mov    rax,QWORD PTR [rip+0x5abc8]        # b73c8 <imgY_org>
   5c800:	add    rsi,rsi
   5c803:	lea    r9,[rax+rdx*8]
   5c807:	mov    rcx,r9
   5c80a:	xor    eax,eax
   5c80c:	nop    DWORD PTR [rax+0x0]
   5c810:	mov    rdx,QWORD PTR [rcx]
   5c813:	add    rcx,0x8
   5c817:	movzx  edx,WORD PTR [rdx+rsi*1]
   5c81b:	sub    edx,DWORD PTR [rdi+rax*1]
   5c81e:	mov    DWORD PTR [r8+rax*1],edx
   5c822:	add    rax,0x40
   5c826:	cmp    rax,0x400
   5c82c:	jne    5c810 <encode_one_macroblock+0x5ab0>
   5c82e:	add    rdi,0x4
   5c832:	add    rsi,0x2
   5c836:	add    r8,0x4
   5c83a:	cmp    r10,rdi
   5c83d:	jne    5c807 <encode_one_macroblock+0x5aa7>
   5c83f:	xor    edi,edi
   5c841:	xor    r12d,r12d
   5c844:	call   52cc0 <store_macroblock_parameters>
   5c849:	mov    rax,QWORD PTR [rip+0x2bd68]        # 885b8 <input>
   5c850:	jmp    587f8 <encode_one_macroblock+0x1a98>
   5c855:	jg     5bcf4 <encode_one_macroblock+0x4f94>
   5c85b:	mov    rbx,QWORD PTR [rsp+0x8]
   5c860:	mov    DWORD PTR [rbx+0x23c],0x1
   5c86a:	cmp    eax,0x2
   5c86d:	je     57a43 <encode_one_macroblock+0xce3>
   5c873:	xor    eax,eax
   5c875:	call   4e420 <GetBestTransformP8x8.part.0>
   5c87a:	test   eax,eax
   5c87c:	jne    57a3c <encode_one_macroblock+0xcdc>
   5c882:	mov    rax,QWORD PTR [rsp+0x8]
   5c887:	mov    r9,QWORD PTR [rip+0x2bd22]        # 885b0 <img>
   5c88e:	mov    DWORD PTR [rax+0x23c],0x0
   5c898:	mov    eax,DWORD PTR [rsp+0x70]
   5c89c:	mov    DWORD PTR [rsp+0x58],eax
   5c8a0:	jmp    57a43 <encode_one_macroblock+0xce3>
   5c8a5:	movsxd rax,DWORD PTR [rsp+0xbc]
   5c8ad:	mov    rdi,QWORD PTR [rsp+0x50]
   5c8b2:	mov    ecx,DWORD PTR [rdi+rax*4]
   5c8b5:	mov    rax,QWORD PTR [rip+0x2bcfc]        # 885b8 <input>
   5c8bc:	mov    edi,DWORD PTR [rax+0x9a0]
   5c8c2:	test   ecx,ecx
   5c8c4:	jle    5c955 <encode_one_macroblock+0x5bf5>
   5c8ca:	mov    rax,QWORD PTR [rip+0x5abaf]        # b7480 <motion_cost>
   5c8d1:	mov    r11,QWORD PTR [rip+0x5abb0]        # b7488 <refbits>
   5c8d8:	mov    r15d,0x7fffffff
   5c8de:	xor    edx,edx
   5c8e0:	mov    rax,QWORD PTR [rax+rbp*8]
   5c8e4:	mov    rbp,QWORD PTR [rax+0x8]
   5c8e8:	jmp    5c925 <encode_one_macroblock+0x5bc5>
   5c8ea:	xor    eax,eax
   5c8ec:	cmp    ecx,0x1
   5c8ef:	je     5c8fd <encode_one_macroblock+0x5b9d>
   5c8f1:	mov    eax,DWORD PTR [rsp+0x30]
   5c8f5:	imul   eax,DWORD PTR [r11+r10*4]
   5c8fa:	sar    eax,0x10
   5c8fd:	mov    r10,QWORD PTR [rbp+r10*8+0x0]
   5c902:	mov    rsi,QWORD PTR [rsp+0x138]
   5c90a:	add    eax,DWORD PTR [r10+rsi*1]
   5c90e:	cmp    r15d,eax
   5c911:	jle    5c91b <encode_one_macroblock+0x5bbb>
   5c913:	mov    WORD PTR [rsp+0x40],dx
   5c918:	mov    r15d,eax
   5c91b:	add    edx,0x1
   5c91e:	movsx  eax,dx
   5c921:	cmp    eax,ecx
   5c923:	jge    5c95b <encode_one_macroblock+0x5bfb>
   5c925:	movsx  r10,dx
   5c929:	test   edi,edi
   5c92b:	jne    5c8ea <encode_one_macroblock+0x5b8a>
   5c92d:	movsd  xmm3,QWORD PTR [rsp+0x28]
   5c933:	movapd xmm0,xmm3
   5c937:	addsd  xmm0,xmm3
   5c93b:	test   dx,dx
   5c93e:	jg     5c94f <encode_one_macroblock+0x5bef>
   5c940:	movsx  eax,dx
   5c943:	pxor   xmm1,xmm1
   5c947:	cvtsi2sd xmm1,eax
   5c94b:	mulsd  xmm0,xmm1
   5c94f:	cvttsd2si eax,xmm0
   5c953:	jmp    5c8fd <encode_one_macroblock+0x5b9d>
   5c955:	mov    r15d,0x7fffffff
   5c95b:	test   edi,edi
   5c95d:	je     5ca56 <encode_one_macroblock+0x5cf6>
   5c963:	xor    ebp,ebp
   5c965:	cmp    r8d,0x1
   5c969:	jle    5c982 <encode_one_macroblock+0x5c22>
   5c96b:	mov    rax,QWORD PTR [rip+0x5ab16]        # b7488 <refbits>
   5c972:	mov    rdi,QWORD PTR [rsp+0x38]
   5c977:	mov    ebp,DWORD PTR [rsp+0x30]
   5c97b:	imul   ebp,DWORD PTR [rax+rdi*4]
   5c97f:	sar    ebp,0x10
   5c982:	cmp    ecx,0x1
   5c985:	jle    5c99c <encode_one_macroblock+0x5c3c>
   5c987:	mov    rax,QWORD PTR [rip+0x5aafa]        # b7488 <refbits>
   5c98e:	mov    edi,DWORD PTR [rsp+0x30]
   5c992:	imul   edi,DWORD PTR [rax]
   5c995:	mov    eax,edi
   5c997:	sar    eax,0x10
   5c99a:	add    ebp,eax
   5c99c:	mov    r8d,DWORD PTR [rsp+0x30]
   5c9a1:	xor    ecx,ecx
   5c9a3:	mov    edx,r9d
   5c9a6:	mov    esi,r13d
   5c9a9:	mov    edi,r14d
   5c9ac:	call   42580 <BIDPartitionCost>
   5c9b1:	add    ebp,eax
   5c9b3:	mov    eax,r15d
   5c9b6:	cmp    ebp,r15d
   5c9b9:	cmovle eax,ebp
   5c9bc:	cmp    eax,r12d
   5c9bf:	jl     5ca7f <encode_one_macroblock+0x5d1f>
   5c9c5:	mov    r8d,0xffffffff
   5c9cb:	mov    DWORD PTR [rsp+0x1a8],r12d
   5c9d3:	xor    ebp,ebp
   5c9d5:	mov    WORD PTR [rsp+0x40],r8w
   5c9db:	mov    rdx,QWORD PTR [rip+0x2bbce]        # 885b0 <img>
   5c9e2:	mov    rax,QWORD PTR [rip+0x2dfbf]        # 8a9a8 <enc_picture>
   5c9e9:	mov    edi,DWORD PTR [rsp+0x48]
   5c9ed:	mov    rcx,QWORD PTR [rax+0x1950]
   5c9f4:	add    edi,DWORD PTR [rdx+0x94]
   5c9fa:	movsxd rdi,edi
   5c9fd:	mov    eax,DWORD PTR [rsp+0x108]
   5ca04:	add    eax,DWORD PTR [rdx+0x90]
   5ca0a:	mov    rsi,QWORD PTR [rcx]
   5ca0d:	lea    rdx,[rdi+rdi*1]
   5ca11:	mov    rcx,QWORD PTR [rcx+0x8]
   5ca15:	lea    r9,[rdi+rdi*1+0x4]
   5ca1a:	movsxd rdi,eax
   5ca1d:	add    eax,0x1
   5ca20:	cdqe   
   5ca22:	mov    r8,QWORD PTR [rsi+rdi*8]
   5ca26:	mov    rdi,QWORD PTR [rcx+rdi*8]
   5ca2a:	mov    rsi,QWORD PTR [rsi+rax*8]
   5ca2e:	mov    rax,QWORD PTR [rcx+rax*8]
   5ca32:	movzx  ecx,WORD PTR [rsp+0x40]
   5ca37:	mov    WORD PTR [r8+rdx*1],bx
   5ca3c:	mov    WORD PTR [rdi+rdx*1],cx
   5ca40:	mov    WORD PTR [rsi+rdx*1],bx
   5ca44:	mov    WORD PTR [rax+rdx*1],cx
   5ca48:	add    rdx,0x2
   5ca4c:	cmp    r9,rdx
   5ca4f:	jne    5ca32 <encode_one_macroblock+0x5cd2>
   5ca51:	jmp    5b68a <encode_one_macroblock+0x492a>
   5ca56:	movsd  xmm7,QWORD PTR [rsp+0x28]
   5ca5c:	movapd xmm0,xmm7
   5ca60:	addsd  xmm0,xmm7
   5ca64:	test   bx,bx
   5ca67:	jg     5ca76 <encode_one_macroblock+0x5d16>
   5ca69:	pxor   xmm1,xmm1
   5ca6d:	cvtsi2sd xmm1,r9d
   5ca72:	mulsd  xmm0,xmm1
   5ca76:	cvttsd2si ebp,xmm0
   5ca7a:	jmp    5c99c <encode_one_macroblock+0x5c3c>
   5ca7f:	cmp    ebp,r12d
   5ca82:	cmovle r12d,ebp
   5ca86:	cmp    r12d,r15d
   5ca89:	jl     5cdf7 <encode_one_macroblock+0x6097>
   5ca8f:	mov    DWORD PTR [rsp+0x1a8],r15d
   5ca97:	mov    ebx,0xffffffff
   5ca9c:	mov    ebp,0x1
   5caa1:	jmp    5c9db <encode_one_macroblock+0x5c7b>
   5caa6:	movsx  rax,bx
   5caaa:	shl    rax,0x3
   5caae:	mov    QWORD PTR [rsp+0x90],rax
   5cab6:	movsxd rax,DWORD PTR [rsp+0xbc]
   5cabe:	mov    QWORD PTR [rsp+0x38],rax
   5cac3:	mov    rax,QWORD PTR [rsp+0x48]
   5cac8:	movsx  rdx,bx
   5cacc:	xor    r11d,r11d
   5cacf:	mov    edi,DWORD PTR [rsp+0x98]
   5cad6:	mov    r13,QWORD PTR [rsp+0xb0]
   5cade:	mov    rax,QWORD PTR [rax+0x8]
   5cae2:	add    r13,r13
   5cae5:	mov    QWORD PTR [rsp+0x48],rax
   5caea:	mov    rax,QWORD PTR [rsp+0x80]
   5caf2:	mov    rax,QWORD PTR [rax+0x8]
   5caf6:	mov    QWORD PTR [rsp+0x80],rax
   5cafe:	mov    eax,DWORD PTR [rsp+0xa8]
   5cb05:	lea    eax,[rax+rdi*2]
   5cb08:	mov    rdi,QWORD PTR [rsp+0x38]
   5cb0d:	cdqe   
   5cb0f:	shl    rax,0x3
   5cb13:	mov    QWORD PTR [rsp+0x40],rax
   5cb18:	mov    rax,rdi
   5cb1b:	shl    rax,0x5
   5cb1f:	add    rax,rdi
   5cb22:	lea    r15,[rdx+rax*1+0x2]
   5cb27:	lea    rax,[r8+rax*8]
   5cb2b:	mov    QWORD PTR [rsp+0x38],rax
   5cb30:	mov    WORD PTR [rsp+0xa8],si
   5cb38:	mov    r9,QWORD PTR [rsp+0x40]
   5cb3d:	lea    r14,[r13*4+0x0]
   5cb45:	xor    r10d,r10d
   5cb48:	mov    rax,QWORD PTR [rsp+0x48]
   5cb4d:	mov    rsi,QWORD PTR [rsp+0x80]
   5cb55:	movzx  edi,WORD PTR [rcx+0x11912]
   5cb5c:	mov    rdx,QWORD PTR [rax+r9*1]
   5cb60:	mov    rax,QWORD PTR [rsi+r9*1]
   5cb64:	add    rdx,r13
   5cb67:	add    rax,r14
   5cb6a:	test   di,di
   5cb6d:	je     5cbfc <encode_one_macroblock+0x5e9c>
   5cb73:	cmp    di,0x1
   5cb77:	mov    rdi,QWORD PTR [rcx+0x11908]
   5cb7e:	cmove  rdi,QWORD PTR [rcx+0x11900]
   5cb86:	xor    esi,esi
   5cb88:	mov    WORD PTR [rdx],si
   5cb8b:	mov    rsi,QWORD PTR [rsp+0x38]
   5cb90:	mov    rdx,QWORD PTR [rsi+0x18]
   5cb94:	mov    QWORD PTR [rax],rdx
   5cb97:	mov    rax,QWORD PTR [rdi+r10*1]
   5cb9b:	mov    rax,QWORD PTR [rax+r11*1]
   5cb9f:	mov    rax,QWORD PTR [rax+0x8]
   5cba3:	mov    rax,QWORD PTR [rax]
   5cba6:	mov    rdx,QWORD PTR [rax+0x8]
   5cbaa:	mov    rax,QWORD PTR [r8+0x1968]
   5cbb1:	mov    rax,QWORD PTR [rax+0x8]
   5cbb5:	movzx  edi,WORD PTR [rdx]
   5cbb8:	mov    rax,QWORD PTR [rax+r9*1]
   5cbbc:	mov    rax,QWORD PTR [rax+r14*1]
   5cbc0:	mov    WORD PTR [rax],di
   5cbc3:	movzx  edx,WORD PTR [rdx+0x2]
   5cbc7:	mov    WORD PTR [rax+0x2],dx
   5cbcb:	add    r10,0x8
   5cbcf:	add    r9,0x8
   5cbd3:	cmp    r10,0x20
   5cbd7:	jne    5cb48 <encode_one_macroblock+0x5de8>
   5cbdd:	add    r11,0x8
   5cbe1:	movsx  esi,WORD PTR [rsp+0xa8]
   5cbe9:	add    r13,0x2
   5cbed:	cmp    r11,0x20
   5cbf1:	jne    5cb30 <encode_one_macroblock+0x5dd0>
   5cbf7:	jmp    5943d <encode_one_macroblock+0x26dd>
   5cbfc:	mov    WORD PTR [rdx],bx
   5cbff:	mov    rdx,QWORD PTR [r8+r15*8+0x8]
   5cc04:	mov    QWORD PTR [rax],rdx
   5cc07:	test   bx,bx
   5cc0a:	js     5cbcb <encode_one_macroblock+0x5e6b>
   5cc0c:	mov    rax,QWORD PTR [rcx+0x118f8]
   5cc13:	mov    rdi,QWORD PTR [rsp+0x90]
   5cc1b:	mov    rax,QWORD PTR [rax+r10*1]
   5cc1f:	mov    rax,QWORD PTR [rax+r11*1]
   5cc23:	mov    rax,QWORD PTR [rax+0x8]
   5cc27:	mov    rax,QWORD PTR [rax+rdi*1]
   5cc2b:	jmp    5cba6 <encode_one_macroblock+0x5e46>
   5cc30:	cmp    r14d,r10d
   5cc33:	mov    esi,r10d
   5cc36:	cmovle esi,r14d
   5cc3a:	cmp    r13d,esi
   5cc3d:	jg     5d1d3 <encode_one_macroblock+0x6473>
   5cc43:	cmp    r15d,r11d
   5cc46:	mov    esi,r11d
   5cc49:	cmovle esi,r15d
   5cc4d:	cmp    r13d,esi
   5cc50:	jge    5d1d3 <encode_one_macroblock+0x6473>
   5cc56:	add    edx,r13d
   5cc59:	mov    DWORD PTR [rsp+0x1a8],edx
   5cc60:	movsx  rdx,bx
   5cc64:	lea    rdi,[rdx*8+0x0]
   5cc6c:	mov    QWORD PTR [rsp+0x90],rdi
   5cc74:	mov    r8,QWORD PTR [rip+0x2dd2d]        # 8a9a8 <enc_picture>
   5cc7b:	mov    rdi,QWORD PTR [r8+0x1950]
   5cc82:	mov    rdx,QWORD PTR [r8+0x1968]
   5cc89:	mov    rsi,QWORD PTR [r8+0x1958]
   5cc90:	mov    r9,QWORD PTR [rdi]
   5cc93:	mov    r11,QWORD PTR [rdx]
   5cc96:	mov    QWORD PTR [rsp+0x48],rdi
   5cc9b:	mov    edi,DWORD PTR [rax+0x90]
   5cca1:	mov    r10,QWORD PTR [rsi]
   5cca4:	mov    QWORD PTR [rsp+0x80],rsi
   5ccac:	movsxd rax,DWORD PTR [rax+0x94]
   5ccb3:	mov    DWORD PTR [rsp+0xa8],edi
   5ccba:	lea    rdx,[rax+rax*1]
   5ccbe:	mov    QWORD PTR [rsp+0xb0],rax
   5ccc6:	mov    eax,DWORD PTR [rsp+0x98]
   5cccd:	lea    r13,[rdx+0x8]
   5ccd1:	lea    eax,[rdi+rax*2]
   5ccd4:	cdqe   
   5ccd6:	lea    r14,[rax*8+0x0]
   5ccde:	lea    rbp,[rax*8+0x20]
   5cce6:	lea    rsi,[rdx*4+0x0]
   5ccee:	mov    rax,r14
   5ccf1:	mov    rdi,QWORD PTR [r9+rax*1]
   5ccf5:	mov    r15d,0xffffffff
   5ccfb:	mov    WORD PTR [rdi+rdx*1],r15w
   5cd00:	mov    rdi,QWORD PTR [r10+rax*1]
   5cd04:	mov    QWORD PTR [rdi+rsi*1],0xffffffffffffffff
   5cd0c:	mov    rdi,QWORD PTR [r11+rax*1]
   5cd10:	add    rax,0x8
   5cd14:	mov    rdi,QWORD PTR [rdi+rsi*1]
   5cd18:	mov    DWORD PTR [rdi],0x0
   5cd1e:	cmp    rbp,rax
   5cd21:	jne    5ccf1 <encode_one_macroblock+0x5f91>
   5cd23:	add    rdx,0x2
   5cd27:	cmp    r13,rdx
   5cd2a:	jne    5cce6 <encode_one_macroblock+0x5f86>
   5cd2c:	xor    ebp,ebp
   5cd2e:	mov    esi,0x1
   5cd33:	jmp    5cac3 <encode_one_macroblock+0x5d63>
   5cd38:	movsxd rax,DWORD PTR [rsp+0xbc]
   5cd40:	mov    rbx,QWORD PTR [rsp+0x50]
   5cd45:	mov    ecx,DWORD PTR [rbx+rax*4]
   5cd48:	mov    rax,QWORD PTR [rip+0x2b869]        # 885b8 <input>
   5cd4f:	mov    esi,DWORD PTR [rax+0x9a0]
   5cd55:	test   ecx,ecx
   5cd57:	jle    5ce0f <encode_one_macroblock+0x60af>
   5cd5d:	mov    rax,QWORD PTR [rip+0x5a71c]        # b7480 <motion_cost>
   5cd64:	mov    r11,QWORD PTR [rip+0x5a71d]        # b7488 <refbits>
   5cd6b:	xor    edx,edx
   5cd6d:	mov    rax,QWORD PTR [rax+r13*8]
   5cd71:	mov    r13d,0x7fffffff
   5cd77:	mov    rbx,QWORD PTR [rax+0x8]
   5cd7b:	jmp    5cdb7 <encode_one_macroblock+0x6057>
   5cd7d:	xor    eax,eax
   5cd7f:	cmp    ecx,0x1
   5cd82:	je     5cd90 <encode_one_macroblock+0x6030>
   5cd84:	mov    eax,DWORD PTR [rsp+0x30]
   5cd88:	imul   eax,DWORD PTR [r11+rdi*4]
   5cd8d:	sar    eax,0x10
   5cd90:	mov    rdi,QWORD PTR [rbx+rdi*8]
   5cd94:	mov    r15,QWORD PTR [rsp+0x148]
   5cd9c:	add    eax,DWORD PTR [rdi+r15*1]
   5cda0:	cmp    eax,r13d
   5cda3:	jge    5cdad <encode_one_macroblock+0x604d>
   5cda5:	mov    WORD PTR [rsp+0x40],dx
   5cdaa:	mov    r13d,eax
   5cdad:	add    edx,0x1
   5cdb0:	movsx  eax,dx
   5cdb3:	cmp    ecx,eax
   5cdb5:	jle    5ce15 <encode_one_macroblock+0x60b5>
   5cdb7:	movsx  rdi,dx
   5cdbb:	test   esi,esi
   5cdbd:	jne    5cd7d <encode_one_macroblock+0x601d>
   5cdbf:	movsd  xmm4,QWORD PTR [rsp+0x28]
   5cdc5:	movapd xmm0,xmm4
   5cdc9:	addsd  xmm0,xmm4
   5cdcd:	test   dx,dx
   5cdd0:	jg     5cde1 <encode_one_macroblock+0x6081>
   5cdd2:	movsx  eax,dx
   5cdd5:	pxor   xmm1,xmm1
   5cdd9:	cvtsi2sd xmm1,eax
   5cddd:	mulsd  xmm0,xmm1
   5cde1:	cvttsd2si eax,xmm0
   5cde5:	jmp    5cd90 <encode_one_macroblock+0x6030>
   5cde7:	movsd  xmm0,QWORD PTR [rsp+0x18]
   5cded:	call   4520 <sqrt@plt>
   5cdf2:	jmp    571df <encode_one_macroblock+0x47f>
   5cdf7:	xor    edi,edi
   5cdf9:	mov    DWORD PTR [rsp+0x1a8],ebp
   5ce00:	mov    ebp,0x2
   5ce05:	mov    WORD PTR [rsp+0x40],di
   5ce0a:	jmp    5c9db <encode_one_macroblock+0x5c7b>
   5ce0f:	mov    r13d,0x7fffffff
   5ce15:	test   esi,esi
   5ce17:	je     5cf17 <encode_one_macroblock+0x61b7>
   5ce1d:	xor    ebx,ebx
   5ce1f:	cmp    r14d,0x1
   5ce23:	jle    5ce38 <encode_one_macroblock+0x60d8>
   5ce25:	mov    rax,QWORD PTR [rip+0x5a65c]        # b7488 <refbits>
   5ce2c:	mov    ebx,DWORD PTR [rsp+0x30]
   5ce30:	imul   ebx,DWORD PTR [rax+r8*4]
   5ce35:	sar    ebx,0x10
   5ce38:	cmp    ecx,0x1
   5ce3b:	jle    5ce52 <encode_one_macroblock+0x60f2>
   5ce3d:	mov    rax,QWORD PTR [rip+0x5a644]        # b7488 <refbits>
   5ce44:	mov    edi,DWORD PTR [rsp+0x30]
   5ce48:	imul   edi,DWORD PTR [rax]
   5ce4b:	mov    eax,edi
   5ce4d:	sar    eax,0x10
   5ce50:	add    ebx,eax
   5ce52:	mov    r8d,DWORD PTR [rsp+0x30]
   5ce57:	mov    esi,DWORD PTR [rsp+0x20]
   5ce5b:	xor    ecx,ecx
   5ce5d:	mov    edx,r9d
   5ce60:	mov    edi,ebp
   5ce62:	call   42580 <BIDPartitionCost>
   5ce67:	add    ebx,eax
   5ce69:	cmp    r13d,ebx
   5ce6c:	mov    eax,ebx
   5ce6e:	cmovle eax,r13d
   5ce72:	cmp    eax,r12d
   5ce75:	jl     5cf43 <encode_one_macroblock+0x61e3>
   5ce7b:	mov    r9d,0xffffffff
   5ce81:	mov    DWORD PTR [rsp+0x1a8],r12d
   5ce89:	xor    ebx,ebx
   5ce8b:	mov    WORD PTR [rsp+0x40],r9w
   5ce91:	mov    rdx,QWORD PTR [rip+0x2b718]        # 885b0 <img>
   5ce98:	mov    rax,QWORD PTR [rip+0x2db09]        # 8a9a8 <enc_picture>
   5ce9f:	mov    edi,DWORD PTR [rsp+0x110]
   5cea6:	mov    rcx,QWORD PTR [rax+0x1950]
   5cead:	add    edi,DWORD PTR [rdx+0x94]
   5ceb3:	movsxd rdi,edi
   5ceb6:	mov    eax,DWORD PTR [rsp+0xf0]
   5cebd:	add    eax,DWORD PTR [rdx+0x90]
   5cec3:	mov    rsi,QWORD PTR [rcx]
   5cec6:	lea    rdx,[rdi+rdi*1]
   5ceca:	mov    rcx,QWORD PTR [rcx+0x8]
   5cece:	lea    r9,[rdi+rdi*1+0x4]
   5ced3:	movsxd rdi,eax
   5ced6:	add    eax,0x1
   5ced9:	cdqe   
   5cedb:	mov    r8,QWORD PTR [rsi+rdi*8]
   5cedf:	mov    rdi,QWORD PTR [rcx+rdi*8]
   5cee3:	mov    rsi,QWORD PTR [rsi+rax*8]
   5cee7:	mov    rax,QWORD PTR [rcx+rax*8]
   5ceeb:	movzx  ecx,WORD PTR [rsp+0x48]
   5cef0:	movzx  r15d,WORD PTR [rsp+0x40]
   5cef6:	mov    WORD PTR [r8+rdx*1],cx
   5cefb:	mov    WORD PTR [rdi+rdx*1],r15w
   5cf00:	mov    WORD PTR [rsi+rdx*1],cx
   5cf04:	mov    WORD PTR [rax+rdx*1],r15w
   5cf09:	add    rdx,0x2
   5cf0d:	cmp    r9,rdx
   5cf10:	jne    5ceeb <encode_one_macroblock+0x618b>
   5cf12:	jmp    5a05b <encode_one_macroblock+0x32fb>
   5cf17:	movsd  xmm3,QWORD PTR [rsp+0x28]
   5cf1d:	cmp    WORD PTR [rsp+0x48],0x0
   5cf23:	movapd xmm0,xmm3
   5cf27:	addsd  xmm0,xmm3
   5cf2b:	jg     5cf3a <encode_one_macroblock+0x61da>
   5cf2d:	pxor   xmm1,xmm1
   5cf31:	cvtsi2sd xmm1,r9d
   5cf36:	mulsd  xmm0,xmm1
   5cf3a:	cvttsd2si ebx,xmm0
   5cf3e:	jmp    5ce52 <encode_one_macroblock+0x60f2>
   5cf43:	cmp    ebx,r12d
   5cf46:	cmovle r12d,ebx
   5cf4a:	cmp    r13d,r12d
   5cf4d:	jg     5d1bb <encode_one_macroblock+0x645b>
   5cf53:	mov    r8d,0xffffffff
   5cf59:	mov    DWORD PTR [rsp+0x1a8],r13d
   5cf61:	mov    ebx,0x1
   5cf66:	mov    WORD PTR [rsp+0x48],r8w
   5cf6c:	jmp    5ce91 <encode_one_macroblock+0x6131>
   5cf71:	movzx  edx,WORD PTR [rax+0x11912]
   5cf78:	xor    ebx,ebx
   5cf7a:	mov    esi,0x2
   5cf7f:	jmp    5926e <encode_one_macroblock+0x250e>
   5cf84:	mov    r12d,0x7fffffff
   5cf8a:	jmp    5ad8f <encode_one_macroblock+0x402f>
   5cf8f:	mov    rax,QWORD PTR [rsp+0x8]
   5cf94:	mov    DWORD PTR [rax+0x23c],0x1
   5cf9e:	jmp    5b070 <encode_one_macroblock+0x4310>
   5cfa3:	call   4390 <__stack_chk_fail@plt>
   5cfa8:	nop    DWORD PTR [rax+rax*1+0x0]
   5cfb0:	cmp    r10d,esi
   5cfb3:	jle    5d18d <encode_one_macroblock+0x642d>
   5cfb9:	cmp    r14d,r10d
   5cfbc:	mov    esi,0x1
   5cfc1:	cmovle r10d,r14d
   5cfc5:	cmp    r13d,r10d
   5cfc8:	jg     5aecb <encode_one_macroblock+0x416b>
   5cfce:	add    edx,r13d
   5cfd1:	mov    rcx,rax
   5cfd4:	mov    DWORD PTR [rsp+0x1a8],edx
   5cfdb:	movsx  rdx,bx
   5cfdf:	lea    rdi,[rdx*8+0x0]
   5cfe7:	mov    QWORD PTR [rsp+0x90],rdi
   5cfef:	jmp    5cc74 <encode_one_macroblock+0x5f14>
   5cff4:	test   ecx,ecx
   5cff6:	je     5d16c <encode_one_macroblock+0x640c>
   5cffc:	mov    r8d,DWORD PTR [rdx+0x9a0]
   5d003:	test   r8d,r8d
   5d006:	je     5d14b <encode_one_macroblock+0x63eb>
   5d00c:	mov    rax,QWORD PTR [rsp+0x50]
   5d011:	mov    rdi,QWORD PTR [rsp+0x60]
   5d016:	xor    r15d,r15d
   5d019:	cmp    DWORD PTR [rax+rdi*4],0x1
   5d01d:	jle    5d033 <encode_one_macroblock+0x62d3>
   5d01f:	mov    rax,QWORD PTR [rip+0x5a462]        # b7488 <refbits>
   5d026:	mov    r15d,DWORD PTR [rsp+0x30]
   5d02b:	imul   r15d,DWORD PTR [rax]
   5d02f:	sar    r15d,0x10
   5d033:	mov    rax,QWORD PTR [rsp+0x50]
   5d038:	mov    rdi,QWORD PTR [rsp+0x38]
   5d03d:	cmp    DWORD PTR [rax+rdi*4],0x1
   5d041:	jle    5d059 <encode_one_macroblock+0x62f9>
   5d043:	mov    rax,QWORD PTR [rip+0x5a43e]        # b7488 <refbits>
   5d04a:	mov    edi,DWORD PTR [rsp+0x30]
   5d04e:	imul   edi,DWORD PTR [rax]
   5d051:	mov    eax,edi
   5d053:	sar    eax,0x10
   5d056:	add    r15d,eax
   5d059:	mov    r8d,DWORD PTR [rsp+0x30]
   5d05e:	xor    r9d,r9d
   5d061:	xor    ecx,ecx
   5d063:	xor    edx,edx
   5d065:	mov    edi,0x1
   5d06a:	mov    esi,r12d
   5d06d:	mov    DWORD PTR [rsp+0x40],r10d
   5d072:	call   42040 <BPredPartitionCost>
   5d077:	mov    r10d,DWORD PTR [rsp+0x40]
   5d07c:	add    r15d,eax
   5d07f:	mov    rax,QWORD PTR [rip+0x2b532]        # 885b8 <input>
   5d086:	mov    edi,DWORD PTR [rax+0x9a0]
   5d08c:	test   edi,edi
   5d08e:	je     5d12d <encode_one_macroblock+0x63cd>
   5d094:	mov    rax,QWORD PTR [rsp+0x50]
   5d099:	mov    rdi,QWORD PTR [rsp+0x60]
   5d09e:	xor    r11d,r11d
   5d0a1:	cmp    DWORD PTR [rax+rdi*4],0x1
   5d0a5:	jle    5d0bb <encode_one_macroblock+0x635b>
   5d0a7:	mov    rax,QWORD PTR [rip+0x5a3da]        # b7488 <refbits>
   5d0ae:	mov    r11d,DWORD PTR [rsp+0x30]
   5d0b3:	imul   r11d,DWORD PTR [rax]
   5d0b7:	sar    r11d,0x10
   5d0bb:	mov    rax,QWORD PTR [rsp+0x50]
   5d0c0:	mov    rdi,QWORD PTR [rsp+0x38]
   5d0c5:	cmp    DWORD PTR [rax+rdi*4],0x1
   5d0c9:	jle    5d0e1 <encode_one_macroblock+0x6381>
   5d0cb:	mov    rax,QWORD PTR [rip+0x5a3b6]        # b7488 <refbits>
   5d0d2:	mov    edi,DWORD PTR [rsp+0x30]
   5d0d6:	imul   edi,DWORD PTR [rax]
   5d0d9:	mov    eax,edi
   5d0db:	sar    eax,0x10
   5d0de:	add    r11d,eax
   5d0e1:	mov    r8d,DWORD PTR [rsp+0x30]
   5d0e6:	xor    ecx,ecx
   5d0e8:	mov    r9d,0x1
   5d0ee:	xor    edx,edx
   5d0f0:	mov    esi,r12d
   5d0f3:	mov    edi,0x1
   5d0f8:	mov    DWORD PTR [rsp+0x48],r11d
   5d0fd:	mov    DWORD PTR [rsp+0x40],r10d
   5d102:	call   42040 <BPredPartitionCost>
   5d107:	mov    r11d,DWORD PTR [rsp+0x48]
   5d10c:	mov    r10d,DWORD PTR [rsp+0x40]
   5d111:	add    r11d,eax
   5d114:	mov    rax,QWORD PTR [rip+0x2b49d]        # 885b8 <input>
   5d11b:	mov    ecx,DWORD PTR [rax+0x4e8]
   5d121:	mov    rax,QWORD PTR [rip+0x2b488]        # 885b0 <img>
   5d128:	jmp    5b12f <encode_one_macroblock+0x43cf>
   5d12d:	movsd  xmm6,QWORD PTR [rsp+0x28]
   5d133:	movapd xmm0,xmm6
   5d137:	addsd  xmm0,xmm6
   5d13b:	mulsd  xmm0,QWORD PTR [rsp+0xd0]
   5d144:	cvttsd2si r11d,xmm0
   5d149:	jmp    5d0e1 <encode_one_macroblock+0x6381>
   5d14b:	movsd  xmm7,QWORD PTR [rsp+0x28]
   5d151:	movapd xmm0,xmm7
   5d155:	addsd  xmm0,xmm7
   5d159:	mulsd  xmm0,QWORD PTR [rsp+0xd0]
   5d162:	cvttsd2si r15d,xmm0
   5d167:	jmp    5d059 <encode_one_macroblock+0x62f9>
   5d16c:	cmp    esi,0x1
   5d16f:	mov    ecx,r14d
   5d172:	mov    edx,DWORD PTR [rsp+0x1a8]
   5d179:	sete   sil
   5d17d:	cmp    r13d,r14d
   5d180:	cmovle ecx,r13d
   5d184:	cmp    r10d,ecx
   5d187:	jg     59a72 <encode_one_macroblock+0x2d12>
   5d18d:	add    edx,r10d
   5d190:	mov    rcx,rax
   5d193:	xor    esi,esi
   5d195:	mov    DWORD PTR [rsp+0x1a8],edx
   5d19c:	movsx  rdx,bp
   5d1a0:	lea    rbx,[rdx*8+0x0]
   5d1a8:	movzx  edx,WORD PTR [rax+0x11912]
   5d1af:	mov    QWORD PTR [rsp+0x38],rbx
   5d1b4:	xor    ebx,ebx
   5d1b6:	jmp    5926e <encode_one_macroblock+0x250e>
   5d1bb:	xor    edi,edi
   5d1bd:	mov    DWORD PTR [rsp+0x1a8],ebx
   5d1c4:	mov    ebx,0x2
   5d1c9:	mov    WORD PTR [rsp+0x40],di
   5d1ce:	jmp    5ce91 <encode_one_macroblock+0x6131>
   5d1d3:	cmp    r13d,r10d
   5d1d6:	cmovle r10d,r13d
   5d1da:	cmp    r10d,r14d
   5d1dd:	jl     5d22a <encode_one_macroblock+0x64ca>
   5d1df:	cmp    r15d,r11d
   5d1e2:	mov    esi,r11d
   5d1e5:	cmovle esi,r15d
   5d1e9:	cmp    esi,r14d
   5d1ec:	jle    5d22a <encode_one_macroblock+0x64ca>
   5d1ee:	add    edx,r14d
   5d1f1:	xor    esi,esi
   5d1f3:	xor    ebx,ebx
   5d1f5:	mov    DWORD PTR [rip+0x820c5],0x0        # df2c4 <bi_pred_me>
   5d1ff:	mov    DWORD PTR [rsp+0x1a8],edx
   5d206:	movsx  rdx,bp
   5d20a:	mov    WORD PTR [rax+0x11912],si
   5d211:	lea    rax,[rdx*8+0x0]
   5d219:	xor    edx,edx
   5d21b:	mov    esi,0x2
   5d220:	mov    QWORD PTR [rsp+0x38],rax
   5d225:	jmp    5926e <encode_one_macroblock+0x250e>
   5d22a:	cmp    r15d,r10d
   5d22d:	jle    5d26e <encode_one_macroblock+0x650e>
   5d22f:	add    r11d,edx
   5d232:	mov    r13d,0x2
   5d238:	mov    edx,0x2
   5d23d:	xor    ebx,ebx
   5d23f:	mov    DWORD PTR [rsp+0x1a8],r11d
   5d247:	xor    ebp,ebp
   5d249:	mov    esi,0x2
   5d24e:	mov    DWORD PTR [rip+0x8206c],0x2        # df2c4 <bi_pred_me>
   5d258:	mov    WORD PTR [rax+0x11912],r13w
   5d260:	mov    QWORD PTR [rsp+0x38],0x0
   5d269:	jmp    5926e <encode_one_macroblock+0x250e>
   5d26e:	cmp    r11d,r14d
   5d271:	cmovle r14d,r11d
   5d275:	cmp    r15d,r14d
   5d278:	jg     5d22f <encode_one_macroblock+0x64cf>
   5d27a:	add    edx,r15d
   5d27d:	xor    ebx,ebx
   5d27f:	xor    ebp,ebp
   5d281:	mov    esi,0x2
   5d286:	mov    DWORD PTR [rsp+0x1a8],edx
   5d28d:	mov    edx,0x1
   5d292:	mov    WORD PTR [rax+0x11912],dx
   5d299:	mov    edx,0x1
   5d29e:	mov    DWORD PTR [rip+0x8201c],0x1        # df2c4 <bi_pred_me>
   5d2a8:	mov    QWORD PTR [rsp+0x38],0x0
   5d2b1:	jmp    5926e <encode_one_macroblock+0x250e>
   5d2b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000005d2c0 <store_coding_state_cs_cm>:
   5d2c0:	endbr64 
   5d2c4:	mov    rdi,QWORD PTR [rip+0x2be5d]        # 89128 <cs_cm>
   5d2cb:	jmp    5d450 <store_coding_state>

000000000005d2d0 <reset_coding_state_cs_cm>:
   5d2d0:	endbr64 
   5d2d4:	mov    rdi,QWORD PTR [rip+0x2be4d]        # 89128 <cs_cm>
   5d2db:	jmp    5d750 <reset_coding_state>

000000000005d2e0 <delete_coding_state>:
   5d2e0:	endbr64 
   5d2e4:	test   rdi,rdi
   5d2e7:	je     5d328 <delete_coding_state+0x48>
   5d2e9:	push   rbp
   5d2ea:	mov    rbp,rdi
   5d2ed:	mov    rdi,QWORD PTR [rdi+0x8]
   5d2f1:	test   rdi,rdi
   5d2f4:	je     5d2fb <delete_coding_state+0x1b>
   5d2f6:	call   42d0 <free@plt>
   5d2fb:	mov    rdi,QWORD PTR [rbp+0x10]
   5d2ff:	test   rdi,rdi
   5d302:	je     5d309 <delete_coding_state+0x29>
   5d304:	call   42d0 <free@plt>
   5d309:	mov    rdi,QWORD PTR [rbp+0x20]
   5d30d:	call   cb40 <delete_contexts_MotionInfo>
   5d312:	mov    rdi,QWORD PTR [rbp+0x28]
   5d316:	call   cb60 <delete_contexts_TextureInfo>
   5d31b:	mov    rdi,rbp
   5d31e:	pop    rbp
   5d31f:	jmp    42d0 <free@plt>
   5d324:	nop    DWORD PTR [rax+0x0]
   5d328:	ret    
   5d329:	nop    DWORD PTR [rax+0x0]

000000000005d330 <create_coding_state>:
   5d330:	endbr64 
   5d334:	push   r12
   5d336:	mov    esi,0x160
   5d33b:	mov    edi,0x1
   5d340:	sub    rsp,0x10
   5d344:	call   4400 <calloc@plt>
   5d349:	mov    r12,rax
   5d34c:	test   rax,rax
   5d34f:	je     5d42e <create_coding_state+0xfe>
   5d355:	mov    rdx,QWORD PTR [rip+0x2b25c]        # 885b8 <input>
   5d35c:	cmp    DWORD PTR [rdx+0x93c],0x1
   5d363:	sbb    rdi,rdi
   5d366:	and    rdi,0xfffffffffffffffe
   5d36a:	add    rdi,0x3
   5d36e:	cmp    DWORD PTR [rdx+0x93c],0x1
   5d375:	sbb    eax,eax
   5d377:	and    eax,0xfffffffe
   5d37a:	add    eax,0x3
   5d37d:	cmp    DWORD PTR [rdx+0x934],0x1
   5d384:	mov    DWORD PTR [r12],eax
   5d388:	je     5d3e0 <create_coding_state+0xb0>
   5d38a:	mov    QWORD PTR [r12+0x8],0x0
   5d393:	mov    esi,0x30
   5d398:	call   4400 <calloc@plt>
   5d39d:	mov    QWORD PTR [r12+0x10],rax
   5d3a2:	test   rax,rax
   5d3a5:	je     5d43f <create_coding_state+0x10f>
   5d3ab:	mov    rax,QWORD PTR [rip+0x2b206]        # 885b8 <input>
   5d3b2:	mov    eax,DWORD PTR [rax+0x934]
   5d3b8:	mov    DWORD PTR [r12+0x18],eax
   5d3bd:	cmp    eax,0x1
   5d3c0:	je     5d410 <create_coding_state+0xe0>
   5d3c2:	mov    QWORD PTR [r12+0x20],0x0
   5d3cb:	mov    rax,r12
   5d3ce:	mov    QWORD PTR [r12+0x28],0x0
   5d3d7:	add    rsp,0x10
   5d3db:	pop    r12
   5d3dd:	ret    
   5d3de:	xchg   ax,ax
   5d3e0:	mov    esi,0x68
   5d3e5:	mov    QWORD PTR [rsp+0x8],rdi
   5d3ea:	call   4400 <calloc@plt>
   5d3ef:	mov    rdi,QWORD PTR [rsp+0x8]
   5d3f4:	test   rax,rax
   5d3f7:	mov    QWORD PTR [r12+0x8],rax
   5d3fc:	jne    5d393 <create_coding_state+0x63>
   5d3fe:	lea    rdi,[rip+0x1a2f9]        # 776fe <b8_mode_table.7699+0x9e>
   5d405:	call   38210 <no_mem_exit>
   5d40a:	movsxd rdi,DWORD PTR [r12]
   5d40e:	jmp    5d393 <create_coding_state+0x63>
   5d410:	call   cac0 <create_contexts_MotionInfo>
   5d415:	mov    QWORD PTR [r12+0x20],rax
   5d41a:	call   cb00 <create_contexts_TextureInfo>
   5d41f:	mov    QWORD PTR [r12+0x28],rax
   5d424:	add    rsp,0x10
   5d428:	mov    rax,r12
   5d42b:	pop    r12
   5d42d:	ret    
   5d42e:	lea    rdi,[rip+0x1a2b3]        # 776e8 <b8_mode_table.7699+0x88>
   5d435:	call   38210 <no_mem_exit>
   5d43a:	jmp    5d355 <create_coding_state+0x25>
   5d43f:	lea    rdi,[rip+0x1a2da]        # 77720 <b8_mode_table.7699+0xc0>
   5d446:	call   38210 <no_mem_exit>
   5d44b:	jmp    5d3ab <create_coding_state+0x7b>

000000000005d450 <store_coding_state>:
   5d450:	endbr64 
   5d454:	mov    rax,QWORD PTR [rip+0x2b15d]        # 885b8 <input>
   5d45b:	mov    eax,DWORD PTR [rax+0x9a0]
   5d461:	test   eax,eax
   5d463:	je     5d740 <store_coding_state+0x2f0>
   5d469:	mov    rdx,QWORD PTR [rip+0x2b140]        # 885b0 <img>
   5d470:	push   r14
   5d472:	xor    ecx,ecx
   5d474:	push   r13
   5d476:	push   r12
   5d478:	push   rbp
   5d479:	push   rbx
   5d47a:	cmp    DWORD PTR [rdi+0x18],0x1
   5d47e:	mov    rbx,rdi
   5d481:	mov    rbp,QWORD PTR [rdx+0x3758]
   5d488:	movsxd r12,DWORD PTR [rdx+0xc]
   5d48c:	jne    5d71c <store_coding_state+0x2cc>
   5d492:	mov    rax,QWORD PTR [rdx+0x3750]
   5d499:	mov    r11,QWORD PTR [rdi+0x20]
   5d49d:	xor    r10d,r10d
   5d4a0:	mov    r8,QWORD PTR [rdi+0x28]
   5d4a4:	mov    rsi,QWORD PTR [rax+0x20]
   5d4a8:	mov    r9,QWORD PTR [rax+0x28]
   5d4ac:	jmp    5d553 <store_coding_state+0x103>
   5d4b1:	nop    DWORD PTR [rax+0x0]
   5d4b8:	mov    rdx,QWORD PTR [rdx+0x3750]
   5d4bf:	mov    rax,rcx
   5d4c2:	shl    rax,0x4
   5d4c6:	mov    rdx,QWORD PTR [rdx+0x18]
   5d4ca:	sub    rax,rcx
   5d4cd:	lea    r13,[rdx+rax*8]
   5d4d1:	mov    rdx,QWORD PTR [rbx+0x8]
   5d4d5:	lea    rax,[rcx+rcx*2]
   5d4d9:	add    rcx,0x1
   5d4dd:	movdqu xmm3,XMMWORD PTR [r13+0x8]
   5d4e3:	mov    rdi,QWORD PTR [r13+0x0]
   5d4e7:	shl    rax,0x4
   5d4eb:	add    rdx,r10
   5d4ee:	add    rax,QWORD PTR [rbx+0x10]
   5d4f2:	add    r10,0x68
   5d4f6:	movups XMMWORD PTR [rdx],xmm3
   5d4f9:	movdqu xmm4,XMMWORD PTR [r13+0x18]
   5d4ff:	movups XMMWORD PTR [rdx+0x10],xmm4
   5d503:	movdqu xmm5,XMMWORD PTR [r13+0x28]
   5d509:	movups XMMWORD PTR [rdx+0x20],xmm5
   5d50d:	movdqu xmm6,XMMWORD PTR [r13+0x38]
   5d513:	movups XMMWORD PTR [rdx+0x30],xmm6
   5d517:	movdqu xmm7,XMMWORD PTR [r13+0x48]
   5d51d:	movups XMMWORD PTR [rdx+0x40],xmm7
   5d521:	movdqu xmm3,XMMWORD PTR [r13+0x58]
   5d527:	movups XMMWORD PTR [rdx+0x50],xmm3
   5d52b:	mov    r13,QWORD PTR [r13+0x68]
   5d52f:	mov    QWORD PTR [rdx+0x60],r13
   5d533:	movdqu xmm4,XMMWORD PTR [rdi]
   5d537:	movups XMMWORD PTR [rax],xmm4
   5d53a:	movdqu xmm5,XMMWORD PTR [rdi+0x10]
   5d53f:	mov    rdx,QWORD PTR [rip+0x2b06a]        # 885b0 <img>
   5d546:	movups XMMWORD PTR [rax+0x10],xmm5
   5d54a:	movdqu xmm6,XMMWORD PTR [rdi+0x20]
   5d54f:	movups XMMWORD PTR [rax+0x20],xmm6
   5d553:	mov    rdi,QWORD PTR [rdx+0x3748]
   5d55a:	mov    eax,0x1
   5d55f:	mov    r13d,DWORD PTR [rdi+0x4]
   5d563:	test   r13d,r13d
   5d566:	jne    5d56a <store_coding_state+0x11a>
   5d568:	mov    eax,DWORD PTR [rbx]
   5d56a:	cmp    eax,ecx
   5d56c:	jg     5d4b8 <store_coding_state+0x68>
   5d572:	mov    rax,QWORD PTR [rsi]
   5d575:	lea    rdi,[r11+0x8]
   5d579:	mov    edx,0x2f60
   5d57e:	and    rdi,0xfffffffffffffff8
   5d582:	mov    QWORD PTR [r11],rax
   5d585:	mov    rax,QWORD PTR [rsi+0x5d8]
   5d58c:	mov    QWORD PTR [r11+0x5d8],rax
   5d593:	sub    r11,rdi
   5d596:	sub    rsi,r11
   5d599:	add    r11d,0x5e0
   5d5a0:	shr    r11d,0x3
   5d5a4:	mov    ecx,r11d
   5d5a7:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   5d5aa:	mov    rsi,r9
   5d5ad:	mov    rdi,r8
   5d5b0:	call   4440 <memcpy@plt>
   5d5b5:	imul   r12,r12,0x278
   5d5bc:	add    rbp,r12
   5d5bf:	mov    eax,DWORD PTR [rbp+0x0]
   5d5c2:	mov    DWORD PTR [rbx+0x30],eax
   5d5c5:	movdqu xmm7,XMMWORD PTR [rbp+0x14]
   5d5ca:	movups XMMWORD PTR [rbx+0x34],xmm7
   5d5ce:	movdqu xmm7,XMMWORD PTR [rbp+0x24]
   5d5d3:	movups XMMWORD PTR [rbx+0x44],xmm7
   5d5d7:	movdqu xmm7,XMMWORD PTR [rbp+0x4c]
   5d5dc:	movups XMMWORD PTR [rbx+0x54],xmm7
   5d5e0:	movdqu xmm0,XMMWORD PTR [rbp+0x5c]
   5d5e5:	movups XMMWORD PTR [rbx+0x64],xmm0
   5d5e9:	movdqu xmm1,XMMWORD PTR [rbp+0x6c]
   5d5ee:	movups XMMWORD PTR [rbx+0x74],xmm1
   5d5f2:	movdqu xmm2,XMMWORD PTR [rbp+0x7c]
   5d5f7:	movups XMMWORD PTR [rbx+0x84],xmm2
   5d5fe:	movdqu xmm3,XMMWORD PTR [rbp+0x8c]
   5d606:	movups XMMWORD PTR [rbx+0x94],xmm3
   5d60d:	movdqu xmm4,XMMWORD PTR [rbp+0x9c]
   5d615:	movups XMMWORD PTR [rbx+0xa4],xmm4
   5d61c:	movdqu xmm5,XMMWORD PTR [rbp+0xac]
   5d624:	movups XMMWORD PTR [rbx+0xb4],xmm5
   5d62b:	movdqu xmm6,XMMWORD PTR [rbp+0xbc]
   5d633:	movups XMMWORD PTR [rbx+0xc4],xmm6
   5d63a:	movdqu xmm7,XMMWORD PTR [rbp+0xcc]
   5d642:	movups XMMWORD PTR [rbx+0xd4],xmm7
   5d649:	movdqu xmm0,XMMWORD PTR [rbp+0xdc]
   5d651:	movups XMMWORD PTR [rbx+0xe4],xmm0
   5d658:	movdqu xmm1,XMMWORD PTR [rbp+0xec]
   5d660:	movups XMMWORD PTR [rbx+0xf4],xmm1
   5d667:	movdqu xmm2,XMMWORD PTR [rbp+0xfc]
   5d66f:	movups XMMWORD PTR [rbx+0x104],xmm2
   5d676:	movdqu xmm3,XMMWORD PTR [rbp+0x10c]
   5d67e:	movups XMMWORD PTR [rbx+0x114],xmm3
   5d685:	movdqu xmm4,XMMWORD PTR [rbp+0x11c]
   5d68d:	movups XMMWORD PTR [rbx+0x124],xmm4
   5d694:	movdqu xmm5,XMMWORD PTR [rbp+0x12c]
   5d69c:	movups XMMWORD PTR [rbx+0x134],xmm5
   5d6a3:	movdqu xmm6,XMMWORD PTR [rbp+0x13c]
   5d6ab:	movups XMMWORD PTR [rbx+0x144],xmm6
   5d6b2:	mov    rax,QWORD PTR [rbp+0x1f8]
   5d6b9:	mov    QWORD PTR [rbx+0x158],rax
   5d6c0:	pop    rbx
   5d6c1:	pop    rbp
   5d6c2:	pop    r12
   5d6c4:	pop    r13
   5d6c6:	pop    r14
   5d6c8:	ret    
   5d6c9:	nop    DWORD PTR [rax+0x0]
   5d6d0:	mov    rsi,QWORD PTR [rdx+0x3750]
   5d6d7:	mov    rdx,rcx
   5d6da:	lea    rax,[rcx+rcx*2]
   5d6de:	shl    rdx,0x4
   5d6e2:	shl    rax,0x4
   5d6e6:	add    rax,QWORD PTR [rbx+0x10]
   5d6ea:	mov    rdi,QWORD PTR [rsi+0x18]
   5d6ee:	sub    rdx,rcx
   5d6f1:	add    rcx,0x1
   5d6f5:	lea    rdx,[rdi+rdx*8]
   5d6f9:	mov    rdx,QWORD PTR [rdx]
   5d6fc:	movdqu xmm0,XMMWORD PTR [rdx]
   5d700:	movups XMMWORD PTR [rax],xmm0
   5d703:	movdqu xmm1,XMMWORD PTR [rdx+0x10]
   5d708:	movups XMMWORD PTR [rax+0x10],xmm1
   5d70c:	movdqu xmm2,XMMWORD PTR [rdx+0x20]
   5d711:	mov    rdx,QWORD PTR [rip+0x2ae98]        # 885b0 <img>
   5d718:	movups XMMWORD PTR [rax+0x20],xmm2
   5d71c:	mov    rsi,QWORD PTR [rdx+0x3748]
   5d723:	mov    eax,0x1
   5d728:	mov    esi,DWORD PTR [rsi+0x4]
   5d72b:	test   esi,esi
   5d72d:	jne    5d731 <store_coding_state+0x2e1>
   5d72f:	mov    eax,DWORD PTR [rbx]
   5d731:	cmp    eax,ecx
   5d733:	jg     5d6d0 <store_coding_state+0x280>
   5d735:	jmp    5d5b5 <store_coding_state+0x165>
   5d73a:	nop    WORD PTR [rax+rax*1+0x0]
   5d740:	ret    
   5d741:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5d74c:	nop    DWORD PTR [rax+0x0]

000000000005d750 <reset_coding_state>:
   5d750:	endbr64 
   5d754:	mov    rax,QWORD PTR [rip+0x2ae5d]        # 885b8 <input>
   5d75b:	mov    eax,DWORD PTR [rax+0x9a0]
   5d761:	test   eax,eax
   5d763:	je     5da40 <reset_coding_state+0x2f0>
   5d769:	mov    rax,QWORD PTR [rip+0x2ae40]        # 885b0 <img>
   5d770:	push   r14
   5d772:	xor    edx,edx
   5d774:	push   r13
   5d776:	push   r12
   5d778:	push   rbp
   5d779:	push   rbx
   5d77a:	cmp    DWORD PTR [rdi+0x18],0x1
   5d77e:	mov    rbx,rdi
   5d781:	mov    rbp,QWORD PTR [rax+0x3758]
   5d788:	movsxd r12,DWORD PTR [rax+0xc]
   5d78c:	jne    5da1c <reset_coding_state+0x2cc>
   5d792:	mov    rdx,QWORD PTR [rax+0x3750]
   5d799:	mov    rsi,QWORD PTR [rdi+0x20]
   5d79d:	xor    r10d,r10d
   5d7a0:	xor    ecx,ecx
   5d7a2:	mov    r9,QWORD PTR [rdi+0x28]
   5d7a6:	mov    r11,QWORD PTR [rdx+0x20]
   5d7aa:	mov    r8,QWORD PTR [rdx+0x28]
   5d7ae:	jmp    5d853 <reset_coding_state+0x103>
   5d7b3:	nop    DWORD PTR [rax+rax*1+0x0]
   5d7b8:	mov    rdx,QWORD PTR [rax+0x3750]
   5d7bf:	mov    rax,rcx
   5d7c2:	shl    rax,0x4
   5d7c6:	mov    rdx,QWORD PTR [rdx+0x18]
   5d7ca:	sub    rax,rcx
   5d7cd:	lea    r13,[rdx+rax*8]
   5d7d1:	mov    rdx,QWORD PTR [rbx+0x8]
   5d7d5:	lea    rax,[rcx+rcx*2]
   5d7d9:	add    rcx,0x1
   5d7dd:	shl    rax,0x4
   5d7e1:	add    rax,QWORD PTR [rbx+0x10]
   5d7e5:	mov    rdi,QWORD PTR [r13+0x0]
   5d7e9:	add    rdx,r10
   5d7ec:	add    r10,0x68
   5d7f0:	movdqu xmm3,XMMWORD PTR [rdx]
   5d7f4:	movups XMMWORD PTR [r13+0x8],xmm3
   5d7f9:	movdqu xmm4,XMMWORD PTR [rdx+0x10]
   5d7fe:	movups XMMWORD PTR [r13+0x18],xmm4
   5d803:	movdqu xmm5,XMMWORD PTR [rdx+0x20]
   5d808:	movups XMMWORD PTR [r13+0x28],xmm5
   5d80d:	movdqu xmm6,XMMWORD PTR [rdx+0x30]
   5d812:	movups XMMWORD PTR [r13+0x38],xmm6
   5d817:	movdqu xmm7,XMMWORD PTR [rdx+0x40]
   5d81c:	movups XMMWORD PTR [r13+0x48],xmm7
   5d821:	movdqu xmm3,XMMWORD PTR [rdx+0x50]
   5d826:	movups XMMWORD PTR [r13+0x58],xmm3
   5d82b:	mov    rdx,QWORD PTR [rdx+0x60]
   5d82f:	mov    QWORD PTR [r13+0x68],rdx
   5d833:	movdqu xmm4,XMMWORD PTR [rax]
   5d837:	movups XMMWORD PTR [rdi],xmm4
   5d83a:	movdqu xmm5,XMMWORD PTR [rax+0x10]
   5d83f:	movups XMMWORD PTR [rdi+0x10],xmm5
   5d843:	movdqu xmm6,XMMWORD PTR [rax+0x20]
   5d848:	mov    rax,QWORD PTR [rip+0x2ad61]        # 885b0 <img>
   5d84f:	movups XMMWORD PTR [rdi+0x20],xmm6
   5d853:	mov    rdi,QWORD PTR [rax+0x3748]
   5d85a:	mov    edx,0x1
   5d85f:	mov    r13d,DWORD PTR [rdi+0x4]
   5d863:	test   r13d,r13d
   5d866:	jne    5d86a <reset_coding_state+0x11a>
   5d868:	mov    edx,DWORD PTR [rbx]
   5d86a:	cmp    edx,ecx
   5d86c:	jg     5d7b8 <reset_coding_state+0x68>
   5d872:	mov    rax,QWORD PTR [rsi]
   5d875:	lea    rdi,[r11+0x8]
   5d879:	mov    edx,0x2f60
   5d87e:	and    rdi,0xfffffffffffffff8
   5d882:	mov    QWORD PTR [r11],rax
   5d885:	mov    rax,QWORD PTR [rsi+0x5d8]
   5d88c:	mov    QWORD PTR [r11+0x5d8],rax
   5d893:	sub    r11,rdi
   5d896:	sub    rsi,r11
   5d899:	add    r11d,0x5e0
   5d8a0:	shr    r11d,0x3
   5d8a4:	mov    ecx,r11d
   5d8a7:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   5d8aa:	mov    rsi,r9
   5d8ad:	mov    rdi,r8
   5d8b0:	call   4440 <memcpy@plt>
   5d8b5:	imul   r12,r12,0x278
   5d8bc:	mov    eax,DWORD PTR [rbx+0x30]
   5d8bf:	add    rbp,r12
   5d8c2:	mov    DWORD PTR [rbp+0x0],eax
   5d8c5:	movdqu xmm7,XMMWORD PTR [rbx+0x34]
   5d8ca:	movups XMMWORD PTR [rbp+0x14],xmm7
   5d8ce:	movdqu xmm7,XMMWORD PTR [rbx+0x44]
   5d8d3:	movups XMMWORD PTR [rbp+0x24],xmm7
   5d8d7:	movdqu xmm7,XMMWORD PTR [rbx+0x54]
   5d8dc:	movups XMMWORD PTR [rbp+0x4c],xmm7
   5d8e0:	movdqu xmm0,XMMWORD PTR [rbx+0x64]
   5d8e5:	movups XMMWORD PTR [rbp+0x5c],xmm0
   5d8e9:	movdqu xmm1,XMMWORD PTR [rbx+0x74]
   5d8ee:	movups XMMWORD PTR [rbp+0x6c],xmm1
   5d8f2:	movdqu xmm2,XMMWORD PTR [rbx+0x84]
   5d8fa:	movups XMMWORD PTR [rbp+0x7c],xmm2
   5d8fe:	movdqu xmm3,XMMWORD PTR [rbx+0x94]
   5d906:	movups XMMWORD PTR [rbp+0x8c],xmm3
   5d90d:	movdqu xmm4,XMMWORD PTR [rbx+0xa4]
   5d915:	movups XMMWORD PTR [rbp+0x9c],xmm4
   5d91c:	movdqu xmm5,XMMWORD PTR [rbx+0xb4]
   5d924:	movups XMMWORD PTR [rbp+0xac],xmm5
   5d92b:	movdqu xmm6,XMMWORD PTR [rbx+0xc4]
   5d933:	movups XMMWORD PTR [rbp+0xbc],xmm6
   5d93a:	movdqu xmm7,XMMWORD PTR [rbx+0xd4]
   5d942:	movups XMMWORD PTR [rbp+0xcc],xmm7
   5d949:	movdqu xmm0,XMMWORD PTR [rbx+0xe4]
   5d951:	movups XMMWORD PTR [rbp+0xdc],xmm0
   5d958:	movdqu xmm1,XMMWORD PTR [rbx+0xf4]
   5d960:	movups XMMWORD PTR [rbp+0xec],xmm1
   5d967:	movdqu xmm2,XMMWORD PTR [rbx+0x104]
   5d96f:	movups XMMWORD PTR [rbp+0xfc],xmm2
   5d976:	movdqu xmm3,XMMWORD PTR [rbx+0x114]
   5d97e:	movups XMMWORD PTR [rbp+0x10c],xmm3
   5d985:	movdqu xmm4,XMMWORD PTR [rbx+0x124]
   5d98d:	movups XMMWORD PTR [rbp+0x11c],xmm4
   5d994:	movdqu xmm5,XMMWORD PTR [rbx+0x134]
   5d99c:	movups XMMWORD PTR [rbp+0x12c],xmm5
   5d9a3:	movdqu xmm6,XMMWORD PTR [rbx+0x144]
   5d9ab:	movups XMMWORD PTR [rbp+0x13c],xmm6
   5d9b2:	mov    rax,QWORD PTR [rbx+0x158]
   5d9b9:	mov    QWORD PTR [rbp+0x1f8],rax
   5d9c0:	pop    rbx
   5d9c1:	pop    rbp
   5d9c2:	pop    r12
   5d9c4:	pop    r13
   5d9c6:	pop    r14
   5d9c8:	ret    
   5d9c9:	nop    DWORD PTR [rax+0x0]
   5d9d0:	mov    rcx,QWORD PTR [rax+0x3750]
   5d9d7:	mov    rax,rdx
   5d9da:	shl    rax,0x4
   5d9de:	mov    rdi,QWORD PTR [rcx+0x18]
   5d9e2:	sub    rax,rdx
   5d9e5:	lea    rax,[rdi+rax*8]
   5d9e9:	mov    rcx,QWORD PTR [rax]
   5d9ec:	lea    rax,[rdx+rdx*2]
   5d9f0:	add    rdx,0x1
   5d9f4:	shl    rax,0x4
   5d9f8:	add    rax,QWORD PTR [rbx+0x10]
   5d9fc:	movdqu xmm0,XMMWORD PTR [rax]
   5da00:	movups XMMWORD PTR [rcx],xmm0
   5da03:	movdqu xmm1,XMMWORD PTR [rax+0x10]
   5da08:	movups XMMWORD PTR [rcx+0x10],xmm1
   5da0c:	movdqu xmm2,XMMWORD PTR [rax+0x20]
   5da11:	mov    rax,QWORD PTR [rip+0x2ab98]        # 885b0 <img>
   5da18:	movups XMMWORD PTR [rcx+0x20],xmm2
   5da1c:	mov    rsi,QWORD PTR [rax+0x3748]
   5da23:	mov    ecx,0x1
   5da28:	mov    esi,DWORD PTR [rsi+0x4]
   5da2b:	test   esi,esi
   5da2d:	jne    5da31 <reset_coding_state+0x2e1>
   5da2f:	mov    ecx,DWORD PTR [rbx]
   5da31:	cmp    ecx,edx
   5da33:	jg     5d9d0 <reset_coding_state+0x280>
   5da35:	jmp    5d8b5 <reset_coding_state+0x165>
   5da3a:	nop    WORD PTR [rax+rax*1+0x0]
   5da40:	ret    
   5da41:	nop    WORD PTR cs:[rax+rax*1+0x0]
   5da4b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005da50 <rd_pic_decision>:
   5da50:	endbr64 
   5da54:	pxor   xmm3,xmm3
   5da58:	movapd xmm4,xmm2
   5da5c:	xor    eax,eax
   5da5e:	cvtsi2sd xmm3,edi
   5da62:	mulsd  xmm3,xmm2
   5da66:	pxor   xmm2,xmm2
   5da6a:	cvtsi2sd xmm2,esi
   5da6e:	mulsd  xmm2,xmm4
   5da72:	addsd  xmm3,xmm0
   5da76:	addsd  xmm2,xmm1
   5da7a:	comisd xmm2,xmm3
   5da7e:	ja     5da9d <rd_pic_decision+0x4d>
   5da80:	ucomisd xmm3,xmm2
   5da84:	jp     5da98 <rd_pic_decision+0x48>
   5da86:	jne    5da98 <rd_pic_decision+0x48>
   5da88:	xor    eax,eax
   5da8a:	comisd xmm1,xmm0
   5da8e:	setb   al
   5da91:	ret    
   5da92:	nop    WORD PTR [rax+rax*1+0x0]
   5da98:	mov    eax,0x1
   5da9d:	ret    
   5da9e:	xchg   ax,ax

000000000005daa0 <picture_coding_decision>:
   5daa0:	endbr64 
   5daa4:	mov    rax,QWORD PTR [rip+0x2ab0d]        # 885b8 <input>
   5daab:	push   r12
   5daad:	sub    edx,0xc
   5dab0:	pxor   xmm1,xmm1
   5dab4:	push   rbp
   5dab5:	cvtsi2sd xmm1,edx
   5dab9:	mov    rbp,rdi
   5dabc:	divsd  xmm1,QWORD PTR [rip+0xcfb4]        # 6aa78 <QP_SCALE_CR+0x38>
   5dac4:	push   rbx
   5dac5:	mov    eax,DWORD PTR [rax+0x4d4]
   5dacb:	mov    rbx,rsi
   5dace:	test   eax,eax
   5dad0:	je     5dbb0 <picture_coding_decision+0x110>
   5dad6:	mov    rax,QWORD PTR [rip+0x2aad3]        # 885b0 <img>
   5dadd:	movsd  xmm0,QWORD PTR [rip+0xcf9b]        # 6aa80 <QP_SCALE_CR+0x40>
   5dae5:	mov    r12d,DWORD PTR [rax+0x18]
   5dae9:	call   4360 <pow@plt>
   5daee:	movsd  xmm4,QWORD PTR [rip+0x19bd2]        # 776c8 <b8_mode_table.7699+0x68>
   5daf6:	and    r12d,0xfffffffd
   5dafa:	mulsd  xmm4,xmm0
   5dafe:	cmp    r12d,0x1
   5db02:	je     5db90 <picture_coding_decision+0xf0>
   5db08:	pxor   xmm1,xmm1
   5db0c:	pxor   xmm0,xmm0
   5db10:	xor    eax,eax
   5db12:	movss  xmm2,DWORD PTR [rbp+0x32c]
   5db1a:	cvtsi2sd xmm1,DWORD PTR [rbp+0x328]
   5db22:	addss  xmm2,DWORD PTR [rbp+0x330]
   5db2a:	movss  xmm3,DWORD PTR [rbx+0x32c]
   5db32:	addss  xmm2,DWORD PTR [rbp+0x334]
   5db3a:	addss  xmm3,DWORD PTR [rbx+0x330]
   5db42:	addss  xmm3,DWORD PTR [rbx+0x334]
   5db4a:	mulsd  xmm1,xmm4
   5db4e:	cvtss2sd xmm0,xmm2
   5db52:	addsd  xmm1,xmm0
   5db56:	pxor   xmm0,xmm0
   5db5a:	cvtsi2sd xmm0,DWORD PTR [rbx+0x328]
   5db62:	mulsd  xmm0,xmm4
   5db66:	pxor   xmm4,xmm4
   5db6a:	cvtss2sd xmm4,xmm3
   5db6e:	addsd  xmm0,xmm4
   5db72:	comisd xmm0,xmm1
   5db76:	ja     5db88 <picture_coding_decision+0xe8>
   5db78:	ucomisd xmm1,xmm0
   5db7c:	jp     5dba0 <picture_coding_decision+0x100>
   5db7e:	jne    5dba0 <picture_coding_decision+0x100>
   5db80:	xor    eax,eax
   5db82:	comiss xmm3,xmm2
   5db85:	setb   al
   5db88:	pop    rbx
   5db89:	pop    rbp
   5db8a:	pop    r12
   5db8c:	ret    
   5db8d:	nop    DWORD PTR [rax]
   5db90:	addsd  xmm4,xmm4
   5db94:	jmp    5db08 <picture_coding_decision+0x68>
   5db99:	nop    DWORD PTR [rax+0x0]
   5dba0:	pop    rbx
   5dba1:	mov    eax,0x1
   5dba6:	pop    rbp
   5dba7:	pop    r12
   5dba9:	ret    
   5dbaa:	nop    WORD PTR [rax+rax*1+0x0]
   5dbb0:	movsd  xmm0,QWORD PTR [rip+0xcec8]        # 6aa80 <QP_SCALE_CR+0x40>
   5dbb8:	call   4360 <pow@plt>
   5dbbd:	movsd  xmm4,QWORD PTR [rip+0x19b03]        # 776c8 <b8_mode_table.7699+0x68>
   5dbc5:	mulsd  xmm4,xmm0
   5dbc9:	jmp    5db08 <picture_coding_decision+0x68>
   5dbce:	xchg   ax,ax

000000000005dbd0 <PutPel_14>:
   5dbd0:	endbr64 
   5dbd4:	add    esi,0x10
   5dbd7:	add    edx,0x10
   5dbda:	movsxd rsi,esi
   5dbdd:	movsxd rdx,edx
   5dbe0:	mov    rax,QWORD PTR [rdi+rsi*8]
   5dbe4:	mov    WORD PTR [rax+rdx*2],cx
   5dbe8:	ret    
   5dbe9:	nop    DWORD PTR [rax+0x0]

000000000005dbf0 <PutPel_11>:
   5dbf0:	endbr64 
   5dbf4:	imul   esi,r8d
   5dbf8:	add    esi,edx
   5dbfa:	movsxd rsi,esi
   5dbfd:	mov    WORD PTR [rdi+rsi*2],cx
   5dc01:	ret    
   5dc02:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5dc0d:	nop    DWORD PTR [rax]

000000000005dc10 <FastLine16Y_11>:
   5dc10:	endbr64 
   5dc14:	imul   esi,r8d
   5dc18:	add    esi,edx
   5dc1a:	movsxd rsi,esi
   5dc1d:	lea    rax,[rdi+rsi*2]
   5dc21:	ret    
   5dc22:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5dc2d:	nop    DWORD PTR [rax]

000000000005dc30 <UMVLine16Y_11>:
   5dc30:	endbr64 
   5dc34:	cmp    ecx,esi
   5dc36:	jg     5dce0 <UMVLine16Y_11+0xb0>
   5dc3c:	test   ecx,ecx
   5dc3e:	jg     5dd78 <UMVLine16Y_11+0x148>
   5dc44:	test   edx,edx
   5dc46:	js     5dcfd <UMVLine16Y_11+0xcd>
   5dc4c:	lea    eax,[r8-0xf]
   5dc50:	cmp    eax,edx
   5dc52:	jg     5dd90 <UMVLine16Y_11+0x160>
   5dc58:	cmp    r8d,edx
   5dc5b:	jle    5dda0 <UMVLine16Y_11+0x170>
   5dc61:	movsxd rax,edx
   5dc64:	lea    r9,[rip+0x2b915]        # 89580 <line>
   5dc6b:	mov    rcx,rax
   5dc6e:	neg    rcx
   5dc71:	lea    rsi,[r9+rcx*2]
   5dc75:	nop    DWORD PTR [rax]
   5dc78:	movzx  ecx,WORD PTR [rdi+rax*2]
   5dc7c:	mov    WORD PTR [rsi+rax*2],cx
   5dc80:	add    rax,0x1
   5dc84:	cmp    r8d,eax
   5dc87:	jg     5dc78 <UMVLine16Y_11+0x48>
   5dc89:	cmp    r8d,edx
   5dc8c:	mov    r10d,edx
   5dc8f:	lea    eax,[rdx+0x10]
   5dc92:	cmovge r10d,r8d
   5dc96:	cmp    eax,r10d
   5dc99:	jle    5dcd8 <UMVLine16Y_11+0xa8>
   5dc9b:	mov    ecx,r10d
   5dc9e:	movsxd r8,r8d
   5dca1:	sub    ecx,edx
   5dca3:	add    edx,0xf
   5dca6:	lea    rsi,[rdi+r8*2-0x2]
   5dcab:	movsxd rcx,ecx
   5dcae:	sub    edx,r10d
   5dcb1:	add    rdx,rcx
   5dcb4:	lea    rax,[r9+rcx*2]
   5dcb8:	lea    rcx,[rip+0x2b8c3]        # 89582 <line+0x2>
   5dcbf:	lea    rcx,[rcx+rdx*2]
   5dcc3:	nop    DWORD PTR [rax+rax*1+0x0]
   5dcc8:	movzx  edx,WORD PTR [rsi]
   5dccb:	add    rax,0x2
   5dccf:	mov    WORD PTR [rax-0x2],dx
   5dcd3:	cmp    rax,rcx
   5dcd6:	jne    5dcc8 <UMVLine16Y_11+0x98>
   5dcd8:	lea    rax,[rip+0x2b8a1]        # 89580 <line>
   5dcdf:	ret    
   5dce0:	test   esi,esi
   5dce2:	mov    eax,0x0
   5dce7:	cmovs  esi,eax
   5dcea:	imul   esi,r8d
   5dcee:	movsxd rsi,esi
   5dcf1:	lea    rdi,[rdi+rsi*2]
   5dcf5:	test   edx,edx
   5dcf7:	jns    5dc4c <UMVLine16Y_11+0x1c>
   5dcfd:	cmp    edx,0xfffffff0
   5dd00:	mov    ecx,0xfffffff0
   5dd05:	lea    r9,[rip+0x2b874]        # 89580 <line>
   5dd0c:	cmovle ecx,edx
   5dd0f:	lea    eax,[rcx+0x10]
   5dd12:	cmp    edx,eax
   5dd14:	jge    5dd40 <UMVLine16Y_11+0x110>
   5dd16:	sub    ecx,edx
   5dd18:	mov    rax,r9
   5dd1b:	lea    esi,[rcx+0xf]
   5dd1e:	lea    rcx,[r9+0x2]
   5dd22:	lea    rsi,[rcx+rsi*2]
   5dd26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   5dd30:	movzx  ecx,WORD PTR [rdi]
   5dd33:	add    rax,0x2
   5dd37:	mov    WORD PTR [rax-0x2],cx
   5dd3b:	cmp    rax,rsi
   5dd3e:	jne    5dd30 <UMVLine16Y_11+0x100>
   5dd40:	cmp    edx,0xfffffff1
   5dd43:	jl     5dcd8 <UMVLine16Y_11+0xa8>
   5dd45:	lea    esi,[rdx+0xf]
   5dd48:	neg    edx
   5dd4a:	xor    eax,eax
   5dd4c:	movsxd rdx,edx
   5dd4f:	lea    rcx,[r9+rdx*2]
   5dd53:	nop    DWORD PTR [rax+rax*1+0x0]
   5dd58:	movzx  edx,WORD PTR [rdi+rax*2]
   5dd5c:	mov    WORD PTR [rcx+rax*2],dx
   5dd60:	mov    rdx,rax
   5dd63:	add    rax,0x1
   5dd67:	cmp    rsi,rdx
   5dd6a:	jne    5dd58 <UMVLine16Y_11+0x128>
   5dd6c:	lea    rax,[rip+0x2b80d]        # 89580 <line>
   5dd73:	ret    
   5dd74:	nop    DWORD PTR [rax+0x0]
   5dd78:	sub    ecx,0x1
   5dd7b:	imul   ecx,r8d
   5dd7f:	movsxd rcx,ecx
   5dd82:	lea    rdi,[rdi+rcx*2]
   5dd86:	jmp    5dc44 <UMVLine16Y_11+0x14>
   5dd8b:	nop    DWORD PTR [rax+rax*1+0x0]
   5dd90:	movsxd rdx,edx
   5dd93:	lea    rax,[rdi+rdx*2]
   5dd97:	ret    
   5dd98:	nop    DWORD PTR [rax+rax*1+0x0]
   5dda0:	lea    r9,[rip+0x2b7d9]        # 89580 <line>
   5dda7:	jmp    5dc89 <UMVLine16Y_11+0x59>
   5ddac:	nop    DWORD PTR [rax+0x0]

000000000005ddb0 <FastLineX>:
   5ddb0:	endbr64 
   5ddb4:	imul   edx,r9d
   5ddb8:	movsxd rcx,ecx
   5ddbb:	movsxd r9,edx
   5ddbe:	add    r9,rcx
   5ddc1:	lea    rax,[rsi+r9*2]
   5ddc5:	ret    
   5ddc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000005ddd0 <UMVLineX>:
   5ddd0:	endbr64 
   5ddd4:	cmp    r8d,edx
   5ddd7:	jg     5de90 <UMVLineX+0xc0>
   5dddd:	test   r8d,r8d
   5dde0:	jg     5df28 <UMVLineX+0x158>
   5dde6:	test   ecx,ecx
   5dde8:	js     5dead <UMVLineX+0xdd>
   5ddee:	mov    eax,r9d
   5ddf1:	sub    eax,edi
   5ddf3:	cmp    eax,ecx
   5ddf5:	jge    5df40 <UMVLineX+0x170>
   5ddfb:	cmp    r9d,ecx
   5ddfe:	jle    5df50 <UMVLineX+0x180>
   5de04:	movsxd rax,ecx
   5de07:	lea    r10,[rip+0x2b772]        # 89580 <line>
   5de0e:	mov    rdx,rax
   5de11:	neg    rdx
   5de14:	lea    r8,[r10+rdx*2]
   5de18:	nop    DWORD PTR [rax+rax*1+0x0]
   5de20:	movzx  edx,WORD PTR [rsi+rax*2]
   5de24:	mov    WORD PTR [r8+rax*2],dx
   5de29:	add    rax,0x1
   5de2d:	cmp    r9d,eax
   5de30:	jg     5de20 <UMVLineX+0x50>
   5de32:	add    edi,ecx
   5de34:	mov    r8d,ecx
   5de37:	cmp    r9d,ecx
   5de3a:	cmovge r8d,r9d
   5de3e:	cmp    edi,r8d
   5de41:	jle    5de80 <UMVLineX+0xb0>
   5de43:	mov    edx,r8d
   5de46:	sub    edi,0x1
   5de49:	movsxd r9,r9d
   5de4c:	sub    edx,ecx
   5de4e:	sub    edi,r8d
   5de51:	lea    rsi,[rsi+r9*2-0x2]
   5de56:	movsxd rdx,edx
   5de59:	add    rdi,rdx
   5de5c:	lea    rax,[r10+rdx*2]
   5de60:	lea    rdx,[rip+0x2b71b]        # 89582 <line+0x2>
   5de67:	lea    rcx,[rdx+rdi*2]
   5de6b:	nop    DWORD PTR [rax+rax*1+0x0]
   5de70:	movzx  edx,WORD PTR [rsi]
   5de73:	add    rax,0x2
   5de77:	mov    WORD PTR [rax-0x2],dx
   5de7b:	cmp    rax,rcx
   5de7e:	jne    5de70 <UMVLineX+0xa0>
   5de80:	lea    rax,[rip+0x2b6f9]        # 89580 <line>
   5de87:	ret    
   5de88:	nop    DWORD PTR [rax+rax*1+0x0]
   5de90:	test   edx,edx
   5de92:	mov    eax,0x0
   5de97:	cmovs  edx,eax
   5de9a:	imul   edx,r9d
   5de9e:	movsxd rdx,edx
   5dea1:	lea    rsi,[rsi+rdx*2]
   5dea5:	test   ecx,ecx
   5dea7:	jns    5ddee <UMVLineX+0x1e>
   5dead:	add    edi,ecx
   5deaf:	mov    edx,0x0
   5deb4:	lea    r10,[rip+0x2b6c5]        # 89580 <line>
   5debb:	test   edi,edi
   5debd:	cmovle edx,edi
   5dec0:	cmp    ecx,edx
   5dec2:	jge    5def0 <UMVLineX+0x120>
   5dec4:	mov    r8d,ecx
   5dec7:	mov    rax,r10
   5deca:	not    r8d
   5decd:	add    r8d,edx
   5ded0:	lea    rdx,[r10+0x2]
   5ded4:	lea    r8,[rdx+r8*2]
   5ded8:	nop    DWORD PTR [rax+rax*1+0x0]
   5dee0:	movzx  edx,WORD PTR [rsi]
   5dee3:	add    rax,0x2
   5dee7:	mov    WORD PTR [rax-0x2],dx
   5deeb:	cmp    rax,r8
   5deee:	jne    5dee0 <UMVLineX+0x110>
   5def0:	test   edi,edi
   5def2:	jle    5de80 <UMVLineX+0xb0>
   5def4:	neg    ecx
   5def6:	sub    edi,0x1
   5def9:	xor    eax,eax
   5defb:	movsxd rcx,ecx
   5defe:	lea    rcx,[r10+rcx*2]
   5df02:	nop    WORD PTR [rax+rax*1+0x0]
   5df08:	movzx  edx,WORD PTR [rsi+rax*2]
   5df0c:	mov    WORD PTR [rcx+rax*2],dx
   5df10:	mov    rdx,rax
   5df13:	add    rax,0x1
   5df17:	cmp    rdi,rdx
   5df1a:	jne    5df08 <UMVLineX+0x138>
   5df1c:	lea    rax,[rip+0x2b65d]        # 89580 <line>
   5df23:	ret    
   5df24:	nop    DWORD PTR [rax+0x0]
   5df28:	sub    r8d,0x1
   5df2c:	imul   r8d,r9d
   5df30:	movsxd r8,r8d
   5df33:	lea    rsi,[rsi+r8*2]
   5df37:	jmp    5dde6 <UMVLineX+0x16>
   5df3c:	nop    DWORD PTR [rax+0x0]
   5df40:	movsxd rcx,ecx
   5df43:	lea    rax,[rsi+rcx*2]
   5df47:	ret    
   5df48:	nop    DWORD PTR [rax+rax*1+0x0]
   5df50:	lea    r10,[rip+0x2b629]        # 89580 <line>
   5df57:	jmp    5de32 <UMVLineX+0x62>
   5df5c:	nop    DWORD PTR [rax+0x0]

000000000005df60 <UMVPelY_14>:
   5df60:	endbr64 
   5df64:	lea    eax,[rcx*4+0x1c]
   5df6b:	add    esi,0x10
   5df6e:	add    edx,0x10
   5df71:	js     5dfc0 <UMVPelY_14+0x60>
   5df73:	lea    ecx,[r8*4+0x1c]
   5df7b:	cmp    ecx,edx
   5df7d:	jl     5dfa0 <UMVPelY_14+0x40>
   5df7f:	movsxd rdx,edx
   5df82:	test   esi,esi
   5df84:	js     5dfac <UMVPelY_14+0x4c>
   5df86:	cmp    eax,esi
   5df88:	jl     5dfcb <UMVPelY_14+0x6b>
   5df8a:	movsxd rsi,esi
   5df8d:	mov    rax,QWORD PTR [rdi+rsi*8]
   5df91:	movzx  eax,WORD PTR [rax+rdx*2]
   5df95:	ret    
   5df96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   5dfa0:	and    edx,0x3
   5dfa3:	add    edx,ecx
   5dfa5:	movsxd rdx,edx
   5dfa8:	test   esi,esi
   5dfaa:	jns    5df86 <UMVPelY_14+0x26>
   5dfac:	and    esi,0x3
   5dfaf:	mov    rax,QWORD PTR [rdi+rsi*8]
   5dfb3:	movzx  eax,WORD PTR [rax+rdx*2]
   5dfb7:	ret    
   5dfb8:	nop    DWORD PTR [rax+rax*1+0x0]
   5dfc0:	and    edx,0x3
   5dfc3:	test   esi,esi
   5dfc5:	js     5dfac <UMVPelY_14+0x4c>
   5dfc7:	cmp    eax,esi
   5dfc9:	jge    5df8a <UMVPelY_14+0x2a>
   5dfcb:	and    esi,0x3
   5dfce:	add    esi,eax
   5dfd0:	movsxd rsi,esi
   5dfd3:	mov    rax,QWORD PTR [rdi+rsi*8]
   5dfd7:	movzx  eax,WORD PTR [rax+rdx*2]
   5dfdb:	ret    
   5dfdc:	nop    DWORD PTR [rax+0x0]

000000000005dfe0 <FastPelY_14>:
   5dfe0:	endbr64 
   5dfe4:	add    esi,0x10
   5dfe7:	add    edx,0x10
   5dfea:	movsxd rsi,esi
   5dfed:	movsxd rdx,edx
   5dff0:	mov    rax,QWORD PTR [rdi+rsi*8]
   5dff4:	movzx  eax,WORD PTR [rax+rdx*2]
   5dff8:	ret    
   5dff9:	nop    DWORD PTR [rax+0x0]

000000000005e000 <ComposeRTPPacket>:
   5e000:	endbr64 
   5e004:	push   rbx
   5e005:	movzx  esi,BYTE PTR [rdi+0x8]
   5e009:	mov    rbx,rdi
   5e00c:	movzx  eax,BYTE PTR [rdi+0x4]
   5e010:	mov    rcx,QWORD PTR [rdi+0x38]
   5e014:	lea    edx,[rsi*8+0x0]
   5e01b:	shl    eax,0x2
   5e01e:	or     eax,edx
   5e020:	movzx  edx,BYTE PTR [rdi+0xc]
   5e024:	or     al,BYTE PTR [rdi]
   5e026:	shl    edx,0x4
   5e029:	or     eax,edx
   5e02b:	mov    BYTE PTR [rcx],al
   5e02d:	movzx  eax,BYTE PTR [rdi+0x14]
   5e031:	mov    rdx,QWORD PTR [rdi+0x38]
   5e035:	add    eax,eax
   5e037:	or     al,BYTE PTR [rdi+0x10]
   5e03a:	mov    BYTE PTR [rdx+0x1],al
   5e03d:	mov    rax,QWORD PTR [rdi+0x38]
   5e041:	mov    edx,DWORD PTR [rdi+0x18]
   5e044:	mov    BYTE PTR [rax+0x2],dl
   5e047:	mov    rax,QWORD PTR [rdi+0x38]
   5e04b:	mov    edx,DWORD PTR [rdi+0x18]
   5e04e:	mov    BYTE PTR [rax+0x3],dh
   5e051:	mov    rax,QWORD PTR [rdi+0x38]
   5e055:	mov    edx,DWORD PTR [rdi+0x1c]
   5e058:	mov    DWORD PTR [rax+0x4],edx
   5e05b:	mov    rax,QWORD PTR [rdi+0x38]
   5e05f:	mov    edx,DWORD PTR [rdi+0x20]
   5e062:	mov    DWORD PTR [rax+0x8],edx
   5e065:	mov    rax,QWORD PTR [rdi+0x38]
   5e069:	mov    edx,DWORD PTR [rbx+0x30]
   5e06c:	mov    rsi,QWORD PTR [rbx+0x28]
   5e070:	lea    rdi,[rax+0xc]
   5e074:	call   4440 <memcpy@plt>
   5e079:	mov    eax,DWORD PTR [rbx+0x30]
   5e07c:	add    eax,0xc
   5e07f:	mov    DWORD PTR [rbx+0x40],eax
   5e082:	xor    eax,eax
   5e084:	pop    rbx
   5e085:	ret    
   5e086:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000005e090 <WriteRTPPacket>:
   5e090:	endbr64 
   5e094:	push   r12
   5e096:	mov    rcx,rsi
   5e099:	mov    r12,rsi
   5e09c:	mov    edx,0x1
   5e0a1:	push   rbx
   5e0a2:	mov    esi,0x4
   5e0a7:	mov    rbx,rdi
   5e0aa:	add    rdi,0x40
   5e0ae:	sub    rsp,0x18
   5e0b2:	mov    rax,QWORD PTR fs:0x28
   5e0bb:	mov    QWORD PTR [rsp+0x8],rax
   5e0c0:	xor    eax,eax
   5e0c2:	mov    DWORD PTR [rsp+0x4],0xffffffff
   5e0ca:	call   44f0 <fwrite@plt>
   5e0cf:	cmp    rax,0x1
   5e0d3:	jne    5e130 <WriteRTPPacket+0xa0>
   5e0d5:	lea    rdi,[rsp+0x4]
   5e0da:	mov    rcx,r12
   5e0dd:	mov    edx,0x1
   5e0e2:	mov    esi,0x4
   5e0e7:	call   44f0 <fwrite@plt>
   5e0ec:	cmp    rax,0x1
   5e0f0:	jne    5e130 <WriteRTPPacket+0xa0>
   5e0f2:	mov    esi,DWORD PTR [rbx+0x40]
   5e0f5:	mov    rdi,QWORD PTR [rbx+0x38]
   5e0f9:	mov    rcx,r12
   5e0fc:	mov    edx,0x1
   5e101:	call   44f0 <fwrite@plt>
   5e106:	cmp    rax,0x1
   5e10a:	setne  al
   5e10d:	movzx  eax,al
   5e110:	neg    eax
   5e112:	mov    rdx,QWORD PTR [rsp+0x8]
   5e117:	xor    rdx,QWORD PTR fs:0x28
   5e120:	jne    5e137 <WriteRTPPacket+0xa7>
   5e122:	add    rsp,0x18
   5e126:	pop    rbx
   5e127:	pop    r12
   5e129:	ret    
   5e12a:	nop    WORD PTR [rax+rax*1+0x0]
   5e130:	mov    eax,0xffffffff
   5e135:	jmp    5e112 <WriteRTPPacket+0x82>
   5e137:	call   4390 <__stack_chk_fail@plt>
   5e13c:	nop    DWORD PTR [rax+0x0]

000000000005e140 <WriteRTPNALU>:
   5e140:	endbr64 
   5e144:	push   rbp
   5e145:	push   rbx
   5e146:	mov    rbx,rdi
   5e149:	sub    rsp,0x8
   5e14d:	mov    eax,DWORD PTR [rdi+0x14]
   5e150:	mov    edx,DWORD PTR [rdi+0x10]
   5e153:	mov    rcx,QWORD PTR [rdi+0x18]
   5e157:	shl    edx,0x5
   5e15a:	shl    eax,0x7
   5e15d:	or     eax,edx
   5e15f:	or     al,BYTE PTR [rdi+0xc]
   5e162:	mov    edi,0x48
   5e167:	mov    BYTE PTR [rcx],al
   5e169:	call   4460 <malloc@plt>
   5e16e:	mov    rbp,rax
   5e171:	test   rax,rax
   5e174:	je     5e244 <WriteRTPNALU+0x104>
   5e17a:	mov    edi,0xffe4
   5e17f:	call   4460 <malloc@plt>
   5e184:	mov    QWORD PTR [rbp+0x38],rax
   5e188:	test   rax,rax
   5e18b:	je     5e29c <WriteRTPNALU+0x15c>
   5e191:	mov    edi,0xffe4
   5e196:	call   4460 <malloc@plt>
   5e19b:	mov    QWORD PTR [rbp+0x28],rax
   5e19f:	mov    rdi,rax
   5e1a2:	test   rax,rax
   5e1a5:	je     5e287 <WriteRTPNALU+0x147>
   5e1ab:	xor    eax,eax
   5e1ad:	cmp    DWORD PTR [rbx],0x4
   5e1b0:	mov    rsi,QWORD PTR [rbx+0x18]
   5e1b4:	mov    QWORD PTR [rbp+0x0],0x2
   5e1bc:	sete   al
   5e1bf:	mov    QWORD PTR [rbp+0x8],0x0
   5e1c7:	mov    DWORD PTR [rbp+0x10],eax
   5e1ca:	mov    eax,DWORD PTR [rip+0x2b3d0]        # 895a0 <CurrentRTPSequenceNumber>
   5e1d0:	mov    DWORD PTR [rbp+0x14],0x69
   5e1d7:	lea    edx,[rax+0x1]
   5e1da:	mov    DWORD PTR [rbp+0x18],eax
   5e1dd:	mov    eax,DWORD PTR [rip+0x2b3c1]        # 895a4 <CurrentRTPTimestamp>
   5e1e3:	mov    DWORD PTR [rip+0x2b3b7],edx        # 895a0 <CurrentRTPSequenceNumber>
   5e1e9:	mov    edx,DWORD PTR [rbx+0x4]
   5e1ec:	mov    DWORD PTR [rbp+0x1c],eax
   5e1ef:	mov    DWORD PTR [rbp+0x20],0x12345678
   5e1f6:	mov    DWORD PTR [rbp+0x30],edx
   5e1f9:	call   4440 <memcpy@plt>
   5e1fe:	mov    rdi,rbp
   5e201:	call   5e000 <ComposeRTPPacket>
   5e206:	test   eax,eax
   5e208:	js     5e273 <WriteRTPNALU+0x133>
   5e20a:	mov    rsi,QWORD PTR [rip+0x84e17]        # e3028 <f>
   5e211:	mov    rdi,rbp
   5e214:	call   5e090 <WriteRTPPacket>
   5e219:	test   eax,eax
   5e21b:	js     5e255 <WriteRTPNALU+0x115>
   5e21d:	mov    rdi,QWORD PTR [rbp+0x38]
   5e221:	call   42d0 <free@plt>
   5e226:	mov    rdi,QWORD PTR [rbp+0x28]
   5e22a:	call   42d0 <free@plt>
   5e22f:	mov    rdi,rbp
   5e232:	call   42d0 <free@plt>
   5e237:	mov    eax,DWORD PTR [rbx+0x4]
   5e23a:	add    rsp,0x8
   5e23e:	pop    rbx
   5e23f:	pop    rbp
   5e240:	shl    eax,0x3
   5e243:	ret    
   5e244:	lea    rdi,[rip+0x194f6]        # 77741 <b8_mode_table.7699+0xe1>
   5e24b:	call   38210 <no_mem_exit>
   5e250:	jmp    5e17a <WriteRTPNALU+0x3a>
   5e255:	mov    edx,DWORD PTR [rbp+0x40]
   5e258:	mov    edi,0x1
   5e25d:	lea    rsi,[rip+0x1952c]        # 77790 <b8_mode_table.7699+0x130>
   5e264:	xor    eax,eax
   5e266:	call   4490 <__printf_chk@plt>
   5e26b:	or     edi,0xffffffff
   5e26e:	call   44e0 <exit@plt>
   5e273:	lea    rdi,[rip+0x194f6]        # 77770 <b8_mode_table.7699+0x110>
   5e27a:	call   4320 <puts@plt>
   5e27f:	or     edi,0xffffffff
   5e282:	call   44e0 <exit@plt>
   5e287:	lea    rdi,[rip+0x194d1]        # 7775f <b8_mode_table.7699+0xff>
   5e28e:	call   38210 <no_mem_exit>
   5e293:	mov    rdi,QWORD PTR [rbp+0x28]
   5e297:	jmp    5e1ab <WriteRTPNALU+0x6b>
   5e29c:	lea    rdi,[rip+0x194ad]        # 77750 <b8_mode_table.7699+0xf0>
   5e2a3:	call   38210 <no_mem_exit>
   5e2a8:	jmp    5e191 <WriteRTPNALU+0x51>
   5e2ad:	nop    DWORD PTR [rax]

000000000005e2b0 <RTPUpdateTimestamp>:
   5e2b0:	endbr64 
   5e2b4:	mov    eax,DWORD PTR [rip+0x2a5a6]        # 88860 <oldtr.4878>
   5e2ba:	cmp    eax,0xffffffff
   5e2bd:	je     5e2e8 <RTPUpdateTimestamp+0x38>
   5e2bf:	mov    ecx,edi
   5e2c1:	mov    DWORD PTR [rip+0x2a599],edi        # 88860 <oldtr.4878>
   5e2c7:	sub    ecx,eax
   5e2c9:	cmp    ecx,0xfffffff6
   5e2cc:	mov    eax,ecx
   5e2ce:	lea    edx,[rcx+0x100]
   5e2d4:	cmovl  eax,edx
   5e2d7:	imul   eax,eax,0x3e8
   5e2dd:	add    DWORD PTR [rip+0x2b2c1],eax        # 895a4 <CurrentRTPTimestamp>
   5e2e3:	ret    
   5e2e4:	nop    DWORD PTR [rax+0x0]
   5e2e8:	mov    DWORD PTR [rip+0x2b2b2],0x0        # 895a4 <CurrentRTPTimestamp>
   5e2f2:	mov    DWORD PTR [rip+0x2a564],0x0        # 88860 <oldtr.4878>
   5e2fc:	ret    
   5e2fd:	nop    DWORD PTR [rax]

000000000005e300 <OpenRTPFile>:
   5e300:	endbr64 
   5e304:	push   r12
   5e306:	lea    rsi,[rip+0xbcf7]        # 6a004 <_IO_stdin_used+0x4>
   5e30d:	mov    r12,rdi
   5e310:	call   44c0 <fopen@plt>
   5e315:	mov    QWORD PTR [rip+0x84d0c],rax        # e3028 <f>
   5e31c:	test   rax,rax
   5e31f:	je     5e324 <OpenRTPFile+0x24>
   5e321:	pop    r12
   5e323:	ret    
   5e324:	mov    edi,0x1
   5e329:	mov    rdx,r12
   5e32c:	lea    rsi,[rip+0x19495]        # 777c8 <b8_mode_table.7699+0x168>
   5e333:	call   4490 <__printf_chk@plt>
   5e338:	or     edi,0xffffffff
   5e33b:	call   44e0 <exit@plt>

000000000005e340 <CloseRTPFile>:
   5e340:	endbr64 
   5e344:	mov    rdi,QWORD PTR [rip+0x84cdd]        # e3028 <f>
   5e34b:	jmp    4370 <fclose@plt>

000000000005e350 <HaveAggregationSEI>:
   5e350:	endbr64 
   5e354:	mov    edi,DWORD PTR [rip+0x84ebe]        # e3218 <sei_message+0x18>
   5e35a:	test   edi,edi
   5e35c:	je     5e378 <HaveAggregationSEI+0x28>
   5e35e:	mov    rdx,QWORD PTR [rip+0x2a24b]        # 885b0 <img>
   5e365:	mov    eax,0x1
   5e36a:	cmp    DWORD PTR [rdx+0x18],0x1
   5e36e:	je     5e378 <HaveAggregationSEI+0x28>
   5e370:	ret    
   5e371:	nop    DWORD PTR [rax+0x0]
   5e378:	mov    esi,DWORD PTR [rip+0x2b236]        # 895b4 <seiHasSubseqInfo>
   5e37e:	mov    eax,0x1
   5e383:	test   esi,esi
   5e385:	jne    5e370 <HaveAggregationSEI+0x20>
   5e387:	mov    ecx,DWORD PTR [rip+0x2b223]        # 895b0 <seiHasSubseqLayerInfo>
   5e38d:	test   ecx,ecx
   5e38f:	je     5e39e <HaveAggregationSEI+0x4e>
   5e391:	mov    rdx,QWORD PTR [rip+0x2a218]        # 885b0 <img>
   5e398:	mov    edx,DWORD PTR [rdx]
   5e39a:	test   edx,edx
   5e39c:	je     5e370 <HaveAggregationSEI+0x20>
   5e39e:	mov    eax,DWORD PTR [rip+0x2b208]        # 895ac <seiHasSubseqChar>
   5e3a4:	or     eax,DWORD PTR [rip+0x2b21e]        # 895c8 <seiHasSceneInformation>
   5e3aa:	or     eax,DWORD PTR [rip+0x2b1f8]        # 895a8 <seiHasPanScanRectInfo>
   5e3b0:	or     eax,DWORD PTR [rip+0x84e92]        # e3248 <seiHasUser_data_unregistered_info>
   5e3b6:	or     eax,DWORD PTR [rip+0x84d1c]        # e30d8 <seiHasUser_data_registered_itu_t_t35_info>
   5e3bc:	or     eax,DWORD PTR [rip+0x84d3e]        # e3100 <seiHasRandomAccess_info>
   5e3c2:	setne  al
   5e3c5:	movzx  eax,al
   5e3c8:	ret    
   5e3c9:	nop    DWORD PTR [rax+0x0]

000000000005e3d0 <write_sei_message>:
   5e3d0:	endbr64 
   5e3d4:	movsxd rdi,edi
   5e3d7:	lea    r10,[rip+0x84e22]        # e3200 <sei_message>
   5e3de:	push   r12
   5e3e0:	lea    rax,[rdi+rdi*2]
   5e3e4:	push   rbp
   5e3e5:	lea    r8,[r10+rax*8]
   5e3e9:	push   rbx
   5e3ea:	mov    ebx,edx
   5e3ec:	movsxd rax,DWORD PTR [r8+0x4]
   5e3f0:	cmp    ecx,0xff
   5e3f6:	jle    5e4a0 <write_sei_message+0xd0>
   5e3fc:	mov    r11d,0x1
   5e402:	nop    WORD PTR [rax+rax*1+0x0]
   5e408:	mov    rdx,QWORD PTR [r8+0x10]
   5e40c:	sub    ecx,0xff
   5e412:	lea    r9d,[r11+rax*1]
   5e416:	mov    BYTE PTR [rdx+rax*1],0xff
   5e41a:	add    rax,0x1
   5e41e:	cmp    ecx,0xff
   5e424:	jg     5e408 <write_sei_message+0x38>
   5e426:	lea    rax,[rdi+rdi*2]
   5e42a:	lea    r8d,[r9+0x1]
   5e42e:	movsxd r9,r9d
   5e431:	lea    r11,[r10+rax*8]
   5e435:	mov    rax,QWORD PTR [r11+0x10]
   5e439:	mov    BYTE PTR [rax+r9*1],cl
   5e43d:	cmp    ebx,0xff
   5e443:	jle    5e4a8 <write_sei_message+0xd8>
   5e445:	movsxd rdx,r8d
   5e448:	mov    eax,ebx
   5e44a:	mov    r9,r11
   5e44d:	nop    DWORD PTR [rax]
   5e450:	mov    rcx,QWORD PTR [r9+0x10]
   5e454:	sub    eax,0xff
   5e459:	add    r8d,0x1
   5e45d:	mov    BYTE PTR [rcx+rdx*1],0xff
   5e461:	add    rdx,0x1
   5e465:	cmp    eax,0xff
   5e46a:	jg     5e450 <write_sei_message+0x80>
   5e46c:	lea    rdx,[rdi+rdi*2]
   5e470:	lea    r12d,[r8+0x1]
   5e474:	movsxd r8,r8d
   5e477:	lea    rbp,[r10+rdx*8]
   5e47b:	movsxd rdi,r12d
   5e47e:	mov    rdx,QWORD PTR [rbp+0x10]
   5e482:	mov    BYTE PTR [rdx+r8*1],al
   5e486:	movsxd rdx,ebx
   5e489:	add    rdi,QWORD PTR [rbp+0x10]
   5e48d:	add    ebx,r12d
   5e490:	call   4440 <memcpy@plt>
   5e495:	mov    DWORD PTR [rbp+0x4],ebx
   5e498:	pop    rbx
   5e499:	pop    rbp
   5e49a:	pop    r12
   5e49c:	ret    
   5e49d:	nop    DWORD PTR [rax]
   5e4a0:	mov    r9d,eax
   5e4a3:	jmp    5e426 <write_sei_message+0x56>
   5e4a5:	nop    DWORD PTR [rax]
   5e4a8:	mov    eax,ebx
   5e4aa:	jmp    5e46c <write_sei_message+0x9c>
   5e4ac:	nop    DWORD PTR [rax+0x0]

000000000005e4b0 <finalize_sei_message>:
   5e4b0:	endbr64 
   5e4b4:	movsxd rdi,edi
   5e4b7:	lea    rax,[rip+0x84d42]        # e3200 <sei_message>
   5e4be:	lea    rdx,[rdi+rdi*2]
   5e4c2:	lea    rax,[rax+rdx*8]
   5e4c6:	movsxd rdx,DWORD PTR [rax+0x4]
   5e4ca:	mov    rcx,QWORD PTR [rax+0x10]
   5e4ce:	mov    BYTE PTR [rcx+rdx*1],0x80
   5e4d2:	mov    DWORD PTR [rax],0x1
   5e4d8:	add    DWORD PTR [rax+0x4],0x1
   5e4dc:	ret    
   5e4dd:	nop    DWORD PTR [rax]

000000000005e4e0 <clear_sei_message>:
   5e4e0:	endbr64 
   5e4e4:	movsxd rdi,edi
   5e4e7:	lea    rax,[rip+0x84d12]        # e3200 <sei_message>
   5e4ee:	push   rbx
   5e4ef:	xor    esi,esi
   5e4f1:	lea    rdx,[rdi+rdi*2]
   5e4f5:	lea    rbx,[rax+rdx*8]
   5e4f9:	mov    edx,0xffd8
   5e4fe:	mov    rdi,QWORD PTR [rbx+0x10]
   5e502:	call   43b0 <memset@plt>
   5e507:	mov    QWORD PTR [rbx],0x0
   5e50e:	pop    rbx
   5e50f:	ret    

000000000005e510 <AppendTmpbits2Buf>:
   5e510:	endbr64 
   5e514:	mov    eax,DWORD PTR [rsi]
   5e516:	xor    r10d,r10d
   5e519:	test   eax,eax
   5e51b:	jle    5e58b <AppendTmpbits2Buf+0x7b>
   5e51d:	nop    DWORD PTR [rax]
   5e520:	mov    r8d,0x8
   5e526:	mov    ecx,0xffffff80
   5e52b:	jmp    5e539 <AppendTmpbits2Buf+0x29>
   5e52d:	nop    DWORD PTR [rax]
   5e530:	mov    DWORD PTR [rdi+0x4],edx
   5e533:	sub    r8d,0x1
   5e537:	je     5e582 <AppendTmpbits2Buf+0x72>
   5e539:	movzx  eax,BYTE PTR [rdi+0x8]
   5e53d:	add    eax,eax
   5e53f:	mov    BYTE PTR [rdi+0x8],al
   5e542:	mov    r9,QWORD PTR [rsi+0x20]
   5e546:	mov    edx,eax
   5e548:	or     edx,0x1
   5e54b:	test   BYTE PTR [r9+r10*1],cl
   5e54f:	cmovne eax,edx
   5e552:	mov    edx,DWORD PTR [rdi+0x4]
   5e555:	shr    cl,1
   5e557:	mov    BYTE PTR [rdi+0x8],al
   5e55a:	sub    edx,0x1
   5e55d:	jne    5e530 <AppendTmpbits2Buf+0x20>
   5e55f:	movsxd rdx,DWORD PTR [rdi]
   5e562:	mov    r9,QWORD PTR [rdi+0x20]
   5e566:	mov    DWORD PTR [rdi+0x4],0x8
   5e56d:	lea    r11d,[rdx+0x1]
   5e571:	mov    DWORD PTR [rdi],r11d
   5e574:	mov    BYTE PTR [r9+rdx*1],al
   5e578:	mov    BYTE PTR [rdi+0x8],0x0
   5e57c:	sub    r8d,0x1
   5e580:	jne    5e539 <AppendTmpbits2Buf+0x29>
   5e582:	add    r10,0x1
   5e586:	cmp    DWORD PTR [rsi],r10d
   5e589:	jg     5e520 <AppendTmpbits2Buf+0x10>
   5e58b:	mov    eax,DWORD PTR [rsi+0x4]
   5e58e:	mov    r9d,0x8
   5e594:	sub    r9d,eax
   5e597:	test   r9d,r9d
   5e59a:	jle    5e60c <AppendTmpbits2Buf+0xfc>
   5e59c:	mov    ecx,0x7
   5e5a1:	xor    r8d,r8d
   5e5a4:	sub    ecx,eax
   5e5a6:	mov    eax,0x1
   5e5ab:	shl    eax,cl
   5e5ad:	mov    ecx,eax
   5e5af:	jmp    5e5c4 <AppendTmpbits2Buf+0xb4>
   5e5b1:	nop    DWORD PTR [rax+0x0]
   5e5b8:	add    r8d,0x1
   5e5bc:	mov    DWORD PTR [rdi+0x4],edx
   5e5bf:	cmp    r9d,r8d
   5e5c2:	je     5e60b <AppendTmpbits2Buf+0xfb>
   5e5c4:	movzx  eax,BYTE PTR [rdi+0x8]
   5e5c8:	add    eax,eax
   5e5ca:	mov    edx,eax
   5e5cc:	mov    BYTE PTR [rdi+0x8],al
   5e5cf:	or     edx,0x1
   5e5d2:	test   BYTE PTR [rsi+0x8],cl
   5e5d5:	cmovne eax,edx
   5e5d8:	mov    edx,DWORD PTR [rdi+0x4]
   5e5db:	shr    cl,1
   5e5dd:	mov    BYTE PTR [rdi+0x8],al
   5e5e0:	sub    edx,0x1
   5e5e3:	jne    5e5b8 <AppendTmpbits2Buf+0xa8>
   5e5e5:	movsxd rdx,DWORD PTR [rdi]
   5e5e8:	mov    r10,QWORD PTR [rdi+0x20]
   5e5ec:	add    r8d,0x1
   5e5f0:	mov    DWORD PTR [rdi+0x4],0x8
   5e5f7:	lea    r11d,[rdx+0x1]
   5e5fb:	mov    DWORD PTR [rdi],r11d
   5e5fe:	mov    BYTE PTR [r10+rdx*1],al
   5e602:	mov    BYTE PTR [rdi+0x8],0x0
   5e606:	cmp    r9d,r8d
   5e609:	jne    5e5c4 <AppendTmpbits2Buf+0xb4>
   5e60b:	ret    
   5e60c:	ret    
   5e60d:	nop    DWORD PTR [rax]

000000000005e610 <CloseSparePicture>:
   5e610:	endbr64 
   5e614:	sub    rsp,0x8
   5e618:	mov    rdi,QWORD PTR [rip+0x84c21]        # e3240 <seiSparePicturePayload+0x10>
   5e61f:	mov    r8,QWORD PTR [rdi+0x20]
   5e623:	test   r8,r8
   5e626:	je     5e637 <CloseSparePicture+0x27>
   5e628:	mov    rdi,r8
   5e62b:	call   42d0 <free@plt>
   5e630:	mov    rdi,QWORD PTR [rip+0x84c09]        # e3240 <seiSparePicturePayload+0x10>
   5e637:	call   42d0 <free@plt>
   5e63c:	mov    QWORD PTR [rip+0x84bf9],0x0        # e3240 <seiSparePicturePayload+0x10>
   5e647:	mov    QWORD PTR [rip+0x84bde],0x0        # e3230 <seiSparePicturePayload>
   5e652:	add    rsp,0x8
   5e656:	ret    
   5e657:	nop    WORD PTR [rax+rax*1+0x0]

000000000005e660 <InitSparePicture>:
   5e660:	endbr64 
   5e664:	cmp    QWORD PTR [rip+0x84bd4],0x0        # e3240 <seiSparePicturePayload+0x10>
   5e66c:	push   rbx
   5e66d:	je     5e676 <InitSparePicture+0x16>
   5e66f:	xor    eax,eax
   5e671:	call   5e610 <CloseSparePicture>
   5e676:	mov    edi,0x30
   5e67b:	call   4460 <malloc@plt>
   5e680:	mov    QWORD PTR [rip+0x84bb9],rax        # e3240 <seiSparePicturePayload+0x10>
   5e687:	mov    rbx,rax
   5e68a:	test   rax,rax
   5e68d:	je     5e6d6 <InitSparePicture+0x76>
   5e68f:	mov    edi,0xffd8
   5e694:	call   4460 <malloc@plt>
   5e699:	mov    QWORD PTR [rbx+0x20],rax
   5e69d:	mov    rdi,rax
   5e6a0:	test   rax,rax
   5e6a3:	je     5e6eb <InitSparePicture+0x8b>
   5e6a5:	mov    edx,0xffd8
   5e6aa:	xor    esi,esi
   5e6ac:	call   43b0 <memset@plt>
   5e6b1:	mov    rax,QWORD PTR [rip+0x84b88]        # e3240 <seiSparePicturePayload+0x10>
   5e6b8:	movabs rcx,0x800000000
   5e6c2:	mov    QWORD PTR [rip+0x84b63],0x0        # e3230 <seiSparePicturePayload>
   5e6cd:	mov    BYTE PTR [rax+0x8],0x0
   5e6d1:	mov    QWORD PTR [rax],rcx
   5e6d4:	pop    rbx
   5e6d5:	ret    
   5e6d6:	lea    rdi,[rip+0x19123]        # 77800 <b8_mode_table.7699+0x1a0>
   5e6dd:	call   38210 <no_mem_exit>
   5e6e2:	mov    rbx,QWORD PTR [rip+0x84b57]        # e3240 <seiSparePicturePayload+0x10>
   5e6e9:	jmp    5e68f <InitSparePicture+0x2f>
   5e6eb:	lea    rdi,[rip+0x1913e]        # 77830 <b8_mode_table.7699+0x1d0>
   5e6f2:	call   38210 <no_mem_exit>
   5e6f7:	mov    rax,QWORD PTR [rip+0x84b42]        # e3240 <seiSparePicturePayload+0x10>
   5e6fe:	mov    rdi,QWORD PTR [rax+0x20]
   5e702:	jmp    5e6a5 <InitSparePicture+0x45>
   5e704:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5e70f:	nop

000000000005e710 <CalculateSparePicture>:
   5e710:	endbr64 
   5e714:	ret    
   5e715:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000005e720 <ComposeSparePictureMessage>:
   5e720:	endbr64 
   5e724:	push   r13
   5e726:	push   r12
   5e728:	mov    r12,rdx
   5e72b:	push   rbp
   5e72c:	push   rbx
   5e72d:	mov    ebx,esi
   5e72f:	sub    rsp,0x48
   5e733:	mov    rbp,QWORD PTR [rip+0x84b06]        # e3240 <seiSparePicturePayload+0x10>
   5e73a:	mov    rax,QWORD PTR fs:0x28
   5e743:	mov    QWORD PTR [rsp+0x38],rax
   5e748:	xor    eax,eax
   5e74a:	mov    r13,rsp
   5e74d:	lea    rax,[rip+0x7b5c]        # 662b0 <ue_linfo>
   5e754:	mov    DWORD PTR [rsp+0x4],edi
   5e758:	mov    rsi,rbp
   5e75b:	mov    rdi,r13
   5e75e:	mov    DWORD PTR [rsp],0x0
   5e765:	mov    QWORD PTR [rsp+0x20],rax
   5e76a:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5e76f:	mov    rsi,rbp
   5e772:	mov    rdi,r13
   5e775:	mov    DWORD PTR [rsp+0x4],ebx
   5e779:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5e77e:	mov    rsi,r12
   5e781:	mov    rdi,rbp
   5e784:	call   5e510 <AppendTmpbits2Buf>
   5e789:	mov    rax,QWORD PTR [rsp+0x38]
   5e78e:	xor    rax,QWORD PTR fs:0x28
   5e797:	jne    5e7a4 <ComposeSparePictureMessage+0x84>
   5e799:	add    rsp,0x48
   5e79d:	pop    rbx
   5e79e:	pop    rbp
   5e79f:	pop    r12
   5e7a1:	pop    r13
   5e7a3:	ret    
   5e7a4:	call   4390 <__stack_chk_fail@plt>
   5e7a9:	nop    DWORD PTR [rax+0x0]

000000000005e7b0 <CompressSpareMBMap>:
   5e7b0:	endbr64 
   5e7b4:	push   r15
   5e7b6:	push   r14
   5e7b8:	push   r13
   5e7ba:	mov    r13,rsi
   5e7bd:	push   r12
   5e7bf:	mov    r12,rdi
   5e7c2:	push   rbp
   5e7c3:	push   rbx
   5e7c4:	sub    rsp,0x78
   5e7c8:	mov    r11,QWORD PTR [rip+0x29de1]        # 885b0 <img>
   5e7cf:	lea    r8,[rip+0x7ada]        # 662b0 <ue_linfo>
   5e7d6:	mov    rax,QWORD PTR fs:0x28
   5e7df:	mov    QWORD PTR [rsp+0x68],rax
   5e7e4:	xor    eax,eax
   5e7e6:	mov    DWORD PTR [rsp+0x30],0x0
   5e7ee:	mov    edi,DWORD PTR [r11+0x3c]
   5e7f2:	mov    eax,DWORD PTR [r11+0x34]
   5e7f6:	mov    QWORD PTR [rsp+0x50],r8
   5e7fb:	test   edi,edi
   5e7fd:	lea    edx,[rdi+0xf]
   5e800:	lea    ecx,[rax+0xf]
   5e803:	cmovns edx,edi
   5e806:	sar    edx,0x4
   5e809:	test   eax,eax
   5e80b:	cmovns ecx,eax
   5e80e:	mov    ebx,edx
   5e810:	sub    edx,0x1
   5e813:	mov    r8d,edx
   5e816:	sar    ecx,0x4
   5e819:	shr    r8d,0x1f
   5e81d:	imul   ebx,ecx
   5e820:	sub    ecx,0x1
   5e823:	add    r8d,edx
   5e826:	sar    r8d,1
   5e829:	mov    DWORD PTR [rsp+0x2c],ebx
   5e82d:	mov    ebx,ecx
   5e82f:	shr    ebx,0x1f
   5e832:	add    ebx,ecx
   5e834:	sar    ebx,1
   5e836:	cmp    edi,0xf
   5e839:	jle    5ec60 <CompressSpareMBMap+0x4b0>
   5e83f:	lea    rdx,[rsp+0x30]
   5e844:	mov    DWORD PTR [rsp+0x28],r8d
   5e849:	xor    r15d,r15d
   5e84c:	xor    edi,edi
   5e84e:	mov    DWORD PTR [rsp+0x1c],r8d
   5e853:	mov    ebp,0x1
   5e858:	mov    r14d,ebx
   5e85b:	mov    r9,r12
   5e85e:	mov    DWORD PTR [rsp+0x8],ebx
   5e862:	mov    r13d,ebp
   5e865:	mov    ebp,r8d
   5e868:	mov    DWORD PTR [rsp+0x18],0x0
   5e870:	mov    DWORD PTR [rsp+0xc],0x0
   5e878:	mov    QWORD PTR [rsp+0x20],rdx
   5e87d:	mov    QWORD PTR [rsp+0x10],rsi
   5e882:	nop    WORD PTR [rax+rax*1+0x0]
   5e888:	xor    r12d,r12d
   5e88b:	cmp    eax,0xf
   5e88e:	jle    5ea49 <CompressSpareMBMap+0x299>
   5e894:	mov    eax,r12d
   5e897:	mov    r12d,r14d
   5e89a:	mov    r14d,r13d
   5e89d:	mov    r13d,r15d
   5e8a0:	mov    r15d,eax
   5e8a3:	jmp    5e8e6 <CompressSpareMBMap+0x136>
   5e8a5:	nop    DWORD PTR [rax]
   5e8a8:	add    edi,0x1
   5e8ab:	test   r14d,r14d
   5e8ae:	sete   al
   5e8b1:	cmp    r13d,0xffffffff
   5e8b5:	jne    5e930 <CompressSpareMBMap+0x180>
   5e8b7:	test   al,al
   5e8b9:	je     5e930 <CompressSpareMBMap+0x180>
   5e8bb:	cmp    r12d,ebx
   5e8be:	jge    5e950 <CompressSpareMBMap+0x1a0>
   5e8c4:	mov    esi,DWORD PTR [r11+0x34]
   5e8c8:	sub    ebx,0x1
   5e8cb:	xor    r14d,r14d
   5e8ce:	add    r15d,0x1
   5e8d2:	lea    eax,[rsi+0xf]
   5e8d5:	test   esi,esi
   5e8d7:	cmovns eax,esi
   5e8da:	sar    eax,0x4
   5e8dd:	cmp    eax,r15d
   5e8e0:	jle    5ea40 <CompressSpareMBMap+0x290>
   5e8e6:	movsxd rsi,ebp
   5e8e9:	movsxd rax,ebx
   5e8ec:	mov    rsi,QWORD PTR [r9+rsi*8]
   5e8f0:	cmp    BYTE PTR [rsi+rax*1],0x0
   5e8f4:	je     5e8a8 <CompressSpareMBMap+0xf8>
   5e8f6:	mov    DWORD PTR [rsp+0x34],edi
   5e8fa:	mov    rsi,QWORD PTR [rsp+0x10]
   5e8ff:	mov    rdi,QWORD PTR [rsp+0x20]
   5e904:	mov    QWORD PTR [rsp],r9
   5e908:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5e90d:	xor    edi,edi
   5e90f:	add    DWORD PTR [rsp+0x18],eax
   5e913:	test   r14d,r14d
   5e916:	mov    r11,QWORD PTR [rip+0x29c93]        # 885b0 <img>
   5e91d:	mov    r9,QWORD PTR [rsp]
   5e921:	sete   al
   5e924:	cmp    r13d,0xffffffff
   5e928:	je     5e8b7 <CompressSpareMBMap+0x107>
   5e92a:	nop    WORD PTR [rax+rax*1+0x0]
   5e930:	mov    esi,DWORD PTR [r11+0x34]
   5e934:	cmp    r13d,0x1
   5e938:	jne    5e978 <CompressSpareMBMap+0x1c8>
   5e93a:	test   al,al
   5e93c:	je     5e978 <CompressSpareMBMap+0x1c8>
   5e93e:	cmp    DWORD PTR [rsp+0x8],ebx
   5e942:	jle    5e9a8 <CompressSpareMBMap+0x1f8>
   5e944:	add    ebx,0x1
   5e947:	xor    r14d,r14d
   5e94a:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5e94c:	nop    DWORD PTR [rax+0x0]
   5e950:	test   ebx,ebx
   5e952:	jne    5e9f0 <CompressSpareMBMap+0x240>
   5e958:	mov    ebp,DWORD PTR [rsp+0x1c]
   5e95c:	mov    esi,DWORD PTR [r11+0x34]
   5e960:	xor    r14d,r14d
   5e963:	mov    r13d,0x1
   5e969:	add    ebp,0x1
   5e96c:	mov    DWORD PTR [rsp+0x1c],ebp
   5e970:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5e975:	nop    DWORD PTR [rax]
   5e978:	test   r13d,r13d
   5e97b:	sete   al
   5e97e:	cmp    r14d,0xffffffff
   5e982:	jne    5ea10 <CompressSpareMBMap+0x260>
   5e988:	test   al,al
   5e98a:	je     5ea10 <CompressSpareMBMap+0x260>
   5e990:	cmp    DWORD PTR [rsp+0x28],ebp
   5e994:	jge    5ea78 <CompressSpareMBMap+0x2c8>
   5e99a:	sub    ebp,0x1
   5e99d:	xor    r13d,r13d
   5e9a0:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5e9a5:	nop    DWORD PTR [rax]
   5e9a8:	test   esi,esi
   5e9aa:	lea    eax,[rsi+0xf]
   5e9ad:	cmovns eax,esi
   5e9b0:	sar    eax,0x4
   5e9b3:	sub    eax,0x1
   5e9b6:	cmp    eax,ebx
   5e9b8:	je     5eab0 <CompressSpareMBMap+0x300>
   5e9be:	xor    r14d,r14d
   5e9c1:	mov    r13d,0x1
   5e9c7:	cmp    DWORD PTR [rsp+0x8],ebx
   5e9cb:	jne    5e8ce <CompressSpareMBMap+0x11e>
   5e9d1:	mov    ebx,DWORD PTR [rsp+0x8]
   5e9d5:	mov    r14d,0xffffffff
   5e9db:	xor    r13d,r13d
   5e9de:	add    ebx,0x1
   5e9e1:	mov    DWORD PTR [rsp+0x8],ebx
   5e9e5:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5e9ea:	nop    WORD PTR [rax+rax*1+0x0]
   5e9f0:	cmp    r12d,ebx
   5e9f3:	je     5ead0 <CompressSpareMBMap+0x320>
   5e9f9:	mov    esi,DWORD PTR [r11+0x34]
   5e9fd:	xor    r14d,r14d
   5ea00:	mov    r13d,0xffffffff
   5ea06:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5ea0b:	nop    DWORD PTR [rax+rax*1+0x0]
   5ea10:	cmp    r14d,0x1
   5ea14:	jne    5e8ce <CompressSpareMBMap+0x11e>
   5ea1a:	test   al,al
   5ea1c:	je     5e8ce <CompressSpareMBMap+0x11e>
   5ea22:	cmp    ebp,DWORD PTR [rsp+0x1c]
   5ea26:	jge    5eaf0 <CompressSpareMBMap+0x340>
   5ea2c:	add    ebp,0x1
   5ea2f:	xor    r13d,r13d
   5ea32:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5ea37:	nop    WORD PTR [rax+rax*1+0x0]
   5ea40:	mov    r15d,r13d
   5ea43:	mov    r13d,r14d
   5ea46:	mov    r14d,r12d
   5ea49:	mov    esi,DWORD PTR [r11+0x3c]
   5ea4d:	add    DWORD PTR [rsp+0xc],0x1
   5ea52:	mov    edx,DWORD PTR [rsp+0xc]
   5ea56:	test   esi,esi
   5ea58:	lea    eax,[rsi+0xf]
   5ea5b:	cmovns eax,esi
   5ea5e:	sar    eax,0x4
   5ea61:	cmp    eax,edx
   5ea63:	jle    5eb38 <CompressSpareMBMap+0x388>
   5ea69:	mov    eax,DWORD PTR [r11+0x34]
   5ea6d:	jmp    5e888 <CompressSpareMBMap+0xd8>
   5ea72:	nop    WORD PTR [rax+rax*1+0x0]
   5ea78:	test   ebp,ebp
   5ea7a:	jne    5ea98 <CompressSpareMBMap+0x2e8>
   5ea7c:	lea    ebx,[r12-0x1]
   5ea81:	xor    r13d,r13d
   5ea84:	mov    r14d,0x1
   5ea8a:	mov    r12d,ebx
   5ea8d:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5ea92:	nop    WORD PTR [rax+rax*1+0x0]
   5ea98:	mov    r14d,0xffffffff
   5ea9e:	xor    r13d,r13d
   5eaa1:	cmp    DWORD PTR [rsp+0x28],ebp
   5eaa5:	jne    5e8ce <CompressSpareMBMap+0x11e>
   5eaab:	nop    DWORD PTR [rax+rax*1+0x0]
   5eab0:	mov    ebp,DWORD PTR [rsp+0x28]
   5eab4:	xor    r14d,r14d
   5eab7:	mov    r13d,0xffffffff
   5eabd:	sub    ebp,0x1
   5eac0:	mov    DWORD PTR [rsp+0x28],ebp
   5eac4:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5eac9:	nop    DWORD PTR [rax+0x0]
   5ead0:	lea    ebx,[r12-0x1]
   5ead5:	mov    esi,DWORD PTR [r11+0x34]
   5ead9:	mov    r14d,0x1
   5eadf:	xor    r13d,r13d
   5eae2:	mov    r12d,ebx
   5eae5:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5eaea:	nop    WORD PTR [rax+rax*1+0x0]
   5eaf0:	mov    edx,DWORD PTR [r11+0x3c]
   5eaf4:	test   edx,edx
   5eaf6:	lea    eax,[rdx+0xf]
   5eaf9:	cmovns eax,edx
   5eafc:	sar    eax,0x4
   5eaff:	sub    eax,0x1
   5eb02:	cmp    eax,ebp
   5eb04:	je     5e9d1 <CompressSpareMBMap+0x221>
   5eb0a:	mov    r14d,0x1
   5eb10:	xor    r13d,r13d
   5eb13:	cmp    ebp,DWORD PTR [rsp+0x1c]
   5eb17:	jne    5e8ce <CompressSpareMBMap+0x11e>
   5eb1d:	add    DWORD PTR [rsp+0x1c],0x1
   5eb22:	add    ebp,0x1
   5eb25:	xor    r14d,r14d
   5eb28:	mov    r13d,0x1
   5eb2e:	jmp    5e8ce <CompressSpareMBMap+0x11e>
   5eb33:	nop    DWORD PTR [rax+rax*1+0x0]
   5eb38:	mov    r13,QWORD PTR [rsp+0x10]
   5eb3d:	mov    r12,r9
   5eb40:	test   edi,edi
   5eb42:	je     5eb59 <CompressSpareMBMap+0x3a9>
   5eb44:	mov    DWORD PTR [rsp+0x34],edi
   5eb48:	mov    rsi,r13
   5eb4b:	lea    rdi,[rsp+0x30]
   5eb50:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5eb55:	add    DWORD PTR [rsp+0x18],eax
   5eb59:	mov    eax,DWORD PTR [rsp+0x18]
   5eb5d:	mov    edi,DWORD PTR [rsp+0x2c]
   5eb61:	xor    r8d,r8d
   5eb64:	cmp    eax,edi
   5eb66:	setl   r8b
   5eb6a:	jl     5ec3e <CompressSpareMBMap+0x48e>
   5eb70:	mov    r11,QWORD PTR [rip+0x29a39]        # 885b0 <img>
   5eb77:	mov    BYTE PTR [r13+0x8],0x0
   5eb7c:	movabs rax,0x800000000
   5eb86:	mov    QWORD PTR [r13+0x0],rax
   5eb8a:	cmp    DWORD PTR [r11+0x3c],0xf
   5eb8f:	jle    5ec3e <CompressSpareMBMap+0x48e>
   5eb95:	mov    r9,r12
   5eb98:	xor    edi,edi
   5eb9a:	nop    WORD PTR [rax+rax*1+0x0]
   5eba0:	xor    edx,edx
   5eba2:	cmp    DWORD PTR [r11+0x34],0xf
   5eba7:	jg     5ebcb <CompressSpareMBMap+0x41b>
   5eba9:	jmp    5ec20 <CompressSpareMBMap+0x470>
   5ebab:	nop    DWORD PTR [rax+rax*1+0x0]
   5ebb0:	mov    DWORD PTR [r13+0x4],eax
   5ebb4:	mov    ecx,DWORD PTR [r11+0x34]
   5ebb8:	add    rdx,0x1
   5ebbc:	lea    eax,[rcx+0xf]
   5ebbf:	test   ecx,ecx
   5ebc1:	cmovns eax,ecx
   5ebc4:	sar    eax,0x4
   5ebc7:	cmp    eax,edx
   5ebc9:	jle    5ec20 <CompressSpareMBMap+0x470>
   5ebcb:	movzx  eax,BYTE PTR [r13+0x8]
   5ebd0:	add    eax,eax
   5ebd2:	mov    BYTE PTR [r13+0x8],al
   5ebd6:	mov    rcx,QWORD PTR [r9]
   5ebd9:	cmp    BYTE PTR [rcx+rdx*1],0x0
   5ebdd:	je     5ebe6 <CompressSpareMBMap+0x436>
   5ebdf:	or     eax,0x1
   5ebe2:	mov    BYTE PTR [r13+0x8],al
   5ebe6:	mov    eax,DWORD PTR [r13+0x4]
   5ebea:	sub    eax,0x1
   5ebed:	jne    5ebb0 <CompressSpareMBMap+0x400>
   5ebef:	movsxd rax,DWORD PTR [r13+0x0]
   5ebf3:	mov    rcx,QWORD PTR [r13+0x20]
   5ebf7:	mov    DWORD PTR [r13+0x4],0x8
   5ebff:	lea    esi,[rax+0x1]
   5ec02:	mov    DWORD PTR [r13+0x0],esi
   5ec06:	movzx  esi,BYTE PTR [r13+0x8]
   5ec0b:	mov    BYTE PTR [rcx+rax*1],sil
   5ec0f:	mov    r11,QWORD PTR [rip+0x2999a]        # 885b0 <img>
   5ec16:	mov    BYTE PTR [r13+0x8],0x0
   5ec1b:	jmp    5ebb4 <CompressSpareMBMap+0x404>
   5ec1d:	nop    DWORD PTR [rax]
   5ec20:	mov    edx,DWORD PTR [r11+0x3c]
   5ec24:	add    edi,0x1
   5ec27:	add    r9,0x8
   5ec2b:	lea    eax,[rdx+0xf]
   5ec2e:	test   edx,edx
   5ec30:	cmovns eax,edx
   5ec33:	sar    eax,0x4
   5ec36:	cmp    eax,edi
   5ec38:	jg     5eba0 <CompressSpareMBMap+0x3f0>
   5ec3e:	mov    rax,QWORD PTR [rsp+0x68]
   5ec43:	xor    rax,QWORD PTR fs:0x28
   5ec4c:	jne    5ec6d <CompressSpareMBMap+0x4bd>
   5ec4e:	add    rsp,0x78
   5ec52:	mov    eax,r8d
   5ec55:	pop    rbx
   5ec56:	pop    rbp
   5ec57:	pop    r12
   5ec59:	pop    r13
   5ec5b:	pop    r14
   5ec5d:	pop    r15
   5ec5f:	ret    
   5ec60:	mov    DWORD PTR [rsp+0x18],0x0
   5ec68:	jmp    5eb59 <CompressSpareMBMap+0x3a9>
   5ec6d:	call   4390 <__stack_chk_fail@plt>
   5ec72:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5ec7d:	nop    DWORD PTR [rax]

000000000005ec80 <FinalizeSpareMBMap>:
   5ec80:	endbr64 
   5ec84:	push   r12
   5ec86:	mov    edi,0x30
   5ec8b:	push   rbp
   5ec8c:	push   rbx
   5ec8d:	sub    rsp,0x40
   5ec91:	mov    r12,QWORD PTR [rip+0x845a8]        # e3240 <seiSparePicturePayload+0x10>
   5ec98:	mov    rax,QWORD PTR fs:0x28
   5eca1:	mov    QWORD PTR [rsp+0x38],rax
   5eca6:	xor    eax,eax
   5eca8:	mov    rax,QWORD PTR [rip+0x29901]        # 885b0 <img>
   5ecaf:	mov    eax,DWORD PTR [rax]
   5ecb1:	mov    DWORD PTR [rsp],0x0
   5ecb8:	cdq    
   5ecb9:	shr    edx,0x18
   5ecbc:	add    eax,edx
   5ecbe:	movzx  eax,al
   5ecc1:	sub    eax,edx
   5ecc3:	mov    ebp,eax
   5ecc5:	lea    rax,[rip+0x75e4]        # 662b0 <ue_linfo>
   5eccc:	mov    QWORD PTR [rsp+0x20],rax
   5ecd1:	call   4460 <malloc@plt>
   5ecd6:	mov    rbx,rax
   5ecd9:	test   rax,rax
   5ecdc:	je     5edd0 <FinalizeSpareMBMap+0x150>
   5ece2:	mov    edi,0xffd8
   5ece7:	call   4460 <malloc@plt>
   5ecec:	mov    QWORD PTR [rbx+0x20],rax
   5ecf0:	mov    rdi,rax
   5ecf3:	test   rax,rax
   5ecf6:	je     5ede6 <FinalizeSpareMBMap+0x166>
   5ecfc:	xor    esi,esi
   5ecfe:	mov    edx,0xffd8
   5ed03:	mov    BYTE PTR [rbx+0x8],0x0
   5ed07:	movabs rax,0x800000000
   5ed11:	mov    QWORD PTR [rbx],rax
   5ed14:	call   43b0 <memset@plt>
   5ed19:	mov    eax,ebp
   5ed1b:	sub    eax,DWORD PTR [rip+0x8450f]        # e3230 <seiSparePicturePayload>
   5ed21:	mov    rbp,rsp
   5ed24:	lea    edx,[rax+0x100]
   5ed2a:	mov    rsi,rbx
   5ed2d:	mov    rdi,rbp
   5ed30:	cmovs  eax,edx
   5ed33:	mov    DWORD PTR [rsp+0x4],eax
   5ed37:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5ed3c:	mov    eax,DWORD PTR [rip+0x844f2]        # e3234 <seiSparePicturePayload+0x4>
   5ed42:	mov    rsi,rbx
   5ed45:	mov    rdi,rbp
   5ed48:	sub    eax,0x1
   5ed4b:	mov    DWORD PTR [rsp+0x4],eax
   5ed4f:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5ed54:	mov    rsi,r12
   5ed57:	mov    rdi,rbx
   5ed5a:	call   5e510 <AppendTmpbits2Buf>
   5ed5f:	mov    ecx,DWORD PTR [rbx+0x4]
   5ed62:	cmp    ecx,0x8
   5ed65:	je     5ed96 <FinalizeSpareMBMap+0x116>
   5ed67:	movzx  eax,BYTE PTR [rbx+0x8]
   5ed6b:	sub    ecx,0x1
   5ed6e:	mov    DWORD PTR [rbx+0x4],0x8
   5ed75:	lea    eax,[rax+rax*1+0x1]
   5ed79:	movzx  edx,al
   5ed7c:	shl    edx,cl
   5ed7e:	test   ecx,ecx
   5ed80:	mov    rcx,QWORD PTR [rbx+0x20]
   5ed84:	cmovne eax,edx
   5ed87:	movsxd rdx,DWORD PTR [rbx]
   5ed8a:	lea    esi,[rdx+0x1]
   5ed8d:	mov    DWORD PTR [rbx],esi
   5ed8f:	mov    BYTE PTR [rcx+rdx*1],al
   5ed92:	mov    BYTE PTR [rbx+0x8],0x0
   5ed96:	mov    eax,DWORD PTR [rbx]
   5ed98:	mov    rdi,QWORD PTR [r12+0x20]
   5ed9d:	mov    QWORD PTR [rip+0x8449c],rbx        # e3240 <seiSparePicturePayload+0x10>
   5eda4:	mov    DWORD PTR [rip+0x8448e],eax        # e3238 <seiSparePicturePayload+0x8>
   5edaa:	call   42d0 <free@plt>
   5edaf:	mov    rdi,r12
   5edb2:	call   42d0 <free@plt>
   5edb7:	mov    rax,QWORD PTR [rsp+0x38]
   5edbc:	xor    rax,QWORD PTR fs:0x28
   5edc5:	jne    5ede1 <FinalizeSpareMBMap+0x161>
   5edc7:	add    rsp,0x40
   5edcb:	pop    rbx
   5edcc:	pop    rbp
   5edcd:	pop    r12
   5edcf:	ret    
   5edd0:	lea    rdi,[rip+0x18eae]        # 77c85 <b8_mode_table.7699+0x625>
   5edd7:	call   38210 <no_mem_exit>
   5eddc:	jmp    5ece2 <FinalizeSpareMBMap+0x62>
   5ede1:	call   4390 <__stack_chk_fail@plt>
   5ede6:	lea    rdi,[rip+0x18a83]        # 77870 <b8_mode_table.7699+0x210>
   5eded:	call   38210 <no_mem_exit>
   5edf2:	mov    rdi,QWORD PTR [rbx+0x20]
   5edf6:	jmp    5ecfc <FinalizeSpareMBMap+0x7c>
   5edfb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005ee00 <InitSubseqInfo>:
   5ee00:	endbr64 
   5ee04:	push   r13
   5ee06:	lea    r13,[rip+0x84373]        # e3180 <seiSubseqInfo>
   5ee0d:	push   r12
   5ee0f:	movsxd r12,edi
   5ee12:	push   rbp
   5ee13:	mov    rbp,r12
   5ee16:	push   rbx
   5ee17:	shl    rbp,0x5
   5ee1b:	add    rbp,r13
   5ee1e:	sub    rsp,0x8
   5ee22:	movzx  eax,WORD PTR [rip+0x2a7cf]        # 895f8 <id.5540>
   5ee29:	mov    DWORD PTR [rbp+0x0],edi
   5ee2c:	mov    edi,0x30
   5ee31:	mov    DWORD PTR [rbp+0x10],0x0
   5ee38:	lea    edx,[rax+0x1]
   5ee3b:	mov    DWORD PTR [rbp+0x4],eax
   5ee3e:	movabs rax,0xffffffff00000000
   5ee48:	mov    QWORD PTR [rbp+0x8],rax
   5ee4c:	mov    DWORD PTR [rip+0x2a75e],0x1        # 895b4 <seiHasSubseqInfo>
   5ee56:	mov    WORD PTR [rip+0x2a79b],dx        # 895f8 <id.5540>
   5ee5d:	call   4460 <malloc@plt>
   5ee62:	mov    QWORD PTR [rbp+0x18],rax
   5ee66:	test   rax,rax
   5ee69:	je     5eeab <InitSubseqInfo+0xab>
   5ee6b:	mov    rbx,rax
   5ee6e:	mov    edi,0xffd8
   5ee73:	call   4460 <malloc@plt>
   5ee78:	mov    QWORD PTR [rbx+0x20],rax
   5ee7c:	mov    rdi,rax
   5ee7f:	test   rax,rax
   5ee82:	je     5eebd <InitSubseqInfo+0xbd>
   5ee84:	movabs rax,0x800000000
   5ee8e:	mov    BYTE PTR [rbx+0x8],0x0
   5ee92:	mov    edx,0xffd8
   5ee97:	xor    esi,esi
   5ee99:	mov    QWORD PTR [rbx],rax
   5ee9c:	add    rsp,0x8
   5eea0:	pop    rbx
   5eea1:	pop    rbp
   5eea2:	pop    r12
   5eea4:	pop    r13
   5eea6:	jmp    43b0 <memset@plt>
   5eeab:	lea    rdi,[rip+0x189e6]        # 77898 <b8_mode_table.7699+0x238>
   5eeb2:	call   38210 <no_mem_exit>
   5eeb7:	mov    rbx,QWORD PTR [rbp+0x18]
   5eebb:	jmp    5ee6e <InitSubseqInfo+0x6e>
   5eebd:	lea    rdi,[rip+0x18a04]        # 778c8 <b8_mode_table.7699+0x268>
   5eec4:	shl    r12,0x5
   5eec8:	call   38210 <no_mem_exit>
   5eecd:	mov    rbx,QWORD PTR [r13+r12*1+0x18]
   5eed2:	mov    rdi,QWORD PTR [rbx+0x20]
   5eed6:	jmp    5ee84 <InitSubseqInfo+0x84>
   5eed8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005eee0 <UpdateSubseqInfo>:
   5eee0:	endbr64 
   5eee4:	mov    rcx,QWORD PTR [rip+0x296c5]        # 885b0 <img>
   5eeeb:	cmp    DWORD PTR [rcx+0x18],0x1
   5eeef:	je     5ef13 <UpdateSubseqInfo+0x33>
   5eef1:	movsxd rdx,edi
   5eef4:	mov    rax,rdx
   5eef7:	lea    rdx,[rip+0x84282]        # e3180 <seiSubseqInfo>
   5eefe:	shl    rax,0x5
   5ef02:	add    rdx,rax
   5ef05:	mov    eax,DWORD PTR [rdx+0xc]
   5ef08:	add    eax,0x1
   5ef0b:	and    eax,0xff
   5ef10:	mov    DWORD PTR [rdx+0xc],eax
   5ef13:	test   edi,edi
   5ef15:	jne    5ef38 <UpdateSubseqInfo+0x58>
   5ef17:	mov    rax,QWORD PTR [rip+0x2969a]        # 885b8 <input>
   5ef1e:	mov    eax,DWORD PTR [rax+0x8]
   5ef21:	sub    eax,0x1
   5ef24:	cmp    eax,DWORD PTR [rcx]
   5ef26:	sete   al
   5ef29:	movzx  eax,al
   5ef2c:	mov    DWORD PTR [rip+0x84256],eax        # e3188 <seiSubseqInfo+0x8>
   5ef32:	ret    
   5ef33:	nop    DWORD PTR [rax+rax*1+0x0]
   5ef38:	cmp    edi,0x1
   5ef3b:	jne    5ef8e <UpdateSubseqInfo+0xae>
   5ef3d:	mov    r8,QWORD PTR [rip+0x29674]        # 885b8 <input>
   5ef44:	mov    ecx,DWORD PTR [rcx]
   5ef46:	sub    ecx,DWORD PTR [rip+0x29ba0]        # 88aec <start_frame_no_in_this_IGOP>
   5ef4c:	mov    edi,DWORD PTR [r8+0xb60]
   5ef53:	mov    eax,ecx
   5ef55:	cdq    
   5ef56:	lea    esi,[rdi+0x1]
   5ef59:	idiv   esi
   5ef5b:	test   edx,edx
   5ef5d:	jne    5ef80 <UpdateSubseqInfo+0xa0>
   5ef5f:	mov    esi,DWORD PTR [r8+0x4d4]
   5ef66:	test   esi,esi
   5ef68:	je     5ef80 <UpdateSubseqInfo+0xa0>
   5ef6a:	test   ecx,ecx
   5ef6c:	jle    5ef80 <UpdateSubseqInfo+0xa0>
   5ef6e:	mov    DWORD PTR [rip+0x84230],0x1        # e31a8 <seiSubseqInfo+0x28>
   5ef78:	ret    
   5ef79:	nop    DWORD PTR [rax+0x0]
   5ef80:	cmp    edi,edx
   5ef82:	je     5ef90 <UpdateSubseqInfo+0xb0>
   5ef84:	mov    DWORD PTR [rip+0x8421a],0x0        # e31a8 <seiSubseqInfo+0x28>
   5ef8e:	ret    
   5ef8f:	nop
   5ef90:	mov    eax,DWORD PTR [r8+0x4d4]
   5ef97:	test   eax,eax
   5ef99:	jne    5ef84 <UpdateSubseqInfo+0xa4>
   5ef9b:	jmp    5ef6e <UpdateSubseqInfo+0x8e>
   5ef9d:	nop    DWORD PTR [rax]

000000000005efa0 <FinalizeSubseqInfo>:
   5efa0:	endbr64 
   5efa4:	push   r14
   5efa6:	lea    r14,[rip+0x841d3]        # e3180 <seiSubseqInfo>
   5efad:	push   r13
   5efaf:	push   r12
   5efb1:	movsxd r12,edi
   5efb4:	push   rbp
   5efb5:	mov    rbp,r12
   5efb8:	push   rbx
   5efb9:	shl    rbp,0x5
   5efbd:	add    rbp,r14
   5efc0:	sub    rsp,0x40
   5efc4:	mov    rbx,QWORD PTR [rbp+0x18]
   5efc8:	mov    rax,QWORD PTR fs:0x28
   5efd1:	mov    QWORD PTR [rsp+0x38],rax
   5efd6:	xor    eax,eax
   5efd8:	lea    rax,[rip+0x72d1]        # 662b0 <ue_linfo>
   5efdf:	mov    r13,rsp
   5efe2:	mov    DWORD PTR [rsp],0x0
   5efe9:	mov    rsi,rbx
   5efec:	mov    rdi,r13
   5efef:	mov    QWORD PTR [rsp+0x20],rax
   5eff4:	mov    eax,DWORD PTR [rbp+0x0]
   5eff7:	mov    DWORD PTR [rsp+0x4],eax
   5effb:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f000:	mov    eax,DWORD PTR [rbp+0x4]
   5f003:	mov    rsi,rbx
   5f006:	mov    rdi,r13
   5f009:	mov    DWORD PTR [rsp+0x4],eax
   5f00d:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f012:	mov    eax,DWORD PTR [rbp+0x8]
   5f015:	mov    rsi,rbx
   5f018:	mov    rdi,r13
   5f01b:	mov    DWORD PTR [rsp+0xc],0x1
   5f023:	mov    DWORD PTR [rsp+0x14],eax
   5f027:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f02c:	mov    eax,DWORD PTR [rbp+0xc]
   5f02f:	mov    rsi,rbx
   5f032:	mov    rdi,r13
   5f035:	mov    DWORD PTR [rsp+0x4],eax
   5f039:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f03e:	mov    ecx,DWORD PTR [rbx+0x4]
   5f041:	cmp    ecx,0x8
   5f044:	je     5f075 <FinalizeSubseqInfo+0xd5>
   5f046:	movzx  eax,BYTE PTR [rbx+0x8]
   5f04a:	sub    ecx,0x1
   5f04d:	mov    DWORD PTR [rbx+0x4],0x8
   5f054:	lea    eax,[rax+rax*1+0x1]
   5f058:	movzx  edx,al
   5f05b:	shl    edx,cl
   5f05d:	test   ecx,ecx
   5f05f:	mov    rcx,QWORD PTR [rbx+0x20]
   5f063:	cmovne eax,edx
   5f066:	movsxd rdx,DWORD PTR [rbx]
   5f069:	lea    esi,[rdx+0x1]
   5f06c:	mov    DWORD PTR [rbx],esi
   5f06e:	mov    BYTE PTR [rcx+rdx*1],al
   5f071:	mov    BYTE PTR [rbx+0x8],0x0
   5f075:	mov    eax,DWORD PTR [rbx]
   5f077:	shl    r12,0x5
   5f07b:	mov    DWORD PTR [r14+r12*1+0x10],eax
   5f080:	mov    rax,QWORD PTR [rsp+0x38]
   5f085:	xor    rax,QWORD PTR fs:0x28
   5f08e:	jne    5f09d <FinalizeSubseqInfo+0xfd>
   5f090:	add    rsp,0x40
   5f094:	pop    rbx
   5f095:	pop    rbp
   5f096:	pop    r12
   5f098:	pop    r13
   5f09a:	pop    r14
   5f09c:	ret    
   5f09d:	call   4390 <__stack_chk_fail@plt>
   5f0a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f0ad:	nop    DWORD PTR [rax]

000000000005f0b0 <ClearSubseqInfoPayload>:
   5f0b0:	endbr64 
   5f0b4:	movsxd rdi,edi
   5f0b7:	push   rbx
   5f0b8:	lea    rbx,[rip+0x840c1]        # e3180 <seiSubseqInfo>
   5f0bf:	mov    edx,0xffd8
   5f0c4:	movabs rcx,0x800000000
   5f0ce:	shl    rdi,0x5
   5f0d2:	xor    esi,esi
   5f0d4:	add    rbx,rdi
   5f0d7:	mov    rax,QWORD PTR [rbx+0x18]
   5f0db:	mov    QWORD PTR [rax],rcx
   5f0de:	mov    rdi,QWORD PTR [rax+0x20]
   5f0e2:	mov    BYTE PTR [rax+0x8],0x0
   5f0e6:	call   43b0 <memset@plt>
   5f0eb:	mov    DWORD PTR [rbx+0x10],0x0
   5f0f2:	pop    rbx
   5f0f3:	ret    
   5f0f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f0ff:	nop

000000000005f100 <CloseSubseqInfo>:
   5f100:	endbr64 
   5f104:	push   rbx
   5f105:	movsxd rbx,edi
   5f108:	mov    rdi,rbx
   5f10b:	lea    rbx,[rip+0x8406e]        # e3180 <seiSubseqInfo>
   5f112:	shl    rdi,0x5
   5f116:	add    rbx,rdi
   5f119:	mov    rax,QWORD PTR [rbx+0x18]
   5f11d:	mov    DWORD PTR [rbx+0xc],0xffffffff
   5f124:	mov    DWORD PTR [rbx+0x10],0x0
   5f12b:	mov    rdi,QWORD PTR [rax+0x20]
   5f12f:	call   42d0 <free@plt>
   5f134:	mov    rdi,QWORD PTR [rbx+0x18]
   5f138:	pop    rbx
   5f139:	jmp    42d0 <free@plt>
   5f13e:	xchg   ax,ax

000000000005f140 <InitSubseqLayerInfo>:
   5f140:	endbr64 
   5f144:	mov    DWORD PTR [rip+0x2a462],0x1        # 895b0 <seiHasSubseqLayerInfo>
   5f14e:	mov    QWORD PTR [rip+0x83fb7],0x0        # e3110 <seiSubseqLayerInfo>
   5f159:	mov    DWORD PTR [rip+0x83fbd],0x2        # e3120 <seiSubseqLayerInfo+0x10>
   5f163:	ret    
   5f164:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f16f:	nop

000000000005f170 <CloseSubseqLayerInfo>:
   5f170:	endbr64 
   5f174:	ret    
   5f175:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000005f180 <FinalizeSubseqLayerInfo>:
   5f180:	endbr64 
   5f184:	mov    DWORD PTR [rip+0x83f96],0x0        # e3124 <seiSubseqLayerInfo+0x14>
   5f18e:	mov    eax,DWORD PTR [rip+0x83f8c]        # e3120 <seiSubseqLayerInfo+0x10>
   5f194:	test   eax,eax
   5f196:	jle    5f1de <FinalizeSubseqLayerInfo+0x5e>
   5f198:	movzx  edx,WORD PTR [rip+0x83f71]        # e3110 <seiSubseqLayerInfo>
   5f19f:	mov    WORD PTR [rip+0x83f72],dx        # e3118 <seiSubseqLayerInfo+0x8>
   5f1a6:	movzx  edx,WORD PTR [rip+0x83f67]        # e3114 <seiSubseqLayerInfo+0x4>
   5f1ad:	mov    WORD PTR [rip+0x83f66],dx        # e311a <seiSubseqLayerInfo+0xa>
   5f1b4:	cmp    eax,0x1
   5f1b7:	je     5f1d5 <FinalizeSubseqLayerInfo+0x55>
   5f1b9:	movzx  edx,WORD PTR [rip+0x83f52]        # e3112 <seiSubseqLayerInfo+0x2>
   5f1c0:	mov    WORD PTR [rip+0x83f55],dx        # e311c <seiSubseqLayerInfo+0xc>
   5f1c7:	movzx  edx,WORD PTR [rip+0x83f48]        # e3116 <seiSubseqLayerInfo+0x6>
   5f1ce:	mov    WORD PTR [rip+0x83f49],dx        # e311e <seiSubseqLayerInfo+0xe>
   5f1d5:	shl    eax,0x2
   5f1d8:	mov    DWORD PTR [rip+0x83f46],eax        # e3124 <seiSubseqLayerInfo+0x14>
   5f1de:	ret    
   5f1df:	nop

000000000005f1e0 <ClearSubseqCharPayload>:
   5f1e0:	endbr64 
   5f1e4:	sub    rsp,0x8
   5f1e8:	mov    rax,QWORD PTR [rip+0x83ed9]        # e30c8 <seiSubseqChar+0x48>
   5f1ef:	mov    edx,0xffd8
   5f1f4:	xor    esi,esi
   5f1f6:	mov    rdi,QWORD PTR [rax+0x20]
   5f1fa:	call   43b0 <memset@plt>
   5f1ff:	mov    rax,QWORD PTR [rip+0x83ec2]        # e30c8 <seiSubseqChar+0x48>
   5f206:	movabs rcx,0x800000000
   5f210:	mov    QWORD PTR [rax],rcx
   5f213:	mov    BYTE PTR [rax+0x8],0x0
   5f217:	mov    DWORD PTR [rip+0x2a38b],0x0        # 895ac <seiHasSubseqChar>
   5f221:	mov    DWORD PTR [rip+0x83ea5],0x0        # e30d0 <seiSubseqChar+0x50>
   5f22b:	add    rsp,0x8
   5f22f:	ret    

000000000005f230 <InitSubseqChar>:
   5f230:	endbr64 
   5f234:	push   rbx
   5f235:	mov    edi,0x30
   5f23a:	call   4460 <malloc@plt>
   5f23f:	mov    QWORD PTR [rip+0x83e82],rax        # e30c8 <seiSubseqChar+0x48>
   5f246:	test   rax,rax
   5f249:	je     5f2b1 <InitSubseqChar+0x81>
   5f24b:	mov    rbx,rax
   5f24e:	mov    edi,0xffd8
   5f253:	call   4460 <malloc@plt>
   5f258:	mov    QWORD PTR [rbx+0x20],rax
   5f25c:	test   rax,rax
   5f25f:	je     5f2c6 <InitSubseqChar+0x96>
   5f261:	xor    eax,eax
   5f263:	call   5f1e0 <ClearSubseqCharPayload>
   5f268:	mov    rax,QWORD PTR [rip+0x29341]        # 885b0 <img>
   5f26f:	lea    rdx,[rip+0x83f0a]        # e3180 <seiSubseqInfo>
   5f276:	pop    rbx
   5f277:	mov    DWORD PTR [rip+0x83e07],0x0        # e3088 <seiSubseqChar+0x8>
   5f281:	movsxd rax,DWORD PTR [rax+0x11ac0]
   5f288:	mov    DWORD PTR [rip+0x83dfe],0x0        # e3090 <seiSubseqChar+0x10>
   5f292:	mov    DWORD PTR [rip+0x83e00],0x0        # e309c <seiSubseqChar+0x1c>
   5f29c:	mov    DWORD PTR [rip+0x83dde],eax        # e3080 <seiSubseqChar>
   5f2a2:	shl    rax,0x5
   5f2a6:	mov    eax,DWORD PTR [rdx+rax*1+0x4]
   5f2aa:	mov    DWORD PTR [rip+0x83dd4],eax        # e3084 <seiSubseqChar+0x4>
   5f2b0:	ret    
   5f2b1:	lea    rdi,[rip+0x18650]        # 77908 <b8_mode_table.7699+0x2a8>
   5f2b8:	call   38210 <no_mem_exit>
   5f2bd:	mov    rbx,QWORD PTR [rip+0x83e04]        # e30c8 <seiSubseqChar+0x48>
   5f2c4:	jmp    5f24e <InitSubseqChar+0x1e>
   5f2c6:	lea    rdi,[rip+0x18663]        # 77930 <b8_mode_table.7699+0x2d0>
   5f2cd:	call   38210 <no_mem_exit>
   5f2d2:	jmp    5f261 <InitSubseqChar+0x31>
   5f2d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f2df:	nop

000000000005f2e0 <UpdateSubseqChar>:
   5f2e0:	endbr64 
   5f2e4:	mov    rax,QWORD PTR [rip+0x292c5]        # 885b0 <img>
   5f2eb:	lea    rdx,[rip+0x83e8e]        # e3180 <seiSubseqInfo>
   5f2f2:	mov    DWORD PTR [rip+0x83d8c],0x0        # e3088 <seiSubseqChar+0x8>
   5f2fc:	mov    QWORD PTR [rip+0x83d91],0x1e        # e3098 <seiSubseqChar+0x18>
   5f307:	movsxd rax,DWORD PTR [rax+0x11ac0]
   5f30e:	mov    DWORD PTR [rip+0x2a294],0x1        # 895ac <seiHasSubseqChar>
   5f318:	mov    DWORD PTR [rip+0x83d62],eax        # e3080 <seiSubseqChar>
   5f31e:	shl    rax,0x5
   5f322:	mov    eax,DWORD PTR [rdx+rax*1+0x4]
   5f326:	mov    DWORD PTR [rip+0x83d58],eax        # e3084 <seiSubseqChar+0x4>
   5f32c:	movabs rax,0x6400000000
   5f336:	mov    QWORD PTR [rip+0x83d53],rax        # e3090 <seiSubseqChar+0x10>
   5f33d:	movabs rax,0x300000001
   5f347:	mov    QWORD PTR [rip+0x83d52],rax        # e30a0 <seiSubseqChar+0x20>
   5f34e:	movabs rax,0x400000002
   5f358:	mov    QWORD PTR [rip+0x83d55],rax        # e30b4 <seiSubseqChar+0x34>
   5f35f:	ret    

000000000005f360 <FinalizeSubseqChar>:
   5f360:	endbr64 
   5f364:	push   r14
   5f366:	push   r13
   5f368:	push   r12
   5f36a:	push   rbp
   5f36b:	push   rbx
   5f36c:	sub    rsp,0x40
   5f370:	mov    rbp,QWORD PTR [rip+0x83d51]        # e30c8 <seiSubseqChar+0x48>
   5f377:	mov    rax,QWORD PTR fs:0x28
   5f380:	mov    QWORD PTR [rsp+0x38],rax
   5f385:	xor    eax,eax
   5f387:	lea    rax,[rip+0x6f22]        # 662b0 <ue_linfo>
   5f38e:	mov    r12,rsp
   5f391:	mov    DWORD PTR [rsp],0x0
   5f398:	mov    rsi,rbp
   5f39b:	mov    rdi,r12
   5f39e:	mov    QWORD PTR [rsp+0x20],rax
   5f3a3:	mov    eax,DWORD PTR [rip+0x83cd7]        # e3080 <seiSubseqChar>
   5f3a9:	mov    DWORD PTR [rsp+0x4],eax
   5f3ad:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f3b2:	mov    eax,DWORD PTR [rip+0x83ccc]        # e3084 <seiSubseqChar+0x4>
   5f3b8:	mov    rsi,rbp
   5f3bb:	mov    rdi,r12
   5f3be:	mov    DWORD PTR [rsp+0x4],eax
   5f3c2:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f3c7:	mov    eax,DWORD PTR [rip+0x83cbb]        # e3088 <seiSubseqChar+0x8>
   5f3cd:	mov    rsi,rbp
   5f3d0:	mov    rdi,r12
   5f3d3:	mov    DWORD PTR [rsp+0xc],0x1
   5f3db:	mov    DWORD PTR [rsp+0x14],eax
   5f3df:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f3e4:	mov    ecx,DWORD PTR [rip+0x83c9e]        # e3088 <seiSubseqChar+0x8>
   5f3ea:	test   ecx,ecx
   5f3ec:	jne    5f4e8 <FinalizeSubseqChar+0x188>
   5f3f2:	mov    eax,DWORD PTR [rip+0x83c98]        # e3090 <seiSubseqChar+0x10>
   5f3f8:	mov    rsi,rbp
   5f3fb:	mov    rdi,r12
   5f3fe:	mov    DWORD PTR [rsp+0xc],0x1
   5f406:	mov    DWORD PTR [rsp+0x14],eax
   5f40a:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f40f:	mov    edx,DWORD PTR [rip+0x83c7b]        # e3090 <seiSubseqChar+0x10>
   5f415:	test   edx,edx
   5f417:	jne    5f510 <FinalizeSubseqChar+0x1b0>
   5f41d:	mov    eax,DWORD PTR [rip+0x83c79]        # e309c <seiSubseqChar+0x1c>
   5f423:	mov    rsi,rbp
   5f426:	mov    rdi,r12
   5f429:	xor    ebx,ebx
   5f42b:	lea    r14,[rip+0x83c6e]        # e30a0 <seiSubseqChar+0x20>
   5f432:	mov    DWORD PTR [rsp+0x4],eax
   5f436:	lea    r13,[r14+0x14]
   5f43a:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f43f:	mov    eax,DWORD PTR [rip+0x83c57]        # e309c <seiSubseqChar+0x1c>
   5f445:	test   eax,eax
   5f447:	jle    5f483 <FinalizeSubseqChar+0x123>
   5f449:	nop    DWORD PTR [rax+0x0]
   5f450:	mov    eax,DWORD PTR [r14+rbx*4]
   5f454:	mov    rsi,rbp
   5f457:	mov    rdi,r12
   5f45a:	mov    DWORD PTR [rsp+0x4],eax
   5f45e:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f463:	mov    eax,DWORD PTR [r13+rbx*4+0x0]
   5f468:	mov    rsi,rbp
   5f46b:	mov    rdi,r12
   5f46e:	add    rbx,0x1
   5f472:	mov    DWORD PTR [rsp+0x4],eax
   5f476:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f47b:	cmp    DWORD PTR [rip+0x83c1b],ebx        # e309c <seiSubseqChar+0x1c>
   5f481:	jg     5f450 <FinalizeSubseqChar+0xf0>
   5f483:	mov    ecx,DWORD PTR [rbp+0x4]
   5f486:	cmp    ecx,0x8
   5f489:	je     5f4bc <FinalizeSubseqChar+0x15c>
   5f48b:	movzx  eax,BYTE PTR [rbp+0x8]
   5f48f:	sub    ecx,0x1
   5f492:	mov    DWORD PTR [rbp+0x4],0x8
   5f499:	lea    eax,[rax+rax*1+0x1]
   5f49d:	movzx  edx,al
   5f4a0:	shl    edx,cl
   5f4a2:	test   ecx,ecx
   5f4a4:	mov    rcx,QWORD PTR [rbp+0x20]
   5f4a8:	cmovne eax,edx
   5f4ab:	movsxd rdx,DWORD PTR [rbp+0x0]
   5f4af:	lea    esi,[rdx+0x1]
   5f4b2:	mov    DWORD PTR [rbp+0x0],esi
   5f4b5:	mov    BYTE PTR [rcx+rdx*1],al
   5f4b8:	mov    BYTE PTR [rbp+0x8],0x0
   5f4bc:	mov    eax,DWORD PTR [rbp+0x0]
   5f4bf:	mov    DWORD PTR [rip+0x83c0b],eax        # e30d0 <seiSubseqChar+0x50>
   5f4c5:	mov    rax,QWORD PTR [rsp+0x38]
   5f4ca:	xor    rax,QWORD PTR fs:0x28
   5f4d3:	jne    5f54f <FinalizeSubseqChar+0x1ef>
   5f4d5:	add    rsp,0x40
   5f4d9:	pop    rbx
   5f4da:	pop    rbp
   5f4db:	pop    r12
   5f4dd:	pop    r13
   5f4df:	pop    r14
   5f4e1:	ret    
   5f4e2:	nop    WORD PTR [rax+rax*1+0x0]
   5f4e8:	mov    eax,DWORD PTR [rip+0x83b9e]        # e308c <seiSubseqChar+0xc>
   5f4ee:	mov    rsi,rbp
   5f4f1:	mov    rdi,r12
   5f4f4:	mov    DWORD PTR [rsp+0xc],0x20
   5f4fc:	mov    DWORD PTR [rsp+0x14],eax
   5f500:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f505:	jmp    5f3f2 <FinalizeSubseqChar+0x92>
   5f50a:	nop    WORD PTR [rax+rax*1+0x0]
   5f510:	mov    eax,DWORD PTR [rip+0x83b7e]        # e3094 <seiSubseqChar+0x14>
   5f516:	mov    rsi,rbp
   5f519:	mov    rdi,r12
   5f51c:	mov    DWORD PTR [rsp+0xc],0x10
   5f524:	mov    DWORD PTR [rsp+0x14],eax
   5f528:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f52d:	mov    eax,DWORD PTR [rip+0x83b65]        # e3098 <seiSubseqChar+0x18>
   5f533:	mov    rsi,rbp
   5f536:	mov    rdi,r12
   5f539:	mov    DWORD PTR [rsp+0xc],0x10
   5f541:	mov    DWORD PTR [rsp+0x14],eax
   5f545:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f54a:	jmp    5f41d <FinalizeSubseqChar+0xbd>
   5f54f:	call   4390 <__stack_chk_fail@plt>
   5f554:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f55f:	nop

000000000005f560 <CloseSubseqChar>:
   5f560:	endbr64 
   5f564:	mov    rax,QWORD PTR [rip+0x83b5d]        # e30c8 <seiSubseqChar+0x48>
   5f56b:	test   rax,rax
   5f56e:	je     5f5a0 <CloseSubseqChar+0x40>
   5f570:	sub    rsp,0x8
   5f574:	mov    rdi,QWORD PTR [rax+0x20]
   5f578:	call   42d0 <free@plt>
   5f57d:	mov    rdi,QWORD PTR [rip+0x83b44]        # e30c8 <seiSubseqChar+0x48>
   5f584:	call   42d0 <free@plt>
   5f589:	mov    QWORD PTR [rip+0x83b34],0x0        # e30c8 <seiSubseqChar+0x48>
   5f594:	add    rsp,0x8
   5f598:	ret    
   5f599:	nop    DWORD PTR [rax+0x0]
   5f5a0:	mov    QWORD PTR [rip+0x83b1d],0x0        # e30c8 <seiSubseqChar+0x48>
   5f5ab:	ret    
   5f5ac:	nop    DWORD PTR [rax+0x0]

000000000005f5b0 <InitSceneInformation>:
   5f5b0:	endbr64 
   5f5b4:	push   rbx
   5f5b5:	mov    edi,0x30
   5f5ba:	mov    DWORD PTR [rip+0x2a004],0x1        # 895c8 <seiHasSceneInformation>
   5f5c4:	mov    QWORD PTR [rip+0x83b11],0x0        # e30e0 <seiSceneInformation>
   5f5cf:	mov    DWORD PTR [rip+0x83b0f],0xffffffff        # e30e8 <seiSceneInformation+0x8>
   5f5d9:	call   4460 <malloc@plt>
   5f5de:	mov    QWORD PTR [rip+0x83b0b],rax        # e30f0 <seiSceneInformation+0x10>
   5f5e5:	test   rax,rax
   5f5e8:	je     5f621 <InitSceneInformation+0x71>
   5f5ea:	mov    rbx,rax
   5f5ed:	mov    edi,0xffd8
   5f5f2:	call   4460 <malloc@plt>
   5f5f7:	mov    QWORD PTR [rbx+0x20],rax
   5f5fb:	mov    rdi,rax
   5f5fe:	test   rax,rax
   5f601:	je     5f636 <InitSceneInformation+0x86>
   5f603:	movabs rax,0x800000000
   5f60d:	mov    BYTE PTR [rbx+0x8],0x0
   5f611:	mov    edx,0xffd8
   5f616:	xor    esi,esi
   5f618:	mov    QWORD PTR [rbx],rax
   5f61b:	pop    rbx
   5f61c:	jmp    43b0 <memset@plt>
   5f621:	lea    rdi,[rip+0x18340]        # 77968 <b8_mode_table.7699+0x308>
   5f628:	call   38210 <no_mem_exit>
   5f62d:	mov    rbx,QWORD PTR [rip+0x83abc]        # e30f0 <seiSceneInformation+0x10>
   5f634:	jmp    5f5ed <InitSceneInformation+0x3d>
   5f636:	lea    rdi,[rip+0x1835b]        # 77998 <b8_mode_table.7699+0x338>
   5f63d:	call   38210 <no_mem_exit>
   5f642:	mov    rbx,QWORD PTR [rip+0x83aa7]        # e30f0 <seiSceneInformation+0x10>
   5f649:	mov    rdi,QWORD PTR [rbx+0x20]
   5f64d:	jmp    5f603 <InitSceneInformation+0x53>
   5f64f:	nop

000000000005f650 <CloseSceneInformation>:
   5f650:	endbr64 
   5f654:	mov    rax,QWORD PTR [rip+0x83a95]        # e30f0 <seiSceneInformation+0x10>
   5f65b:	test   rax,rax
   5f65e:	je     5f690 <CloseSceneInformation+0x40>
   5f660:	sub    rsp,0x8
   5f664:	mov    rdi,QWORD PTR [rax+0x20]
   5f668:	call   42d0 <free@plt>
   5f66d:	mov    rdi,QWORD PTR [rip+0x83a7c]        # e30f0 <seiSceneInformation+0x10>
   5f674:	call   42d0 <free@plt>
   5f679:	mov    QWORD PTR [rip+0x83a6c],0x0        # e30f0 <seiSceneInformation+0x10>
   5f684:	add    rsp,0x8
   5f688:	ret    
   5f689:	nop    DWORD PTR [rax+0x0]
   5f690:	mov    QWORD PTR [rip+0x83a55],0x0        # e30f0 <seiSceneInformation+0x10>
   5f69b:	ret    
   5f69c:	nop    DWORD PTR [rax+0x0]

000000000005f6a0 <FinalizeSceneInformation>:
   5f6a0:	endbr64 
   5f6a4:	push   rbp
   5f6a5:	push   rbx
   5f6a6:	sub    rsp,0x48
   5f6aa:	mov    rbx,QWORD PTR [rip+0x83a3f]        # e30f0 <seiSceneInformation+0x10>
   5f6b1:	mov    rax,QWORD PTR fs:0x28
   5f6ba:	mov    QWORD PTR [rsp+0x38],rax
   5f6bf:	xor    eax,eax
   5f6c1:	lea    rax,[rip+0x6be8]        # 662b0 <ue_linfo>
   5f6c8:	mov    rbp,rsp
   5f6cb:	mov    DWORD PTR [rsp],0x0
   5f6d2:	mov    rsi,rbx
   5f6d5:	mov    rdi,rbp
   5f6d8:	mov    DWORD PTR [rsp+0xc],0x8
   5f6e0:	mov    QWORD PTR [rsp+0x20],rax
   5f6e5:	mov    eax,DWORD PTR [rip+0x839f5]        # e30e0 <seiSceneInformation>
   5f6eb:	mov    DWORD PTR [rsp+0x14],eax
   5f6ef:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f6f4:	mov    eax,DWORD PTR [rip+0x839ea]        # e30e4 <seiSceneInformation+0x4>
   5f6fa:	mov    rsi,rbx
   5f6fd:	mov    rdi,rbp
   5f700:	mov    DWORD PTR [rsp+0x4],eax
   5f704:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f709:	cmp    DWORD PTR [rip+0x839d4],0x3        # e30e4 <seiSceneInformation+0x4>
   5f710:	jg     5f770 <FinalizeSceneInformation+0xd0>
   5f712:	mov    ecx,DWORD PTR [rbx+0x4]
   5f715:	cmp    ecx,0x8
   5f718:	je     5f749 <FinalizeSceneInformation+0xa9>
   5f71a:	movzx  eax,BYTE PTR [rbx+0x8]
   5f71e:	sub    ecx,0x1
   5f721:	mov    DWORD PTR [rbx+0x4],0x8
   5f728:	lea    eax,[rax+rax*1+0x1]
   5f72c:	movzx  edx,al
   5f72f:	shl    edx,cl
   5f731:	test   ecx,ecx
   5f733:	mov    rcx,QWORD PTR [rbx+0x20]
   5f737:	cmovne eax,edx
   5f73a:	movsxd rdx,DWORD PTR [rbx]
   5f73d:	lea    esi,[rdx+0x1]
   5f740:	mov    DWORD PTR [rbx],esi
   5f742:	mov    BYTE PTR [rcx+rdx*1],al
   5f745:	mov    BYTE PTR [rbx+0x8],0x0
   5f749:	mov    eax,DWORD PTR [rbx]
   5f74b:	mov    DWORD PTR [rip+0x839a7],eax        # e30f8 <seiSceneInformation+0x18>
   5f751:	mov    rax,QWORD PTR [rsp+0x38]
   5f756:	xor    rax,QWORD PTR fs:0x28
   5f75f:	jne    5f78f <FinalizeSceneInformation+0xef>
   5f761:	add    rsp,0x48
   5f765:	pop    rbx
   5f766:	pop    rbp
   5f767:	ret    
   5f768:	nop    DWORD PTR [rax+rax*1+0x0]
   5f770:	mov    eax,DWORD PTR [rip+0x83972]        # e30e8 <seiSceneInformation+0x8>
   5f776:	mov    rsi,rbx
   5f779:	mov    rdi,rbp
   5f77c:	mov    DWORD PTR [rsp+0xc],0x8
   5f784:	mov    DWORD PTR [rsp+0x14],eax
   5f788:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5f78d:	jmp    5f712 <FinalizeSceneInformation+0x72>
   5f78f:	call   4390 <__stack_chk_fail@plt>
   5f794:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f79f:	nop

000000000005f7a0 <UpdateSceneInformation>:
   5f7a0:	endbr64 
   5f7a4:	mov    DWORD PTR [rip+0x29e1e],edi        # 895c8 <seiHasSceneInformation>
   5f7aa:	mov    DWORD PTR [rip+0x83930],esi        # e30e0 <seiSceneInformation>
   5f7b0:	mov    DWORD PTR [rip+0x8392e],edx        # e30e4 <seiSceneInformation+0x4>
   5f7b6:	cmp    edx,0x3
   5f7b9:	jle    5f7c1 <UpdateSceneInformation+0x21>
   5f7bb:	mov    DWORD PTR [rip+0x83927],ecx        # e30e8 <seiSceneInformation+0x8>
   5f7c1:	ret    
   5f7c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f7cd:	nop    DWORD PTR [rax]

000000000005f7d0 <ClearPanScanRectInfoPayload>:
   5f7d0:	endbr64 
   5f7d4:	sub    rsp,0x8
   5f7d8:	mov    rax,QWORD PTR [rip+0x83879]        # e3058 <seiPanScanRectInfo+0x18>
   5f7df:	mov    edx,0xffd8
   5f7e4:	xor    esi,esi
   5f7e6:	mov    rdi,QWORD PTR [rax+0x20]
   5f7ea:	call   43b0 <memset@plt>
   5f7ef:	mov    rax,QWORD PTR [rip+0x83862]        # e3058 <seiPanScanRectInfo+0x18>
   5f7f6:	movabs rcx,0x800000000
   5f800:	mov    QWORD PTR [rax],rcx
   5f803:	mov    BYTE PTR [rax+0x8],0x0
   5f807:	mov    DWORD PTR [rip+0x29d97],0x1        # 895a8 <seiHasPanScanRectInfo>
   5f811:	mov    DWORD PTR [rip+0x83845],0x0        # e3060 <seiPanScanRectInfo+0x20>
   5f81b:	add    rsp,0x8
   5f81f:	ret    

000000000005f820 <InitPanScanRectInfo>:
   5f820:	endbr64 
   5f824:	push   rbx
   5f825:	mov    edi,0x30
   5f82a:	call   4460 <malloc@plt>
   5f82f:	mov    QWORD PTR [rip+0x83822],rax        # e3058 <seiPanScanRectInfo+0x18>
   5f836:	test   rax,rax
   5f839:	je     5f870 <InitPanScanRectInfo+0x50>
   5f83b:	mov    rbx,rax
   5f83e:	mov    edi,0xffd8
   5f843:	call   4460 <malloc@plt>
   5f848:	mov    QWORD PTR [rbx+0x20],rax
   5f84c:	test   rax,rax
   5f84f:	je     5f885 <InitPanScanRectInfo+0x65>
   5f851:	xor    eax,eax
   5f853:	call   5f7d0 <ClearPanScanRectInfoPayload>
   5f858:	pop    rbx
   5f859:	mov    QWORD PTR [rip+0x837e0],0x0        # e3044 <seiPanScanRectInfo+0x4>
   5f864:	mov    QWORD PTR [rip+0x837dd],0x0        # e304c <seiPanScanRectInfo+0xc>
   5f86f:	ret    
   5f870:	lea    rdi,[rip+0x18161]        # 779d8 <b8_mode_table.7699+0x378>
   5f877:	call   38210 <no_mem_exit>
   5f87c:	mov    rbx,QWORD PTR [rip+0x837d5]        # e3058 <seiPanScanRectInfo+0x18>
   5f883:	jmp    5f83e <InitPanScanRectInfo+0x1e>
   5f885:	lea    rdi,[rip+0x1817c]        # 77a08 <b8_mode_table.7699+0x3a8>
   5f88c:	call   38210 <no_mem_exit>
   5f891:	jmp    5f851 <InitPanScanRectInfo+0x31>
   5f893:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5f89e:	xchg   ax,ax

000000000005f8a0 <UpdatePanScanRectInfo>:
   5f8a0:	endbr64 
   5f8a4:	movabs rax,0xa00000003
   5f8ae:	mov    DWORD PTR [rip+0x83798],0x20        # e3050 <seiPanScanRectInfo+0x10>
   5f8b8:	mov    QWORD PTR [rip+0x83781],rax        # e3040 <seiPanScanRectInfo>
   5f8bf:	movabs rax,0x1400000028
   5f8c9:	mov    QWORD PTR [rip+0x83778],rax        # e3048 <seiPanScanRectInfo+0x8>
   5f8d0:	mov    DWORD PTR [rip+0x29cce],0x1        # 895a8 <seiHasPanScanRectInfo>
   5f8da:	ret    
   5f8db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005f8e0 <FinalizePanScanRectInfo>:
   5f8e0:	endbr64 
   5f8e4:	push   rbp
   5f8e5:	push   rbx
   5f8e6:	sub    rsp,0x48
   5f8ea:	mov    rbx,QWORD PTR [rip+0x83767]        # e3058 <seiPanScanRectInfo+0x18>
   5f8f1:	mov    rax,QWORD PTR fs:0x28
   5f8fa:	mov    QWORD PTR [rsp+0x38],rax
   5f8ff:	xor    eax,eax
   5f901:	lea    rax,[rip+0x69a8]        # 662b0 <ue_linfo>
   5f908:	mov    rbp,rsp
   5f90b:	mov    DWORD PTR [rsp],0x0
   5f912:	mov    rsi,rbx
   5f915:	mov    rdi,rbp
   5f918:	mov    QWORD PTR [rsp+0x20],rax
   5f91d:	mov    eax,DWORD PTR [rip+0x8371d]        # e3040 <seiPanScanRectInfo>
   5f923:	mov    DWORD PTR [rsp+0x4],eax
   5f927:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f92c:	mov    eax,DWORD PTR [rip+0x83712]        # e3044 <seiPanScanRectInfo+0x4>
   5f932:	mov    rsi,rbx
   5f935:	mov    rdi,rbp
   5f938:	mov    DWORD PTR [rsp+0x4],eax
   5f93c:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f941:	mov    eax,DWORD PTR [rip+0x83701]        # e3048 <seiPanScanRectInfo+0x8>
   5f947:	mov    rsi,rbx
   5f94a:	mov    rdi,rbp
   5f94d:	mov    DWORD PTR [rsp+0x4],eax
   5f951:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f956:	mov    eax,DWORD PTR [rip+0x836f0]        # e304c <seiPanScanRectInfo+0xc>
   5f95c:	mov    rsi,rbx
   5f95f:	mov    rdi,rbp
   5f962:	mov    DWORD PTR [rsp+0x4],eax
   5f966:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f96b:	mov    eax,DWORD PTR [rip+0x836df]        # e3050 <seiPanScanRectInfo+0x10>
   5f971:	mov    rsi,rbx
   5f974:	mov    rdi,rbp
   5f977:	mov    DWORD PTR [rsp+0x4],eax
   5f97b:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   5f980:	mov    ecx,DWORD PTR [rbx+0x4]
   5f983:	cmp    ecx,0x8
   5f986:	je     5f9b7 <FinalizePanScanRectInfo+0xd7>
   5f988:	movzx  eax,BYTE PTR [rbx+0x8]
   5f98c:	sub    ecx,0x1
   5f98f:	mov    DWORD PTR [rbx+0x4],0x8
   5f996:	lea    eax,[rax+rax*1+0x1]
   5f99a:	movzx  edx,al
   5f99d:	shl    edx,cl
   5f99f:	test   ecx,ecx
   5f9a1:	mov    rcx,QWORD PTR [rbx+0x20]
   5f9a5:	cmovne eax,edx
   5f9a8:	movsxd rdx,DWORD PTR [rbx]
   5f9ab:	lea    esi,[rdx+0x1]
   5f9ae:	mov    DWORD PTR [rbx],esi
   5f9b0:	mov    BYTE PTR [rcx+rdx*1],al
   5f9b3:	mov    BYTE PTR [rbx+0x8],0x0
   5f9b7:	mov    eax,DWORD PTR [rbx]
   5f9b9:	mov    DWORD PTR [rip+0x836a1],eax        # e3060 <seiPanScanRectInfo+0x20>
   5f9bf:	mov    rax,QWORD PTR [rsp+0x38]
   5f9c4:	xor    rax,QWORD PTR fs:0x28
   5f9cd:	jne    5f9d6 <FinalizePanScanRectInfo+0xf6>
   5f9cf:	add    rsp,0x48
   5f9d3:	pop    rbx
   5f9d4:	pop    rbp
   5f9d5:	ret    
   5f9d6:	call   4390 <__stack_chk_fail@plt>
   5f9db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005f9e0 <ClosePanScanRectInfo>:
   5f9e0:	endbr64 
   5f9e4:	mov    rax,QWORD PTR [rip+0x8366d]        # e3058 <seiPanScanRectInfo+0x18>
   5f9eb:	test   rax,rax
   5f9ee:	je     5fa20 <ClosePanScanRectInfo+0x40>
   5f9f0:	sub    rsp,0x8
   5f9f4:	mov    rdi,QWORD PTR [rax+0x20]
   5f9f8:	call   42d0 <free@plt>
   5f9fd:	mov    rdi,QWORD PTR [rip+0x83654]        # e3058 <seiPanScanRectInfo+0x18>
   5fa04:	call   42d0 <free@plt>
   5fa09:	mov    QWORD PTR [rip+0x83644],0x0        # e3058 <seiPanScanRectInfo+0x18>
   5fa14:	add    rsp,0x8
   5fa18:	ret    
   5fa19:	nop    DWORD PTR [rax+0x0]
   5fa20:	mov    QWORD PTR [rip+0x8362d],0x0        # e3058 <seiPanScanRectInfo+0x18>
   5fa2b:	ret    
   5fa2c:	nop    DWORD PTR [rax+0x0]

000000000005fa30 <ClearUser_data_unregistered>:
   5fa30:	endbr64 
   5fa34:	sub    rsp,0x8
   5fa38:	mov    rax,QWORD PTR [rip+0x837b1]        # e31f0 <seiUser_data_unregistered+0x10>
   5fa3f:	mov    edx,0xffd8
   5fa44:	xor    esi,esi
   5fa46:	mov    rdi,QWORD PTR [rax+0x20]
   5fa4a:	call   43b0 <memset@plt>
   5fa4f:	mov    rax,QWORD PTR [rip+0x8379a]        # e31f0 <seiUser_data_unregistered+0x10>
   5fa56:	mov    rdi,QWORD PTR [rip+0x83783]        # e31e0 <seiUser_data_unregistered>
   5fa5d:	xor    esi,esi
   5fa5f:	movabs rcx,0x800000000
   5fa69:	mov    edx,0xffd8
   5fa6e:	mov    QWORD PTR [rax],rcx
   5fa71:	mov    BYTE PTR [rax+0x8],0x0
   5fa75:	mov    DWORD PTR [rip+0x83779],0x0        # e31f8 <seiUser_data_unregistered+0x18>
   5fa7f:	call   43b0 <memset@plt>
   5fa84:	mov    DWORD PTR [rip+0x8375a],0x0        # e31e8 <seiUser_data_unregistered+0x8>
   5fa8e:	mov    DWORD PTR [rip+0x837b0],0x1        # e3248 <seiHasUser_data_unregistered_info>
   5fa98:	add    rsp,0x8
   5fa9c:	ret    
   5fa9d:	nop    DWORD PTR [rax]

000000000005faa0 <InitUser_data_unregistered>:
   5faa0:	endbr64 
   5faa4:	push   rbx
   5faa5:	mov    edi,0x30
   5faaa:	call   4460 <malloc@plt>
   5faaf:	mov    QWORD PTR [rip+0x8373a],rax        # e31f0 <seiUser_data_unregistered+0x10>
   5fab6:	test   rax,rax
   5fab9:	je     5faef <InitUser_data_unregistered+0x4f>
   5fabb:	mov    rbx,rax
   5fabe:	mov    edi,0xffd8
   5fac3:	call   4460 <malloc@plt>
   5fac8:	mov    QWORD PTR [rbx+0x20],rax
   5facc:	test   rax,rax
   5facf:	je     5fb12 <InitUser_data_unregistered+0x72>
   5fad1:	mov    edi,0xffd8
   5fad6:	call   4460 <malloc@plt>
   5fadb:	mov    QWORD PTR [rip+0x836fe],rax        # e31e0 <seiUser_data_unregistered>
   5fae2:	test   rax,rax
   5fae5:	je     5fb04 <InitUser_data_unregistered+0x64>
   5fae7:	xor    eax,eax
   5fae9:	pop    rbx
   5faea:	jmp    5fa30 <ClearUser_data_unregistered>
   5faef:	lea    rdi,[rip+0x17f52]        # 77a48 <b8_mode_table.7699+0x3e8>
   5faf6:	call   38210 <no_mem_exit>
   5fafb:	mov    rbx,QWORD PTR [rip+0x836ee]        # e31f0 <seiUser_data_unregistered+0x10>
   5fb02:	jmp    5fabe <InitUser_data_unregistered+0x1e>
   5fb04:	lea    rdi,[rip+0x17fcd]        # 77ad8 <b8_mode_table.7699+0x478>
   5fb0b:	call   38210 <no_mem_exit>
   5fb10:	jmp    5fae7 <InitUser_data_unregistered+0x47>
   5fb12:	lea    rdi,[rip+0x17f6f]        # 77a88 <b8_mode_table.7699+0x428>
   5fb19:	call   38210 <no_mem_exit>
   5fb1e:	jmp    5fad1 <InitUser_data_unregistered+0x31>

000000000005fb20 <UpdateUser_data_unregistered>:
   5fb20:	endbr64 
   5fb24:	xor    eax,eax
   5fb26:	lea    rsi,[rip+0x836b3]        # e31e0 <seiUser_data_unregistered>
   5fb2d:	nop    DWORD PTR [rax]
   5fb30:	mov    rdx,QWORD PTR [rsi]
   5fb33:	lea    ecx,[rax*4+0x0]
   5fb3a:	mov    BYTE PTR [rdx+rax*1],cl
   5fb3d:	add    rax,0x1
   5fb41:	cmp    rax,0x7
   5fb45:	jne    5fb30 <UpdateUser_data_unregistered+0x10>
   5fb47:	mov    DWORD PTR [rip+0x83697],0x7        # e31e8 <seiUser_data_unregistered+0x8>
   5fb51:	ret    
   5fb52:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5fb5d:	nop    DWORD PTR [rax]

000000000005fb60 <FinalizeUser_data_unregistered>:
   5fb60:	endbr64 
   5fb64:	push   r13
   5fb66:	lea    r13,[rip+0x83673]        # e31e0 <seiUser_data_unregistered>
   5fb6d:	push   r12
   5fb6f:	push   rbp
   5fb70:	push   rbx
   5fb71:	xor    ebx,ebx
   5fb73:	sub    rsp,0x48
   5fb77:	mov    rbp,QWORD PTR [rip+0x83672]        # e31f0 <seiUser_data_unregistered+0x10>
   5fb7e:	mov    rax,QWORD PTR fs:0x28
   5fb87:	mov    QWORD PTR [rsp+0x38],rax
   5fb8c:	xor    eax,eax
   5fb8e:	lea    rax,[rip+0x671b]        # 662b0 <ue_linfo>
   5fb95:	mov    DWORD PTR [rsp],0x0
   5fb9c:	mov    r12,rsp
   5fb9f:	mov    QWORD PTR [rsp+0x20],rax
   5fba4:	mov    eax,DWORD PTR [rip+0x8363e]        # e31e8 <seiUser_data_unregistered+0x8>
   5fbaa:	test   eax,eax
   5fbac:	jle    5fbdb <FinalizeUser_data_unregistered+0x7b>
   5fbae:	xchg   ax,ax
   5fbb0:	mov    rax,QWORD PTR [r13+0x0]
   5fbb4:	mov    rsi,rbp
   5fbb7:	mov    rdi,r12
   5fbba:	movsx  eax,BYTE PTR [rax+rbx*1]
   5fbbe:	mov    DWORD PTR [rsp+0xc],0x8
   5fbc6:	add    rbx,0x1
   5fbca:	mov    DWORD PTR [rsp+0x14],eax
   5fbce:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5fbd3:	cmp    DWORD PTR [rip+0x8360f],ebx        # e31e8 <seiUser_data_unregistered+0x8>
   5fbd9:	jg     5fbb0 <FinalizeUser_data_unregistered+0x50>
   5fbdb:	mov    ecx,DWORD PTR [rbp+0x4]
   5fbde:	cmp    ecx,0x8
   5fbe1:	je     5fc14 <FinalizeUser_data_unregistered+0xb4>
   5fbe3:	movzx  eax,BYTE PTR [rbp+0x8]
   5fbe7:	sub    ecx,0x1
   5fbea:	mov    DWORD PTR [rbp+0x4],0x8
   5fbf1:	lea    eax,[rax+rax*1+0x1]
   5fbf5:	movzx  edx,al
   5fbf8:	shl    edx,cl
   5fbfa:	test   ecx,ecx
   5fbfc:	mov    rcx,QWORD PTR [rbp+0x20]
   5fc00:	cmovne eax,edx
   5fc03:	movsxd rdx,DWORD PTR [rbp+0x0]
   5fc07:	lea    esi,[rdx+0x1]
   5fc0a:	mov    DWORD PTR [rbp+0x0],esi
   5fc0d:	mov    BYTE PTR [rcx+rdx*1],al
   5fc10:	mov    BYTE PTR [rbp+0x8],0x0
   5fc14:	mov    eax,DWORD PTR [rbp+0x0]
   5fc17:	mov    DWORD PTR [rip+0x835db],eax        # e31f8 <seiUser_data_unregistered+0x18>
   5fc1d:	mov    rax,QWORD PTR [rsp+0x38]
   5fc22:	xor    rax,QWORD PTR fs:0x28
   5fc2b:	jne    5fc38 <FinalizeUser_data_unregistered+0xd8>
   5fc2d:	add    rsp,0x48
   5fc31:	pop    rbx
   5fc32:	pop    rbp
   5fc33:	pop    r12
   5fc35:	pop    r13
   5fc37:	ret    
   5fc38:	call   4390 <__stack_chk_fail@plt>
   5fc3d:	nop    DWORD PTR [rax]

000000000005fc40 <CloseUser_data_unregistered>:
   5fc40:	endbr64 
   5fc44:	sub    rsp,0x8
   5fc48:	mov    rax,QWORD PTR [rip+0x835a1]        # e31f0 <seiUser_data_unregistered+0x10>
   5fc4f:	test   rax,rax
   5fc52:	je     5fc69 <CloseUser_data_unregistered+0x29>
   5fc54:	mov    rdi,QWORD PTR [rax+0x20]
   5fc58:	call   42d0 <free@plt>
   5fc5d:	mov    rdi,QWORD PTR [rip+0x8358c]        # e31f0 <seiUser_data_unregistered+0x10>
   5fc64:	call   42d0 <free@plt>
   5fc69:	mov    rdi,QWORD PTR [rip+0x83570]        # e31e0 <seiUser_data_unregistered>
   5fc70:	mov    QWORD PTR [rip+0x83575],0x0        # e31f0 <seiUser_data_unregistered+0x10>
   5fc7b:	test   rdi,rdi
   5fc7e:	je     5fc90 <CloseUser_data_unregistered+0x50>
   5fc80:	add    rsp,0x8
   5fc84:	jmp    42d0 <free@plt>
   5fc89:	nop    DWORD PTR [rax+0x0]
   5fc90:	add    rsp,0x8
   5fc94:	ret    
   5fc95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000005fca0 <ClearUser_data_registered_itu_t_t35>:
   5fca0:	endbr64 
   5fca4:	sub    rsp,0x8
   5fca8:	mov    rax,QWORD PTR [rip+0x834a9]        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5fcaf:	mov    edx,0xffd8
   5fcb4:	xor    esi,esi
   5fcb6:	mov    rdi,QWORD PTR [rax+0x20]
   5fcba:	call   43b0 <memset@plt>
   5fcbf:	mov    rax,QWORD PTR [rip+0x83492]        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5fcc6:	mov    rdi,QWORD PTR [rip+0x83473]        # e3140 <seiUser_data_registered_itu_t_t35>
   5fccd:	xor    esi,esi
   5fccf:	movabs rcx,0x800000000
   5fcd9:	mov    edx,0xffd8
   5fcde:	mov    QWORD PTR [rax],rcx
   5fce1:	mov    BYTE PTR [rax+0x8],0x0
   5fce5:	mov    DWORD PTR [rip+0x83471],0x0        # e3160 <seiUser_data_registered_itu_t_t35+0x20>
   5fcef:	call   43b0 <memset@plt>
   5fcf4:	mov    QWORD PTR [rip+0x83449],0x0        # e3148 <seiUser_data_registered_itu_t_t35+0x8>
   5fcff:	mov    DWORD PTR [rip+0x83447],0x0        # e3150 <seiUser_data_registered_itu_t_t35+0x10>
   5fd09:	mov    DWORD PTR [rip+0x833c5],0x1        # e30d8 <seiHasUser_data_registered_itu_t_t35_info>
   5fd13:	add    rsp,0x8
   5fd17:	ret    
   5fd18:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005fd20 <InitUser_data_registered_itu_t_t35>:
   5fd20:	endbr64 
   5fd24:	push   rbx
   5fd25:	mov    edi,0x30
   5fd2a:	call   4460 <malloc@plt>
   5fd2f:	mov    QWORD PTR [rip+0x83422],rax        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5fd36:	test   rax,rax
   5fd39:	je     5fda7 <InitUser_data_registered_itu_t_t35+0x87>
   5fd3b:	mov    rbx,rax
   5fd3e:	mov    edi,0xffd8
   5fd43:	call   4460 <malloc@plt>
   5fd48:	mov    QWORD PTR [rbx+0x20],rax
   5fd4c:	test   rax,rax
   5fd4f:	je     5fd6a <InitUser_data_registered_itu_t_t35+0x4a>
   5fd51:	mov    edi,0xffd8
   5fd56:	call   4460 <malloc@plt>
   5fd5b:	mov    QWORD PTR [rip+0x833de],rax        # e3140 <seiUser_data_registered_itu_t_t35>
   5fd62:	xor    eax,eax
   5fd64:	pop    rbx
   5fd65:	jmp    5fca0 <ClearUser_data_registered_itu_t_t35>
   5fd6a:	lea    rdi,[rip+0x17def]        # 77b60 <b8_mode_table.7699+0x500>
   5fd71:	call   38210 <no_mem_exit>
   5fd76:	mov    rbx,QWORD PTR [rip+0x833db]        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5fd7d:	mov    edi,0xffd8
   5fd82:	call   4460 <malloc@plt>
   5fd87:	mov    QWORD PTR [rip+0x833b2],rax        # e3140 <seiUser_data_registered_itu_t_t35>
   5fd8e:	test   rbx,rbx
   5fd91:	jne    5fd62 <InitUser_data_registered_itu_t_t35+0x42>
   5fd93:	lea    rdi,[rip+0x17e1e]        # 77bb8 <b8_mode_table.7699+0x558>
   5fd9a:	call   38210 <no_mem_exit>
   5fd9f:	xor    eax,eax
   5fda1:	pop    rbx
   5fda2:	jmp    5fca0 <ClearUser_data_registered_itu_t_t35>
   5fda7:	lea    rdi,[rip+0x17d6a]        # 77b18 <b8_mode_table.7699+0x4b8>
   5fdae:	call   38210 <no_mem_exit>
   5fdb3:	mov    rbx,QWORD PTR [rip+0x8339e]        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5fdba:	jmp    5fd3e <InitUser_data_registered_itu_t_t35+0x1e>
   5fdbc:	nop    DWORD PTR [rax+0x0]

000000000005fdc0 <UpdateUser_data_registered_itu_t_t35>:
   5fdc0:	endbr64 
   5fdc4:	mov    DWORD PTR [rip+0x8337e],0x52        # e314c <seiUser_data_registered_itu_t_t35+0xc>
   5fdce:	xor    eax,eax
   5fdd0:	lea    rsi,[rip+0x83369]        # e3140 <seiUser_data_registered_itu_t_t35>
   5fdd7:	nop    WORD PTR [rax+rax*1+0x0]
   5fde0:	mov    rdx,QWORD PTR [rsi]
   5fde3:	lea    ecx,[rax+rax*2]
   5fde6:	mov    BYTE PTR [rdx+rax*1],cl
   5fde9:	add    rax,0x1
   5fded:	cmp    rax,0x7
   5fdf1:	jne    5fde0 <UpdateUser_data_registered_itu_t_t35+0x20>
   5fdf3:	mov    DWORD PTR [rip+0x8334b],0x7        # e3148 <seiUser_data_registered_itu_t_t35+0x8>
   5fdfd:	ret    
   5fdfe:	xchg   ax,ax

000000000005fe00 <FinalizeUser_data_registered_itu_t_t35>:
   5fe00:	endbr64 
   5fe04:	push   r13
   5fe06:	push   r12
   5fe08:	push   rbp
   5fe09:	push   rbx
   5fe0a:	sub    rsp,0x48
   5fe0e:	mov    rbp,QWORD PTR [rip+0x83343]        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5fe15:	mov    rax,QWORD PTR fs:0x28
   5fe1e:	mov    QWORD PTR [rsp+0x38],rax
   5fe23:	xor    eax,eax
   5fe25:	lea    rax,[rip+0x6484]        # 662b0 <ue_linfo>
   5fe2c:	mov    r12,rsp
   5fe2f:	mov    DWORD PTR [rsp],0x0
   5fe36:	mov    rsi,rbp
   5fe39:	mov    rdi,r12
   5fe3c:	mov    DWORD PTR [rsp+0xc],0x8
   5fe44:	mov    QWORD PTR [rsp+0x20],rax
   5fe49:	mov    eax,DWORD PTR [rip+0x832fd]        # e314c <seiUser_data_registered_itu_t_t35+0xc>
   5fe4f:	mov    DWORD PTR [rsp+0x14],eax
   5fe53:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5fe58:	cmp    DWORD PTR [rip+0x832ea],0xff        # e314c <seiUser_data_registered_itu_t_t35+0xc>
   5fe62:	je     5ff10 <FinalizeUser_data_registered_itu_t_t35+0x110>
   5fe68:	mov    eax,DWORD PTR [rip+0x832da]        # e3148 <seiUser_data_registered_itu_t_t35+0x8>
   5fe6e:	xor    ebx,ebx
   5fe70:	lea    r13,[rip+0x832c9]        # e3140 <seiUser_data_registered_itu_t_t35>
   5fe77:	test   eax,eax
   5fe79:	jle    5feab <FinalizeUser_data_registered_itu_t_t35+0xab>
   5fe7b:	nop    DWORD PTR [rax+rax*1+0x0]
   5fe80:	mov    rax,QWORD PTR [r13+0x0]
   5fe84:	mov    rsi,rbp
   5fe87:	mov    rdi,r12
   5fe8a:	movsx  eax,BYTE PTR [rax+rbx*1]
   5fe8e:	mov    DWORD PTR [rsp+0xc],0x8
   5fe96:	add    rbx,0x1
   5fe9a:	mov    DWORD PTR [rsp+0x14],eax
   5fe9e:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5fea3:	cmp    DWORD PTR [rip+0x8329f],ebx        # e3148 <seiUser_data_registered_itu_t_t35+0x8>
   5fea9:	jg     5fe80 <FinalizeUser_data_registered_itu_t_t35+0x80>
   5feab:	mov    ecx,DWORD PTR [rbp+0x4]
   5feae:	cmp    ecx,0x8
   5feb1:	je     5fee4 <FinalizeUser_data_registered_itu_t_t35+0xe4>
   5feb3:	movzx  eax,BYTE PTR [rbp+0x8]
   5feb7:	sub    ecx,0x1
   5feba:	mov    DWORD PTR [rbp+0x4],0x8
   5fec1:	lea    eax,[rax+rax*1+0x1]
   5fec5:	movzx  edx,al
   5fec8:	shl    edx,cl
   5feca:	test   ecx,ecx
   5fecc:	mov    rcx,QWORD PTR [rbp+0x20]
   5fed0:	cmovne eax,edx
   5fed3:	movsxd rdx,DWORD PTR [rbp+0x0]
   5fed7:	lea    esi,[rdx+0x1]
   5feda:	mov    DWORD PTR [rbp+0x0],esi
   5fedd:	mov    BYTE PTR [rcx+rdx*1],al
   5fee0:	mov    BYTE PTR [rbp+0x8],0x0
   5fee4:	mov    eax,DWORD PTR [rbp+0x0]
   5fee7:	mov    DWORD PTR [rip+0x83273],eax        # e3160 <seiUser_data_registered_itu_t_t35+0x20>
   5feed:	mov    rax,QWORD PTR [rsp+0x38]
   5fef2:	xor    rax,QWORD PTR fs:0x28
   5fefb:	jne    5ff32 <FinalizeUser_data_registered_itu_t_t35+0x132>
   5fefd:	add    rsp,0x48
   5ff01:	pop    rbx
   5ff02:	pop    rbp
   5ff03:	pop    r12
   5ff05:	pop    r13
   5ff07:	ret    
   5ff08:	nop    DWORD PTR [rax+rax*1+0x0]
   5ff10:	mov    eax,DWORD PTR [rip+0x8323a]        # e3150 <seiUser_data_registered_itu_t_t35+0x10>
   5ff16:	mov    rsi,rbp
   5ff19:	mov    rdi,r12
   5ff1c:	mov    DWORD PTR [rsp+0xc],0x8
   5ff24:	mov    DWORD PTR [rsp+0x14],eax
   5ff28:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   5ff2d:	jmp    5fe68 <FinalizeUser_data_registered_itu_t_t35+0x68>
   5ff32:	call   4390 <__stack_chk_fail@plt>
   5ff37:	nop    WORD PTR [rax+rax*1+0x0]

000000000005ff40 <CloseUser_data_registered_itu_t_t35>:
   5ff40:	endbr64 
   5ff44:	sub    rsp,0x8
   5ff48:	mov    rax,QWORD PTR [rip+0x83209]        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5ff4f:	test   rax,rax
   5ff52:	je     5ff69 <CloseUser_data_registered_itu_t_t35+0x29>
   5ff54:	mov    rdi,QWORD PTR [rax+0x20]
   5ff58:	call   42d0 <free@plt>
   5ff5d:	mov    rdi,QWORD PTR [rip+0x831f4]        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5ff64:	call   42d0 <free@plt>
   5ff69:	mov    rdi,QWORD PTR [rip+0x831d0]        # e3140 <seiUser_data_registered_itu_t_t35>
   5ff70:	mov    QWORD PTR [rip+0x831dd],0x0        # e3158 <seiUser_data_registered_itu_t_t35+0x18>
   5ff7b:	test   rdi,rdi
   5ff7e:	je     5ff90 <CloseUser_data_registered_itu_t_t35+0x50>
   5ff80:	add    rsp,0x8
   5ff84:	jmp    42d0 <free@plt>
   5ff89:	nop    DWORD PTR [rax+0x0]
   5ff90:	add    rsp,0x8
   5ff94:	ret    
   5ff95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000005ffa0 <ClearRandomAccess>:
   5ffa0:	endbr64 
   5ffa4:	sub    rsp,0x8
   5ffa8:	mov    rax,QWORD PTR [rip+0x83219]        # e31c8 <seiRandomAccess+0x8>
   5ffaf:	mov    edx,0xffd8
   5ffb4:	xor    esi,esi
   5ffb6:	mov    rdi,QWORD PTR [rax+0x20]
   5ffba:	call   43b0 <memset@plt>
   5ffbf:	mov    rax,QWORD PTR [rip+0x83202]        # e31c8 <seiRandomAccess+0x8>
   5ffc6:	movabs rcx,0x800000000
   5ffd0:	mov    QWORD PTR [rax],rcx
   5ffd3:	mov    BYTE PTR [rax+0x8],0x0
   5ffd7:	xor    eax,eax
   5ffd9:	mov    DWORD PTR [rip+0x831ed],0x0        # e31d0 <seiRandomAccess+0x10>
   5ffe3:	mov    WORD PTR [rip+0x831d6],ax        # e31c0 <seiRandomAccess>
   5ffea:	mov    BYTE PTR [rip+0x831d1],0x0        # e31c2 <seiRandomAccess+0x2>
   5fff1:	mov    DWORD PTR [rip+0x83105],0x0        # e3100 <seiHasRandomAccess_info>
   5fffb:	add    rsp,0x8
   5ffff:	ret    

0000000000060000 <InitRandomAccess>:
   60000:	endbr64 
   60004:	push   rbx
   60005:	mov    edi,0x30
   6000a:	call   4460 <malloc@plt>
   6000f:	mov    QWORD PTR [rip+0x831b2],rax        # e31c8 <seiRandomAccess+0x8>
   60016:	test   rax,rax
   60019:	je     60039 <InitRandomAccess+0x39>
   6001b:	mov    rbx,rax
   6001e:	mov    edi,0xffd8
   60023:	call   4460 <malloc@plt>
   60028:	mov    QWORD PTR [rbx+0x20],rax
   6002c:	test   rax,rax
   6002f:	je     6004e <InitRandomAccess+0x4e>
   60031:	xor    eax,eax
   60033:	pop    rbx
   60034:	jmp    5ffa0 <ClearRandomAccess>
   60039:	lea    rdi,[rip+0x17bc0]        # 77c00 <b8_mode_table.7699+0x5a0>
   60040:	call   38210 <no_mem_exit>
   60045:	mov    rbx,QWORD PTR [rip+0x8317c]        # e31c8 <seiRandomAccess+0x8>
   6004c:	jmp    6001e <InitRandomAccess+0x1e>
   6004e:	lea    rdi,[rip+0x17bd3]        # 77c28 <b8_mode_table.7699+0x5c8>
   60055:	call   38210 <no_mem_exit>
   6005a:	jmp    60031 <InitRandomAccess+0x31>
   6005c:	nop    DWORD PTR [rax+0x0]

0000000000060060 <InitSEIMessages>:
   60060:	endbr64 
   60064:	push   r12
   60066:	lea    r12,[rip+0x17bf3]        # 77c60 <b8_mode_table.7699+0x600>
   6006d:	push   rbp
   6006e:	push   rbx
   6006f:	lea    rbx,[rip+0x8318a]        # e3200 <sei_message>
   60076:	lea    rbp,[rbx+0x30]
   6007a:	mov    edi,0xffd8
   6007f:	call   4460 <malloc@plt>
   60084:	mov    QWORD PTR [rbx+0x10],rax
   60088:	test   rax,rax
   6008b:	je     6012c <InitSEIMessages+0xcc>
   60091:	mov    rdi,QWORD PTR [rbx+0x10]
   60095:	mov    edx,0xffd8
   6009a:	xor    esi,esi
   6009c:	mov    BYTE PTR [rbx+0x8],0x5
   600a0:	add    rbx,0x18
   600a4:	call   43b0 <memset@plt>
   600a9:	mov    DWORD PTR [rbx-0x14],0x0
   600b0:	mov    DWORD PTR [rbx-0x18],0x0
   600b7:	cmp    rbx,rbp
   600ba:	jne    6007a <InitSEIMessages+0x1a>
   600bc:	mov    QWORD PTR [rip+0x83179],0x0        # e3240 <seiSparePicturePayload+0x10>
   600c7:	xor    eax,eax
   600c9:	call   5e660 <InitSparePicture>
   600ce:	xor    eax,eax
   600d0:	call   5f230 <InitSubseqChar>
   600d5:	mov    rax,QWORD PTR [rip+0x284dc]        # 885b8 <input>
   600dc:	mov    eax,DWORD PTR [rax+0xb60]
   600e2:	test   eax,eax
   600e4:	je     60105 <InitSEIMessages+0xa5>
   600e6:	mov    DWORD PTR [rip+0x294c0],0x1        # 895b0 <seiHasSubseqLayerInfo>
   600f0:	mov    QWORD PTR [rip+0x83015],0x0        # e3110 <seiSubseqLayerInfo>
   600fb:	mov    DWORD PTR [rip+0x8301b],0x2        # e3120 <seiSubseqLayerInfo+0x10>
   60105:	xor    eax,eax
   60107:	call   5f5b0 <InitSceneInformation>
   6010c:	xor    eax,eax
   6010e:	call   5f820 <InitPanScanRectInfo>
   60113:	xor    eax,eax
   60115:	call   5faa0 <InitUser_data_unregistered>
   6011a:	xor    eax,eax
   6011c:	call   5fd20 <InitUser_data_registered_itu_t_t35>
   60121:	pop    rbx
   60122:	xor    eax,eax
   60124:	pop    rbp
   60125:	pop    r12
   60127:	jmp    60000 <InitRandomAccess>
   6012c:	mov    rdi,r12
   6012f:	call   38210 <no_mem_exit>
   60134:	jmp    60091 <InitSEIMessages+0x31>
   60139:	nop    DWORD PTR [rax+0x0]

0000000000060140 <UpdateRandomAccess>:
   60140:	endbr64 
   60144:	mov    rax,QWORD PTR [rip+0x28465]        # 885b0 <img>
   6014b:	cmp    DWORD PTR [rax+0x18],0x2
   6014f:	je     60160 <UpdateRandomAccess+0x20>
   60151:	mov    DWORD PTR [rip+0x82fa5],0x0        # e3100 <seiHasRandomAccess_info>
   6015b:	ret    
   6015c:	nop    DWORD PTR [rax+0x0]
   60160:	mov    eax,0x100
   60165:	mov    BYTE PTR [rip+0x83056],0x0        # e31c2 <seiRandomAccess+0x2>
   6016c:	mov    WORD PTR [rip+0x8304d],ax        # e31c0 <seiRandomAccess>
   60173:	mov    DWORD PTR [rip+0x82f83],0x1        # e3100 <seiHasRandomAccess_info>
   6017d:	ret    
   6017e:	xchg   ax,ax

0000000000060180 <FinalizeRandomAccess>:
   60180:	endbr64 
   60184:	push   rbp
   60185:	push   rbx
   60186:	sub    rsp,0x48
   6018a:	mov    rbx,QWORD PTR [rip+0x83037]        # e31c8 <seiRandomAccess+0x8>
   60191:	mov    rax,QWORD PTR fs:0x28
   6019a:	mov    QWORD PTR [rsp+0x38],rax
   6019f:	xor    eax,eax
   601a1:	lea    rax,[rip+0x6108]        # 662b0 <ue_linfo>
   601a8:	mov    rbp,rsp
   601ab:	mov    DWORD PTR [rsp],0x0
   601b2:	mov    rsi,rbx
   601b5:	mov    rdi,rbp
   601b8:	mov    QWORD PTR [rsp+0x20],rax
   601bd:	movzx  eax,BYTE PTR [rip+0x82ffc]        # e31c0 <seiRandomAccess>
   601c4:	mov    DWORD PTR [rsp+0x4],eax
   601c8:	call   66b90 <writeSyntaxElement2Buf_UVLC>
   601cd:	movzx  eax,BYTE PTR [rip+0x82fed]        # e31c1 <seiRandomAccess+0x1>
   601d4:	mov    rsi,rbx
   601d7:	mov    rdi,rbp
   601da:	mov    DWORD PTR [rsp+0xc],0x1
   601e2:	mov    DWORD PTR [rsp+0x14],eax
   601e6:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   601eb:	movzx  eax,BYTE PTR [rip+0x82fd0]        # e31c2 <seiRandomAccess+0x2>
   601f2:	mov    rsi,rbx
   601f5:	mov    rdi,rbp
   601f8:	mov    DWORD PTR [rsp+0xc],0x1
   60200:	mov    DWORD PTR [rsp+0x14],eax
   60204:	call   66bf0 <writeSyntaxElement2Buf_Fixed>
   60209:	mov    ecx,DWORD PTR [rbx+0x4]
   6020c:	cmp    ecx,0x8
   6020f:	je     60240 <FinalizeRandomAccess+0xc0>
   60211:	movzx  eax,BYTE PTR [rbx+0x8]
   60215:	sub    ecx,0x1
   60218:	mov    DWORD PTR [rbx+0x4],0x8
   6021f:	lea    eax,[rax+rax*1+0x1]
   60223:	movzx  edx,al
   60226:	shl    edx,cl
   60228:	test   ecx,ecx
   6022a:	mov    rcx,QWORD PTR [rbx+0x20]
   6022e:	cmovne eax,edx
   60231:	movsxd rdx,DWORD PTR [rbx]
   60234:	lea    esi,[rdx+0x1]
   60237:	mov    DWORD PTR [rbx],esi
   60239:	mov    BYTE PTR [rcx+rdx*1],al
   6023c:	mov    BYTE PTR [rbx+0x8],0x0
   60240:	mov    eax,DWORD PTR [rbx]
   60242:	mov    DWORD PTR [rip+0x82f88],eax        # e31d0 <seiRandomAccess+0x10>
   60248:	mov    rax,QWORD PTR [rsp+0x38]
   6024d:	xor    rax,QWORD PTR fs:0x28
   60256:	jne    6025f <FinalizeRandomAccess+0xdf>
   60258:	add    rsp,0x48
   6025c:	pop    rbx
   6025d:	pop    rbp
   6025e:	ret    
   6025f:	call   4390 <__stack_chk_fail@plt>
   60264:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   6026f:	nop

0000000000060270 <CloseRandomAccess>:
   60270:	endbr64 
   60274:	mov    rax,QWORD PTR [rip+0x82f4d]        # e31c8 <seiRandomAccess+0x8>
   6027b:	test   rax,rax
   6027e:	je     602b0 <CloseRandomAccess+0x40>
   60280:	sub    rsp,0x8
   60284:	mov    rdi,QWORD PTR [rax+0x20]
   60288:	call   42d0 <free@plt>
   6028d:	mov    rdi,QWORD PTR [rip+0x82f34]        # e31c8 <seiRandomAccess+0x8>
   60294:	call   42d0 <free@plt>
   60299:	mov    QWORD PTR [rip+0x82f24],0x0        # e31c8 <seiRandomAccess+0x8>
   602a4:	add    rsp,0x8
   602a8:	ret    
   602a9:	nop    DWORD PTR [rax+0x0]
   602b0:	mov    QWORD PTR [rip+0x82f0d],0x0        # e31c8 <seiRandomAccess+0x8>
   602bb:	ret    
   602bc:	nop    DWORD PTR [rax+0x0]

00000000000602c0 <CloseSEIMessages>:
   602c0:	endbr64 
   602c4:	sub    rsp,0x8
   602c8:	xor    eax,eax
   602ca:	call   5f560 <CloseSubseqChar>
   602cf:	xor    eax,eax
   602d1:	call   5e610 <CloseSparePicture>
   602d6:	xor    eax,eax
   602d8:	call   5f650 <CloseSceneInformation>
   602dd:	xor    eax,eax
   602df:	call   5f9e0 <ClosePanScanRectInfo>
   602e4:	xor    eax,eax
   602e6:	call   5fc40 <CloseUser_data_unregistered>
   602eb:	xor    eax,eax
   602ed:	call   5ff40 <CloseUser_data_registered_itu_t_t35>
   602f2:	xor    eax,eax
   602f4:	call   60270 <CloseRandomAccess>
   602f9:	mov    rdi,QWORD PTR [rip+0x82f10]        # e3210 <sei_message+0x10>
   60300:	test   rdi,rdi
   60303:	je     6030a <CloseSEIMessages+0x4a>
   60305:	call   42d0 <free@plt>
   6030a:	mov    rdi,QWORD PTR [rip+0x82f17]        # e3228 <sei_message+0x28>
   60311:	mov    QWORD PTR [rip+0x82ef4],0x0        # e3210 <sei_message+0x10>
   6031c:	test   rdi,rdi
   6031f:	je     60326 <CloseSEIMessages+0x66>
   60321:	call   42d0 <free@plt>
   60326:	mov    QWORD PTR [rip+0x82ef7],0x0        # e3228 <sei_message+0x28>
   60331:	add    rsp,0x8
   60335:	ret    
   60336:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000060340 <init_ref_pic_list_reordering>:
   60340:	endbr64 
   60344:	mov    rax,QWORD PTR [rip+0x28265]        # 885b0 <img>
   6034b:	mov    rax,QWORD PTR [rax+0x3750]
   60352:	mov    DWORD PTR [rax+0x38],0x0
   60359:	mov    DWORD PTR [rax+0x58],0x0
   60360:	ret    
   60361:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   6036c:	nop    DWORD PTR [rax+0x0]

0000000000060370 <start_slice>:
   60370:	endbr64 
   60374:	push   r15
   60376:	push   r14
   60378:	push   r13
   6037a:	push   r12
   6037c:	push   rbp
   6037d:	push   rbx
   6037e:	sub    rsp,0x18
   60382:	mov    rax,QWORD PTR [rip+0x28227]        # 885b0 <img>
   60389:	mov    rdx,QWORD PTR [rip+0x28228]        # 885b8 <input>
   60390:	cmp    DWORD PTR [rdx+0x93c],0x1
   60397:	mov    rdx,QWORD PTR [rax+0x3748]
   6039e:	sbb    r14d,r14d
   603a1:	mov    edi,DWORD PTR [rax+0x11870]
   603a7:	mov    r15,QWORD PTR [rax+0x3750]
   603ae:	mov    edx,DWORD PTR [rdx+0x4]
   603b1:	and    r14d,0xfffffffe
   603b5:	add    r14d,0x3
   603b9:	test   edx,edx
   603bb:	mov    edx,0x1
   603c0:	cmovne r14d,edx
   603c4:	xor    ebp,ebp
   603c6:	xor    ebx,ebx
   603c8:	xor    r12d,r12d
   603cb:	call   5e2b0 <RTPUpdateTimestamp>
   603d0:	mov    rax,QWORD PTR [r15+0x18]
   603d4:	mov    r13,QWORD PTR [rax+rbp*1]
   603d8:	mov    DWORD PTR [r13+0x28],0x0
   603e0:	test   ebx,ebx
   603e2:	je     604a0 <start_slice+0x130>
   603e8:	mov    edi,ebx
   603ea:	xor    eax,eax
   603ec:	call   1ae10 <Partition_BC_Header>
   603f1:	add    r12d,eax
   603f4:	mov    rax,QWORD PTR [rip+0x281bd]        # 885b8 <input>
   603fb:	cmp    DWORD PTR [rax+0x934],0x1
   60402:	jne    60490 <start_slice+0x120>
   60408:	mov    r8,QWORD PTR [r15+0x18]
   6040c:	mov    eax,DWORD PTR [r13+0x4]
   60410:	mov    rdi,r13
   60413:	add    r8,rbp
   60416:	lea    edx,[r12+rax*1]
   6041a:	add    r8,0x8
   6041e:	cmp    eax,0x8
   60421:	cmovne r12d,edx
   60425:	mov    QWORD PTR [rsp+0x8],r8
   6042a:	call   671e0 <writeVlcByteAlign>
   6042f:	mov    rax,QWORD PTR [rip+0x2817a]        # 885b0 <img>
   60436:	mov    r8,QWORD PTR [rsp+0x8]
   6043b:	mov    rdx,r13
   6043e:	mov    rsi,QWORD PTR [r13+0x20]
   60442:	mov    ecx,DWORD PTR [rax+0x18]
   60445:	mov    rdi,r8
   60448:	call   4e90 <arienco_start_encoding>
   6044d:	xor    eax,eax
   6044f:	call   c9d0 <cabac_new_slice>
   60454:	add    ebx,0x1
   60457:	add    rbp,0x78
   6045b:	cmp    r14d,ebx
   6045e:	jne    603d0 <start_slice+0x60>
   60464:	mov    rax,QWORD PTR [rip+0x2814d]        # 885b8 <input>
   6046b:	cmp    DWORD PTR [rax+0x934],0x1
   60472:	je     604b8 <start_slice+0x148>
   60474:	add    rsp,0x18
   60478:	mov    eax,r12d
   6047b:	pop    rbx
   6047c:	pop    rbp
   6047d:	pop    r12
   6047f:	pop    r13
   60481:	pop    r14
   60483:	pop    r15
   60485:	ret    
   60486:	nop    WORD PTR cs:[rax+rax*1+0x0]
   60490:	xor    eax,eax
   60492:	call   210b0 <CAVLC_init>
   60497:	jmp    60454 <start_slice+0xe4>
   60499:	nop    DWORD PTR [rax+0x0]
   604a0:	xor    edi,edi
   604a2:	xor    eax,eax
   604a4:	call   19d80 <SliceHeader>
   604a9:	add    r12d,eax
   604ac:	jmp    603f4 <start_slice+0x84>
   604b1:	nop    DWORD PTR [rax+0x0]
   604b8:	xor    eax,eax
   604ba:	call   11cc0 <init_contexts>
   604bf:	jmp    60474 <start_slice+0x104>
   604c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   604cc:	nop    DWORD PTR [rax+0x0]

00000000000604d0 <terminate_slice>:
   604d0:	endbr64 
   604d4:	push   r15
   604d6:	push   r14
   604d8:	push   r13
   604da:	push   r12
   604dc:	push   rbp
   604dd:	push   rbx
   604de:	sub    rsp,0x8
   604e2:	mov    rax,QWORD PTR [rip+0x280c7]        # 885b0 <img>
   604e9:	mov    r13,QWORD PTR [rax+0x3750]
   604f0:	mov    rax,QWORD PTR [rip+0x280c1]        # 885b8 <input>
   604f7:	mov    eax,DWORD PTR [rax+0x934]
   604fd:	cmp    eax,0x1
   60500:	je     605c0 <terminate_slice+0xf0>
   60506:	mov    edx,DWORD PTR [r13+0x10]
   6050a:	test   edx,edx
   6050c:	jle    605f4 <terminate_slice+0x124>
   60512:	xor    r12d,r12d
   60515:	xor    ebp,ebp
   60517:	jmp    6056d <terminate_slice+0x9d>
   60519:	nop    DWORD PTR [rax+0x0]
   60520:	mov    rdi,rbx
   60523:	call   465c0 <SODBtoRBSP>
   60528:	mov    r14d,DWORD PTR [rbx]
   6052b:	mov    rdi,QWORD PTR [rbx+0x20]
   6052f:	xor    ecx,ecx
   60531:	xor    esi,esi
   60533:	mov    edx,r14d
   60536:	call   46600 <RBSPtoEBSP>
   6053b:	mov    rdx,QWORD PTR [rip+0x28066]        # 885a8 <stats>
   60542:	mov    DWORD PTR [rbx],eax
   60544:	sub    eax,r14d
   60547:	mov    rdx,QWORD PTR [rdx+0x5c8]
   6054e:	shl    eax,0x3
   60551:	add    DWORD PTR [rdx],eax
   60553:	mov    rax,QWORD PTR [rip+0x2805e]        # 885b8 <input>
   6055a:	add    ebp,0x1
   6055d:	add    r12,0x78
   60561:	mov    eax,DWORD PTR [rax+0x934]
   60567:	cmp    DWORD PTR [r13+0x10],ebp
   6056b:	jle    605e8 <terminate_slice+0x118>
   6056d:	mov    r14,QWORD PTR [r13+0x18]
   60571:	add    r14,r12
   60574:	mov    rbx,QWORD PTR [r14]
   60577:	test   eax,eax
   60579:	je     60520 <terminate_slice+0x50>
   6057b:	lea    rdi,[r14+0x8]
   6057f:	call   4f00 <arienco_done_encoding>
   60584:	mov    eax,DWORD PTR [r14+0x14]
   60588:	mov    r15d,DWORD PTR [rbx]
   6058b:	mov    BYTE PTR [rbx+0x8],0x0
   6058f:	mov    rdi,QWORD PTR [rbx+0x20]
   60593:	mov    ecx,DWORD PTR [r14+0x60]
   60597:	xor    esi,esi
   60599:	mov    DWORD PTR [rbx+0x4],eax
   6059c:	mov    edx,r15d
   6059f:	call   46600 <RBSPtoEBSP>
   605a4:	mov    rdx,QWORD PTR [rip+0x27ffd]        # 885a8 <stats>
   605ab:	mov    DWORD PTR [rbx],eax
   605ad:	sub    eax,r15d
   605b0:	mov    rdx,QWORD PTR [rdx+0x5c8]
   605b7:	shl    eax,0x3
   605ba:	add    DWORD PTR [rdx],eax
   605bc:	jmp    60553 <terminate_slice+0x83>
   605be:	xchg   ax,ax
   605c0:	mov    edi,0x1
   605c5:	call   2c0f0 <write_terminating_bit>
   605ca:	mov    ecx,DWORD PTR [r13+0x10]
   605ce:	mov    rax,QWORD PTR [rip+0x27fe3]        # 885b8 <input>
   605d5:	test   ecx,ecx
   605d7:	mov    eax,DWORD PTR [rax+0x934]
   605dd:	jg     60512 <terminate_slice+0x42>
   605e3:	nop    DWORD PTR [rax+rax*1+0x0]
   605e8:	cmp    eax,0x1
   605eb:	jne    605f4 <terminate_slice+0x124>
   605ed:	xor    eax,eax
   605ef:	call   130b0 <store_contexts>
   605f4:	add    rsp,0x8
   605f8:	xor    eax,eax
   605fa:	pop    rbx
   605fb:	pop    rbp
   605fc:	pop    r12
   605fe:	pop    r13
   60600:	pop    r14
   60602:	pop    r15
   60604:	ret    
   60605:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000060610 <free_slice_list>:
   60610:	endbr64 
   60614:	mov    edx,DWORD PTR [rdi]
   60616:	test   edx,edx
   60618:	jle    606f8 <free_slice_list+0xe8>
   6061e:	push   r15
   60620:	push   r14
   60622:	mov    r14,rdi
   60625:	push   r13
   60627:	push   r12
   60629:	push   rbp
   6062a:	push   rbx
   6062b:	xor    ebx,ebx
   6062d:	sub    rsp,0x8
   60631:	nop    DWORD PTR [rax+0x0]
   60638:	mov    rbp,QWORD PTR [r14+rbx*8+0x8]
   6063d:	test   rbp,rbp
   60640:	je     606ba <free_slice_list+0xaa>
   60642:	mov    eax,DWORD PTR [rbp+0x10]
   60645:	mov    rdi,QWORD PTR [rbp+0x18]
   60649:	test   eax,eax
   6064b:	jle    60698 <free_slice_list+0x88>
   6064d:	xor    r12d,r12d
   60650:	xor    r13d,r13d
   60653:	jmp    6067a <free_slice_list+0x6a>
   60655:	nop    DWORD PTR [rax]
   60658:	mov    rdi,r8
   6065b:	call   42d0 <free@plt>
   60660:	mov    rdi,QWORD PTR [r15]
   60663:	test   rdi,rdi
   60666:	jne    6068e <free_slice_list+0x7e>
   60668:	mov    rdi,QWORD PTR [rbp+0x18]
   6066c:	add    r13d,0x1
   60670:	add    r12,0x78
   60674:	cmp    r13d,DWORD PTR [rbp+0x10]
   60678:	jge    60698 <free_slice_list+0x88>
   6067a:	mov    r15,rdi
   6067d:	add    r15,r12
   60680:	je     6066c <free_slice_list+0x5c>
   60682:	mov    rdi,QWORD PTR [r15]
   60685:	mov    r8,QWORD PTR [rdi+0x20]
   60689:	test   r8,r8
   6068c:	jne    60658 <free_slice_list+0x48>
   6068e:	call   42d0 <free@plt>
   60693:	jmp    60668 <free_slice_list+0x58>
   60695:	nop    DWORD PTR [rax]
   60698:	test   rdi,rdi
   6069b:	je     606a2 <free_slice_list+0x92>
   6069d:	call   42d0 <free@plt>
   606a2:	mov    rax,QWORD PTR [rip+0x27f0f]        # 885b8 <input>
   606a9:	cmp    DWORD PTR [rax+0x934],0x1
   606b0:	je     606e0 <free_slice_list+0xd0>
   606b2:	mov    rdi,rbp
   606b5:	call   42d0 <free@plt>
   606ba:	mov    QWORD PTR [r14+rbx*8+0x8],0x0
   606c3:	add    rbx,0x1
   606c7:	cmp    DWORD PTR [r14],ebx
   606ca:	jg     60638 <free_slice_list+0x28>
   606d0:	add    rsp,0x8
   606d4:	pop    rbx
   606d5:	pop    rbp
   606d6:	pop    r12
   606d8:	pop    r13
   606da:	pop    r14
   606dc:	pop    r15
   606de:	ret    
   606df:	nop
   606e0:	mov    rdi,QWORD PTR [rbp+0x20]
   606e4:	call   cb40 <delete_contexts_MotionInfo>
   606e9:	mov    rdi,QWORD PTR [rbp+0x28]
   606ed:	call   cb60 <delete_contexts_TextureInfo>
   606f2:	jmp    606b2 <free_slice_list+0xa2>
   606f4:	nop    DWORD PTR [rax+0x0]
   606f8:	ret    
   606f9:	nop    DWORD PTR [rax+0x0]

0000000000060700 <modify_redundant_pic_cnt>:
   60700:	endbr64 
   60704:	mov    eax,DWORD PTR [rip+0x560aa]        # b67b4 <rpc_bits_to_go>
   6070a:	movsxd rdx,DWORD PTR [rip+0x56cbf]        # b73d0 <rpc_bytes_to_go>
   60711:	lea    ecx,[rax-0x1]
   60714:	mov    eax,0x1
   60719:	shl    eax,cl
   6071b:	or     BYTE PTR [rdi+rdx*1],al
   6071e:	ret    
   6071f:	nop

0000000000060720 <poc_ref_pic_reorder>:
   60720:	endbr64 
   60724:	push   r15
   60726:	push   r14
   60728:	push   r13
   6072a:	mov    r13d,esi
   6072d:	push   r12
   6072f:	push   rbp
   60730:	push   rbx
   60731:	sub    rsp,0x2c8
   60738:	mov    QWORD PTR [rsp+0x10],rcx
   6073d:	mov    QWORD PTR [rsp+0x8],rdx
   60742:	mov    rax,QWORD PTR fs:0x28
   6074b:	mov    QWORD PTR [rsp+0x2b8],rax
   60753:	xor    eax,eax
   60755:	mov    eax,DWORD PTR [rip+0x5570d]        # b5e68 <log2_max_frame_num_minus4>
   6075b:	lea    ecx,[rax+0x4]
   6075e:	mov    rax,QWORD PTR [rip+0x27e4b]        # 885b0 <img>
   60765:	mov    ebx,DWORD PTR [rax+0x1c]
   60768:	mov    r15d,DWORD PTR [rax+0x11b10]
   6076f:	mov    QWORD PTR [rsp+0x20],rax
   60774:	test   ebx,ebx
   60776:	jne    60b19 <poc_ref_pic_reorder+0x3f9>
   6077c:	mov    eax,0x1
   60781:	shl    eax,cl
   60783:	mov    DWORD PTR [rsp+0x2c],eax
   60787:	test   r13d,r13d
   6078a:	je     607ba <poc_ref_pic_reorder+0x9a>
   6078c:	lea    ecx,[r13-0x1]
   60790:	xor    eax,eax
   60792:	lea    r8,[rsp+0x30]
   60797:	nop    WORD PTR [rax+rax*1+0x0]
   607a0:	mov    rdx,QWORD PTR [rdi+rax*8]
   607a4:	mov    edx,DWORD PTR [rdx+0x18dc]
   607aa:	mov    DWORD PTR [r8+rax*4],edx
   607ae:	mov    rdx,rax
   607b1:	add    rax,0x1
   607b5:	cmp    rdx,rcx
   607b8:	jne    607a0 <poc_ref_pic_reorder+0x80>
   607ba:	mov    eax,DWORD PTR [rip+0x56c40]        # b7400 <dpb+0x20>
   607c0:	mov    ebp,0xffffffff
   607c5:	lea    rdi,[rsp+0xb0]
   607cd:	mov    DWORD PTR [rsp+0x18],eax
   607d1:	test   eax,eax
   607d3:	je     60898 <poc_ref_pic_reorder+0x178>
   607d9:	mov    eax,DWORD PTR [rsp+0x18]
   607dd:	mov    rcx,QWORD PTR [rip+0x56c04]        # b73e8 <dpb+0x8>
   607e4:	lea    rdi,[rsp+0xb0]
   607ec:	lea    r8,[rsp+0x230]
   607f4:	mov    rbx,QWORD PTR [rip+0x2a1ad]        # 8a9a8 <enc_picture>
   607fb:	lea    edx,[rax-0x1]
   607fe:	xor    eax,eax
   60800:	mov    ebp,edx
   60802:	jmp    60814 <poc_ref_pic_reorder+0xf4>
   60804:	nop    DWORD PTR [rax+0x0]
   60808:	lea    rsi,[rax+0x1]
   6080c:	cmp    rax,rdx
   6080f:	je     60890 <poc_ref_pic_reorder+0x170>
   60811:	mov    rax,rsi
   60814:	mov    rsi,QWORD PTR [rcx+rax*8]
   60818:	mov    r9,QWORD PTR [rsi+0x28]
   6081c:	cmp    DWORD PTR [rsi],0x3
   6081f:	mov    r10d,DWORD PTR [r9+0x18dc]
   60826:	mov    DWORD PTR [rdi+rax*4],r10d
   6082a:	jne    60808 <poc_ref_pic_reorder+0xe8>
   6082c:	mov    r11d,DWORD PTR [r9+0x18ec]
   60833:	test   r11d,r11d
   60836:	je     60808 <poc_ref_pic_reorder+0xe8>
   60838:	mov    r10d,DWORD PTR [r9+0x18e8]
   6083f:	test   r10d,r10d
   60842:	jne    60808 <poc_ref_pic_reorder+0xe8>
   60844:	mov    r10d,DWORD PTR [r9+0x4]
   60848:	mov    r9d,DWORD PTR [rbx+0x4]
   6084c:	mov    esi,r10d
   6084f:	sub    esi,r9d
   60852:	mov    r11d,esi
   60855:	sar    r11d,0x1f
   60859:	xor    esi,r11d
   6085c:	mov    DWORD PTR [r8+rax*4],esi
   60860:	mov    esi,DWORD PTR [rsp+0x300]
   60867:	sub    DWORD PTR [r8+rax*4],r11d
   6086b:	test   esi,esi
   6086d:	jne    60b2e <poc_ref_pic_reorder+0x40e>
   60873:	xor    esi,esi
   60875:	cmp    r10d,r9d
   60878:	setg   sil
   6087c:	lea    esi,[rsi+rsi*1-0x1]
   60880:	mov    DWORD PTR [rsp+rax*4+0x1b0],esi
   60887:	lea    rsi,[rax+0x1]
   6088b:	cmp    rax,rdx
   6088e:	jne    60811 <poc_ref_pic_reorder+0xf1>
   60890:	test   ebp,ebp
   60892:	je     60973 <poc_ref_pic_reorder+0x253>
   60898:	mov    eax,DWORD PTR [rsp+0x18]
   6089c:	lea    r9,[rsp+0x230]
   608a4:	mov    DWORD PTR [rsp+0x1c],r15d
   608a9:	lea    r12,[rsp+0x1b0]
   608b1:	mov    DWORD PTR [rsp+0x28],r13d
   608b6:	mov    r8,r9
   608b9:	mov    rsi,rdi
   608bc:	mov    r11,r12
   608bf:	sub    eax,0x1
   608c2:	mov    r14d,0x1
   608c8:	mov    r13d,ebp
   608cb:	mov    r15d,eax
   608ce:	xchg   ax,ax
   608d0:	cmp    DWORD PTR [rsp+0x18],r14d
   608d5:	jbe    60b10 <poc_ref_pic_reorder+0x3f0>
   608db:	mov    r10d,r15d
   608de:	lea    rax,[r14*4+0x0]
   608e6:	sub    r10d,r14d
   608e9:	add    r14,0x1
   608ed:	add    r10,r14
   608f0:	shl    r10,0x2
   608f4:	jmp    60928 <poc_ref_pic_reorder+0x208>
   608f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   60900:	mov    ebp,DWORD PTR [r12+rax*1]
   60904:	mov    ebx,DWORD PTR [r11]
   60907:	mov    DWORD PTR [r8],ecx
   6090a:	mov    ecx,DWORD PTR [rdi+rax*1]
   6090d:	mov    DWORD PTR [r9+rax*1],edx
   60911:	mov    edx,DWORD PTR [rsi]
   60913:	mov    DWORD PTR [r11],ebp
   60916:	mov    DWORD PTR [rsi],ecx
   60918:	mov    DWORD PTR [r12+rax*1],ebx
   6091c:	mov    DWORD PTR [rdi+rax*1],edx
   6091f:	add    rax,0x4
   60923:	cmp    rax,r10
   60926:	je     60950 <poc_ref_pic_reorder+0x230>
   60928:	mov    edx,DWORD PTR [r8]
   6092b:	mov    ecx,DWORD PTR [r9+rax*1]
   6092f:	cmp    edx,ecx
   60931:	jg     60900 <poc_ref_pic_reorder+0x1e0>
   60933:	jne    6091f <poc_ref_pic_reorder+0x1ff>
   60935:	mov    ebp,DWORD PTR [r12+rax*1]
   60939:	mov    ebx,DWORD PTR [r11]
   6093c:	cmp    ebp,ebx
   6093e:	jg     60907 <poc_ref_pic_reorder+0x1e7>
   60940:	add    rax,0x4
   60944:	cmp    rax,r10
   60947:	jne    60928 <poc_ref_pic_reorder+0x208>
   60949:	nop    DWORD PTR [rax+0x0]
   60950:	lea    eax,[r14-0x1]
   60954:	add    r8,0x4
   60958:	add    rsi,0x4
   6095c:	add    r11,0x4
   60960:	cmp    r13d,eax
   60963:	ja     608d0 <poc_ref_pic_reorder+0x1b0>
   60969:	mov    r15d,DWORD PTR [rsp+0x1c]
   6096e:	mov    r13d,DWORD PTR [rsp+0x28]
   60973:	test   r13d,r13d
   60976:	je     60aea <poc_ref_pic_reorder+0x3ca>
   6097c:	lea    r9d,[r13-0x1]
   60980:	xor    eax,eax
   60982:	mov    edx,0x1
   60987:	xor    esi,esi
   60989:	mov    r12,r9
   6098c:	lea    r8,[rsp+0x30]
   60991:	jmp    6099b <poc_ref_pic_reorder+0x27b>
   60993:	nop    DWORD PTR [rax+rax*1+0x0]
   60998:	mov    rax,rcx
   6099b:	mov    ebx,DWORD PTR [rdi+rax*4]
   6099e:	cmp    DWORD PTR [r8+rax*4],ebx
   609a2:	lea    rcx,[rax+0x1]
   609a6:	cmovne edx,esi
   609a9:	cmp    rax,r9
   609ac:	jne    60998 <poc_ref_pic_reorder+0x278>
   609ae:	test   edx,edx
   609b0:	jne    60aea <poc_ref_pic_reorder+0x3ca>
   609b6:	mov    eax,DWORD PTR [rsp+0x2c]
   609ba:	xor    r11d,r11d
   609bd:	lea    r14,[rsp+0x34]
   609c2:	lea    rcx,[rsp+0x130]
   609ca:	sub    eax,0x1
   609cd:	mov    DWORD PTR [rsp+0x18],eax
   609d1:	nop    DWORD PTR [rax+0x0]
   609d8:	mov    eax,r15d
   609db:	mov    r15d,DWORD PTR [rdi+r11*4]
   609df:	mov    ebp,r11d
   609e2:	mov    esi,r15d
   609e5:	sub    esi,eax
   609e7:	mov    eax,esi
   609e9:	test   esi,esi
   609eb:	jle    60a90 <poc_ref_pic_reorder+0x370>
   609f1:	mov    rbx,QWORD PTR [rsp+0x8]
   609f6:	sub    eax,0x1
   609f9:	mov    DWORD PTR [rbx+r11*4],0x1
   60a01:	mov    rbx,QWORD PTR [rsp+0x10]
   60a06:	mov    DWORD PTR [rbx+r11*4],eax
   60a0a:	mov    DWORD PTR [rcx+r11*4],r15d
   60a0e:	cmp    ebp,r13d
   60a11:	jae    60a47 <poc_ref_pic_reorder+0x327>
   60a13:	mov    edx,r12d
   60a16:	lea    rax,[r8+r11*4]
   60a1a:	mov    esi,ebp
   60a1c:	sub    edx,ebp
   60a1e:	add    rdx,r11
   60a21:	lea    rbx,[r14+rdx*4]
   60a25:	nop    DWORD PTR [rax]
   60a28:	mov    edx,DWORD PTR [rax]
   60a2a:	cmp    r15d,edx
   60a2d:	je     60a3e <poc_ref_pic_reorder+0x31e>
   60a2f:	lea    r10d,[rsi+0x1]
   60a33:	mov    DWORD PTR [rsp+r10*4+0x130],edx
   60a3b:	mov    rsi,r10
   60a3e:	add    rax,0x4
   60a42:	cmp    rax,rbx
   60a45:	jne    60a28 <poc_ref_pic_reorder+0x308>
   60a47:	add    ebp,0x1
   60a4a:	cmp    r9,r11
   60a4d:	je     60ac0 <poc_ref_pic_reorder+0x3a0>
   60a4f:	add    r11,0x1
   60a53:	mov    rax,r11
   60a56:	jmp    60a69 <poc_ref_pic_reorder+0x349>
   60a58:	nop    DWORD PTR [rax+rax*1+0x0]
   60a60:	add    rax,0x1
   60a64:	cmp    r13d,eax
   60a67:	jbe    60ac0 <poc_ref_pic_reorder+0x3a0>
   60a69:	mov    ebx,DWORD PTR [rdi+rax*4]
   60a6c:	cmp    DWORD PTR [rcx+rax*4],ebx
   60a6f:	je     60a60 <poc_ref_pic_reorder+0x340>
   60a71:	xor    eax,eax
   60a73:	nop    DWORD PTR [rax+rax*1+0x0]
   60a78:	mov    edx,DWORD PTR [rcx+rax*4]
   60a7b:	mov    DWORD PTR [r8+rax*4],edx
   60a7f:	mov    rdx,rax
   60a82:	add    rax,0x1
   60a86:	cmp    r9,rdx
   60a89:	jne    60a78 <poc_ref_pic_reorder+0x358>
   60a8b:	jmp    609d8 <poc_ref_pic_reorder+0x2b8>
   60a90:	mov    rsi,QWORD PTR [rsp+0x8]
   60a95:	mov    edx,eax
   60a97:	not    edx
   60a99:	mov    DWORD PTR [rsi+r11*4],0x0
   60aa1:	mov    eax,edx
   60aa3:	mov    rsi,QWORD PTR [rsp+0x10]
   60aa8:	cmove  eax,DWORD PTR [rsp+0x18]
   60aad:	mov    DWORD PTR [rsi+r11*4],eax
   60ab1:	jmp    60a0a <poc_ref_pic_reorder+0x2ea>
   60ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   60ac0:	mov    rax,QWORD PTR [rsp+0x8]
   60ac5:	mov    edx,DWORD PTR [rsp+0x300]
   60acc:	mov    DWORD PTR [rax+rbp*4],0x3
   60ad3:	mov    rax,QWORD PTR [rsp+0x20]
   60ad8:	mov    rax,QWORD PTR [rax+0x3750]
   60adf:	test   edx,edx
   60ae1:	je     60b47 <poc_ref_pic_reorder+0x427>
   60ae3:	mov    DWORD PTR [rax+0x58],0x1
   60aea:	mov    rax,QWORD PTR [rsp+0x2b8]
   60af2:	xor    rax,QWORD PTR fs:0x28
   60afb:	jne    60b50 <poc_ref_pic_reorder+0x430>
   60afd:	add    rsp,0x2c8
   60b04:	pop    rbx
   60b05:	pop    rbp
   60b06:	pop    r12
   60b08:	pop    r13
   60b0a:	pop    r14
   60b0c:	pop    r15
   60b0e:	ret    
   60b0f:	nop
   60b10:	add    r14,0x1
   60b14:	jmp    60950 <poc_ref_pic_reorder+0x230>
   60b19:	mov    eax,0x2
   60b1e:	lea    r15d,[r15+r15*1+0x1]
   60b23:	shl    eax,cl
   60b25:	mov    DWORD PTR [rsp+0x2c],eax
   60b29:	jmp    60787 <poc_ref_pic_reorder+0x67>
   60b2e:	xor    esi,esi
   60b30:	cmp    r10d,r9d
   60b33:	setl   sil
   60b37:	lea    esi,[rsi+rsi*1-0x1]
   60b3b:	mov    DWORD PTR [rsp+rax*4+0x1b0],esi
   60b42:	jmp    60808 <poc_ref_pic_reorder+0xe8>
   60b47:	mov    DWORD PTR [rax+0x38],0x1
   60b4e:	jmp    60aea <poc_ref_pic_reorder+0x3ca>
   60b50:	call   4390 <__stack_chk_fail@plt>
   60b55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000060b60 <encode_one_slice>:
   60b60:	endbr64 
   60b64:	push   r15
   60b66:	push   r14
   60b68:	push   r13
   60b6a:	push   r12
   60b6c:	push   rbp
   60b6d:	push   rbx
   60b6e:	sub    rsp,0x38
   60b72:	mov    rax,QWORD PTR fs:0x28
   60b7b:	mov    QWORD PTR [rsp+0x28],rax
   60b80:	xor    eax,eax
   60b82:	mov    rax,QWORD PTR [rip+0x27a27]        # 885b0 <img>
   60b89:	mov    DWORD PTR [rsp+0x20],0x0
   60b91:	mov    DWORD PTR [rax+0x78],0x0
   60b98:	call   19d40 <FmoGetFirstMacroblockInSlice>
   60b9d:	mov    r15d,eax
   60ba0:	mov    rax,QWORD PTR [rip+0x27a09]        # 885b0 <img>
   60ba7:	mov    rsi,QWORD PTR [rax+0x3748]
   60bae:	mov    DWORD PTR [rax+0xc],r15d
   60bb2:	mov    ebx,DWORD PTR [rsi]
   60bb4:	mov    QWORD PTR [rsp+0x8],rsi
   60bb9:	lea    edx,[rbx+0x1]
   60bbc:	mov    DWORD PTR [rsp+0x18],ebx
   60bc0:	mov    DWORD PTR [rsi],edx
   60bc2:	cmp    edx,0x63
   60bc5:	jg     61978 <encode_one_slice+0xe18>
   60bcb:	mov    r14d,DWORD PTR [rax+0x34]
   60bcf:	imul   r14d,DWORD PTR [rax+0x3c]
   60bd4:	mov    esi,0x98
   60bd9:	mov    edi,0x1
   60bde:	call   4400 <calloc@plt>
   60be3:	mov    rbx,rax
   60be6:	shl    r14d,0x2
   60bea:	test   rax,rax
   60bed:	je     61ae5 <encode_one_slice+0xf85>
   60bf3:	mov    rax,QWORD PTR [rip+0x279be]        # 885b8 <input>
   60bfa:	cmp    DWORD PTR [rax+0x934],0x1
   60c01:	je     619a8 <encode_one_slice+0xe48>
   60c07:	mov    edx,DWORD PTR [rax+0x93c]
   60c0d:	mov    rax,QWORD PTR [rip+0x2799c]        # 885b0 <img>
   60c14:	mov    rax,QWORD PTR [rax+0x3748]
   60c1b:	mov    eax,DWORD PTR [rax+0x4]
   60c1e:	test   edx,edx
   60c20:	je     61828 <encode_one_slice+0xcc8>
   60c26:	mov    DWORD PTR [rbx+0x10],0x3
   60c2d:	test   eax,eax
   60c2f:	je     61920 <encode_one_slice+0xdc0>
   60c35:	mov    DWORD PTR [rbx+0x10],0x1
   60c3c:	lea    rax,[rip+0x27dfd]        # 88a40 <assignSE2partition_NoDP>
   60c43:	mov    edi,0x1
   60c48:	mov    QWORD PTR [rip+0x29d21],rax        # 8a970 <assignSE2partition>
   60c4f:	mov    DWORD PTR [rbx+0x14],0x0
   60c56:	mov    esi,0x78
   60c5b:	mov    QWORD PTR [rip+0x29d16],rax        # 8a978 <assignSE2partition+0x8>
   60c62:	call   4400 <calloc@plt>
   60c67:	mov    QWORD PTR [rbx+0x18],rax
   60c6b:	test   rax,rax
   60c6e:	je     61a46 <encode_one_slice+0xee6>
   60c74:	mov    DWORD PTR [rsp+0x1c],r15d
   60c79:	movsxd r14,r14d
   60c7c:	xor    r12d,r12d
   60c7f:	xor    ebp,ebp
   60c81:	nop    DWORD PTR [rax+0x0]
   60c88:	mov    r13,QWORD PTR [rbx+0x18]
   60c8c:	mov    esi,0x30
   60c91:	mov    edi,0x1
   60c96:	call   4400 <calloc@plt>
   60c9b:	add    r13,r12
   60c9e:	mov    r15,rax
   60ca1:	mov    QWORD PTR [r13+0x0],rax
   60ca5:	test   rax,rax
   60ca8:	je     61aba <encode_one_slice+0xf5a>
   60cae:	mov    esi,0x1
   60cb3:	mov    rdi,r14
   60cb6:	call   4400 <calloc@plt>
   60cbb:	mov    QWORD PTR [r15+0x20],rax
   60cbf:	test   rax,rax
   60cc2:	je     61acf <encode_one_slice+0xf6f>
   60cc8:	add    ebp,0x1
   60ccb:	add    r12,0x78
   60ccf:	cmp    ebp,DWORD PTR [rbx+0x10]
   60cd2:	jl     60c88 <encode_one_slice+0x128>
   60cd4:	mov    r15d,DWORD PTR [rsp+0x1c]
   60cd9:	mov    rsi,QWORD PTR [rsp+0x8]
   60cde:	movsxd rax,DWORD PTR [rsp+0x18]
   60ce3:	mov    r8,QWORD PTR [rip+0x278c6]        # 885b0 <img>
   60cea:	mov    QWORD PTR [rsi+rax*8+0x8],rbx
   60cef:	mov    eax,DWORD PTR [rsi]
   60cf1:	mov    DWORD PTR [rsp+0x8],eax
   60cf5:	sub    eax,0x1
   60cf8:	cdqe   
   60cfa:	mov    rbx,QWORD PTR [rsi+rax*8+0x8]
   60cff:	mov    eax,DWORD PTR [r8+0x11870]
   60d06:	cdq    
   60d07:	mov    QWORD PTR [r8+0x3750],rbx
   60d0e:	shr    edx,0x18
   60d11:	add    eax,edx
   60d13:	movzx  eax,al
   60d16:	sub    eax,edx
   60d18:	mov    DWORD PTR [rbx],eax
   60d1a:	mov    eax,DWORD PTR [r8+0x28]
   60d1e:	mov    DWORD PTR [rbx+0xc],r15d
   60d22:	mov    DWORD PTR [rbx+0x4],eax
   60d25:	lea    rax,[rip+0xfffffffffffbc774]        # 1d4a0 <dummy_slice_too_big>
   60d2c:	mov    QWORD PTR [rbx+0x78],rax
   60d30:	mov    eax,DWORD PTR [rbx+0x10]
   60d33:	test   eax,eax
   60d35:	jle    60d9a <encode_one_slice+0x23a>
   60d37:	mov    rdx,QWORD PTR [rip+0x2787a]        # 885b8 <input>
   60d3e:	lea    rcx,[rip+0xfffffffffffabe3b]        # cb80 <writeSyntaxElement_CABAC>
   60d45:	mov    r9d,DWORD PTR [rdx+0x934]
   60d4c:	mov    rdx,QWORD PTR [rbx+0x18]
   60d50:	test   r9d,r9d
   60d53:	cmove  rcx,QWORD PTR [rip+0x25285]        # 85fe0 <_GLOBAL_OFFSET_TABLE_+0x170>
   60d5b:	sub    eax,0x1
   60d5e:	mov    rsi,rax
   60d61:	shl    rsi,0x4
   60d65:	sub    rsi,rax
   60d68:	lea    rax,[rdx+0x78]
   60d6c:	lea    rdi,[rax+rsi*8]
   60d70:	movabs rsi,0x800000000
   60d7a:	jmp    60d84 <encode_one_slice+0x224>
   60d7c:	nop    DWORD PTR [rax+0x0]
   60d80:	add    rax,0x78
   60d84:	mov    QWORD PTR [rdx+0x70],rcx
   60d88:	mov    rdx,QWORD PTR [rdx]
   60d8b:	mov    QWORD PTR [rdx],rsi
   60d8e:	mov    BYTE PTR [rdx+0x8],0x0
   60d92:	mov    rdx,rax
   60d95:	cmp    rdi,rax
   60d98:	jne    60d80 <encode_one_slice+0x220>
   60d9a:	mov    rdx,QWORD PTR [rip+0x4005f]        # a0e00 <active_pps>
   60da1:	mov    esi,DWORD PTR [r8+0x1c]
   60da5:	mov    edi,DWORD PTR [r8+0x18]
   60da9:	mov    eax,DWORD PTR [rdx+0xb8]
   60daf:	add    eax,0x1
   60db2:	mov    DWORD PTR [r8+0x11940],eax
   60db9:	mov    eax,DWORD PTR [rdx+0xbc]
   60dbf:	add    eax,0x1
   60dc2:	mov    DWORD PTR [r8+0x11944],eax
   60dc9:	call   32000 <init_lists>
   60dce:	mov    rax,QWORD PTR [rip+0x277db]        # 885b0 <img>
   60dd5:	mov    edi,DWORD PTR [rip+0x56675]        # b7450 <listXsize>
   60ddb:	mov    r8d,DWORD PTR [rip+0x56672]        # b7454 <listXsize+0x4>
   60de2:	mov    ecx,DWORD PTR [rax+0x18]
   60de5:	mov    DWORD PTR [rax+0x11940],edi
   60deb:	mov    rsi,rax
   60dee:	mov    DWORD PTR [rax+0x11944],r8d
   60df5:	test   ecx,ecx
   60df7:	je     61778 <encode_one_slice+0xc18>
   60dfd:	cmp    ecx,0x3
   60e00:	je     61778 <encode_one_slice+0xc18>
   60e06:	cmp    ecx,0x1
   60e09:	je     617a4 <encode_one_slice+0xc44>
   60e0f:	mov    r8d,DWORD PTR [rax+0x11b30]
   60e16:	mov    rdx,QWORD PTR [rip+0x2779b]        # 885b8 <input>
   60e1d:	test   r8d,r8d
   60e20:	jne    61260 <encode_one_slice+0x700>
   60e26:	mov    rdx,QWORD PTR [rax+0x3750]
   60e2d:	mov    DWORD PTR [rdx+0x38],0x0
   60e34:	mov    DWORD PTR [rdx+0x58],0x0
   60e3b:	test   ecx,ecx
   60e3d:	jne    61410 <encode_one_slice+0x8b0>
   60e43:	mov    rdx,QWORD PTR [rip+0x2776e]        # 885b8 <input>
   60e4a:	mov    r12d,DWORD PTR [rdx+0x528]
   60e51:	test   r12d,r12d
   60e54:	jne    612b0 <encode_one_slice+0x750>
   60e5a:	mov    ecx,DWORD PTR [rax+0x1c]
   60e5d:	test   ecx,ecx
   60e5f:	je     61950 <encode_one_slice+0xdf0>
   60e65:	mov    rcx,QWORD PTR [rip+0x3ff94]        # a0e00 <active_pps>
   60e6c:	cmp    DWORD PTR [rcx+0xc0],0x1
   60e73:	je     619f4 <encode_one_slice+0xe94>
   60e79:	mov    edi,DWORD PTR [rax+0x18]
   60e7c:	mov    rsi,rax
   60e7f:	mov    eax,DWORD PTR [rip+0x565cb]        # b7450 <listXsize>
   60e85:	test   eax,eax
   60e87:	jle    60efc <encode_one_slice+0x39c>
   60e89:	mov    r10,QWORD PTR [rip+0x56590]        # b7420 <listX>
   60e90:	mov    r8,QWORD PTR [rip+0x29b11]        # 8a9a8 <enc_picture>
   60e97:	lea    r9d,[rax-0x1]
   60e9b:	xor    eax,eax
   60e9d:	nop    DWORD PTR [rax]
   60ea0:	mov    rdx,QWORD PTR [r10+rax*8]
   60ea4:	xor    ecx,ecx
   60ea6:	mov    r11d,DWORD PTR [rdx+0x4]
   60eaa:	cmp    DWORD PTR [rdx],0x2
   60ead:	sete   cl
   60eb0:	mov    ebx,DWORD PTR [rdx+0x10]
   60eb3:	lea    ecx,[rcx+r11*2]
   60eb7:	movsxd rcx,ecx
   60eba:	mov    QWORD PTR [r8+rax*8+0x18],rcx
   60ebf:	lea    ecx,[rbx+rbx*1]
   60ec2:	mov    ebx,DWORD PTR [rdx+0x8]
   60ec5:	mov    edx,DWORD PTR [rdx+0xc]
   60ec8:	movsxd rcx,ecx
   60ecb:	mov    QWORD PTR [r8+rax*8+0x648],rcx
   60ed3:	lea    ecx,[rbx+rbx*1]
   60ed6:	lea    edx,[rdx+rdx*1+0x1]
   60eda:	movsxd rcx,ecx
   60edd:	movsxd rdx,edx
   60ee0:	mov    QWORD PTR [r8+rax*8+0xc78],rcx
   60ee8:	mov    QWORD PTR [r8+rax*8+0x12a8],rdx
   60ef0:	mov    rdx,rax
   60ef3:	add    rax,0x1
   60ef7:	cmp    r9,rdx
   60efa:	jne    60ea0 <encode_one_slice+0x340>
   60efc:	mov    eax,DWORD PTR [rip+0x56552]        # b7454 <listXsize+0x4>
   60f02:	test   eax,eax
   60f04:	jle    60f7f <encode_one_slice+0x41f>
   60f06:	mov    r10,QWORD PTR [rip+0x5651b]        # b7428 <listX+0x8>
   60f0d:	mov    r8,QWORD PTR [rip+0x29a94]        # 8a9a8 <enc_picture>
   60f14:	lea    r9d,[rax-0x1]
   60f18:	xor    eax,eax
   60f1a:	nop    WORD PTR [rax+rax*1+0x0]
   60f20:	mov    rdx,QWORD PTR [r10+rax*8]
   60f24:	xor    ecx,ecx
   60f26:	mov    r11d,DWORD PTR [rdx+0x4]
   60f2a:	cmp    DWORD PTR [rdx],0x2
   60f2d:	sete   cl
   60f30:	mov    ebx,DWORD PTR [rdx+0x10]
   60f33:	lea    ecx,[rcx+r11*2]
   60f37:	movsxd rcx,ecx
   60f3a:	mov    QWORD PTR [r8+rax*8+0x120],rcx
   60f42:	lea    ecx,[rbx+rbx*1]
   60f45:	mov    ebx,DWORD PTR [rdx+0x8]
   60f48:	mov    edx,DWORD PTR [rdx+0xc]
   60f4b:	movsxd rcx,ecx
   60f4e:	mov    QWORD PTR [r8+rax*8+0x750],rcx
   60f56:	lea    ecx,[rbx+rbx*1]
   60f59:	lea    edx,[rdx+rdx*1+0x1]
   60f5d:	movsxd rcx,ecx
   60f60:	movsxd rdx,edx
   60f63:	mov    QWORD PTR [r8+rax*8+0xd80],rcx
   60f6b:	mov    QWORD PTR [r8+rax*8+0x13b0],rdx
   60f73:	mov    rdx,rax
   60f76:	add    rax,0x1
   60f7a:	cmp    r9,rdx
   60f7d:	jne    60f20 <encode_one_slice+0x3c0>
   60f7f:	mov    rax,QWORD PTR [rip+0x54eea]        # b5e70 <active_sps>
   60f86:	mov    eax,DWORD PTR [rax+0x47c]
   60f8c:	test   eax,eax
   60f8e:	jne    60f9b <encode_one_slice+0x43b>
   60f90:	mov    eax,DWORD PTR [rsi+0x1c]
   60f93:	test   eax,eax
   60f95:	je     61840 <encode_one_slice+0xce0>
   60f9b:	cmp    edi,0x1
   60f9e:	je     618f7 <encode_one_slice+0xd97>
   60fa4:	mov    rax,QWORD PTR [rsi+0x3750]
   60fab:	mov    rax,QWORD PTR [rax+0x18]
   60faf:	mov    rax,QWORD PTR [rax]
   60fb2:	mov    eax,DWORD PTR [rax]
   60fb4:	mov    DWORD PTR [rip+0x5317e],eax        # b4138 <Bytes_After_Header>
   60fba:	mov    rax,QWORD PTR [rip+0x275f7]        # 885b8 <input>
   60fc1:	cmp    DWORD PTR [rax+0x934],0x1
   60fc8:	je     619d0 <encode_one_slice+0xe70>
   60fce:	xor    eax,eax
   60fd0:	call   60370 <start_slice>
   60fd5:	mov    rdx,QWORD PTR [rip+0x275d4]        # 885b0 <img>
   60fdc:	add    DWORD PTR [rdx+0x11b4c],eax
   60fe2:	mov    esi,DWORD PTR [rdx+0x11ba0]
   60fe8:	cmp    DWORD PTR [rdx+0x11bac],esi
   60fee:	jge    60ff6 <encode_one_slice+0x496>
   60ff0:	add    DWORD PTR [rdx+0x11b54],eax
   60ff6:	mov    rcx,QWORD PTR [rip+0x275ab]        # 885a8 <stats>
   60ffd:	movsxd rsi,DWORD PTR [rdx+0x18]
   61001:	xor    r12d,r12d
   61004:	mov    r14d,DWORD PTR [rsp+0x20]
   61009:	add    DWORD PTR [rcx+0x18],eax
   6100c:	add    DWORD PTR [rcx+rsi*4+0x558],eax
   61013:	test   r14d,r14d
   61016:	jne    615a0 <encode_one_slice+0xa40>
   6101c:	lea    rbp,[rsp+0x24]
   61021:	lea    rbx,[rsp+0x20]
   61026:	jmp    611d8 <encode_one_slice+0x678>
   6102b:	nop    DWORD PTR [rax+rax*1+0x0]
   61030:	mov    rcx,QWORD PTR [rip+0x27581]        # 885b8 <input>
   61037:	lea    r13d,[r15+0x1]
   6103b:	mov    eax,DWORD PTR [rcx+0xb44]
   61041:	cmp    eax,0x2
   61044:	je     616c0 <encode_one_slice+0xb60>
   6104a:	sub    eax,0x1
   6104d:	cmp    eax,0x1
   61050:	jbe    61470 <encode_one_slice+0x910>
   61056:	mov    DWORD PTR [rdx+0x11bb8],0x0
   61060:	mov    DWORD PTR [rdx+0x11948],0x1
   6106a:	mov    esi,0x1
   6106f:	mov    DWORD PTR [rip+0x3d287],0x1        # 9e300 <MBPairIsField>
   61079:	mov    DWORD PTR [rdx+0x1194c],esi
   6107f:	mov    edi,r15d
   61082:	mov    QWORD PTR [rdx+0x11bb0],0x1
   6108d:	call   26a10 <start_macroblock>
   61092:	mov    rax,QWORD PTR [rip+0x27517]        # 885b0 <img>
   61099:	lea    rdx,[rip+0x531c0]        # b4260 <rddata_top_frame_mb>
   610a0:	mov    edi,DWORD PTR [rax+0x11948]
   610a6:	lea    rax,[rip+0x3e773]        # 9f820 <rddata_top_field_mb>
   610ad:	test   edi,edi
   610af:	cmove  rax,rdx
   610b3:	xor    edi,edi
   610b5:	mov    QWORD PTR [rip+0x3fca4],rax        # a0d60 <rdopt>
   610bc:	call   1d4b0 <copy_rdopt_data>
   610c1:	mov    edi,0x1
   610c6:	call   2f7e0 <write_one_macroblock>
   610cb:	mov    rsi,rbp
   610ce:	mov    rdi,rbx
   610d1:	call   27470 <terminate_macroblock>
   610d6:	xor    eax,eax
   610d8:	mov    edi,r15d
   610db:	call   26810 <proceed2nextMacroblock>
   610e0:	mov    rax,QWORD PTR [rip+0x274c9]        # 885b0 <img>
   610e7:	mov    edi,r13d
   610ea:	mov    DWORD PTR [rax+0x11bb4],0x1
   610f4:	mov    esi,DWORD PTR [rax+0x11948]
   610fa:	mov    DWORD PTR [rax+0x1194c],0x0
   61104:	call   26a10 <start_macroblock>
   61109:	mov    rax,QWORD PTR [rip+0x274a0]        # 885b0 <img>
   61110:	mov    edi,0x1
   61115:	lea    rdx,[rip+0x3d204]        # 9e320 <rddata_bot_frame_mb>
   6111c:	mov    r8d,DWORD PTR [rax+0x11948]
   61123:	lea    rax,[rip+0x54016]        # b5140 <rddata_bot_field_mb>
   6112a:	test   r8d,r8d
   6112d:	cmove  rax,rdx
   61131:	add    r12d,0x2
   61135:	mov    QWORD PTR [rip+0x3fc24],rax        # a0d60 <rdopt>
   6113c:	call   1d4b0 <copy_rdopt_data>
   61141:	xor    edi,edi
   61143:	call   2f7e0 <write_one_macroblock>
   61148:	mov    rsi,rbp
   6114b:	mov    rdi,rbx
   6114e:	call   27470 <terminate_macroblock>
   61153:	xor    eax,eax
   61155:	mov    edi,r15d
   61158:	call   26810 <proceed2nextMacroblock>
   6115d:	mov    r9d,DWORD PTR [rip+0x3d19c]        # 9e300 <MBPairIsField>
   61164:	mov    rax,QWORD PTR [rip+0x27445]        # 885b0 <img>
   6116b:	test   r9d,r9d
   6116e:	je     61191 <encode_one_slice+0x631>
   61170:	mov    rdx,QWORD PTR [rip+0x27441]        # 885b8 <input>
   61177:	mov    esi,DWORD PTR [rax+0x11940]
   6117d:	sar    DWORD PTR [rax+0x11ab8],1
   61183:	sar    DWORD PTR [rdx+0x24],1
   61186:	lea    edx,[rsi-0x1]
   61189:	sar    edx,1
   6118b:	mov    DWORD PTR [rax+0x11940],edx
   61191:	mov    QWORD PTR [rax+0x11948],0x0
   6119c:	mov    edi,r15d
   6119f:	call   19b80 <FmoGetNextMBNr>
   611a4:	mov    edi,eax
   611a6:	call   19b80 <FmoGetNextMBNr>
   611ab:	mov    edi,eax
   611ad:	mov    r15d,eax
   611b0:	call   19b60 <FmoMB2SliceGroup>
   611b5:	mov    edi,eax
   611b7:	call   19c80 <FmoGetLastCodedMBOfSliceGroup>
   611bc:	cmp    eax,r15d
   611bf:	je     61598 <encode_one_slice+0xa38>
   611c5:	mov    esi,DWORD PTR [rsp+0x20]
   611c9:	test   esi,esi
   611cb:	jne    615a0 <encode_one_slice+0xa40>
   611d1:	mov    rdx,QWORD PTR [rip+0x273d8]        # 885b0 <img>
   611d8:	mov    r13d,DWORD PTR [rdx+0x11ad0]
   611df:	test   r13d,r13d
   611e2:	jne    61030 <encode_one_slice+0x4d0>
   611e8:	lea    rax,[rip+0x53071]        # b4260 <rddata_top_frame_mb>
   611ef:	xor    esi,esi
   611f1:	mov    edi,r15d
   611f4:	mov    DWORD PTR [rsp+0x24],0x0
   611fc:	mov    QWORD PTR [rip+0x3fb5d],rax        # a0d60 <rdopt>
   61203:	call   26a10 <start_macroblock>
   61208:	call   56d60 <encode_one_macroblock>
   6120d:	mov    edi,0x1
   61212:	call   2f7e0 <write_one_macroblock>
   61217:	mov    rsi,rbp
   6121a:	mov    rdi,rbx
   6121d:	call   27470 <terminate_macroblock>
   61222:	mov    r11d,DWORD PTR [rsp+0x24]
   61227:	test   r11d,r11d
   6122a:	jne    615d0 <encode_one_slice+0xa70>
   61230:	mov    edi,r15d
   61233:	call   19b80 <FmoGetNextMBNr>
   61238:	mov    r15d,eax
   6123b:	cmp    eax,0xffffffff
   6123e:	jne    61248 <encode_one_slice+0x6e8>
   61240:	mov    DWORD PTR [rsp+0x20],0x1
   61248:	mov    edi,r15d
   6124b:	xor    eax,eax
   6124d:	add    r12d,0x1
   61251:	call   26810 <proceed2nextMacroblock>
   61256:	jmp    611c5 <encode_one_slice+0x665>
   6125b:	nop    DWORD PTR [rax+rax*1+0x0]
   61260:	mov    r14d,DWORD PTR [rdx+0x528]
   61267:	test   r14d,r14d
   6126a:	je     60e26 <encode_one_slice+0x2c6>
   61270:	mov    r13d,DWORD PTR [rdx+0x930]
   61277:	test   r13d,r13d
   6127a:	je     60e26 <encode_one_slice+0x2c6>
   61280:	mov    edi,DWORD PTR [rip+0x56172]        # b73f8 <dpb+0x18>
   61286:	cmp    DWORD PTR [rip+0x56170],edi        # b73fc <dpb+0x1c>
   6128c:	jne    60e26 <encode_one_slice+0x2c6>
   61292:	mov    edi,DWORD PTR [rax+0x11b10]
   61298:	call   15eb0 <poc_based_ref_management>
   6129d:	mov    rax,QWORD PTR [rip+0x2730c]        # 885b0 <img>
   612a4:	mov    ecx,DWORD PTR [rax+0x18]
   612a7:	mov    rsi,rax
   612aa:	jmp    60e26 <encode_one_slice+0x2c6>
   612af:	nop
   612b0:	mov    ebp,DWORD PTR [rdx+0x92c]
   612b6:	test   ebp,ebp
   612b8:	je     60e5a <encode_one_slice+0x2fa>
   612be:	mov    rdi,rbx
   612c1:	call   35fc0 <alloc_ref_pic_list_reordering_buffer>
   612c6:	mov    rax,QWORD PTR [rip+0x272e3]        # 885b0 <img>
   612cd:	mov    edx,DWORD PTR [rax+0x18]
   612d0:	mov    rsi,rax
   612d3:	lea    ecx,[rdx-0x2]
   612d6:	and    ecx,0xfffffffd
   612d9:	je     61410 <encode_one_slice+0x8b0>
   612df:	mov    r10d,DWORD PTR [rax+0x11940]
   612e6:	test   r10d,r10d
   612e9:	js     61a68 <encode_one_slice+0xf08>
   612ef:	mov    r8,QWORD PTR [rbx+0x40]
   612f3:	mov    rdi,QWORD PTR [rbx+0x48]
   612f7:	xor    edx,edx
   612f9:	mov    rcx,QWORD PTR [rbx+0x50]
   612fd:	nop    DWORD PTR [rax]
   61300:	mov    DWORD PTR [r8+rdx*4],0x3
   61308:	mov    DWORD PTR [rdi+rdx*4],0x0
   6130f:	mov    DWORD PTR [rcx+rdx*4],0x0
   61316:	add    rdx,0x1
   6131a:	cmp    DWORD PTR [rax+0x11940],edx
   61320:	jge    61300 <encode_one_slice+0x7a0>
   61322:	mov    edx,DWORD PTR [rax+0x18]
   61325:	cmp    edx,0x1
   61328:	je     61a71 <encode_one_slice+0xf11>
   6132e:	sub    edx,0x2
   61331:	and    edx,0xfffffffd
   61334:	je     61410 <encode_one_slice+0x8b0>
   6133a:	mov    r10d,DWORD PTR [rax+0x11940]
   61341:	sub    rsp,0x8
   61345:	mov    r8,QWORD PTR [rbx+0x50]
   61349:	mov    rcx,QWORD PTR [rbx+0x48]
   6134d:	mov    esi,r10d
   61350:	mov    rdx,QWORD PTR [rbx+0x40]
   61354:	mov    rdi,QWORD PTR [rip+0x560c5]        # b7420 <listX>
   6135b:	push   0x0
   6135d:	xor    r9d,r9d
   61360:	call   60720 <poc_ref_pic_reorder>
   61365:	mov    rax,QWORD PTR [rip+0x27244]        # 885b0 <img>
   6136c:	mov    r9,QWORD PTR [rbx+0x50]
   61370:	lea    rsi,[rip+0x560d9]        # b7450 <listXsize>
   61377:	mov    rcx,QWORD PTR [rbx+0x40]
   6137b:	mov    r8,QWORD PTR [rbx+0x48]
   6137f:	mov    edx,DWORD PTR [rax+0x11940]
   61385:	mov    rdi,QWORD PTR [rip+0x56094]        # b7420 <listX>
   6138c:	sub    edx,0x1
   6138f:	call   32e00 <reorder_ref_pic_list>
   61394:	mov    rax,QWORD PTR [rip+0x27215]        # 885b0 <img>
   6139b:	pop    r9
   6139d:	pop    r10
   6139f:	cmp    DWORD PTR [rax+0x18],0x1
   613a3:	mov    rsi,rax
   613a6:	jne    61410 <encode_one_slice+0x8b0>
   613a8:	sub    rsp,0x8
   613ac:	mov    r8,QWORD PTR [rbx+0x70]
   613b0:	mov    rcx,QWORD PTR [rbx+0x68]
   613b4:	xor    r9d,r9d
   613b7:	mov    esi,DWORD PTR [rax+0x11944]
   613bd:	mov    rdx,QWORD PTR [rbx+0x60]
   613c1:	push   0x1
   613c3:	mov    rdi,QWORD PTR [rip+0x5605e]        # b7428 <listX+0x8>
   613ca:	call   60720 <poc_ref_pic_reorder>
   613cf:	mov    rax,QWORD PTR [rip+0x271da]        # 885b0 <img>
   613d6:	mov    r8,QWORD PTR [rbx+0x68]
   613da:	lea    rsi,[rip+0x56073]        # b7454 <listXsize+0x4>
   613e1:	mov    rdi,QWORD PTR [rip+0x56040]        # b7428 <listX+0x8>
   613e8:	mov    rcx,QWORD PTR [rbx+0x60]
   613ec:	mov    edx,DWORD PTR [rax+0x11944]
   613f2:	mov    r9,QWORD PTR [rbx+0x70]
   613f6:	sub    edx,0x1
   613f9:	call   32e00 <reorder_ref_pic_list>
   613fe:	mov    rax,QWORD PTR [rip+0x271ab]        # 885b0 <img>
   61405:	pop    rdi
   61406:	pop    r8
   61408:	mov    rsi,rax
   6140b:	nop    DWORD PTR [rax+rax*1+0x0]
   61410:	mov    ecx,DWORD PTR [rax+0x1c]
   61413:	test   ecx,ecx
   61415:	je     61950 <encode_one_slice+0xdf0>
   6141b:	mov    edi,DWORD PTR [rax+0x18]
   6141e:	cmp    edi,0x2
   61421:	je     60e7f <encode_one_slice+0x31f>
   61427:	mov    rdx,QWORD PTR [rip+0x3f9d2]        # a0e00 <active_pps>
   6142e:	cmp    DWORD PTR [rdx+0xc0],0x1
   61435:	je     619e0 <encode_one_slice+0xe80>
   6143b:	mov    edx,DWORD PTR [rdx+0xc4]
   61441:	test   edx,edx
   61443:	je     60e79 <encode_one_slice+0x319>
   61449:	cmp    edi,0x1
   6144c:	jne    60e79 <encode_one_slice+0x319>
   61452:	xor    eax,eax
   61454:	call   67820 <estimate_weighting_factor_B_slice>
   61459:	mov    rsi,QWORD PTR [rip+0x27150]        # 885b0 <img>
   61460:	mov    edi,DWORD PTR [rsi+0x18]
   61463:	jmp    60e7f <encode_one_slice+0x31f>
   61468:	nop    DWORD PTR [rax+rax*1+0x0]
   61470:	shl    DWORD PTR [rdx+0x11ab8],1
   61476:	mov    esi,0x1
   6147b:	mov    edi,r15d
   6147e:	movabs rax,0x100000001
   61488:	mov    QWORD PTR [rdx+0x11948],rax
   6148f:	mov    eax,DWORD PTR [rdx+0x11940]
   61495:	mov    DWORD PTR [rdx+0x11bb4],0x0
   6149f:	lea    eax,[rax+rax*1+0x1]
   614a3:	shl    DWORD PTR [rcx+0x24],1
   614a6:	mov    DWORD PTR [rdx+0x11940],eax
   614ac:	call   26a10 <start_macroblock>
   614b1:	lea    rax,[rip+0x3e368]        # 9f820 <rddata_top_field_mb>
   614b8:	mov    QWORD PTR [rip+0x3f8a1],rax        # a0d60 <rdopt>
   614bf:	call   56d60 <encode_one_macroblock>
   614c4:	mov    rax,QWORD PTR [rip+0x3f895]        # a0d60 <rdopt>
   614cb:	mov    esi,0x1
   614d0:	mov    edi,r13d
   614d3:	movsd  xmm0,QWORD PTR [rax]
   614d7:	mov    rax,QWORD PTR [rip+0x270d2]        # 885b0 <img>
   614de:	mov    DWORD PTR [rax+0x11bb4],0x1
   614e8:	mov    DWORD PTR [rax+0x1194c],0x0
   614f2:	movsd  QWORD PTR [rsp+0x8],xmm0
   614f8:	call   26a10 <start_macroblock>
   614fd:	lea    rax,[rip+0x53c3c]        # b5140 <rddata_bot_field_mb>
   61504:	mov    QWORD PTR [rip+0x3f855],rax        # a0d60 <rdopt>
   6150b:	call   56d60 <encode_one_macroblock>
   61510:	mov    rax,QWORD PTR [rip+0x3f849]        # a0d60 <rdopt>
   61517:	movsd  xmm0,QWORD PTR [rsp+0x8]
   6151d:	mov    rdx,QWORD PTR [rip+0x2708c]        # 885b0 <img>
   61524:	addsd  xmm0,QWORD PTR [rax]
   61528:	mov    rax,QWORD PTR [rip+0x27089]        # 885b8 <input>
   6152f:	mov    ecx,DWORD PTR [rax+0xb44]
   61535:	mov    DWORD PTR [rdx+0x11bb8],0x0
   6153f:	cmp    ecx,0x2
   61542:	jne    61060 <encode_one_slice+0x500>
   61548:	comisd xmm0,QWORD PTR [rsp+0x10]
   6154e:	jbe    61060 <encode_one_slice+0x500>
   61554:	mov    DWORD PTR [rdx+0x11948],0x0
   6155e:	xor    esi,esi
   61560:	sar    DWORD PTR [rdx+0x11ab8],1
   61566:	sar    DWORD PTR [rax+0x24],1
   61569:	mov    eax,DWORD PTR [rdx+0x11940]
   6156f:	mov    DWORD PTR [rip+0x3cd87],0x0        # 9e300 <MBPairIsField>
   61579:	mov    DWORD PTR [rdx+0x11bb8],0x1
   61583:	sub    eax,0x1
   61586:	sar    eax,1
   61588:	mov    DWORD PTR [rdx+0x11940],eax
   6158e:	jmp    61079 <encode_one_slice+0x519>
   61593:	nop    DWORD PTR [rax+rax*1+0x0]
   61598:	mov    DWORD PTR [rsp+0x20],0x1
   615a0:	xor    eax,eax
   615a2:	call   604d0 <terminate_slice>
   615a7:	mov    rax,QWORD PTR [rsp+0x28]
   615ac:	xor    rax,QWORD PTR fs:0x28
   615b5:	jne    61ae0 <encode_one_slice+0xf80>
   615bb:	add    rsp,0x38
   615bf:	mov    eax,r12d
   615c2:	pop    rbx
   615c3:	pop    rbp
   615c4:	pop    r12
   615c6:	pop    r13
   615c8:	pop    r14
   615ca:	pop    r15
   615cc:	ret    
   615cd:	nop    DWORD PTR [rax]
   615d0:	mov    r13,QWORD PTR [rip+0x26fd9]        # 885b0 <img>
   615d7:	mov    edi,DWORD PTR [r13+0xc]
   615db:	call   19bd0 <FmoGetPreviousMBNr>
   615e0:	mov    DWORD PTR [r13+0xc],eax
   615e4:	mov    rax,QWORD PTR [rip+0x26fc5]        # 885b0 <img>
   615eb:	cmp    DWORD PTR [rax+0xc],0xffffffff
   615ef:	jne    611c5 <encode_one_slice+0x665>
   615f5:	movabs rax,0x6e6520726f727245
   615ff:	movdqa xmm0,XMMWORD PTR [rip+0x16749]        # 77d50 <b8_mode_table.7699+0x6f0>
   61607:	movabs rdx,0x6620676e69646f63
   61611:	mov    r10d,0x6769
   61617:	mov    QWORD PTR [rip+0x53982],rax        # b4fa0 <errortext>
   6161e:	mov    esi,0x12c
   61623:	movabs rax,0x20424d2074737269
   6162d:	lea    rdi,[rip+0x5396c]        # b4fa0 <errortext>
   61634:	mov    QWORD PTR [rip+0x5396d],rdx        # b4fa8 <errortext+0x8>
   6163b:	movabs rdx,0x6370732068746977
   61645:	mov    QWORD PTR [rip+0x53964],rax        # b4fb0 <errortext+0x10>
   6164c:	movabs rax,0x6170206465696669
   61656:	mov    QWORD PTR [rip+0x5395b],rdx        # b4fb8 <errortext+0x18>
   6165d:	movabs rdx,0x2c726574656d6172
   61667:	mov    QWORD PTR [rip+0x53952],rax        # b4fc0 <errortext+0x20>
   6166e:	movabs rax,0x666f207374696220
   61678:	mov    QWORD PTR [rip+0x53949],rdx        # b4fc8 <errortext+0x28>
   6167f:	movabs rdx,0x746e657272756320
   61689:	mov    QWORD PTR [rip+0x53940],rax        # b4fd0 <errortext+0x30>
   61690:	mov    QWORD PTR [rip+0x53941],rdx        # b4fd8 <errortext+0x38>
   61697:	mov    WORD PTR [rip+0x53951],r10w        # b4ff0 <errortext+0x50>
   6169f:	movups XMMWORD PTR [rip+0x5393a],xmm0        # b4fe0 <errortext+0x40>
   616a6:	mov    BYTE PTR [rip+0x53945],0x0        # b4ff2 <errortext+0x52>
   616ad:	call   19180 <error>
   616b2:	jmp    611c5 <encode_one_slice+0x665>
   616b7:	nop    WORD PTR [rax+rax*1+0x0]
   616c0:	mov    QWORD PTR [rdx+0x11948],0x0
   616cb:	xor    esi,esi
   616cd:	mov    edi,r15d
   616d0:	mov    QWORD PTR [rdx+0x11bb0],0x0
   616db:	mov    DWORD PTR [rsp+0x24],0x0
   616e3:	call   26a10 <start_macroblock>
   616e8:	lea    rax,[rip+0x52b71]        # b4260 <rddata_top_frame_mb>
   616ef:	mov    QWORD PTR [rip+0x3f66a],rax        # a0d60 <rdopt>
   616f6:	call   56d60 <encode_one_macroblock>
   616fb:	mov    rax,QWORD PTR [rip+0x3f65e]        # a0d60 <rdopt>
   61702:	xor    esi,esi
   61704:	mov    edi,r13d
   61707:	movsd  xmm0,QWORD PTR [rax]
   6170b:	mov    rax,QWORD PTR [rip+0x26e9e]        # 885b0 <img>
   61712:	mov    DWORD PTR [rax+0x11bb4],0x1
   6171c:	mov    DWORD PTR [rax+0x11948],0x0
   61726:	movsd  QWORD PTR [rsp+0x8],xmm0
   6172c:	call   26a10 <start_macroblock>
   61731:	lea    rax,[rip+0x3cbe8]        # 9e320 <rddata_bot_frame_mb>
   61738:	mov    QWORD PTR [rip+0x3f621],rax        # a0d60 <rdopt>
   6173f:	call   56d60 <encode_one_macroblock>
   61744:	mov    rax,QWORD PTR [rip+0x3f615]        # a0d60 <rdopt>
   6174b:	movsd  xmm0,QWORD PTR [rsp+0x8]
   61751:	mov    rcx,QWORD PTR [rip+0x26e60]        # 885b8 <input>
   61758:	mov    rdx,QWORD PTR [rip+0x26e51]        # 885b0 <img>
   6175f:	addsd  xmm0,QWORD PTR [rax]
   61763:	mov    eax,DWORD PTR [rcx+0xb44]
   61769:	movsd  QWORD PTR [rsp+0x10],xmm0
   6176f:	jmp    6104a <encode_one_slice+0x4ea>
   61774:	nop    DWORD PTR [rax+0x0]
   61778:	mov    rdx,QWORD PTR [rip+0x26e39]        # 885b8 <input>
   6177f:	mov    edx,DWORD PTR [rdx+0x28]
   61782:	test   edx,edx
   61784:	je     60e06 <encode_one_slice+0x2a6>
   6178a:	cmp    edi,edx
   6178c:	cmovg  edi,edx
   6178f:	mov    DWORD PTR [rax+0x11940],edi
   61795:	mov    DWORD PTR [rip+0x55cb5],edi        # b7450 <listXsize>
   6179b:	cmp    ecx,0x1
   6179e:	jne    60e0f <encode_one_slice+0x2af>
   617a4:	mov    rdx,QWORD PTR [rip+0x26e0d]        # 885b8 <input>
   617ab:	mov    edi,DWORD PTR [rdx+0x2c]
   617ae:	test   edi,edi
   617b0:	je     617dd <encode_one_slice+0xc7d>
   617b2:	cmp    DWORD PTR [rax+0x11940],edi
   617b8:	mov    r9d,edi
   617bb:	cmovle r9d,DWORD PTR [rax+0x11940]
   617c3:	cmp    DWORD PTR [rip+0x55c87],edi        # b7450 <listXsize>
   617c9:	cmovle edi,DWORD PTR [rip+0x55c80]        # b7450 <listXsize>
   617d0:	mov    DWORD PTR [rax+0x11940],r9d
   617d7:	mov    DWORD PTR [rip+0x55c73],edi        # b7450 <listXsize>
   617dd:	mov    edi,DWORD PTR [rdx+0x30]
   617e0:	test   edi,edi
   617e2:	je     60e0f <encode_one_slice+0x2af>
   617e8:	cmp    r8d,edi
   617eb:	cmovg  r8d,edi
   617ef:	mov    edi,DWORD PTR [rax+0x11b30]
   617f5:	mov    DWORD PTR [rax+0x11944],r8d
   617fc:	mov    DWORD PTR [rip+0x55c51],r8d        # b7454 <listXsize+0x4>
   61803:	test   edi,edi
   61805:	jne    61260 <encode_one_slice+0x700>
   6180b:	mov    rdx,QWORD PTR [rax+0x3750]
   61812:	mov    DWORD PTR [rdx+0x38],0x0
   61819:	mov    DWORD PTR [rdx+0x58],0x0
   61820:	jmp    61410 <encode_one_slice+0x8b0>
   61825:	nop    DWORD PTR [rax]
   61828:	mov    DWORD PTR [rbx+0x10],0x1
   6182f:	test   eax,eax
   61831:	jne    60c35 <encode_one_slice+0xd5>
   61837:	jmp    60c3c <encode_one_slice+0xdc>
   6183c:	nop    DWORD PTR [rax+0x0]
   61840:	mov    rax,QWORD PTR [rip+0x29161]        # 8a9a8 <enc_picture>
   61847:	mov    r10d,0x2
   6184d:	lea    rbx,[rip+0x55bfc]        # b7450 <listXsize>
   61854:	lea    rbp,[rip+0x55bc5]        # b7420 <listX>
   6185b:	lea    r11,[rax+0x228]
   61862:	mov    eax,DWORD PTR [rbx+r10*4]
   61866:	test   eax,eax
   61868:	jle    618d9 <encode_one_slice+0xd79>
   6186a:	mov    rdx,QWORD PTR [rbp+r10*8+0x0]
   6186f:	sub    eax,0x1
   61872:	lea    r8,[rdx+0x8]
   61876:	lea    r9,[r8+rax*8]
   6187a:	mov    rax,r11
   6187d:	jmp    61884 <encode_one_slice+0xd24>
   6187f:	nop
   61880:	add    r8,0x8
   61884:	mov    rdx,QWORD PTR [rdx]
   61887:	xor    ecx,ecx
   61889:	mov    r12d,DWORD PTR [rdx+0x4]
   6188d:	cmp    DWORD PTR [rdx],0x2
   61890:	sete   cl
   61893:	add    rax,0x8
   61897:	lea    ecx,[rcx+r12*2]
   6189b:	movsxd rcx,ecx
   6189e:	mov    QWORD PTR [rax-0x8],rcx
   618a2:	mov    ecx,DWORD PTR [rdx+0x10]
   618a5:	add    ecx,ecx
   618a7:	movsxd rcx,ecx
   618aa:	mov    QWORD PTR [rax+0x628],rcx
   618b1:	mov    ecx,DWORD PTR [rdx+0x8]
   618b4:	mov    edx,DWORD PTR [rdx+0xc]
   618b7:	add    ecx,ecx
   618b9:	lea    edx,[rdx+rdx*1+0x1]
   618bd:	movsxd rcx,ecx
   618c0:	movsxd rdx,edx
   618c3:	mov    QWORD PTR [rax+0xc58],rcx
   618ca:	mov    QWORD PTR [rax+0x1288],rdx
   618d1:	mov    rdx,r8
   618d4:	cmp    r8,r9
   618d7:	jne    61880 <encode_one_slice+0xd20>
   618d9:	add    r10,0x1
   618dd:	add    r11,0x108
   618e4:	cmp    r10,0x6
   618e8:	jne    61862 <encode_one_slice+0xd02>
   618ee:	cmp    edi,0x1
   618f1:	jne    60fa4 <encode_one_slice+0x444>
   618f7:	mov    rdi,QWORD PTR [rip+0x2750a]        # 88e08 <Co_located>
   618fe:	lea    rsi,[rip+0x55b1b]        # b7420 <listX>
   61905:	call   365d0 <compute_colocated>
   6190a:	mov    rsi,QWORD PTR [rip+0x26c9f]        # 885b0 <img>
   61911:	jmp    60fa4 <encode_one_slice+0x444>
   61916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   61920:	lea    rcx,[rip+0x27119]        # 88a40 <assignSE2partition_NoDP>
   61927:	cmp    edx,0x1
   6192a:	mov    edi,0x3
   6192f:	lea    rax,[rip+0x26c0a]        # 88540 <assignSE2partition_DP>
   61936:	mov    QWORD PTR [rip+0x29033],rcx        # 8a970 <assignSE2partition>
   6193d:	cmovne rax,rcx
   61941:	jmp    60c4f <encode_one_slice+0xef>
   61946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   61950:	xor    eax,eax
   61952:	call   32c90 <init_mbaff_lists>
   61957:	mov    rax,QWORD PTR [rip+0x26c52]        # 885b0 <img>
   6195e:	mov    edi,DWORD PTR [rax+0x18]
   61961:	mov    rsi,rax
   61964:	cmp    edi,0x2
   61967:	jne    61427 <encode_one_slice+0x8c7>
   6196d:	jmp    60e7f <encode_one_slice+0x31f>
   61972:	nop    WORD PTR [rax+rax*1+0x0]
   61978:	mov    esi,0xffffffff
   6197d:	lea    rdi,[rip+0x1631c]        # 77ca0 <b8_mode_table.7699+0x640>
   61984:	call   19180 <error>
   61989:	mov    rax,QWORD PTR [rsp+0x8]
   6198e:	mov    eax,DWORD PTR [rax]
   61990:	sub    eax,0x1
   61993:	mov    DWORD PTR [rsp+0x18],eax
   61997:	mov    rax,QWORD PTR [rip+0x26c12]        # 885b0 <img>
   6199e:	jmp    60bcb <encode_one_slice+0x6b>
   619a3:	nop    DWORD PTR [rax+rax*1+0x0]
   619a8:	call   cac0 <create_contexts_MotionInfo>
   619ad:	mov    QWORD PTR [rbx+0x20],rax
   619b1:	call   cb00 <create_contexts_TextureInfo>
   619b6:	mov    QWORD PTR [rbx+0x28],rax
   619ba:	mov    rax,QWORD PTR [rip+0x26bf7]        # 885b8 <input>
   619c1:	jmp    60c07 <encode_one_slice+0xa7>
   619c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   619d0:	xor    eax,eax
   619d2:	call   11bf0 <SetCtxModelNumber>
   619d7:	jmp    60fce <encode_one_slice+0x46e>
   619dc:	nop    DWORD PTR [rax+0x0]
   619e0:	test   edi,edi
   619e2:	je     619ed <encode_one_slice+0xe8d>
   619e4:	cmp    edi,0x3
   619e7:	jne    61452 <encode_one_slice+0x8f2>
   619ed:	mov    rdx,QWORD PTR [rip+0x26bc4]        # 885b8 <input>
   619f4:	mov    eax,DWORD PTR [rdx+0x3c]
   619f7:	test   eax,eax
   619f9:	je     61a30 <encode_one_slice+0xed0>
   619fb:	mov    eax,DWORD PTR [rdx+0x510]
   61a01:	test   eax,eax
   61a03:	je     61a30 <encode_one_slice+0xed0>
   61a05:	mov    rax,QWORD PTR [rip+0x28f7c]        # 8a988 <enc_frame_picture2>
   61a0c:	cmp    QWORD PTR [rip+0x28f95],rax        # 8a9a8 <enc_picture>
   61a13:	je     61a30 <encode_one_slice+0xed0>
   61a15:	mov    edi,0x1
   61a1a:	call   67240 <estimate_weighting_factor_P_slice>
   61a1f:	mov    rsi,QWORD PTR [rip+0x26b8a]        # 885b0 <img>
   61a26:	mov    edi,DWORD PTR [rsi+0x18]
   61a29:	jmp    60e7f <encode_one_slice+0x31f>
   61a2e:	xchg   ax,ax
   61a30:	xor    edi,edi
   61a32:	call   67240 <estimate_weighting_factor_P_slice>
   61a37:	mov    rsi,QWORD PTR [rip+0x26b72]        # 885b0 <img>
   61a3e:	mov    edi,DWORD PTR [rsi+0x18]
   61a41:	jmp    60e7f <encode_one_slice+0x31f>
   61a46:	lea    rdi,[rip+0x162b8]        # 77d05 <b8_mode_table.7699+0x6a5>
   61a4d:	call   38210 <no_mem_exit>
   61a52:	mov    r10d,DWORD PTR [rbx+0x10]
   61a56:	test   r10d,r10d
   61a59:	jle    60cd9 <encode_one_slice+0x179>
   61a5f:	jmp    60c74 <encode_one_slice+0x114>
   61a64:	nop    DWORD PTR [rax+0x0]
   61a68:	cmp    edx,0x1
   61a6b:	jne    61341 <encode_one_slice+0x7e1>
   61a71:	mov    r11d,DWORD PTR [rax+0x11944]
   61a78:	test   r11d,r11d
   61a7b:	js     6133a <encode_one_slice+0x7da>
   61a81:	mov    r8,QWORD PTR [rbx+0x60]
   61a85:	mov    rdi,QWORD PTR [rbx+0x68]
   61a89:	xor    edx,edx
   61a8b:	mov    rcx,QWORD PTR [rbx+0x70]
   61a8f:	nop
   61a90:	mov    DWORD PTR [r8+rdx*4],0x3
   61a98:	mov    DWORD PTR [rdi+rdx*4],0x0
   61a9f:	mov    DWORD PTR [rcx+rdx*4],0x0
   61aa6:	add    rdx,0x1
   61aaa:	cmp    DWORD PTR [rax+0x11944],edx
   61ab0:	jge    61a90 <encode_one_slice+0xf30>
   61ab2:	mov    edx,DWORD PTR [rax+0x18]
   61ab5:	jmp    6132e <encode_one_slice+0x7ce>
   61aba:	lea    rdi,[rip+0x1625a]        # 77d1b <b8_mode_table.7699+0x6bb>
   61ac1:	call   38210 <no_mem_exit>
   61ac6:	mov    r15,QWORD PTR [r13+0x0]
   61aca:	jmp    60cae <encode_one_slice+0x14e>
   61acf:	lea    rdi,[rip+0x1625d]        # 77d33 <b8_mode_table.7699+0x6d3>
   61ad6:	call   38210 <no_mem_exit>
   61adb:	jmp    60cc8 <encode_one_slice+0x168>
   61ae0:	call   4390 <__stack_chk_fail@plt>
   61ae5:	lea    rdi,[rip+0x161fb]        # 77ce7 <b8_mode_table.7699+0x687>
   61aec:	call   38210 <no_mem_exit>
   61af1:	jmp    60bf3 <encode_one_slice+0x93>
   61af6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000061b00 <LowPassForIntra8x8Pred>:
   61b00:	endbr64 
   61b04:	push   rbx
   61b05:	sub    rsp,0x70
   61b09:	mov    rax,QWORD PTR fs:0x28
   61b12:	mov    QWORD PTR [rsp+0x68],rax
   61b17:	xor    eax,eax
   61b19:	mov    r8,rsp
   61b1c:	nop    DWORD PTR [rax+0x0]
   61b20:	mov    r9d,DWORD PTR [rdi+rax*1]
   61b24:	mov    DWORD PTR [r8+rax*1],r9d
   61b28:	add    rax,0x4
   61b2c:	cmp    rax,0x64
   61b30:	jne    61b20 <LowPassForIntra8x8Pred+0x20>
   61b32:	test   edx,edx
   61b34:	je     61be0 <LowPassForIntra8x8Pred+0xe0>
   61b3a:	mov    ebx,DWORD PTR [rdi+0x4]
   61b3d:	mov    edx,DWORD PTR [rdi+0x8]
   61b40:	lea    eax,[rbx+rbx*1]
   61b43:	test   esi,esi
   61b45:	jne    61c77 <LowPassForIntra8x8Pred+0x177>
   61b4b:	add    eax,ebx
   61b4d:	lea    eax,[rdx+rax*1+0x2]
   61b51:	sar    eax,0x2
   61b54:	mov    DWORD PTR [rsp+0x4],eax
   61b58:	lea    rdx,[rdi+0x4]
   61b5c:	lea    r9,[rsp+0x8]
   61b61:	lea    r11,[rsp+0x40]
   61b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   61b70:	mov    r10d,DWORD PTR [rdx+0x4]
   61b74:	mov    eax,DWORD PTR [rdx]
   61b76:	add    r9,0x4
   61b7a:	add    rdx,0x4
   61b7e:	lea    eax,[rax+r10*2]
   61b82:	add    eax,DWORD PTR [rdx+0x4]
   61b85:	add    eax,0x2
   61b88:	sar    eax,0x2
   61b8b:	mov    DWORD PTR [r9-0x4],eax
   61b8f:	cmp    r11,r9
   61b92:	jne    61b70 <LowPassForIntra8x8Pred+0x70>
   61b94:	mov    eax,DWORD PTR [rdi+0x40]
   61b97:	lea    eax,[rax+rax*2]
   61b9a:	add    eax,DWORD PTR [rdi+0x3c]
   61b9d:	add    eax,0x2
   61ba0:	sar    eax,0x2
   61ba3:	mov    DWORD PTR [rsp+0x40],eax
   61ba7:	test   esi,esi
   61ba9:	je     61be8 <LowPassForIntra8x8Pred+0xe8>
   61bab:	mov    eax,DWORD PTR [rdi]
   61bad:	lea    edx,[rax+rax*1]
   61bb0:	test   ecx,ecx
   61bb2:	je     61ca0 <LowPassForIntra8x8Pred+0x1a0>
   61bb8:	mov    ecx,DWORD PTR [rdi+0x44]
   61bbb:	add    edx,ecx
   61bbd:	lea    edx,[rbx+rdx*1+0x2]
   61bc1:	sar    edx,0x2
   61bc4:	mov    DWORD PTR [rsp],edx
   61bc7:	lea    eax,[rax+rcx*2]
   61bca:	add    eax,DWORD PTR [rdi+0x48]
   61bcd:	add    eax,0x2
   61bd0:	sar    eax,0x2
   61bd3:	mov    DWORD PTR [rsp+0x44],eax
   61bd7:	jmp    61bff <LowPassForIntra8x8Pred+0xff>
   61bd9:	nop    DWORD PTR [rax+0x0]
   61be0:	test   esi,esi
   61be2:	jne    61c85 <LowPassForIntra8x8Pred+0x185>
   61be8:	test   ecx,ecx
   61bea:	je     61c46 <LowPassForIntra8x8Pred+0x146>
   61bec:	mov    eax,DWORD PTR [rdi+0x44]
   61bef:	lea    eax,[rax+rax*2]
   61bf2:	add    eax,DWORD PTR [rdi+0x48]
   61bf5:	add    eax,0x2
   61bf8:	sar    eax,0x2
   61bfb:	mov    DWORD PTR [rsp+0x44],eax
   61bff:	xor    edx,edx
   61c01:	lea    rsi,[rsp+0x48]
   61c06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   61c10:	mov    ecx,DWORD PTR [rdi+rdx*1+0x48]
   61c14:	mov    eax,DWORD PTR [rdi+rdx*1+0x44]
   61c18:	lea    eax,[rax+rcx*2]
   61c1b:	add    eax,DWORD PTR [rdi+rdx*1+0x4c]
   61c1f:	add    eax,0x2
   61c22:	sar    eax,0x2
   61c25:	mov    DWORD PTR [rsi+rdx*1],eax
   61c28:	add    rdx,0x4
   61c2c:	cmp    rdx,0x18
   61c30:	jne    61c10 <LowPassForIntra8x8Pred+0x110>
   61c32:	mov    eax,DWORD PTR [rdi+0x60]
   61c35:	mov    edx,DWORD PTR [rdi+0x5c]
   61c38:	lea    edx,[rdx+rax*2]
   61c3b:	lea    eax,[rax+rdx*1+0x2]
   61c3f:	sar    eax,0x2
   61c42:	mov    DWORD PTR [rsp+0x60],eax
   61c46:	mov    edx,DWORD PTR [rsp]
   61c49:	xor    eax,eax
   61c4b:	jmp    61c54 <LowPassForIntra8x8Pred+0x154>
   61c4d:	nop    DWORD PTR [rax]
   61c50:	mov    edx,DWORD PTR [r8+rax*1]
   61c54:	mov    DWORD PTR [rdi+rax*1],edx
   61c57:	add    rax,0x4
   61c5b:	cmp    rax,0x64
   61c5f:	jne    61c50 <LowPassForIntra8x8Pred+0x150>
   61c61:	mov    rax,QWORD PTR [rsp+0x68]
   61c66:	xor    rax,QWORD PTR fs:0x28
   61c6f:	jne    61cab <LowPassForIntra8x8Pred+0x1ab>
   61c71:	add    rsp,0x70
   61c75:	pop    rbx
   61c76:	ret    
   61c77:	add    eax,DWORD PTR [rdi]
   61c79:	lea    eax,[rdx+rax*1+0x2]
   61c7d:	sar    eax,0x2
   61c80:	jmp    61b54 <LowPassForIntra8x8Pred+0x54>
   61c85:	test   ecx,ecx
   61c87:	je     61c46 <LowPassForIntra8x8Pred+0x146>
   61c89:	mov    eax,DWORD PTR [rdi]
   61c8b:	mov    ecx,DWORD PTR [rdi+0x44]
   61c8e:	lea    edx,[rax+rax*2]
   61c91:	lea    edx,[rcx+rdx*1+0x2]
   61c95:	sar    edx,0x2
   61c98:	mov    DWORD PTR [rsp],edx
   61c9b:	jmp    61bc7 <LowPassForIntra8x8Pred+0xc7>
   61ca0:	add    eax,edx
   61ca2:	lea    edx,[rbx+rax*1+0x2]
   61ca6:	sar    edx,0x2
   61ca9:	jmp    61c49 <LowPassForIntra8x8Pred+0x149>
   61cab:	call   4390 <__stack_chk_fail@plt>

0000000000061cb0 <intrapred_luma8x8>:
   61cb0:	endbr64 
   61cb4:	push   r15
   61cb6:	and    esi,0xf
   61cb9:	push   r14
   61cbb:	push   r13
   61cbd:	push   r12
   61cbf:	mov    r12d,esi
   61cc2:	push   rbp
   61cc3:	push   rbx
   61cc4:	mov    ebx,edi
   61cc6:	and    ebx,0xf
   61cc9:	lea    ebp,[rbx-0x1]
   61ccc:	sub    rsp,0x218
   61cd3:	mov    QWORD PTR [rsp+0x10],rdx
   61cd8:	mov    QWORD PTR [rsp+0x18],rcx
   61cdd:	mov    QWORD PTR [rsp+0x20],r8
   61ce2:	mov    rax,QWORD PTR fs:0x28
   61ceb:	mov    QWORD PTR [rsp+0x208],rax
   61cf3:	xor    eax,eax
   61cf5:	mov    rax,QWORD PTR [rip+0x28cac]        # 8a9a8 <enc_picture>
   61cfc:	mov    DWORD PTR [rsp+0xc],esi
   61d00:	mov    DWORD PTR [rsp+0x8],ebx
   61d04:	lea    rbx,[rsp+0x200]
   61d0c:	mov    r13,QWORD PTR [rax+0x1918]
   61d13:	mov    rax,QWORD PTR [rip+0x26896]        # 885b0 <img>
   61d1a:	mov    r15d,DWORD PTR [rax+0xc]
   61d1e:	lea    rax,[rsp+0x140]
   61d26:	mov    QWORD PTR [rsp+0x28],rax
   61d2b:	mov    r14,rax
   61d2e:	xchg   ax,ax
   61d30:	mov    r8,r14
   61d33:	mov    edx,r12d
   61d36:	mov    ecx,0x1
   61d3b:	mov    esi,ebp
   61d3d:	mov    edi,r15d
   61d40:	add    r14,0x18
   61d44:	add    r12d,0x1
   61d48:	call   30ae0 <getNeighbour>
   61d4d:	cmp    rbx,r14
   61d50:	jne    61d30 <intrapred_luma8x8+0x80>
   61d52:	mov    r12d,DWORD PTR [rsp+0xc]
   61d57:	mov    r14d,DWORD PTR [rsp+0x8]
   61d5c:	lea    r8,[rsp+0x70]
   61d61:	mov    edi,r15d
   61d64:	mov    ecx,0x1
   61d69:	lea    ebx,[r12-0x1]
   61d6e:	mov    esi,r14d
   61d71:	mov    edx,ebx
   61d73:	call   30ae0 <getNeighbour>
   61d78:	lea    esi,[r14+0x8]
   61d7c:	mov    ecx,0x1
   61d81:	mov    edx,ebx
   61d83:	lea    r8,[rsp+0x90]
   61d8b:	mov    edi,r15d
   61d8e:	call   30ae0 <getNeighbour>
   61d93:	mov    ecx,0x1
   61d98:	mov    edx,ebx
   61d9a:	mov    esi,ebp
   61d9c:	lea    r8,[rsp+0xb0]
   61da4:	mov    edi,r15d
   61da7:	call   30ae0 <getNeighbour>
   61dac:	mov    ecx,DWORD PTR [rsp+0x90]
   61db3:	test   ecx,ecx
   61db5:	je     61dca <intrapred_luma8x8+0x11a>
   61db7:	cmp    r14d,0x8
   61dbb:	setne  cl
   61dbe:	cmp    r12d,0x8
   61dc2:	setne  al
   61dc5:	or     ecx,eax
   61dc7:	movzx  ecx,cl
   61dca:	mov    rax,QWORD PTR [rip+0x267e7]        # 885b8 <input>
   61dd1:	mov    DWORD PTR [rsp+0x90],ecx
   61dd8:	mov    rdx,QWORD PTR [rip+0x267d1]        # 885b0 <img>
   61ddf:	mov    ebx,DWORD PTR [rsp+0x140]
   61de6:	mov    r8d,DWORD PTR [rax+0xd8]
   61ded:	mov    r12d,DWORD PTR [rsp+0x70]
   61df2:	mov    r14d,DWORD PTR [rsp+0xb0]
   61dfa:	test   r8d,r8d
   61dfd:	je     61e8b <intrapred_luma8x8+0x1db>
   61e03:	mov    rbp,QWORD PTR [rsp+0x28]
   61e08:	lea    rax,[rsp+0x144]
   61e10:	mov    esi,0x1
   61e15:	add    rbp,0xc4
   61e1c:	jmp    61e25 <intrapred_luma8x8+0x175>
   61e1e:	xchg   ax,ax
   61e20:	mov    esi,ebx
   61e22:	mov    ebx,DWORD PTR [rax-0x4]
   61e25:	test   ebx,ebx
   61e27:	je     61e39 <intrapred_luma8x8+0x189>
   61e29:	movsxd r8,DWORD PTR [rax]
   61e2c:	mov    rdi,QWORD PTR [rdx+0x11868]
   61e33:	mov    ebx,DWORD PTR [rdi+r8*4]
   61e37:	and    ebx,esi
   61e39:	add    rax,0x18
   61e3d:	cmp    rbp,rax
   61e40:	jne    61e20 <intrapred_luma8x8+0x170>
   61e42:	mov    r8d,ebx
   61e45:	and    r8d,0x1
   61e49:	test   r12d,r12d
   61e4c:	jne    636e4 <intrapred_luma8x8+0x1a34>
   61e52:	xor    ebp,ebp
   61e54:	xor    r9d,r9d
   61e57:	test   ecx,ecx
   61e59:	je     61e6d <intrapred_luma8x8+0x1bd>
   61e5b:	movsxd rcx,DWORD PTR [rsp+0x94]
   61e63:	mov    rax,QWORD PTR [rdx+0x11868]
   61e6a:	mov    ecx,DWORD PTR [rax+rcx*4]
   61e6d:	test   r14d,r14d
   61e70:	je     61fe5 <intrapred_luma8x8+0x335>
   61e76:	movsxd rsi,DWORD PTR [rsp+0xb4]
   61e7e:	mov    rax,QWORD PTR [rdx+0x11868]
   61e85:	mov    r14d,DWORD PTR [rax+rsi*4]
   61e89:	jmp    61e9e <intrapred_luma8x8+0x1ee>
   61e8b:	test   r12d,r12d
   61e8e:	setne  r9b
   61e92:	test   ebx,ebx
   61e94:	setne  r8b
   61e98:	mov    ebp,r9d
   61e9b:	and    ebp,r8d
   61e9e:	mov    rax,QWORD PTR [rsp+0x10]
   61ea3:	mov    DWORD PTR [rax],ebx
   61ea5:	mov    rax,QWORD PTR [rsp+0x18]
   61eaa:	mov    DWORD PTR [rax],r12d
   61ead:	test   bpl,bpl
   61eb0:	je     61ffd <intrapred_luma8x8+0x34d>
   61eb6:	test   r14d,r14d
   61eb9:	je     6374f <intrapred_luma8x8+0x1a9f>
   61ebf:	mov    rax,QWORD PTR [rsp+0x20]
   61ec4:	mov    r8d,ebp
   61ec7:	mov    r9d,ebp
   61eca:	mov    DWORD PTR [rax],0x1
   61ed0:	movsxd rax,DWORD PTR [rsp+0x84]
   61ed8:	movsxd rsi,DWORD PTR [rsp+0x80]
   61ee0:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   61ee5:	movzx  edi,WORD PTR [rax+rsi*2]
   61ee9:	mov    DWORD PTR [rsp+0xd4],edi
   61ef0:	movzx  edi,WORD PTR [rax+rsi*2+0x2]
   61ef5:	mov    DWORD PTR [rsp+0xd8],edi
   61efc:	movzx  edi,WORD PTR [rax+rsi*2+0x4]
   61f01:	mov    DWORD PTR [rsp+0xdc],edi
   61f08:	movzx  edi,WORD PTR [rax+rsi*2+0x6]
   61f0d:	mov    DWORD PTR [rsp+0xe0],edi
   61f14:	movzx  edi,WORD PTR [rax+rsi*2+0x8]
   61f19:	mov    DWORD PTR [rsp+0xe4],edi
   61f20:	movzx  edi,WORD PTR [rax+rsi*2+0xa]
   61f25:	mov    DWORD PTR [rsp+0xe8],edi
   61f2c:	movzx  edi,WORD PTR [rax+rsi*2+0xc]
   61f31:	movzx  eax,WORD PTR [rax+rsi*2+0xe]
   61f36:	mov    DWORD PTR [rsp+0xec],edi
   61f3d:	mov    DWORD PTR [rsp+0xf0],eax
   61f44:	test   ecx,ecx
   61f46:	jne    62059 <intrapred_luma8x8+0x3a9>
   61f4c:	mov    eax,DWORD PTR [rsp+0xf0]
   61f53:	mov    DWORD PTR [rsp+0x110],eax
   61f5a:	mov    DWORD PTR [rsp+0x10c],eax
   61f61:	mov    DWORD PTR [rsp+0x108],eax
   61f68:	mov    DWORD PTR [rsp+0x104],eax
   61f6f:	mov    DWORD PTR [rsp+0x100],eax
   61f76:	mov    DWORD PTR [rsp+0xfc],eax
   61f7d:	mov    DWORD PTR [rsp+0xf8],eax
   61f84:	mov    DWORD PTR [rsp+0xf4],eax
   61f8b:	test   ebx,ebx
   61f8d:	jne    620d5 <intrapred_luma8x8+0x425>
   61f93:	mov    eax,DWORD PTR [rdx+0x11be8]
   61f99:	mov    DWORD PTR [rsp+0x130],eax
   61fa0:	mov    DWORD PTR [rsp+0x12c],eax
   61fa7:	mov    DWORD PTR [rsp+0x128],eax
   61fae:	mov    DWORD PTR [rsp+0x124],eax
   61fb5:	mov    DWORD PTR [rsp+0x120],eax
   61fbc:	mov    DWORD PTR [rsp+0x11c],eax
   61fc3:	mov    DWORD PTR [rsp+0x118],eax
   61fca:	mov    DWORD PTR [rsp+0x114],eax
   61fd1:	test   r14d,r14d
   61fd4:	jne    621de <intrapred_luma8x8+0x52e>
   61fda:	mov    eax,DWORD PTR [rdx+0x11be8]
   61fe0:	jmp    621f7 <intrapred_luma8x8+0x547>
   61fe5:	mov    rax,QWORD PTR [rsp+0x10]
   61fea:	mov    DWORD PTR [rax],ebx
   61fec:	mov    rax,QWORD PTR [rsp+0x18]
   61ff1:	mov    DWORD PTR [rax],r12d
   61ff4:	test   bpl,bpl
   61ff7:	jne    6374f <intrapred_luma8x8+0x1a9f>
   61ffd:	mov    rax,QWORD PTR [rsp+0x20]
   62002:	mov    DWORD PTR [rax],0x0
   62008:	test   r12d,r12d
   6200b:	jne    63783 <intrapred_luma8x8+0x1ad3>
   62011:	mov    eax,DWORD PTR [rdx+0x11be8]
   62017:	xor    ebp,ebp
   62019:	mov    DWORD PTR [rsp+0xf0],eax
   62020:	mov    DWORD PTR [rsp+0xec],eax
   62027:	mov    DWORD PTR [rsp+0xe8],eax
   6202e:	mov    DWORD PTR [rsp+0xe4],eax
   62035:	mov    DWORD PTR [rsp+0xe0],eax
   6203c:	mov    DWORD PTR [rsp+0xdc],eax
   62043:	mov    DWORD PTR [rsp+0xd8],eax
   6204a:	mov    DWORD PTR [rsp+0xd4],eax
   62051:	test   ecx,ecx
   62053:	je     61f4c <intrapred_luma8x8+0x29c>
   62059:	movsxd rax,DWORD PTR [rsp+0xa4]
   62061:	movsxd rcx,DWORD PTR [rsp+0xa0]
   62069:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   6206e:	movzx  esi,WORD PTR [rax+rcx*2]
   62072:	mov    DWORD PTR [rsp+0xf4],esi
   62079:	movzx  esi,WORD PTR [rax+rcx*2+0x2]
   6207e:	mov    DWORD PTR [rsp+0xf8],esi
   62085:	movzx  esi,WORD PTR [rax+rcx*2+0x4]
   6208a:	mov    DWORD PTR [rsp+0xfc],esi
   62091:	movzx  esi,WORD PTR [rax+rcx*2+0x6]
   62096:	mov    DWORD PTR [rsp+0x100],esi
   6209d:	movzx  esi,WORD PTR [rax+rcx*2+0x8]
   620a2:	mov    DWORD PTR [rsp+0x104],esi
   620a9:	movzx  esi,WORD PTR [rax+rcx*2+0xa]
   620ae:	mov    DWORD PTR [rsp+0x108],esi
   620b5:	movzx  esi,WORD PTR [rax+rcx*2+0xc]
   620ba:	movzx  eax,WORD PTR [rax+rcx*2+0xe]
   620bf:	mov    DWORD PTR [rsp+0x10c],esi
   620c6:	mov    DWORD PTR [rsp+0x110],eax
   620cd:	test   ebx,ebx
   620cf:	je     61f93 <intrapred_luma8x8+0x2e3>
   620d5:	movsxd rax,DWORD PTR [rsp+0x154]
   620dd:	movsxd rcx,DWORD PTR [rsp+0x150]
   620e5:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   620ea:	movzx  eax,WORD PTR [rax+rcx*2]
   620ee:	movsxd rcx,DWORD PTR [rsp+0x168]
   620f6:	mov    DWORD PTR [rsp+0x114],eax
   620fd:	movsxd rax,DWORD PTR [rsp+0x16c]
   62105:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   6210a:	movzx  eax,WORD PTR [rax+rcx*2]
   6210e:	movsxd rcx,DWORD PTR [rsp+0x180]
   62116:	mov    DWORD PTR [rsp+0x118],eax
   6211d:	movsxd rax,DWORD PTR [rsp+0x184]
   62125:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   6212a:	movzx  eax,WORD PTR [rax+rcx*2]
   6212e:	movsxd rcx,DWORD PTR [rsp+0x198]
   62136:	mov    DWORD PTR [rsp+0x11c],eax
   6213d:	movsxd rax,DWORD PTR [rsp+0x19c]
   62145:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   6214a:	movzx  eax,WORD PTR [rax+rcx*2]
   6214e:	movsxd rcx,DWORD PTR [rsp+0x1b0]
   62156:	mov    DWORD PTR [rsp+0x120],eax
   6215d:	movsxd rax,DWORD PTR [rsp+0x1b4]
   62165:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   6216a:	movzx  eax,WORD PTR [rax+rcx*2]
   6216e:	movsxd rcx,DWORD PTR [rsp+0x1c8]
   62176:	mov    DWORD PTR [rsp+0x124],eax
   6217d:	movsxd rax,DWORD PTR [rsp+0x1cc]
   62185:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   6218a:	movzx  eax,WORD PTR [rax+rcx*2]
   6218e:	movsxd rcx,DWORD PTR [rsp+0x1e0]
   62196:	mov    DWORD PTR [rsp+0x128],eax
   6219d:	movsxd rax,DWORD PTR [rsp+0x1e4]
   621a5:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   621aa:	movzx  eax,WORD PTR [rax+rcx*2]
   621ae:	movsxd rcx,DWORD PTR [rsp+0x1f8]
   621b6:	mov    DWORD PTR [rsp+0x12c],eax
   621bd:	movsxd rax,DWORD PTR [rsp+0x1fc]
   621c5:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   621ca:	movzx  eax,WORD PTR [rax+rcx*2]
   621ce:	mov    DWORD PTR [rsp+0x130],eax
   621d5:	test   r14d,r14d
   621d8:	je     61fda <intrapred_luma8x8+0x32a>
   621de:	movsxd rax,DWORD PTR [rsp+0xc4]
   621e6:	movsxd rcx,DWORD PTR [rsp+0xc0]
   621ee:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   621f3:	movzx  eax,WORD PTR [rax+rcx*2]
   621f7:	mov    DWORD PTR [rsp+0xd0],eax
   621fe:	lea    rax,[rdx+0x1cb8]
   62205:	add    rdx,0x2138
   6220c:	nop    DWORD PTR [rax+0x0]
   62210:	mov    edi,0xffffffff
   62215:	sub    rax,0xffffffffffffff80
   62219:	mov    WORD PTR [rax-0x80],di
   6221d:	cmp    rdx,rax
   62220:	jne    62210 <intrapred_luma8x8+0x560>
   62222:	lea    rdi,[rsp+0xd0]
   6222a:	mov    ecx,ebx
   6222c:	mov    edx,r12d
   6222f:	mov    esi,r14d
   62232:	mov    BYTE PTR [rsp+0xc],r9b
   62237:	mov    BYTE PTR [rsp+0x8],r8b
   6223c:	call   61b00 <LowPassForIntra8x8Pred>
   62241:	test   bpl,bpl
   62244:	movzx  r8d,BYTE PTR [rsp+0x8]
   6224a:	movzx  r9d,BYTE PTR [rsp+0xc]
   62250:	je     62e82 <intrapred_luma8x8+0x11d2>
   62256:	mov    eax,DWORD PTR [rsp+0xd4]
   6225d:	mov    ecx,DWORD PTR [rsp+0xdc]
   62264:	mov    edi,DWORD PTR [rsp+0x114]
   6226b:	mov    DWORD PTR [rsp+0x8],eax
   6226f:	add    eax,DWORD PTR [rsp+0xd8]
   62276:	add    ecx,eax
   62278:	add    ecx,DWORD PTR [rsp+0xe0]
   6227f:	add    ecx,DWORD PTR [rsp+0xe4]
   62286:	mov    DWORD PTR [rsp+0xc],edi
   6228a:	add    ecx,DWORD PTR [rsp+0xe8]
   62291:	add    ecx,DWORD PTR [rsp+0xec]
   62298:	add    ecx,DWORD PTR [rsp+0xf0]
   6229f:	mov    rax,QWORD PTR [rip+0x2630a]        # 885b0 <img>
   622a6:	add    ecx,edi
   622a8:	add    ecx,DWORD PTR [rsp+0x118]
   622af:	add    ecx,DWORD PTR [rsp+0x11c]
   622b6:	add    ecx,DWORD PTR [rsp+0x120]
   622bd:	add    ecx,DWORD PTR [rsp+0x124]
   622c4:	add    ecx,DWORD PTR [rsp+0x128]
   622cb:	add    ecx,DWORD PTR [rsp+0x12c]
   622d2:	add    ecx,DWORD PTR [rsp+0x130]
   622d9:	add    ecx,0x8
   622dc:	sar    ecx,0x4
   622df:	lea    rdx,[rax+0x1db8]
   622e6:	lea    rsi,[rax+0x1dc8]
   622ed:	nop    DWORD PTR [rax]
   622f0:	mov    WORD PTR [rdx],cx
   622f3:	add    rdx,0x2
   622f7:	mov    WORD PTR [rdx+0xe],cx
   622fb:	mov    WORD PTR [rdx+0x1e],cx
   622ff:	mov    WORD PTR [rdx+0x2e],cx
   62303:	mov    WORD PTR [rdx+0x3e],cx
   62307:	mov    WORD PTR [rdx+0x4e],cx
   6230b:	mov    WORD PTR [rdx+0x5e],cx
   6230f:	mov    WORD PTR [rdx+0x6e],cx
   62313:	cmp    rsi,rdx
   62316:	jne    622f0 <intrapred_luma8x8+0x640>
   62318:	mov    edi,DWORD PTR [rsp+0xc]
   6231c:	mov    esi,DWORD PTR [rsp+0x8]
   62320:	lea    rcx,[rax+0x1cb8]
   62327:	lea    rdx,[rax+0x1d38]
   6232e:	lea    r8,[rsp+0xd8]
   62336:	lea    r9,[rsp+0xf4]
   6233e:	jmp    6234b <intrapred_luma8x8+0x69b>
   62340:	mov    esi,DWORD PTR [r8]
   62343:	mov    edi,DWORD PTR [r8+0x40]
   62347:	add    r8,0x4
   6234b:	mov    WORD PTR [rcx+0x70],si
   6234f:	add    rdx,0x10
   62353:	add    rcx,0x2
   62357:	mov    WORD PTR [rcx+0x5e],si
   6235b:	mov    WORD PTR [rcx+0x4e],si
   6235f:	mov    WORD PTR [rcx+0x3e],si
   62363:	mov    WORD PTR [rcx+0x2e],si
   62367:	mov    WORD PTR [rcx+0x1e],si
   6236b:	mov    WORD PTR [rcx+0xe],si
   6236f:	mov    WORD PTR [rcx-0x2],si
   62373:	mov    WORD PTR [rdx-0x2],di
   62377:	mov    WORD PTR [rdx-0x4],di
   6237b:	mov    WORD PTR [rdx-0x6],di
   6237f:	mov    WORD PTR [rdx-0x8],di
   62383:	mov    WORD PTR [rdx-0xa],di
   62387:	mov    WORD PTR [rdx-0xc],di
   6238b:	mov    WORD PTR [rdx-0xe],di
   6238f:	mov    WORD PTR [rdx-0x10],di
   62393:	cmp    r9,r8
   62396:	jne    62340 <intrapred_luma8x8+0x690>
   62398:	test   r12d,r12d
   6239b:	jne    62830 <intrapred_luma8x8+0xb80>
   623a1:	mov    esi,0xffffffff
   623a6:	mov    WORD PTR [rax+0x1cb8],si
   623ad:	test   ebx,ebx
   623af:	je     636d3 <intrapred_luma8x8+0x1a23>
   623b5:	test   bpl,bpl
   623b8:	je     62729 <intrapred_luma8x8+0xa79>
   623be:	mov    r9d,DWORD PTR [rsp+0x128]
   623c6:	mov    edx,DWORD PTR [rsp+0x130]
   623cd:	mov    ebp,DWORD PTR [rsp+0x12c]
   623d4:	mov    r10d,DWORD PTR [rsp+0x124]
   623dc:	lea    ecx,[r9+rdx*1]
   623e0:	mov    r11d,DWORD PTR [rsp+0x120]
   623e8:	mov    ebx,DWORD PTR [rsp+0x11c]
   623ef:	lea    ecx,[rcx+rbp*2+0x2]
   623f3:	mov    edi,DWORD PTR [rsp+0x118]
   623fa:	sar    ecx,0x2
   623fd:	mov    DWORD PTR [rsp+0x44],ecx
   62401:	mov    WORD PTR [rsp+0x18],cx
   62406:	lea    ecx,[r10+rbp*1]
   6240a:	lea    ecx,[rcx+r9*2+0x2]
   6240f:	sar    ecx,0x2
   62412:	mov    WORD PTR [rsp+0x20],cx
   62417:	mov    r13d,ecx
   6241a:	lea    ecx,[r11+r9*1]
   6241e:	lea    r15d,[rcx+r10*2+0x2]
   62423:	lea    ecx,[rbx+r10*1]
   62427:	sar    r15d,0x2
   6242b:	lea    r8d,[rcx+r11*2+0x2]
   62430:	lea    ecx,[rdi+r11*1]
   62434:	mov    DWORD PTR [rsp+0x10],r15d
   62439:	lea    esi,[rcx+rbx*2+0x2]
   6243d:	sar    r8d,0x2
   62441:	mov    WORD PTR [rsp+0x28],r15w
   62447:	mov    r15d,DWORD PTR [rsp+0xc]
   6244c:	sar    esi,0x2
   6244f:	mov    WORD PTR [rsp+0x30],r8w
   62455:	lea    r12d,[r15+rdi*1+0x1]
   6245a:	lea    ecx,[r15+rbx*1]
   6245e:	mov    WORD PTR [rsp+0x32],si
   62463:	sar    r12d,1
   62466:	lea    ecx,[rcx+rdi*2+0x2]
   6246a:	mov    DWORD PTR [rsp+0x50],r12d
   6246f:	sar    ecx,0x2
   62472:	mov    WORD PTR [rsp+0x42],r12w
   62478:	lea    r12d,[rdi+rbx*1+0x1]
   6247d:	lea    ebx,[rbx+r11*1+0x1]
   62482:	lea    r11d,[r11+r10*1+0x1]
   62487:	lea    r10d,[r10+r9*1+0x1]
   6248c:	sar    r12d,1
   6248f:	sar    ebx,1
   62491:	lea    r9d,[rbp+r9*1+0x1]
   62496:	sar    r11d,1
   62499:	sar    r10d,1
   6249c:	mov    WORD PTR [rsp+0x40],cx
   624a1:	sar    r9d,1
   624a4:	mov    DWORD PTR [rsp+0x54],r12d
   624a9:	mov    DWORD PTR [rsp+0x64],r9d
   624ae:	mov    WORD PTR [rsp+0x3c],r9w
   624b4:	lea    r9d,[rbp+rdx*1+0x1]
   624b9:	sar    r9d,1
   624bc:	mov    WORD PTR [rsp+0x34],r12w
   624c2:	mov    DWORD PTR [rsp+0x58],ebx
   624c6:	mov    WORD PTR [rsp+0x36],bx
   624cb:	mov    DWORD PTR [rsp+0x5c],r11d
   624d0:	mov    WORD PTR [rsp+0x38],r11w
   624d6:	mov    DWORD PTR [rsp+0x60],r10d
   624db:	mov    WORD PTR [rsp+0x3a],r10w
   624e1:	mov    DWORD PTR [rsp+0x68],r9d
   624e6:	mov    WORD PTR [rsp+0x3e],r9w
   624ec:	test   r14d,r14d
   624ef:	jne    62eef <intrapred_luma8x8+0x123f>
   624f5:	movzx  ebx,WORD PTR [rsp+0x34]
   624fa:	movzx  edi,WORD PTR [rsp+0x42]
   624ff:	mov    WORD PTR [rax+0x2136],dx
   62506:	mov    WORD PTR [rax+0x2134],dx
   6250d:	mov    WORD PTR [rax+0x20bc],bx
   62514:	mov    WORD PTR [rax+0x20c8],bx
   6251b:	movzx  ebx,WORD PTR [rsp+0x38]
   62520:	mov    WORD PTR [rax+0x20b8],di
   62527:	movzx  edi,WORD PTR [rsp+0x36]
   6252c:	mov    WORD PTR [rax+0x20c4],bx
   62533:	mov    WORD PTR [rax+0x20d0],bx
   6253a:	mov    WORD PTR [rax+0x20dc],bx
   62541:	mov    WORD PTR [rax+0x20e8],bx
   62548:	movzx  ebx,WORD PTR [rsp+0x3a]
   6254d:	mov    WORD PTR [rax+0x20c0],di
   62554:	mov    WORD PTR [rax+0x20d4],bx
   6255b:	mov    WORD PTR [rax+0x20e0],bx
   62562:	mov    WORD PTR [rax+0x20ec],bx
   62569:	mov    WORD PTR [rax+0x20f8],bx
   62570:	movzx  ebx,WORD PTR [rsp+0x3c]
   62575:	mov    WORD PTR [rax+0x20cc],di
   6257c:	mov    WORD PTR [rax+0x20e4],bx
   62583:	mov    WORD PTR [rax+0x20f0],bx
   6258a:	mov    WORD PTR [rax+0x20fc],bx
   62591:	mov    WORD PTR [rax+0x2108],bx
   62598:	movzx  ebx,WORD PTR [rsp+0x3e]
   6259d:	mov    WORD PTR [rax+0x20d8],di
   625a4:	mov    WORD PTR [rax+0x20f4],bx
   625ab:	mov    WORD PTR [rax+0x2100],bx
   625b2:	mov    WORD PTR [rax+0x210c],bx
   625b9:	mov    WORD PTR [rax+0x2118],bx
   625c0:	mov    WORD PTR [rax+0x2132],dx
   625c7:	mov    WORD PTR [rax+0x2130],dx
   625ce:	movzx  ebx,WORD PTR [rsp+0x18]
   625d3:	mov    WORD PTR [rax+0x212e],dx
   625da:	mov    WORD PTR [rax+0x20e6],bx
   625e1:	mov    WORD PTR [rax+0x20f2],bx
   625e8:	mov    WORD PTR [rax+0x20fe],bx
   625ef:	mov    WORD PTR [rax+0x210a],bx
   625f6:	movzx  ebx,WORD PTR [rsp+0x20]
   625fb:	mov    WORD PTR [rax+0x212c],dx
   62602:	mov    WORD PTR [rax+0x212a],dx
   62609:	mov    WORD PTR [rax+0x2128],dx
   62610:	mov    WORD PTR [rax+0x2126],dx
   62617:	mov    WORD PTR [rax+0x2124],dx
   6261e:	mov    WORD PTR [rax+0x2122],dx
   62625:	mov    WORD PTR [rax+0x2120],dx
   6262c:	mov    WORD PTR [rax+0x211e],dx
   62633:	mov    WORD PTR [rax+0x211c],dx
   6263a:	mov    WORD PTR [rax+0x2116],dx
   62641:	mov    WORD PTR [rax+0x2114],dx
   62648:	mov    WORD PTR [rax+0x2112],dx
   6264f:	mov    WORD PTR [rax+0x2110],dx
   62656:	mov    WORD PTR [rax+0x2106],dx
   6265d:	mov    WORD PTR [rax+0x2104],dx
   62664:	lea    edx,[rdx+rdx*2]
   62667:	mov    WORD PTR [rax+0x20d6],bx
   6266e:	lea    edx,[rbp+rdx*1+0x2]
   62672:	mov    WORD PTR [rax+0x20e2],bx
   62679:	sar    edx,0x2
   6267c:	mov    WORD PTR [rax+0x20ee],bx
   62683:	mov    WORD PTR [rax+0x20fa],bx
   6268a:	movzx  ebx,WORD PTR [rsp+0x28]
   6268f:	mov    WORD PTR [rax+0x20f6],dx
   62696:	mov    WORD PTR [rax+0x20c6],bx
   6269d:	mov    WORD PTR [rax+0x2102],dx
   626a4:	mov    WORD PTR [rax+0x210e],dx
   626ab:	mov    WORD PTR [rax+0x211a],dx
   626b2:	mov    WORD PTR [rax+0x20d2],bx
   626b9:	movzx  edi,WORD PTR [rsp+0x32]
   626be:	mov    WORD PTR [rax+0x20de],bx
   626c5:	mov    WORD PTR [rax+0x20ea],bx
   626cc:	movzx  ebx,WORD PTR [rsp+0x30]
   626d1:	mov    WORD PTR [rax+0x20be],di
   626d8:	mov    WORD PTR [rax+0x20ca],di
   626df:	movzx  edi,WORD PTR [rsp+0x40]
   626e4:	mov    WORD PTR [rax+0x20c2],bx
   626eb:	mov    WORD PTR [rax+0x20ce],bx
   626f2:	mov    WORD PTR [rax+0x20da],bx
   626f9:	mov    WORD PTR [rax+0x20ba],di
   62700:	mov    rax,QWORD PTR [rsp+0x208]
   62708:	xor    rax,QWORD PTR fs:0x28
   62711:	jne    6377e <intrapred_luma8x8+0x1ace>
   62717:	add    rsp,0x218
   6271e:	pop    rbx
   6271f:	pop    rbp
   62720:	pop    r12
   62722:	pop    r13
   62724:	pop    r14
   62726:	pop    r15
   62728:	ret    
   62729:	test   ebx,ebx
   6272b:	je     62700 <intrapred_luma8x8+0xa50>
   6272d:	mov    ecx,DWORD PTR [rsp+0x128]
   62734:	mov    edx,DWORD PTR [rsp+0x130]
   6273b:	mov    ebp,DWORD PTR [rsp+0x12c]
   62742:	mov    edi,DWORD PTR [rsp+0x124]
   62749:	lea    r9d,[rcx+rdx*1]
   6274d:	mov    r8d,DWORD PTR [rsp+0x120]
   62755:	mov    ebx,DWORD PTR [rsp+0xc]
   62759:	lea    r9d,[r9+rbp*2+0x2]
   6275e:	mov    esi,DWORD PTR [rsp+0x11c]
   62765:	mov    r10d,DWORD PTR [rsp+0x118]
   6276d:	sar    r9d,0x2
   62771:	mov    WORD PTR [rsp+0x18],r9w
   62777:	lea    r9d,[rdi+rbp*1]
   6277b:	lea    r9d,[r9+rcx*2+0x2]
   62780:	sar    r9d,0x2
   62784:	mov    WORD PTR [rsp+0x20],r9w
   6278a:	lea    r9d,[r8+rcx*1]
   6278e:	lea    r9d,[r9+rdi*2+0x2]
   62793:	sar    r9d,0x2
   62797:	mov    WORD PTR [rsp+0x28],r9w
   6279d:	lea    r9d,[rsi+rdi*1]
   627a1:	lea    r9d,[r9+r8*2+0x2]
   627a6:	sar    r9d,0x2
   627aa:	mov    WORD PTR [rsp+0x30],r9w
   627b0:	lea    r9d,[r10+r8*1]
   627b4:	lea    r9d,[r9+rsi*2+0x2]
   627b9:	sar    r9d,0x2
   627bd:	mov    WORD PTR [rsp+0x32],r9w
   627c3:	lea    r9d,[r10+rsi*1+0x1]
   627c8:	sar    r9d,1
   627cb:	mov    WORD PTR [rsp+0x34],r9w
   627d1:	lea    r9d,[rsi+r8*1+0x1]
   627d6:	lea    r8d,[r8+rdi*1+0x1]
   627db:	lea    edi,[rdi+rcx*1+0x1]
   627df:	lea    ecx,[rcx+rbp*1+0x1]
   627e3:	sar    r9d,1
   627e6:	sar    r8d,1
   627e9:	sar    ecx,1
   627eb:	sar    edi,1
   627ed:	mov    WORD PTR [rsp+0x36],r9w
   627f3:	mov    WORD PTR [rsp+0x3c],cx
   627f8:	lea    ecx,[rbp+rdx*1+0x1]
   627fc:	sar    ecx,1
   627fe:	mov    WORD PTR [rsp+0x38],r8w
   62804:	mov    WORD PTR [rsp+0x3e],cx
   62809:	lea    ecx,[rbx+rsi*1]
   6280c:	lea    ecx,[rcx+r10*2+0x2]
   62811:	mov    WORD PTR [rsp+0x3a],di
   62816:	sar    ecx,0x2
   62819:	mov    WORD PTR [rsp+0x40],cx
   6281e:	lea    ecx,[rbx+r10*1+0x1]
   62823:	sar    ecx,1
   62825:	mov    WORD PTR [rsp+0x42],cx
   6282a:	jmp    624f5 <intrapred_luma8x8+0x845>
   6282f:	nop
   62830:	test   ebx,ebx
   62832:	jne    62840 <intrapred_luma8x8+0xb90>
   62834:	mov    edx,0xffffffff
   62839:	mov    WORD PTR [rax+0x1d38],dx
   62840:	mov    edi,DWORD PTR [rsp+0xd8]
   62847:	mov    edx,DWORD PTR [rsp+0x8]
   6284b:	add    edx,DWORD PTR [rsp+0xdc]
   62852:	mov    esi,DWORD PTR [rsp+0xd8]
   62859:	lea    edx,[rdx+rdi*2+0x2]
   6285d:	add    esi,DWORD PTR [rsp+0xe0]
   62864:	mov    edi,edx
   62866:	mov    edx,esi
   62868:	mov    esi,DWORD PTR [rsp+0xdc]
   6286f:	sar    edi,0x2
   62872:	lea    edx,[rdx+rsi*2+0x2]
   62876:	mov    esi,DWORD PTR [rsp+0xdc]
   6287d:	add    esi,DWORD PTR [rsp+0xe4]
   62884:	mov    DWORD PTR [rsp+0x10],edi
   62888:	sar    edx,0x2
   6288b:	mov    WORD PTR [rax+0x1e38],di
   62892:	mov    WORD PTR [rax+0x1e48],dx
   62899:	mov    DWORD PTR [rsp+0x18],edx
   6289d:	mov    WORD PTR [rax+0x1e3a],dx
   628a4:	mov    edx,esi
   628a6:	mov    esi,DWORD PTR [rsp+0xe0]
   628ad:	lea    edx,[rdx+rsi*2+0x2]
   628b1:	mov    esi,DWORD PTR [rsp+0xe0]
   628b8:	add    esi,DWORD PTR [rsp+0xe8]
   628bf:	sar    edx,0x2
   628c2:	mov    WORD PTR [rax+0x1e58],dx
   628c9:	mov    WORD PTR [rax+0x1e4a],dx
   628d0:	mov    DWORD PTR [rsp+0x20],edx
   628d4:	mov    WORD PTR [rax+0x1e3c],dx
   628db:	mov    edx,esi
   628dd:	mov    esi,DWORD PTR [rsp+0xe4]
   628e4:	lea    r10d,[rdx+rsi*2+0x2]
   628e9:	add    esi,DWORD PTR [rsp+0xec]
   628f0:	mov    edx,esi
   628f2:	mov    esi,DWORD PTR [rsp+0xe8]
   628f9:	sar    r10d,0x2
   628fd:	mov    WORD PTR [rax+0x1e68],r10w
   62905:	lea    r8d,[rdx+rsi*2+0x2]
   6290a:	mov    WORD PTR [rax+0x1e5a],r10w
   62912:	sar    r8d,0x2
   62916:	mov    WORD PTR [rax+0x1e4c],r10w
   6291e:	mov    WORD PTR [rax+0x1e3e],r10w
   62926:	mov    WORD PTR [rax+0x1e78],r8w
   6292e:	mov    WORD PTR [rax+0x1e6a],r8w
   62936:	mov    WORD PTR [rax+0x1e5c],r8w
   6293e:	mov    WORD PTR [rax+0x1e4e],r8w
   62946:	mov    WORD PTR [rax+0x1e40],r8w
   6294e:	add    esi,DWORD PTR [rsp+0xf0]
   62955:	mov    edx,esi
   62957:	mov    esi,DWORD PTR [rsp+0xec]
   6295e:	mov    r11d,DWORD PTR [rsp+0xf8]
   62966:	lea    edi,[rdx+rsi*2+0x2]
   6296a:	add    esi,DWORD PTR [rsp+0xf4]
   62971:	mov    edx,esi
   62973:	mov    esi,DWORD PTR [rsp+0xf0]
   6297a:	sar    edi,0x2
   6297d:	mov    WORD PTR [rax+0x1e88],di
   62984:	lea    ecx,[rdx+rsi*2+0x2]
   62988:	add    esi,DWORD PTR [rsp+0xf8]
   6298f:	mov    WORD PTR [rax+0x1e7a],di
   62996:	mov    edx,esi
   62998:	mov    esi,DWORD PTR [rsp+0xf4]
   6299f:	sar    ecx,0x2
   629a2:	mov    WORD PTR [rax+0x1e6c],di
   629a9:	mov    WORD PTR [rax+0x1e5e],di
   629b0:	lea    edx,[rdx+rsi*2+0x2]
   629b4:	add    esi,DWORD PTR [rsp+0xfc]
   629bb:	mov    WORD PTR [rax+0x1e50],di
   629c2:	lea    esi,[rsi+r11*2+0x2]
   629c7:	sar    edx,0x2
   629ca:	mov    WORD PTR [rax+0x1e42],di
   629d1:	sar    esi,0x2
   629d4:	mov    WORD PTR [rax+0x1e98],cx
   629db:	mov    WORD PTR [rax+0x1e8a],cx
   629e2:	mov    WORD PTR [rax+0x1e7c],cx
   629e9:	mov    WORD PTR [rax+0x1e6e],cx
   629f0:	mov    WORD PTR [rax+0x1e60],cx
   629f7:	mov    WORD PTR [rax+0x1e52],cx
   629fe:	mov    WORD PTR [rax+0x1e44],cx
   62a05:	mov    WORD PTR [rax+0x1ea8],dx
   62a0c:	mov    WORD PTR [rax+0x1e9a],dx
   62a13:	mov    WORD PTR [rax+0x1e8c],dx
   62a1a:	mov    WORD PTR [rax+0x1e7e],dx
   62a21:	mov    WORD PTR [rax+0x1e70],dx
   62a28:	mov    WORD PTR [rax+0x1e62],dx
   62a2f:	mov    WORD PTR [rax+0x1e54],dx
   62a36:	mov    WORD PTR [rax+0x1e46],dx
   62a3d:	mov    WORD PTR [rax+0x1eaa],si
   62a44:	mov    WORD PTR [rax+0x1e9c],si
   62a4b:	mov    WORD PTR [rax+0x1e8e],si
   62a52:	mov    WORD PTR [rax+0x1e80],si
   62a59:	mov    r9d,DWORD PTR [rsp+0x100]
   62a61:	mov    r15d,DWORD PTR [rsp+0x104]
   62a69:	mov    r13d,DWORD PTR [rsp+0x100]
   62a71:	mov    WORD PTR [rax+0x1e72],si
   62a78:	add    r9d,r11d
   62a7b:	mov    r11d,DWORD PTR [rsp+0xfc]
   62a83:	mov    r12d,DWORD PTR [rsp+0x100]
   62a8b:	mov    WORD PTR [rax+0x1e64],si
   62a92:	mov    WORD PTR [rax+0x1e56],si
   62a99:	lea    r9d,[r9+r11*2+0x2]
   62a9e:	mov    r11d,DWORD PTR [rsp+0xfc]
   62aa6:	sar    r9d,0x2
   62aaa:	add    r11d,r15d
   62aad:	mov    WORD PTR [rax+0x1eac],r9w
   62ab5:	lea    r11d,[r11+r13*2+0x2]
   62aba:	mov    r13d,DWORD PTR [rsp+0x108]
   62ac2:	mov    WORD PTR [rax+0x1e9e],r9w
   62aca:	sar    r11d,0x2
   62ace:	mov    WORD PTR [rax+0x1e90],r9w
   62ad6:	add    r12d,r13d
   62ad9:	mov    WORD PTR [rax+0x1e82],r9w
   62ae1:	lea    r12d,[r12+r15*2+0x2]
   62ae6:	mov    WORD PTR [rax+0x1e74],r9w
   62aee:	sar    r12d,0x2
   62af2:	mov    WORD PTR [rax+0x1e66],r9w
   62afa:	mov    WORD PTR [rax+0x1eb0],r12w
   62b02:	mov    WORD PTR [rax+0x1ea2],r12w
   62b0a:	mov    WORD PTR [rax+0x1e94],r12w
   62b12:	mov    WORD PTR [rax+0x1e86],r12w
   62b1a:	mov    r12d,DWORD PTR [rsp+0x10c]
   62b22:	mov    WORD PTR [rax+0x1eae],r11w
   62b2a:	add    r15d,r12d
   62b2d:	mov    WORD PTR [rax+0x1ea0],r11w
   62b35:	lea    r15d,[r15+r13*2+0x2]
   62b3a:	mov    WORD PTR [rax+0x1e92],r11w
   62b42:	sar    r15d,0x2
   62b46:	mov    WORD PTR [rax+0x1e84],r11w
   62b4e:	mov    WORD PTR [rax+0x1eb2],r15w
   62b56:	mov    WORD PTR [rax+0x1ea4],r15w
   62b5e:	mov    WORD PTR [rax+0x1e96],r15w
   62b66:	mov    r15d,DWORD PTR [rsp+0x110]
   62b6e:	mov    WORD PTR [rax+0x1e76],r11w
   62b76:	add    r13d,r15d
   62b79:	lea    r13d,[r13+r12*2+0x2]
   62b7e:	sar    r13d,0x2
   62b82:	mov    WORD PTR [rax+0x1eb4],r13w
   62b8a:	mov    WORD PTR [rax+0x1ea6],r13w
   62b92:	lea    r13d,[r15+r15*2]
   62b96:	lea    r12d,[r12+r13*1+0x2]
   62b9b:	sar    r12d,0x2
   62b9f:	mov    WORD PTR [rax+0x1eb6],r12w
   62ba7:	mov    r13d,DWORD PTR [rsp+0xd8]
   62baf:	mov    r12d,DWORD PTR [rsp+0x8]
   62bb4:	lea    r12d,[r12+r13*1+0x1]
   62bb9:	sar    r12d,1
   62bbc:	mov    WORD PTR [rax+0x2038],r12w
   62bc4:	mov    r12d,DWORD PTR [rsp+0xdc]
   62bcc:	lea    r12d,[r12+r13*1+0x1]
   62bd1:	mov    r13d,DWORD PTR [rsp+0xe0]
   62bd9:	sar    r12d,1
   62bdc:	mov    WORD PTR [rax+0x2058],r12w
   62be4:	mov    WORD PTR [rax+0x203a],r12w
   62bec:	mov    r12d,DWORD PTR [rsp+0xdc]
   62bf4:	lea    r12d,[r12+r13*1+0x1]
   62bf9:	sar    r12d,1
   62bfc:	mov    WORD PTR [rax+0x2078],r12w
   62c04:	mov    WORD PTR [rax+0x205a],r12w
   62c0c:	mov    WORD PTR [rax+0x203c],r12w
   62c14:	mov    r12d,r13d
   62c17:	mov    r13d,DWORD PTR [rsp+0xe4]
   62c1f:	lea    r12d,[r12+r13*1+0x1]
   62c24:	sar    r12d,1
   62c27:	mov    WORD PTR [rax+0x2098],r12w
   62c2f:	mov    WORD PTR [rax+0x207a],r12w
   62c37:	mov    WORD PTR [rax+0x205c],r12w
   62c3f:	mov    WORD PTR [rax+0x203e],r12w
   62c47:	mov    r12d,r13d
   62c4a:	mov    r13d,DWORD PTR [rsp+0xe8]
   62c52:	lea    r12d,[r12+r13*1+0x1]
   62c57:	sar    r12d,1
   62c5a:	mov    WORD PTR [rax+0x209a],r12w
   62c62:	mov    WORD PTR [rax+0x207c],r12w
   62c6a:	mov    WORD PTR [rax+0x205e],r12w
   62c72:	mov    WORD PTR [rax+0x2040],r12w
   62c7a:	mov    r12d,r13d
   62c7d:	mov    r13d,DWORD PTR [rsp+0xec]
   62c85:	lea    r12d,[r12+r13*1+0x1]
   62c8a:	sar    r12d,1
   62c8d:	mov    WORD PTR [rax+0x209c],r12w
   62c95:	mov    WORD PTR [rax+0x207e],r12w
   62c9d:	mov    WORD PTR [rax+0x2060],r12w
   62ca5:	mov    WORD PTR [rax+0x2042],r12w
   62cad:	mov    r12d,r13d
   62cb0:	mov    r13d,DWORD PTR [rsp+0xf0]
   62cb8:	lea    r12d,[r12+r13*1+0x1]
   62cbd:	sar    r12d,1
   62cc0:	mov    WORD PTR [rax+0x209e],r12w
   62cc8:	mov    WORD PTR [rax+0x2080],r12w
   62cd0:	mov    WORD PTR [rax+0x2062],r12w
   62cd8:	mov    WORD PTR [rax+0x2044],r12w
   62ce0:	mov    r12d,r13d
   62ce3:	mov    r13d,DWORD PTR [rsp+0xf4]
   62ceb:	lea    r12d,[r12+r13*1+0x1]
   62cf0:	sar    r12d,1
   62cf3:	mov    WORD PTR [rax+0x20a0],r12w
   62cfb:	mov    r15d,DWORD PTR [rsp+0x20]
   62d00:	mov    WORD PTR [rax+0x2082],r12w
   62d08:	mov    WORD PTR [rax+0x2064],r12w
   62d10:	mov    WORD PTR [rax+0x2046],r12w
   62d18:	mov    r12d,r13d
   62d1b:	mov    r13d,DWORD PTR [rsp+0xf8]
   62d23:	mov    WORD PTR [rax+0x2088],r15w
   62d2b:	lea    r12d,[r12+r13*1+0x1]
   62d30:	mov    WORD PTR [rax+0x206a],r15w
   62d38:	sar    r12d,1
   62d3b:	mov    WORD PTR [rax+0x204c],r15w
   62d43:	mov    WORD PTR [rax+0x20a2],r12w
   62d4b:	mov    WORD PTR [rax+0x2084],r12w
   62d53:	mov    WORD PTR [rax+0x2066],r12w
   62d5b:	mov    r12d,r13d
   62d5e:	mov    r13d,DWORD PTR [rsp+0xfc]
   62d66:	mov    WORD PTR [rax+0x20a8],r10w
   62d6e:	lea    r12d,[r12+r13*1+0x1]
   62d73:	mov    WORD PTR [rax+0x208a],r10w
   62d7b:	sar    r12d,1
   62d7e:	mov    WORD PTR [rax+0x206c],r10w
   62d86:	mov    WORD PTR [rax+0x20a4],r12w
   62d8e:	mov    WORD PTR [rax+0x2086],r12w
   62d96:	mov    r12d,r13d
   62d99:	mov    r13d,DWORD PTR [rsp+0x100]
   62da1:	mov    WORD PTR [rax+0x204e],r10w
   62da9:	lea    r12d,[r12+r13*1+0x1]
   62dae:	mov    r13d,DWORD PTR [rsp+0x18]
   62db3:	mov    WORD PTR [rax+0x20aa],r8w
   62dbb:	sar    r12d,1
   62dbe:	mov    WORD PTR [rax+0x208c],r8w
   62dc6:	mov    WORD PTR [rax+0x20a6],r12w
   62dce:	movzx  r12d,WORD PTR [rsp+0x10]
   62dd4:	mov    WORD PTR [rax+0x2068],r13w
   62ddc:	mov    WORD PTR [rax+0x2048],r12w
   62de4:	mov    WORD PTR [rax+0x204a],r13w
   62dec:	mov    WORD PTR [rax+0x206e],r8w
   62df4:	mov    WORD PTR [rax+0x2050],r8w
   62dfc:	mov    WORD PTR [rax+0x20ac],di
   62e03:	mov    WORD PTR [rax+0x208e],di
   62e0a:	mov    WORD PTR [rax+0x2070],di
   62e11:	mov    WORD PTR [rax+0x2052],di
   62e18:	mov    WORD PTR [rax+0x20ae],cx
   62e1f:	mov    WORD PTR [rax+0x2090],cx
   62e26:	mov    WORD PTR [rax+0x2072],cx
   62e2d:	mov    WORD PTR [rax+0x2054],cx
   62e34:	mov    WORD PTR [rax+0x20b0],dx
   62e3b:	mov    WORD PTR [rax+0x2092],dx
   62e42:	mov    WORD PTR [rax+0x2074],dx
   62e49:	mov    WORD PTR [rax+0x2056],dx
   62e50:	mov    WORD PTR [rax+0x20b2],si
   62e57:	mov    WORD PTR [rax+0x2094],si
   62e5e:	mov    WORD PTR [rax+0x2076],si
   62e65:	mov    WORD PTR [rax+0x20b4],r9w
   62e6d:	mov    WORD PTR [rax+0x2096],r9w
   62e75:	mov    WORD PTR [rax+0x20b6],r11w
   62e7d:	jmp    623b5 <intrapred_luma8x8+0x705>
   62e82:	mov    eax,DWORD PTR [rsp+0xd4]
   62e89:	mov    edi,DWORD PTR [rsp+0x114]
   62e90:	mov    DWORD PTR [rsp+0x8],eax
   62e94:	mov    rax,QWORD PTR [rip+0x25715]        # 885b0 <img>
   62e9b:	mov    DWORD PTR [rsp+0xc],edi
   62e9f:	test   r12d,r12d
   62ea2:	jne    63706 <intrapred_luma8x8+0x1a56>
   62ea8:	test   r8b,r8b
   62eab:	je     63706 <intrapred_luma8x8+0x1a56>
   62eb1:	mov    ecx,DWORD PTR [rsp+0x11c]
   62eb8:	add    edi,DWORD PTR [rsp+0x118]
   62ebf:	add    ecx,edi
   62ec1:	add    ecx,DWORD PTR [rsp+0x120]
   62ec8:	add    ecx,DWORD PTR [rsp+0x124]
   62ecf:	add    ecx,DWORD PTR [rsp+0x128]
   62ed6:	add    ecx,DWORD PTR [rsp+0x12c]
   62edd:	add    ecx,DWORD PTR [rsp+0x130]
   62ee4:	add    ecx,0x4
   62ee7:	sar    ecx,0x3
   62eea:	jmp    622df <intrapred_luma8x8+0x62f>
   62eef:	add    edi,DWORD PTR [rsp+0xd0]
   62ef6:	mov    ebx,DWORD PTR [rsp+0x10]
   62efa:	mov    WORD PTR [rax+0x1f2a],r13w
   62f02:	lea    r10d,[rdi+r15*2+0x2]
   62f07:	mov    DWORD PTR [rsp+0x4c],r13d
   62f0c:	movzx  r14d,WORD PTR [rsp+0x44]
   62f12:	mov    edi,r15d
   62f15:	sar    r10d,0x2
   62f19:	mov    WORD PTR [rax+0x1f18],r13w
   62f21:	mov    WORD PTR [rax+0x1f2c],bx
   62f28:	mov    WORD PTR [rax+0x1f1a],bx
   62f2f:	mov    WORD PTR [rax+0x1f08],bx
   62f36:	mov    WORD PTR [rax+0x1f28],r14w
   62f3e:	mov    WORD PTR [rax+0x1f2e],r8w
   62f46:	mov    WORD PTR [rax+0x1f1c],r8w
   62f4e:	mov    WORD PTR [rax+0x1f0a],r8w
   62f56:	mov    WORD PTR [rax+0x1ef8],r8w
   62f5e:	mov    WORD PTR [rax+0x1f30],si
   62f65:	mov    WORD PTR [rax+0x1f1e],si
   62f6c:	mov    WORD PTR [rax+0x1f0c],si
   62f73:	mov    WORD PTR [rax+0x1efa],si
   62f7a:	mov    WORD PTR [rax+0x1ee8],si
   62f81:	mov    WORD PTR [rax+0x1f32],cx
   62f88:	mov    WORD PTR [rax+0x1f20],cx
   62f8f:	mov    WORD PTR [rax+0x1f0e],cx
   62f96:	mov    WORD PTR [rax+0x1efc],cx
   62f9d:	mov    WORD PTR [rax+0x1eea],cx
   62fa4:	mov    WORD PTR [rax+0x1ed8],cx
   62fab:	mov    WORD PTR [rax+0x1f34],r10w
   62fb3:	mov    WORD PTR [rax+0x1f22],r10w
   62fbb:	mov    WORD PTR [rax+0x1f10],r10w
   62fc3:	mov    WORD PTR [rax+0x1efe],r10w
   62fcb:	mov    WORD PTR [rax+0x1eec],r10w
   62fd3:	mov    WORD PTR [rax+0x1eda],r10w
   62fdb:	mov    WORD PTR [rax+0x1ec8],r10w
   62fe3:	mov    r14d,DWORD PTR [rsp+0x8]
   62fe8:	mov    ebx,DWORD PTR [rsp+0xd0]
   62fef:	add    edi,r14d
   62ff2:	lea    edi,[rdi+rbx*2+0x2]
   62ff6:	add    ebx,DWORD PTR [rsp+0xd8]
   62ffd:	lea    r9d,[rbx+r14*2+0x2]
   63002:	add    r14d,DWORD PTR [rsp+0xdc]
   6300a:	mov    ebx,DWORD PTR [rsp+0xe0]
   63011:	sar    edi,0x2
   63014:	mov    r11d,r14d
   63017:	mov    r14d,DWORD PTR [rsp+0xd8]
   6301f:	sar    r9d,0x2
   63023:	mov    WORD PTR [rax+0x1f36],di
   6302a:	mov    WORD PTR [rax+0x1f24],di
   63031:	lea    r11d,[r11+r14*2+0x2]
   63036:	add    ebx,r14d
   63039:	mov    r14d,DWORD PTR [rsp+0xdc]
   63041:	mov    WORD PTR [rax+0x1f12],di
   63048:	sar    r11d,0x2
   6304c:	mov    WORD PTR [rax+0x1f00],di
   63053:	lea    ebx,[rbx+r14*2+0x2]
   63058:	mov    WORD PTR [rax+0x1eee],di
   6305f:	sar    ebx,0x2
   63062:	mov    WORD PTR [rax+0x1edc],di
   63069:	mov    WORD PTR [rax+0x1eca],di
   63070:	mov    WORD PTR [rax+0x1eb8],di
   63077:	mov    WORD PTR [rax+0x1f26],r9w
   6307f:	mov    WORD PTR [rax+0x1f14],r9w
   63087:	mov    WORD PTR [rax+0x1f02],r9w
   6308f:	mov    WORD PTR [rax+0x1ef0],r9w
   63097:	mov    WORD PTR [rax+0x1ede],r9w
   6309f:	mov    WORD PTR [rax+0x1ecc],r9w
   630a7:	mov    WORD PTR [rax+0x1eba],r9w
   630af:	mov    WORD PTR [rax+0x1f16],r11w
   630b7:	mov    WORD PTR [rax+0x1f04],r11w
   630bf:	mov    WORD PTR [rax+0x1ef2],r11w
   630c7:	mov    WORD PTR [rax+0x1ee0],r11w
   630cf:	mov    WORD PTR [rax+0x1ece],r11w
   630d7:	mov    WORD PTR [rax+0x1ebc],r11w
   630df:	mov    WORD PTR [rax+0x1f06],bx
   630e6:	mov    WORD PTR [rax+0x1ef4],bx
   630ed:	mov    WORD PTR [rax+0x1ee2],bx
   630f4:	mov    WORD PTR [rax+0x1ed0],bx
   630fb:	mov    WORD PTR [rax+0x1ebe],bx
   63102:	add    r14d,DWORD PTR [rsp+0xe4]
   6310a:	mov    r12d,r14d
   6310d:	mov    r14d,DWORD PTR [rsp+0xe0]
   63115:	mov    r15d,DWORD PTR [rsp+0xe8]
   6311d:	lea    r12d,[r12+r14*2+0x2]
   63122:	add    r14d,DWORD PTR [rsp+0xe8]
   6312a:	mov    r13d,r14d
   6312d:	mov    r14d,DWORD PTR [rsp+0xe4]
   63135:	sar    r12d,0x2
   63139:	mov    WORD PTR [rax+0x1ef6],r12w
   63141:	lea    r13d,[r13+r14*2+0x2]
   63146:	mov    WORD PTR [rax+0x1ee4],r12w
   6314e:	mov    r14d,r13d
   63151:	mov    r13d,DWORD PTR [rsp+0xe4]
   63159:	add    r13d,DWORD PTR [rsp+0xec]
   63161:	mov    WORD PTR [rax+0x1ed2],r12w
   63169:	lea    r13d,[r13+r15*2+0x2]
   6316e:	mov    r15d,DWORD PTR [rsp+0xec]
   63176:	sar    r14d,0x2
   6317a:	mov    WORD PTR [rax+0x1ec0],r12w
   63182:	sar    r13d,0x2
   63186:	mov    WORD PTR [rax+0x1ee6],r14w
   6318e:	mov    WORD PTR [rax+0x1ed6],r13w
   63196:	mov    DWORD PTR [rsp+0x48],r13d
   6319b:	mov    WORD PTR [rax+0x1ec4],r13w
   631a3:	mov    r13d,DWORD PTR [rsp+0xe8]
   631ab:	add    r13d,DWORD PTR [rsp+0xf0]
   631b3:	mov    WORD PTR [rax+0x1ed4],r14w
   631bb:	lea    r13d,[r13+r15*2+0x2]
   631c0:	mov    r15d,DWORD PTR [rsp+0xd0]
   631c8:	mov    WORD PTR [rax+0x1ec2],r14w
   631d0:	sar    r13d,0x2
   631d4:	mov    DWORD PTR [rsp+0x6c],r13d
   631d9:	mov    WORD PTR [rax+0x1ec6],r13w
   631e1:	mov    r13d,DWORD PTR [rsp+0x8]
   631e6:	lea    r13d,[r13+r15*1+0x1]
   631eb:	mov    r15d,DWORD PTR [rsp+0xd8]
   631f3:	sar    r13d,1
   631f6:	mov    WORD PTR [rax+0x1f9e],r13w
   631fe:	mov    WORD PTR [rax+0x1f7c],r13w
   63206:	mov    WORD PTR [rax+0x1f5a],r13w
   6320e:	mov    WORD PTR [rax+0x1f38],r13w
   63216:	mov    r13d,DWORD PTR [rsp+0x8]
   6321b:	lea    r13d,[r13+r15*1+0x1]
   63220:	sar    r13d,1
   63223:	mov    WORD PTR [rax+0x1fa0],r13w
   6322b:	mov    WORD PTR [rax+0x1f7e],r13w
   63233:	mov    WORD PTR [rax+0x1f5c],r13w
   6323b:	mov    WORD PTR [rax+0x1f3a],r13w
   63243:	mov    r13d,DWORD PTR [rsp+0xdc]
   6324b:	mov    WORD PTR [rax+0x1fae],di
   63252:	lea    r13d,[r15+r13*1+0x1]
   63257:	mov    r15d,DWORD PTR [rsp+0xdc]
   6325f:	mov    WORD PTR [rax+0x1f8c],di
   63266:	sar    r13d,1
   63269:	mov    WORD PTR [rax+0x1fa2],r13w
   63271:	mov    WORD PTR [rax+0x1f80],r13w
   63279:	mov    WORD PTR [rax+0x1f5e],r13w
   63281:	mov    WORD PTR [rax+0x1f3c],r13w
   63289:	mov    r13d,DWORD PTR [rsp+0xe0]
   63291:	lea    r13d,[r15+r13*1+0x1]
   63296:	mov    r15d,DWORD PTR [rsp+0xe0]
   6329e:	sar    r13d,1
   632a1:	mov    WORD PTR [rax+0x1fa4],r13w
   632a9:	mov    WORD PTR [rax+0x1f82],r13w
   632b1:	mov    WORD PTR [rax+0x1f60],r13w
   632b9:	mov    WORD PTR [rax+0x1f3e],r13w
   632c1:	mov    r13d,DWORD PTR [rsp+0xe4]
   632c9:	lea    r13d,[r15+r13*1+0x1]
   632ce:	mov    r15d,DWORD PTR [rsp+0xe4]
   632d6:	sar    r13d,1
   632d9:	mov    WORD PTR [rax+0x1fa6],r13w
   632e1:	mov    WORD PTR [rax+0x1f84],r13w
   632e9:	mov    WORD PTR [rax+0x1f62],r13w
   632f1:	mov    WORD PTR [rax+0x1f40],r13w
   632f9:	mov    r13d,DWORD PTR [rsp+0xe8]
   63301:	lea    r13d,[r15+r13*1+0x1]
   63306:	mov    r15d,DWORD PTR [rsp+0xe8]
   6330e:	sar    r13d,1
   63311:	mov    WORD PTR [rax+0x1f86],r13w
   63319:	mov    WORD PTR [rax+0x1f64],r13w
   63321:	mov    WORD PTR [rax+0x1f42],r13w
   63329:	mov    r13d,DWORD PTR [rsp+0xec]
   63331:	lea    r13d,[r15+r13*1+0x1]
   63336:	mov    r15d,DWORD PTR [rsp+0xec]
   6333e:	sar    r13d,1
   63341:	mov    WORD PTR [rax+0x1f66],r13w
   63349:	mov    WORD PTR [rax+0x1f44],r13w
   63351:	mov    r13d,DWORD PTR [rsp+0xf0]
   63359:	lea    r13d,[r15+r13*1+0x1]
   6335e:	sar    r13d,1
   63361:	mov    WORD PTR [rax+0x1f46],r13w
   63369:	mov    WORD PTR [rax+0x1f6a],di
   63370:	mov    r13d,DWORD PTR [rsp+0x48]
   63375:	movzx  r15d,WORD PTR [rsp+0x6c]
   6337b:	mov    WORD PTR [rax+0x1f48],di
   63382:	mov    WORD PTR [rax+0x1f76],r13w
   6338a:	mov    WORD PTR [rax+0x1f54],r13w
   63392:	mov    WORD PTR [rax+0x1f56],r15w
   6339a:	mov    WORD PTR [rax+0x1fb0],r9w
   633a2:	mov    WORD PTR [rax+0x1f8e],r9w
   633aa:	mov    WORD PTR [rax+0x1f6c],r9w
   633b2:	mov    WORD PTR [rax+0x1f4a],r9w
   633ba:	mov    WORD PTR [rax+0x1fb2],r11w
   633c2:	mov    WORD PTR [rax+0x1f90],r11w
   633ca:	mov    WORD PTR [rax+0x1f6e],r11w
   633d2:	mov    WORD PTR [rax+0x1f4c],r11w
   633da:	mov    WORD PTR [rax+0x1fb4],bx
   633e1:	mov    WORD PTR [rax+0x1f92],bx
   633e8:	mov    WORD PTR [rax+0x1f70],bx
   633ef:	mov    WORD PTR [rax+0x1f4e],bx
   633f6:	mov    WORD PTR [rax+0x1fb6],r12w
   633fe:	mov    WORD PTR [rax+0x1f94],r12w
   63406:	mov    WORD PTR [rax+0x1f72],r12w
   6340e:	mov    WORD PTR [rax+0x1f50],r12w
   63416:	mov    WORD PTR [rax+0x1f96],r14w
   6341e:	mov    WORD PTR [rax+0x1f74],r14w
   63426:	mov    WORD PTR [rax+0x1f52],r14w
   6342e:	mov    WORD PTR [rax+0x1f9c],r10w
   63436:	mov    WORD PTR [rax+0x1f7a],r10w
   6343e:	mov    WORD PTR [rax+0x1f58],r10w
   63446:	mov    WORD PTR [rax+0x1fac],cx
   6344d:	mov    WORD PTR [rax+0x1f8a],cx
   63454:	mov    WORD PTR [rax+0x1f68],cx
   6345b:	mov    WORD PTR [rax+0x1f9a],si
   63462:	mov    WORD PTR [rax+0x1f78],si
   63469:	movzx  r13d,WORD PTR [rsp+0x10]
   6346f:	movzx  r15d,WORD PTR [rsp+0x4c]
   63475:	mov    WORD PTR [rax+0x1faa],r8w
   6347d:	mov    WORD PTR [rax+0x1f98],r13w
   63485:	mov    r13d,DWORD PTR [rsp+0xc]
   6348a:	mov    WORD PTR [rax+0x1fa8],r15w
   63492:	mov    r15d,DWORD PTR [rsp+0xd0]
   6349a:	mov    WORD PTR [rax+0x1f88],r8w
   634a2:	lea    r13d,[r13+r15*1+0x1]
   634a7:	sar    r13d,1
   634aa:	mov    WORD PTR [rax+0x1ff4],r13w
   634b2:	mov    WORD PTR [rax+0x1fe0],r13w
   634ba:	mov    WORD PTR [rax+0x1fcc],r13w
   634c2:	mov    WORD PTR [rax+0x1fb8],r13w
   634ca:	mov    r13d,DWORD PTR [rsp+0x50]
   634cf:	mov    WORD PTR [rax+0x2004],r13w
   634d7:	mov    WORD PTR [rax+0x1ff0],r13w
   634df:	mov    WORD PTR [rax+0x1fdc],r13w
   634e7:	mov    WORD PTR [rax+0x1fc8],r13w
   634ef:	mov    r13d,DWORD PTR [rsp+0x54]
   634f4:	mov    WORD PTR [rax+0x2014],r13w
   634fc:	mov    WORD PTR [rax+0x2000],r13w
   63504:	mov    WORD PTR [rax+0x1fec],r13w
   6350c:	mov    WORD PTR [rax+0x1fd8],r13w
   63514:	mov    r13d,DWORD PTR [rsp+0x58]
   63519:	mov    WORD PTR [rax+0x2024],r13w
   63521:	mov    WORD PTR [rax+0x2010],r13w
   63529:	mov    WORD PTR [rax+0x1ffc],r13w
   63531:	mov    WORD PTR [rax+0x1fe8],r13w
   63539:	mov    r13d,DWORD PTR [rsp+0x5c]
   6353e:	mov    WORD PTR [rax+0x2034],r13w
   63546:	mov    WORD PTR [rax+0x2020],r13w
   6354e:	mov    WORD PTR [rax+0x200c],r13w
   63556:	mov    WORD PTR [rax+0x1ff8],r13w
   6355e:	mov    r13d,DWORD PTR [rsp+0x60]
   63563:	mov    WORD PTR [rax+0x1ff6],di
   6356a:	movzx  r15d,WORD PTR [rsp+0x68]
   63570:	mov    WORD PTR [rax+0x2030],r13w
   63578:	mov    WORD PTR [rax+0x201c],r13w
   63580:	mov    WORD PTR [rax+0x2008],r13w
   63588:	mov    r13d,DWORD PTR [rsp+0x64]
   6358d:	mov    WORD PTR [rax+0x1fe2],di
   63594:	mov    WORD PTR [rax+0x1fce],di
   6359b:	mov    WORD PTR [rax+0x1fba],di
   635a2:	mov    edi,DWORD PTR [rsp+0x10]
   635a6:	mov    WORD PTR [rax+0x202c],r13w
   635ae:	mov    WORD PTR [rax+0x2018],r13w
   635b6:	mov    WORD PTR [rax+0x2032],di
   635bd:	mov    WORD PTR [rax+0x201e],di
   635c4:	mov    WORD PTR [rax+0x2028],r15w
   635cc:	mov    WORD PTR [rax+0x2006],r10w
   635d4:	mov    WORD PTR [rax+0x1ff2],r10w
   635dc:	mov    WORD PTR [rax+0x1fde],r10w
   635e4:	mov    WORD PTR [rax+0x1fca],r10w
   635ec:	mov    WORD PTR [rax+0x2016],cx
   635f3:	mov    WORD PTR [rax+0x2002],cx
   635fa:	mov    WORD PTR [rax+0x1fee],cx
   63601:	mov    WORD PTR [rax+0x1fda],cx
   63608:	mov    WORD PTR [rax+0x2026],si
   6360f:	mov    WORD PTR [rax+0x2012],si
   63616:	mov    WORD PTR [rax+0x1ffe],si
   6361d:	mov    WORD PTR [rax+0x1fea],si
   63624:	mov    WORD PTR [rax+0x2036],r8w
   6362c:	mov    WORD PTR [rax+0x2022],r8w
   63634:	mov    WORD PTR [rax+0x200e],r8w
   6363c:	mov    WORD PTR [rax+0x1ffa],r8w
   63644:	mov    WORD PTR [rax+0x200a],di
   6364b:	movzx  edi,WORD PTR [rsp+0x44]
   63650:	mov    r13d,DWORD PTR [rsp+0x4c]
   63655:	mov    WORD PTR [rax+0x1fe4],r9w
   6365d:	mov    WORD PTR [rax+0x202a],di
   63664:	movzx  edi,WORD PTR [rsp+0x48]
   63669:	mov    WORD PTR [rax+0x202e],r13w
   63671:	mov    WORD PTR [rax+0x201a],r13w
   63679:	mov    WORD PTR [rax+0x1fd0],r9w
   63681:	mov    WORD PTR [rax+0x1fbc],r9w
   63689:	mov    WORD PTR [rax+0x1fe6],r11w
   63691:	mov    WORD PTR [rax+0x1fd2],r11w
   63699:	mov    WORD PTR [rax+0x1fbe],r11w
   636a1:	mov    WORD PTR [rax+0x1fd4],bx
   636a8:	mov    WORD PTR [rax+0x1fc0],bx
   636af:	mov    WORD PTR [rax+0x1fd6],r12w
   636b7:	mov    WORD PTR [rax+0x1fc2],r12w
   636bf:	mov    WORD PTR [rax+0x1fc4],r14w
   636c7:	mov    WORD PTR [rax+0x1fc6],di
   636ce:	jmp    624f5 <intrapred_luma8x8+0x845>
   636d3:	mov    ecx,0xffffffff
   636d8:	mov    WORD PTR [rax+0x1d38],cx
   636df:	jmp    623b5 <intrapred_luma8x8+0x705>
   636e4:	movsxd rsi,DWORD PTR [rsp+0x74]
   636e9:	mov    rax,QWORD PTR [rdx+0x11868]
   636f0:	mov    r12d,DWORD PTR [rax+rsi*4]
   636f4:	test   r12d,r12d
   636f7:	setne  r9b
   636fb:	mov    ebp,r9d
   636fe:	and    ebp,r8d
   63701:	jmp    61e57 <intrapred_luma8x8+0x1a7>
   63706:	test   ebx,ebx
   63708:	jne    63773 <intrapred_luma8x8+0x1ac3>
   6370a:	test   r9b,r9b
   6370d:	je     63773 <intrapred_luma8x8+0x1ac3>
   6370f:	mov    ecx,DWORD PTR [rsp+0x8]
   63713:	add    ecx,DWORD PTR [rsp+0xd8]
   6371a:	add    ecx,DWORD PTR [rsp+0xdc]
   63721:	add    ecx,DWORD PTR [rsp+0xe0]
   63728:	add    ecx,DWORD PTR [rsp+0xe4]
   6372f:	add    ecx,DWORD PTR [rsp+0xe8]
   63736:	add    ecx,DWORD PTR [rsp+0xec]
   6373d:	add    ecx,DWORD PTR [rsp+0xf0]
   63744:	add    ecx,0x4
   63747:	sar    ecx,0x3
   6374a:	jmp    622df <intrapred_luma8x8+0x62f>
   6374f:	mov    rax,QWORD PTR [rsp+0x20]
   63754:	xor    r14d,r14d
   63757:	mov    ebp,0x1
   6375c:	mov    r8d,0x1
   63762:	mov    r9d,0x1
   63768:	mov    DWORD PTR [rax],0x0
   6376e:	jmp    61ed0 <intrapred_luma8x8+0x220>
   63773:	mov    ecx,DWORD PTR [rax+0x11be8]
   63779:	jmp    622df <intrapred_luma8x8+0x62f>
   6377e:	call   4390 <__stack_chk_fail@plt>
   63783:	xor    ebp,ebp
   63785:	jmp    61ed0 <intrapred_luma8x8+0x220>
   6378a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000063790 <dct_luma8x8>:
   63790:	endbr64 
   63794:	push   r15
   63796:	push   r14
   63798:	push   r13
   6379a:	push   r12
   6379c:	push   rbp
   6379d:	push   rbx
   6379e:	sub    rsp,0x1d8
   637a5:	mov    r9,QWORD PTR [rip+0x24e04]        # 885b0 <img>
   637ac:	mov    QWORD PTR [rsp+0x10],rsi
   637b1:	mov    DWORD PTR [rsp+0x28],edx
   637b5:	mov    edx,edi
   637b7:	shr    edx,0x1f
   637ba:	mov    rax,QWORD PTR fs:0x28
   637c3:	mov    QWORD PTR [rsp+0x1c8],rax
   637cb:	xor    eax,eax
   637cd:	lea    eax,[rdi+rdx*1]
   637d0:	and    eax,0x1
   637d3:	sub    eax,edx
   637d5:	shl    eax,0x3
   637d8:	mov    DWORD PTR [rsp+0x8c],eax
   637df:	mov    eax,edx
   637e1:	add    eax,edi
   637e3:	movsxd rdi,edi
   637e6:	sar    eax,1
   637e8:	mov    QWORD PTR [rsp+0x98],rdi
   637f0:	shl    eax,0x3
   637f3:	mov    DWORD PTR [rsp+0x90],eax
   637fa:	lea    rax,[rdi*8+0x0]
   63802:	mov    QWORD PTR [rsp+0x68],rax
   63807:	mov    rax,QWORD PTR [r9+0x3738]
   6380e:	mov    rax,QWORD PTR [rax+rdi*8]
   63812:	mov    rax,QWORD PTR [rax]
   63815:	mov    rsi,QWORD PTR [rax]
   63818:	mov    rax,QWORD PTR [rax+0x8]
   6381c:	mov    QWORD PTR [rsp+0x58],rax
   63821:	movsxd rax,DWORD PTR [r9+0xc]
   63825:	mov    QWORD PTR [rsp+0x50],rsi
   6382a:	imul   rax,rax,0x278
   63831:	add    rax,QWORD PTR [r9+0x3758]
   63838:	mov    QWORD PTR [rsp+0x18],rax
   6383d:	mov    eax,DWORD PTR [r9+0x11bdc]
   63844:	add    eax,DWORD PTR [r9+0x28]
   63848:	mov    DWORD PTR [rsp+0x64],eax
   6384c:	jne    64360 <dct_luma8x8+0xbd0>
   63852:	mov    eax,DWORD PTR [r9+0x11c00]
   63859:	mov    DWORD PTR [rsp+0x30],0x0
   63861:	mov    DWORD PTR [rsp+0x4c],0x0
   63869:	mov    DWORD PTR [rsp+0x8],eax
   6386d:	mov    DWORD PTR [rsp+0x80],0x0
   63878:	mov    DWORD PTR [rsp+0x60],0x10
   63880:	cmp    eax,0x1
   63883:	je     643c2 <dct_luma8x8+0xc32>
   63889:	mov    DWORD PTR [rsp+0x88],0x20
   63894:	mov    DWORD PTR [rsp+0x84],0x6
   6389f:	lea    r15,[r9+0x3338]
   638a6:	lea    r13,[rsp+0xc0]
   638ae:	mov    QWORD PTR [rsp+0x40],r9
   638b3:	lea    rax,[rsp+0xe0]
   638bb:	mov    QWORD PTR [rsp+0x20],r15
   638c0:	mov    r11,r13
   638c3:	mov    rcx,r15
   638c6:	mov    QWORD PTR [rsp+0x8],rax
   638cb:	mov    QWORD PTR [rsp+0x38],r13
   638d0:	mov    r13d,DWORD PTR [rcx]
   638d3:	mov    edx,DWORD PTR [rcx+0x1c0]
   638d9:	mov    ebx,DWORD PTR [rcx+0x100]
   638df:	mov    edi,DWORD PTR [rcx+0xc0]
   638e5:	mov    r12d,DWORD PTR [rcx+0x180]
   638ec:	mov    ebp,DWORD PTR [rcx+0x140]
   638f2:	add    edx,r13d
   638f5:	mov    eax,DWORD PTR [rcx+0x40]
   638f8:	sub    r13d,DWORD PTR [rcx+0x1c0]
   638ff:	lea    r15d,[rdi+rbx*1]
   63903:	sub    edi,ebx
   63905:	mov    esi,DWORD PTR [rcx+0x80]
   6390b:	mov    ebx,r13d
   6390e:	lea    r9d,[rdx+r15*1]
   63912:	sub    edx,r15d
   63915:	lea    r8d,[rax+r12*1]
   63919:	sar    ebx,1
   6391b:	sub    eax,r12d
   6391e:	lea    r14d,[rsi+rbp*1]
   63922:	sub    esi,ebp
   63924:	add    ebx,r13d
   63927:	lea    ebp,[rax+rsi*1]
   6392a:	mov    r12d,esi
   6392d:	lea    r10d,[r8+r14*1]
   63931:	sub    r8d,r14d
   63934:	add    ebx,ebp
   63936:	sar    r12d,1
   63939:	mov    ebp,r13d
   6393c:	add    r13d,edi
   6393f:	sub    ebp,edi
   63941:	add    r12d,esi
   63944:	sub    ebp,r12d
   63947:	mov    r12d,eax
   6394a:	sar    r12d,1
   6394d:	add    r12d,eax
   63950:	sub    eax,esi
   63952:	sub    r13d,r12d
   63955:	mov    r12d,edi
   63958:	sar    r12d,1
   6395b:	add    edi,r12d
   6395e:	add    edi,eax
   63960:	lea    eax,[r9+r10*1]
   63964:	sub    r9d,r10d
   63967:	mov    DWORD PTR [r11],eax
   6396a:	mov    eax,r8d
   6396d:	sar    eax,1
   6396f:	mov    DWORD PTR [r11+0x80],r9d
   63976:	add    eax,edx
   63978:	sar    edx,1
   6397a:	mov    DWORD PTR [r11+0x40],eax
   6397e:	mov    eax,edi
   63980:	sub    edx,r8d
   63983:	sar    eax,0x2
   63986:	mov    DWORD PTR [r11+0xc0],edx
   6398d:	add    eax,ebx
   6398f:	mov    DWORD PTR [r11+0x20],eax
   63993:	mov    eax,r13d
   63996:	sar    eax,0x2
   63999:	add    eax,ebp
   6399b:	sar    ebp,0x2
   6399e:	sub    r13d,ebp
   639a1:	sar    ebx,0x2
   639a4:	mov    DWORD PTR [r11+0x60],eax
   639a8:	add    rcx,0x4
   639ac:	sub    ebx,edi
   639ae:	mov    DWORD PTR [r11+0xa0],r13d
   639b5:	add    r11,0x4
   639b9:	mov    DWORD PTR [r11+0xdc],ebx
   639c0:	cmp    QWORD PTR [rsp+0x8],r11
   639c5:	jne    638d0 <dct_luma8x8+0x140>
   639cb:	mov    r13,QWORD PTR [rsp+0x38]
   639d0:	mov    r9,QWORD PTR [rsp+0x40]
   639d5:	mov    r15,QWORD PTR [rsp+0x20]
   639da:	lea    rax,[r13+0x100]
   639e1:	mov    QWORD PTR [rsp+0x20],r9
   639e6:	mov    QWORD PTR [rsp+0x8],rax
   639eb:	nop    DWORD PTR [rax+rax*1+0x0]
   639f0:	mov    ebp,DWORD PTR [r13+0x0]
   639f4:	mov    eax,DWORD PTR [r13+0x1c]
   639f8:	mov    r10d,DWORD PTR [r13+0x10]
   639fc:	mov    esi,DWORD PTR [r13+0xc]
   63a00:	mov    ebx,DWORD PTR [r13+0x18]
   63a04:	mov    r11d,DWORD PTR [r13+0x14]
   63a08:	add    eax,ebp
   63a0a:	mov    edx,DWORD PTR [r13+0x4]
   63a0e:	sub    ebp,DWORD PTR [r13+0x1c]
   63a12:	lea    r14d,[rsi+r10*1]
   63a16:	sub    esi,r10d
   63a19:	mov    ecx,DWORD PTR [r13+0x8]
   63a1d:	mov    r10d,ebp
   63a20:	lea    r8d,[rax+r14*1]
   63a24:	sub    eax,r14d
   63a27:	lea    edi,[rdx+rbx*1]
   63a2a:	sar    r10d,1
   63a2d:	sub    edx,ebx
   63a2f:	lea    r12d,[rcx+r11*1]
   63a33:	sub    ecx,r11d
   63a36:	add    r10d,ebp
   63a39:	lea    r11d,[rdx+rcx*1]
   63a3d:	mov    ebx,ecx
   63a3f:	lea    r9d,[rdi+r12*1]
   63a43:	sub    edi,r12d
   63a46:	add    r10d,r11d
   63a49:	sar    ebx,1
   63a4b:	mov    r11d,ebp
   63a4e:	add    ebp,esi
   63a50:	add    ebx,ecx
   63a52:	sub    r11d,esi
   63a55:	sub    r11d,ebx
   63a58:	mov    ebx,edx
   63a5a:	sar    ebx,1
   63a5c:	add    ebx,edx
   63a5e:	sub    edx,ecx
   63a60:	lea    ecx,[r8+r9*1]
   63a64:	sub    r8d,r9d
   63a67:	sub    ebp,ebx
   63a69:	mov    DWORD PTR [r15],ecx
   63a6c:	mov    ebx,esi
   63a6e:	mov    ecx,edi
   63a70:	sar    ebx,1
   63a72:	sar    ecx,1
   63a74:	mov    DWORD PTR [r15+0x10],r8d
   63a78:	add    ecx,eax
   63a7a:	add    esi,ebx
   63a7c:	sar    eax,1
   63a7e:	add    edx,esi
   63a80:	sub    eax,edi
   63a82:	mov    DWORD PTR [r15+0x8],ecx
   63a86:	mov    DWORD PTR [r15+0x18],eax
   63a8a:	mov    eax,edx
   63a8c:	sar    eax,0x2
   63a8f:	add    eax,r10d
   63a92:	mov    DWORD PTR [r15+0x4],eax
   63a96:	mov    eax,ebp
   63a98:	sar    eax,0x2
   63a9b:	add    eax,r11d
   63a9e:	sar    r11d,0x2
   63aa2:	sub    ebp,r11d
   63aa5:	sar    r10d,0x2
   63aa9:	mov    DWORD PTR [r15+0xc],eax
   63aad:	add    r13,0x20
   63ab1:	sub    r10d,edx
   63ab4:	mov    DWORD PTR [r15+0x14],ebp
   63ab8:	add    r15,0x40
   63abc:	mov    DWORD PTR [r15-0x24],r10d
   63ac0:	cmp    QWORD PTR [rsp+0x8],r13
   63ac5:	jne    639f0 <dct_luma8x8+0x260>
   63acb:	mov    DWORD PTR [rsp+0x8],0x0
   63ad3:	mov    r9,QWORD PTR [rsp+0x20]
   63ad8:	mov    BYTE PTR [rsp+0x97],0x1
   63ae0:	movsxd rax,DWORD PTR [rsp+0x30]
   63ae5:	mov    edx,0xffffffff
   63aea:	xor    r12d,r12d
   63aed:	xor    r11d,r11d
   63af0:	mov    r8d,0xffffffff
   63af6:	mov    r10d,edx
   63af9:	mov    QWORD PTR [rsp+0xb0],0xffffffffffffffff
   63b05:	shl    rax,0x3
   63b09:	mov    r15d,r8d
   63b0c:	mov    QWORD PTR [rsp+0xb8],0xffffffffffffffff
   63b18:	mov    QWORD PTR [rsp+0xa0],0x0
   63b24:	mov    QWORD PTR [rsp+0xa8],0x0
   63b30:	mov    DWORD PTR [rsp+0x20],0x0
   63b38:	mov    QWORD PTR [rsp+0x30],rax
   63b3d:	jmp    63d3f <dct_luma8x8+0x5af>
   63b42:	nop    WORD PTR [rax+rax*1+0x0]
   63b48:	mov    edi,DWORD PTR [r9+0x11ad0]
   63b4f:	test   edi,edi
   63b51:	je     63b66 <dct_luma8x8+0x3d6>
   63b53:	mov    rax,QWORD PTR [rsp+0x18]
   63b58:	mov    esi,DWORD PTR [rax+0x214]
   63b5e:	test   esi,esi
   63b60:	jne    63d55 <dct_luma8x8+0x5c5>
   63b66:	lea    rax,[rip+0x142f3]        # 77e60 <SNGL_SCAN8x8>
   63b6d:	movzx  ebx,BYTE PTR [rax+r12*2]
   63b72:	add    rax,0x1
   63b76:	movzx  r13d,BYTE PTR [rax+r12*2]
   63b7b:	mov    rax,rbx
   63b7e:	add    r10d,0x1
   63b82:	and    edx,0x3
   63b85:	add    r15d,0x1
   63b89:	shl    rax,0x4
   63b8d:	mov    DWORD PTR [rsp+rdx*4+0xb0],r10d
   63b95:	add    rax,r13
   63b98:	lea    rsi,[r9+rax*4]
   63b9c:	mov    eax,DWORD PTR [rsi+0x3338]
   63ba2:	mov    ecx,eax
   63ba4:	sar    ecx,0x1f
   63ba7:	mov    ebp,ecx
   63ba9:	xor    ebp,eax
   63bab:	sub    ebp,ecx
   63bad:	mov    ecx,DWORD PTR [rsp+0x8]
   63bb1:	test   ecx,ecx
   63bb3:	je     63d70 <dct_luma8x8+0x5e0>
   63bb9:	test   eax,eax
   63bbb:	je     63d21 <dct_luma8x8+0x591>
   63bc1:	mov    rdi,QWORD PTR [rsp+0x18]
   63bc6:	mov    rax,QWORD PTR [rsp+0x10]
   63bcb:	mov    r8d,DWORD PTR [rdi+0x23c]
   63bd2:	mov    eax,DWORD PTR [rax]
   63bd4:	test   r8d,r8d
   63bd7:	je     63dc0 <dct_luma8x8+0x630>
   63bdd:	mov    rcx,QWORD PTR [rip+0x249d4]        # 885b8 <input>
   63be4:	mov    edi,DWORD PTR [rcx+0x934]
   63bea:	test   edi,edi
   63bec:	jne    63dc0 <dct_luma8x8+0x630>
   63bf2:	cmp    ebp,0x1
   63bf5:	jle    63ee0 <dct_luma8x8+0x750>
   63bfb:	add    eax,0xf423f
   63c00:	mov    rdi,QWORD PTR [rsp+0x10]
   63c05:	movsxd r11,DWORD PTR [rsp+rdx*4+0xa0]
   63c0d:	mov    DWORD PTR [rsp+0x7c],r10d
   63c12:	mov    QWORD PTR [rsp+0x70],rdx
   63c17:	mov    DWORD PTR [rdi],eax
   63c19:	mov    rax,QWORD PTR [r9+0x3738]
   63c20:	mov    rdi,QWORD PTR [rsp+0x68]
   63c25:	mov    esi,DWORD PTR [rsi+0x3338]
   63c2b:	mov    DWORD PTR [rsp+0x78],r11d
   63c30:	mov    QWORD PTR [rsp+0x40],r11
   63c35:	mov    rax,QWORD PTR [rax+rdi*1]
   63c39:	mov    edi,ebp
   63c3b:	mov    rax,QWORD PTR [rax+rdx*8]
   63c3f:	mov    rax,QWORD PTR [rax]
   63c42:	lea    r9,[rax+r11*4]
   63c46:	mov    QWORD PTR [rsp+0x38],r9
   63c4b:	call   465a0 <sign>
   63c50:	mov    r9,QWORD PTR [rsp+0x38]
   63c55:	mov    rdi,QWORD PTR [rsp+0x68]
   63c5a:	mov    rdx,QWORD PTR [rsp+0x70]
   63c5f:	mov    ecx,DWORD PTR [rsp+0x78]
   63c63:	mov    r11,QWORD PTR [rsp+0x40]
   63c68:	mov    r10d,DWORD PTR [rsp+0x7c]
   63c6d:	mov    DWORD PTR [r9],eax
   63c70:	mov    rax,QWORD PTR [rip+0x24939]        # 885b0 <img>
   63c77:	add    ecx,0x1
   63c7a:	mov    DWORD PTR [rsp+rdx*4+0xb0],0xffffffff
   63c85:	mov    DWORD PTR [rsp+rdx*4+0xa0],ecx
   63c8c:	mov    rsi,QWORD PTR [rax+0x3738]
   63c93:	mov    rsi,QWORD PTR [rsi+rdi*1]
   63c97:	mov    rsi,QWORD PTR [rsi+rdx*8]
   63c9b:	mov    rsi,QWORD PTR [rsi+0x8]
   63c9f:	mov    DWORD PTR [rsi+r11*4],r10d
   63ca3:	mov    rdx,rbx
   63ca6:	mov    edi,ebp
   63ca8:	shl    rdx,0x4
   63cac:	lea    rdx,[rdx+r13*1+0xccc]
   63cb4:	mov    esi,DWORD PTR [rax+rdx*4+0x8]
   63cb8:	call   465a0 <sign>
   63cbd:	mov    r11d,DWORD PTR [rsp+0x8]
   63cc2:	mov    r9,QWORD PTR [rip+0x248e7]        # 885b0 <img>
   63cc9:	test   r11d,r11d
   63ccc:	jne    63d21 <dct_luma8x8+0x591>
   63cce:	mov    rsi,QWORD PTR [rsp+0x30]
   63cd3:	cmp    DWORD PTR [rsp+0x28],0x1
   63cd8:	lea    rdx,[rsi+rbx*1]
   63cdc:	lea    rcx,[r13+rdx*8+0x0]
   63ce1:	je     63e90 <dct_luma8x8+0x700>
   63ce7:	lea    rdx,[rip+0x73fd2]        # d7cc0 <InvLevelScale8x8Luma_Inter>
   63cee:	imul   eax,DWORD PTR [rdx+rcx*4]
   63cf2:	cmp    DWORD PTR [rsp+0x64],0x23
   63cf7:	mov    ebp,eax
   63cf9:	jle    63ec0 <dct_luma8x8+0x730>
   63cff:	movzx  ecx,BYTE PTR [rsp+0x80]
   63d07:	mov    r11d,0x1
   63d0d:	shl    ebp,cl
   63d0f:	nop
   63d10:	shl    rbx,0x4
   63d14:	lea    rax,[rbx+r13*1+0xccc]
   63d1c:	mov    DWORD PTR [r9+rax*4+0x8],ebp
   63d21:	add    r12,0x1
   63d25:	add    r14d,0x1
   63d29:	cmp    r12,0x40
   63d2d:	je     63f30 <dct_luma8x8+0x7a0>
   63d33:	and    r14d,0x3
   63d37:	mov    r10d,DWORD PTR [rsp+r14*4+0xb0]
   63d3f:	mov    r8d,DWORD PTR [r9+0x11afc]
   63d46:	mov    r14d,r12d
   63d49:	mov    edx,r12d
   63d4c:	test   r8d,r8d
   63d4f:	je     63b48 <dct_luma8x8+0x3b8>
   63d55:	lea    rax,[rip+0x14084]        # 77de0 <FIELD_SCAN8x8>
   63d5c:	movzx  ebx,BYTE PTR [rax+r12*2]
   63d61:	add    rax,0x1
   63d65:	movzx  r13d,BYTE PTR [rax+r12*2]
   63d6a:	jmp    63b7b <dct_luma8x8+0x3eb>
   63d6f:	nop
   63d70:	mov    rax,QWORD PTR [rsp+0x30]
   63d75:	add    rax,rbx
   63d78:	cmp    DWORD PTR [rsp+0x28],0x1
   63d7d:	lea    rcx,[r13+rax*8+0x0]
   63d82:	je     63e30 <dct_luma8x8+0x6a0>
   63d88:	lea    rax,[rip+0x75031]        # d8dc0 <LevelScale8x8Luma_Inter>
   63d8f:	imul   ebp,DWORD PTR [rax+rcx*4]
   63d93:	movsxd rax,DWORD PTR [rsp+0x4c]
   63d98:	lea    rax,[rbx+rax*8]
   63d9c:	lea    rcx,[r13+rax*8+0x0]
   63da1:	lea    rax,[rip+0x77e98]        # dbc40 <LevelOffset8x8Luma_Inter>
   63da8:	add    ebp,DWORD PTR [rax+rcx*4]
   63dab:	movzx  ecx,BYTE PTR [rsp+0x60]
   63db0:	sar    ebp,cl
   63db2:	test   ebp,ebp
   63db4:	jne    63bc1 <dct_luma8x8+0x431>
   63dba:	jmp    63d10 <dct_luma8x8+0x580>
   63dbf:	nop
   63dc0:	cmp    ebp,0x1
   63dc3:	jle    63e60 <dct_luma8x8+0x6d0>
   63dc9:	add    eax,0xf423f
   63dce:	mov    rdi,QWORD PTR [rsp+0x10]
   63dd3:	movsxd rdx,DWORD PTR [rsp+0x20]
   63dd8:	mov    DWORD PTR [rdi],eax
   63dda:	mov    rdi,QWORD PTR [rsp+0x50]
   63ddf:	mov    esi,DWORD PTR [rsi+0x3338]
   63de5:	mov    QWORD PTR [rsp+0x40],rdx
   63dea:	lea    rcx,[rdi+rdx*4]
   63dee:	mov    edi,ebp
   63df0:	mov    QWORD PTR [rsp+0x38],rcx
   63df5:	call   465a0 <sign>
   63dfa:	mov    rcx,QWORD PTR [rsp+0x38]
   63dff:	mov    rdi,QWORD PTR [rsp+0x58]
   63e04:	mov    rdx,QWORD PTR [rsp+0x40]
   63e09:	add    DWORD PTR [rsp+0x20],0x1
   63e0e:	mov    DWORD PTR [rcx],eax
   63e10:	mov    rax,QWORD PTR [rip+0x24799]        # 885b0 <img>
   63e17:	mov    DWORD PTR [rdi+rdx*4],r15d
   63e1b:	mov    r15d,0xffffffff
   63e21:	jmp    63ca3 <dct_luma8x8+0x513>
   63e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   63e30:	lea    rax,[rip+0x73889]        # d76c0 <LevelScale8x8Luma_Intra>
   63e37:	imul   ebp,DWORD PTR [rax+rcx*4]
   63e3b:	movsxd rax,DWORD PTR [rsp+0x4c]
   63e40:	lea    rax,[rbx+rax*8]
   63e44:	lea    rcx,[r13+rax*8+0x0]
   63e49:	lea    rax,[rip+0x76490]        # da2e0 <LevelOffset8x8Luma_Intra>
   63e50:	add    ebp,DWORD PTR [rax+rcx*4]
   63e53:	movzx  ecx,BYTE PTR [rsp+0x60]
   63e58:	sar    ebp,cl
   63e5a:	jmp    63db2 <dct_luma8x8+0x622>
   63e5f:	nop
   63e60:	mov    rdx,QWORD PTR [rip+0x24751]        # 885b8 <input>
   63e67:	lea    rdi,[rip+0x13ef2]        # 77d60 <COEFF_COST8x8>
   63e6e:	movsxd rcx,r15d
   63e71:	movsxd rdx,DWORD PTR [rdx+0x9a4]
   63e78:	shl    rdx,0x6
   63e7c:	add    rdx,rdi
   63e7f:	movzx  edx,BYTE PTR [rdx+rcx*1]
   63e83:	add    eax,edx
   63e85:	jmp    63dce <dct_luma8x8+0x63e>
   63e8a:	nop    WORD PTR [rax+rax*1+0x0]
   63e90:	lea    rdx,[rip+0x730a9]        # d6f40 <InvLevelScale8x8Luma_Intra>
   63e97:	imul   eax,DWORD PTR [rdx+rcx*4]
   63e9b:	cmp    DWORD PTR [rsp+0x64],0x23
   63ea0:	jle    63f08 <dct_luma8x8+0x778>
   63ea2:	movzx  ecx,BYTE PTR [rsp+0x80]
   63eaa:	mov    r11d,0x1
   63eb0:	shl    eax,cl
   63eb2:	mov    ebp,eax
   63eb4:	jmp    63d10 <dct_luma8x8+0x580>
   63eb9:	nop    DWORD PTR [rax+0x0]
   63ec0:	movzx  ecx,BYTE PTR [rsp+0x84]
   63ec8:	add    ebp,DWORD PTR [rsp+0x88]
   63ecf:	mov    r11d,0x1
   63ed5:	sar    ebp,cl
   63ed7:	jmp    63d10 <dct_luma8x8+0x580>
   63edc:	nop    DWORD PTR [rax+0x0]
   63ee0:	movsxd rcx,DWORD PTR [rcx+0x9a4]
   63ee7:	lea    r11,[rip+0x13e72]        # 77d60 <COEFF_COST8x8>
   63eee:	movsxd rdi,r10d
   63ef1:	shl    rcx,0x6
   63ef5:	add    rcx,r11
   63ef8:	movzx  ecx,BYTE PTR [rcx+rdi*1]
   63efc:	add    eax,ecx
   63efe:	jmp    63c00 <dct_luma8x8+0x470>
   63f03:	nop    DWORD PTR [rax+rax*1+0x0]
   63f08:	mov    esi,DWORD PTR [rsp+0x88]
   63f0f:	movzx  ecx,BYTE PTR [rsp+0x84]
   63f17:	mov    r11d,0x1
   63f1d:	lea    ebp,[rsi+rax*1]
   63f20:	sar    ebp,cl
   63f22:	jmp    63d10 <dct_luma8x8+0x580>
   63f27:	nop    WORD PTR [rax+rax*1+0x0]
   63f30:	mov    rax,QWORD PTR [rsp+0x18]
   63f35:	mov    DWORD PTR [rsp+0x10],r11d
   63f3a:	mov    edx,DWORD PTR [rax+0x23c]
   63f40:	test   edx,edx
   63f42:	je     64330 <dct_luma8x8+0xba0>
   63f48:	mov    rax,QWORD PTR [rip+0x24669]        # 885b8 <input>
   63f4f:	mov    eax,DWORD PTR [rax+0x934]
   63f55:	test   eax,eax
   63f57:	jne    64330 <dct_luma8x8+0xba0>
   63f5d:	mov    rax,QWORD PTR [r9+0x3738]
   63f64:	mov    rsi,QWORD PTR [rsp+0x98]
   63f6c:	mov    rdi,QWORD PTR [rax+rsi*8]
   63f70:	xor    eax,eax
   63f72:	lea    rsi,[rsp+0xa0]
   63f7a:	mov    rdx,QWORD PTR [rdi+rax*8]
   63f7e:	movsxd rcx,DWORD PTR [rsi+rax*4]
   63f82:	add    rax,0x1
   63f86:	mov    rdx,QWORD PTR [rdx]
   63f89:	mov    DWORD PTR [rdx+rcx*4],0x0
   63f90:	cmp    rax,0x4
   63f94:	jne    63f7a <dct_luma8x8+0x7ea>
   63f96:	cmp    BYTE PTR [rsp+0x97],0x0
   63f9e:	je     6434f <dct_luma8x8+0xbbf>
   63fa4:	lea    r10,[r9+0x3338]
   63fab:	lea    rsi,[rsp+0xc0]
   63fb3:	mov    QWORD PTR [rsp+0x18],r10
   63fb8:	lea    rax,[rsp+0xe0]
   63fc0:	mov    rdi,rsi
   63fc3:	mov    QWORD PTR [rsp+0x20],r10
   63fc8:	mov    r14,rax
   63fcb:	mov    QWORD PTR [rsp+0x28],rsi
   63fd0:	mov    eax,DWORD PTR [r10+0x100]
   63fd7:	mov    ecx,DWORD PTR [r10+0x80]
   63fde:	mov    esi,DWORD PTR [r10]
   63fe1:	mov    r11d,DWORD PTR [r10+0x140]
   63fe8:	mov    edx,ecx
   63fea:	mov    r13d,DWORD PTR [r10+0xc0]
   63ff1:	lea    ebx,[rsi+rax*1]
   63ff4:	sub    esi,eax
   63ff6:	mov    eax,DWORD PTR [r10+0x180]
   63ffd:	sar    edx,1
   63fff:	mov    r8d,r11d
   64002:	mov    r15d,r13d
   64005:	sub    edx,eax
   64007:	sar    eax,1
   64009:	sub    r8d,r13d
   6400c:	add    eax,ecx
   6400e:	mov    ecx,DWORD PTR [r10+0x1c0]
   64015:	lea    r12d,[rsi+rdx*1]
   64019:	sub    esi,edx
   6401b:	lea    ebp,[rbx+rax*1]
   6401e:	sub    ebx,eax
   64020:	sar    r15d,1
   64023:	mov    eax,ecx
   64025:	sub    r8d,ecx
   64028:	sar    eax,1
   6402a:	sub    r8d,eax
   6402d:	mov    eax,DWORD PTR [r10+0x40]
   64031:	lea    edx,[rcx+rax*1]
   64034:	sub    ecx,eax
   64036:	sub    edx,r13d
   64039:	add    ecx,r11d
   6403c:	sub    edx,r15d
   6403f:	mov    r15d,r11d
   64042:	add    r11d,r13d
   64045:	add    r11d,eax
   64048:	sar    eax,1
   6404a:	sar    r15d,1
   6404d:	add    eax,r11d
   64050:	add    ecx,r15d
   64053:	mov    r15d,eax
   64056:	sar    r15d,0x2
   6405a:	add    r15d,r8d
   6405d:	sar    r8d,0x2
   64061:	sub    eax,r8d
   64064:	mov    r8d,ecx
   64067:	sar    r8d,0x2
   6406b:	add    r8d,edx
   6406e:	sar    edx,0x2
   64071:	sub    edx,ecx
   64073:	lea    ecx,[rbp+rax*1+0x0]
   64077:	mov    DWORD PTR [rdi],ecx
   64079:	lea    ecx,[r12+rdx*1]
   6407d:	mov    DWORD PTR [rdi+0x20],ecx
   64080:	lea    ecx,[rsi+r8*1]
   64084:	sub    esi,r8d
   64087:	mov    DWORD PTR [rdi+0x40],ecx
   6408a:	lea    ecx,[rbx+r15*1]
   6408e:	sub    ebx,r15d
   64091:	sub    r12d,edx
   64094:	sub    ebp,eax
   64096:	mov    DWORD PTR [rdi+0x60],ecx
   64099:	add    rdi,0x4
   6409d:	add    r10,0x4
   640a1:	mov    DWORD PTR [rdi+0x7c],ebx
   640a4:	mov    DWORD PTR [rdi+0x9c],esi
   640aa:	mov    DWORD PTR [rdi+0xbc],r12d
   640b1:	mov    DWORD PTR [rdi+0xdc],ebp
   640b7:	cmp    r14,rdi
   640ba:	jne    63fd0 <dct_luma8x8+0x840>
   640c0:	mov    rsi,QWORD PTR [rsp+0x28]
   640c5:	mov    r14,QWORD PTR [rsp+0x20]
   640ca:	lea    r15,[rsi+0x100]
   640d1:	nop    DWORD PTR [rax+0x0]
   640d8:	mov    eax,DWORD PTR [rsi+0x10]
   640db:	mov    ecx,DWORD PTR [rsi+0x8]
   640de:	mov    r8d,DWORD PTR [rsi]
   640e1:	mov    edi,DWORD PTR [rsi+0x1c]
   640e4:	mov    edx,ecx
   640e6:	mov    r12d,DWORD PTR [rsi+0x4]
   640ea:	lea    r10d,[r8+rax*1]
   640ee:	sub    r8d,eax
   640f1:	mov    eax,DWORD PTR [rsi+0x18]
   640f4:	sar    edx,1
   640f6:	sub    edx,eax
   640f8:	sar    eax,1
   640fa:	add    eax,ecx
   640fc:	lea    ebx,[r8+rdx*1]
   64100:	sub    r8d,edx
   64103:	mov    edx,DWORD PTR [rsi+0xc]
   64106:	lea    r11d,[r10+rax*1]
   6410a:	sub    r10d,eax
   6410d:	mov    eax,DWORD PTR [rsi+0x14]
   64110:	mov    ecx,edi
   64112:	sar    ecx,1
   64114:	mov    r13d,edx
   64117:	mov    ebp,eax
   64119:	sar    r13d,1
   6411c:	sub    ebp,edx
   6411e:	sub    ebp,edi
   64120:	sub    ebp,ecx
   64122:	lea    ecx,[rdi+r12*1]
   64126:	sub    edi,r12d
   64129:	sub    ecx,edx
   6412b:	add    edx,eax
   6412d:	add    edi,eax
   6412f:	add    edx,r12d
   64132:	sar    r12d,1
   64135:	sub    ecx,r13d
   64138:	mov    r13d,eax
   6413b:	lea    eax,[rdx+r12*1]
   6413f:	sar    r13d,1
   64142:	mov    edx,eax
   64144:	add    edi,r13d
   64147:	sar    edx,0x2
   6414a:	add    edx,ebp
   6414c:	sar    ebp,0x2
   6414f:	sub    eax,ebp
   64151:	mov    ebp,edi
   64153:	sar    ebp,0x2
   64156:	add    ebp,ecx
   64158:	sar    ecx,0x2
   6415b:	sub    ecx,edi
   6415d:	lea    edi,[r11+rax*1]
   64161:	mov    DWORD PTR [r14],edi
   64164:	lea    edi,[rbx+rcx*1]
   64167:	sub    ebx,ecx
   64169:	mov    DWORD PTR [r14+0x4],edi
   6416d:	lea    edi,[r8+rbp*1]
   64171:	sub    r8d,ebp
   64174:	mov    DWORD PTR [r14+0x8],edi
   64178:	lea    edi,[r10+rdx*1]
   6417c:	sub    r10d,edx
   6417f:	sub    r11d,eax
   64182:	add    rsi,0x20
   64186:	mov    DWORD PTR [r14+0xc],edi
   6418a:	add    r14,0x40
   6418e:	mov    DWORD PTR [r14-0x30],r10d
   64192:	mov    DWORD PTR [r14-0x2c],r8d
   64196:	mov    DWORD PTR [r14-0x28],ebx
   6419a:	mov    DWORD PTR [r14-0x24],r11d
   6419e:	cmp    r15,rsi
   641a1:	jne    640d8 <dct_luma8x8+0x948>
   641a7:	mov    edi,DWORD PTR [r9+0x11c14]
   641ae:	mov    ebp,DWORD PTR [rsp+0x8c]
   641b5:	xor    r10d,r10d
   641b8:	lea    r11,[r9+0x3538]
   641bf:	mov    r8,QWORD PTR [rsp+0x18]
   641c4:	mov    ebx,DWORD PTR [rsp+0x8]
   641c8:	mov    r12d,DWORD PTR [rsp+0x90]
   641d0:	movsxd rsi,ebp
   641d3:	mov    rax,r8
   641d6:	xor    edx,edx
   641d8:	shl    rsi,0x4
   641dc:	jmp    64206 <dct_luma8x8+0xa76>
   641de:	xchg   ax,ax
   641e0:	lea    r13d,[rdx+r12*1]
   641e4:	movsxd r13,r13d
   641e7:	lea    r13,[r13+rsi*1+0x1898]
   641ef:	movzx  r13d,WORD PTR [r9+r13*2+0x8]
   641f5:	add    ecx,r13d
   641f8:	mov    DWORD PTR [rax],ecx
   641fa:	add    edx,0x1
   641fd:	add    rax,0x4
   64201:	cmp    edx,0x8
   64204:	je     64258 <dct_luma8x8+0xac8>
   64206:	movsxd rcx,DWORD PTR [rax]
   64209:	test   ebx,ebx
   6420b:	jne    641e0 <dct_luma8x8+0xa50>
   6420d:	test   edi,edi
   6420f:	jne    64320 <dct_luma8x8+0xb90>
   64215:	lea    r13d,[rdx+r12*1]
   64219:	movsxd r13,r13d
   6421c:	lea    r13,[r13+rsi*1+0x1898]
   64224:	movzx  r13d,WORD PTR [r9+r13*2+0x8]
   6422a:	shl    r13,0x6
   6422e:	lea    rcx,[r13+rcx*1+0x20]
   64233:	movsxd r13,DWORD PTR [r9+0x11bec]
   6423a:	sar    rcx,0x6
   6423e:	cmovs  rcx,r10
   64242:	cmp    rcx,r13
   64245:	cmovg  rcx,r13
   64249:	add    edx,0x1
   6424c:	add    rax,0x4
   64250:	mov    DWORD PTR [rax-0x4],ecx
   64253:	cmp    edx,0x8
   64256:	jne    64206 <dct_luma8x8+0xa76>
   64258:	add    r8,0x40
   6425c:	add    ebp,0x1
   6425f:	cmp    r11,r8
   64262:	jne    641d0 <dct_luma8x8+0xa40>
   64268:	test   edi,edi
   6426a:	jne    642ee <dct_luma8x8+0xb5e>
   64270:	mov    rdx,QWORD PTR [rip+0x26731]        # 8a9a8 <enc_picture>
   64277:	mov    eax,DWORD PTR [rsp+0x90]
   6427e:	lea    rsi,[r9+0x200]
   64285:	lea    rcx,[r9+0x220]
   6428c:	mov    r8d,DWORD PTR [rsp+0x8c]
   64294:	add    eax,DWORD PTR [r9+0x9c]
   6429b:	mov    rdx,QWORD PTR [rdx+0x1918]
   642a2:	add    r8d,DWORD PTR [r9+0x98]
   642a9:	cdqe   
   642ab:	movsxd r8,r8d
   642ae:	lea    rdi,[rdx+rax*8]
   642b2:	add    r8,r8
   642b5:	nop    DWORD PTR [rax]
   642b8:	mov    rdx,QWORD PTR [rdi]
   642bb:	lea    rax,[rsi-0x200]
   642c2:	add    rdx,r8
   642c5:	nop    DWORD PTR [rax]
   642c8:	mov    r9d,DWORD PTR [rax+0x3338]
   642cf:	add    rax,0x40
   642d3:	add    rdx,0x2
   642d7:	mov    WORD PTR [rdx-0x2],r9w
   642dc:	cmp    rsi,rax
   642df:	jne    642c8 <dct_luma8x8+0xb38>
   642e1:	add    rsi,0x4
   642e5:	add    rdi,0x8
   642e9:	cmp    rcx,rsi
   642ec:	jne    642b8 <dct_luma8x8+0xb28>
   642ee:	mov    rax,QWORD PTR [rsp+0x1c8]
   642f6:	xor    rax,QWORD PTR fs:0x28
   642ff:	jne    64418 <dct_luma8x8+0xc88>
   64305:	mov    eax,DWORD PTR [rsp+0x10]
   64309:	add    rsp,0x1d8
   64310:	pop    rbx
   64311:	pop    rbp
   64312:	pop    r12
   64314:	pop    r13
   64316:	pop    r14
   64318:	pop    r15
   6431a:	ret    
   6431b:	nop    DWORD PTR [rax+rax*1+0x0]
   64320:	add    ecx,0x20
   64323:	sar    ecx,0x6
   64326:	mov    DWORD PTR [rax],ecx
   64328:	jmp    641fa <dct_luma8x8+0xa6a>
   6432d:	nop    DWORD PTR [rax]
   64330:	movsxd rax,DWORD PTR [rsp+0x20]
   64335:	mov    rsi,QWORD PTR [rsp+0x50]
   6433a:	cmp    BYTE PTR [rsp+0x97],0x0
   64342:	mov    DWORD PTR [rsi+rax*4],0x0
   64349:	jne    63fa4 <dct_luma8x8+0x814>
   6434f:	lea    rax,[r9+0x3338]
   64356:	mov    QWORD PTR [rsp+0x18],rax
   6435b:	jmp    641a7 <dct_luma8x8+0xa17>
   64360:	movsxd rax,DWORD PTR [rsp+0x64]
   64365:	mov    rsi,rax
   64368:	imul   rax,rax,0x2aaaaaab
   6436f:	mov    edx,esi
   64371:	mov    edi,esi
   64373:	sar    edx,0x1f
   64376:	shr    rax,0x20
   6437a:	mov    ebx,eax
   6437c:	sub    ebx,edx
   6437e:	lea    eax,[rbx+rbx*2]
   64381:	mov    DWORD PTR [rsp+0x4c],ebx
   64385:	add    eax,eax
   64387:	sub    edi,eax
   64389:	lea    eax,[rbx+0x10]
   6438c:	mov    DWORD PTR [rsp+0x30],edi
   64390:	mov    DWORD PTR [rsp+0x60],eax
   64394:	cmp    esi,0x23
   64397:	jle    643e5 <dct_luma8x8+0xc55>
   64399:	mov    DWORD PTR [rsp+0x88],0x0
   643a4:	mov    eax,DWORD PTR [rsp+0x4c]
   643a8:	mov    DWORD PTR [rsp+0x84],0x0
   643b3:	sub    eax,0x6
   643b6:	mov    DWORD PTR [rsp+0x80],eax
   643bd:	jmp    6389f <dct_luma8x8+0x10f>
   643c2:	mov    BYTE PTR [rsp+0x97],0x0
   643ca:	mov    DWORD PTR [rsp+0x88],0x20
   643d5:	mov    DWORD PTR [rsp+0x84],0x6
   643e0:	jmp    63ae0 <dct_luma8x8+0x350>
   643e5:	mov    eax,0x6
   643ea:	mov    ecx,0x5
   643ef:	mov    DWORD PTR [rsp+0x80],0x0
   643fa:	sub    eax,ebx
   643fc:	sub    ecx,ebx
   643fe:	mov    DWORD PTR [rsp+0x84],eax
   64405:	mov    eax,0x1
   6440a:	shl    eax,cl
   6440c:	mov    DWORD PTR [rsp+0x88],eax
   64413:	jmp    6389f <dct_luma8x8+0x10f>
   64418:	call   4390 <__stack_chk_fail@plt>
   6441d:	nop    DWORD PTR [rax]

0000000000064420 <RDCost_for_8x8IntraBlocks>:
   64420:	endbr64 
   64424:	push   r15
   64426:	mov    r15,rdi
   64429:	push   r14
   6442b:	push   r13
   6442d:	push   r12
   6442f:	push   rbp
   64430:	mov    ebp,esi
   64432:	push   rbx
   64433:	mov    ebx,esi
   64435:	mov    edi,ebp
   64437:	shr    ebx,0x1f
   6443a:	add    ebx,esi
   6443c:	sub    rsp,0x68
   64440:	mov    r12,QWORD PTR [rip+0x24169]        # 885b0 <img>
   64447:	sar    ebx,1
   64449:	mov    r14,QWORD PTR [rip+0x52f78]        # b73c8 <imgY_org>
   64450:	mov    DWORD PTR [rsp+0x38],edx
   64454:	mov    edx,esi
   64456:	shl    ebx,0x3
   64459:	mov    DWORD PTR [rsp+0x3c],ecx
   6445d:	shr    edx,0x1f
   64460:	movsd  QWORD PTR [rsp+0x48],xmm0
   64466:	mov    rax,QWORD PTR fs:0x28
   6446f:	mov    QWORD PTR [rsp+0x58],rax
   64474:	xor    eax,eax
   64476:	lea    eax,[rsi+rdx*1]
   64479:	and    eax,0x1
   6447c:	sub    eax,edx
   6447e:	mov    edx,DWORD PTR [r12+0x98]
   64486:	lea    eax,[rdx+rax*8]
   64489:	mov    DWORD PTR [rsp+0x10],eax
   6448d:	mov    eax,DWORD PTR [r12+0x9c]
   64495:	add    eax,ebx
   64497:	add    ebx,DWORD PTR [r12+0xac]
   6449f:	mov    DWORD PTR [rsp+0x14],eax
   644a3:	mov    rax,QWORD PTR [rip+0x264fe]        # 8a9a8 <enc_picture>
   644aa:	movsxd rbx,ebx
   644ad:	mov    rcx,QWORD PTR [rax+0x1918]
   644b4:	movsxd rax,DWORD PTR [r12+0xc]
   644b9:	imul   rax,rax,0x278
   644c0:	add    rax,QWORD PTR [r12+0x3758]
   644c8:	mov    QWORD PTR [rsp+0x40],rcx
   644cd:	movsxd r13,DWORD PTR [rax]
   644d0:	mov    rcx,QWORD PTR [r12+0x3750]
   644d8:	mov    QWORD PTR [rsp+0x20],rax
   644dd:	lea    rax,[r13+r13*2+0x0]
   644e2:	mov    QWORD PTR [rsp+0x18],rcx
   644e7:	shl    rax,0x4
   644eb:	lea    rsi,[r12+rax*1+0x3760]
   644f3:	mov    rax,QWORD PTR [rip+0x240be]        # 885b8 <input>
   644fa:	mov    QWORD PTR [rsp+0x28],rsi
   644ff:	lea    rsi,[rsp+0x54]
   64504:	movsxd rdx,DWORD PTR [rax+0x93c]
   6450b:	lea    rax,[rip+0x2645e]        # 8a970 <assignSE2partition>
   64512:	mov    rcx,QWORD PTR [rax+rdx*8]
   64516:	mov    edx,0x1
   6451b:	mov    QWORD PTR [rsp+0x30],rcx
   64520:	mov    DWORD PTR [rsp+0x54],0x0
   64528:	call   63790 <dct_luma8x8>
   6452d:	mov    rsi,QWORD PTR [rip+0x2407c]        # 885b0 <img>
   64534:	mov    rcx,QWORD PTR [rsp+0x40]
   64539:	xor    r10d,r10d
   6453c:	mov    DWORD PTR [r15],eax
   6453f:	movsxd r11,DWORD PTR [rsp+0x10]
   64544:	lea    r15,[r14+rbx*8]
   64548:	xor    ebx,ebx
   6454a:	movsxd r14,DWORD PTR [rsp+0x14]
   6454f:	mov    QWORD PTR [rsp+0x8],rsi
   64554:	mov    r9,QWORD PTR [rsi+0x11860]
   6455b:	lea    r8,[r11+0x8]
   6455f:	lea    r14,[rcx+r14*8]
   64563:	nop    DWORD PTR [rax+rax*1+0x0]
   64568:	mov    rsi,QWORD PTR [r15+r10*1]
   6456c:	mov    rcx,QWORD PTR [r14+r10*1]
   64570:	mov    rdx,r11
   64573:	nop    DWORD PTR [rax+rax*1+0x0]
   64578:	movzx  eax,WORD PTR [rsi+rdx*2]
   6457c:	movzx  edi,WORD PTR [rcx+rdx*2]
   64580:	add    rdx,0x1
   64584:	sub    eax,edi
   64586:	cdqe   
   64588:	movsxd rax,DWORD PTR [r9+rax*4]
   6458c:	add    rbx,rax
   6458f:	cmp    r8,rdx
   64592:	jne    64578 <RDCost_for_8x8IntraBlocks+0x158>
   64594:	add    r10,0x8
   64598:	cmp    r10,0x40
   6459c:	jne    64568 <RDCost_for_8x8IntraBlocks+0x148>
   6459e:	mov    ecx,DWORD PTR [rsp+0x38]
   645a2:	mov    esi,DWORD PTR [rsp+0x3c]
   645a6:	xor    eax,eax
   645a8:	cmp    esi,ecx
   645aa:	mov    edx,ecx
   645ac:	setle  al
   645af:	sub    edx,eax
   645b1:	cmp    esi,ecx
   645b3:	mov    eax,0xffffffff
   645b8:	cmovne eax,edx
   645bb:	mov    rdx,QWORD PTR [rip+0x23ff6]        # 885b8 <input>
   645c2:	mov    ecx,eax
   645c4:	lea    rax,[r13+r13*2+0x0]
   645c9:	mov    edx,DWORD PTR [rdx+0x934]
   645cf:	shl    rax,0x4
   645d3:	add    rax,r12
   645d6:	mov    DWORD PTR [rax+0x3764],ecx
   645dc:	mov    DWORD PTR [rax+0x3778],ebp
   645e2:	mov    DWORD PTR [rax+0x3760],0x4
   645ec:	test   edx,edx
   645ee:	je     645fe <RDCost_for_8x8IntraBlocks+0x1de>
   645f0:	lea    rcx,[rip+0xfffffffffffa9239]        # d830 <writeIntraPredMode_CABAC>
   645f7:	mov    QWORD PTR [rax+0x3788],rcx
   645fe:	mov    rax,QWORD PTR [rsp+0x18]
   64603:	mov    rsi,QWORD PTR [rax+0x18]
   64607:	mov    rax,QWORD PTR [rsp+0x8]
   6460c:	cmp    DWORD PTR [rax+0x18],0x1
   64610:	mov    rax,QWORD PTR [rsp+0x30]
   64615:	je     646d4 <RDCost_for_8x8IntraBlocks+0x2b4>
   6461b:	movsxd rcx,DWORD PTR [rax+0x10]
   6461f:	mov    rdi,QWORD PTR [rsp+0x28]
   64624:	mov    rax,rcx
   64627:	shl    rax,0x4
   6462b:	sub    rax,rcx
   6462e:	lea    rsi,[rsi+rax*8]
   64632:	test   edx,edx
   64634:	je     646f3 <RDCost_for_8x8IntraBlocks+0x2d3>
   6463a:	call   QWORD PTR [rsi+0x70]
   6463d:	lea    rax,[r13+r13*2+0x0]
   64642:	shl    rax,0x4
   64646:	mov    r13d,DWORD PTR [r12+rax*1+0x376c]
   6464e:	mov    rax,QWORD PTR [rsp+0x20]
   64653:	add    DWORD PTR [rax],0x1
   64656:	mov    rax,QWORD PTR [rip+0x23f5b]        # 885b8 <input>
   6465d:	mov    r12d,DWORD PTR [rax+0x934]
   64664:	test   r12d,r12d
   64667:	jne    646fd <RDCost_for_8x8IntraBlocks+0x2dd>
   6466d:	mov    edx,r12d
   64670:	xor    ecx,ecx
   64672:	mov    esi,ebp
   64674:	xor    edi,edi
   64676:	call   2d490 <writeCoeff4x4_CAVLC>
   6467b:	add    r12d,0x1
   6467f:	add    r13d,eax
   64682:	cmp    r12d,0x4
   64686:	jne    6466d <RDCost_for_8x8IntraBlocks+0x24d>
   64688:	mov    rax,QWORD PTR [rip+0x23f21]        # 885b0 <img>
   6468f:	pxor   xmm0,xmm0
   64693:	cvtsi2sd xmm0,r13d
   64698:	mov    eax,DWORD PTR [rax+0x11c14]
   6469e:	test   eax,eax
   646a0:	jne    646b5 <RDCost_for_8x8IntraBlocks+0x295>
   646a2:	mulsd  xmm0,QWORD PTR [rsp+0x48]
   646a8:	pxor   xmm1,xmm1
   646ac:	cvtsi2sd xmm1,rbx
   646b1:	addsd  xmm0,xmm1
   646b5:	mov    rax,QWORD PTR [rsp+0x58]
   646ba:	xor    rax,QWORD PTR fs:0x28
   646c3:	jne    64711 <RDCost_for_8x8IntraBlocks+0x2f1>
   646c5:	add    rsp,0x68
   646c9:	pop    rbx
   646ca:	pop    rbp
   646cb:	pop    r12
   646cd:	pop    r13
   646cf:	pop    r14
   646d1:	pop    r15
   646d3:	ret    
   646d4:	movsxd rcx,DWORD PTR [rax+0x48]
   646d8:	mov    rdi,QWORD PTR [rsp+0x28]
   646dd:	mov    rax,rcx
   646e0:	shl    rax,0x4
   646e4:	sub    rax,rcx
   646e7:	lea    rsi,[rsi+rax*8]
   646eb:	test   edx,edx
   646ed:	jne    6463a <RDCost_for_8x8IntraBlocks+0x21a>
   646f3:	call   66b30 <writeSyntaxElement_Intra4x4PredictionMode>
   646f8:	jmp    6463d <RDCost_for_8x8IntraBlocks+0x21d>
   646fd:	mov    esi,0x1
   64702:	mov    edi,ebp
   64704:	call   2cde0 <writeLumaCoeff8x8_CABAC>
   64709:	add    r13d,eax
   6470c:	jmp    64688 <RDCost_for_8x8IntraBlocks+0x268>
   64711:	call   4390 <__stack_chk_fail@plt>
   64716:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000064720 <Mode_Decision_for_new_8x8IntraBlocks>:
   64720:	endbr64 
   64724:	push   r15
   64726:	mov    edx,edi
   64728:	mov    ecx,0xffffffff
   6472d:	push   r14
   6472f:	shr    edx,0x1f
   64732:	push   r13
   64734:	push   r12
   64736:	push   rbp
   64737:	push   rbx
   64738:	sub    rsp,0x538
   6473f:	mov    DWORD PTR [rsp+0x74],edi
   64743:	lea    r9,[rsp+0x160]
   6474b:	mov    QWORD PTR [rsp+0xc0],rsi
   64753:	movsd  QWORD PTR [rsp+0x98],xmm0
   6475c:	mov    rax,QWORD PTR fs:0x28
   64765:	mov    QWORD PTR [rsp+0x528],rax
   6476d:	xor    eax,eax
   6476f:	lea    eax,[rdi+rdx*1]
   64772:	and    eax,0x1
   64775:	sub    eax,edx
   64777:	lea    r12d,[rax*8+0x0]
   6477f:	mov    DWORD PTR [rsp+0x110],eax
   64786:	mov    eax,edx
   64788:	add    eax,edi
   6478a:	lea    r14d,[r12+0x3]
   6478f:	sar    eax,1
   64791:	lea    r13d,[rax*8+0x0]
   64799:	mov    DWORD PTR [rsp+0x114],eax
   647a0:	mov    rax,QWORD PTR [rip+0x23e09]        # 885b0 <img>
   647a7:	lea    r15d,[r13+0x3]
   647ab:	mov    edi,DWORD PTR [rax+0xa8]
   647b1:	mov    ebx,DWORD PTR [rax+0x98]
   647b7:	mov    ebp,DWORD PTR [rax+0x9c]
   647bd:	add    edi,r12d
   647c0:	add    ebx,r12d
   647c3:	mov    DWORD PTR [rsp],edi
   647c6:	mov    edi,DWORD PTR [rax+0xac]
   647cc:	add    ebp,r13d
   647cf:	lea    edx,[rbx+0x3]
   647d2:	add    edi,r13d
   647d5:	test   ebx,ebx
   647d7:	cmovns edx,ebx
   647da:	mov    DWORD PTR [rsp+0x8],edi
   647de:	mov    rdi,QWORD PTR [rip+0x52be3]        # b73c8 <imgY_org>
   647e5:	sar    edx,0x2
   647e8:	test   ebp,ebp
   647ea:	mov    QWORD PTR [rsp+0x10],rdi
   647ef:	mov    DWORD PTR [rsp+0x120],edx
   647f6:	lea    edx,[rbp+0x3]
   647f9:	cmovns edx,ebp
   647fc:	sar    edx,0x2
   647ff:	mov    DWORD PTR [rsp+0x124],edx
   64806:	movsxd rdx,DWORD PTR [rax+0xc]
   6480a:	mov    rdi,rdx
   6480d:	imul   rdx,rdx,0x278
   64814:	add    rdx,QWORD PTR [rax+0x3758]
   6481b:	test   r13d,r13d
   6481e:	cmovns r15d,r13d
   64822:	mov    eax,DWORD PTR [rdx+0x20c]
   64828:	sar    r15d,0x2
   6482c:	test   r12d,r12d
   6482f:	mov    DWORD PTR [rsp+0x18],eax
   64833:	cmovns r14d,r12d
   64837:	mov    edx,r15d
   6483a:	xor    r8d,r8d
   6483d:	sar    r14d,0x2
   64841:	mov    esi,r14d
   64844:	call   30b60 <getLuma4x4Neighbour>
   64849:	xor    ecx,ecx
   6484b:	mov    r8d,0xffffffff
   64851:	mov    edx,r15d
   64854:	mov    rax,QWORD PTR [rip+0x23d55]        # 885b0 <img>
   6485b:	lea    r9,[rsp+0x180]
   64863:	mov    esi,r14d
   64866:	mov    edi,DWORD PTR [rax+0xc]
   64869:	call   30b60 <getLuma4x4Neighbour>
   6486e:	mov    rax,QWORD PTR [rip+0x23d43]        # 885b8 <input>
   64875:	mov    ecx,DWORD PTR [rsp+0x180]
   6487c:	mov    r9d,DWORD PTR [rax+0xd8]
   64883:	test   r9d,r9d
   64886:	jne    65bd0 <Mode_Decision_for_new_8x8IntraBlocks+0x14b0>
   6488c:	mov    edx,DWORD PTR [rsp+0x160]
   64893:	mov    eax,DWORD PTR [rsp+0x74]
   64897:	add    eax,0x1
   6489a:	cmp    eax,0x2
   6489d:	mov    eax,0xffffffff
   648a2:	jbe    65ba1 <Mode_Decision_for_new_8x8IntraBlocks+0x1481>
   648a8:	test   ecx,ecx
   648aa:	jne    66153 <Mode_Decision_for_new_8x8IntraBlocks+0x1a33>
   648b0:	mov    DWORD PTR [rsp+0xc8],0x2
   648bb:	test   BYTE PTR [rsp+0x74],0x1
   648c0:	je     65b56 <Mode_Decision_for_new_8x8IntraBlocks+0x1436>
   648c6:	test   edx,edx
   648c8:	jne    6612c <Mode_Decision_for_new_8x8IntraBlocks+0x1a0c>
   648ce:	mov    rax,QWORD PTR [rsp+0xc0]
   648d6:	mov    edi,ebx
   648d8:	mov    esi,ebp
   648da:	movsxd r12,r12d
   648dd:	lea    rcx,[rsp+0x158]
   648e5:	lea    rdx,[rsp+0x154]
   648ed:	movsxd rbx,ebx
   648f0:	mov    DWORD PTR [rax],0x7fffffff
   648f6:	lea    r8,[rsp+0x15c]
   648fe:	call   61cb0 <intrapred_luma8x8>
   64903:	movsxd rax,DWORD PTR [rsp+0x74]
   64908:	movsxd rdx,DWORD PTR [rsp]
   6490c:	mov    QWORD PTR [rsp+0x48],rbx
   64911:	movsd  xmm4,QWORD PTR [rip+0xdec7]        # 727e0 <INIT_MB_TYPE_I+0x120>
   64919:	add    rbx,rbx
   6491c:	mov    QWORD PTR [rsp+0x68],0x0
   64925:	mov    QWORD PTR [rsp+0x138],rax
   6492d:	shl    rax,0x3
   64931:	lea    rsi,[rdx+rdx*1]
   64935:	lea    rdi,[rax+0x20]
   64939:	mov    QWORD PTR [rsp+0x118],rax
   64941:	add    rax,0x40
   64945:	mov    QWORD PTR [rsp+0x130],rax
   6494d:	mov    eax,DWORD PTR [rsp+0x110]
   64954:	mov    QWORD PTR [rsp+0x128],rdi
   6495c:	movsxd rdi,r13d
   6495f:	add    eax,eax
   64961:	mov    QWORD PTR [rsp+0x40],rsi
   64966:	mov    DWORD PTR [rsp+0xcc],eax
   6496d:	mov    eax,DWORD PTR [rsp+0x114]
   64974:	mov    QWORD PTR [rsp+0xd0],rdi
   6497c:	add    eax,eax
   6497e:	mov    QWORD PTR [rsp+0x50],rbx
   64983:	mov    DWORD PTR [rsp+0xf0],eax
   6498a:	mov    rax,QWORD PTR [rip+0x23c1f]        # 885b0 <img>
   64991:	mov    QWORD PTR [rsp+0x78],0x0
   6499a:	mov    QWORD PTR [rsp+0x58],rax
   6499f:	movsxd rax,DWORD PTR [rsp+0x18]
   649a4:	shl    rax,0x4
   649a8:	add    rax,r12
   649ab:	shl    rax,0x4
   649af:	lea    r8,[rax+rdi*1]
   649b3:	lea    rax,[rdi+rax*1+0x109c]
   649bb:	add    rax,rax
   649be:	lea    rcx,[r8+r8*1]
   649c2:	mov    QWORD PTR [rsp+0xd8],rax
   649ca:	movsxd rax,ebp
   649cd:	mov    QWORD PTR [rsp+0xb8],rax
   649d5:	lea    rsi,[rax*8+0x0]
   649dd:	lea    rax,[rax*8+0x40]
   649e5:	mov    QWORD PTR [rsp+0xe0],rcx
   649ed:	mov    rcx,rdx
   649f0:	mov    QWORD PTR [rsp+0x60],rax
   649f5:	mov    rax,r12
   649f8:	neg    rcx
   649fb:	neg    r12
   649fe:	shl    rax,0x4
   64a02:	add    rcx,rcx
   64a05:	shl    r12,0x6
   64a09:	mov    QWORD PTR [rsp+0x88],rsi
   64a11:	add    rax,rdi
   64a14:	mov    QWORD PTR [rsp+0xf8],rcx
   64a1c:	movsxd rcx,DWORD PTR [rsp+0x8]
   64a21:	add    rax,rax
   64a24:	mov    QWORD PTR [rsp+0x100],r12
   64a2c:	mov    QWORD PTR [rsp+0xb0],rax
   64a34:	mov    rax,QWORD PTR [rsp+0x10]
   64a39:	shl    rcx,0x3
   64a3d:	mov    QWORD PTR [rsp+0xe8],rcx
   64a45:	add    rax,rcx
   64a48:	mov    QWORD PTR [rsp+0xa0],rax
   64a50:	movsd  QWORD PTR [rsp+0x80],xmm4
   64a59:	mov    DWORD PTR [rsp+0xf4],0x0
   64a64:	mov    DWORD PTR [rsp+0xa8],0x0
   64a6f:	mov    DWORD PTR [rsp+0x10],0x0
   64a77:	nop    WORD PTR [rax+rax*1+0x0]
   64a80:	mov    ebx,DWORD PTR [rsp+0x10]
   64a84:	cmp    ebx,0x2
   64a87:	je     64ac4 <Mode_Decision_for_new_8x8IntraBlocks+0x3a4>
   64a89:	mov    eax,ebx
   64a8b:	and    eax,0xfffffffb
   64a8e:	cmp    eax,0x3
   64a91:	je     6506e <Mode_Decision_for_new_8x8IntraBlocks+0x94e>
   64a97:	test   ebx,ebx
   64a99:	je     6506e <Mode_Decision_for_new_8x8IntraBlocks+0x94e>
   64a9f:	mov    eax,DWORD PTR [rsp+0x10]
   64aa3:	cmp    eax,0x1
   64aa6:	je     65926 <Mode_Decision_for_new_8x8IntraBlocks+0x1206>
   64aac:	cmp    eax,0x8
   64aaf:	je     65926 <Mode_Decision_for_new_8x8IntraBlocks+0x1206>
   64ab5:	mov    esi,DWORD PTR [rsp+0x15c]
   64abc:	test   esi,esi
   64abe:	je     64be3 <Mode_Decision_for_new_8x8IntraBlocks+0x4c3>
   64ac4:	mov    r10,QWORD PTR [rip+0x23aed]        # 885b8 <input>
   64acb:	mov    ebx,DWORD PTR [r10+0x9a0]
   64ad2:	test   ebx,ebx
   64ad4:	je     6593a <Mode_Decision_for_new_8x8IntraBlocks+0x121a>
   64ada:	mov    rax,QWORD PTR [rsp+0x58]
   64adf:	mov    ecx,DWORD PTR [rax+0x11c14]
   64ae5:	test   ecx,ecx
   64ae7:	jne    65084 <Mode_Decision_for_new_8x8IntraBlocks+0x964>
   64aed:	mov    rbp,QWORD PTR [rsp+0xb0]
   64af5:	mov    r8,QWORD PTR [rsp+0x68]
   64afa:	xor    r11d,r11d
   64afd:	mov    r12,QWORD PTR [rsp+0x100]
   64b05:	mov    rbx,QWORD PTR [rsp+0xd0]
   64b0d:	mov    r10,QWORD PTR [rsp+0xa0]
   64b15:	mov    r13,QWORD PTR [rsp+0x40]
   64b1a:	add    rbp,rax
   64b1d:	add    r8,rax
   64b20:	sub    r12,rax
   64b23:	nop    DWORD PTR [rax+rax*1+0x0]
   64b28:	mov    r9,QWORD PTR [r10+r11*8]
   64b2c:	mov    rdi,r11
   64b2f:	mov    rcx,rbp
   64b32:	xor    eax,eax
   64b34:	sub    rdi,rbx
   64b37:	add    r9,r13
   64b3a:	nop    WORD PTR [rax+rax*1+0x0]
   64b40:	movzx  edx,WORD PTR [r8+rax*1+0x1cb8]
   64b49:	lea    rsi,[r12+rcx*2]
   64b4d:	add    rcx,0x20
   64b51:	mov    WORD PTR [rcx+0x3118],dx
   64b58:	movzx  r14d,WORD PTR [r9+rax*1]
   64b5d:	add    rax,0x2
   64b61:	sub    r14d,edx
   64b64:	mov    DWORD PTR [rsi+rdi*4+0x3338],r14d
   64b6c:	cmp    rax,0x10
   64b70:	jne    64b40 <Mode_Decision_for_new_8x8IntraBlocks+0x420>
   64b72:	add    r11,0x1
   64b76:	add    rbp,0x2
   64b7a:	add    r8,0x10
   64b7e:	add    rbx,0x1
   64b82:	cmp    r11,0x8
   64b86:	jne    64b28 <Mode_Decision_for_new_8x8IntraBlocks+0x408>
   64b88:	xor    eax,eax
   64b8a:	call   5d2c0 <store_coding_state_cs_cm>
   64b8f:	mov    ecx,DWORD PTR [rsp+0xc8]
   64b96:	movsd  xmm1,QWORD PTR [rsp+0x80]
   64b9f:	lea    rdi,[rsp+0x150]
   64ba7:	movsd  xmm0,QWORD PTR [rsp+0x98]
   64bb0:	mov    edx,DWORD PTR [rsp+0x10]
   64bb4:	mov    esi,DWORD PTR [rsp+0x74]
   64bb8:	call   64420 <RDCost_for_8x8IntraBlocks>
   64bbd:	movsd  xmm5,QWORD PTR [rsp+0x80]
   64bc6:	comisd xmm5,xmm0
   64bca:	ja     65a6b <Mode_Decision_for_new_8x8IntraBlocks+0x134b>
   64bd0:	xor    eax,eax
   64bd2:	call   5d2d0 <reset_coding_state_cs_cm>
   64bd7:	mov    rax,QWORD PTR [rip+0x239d2]        # 885b0 <img>
   64bde:	mov    QWORD PTR [rsp+0x58],rax
   64be3:	add    DWORD PTR [rsp+0x10],0x1
   64be8:	mov    eax,DWORD PTR [rsp+0x10]
   64bec:	add    QWORD PTR [rsp+0x78],0x8
   64bf2:	sub    QWORD PTR [rsp+0x68],0xffffffffffffff80
   64bf8:	cmp    eax,0x9
   64bfb:	jne    64a80 <Mode_Decision_for_new_8x8IntraBlocks+0x360>
   64c01:	mov    rbx,QWORD PTR [rsp+0x58]
   64c06:	movsxd rdx,DWORD PTR [rsp+0x120]
   64c0e:	mov    r10d,DWORD PTR [rsp+0xa8]
   64c16:	mov    edi,DWORD PTR [rsp+0xc8]
   64c1d:	mov    rsi,QWORD PTR [rbx+0x70]
   64c21:	movsxd rax,DWORD PTR [rsp+0x124]
   64c29:	mov    r8d,DWORD PTR [rsp+0x110]
   64c31:	mov    r9d,DWORD PTR [rsp+0x114]
   64c39:	mov    rdx,QWORD PTR [rsi+rdx*8]
   64c3d:	mov    DWORD PTR [rdx+rax*4],r10d
   64c41:	xor    eax,eax
   64c43:	cmp    r10d,edi
   64c46:	mov    edx,r10d
   64c49:	setge  al
   64c4c:	sub    edx,eax
   64c4e:	cmp    r10d,edi
   64c51:	mov    eax,0xffffffff
   64c56:	mov    edi,DWORD PTR [rsp+0x74]
   64c5a:	cmove  edx,eax
   64c5d:	movsxd rax,DWORD PTR [rbx+0xc]
   64c61:	add    r8d,r8d
   64c64:	add    r9d,r9d
   64c67:	lea    ecx,[rdi*4+0x0]
   64c6e:	mov    DWORD PTR [rsp+0x18],r8d
   64c73:	mov    DWORD PTR [rsp+0x20],r9d
   64c78:	movsxd rcx,ecx
   64c7b:	imul   rax,rax,0x278
   64c82:	add    rax,QWORD PTR [rbx+0x3758]
   64c89:	mov    DWORD PTR [rax+rcx*4+0x18c],edx
   64c90:	xor    edx,edx
   64c92:	mov    rcx,rbx
   64c95:	mov    eax,DWORD PTR [rcx+0x88]
   64c9b:	lea    edi,[r8+rax*4]
   64c9f:	mov    eax,DWORD PTR [rcx+0x8c]
   64ca5:	movsxd rdi,edi
   64ca8:	lea    eax,[rdx+rax*4]
   64cab:	mov    rdi,QWORD PTR [rsi+rdi*8]
   64caf:	add    eax,r9d
   64cb2:	cdqe   
   64cb4:	mov    DWORD PTR [rdi+rax*4],r10d
   64cb8:	mov    eax,DWORD PTR [rcx+0x88]
   64cbe:	lea    edi,[r8+rax*4+0x1]
   64cc3:	mov    eax,DWORD PTR [rcx+0x8c]
   64cc9:	movsxd rdi,edi
   64ccc:	lea    eax,[rdx+rax*4]
   64ccf:	mov    rdi,QWORD PTR [rsi+rdi*8]
   64cd3:	add    eax,r9d
   64cd6:	cdqe   
   64cd8:	mov    DWORD PTR [rdi+rax*4],r10d
   64cdc:	cmp    edx,0x1
   64cdf:	jne    65a61 <Mode_Decision_for_new_8x8IntraBlocks+0x1341>
   64ce5:	mov    rax,QWORD PTR [rip+0x238cc]        # 885b8 <input>
   64cec:	mov    eax,DWORD PTR [rax+0x9a0]
   64cf2:	mov    DWORD PTR [rsp+0x28],eax
   64cf6:	test   eax,eax
   64cf8:	je     64f73 <Mode_Decision_for_new_8x8IntraBlocks+0x853>
   64cfe:	mov    rax,QWORD PTR [rip+0x24453]        # 89158 <cofAC8x8>
   64d05:	mov    rbx,QWORD PTR [rsp+0x138]
   64d0d:	xor    ecx,ecx
   64d0f:	mov    r9,QWORD PTR [rax+rbx*8]
   64d13:	mov    rax,QWORD PTR [rsp+0x58]
   64d18:	mov    r10,QWORD PTR [rax+0x3738]
   64d1f:	mov    r8,QWORD PTR [r10+rbx*8]
   64d23:	xor    edx,edx
   64d25:	nop    DWORD PTR [rax]
   64d28:	xor    eax,eax
   64d2a:	mov    rsi,QWORD PTR [r9+rax*1]
   64d2e:	mov    rsi,QWORD PTR [rsi+rcx*1]
   64d32:	mov    edi,DWORD PTR [rsi+rdx*1]
   64d35:	mov    rsi,QWORD PTR [r8+rax*1]
   64d39:	add    rax,0x8
   64d3d:	mov    rsi,QWORD PTR [rsi+rcx*1]
   64d41:	mov    DWORD PTR [rsi+rdx*1],edi
   64d44:	cmp    rax,0x20
   64d48:	jne    64d2a <Mode_Decision_for_new_8x8IntraBlocks+0x60a>
   64d4a:	add    rdx,0x4
   64d4e:	cmp    rdx,0x104
   64d55:	jne    64d28 <Mode_Decision_for_new_8x8IntraBlocks+0x608>
   64d57:	add    rcx,0x8
   64d5b:	cmp    rcx,0x10
   64d5f:	jne    64d23 <Mode_Decision_for_new_8x8IntraBlocks+0x603>
   64d61:	mov    rax,QWORD PTR [rsp+0x58]
   64d66:	mov    r8d,DWORD PTR [rax+0x11c14]
   64d6d:	test   r8d,r8d
   64d70:	je     64e35 <Mode_Decision_for_new_8x8IntraBlocks+0x715>
   64d76:	mov    rax,QWORD PTR [rsp+0x118]
   64d7e:	lea    rdx,[rip+0x7e4db]        # e3260 <cofAC8x8_chroma>
   64d85:	xor    esi,esi
   64d87:	mov    r8,QWORD PTR [r10+rax*1+0x20]
   64d8c:	mov    r9,QWORD PTR [r10+rax*1+0x40]
   64d91:	mov    r10,QWORD PTR [r8+rsi*1]
   64d95:	xor    eax,eax
   64d97:	mov    rdi,QWORD PTR [r10]
   64d9a:	nop    WORD PTR [rax+rax*1+0x0]
   64da0:	mov    ecx,DWORD PTR [rdx+rax*1]
   64da3:	mov    DWORD PTR [rdi+rax*1],ecx
   64da6:	add    rax,0x4
   64daa:	cmp    rax,0x48
   64dae:	jne    64da0 <Mode_Decision_for_new_8x8IntraBlocks+0x680>
   64db0:	mov    rdi,QWORD PTR [r10+0x8]
   64db4:	xor    eax,eax
   64db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   64dc0:	mov    ecx,DWORD PTR [rdx+rax*1+0x48]
   64dc4:	mov    DWORD PTR [rdi+rax*1],ecx
   64dc7:	add    rax,0x4
   64dcb:	cmp    rax,0x48
   64dcf:	jne    64dc0 <Mode_Decision_for_new_8x8IntraBlocks+0x6a0>
   64dd1:	mov    r10,QWORD PTR [r9+rsi*1]
   64dd5:	xor    eax,eax
   64dd7:	mov    rdi,QWORD PTR [r10]
   64dda:	nop    WORD PTR [rax+rax*1+0x0]
   64de0:	mov    ecx,DWORD PTR [rdx+rax*1+0x240]
   64de7:	mov    DWORD PTR [rdi+rax*1],ecx
   64dea:	add    rax,0x4
   64dee:	cmp    rax,0x48
   64df2:	jne    64de0 <Mode_Decision_for_new_8x8IntraBlocks+0x6c0>
   64df4:	mov    rdi,QWORD PTR [r10+0x8]
   64df8:	xor    eax,eax
   64dfa:	nop    WORD PTR [rax+rax*1+0x0]
   64e00:	mov    ecx,DWORD PTR [rdx+rax*1+0x288]
   64e07:	mov    DWORD PTR [rdi+rax*1],ecx
   64e0a:	add    rax,0x4
   64e0e:	cmp    rax,0x48
   64e12:	jne    64e00 <Mode_Decision_for_new_8x8IntraBlocks+0x6e0>
   64e14:	add    rsi,0x8
   64e18:	add    rdx,0x90
   64e1f:	cmp    rsi,0x20
   64e23:	jne    64d91 <Mode_Decision_for_new_8x8IntraBlocks+0x671>
   64e29:	mov    rax,QWORD PTR [rsp+0x58]
   64e2e:	mov    r8d,DWORD PTR [rax+0x11c14]
   64e35:	movsxd rsi,DWORD PTR [rsp+0xa8]
   64e3d:	mov    rax,QWORD PTR [rsp+0x58]
   64e42:	lea    rdi,[rsp+0x1a0]
   64e4a:	lea    rbp,[rsp+0x220]
   64e52:	mov    r9,QWORD PTR [rip+0x25b4f]        # 8a9a8 <enc_picture>
   64e59:	mov    r11,QWORD PTR [rsp+0xb0]
   64e61:	shl    rsi,0x7
   64e65:	mov    r12,QWORD PTR [rsp+0x50]
   64e6a:	mov    r10,QWORD PTR [rsp+0x88]
   64e72:	add    r11,rax
   64e75:	add    r10,QWORD PTR [r9+0x1918]
   64e7c:	add    rsi,rax
   64e7f:	mov    rbx,QWORD PTR [r10]
   64e82:	mov    rdx,r11
   64e85:	xor    eax,eax
   64e87:	add    rbx,r12
   64e8a:	nop    WORD PTR [rax+rax*1+0x0]
   64e90:	movzx  ecx,WORD PTR [rdi+rax*1]
   64e94:	add    rdx,0x20
   64e98:	mov    WORD PTR [rbx+rax*1],cx
   64e9c:	movzx  ecx,WORD PTR [rsi+rax*1+0x1cb8]
   64ea4:	add    rax,0x2
   64ea8:	mov    WORD PTR [rdx+0x3118],cx
   64eaf:	cmp    rax,0x10
   64eb3:	jne    64e90 <Mode_Decision_for_new_8x8IntraBlocks+0x770>
   64eb5:	add    rdi,0x10
   64eb9:	add    r10,0x8
   64ebd:	add    r11,0x2
   64ec1:	add    rsi,0x10
   64ec5:	cmp    rbp,rdi
   64ec8:	jne    64e7f <Mode_Decision_for_new_8x8IntraBlocks+0x75f>
   64eca:	test   r8d,r8d
   64ecd:	je     6503e <Mode_Decision_for_new_8x8IntraBlocks+0x91e>
   64ed3:	mov    r13,QWORD PTR [r9+0x1940]
   64eda:	xor    r11d,r11d
   64edd:	lea    r12,[rsp+0x320]
   64ee5:	mov    r10d,r11d
   64ee8:	mov    r8d,r11d
   64eeb:	lea    rbx,[r11*4+0x0]
   64ef3:	xor    ebp,ebp
   64ef5:	sar    r10d,1
   64ef8:	and    r8d,0x1
   64efc:	shl    r10d,0x2
   64f00:	shl    r8d,0x2
   64f04:	movsxd r10,r10d
   64f07:	add    r10,QWORD PTR [rsp+0xb8]
   64f0f:	movsxd r8,r8d
   64f12:	add    r8,QWORD PTR [rsp+0x48]
   64f17:	shl    r10,0x3
   64f1b:	add    r8,r8
   64f1e:	lea    r14,[r10+0x20]
   64f22:	mov    r9,QWORD PTR [r13+rbp*8+0x0]
   64f27:	mov    rcx,rbx
   64f2a:	shl    rcx,0x4
   64f2e:	lea    rdi,[r9+r10*1]
   64f32:	add    rcx,r12
   64f35:	add    r9,r14
   64f38:	mov    rsi,QWORD PTR [rdi]
   64f3b:	xor    eax,eax
   64f3d:	add    rsi,r8
   64f40:	mov    edx,DWORD PTR [rcx+rax*4]
   64f43:	mov    WORD PTR [rsi+rax*2],dx
   64f47:	add    rax,0x1
   64f4b:	cmp    rax,0x4
   64f4f:	jne    64f40 <Mode_Decision_for_new_8x8IntraBlocks+0x820>
   64f51:	add    rdi,0x8
   64f55:	add    rcx,0x10
   64f59:	cmp    r9,rdi
   64f5c:	jne    64f38 <Mode_Decision_for_new_8x8IntraBlocks+0x818>
   64f5e:	add    rbx,0x10
   64f62:	cmp    rbp,0x1
   64f66:	je     6617a <Mode_Decision_for_new_8x8IntraBlocks+0x1a5a>
   64f6c:	mov    ebp,0x1
   64f71:	jmp    64f22 <Mode_Decision_for_new_8x8IntraBlocks+0x802>
   64f73:	mov    rax,QWORD PTR [rsp+0x58]
   64f78:	mov    edx,DWORD PTR [rax+0x11c14]
   64f7e:	test   edx,edx
   64f80:	jne    65c24 <Mode_Decision_for_new_8x8IntraBlocks+0x1504>
   64f86:	movsxd r8,DWORD PTR [rsp+0xa8]
   64f8e:	mov    r10,QWORD PTR [rsp+0xb0]
   64f96:	xor    r11d,r11d
   64f99:	mov    rbp,QWORD PTR [rsp+0x100]
   64fa1:	mov    r12,QWORD PTR [rsp+0xa0]
   64fa9:	shl    r8,0x7
   64fad:	mov    rbx,QWORD PTR [rsp+0xd0]
   64fb5:	mov    r13,QWORD PTR [rsp+0x40]
   64fba:	add    r10,rax
   64fbd:	add    r8,rax
   64fc0:	sub    rbp,rax
   64fc3:	mov    r9,QWORD PTR [r12+r11*8]
   64fc7:	mov    rdi,r11
   64fca:	mov    rcx,r10
   64fcd:	xor    eax,eax
   64fcf:	sub    rdi,rbx
   64fd2:	add    r9,r13
   64fd5:	nop    DWORD PTR [rax]
   64fd8:	movzx  edx,WORD PTR [r8+rax*1+0x1cb8]
   64fe1:	lea    rsi,[rbp+rcx*2+0x0]
   64fe6:	add    rcx,0x20
   64fea:	mov    WORD PTR [rcx+0x3118],dx
   64ff1:	movzx  r14d,WORD PTR [r9+rax*1]
   64ff6:	add    rax,0x2
   64ffa:	sub    r14d,edx
   64ffd:	mov    DWORD PTR [rsi+rdi*4+0x3338],r14d
   65005:	cmp    rax,0x10
   65009:	jne    64fd8 <Mode_Decision_for_new_8x8IntraBlocks+0x8b8>
   6500b:	add    r11,0x1
   6500f:	add    r10,0x2
   65013:	add    r8,0x10
   65017:	add    rbx,0x1
   6501b:	cmp    r11,0x8
   6501f:	jne    64fc3 <Mode_Decision_for_new_8x8IntraBlocks+0x8a3>
   65021:	mov    edi,DWORD PTR [rsp+0x74]
   65025:	lea    rsi,[rsp+0x14c]
   6502d:	mov    edx,0x1
   65032:	call   63790 <dct_luma8x8>
   65037:	mov    DWORD PTR [rsp+0xf4],eax
   6503e:	mov    rax,QWORD PTR [rsp+0x528]
   65046:	xor    rax,QWORD PTR fs:0x28
   6504f:	jne    6619d <Mode_Decision_for_new_8x8IntraBlocks+0x1a7d>
   65055:	mov    eax,DWORD PTR [rsp+0xf4]
   6505c:	add    rsp,0x538
   65063:	pop    rbx
   65064:	pop    rbp
   65065:	pop    r12
   65067:	pop    r13
   65069:	pop    r14
   6506b:	pop    r15
   6506d:	ret    
   6506e:	mov    r8d,DWORD PTR [rsp+0x158]
   65076:	test   r8d,r8d
   65079:	jne    64ac4 <Mode_Decision_for_new_8x8IntraBlocks+0x3a4>
   6507f:	jmp    64a9f <Mode_Decision_for_new_8x8IntraBlocks+0x37f>
   65084:	mov    rax,QWORD PTR [rip+0x4da45]        # b2ad0 <imgUV_org>
   6508b:	lea    r10,[rip+0x5124e]        # b62e0 <resTrans_G>
   65092:	mov    r8,QWORD PTR [rsp+0xe0]
   6509a:	lea    r11,[rip+0x4da3f]        # b2ae0 <resTrans_R>
   650a1:	mov    QWORD PTR [rsp+0x20],r10
   650a6:	mov    r15,QWORD PTR [rsp+0xe8]
   650ae:	lea    r12,[rip+0x3b8ab]        # a0960 <resTrans_B>
   650b5:	mov    rbp,r10
   650b8:	mov    rbx,QWORD PTR [rax]
   650bb:	mov    rax,QWORD PTR [rax+0x8]
   650bf:	mov    QWORD PTR [rsp],rbx
   650c3:	mov    rbx,QWORD PTR [rip+0x522fe]        # b73c8 <imgY_org>
   650ca:	mov    QWORD PTR [rsp+0x18],rax
   650cf:	mov    rax,QWORD PTR [rsp+0x58]
   650d4:	mov    QWORD PTR [rsp+0x8],rbx
   650d9:	mov    rbx,QWORD PTR [rsp+0xf8]
   650e1:	add    rbx,QWORD PTR [rsp+0x68]
   650e6:	add    r8,rax
   650e9:	add    rbx,rax
   650ec:	nop    DWORD PTR [rax+0x0]
   650f0:	mov    rax,QWORD PTR [rsp]
   650f4:	mov    rsi,QWORD PTR [rsp+0x40]
   650f9:	xor    ecx,ecx
   650fb:	mov    r14,QWORD PTR [rax+r15*1]
   650ff:	mov    rax,QWORD PTR [rsp+0x8]
   65104:	mov    r13,QWORD PTR [rax+r15*1]
   65108:	mov    rax,QWORD PTR [rsp+0x18]
   6510d:	mov    r10,QWORD PTR [rax+r15*1]
   65111:	nop    DWORD PTR [rax+0x0]
   65118:	movzx  edx,WORD PTR [r8+rcx*1+0x2138]
   65121:	movzx  eax,WORD PTR [r14+rsi*1]
   65126:	movzx  r9d,WORD PTR [rbx+rsi*1+0x1cb8]
   6512f:	sub    eax,edx
   65131:	movzx  edx,WORD PTR [r13+rsi*1+0x0]
   65137:	mov    edi,eax
   65139:	movzx  eax,WORD PTR [r10+rsi*1]
   6513e:	add    rsi,0x2
   65142:	sub    edx,r9d
   65145:	movzx  r9d,WORD PTR [r8+rcx*1+0x2938]
   6514e:	sub    eax,r9d
   65151:	sub    eax,edi
   65153:	mov    DWORD PTR [r11+rcx*2],eax
   65157:	sar    eax,1
   65159:	add    eax,edi
   6515b:	sub    edx,eax
   6515d:	mov    DWORD PTR [r12+rcx*2],edx
   65161:	sar    edx,1
   65163:	add    eax,edx
   65165:	mov    DWORD PTR [rbp+rcx*2+0x0],eax
   65169:	add    rcx,0x20
   6516d:	cmp    rcx,0x100
   65174:	jne    65118 <Mode_Decision_for_new_8x8IntraBlocks+0x9f8>
   65176:	add    r11,0x4
   6517a:	add    r8,0x2
   6517e:	add    rbx,0x10
   65182:	add    r12,0x4
   65186:	lea    rax,[rip+0x4d973]        # b2b00 <resTrans_R+0x20>
   6518d:	add    rbp,0x4
   65191:	add    r15,0x8
   65195:	cmp    r11,rax
   65198:	jne    650f0 <Mode_Decision_for_new_8x8IntraBlocks+0x9d0>
   6519e:	mov    r10,QWORD PTR [rsp+0x20]
   651a3:	mov    rcx,QWORD PTR [rsp+0x58]
   651a8:	lea    rsi,[rip+0x51151]        # b6300 <resTrans_G+0x20>
   651af:	nop
   651b0:	xor    eax,eax
   651b2:	nop    WORD PTR [rax+rax*1+0x0]
   651b8:	mov    edx,DWORD PTR [r10+rax*1]
   651bc:	mov    DWORD PTR [rcx+rax*1+0x3338],edx
   651c3:	add    rax,0x40
   651c7:	cmp    rax,0x200
   651cd:	jne    651b8 <Mode_Decision_for_new_8x8IntraBlocks+0xa98>
   651cf:	add    r10,0x4
   651d3:	add    rcx,0x4
   651d7:	cmp    r10,rsi
   651da:	jne    651b0 <Mode_Decision_for_new_8x8IntraBlocks+0xa90>
   651dc:	xor    eax,eax
   651de:	lea    r14,[rip+0x50cbb]        # b5ea0 <rec_resG>
   651e5:	call   5d2c0 <store_coding_state_cs_cm>
   651ea:	mov    ecx,DWORD PTR [rsp+0xc8]
   651f1:	mov    esi,DWORD PTR [rsp+0x74]
   651f5:	lea    rdi,[rsp+0x150]
   651fd:	movsd  xmm1,QWORD PTR [rsp+0x80]
   65206:	mov    edx,DWORD PTR [rsp+0x10]
   6520a:	movsd  xmm0,QWORD PTR [rsp+0x98]
   65213:	call   64420 <RDCost_for_8x8IntraBlocks>
   65218:	cvttsd2si eax,xmm0
   6521c:	mov    DWORD PTR [rsp+0x90],eax
   65223:	xor    eax,eax
   65225:	call   5d2d0 <reset_coding_state_cs_cm>
   6522a:	mov    rsi,QWORD PTR [rip+0x2337f]        # 885b0 <img>
   65231:	mov    rcx,r14
   65234:	nop    DWORD PTR [rax+0x0]
   65238:	xor    eax,eax
   6523a:	nop    WORD PTR [rax+rax*1+0x0]
   65240:	mov    edx,DWORD PTR [rsi+rax*1+0x3338]
   65247:	mov    DWORD PTR [rcx+rax*1],edx
   6524a:	add    rax,0x40
   6524e:	cmp    rax,0x200
   65254:	jne    65240 <Mode_Decision_for_new_8x8IntraBlocks+0xb20>
   65256:	add    rcx,0x4
   6525a:	lea    rax,[rip+0x50c5f]        # b5ec0 <rec_resG+0x20>
   65261:	add    rsi,0x4
   65265:	cmp    rcx,rax
   65268:	jne    65238 <Mode_Decision_for_new_8x8IntraBlocks+0xb18>
   6526a:	xor    eax,eax
   6526c:	lea    rbx,[rip+0x3b2cd]        # a0540 <rec_resB>
   65273:	xor    r13d,r13d
   65276:	call   5d2c0 <store_coding_state_cs_cm>
   6527b:	mov    eax,DWORD PTR [rsp+0x74]
   6527f:	mov    QWORD PTR [rsp],rbx
   65283:	mov    rdx,QWORD PTR [rip+0x23326]        # 885b0 <img>
   6528a:	mov    ebx,DWORD PTR [rsp+0x90]
   65291:	mov    QWORD PTR [rsp+0x8],r14
   65296:	mov    r14d,r13d
   65299:	lea    r12d,[rax+0x4]
   6529d:	lea    ebp,[rax+0x8]
   652a0:	lea    rax,[rip+0x4ea79]        # b3d20 <rec_resR>
   652a7:	lea    rdi,[rdx+0x10]
   652ab:	mov    r13,rax
   652ae:	mov    ecx,r14d
   652b1:	mov    eax,r14d
   652b4:	mov    r8,rdx
   652b7:	and    ecx,0x1
   652ba:	sar    eax,1
   652bc:	shl    ecx,0x2
   652bf:	shl    eax,0x2
   652c2:	movsxd rcx,ecx
   652c5:	cdqe   
   652c7:	shl    rcx,0x4
   652cb:	add    rcx,rax
   652ce:	lea    rax,[rip+0x4d80b]        # b2ae0 <resTrans_R>
   652d5:	lea    r15,[rcx*4+0x0]
   652dd:	lea    r9,[rax+r15*1]
   652e1:	xor    eax,eax
   652e3:	mov    edx,DWORD PTR [r9+rax*1]
   652e7:	mov    DWORD PTR [r8+rax*1+0x3338],edx
   652ef:	add    rax,0x40
   652f3:	cmp    rax,0x100
   652f9:	jne    652e3 <Mode_Decision_for_new_8x8IntraBlocks+0xbc3>
   652fb:	add    r8,0x4
   652ff:	add    r9,0x4
   65303:	cmp    r8,rdi
   65306:	jne    652e1 <Mode_Decision_for_new_8x8IntraBlocks+0xbc1>
   65308:	xor    edx,edx
   6530a:	mov    esi,r14d
   6530d:	mov    edi,r12d
   65310:	call   4f300 <RDCost_for_4x4Blocks_Chroma>
   65315:	mov    rdx,QWORD PTR [rip+0x23294]        # 885b0 <img>
   6531c:	lea    r9,[r15+r13*1]
   65320:	add    ebx,eax
   65322:	lea    rax,[rip+0x3b637]        # a0960 <resTrans_B>
   65329:	lea    r8,[rax+r15*1]
   6532d:	lea    r10,[rdx+0x10]
   65331:	xor    eax,eax
   65333:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   6533a:	mov    DWORD PTR [r9+rax*1],ecx
   6533e:	mov    ecx,DWORD PTR [r8+rax*1]
   65342:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   65349:	add    rax,0x40
   6534d:	cmp    rax,0x100
   65353:	jne    65333 <Mode_Decision_for_new_8x8IntraBlocks+0xc13>
   65355:	add    rdx,0x4
   65359:	add    r9,0x4
   6535d:	add    r8,0x4
   65361:	cmp    rdx,r10
   65364:	jne    65331 <Mode_Decision_for_new_8x8IntraBlocks+0xc11>
   65366:	mov    edx,0x1
   6536b:	mov    edi,ebp
   6536d:	mov    esi,r14d
   65370:	call   4f300 <RDCost_for_4x4Blocks_Chroma>
   65375:	mov    rdx,QWORD PTR [rip+0x23234]        # 885b0 <img>
   6537c:	add    ebx,eax
   6537e:	mov    rax,QWORD PTR [rsp]
   65382:	mov    r9,rdx
   65385:	lea    rdi,[rdx+0x10]
   65389:	lea    rcx,[r15+rax*1]
   6538d:	xor    eax,eax
   6538f:	mov    esi,DWORD PTR [r9+rax*1+0x3338]
   65397:	mov    DWORD PTR [rcx+rax*1],esi
   6539a:	add    rax,0x40
   6539e:	cmp    rax,0x100
   653a4:	jne    6538f <Mode_Decision_for_new_8x8IntraBlocks+0xc6f>
   653a6:	add    r9,0x4
   653aa:	add    rcx,0x4
   653ae:	cmp    r9,rdi
   653b1:	jne    6538d <Mode_Decision_for_new_8x8IntraBlocks+0xc6d>
   653b3:	add    r14d,0x1
   653b7:	cmp    r14d,0x4
   653bb:	jne    652ae <Mode_Decision_for_new_8x8IntraBlocks+0xb8e>
   653c1:	xor    eax,eax
   653c3:	mov    DWORD PTR [rsp+0x90],ebx
   653ca:	mov    r14,QWORD PTR [rsp+0x8]
   653cf:	lea    r13,[rip+0x3b16a]        # a0540 <rec_resB>
   653d6:	call   5d2d0 <reset_coding_state_cs_cm>
   653db:	mov    rax,QWORD PTR [rip+0x255c6]        # 8a9a8 <enc_picture>
   653e2:	mov    rdi,QWORD PTR [rip+0x231c7]        # 885b0 <img>
   653e9:	xor    r11d,r11d
   653ec:	lea    r12,[rip+0x4e92d]        # b3d20 <rec_resR>
   653f3:	mov    rcx,QWORD PTR [rax+0x1940]
   653fa:	mov    rax,QWORD PTR [rax+0x1918]
   65401:	mov    QWORD PTR [rsp+0x58],rdi
   65406:	mov    r9d,DWORD PTR [rdi+0x11bf0]
   6540d:	mov    QWORD PTR [rsp+0x20],rax
   65412:	mov    rax,QWORD PTR [rcx+0x8]
   65416:	mov    rbx,QWORD PTR [rcx]
   65419:	mov    QWORD PTR [rsp+0x108],rcx
   65421:	mov    QWORD PTR [rsp+0x28],rax
   65426:	mov    rax,QWORD PTR [rsp+0xd8]
   6542e:	mov    QWORD PTR [rsp+0x18],rbx
   65433:	mov    ebx,DWORD PTR [rdi+0x11bec]
   65439:	add    rax,rdi
   6543c:	add    rdi,QWORD PTR [rsp+0x68]
   65441:	mov    QWORD PTR [rsp+0x38],rax
   65446:	mov    rax,QWORD PTR [rsp+0x88]
   6544e:	mov    rbp,rdi
   65451:	mov    QWORD PTR [rsp+0x30],rax
   65456:	nop    WORD PTR cs:[rax+rax*1+0x0]
   65460:	mov    rcx,QWORD PTR [rsp+0x30]
   65465:	mov    rdi,QWORD PTR [rsp+0x18]
   6546a:	xor    edx,edx
   6546c:	mov    rsi,QWORD PTR [rsp+0x20]
   65471:	mov    rax,QWORD PTR [rsp+0x50]
   65476:	mov    r15,QWORD PTR [rdi+rcx*1]
   6547a:	mov    r8,QWORD PTR [rsp+0x38]
   6547f:	mov    rdi,QWORD PTR [rsi+rcx*1]
   65483:	add    r15,rax
   65486:	add    rdi,rax
   65489:	mov    QWORD PTR [rsp+0x8],rdi
   6548e:	mov    rdi,QWORD PTR [rsp+0x28]
   65493:	add    rax,QWORD PTR [rdi+rcx*1]
   65497:	mov    QWORD PTR [rsp],rax
   6549b:	nop    DWORD PTR [rax+rax*1+0x0]
   654a0:	mov    rax,rdx
   654a3:	shl    rax,0x5
   654a7:	mov    esi,DWORD PTR [r13+rax*1+0x0]
   654ac:	mov    edi,DWORD PTR [r14+rax*1]
   654b0:	mov    ecx,esi
   654b2:	sar    ecx,1
   654b4:	sub    edi,ecx
   654b6:	mov    ecx,DWORD PTR [r12+rax*1]
   654ba:	mov    r10d,edi
   654bd:	mov    eax,ecx
   654bf:	sar    eax,1
   654c1:	sub    r10d,eax
   654c4:	movzx  eax,WORD PTR [r8]
   654c8:	add    eax,r10d
   654cb:	cmovs  eax,r11d
   654cf:	cmp    eax,r9d
   654d2:	cmovg  eax,r9d
   654d6:	add    esi,edi
   654d8:	mov    WORD PTR [r15+rdx*1],ax
   654dd:	movzx  eax,WORD PTR [rbp+rdx*1+0x1cb8]
   654e5:	add    esi,eax
   654e7:	mov    rax,QWORD PTR [rsp+0x8]
   654ec:	cmovs  esi,r11d
   654f0:	cmp    esi,ebx
   654f2:	cmovg  esi,ebx
   654f5:	add    ecx,r10d
   654f8:	mov    WORD PTR [rax+rdx*1],si
   654fc:	movzx  eax,WORD PTR [r8+0x800]
   65504:	add    ecx,eax
   65506:	mov    rax,QWORD PTR [rsp]
   6550a:	cmovs  ecx,r11d
   6550e:	cmp    ecx,r9d
   65511:	cmovg  ecx,r9d
   65515:	add    r8,0x20
   65519:	mov    WORD PTR [rax+rdx*1],cx
   6551d:	add    rdx,0x2
   65521:	cmp    rdx,0x10
   65525:	jne    654a0 <Mode_Decision_for_new_8x8IntraBlocks+0xd80>
   6552b:	add    r14,0x4
   6552f:	add    r13,0x4
   65533:	add    r12,0x4
   65537:	add    rbp,0x10
   6553b:	lea    rax,[rip+0x5097e]        # b5ec0 <rec_resG+0x20>
   65542:	add    QWORD PTR [rsp+0x38],0x2
   65548:	add    QWORD PTR [rsp+0x30],0x8
   6554e:	cmp    r14,rax
   65551:	jne    65460 <Mode_Decision_for_new_8x8IntraBlocks+0xd40>
   65557:	mov    rax,QWORD PTR [rip+0x4d572]        # b2ad0 <imgUV_org>
   6555e:	mov    rbx,QWORD PTR [rsp+0x48]
   65563:	mov    r15,QWORD PTR [rip+0x51e5e]        # b73c8 <imgY_org>
   6556a:	mov    rsi,QWORD PTR [rsp+0x88]
   65572:	mov    r13,QWORD PTR [rax]
   65575:	mov    r12,QWORD PTR [rax+0x8]
   65579:	lea    rbp,[rbx+0x8]
   6557d:	xor    eax,eax
   6557f:	nop
   65580:	mov    rdi,QWORD PTR [rsp+0x20]
   65585:	mov    rbx,QWORD PTR [r15+rsi*1]
   65589:	mov    r10,QWORD PTR [r13+rsi*1+0x0]
   6558e:	mov    r8,QWORD PTR [r12+rsi*1]
   65592:	mov    r11,QWORD PTR [rdi+rsi*1]
   65596:	mov    rdi,QWORD PTR [rsp+0x18]
   6559b:	mov    rcx,QWORD PTR [rsp+0x48]
   655a0:	mov    r9,QWORD PTR [rdi+rsi*1]
   655a4:	mov    rdi,QWORD PTR [rsp+0x28]
   655a9:	mov    rdi,QWORD PTR [rdi+rsi*1]
   655ad:	nop    DWORD PTR [rax]
   655b0:	movzx  edx,WORD PTR [r11+rcx*2]
   655b5:	movzx  r14d,WORD PTR [rbx+rcx*2]
   655ba:	sub    r14d,edx
   655bd:	movzx  edx,WORD PTR [r9+rcx*2]
   655c2:	imul   r14d,r14d
   655c6:	add    r14d,eax
   655c9:	movzx  eax,WORD PTR [r10+rcx*2]
   655ce:	sub    eax,edx
   655d0:	movzx  edx,WORD PTR [r8+rcx*2]
   655d5:	imul   eax,eax
   655d8:	add    eax,r14d
   655db:	movzx  r14d,WORD PTR [rdi+rcx*2]
   655e0:	add    rcx,0x1
   655e4:	sub    edx,r14d
   655e7:	imul   edx,edx
   655ea:	add    eax,edx
   655ec:	cmp    rbp,rcx
   655ef:	jne    655b0 <Mode_Decision_for_new_8x8IntraBlocks+0xe90>
   655f1:	add    rsi,0x8
   655f5:	cmp    QWORD PTR [rsp+0x60],rsi
   655fa:	jne    65580 <Mode_Decision_for_new_8x8IntraBlocks+0xe60>
   655fc:	movsd  xmm1,QWORD PTR [rsp+0x98]
   65605:	pxor   xmm0,xmm0
   65609:	movsd  xmm7,QWORD PTR [rsp+0x80]
   65612:	cvtsi2sd xmm0,DWORD PTR [rsp+0x90]
   6561b:	mulsd  xmm1,xmm0
   6561f:	pxor   xmm0,xmm0
   65623:	cvtsi2sd xmm0,eax
   65627:	addsd  xmm0,xmm1
   6562b:	comisd xmm7,xmm0
   6562f:	jbe    64be3 <Mode_Decision_for_new_8x8IntraBlocks+0x4c3>
   65635:	mov    rax,QWORD PTR [rsp+0x58]
   6563a:	mov    rbx,QWORD PTR [rsp+0x118]
   65642:	xor    ecx,ecx
   65644:	mov    r10,QWORD PTR [rax+0x3738]
   6564b:	mov    rax,QWORD PTR [rip+0x23b06]        # 89158 <cofAC8x8>
   65652:	mov    r9,QWORD PTR [r10+rbx*1]
   65656:	mov    r8,QWORD PTR [rax+rbx*1]
   6565a:	xor    edx,edx
   6565c:	nop    DWORD PTR [rax+0x0]
   65660:	xor    eax,eax
   65662:	mov    rsi,QWORD PTR [r9+rax*1]
   65666:	mov    rsi,QWORD PTR [rsi+rcx*1]
   6566a:	mov    edi,DWORD PTR [rsi+rdx*1]
   6566d:	mov    rsi,QWORD PTR [r8+rax*1]
   65671:	add    rax,0x8
   65675:	mov    rsi,QWORD PTR [rsi+rcx*1]
   65679:	mov    DWORD PTR [rsi+rdx*1],edi
   6567c:	cmp    rax,0x20
   65680:	jne    65662 <Mode_Decision_for_new_8x8IntraBlocks+0xf42>
   65682:	add    rdx,0x4
   65686:	cmp    rdx,0x104
   6568d:	jne    65660 <Mode_Decision_for_new_8x8IntraBlocks+0xf40>
   6568f:	add    rcx,0x8
   65693:	cmp    rcx,0x10
   65697:	jne    6565a <Mode_Decision_for_new_8x8IntraBlocks+0xf3a>
   65699:	mov    rbx,QWORD PTR [rsp+0x128]
   656a1:	lea    r13,[rip+0x3b6d8]        # a0d80 <dc_level_temp>
   656a8:	xor    r15d,r15d
   656ab:	lea    rcx,[rip+0x7dbae]        # e3260 <cofAC8x8_chroma>
   656b2:	mov    r12,r13
   656b5:	lea    r14,[rip+0x38bc4]        # 9e280 <cbp_chroma_block_temp>
   656bc:	mov    r13,rax
   656bf:	mov    rbx,QWORD PTR [r10+rbx*1]
   656c3:	mov    QWORD PTR [rsp+0x80],rbx
   656cb:	mov    rbx,QWORD PTR [rsp+0x130]
   656d3:	mov    rbx,QWORD PTR [r10+rbx*1]
   656d7:	mov    QWORD PTR [rsp+0x90],rbx
   656df:	mov    rbx,QWORD PTR [rsp+0x108]
   656e7:	add    rbx,0x8
   656eb:	mov    QWORD PTR [rsp+0xa8],rbx
   656f3:	lea    rbx,[rip+0x4eac6]        # b41c0 <dc_level>
   656fa:	mov    QWORD PTR [rsp+0x38],rbx
   656ff:	lea    rbx,[rip+0x399ba]        # 9f0c0 <cbp_chroma_block>
   65706:	mov    QWORD PTR [rsp+0x30],rbx
   6570b:	lea    rbx,[rsp+0x320]
   65713:	mov    QWORD PTR [rsp+0x28],rbx
   65718:	mov    rax,QWORD PTR [rsp+0x80]
   65720:	mov    r8d,r15d
   65723:	mov    edx,r15d
   65726:	and    r8d,0x1
   6572a:	sar    edx,1
   6572c:	mov    r10,QWORD PTR [rax+r15*8]
   65730:	lea    edi,[rdx*4+0x0]
   65737:	xor    eax,eax
   65739:	lea    esi,[r8*4+0x0]
   65741:	mov    r9,QWORD PTR [r10]
   65744:	nop    DWORD PTR [rax+0x0]
   65748:	mov    r11d,DWORD PTR [r9+rax*1]
   6574c:	mov    DWORD PTR [rcx+rax*1],r11d
   65750:	add    rax,0x4
   65754:	cmp    rax,0x48
   65758:	jne    65748 <Mode_Decision_for_new_8x8IntraBlocks+0x1028>
   6575a:	mov    r9,QWORD PTR [r10+0x8]
   6575e:	xor    eax,eax
   65760:	mov    r10d,DWORD PTR [r9+rax*1]
   65764:	mov    DWORD PTR [rcx+rax*1+0x48],r10d
   65769:	add    rax,0x4
   6576d:	cmp    rax,0x48
   65771:	jne    65760 <Mode_Decision_for_new_8x8IntraBlocks+0x1040>
   65773:	mov    rax,QWORD PTR [rsp+0x90]
   6577b:	mov    r10,QWORD PTR [rax+r15*8]
   6577f:	xor    eax,eax
   65781:	mov    r9,QWORD PTR [r10]
   65784:	nop    DWORD PTR [rax+0x0]
   65788:	mov    r11d,DWORD PTR [r9+rax*1]
   6578c:	mov    DWORD PTR [rcx+rax*1+0x240],r11d
   65794:	add    rax,0x4
   65798:	cmp    rax,0x48
   6579c:	jne    65788 <Mode_Decision_for_new_8x8IntraBlocks+0x1068>
   6579e:	mov    r9,QWORD PTR [r10+0x8]
   657a2:	xor    eax,eax
   657a4:	nop    DWORD PTR [rax+0x0]
   657a8:	mov    r10d,DWORD PTR [r9+rax*1]
   657ac:	mov    DWORD PTR [rcx+rax*1+0x288],r10d
   657b4:	add    rax,0x4
   657b8:	cmp    rax,0x48
   657bc:	jne    657a8 <Mode_Decision_for_new_8x8IntraBlocks+0x1088>
   657be:	mov    rax,QWORD PTR [rsp+0xa8]
   657c6:	add    edx,DWORD PTR [rsp+0xf0]
   657cd:	movsxd rbx,edi
   657d0:	movsxd r10,esi
   657d3:	add    rbx,QWORD PTR [rsp+0xb8]
   657db:	movsxd rdx,edx
   657de:	add    r10,QWORD PTR [rsp+0x48]
   657e3:	mov    QWORD PTR [rsp],rax
   657e7:	shl    rbx,0x3
   657eb:	mov    r9,QWORD PTR [rsp+0x18]
   657f0:	add    r10,r10
   657f3:	mov    eax,DWORD PTR [rsp+0xcc]
   657fa:	lea    rbp,[r15*4+0x0]
   65802:	add    eax,r8d
   65805:	cdqe   
   65807:	lea    r11,[rdx+rax*4]
   6580b:	lea    rax,[rbx+0x20]
   6580f:	mov    QWORD PTR [rsp+0x8],rax
   65814:	shl    r11,0x2
   65818:	mov    eax,DWORD PTR [r12+r11*1]
   6581c:	mov    rdi,QWORD PTR [rsp+0x38]
   65821:	mov    rsi,rbp
   65824:	lea    r8,[r9+rbx*1]
   65828:	shl    rsi,0x4
   6582c:	add    r9,QWORD PTR [rsp+0x8]
   65831:	add    rsi,QWORD PTR [rsp+0x28]
   65836:	mov    DWORD PTR [rdi+r11*1],eax
   6583a:	mov    eax,DWORD PTR [r14+r11*1]
   6583e:	mov    rdi,QWORD PTR [rsp+0x30]
   65843:	mov    DWORD PTR [rdi+r11*1],eax
   65847:	mov    rdi,QWORD PTR [r8]
   6584a:	xor    eax,eax
   6584c:	add    rdi,r10
   6584f:	movzx  edx,WORD PTR [rdi+rax*2]
   65853:	mov    DWORD PTR [rsi+rax*4],edx
   65856:	add    rax,0x1
   6585a:	cmp    rax,0x4
   6585e:	jne    6584f <Mode_Decision_for_new_8x8IntraBlocks+0x112f>
   65860:	add    r8,0x8
   65864:	add    rsi,0x10
   65868:	cmp    r9,r8
   6586b:	jne    65847 <Mode_Decision_for_new_8x8IntraBlocks+0x1127>
   6586d:	add    rbp,0x10
   65871:	add    r11,0x40
   65875:	cmp    r13,rbp
   65878:	je     6588b <Mode_Decision_for_new_8x8IntraBlocks+0x116b>
   6587a:	mov    rax,QWORD PTR [rsp]
   6587e:	mov    r9,QWORD PTR [rax]
   65881:	add    rax,0x8
   65885:	mov    QWORD PTR [rsp],rax
   65889:	jmp    65818 <Mode_Decision_for_new_8x8IntraBlocks+0x10f8>
   6588b:	add    r15,0x1
   6588f:	add    r13,0x4
   65893:	add    rcx,0x90
   6589a:	cmp    r15,0x4
   6589e:	jne    65718 <Mode_Decision_for_new_8x8IntraBlocks+0xff8>
   658a4:	mov    r9,QWORD PTR [rsp+0x50]
   658a9:	mov    rsi,QWORD PTR [rsp+0x20]
   658ae:	lea    rcx,[rsp+0x1a0]
   658b6:	lea    r8,[rsp+0x220]
   658be:	add    rsi,QWORD PTR [rsp+0x88]
   658c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   658d0:	mov    rdi,QWORD PTR [rsi]
   658d3:	xor    eax,eax
   658d5:	add    rdi,r9
   658d8:	nop    DWORD PTR [rax+rax*1+0x0]
   658e0:	movzx  edx,WORD PTR [rdi+rax*1]
   658e4:	mov    WORD PTR [rcx+rax*1],dx
   658e8:	add    rax,0x2
   658ec:	cmp    rax,0x10
   658f0:	jne    658e0 <Mode_Decision_for_new_8x8IntraBlocks+0x11c0>
   658f2:	add    rcx,0x10
   658f6:	add    rsi,0x8
   658fa:	cmp    r8,rcx
   658fd:	jne    658d0 <Mode_Decision_for_new_8x8IntraBlocks+0x11b0>
   658ff:	movsd  QWORD PTR [rsp+0x80],xmm0
   65908:	mov    eax,DWORD PTR [rsp+0x150]
   6590f:	mov    DWORD PTR [rsp+0xf4],eax
   65916:	mov    eax,DWORD PTR [rsp+0x10]
   6591a:	mov    DWORD PTR [rsp+0xa8],eax
   65921:	jmp    64be3 <Mode_Decision_for_new_8x8IntraBlocks+0x4c3>
   65926:	mov    edi,DWORD PTR [rsp+0x154]
   6592d:	test   edi,edi
   6592f:	jne    64ac4 <Mode_Decision_for_new_8x8IntraBlocks+0x3a4>
   65935:	jmp    64ab5 <Mode_Decision_for_new_8x8IntraBlocks+0x395>
   6593a:	mov    rsi,QWORD PTR [rsp+0x78]
   6593f:	lea    r11,[rsp+0x220]
   65947:	mov    r12,QWORD PTR [rsp+0x40]
   6594c:	xor    r9d,r9d
   6594f:	mov    rbp,QWORD PTR [rsp+0xa0]
   65957:	mov    rdi,r11
   6595a:	shl    rsi,0x4
   6595e:	add    rsi,QWORD PTR [rsp+0x58]
   65963:	nop    DWORD PTR [rax+rax*1+0x0]
   65968:	mov    r8,QWORD PTR [rbp+0x0]
   6596c:	xor    eax,eax
   6596e:	add    r8,r12
   65971:	nop    DWORD PTR [rax+0x0]
   65978:	movzx  edx,WORD PTR [r8+rax*1]
   6597d:	movzx  ecx,WORD PTR [rsi+rax*1+0x1cb8]
   65985:	sub    edx,ecx
   65987:	mov    DWORD PTR [rdi+rax*2],edx
   6598a:	add    rax,0x2
   6598e:	cmp    rax,0x10
   65992:	jne    65978 <Mode_Decision_for_new_8x8IntraBlocks+0x1258>
   65994:	add    r9d,0x8
   65998:	add    rbp,0x8
   6599c:	add    rsi,0x10
   659a0:	add    rdi,0x20
   659a4:	cmp    r9d,0x40
   659a8:	jne    65968 <Mode_Decision_for_new_8x8IntraBlocks+0x1248>
   659aa:	mov    edi,DWORD PTR [rsp+0x10]
   659ae:	cmp    DWORD PTR [rsp+0xc8],edi
   659b5:	je     65a1d <Mode_Decision_for_new_8x8IntraBlocks+0x12fd>
   659b7:	movsd  xmm2,QWORD PTR [rip+0xdbb1]        # 73570 <quant_coef+0x8b0>
   659bf:	movsd  xmm3,QWORD PTR [rip+0xdb99]        # 73560 <quant_coef+0x8a0>
   659c7:	movsd  xmm0,QWORD PTR [rsp+0x98]
   659d0:	mulsd  xmm0,QWORD PTR [rip+0x50b8]        # 6aa90 <QP_SCALE_CR+0x50>
   659d8:	movapd xmm1,xmm0
   659dc:	andpd  xmm1,xmm2
   659e0:	ucomisd xmm3,xmm1
   659e4:	jbe    65a19 <Mode_Decision_for_new_8x8IntraBlocks+0x12f9>
   659e6:	cvttsd2si rax,xmm0
   659eb:	pxor   xmm1,xmm1
   659ef:	movsd  xmm4,QWORD PTR [rip+0xcdd1]        # 727c8 <INIT_MB_TYPE_I+0x108>
   659f7:	andnpd xmm2,xmm0
   659fb:	cvtsi2sd xmm1,rax
   65a00:	movapd xmm3,xmm1
   65a04:	cmpnlesd xmm3,xmm0
   65a09:	movapd xmm0,xmm2
   65a0d:	andpd  xmm3,xmm4
   65a11:	subsd  xmm1,xmm3
   65a15:	orpd   xmm0,xmm1
   65a19:	cvttsd2si ebx,xmm0
   65a1d:	mov    esi,DWORD PTR [r10+0x18]
   65a21:	mov    rdi,r11
   65a24:	call   3bd40 <SATD8X8>
   65a29:	add    ebx,eax
   65a2b:	mov    rax,QWORD PTR [rsp+0xc0]
   65a33:	cmp    DWORD PTR [rax],ebx
   65a35:	jle    64bd7 <Mode_Decision_for_new_8x8IntraBlocks+0x4b7>
   65a3b:	mov    rax,QWORD PTR [rsp+0xc0]
   65a43:	mov    DWORD PTR [rax],ebx
   65a45:	mov    rax,QWORD PTR [rip+0x22b64]        # 885b0 <img>
   65a4c:	mov    QWORD PTR [rsp+0x58],rax
   65a51:	mov    eax,DWORD PTR [rsp+0x10]
   65a55:	mov    DWORD PTR [rsp+0xa8],eax
   65a5c:	jmp    64be3 <Mode_Decision_for_new_8x8IntraBlocks+0x4c3>
   65a61:	mov    edx,0x1
   65a66:	jmp    64c95 <Mode_Decision_for_new_8x8IntraBlocks+0x575>
   65a6b:	mov    rax,QWORD PTR [rip+0x22b3e]        # 885b0 <img>
   65a72:	mov    rbx,QWORD PTR [rsp+0x118]
   65a7a:	xor    ecx,ecx
   65a7c:	mov    rax,QWORD PTR [rax+0x3738]
   65a83:	mov    r9,QWORD PTR [rax+rbx*1]
   65a87:	mov    rax,QWORD PTR [rip+0x236ca]        # 89158 <cofAC8x8>
   65a8e:	mov    r8,QWORD PTR [rax+rbx*1]
   65a92:	xor    edx,edx
   65a94:	nop    DWORD PTR [rax+0x0]
   65a98:	xor    eax,eax
   65a9a:	mov    rsi,QWORD PTR [r9+rax*1]
   65a9e:	mov    rsi,QWORD PTR [rsi+rcx*1]
   65aa2:	mov    edi,DWORD PTR [rsi+rdx*1]
   65aa5:	mov    rsi,QWORD PTR [r8+rax*1]
   65aa9:	add    rax,0x8
   65aad:	mov    rsi,QWORD PTR [rsi+rcx*1]
   65ab1:	mov    DWORD PTR [rsi+rdx*1],edi
   65ab4:	cmp    rax,0x20
   65ab8:	jne    65a9a <Mode_Decision_for_new_8x8IntraBlocks+0x137a>
   65aba:	add    rdx,0x4
   65abe:	cmp    rdx,0x104
   65ac5:	jne    65a98 <Mode_Decision_for_new_8x8IntraBlocks+0x1378>
   65ac7:	add    rcx,0x8
   65acb:	cmp    rcx,0x10
   65acf:	jne    65a92 <Mode_Decision_for_new_8x8IntraBlocks+0x1372>
   65ad1:	mov    rax,QWORD PTR [rip+0x24ed0]        # 8a9a8 <enc_picture>
   65ad8:	mov    r9,QWORD PTR [rsp+0x50]
   65add:	lea    rcx,[rsp+0x1a0]
   65ae5:	lea    r8,[rsp+0x220]
   65aed:	mov    rdi,QWORD PTR [rsp+0x88]
   65af5:	add    rdi,QWORD PTR [rax+0x1918]
   65afc:	nop    DWORD PTR [rax+0x0]
   65b00:	mov    rsi,QWORD PTR [rdi]
   65b03:	xor    eax,eax
   65b05:	add    rsi,r9
   65b08:	nop    DWORD PTR [rax+rax*1+0x0]
   65b10:	movzx  edx,WORD PTR [rsi+rax*1]
   65b14:	mov    WORD PTR [rcx+rax*1],dx
   65b18:	add    rax,0x2
   65b1c:	cmp    rax,0x10
   65b20:	jne    65b10 <Mode_Decision_for_new_8x8IntraBlocks+0x13f0>
   65b22:	add    rcx,0x10
   65b26:	add    rdi,0x8
   65b2a:	cmp    r8,rcx
   65b2d:	jne    65b00 <Mode_Decision_for_new_8x8IntraBlocks+0x13e0>
   65b2f:	movsd  QWORD PTR [rsp+0x80],xmm0
   65b38:	mov    eax,DWORD PTR [rsp+0x150]
   65b3f:	mov    DWORD PTR [rsp+0xf4],eax
   65b46:	mov    eax,DWORD PTR [rsp+0x10]
   65b4a:	mov    DWORD PTR [rsp+0xa8],eax
   65b51:	jmp    64bd0 <Mode_Decision_for_new_8x8IntraBlocks+0x4b0>
   65b56:	test   edx,edx
   65b58:	je     648ce <Mode_Decision_for_new_8x8IntraBlocks+0x1ae>
   65b5e:	mov    rdx,QWORD PTR [rip+0x22a4b]        # 885b0 <img>
   65b65:	movsxd rsi,DWORD PTR [rsp+0x170]
   65b6d:	movsxd rcx,DWORD PTR [rsp+0x174]
   65b75:	mov    rdx,QWORD PTR [rdx+0x68]
   65b79:	mov    rdx,QWORD PTR [rdx+rsi*8]
   65b7d:	mov    edx,DWORD PTR [rdx+rcx*4]
   65b80:	test   eax,eax
   65b82:	js     6618d <Mode_Decision_for_new_8x8IntraBlocks+0x1a6d>
   65b88:	test   edx,edx
   65b8a:	js     6618d <Mode_Decision_for_new_8x8IntraBlocks+0x1a6d>
   65b90:	cmp    eax,edx
   65b92:	cmovle edx,eax
   65b95:	mov    DWORD PTR [rsp+0xc8],edx
   65b9c:	jmp    648ce <Mode_Decision_for_new_8x8IntraBlocks+0x1ae>
   65ba1:	test   ecx,ecx
   65ba3:	je     648b0 <Mode_Decision_for_new_8x8IntraBlocks+0x190>
   65ba9:	mov    rax,QWORD PTR [rip+0x22a00]        # 885b0 <img>
   65bb0:	movsxd rsi,DWORD PTR [rsp+0x190]
   65bb8:	movsxd rcx,DWORD PTR [rsp+0x194]
   65bc0:	mov    rax,QWORD PTR [rax+0x68]
   65bc4:	mov    rax,QWORD PTR [rax+rsi*8]
   65bc8:	mov    eax,DWORD PTR [rax+rcx*4]
   65bcb:	jmp    648b0 <Mode_Decision_for_new_8x8IntraBlocks+0x190>
   65bd0:	test   ecx,ecx
   65bd2:	je     65bed <Mode_Decision_for_new_8x8IntraBlocks+0x14cd>
   65bd4:	mov    rax,QWORD PTR [rip+0x229d5]        # 885b0 <img>
   65bdb:	movsxd rdx,DWORD PTR [rsp+0x184]
   65be3:	mov    rax,QWORD PTR [rax+0x11868]
   65bea:	mov    ecx,DWORD PTR [rax+rdx*4]
   65bed:	mov    edx,DWORD PTR [rsp+0x160]
   65bf4:	mov    DWORD PTR [rsp+0x180],ecx
   65bfb:	test   edx,edx
   65bfd:	je     65c18 <Mode_Decision_for_new_8x8IntraBlocks+0x14f8>
   65bff:	mov    rax,QWORD PTR [rip+0x229aa]        # 885b0 <img>
   65c06:	movsxd rdx,DWORD PTR [rsp+0x164]
   65c0e:	mov    rax,QWORD PTR [rax+0x11868]
   65c15:	mov    edx,DWORD PTR [rax+rdx*4]
   65c18:	mov    DWORD PTR [rsp+0x160],edx
   65c1f:	jmp    64893 <Mode_Decision_for_new_8x8IntraBlocks+0x173>
   65c24:	mov    rax,QWORD PTR [rip+0x4cea5]        # b2ad0 <imgUV_org>
   65c2b:	mov    rbx,QWORD PTR [rsp+0xe8]
   65c33:	lea    r11,[rip+0x506a6]        # b62e0 <resTrans_G>
   65c3a:	lea    r12,[rip+0x3ad1f]        # a0960 <resTrans_B>
   65c41:	mov    r10,QWORD PTR [rsp+0xf8]
   65c49:	mov    r13,QWORD PTR [rsp+0xb0]
   65c51:	mov    QWORD PTR [rsp+0x30],r11
   65c56:	mov    rbp,r11
   65c59:	mov    rdi,QWORD PTR [rax]
   65c5c:	mov    r8,QWORD PTR [rsp+0xe0]
   65c64:	add    rdi,rbx
   65c67:	mov    QWORD PTR [rsp+0x10],rdi
   65c6c:	mov    rdi,QWORD PTR [rip+0x51755]        # b73c8 <imgY_org>
   65c73:	add    rdi,rbx
   65c76:	add    rbx,QWORD PTR [rax+0x8]
   65c7a:	movsxd rax,DWORD PTR [rsp+0xa8]
   65c82:	mov    QWORD PTR [rsp+0x8],rdi
   65c87:	shl    rax,0x7
   65c8b:	mov    QWORD PTR [rsp],rbx
   65c8f:	lea    rbx,[rip+0x4ce4a]        # b2ae0 <resTrans_R>
   65c96:	add    r10,rax
   65c99:	mov    QWORD PTR [rsp+0x48],rax
   65c9e:	mov    rax,QWORD PTR [rsp+0x58]
   65ca3:	add    r10,rax
   65ca6:	add    r13,rax
   65ca9:	add    r8,rax
   65cac:	mov    rax,QWORD PTR [rsp+0x10]
   65cb1:	mov    rsi,QWORD PTR [rsp+0x40]
   65cb6:	xor    ecx,ecx
   65cb8:	mov    r15,QWORD PTR [rax]
   65cbb:	mov    rax,QWORD PTR [rsp+0x8]
   65cc0:	mov    r14,QWORD PTR [rax]
   65cc3:	mov    rax,QWORD PTR [rsp]
   65cc7:	mov    r11,QWORD PTR [rax]
   65cca:	nop    WORD PTR [rax+rax*1+0x0]
   65cd0:	movzx  r9d,WORD PTR [r10+rsi*1+0x1cb8]
   65cd9:	mov    WORD PTR [r13+rcx*1+0x3138],r9w
   65ce2:	movzx  eax,WORD PTR [r15+rsi*1]
   65ce7:	movzx  edx,WORD PTR [r8+rcx*1+0x2138]
   65cf0:	sub    eax,edx
   65cf2:	movzx  edx,WORD PTR [r14+rsi*1]
   65cf7:	mov    edi,eax
   65cf9:	movzx  eax,WORD PTR [r11+rsi*1]
   65cfe:	add    rsi,0x2
   65d02:	sub    edx,r9d
   65d05:	movzx  r9d,WORD PTR [r8+rcx*1+0x2938]
   65d0e:	sub    eax,r9d
   65d11:	sub    eax,edi
   65d13:	mov    DWORD PTR [rbx+rcx*2],eax
   65d16:	sar    eax,1
   65d18:	add    eax,edi
   65d1a:	sub    edx,eax
   65d1c:	mov    DWORD PTR [r12+rcx*2],edx
   65d20:	sar    edx,1
   65d22:	add    eax,edx
   65d24:	mov    DWORD PTR [rbp+rcx*2+0x0],eax
   65d28:	add    rcx,0x20
   65d2c:	cmp    rcx,0x100
   65d33:	jne    65cd0 <Mode_Decision_for_new_8x8IntraBlocks+0x15b0>
   65d35:	add    rbx,0x4
   65d39:	add    QWORD PTR [rsp+0x10],0x8
   65d3f:	add    r10,0x10
   65d43:	add    r13,0x2
   65d47:	lea    rax,[rip+0x4cdb2]        # b2b00 <resTrans_R+0x20>
   65d4e:	add    r8,0x2
   65d52:	add    r12,0x4
   65d56:	add    rbp,0x4
   65d5a:	add    QWORD PTR [rsp+0x8],0x8
   65d60:	add    QWORD PTR [rsp],0x8
   65d65:	cmp    rax,rbx
   65d68:	jne    65cac <Mode_Decision_for_new_8x8IntraBlocks+0x158c>
   65d6e:	mov    r11,QWORD PTR [rsp+0x30]
   65d73:	mov    rcx,QWORD PTR [rsp+0x58]
   65d78:	lea    rsi,[rip+0x50581]        # b6300 <resTrans_G+0x20>
   65d7f:	xor    eax,eax
   65d81:	nop    DWORD PTR [rax+0x0]
   65d88:	mov    edx,DWORD PTR [r11+rax*1]
   65d8c:	mov    DWORD PTR [rcx+rax*1+0x3338],edx
   65d93:	add    rax,0x40
   65d97:	cmp    rax,0x200
   65d9d:	jne    65d88 <Mode_Decision_for_new_8x8IntraBlocks+0x1668>
   65d9f:	add    r11,0x4
   65da3:	add    rcx,0x4
   65da7:	cmp    rsi,r11
   65daa:	jne    65d7f <Mode_Decision_for_new_8x8IntraBlocks+0x165f>
   65dac:	mov    edi,DWORD PTR [rsp+0x74]
   65db0:	lea    rsi,[rsp+0x14c]
   65db8:	mov    edx,0x1
   65dbd:	lea    r14,[rip+0x500dc]        # b5ea0 <rec_resG>
   65dc4:	call   63790 <dct_luma8x8>
   65dc9:	mov    rcx,r14
   65dcc:	mov    DWORD PTR [rsp+0xf4],eax
   65dd3:	mov    rax,QWORD PTR [rip+0x227d6]        # 885b0 <img>
   65dda:	mov    rsi,rax
   65ddd:	xor    edx,edx
   65ddf:	nop
   65de0:	mov    edi,DWORD PTR [rsi+rdx*1+0x3338]
   65de7:	mov    DWORD PTR [rcx+rdx*1],edi
   65dea:	add    rdx,0x40
   65dee:	cmp    rdx,0x200
   65df5:	jne    65de0 <Mode_Decision_for_new_8x8IntraBlocks+0x16c0>
   65df7:	add    rcx,0x4
   65dfb:	lea    rbx,[rip+0x500be]        # b5ec0 <rec_resG+0x20>
   65e02:	add    rsi,0x4
   65e06:	cmp    rbx,rcx
   65e09:	jne    65ddd <Mode_Decision_for_new_8x8IntraBlocks+0x16bd>
   65e0b:	mov    ebx,DWORD PTR [rsp+0x74]
   65e0f:	mov    ebp,DWORD PTR [rsp+0x28]
   65e13:	mov    QWORD PTR [rsp+0x28],r14
   65e18:	lea    r13,[rip+0x3af61]        # a0d80 <dc_level_temp>
   65e1f:	lea    r15,[rip+0x3929a]        # 9f0c0 <cbp_chroma_block>
   65e26:	lea    rsi,[rax+0x10]
   65e2a:	lea    edi,[rbx+0x4]
   65e2d:	add    ebx,0x8
   65e30:	mov    DWORD PTR [rsp+0x10],ebx
   65e34:	lea    rbx,[rip+0x4dee5]        # b3d20 <rec_resR>
   65e3b:	mov    QWORD PTR [rsp+0x38],rbx
   65e40:	lea    rbx,[rip+0x3a6f9]        # a0540 <rec_resB>
   65e47:	mov    DWORD PTR [rsp+0x8],edi
   65e4b:	mov    QWORD PTR [rsp+0x30],rbx
   65e50:	lea    rbx,[rip+0x4e369]        # b41c0 <dc_level>
   65e57:	mov    QWORD PTR [rsp],rbx
   65e5b:	mov    rbx,r13
   65e5e:	mov    r13d,ebp
   65e61:	mov    r12d,ebp
   65e64:	lea    rdi,[rip+0x4cc75]        # b2ae0 <resTrans_R>
   65e6b:	and    r13d,0x1
   65e6f:	sar    r12d,1
   65e72:	lea    ecx,[r13*4+0x0]
   65e7a:	lea    edx,[r12*4+0x0]
   65e82:	movsxd rcx,ecx
   65e85:	movsxd rdx,edx
   65e88:	shl    rcx,0x4
   65e8c:	add    rcx,rdx
   65e8f:	mov    rdx,rax
   65e92:	lea    r14,[rcx*4+0x0]
   65e9a:	lea    r10,[rdi+r14*1]
   65e9e:	xor    eax,eax
   65ea0:	mov    ecx,DWORD PTR [r10+rax*1]
   65ea4:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   65eab:	add    rax,0x40
   65eaf:	cmp    rax,0x100
   65eb5:	jne    65ea0 <Mode_Decision_for_new_8x8IntraBlocks+0x1780>
   65eb7:	add    rdx,0x4
   65ebb:	add    r10,0x4
   65ebf:	cmp    rsi,rdx
   65ec2:	jne    65e9e <Mode_Decision_for_new_8x8IntraBlocks+0x177e>
   65ec4:	mov    esi,DWORD PTR [rsp+0x8]
   65ec8:	add    r13d,DWORD PTR [rsp+0x18]
   65ecd:	mov    edx,ebp
   65ecf:	xor    edi,edi
   65ed1:	add    r12d,DWORD PTR [rsp+0x20]
   65ed6:	movsxd r13,r13d
   65ed9:	call   9f00 <dct_chroma4x4>
   65ede:	movsxd r12,r12d
   65ee1:	mov    rdi,QWORD PTR [rsp]
   65ee5:	mov    r10d,eax
   65ee8:	lea    rax,[r12+r13*4]
   65eec:	mov    edx,DWORD PTR [rbx+rax*4]
   65eef:	mov    DWORD PTR [r15+rax*4],r10d
   65ef3:	mov    DWORD PTR [rdi+rax*4],edx
   65ef6:	mov    rax,QWORD PTR [rsp+0x38]
   65efb:	mov    rdx,QWORD PTR [rip+0x226ae]        # 885b0 <img>
   65f02:	lea    r10,[r14+rax*1]
   65f06:	lea    rax,[rip+0x3aa53]        # a0960 <resTrans_B>
   65f0d:	lea    rdi,[rax+r14*1]
   65f11:	lea    r11,[rdx+0x10]
   65f15:	xor    eax,eax
   65f17:	mov    ecx,DWORD PTR [rdx+rax*1+0x3338]
   65f1e:	mov    DWORD PTR [r10+rax*1],ecx
   65f22:	mov    ecx,DWORD PTR [rdi+rax*1]
   65f25:	mov    DWORD PTR [rdx+rax*1+0x3338],ecx
   65f2c:	add    rax,0x40
   65f30:	cmp    rax,0x100
   65f36:	jne    65f17 <Mode_Decision_for_new_8x8IntraBlocks+0x17f7>
   65f38:	add    rdx,0x4
   65f3c:	add    r10,0x4
   65f40:	add    rdi,0x4
   65f44:	cmp    r11,rdx
   65f47:	jne    65f15 <Mode_Decision_for_new_8x8IntraBlocks+0x17f5>
   65f49:	mov    esi,DWORD PTR [rsp+0x10]
   65f4d:	mov    edx,ebp
   65f4f:	mov    edi,0x1
   65f54:	call   9f00 <dct_chroma4x4>
   65f59:	mov    rdi,QWORD PTR [rsp]
   65f5d:	mov    r10d,eax
   65f60:	lea    rax,[r12+r13*4+0x10]
   65f65:	mov    edx,DWORD PTR [rbx+rax*4]
   65f68:	mov    DWORD PTR [r15+rax*4],r10d
   65f6c:	mov    DWORD PTR [rdi+rax*4],edx
   65f6f:	mov    rax,QWORD PTR [rip+0x2263a]        # 885b0 <img>
   65f76:	mov    rdi,QWORD PTR [rsp+0x30]
   65f7b:	mov    r10,rax
   65f7e:	lea    rsi,[rax+0x10]
   65f82:	lea    rcx,[r14+rdi*1]
   65f86:	xor    edx,edx
   65f88:	mov    edi,DWORD PTR [r10+rdx*1+0x3338]
   65f90:	mov    DWORD PTR [rcx+rdx*1],edi
   65f93:	add    rdx,0x40
   65f97:	cmp    rdx,0x100
   65f9e:	jne    65f88 <Mode_Decision_for_new_8x8IntraBlocks+0x1868>
   65fa0:	add    r10,0x4
   65fa4:	add    rcx,0x4
   65fa8:	cmp    rsi,r10
   65fab:	jne    65f86 <Mode_Decision_for_new_8x8IntraBlocks+0x1866>
   65fad:	add    ebp,0x1
   65fb0:	cmp    ebp,0x4
   65fb3:	jne    65e5e <Mode_Decision_for_new_8x8IntraBlocks+0x173e>
   65fb9:	mov    rcx,QWORD PTR [rip+0x249e8]        # 8a9a8 <enc_picture>
   65fc0:	mov    r14,QWORD PTR [rsp+0x28]
   65fc5:	lea    r12,[rip+0x3a574]        # a0540 <rec_resB>
   65fcc:	lea    rbp,[rip+0x4dd4d]        # b3d20 <rec_resR>
   65fd3:	mov    r13,QWORD PTR [rsp+0x48]
   65fd8:	mov    r9d,DWORD PTR [rax+0x11bf0]
   65fdf:	xor    r11d,r11d
   65fe2:	mov    rdx,QWORD PTR [rcx+0x1940]
   65fe9:	mov    rdi,QWORD PTR [rcx+0x1918]
   65ff0:	add    r13,rax
   65ff3:	mov    QWORD PTR [rsp+0x28],rdi
   65ff8:	mov    rdi,QWORD PTR [rdx+0x8]
   65ffc:	mov    rbx,QWORD PTR [rdx]
   65fff:	mov    QWORD PTR [rsp+0x30],rdi
   66004:	mov    rdi,QWORD PTR [rsp+0xd8]
   6600c:	mov    QWORD PTR [rsp+0x20],rbx
   66011:	mov    ebx,DWORD PTR [rax+0x11bec]
   66017:	add    rdi,rax
   6601a:	mov    QWORD PTR [rsp+0x18],rdi
   6601f:	mov    rcx,QWORD PTR [rsp+0x88]
   66027:	mov    rsi,QWORD PTR [rsp+0x20]
   6602c:	xor    edx,edx
   6602e:	mov    rax,QWORD PTR [rsp+0x50]
   66033:	mov    r8,QWORD PTR [rsp+0x18]
   66038:	mov    rdi,QWORD PTR [rsi+rcx*1]
   6603c:	mov    rsi,QWORD PTR [rsp+0x28]
   66041:	add    rdi,rax
   66044:	mov    r15,QWORD PTR [rsi+rcx*1]
   66048:	mov    QWORD PTR [rsp+0x8],rdi
   6604d:	mov    rdi,rcx
   66050:	mov    rcx,QWORD PTR [rsp+0x30]
   66055:	add    r15,rax
   66058:	add    rax,QWORD PTR [rcx+rdi*1]
   6605c:	mov    QWORD PTR [rsp+0x10],r15
   66061:	mov    QWORD PTR [rsp],rax
   66065:	nop    DWORD PTR [rax]
   66068:	mov    rax,rdx
   6606b:	mov    r15,QWORD PTR [rsp+0x8]
   66070:	shl    rax,0x5
   66074:	mov    esi,DWORD PTR [r12+rax*1]
   66078:	mov    edi,DWORD PTR [r14+rax*1]
   6607c:	mov    ecx,esi
   6607e:	sar    ecx,1
   66080:	sub    edi,ecx
   66082:	mov    ecx,DWORD PTR [rbp+rax*1+0x0]
   66086:	mov    r10d,edi
   66089:	mov    eax,ecx
   6608b:	sar    eax,1
   6608d:	sub    r10d,eax
   66090:	movzx  eax,WORD PTR [r8]
   66094:	add    eax,r10d
   66097:	cmovs  eax,r11d
   6609b:	cmp    eax,r9d
   6609e:	cmovg  eax,r9d
   660a2:	add    esi,edi
   660a4:	mov    WORD PTR [r15+rdx*1],ax
   660a9:	movzx  eax,WORD PTR [r13+rdx*1+0x1cb8]
   660b2:	add    esi,eax
   660b4:	mov    rax,QWORD PTR [rsp+0x10]
   660b9:	cmovs  esi,r11d
   660bd:	cmp    esi,ebx
   660bf:	cmovg  esi,ebx
   660c2:	add    ecx,r10d
   660c5:	mov    WORD PTR [rax+rdx*1],si
   660c9:	movzx  eax,WORD PTR [r8+0x800]
   660d1:	add    ecx,eax
   660d3:	mov    rax,QWORD PTR [rsp]
   660d7:	cmovs  ecx,r11d
   660db:	cmp    ecx,r9d
   660de:	cmovg  ecx,r9d
   660e2:	add    r8,0x20
   660e6:	mov    WORD PTR [rax+rdx*1],cx
   660ea:	add    rdx,0x2
   660ee:	cmp    rdx,0x10
   660f2:	jne    66068 <Mode_Decision_for_new_8x8IntraBlocks+0x1948>
   660f8:	add    r14,0x4
   660fc:	add    r12,0x4
   66100:	add    rbp,0x4
   66104:	add    r13,0x10
   66108:	lea    rax,[rip+0x4fdb1]        # b5ec0 <rec_resG+0x20>
   6610f:	add    QWORD PTR [rsp+0x18],0x2
   66115:	add    QWORD PTR [rsp+0x88],0x8
   6611e:	cmp    rax,r14
   66121:	jne    6601f <Mode_Decision_for_new_8x8IntraBlocks+0x18ff>
   66127:	jmp    6503e <Mode_Decision_for_new_8x8IntraBlocks+0x91e>
   6612c:	mov    rdx,QWORD PTR [rip+0x2247d]        # 885b0 <img>
   66133:	movsxd rsi,DWORD PTR [rsp+0x170]
   6613b:	movsxd rcx,DWORD PTR [rsp+0x174]
   66143:	mov    rdx,QWORD PTR [rdx+0x70]
   66147:	mov    rdx,QWORD PTR [rdx+rsi*8]
   6614b:	mov    edx,DWORD PTR [rdx+rcx*4]
   6614e:	jmp    65b80 <Mode_Decision_for_new_8x8IntraBlocks+0x1460>
   66153:	mov    rax,QWORD PTR [rip+0x22456]        # 885b0 <img>
   6615a:	movsxd rsi,DWORD PTR [rsp+0x190]
   66162:	movsxd rcx,DWORD PTR [rsp+0x194]
   6616a:	mov    rax,QWORD PTR [rax+0x70]
   6616e:	mov    rax,QWORD PTR [rax+rsi*8]
   66172:	mov    eax,DWORD PTR [rax+rcx*4]
   66175:	jmp    648b0 <Mode_Decision_for_new_8x8IntraBlocks+0x190>
   6617a:	add    r11,0x1
   6617e:	cmp    r11,0x4
   66182:	jne    64ee5 <Mode_Decision_for_new_8x8IntraBlocks+0x7c5>
   66188:	jmp    6503e <Mode_Decision_for_new_8x8IntraBlocks+0x91e>
   6618d:	mov    DWORD PTR [rsp+0xc8],0x2
   66198:	jmp    648ce <Mode_Decision_for_new_8x8IntraBlocks+0x1ae>
   6619d:	call   4390 <__stack_chk_fail@plt>
   661a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   661ad:	nop    DWORD PTR [rax]

00000000000661b0 <Mode_Decision_for_new_Intra8x8Macroblock>:
   661b0:	endbr64 
   661b4:	push   r14
   661b6:	push   r13
   661b8:	push   r12
   661ba:	push   rbp
   661bb:	push   rbx
   661bc:	mov    rbx,rdi
   661bf:	sub    rsp,0x20
   661c3:	movsd  xmm1,QWORD PTR [rip+0x114d5]        # 776a0 <b8_mode_table.7699+0x40>
   661cb:	movsd  xmm3,QWORD PTR [rip+0xd39d]        # 73570 <quant_coef+0x8b0>
   661d3:	mov    rax,QWORD PTR fs:0x28
   661dc:	mov    QWORD PTR [rsp+0x18],rax
   661e1:	xor    eax,eax
   661e3:	movsd  xmm4,QWORD PTR [rip+0xd375]        # 73560 <quant_coef+0x8a0>
   661eb:	mulsd  xmm1,xmm0
   661ef:	addsd  xmm1,QWORD PTR [rip+0xfe99]        # 76090 <QP2QUANT+0xb0>
   661f7:	movapd xmm2,xmm1
   661fb:	andpd  xmm2,xmm3
   661ff:	ucomisd xmm4,xmm2
   66203:	jbe    66238 <Mode_Decision_for_new_Intra8x8Macroblock+0x88>
   66205:	cvttsd2si rax,xmm1
   6620a:	pxor   xmm2,xmm2
   6620e:	movsd  xmm5,QWORD PTR [rip+0xc5b2]        # 727c8 <INIT_MB_TYPE_I+0x108>
   66216:	andnpd xmm3,xmm1
   6621a:	cvtsi2sd xmm2,rax
   6621f:	movapd xmm4,xmm2
   66223:	cmpnlesd xmm4,xmm1
   66228:	movapd xmm1,xmm3
   6622c:	andpd  xmm4,xmm5
   66230:	subsd  xmm2,xmm4
   66234:	orpd   xmm1,xmm2
   66238:	cvttsd2si eax,xmm1
   6623c:	xor    r13d,r13d
   6623f:	xor    r12d,r12d
   66242:	mov    ebp,0x1
   66247:	lea    r14,[rsp+0x14]
   6624c:	mov    DWORD PTR [rbx],eax
   6624e:	mov    rsi,r14
   66251:	mov    edi,r13d
   66254:	movsd  QWORD PTR [rsp+0x8],xmm0
   6625a:	call   64720 <Mode_Decision_for_new_8x8IntraBlocks>
   6625f:	mov    ecx,r13d
   66262:	mov    esi,ebp
   66264:	mov    edx,r12d
   66267:	shl    esi,cl
   66269:	movsd  xmm0,QWORD PTR [rsp+0x8]
   6626f:	or     r12d,esi
   66272:	test   eax,eax
   66274:	mov    eax,DWORD PTR [rsp+0x14]
   66278:	cmove  r12d,edx
   6627c:	add    r13d,0x1
   66280:	add    DWORD PTR [rbx],eax
   66282:	cmp    r13d,0x4
   66286:	jne    6624e <Mode_Decision_for_new_Intra8x8Macroblock+0x9e>
   66288:	mov    rax,QWORD PTR [rsp+0x18]
   6628d:	xor    rax,QWORD PTR fs:0x28
   66296:	jne    662a8 <Mode_Decision_for_new_Intra8x8Macroblock+0xf8>
   66298:	add    rsp,0x20
   6629c:	mov    eax,r12d
   6629f:	pop    rbx
   662a0:	pop    rbp
   662a1:	pop    r12
   662a3:	pop    r13
   662a5:	pop    r14
   662a7:	ret    
   662a8:	call   4390 <__stack_chk_fail@plt>
   662ad:	nop    DWORD PTR [rax]

00000000000662b0 <ue_linfo>:
   662b0:	endbr64 
   662b4:	push   rbp
   662b5:	mov    rbp,rcx
   662b8:	push   rbx
   662b9:	lea    ebx,[rdi+0x1]
   662bc:	mov    eax,ebx
   662be:	shr    eax,0x1f
   662c1:	add    eax,ebx
   662c3:	sub    rsp,0x8
   662c7:	sar    eax,1
   662c9:	je     66318 <ue_linfo+0x68>
   662cb:	xor    esi,esi
   662cd:	nop    DWORD PTR [rax]
   662d0:	mov    r8d,eax
   662d3:	add    esi,0x1
   662d6:	shr    r8d,0x1f
   662da:	add    eax,r8d
   662dd:	sar    eax,1
   662df:	cmp    esi,0xf
   662e2:	jg     662e8 <ue_linfo+0x38>
   662e4:	test   eax,eax
   662e6:	jne    662d0 <ue_linfo+0x20>
   662e8:	pxor   xmm1,xmm1
   662ec:	lea    eax,[rsi+rsi*1+0x1]
   662f0:	cvtsi2sd xmm1,esi
   662f4:	mov    DWORD PTR [rdx],eax
   662f6:	movsd  xmm0,QWORD PTR [rip+0x4782]        # 6aa80 <QP_SCALE_CR+0x40>
   662fe:	call   4360 <pow@plt>
   66303:	cvttsd2si eax,xmm0
   66307:	sub    ebx,eax
   66309:	mov    DWORD PTR [rbp+0x0],ebx
   6630c:	add    rsp,0x8
   66310:	pop    rbx
   66311:	pop    rbp
   66312:	ret    
   66313:	nop    DWORD PTR [rax+rax*1+0x0]
   66318:	pxor   xmm1,xmm1
   6631c:	mov    eax,0x1
   66321:	jmp    662f4 <ue_linfo+0x44>
   66323:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   6632e:	xchg   ax,ax

0000000000066330 <se_linfo>:
   66330:	endbr64 
   66334:	push   r12
   66336:	mov    eax,edi
   66338:	mov    r12,rcx
   6633b:	push   rbp
   6633c:	xor    ebp,ebp
   6633e:	test   edi,edi
   66340:	setle  bpl
   66344:	sar    eax,0x1f
   66347:	push   rbx
   66348:	xor    edi,eax
   6634a:	sub    edi,eax
   6634c:	lea    ebx,[rdi+rdi*1]
   6634f:	mov    eax,ebx
   66351:	sar    eax,1
   66353:	je     663a8 <se_linfo+0x78>
   66355:	xor    esi,esi
   66357:	nop    WORD PTR [rax+rax*1+0x0]
   66360:	mov    edi,eax
   66362:	add    esi,0x1
   66365:	shr    edi,0x1f
   66368:	add    eax,edi
   6636a:	sar    eax,1
   6636c:	cmp    esi,0xf
   6636f:	jg     66375 <se_linfo+0x45>
   66371:	test   eax,eax
   66373:	jne    66360 <se_linfo+0x30>
   66375:	pxor   xmm1,xmm1
   66379:	lea    eax,[rsi+rsi*1+0x1]
   6637d:	cvtsi2sd xmm1,esi
   66381:	mov    DWORD PTR [rdx],eax
   66383:	movsd  xmm0,QWORD PTR [rip+0x46f5]        # 6aa80 <QP_SCALE_CR+0x40>
   6638b:	call   4360 <pow@plt>
   66390:	cvttsd2si eax,xmm0
   66394:	sub    ebx,eax
   66396:	add    ebx,ebp
   66398:	mov    DWORD PTR [r12],ebx
   6639c:	pop    rbx
   6639d:	pop    rbp
   6639e:	pop    r12
   663a0:	ret    
   663a1:	nop    DWORD PTR [rax+0x0]
   663a8:	pxor   xmm1,xmm1
   663ac:	mov    eax,0x1
   663b1:	jmp    66381 <se_linfo+0x51>
   663b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   663be:	xchg   ax,ax

00000000000663c0 <cbp_linfo_intra>:
   663c0:	endbr64 
   663c4:	movsxd rax,edi
   663c7:	mov    rdi,QWORD PTR [rip+0x221e2]        # 885b0 <img>
   663ce:	xor    r8d,r8d
   663d1:	mov    edi,DWORD PTR [rdi+0x11bfc]
   663d7:	test   edi,edi
   663d9:	setne  r8b
   663dd:	lea    rdi,[r8+r8*1]
   663e1:	add    rdi,r8
   663e4:	shl    rdi,0x4
   663e8:	add    rdi,rax
   663eb:	lea    rax,[rip+0xed6e]        # 75160 <NCBP>
   663f2:	movzx  edi,BYTE PTR [rax+rdi*2]
   663f6:	jmp    662b0 <ue_linfo>
   663fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000066400 <cbp_linfo_inter>:
   66400:	endbr64 
   66404:	movsxd rax,edi
   66407:	mov    rdi,QWORD PTR [rip+0x221a2]        # 885b0 <img>
   6640e:	xor    r8d,r8d
   66411:	mov    edi,DWORD PTR [rdi+0x11bfc]
   66417:	test   edi,edi
   66419:	setne  r8b
   6641d:	lea    rdi,[r8+r8*1]
   66421:	add    rdi,r8
   66424:	shl    rdi,0x4
   66428:	add    rdi,rax
   6642b:	lea    rax,[rip+0xed2e]        # 75160 <NCBP>
   66432:	movzx  edi,BYTE PTR [rax+rdi*2+0x1]
   66437:	jmp    662b0 <ue_linfo>
   6643c:	nop    DWORD PTR [rax+0x0]

0000000000066440 <levrun_linfo_c2x2>:
   66440:	endbr64 
   66444:	push   r12
   66446:	push   rbp
   66447:	push   rbx
   66448:	sub    rsp,0x30
   6644c:	mov    rax,QWORD PTR fs:0x28
   66455:	mov    QWORD PTR [rsp+0x28],rax
   6645a:	xor    eax,eax
   6645c:	movabs rax,0x500000001
   66466:	mov    QWORD PTR [rsp+0x8],0x3
   6646f:	mov    QWORD PTR [rsp],rax
   66473:	movabs rax,0x100000002
   6647d:	mov    QWORD PTR [rsp+0x10],rax
   66482:	mov    QWORD PTR [rsp+0x18],0x0
   6648b:	test   edi,edi
   6648d:	je     66540 <levrun_linfo_c2x2+0x100>
   66493:	mov    eax,edi
   66495:	setle  bl
   66498:	mov    r12,rcx
   6649b:	movsxd rcx,esi
   6649e:	sar    eax,0x1f
   664a1:	movzx  ebx,bl
   664a4:	xor    edi,eax
   664a6:	sub    edi,eax
   664a8:	mov    eax,DWORD PTR [rsp+rcx*4+0x10]
   664ac:	cmp    eax,edi
   664ae:	jge    66520 <levrun_linfo_c2x2+0xe0>
   664b0:	sub    edi,eax
   664b2:	lea    eax,[rsi+rdi*4]
   664b5:	lea    ebp,[rax+rax*1]
   664b8:	test   eax,eax
   664ba:	je     66550 <levrun_linfo_c2x2+0x110>
   664c0:	xor    esi,esi
   664c2:	nop    WORD PTR [rax+rax*1+0x0]
   664c8:	mov    edi,eax
   664ca:	add    esi,0x1
   664cd:	shr    edi,0x1f
   664d0:	add    eax,edi
   664d2:	sar    eax,1
   664d4:	cmp    esi,0xf
   664d7:	jg     664dd <levrun_linfo_c2x2+0x9d>
   664d9:	test   eax,eax
   664db:	jne    664c8 <levrun_linfo_c2x2+0x88>
   664dd:	pxor   xmm1,xmm1
   664e1:	lea    eax,[rsi+rsi*1+0x1]
   664e5:	cvtsi2sd xmm1,esi
   664e9:	mov    DWORD PTR [rdx],eax
   664eb:	movsd  xmm0,QWORD PTR [rip+0x458d]        # 6aa80 <QP_SCALE_CR+0x40>
   664f3:	call   4360 <pow@plt>
   664f8:	cvttsd2si eax,xmm0
   664fc:	sub    ebp,eax
   664fe:	add    ebx,ebp
   66500:	mov    DWORD PTR [r12],ebx
   66504:	mov    rax,QWORD PTR [rsp+0x28]
   66509:	xor    rax,QWORD PTR fs:0x28
   66512:	jne    6655b <levrun_linfo_c2x2+0x11b>
   66514:	add    rsp,0x30
   66518:	pop    rbx
   66519:	pop    rbp
   6651a:	pop    r12
   6651c:	ret    
   6651d:	nop    DWORD PTR [rax]
   66520:	sub    edi,0x1
   66523:	movsxd rdi,edi
   66526:	lea    rax,[rcx+rdi*2]
   6652a:	mov    ebp,DWORD PTR [rsp+rax*4]
   6652d:	add    ebp,0x1
   66530:	mov    eax,ebp
   66532:	shr    eax,0x1f
   66535:	add    eax,ebp
   66537:	sar    eax,1
   66539:	jmp    664b8 <levrun_linfo_c2x2+0x78>
   6653e:	xchg   ax,ax
   66540:	mov    DWORD PTR [rdx],0x1
   66546:	jmp    66504 <levrun_linfo_c2x2+0xc4>
   66548:	nop    DWORD PTR [rax+rax*1+0x0]
   66550:	pxor   xmm1,xmm1
   66554:	mov    eax,0x1
   66559:	jmp    664e9 <levrun_linfo_c2x2+0xa9>
   6655b:	call   4390 <__stack_chk_fail@plt>

0000000000066560 <levrun_linfo_inter>:
   66560:	endbr64 
   66564:	push   r12
   66566:	xor    r8d,r8d
   66569:	xor    r9d,r9d
   6656c:	xor    r10d,r10d
   6656f:	push   rbp
   66570:	push   rbx
   66571:	sub    rsp,0x50
   66575:	movdqa xmm0,XMMWORD PTR [rip+0x15893]        # 7be10 <lentab.6136+0x330>
   6657d:	mov    rax,QWORD PTR fs:0x28
   66586:	mov    QWORD PTR [rsp+0x48],rax
   6658b:	xor    eax,eax
   6658d:	mov    WORD PTR [rsp+0x12],r8w
   66593:	movabs rax,0x17150d0b09050301
   6659d:	mov    QWORD PTR [rsp],rax
   665a1:	mov    eax,0x1b19
   665a6:	mov    WORD PTR [rsp+0x8],ax
   665ab:	mov    QWORD PTR [rsp+0xa],0x131107
   665b4:	mov    QWORD PTR [rsp+0x14],0xf
   665bd:	mov    WORD PTR [rsp+0x1c],r9w
   665c3:	mov    QWORD PTR [rsp+0x1e],0x1d
   665cc:	mov    WORD PTR [rsp+0x26],r10w
   665d2:	movaps XMMWORD PTR [rsp+0x30],xmm0
   665d7:	test   edi,edi
   665d9:	je     66690 <levrun_linfo_inter+0x130>
   665df:	mov    eax,edi
   665e1:	setle  bl
   665e4:	mov    r12,rcx
   665e7:	movsxd rcx,esi
   665ea:	sar    eax,0x1f
   665ed:	movzx  ebx,bl
   665f0:	xor    edi,eax
   665f2:	sub    edi,eax
   665f4:	movzx  eax,BYTE PTR [rsp+rcx*1+0x30]
   665f9:	cmp    eax,edi
   665fb:	jge    66670 <levrun_linfo_inter+0x110>
   665fd:	sub    edi,eax
   665ff:	shl    edi,0x4
   66602:	lea    eax,[rdi+rsi*1]
   66605:	lea    ebp,[rax+rax*1]
   66608:	test   eax,eax
   6660a:	je     666a0 <levrun_linfo_inter+0x140>
   66610:	xor    esi,esi
   66612:	nop    WORD PTR [rax+rax*1+0x0]
   66618:	mov    edi,eax
   6661a:	add    esi,0x1
   6661d:	shr    edi,0x1f
   66620:	add    eax,edi
   66622:	sar    eax,1
   66624:	cmp    esi,0xf
   66627:	jg     6662d <levrun_linfo_inter+0xcd>
   66629:	test   eax,eax
   6662b:	jne    66618 <levrun_linfo_inter+0xb8>
   6662d:	pxor   xmm1,xmm1
   66631:	lea    eax,[rsi+rsi*1+0x1]
   66635:	cvtsi2sd xmm1,esi
   66639:	mov    DWORD PTR [rdx],eax
   6663b:	movsd  xmm0,QWORD PTR [rip+0x443d]        # 6aa80 <QP_SCALE_CR+0x40>
   66643:	call   4360 <pow@plt>
   66648:	cvttsd2si eax,xmm0
   6664c:	sub    ebp,eax
   6664e:	add    ebx,ebp
   66650:	mov    DWORD PTR [r12],ebx
   66654:	mov    rax,QWORD PTR [rsp+0x48]
   66659:	xor    rax,QWORD PTR fs:0x28
   66662:	jne    666ab <levrun_linfo_inter+0x14b>
   66664:	add    rsp,0x50
   66668:	pop    rbx
   66669:	pop    rbp
   6666a:	pop    r12
   6666c:	ret    
   6666d:	nop    DWORD PTR [rax]
   66670:	sub    edi,0x1
   66673:	movsxd rdi,edi
   66676:	lea    rax,[rdi+rdi*4]
   6667a:	lea    rax,[rsp+rax*2+0x50]
   6667f:	movzx  ebp,BYTE PTR [rcx+rax*1-0x50]
   66684:	add    ebp,0x1
   66687:	mov    eax,ebp
   66689:	sar    eax,1
   6668b:	jmp    66608 <levrun_linfo_inter+0xa8>
   66690:	mov    DWORD PTR [rdx],0x1
   66696:	jmp    66654 <levrun_linfo_inter+0xf4>
   66698:	nop    DWORD PTR [rax+rax*1+0x0]
   666a0:	pxor   xmm1,xmm1
   666a4:	mov    eax,0x1
   666a9:	jmp    66639 <levrun_linfo_inter+0xd9>
   666ab:	call   4390 <__stack_chk_fail@plt>

00000000000666b0 <levrun_linfo_intra>:
   666b0:	endbr64 
   666b4:	push   r12
   666b6:	push   rbp
   666b7:	push   rbx
   666b8:	sub    rsp,0x40
   666bc:	mov    rax,QWORD PTR fs:0x28
   666c5:	mov    QWORD PTR [rsp+0x38],rax
   666ca:	xor    eax,eax
   666cc:	mov    DWORD PTR [rsp],0xf070301
   666d3:	movabs rax,0x101010309
   666dd:	mov    QWORD PTR [rsp+0x30],rax
   666e2:	mov    BYTE PTR [rsp+0x4],0x11
   666e7:	mov    DWORD PTR [rsp+0x5],0x1305
   666ef:	mov    BYTE PTR [rsp+0x9],0x0
   666f4:	mov    DWORD PTR [rsp+0xa],0x1509
   666fc:	mov    BYTE PTR [rsp+0xe],0x0
   66701:	mov    DWORD PTR [rsp+0xf],0xb
   66709:	mov    BYTE PTR [rsp+0x13],0x0
   6670e:	mov    DWORD PTR [rsp+0x14],0xd
   66716:	mov    BYTE PTR [rsp+0x18],0x0
   6671b:	mov    DWORD PTR [rsp+0x19],0x17
   66723:	mov    BYTE PTR [rsp+0x1d],0x0
   66728:	mov    DWORD PTR [rsp+0x1e],0x19
   66730:	mov    BYTE PTR [rsp+0x22],0x0
   66735:	mov    DWORD PTR [rsp+0x23],0x1b
   6673d:	mov    BYTE PTR [rsp+0x27],0x0
   66742:	mov    DWORD PTR [rsp+0x28],0x1d
   6674a:	mov    BYTE PTR [rsp+0x2c],0x0
   6674f:	test   edi,edi
   66751:	je     66810 <levrun_linfo_intra+0x160>
   66757:	mov    eax,edi
   66759:	setle  bl
   6675c:	mov    r12,rcx
   6675f:	movsxd rcx,esi
   66762:	sar    eax,0x1f
   66765:	movzx  ebx,bl
   66768:	xor    edi,eax
   6676a:	sub    edi,eax
   6676c:	movzx  eax,BYTE PTR [rsp+rcx*1+0x30]
   66771:	cmp    eax,edi
   66773:	jge    667e8 <levrun_linfo_intra+0x138>
   66775:	sub    edi,eax
   66777:	lea    eax,[rsi+rdi*8+0x8]
   6677b:	lea    ebp,[rax+rax*1]
   6677e:	test   eax,eax
   66780:	je     66820 <levrun_linfo_intra+0x170>
   66786:	xor    esi,esi
   66788:	nop    DWORD PTR [rax+rax*1+0x0]
   66790:	mov    edi,eax
   66792:	add    esi,0x1
   66795:	shr    edi,0x1f
   66798:	add    eax,edi
   6679a:	sar    eax,1
   6679c:	cmp    esi,0xf
   6679f:	jg     667a5 <levrun_linfo_intra+0xf5>
   667a1:	test   eax,eax
   667a3:	jne    66790 <levrun_linfo_intra+0xe0>
   667a5:	pxor   xmm1,xmm1
   667a9:	lea    eax,[rsi+rsi*1+0x1]
   667ad:	cvtsi2sd xmm1,esi
   667b1:	mov    DWORD PTR [rdx],eax
   667b3:	movsd  xmm0,QWORD PTR [rip+0x42c5]        # 6aa80 <QP_SCALE_CR+0x40>
   667bb:	call   4360 <pow@plt>
   667c0:	cvttsd2si eax,xmm0
   667c4:	sub    ebp,eax
   667c6:	add    ebx,ebp
   667c8:	mov    DWORD PTR [r12],ebx
   667cc:	mov    rax,QWORD PTR [rsp+0x38]
   667d1:	xor    rax,QWORD PTR fs:0x28
   667da:	jne    6682b <levrun_linfo_intra+0x17b>
   667dc:	add    rsp,0x40
   667e0:	pop    rbx
   667e1:	pop    rbp
   667e2:	pop    r12
   667e4:	ret    
   667e5:	nop    DWORD PTR [rax]
   667e8:	sub    edi,0x1
   667eb:	lea    rsi,[rsp+0x40]
   667f0:	movsxd rdi,edi
   667f3:	lea    rax,[rdi+rdi*4]
   667f7:	add    rax,rsi
   667fa:	movzx  ebp,BYTE PTR [rcx+rax*1-0x40]
   667ff:	add    ebp,0x1
   66802:	mov    eax,ebp
   66804:	sar    eax,1
   66806:	jmp    6677e <levrun_linfo_intra+0xce>
   6680b:	nop    DWORD PTR [rax+rax*1+0x0]
   66810:	mov    DWORD PTR [rdx],0x1
   66816:	jmp    667cc <levrun_linfo_intra+0x11c>
   66818:	nop    DWORD PTR [rax+rax*1+0x0]
   66820:	pxor   xmm1,xmm1
   66824:	mov    eax,0x1
   66829:	jmp    667b1 <levrun_linfo_intra+0x101>
   6682b:	call   4390 <__stack_chk_fail@plt>

0000000000066830 <symbol2uvlc>:
   66830:	endbr64 
   66834:	mov    eax,DWORD PTR [rdi+0xc]
   66837:	mov    ecx,eax
   66839:	shr    ecx,0x1f
   6683c:	add    ecx,eax
   6683e:	mov    eax,0x1
   66843:	sar    ecx,1
   66845:	shl    eax,cl
   66847:	mov    edx,eax
   66849:	lea    eax,[rax-0x1]
   6684c:	and    eax,DWORD PTR [rdi+0x10]
   6684f:	or     eax,edx
   66851:	mov    DWORD PTR [rdi+0x14],eax
   66854:	xor    eax,eax
   66856:	ret    
   66857:	nop    WORD PTR [rax+rax*1+0x0]

0000000000066860 <writeUVLC2buffer>:
   66860:	endbr64 
   66864:	mov    edx,DWORD PTR [rdi+0xc]
   66867:	mov    eax,0x1
   6686c:	lea    ecx,[rdx-0x1]
   6686f:	shl    eax,cl
   66871:	mov    ecx,eax
   66873:	test   edx,edx
   66875:	jle    668d5 <writeUVLC2buffer+0x75>
   66877:	xor    r8d,r8d
   6687a:	jmp    6688d <writeUVLC2buffer+0x2d>
   6687c:	nop    DWORD PTR [rax+0x0]
   66880:	mov    DWORD PTR [rsi+0x4],edx
   66883:	add    r8d,0x1
   66887:	cmp    DWORD PTR [rdi+0xc],r8d
   6688b:	jle    668d5 <writeUVLC2buffer+0x75>
   6688d:	movzx  eax,BYTE PTR [rsi+0x8]
   66891:	add    eax,eax
   66893:	mov    edx,eax
   66895:	mov    BYTE PTR [rsi+0x8],al
   66898:	or     edx,0x1
   6689b:	test   DWORD PTR [rdi+0x14],ecx
   6689e:	cmovne eax,edx
   668a1:	mov    edx,DWORD PTR [rsi+0x4]
   668a4:	shr    ecx,1
   668a6:	mov    BYTE PTR [rsi+0x8],al
   668a9:	sub    edx,0x1
   668ac:	jne    66880 <writeUVLC2buffer+0x20>
   668ae:	movsxd rdx,DWORD PTR [rsi]
   668b1:	mov    r9,QWORD PTR [rsi+0x20]
   668b5:	mov    DWORD PTR [rsi+0x4],0x8
   668bc:	add    r8d,0x1
   668c0:	lea    r10d,[rdx+0x1]
   668c4:	mov    DWORD PTR [rsi],r10d
   668c7:	mov    BYTE PTR [r9+rdx*1],al
   668cb:	mov    BYTE PTR [rsi+0x8],0x0
   668cf:	cmp    DWORD PTR [rdi+0xc],r8d
   668d3:	jg     6688d <writeUVLC2buffer+0x2d>
   668d5:	ret    
   668d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000668e0 <writeSyntaxElement_UVLC>:
   668e0:	endbr64 
   668e4:	push   rbp
   668e5:	lea    rcx,[rdi+0x10]
   668e9:	lea    rdx,[rdi+0xc]
   668ed:	mov    rbp,rsi
   668f0:	push   rbx
   668f1:	mov    rbx,rdi
   668f4:	sub    rsp,0x8
   668f8:	mov    esi,DWORD PTR [rdi+0x8]
   668fb:	mov    edi,DWORD PTR [rdi+0x4]
   668fe:	call   QWORD PTR [rbx+0x20]
   66901:	mov    eax,DWORD PTR [rbx+0xc]
   66904:	mov    rsi,QWORD PTR [rbp+0x0]
   66908:	mov    rdi,rbx
   6690b:	mov    ecx,eax
   6690d:	shr    ecx,0x1f
   66910:	add    ecx,eax
   66912:	mov    eax,0x1
   66917:	sar    ecx,1
   66919:	shl    eax,cl
   6691b:	mov    edx,eax
   6691d:	sub    eax,0x1
   66920:	and    eax,DWORD PTR [rbx+0x10]
   66923:	or     eax,edx
   66925:	mov    DWORD PTR [rbx+0x14],eax
   66928:	call   66860 <writeUVLC2buffer>
   6692d:	mov    eax,DWORD PTR [rbx]
   6692f:	test   eax,eax
   66931:	je     6693e <writeSyntaxElement_UVLC+0x5e>
   66933:	mov    rax,QWORD PTR [rbp+0x0]
   66937:	mov    DWORD PTR [rax+0x28],0x1
   6693e:	mov    eax,DWORD PTR [rbx+0xc]
   66941:	add    rsp,0x8
   66945:	pop    rbx
   66946:	pop    rbp
   66947:	ret    
   66948:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000066950 <ue_v>:
   66950:	endbr64 
   66954:	sub    rsp,0x48
   66958:	mov    r8d,esi
   6695b:	mov    rsi,rdx
   6695e:	mov    rax,QWORD PTR fs:0x28
   66967:	mov    QWORD PTR [rsp+0x38],rax
   6696c:	xor    eax,eax
   6696e:	mov    rdi,rsp
   66971:	lea    rax,[rip+0xfffffffffffff938]        # 662b0 <ue_linfo>
   66978:	mov    DWORD PTR [rsp],0x0
   6697f:	mov    QWORD PTR [rsp+0x20],rax
   66984:	mov    DWORD PTR [rsp+0x4],r8d
   66989:	mov    DWORD PTR [rsp+0x8],0x0
   66991:	call   668e0 <writeSyntaxElement_UVLC>
   66996:	mov    rcx,QWORD PTR [rsp+0x38]
   6699b:	xor    rcx,QWORD PTR fs:0x28
   669a4:	jne    669ab <ue_v+0x5b>
   669a6:	add    rsp,0x48
   669aa:	ret    
   669ab:	call   4390 <__stack_chk_fail@plt>

00000000000669b0 <se_v>:
   669b0:	endbr64 
   669b4:	sub    rsp,0x48
   669b8:	mov    r8d,esi
   669bb:	mov    rsi,rdx
   669be:	mov    rax,QWORD PTR fs:0x28
   669c7:	mov    QWORD PTR [rsp+0x38],rax
   669cc:	xor    eax,eax
   669ce:	mov    rdi,rsp
   669d1:	lea    rax,[rip+0xfffffffffffff958]        # 66330 <se_linfo>
   669d8:	mov    DWORD PTR [rsp],0x0
   669df:	mov    QWORD PTR [rsp+0x20],rax
   669e4:	mov    DWORD PTR [rsp+0x4],r8d
   669e9:	mov    DWORD PTR [rsp+0x8],0x0
   669f1:	call   668e0 <writeSyntaxElement_UVLC>
   669f6:	mov    rcx,QWORD PTR [rsp+0x38]
   669fb:	xor    rcx,QWORD PTR fs:0x28
   66a04:	jne    66a0b <se_v+0x5b>
   66a06:	add    rsp,0x48
   66a0a:	ret    
   66a0b:	call   4390 <__stack_chk_fail@plt>

0000000000066a10 <writeSyntaxElement_fixed>:
   66a10:	endbr64 
   66a14:	mov    r11,rsi
   66a17:	mov    rsi,QWORD PTR [rsi]
   66a1a:	call   66860 <writeUVLC2buffer>
   66a1f:	mov    eax,DWORD PTR [rdi]
   66a21:	test   eax,eax
   66a23:	je     66a2f <writeSyntaxElement_fixed+0x1f>
   66a25:	mov    rax,QWORD PTR [r11]
   66a28:	mov    DWORD PTR [rax+0x28],0x1
   66a2f:	mov    eax,DWORD PTR [rdi+0xc]
   66a32:	ret    
   66a33:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   66a3e:	xchg   ax,ax

0000000000066a40 <u_1>:
   66a40:	endbr64 
   66a44:	sub    rsp,0x48
   66a48:	mov    r11,rdx
   66a4b:	mov    rax,QWORD PTR fs:0x28
   66a54:	mov    QWORD PTR [rsp+0x38],rax
   66a59:	xor    eax,eax
   66a5b:	mov    DWORD PTR [rsp+0x14],esi
   66a5f:	mov    rdi,rsp
   66a62:	movabs rax,0x100000000
   66a6c:	mov    DWORD PTR [rsp+0x4],esi
   66a70:	mov    rsi,QWORD PTR [rdx]
   66a73:	mov    QWORD PTR [rsp+0x8],rax
   66a78:	mov    DWORD PTR [rsp],0x0
   66a7f:	call   66860 <writeUVLC2buffer>
   66a84:	mov    eax,DWORD PTR [rsp]
   66a87:	test   eax,eax
   66a89:	je     66a95 <u_1+0x55>
   66a8b:	mov    rax,QWORD PTR [r11]
   66a8e:	mov    DWORD PTR [rax+0x28],0x1
   66a95:	mov    rcx,QWORD PTR [rsp+0x38]
   66a9a:	xor    rcx,QWORD PTR fs:0x28
   66aa3:	mov    eax,DWORD PTR [rsp+0xc]
   66aa7:	jne    66aae <u_1+0x6e>
   66aa9:	add    rsp,0x48
   66aad:	ret    
   66aae:	call   4390 <__stack_chk_fail@plt>
   66ab3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   66abe:	xchg   ax,ax

0000000000066ac0 <u_v>:
   66ac0:	endbr64 
   66ac4:	sub    rsp,0x48
   66ac8:	mov    rsi,QWORD PTR [rcx]
   66acb:	mov    r11,rcx
   66ace:	mov    rax,QWORD PTR fs:0x28
   66ad7:	mov    QWORD PTR [rsp+0x38],rax
   66adc:	xor    eax,eax
   66ade:	mov    DWORD PTR [rsp+0xc],edi
   66ae2:	mov    rdi,rsp
   66ae5:	mov    DWORD PTR [rsp+0x14],edx
   66ae9:	mov    DWORD PTR [rsp],0x0
   66af0:	mov    DWORD PTR [rsp+0x4],edx
   66af4:	mov    DWORD PTR [rsp+0x8],0x0
   66afc:	call   66860 <writeUVLC2buffer>
   66b01:	mov    eax,DWORD PTR [rsp]
   66b04:	test   eax,eax
   66b06:	je     66b12 <u_v+0x52>
   66b08:	mov    rax,QWORD PTR [r11]
   66b0b:	mov    DWORD PTR [rax+0x28],0x1
   66b12:	mov    rsi,QWORD PTR [rsp+0x38]
   66b17:	xor    rsi,QWORD PTR fs:0x28
   66b20:	mov    eax,DWORD PTR [rsp+0xc]
   66b24:	jne    66b2b <u_v+0x6b>
   66b26:	add    rsp,0x48
   66b2a:	ret    
   66b2b:	call   4390 <__stack_chk_fail@plt>

0000000000066b30 <writeSyntaxElement_Intra4x4PredictionMode>:
   66b30:	endbr64 
   66b34:	mov    eax,DWORD PTR [rdi+0x4]
   66b37:	mov    r11,rsi
   66b3a:	cmp    eax,0xffffffff
   66b3d:	je     66b70 <writeSyntaxElement_Intra4x4PredictionMode+0x40>
   66b3f:	mov    DWORD PTR [rdi+0xc],0x4
   66b46:	mov    DWORD PTR [rdi+0x10],eax
   66b49:	mov    DWORD PTR [rdi+0x14],eax
   66b4c:	mov    rsi,QWORD PTR [r11]
   66b4f:	call   66860 <writeUVLC2buffer>
   66b54:	mov    eax,DWORD PTR [rdi]
   66b56:	test   eax,eax
   66b58:	je     66b64 <writeSyntaxElement_Intra4x4PredictionMode+0x34>
   66b5a:	mov    rax,QWORD PTR [r11]
   66b5d:	mov    DWORD PTR [rax+0x28],0x1
   66b64:	mov    eax,DWORD PTR [rdi+0xc]
   66b67:	ret    
   66b68:	nop    DWORD PTR [rax+rax*1+0x0]
   66b70:	movabs rax,0x100000001
   66b7a:	mov    QWORD PTR [rdi+0xc],rax
   66b7e:	mov    eax,0x1
   66b83:	jmp    66b49 <writeSyntaxElement_Intra4x4PredictionMode+0x19>
   66b85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000066b90 <writeSyntaxElement2Buf_UVLC>:
   66b90:	endbr64 
   66b94:	push   rbp
   66b95:	lea    rcx,[rdi+0x10]
   66b99:	mov    rbp,rsi
   66b9c:	lea    rdx,[rdi+0xc]
   66ba0:	push   rbx
   66ba1:	mov    rbx,rdi
   66ba4:	sub    rsp,0x8
   66ba8:	mov    esi,DWORD PTR [rdi+0x8]
   66bab:	mov    edi,DWORD PTR [rdi+0x4]
   66bae:	call   QWORD PTR [rbx+0x20]
   66bb1:	mov    eax,DWORD PTR [rbx+0xc]
   66bb4:	mov    rsi,rbp
   66bb7:	mov    rdi,rbx
   66bba:	mov    ecx,eax
   66bbc:	shr    ecx,0x1f
   66bbf:	add    ecx,eax
   66bc1:	mov    eax,0x1
   66bc6:	sar    ecx,1
   66bc8:	shl    eax,cl
   66bca:	mov    edx,eax
   66bcc:	lea    eax,[rax-0x1]
   66bcf:	and    eax,DWORD PTR [rbx+0x10]
   66bd2:	or     eax,edx
   66bd4:	mov    DWORD PTR [rbx+0x14],eax
   66bd7:	call   66860 <writeUVLC2buffer>
   66bdc:	mov    eax,DWORD PTR [rbx+0xc]
   66bdf:	add    rsp,0x8
   66be3:	pop    rbx
   66be4:	pop    rbp
   66be5:	ret    
   66be6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000066bf0 <writeSyntaxElement2Buf_Fixed>:
   66bf0:	endbr64 
   66bf4:	call   66860 <writeUVLC2buffer>
   66bf9:	mov    eax,DWORD PTR [rdi+0xc]
   66bfc:	ret    
   66bfd:	nop    DWORD PTR [rax]

0000000000066c00 <symbol2vlc>:
   66c00:	endbr64 
   66c04:	mov    ecx,DWORD PTR [rdi+0xc]
   66c07:	mov    DWORD PTR [rdi+0x14],0x0
   66c0e:	sub    ecx,0x1
   66c11:	js     66c36 <symbol2vlc+0x36>
   66c13:	mov    esi,DWORD PTR [rdi+0x10]
   66c16:	xor    eax,eax
   66c18:	nop    DWORD PTR [rax+rax*1+0x0]
   66c20:	mov    edx,esi
   66c22:	add    eax,eax
   66c24:	sar    edx,cl
   66c26:	sub    ecx,0x1
   66c29:	and    edx,0x1
   66c2c:	or     eax,edx
   66c2e:	cmp    ecx,0xffffffff
   66c31:	jne    66c20 <symbol2vlc+0x20>
   66c33:	mov    DWORD PTR [rdi+0x14],eax
   66c36:	xor    eax,eax
   66c38:	ret    
   66c39:	nop    DWORD PTR [rax+0x0]

0000000000066c40 <writeSyntaxElement_VLC>:
   66c40:	endbr64 
   66c44:	mov    r8d,DWORD PTR [rdi+0x4]
   66c48:	mov    ecx,DWORD PTR [rdi+0x8]
   66c4b:	mov    DWORD PTR [rdi+0x14],0x0
   66c52:	mov    DWORD PTR [rdi+0x10],r8d
   66c56:	mov    DWORD PTR [rdi+0xc],ecx
   66c59:	sub    ecx,0x1
   66c5c:	js     66c77 <writeSyntaxElement_VLC+0x37>
   66c5e:	xor    eax,eax
   66c60:	mov    edx,r8d
   66c63:	add    eax,eax
   66c65:	sar    edx,cl
   66c67:	sub    ecx,0x1
   66c6a:	and    edx,0x1
   66c6d:	or     eax,edx
   66c6f:	cmp    ecx,0xffffffff
   66c72:	jne    66c60 <writeSyntaxElement_VLC+0x20>
   66c74:	mov    DWORD PTR [rdi+0x14],eax
   66c77:	mov    rsi,QWORD PTR [rsi]
   66c7a:	call   66860 <writeUVLC2buffer>
   66c7f:	mov    eax,DWORD PTR [rdi+0xc]
   66c82:	ret    
   66c83:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   66c8e:	xchg   ax,ax

0000000000066c90 <writeSyntaxElement_NumCoeffTrailingOnes>:
   66c90:	endbr64 
   66c94:	sub    rsp,0x8
   66c98:	mov    r9d,DWORD PTR [rdi+0xc]
   66c9c:	mov    r10d,DWORD PTR [rdi+0x4]
   66ca0:	cmp    r9d,0x3
   66ca4:	je     66d30 <writeSyntaxElement_NumCoeffTrailingOnes+0xa0>
   66caa:	movsxd rdx,r9d
   66cad:	movsxd r11,DWORD PTR [rdi+0x8]
   66cb1:	movsxd rax,r10d
   66cb4:	mov    rcx,rdx
   66cb7:	shl    rcx,0x4
   66cbb:	mov    r8,r11
   66cbe:	add    rcx,rdx
   66cc1:	mov    rdx,r11
   66cc4:	shl    rdx,0x4
   66cc8:	add    rdx,r11
   66ccb:	lea    rdx,[rdx+rcx*4]
   66ccf:	add    rax,rdx
   66cd2:	lea    rdx,[rip+0x14e07]        # 7bae0 <lentab.6136>
   66cd9:	mov    ecx,DWORD PTR [rdx+rax*4]
   66cdc:	lea    rdx,[rip+0x14abd]        # 7b7a0 <codtab.6137>
   66ce3:	mov    eax,DWORD PTR [rdx+rax*4]
   66ce6:	mov    DWORD PTR [rdi+0xc],ecx
   66ce9:	mov    DWORD PTR [rdi+0x10],eax
   66cec:	test   ecx,ecx
   66cee:	je     66d61 <writeSyntaxElement_NumCoeffTrailingOnes+0xd1>
   66cf0:	mov    DWORD PTR [rdi+0x14],0x0
   66cf7:	sub    ecx,0x1
   66cfa:	js     66d1f <writeSyntaxElement_NumCoeffTrailingOnes+0x8f>
   66cfc:	mov    r8d,DWORD PTR [rdi+0x10]
   66d00:	xor    eax,eax
   66d02:	nop    WORD PTR [rax+rax*1+0x0]
   66d08:	mov    edx,r8d
   66d0b:	add    eax,eax
   66d0d:	sar    edx,cl
   66d0f:	sub    ecx,0x1
   66d12:	and    edx,0x1
   66d15:	or     eax,edx
   66d17:	cmp    ecx,0xffffffff
   66d1a:	jne    66d08 <writeSyntaxElement_NumCoeffTrailingOnes+0x78>
   66d1c:	mov    DWORD PTR [rdi+0x14],eax
   66d1f:	mov    rsi,QWORD PTR [rsi]
   66d22:	call   66860 <writeUVLC2buffer>
   66d27:	mov    eax,DWORD PTR [rdi+0xc]
   66d2a:	add    rsp,0x8
   66d2e:	ret    
   66d2f:	nop
   66d30:	mov    DWORD PTR [rdi+0xc],0x6
   66d37:	test   r10d,r10d
   66d3a:	jle    66d58 <writeSyntaxElement_NumCoeffTrailingOnes+0xc8>
   66d3c:	lea    eax,[r10*4-0x4]
   66d44:	or     eax,DWORD PTR [rdi+0x8]
   66d47:	mov    DWORD PTR [rdi+0x10],eax
   66d4a:	mov    ecx,0x5
   66d4f:	jmp    66cfc <writeSyntaxElement_NumCoeffTrailingOnes+0x6c>
   66d51:	nop    DWORD PTR [rax+0x0]
   66d58:	mov    DWORD PTR [rdi+0x10],0x3
   66d5f:	jmp    66d4a <writeSyntaxElement_NumCoeffTrailingOnes+0xba>
   66d61:	mov    edi,0x1
   66d66:	mov    ecx,r10d
   66d69:	mov    edx,r9d
   66d6c:	xor    eax,eax
   66d6e:	lea    rsi,[rip+0x11d6b]        # 78ae0 <quant_coef8+0x600>
   66d75:	call   4490 <__printf_chk@plt>
   66d7a:	or     edi,0xffffffff
   66d7d:	call   44e0 <exit@plt>
   66d82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   66d8d:	nop    DWORD PTR [rax]

0000000000066d90 <writeSyntaxElement_NumCoeffTrailingOnesChromaDC>:
   66d90:	endbr64 
   66d94:	sub    rsp,0x8
   66d98:	mov    rax,QWORD PTR [rip+0x21811]        # 885b0 <img>
   66d9f:	movsxd r8,DWORD PTR [rdi+0x8]
   66da3:	movsxd r11,DWORD PTR [rdi+0x4]
   66da7:	mov    eax,DWORD PTR [rax+0x11bfc]
   66dad:	mov    rdx,r8
   66db0:	mov    r10,r8
   66db3:	shl    rdx,0x4
   66db7:	sub    eax,0x1
   66dba:	add    rdx,r8
   66dbd:	cdqe   
   66dbf:	mov    rcx,rax
   66dc2:	shl    rcx,0x4
   66dc6:	add    rax,rcx
   66dc9:	lea    rax,[rdx+rax*4]
   66dcd:	lea    rdx,[rip+0x1468c]        # 7b460 <lentab.6143>
   66dd4:	add    rax,r11
   66dd7:	mov    ecx,DWORD PTR [rdx+rax*4]
   66dda:	lea    rdx,[rip+0x1433f]        # 7b120 <codtab.6144>
   66de1:	mov    r8d,DWORD PTR [rdx+rax*4]
   66de5:	mov    DWORD PTR [rdi+0xc],ecx
   66de8:	mov    DWORD PTR [rdi+0x10],r8d
   66dec:	test   ecx,ecx
   66dee:	je     66e27 <writeSyntaxElement_NumCoeffTrailingOnesChromaDC+0x97>
   66df0:	mov    DWORD PTR [rdi+0x14],0x0
   66df7:	sub    ecx,0x1
   66dfa:	js     66e17 <writeSyntaxElement_NumCoeffTrailingOnesChromaDC+0x87>
   66dfc:	xor    eax,eax
   66dfe:	xchg   ax,ax
   66e00:	mov    edx,r8d
   66e03:	add    eax,eax
   66e05:	sar    edx,cl
   66e07:	sub    ecx,0x1
   66e0a:	and    edx,0x1
   66e0d:	or     eax,edx
   66e0f:	cmp    ecx,0xffffffff
   66e12:	jne    66e00 <writeSyntaxElement_NumCoeffTrailingOnesChromaDC+0x70>
   66e14:	mov    DWORD PTR [rdi+0x14],eax
   66e17:	mov    rsi,QWORD PTR [rsi]
   66e1a:	call   66860 <writeUVLC2buffer>
   66e1f:	mov    eax,DWORD PTR [rdi+0xc]
   66e22:	add    rsp,0x8
   66e26:	ret    
   66e27:	mov    edi,0x1
   66e2c:	mov    ecx,r10d
   66e2f:	mov    edx,r11d
   66e32:	xor    eax,eax
   66e34:	lea    rsi,[rip+0x11ce5]        # 78b20 <quant_coef8+0x640>
   66e3b:	call   4490 <__printf_chk@plt>
   66e40:	or     edi,0xffffffff
   66e43:	call   44e0 <exit@plt>
   66e48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000066e50 <writeSyntaxElement_TotalZeros>:
   66e50:	endbr64 
   66e54:	sub    rsp,0x8
   66e58:	movsxd rax,DWORD PTR [rdi+0xc]
   66e5c:	movsxd rcx,DWORD PTR [rdi+0x4]
   66e60:	lea    r8,[rip+0x13b39]        # 7a9a0 <codtab.6151>
   66e67:	shl    rax,0x4
   66e6b:	mov    rdx,rcx
   66e6e:	add    rax,rcx
   66e71:	lea    rcx,[rip+0x13ee8]        # 7ad60 <lentab.6150>
   66e78:	mov    ecx,DWORD PTR [rcx+rax*4]
   66e7b:	mov    r8d,DWORD PTR [r8+rax*4]
   66e7f:	mov    DWORD PTR [rdi+0xc],ecx
   66e82:	mov    DWORD PTR [rdi+0x10],r8d
   66e86:	test   ecx,ecx
   66e88:	je     66ec7 <writeSyntaxElement_TotalZeros+0x77>
   66e8a:	mov    DWORD PTR [rdi+0x14],0x0
   66e91:	sub    ecx,0x1
   66e94:	js     66eb7 <writeSyntaxElement_TotalZeros+0x67>
   66e96:	xor    eax,eax
   66e98:	nop    DWORD PTR [rax+rax*1+0x0]
   66ea0:	mov    edx,r8d
   66ea3:	add    eax,eax
   66ea5:	sar    edx,cl
   66ea7:	sub    ecx,0x1
   66eaa:	and    edx,0x1
   66ead:	or     eax,edx
   66eaf:	cmp    ecx,0xffffffff
   66eb2:	jne    66ea0 <writeSyntaxElement_TotalZeros+0x50>
   66eb4:	mov    DWORD PTR [rdi+0x14],eax
   66eb7:	mov    rsi,QWORD PTR [rsi]
   66eba:	call   66860 <writeUVLC2buffer>
   66ebf:	mov    eax,DWORD PTR [rdi+0xc]
   66ec2:	add    rsp,0x8
   66ec6:	ret    
   66ec7:	mov    edi,0x1
   66ecc:	lea    rsi,[rip+0x11c85]        # 78b58 <quant_coef8+0x678>
   66ed3:	xor    eax,eax
   66ed5:	call   4490 <__printf_chk@plt>
   66eda:	or     edi,0xffffffff
   66edd:	call   44e0 <exit@plt>
   66ee2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   66eed:	nop    DWORD PTR [rax]

0000000000066ef0 <writeSyntaxElement_TotalZerosChromaDC>:
   66ef0:	endbr64 
   66ef4:	sub    rsp,0x8
   66ef8:	mov    rax,QWORD PTR [rip+0x216b1]        # 885b0 <img>
   66eff:	movsxd r8,DWORD PTR [rdi+0xc]
   66f03:	movsxd rcx,DWORD PTR [rdi+0x4]
   66f07:	mov    edx,DWORD PTR [rax+0x11bfc]
   66f0d:	mov    r9,rcx
   66f10:	sub    edx,0x1
   66f13:	movsxd rdx,edx
   66f16:	mov    rax,rdx
   66f19:	shl    rax,0x4
   66f1d:	sub    rax,rdx
   66f20:	lea    rdx,[rip+0x12f39]        # 79e60 <lentab.6157>
   66f27:	add    rax,r8
   66f2a:	shl    rax,0x4
   66f2e:	add    rax,rcx
   66f31:	mov    ecx,DWORD PTR [rdx+rax*4]
   66f34:	lea    rdx,[rip+0x123e5]        # 79320 <codtab.6158>
   66f3b:	mov    r8d,DWORD PTR [rdx+rax*4]
   66f3f:	mov    DWORD PTR [rdi+0xc],ecx
   66f42:	mov    DWORD PTR [rdi+0x10],r8d
   66f46:	test   ecx,ecx
   66f48:	je     66f87 <writeSyntaxElement_TotalZerosChromaDC+0x97>
   66f4a:	mov    DWORD PTR [rdi+0x14],0x0
   66f51:	sub    ecx,0x1
   66f54:	js     66f77 <writeSyntaxElement_TotalZerosChromaDC+0x87>
   66f56:	xor    eax,eax
   66f58:	nop    DWORD PTR [rax+rax*1+0x0]
   66f60:	mov    edx,r8d
   66f63:	add    eax,eax
   66f65:	sar    edx,cl
   66f67:	sub    ecx,0x1
   66f6a:	and    edx,0x1
   66f6d:	or     eax,edx
   66f6f:	cmp    ecx,0xffffffff
   66f72:	jne    66f60 <writeSyntaxElement_TotalZerosChromaDC+0x70>
   66f74:	mov    DWORD PTR [rdi+0x14],eax
   66f77:	mov    rsi,QWORD PTR [rsi]
   66f7a:	call   66860 <writeUVLC2buffer>
   66f7f:	mov    eax,DWORD PTR [rdi+0xc]
   66f82:	add    rsp,0x8
   66f86:	ret    
   66f87:	mov    edi,0x1
   66f8c:	mov    edx,r9d
   66f8f:	lea    rsi,[rip+0x11bc2]        # 78b58 <quant_coef8+0x678>
   66f96:	xor    eax,eax
   66f98:	call   4490 <__printf_chk@plt>
   66f9d:	or     edi,0xffffffff
   66fa0:	call   44e0 <exit@plt>
   66fa5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000066fb0 <writeSyntaxElement_Run>:
   66fb0:	endbr64 
   66fb4:	sub    rsp,0x8
   66fb8:	movsxd rax,DWORD PTR [rdi+0xc]
   66fbc:	movsxd rcx,DWORD PTR [rdi+0x4]
   66fc0:	lea    r8,[rip+0x11bd9]        # 78ba0 <codtab.6166>
   66fc7:	shl    rax,0x4
   66fcb:	mov    rdx,rcx
   66fce:	add    rax,rcx
   66fd1:	lea    rcx,[rip+0x11f88]        # 78f60 <lentab.6165>
   66fd8:	mov    ecx,DWORD PTR [rcx+rax*4]
   66fdb:	mov    r8d,DWORD PTR [r8+rax*4]
   66fdf:	mov    DWORD PTR [rdi+0xc],ecx
   66fe2:	mov    DWORD PTR [rdi+0x10],r8d
   66fe6:	test   ecx,ecx
   66fe8:	je     67027 <writeSyntaxElement_Run+0x77>
   66fea:	mov    DWORD PTR [rdi+0x14],0x0
   66ff1:	sub    ecx,0x1
   66ff4:	js     67017 <writeSyntaxElement_Run+0x67>
   66ff6:	xor    eax,eax
   66ff8:	nop    DWORD PTR [rax+rax*1+0x0]
   67000:	mov    edx,r8d
   67003:	add    eax,eax
   67005:	sar    edx,cl
   67007:	sub    ecx,0x1
   6700a:	and    edx,0x1
   6700d:	or     eax,edx
   6700f:	cmp    ecx,0xffffffff
   67012:	jne    67000 <writeSyntaxElement_Run+0x50>
   67014:	mov    DWORD PTR [rdi+0x14],eax
   67017:	mov    rsi,QWORD PTR [rsi]
   6701a:	call   66860 <writeUVLC2buffer>
   6701f:	mov    eax,DWORD PTR [rdi+0xc]
   67022:	add    rsp,0x8
   67026:	ret    
   67027:	mov    edi,0x1
   6702c:	lea    rsi,[rip+0x11b4a]        # 78b7d <quant_coef8+0x69d>
   67033:	xor    eax,eax
   67035:	call   4490 <__printf_chk@plt>
   6703a:	or     edi,0xffffffff
   6703d:	call   44e0 <exit@plt>
   67042:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   6704d:	nop    DWORD PTR [rax]

0000000000067050 <writeSyntaxElement_Level_VLC1>:
   67050:	endbr64 
   67054:	mov    r8d,DWORD PTR [rdi+0x4]
   67058:	mov    eax,r8d
   6705b:	sar    eax,0x1f
   6705e:	mov    edx,eax
   67060:	xor    edx,r8d
   67063:	sub    edx,eax
   67065:	mov    eax,r8d
   67068:	shr    eax,0x1f
   6706b:	cmp    edx,0x7
   6706e:	jg     670b8 <writeSyntaxElement_Level_VLC1+0x68>
   67070:	lea    ecx,[rax+rdx*2]
   67073:	mov    QWORD PTR [rdi+0x10],0x1
   6707b:	mov    r8d,0x1
   67081:	lea    eax,[rcx-0x1]
   67084:	mov    DWORD PTR [rdi+0xc],eax
   67087:	sub    ecx,0x2
   6708a:	js     670a7 <writeSyntaxElement_Level_VLC1+0x57>
   6708c:	xor    eax,eax
   6708e:	xchg   ax,ax
   67090:	mov    edx,r8d
   67093:	add    eax,eax
   67095:	sar    edx,cl
   67097:	sub    ecx,0x1
   6709a:	and    edx,0x1
   6709d:	or     eax,edx
   6709f:	cmp    ecx,0xffffffff
   670a2:	jne    67090 <writeSyntaxElement_Level_VLC1+0x40>
   670a4:	mov    DWORD PTR [rdi+0x14],eax
   670a7:	mov    rsi,QWORD PTR [rsi]
   670aa:	call   66860 <writeUVLC2buffer>
   670af:	mov    eax,DWORD PTR [rdi+0xc]
   670b2:	ret    
   670b3:	nop    DWORD PTR [rax+rax*1+0x0]
   670b8:	cmp    edx,0xf
   670bb:	jg     670e0 <writeSyntaxElement_Level_VLC1+0x90>
   670bd:	lea    r8d,[rdx+rdx*1-0x10]
   670c2:	mov    DWORD PTR [rdi+0xc],0x13
   670c9:	mov    ecx,0x12
   670ce:	or     r8d,eax
   670d1:	or     r8d,0x10
   670d5:	mov    DWORD PTR [rdi+0x10],r8d
   670d9:	jmp    6708c <writeSyntaxElement_Level_VLC1+0x3c>
   670db:	nop    DWORD PTR [rax+rax*1+0x0]
   670e0:	lea    r8d,[rdx+rdx*1-0x20]
   670e5:	mov    DWORD PTR [rdi+0xc],0x1c
   670ec:	mov    ecx,0x1b
   670f1:	or     r8d,eax
   670f4:	or     r8d,0x1000
   670fb:	mov    DWORD PTR [rdi+0x10],r8d
   670ff:	jmp    6708c <writeSyntaxElement_Level_VLC1+0x3c>
   67101:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   6710c:	nop    DWORD PTR [rax+0x0]

0000000000067110 <writeSyntaxElement_Level_VLCN>:
   67110:	endbr64 
   67114:	mov    r8d,DWORD PTR [rdi+0x4]
   67118:	mov    ecx,r8d
   6711b:	mov    r10d,r8d
   6711e:	sar    ecx,0x1f
   67121:	shr    r10d,0x1f
   67125:	mov    eax,ecx
   67127:	xor    eax,r8d
   6712a:	mov    r8d,0xf
   67130:	sub    eax,ecx
   67132:	lea    ecx,[rsi-0x1]
   67135:	shl    r8d,cl
   67138:	add    r8d,0x1
   6713c:	cmp    eax,r8d
   6713f:	jge    671b0 <writeSyntaxElement_Level_VLCN+0xa0>
   67141:	mov    r8d,0xffffffff
   67147:	lea    r9d,[rax-0x1]
   6714b:	bts    r10d,esi
   6714f:	mov    DWORD PTR [rdi+0x14],0x0
   67156:	shl    r8d,cl
   67159:	mov    eax,r9d
   6715c:	not    r8d
   6715f:	sar    eax,cl
   67161:	and    r9d,r8d
   67164:	add    eax,esi
   67166:	mov    r8d,r10d
   67169:	add    r9d,r9d
   6716c:	lea    ecx,[rax+0x1]
   6716f:	or     r8d,r9d
   67172:	mov    DWORD PTR [rdi+0xc],ecx
   67175:	mov    DWORD PTR [rdi+0x10],r8d
   67179:	test   eax,eax
   6717b:	js     6719d <writeSyntaxElement_Level_VLCN+0x8d>
   6717d:	xor    esi,esi
   6717f:	nop
   67180:	mov    ecx,eax
   67182:	mov    r11d,r8d
   67185:	add    esi,esi
   67187:	sub    eax,0x1
   6718a:	sar    r11d,cl
   6718d:	mov    ecx,r11d
   67190:	and    ecx,0x1
   67193:	or     esi,ecx
   67195:	cmp    eax,0xffffffff
   67198:	jne    67180 <writeSyntaxElement_Level_VLCN+0x70>
   6719a:	mov    DWORD PTR [rdi+0x14],esi
   6719d:	mov    rsi,QWORD PTR [rdx]
   671a0:	call   66860 <writeUVLC2buffer>
   671a5:	mov    eax,DWORD PTR [rdi+0xc]
   671a8:	ret    
   671a9:	nop    DWORD PTR [rax+0x0]
   671b0:	sub    eax,r8d
   671b3:	mov    DWORD PTR [rdi+0xc],0x1c
   671ba:	lea    r8d,[rax+rax*1]
   671be:	mov    eax,0x1b
   671c3:	or     r8d,r10d
   671c6:	or     r8d,0x1000
   671cd:	mov    DWORD PTR [rdi+0x10],r8d
   671d1:	jmp    6717d <writeSyntaxElement_Level_VLCN+0x6d>
   671d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   671de:	xchg   ax,ax

00000000000671e0 <writeVlcByteAlign>:
   671e0:	endbr64 
   671e4:	mov    edx,DWORD PTR [rdi+0x4]
   671e7:	cmp    edx,0x7
   671ea:	jg     67236 <writeVlcByteAlign+0x56>
   671ec:	movzx  eax,BYTE PTR [rdi+0x8]
   671f0:	mov    ecx,edx
   671f2:	mov    esi,0xff
   671f7:	shl    eax,cl
   671f9:	mov    ecx,0x8
   671fe:	sub    ecx,edx
   67200:	sar    esi,cl
   67202:	mov    rcx,QWORD PTR [rip+0x213a7]        # 885b0 <img>
   67209:	or     eax,esi
   6720b:	mov    BYTE PTR [rdi+0x8],al
   6720e:	movsxd rsi,DWORD PTR [rcx+0x18]
   67212:	mov    rcx,QWORD PTR [rip+0x2138f]        # 885a8 <stats>
   67219:	add    DWORD PTR [rcx+rsi*4+0x530],edx
   67220:	movsxd rdx,DWORD PTR [rdi]
   67223:	mov    rcx,QWORD PTR [rdi+0x20]
   67227:	lea    esi,[rdx+0x1]
   6722a:	mov    DWORD PTR [rdi],esi
   6722c:	mov    BYTE PTR [rcx+rdx*1],al
   6722f:	mov    DWORD PTR [rdi+0x4],0x8
   67236:	ret    
   67237:	nop    WORD PTR [rax+rax*1+0x0]

0000000000067240 <estimate_weighting_factor_P_slice>:
   67240:	endbr64 
   67244:	push   r15
   67246:	push   r14
   67248:	push   r13
   6724a:	push   r12
   6724c:	push   rbp
   6724d:	push   rbx
   6724e:	sub    rsp,0x388
   67255:	mov    r13,QWORD PTR [rip+0x21354]        # 885b0 <img>
   6725c:	mov    DWORD PTR [rsp+0x60],edi
   67260:	mov    rax,QWORD PTR fs:0x28
   67269:	mov    QWORD PTR [rsp+0x378],rax
   67271:	xor    eax,eax
   67273:	mov    eax,DWORD PTR [r13+0x11ad0]
   6727a:	test   eax,eax
   6727c:	je     672a1 <estimate_weighting_factor_P_slice+0x61>
   6727e:	movsxd rax,DWORD PTR [r13+0xc]
   67282:	mov    rdx,rax
   67285:	imul   rax,rax,0x278
   6728c:	add    rax,QWORD PTR [r13+0x3758]
   67293:	mov    eax,DWORD PTR [rax+0x214]
   67299:	test   eax,eax
   6729b:	jne    677f3 <estimate_weighting_factor_P_slice+0x5b3>
   672a1:	movabs rbx,0x2000000020
   672ab:	add    eax,0x1
   672ae:	xor    r14d,r14d
   672b1:	mov    DWORD PTR [rip+0x4ce95],0x5        # b4150 <luma_log_weight_denom>
   672bb:	mov    QWORD PTR [rsp+0x98],rbx
   672c3:	xor    r15d,r15d
   672c6:	mov    rbx,QWORD PTR [rip+0x39b3b]        # a0e08 <wp_weight>
   672cd:	mov    DWORD PTR [rip+0x4f419],0x5        # b66f0 <chroma_log_weight_denom>
   672d7:	mov    QWORD PTR [rsp+0x50],rbx
   672dc:	mov    rbx,QWORD PTR [rip+0x4ce4d]        # b4130 <wp_offset>
   672e3:	mov    DWORD PTR [rip+0x4cec7],0x10        # b41b4 <wp_luma_round>
   672ed:	mov    QWORD PTR [rsp+0x58],rbx
   672f2:	lea    rbx,[rip+0x50157]        # b7450 <listXsize>
   672f9:	mov    DWORD PTR [rip+0x4cead],0x10        # b41b0 <wp_chroma_round>
   67303:	mov    QWORD PTR [rsp+0x80],rbx
   6730b:	mov    QWORD PTR [rsp+0x48],rax
   67310:	mov    ebp,DWORD PTR [rbx]
   67312:	test   ebp,ebp
   67314:	jle    67394 <estimate_weighting_factor_P_slice+0x154>
   67316:	mov    rax,QWORD PTR [rsp+0x50]
   6731b:	mov    r11,r14
   6731e:	xor    esi,esi
   67320:	lea    r10,[rsp+0xa0]
   67328:	lea    r9,[rsp+0x210]
   67330:	mov    r12,QWORD PTR [rax+r15*8]
   67334:	mov    rax,QWORD PTR [rsp+0x58]
   67339:	mov    rbp,QWORD PTR [rax+r15*8]
   6733d:	nop    DWORD PTR [rax]
   67340:	mov    r8,QWORD PTR [r12+rsi*8]
   67344:	mov    rdi,QWORD PTR [rbp+rsi*8+0x0]
   67349:	mov    rdx,r11
   6734c:	xor    eax,eax
   6734e:	mov    ecx,0x20
   67353:	mov    DWORD PTR [r8+rax*1],ecx
   67357:	mov    DWORD PTR [rdi+rax*1],0x0
   6735e:	add    rax,0x4
   67362:	mov    DWORD PTR [r10+rdx*1],ecx
   67366:	mov    DWORD PTR [r9+rdx*1],0x0
   6736e:	add    rdx,0x4
   67372:	cmp    rax,0xc
   67376:	je     67388 <estimate_weighting_factor_P_slice+0x148>
   67378:	mov    ecx,DWORD PTR [rsp+rax*1+0x94]
   6737f:	jmp    67353 <estimate_weighting_factor_P_slice+0x113>
   67381:	nop    DWORD PTR [rax+0x0]
   67388:	add    rsi,0x1
   6738c:	add    r11,0xc
   67390:	cmp    DWORD PTR [rbx],esi
   67392:	jg     67340 <estimate_weighting_factor_P_slice+0x100>
   67394:	lea    rax,[r15+0x1]
   67398:	add    rbx,0x4
   6739c:	add    r14,0xb4
   673a3:	cmp    r15,QWORD PTR [rsp+0x48]
   673a8:	je     673b2 <estimate_weighting_factor_P_slice+0x172>
   673aa:	mov    r15,rax
   673ad:	jmp    67310 <estimate_weighting_factor_P_slice+0xd0>
   673b2:	mov    ebx,DWORD PTR [r13+0x3c]
   673b6:	mov    DWORD PTR [rsp+0x64],ebx
   673ba:	test   ebx,ebx
   673bc:	jle    67416 <estimate_weighting_factor_P_slice+0x1d6>
   673be:	mov    rax,QWORD PTR [rip+0x50003]        # b73c8 <imgY_org>
   673c5:	mov    edi,DWORD PTR [r13+0x34]
   673c9:	lea    edx,[rbx-0x1]
   673cc:	pxor   xmm3,xmm3
   673d0:	movapd xmm2,xmm3
   673d4:	lea    rsi,[rax+0x8]
   673d8:	lea    r9,[rsi+rdx*8]
   673dc:	lea    edx,[rdi-0x1]
   673df:	lea    r8,[rdx+rdx*1+0x2]
   673e4:	test   edi,edi
   673e6:	jle    67408 <estimate_weighting_factor_P_slice+0x1c8>
   673e8:	mov    rax,QWORD PTR [rax]
   673eb:	lea    rcx,[r8+rax*1]
   673ef:	nop
   673f0:	movzx  edx,WORD PTR [rax]
   673f3:	pxor   xmm0,xmm0
   673f7:	add    rax,0x2
   673fb:	cvtsi2sd xmm0,edx
   673ff:	addsd  xmm2,xmm0
   67403:	cmp    rcx,rax
   67406:	jne    673f0 <estimate_weighting_factor_P_slice+0x1b0>
   67408:	mov    rax,rsi
   6740b:	cmp    rsi,r9
   6740e:	je     6741e <estimate_weighting_factor_P_slice+0x1de>
   67410:	add    rsi,0x8
   67414:	jmp    673e4 <estimate_weighting_factor_P_slice+0x1a4>
   67416:	pxor   xmm3,xmm3
   6741a:	movapd xmm2,xmm3
   6741e:	mov    eax,DWORD PTR [rsp+0x64]
   67422:	mov    rdi,QWORD PTR [rsp+0x48]
   67427:	mov    QWORD PTR [rsp+0x68],0x0
   67430:	mov    r15d,DWORD PTR [rip+0x4cd19]        # b4150 <luma_log_weight_denom>
   67437:	movsd  xmm4,QWORD PTR [rip+0xba19]        # 72e58 <quant_coef+0x198>
   6743f:	lea    ebx,[rax*4+0x20]
   67446:	mov    rax,QWORD PTR [rip+0x4ffd3]        # b7420 <listX>
   6744d:	mov    r14d,DWORD PTR [rip+0x4cd60]        # b41b4 <wp_luma_round>
   67454:	mov    DWORD PTR [rsp+0x24],ebx
   67458:	movsd  xmm6,QWORD PTR [rip+0x149c0]        # 7be20 <lentab.6136+0x340>
   67460:	movapd xmm5,xmm4
   67464:	mov    ecx,r15d
   67467:	mov    QWORD PTR [rsp+0x78],rax
   6746c:	lea    rax,[rip+0x4ffad]        # b7420 <listX>
   67473:	mov    QWORD PTR [rsp+0x70],rax
   67478:	lea    rax,[rip+0x4ffd5]        # b7454 <listXsize+0x4>
   6747f:	lea    rax,[rax+rdi*4]
   67483:	mov    QWORD PTR [rsp+0x88],rax
   6748b:	lea    eax,[rbx-0x1]
   6748e:	lea    rax,[rax*8+0x8]
   67496:	mov    QWORD PTR [rsp+0x10],rax
   6749b:	lea    rax,[rip+0x4ffae]        # b7450 <listXsize>
   674a2:	mov    QWORD PTR [rsp+0x40],rax
   674a7:	mov    rax,QWORD PTR [rsp+0x40]
   674ac:	mov    eax,DWORD PTR [rax]
   674ae:	test   eax,eax
   674b0:	jle    676ae <estimate_weighting_factor_P_slice+0x46e>
   674b6:	mov    edx,DWORD PTR [r13+0x34]
   674ba:	mov    ebx,DWORD PTR [rsp+0x64]
   674be:	sub    eax,0x1
   674c1:	mov    rsi,QWORD PTR [rsp+0x70]
   674c6:	imul   ebx,edx
   674c9:	lea    edi,[rdx*4+0x20]
   674d0:	mov    rdx,QWORD PTR [rsp+0x78]
   674d5:	mov    rsi,QWORD PTR [rsi]
   674d8:	mov    DWORD PTR [rsp+0xc],edi
   674dc:	lea    r11d,[rdi-0x1]
   674e0:	lea    rax,[rdx+rax*8+0x8]
   674e5:	mov    r15,rdx
   674e8:	mov    QWORD PTR [rsp+0x28],rax
   674ed:	lea    eax,[rbx-0x1]
   674f0:	mov    QWORD PTR [rsp+0x30],rax
   674f5:	lea    rax,[rax+rax*1+0x2]
   674fa:	mov    QWORD PTR [rsp+0x18],rsi
   674ff:	mov    rsi,QWORD PTR [rsp+0x68]
   67504:	mov    DWORD PTR [rsp+0x20],ebx
   67508:	mov    QWORD PTR [rsp+0x38],rax
   6750d:	lea    rbp,[rsp+rsi*1+0xa0]
   67515:	lea    r12,[rsp+rsi*1+0x210]
   6751d:	nop    DWORD PTR [rax]
   67520:	mov    rax,QWORD PTR [rsp+0x18]
   67525:	mov    ebx,DWORD PTR [rsp+0x20]
   67529:	mov    rax,QWORD PTR [rax]
   6752c:	mov    rdi,QWORD PTR [rax+0x1920]
   67533:	mov    r8,QWORD PTR [rax+0x1928]
   6753a:	test   ebx,ebx
   6753c:	jle    67762 <estimate_weighting_factor_P_slice+0x522>
   67542:	mov    rbx,QWORD PTR [rsp+0x38]
   67547:	mov    rax,rdi
   6754a:	movapd xmm1,xmm3
   6754e:	lea    rsi,[rbx+rdi*1]
   67552:	nop    WORD PTR [rax+rax*1+0x0]
   67558:	movzx  edx,WORD PTR [rax]
   6755b:	pxor   xmm0,xmm0
   6755f:	add    rax,0x2
   67563:	cvtsi2sd xmm0,edx
   67567:	addsd  xmm1,xmm0
   6756b:	cmp    rsi,rax
   6756e:	jne    67558 <estimate_weighting_factor_P_slice+0x318>
   67570:	mov    r10d,DWORD PTR [rsp+0x60]
   67575:	test   r10d,r10d
   67578:	jne    6776e <estimate_weighting_factor_P_slice+0x52e>
   6757e:	ucomisd xmm1,xmm3
   67582:	jp     6758a <estimate_weighting_factor_P_slice+0x34a>
   67584:	je     677a6 <estimate_weighting_factor_P_slice+0x566>
   6758a:	movapd xmm0,xmm2
   6758e:	mulsd  xmm0,xmm6
   67592:	divsd  xmm0,xmm1
   67596:	addsd  xmm0,xmm5
   6759a:	cvttsd2si eax,xmm0
   6759e:	lea    edx,[rax+0x40]
   675a1:	cmp    edx,0xbf
   675a7:	jbe    67806 <estimate_weighting_factor_P_slice+0x5c6>
   675ad:	mov    DWORD PTR [rbp+0x0],0x20
   675b4:	mov    DWORD PTR [rbp+0x4],0x20
   675bb:	mov    DWORD PTR [rbp+0x8],0x20
   675c2:	mov    r9d,DWORD PTR [rbp+0x0]
   675c6:	mov    esi,DWORD PTR [r12]
   675ca:	xor    edx,edx
   675cc:	mov    rbx,QWORD PTR [rsp+0x30]
   675d1:	jmp    675db <estimate_weighting_factor_P_slice+0x39b>
   675d3:	nop    DWORD PTR [rax+rax*1+0x0]
   675d8:	mov    rdx,rax
   675db:	movzx  eax,WORD PTR [rdi+rdx*2]
   675df:	xor    r10d,r10d
   675e2:	imul   eax,r9d
   675e6:	add    eax,r14d
   675e9:	sar    eax,cl
   675eb:	add    eax,esi
   675ed:	js     67601 <estimate_weighting_factor_P_slice+0x3c1>
   675ef:	cmp    DWORD PTR [r13+0x11bec],eax
   675f6:	cmovle eax,DWORD PTR [r13+0x11bec]
   675fe:	mov    r10d,eax
   67601:	mov    WORD PTR [r8+rdx*2],r10w
   67606:	lea    rax,[rdx+0x1]
   6760a:	cmp    rbx,rdx
   6760d:	jne    675d8 <estimate_weighting_factor_P_slice+0x398>
   6760f:	mov    edi,DWORD PTR [rsp+0x24]
   67613:	xor    ebx,ebx
   67615:	test   edi,edi
   67617:	jle    67691 <estimate_weighting_factor_P_slice+0x451>
   67619:	nop    DWORD PTR [rax+0x0]
   67620:	mov    esi,DWORD PTR [rsp+0xc]
   67624:	test   esi,esi
   67626:	jle    67686 <estimate_weighting_factor_P_slice+0x446>
   67628:	mov    rax,QWORD PTR [r15]
   6762b:	mov    r9d,DWORD PTR [rbp+0x0]
   6762f:	mov    edi,DWORD PTR [r12]
   67633:	mov    rdx,QWORD PTR [rax+0x1930]
   6763a:	mov    rax,QWORD PTR [rax+0x1938]
   67641:	mov    r10,QWORD PTR [rdx+rbx*1]
   67645:	mov    r8,QWORD PTR [rax+rbx*1]
   67649:	xor    edx,edx
   6764b:	jmp    67653 <estimate_weighting_factor_P_slice+0x413>
   6764d:	nop    DWORD PTR [rax]
   67650:	mov    rdx,rax
   67653:	movzx  eax,WORD PTR [r10+rdx*2]
   67658:	xor    esi,esi
   6765a:	imul   eax,r9d
   6765e:	add    eax,r14d
   67661:	sar    eax,cl
   67663:	add    eax,edi
   67665:	js     67678 <estimate_weighting_factor_P_slice+0x438>
   67667:	cmp    DWORD PTR [r13+0x11bec],eax
   6766e:	cmovle eax,DWORD PTR [r13+0x11bec]
   67676:	mov    esi,eax
   67678:	mov    WORD PTR [r8+rdx*2],si
   6767d:	lea    rax,[rdx+0x1]
   67681:	cmp    r11,rdx
   67684:	jne    67650 <estimate_weighting_factor_P_slice+0x410>
   67686:	add    rbx,0x8
   6768a:	cmp    QWORD PTR [rsp+0x10],rbx
   6768f:	jne    67620 <estimate_weighting_factor_P_slice+0x3e0>
   67691:	add    QWORD PTR [rsp+0x18],0x8
   67697:	add    r15,0x8
   6769b:	add    rbp,0xc
   6769f:	add    r12,0xc
   676a3:	cmp    r15,QWORD PTR [rsp+0x28]
   676a8:	jne    67520 <estimate_weighting_factor_P_slice+0x2e0>
   676ae:	add    QWORD PTR [rsp+0x40],0x4
   676b4:	mov    rax,QWORD PTR [rsp+0x40]
   676b9:	add    QWORD PTR [rsp+0x70],0x8
   676bf:	add    QWORD PTR [rsp+0x68],0xb4
   676c8:	cmp    QWORD PTR [rsp+0x88],rax
   676d0:	jne    674a7 <estimate_weighting_factor_P_slice+0x267>
   676d6:	mov    rbx,QWORD PTR [rsp+0x80]
   676de:	xor    r12d,r12d
   676e1:	xor    ebp,ebp
   676e3:	mov    edx,DWORD PTR [rbx]
   676e5:	test   edx,edx
   676e7:	jle    67747 <estimate_weighting_factor_P_slice+0x507>
   676e9:	mov    rax,QWORD PTR [rsp+0x50]
   676ee:	mov    r11,r12
   676f1:	xor    esi,esi
   676f3:	lea    r10,[rsp+0xa0]
   676fb:	lea    r9,[rsp+0x210]
   67703:	mov    r14,QWORD PTR [rax+rbp*8]
   67707:	mov    rax,QWORD PTR [rsp+0x58]
   6770c:	mov    r13,QWORD PTR [rax+rbp*8]
   67710:	mov    r8,QWORD PTR [r14+rsi*8]
   67714:	mov    rdi,QWORD PTR [r13+rsi*8+0x0]
   67719:	mov    rdx,r11
   6771c:	xor    eax,eax
   6771e:	mov    ecx,DWORD PTR [r10+rdx*1]
   67722:	mov    DWORD PTR [r8+rax*1],ecx
   67726:	mov    ecx,DWORD PTR [r9+rdx*1]
   6772a:	add    rdx,0x4
   6772e:	mov    DWORD PTR [rdi+rax*1],ecx
   67731:	add    rax,0x4
   67735:	cmp    rax,0xc
   67739:	jne    6771e <estimate_weighting_factor_P_slice+0x4de>
   6773b:	add    rsi,0x1
   6773f:	add    r11,0xc
   67743:	cmp    DWORD PTR [rbx],esi
   67745:	jg     67710 <estimate_weighting_factor_P_slice+0x4d0>
   67747:	lea    rax,[rbp+0x1]
   6774b:	add    rbx,0x4
   6774f:	add    r12,0xb4
   67756:	cmp    rbp,QWORD PTR [rsp+0x48]
   6775b:	je     677ce <estimate_weighting_factor_P_slice+0x58e>
   6775d:	mov    rbp,rax
   67760:	jmp    676e3 <estimate_weighting_factor_P_slice+0x4a3>
   67762:	mov    eax,DWORD PTR [rsp+0x60]
   67766:	movapd xmm1,xmm3
   6776a:	test   eax,eax
   6776c:	je     677a6 <estimate_weighting_factor_P_slice+0x566>
   6776e:	movapd xmm0,xmm2
   67772:	mov    eax,0x7f
   67777:	subsd  xmm0,xmm1
   6777b:	pxor   xmm1,xmm1
   6777f:	cvtsi2sd xmm1,DWORD PTR [rsp+0x20]
   67785:	divsd  xmm0,xmm1
   67789:	addsd  xmm0,xmm4
   6778d:	cvttsd2si edx,xmm0
   67791:	cmp    edx,0x7f
   67794:	cmovle eax,edx
   67797:	mov    edx,0xffffff80
   6779c:	cmp    eax,0xffffff80
   6779f:	cmovl  eax,edx
   677a2:	mov    DWORD PTR [r12],eax
   677a6:	mov    r9d,DWORD PTR [rsp+0x20]
   677ab:	mov    DWORD PTR [rbp+0x0],0x20
   677b2:	mov    DWORD PTR [rbp+0x4],0x20
   677b9:	mov    DWORD PTR [rbp+0x8],0x20
   677c0:	test   r9d,r9d
   677c3:	jg     675c2 <estimate_weighting_factor_P_slice+0x382>
   677c9:	jmp    6760f <estimate_weighting_factor_P_slice+0x3cf>
   677ce:	mov    rax,QWORD PTR [rsp+0x378]
   677d6:	xor    rax,QWORD PTR fs:0x28
   677df:	jne    6780e <estimate_weighting_factor_P_slice+0x5ce>
   677e1:	add    rsp,0x388
   677e8:	pop    rbx
   677e9:	pop    rbp
   677ea:	pop    r12
   677ec:	pop    r13
   677ee:	pop    r14
   677f0:	pop    r15
   677f2:	ret    
   677f3:	and    edx,0x1
   677f6:	cmp    edx,0x1
   677f9:	sbb    eax,eax
   677fb:	and    eax,0xfffffffe
   677fe:	add    eax,0x4
   67801:	jmp    672a1 <estimate_weighting_factor_P_slice+0x61>
   67806:	mov    DWORD PTR [rbp+0x0],eax
   67809:	jmp    675b4 <estimate_weighting_factor_P_slice+0x374>
   6780e:	call   4390 <__stack_chk_fail@plt>
   67813:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   6781e:	xchg   ax,ax

0000000000067820 <estimate_weighting_factor_B_slice>:
   67820:	endbr64 
   67824:	push   r15
   67826:	push   r14
   67828:	push   r13
   6782a:	push   r12
   6782c:	push   rbp
   6782d:	push   rbx
   6782e:	lea    r11,[rsp-0x4000]
   67836:	sub    rsp,0x1000
   6783d:	or     QWORD PTR [rsp],0x0
   67842:	cmp    rsp,r11
   67845:	jne    67836 <estimate_weighting_factor_B_slice+0x16>
   67847:	sub    rsp,0x898
   6784e:	mov    r15,QWORD PTR [rip+0x20d5b]        # 885b0 <img>
   67855:	mov    rax,QWORD PTR fs:0x28
   6785e:	mov    QWORD PTR [rsp+0x4888],rax
   67866:	xor    eax,eax
   67868:	mov    eax,DWORD PTR [r15+0x11ad0]
   6786f:	test   eax,eax
   67871:	je     67896 <estimate_weighting_factor_B_slice+0x76>
   67873:	movsxd rax,DWORD PTR [r15+0xc]
   67877:	mov    rdx,rax
   6787a:	imul   rax,rax,0x278
   67881:	add    rax,QWORD PTR [r15+0x3758]
   67888:	mov    eax,DWORD PTR [rax+0x214]
   6788e:	test   eax,eax
   67890:	jne    6804c <estimate_weighting_factor_B_slice+0x82c>
   67896:	mov    rbx,QWORD PTR [rip+0x39563]        # a0e00 <active_pps>
   6789d:	cmp    DWORD PTR [rbx+0xc4],0x2
   678a4:	mov    QWORD PTR [rsp+0x70],rbx
   678a9:	je     6810a <estimate_weighting_factor_B_slice+0x8ea>
   678af:	mov    DWORD PTR [rip+0x4c897],0x6        # b4150 <luma_log_weight_denom>
   678b9:	mov    edx,0x20
   678be:	mov    DWORD PTR [rip+0x4ee28],0x6        # b66f0 <chroma_log_weight_denom>
   678c8:	mov    DWORD PTR [rsp+0x58],0x40
   678d0:	mov    edi,DWORD PTR [rsp+0x58]
   678d4:	add    eax,0x1
   678d7:	mov    DWORD PTR [rip+0x4c8d7],edx        # b41b4 <wp_luma_round>
   678dd:	xor    r14d,r14d
   678e0:	mov    rbx,QWORD PTR [rip+0x39521]        # a0e08 <wp_weight>
   678e7:	mov    DWORD PTR [rip+0x4c8c3],edx        # b41b0 <wp_chroma_round>
   678ed:	xor    r13d,r13d
   678f0:	mov    DWORD PTR [rsp+0xb4],edi
   678f7:	mov    QWORD PTR [rsp+0x40],rbx
   678fc:	mov    rbx,QWORD PTR [rip+0x4c82d]        # b4130 <wp_offset>
   67903:	mov    DWORD PTR [rsp+0xb8],edi
   6790a:	mov    QWORD PTR [rsp+0x50],rbx
   6790f:	lea    rbx,[rip+0x4fb3a]        # b7450 <listXsize>
   67916:	mov    DWORD PTR [rsp+0xbc],edi
   6791d:	mov    QWORD PTR [rsp+0x68],rbx
   67922:	mov    QWORD PTR [rsp+0x48],rax
   67927:	mov    QWORD PTR [rsp+0x8],r15
   6792c:	mov    r15d,edi
   6792f:	mov    r12d,DWORD PTR [rbx]
   67932:	test   r12d,r12d
   67935:	jle    679ac <estimate_weighting_factor_B_slice+0x18c>
   67937:	mov    rax,QWORD PTR [rsp+0x40]
   6793c:	mov    r11,r14
   6793f:	xor    esi,esi
   67941:	lea    r10,[rsp+0x500]
   67949:	lea    r9,[rsp+0xc0]
   67951:	mov    r12,QWORD PTR [rax+r13*8]
   67955:	mov    rax,QWORD PTR [rsp+0x50]
   6795a:	mov    rbp,QWORD PTR [rax+r13*8]
   6795e:	xchg   ax,ax
   67960:	mov    r8,QWORD PTR [r12+rsi*8]
   67964:	mov    rdi,QWORD PTR [rbp+rsi*8+0x0]
   67969:	mov    rdx,r11
   6796c:	mov    ecx,r15d
   6796f:	xor    eax,eax
   67971:	mov    DWORD PTR [r8+rax*1],ecx
   67975:	mov    DWORD PTR [rdi+rax*1],0x0
   6797c:	add    rax,0x4
   67980:	mov    DWORD PTR [r10+rdx*1],0x0
   67988:	mov    DWORD PTR [r9+rdx*1],ecx
   6798c:	add    rdx,0x4
   67990:	cmp    rax,0xc
   67994:	je     679a0 <estimate_weighting_factor_B_slice+0x180>
   67996:	mov    ecx,DWORD PTR [rsp+rax*1+0xb4]
   6799d:	jmp    67971 <estimate_weighting_factor_B_slice+0x151>
   6799f:	nop
   679a0:	add    rsi,0x1
   679a4:	add    r11,0xc
   679a8:	cmp    DWORD PTR [rbx],esi
   679aa:	jg     67960 <estimate_weighting_factor_B_slice+0x140>
   679ac:	lea    rax,[r13+0x1]
   679b0:	add    rbx,0x4
   679b4:	add    r14,0xb4
   679bb:	cmp    r13,QWORD PTR [rsp+0x48]
   679c0:	je     679ca <estimate_weighting_factor_B_slice+0x1aa>
   679c2:	mov    r13,rax
   679c5:	jmp    6792f <estimate_weighting_factor_B_slice+0x10f>
   679ca:	mov    ebx,DWORD PTR [rip+0x4fa80]        # b7450 <listXsize>
   679d0:	mov    r15,QWORD PTR [rsp+0x8]
   679d5:	mov    DWORD PTR [rsp+0x5c],ebx
   679d9:	test   ebx,ebx
   679db:	jle    68396 <estimate_weighting_factor_B_slice+0xb76>
   679e1:	mov    rdi,QWORD PTR [rip+0x4fa38]        # b7420 <listX>
   679e8:	lea    edx,[rbx-0x1]
   679eb:	mov    esi,DWORD PTR [rip+0x4fa63]        # b7454 <listXsize+0x4>
   679f1:	mov    QWORD PTR [rsp+0x10],0x0
   679fa:	mov    rax,QWORD PTR [rip+0x22fa7]        # 8a9a8 <enc_picture>
   67a01:	mov    QWORD PTR [rsp+0x78],r15
   67a06:	mov    r13d,0xfffffc00
   67a0c:	mov    r14d,0x40
   67a12:	lea    rbx,[rdi+0x8]
   67a16:	mov    DWORD PTR [rsp+0x30],esi
   67a1a:	mov    QWORD PTR [rsp+0x18],rbx
   67a1f:	lea    rbx,[rbx+rdx*8]
   67a23:	lea    edx,[rsi-0x1]
   67a26:	mov    QWORD PTR [rsp+0x60],rbx
   67a2b:	mov    rbx,QWORD PTR [rip+0x4f9f6]        # b7428 <listX+0x8>
   67a32:	mov    QWORD PTR [rsp+0x90],rdi
   67a3a:	mov    QWORD PTR [rsp+0x38],rbx
   67a3f:	lea    rbx,[rbx+rdx*8+0x8]
   67a44:	mov    QWORD PTR [rsp+0x8],rbx
   67a49:	mov    QWORD PTR [rsp+0x28],rax
   67a4e:	mov    rax,rdi
   67a51:	mov    ebp,DWORD PTR [rsp+0x30]
   67a55:	test   ebp,ebp
   67a57:	jle    67b29 <estimate_weighting_factor_B_slice+0x309>
   67a5d:	mov    rax,QWORD PTR [rax]
   67a60:	mov    r11,QWORD PTR [rsp+0x38]
   67a65:	lea    rbx,[rsp+0xc0]
   67a6d:	lea    r15,[rsp+0xb4]
   67a75:	mov    r10d,DWORD PTR [rax+0x4]
   67a79:	mov    rax,QWORD PTR [rsp+0x28]
   67a7e:	mov    eax,DWORD PTR [rax+0x4]
   67a81:	mov    r12d,eax
   67a84:	mov    DWORD PTR [rsp+0x20],eax
   67a88:	mov    eax,0x7f
   67a8d:	sub    r12d,r10d
   67a90:	cmp    r12d,0x7f
   67a94:	cmovg  r12d,eax
   67a98:	mov    eax,0xffffff80
   67a9d:	cmp    r12d,0xffffff80
   67aa1:	cmovl  r12d,eax
   67aa5:	mov    rax,QWORD PTR [rsp+0x10]
   67aaa:	lea    rbp,[rsp+rax*1+0x940]
   67ab2:	nop    WORD PTR [rax+rax*1+0x0]
   67ab8:	mov    rax,QWORD PTR [r11]
   67abb:	mov    rsi,r15
   67abe:	mov    rcx,rbp
   67ac1:	mov    r9d,DWORD PTR [rax+0x4]
   67ac5:	mov    eax,0x7f
   67aca:	mov    edi,r9d
   67acd:	sub    edi,r10d
   67ad0:	cmp    edi,0x7f
   67ad3:	cmovg  edi,eax
   67ad6:	mov    eax,0xffffff80
   67adb:	cmp    edi,0xffffff80
   67ade:	cmovl  edi,eax
   67ae1:	mov    eax,edi
   67ae3:	shr    eax,0x1f
   67ae6:	add    eax,edi
   67ae8:	mov    r8d,eax
   67aeb:	sar    eax,0x1f
   67aee:	sar    r8d,1
   67af1:	xor    r8d,eax
   67af4:	sub    r8d,eax
   67af7:	add    r8d,0x4000
   67afe:	cmp    r9d,r10d
   67b01:	jne    67b58 <estimate_weighting_factor_B_slice+0x338>
   67b03:	mov    eax,DWORD PTR [rsi]
   67b05:	mov    DWORD PTR [rcx+0xa8c],eax
   67b0b:	mov    DWORD PTR [rcx],eax
   67b0d:	add    rsi,0x4
   67b11:	add    rcx,0x4
   67b15:	cmp    rsi,rbx
   67b18:	jne    67afe <estimate_weighting_factor_B_slice+0x2de>
   67b1a:	add    r11,0x8
   67b1e:	add    rbp,0xc
   67b22:	cmp    r11,QWORD PTR [rsp+0x8]
   67b27:	jne    67ab8 <estimate_weighting_factor_B_slice+0x298>
   67b29:	mov    rbx,QWORD PTR [rsp+0x18]
   67b2e:	mov    rdi,QWORD PTR [rsp+0x60]
   67b33:	add    QWORD PTR [rsp+0x10],0xb4
   67b3c:	mov    rax,rbx
   67b3f:	cmp    rbx,rdi
   67b42:	je     67ba9 <estimate_weighting_factor_B_slice+0x389>
   67b44:	add    rbx,0x8
   67b48:	mov    QWORD PTR [rsp+0x18],rbx
   67b4d:	jmp    67a51 <estimate_weighting_factor_B_slice+0x231>
   67b52:	nop    WORD PTR [rax+rax*1+0x0]
   67b58:	mov    eax,r8d
   67b5b:	cdq    
   67b5c:	idiv   edi
   67b5e:	imul   eax,r12d
   67b62:	lea    edx,[rax+0x20]
   67b65:	mov    eax,edx
   67b67:	sar    eax,0x6
   67b6a:	cmp    edx,0xffff
   67b70:	mov    edx,0x3ff
   67b75:	cmovg  eax,edx
   67b78:	cmp    eax,0xfffffc00
   67b7d:	cmovl  eax,r13d
   67b81:	sar    eax,0x2
   67b84:	lea    edx,[rax+0x40]
   67b87:	mov    DWORD PTR [rcx+0xa8c],eax
   67b8d:	cmp    edx,0xc0
   67b93:	jbe    67b9d <estimate_weighting_factor_B_slice+0x37d>
   67b95:	mov    eax,DWORD PTR [rsi]
   67b97:	mov    DWORD PTR [rcx+0xa8c],eax
   67b9d:	mov    edx,r14d
   67ba0:	sub    edx,eax
   67ba2:	mov    DWORD PTR [rcx],edx
   67ba4:	jmp    67b0d <estimate_weighting_factor_B_slice+0x2ed>
   67ba9:	mov    rax,QWORD PTR [rsp+0x70]
   67bae:	mov    r15,QWORD PTR [rsp+0x78]
   67bb3:	mov    eax,DWORD PTR [rax+0xc4]
   67bb9:	mov    DWORD PTR [rsp+0x70],eax
   67bbd:	cmp    eax,0x2
   67bc0:	je     68130 <estimate_weighting_factor_B_slice+0x910>
   67bc6:	mov    ebx,DWORD PTR [r15+0x3c]
   67bca:	mov    DWORD PTR [rsp+0x78],ebx
   67bce:	test   ebx,ebx
   67bd0:	jle    67c2e <estimate_weighting_factor_B_slice+0x40e>
   67bd2:	mov    rax,QWORD PTR [rip+0x4f7ef]        # b73c8 <imgY_org>
   67bd9:	mov    edi,DWORD PTR [r15+0x34]
   67bdd:	lea    edx,[rbx-0x1]
   67be0:	pxor   xmm3,xmm3
   67be4:	movapd xmm2,xmm3
   67be8:	lea    rsi,[rax+0x8]
   67bec:	lea    r9,[rsi+rdx*8]
   67bf0:	lea    edx,[rdi-0x1]
   67bf3:	lea    r8,[rdx+rdx*1+0x2]
   67bf8:	test   edi,edi
   67bfa:	jle    67c20 <estimate_weighting_factor_B_slice+0x400>
   67bfc:	mov    rax,QWORD PTR [rax]
   67bff:	lea    rcx,[r8+rax*1]
   67c03:	nop    DWORD PTR [rax+rax*1+0x0]
   67c08:	movzx  edx,WORD PTR [rax]
   67c0b:	pxor   xmm0,xmm0
   67c0f:	add    rax,0x2
   67c13:	cvtsi2sd xmm0,edx
   67c17:	addsd  xmm2,xmm0
   67c1b:	cmp    rcx,rax
   67c1e:	jne    67c08 <estimate_weighting_factor_B_slice+0x3e8>
   67c20:	mov    rax,rsi
   67c23:	cmp    r9,rsi
   67c26:	je     67c36 <estimate_weighting_factor_B_slice+0x416>
   67c28:	add    rsi,0x8
   67c2c:	jmp    67bf8 <estimate_weighting_factor_B_slice+0x3d8>
   67c2e:	pxor   xmm3,xmm3
   67c32:	movapd xmm2,xmm3
   67c36:	mov    eax,DWORD PTR [rsp+0x78]
   67c3a:	mov    edx,DWORD PTR [rsp+0x5c]
   67c3e:	mov    QWORD PTR [rsp+0x80],0x0
   67c4a:	mov    rdi,QWORD PTR [rsp+0x48]
   67c4f:	mov    r13d,DWORD PTR [rip+0x4c4fa]        # b4150 <luma_log_weight_denom>
   67c56:	lea    ebx,[rax*4+0x20]
   67c5d:	lea    rax,[rip+0x4f7bc]        # b7420 <listX>
   67c64:	mov    r14d,DWORD PTR [rip+0x4c549]        # b41b4 <wp_luma_round>
   67c6b:	movsd  xmm4,QWORD PTR [rip+0xb1e5]        # 72e58 <quant_coef+0x198>
   67c73:	mov    QWORD PTR [rsp+0x88],rax
   67c7b:	lea    rax,[rip+0x4f7d2]        # b7454 <listXsize+0x4>
   67c82:	mov    ecx,r13d
   67c85:	lea    rax,[rax+rdi*4]
   67c89:	mov    DWORD PTR [rsp+0x28],ebx
   67c8d:	mov    QWORD PTR [rsp+0x98],rax
   67c95:	lea    eax,[rbx-0x1]
   67c98:	lea    r12,[rax*8+0x8]
   67ca0:	lea    rax,[rip+0x4f7a9]        # b7450 <listXsize>
   67ca7:	mov    QWORD PTR [rsp+0x60],rax
   67cac:	lea    rax,[rsp+0xc0]
   67cb4:	mov    QWORD PTR [rsp+0xa0],rax
   67cbc:	lea    rax,[rsp+0x500]
   67cc4:	mov    QWORD PTR [rsp+0xa8],rax
   67ccc:	test   edx,edx
   67cce:	jle    67ed1 <estimate_weighting_factor_B_slice+0x6b1>
   67cd4:	mov    eax,DWORD PTR [r15+0x34]
   67cd8:	mov    edi,DWORD PTR [rsp+0x78]
   67cdc:	mov    rsi,QWORD PTR [rsp+0x80]
   67ce4:	mov    r10,QWORD PTR [rsp+0x90]
   67cec:	imul   edi,eax
   67cef:	lea    ebx,[rax*4+0x20]
   67cf6:	mov    rax,QWORD PTR [rsp+0x88]
   67cfe:	mov    r11,r10
   67d01:	lea    r9d,[rbx-0x1]
   67d05:	mov    rax,QWORD PTR [rax]
   67d08:	lea    ebp,[rdi-0x1]
   67d0b:	mov    DWORD PTR [rsp+0x20],edi
   67d0f:	mov    QWORD PTR [rsp+0x8],rax
   67d14:	mov    rax,QWORD PTR [rsp+0xa0]
   67d1c:	add    rax,rsi
   67d1f:	mov    QWORD PTR [rsp+0x18],rax
   67d24:	mov    rax,QWORD PTR [rsp+0xa8]
   67d2c:	add    rax,rsi
   67d2f:	mov    QWORD PTR [rsp+0x10],rax
   67d34:	lea    eax,[rdx-0x1]
   67d37:	lea    rax,[r10+rax*8+0x8]
   67d3c:	mov    QWORD PTR [rsp+0x30],rax
   67d41:	lea    rax,[rbp+rbp*1+0x2]
   67d46:	mov    QWORD PTR [rsp+0x38],rax
   67d4b:	nop    DWORD PTR [rax+rax*1+0x0]
   67d50:	mov    rax,QWORD PTR [rsp+0x8]
   67d55:	mov    r10d,DWORD PTR [rsp+0x20]
   67d5a:	mov    rax,QWORD PTR [rax]
   67d5d:	mov    rdi,QWORD PTR [rax+0x1920]
   67d64:	mov    r8,QWORD PTR [rax+0x1928]
   67d6b:	test   r10d,r10d
   67d6e:	jle    67f02 <estimate_weighting_factor_B_slice+0x6e2>
   67d74:	mov    rsi,QWORD PTR [rsp+0x38]
   67d79:	mov    rax,rdi
   67d7c:	movapd xmm1,xmm3
   67d80:	add    rsi,rdi
   67d83:	nop    DWORD PTR [rax+rax*1+0x0]
   67d88:	movzx  edx,WORD PTR [rax]
   67d8b:	pxor   xmm0,xmm0
   67d8f:	add    rax,0x2
   67d93:	cvtsi2sd xmm0,edx
   67d97:	addsd  xmm1,xmm0
   67d9b:	cmp    rsi,rax
   67d9e:	jne    67d88 <estimate_weighting_factor_B_slice+0x568>
   67da0:	ucomisd xmm1,xmm3
   67da4:	jp     67dac <estimate_weighting_factor_B_slice+0x58c>
   67da6:	je     67f02 <estimate_weighting_factor_B_slice+0x6e2>
   67dac:	mov    edx,DWORD PTR [rsp+0x58]
   67db0:	pxor   xmm0,xmm0
   67db4:	cvtsi2sd xmm0,edx
   67db8:	mulsd  xmm0,xmm2
   67dbc:	divsd  xmm0,xmm1
   67dc0:	addsd  xmm0,xmm4
   67dc4:	cvttsd2si esi,xmm0
   67dc8:	lea    eax,[rsi+0x40]
   67dcb:	cmp    eax,0xc0
   67dd0:	mov    rax,QWORD PTR [rsp+0x18]
   67dd5:	cmovae esi,edx
   67dd8:	mov    DWORD PTR [rax+0x4],edx
   67ddb:	mov    DWORD PTR [rax],esi
   67ddd:	mov    DWORD PTR [rax+0x8],edx
   67de0:	mov    rax,QWORD PTR [rsp+0x10]
   67de5:	mov    DWORD PTR [rax],0x0
   67deb:	mov    DWORD PTR [rax+0x4],0x0
   67df2:	mov    DWORD PTR [rax+0x8],0x0
   67df9:	xor    edx,edx
   67dfb:	jmp    67e03 <estimate_weighting_factor_B_slice+0x5e3>
   67dfd:	nop    DWORD PTR [rax]
   67e00:	mov    rdx,rax
   67e03:	movzx  eax,WORD PTR [rdi+rdx*2]
   67e07:	xor    r10d,r10d
   67e0a:	imul   eax,esi
   67e0d:	add    eax,r14d
   67e10:	sar    eax,cl
   67e12:	test   eax,eax
   67e14:	js     67e28 <estimate_weighting_factor_B_slice+0x608>
   67e16:	cmp    DWORD PTR [r15+0x11bec],eax
   67e1d:	cmovle eax,DWORD PTR [r15+0x11bec]
   67e25:	mov    r10d,eax
   67e28:	mov    WORD PTR [r8+rdx*2],r10w
   67e2d:	lea    rax,[rdx+0x1]
   67e31:	cmp    rbp,rdx
   67e34:	jne    67e00 <estimate_weighting_factor_B_slice+0x5e0>
   67e36:	mov    edi,DWORD PTR [rsp+0x28]
   67e3a:	xor    r10d,r10d
   67e3d:	test   edi,edi
   67e3f:	jle    67eb0 <estimate_weighting_factor_B_slice+0x690>
   67e41:	nop    DWORD PTR [rax+0x0]
   67e48:	test   ebx,ebx
   67e4a:	jle    67ea7 <estimate_weighting_factor_B_slice+0x687>
   67e4c:	mov    rax,QWORD PTR [r11]
   67e4f:	mov    rdx,QWORD PTR [rax+0x1930]
   67e56:	mov    rax,QWORD PTR [rax+0x1938]
   67e5d:	mov    r8,QWORD PTR [rdx+r10*1]
   67e61:	mov    rdi,QWORD PTR [rax+r10*1]
   67e65:	xor    edx,edx
   67e67:	jmp    67e73 <estimate_weighting_factor_B_slice+0x653>
   67e69:	nop    DWORD PTR [rax+0x0]
   67e70:	mov    rdx,rax
   67e73:	movzx  eax,WORD PTR [r8+rdx*2]
   67e78:	xor    r13d,r13d
   67e7b:	imul   eax,esi
   67e7e:	add    eax,r14d
   67e81:	sar    eax,cl
   67e83:	test   eax,eax
   67e85:	js     67e99 <estimate_weighting_factor_B_slice+0x679>
   67e87:	cmp    DWORD PTR [r15+0x11bec],eax
   67e8e:	cmovle eax,DWORD PTR [r15+0x11bec]
   67e96:	mov    r13d,eax
   67e99:	mov    WORD PTR [rdi+rdx*2],r13w
   67e9e:	lea    rax,[rdx+0x1]
   67ea2:	cmp    r9,rdx
   67ea5:	jne    67e70 <estimate_weighting_factor_B_slice+0x650>
   67ea7:	add    r10,0x8
   67eab:	cmp    r12,r10
   67eae:	jne    67e48 <estimate_weighting_factor_B_slice+0x628>
   67eb0:	add    QWORD PTR [rsp+0x8],0x8
   67eb6:	add    r11,0x8
   67eba:	add    QWORD PTR [rsp+0x18],0xc
   67ec0:	add    QWORD PTR [rsp+0x10],0xc
   67ec6:	cmp    QWORD PTR [rsp+0x30],r11
   67ecb:	jne    67d50 <estimate_weighting_factor_B_slice+0x530>
   67ed1:	add    QWORD PTR [rsp+0x60],0x4
   67ed7:	mov    rax,QWORD PTR [rsp+0x60]
   67edc:	add    QWORD PTR [rsp+0x88],0x8
   67ee5:	add    QWORD PTR [rsp+0x80],0xb4
   67ef1:	cmp    QWORD PTR [rsp+0x98],rax
   67ef9:	je     67f3d <estimate_weighting_factor_B_slice+0x71d>
   67efb:	mov    edx,DWORD PTR [rax]
   67efd:	jmp    67ccc <estimate_weighting_factor_B_slice+0x4ac>
   67f02:	mov    rax,QWORD PTR [rsp+0x18]
   67f07:	mov    esi,DWORD PTR [rsp+0x58]
   67f0b:	mov    DWORD PTR [rax],esi
   67f0d:	mov    DWORD PTR [rax+0x4],esi
   67f10:	mov    DWORD PTR [rax+0x8],esi
   67f13:	mov    rax,QWORD PTR [rsp+0x10]
   67f18:	mov    DWORD PTR [rax],0x0
   67f1e:	mov    DWORD PTR [rax+0x4],0x0
   67f25:	mov    DWORD PTR [rax+0x8],0x0
   67f2c:	mov    eax,DWORD PTR [rsp+0x20]
   67f30:	test   eax,eax
   67f32:	jg     67df9 <estimate_weighting_factor_B_slice+0x5d9>
   67f38:	jmp    67e36 <estimate_weighting_factor_B_slice+0x616>
   67f3d:	cmp    DWORD PTR [rsp+0x70],0x1
   67f42:	je     67fbe <estimate_weighting_factor_B_slice+0x79e>
   67f44:	mov    eax,DWORD PTR [rsp+0x5c]
   67f48:	mov    rdi,QWORD PTR [rsp+0x68]
   67f4d:	xor    r8d,r8d
   67f50:	mov    esi,0x1
   67f55:	test   eax,eax
   67f57:	jle    67fa7 <estimate_weighting_factor_B_slice+0x787>
   67f59:	mov    rax,QWORD PTR [rsp+0x40]
   67f5e:	mov    r10,QWORD PTR [rax+r8*8]
   67f62:	mov    rax,QWORD PTR [rsp+0x50]
   67f67:	mov    r9,QWORD PTR [rax+r8*8]
   67f6b:	xor    eax,eax
   67f6d:	mov    ecx,DWORD PTR [rip+0x4c1dd]        # b4150 <luma_log_weight_denom>
   67f73:	mov    rdx,QWORD PTR [r10+rax*8]
   67f77:	mov    ebx,esi
   67f79:	shl    ebx,cl
   67f7b:	mov    DWORD PTR [rdx],ebx
   67f7d:	mov    ecx,DWORD PTR [rip+0x4e76d]        # b66f0 <chroma_log_weight_denom>
   67f83:	mov    ebx,esi
   67f85:	shl    ebx,cl
   67f87:	mov    DWORD PTR [rdx+0x4],ebx
   67f8a:	mov    DWORD PTR [rdx+0x8],ebx
   67f8d:	mov    rdx,QWORD PTR [r9+rax*8]
   67f91:	add    rax,0x1
   67f95:	mov    QWORD PTR [rdx],0x0
   67f9c:	mov    DWORD PTR [rdx+0x8],0x0
   67fa3:	cmp    DWORD PTR [rdi],eax
   67fa5:	jg     67f6d <estimate_weighting_factor_B_slice+0x74d>
   67fa7:	add    rdi,0x4
   67fab:	cmp    r8,QWORD PTR [rsp+0x48]
   67fb0:	je     6805f <estimate_weighting_factor_B_slice+0x83f>
   67fb6:	mov    eax,DWORD PTR [rdi]
   67fb8:	add    r8,0x1
   67fbc:	jmp    67f55 <estimate_weighting_factor_B_slice+0x735>
   67fbe:	mov    eax,DWORD PTR [rsp+0x5c]
   67fc2:	mov    r12,QWORD PTR [rsp+0x68]
   67fc7:	xor    ebp,ebp
   67fc9:	xor    r11d,r11d
   67fcc:	test   eax,eax
   67fce:	jle    68030 <estimate_weighting_factor_B_slice+0x810>
   67fd0:	mov    rax,QWORD PTR [rsp+0x40]
   67fd5:	mov    rbx,rbp
   67fd8:	xor    esi,esi
   67fda:	lea    r10,[rsp+0x500]
   67fe2:	lea    r9,[rsp+0xc0]
   67fea:	mov    r14,QWORD PTR [rax+r11*8]
   67fee:	mov    rax,QWORD PTR [rsp+0x50]
   67ff3:	mov    r13,QWORD PTR [rax+r11*8]
   67ff7:	mov    r8,QWORD PTR [r14+rsi*8]
   67ffb:	mov    rdi,QWORD PTR [r13+rsi*8+0x0]
   68000:	mov    rdx,rbx
   68003:	xor    eax,eax
   68005:	mov    ecx,DWORD PTR [r9+rdx*1]
   68009:	mov    DWORD PTR [r8+rax*1],ecx
   6800d:	mov    ecx,DWORD PTR [r10+rdx*1]
   68011:	add    rdx,0x4
   68015:	mov    DWORD PTR [rdi+rax*1],ecx
   68018:	add    rax,0x4
   6801c:	cmp    rax,0xc
   68020:	jne    68005 <estimate_weighting_factor_B_slice+0x7e5>
   68022:	add    rsi,0x1
   68026:	add    rbx,0xc
   6802a:	cmp    DWORD PTR [r12],esi
   6802e:	jg     67ff7 <estimate_weighting_factor_B_slice+0x7d7>
   68030:	add    r12,0x4
   68034:	add    rbp,0xb4
   6803b:	cmp    r11,QWORD PTR [rsp+0x48]
   68040:	je     6805f <estimate_weighting_factor_B_slice+0x83f>
   68042:	mov    eax,DWORD PTR [r12]
   68046:	add    r11,0x1
   6804a:	jmp    67fcc <estimate_weighting_factor_B_slice+0x7ac>
   6804c:	and    edx,0x1
   6804f:	cmp    edx,0x1
   68052:	sbb    eax,eax
   68054:	and    eax,0xfffffffe
   68057:	add    eax,0x4
   6805a:	jmp    67896 <estimate_weighting_factor_B_slice+0x76>
   6805f:	mov    ecx,DWORD PTR [rip+0x4f3eb]        # b7450 <listXsize>
   68065:	test   ecx,ecx
   68067:	jle    680e1 <estimate_weighting_factor_B_slice+0x8c1>
   68069:	mov    r12,QWORD PTR [rip+0x4c0e8]        # b4158 <wbp_weight>
   68070:	mov    r13,QWORD PTR [rsp+0x40]
   68075:	xor    ebp,ebp
   68077:	mov    edx,DWORD PTR [rip+0x4f3d7]        # b7454 <listXsize+0x4>
   6807d:	test   edx,edx
   6807f:	jle    680d2 <estimate_weighting_factor_B_slice+0x8b2>
   68081:	mov    rax,QWORD PTR [r13+0x0]
   68085:	mov    r11,QWORD PTR [r13+0x8]
   68089:	xor    edx,edx
   6808b:	mov    r9,QWORD PTR [rax+rbp*8]
   6808f:	mov    rax,QWORD PTR [r12]
   68093:	mov    rbx,QWORD PTR [rax+rbp*8]
   68097:	mov    rax,QWORD PTR [r12+0x8]
   6809c:	mov    r10,QWORD PTR [rax+rbp*8]
   680a0:	mov    r8,QWORD PTR [rbx+rdx*8]
   680a4:	mov    rdi,QWORD PTR [r11+rdx*8]
   680a8:	xor    eax,eax
   680aa:	mov    rsi,QWORD PTR [r10+rdx*8]
   680ae:	mov    ecx,DWORD PTR [r9+rax*1]
   680b2:	mov    DWORD PTR [r8+rax*1],ecx
   680b6:	mov    ecx,DWORD PTR [rdi+rax*1]
   680b9:	mov    DWORD PTR [rsi+rax*1],ecx
   680bc:	add    rax,0x4
   680c0:	cmp    rax,0xc
   680c4:	jne    680ae <estimate_weighting_factor_B_slice+0x88e>
   680c6:	add    rdx,0x1
   680ca:	cmp    DWORD PTR [rip+0x4f384],edx        # b7454 <listXsize+0x4>
   680d0:	jg     680a0 <estimate_weighting_factor_B_slice+0x880>
   680d2:	lea    rax,[rip+0x4f377]        # b7450 <listXsize>
   680d9:	add    rbp,0x1
   680dd:	cmp    DWORD PTR [rax],ebp
   680df:	jg     68077 <estimate_weighting_factor_B_slice+0x857>
   680e1:	mov    rax,QWORD PTR [rsp+0x4888]
   680e9:	xor    rax,QWORD PTR fs:0x28
   680f2:	jne    683c2 <estimate_weighting_factor_B_slice+0xba2>
   680f8:	add    rsp,0x4898
   680ff:	pop    rbx
   68100:	pop    rbp
   68101:	pop    r12
   68103:	pop    r13
   68105:	pop    r14
   68107:	pop    r15
   68109:	ret    
   6810a:	mov    DWORD PTR [rip+0x4c03c],0x5        # b4150 <luma_log_weight_denom>
   68114:	mov    edx,0x10
   68119:	mov    DWORD PTR [rip+0x4e5cd],0x5        # b66f0 <chroma_log_weight_denom>
   68123:	mov    DWORD PTR [rsp+0x58],0x20
   6812b:	jmp    678d0 <estimate_weighting_factor_B_slice+0xb0>
   68130:	mov    r11,QWORD PTR [rip+0x4c021]        # b4158 <wbp_weight>
   68137:	xor    ebp,ebp
   68139:	xor    r10d,r10d
   6813c:	lea    r12,[rsp+0x940]
   68144:	mov    ebx,DWORD PTR [rip+0x4f30a]        # b7454 <listXsize+0x4>
   6814a:	test   ebx,ebx
   6814c:	jle    6819f <estimate_weighting_factor_B_slice+0x97f>
   6814e:	mov    rax,QWORD PTR [r11+0x8]
   68152:	lea    r9,[r12+rbp*1]
   68156:	xor    esi,esi
   68158:	mov    r13,QWORD PTR [rax+r10*8]
   6815c:	mov    rax,QWORD PTR [r11]
   6815f:	mov    rbx,QWORD PTR [rax+r10*8]
   68163:	mov    r8,QWORD PTR [r13+rsi*8+0x0]
   68168:	mov    rdi,QWORD PTR [rbx+rsi*8]
   6816c:	mov    rdx,r9
   6816f:	xor    eax,eax
   68171:	mov    ecx,DWORD PTR [rdx+0xa8c]
   68177:	add    rdx,0x4
   6817b:	mov    DWORD PTR [r8+rax*1],ecx
   6817f:	mov    ecx,DWORD PTR [rdx-0x4]
   68182:	mov    DWORD PTR [rdi+rax*1],ecx
   68185:	add    rax,0x4
   68189:	cmp    rax,0xc
   6818d:	jne    68171 <estimate_weighting_factor_B_slice+0x951>
   6818f:	add    rsi,0x1
   68193:	add    r9,0xc
   68197:	cmp    DWORD PTR [rip+0x4f2b7],esi        # b7454 <listXsize+0x4>
   6819d:	jg     68163 <estimate_weighting_factor_B_slice+0x943>
   6819f:	lea    rax,[rip+0x4f2aa]        # b7450 <listXsize>
   681a6:	add    r10,0x1
   681aa:	add    rbp,0xb4
   681b1:	mov    eax,DWORD PTR [rax]
   681b3:	mov    DWORD PTR [rsp+0x5c],eax
   681b7:	cmp    eax,r10d
   681ba:	jg     68144 <estimate_weighting_factor_B_slice+0x924>
   681bc:	mov    ecx,DWORD PTR [rsp+0x58]
   681c0:	mov    eax,DWORD PTR [rsp+0x5c]
   681c4:	xor    edi,edi
   681c6:	mov    rsi,QWORD PTR [rsp+0x68]
   681cb:	test   eax,eax
   681cd:	jle    68209 <estimate_weighting_factor_B_slice+0x9e9>
   681cf:	mov    rax,QWORD PTR [rsp+0x40]
   681d4:	mov    r9,QWORD PTR [rax+rdi*8]
   681d8:	mov    rax,QWORD PTR [rsp+0x50]
   681dd:	mov    r8,QWORD PTR [rax+rdi*8]
   681e1:	xor    eax,eax
   681e3:	mov    rdx,QWORD PTR [r9+rax*8]
   681e7:	mov    DWORD PTR [rdx],ecx
   681e9:	mov    DWORD PTR [rdx+0x4],ecx
   681ec:	mov    DWORD PTR [rdx+0x8],ecx
   681ef:	mov    rdx,QWORD PTR [r8+rax*8]
   681f3:	add    rax,0x1
   681f7:	mov    QWORD PTR [rdx],0x0
   681fe:	mov    DWORD PTR [rdx+0x8],0x0
   68205:	cmp    DWORD PTR [rsi],eax
   68207:	jg     681e3 <estimate_weighting_factor_B_slice+0x9c3>
   68209:	add    rsi,0x4
   6820d:	cmp    rdi,QWORD PTR [rsp+0x48]
   68212:	je     6821c <estimate_weighting_factor_B_slice+0x9fc>
   68214:	mov    eax,DWORD PTR [rsi]
   68216:	add    rdi,0x1
   6821a:	jmp    681cb <estimate_weighting_factor_B_slice+0x9ab>
   6821c:	mov    eax,DWORD PTR [rip+0x4f22e]        # b7450 <listXsize>
   68222:	test   eax,eax
   68224:	jle    680e1 <estimate_weighting_factor_B_slice+0x8c1>
   6822a:	mov    rbx,QWORD PTR [rip+0x4f1ef]        # b7420 <listX>
   68231:	mov    edi,DWORD PTR [rip+0x4f21d]        # b7454 <listXsize+0x4>
   68237:	sub    eax,0x1
   6823a:	mov    QWORD PTR [rsp+0x28],r15
   6823f:	lea    rsi,[rbx+0x8]
   68243:	mov    DWORD PTR [rsp+0x58],edi
   68247:	lea    rax,[rsi+rax*8]
   6824b:	mov    QWORD PTR [rsp+0x10],rsi
   68250:	mov    rsi,QWORD PTR [rip+0x4f1d1]        # b7428 <listX+0x8>
   68257:	mov    QWORD PTR [rsp+0x18],rax
   6825c:	lea    eax,[rdi-0x1]
   6825f:	lea    rax,[rsi+rax*8+0x8]
   68264:	mov    QWORD PTR [rsp+0x20],rsi
   68269:	mov    QWORD PTR [rsp+0x8],rax
   6826e:	mov    r11d,DWORD PTR [rsp+0x58]
   68273:	test   r11d,r11d
   68276:	jle    68375 <estimate_weighting_factor_B_slice+0xb55>
   6827c:	mov    rax,QWORD PTR [rsp+0x28]
   68281:	mov    r11,QWORD PTR [rsp+0x20]
   68286:	mov    edx,DWORD PTR [rax+0x3c]
   68289:	mov    eax,DWORD PTR [rax+0x34]
   6828c:	mov    r14d,edx
   6828f:	lea    r15d,[rdx*4+0x20]
   68297:	lea    ebp,[rax*4+0x20]
   6829e:	imul   r14d,eax
   682a2:	lea    eax,[r15-0x1]
   682a6:	lea    r13,[rax*8+0x8]
   682ae:	lea    r9d,[rbp-0x1]
   682b2:	lea    r12d,[r14-0x1]
   682b6:	test   r14d,r14d
   682b9:	jle    682fd <estimate_weighting_factor_B_slice+0xadd>
   682bb:	mov    rax,QWORD PTR [rbx]
   682be:	mov    r8,QWORD PTR [rax+0x1920]
   682c5:	mov    rdi,QWORD PTR [rax+0x1928]
   682cc:	mov    rax,QWORD PTR [r11]
   682cf:	mov    rsi,QWORD PTR [rax+0x1920]
   682d6:	mov    rcx,QWORD PTR [rax+0x1928]
   682dd:	xor    eax,eax
   682df:	nop
   682e0:	movzx  edx,WORD PTR [r8+rax*2]
   682e5:	mov    WORD PTR [rdi+rax*2],dx
   682e9:	movzx  edx,WORD PTR [rsi+rax*2]
   682ed:	mov    WORD PTR [rcx+rax*2],dx
   682f1:	mov    rdx,rax
   682f4:	add    rax,0x1
   682f8:	cmp    r12,rdx
   682fb:	jne    682e0 <estimate_weighting_factor_B_slice+0xac0>
   682fd:	xor    r10d,r10d
   68300:	test   r15d,r15d
   68303:	jle    68366 <estimate_weighting_factor_B_slice+0xb46>
   68305:	nop    DWORD PTR [rax]
   68308:	test   ebp,ebp
   6830a:	jle    6835d <estimate_weighting_factor_B_slice+0xb3d>
   6830c:	mov    rax,QWORD PTR [rbx]
   6830f:	mov    rdx,QWORD PTR [rax+0x1930]
   68316:	mov    rax,QWORD PTR [rax+0x1938]
   6831d:	mov    rdi,QWORD PTR [rax+r10*1]
   68321:	mov    rax,QWORD PTR [r11]
   68324:	mov    r8,QWORD PTR [rdx+r10*1]
   68328:	mov    rdx,QWORD PTR [rax+0x1930]
   6832f:	mov    rax,QWORD PTR [rax+0x1938]
   68336:	mov    rsi,QWORD PTR [rdx+r10*1]
   6833a:	mov    rcx,QWORD PTR [rax+r10*1]
   6833e:	xor    eax,eax
   68340:	movzx  edx,WORD PTR [r8+rax*2]
   68345:	mov    WORD PTR [rdi+rax*2],dx
   68349:	movzx  edx,WORD PTR [rsi+rax*2]
   6834d:	mov    WORD PTR [rcx+rax*2],dx
   68351:	mov    rdx,rax
   68354:	add    rax,0x1
   68358:	cmp    rdx,r9
   6835b:	jne    68340 <estimate_weighting_factor_B_slice+0xb20>
   6835d:	add    r10,0x8
   68361:	cmp    r13,r10
   68364:	jne    68308 <estimate_weighting_factor_B_slice+0xae8>
   68366:	add    r11,0x8
   6836a:	cmp    QWORD PTR [rsp+0x8],r11
   6836f:	jne    682b6 <estimate_weighting_factor_B_slice+0xa96>
   68375:	mov    rax,QWORD PTR [rsp+0x10]
   6837a:	mov    rbx,rax
   6837d:	cmp    QWORD PTR [rsp+0x18],rax
   68382:	je     680e1 <estimate_weighting_factor_B_slice+0x8c1>
   68388:	add    rax,0x8
   6838c:	mov    QWORD PTR [rsp+0x10],rax
   68391:	jmp    6826e <estimate_weighting_factor_B_slice+0xa4e>
   68396:	mov    rax,QWORD PTR [rsp+0x70]
   6839b:	mov    eax,DWORD PTR [rax+0xc4]
   683a1:	mov    DWORD PTR [rsp+0x70],eax
   683a5:	cmp    eax,0x2
   683a8:	je     681bc <estimate_weighting_factor_B_slice+0x99c>
   683ae:	mov    rax,QWORD PTR [rip+0x4f06b]        # b7420 <listX>
   683b5:	mov    QWORD PTR [rsp+0x90],rax
   683bd:	jmp    67bc6 <estimate_weighting_factor_B_slice+0x3a6>
   683c2:	call   4390 <__stack_chk_fail@plt>
   683c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000683d0 <test_wp_P_slice>:
   683d0:	endbr64 
   683d4:	push   r15
   683d6:	push   r14
   683d8:	push   r13
   683da:	push   r12
   683dc:	push   rbp
   683dd:	mov    ebp,edi
   683df:	push   rbx
   683e0:	sub    rsp,0x318
   683e7:	mov    rbx,QWORD PTR [rip+0x201c2]        # 885b0 <img>
   683ee:	mov    rax,QWORD PTR fs:0x28
   683f7:	mov    QWORD PTR [rsp+0x308],rax
   683ff:	xor    eax,eax
   68401:	mov    eax,DWORD PTR [rbx+0x11ad0]
   68407:	mov    QWORD PTR [rsp+0x10],rbx
   6840c:	test   eax,eax
   6840e:	je     68433 <test_wp_P_slice+0x63>
   68410:	movsxd rax,DWORD PTR [rbx+0xc]
   68414:	mov    rdx,rax
   68417:	imul   rax,rax,0x278
   6841e:	add    rax,QWORD PTR [rbx+0x3758]
   68425:	mov    eax,DWORD PTR [rax+0x214]
   6842b:	test   eax,eax
   6842d:	jne    687bf <test_wp_P_slice+0x3ef>
   68433:	mov    rbx,QWORD PTR [rip+0x389ce]        # a0e08 <wp_weight>
   6843a:	add    eax,0x1
   6843d:	xor    r15d,r15d
   68440:	xor    r14d,r14d
   68443:	mov    DWORD PTR [rip+0x4bd03],0x5        # b4150 <luma_log_weight_denom>
   6844d:	lea    rcx,[rsp+0x30]
   68452:	lea    r11,[rip+0x4eff7]        # b7450 <listXsize>
   68459:	mov    QWORD PTR [rsp+0x18],rbx
   6845e:	mov    rbx,QWORD PTR [rip+0x4bccb]        # b4130 <wp_offset>
   68465:	lea    rsi,[rsp+0x1a0]
   6846d:	mov    DWORD PTR [rip+0x4e279],0x5        # b66f0 <chroma_log_weight_denom>
   68477:	mov    DWORD PTR [rip+0x4bd33],0x10        # b41b4 <wp_luma_round>
   68481:	mov    DWORD PTR [rip+0x4bd25],0x10        # b41b0 <wp_chroma_round>
   6848b:	mov    QWORD PTR [rsp+0x8],rax
   68490:	mov    QWORD PTR [rsp+0x20],rbx
   68495:	mov    rbx,r11
   68498:	mov    r12d,DWORD PTR [rbx]
   6849b:	test   r12d,r12d
   6849e:	jle    68506 <test_wp_P_slice+0x136>
   684a0:	mov    rax,QWORD PTR [rsp+0x18]
   684a5:	mov    r10,r15
   684a8:	xor    edi,edi
   684aa:	mov    r13,QWORD PTR [rax+r14*8]
   684ae:	mov    rax,QWORD PTR [rsp+0x20]
   684b3:	mov    r12,QWORD PTR [rax+r14*8]
   684b7:	nop    WORD PTR [rax+rax*1+0x0]
   684c0:	mov    r9,QWORD PTR [r13+rdi*8+0x0]
   684c5:	mov    r8,QWORD PTR [r12+rdi*8]
   684c9:	mov    rdx,r10
   684cc:	xor    eax,eax
   684ce:	mov    DWORD PTR [r9+rax*1],0x20
   684d6:	mov    DWORD PTR [r8+rax*1],0x0
   684de:	add    rax,0x4
   684e2:	mov    DWORD PTR [rcx+rdx*1],0x20
   684e9:	mov    DWORD PTR [rsi+rdx*1],0x0
   684f0:	add    rdx,0x4
   684f4:	cmp    rax,0xc
   684f8:	jne    684ce <test_wp_P_slice+0xfe>
   684fa:	add    rdi,0x1
   684fe:	add    r10,0xc
   68502:	cmp    DWORD PTR [rbx],edi
   68504:	jg     684c0 <test_wp_P_slice+0xf0>
   68506:	lea    rax,[r14+0x1]
   6850a:	add    rbx,0x4
   6850e:	add    r15,0xb4
   68515:	cmp    r14,QWORD PTR [rsp+0x8]
   6851a:	je     68524 <test_wp_P_slice+0x154>
   6851c:	mov    r14,rax
   6851f:	jmp    68498 <test_wp_P_slice+0xc8>
   68524:	mov    rax,QWORD PTR [rsp+0x10]
   68529:	mov    ebx,DWORD PTR [rax+0x3c]
   6852c:	mov    DWORD PTR [rsp+0x18],ebx
   68530:	test   ebx,ebx
   68532:	jle    68596 <test_wp_P_slice+0x1c6>
   68534:	mov    r9d,DWORD PTR [rax+0x34]
   68538:	mov    rax,QWORD PTR [rip+0x4ee89]        # b73c8 <imgY_org>
   6853f:	lea    edx,[rbx-0x1]
   68542:	pxor   xmm3,xmm3
   68546:	movapd xmm2,xmm3
   6854a:	lea    r8,[rax+0x8]
   6854e:	lea    r10,[r8+rdx*8]
   68552:	lea    edx,[r9-0x1]
   68556:	lea    rbx,[rdx+rdx*1+0x2]
   6855b:	nop    DWORD PTR [rax+rax*1+0x0]
   68560:	test   r9d,r9d
   68563:	jle    68588 <test_wp_P_slice+0x1b8>
   68565:	mov    rax,QWORD PTR [rax]
   68568:	lea    rdi,[rbx+rax*1]
   6856c:	nop    DWORD PTR [rax+0x0]
   68570:	movzx  edx,WORD PTR [rax]
   68573:	pxor   xmm0,xmm0
   68577:	add    rax,0x2
   6857b:	cvtsi2sd xmm0,edx
   6857f:	addsd  xmm2,xmm0
   68583:	cmp    rax,rdi
   68586:	jne    68570 <test_wp_P_slice+0x1a0>
   68588:	mov    rax,r8
   6858b:	cmp    r8,r10
   6858e:	je     6859e <test_wp_P_slice+0x1ce>
   68590:	add    r8,0x8
   68594:	jmp    68560 <test_wp_P_slice+0x190>
   68596:	pxor   xmm3,xmm3
   6859a:	movapd xmm2,xmm3
   6859e:	movsd  xmm4,QWORD PTR [rip+0xa8b2]        # 72e58 <quant_coef+0x198>
   685a6:	mov    QWORD PTR [rsp+0x20],rsi
   685ab:	xor    r14d,r14d
   685ae:	mov    r15d,0x7f
   685b4:	mov    QWORD PTR [rsp+0x28],rcx
   685b9:	movsd  xmm6,QWORD PTR [rip+0x1385f]        # 7be20 <lentab.6136+0x340>
   685c1:	movapd xmm5,xmm4
   685c5:	lea    rax,[rip+0x4ee84]        # b7450 <listXsize>
   685cc:	mov    edx,DWORD PTR [rax+r14*4]
   685d0:	test   edx,edx
   685d2:	jle    686f3 <test_wp_P_slice+0x323>
   685d8:	mov    rax,QWORD PTR [rsp+0x10]
   685dd:	mov    ebx,DWORD PTR [rsp+0x18]
   685e1:	sub    edx,0x1
   685e4:	mov    r10,rsi
   685e7:	mov    r8,rcx
   685ea:	imul   ebx,DWORD PTR [rax+0x34]
   685ee:	lea    rax,[rip+0x4ee2b]        # b7420 <listX>
   685f5:	mov    rax,QWORD PTR [rax+r14*8]
   685f9:	lea    r9,[rax+0x8]
   685fd:	mov    rax,QWORD PTR [rax]
   68600:	lea    r12,[r9+rdx*8]
   68604:	lea    edx,[rbx-0x1]
   68607:	mov    rax,QWORD PTR [rax+0x1920]
   6860e:	lea    r13,[rdx+rdx*1+0x2]
   68613:	test   ebx,ebx
   68615:	jle    686b4 <test_wp_P_slice+0x2e4>
   6861b:	nop    DWORD PTR [rax+rax*1+0x0]
   68620:	lea    rdi,[rax+r13*1]
   68624:	movapd xmm1,xmm3
   68628:	nop    DWORD PTR [rax+rax*1+0x0]
   68630:	movzx  edx,WORD PTR [rax]
   68633:	pxor   xmm0,xmm0
   68637:	add    rax,0x2
   6863b:	cvtsi2sd xmm0,edx
   6863f:	addsd  xmm1,xmm0
   68643:	cmp    rdi,rax
   68646:	jne    68630 <test_wp_P_slice+0x260>
   68648:	test   ebp,ebp
   6864a:	jne    686c0 <test_wp_P_slice+0x2f0>
   6864c:	ucomisd xmm1,xmm3
   68650:	jp     68654 <test_wp_P_slice+0x284>
   68652:	je     68677 <test_wp_P_slice+0x2a7>
   68654:	movapd xmm0,xmm2
   68658:	mulsd  xmm0,xmm6
   6865c:	divsd  xmm0,xmm1
   68660:	addsd  xmm0,xmm5
   68664:	cvttsd2si eax,xmm0
   68668:	lea    edx,[rax+0x40]
   6866b:	cmp    edx,0xbf
   68671:	jbe    687d2 <test_wp_P_slice+0x402>
   68677:	mov    DWORD PTR [r8],0x20
   6867e:	mov    DWORD PTR [r8+0x4],0x20
   68686:	mov    rax,r9
   68689:	add    r8,0xc
   6868d:	add    r10,0xc
   68691:	mov    DWORD PTR [r8-0x4],0x20
   68699:	cmp    r9,r12
   6869c:	je     686f3 <test_wp_P_slice+0x323>
   6869e:	mov    rax,QWORD PTR [rax]
   686a1:	add    r9,0x8
   686a5:	mov    rax,QWORD PTR [rax+0x1920]
   686ac:	test   ebx,ebx
   686ae:	jg     68620 <test_wp_P_slice+0x250>
   686b4:	movapd xmm1,xmm3
   686b8:	test   ebp,ebp
   686ba:	je     68677 <test_wp_P_slice+0x2a7>
   686bc:	nop    DWORD PTR [rax+0x0]
   686c0:	movapd xmm0,xmm2
   686c4:	mov    edi,0xffffff80
   686c9:	subsd  xmm0,xmm1
   686cd:	pxor   xmm1,xmm1
   686d1:	cvtsi2sd xmm1,ebx
   686d5:	divsd  xmm0,xmm1
   686d9:	addsd  xmm0,xmm4
   686dd:	cvttsd2si eax,xmm0
   686e1:	cmp    eax,0x7f
   686e4:	cmovg  eax,r15d
   686e8:	cmp    eax,0xffffff80
   686eb:	cmovl  eax,edi
   686ee:	mov    DWORD PTR [r10],eax
   686f1:	jmp    68677 <test_wp_P_slice+0x2a7>
   686f3:	lea    rax,[r14+0x1]
   686f7:	add    rcx,0xb4
   686fe:	add    rsi,0xb4
   68705:	cmp    r14,QWORD PTR [rsp+0x8]
   6870a:	je     68714 <test_wp_P_slice+0x344>
   6870c:	mov    r14,rax
   6870f:	jmp    685c5 <test_wp_P_slice+0x1f5>
   68714:	lea    rax,[rip+0x4ed39]        # b7454 <listXsize+0x4>
   6871b:	mov    rsi,QWORD PTR [rsp+0x20]
   68720:	mov    rcx,QWORD PTR [rsp+0x28]
   68725:	xor    r9d,r9d
   68728:	lea    r10,[rax+r14*4]
   6872c:	nop    DWORD PTR [rax+0x0]
   68730:	mov    eax,DWORD PTR [r11]
   68733:	test   eax,eax
   68735:	jle    68777 <test_wp_P_slice+0x3a7>
   68737:	sub    eax,0x1
   6873a:	mov    rdi,r9
   6873d:	lea    rax,[rax+rax*2]
   68741:	lea    r8,[r9+rax*4+0xc]
   68746:	nop    WORD PTR cs:[rax+rax*1+0x0]
   68750:	mov    rax,rdi
   68753:	mov    edx,0x3
   68758:	cmp    DWORD PTR [rcx+rax*1],0x20
   6875c:	jne    687b8 <test_wp_P_slice+0x3e8>
   6875e:	mov    ebx,DWORD PTR [rsi+rax*1]
   68761:	test   ebx,ebx
   68763:	jne    687b8 <test_wp_P_slice+0x3e8>
   68765:	add    rax,0x4
   68769:	sub    edx,0x1
   6876c:	jne    68758 <test_wp_P_slice+0x388>
   6876e:	add    rdi,0xc
   68772:	cmp    r8,rdi
   68775:	jne    68750 <test_wp_P_slice+0x380>
   68777:	add    r11,0x4
   6877b:	add    r9,0xb4
   68782:	cmp    r11,r10
   68785:	jne    68730 <test_wp_P_slice+0x360>
   68787:	xor    eax,eax
   68789:	nop    DWORD PTR [rax+0x0]
   68790:	mov    rbx,QWORD PTR [rsp+0x308]
   68798:	xor    rbx,QWORD PTR fs:0x28
   687a1:	jne    687da <test_wp_P_slice+0x40a>
   687a3:	add    rsp,0x318
   687aa:	pop    rbx
   687ab:	pop    rbp
   687ac:	pop    r12
   687ae:	pop    r13
   687b0:	pop    r14
   687b2:	pop    r15
   687b4:	ret    
   687b5:	nop    DWORD PTR [rax]
   687b8:	mov    eax,0x1
   687bd:	jmp    68790 <test_wp_P_slice+0x3c0>
   687bf:	and    edx,0x1
   687c2:	cmp    edx,0x1
   687c5:	sbb    eax,eax
   687c7:	and    eax,0xfffffffe
   687ca:	add    eax,0x4
   687cd:	jmp    68433 <test_wp_P_slice+0x63>
   687d2:	mov    DWORD PTR [r8],eax
   687d5:	jmp    6867e <test_wp_P_slice+0x2ae>
   687da:	call   4390 <__stack_chk_fail@plt>
   687df:	nop

00000000000687e0 <test_wp_B_slice>:
   687e0:	endbr64 
   687e4:	push   r15
   687e6:	push   r14
   687e8:	push   r13
   687ea:	push   r12
   687ec:	push   rbp
   687ed:	push   rbx
   687ee:	lea    r11,[rsp-0x4000]
   687f6:	sub    rsp,0x1000
   687fd:	or     QWORD PTR [rsp],0x0
   68802:	cmp    rsp,r11
   68805:	jne    687f6 <test_wp_B_slice+0x16>
   68807:	sub    rsp,0x848
   6880e:	mov    rbx,QWORD PTR [rip+0x1fd9b]        # 885b0 <img>
   68815:	mov    DWORD PTR [rsp+0x64],edi
   68819:	mov    rax,QWORD PTR fs:0x28
   68822:	mov    QWORD PTR [rsp+0x4838],rax
   6882a:	xor    eax,eax
   6882c:	mov    eax,DWORD PTR [rbx+0x11ad0]
   68832:	mov    QWORD PTR [rsp+0x58],rbx
   68837:	test   eax,eax
   68839:	je     6885e <test_wp_B_slice+0x7e>
   6883b:	movsxd rax,DWORD PTR [rbx+0xc]
   6883f:	mov    rdx,rax
   68842:	imul   rax,rax,0x278
   68849:	add    rax,QWORD PTR [rbx+0x3758]
   68850:	mov    eax,DWORD PTR [rax+0x214]
   68856:	test   eax,eax
   68858:	jne    68dc0 <test_wp_B_slice+0x5e0>
   6885e:	mov    rbx,QWORD PTR [rip+0x385a3]        # a0e08 <wp_weight>
   68865:	add    eax,0x1
   68868:	xor    r13d,r13d
   6886b:	xor    r12d,r12d
   6886e:	mov    r15,QWORD PTR [rip+0x4b8bb]        # b4130 <wp_offset>
   68875:	mov    QWORD PTR [rsp+0x20],rax
   6887a:	lea    r14,[rip+0x4ebcf]        # b7450 <listXsize>
   68881:	mov    DWORD PTR [rip+0x4b8c5],0x5        # b4150 <luma_log_weight_denom>
   6888b:	mov    r11,r14
   6888e:	mov    DWORD PTR [rip+0x4de58],0x5        # b66f0 <chroma_log_weight_denom>
   68898:	mov    DWORD PTR [rip+0x4b912],0x10        # b41b4 <wp_luma_round>
   688a2:	mov    DWORD PTR [rip+0x4b904],0x10        # b41b0 <wp_chroma_round>
   688ac:	mov    QWORD PTR [rsp+0x48],rbx
   688b1:	mov    QWORD PTR [rsp+0x50],r15
   688b6:	mov    QWORD PTR [rsp+0x8],r14
   688bb:	mov    r14,rbx
   688be:	xchg   ax,ax
   688c0:	mov    r9d,DWORD PTR [r11]
   688c3:	test   r9d,r9d
   688c6:	jle    6892f <test_wp_B_slice+0x14f>
   688c8:	mov    rbp,QWORD PTR [r14+r12*8]
   688cc:	mov    rbx,QWORD PTR [r15+r12*8]
   688d0:	mov    r10,r13
   688d3:	xor    ecx,ecx
   688d5:	lea    r9,[rsp+0x4b0]
   688dd:	lea    r8,[rsp+0x70]
   688e2:	nop    WORD PTR [rax+rax*1+0x0]
   688e8:	mov    rdi,QWORD PTR [rbp+rcx*8+0x0]
   688ed:	mov    rsi,QWORD PTR [rbx+rcx*8]
   688f1:	mov    rdx,r10
   688f4:	xor    eax,eax
   688f6:	mov    DWORD PTR [rdi+rax*1],0x20
   688fd:	mov    DWORD PTR [rsi+rax*1],0x0
   68904:	add    rax,0x4
   68908:	mov    DWORD PTR [r9+rdx*1],0x0
   68910:	mov    DWORD PTR [r8+rdx*1],0x20
   68918:	add    rdx,0x4
   6891c:	cmp    rax,0xc
   68920:	jne    688f6 <test_wp_B_slice+0x116>
   68922:	add    rcx,0x1
   68926:	add    r10,0xc
   6892a:	cmp    DWORD PTR [r11],ecx
   6892d:	jg     688e8 <test_wp_B_slice+0x108>
   6892f:	lea    rax,[r12+0x1]
   68934:	add    r11,0x4
   68938:	add    r13,0xb4
   6893f:	cmp    r12,QWORD PTR [rsp+0x20]
   68944:	je     6894e <test_wp_B_slice+0x16e>
   68946:	mov    r12,rax
   68949:	jmp    688c0 <test_wp_B_slice+0xe0>
   6894e:	mov    ebx,DWORD PTR [rip+0x4eafc]        # b7450 <listXsize>
   68954:	mov    r14,QWORD PTR [rsp+0x8]
   68959:	mov    DWORD PTR [rsp+0x60],ebx
   6895d:	test   ebx,ebx
   6895f:	jle    690b7 <test_wp_B_slice+0x8d7>
   68965:	mov    rax,QWORD PTR [rip+0x2203c]        # 8a9a8 <enc_picture>
   6896c:	lea    edx,[rbx-0x1]
   6896f:	mov    edi,DWORD PTR [rip+0x4eadf]        # b7454 <listXsize+0x4>
   68975:	mov    QWORD PTR [rsp+0x8],0x0
   6897e:	mov    QWORD PTR [rsp+0x68],r14
   68983:	mov    r15d,0x3ff
   68989:	mov    r12d,0xfffffc00
   6898f:	mov    QWORD PTR [rsp+0x38],rax
   68994:	mov    rax,QWORD PTR [rip+0x4ea85]        # b7420 <listX>
   6899b:	mov    DWORD PTR [rsp+0x2c],edi
   6899f:	lea    rbx,[rax+0x8]
   689a3:	mov    QWORD PTR [rsp+0x10],rbx
   689a8:	lea    rbx,[rbx+rdx*8]
   689ac:	lea    edx,[rdi-0x1]
   689af:	mov    QWORD PTR [rsp+0x30],rbx
   689b4:	mov    rbx,QWORD PTR [rip+0x4ea6d]        # b7428 <listX+0x8>
   689bb:	mov    QWORD PTR [rsp+0x40],rbx
   689c0:	lea    rbx,[rbx+rdx*8+0x8]
   689c5:	mov    r14,rbx
   689c8:	nop    DWORD PTR [rax+rax*1+0x0]
   689d0:	mov    r8d,DWORD PTR [rsp+0x2c]
   689d5:	test   r8d,r8d
   689d8:	jle    68a97 <test_wp_B_slice+0x2b7>
   689de:	mov    rax,QWORD PTR [rax]
   689e1:	mov    r11,QWORD PTR [rsp+0x40]
   689e6:	mov    r13d,0xffffff80
   689ec:	mov    r10d,DWORD PTR [rax+0x4]
   689f0:	mov    rax,QWORD PTR [rsp+0x38]
   689f5:	mov    eax,DWORD PTR [rax+0x4]
   689f8:	mov    ebp,eax
   689fa:	mov    DWORD PTR [rsp+0x18],eax
   689fe:	mov    eax,0x7f
   68a03:	sub    ebp,r10d
   68a06:	cmp    ebp,0x7f
   68a09:	cmovg  ebp,eax
   68a0c:	mov    eax,0xffffff80
   68a11:	cmp    ebp,0xffffff80
   68a14:	cmovl  ebp,eax
   68a17:	mov    rax,QWORD PTR [rsp+0x8]
   68a1c:	lea    rbx,[rsp+rax*1+0x8f0]
   68a24:	nop    DWORD PTR [rax+0x0]
   68a28:	mov    rax,QWORD PTR [r11]
   68a2b:	mov    rcx,rbx
   68a2e:	mov    edi,0x3
   68a33:	mov    r9d,DWORD PTR [rax+0x4]
   68a37:	mov    eax,0x7f
   68a3c:	mov    esi,r9d
   68a3f:	sub    esi,r10d
   68a42:	cmp    esi,0x7f
   68a45:	cmovg  esi,eax
   68a48:	cmp    esi,0xffffff80
   68a4b:	cmovl  esi,r13d
   68a4f:	mov    eax,esi
   68a51:	shr    eax,0x1f
   68a54:	add    eax,esi
   68a56:	mov    r8d,eax
   68a59:	sar    eax,0x1f
   68a5c:	sar    r8d,1
   68a5f:	xor    r8d,eax
   68a62:	sub    r8d,eax
   68a65:	add    r8d,0x4000
   68a6c:	cmp    r9d,r10d
   68a6f:	jne    68ac0 <test_wp_B_slice+0x2e0>
   68a71:	mov    DWORD PTR [rcx+0xa8c],0x20
   68a7b:	mov    DWORD PTR [rcx],0x20
   68a81:	add    rcx,0x4
   68a85:	sub    edi,0x1
   68a88:	jne    68a6c <test_wp_B_slice+0x28c>
   68a8a:	add    r11,0x8
   68a8e:	add    rbx,0xc
   68a92:	cmp    r11,r14
   68a95:	jne    68a28 <test_wp_B_slice+0x248>
   68a97:	mov    rbx,QWORD PTR [rsp+0x10]
   68a9c:	mov    rdi,QWORD PTR [rsp+0x30]
   68aa1:	add    QWORD PTR [rsp+0x8],0xb4
   68aaa:	mov    rax,rbx
   68aad:	cmp    rbx,rdi
   68ab0:	je     68b1e <test_wp_B_slice+0x33e>
   68ab2:	add    rbx,0x8
   68ab6:	mov    QWORD PTR [rsp+0x10],rbx
   68abb:	jmp    689d0 <test_wp_B_slice+0x1f0>
   68ac0:	mov    eax,r8d
   68ac3:	cdq    
   68ac4:	idiv   esi
   68ac6:	imul   eax,ebp
   68ac9:	add    eax,0x20
   68acc:	mov    edx,eax
   68ace:	sar    edx,0x6
   68ad1:	cmp    eax,0xffff
   68ad6:	cmovg  edx,r15d
   68ada:	cmp    edx,0xfffffc00
   68ae0:	cmovl  edx,r12d
   68ae4:	sar    edx,0x2
   68ae7:	lea    eax,[rdx+0x40]
   68aea:	cmp    eax,0xc0
   68aef:	ja     68b08 <test_wp_B_slice+0x328>
   68af1:	mov    eax,0x40
   68af6:	mov    DWORD PTR [rcx+0xa8c],edx
   68afc:	sub    eax,edx
   68afe:	mov    DWORD PTR [rcx],eax
   68b00:	jmp    68a81 <test_wp_B_slice+0x2a1>
   68b05:	nop    DWORD PTR [rax]
   68b08:	mov    DWORD PTR [rcx+0xa8c],0x20
   68b12:	mov    eax,0x20
   68b17:	mov    DWORD PTR [rcx],eax
   68b19:	jmp    68a81 <test_wp_B_slice+0x2a1>
   68b1e:	cmp    DWORD PTR [rsp+0x64],0x1
   68b23:	mov    r14,QWORD PTR [rsp+0x68]
   68b28:	je     68f92 <test_wp_B_slice+0x7b2>
   68b2e:	mov    rax,QWORD PTR [rsp+0x58]
   68b33:	mov    ebx,DWORD PTR [rax+0x3c]
   68b36:	mov    r10d,ebx
   68b39:	test   ebx,ebx
   68b3b:	jle    68b9e <test_wp_B_slice+0x3be>
   68b3d:	mov    edi,DWORD PTR [rax+0x34]
   68b40:	mov    rax,QWORD PTR [rip+0x4e881]        # b73c8 <imgY_org>
   68b47:	lea    edx,[rbx-0x1]
   68b4a:	pxor   xmm3,xmm3
   68b4e:	movapd xmm2,xmm3
   68b52:	lea    rsi,[rax+0x8]
   68b56:	lea    r8,[rsi+rdx*8]
   68b5a:	lea    edx,[rdi-0x1]
   68b5d:	lea    r9,[rdx+rdx*1+0x2]
   68b62:	nop    WORD PTR [rax+rax*1+0x0]
   68b68:	test   edi,edi
   68b6a:	jle    68b90 <test_wp_B_slice+0x3b0>
   68b6c:	mov    rax,QWORD PTR [rax]
   68b6f:	lea    rcx,[r9+rax*1]
   68b73:	nop    DWORD PTR [rax+rax*1+0x0]
   68b78:	movzx  edx,WORD PTR [rax]
   68b7b:	pxor   xmm0,xmm0
   68b7f:	add    rax,0x2
   68b83:	cvtsi2sd xmm0,edx
   68b87:	addsd  xmm2,xmm0
   68b8b:	cmp    rcx,rax
   68b8e:	jne    68b78 <test_wp_B_slice+0x398>
   68b90:	mov    rax,rsi
   68b93:	cmp    r8,rsi
   68b96:	je     68ba6 <test_wp_B_slice+0x3c6>
   68b98:	add    rsi,0x8
   68b9c:	jmp    68b68 <test_wp_B_slice+0x388>
   68b9e:	pxor   xmm3,xmm3
   68ba2:	movapd xmm2,xmm3
   68ba6:	lea    r11,[rsp+0x4b0]
   68bae:	lea    rbx,[rsp+0x70]
   68bb3:	mov    edx,DWORD PTR [rsp+0x60]
   68bb7:	movsd  xmm5,QWORD PTR [rip+0x13261]        # 7be20 <lentab.6136+0x340>
   68bbf:	mov    QWORD PTR [rsp+0x10],r11
   68bc4:	mov    r15,r11
   68bc7:	mov    r11,QWORD PTR [rsp+0x58]
   68bcc:	xor    r12d,r12d
   68bcf:	movsd  xmm4,QWORD PTR [rip+0xa281]        # 72e58 <quant_coef+0x198>
   68bd7:	mov    QWORD PTR [rsp+0x8],r14
   68bdc:	mov    r14,rbx
   68bdf:	mov    r13d,0x20
   68be5:	mov    QWORD PTR [rsp+0x18],rbx
   68bea:	mov    ebx,r10d
   68bed:	nop    DWORD PTR [rax]
   68bf0:	test   edx,edx
   68bf2:	jle    68cf0 <test_wp_B_slice+0x510>
   68bf8:	mov    r9d,DWORD PTR [r11+0x34]
   68bfc:	sub    edx,0x1
   68bff:	mov    rdi,r15
   68c02:	mov    rsi,r14
   68c05:	lea    rax,[rip+0x4e814]        # b7420 <listX>
   68c0c:	mov    rax,QWORD PTR [rax+r12*8]
   68c10:	imul   r9d,ebx
   68c14:	lea    r8,[rax+0x8]
   68c18:	mov    rax,QWORD PTR [rax]
   68c1b:	lea    r10,[r8+rdx*8]
   68c1f:	lea    edx,[r9-0x1]
   68c23:	mov    rax,QWORD PTR [rax+0x1920]
   68c2a:	lea    rbp,[rdx+rdx*1+0x2]
   68c2f:	test   r9d,r9d
   68c32:	jle    68ce0 <test_wp_B_slice+0x500>
   68c38:	nop    DWORD PTR [rax+rax*1+0x0]
   68c40:	lea    rcx,[rax+rbp*1]
   68c44:	movapd xmm1,xmm3
   68c48:	nop    DWORD PTR [rax+rax*1+0x0]
   68c50:	movzx  edx,WORD PTR [rax]
   68c53:	pxor   xmm0,xmm0
   68c57:	add    rax,0x2
   68c5b:	cvtsi2sd xmm0,edx
   68c5f:	addsd  xmm1,xmm0
   68c63:	cmp    rcx,rax
   68c66:	jne    68c50 <test_wp_B_slice+0x470>
   68c68:	ucomisd xmm1,xmm3
   68c6c:	jp     68c70 <test_wp_B_slice+0x490>
   68c6e:	je     68ce0 <test_wp_B_slice+0x500>
   68c70:	movapd xmm0,xmm2
   68c74:	mulsd  xmm0,xmm5
   68c78:	divsd  xmm0,xmm1
   68c7c:	addsd  xmm0,xmm4
   68c80:	cvttsd2si eax,xmm0
   68c84:	lea    edx,[rax+0x40]
   68c87:	cmp    edx,0xc0
   68c8d:	cmovae eax,r13d
   68c91:	mov    DWORD PTR [rsi],eax
   68c93:	add    rdi,0xc
   68c97:	mov    rax,r8
   68c9a:	add    rsi,0xc
   68c9e:	mov    DWORD PTR [rsi-0x8],0x20
   68ca5:	mov    DWORD PTR [rsi-0x4],0x20
   68cac:	mov    DWORD PTR [rdi-0xc],0x0
   68cb3:	mov    DWORD PTR [rdi-0x8],0x0
   68cba:	mov    DWORD PTR [rdi-0x4],0x0
   68cc1:	cmp    r10,r8
   68cc4:	je     68cf0 <test_wp_B_slice+0x510>
   68cc6:	mov    rax,QWORD PTR [rax]
   68cc9:	add    r8,0x8
   68ccd:	mov    rax,QWORD PTR [rax+0x1920]
   68cd4:	test   r9d,r9d
   68cd7:	jg     68c40 <test_wp_B_slice+0x460>
   68cdd:	nop    DWORD PTR [rax]
   68ce0:	mov    eax,0x20
   68ce5:	jmp    68c91 <test_wp_B_slice+0x4b1>
   68ce7:	nop    WORD PTR [rax+rax*1+0x0]
   68cf0:	add    r14,0xb4
   68cf7:	add    r15,0xb4
   68cfe:	cmp    r12,QWORD PTR [rsp+0x20]
   68d03:	je     68d19 <test_wp_B_slice+0x539>
   68d05:	lea    rax,[rip+0x4e748]        # b7454 <listXsize+0x4>
   68d0c:	mov    edx,DWORD PTR [rax+r12*4]
   68d10:	add    r12,0x1
   68d14:	jmp    68bf0 <test_wp_B_slice+0x410>
   68d19:	mov    rax,QWORD PTR [rip+0x380e0]        # a0e00 <active_pps>
   68d20:	mov    r14,QWORD PTR [rsp+0x8]
   68d25:	mov    r11,QWORD PTR [rsp+0x10]
   68d2a:	mov    rbx,QWORD PTR [rsp+0x18]
   68d2f:	cmp    DWORD PTR [rax+0xc4],0x1
   68d36:	je     68dd3 <test_wp_B_slice+0x5f3>
   68d3c:	mov    r11,QWORD PTR [rsp+0x48]
   68d41:	mov    rbx,QWORD PTR [rsp+0x50]
   68d46:	xor    r8d,r8d
   68d49:	mov    esi,0x1
   68d4e:	mov    eax,DWORD PTR [rsp+0x60]
   68d52:	mov    r10,QWORD PTR [rsp+0x20]
   68d57:	test   eax,eax
   68d59:	jle    68daa <test_wp_B_slice+0x5ca>
   68d5b:	mov    r9,QWORD PTR [r11+r8*8]
   68d5f:	mov    rdi,QWORD PTR [rbx+r8*8]
   68d63:	xor    eax,eax
   68d65:	nop    DWORD PTR [rax]
   68d68:	mov    ecx,DWORD PTR [rip+0x4b3e2]        # b4150 <luma_log_weight_denom>
   68d6e:	mov    rdx,QWORD PTR [r9+rax*8]
   68d72:	mov    r15d,esi
   68d75:	shl    r15d,cl
   68d78:	mov    DWORD PTR [rdx],r15d
   68d7b:	mov    ecx,DWORD PTR [rip+0x4d96f]        # b66f0 <chroma_log_weight_denom>
   68d81:	mov    r15d,esi
   68d84:	shl    r15d,cl
   68d87:	mov    DWORD PTR [rdx+0x4],r15d
   68d8b:	mov    DWORD PTR [rdx+0x8],r15d
   68d8f:	mov    rdx,QWORD PTR [rdi+rax*8]
   68d93:	add    rax,0x1
   68d97:	mov    QWORD PTR [rdx],0x0
   68d9e:	mov    DWORD PTR [rdx+0x8],0x0
   68da5:	cmp    DWORD PTR [r14],eax
   68da8:	jg     68d68 <test_wp_B_slice+0x588>
   68daa:	add    r14,0x4
   68dae:	cmp    r8,r10
   68db1:	je     68e5c <test_wp_B_slice+0x67c>
   68db7:	mov    eax,DWORD PTR [r14]
   68dba:	add    r8,0x1
   68dbe:	jmp    68d57 <test_wp_B_slice+0x577>
   68dc0:	and    edx,0x1
   68dc3:	cmp    edx,0x1
   68dc6:	sbb    eax,eax
   68dc8:	and    eax,0xfffffffe
   68dcb:	add    eax,0x4
   68dce:	jmp    6885e <test_wp_B_slice+0x7e>
   68dd3:	mov    rcx,QWORD PTR [rsp+0x48]
   68dd8:	mov    r15,QWORD PTR [rsp+0x50]
   68ddd:	xor    ebp,ebp
   68ddf:	xor    r10d,r10d
   68de2:	mov    eax,DWORD PTR [rsp+0x60]
   68de6:	test   eax,eax
   68de8:	jle    68e41 <test_wp_B_slice+0x661>
   68dea:	mov    r13,QWORD PTR [rcx+r10*8]
   68dee:	mov    r12,QWORD PTR [r15+r10*8]
   68df2:	mov    r9,rbp
   68df5:	xor    esi,esi
   68df7:	nop    WORD PTR [rax+rax*1+0x0]
   68e00:	mov    QWORD PTR [rsp+0x8],rcx
   68e05:	mov    r8,QWORD PTR [r13+rsi*8+0x0]
   68e0a:	mov    rdx,r9
   68e0d:	xor    eax,eax
   68e0f:	mov    rdi,QWORD PTR [r12+rsi*8]
   68e13:	mov    ecx,DWORD PTR [rbx+rdx*1]
   68e16:	mov    DWORD PTR [r8+rax*1],ecx
   68e1a:	mov    ecx,DWORD PTR [r11+rdx*1]
   68e1e:	add    rdx,0x4
   68e22:	mov    DWORD PTR [rdi+rax*1],ecx
   68e25:	add    rax,0x4
   68e29:	cmp    rax,0xc
   68e2d:	jne    68e13 <test_wp_B_slice+0x633>
   68e2f:	mov    rcx,QWORD PTR [rsp+0x8]
   68e34:	add    rsi,0x1
   68e38:	add    r9,0xc
   68e3c:	cmp    DWORD PTR [r14],esi
   68e3f:	jg     68e00 <test_wp_B_slice+0x620>
   68e41:	add    r14,0x4
   68e45:	add    rbp,0xb4
   68e4c:	cmp    r10,QWORD PTR [rsp+0x20]
   68e51:	je     68e5c <test_wp_B_slice+0x67c>
   68e53:	mov    eax,DWORD PTR [r14]
   68e56:	add    r10,0x1
   68e5a:	jmp    68de6 <test_wp_B_slice+0x606>
   68e5c:	mov    eax,DWORD PTR [rip+0x4e5ee]        # b7450 <listXsize>
   68e62:	test   eax,eax
   68e64:	jle    68ee3 <test_wp_B_slice+0x703>
   68e66:	mov    rbp,QWORD PTR [rip+0x4b2eb]        # b4158 <wbp_weight>
   68e6d:	mov    r13,QWORD PTR [rsp+0x48]
   68e72:	xor    ebx,ebx
   68e74:	nop    DWORD PTR [rax+0x0]
   68e78:	mov    esi,DWORD PTR [rip+0x4e5d6]        # b7454 <listXsize+0x4>
   68e7e:	test   esi,esi
   68e80:	jle    68ed2 <test_wp_B_slice+0x6f2>
   68e82:	mov    rax,QWORD PTR [r13+0x0]
   68e86:	mov    r11,QWORD PTR [r13+0x8]
   68e8a:	xor    edx,edx
   68e8c:	mov    r9,QWORD PTR [rax+rbx*8]
   68e90:	mov    rax,QWORD PTR [rbp+0x0]
   68e94:	mov    r12,QWORD PTR [rax+rbx*8]
   68e98:	mov    rax,QWORD PTR [rbp+0x8]
   68e9c:	mov    r10,QWORD PTR [rax+rbx*8]
   68ea0:	mov    r8,QWORD PTR [r12+rdx*8]
   68ea4:	mov    rdi,QWORD PTR [r11+rdx*8]
   68ea8:	xor    eax,eax
   68eaa:	mov    rsi,QWORD PTR [r10+rdx*8]
   68eae:	mov    ecx,DWORD PTR [r9+rax*1]
   68eb2:	mov    DWORD PTR [r8+rax*1],ecx
   68eb6:	mov    ecx,DWORD PTR [rdi+rax*1]
   68eb9:	mov    DWORD PTR [rsi+rax*1],ecx
   68ebc:	add    rax,0x4
   68ec0:	cmp    rax,0xc
   68ec4:	jne    68eae <test_wp_B_slice+0x6ce>
   68ec6:	add    rdx,0x1
   68eca:	cmp    DWORD PTR [rip+0x4e584],edx        # b7454 <listXsize+0x4>
   68ed0:	jg     68ea0 <test_wp_B_slice+0x6c0>
   68ed2:	lea    rax,[rip+0x4e577]        # b7450 <listXsize>
   68ed9:	add    rbx,0x1
   68edd:	mov    eax,DWORD PTR [rax]
   68edf:	cmp    eax,ebx
   68ee1:	jg     68e78 <test_wp_B_slice+0x698>
   68ee3:	mov    rdi,QWORD PTR [rsp+0x50]
   68ee8:	mov    rbx,QWORD PTR [rsp+0x48]
   68eed:	xor    r10d,r10d
   68ef0:	lea    r11,[rip+0x4e55d]        # b7454 <listXsize+0x4>
   68ef7:	mov    rbp,QWORD PTR [rsp+0x20]
   68efc:	nop    DWORD PTR [rax+0x0]
   68f00:	test   eax,eax
   68f02:	jle    68f45 <test_wp_B_slice+0x765>
   68f04:	sub    eax,0x1
   68f07:	mov    r8,QWORD PTR [rbx+r10*8]
   68f0b:	xor    edx,edx
   68f0d:	lea    r9,[rax*8+0x8]
   68f15:	nop    DWORD PTR [rax]
   68f18:	mov    rsi,QWORD PTR [r8+rdx*1]
   68f1c:	xor    eax,eax
   68f1e:	cmp    DWORD PTR [rsi+rax*1],0x20
   68f22:	jne    68f60 <test_wp_B_slice+0x780>
   68f24:	mov    rcx,QWORD PTR [rdi]
   68f27:	mov    rcx,QWORD PTR [rcx+rdx*1]
   68f2b:	mov    ecx,DWORD PTR [rcx+rax*1]
   68f2e:	test   ecx,ecx
   68f30:	jne    68f60 <test_wp_B_slice+0x780>
   68f32:	add    rax,0x4
   68f36:	cmp    rax,0xc
   68f3a:	jne    68f1e <test_wp_B_slice+0x73e>
   68f3c:	add    rdx,0x8
   68f40:	cmp    r9,rdx
   68f43:	jne    68f18 <test_wp_B_slice+0x738>
   68f45:	add    rdi,0x8
   68f49:	cmp    r10,rbp
   68f4c:	je     68f8e <test_wp_B_slice+0x7ae>
   68f4e:	mov    eax,DWORD PTR [r11+r10*4]
   68f52:	add    r10,0x1
   68f56:	jmp    68f00 <test_wp_B_slice+0x720>
   68f58:	nop    DWORD PTR [rax+rax*1+0x0]
   68f60:	mov    eax,0x1
   68f65:	mov    rbx,QWORD PTR [rsp+0x4838]
   68f6d:	xor    rbx,QWORD PTR fs:0x28
   68f76:	jne    690c7 <test_wp_B_slice+0x8e7>
   68f7c:	add    rsp,0x4848
   68f83:	pop    rbx
   68f84:	pop    rbp
   68f85:	pop    r12
   68f87:	pop    r13
   68f89:	pop    r14
   68f8b:	pop    r15
   68f8d:	ret    
   68f8e:	xor    eax,eax
   68f90:	jmp    68f65 <test_wp_B_slice+0x785>
   68f92:	mov    rbx,QWORD PTR [rip+0x4b1bf]        # b4158 <wbp_weight>
   68f99:	xor    r11d,r11d
   68f9c:	xor    r10d,r10d
   68f9f:	lea    rbp,[rsp+0x8f0]
   68fa7:	mov    edi,DWORD PTR [rip+0x4e4a7]        # b7454 <listXsize+0x4>
   68fad:	test   edi,edi
   68faf:	jle    6900c <test_wp_B_slice+0x82c>
   68fb1:	mov    rax,QWORD PTR [rbx+0x8]
   68fb5:	lea    r9,[rbp+r11*1+0x0]
   68fba:	xor    esi,esi
   68fbc:	mov    r13,QWORD PTR [rax+r10*8]
   68fc0:	mov    rax,QWORD PTR [rbx]
   68fc3:	mov    r12,QWORD PTR [rax+r10*8]
   68fc7:	nop    WORD PTR [rax+rax*1+0x0]
   68fd0:	mov    r8,QWORD PTR [r13+rsi*8+0x0]
   68fd5:	mov    rdi,QWORD PTR [r12+rsi*8]
   68fd9:	mov    rdx,r9
   68fdc:	xor    eax,eax
   68fde:	mov    ecx,DWORD PTR [rdx+0xa8c]
   68fe4:	add    rdx,0x4
   68fe8:	mov    DWORD PTR [r8+rax*1],ecx
   68fec:	mov    ecx,DWORD PTR [rdx-0x4]
   68fef:	mov    DWORD PTR [rdi+rax*1],ecx
   68ff2:	add    rax,0x4
   68ff6:	cmp    rax,0xc
   68ffa:	jne    68fde <test_wp_B_slice+0x7fe>
   68ffc:	add    rsi,0x1
   69000:	add    r9,0xc
   69004:	cmp    DWORD PTR [rip+0x4e44a],esi        # b7454 <listXsize+0x4>
   6900a:	jg     68fd0 <test_wp_B_slice+0x7f0>
   6900c:	lea    rax,[rip+0x4e43d]        # b7450 <listXsize>
   69013:	add    r10,0x1
   69017:	add    r11,0xb4
   6901e:	mov    eax,DWORD PTR [rax]
   69020:	cmp    eax,r10d
   69023:	jg     68fa7 <test_wp_B_slice+0x7c7>
   69025:	mov    DWORD PTR [rsp+0x60],eax
   69029:	mov    r11,QWORD PTR [rsp+0x48]
   6902e:	mov    rbx,QWORD PTR [rsp+0x50]
   69033:	xor    r9d,r9d
   69036:	mov    esi,0x1
   6903b:	mov    eax,DWORD PTR [rsp+0x60]
   6903f:	mov    r10,QWORD PTR [rsp+0x20]
   69044:	test   eax,eax
   69046:	jle    6909a <test_wp_B_slice+0x8ba>
   69048:	mov    r8,QWORD PTR [r11+r9*8]
   6904c:	mov    rdi,QWORD PTR [rbx+r9*8]
   69050:	xor    eax,eax
   69052:	nop    WORD PTR [rax+rax*1+0x0]
   69058:	mov    ecx,DWORD PTR [rip+0x4b0f2]        # b4150 <luma_log_weight_denom>
   6905e:	mov    rdx,QWORD PTR [r8+rax*8]
   69062:	mov    r15d,esi
   69065:	shl    r15d,cl
   69068:	mov    DWORD PTR [rdx],r15d
   6906b:	mov    ecx,DWORD PTR [rip+0x4d67f]        # b66f0 <chroma_log_weight_denom>
   69071:	mov    r15d,esi
   69074:	shl    r15d,cl
   69077:	mov    DWORD PTR [rdx+0x4],r15d
   6907b:	mov    DWORD PTR [rdx+0x8],r15d
   6907f:	mov    rdx,QWORD PTR [rdi+rax*8]
   69083:	add    rax,0x1
   69087:	mov    QWORD PTR [rdx],0x0
   6908e:	mov    DWORD PTR [rdx+0x8],0x0
   69095:	cmp    DWORD PTR [r14],eax
   69098:	jg     69058 <test_wp_B_slice+0x878>
   6909a:	add    r14,0x4
   6909e:	cmp    r9,r10
   690a1:	je     690ac <test_wp_B_slice+0x8cc>
   690a3:	mov    eax,DWORD PTR [r14]
   690a6:	add    r9,0x1
   690aa:	jmp    69044 <test_wp_B_slice+0x864>
   690ac:	mov    eax,DWORD PTR [rip+0x4e39e]        # b7450 <listXsize>
   690b2:	jmp    68ee3 <test_wp_B_slice+0x703>
   690b7:	cmp    DWORD PTR [rsp+0x64],0x1
   690bc:	jne    68b2e <test_wp_B_slice+0x34e>
   690c2:	jmp    69029 <test_wp_B_slice+0x849>
   690c7:	call   4390 <__stack_chk_fail@plt>
   690cc:	nop    DWORD PTR [rax+0x0]

00000000000690d0 <spec_srand>:
   690d0:	endbr64 
   690d4:	mov    DWORD PTR [rip+0x20522],edi        # 895fc <seedi>
   690da:	ret    
   690db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000690e0 <spec_rand>:
   690e0:	endbr64 
   690e4:	movsxd rax,DWORD PTR [rip+0x20511]        # 895fc <seedi>
   690eb:	pxor   xmm0,xmm0
   690ef:	mov    rdx,rax
   690f2:	imul   rax,rax,0xffffffff834e0b5f
   690f9:	mov    ecx,edx
   690fb:	sar    ecx,0x1f
   690fe:	shr    rax,0x20
   69102:	add    eax,edx
   69104:	sar    eax,0x10
   69107:	sub    eax,ecx
   69109:	imul   ecx,eax,0x1f31d
   6910f:	imul   eax,eax,0xfffff4ec
   69115:	sub    edx,ecx
   69117:	imul   edx,edx,0x41a7
   6911d:	add    eax,edx
   6911f:	lea    edx,[rax+0x7fffffff]
   69125:	test   eax,eax
   69127:	cmovle eax,edx
   6912a:	cvtsi2sd xmm0,eax
   6912e:	mov    DWORD PTR [rip+0x204c8],eax        # 895fc <seedi>
   69134:	divsd  xmm0,QWORD PTR [rip+0x96cc]        # 72808 <COEF.5132+0x18>
   6913c:	ret    
   6913d:	nop    DWORD PTR [rax]

0000000000069140 <__libc_csu_init>:
   69140:	endbr64 
   69144:	push   r15
   69146:	lea    r15,[rip+0x1ca03]        # 85b50 <__frame_dummy_init_array_entry>
   6914d:	push   r14
   6914f:	mov    r14,rdx
   69152:	push   r13
   69154:	mov    r13,rsi
   69157:	push   r12
   69159:	mov    r12d,edi
   6915c:	push   rbp
   6915d:	lea    rbp,[rip+0x1c9f4]        # 85b58 <__do_global_dtors_aux_fini_array_entry>
   69164:	push   rbx
   69165:	sub    rbp,r15
   69168:	sub    rsp,0x8
   6916c:	call   4000 <_init>
   69171:	sar    rbp,0x3
   69175:	je     69196 <__libc_csu_init+0x56>
   69177:	xor    ebx,ebx
   69179:	nop    DWORD PTR [rax+0x0]
   69180:	mov    rdx,r14
   69183:	mov    rsi,r13
   69186:	mov    edi,r12d
   69189:	call   QWORD PTR [r15+rbx*8]
   6918d:	add    rbx,0x1
   69191:	cmp    rbp,rbx
   69194:	jne    69180 <__libc_csu_init+0x40>
   69196:	add    rsp,0x8
   6919a:	pop    rbx
   6919b:	pop    rbp
   6919c:	pop    r12
   6919e:	pop    r13
   691a0:	pop    r14
   691a2:	pop    r15
   691a4:	ret    
   691a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000691b0 <__libc_csu_fini>:
   691b0:	endbr64 
   691b4:	ret    

Disassembly of section .fini:

00000000000691b8 <_fini>:
   691b8:	endbr64 
   691bc:	sub    rsp,0x8
   691c0:	add    rsp,0x8
   691c4:	ret    
