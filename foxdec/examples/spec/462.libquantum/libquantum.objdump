
libquantum:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	endbr64 
    1004:	sub    rsp,0x8
    1008:	mov    rax,QWORD PTR [rip+0xcfd9]        # dfe8 <__gmon_start__>
    100f:	test   rax,rax
    1012:	je     1016 <_init+0x16>
    1014:	call   rax
    1016:	add    rsp,0x8
    101a:	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	push   QWORD PTR [rip+0xceea]        # df10 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	bnd jmp QWORD PTR [rip+0xceeb]        # df18 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	nop    DWORD PTR [rax]
    1030:	endbr64 
    1034:	push   0x0
    1039:	bnd jmp 1020 <.plt>
    103f:	nop
    1040:	endbr64 
    1044:	push   0x1
    1049:	bnd jmp 1020 <.plt>
    104f:	nop
    1050:	endbr64 
    1054:	push   0x2
    1059:	bnd jmp 1020 <.plt>
    105f:	nop
    1060:	endbr64 
    1064:	push   0x3
    1069:	bnd jmp 1020 <.plt>
    106f:	nop
    1070:	endbr64 
    1074:	push   0x4
    1079:	bnd jmp 1020 <.plt>
    107f:	nop
    1080:	endbr64 
    1084:	push   0x5
    1089:	bnd jmp 1020 <.plt>
    108f:	nop
    1090:	endbr64 
    1094:	push   0x6
    1099:	bnd jmp 1020 <.plt>
    109f:	nop
    10a0:	endbr64 
    10a4:	push   0x7
    10a9:	bnd jmp 1020 <.plt>
    10af:	nop
    10b0:	endbr64 
    10b4:	push   0x8
    10b9:	bnd jmp 1020 <.plt>
    10bf:	nop
    10c0:	endbr64 
    10c4:	push   0x9
    10c9:	bnd jmp 1020 <.plt>
    10cf:	nop
    10d0:	endbr64 
    10d4:	push   0xa
    10d9:	bnd jmp 1020 <.plt>
    10df:	nop
    10e0:	endbr64 
    10e4:	push   0xb
    10e9:	bnd jmp 1020 <.plt>
    10ef:	nop
    10f0:	endbr64 
    10f4:	push   0xc
    10f9:	bnd jmp 1020 <.plt>
    10ff:	nop
    1100:	endbr64 
    1104:	push   0xd
    1109:	bnd jmp 1020 <.plt>
    110f:	nop
    1110:	endbr64 
    1114:	push   0xe
    1119:	bnd jmp 1020 <.plt>
    111f:	nop
    1120:	endbr64 
    1124:	push   0xf
    1129:	bnd jmp 1020 <.plt>
    112f:	nop
    1130:	endbr64 
    1134:	push   0x10
    1139:	bnd jmp 1020 <.plt>
    113f:	nop
    1140:	endbr64 
    1144:	push   0x11
    1149:	bnd jmp 1020 <.plt>
    114f:	nop
    1150:	endbr64 
    1154:	push   0x12
    1159:	bnd jmp 1020 <.plt>
    115f:	nop
    1160:	endbr64 
    1164:	push   0x13
    1169:	bnd jmp 1020 <.plt>
    116f:	nop
    1170:	endbr64 
    1174:	push   0x14
    1179:	bnd jmp 1020 <.plt>
    117f:	nop
    1180:	endbr64 
    1184:	push   0x15
    1189:	bnd jmp 1020 <.plt>
    118f:	nop
    1190:	endbr64 
    1194:	push   0x16
    1199:	bnd jmp 1020 <.plt>
    119f:	nop

Disassembly of section .plt.got:

00000000000011a0 <__cxa_finalize@plt>:
    11a0:	endbr64 
    11a4:	bnd jmp QWORD PTR [rip+0xce4d]        # dff8 <__cxa_finalize@GLIBC_2.2.5>
    11ab:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000011b0 <getenv@plt>:
    11b0:	endbr64 
    11b4:	bnd jmp QWORD PTR [rip+0xcd65]        # df20 <getenv@GLIBC_2.2.5>
    11bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011c0 <free@plt>:
    11c0:	endbr64 
    11c4:	bnd jmp QWORD PTR [rip+0xcd5d]        # df28 <free@GLIBC_2.2.5>
    11cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011d0 <putchar@plt>:
    11d0:	endbr64 
    11d4:	bnd jmp QWORD PTR [rip+0xcd55]        # df30 <putchar@GLIBC_2.2.5>
    11db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011e0 <puts@plt>:
    11e0:	endbr64 
    11e4:	bnd jmp QWORD PTR [rip+0xcd4d]        # df38 <puts@GLIBC_2.2.5>
    11eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011f0 <fread@plt>:
    11f0:	endbr64 
    11f4:	bnd jmp QWORD PTR [rip+0xcd45]        # df40 <fread@GLIBC_2.2.5>
    11fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001200 <fclose@plt>:
    1200:	endbr64 
    1204:	bnd jmp QWORD PTR [rip+0xcd3d]        # df48 <fclose@GLIBC_2.2.5>
    120b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001210 <__stack_chk_fail@plt>:
    1210:	endbr64 
    1214:	bnd jmp QWORD PTR [rip+0xcd35]        # df50 <__stack_chk_fail@GLIBC_2.4>
    121b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001220 <sincos@plt>:
    1220:	endbr64 
    1224:	bnd jmp QWORD PTR [rip+0xcd2d]        # df58 <sincos@GLIBC_2.2.5>
    122b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001230 <fgetc@plt>:
    1230:	endbr64 
    1234:	bnd jmp QWORD PTR [rip+0xcd25]        # df60 <fgetc@GLIBC_2.2.5>
    123b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001240 <log@plt>:
    1240:	endbr64 
    1244:	bnd jmp QWORD PTR [rip+0xcd1d]        # df68 <log@GLIBC_2.29>
    124b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001250 <calloc@plt>:
    1250:	endbr64 
    1254:	bnd jmp QWORD PTR [rip+0xcd15]        # df70 <calloc@GLIBC_2.2.5>
    125b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001260 <feof@plt>:
    1260:	endbr64 
    1264:	bnd jmp QWORD PTR [rip+0xcd0d]        # df78 <feof@GLIBC_2.2.5>
    126b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001270 <strtol@plt>:
    1270:	endbr64 
    1274:	bnd jmp QWORD PTR [rip+0xcd05]        # df80 <strtol@GLIBC_2.2.5>
    127b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001280 <malloc@plt>:
    1280:	endbr64 
    1284:	bnd jmp QWORD PTR [rip+0xccfd]        # df88 <malloc@GLIBC_2.2.5>
    128b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001290 <realloc@plt>:
    1290:	endbr64 
    1294:	bnd jmp QWORD PTR [rip+0xccf5]        # df90 <realloc@GLIBC_2.2.5>
    129b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000012a0 <__printf_chk@plt>:
    12a0:	endbr64 
    12a4:	bnd jmp QWORD PTR [rip+0xcced]        # df98 <__printf_chk@GLIBC_2.3.4>
    12ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000012b0 <fopen@plt>:
    12b0:	endbr64 
    12b4:	bnd jmp QWORD PTR [rip+0xcce5]        # dfa0 <fopen@GLIBC_2.2.5>
    12bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000012c0 <perror@plt>:
    12c0:	endbr64 
    12c4:	bnd jmp QWORD PTR [rip+0xccdd]        # dfa8 <perror@GLIBC_2.2.5>
    12cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000012d0 <__cxa_atexit@plt>:
    12d0:	endbr64 
    12d4:	bnd jmp QWORD PTR [rip+0xccd5]        # dfb0 <__cxa_atexit@GLIBC_2.2.5>
    12db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000012e0 <exit@plt>:
    12e0:	endbr64 
    12e4:	bnd jmp QWORD PTR [rip+0xcccd]        # dfb8 <exit@GLIBC_2.2.5>
    12eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000012f0 <fwrite@plt>:
    12f0:	endbr64 
    12f4:	bnd jmp QWORD PTR [rip+0xccc5]        # dfc0 <fwrite@GLIBC_2.2.5>
    12fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001300 <__fprintf_chk@plt>:
    1300:	endbr64 
    1304:	bnd jmp QWORD PTR [rip+0xccbd]        # dfc8 <__fprintf_chk@GLIBC_2.3.4>
    130b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001310 <sqrt@plt>:
    1310:	endbr64 
    1314:	bnd jmp QWORD PTR [rip+0xccb5]        # dfd0 <sqrt@GLIBC_2.2.5>
    131b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000001320 <main>:
    1320:	endbr64 
    1324:	push   r15
    1326:	mov    r15d,edi
    1329:	mov    edi,0x1a
    132e:	push   r14
    1330:	push   r13
    1332:	push   r12
    1334:	mov    r12,rsi
    1337:	push   rbp
    1338:	push   rbx
    1339:	sub    rsp,0x78
    133d:	mov    rax,QWORD PTR fs:0x28
    1346:	mov    QWORD PTR [rsp+0x68],rax
    134b:	xor    eax,eax
    134d:	call   8cd0 <spec_srand>
    1352:	cmp    r15d,0x1
    1356:	je     16fa <main+0x3da>
    135c:	mov    rdi,QWORD PTR [r12+0x8]
    1361:	mov    edx,0xa
    1366:	xor    esi,esi
    1368:	call   1270 <strtol@plt>
    136d:	mov    QWORD PTR [rsp+0x8],rax
    1372:	mov    ebx,eax
    1374:	cmp    eax,0xe
    1377:	jle    16e4 <main+0x3c4>
    137d:	mov    r14,QWORD PTR [rsp+0x8]
    1382:	xor    ebp,ebp
    1384:	mov    edi,r14d
    1387:	imul   edi,r14d
    138b:	call   19a0 <quantum_getwidth>
    1390:	mov    edi,r14d
    1393:	mov    r13d,eax
    1396:	call   19a0 <quantum_getwidth>
    139b:	mov    edx,r14d
    139e:	mov    edi,0x1
    13a3:	lea    rsi,[rip+0x90ac]        # a456 <_IO_stdin_used+0x456>
    13aa:	mov    DWORD PTR [rsp+0x4],eax
    13ae:	lea    eax,[rax+rax*2]
    13b1:	mov    DWORD PTR [rsp],eax
    13b4:	lea    ecx,[r13+rax*1+0x2]
    13b9:	xor    eax,eax
    13bb:	call   12a0 <__printf_chk@plt>
    13c0:	cmp    r15d,0x2
    13c4:	jle    13fc <main+0xdc>
    13c6:	mov    rdi,QWORD PTR [r12+0x10]
    13cb:	mov    edx,0xa
    13d0:	xor    esi,esi
    13d2:	call   1270 <strtol@plt>
    13d7:	mov    ebp,eax
    13d9:	jmp    13fc <main+0xdc>
    13db:	nop    DWORD PTR [rax+rax*1+0x0]
    13e0:	call   8ce0 <spec_rand>
    13e5:	mulsd  xmm0,QWORD PTR [rip+0x9193]        # a580 <_IO_stdin_used+0x580>
    13ed:	movsxd rcx,ebx
    13f0:	cvttsd2si rax,xmm0
    13f5:	cqo    
    13f7:	idiv   rcx
    13fa:	mov    ebp,edx
    13fc:	mov    esi,ebp
    13fe:	mov    edi,ebx
    1400:	call   1860 <quantum_gcd>
    1405:	cmp    ebp,0x1
    1408:	jle    13e0 <main+0xc0>
    140a:	cmp    eax,0x1
    140d:	jg     13e0 <main+0xc0>
    140f:	mov    edx,ebp
    1411:	lea    rsi,[rip+0x905a]        # a472 <_IO_stdin_used+0x472>
    1418:	mov    edi,0x1
    141d:	xor    eax,eax
    141f:	call   12a0 <__printf_chk@plt>
    1424:	lea    rdi,[rsp+0x10]
    1429:	mov    edx,r13d
    142c:	xor    esi,esi
    142e:	call   7fe0 <quantum_new_qureg>
    1433:	movdqu xmm2,XMMWORD PTR [rsp+0x10]
    1439:	movdqu xmm3,XMMWORD PTR [rsp+0x20]
    143f:	xor    r15d,r15d
    1442:	lea    r12,[rsp+0x40]
    1447:	movaps XMMWORD PTR [rsp+0x40],xmm2
    144c:	movaps XMMWORD PTR [rsp+0x50],xmm3
    1451:	test   r13d,r13d
    1454:	jle    1474 <main+0x154>
    1456:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1460:	mov    edi,r15d
    1463:	mov    rsi,r12
    1466:	add    r15d,0x1
    146a:	call   45d0 <quantum_hadamard>
    146f:	cmp    r13d,r15d
    1472:	jne    1460 <main+0x140>
    1474:	mov    eax,DWORD PTR [rsp]
    1477:	mov    rsi,r12
    147a:	xor    r15d,r15d
    147d:	lea    r14d,[rax+0x2]
    1481:	mov    edi,r14d
    1484:	call   83b0 <quantum_addscratch>
    1489:	mov    ecx,DWORD PTR [rsp+0x4]
    148d:	mov    edi,DWORD PTR [rsp+0x8]
    1491:	mov    r8,r12
    1494:	mov    edx,r13d
    1497:	mov    esi,ebp
    1499:	call   1df0 <quantum_exp_mod_n>
    149e:	cmp    DWORD PTR [rsp],0xffffffff
    14a2:	jl     14bb <main+0x19b>
    14a4:	nop    DWORD PTR [rax+0x0]
    14a8:	mov    rsi,r12
    14ab:	xor    edi,edi
    14ad:	add    r15d,0x1
    14b1:	call   53c0 <quantum_bmeasure>
    14b6:	cmp    r14d,r15d
    14b9:	jne    14a8 <main+0x188>
    14bb:	mov    rsi,r12
    14be:	mov    edi,r13d
    14c1:	xor    r15d,r15d
    14c4:	call   7d30 <quantum_qft>
    14c9:	mov    eax,r13d
    14cc:	shr    eax,0x1f
    14cf:	add    eax,r13d
    14d2:	sar    eax,1
    14d4:	mov    DWORD PTR [rsp],eax
    14d7:	lea    eax,[r13-0x1]
    14db:	mov    DWORD PTR [rsp+0x4],eax
    14df:	cmp    r13d,0x1
    14e3:	jle    1524 <main+0x204>
    14e5:	nop    DWORD PTR [rax]
    14e8:	mov    r14d,DWORD PTR [rsp+0x4]
    14ed:	mov    edi,r15d
    14f0:	mov    rdx,r12
    14f3:	sub    r14d,r15d
    14f6:	mov    esi,r14d
    14f9:	call   1ea0 <quantum_cnot>
    14fe:	mov    esi,r15d
    1501:	mov    rdx,r12
    1504:	mov    edi,r14d
    1507:	call   1ea0 <quantum_cnot>
    150c:	mov    edi,r15d
    150f:	mov    rdx,r12
    1512:	mov    esi,r14d
    1515:	call   1ea0 <quantum_cnot>
    151a:	add    r15d,0x1
    151e:	cmp    DWORD PTR [rsp],r15d
    1522:	jg     14e8 <main+0x1c8>
    1524:	push   QWORD PTR [rsp+0x58]
    1528:	push   QWORD PTR [rsp+0x58]
    152c:	push   QWORD PTR [rsp+0x58]
    1530:	push   QWORD PTR [rsp+0x58]
    1534:	call   5320 <quantum_measure>
    1539:	mov    DWORD PTR [rsp+0x58],eax
    153d:	mov    rdx,rax
    1540:	add    rsp,0x20
    1544:	cmp    eax,0xffffffff
    1547:	je     1726 <main+0x406>
    154d:	test   eax,eax
    154f:	je     1710 <main+0x3f0>
    1555:	mov    ecx,r13d
    1558:	pxor   xmm0,xmm0
    155c:	pxor   xmm1,xmm1
    1560:	mov    edi,0x1
    1565:	mov    r15d,0x1
    156b:	cvtsi2ss xmm0,eax
    156f:	lea    rsi,[rip+0x8f3f]        # a4b5 <_IO_stdin_used+0x4b5>
    1576:	mov    eax,0x1
    157b:	shl    r15d,cl
    157e:	cvtsi2ss xmm1,r15d
    1583:	mov    DWORD PTR [rsp+0x3c],r15d
    1588:	divss  xmm0,xmm1
    158c:	cvtss2sd xmm0,xmm0
    1590:	call   12a0 <__printf_chk@plt>
    1595:	lea    rsi,[rsp+0x3c]
    159a:	mov    edx,r13d
    159d:	lea    rdi,[rsp+0x38]
    15a2:	call   1890 <quantum_frac_approx>
    15a7:	mov    ecx,DWORD PTR [rsp+0x3c]
    15ab:	mov    edx,DWORD PTR [rsp+0x38]
    15af:	xor    eax,eax
    15b1:	lea    rsi,[rip+0x8f50]        # a508 <_IO_stdin_used+0x508>
    15b8:	mov    edi,0x1
    15bd:	call   12a0 <__printf_chk@plt>
    15c2:	mov    edx,DWORD PTR [rsp+0x3c]
    15c6:	mov    ecx,edx
    15c8:	shr    ecx,0x1f
    15cb:	lea    eax,[rdx+rcx*1]
    15ce:	and    eax,0x1
    15d1:	sub    eax,ecx
    15d3:	cmp    eax,0x1
    15d6:	je     1698 <main+0x378>
    15dc:	lea    rsi,[rip+0x8efc]        # a4df <_IO_stdin_used+0x4df>
    15e3:	mov    edi,0x1
    15e8:	xor    eax,eax
    15ea:	call   12a0 <__printf_chk@plt>
    15ef:	mov    eax,DWORD PTR [rsp+0x3c]
    15f3:	mov    edi,ebp
    15f5:	mov    esi,eax
    15f7:	shr    esi,0x1f
    15fa:	add    esi,eax
    15fc:	sar    esi,1
    15fe:	call   1840 <quantum_ipow>
    1603:	mov    edi,ebp
    1605:	lea    r15d,[rax+0x1]
    1609:	mov    eax,DWORD PTR [rsp+0x3c]
    160d:	mov    esi,eax
    160f:	shr    esi,0x1f
    1612:	add    esi,eax
    1614:	sar    esi,1
    1616:	call   1840 <quantum_ipow>
    161b:	mov    r14,QWORD PTR [rsp+0x8]
    1620:	mov    esi,r15d
    1623:	lea    r13d,[rax-0x1]
    1627:	mov    edi,r14d
    162a:	call   1860 <quantum_gcd>
    162f:	mov    esi,r13d
    1632:	mov    edi,r14d
    1635:	mov    ebp,eax
    1637:	call   1860 <quantum_gcd>
    163c:	cmp    ebp,eax
    163e:	cmovge eax,ebp
    1641:	mov    ecx,eax
    1643:	cmp    eax,r14d
    1646:	jge    16b5 <main+0x395>
    1648:	cmp    eax,0x1
    164b:	jle    16b5 <main+0x395>
    164d:	mov    eax,ebx
    164f:	lea    rsi,[rip+0x8ea1]        # a4f7 <_IO_stdin_used+0x4f7>
    1656:	mov    edi,0x1
    165b:	cdq    
    165c:	idiv   ecx
    165e:	mov    edx,r14d
    1661:	mov    r8d,eax
    1664:	xor    eax,eax
    1666:	call   12a0 <__printf_chk@plt>
    166b:	mov    rdi,r12
    166e:	call   81d0 <quantum_delete_qureg>
    1673:	xor    eax,eax
    1675:	mov    rbx,QWORD PTR [rsp+0x68]
    167a:	xor    rbx,QWORD PTR fs:0x28
    1683:	jne    173c <main+0x41c>
    1689:	add    rsp,0x78
    168d:	pop    rbx
    168e:	pop    rbp
    168f:	pop    r12
    1691:	pop    r13
    1693:	pop    r14
    1695:	pop    r15
    1697:	ret    
    1698:	add    edx,edx
    169a:	cmp    r15d,edx
    169d:	jg     16c8 <main+0x3a8>
    169f:	lea    rdi,[rip+0x8e22]        # a4c8 <_IO_stdin_used+0x4c8>
    16a6:	call   11e0 <puts@plt>
    16ab:	mov    edi,0x2
    16b0:	call   12e0 <exit@plt>
    16b5:	lea    rdi,[rip+0x8e9c]        # a558 <_IO_stdin_used+0x558>
    16bc:	call   11e0 <puts@plt>
    16c1:	xor    edi,edi
    16c3:	call   12e0 <exit@plt>
    16c8:	lea    rdi,[rip+0x8e61]        # a530 <_IO_stdin_used+0x530>
    16cf:	call   11e0 <puts@plt>
    16d4:	mov    eax,DWORD PTR [rsp+0x3c]
    16d8:	lea    edx,[rax+rax*1]
    16db:	mov    DWORD PTR [rsp+0x3c],edx
    16df:	jmp    15dc <main+0x2bc>
    16e4:	lea    rdi,[rip+0x8d5b]        # a446 <_IO_stdin_used+0x446>
    16eb:	call   11e0 <puts@plt>
    16f0:	mov    eax,0x3
    16f5:	jmp    1675 <main+0x355>
    16fa:	lea    rdi,[rip+0x8d2f]        # a430 <_IO_stdin_used+0x430>
    1701:	call   11e0 <puts@plt>
    1706:	mov    eax,0x3
    170b:	jmp    1675 <main+0x355>
    1710:	lea    rdi,[rip+0x8d84]        # a49b <_IO_stdin_used+0x49b>
    1717:	call   11e0 <puts@plt>
    171c:	mov    edi,0x2
    1721:	call   12e0 <exit@plt>
    1726:	lea    rdi,[rip+0x8d56]        # a483 <_IO_stdin_used+0x483>
    172d:	call   11e0 <puts@plt>
    1732:	mov    edi,0x1
    1737:	call   12e0 <exit@plt>
    173c:	call   1210 <__stack_chk_fail@plt>
    1741:	nop    WORD PTR cs:[rax+rax*1+0x0]
    174b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001750 <_start>:
    1750:	endbr64 
    1754:	xor    ebp,ebp
    1756:	mov    r9,rdx
    1759:	pop    rsi
    175a:	mov    rdx,rsp
    175d:	and    rsp,0xfffffffffffffff0
    1761:	push   rax
    1762:	push   rsp
    1763:	lea    r8,[rip+0x7b96]        # 9300 <__libc_csu_fini>
    176a:	lea    rcx,[rip+0x7b1f]        # 9290 <__libc_csu_init>
    1771:	lea    rdi,[rip+0xfffffffffffffba8]        # 1320 <main>
    1778:	call   QWORD PTR [rip+0xc862]        # dfe0 <__libc_start_main@GLIBC_2.2.5>
    177e:	hlt    
    177f:	nop

0000000000001780 <deregister_tm_clones>:
    1780:	lea    rdi,[rip+0xc891]        # e018 <__TMC_END__>
    1787:	lea    rax,[rip+0xc88a]        # e018 <__TMC_END__>
    178e:	cmp    rax,rdi
    1791:	je     17a8 <deregister_tm_clones+0x28>
    1793:	mov    rax,QWORD PTR [rip+0xc83e]        # dfd8 <_ITM_deregisterTMCloneTable>
    179a:	test   rax,rax
    179d:	je     17a8 <deregister_tm_clones+0x28>
    179f:	jmp    rax
    17a1:	nop    DWORD PTR [rax+0x0]
    17a8:	ret    
    17a9:	nop    DWORD PTR [rax+0x0]

00000000000017b0 <register_tm_clones>:
    17b0:	lea    rdi,[rip+0xc861]        # e018 <__TMC_END__>
    17b7:	lea    rsi,[rip+0xc85a]        # e018 <__TMC_END__>
    17be:	sub    rsi,rdi
    17c1:	mov    rax,rsi
    17c4:	shr    rsi,0x3f
    17c8:	sar    rax,0x3
    17cc:	add    rsi,rax
    17cf:	sar    rsi,1
    17d2:	je     17e8 <register_tm_clones+0x38>
    17d4:	mov    rax,QWORD PTR [rip+0xc815]        # dff0 <_ITM_registerTMCloneTable>
    17db:	test   rax,rax
    17de:	je     17e8 <register_tm_clones+0x38>
    17e0:	jmp    rax
    17e2:	nop    WORD PTR [rax+rax*1+0x0]
    17e8:	ret    
    17e9:	nop    DWORD PTR [rax+0x0]

00000000000017f0 <__do_global_dtors_aux>:
    17f0:	endbr64 
    17f4:	cmp    BYTE PTR [rip+0xc82d],0x0        # e028 <completed.8061>
    17fb:	jne    1828 <__do_global_dtors_aux+0x38>
    17fd:	push   rbp
    17fe:	cmp    QWORD PTR [rip+0xc7f2],0x0        # dff8 <__cxa_finalize@GLIBC_2.2.5>
    1806:	mov    rbp,rsp
    1809:	je     1817 <__do_global_dtors_aux+0x27>
    180b:	mov    rdi,QWORD PTR [rip+0xc7f6]        # e008 <__dso_handle>
    1812:	call   11a0 <__cxa_finalize@plt>
    1817:	call   1780 <deregister_tm_clones>
    181c:	mov    BYTE PTR [rip+0xc805],0x1        # e028 <completed.8061>
    1823:	pop    rbp
    1824:	ret    
    1825:	nop    DWORD PTR [rax]
    1828:	ret    
    1829:	nop    DWORD PTR [rax+0x0]

0000000000001830 <frame_dummy>:
    1830:	endbr64 
    1834:	jmp    17b0 <register_tm_clones>
    1839:	nop    DWORD PTR [rax+0x0]

0000000000001840 <quantum_ipow>:
    1840:	endbr64 
    1844:	mov    r8d,0x1
    184a:	test   esi,esi
    184c:	jle    185b <quantum_ipow+0x1b>
    184e:	xor    eax,eax
    1850:	add    eax,0x1
    1853:	imul   r8d,edi
    1857:	cmp    esi,eax
    1859:	jne    1850 <quantum_ipow+0x10>
    185b:	mov    eax,r8d
    185e:	ret    
    185f:	nop

0000000000001860 <quantum_gcd>:
    1860:	endbr64 
    1864:	mov    eax,edi
    1866:	mov    edx,esi
    1868:	test   esi,esi
    186a:	je     1888 <quantum_gcd+0x28>
    186c:	nop    DWORD PTR [rax+0x0]
    1870:	mov    r8d,edx
    1873:	cdq    
    1874:	idiv   r8d
    1877:	mov    eax,r8d
    187a:	test   edx,edx
    187c:	jne    1870 <quantum_gcd+0x10>
    187e:	mov    eax,r8d
    1881:	ret    
    1882:	nop    WORD PTR [rax+rax*1+0x0]
    1888:	mov    r8d,edi
    188b:	mov    eax,r8d
    188e:	ret    
    188f:	nop

0000000000001890 <quantum_frac_approx>:
    1890:	endbr64 
    1894:	pxor   xmm3,xmm3
    1898:	pxor   xmm0,xmm0
    189c:	mov    ecx,edx
    189e:	push   rbp
    189f:	cvtsi2ss xmm3,DWORD PTR [rdi]
    18a3:	push   rbx
    18a4:	mov    ebp,0x2
    18a9:	mov    ebx,0x1
    18ae:	cvtsi2ss xmm0,DWORD PTR [rsi]
    18b2:	movsd  xmm2,QWORD PTR [rip+0x874e]        # a008 <_IO_stdin_used+0x8>
    18ba:	shl    ebx,cl
    18bc:	shl    ebp,cl
    18be:	movss  xmm4,DWORD PTR [rip+0x8752]        # a018 <_IO_stdin_used+0x18>
    18c6:	xor    r8d,r8d
    18c9:	xor    edx,edx
    18cb:	xor    r11d,r11d
    18ce:	movsd  xmm5,QWORD PTR [rip+0x873a]        # a010 <_IO_stdin_used+0x10>
    18d6:	mov    r9d,0x1
    18dc:	mov    r10d,0x1
    18e2:	movss  xmm6,DWORD PTR [rip+0x8736]        # a020 <_IO_stdin_used+0x20>
    18ea:	divss  xmm3,xmm0
    18ee:	movaps xmm1,xmm3
    18f1:	jmp    1942 <quantum_frac_approx+0xb2>
    18f3:	nop    DWORD PTR [rax+rax*1+0x0]
    18f8:	imul   eax,r9d
    18fc:	pxor   xmm0,xmm0
    1900:	pxor   xmm7,xmm7
    1904:	mov    r10d,ecx
    1907:	cvtsi2ss xmm7,edx
    190b:	movapd xmm8,xmm5
    1910:	lea    r8d,[rax+r11*1]
    1914:	mov    r11d,r9d
    1917:	cvtsi2ss xmm0,r8d
    191c:	divss  xmm0,xmm7
    1920:	pxor   xmm7,xmm7
    1924:	cvtsi2sd xmm7,ebp
    1928:	divsd  xmm8,xmm7
    192d:	subss  xmm0,xmm3
    1931:	andps  xmm0,xmm6
    1934:	cvtss2sd xmm0,xmm0
    1938:	comisd xmm0,xmm8
    193d:	jbe    1990 <quantum_frac_approx+0x100>
    193f:	mov    r9d,r8d
    1942:	pxor   xmm0,xmm0
    1946:	mov    ecx,edx
    1948:	cvtss2sd xmm0,xmm1
    194c:	movapd xmm1,xmm0
    1950:	addsd  xmm1,xmm2
    1954:	cvttsd2si eax,xmm1
    1958:	pxor   xmm1,xmm1
    195c:	cvtsi2sd xmm1,eax
    1960:	imul   edx,eax
    1963:	subsd  xmm1,xmm2
    1967:	add    edx,r10d
    196a:	subsd  xmm0,xmm1
    196e:	movaps xmm1,xmm4
    1971:	cvtsd2ss xmm0,xmm0
    1975:	divss  xmm1,xmm0
    1979:	cmp    edx,ebx
    197b:	jle    18f8 <quantum_frac_approx+0x68>
    1981:	mov    DWORD PTR [rdi],r8d
    1984:	pop    rbx
    1985:	mov    DWORD PTR [rsi],ecx
    1987:	pop    rbp
    1988:	ret    
    1989:	nop    DWORD PTR [rax+0x0]
    1990:	mov    ecx,edx
    1992:	mov    DWORD PTR [rdi],r8d
    1995:	pop    rbx
    1996:	mov    DWORD PTR [rsi],ecx
    1998:	pop    rbp
    1999:	ret    
    199a:	nop    WORD PTR [rax+rax*1+0x0]

00000000000019a0 <quantum_getwidth>:
    19a0:	endbr64 
    19a4:	mov    ecx,0x1
    19a9:	cmp    edi,0x2
    19ac:	jle    19c3 <quantum_getwidth+0x23>
    19ae:	mov    edx,0x1
    19b3:	nop    DWORD PTR [rax+rax*1+0x0]
    19b8:	add    ecx,0x1
    19bb:	mov    eax,edx
    19bd:	shl    eax,cl
    19bf:	cmp    eax,edi
    19c1:	jl     19b8 <quantum_getwidth+0x18>
    19c3:	mov    eax,ecx
    19c5:	ret    
    19c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000019d0 <quantum_inverse_mod>:
    19d0:	endbr64 
    19d4:	mov    eax,esi
    19d6:	cdq    
    19d7:	idiv   edi
    19d9:	mov    r8d,edx
    19dc:	cmp    edx,0x1
    19df:	je     1a00 <quantum_inverse_mod+0x30>
    19e1:	lea    ecx,[rsi+rsi*1]
    19e4:	mov    r8d,0x1
    19ea:	nop    WORD PTR [rax+rax*1+0x0]
    19f0:	mov    eax,ecx
    19f2:	add    r8d,0x1
    19f6:	add    ecx,esi
    19f8:	cdq    
    19f9:	idiv   edi
    19fb:	cmp    edx,0x1
    19fe:	jne    19f0 <quantum_inverse_mod+0x20>
    1a00:	mov    eax,r8d
    1a03:	ret    
    1a04:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1a0e:	xchg   ax,ax

0000000000001a10 <quantum_conj>:
    1a10:	endbr64 
    1a14:	movq   QWORD PTR [rsp-0x8],xmm0
    1a1a:	movss  xmm0,DWORD PTR [rsp-0x4]
    1a20:	pxor   xmm2,xmm2
    1a24:	movss  xmm1,DWORD PTR [rsp-0x8]
    1a2a:	mulss  xmm2,xmm0
    1a2e:	xorps  xmm0,XMMWORD PTR [rip+0x85fb]        # a030 <_IO_stdin_used+0x30>
    1a35:	movss  DWORD PTR [rsp-0xc],xmm0
    1a3b:	subss  xmm1,xmm2
    1a3f:	movss  DWORD PTR [rsp-0x10],xmm1
    1a45:	movq   xmm0,QWORD PTR [rsp-0x10]
    1a4b:	ret    
    1a4c:	nop    DWORD PTR [rax+0x0]

0000000000001a50 <quantum_prob>:
    1a50:	endbr64 
    1a54:	movq   QWORD PTR [rsp-0x8],xmm0
    1a5a:	movss  xmm0,DWORD PTR [rsp-0x8]
    1a60:	movss  xmm1,DWORD PTR [rsp-0x4]
    1a66:	mulss  xmm0,xmm0
    1a6a:	mulss  xmm1,xmm1
    1a6e:	addss  xmm0,xmm1
    1a72:	ret    
    1a73:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    1a7e:	xchg   ax,ax

0000000000001a80 <quantum_cexp>:
    1a80:	endbr64 
    1a84:	sub    rsp,0x28
    1a88:	cvtss2sd xmm0,xmm0
    1a8c:	lea    rdi,[rsp+0x18]
    1a91:	lea    rsi,[rsp+0x10]
    1a96:	call   1220 <sincos@plt>
    1a9b:	movsd  xmm1,QWORD PTR [rsp+0x18]
    1aa1:	pxor   xmm0,xmm0
    1aa5:	mulsd  xmm0,xmm1
    1aa9:	cvtsd2ss xmm1,xmm1
    1aad:	movss  DWORD PTR [rsp+0xc],xmm1
    1ab3:	addsd  xmm0,QWORD PTR [rsp+0x10]
    1ab9:	cvtsd2ss xmm0,xmm0
    1abd:	movss  DWORD PTR [rsp+0x8],xmm0
    1ac3:	movq   xmm0,QWORD PTR [rsp+0x8]
    1ac9:	add    rsp,0x28
    1acd:	ret    
    1ace:	xchg   ax,ax

0000000000001ad0 <quantum_get_decoherence>:
    1ad0:	endbr64 
    1ad4:	movss  xmm0,DWORD PTR [rip+0xc550]        # e02c <lambda>
    1adc:	ret    
    1add:	nop    DWORD PTR [rax]

0000000000001ae0 <quantum_set_decoherence>:
    1ae0:	endbr64 
    1ae4:	ucomiss xmm0,DWORD PTR [rip+0x8585]        # a070 <_IO_stdin_used+0x70>
    1aeb:	jp     1b00 <quantum_set_decoherence+0x20>
    1aed:	jne    1b00 <quantum_set_decoherence+0x20>
    1aef:	mov    DWORD PTR [rip+0xc537],0x0        # e030 <status>
    1af9:	ret    
    1afa:	nop    WORD PTR [rax+rax*1+0x0]
    1b00:	mov    DWORD PTR [rip+0xc526],0x1        # e030 <status>
    1b0a:	movss  DWORD PTR [rip+0xc51a],xmm0        # e02c <lambda>
    1b12:	ret    
    1b13:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    1b1e:	xchg   ax,ax

0000000000001b20 <quantum_decohere>:
    1b20:	endbr64 
    1b24:	push   r13
    1b26:	push   r12
    1b28:	push   rbp
    1b29:	push   rbx
    1b2a:	mov    rbx,rdi
    1b2d:	mov    edi,0x1
    1b32:	sub    rsp,0x28
    1b36:	call   5100 <quantum_gate_counter>
    1b3b:	mov    ecx,DWORD PTR [rip+0xc4ef]        # e030 <status>
    1b41:	test   ecx,ecx
    1b43:	jne    1b50 <quantum_decohere+0x30>
    1b45:	add    rsp,0x28
    1b49:	pop    rbx
    1b4a:	pop    rbp
    1b4b:	pop    r12
    1b4d:	pop    r13
    1b4f:	ret    
    1b50:	movsxd r12,DWORD PTR [rbx]
    1b53:	mov    esi,0x4
    1b58:	mov    rdi,r12
    1b5b:	call   1250 <calloc@plt>
    1b60:	mov    rbp,rax
    1b63:	test   rax,rax
    1b66:	je     1dcc <quantum_decohere+0x2ac>
    1b6c:	lea    rdi,[r12*4+0x0]
    1b74:	xor    r12d,r12d
    1b77:	call   5140 <quantum_memman>
    1b7c:	mov    edx,DWORD PTR [rbx]
    1b7e:	test   edx,edx
    1b80:	jle    1c87 <quantum_decohere+0x167>
    1b86:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1b90:	xor    eax,eax
    1b92:	call   5310 <quantum_frand>
    1b97:	xor    eax,eax
    1b99:	pxor   xmm1,xmm1
    1b9d:	addsd  xmm0,xmm0
    1ba1:	subsd  xmm0,QWORD PTR [rip+0x8467]        # a010 <_IO_stdin_used+0x10>
    1ba9:	cvtsd2ss xmm1,xmm0
    1bad:	movss  DWORD PTR [rsp],xmm1
    1bb2:	call   5310 <quantum_frand>
    1bb7:	movss  xmm1,DWORD PTR [rsp]
    1bbc:	addsd  xmm0,xmm0
    1bc0:	subsd  xmm0,QWORD PTR [rip+0x8448]        # a010 <_IO_stdin_used+0x10>
    1bc8:	movaps xmm2,xmm1
    1bcb:	mulss  xmm2,xmm1
    1bcf:	cvtsd2ss xmm0,xmm0
    1bd3:	mulss  xmm0,xmm0
    1bd7:	addss  xmm0,xmm2
    1bdb:	comiss xmm0,DWORD PTR [rip+0x8436]        # a018 <_IO_stdin_used+0x18>
    1be2:	jae    1b90 <quantum_decohere+0x70>
    1be4:	pxor   xmm7,xmm7
    1be8:	cvtss2sd xmm7,xmm1
    1bec:	pxor   xmm1,xmm1
    1bf0:	movsd  QWORD PTR [rsp],xmm7
    1bf5:	cvtss2sd xmm1,xmm0
    1bf9:	movapd xmm0,xmm1
    1bfd:	movsd  QWORD PTR [rsp+0x8],xmm1
    1c03:	call   1240 <log@plt>
    1c08:	movsd  xmm1,QWORD PTR [rsp+0x8]
    1c0e:	pxor   xmm7,xmm7
    1c12:	mulsd  xmm0,QWORD PTR [rip+0x845e]        # a078 <_IO_stdin_used+0x78>
    1c1a:	divsd  xmm0,xmm1
    1c1e:	ucomisd xmm7,xmm0
    1c22:	movapd xmm1,xmm0
    1c26:	sqrtsd xmm1,xmm1
    1c2a:	ja     1d77 <quantum_decohere+0x257>
    1c30:	movss  xmm0,DWORD PTR [rip+0xc3f4]        # e02c <lambda>
    1c38:	mulsd  xmm1,QWORD PTR [rsp]
    1c3d:	pxor   xmm3,xmm3
    1c41:	addss  xmm0,xmm0
    1c45:	cvtss2sd xmm0,xmm0
    1c49:	ucomisd xmm3,xmm0
    1c4d:	movapd xmm2,xmm0
    1c51:	cvtsd2ss xmm1,xmm1
    1c55:	sqrtsd xmm2,xmm2
    1c59:	ja     1d8d <quantum_decohere+0x26d>
    1c5f:	cvtss2sd xmm1,xmm1
    1c63:	mulsd  xmm1,xmm2
    1c67:	cvtsd2ss xmm1,xmm1
    1c6b:	mulss  xmm1,DWORD PTR [rip+0x8401]        # a074 <_IO_stdin_used+0x74>
    1c73:	movss  DWORD PTR [rbp+r12*4+0x0],xmm1
    1c7a:	add    r12,0x1
    1c7e:	cmp    DWORD PTR [rbx],r12d
    1c81:	jg     1b90 <quantum_decohere+0x70>
    1c87:	mov    eax,DWORD PTR [rbx+0x4]
    1c8a:	xor    r13d,r13d
    1c8d:	test   eax,eax
    1c8f:	jle    1d55 <quantum_decohere+0x235>
    1c95:	nop    DWORD PTR [rax]
    1c98:	mov    eax,DWORD PTR [rbx]
    1c9a:	mov    r12,r13
    1c9d:	pxor   xmm0,xmm0
    1ca1:	shl    r12,0x4
    1ca5:	test   eax,eax
    1ca7:	jle    1ce9 <quantum_decohere+0x1c9>
    1ca9:	mov    rdx,QWORD PTR [rbx+0x10]
    1cad:	lea    ecx,[rax-0x1]
    1cb0:	pxor   xmm0,xmm0
    1cb4:	xor    eax,eax
    1cb6:	mov    rsi,QWORD PTR [rdx+r12*1+0x8]
    1cbb:	jmp    1cd0 <quantum_decohere+0x1b0>
    1cbd:	nop    DWORD PTR [rax]
    1cc0:	addss  xmm0,xmm1
    1cc4:	lea    rdx,[rax+0x1]
    1cc8:	cmp    rcx,rax
    1ccb:	je     1ce9 <quantum_decohere+0x1c9>
    1ccd:	mov    rax,rdx
    1cd0:	bt     rsi,rax
    1cd4:	movss  xmm1,DWORD PTR [rbp+rax*4+0x0]
    1cda:	jb     1cc0 <quantum_decohere+0x1a0>
    1cdc:	subss  xmm0,xmm1
    1ce0:	lea    rdx,[rax+0x1]
    1ce4:	cmp    rcx,rax
    1ce7:	jne    1ccd <quantum_decohere+0x1ad>
    1ce9:	call   1a80 <quantum_cexp>
    1cee:	add    r12,QWORD PTR [rbx+0x10]
    1cf2:	movq   QWORD PTR [rsp+0x18],xmm0
    1cf8:	movss  xmm2,DWORD PTR [rsp+0x18]
    1cfe:	movss  xmm1,DWORD PTR [r12+0x4]
    1d05:	movss  xmm3,DWORD PTR [rsp+0x1c]
    1d0b:	movss  xmm5,DWORD PTR [r12]
    1d11:	movaps xmm4,xmm2
    1d14:	movaps xmm0,xmm1
    1d17:	movaps xmm6,xmm2
    1d1a:	mulss  xmm0,xmm3
    1d1e:	mulss  xmm4,xmm5
    1d22:	mulss  xmm6,xmm1
    1d26:	subss  xmm4,xmm0
    1d2a:	movaps xmm0,xmm5
    1d2d:	mulss  xmm0,xmm3
    1d31:	addss  xmm0,xmm6
    1d35:	ucomiss xmm0,xmm4
    1d38:	jp     1dad <quantum_decohere+0x28d>
    1d3a:	movss  DWORD PTR [r12],xmm4
    1d40:	add    r13,0x1
    1d44:	movss  DWORD PTR [r12+0x4],xmm0
    1d4b:	cmp    DWORD PTR [rbx+0x4],r13d
    1d4f:	jg     1c98 <quantum_decohere+0x178>
    1d55:	mov    rdi,rbp
    1d58:	call   11c0 <free@plt>
    1d5d:	mov    edi,DWORD PTR [rbx]
    1d5f:	add    rsp,0x28
    1d63:	pop    rbx
    1d64:	pop    rbp
    1d65:	neg    edi
    1d67:	pop    r12
    1d69:	pop    r13
    1d6b:	movsxd rdi,edi
    1d6e:	shl    rdi,0x2
    1d72:	jmp    5140 <quantum_memman>
    1d77:	movsd  QWORD PTR [rsp+0x8],xmm1
    1d7d:	call   1310 <sqrt@plt>
    1d82:	movsd  xmm1,QWORD PTR [rsp+0x8]
    1d88:	jmp    1c30 <quantum_decohere+0x110>
    1d8d:	movsd  QWORD PTR [rsp+0x8],xmm2
    1d93:	movss  DWORD PTR [rsp],xmm1
    1d98:	call   1310 <sqrt@plt>
    1d9d:	movsd  xmm2,QWORD PTR [rsp+0x8]
    1da3:	movss  xmm1,DWORD PTR [rsp]
    1da8:	jmp    1c5f <quantum_decohere+0x13f>
    1dad:	movaps xmm0,xmm5
    1db0:	call   8d40 <__mulsc3>
    1db5:	movq   QWORD PTR [rsp+0x10],xmm0
    1dbb:	movss  xmm4,DWORD PTR [rsp+0x10]
    1dc1:	movss  xmm0,DWORD PTR [rsp+0x14]
    1dc7:	jmp    1d3a <quantum_decohere+0x21a>
    1dcc:	mov    edi,0x1
    1dd1:	mov    edx,r12d
    1dd4:	lea    rsi,[rip+0x8265]        # a040 <_IO_stdin_used+0x40>
    1ddb:	xor    eax,eax
    1ddd:	call   12a0 <__printf_chk@plt>
    1de2:	mov    edi,0x1
    1de7:	call   12e0 <exit@plt>
    1dec:	nop    DWORD PTR [rax+0x0]

0000000000001df0 <quantum_exp_mod_n>:
    1df0:	endbr64 
    1df4:	push   r15
    1df6:	mov    r15d,edi
    1df9:	lea    edi,[rcx+rcx*1+0x2]
    1dfd:	push   r14
    1dff:	mov    r14,r8
    1e02:	push   r13
    1e04:	mov    r13d,esi
    1e07:	mov    rsi,r8
    1e0a:	push   r12
    1e0c:	push   rbp
    1e0d:	mov    ebp,edx
    1e0f:	push   rbx
    1e10:	mov    ebx,ecx
    1e12:	sub    rsp,0x18
    1e16:	call   2290 <quantum_sigma_x>
    1e1b:	test   ebp,ebp
    1e1d:	jle    1e90 <quantum_exp_mod_n+0xa0>
    1e1f:	mov    eax,r13d
    1e22:	add    ebp,0x1
    1e25:	mov    r13d,0x1
    1e2b:	cdq    
    1e2c:	lea    r12d,[rbx+rbx*2+0x1]
    1e31:	idiv   r15d
    1e34:	mov    DWORD PTR [rsp+0xc],edx
    1e38:	mov    esi,edx
    1e3a:	nop    WORD PTR [rax+rax*1+0x0]
    1e40:	lea    edx,[r12+r13*1]
    1e44:	mov    edi,r15d
    1e47:	mov    r8,r14
    1e4a:	mov    ecx,ebx
    1e4c:	call   7780 <mul_mod_n>
    1e51:	mov    edi,r13d
    1e54:	add    r13d,0x1
    1e58:	cmp    r13d,ebp
    1e5b:	je     1e90 <quantum_exp_mod_n+0xa0>
    1e5d:	mov    esi,DWORD PTR [rsp+0xc]
    1e61:	mov    ecx,0x1
    1e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1e70:	imul   esi,esi
    1e73:	mov    eax,esi
    1e75:	cdq    
    1e76:	idiv   r15d
    1e79:	mov    eax,ecx
    1e7b:	add    ecx,0x1
    1e7e:	mov    esi,edx
    1e80:	cmp    edi,eax
    1e82:	jne    1e70 <quantum_exp_mod_n+0x80>
    1e84:	jmp    1e40 <quantum_exp_mod_n+0x50>
    1e86:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1e90:	add    rsp,0x18
    1e94:	pop    rbx
    1e95:	pop    rbp
    1e96:	pop    r12
    1e98:	pop    r13
    1e9a:	pop    r14
    1e9c:	pop    r15
    1e9e:	ret    
    1e9f:	nop

0000000000001ea0 <quantum_cnot>:
    1ea0:	endbr64 
    1ea4:	push   r13
    1ea6:	mov    r13d,edi
    1ea9:	push   r12
    1eab:	mov    r12,rdx
    1eae:	push   rbp
    1eaf:	mov    ebp,esi
    1eb1:	xor    esi,esi
    1eb3:	sub    rsp,0x10
    1eb7:	mov    rax,QWORD PTR fs:0x28
    1ec0:	mov    QWORD PTR [rsp+0x8],rax
    1ec5:	xor    eax,eax
    1ec7:	lea    rdi,[rsp+0x4]
    1ecc:	call   77f0 <quantum_qec_get_status>
    1ed1:	mov    eax,DWORD PTR [rsp+0x4]
    1ed5:	test   eax,eax
    1ed7:	je     1f00 <quantum_cnot+0x60>
    1ed9:	mov    rdx,r12
    1edc:	mov    esi,ebp
    1ede:	mov    edi,r13d
    1ee1:	call   7b80 <quantum_cnot_ft>
    1ee6:	mov    rax,QWORD PTR [rsp+0x8]
    1eeb:	xor    rax,QWORD PTR fs:0x28
    1ef4:	jne    1f74 <quantum_cnot+0xd4>
    1ef6:	add    rsp,0x10
    1efa:	pop    rbp
    1efb:	pop    r12
    1efd:	pop    r13
    1eff:	ret    
    1f00:	xor    eax,eax
    1f02:	mov    edx,ebp
    1f04:	mov    esi,r13d
    1f07:	mov    edi,0x1
    1f0c:	call   64a0 <quantum_objcode_put>
    1f11:	test   eax,eax
    1f13:	jne    1ee6 <quantum_cnot+0x46>
    1f15:	mov    edx,DWORD PTR [r12+0x4]
    1f1a:	test   edx,edx
    1f1c:	jle    1f67 <quantum_cnot+0xc7>
    1f1e:	mov    edi,0x1
    1f23:	mov    r8,QWORD PTR [r12+0x10]
    1f28:	mov    ecx,r13d
    1f2b:	sub    edx,0x1
    1f2e:	mov    rsi,rdi
    1f31:	shl    rdx,0x4
    1f35:	shl    rsi,cl
    1f38:	mov    ecx,ebp
    1f3a:	lea    rax,[r8+0x8]
    1f3e:	shl    rdi,cl
    1f41:	lea    rcx,[r8+rdx*1+0x18]
    1f46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1f50:	mov    rdx,QWORD PTR [rax]
    1f53:	test   rdx,rsi
    1f56:	je     1f5e <quantum_cnot+0xbe>
    1f58:	xor    rdx,rdi
    1f5b:	mov    QWORD PTR [rax],rdx
    1f5e:	add    rax,0x10
    1f62:	cmp    rax,rcx
    1f65:	jne    1f50 <quantum_cnot+0xb0>
    1f67:	mov    rdi,r12
    1f6a:	call   1b20 <quantum_decohere>
    1f6f:	jmp    1ee6 <quantum_cnot+0x46>
    1f74:	call   1210 <__stack_chk_fail@plt>
    1f79:	nop    DWORD PTR [rax+0x0]

0000000000001f80 <quantum_toffoli>:
    1f80:	endbr64 
    1f84:	push   r14
    1f86:	mov    r14d,esi
    1f89:	xor    esi,esi
    1f8b:	push   r13
    1f8d:	mov    r13d,edx
    1f90:	push   r12
    1f92:	mov    r12,rcx
    1f95:	push   rbp
    1f96:	mov    ebp,edi
    1f98:	sub    rsp,0x18
    1f9c:	mov    rax,QWORD PTR fs:0x28
    1fa5:	mov    QWORD PTR [rsp+0x8],rax
    1faa:	xor    eax,eax
    1fac:	lea    rdi,[rsp+0x4]
    1fb1:	call   77f0 <quantum_qec_get_status>
    1fb6:	mov    eax,DWORD PTR [rsp+0x4]
    1fba:	test   eax,eax
    1fbc:	je     1ff0 <quantum_toffoli+0x70>
    1fbe:	mov    rcx,r12
    1fc1:	mov    edx,r13d
    1fc4:	mov    esi,r14d
    1fc7:	mov    edi,ebp
    1fc9:	call   7c20 <quantum_toffoli_ft>
    1fce:	mov    rax,QWORD PTR [rsp+0x8]
    1fd3:	xor    rax,QWORD PTR fs:0x28
    1fdc:	jne    207c <quantum_toffoli+0xfc>
    1fe2:	add    rsp,0x18
    1fe6:	pop    rbp
    1fe7:	pop    r12
    1fe9:	pop    r13
    1feb:	pop    r14
    1fed:	ret    
    1fee:	xchg   ax,ax
    1ff0:	xor    eax,eax
    1ff2:	mov    ecx,r13d
    1ff5:	mov    edx,r14d
    1ff8:	mov    esi,ebp
    1ffa:	mov    edi,0x2
    1fff:	call   64a0 <quantum_objcode_put>
    2004:	test   eax,eax
    2006:	jne    1fce <quantum_toffoli+0x4e>
    2008:	mov    edx,DWORD PTR [r12+0x4]
    200d:	test   edx,edx
    200f:	jle    206f <quantum_toffoli+0xef>
    2011:	mov    r8d,0x1
    2017:	mov    rdi,QWORD PTR [r12+0x10]
    201c:	mov    ecx,r14d
    201f:	sub    edx,0x1
    2022:	mov    rsi,r8
    2025:	shl    rdx,0x4
    2029:	shl    rsi,cl
    202c:	mov    ecx,r13d
    202f:	lea    rax,[rdi+0x8]
    2033:	bts    rsi,rbp
    2037:	shl    r8,cl
    203a:	lea    rdi,[rdi+rdx*1+0x18]
    203f:	jmp    2051 <quantum_toffoli+0xd1>
    2041:	nop    DWORD PTR [rax+0x0]
    2048:	add    rax,0x10
    204c:	cmp    rdi,rax
    204f:	je     206f <quantum_toffoli+0xef>
    2051:	mov    rdx,QWORD PTR [rax]
    2054:	mov    rcx,rdx
    2057:	and    rcx,rsi
    205a:	cmp    rsi,rcx
    205d:	jne    2048 <quantum_toffoli+0xc8>
    205f:	xor    rdx,r8
    2062:	add    rax,0x10
    2066:	mov    QWORD PTR [rax-0x10],rdx
    206a:	cmp    rdi,rax
    206d:	jne    2051 <quantum_toffoli+0xd1>
    206f:	mov    rdi,r12
    2072:	call   1b20 <quantum_decohere>
    2077:	jmp    1fce <quantum_toffoli+0x4e>
    207c:	call   1210 <__stack_chk_fail@plt>
    2081:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    208c:	nop    DWORD PTR [rax+0x0]

0000000000002090 <quantum_unbounded_toffoli>:
    2090:	endbr64 
    2094:	push   r14
    2096:	movsxd r14,edi
    2099:	push   r13
    209b:	mov    r13,rsi
    209e:	push   r12
    20a0:	mov    r12,r14
    20a3:	shl    r14,0x2
    20a7:	push   rbp
    20a8:	mov    rdi,r14
    20ab:	sub    rsp,0x58
    20af:	mov    QWORD PTR [rsp+0x30],rdx
    20b4:	mov    QWORD PTR [rsp+0x38],rcx
    20b9:	mov    QWORD PTR [rsp+0x40],r8
    20be:	mov    QWORD PTR [rsp+0x48],r9
    20c3:	mov    rax,QWORD PTR fs:0x28
    20cc:	mov    QWORD PTR [rsp+0x18],rax
    20d1:	xor    eax,eax
    20d3:	call   1280 <malloc@plt>
    20d8:	test   rax,rax
    20db:	je     2261 <quantum_unbounded_toffoli+0x1d1>
    20e1:	mov    rdi,r14
    20e4:	mov    rbp,rax
    20e7:	call   5140 <quantum_memman>
    20ec:	lea    rax,[rsp+0x80]
    20f4:	mov    DWORD PTR [rsp],0x10
    20fb:	mov    QWORD PTR [rsp+0x8],rax
    2100:	lea    rax,[rsp+0x20]
    2105:	mov    QWORD PTR [rsp+0x10],rax
    210a:	test   r12d,r12d
    210d:	jle    224d <quantum_unbounded_toffoli+0x1bd>
    2113:	lea    edx,[r12-0x1]
    2118:	mov    r8,rax
    211b:	mov    ecx,0x10
    2120:	mov    rax,rbp
    2123:	lea    rdi,[rbp+rdx*4+0x4]
    2128:	lea    rsi,[rsp+0x80]
    2130:	xor    r9d,r9d
    2133:	jmp    214e <quantum_unbounded_toffoli+0xbe>
    2135:	nop    DWORD PTR [rax]
    2138:	mov    edx,ecx
    213a:	add    rax,0x4
    213e:	add    ecx,0x8
    2141:	add    rdx,r8
    2144:	mov    edx,DWORD PTR [rdx]
    2146:	mov    DWORD PTR [rax-0x4],edx
    2149:	cmp    rax,rdi
    214c:	je     216e <quantum_unbounded_toffoli+0xde>
    214e:	cmp    ecx,0x2f
    2151:	jbe    2138 <quantum_unbounded_toffoli+0xa8>
    2153:	mov    rdx,rsi
    2156:	add    rax,0x4
    215a:	add    rsi,0x8
    215e:	mov    r9d,0x1
    2164:	mov    edx,DWORD PTR [rdx]
    2166:	mov    DWORD PTR [rax-0x4],edx
    2169:	cmp    rax,rdi
    216c:	jne    214e <quantum_unbounded_toffoli+0xbe>
    216e:	test   r9b,r9b
    2171:	je     2178 <quantum_unbounded_toffoli+0xe8>
    2173:	mov    QWORD PTR [rsp+0x8],rsi
    2178:	cmp    ecx,0x2f
    217b:	ja     223f <quantum_unbounded_toffoli+0x1af>
    2181:	add    rcx,r8
    2184:	mov    eax,DWORD PTR [r13+0x4]
    2188:	mov    ecx,DWORD PTR [rcx]
    218a:	test   eax,eax
    218c:	jle    2204 <quantum_unbounded_toffoli+0x174>
    218e:	lea    r9d,[rax-0x1]
    2192:	mov    r10d,0x1
    2198:	xor    esi,esi
    219a:	add    r9,0x1
    219e:	shl    r10,cl
    21a1:	lea    r8d,[r12-0x1]
    21a6:	shl    r9,0x4
    21aa:	nop    WORD PTR [rax+rax*1+0x0]
    21b0:	test   r12d,r12d
    21b3:	jle    2249 <quantum_unbounded_toffoli+0x1b9>
    21b9:	mov    rax,QWORD PTR [r13+0x10]
    21bd:	mov    rdi,QWORD PTR [rax+rsi*1+0x8]
    21c2:	xor    eax,eax
    21c4:	jmp    21df <quantum_unbounded_toffoli+0x14f>
    21c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    21d0:	lea    edx,[rax+0x1]
    21d3:	lea    rcx,[rax+0x1]
    21d7:	cmp    rax,r8
    21da:	je     21eb <quantum_unbounded_toffoli+0x15b>
    21dc:	mov    rax,rcx
    21df:	mov    ecx,DWORD PTR [rbp+rax*4+0x0]
    21e3:	mov    edx,eax
    21e5:	bt     rdi,rcx
    21e9:	jb     21d0 <quantum_unbounded_toffoli+0x140>
    21eb:	cmp    r12d,edx
    21ee:	jne    21fb <quantum_unbounded_toffoli+0x16b>
    21f0:	mov    rax,QWORD PTR [r13+0x10]
    21f4:	add    rax,rsi
    21f7:	xor    QWORD PTR [rax+0x8],r10
    21fb:	add    rsi,0x10
    21ff:	cmp    rsi,r9
    2202:	jne    21b0 <quantum_unbounded_toffoli+0x120>
    2204:	mov    rdi,rbp
    2207:	neg    r12d
    220a:	call   11c0 <free@plt>
    220f:	movsxd rdi,r12d
    2212:	shl    rdi,0x2
    2216:	call   5140 <quantum_memman>
    221b:	mov    rdi,r13
    221e:	call   1b20 <quantum_decohere>
    2223:	mov    rax,QWORD PTR [rsp+0x18]
    2228:	xor    rax,QWORD PTR fs:0x28
    2231:	jne    225c <quantum_unbounded_toffoli+0x1cc>
    2233:	add    rsp,0x58
    2237:	pop    rbp
    2238:	pop    r12
    223a:	pop    r13
    223c:	pop    r14
    223e:	ret    
    223f:	mov    rcx,QWORD PTR [rsp+0x8]
    2244:	jmp    2184 <quantum_unbounded_toffoli+0xf4>
    2249:	xor    edx,edx
    224b:	jmp    21eb <quantum_unbounded_toffoli+0x15b>
    224d:	mov    r8,QWORD PTR [rsp+0x10]
    2252:	mov    ecx,0x10
    2257:	jmp    2181 <quantum_unbounded_toffoli+0xf1>
    225c:	call   1210 <__stack_chk_fail@plt>
    2261:	mov    edi,0x1
    2266:	mov    edx,r12d
    2269:	lea    rsi,[rip+0x7e10]        # a080 <_IO_stdin_used+0x80>
    2270:	xor    eax,eax
    2272:	call   12a0 <__printf_chk@plt>
    2277:	mov    edi,0x1
    227c:	call   12e0 <exit@plt>
    2281:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    228c:	nop    DWORD PTR [rax+0x0]

0000000000002290 <quantum_sigma_x>:
    2290:	endbr64 
    2294:	push   r12
    2296:	mov    r12d,edi
    2299:	push   rbp
    229a:	mov    rbp,rsi
    229d:	xor    esi,esi
    229f:	sub    rsp,0x18
    22a3:	mov    rax,QWORD PTR fs:0x28
    22ac:	mov    QWORD PTR [rsp+0x8],rax
    22b1:	xor    eax,eax
    22b3:	lea    rdi,[rsp+0x4]
    22b8:	call   77f0 <quantum_qec_get_status>
    22bd:	mov    eax,DWORD PTR [rsp+0x4]
    22c1:	test   eax,eax
    22c3:	je     22f0 <quantum_sigma_x+0x60>
    22c5:	mov    rsi,rbp
    22c8:	mov    edi,r12d
    22cb:	call   7af0 <quantum_sigma_x_ft>
    22d0:	mov    rax,QWORD PTR [rsp+0x8]
    22d5:	xor    rax,QWORD PTR fs:0x28
    22de:	jne    2346 <quantum_sigma_x+0xb6>
    22e0:	add    rsp,0x18
    22e4:	pop    rbp
    22e5:	pop    r12
    22e7:	ret    
    22e8:	nop    DWORD PTR [rax+rax*1+0x0]
    22f0:	xor    eax,eax
    22f2:	mov    esi,r12d
    22f5:	mov    edi,0x3
    22fa:	call   64a0 <quantum_objcode_put>
    22ff:	test   eax,eax
    2301:	jne    22d0 <quantum_sigma_x+0x40>
    2303:	mov    esi,DWORD PTR [rbp+0x4]
    2306:	test   esi,esi
    2308:	jle    233c <quantum_sigma_x+0xac>
    230a:	mov    ecx,r12d
    230d:	mov    edx,0x1
    2312:	mov    rdi,QWORD PTR [rbp+0x10]
    2316:	shl    rdx,cl
    2319:	lea    ecx,[rsi-0x1]
    231c:	shl    rcx,0x4
    2320:	lea    rax,[rdi+0x8]
    2324:	lea    rcx,[rdi+rcx*1+0x18]
    2329:	nop    DWORD PTR [rax+0x0]
    2330:	xor    QWORD PTR [rax],rdx
    2333:	add    rax,0x10
    2337:	cmp    rax,rcx
    233a:	jne    2330 <quantum_sigma_x+0xa0>
    233c:	mov    rdi,rbp
    233f:	call   1b20 <quantum_decohere>
    2344:	jmp    22d0 <quantum_sigma_x+0x40>
    2346:	call   1210 <__stack_chk_fail@plt>
    234b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002350 <quantum_sigma_y>:
    2350:	endbr64 
    2354:	push   r14
    2356:	xor    eax,eax
    2358:	mov    r14,rsi
    235b:	mov    esi,edi
    235d:	push   r13
    235f:	mov    r13d,edi
    2362:	mov    edi,0x4
    2367:	push   r12
    2369:	push   rbp
    236a:	push   rbx
    236b:	sub    rsp,0x10
    236f:	call   64a0 <quantum_objcode_put>
    2374:	test   eax,eax
    2376:	jne    2468 <quantum_sigma_y+0x118>
    237c:	mov    eax,DWORD PTR [r14+0x4]
    2380:	test   eax,eax
    2382:	jle    2450 <quantum_sigma_y+0x100>
    2388:	mov    rbx,QWORD PTR [r14+0x10]
    238c:	mov    ecx,r13d
    238f:	lea    r13d,[rax-0x1]
    2393:	mov    r12d,0x1
    2399:	shl    r13,0x4
    239d:	movss  xmm6,DWORD PTR [rip+0x7da3]        # a148 <_IO_stdin_used+0x148>
    23a5:	shl    r12,cl
    23a8:	pxor   xmm5,xmm5
    23ac:	lea    rbp,[rbx+0x10]
    23b0:	add    r13,rbp
    23b3:	jmp    23e9 <quantum_sigma_y+0x99>
    23b5:	nop    DWORD PTR [rax]
    23b8:	mulss  xmm2,xmm5
    23bc:	movaps xmm0,xmm1
    23bf:	mulss  xmm0,xmm5
    23c3:	subss  xmm2,xmm1
    23c7:	addss  xmm0,xmm4
    23cb:	ucomiss xmm2,xmm0
    23ce:	jp     2475 <quantum_sigma_y+0x125>
    23d4:	movss  DWORD PTR [rbx],xmm2
    23d8:	movss  DWORD PTR [rbx+0x4],xmm0
    23dd:	mov    rbx,rbp
    23e0:	cmp    rbp,r13
    23e3:	je     2450 <quantum_sigma_y+0x100>
    23e5:	add    rbp,0x10
    23e9:	mov    rax,QWORD PTR [rbx+0x8]
    23ed:	movss  xmm4,DWORD PTR [rbx]
    23f1:	movss  xmm1,DWORD PTR [rbx+0x4]
    23f6:	xor    rax,r12
    23f9:	movaps xmm2,xmm4
    23fc:	mov    QWORD PTR [rbx+0x8],rax
    2400:	test   r12,rax
    2403:	jne    23b8 <quantum_sigma_y+0x68>
    2405:	mulss  xmm2,xmm6
    2409:	movaps xmm0,xmm1
    240c:	mulss  xmm0,xmm6
    2410:	addss  xmm2,xmm1
    2414:	subss  xmm0,xmm4
    2418:	ucomiss xmm0,xmm2
    241b:	jnp    23d4 <quantum_sigma_y+0x84>
    241d:	movss  xmm3,DWORD PTR [rip+0x7d27]        # a14c <_IO_stdin_used+0x14c>
    2425:	movaps xmm2,xmm6
    2428:	movaps xmm0,xmm4
    242b:	call   8d40 <__mulsc3>
    2430:	movss  xmm6,DWORD PTR [rip+0x7d10]        # a148 <_IO_stdin_used+0x148>
    2438:	pxor   xmm5,xmm5
    243c:	movq   QWORD PTR [rsp],xmm0
    2441:	movss  xmm2,DWORD PTR [rsp]
    2446:	movss  xmm0,DWORD PTR [rsp+0x4]
    244c:	jmp    23d4 <quantum_sigma_y+0x84>
    244e:	xchg   ax,ax
    2450:	add    rsp,0x10
    2454:	mov    rdi,r14
    2457:	pop    rbx
    2458:	pop    rbp
    2459:	pop    r12
    245b:	pop    r13
    245d:	pop    r14
    245f:	jmp    1b20 <quantum_decohere>
    2464:	nop    DWORD PTR [rax+0x0]
    2468:	add    rsp,0x10
    246c:	pop    rbx
    246d:	pop    rbp
    246e:	pop    r12
    2470:	pop    r13
    2472:	pop    r14
    2474:	ret    
    2475:	movss  xmm3,DWORD PTR [rip+0x7b9b]        # a018 <_IO_stdin_used+0x18>
    247d:	movaps xmm2,xmm5
    2480:	movaps xmm0,xmm4
    2483:	call   8d40 <__mulsc3>
    2488:	movss  xmm6,DWORD PTR [rip+0x7cb8]        # a148 <_IO_stdin_used+0x148>
    2490:	pxor   xmm5,xmm5
    2494:	movq   QWORD PTR [rsp+0x8],xmm0
    249a:	movss  xmm2,DWORD PTR [rsp+0x8]
    24a0:	movss  xmm0,DWORD PTR [rsp+0xc]
    24a6:	jmp    23d4 <quantum_sigma_y+0x84>
    24ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024b0 <quantum_sigma_z>:
    24b0:	endbr64 
    24b4:	push   r12
    24b6:	xor    eax,eax
    24b8:	mov    r12d,edi
    24bb:	push   rbp
    24bc:	mov    rbp,rsi
    24bf:	mov    esi,edi
    24c1:	mov    edi,0x5
    24c6:	sub    rsp,0x8
    24ca:	call   64a0 <quantum_objcode_put>
    24cf:	test   eax,eax
    24d1:	jne    2548 <quantum_sigma_z+0x98>
    24d3:	mov    edx,DWORD PTR [rbp+0x4]
    24d6:	test   edx,edx
    24d8:	jle    2532 <quantum_sigma_z+0x82>
    24da:	mov    ecx,r12d
    24dd:	mov    rax,QWORD PTR [rbp+0x10]
    24e1:	mov    esi,0x1
    24e6:	movss  xmm2,DWORD PTR [rip+0x7b42]        # a030 <_IO_stdin_used+0x30>
    24ee:	shl    rsi,cl
    24f1:	lea    ecx,[rdx-0x1]
    24f4:	shl    rcx,0x4
    24f8:	lea    rdx,[rax+0x10]
    24fc:	add    rcx,rdx
    24ff:	jmp    250c <quantum_sigma_z+0x5c>
    2501:	nop    DWORD PTR [rax+0x0]
    2508:	add    rdx,0x10
    250c:	test   QWORD PTR [rax+0x8],rsi
    2510:	je     252a <quantum_sigma_z+0x7a>
    2512:	movss  xmm0,DWORD PTR [rax+0x4]
    2517:	movss  xmm1,DWORD PTR [rax]
    251b:	xorps  xmm0,xmm2
    251e:	xorps  xmm1,xmm2
    2521:	movss  DWORD PTR [rax],xmm1
    2525:	movss  DWORD PTR [rax+0x4],xmm0
    252a:	mov    rax,rdx
    252d:	cmp    rdx,rcx
    2530:	jne    2508 <quantum_sigma_z+0x58>
    2532:	add    rsp,0x8
    2536:	mov    rdi,rbp
    2539:	pop    rbp
    253a:	pop    r12
    253c:	jmp    1b20 <quantum_decohere>
    2541:	nop    DWORD PTR [rax+0x0]
    2548:	add    rsp,0x8
    254c:	pop    rbp
    254d:	pop    r12
    254f:	ret    

0000000000002550 <quantum_swaptheleads>:
    2550:	endbr64 
    2554:	push   r14
    2556:	push   r13
    2558:	mov    r13d,edi
    255b:	push   r12
    255d:	push   rbp
    255e:	push   rbx
    255f:	mov    rbx,rsi
    2562:	xor    esi,esi
    2564:	sub    rsp,0x10
    2568:	mov    rax,QWORD PTR fs:0x28
    2571:	mov    QWORD PTR [rsp+0x8],rax
    2576:	xor    eax,eax
    2578:	lea    rdi,[rsp+0x4]
    257d:	call   77f0 <quantum_qec_get_status>
    2582:	mov    edx,DWORD PTR [rsp+0x4]
    2586:	test   edx,edx
    2588:	jne    2650 <quantum_swaptheleads+0x100>
    258e:	mov    eax,DWORD PTR [rbx+0x4]
    2591:	test   eax,eax
    2593:	jle    262f <quantum_swaptheleads+0xdf>
    2599:	mov    rbp,0xffffffffffffffff
    25a0:	mov    ecx,r13d
    25a3:	lea    r12d,[r13+r13*1+0x0]
    25a8:	xor    r14d,r14d
    25ab:	shl    rbp,cl
    25ae:	not    ebp
    25b0:	xor    eax,eax
    25b2:	mov    esi,r13d
    25b5:	mov    edi,0xe
    25ba:	call   64a0 <quantum_objcode_put>
    25bf:	test   eax,eax
    25c1:	jne    262f <quantum_swaptheleads+0xdf>
    25c3:	mov    rdi,r14
    25c6:	mov    esi,ebp
    25c8:	shl    rdi,0x4
    25cc:	add    rdi,QWORD PTR [rbx+0x10]
    25d0:	mov    r8,QWORD PTR [rdi+0x8]
    25d4:	mov    r9d,r8d
    25d7:	and    esi,r8d
    25da:	test   r13d,r13d
    25dd:	jle    26a0 <quantum_swaptheleads+0x150>
    25e3:	mov    ecx,r13d
    25e6:	mov    r10d,0x1
    25ec:	nop    DWORD PTR [rax+0x0]
    25f0:	mov    rdx,r10
    25f3:	shl    rdx,cl
    25f6:	add    ecx,0x1
    25f9:	and    edx,r9d
    25fc:	add    eax,edx
    25fe:	cmp    r12d,ecx
    2601:	jne    25f0 <quantum_swaptheleads+0xa0>
    2603:	mov    ecx,r13d
    2606:	lea    edx,[rsi+rax*1]
    2609:	sar    eax,cl
    260b:	cdqe   
    260d:	mov    ecx,r13d
    2610:	movsxd rdx,edx
    2613:	add    r14,0x1
    2617:	shl    esi,cl
    2619:	movsxd rsi,esi
    261c:	add    rsi,r8
    261f:	add    rax,rsi
    2622:	sub    rax,rdx
    2625:	mov    QWORD PTR [rdi+0x8],rax
    2629:	cmp    DWORD PTR [rbx+0x4],r14d
    262d:	jg     25b0 <quantum_swaptheleads+0x60>
    262f:	mov    rax,QWORD PTR [rsp+0x8]
    2634:	xor    rax,QWORD PTR fs:0x28
    263d:	jne    26a9 <quantum_swaptheleads+0x159>
    263f:	add    rsp,0x10
    2643:	pop    rbx
    2644:	pop    rbp
    2645:	pop    r12
    2647:	pop    r13
    2649:	pop    r14
    264b:	ret    
    264c:	nop    DWORD PTR [rax+0x0]
    2650:	test   r13d,r13d
    2653:	jle    262f <quantum_swaptheleads+0xdf>
    2655:	xor    ebp,ebp
    2657:	nop    WORD PTR [rax+rax*1+0x0]
    2660:	lea    r12d,[r13+rbp*1+0x0]
    2665:	mov    edi,ebp
    2667:	mov    rdx,rbx
    266a:	mov    esi,r12d
    266d:	call   1ea0 <quantum_cnot>
    2672:	mov    esi,ebp
    2674:	mov    rdx,rbx
    2677:	mov    edi,r12d
    267a:	call   1ea0 <quantum_cnot>
    267f:	mov    edi,ebp
    2681:	mov    rdx,rbx
    2684:	mov    esi,r12d
    2687:	call   1ea0 <quantum_cnot>
    268c:	add    ebp,0x1
    268f:	cmp    r13d,ebp
    2692:	jne    2660 <quantum_swaptheleads+0x110>
    2694:	jmp    262f <quantum_swaptheleads+0xdf>
    2696:	nop    WORD PTR cs:[rax+rax*1+0x0]
    26a0:	mov    edx,esi
    26a2:	xor    eax,eax
    26a4:	jmp    260d <quantum_swaptheleads+0xbd>
    26a9:	call   1210 <__stack_chk_fail@plt>
    26ae:	xchg   ax,ax

00000000000026b0 <quantum_swaptheleads_omuln_controlled>:
    26b0:	endbr64 
    26b4:	test   esi,esi
    26b6:	jle    2730 <quantum_swaptheleads_omuln_controlled+0x80>
    26b8:	push   r15
    26ba:	push   r14
    26bc:	lea    r14d,[rsi+rsi*1]
    26c0:	push   r13
    26c2:	mov    r15d,r14d
    26c5:	mov    r13,rdx
    26c8:	push   r12
    26ca:	sub    r15d,esi
    26cd:	push   rbp
    26ce:	add    r15d,0x2
    26d2:	mov    ebp,edi
    26d4:	push   rbx
    26d5:	mov    ebx,esi
    26d7:	sub    rsp,0x8
    26db:	nop    DWORD PTR [rax+rax*1+0x0]
    26e0:	lea    r12d,[r15+rbx*1]
    26e4:	mov    esi,ebx
    26e6:	mov    rcx,r13
    26e9:	mov    edi,ebp
    26eb:	mov    edx,r12d
    26ee:	call   1f80 <quantum_toffoli>
    26f3:	mov    edx,ebx
    26f5:	mov    rcx,r13
    26f8:	mov    esi,r12d
    26fb:	mov    edi,ebp
    26fd:	call   1f80 <quantum_toffoli>
    2702:	mov    esi,ebx
    2704:	mov    rcx,r13
    2707:	mov    edx,r12d
    270a:	mov    edi,ebp
    270c:	add    ebx,0x1
    270f:	call   1f80 <quantum_toffoli>
    2714:	cmp    ebx,r14d
    2717:	jne    26e0 <quantum_swaptheleads_omuln_controlled+0x30>
    2719:	add    rsp,0x8
    271d:	pop    rbx
    271e:	pop    rbp
    271f:	pop    r12
    2721:	pop    r13
    2723:	pop    r14
    2725:	pop    r15
    2727:	ret    
    2728:	nop    DWORD PTR [rax+rax*1+0x0]
    2730:	ret    
    2731:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    273c:	nop    DWORD PTR [rax+0x0]

0000000000002740 <quantum_gate1>:
    2740:	endbr64 
    2744:	movabs rax,0x200000002
    274e:	push   r15
    2750:	push   r14
    2752:	push   r13
    2754:	push   r12
    2756:	push   rbp
    2757:	push   rbx
    2758:	sub    rsp,0xc8
    275f:	mov    DWORD PTR [rsp+0x10],edi
    2763:	cmp    rsi,rax
    2766:	jne    367d <quantum_gate1+0xf3d>
    276c:	mov    r14,rcx
    276f:	mov    ecx,DWORD PTR [rcx+0x8]
    2772:	mov    eax,0x1
    2777:	mov    r13,rdx
    277a:	shl    eax,cl
    277c:	test   eax,eax
    277e:	jle    27a7 <quantum_gate1+0x67>
    2780:	mov    rdi,QWORD PTR [r14+0x18]
    2784:	xor    eax,eax
    2786:	mov    esi,0x1
    278b:	nop    DWORD PTR [rax+rax*1+0x0]
    2790:	mov    DWORD PTR [rdi+rax*4],0x0
    2797:	mov    ecx,DWORD PTR [r14+0x8]
    279b:	mov    edx,esi
    279d:	add    rax,0x1
    27a1:	shl    edx,cl
    27a3:	cmp    edx,eax
    27a5:	jg     2790 <quantum_gate1+0x50>
    27a7:	mov    r9d,DWORD PTR [r14+0x4]
    27ab:	mov    r12,QWORD PTR [r14+0x10]
    27af:	test   r9d,r9d
    27b2:	jle    314e <quantum_gate1+0xa0e>
    27b8:	mov    r8,QWORD PTR [r14+0x18]
    27bc:	lea    rdi,[r12+0x8]
    27c1:	xor    esi,esi
    27c3:	mov    ebx,0x20
    27c8:	mov    r11d,0x1
    27ce:	lea    r10,[r8+0x4]
    27d2:	nop    WORD PTR [rax+rax*1+0x0]
    27d8:	mov    rcx,QWORD PTR [rdi]
    27db:	mov    eax,DWORD PTR [r14+0x8]
    27df:	mov    r15d,r11d
    27e2:	mov    rdx,rcx
    27e5:	shr    rdx,0x20
    27e9:	xor    edx,ecx
    27eb:	mov    ecx,ebx
    27ed:	imul   edx,edx,0x9e370001
    27f3:	sub    ecx,eax
    27f5:	shr    edx,cl
    27f7:	mov    ecx,eax
    27f9:	shl    r15d,cl
    27fc:	lea    r9d,[r15-0x1]
    2800:	mov    r15d,r9d
    2803:	movsxd rcx,edx
    2806:	sub    r15d,edx
    2809:	lea    rax,[r8+rcx*4]
    280d:	mov    rdx,r15
    2810:	add    rdx,rcx
    2813:	lea    rcx,[r10+rdx*4]
    2817:	jmp    282b <quantum_gate1+0xeb>
    2819:	nop    DWORD PTR [rax+0x0]
    2820:	add    rax,0x4
    2824:	xor    edx,edx
    2826:	cmp    rcx,rax
    2829:	je     2800 <quantum_gate1+0xc0>
    282b:	mov    ebp,DWORD PTR [rax]
    282d:	test   ebp,ebp
    282f:	jne    2820 <quantum_gate1+0xe0>
    2831:	add    esi,0x1
    2834:	add    rdi,0x10
    2838:	mov    DWORD PTR [rax],esi
    283a:	mov    r9d,DWORD PTR [r14+0x4]
    283e:	cmp    r9d,esi
    2841:	jg     27d8 <quantum_gate1+0x98>
    2843:	test   r9d,r9d
    2846:	jle    314e <quantum_gate1+0xa0e>
    284c:	movzx  ecx,BYTE PTR [rsp+0x10]
    2851:	mov    ebp,0x1
    2856:	mov    r15d,0x20
    285c:	mov    r10,QWORD PTR [r14+0x18]
    2860:	mov    esi,r15d
    2863:	mov    eax,0x1
    2868:	lea    edx,[r9-0x1]
    286c:	mov    rdi,QWORD PTR [r14+0x10]
    2870:	shl    rbp,cl
    2873:	mov    ecx,DWORD PTR [r14+0x8]
    2877:	mov    DWORD PTR [rsp+0x1c],r9d
    287c:	shl    rdx,0x4
    2880:	mov    DWORD PTR [rsp+0x24],0x0
    2888:	lea    r15,[rdx+0x18]
    288c:	mov    r8d,0x8
    2892:	movsd  xmm4,QWORD PTR [rip+0x78b6]        # a150 <_IO_stdin_used+0x150>
    289a:	shl    eax,cl
    289c:	sub    esi,ecx
    289e:	lea    r11,[r10+0x4]
    28a2:	lea    ebx,[rax-0x1]
    28a5:	mov    ecx,esi
    28a7:	nop    WORD PTR [rax+rax*1+0x0]
    28b0:	mov    rsi,QWORD PTR [r12+r8*1]
    28b4:	xor    rsi,rbp
    28b7:	mov    rax,rsi
    28ba:	shr    rax,0x20
    28be:	xor    eax,esi
    28c0:	imul   eax,eax,0x9e370001
    28c6:	shr    eax,cl
    28c8:	movsxd r9,eax
    28cb:	lea    rdx,[r10+r9*4]
    28cf:	mov    QWORD PTR [rsp+0x8],rdx
    28d4:	mov    edx,ebx
    28d6:	sub    edx,eax
    28d8:	mov    rax,rdx
    28db:	mov    rdx,QWORD PTR [rsp+0x8]
    28e0:	add    rax,r9
    28e3:	lea    r9,[r11+rax*4]
    28e7:	jmp    2908 <quantum_gate1+0x1c8>
    28e9:	nop    DWORD PTR [rax+0x0]
    28f0:	shl    rax,0x4
    28f4:	cmp    rsi,QWORD PTR [rdi+rax*1-0x8]
    28f9:	je     2962 <quantum_gate1+0x222>
    28fb:	add    rdx,0x4
    28ff:	cmp    r9,rdx
    2902:	je     2fb8 <quantum_gate1+0x878>
    2908:	movsxd rax,DWORD PTR [rdx]
    290b:	test   eax,eax
    290d:	jne    28f0 <quantum_gate1+0x1b0>
    290f:	movss  xmm2,DWORD PTR [r13+0xc]
    2915:	movss  xmm0,DWORD PTR [r13+0x8]
    291b:	movss  xmm1,DWORD PTR [r13+0x10]
    2921:	movss  xmm3,DWORD PTR [r13+0x14]
    2927:	mulss  xmm0,xmm0
    292b:	mulss  xmm2,xmm2
    292f:	mulss  xmm1,xmm1
    2933:	mulss  xmm3,xmm3
    2937:	addss  xmm0,xmm2
    293b:	addss  xmm1,xmm3
    293f:	cvtss2sd xmm0,xmm0
    2943:	comisd xmm0,xmm4
    2947:	cvtss2sd xmm1,xmm1
    294b:	jbe    3108 <quantum_gate1+0x9c8>
    2951:	test   QWORD PTR [rdi+r8*1],rbp
    2955:	jne    295d <quantum_gate1+0x21d>
    2957:	comisd xmm1,xmm4
    295b:	jbe    2962 <quantum_gate1+0x222>
    295d:	add    DWORD PTR [rsp+0x24],0x1
    2962:	add    r8,0x10
    2966:	cmp    r15,r8
    2969:	jne    28b0 <quantum_gate1+0x170>
    296f:	mov    r9d,DWORD PTR [rsp+0x1c]
    2974:	mov    eax,DWORD PTR [rsp+0x24]
    2978:	mov    rdi,r12
    297b:	lea    esi,[r9+rax*1]
    297f:	movsxd rsi,esi
    2982:	shl    rsi,0x4
    2986:	call   1290 <realloc@plt>
    298b:	mov    QWORD PTR [r14+0x10],rax
    298f:	test   rax,rax
    2992:	je     3188 <quantum_gate1+0xa48>
    2998:	movsxd rbx,DWORD PTR [rsp+0x24]
    299d:	mov    rdi,rbx
    29a0:	shl    rdi,0x4
    29a4:	call   5140 <quantum_memman>
    29a9:	test   ebx,ebx
    29ab:	je     316f <quantum_gate1+0xa2f>
    29b1:	movsxd rsi,DWORD PTR [r14+0x4]
    29b5:	lea    edx,[rbx-0x1]
    29b8:	mov    rcx,QWORD PTR [r14+0x10]
    29bc:	movss  xmm1,DWORD PTR [rip+0x776c]        # a130 <_IO_stdin_used+0x130>
    29c4:	movss  xmm0,DWORD PTR [rip+0x7768]        # a134 <_IO_stdin_used+0x134>
    29cc:	mov    rax,rsi
    29cf:	add    rdx,rsi
    29d2:	mov    rbp,rsi
    29d5:	shl    rax,0x4
    29d9:	shl    rdx,0x4
    29dd:	add    rax,rcx
    29e0:	lea    rdx,[rcx+rdx*1+0x10]
    29e5:	nop    DWORD PTR [rax]
    29e8:	mov    QWORD PTR [rax+0x8],0x0
    29f0:	add    rax,0x10
    29f4:	movss  DWORD PTR [rax-0x10],xmm1
    29f9:	movss  DWORD PTR [rax-0xc],xmm0
    29fe:	cmp    rdx,rax
    2a01:	jne    29e8 <quantum_gate1+0x2a8>
    2a03:	mov    eax,DWORD PTR [rsp+0x24]
    2a07:	mov    esi,0x1
    2a0c:	lea    r12d,[rax+rbp*1]
    2a10:	movsxd r12,r12d
    2a13:	mov    rdi,r12
    2a16:	call   1250 <calloc@plt>
    2a1b:	test   rax,rax
    2a1e:	je     32f2 <quantum_gate1+0xbb2>
    2a24:	movsxd rdi,ebp
    2a27:	mov    QWORD PTR [rsp+0x8],rax
    2a2c:	add    rdi,rbx
    2a2f:	call   5140 <quantum_memman>
    2a34:	mov    eax,DWORD PTR [r14+0x4]
    2a38:	mov    ecx,DWORD PTR [r14]
    2a3b:	mov    r8,QWORD PTR [rsp+0x8]
    2a40:	mov    DWORD PTR [rsp+0x38],eax
    2a44:	mov    eax,0x1
    2a49:	shl    rax,cl
    2a4c:	test   rax,rax
    2a4f:	js     3130 <quantum_gate1+0x9f0>
    2a55:	pxor   xmm0,xmm0
    2a59:	cvtsi2sd xmm0,rax
    2a5e:	movsd  xmm9,QWORD PTR [rip+0x75a9]        # a010 <_IO_stdin_used+0x10>
    2a67:	mov    edx,DWORD PTR [rsp+0x38]
    2a6b:	divsd  xmm9,xmm0
    2a70:	divsd  xmm9,QWORD PTR [rip+0x76df]        # a158 <_IO_stdin_used+0x158>
    2a79:	cvtsd2ss xmm9,xmm9
    2a7e:	test   edx,edx
    2a80:	jle    2cef <quantum_gate1+0x5af>
    2a86:	movzx  ecx,BYTE PTR [rsp+0x10]
    2a8b:	mov    eax,0x1
    2a90:	xor    r12d,r12d
    2a93:	pxor   xmm10,xmm10
    2a98:	movsd  xmm11,QWORD PTR [rip+0x76af]        # a150 <_IO_stdin_used+0x150>
    2aa1:	shl    rax,cl
    2aa4:	mov    QWORD PTR [rsp+0x10],rax
    2aa9:	movapd xmm12,xmm11
    2aae:	mov    DWORD PTR [rsp+0x1c],eax
    2ab2:	mov    eax,DWORD PTR [rsp+0x38]
    2ab6:	mov    DWORD PTR [rsp+0x20],eax
    2aba:	lea    r10d,[rax-0x1]
    2abe:	mov    rax,r14
    2ac1:	mov    r14,r8
    2ac4:	mov    r8,rax
    2ac7:	jmp    2ae1 <quantum_gate1+0x3a1>
    2ac9:	nop    DWORD PTR [rax+0x0]
    2ad0:	lea    rax,[r12+0x1]
    2ad5:	cmp    r10,r12
    2ad8:	je     2ce6 <quantum_gate1+0x5a6>
    2ade:	mov    r12,rax
    2ae1:	cmp    BYTE PTR [r14+r12*1],0x0
    2ae6:	jne    2ad0 <quantum_gate1+0x390>
    2ae8:	mov    rbp,QWORD PTR [r8+0x10]
    2aec:	mov    r15,r12
    2aef:	mov    eax,DWORD PTR [rsp+0x1c]
    2af3:	mov    ecx,0x20
    2af8:	shl    r15,0x4
    2afc:	mov    esi,DWORD PTR [r8+0x8]
    2b00:	mov    rdi,QWORD PTR [r8+0x18]
    2b04:	add    r15,rbp
    2b07:	mov    rbx,QWORD PTR [r15+0x8]
    2b0b:	sub    ecx,esi
    2b0d:	lea    r9,[rdi+0x4]
    2b11:	and    eax,ebx
    2b13:	xor    rbx,QWORD PTR [rsp+0x10]
    2b18:	mov    rdx,rbx
    2b1b:	mov    DWORD PTR [rsp+0x8],eax
    2b1f:	mov    eax,0x1
    2b24:	shr    rdx,0x20
    2b28:	xor    edx,ebx
    2b2a:	imul   edx,edx,0x9e370001
    2b30:	shr    edx,cl
    2b32:	mov    ecx,esi
    2b34:	shl    eax,cl
    2b36:	lea    r11d,[rax-0x1]
    2b3a:	mov    esi,r11d
    2b3d:	movsxd rcx,edx
    2b40:	sub    esi,edx
    2b42:	lea    rax,[rdi+rcx*4]
    2b46:	mov    rdx,rsi
    2b49:	add    rdx,rcx
    2b4c:	lea    rsi,[r9+rdx*4]
    2b50:	jmp    2b75 <quantum_gate1+0x435>
    2b52:	nop    WORD PTR [rax+rax*1+0x0]
    2b58:	movsxd rdx,ecx
    2b5b:	shl    rdx,0x4
    2b5f:	cmp    rbx,QWORD PTR [rbp+rdx*1-0x8]
    2b64:	je     2de0 <quantum_gate1+0x6a0>
    2b6a:	add    rax,0x4
    2b6e:	xor    edx,edx
    2b70:	cmp    rsi,rax
    2b73:	je     2b3a <quantum_gate1+0x3fa>
    2b75:	mov    ecx,DWORD PTR [rax]
    2b77:	test   ecx,ecx
    2b79:	jne    2b58 <quantum_gate1+0x418>
    2b7b:	movss  xmm4,DWORD PTR [r15]
    2b80:	movss  xmm5,DWORD PTR [r15+0x4]
    2b86:	movaps xmm7,xmm10
    2b8a:	movaps xmm6,xmm10
    2b8e:	mov    ecx,0xffffffff
    2b93:	mov    eax,DWORD PTR [rsp+0x8]
    2b97:	test   eax,eax
    2b99:	je     2e13 <quantum_gate1+0x6d3>
    2b9f:	movss  xmm0,DWORD PTR [r13+0x10]
    2ba5:	movss  xmm1,DWORD PTR [r13+0x14]
    2bab:	movaps xmm13,xmm6
    2baf:	movaps xmm2,xmm7
    2bb2:	movaps xmm8,xmm7
    2bb6:	mulss  xmm2,xmm1
    2bba:	mulss  xmm13,xmm0
    2bbf:	mulss  xmm8,xmm0
    2bc4:	subss  xmm13,xmm2
    2bc9:	movaps xmm2,xmm6
    2bcc:	mulss  xmm2,xmm1
    2bd0:	addss  xmm8,xmm2
    2bd5:	ucomiss xmm13,xmm8
    2bd9:	jp     3255 <quantum_gate1+0xb15>
    2bdf:	movss  xmm14,DWORD PTR [r13+0x18]
    2be5:	movaps xmm2,xmm4
    2be8:	movaps xmm0,xmm5
    2beb:	movaps xmm3,xmm4
    2bee:	movss  xmm1,DWORD PTR [r13+0x1c]
    2bf4:	mulss  xmm2,xmm14
    2bf9:	mulss  xmm0,xmm1
    2bfd:	mulss  xmm3,xmm1
    2c01:	subss  xmm2,xmm0
    2c05:	movaps xmm0,xmm5
    2c08:	mulss  xmm0,xmm14
    2c0d:	addss  xmm0,xmm3
    2c11:	ucomiss xmm2,xmm0
    2c14:	jp     3312 <quantum_gate1+0xbd2>
    2c1a:	addss  xmm13,xmm2
    2c1f:	addss  xmm8,xmm0
    2c24:	movss  DWORD PTR [r15],xmm13
    2c29:	movss  DWORD PTR [r15+0x4],xmm8
    2c2f:	test   ecx,ecx
    2c31:	js     2fc0 <quantum_gate1+0x880>
    2c37:	movss  xmm0,DWORD PTR [r13+0x0]
    2c3d:	movss  xmm1,DWORD PTR [r13+0x4]
    2c43:	movaps xmm13,xmm6
    2c47:	movaps xmm2,xmm7
    2c4a:	movaps xmm8,xmm7
    2c4e:	mulss  xmm2,xmm1
    2c52:	mulss  xmm13,xmm0
    2c57:	mulss  xmm8,xmm0
    2c5c:	subss  xmm13,xmm2
    2c61:	movaps xmm2,xmm6
    2c64:	mulss  xmm2,xmm1
    2c68:	addss  xmm8,xmm2
    2c6d:	ucomiss xmm13,xmm8
    2c71:	jp     31ad <quantum_gate1+0xa6d>
    2c77:	movss  xmm6,DWORD PTR [r13+0x8]
    2c7d:	movaps xmm2,xmm4
    2c80:	movaps xmm0,xmm5
    2c83:	movaps xmm3,xmm4
    2c86:	movss  xmm1,DWORD PTR [r13+0xc]
    2c8c:	mulss  xmm2,xmm6
    2c90:	mulss  xmm0,xmm1
    2c94:	mulss  xmm3,xmm1
    2c98:	subss  xmm2,xmm0
    2c9c:	movaps xmm0,xmm5
    2c9f:	mulss  xmm0,xmm6
    2ca3:	addss  xmm0,xmm3
    2ca7:	ucomiss xmm2,xmm0
    2caa:	jp     3538 <quantum_gate1+0xdf8>
    2cb0:	movsxd rcx,ecx
    2cb3:	addss  xmm13,xmm2
    2cb8:	addss  xmm8,xmm0
    2cbd:	mov    rax,rcx
    2cc0:	shl    rax,0x4
    2cc4:	add    rbp,rax
    2cc7:	lea    rax,[r12+0x1]
    2ccc:	movss  DWORD PTR [rbp+0x0],xmm13
    2cd2:	movss  DWORD PTR [rbp+0x4],xmm8
    2cd8:	mov    BYTE PTR [r14+rcx*1],0x1
    2cdd:	cmp    r10,r12
    2ce0:	jne    2ade <quantum_gate1+0x39e>
    2ce6:	mov    rax,r8
    2ce9:	mov    r8,r14
    2cec:	mov    r14,rax
    2cef:	mov    ebx,DWORD PTR [rsp+0x38]
    2cf3:	add    ebx,DWORD PTR [rsp+0x24]
    2cf7:	mov    rdi,r8
    2cfa:	movss  DWORD PTR [rsp+0x8],xmm9
    2d01:	mov    DWORD PTR [r14+0x4],ebx
    2d05:	neg    ebx
    2d07:	call   11c0 <free@plt>
    2d0c:	movsxd rdi,ebx
    2d0f:	call   5140 <quantum_memman>
    2d14:	mov    esi,DWORD PTR [r14+0x4]
    2d18:	movss  xmm9,DWORD PTR [rsp+0x8]
    2d1f:	test   esi,esi
    2d21:	jle    2dc6 <quantum_gate1+0x686>
    2d27:	mov    rdi,QWORD PTR [r14+0x10]
    2d2b:	xor    ebx,ebx
    2d2d:	xor    edx,edx
    2d2f:	mov    rax,rdi
    2d32:	jmp    2d46 <quantum_gate1+0x606>
    2d34:	nop    DWORD PTR [rax+0x0]
    2d38:	add    ebx,0x1
    2d3b:	add    edx,0x1
    2d3e:	add    rax,0x10
    2d42:	cmp    edx,esi
    2d44:	je     2d95 <quantum_gate1+0x655>
    2d46:	movss  xmm1,DWORD PTR [rax+0x4]
    2d4b:	movss  xmm2,DWORD PTR [rax]
    2d4f:	movaps xmm3,xmm1
    2d52:	movaps xmm0,xmm2
    2d55:	mulss  xmm0,xmm2
    2d59:	mulss  xmm3,xmm1
    2d5d:	addss  xmm0,xmm3
    2d61:	comiss xmm9,xmm0
    2d65:	ja     2d38 <quantum_gate1+0x5f8>
    2d67:	test   ebx,ebx
    2d69:	je     2d3b <quantum_gate1+0x5fb>
    2d6b:	mov    ecx,edx
    2d6d:	mov    r8,QWORD PTR [rax+0x8]
    2d71:	add    edx,0x1
    2d74:	add    rax,0x10
    2d78:	sub    ecx,ebx
    2d7a:	movsxd rcx,ecx
    2d7d:	shl    rcx,0x4
    2d81:	add    rcx,rdi
    2d84:	mov    QWORD PTR [rcx+0x8],r8
    2d88:	movss  DWORD PTR [rcx],xmm2
    2d8c:	movss  DWORD PTR [rcx+0x4],xmm1
    2d91:	cmp    edx,esi
    2d93:	jne    2d46 <quantum_gate1+0x606>
    2d95:	test   ebx,ebx
    2d97:	je     2dc6 <quantum_gate1+0x686>
    2d99:	sub    edx,ebx
    2d9b:	mov    DWORD PTR [r14+0x4],edx
    2d9f:	movsxd rsi,edx
    2da2:	shl    rsi,0x4
    2da6:	call   1290 <realloc@plt>
    2dab:	mov    QWORD PTR [r14+0x10],rax
    2daf:	test   rax,rax
    2db2:	je     3232 <quantum_gate1+0xaf2>
    2db8:	neg    ebx
    2dba:	movsxd rdi,ebx
    2dbd:	shl    rdi,0x4
    2dc1:	call   5140 <quantum_memman>
    2dc6:	add    rsp,0xc8
    2dcd:	mov    rdi,r14
    2dd0:	pop    rbx
    2dd1:	pop    rbp
    2dd2:	pop    r12
    2dd4:	pop    r13
    2dd6:	pop    r14
    2dd8:	pop    r15
    2dda:	jmp    1b20 <quantum_decohere>
    2ddf:	nop
    2de0:	movss  xmm4,DWORD PTR [r15]
    2de5:	movss  xmm5,DWORD PTR [r15+0x4]
    2deb:	sub    ecx,0x1
    2dee:	js     3529 <quantum_gate1+0xde9>
    2df4:	movsxd rax,ecx
    2df7:	shl    rax,0x4
    2dfb:	add    rax,rbp
    2dfe:	movss  xmm6,DWORD PTR [rax]
    2e02:	movss  xmm7,DWORD PTR [rax+0x4]
    2e07:	mov    eax,DWORD PTR [rsp+0x8]
    2e0b:	test   eax,eax
    2e0d:	jne    2b9f <quantum_gate1+0x45f>
    2e13:	movss  xmm1,DWORD PTR [r13+0x4]
    2e19:	movss  xmm14,DWORD PTR [r13+0x0]
    2e1f:	movaps xmm0,xmm4
    2e22:	movaps xmm8,xmm4
    2e26:	mulss  xmm0,xmm14
    2e2b:	movaps xmm2,xmm1
    2e2e:	mulss  xmm2,xmm5
    2e32:	mulss  xmm8,xmm1
    2e37:	subss  xmm0,xmm2
    2e3b:	movaps xmm13,xmm0
    2e3f:	movaps xmm0,xmm14
    2e43:	mulss  xmm0,xmm5
    2e47:	addss  xmm8,xmm0
    2e4c:	ucomiss xmm13,xmm8
    2e50:	jp     3488 <quantum_gate1+0xd48>
    2e56:	movss  xmm14,DWORD PTR [r13+0x8]
    2e5c:	movaps xmm0,xmm6
    2e5f:	movaps xmm2,xmm7
    2e62:	movaps xmm3,xmm7
    2e65:	movss  xmm1,DWORD PTR [r13+0xc]
    2e6b:	mulss  xmm0,xmm14
    2e70:	mulss  xmm2,xmm1
    2e74:	mulss  xmm3,xmm14
    2e79:	subss  xmm0,xmm2
    2e7d:	movaps xmm2,xmm6
    2e80:	mulss  xmm2,xmm1
    2e84:	addss  xmm2,xmm3
    2e88:	ucomiss xmm2,xmm0
    2e8b:	jp     33cd <quantum_gate1+0xc8d>
    2e91:	addss  xmm0,xmm13
    2e96:	addss  xmm8,xmm2
    2e9b:	movss  DWORD PTR [r15],xmm0
    2ea0:	movss  DWORD PTR [r15+0x4],xmm8
    2ea6:	test   ecx,ecx
    2ea8:	js     3040 <quantum_gate1+0x900>
    2eae:	movss  xmm1,DWORD PTR [r13+0x14]
    2eb4:	movss  xmm0,DWORD PTR [r13+0x10]
    2eba:	movaps xmm13,xmm4
    2ebe:	movaps xmm8,xmm4
    2ec2:	mulss  xmm13,xmm0
    2ec7:	movaps xmm2,xmm1
    2eca:	mulss  xmm2,xmm5
    2ece:	mulss  xmm8,xmm1
    2ed3:	subss  xmm13,xmm2
    2ed8:	movaps xmm2,xmm0
    2edb:	mulss  xmm2,xmm5
    2edf:	addss  xmm8,xmm2
    2ee4:	ucomiss xmm13,xmm8
    2ee8:	jp     35c2 <quantum_gate1+0xe82>
    2eee:	movss  xmm4,DWORD PTR [r13+0x18]
    2ef4:	movaps xmm2,xmm6
    2ef7:	movaps xmm0,xmm7
    2efa:	movaps xmm3,xmm6
    2efd:	movss  xmm1,DWORD PTR [r13+0x1c]
    2f03:	mulss  xmm2,xmm4
    2f07:	mulss  xmm0,xmm1
    2f0b:	mulss  xmm3,xmm1
    2f0f:	subss  xmm2,xmm0
    2f13:	movaps xmm0,xmm7
    2f16:	mulss  xmm0,xmm4
    2f1a:	addss  xmm0,xmm3
    2f1e:	ucomiss xmm2,xmm0
    2f21:	jnp    2cb0 <quantum_gate1+0x570>
    2f27:	movaps xmm0,xmm4
    2f2a:	movaps xmm2,xmm6
    2f2d:	movaps xmm3,xmm7
    2f30:	mov    QWORD PTR [rsp+0x48],r8
    2f35:	mov    QWORD PTR [rsp+0x40],r10
    2f3a:	mov    DWORD PTR [rsp+0x28],ecx
    2f3e:	movss  DWORD PTR [rsp+0x3c],xmm9
    2f45:	movss  DWORD PTR [rsp+0x30],xmm8
    2f4c:	movss  DWORD PTR [rsp+0x8],xmm13
    2f53:	call   8d40 <__mulsc3>
    2f58:	mov    rax,QWORD PTR [rip+0x71f1]        # a150 <_IO_stdin_used+0x150>
    2f5f:	mov    ecx,DWORD PTR [rsp+0x28]
    2f63:	pxor   xmm10,xmm10
    2f68:	movq   QWORD PTR [rsp+0x80],xmm0
    2f71:	mov    r8,QWORD PTR [rsp+0x48]
    2f76:	movss  xmm2,DWORD PTR [rsp+0x80]
    2f7f:	mov    r10,QWORD PTR [rsp+0x40]
    2f84:	movss  xmm9,DWORD PTR [rsp+0x3c]
    2f8b:	movq   xmm12,rax
    2f90:	movq   xmm11,rax
    2f95:	movss  xmm0,DWORD PTR [rsp+0x84]
    2f9e:	movss  xmm8,DWORD PTR [rsp+0x30]
    2fa5:	movss  xmm13,DWORD PTR [rsp+0x8]
    2fac:	jmp    2cb0 <quantum_gate1+0x570>
    2fb1:	nop    DWORD PTR [rax+0x0]
    2fb8:	xor    eax,eax
    2fba:	jmp    28c8 <quantum_gate1+0x188>
    2fbf:	nop
    2fc0:	movss  xmm1,DWORD PTR [r13+0xc]
    2fc6:	movss  xmm6,DWORD PTR [r13+0x8]
    2fcc:	movaps xmm2,xmm1
    2fcf:	movaps xmm0,xmm6
    2fd2:	mulss  xmm0,xmm6
    2fd6:	mulss  xmm2,xmm1
    2fda:	addss  xmm0,xmm2
    2fde:	cvtss2sd xmm0,xmm0
    2fe2:	comisd xmm12,xmm0
    2fe7:	ja     2ce6 <quantum_gate1+0x5a6>
    2fed:	movaps xmm0,xmm5
    2ff0:	movaps xmm2,xmm4
    2ff3:	movaps xmm3,xmm4
    2ff6:	movsxd rax,DWORD PTR [rsp+0x20]
    2ffb:	mulss  xmm0,xmm1
    2fff:	mulss  xmm2,xmm6
    3003:	shl    rax,0x4
    3007:	mulss  xmm3,xmm1
    300b:	add    rbp,rax
    300e:	mov    QWORD PTR [rbp+0x8],rbx
    3012:	subss  xmm2,xmm0
    3016:	movaps xmm0,xmm5
    3019:	mulss  xmm0,xmm6
    301d:	addss  xmm0,xmm3
    3021:	ucomiss xmm2,xmm0
    3024:	jp     3647 <quantum_gate1+0xf07>
    302a:	movss  DWORD PTR [rbp+0x0],xmm2
    302f:	movss  DWORD PTR [rbp+0x4],xmm0
    3034:	add    DWORD PTR [rsp+0x20],0x1
    3039:	jmp    2ad0 <quantum_gate1+0x390>
    303e:	xchg   ax,ax
    3040:	movss  xmm1,DWORD PTR [r13+0x14]
    3046:	movss  xmm6,DWORD PTR [r13+0x10]
    304c:	movaps xmm3,xmm1
    304f:	movaps xmm0,xmm6
    3052:	mulss  xmm3,xmm1
    3056:	mulss  xmm0,xmm6
    305a:	addss  xmm0,xmm3
    305e:	cvtss2sd xmm0,xmm0
    3062:	comisd xmm11,xmm0
    3067:	ja     2ce6 <quantum_gate1+0x5a6>
    306d:	movaps xmm0,xmm5
    3070:	movaps xmm2,xmm4
    3073:	movaps xmm3,xmm4
    3076:	movsxd rax,DWORD PTR [rsp+0x20]
    307b:	mulss  xmm0,xmm1
    307f:	mulss  xmm2,xmm6
    3083:	shl    rax,0x4
    3087:	mulss  xmm3,xmm1
    308b:	add    rbp,rax
    308e:	mov    QWORD PTR [rbp+0x8],rbx
    3092:	subss  xmm2,xmm0
    3096:	movaps xmm0,xmm5
    3099:	mulss  xmm0,xmm6
    309d:	addss  xmm0,xmm3
    30a1:	ucomiss xmm2,xmm0
    30a4:	jnp    302a <quantum_gate1+0x8ea>
    30a6:	movaps xmm0,xmm6
    30a9:	movaps xmm2,xmm4
    30ac:	movaps xmm3,xmm5
    30af:	mov    QWORD PTR [rsp+0x30],r8
    30b4:	mov    QWORD PTR [rsp+0x28],r10
    30b9:	movss  DWORD PTR [rsp+0x8],xmm9
    30c0:	call   8d40 <__mulsc3>
    30c5:	movq   QWORD PTR [rsp+0x70],xmm0
    30cb:	movss  xmm2,DWORD PTR [rsp+0x70]
    30d1:	movss  xmm0,DWORD PTR [rsp+0x74]
    30d7:	mov    r8,QWORD PTR [rsp+0x30]
    30dc:	mov    rax,QWORD PTR [rip+0x706d]        # a150 <_IO_stdin_used+0x150>
    30e3:	pxor   xmm10,xmm10
    30e8:	mov    r10,QWORD PTR [rsp+0x28]
    30ed:	movss  xmm9,DWORD PTR [rsp+0x8]
    30f4:	movq   xmm12,rax
    30f9:	movq   xmm11,rax
    30fe:	jmp    302a <quantum_gate1+0x8ea>
    3103:	nop    DWORD PTR [rax+rax*1+0x0]
    3108:	comisd xmm1,xmm4
    310c:	jbe    2962 <quantum_gate1+0x222>
    3112:	test   QWORD PTR [rdi+r8*1],rbp
    3116:	je     295d <quantum_gate1+0x21d>
    311c:	add    r8,0x10
    3120:	cmp    r15,r8
    3123:	jne    28b0 <quantum_gate1+0x170>
    3129:	jmp    296f <quantum_gate1+0x22f>
    312e:	xchg   ax,ax
    3130:	mov    rdx,rax
    3133:	and    eax,0x1
    3136:	pxor   xmm0,xmm0
    313a:	shr    rdx,1
    313d:	or     rdx,rax
    3140:	cvtsi2sd xmm0,rdx
    3145:	addsd  xmm0,xmm0
    3149:	jmp    2a5e <quantum_gate1+0x31e>
    314e:	movsxd rsi,r9d
    3151:	mov    rdi,r12
    3154:	shl    rsi,0x4
    3158:	call   1290 <realloc@plt>
    315d:	mov    QWORD PTR [r14+0x10],rax
    3161:	test   rax,rax
    3164:	je     3180 <quantum_gate1+0xa40>
    3166:	xor    edi,edi
    3168:	xor    ebx,ebx
    316a:	call   5140 <quantum_memman>
    316f:	mov    DWORD PTR [rsp+0x24],0x0
    3177:	mov    ebp,DWORD PTR [r14+0x4]
    317b:	jmp    2a03 <quantum_gate1+0x2c3>
    3180:	mov    DWORD PTR [rsp+0x24],0x0
    3188:	mov    edx,DWORD PTR [rsp+0x24]
    318c:	mov    edi,0x1
    3191:	add    edx,DWORD PTR [r14+0x4]
    3195:	xor    eax,eax
    3197:	lea    rsi,[rip+0x6f0a]        # a0a8 <_IO_stdin_used+0xa8>
    319e:	call   12a0 <__printf_chk@plt>
    31a3:	mov    edi,0x1
    31a8:	call   12e0 <exit@plt>
    31ad:	movaps xmm3,xmm7
    31b0:	movaps xmm2,xmm6
    31b3:	mov    QWORD PTR [rsp+0x48],r8
    31b8:	mov    QWORD PTR [rsp+0x40],r10
    31bd:	mov    DWORD PTR [rsp+0x30],ecx
    31c1:	movss  DWORD PTR [rsp+0x3c],xmm9
    31c8:	movss  DWORD PTR [rsp+0x28],xmm5
    31ce:	movss  DWORD PTR [rsp+0x8],xmm4
    31d4:	call   8d40 <__mulsc3>
    31d9:	mov    rax,QWORD PTR [rip+0x6f70]        # a150 <_IO_stdin_used+0x150>
    31e0:	mov    ecx,DWORD PTR [rsp+0x30]
    31e4:	pxor   xmm10,xmm10
    31e9:	movq   QWORD PTR [rsp+0x98],xmm0
    31f2:	mov    r8,QWORD PTR [rsp+0x48]
    31f7:	movss  xmm13,DWORD PTR [rsp+0x98]
    3201:	mov    r10,QWORD PTR [rsp+0x40]
    3206:	movq   xmm12,rax
    320b:	movq   xmm11,rax
    3210:	movss  xmm8,DWORD PTR [rsp+0x9c]
    321a:	movss  xmm9,DWORD PTR [rsp+0x3c]
    3221:	movss  xmm5,DWORD PTR [rsp+0x28]
    3227:	movss  xmm4,DWORD PTR [rsp+0x8]
    322d:	jmp    2c77 <quantum_gate1+0x537>
    3232:	mov    edx,DWORD PTR [rsp+0x24]
    3236:	mov    edi,0x1
    323b:	add    edx,DWORD PTR [r14+0x4]
    323f:	lea    rsi,[rip+0x6e62]        # a0a8 <_IO_stdin_used+0xa8>
    3246:	call   12a0 <__printf_chk@plt>
    324b:	mov    edi,0x1
    3250:	call   12e0 <exit@plt>
    3255:	movaps xmm3,xmm7
    3258:	movaps xmm2,xmm6
    325b:	mov    QWORD PTR [rsp+0x58],r8
    3260:	mov    QWORD PTR [rsp+0x50],r10
    3265:	mov    DWORD PTR [rsp+0x40],ecx
    3269:	movss  DWORD PTR [rsp+0x48],xmm9
    3270:	movss  DWORD PTR [rsp+0x3c],xmm5
    3276:	movss  DWORD PTR [rsp+0x30],xmm4
    327c:	movss  DWORD PTR [rsp+0x28],xmm7
    3282:	movss  DWORD PTR [rsp+0x8],xmm6
    3288:	call   8d40 <__mulsc3>
    328d:	mov    rax,QWORD PTR [rip+0x6ebc]        # a150 <_IO_stdin_used+0x150>
    3294:	mov    ecx,DWORD PTR [rsp+0x40]
    3298:	pxor   xmm10,xmm10
    329d:	movq   QWORD PTR [rsp+0xb8],xmm0
    32a6:	mov    r8,QWORD PTR [rsp+0x58]
    32ab:	movss  xmm13,DWORD PTR [rsp+0xb8]
    32b5:	mov    r10,QWORD PTR [rsp+0x50]
    32ba:	movss  xmm9,DWORD PTR [rsp+0x48]
    32c1:	movq   xmm12,rax
    32c6:	movq   xmm11,rax
    32cb:	movss  xmm8,DWORD PTR [rsp+0xbc]
    32d5:	movss  xmm5,DWORD PTR [rsp+0x3c]
    32db:	movss  xmm4,DWORD PTR [rsp+0x30]
    32e1:	movss  xmm7,DWORD PTR [rsp+0x28]
    32e7:	movss  xmm6,DWORD PTR [rsp+0x8]
    32ed:	jmp    2bdf <quantum_gate1+0x49f>
    32f2:	mov    edi,0x1
    32f7:	mov    rdx,r12
    32fa:	lea    rsi,[rip+0x6dcf]        # a0d0 <_IO_stdin_used+0xd0>
    3301:	xor    eax,eax
    3303:	call   12a0 <__printf_chk@plt>
    3308:	mov    edi,0x1
    330d:	call   12e0 <exit@plt>
    3312:	movaps xmm2,xmm4
    3315:	movaps xmm0,xmm14
    3319:	movaps xmm3,xmm5
    331c:	mov    QWORD PTR [rsp+0x68],r8
    3321:	mov    QWORD PTR [rsp+0x60],r10
    3326:	mov    DWORD PTR [rsp+0x40],ecx
    332a:	movss  DWORD PTR [rsp+0x58],xmm9
    3331:	movss  DWORD PTR [rsp+0x50],xmm8
    3338:	movss  DWORD PTR [rsp+0x48],xmm13
    333f:	movss  DWORD PTR [rsp+0x3c],xmm6
    3345:	movss  DWORD PTR [rsp+0x30],xmm7
    334b:	movss  DWORD PTR [rsp+0x28],xmm5
    3351:	movss  DWORD PTR [rsp+0x8],xmm4
    3357:	call   8d40 <__mulsc3>
    335c:	mov    rax,QWORD PTR [rip+0x6ded]        # a150 <_IO_stdin_used+0x150>
    3363:	mov    ecx,DWORD PTR [rsp+0x40]
    3367:	pxor   xmm10,xmm10
    336c:	movq   QWORD PTR [rsp+0xb0],xmm0
    3375:	mov    r8,QWORD PTR [rsp+0x68]
    337a:	movss  xmm2,DWORD PTR [rsp+0xb0]
    3383:	mov    r10,QWORD PTR [rsp+0x60]
    3388:	movss  xmm9,DWORD PTR [rsp+0x58]
    338f:	movq   xmm12,rax
    3394:	movq   xmm11,rax
    3399:	movss  xmm0,DWORD PTR [rsp+0xb4]
    33a2:	movss  xmm8,DWORD PTR [rsp+0x50]
    33a9:	movss  xmm13,DWORD PTR [rsp+0x48]
    33b0:	movss  xmm6,DWORD PTR [rsp+0x3c]
    33b6:	movss  xmm7,DWORD PTR [rsp+0x30]
    33bc:	movss  xmm5,DWORD PTR [rsp+0x28]
    33c2:	movss  xmm4,DWORD PTR [rsp+0x8]
    33c8:	jmp    2c1a <quantum_gate1+0x4da>
    33cd:	movaps xmm2,xmm6
    33d0:	movaps xmm0,xmm14
    33d4:	movaps xmm3,xmm7
    33d7:	mov    QWORD PTR [rsp+0x68],r8
    33dc:	mov    QWORD PTR [rsp+0x60],r10
    33e1:	mov    DWORD PTR [rsp+0x50],ecx
    33e5:	movss  DWORD PTR [rsp+0x58],xmm9
    33ec:	movss  DWORD PTR [rsp+0x48],xmm8
    33f3:	movss  DWORD PTR [rsp+0x40],xmm5
    33f9:	movss  DWORD PTR [rsp+0x3c],xmm4
    33ff:	movss  DWORD PTR [rsp+0x30],xmm13
    3406:	movss  DWORD PTR [rsp+0x28],xmm7
    340c:	movss  DWORD PTR [rsp+0x8],xmm6
    3412:	call   8d40 <__mulsc3>
    3417:	mov    rax,QWORD PTR [rip+0x6d32]        # a150 <_IO_stdin_used+0x150>
    341e:	mov    ecx,DWORD PTR [rsp+0x50]
    3422:	pxor   xmm10,xmm10
    3427:	movq   QWORD PTR [rsp+0xa0],xmm0
    3430:	mov    r8,QWORD PTR [rsp+0x68]
    3435:	movss  xmm0,DWORD PTR [rsp+0xa0]
    343e:	mov    r10,QWORD PTR [rsp+0x60]
    3443:	movss  xmm9,DWORD PTR [rsp+0x58]
    344a:	movq   xmm12,rax
    344f:	movq   xmm11,rax
    3454:	movss  xmm2,DWORD PTR [rsp+0xa4]
    345d:	movss  xmm8,DWORD PTR [rsp+0x48]
    3464:	movss  xmm5,DWORD PTR [rsp+0x40]
    346a:	movss  xmm4,DWORD PTR [rsp+0x3c]
    3470:	movss  xmm13,DWORD PTR [rsp+0x30]
    3477:	movss  xmm7,DWORD PTR [rsp+0x28]
    347d:	movss  xmm6,DWORD PTR [rsp+0x8]
    3483:	jmp    2e91 <quantum_gate1+0x751>
    3488:	movaps xmm3,xmm5
    348b:	movaps xmm2,xmm4
    348e:	movaps xmm0,xmm14
    3492:	mov    QWORD PTR [rsp+0x58],r8
    3497:	mov    QWORD PTR [rsp+0x50],r10
    349c:	mov    DWORD PTR [rsp+0x40],ecx
    34a0:	movss  DWORD PTR [rsp+0x48],xmm9
    34a7:	movss  DWORD PTR [rsp+0x3c],xmm6
    34ad:	movss  DWORD PTR [rsp+0x30],xmm7
    34b3:	movss  DWORD PTR [rsp+0x28],xmm5
    34b9:	movss  DWORD PTR [rsp+0x8],xmm4
    34bf:	call   8d40 <__mulsc3>
    34c4:	mov    rax,QWORD PTR [rip+0x6c85]        # a150 <_IO_stdin_used+0x150>
    34cb:	mov    ecx,DWORD PTR [rsp+0x40]
    34cf:	pxor   xmm10,xmm10
    34d4:	movq   QWORD PTR [rsp+0xa8],xmm0
    34dd:	mov    r8,QWORD PTR [rsp+0x58]
    34e2:	movss  xmm13,DWORD PTR [rsp+0xa8]
    34ec:	mov    r10,QWORD PTR [rsp+0x50]
    34f1:	movss  xmm9,DWORD PTR [rsp+0x48]
    34f8:	movq   xmm12,rax
    34fd:	movq   xmm11,rax
    3502:	movss  xmm8,DWORD PTR [rsp+0xac]
    350c:	movss  xmm6,DWORD PTR [rsp+0x3c]
    3512:	movss  xmm7,DWORD PTR [rsp+0x30]
    3518:	movss  xmm5,DWORD PTR [rsp+0x28]
    351e:	movss  xmm4,DWORD PTR [rsp+0x8]
    3524:	jmp    2e56 <quantum_gate1+0x716>
    3529:	pxor   xmm7,xmm7
    352d:	movaps xmm6,xmm7
    3530:	jmp    2b93 <quantum_gate1+0x453>
    3535:	nop    DWORD PTR [rax]
    3538:	movaps xmm0,xmm6
    353b:	movaps xmm2,xmm4
    353e:	movaps xmm3,xmm5
    3541:	mov    QWORD PTR [rsp+0x48],r8
    3546:	mov    QWORD PTR [rsp+0x40],r10
    354b:	mov    DWORD PTR [rsp+0x8],ecx
    354f:	movss  DWORD PTR [rsp+0x3c],xmm9
    3556:	movss  DWORD PTR [rsp+0x30],xmm8
    355d:	movss  DWORD PTR [rsp+0x28],xmm13
    3564:	call   8d40 <__mulsc3>
    3569:	mov    rax,QWORD PTR [rip+0x6be0]        # a150 <_IO_stdin_used+0x150>
    3570:	mov    ecx,DWORD PTR [rsp+0x8]
    3574:	pxor   xmm10,xmm10
    3579:	movq   QWORD PTR [rsp+0x90],xmm0
    3582:	mov    r8,QWORD PTR [rsp+0x48]
    3587:	movss  xmm2,DWORD PTR [rsp+0x90]
    3590:	mov    r10,QWORD PTR [rsp+0x40]
    3595:	movss  xmm9,DWORD PTR [rsp+0x3c]
    359c:	movq   xmm12,rax
    35a1:	movq   xmm11,rax
    35a6:	movss  xmm0,DWORD PTR [rsp+0x94]
    35af:	movss  xmm8,DWORD PTR [rsp+0x30]
    35b6:	movss  xmm13,DWORD PTR [rsp+0x28]
    35bd:	jmp    2cb0 <quantum_gate1+0x570>
    35c2:	movaps xmm3,xmm5
    35c5:	movaps xmm2,xmm4
    35c8:	mov    QWORD PTR [rsp+0x48],r8
    35cd:	mov    QWORD PTR [rsp+0x40],r10
    35d2:	mov    DWORD PTR [rsp+0x30],ecx
    35d6:	movss  DWORD PTR [rsp+0x3c],xmm9
    35dd:	movss  DWORD PTR [rsp+0x28],xmm6
    35e3:	movss  DWORD PTR [rsp+0x8],xmm7
    35e9:	call   8d40 <__mulsc3>
    35ee:	mov    rax,QWORD PTR [rip+0x6b5b]        # a150 <_IO_stdin_used+0x150>
    35f5:	mov    ecx,DWORD PTR [rsp+0x30]
    35f9:	pxor   xmm10,xmm10
    35fe:	movq   QWORD PTR [rsp+0x88],xmm0
    3607:	mov    r8,QWORD PTR [rsp+0x48]
    360c:	movss  xmm13,DWORD PTR [rsp+0x88]
    3616:	mov    r10,QWORD PTR [rsp+0x40]
    361b:	movq   xmm12,rax
    3620:	movq   xmm11,rax
    3625:	movss  xmm8,DWORD PTR [rsp+0x8c]
    362f:	movss  xmm9,DWORD PTR [rsp+0x3c]
    3636:	movss  xmm6,DWORD PTR [rsp+0x28]
    363c:	movss  xmm7,DWORD PTR [rsp+0x8]
    3642:	jmp    2eee <quantum_gate1+0x7ae>
    3647:	movaps xmm0,xmm6
    364a:	movaps xmm2,xmm4
    364d:	movaps xmm3,xmm5
    3650:	mov    QWORD PTR [rsp+0x30],r8
    3655:	mov    QWORD PTR [rsp+0x28],r10
    365a:	movss  DWORD PTR [rsp+0x8],xmm9
    3661:	call   8d40 <__mulsc3>
    3666:	movq   QWORD PTR [rsp+0x78],xmm0
    366c:	movss  xmm2,DWORD PTR [rsp+0x78]
    3672:	movss  xmm0,DWORD PTR [rsp+0x7c]
    3678:	jmp    30d7 <quantum_gate1+0x997>
    367d:	lea    rdi,[rip+0x6a73]        # a0f7 <_IO_stdin_used+0xf7>
    3684:	call   11e0 <puts@plt>
    3689:	mov    edi,0x1
    368e:	call   12e0 <exit@plt>
    3693:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    369e:	xchg   ax,ax

00000000000036a0 <quantum_gate2>:
    36a0:	endbr64 
    36a4:	movabs rax,0x400000004
    36ae:	push   r15
    36b0:	push   r14
    36b2:	push   r13
    36b4:	push   r12
    36b6:	push   rbp
    36b7:	push   rbx
    36b8:	sub    rsp,0xc8
    36bf:	mov    DWORD PTR [rsp+0xc],esi
    36c3:	cmp    rdx,rax
    36c6:	jne    41a0 <quantum_gate2+0xb00>
    36cc:	mov    r13,rcx
    36cf:	mov    ecx,DWORD PTR [r8+0x8]
    36d3:	mov    eax,0x1
    36d8:	mov    r14,r8
    36db:	shl    eax,cl
    36dd:	test   eax,eax
    36df:	jle    3707 <quantum_gate2+0x67>
    36e1:	mov    rdi,QWORD PTR [r8+0x18]
    36e5:	xor    eax,eax
    36e7:	mov    esi,0x1
    36ec:	nop    DWORD PTR [rax+0x0]
    36f0:	mov    DWORD PTR [rdi+rax*4],0x0
    36f7:	mov    ecx,DWORD PTR [r14+0x8]
    36fb:	mov    edx,esi
    36fd:	add    rax,0x1
    3701:	shl    edx,cl
    3703:	cmp    edx,eax
    3705:	jg     36f0 <quantum_gate2+0x50>
    3707:	mov    r9d,DWORD PTR [r14+0x4]
    370b:	mov    r12,QWORD PTR [r14+0x10]
    370f:	test   r9d,r9d
    3712:	jle    409e <quantum_gate2+0x9fe>
    3718:	mov    r8,QWORD PTR [r14+0x18]
    371c:	lea    rdi,[r12+0x8]
    3721:	xor    esi,esi
    3723:	mov    ebx,0x20
    3728:	mov    r11d,0x1
    372e:	lea    r10,[r8+0x4]
    3732:	nop    WORD PTR [rax+rax*1+0x0]
    3738:	mov    rcx,QWORD PTR [rdi]
    373b:	mov    eax,DWORD PTR [r14+0x8]
    373f:	mov    r15d,r11d
    3742:	mov    rdx,rcx
    3745:	shr    rdx,0x20
    3749:	xor    edx,ecx
    374b:	mov    ecx,ebx
    374d:	imul   edx,edx,0x9e370001
    3753:	sub    ecx,eax
    3755:	shr    edx,cl
    3757:	mov    ecx,eax
    3759:	shl    r15d,cl
    375c:	lea    r9d,[r15-0x1]
    3760:	mov    r15d,r9d
    3763:	movsxd rcx,edx
    3766:	sub    r15d,edx
    3769:	lea    rax,[r8+rcx*4]
    376d:	mov    rdx,r15
    3770:	add    rdx,rcx
    3773:	lea    rcx,[r10+rdx*4]
    3777:	jmp    378b <quantum_gate2+0xeb>
    3779:	nop    DWORD PTR [rax+0x0]
    3780:	add    rax,0x4
    3784:	xor    edx,edx
    3786:	cmp    rcx,rax
    3789:	je     3760 <quantum_gate2+0xc0>
    378b:	mov    ebp,DWORD PTR [rax]
    378d:	test   ebp,ebp
    378f:	jne    3780 <quantum_gate2+0xe0>
    3791:	add    esi,0x1
    3794:	add    rdi,0x10
    3798:	mov    DWORD PTR [rax],esi
    379a:	mov    r9d,DWORD PTR [r14+0x4]
    379e:	cmp    r9d,esi
    37a1:	jg     3738 <quantum_gate2+0x98>
    37a3:	test   r9d,r9d
    37a6:	jle    409e <quantum_gate2+0x9fe>
    37ac:	movzx  ecx,BYTE PTR [rsp+0xc]
    37b1:	lea    edx,[r9-0x1]
    37b5:	mov    r10,QWORD PTR [r14+0x18]
    37b9:	pxor   xmm0,xmm0
    37bd:	mov    ebp,0x1
    37c2:	shl    rdx,0x4
    37c6:	mov    eax,0x20
    37cb:	mov    DWORD PTR [rsp+0x24],0x0
    37d3:	shl    rbp,cl
    37d6:	mov    ecx,DWORD PTR [r14+0x8]
    37da:	mov    DWORD PTR [rsp+0x10],r9d
    37df:	add    rdx,0x18
    37e3:	mov    QWORD PTR [rsp+0x18],r14
    37e8:	mov    rdi,QWORD PTR [r14+0x10]
    37ec:	lea    r11,[r10+0x4]
    37f0:	mov    r14,rdx
    37f3:	sub    eax,ecx
    37f5:	mov    r8d,0x8
    37fb:	mov    esi,eax
    37fd:	mov    eax,0x1
    3802:	shl    eax,cl
    3804:	mov    ecx,esi
    3806:	lea    ebx,[rax-0x1]
    3809:	nop    DWORD PTR [rax+0x0]
    3810:	mov    rsi,QWORD PTR [r12+r8*1]
    3814:	xor    rsi,rbp
    3817:	mov    rax,rsi
    381a:	shr    rax,0x20
    381e:	xor    eax,esi
    3820:	imul   eax,eax,0x9e370001
    3826:	shr    eax,cl
    3828:	mov    r15d,ebx
    382b:	movsxd r9,eax
    382e:	sub    r15d,eax
    3831:	lea    rdx,[r10+r9*4]
    3835:	mov    rax,r15
    3838:	add    rax,r9
    383b:	lea    r9,[r11+rax*4]
    383f:	jmp    3860 <quantum_gate2+0x1c0>
    3841:	nop    DWORD PTR [rax+0x0]
    3848:	shl    rax,0x4
    384c:	cmp    rsi,QWORD PTR [rdi+rax*1-0x8]
    3851:	je     38c0 <quantum_gate2+0x220>
    3853:	add    rdx,0x4
    3857:	cmp    r9,rdx
    385a:	je     3f00 <quantum_gate2+0x860>
    3860:	movsxd rax,DWORD PTR [rdx]
    3863:	test   eax,eax
    3865:	jne    3848 <quantum_gate2+0x1a8>
    3867:	ucomiss xmm0,DWORD PTR [r13+0x10]
    386c:	mov    esi,0x1
    3871:	setp   al
    3874:	cmovne eax,esi
    3877:	ucomiss xmm0,DWORD PTR [r13+0x14]
    387c:	mov    edx,eax
    387e:	setp   al
    3881:	cmovne eax,esi
    3884:	or     eax,edx
    3886:	ucomiss xmm0,DWORD PTR [r13+0xc]
    388b:	setp   dl
    388e:	cmovne edx,esi
    3891:	test   dl,dl
    3893:	jne    3d3f <quantum_gate2+0x69f>
    3899:	ucomiss xmm0,DWORD PTR [r13+0x8]
    389e:	setp   dl
    38a1:	cmovne edx,esi
    38a4:	test   dl,dl
    38a6:	jne    3d3f <quantum_gate2+0x69f>
    38ac:	test   al,al
    38ae:	je     38c0 <quantum_gate2+0x220>
    38b0:	test   QWORD PTR [rdi+r8*1],rbp
    38b4:	je     3d4d <quantum_gate2+0x6ad>
    38ba:	nop    WORD PTR [rax+rax*1+0x0]
    38c0:	add    r8,0x10
    38c4:	cmp    r14,r8
    38c7:	jne    3810 <quantum_gate2+0x170>
    38cd:	mov    r9d,DWORD PTR [rsp+0x10]
    38d2:	mov    eax,DWORD PTR [rsp+0x24]
    38d6:	mov    rdi,r12
    38d9:	mov    r14,QWORD PTR [rsp+0x18]
    38de:	lea    esi,[r9+rax*1]
    38e2:	movsxd rsi,esi
    38e5:	shl    rsi,0x4
    38e9:	call   1290 <realloc@plt>
    38ee:	mov    QWORD PTR [r14+0x10],rax
    38f2:	test   rax,rax
    38f5:	je     40fa <quantum_gate2+0xa5a>
    38fb:	movsxd rbx,DWORD PTR [rsp+0x24]
    3900:	mov    rdi,rbx
    3903:	shl    rdi,0x4
    3907:	call   5140 <quantum_memman>
    390c:	test   ebx,ebx
    390e:	je     40bf <quantum_gate2+0xa1f>
    3914:	movsxd rsi,DWORD PTR [r14+0x4]
    3918:	lea    edx,[rbx-0x1]
    391b:	mov    rcx,QWORD PTR [r14+0x10]
    391f:	movss  xmm1,DWORD PTR [rip+0x6809]        # a130 <_IO_stdin_used+0x130>
    3927:	movss  xmm0,DWORD PTR [rip+0x6805]        # a134 <_IO_stdin_used+0x134>
    392f:	mov    rax,rsi
    3932:	add    rdx,rsi
    3935:	mov    rbp,rsi
    3938:	shl    rax,0x4
    393c:	shl    rdx,0x4
    3940:	add    rax,rcx
    3943:	lea    rdx,[rcx+rdx*1+0x10]
    3948:	nop    DWORD PTR [rax+rax*1+0x0]
    3950:	mov    QWORD PTR [rax+0x8],0x0
    3958:	add    rax,0x10
    395c:	movss  DWORD PTR [rax-0x10],xmm1
    3961:	movss  DWORD PTR [rax-0xc],xmm0
    3966:	cmp    rdx,rax
    3969:	jne    3950 <quantum_gate2+0x2b0>
    396b:	mov    eax,DWORD PTR [rsp+0x24]
    396f:	mov    esi,0x1
    3974:	lea    r12d,[rax+rbp*1]
    3978:	movsxd r12,r12d
    397b:	mov    rdi,r12
    397e:	call   1250 <calloc@plt>
    3983:	test   rax,rax
    3986:	je     428b <quantum_gate2+0xbeb>
    398c:	movsxd rdi,ebp
    398f:	mov    QWORD PTR [rsp+0x10],rax
    3994:	add    rdi,rbx
    3997:	call   5140 <quantum_memman>
    399c:	mov    eax,DWORD PTR [r14+0x4]
    39a0:	mov    ecx,DWORD PTR [r14]
    39a3:	mov    r8,QWORD PTR [rsp+0x10]
    39a8:	mov    DWORD PTR [rsp+0x38],eax
    39ac:	mov    eax,0x1
    39b1:	shl    rax,cl
    39b4:	test   rax,rax
    39b7:	js     4080 <quantum_gate2+0x9e0>
    39bd:	pxor   xmm0,xmm0
    39c1:	cvtsi2sd xmm0,rax
    39c6:	movsd  xmm9,QWORD PTR [rip+0x6641]        # a010 <_IO_stdin_used+0x10>
    39cf:	mov    edx,DWORD PTR [rsp+0x38]
    39d3:	divsd  xmm9,xmm0
    39d8:	divsd  xmm9,QWORD PTR [rip+0x6777]        # a158 <_IO_stdin_used+0x158>
    39e1:	cvtsd2ss xmm9,xmm9
    39e6:	test   edx,edx
    39e8:	jle    3c4f <quantum_gate2+0x5af>
    39ee:	movzx  ecx,BYTE PTR [rsp+0xc]
    39f3:	mov    eax,0x1
    39f8:	pxor   xmm12,xmm12
    39fd:	xor    r12d,r12d
    3a00:	movaps xmm10,xmm12
    3a04:	movaps xmm11,xmm12
    3a08:	shl    rax,cl
    3a0b:	mov    QWORD PTR [rsp+0x10],rax
    3a10:	mov    DWORD PTR [rsp+0x18],eax
    3a14:	mov    eax,DWORD PTR [rsp+0x38]
    3a18:	mov    DWORD PTR [rsp+0x20],eax
    3a1c:	lea    r10d,[rax-0x1]
    3a20:	mov    rax,r14
    3a23:	mov    r14,r8
    3a26:	mov    r8,rax
    3a29:	jmp    3a41 <quantum_gate2+0x3a1>
    3a2b:	nop    DWORD PTR [rax+rax*1+0x0]
    3a30:	lea    rax,[r12+0x1]
    3a35:	cmp    r10,r12
    3a38:	je     3c46 <quantum_gate2+0x5a6>
    3a3e:	mov    r12,rax
    3a41:	cmp    BYTE PTR [r14+r12*1],0x0
    3a46:	jne    3a30 <quantum_gate2+0x390>
    3a48:	mov    rbp,QWORD PTR [r8+0x10]
    3a4c:	mov    r15,r12
    3a4f:	mov    eax,DWORD PTR [rsp+0x18]
    3a53:	mov    ecx,0x20
    3a58:	shl    r15,0x4
    3a5c:	mov    esi,DWORD PTR [r8+0x8]
    3a60:	mov    rdi,QWORD PTR [r8+0x18]
    3a64:	add    r15,rbp
    3a67:	mov    rbx,QWORD PTR [r15+0x8]
    3a6b:	sub    ecx,esi
    3a6d:	lea    r9,[rdi+0x4]
    3a71:	and    eax,ebx
    3a73:	xor    rbx,QWORD PTR [rsp+0x10]
    3a78:	mov    rdx,rbx
    3a7b:	mov    DWORD PTR [rsp+0xc],eax
    3a7f:	mov    eax,0x1
    3a84:	shr    rdx,0x20
    3a88:	xor    edx,ebx
    3a8a:	imul   edx,edx,0x9e370001
    3a90:	shr    edx,cl
    3a92:	mov    ecx,esi
    3a94:	shl    eax,cl
    3a96:	lea    r11d,[rax-0x1]
    3a9a:	mov    esi,r11d
    3a9d:	movsxd rcx,edx
    3aa0:	sub    esi,edx
    3aa2:	lea    rax,[rdi+rcx*4]
    3aa6:	mov    rdx,rsi
    3aa9:	add    rdx,rcx
    3aac:	lea    rsi,[r9+rdx*4]
    3ab0:	jmp    3ad5 <quantum_gate2+0x435>
    3ab2:	nop    WORD PTR [rax+rax*1+0x0]
    3ab8:	movsxd rdx,ecx
    3abb:	shl    rdx,0x4
    3abf:	cmp    rbx,QWORD PTR [rbp+rdx*1-0x8]
    3ac4:	je     3d68 <quantum_gate2+0x6c8>
    3aca:	add    rax,0x4
    3ace:	xor    edx,edx
    3ad0:	cmp    rsi,rax
    3ad3:	je     3a9a <quantum_gate2+0x3fa>
    3ad5:	mov    ecx,DWORD PTR [rax]
    3ad7:	test   ecx,ecx
    3ad9:	jne    3ab8 <quantum_gate2+0x418>
    3adb:	movss  xmm5,DWORD PTR [r15]
    3ae0:	movss  xmm4,DWORD PTR [r15+0x4]
    3ae6:	movaps xmm7,xmm12
    3aea:	movaps xmm6,xmm12
    3aee:	mov    ecx,0xffffffff
    3af3:	mov    eax,DWORD PTR [rsp+0xc]
    3af7:	test   eax,eax
    3af9:	je     3d9b <quantum_gate2+0x6fb>
    3aff:	movss  xmm0,DWORD PTR [r13+0x10]
    3b05:	movss  xmm1,DWORD PTR [r13+0x14]
    3b0b:	movaps xmm13,xmm6
    3b0f:	movaps xmm2,xmm7
    3b12:	movaps xmm8,xmm7
    3b16:	mulss  xmm2,xmm1
    3b1a:	mulss  xmm13,xmm0
    3b1f:	mulss  xmm8,xmm0
    3b24:	subss  xmm13,xmm2
    3b29:	movaps xmm2,xmm6
    3b2c:	mulss  xmm2,xmm1
    3b30:	addss  xmm8,xmm2
    3b35:	ucomiss xmm13,xmm8
    3b39:	jp     44b3 <quantum_gate2+0xe13>
    3b3f:	movss  xmm14,DWORD PTR [r13+0x18]
    3b45:	movaps xmm2,xmm5
    3b48:	movaps xmm0,xmm4
    3b4b:	movaps xmm3,xmm5
    3b4e:	movss  xmm1,DWORD PTR [r13+0x1c]
    3b54:	mulss  xmm2,xmm14
    3b59:	mulss  xmm0,xmm1
    3b5d:	mulss  xmm3,xmm1
    3b61:	subss  xmm2,xmm0
    3b65:	movaps xmm0,xmm4
    3b68:	mulss  xmm0,xmm14
    3b6d:	addss  xmm0,xmm3
    3b71:	ucomiss xmm2,xmm0
    3b74:	jp     41b6 <quantum_gate2+0xb16>
    3b7a:	addss  xmm13,xmm2
    3b7f:	addss  xmm8,xmm0
    3b84:	movss  DWORD PTR [r15],xmm13
    3b89:	movss  DWORD PTR [r15+0x4],xmm8
    3b8f:	test   ecx,ecx
    3b91:	js     3f10 <quantum_gate2+0x870>
    3b97:	movss  xmm0,DWORD PTR [r13+0x0]
    3b9d:	movss  xmm1,DWORD PTR [r13+0x4]
    3ba3:	movaps xmm13,xmm6
    3ba7:	movaps xmm2,xmm7
    3baa:	movaps xmm8,xmm7
    3bae:	mulss  xmm2,xmm1
    3bb2:	mulss  xmm13,xmm0
    3bb7:	mulss  xmm8,xmm0
    3bbc:	subss  xmm13,xmm2
    3bc1:	movaps xmm2,xmm6
    3bc4:	mulss  xmm2,xmm1
    3bc8:	addss  xmm8,xmm2
    3bcd:	ucomiss xmm13,xmm8
    3bd1:	jp     4547 <quantum_gate2+0xea7>
    3bd7:	movss  xmm6,DWORD PTR [r13+0x8]
    3bdd:	movaps xmm2,xmm5
    3be0:	movaps xmm0,xmm4
    3be3:	movaps xmm3,xmm5
    3be6:	movss  xmm1,DWORD PTR [r13+0xc]
    3bec:	mulss  xmm2,xmm6
    3bf0:	mulss  xmm0,xmm1
    3bf4:	mulss  xmm3,xmm1
    3bf8:	subss  xmm2,xmm0
    3bfc:	movaps xmm0,xmm4
    3bff:	mulss  xmm0,xmm6
    3c03:	addss  xmm0,xmm3
    3c07:	ucomiss xmm2,xmm0
    3c0a:	jp     411f <quantum_gate2+0xa7f>
    3c10:	movsxd rcx,ecx
    3c13:	addss  xmm13,xmm2
    3c18:	addss  xmm8,xmm0
    3c1d:	mov    rax,rcx
    3c20:	shl    rax,0x4
    3c24:	add    rbp,rax
    3c27:	lea    rax,[r12+0x1]
    3c2c:	movss  DWORD PTR [rbp+0x0],xmm13
    3c32:	movss  DWORD PTR [rbp+0x4],xmm8
    3c38:	mov    BYTE PTR [r14+rcx*1],0x1
    3c3d:	cmp    r10,r12
    3c40:	jne    3a3e <quantum_gate2+0x39e>
    3c46:	mov    rax,r8
    3c49:	mov    r8,r14
    3c4c:	mov    r14,rax
    3c4f:	mov    ebx,DWORD PTR [rsp+0x38]
    3c53:	add    ebx,DWORD PTR [rsp+0x24]
    3c57:	mov    rdi,r8
    3c5a:	movss  DWORD PTR [rsp+0xc],xmm9
    3c61:	mov    DWORD PTR [r14+0x4],ebx
    3c65:	neg    ebx
    3c67:	call   11c0 <free@plt>
    3c6c:	movsxd rdi,ebx
    3c6f:	call   5140 <quantum_memman>
    3c74:	mov    esi,DWORD PTR [r14+0x4]
    3c78:	movss  xmm9,DWORD PTR [rsp+0xc]
    3c7f:	test   esi,esi
    3c81:	jle    3d26 <quantum_gate2+0x686>
    3c87:	mov    rdi,QWORD PTR [r14+0x10]
    3c8b:	xor    ebx,ebx
    3c8d:	xor    edx,edx
    3c8f:	mov    rax,rdi
    3c92:	jmp    3ca6 <quantum_gate2+0x606>
    3c94:	nop    DWORD PTR [rax+0x0]
    3c98:	add    ebx,0x1
    3c9b:	add    edx,0x1
    3c9e:	add    rax,0x10
    3ca2:	cmp    edx,esi
    3ca4:	je     3cf5 <quantum_gate2+0x655>
    3ca6:	movss  xmm1,DWORD PTR [rax+0x4]
    3cab:	movss  xmm2,DWORD PTR [rax]
    3caf:	movaps xmm3,xmm1
    3cb2:	movaps xmm0,xmm2
    3cb5:	mulss  xmm0,xmm2
    3cb9:	mulss  xmm3,xmm1
    3cbd:	addss  xmm0,xmm3
    3cc1:	comiss xmm9,xmm0
    3cc5:	ja     3c98 <quantum_gate2+0x5f8>
    3cc7:	test   ebx,ebx
    3cc9:	je     3c9b <quantum_gate2+0x5fb>
    3ccb:	mov    ecx,edx
    3ccd:	mov    r8,QWORD PTR [rax+0x8]
    3cd1:	add    edx,0x1
    3cd4:	add    rax,0x10
    3cd8:	sub    ecx,ebx
    3cda:	movsxd rcx,ecx
    3cdd:	shl    rcx,0x4
    3ce1:	add    rcx,rdi
    3ce4:	mov    QWORD PTR [rcx+0x8],r8
    3ce8:	movss  DWORD PTR [rcx],xmm2
    3cec:	movss  DWORD PTR [rcx+0x4],xmm1
    3cf1:	cmp    edx,esi
    3cf3:	jne    3ca6 <quantum_gate2+0x606>
    3cf5:	test   ebx,ebx
    3cf7:	je     3d26 <quantum_gate2+0x686>
    3cf9:	sub    edx,ebx
    3cfb:	mov    DWORD PTR [r14+0x4],edx
    3cff:	movsxd rsi,edx
    3d02:	shl    rsi,0x4
    3d06:	call   1290 <realloc@plt>
    3d0b:	mov    QWORD PTR [r14+0x10],rax
    3d0f:	test   rax,rax
    3d12:	je     4268 <quantum_gate2+0xbc8>
    3d18:	neg    ebx
    3d1a:	movsxd rdi,ebx
    3d1d:	shl    rdi,0x4
    3d21:	call   5140 <quantum_memman>
    3d26:	add    rsp,0xc8
    3d2d:	mov    rdi,r14
    3d30:	pop    rbx
    3d31:	pop    rbp
    3d32:	pop    r12
    3d34:	pop    r13
    3d36:	pop    r14
    3d38:	pop    r15
    3d3a:	jmp    1b20 <quantum_decohere>
    3d3f:	test   QWORD PTR [rdi+r8*1],rbp
    3d43:	jne    3d4d <quantum_gate2+0x6ad>
    3d45:	test   al,al
    3d47:	je     38c0 <quantum_gate2+0x220>
    3d4d:	add    r8,0x10
    3d51:	add    DWORD PTR [rsp+0x24],0x1
    3d56:	cmp    r14,r8
    3d59:	jne    3810 <quantum_gate2+0x170>
    3d5f:	jmp    38cd <quantum_gate2+0x22d>
    3d64:	nop    DWORD PTR [rax+0x0]
    3d68:	movss  xmm5,DWORD PTR [r15]
    3d6d:	movss  xmm4,DWORD PTR [r15+0x4]
    3d73:	sub    ecx,0x1
    3d76:	js     4471 <quantum_gate2+0xdd1>
    3d7c:	movsxd rax,ecx
    3d7f:	shl    rax,0x4
    3d83:	add    rax,rbp
    3d86:	movss  xmm6,DWORD PTR [rax]
    3d8a:	movss  xmm7,DWORD PTR [rax+0x4]
    3d8f:	mov    eax,DWORD PTR [rsp+0xc]
    3d93:	test   eax,eax
    3d95:	jne    3aff <quantum_gate2+0x45f>
    3d9b:	movss  xmm14,DWORD PTR [r13+0x0]
    3da1:	movss  xmm1,DWORD PTR [r13+0x4]
    3da7:	movaps xmm0,xmm4
    3daa:	movaps xmm8,xmm5
    3dae:	mulss  xmm0,xmm1
    3db2:	movaps xmm13,xmm14
    3db6:	mulss  xmm13,xmm5
    3dbb:	mulss  xmm8,xmm1
    3dc0:	subss  xmm13,xmm0
    3dc5:	movaps xmm0,xmm14
    3dc9:	mulss  xmm0,xmm4
    3dcd:	addss  xmm8,xmm0
    3dd2:	ucomiss xmm13,xmm8
    3dd6:	jp     43d9 <quantum_gate2+0xd39>
    3ddc:	movss  xmm14,DWORD PTR [r13+0x8]
    3de2:	movaps xmm2,xmm6
    3de5:	movaps xmm0,xmm7
    3de8:	movaps xmm3,xmm7
    3deb:	movss  xmm1,DWORD PTR [r13+0xc]
    3df1:	mulss  xmm2,xmm14
    3df6:	mulss  xmm0,xmm1
    3dfa:	mulss  xmm3,xmm14
    3dff:	subss  xmm2,xmm0
    3e03:	movaps xmm0,xmm6
    3e06:	mulss  xmm0,xmm1
    3e0a:	addss  xmm0,xmm3
    3e0e:	ucomiss xmm0,xmm2
    3e11:	jp     4327 <quantum_gate2+0xc87>
    3e17:	addss  xmm13,xmm2
    3e1c:	addss  xmm0,xmm8
    3e21:	movss  DWORD PTR [r15],xmm13
    3e26:	movss  DWORD PTR [r15+0x4],xmm0
    3e2c:	test   ecx,ecx
    3e2e:	js     3f98 <quantum_gate2+0x8f8>
    3e34:	movss  xmm0,DWORD PTR [r13+0x10]
    3e3a:	movss  xmm1,DWORD PTR [r13+0x14]
    3e40:	movaps xmm13,xmm5
    3e44:	movaps xmm2,xmm4
    3e47:	movaps xmm8,xmm4
    3e4b:	mulss  xmm2,xmm1
    3e4f:	mulss  xmm13,xmm0
    3e54:	mulss  xmm8,xmm0
    3e59:	subss  xmm13,xmm2
    3e5e:	movaps xmm2,xmm5
    3e61:	mulss  xmm2,xmm1
    3e65:	addss  xmm8,xmm2
    3e6a:	ucomiss xmm13,xmm8
    3e6e:	jp     42ab <quantum_gate2+0xc0b>
    3e74:	movss  xmm4,DWORD PTR [r13+0x18]
    3e7a:	movaps xmm2,xmm6
    3e7d:	movaps xmm0,xmm7
    3e80:	movaps xmm3,xmm6
    3e83:	movss  xmm1,DWORD PTR [r13+0x1c]
    3e89:	mulss  xmm2,xmm4
    3e8d:	mulss  xmm0,xmm1
    3e91:	mulss  xmm3,xmm1
    3e95:	subss  xmm2,xmm0
    3e99:	movaps xmm0,xmm7
    3e9c:	mulss  xmm0,xmm4
    3ea0:	addss  xmm0,xmm3
    3ea4:	ucomiss xmm2,xmm0
    3ea7:	jnp    3c10 <quantum_gate2+0x570>
    3ead:	movaps xmm0,xmm4
    3eb0:	movaps xmm2,xmm6
    3eb3:	movaps xmm3,xmm7
    3eb6:	mov    QWORD PTR [rsp+0x48],r8
    3ebb:	mov    QWORD PTR [rsp+0x40],r10
    3ec0:	mov    DWORD PTR [rsp+0xc],ecx
    3ec4:	movss  DWORD PTR [rsp+0x3c],xmm9
    3ecb:	movss  DWORD PTR [rsp+0x30],xmm8
    3ed2:	movss  DWORD PTR [rsp+0x28],xmm13
    3ed9:	call   8d40 <__mulsc3>
    3ede:	movq   QWORD PTR [rsp+0x80],xmm0
    3ee7:	movss  xmm2,DWORD PTR [rsp+0x80]
    3ef0:	movss  xmm0,DWORD PTR [rsp+0x84]
    3ef9:	jmp    416b <quantum_gate2+0xacb>
    3efe:	xchg   ax,ax
    3f00:	xor    eax,eax
    3f02:	jmp    3828 <quantum_gate2+0x188>
    3f07:	nop    WORD PTR [rax+rax*1+0x0]
    3f10:	movss  xmm6,DWORD PTR [r13+0x8]
    3f16:	mov    edx,0x0
    3f1b:	movss  xmm1,DWORD PTR [r13+0xc]
    3f21:	ucomiss xmm6,xmm11
    3f25:	setnp  al
    3f28:	cmovne eax,edx
    3f2b:	test   al,al
    3f2d:	je     3f41 <quantum_gate2+0x8a1>
    3f2f:	ucomiss xmm1,xmm11
    3f33:	setnp  al
    3f36:	cmove  edx,eax
    3f39:	test   dl,dl
    3f3b:	jne    3c46 <quantum_gate2+0x5a6>
    3f41:	movaps xmm0,xmm4
    3f44:	movaps xmm2,xmm5
    3f47:	movaps xmm3,xmm5
    3f4a:	movsxd rax,DWORD PTR [rsp+0x20]
    3f4f:	mulss  xmm0,xmm1
    3f53:	mulss  xmm2,xmm6
    3f57:	shl    rax,0x4
    3f5b:	mulss  xmm3,xmm1
    3f5f:	add    rbp,rax
    3f62:	mov    QWORD PTR [rbp+0x8],rbx
    3f66:	subss  xmm2,xmm0
    3f6a:	movaps xmm0,xmm4
    3f6d:	mulss  xmm0,xmm6
    3f71:	addss  xmm0,xmm3
    3f75:	ucomiss xmm2,xmm0
    3f78:	jp     447d <quantum_gate2+0xddd>
    3f7e:	movss  DWORD PTR [rbp+0x0],xmm2
    3f83:	movss  DWORD PTR [rbp+0x4],xmm0
    3f88:	add    DWORD PTR [rsp+0x20],0x1
    3f8d:	jmp    3a30 <quantum_gate2+0x390>
    3f92:	nop    WORD PTR [rax+rax*1+0x0]
    3f98:	movss  xmm1,DWORD PTR [r13+0x14]
    3f9e:	mov    eax,0x0
    3fa3:	ucomiss xmm1,xmm10
    3fa7:	setnp  cl
    3faa:	cmovne ecx,eax
    3fad:	ucomiss xmm10,DWORD PTR [r13+0x8]
    3fb2:	setnp  dl
    3fb5:	cmovne edx,eax
    3fb8:	test   dl,dl
    3fba:	je     40d0 <quantum_gate2+0xa30>
    3fc0:	ucomiss xmm10,DWORD PTR [r13+0xc]
    3fc5:	setnp  dl
    3fc8:	cmovne edx,eax
    3fcb:	test   dl,dl
    3fcd:	je     40d0 <quantum_gate2+0xa30>
    3fd3:	movss  xmm6,DWORD PTR [r13+0x10]
    3fd9:	ucomiss xmm6,xmm10
    3fdd:	setnp  dl
    3fe0:	cmove  eax,edx
    3fe3:	test   al,al
    3fe5:	je     3fef <quantum_gate2+0x94f>
    3fe7:	test   cl,cl
    3fe9:	jne    3c46 <quantum_gate2+0x5a6>
    3fef:	movaps xmm0,xmm4
    3ff2:	movaps xmm2,xmm5
    3ff5:	movaps xmm3,xmm5
    3ff8:	movsxd rax,DWORD PTR [rsp+0x20]
    3ffd:	mulss  xmm0,xmm1
    4001:	mulss  xmm2,xmm6
    4005:	shl    rax,0x4
    4009:	mulss  xmm3,xmm1
    400d:	add    rbp,rax
    4010:	mov    QWORD PTR [rbp+0x8],rbx
    4014:	subss  xmm2,xmm0
    4018:	movaps xmm0,xmm4
    401b:	mulss  xmm0,xmm6
    401f:	addss  xmm0,xmm3
    4023:	ucomiss xmm2,xmm0
    4026:	jnp    3f7e <quantum_gate2+0x8de>
    402c:	movaps xmm0,xmm6
    402f:	movaps xmm2,xmm5
    4032:	movaps xmm3,xmm4
    4035:	mov    QWORD PTR [rsp+0x30],r8
    403a:	mov    QWORD PTR [rsp+0x28],r10
    403f:	movss  DWORD PTR [rsp+0xc],xmm9
    4046:	call   8d40 <__mulsc3>
    404b:	movq   QWORD PTR [rsp+0x70],xmm0
    4051:	movss  xmm2,DWORD PTR [rsp+0x70]
    4057:	movss  xmm0,DWORD PTR [rsp+0x74]
    405d:	pxor   xmm11,xmm11
    4062:	mov    r8,QWORD PTR [rsp+0x30]
    4067:	mov    r10,QWORD PTR [rsp+0x28]
    406c:	movss  xmm9,DWORD PTR [rsp+0xc]
    4073:	movaps xmm10,xmm11
    4077:	movaps xmm12,xmm11
    407b:	jmp    3f7e <quantum_gate2+0x8de>
    4080:	mov    rdx,rax
    4083:	and    eax,0x1
    4086:	pxor   xmm0,xmm0
    408a:	shr    rdx,1
    408d:	or     rdx,rax
    4090:	cvtsi2sd xmm0,rdx
    4095:	addsd  xmm0,xmm0
    4099:	jmp    39c6 <quantum_gate2+0x326>
    409e:	movsxd rsi,r9d
    40a1:	mov    rdi,r12
    40a4:	shl    rsi,0x4
    40a8:	call   1290 <realloc@plt>
    40ad:	mov    QWORD PTR [r14+0x10],rax
    40b1:	test   rax,rax
    40b4:	je     40f2 <quantum_gate2+0xa52>
    40b6:	xor    edi,edi
    40b8:	xor    ebx,ebx
    40ba:	call   5140 <quantum_memman>
    40bf:	mov    DWORD PTR [rsp+0x24],0x0
    40c7:	mov    ebp,DWORD PTR [r14+0x4]
    40cb:	jmp    396b <quantum_gate2+0x2cb>
    40d0:	movss  xmm6,DWORD PTR [r13+0x10]
    40d6:	mov    edx,0x0
    40db:	ucomiss xmm6,xmm10
    40df:	setnp  al
    40e2:	cmovne eax,edx
    40e5:	test   al,al
    40e7:	je     3fef <quantum_gate2+0x94f>
    40ed:	jmp    3fe7 <quantum_gate2+0x947>
    40f2:	mov    DWORD PTR [rsp+0x24],0x0
    40fa:	mov    edx,DWORD PTR [rsp+0x24]
    40fe:	mov    edi,0x1
    4103:	add    edx,DWORD PTR [r14+0x4]
    4107:	xor    eax,eax
    4109:	lea    rsi,[rip+0x5f98]        # a0a8 <_IO_stdin_used+0xa8>
    4110:	call   12a0 <__printf_chk@plt>
    4115:	mov    edi,0x1
    411a:	call   12e0 <exit@plt>
    411f:	movaps xmm0,xmm6
    4122:	movaps xmm2,xmm5
    4125:	movaps xmm3,xmm4
    4128:	mov    QWORD PTR [rsp+0x48],r8
    412d:	mov    QWORD PTR [rsp+0x40],r10
    4132:	mov    DWORD PTR [rsp+0xc],ecx
    4136:	movss  DWORD PTR [rsp+0x3c],xmm9
    413d:	movss  DWORD PTR [rsp+0x30],xmm8
    4144:	movss  DWORD PTR [rsp+0x28],xmm13
    414b:	call   8d40 <__mulsc3>
    4150:	movq   QWORD PTR [rsp+0x90],xmm0
    4159:	movss  xmm2,DWORD PTR [rsp+0x90]
    4162:	movss  xmm0,DWORD PTR [rsp+0x94]
    416b:	pxor   xmm11,xmm11
    4170:	mov    r8,QWORD PTR [rsp+0x48]
    4175:	mov    r10,QWORD PTR [rsp+0x40]
    417a:	movss  xmm9,DWORD PTR [rsp+0x3c]
    4181:	mov    ecx,DWORD PTR [rsp+0xc]
    4185:	movaps xmm10,xmm11
    4189:	movaps xmm12,xmm11
    418d:	movss  xmm8,DWORD PTR [rsp+0x30]
    4194:	movss  xmm13,DWORD PTR [rsp+0x28]
    419b:	jmp    3c10 <quantum_gate2+0x570>
    41a0:	lea    rdi,[rip+0x5f6c]        # a113 <_IO_stdin_used+0x113>
    41a7:	call   11e0 <puts@plt>
    41ac:	mov    edi,0x1
    41b1:	call   12e0 <exit@plt>
    41b6:	movaps xmm2,xmm5
    41b9:	movaps xmm0,xmm14
    41bd:	movaps xmm3,xmm4
    41c0:	mov    QWORD PTR [rsp+0x68],r8
    41c5:	mov    QWORD PTR [rsp+0x60],r10
    41ca:	mov    DWORD PTR [rsp+0x40],ecx
    41ce:	movss  DWORD PTR [rsp+0x58],xmm9
    41d5:	movss  DWORD PTR [rsp+0x50],xmm8
    41dc:	movss  DWORD PTR [rsp+0x48],xmm13
    41e3:	movss  DWORD PTR [rsp+0x3c],xmm7
    41e9:	movss  DWORD PTR [rsp+0x30],xmm6
    41ef:	movss  DWORD PTR [rsp+0x28],xmm4
    41f5:	movss  DWORD PTR [rsp+0xc],xmm5
    41fb:	call   8d40 <__mulsc3>
    4200:	pxor   xmm11,xmm11
    4205:	mov    ecx,DWORD PTR [rsp+0x40]
    4209:	mov    r8,QWORD PTR [rsp+0x68]
    420e:	mov    r10,QWORD PTR [rsp+0x60]
    4213:	movss  xmm9,DWORD PTR [rsp+0x58]
    421a:	movq   QWORD PTR [rsp+0xb0],xmm0
    4223:	movaps xmm10,xmm11
    4227:	movss  xmm2,DWORD PTR [rsp+0xb0]
    4230:	movss  xmm8,DWORD PTR [rsp+0x50]
    4237:	movaps xmm12,xmm11
    423b:	movss  xmm0,DWORD PTR [rsp+0xb4]
    4244:	movss  xmm13,DWORD PTR [rsp+0x48]
    424b:	movss  xmm7,DWORD PTR [rsp+0x3c]
    4251:	movss  xmm6,DWORD PTR [rsp+0x30]
    4257:	movss  xmm4,DWORD PTR [rsp+0x28]
    425d:	movss  xmm5,DWORD PTR [rsp+0xc]
    4263:	jmp    3b7a <quantum_gate2+0x4da>
    4268:	mov    edx,DWORD PTR [rsp+0x24]
    426c:	mov    edi,0x1
    4271:	add    edx,DWORD PTR [r14+0x4]
    4275:	lea    rsi,[rip+0x5e2c]        # a0a8 <_IO_stdin_used+0xa8>
    427c:	call   12a0 <__printf_chk@plt>
    4281:	mov    edi,0x1
    4286:	call   12e0 <exit@plt>
    428b:	mov    edi,0x1
    4290:	mov    rdx,r12
    4293:	lea    rsi,[rip+0x5e36]        # a0d0 <_IO_stdin_used+0xd0>
    429a:	xor    eax,eax
    429c:	call   12a0 <__printf_chk@plt>
    42a1:	mov    edi,0x1
    42a6:	call   12e0 <exit@plt>
    42ab:	movaps xmm3,xmm4
    42ae:	movaps xmm2,xmm5
    42b1:	mov    QWORD PTR [rsp+0x48],r8
    42b6:	mov    QWORD PTR [rsp+0x40],r10
    42bb:	mov    DWORD PTR [rsp+0x30],ecx
    42bf:	movss  DWORD PTR [rsp+0x3c],xmm9
    42c6:	movss  DWORD PTR [rsp+0x28],xmm7
    42cc:	movss  DWORD PTR [rsp+0xc],xmm6
    42d2:	call   8d40 <__mulsc3>
    42d7:	pxor   xmm11,xmm11
    42dc:	mov    ecx,DWORD PTR [rsp+0x30]
    42e0:	mov    r8,QWORD PTR [rsp+0x48]
    42e5:	mov    r10,QWORD PTR [rsp+0x40]
    42ea:	movss  xmm7,DWORD PTR [rsp+0x28]
    42f0:	movaps xmm10,xmm11
    42f4:	movq   QWORD PTR [rsp+0x88],xmm0
    42fd:	movss  xmm9,DWORD PTR [rsp+0x3c]
    4304:	movss  xmm6,DWORD PTR [rsp+0xc]
    430a:	movaps xmm12,xmm11
    430e:	movss  xmm13,DWORD PTR [rsp+0x88]
    4318:	movss  xmm8,DWORD PTR [rsp+0x8c]
    4322:	jmp    3e74 <quantum_gate2+0x7d4>
    4327:	movaps xmm2,xmm6
    432a:	movaps xmm0,xmm14
    432e:	movaps xmm3,xmm7
    4331:	mov    QWORD PTR [rsp+0x68],r8
    4336:	mov    QWORD PTR [rsp+0x60],r10
    433b:	mov    DWORD PTR [rsp+0x40],ecx
    433f:	movss  DWORD PTR [rsp+0x58],xmm9
    4346:	movss  DWORD PTR [rsp+0x50],xmm8
    434d:	movss  DWORD PTR [rsp+0x48],xmm13
    4354:	movss  DWORD PTR [rsp+0x3c],xmm5
    435a:	movss  DWORD PTR [rsp+0x30],xmm4
    4360:	movss  DWORD PTR [rsp+0x28],xmm7
    4366:	movss  DWORD PTR [rsp+0xc],xmm6
    436c:	call   8d40 <__mulsc3>
    4371:	pxor   xmm11,xmm11
    4376:	mov    ecx,DWORD PTR [rsp+0x40]
    437a:	mov    r8,QWORD PTR [rsp+0x68]
    437f:	mov    r10,QWORD PTR [rsp+0x60]
    4384:	movss  xmm9,DWORD PTR [rsp+0x58]
    438b:	movq   QWORD PTR [rsp+0xa0],xmm0
    4394:	movaps xmm10,xmm11
    4398:	movss  xmm2,DWORD PTR [rsp+0xa0]
    43a1:	movss  xmm8,DWORD PTR [rsp+0x50]
    43a8:	movaps xmm12,xmm11
    43ac:	movss  xmm0,DWORD PTR [rsp+0xa4]
    43b5:	movss  xmm13,DWORD PTR [rsp+0x48]
    43bc:	movss  xmm5,DWORD PTR [rsp+0x3c]
    43c2:	movss  xmm4,DWORD PTR [rsp+0x30]
    43c8:	movss  xmm7,DWORD PTR [rsp+0x28]
    43ce:	movss  xmm6,DWORD PTR [rsp+0xc]
    43d4:	jmp    3e17 <quantum_gate2+0x777>
    43d9:	movaps xmm3,xmm4
    43dc:	movaps xmm2,xmm5
    43df:	movaps xmm0,xmm14
    43e3:	mov    QWORD PTR [rsp+0x58],r8
    43e8:	mov    QWORD PTR [rsp+0x50],r10
    43ed:	mov    DWORD PTR [rsp+0x40],ecx
    43f1:	movss  DWORD PTR [rsp+0x48],xmm9
    43f8:	movss  DWORD PTR [rsp+0x3c],xmm7
    43fe:	movss  DWORD PTR [rsp+0x30],xmm6
    4404:	movss  DWORD PTR [rsp+0x28],xmm4
    440a:	movss  DWORD PTR [rsp+0xc],xmm5
    4410:	call   8d40 <__mulsc3>
    4415:	pxor   xmm11,xmm11
    441a:	mov    ecx,DWORD PTR [rsp+0x40]
    441e:	mov    r8,QWORD PTR [rsp+0x58]
    4423:	mov    r10,QWORD PTR [rsp+0x50]
    4428:	movss  xmm7,DWORD PTR [rsp+0x3c]
    442e:	movaps xmm10,xmm11
    4432:	movq   QWORD PTR [rsp+0xa8],xmm0
    443b:	movss  xmm6,DWORD PTR [rsp+0x30]
    4441:	movss  xmm4,DWORD PTR [rsp+0x28]
    4447:	movaps xmm12,xmm11
    444b:	movss  xmm13,DWORD PTR [rsp+0xa8]
    4455:	movss  xmm9,DWORD PTR [rsp+0x48]
    445c:	movss  xmm8,DWORD PTR [rsp+0xac]
    4466:	movss  xmm5,DWORD PTR [rsp+0xc]
    446c:	jmp    3ddc <quantum_gate2+0x73c>
    4471:	pxor   xmm7,xmm7
    4475:	movaps xmm6,xmm7
    4478:	jmp    3af3 <quantum_gate2+0x453>
    447d:	movaps xmm0,xmm6
    4480:	movaps xmm2,xmm5
    4483:	movaps xmm3,xmm4
    4486:	mov    QWORD PTR [rsp+0x30],r8
    448b:	mov    QWORD PTR [rsp+0x28],r10
    4490:	movss  DWORD PTR [rsp+0xc],xmm9
    4497:	call   8d40 <__mulsc3>
    449c:	movq   QWORD PTR [rsp+0x78],xmm0
    44a2:	movss  xmm2,DWORD PTR [rsp+0x78]
    44a8:	movss  xmm0,DWORD PTR [rsp+0x7c]
    44ae:	jmp    405d <quantum_gate2+0x9bd>
    44b3:	movaps xmm3,xmm7
    44b6:	movaps xmm2,xmm6
    44b9:	mov    QWORD PTR [rsp+0x58],r8
    44be:	mov    QWORD PTR [rsp+0x50],r10
    44c3:	mov    DWORD PTR [rsp+0x40],ecx
    44c7:	movss  DWORD PTR [rsp+0x48],xmm9
    44ce:	movss  DWORD PTR [rsp+0x3c],xmm5
    44d4:	movss  DWORD PTR [rsp+0x30],xmm4
    44da:	movss  DWORD PTR [rsp+0x28],xmm7
    44e0:	movss  DWORD PTR [rsp+0xc],xmm6
    44e6:	call   8d40 <__mulsc3>
    44eb:	pxor   xmm11,xmm11
    44f0:	mov    ecx,DWORD PTR [rsp+0x40]
    44f4:	mov    r8,QWORD PTR [rsp+0x58]
    44f9:	mov    r10,QWORD PTR [rsp+0x50]
    44fe:	movss  xmm5,DWORD PTR [rsp+0x3c]
    4504:	movaps xmm10,xmm11
    4508:	movq   QWORD PTR [rsp+0xb8],xmm0
    4511:	movss  xmm4,DWORD PTR [rsp+0x30]
    4517:	movss  xmm7,DWORD PTR [rsp+0x28]
    451d:	movaps xmm12,xmm11
    4521:	movss  xmm13,DWORD PTR [rsp+0xb8]
    452b:	movss  xmm9,DWORD PTR [rsp+0x48]
    4532:	movss  xmm8,DWORD PTR [rsp+0xbc]
    453c:	movss  xmm6,DWORD PTR [rsp+0xc]
    4542:	jmp    3b3f <quantum_gate2+0x49f>
    4547:	movaps xmm3,xmm7
    454a:	movaps xmm2,xmm6
    454d:	mov    QWORD PTR [rsp+0x48],r8
    4552:	mov    QWORD PTR [rsp+0x40],r10
    4557:	mov    DWORD PTR [rsp+0x30],ecx
    455b:	movss  DWORD PTR [rsp+0x3c],xmm9
    4562:	movss  DWORD PTR [rsp+0x28],xmm5
    4568:	movss  DWORD PTR [rsp+0xc],xmm4
    456e:	call   8d40 <__mulsc3>
    4573:	pxor   xmm11,xmm11
    4578:	mov    ecx,DWORD PTR [rsp+0x30]
    457c:	mov    r8,QWORD PTR [rsp+0x48]
    4581:	mov    r10,QWORD PTR [rsp+0x40]
    4586:	movss  xmm5,DWORD PTR [rsp+0x28]
    458c:	movaps xmm10,xmm11
    4590:	movq   QWORD PTR [rsp+0x98],xmm0
    4599:	movss  xmm9,DWORD PTR [rsp+0x3c]
    45a0:	movss  xmm4,DWORD PTR [rsp+0xc]
    45a6:	movaps xmm12,xmm11
    45aa:	movss  xmm13,DWORD PTR [rsp+0x98]
    45b4:	movss  xmm8,DWORD PTR [rsp+0x9c]
    45be:	jmp    3bd7 <quantum_gate2+0x537>
    45c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    45ce:	xchg   ax,ax

00000000000045d0 <quantum_hadamard>:
    45d0:	endbr64 
    45d4:	push   r12
    45d6:	mov    r12,rsi
    45d9:	mov    esi,edi
    45db:	push   rbp
    45dc:	mov    ebp,edi
    45de:	mov    edi,0x6
    45e3:	sub    rsp,0x28
    45e7:	mov    rax,QWORD PTR fs:0x28
    45f0:	mov    QWORD PTR [rsp+0x18],rax
    45f5:	xor    eax,eax
    45f7:	call   64a0 <quantum_objcode_put>
    45fc:	test   eax,eax
    45fe:	jne    467f <quantum_hadamard+0xaf>
    4600:	mov    esi,0x2
    4605:	mov    edi,0x2
    460a:	call   5170 <quantum_new_matrix>
    460f:	movss  xmm0,DWORD PTR [rip+0x5b25]        # a13c <_IO_stdin_used+0x13c>
    4617:	mov    edi,ebp
    4619:	mov    rcx,r12
    461c:	mov    QWORD PTR [rsp+0x8],rdx
    4621:	movss  xmm1,DWORD PTR [rip+0x5b0f]        # a138 <_IO_stdin_used+0x138>
    4629:	mov    QWORD PTR [rsp],rax
    462d:	mov    rax,QWORD PTR [rsp+0x8]
    4632:	mov    rsi,QWORD PTR [rsp]
    4636:	mov    rdx,QWORD PTR [rsp+0x8]
    463b:	movss  DWORD PTR [rax+0x4],xmm0
    4640:	movss  DWORD PTR [rax+0xc],xmm0
    4645:	movss  DWORD PTR [rax+0x14],xmm0
    464a:	movss  xmm0,DWORD PTR [rip+0x5aee]        # a140 <_IO_stdin_used+0x140>
    4652:	movss  DWORD PTR [rax],xmm1
    4656:	movss  DWORD PTR [rax+0x18],xmm0
    465b:	movss  xmm0,DWORD PTR [rip+0x5ae1]        # a144 <_IO_stdin_used+0x144>
    4663:	movss  DWORD PTR [rax+0x8],xmm1
    4668:	movss  DWORD PTR [rax+0x10],xmm1
    466d:	movss  DWORD PTR [rax+0x1c],xmm0
    4672:	call   2740 <quantum_gate1>
    4677:	mov    rdi,rsp
    467a:	call   5200 <quantum_delete_matrix>
    467f:	mov    rax,QWORD PTR [rsp+0x18]
    4684:	xor    rax,QWORD PTR fs:0x28
    468d:	jne    4697 <quantum_hadamard+0xc7>
    468f:	add    rsp,0x28
    4693:	pop    rbp
    4694:	pop    r12
    4696:	ret    
    4697:	call   1210 <__stack_chk_fail@plt>
    469c:	nop    DWORD PTR [rax+0x0]

00000000000046a0 <quantum_walsh>:
    46a0:	endbr64 
    46a4:	test   edi,edi
    46a6:	jle    46d0 <quantum_walsh+0x30>
    46a8:	push   r12
    46aa:	mov    r12,rsi
    46ad:	push   rbp
    46ae:	mov    ebp,edi
    46b0:	push   rbx
    46b1:	xor    ebx,ebx
    46b3:	nop    DWORD PTR [rax+rax*1+0x0]
    46b8:	mov    edi,ebx
    46ba:	mov    rsi,r12
    46bd:	add    ebx,0x1
    46c0:	call   45d0 <quantum_hadamard>
    46c5:	cmp    ebp,ebx
    46c7:	jne    46b8 <quantum_walsh+0x18>
    46c9:	pop    rbx
    46ca:	pop    rbp
    46cb:	pop    r12
    46cd:	ret    
    46ce:	xchg   ax,ax
    46d0:	ret    
    46d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    46dc:	nop    DWORD PTR [rax+0x0]

00000000000046e0 <quantum_r_x>:
    46e0:	endbr64 
    46e4:	push   r12
    46e6:	mov    r12,rsi
    46e9:	mov    esi,edi
    46eb:	push   rbp
    46ec:	mov    ebp,edi
    46ee:	mov    edi,0x7
    46f3:	sub    rsp,0x48
    46f7:	mov    rax,QWORD PTR fs:0x28
    4700:	mov    QWORD PTR [rsp+0x38],rax
    4705:	xor    eax,eax
    4707:	mov    eax,0x1
    470c:	movss  DWORD PTR [rsp+0xc],xmm0
    4712:	cvtss2sd xmm0,xmm0
    4716:	call   64a0 <quantum_objcode_put>
    471b:	test   eax,eax
    471d:	jne    47d6 <quantum_r_x+0xf6>
    4723:	mov    esi,0x2
    4728:	mov    edi,0x2
    472d:	call   5170 <quantum_new_matrix>
    4732:	movss  xmm0,DWORD PTR [rsp+0xc]
    4738:	lea    rdi,[rsp+0x18]
    473d:	mulss  xmm0,DWORD PTR [rip+0x592f]        # a074 <_IO_stdin_used+0x74>
    4745:	lea    rsi,[rsp+0x10]
    474a:	mov    QWORD PTR [rsp+0x20],rax
    474f:	mov    QWORD PTR [rsp+0x28],rdx
    4754:	cvtss2sd xmm0,xmm0
    4758:	call   1220 <sincos@plt>
    475d:	mov    rax,QWORD PTR [rsp+0x28]
    4762:	mov    edi,ebp
    4764:	movsd  xmm0,QWORD PTR [rsp+0x18]
    476a:	movsd  xmm1,QWORD PTR [rip+0x59ee]        # a160 <_IO_stdin_used+0x160>
    4772:	pxor   xmm2,xmm2
    4776:	mov    rcx,r12
    4779:	cvtsd2ss xmm2,QWORD PTR [rsp+0x10]
    477f:	mov    rsi,QWORD PTR [rsp+0x20]
    4784:	mov    rdx,QWORD PTR [rsp+0x28]
    4789:	mov    DWORD PTR [rax+0x4],0x0
    4790:	mulsd  xmm1,xmm0
    4794:	mov    DWORD PTR [rax+0x1c],0x0
    479b:	cvtsd2ss xmm0,xmm0
    479f:	xorps  xmm0,XMMWORD PTR [rip+0x588a]        # a030 <_IO_stdin_used+0x30>
    47a6:	movss  DWORD PTR [rax],xmm2
    47aa:	movss  DWORD PTR [rax+0xc],xmm0
    47af:	movss  DWORD PTR [rax+0x14],xmm0
    47b4:	movss  DWORD PTR [rax+0x18],xmm2
    47b9:	cvtsd2ss xmm1,xmm1
    47bd:	movss  DWORD PTR [rax+0x8],xmm1
    47c2:	movss  DWORD PTR [rax+0x10],xmm1
    47c7:	call   2740 <quantum_gate1>
    47cc:	lea    rdi,[rsp+0x20]
    47d1:	call   5200 <quantum_delete_matrix>
    47d6:	mov    rax,QWORD PTR [rsp+0x38]
    47db:	xor    rax,QWORD PTR fs:0x28
    47e4:	jne    47ee <quantum_r_x+0x10e>
    47e6:	add    rsp,0x48
    47ea:	pop    rbp
    47eb:	pop    r12
    47ed:	ret    
    47ee:	call   1210 <__stack_chk_fail@plt>
    47f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    47fe:	xchg   ax,ax

0000000000004800 <quantum_r_y>:
    4800:	endbr64 
    4804:	push   r12
    4806:	mov    r12,rsi
    4809:	mov    esi,edi
    480b:	push   rbp
    480c:	mov    ebp,edi
    480e:	mov    edi,0x8
    4813:	sub    rsp,0x48
    4817:	mov    rax,QWORD PTR fs:0x28
    4820:	mov    QWORD PTR [rsp+0x38],rax
    4825:	xor    eax,eax
    4827:	mov    eax,0x1
    482c:	movss  DWORD PTR [rsp+0xc],xmm0
    4832:	cvtss2sd xmm0,xmm0
    4836:	call   64a0 <quantum_objcode_put>
    483b:	test   eax,eax
    483d:	jne    48ed <quantum_r_y+0xed>
    4843:	mov    esi,0x2
    4848:	mov    edi,0x2
    484d:	call   5170 <quantum_new_matrix>
    4852:	movss  xmm0,DWORD PTR [rsp+0xc]
    4858:	lea    rdi,[rsp+0x18]
    485d:	mulss  xmm0,DWORD PTR [rip+0x580f]        # a074 <_IO_stdin_used+0x74>
    4865:	lea    rsi,[rsp+0x10]
    486a:	mov    QWORD PTR [rsp+0x20],rax
    486f:	mov    QWORD PTR [rsp+0x28],rdx
    4874:	cvtss2sd xmm0,xmm0
    4878:	call   1220 <sincos@plt>
    487d:	mov    rax,QWORD PTR [rsp+0x28]
    4882:	mov    edi,ebp
    4884:	movsd  xmm0,QWORD PTR [rsp+0x18]
    488a:	pxor   xmm1,xmm1
    488e:	mov    rsi,QWORD PTR [rsp+0x20]
    4893:	mov    rcx,r12
    4896:	cvtsd2ss xmm1,QWORD PTR [rsp+0x10]
    489c:	mov    DWORD PTR [rax+0x4],0x0
    48a3:	mov    rdx,QWORD PTR [rsp+0x28]
    48a8:	cvtsd2ss xmm0,xmm0
    48ac:	movaps xmm2,xmm0
    48af:	movss  DWORD PTR [rax],xmm1
    48b3:	xorps  xmm2,XMMWORD PTR [rip+0x5776]        # a030 <_IO_stdin_used+0x30>
    48ba:	mov    DWORD PTR [rax+0xc],0x0
    48c1:	mov    DWORD PTR [rax+0x14],0x0
    48c8:	mov    DWORD PTR [rax+0x1c],0x0
    48cf:	movss  DWORD PTR [rax+0x8],xmm2
    48d4:	movss  DWORD PTR [rax+0x10],xmm0
    48d9:	movss  DWORD PTR [rax+0x18],xmm1
    48de:	call   2740 <quantum_gate1>
    48e3:	lea    rdi,[rsp+0x20]
    48e8:	call   5200 <quantum_delete_matrix>
    48ed:	mov    rax,QWORD PTR [rsp+0x38]
    48f2:	xor    rax,QWORD PTR fs:0x28
    48fb:	jne    4905 <quantum_r_y+0x105>
    48fd:	add    rsp,0x48
    4901:	pop    rbp
    4902:	pop    r12
    4904:	ret    
    4905:	call   1210 <__stack_chk_fail@plt>
    490a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004910 <quantum_r_z>:
    4910:	endbr64 
    4914:	push   r14
    4916:	movaps xmm1,xmm0
    4919:	mov    eax,0x1
    491e:	cvtss2sd xmm0,xmm0
    4922:	push   r13
    4924:	mov    r13,rsi
    4927:	mov    esi,edi
    4929:	push   r12
    492b:	mov    r12d,edi
    492e:	mov    edi,0x9
    4933:	push   rbp
    4934:	push   rbx
    4935:	sub    rsp,0x20
    4939:	movss  DWORD PTR [rsp],xmm1
    493e:	call   64a0 <quantum_objcode_put>
    4943:	test   eax,eax
    4945:	je     4958 <quantum_r_z+0x48>
    4947:	add    rsp,0x20
    494b:	pop    rbx
    494c:	pop    rbp
    494d:	pop    r12
    494f:	pop    r13
    4951:	pop    r14
    4953:	ret    
    4954:	nop    DWORD PTR [rax+0x0]
    4958:	movss  xmm1,DWORD PTR [rsp]
    495d:	mulss  xmm1,DWORD PTR [rip+0x570f]        # a074 <_IO_stdin_used+0x74>
    4965:	movaps xmm0,xmm1
    4968:	call   1a80 <quantum_cexp>
    496d:	mov    eax,DWORD PTR [r13+0x4]
    4971:	movq   QWORD PTR [rsp+0x18],xmm0
    4977:	movss  xmm2,DWORD PTR [rsp+0x18]
    497d:	movss  xmm3,DWORD PTR [rsp+0x1c]
    4983:	test   eax,eax
    4985:	jle    4a30 <quantum_r_z+0x120>
    498b:	mov    rbx,QWORD PTR [r13+0x10]
    498f:	mov    ecx,r12d
    4992:	lea    r12d,[rax-0x1]
    4996:	mov    r14d,0x1
    499c:	shl    r12,0x4
    49a0:	shl    r14,cl
    49a3:	lea    rbp,[rbx+0x10]
    49a7:	add    r12,rbp
    49aa:	jmp    49ee <quantum_r_z+0xde>
    49ac:	nop    DWORD PTR [rax+0x0]
    49b0:	movaps xmm0,xmm3
    49b3:	movaps xmm4,xmm2
    49b6:	movaps xmm6,xmm2
    49b9:	mulss  xmm0,xmm1
    49bd:	mulss  xmm4,xmm5
    49c1:	mulss  xmm6,xmm1
    49c5:	subss  xmm4,xmm0
    49c9:	movaps xmm0,xmm3
    49cc:	mulss  xmm0,xmm5
    49d0:	addss  xmm0,xmm6
    49d4:	ucomiss xmm4,xmm0
    49d7:	jp     4a44 <quantum_r_z+0x134>
    49d9:	movss  DWORD PTR [rbx],xmm4
    49dd:	movss  DWORD PTR [rbx+0x4],xmm0
    49e2:	mov    rbx,rbp
    49e5:	cmp    rbp,r12
    49e8:	je     4a30 <quantum_r_z+0x120>
    49ea:	add    rbp,0x10
    49ee:	movss  xmm1,DWORD PTR [rbx+0x4]
    49f3:	movss  xmm5,DWORD PTR [rbx]
    49f7:	test   QWORD PTR [rbx+0x8],r14
    49fb:	jne    49b0 <quantum_r_z+0xa0>
    49fd:	movaps xmm0,xmm5
    4a00:	movss  DWORD PTR [rsp+0x4],xmm3
    4a06:	movss  DWORD PTR [rsp],xmm2
    4a0b:	call   9000 <__divsc3>
    4a10:	movss  xmm3,DWORD PTR [rsp+0x4]
    4a16:	movss  xmm2,DWORD PTR [rsp]
    4a1b:	movq   QWORD PTR [rsp+0x8],xmm0
    4a21:	movss  xmm4,DWORD PTR [rsp+0x8]
    4a27:	movss  xmm0,DWORD PTR [rsp+0xc]
    4a2d:	jmp    49d9 <quantum_r_z+0xc9>
    4a2f:	nop
    4a30:	add    rsp,0x20
    4a34:	mov    rdi,r13
    4a37:	pop    rbx
    4a38:	pop    rbp
    4a39:	pop    r12
    4a3b:	pop    r13
    4a3d:	pop    r14
    4a3f:	jmp    1b20 <quantum_decohere>
    4a44:	movaps xmm0,xmm5
    4a47:	movss  DWORD PTR [rsp+0x4],xmm3
    4a4d:	movss  DWORD PTR [rsp],xmm2
    4a52:	call   8d40 <__mulsc3>
    4a57:	movss  xmm2,DWORD PTR [rsp]
    4a5c:	movss  xmm3,DWORD PTR [rsp+0x4]
    4a62:	movq   QWORD PTR [rsp+0x10],xmm0
    4a68:	movss  xmm4,DWORD PTR [rsp+0x10]
    4a6e:	movss  xmm0,DWORD PTR [rsp+0x14]
    4a74:	jmp    49d9 <quantum_r_z+0xc9>
    4a79:	nop    DWORD PTR [rax+0x0]

0000000000004a80 <quantum_phase_scale>:
    4a80:	endbr64 
    4a84:	push   r13
    4a86:	movaps xmm1,xmm0
    4a89:	mov    r13,rsi
    4a8c:	mov    eax,0x1
    4a91:	push   r12
    4a93:	mov    esi,edi
    4a95:	mov    edi,0xb
    4a9a:	cvtss2sd xmm0,xmm0
    4a9e:	push   rbp
    4a9f:	push   rbx
    4aa0:	sub    rsp,0x28
    4aa4:	movss  DWORD PTR [rsp+0x8],xmm1
    4aaa:	call   64a0 <quantum_objcode_put>
    4aaf:	test   eax,eax
    4ab1:	je     4ac0 <quantum_phase_scale+0x40>
    4ab3:	add    rsp,0x28
    4ab7:	pop    rbx
    4ab8:	pop    rbp
    4ab9:	pop    r12
    4abb:	pop    r13
    4abd:	ret    
    4abe:	xchg   ax,ax
    4ac0:	movss  xmm1,DWORD PTR [rsp+0x8]
    4ac6:	movaps xmm0,xmm1
    4ac9:	call   1a80 <quantum_cexp>
    4ace:	mov    eax,DWORD PTR [r13+0x4]
    4ad2:	movq   QWORD PTR [rsp+0x18],xmm0
    4ad8:	movss  xmm2,DWORD PTR [rsp+0x18]
    4ade:	movss  xmm3,DWORD PTR [rsp+0x1c]
    4ae4:	test   eax,eax
    4ae6:	jle    4b47 <quantum_phase_scale+0xc7>
    4ae8:	mov    rbx,QWORD PTR [r13+0x10]
    4aec:	lea    r12d,[rax-0x1]
    4af0:	shl    r12,0x4
    4af4:	lea    rbp,[rbx+0x10]
    4af8:	add    r12,rbp
    4afb:	jmp    4b04 <quantum_phase_scale+0x84>
    4afd:	nop    DWORD PTR [rax]
    4b00:	add    rbp,0x10
    4b04:	movss  xmm5,DWORD PTR [rbx]
    4b08:	movss  xmm1,DWORD PTR [rbx+0x4]
    4b0d:	movaps xmm4,xmm2
    4b10:	movaps xmm0,xmm3
    4b13:	movaps xmm6,xmm2
    4b16:	mulss  xmm0,xmm1
    4b1a:	mulss  xmm4,xmm5
    4b1e:	mulss  xmm6,xmm1
    4b22:	subss  xmm4,xmm0
    4b26:	movaps xmm0,xmm3
    4b29:	mulss  xmm0,xmm5
    4b2d:	addss  xmm0,xmm6
    4b31:	ucomiss xmm4,xmm0
    4b34:	jp     4b59 <quantum_phase_scale+0xd9>
    4b36:	movss  DWORD PTR [rbx],xmm4
    4b3a:	movss  DWORD PTR [rbx+0x4],xmm0
    4b3f:	mov    rbx,rbp
    4b42:	cmp    r12,rbp
    4b45:	jne    4b00 <quantum_phase_scale+0x80>
    4b47:	add    rsp,0x28
    4b4b:	mov    rdi,r13
    4b4e:	pop    rbx
    4b4f:	pop    rbp
    4b50:	pop    r12
    4b52:	pop    r13
    4b54:	jmp    1b20 <quantum_decohere>
    4b59:	movaps xmm0,xmm5
    4b5c:	movss  DWORD PTR [rsp+0xc],xmm3
    4b62:	movss  DWORD PTR [rsp+0x8],xmm2
    4b68:	call   8d40 <__mulsc3>
    4b6d:	movss  xmm3,DWORD PTR [rsp+0xc]
    4b73:	movss  xmm2,DWORD PTR [rsp+0x8]
    4b79:	movq   QWORD PTR [rsp+0x10],xmm0
    4b7f:	movss  xmm4,DWORD PTR [rsp+0x10]
    4b85:	movss  xmm0,DWORD PTR [rsp+0x14]
    4b8b:	jmp    4b36 <quantum_phase_scale+0xb6>
    4b8d:	nop    DWORD PTR [rax]

0000000000004b90 <quantum_phase_kick>:
    4b90:	endbr64 
    4b94:	push   r14
    4b96:	movaps xmm1,xmm0
    4b99:	mov    eax,0x1
    4b9e:	cvtss2sd xmm0,xmm0
    4ba2:	push   r13
    4ba4:	mov    r13,rsi
    4ba7:	mov    esi,edi
    4ba9:	push   r12
    4bab:	mov    r12d,edi
    4bae:	mov    edi,0xa
    4bb3:	push   rbp
    4bb4:	push   rbx
    4bb5:	sub    rsp,0x20
    4bb9:	movss  DWORD PTR [rsp+0x8],xmm1
    4bbf:	call   64a0 <quantum_objcode_put>
    4bc4:	test   eax,eax
    4bc6:	je     4bd8 <quantum_phase_kick+0x48>
    4bc8:	add    rsp,0x20
    4bcc:	pop    rbx
    4bcd:	pop    rbp
    4bce:	pop    r12
    4bd0:	pop    r13
    4bd2:	pop    r14
    4bd4:	ret    
    4bd5:	nop    DWORD PTR [rax]
    4bd8:	movss  xmm1,DWORD PTR [rsp+0x8]
    4bde:	movaps xmm0,xmm1
    4be1:	call   1a80 <quantum_cexp>
    4be6:	mov    eax,DWORD PTR [r13+0x4]
    4bea:	movq   QWORD PTR [rsp+0x18],xmm0
    4bf0:	movss  xmm2,DWORD PTR [rsp+0x18]
    4bf6:	movss  xmm3,DWORD PTR [rsp+0x1c]
    4bfc:	test   eax,eax
    4bfe:	jle    4c75 <quantum_phase_kick+0xe5>
    4c00:	mov    rbx,QWORD PTR [r13+0x10]
    4c04:	mov    ecx,r12d
    4c07:	lea    r12d,[rax-0x1]
    4c0b:	mov    r14d,0x1
    4c11:	shl    r12,0x4
    4c15:	shl    r14,cl
    4c18:	lea    rbp,[rbx+0x10]
    4c1c:	add    r12,rbp
    4c1f:	jmp    4c2c <quantum_phase_kick+0x9c>
    4c21:	nop    DWORD PTR [rax+0x0]
    4c28:	add    rbp,0x10
    4c2c:	test   QWORD PTR [rbx+0x8],r14
    4c30:	je     4c6d <quantum_phase_kick+0xdd>
    4c32:	movss  xmm5,DWORD PTR [rbx]
    4c36:	movss  xmm1,DWORD PTR [rbx+0x4]
    4c3b:	movaps xmm4,xmm2
    4c3e:	movaps xmm0,xmm3
    4c41:	movaps xmm6,xmm2
    4c44:	mulss  xmm0,xmm1
    4c48:	mulss  xmm4,xmm5
    4c4c:	mulss  xmm6,xmm1
    4c50:	subss  xmm4,xmm0
    4c54:	movaps xmm0,xmm3
    4c57:	mulss  xmm0,xmm5
    4c5b:	addss  xmm0,xmm6
    4c5f:	ucomiss xmm4,xmm0
    4c62:	jp     4c89 <quantum_phase_kick+0xf9>
    4c64:	movss  DWORD PTR [rbx],xmm4
    4c68:	movss  DWORD PTR [rbx+0x4],xmm0
    4c6d:	mov    rbx,rbp
    4c70:	cmp    rbp,r12
    4c73:	jne    4c28 <quantum_phase_kick+0x98>
    4c75:	add    rsp,0x20
    4c79:	mov    rdi,r13
    4c7c:	pop    rbx
    4c7d:	pop    rbp
    4c7e:	pop    r12
    4c80:	pop    r13
    4c82:	pop    r14
    4c84:	jmp    1b20 <quantum_decohere>
    4c89:	movaps xmm0,xmm5
    4c8c:	movss  DWORD PTR [rsp+0xc],xmm3
    4c92:	movss  DWORD PTR [rsp+0x8],xmm2
    4c98:	call   8d40 <__mulsc3>
    4c9d:	movss  xmm3,DWORD PTR [rsp+0xc]
    4ca3:	movss  xmm2,DWORD PTR [rsp+0x8]
    4ca9:	movq   QWORD PTR [rsp+0x10],xmm0
    4caf:	movss  xmm4,DWORD PTR [rsp+0x10]
    4cb5:	movss  xmm0,DWORD PTR [rsp+0x14]
    4cbb:	jmp    4c64 <quantum_phase_kick+0xd4>
    4cbd:	nop    DWORD PTR [rax]

0000000000004cc0 <quantum_cond_phase>:
    4cc0:	endbr64 
    4cc4:	push   r14
    4cc6:	xor    eax,eax
    4cc8:	mov    r14d,esi
    4ccb:	push   r13
    4ccd:	mov    r13,rdx
    4cd0:	mov    edx,esi
    4cd2:	mov    esi,edi
    4cd4:	push   r12
    4cd6:	push   rbp
    4cd7:	push   rbx
    4cd8:	mov    ebx,edi
    4cda:	mov    edi,0xc
    4cdf:	sub    rsp,0x20
    4ce3:	call   64a0 <quantum_objcode_put>
    4ce8:	test   eax,eax
    4cea:	je     4d00 <quantum_cond_phase+0x40>
    4cec:	add    rsp,0x20
    4cf0:	pop    rbx
    4cf1:	pop    rbp
    4cf2:	pop    r12
    4cf4:	pop    r13
    4cf6:	pop    r14
    4cf8:	ret    
    4cf9:	nop    DWORD PTR [rax+0x0]
    4d00:	mov    ecx,ebx
    4d02:	mov    eax,0x1
    4d07:	sub    ecx,r14d
    4d0a:	shl    rax,cl
    4d0d:	test   rax,rax
    4d10:	js     4df8 <quantum_cond_phase+0x138>
    4d16:	pxor   xmm1,xmm1
    4d1a:	cvtsi2sd xmm1,rax
    4d1f:	movsd  xmm0,QWORD PTR [rip+0x5441]        # a168 <_IO_stdin_used+0x168>
    4d27:	divsd  xmm0,xmm1
    4d2b:	cvtsd2ss xmm0,xmm0
    4d2f:	call   1a80 <quantum_cexp>
    4d34:	mov    eax,DWORD PTR [r13+0x4]
    4d38:	movq   QWORD PTR [rsp+0x18],xmm0
    4d3e:	movss  xmm2,DWORD PTR [rsp+0x18]
    4d44:	movss  xmm3,DWORD PTR [rsp+0x1c]
    4d4a:	test   eax,eax
    4d4c:	jle    4ddd <quantum_cond_phase+0x11d>
    4d52:	mov    ecx,r14d
    4d55:	mov    rbp,QWORD PTR [r13+0x10]
    4d59:	mov    r12d,0x1
    4d5f:	lea    r14d,[rax-0x1]
    4d63:	shl    r12,cl
    4d66:	shl    r14,0x4
    4d6a:	bts    r12,rbx
    4d6e:	lea    rbx,[rbp+0x10]
    4d72:	add    r14,rbx
    4d75:	jmp    4d8c <quantum_cond_phase+0xcc>
    4d77:	nop    WORD PTR [rax+rax*1+0x0]
    4d80:	mov    rbp,rbx
    4d83:	cmp    rbx,r14
    4d86:	je     4ddd <quantum_cond_phase+0x11d>
    4d88:	add    rbx,0x10
    4d8c:	mov    rax,QWORD PTR [rbp+0x8]
    4d90:	and    rax,r12
    4d93:	cmp    r12,rax
    4d96:	jne    4d80 <quantum_cond_phase+0xc0>
    4d98:	movss  xmm5,DWORD PTR [rbp+0x0]
    4d9d:	movss  xmm1,DWORD PTR [rbp+0x4]
    4da2:	movaps xmm4,xmm2
    4da5:	movaps xmm0,xmm3
    4da8:	movaps xmm6,xmm2
    4dab:	mulss  xmm0,xmm1
    4daf:	mulss  xmm4,xmm5
    4db3:	mulss  xmm6,xmm1
    4db7:	subss  xmm4,xmm0
    4dbb:	movaps xmm0,xmm3
    4dbe:	mulss  xmm0,xmm5
    4dc2:	addss  xmm0,xmm6
    4dc6:	ucomiss xmm4,xmm0
    4dc9:	jp     4e16 <quantum_cond_phase+0x156>
    4dcb:	movss  DWORD PTR [rbp+0x0],xmm4
    4dd0:	movss  DWORD PTR [rbp+0x4],xmm0
    4dd5:	mov    rbp,rbx
    4dd8:	cmp    rbx,r14
    4ddb:	jne    4d88 <quantum_cond_phase+0xc8>
    4ddd:	add    rsp,0x20
    4de1:	mov    rdi,r13
    4de4:	pop    rbx
    4de5:	pop    rbp
    4de6:	pop    r12
    4de8:	pop    r13
    4dea:	pop    r14
    4dec:	jmp    1b20 <quantum_decohere>
    4df1:	nop    DWORD PTR [rax+0x0]
    4df8:	mov    rdx,rax
    4dfb:	and    eax,0x1
    4dfe:	pxor   xmm1,xmm1
    4e02:	shr    rdx,1
    4e05:	or     rdx,rax
    4e08:	cvtsi2sd xmm1,rdx
    4e0d:	addsd  xmm1,xmm1
    4e11:	jmp    4d1f <quantum_cond_phase+0x5f>
    4e16:	movaps xmm0,xmm5
    4e19:	movss  DWORD PTR [rsp+0xc],xmm3
    4e1f:	movss  DWORD PTR [rsp+0x8],xmm2
    4e25:	call   8d40 <__mulsc3>
    4e2a:	movss  xmm3,DWORD PTR [rsp+0xc]
    4e30:	movss  xmm2,DWORD PTR [rsp+0x8]
    4e36:	movq   QWORD PTR [rsp+0x10],xmm0
    4e3c:	movss  xmm4,DWORD PTR [rsp+0x10]
    4e42:	movss  xmm0,DWORD PTR [rsp+0x14]
    4e48:	jmp    4dcb <quantum_cond_phase+0x10b>
    4e4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004e50 <quantum_cond_phase_inv>:
    4e50:	endbr64 
    4e54:	push   r14
    4e56:	mov    ecx,edi
    4e58:	mov    eax,0x1
    4e5d:	mov    r14,rdx
    4e60:	push   r13
    4e62:	sub    ecx,esi
    4e64:	push   r12
    4e66:	shl    rax,cl
    4e69:	push   rbp
    4e6a:	mov    ebp,esi
    4e6c:	push   rbx
    4e6d:	mov    ebx,edi
    4e6f:	sub    rsp,0x20
    4e73:	test   rax,rax
    4e76:	js     4f58 <quantum_cond_phase_inv+0x108>
    4e7c:	pxor   xmm1,xmm1
    4e80:	cvtsi2sd xmm1,rax
    4e85:	movsd  xmm0,QWORD PTR [rip+0x52e3]        # a170 <_IO_stdin_used+0x170>
    4e8d:	divsd  xmm0,xmm1
    4e91:	cvtsd2ss xmm0,xmm0
    4e95:	call   1a80 <quantum_cexp>
    4e9a:	mov    eax,DWORD PTR [r14+0x4]
    4e9e:	movq   QWORD PTR [rsp+0x18],xmm0
    4ea4:	movss  xmm2,DWORD PTR [rsp+0x18]
    4eaa:	movss  xmm3,DWORD PTR [rsp+0x1c]
    4eb0:	test   eax,eax
    4eb2:	jle    4f3d <quantum_cond_phase_inv+0xed>
    4eb8:	mov    ecx,ebp
    4eba:	mov    r12d,0x1
    4ec0:	mov    rbp,QWORD PTR [r14+0x10]
    4ec4:	lea    r13d,[rax-0x1]
    4ec8:	shl    r12,cl
    4ecb:	shl    r13,0x4
    4ecf:	bts    r12,rbx
    4ed3:	lea    rbx,[rbp+0x10]
    4ed7:	add    r13,rbx
    4eda:	jmp    4eec <quantum_cond_phase_inv+0x9c>
    4edc:	nop    DWORD PTR [rax+0x0]
    4ee0:	mov    rbp,rbx
    4ee3:	cmp    rbx,r13
    4ee6:	je     4f3d <quantum_cond_phase_inv+0xed>
    4ee8:	add    rbx,0x10
    4eec:	mov    rax,QWORD PTR [rbp+0x8]
    4ef0:	and    rax,r12
    4ef3:	cmp    r12,rax
    4ef6:	jne    4ee0 <quantum_cond_phase_inv+0x90>
    4ef8:	movss  xmm5,DWORD PTR [rbp+0x0]
    4efd:	movss  xmm1,DWORD PTR [rbp+0x4]
    4f02:	movaps xmm4,xmm2
    4f05:	movaps xmm0,xmm3
    4f08:	movaps xmm6,xmm2
    4f0b:	mulss  xmm0,xmm1
    4f0f:	mulss  xmm4,xmm5
    4f13:	mulss  xmm6,xmm1
    4f17:	subss  xmm4,xmm0
    4f1b:	movaps xmm0,xmm3
    4f1e:	mulss  xmm0,xmm5
    4f22:	addss  xmm0,xmm6
    4f26:	ucomiss xmm4,xmm0
    4f29:	jp     4f76 <quantum_cond_phase_inv+0x126>
    4f2b:	movss  DWORD PTR [rbp+0x0],xmm4
    4f30:	movss  DWORD PTR [rbp+0x4],xmm0
    4f35:	mov    rbp,rbx
    4f38:	cmp    rbx,r13
    4f3b:	jne    4ee8 <quantum_cond_phase_inv+0x98>
    4f3d:	add    rsp,0x20
    4f41:	mov    rdi,r14
    4f44:	pop    rbx
    4f45:	pop    rbp
    4f46:	pop    r12
    4f48:	pop    r13
    4f4a:	pop    r14
    4f4c:	jmp    1b20 <quantum_decohere>
    4f51:	nop    DWORD PTR [rax+0x0]
    4f58:	mov    rdx,rax
    4f5b:	and    eax,0x1
    4f5e:	pxor   xmm1,xmm1
    4f62:	shr    rdx,1
    4f65:	or     rdx,rax
    4f68:	cvtsi2sd xmm1,rdx
    4f6d:	addsd  xmm1,xmm1
    4f71:	jmp    4e85 <quantum_cond_phase_inv+0x35>
    4f76:	movaps xmm0,xmm5
    4f79:	movss  DWORD PTR [rsp+0xc],xmm3
    4f7f:	movss  DWORD PTR [rsp+0x8],xmm2
    4f85:	call   8d40 <__mulsc3>
    4f8a:	movss  xmm3,DWORD PTR [rsp+0xc]
    4f90:	movss  xmm2,DWORD PTR [rsp+0x8]
    4f96:	movq   QWORD PTR [rsp+0x10],xmm0
    4f9c:	movss  xmm4,DWORD PTR [rsp+0x10]
    4fa2:	movss  xmm0,DWORD PTR [rsp+0x14]
    4fa8:	jmp    4f2b <quantum_cond_phase_inv+0xdb>
    4faa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004fb0 <quantum_cond_phase_kick>:
    4fb0:	endbr64 
    4fb4:	push   r14
    4fb6:	movaps xmm1,xmm0
    4fb9:	mov    r14d,esi
    4fbc:	mov    eax,0x1
    4fc1:	push   r13
    4fc3:	mov    r13,rdx
    4fc6:	mov    edx,esi
    4fc8:	mov    esi,edi
    4fca:	push   r12
    4fcc:	cvtss2sd xmm0,xmm0
    4fd0:	push   rbp
    4fd1:	push   rbx
    4fd2:	mov    ebx,edi
    4fd4:	mov    edi,0xc
    4fd9:	sub    rsp,0x20
    4fdd:	movss  DWORD PTR [rsp+0x8],xmm1
    4fe3:	call   64a0 <quantum_objcode_put>
    4fe8:	test   eax,eax
    4fea:	je     5000 <quantum_cond_phase_kick+0x50>
    4fec:	add    rsp,0x20
    4ff0:	pop    rbx
    4ff1:	pop    rbp
    4ff2:	pop    r12
    4ff4:	pop    r13
    4ff6:	pop    r14
    4ff8:	ret    
    4ff9:	nop    DWORD PTR [rax+0x0]
    5000:	movss  xmm1,DWORD PTR [rsp+0x8]
    5006:	movaps xmm0,xmm1
    5009:	call   1a80 <quantum_cexp>
    500e:	mov    eax,DWORD PTR [r13+0x4]
    5012:	movq   QWORD PTR [rsp+0x18],xmm0
    5018:	movss  xmm2,DWORD PTR [rsp+0x18]
    501e:	movss  xmm3,DWORD PTR [rsp+0x1c]
    5024:	test   eax,eax
    5026:	jle    50b5 <quantum_cond_phase_kick+0x105>
    502c:	mov    ecx,r14d
    502f:	mov    rbp,QWORD PTR [r13+0x10]
    5033:	mov    r12d,0x1
    5039:	lea    r14d,[rax-0x1]
    503d:	shl    r12,cl
    5040:	shl    r14,0x4
    5044:	bts    r12,rbx
    5048:	lea    rbx,[rbp+0x10]
    504c:	add    r14,rbx
    504f:	jmp    5064 <quantum_cond_phase_kick+0xb4>
    5051:	nop    DWORD PTR [rax+0x0]
    5058:	mov    rbp,rbx
    505b:	cmp    rbx,r14
    505e:	je     50b5 <quantum_cond_phase_kick+0x105>
    5060:	add    rbx,0x10
    5064:	mov    rax,QWORD PTR [rbp+0x8]
    5068:	and    rax,r12
    506b:	cmp    r12,rax
    506e:	jne    5058 <quantum_cond_phase_kick+0xa8>
    5070:	movss  xmm5,DWORD PTR [rbp+0x0]
    5075:	movss  xmm1,DWORD PTR [rbp+0x4]
    507a:	movaps xmm4,xmm2
    507d:	movaps xmm0,xmm3
    5080:	movaps xmm6,xmm2
    5083:	mulss  xmm0,xmm1
    5087:	mulss  xmm4,xmm5
    508b:	mulss  xmm6,xmm1
    508f:	subss  xmm4,xmm0
    5093:	movaps xmm0,xmm3
    5096:	mulss  xmm0,xmm5
    509a:	addss  xmm0,xmm6
    509e:	ucomiss xmm4,xmm0
    50a1:	jp     50c9 <quantum_cond_phase_kick+0x119>
    50a3:	movss  DWORD PTR [rbp+0x0],xmm4
    50a8:	movss  DWORD PTR [rbp+0x4],xmm0
    50ad:	mov    rbp,rbx
    50b0:	cmp    rbx,r14
    50b3:	jne    5060 <quantum_cond_phase_kick+0xb0>
    50b5:	add    rsp,0x20
    50b9:	mov    rdi,r13
    50bc:	pop    rbx
    50bd:	pop    rbp
    50be:	pop    r12
    50c0:	pop    r13
    50c2:	pop    r14
    50c4:	jmp    1b20 <quantum_decohere>
    50c9:	movaps xmm0,xmm5
    50cc:	movss  DWORD PTR [rsp+0xc],xmm3
    50d2:	movss  DWORD PTR [rsp+0x8],xmm2
    50d8:	call   8d40 <__mulsc3>
    50dd:	movss  xmm3,DWORD PTR [rsp+0xc]
    50e3:	movss  xmm2,DWORD PTR [rsp+0x8]
    50e9:	movq   QWORD PTR [rsp+0x10],xmm0
    50ef:	movss  xmm4,DWORD PTR [rsp+0x10]
    50f5:	movss  xmm0,DWORD PTR [rsp+0x14]
    50fb:	jmp    50a3 <quantum_cond_phase_kick+0xf3>
    50fd:	nop    DWORD PTR [rax]

0000000000005100 <quantum_gate_counter>:
    5100:	endbr64 
    5104:	test   edi,edi
    5106:	jle    5120 <quantum_gate_counter+0x20>
    5108:	mov    eax,DWORD PTR [rip+0x8f26]        # e034 <counter.4861>
    510e:	add    eax,edi
    5110:	mov    DWORD PTR [rip+0x8f1e],eax        # e034 <counter.4861>
    5116:	ret    
    5117:	nop    WORD PTR [rax+rax*1+0x0]
    5120:	jne    5130 <quantum_gate_counter+0x30>
    5122:	mov    eax,DWORD PTR [rip+0x8f0c]        # e034 <counter.4861>
    5128:	ret    
    5129:	nop    DWORD PTR [rax+0x0]
    5130:	mov    DWORD PTR [rip+0x8efa],0x0        # e034 <counter.4861>
    513a:	xor    eax,eax
    513c:	ret    
    513d:	nop    DWORD PTR [rax]

0000000000005140 <quantum_memman>:
    5140:	endbr64 
    5144:	mov    rax,QWORD PTR [rip+0x8ef5]        # e040 <mem.3447>
    514b:	add    rax,rdi
    514e:	cmp    rax,QWORD PTR [rip+0x8ee3]        # e038 <max.3448>
    5155:	mov    QWORD PTR [rip+0x8ee4],rax        # e040 <mem.3447>
    515c:	jle    5165 <quantum_memman+0x25>
    515e:	mov    QWORD PTR [rip+0x8ed3],rax        # e038 <max.3448>
    5165:	ret    
    5166:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000005170 <quantum_new_matrix>:
    5170:	endbr64 
    5174:	push   r13
    5176:	mov    r13d,edi
    5179:	mov    edi,esi
    517b:	push   r12
    517d:	imul   edi,r13d
    5181:	mov    r12d,esi
    5184:	mov    esi,0x8
    5189:	sub    rsp,0x8
    518d:	movsxd rdi,edi
    5190:	call   1250 <calloc@plt>
    5195:	test   rax,rax
    5198:	je     51dc <quantum_new_matrix+0x6c>
    519a:	movsxd rcx,r12d
    519d:	mov    rdx,rax
    51a0:	movsxd rax,r13d
    51a3:	imul   rax,rcx
    51a7:	mov    rcx,QWORD PTR [rip+0x8e92]        # e040 <mem.3447>
    51ae:	lea    rax,[rcx+rax*8]
    51b2:	cmp    rax,QWORD PTR [rip+0x8e7f]        # e038 <max.3448>
    51b9:	mov    QWORD PTR [rip+0x8e80],rax        # e040 <mem.3447>
    51c0:	jle    51c9 <quantum_new_matrix+0x59>
    51c2:	mov    QWORD PTR [rip+0x8e6f],rax        # e038 <max.3448>
    51c9:	shl    r13,0x20
    51cd:	mov    eax,r12d
    51d0:	add    rsp,0x8
    51d4:	or     rax,r13
    51d7:	pop    r12
    51d9:	pop    r13
    51db:	ret    
    51dc:	mov    edi,0x1
    51e1:	mov    ecx,r13d
    51e4:	mov    edx,r12d
    51e7:	xor    eax,eax
    51e9:	lea    rsi,[rip+0x4f88]        # a178 <_IO_stdin_used+0x178>
    51f0:	call   12a0 <__printf_chk@plt>
    51f5:	mov    edi,0x1
    51fa:	call   12e0 <exit@plt>
    51ff:	nop

0000000000005200 <quantum_delete_matrix>:
    5200:	endbr64 
    5204:	push   rbx
    5205:	mov    rbx,rdi
    5208:	mov    rdi,QWORD PTR [rdi+0x8]
    520c:	call   11c0 <free@plt>
    5211:	movsxd rdx,DWORD PTR [rbx]
    5214:	movsxd rax,DWORD PTR [rbx+0x4]
    5218:	imul   rax,rdx
    521c:	mov    rdx,QWORD PTR [rip+0x8e1d]        # e040 <mem.3447>
    5223:	neg    rax
    5226:	lea    rax,[rdx+rax*8]
    522a:	cmp    rax,QWORD PTR [rip+0x8e07]        # e038 <max.3448>
    5231:	mov    QWORD PTR [rip+0x8e08],rax        # e040 <mem.3447>
    5238:	jle    5241 <quantum_delete_matrix+0x41>
    523a:	mov    QWORD PTR [rip+0x8df7],rax        # e038 <max.3448>
    5241:	mov    QWORD PTR [rbx+0x8],0x0
    5249:	pop    rbx
    524a:	ret    
    524b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005250 <quantum_print_matrix>:
    5250:	endbr64 
    5254:	push   r15
    5256:	push   r14
    5258:	mov    r14,rdi
    525b:	push   r13
    525d:	sar    r14,0x20
    5261:	push   r12
    5263:	push   rbp
    5264:	push   rbx
    5265:	sub    rsp,0x18
    5269:	mov    DWORD PTR [rsp+0xc],edi
    526d:	mov    DWORD PTR [rsp+0x8],r14d
    5272:	test   edi,edi
    5274:	jle    52f8 <quantum_print_matrix+0xa8>
    527a:	mov    DWORD PTR [rsp+0x4],r14d
    527f:	mov    r15,rsi
    5282:	xor    r13d,r13d
    5285:	xor    r12d,r12d
    5288:	lea    rbp,[rip+0x4f0c]        # a19b <_IO_stdin_used+0x19b>
    528f:	nop
    5290:	mov    eax,DWORD PTR [rsp+0x8]
    5294:	test   eax,eax
    5296:	jle    52de <quantum_print_matrix+0x8e>
    5298:	mov    eax,DWORD PTR [rsp+0x4]
    529c:	movsxd rcx,r13d
    529f:	lea    r14,[r15+rcx*8]
    52a3:	sub    eax,0x1
    52a6:	add    rax,rcx
    52a9:	lea    rbx,[r15+rax*8+0x8]
    52ae:	xchg   ax,ax
    52b0:	pxor   xmm0,xmm0
    52b4:	pxor   xmm1,xmm1
    52b8:	mov    rsi,rbp
    52bb:	mov    edi,0x1
    52c0:	cvtss2sd xmm0,DWORD PTR [r14]
    52c5:	cvtss2sd xmm1,DWORD PTR [r14+0x4]
    52cb:	mov    eax,0x2
    52d0:	add    r14,0x8
    52d4:	call   12a0 <__printf_chk@plt>
    52d9:	cmp    r14,rbx
    52dc:	jne    52b0 <quantum_print_matrix+0x60>
    52de:	mov    edi,0xa
    52e3:	add    r12d,0x1
    52e7:	call   11d0 <putchar@plt>
    52ec:	add    r13d,DWORD PTR [rsp+0x4]
    52f1:	cmp    DWORD PTR [rsp+0xc],r12d
    52f6:	jne    5290 <quantum_print_matrix+0x40>
    52f8:	add    rsp,0x18
    52fc:	mov    edi,0xa
    5301:	pop    rbx
    5302:	pop    rbp
    5303:	pop    r12
    5305:	pop    r13
    5307:	pop    r14
    5309:	pop    r15
    530b:	jmp    11d0 <putchar@plt>

0000000000005310 <quantum_frand>:
    5310:	endbr64 
    5314:	jmp    8ce0 <spec_rand>
    5319:	nop    DWORD PTR [rax+0x0]

0000000000005320 <quantum_measure>:
    5320:	endbr64 
    5324:	push   rbp
    5325:	mov    edi,0x80
    532a:	xor    eax,eax
    532c:	push   rbx
    532d:	sub    rsp,0x8
    5331:	mov    ebp,DWORD PTR [rsp+0x24]
    5335:	mov    rbx,QWORD PTR [rsp+0x30]
    533a:	call   64a0 <quantum_objcode_put>
    533f:	mov    r8d,eax
    5342:	xor    eax,eax
    5344:	test   r8d,r8d
    5347:	je     5350 <quantum_measure+0x30>
    5349:	add    rsp,0x8
    534d:	pop    rbx
    534e:	pop    rbp
    534f:	ret    
    5350:	call   8ce0 <spec_rand>
    5355:	test   ebp,ebp
    5357:	jle    53b0 <quantum_measure+0x90>
    5359:	lea    edx,[rbp-0x1]
    535c:	mov    rax,rbx
    535f:	pxor   xmm3,xmm3
    5363:	shl    rdx,0x4
    5367:	lea    rdx,[rbx+rdx*1+0x10]
    536c:	jmp    5379 <quantum_measure+0x59>
    536e:	xchg   ax,ax
    5370:	add    rax,0x10
    5374:	cmp    rdx,rax
    5377:	je     53b0 <quantum_measure+0x90>
    5379:	movss  xmm2,DWORD PTR [rax+0x4]
    537e:	movss  xmm1,DWORD PTR [rax]
    5382:	mulss  xmm2,xmm2
    5386:	mulss  xmm1,xmm1
    538a:	addss  xmm1,xmm2
    538e:	cvtss2sd xmm1,xmm1
    5392:	subsd  xmm0,xmm1
    5396:	comisd xmm3,xmm0
    539a:	jb     5370 <quantum_measure+0x50>
    539c:	mov    rax,QWORD PTR [rax+0x8]
    53a0:	add    rsp,0x8
    53a4:	pop    rbx
    53a5:	pop    rbp
    53a6:	ret    
    53a7:	nop    WORD PTR [rax+rax*1+0x0]
    53b0:	add    rsp,0x8
    53b4:	mov    rax,0xffffffffffffffff
    53bb:	pop    rbx
    53bc:	pop    rbp
    53bd:	ret    
    53be:	xchg   ax,ax

00000000000053c0 <quantum_bmeasure>:
    53c0:	endbr64 
    53c4:	push   r12
    53c6:	xor    r12d,r12d
    53c9:	push   rbp
    53ca:	mov    ebp,edi
    53cc:	push   rbx
    53cd:	mov    rbx,rsi
    53d0:	mov    esi,edi
    53d2:	mov    edi,0x81
    53d7:	sub    rsp,0x40
    53db:	mov    rax,QWORD PTR fs:0x28
    53e4:	mov    QWORD PTR [rsp+0x38],rax
    53e9:	xor    eax,eax
    53eb:	call   64a0 <quantum_objcode_put>
    53f0:	test   eax,eax
    53f2:	jne    54ac <quantum_bmeasure+0xec>
    53f8:	mov    eax,DWORD PTR [rbx+0x4]
    53fb:	mov    edi,0x1
    5400:	mov    ecx,ebp
    5402:	shl    rdi,cl
    5405:	test   eax,eax
    5407:	jle    54d0 <quantum_bmeasure+0x110>
    540d:	mov    rdx,QWORD PTR [rbx+0x10]
    5411:	lea    esi,[rax-0x1]
    5414:	pxor   xmm2,xmm2
    5418:	shl    rsi,0x4
    541c:	lea    rax,[rdx+0x10]
    5420:	add    rsi,rax
    5423:	jmp    542c <quantum_bmeasure+0x6c>
    5425:	nop    DWORD PTR [rax]
    5428:	add    rax,0x10
    542c:	test   QWORD PTR [rdx+0x8],rdi
    5430:	jne    544f <quantum_bmeasure+0x8f>
    5432:	movss  xmm1,DWORD PTR [rdx+0x4]
    5437:	movss  xmm0,DWORD PTR [rdx]
    543b:	mulss  xmm1,xmm1
    543f:	mulss  xmm0,xmm0
    5443:	addss  xmm0,xmm1
    5447:	cvtss2sd xmm0,xmm0
    544b:	addsd  xmm2,xmm0
    544f:	mov    rdx,rax
    5452:	cmp    rax,rsi
    5455:	jne    5428 <quantum_bmeasure+0x68>
    5457:	movsd  QWORD PTR [rsp+0x8],xmm2
    545d:	xor    r12d,r12d
    5460:	call   8ce0 <spec_rand>
    5465:	movsd  xmm2,QWORD PTR [rsp+0x8]
    546b:	lea    rdi,[rsp+0x10]
    5470:	push   QWORD PTR [rbx+0x18]
    5473:	push   QWORD PTR [rbx+0x10]
    5476:	mov    esi,ebp
    5478:	comisd xmm0,xmm2
    547c:	push   QWORD PTR [rbx+0x8]
    547f:	push   QWORD PTR [rbx]
    5481:	seta   r12b
    5485:	mov    edx,r12d
    5488:	call   8700 <quantum_state_collapse>
    548d:	add    rsp,0x20
    5491:	mov    rdi,rbx
    5494:	call   8210 <quantum_delete_qureg_hashpreserve>
    5499:	movdqa xmm3,XMMWORD PTR [rsp+0x10]
    549f:	movdqa xmm4,XMMWORD PTR [rsp+0x20]
    54a5:	movups XMMWORD PTR [rbx],xmm3
    54a8:	movups XMMWORD PTR [rbx+0x10],xmm4
    54ac:	mov    rax,QWORD PTR [rsp+0x38]
    54b1:	xor    rax,QWORD PTR fs:0x28
    54ba:	jne    54d6 <quantum_bmeasure+0x116>
    54bc:	add    rsp,0x40
    54c0:	mov    eax,r12d
    54c3:	pop    rbx
    54c4:	pop    rbp
    54c5:	pop    r12
    54c7:	ret    
    54c8:	nop    DWORD PTR [rax+rax*1+0x0]
    54d0:	pxor   xmm2,xmm2
    54d4:	jmp    5457 <quantum_bmeasure+0x97>
    54d6:	call   1210 <__stack_chk_fail@plt>
    54db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000054e0 <quantum_bmeasure_bitpreserve>:
    54e0:	endbr64 
    54e4:	push   r15
    54e6:	xor    eax,eax
    54e8:	mov    r15,rsi
    54eb:	mov    esi,edi
    54ed:	push   r14
    54ef:	push   r13
    54f1:	push   r12
    54f3:	mov    r12d,edi
    54f6:	mov    edi,0x82
    54fb:	push   rbp
    54fc:	push   rbx
    54fd:	sub    rsp,0x48
    5501:	call   64a0 <quantum_objcode_put>
    5506:	test   eax,eax
    5508:	jne    57a0 <quantum_bmeasure_bitpreserve+0x2c0>
    550e:	mov    r14d,eax
    5511:	mov    eax,DWORD PTR [r15+0x4]
    5515:	mov    ebx,0x1
    551a:	mov    ecx,r12d
    551d:	shl    rbx,cl
    5520:	test   eax,eax
    5522:	jle    57c0 <quantum_bmeasure_bitpreserve+0x2e0>
    5528:	mov    rcx,QWORD PTR [r15+0x10]
    552c:	lea    esi,[rax-0x1]
    552f:	pxor   xmm6,xmm6
    5533:	shl    rsi,0x4
    5537:	movapd xmm2,xmm6
    553b:	lea    rax,[rcx+0x10]
    553f:	add    rsi,rax
    5542:	jmp    554c <quantum_bmeasure_bitpreserve+0x6c>
    5544:	nop    DWORD PTR [rax+0x0]
    5548:	add    rax,0x10
    554c:	test   QWORD PTR [rcx+0x8],rbx
    5550:	jne    556f <quantum_bmeasure_bitpreserve+0x8f>
    5552:	movss  xmm1,DWORD PTR [rcx+0x4]
    5557:	movss  xmm0,DWORD PTR [rcx]
    555b:	mulss  xmm1,xmm1
    555f:	mulss  xmm0,xmm0
    5563:	addss  xmm0,xmm1
    5567:	cvtss2sd xmm0,xmm0
    556b:	addsd  xmm2,xmm0
    556f:	mov    rcx,rax
    5572:	cmp    rsi,rax
    5575:	jne    5548 <quantum_bmeasure_bitpreserve+0x68>
    5577:	movsd  QWORD PTR [rsp+0x8],xmm6
    557d:	xor    r12d,r12d
    5580:	movsd  QWORD PTR [rsp],xmm2
    5585:	call   8ce0 <spec_rand>
    558a:	movsd  xmm2,QWORD PTR [rsp]
    558f:	mov    ecx,DWORD PTR [r15+0x4]
    5593:	movsd  xmm6,QWORD PTR [rsp+0x8]
    5599:	comisd xmm0,xmm2
    559d:	seta   r12b
    55a1:	test   ecx,ecx
    55a3:	jle    57a8 <quantum_bmeasure_bitpreserve+0x2c8>
    55a9:	mov    rax,QWORD PTR [r15+0x10]
    55ad:	lea    esi,[rcx-0x1]
    55b0:	xor    r13d,r13d
    55b3:	movapd xmm5,xmm6
    55b7:	movss  xmm4,DWORD PTR [rip+0x4be9]        # a1a8 <_IO_stdin_used+0x1a8>
    55bf:	movss  xmm3,DWORD PTR [rip+0x4be5]        # a1ac <_IO_stdin_used+0x1ac>
    55c7:	shl    rsi,0x4
    55cb:	lea    rcx,[rax+0x10]
    55cf:	add    rsi,rcx
    55d2:	movaps xmm8,xmm4
    55d6:	movaps xmm7,xmm3
    55d9:	jmp    5600 <quantum_bmeasure_bitpreserve+0x120>
    55db:	nop    DWORD PTR [rax+rax*1+0x0]
    55e0:	comisd xmm0,xmm2
    55e4:	ja     5770 <quantum_bmeasure_bitpreserve+0x290>
    55ea:	movss  DWORD PTR [rax],xmm8
    55ef:	movss  DWORD PTR [rax+0x4],xmm7
    55f4:	mov    rax,rcx
    55f7:	cmp    rsi,rcx
    55fa:	je     5621 <quantum_bmeasure_bitpreserve+0x141>
    55fc:	add    rcx,0x10
    5600:	test   QWORD PTR [rax+0x8],rbx
    5604:	jne    55e0 <quantum_bmeasure_bitpreserve+0x100>
    5606:	comisd xmm0,xmm2
    560a:	jbe    5770 <quantum_bmeasure_bitpreserve+0x290>
    5610:	movss  DWORD PTR [rax],xmm4
    5614:	movss  DWORD PTR [rax+0x4],xmm3
    5619:	mov    rax,rcx
    561c:	cmp    rsi,rcx
    561f:	jne    55fc <quantum_bmeasure_bitpreserve+0x11c>
    5621:	movsxd rbx,r13d
    5624:	mov    esi,0x10
    5629:	mov    rdi,rbx
    562c:	movsd  QWORD PTR [rsp+0x8],xmm6
    5632:	movsd  QWORD PTR [rsp],xmm5
    5637:	call   1250 <calloc@plt>
    563c:	movsd  xmm5,QWORD PTR [rsp]
    5641:	movsd  xmm6,QWORD PTR [rsp+0x8]
    5647:	test   rax,rax
    564a:	mov    rbp,rax
    564d:	je     582b <quantum_bmeasure_bitpreserve+0x34b>
    5653:	mov    rdi,rbx
    5656:	movsd  QWORD PTR [rsp+0x18],xmm6
    565c:	shl    rdi,0x4
    5660:	movsd  QWORD PTR [rsp+0x10],xmm5
    5666:	call   5140 <quantum_memman>
    566b:	mov    eax,DWORD PTR [r15+0x8]
    566f:	xor    ecx,ecx
    5671:	pxor   xmm3,xmm3
    5675:	movsd  xmm5,QWORD PTR [rsp+0x10]
    567b:	movsd  xmm6,QWORD PTR [rsp+0x18]
    5681:	mov    r9d,0x1
    5687:	mov    DWORD PTR [rsp],eax
    568a:	mov    rax,QWORD PTR [r15+0x18]
    568e:	mov    QWORD PTR [rsp+0x8],rax
    5693:	mov    eax,DWORD PTR [r15]
    5696:	mov    DWORD PTR [rsp+0x20],eax
    569a:	mov    eax,DWORD PTR [r15+0x4]
    569e:	test   eax,eax
    56a0:	jle    572f <quantum_bmeasure_bitpreserve+0x24f>
    56a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    56b0:	mov    rax,rcx
    56b3:	shl    rax,0x4
    56b7:	add    rax,QWORD PTR [r15+0x10]
    56bb:	movss  xmm1,DWORD PTR [rax+0x4]
    56c0:	movss  xmm2,DWORD PTR [rax]
    56c4:	ucomiss xmm1,xmm3
    56c7:	setp   dil
    56cb:	cmovne edi,r9d
    56cf:	test   dil,dil
    56d2:	jne    56e4 <quantum_bmeasure_bitpreserve+0x204>
    56d4:	ucomiss xmm2,xmm3
    56d7:	setp   dil
    56db:	cmovne edi,r9d
    56df:	test   dil,dil
    56e2:	je     5725 <quantum_bmeasure_bitpreserve+0x245>
    56e4:	movsxd rbx,r14d
    56e7:	mov    rax,QWORD PTR [rax+0x8]
    56eb:	movapd xmm4,xmm5
    56ef:	shl    rbx,0x4
    56f3:	sqrtsd xmm4,xmm4
    56f7:	add    rbx,rbp
    56fa:	ucomisd xmm6,xmm5
    56fe:	mov    QWORD PTR [rbx+0x8],rax
    5702:	ja     57cd <quantum_bmeasure_bitpreserve+0x2ed>
    5708:	pxor   xmm0,xmm0
    570c:	add    r14d,0x1
    5710:	cvtsd2ss xmm0,xmm4
    5714:	divss  xmm2,xmm0
    5718:	divss  xmm1,xmm0
    571c:	movss  DWORD PTR [rbx],xmm2
    5720:	movss  DWORD PTR [rbx+0x4],xmm1
    5725:	add    rcx,0x1
    5729:	cmp    DWORD PTR [r15+0x4],ecx
    572d:	jg     56b0 <quantum_bmeasure_bitpreserve+0x1d0>
    572f:	mov    rdi,r15
    5732:	call   8210 <quantum_delete_qureg_hashpreserve>
    5737:	mov    eax,DWORD PTR [rsp+0x20]
    573b:	mov    DWORD PTR [r15+0x4],r13d
    573f:	mov    QWORD PTR [r15+0x10],rbp
    5743:	mov    DWORD PTR [r15],eax
    5746:	mov    eax,DWORD PTR [rsp]
    5749:	mov    DWORD PTR [r15+0x8],eax
    574d:	mov    rax,QWORD PTR [rsp+0x8]
    5752:	mov    QWORD PTR [r15+0x18],rax
    5756:	add    rsp,0x48
    575a:	mov    eax,r12d
    575d:	pop    rbx
    575e:	pop    rbp
    575f:	pop    r12
    5761:	pop    r13
    5763:	pop    r14
    5765:	pop    r15
    5767:	ret    
    5768:	nop    DWORD PTR [rax+rax*1+0x0]
    5770:	movss  xmm9,DWORD PTR [rax+0x4]
    5776:	movss  xmm1,DWORD PTR [rax]
    577a:	add    r13d,0x1
    577e:	mulss  xmm1,xmm1
    5782:	mulss  xmm9,xmm9
    5787:	addss  xmm1,xmm9
    578c:	cvtss2sd xmm1,xmm1
    5790:	addsd  xmm5,xmm1
    5794:	jmp    55f4 <quantum_bmeasure_bitpreserve+0x114>
    5799:	nop    DWORD PTR [rax+0x0]
    57a0:	xor    r12d,r12d
    57a3:	jmp    5756 <quantum_bmeasure_bitpreserve+0x276>
    57a5:	nop    DWORD PTR [rax]
    57a8:	xor    r13d,r13d
    57ab:	xor    ebx,ebx
    57ad:	movapd xmm5,xmm6
    57b1:	jmp    5624 <quantum_bmeasure_bitpreserve+0x144>
    57b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    57c0:	pxor   xmm6,xmm6
    57c4:	movapd xmm2,xmm6
    57c8:	jmp    5577 <quantum_bmeasure_bitpreserve+0x97>
    57cd:	movapd xmm0,xmm5
    57d1:	mov    QWORD PTR [rsp+0x30],rcx
    57d6:	movsd  QWORD PTR [rsp+0x38],xmm6
    57dc:	movsd  QWORD PTR [rsp+0x28],xmm4
    57e2:	movss  DWORD PTR [rsp+0x24],xmm1
    57e8:	movss  DWORD PTR [rsp+0x18],xmm2
    57ee:	movsd  QWORD PTR [rsp+0x10],xmm5
    57f4:	call   1310 <sqrt@plt>
    57f9:	movsd  xmm6,QWORD PTR [rsp+0x38]
    57ff:	mov    rcx,QWORD PTR [rsp+0x30]
    5804:	pxor   xmm3,xmm3
    5808:	movsd  xmm4,QWORD PTR [rsp+0x28]
    580e:	movss  xmm1,DWORD PTR [rsp+0x24]
    5814:	mov    r9d,0x1
    581a:	movss  xmm2,DWORD PTR [rsp+0x18]
    5820:	movsd  xmm5,QWORD PTR [rsp+0x10]
    5826:	jmp    5708 <quantum_bmeasure_bitpreserve+0x228>
    582b:	mov    edi,0x1
    5830:	mov    edx,r13d
    5833:	lea    rsi,[rip+0x486e]        # a0a8 <_IO_stdin_used+0xa8>
    583a:	xor    eax,eax
    583c:	call   12a0 <__printf_chk@plt>
    5841:	mov    edi,0x1
    5846:	call   12e0 <exit@plt>
    584b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005850 <test_sum>:
    5850:	endbr64 
    5854:	push   r15
    5856:	lea    eax,[rsi+rsi*1]
    5859:	push   r14
    585b:	lea    ecx,[rax-0x1]
    585e:	mov    r14,rdx
    5861:	lea    edx,[rsi-0x1]
    5864:	push   r13
    5866:	push   r12
    5868:	push   rbp
    5869:	mov    ebp,edi
    586b:	push   rbx
    586c:	mov    ebx,esi
    586e:	sub    rsp,0x18
    5872:	mov    DWORD PTR [rsp+0x8],eax
    5876:	movsxd rax,edi
    5879:	bt     rax,rdx
    587d:	mov    DWORD PTR [rsp+0x4],edx
    5881:	mov    DWORD PTR [rsp+0xc],ecx
    5885:	jae    5a10 <test_sum+0x1c0>
    588b:	mov    r15d,ecx
    588e:	mov    esi,edx
    5890:	mov    edi,ecx
    5892:	mov    rdx,r14
    5895:	call   1ea0 <quantum_cnot>
    589a:	mov    rsi,r14
    589d:	mov    edi,r15d
    58a0:	call   2290 <quantum_sigma_x>
    58a5:	mov    rdx,r14
    58a8:	xor    esi,esi
    58aa:	mov    edi,r15d
    58ad:	call   1ea0 <quantum_cnot>
    58b2:	lea    r12d,[rbx-0x2]
    58b6:	test   r12d,r12d
    58b9:	jg     58f2 <test_sum+0xa2>
    58bb:	jmp    5923 <test_sum+0xd3>
    58bd:	nop    DWORD PTR [rax]
    58c0:	mov    edx,r12d
    58c3:	mov    rcx,r14
    58c6:	mov    esi,r13d
    58c9:	mov    edi,r15d
    58cc:	call   1f80 <quantum_toffoli>
    58d1:	mov    rsi,r14
    58d4:	mov    edi,r13d
    58d7:	call   2290 <quantum_sigma_x>
    58dc:	xor    edx,edx
    58de:	mov    rcx,r14
    58e1:	mov    esi,r13d
    58e4:	mov    edi,r15d
    58e7:	call   1f80 <quantum_toffoli>
    58ec:	sub    r12d,0x1
    58f0:	je     5923 <test_sum+0xd3>
    58f2:	bt     ebp,r12d
    58f6:	lea    r13d,[rbx+r12*1]
    58fa:	lea    r15d,[r12+0x1]
    58ff:	jb     58c0 <test_sum+0x70>
    5901:	mov    rsi,r14
    5904:	mov    edi,r13d
    5907:	call   2290 <quantum_sigma_x>
    590c:	mov    edx,r12d
    590f:	mov    rcx,r14
    5912:	mov    esi,r13d
    5915:	mov    edi,r15d
    5918:	call   1f80 <quantum_toffoli>
    591d:	sub    r12d,0x1
    5921:	jne    58f2 <test_sum+0xa2>
    5923:	mov    eax,DWORD PTR [rsp+0x8]
    5927:	lea    r12d,[rax+0x1]
    592b:	test   bpl,0x1
    592f:	jne    5a68 <test_sum+0x218>
    5935:	mov    edx,DWORD PTR [rsp+0x8]
    5939:	mov    rcx,r14
    593c:	xor    esi,esi
    593e:	mov    edi,r12d
    5941:	call   1f80 <quantum_toffoli>
    5946:	cmp    DWORD PTR [rsp+0x4],0x1
    594b:	mov    r12d,0x1
    5951:	jg     5995 <test_sum+0x145>
    5953:	jmp    59ce <test_sum+0x17e>
    5955:	nop    DWORD PTR [rax]
    5958:	xor    edx,edx
    595a:	mov    rcx,r14
    595d:	mov    esi,r15d
    5960:	mov    edi,r12d
    5963:	mov    DWORD PTR [rsp+0x8],r9d
    5968:	call   1f80 <quantum_toffoli>
    596d:	mov    rsi,r14
    5970:	mov    edi,r15d
    5973:	call   2290 <quantum_sigma_x>
    5978:	mov    r9d,DWORD PTR [rsp+0x8]
    597d:	mov    rcx,r14
    5980:	mov    esi,r15d
    5983:	mov    edi,r12d
    5986:	mov    edx,r9d
    5989:	call   1f80 <quantum_toffoli>
    598e:	cmp    r12d,DWORD PTR [rsp+0x4]
    5993:	je     59ce <test_sum+0x17e>
    5995:	mov    ecx,r12d
    5998:	mov    eax,ebp
    599a:	lea    r15d,[r12+rbx*1]
    599e:	mov    r9d,r12d
    59a1:	sar    eax,cl
    59a3:	add    r12d,0x1
    59a7:	test   al,0x1
    59a9:	jne    5958 <test_sum+0x108>
    59ab:	mov    esi,r15d
    59ae:	mov    edi,r12d
    59b1:	mov    rcx,r14
    59b4:	mov    edx,r9d
    59b7:	call   1f80 <quantum_toffoli>
    59bc:	mov    rsi,r14
    59bf:	mov    edi,r15d
    59c2:	call   2290 <quantum_sigma_x>
    59c7:	cmp    r12d,DWORD PTR [rsp+0x4]
    59cc:	jne    5995 <test_sum+0x145>
    59ce:	mov    eax,DWORD PTR [rsp+0x4]
    59d2:	bt     ebp,eax
    59d5:	jae    5a38 <test_sum+0x1e8>
    59d7:	mov    ebx,DWORD PTR [rsp+0xc]
    59db:	mov    rdx,r14
    59de:	xor    esi,esi
    59e0:	mov    edi,ebx
    59e2:	call   1ea0 <quantum_cnot>
    59e7:	mov    rsi,r14
    59ea:	mov    edi,ebx
    59ec:	call   2290 <quantum_sigma_x>
    59f1:	mov    esi,DWORD PTR [rsp+0x4]
    59f5:	add    rsp,0x18
    59f9:	mov    rdx,r14
    59fc:	mov    edi,ebx
    59fe:	pop    rbx
    59ff:	pop    rbp
    5a00:	pop    r12
    5a02:	pop    r13
    5a04:	pop    r14
    5a06:	pop    r15
    5a08:	jmp    1ea0 <quantum_cnot>
    5a0d:	nop    DWORD PTR [rax]
    5a10:	mov    r15d,DWORD PTR [rsp+0xc]
    5a15:	mov    rsi,r14
    5a18:	mov    edi,r15d
    5a1b:	call   2290 <quantum_sigma_x>
    5a20:	mov    esi,DWORD PTR [rsp+0x4]
    5a24:	mov    rdx,r14
    5a27:	mov    edi,r15d
    5a2a:	call   1ea0 <quantum_cnot>
    5a2f:	jmp    58b2 <test_sum+0x62>
    5a34:	nop    DWORD PTR [rax+0x0]
    5a38:	mov    ebx,DWORD PTR [rsp+0xc]
    5a3c:	mov    esi,DWORD PTR [rsp+0x4]
    5a40:	mov    rdx,r14
    5a43:	mov    edi,ebx
    5a45:	call   1ea0 <quantum_cnot>
    5a4a:	add    rsp,0x18
    5a4e:	mov    rsi,r14
    5a51:	mov    edi,ebx
    5a53:	pop    rbx
    5a54:	pop    rbp
    5a55:	pop    r12
    5a57:	pop    r13
    5a59:	pop    r14
    5a5b:	pop    r15
    5a5d:	jmp    2290 <quantum_sigma_x>
    5a62:	nop    WORD PTR [rax+rax*1+0x0]
    5a68:	mov    rsi,r14
    5a6b:	mov    edi,ebx
    5a6d:	call   2290 <quantum_sigma_x>
    5a72:	mov    rcx,r14
    5a75:	xor    edx,edx
    5a77:	mov    edi,ebx
    5a79:	mov    esi,0x1
    5a7e:	call   1f80 <quantum_toffoli>
    5a83:	mov    edx,DWORD PTR [rsp+0x8]
    5a87:	mov    rcx,r14
    5a8a:	xor    esi,esi
    5a8c:	mov    edi,r12d
    5a8f:	call   1f80 <quantum_toffoli>
    5a94:	mov    edi,ebx
    5a96:	mov    rcx,r14
    5a99:	xor    edx,edx
    5a9b:	mov    esi,0x1
    5aa0:	call   1f80 <quantum_toffoli>
    5aa5:	mov    rsi,r14
    5aa8:	mov    edi,ebx
    5aaa:	call   2290 <quantum_sigma_x>
    5aaf:	jmp    5946 <test_sum+0xf6>
    5ab4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    5abf:	nop

0000000000005ac0 <muxfa>:
    5ac0:	endbr64 
    5ac4:	push   r15
    5ac6:	push   r14
    5ac8:	mov    r14d,ecx
    5acb:	push   r13
    5acd:	push   r12
    5acf:	mov    r12d,edx
    5ad2:	push   rbp
    5ad3:	mov    ebp,esi
    5ad5:	push   rbx
    5ad6:	sub    rsp,0x8
    5ada:	mov    r13,QWORD PTR [rsp+0x48]
    5adf:	test   edi,edi
    5ae1:	je     5bbe <muxfa+0xfe>
    5ae7:	mov    ebx,r9d
    5aea:	cmp    edi,0x3
    5aed:	je     5ba0 <muxfa+0xe0>
    5af3:	mov    r15d,r8d
    5af6:	cmp    edi,0x1
    5af9:	je     5bf0 <muxfa+0x130>
    5aff:	cmp    edi,0x2
    5b02:	jne    5c48 <muxfa+0x188>
    5b08:	mov    edi,r8d
    5b0b:	mov    rsi,r13
    5b0e:	call   2290 <quantum_sigma_x>
    5b13:	mov    rcx,r13
    5b16:	mov    edx,ebp
    5b18:	mov    esi,r15d
    5b1b:	mov    edi,ebx
    5b1d:	call   1f80 <quantum_toffoli>
    5b22:	mov    rcx,r13
    5b25:	mov    edx,r14d
    5b28:	mov    esi,r12d
    5b2b:	mov    edi,ebp
    5b2d:	call   1f80 <quantum_toffoli>
    5b32:	mov    rcx,r13
    5b35:	mov    edx,ebp
    5b37:	mov    esi,r15d
    5b3a:	mov    edi,ebx
    5b3c:	call   1f80 <quantum_toffoli>
    5b41:	mov    rcx,r13
    5b44:	mov    edx,r14d
    5b47:	mov    esi,r12d
    5b4a:	mov    edi,ebp
    5b4c:	call   1f80 <quantum_toffoli>
    5b51:	mov    rcx,r13
    5b54:	mov    edx,r12d
    5b57:	mov    esi,r15d
    5b5a:	mov    edi,ebx
    5b5c:	call   1f80 <quantum_toffoli>
    5b61:	mov    rcx,r13
    5b64:	mov    edx,r14d
    5b67:	mov    esi,r12d
    5b6a:	mov    edi,ebp
    5b6c:	call   1f80 <quantum_toffoli>
    5b71:	mov    esi,r12d
    5b74:	mov    edi,ebp
    5b76:	mov    rdx,r13
    5b79:	call   1ea0 <quantum_cnot>
    5b7e:	add    rsp,0x8
    5b82:	mov    rsi,r13
    5b85:	mov    edi,r15d
    5b88:	pop    rbx
    5b89:	pop    rbp
    5b8a:	pop    r12
    5b8c:	pop    r13
    5b8e:	pop    r14
    5b90:	pop    r15
    5b92:	jmp    2290 <quantum_sigma_x>
    5b97:	nop    WORD PTR [rax+rax*1+0x0]
    5ba0:	mov    edx,r14d
    5ba3:	mov    esi,r12d
    5ba6:	mov    edi,r9d
    5ba9:	mov    rcx,r13
    5bac:	call   1f80 <quantum_toffoli>
    5bb1:	mov    rdx,r13
    5bb4:	mov    esi,r12d
    5bb7:	mov    edi,ebx
    5bb9:	call   1ea0 <quantum_cnot>
    5bbe:	mov    edx,r14d
    5bc1:	mov    esi,r12d
    5bc4:	mov    edi,ebp
    5bc6:	mov    rcx,r13
    5bc9:	call   1f80 <quantum_toffoli>
    5bce:	add    rsp,0x8
    5bd2:	mov    rdx,r13
    5bd5:	mov    esi,r12d
    5bd8:	pop    rbx
    5bd9:	mov    edi,ebp
    5bdb:	pop    rbp
    5bdc:	pop    r12
    5bde:	pop    r13
    5be0:	pop    r14
    5be2:	pop    r15
    5be4:	jmp    1ea0 <quantum_cnot>
    5be9:	nop    DWORD PTR [rax+0x0]
    5bf0:	mov    edi,r9d
    5bf3:	mov    rcx,r13
    5bf6:	mov    edx,esi
    5bf8:	mov    esi,r8d
    5bfb:	call   1f80 <quantum_toffoli>
    5c00:	mov    rcx,r13
    5c03:	mov    edx,r14d
    5c06:	mov    esi,r12d
    5c09:	mov    edi,ebp
    5c0b:	call   1f80 <quantum_toffoli>
    5c10:	mov    rcx,r13
    5c13:	mov    edx,ebp
    5c15:	mov    esi,r15d
    5c18:	mov    edi,ebx
    5c1a:	call   1f80 <quantum_toffoli>
    5c1f:	mov    rcx,r13
    5c22:	mov    edx,r14d
    5c25:	mov    esi,r12d
    5c28:	mov    edi,ebp
    5c2a:	call   1f80 <quantum_toffoli>
    5c2f:	mov    rcx,r13
    5c32:	mov    edx,r12d
    5c35:	mov    esi,r15d
    5c38:	mov    edi,ebx
    5c3a:	call   1f80 <quantum_toffoli>
    5c3f:	jmp    5bbe <muxfa+0xfe>
    5c44:	nop    DWORD PTR [rax+0x0]
    5c48:	add    rsp,0x8
    5c4c:	pop    rbx
    5c4d:	pop    rbp
    5c4e:	pop    r12
    5c50:	pop    r13
    5c52:	pop    r14
    5c54:	pop    r15
    5c56:	ret    
    5c57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000005c60 <muxfa_inv>:
    5c60:	endbr64 
    5c64:	push   r15
    5c66:	push   r14
    5c68:	mov    r14d,ecx
    5c6b:	push   r13
    5c6d:	push   r12
    5c6f:	mov    r12d,edx
    5c72:	push   rbp
    5c73:	mov    ebp,esi
    5c75:	push   rbx
    5c76:	sub    rsp,0x8
    5c7a:	mov    r13,QWORD PTR [rsp+0x48]
    5c7f:	test   edi,edi
    5c81:	je     5d90 <muxfa_inv+0x130>
    5c87:	mov    ebx,r9d
    5c8a:	cmp    edi,0x3
    5c8d:	je     5d40 <muxfa_inv+0xe0>
    5c93:	mov    r15d,r8d
    5c96:	cmp    edi,0x1
    5c99:	je     5db0 <muxfa_inv+0x150>
    5c9f:	cmp    edi,0x2
    5ca2:	jne    5e20 <muxfa_inv+0x1c0>
    5ca8:	mov    edi,r8d
    5cab:	mov    rsi,r13
    5cae:	call   2290 <quantum_sigma_x>
    5cb3:	mov    rdx,r13
    5cb6:	mov    esi,r12d
    5cb9:	mov    edi,ebp
    5cbb:	call   1ea0 <quantum_cnot>
    5cc0:	mov    rcx,r13
    5cc3:	mov    edx,r14d
    5cc6:	mov    esi,r12d
    5cc9:	mov    edi,ebp
    5ccb:	call   1f80 <quantum_toffoli>
    5cd0:	mov    rcx,r13
    5cd3:	mov    edx,r12d
    5cd6:	mov    esi,r15d
    5cd9:	mov    edi,ebx
    5cdb:	call   1f80 <quantum_toffoli>
    5ce0:	mov    rcx,r13
    5ce3:	mov    edx,r14d
    5ce6:	mov    esi,r12d
    5ce9:	mov    edi,ebp
    5ceb:	call   1f80 <quantum_toffoli>
    5cf0:	mov    rcx,r13
    5cf3:	mov    edx,ebp
    5cf5:	mov    esi,r15d
    5cf8:	mov    edi,ebx
    5cfa:	call   1f80 <quantum_toffoli>
    5cff:	mov    rcx,r13
    5d02:	mov    edx,r14d
    5d05:	mov    esi,r12d
    5d08:	mov    edi,ebp
    5d0a:	call   1f80 <quantum_toffoli>
    5d0f:	mov    esi,r15d
    5d12:	mov    edi,ebx
    5d14:	mov    rcx,r13
    5d17:	mov    edx,ebp
    5d19:	call   1f80 <quantum_toffoli>
    5d1e:	add    rsp,0x8
    5d22:	mov    rsi,r13
    5d25:	mov    edi,r15d
    5d28:	pop    rbx
    5d29:	pop    rbp
    5d2a:	pop    r12
    5d2c:	pop    r13
    5d2e:	pop    r14
    5d30:	pop    r15
    5d32:	jmp    2290 <quantum_sigma_x>
    5d37:	nop    WORD PTR [rax+rax*1+0x0]
    5d40:	mov    rdx,r13
    5d43:	mov    esi,r12d
    5d46:	mov    edi,ebp
    5d48:	call   1ea0 <quantum_cnot>
    5d4d:	mov    rcx,r13
    5d50:	mov    edx,r14d
    5d53:	mov    esi,r12d
    5d56:	mov    edi,ebp
    5d58:	call   1f80 <quantum_toffoli>
    5d5d:	mov    rdx,r13
    5d60:	mov    esi,r12d
    5d63:	mov    edi,ebx
    5d65:	call   1ea0 <quantum_cnot>
    5d6a:	mov    rcx,r13
    5d6d:	mov    edx,r14d
    5d70:	mov    esi,r12d
    5d73:	mov    edi,ebx
    5d75:	add    rsp,0x8
    5d79:	pop    rbx
    5d7a:	pop    rbp
    5d7b:	pop    r12
    5d7d:	pop    r13
    5d7f:	pop    r14
    5d81:	pop    r15
    5d83:	jmp    1f80 <quantum_toffoli>
    5d88:	nop    DWORD PTR [rax+rax*1+0x0]
    5d90:	mov    rdx,r13
    5d93:	mov    esi,r12d
    5d96:	mov    edi,ebp
    5d98:	call   1ea0 <quantum_cnot>
    5d9d:	mov    rcx,r13
    5da0:	mov    edx,r14d
    5da3:	mov    esi,r12d
    5da6:	mov    edi,ebp
    5da8:	jmp    5d75 <muxfa_inv+0x115>
    5daa:	nop    WORD PTR [rax+rax*1+0x0]
    5db0:	mov    rdx,r13
    5db3:	mov    esi,r12d
    5db6:	mov    edi,ebp
    5db8:	call   1ea0 <quantum_cnot>
    5dbd:	mov    rcx,r13
    5dc0:	mov    edx,r14d
    5dc3:	mov    esi,r12d
    5dc6:	mov    edi,ebp
    5dc8:	call   1f80 <quantum_toffoli>
    5dcd:	mov    rcx,r13
    5dd0:	mov    edx,r12d
    5dd3:	mov    esi,r15d
    5dd6:	mov    edi,ebx
    5dd8:	call   1f80 <quantum_toffoli>
    5ddd:	mov    rcx,r13
    5de0:	mov    edx,r14d
    5de3:	mov    esi,r12d
    5de6:	mov    edi,ebp
    5de8:	call   1f80 <quantum_toffoli>
    5ded:	mov    rcx,r13
    5df0:	mov    edx,ebp
    5df2:	mov    esi,r15d
    5df5:	mov    edi,ebx
    5df7:	call   1f80 <quantum_toffoli>
    5dfc:	mov    rcx,r13
    5dff:	mov    edx,r14d
    5e02:	mov    esi,r12d
    5e05:	mov    edi,ebp
    5e07:	call   1f80 <quantum_toffoli>
    5e0c:	mov    rcx,r13
    5e0f:	mov    edx,ebp
    5e11:	mov    esi,r15d
    5e14:	jmp    5d73 <muxfa_inv+0x113>
    5e19:	nop    DWORD PTR [rax+0x0]
    5e20:	add    rsp,0x8
    5e24:	pop    rbx
    5e25:	pop    rbp
    5e26:	pop    r12
    5e28:	pop    r13
    5e2a:	pop    r14
    5e2c:	pop    r15
    5e2e:	ret    
    5e2f:	nop

0000000000005e30 <muxha>:
    5e30:	endbr64 
    5e34:	push   r15
    5e36:	push   r14
    5e38:	push   r13
    5e3a:	push   r12
    5e3c:	mov    r12d,esi
    5e3f:	push   rbp
    5e40:	mov    ebp,edx
    5e42:	mov    r14,QWORD PTR [rsp+0x30]
    5e47:	test   edi,edi
    5e49:	je     5ead <muxha+0x7d>
    5e4b:	mov    r15d,r8d
    5e4e:	cmp    edi,0x3
    5e51:	je     5ea0 <muxha+0x70>
    5e53:	mov    r13d,ecx
    5e56:	cmp    edi,0x1
    5e59:	je     5ec8 <muxha+0x98>
    5e5b:	cmp    edi,0x2
    5e5e:	jne    5ee0 <muxha+0xb0>
    5e64:	mov    rsi,r14
    5e67:	mov    edi,ecx
    5e69:	call   2290 <quantum_sigma_x>
    5e6e:	mov    rcx,r14
    5e71:	mov    edx,ebp
    5e73:	mov    esi,r13d
    5e76:	mov    edi,r15d
    5e79:	call   1f80 <quantum_toffoli>
    5e7e:	mov    esi,ebp
    5e80:	mov    edi,r12d
    5e83:	mov    rdx,r14
    5e86:	call   1ea0 <quantum_cnot>
    5e8b:	pop    rbp
    5e8c:	mov    rsi,r14
    5e8f:	pop    r12
    5e91:	mov    edi,r13d
    5e94:	pop    r13
    5e96:	pop    r14
    5e98:	pop    r15
    5e9a:	jmp    2290 <quantum_sigma_x>
    5e9f:	nop
    5ea0:	mov    rdx,r14
    5ea3:	mov    esi,ebp
    5ea5:	mov    edi,r8d
    5ea8:	call   1ea0 <quantum_cnot>
    5ead:	mov    rdx,r14
    5eb0:	mov    esi,ebp
    5eb2:	mov    edi,r12d
    5eb5:	pop    rbp
    5eb6:	pop    r12
    5eb8:	pop    r13
    5eba:	pop    r14
    5ebc:	pop    r15
    5ebe:	jmp    1ea0 <quantum_cnot>
    5ec3:	nop    DWORD PTR [rax+rax*1+0x0]
    5ec8:	mov    rcx,r14
    5ecb:	mov    esi,r13d
    5ece:	mov    edi,r8d
    5ed1:	call   1f80 <quantum_toffoli>
    5ed6:	jmp    5ead <muxha+0x7d>
    5ed8:	nop    DWORD PTR [rax+rax*1+0x0]
    5ee0:	pop    rbp
    5ee1:	pop    r12
    5ee3:	pop    r13
    5ee5:	pop    r14
    5ee7:	pop    r15
    5ee9:	ret    
    5eea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000005ef0 <muxha_inv>:
    5ef0:	endbr64 
    5ef4:	push   r15
    5ef6:	push   r14
    5ef8:	push   r13
    5efa:	push   r12
    5efc:	mov    r12d,esi
    5eff:	push   rbp
    5f00:	mov    ebp,edx
    5f02:	mov    r15,QWORD PTR [rsp+0x30]
    5f07:	test   edi,edi
    5f09:	je     5f98 <muxha_inv+0xa8>
    5f0f:	mov    r14d,r8d
    5f12:	cmp    edi,0x3
    5f15:	je     5f70 <muxha_inv+0x80>
    5f17:	mov    r13d,ecx
    5f1a:	cmp    edi,0x1
    5f1d:	je     5fb0 <muxha_inv+0xc0>
    5f23:	cmp    edi,0x2
    5f26:	jne    5fe0 <muxha_inv+0xf0>
    5f2c:	mov    edi,ecx
    5f2e:	mov    rsi,r15
    5f31:	call   2290 <quantum_sigma_x>
    5f36:	mov    rdx,r15
    5f39:	mov    esi,ebp
    5f3b:	mov    edi,r12d
    5f3e:	call   1ea0 <quantum_cnot>
    5f43:	mov    esi,r13d
    5f46:	mov    edi,r14d
    5f49:	mov    rcx,r15
    5f4c:	mov    edx,ebp
    5f4e:	call   1f80 <quantum_toffoli>
    5f53:	pop    rbp
    5f54:	mov    rsi,r15
    5f57:	pop    r12
    5f59:	mov    edi,r13d
    5f5c:	pop    r13
    5f5e:	pop    r14
    5f60:	pop    r15
    5f62:	jmp    2290 <quantum_sigma_x>
    5f67:	nop    WORD PTR [rax+rax*1+0x0]
    5f70:	mov    rdx,r15
    5f73:	mov    esi,ebp
    5f75:	mov    edi,r12d
    5f78:	call   1ea0 <quantum_cnot>
    5f7d:	mov    rdx,r15
    5f80:	mov    esi,ebp
    5f82:	mov    edi,r14d
    5f85:	pop    rbp
    5f86:	pop    r12
    5f88:	pop    r13
    5f8a:	pop    r14
    5f8c:	pop    r15
    5f8e:	jmp    1ea0 <quantum_cnot>
    5f93:	nop    DWORD PTR [rax+rax*1+0x0]
    5f98:	mov    rdx,r15
    5f9b:	mov    esi,ebp
    5f9d:	mov    edi,r12d
    5fa0:	pop    rbp
    5fa1:	pop    r12
    5fa3:	pop    r13
    5fa5:	pop    r14
    5fa7:	pop    r15
    5fa9:	jmp    1ea0 <quantum_cnot>
    5fae:	xchg   ax,ax
    5fb0:	mov    rdx,r15
    5fb3:	mov    esi,ebp
    5fb5:	mov    edi,r12d
    5fb8:	call   1ea0 <quantum_cnot>
    5fbd:	mov    rcx,r15
    5fc0:	mov    edx,ebp
    5fc2:	mov    esi,r13d
    5fc5:	pop    rbp
    5fc6:	mov    edi,r14d
    5fc9:	pop    r12
    5fcb:	pop    r13
    5fcd:	pop    r14
    5fcf:	pop    r15
    5fd1:	jmp    1f80 <quantum_toffoli>
    5fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    5fe0:	pop    rbp
    5fe1:	pop    r12
    5fe3:	pop    r13
    5fe5:	pop    r14
    5fe7:	pop    r15
    5fe9:	ret    
    5fea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000005ff0 <madd>:
    5ff0:	endbr64 
    5ff4:	push   r15
    5ff6:	lea    r15d,[rdx*4+0x2]
    5ffe:	push   r14
    6000:	push   r13
    6002:	push   r12
    6004:	lea    r12d,[rdx-0x1]
    6008:	push   rbp
    6009:	mov    ebp,edx
    600b:	push   rbx
    600c:	lea    ebx,[rdx+rdx*1]
    600f:	xor    edx,edx
    6011:	lea    r14d,[rbx+0x1]
    6015:	mov    r13d,ebx
    6018:	sub    rsp,0x18
    601c:	mov    DWORD PTR [rsp],edi
    601f:	mov    DWORD PTR [rsp+0x4],esi
    6023:	mov    QWORD PTR [rsp+0x8],rcx
    6028:	test   r12d,r12d
    602b:	jg     6032 <madd+0x42>
    602d:	jmp    6077 <madd+0x87>
    602f:	nop
    6030:	mov    edx,ebx
    6032:	mov    edi,DWORD PTR [rsp]
    6035:	mov    ecx,edx
    6037:	mov    eax,0x2
    603c:	lea    ebx,[rdx+0x1]
    603f:	lea    esi,[rbp+rdx*1+0x0]
    6043:	mov    r9d,r14d
    6046:	mov    r8d,r13d
    6049:	sar    edi,cl
    604b:	and    edi,0x1
    604e:	cmovne edi,eax
    6051:	mov    eax,DWORD PTR [rsp+0x4]
    6055:	push   QWORD PTR [rsp+0x8]
    6059:	push   r15
    605b:	sar    eax,cl
    605d:	mov    ecx,ebx
    605f:	and    eax,0x1
    6062:	cmp    eax,0x1
    6065:	sbb    edi,0xffffffff
    6068:	call   5ac0 <muxfa>
    606d:	pop    rax
    606e:	pop    rdx
    606f:	cmp    r12d,ebx
    6072:	jne    6030 <madd+0x40>
    6074:	mov    ebx,r13d
    6077:	mov    edi,DWORD PTR [rsp]
    607a:	mov    ecx,r12d
    607d:	mov    esi,DWORD PTR [rsp+0x4]
    6081:	mov    eax,0x2
    6086:	mov    r9d,r15d
    6089:	mov    r8d,r14d
    608c:	mov    edx,r12d
    608f:	sar    edi,cl
    6091:	and    edi,0x1
    6094:	cmovne edi,eax
    6097:	sar    esi,cl
    6099:	mov    ecx,ebx
    609b:	and    esi,0x1
    609e:	cmp    esi,0x1
    60a1:	lea    esi,[rbx-0x1]
    60a4:	sbb    edi,0xffffffff
    60a7:	sub    rsp,0x8
    60ab:	push   QWORD PTR [rsp+0x10]
    60af:	call   5e30 <muxha>
    60b4:	add    rsp,0x28
    60b8:	pop    rbx
    60b9:	pop    rbp
    60ba:	pop    r12
    60bc:	pop    r13
    60be:	pop    r14
    60c0:	pop    r15
    60c2:	ret    
    60c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    60ce:	xchg   ax,ax

00000000000060d0 <madd_inv>:
    60d0:	endbr64 
    60d4:	push   r15
    60d6:	mov    r10d,esi
    60d9:	mov    eax,0x2
    60de:	mov    r15d,edx
    60e1:	push   r14
    60e3:	lea    r14d,[rdx*4+0x2]
    60eb:	push   r13
    60ed:	mov    r9d,r14d
    60f0:	push   r12
    60f2:	lea    r12d,[r15-0x2]
    60f6:	push   rbp
    60f7:	lea    ebp,[rdx+rdx*1]
    60fa:	push   rbx
    60fb:	mov    rbx,rcx
    60fe:	lea    r13d,[rbp+0x1]
    6102:	mov    r8d,r13d
    6105:	sub    rsp,0x20
    6109:	mov    DWORD PTR [rsp+0x14],esi
    610d:	lea    esi,[rdx-0x1]
    6110:	lea    edx,[rbp-0x1]
    6113:	mov    ecx,esi
    6115:	mov    DWORD PTR [rsp+0x10],edi
    6119:	sar    edi,cl
    611b:	push   rbx
    611c:	and    edi,0x1
    611f:	cmovne edi,eax
    6122:	mov    eax,r10d
    6125:	sar    eax,cl
    6127:	mov    ecx,ebp
    6129:	and    eax,0x1
    612c:	cmp    eax,0x1
    612f:	sbb    edi,0xffffffff
    6132:	add    r15d,r12d
    6135:	call   5ef0 <muxha_inv>
    613a:	pop    rcx
    613b:	pop    rsi
    613c:	test   r12d,r12d
    613f:	js     6195 <madd_inv+0xc5>
    6141:	nop    DWORD PTR [rax+0x0]
    6148:	mov    edi,DWORD PTR [rsp+0x8]
    614c:	mov    ecx,r12d
    614f:	mov    eax,0x2
    6154:	mov    edx,r15d
    6157:	mov    esi,r12d
    615a:	mov    r9d,r13d
    615d:	mov    r8d,ebp
    6160:	sar    edi,cl
    6162:	and    edi,0x1
    6165:	cmovne edi,eax
    6168:	mov    eax,DWORD PTR [rsp+0xc]
    616c:	push   rbx
    616d:	push   r14
    616f:	sar    eax,cl
    6171:	mov    ecx,eax
    6173:	and    ecx,0x1
    6176:	cmp    ecx,0x1
    6179:	lea    ecx,[r15+0x1]
    617d:	sbb    edi,0xffffffff
    6180:	sub    r12d,0x1
    6184:	sub    r15d,0x1
    6188:	call   5c60 <muxfa_inv>
    618d:	pop    rax
    618e:	pop    rdx
    618f:	cmp    r12d,0xffffffff
    6193:	jne    6148 <madd_inv+0x78>
    6195:	add    rsp,0x18
    6199:	pop    rbx
    619a:	pop    rbp
    619b:	pop    r12
    619d:	pop    r13
    619f:	pop    r14
    61a1:	pop    r15
    61a3:	ret    
    61a4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    61af:	nop

00000000000061b0 <addn>:
    61b0:	endbr64 
    61b4:	push   r13
    61b6:	mov    r13,rcx
    61b9:	push   r12
    61bb:	mov    r12d,edx
    61be:	mov    rdx,rcx
    61c1:	push   rbp
    61c2:	mov    ebp,esi
    61c4:	push   rbx
    61c5:	mov    ebx,edi
    61c7:	sub    edi,esi
    61c9:	mov    esi,r12d
    61cc:	sub    rsp,0x8
    61d0:	call   5850 <test_sum>
    61d5:	mov    ecx,r12d
    61d8:	mov    edi,0x1
    61dd:	mov    edx,r12d
    61e0:	shl    edi,cl
    61e2:	add    rsp,0x8
    61e6:	mov    rcx,r13
    61e9:	mov    esi,ebp
    61eb:	add    edi,ebp
    61ed:	sub    edi,ebx
    61ef:	pop    rbx
    61f0:	pop    rbp
    61f1:	pop    r12
    61f3:	pop    r13
    61f5:	jmp    5ff0 <madd>
    61fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000006200 <addn_inv>:
    6200:	endbr64 
    6204:	push   r13
    6206:	mov    r13d,esi
    6209:	lea    esi,[rdx+rdx*1]
    620c:	push   r12
    620e:	mov    r12,rcx
    6211:	push   rbp
    6212:	mov    ebp,edx
    6214:	mov    rdx,rcx
    6217:	push   rbx
    6218:	mov    ebx,edi
    621a:	lea    edi,[rsi+0x1]
    621d:	sub    ebx,r13d
    6220:	sub    rsp,0x8
    6224:	call   1ea0 <quantum_cnot>
    6229:	mov    ecx,ebp
    622b:	mov    edi,0x1
    6230:	mov    edx,ebp
    6232:	shl    edi,cl
    6234:	mov    esi,ebx
    6236:	mov    rcx,r12
    6239:	sub    edi,r13d
    623c:	call   60d0 <madd_inv>
    6241:	mov    rsi,r12
    6244:	mov    edi,ebp
    6246:	call   2550 <quantum_swaptheleads>
    624b:	add    rsp,0x8
    624f:	mov    rdx,r12
    6252:	mov    esi,ebp
    6254:	pop    rbx
    6255:	mov    edi,r13d
    6258:	pop    rbp
    6259:	pop    r12
    625b:	pop    r13
    625d:	jmp    5850 <test_sum>
    6262:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    626d:	nop    DWORD PTR [rax]

0000000000006270 <add_mod_n>:
    6270:	endbr64 
    6274:	push   r14
    6276:	mov    r14,rcx
    6279:	push   r13
    627b:	mov    r13d,edx
    627e:	push   r12
    6280:	mov    r12d,esi
    6283:	push   rbp
    6284:	mov    ebp,edi
    6286:	sub    rsp,0x8
    628a:	call   61b0 <addn>
    628f:	add    rsp,0x8
    6293:	mov    rcx,r14
    6296:	mov    edx,r13d
    6299:	mov    esi,r12d
    629c:	mov    edi,ebp
    629e:	pop    rbp
    629f:	pop    r12
    62a1:	pop    r13
    62a3:	pop    r14
    62a5:	jmp    6200 <addn_inv>
    62aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000000062b0 <quantum_mu2char>:
    62b0:	endbr64 
    62b4:	mov    ecx,0x38
    62b9:	mov    rdx,0xffffffffffffffff
    62c0:	mov    rax,rdi
    62c3:	add    rsi,0x1
    62c7:	shr    rax,cl
    62ca:	mov    BYTE PTR [rsi-0x1],al
    62cd:	mov    rax,rdx
    62d0:	shl    rax,cl
    62d3:	sub    ecx,0x8
    62d6:	not    rax
    62d9:	and    rdi,rax
    62dc:	cmp    ecx,0xfffffff8
    62df:	jne    62c0 <quantum_mu2char+0x10>
    62e1:	ret    
    62e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    62ed:	nop    DWORD PTR [rax]

00000000000062f0 <quantum_int2char>:
    62f0:	endbr64 
    62f4:	test   edi,edi
    62f6:	lea    eax,[rdi+0xffffff]
    62fc:	cmovns eax,edi
    62ff:	sar    eax,0x18
    6302:	mov    BYTE PTR [rsi],al
    6304:	mov    eax,edi
    6306:	sar    eax,0x1f
    6309:	shr    eax,0x8
    630c:	add    edi,eax
    630e:	and    edi,0xffffff
    6314:	sub    edi,eax
    6316:	lea    eax,[rdi+0xffff]
    631c:	mov    edx,edi
    631e:	cmovns eax,edi
    6321:	sar    edx,0x1f
    6324:	shr    edx,0x10
    6327:	sar    eax,0x10
    632a:	mov    BYTE PTR [rsi+0x1],al
    632d:	lea    eax,[rdi+rdx*1]
    6330:	movzx  eax,ax
    6333:	sub    eax,edx
    6335:	lea    edx,[rax+0xff]
    633b:	cmovns edx,eax
    633e:	mov    BYTE PTR [rsi+0x2],dh
    6341:	cdq    
    6342:	shr    edx,0x18
    6345:	add    eax,edx
    6347:	movzx  eax,al
    634a:	sub    eax,edx
    634c:	mov    BYTE PTR [rsi+0x3],al
    634f:	ret    

0000000000006350 <quantum_double2char>:
    6350:	endbr64 
    6354:	movsd  QWORD PTR [rsp-0x8],xmm0
    635a:	xor    eax,eax
    635c:	lea    rcx,[rsp-0x8]
    6361:	nop    DWORD PTR [rax+0x0]
    6368:	movzx  edx,BYTE PTR [rcx+rax*1]
    636c:	mov    BYTE PTR [rdi+rax*1],dl
    636f:	add    rax,0x1
    6373:	cmp    rax,0x8
    6377:	jne    6368 <quantum_double2char+0x18>
    6379:	ret    
    637a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000006380 <quantum_char2mu>:
    6380:	endbr64 
    6384:	add    rdi,0x7
    6388:	xor    ecx,ecx
    638a:	xor    r8d,r8d
    638d:	nop    DWORD PTR [rax]
    6390:	movzx  eax,BYTE PTR [rdi]
    6393:	sub    rdi,0x1
    6397:	shl    rax,cl
    639a:	add    ecx,0x8
    639d:	add    r8,rax
    63a0:	cmp    ecx,0x40
    63a3:	jne    6390 <quantum_char2mu+0x10>
    63a5:	mov    rax,r8
    63a8:	ret    
    63a9:	nop    DWORD PTR [rax+0x0]

00000000000063b0 <quantum_char2int>:
    63b0:	endbr64 
    63b4:	movzx  edx,BYTE PTR [rdi+0x2]
    63b8:	movzx  eax,BYTE PTR [rdi+0x3]
    63bc:	shl    edx,0x8
    63bf:	add    edx,eax
    63c1:	movzx  eax,BYTE PTR [rdi+0x1]
    63c5:	shl    eax,0x10
    63c8:	add    edx,eax
    63ca:	movzx  eax,BYTE PTR [rdi]
    63cd:	shl    eax,0x18
    63d0:	add    eax,edx
    63d2:	ret    
    63d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    63de:	xchg   ax,ax

00000000000063e0 <quantum_char2double>:
    63e0:	endbr64 
    63e4:	movsd  xmm0,QWORD PTR [rdi]
    63e8:	ret    
    63e9:	nop    DWORD PTR [rax+0x0]

00000000000063f0 <quantum_objcode_start>:
    63f0:	endbr64 
    63f4:	sub    rsp,0x8
    63f8:	mov    edi,0x10000
    63fd:	mov    DWORD PTR [rip+0x7c59],0x1        # e060 <opstatus>
    6407:	mov    QWORD PTR [rip+0x7c36],0x1        # e048 <allocated>
    6412:	call   1280 <malloc@plt>
    6417:	mov    QWORD PTR [rip+0x7c3a],rax        # e058 <objcode>
    641e:	test   rax,rax
    6421:	je     6431 <quantum_objcode_start+0x41>
    6423:	mov    edi,0x10000
    6428:	add    rsp,0x8
    642c:	jmp    5140 <quantum_memman>
    6431:	lea    rdi,[rip+0x3d78]        # a1b0 <_IO_stdin_used+0x1b0>
    6438:	call   11e0 <puts@plt>
    643d:	mov    edi,0x1
    6442:	call   12e0 <exit@plt>
    6447:	nop    WORD PTR [rax+rax*1+0x0]

0000000000006450 <quantum_objcode_stop>:
    6450:	endbr64 
    6454:	sub    rsp,0x8
    6458:	mov    rdi,QWORD PTR [rip+0x7bf9]        # e058 <objcode>
    645f:	mov    DWORD PTR [rip+0x7bf7],0x0        # e060 <opstatus>
    6469:	call   11c0 <free@plt>
    646e:	mov    rdi,QWORD PTR [rip+0x7bd3]        # e048 <allocated>
    6475:	mov    QWORD PTR [rip+0x7bd8],0x0        # e058 <objcode>
    6480:	neg    rdi
    6483:	shl    rdi,0x10
    6487:	call   5140 <quantum_memman>
    648c:	mov    QWORD PTR [rip+0x7bb1],0x0        # e048 <allocated>
    6497:	add    rsp,0x8
    649b:	ret    
    649c:	nop    DWORD PTR [rax+0x0]

00000000000064a0 <quantum_objcode_put>:
    64a0:	endbr64 
    64a4:	push   rbx
    64a5:	sub    rsp,0x130
    64ac:	mov    QWORD PTR [rsp+0x88],rsi
    64b4:	mov    QWORD PTR [rsp+0x90],rdx
    64bc:	mov    QWORD PTR [rsp+0x98],rcx
    64c4:	mov    QWORD PTR [rsp+0xa0],r8
    64cc:	mov    QWORD PTR [rsp+0xa8],r9
    64d4:	test   al,al
    64d6:	je     64e8 <quantum_objcode_put+0x48>
    64d8:	movaps XMMWORD PTR [rsp+0xb0],xmm0
    64e0:	movaps XMMWORD PTR [rsp+0xc0],xmm1
    64e8:	mov    rax,QWORD PTR fs:0x28
    64f1:	mov    QWORD PTR [rsp+0x78],rax
    64f6:	xor    eax,eax
    64f8:	mov    eax,DWORD PTR [rip+0x7b62]        # e060 <opstatus>
    64fe:	movzx  edx,dil
    6502:	test   eax,eax
    6504:	jne    6528 <quantum_objcode_put+0x88>
    6506:	mov    rbx,QWORD PTR [rsp+0x78]
    650b:	xor    rbx,QWORD PTR fs:0x28
    6514:	jne    6e44 <quantum_objcode_put+0x9a4>
    651a:	add    rsp,0x130
    6521:	pop    rbx
    6522:	ret    
    6523:	nop    DWORD PTR [rax+rax*1+0x0]
    6528:	lea    rax,[rsp+0x140]
    6530:	mov    DWORD PTR [rsp+0x8],0x8
    6538:	mov    QWORD PTR [rsp+0x10],rax
    653d:	lea    rax,[rsp+0x80]
    6545:	mov    DWORD PTR [rsp+0xc],0x30
    654d:	mov    QWORD PTR [rsp+0x18],rax
    6552:	mov    BYTE PTR [rsp+0x20],dil
    6557:	cmp    dil,0xe
    655b:	ja     6570 <quantum_objcode_put+0xd0>
    655d:	lea    rcx,[rip+0x3d48]        # a2ac <_IO_stdin_used+0x2ac>
    6564:	movsxd rax,DWORD PTR [rcx+rdx*4]
    6568:	add    rax,rcx
    656b:	notrack jmp rax
    656e:	xchg   ax,ax
    6570:	cmp    dil,0x82
    6574:	ja     6608 <quantum_objcode_put+0x168>
    657a:	cmp    dil,0x80
    657e:	ja     6700 <quantum_objcode_put+0x260>
    6584:	jne    6612 <quantum_objcode_put+0x172>
    658a:	mov    edx,0x1
    658f:	mov    ebx,0x1
    6594:	mov    rax,QWORD PTR [rip+0x7ab5]        # e050 <position>
    659b:	mov    rdi,QWORD PTR [rip+0x7ab6]        # e058 <objcode>
    65a2:	add    rdx,rax
    65a5:	mov    rcx,rax
    65a8:	shr    rdx,0x10
    65ac:	shr    rcx,0x10
    65b0:	cmp    rdx,rcx
    65b3:	ja     6ba0 <quantum_objcode_put+0x700>
    65b9:	lea    ecx,[rbx-0x1]
    65bc:	lea    rdx,[rsp+0x20]
    65c1:	lea    rsi,[rsp+rcx*1+0x21]
    65c6:	jmp    65d7 <quantum_objcode_put+0x137>
    65c8:	nop    DWORD PTR [rax+rax*1+0x0]
    65d0:	mov    rdi,QWORD PTR [rip+0x7a81]        # e058 <objcode>
    65d7:	movzx  ecx,BYTE PTR [rdx]
    65da:	add    rdx,0x1
    65de:	mov    BYTE PTR [rdi+rax*1],cl
    65e1:	mov    rax,QWORD PTR [rip+0x7a68]        # e050 <position>
    65e8:	add    rax,0x1
    65ec:	mov    QWORD PTR [rip+0x7a5d],rax        # e050 <position>
    65f3:	cmp    rsi,rdx
    65f6:	jne    65d0 <quantum_objcode_put+0x130>
    65f8:	mov    eax,0x1
    65fd:	jmp    6506 <quantum_objcode_put+0x66>
    6602:	nop    WORD PTR [rax+rax*1+0x0]
    6608:	cmp    dil,0xff
    660c:	je     658a <quantum_objcode_put+0xea>
    6612:	movzx  edx,dil
    6616:	lea    rsi,[rip+0x3c74]        # a291 <_IO_stdin_used+0x291>
    661d:	mov    edi,0x1
    6622:	xor    eax,eax
    6624:	call   12a0 <__printf_chk@plt>
    6629:	mov    edi,0x1
    662e:	call   12e0 <exit@plt>
    6633:	mov    eax,DWORD PTR [rsp+0x8]
    6637:	cmp    eax,0x2f
    663a:	jbe    6e0b <quantum_objcode_put+0x96b>
    6640:	mov    rdx,QWORD PTR [rsp+0x10]
    6645:	lea    rax,[rdx+0x8]
    6649:	mov    QWORD PTR [rsp+0x10],rax
    664e:	mov    eax,DWORD PTR [rdx]
    6650:	mov    edx,DWORD PTR [rsp+0xc]
    6654:	cmp    edx,0xaf
    665a:	ja     6e1e <quantum_objcode_put+0x97e>
    6660:	mov    ecx,edx
    6662:	add    edx,0x10
    6665:	add    rcx,QWORD PTR [rsp+0x18]
    666a:	mov    DWORD PTR [rsp+0xc],edx
    666e:	test   eax,eax
    6670:	lea    edx,[rax+0xffffff]
    6676:	movsd  xmm0,QWORD PTR [rcx]
    667a:	lea    rsi,[rsp+0x25]
    667f:	cmovns edx,eax
    6682:	movsd  QWORD PTR [rsp],xmm0
    6687:	sar    edx,0x18
    668a:	mov    BYTE PTR [rsp+0x21],dl
    668e:	cdq    
    668f:	shr    edx,0x8
    6692:	add    eax,edx
    6694:	and    eax,0xffffff
    6699:	sub    eax,edx
    669b:	lea    edx,[rax+0xffff]
    66a1:	cmovns edx,eax
    66a4:	sar    edx,0x10
    66a7:	mov    BYTE PTR [rsp+0x22],dl
    66ab:	cdq    
    66ac:	shr    edx,0x10
    66af:	add    eax,edx
    66b1:	movzx  eax,ax
    66b4:	sub    eax,edx
    66b6:	lea    edx,[rax+0xff]
    66bc:	cmovns edx,eax
    66bf:	mov    BYTE PTR [rsp+0x23],dh
    66c3:	cdq    
    66c4:	shr    edx,0x18
    66c7:	add    eax,edx
    66c9:	movzx  eax,al
    66cc:	sub    eax,edx
    66ce:	mov    rdx,rsp
    66d1:	mov    BYTE PTR [rsp+0x24],al
    66d5:	xor    eax,eax
    66d7:	nop    WORD PTR [rax+rax*1+0x0]
    66e0:	movzx  ecx,BYTE PTR [rdx+rax*1]
    66e4:	mov    BYTE PTR [rsi+rax*1],cl
    66e7:	add    rax,0x1
    66eb:	cmp    rax,0x8
    66ef:	jne    66e0 <quantum_objcode_put+0x240>
    66f1:	mov    edx,0xd
    66f6:	mov    ebx,0xd
    66fb:	jmp    6594 <quantum_objcode_put+0xf4>
    6700:	mov    eax,DWORD PTR [rsp+0x8]
    6704:	cmp    eax,0x2f
    6707:	ja     6df8 <quantum_objcode_put+0x958>
    670d:	mov    edx,eax
    670f:	add    eax,0x8
    6712:	add    rdx,QWORD PTR [rsp+0x18]
    6717:	mov    DWORD PTR [rsp+0x8],eax
    671b:	mov    eax,DWORD PTR [rdx]
    671d:	mov    ebx,0x5
    6722:	test   eax,eax
    6724:	lea    edx,[rax+0xffffff]
    672a:	cmovns edx,eax
    672d:	sar    edx,0x18
    6730:	mov    BYTE PTR [rsp+0x21],dl
    6734:	cdq    
    6735:	shr    edx,0x8
    6738:	add    eax,edx
    673a:	and    eax,0xffffff
    673f:	sub    eax,edx
    6741:	lea    edx,[rax+0xffff]
    6747:	cmovns edx,eax
    674a:	sar    edx,0x10
    674d:	mov    BYTE PTR [rsp+0x22],dl
    6751:	cdq    
    6752:	shr    edx,0x10
    6755:	add    eax,edx
    6757:	movzx  eax,ax
    675a:	sub    eax,edx
    675c:	lea    edx,[rax+0xff]
    6762:	cmovns edx,eax
    6765:	mov    BYTE PTR [rsp+0x23],dh
    6769:	cdq    
    676a:	shr    edx,0x18
    676d:	add    eax,edx
    676f:	movzx  eax,al
    6772:	sub    eax,edx
    6774:	mov    edx,0x5
    6779:	mov    BYTE PTR [rsp+0x24],al
    677d:	jmp    6594 <quantum_objcode_put+0xf4>
    6782:	mov    edx,DWORD PTR [rsp+0x8]
    6786:	cmp    edx,0x2f
    6789:	ja     6d03 <quantum_objcode_put+0x863>
    678f:	mov    rcx,QWORD PTR [rsp+0x18]
    6794:	mov    eax,edx
    6796:	lea    esi,[rdx+0x8]
    6799:	mov    DWORD PTR [rsp+0x8],esi
    679d:	mov    eax,DWORD PTR [rcx+rax*1]
    67a0:	test   eax,eax
    67a2:	lea    edi,[rax+0xffffff]
    67a8:	cmovns edi,eax
    67ab:	sar    edi,0x18
    67ae:	mov    BYTE PTR [rsp+0x21],dil
    67b3:	mov    edi,eax
    67b5:	sar    edi,0x1f
    67b8:	shr    edi,0x8
    67bb:	add    eax,edi
    67bd:	and    eax,0xffffff
    67c2:	sub    eax,edi
    67c4:	lea    edi,[rax+0xffff]
    67ca:	cmovns edi,eax
    67cd:	sar    edi,0x10
    67d0:	mov    BYTE PTR [rsp+0x22],dil
    67d5:	mov    edi,eax
    67d7:	sar    edi,0x1f
    67da:	shr    edi,0x10
    67dd:	add    eax,edi
    67df:	movzx  eax,ax
    67e2:	sub    eax,edi
    67e4:	lea    ebx,[rax+0xff]
    67ea:	mov    edi,eax
    67ec:	cmovns ebx,eax
    67ef:	sar    edi,0x1f
    67f2:	shr    edi,0x18
    67f5:	add    eax,edi
    67f7:	mov    BYTE PTR [rsp+0x23],bh
    67fb:	movzx  eax,al
    67fe:	sub    eax,edi
    6800:	mov    BYTE PTR [rsp+0x24],al
    6804:	cmp    esi,0x2f
    6807:	ja     6e7d <quantum_objcode_put+0x9dd>
    680d:	mov    eax,esi
    680f:	lea    esi,[rdx+0x10]
    6812:	mov    eax,DWORD PTR [rcx+rax*1]
    6815:	mov    DWORD PTR [rsp+0x8],esi
    6819:	test   eax,eax
    681b:	lea    edi,[rax+0xffffff]
    6821:	cmovns edi,eax
    6824:	sar    edi,0x18
    6827:	mov    BYTE PTR [rsp+0x25],dil
    682c:	mov    edi,eax
    682e:	sar    edi,0x1f
    6831:	shr    edi,0x8
    6834:	add    eax,edi
    6836:	and    eax,0xffffff
    683b:	sub    eax,edi
    683d:	lea    edi,[rax+0xffff]
    6843:	cmovns edi,eax
    6846:	sar    edi,0x10
    6849:	mov    BYTE PTR [rsp+0x26],dil
    684e:	mov    edi,eax
    6850:	sar    edi,0x1f
    6853:	shr    edi,0x10
    6856:	add    eax,edi
    6858:	movzx  eax,ax
    685b:	sub    eax,edi
    685d:	lea    ebx,[rax+0xff]
    6863:	mov    edi,eax
    6865:	cmovns ebx,eax
    6868:	sar    edi,0x1f
    686b:	shr    edi,0x18
    686e:	add    eax,edi
    6870:	mov    BYTE PTR [rsp+0x27],bh
    6874:	movzx  eax,al
    6877:	sub    eax,edi
    6879:	mov    BYTE PTR [rsp+0x28],al
    687d:	cmp    esi,0x2f
    6880:	ja     6e73 <quantum_objcode_put+0x9d3>
    6886:	add    edx,0x18
    6889:	mov    eax,esi
    688b:	mov    DWORD PTR [rsp+0x8],edx
    688f:	add    rax,rcx
    6892:	mov    eax,DWORD PTR [rax]
    6894:	mov    ebx,0xd
    6899:	test   eax,eax
    689b:	lea    edx,[rax+0xffffff]
    68a1:	cmovns edx,eax
    68a4:	sar    edx,0x18
    68a7:	mov    BYTE PTR [rsp+0x29],dl
    68ab:	cdq    
    68ac:	shr    edx,0x8
    68af:	add    eax,edx
    68b1:	and    eax,0xffffff
    68b6:	sub    eax,edx
    68b8:	lea    edx,[rax+0xffff]
    68be:	cmovns edx,eax
    68c1:	sar    edx,0x10
    68c4:	mov    BYTE PTR [rsp+0x2a],dl
    68c8:	cdq    
    68c9:	shr    edx,0x10
    68cc:	add    eax,edx
    68ce:	movzx  eax,ax
    68d1:	sub    eax,edx
    68d3:	lea    edx,[rax+0xff]
    68d9:	cmovns edx,eax
    68dc:	mov    BYTE PTR [rsp+0x2b],dh
    68e0:	cdq    
    68e1:	shr    edx,0x18
    68e4:	add    eax,edx
    68e6:	movzx  eax,al
    68e9:	sub    eax,edx
    68eb:	mov    edx,0xd
    68f0:	mov    BYTE PTR [rsp+0x2c],al
    68f4:	jmp    6594 <quantum_objcode_put+0xf4>
    68f9:	mov    ecx,DWORD PTR [rsp+0x8]
    68fd:	cmp    ecx,0x2f
    6900:	ja     6c7f <quantum_objcode_put+0x7df>
    6906:	mov    rdi,QWORD PTR [rsp+0x18]
    690b:	mov    eax,ecx
    690d:	lea    edx,[rcx+0x8]
    6910:	mov    DWORD PTR [rsp+0x8],edx
    6914:	mov    eax,DWORD PTR [rdi+rax*1]
    6917:	test   eax,eax
    6919:	lea    esi,[rax+0xffffff]
    691f:	cmovns esi,eax
    6922:	sar    esi,0x18
    6925:	mov    BYTE PTR [rsp+0x21],sil
    692a:	mov    esi,eax
    692c:	sar    esi,0x1f
    692f:	shr    esi,0x8
    6932:	add    eax,esi
    6934:	and    eax,0xffffff
    6939:	sub    eax,esi
    693b:	lea    esi,[rax+0xffff]
    6941:	cmovns esi,eax
    6944:	sar    esi,0x10
    6947:	mov    BYTE PTR [rsp+0x22],sil
    694c:	mov    esi,eax
    694e:	sar    esi,0x1f
    6951:	shr    esi,0x10
    6954:	add    eax,esi
    6956:	movzx  eax,ax
    6959:	sub    eax,esi
    695b:	lea    ebx,[rax+0xff]
    6961:	mov    esi,eax
    6963:	cmovns ebx,eax
    6966:	sar    esi,0x1f
    6969:	shr    esi,0x18
    696c:	add    eax,esi
    696e:	mov    BYTE PTR [rsp+0x23],bh
    6972:	movzx  eax,al
    6975:	sub    eax,esi
    6977:	mov    BYTE PTR [rsp+0x24],al
    697b:	cmp    edx,0x2f
    697e:	ja     6e49 <quantum_objcode_put+0x9a9>
    6984:	add    ecx,0x10
    6987:	mov    eax,edx
    6989:	mov    DWORD PTR [rsp+0x8],ecx
    698d:	add    rax,rdi
    6990:	mov    eax,DWORD PTR [rax]
    6992:	test   eax,eax
    6994:	lea    edx,[rax+0xffffff]
    699a:	cmovns edx,eax
    699d:	sar    edx,0x18
    69a0:	mov    BYTE PTR [rsp+0x25],dl
    69a4:	cdq    
    69a5:	shr    edx,0x8
    69a8:	add    eax,edx
    69aa:	and    eax,0xffffff
    69af:	sub    eax,edx
    69b1:	lea    edx,[rax+0xffff]
    69b7:	cmovns edx,eax
    69ba:	sar    edx,0x10
    69bd:	mov    BYTE PTR [rsp+0x26],dl
    69c1:	cdq    
    69c2:	shr    edx,0x10
    69c5:	add    eax,edx
    69c7:	movzx  eax,ax
    69ca:	sub    eax,edx
    69cc:	lea    edx,[rax+0xff]
    69d2:	cmovns edx,eax
    69d5:	mov    BYTE PTR [rsp+0x27],dh
    69d9:	cdq    
    69da:	shr    edx,0x18
    69dd:	add    eax,edx
    69df:	movzx  eax,al
    69e2:	sub    eax,edx
    69e4:	mov    BYTE PTR [rsp+0x28],al
    69e8:	mov    edx,0x9
    69ed:	mov    ebx,0x9
    69f2:	jmp    6594 <quantum_objcode_put+0xf4>
    69f7:	mov    eax,DWORD PTR [rsp+0x8]
    69fb:	cmp    eax,0x2f
    69fe:	ja     6c6c <quantum_objcode_put+0x7cc>
    6a04:	mov    edx,eax
    6a06:	add    eax,0x8
    6a09:	add    rdx,QWORD PTR [rsp+0x18]
    6a0e:	mov    DWORD PTR [rsp+0x8],eax
    6a12:	mov    rsi,QWORD PTR [rdx]
    6a15:	lea    rax,[rsp+0x21]
    6a1a:	lea    r8,[rsp+0x29]
    6a1f:	mov    ecx,0x38
    6a24:	mov    rdi,0xffffffffffffffff
    6a2b:	nop    DWORD PTR [rax+rax*1+0x0]
    6a30:	mov    rdx,rsi
    6a33:	add    rax,0x1
    6a37:	shr    rdx,cl
    6a3a:	mov    BYTE PTR [rax-0x1],dl
    6a3d:	mov    rdx,rdi
    6a40:	shl    rdx,cl
    6a43:	sub    ecx,0x8
    6a46:	not    rdx
    6a49:	and    rsi,rdx
    6a4c:	cmp    r8,rax
    6a4f:	jne    6a30 <quantum_objcode_put+0x590>
    6a51:	jmp    69e8 <quantum_objcode_put+0x548>
    6a53:	mov    ecx,DWORD PTR [rsp+0x8]
    6a57:	cmp    ecx,0x2f
    6a5a:	ja     6be8 <quantum_objcode_put+0x748>
    6a60:	mov    rdi,QWORD PTR [rsp+0x18]
    6a65:	mov    edx,ecx
    6a67:	lea    eax,[rcx+0x8]
    6a6a:	mov    DWORD PTR [rsp+0x8],eax
    6a6e:	mov    edx,DWORD PTR [rdi+rdx*1]
    6a71:	test   edx,edx
    6a73:	lea    esi,[rdx+0xffffff]
    6a79:	cmovns esi,edx
    6a7c:	sar    esi,0x18
    6a7f:	mov    BYTE PTR [rsp+0x21],sil
    6a84:	mov    esi,edx
    6a86:	sar    esi,0x1f
    6a89:	shr    esi,0x8
    6a8c:	add    edx,esi
    6a8e:	and    edx,0xffffff
    6a94:	sub    edx,esi
    6a96:	lea    esi,[rdx+0xffff]
    6a9c:	cmovns esi,edx
    6a9f:	sar    esi,0x10
    6aa2:	mov    BYTE PTR [rsp+0x22],sil
    6aa7:	mov    esi,edx
    6aa9:	sar    esi,0x1f
    6aac:	shr    esi,0x10
    6aaf:	add    edx,esi
    6ab1:	movzx  edx,dx
    6ab4:	sub    edx,esi
    6ab6:	lea    ebx,[rdx+0xff]
    6abc:	mov    esi,edx
    6abe:	cmovns ebx,edx
    6ac1:	sar    esi,0x1f
    6ac4:	shr    esi,0x18
    6ac7:	add    edx,esi
    6ac9:	mov    BYTE PTR [rsp+0x23],bh
    6acd:	movzx  edx,dl
    6ad0:	sub    edx,esi
    6ad2:	mov    BYTE PTR [rsp+0x24],dl
    6ad6:	cmp    eax,0x2f
    6ad9:	ja     6e69 <quantum_objcode_put+0x9c9>
    6adf:	add    ecx,0x10
    6ae2:	add    rax,rdi
    6ae5:	mov    DWORD PTR [rsp+0x8],ecx
    6ae9:	mov    eax,DWORD PTR [rax]
    6aeb:	test   eax,eax
    6aed:	lea    edx,[rax+0xffffff]
    6af3:	cmovns edx,eax
    6af6:	sar    edx,0x18
    6af9:	mov    BYTE PTR [rsp+0x25],dl
    6afd:	cdq    
    6afe:	shr    edx,0x8
    6b01:	add    eax,edx
    6b03:	and    eax,0xffffff
    6b08:	sub    eax,edx
    6b0a:	lea    edx,[rax+0xffff]
    6b10:	cmovns edx,eax
    6b13:	sar    edx,0x10
    6b16:	mov    BYTE PTR [rsp+0x26],dl
    6b1a:	cdq    
    6b1b:	shr    edx,0x10
    6b1e:	add    eax,edx
    6b20:	movzx  eax,ax
    6b23:	sub    eax,edx
    6b25:	lea    edx,[rax+0xff]
    6b2b:	cmovns edx,eax
    6b2e:	mov    BYTE PTR [rsp+0x27],dh
    6b32:	cdq    
    6b33:	shr    edx,0x18
    6b36:	add    eax,edx
    6b38:	movzx  eax,al
    6b3b:	sub    eax,edx
    6b3d:	mov    BYTE PTR [rsp+0x28],al
    6b41:	mov    eax,DWORD PTR [rsp+0xc]
    6b45:	cmp    eax,0xaf
    6b4a:	ja     6e31 <quantum_objcode_put+0x991>
    6b50:	mov    edx,eax
    6b52:	add    eax,0x10
    6b55:	add    rdx,QWORD PTR [rsp+0x18]
    6b5a:	mov    DWORD PTR [rsp+0xc],eax
    6b5e:	movsd  xmm0,QWORD PTR [rdx]
    6b62:	xor    eax,eax
    6b64:	lea    rsi,[rsp+0x29]
    6b69:	mov    rdx,rsp
    6b6c:	movsd  QWORD PTR [rsp],xmm0
    6b71:	nop    DWORD PTR [rax+0x0]
    6b78:	movzx  ecx,BYTE PTR [rdx+rax*1]
    6b7c:	mov    BYTE PTR [rsi+rax*1],cl
    6b7f:	add    rax,0x1
    6b83:	cmp    rax,0x8
    6b87:	jne    6b78 <quantum_objcode_put+0x6d8>
    6b89:	mov    edx,0x11
    6b8e:	mov    ebx,0x11
    6b93:	jmp    6594 <quantum_objcode_put+0xf4>
    6b98:	nop    DWORD PTR [rax+rax*1+0x0]
    6ba0:	mov    rax,QWORD PTR [rip+0x74a1]        # e048 <allocated>
    6ba7:	lea    rsi,[rax+0x1]
    6bab:	mov    QWORD PTR [rip+0x7496],rsi        # e048 <allocated>
    6bb2:	shl    rsi,0x10
    6bb6:	call   1290 <realloc@plt>
    6bbb:	mov    QWORD PTR [rip+0x7496],rax        # e058 <objcode>
    6bc2:	test   rax,rax
    6bc5:	je     6e53 <quantum_objcode_put+0x9b3>
    6bcb:	mov    edi,0x10000
    6bd0:	call   5140 <quantum_memman>
    6bd5:	mov    rdi,QWORD PTR [rip+0x747c]        # e058 <objcode>
    6bdc:	mov    rax,QWORD PTR [rip+0x746d]        # e050 <position>
    6be3:	jmp    65b9 <quantum_objcode_put+0x119>
    6be8:	mov    rax,QWORD PTR [rsp+0x10]
    6bed:	mov    rdx,rax
    6bf0:	add    rax,0x8
    6bf4:	mov    edx,DWORD PTR [rdx]
    6bf6:	mov    QWORD PTR [rsp+0x10],rax
    6bfb:	test   edx,edx
    6bfd:	lea    ecx,[rdx+0xffffff]
    6c03:	cmovns ecx,edx
    6c06:	sar    ecx,0x18
    6c09:	mov    BYTE PTR [rsp+0x21],cl
    6c0d:	mov    ecx,edx
    6c0f:	sar    ecx,0x1f
    6c12:	shr    ecx,0x8
    6c15:	add    edx,ecx
    6c17:	and    edx,0xffffff
    6c1d:	sub    edx,ecx
    6c1f:	lea    ecx,[rdx+0xffff]
    6c25:	cmovns ecx,edx
    6c28:	sar    ecx,0x10
    6c2b:	mov    BYTE PTR [rsp+0x22],cl
    6c2f:	mov    ecx,edx
    6c31:	sar    ecx,0x1f
    6c34:	shr    ecx,0x10
    6c37:	add    edx,ecx
    6c39:	movzx  edx,dx
    6c3c:	sub    edx,ecx
    6c3e:	lea    ecx,[rdx+0xff]
    6c44:	cmovns ecx,edx
    6c47:	mov    BYTE PTR [rsp+0x23],ch
    6c4b:	mov    ecx,edx
    6c4d:	sar    ecx,0x1f
    6c50:	shr    ecx,0x18
    6c53:	add    edx,ecx
    6c55:	movzx  edx,dl
    6c58:	sub    edx,ecx
    6c5a:	mov    BYTE PTR [rsp+0x24],dl
    6c5e:	lea    rdx,[rax+0x8]
    6c62:	mov    QWORD PTR [rsp+0x10],rdx
    6c67:	jmp    6ae9 <quantum_objcode_put+0x649>
    6c6c:	mov    rdx,QWORD PTR [rsp+0x10]
    6c71:	lea    rax,[rdx+0x8]
    6c75:	mov    QWORD PTR [rsp+0x10],rax
    6c7a:	jmp    6a12 <quantum_objcode_put+0x572>
    6c7f:	mov    rax,QWORD PTR [rsp+0x10]
    6c84:	mov    rdx,rax
    6c87:	add    rax,0x8
    6c8b:	mov    edx,DWORD PTR [rdx]
    6c8d:	mov    QWORD PTR [rsp+0x10],rax
    6c92:	test   edx,edx
    6c94:	lea    ecx,[rdx+0xffffff]
    6c9a:	cmovns ecx,edx
    6c9d:	sar    ecx,0x18
    6ca0:	mov    BYTE PTR [rsp+0x21],cl
    6ca4:	mov    ecx,edx
    6ca6:	sar    ecx,0x1f
    6ca9:	shr    ecx,0x8
    6cac:	add    edx,ecx
    6cae:	and    edx,0xffffff
    6cb4:	sub    edx,ecx
    6cb6:	lea    ecx,[rdx+0xffff]
    6cbc:	cmovns ecx,edx
    6cbf:	sar    ecx,0x10
    6cc2:	mov    BYTE PTR [rsp+0x22],cl
    6cc6:	mov    ecx,edx
    6cc8:	sar    ecx,0x1f
    6ccb:	shr    ecx,0x10
    6cce:	add    edx,ecx
    6cd0:	movzx  edx,dx
    6cd3:	sub    edx,ecx
    6cd5:	lea    ecx,[rdx+0xff]
    6cdb:	cmovns ecx,edx
    6cde:	mov    BYTE PTR [rsp+0x23],ch
    6ce2:	mov    ecx,edx
    6ce4:	sar    ecx,0x1f
    6ce7:	shr    ecx,0x18
    6cea:	add    edx,ecx
    6cec:	movzx  edx,dl
    6cef:	sub    edx,ecx
    6cf1:	mov    BYTE PTR [rsp+0x24],dl
    6cf5:	lea    rdx,[rax+0x8]
    6cf9:	mov    QWORD PTR [rsp+0x10],rdx
    6cfe:	jmp    6990 <quantum_objcode_put+0x4f0>
    6d03:	mov    rax,QWORD PTR [rsp+0x10]
    6d08:	mov    rdx,rax
    6d0b:	add    rax,0x8
    6d0f:	mov    edx,DWORD PTR [rdx]
    6d11:	mov    QWORD PTR [rsp+0x10],rax
    6d16:	test   edx,edx
    6d18:	lea    ecx,[rdx+0xffffff]
    6d1e:	cmovns ecx,edx
    6d21:	sar    ecx,0x18
    6d24:	mov    BYTE PTR [rsp+0x21],cl
    6d28:	mov    ecx,edx
    6d2a:	sar    ecx,0x1f
    6d2d:	shr    ecx,0x8
    6d30:	add    edx,ecx
    6d32:	and    edx,0xffffff
    6d38:	sub    edx,ecx
    6d3a:	lea    ecx,[rdx+0xffff]
    6d40:	cmovns ecx,edx
    6d43:	sar    ecx,0x10
    6d46:	mov    BYTE PTR [rsp+0x22],cl
    6d4a:	mov    ecx,edx
    6d4c:	sar    ecx,0x1f
    6d4f:	shr    ecx,0x10
    6d52:	add    edx,ecx
    6d54:	movzx  edx,dx
    6d57:	sub    edx,ecx
    6d59:	lea    ecx,[rdx+0xff]
    6d5f:	cmovns ecx,edx
    6d62:	mov    BYTE PTR [rsp+0x23],ch
    6d66:	mov    ecx,edx
    6d68:	sar    ecx,0x1f
    6d6b:	shr    ecx,0x18
    6d6e:	add    edx,ecx
    6d70:	movzx  edx,dl
    6d73:	sub    edx,ecx
    6d75:	mov    BYTE PTR [rsp+0x24],dl
    6d79:	mov    rdx,rax
    6d7c:	add    rax,0x8
    6d80:	mov    edx,DWORD PTR [rdx]
    6d82:	mov    QWORD PTR [rsp+0x10],rax
    6d87:	test   edx,edx
    6d89:	lea    ecx,[rdx+0xffffff]
    6d8f:	cmovns ecx,edx
    6d92:	sar    ecx,0x18
    6d95:	mov    BYTE PTR [rsp+0x25],cl
    6d99:	mov    ecx,edx
    6d9b:	sar    ecx,0x1f
    6d9e:	shr    ecx,0x8
    6da1:	add    edx,ecx
    6da3:	and    edx,0xffffff
    6da9:	sub    edx,ecx
    6dab:	lea    ecx,[rdx+0xffff]
    6db1:	cmovns ecx,edx
    6db4:	sar    ecx,0x10
    6db7:	mov    BYTE PTR [rsp+0x26],cl
    6dbb:	mov    ecx,edx
    6dbd:	sar    ecx,0x1f
    6dc0:	shr    ecx,0x10
    6dc3:	add    edx,ecx
    6dc5:	movzx  edx,dx
    6dc8:	sub    edx,ecx
    6dca:	lea    ecx,[rdx+0xff]
    6dd0:	cmovns ecx,edx
    6dd3:	mov    BYTE PTR [rsp+0x27],ch
    6dd7:	mov    ecx,edx
    6dd9:	sar    ecx,0x1f
    6ddc:	shr    ecx,0x18
    6ddf:	add    edx,ecx
    6de1:	movzx  edx,dl
    6de4:	sub    edx,ecx
    6de6:	mov    BYTE PTR [rsp+0x28],dl
    6dea:	lea    rdx,[rax+0x8]
    6dee:	mov    QWORD PTR [rsp+0x10],rdx
    6df3:	jmp    6892 <quantum_objcode_put+0x3f2>
    6df8:	mov    rdx,QWORD PTR [rsp+0x10]
    6dfd:	lea    rax,[rdx+0x8]
    6e01:	mov    QWORD PTR [rsp+0x10],rax
    6e06:	jmp    671b <quantum_objcode_put+0x27b>
    6e0b:	mov    edx,eax
    6e0d:	add    eax,0x8
    6e10:	add    rdx,QWORD PTR [rsp+0x18]
    6e15:	mov    DWORD PTR [rsp+0x8],eax
    6e19:	jmp    664e <quantum_objcode_put+0x1ae>
    6e1e:	mov    rcx,QWORD PTR [rsp+0x10]
    6e23:	lea    rdx,[rcx+0x8]
    6e27:	mov    QWORD PTR [rsp+0x10],rdx
    6e2c:	jmp    666e <quantum_objcode_put+0x1ce>
    6e31:	mov    rdx,QWORD PTR [rsp+0x10]
    6e36:	lea    rax,[rdx+0x8]
    6e3a:	mov    QWORD PTR [rsp+0x10],rax
    6e3f:	jmp    6b5e <quantum_objcode_put+0x6be>
    6e44:	call   1210 <__stack_chk_fail@plt>
    6e49:	mov    rax,QWORD PTR [rsp+0x10]
    6e4e:	jmp    6cf5 <quantum_objcode_put+0x855>
    6e53:	lea    rdi,[rip+0x3386]        # a1e0 <_IO_stdin_used+0x1e0>
    6e5a:	call   11e0 <puts@plt>
    6e5f:	mov    edi,0x1
    6e64:	call   12e0 <exit@plt>
    6e69:	mov    rax,QWORD PTR [rsp+0x10]
    6e6e:	jmp    6c5e <quantum_objcode_put+0x7be>
    6e73:	mov    rax,QWORD PTR [rsp+0x10]
    6e78:	jmp    6dea <quantum_objcode_put+0x94a>
    6e7d:	mov    rax,QWORD PTR [rsp+0x10]
    6e82:	jmp    6d79 <quantum_objcode_put+0x8d9>
    6e87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000006e90 <quantum_objcode_write>:
    6e90:	endbr64 
    6e94:	mov    eax,DWORD PTR [rip+0x71c6]        # e060 <opstatus>
    6e9a:	push   rbp
    6e9b:	test   eax,eax
    6e9d:	je     6ef0 <quantum_objcode_write+0x60>
    6e9f:	test   rdi,rdi
    6ea2:	cmove  rdi,QWORD PTR [rip+0x71ce]        # e078 <globalfile>
    6eaa:	lea    rsi,[rip+0x33d8]        # a289 <_IO_stdin_used+0x289>
    6eb1:	call   12b0 <fopen@plt>
    6eb6:	mov    rbp,rax
    6eb9:	mov    eax,0xffffffff
    6ebe:	test   rbp,rbp
    6ec1:	je     6ee8 <quantum_objcode_write+0x58>
    6ec3:	mov    rsi,QWORD PTR [rip+0x7186]        # e050 <position>
    6eca:	mov    rdi,QWORD PTR [rip+0x7187]        # e058 <objcode>
    6ed1:	mov    rcx,rbp
    6ed4:	mov    edx,0x1
    6ed9:	call   12f0 <fwrite@plt>
    6ede:	mov    rdi,rbp
    6ee1:	call   1200 <fclose@plt>
    6ee6:	xor    eax,eax
    6ee8:	pop    rbp
    6ee9:	ret    
    6eea:	nop    WORD PTR [rax+rax*1+0x0]
    6ef0:	mov    rcx,QWORD PTR [rip+0x7129]        # e020 <stderr@@GLIBC_2.2.5>
    6ef7:	mov    edx,0x49
    6efc:	mov    esi,0x1
    6f01:	lea    rdi,[rip+0x3308]        # a210 <_IO_stdin_used+0x210>
    6f08:	call   12f0 <fwrite@plt>
    6f0d:	mov    eax,0x1
    6f12:	pop    rbp
    6f13:	ret    
    6f14:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    6f1f:	nop

0000000000006f20 <quantum_objcode_file>:
    6f20:	endbr64 
    6f24:	mov    QWORD PTR [rip+0x714d],rdi        # e078 <globalfile>
    6f2b:	ret    
    6f2c:	nop    DWORD PTR [rax+0x0]

0000000000006f30 <quantum_objcode_exit>:
    6f30:	endbr64 
    6f34:	sub    rsp,0x8
    6f38:	xor    edi,edi
    6f3a:	call   6e90 <quantum_objcode_write>
    6f3f:	xor    eax,eax
    6f41:	add    rsp,0x8
    6f45:	jmp    6450 <quantum_objcode_stop>
    6f4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000006f50 <quantum_objcode_run>:
    6f50:	endbr64 
    6f54:	push   r15
    6f56:	push   r14
    6f58:	mov    r14,rdi
    6f5b:	push   r13
    6f5d:	push   r12
    6f5f:	mov    r12,rsi
    6f62:	lea    rsi,[rip+0x3322]        # a28b <_IO_stdin_used+0x28b>
    6f69:	push   rbp
    6f6a:	push   rbx
    6f6b:	sub    rsp,0x98
    6f72:	mov    rax,QWORD PTR fs:0x28
    6f7b:	mov    QWORD PTR [rsp+0x88],rax
    6f83:	xor    eax,eax
    6f85:	call   12b0 <fopen@plt>
    6f8a:	mov    DWORD PTR [rsp+0x8],0x0
    6f92:	test   rax,rax
    6f95:	je     74eb <quantum_objcode_run+0x59b>
    6f9b:	mov    rbp,rax
    6f9e:	lea    rbx,[rsp+0x30]
    6fa3:	lea    r13,[rsp+0x80]
    6fab:	mov    rdi,rbp
    6fae:	lea    r15,[rip+0x3333]        # a2e8 <_IO_stdin_used+0x2e8>
    6fb5:	call   1260 <feof@plt>
    6fba:	test   eax,eax
    6fbc:	jne    71d5 <quantum_objcode_run+0x285>
    6fc2:	nop    WORD PTR [rax+rax*1+0x0]
    6fc8:	mov    rax,rbx
    6fcb:	nop    DWORD PTR [rax+rax*1+0x0]
    6fd0:	mov    BYTE PTR [rax],0x0
    6fd3:	add    rax,0x1
    6fd7:	cmp    rax,r13
    6fda:	jne    6fd0 <quantum_objcode_run+0x80>
    6fdc:	mov    rdi,rbp
    6fdf:	call   1230 <fgetc@plt>
    6fe4:	movzx  r14d,al
    6fe8:	cmp    r14d,0xe
    6fec:	jg     7388 <quantum_objcode_run+0x438>
    6ff2:	mov    rcx,rbp
    6ff5:	mov    edx,0x1
    6ffa:	ja     732f <quantum_objcode_run+0x3df>
    7000:	mov    eax,r14d
    7003:	movsxd rax,DWORD PTR [r15+rax*4]
    7007:	add    rax,r15
    700a:	notrack jmp rax
    700d:	mov    esi,0x4
    7012:	mov    rdi,rbx
    7015:	call   11f0 <fread@plt>
    701a:	movzx  eax,BYTE PTR [rsp+0x32]
    701f:	mov    rdi,rbx
    7022:	mov    rcx,rbp
    7025:	movzx  r10d,BYTE PTR [rsp+0x33]
    702b:	mov    esi,0x8
    7030:	mov    edx,0x1
    7035:	shl    eax,0x8
    7038:	add    r10d,eax
    703b:	movzx  eax,BYTE PTR [rsp+0x31]
    7040:	shl    eax,0x10
    7043:	add    eax,r10d
    7046:	movzx  r10d,BYTE PTR [rsp+0x30]
    704c:	shl    r10d,0x18
    7050:	add    r10d,eax
    7053:	mov    DWORD PTR [rsp+0xc],r10d
    7058:	call   11f0 <fread@plt>
    705d:	movsd  xmm0,QWORD PTR [rsp+0x30]
    7063:	mov    r10d,DWORD PTR [rsp+0xc]
    7068:	mov    rsi,r12
    706b:	cmp    r14d,0xa
    706f:	mov    edi,r10d
    7072:	cvtsd2ss xmm0,xmm0
    7076:	je     74a0 <quantum_objcode_run+0x550>
    707c:	cmp    r14d,0xb
    7080:	je     7496 <quantum_objcode_run+0x546>
    7086:	cmp    r14d,0x8
    708a:	je     747f <quantum_objcode_run+0x52f>
    7090:	cmp    r14d,0x9
    7094:	jne    7514 <quantum_objcode_run+0x5c4>
    709a:	call   4910 <quantum_r_z>
    709f:	jmp    71c0 <quantum_objcode_run+0x270>
    70a4:	mov    rdi,rbx
    70a7:	mov    esi,0x4
    70ac:	call   11f0 <fread@plt>
    70b1:	movzx  eax,BYTE PTR [rsp+0x32]
    70b6:	movzx  edi,BYTE PTR [rsp+0x33]
    70bb:	lea    r8d,[r14-0x3]
    70bf:	shl    eax,0x8
    70c2:	add    edi,eax
    70c4:	movzx  eax,BYTE PTR [rsp+0x31]
    70c9:	shl    eax,0x10
    70cc:	add    eax,edi
    70ce:	movzx  edi,BYTE PTR [rsp+0x30]
    70d3:	shl    edi,0x18
    70d6:	add    edi,eax
    70d8:	cmp    r8d,0xb
    70dc:	ja     71c0 <quantum_objcode_run+0x270>
    70e2:	lea    rcx,[rip+0x323b]        # a324 <_IO_stdin_used+0x324>
    70e9:	movsxd rax,DWORD PTR [rcx+r8*4]
    70ed:	add    rax,rcx
    70f0:	notrack jmp rax
    70f3:	mov    esi,0x4
    70f8:	mov    rdi,rbx
    70fb:	call   11f0 <fread@plt>
    7100:	movzx  eax,BYTE PTR [rsp+0x32]
    7105:	mov    rcx,rbp
    7108:	mov    rdi,rbx
    710b:	movzx  r8d,BYTE PTR [rsp+0x33]
    7111:	mov    edx,0x1
    7116:	mov    esi,0x4
    711b:	shl    eax,0x8
    711e:	add    r8d,eax
    7121:	movzx  eax,BYTE PTR [rsp+0x31]
    7126:	shl    eax,0x10
    7129:	add    eax,r8d
    712c:	movzx  r8d,BYTE PTR [rsp+0x30]
    7132:	shl    r8d,0x18
    7136:	lea    r14d,[r8+rax*1]
    713a:	call   11f0 <fread@plt>
    713f:	movzx  eax,BYTE PTR [rsp+0x32]
    7144:	mov    rcx,rbp
    7147:	mov    rdi,rbx
    714a:	movzx  r10d,BYTE PTR [rsp+0x33]
    7150:	mov    edx,0x1
    7155:	mov    esi,0x4
    715a:	shl    eax,0x8
    715d:	add    r10d,eax
    7160:	movzx  eax,BYTE PTR [rsp+0x31]
    7165:	shl    eax,0x10
    7168:	add    eax,r10d
    716b:	movzx  r10d,BYTE PTR [rsp+0x30]
    7171:	shl    r10d,0x18
    7175:	add    r10d,eax
    7178:	mov    DWORD PTR [rsp+0xc],r10d
    717d:	call   11f0 <fread@plt>
    7182:	movzx  eax,BYTE PTR [rsp+0x32]
    7187:	mov    rcx,r12
    718a:	mov    edi,r14d
    718d:	movzx  edx,BYTE PTR [rsp+0x33]
    7192:	mov    r10d,DWORD PTR [rsp+0xc]
    7197:	shl    eax,0x8
    719a:	add    edx,eax
    719c:	movzx  eax,BYTE PTR [rsp+0x31]
    71a1:	mov    esi,r10d
    71a4:	shl    eax,0x10
    71a7:	add    eax,edx
    71a9:	movzx  edx,BYTE PTR [rsp+0x30]
    71ae:	shl    edx,0x18
    71b1:	add    edx,eax
    71b3:	call   1f80 <quantum_toffoli>
    71b8:	nop    DWORD PTR [rax+rax*1+0x0]
    71c0:	mov    rdi,rbp
    71c3:	add    DWORD PTR [rsp+0x8],0x1
    71c8:	call   1260 <feof@plt>
    71cd:	test   eax,eax
    71cf:	je     6fc8 <quantum_objcode_run+0x78>
    71d5:	mov    rdi,rbp
    71d8:	call   1200 <fclose@plt>
    71dd:	jmp    73eb <quantum_objcode_run+0x49b>
    71e2:	mov    esi,0x4
    71e7:	mov    rdi,rbx
    71ea:	call   11f0 <fread@plt>
    71ef:	movzx  eax,BYTE PTR [rsp+0x32]
    71f4:	mov    rcx,rbp
    71f7:	mov    rdi,rbx
    71fa:	movzx  r10d,BYTE PTR [rsp+0x33]
    7200:	mov    esi,0x4
    7205:	mov    edx,0x1
    720a:	shl    eax,0x8
    720d:	add    r10d,eax
    7210:	movzx  eax,BYTE PTR [rsp+0x31]
    7215:	shl    eax,0x10
    7218:	add    eax,r10d
    721b:	movzx  r10d,BYTE PTR [rsp+0x30]
    7221:	shl    r10d,0x18
    7225:	add    r10d,eax
    7228:	mov    DWORD PTR [rsp+0xc],r10d
    722d:	call   11f0 <fread@plt>
    7232:	movzx  eax,BYTE PTR [rsp+0x32]
    7237:	movzx  esi,BYTE PTR [rsp+0x33]
    723c:	mov    r10d,DWORD PTR [rsp+0xc]
    7241:	shl    eax,0x8
    7244:	add    esi,eax
    7246:	movzx  eax,BYTE PTR [rsp+0x31]
    724b:	shl    eax,0x10
    724e:	add    eax,esi
    7250:	movzx  esi,BYTE PTR [rsp+0x30]
    7255:	shl    esi,0x18
    7258:	add    esi,eax
    725a:	cmp    r14d,0x1
    725e:	je     746f <quantum_objcode_run+0x51f>
    7264:	cmp    r14d,0xc
    7268:	jne    71c0 <quantum_objcode_run+0x270>
    726e:	mov    rdx,r12
    7271:	mov    edi,r10d
    7274:	call   4cc0 <quantum_cond_phase>
    7279:	jmp    71c0 <quantum_objcode_run+0x270>
    727e:	mov    rdi,rbx
    7281:	mov    esi,0x4
    7286:	call   11f0 <fread@plt>
    728b:	movzx  eax,BYTE PTR [rsp+0x32]
    7290:	mov    rcx,rbp
    7293:	mov    rdi,rbx
    7296:	movzx  r8d,BYTE PTR [rsp+0x33]
    729c:	mov    edx,0x1
    72a1:	mov    esi,0x4
    72a6:	shl    eax,0x8
    72a9:	add    r8d,eax
    72ac:	movzx  eax,BYTE PTR [rsp+0x31]
    72b1:	shl    eax,0x10
    72b4:	add    eax,r8d
    72b7:	movzx  r8d,BYTE PTR [rsp+0x30]
    72bd:	shl    r8d,0x18
    72c1:	lea    r14d,[r8+rax*1]
    72c5:	call   11f0 <fread@plt>
    72ca:	movzx  eax,BYTE PTR [rsp+0x32]
    72cf:	mov    rdi,rbx
    72d2:	mov    rcx,rbp
    72d5:	movzx  r10d,BYTE PTR [rsp+0x33]
    72db:	mov    edx,0x1
    72e0:	mov    esi,0x8
    72e5:	shl    eax,0x8
    72e8:	add    r10d,eax
    72eb:	movzx  eax,BYTE PTR [rsp+0x31]
    72f0:	shl    eax,0x10
    72f3:	add    eax,r10d
    72f6:	movzx  r10d,BYTE PTR [rsp+0x30]
    72fc:	shl    r10d,0x18
    7300:	add    r10d,eax
    7303:	mov    DWORD PTR [rsp+0xc],r10d
    7308:	call   11f0 <fread@plt>
    730d:	mov    r10d,DWORD PTR [rsp+0xc]
    7312:	mov    rdx,r12
    7315:	mov    edi,r14d
    7318:	pxor   xmm0,xmm0
    731c:	mov    esi,r10d
    731f:	cvtsd2ss xmm0,QWORD PTR [rsp+0x30]
    7325:	call   4fb0 <quantum_cond_phase_kick>
    732a:	jmp    71c0 <quantum_objcode_run+0x270>
    732f:	mov    esi,0x8
    7334:	mov    rdi,rbx
    7337:	call   11f0 <fread@plt>
    733c:	lea    rdx,[rsp+0x37]
    7341:	xor    ecx,ecx
    7343:	xor    esi,esi
    7345:	nop    DWORD PTR [rax]
    7348:	movzx  eax,BYTE PTR [rdx]
    734b:	sub    rdx,0x1
    734f:	shl    rax,cl
    7352:	add    ecx,0x8
    7355:	add    rsi,rax
    7358:	cmp    ecx,0x40
    735b:	jne    7348 <quantum_objcode_run+0x3f8>
    735d:	lea    rdi,[rsp+0x10]
    7362:	mov    edx,0xc
    7367:	call   7fe0 <quantum_new_qureg>
    736c:	movdqu xmm1,XMMWORD PTR [rsp+0x10]
    7372:	movdqu xmm2,XMMWORD PTR [rsp+0x20]
    7378:	movups XMMWORD PTR [r12],xmm1
    737d:	movups XMMWORD PTR [r12+0x10],xmm2
    7383:	jmp    71c0 <quantum_objcode_run+0x270>
    7388:	cmp    r14d,0x82
    738f:	jg     73bd <quantum_objcode_run+0x46d>
    7391:	cmp    r14d,0x80
    7398:	jg     7414 <quantum_objcode_run+0x4c4>
    739a:	jne    73ca <quantum_objcode_run+0x47a>
    739c:	push   QWORD PTR [r12+0x18]
    73a1:	push   QWORD PTR [r12+0x10]
    73a6:	push   QWORD PTR [r12+0x8]
    73ab:	push   QWORD PTR [r12]
    73af:	call   5320 <quantum_measure>
    73b4:	add    rsp,0x20
    73b8:	jmp    71c0 <quantum_objcode_run+0x270>
    73bd:	cmp    r14d,0xff
    73c4:	je     71c0 <quantum_objcode_run+0x270>
    73ca:	mov    ecx,DWORD PTR [rsp+0x8]
    73ce:	mov    rdi,QWORD PTR [rip+0x6c4b]        # e020 <stderr@@GLIBC_2.2.5>
    73d5:	mov    r8d,r14d
    73d8:	xor    eax,eax
    73da:	lea    rdx,[rip+0x2eac]        # a28d <_IO_stdin_used+0x28d>
    73e1:	mov    esi,0x1
    73e6:	call   1300 <__fprintf_chk@plt>
    73eb:	mov    rax,QWORD PTR [rsp+0x88]
    73f3:	xor    rax,QWORD PTR fs:0x28
    73fc:	jne    751e <quantum_objcode_run+0x5ce>
    7402:	add    rsp,0x98
    7409:	pop    rbx
    740a:	pop    rbp
    740b:	pop    r12
    740d:	pop    r13
    740f:	pop    r14
    7411:	pop    r15
    7413:	ret    
    7414:	mov    rdi,rbx
    7417:	mov    rcx,rbp
    741a:	mov    edx,0x1
    741f:	mov    esi,0x4
    7424:	call   11f0 <fread@plt>
    7429:	movzx  eax,BYTE PTR [rsp+0x32]
    742e:	movzx  edi,BYTE PTR [rsp+0x33]
    7433:	shl    eax,0x8
    7436:	add    edi,eax
    7438:	movzx  eax,BYTE PTR [rsp+0x31]
    743d:	shl    eax,0x10
    7440:	add    eax,edi
    7442:	movzx  edi,BYTE PTR [rsp+0x30]
    7447:	shl    edi,0x18
    744a:	add    edi,eax
    744c:	cmp    r14d,0x81
    7453:	je     7489 <quantum_objcode_run+0x539>
    7455:	cmp    r14d,0x82
    745c:	jne    71c0 <quantum_objcode_run+0x270>
    7462:	mov    rsi,r12
    7465:	call   54e0 <quantum_bmeasure_bitpreserve>
    746a:	jmp    71c0 <quantum_objcode_run+0x270>
    746f:	mov    rdx,r12
    7472:	mov    edi,r10d
    7475:	call   1ea0 <quantum_cnot>
    747a:	jmp    71c0 <quantum_objcode_run+0x270>
    747f:	call   4800 <quantum_r_y>
    7484:	jmp    71c0 <quantum_objcode_run+0x270>
    7489:	mov    rsi,r12
    748c:	call   53c0 <quantum_bmeasure>
    7491:	jmp    71c0 <quantum_objcode_run+0x270>
    7496:	call   4a80 <quantum_phase_scale>
    749b:	jmp    71c0 <quantum_objcode_run+0x270>
    74a0:	call   4b90 <quantum_phase_kick>
    74a5:	jmp    71c0 <quantum_objcode_run+0x270>
    74aa:	mov    rsi,r12
    74ad:	call   2550 <quantum_swaptheleads>
    74b2:	jmp    71c0 <quantum_objcode_run+0x270>
    74b7:	mov    rsi,r12
    74ba:	call   45d0 <quantum_hadamard>
    74bf:	jmp    71c0 <quantum_objcode_run+0x270>
    74c4:	mov    rsi,r12
    74c7:	call   24b0 <quantum_sigma_z>
    74cc:	jmp    71c0 <quantum_objcode_run+0x270>
    74d1:	mov    rsi,r12
    74d4:	call   2350 <quantum_sigma_y>
    74d9:	jmp    71c0 <quantum_objcode_run+0x270>
    74de:	mov    rsi,r12
    74e1:	call   2290 <quantum_sigma_x>
    74e6:	jmp    71c0 <quantum_objcode_run+0x270>
    74eb:	mov    rdi,QWORD PTR [rip+0x6b2e]        # e020 <stderr@@GLIBC_2.2.5>
    74f2:	mov    rcx,r14
    74f5:	mov    esi,0x1
    74fa:	xor    eax,eax
    74fc:	lea    rdx,[rip+0x2d5d]        # a260 <_IO_stdin_used+0x260>
    7503:	call   1300 <__fprintf_chk@plt>
    7508:	xor    edi,edi
    750a:	call   12c0 <perror@plt>
    750f:	jmp    73eb <quantum_objcode_run+0x49b>
    7514:	call   46e0 <quantum_r_x>
    7519:	jmp    71c0 <quantum_objcode_run+0x270>
    751e:	call   1210 <__stack_chk_fail@plt>
    7523:	nop    WORD PTR cs:[rax+rax*1+0x0]
    752d:	nop    DWORD PTR [rax]

0000000000007530 <emul>:
    7530:	endbr64 
    7534:	push   r15
    7536:	push   r14
    7538:	push   r13
    753a:	push   r12
    753c:	push   rbp
    753d:	push   rbx
    753e:	mov    ebx,edx
    7540:	sub    rsp,0x8
    7544:	sub    ebx,0x1
    7547:	js     7587 <emul+0x57>
    7549:	mov    ebp,edi
    754b:	mov    r13d,esi
    754e:	mov    r12d,edx
    7551:	mov    r14,rcx
    7554:	lea    r15d,[rdx+rdx*1+0x2]
    7559:	jmp    7568 <emul+0x38>
    755b:	nop    DWORD PTR [rax+rax*1+0x0]
    7560:	sub    ebx,0x1
    7563:	cmp    ebx,0xffffffff
    7566:	je     7587 <emul+0x57>
    7568:	bt     ebp,ebx
    756b:	jae    7560 <emul+0x30>
    756d:	lea    edx,[rbx+r12*1]
    7571:	mov    rcx,r14
    7574:	mov    esi,r13d
    7577:	mov    edi,r15d
    757a:	call   1f80 <quantum_toffoli>
    757f:	sub    ebx,0x1
    7582:	cmp    ebx,0xffffffff
    7585:	jne    7568 <emul+0x38>
    7587:	add    rsp,0x8
    758b:	pop    rbx
    758c:	pop    rbp
    758d:	pop    r12
    758f:	pop    r13
    7591:	pop    r14
    7593:	pop    r15
    7595:	ret    
    7596:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000075a0 <muln>:
    75a0:	endbr64 
    75a4:	push   r15
    75a6:	lea    r15d,[rcx+rcx*1]
    75aa:	push   r14
    75ac:	lea    r14d,[r15+0x1]
    75b0:	add    r15d,0x2
    75b4:	push   r13
    75b6:	mov    r13d,edx
    75b9:	mov    edx,r14d
    75bc:	push   r12
    75be:	mov    r12d,ecx
    75c1:	mov    rcx,r8
    75c4:	push   rbp
    75c5:	mov    ebp,edi
    75c7:	mov    edi,r13d
    75ca:	push   rbx
    75cb:	mov    rbx,r8
    75ce:	sub    rsp,0x18
    75d2:	mov    DWORD PTR [rsp+0x8],esi
    75d6:	mov    esi,r15d
    75d9:	mov    DWORD PTR [rsp+0xc],r15d
    75de:	call   1f80 <quantum_toffoli>
    75e3:	mov    eax,DWORD PTR [rsp+0x8]
    75e7:	mov    rcx,rbx
    75ea:	mov    esi,r14d
    75ed:	cdq    
    75ee:	idiv   ebp
    75f0:	mov    edi,edx
    75f2:	mov    edx,r12d
    75f5:	call   7530 <emul>
    75fa:	mov    rcx,rbx
    75fd:	mov    edx,r14d
    7600:	mov    esi,r15d
    7603:	mov    edi,r13d
    7606:	call   1f80 <quantum_toffoli>
    760b:	cmp    r12d,0x1
    760f:	jle    7678 <muln+0xd8>
    7611:	mov    r15d,0x1
    7617:	nop    WORD PTR [rax+rax*1+0x0]
    7620:	mov    eax,DWORD PTR [rsp+0xc]
    7624:	mov    rcx,rbx
    7627:	mov    edx,r14d
    762a:	mov    edi,r13d
    762d:	lea    r9d,[r15+rax*1]
    7631:	mov    esi,r9d
    7634:	mov    DWORD PTR [rsp+0x4],r9d
    7639:	call   1f80 <quantum_toffoli>
    763e:	mov    eax,DWORD PTR [rsp+0x8]
    7642:	mov    ecx,r15d
    7645:	mov    edi,ebp
    7647:	add    r15d,0x1
    764b:	shl    eax,cl
    764d:	mov    rcx,rbx
    7650:	cdq    
    7651:	idiv   ebp
    7653:	mov    esi,edx
    7655:	mov    edx,r12d
    7658:	call   6270 <add_mod_n>
    765d:	mov    r9d,DWORD PTR [rsp+0x4]
    7662:	mov    rcx,rbx
    7665:	mov    edx,r14d
    7668:	mov    edi,r13d
    766b:	mov    esi,r9d
    766e:	call   1f80 <quantum_toffoli>
    7673:	cmp    r12d,r15d
    7676:	jne    7620 <muln+0x80>
    7678:	add    rsp,0x18
    767c:	pop    rbx
    767d:	pop    rbp
    767e:	pop    r12
    7680:	pop    r13
    7682:	pop    r14
    7684:	pop    r15
    7686:	ret    
    7687:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007690 <muln_inv>:
    7690:	endbr64 
    7694:	push   r15
    7696:	mov    r15,r8
    7699:	push   r14
    769b:	mov    r14d,ecx
    769e:	push   r13
    76a0:	push   r12
    76a2:	mov    r12d,edx
    76a5:	lea    edx,[rcx+rcx*1]
    76a8:	push   rbp
    76a9:	lea    r13d,[rdx+0x1]
    76ad:	mov    ebp,edi
    76af:	push   rbx
    76b0:	lea    ebx,[r14-0x1]
    76b4:	sub    rsp,0x18
    76b8:	mov    DWORD PTR [rsp+0x4],edx
    76bc:	call   19d0 <quantum_inverse_mod>
    76c1:	mov    edx,DWORD PTR [rsp+0x4]
    76c5:	mov    DWORD PTR [rsp+0xc],eax
    76c9:	lea    eax,[rdx+0x2]
    76cc:	mov    DWORD PTR [rsp+0x8],eax
    76d0:	test   ebx,ebx
    76d2:	jle    772d <muln_inv+0x9d>
    76d4:	nop    DWORD PTR [rax+0x0]
    76d8:	mov    eax,DWORD PTR [rsp+0x8]
    76dc:	mov    rcx,r15
    76df:	mov    edx,r13d
    76e2:	mov    edi,r12d
    76e5:	lea    r8d,[rbx+rax*1]
    76e9:	mov    esi,r8d
    76ec:	mov    DWORD PTR [rsp+0x4],r8d
    76f1:	call   1f80 <quantum_toffoli>
    76f6:	mov    eax,DWORD PTR [rsp+0xc]
    76fa:	mov    ecx,ebx
    76fc:	mov    esi,ebp
    76fe:	mov    edi,ebp
    7700:	shl    eax,cl
    7702:	mov    rcx,r15
    7705:	cdq    
    7706:	idiv   ebp
    7708:	sub    esi,edx
    770a:	mov    edx,r14d
    770d:	call   6270 <add_mod_n>
    7712:	mov    r8d,DWORD PTR [rsp+0x4]
    7717:	mov    rcx,r15
    771a:	mov    edx,r13d
    771d:	mov    edi,r12d
    7720:	mov    esi,r8d
    7723:	call   1f80 <quantum_toffoli>
    7728:	sub    ebx,0x1
    772b:	jne    76d8 <muln_inv+0x48>
    772d:	mov    ebx,DWORD PTR [rsp+0x8]
    7731:	mov    rcx,r15
    7734:	mov    edx,r13d
    7737:	mov    edi,r12d
    773a:	mov    esi,ebx
    773c:	call   1f80 <quantum_toffoli>
    7741:	mov    eax,DWORD PTR [rsp+0xc]
    7745:	mov    rcx,r15
    7748:	mov    esi,r13d
    774b:	cdq    
    774c:	idiv   ebp
    774e:	mov    edi,edx
    7750:	mov    edx,r14d
    7753:	call   7530 <emul>
    7758:	add    rsp,0x18
    775c:	mov    rcx,r15
    775f:	mov    edx,r13d
    7762:	mov    esi,ebx
    7764:	mov    edi,r12d
    7767:	pop    rbx
    7768:	pop    rbp
    7769:	pop    r12
    776b:	pop    r13
    776d:	pop    r14
    776f:	pop    r15
    7771:	jmp    1f80 <quantum_toffoli>
    7776:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000007780 <mul_mod_n>:
    7780:	endbr64 
    7784:	push   r14
    7786:	mov    r14d,esi
    7789:	push   r13
    778b:	mov    r13d,ecx
    778e:	push   r12
    7790:	mov    r12d,edx
    7793:	push   rbp
    7794:	mov    ebp,edi
    7796:	push   rbx
    7797:	mov    rbx,r8
    779a:	call   75a0 <muln>
    779f:	mov    rdx,rbx
    77a2:	mov    esi,r13d
    77a5:	mov    edi,r12d
    77a8:	call   26b0 <quantum_swaptheleads_omuln_controlled>
    77ad:	mov    r8,rbx
    77b0:	mov    ecx,r13d
    77b3:	pop    rbx
    77b4:	mov    edx,r12d
    77b7:	mov    esi,r14d
    77ba:	mov    edi,ebp
    77bc:	pop    rbp
    77bd:	pop    r12
    77bf:	pop    r13
    77c1:	pop    r14
    77c3:	jmp    7690 <muln_inv>
    77c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000077d0 <quantum_qec_set_status>:
    77d0:	endbr64 
    77d4:	mov    DWORD PTR [rip+0x688e],edi        # e068 <type>
    77da:	mov    DWORD PTR [rip+0x6884],esi        # e064 <width>
    77e0:	ret    
    77e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    77ec:	nop    DWORD PTR [rax+0x0]

00000000000077f0 <quantum_qec_get_status>:
    77f0:	endbr64 
    77f4:	test   rdi,rdi
    77f7:	je     7801 <quantum_qec_get_status+0x11>
    77f9:	mov    eax,DWORD PTR [rip+0x6869]        # e068 <type>
    77ff:	mov    DWORD PTR [rdi],eax
    7801:	test   rsi,rsi
    7804:	je     780e <quantum_qec_get_status+0x1e>
    7806:	mov    eax,DWORD PTR [rip+0x6858]        # e064 <width>
    780c:	mov    DWORD PTR [rsi],eax
    780e:	ret    
    780f:	nop

0000000000007810 <quantum_qec_encode>:
    7810:	endbr64 
    7814:	push   r12
    7816:	xor    eax,eax
    7818:	mov    r12d,esi
    781b:	push   rbp
    781c:	mov    rbp,rdx
    781f:	push   rbx
    7820:	sub    rsp,0x10
    7824:	call   1ad0 <quantum_get_decoherence>
    7829:	movss  DWORD PTR [rsp+0xc],xmm0
    782f:	pxor   xmm0,xmm0
    7833:	call   1ae0 <quantum_set_decoherence>
    7838:	mov    eax,DWORD PTR [rbp+0x0]
    783b:	test   eax,eax
    783d:	jle    78bc <quantum_qec_encode+0xac>
    783f:	xor    ebx,ebx
    7841:	jmp    7887 <quantum_qec_encode+0x77>
    7843:	nop    DWORD PTR [rax+rax*1+0x0]
    7848:	mov    rsi,rbp
    784b:	call   45d0 <quantum_hadamard>
    7850:	mov    eax,DWORD PTR [rbp+0x0]
    7853:	mov    rsi,rbp
    7856:	lea    edi,[rbx+rax*2]
    7859:	call   45d0 <quantum_hadamard>
    785e:	mov    edi,DWORD PTR [rbp+0x0]
    7861:	mov    esi,ebx
    7863:	mov    rdx,rbp
    7866:	add    edi,ebx
    7868:	call   1ea0 <quantum_cnot>
    786d:	mov    eax,DWORD PTR [rbp+0x0]
    7870:	mov    esi,ebx
    7872:	mov    rdx,rbp
    7875:	lea    edi,[rbx+rax*2]
    7878:	add    ebx,0x1
    787b:	call   1ea0 <quantum_cnot>
    7880:	mov    eax,DWORD PTR [rbp+0x0]
    7883:	cmp    eax,ebx
    7885:	jle    78bc <quantum_qec_encode+0xac>
    7887:	lea    edx,[rax-0x1]
    788a:	cmp    edx,ebx
    788c:	je     78e0 <quantum_qec_encode+0xd0>
    788e:	lea    edi,[rbx+rax*1]
    7891:	cmp    r12d,ebx
    7894:	jg     7848 <quantum_qec_encode+0x38>
    7896:	mov    esi,edi
    7898:	mov    rdx,rbp
    789b:	mov    edi,ebx
    789d:	call   1ea0 <quantum_cnot>
    78a2:	mov    eax,DWORD PTR [rbp+0x0]
    78a5:	mov    edi,ebx
    78a7:	mov    rdx,rbp
    78aa:	lea    esi,[rbx+rax*2]
    78ad:	add    ebx,0x1
    78b0:	call   1ea0 <quantum_cnot>
    78b5:	mov    eax,DWORD PTR [rbp+0x0]
    78b8:	cmp    eax,ebx
    78ba:	jg     7887 <quantum_qec_encode+0x77>
    78bc:	mov    DWORD PTR [rip+0x67a2],eax        # e064 <width>
    78c2:	lea    eax,[rax+rax*2]
    78c5:	mov    DWORD PTR [rip+0x6799],0x1        # e068 <type>
    78cf:	mov    DWORD PTR [rbp+0x0],eax
    78d2:	add    rsp,0x10
    78d6:	pop    rbx
    78d7:	pop    rbp
    78d8:	pop    r12
    78da:	ret    
    78db:	nop    DWORD PTR [rax+rax*1+0x0]
    78e0:	movss  xmm0,DWORD PTR [rsp+0xc]
    78e6:	call   1ae0 <quantum_set_decoherence>
    78eb:	mov    eax,DWORD PTR [rbp+0x0]
    78ee:	jmp    788e <quantum_qec_encode+0x7e>

00000000000078f0 <quantum_qec_decode>:
    78f0:	endbr64 
    78f4:	push   r15
    78f6:	xor    eax,eax
    78f8:	push   r14
    78fa:	push   r13
    78fc:	mov    r13d,esi
    78ff:	push   r12
    7901:	push   rbp
    7902:	mov    rbp,rdx
    7905:	push   rbx
    7906:	sub    rsp,0x18
    790a:	call   1ad0 <quantum_get_decoherence>
    790f:	movss  DWORD PTR [rsp+0x8],xmm0
    7915:	pxor   xmm0,xmm0
    7919:	call   1ae0 <quantum_set_decoherence>
    791e:	movsxd r12,DWORD PTR [rbp+0x0]
    7922:	mov    DWORD PTR [rip+0x673c],0x0        # e068 <type>
    792c:	mov    DWORD PTR [rip+0x672e],0x0        # e064 <width>
    7936:	mov    rax,r12
    7939:	mov    DWORD PTR [rsp+0xc],r12d
    793e:	imul   r12,r12,0x55555556
    7945:	sar    eax,0x1f
    7948:	shr    r12,0x20
    794c:	sub    r12d,eax
    794f:	mov    ebx,r12d
    7952:	lea    r15d,[r12+r12*1]
    7956:	sub    ebx,0x1
    7959:	jns    799f <quantum_qec_decode+0xaf>
    795b:	jmp    79d6 <quantum_qec_decode+0xe6>
    795d:	nop    DWORD PTR [rax]
    7960:	mov    edi,r9d
    7963:	mov    esi,ebx
    7965:	mov    DWORD PTR [rsp+0x4],r9d
    796a:	call   1ea0 <quantum_cnot>
    796f:	mov    rdx,rbp
    7972:	mov    esi,ebx
    7974:	mov    edi,r14d
    7977:	call   1ea0 <quantum_cnot>
    797c:	mov    r9d,DWORD PTR [rsp+0x4]
    7981:	mov    rsi,rbp
    7984:	sub    ebx,0x1
    7987:	mov    edi,r9d
    798a:	call   45d0 <quantum_hadamard>
    798f:	mov    rsi,rbp
    7992:	mov    edi,r14d
    7995:	call   45d0 <quantum_hadamard>
    799a:	cmp    ebx,0xffffffff
    799d:	je     79d6 <quantum_qec_decode+0xe6>
    799f:	test   ebx,ebx
    79a1:	je     7a50 <quantum_qec_decode+0x160>
    79a7:	lea    r9d,[rbx+r15*1]
    79ab:	lea    r14d,[rbx+r12*1]
    79af:	mov    rdx,rbp
    79b2:	cmp    r13d,ebx
    79b5:	jg     7960 <quantum_qec_decode+0x70>
    79b7:	mov    esi,r9d
    79ba:	mov    edi,ebx
    79bc:	call   1ea0 <quantum_cnot>
    79c1:	mov    edi,ebx
    79c3:	mov    rdx,rbp
    79c6:	mov    esi,r14d
    79c9:	call   1ea0 <quantum_cnot>
    79ce:	sub    ebx,0x1
    79d1:	cmp    ebx,0xffffffff
    79d4:	jne    799f <quantum_qec_decode+0xaf>
    79d6:	cmp    DWORD PTR [rsp+0xc],0x2
    79db:	lea    r15d,[r12+r12*1]
    79df:	mov    ebx,0x1
    79e4:	jg     79f8 <quantum_qec_decode+0x108>
    79e6:	jmp    7a3c <quantum_qec_decode+0x14c>
    79e8:	nop    DWORD PTR [rax+rax*1+0x0]
    79f0:	add    ebx,0x1
    79f3:	cmp    r12d,ebx
    79f6:	jl     7a3c <quantum_qec_decode+0x14c>
    79f8:	mov    rsi,rbp
    79fb:	mov    edi,r12d
    79fe:	call   53c0 <quantum_bmeasure>
    7a03:	mov    edi,r15d
    7a06:	mov    rsi,rbp
    7a09:	mov    r14d,eax
    7a0c:	sub    edi,ebx
    7a0e:	call   53c0 <quantum_bmeasure>
    7a13:	cmp    r14d,0x1
    7a17:	sete   dl
    7a1a:	cmp    eax,0x1
    7a1d:	sete   al
    7a20:	test   dl,al
    7a22:	je     79f0 <quantum_qec_decode+0x100>
    7a24:	cmp    r13d,ebx
    7a27:	jl     79f0 <quantum_qec_decode+0x100>
    7a29:	lea    edi,[rbx-0x1]
    7a2c:	mov    rsi,rbp
    7a2f:	add    ebx,0x1
    7a32:	call   24b0 <quantum_sigma_z>
    7a37:	cmp    r12d,ebx
    7a3a:	jge    79f8 <quantum_qec_decode+0x108>
    7a3c:	add    rsp,0x18
    7a40:	pop    rbx
    7a41:	pop    rbp
    7a42:	pop    r12
    7a44:	pop    r13
    7a46:	pop    r14
    7a48:	pop    r15
    7a4a:	ret    
    7a4b:	nop    DWORD PTR [rax+rax*1+0x0]
    7a50:	movss  xmm0,DWORD PTR [rsp+0x8]
    7a56:	call   1ae0 <quantum_set_decoherence>
    7a5b:	jmp    79a7 <quantum_qec_decode+0xb7>

0000000000007a60 <quantum_qec_counter>:
    7a60:	endbr64 
    7a64:	push   r12
    7a66:	mov    r12,rdx
    7a69:	test   edi,edi
    7a6b:	jle    7a90 <quantum_qec_counter+0x30>
    7a6d:	mov    eax,DWORD PTR [rip+0x65f9]        # e06c <counter.3086>
    7a73:	add    eax,edi
    7a75:	mov    DWORD PTR [rip+0x65f1],eax        # e06c <counter.3086>
    7a7b:	test   esi,esi
    7a7d:	jle    7aa8 <quantum_qec_counter+0x48>
    7a7f:	mov    DWORD PTR [rip+0x658b],esi        # e010 <freq.3087>
    7a85:	cmp    eax,esi
    7a87:	jge    7ab2 <quantum_qec_counter+0x52>
    7a89:	pop    r12
    7a8b:	ret    
    7a8c:	nop    DWORD PTR [rax+0x0]
    7a90:	mov    eax,DWORD PTR [rip+0x65d6]        # e06c <counter.3086>
    7a96:	je     7a7b <quantum_qec_counter+0x1b>
    7a98:	mov    DWORD PTR [rip+0x65ca],0x0        # e06c <counter.3086>
    7aa2:	xor    eax,eax
    7aa4:	test   esi,esi
    7aa6:	jg     7a7f <quantum_qec_counter+0x1f>
    7aa8:	mov    esi,DWORD PTR [rip+0x6562]        # e010 <freq.3087>
    7aae:	cmp    eax,esi
    7ab0:	jl     7a89 <quantum_qec_counter+0x29>
    7ab2:	mov    esi,DWORD PTR [rip+0x65ac]        # e064 <width>
    7ab8:	mov    edi,DWORD PTR [rip+0x65aa]        # e068 <type>
    7abe:	mov    rdx,r12
    7ac1:	mov    DWORD PTR [rip+0x65a1],0x0        # e06c <counter.3086>
    7acb:	call   78f0 <quantum_qec_decode>
    7ad0:	mov    esi,DWORD PTR [rip+0x658e]        # e064 <width>
    7ad6:	mov    edi,DWORD PTR [rip+0x658c]        # e068 <type>
    7adc:	mov    rdx,r12
    7adf:	call   7810 <quantum_qec_encode>
    7ae4:	mov    eax,DWORD PTR [rip+0x6582]        # e06c <counter.3086>
    7aea:	pop    r12
    7aec:	ret    
    7aed:	nop    DWORD PTR [rax]

0000000000007af0 <quantum_sigma_x_ft>:
    7af0:	endbr64 
    7af4:	push   r12
    7af6:	xor    eax,eax
    7af8:	mov    r12,rsi
    7afb:	push   rbp
    7afc:	push   rbx
    7afd:	mov    ebx,edi
    7aff:	sub    rsp,0x10
    7b03:	mov    ebp,DWORD PTR [rip+0x655f]        # e068 <type>
    7b09:	mov    DWORD PTR [rip+0x6555],0x0        # e068 <type>
    7b13:	call   1ad0 <quantum_get_decoherence>
    7b18:	movss  DWORD PTR [rsp+0xc],xmm0
    7b1e:	pxor   xmm0,xmm0
    7b22:	call   1ae0 <quantum_set_decoherence>
    7b27:	mov    rsi,r12
    7b2a:	mov    edi,ebx
    7b2c:	call   2290 <quantum_sigma_x>
    7b31:	mov    edi,DWORD PTR [rip+0x652d]        # e064 <width>
    7b37:	mov    rsi,r12
    7b3a:	add    edi,ebx
    7b3c:	call   2290 <quantum_sigma_x>
    7b41:	movss  xmm1,DWORD PTR [rsp+0xc]
    7b47:	movaps xmm0,xmm1
    7b4a:	call   1ae0 <quantum_set_decoherence>
    7b4f:	mov    eax,DWORD PTR [rip+0x650f]        # e064 <width>
    7b55:	mov    rsi,r12
    7b58:	lea    edi,[rbx+rax*2]
    7b5b:	call   2290 <quantum_sigma_x>
    7b60:	mov    rdx,r12
    7b63:	xor    esi,esi
    7b65:	mov    edi,0x1
    7b6a:	call   7a60 <quantum_qec_counter>
    7b6f:	mov    DWORD PTR [rip+0x64f3],ebp        # e068 <type>
    7b75:	add    rsp,0x10
    7b79:	pop    rbx
    7b7a:	pop    rbp
    7b7b:	pop    r12
    7b7d:	ret    
    7b7e:	xchg   ax,ax

0000000000007b80 <quantum_cnot_ft>:
    7b80:	endbr64 
    7b84:	push   r13
    7b86:	xor    eax,eax
    7b88:	push   r12
    7b8a:	mov    r12,rdx
    7b8d:	push   rbp
    7b8e:	mov    ebp,edi
    7b90:	push   rbx
    7b91:	mov    ebx,esi
    7b93:	sub    rsp,0x18
    7b97:	mov    r13d,DWORD PTR [rip+0x64ca]        # e068 <type>
    7b9e:	mov    DWORD PTR [rip+0x64c0],0x0        # e068 <type>
    7ba8:	call   1ad0 <quantum_get_decoherence>
    7bad:	movss  DWORD PTR [rsp+0xc],xmm0
    7bb3:	pxor   xmm0,xmm0
    7bb7:	call   1ae0 <quantum_set_decoherence>
    7bbc:	mov    rdx,r12
    7bbf:	mov    esi,ebx
    7bc1:	mov    edi,ebp
    7bc3:	call   1ea0 <quantum_cnot>
    7bc8:	mov    edi,DWORD PTR [rip+0x6496]        # e064 <width>
    7bce:	mov    rdx,r12
    7bd1:	lea    esi,[rdi+rbx*1]
    7bd4:	add    edi,ebp
    7bd6:	call   1ea0 <quantum_cnot>
    7bdb:	movss  xmm1,DWORD PTR [rsp+0xc]
    7be1:	movaps xmm0,xmm1
    7be4:	call   1ae0 <quantum_set_decoherence>
    7be9:	mov    eax,DWORD PTR [rip+0x6475]        # e064 <width>
    7bef:	mov    rdx,r12
    7bf2:	lea    edi,[rax+rax*1]
    7bf5:	lea    esi,[rdi+rbx*1]
    7bf8:	add    edi,ebp
    7bfa:	call   1ea0 <quantum_cnot>
    7bff:	mov    rdx,r12
    7c02:	xor    esi,esi
    7c04:	mov    edi,0x1
    7c09:	call   7a60 <quantum_qec_counter>
    7c0e:	mov    DWORD PTR [rip+0x6453],r13d        # e068 <type>
    7c15:	add    rsp,0x18
    7c19:	pop    rbx
    7c1a:	pop    rbp
    7c1b:	pop    r12
    7c1d:	pop    r13
    7c1f:	ret    

0000000000007c20 <quantum_toffoli_ft>:
    7c20:	endbr64 
    7c24:	mov    eax,DWORD PTR [rip+0x643a]        # e064 <width>
    7c2a:	mov    r11d,0x1
    7c30:	push   r14
    7c32:	mov    r14,rcx
    7c35:	mov    r8,r11
    7c38:	push   r13
    7c3a:	lea    r9d,[rax+rdx*1]
    7c3e:	push   r12
    7c40:	lea    ecx,[rax+r9*1]
    7c44:	push   rbp
    7c45:	shl    r8,cl
    7c48:	push   rbx
    7c49:	mov    ecx,r9d
    7c4c:	mov    rbx,r11
    7c4f:	shl    rbx,cl
    7c52:	mov    ecx,edx
    7c54:	add    r8,rbx
    7c57:	mov    rbx,r11
    7c5a:	shl    rbx,cl
    7c5d:	mov    rdx,rbx
    7c60:	add    rdx,r8
    7c63:	mov    r8d,DWORD PTR [r14+0x4]
    7c67:	test   r8d,r8d
    7c6a:	jle    7d06 <quantum_toffoli_ft+0xe6>
    7c70:	lea    ecx,[rax+rdi*1]
    7c73:	mov    r13,r11
    7c76:	mov    r12,r11
    7c79:	mov    rbp,r11
    7c7c:	shl    r13,cl
    7c7f:	add    ecx,eax
    7c81:	mov    r9,QWORD PTR [r14+0x10]
    7c85:	shl    r12,cl
    7c88:	lea    ecx,[rax+rsi*1]
    7c8b:	shl    rbp,cl
    7c8e:	add    ecx,eax
    7c90:	lea    eax,[r8-0x1]
    7c94:	shl    rax,0x4
    7c98:	shl    r11,cl
    7c9b:	lea    r10,[r9+0x8]
    7c9f:	lea    rbx,[r9+rax*1+0x18]
    7ca4:	nop    DWORD PTR [rax+0x0]
    7ca8:	mov    r9,QWORD PTR [r10]
    7cab:	mov    ecx,edi
    7cad:	mov    r8,r9
    7cb0:	shr    r8,cl
    7cb3:	mov    ecx,esi
    7cb5:	and    r8d,0x1
    7cb9:	mov    eax,r8d
    7cbc:	xor    eax,0x1
    7cbf:	test   r13,r9
    7cc2:	cmovne r8d,eax
    7cc6:	mov    eax,r8d
    7cc9:	xor    eax,0x1
    7ccc:	test   r9,r12
    7ccf:	cmovne r8d,eax
    7cd3:	mov    rax,r9
    7cd6:	shr    rax,cl
    7cd9:	and    eax,0x1
    7cdc:	mov    ecx,eax
    7cde:	xor    ecx,0x1
    7ce1:	test   r9,rbp
    7ce4:	cmovne eax,ecx
    7ce7:	mov    ecx,eax
    7ce9:	xor    ecx,0x1
    7cec:	test   r9,r11
    7cef:	cmovne eax,ecx
    7cf2:	test   r8d,eax
    7cf5:	je     7cfd <quantum_toffoli_ft+0xdd>
    7cf7:	xor    r9,rdx
    7cfa:	mov    QWORD PTR [r10],r9
    7cfd:	add    r10,0x10
    7d01:	cmp    r10,rbx
    7d04:	jne    7ca8 <quantum_toffoli_ft+0x88>
    7d06:	mov    rdi,r14
    7d09:	call   1b20 <quantum_decohere>
    7d0e:	pop    rbx
    7d0f:	mov    rdx,r14
    7d12:	pop    rbp
    7d13:	xor    esi,esi
    7d15:	pop    r12
    7d17:	mov    edi,0x1
    7d1c:	pop    r13
    7d1e:	pop    r14
    7d20:	jmp    7a60 <quantum_qec_counter>
    7d25:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7d2f:	nop

0000000000007d30 <quantum_qft>:
    7d30:	endbr64 
    7d34:	push   r15
    7d36:	lea    r15d,[rdi-0x1]
    7d3a:	push   r14
    7d3c:	mov    r14d,edi
    7d3f:	push   r13
    7d41:	mov    r13,rsi
    7d44:	push   r12
    7d46:	push   rbp
    7d47:	mov    ebp,r15d
    7d4a:	push   rbx
    7d4b:	sub    rsp,0x8
    7d4f:	test   r15d,r15d
    7d52:	js     7d98 <quantum_qft+0x68>
    7d54:	nop    DWORD PTR [rax+0x0]
    7d58:	mov    rsi,r13
    7d5b:	mov    edi,ebp
    7d5d:	lea    r12d,[rbp-0x1]
    7d61:	call   45d0 <quantum_hadamard>
    7d66:	test   ebp,ebp
    7d68:	je     7d98 <quantum_qft+0x68>
    7d6a:	cmp    ebp,r14d
    7d6d:	jge    7d8e <quantum_qft+0x5e>
    7d6f:	mov    ebx,r15d
    7d72:	nop    WORD PTR [rax+rax*1+0x0]
    7d78:	mov    edi,ebx
    7d7a:	mov    rdx,r13
    7d7d:	mov    esi,r12d
    7d80:	call   4cc0 <quantum_cond_phase>
    7d85:	mov    eax,ebx
    7d87:	sub    ebx,0x1
    7d8a:	cmp    ebp,eax
    7d8c:	jne    7d78 <quantum_qft+0x48>
    7d8e:	mov    ebp,r12d
    7d91:	jmp    7d58 <quantum_qft+0x28>
    7d93:	nop    DWORD PTR [rax+rax*1+0x0]
    7d98:	add    rsp,0x8
    7d9c:	pop    rbx
    7d9d:	pop    rbp
    7d9e:	pop    r12
    7da0:	pop    r13
    7da2:	pop    r14
    7da4:	pop    r15
    7da6:	ret    
    7da7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007db0 <quantum_qft_inv>:
    7db0:	endbr64 
    7db4:	test   edi,edi
    7db6:	jle    7e19 <quantum_qft_inv+0x69>
    7db8:	push   r14
    7dba:	xor    r14d,r14d
    7dbd:	push   r13
    7dbf:	push   r12
    7dc1:	mov    r12,rsi
    7dc4:	push   rbp
    7dc5:	mov    ebp,edi
    7dc7:	push   rbx
    7dc8:	nop    DWORD PTR [rax+rax*1+0x0]
    7dd0:	mov    edi,r14d
    7dd3:	mov    rsi,r12
    7dd6:	mov    r13d,r14d
    7dd9:	add    r14d,0x1
    7ddd:	call   45d0 <quantum_hadamard>
    7de2:	cmp    ebp,r14d
    7de5:	je     7e10 <quantum_qft_inv+0x60>
    7de7:	mov    ebx,r14d
    7dea:	nop    WORD PTR [rax+rax*1+0x0]
    7df0:	mov    edi,ebx
    7df2:	mov    rdx,r12
    7df5:	mov    esi,r13d
    7df8:	add    ebx,0x1
    7dfb:	call   4e50 <quantum_cond_phase_inv>
    7e00:	cmp    ebp,ebx
    7e02:	jne    7df0 <quantum_qft_inv+0x40>
    7e04:	jmp    7dd0 <quantum_qft_inv+0x20>
    7e06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7e10:	pop    rbx
    7e11:	pop    rbp
    7e12:	pop    r12
    7e14:	pop    r13
    7e16:	pop    r14
    7e18:	ret    
    7e19:	ret    
    7e1a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007e20 <quantum_matrix2qureg>:
    7e20:	endbr64 
    7e24:	push   r15
    7e26:	push   r14
    7e28:	push   r13
    7e2a:	push   r12
    7e2c:	push   rbp
    7e2d:	push   rbx
    7e2e:	mov    ebx,edx
    7e30:	sub    rsp,0x18
    7e34:	mov    edx,DWORD PTR [rsi+0x4]
    7e37:	cmp    edx,0x1
    7e3a:	jne    7faa <quantum_matrix2qureg+0x18a>
    7e40:	mov    edx,DWORD PTR [rsi]
    7e42:	mov    r13,rdi
    7e45:	mov    r14,rsi
    7e48:	xor    r15d,r15d
    7e4b:	xor    r12d,r12d
    7e4e:	test   edx,edx
    7e50:	jle    7ea0 <quantum_matrix2qureg+0x80>
    7e52:	mov    rax,QWORD PTR [rsi+0x8]
    7e56:	sub    edx,0x1
    7e59:	xor    r12d,r12d
    7e5c:	pxor   xmm0,xmm0
    7e60:	mov    esi,0x1
    7e65:	lea    rcx,[rax+0x8]
    7e69:	lea    rdi,[rcx+rdx*8]
    7e6d:	jmp    7e74 <quantum_matrix2qureg+0x54>
    7e6f:	nop
    7e70:	add    rcx,0x8
    7e74:	ucomiss xmm0,DWORD PTR [rax+0x4]
    7e78:	setp   dl
    7e7b:	cmovne edx,esi
    7e7e:	test   dl,dl
    7e80:	jne    7e91 <quantum_matrix2qureg+0x71>
    7e82:	ucomiss xmm0,DWORD PTR [rax]
    7e85:	setp   dl
    7e88:	mov    eax,edx
    7e8a:	cmovne eax,esi
    7e8d:	test   al,al
    7e8f:	je     7e95 <quantum_matrix2qureg+0x75>
    7e91:	add    r12d,0x1
    7e95:	mov    rax,rcx
    7e98:	cmp    rdi,rcx
    7e9b:	jne    7e70 <quantum_matrix2qureg+0x50>
    7e9d:	movsxd r15,r12d
    7ea0:	lea    eax,[rbx+0x2]
    7ea3:	mov    esi,0x10
    7ea8:	mov    rdi,r15
    7eab:	mov    DWORD PTR [rsp+0x4],eax
    7eaf:	call   1250 <calloc@plt>
    7eb4:	mov    rbp,rax
    7eb7:	test   rax,rax
    7eba:	je     7fd3 <quantum_matrix2qureg+0x1b3>
    7ec0:	mov    rdi,r15
    7ec3:	mov    r15d,0x1
    7ec9:	shl    rdi,0x4
    7ecd:	call   5140 <quantum_memman>
    7ed2:	movzx  ecx,BYTE PTR [rsp+0x4]
    7ed7:	mov    esi,0x4
    7edc:	shl    r15d,cl
    7edf:	movsxd rdi,r15d
    7ee2:	mov    QWORD PTR [rsp+0x8],rdi
    7ee7:	call   1250 <calloc@plt>
    7eec:	mov    rdi,QWORD PTR [rsp+0x8]
    7ef1:	test   rax,rax
    7ef4:	je     7fc7 <quantum_matrix2qureg+0x1a7>
    7efa:	shl    rdi,0x2
    7efe:	mov    QWORD PTR [rsp+0x8],rax
    7f03:	call   5140 <quantum_memman>
    7f08:	mov    eax,DWORD PTR [r14]
    7f0b:	mov    rsi,QWORD PTR [rsp+0x8]
    7f10:	test   eax,eax
    7f12:	jle    7f80 <quantum_matrix2qureg+0x160>
    7f14:	lea    r10d,[rax-0x1]
    7f18:	mov    rcx,QWORD PTR [r14+0x8]
    7f1c:	xor    eax,eax
    7f1e:	xor    edi,edi
    7f20:	pxor   xmm0,xmm0
    7f24:	mov    r9d,0x1
    7f2a:	jmp    7f33 <quantum_matrix2qureg+0x113>
    7f2c:	nop    DWORD PTR [rax+0x0]
    7f30:	mov    rax,rdx
    7f33:	ucomiss xmm0,DWORD PTR [rcx+rax*8]
    7f37:	setp   dl
    7f3a:	cmovne edx,r9d
    7f3e:	test   dl,dl
    7f40:	jne    7f52 <quantum_matrix2qureg+0x132>
    7f42:	ucomiss xmm0,DWORD PTR [rcx+rax*8+0x4]
    7f47:	setp   dl
    7f4a:	cmovne edx,r9d
    7f4e:	test   dl,dl
    7f50:	je     7f77 <quantum_matrix2qureg+0x157>
    7f52:	movsxd rdx,edi
    7f55:	movss  xmm2,DWORD PTR [rcx+rax*8]
    7f5a:	movss  xmm1,DWORD PTR [rcx+rax*8+0x4]
    7f60:	add    edi,0x1
    7f63:	shl    rdx,0x4
    7f67:	add    rdx,rbp
    7f6a:	mov    QWORD PTR [rdx+0x8],rax
    7f6e:	movss  DWORD PTR [rdx],xmm2
    7f72:	movss  DWORD PTR [rdx+0x4],xmm1
    7f77:	lea    rdx,[rax+0x1]
    7f7b:	cmp    r10,rax
    7f7e:	jne    7f30 <quantum_matrix2qureg+0x110>
    7f80:	mov    eax,DWORD PTR [rsp+0x4]
    7f84:	mov    DWORD PTR [r13+0x0],ebx
    7f88:	mov    DWORD PTR [r13+0x4],r12d
    7f8c:	mov    DWORD PTR [r13+0x8],eax
    7f90:	mov    rax,r13
    7f93:	mov    QWORD PTR [r13+0x10],rbp
    7f97:	mov    QWORD PTR [r13+0x18],rsi
    7f9b:	add    rsp,0x18
    7f9f:	pop    rbx
    7fa0:	pop    rbp
    7fa1:	pop    r12
    7fa3:	pop    r13
    7fa5:	pop    r14
    7fa7:	pop    r15
    7fa9:	ret    
    7faa:	lea    rsi,[rip+0x23a7]        # a358 <_IO_stdin_used+0x358>
    7fb1:	mov    edi,0x1
    7fb6:	xor    eax,eax
    7fb8:	call   12a0 <__printf_chk@plt>
    7fbd:	mov    edi,0x1
    7fc2:	call   12e0 <exit@plt>
    7fc7:	mov    edx,r15d
    7fca:	lea    rsi,[rip+0x23bf]        # a390 <_IO_stdin_used+0x390>
    7fd1:	jmp    7fb1 <quantum_matrix2qureg+0x191>
    7fd3:	mov    edx,r12d
    7fd6:	lea    rsi,[rip+0x20cb]        # a0a8 <_IO_stdin_used+0xa8>
    7fdd:	jmp    7fb1 <quantum_matrix2qureg+0x191>
    7fdf:	nop

0000000000007fe0 <quantum_new_qureg>:
    7fe0:	endbr64 
    7fe4:	push   r15
    7fe6:	lea    r15d,[rdx+0x2]
    7fea:	push   r14
    7fec:	push   r13
    7fee:	mov    r13,rsi
    7ff1:	mov    esi,0x10
    7ff6:	push   r12
    7ff8:	mov    r12,rdi
    7ffb:	mov    edi,0x1
    8000:	push   rbp
    8001:	mov    ebp,edx
    8003:	push   rbx
    8004:	sub    rsp,0x18
    8008:	call   1250 <calloc@plt>
    800d:	test   rax,rax
    8010:	je     80e3 <quantum_new_qureg+0x103>
    8016:	mov    edi,0x10
    801b:	mov    rbx,rax
    801e:	call   5140 <quantum_memman>
    8023:	mov    ecx,r15d
    8026:	mov    eax,0x1
    802b:	mov    esi,0x4
    8030:	shl    eax,cl
    8032:	movsxd rdi,eax
    8035:	mov    DWORD PTR [rsp+0xc],eax
    8039:	mov    QWORD PTR [rsp],rdi
    803d:	call   1250 <calloc@plt>
    8042:	mov    rdi,QWORD PTR [rsp]
    8046:	test   rax,rax
    8049:	mov    r14,rax
    804c:	je     8105 <quantum_new_qureg+0x125>
    8052:	shl    rdi,0x2
    8056:	call   5140 <quantum_memman>
    805b:	mov    QWORD PTR [rbx+0x8],r13
    805f:	movss  xmm0,DWORD PTR [rip+0x23c1]        # a428 <_IO_stdin_used+0x428>
    8067:	lea    rdi,[rip+0x237c]        # a3ea <_IO_stdin_used+0x3ea>
    806e:	movss  DWORD PTR [rbx],xmm0
    8072:	movss  xmm0,DWORD PTR [rip+0x23b2]        # a42c <_IO_stdin_used+0x42c>
    807a:	movss  DWORD PTR [rbx+0x4],xmm0
    807f:	call   11b0 <getenv@plt>
    8084:	test   rax,rax
    8087:	mov    QWORD PTR [rsp],rax
    808b:	je     80a9 <quantum_new_qureg+0xc9>
    808d:	xor    eax,eax
    808f:	call   63f0 <quantum_objcode_start>
    8094:	mov    rdi,QWORD PTR [rsp]
    8098:	call   6f20 <quantum_objcode_file>
    809d:	lea    rdi,[rip+0xffffffffffffee8c]        # 6f30 <quantum_objcode_exit>
    80a4:	call   9310 <atexit>
    80a9:	mov    rsi,r13
    80ac:	xor    edi,edi
    80ae:	xor    eax,eax
    80b0:	call   64a0 <quantum_objcode_put>
    80b5:	mov    DWORD PTR [r12],ebp
    80b9:	mov    rax,r12
    80bc:	mov    DWORD PTR [r12+0x8],r15d
    80c1:	mov    QWORD PTR [r12+0x10],rbx
    80c6:	mov    QWORD PTR [r12+0x18],r14
    80cb:	mov    DWORD PTR [r12+0x4],0x1
    80d4:	add    rsp,0x18
    80d8:	pop    rbx
    80d9:	pop    rbp
    80da:	pop    r12
    80dc:	pop    r13
    80de:	pop    r14
    80e0:	pop    r15
    80e2:	ret    
    80e3:	mov    edx,0x1
    80e8:	lea    rsi,[rip+0x1fb9]        # a0a8 <_IO_stdin_used+0xa8>
    80ef:	mov    edi,0x1
    80f4:	xor    eax,eax
    80f6:	call   12a0 <__printf_chk@plt>
    80fb:	mov    edi,0x1
    8100:	call   12e0 <exit@plt>
    8105:	mov    edx,DWORD PTR [rsp+0xc]
    8109:	lea    rsi,[rip+0x2280]        # a390 <_IO_stdin_used+0x390>
    8110:	jmp    80ef <quantum_new_qureg+0x10f>
    8112:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    811d:	nop    DWORD PTR [rax]

0000000000008120 <quantum_qureg2matrix>:
    8120:	endbr64 
    8124:	push   rbp
    8125:	mov    esi,0x1
    812a:	mov    edi,0x1
    812f:	push   rbx
    8130:	sub    rsp,0x8
    8134:	mov    ecx,DWORD PTR [rsp+0x20]
    8138:	mov    ebp,DWORD PTR [rsp+0x24]
    813c:	mov    rbx,QWORD PTR [rsp+0x30]
    8141:	shl    esi,cl
    8143:	call   5170 <quantum_new_matrix>
    8148:	test   ebp,ebp
    814a:	jle    8181 <quantum_qureg2matrix+0x61>
    814c:	lea    esi,[rbp-0x1]
    814f:	mov    rcx,rbx
    8152:	shl    rsi,0x4
    8156:	lea    rdi,[rbx+rsi*1+0x10]
    815b:	nop    DWORD PTR [rax+rax*1+0x0]
    8160:	movss  xmm1,DWORD PTR [rcx]
    8164:	movss  xmm0,DWORD PTR [rcx+0x4]
    8169:	add    rcx,0x10
    816d:	mov    rsi,QWORD PTR [rcx-0x8]
    8171:	movss  DWORD PTR [rdx+rsi*8],xmm1
    8176:	movss  DWORD PTR [rdx+rsi*8+0x4],xmm0
    817c:	cmp    rcx,rdi
    817f:	jne    8160 <quantum_qureg2matrix+0x40>
    8181:	add    rsp,0x8
    8185:	pop    rbx
    8186:	pop    rbp
    8187:	ret    
    8188:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000008190 <quantum_destroy_hash>:
    8190:	endbr64 
    8194:	push   rbx
    8195:	mov    rbx,rdi
    8198:	mov    rdi,QWORD PTR [rdi+0x18]
    819c:	call   11c0 <free@plt>
    81a1:	mov    ecx,DWORD PTR [rbx+0x8]
    81a4:	mov    edi,0xffffffff
    81a9:	shl    edi,cl
    81ab:	movsxd rdi,edi
    81ae:	shl    rdi,0x2
    81b2:	call   5140 <quantum_memman>
    81b7:	mov    QWORD PTR [rbx+0x18],0x0
    81bf:	pop    rbx
    81c0:	ret    
    81c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    81cc:	nop    DWORD PTR [rax+0x0]

00000000000081d0 <quantum_delete_qureg>:
    81d0:	endbr64 
    81d4:	push   rbx
    81d5:	mov    rbx,rdi
    81d8:	call   8190 <quantum_destroy_hash>
    81dd:	mov    rdi,QWORD PTR [rbx+0x10]
    81e1:	call   11c0 <free@plt>
    81e6:	mov    edi,DWORD PTR [rbx+0x4]
    81e9:	neg    edi
    81eb:	movsxd rdi,edi
    81ee:	shl    rdi,0x4
    81f2:	call   5140 <quantum_memman>
    81f7:	mov    QWORD PTR [rbx+0x10],0x0
    81ff:	pop    rbx
    8200:	ret    
    8201:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    820c:	nop    DWORD PTR [rax+0x0]

0000000000008210 <quantum_delete_qureg_hashpreserve>:
    8210:	endbr64 
    8214:	push   rbx
    8215:	mov    rbx,rdi
    8218:	mov    rdi,QWORD PTR [rdi+0x10]
    821c:	call   11c0 <free@plt>
    8221:	mov    edi,DWORD PTR [rbx+0x4]
    8224:	neg    edi
    8226:	movsxd rdi,edi
    8229:	shl    rdi,0x4
    822d:	call   5140 <quantum_memman>
    8232:	mov    QWORD PTR [rbx+0x10],0x0
    823a:	pop    rbx
    823b:	ret    
    823c:	nop    DWORD PTR [rax+0x0]

0000000000008240 <quantum_print_qureg>:
    8240:	endbr64 
    8244:	push   r14
    8246:	push   r13
    8248:	push   r12
    824a:	push   rbp
    824b:	push   rbx
    824c:	mov    eax,DWORD PTR [rsp+0x34]
    8250:	mov    r14,QWORD PTR [rsp+0x40]
    8255:	test   eax,eax
    8257:	jle    8329 <quantum_print_qureg+0xe9>
    825d:	mov    esi,DWORD PTR [rsp+0x30]
    8261:	sub    eax,0x1
    8264:	lea    rbp,[rip+0x21a2]        # a40d <_IO_stdin_used+0x40d>
    826b:	shl    rax,0x4
    826f:	lea    r12d,[rsi-0x1]
    8273:	lea    r13,[r14+rax*1+0x10]
    8278:	nop    DWORD PTR [rax+rax*1+0x0]
    8280:	movss  xmm1,DWORD PTR [r14+0x4]
    8286:	movss  xmm0,DWORD PTR [r14]
    828b:	mov    ebx,r12d
    828e:	lea    rsi,[rip+0x215e]        # a3f3 <_IO_stdin_used+0x3f3>
    8295:	mov    rdx,QWORD PTR [r14+0x8]
    8299:	mov    edi,0x1
    829e:	mov    eax,0x3
    82a3:	movaps xmm2,xmm0
    82a6:	movaps xmm3,xmm1
    82a9:	mulss  xmm3,xmm1
    82ad:	cvtss2sd xmm1,xmm1
    82b1:	mulss  xmm2,xmm0
    82b5:	cvtss2sd xmm0,xmm0
    82b9:	addss  xmm2,xmm3
    82bd:	cvtss2sd xmm2,xmm2
    82c1:	call   12a0 <__printf_chk@plt>
    82c6:	test   r12d,r12d
    82c9:	jns    82f3 <quantum_print_qureg+0xb3>
    82cb:	jmp    8310 <quantum_print_qureg+0xd0>
    82cd:	nop    DWORD PTR [rax]
    82d0:	mov    rdx,QWORD PTR [r14+0x8]
    82d4:	mov    ecx,ebx
    82d6:	mov    rsi,rbp
    82d9:	mov    edi,0x1
    82de:	xor    eax,eax
    82e0:	sub    ebx,0x1
    82e3:	shr    rdx,cl
    82e6:	and    edx,0x1
    82e9:	call   12a0 <__printf_chk@plt>
    82ee:	cmp    ebx,0xffffffff
    82f1:	je     8310 <quantum_print_qureg+0xd0>
    82f3:	mov    eax,ebx
    82f5:	and    eax,0x3
    82f8:	cmp    eax,0x3
    82fb:	jne    82d0 <quantum_print_qureg+0x90>
    82fd:	mov    edi,0x20
    8302:	call   11d0 <putchar@plt>
    8307:	jmp    82d0 <quantum_print_qureg+0x90>
    8309:	nop    DWORD PTR [rax+0x0]
    8310:	lea    rdi,[rip+0x20f3]        # a40a <_IO_stdin_used+0x40a>
    8317:	add    r14,0x10
    831b:	call   11e0 <puts@plt>
    8320:	cmp    r13,r14
    8323:	jne    8280 <quantum_print_qureg+0x40>
    8329:	pop    rbx
    832a:	mov    edi,0xa
    832f:	pop    rbp
    8330:	pop    r12
    8332:	pop    r13
    8334:	pop    r14
    8336:	jmp    11d0 <putchar@plt>
    833b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000008340 <quantum_print_expn>:
    8340:	endbr64 
    8344:	push   r14
    8346:	push   r13
    8348:	push   r12
    834a:	push   rbp
    834b:	push   rbx
    834c:	mov    r12d,DWORD PTR [rsp+0x34]
    8351:	test   r12d,r12d
    8354:	jle    83a3 <quantum_print_expn+0x63>
    8356:	mov    eax,DWORD PTR [rsp+0x30]
    835a:	xor    ebx,ebx
    835c:	lea    r13,[rip+0x20ad]        # a410 <_IO_stdin_used+0x410>
    8363:	mov    ebp,eax
    8365:	shr    ebp,0x1f
    8368:	add    ebp,eax
    836a:	mov    rax,QWORD PTR [rsp+0x40]
    836f:	sar    ebp,1
    8371:	lea    r14,[rax+0x8]
    8375:	nop    DWORD PTR [rax]
    8378:	mov    eax,ebx
    837a:	mov    ecx,ebp
    837c:	mov    edx,ebx
    837e:	mov    rsi,r13
    8381:	shl    eax,cl
    8383:	mov    rcx,QWORD PTR [r14]
    8386:	mov    edi,0x1
    838b:	add    ebx,0x1
    838e:	cdqe   
    8390:	add    r14,0x10
    8394:	sub    rcx,rax
    8397:	xor    eax,eax
    8399:	call   12a0 <__printf_chk@plt>
    839e:	cmp    r12d,ebx
    83a1:	jne    8378 <quantum_print_expn+0x38>
    83a3:	pop    rbx
    83a4:	pop    rbp
    83a5:	pop    r12
    83a7:	pop    r13
    83a9:	pop    r14
    83ab:	ret    
    83ac:	nop    DWORD PTR [rax+0x0]

00000000000083b0 <quantum_addscratch>:
    83b0:	endbr64 
    83b4:	mov    edx,DWORD PTR [rsi+0x4]
    83b7:	add    DWORD PTR [rsi],edi
    83b9:	mov    ecx,edi
    83bb:	test   edx,edx
    83bd:	jle    83e4 <quantum_addscratch+0x34>
    83bf:	mov    rsi,QWORD PTR [rsi+0x10]
    83c3:	sub    edx,0x1
    83c6:	shl    rdx,0x4
    83ca:	lea    rax,[rsi+0x8]
    83ce:	lea    rdx,[rsi+rdx*1+0x18]
    83d3:	nop    DWORD PTR [rax+rax*1+0x0]
    83d8:	shl    QWORD PTR [rax],cl
    83db:	add    rax,0x10
    83df:	cmp    rax,rdx
    83e2:	jne    83d8 <quantum_addscratch+0x28>
    83e4:	ret    
    83e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000083f0 <quantum_print_hash>:
    83f0:	endbr64 
    83f4:	push   r13
    83f6:	mov    eax,0x1
    83fb:	push   r12
    83fd:	push   rbp
    83fe:	push   rbx
    83ff:	sub    rsp,0x8
    8403:	mov    ecx,DWORD PTR [rsp+0x38]
    8407:	mov    r13,QWORD PTR [rsp+0x48]
    840c:	shl    eax,cl
    840e:	test   eax,eax
    8410:	jle    8462 <quantum_print_hash+0x72>
    8412:	lea    ebp,[rax-0x1]
    8415:	mov    ebx,0x1
    841a:	lea    r12,[rip+0x1ff9]        # a41a <_IO_stdin_used+0x41a>
    8421:	add    rbp,0x1
    8425:	jmp    845d <quantum_print_hash+0x6d>
    8427:	nop    WORD PTR [rax+rax*1+0x0]
    8430:	movsxd rax,DWORD PTR [r13+rbx*4+0x0]
    8435:	mov    edx,ebx
    8437:	mov    rsi,r12
    843a:	mov    edi,0x1
    843f:	add    rbx,0x1
    8443:	mov    rcx,rax
    8446:	shl    rax,0x4
    844a:	add    rax,QWORD PTR [rsp+0x40]
    844f:	mov    r8,QWORD PTR [rax-0x8]
    8453:	sub    ecx,0x1
    8456:	xor    eax,eax
    8458:	call   12a0 <__printf_chk@plt>
    845d:	cmp    rbp,rbx
    8460:	jne    8430 <quantum_print_hash+0x40>
    8462:	add    rsp,0x8
    8466:	pop    rbx
    8467:	pop    rbp
    8468:	pop    r12
    846a:	pop    r13
    846c:	ret    
    846d:	nop    DWORD PTR [rax]

0000000000008470 <quantum_kronecker>:
    8470:	endbr64 
    8474:	push   r15
    8476:	push   r14
    8478:	push   r13
    847a:	push   r12
    847c:	push   rbp
    847d:	push   rbx
    847e:	sub    rsp,0x68
    8482:	mov    eax,DWORD PTR [rdx]
    8484:	add    eax,DWORD PTR [rsi]
    8486:	mov    DWORD PTR [rsp+0x38],eax
    848a:	mov    eax,DWORD PTR [rsi+0x4]
    848d:	imul   eax,DWORD PTR [rdx+0x4]
    8491:	mov    QWORD PTR [rsp+0x18],rdi
    8496:	mov    QWORD PTR [rsp+0x20],rsi
    849b:	mov    esi,0x10
    84a0:	mov    QWORD PTR [rsp+0x10],rdx
    84a5:	movsxd rbx,eax
    84a8:	lea    edx,[rax+0x2]
    84ab:	mov    DWORD PTR [rsp+0xc],eax
    84af:	mov    rdi,rbx
    84b2:	mov    DWORD PTR [rsp+0x8],edx
    84b6:	call   1250 <calloc@plt>
    84bb:	mov    rdx,QWORD PTR [rsp+0x10]
    84c0:	mov    r8,QWORD PTR [rsp+0x20]
    84c5:	test   rax,rax
    84c8:	je     86dc <quantum_kronecker+0x26c>
    84ce:	mov    rdi,rbx
    84d1:	mov    QWORD PTR [rsp+0x30],rdx
    84d6:	mov    r12d,0x1
    84dc:	shl    rdi,0x4
    84e0:	mov    QWORD PTR [rsp+0x28],r8
    84e5:	mov    QWORD PTR [rsp+0x20],rax
    84ea:	call   5140 <quantum_memman>
    84ef:	movzx  ecx,BYTE PTR [rsp+0x8]
    84f4:	mov    esi,0x4
    84f9:	shl    r12d,cl
    84fc:	movsxd rbx,r12d
    84ff:	mov    rdi,rbx
    8502:	call   1250 <calloc@plt>
    8507:	mov    r9,QWORD PTR [rsp+0x20]
    850c:	mov    r8,QWORD PTR [rsp+0x28]
    8511:	test   rax,rax
    8514:	mov    QWORD PTR [rsp+0x10],rax
    8519:	mov    rdx,QWORD PTR [rsp+0x30]
    851e:	je     86be <quantum_kronecker+0x24e>
    8524:	lea    rdi,[rbx*4+0x0]
    852c:	mov    QWORD PTR [rsp+0x28],r8
    8531:	mov    QWORD PTR [rsp+0x20],r9
    8536:	mov    QWORD PTR [rsp+0x30],rdx
    853b:	call   5140 <quantum_memman>
    8540:	mov    r8,QWORD PTR [rsp+0x28]
    8545:	mov    r9,QWORD PTR [rsp+0x20]
    854a:	mov    eax,DWORD PTR [r8+0x4]
    854e:	test   eax,eax
    8550:	jle    8628 <quantum_kronecker+0x1b8>
    8556:	mov    rdx,QWORD PTR [rsp+0x30]
    855b:	lea    r10d,[rax-0x1]
    855f:	xor    r14d,r14d
    8562:	xor    r15d,r15d
    8565:	add    r10,0x1
    8569:	mov    edi,DWORD PTR [rdx+0x4]
    856c:	shl    r10,0x4
    8570:	lea    r11d,[rdi-0x1]
    8574:	shl    r11,0x4
    8578:	nop    DWORD PTR [rax+rax*1+0x0]
    8580:	test   edi,edi
    8582:	jle    8618 <quantum_kronecker+0x1a8>
    8588:	mov    rsi,QWORD PTR [rdx+0x10]
    858c:	mov    r12,QWORD PTR [r8+0x10]
    8590:	movsxd rbx,r15d
    8593:	shl    rbx,0x4
    8597:	mov    ecx,DWORD PTR [rdx]
    8599:	lea    rbp,[rsi+0x10]
    859d:	add    r12,r14
    85a0:	add    rbx,r9
    85a3:	lea    r13,[rbp+r11*1+0x0]
    85a8:	jmp    85b4 <quantum_kronecker+0x144>
    85aa:	nop    WORD PTR [rax+rax*1+0x0]
    85b0:	add    rbp,0x10
    85b4:	movss  xmm2,DWORD PTR [rsi]
    85b8:	movss  xmm3,DWORD PTR [rsi+0x4]
    85bd:	movss  xmm5,DWORD PTR [r12]
    85c3:	movss  xmm1,DWORD PTR [r12+0x4]
    85ca:	movaps xmm4,xmm2
    85cd:	movaps xmm0,xmm3
    85d0:	movaps xmm6,xmm2
    85d3:	mov    rax,QWORD PTR [r12+0x8]
    85d8:	mulss  xmm0,xmm1
    85dc:	mulss  xmm4,xmm5
    85e0:	shl    rax,cl
    85e3:	or     rax,QWORD PTR [rsi+0x8]
    85e7:	mulss  xmm6,xmm1
    85eb:	mov    QWORD PTR [rbx+0x8],rax
    85ef:	subss  xmm4,xmm0
    85f3:	movaps xmm0,xmm3
    85f6:	mulss  xmm0,xmm5
    85fa:	addss  xmm0,xmm6
    85fe:	ucomiss xmm4,xmm0
    8601:	jp     865d <quantum_kronecker+0x1ed>
    8603:	movss  DWORD PTR [rbx],xmm4
    8607:	mov    rsi,rbp
    860a:	add    rbx,0x10
    860e:	movss  DWORD PTR [rbx-0xc],xmm0
    8613:	cmp    rbp,r13
    8616:	jne    85b0 <quantum_kronecker+0x140>
    8618:	add    r14,0x10
    861c:	add    r15d,edi
    861f:	cmp    r10,r14
    8622:	jne    8580 <quantum_kronecker+0x110>
    8628:	mov    rax,QWORD PTR [rsp+0x18]
    862d:	mov    edx,DWORD PTR [rsp+0x38]
    8631:	mov    edi,DWORD PTR [rsp+0x8]
    8635:	mov    DWORD PTR [rax],edx
    8637:	mov    edx,DWORD PTR [rsp+0xc]
    863b:	mov    DWORD PTR [rax+0x8],edi
    863e:	mov    DWORD PTR [rax+0x4],edx
    8641:	mov    rdx,QWORD PTR [rsp+0x10]
    8646:	mov    QWORD PTR [rax+0x10],r9
    864a:	mov    QWORD PTR [rax+0x18],rdx
    864e:	add    rsp,0x68
    8652:	pop    rbx
    8653:	pop    rbp
    8654:	pop    r12
    8656:	pop    r13
    8658:	pop    r14
    865a:	pop    r15
    865c:	ret    
    865d:	movaps xmm0,xmm5
    8660:	mov    QWORD PTR [rsp+0x50],rdx
    8665:	mov    QWORD PTR [rsp+0x48],r8
    866a:	mov    QWORD PTR [rsp+0x40],r11
    866f:	mov    DWORD PTR [rsp+0x3c],edi
    8673:	mov    QWORD PTR [rsp+0x30],r10
    8678:	mov    DWORD PTR [rsp+0x28],ecx
    867c:	mov    QWORD PTR [rsp+0x20],r9
    8681:	call   8d40 <__mulsc3>
    8686:	mov    rdx,QWORD PTR [rsp+0x50]
    868b:	mov    r8,QWORD PTR [rsp+0x48]
    8690:	movq   QWORD PTR [rsp+0x58],xmm0
    8696:	mov    r11,QWORD PTR [rsp+0x40]
    869b:	movss  xmm4,DWORD PTR [rsp+0x58]
    86a1:	movss  xmm0,DWORD PTR [rsp+0x5c]
    86a7:	mov    edi,DWORD PTR [rsp+0x3c]
    86ab:	mov    r10,QWORD PTR [rsp+0x30]
    86b0:	mov    ecx,DWORD PTR [rsp+0x28]
    86b4:	mov    r9,QWORD PTR [rsp+0x20]
    86b9:	jmp    8603 <quantum_kronecker+0x193>
    86be:	mov    edi,0x1
    86c3:	mov    edx,r12d
    86c6:	lea    rsi,[rip+0x1cc3]        # a390 <_IO_stdin_used+0x390>
    86cd:	call   12a0 <__printf_chk@plt>
    86d2:	mov    edi,0x1
    86d7:	call   12e0 <exit@plt>
    86dc:	mov    edx,DWORD PTR [rsp+0xc]
    86e0:	mov    edi,0x1
    86e5:	lea    rsi,[rip+0x19bc]        # a0a8 <_IO_stdin_used+0xa8>
    86ec:	xor    eax,eax
    86ee:	call   12a0 <__printf_chk@plt>
    86f3:	mov    edi,0x1
    86f8:	call   12e0 <exit@plt>
    86fd:	nop    DWORD PTR [rax]

0000000000008700 <quantum_state_collapse>:
    8700:	endbr64 
    8704:	push   r15
    8706:	mov    ecx,esi
    8708:	mov    r8,rdi
    870b:	push   r14
    870d:	mov    r14d,edx
    8710:	push   r13
    8712:	mov    r13d,0x1
    8718:	push   r12
    871a:	shl    r13,cl
    871d:	push   rbp
    871e:	push   rbx
    871f:	sub    rsp,0x58
    8723:	mov    edx,DWORD PTR [rsp+0x90]
    872a:	mov    eax,DWORD PTR [rsp+0x94]
    8731:	mov    rbx,QWORD PTR [rsp+0xa0]
    8739:	sub    edx,0x1
    873c:	mov    DWORD PTR [rsp+0x30],edx
    8740:	test   eax,eax
    8742:	jle    8931 <quantum_state_collapse+0x231>
    8748:	sub    eax,0x1
    874b:	mov    ebp,esi
    874d:	pxor   xmm2,xmm2
    8751:	xor    edx,edx
    8753:	shl    rax,0x4
    8757:	lea    r15,[rbx+rax*1+0x10]
    875c:	mov    rax,rbx
    875f:	jmp    8796 <quantum_state_collapse+0x96>
    8761:	nop    DWORD PTR [rax+0x0]
    8768:	test   r14d,r14d
    876b:	jne    878d <quantum_state_collapse+0x8d>
    876d:	movss  xmm1,DWORD PTR [rax+0x4]
    8772:	movss  xmm0,DWORD PTR [rax]
    8776:	add    edx,0x1
    8779:	mulss  xmm0,xmm0
    877d:	mulss  xmm1,xmm1
    8781:	addss  xmm0,xmm1
    8785:	cvtss2sd xmm0,xmm0
    8789:	addsd  xmm2,xmm0
    878d:	add    rax,0x10
    8791:	cmp    rax,r15
    8794:	je     87aa <quantum_state_collapse+0xaa>
    8796:	test   QWORD PTR [rax+0x8],r13
    879a:	je     8768 <quantum_state_collapse+0x68>
    879c:	test   r14d,r14d
    879f:	jne    876d <quantum_state_collapse+0x6d>
    87a1:	add    rax,0x10
    87a5:	cmp    rax,r15
    87a8:	jne    8796 <quantum_state_collapse+0x96>
    87aa:	movsxd r12,edx
    87ad:	mov    esi,0x10
    87b2:	mov    QWORD PTR [rsp+0x10],r8
    87b7:	mov    rdi,r12
    87ba:	mov    DWORD PTR [rsp],edx
    87bd:	movsd  QWORD PTR [rsp+0x8],xmm2
    87c3:	call   1250 <calloc@plt>
    87c8:	mov    edx,DWORD PTR [rsp]
    87cb:	movsd  xmm2,QWORD PTR [rsp+0x8]
    87d1:	test   rax,rax
    87d4:	mov    r8,QWORD PTR [rsp+0x10]
    87d9:	mov    r9,rax
    87dc:	je     89fa <quantum_state_collapse+0x2fa>
    87e2:	mov    rdi,r12
    87e5:	mov    QWORD PTR [rsp+0x28],r8
    87ea:	mov    r12d,0x1
    87f0:	shl    rdi,0x4
    87f4:	mov    QWORD PTR [rsp+0x20],r9
    87f9:	mov    DWORD PTR [rsp+0x10],edx
    87fd:	movsd  QWORD PTR [rsp+0x18],xmm2
    8803:	call   5140 <quantum_memman>
    8808:	mov    eax,DWORD PTR [rsp+0x98]
    880f:	mov    edx,DWORD PTR [rsp+0x10]
    8813:	xor    r10d,r10d
    8816:	mov    r9,QWORD PTR [rsp+0x20]
    881b:	mov    r8,QWORD PTR [rsp+0x28]
    8820:	mov    DWORD PTR [rsp+0x8],eax
    8824:	mov    rax,QWORD PTR [rsp+0xa8]
    882c:	movsd  xmm2,QWORD PTR [rsp+0x18]
    8832:	mov    QWORD PTR [rsp],rax
    8836:	jmp    8852 <quantum_state_collapse+0x152>
    8838:	nop    DWORD PTR [rax+rax*1+0x0]
    8840:	test   r14d,r14d
    8843:	je     8860 <quantum_state_collapse+0x160>
    8845:	add    rbx,0x10
    8849:	cmp    rbx,r15
    884c:	je     8900 <quantum_state_collapse+0x200>
    8852:	mov    rsi,QWORD PTR [rbx+0x8]
    8856:	test   rsi,r13
    8859:	je     8840 <quantum_state_collapse+0x140>
    885b:	test   r14d,r14d
    885e:	je     8845 <quantum_state_collapse+0x145>
    8860:	xor    eax,eax
    8862:	test   ebp,ebp
    8864:	jle    8888 <quantum_state_collapse+0x188>
    8866:	xor    ecx,ecx
    8868:	nop    DWORD PTR [rax+rax*1+0x0]
    8870:	mov    rdi,r12
    8873:	shl    rdi,cl
    8876:	add    ecx,0x1
    8879:	add    rax,rdi
    887c:	cmp    ebp,ecx
    887e:	jne    8870 <quantum_state_collapse+0x170>
    8880:	and    rax,rsi
    8883:	cmp    ebp,0x3e
    8886:	jg     88a9 <quantum_state_collapse+0x1a9>
    8888:	xor    edi,edi
    888a:	mov    ecx,0x3f
    888f:	nop
    8890:	mov    r11,r12
    8893:	shl    r11,cl
    8896:	sub    ecx,0x1
    8899:	add    rdi,r11
    889c:	cmp    ebp,ecx
    889e:	jne    8890 <quantum_state_collapse+0x190>
    88a0:	and    rsi,rdi
    88a3:	shr    rsi,1
    88a6:	or     rax,rsi
    88a9:	movsxd rcx,r10d
    88ac:	pxor   xmm5,xmm5
    88b0:	movapd xmm1,xmm2
    88b4:	movss  xmm3,DWORD PTR [rbx+0x4]
    88b9:	shl    rcx,0x4
    88bd:	sqrtsd xmm1,xmm1
    88c1:	movss  xmm4,DWORD PTR [rbx]
    88c5:	add    rcx,r9
    88c8:	ucomisd xmm5,xmm2
    88cc:	mov    QWORD PTR [rcx+0x8],rax
    88d0:	ja     898a <quantum_state_collapse+0x28a>
    88d6:	pxor   xmm0,xmm0
    88da:	add    rbx,0x10
    88de:	add    r10d,0x1
    88e2:	cvtsd2ss xmm0,xmm1
    88e6:	divss  xmm4,xmm0
    88ea:	divss  xmm3,xmm0
    88ee:	movss  DWORD PTR [rcx],xmm4
    88f2:	movss  DWORD PTR [rcx+0x4],xmm3
    88f7:	cmp    rbx,r15
    88fa:	jne    8852 <quantum_state_collapse+0x152>
    8900:	mov    eax,DWORD PTR [rsp+0x30]
    8904:	mov    DWORD PTR [r8+0x4],edx
    8908:	mov    QWORD PTR [r8+0x10],r9
    890c:	mov    DWORD PTR [r8],eax
    890f:	mov    eax,DWORD PTR [rsp+0x8]
    8913:	mov    DWORD PTR [r8+0x8],eax
    8917:	mov    rax,QWORD PTR [rsp]
    891b:	mov    QWORD PTR [r8+0x18],rax
    891f:	add    rsp,0x58
    8923:	mov    rax,r8
    8926:	pop    rbx
    8927:	pop    rbp
    8928:	pop    r12
    892a:	pop    r13
    892c:	pop    r14
    892e:	pop    r15
    8930:	ret    
    8931:	mov    QWORD PTR [rsp],rdi
    8935:	mov    esi,0x10
    893a:	xor    edi,edi
    893c:	call   1250 <calloc@plt>
    8941:	mov    r8,QWORD PTR [rsp]
    8945:	test   rax,rax
    8948:	mov    r9,rax
    894b:	je     89f8 <quantum_state_collapse+0x2f8>
    8951:	xor    edi,edi
    8953:	mov    QWORD PTR [rsp+0x18],r8
    8958:	mov    QWORD PTR [rsp+0x10],r9
    895d:	call   5140 <quantum_memman>
    8962:	mov    eax,DWORD PTR [rsp+0x98]
    8969:	mov    r9,QWORD PTR [rsp+0x10]
    896e:	xor    edx,edx
    8970:	mov    r8,QWORD PTR [rsp+0x18]
    8975:	mov    DWORD PTR [rsp+0x8],eax
    8979:	mov    rax,QWORD PTR [rsp+0xa8]
    8981:	mov    QWORD PTR [rsp],rax
    8985:	jmp    8900 <quantum_state_collapse+0x200>
    898a:	movapd xmm0,xmm2
    898e:	mov    QWORD PTR [rsp+0x48],r8
    8993:	mov    QWORD PTR [rsp+0x40],r9
    8998:	mov    DWORD PTR [rsp+0x3c],edx
    899c:	mov    DWORD PTR [rsp+0x38],r10d
    89a1:	mov    QWORD PTR [rsp+0x18],rcx
    89a6:	movss  DWORD PTR [rsp+0x34],xmm3
    89ac:	movsd  QWORD PTR [rsp+0x28],xmm1
    89b2:	movss  DWORD PTR [rsp+0x20],xmm4
    89b8:	movsd  QWORD PTR [rsp+0x10],xmm2
    89be:	call   1310 <sqrt@plt>
    89c3:	mov    r8,QWORD PTR [rsp+0x48]
    89c8:	mov    r9,QWORD PTR [rsp+0x40]
    89cd:	mov    edx,DWORD PTR [rsp+0x3c]
    89d1:	mov    r10d,DWORD PTR [rsp+0x38]
    89d6:	movss  xmm3,DWORD PTR [rsp+0x34]
    89dc:	movsd  xmm1,QWORD PTR [rsp+0x28]
    89e2:	movss  xmm4,DWORD PTR [rsp+0x20]
    89e8:	mov    rcx,QWORD PTR [rsp+0x18]
    89ed:	movsd  xmm2,QWORD PTR [rsp+0x10]
    89f3:	jmp    88d6 <quantum_state_collapse+0x1d6>
    89f8:	xor    edx,edx
    89fa:	mov    edi,0x1
    89ff:	lea    rsi,[rip+0x19b2]        # a3b8 <_IO_stdin_used+0x3b8>
    8a06:	xor    eax,eax
    8a08:	call   12a0 <__printf_chk@plt>
    8a0d:	mov    edi,0x1
    8a12:	call   12e0 <exit@plt>
    8a17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000008a20 <quantum_dot_product>:
    8a20:	endbr64 
    8a24:	push   r13
    8a26:	mov    eax,0x1
    8a2b:	push   r12
    8a2d:	mov    r12,rsi
    8a30:	push   rbp
    8a31:	mov    rbp,rdi
    8a34:	push   rbx
    8a35:	sub    rsp,0x38
    8a39:	mov    ecx,DWORD PTR [rsi+0x8]
    8a3c:	shl    eax,cl
    8a3e:	test   eax,eax
    8a40:	jle    8a68 <quantum_dot_product+0x48>
    8a42:	mov    rdi,QWORD PTR [rsi+0x18]
    8a46:	xor    eax,eax
    8a48:	mov    esi,0x1
    8a4d:	nop    DWORD PTR [rax]
    8a50:	mov    DWORD PTR [rdi+rax*4],0x0
    8a57:	mov    ecx,DWORD PTR [r12+0x8]
    8a5c:	mov    edx,esi
    8a5e:	add    rax,0x1
    8a62:	shl    edx,cl
    8a64:	cmp    edx,eax
    8a66:	jg     8a50 <quantum_dot_product+0x30>
    8a68:	mov    ecx,DWORD PTR [r12+0x4]
    8a6d:	test   ecx,ecx
    8a6f:	jle    8b01 <quantum_dot_product+0xe1>
    8a75:	mov    r8,QWORD PTR [r12+0x18]
    8a7a:	mov    rax,QWORD PTR [r12+0x10]
    8a7f:	xor    esi,esi
    8a81:	mov    r11d,0x20
    8a87:	mov    r10d,0x1
    8a8d:	lea    rdi,[rax+0x8]
    8a91:	lea    r9,[r8+0x4]
    8a95:	nop    DWORD PTR [rax]
    8a98:	mov    rcx,QWORD PTR [rdi]
    8a9b:	mov    eax,DWORD PTR [r12+0x8]
    8aa0:	mov    ebx,r10d
    8aa3:	mov    rdx,rcx
    8aa6:	shr    rdx,0x20
    8aaa:	xor    edx,ecx
    8aac:	mov    ecx,r11d
    8aaf:	imul   edx,edx,0x9e370001
    8ab5:	sub    ecx,eax
    8ab7:	shr    edx,cl
    8ab9:	mov    ecx,eax
    8abb:	shl    ebx,cl
    8abd:	lea    ebx,[rbx-0x1]
    8ac0:	mov    r13d,ebx
    8ac3:	movsxd rcx,edx
    8ac6:	sub    r13d,edx
    8ac9:	lea    rax,[r8+rcx*4]
    8acd:	mov    rdx,r13
    8ad0:	add    rdx,rcx
    8ad3:	lea    rcx,[r9+rdx*4]
    8ad7:	jmp    8aeb <quantum_dot_product+0xcb>
    8ad9:	nop    DWORD PTR [rax+0x0]
    8ae0:	add    rax,0x4
    8ae4:	xor    edx,edx
    8ae6:	cmp    rcx,rax
    8ae9:	je     8ac0 <quantum_dot_product+0xa0>
    8aeb:	mov    edx,DWORD PTR [rax]
    8aed:	test   edx,edx
    8aef:	jne    8ae0 <quantum_dot_product+0xc0>
    8af1:	add    esi,0x1
    8af4:	add    rdi,0x10
    8af8:	mov    DWORD PTR [rax],esi
    8afa:	cmp    DWORD PTR [r12+0x4],esi
    8aff:	jg     8a98 <quantum_dot_product+0x78>
    8b01:	mov    eax,DWORD PTR [rbp+0x4]
    8b04:	test   eax,eax
    8b06:	jle    8c85 <quantum_dot_product+0x265>
    8b0c:	pxor   xmm5,xmm5
    8b10:	xor    r13d,r13d
    8b13:	movaps xmm6,xmm5
    8b16:	movaps xmm0,xmm5
    8b19:	movaps xmm1,xmm5
    8b1c:	nop    DWORD PTR [rax+0x0]
    8b20:	mov    r9,r13
    8b23:	mov    esi,DWORD PTR [r12+0x8]
    8b28:	mov    ecx,0x20
    8b2d:	mov    r10,QWORD PTR [r12+0x18]
    8b32:	shl    r9,0x4
    8b36:	add    r9,QWORD PTR [rbp+0x10]
    8b3a:	mov    r8,QWORD PTR [r12+0x10]
    8b3f:	mov    rdi,QWORD PTR [r9+0x8]
    8b43:	sub    ecx,esi
    8b45:	lea    r11,[r10+0x4]
    8b49:	mov    rax,rdi
    8b4c:	shr    rax,0x20
    8b50:	xor    eax,edi
    8b52:	imul   eax,eax,0x9e370001
    8b58:	shr    eax,cl
    8b5a:	mov    ecx,esi
    8b5c:	mov    edx,eax
    8b5e:	mov    eax,0x1
    8b63:	shl    eax,cl
    8b65:	lea    ebx,[rax-0x1]
    8b68:	mov    esi,ebx
    8b6a:	movsxd rcx,edx
    8b6d:	sub    esi,edx
    8b6f:	lea    rax,[r10+rcx*4]
    8b73:	mov    rdx,rsi
    8b76:	add    rdx,rcx
    8b79:	lea    rsi,[r11+rdx*4]
    8b7d:	jmp    8b99 <quantum_dot_product+0x179>
    8b7f:	nop
    8b80:	movsxd rdx,ecx
    8b83:	shl    rdx,0x4
    8b87:	cmp    rdi,QWORD PTR [r8+rdx*1-0x8]
    8b8c:	je     8bd0 <quantum_dot_product+0x1b0>
    8b8e:	add    rax,0x4
    8b92:	xor    edx,edx
    8b94:	cmp    rsi,rax
    8b97:	je     8b68 <quantum_dot_product+0x148>
    8b99:	mov    ecx,DWORD PTR [rax]
    8b9b:	test   ecx,ecx
    8b9d:	jne    8b80 <quantum_dot_product+0x160>
    8b9f:	add    r13,0x1
    8ba3:	cmp    DWORD PTR [rbp+0x4],r13d
    8ba7:	jg     8b20 <quantum_dot_product+0x100>
    8bad:	movss  DWORD PTR [rsp+0x10],xmm0
    8bb3:	movss  DWORD PTR [rsp+0x14],xmm1
    8bb9:	movq   xmm0,QWORD PTR [rsp+0x10]
    8bbf:	add    rsp,0x38
    8bc3:	pop    rbx
    8bc4:	pop    rbp
    8bc5:	pop    r12
    8bc7:	pop    r13
    8bc9:	ret    
    8bca:	nop    WORD PTR [rax+rax*1+0x0]
    8bd0:	mov    ebx,ecx
    8bd2:	sub    ebx,0x1
    8bd5:	js     8b9f <quantum_dot_product+0x17f>
    8bd7:	movss  xmm1,DWORD PTR [r9]
    8bdc:	movss  xmm0,DWORD PTR [r9+0x4]
    8be2:	movss  DWORD PTR [rsp+0xc],xmm6
    8be8:	movss  DWORD PTR [rsp+0x8],xmm5
    8bee:	movss  DWORD PTR [rsp+0x28],xmm1
    8bf4:	movss  DWORD PTR [rsp+0x2c],xmm0
    8bfa:	movq   xmm0,QWORD PTR [rsp+0x28]
    8c00:	call   1a10 <quantum_conj>
    8c05:	movsxd rax,ebx
    8c08:	movss  xmm5,DWORD PTR [rsp+0x8]
    8c0e:	movss  xmm6,DWORD PTR [rsp+0xc]
    8c14:	shl    rax,0x4
    8c18:	add    rax,QWORD PTR [r12+0x10]
    8c1d:	movq   QWORD PTR [rsp+0x20],xmm0
    8c23:	movss  xmm1,DWORD PTR [rsp+0x24]
    8c29:	movss  xmm2,DWORD PTR [rax]
    8c2d:	movss  xmm7,DWORD PTR [rsp+0x20]
    8c33:	movss  xmm3,DWORD PTR [rax+0x4]
    8c38:	movaps xmm0,xmm1
    8c3b:	movaps xmm4,xmm2
    8c3e:	movaps xmm8,xmm2
    8c42:	mulss  xmm0,xmm3
    8c46:	mulss  xmm4,xmm7
    8c4a:	mulss  xmm8,xmm1
    8c4f:	subss  xmm4,xmm0
    8c53:	movaps xmm0,xmm7
    8c56:	mulss  xmm0,xmm3
    8c5a:	addss  xmm0,xmm8
    8c5f:	ucomiss xmm4,xmm0
    8c62:	jp     8c91 <quantum_dot_product+0x271>
    8c64:	addss  xmm5,xmm0
    8c68:	addss  xmm6,xmm4
    8c6c:	add    r13,0x1
    8c70:	movaps xmm0,xmm6
    8c73:	movaps xmm1,xmm5
    8c76:	cmp    DWORD PTR [rbp+0x4],r13d
    8c7a:	jg     8b20 <quantum_dot_product+0x100>
    8c80:	jmp    8bad <quantum_dot_product+0x18d>
    8c85:	pxor   xmm0,xmm0
    8c89:	movaps xmm1,xmm0
    8c8c:	jmp    8bad <quantum_dot_product+0x18d>
    8c91:	movaps xmm0,xmm7
    8c94:	call   8d40 <__mulsc3>
    8c99:	movss  xmm6,DWORD PTR [rsp+0xc]
    8c9f:	movss  xmm5,DWORD PTR [rsp+0x8]
    8ca5:	movq   QWORD PTR [rsp+0x18],xmm0
    8cab:	movss  xmm4,DWORD PTR [rsp+0x18]
    8cb1:	movss  xmm0,DWORD PTR [rsp+0x1c]
    8cb7:	jmp    8c64 <quantum_dot_product+0x244>
    8cb9:	nop    DWORD PTR [rax+0x0]

0000000000008cc0 <quantum_get_version>:
    8cc0:	endbr64 
    8cc4:	lea    rax,[rip+0x18bd]        # a588 <_IO_stdin_used+0x588>
    8ccb:	ret    
    8ccc:	nop    DWORD PTR [rax+0x0]

0000000000008cd0 <spec_srand>:
    8cd0:	endbr64 
    8cd4:	mov    DWORD PTR [rip+0x5396],edi        # e070 <seedi>
    8cda:	ret    
    8cdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000008ce0 <spec_rand>:
    8ce0:	endbr64 
    8ce4:	movsxd rax,DWORD PTR [rip+0x5385]        # e070 <seedi>
    8ceb:	pxor   xmm0,xmm0
    8cef:	mov    rdx,rax
    8cf2:	imul   rax,rax,0xffffffff834e0b5f
    8cf9:	mov    ecx,edx
    8cfb:	sar    ecx,0x1f
    8cfe:	shr    rax,0x20
    8d02:	add    eax,edx
    8d04:	sar    eax,0x10
    8d07:	sub    eax,ecx
    8d09:	imul   ecx,eax,0x1f31d
    8d0f:	imul   eax,eax,0xfffff4ec
    8d15:	sub    edx,ecx
    8d17:	imul   edx,edx,0x41a7
    8d1d:	add    eax,edx
    8d1f:	lea    edx,[rax+0x7fffffff]
    8d25:	test   eax,eax
    8d27:	cmovle eax,edx
    8d2a:	cvtsi2sd xmm0,eax
    8d2e:	mov    DWORD PTR [rip+0x533c],eax        # e070 <seedi>
    8d34:	divsd  xmm0,QWORD PTR [rip+0x1844]        # a580 <_IO_stdin_used+0x580>
    8d3c:	ret    
    8d3d:	nop    DWORD PTR [rax]

0000000000008d40 <__mulsc3>:
    8d40:	endbr64 
    8d44:	movaps xmm7,xmm0
    8d47:	movaps xmm9,xmm1
    8d4b:	movaps xmm10,xmm0
    8d4f:	mulss  xmm7,xmm2
    8d53:	movaps xmm11,xmm2
    8d57:	mulss  xmm9,xmm3
    8d5c:	mulss  xmm10,xmm3
    8d61:	mulss  xmm11,xmm1
    8d66:	movaps xmm4,xmm7
    8d69:	subss  xmm4,xmm9
    8d6e:	movaps xmm5,xmm10
    8d72:	addss  xmm5,xmm11
    8d77:	ucomiss xmm4,xmm4
    8d7a:	setp   al
    8d7d:	ucomiss xmm5,xmm5
    8d80:	setp   dl
    8d83:	and    al,dl
    8d85:	je     8f43 <__mulsc3+0x203>
    8d8b:	movss  xmm6,DWORD PTR [rip+0x128d]        # a020 <_IO_stdin_used+0x20>
    8d93:	movaps xmm8,xmm0
    8d97:	movaps xmm13,xmm1
    8d9b:	andps  xmm8,xmm6
    8d9f:	ucomiss xmm8,DWORD PTR [rip+0x17e9]        # a590 <_IO_stdin_used+0x590>
    8da7:	andps  xmm13,xmm6
    8dab:	jbe    8f60 <__mulsc3+0x220>
    8db1:	pxor   xmm12,xmm12
    8db6:	movaps xmm14,xmm0
    8dba:	movaps xmm15,xmm1
    8dbe:	xor    edx,edx
    8dc0:	ucomiss xmm8,DWORD PTR [rip+0x17c8]        # a590 <_IO_stdin_used+0x590>
    8dc8:	movss  xmm8,DWORD PTR [rip+0x125f]        # a030 <_IO_stdin_used+0x30>
    8dd1:	andps  xmm14,xmm8
    8dd5:	andps  xmm15,xmm8
    8dd9:	seta   dl
    8ddc:	cvtsi2ss xmm12,edx
    8de1:	xor    edx,edx
    8de3:	ucomiss xmm13,DWORD PTR [rip+0x17a5]        # a590 <_IO_stdin_used+0x590>
    8deb:	andps  xmm12,xmm6
    8def:	seta   dl
    8df2:	orps   xmm12,xmm14
    8df6:	ucomiss xmm2,xmm2
    8df9:	movaps xmm0,xmm12
    8dfd:	pxor   xmm12,xmm12
    8e02:	cvtsi2ss xmm12,edx
    8e07:	andps  xmm12,xmm6
    8e0b:	orps   xmm12,xmm15
    8e0f:	movaps xmm1,xmm12
    8e13:	jp     8fb0 <__mulsc3+0x270>
    8e19:	ucomiss xmm3,xmm3
    8e1c:	jp     8fc0 <__mulsc3+0x280>
    8e22:	movaps xmm8,xmm2
    8e26:	movaps xmm12,xmm3
    8e2a:	andps  xmm8,xmm6
    8e2e:	ucomiss xmm8,DWORD PTR [rip+0x175a]        # a590 <_IO_stdin_used+0x590>
    8e36:	andps  xmm12,xmm6
    8e3a:	ja     8eb0 <__mulsc3+0x170>
    8e3c:	ucomiss xmm12,DWORD PTR [rip+0x174c]        # a590 <_IO_stdin_used+0x590>
    8e44:	ja     8eb0 <__mulsc3+0x170>
    8e46:	test   al,al
    8e48:	jne    8f15 <__mulsc3+0x1d5>
    8e4e:	andps  xmm7,xmm6
    8e51:	ucomiss xmm7,DWORD PTR [rip+0x1738]        # a590 <_IO_stdin_used+0x590>
    8e58:	ja     8e80 <__mulsc3+0x140>
    8e5a:	andps  xmm9,xmm6
    8e5e:	ucomiss xmm9,DWORD PTR [rip+0x172a]        # a590 <_IO_stdin_used+0x590>
    8e66:	ja     8e80 <__mulsc3+0x140>
    8e68:	andps  xmm10,xmm6
    8e6c:	ucomiss xmm10,DWORD PTR [rip+0x171c]        # a590 <_IO_stdin_used+0x590>
    8e74:	jbe    8f78 <__mulsc3+0x238>
    8e7a:	nop    WORD PTR [rax+rax*1+0x0]
    8e80:	ucomiss xmm0,xmm0
    8e83:	jp     8ff0 <__mulsc3+0x2b0>
    8e89:	ucomiss xmm1,xmm1
    8e8c:	jp     8fe0 <__mulsc3+0x2a0>
    8e92:	ucomiss xmm2,xmm2
    8e95:	jp     8fd0 <__mulsc3+0x290>
    8e9b:	ucomiss xmm3,xmm3
    8e9e:	jnp    8f15 <__mulsc3+0x1d5>
    8ea0:	andps  xmm3,XMMWORD PTR [rip+0x1189]        # a030 <_IO_stdin_used+0x30>
    8ea7:	jmp    8f15 <__mulsc3+0x1d5>
    8ea9:	nop    DWORD PTR [rax+0x0]
    8eb0:	xor    eax,eax
    8eb2:	ucomiss xmm8,DWORD PTR [rip+0x16d6]        # a590 <_IO_stdin_used+0x590>
    8eba:	pxor   xmm4,xmm4
    8ebe:	movss  xmm8,DWORD PTR [rip+0x1169]        # a030 <_IO_stdin_used+0x30>
    8ec7:	movaps xmm7,xmm2
    8eca:	andps  xmm7,xmm8
    8ece:	seta   al
    8ed1:	cvtsi2ss xmm4,eax
    8ed5:	xor    eax,eax
    8ed7:	ucomiss xmm12,DWORD PTR [rip+0x16b1]        # a590 <_IO_stdin_used+0x590>
    8edf:	andps  xmm4,xmm6
    8ee2:	seta   al
    8ee5:	orps   xmm4,xmm7
    8ee8:	ucomiss xmm0,xmm0
    8eeb:	movaps xmm7,xmm3
    8eee:	movaps xmm2,xmm4
    8ef1:	pxor   xmm4,xmm4
    8ef5:	andps  xmm7,xmm8
    8ef9:	cvtsi2ss xmm4,eax
    8efd:	andps  xmm4,xmm6
    8f00:	orps   xmm4,xmm7
    8f03:	movaps xmm3,xmm4
    8f06:	jp     8f90 <__mulsc3+0x250>
    8f0c:	ucomiss xmm1,xmm1
    8f0f:	jp     8fa0 <__mulsc3+0x260>
    8f15:	movaps xmm4,xmm0
    8f18:	movaps xmm5,xmm1
    8f1b:	mulss  xmm5,xmm3
    8f1f:	mulss  xmm4,xmm2
    8f23:	mulss  xmm0,xmm3
    8f27:	mulss  xmm1,xmm2
    8f2b:	subss  xmm4,xmm5
    8f2f:	movss  xmm5,DWORD PTR [rip+0x165d]        # a594 <_IO_stdin_used+0x594>
    8f37:	addss  xmm1,xmm0
    8f3b:	mulss  xmm4,xmm5
    8f3f:	mulss  xmm5,xmm1
    8f43:	movss  DWORD PTR [rsp-0x8],xmm4
    8f49:	movss  DWORD PTR [rsp-0x4],xmm5
    8f4f:	movq   xmm0,QWORD PTR [rsp-0x8]
    8f55:	ret    
    8f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8f60:	ucomiss xmm13,DWORD PTR [rip+0x1628]        # a590 <_IO_stdin_used+0x590>
    8f68:	ja     8db1 <__mulsc3+0x71>
    8f6e:	xor    eax,eax
    8f70:	jmp    8e22 <__mulsc3+0xe2>
    8f75:	nop    DWORD PTR [rax]
    8f78:	andps  xmm6,xmm11
    8f7c:	ucomiss xmm6,DWORD PTR [rip+0x160d]        # a590 <_IO_stdin_used+0x590>
    8f83:	jbe    8f43 <__mulsc3+0x203>
    8f85:	jmp    8e80 <__mulsc3+0x140>
    8f8a:	nop    WORD PTR [rax+rax*1+0x0]
    8f90:	andps  xmm0,xmm8
    8f94:	jmp    8f0c <__mulsc3+0x1cc>
    8f99:	nop    DWORD PTR [rax+0x0]
    8fa0:	andps  xmm1,xmm8
    8fa4:	jmp    8f15 <__mulsc3+0x1d5>
    8fa9:	nop    DWORD PTR [rax+0x0]
    8fb0:	andps  xmm2,xmm8
    8fb4:	jmp    8e19 <__mulsc3+0xd9>
    8fb9:	nop    DWORD PTR [rax+0x0]
    8fc0:	andps  xmm3,xmm8
    8fc4:	jmp    8e22 <__mulsc3+0xe2>
    8fc9:	nop    DWORD PTR [rax+0x0]
    8fd0:	andps  xmm2,XMMWORD PTR [rip+0x1059]        # a030 <_IO_stdin_used+0x30>
    8fd7:	jmp    8e9b <__mulsc3+0x15b>
    8fdc:	nop    DWORD PTR [rax+0x0]
    8fe0:	andps  xmm1,XMMWORD PTR [rip+0x1049]        # a030 <_IO_stdin_used+0x30>
    8fe7:	jmp    8e92 <__mulsc3+0x152>
    8fec:	nop    DWORD PTR [rax+0x0]
    8ff0:	andps  xmm0,XMMWORD PTR [rip+0x1039]        # a030 <_IO_stdin_used+0x30>
    8ff7:	jmp    8e89 <__mulsc3+0x149>
    8ffc:	nop    DWORD PTR [rax+0x0]

0000000000009000 <__divsc3>:
    9000:	endbr64 
    9004:	movss  xmm6,DWORD PTR [rip+0x1014]        # a020 <_IO_stdin_used+0x20>
    900c:	movaps xmm7,xmm2
    900f:	movaps xmm9,xmm3
    9013:	andps  xmm7,xmm6
    9016:	andps  xmm9,xmm6
    901a:	comiss xmm9,xmm7
    901e:	jbe    90d0 <__divsc3+0xd0>
    9024:	movaps xmm4,xmm2
    9027:	movaps xmm8,xmm2
    902b:	movaps xmm5,xmm0
    902e:	divss  xmm4,xmm3
    9032:	mulss  xmm8,xmm4
    9037:	mulss  xmm5,xmm4
    903b:	mulss  xmm4,xmm1
    903f:	addss  xmm8,xmm3
    9044:	addss  xmm5,xmm1
    9048:	subss  xmm4,xmm0
    904c:	divss  xmm5,xmm8
    9051:	divss  xmm4,xmm8
    9056:	ucomiss xmm5,xmm5
    9059:	jnp    90b4 <__divsc3+0xb4>
    905b:	ucomiss xmm4,xmm4
    905e:	jnp    90b4 <__divsc3+0xb4>
    9060:	pxor   xmm8,xmm8
    9065:	mov    edx,0x0
    906a:	ucomiss xmm2,xmm8
    906e:	setnp  al
    9071:	cmovne eax,edx
    9074:	test   al,al
    9076:	je     9110 <__divsc3+0x110>
    907c:	ucomiss xmm3,xmm8
    9080:	setnp  al
    9083:	cmovne eax,edx
    9086:	test   al,al
    9088:	je     9110 <__divsc3+0x110>
    908e:	ucomiss xmm0,xmm0
    9091:	jnp    9098 <__divsc3+0x98>
    9093:	ucomiss xmm1,xmm1
    9096:	jp     9110 <__divsc3+0x110>
    9098:	andps  xmm2,XMMWORD PTR [rip+0xf91]        # a030 <_IO_stdin_used+0x30>
    909f:	orps   xmm2,XMMWORD PTR [rip+0x14fa]        # a5a0 <_IO_stdin_used+0x5a0>
    90a6:	mulss  xmm0,xmm2
    90aa:	movaps xmm4,xmm2
    90ad:	mulss  xmm4,xmm1
    90b1:	movaps xmm5,xmm0
    90b4:	movss  DWORD PTR [rsp-0x8],xmm5
    90ba:	movss  DWORD PTR [rsp-0x4],xmm4
    90c0:	movq   xmm0,QWORD PTR [rsp-0x8]
    90c6:	ret    
    90c7:	nop    WORD PTR [rax+rax*1+0x0]
    90d0:	movaps xmm4,xmm3
    90d3:	movaps xmm8,xmm3
    90d7:	movaps xmm12,xmm1
    90db:	divss  xmm4,xmm2
    90df:	mulss  xmm8,xmm4
    90e4:	movaps xmm5,xmm4
    90e7:	mulss  xmm4,xmm0
    90eb:	mulss  xmm5,xmm1
    90ef:	addss  xmm8,xmm2
    90f4:	subss  xmm12,xmm4
    90f9:	addss  xmm5,xmm0
    90fd:	movaps xmm4,xmm12
    9101:	divss  xmm5,xmm8
    9106:	divss  xmm4,xmm8
    910b:	jmp    9056 <__divsc3+0x56>
    9110:	movaps xmm10,xmm0
    9114:	andps  xmm10,xmm6
    9118:	ucomiss xmm10,DWORD PTR [rip+0x1470]        # a590 <_IO_stdin_used+0x590>
    9120:	ja     9138 <__divsc3+0x138>
    9122:	movaps xmm11,xmm1
    9126:	andps  xmm11,xmm6
    912a:	ucomiss xmm11,DWORD PTR [rip+0x145e]        # a590 <_IO_stdin_used+0x590>
    9132:	jbe    91d0 <__divsc3+0x1d0>
    9138:	movss  xmm11,DWORD PTR [rip+0x144f]        # a590 <_IO_stdin_used+0x590>
    9141:	ucomiss xmm11,xmm7
    9145:	jb     91d0 <__divsc3+0x1d0>
    914b:	ucomiss xmm11,xmm9
    914f:	jb     91d0 <__divsc3+0x1d0>
    9151:	xor    eax,eax
    9153:	ucomiss xmm10,xmm11
    9157:	movaps xmm5,xmm0
    915a:	movaps xmm0,xmm1
    915d:	pxor   xmm7,xmm7
    9161:	movss  xmm4,DWORD PTR [rip+0xec7]        # a030 <_IO_stdin_used+0x30>
    9169:	andps  xmm0,xmm6
    916c:	andps  xmm5,xmm4
    916f:	seta   al
    9172:	cvtsi2ss xmm7,eax
    9176:	xor    eax,eax
    9178:	ucomiss xmm0,xmm11
    917c:	pxor   xmm0,xmm0
    9180:	seta   al
    9183:	andps  xmm7,xmm6
    9186:	cvtsi2ss xmm0,eax
    918a:	orps   xmm7,xmm5
    918d:	movaps xmm5,xmm1
    9190:	andps  xmm5,xmm4
    9193:	andnps xmm4,xmm0
    9196:	movaps xmm0,xmm3
    9199:	mulss  xmm3,xmm7
    919d:	orps   xmm4,xmm5
    91a0:	movaps xmm5,xmm2
    91a3:	mulss  xmm2,xmm4
    91a7:	mulss  xmm0,xmm4
    91ab:	mulss  xmm5,xmm7
    91af:	movaps xmm4,xmm2
    91b2:	subss  xmm4,xmm3
    91b6:	addss  xmm5,xmm0
    91ba:	movss  xmm0,DWORD PTR [rip+0x13d2]        # a594 <_IO_stdin_used+0x594>
    91c2:	mulss  xmm4,xmm0
    91c6:	mulss  xmm5,xmm0
    91ca:	jmp    90b4 <__divsc3+0xb4>
    91cf:	nop
    91d0:	ucomiss xmm7,DWORD PTR [rip+0x13b9]        # a590 <_IO_stdin_used+0x590>
    91d7:	setbe  al
    91da:	ucomiss xmm9,DWORD PTR [rip+0x13ae]        # a590 <_IO_stdin_used+0x590>
    91e2:	setbe  dl
    91e5:	test   al,al
    91e7:	je     91f1 <__divsc3+0x1f1>
    91e9:	test   dl,dl
    91eb:	jne    90b4 <__divsc3+0xb4>
    91f1:	movss  xmm7,DWORD PTR [rip+0x1397]        # a590 <_IO_stdin_used+0x590>
    91f9:	ucomiss xmm7,xmm10
    91fd:	jb     90b4 <__divsc3+0xb4>
    9203:	movaps xmm9,xmm1
    9207:	andps  xmm9,xmm6
    920b:	ucomiss xmm7,xmm9
    920f:	jb     90b4 <__divsc3+0xb4>
    9215:	xor    eax,0x1
    9218:	pxor   xmm4,xmm4
    921c:	movaps xmm7,xmm2
    921f:	xor    edx,0x1
    9222:	movzx  eax,al
    9225:	movzx  edx,dl
    9228:	pxor   xmm2,xmm2
    922c:	cvtsi2ss xmm4,eax
    9230:	movss  xmm5,DWORD PTR [rip+0xdf8]        # a030 <_IO_stdin_used+0x30>
    9238:	cvtsi2ss xmm2,edx
    923c:	andps  xmm7,xmm5
    923f:	andps  xmm4,xmm6
    9242:	orps   xmm4,xmm7
    9245:	movaps xmm7,xmm3
    9248:	andps  xmm7,xmm5
    924b:	andnps xmm5,xmm2
    924e:	movaps xmm2,xmm1
    9251:	mulss  xmm1,xmm4
    9255:	orps   xmm5,xmm7
    9258:	movaps xmm3,xmm5
    925b:	movaps xmm5,xmm0
    925e:	mulss  xmm0,xmm3
    9262:	mulss  xmm5,xmm4
    9266:	mulss  xmm2,xmm3
    926a:	subss  xmm1,xmm0
    926e:	addss  xmm5,xmm2
    9272:	movaps xmm4,xmm1
    9275:	mulss  xmm4,xmm8
    927a:	mulss  xmm5,xmm8
    927f:	jmp    90b4 <__divsc3+0xb4>
    9284:	nop    WORD PTR cs:[rax+rax*1+0x0]
    928e:	xchg   ax,ax

0000000000009290 <__libc_csu_init>:
    9290:	endbr64 
    9294:	push   r15
    9296:	lea    r15,[rip+0x4a5b]        # dcf8 <__frame_dummy_init_array_entry>
    929d:	push   r14
    929f:	mov    r14,rdx
    92a2:	push   r13
    92a4:	mov    r13,rsi
    92a7:	push   r12
    92a9:	mov    r12d,edi
    92ac:	push   rbp
    92ad:	lea    rbp,[rip+0x4a4c]        # dd00 <__do_global_dtors_aux_fini_array_entry>
    92b4:	push   rbx
    92b5:	sub    rbp,r15
    92b8:	sub    rsp,0x8
    92bc:	call   1000 <_init>
    92c1:	sar    rbp,0x3
    92c5:	je     92e6 <__libc_csu_init+0x56>
    92c7:	xor    ebx,ebx
    92c9:	nop    DWORD PTR [rax+0x0]
    92d0:	mov    rdx,r14
    92d3:	mov    rsi,r13
    92d6:	mov    edi,r12d
    92d9:	call   QWORD PTR [r15+rbx*8]
    92dd:	add    rbx,0x1
    92e1:	cmp    rbp,rbx
    92e4:	jne    92d0 <__libc_csu_init+0x40>
    92e6:	add    rsp,0x8
    92ea:	pop    rbx
    92eb:	pop    rbp
    92ec:	pop    r12
    92ee:	pop    r13
    92f0:	pop    r14
    92f2:	pop    r15
    92f4:	ret    
    92f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000009300 <__libc_csu_fini>:
    9300:	endbr64 
    9304:	ret    
    9305:	nop    WORD PTR cs:[rax+rax*1+0x0]
    930f:	nop

0000000000009310 <atexit>:
    9310:	endbr64 
    9314:	mov    rdx,QWORD PTR [rip+0x4ced]        # e008 <__dso_handle>
    931b:	xor    esi,esi
    931d:	jmp    12d0 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000009324 <_fini>:
    9324:	endbr64 
    9328:	sub    rsp,0x8
    932c:	add    rsp,0x8
    9330:	ret    
