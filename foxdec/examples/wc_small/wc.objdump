
./examples/wc_small/wc:	file format elf64-x86-64

Disassembly of section .init:

0000000000001000 <_init>:
    1000:      	endbr64
    1004:      	sub	rsp, 8
    1008:      	mov	rax, qword ptr [rip + 12249] # 0x3fe8 <_GLOBAL_OFFSET_TABLE_+0x50>
    100f:      	test	rax, rax
    1012:      	je	0x1016 <_init+0x16>
    1014:      	call	rax
    1016:      	add	rsp, 8
    101a:      	ret

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:      	push	qword ptr [rip + 12154] # 0x3fa0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:      	repne		jmp	qword ptr [rip + 12155] # 0x3fa8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:      	nop	dword ptr [rax]
    1030:      	endbr64
    1034:      	push	0
    1039:      	repne		jmp	0x1020 <.plt>
    103f:      	nop
    1040:      	endbr64
    1044:      	push	1
    1049:      	repne		jmp	0x1020 <.plt>
    104f:      	nop
    1050:      	endbr64
    1054:      	push	2
    1059:      	repne		jmp	0x1020 <.plt>
    105f:      	nop
    1060:      	endbr64
    1064:      	push	3
    1069:      	repne		jmp	0x1020 <.plt>
    106f:      	nop
    1070:      	endbr64
    1074:      	push	4
    1079:      	repne		jmp	0x1020 <.plt>
    107f:      	nop

Disassembly of section .plt.got:

0000000000001080 <.plt.got>:
    1080:      	endbr64
    1084:      	repne		jmp	qword ptr [rip + 12141] # 0x3ff8 <_GLOBAL_OFFSET_TABLE_+0x60>
    108b:      	nop	dword ptr [rax + rax]

Disassembly of section .plt.sec:

0000000000001090 <.plt.sec>:
    1090:      	endbr64
    1094:      	repne		jmp	qword ptr [rip + 12053] # 0x3fb0 <_GLOBAL_OFFSET_TABLE_+0x18>
    109b:      	nop	dword ptr [rax + rax]
    10a0:      	endbr64
    10a4:      	repne		jmp	qword ptr [rip + 12045] # 0x3fb8 <_GLOBAL_OFFSET_TABLE_+0x20>
    10ab:      	nop	dword ptr [rax + rax]
    10b0:      	endbr64
    10b4:      	repne		jmp	qword ptr [rip + 12037] # 0x3fc0 <_GLOBAL_OFFSET_TABLE_+0x28>
    10bb:      	nop	dword ptr [rax + rax]
    10c0:      	endbr64
    10c4:      	repne		jmp	qword ptr [rip + 12029] # 0x3fc8 <_GLOBAL_OFFSET_TABLE_+0x30>
    10cb:      	nop	dword ptr [rax + rax]
    10d0:      	endbr64
    10d4:      	repne		jmp	qword ptr [rip + 12021] # 0x3fd0 <_GLOBAL_OFFSET_TABLE_+0x38>
    10db:      	nop	dword ptr [rax + rax]

Disassembly of section .text:

00000000000010e0 <_start>:
    10e0:      	endbr64
    10e4:      	xor	ebp, ebp
    10e6:      	mov	r9, rdx
    10e9:      	pop	rsi
    10ea:      	mov	rdx, rsp
    10ed:      	and	rsp, -16
    10f1:      	push	rax
    10f2:      	push	rsp
    10f3:      	lea	r8, [rip + 646]         # 0x1380 <__libc_csu_fini>
    10fa:      	lea	rcx, [rip + 527]        # 0x1310 <__libc_csu_init>
    1101:      	lea	rdi, [rip + 193]        # 0x11c9 <main>
    1108:      	call	qword ptr [rip + 11986] # 0x3fe0 <_GLOBAL_OFFSET_TABLE_+0x48>
    110e:      	hlt
    110f:      	nop

0000000000001110 <deregister_tm_clones>:
    1110:      	lea	rdi, [rip + 12025]      # 0x4010 <completed.8061>
    1117:      	lea	rax, [rip + 12018]      # 0x4010 <completed.8061>
    111e:      	cmp	rax, rdi
    1121:      	je	0x1138 <deregister_tm_clones+0x28>
    1123:      	mov	rax, qword ptr [rip + 11950] # 0x3fd8 <_GLOBAL_OFFSET_TABLE_+0x40>
    112a:      	test	rax, rax
    112d:      	je	0x1138 <deregister_tm_clones+0x28>
    112f:      	jmp	rax
    1131:      	nop	dword ptr [rax]
    1138:      	ret
    1139:      	nop	dword ptr [rax]

0000000000001140 <register_tm_clones>:
    1140:      	lea	rdi, [rip + 11977]      # 0x4010 <completed.8061>
    1147:      	lea	rsi, [rip + 11970]      # 0x4010 <completed.8061>
    114e:      	sub	rsi, rdi
    1151:      	mov	rax, rsi
    1154:      	shr	rsi, 63
    1158:      	sar	rax, 3
    115c:      	add	rsi, rax
    115f:      	sar	rsi
    1162:      	je	0x1178 <register_tm_clones+0x38>
    1164:      	mov	rax, qword ptr [rip + 11909] # 0x3ff0 <_GLOBAL_OFFSET_TABLE_+0x58>
    116b:      	test	rax, rax
    116e:      	je	0x1178 <register_tm_clones+0x38>
    1170:      	jmp	rax
    1172:      	nop	word ptr [rax + rax]
    1178:      	ret
    1179:      	nop	dword ptr [rax]

0000000000001180 <__do_global_dtors_aux>:
    1180:      	endbr64
    1184:      	cmp	byte ptr [rip + 11909], 0 # 0x4010 <completed.8061>
    118b:      	jne	0x11b8 <__do_global_dtors_aux+0x38>
    118d:      	push	rbp
    118e:      	cmp	qword ptr [rip + 11874], 0 # 0x3ff8 <_GLOBAL_OFFSET_TABLE_+0x60>
    1196:      	mov	rbp, rsp
    1199:      	je	0x11a7 <__do_global_dtors_aux+0x27>
    119b:      	mov	rdi, qword ptr [rip + 11878] # 0x4008 <__dso_handle>
    11a2:      	call	0x1080 <.plt.got>
    11a7:      	call	0x1110 <deregister_tm_clones>
    11ac:      	mov	byte ptr [rip + 11869], 1 # 0x4010 <completed.8061>
    11b3:      	pop	rbp
    11b4:      	ret
    11b5:      	nop	dword ptr [rax]
    11b8:      	ret
    11b9:      	nop	dword ptr [rax]

00000000000011c0 <frame_dummy>:
    11c0:      	endbr64
    11c4:      	jmp	0x1140 <register_tm_clones>

00000000000011c9 <main>:
    11c9:      	endbr64
    11cd:      	push	rbp
    11ce:      	mov	rbp, rsp
    11d1:      	sub	rsp, 48
    11d5:      	mov	dword ptr [rbp - 36], edi
    11d8:      	mov	qword ptr [rbp - 48], rsi
    11dc:      	cmp	dword ptr [rbp - 36], 2
    11e0:      	je	0x1207 <main+0x3e>
    11e2:      	mov	rax, qword ptr [rbp - 48]
    11e6:      	mov	rax, qword ptr [rax]
    11e9:      	mov	rsi, rax
    11ec:      	lea	rdi, [rip + 3605]       # 0x2008 <_IO_stdin_used+0x8>
    11f3:      	mov	eax, 0
    11f8:      	call	0x10a0 <.plt.sec+0x10>
    11fd:      	mov	eax, 1
    1202:      	jmp	0x1300 <main+0x137>
    1207:      	mov	rax, qword ptr [rbp - 48]
    120b:      	add	rax, 8
    120f:      	mov	rax, qword ptr [rax]
    1212:      	lea	rsi, [rip + 3589]       # 0x201e <_IO_stdin_used+0x1e>
    1219:      	mov	rdi, rax
    121c:      	call	0x10c0 <.plt.sec+0x30>
    1221:      	mov	qword ptr [rbp - 8], rax
    1225:      	cmp	qword ptr [rbp - 8], 0
    122a:      	jne	0x1255 <main+0x8c>
    122c:      	mov	rax, qword ptr [rbp - 48]
    1230:      	add	rax, 8
    1234:      	mov	rax, qword ptr [rax]
    1237:      	mov	rsi, rax
    123a:      	lea	rdi, [rip + 3551]       # 0x2020 <_IO_stdin_used+0x20>
    1241:      	mov	eax, 0
    1246:      	call	0x10a0 <.plt.sec+0x10>
    124b:      	mov	eax, 1
    1250:      	jmp	0x1300 <main+0x137>
    1255:      	mov	dword ptr [rbp - 28], 0
    125c:      	mov	dword ptr [rbp - 24], 0
    1263:      	mov	dword ptr [rbp - 20], 0
    126a:      	mov	dword ptr [rbp - 16], 0
    1271:      	jmp	0x12be <main+0xf5>
    1273:      	add	dword ptr [rbp - 20], 1
    1277:      	cmp	dword ptr [rbp - 12], 10
    127b:      	jne	0x1281 <main+0xb8>
    127d:      	add	dword ptr [rbp - 24], 1
    1281:      	call	0x10d0 <.plt.sec+0x40>
    1286:      	mov	rax, qword ptr [rax]
    1289:      	mov	edx, dword ptr [rbp - 12]
    128c:      	movsxd	rdx, edx
    128f:      	add	rdx, rdx
    1292:      	add	rax, rdx
    1295:      	movzx	eax, word ptr [rax]
    1298:      	movzx	eax, ax
    129b:      	and	eax, 8192
    12a0:      	test	eax, eax
    12a2:      	je	0x12ad <main+0xe4>
    12a4:      	mov	dword ptr [rbp - 16], 0
    12ab:      	jmp	0x12be <main+0xf5>
    12ad:      	cmp	dword ptr [rbp - 16], 0
    12b1:      	jne	0x12be <main+0xf5>
    12b3:      	add	dword ptr [rbp - 28], 1
    12b7:      	mov	dword ptr [rbp - 16], 1
    12be:      	mov	rax, qword ptr [rbp - 8]
    12c2:      	mov	rdi, rax
    12c5:      	call	0x10b0 <.plt.sec+0x20>
    12ca:      	mov	dword ptr [rbp - 12], eax
    12cd:      	cmp	dword ptr [rbp - 12], -1
    12d1:      	jne	0x1273 <main+0xaa>
    12d3:      	mov	rax, qword ptr [rbp - 8]
    12d7:      	mov	rdi, rax
    12da:      	call	0x1090 <.plt.sec>
    12df:      	mov	ecx, dword ptr [rbp - 20]
    12e2:      	mov	edx, dword ptr [rbp - 28]
    12e5:      	mov	eax, dword ptr [rbp - 24]
    12e8:      	mov	esi, eax
    12ea:      	lea	rdi, [rip + 3407]       # 0x2040 <_IO_stdin_used+0x40>
    12f1:      	mov	eax, 0
    12f6:      	call	0x10a0 <.plt.sec+0x10>
    12fb:      	mov	eax, 0
    1300:      	leave
    1301:      	ret
    1302:      	nop	word ptr cs:[rax + rax]
    130c:      	nop	dword ptr [rax]

0000000000001310 <__libc_csu_init>:
    1310:      	endbr64
    1314:      	push	r15
    1316:      	lea	r15, [rip + 10875]      # 0x3d98 <__init_array_start>
    131d:      	push	r14
    131f:      	mov	r14, rdx
    1322:      	push	r13
    1324:      	mov	r13, rsi
    1327:      	push	r12
    1329:      	mov	r12d, edi
    132c:      	push	rbp
    132d:      	lea	rbp, [rip + 10860]      # 0x3da0 <__do_global_dtors_aux_fini_array_entry>
    1334:      	push	rbx
    1335:      	sub	rbp, r15
    1338:      	sub	rsp, 8
    133c:      	call	0x1000 <_init>
    1341:      	sar	rbp, 3
    1345:      	je	0x1366 <__libc_csu_init+0x56>
    1347:      	xor	ebx, ebx
    1349:      	nop	dword ptr [rax]
    1350:      	mov	rdx, r14
    1353:      	mov	rsi, r13
    1356:      	mov	edi, r12d
    1359:      	call	qword ptr [r15 + 8*rbx]
    135d:      	add	rbx, 1
    1361:      	cmp	rbp, rbx
    1364:      	jne	0x1350 <__libc_csu_init+0x40>
    1366:      	add	rsp, 8
    136a:      	pop	rbx
    136b:      	pop	rbp
    136c:      	pop	r12
    136e:      	pop	r13
    1370:      	pop	r14
    1372:      	pop	r15
    1374:      	ret
    1375:      	nop	word ptr cs:[rax + rax]

0000000000001380 <__libc_csu_fini>:
    1380:      	endbr64
    1384:      	ret

Disassembly of section .fini:

0000000000001388 <_fini>:
    1388:      	endbr64
    138c:      	sub	rsp, 8
    1390:      	add	rsp, 8
    1394:      	ret
