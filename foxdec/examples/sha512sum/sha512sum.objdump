
sha512sum:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <.init>:
    2000:	endbr64 
    2004:	sub    rsp,0x8
    2008:	mov    rax,QWORD PTR [rip+0xefc9]        # 10fd8 <__gmon_start__>
    200f:	test   rax,rax
    2012:	je     2016 <__cxa_finalize@plt-0x36a>
    2014:	call   rax
    2016:	add    rsp,0x8
    201a:	ret    

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	push   QWORD PTR [rip+0xedea]        # 10e10 <quoting_style_args@@Base+0x250>
    2026:	bnd jmp QWORD PTR [rip+0xedeb]        # 10e18 <quoting_style_args@@Base+0x258>
    202d:	nop    DWORD PTR [rax]
    2030:	endbr64 
    2034:	push   0x0
    2039:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    203f:	nop
    2040:	endbr64 
    2044:	push   0x1
    2049:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    204f:	nop
    2050:	endbr64 
    2054:	push   0x2
    2059:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    205f:	nop
    2060:	endbr64 
    2064:	push   0x3
    2069:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    206f:	nop
    2070:	endbr64 
    2074:	push   0x4
    2079:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    207f:	nop
    2080:	endbr64 
    2084:	push   0x5
    2089:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    208f:	nop
    2090:	endbr64 
    2094:	push   0x6
    2099:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    209f:	nop
    20a0:	endbr64 
    20a4:	push   0x7
    20a9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    20af:	nop
    20b0:	endbr64 
    20b4:	push   0x8
    20b9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    20bf:	nop
    20c0:	endbr64 
    20c4:	push   0x9
    20c9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    20cf:	nop
    20d0:	endbr64 
    20d4:	push   0xa
    20d9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    20df:	nop
    20e0:	endbr64 
    20e4:	push   0xb
    20e9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    20ef:	nop
    20f0:	endbr64 
    20f4:	push   0xc
    20f9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    20ff:	nop
    2100:	endbr64 
    2104:	push   0xd
    2109:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    210f:	nop
    2110:	endbr64 
    2114:	push   0xe
    2119:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    211f:	nop
    2120:	endbr64 
    2124:	push   0xf
    2129:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    212f:	nop
    2130:	endbr64 
    2134:	push   0x10
    2139:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    213f:	nop
    2140:	endbr64 
    2144:	push   0x11
    2149:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    214f:	nop
    2150:	endbr64 
    2154:	push   0x12
    2159:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    215f:	nop
    2160:	endbr64 
    2164:	push   0x13
    2169:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    216f:	nop
    2170:	endbr64 
    2174:	push   0x14
    2179:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    217f:	nop
    2180:	endbr64 
    2184:	push   0x15
    2189:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    218f:	nop
    2190:	endbr64 
    2194:	push   0x16
    2199:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    219f:	nop
    21a0:	endbr64 
    21a4:	push   0x17
    21a9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    21af:	nop
    21b0:	endbr64 
    21b4:	push   0x18
    21b9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    21bf:	nop
    21c0:	endbr64 
    21c4:	push   0x19
    21c9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    21cf:	nop
    21d0:	endbr64 
    21d4:	push   0x1a
    21d9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    21df:	nop
    21e0:	endbr64 
    21e4:	push   0x1b
    21e9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    21ef:	nop
    21f0:	endbr64 
    21f4:	push   0x1c
    21f9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    21ff:	nop
    2200:	endbr64 
    2204:	push   0x1d
    2209:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    220f:	nop
    2210:	endbr64 
    2214:	push   0x1e
    2219:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    221f:	nop
    2220:	endbr64 
    2224:	push   0x1f
    2229:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    222f:	nop
    2230:	endbr64 
    2234:	push   0x20
    2239:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    223f:	nop
    2240:	endbr64 
    2244:	push   0x21
    2249:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    224f:	nop
    2250:	endbr64 
    2254:	push   0x22
    2259:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    225f:	nop
    2260:	endbr64 
    2264:	push   0x23
    2269:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    226f:	nop
    2270:	endbr64 
    2274:	push   0x24
    2279:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    227f:	nop
    2280:	endbr64 
    2284:	push   0x25
    2289:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    228f:	nop
    2290:	endbr64 
    2294:	push   0x26
    2299:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    229f:	nop
    22a0:	endbr64 
    22a4:	push   0x27
    22a9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    22af:	nop
    22b0:	endbr64 
    22b4:	push   0x28
    22b9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    22bf:	nop
    22c0:	endbr64 
    22c4:	push   0x29
    22c9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    22cf:	nop
    22d0:	endbr64 
    22d4:	push   0x2a
    22d9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    22df:	nop
    22e0:	endbr64 
    22e4:	push   0x2b
    22e9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    22ef:	nop
    22f0:	endbr64 
    22f4:	push   0x2c
    22f9:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    22ff:	nop
    2300:	endbr64 
    2304:	push   0x2d
    2309:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    230f:	nop
    2310:	endbr64 
    2314:	push   0x2e
    2319:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    231f:	nop
    2320:	endbr64 
    2324:	push   0x2f
    2329:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    232f:	nop
    2330:	endbr64 
    2334:	push   0x30
    2339:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    233f:	nop
    2340:	endbr64 
    2344:	push   0x31
    2349:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    234f:	nop
    2350:	endbr64 
    2354:	push   0x32
    2359:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    235f:	nop
    2360:	endbr64 
    2364:	push   0x33
    2369:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    236f:	nop
    2370:	endbr64 
    2374:	push   0x34
    2379:	bnd jmp 2020 <__cxa_finalize@plt-0x360>
    237f:	nop

Disassembly of section .plt.got:

0000000000002380 <__cxa_finalize@plt>:
    2380:	endbr64 
    2384:	bnd jmp QWORD PTR [rip+0xec5d]        # 10fe8 <__cxa_finalize@GLIBC_2.2.5>
    238b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

0000000000002390 <free@plt>:
    2390:	endbr64 
    2394:	bnd jmp QWORD PTR [rip+0xea85]        # 10e20 <free@GLIBC_2.2.5>
    239b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000023a0 <abort@plt>:
    23a0:	endbr64 
    23a4:	bnd jmp QWORD PTR [rip+0xea7d]        # 10e28 <abort@GLIBC_2.2.5>
    23ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000023b0 <__errno_location@plt>:
    23b0:	endbr64 
    23b4:	bnd jmp QWORD PTR [rip+0xea75]        # 10e30 <__errno_location@GLIBC_2.2.5>
    23bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000023c0 <strncmp@plt>:
    23c0:	endbr64 
    23c4:	bnd jmp QWORD PTR [rip+0xea6d]        # 10e38 <strncmp@GLIBC_2.2.5>
    23cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000023d0 <_exit@plt>:
    23d0:	endbr64 
    23d4:	bnd jmp QWORD PTR [rip+0xea65]        # 10e40 <_exit@GLIBC_2.2.5>
    23db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000023e0 <__fpending@plt>:
    23e0:	endbr64 
    23e4:	bnd jmp QWORD PTR [rip+0xea5d]        # 10e48 <__fpending@GLIBC_2.2.5>
    23eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000023f0 <fcntl@plt>:
    23f0:	endbr64 
    23f4:	bnd jmp QWORD PTR [rip+0xea55]        # 10e50 <fcntl@GLIBC_2.2.5>
    23fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002400 <fread_unlocked@plt>:
    2400:	endbr64 
    2404:	bnd jmp QWORD PTR [rip+0xea4d]        # 10e58 <fread_unlocked@GLIBC_2.2.5>
    240b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002410 <textdomain@plt>:
    2410:	endbr64 
    2414:	bnd jmp QWORD PTR [rip+0xea45]        # 10e60 <textdomain@GLIBC_2.2.5>
    241b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002420 <fclose@plt>:
    2420:	endbr64 
    2424:	bnd jmp QWORD PTR [rip+0xea3d]        # 10e68 <fclose@GLIBC_2.2.5>
    242b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002430 <bindtextdomain@plt>:
    2430:	endbr64 
    2434:	bnd jmp QWORD PTR [rip+0xea35]        # 10e70 <bindtextdomain@GLIBC_2.2.5>
    243b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002440 <dcgettext@plt>:
    2440:	endbr64 
    2444:	bnd jmp QWORD PTR [rip+0xea2d]        # 10e78 <dcgettext@GLIBC_2.2.5>
    244b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002450 <__ctype_get_mb_cur_max@plt>:
    2450:	endbr64 
    2454:	bnd jmp QWORD PTR [rip+0xea25]        # 10e80 <__ctype_get_mb_cur_max@GLIBC_2.2.5>
    245b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002460 <strlen@plt>:
    2460:	endbr64 
    2464:	bnd jmp QWORD PTR [rip+0xea1d]        # 10e88 <strlen@GLIBC_2.2.5>
    246b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002470 <__stack_chk_fail@plt>:
    2470:	endbr64 
    2474:	bnd jmp QWORD PTR [rip+0xea15]        # 10e90 <__stack_chk_fail@GLIBC_2.4>
    247b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002480 <getopt_long@plt>:
    2480:	endbr64 
    2484:	bnd jmp QWORD PTR [rip+0xea0d]        # 10e98 <getopt_long@GLIBC_2.2.5>
    248b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002490 <mbrtowc@plt>:
    2490:	endbr64 
    2494:	bnd jmp QWORD PTR [rip+0xea05]        # 10ea0 <mbrtowc@GLIBC_2.2.5>
    249b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024a0 <strchr@plt>:
    24a0:	endbr64 
    24a4:	bnd jmp QWORD PTR [rip+0xe9fd]        # 10ea8 <strchr@GLIBC_2.2.5>
    24ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024b0 <__overflow@plt>:
    24b0:	endbr64 
    24b4:	bnd jmp QWORD PTR [rip+0xe9f5]        # 10eb0 <__overflow@GLIBC_2.2.5>
    24bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024c0 <strrchr@plt>:
    24c0:	endbr64 
    24c4:	bnd jmp QWORD PTR [rip+0xe9ed]        # 10eb8 <strrchr@GLIBC_2.2.5>
    24cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024d0 <lseek@plt>:
    24d0:	endbr64 
    24d4:	bnd jmp QWORD PTR [rip+0xe9e5]        # 10ec0 <lseek@GLIBC_2.2.5>
    24db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024e0 <memset@plt>:
    24e0:	endbr64 
    24e4:	bnd jmp QWORD PTR [rip+0xe9dd]        # 10ec8 <memset@GLIBC_2.2.5>
    24eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024f0 <close@plt>:
    24f0:	endbr64 
    24f4:	bnd jmp QWORD PTR [rip+0xe9d5]        # 10ed0 <close@GLIBC_2.2.5>
    24fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002500 <posix_fadvise@plt>:
    2500:	endbr64 
    2504:	bnd jmp QWORD PTR [rip+0xe9cd]        # 10ed8 <posix_fadvise@GLIBC_2.2.5>
    250b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002510 <memcmp@plt>:
    2510:	endbr64 
    2514:	bnd jmp QWORD PTR [rip+0xe9c5]        # 10ee0 <memcmp@GLIBC_2.2.5>
    251b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002520 <fputs_unlocked@plt>:
    2520:	endbr64 
    2524:	bnd jmp QWORD PTR [rip+0xe9bd]        # 10ee8 <fputs_unlocked@GLIBC_2.2.5>
    252b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002530 <calloc@plt>:
    2530:	endbr64 
    2534:	bnd jmp QWORD PTR [rip+0xe9b5]        # 10ef0 <calloc@GLIBC_2.2.5>
    253b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002540 <__getdelim@plt>:
    2540:	endbr64 
    2544:	bnd jmp QWORD PTR [rip+0xe9ad]        # 10ef8 <__getdelim@GLIBC_2.2.5>
    254b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002550 <strcmp@plt>:
    2550:	endbr64 
    2554:	bnd jmp QWORD PTR [rip+0xe9a5]        # 10f00 <strcmp@GLIBC_2.2.5>
    255b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002560 <memcpy@plt>:
    2560:	endbr64 
    2564:	bnd jmp QWORD PTR [rip+0xe99d]        # 10f08 <memcpy@GLIBC_2.14>
    256b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002570 <fileno@plt>:
    2570:	endbr64 
    2574:	bnd jmp QWORD PTR [rip+0xe995]        # 10f10 <fileno@GLIBC_2.2.5>
    257b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002580 <malloc@plt>:
    2580:	endbr64 
    2584:	bnd jmp QWORD PTR [rip+0xe98d]        # 10f18 <malloc@GLIBC_2.2.5>
    258b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002590 <fflush@plt>:
    2590:	endbr64 
    2594:	bnd jmp QWORD PTR [rip+0xe985]        # 10f20 <fflush@GLIBC_2.2.5>
    259b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000025a0 <nl_langinfo@plt>:
    25a0:	endbr64 
    25a4:	bnd jmp QWORD PTR [rip+0xe97d]        # 10f28 <nl_langinfo@GLIBC_2.2.5>
    25ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000025b0 <__freading@plt>:
    25b0:	endbr64 
    25b4:	bnd jmp QWORD PTR [rip+0xe975]        # 10f30 <__freading@GLIBC_2.2.5>
    25bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000025c0 <fwrite_unlocked@plt>:
    25c0:	endbr64 
    25c4:	bnd jmp QWORD PTR [rip+0xe96d]        # 10f38 <fwrite_unlocked@GLIBC_2.2.5>
    25cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000025d0 <realloc@plt>:
    25d0:	endbr64 
    25d4:	bnd jmp QWORD PTR [rip+0xe965]        # 10f40 <realloc@GLIBC_2.2.5>
    25db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000025e0 <fdopen@plt>:
    25e0:	endbr64 
    25e4:	bnd jmp QWORD PTR [rip+0xe95d]        # 10f48 <fdopen@GLIBC_2.2.5>
    25eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000025f0 <setlocale@plt>:
    25f0:	endbr64 
    25f4:	bnd jmp QWORD PTR [rip+0xe955]        # 10f50 <setlocale@GLIBC_2.2.5>
    25fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002600 <__printf_chk@plt>:
    2600:	endbr64 
    2604:	bnd jmp QWORD PTR [rip+0xe94d]        # 10f58 <__printf_chk@GLIBC_2.3.4>
    260b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002610 <setvbuf@plt>:
    2610:	endbr64 
    2614:	bnd jmp QWORD PTR [rip+0xe945]        # 10f60 <setvbuf@GLIBC_2.2.5>
    261b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002620 <error@plt>:
    2620:	endbr64 
    2624:	bnd jmp QWORD PTR [rip+0xe93d]        # 10f68 <error@GLIBC_2.2.5>
    262b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002630 <fseeko@plt>:
    2630:	endbr64 
    2634:	bnd jmp QWORD PTR [rip+0xe935]        # 10f70 <fseeko@GLIBC_2.2.5>
    263b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002640 <fopen@plt>:
    2640:	endbr64 
    2644:	bnd jmp QWORD PTR [rip+0xe92d]        # 10f78 <fopen@GLIBC_2.2.5>
    264b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002650 <dcngettext@plt>:
    2650:	endbr64 
    2654:	bnd jmp QWORD PTR [rip+0xe925]        # 10f80 <dcngettext@GLIBC_2.2.5>
    265b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002660 <__cxa_atexit@plt>:
    2660:	endbr64 
    2664:	bnd jmp QWORD PTR [rip+0xe91d]        # 10f88 <__cxa_atexit@GLIBC_2.2.5>
    266b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002670 <exit@plt>:
    2670:	endbr64 
    2674:	bnd jmp QWORD PTR [rip+0xe915]        # 10f90 <exit@GLIBC_2.2.5>
    267b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002680 <fwrite@plt>:
    2680:	endbr64 
    2684:	bnd jmp QWORD PTR [rip+0xe90d]        # 10f98 <fwrite@GLIBC_2.2.5>
    268b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002690 <__fprintf_chk@plt>:
    2690:	endbr64 
    2694:	bnd jmp QWORD PTR [rip+0xe905]        # 10fa0 <__fprintf_chk@GLIBC_2.3.4>
    269b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000026a0 <mbsinit@plt>:
    26a0:	endbr64 
    26a4:	bnd jmp QWORD PTR [rip+0xe8fd]        # 10fa8 <mbsinit@GLIBC_2.2.5>
    26ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000026b0 <iswprint@plt>:
    26b0:	endbr64 
    26b4:	bnd jmp QWORD PTR [rip+0xe8f5]        # 10fb0 <iswprint@GLIBC_2.2.5>
    26bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000026c0 <__ctype_tolower_loc@plt>:
    26c0:	endbr64 
    26c4:	bnd jmp QWORD PTR [rip+0xe8ed]        # 10fb8 <__ctype_tolower_loc@GLIBC_2.3>
    26cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000026d0 <__ctype_b_loc@plt>:
    26d0:	endbr64 
    26d4:	bnd jmp QWORD PTR [rip+0xe8e5]        # 10fc0 <__ctype_b_loc@GLIBC_2.3>
    26db:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000000026e0 <.text>:
    26e0:	call   23a0 <abort@plt>
    26e5:	call   23a0 <abort@plt>
    26ea:	call   23a0 <abort@plt>
    26ef:	call   23a0 <abort@plt>
    26f4:	call   23a0 <abort@plt>
    26f9:	call   23a0 <abort@plt>
    26fe:	call   23a0 <abort@plt>
    2703:	call   23a0 <abort@plt>
    2708:	nop    DWORD PTR [rax+rax*1+0x0]
    2710:	endbr64 
    2714:	push   r15
    2716:	xor    r15d,r15d
    2719:	push   r14
    271b:	push   r13
    271d:	lea    r13,[rip+0xa48c]        # cbb0 <_IO_stdin_used@@Base+0xbb0>
    2724:	push   r12
    2726:	mov    r12d,edi
    2729:	push   rbp
    272a:	mov    ebp,0xffffffff
    272f:	push   rbx
    2730:	mov    rbx,rsi
    2733:	sub    rsp,0x128
    273a:	mov    rdi,QWORD PTR [rsi]
    273d:	mov    rax,QWORD PTR fs:0x28
    2746:	mov    QWORD PTR [rsp+0x118],rax
    274e:	xor    eax,eax
    2750:	call   89e0 <__ctype_b_loc@plt+0x6310>
    2755:	lea    rsi,[rip+0xad85]        # d4e1 <quoting_style_vals@@Base+0x81>
    275c:	mov    edi,0x6
    2761:	call   25f0 <setlocale@plt>
    2766:	lea    rsi,[rip+0x9937]        # c0a4 <_IO_stdin_used@@Base+0xa4>
    276d:	lea    rdi,[rip+0x9922]        # c096 <_IO_stdin_used@@Base+0x96>
    2774:	call   2430 <bindtextdomain@plt>
    2779:	lea    rdi,[rip+0x9916]        # c096 <_IO_stdin_used@@Base+0x96>
    2780:	call   2410 <textdomain@plt>
    2785:	lea    rdi,[rip+0x1864]        # 3ff0 <__ctype_b_loc@plt+0x1920>
    278c:	call   b590 <__ctype_b_loc@plt+0x8ec0>
    2791:	mov    rdi,QWORD PTR [rip+0xe910]        # 110a8 <stdout@@GLIBC_2.2.5>
    2798:	xor    ecx,ecx
    279a:	xor    esi,esi
    279c:	mov    edx,0x1
    27a1:	call   2610 <setvbuf@plt>
    27a6:	mov    BYTE PTR [rsp+0x58],0x0
    27ab:	xor    r8d,r8d
    27ae:	lea    rcx,[rip+0xe26b]        # 10a20 <version_etc_copyright@@Base+0x3260>
    27b5:	mov    rsi,rbx
    27b8:	mov    edi,r12d
    27bb:	lea    rdx,[rip+0x991d]        # c0df <_IO_stdin_used@@Base+0xdf>
    27c2:	call   2480 <getopt_long@plt>
    27c7:	cmp    eax,0xffffffff
    27ca:	je     28eb <__ctype_b_loc@plt+0x21b>
    27d0:	cmp    eax,0x84
    27d5:	jg     29af <__ctype_b_loc@plt+0x2df>
    27db:	cmp    eax,0x61
    27de:	jle    2890 <__ctype_b_loc@plt+0x1c0>
    27e4:	sub    eax,0x62
    27e7:	cmp    eax,0x22
    27ea:	ja     29af <__ctype_b_loc@plt+0x2df>
    27f0:	movsxd rax,DWORD PTR [r13+rax*4+0x0]
    27f5:	add    rax,r13
    27f8:	notrack jmp rax
    27fb:	xor    ebp,ebp
    27fd:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    27ff:	mov    r15d,0x1
    2805:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    2807:	mov    ebp,0x1
    280c:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    280e:	mov    BYTE PTR [rsp+0x58],0x1
    2813:	mov    ebp,0x1
    2818:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    281a:	mov    BYTE PTR [rip+0xe8cf],0x1        # 110f0 <stderr@@GLIBC_2.2.5+0x10>
    2821:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    2823:	mov    BYTE PTR [rip+0xe8ca],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    282a:	mov    BYTE PTR [rip+0xe8c2],0x0        # 110f3 <stderr@@GLIBC_2.2.5+0x13>
    2831:	mov    BYTE PTR [rip+0xe8b9],0x1        # 110f1 <stderr@@GLIBC_2.2.5+0x11>
    2838:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    283d:	mov    BYTE PTR [rip+0xe8b0],0x1        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    2844:	mov    BYTE PTR [rip+0xe8a8],0x0        # 110f3 <stderr@@GLIBC_2.2.5+0x13>
    284b:	mov    BYTE PTR [rip+0xe89f],0x0        # 110f1 <stderr@@GLIBC_2.2.5+0x11>
    2852:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    2857:	mov    BYTE PTR [rip+0xe894],0x1        # 110f2 <stderr@@GLIBC_2.2.5+0x12>
    285e:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    2863:	mov    BYTE PTR [rip+0xe7a6],0x0        # 11010 <quoting_style_args@@Base+0x450>
    286a:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    286f:	mov    BYTE PTR [rip+0xe87e],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    2876:	mov    BYTE PTR [rip+0xe876],0x1        # 110f3 <stderr@@GLIBC_2.2.5+0x13>
    287d:	mov    BYTE PTR [rip+0xe86d],0x0        # 110f1 <stderr@@GLIBC_2.2.5+0x11>
    2884:	jmp    27ab <__ctype_b_loc@plt+0xdb>
    2889:	nop    DWORD PTR [rax+0x0]
    2890:	cmp    eax,0xffffff7d
    2895:	jne    28d9 <__ctype_b_loc@plt+0x209>
    2897:	lea    rax,[rip+0x9834]        # c0d2 <_IO_stdin_used@@Base+0xd2>
    289e:	push   0x0
    28a0:	mov    rdi,QWORD PTR [rip+0xe801]        # 110a8 <stdout@@GLIBC_2.2.5>
    28a7:	lea    r9,[rip+0x9808]        # c0b6 <_IO_stdin_used@@Base+0xb6>
    28ae:	push   rax
    28af:	mov    rcx,QWORD PTR [rip+0xe762]        # 11018 <Version@@Base>
    28b6:	xor    eax,eax
    28b8:	lea    r8,[rip+0x9804]        # c0c3 <_IO_stdin_used@@Base+0xc3>
    28bf:	lea    rdx,[rip+0x97cc]        # c092 <_IO_stdin_used@@Base+0x92>
    28c6:	lea    rsi,[rip+0x973d]        # c00a <_IO_stdin_used@@Base+0xa>
    28cd:	call   ac90 <__ctype_b_loc@plt+0x85c0>
    28d2:	xor    edi,edi
    28d4:	call   2670 <exit@plt>
    28d9:	cmp    eax,0xffffff7e
    28de:	jne    29af <__ctype_b_loc@plt+0x2df>
    28e4:	xor    edi,edi
    28e6:	call   3b70 <__ctype_b_loc@plt+0x14a0>
    28eb:	mov    QWORD PTR [rip+0xe80a],0x82        # 11100 <stderr@@GLIBC_2.2.5+0x20>
    28f6:	test   ebp,ebp
    28f8:	mov    QWORD PTR [rip+0xe7f5],0x80        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    2903:	sete   al
    2906:	test   BYTE PTR [rsp+0x58],al
    290a:	jne    36e0 <__ctype_b_loc@plt+0x1010>
    2910:	cmp    BYTE PTR [rip+0xe6f9],0xa        # 11010 <quoting_style_args@@Base+0x450>
    2917:	je     296d <__ctype_b_loc@plt+0x29d>
    2919:	mov    edx,0x5
    291e:	lea    rsi,[rip+0x9ee3]        # c808 <_IO_stdin_used@@Base+0x808>
    2925:	test   r15b,r15b
    2928:	jne    299a <__ctype_b_loc@plt+0x2ca>
    292a:	cmp    BYTE PTR [rip+0xe7c1],0x0        # 110f2 <stderr@@GLIBC_2.2.5+0x12>
    2931:	jne    3718 <__ctype_b_loc@plt+0x1048>
    2937:	cmp    BYTE PTR [rip+0xe7b6],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    293e:	jne    3707 <__ctype_b_loc@plt+0x1037>
    2944:	cmp    BYTE PTR [rip+0xe7a8],0x0        # 110f3 <stderr@@GLIBC_2.2.5+0x13>
    294b:	jne    3543 <__ctype_b_loc@plt+0xe73>
    2951:	cmp    BYTE PTR [rip+0xe799],0x1        # 110f1 <stderr@@GLIBC_2.2.5+0x11>
    2958:	jne    29d8 <__ctype_b_loc@plt+0x308>
    295a:	mov    edx,0x5
    295f:	lea    rsi,[rip+0xa03a]        # c9a0 <_IO_stdin_used@@Base+0x9a0>
    2966:	test   r15b,r15b
    2969:	jne    29d8 <__ctype_b_loc@plt+0x308>
    296b:	jmp    299a <__ctype_b_loc@plt+0x2ca>
    296d:	test   r15b,r15b
    2970:	je     2985 <__ctype_b_loc@plt+0x2b5>
    2972:	cmp    BYTE PTR [rsp+0x58],0x0
    2977:	mov    edx,0x5
    297c:	lea    rsi,[rip+0x9ec5]        # c848 <_IO_stdin_used@@Base+0x848>
    2983:	jne    299a <__ctype_b_loc@plt+0x2ca>
    2985:	test   ebp,ebp
    2987:	js     29b9 <__ctype_b_loc@plt+0x2e9>
    2989:	mov    edx,0x5
    298e:	lea    rsi,[rip+0x9ef3]        # c888 <_IO_stdin_used@@Base+0x888>
    2995:	test   r15b,r15b
    2998:	je     29b9 <__ctype_b_loc@plt+0x2e9>
    299a:	xor    edi,edi
    299c:	call   2440 <dcgettext@plt>
    29a1:	xor    esi,esi
    29a3:	xor    edi,edi
    29a5:	mov    rdx,rax
    29a8:	xor    eax,eax
    29aa:	call   2620 <error@plt>
    29af:	mov    edi,0x1
    29b4:	call   3b70 <__ctype_b_loc@plt+0x14a0>
    29b9:	cmp    BYTE PTR [rip+0xe732],0x0        # 110f2 <stderr@@GLIBC_2.2.5+0x12>
    29c0:	je     36f1 <__ctype_b_loc@plt+0x1021>
    29c6:	test   r15b,r15b
    29c9:	je     3718 <__ctype_b_loc@plt+0x1048>
    29cf:	cmp    BYTE PTR [rip+0xe71d],0x0        # 110f3 <stderr@@GLIBC_2.2.5+0x13>
    29d6:	jne    29f2 <__ctype_b_loc@plt+0x322>
    29d8:	cmp    BYTE PTR [rip+0xe711],0x0        # 110f0 <stderr@@GLIBC_2.2.5+0x10>
    29df:	je     29f2 <__ctype_b_loc@plt+0x322>
    29e1:	mov    edx,0x5
    29e6:	lea    rsi,[rip+0x9ff3]        # c9e0 <_IO_stdin_used@@Base+0x9e0>
    29ed:	test   r15b,r15b
    29f0:	je     299a <__ctype_b_loc@plt+0x2ca>
    29f2:	movsxd rax,r12d
    29f5:	lea    rax,[rbx+rax*8]
    29f9:	mov    QWORD PTR [rsp+0x48],rax
    29fe:	movsxd rax,DWORD PTR [rip+0xe6b3]        # 110b8 <optind@@GLIBC_2.2.5>
    2a05:	cmp    eax,r12d
    2a08:	jne    2a22 <__ctype_b_loc@plt+0x352>
    2a0a:	mov    rdi,QWORD PTR [rsp+0x48]
    2a0f:	lea    rsi,[rip+0x96cf]        # c0e5 <_IO_stdin_used@@Base+0xe5>
    2a16:	mov    QWORD PTR [rdi],rsi
    2a19:	add    rdi,0x8
    2a1d:	mov    QWORD PTR [rsp+0x48],rdi
    2a22:	lea    rax,[rbx+rax*8]
    2a26:	mov    QWORD PTR [rsp+0x10],rax
    2a2b:	cmp    QWORD PTR [rsp+0x48],rax
    2a30:	jbe    365a <__ctype_b_loc@plt+0xf8a>
    2a36:	sub    ebp,0x1
    2a39:	mov    edx,0x2a
    2a3e:	mov    eax,0x20
    2a43:	mov    BYTE PTR [rsp+0x59],0x1
    2a48:	cmove  eax,edx
    2a4b:	mov    BYTE PTR [rsp+0xf],r15b
    2a50:	lea    r13,[rsp+0x78]
    2a55:	mov    DWORD PTR [rsp+0x5c],eax
    2a59:	mov    BYTE PTR [rsp+0x5b],al
    2a5d:	nop    DWORD PTR [rax]
    2a60:	mov    rax,QWORD PTR [rsp+0x10]
    2a65:	cmp    BYTE PTR [rsp+0xf],0x0
    2a6a:	mov    rdi,QWORD PTR [rax]
    2a6d:	mov    QWORD PTR [rsp+0x18],rdi
    2a72:	je     2fe7 <__ctype_b_loc@plt+0x917>
    2a78:	lea    rsi,[rip+0x9666]        # c0e5 <_IO_stdin_used@@Base+0xe5>
    2a7f:	call   2550 <strcmp@plt>
    2a84:	mov    DWORD PTR [rsp+0x2c],eax
    2a88:	test   eax,eax
    2a8a:	jne    312b <__ctype_b_loc@plt+0xa5b>
    2a90:	mov    edx,0x5
    2a95:	lea    rsi,[rip+0x964b]        # c0e7 <_IO_stdin_used@@Base+0xe7>
    2a9c:	xor    edi,edi
    2a9e:	mov    BYTE PTR [rip+0xe663],0x1        # 11108 <stderr@@GLIBC_2.2.5+0x28>
    2aa5:	call   2440 <dcgettext@plt>
    2aaa:	mov    r12,QWORD PTR [rip+0xe5ff]        # 110b0 <stdin@@GLIBC_2.2.5>
    2ab1:	mov    QWORD PTR [rsp+0x18],rax
    2ab6:	mov    BYTE PTR [rsp+0x5a],0x0
    2abb:	mov    ebx,0x1
    2ac0:	lea    r14,[rsp+0x70]
    2ac5:	mov    QWORD PTR [rsp+0x70],0x0
    2ace:	mov    QWORD PTR [rsp+0x78],0x0
    2ad7:	mov    BYTE PTR [rsp+0x28],0x0
    2adc:	mov    QWORD PTR [rsp+0x50],0x0
    2ae5:	mov    QWORD PTR [rsp+0x30],0x0
    2aee:	mov    QWORD PTR [rsp],0x0
    2af6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    2b00:	mov    rcx,r12
    2b03:	mov    edx,0xa
    2b08:	mov    rsi,r13
    2b0b:	mov    rdi,r14
    2b0e:	call   2540 <__getdelim@plt>
    2b13:	mov    r15,rax
    2b16:	test   rax,rax
    2b19:	jle    2de9 <__ctype_b_loc@plt+0x719>
    2b1f:	mov    rbp,QWORD PTR [rsp+0x70]
    2b24:	movzx  ecx,BYTE PTR [rbp+0x0]
    2b28:	cmp    cl,0x23
    2b2b:	je     2bd9 <__ctype_b_loc@plt+0x509>
    2b31:	lea    rax,[rax-0x1]
    2b35:	lea    rdx,[rbp+rax*1+0x0]
    2b3a:	cmp    BYTE PTR [rdx],0xa
    2b3d:	jne    2b4e <__ctype_b_loc@plt+0x47e>
    2b3f:	mov    BYTE PTR [rdx],0x0
    2b42:	mov    rbp,QWORD PTR [rsp+0x70]
    2b47:	mov    r15,rax
    2b4a:	movzx  ecx,BYTE PTR [rbp+0x0]
    2b4e:	xor    eax,eax
    2b50:	cmp    cl,0x9
    2b53:	je     2b60 <__ctype_b_loc@plt+0x490>
    2b55:	cmp    cl,0x20
    2b58:	jne    2b73 <__ctype_b_loc@plt+0x4a3>
    2b5a:	nop    WORD PTR [rax+rax*1+0x0]
    2b60:	add    rax,0x1
    2b64:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
    2b69:	cmp    cl,0x20
    2b6c:	je     2b60 <__ctype_b_loc@plt+0x490>
    2b6e:	cmp    cl,0x9
    2b71:	je     2b60 <__ctype_b_loc@plt+0x490>
    2b73:	xor    edx,edx
    2b75:	cmp    cl,0x5c
    2b78:	jne    2b83 <__ctype_b_loc@plt+0x4b3>
    2b7a:	movzx  edx,BYTE PTR [rsp+0xf]
    2b7f:	add    rax,0x1
    2b83:	lea    r8,[rbp+rax*1+0x0]
    2b88:	mov    ecx,0x6
    2b8d:	lea    rdi,[rip+0x9480]        # c014 <_IO_stdin_used@@Base+0x14>
    2b94:	mov    rsi,r8
    2b97:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    2b99:	seta   cl
    2b9c:	sbb    cl,0x0
    2b9f:	test   cl,cl
    2ba1:	jne    2c30 <__ctype_b_loc@plt+0x560>
    2ba7:	movzx  ecx,BYTE PTR [rbp+rax*1+0x6]
    2bac:	lea    rsi,[rax+0x6]
    2bb0:	cmp    cl,0x20
    2bb3:	jne    2bbe <__ctype_b_loc@plt+0x4ee>
    2bb5:	movzx  ecx,BYTE PTR [rbp+rax*1+0x7]
    2bba:	lea    rsi,[rax+0x7]
    2bbe:	cmp    cl,0x28
    2bc1:	je     3063 <__ctype_b_loc@plt+0x993>
    2bc7:	add    QWORD PTR [rsp],0x1
    2bcc:	cmp    BYTE PTR [rip+0xe520],0x0        # 110f3 <stderr@@GLIBC_2.2.5+0x13>
    2bd3:	jne    2e90 <__ctype_b_loc@plt+0x7c0>
    2bd9:	test   BYTE PTR [r12],0x30
    2bde:	jne    2de9 <__ctype_b_loc@plt+0x719>
    2be4:	add    rbx,0x1
    2be8:	jne    2b00 <__ctype_b_loc@plt+0x430>
    2bee:	mov    rdx,QWORD PTR [rsp+0x18]
    2bf3:	mov    esi,0x3
    2bf8:	xor    edi,edi
    2bfa:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    2bff:	mov    edx,0x5
    2c04:	lea    rsi,[rip+0x94eb]        # c0f6 <_IO_stdin_used@@Base+0xf6>
    2c0b:	xor    edi,edi
    2c0d:	mov    r12,rax
    2c10:	call   2440 <dcgettext@plt>
    2c15:	mov    rcx,r12
    2c18:	xor    esi,esi
    2c1a:	mov    edi,0x1
    2c1f:	mov    rdx,rax
    2c22:	xor    eax,eax
    2c24:	call   2620 <error@plt>
    2c29:	nop    DWORD PTR [rax+0x0]
    2c30:	mov    rsi,r15
    2c33:	xor    ecx,ecx
    2c35:	sub    rsi,rax
    2c38:	cmp    BYTE PTR [r8],0x5c
    2c3c:	sete   cl
    2c3f:	add    rcx,QWORD PTR [rip+0xe4ba]        # 11100 <stderr@@GLIBC_2.2.5+0x20>
    2c46:	cmp    rsi,rcx
    2c49:	jb     2bc7 <__ctype_b_loc@plt+0x4f7>
    2c4f:	add    rax,QWORD PTR [rip+0xe4a2]        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    2c56:	lea    rsi,[rbp+rax*1+0x0]
    2c5b:	mov    rcx,rax
    2c5e:	movzx  eax,BYTE PTR [rsi]
    2c61:	cmp    al,0x20
    2c63:	je     2c6d <__ctype_b_loc@plt+0x59d>
    2c65:	cmp    al,0x9
    2c67:	jne    2bc7 <__ctype_b_loc@plt+0x4f7>
    2c6d:	mov    BYTE PTR [rsi],0x0
    2c70:	mov    rdi,r8
    2c73:	mov    QWORD PTR [rsp+0x40],rcx
    2c78:	mov    BYTE PTR [rsp+0x38],dl
    2c7c:	mov    QWORD PTR [rsp+0x20],r8
    2c81:	call   38a0 <__ctype_b_loc@plt+0x11d0>
    2c86:	test   al,al
    2c88:	je     2bc7 <__ctype_b_loc@plt+0x4f7>
    2c8e:	mov    rcx,QWORD PTR [rsp+0x40]
    2c93:	mov    rdi,r15
    2c96:	mov    esi,DWORD PTR [rip+0xe378]        # 11014 <quoting_style_args@@Base+0x454>
    2c9c:	mov    r8,QWORD PTR [rsp+0x20]
    2ca1:	movzx  edx,BYTE PTR [rsp+0x38]
    2ca6:	lea    rax,[rcx+0x1]
    2caa:	sub    rdi,rax
    2cad:	cmp    rdi,0x1
    2cb1:	je     2ccc <__ctype_b_loc@plt+0x5fc>
    2cb3:	movzx  edi,BYTE PTR [rbp+rcx*1+0x1]
    2cb8:	cmp    dil,0x20
    2cbc:	je     317d <__ctype_b_loc@plt+0xaad>
    2cc2:	cmp    dil,0x2a
    2cc6:	je     317d <__ctype_b_loc@plt+0xaad>
    2ccc:	test   esi,esi
    2cce:	je     2bc7 <__ctype_b_loc@plt+0x4f7>
    2cd4:	mov    DWORD PTR [rip+0xe336],0x1        # 11014 <quoting_style_args@@Base+0x454>
    2cde:	add    rbp,rax
    2ce1:	test   dl,dl
    2ce3:	jne    3300 <__ctype_b_loc@plt+0xc30>
    2ce9:	mov    eax,DWORD PTR [rsp+0x2c]
    2ced:	test   eax,eax
    2cef:	jne    2d08 <__ctype_b_loc@plt+0x638>
    2cf1:	cmp    BYTE PTR [rbp+0x0],0x2d
    2cf5:	jne    2d08 <__ctype_b_loc@plt+0x638>
    2cf7:	cmp    BYTE PTR [rbp+0x1],0x0
    2cfb:	je     2bc7 <__ctype_b_loc@plt+0x4f7>
    2d01:	nop    DWORD PTR [rax+0x0]
    2d08:	cmp    BYTE PTR [rip+0xe3e5],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    2d0f:	mov    DWORD PTR [rsp+0x28],0x0
    2d17:	jne    2d3d <__ctype_b_loc@plt+0x66d>
    2d19:	mov    esi,0xa
    2d1e:	mov    rdi,rbp
    2d21:	mov    QWORD PTR [rsp+0x20],r8
    2d26:	call   24a0 <strchr@plt>
    2d2b:	mov    r8,QWORD PTR [rsp+0x20]
    2d30:	test   rax,rax
    2d33:	setne  al
    2d36:	movzx  eax,al
    2d39:	mov    DWORD PTR [rsp+0x28],eax
    2d3d:	lea    r15,[rsp+0xd0]
    2d45:	lea    rdx,[rsp+0x6f]
    2d4a:	mov    rdi,rbp
    2d4d:	mov    QWORD PTR [rsp+0x20],r8
    2d52:	mov    rsi,r15
    2d55:	call   39d0 <__ctype_b_loc@plt+0x1300>
    2d5a:	mov    r8,QWORD PTR [rsp+0x20]
    2d5f:	test   al,al
    2d61:	mov    r9d,eax
    2d64:	jne    2ee0 <__ctype_b_loc@plt+0x810>
    2d6a:	add    QWORD PTR [rsp+0x30],0x1
    2d70:	cmp    BYTE PTR [rip+0xe37d],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    2d77:	jne    2dd5 <__ctype_b_loc@plt+0x705>
    2d79:	cmp    DWORD PTR [rsp+0x28],0x0
    2d7e:	je     2da0 <__ctype_b_loc@plt+0x6d0>
    2d80:	mov    rdi,QWORD PTR [rip+0xe321]        # 110a8 <stdout@@GLIBC_2.2.5>
    2d87:	mov    rax,QWORD PTR [rdi+0x28]
    2d8b:	cmp    rax,QWORD PTR [rdi+0x30]
    2d8f:	jae    364b <__ctype_b_loc@plt+0xf7b>
    2d95:	lea    rdx,[rax+0x1]
    2d99:	mov    QWORD PTR [rdi+0x28],rdx
    2d9d:	mov    BYTE PTR [rax],0x5c
    2da0:	mov    esi,DWORD PTR [rsp+0x28]
    2da4:	mov    rdi,rbp
    2da7:	call   3900 <__ctype_b_loc@plt+0x1230>
    2dac:	mov    edx,0x5
    2db1:	lea    rsi,[rip+0x935a]        # c112 <_IO_stdin_used@@Base+0x112>
    2db8:	xor    edi,edi
    2dba:	call   2440 <dcgettext@plt>
    2dbf:	lea    rsi,[rip+0xa72b]        # d4f1 <quoting_style_vals@@Base+0x91>
    2dc6:	mov    edi,0x1
    2dcb:	mov    rdx,rax
    2dce:	xor    eax,eax
    2dd0:	call   2600 <__printf_chk@plt>
    2dd5:	movzx  eax,BYTE PTR [rsp+0xf]
    2dda:	mov    BYTE PTR [rsp+0x28],al
    2dde:	test   BYTE PTR [r12],0x30
    2de3:	je     2be4 <__ctype_b_loc@plt+0x514>
    2de9:	mov    rdi,QWORD PTR [rsp+0x70]
    2dee:	call   2390 <free@plt>
    2df3:	mov    ebx,DWORD PTR [r12]
    2df7:	and    ebx,0x20
    2dfa:	jne    3323 <__ctype_b_loc@plt+0xc53>
    2e00:	cmp    DWORD PTR [rsp+0x2c],0x0
    2e05:	jne    32a7 <__ctype_b_loc@plt+0xbd7>
    2e0b:	cmp    BYTE PTR [rsp+0x28],0x0
    2e10:	je     32bc <__ctype_b_loc@plt+0xbec>
    2e16:	cmp    BYTE PTR [rip+0xe2d7],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    2e1d:	jne    3199 <__ctype_b_loc@plt+0xac9>
    2e23:	cmp    QWORD PTR [rsp],0x0
    2e28:	jne    360c <__ctype_b_loc@plt+0xf3c>
    2e2e:	cmp    QWORD PTR [rsp+0x30],0x0
    2e34:	jne    35d3 <__ctype_b_loc@plt+0xf03>
    2e3a:	cmp    QWORD PTR [rsp+0x50],0x0
    2e40:	jne    359a <__ctype_b_loc@plt+0xeca>
    2e46:	cmp    BYTE PTR [rip+0xe2a5],0x0        # 110f2 <stderr@@GLIBC_2.2.5+0x12>
    2e4d:	je     3199 <__ctype_b_loc@plt+0xac9>
    2e53:	cmp    BYTE PTR [rsp+0x5a],0x0
    2e58:	je     355d <__ctype_b_loc@plt+0xe8d>
    2e5e:	mov    rax,QWORD PTR [rsp+0x30]
    2e63:	or     rax,QWORD PTR [rsp+0x50]
    2e68:	jne    2e81 <__ctype_b_loc@plt+0x7b1>
    2e6a:	movzx  eax,BYTE PTR [rip+0xe27f]        # 110f0 <stderr@@GLIBC_2.2.5+0x10>
    2e71:	xor    eax,0x1
    2e74:	cmp    QWORD PTR [rsp],0x0
    2e79:	sete   bl
    2e7c:	or     eax,ebx
    2e7e:	movzx  ebx,al
    2e81:	mov    eax,ebx
    2e83:	and    eax,0x1
    2e86:	and    BYTE PTR [rsp+0x59],al
    2e8a:	jmp    300c <__ctype_b_loc@plt+0x93c>
    2e8f:	nop
    2e90:	mov    rdx,QWORD PTR [rsp+0x18]
    2e95:	xor    edi,edi
    2e97:	mov    esi,0x3
    2e9c:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    2ea1:	xor    edi,edi
    2ea3:	mov    edx,0x5
    2ea8:	lea    rsi,[rip+0x9b71]        # ca20 <_IO_stdin_used@@Base+0xa20>
    2eaf:	mov    r15,rax
    2eb2:	call   2440 <dcgettext@plt>
    2eb7:	lea    r9,[rip+0x9156]        # c014 <_IO_stdin_used@@Base+0x14>
    2ebe:	xor    esi,esi
    2ec0:	xor    edi,edi
    2ec2:	mov    rdx,rax
    2ec5:	mov    r8,rbx
    2ec8:	mov    rcx,r15
    2ecb:	xor    eax,eax
    2ecd:	call   2620 <error@plt>
    2ed2:	jmp    2bd9 <__ctype_b_loc@plt+0x509>
    2ed7:	nop    WORD PTR [rax+rax*1+0x0]
    2ee0:	cmp    BYTE PTR [rip+0xe20b],0x0        # 110f2 <stderr@@GLIBC_2.2.5+0x12>
    2ee7:	je     2ef4 <__ctype_b_loc@plt+0x824>
    2ee9:	cmp    BYTE PTR [rsp+0x6f],0x0
    2eee:	jne    2dd5 <__ctype_b_loc@plt+0x705>
    2ef4:	mov    r10,QWORD PTR [rip+0xe1fd]        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    2efb:	mov    QWORD PTR [rsp+0x20],r8
    2f00:	shr    r10,1
    2f03:	je     3671 <__ctype_b_loc@plt+0xfa1>
    2f09:	mov    QWORD PTR [rsp+0x40],r10
    2f0e:	mov    BYTE PTR [rsp+0x38],r9b
    2f13:	call   26c0 <__ctype_tolower_loc@plt>
    2f18:	movzx  r9d,BYTE PTR [rsp+0x38]
    2f1e:	mov    r10,QWORD PTR [rsp+0x40]
    2f23:	xor    edx,edx
    2f25:	mov    rdi,QWORD PTR [rax]
    2f28:	mov    r8,QWORD PTR [rsp+0x20]
    2f2d:	jmp    2f50 <__ctype_b_loc@plt+0x880>
    2f2f:	nop
    2f30:	movzx  ecx,BYTE PTR [r8+rdx*2+0x1]
    2f36:	and    eax,0xf
    2f39:	movsx  eax,BYTE PTR [r11+rax*1]
    2f3e:	cmp    DWORD PTR [rdi+rcx*4],eax
    2f41:	jne    2f73 <__ctype_b_loc@plt+0x8a3>
    2f43:	add    rdx,0x1
    2f47:	cmp    r10,rdx
    2f4a:	je     3269 <__ctype_b_loc@plt+0xb99>
    2f50:	movzx  eax,BYTE PTR [r15+rdx*1]
    2f55:	movzx  esi,BYTE PTR [r8+rdx*2]
    2f5a:	lea    r11,[rip+0x9cdf]        # cc40 <_IO_stdin_used@@Base+0xc40>
    2f61:	mov    ecx,eax
    2f63:	shr    cl,0x4
    2f66:	and    ecx,0xf
    2f69:	movsx  ecx,BYTE PTR [r11+rcx*1]
    2f6e:	cmp    DWORD PTR [rdi+rsi*4],ecx
    2f71:	je     2f30 <__ctype_b_loc@plt+0x860>
    2f73:	add    QWORD PTR [rsp+0x50],0x1
    2f79:	cmp    BYTE PTR [rip+0xe174],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    2f80:	jne    2dd5 <__ctype_b_loc@plt+0x705>
    2f86:	cmp    DWORD PTR [rsp+0x28],0x0
    2f8b:	je     2fad <__ctype_b_loc@plt+0x8dd>
    2f8d:	mov    rdi,QWORD PTR [rip+0xe114]        # 110a8 <stdout@@GLIBC_2.2.5>
    2f94:	mov    rax,QWORD PTR [rdi+0x28]
    2f98:	cmp    rax,QWORD PTR [rdi+0x30]
    2f9c:	jae    3678 <__ctype_b_loc@plt+0xfa8>
    2fa2:	lea    rcx,[rax+0x1]
    2fa6:	mov    QWORD PTR [rdi+0x28],rcx
    2faa:	mov    BYTE PTR [rax],0x5c
    2fad:	mov    esi,DWORD PTR [rsp+0x28]
    2fb1:	mov    rdi,rbp
    2fb4:	mov    QWORD PTR [rsp+0x38],rdx
    2fb9:	mov    QWORD PTR [rsp+0x20],r10
    2fbe:	call   3900 <__ctype_b_loc@plt+0x1230>
    2fc3:	mov    r10,QWORD PTR [rsp+0x20]
    2fc8:	mov    rdx,QWORD PTR [rsp+0x38]
    2fcd:	cmp    r10,rdx
    2fd0:	je     3411 <__ctype_b_loc@plt+0xd41>
    2fd6:	mov    edx,0x5
    2fdb:	lea    rsi,[rip+0x9144]        # c126 <_IO_stdin_used@@Base+0x126>
    2fe2:	jmp    2db8 <__ctype_b_loc@plt+0x6e8>
    2fe7:	lea    rbx,[rsp+0x80]
    2fef:	mov    rdi,QWORD PTR [rsp+0x18]
    2ff4:	mov    rdx,r13
    2ff7:	mov    rsi,rbx
    2ffa:	call   39d0 <__ctype_b_loc@plt+0x1300>
    2fff:	test   al,al
    3001:	jne    31be <__ctype_b_loc@plt+0xaee>
    3007:	mov    BYTE PTR [rsp+0x59],0x0
    300c:	add    QWORD PTR [rsp+0x10],0x8
    3012:	mov    rax,QWORD PTR [rsp+0x10]
    3017:	cmp    QWORD PTR [rsp+0x48],rax
    301c:	ja     2a60 <__ctype_b_loc@plt+0x390>
    3022:	cmp    BYTE PTR [rip+0xe0df],0x0        # 11108 <stderr@@GLIBC_2.2.5+0x28>
    3029:	jne    3465 <__ctype_b_loc@plt+0xd95>
    302f:	movzx  eax,BYTE PTR [rsp+0x59]
    3034:	xor    eax,0x1
    3037:	mov    rbx,QWORD PTR [rsp+0x118]
    303f:	xor    rbx,QWORD PTR fs:0x28
    3048:	movzx  eax,al
    304b:	jne    36db <__ctype_b_loc@plt+0x100b>
    3051:	add    rsp,0x128
    3058:	pop    rbx
    3059:	pop    rbp
    305a:	pop    r12
    305c:	pop    r13
    305e:	pop    r14
    3060:	pop    r15
    3062:	ret    
    3063:	add    rsi,0x1
    3067:	sub    r15,rsi
    306a:	je     2bc7 <__ctype_b_loc@plt+0x4f7>
    3070:	add    rbp,rsi
    3073:	sub    r15,0x1
    3077:	jne    308a <__ctype_b_loc@plt+0x9ba>
    3079:	jmp    31a9 <__ctype_b_loc@plt+0xad9>
    307e:	xchg   ax,ax
    3080:	sub    r15,0x1
    3084:	je     31a9 <__ctype_b_loc@plt+0xad9>
    308a:	cmp    BYTE PTR [rbp+r15*1+0x0],0x29
    3090:	lea    r10,[rbp+r15*1+0x0]
    3095:	jne    3080 <__ctype_b_loc@plt+0x9b0>
    3097:	test   dl,dl
    3099:	jne    342f <__ctype_b_loc@plt+0xd5f>
    309f:	mov    BYTE PTR [r10],0x0
    30a3:	movzx  edx,BYTE PTR [rbp+r15*1+0x1]
    30a9:	lea    rax,[r15+0x1]
    30ad:	cmp    dl,0x9
    30b0:	je     30c0 <__ctype_b_loc@plt+0x9f0>
    30b2:	cmp    dl,0x20
    30b5:	jne    30d3 <__ctype_b_loc@plt+0xa03>
    30b7:	nop    WORD PTR [rax+rax*1+0x0]
    30c0:	add    rax,0x1
    30c4:	movzx  edx,BYTE PTR [rbp+rax*1+0x0]
    30c9:	cmp    dl,0x20
    30cc:	je     30c0 <__ctype_b_loc@plt+0x9f0>
    30ce:	cmp    dl,0x9
    30d1:	je     30c0 <__ctype_b_loc@plt+0x9f0>
    30d3:	cmp    dl,0x3d
    30d6:	jne    2bc7 <__ctype_b_loc@plt+0x4f7>
    30dc:	lea    r8,[rbp+rax*1+0x1]
    30e1:	movzx  edx,BYTE PTR [r8]
    30e5:	cmp    dl,0x20
    30e8:	je     30ef <__ctype_b_loc@plt+0xa1f>
    30ea:	cmp    dl,0x9
    30ed:	jne    310c <__ctype_b_loc@plt+0xa3c>
    30ef:	lea    rax,[rbp+rax*1+0x2]
    30f4:	nop    DWORD PTR [rax+0x0]
    30f8:	movzx  edx,BYTE PTR [rax]
    30fb:	mov    r8,rax
    30fe:	add    rax,0x1
    3102:	cmp    dl,0x20
    3105:	je     30f8 <__ctype_b_loc@plt+0xa28>
    3107:	cmp    dl,0x9
    310a:	je     30f8 <__ctype_b_loc@plt+0xa28>
    310c:	mov    rdi,r8
    310f:	mov    QWORD PTR [rsp+0x20],r8
    3114:	call   38a0 <__ctype_b_loc@plt+0x11d0>
    3119:	mov    r8,QWORD PTR [rsp+0x20]
    311e:	test   al,al
    3120:	jne    2ce9 <__ctype_b_loc@plt+0x619>
    3126:	jmp    2bc7 <__ctype_b_loc@plt+0x4f7>
    312b:	mov    rdi,QWORD PTR [rsp+0x18]
    3130:	lea    rsi,[rip+0x8f8a]        # c0c1 <_IO_stdin_used@@Base+0xc1>
    3137:	call   8940 <__ctype_b_loc@plt+0x6270>
    313c:	mov    r12,rax
    313f:	test   rax,rax
    3142:	jne    2ab6 <__ctype_b_loc@plt+0x3e6>
    3148:	mov    rdx,QWORD PTR [rsp+0x18]
    314d:	mov    esi,0x3
    3152:	xor    edi,edi
    3154:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    3159:	mov    r12,rax
    315c:	call   23b0 <__errno_location@plt>
    3161:	mov    rcx,r12
    3164:	lea    rdx,[rip+0x9afa]        # cc65 <_IO_stdin_used@@Base+0xc65>
    316b:	xor    edi,edi
    316d:	mov    esi,DWORD PTR [rax]
    316f:	xor    eax,eax
    3171:	call   2620 <error@plt>
    3176:	xor    eax,eax
    3178:	jmp    2e86 <__ctype_b_loc@plt+0x7b6>
    317d:	sub    esi,0x1
    3180:	je     2cde <__ctype_b_loc@plt+0x60e>
    3186:	mov    DWORD PTR [rip+0xde84],0x0        # 11014 <quoting_style_args@@Base+0x454>
    3190:	lea    rax,[rcx+0x2]
    3194:	jmp    2cde <__ctype_b_loc@plt+0x60e>
    3199:	cmp    BYTE PTR [rsp+0x5a],0x0
    319e:	jne    2e5e <__ctype_b_loc@plt+0x78e>
    31a4:	jmp    2e81 <__ctype_b_loc@plt+0x7b1>
    31a9:	cmp    BYTE PTR [rbp+0x0],0x29
    31ad:	jne    2bc7 <__ctype_b_loc@plt+0x4f7>
    31b3:	mov    r10,rbp
    31b6:	xor    r15d,r15d
    31b9:	jmp    3097 <__ctype_b_loc@plt+0x9c7>
    31be:	mov    rdi,QWORD PTR [rsp+0x18]
    31c3:	mov    esi,0x5c
    31c8:	call   24a0 <strchr@plt>
    31cd:	test   rax,rax
    31d0:	je     3448 <__ctype_b_loc@plt+0xd78>
    31d6:	cmp    BYTE PTR [rip+0xde33],0xa        # 11010 <quoting_style_args@@Base+0x450>
    31dd:	je     3362 <__ctype_b_loc@plt+0xc92>
    31e3:	cmp    BYTE PTR [rsp+0x58],0x0
    31e8:	jne    3644 <__ctype_b_loc@plt+0xf74>
    31ee:	mov    rax,QWORD PTR [rip+0xdf03]        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    31f5:	xor    ebp,ebp
    31f7:	shr    rax,1
    31fa:	je     33a2 <__ctype_b_loc@plt+0xcd2>
    3200:	xor    r12d,r12d
    3203:	nop    DWORD PTR [rax+rax*1+0x0]
    3208:	movzx  edx,BYTE PTR [rbx+r12*1]
    320d:	lea    rsi,[rip+0x8f44]        # c158 <_IO_stdin_used@@Base+0x158>
    3214:	mov    edi,0x1
    3219:	xor    eax,eax
    321b:	add    r12,0x1
    321f:	call   2600 <__printf_chk@plt>
    3224:	mov    rax,QWORD PTR [rip+0xdecd]        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    322b:	shr    rax,1
    322e:	cmp    rax,r12
    3231:	ja     3208 <__ctype_b_loc@plt+0xb38>
    3233:	cmp    BYTE PTR [rsp+0x58],0x0
    3238:	je     33a2 <__ctype_b_loc@plt+0xcd2>
    323e:	mov    rdi,QWORD PTR [rip+0xde63]        # 110a8 <stdout@@GLIBC_2.2.5>
    3245:	movzx  edx,BYTE PTR [rip+0xddc4]        # 11010 <quoting_style_args@@Base+0x450>
    324c:	mov    rax,QWORD PTR [rdi+0x28]
    3250:	cmp    rax,QWORD PTR [rdi+0x30]
    3254:	jae    3664 <__ctype_b_loc@plt+0xf94>
    325a:	lea    rcx,[rax+0x1]
    325e:	mov    QWORD PTR [rdi+0x28],rcx
    3262:	mov    BYTE PTR [rax],dl
    3264:	jmp    300c <__ctype_b_loc@plt+0x93c>
    3269:	mov    rdx,r10
    326c:	movzx  eax,BYTE PTR [rip+0xde81]        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    3273:	mov    BYTE PTR [rsp+0x5a],al
    3277:	test   al,al
    3279:	jne    2dd5 <__ctype_b_loc@plt+0x705>
    327f:	movzx  eax,BYTE PTR [rip+0xde6b]        # 110f1 <stderr@@GLIBC_2.2.5+0x11>
    3286:	mov    BYTE PTR [rsp+0x5a],al
    328a:	test   al,al
    328c:	jne    2dd5 <__ctype_b_loc@plt+0x705>
    3292:	cmp    DWORD PTR [rsp+0x28],0x0
    3297:	je     33f7 <__ctype_b_loc@plt+0xd27>
    329d:	mov    BYTE PTR [rsp+0x5a],r9b
    32a2:	jmp    2f8d <__ctype_b_loc@plt+0x8bd>
    32a7:	mov    rdi,r12
    32aa:	call   b0b0 <__ctype_b_loc@plt+0x89e0>
    32af:	test   eax,eax
    32b1:	je     2e0b <__ctype_b_loc@plt+0x73b>
    32b7:	jmp    3148 <__ctype_b_loc@plt+0xa78>
    32bc:	mov    rdx,QWORD PTR [rsp+0x18]
    32c1:	xor    edi,edi
    32c3:	mov    esi,0x3
    32c8:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    32cd:	xor    edi,edi
    32cf:	mov    edx,0x5
    32d4:	lea    rsi,[rip+0x9775]        # ca50 <_IO_stdin_used@@Base+0xa50>
    32db:	mov    r12,rax
    32de:	call   2440 <dcgettext@plt>
    32e3:	lea    r8,[rip+0x8d2a]        # c014 <_IO_stdin_used@@Base+0x14>
    32ea:	xor    esi,esi
    32ec:	xor    edi,edi
    32ee:	mov    rdx,rax
    32f1:	mov    rcx,r12
    32f4:	xor    eax,eax
    32f6:	call   2620 <error@plt>
    32fb:	jmp    2e81 <__ctype_b_loc@plt+0x7b1>
    3300:	mov    rsi,r15
    3303:	mov    rdi,rbp
    3306:	mov    QWORD PTR [rsp+0x20],r8
    330b:	sub    rsi,rax
    330e:	call   3820 <__ctype_b_loc@plt+0x1150>
    3313:	mov    r8,QWORD PTR [rsp+0x20]
    3318:	test   rax,rax
    331b:	setne  al
    331e:	jmp    311e <__ctype_b_loc@plt+0xa4e>
    3323:	mov    rdx,QWORD PTR [rsp+0x18]
    3328:	mov    esi,0x3
    332d:	xor    edi,edi
    332f:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    3334:	mov    edx,0x5
    3339:	lea    rsi,[rip+0x8df0]        # c130 <_IO_stdin_used@@Base+0x130>
    3340:	xor    edi,edi
    3342:	mov    r12,rax
    3345:	call   2440 <dcgettext@plt>
    334a:	mov    rcx,r12
    334d:	xor    esi,esi
    334f:	xor    edi,edi
    3351:	mov    rdx,rax
    3354:	xor    eax,eax
    3356:	call   2620 <error@plt>
    335b:	xor    eax,eax
    335d:	jmp    2e86 <__ctype_b_loc@plt+0x7b6>
    3362:	cmp    BYTE PTR [rsp+0x58],0x0
    3367:	jne    34a6 <__ctype_b_loc@plt+0xdd6>
    336d:	mov    rdi,QWORD PTR [rip+0xdd34]        # 110a8 <stdout@@GLIBC_2.2.5>
    3374:	mov    rax,QWORD PTR [rdi+0x28]
    3378:	cmp    rax,QWORD PTR [rdi+0x30]
    337c:	jae    36b8 <__ctype_b_loc@plt+0xfe8>
    3382:	lea    rdx,[rax+0x1]
    3386:	mov    QWORD PTR [rdi+0x28],rdx
    338a:	mov    BYTE PTR [rax],0x5c
    338d:	mov    rax,QWORD PTR [rip+0xdd64]        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    3394:	mov    ebp,0x1
    3399:	shr    rax,1
    339c:	jne    3200 <__ctype_b_loc@plt+0xb30>
    33a2:	mov    rdi,QWORD PTR [rip+0xdcff]        # 110a8 <stdout@@GLIBC_2.2.5>
    33a9:	mov    rax,QWORD PTR [rdi+0x28]
    33ad:	cmp    rax,QWORD PTR [rdi+0x30]
    33b1:	jae    36a9 <__ctype_b_loc@plt+0xfd9>
    33b7:	lea    rdx,[rax+0x1]
    33bb:	mov    QWORD PTR [rdi+0x28],rdx
    33bf:	mov    BYTE PTR [rax],0x20
    33c2:	mov    rdi,QWORD PTR [rip+0xdcdf]        # 110a8 <stdout@@GLIBC_2.2.5>
    33c9:	mov    rax,QWORD PTR [rdi+0x28]
    33cd:	cmp    rax,QWORD PTR [rdi+0x30]
    33d1:	jae    369b <__ctype_b_loc@plt+0xfcb>
    33d7:	movzx  ebx,BYTE PTR [rsp+0x5b]
    33dc:	lea    rdx,[rax+0x1]
    33e0:	mov    QWORD PTR [rdi+0x28],rdx
    33e4:	mov    BYTE PTR [rax],bl
    33e6:	mov    rdi,QWORD PTR [rsp+0x18]
    33eb:	mov    esi,ebp
    33ed:	call   3900 <__ctype_b_loc@plt+0x1230>
    33f2:	jmp    323e <__ctype_b_loc@plt+0xb6e>
    33f7:	xor    esi,esi
    33f9:	mov    rdi,rbp
    33fc:	mov    BYTE PTR [rsp+0x28],r9b
    3401:	call   3900 <__ctype_b_loc@plt+0x1230>
    3406:	movzx  r9d,BYTE PTR [rsp+0x28]
    340c:	mov    BYTE PTR [rsp+0x5a],r9b
    3411:	cmp    BYTE PTR [rip+0xdcd9],0x0        # 110f1 <stderr@@GLIBC_2.2.5+0x11>
    3418:	jne    2dd5 <__ctype_b_loc@plt+0x705>
    341e:	mov    edx,0x5
    3423:	lea    rsi,[rip+0x8d03]        # c12d <_IO_stdin_used@@Base+0x12d>
    342a:	jmp    2db8 <__ctype_b_loc@plt+0x6e8>
    342f:	mov    rsi,r15
    3432:	mov    rdi,rbp
    3435:	call   3820 <__ctype_b_loc@plt+0x1150>
    343a:	test   rax,rax
    343d:	jne    309f <__ctype_b_loc@plt+0x9cf>
    3443:	jmp    2bc7 <__ctype_b_loc@plt+0x4f7>
    3448:	mov    rdi,QWORD PTR [rsp+0x18]
    344d:	mov    esi,0xa
    3452:	call   24a0 <strchr@plt>
    3457:	test   rax,rax
    345a:	jne    31d6 <__ctype_b_loc@plt+0xb06>
    3460:	jmp    31e3 <__ctype_b_loc@plt+0xb13>
    3465:	mov    rdi,QWORD PTR [rip+0xdc44]        # 110b0 <stdin@@GLIBC_2.2.5>
    346c:	call   b0b0 <__ctype_b_loc@plt+0x89e0>
    3471:	add    eax,0x1
    3474:	jne    302f <__ctype_b_loc@plt+0x95f>
    347a:	mov    edx,0x5
    347f:	lea    rsi,[rip+0x8c61]        # c0e7 <_IO_stdin_used@@Base+0xe7>
    3486:	xor    edi,edi
    3488:	call   2440 <dcgettext@plt>
    348d:	mov    r12,rax
    3490:	call   23b0 <__errno_location@plt>
    3495:	mov    rdx,r12
    3498:	mov    edi,0x1
    349d:	mov    esi,DWORD PTR [rax]
    349f:	xor    eax,eax
    34a1:	call   2620 <error@plt>
    34a6:	mov    rdi,QWORD PTR [rip+0xdbfb]        # 110a8 <stdout@@GLIBC_2.2.5>
    34ad:	mov    rax,QWORD PTR [rdi+0x28]
    34b1:	cmp    rax,QWORD PTR [rdi+0x30]
    34b5:	jae    36c7 <__ctype_b_loc@plt+0xff7>
    34bb:	lea    rdx,[rax+0x1]
    34bf:	mov    ebp,0x1
    34c4:	mov    QWORD PTR [rdi+0x28],rdx
    34c8:	mov    BYTE PTR [rax],0x5c
    34cb:	mov    rcx,QWORD PTR [rip+0xdbd6]        # 110a8 <stdout@@GLIBC_2.2.5>
    34d2:	mov    edx,0x6
    34d7:	mov    esi,0x1
    34dc:	lea    rdi,[rip+0x8b31]        # c014 <_IO_stdin_used@@Base+0x14>
    34e3:	call   25c0 <fwrite_unlocked@plt>
    34e8:	mov    edx,0x2
    34ed:	mov    rcx,QWORD PTR [rip+0xdbb4]        # 110a8 <stdout@@GLIBC_2.2.5>
    34f4:	mov    esi,0x1
    34f9:	lea    rdi,[rip+0x8c5d]        # c15d <_IO_stdin_used@@Base+0x15d>
    3500:	call   25c0 <fwrite_unlocked@plt>
    3505:	mov    rdi,QWORD PTR [rsp+0x18]
    350a:	mov    esi,ebp
    350c:	call   3900 <__ctype_b_loc@plt+0x1230>
    3511:	mov    edx,0x4
    3516:	mov    rcx,QWORD PTR [rip+0xdb8b]        # 110a8 <stdout@@GLIBC_2.2.5>
    351d:	mov    esi,0x1
    3522:	lea    rdi,[rip+0x8c37]        # c160 <_IO_stdin_used@@Base+0x160>
    3529:	call   25c0 <fwrite_unlocked@plt>
    352e:	mov    rax,QWORD PTR [rip+0xdbc3]        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    3535:	shr    rax,1
    3538:	jne    3200 <__ctype_b_loc@plt+0xb30>
    353e:	jmp    323e <__ctype_b_loc@plt+0xb6e>
    3543:	mov    edx,0x5
    3548:	lea    rsi,[rip+0x9411]        # c960 <_IO_stdin_used@@Base+0x960>
    354f:	test   r15b,r15b
    3552:	jne    29f2 <__ctype_b_loc@plt+0x322>
    3558:	jmp    299a <__ctype_b_loc@plt+0x2ca>
    355d:	mov    rdx,QWORD PTR [rsp+0x18]
    3562:	xor    edi,edi
    3564:	mov    esi,0x3
    3569:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    356e:	xor    edi,edi
    3570:	mov    edx,0x5
    3575:	lea    rsi,[rip+0x8bc3]        # c13f <_IO_stdin_used@@Base+0x13f>
    357c:	mov    r12,rax
    357f:	call   2440 <dcgettext@plt>
    3584:	mov    rcx,r12
    3587:	xor    esi,esi
    3589:	xor    edi,edi
    358b:	mov    rdx,rax
    358e:	xor    eax,eax
    3590:	call   2620 <error@plt>
    3595:	jmp    2e81 <__ctype_b_loc@plt+0x7b1>
    359a:	mov    r14,QWORD PTR [rsp+0x50]
    359f:	xor    edi,edi
    35a1:	mov    r8d,0x5
    35a7:	lea    rdx,[rip+0x959a]        # cb48 <_IO_stdin_used@@Base+0xb48>
    35ae:	lea    rsi,[rip+0x95c3]        # cb78 <_IO_stdin_used@@Base+0xb78>
    35b5:	mov    rcx,r14
    35b8:	call   2650 <dcngettext@plt>
    35bd:	mov    rcx,r14
    35c0:	xor    esi,esi
    35c2:	xor    edi,edi
    35c4:	mov    rdx,rax
    35c7:	xor    eax,eax
    35c9:	call   2620 <error@plt>
    35ce:	jmp    2e46 <__ctype_b_loc@plt+0x776>
    35d3:	mov    r14,QWORD PTR [rsp+0x30]
    35d8:	xor    edi,edi
    35da:	mov    r8d,0x5
    35e0:	lea    rdx,[rip+0x9501]        # cae8 <_IO_stdin_used@@Base+0xae8>
    35e7:	lea    rsi,[rip+0x952a]        # cb18 <_IO_stdin_used@@Base+0xb18>
    35ee:	mov    rcx,r14
    35f1:	call   2650 <dcngettext@plt>
    35f6:	mov    rcx,r14
    35f9:	xor    esi,esi
    35fb:	xor    edi,edi
    35fd:	mov    rdx,rax
    3600:	xor    eax,eax
    3602:	call   2620 <error@plt>
    3607:	jmp    2e3a <__ctype_b_loc@plt+0x76a>
    360c:	mov    r14,QWORD PTR [rsp]
    3610:	xor    edi,edi
    3612:	mov    r8d,0x5
    3618:	lea    rdx,[rip+0x9469]        # ca88 <_IO_stdin_used@@Base+0xa88>
    361f:	lea    rsi,[rip+0x9492]        # cab8 <_IO_stdin_used@@Base+0xab8>
    3626:	mov    rcx,r14
    3629:	call   2650 <dcngettext@plt>
    362e:	mov    rcx,r14
    3631:	xor    esi,esi
    3633:	xor    edi,edi
    3635:	mov    rdx,rax
    3638:	xor    eax,eax
    363a:	call   2620 <error@plt>
    363f:	jmp    2e2e <__ctype_b_loc@plt+0x75e>
    3644:	xor    ebp,ebp
    3646:	jmp    34cb <__ctype_b_loc@plt+0xdfb>
    364b:	mov    esi,0x5c
    3650:	call   24b0 <__overflow@plt>
    3655:	jmp    2da0 <__ctype_b_loc@plt+0x6d0>
    365a:	mov    BYTE PTR [rsp+0x59],0x1
    365f:	jmp    3022 <__ctype_b_loc@plt+0x952>
    3664:	movzx  esi,dl
    3667:	call   24b0 <__overflow@plt>
    366c:	jmp    300c <__ctype_b_loc@plt+0x93c>
    3671:	xor    edx,edx
    3673:	jmp    326c <__ctype_b_loc@plt+0xb9c>
    3678:	mov    esi,0x5c
    367d:	mov    QWORD PTR [rsp+0x38],rdx
    3682:	mov    QWORD PTR [rsp+0x20],r10
    3687:	call   24b0 <__overflow@plt>
    368c:	mov    r10,QWORD PTR [rsp+0x20]
    3691:	mov    rdx,QWORD PTR [rsp+0x38]
    3696:	jmp    2fad <__ctype_b_loc@plt+0x8dd>
    369b:	mov    esi,DWORD PTR [rsp+0x5c]
    369f:	call   24b0 <__overflow@plt>
    36a4:	jmp    33e6 <__ctype_b_loc@plt+0xd16>
    36a9:	mov    esi,0x20
    36ae:	call   24b0 <__overflow@plt>
    36b3:	jmp    33c2 <__ctype_b_loc@plt+0xcf2>
    36b8:	mov    esi,0x5c
    36bd:	call   24b0 <__overflow@plt>
    36c2:	jmp    338d <__ctype_b_loc@plt+0xcbd>
    36c7:	mov    esi,0x5c
    36cc:	mov    ebp,0x1
    36d1:	call   24b0 <__overflow@plt>
    36d6:	jmp    34cb <__ctype_b_loc@plt+0xdfb>
    36db:	call   2470 <__stack_chk_fail@plt>
    36e0:	mov    edx,0x5
    36e5:	lea    rsi,[rip+0x90f4]        # c7e0 <_IO_stdin_used@@Base+0x7e0>
    36ec:	jmp    299a <__ctype_b_loc@plt+0x2ca>
    36f1:	cmp    BYTE PTR [rip+0xd9fc],0x0        # 110f4 <stderr@@GLIBC_2.2.5+0x14>
    36f8:	je     2944 <__ctype_b_loc@plt+0x274>
    36fe:	test   r15b,r15b
    3701:	jne    29cf <__ctype_b_loc@plt+0x2ff>
    3707:	mov    edx,0x5
    370c:	lea    rsi,[rip+0x920d]        # c920 <_IO_stdin_used@@Base+0x920>
    3713:	jmp    299a <__ctype_b_loc@plt+0x2ca>
    3718:	mov    edx,0x5
    371d:	lea    rsi,[rip+0x91b4]        # c8d8 <_IO_stdin_used@@Base+0x8d8>
    3724:	jmp    299a <__ctype_b_loc@plt+0x2ca>
    3729:	nop    DWORD PTR [rax+0x0]
    3730:	endbr64 
    3734:	xor    ebp,ebp
    3736:	mov    r9,rdx
    3739:	pop    rsi
    373a:	mov    rdx,rsp
    373d:	and    rsp,0xfffffffffffffff0
    3741:	push   rax
    3742:	push   rsp
    3743:	lea    r8,[rip+0x7e36]        # b580 <__ctype_b_loc@plt+0x8eb0>
    374a:	lea    rcx,[rip+0x7dbf]        # b510 <__ctype_b_loc@plt+0x8e40>
    3751:	lea    rdi,[rip+0xffffffffffffefb8]        # 2710 <__ctype_b_loc@plt+0x40>
    3758:	call   QWORD PTR [rip+0xd872]        # 10fd0 <__libc_start_main@GLIBC_2.2.5>
    375e:	hlt    
    375f:	nop
    3760:	lea    rdi,[rip+0xd939]        # 110a0 <__progname@@GLIBC_2.2.5>
    3767:	lea    rax,[rip+0xd932]        # 110a0 <__progname@@GLIBC_2.2.5>
    376e:	cmp    rax,rdi
    3771:	je     3788 <__ctype_b_loc@plt+0x10b8>
    3773:	mov    rax,QWORD PTR [rip+0xd84e]        # 10fc8 <_ITM_deregisterTMCloneTable>
    377a:	test   rax,rax
    377d:	je     3788 <__ctype_b_loc@plt+0x10b8>
    377f:	jmp    rax
    3781:	nop    DWORD PTR [rax+0x0]
    3788:	ret    
    3789:	nop    DWORD PTR [rax+0x0]
    3790:	lea    rdi,[rip+0xd909]        # 110a0 <__progname@@GLIBC_2.2.5>
    3797:	lea    rsi,[rip+0xd902]        # 110a0 <__progname@@GLIBC_2.2.5>
    379e:	sub    rsi,rdi
    37a1:	mov    rax,rsi
    37a4:	shr    rsi,0x3f
    37a8:	sar    rax,0x3
    37ac:	add    rsi,rax
    37af:	sar    rsi,1
    37b2:	je     37c8 <__ctype_b_loc@plt+0x10f8>
    37b4:	mov    rax,QWORD PTR [rip+0xd825]        # 10fe0 <_ITM_registerTMCloneTable>
    37bb:	test   rax,rax
    37be:	je     37c8 <__ctype_b_loc@plt+0x10f8>
    37c0:	jmp    rax
    37c2:	nop    WORD PTR [rax+rax*1+0x0]
    37c8:	ret    
    37c9:	nop    DWORD PTR [rax+0x0]
    37d0:	endbr64 
    37d4:	cmp    BYTE PTR [rip+0xd90d],0x0        # 110e8 <stderr@@GLIBC_2.2.5+0x8>
    37db:	jne    3808 <__ctype_b_loc@plt+0x1138>
    37dd:	push   rbp
    37de:	cmp    QWORD PTR [rip+0xd802],0x0        # 10fe8 <__cxa_finalize@GLIBC_2.2.5>
    37e6:	mov    rbp,rsp
    37e9:	je     37f7 <__ctype_b_loc@plt+0x1127>
    37eb:	mov    rdi,QWORD PTR [rip+0xd816]        # 11008 <quoting_style_args@@Base+0x448>
    37f2:	call   2380 <__cxa_finalize@plt>
    37f7:	call   3760 <__ctype_b_loc@plt+0x1090>
    37fc:	mov    BYTE PTR [rip+0xd8e5],0x1        # 110e8 <stderr@@GLIBC_2.2.5+0x8>
    3803:	pop    rbp
    3804:	ret    
    3805:	nop    DWORD PTR [rax]
    3808:	ret    
    3809:	nop    DWORD PTR [rax+0x0]
    3810:	endbr64 
    3814:	jmp    3790 <__ctype_b_loc@plt+0x10c0>
    3819:	nop    DWORD PTR [rax+0x0]
    3820:	lea    rcx,[rdi+0x1]
    3824:	xor    edx,edx
    3826:	lea    r8,[rsi-0x1]
    382a:	test   rsi,rsi
    382d:	je     3877 <__ctype_b_loc@plt+0x11a7>
    382f:	movzx  eax,BYTE PTR [rdi+rdx*1]
    3833:	test   al,al
    3835:	je     3850 <__ctype_b_loc@plt+0x1180>
    3837:	cmp    al,0x5c
    3839:	jne    3858 <__ctype_b_loc@plt+0x1188>
    383b:	cmp    r8,rdx
    383e:	je     3850 <__ctype_b_loc@plt+0x1180>
    3840:	add    rdx,0x1
    3844:	movzx  eax,BYTE PTR [rdi+rdx*1]
    3848:	cmp    al,0x5c
    384a:	je     3890 <__ctype_b_loc@plt+0x11c0>
    384c:	cmp    al,0x6e
    384e:	je     3880 <__ctype_b_loc@plt+0x11b0>
    3850:	xor    eax,eax
    3852:	ret    
    3853:	nop    DWORD PTR [rax+rax*1+0x0]
    3858:	mov    BYTE PTR [rcx-0x1],al
    385b:	mov    r9,rcx
    385e:	add    rdx,0x1
    3862:	add    rcx,0x1
    3866:	cmp    rsi,rdx
    3869:	ja     382f <__ctype_b_loc@plt+0x115f>
    386b:	add    rsi,rdi
    386e:	cmp    r9,rsi
    3871:	jae    3877 <__ctype_b_loc@plt+0x11a7>
    3873:	mov    BYTE PTR [r9],0x0
    3877:	mov    rax,rdi
    387a:	ret    
    387b:	nop    DWORD PTR [rax+rax*1+0x0]
    3880:	mov    BYTE PTR [rcx-0x1],0xa
    3884:	mov    r9,rcx
    3887:	jmp    385e <__ctype_b_loc@plt+0x118e>
    3889:	nop    DWORD PTR [rax+0x0]
    3890:	mov    BYTE PTR [rcx-0x1],0x5c
    3894:	mov    r9,rcx
    3897:	jmp    385e <__ctype_b_loc@plt+0x118e>
    3899:	nop    DWORD PTR [rax+0x0]
    38a0:	push   rbp
    38a1:	push   rbx
    38a2:	mov    rbx,rdi
    38a5:	sub    rsp,0x8
    38a9:	mov    rbp,QWORD PTR [rip+0xd848]        # 110f8 <stderr@@GLIBC_2.2.5+0x18>
    38b0:	test   rbp,rbp
    38b3:	je     38f0 <__ctype_b_loc@plt+0x1220>
    38b5:	call   26d0 <__ctype_b_loc@plt>
    38ba:	mov    rcx,QWORD PTR [rax]
    38bd:	xor    eax,eax
    38bf:	jmp    38d7 <__ctype_b_loc@plt+0x1207>
    38c1:	nop    DWORD PTR [rax+0x0]
    38c8:	lea    edx,[rax+0x1]
    38cb:	add    rbx,0x1
    38cf:	mov    rax,rdx
    38d2:	cmp    rdx,rbp
    38d5:	jae    38f0 <__ctype_b_loc@plt+0x1220>
    38d7:	movzx  edx,BYTE PTR [rbx]
    38da:	test   BYTE PTR [rcx+rdx*2+0x1],0x10
    38df:	jne    38c8 <__ctype_b_loc@plt+0x11f8>
    38e1:	add    rsp,0x8
    38e5:	xor    eax,eax
    38e7:	pop    rbx
    38e8:	pop    rbp
    38e9:	ret    
    38ea:	nop    WORD PTR [rax+rax*1+0x0]
    38f0:	cmp    BYTE PTR [rbx],0x0
    38f3:	sete   al
    38f6:	add    rsp,0x8
    38fa:	pop    rbx
    38fb:	pop    rbp
    38fc:	ret    
    38fd:	nop    DWORD PTR [rax]
    3900:	push   rbp
    3901:	mov    rbp,rdi
    3904:	push   rbx
    3905:	sub    rsp,0x8
    3909:	test   sil,sil
    390c:	je     39b8 <__ctype_b_loc@plt+0x12e8>
    3912:	movzx  esi,BYTE PTR [rdi]
    3915:	lea    rbx,[rip+0x86e8]        # c004 <_IO_stdin_used@@Base+0x4>
    391c:	test   sil,sil
    391f:	jne    394a <__ctype_b_loc@plt+0x127a>
    3921:	jmp    3980 <__ctype_b_loc@plt+0x12b0>
    3923:	nop    DWORD PTR [rax+rax*1+0x0]
    3928:	mov    rax,QWORD PTR [rcx+0x28]
    392c:	cmp    rax,QWORD PTR [rcx+0x30]
    3930:	jae    39a8 <__ctype_b_loc@plt+0x12d8>
    3932:	lea    rdx,[rax+0x1]
    3936:	mov    QWORD PTR [rcx+0x28],rdx
    393a:	mov    BYTE PTR [rax],sil
    393d:	movzx  esi,BYTE PTR [rbp+0x1]
    3941:	add    rbp,0x1
    3945:	test   sil,sil
    3948:	je     3980 <__ctype_b_loc@plt+0x12b0>
    394a:	mov    rcx,QWORD PTR [rip+0xd757]        # 110a8 <stdout@@GLIBC_2.2.5>
    3951:	cmp    sil,0xa
    3955:	je     3990 <__ctype_b_loc@plt+0x12c0>
    3957:	cmp    sil,0x5c
    395b:	jne    3928 <__ctype_b_loc@plt+0x1258>
    395d:	mov    esi,0x1
    3962:	mov    edx,0x2
    3967:	lea    rdi,[rip+0x8699]        # c007 <_IO_stdin_used@@Base+0x7>
    396e:	add    rbp,0x1
    3972:	call   25c0 <fwrite_unlocked@plt>
    3977:	movzx  esi,BYTE PTR [rbp+0x0]
    397b:	test   sil,sil
    397e:	jne    394a <__ctype_b_loc@plt+0x127a>
    3980:	add    rsp,0x8
    3984:	pop    rbx
    3985:	pop    rbp
    3986:	ret    
    3987:	nop    WORD PTR [rax+rax*1+0x0]
    3990:	mov    edx,0x2
    3995:	mov    esi,0x1
    399a:	mov    rdi,rbx
    399d:	call   25c0 <fwrite_unlocked@plt>
    39a2:	jmp    393d <__ctype_b_loc@plt+0x126d>
    39a4:	nop    DWORD PTR [rax+0x0]
    39a8:	mov    rdi,rcx
    39ab:	call   24b0 <__overflow@plt>
    39b0:	jmp    393d <__ctype_b_loc@plt+0x126d>
    39b2:	nop    WORD PTR [rax+rax*1+0x0]
    39b8:	mov    rsi,QWORD PTR [rip+0xd6e9]        # 110a8 <stdout@@GLIBC_2.2.5>
    39bf:	add    rsp,0x8
    39c3:	pop    rbx
    39c4:	pop    rbp
    39c5:	jmp    2520 <fputs_unlocked@plt>
    39ca:	nop    WORD PTR [rax+rax*1+0x0]
    39d0:	push   r13
    39d2:	mov    r13,rsi
    39d5:	push   r12
    39d7:	mov    r12,rdi
    39da:	push   rbp
    39db:	push   rbx
    39dc:	mov    rbx,rdx
    39df:	sub    rsp,0x8
    39e3:	movzx  eax,BYTE PTR [rdi]
    39e6:	sub    eax,0x2d
    39e9:	jne    39ef <__ctype_b_loc@plt+0x131f>
    39eb:	movzx  eax,BYTE PTR [rdi+0x1]
    39ef:	mov    BYTE PTR [rbx],0x0
    39f2:	test   eax,eax
    39f4:	jne    3a40 <__ctype_b_loc@plt+0x1370>
    39f6:	mov    rbp,QWORD PTR [rip+0xd6b3]        # 110b0 <stdin@@GLIBC_2.2.5>
    39fd:	mov    esi,0x2
    3a02:	mov    BYTE PTR [rip+0xd6ff],0x1        # 11108 <stderr@@GLIBC_2.2.5+0x28>
    3a09:	mov    rdi,rbp
    3a0c:	call   8910 <__ctype_b_loc@plt+0x6240>
    3a11:	mov    rsi,r13
    3a14:	mov    rdi,rbp
    3a17:	call   88c0 <__ctype_b_loc@plt+0x61f0>
    3a1c:	test   eax,eax
    3a1e:	jne    3ac0 <__ctype_b_loc@plt+0x13f0>
    3a24:	mov    r13d,0x1
    3a2a:	add    rsp,0x8
    3a2e:	mov    eax,r13d
    3a31:	pop    rbx
    3a32:	pop    rbp
    3a33:	pop    r12
    3a35:	pop    r13
    3a37:	ret    
    3a38:	nop    DWORD PTR [rax+rax*1+0x0]
    3a40:	lea    rsi,[rip+0x867a]        # c0c1 <_IO_stdin_used@@Base+0xc1>
    3a47:	mov    rdi,r12
    3a4a:	call   8940 <__ctype_b_loc@plt+0x6270>
    3a4f:	mov    rbp,rax
    3a52:	test   rax,rax
    3a55:	je     3b10 <__ctype_b_loc@plt+0x1440>
    3a5b:	mov    esi,0x2
    3a60:	mov    rdi,rax
    3a63:	call   8910 <__ctype_b_loc@plt+0x6240>
    3a68:	mov    rsi,r13
    3a6b:	mov    rdi,rbp
    3a6e:	call   88c0 <__ctype_b_loc@plt+0x61f0>
    3a73:	test   eax,eax
    3a75:	jne    3ac0 <__ctype_b_loc@plt+0x13f0>
    3a77:	mov    rdi,rbp
    3a7a:	call   b0b0 <__ctype_b_loc@plt+0x89e0>
    3a7f:	test   eax,eax
    3a81:	je     3a24 <__ctype_b_loc@plt+0x1354>
    3a83:	mov    rdx,r12
    3a86:	mov    esi,0x3
    3a8b:	xor    edi,edi
    3a8d:	xor    r13d,r13d
    3a90:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    3a95:	mov    r12,rax
    3a98:	call   23b0 <__errno_location@plt>
    3a9d:	mov    rcx,r12
    3aa0:	lea    rdx,[rip+0x91be]        # cc65 <_IO_stdin_used@@Base+0xc65>
    3aa7:	xor    edi,edi
    3aa9:	mov    esi,DWORD PTR [rax]
    3aab:	xor    eax,eax
    3aad:	call   2620 <error@plt>
    3ab2:	jmp    3a2a <__ctype_b_loc@plt+0x135a>
    3ab7:	nop    WORD PTR [rax+rax*1+0x0]
    3ac0:	mov    rdx,r12
    3ac3:	xor    edi,edi
    3ac5:	mov    esi,0x3
    3aca:	xor    r13d,r13d
    3acd:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    3ad2:	mov    r12,rax
    3ad5:	call   23b0 <__errno_location@plt>
    3ada:	xor    edi,edi
    3adc:	mov    rcx,r12
    3adf:	lea    rdx,[rip+0x917f]        # cc65 <_IO_stdin_used@@Base+0xc65>
    3ae6:	mov    esi,DWORD PTR [rax]
    3ae8:	xor    eax,eax
    3aea:	call   2620 <error@plt>
    3aef:	cmp    QWORD PTR [rip+0xd5ba],rbp        # 110b0 <stdin@@GLIBC_2.2.5>
    3af6:	je     3a2a <__ctype_b_loc@plt+0x135a>
    3afc:	mov    rdi,rbp
    3aff:	call   b0b0 <__ctype_b_loc@plt+0x89e0>
    3b04:	jmp    3a2a <__ctype_b_loc@plt+0x135a>
    3b09:	nop    DWORD PTR [rax+0x0]
    3b10:	call   23b0 <__errno_location@plt>
    3b15:	movzx  r13d,BYTE PTR [rip+0xd5d5]        # 110f2 <stderr@@GLIBC_2.2.5+0x12>
    3b1d:	mov    rbp,rax
    3b20:	test   r13b,r13b
    3b23:	je     3b2a <__ctype_b_loc@plt+0x145a>
    3b25:	cmp    DWORD PTR [rax],0x2
    3b28:	je     3b60 <__ctype_b_loc@plt+0x1490>
    3b2a:	mov    rdx,r12
    3b2d:	mov    esi,0x3
    3b32:	xor    edi,edi
    3b34:	xor    r13d,r13d
    3b37:	call   a570 <__ctype_b_loc@plt+0x7ea0>
    3b3c:	mov    esi,DWORD PTR [rbp+0x0]
    3b3f:	lea    rdx,[rip+0x911f]        # cc65 <_IO_stdin_used@@Base+0xc65>
    3b46:	xor    edi,edi
    3b48:	mov    rcx,rax
    3b4b:	xor    eax,eax
    3b4d:	call   2620 <error@plt>
    3b52:	jmp    3a2a <__ctype_b_loc@plt+0x135a>
    3b57:	nop    WORD PTR [rax+rax*1+0x0]
    3b60:	mov    BYTE PTR [rbx],0x1
    3b63:	jmp    3a2a <__ctype_b_loc@plt+0x135a>
    3b68:	nop    DWORD PTR [rax+rax*1+0x0]
    3b70:	endbr64 
    3b74:	push   r13
    3b76:	mov    edx,0x5
    3b7b:	push   r12
    3b7d:	push   rbp
    3b7e:	mov    ebp,edi
    3b80:	push   rbx
    3b81:	sub    rsp,0x88
    3b88:	mov    r12,QWORD PTR [rip+0xd591]        # 11120 <program_name@@Base>
    3b8f:	mov    rax,QWORD PTR fs:0x28
    3b98:	mov    QWORD PTR [rsp+0x78],rax
    3b9d:	xor    eax,eax
    3b9f:	test   edi,edi
    3ba1:	je     3bd1 <__ctype_b_loc@plt+0x1501>
    3ba3:	lea    rsi,[rip+0x860e]        # c1b8 <_IO_stdin_used@@Base+0x1b8>
    3baa:	xor    edi,edi
    3bac:	call   2440 <dcgettext@plt>
    3bb1:	mov    rdi,QWORD PTR [rip+0xd528]        # 110e0 <stderr@@GLIBC_2.2.5>
    3bb8:	mov    rcx,r12
    3bbb:	mov    esi,0x1
    3bc0:	mov    rdx,rax
    3bc3:	xor    eax,eax
    3bc5:	call   2690 <__fprintf_chk@plt>
    3bca:	mov    edi,ebp
    3bcc:	call   2670 <exit@plt>
    3bd1:	xor    edi,edi
    3bd3:	lea    rsi,[rip+0x8606]        # c1e0 <_IO_stdin_used@@Base+0x1e0>
    3bda:	lea    rbx,[rip+0x8486]        # c067 <_IO_stdin_used@@Base+0x67>
    3be1:	call   2440 <dcgettext@plt>
    3be6:	mov    r8d,0x200
    3bec:	mov    rdx,r12
    3bef:	lea    rcx,[rip+0x841e]        # c014 <_IO_stdin_used@@Base+0x14>
    3bf6:	mov    rsi,rax
    3bf9:	mov    edi,0x1
    3bfe:	xor    eax,eax
    3c00:	call   2600 <__printf_chk@plt>
    3c05:	mov    r12,QWORD PTR [rip+0xd49c]        # 110a8 <stdout@@GLIBC_2.2.5>
    3c0c:	xor    edi,edi
    3c0e:	mov    edx,0x5
    3c13:	lea    rsi,[rip+0x860e]        # c228 <_IO_stdin_used@@Base+0x228>
    3c1a:	call   2440 <dcgettext@plt>
    3c1f:	mov    rsi,r12
    3c22:	mov    rdi,rax
    3c25:	call   2520 <fputs_unlocked@plt>
    3c2a:	mov    r12,QWORD PTR [rip+0xd477]        # 110a8 <stdout@@GLIBC_2.2.5>
    3c31:	xor    edi,edi
    3c33:	mov    edx,0x5
    3c38:	lea    rsi,[rip+0x8621]        # c260 <_IO_stdin_used@@Base+0x260>
    3c3f:	call   2440 <dcgettext@plt>
    3c44:	mov    rsi,r12
    3c47:	mov    rdi,rax
    3c4a:	call   2520 <fputs_unlocked@plt>
    3c4f:	xor    edi,edi
    3c51:	mov    edx,0x5
    3c56:	lea    rsi,[rip+0x8633]        # c290 <_IO_stdin_used@@Base+0x290>
    3c5d:	call   2440 <dcgettext@plt>
    3c62:	lea    rdx,[rip+0x83ab]        # c014 <_IO_stdin_used@@Base+0x14>
    3c69:	mov    edi,0x1
    3c6e:	mov    rsi,rax
    3c71:	xor    eax,eax
    3c73:	call   2600 <__printf_chk@plt>
    3c78:	mov    r12,QWORD PTR [rip+0xd429]        # 110a8 <stdout@@GLIBC_2.2.5>
    3c7f:	xor    edi,edi
    3c81:	mov    edx,0x5
    3c86:	lea    rsi,[rip+0x864b]        # c2d8 <_IO_stdin_used@@Base+0x2d8>
    3c8d:	call   2440 <dcgettext@plt>
    3c92:	mov    rsi,r12
    3c95:	mov    rdi,rax
    3c98:	call   2520 <fputs_unlocked@plt>
    3c9d:	mov    r12,QWORD PTR [rip+0xd404]        # 110a8 <stdout@@GLIBC_2.2.5>
    3ca4:	xor    edi,edi
    3ca6:	mov    edx,0x5
    3cab:	lea    rsi,[rip+0x865e]        # c310 <_IO_stdin_used@@Base+0x310>
    3cb2:	call   2440 <dcgettext@plt>
    3cb7:	mov    rsi,r12
    3cba:	mov    rdi,rax
    3cbd:	call   2520 <fputs_unlocked@plt>
    3cc2:	mov    r12,QWORD PTR [rip+0xd3df]        # 110a8 <stdout@@GLIBC_2.2.5>
    3cc9:	xor    edi,edi
    3ccb:	mov    edx,0x5
    3cd0:	lea    rsi,[rip+0x8671]        # c348 <_IO_stdin_used@@Base+0x348>
    3cd7:	call   2440 <dcgettext@plt>
    3cdc:	mov    rsi,r12
    3cdf:	mov    rdi,rax
    3ce2:	call   2520 <fputs_unlocked@plt>
    3ce7:	mov    r12,QWORD PTR [rip+0xd3ba]        # 110a8 <stdout@@GLIBC_2.2.5>
    3cee:	xor    edi,edi
    3cf0:	mov    edx,0x5
    3cf5:	lea    rsi,[rip+0x86cc]        # c3c8 <_IO_stdin_used@@Base+0x3c8>
    3cfc:	call   2440 <dcgettext@plt>
    3d01:	mov    rsi,r12
    3d04:	mov    rdi,rax
    3d07:	call   2520 <fputs_unlocked@plt>
    3d0c:	mov    r12,QWORD PTR [rip+0xd395]        # 110a8 <stdout@@GLIBC_2.2.5>
    3d13:	xor    edi,edi
    3d15:	mov    edx,0x5
    3d1a:	lea    rsi,[rip+0x885f]        # c580 <_IO_stdin_used@@Base+0x580>
    3d21:	call   2440 <dcgettext@plt>
    3d26:	mov    rsi,r12
    3d29:	mov    rdi,rax
    3d2c:	call   2520 <fputs_unlocked@plt>
    3d31:	mov    edx,0x5
    3d36:	xor    edi,edi
    3d38:	mov    r12,QWORD PTR [rip+0xd369]        # 110a8 <stdout@@GLIBC_2.2.5>
    3d3f:	lea    rsi,[rip+0x886a]        # c5b0 <_IO_stdin_used@@Base+0x5b0>
    3d46:	call   2440 <dcgettext@plt>
    3d4b:	mov    rsi,r12
    3d4e:	mov    rdi,rax
    3d51:	call   2520 <fputs_unlocked@plt>
    3d56:	xor    edi,edi
    3d58:	mov    edx,0x5
    3d5d:	lea    rsi,[rip+0x8884]        # c5e8 <_IO_stdin_used@@Base+0x5e8>
    3d64:	call   2440 <dcgettext@plt>
    3d69:	lea    rdx,[rip+0x82ab]        # c01b <_IO_stdin_used@@Base+0x1b>
    3d70:	mov    edi,0x1
    3d75:	mov    rsi,rax
    3d78:	xor    eax,eax
    3d7a:	call   2600 <__printf_chk@plt>
    3d7f:	lea    rax,[rip+0x82a0]        # c026 <_IO_stdin_used@@Base+0x26>
    3d86:	mov    QWORD PTR [rsp+0x30],rbx
    3d8b:	lea    rbx,[rip+0x82df]        # c071 <_IO_stdin_used@@Base+0x71>
    3d92:	mov    QWORD PTR [rsp],rax
    3d96:	lea    rax,[rip+0x828b]        # c028 <_IO_stdin_used@@Base+0x28>
    3d9d:	mov    QWORD PTR [rsp+0x8],rax
    3da2:	lea    rax,[rip+0x82ed]        # c096 <_IO_stdin_used@@Base+0x96>
    3da9:	mov    QWORD PTR [rsp+0x10],rax
    3dae:	lea    rax,[rip+0x8283]        # c038 <_IO_stdin_used@@Base+0x38>
    3db5:	mov    QWORD PTR [rsp+0x40],rbx
    3dba:	lea    rbx,[rip+0x8249]        # c00a <_IO_stdin_used@@Base+0xa>
    3dc1:	mov    QWORD PTR [rsp+0x18],rax
    3dc6:	lea    rax,[rip+0x8281]        # c04e <_IO_stdin_used@@Base+0x4e>
    3dcd:	mov    QWORD PTR [rsp+0x50],rbx
    3dd2:	mov    QWORD PTR [rsp+0x60],0x0
    3ddb:	mov    QWORD PTR [rsp+0x68],0x0
    3de4:	mov    QWORD PTR [rsp+0x20],rax
    3de9:	lea    rax,[rip+0x8268]        # c058 <_IO_stdin_used@@Base+0x58>
    3df0:	mov    QWORD PTR [rsp+0x28],rax
    3df5:	mov    QWORD PTR [rsp+0x38],rax
    3dfa:	mov    QWORD PTR [rsp+0x48],rax
    3dff:	mov    QWORD PTR [rsp+0x58],rax
    3e04:	mov    rax,rsp
    3e07:	nop    WORD PTR [rax+rax*1+0x0]
    3e10:	mov    rdi,QWORD PTR [rax+0x10]
    3e14:	add    rax,0x10
    3e18:	test   rdi,rdi
    3e1b:	je     3e31 <__ctype_b_loc@plt+0x1761>
    3e1d:	mov    ecx,0xa
    3e22:	mov    rsi,rbx
    3e25:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    3e27:	seta   dl
    3e2a:	sbb    dl,0x0
    3e2d:	test   dl,dl
    3e2f:	jne    3e10 <__ctype_b_loc@plt+0x1740>
    3e31:	mov    r12,QWORD PTR [rax+0x8]
    3e35:	mov    edx,0x5
    3e3a:	lea    rsi,[rip+0x823a]        # c07b <_IO_stdin_used@@Base+0x7b>
    3e41:	xor    edi,edi
    3e43:	test   r12,r12
    3e46:	je     3f0d <__ctype_b_loc@plt+0x183d>
    3e4c:	call   2440 <dcgettext@plt>
    3e51:	lea    rcx,[rip+0x88c0]        # c718 <_IO_stdin_used@@Base+0x718>
    3e58:	mov    edi,0x1
    3e5d:	lea    rdx,[rip+0x822e]        # c092 <_IO_stdin_used@@Base+0x92>
    3e64:	mov    rsi,rax
    3e67:	xor    eax,eax
    3e69:	call   2600 <__printf_chk@plt>
    3e6e:	mov    edi,0x5
    3e73:	xor    esi,esi
    3e75:	call   25f0 <setlocale@plt>
    3e7a:	mov    rdi,rax
    3e7d:	test   rax,rax
    3e80:	je     3e9b <__ctype_b_loc@plt+0x17cb>
    3e82:	mov    edx,0x3
    3e87:	lea    rsi,[rip+0x8212]        # c0a0 <_IO_stdin_used@@Base+0xa0>
    3e8e:	call   23c0 <strncmp@plt>
    3e93:	test   eax,eax
    3e95:	jne    3fa2 <__ctype_b_loc@plt+0x18d2>
    3e9b:	xor    edi,edi
    3e9d:	mov    edx,0x5
    3ea2:	lea    rsi,[rip+0x88df]        # c788 <_IO_stdin_used@@Base+0x788>
    3ea9:	call   2440 <dcgettext@plt>
    3eae:	lea    rcx,[rip+0x8155]        # c00a <_IO_stdin_used@@Base+0xa>
    3eb5:	lea    rdx,[rip+0x885c]        # c718 <_IO_stdin_used@@Base+0x718>
    3ebc:	mov    edi,0x1
    3ec1:	mov    rsi,rax
    3ec4:	xor    eax,eax
    3ec6:	lea    r13,[rip+0x8175]        # c042 <_IO_stdin_used@@Base+0x42>
    3ecd:	call   2600 <__printf_chk@plt>
    3ed2:	cmp    r12,rbx
    3ed5:	lea    rcx,[rip+0x9605]        # d4e1 <quoting_style_vals@@Base+0x81>
    3edc:	cmovne r13,rcx
    3ee0:	xor    edi,edi
    3ee2:	lea    rsi,[rip+0x88bf]        # c7a8 <_IO_stdin_used@@Base+0x7a8>
    3ee9:	mov    edx,0x5
    3eee:	call   2440 <dcgettext@plt>
    3ef3:	mov    rcx,r13
    3ef6:	mov    rdx,r12
    3ef9:	mov    edi,0x1
    3efe:	mov    rsi,rax
    3f01:	xor    eax,eax
    3f03:	call   2600 <__printf_chk@plt>
    3f08:	jmp    3bca <__ctype_b_loc@plt+0x14fa>
    3f0d:	call   2440 <dcgettext@plt>
    3f12:	lea    rcx,[rip+0x87ff]        # c718 <_IO_stdin_used@@Base+0x718>
    3f19:	mov    edi,0x1
    3f1e:	lea    rdx,[rip+0x816d]        # c092 <_IO_stdin_used@@Base+0x92>
    3f25:	mov    rsi,rax
    3f28:	xor    eax,eax
    3f2a:	call   2600 <__printf_chk@plt>
    3f2f:	mov    edi,0x5
    3f34:	xor    esi,esi
    3f36:	call   25f0 <setlocale@plt>
    3f3b:	mov    rdi,rax
    3f3e:	test   rax,rax
    3f41:	je     3f58 <__ctype_b_loc@plt+0x1888>
    3f43:	mov    edx,0x3
    3f48:	lea    rsi,[rip+0x8151]        # c0a0 <_IO_stdin_used@@Base+0xa0>
    3f4f:	call   23c0 <strncmp@plt>
    3f54:	test   eax,eax
    3f56:	jne    3f9b <__ctype_b_loc@plt+0x18cb>
    3f58:	mov    edx,0x5
    3f5d:	lea    rsi,[rip+0x8824]        # c788 <_IO_stdin_used@@Base+0x788>
    3f64:	xor    edi,edi
    3f66:	call   2440 <dcgettext@plt>
    3f6b:	lea    rcx,[rip+0x8098]        # c00a <_IO_stdin_used@@Base+0xa>
    3f72:	lea    rdx,[rip+0x879f]        # c718 <_IO_stdin_used@@Base+0x718>
    3f79:	mov    edi,0x1
    3f7e:	mov    rsi,rax
    3f81:	xor    eax,eax
    3f83:	lea    r12,[rip+0x8080]        # c00a <_IO_stdin_used@@Base+0xa>
    3f8a:	call   2600 <__printf_chk@plt>
    3f8f:	lea    r13,[rip+0x80ac]        # c042 <_IO_stdin_used@@Base+0x42>
    3f96:	jmp    3ee0 <__ctype_b_loc@plt+0x1810>
    3f9b:	lea    r12,[rip+0x8068]        # c00a <_IO_stdin_used@@Base+0xa>
    3fa2:	xor    edi,edi
    3fa4:	mov    edx,0x5
    3fa9:	lea    rsi,[rip+0x8790]        # c740 <_IO_stdin_used@@Base+0x740>
    3fb0:	call   2440 <dcgettext@plt>
    3fb5:	lea    rdx,[rip+0x804e]        # c00a <_IO_stdin_used@@Base+0xa>
    3fbc:	mov    edi,0x1
    3fc1:	mov    rsi,rax
    3fc4:	xor    eax,eax
    3fc6:	call   2600 <__printf_chk@plt>
    3fcb:	jmp    3e9b <__ctype_b_loc@plt+0x17cb>
    3fd0:	endbr64 
    3fd4:	mov    QWORD PTR [rip+0xd13d],rdi        # 11118 <stderr@@GLIBC_2.2.5+0x38>
    3fdb:	ret    
    3fdc:	nop    DWORD PTR [rax+0x0]
    3fe0:	endbr64 
    3fe4:	mov    BYTE PTR [rip+0xd125],dil        # 11110 <stderr@@GLIBC_2.2.5+0x30>
    3feb:	ret    
    3fec:	nop    DWORD PTR [rax+0x0]
    3ff0:	endbr64 
    3ff4:	push   r12
    3ff6:	push   rbx
    3ff7:	sub    rsp,0x8
    3ffb:	mov    rdi,QWORD PTR [rip+0xd0a6]        # 110a8 <stdout@@GLIBC_2.2.5>
    4002:	call   b410 <__ctype_b_loc@plt+0x8d40>
    4007:	test   eax,eax
    4009:	je     4021 <__ctype_b_loc@plt+0x1951>
    400b:	call   23b0 <__errno_location@plt>
    4010:	cmp    BYTE PTR [rip+0xd0f9],0x0        # 11110 <stderr@@GLIBC_2.2.5+0x30>
    4017:	mov    rbx,rax
    401a:	je     4039 <__ctype_b_loc@plt+0x1969>
    401c:	cmp    DWORD PTR [rax],0x20
    401f:	jne    4039 <__ctype_b_loc@plt+0x1969>
    4021:	mov    rdi,QWORD PTR [rip+0xd0b8]        # 110e0 <stderr@@GLIBC_2.2.5>
    4028:	call   b410 <__ctype_b_loc@plt+0x8d40>
    402d:	test   eax,eax
    402f:	jne    4078 <__ctype_b_loc@plt+0x19a8>
    4031:	add    rsp,0x8
    4035:	pop    rbx
    4036:	pop    r12
    4038:	ret    
    4039:	xor    edi,edi
    403b:	mov    edx,0x5
    4040:	lea    rsi,[rip+0x8c0e]        # cc55 <_IO_stdin_used@@Base+0xc55>
    4047:	call   2440 <dcgettext@plt>
    404c:	mov    rdi,QWORD PTR [rip+0xd0c5]        # 11118 <stderr@@GLIBC_2.2.5+0x38>
    4053:	mov    r12,rax
    4056:	test   rdi,rdi
    4059:	je     4083 <__ctype_b_loc@plt+0x19b3>
    405b:	call   a540 <__ctype_b_loc@plt+0x7e70>
    4060:	mov    esi,DWORD PTR [rbx]
    4062:	mov    r8,r12
    4065:	xor    edi,edi
    4067:	mov    rcx,rax
    406a:	lea    rdx,[rip+0x8bf0]        # cc61 <_IO_stdin_used@@Base+0xc61>
    4071:	xor    eax,eax
    4073:	call   2620 <error@plt>
    4078:	mov    edi,DWORD PTR [rip+0xcfa2]        # 11020 <exit_failure@@Base>
    407e:	call   23d0 <_exit@plt>
    4083:	mov    esi,DWORD PTR [rbx]
    4085:	mov    rcx,rax
    4088:	lea    rdx,[rip+0x8bd6]        # cc65 <_IO_stdin_used@@Base+0xc65>
    408f:	xor    edi,edi
    4091:	xor    eax,eax
    4093:	call   2620 <error@plt>
    4098:	jmp    4078 <__ctype_b_loc@plt+0x19a8>
    409a:	nop    WORD PTR [rax+rax*1+0x0]
    40a0:	endbr64 
    40a4:	movabs rax,0x6a09e667f3bcc908
    40ae:	mov    QWORD PTR [rdi+0x48],0x0
    40b6:	mov    QWORD PTR [rdi],rax
    40b9:	movabs rax,0xbb67ae8584caa73b
    40c3:	mov    QWORD PTR [rdi+0x8],rax
    40c7:	movabs rax,0x3c6ef372fe94f82b
    40d1:	mov    QWORD PTR [rdi+0x10],rax
    40d5:	movabs rax,0xa54ff53a5f1d36f1
    40df:	mov    QWORD PTR [rdi+0x18],rax
    40e3:	movabs rax,0x510e527fade682d1
    40ed:	mov    QWORD PTR [rdi+0x20],rax
    40f1:	movabs rax,0x9b05688c2b3e6c1f
    40fb:	mov    QWORD PTR [rdi+0x28],rax
    40ff:	movabs rax,0x1f83d9abfb41bd6b
    4109:	mov    QWORD PTR [rdi+0x30],rax
    410d:	movabs rax,0x5be0cd19137e2179
    4117:	mov    QWORD PTR [rdi+0x38],rax
    411b:	mov    QWORD PTR [rdi+0x40],0x0
    4123:	mov    QWORD PTR [rdi+0x50],0x0
    412b:	ret    
    412c:	nop    DWORD PTR [rax+0x0]
    4130:	endbr64 
    4134:	movabs rax,0xcbbb9d5dc1059ed8
    413e:	mov    QWORD PTR [rdi+0x48],0x0
    4146:	mov    QWORD PTR [rdi],rax
    4149:	movabs rax,0x629a292a367cd507
    4153:	mov    QWORD PTR [rdi+0x8],rax
    4157:	movabs rax,0x9159015a3070dd17
    4161:	mov    QWORD PTR [rdi+0x10],rax
    4165:	movabs rax,0x152fecd8f70e5939
    416f:	mov    QWORD PTR [rdi+0x18],rax
    4173:	movabs rax,0x67332667ffc00b31
    417d:	mov    QWORD PTR [rdi+0x20],rax
    4181:	movabs rax,0x8eb44a8768581511
    418b:	mov    QWORD PTR [rdi+0x28],rax
    418f:	movabs rax,0xdb0c2e0d64f98fa7
    4199:	mov    QWORD PTR [rdi+0x30],rax
    419d:	movabs rax,0x47b5481dbefa4fa4
    41a7:	mov    QWORD PTR [rdi+0x38],rax
    41ab:	mov    QWORD PTR [rdi+0x40],0x0
    41b3:	mov    QWORD PTR [rdi+0x50],0x0
    41bb:	ret    
    41bc:	nop    DWORD PTR [rax+0x0]
    41c0:	endbr64 
    41c4:	mov    rax,rsi
    41c7:	xor    edx,edx
    41c9:	nop    DWORD PTR [rax+0x0]
    41d0:	mov    rcx,QWORD PTR [rdi+rdx*1]
    41d4:	bswap  rcx
    41d7:	mov    QWORD PTR [rax+rdx*1],rcx
    41db:	add    rdx,0x8
    41df:	cmp    rdx,0x40
    41e3:	jne    41d0 <__ctype_b_loc@plt+0x1b00>
    41e5:	ret    
    41e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    41f0:	endbr64 
    41f4:	mov    rax,rsi
    41f7:	xor    edx,edx
    41f9:	nop    DWORD PTR [rax+0x0]
    4200:	mov    rcx,QWORD PTR [rdi+rdx*1]
    4204:	bswap  rcx
    4207:	mov    QWORD PTR [rax+rdx*1],rcx
    420b:	add    rdx,0x8
    420f:	cmp    rdx,0x30
    4213:	jne    4200 <__ctype_b_loc@plt+0x1b30>
    4215:	ret    
    4216:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4220:	endbr64 
    4224:	push   r15
    4226:	push   r14
    4228:	push   r13
    422a:	push   r12
    422c:	push   rbp
    422d:	push   rbx
    422e:	sub    rsp,0x1a8
    4235:	mov    QWORD PTR [rsp+0x100],rdx
    423d:	mov    QWORD PTR [rsp+0xf0],rdi
    4245:	mov    rax,QWORD PTR fs:0x28
    424e:	mov    QWORD PTR [rsp+0x198],rax
    4256:	xor    eax,eax
    4258:	mov    rax,rsi
    425b:	and    rax,0xfffffffffffffff8
    425f:	add    rax,rdi
    4262:	mov    QWORD PTR [rsp+0xf8],rax
    426a:	mov    rbx,rax
    426d:	mov    rax,rdx
    4270:	mov    rdx,QWORD PTR [rdx]
    4273:	add    rsi,QWORD PTR [rax+0x40]
    4277:	mov    QWORD PTR [rsp+0xd0],rdx
    427f:	mov    rdx,QWORD PTR [rax+0x8]
    4283:	mov    QWORD PTR [rax+0x40],rsi
    4287:	mov    QWORD PTR [rsp+0x58],rdx
    428c:	mov    rdx,QWORD PTR [rax+0x10]
    4290:	mov    QWORD PTR [rsp+0x60],rdx
    4295:	mov    rdx,QWORD PTR [rax+0x18]
    4299:	mov    QWORD PTR [rsp+0xd8],rdx
    42a1:	mov    rdx,QWORD PTR [rax+0x20]
    42a5:	mov    QWORD PTR [rsp+0x68],rdx
    42aa:	mov    rdx,QWORD PTR [rax+0x28]
    42ae:	mov    QWORD PTR [rsp+0x70],rdx
    42b3:	mov    rdx,QWORD PTR [rax+0x30]
    42b7:	mov    QWORD PTR [rsp+0x78],rdx
    42bc:	mov    rdx,QWORD PTR [rax+0x38]
    42c0:	mov    QWORD PTR [rsp+0xe0],rdx
    42c8:	adc    QWORD PTR [rax+0x48],0x0
    42cd:	lea    rax,[rsp+0x110]
    42d5:	mov    QWORD PTR [rsp+0x108],rax
    42dd:	cmp    rdi,rbx
    42e0:	jae    813e <__ctype_b_loc@plt+0x5a6e>
    42e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    42f0:	mov    rcx,QWORD PTR [rsp+0xf0]
    42f8:	mov    rsi,QWORD PTR [rsp+0x108]
    4300:	xor    eax,eax
    4302:	nop    WORD PTR [rax+rax*1+0x0]
    4308:	mov    rdx,QWORD PTR [rcx+rax*1]
    430c:	bswap  rdx
    430f:	mov    QWORD PTR [rsi+rax*1],rdx
    4313:	add    rax,0x8
    4317:	cmp    rax,0x80
    431d:	jne    4308 <__ctype_b_loc@plt+0x1c38>
    431f:	mov    rdi,QWORD PTR [rsp+0x68]
    4324:	mov    r11,QWORD PTR [rsp+0x70]
    4329:	mov    r10,QWORD PTR [rsp+0x78]
    432e:	mov    rbx,QWORD PTR [rsp+0xd0]
    4336:	mov    rax,rdi
    4339:	mov    rcx,rdi
    433c:	mov    rdx,r11
    433f:	mov    r14,QWORD PTR [rsp+0x58]
    4344:	ror    rcx,0x12
    4348:	ror    rax,0xe
    434c:	xor    rdx,r10
    434f:	mov    r8,QWORD PTR [rsp+0x60]
    4354:	xor    rax,rcx
    4357:	mov    rcx,rdi
    435a:	and    rdx,rdi
    435d:	mov    rsi,QWORD PTR [rsp+0xd8]
    4365:	rol    rcx,0x17
    4369:	xor    rdx,r10
    436c:	mov    r15,QWORD PTR [rsp+0x118]
    4374:	sub    QWORD PTR [rsp+0xf0],0xffffffffffffff80
    437d:	xor    rax,rcx
    4380:	movabs rcx,0x428a2f98d728ae22
    438a:	add    rcx,QWORD PTR [rsp+0x110]
    4392:	add    rcx,QWORD PTR [rsp+0xe0]
    439a:	add    rcx,rax
    439d:	lea    rax,[rcx+rdx*1]
    43a1:	mov    rdx,rbx
    43a4:	mov    rcx,rbx
    43a7:	ror    rdx,0x1c
    43ab:	rol    rcx,0x1e
    43af:	lea    rbp,[rax+rsi*1]
    43b3:	mov    rsi,rbx
    43b6:	xor    rcx,rdx
    43b9:	mov    rdx,rbx
    43bc:	and    rsi,r14
    43bf:	mov    r9,rbp
    43c2:	rol    rdx,0x19
    43c6:	ror    r9,0xe
    43ca:	mov    r12,rbp
    43cd:	xor    rcx,rdx
    43d0:	mov    rdx,rbx
    43d3:	or     rdx,r14
    43d6:	and    rdx,r8
    43d9:	or     rdx,rsi
    43dc:	mov    rsi,rbx
    43df:	add    rdx,rcx
    43e2:	movabs rcx,0x7137449123ef65cd
    43ec:	add    rdx,rax
    43ef:	mov    rax,rdi
    43f2:	add    rcx,r15
    43f5:	xor    rax,r11
    43f8:	add    rcx,r10
    43fb:	mov    r10,rbx
    43fe:	mov    r13,rdx
    4401:	and    rax,rbp
    4404:	xor    rax,r11
    4407:	add    rcx,rax
    440a:	mov    rax,r9
    440d:	mov    r9,rbp
    4410:	ror    r9,0x12
    4414:	xor    r9,rax
    4417:	rol    r12,0x17
    441b:	and    rsi,rdx
    441e:	mov    rax,r12
    4421:	mov    r12,r14
    4424:	xor    rax,r9
    4427:	mov    r9,rdx
    442a:	add    rax,rcx
    442d:	mov    rcx,rdx
    4430:	ror    r9,0x1c
    4434:	rol    rcx,0x1e
    4438:	add    r8,rax
    443b:	xor    rcx,r9
    443e:	mov    r9,rdx
    4441:	rol    r9,0x19
    4445:	xor    rcx,r9
    4448:	mov    r9,rbx
    444b:	mov    rbx,r8
    444e:	or     r9,rdx
    4451:	ror    rbx,0x12
    4455:	and    r9,r14
    4458:	mov    r14,rdi
    445b:	or     r9,rsi
    445e:	add    r9,rcx
    4461:	movabs rcx,0xb5c0fbcfec4d3b2f
    446b:	add    rcx,QWORD PTR [rsp+0x120]
    4473:	add    r9,rax
    4476:	mov    rax,rdi
    4479:	add    rcx,r11
    447c:	xor    rax,rbp
    447f:	and    rax,r8
    4482:	xor    rax,rdi
    4485:	mov    rdi,r8
    4488:	ror    rdi,0xe
    448c:	add    rcx,rax
    448f:	xor    rbx,rdi
    4492:	mov    rdi,r8
    4495:	rol    rdi,0x17
    4499:	mov    rax,rdi
    449c:	xor    rax,rbx
    449f:	mov    rbx,r9
    44a2:	add    rax,rcx
    44a5:	mov    rcx,r9
    44a8:	ror    rbx,0x1c
    44ac:	rol    rcx,0x1e
    44b0:	lea    rdi,[rax+r12*1]
    44b4:	xor    rcx,rbx
    44b7:	mov    rbx,r9
    44ba:	rol    rbx,0x19
    44be:	xor    rcx,rbx
    44c1:	mov    rbx,rdx
    44c4:	or     rbx,r9
    44c7:	and    r13,r9
    44ca:	and    rbx,r10
    44cd:	or     rbx,r13
    44d0:	mov    r13,rdi
    44d3:	add    rbx,rcx
    44d6:	mov    rcx,rbp
    44d9:	ror    r13,0xe
    44dd:	xor    rcx,r8
    44e0:	add    rbx,rax
    44e3:	mov    rax,rcx
    44e6:	movabs rcx,0xe9b5dba58189dbbc
    44f0:	add    rcx,QWORD PTR [rsp+0x128]
    44f8:	and    rax,rdi
    44fb:	add    rcx,r14
    44fe:	xor    rax,rbp
    4501:	add    rcx,rax
    4504:	mov    rax,r13
    4507:	mov    r13,rdi
    450a:	ror    r13,0x12
    450e:	mov    r11,r13
    4511:	mov    r13,rdi
    4514:	rol    r13,0x17
    4518:	xor    r11,rax
    451b:	mov    rax,r13
    451e:	mov    r13,rbx
    4521:	xor    rax,r11
    4524:	rol    r13,0x19
    4528:	add    rax,rcx
    452b:	mov    rcx,rbx
    452e:	ror    rcx,0x1c
    4532:	lea    rsi,[rax+r10*1]
    4536:	mov    r11,rcx
    4539:	mov    rcx,rbx
    453c:	rol    rcx,0x1e
    4540:	xor    rcx,r11
    4543:	xor    rcx,r13
    4546:	mov    r13,r9
    4549:	or     r13,rbx
    454c:	mov    r11,r13
    454f:	mov    r13,r9
    4552:	and    r13,rbx
    4555:	and    r11,rdx
    4558:	or     r11,r13
    455b:	add    r11,rcx
    455e:	mov    rcx,r8
    4561:	xor    rcx,rdi
    4564:	add    r11,rax
    4567:	mov    rax,rcx
    456a:	movabs rcx,0x3956c25bf348b538
    4574:	and    rax,rsi
    4577:	xor    rax,r8
    457a:	add    rcx,QWORD PTR [rsp+0x130]
    4582:	add    rcx,rbp
    4585:	mov    rbp,rsi
    4588:	ror    rbp,0xe
    458c:	add    rcx,rax
    458f:	mov    rax,rbp
    4592:	mov    rbp,rsi
    4595:	ror    rbp,0x12
    4599:	mov    r10,rbp
    459c:	mov    rbp,rsi
    459f:	rol    rbp,0x17
    45a3:	xor    r10,rax
    45a6:	mov    rax,rbp
    45a9:	mov    rbp,r11
    45ac:	xor    rax,r10
    45af:	rol    rbp,0x19
    45b3:	add    rax,rcx
    45b6:	mov    rcx,r11
    45b9:	ror    rcx,0x1c
    45bd:	add    rdx,rax
    45c0:	mov    r10,rcx
    45c3:	mov    rcx,r11
    45c6:	rol    rcx,0x1e
    45ca:	xor    rcx,r10
    45cd:	xor    rcx,rbp
    45d0:	mov    rbp,rbx
    45d3:	or     rbp,r11
    45d6:	mov    r10,rbp
    45d9:	mov    rbp,rbx
    45dc:	and    rbp,r11
    45df:	and    r10,r9
    45e2:	or     r10,rbp
    45e5:	movabs rbp,0x59f111f1b605d019
    45ef:	add    rbp,QWORD PTR [rsp+0x138]
    45f7:	add    r10,rcx
    45fa:	mov    rcx,rdi
    45fd:	add    r8,rbp
    4600:	mov    rbp,rdx
    4603:	xor    rcx,rsi
    4606:	ror    rbp,0x12
    460a:	add    r10,rax
    460d:	and    rcx,rdx
    4610:	mov    rax,rbp
    4613:	mov    rbp,r10
    4616:	xor    rcx,rdi
    4619:	add    r8,rcx
    461c:	mov    rcx,rdx
    461f:	ror    rcx,0xe
    4623:	xor    rax,rcx
    4626:	mov    rcx,rdx
    4629:	rol    rcx,0x17
    462d:	xor    rcx,rax
    4630:	add    rcx,r8
    4633:	ror    rbp,0x1c
    4637:	mov    rax,rbp
    463a:	mov    rbp,r10
    463d:	add    r9,rcx
    4640:	rol    rbp,0x1e
    4644:	mov    r8,rbp
    4647:	mov    rbp,r10
    464a:	xor    r8,rax
    464d:	rol    rbp,0x19
    4651:	xor    r8,rbp
    4654:	mov    rbp,r11
    4657:	or     rbp,r10
    465a:	mov    rax,rbp
    465d:	mov    rbp,r11
    4660:	and    rbp,r10
    4663:	and    rax,rbx
    4666:	or     rax,rbp
    4669:	movabs rbp,0x923f82a4af194f9b
    4673:	add    rbp,QWORD PTR [rsp+0x140]
    467b:	add    rax,r8
    467e:	add    rdi,rbp
    4681:	mov    rbp,r9
    4684:	add    rax,rcx
    4687:	mov    rcx,rsi
    468a:	ror    rbp,0x12
    468e:	xor    rcx,rdx
    4691:	mov    r8,rbp
    4694:	mov    rbp,rax
    4697:	and    rcx,r9
    469a:	ror    rbp,0x1c
    469e:	xor    rcx,rsi
    46a1:	add    rdi,rcx
    46a4:	mov    rcx,r9
    46a7:	ror    rcx,0xe
    46ab:	xor    r8,rcx
    46ae:	mov    rcx,r9
    46b1:	rol    rcx,0x17
    46b5:	xor    rcx,r8
    46b8:	mov    r8,rbp
    46bb:	mov    rbp,rax
    46be:	rol    rbp,0x1e
    46c2:	add    rcx,rdi
    46c5:	mov    rdi,rbp
    46c8:	mov    rbp,rax
    46cb:	add    rbx,rcx
    46ce:	xor    rdi,r8
    46d1:	rol    rbp,0x19
    46d5:	xor    rdi,rbp
    46d8:	mov    rbp,r10
    46db:	or     rbp,rax
    46de:	mov    r8,rbp
    46e1:	mov    rbp,r10
    46e4:	and    r8,r11
    46e7:	and    rbp,rax
    46ea:	or     r8,rbp
    46ed:	movabs rbp,0xab1c5ed5da6d8118
    46f7:	add    rbp,QWORD PTR [rsp+0x148]
    46ff:	add    r8,rdi
    4702:	add    rsi,rbp
    4705:	mov    rbp,rbx
    4708:	add    r8,rcx
    470b:	mov    rcx,rdx
    470e:	ror    rbp,0x12
    4712:	xor    rcx,r9
    4715:	mov    rdi,rbp
    4718:	mov    rbp,r8
    471b:	and    rcx,rbx
    471e:	ror    rbp,0x1c
    4722:	xor    rcx,rdx
    4725:	add    rsi,rcx
    4728:	mov    rcx,rbx
    472b:	ror    rcx,0xe
    472f:	xor    rdi,rcx
    4732:	mov    rcx,rbx
    4735:	rol    rcx,0x17
    4739:	xor    rcx,rdi
    473c:	mov    rdi,rbp
    473f:	mov    rbp,r8
    4742:	rol    rbp,0x1e
    4746:	add    rcx,rsi
    4749:	mov    rsi,rbp
    474c:	mov    rbp,r8
    474f:	add    r11,rcx
    4752:	xor    rsi,rdi
    4755:	rol    rbp,0x19
    4759:	xor    rsi,rbp
    475c:	mov    rbp,rax
    475f:	or     rbp,r8
    4762:	mov    rdi,rbp
    4765:	mov    rbp,rax
    4768:	and    rbp,r8
    476b:	and    rdi,r10
    476e:	or     rdi,rbp
    4771:	movabs rbp,0xd807aa98a3030242
    477b:	add    rdi,rsi
    477e:	add    rdi,rcx
    4781:	mov    rcx,r9
    4784:	xor    rcx,rbx
    4787:	and    rcx,r11
    478a:	xor    rcx,r9
    478d:	add    rbp,QWORD PTR [rsp+0x150]
    4795:	add    rdx,rbp
    4798:	mov    rbp,r11
    479b:	add    rcx,rdx
    479e:	ror    rbp,0x12
    47a2:	mov    rdx,r11
    47a5:	ror    rdx,0xe
    47a9:	mov    rsi,rbp
    47ac:	mov    rbp,rdi
    47af:	xor    rsi,rdx
    47b2:	mov    rdx,r11
    47b5:	rol    rbp,0x19
    47b9:	rol    rdx,0x17
    47bd:	xor    rdx,rsi
    47c0:	add    rdx,rcx
    47c3:	mov    rcx,rdi
    47c6:	ror    rcx,0x1c
    47ca:	add    r10,rdx
    47cd:	mov    rsi,rcx
    47d0:	mov    rcx,rdi
    47d3:	rol    rcx,0x1e
    47d7:	xor    rcx,rsi
    47da:	xor    rcx,rbp
    47dd:	mov    rbp,r8
    47e0:	or     rbp,rdi
    47e3:	mov    rsi,rbp
    47e6:	mov    rbp,r8
    47e9:	and    rbp,rdi
    47ec:	and    rsi,rax
    47ef:	or     rsi,rbp
    47f2:	mov    rbp,rdi
    47f5:	add    rsi,rcx
    47f8:	movabs rcx,0x12835b0145706fbe
    4802:	add    rcx,QWORD PTR [rsp+0x158]
    480a:	add    rsi,rdx
    480d:	mov    rdx,rbx
    4810:	add    r9,rcx
    4813:	mov    rcx,r10
    4816:	xor    rdx,r11
    4819:	ror    rcx,0x12
    481d:	and    rdx,r10
    4820:	xor    rdx,rbx
    4823:	add    r9,rdx
    4826:	mov    rdx,r10
    4829:	ror    rdx,0xe
    482d:	xor    rcx,rdx
    4830:	mov    rdx,r10
    4833:	rol    rdx,0x17
    4837:	xor    rdx,rcx
    483a:	mov    rcx,rsi
    483d:	add    rdx,r9
    4840:	mov    r9,rsi
    4843:	ror    rcx,0x1c
    4847:	and    rbp,rsi
    484a:	rol    r9,0x1e
    484e:	add    rax,rdx
    4851:	xor    r9,rcx
    4854:	mov    rcx,rsi
    4857:	rol    rcx,0x19
    485b:	xor    r9,rcx
    485e:	mov    rcx,rdi
    4861:	or     rcx,rsi
    4864:	and    rcx,r8
    4867:	or     rcx,rbp
    486a:	mov    rbp,rsi
    486d:	add    rcx,r9
    4870:	mov    r9,r11
    4873:	xor    r9,r10
    4876:	add    rcx,rdx
    4879:	movabs rdx,0x243185be4ee4b28c
    4883:	add    rdx,QWORD PTR [rsp+0x160]
    488b:	and    r9,rax
    488e:	add    rbx,rdx
    4891:	mov    rdx,rax
    4894:	xor    r9,r11
    4897:	ror    rdx,0x12
    489b:	add    rbx,r9
    489e:	mov    r9,rax
    48a1:	ror    r9,0xe
    48a5:	xor    rdx,r9
    48a8:	mov    r9,rax
    48ab:	rol    r9,0x17
    48af:	xor    r9,rdx
    48b2:	mov    rdx,rcx
    48b5:	add    r9,rbx
    48b8:	mov    rbx,rcx
    48bb:	ror    rdx,0x1c
    48bf:	rol    rbx,0x1e
    48c3:	add    r8,r9
    48c6:	xor    rbx,rdx
    48c9:	mov    rdx,rcx
    48cc:	mov    r13,r8
    48cf:	rol    rdx,0x19
    48d3:	xor    rbx,rdx
    48d6:	mov    rdx,rsi
    48d9:	or     rdx,rcx
    48dc:	and    rdx,rdi
    48df:	and    rbp,rcx
    48e2:	ror    r13,0x12
    48e6:	or     rdx,rbp
    48e9:	add    rdx,rbx
    48ec:	movabs rbx,0x550c7dc3d5ffb4e2
    48f6:	add    rbx,QWORD PTR [rsp+0x168]
    48fe:	add    rdx,r9
    4901:	mov    r9,r10
    4904:	add    r11,rbx
    4907:	mov    rbx,rcx
    490a:	xor    r9,rax
    490d:	mov    rbp,rdx
    4910:	and    rbx,rdx
    4913:	and    r9,r8
    4916:	rol    rbp,0x1e
    491a:	xor    r9,r10
    491d:	add    r11,r9
    4920:	mov    r9,r8
    4923:	ror    r9,0xe
    4927:	xor    r13,r9
    492a:	mov    r9,r8
    492d:	rol    r9,0x17
    4931:	xor    r9,r13
    4934:	mov    r13,rdx
    4937:	add    r9,r11
    493a:	ror    r13,0x1c
    493e:	mov    r11,rbp
    4941:	xor    r11,r13
    4944:	mov    r13,rdx
    4947:	add    rdi,r9
    494a:	rol    r13,0x19
    494e:	mov    rbp,rdi
    4951:	xor    r11,r13
    4954:	mov    r13,rcx
    4957:	or     r13,rdx
    495a:	and    r13,rsi
    495d:	or     r13,rbx
    4960:	mov    rbx,QWORD PTR [rsp+0x180]
    4968:	add    r13,r11
    496b:	movabs r11,0x72be5d74f27b896f
    4975:	add    r13,r9
    4978:	mov    r9,rax
    497b:	xor    r9,r8
    497e:	and    r9,rdi
    4981:	xor    r9,rax
    4984:	add    r11,QWORD PTR [rsp+0x170]
    498c:	ror    rbp,0x12
    4990:	add    r10,r11
    4993:	mov    r14,rbp
    4996:	mov    rbp,r13
    4999:	add    r10,r9
    499c:	mov    r9,rdi
    499f:	ror    rbp,0x1c
    49a3:	ror    r9,0xe
    49a7:	xor    r14,r9
    49aa:	mov    r9,rdi
    49ad:	rol    r9,0x17
    49b1:	xor    r9,r14
    49b4:	mov    r14,rbp
    49b7:	mov    rbp,r13
    49ba:	rol    rbp,0x1e
    49be:	add    r9,r10
    49c1:	mov    r10,rbp
    49c4:	mov    rbp,r13
    49c7:	add    rsi,r9
    49ca:	xor    r10,r14
    49cd:	rol    rbp,0x19
    49d1:	xor    r10,rbp
    49d4:	mov    rbp,rdx
    49d7:	or     rbp,r13
    49da:	mov    r14,rbp
    49dd:	mov    rbp,rdx
    49e0:	and    rbp,r13
    49e3:	and    r14,rcx
    49e6:	or     r14,rbp
    49e9:	mov    rbp,rsi
    49ec:	add    r14,r10
    49ef:	ror    rbp,0xe
    49f3:	movabs r10,0x80deb1fe3b1696b1
    49fd:	add    r10,QWORD PTR [rsp+0x178]
    4a05:	add    r14,r9
    4a08:	mov    r9,r8
    4a0b:	add    rax,r10
    4a0e:	xor    r9,rdi
    4a11:	and    r9,rsi
    4a14:	xor    r9,r8
    4a17:	lea    r9,[r9+rax*1]
    4a1b:	mov    rax,rbp
    4a1e:	mov    rbp,rsi
    4a21:	ror    rbp,0x12
    4a25:	mov    r12,rbp
    4a28:	mov    rbp,rsi
    4a2b:	rol    rbp,0x17
    4a2f:	xor    r12,rax
    4a32:	mov    rax,rbp
    4a35:	mov    rbp,r14
    4a38:	xor    rax,r12
    4a3b:	add    rax,r9
    4a3e:	mov    r9,r14
    4a41:	add    rcx,rax
    4a44:	ror    r9,0x1c
    4a48:	mov    r12,r9
    4a4b:	mov    r9,r14
    4a4e:	rol    rbp,0x19
    4a52:	rol    r9,0x1e
    4a56:	xor    r9,r12
    4a59:	xor    r9,rbp
    4a5c:	mov    rbp,r13
    4a5f:	or     rbp,r14
    4a62:	mov    r12,rbp
    4a65:	mov    rbp,r13
    4a68:	and    rbp,r14
    4a6b:	and    r12,rdx
    4a6e:	or     r12,rbp
    4a71:	mov    rbp,rcx
    4a74:	add    r12,r9
    4a77:	mov    r9,rdi
    4a7a:	ror    rbp,0x12
    4a7e:	xor    r9,rsi
    4a81:	add    r12,rax
    4a84:	mov    rax,r9
    4a87:	movabs r9,0x9bdc06a725c71235
    4a91:	add    r9,QWORD PTR [rsp+0x180]
    4a99:	add    r8,r9
    4a9c:	mov    r9,rcx
    4a9f:	and    rax,rcx
    4aa2:	ror    r9,0xe
    4aa6:	xor    rax,rdi
    4aa9:	xor    rbp,r9
    4aac:	mov    r9,rcx
    4aaf:	add    r8,rax
    4ab2:	rol    r9,0x17
    4ab6:	mov    rax,r9
    4ab9:	mov    r9,r12
    4abc:	xor    rax,rbp
    4abf:	rol    r9,0x1e
    4ac3:	mov    rbp,r12
    4ac6:	add    rax,r8
    4ac9:	ror    rbp,0x1c
    4acd:	mov    r8,r9
    4ad0:	mov    r9,r14
    4ad3:	xor    r8,rbp
    4ad6:	mov    rbp,r12
    4ad9:	add    rdx,rax
    4adc:	rol    rbp,0x19
    4ae0:	xor    r8,rbp
    4ae3:	mov    rbp,r14
    4ae6:	or     rbp,r12
    4ae9:	and    rbp,r13
    4aec:	and    r9,r12
    4aef:	ror    rbx,0x13
    4af3:	or     rbp,r9
    4af6:	mov    r9,rsi
    4af9:	xor    r9,rcx
    4afc:	add    rbp,r8
    4aff:	movabs r8,0xc19bf174cf692694
    4b09:	add    r8,QWORD PTR [rsp+0x188]
    4b11:	add    rbp,rax
    4b14:	mov    rax,r9
    4b17:	mov    r9,rdx
    4b1a:	add    rdi,r8
    4b1d:	and    rax,rdx
    4b20:	ror    r9,0xe
    4b24:	xor    rax,rsi
    4b27:	add    rdi,rax
    4b2a:	mov    rax,r9
    4b2d:	mov    r9,rdx
    4b30:	ror    r9,0x12
    4b34:	mov    r8,r9
    4b37:	mov    r9,rdx
    4b3a:	rol    r9,0x17
    4b3e:	xor    r8,rax
    4b41:	mov    rax,r9
    4b44:	mov    r9,rbp
    4b47:	ror    r9,0x1c
    4b4b:	xor    rax,r8
    4b4e:	mov    r8,r9
    4b51:	mov    r9,rbp
    4b54:	add    rax,rdi
    4b57:	rol    r9,0x1e
    4b5b:	add    r13,rax
    4b5e:	mov    rdi,r9
    4b61:	mov    r9,rbp
    4b64:	xor    rdi,r8
    4b67:	rol    r9,0x19
    4b6b:	xor    rdi,r9
    4b6e:	mov    r9,r12
    4b71:	or     r9,rbp
    4b74:	mov    r8,r9
    4b77:	mov    r9,r12
    4b7a:	and    r9,rbp
    4b7d:	and    r8,r14
    4b80:	or     r8,r9
    4b83:	mov    r9,QWORD PTR [rsp+0x180]
    4b8b:	add    r8,rdi
    4b8e:	movabs rdi,0xe49b69c19ef14ad2
    4b98:	rol    r9,0x3
    4b9c:	add    r8,rax
    4b9f:	mov    rax,r9
    4ba2:	mov    r9,QWORD PTR [rsp+0x110]
    4baa:	xor    rax,rbx
    4bad:	mov    rbx,QWORD PTR [rsp+0x180]
    4bb5:	shr    rbx,0x6
    4bb9:	xor    rbx,rax
    4bbc:	add    r9,QWORD PTR [rsp+0x158]
    4bc4:	lea    rax,[rbx+r9*1]
    4bc8:	mov    r9,r15
    4bcb:	mov    rbx,r15
    4bce:	ror    r9,1
    4bd1:	ror    rbx,0x8
    4bd5:	xor    rbx,r9
    4bd8:	mov    r9,r15
    4bdb:	shr    r9,0x7
    4bdf:	xor    rbx,r9
    4be2:	mov    r9,rcx
    4be5:	xor    r9,rdx
    4be8:	add    rbx,rax
    4beb:	mov    rax,r9
    4bee:	add    rdi,rbx
    4bf1:	mov    r9,r13
    4bf4:	and    rax,r13
    4bf7:	add    rsi,rdi
    4bfa:	ror    r9,0xe
    4bfe:	xor    rax,rcx
    4c01:	add    rsi,rax
    4c04:	mov    rax,r9
    4c07:	mov    r9,r13
    4c0a:	ror    r9,0x12
    4c0e:	mov    rdi,r9
    4c11:	mov    r9,r13
    4c14:	rol    r9,0x17
    4c18:	xor    rdi,rax
    4c1b:	mov    rax,r9
    4c1e:	mov    r9,r8
    4c21:	ror    r9,0x1c
    4c25:	xor    rax,rdi
    4c28:	mov    rdi,r9
    4c2b:	mov    r9,r8
    4c2e:	add    rax,rsi
    4c31:	rol    r9,0x1e
    4c35:	add    r14,rax
    4c38:	mov    rsi,r9
    4c3b:	mov    r9,r8
    4c3e:	xor    rsi,rdi
    4c41:	rol    r9,0x19
    4c45:	xor    rsi,r9
    4c48:	mov    r9,rbp
    4c4b:	or     r9,r8
    4c4e:	mov    rdi,r9
    4c51:	mov    r9,rbp
    4c54:	and    r9,r8
    4c57:	and    rdi,r12
    4c5a:	or     rdi,r9
    4c5d:	mov    r9,QWORD PTR [rsp+0x188]
    4c65:	add    rdi,rsi
    4c68:	add    rdi,rax
    4c6b:	ror    r9,0x13
    4c6f:	mov    r11,r9
    4c72:	mov    r9,QWORD PTR [rsp+0x188]
    4c7a:	add    r15,QWORD PTR [rsp+0x160]
    4c82:	rol    r9,0x3
    4c86:	mov    rax,r9
    4c89:	mov    r9,QWORD PTR [rsp+0x188]
    4c91:	xor    rax,r11
    4c94:	shr    r9,0x6
    4c98:	mov    r11,r9
    4c9b:	mov    r9,QWORD PTR [rsp+0x120]
    4ca3:	xor    r11,rax
    4ca6:	ror    r9,1
    4ca9:	lea    rax,[r11+r15*1]
    4cad:	mov    rsi,r9
    4cb0:	mov    r9,QWORD PTR [rsp+0x120]
    4cb8:	ror    r9,0x8
    4cbc:	mov    r11,r9
    4cbf:	mov    r9,QWORD PTR [rsp+0x120]
    4cc7:	xor    r11,rsi
    4cca:	movabs rsi,0xefbe4786384f25e3
    4cd4:	shr    r9,0x7
    4cd8:	xor    r11,r9
    4cdb:	mov    r9,rdx
    4cde:	xor    r9,r13
    4ce1:	add    r11,rax
    4ce4:	mov    rax,r9
    4ce7:	add    rsi,r11
    4cea:	mov    r9,r14
    4ced:	and    rax,r14
    4cf0:	add    rcx,rsi
    4cf3:	ror    r9,0xe
    4cf7:	xor    rax,rdx
    4cfa:	add    rcx,rax
    4cfd:	mov    rax,r9
    4d00:	mov    r9,r14
    4d03:	ror    r9,0x12
    4d07:	mov    rsi,r9
    4d0a:	mov    r9,r14
    4d0d:	rol    r9,0x17
    4d11:	xor    rsi,rax
    4d14:	mov    rax,r9
    4d17:	mov    r9,rdi
    4d1a:	xor    rax,rsi
    4d1d:	rol    r9,0x19
    4d21:	add    rax,rcx
    4d24:	mov    rcx,rdi
    4d27:	ror    rcx,0x1c
    4d2b:	add    r12,rax
    4d2e:	mov    rsi,rcx
    4d31:	mov    rcx,rdi
    4d34:	rol    rcx,0x1e
    4d38:	xor    rcx,rsi
    4d3b:	xor    rcx,r9
    4d3e:	mov    r9,r8
    4d41:	or     r9,rdi
    4d44:	mov    rsi,r9
    4d47:	mov    r9,r8
    4d4a:	and    rsi,rbp
    4d4d:	and    r9,rdi
    4d50:	or     rsi,r9
    4d53:	mov    r9,rbx
    4d56:	add    rsi,rcx
    4d59:	mov    rcx,QWORD PTR [rsp+0x128]
    4d61:	rol    r9,0x3
    4d65:	add    rsi,rax
    4d68:	ror    rcx,1
    4d6b:	mov    r10,rcx
    4d6e:	mov    rcx,QWORD PTR [rsp+0x128]
    4d76:	ror    rcx,0x8
    4d7a:	mov    rax,rcx
    4d7d:	mov    rcx,QWORD PTR [rsp+0x128]
    4d85:	xor    rax,r10
    4d88:	shr    rcx,0x7
    4d8c:	mov    r10,rcx
    4d8f:	mov    rcx,QWORD PTR [rsp+0x120]
    4d97:	add    rcx,QWORD PTR [rsp+0x168]
    4d9f:	xor    r10,rax
    4da2:	lea    rax,[r10+rcx*1]
    4da6:	mov    rcx,rbx
    4da9:	mov    r10,r9
    4dac:	mov    r9,r12
    4daf:	ror    rcx,0x13
    4db3:	rol    r9,0x17
    4db7:	xor    r10,rcx
    4dba:	mov    rcx,rbx
    4dbd:	shr    rcx,0x6
    4dc1:	xor    r10,rcx
    4dc4:	mov    rcx,r13
    4dc7:	xor    rcx,r14
    4dca:	add    r10,rax
    4dcd:	mov    rax,rcx
    4dd0:	movabs rcx,0xfc19dc68b8cd5b5
    4dda:	add    rcx,r10
    4ddd:	and    rax,r12
    4de0:	add    rdx,rcx
    4de3:	mov    rcx,r12
    4de6:	xor    rax,r13
    4de9:	ror    rcx,0xe
    4ded:	add    rdx,rax
    4df0:	mov    rax,rcx
    4df3:	mov    rcx,r12
    4df6:	ror    rcx,0x12
    4dfa:	xor    rcx,rax
    4dfd:	mov    rax,r9
    4e00:	mov    r9,rdi
    4e03:	xor    rax,rcx
    4e06:	mov    rcx,rsi
    4e09:	add    rax,rdx
    4e0c:	mov    rdx,rsi
    4e0f:	ror    rcx,0x1c
    4e13:	rol    rdx,0x1e
    4e17:	add    rbp,rax
    4e1a:	xor    rdx,rcx
    4e1d:	mov    rcx,rsi
    4e20:	mov    r15,rbp
    4e23:	rol    rcx,0x19
    4e27:	and    r9,rsi
    4e2a:	ror    r15,0x12
    4e2e:	xor    rdx,rcx
    4e31:	mov    rcx,rdi
    4e34:	or     rcx,rsi
    4e37:	and    rcx,r8
    4e3a:	or     rcx,r9
    4e3d:	mov    r9,QWORD PTR [rsp+0x130]
    4e45:	add    rcx,rdx
    4e48:	mov    rdx,QWORD PTR [rsp+0x130]
    4e50:	add    rcx,rax
    4e53:	ror    r9,1
    4e56:	ror    rdx,0x8
    4e5a:	mov    rax,rdx
    4e5d:	mov    rdx,QWORD PTR [rsp+0x128]
    4e65:	add    rdx,QWORD PTR [rsp+0x170]
    4e6d:	xor    rax,r9
    4e70:	mov    r9,QWORD PTR [rsp+0x130]
    4e78:	shr    r9,0x7
    4e7c:	xor    r9,rax
    4e7f:	lea    rax,[r9+rdx*1]
    4e83:	mov    rdx,r11
    4e86:	mov    r9,r11
    4e89:	ror    rdx,0x13
    4e8d:	rol    r9,0x3
    4e91:	xor    r9,rdx
    4e94:	mov    rdx,r11
    4e97:	shr    rdx,0x6
    4e9b:	xor    r9,rdx
    4e9e:	mov    rdx,r14
    4ea1:	add    r9,rax
    4ea4:	xor    rdx,r12
    4ea7:	movabs rax,0x240ca1cc77ac9c65
    4eb1:	add    rax,r9
    4eb4:	and    rdx,rbp
    4eb7:	xor    rdx,r14
    4eba:	add    r13,rax
    4ebd:	mov    rax,r15
    4ec0:	mov    r15,rcx
    4ec3:	add    r13,rdx
    4ec6:	mov    rdx,rbp
    4ec9:	ror    rdx,0xe
    4ecd:	xor    rax,rdx
    4ed0:	mov    rdx,rbp
    4ed3:	rol    rdx,0x17
    4ed7:	xor    rdx,rax
    4eda:	add    rdx,r13
    4edd:	mov    r13,rcx
    4ee0:	add    r8,rdx
    4ee3:	ror    r13,0x1c
    4ee7:	mov    rax,r13
    4eea:	mov    r13,rcx
    4eed:	rol    r15,0x19
    4ef1:	rol    r13,0x1e
    4ef5:	xor    r13,rax
    4ef8:	xor    r13,r15
    4efb:	mov    r15,rsi
    4efe:	or     r15,rcx
    4f01:	mov    rax,r15
    4f04:	mov    r15,rsi
    4f07:	and    r15,rcx
    4f0a:	and    rax,rdi
    4f0d:	or     rax,r15
    4f10:	add    rax,r13
    4f13:	mov    r13,QWORD PTR [rsp+0x138]
    4f1b:	add    rax,rdx
    4f1e:	mov    rdx,QWORD PTR [rsp+0x138]
    4f26:	ror    r13,0x8
    4f2a:	ror    rdx,1
    4f2d:	xor    rdx,r13
    4f30:	mov    r13,QWORD PTR [rsp+0x138]
    4f38:	shr    r13,0x7
    4f3c:	xor    r13,rdx
    4f3f:	mov    rdx,QWORD PTR [rsp+0x130]
    4f47:	add    rdx,QWORD PTR [rsp+0x178]
    4f4f:	add    r13,rdx
    4f52:	mov    rdx,r10
    4f55:	ror    rdx,0x13
    4f59:	mov    r15,rdx
    4f5c:	mov    rdx,r10
    4f5f:	rol    rdx,0x3
    4f63:	xor    rdx,r15
    4f66:	mov    r15,r10
    4f69:	shr    r15,0x6
    4f6d:	xor    rdx,r15
    4f70:	lea    r15,[r13+rdx*1+0x0]
    4f75:	mov    r13,r12
    4f78:	movabs rdx,0x2de92c6f592b0275
    4f82:	xor    r13,rbp
    4f85:	add    rdx,r15
    4f88:	mov    QWORD PTR [rsp+0x40],r15
    4f8d:	mov    r15,rax
    4f90:	and    r13,r8
    4f93:	add    r14,rdx
    4f96:	mov    rdx,r8
    4f99:	xor    r13,r12
    4f9c:	ror    rdx,0x12
    4fa0:	add    r14,r13
    4fa3:	mov    r13,r8
    4fa6:	ror    r13,0xe
    4faa:	xor    rdx,r13
    4fad:	mov    r13,r8
    4fb0:	rol    r15,0x1e
    4fb4:	rol    r13,0x17
    4fb8:	xor    r13,rdx
    4fbb:	mov    rdx,rax
    4fbe:	add    r13,r14
    4fc1:	ror    rdx,0x1c
    4fc5:	mov    r14,r15
    4fc8:	mov    r15,rcx
    4fcb:	xor    r14,rdx
    4fce:	mov    rdx,rax
    4fd1:	and    r15,rax
    4fd4:	add    rdi,r13
    4fd7:	rol    rdx,0x19
    4fdb:	xor    r14,rdx
    4fde:	mov    rdx,rcx
    4fe1:	or     rdx,rax
    4fe4:	and    rdx,rsi
    4fe7:	or     rdx,r15
    4fea:	mov    r15,QWORD PTR [rsp+0x140]
    4ff2:	add    rdx,r14
    4ff5:	add    rdx,r13
    4ff8:	mov    r13,QWORD PTR [rsp+0x140]
    5000:	ror    r15,0x8
    5004:	ror    r13,1
    5007:	xor    r13,r15
    500a:	mov    r15,QWORD PTR [rsp+0x140]
    5012:	shr    r15,0x7
    5016:	mov    r14,r15
    5019:	xor    r14,r13
    501c:	mov    r13,QWORD PTR [rsp+0x138]
    5024:	add    r13,QWORD PTR [rsp+0x180]
    502c:	add    r14,r13
    502f:	mov    r13,r9
    5032:	ror    r13,0x13
    5036:	mov    r15,r13
    5039:	mov    r13,r9
    503c:	rol    r13,0x3
    5040:	xor    r13,r15
    5043:	mov    r15,r9
    5046:	shr    r15,0x6
    504a:	xor    r13,r15
    504d:	mov    r15,rdi
    5050:	add    r13,r14
    5053:	movabs r14,0x4a7484aa6ea6e483
    505d:	mov    QWORD PTR [rsp+0x28],r13
    5062:	mov    r13,rbp
    5065:	xor    r13,r8
    5068:	and    r13,rdi
    506b:	xor    r13,rbp
    506e:	add    r14,QWORD PTR [rsp+0x28]
    5073:	ror    r15,0xe
    5077:	add    r12,r14
    507a:	lea    r13,[r13+r12*1+0x0]
    507f:	mov    r12,r15
    5082:	mov    r15,rdi
    5085:	ror    r15,0x12
    5089:	mov    r14,r15
    508c:	mov    r15,rdi
    508f:	rol    r15,0x17
    5093:	xor    r14,r12
    5096:	mov    r12,r15
    5099:	mov    r15,rdx
    509c:	xor    r12,r14
    509f:	rol    r15,0x19
    50a3:	add    r12,r13
    50a6:	mov    r13,rdx
    50a9:	ror    r13,0x1c
    50ad:	add    rsi,r12
    50b0:	mov    r14,r13
    50b3:	mov    r13,rdx
    50b6:	rol    r13,0x1e
    50ba:	xor    r13,r14
    50bd:	xor    r13,r15
    50c0:	mov    r15,rax
    50c3:	or     r15,rdx
    50c6:	mov    r14,r15
    50c9:	mov    r15,rax
    50cc:	and    r15,rdx
    50cf:	and    r14,rcx
    50d2:	or     r14,r15
    50d5:	add    r14,r13
    50d8:	mov    r13,QWORD PTR [rsp+0x148]
    50e0:	add    r14,r12
    50e3:	ror    r13,1
    50e6:	mov    r12,r13
    50e9:	mov    r13,QWORD PTR [rsp+0x148]
    50f1:	ror    r13,0x8
    50f5:	xor    r12,r13
    50f8:	mov    r13,QWORD PTR [rsp+0x148]
    5100:	mov    r15,QWORD PTR [rsp+0x140]
    5108:	add    r15,QWORD PTR [rsp+0x188]
    5110:	shr    r13,0x7
    5114:	xor    r13,r12
    5117:	mov    r12,QWORD PTR [rsp+0x40]
    511c:	add    r13,r15
    511f:	mov    r15,r12
    5122:	rol    r12,0x3
    5126:	ror    r15,0x13
    512a:	xor    r12,r15
    512d:	mov    r15,QWORD PTR [rsp+0x40]
    5132:	shr    r15,0x6
    5136:	xor    r12,r15
    5139:	lea    r15,[r13+r12*1+0x0]
    513e:	mov    r13,r8
    5141:	xor    r13,rdi
    5144:	mov    QWORD PTR [rsp+0x30],r15
    5149:	mov    r12,r13
    514c:	and    r12,rsi
    514f:	mov    r13,r12
    5152:	xor    r13,r8
    5155:	mov    r15,r13
    5158:	movabs r13,0x5cb0a9dcbd41fbd4
    5162:	add    r13,QWORD PTR [rsp+0x30]
    5167:	add    rbp,r13
    516a:	mov    r13,rsi
    516d:	lea    r12,[r15+rbp*1]
    5171:	mov    rbp,rsi
    5174:	ror    r13,0x12
    5178:	mov    r15,r14
    517b:	ror    rbp,0xe
    517f:	rol    r15,0x1e
    5183:	xor    r13,rbp
    5186:	mov    rbp,rsi
    5189:	rol    rbp,0x17
    518d:	xor    rbp,r13
    5190:	mov    r13,r14
    5193:	add    rbp,r12
    5196:	ror    r13,0x1c
    519a:	mov    r12,r15
    519d:	mov    r15,rdx
    51a0:	xor    r12,r13
    51a3:	mov    r13,r14
    51a6:	and    r15,r14
    51a9:	add    rcx,rbp
    51ac:	rol    r13,0x19
    51b0:	xor    r12,r13
    51b3:	mov    r13,rdx
    51b6:	or     r13,r14
    51b9:	and    r13,rax
    51bc:	or     r13,r15
    51bf:	mov    r15,QWORD PTR [rsp+0x150]
    51c7:	add    r13,r12
    51ca:	add    r13,rbp
    51cd:	mov    rbp,QWORD PTR [rsp+0x150]
    51d5:	shr    r15,0x7
    51d9:	ror    rbp,1
    51dc:	mov    r12,rbp
    51df:	mov    rbp,QWORD PTR [rsp+0x150]
    51e7:	ror    rbp,0x8
    51eb:	xor    rbp,r12
    51ee:	mov    r12,QWORD PTR [rsp+0x28]
    51f3:	xor    rbp,r15
    51f6:	add    rbp,QWORD PTR [rsp+0x148]
    51fe:	mov    r15,r12
    5201:	rol    r12,0x3
    5205:	add    rbp,rbx
    5208:	ror    r15,0x13
    520c:	xor    r12,r15
    520f:	mov    r15,QWORD PTR [rsp+0x28]
    5214:	shr    r15,0x6
    5218:	xor    r12,r15
    521b:	mov    r15,rcx
    521e:	add    rbp,r12
    5221:	ror    r15,0x12
    5225:	movabs r12,0x76f988da831153b5
    522f:	mov    QWORD PTR [rsp],rbp
    5233:	mov    rbp,rdi
    5236:	add    r12,QWORD PTR [rsp]
    523a:	xor    rbp,rsi
    523d:	add    r8,r12
    5240:	mov    r12,r15
    5243:	mov    r15,r13
    5246:	and    rbp,rcx
    5249:	rol    r15,0x19
    524d:	xor    rbp,rdi
    5250:	lea    rbp,[rbp+r8*1+0x0]
    5255:	mov    r8,rcx
    5258:	ror    r8,0xe
    525c:	xor    r12,r8
    525f:	mov    r8,rcx
    5262:	rol    r8,0x17
    5266:	xor    r8,r12
    5269:	add    r8,rbp
    526c:	mov    rbp,r13
    526f:	ror    rbp,0x1c
    5273:	add    rax,r8
    5276:	mov    r12,rbp
    5279:	mov    rbp,r13
    527c:	rol    rbp,0x1e
    5280:	xor    rbp,r12
    5283:	xor    rbp,r15
    5286:	mov    r15,r14
    5289:	or     r15,r13
    528c:	mov    r12,r15
    528f:	mov    r15,r14
    5292:	and    r15,r13
    5295:	and    r12,rdx
    5298:	or     r12,r15
    529b:	add    r12,rbp
    529e:	mov    rbp,QWORD PTR [rsp+0x158]
    52a6:	add    r12,r8
    52a9:	mov    r8,QWORD PTR [rsp+0x158]
    52b1:	ror    rbp,1
    52b4:	ror    r8,0x8
    52b8:	xor    r8,rbp
    52bb:	mov    rbp,QWORD PTR [rsp+0x158]
    52c3:	shr    rbp,0x7
    52c7:	xor    r8,rbp
    52ca:	mov    rbp,QWORD PTR [rsp+0x30]
    52cf:	add    r8,QWORD PTR [rsp+0x150]
    52d7:	add    r8,r11
    52da:	mov    r15,rbp
    52dd:	rol    rbp,0x3
    52e1:	ror    r15,0x13
    52e5:	xor    rbp,r15
    52e8:	mov    r15,QWORD PTR [rsp+0x30]
    52ed:	shr    r15,0x6
    52f1:	xor    rbp,r15
    52f4:	add    r8,rbp
    52f7:	mov    rbp,rsi
    52fa:	xor    rbp,rcx
    52fd:	mov    QWORD PTR [rsp+0x38],r8
    5302:	mov    r8,rbp
    5305:	and    r8,rax
    5308:	mov    rbp,r8
    530b:	xor    rbp,rsi
    530e:	mov    r15,rbp
    5311:	movabs rbp,0x983e5152ee66dfab
    531b:	add    rbp,QWORD PTR [rsp+0x38]
    5320:	add    rdi,rbp
    5323:	mov    rbp,rax
    5326:	lea    r8,[r15+rdi*1]
    532a:	mov    rdi,rax
    532d:	ror    rbp,0x12
    5331:	mov    r15,r13
    5334:	ror    rdi,0xe
    5338:	and    r15,r12
    533b:	xor    rbp,rdi
    533e:	mov    rdi,rax
    5341:	rol    rdi,0x17
    5345:	xor    rdi,rbp
    5348:	mov    rbp,r12
    534b:	add    rdi,r8
    534e:	mov    r8,r12
    5351:	ror    rbp,0x1c
    5355:	rol    r8,0x1e
    5359:	add    rdx,rdi
    535c:	xor    r8,rbp
    535f:	mov    rbp,r12
    5362:	rol    rbp,0x19
    5366:	xor    r8,rbp
    5369:	mov    rbp,r13
    536c:	or     rbp,r12
    536f:	and    rbp,r14
    5372:	or     rbp,r15
    5375:	add    rbp,r8
    5378:	add    rbp,rdi
    537b:	mov    rdi,QWORD PTR [rsp+0x160]
    5383:	ror    rdi,1
    5386:	mov    r8,rdi
    5389:	mov    rdi,QWORD PTR [rsp+0x160]
    5391:	ror    rdi,0x8
    5395:	xor    rdi,r8
    5398:	mov    r8,QWORD PTR [rsp+0x160]
    53a0:	shr    r8,0x7
    53a4:	xor    rdi,r8
    53a7:	mov    r8,QWORD PTR [rsp]
    53ab:	add    rdi,QWORD PTR [rsp+0x158]
    53b3:	add    rdi,r10
    53b6:	mov    r15,r8
    53b9:	rol    r8,0x3
    53bd:	ror    r15,0x13
    53c1:	xor    r8,r15
    53c4:	mov    r15,QWORD PTR [rsp]
    53c8:	shr    r15,0x6
    53cc:	xor    r8,r15
    53cf:	mov    r15,r12
    53d2:	add    rdi,r8
    53d5:	and    r15,rbp
    53d8:	movabs r8,0xa831c66d2db43210
    53e2:	mov    QWORD PTR [rsp+0x8],rdi
    53e7:	mov    rdi,rcx
    53ea:	add    r8,QWORD PTR [rsp+0x8]
    53ef:	xor    rdi,rax
    53f2:	add    rsi,r8
    53f5:	mov    r8,rdx
    53f8:	and    rdi,rdx
    53fb:	ror    r8,0x12
    53ff:	xor    rdi,rcx
    5402:	lea    rdi,[rdi+rsi*1]
    5406:	mov    rsi,rdx
    5409:	ror    rsi,0xe
    540d:	xor    r8,rsi
    5410:	mov    rsi,rdx
    5413:	rol    rsi,0x17
    5417:	xor    rsi,r8
    541a:	add    rsi,rdi
    541d:	mov    rdi,rbp
    5420:	ror    rdi,0x1c
    5424:	add    r14,rsi
    5427:	mov    r8,rdi
    542a:	mov    rdi,rbp
    542d:	rol    rdi,0x1e
    5431:	xor    rdi,r8
    5434:	mov    r8,rbp
    5437:	rol    r8,0x19
    543b:	xor    rdi,r8
    543e:	mov    r8,r12
    5441:	or     r8,rbp
    5444:	and    r8,r13
    5447:	or     r8,r15
    544a:	add    r8,rdi
    544d:	mov    rdi,QWORD PTR [rsp+0x168]
    5455:	add    r8,rsi
    5458:	mov    rsi,QWORD PTR [rsp+0x168]
    5460:	ror    rdi,1
    5463:	ror    rsi,0x8
    5467:	xor    rsi,rdi
    546a:	mov    rdi,QWORD PTR [rsp+0x168]
    5472:	shr    rdi,0x7
    5476:	xor    rsi,rdi
    5479:	mov    rdi,QWORD PTR [rsp+0x38]
    547e:	add    rsi,QWORD PTR [rsp+0x160]
    5486:	add    rsi,r9
    5489:	mov    r15,rdi
    548c:	rol    rdi,0x3
    5490:	ror    r15,0x13
    5494:	xor    rdi,r15
    5497:	mov    r15,QWORD PTR [rsp+0x38]
    549c:	shr    r15,0x6
    54a0:	xor    rdi,r15
    54a3:	add    rsi,rdi
    54a6:	mov    rdi,rax
    54a9:	xor    rdi,rdx
    54ac:	mov    QWORD PTR [rsp+0x10],rsi
    54b1:	mov    rsi,rdi
    54b4:	and    rsi,r14
    54b7:	mov    rdi,rsi
    54ba:	xor    rdi,rax
    54bd:	mov    r15,rdi
    54c0:	movabs rdi,0xb00327c898fb213f
    54ca:	add    rdi,QWORD PTR [rsp+0x10]
    54cf:	add    rcx,rdi
    54d2:	mov    rdi,r14
    54d5:	lea    rsi,[r15+rcx*1]
    54d9:	mov    rcx,r14
    54dc:	ror    rdi,0x12
    54e0:	mov    r15,rbp
    54e3:	ror    rcx,0xe
    54e7:	xor    rdi,rcx
    54ea:	mov    rcx,r14
    54ed:	rol    rcx,0x17
    54f1:	xor    rcx,rdi
    54f4:	mov    rdi,r8
    54f7:	add    rcx,rsi
    54fa:	mov    rsi,r8
    54fd:	ror    rdi,0x1c
    5501:	rol    rsi,0x1e
    5505:	add    r13,rcx
    5508:	xor    rsi,rdi
    550b:	mov    rdi,r8
    550e:	rol    rdi,0x19
    5512:	xor    rsi,rdi
    5515:	mov    rdi,rbp
    5518:	and    r15,r8
    551b:	or     rdi,r8
    551e:	and    rdi,r12
    5521:	or     rdi,r15
    5524:	add    rdi,rsi
    5527:	add    rdi,rcx
    552a:	mov    rcx,QWORD PTR [rsp+0x170]
    5532:	ror    rcx,1
    5535:	mov    rsi,rcx
    5538:	mov    rcx,QWORD PTR [rsp+0x170]
    5540:	ror    rcx,0x8
    5544:	xor    rcx,rsi
    5547:	mov    rsi,QWORD PTR [rsp+0x170]
    554f:	shr    rsi,0x7
    5553:	xor    rcx,rsi
    5556:	mov    rsi,QWORD PTR [rsp+0x8]
    555b:	add    rcx,QWORD PTR [rsp+0x168]
    5563:	add    rcx,QWORD PTR [rsp+0x40]
    5568:	mov    r15,rsi
    556b:	rol    rsi,0x3
    556f:	ror    r15,0x13
    5573:	xor    rsi,r15
    5576:	mov    r15,QWORD PTR [rsp+0x8]
    557b:	shr    r15,0x6
    557f:	xor    rsi,r15
    5582:	movabs r15,0xbf597fc7beef0ee4
    558c:	add    rcx,rsi
    558f:	mov    rsi,rcx
    5592:	mov    rcx,rdx
    5595:	xor    rcx,r14
    5598:	add    r15,rsi
    559b:	mov    QWORD PTR [rsp+0x48],rsi
    55a0:	and    rcx,r13
    55a3:	add    rax,r15
    55a6:	mov    r15,rdi
    55a9:	xor    rcx,rdx
    55ac:	lea    rsi,[rcx+rax*1]
    55b0:	mov    rcx,r13
    55b3:	mov    rax,r13
    55b6:	ror    rcx,0xe
    55ba:	ror    rax,0x12
    55be:	xor    rax,rcx
    55c1:	mov    rcx,r13
    55c4:	rol    rcx,0x17
    55c8:	xor    rcx,rax
    55cb:	mov    rax,rdi
    55ce:	add    rcx,rsi
    55d1:	add    r12,rcx
    55d4:	ror    rax,0x1c
    55d8:	rol    r15,0x1e
    55dc:	mov    rsi,r15
    55df:	mov    r15,r8
    55e2:	xor    rsi,rax
    55e5:	mov    rax,rdi
    55e8:	and    r15,rdi
    55eb:	rol    rax,0x19
    55ef:	xor    rsi,rax
    55f2:	mov    rax,r8
    55f5:	or     rax,rdi
    55f8:	and    rax,rbp
    55fb:	or     rax,r15
    55fe:	mov    r15,QWORD PTR [rsp+0x178]
    5606:	add    rax,rsi
    5609:	add    rax,rcx
    560c:	mov    rcx,QWORD PTR [rsp+0x178]
    5614:	shr    r15,0x7
    5618:	ror    rcx,1
    561b:	mov    rsi,rcx
    561e:	mov    rcx,QWORD PTR [rsp+0x178]
    5626:	ror    rcx,0x8
    562a:	xor    rcx,rsi
    562d:	mov    rsi,QWORD PTR [rsp+0x10]
    5632:	xor    rcx,r15
    5635:	add    rcx,QWORD PTR [rsp+0x170]
    563d:	add    rcx,QWORD PTR [rsp+0x28]
    5642:	mov    r15,rsi
    5645:	rol    rsi,0x3
    5649:	ror    r15,0x13
    564d:	xor    rsi,r15
    5650:	mov    r15,QWORD PTR [rsp+0x10]
    5655:	shr    r15,0x6
    5659:	xor    rsi,r15
    565c:	mov    r15,rdi
    565f:	add    rcx,rsi
    5662:	movabs rsi,0xc6e00bf33da88fc2
    566c:	mov    QWORD PTR [rsp+0x18],rcx
    5671:	mov    rcx,r14
    5674:	add    rsi,QWORD PTR [rsp+0x18]
    5679:	xor    rcx,r13
    567c:	add    rdx,rsi
    567f:	mov    rsi,r12
    5682:	and    rcx,r12
    5685:	ror    rsi,0x12
    5689:	xor    rcx,r14
    568c:	lea    rcx,[rcx+rdx*1]
    5690:	mov    rdx,r12
    5693:	ror    rdx,0xe
    5697:	xor    rsi,rdx
    569a:	mov    rdx,r12
    569d:	rol    rdx,0x17
    56a1:	and    r15,rax
    56a4:	xor    rdx,rsi
    56a7:	add    rdx,rcx
    56aa:	mov    rcx,rax
    56ad:	ror    rcx,0x1c
    56b1:	add    rbp,rdx
    56b4:	mov    rsi,rcx
    56b7:	mov    rcx,rax
    56ba:	rol    rcx,0x1e
    56be:	xor    rcx,rsi
    56c1:	mov    rsi,rax
    56c4:	rol    rsi,0x19
    56c8:	xor    rcx,rsi
    56cb:	mov    rsi,rdi
    56ce:	or     rsi,rax
    56d1:	and    rsi,r8
    56d4:	or     rsi,r15
    56d7:	add    rsi,rcx
    56da:	add    rsi,rdx
    56dd:	mov    rdx,QWORD PTR [rsp+0x180]
    56e5:	ror    rdx,1
    56e8:	mov    rcx,rdx
    56eb:	mov    rdx,QWORD PTR [rsp+0x180]
    56f3:	ror    rdx,0x8
    56f7:	xor    rdx,rcx
    56fa:	mov    rcx,QWORD PTR [rsp+0x180]
    5702:	shr    rcx,0x7
    5706:	xor    rdx,rcx
    5709:	mov    rcx,QWORD PTR [rsp+0x48]
    570e:	add    rdx,QWORD PTR [rsp+0x178]
    5716:	add    rdx,QWORD PTR [rsp+0x30]
    571b:	mov    r15,rcx
    571e:	rol    rcx,0x3
    5722:	ror    r15,0x13
    5726:	xor    rcx,r15
    5729:	mov    r15,QWORD PTR [rsp+0x48]
    572e:	shr    r15,0x6
    5732:	xor    rcx,r15
    5735:	add    rdx,rcx
    5738:	movabs rcx,0xd5a79147930aa725
    5742:	mov    r15,rdx
    5745:	mov    rdx,r13
    5748:	xor    rdx,r12
    574b:	add    rcx,r15
    574e:	mov    QWORD PTR [rsp+0x20],r15
    5753:	mov    r15,rax
    5756:	and    rdx,rbp
    5759:	xor    rdx,r13
    575c:	add    r14,rcx
    575f:	mov    rcx,rbp
    5762:	and    r15,rsi
    5765:	add    r14,rdx
    5768:	mov    rdx,rbp
    576b:	ror    rcx,0x12
    576f:	ror    rdx,0xe
    5773:	xor    rcx,rdx
    5776:	mov    rdx,rbp
    5779:	rol    rdx,0x17
    577d:	xor    rdx,rcx
    5780:	mov    rcx,rsi
    5783:	add    rdx,r14
    5786:	mov    r14,rsi
    5789:	ror    rcx,0x1c
    578d:	rol    r14,0x1e
    5791:	add    r8,rdx
    5794:	xor    r14,rcx
    5797:	mov    rcx,rsi
    579a:	rol    rcx,0x19
    579e:	xor    r14,rcx
    57a1:	mov    rcx,rax
    57a4:	or     rcx,rsi
    57a7:	and    rcx,rdi
    57aa:	or     rcx,r15
    57ad:	add    rcx,r14
    57b0:	add    rcx,rdx
    57b3:	mov    rdx,QWORD PTR [rsp+0x188]
    57bb:	ror    rdx,1
    57be:	mov    r14,rdx
    57c1:	mov    rdx,QWORD PTR [rsp+0x188]
    57c9:	ror    rdx,0x8
    57cd:	xor    rdx,r14
    57d0:	mov    r14,QWORD PTR [rsp+0x188]
    57d8:	shr    r14,0x7
    57dc:	xor    rdx,r14
    57df:	mov    r14,QWORD PTR [rsp+0x18]
    57e4:	add    rdx,QWORD PTR [rsp+0x180]
    57ec:	add    rdx,QWORD PTR [rsp]
    57f0:	mov    r15,r14
    57f3:	rol    r14,0x3
    57f7:	ror    r15,0x13
    57fb:	xor    r14,r15
    57fe:	mov    r15,QWORD PTR [rsp+0x18]
    5803:	shr    r15,0x6
    5807:	xor    r14,r15
    580a:	add    rdx,r14
    580d:	mov    r15,rdx
    5810:	mov    rdx,r12
    5813:	xor    rdx,rbp
    5816:	mov    QWORD PTR [rsp+0x80],r15
    581e:	mov    r14,rdx
    5821:	movabs rdx,0x6ca6351e003826f
    582b:	add    rdx,r15
    582e:	and    r14,r8
    5831:	mov    r15,rsi
    5834:	add    r13,rdx
    5837:	mov    rdx,r8
    583a:	xor    r14,r12
    583d:	and    r15,rcx
    5840:	ror    rdx,0xe
    5844:	add    r13,r14
    5847:	mov    r14,rdx
    584a:	mov    rdx,r8
    584d:	ror    rdx,0x12
    5851:	xor    rdx,r14
    5854:	mov    r14,r8
    5857:	rol    r14,0x17
    585b:	xor    r14,rdx
    585e:	mov    rdx,rcx
    5861:	add    r14,r13
    5864:	ror    rdx,0x1c
    5868:	lea    r13,[rdi+r14*1]
    586c:	mov    rdi,rcx
    586f:	rol    rdi,0x1e
    5873:	xor    rdi,rdx
    5876:	mov    rdx,rcx
    5879:	rol    rdx,0x19
    587d:	xor    rdi,rdx
    5880:	mov    rdx,rsi
    5883:	or     rdx,rcx
    5886:	and    rdx,rax
    5889:	or     rdx,r15
    588c:	add    rdx,rdi
    588f:	mov    rdi,rbx
    5892:	ror    rdi,1
    5895:	add    rdx,r14
    5898:	mov    r14,rdi
    589b:	mov    rdi,rbx
    589e:	ror    rdi,0x8
    58a2:	xor    rdi,r14
    58a5:	mov    r14,rbx
    58a8:	shr    r14,0x7
    58ac:	xor    rdi,r14
    58af:	mov    r14,QWORD PTR [rsp+0x20]
    58b4:	add    rdi,QWORD PTR [rsp+0x188]
    58bc:	add    rdi,QWORD PTR [rsp+0x38]
    58c1:	mov    r15,r14
    58c4:	ror    r15,0x13
    58c8:	rol    r14,0x3
    58cc:	xor    r14,r15
    58cf:	mov    r15,QWORD PTR [rsp+0x20]
    58d4:	shr    r15,0x6
    58d8:	xor    r14,r15
    58db:	mov    r15,rcx
    58de:	add    rdi,r14
    58e1:	and    r15,rdx
    58e4:	movabs r14,0x142929670a0e6e70
    58ee:	mov    QWORD PTR [rsp+0x50],rdi
    58f3:	mov    rdi,rbp
    58f6:	add    r14,QWORD PTR [rsp+0x50]
    58fb:	xor    rdi,r8
    58fe:	add    r12,r14
    5901:	mov    r14,r13
    5904:	and    rdi,r13
    5907:	ror    r14,0xe
    590b:	xor    rdi,rbp
    590e:	lea    rdi,[rdi+r12*1]
    5912:	mov    r12,r13
    5915:	ror    r12,0x12
    5919:	xor    r12,r14
    591c:	mov    r14,r13
    591f:	rol    r14,0x17
    5923:	xor    r12,r14
    5926:	mov    r14,rdx
    5929:	add    r12,rdi
    592c:	ror    r14,0x1c
    5930:	lea    rdi,[rax+r12*1]
    5934:	mov    rax,rdx
    5937:	rol    rax,0x1e
    593b:	xor    rax,r14
    593e:	mov    r14,rdx
    5941:	rol    r14,0x19
    5945:	xor    rax,r14
    5948:	mov    r14,rcx
    594b:	or     r14,rdx
    594e:	and    r14,rsi
    5951:	or     r14,r15
    5954:	mov    r15,QWORD PTR [rsp+0x80]
    595c:	add    r14,rax
    595f:	mov    rax,r11
    5962:	add    r12,r14
    5965:	mov    r14,r11
    5968:	ror    rax,0x8
    596c:	ror    r14,1
    596f:	xor    rax,r14
    5972:	mov    r14,r11
    5975:	shr    r14,0x7
    5979:	xor    rax,r14
    597c:	mov    r14,r15
    597f:	add    rbx,rax
    5982:	mov    rax,r15
    5985:	ror    r14,0x13
    5989:	add    rbx,QWORD PTR [rsp+0x8]
    598e:	rol    rax,0x3
    5992:	xor    rax,r14
    5995:	mov    r14,r15
    5998:	shr    r14,0x6
    599c:	xor    rax,r14
    599f:	mov    r14,rdx
    59a2:	lea    r15,[rbx+rax*1]
    59a6:	mov    rbx,r8
    59a9:	and    r14,r12
    59ac:	xor    rbx,r13
    59af:	mov    rax,rbx
    59b2:	movabs rbx,0x27b70a8546d22ffc
    59bc:	add    rbx,r15
    59bf:	and    rax,rdi
    59c2:	xor    rax,r8
    59c5:	add    rbp,rbx
    59c8:	mov    rbx,rdi
    59cb:	add    rbp,rax
    59ce:	mov    rax,rdi
    59d1:	ror    rbx,0xe
    59d5:	ror    rax,0x12
    59d9:	xor    rax,rbx
    59dc:	mov    rbx,rdi
    59df:	rol    rbx,0x17
    59e3:	xor    rax,rbx
    59e6:	mov    rbx,r12
    59e9:	add    rax,rbp
    59ec:	mov    rbp,r12
    59ef:	rol    rbx,0x1e
    59f3:	ror    rbp,0x1c
    59f7:	add    rsi,rax
    59fa:	xor    rbx,rbp
    59fd:	mov    rbp,r12
    5a00:	rol    rbp,0x19
    5a04:	xor    rbx,rbp
    5a07:	mov    rbp,rdx
    5a0a:	or     rbp,r12
    5a0d:	and    rbp,rcx
    5a10:	or     rbp,r14
    5a13:	mov    r14,QWORD PTR [rsp+0x50]
    5a18:	add    rbx,rbp
    5a1b:	mov    rbp,r10
    5a1e:	add    rbx,rax
    5a21:	mov    rax,r10
    5a24:	ror    rbp,1
    5a27:	ror    rax,0x8
    5a2b:	xor    rax,rbp
    5a2e:	mov    rbp,r10
    5a31:	shr    rbp,0x7
    5a35:	xor    rax,rbp
    5a38:	mov    rbp,r14
    5a3b:	add    r11,rax
    5a3e:	mov    rax,r14
    5a41:	ror    rbp,0x13
    5a45:	add    r11,QWORD PTR [rsp+0x10]
    5a4a:	rol    rax,0x3
    5a4e:	xor    rax,rbp
    5a51:	mov    rbp,r14
    5a54:	shr    rbp,0x6
    5a58:	xor    rax,rbp
    5a5b:	mov    rbp,r13
    5a5e:	xor    rbp,rdi
    5a61:	lea    r14,[r11+rax*1]
    5a65:	movabs r11,0x2e1b21385c26c926
    5a6f:	mov    rax,rbp
    5a72:	add    r11,r14
    5a75:	mov    rbp,rsi
    5a78:	and    rax,rsi
    5a7b:	add    r8,r11
    5a7e:	ror    rbp,0x12
    5a82:	mov    r11,rsi
    5a85:	xor    rax,r13
    5a88:	ror    r11,0xe
    5a8c:	add    r8,rax
    5a8f:	mov    rax,rbp
    5a92:	mov    rbp,rbx
    5a95:	xor    rax,r11
    5a98:	mov    r11,rsi
    5a9b:	rol    rbp,0x1e
    5a9f:	rol    r11,0x17
    5aa3:	xor    rax,r11
    5aa6:	mov    r11,rbx
    5aa9:	add    rax,r8
    5aac:	ror    r11,0x1c
    5ab0:	mov    r8,rbp
    5ab3:	mov    rbp,r12
    5ab6:	xor    r8,r11
    5ab9:	mov    r11,rbx
    5abc:	and    rbp,rbx
    5abf:	add    rcx,rax
    5ac2:	rol    r11,0x19
    5ac6:	xor    r8,r11
    5ac9:	mov    r11,r12
    5acc:	or     r11,rbx
    5acf:	and    r11,rdx
    5ad2:	or     r11,rbp
    5ad5:	mov    rbp,r9
    5ad8:	add    r8,r11
    5adb:	ror    rbp,0x8
    5adf:	mov    r11,r9
    5ae2:	add    r8,rax
    5ae5:	ror    r11,1
    5ae8:	mov    rax,rbp
    5aeb:	mov    rbp,r15
    5aee:	xor    rax,r11
    5af1:	mov    r11,r9
    5af4:	ror    rbp,0x13
    5af8:	shr    r11,0x7
    5afc:	xor    rax,r11
    5aff:	mov    r11,rbp
    5b02:	mov    rbp,r15
    5b05:	rol    rbp,0x3
    5b09:	add    r10,rax
    5b0c:	add    r10,QWORD PTR [rsp+0x48]
    5b11:	mov    rax,rbp
    5b14:	mov    rbp,r15
    5b17:	xor    rax,r11
    5b1a:	shr    rbp,0x6
    5b1e:	xor    rax,rbp
    5b21:	mov    rbp,rdi
    5b24:	xor    rbp,rsi
    5b27:	lea    r11,[r10+rax*1]
    5b2b:	movabs r10,0x4d2c6dfc5ac42aed
    5b35:	mov    rax,rbp
    5b38:	mov    rbp,rcx
    5b3b:	add    r10,r11
    5b3e:	mov    QWORD PTR [rsp+0x88],r11
    5b46:	ror    rbp,0xe
    5b4a:	and    rax,rcx
    5b4d:	add    r13,r10
    5b50:	mov    r10,rbp
    5b53:	mov    rbp,rcx
    5b56:	xor    rax,rdi
    5b59:	ror    rbp,0x12
    5b5d:	add    r13,rax
    5b60:	mov    rax,rbp
    5b63:	mov    rbp,rcx
    5b66:	xor    rax,r10
    5b69:	rol    rbp,0x17
    5b6d:	xor    rax,rbp
    5b70:	mov    rbp,r8
    5b73:	ror    rbp,0x1c
    5b77:	add    rax,r13
    5b7a:	mov    r13,QWORD PTR [rsp+0x40]
    5b7f:	mov    r11,rbp
    5b82:	mov    rbp,r8
    5b85:	add    rdx,rax
    5b88:	rol    rbp,0x1e
    5b8c:	mov    r10,rbp
    5b8f:	mov    rbp,r8
    5b92:	xor    r10,r11
    5b95:	rol    rbp,0x19
    5b99:	xor    r10,rbp
    5b9c:	mov    rbp,rbx
    5b9f:	or     rbp,r8
    5ba2:	mov    r11,rbp
    5ba5:	mov    rbp,rbx
    5ba8:	and    rbp,r8
    5bab:	and    r11,r12
    5bae:	or     r11,rbp
    5bb1:	mov    rbp,r14
    5bb4:	add    r10,r11
    5bb7:	mov    r11,r13
    5bba:	ror    rbp,0x13
    5bbe:	add    r10,rax
    5bc1:	mov    rax,r13
    5bc4:	ror    r11,1
    5bc7:	ror    rax,0x8
    5bcb:	xor    rax,r11
    5bce:	mov    r11,r13
    5bd1:	shr    r11,0x7
    5bd5:	xor    rax,r11
    5bd8:	mov    r11,rbp
    5bdb:	mov    rbp,r14
    5bde:	rol    rbp,0x3
    5be2:	add    r9,rax
    5be5:	add    r9,QWORD PTR [rsp+0x18]
    5bea:	mov    rax,rbp
    5bed:	mov    rbp,r14
    5bf0:	xor    rax,r11
    5bf3:	shr    rbp,0x6
    5bf7:	xor    rax,rbp
    5bfa:	add    r9,rax
    5bfd:	mov    rbp,r9
    5c00:	mov    r9,rsi
    5c03:	xor    r9,rcx
    5c06:	mov    QWORD PTR [rsp+0x40],rbp
    5c0b:	mov    rax,r9
    5c0e:	movabs r9,0x53380d139d95b3df
    5c18:	add    r9,rbp
    5c1b:	and    rax,rdx
    5c1e:	mov    rbp,rdx
    5c21:	xor    rax,rsi
    5c24:	add    rdi,r9
    5c27:	ror    rbp,0x12
    5c2b:	mov    r9,rdx
    5c2e:	add    rdi,rax
    5c31:	ror    r9,0xe
    5c35:	mov    rax,rbp
    5c38:	mov    rbp,r10
    5c3b:	xor    rax,r9
    5c3e:	mov    r9,rdx
    5c41:	rol    r9,0x17
    5c45:	xor    rax,r9
    5c48:	add    rax,rdi
    5c4b:	mov    rdi,r10
    5c4e:	ror    rdi,0x1c
    5c52:	rol    rbp,0x19
    5c56:	lea    r9,[r12+rax*1]
    5c5a:	mov    r12,QWORD PTR [rsp+0x28]
    5c5f:	mov    r11,rdi
    5c62:	mov    rdi,r10
    5c65:	rol    rdi,0x1e
    5c69:	xor    rdi,r11
    5c6c:	xor    rdi,rbp
    5c6f:	mov    rbp,r8
    5c72:	or     rbp,r10
    5c75:	mov    r11,rbp
    5c78:	mov    rbp,r8
    5c7b:	and    rbp,r10
    5c7e:	and    r11,rbx
    5c81:	or     r11,rbp
    5c84:	add    rdi,r11
    5c87:	mov    r11,r12
    5c8a:	add    rdi,rax
    5c8d:	mov    rax,r12
    5c90:	ror    r11,1
    5c93:	ror    rax,0x8
    5c97:	xor    rax,r11
    5c9a:	mov    r11,r12
    5c9d:	shr    r11,0x7
    5ca1:	xor    rax,r11
    5ca4:	add    rax,r13
    5ca7:	mov    r13,QWORD PTR [rsp+0x88]
    5caf:	add    rax,QWORD PTR [rsp+0x20]
    5cb4:	mov    rbp,r13
    5cb7:	mov    r11,r13
    5cba:	ror    rbp,0x13
    5cbe:	rol    r11,0x3
    5cc2:	xor    r11,rbp
    5cc5:	mov    rbp,r13
    5cc8:	shr    rbp,0x6
    5ccc:	xor    r11,rbp
    5ccf:	mov    rbp,r10
    5cd2:	add    rax,r11
    5cd5:	mov    r11,rcx
    5cd8:	xor    r11,rdx
    5cdb:	mov    r13,rax
    5cde:	mov    rax,r11
    5ce1:	mov    QWORD PTR [rsp+0x28],r13
    5ce6:	movabs r11,0x650a73548baf63de
    5cf0:	add    r11,r13
    5cf3:	and    rax,r9
    5cf6:	mov    r13,QWORD PTR [rsp+0x30]
    5cfb:	xor    rax,rcx
    5cfe:	add    rsi,r11
    5d01:	mov    r11,r9
    5d04:	add    rsi,rax
    5d07:	mov    rax,r9
    5d0a:	ror    r11,0xe
    5d0e:	ror    rax,0x12
    5d12:	xor    rax,r11
    5d15:	mov    r11,r9
    5d18:	and    rbp,rdi
    5d1b:	rol    r11,0x17
    5d1f:	xor    rax,r11
    5d22:	add    rax,rsi
    5d25:	mov    rsi,rdi
    5d28:	ror    rsi,0x1c
    5d2c:	add    rbx,rax
    5d2f:	mov    r11,rsi
    5d32:	mov    rsi,rdi
    5d35:	rol    rsi,0x1e
    5d39:	xor    rsi,r11
    5d3c:	mov    r11,rdi
    5d3f:	rol    r11,0x19
    5d43:	xor    rsi,r11
    5d46:	mov    r11,r10
    5d49:	or     r11,rdi
    5d4c:	and    r11,r8
    5d4f:	or     r11,rbp
    5d52:	add    rsi,r11
    5d55:	mov    r11,r13
    5d58:	add    rsi,rax
    5d5b:	mov    rax,r13
    5d5e:	ror    r11,1
    5d61:	ror    rax,0x8
    5d65:	xor    rax,r11
    5d68:	mov    r11,r13
    5d6b:	shr    r11,0x7
    5d6f:	xor    rax,r11
    5d72:	add    rax,r12
    5d75:	mov    r12,QWORD PTR [rsp+0x40]
    5d7a:	add    rax,QWORD PTR [rsp+0x80]
    5d82:	mov    r11,r12
    5d85:	ror    r11,0x13
    5d89:	mov    rbp,r11
    5d8c:	mov    r11,r12
    5d8f:	shr    r12,0x6
    5d93:	rol    r11,0x3
    5d97:	xor    r11,rbp
    5d9a:	mov    rbp,rdx
    5d9d:	xor    r11,r12
    5da0:	xor    rbp,r9
    5da3:	add    rax,r11
    5da6:	movabs r11,0x766a0abb3c77b2a8
    5db0:	mov    r12,rax
    5db3:	mov    rax,rbp
    5db6:	mov    rbp,rbx
    5db9:	and    rax,rbx
    5dbc:	mov    QWORD PTR [rsp+0x30],r12
    5dc1:	xor    rax,rdx
    5dc4:	add    r11,r12
    5dc7:	ror    rbp,0x12
    5dcb:	add    rcx,r11
    5dce:	mov    r11,rbx
    5dd1:	add    rcx,rax
    5dd4:	ror    r11,0xe
    5dd8:	mov    rax,rbp
    5ddb:	mov    rbp,rsi
    5dde:	xor    rax,r11
    5de1:	mov    r11,rbx
    5de4:	rol    rbp,0x19
    5de8:	rol    r11,0x17
    5dec:	xor    rax,r11
    5def:	add    rax,rcx
    5df2:	mov    rcx,rsi
    5df5:	ror    rcx,0x1c
    5df9:	lea    r11,[r8+rax*1]
    5dfd:	mov    r8,rcx
    5e00:	mov    rcx,rsi
    5e03:	rol    rcx,0x1e
    5e07:	xor    rcx,r8
    5e0a:	xor    rcx,rbp
    5e0d:	mov    rbp,rdi
    5e10:	or     rbp,rsi
    5e13:	mov    r8,rbp
    5e16:	mov    rbp,rdi
    5e19:	and    rbp,rsi
    5e1c:	and    r8,r10
    5e1f:	or     r8,rbp
    5e22:	add    rcx,r8
    5e25:	mov    r8,QWORD PTR [rsp]
    5e29:	add    rcx,rax
    5e2c:	mov    r12,r8
    5e2f:	mov    rax,r8
    5e32:	ror    rax,1
    5e35:	ror    r12,0x8
    5e39:	xor    r12,rax
    5e3c:	mov    rax,r8
    5e3f:	shr    rax,0x7
    5e43:	xor    r12,rax
    5e46:	add    r12,r13
    5e49:	add    r12,QWORD PTR [rsp+0x50]
    5e4e:	mov    rbp,QWORD PTR [rsp+0x28]
    5e53:	mov    r13,r9
    5e56:	mov    r8,rbp
    5e59:	mov    rax,rbp
    5e5c:	ror    r8,0x13
    5e60:	rol    rax,0x3
    5e64:	xor    rax,r8
    5e67:	mov    r8,rbp
    5e6a:	shr    r8,0x6
    5e6e:	xor    rax,r8
    5e71:	xor    r13,rbx
    5e74:	movabs r8,0x81c2c92e47edaee6
    5e7e:	lea    rbp,[r12+rax*1]
    5e82:	mov    rax,r13
    5e85:	mov    r13,QWORD PTR [rsp+0x38]
    5e8a:	mov    QWORD PTR [rsp+0x90],rbp
    5e92:	add    r8,rbp
    5e95:	mov    rbp,r11
    5e98:	and    rax,r11
    5e9b:	ror    rbp,0xe
    5e9f:	add    rdx,r8
    5ea2:	xor    rax,r9
    5ea5:	mov    r12,r13
    5ea8:	mov    r8,rbp
    5eab:	mov    rbp,r11
    5eae:	add    rdx,rax
    5eb1:	ror    r12,0x8
    5eb5:	ror    rbp,0x12
    5eb9:	mov    rax,rbp
    5ebc:	mov    rbp,r11
    5ebf:	xor    rax,r8
    5ec2:	rol    rbp,0x17
    5ec6:	xor    rax,rbp
    5ec9:	mov    rbp,rcx
    5ecc:	add    rax,rdx
    5ecf:	mov    rdx,rcx
    5ed2:	rol    rbp,0x19
    5ed6:	ror    rdx,0x1c
    5eda:	add    r10,rax
    5edd:	mov    r8,rdx
    5ee0:	mov    rdx,rcx
    5ee3:	rol    rdx,0x1e
    5ee7:	xor    rdx,r8
    5eea:	xor    rdx,rbp
    5eed:	mov    rbp,rsi
    5ef0:	or     rbp,rcx
    5ef3:	mov    r8,rbp
    5ef6:	mov    rbp,rsi
    5ef9:	and    rbp,rcx
    5efc:	and    r8,rdi
    5eff:	or     r8,rbp
    5f02:	mov    rbp,r13
    5f05:	ror    rbp,1
    5f08:	add    rdx,r8
    5f0b:	xor    r12,rbp
    5f0e:	mov    rbp,r13
    5f11:	add    rdx,rax
    5f14:	shr    rbp,0x7
    5f18:	xor    r12,rbp
    5f1b:	mov    rbp,QWORD PTR [rsp+0x30]
    5f20:	add    r12,QWORD PTR [rsp]
    5f24:	add    r12,r15
    5f27:	mov    r8,rbp
    5f2a:	mov    rax,rbp
    5f2d:	ror    r8,0x13
    5f31:	rol    rax,0x3
    5f35:	xor    rax,r8
    5f38:	mov    r8,rbp
    5f3b:	mov    rbp,r10
    5f3e:	shr    r8,0x6
    5f42:	ror    rbp,0xe
    5f46:	xor    rax,r8
    5f49:	add    rax,r12
    5f4c:	movabs r12,0x92722c851482353b
    5f56:	mov    r8,rax
    5f59:	mov    rax,rbx
    5f5c:	xor    rax,r11
    5f5f:	add    r12,r8
    5f62:	mov    QWORD PTR [rsp+0x38],r8
    5f67:	mov    r8,rbp
    5f6a:	and    rax,r10
    5f6d:	mov    rbp,r10
    5f70:	add    r9,r12
    5f73:	xor    rax,rbx
    5f76:	ror    rbp,0x12
    5f7a:	add    r9,rax
    5f7d:	mov    rax,rbp
    5f80:	mov    rbp,r10
    5f83:	xor    rax,r8
    5f86:	rol    rbp,0x17
    5f8a:	xor    rax,rbp
    5f8d:	mov    rbp,rdx
    5f90:	add    rax,r9
    5f93:	rol    rbp,0x1e
    5f97:	lea    r9,[rdi+rax*1]
    5f9b:	mov    rdi,rdx
    5f9e:	mov    r8,rbp
    5fa1:	mov    rbp,rcx
    5fa4:	ror    rdi,0x1c
    5fa8:	and    rbp,rdx
    5fab:	xor    r8,rdi
    5fae:	mov    rdi,rdx
    5fb1:	rol    rdi,0x19
    5fb5:	xor    r8,rdi
    5fb8:	mov    rdi,rcx
    5fbb:	or     rdi,rdx
    5fbe:	and    rdi,rsi
    5fc1:	or     rdi,rbp
    5fc4:	add    rdi,r8
    5fc7:	mov    r8,QWORD PTR [rsp+0x8]
    5fcc:	lea    r12,[rdi+rax*1]
    5fd0:	mov    rbp,r8
    5fd3:	mov    rax,r8
    5fd6:	ror    rax,1
    5fd9:	ror    rbp,0x8
    5fdd:	xor    rbp,rax
    5fe0:	mov    rax,r8
    5fe3:	shr    rax,0x7
    5fe7:	xor    rbp,rax
    5fea:	add    rbp,r13
    5fed:	mov    r13,QWORD PTR [rsp+0x90]
    5ff5:	add    rbp,r14
    5ff8:	mov    rdi,r13
    5ffb:	mov    rax,r13
    5ffe:	ror    rdi,0x13
    6002:	rol    rax,0x3
    6006:	xor    rax,rdi
    6009:	mov    rdi,r13
    600c:	shr    rdi,0x6
    6010:	xor    rax,rdi
    6013:	lea    rdi,[rbp+rax*1+0x0]
    6018:	mov    rbp,r9
    601b:	mov    r13,rdi
    601e:	mov    rdi,r11
    6021:	ror    rbp,0x12
    6025:	xor    rdi,r10
    6028:	mov    QWORD PTR [rsp+0x98],r13
    6030:	mov    rax,rdi
    6033:	movabs rdi,0xa2bfe8a14cf10364
    603d:	add    rdi,r13
    6040:	and    rax,r9
    6043:	xor    rax,r11
    6046:	add    rbx,rdi
    6049:	mov    rdi,r9
    604c:	add    rbx,rax
    604f:	ror    rdi,0xe
    6053:	mov    rax,rbp
    6056:	mov    rbp,rdx
    6059:	xor    rax,rdi
    605c:	mov    rdi,r9
    605f:	and    rbp,r12
    6062:	rol    rdi,0x17
    6066:	xor    rax,rdi
    6069:	mov    rdi,r12
    606c:	add    rax,rbx
    606f:	ror    rdi,0x1c
    6073:	lea    rbx,[rsi+rax*1]
    6077:	mov    rsi,rdi
    607a:	mov    rdi,r12
    607d:	rol    rdi,0x1e
    6081:	xor    rdi,rsi
    6084:	mov    rsi,r12
    6087:	rol    rsi,0x19
    608b:	xor    rdi,rsi
    608e:	mov    rsi,rdx
    6091:	or     rsi,r12
    6094:	and    rsi,rcx
    6097:	or     rsi,rbp
    609a:	add    rsi,rdi
    609d:	mov    rdi,QWORD PTR [rsp+0x38]
    60a2:	lea    rbp,[rsi+rax*1]
    60a6:	mov    rsi,QWORD PTR [rsp+0x10]
    60ab:	mov    rax,rdi
    60ae:	mov    r13,rsi
    60b1:	mov    r8,rsi
    60b4:	ror    r13,1
    60b7:	ror    r8,0x8
    60bb:	xor    r8,r13
    60be:	mov    r13,rsi
    60c1:	mov    rsi,rdi
    60c4:	shr    r13,0x7
    60c8:	ror    rsi,0x13
    60cc:	rol    rax,0x3
    60d0:	xor    r8,r13
    60d3:	add    r8,QWORD PTR [rsp+0x8]
    60d8:	add    r8,QWORD PTR [rsp+0x88]
    60e0:	xor    rax,rsi
    60e3:	mov    rsi,rdi
    60e6:	shr    rsi,0x6
    60ea:	xor    rax,rsi
    60ed:	movabs rsi,0xa81a664bbc423001
    60f7:	add    rax,r8
    60fa:	mov    rdi,rax
    60fd:	mov    rax,r10
    6100:	xor    rax,r9
    6103:	add    rsi,rdi
    6106:	mov    QWORD PTR [rsp+0xa0],rdi
    610e:	mov    rdi,rbx
    6111:	and    rax,rbx
    6114:	lea    r8,[rsi+r11*1]
    6118:	ror    rdi,0xe
    611c:	xor    rax,r10
    611f:	add    r8,rax
    6122:	mov    rax,rbx
    6125:	ror    rax,0x12
    6129:	xor    rax,rdi
    612c:	mov    rdi,rbx
    612f:	rol    rdi,0x17
    6133:	xor    rax,rdi
    6136:	mov    rdi,rbp
    6139:	add    rax,r8
    613c:	rol    rdi,0x1e
    6140:	mov    r8,QWORD PTR [rsp+0x48]
    6145:	lea    r11,[rcx+rax*1]
    6149:	mov    rcx,rbp
    614c:	mov    rsi,rdi
    614f:	mov    rdi,r12
    6152:	ror    rcx,0x1c
    6156:	and    rdi,rbp
    6159:	xor    rsi,rcx
    615c:	mov    rcx,rbp
    615f:	rol    rcx,0x19
    6163:	xor    rsi,rcx
    6166:	mov    rcx,r12
    6169:	or     rcx,rbp
    616c:	and    rcx,rdx
    616f:	or     rcx,rdi
    6172:	add    rcx,rsi
    6175:	mov    rsi,QWORD PTR [rsp+0x98]
    617d:	lea    r13,[rcx+rax*1]
    6181:	mov    rax,r8
    6184:	mov    rcx,r8
    6187:	ror    rax,1
    618a:	ror    rcx,0x8
    618e:	mov    rdi,rcx
    6191:	mov    rcx,rsi
    6194:	xor    rdi,rax
    6197:	mov    rax,r8
    619a:	ror    rcx,0x13
    619e:	shr    rax,0x7
    61a2:	xor    rdi,rax
    61a5:	mov    rax,rsi
    61a8:	add    rdi,QWORD PTR [rsp+0x10]
    61ad:	add    rdi,QWORD PTR [rsp+0x40]
    61b2:	rol    rax,0x3
    61b6:	xor    rax,rcx
    61b9:	mov    rcx,rsi
    61bc:	shr    rcx,0x6
    61c0:	xor    rax,rcx
    61c3:	mov    rcx,r9
    61c6:	add    rax,rdi
    61c9:	xor    rcx,rbx
    61cc:	mov    rdi,r11
    61cf:	mov    rsi,rax
    61d2:	mov    rax,rcx
    61d5:	ror    rdi,0x12
    61d9:	movabs rcx,0xc24b8b70d0f89791
    61e3:	add    rcx,rsi
    61e6:	and    rax,r11
    61e9:	mov    QWORD PTR [rsp+0x48],rsi
    61ee:	xor    rax,r9
    61f1:	add    r10,rcx
    61f4:	mov    rcx,r11
    61f7:	add    r10,rax
    61fa:	ror    rcx,0xe
    61fe:	mov    rax,rdi
    6201:	mov    rdi,rbp
    6204:	xor    rax,rcx
    6207:	mov    rcx,r11
    620a:	rol    rcx,0x17
    620e:	xor    rax,rcx
    6211:	mov    rcx,r13
    6214:	ror    rcx,0x1c
    6218:	add    rax,r10
    621b:	mov    r10,r13
    621e:	mov    rsi,rcx
    6221:	mov    rcx,r13
    6224:	rol    r10,0x19
    6228:	add    rdx,rax
    622b:	rol    rcx,0x1e
    622f:	xor    rcx,rsi
    6232:	xor    rcx,r10
    6235:	mov    r10,rbp
    6238:	or     r10,r13
    623b:	mov    rsi,r10
    623e:	and    rsi,r12
    6241:	and    rdi,r13
    6244:	or     rsi,rdi
    6247:	add    rsi,rcx
    624a:	mov    rcx,QWORD PTR [rsp+0x18]
    624f:	lea    r10,[rsi+rax*1]
    6253:	mov    rax,rcx
    6256:	mov    rsi,rcx
    6259:	ror    rax,1
    625c:	ror    rsi,0x8
    6260:	xor    rsi,rax
    6263:	mov    rax,rcx
    6266:	shr    rax,0x7
    626a:	xor    rsi,rax
    626d:	add    rsi,r8
    6270:	mov    r8,QWORD PTR [rsp+0xa0]
    6278:	add    rsi,QWORD PTR [rsp+0x28]
    627d:	mov    rcx,r8
    6280:	mov    rax,r8
    6283:	ror    rcx,0x13
    6287:	rol    rax,0x3
    628b:	xor    rax,rcx
    628e:	mov    rcx,r8
    6291:	shr    rcx,0x6
    6295:	xor    rax,rcx
    6298:	mov    rcx,rbx
    629b:	xor    rcx,r11
    629e:	lea    r8,[rsi+rax*1]
    62a2:	mov    rax,rcx
    62a5:	mov    QWORD PTR [rsp+0xa8],r8
    62ad:	movabs rcx,0xc76c51a30654be30
    62b7:	add    rcx,r8
    62ba:	and    rax,rdx
    62bd:	lea    rdi,[rcx+r9*1]
    62c1:	mov    r9,rdx
    62c4:	xor    rax,rbx
    62c7:	ror    r9,0xe
    62cb:	add    rdi,rax
    62ce:	mov    rcx,r9
    62d1:	mov    r9,rdx
    62d4:	ror    r9,0x12
    62d8:	mov    rax,r9
    62db:	mov    r9,rdx
    62de:	xor    rax,rcx
    62e1:	rol    r9,0x17
    62e5:	xor    rax,r9
    62e8:	mov    r9,r10
    62eb:	ror    r9,0x1c
    62ef:	add    rax,rdi
    62f2:	mov    rdi,r10
    62f5:	mov    rcx,r9
    62f8:	mov    r9,r10
    62fb:	add    r12,rax
    62fe:	rol    r9,0x1e
    6302:	mov    rsi,r9
    6305:	mov    r9,r10
    6308:	xor    rsi,rcx
    630b:	rol    r9,0x19
    630f:	xor    rsi,r9
    6312:	mov    r9,r13
    6315:	or     r9,r10
    6318:	mov    rcx,r9
    631b:	mov    r9,r13
    631e:	and    r9,r10
    6321:	and    rcx,rbp
    6324:	or     rcx,r9
    6327:	mov    r9,QWORD PTR [rsp+0x20]
    632c:	add    rcx,rsi
    632f:	mov    rsi,r9
    6332:	lea    r8,[rcx+rax*1]
    6336:	ror    rsi,1
    6339:	mov    rax,rsi
    633c:	mov    rsi,r9
    633f:	shr    r9,0x7
    6343:	ror    rsi,0x8
    6347:	xor    rsi,rax
    634a:	xor    rsi,r9
    634d:	mov    r9,QWORD PTR [rsp+0x48]
    6352:	add    rsi,QWORD PTR [rsp+0x18]
    6357:	add    rsi,QWORD PTR [rsp+0x30]
    635c:	mov    rcx,r9
    635f:	mov    rax,r9
    6362:	ror    rcx,0x13
    6366:	rol    rax,0x3
    636a:	xor    rax,rcx
    636d:	mov    rcx,r9
    6370:	mov    r9,r11
    6373:	shr    rcx,0x6
    6377:	xor    r9,rdx
    637a:	xor    rax,rcx
    637d:	movabs rcx,0xd192e819d6ef5218
    6387:	add    rsi,rax
    638a:	mov    rax,r9
    638d:	mov    r9,r12
    6390:	and    rax,r12
    6393:	add    rcx,rsi
    6396:	ror    r9,0x12
    639a:	mov    QWORD PTR [rsp+0xb0],rsi
    63a2:	xor    rax,r11
    63a5:	lea    rsi,[rcx+rbx*1]
    63a9:	mov    rcx,r12
    63ac:	mov    rbx,QWORD PTR [rsp+0x80]
    63b4:	add    rsi,rax
    63b7:	ror    rcx,0xe
    63bb:	mov    rax,r9
    63be:	mov    r9,r8
    63c1:	xor    rax,rcx
    63c4:	mov    rcx,r12
    63c7:	ror    r9,0x1c
    63cb:	rol    rcx,0x17
    63cf:	xor    rax,rcx
    63d2:	mov    rcx,r8
    63d5:	add    rax,rsi
    63d8:	rol    rcx,0x1e
    63dc:	add    rbp,rax
    63df:	xor    rcx,r9
    63e2:	mov    r9,r8
    63e5:	and    rdi,r8
    63e8:	rol    r9,0x19
    63ec:	xor    rcx,r9
    63ef:	mov    r9,r10
    63f2:	or     r9,r8
    63f5:	mov    rsi,r9
    63f8:	and    rsi,r13
    63fb:	or     rsi,rdi
    63fe:	mov    rdi,QWORD PTR [rsp+0xa8]
    6406:	add    rsi,rcx
    6409:	mov    rcx,rbx
    640c:	lea    r9,[rsi+rax*1]
    6410:	mov    rax,rbx
    6413:	ror    rcx,0x8
    6417:	mov    rsi,rdi
    641a:	ror    rax,1
    641d:	ror    rsi,0x13
    6421:	xor    rcx,rax
    6424:	mov    rax,rbx
    6427:	shr    rax,0x7
    642b:	xor    rcx,rax
    642e:	mov    rax,rdi
    6431:	add    rcx,QWORD PTR [rsp+0x20]
    6436:	add    rcx,QWORD PTR [rsp+0x90]
    643e:	rol    rax,0x3
    6442:	xor    rax,rsi
    6445:	mov    rsi,rdi
    6448:	shr    rsi,0x6
    644c:	xor    rax,rsi
    644f:	add    rax,rcx
    6452:	mov    rcx,rdx
    6455:	xor    rcx,r12
    6458:	mov    rdi,rax
    645b:	mov    rax,rcx
    645e:	mov    QWORD PTR [rsp+0x80],rdi
    6466:	movabs rcx,0xd69906245565a910
    6470:	and    rax,rbp
    6473:	add    rcx,rdi
    6476:	mov    rdi,rbp
    6479:	xor    rax,rdx
    647c:	add    rcx,r11
    647f:	ror    rdi,0xe
    6483:	mov    r11,r8
    6486:	add    rcx,rax
    6489:	mov    rax,rbp
    648c:	ror    rax,0x12
    6490:	xor    rax,rdi
    6493:	mov    rdi,rbp
    6496:	rol    rdi,0x17
    649a:	xor    rax,rdi
    649d:	mov    rdi,r9
    64a0:	add    rax,rcx
    64a3:	mov    rcx,r9
    64a6:	rol    rdi,0x1e
    64aa:	and    r11,r9
    64ad:	ror    rcx,0x1c
    64b1:	add    r13,rax
    64b4:	xor    rdi,rcx
    64b7:	mov    rcx,r9
    64ba:	rol    rcx,0x19
    64be:	xor    rdi,rcx
    64c1:	mov    rcx,r8
    64c4:	or     rcx,r9
    64c7:	and    rcx,r10
    64ca:	or     rcx,r11
    64cd:	mov    r11,QWORD PTR [rsp+0x50]
    64d2:	add    rdi,rcx
    64d5:	add    rdi,rax
    64d8:	mov    rcx,r11
    64db:	mov    rax,r11
    64de:	ror    rcx,1
    64e1:	ror    rax,0x8
    64e5:	xor    rax,rcx
    64e8:	mov    rcx,r11
    64eb:	shr    rcx,0x7
    64ef:	xor    rax,rcx
    64f2:	add    rax,rbx
    64f5:	mov    rbx,QWORD PTR [rsp+0xb0]
    64fd:	add    rax,QWORD PTR [rsp+0x38]
    6502:	mov    rsi,rbx
    6505:	mov    rcx,rbx
    6508:	ror    rsi,0x13
    650c:	rol    rcx,0x3
    6510:	xor    rcx,rsi
    6513:	mov    rsi,rbx
    6516:	shr    rsi,0x6
    651a:	xor    rcx,rsi
    651d:	add    rax,rcx
    6520:	mov    rcx,r12
    6523:	xor    rcx,rbp
    6526:	mov    rbx,rax
    6529:	mov    rax,rcx
    652c:	mov    QWORD PTR [rsp+0xb8],rbx
    6534:	movabs rcx,0xf40e35855771202a
    653e:	add    rcx,rbx
    6541:	and    rax,r13
    6544:	mov    rbx,r9
    6547:	xor    rax,r12
    654a:	add    rdx,rcx
    654d:	mov    rcx,r13
    6550:	add    rdx,rax
    6553:	mov    rax,r13
    6556:	ror    rcx,0xe
    655a:	and    rbx,rdi
    655d:	ror    rax,0x12
    6561:	xor    rax,rcx
    6564:	mov    rcx,r13
    6567:	rol    rcx,0x17
    656b:	xor    rax,rcx
    656e:	add    rax,rdx
    6571:	mov    rdx,rdi
    6574:	ror    rdx,0x1c
    6578:	add    r10,rax
    657b:	mov    rcx,rdx
    657e:	mov    rdx,rdi
    6581:	rol    rdx,0x1e
    6585:	xor    rdx,rcx
    6588:	mov    rcx,rdi
    658b:	rol    rcx,0x19
    658f:	xor    rdx,rcx
    6592:	mov    rcx,r9
    6595:	or     rcx,rdi
    6598:	and    rcx,r8
    659b:	or     rcx,rbx
    659e:	add    rdx,rcx
    65a1:	mov    rcx,r15
    65a4:	add    rdx,rax
    65a7:	mov    rax,r15
    65aa:	ror    rcx,1
    65ad:	ror    rax,0x8
    65b1:	xor    rax,rcx
    65b4:	mov    rcx,r15
    65b7:	shr    rcx,0x7
    65bb:	xor    rax,rcx
    65be:	add    rax,r11
    65c1:	mov    r11,QWORD PTR [rsp+0x80]
    65c9:	add    rax,QWORD PTR [rsp+0x98]
    65d1:	mov    rbx,r11
    65d4:	ror    rbx,0x13
    65d8:	mov    rsi,rbx
    65db:	mov    rbx,r11
    65de:	shr    r11,0x6
    65e2:	rol    rbx,0x3
    65e6:	mov    rcx,rbx
    65e9:	mov    rbx,rdx
    65ec:	xor    rcx,rsi
    65ef:	xor    rcx,r11
    65f2:	add    rax,rcx
    65f5:	mov    rcx,rbp
    65f8:	xor    rcx,r13
    65fb:	mov    r11,rax
    65fe:	mov    rax,rcx
    6601:	mov    QWORD PTR [rsp+0xe8],r11
    6609:	movabs rcx,0x106aa07032bbd1b8
    6613:	and    rax,r10
    6616:	add    rcx,r11
    6619:	rol    rbx,0x19
    661d:	xor    rax,rbp
    6620:	add    r12,rcx
    6623:	mov    rcx,r10
    6626:	add    r12,rax
    6629:	mov    rax,r10
    662c:	ror    rcx,0xe
    6630:	ror    rax,0x12
    6634:	xor    rax,rcx
    6637:	mov    rcx,r10
    663a:	rol    rcx,0x17
    663e:	xor    rax,rcx
    6641:	mov    rcx,rdx
    6644:	ror    rcx,0x1c
    6648:	add    rax,r12
    664b:	mov    r12,QWORD PTR [rsp+0x88]
    6653:	mov    rsi,rcx
    6656:	mov    rcx,rdx
    6659:	add    r8,rax
    665c:	rol    rcx,0x1e
    6660:	xor    rcx,rsi
    6663:	xor    rcx,rbx
    6666:	mov    rbx,rdi
    6669:	or     rbx,rdx
    666c:	mov    rsi,rbx
    666f:	mov    rbx,rdi
    6672:	and    rbx,rdx
    6675:	and    rsi,r9
    6678:	or     rsi,rbx
    667b:	mov    rbx,r14
    667e:	add    rcx,rsi
    6681:	ror    rbx,1
    6684:	add    rcx,rax
    6687:	mov    rax,r14
    668a:	ror    rax,0x8
    668e:	xor    rax,rbx
    6691:	mov    rbx,r14
    6694:	shr    rbx,0x7
    6698:	xor    rax,rbx
    669b:	add    rax,r15
    669e:	mov    r15,QWORD PTR [rsp+0xb8]
    66a6:	add    rax,QWORD PTR [rsp+0xa0]
    66ae:	mov    rbx,r15
    66b1:	mov    r11,r15
    66b4:	rol    rbx,0x3
    66b8:	ror    r11,0x13
    66bc:	mov    rsi,rbx
    66bf:	mov    rbx,r13
    66c2:	xor    rsi,r11
    66c5:	mov    r11,r15
    66c8:	xor    rbx,r10
    66cb:	shr    r11,0x6
    66cf:	xor    rsi,r11
    66d2:	lea    r15,[rax+rsi*1]
    66d6:	mov    rax,rbx
    66d9:	mov    rbx,r8
    66dc:	movabs rsi,0x19a4c116b8d2d0c8
    66e6:	add    rsi,r15
    66e9:	ror    rbx,0xe
    66ed:	and    rax,r8
    66f0:	add    rbp,rsi
    66f3:	mov    rsi,rbx
    66f6:	mov    rbx,r8
    66f9:	xor    rax,r13
    66fc:	ror    rbx,0x12
    6700:	add    rbp,rax
    6703:	mov    rax,rbx
    6706:	mov    rbx,r8
    6709:	xor    rax,rsi
    670c:	rol    rbx,0x17
    6710:	xor    rax,rbx
    6713:	mov    rbx,rcx
    6716:	ror    rbx,0x1c
    671a:	add    rax,rbp
    671d:	mov    rbp,r10
    6720:	mov    r11,rbx
    6723:	mov    rbx,rcx
    6726:	add    r9,rax
    6729:	rol    rbx,0x1e
    672d:	mov    rsi,rbx
    6730:	mov    rbx,rcx
    6733:	xor    rsi,r11
    6736:	rol    rbx,0x19
    673a:	xor    rsi,rbx
    673d:	mov    rbx,rdx
    6740:	or     rbx,rcx
    6743:	mov    r11,rbx
    6746:	mov    rbx,rdx
    6749:	and    rbx,rcx
    674c:	and    r11,rdi
    674f:	or     r11,rbx
    6752:	add    rsi,r11
    6755:	mov    r11,r12
    6758:	add    rsi,rax
    675b:	mov    rax,r12
    675e:	ror    r11,1
    6761:	ror    rax,0x8
    6765:	xor    rax,r11
    6768:	mov    r11,r12
    676b:	shr    r11,0x7
    676f:	xor    rax,r11
    6772:	add    rax,r14
    6775:	mov    r14,QWORD PTR [rsp+0xe8]
    677d:	add    rax,QWORD PTR [rsp+0x48]
    6782:	xor    rbp,r8
    6785:	mov    rbx,r14
    6788:	mov    r11,r14
    678b:	ror    rbx,0x13
    678f:	rol    r11,0x3
    6793:	xor    r11,rbx
    6796:	mov    rbx,r14
    6799:	shr    rbx,0x6
    679d:	xor    r11,rbx
    67a0:	add    rax,r11
    67a3:	movabs r11,0x1e376c085141ab53
    67ad:	mov    rbx,rax
    67b0:	mov    rax,rbp
    67b3:	mov    rbp,r9
    67b6:	add    r11,rbx
    67b9:	ror    rbp,0xe
    67bd:	and    rax,r9
    67c0:	mov    QWORD PTR [rsp+0x88],rbx
    67c8:	add    r13,r11
    67cb:	mov    r11,rbp
    67ce:	mov    rbp,r9
    67d1:	xor    rax,r10
    67d4:	ror    rbp,0x12
    67d8:	add    r13,rax
    67db:	mov    rax,rbp
    67de:	mov    rbp,r9
    67e1:	xor    rax,r11
    67e4:	rol    rbp,0x17
    67e8:	xor    rax,rbp
    67eb:	mov    rbp,rsi
    67ee:	ror    rbp,0x1c
    67f2:	add    rax,r13
    67f5:	mov    r13,QWORD PTR [rsp+0x40]
    67fa:	mov    rbx,rbp
    67fd:	mov    rbp,rsi
    6800:	add    rdi,rax
    6803:	rol    rbp,0x1e
    6807:	mov    r11,rbp
    680a:	mov    rbp,rsi
    680d:	xor    r11,rbx
    6810:	rol    rbp,0x19
    6814:	xor    r11,rbp
    6817:	mov    rbp,rcx
    681a:	or     rbp,rsi
    681d:	mov    rbx,rbp
    6820:	mov    rbp,rcx
    6823:	and    rbp,rsi
    6826:	and    rbx,rdx
    6829:	or     rbx,rbp
    682c:	mov    rbp,r15
    682f:	add    rbx,r11
    6832:	mov    r11,r13
    6835:	add    rbx,rax
    6838:	mov    rax,r13
    683b:	ror    r11,1
    683e:	ror    rax,0x8
    6842:	ror    rbp,0x13
    6846:	xor    rax,r11
    6849:	mov    r11,r13
    684c:	shr    r11,0x7
    6850:	xor    rax,r11
    6853:	add    rax,r12
    6856:	mov    r12,r15
    6859:	add    rax,QWORD PTR [rsp+0xa8]
    6861:	rol    r12,0x3
    6865:	mov    r11,r12
    6868:	xor    r11,rbp
    686b:	mov    rbp,r15
    686e:	shr    rbp,0x6
    6872:	xor    r11,rbp
    6875:	mov    rbp,r8
    6878:	add    rax,r11
    687b:	xor    rbp,r9
    687e:	movabs r11,0x2748774cdf8eeb99
    6888:	mov    r12,rax
    688b:	mov    rax,rbp
    688e:	mov    rbp,rdi
    6891:	add    r11,r12
    6894:	ror    rbp,0xe
    6898:	and    rax,rdi
    689b:	mov    QWORD PTR [rsp+0xc0],r12
    68a3:	add    r10,r11
    68a6:	mov    r11,rbp
    68a9:	mov    rbp,rdi
    68ac:	xor    rax,r8
    68af:	ror    rbp,0x12
    68b3:	add    r10,rax
    68b6:	mov    r12,QWORD PTR [rsp+0x28]
    68bb:	mov    rax,rbp
    68be:	mov    rbp,rdi
    68c1:	xor    rax,r11
    68c4:	rol    rbp,0x17
    68c8:	xor    rax,rbp
    68cb:	mov    rbp,rbx
    68ce:	add    rax,r10
    68d1:	mov    r10,rbx
    68d4:	rol    rbp,0x19
    68d8:	ror    r10,0x1c
    68dc:	add    rdx,rax
    68df:	mov    r11,r10
    68e2:	mov    r10,rbx
    68e5:	rol    r10,0x1e
    68e9:	xor    r10,r11
    68ec:	xor    r10,rbp
    68ef:	mov    rbp,rsi
    68f2:	or     rbp,rbx
    68f5:	mov    r11,rbp
    68f8:	mov    rbp,rsi
    68fb:	and    r11,rcx
    68fe:	and    rbp,rbx
    6901:	or     r11,rbp
    6904:	add    r10,r11
    6907:	mov    r11,r12
    690a:	add    r10,rax
    690d:	mov    rax,r12
    6910:	ror    r11,1
    6913:	ror    rax,0x8
    6917:	xor    rax,r11
    691a:	mov    r11,r12
    691d:	shr    r11,0x7
    6921:	xor    rax,r11
    6924:	add    rax,r13
    6927:	mov    r13,QWORD PTR [rsp+0x88]
    692f:	add    rax,QWORD PTR [rsp+0xb0]
    6937:	mov    rbp,r13
    693a:	mov    r11,r13
    693d:	ror    rbp,0x13
    6941:	rol    r11,0x3
    6945:	xor    r11,rbp
    6948:	mov    rbp,r13
    694b:	mov    r13,rdx
    694e:	shr    rbp,0x6
    6952:	ror    r13,0xe
    6956:	xor    r11,rbp
    6959:	add    rax,r11
    695c:	movabs r11,0x34b0bcb5e19b48a8
    6966:	mov    rbp,rax
    6969:	mov    rax,r9
    696c:	xor    rax,rdi
    696f:	add    r11,rbp
    6972:	mov    QWORD PTR [rsp],rbp
    6976:	mov    rbp,rbx
    6979:	and    rax,rdx
    697c:	add    r8,r11
    697f:	xor    rax,r9
    6982:	add    r8,rax
    6985:	mov    rax,rdx
    6988:	ror    rax,0x12
    698c:	xor    rax,r13
    698f:	mov    r13,rdx
    6992:	rol    r13,0x17
    6996:	xor    rax,r13
    6999:	mov    r13,r10
    699c:	add    rax,r8
    699f:	mov    r8,r10
    69a2:	ror    r8,0x1c
    69a6:	add    rcx,rax
    69a9:	mov    r11,r8
    69ac:	mov    r8,r10
    69af:	rol    r8,0x1e
    69b3:	rol    r13,0x19
    69b7:	and    rbp,r10
    69ba:	xor    r8,r11
    69bd:	xor    r8,r13
    69c0:	mov    r13,rbx
    69c3:	or     r13,r10
    69c6:	mov    r11,r13
    69c9:	mov    r13,QWORD PTR [rsp+0x30]
    69ce:	and    r11,rsi
    69d1:	or     r11,rbp
    69d4:	add    r8,r11
    69d7:	mov    r11,r13
    69da:	add    r8,rax
    69dd:	mov    rax,r13
    69e0:	ror    r11,0x8
    69e4:	ror    rax,1
    69e7:	xor    r11,rax
    69ea:	mov    rax,r13
    69ed:	shr    rax,0x7
    69f1:	xor    r11,rax
    69f4:	mov    rax,QWORD PTR [rsp+0xc0]
    69fc:	add    r11,r12
    69ff:	add    r11,QWORD PTR [rsp+0x80]
    6a07:	mov    r12,rax
    6a0a:	ror    r12,0x13
    6a0e:	mov    rbp,r12
    6a11:	mov    r12,rax
    6a14:	rol    rax,0x3
    6a18:	xor    rax,rbp
    6a1b:	mov    rbp,r12
    6a1e:	shr    rbp,0x6
    6a22:	xor    rax,rbp
    6a25:	mov    rbp,r10
    6a28:	add    rax,r11
    6a2b:	movabs r11,0x391c0cb3c5c95a63
    6a35:	mov    r12,rax
    6a38:	mov    rax,rdi
    6a3b:	xor    rax,rdx
    6a3e:	add    r11,r12
    6a41:	mov    QWORD PTR [rsp+0xc8],r12
    6a49:	mov    r12,QWORD PTR [rsp+0x90]
    6a51:	and    rax,rcx
    6a54:	add    r9,r11
    6a57:	xor    rax,rdi
    6a5a:	add    r9,rax
    6a5d:	mov    rax,rcx
    6a60:	ror    rax,0xe
    6a64:	mov    r11,rax
    6a67:	mov    rax,rcx
    6a6a:	ror    rax,0x12
    6a6e:	xor    rax,r11
    6a71:	mov    r11,rcx
    6a74:	rol    r11,0x17
    6a78:	and    rbp,r8
    6a7b:	xor    rax,r11
    6a7e:	add    rax,r9
    6a81:	mov    r9,r8
    6a84:	ror    r9,0x1c
    6a88:	add    rsi,rax
    6a8b:	mov    r11,r9
    6a8e:	mov    r9,r8
    6a91:	rol    r9,0x1e
    6a95:	xor    r9,r11
    6a98:	mov    r11,r8
    6a9b:	rol    r11,0x19
    6a9f:	xor    r9,r11
    6aa2:	mov    r11,r10
    6aa5:	or     r11,r8
    6aa8:	and    r11,rbx
    6aab:	or     r11,rbp
    6aae:	add    r9,r11
    6ab1:	mov    r11,r12
    6ab4:	add    r9,rax
    6ab7:	mov    rax,r12
    6aba:	ror    r11,0x8
    6abe:	ror    rax,1
    6ac1:	xor    r11,rax
    6ac4:	mov    rax,r12
    6ac7:	shr    rax,0x7
    6acb:	xor    r11,rax
    6ace:	mov    rax,QWORD PTR [rsp]
    6ad2:	add    r11,r13
    6ad5:	add    r11,QWORD PTR [rsp+0xb8]
    6add:	mov    r13,rax
    6ae0:	ror    r13,0x13
    6ae4:	mov    rbp,r13
    6ae7:	mov    r13,rax
    6aea:	rol    rax,0x3
    6aee:	xor    rax,rbp
    6af1:	shr    r13,0x6
    6af5:	mov    rbp,r8
    6af8:	xor    rax,r13
    6afb:	add    rax,r11
    6afe:	movabs r11,0x4ed8aa4ae3418acb
    6b08:	mov    r13,rax
    6b0b:	mov    rax,rdx
    6b0e:	xor    rax,rcx
    6b11:	add    r11,r13
    6b14:	mov    QWORD PTR [rsp+0x8],r13
    6b19:	mov    r13,QWORD PTR [rsp+0x38]
    6b1e:	and    rax,rsi
    6b21:	xor    rax,rdx
    6b24:	add    rdi,r11
    6b27:	and    rbp,r9
    6b2a:	add    rdi,rax
    6b2d:	mov    rax,rsi
    6b30:	ror    rax,0xe
    6b34:	mov    r11,rax
    6b37:	mov    rax,rsi
    6b3a:	ror    rax,0x12
    6b3e:	xor    rax,r11
    6b41:	mov    r11,rsi
    6b44:	rol    r11,0x17
    6b48:	xor    rax,r11
    6b4b:	add    rax,rdi
    6b4e:	mov    rdi,r9
    6b51:	ror    rdi,0x1c
    6b55:	add    rbx,rax
    6b58:	mov    r11,rdi
    6b5b:	mov    rdi,r9
    6b5e:	rol    rdi,0x1e
    6b62:	xor    rdi,r11
    6b65:	mov    r11,r9
    6b68:	rol    r11,0x19
    6b6c:	xor    rdi,r11
    6b6f:	mov    r11,r8
    6b72:	or     r11,r9
    6b75:	and    r11,r10
    6b78:	or     r11,rbp
    6b7b:	add    rdi,r11
    6b7e:	mov    r11,r13
    6b81:	add    rdi,rax
    6b84:	mov    rax,r13
    6b87:	ror    r11,1
    6b8a:	ror    rax,0x8
    6b8e:	xor    rax,r11
    6b91:	mov    r11,r13
    6b94:	shr    r11,0x7
    6b98:	xor    rax,r11
    6b9b:	add    rax,r12
    6b9e:	add    rax,r14
    6ba1:	mov    r14,QWORD PTR [rsp+0xc8]
    6ba9:	mov    r11,r14
    6bac:	ror    r11,0x13
    6bb0:	mov    rbp,r11
    6bb3:	mov    r11,r14
    6bb6:	shr    r14,0x6
    6bba:	rol    r11,0x3
    6bbe:	xor    r11,rbp
    6bc1:	mov    rbp,r9
    6bc4:	xor    r11,r14
    6bc7:	add    rax,r11
    6bca:	and    rbp,rdi
    6bcd:	movabs r11,0x5b9cca4f7763e373
    6bd7:	mov    r14,rax
    6bda:	mov    rax,rcx
    6bdd:	xor    rax,rsi
    6be0:	add    r11,r14
    6be3:	mov    QWORD PTR [rsp+0x50],r14
    6be8:	mov    r14,QWORD PTR [rsp+0x98]
    6bf0:	and    rax,rbx
    6bf3:	add    rdx,r11
    6bf6:	mov    r11,rbx
    6bf9:	mov    r12,QWORD PTR [rsp+0x8]
    6bfe:	xor    rax,rcx
    6c01:	ror    r11,0xe
    6c05:	add    rdx,rax
    6c08:	mov    rax,rbx
    6c0b:	ror    rax,0x12
    6c0f:	xor    rax,r11
    6c12:	mov    r11,rbx
    6c15:	rol    r11,0x17
    6c19:	xor    rax,r11
    6c1c:	add    rax,rdx
    6c1f:	mov    rdx,rdi
    6c22:	ror    rdx,0x1c
    6c26:	add    r10,rax
    6c29:	mov    r11,rdx
    6c2c:	mov    rdx,rdi
    6c2f:	rol    rdx,0x1e
    6c33:	xor    rdx,r11
    6c36:	mov    r11,rdi
    6c39:	rol    r11,0x19
    6c3d:	xor    rdx,r11
    6c40:	mov    r11,r9
    6c43:	or     r11,rdi
    6c46:	and    r11,r8
    6c49:	or     r11,rbp
    6c4c:	mov    rbp,r10
    6c4f:	add    rdx,r11
    6c52:	mov    r11,r14
    6c55:	add    rdx,rax
    6c58:	mov    rax,r14
    6c5b:	ror    r11,1
    6c5e:	ror    rax,0x8
    6c62:	xor    rax,r11
    6c65:	mov    r11,r14
    6c68:	shr    r11,0x7
    6c6c:	xor    rax,r11
    6c6f:	mov    r11,r12
    6c72:	add    rax,r13
    6c75:	mov    r13,r12
    6c78:	add    rax,r15
    6c7b:	ror    r11,0x13
    6c7f:	rol    r13,0x3
    6c83:	ror    rbp,0xe
    6c87:	xor    r13,r11
    6c8a:	mov    r11,r12
    6c8d:	shr    r11,0x6
    6c91:	xor    r13,r11
    6c94:	movabs r11,0x682e6ff3d6b2b8a3
    6c9e:	add    rax,r13
    6ca1:	mov    r13,rax
    6ca4:	mov    rax,rsi
    6ca7:	xor    rax,rbx
    6caa:	add    r11,r13
    6cad:	mov    QWORD PTR [rsp+0x10],r13
    6cb2:	mov    r13,rdx
    6cb5:	and    rax,r10
    6cb8:	add    rcx,r11
    6cbb:	xor    rax,rsi
    6cbe:	add    rcx,rax
    6cc1:	mov    rax,r10
    6cc4:	ror    rax,0x12
    6cc8:	xor    rax,rbp
    6ccb:	mov    rbp,r10
    6cce:	rol    rbp,0x17
    6cd2:	xor    rax,rbp
    6cd5:	mov    rbp,rdx
    6cd8:	add    rax,rcx
    6cdb:	mov    rcx,rdx
    6cde:	rol    rbp,0x19
    6ce2:	ror    rcx,0x1c
    6ce6:	add    r8,rax
    6ce9:	mov    r11,rcx
    6cec:	mov    rcx,rdx
    6cef:	rol    rcx,0x1e
    6cf3:	xor    rcx,r11
    6cf6:	xor    rcx,rbp
    6cf9:	mov    rbp,rdi
    6cfc:	or     rbp,rdx
    6cff:	mov    r11,rbp
    6d02:	mov    rbp,rdi
    6d05:	and    rbp,rdx
    6d08:	and    r11,r9
    6d0b:	or     r11,rbp
    6d0e:	mov    rbp,QWORD PTR [rsp+0xa0]
    6d16:	add    r11,rcx
    6d19:	lea    r12,[r11+rax*1]
    6d1d:	mov    rcx,rbp
    6d20:	mov    rax,rbp
    6d23:	ror    rcx,1
    6d26:	ror    rax,0x8
    6d2a:	xor    rax,rcx
    6d2d:	mov    rcx,rbp
    6d30:	shr    rcx,0x7
    6d34:	and    r13,r12
    6d37:	xor    rax,rcx
    6d3a:	mov    rcx,QWORD PTR [rsp+0x88]
    6d42:	add    rax,r14
    6d45:	mov    r14,QWORD PTR [rsp+0x50]
    6d4a:	add    rcx,rax
    6d4d:	mov    r11,r14
    6d50:	mov    rax,r14
    6d53:	ror    r11,0x13
    6d57:	rol    rax,0x3
    6d5b:	xor    rax,r11
    6d5e:	mov    r11,r14
    6d61:	shr    r11,0x6
    6d65:	xor    rax,r11
    6d68:	add    rcx,rax
    6d6b:	mov    r11,rcx
    6d6e:	mov    rcx,rbx
    6d71:	xor    rcx,r10
    6d74:	mov    QWORD PTR [rsp+0x18],r11
    6d79:	mov    rax,rcx
    6d7c:	movabs rcx,0x748f82ee5defb2fc
    6d86:	add    rcx,r11
    6d89:	and    rax,r8
    6d8c:	add    rsi,rcx
    6d8f:	mov    rcx,r8
    6d92:	xor    rax,rbx
    6d95:	ror    rcx,0xe
    6d99:	add    rsi,rax
    6d9c:	mov    rax,rcx
    6d9f:	mov    rcx,r8
    6da2:	ror    rcx,0x12
    6da6:	xor    rcx,rax
    6da9:	mov    rax,r8
    6dac:	rol    rax,0x17
    6db0:	xor    rax,rcx
    6db3:	mov    rcx,r12
    6db6:	add    rax,rsi
    6db9:	mov    rsi,r12
    6dbc:	ror    rcx,0x1c
    6dc0:	rol    rsi,0x1e
    6dc4:	add    r9,rax
    6dc7:	xor    rsi,rcx
    6dca:	mov    rcx,r12
    6dcd:	rol    rcx,0x19
    6dd1:	xor    rsi,rcx
    6dd4:	mov    rcx,rdx
    6dd7:	or     rcx,r12
    6dda:	and    rcx,rdi
    6ddd:	or     rcx,r13
    6de0:	mov    r13,QWORD PTR [rsp+0x48]
    6de5:	add    rcx,rsi
    6de8:	add    rcx,rax
    6deb:	mov    rsi,r13
    6dee:	mov    rax,r13
    6df1:	ror    rsi,1
    6df4:	ror    rax,0x8
    6df8:	xor    rax,rsi
    6dfb:	mov    rsi,r13
    6dfe:	shr    rsi,0x7
    6e02:	xor    rax,rsi
    6e05:	mov    rsi,QWORD PTR [rsp+0xc0]
    6e0d:	add    rax,rbp
    6e10:	mov    rbp,QWORD PTR [rsp+0x10]
    6e15:	add    rsi,rax
    6e18:	mov    r11,rbp
    6e1b:	mov    rax,rbp
    6e1e:	ror    r11,0x13
    6e22:	rol    rax,0x3
    6e26:	xor    rax,r11
    6e29:	mov    r11,rbp
    6e2c:	shr    r11,0x6
    6e30:	xor    rax,r11
    6e33:	add    rsi,rax
    6e36:	mov    rbp,rsi
    6e39:	mov    rsi,r10
    6e3c:	xor    rsi,r8
    6e3f:	mov    QWORD PTR [rsp+0x20],rbp
    6e44:	mov    rax,rsi
    6e47:	movabs rsi,0x78a5636f43172f60
    6e51:	add    rsi,rbp
    6e54:	and    rax,r9
    6e57:	mov    rbp,QWORD PTR [rsp+0xa8]
    6e5f:	add    rbx,rsi
    6e62:	mov    rsi,r9
    6e65:	xor    rax,r10
    6e68:	ror    rsi,0xe
    6e6c:	add    rbx,rax
    6e6f:	mov    rax,rsi
    6e72:	mov    rsi,r9
    6e75:	ror    rsi,0x12
    6e79:	mov    r11,rsi
    6e7c:	mov    rsi,r9
    6e7f:	rol    rsi,0x17
    6e83:	xor    r11,rax
    6e86:	mov    rax,rsi
    6e89:	mov    rsi,rcx
    6e8c:	ror    rsi,0x1c
    6e90:	xor    rax,r11
    6e93:	mov    r11,rsi
    6e96:	mov    rsi,rcx
    6e99:	add    rax,rbx
    6e9c:	mov    rbx,rcx
    6e9f:	rol    rsi,0x1e
    6ea3:	rol    rbx,0x19
    6ea7:	add    rdi,rax
    6eaa:	xor    rsi,r11
    6ead:	xor    rsi,rbx
    6eb0:	mov    rbx,r12
    6eb3:	or     rbx,rcx
    6eb6:	mov    r11,rbx
    6eb9:	mov    rbx,r12
    6ebc:	and    rbx,rcx
    6ebf:	and    r11,rdx
    6ec2:	or     r11,rbx
    6ec5:	add    r11,rsi
    6ec8:	mov    rsi,rbp
    6ecb:	add    r11,rax
    6ece:	mov    rax,rbp
    6ed1:	ror    rsi,1
    6ed4:	ror    rax,0x8
    6ed8:	xor    rax,rsi
    6edb:	mov    rsi,rbp
    6ede:	shr    rsi,0x7
    6ee2:	xor    rax,rsi
    6ee5:	mov    rsi,QWORD PTR [rsp]
    6ee9:	add    rax,r13
    6eec:	mov    r13,QWORD PTR [rsp+0x18]
    6ef1:	add    rsi,rax
    6ef4:	mov    rbx,r13
    6ef7:	mov    rax,r13
    6efa:	ror    rbx,0x13
    6efe:	rol    rax,0x3
    6f02:	xor    rax,rbx
    6f05:	mov    rbx,r13
    6f08:	mov    r13,r8
    6f0b:	shr    rbx,0x6
    6f0f:	xor    r13,r9
    6f12:	xor    rax,rbx
    6f15:	movabs rbx,0x84c87814a1f0ab72
    6f1f:	add    rsi,rax
    6f22:	mov    rax,r13
    6f25:	mov    r13,QWORD PTR [rsp+0xb0]
    6f2d:	add    rbx,rsi
    6f30:	and    rax,rdi
    6f33:	mov    QWORD PTR [rsp+0x28],rsi
    6f38:	xor    rax,r8
    6f3b:	add    r10,rbx
    6f3e:	mov    rbx,rdi
    6f41:	lea    rsi,[rax+r10*1]
    6f45:	mov    r10,rdi
    6f48:	rol    rbx,0x17
    6f4c:	ror    r10,0xe
    6f50:	mov    rax,r10
    6f53:	mov    r10,rdi
    6f56:	ror    r10,0x12
    6f5a:	xor    r10,rax
    6f5d:	mov    rax,rbx
    6f60:	mov    rbx,rcx
    6f63:	xor    rax,r10
    6f66:	mov    r10,r11
    6f69:	add    rax,rsi
    6f6c:	mov    rsi,r11
    6f6f:	add    rdx,rax
    6f72:	ror    r10,0x1c
    6f76:	and    rbx,r11
    6f79:	rol    rsi,0x1e
    6f7d:	xor    rsi,r10
    6f80:	mov    r10,r11
    6f83:	rol    r10,0x19
    6f87:	xor    rsi,r10
    6f8a:	mov    r10,rcx
    6f8d:	or     r10,r11
    6f90:	and    r10,r12
    6f93:	or     r10,rbx
    6f96:	add    r10,rsi
    6f99:	mov    rsi,r13
    6f9c:	add    r10,rax
    6f9f:	mov    rax,r13
    6fa2:	ror    rsi,1
    6fa5:	ror    rax,0x8
    6fa9:	xor    rax,rsi
    6fac:	mov    rsi,r13
    6faf:	shr    rsi,0x7
    6fb3:	xor    rax,rsi
    6fb6:	mov    rsi,QWORD PTR [rsp+0xc8]
    6fbe:	add    rax,rbp
    6fc1:	add    rsi,rax
    6fc4:	mov    rax,QWORD PTR [rsp+0x20]
    6fc9:	mov    rbp,rax
    6fcc:	ror    rbp,0x13
    6fd0:	mov    rbx,rbp
    6fd3:	mov    rbp,rax
    6fd6:	rol    rax,0x3
    6fda:	xor    rax,rbx
    6fdd:	mov    rbx,rbp
    6fe0:	shr    rbx,0x6
    6fe4:	xor    rax,rbx
    6fe7:	mov    rbx,rdx
    6fea:	add    rax,rsi
    6fed:	mov    rsi,r9
    6ff0:	ror    rbx,0x12
    6ff4:	mov    rbp,rax
    6ff7:	xor    rsi,rdi
    6ffa:	movabs rax,0x8cc702081a6439ec
    7004:	add    rax,rbp
    7007:	and    rsi,rdx
    700a:	mov    QWORD PTR [rsp+0x30],rbp
    700f:	mov    rbp,r10
    7012:	xor    rsi,r9
    7015:	add    r8,rax
    7018:	mov    rax,r11
    701b:	add    r8,rsi
    701e:	mov    rsi,rdx
    7021:	ror    rsi,0xe
    7025:	xor    rbx,rsi
    7028:	mov    rsi,rdx
    702b:	rol    rbp,0x1e
    702f:	or     rax,r10
    7032:	rol    rsi,0x17
    7036:	and    rax,rcx
    7039:	xor    rsi,rbx
    703c:	mov    rbx,r10
    703f:	ror    rbx,0x1c
    7043:	add    rsi,r8
    7046:	xor    rbp,rbx
    7049:	mov    rbx,r10
    704c:	lea    r8,[r12+rsi*1]
    7050:	mov    r12,QWORD PTR [rsp+0x80]
    7058:	rol    rbx,0x19
    705c:	xor    rbp,rbx
    705f:	mov    rbx,r11
    7062:	and    rbx,r10
    7065:	or     rax,rbx
    7068:	add    rax,rbp
    706b:	lea    rbx,[rax+rsi*1]
    706f:	mov    rsi,r12
    7072:	mov    rax,r12
    7075:	ror    rsi,1
    7078:	ror    rax,0x8
    707c:	xor    rax,rsi
    707f:	mov    rsi,r12
    7082:	shr    rsi,0x7
    7086:	xor    rax,rsi
    7089:	add    rax,r13
    708c:	mov    r13,QWORD PTR [rsp+0x28]
    7091:	add    rax,QWORD PTR [rsp+0x8]
    7096:	mov    rbp,r13
    7099:	mov    rsi,r13
    709c:	ror    rbp,0x13
    70a0:	rol    rsi,0x3
    70a4:	xor    rsi,rbp
    70a7:	mov    rbp,r13
    70aa:	shr    rbp,0x6
    70ae:	xor    rsi,rbp
    70b1:	mov    rbp,QWORD PTR [rsp+0xb8]
    70b9:	add    rax,rsi
    70bc:	movabs rsi,0x90befffa23631e28
    70c6:	mov    r13,rax
    70c9:	mov    rax,rdi
    70cc:	xor    rax,rdx
    70cf:	add    rsi,r13
    70d2:	mov    QWORD PTR [rsp+0x80],r13
    70da:	mov    r13,r8
    70dd:	and    rax,r8
    70e0:	add    r9,rsi
    70e3:	xor    rax,rdi
    70e6:	add    r9,rax
    70e9:	mov    rax,r8
    70ec:	ror    r13,0x12
    70f0:	ror    rax,0xe
    70f4:	xor    r13,rax
    70f7:	mov    rax,r8
    70fa:	rol    rax,0x17
    70fe:	xor    rax,r13
    7101:	add    rax,r9
    7104:	mov    r9,rbx
    7107:	ror    r9,0x1c
    710b:	add    rcx,rax
    710e:	mov    r13,r9
    7111:	mov    r9,rbx
    7114:	rol    r9,0x1e
    7118:	mov    rsi,r9
    711b:	mov    r9,rbx
    711e:	xor    rsi,r13
    7121:	rol    r9,0x19
    7125:	xor    rsi,r9
    7128:	mov    r9,r10
    712b:	or     r9,rbx
    712e:	mov    r13,r9
    7131:	mov    r9,r10
    7134:	and    r9,rbx
    7137:	and    r13,r11
    713a:	or     r13,r9
    713d:	add    r13,rsi
    7140:	mov    rsi,rbp
    7143:	add    r13,rax
    7146:	mov    rax,rbp
    7149:	ror    rsi,1
    714c:	ror    rax,0x8
    7150:	xor    rax,rsi
    7153:	mov    rsi,rbp
    7156:	shr    rsi,0x7
    715a:	xor    rax,rsi
    715d:	add    rax,r12
    7160:	mov    r12,QWORD PTR [rsp+0x30]
    7165:	add    rax,r14
    7168:	mov    r9,r12
    716b:	mov    rsi,r12
    716e:	ror    r9,0x13
    7172:	rol    rsi,0x3
    7176:	xor    rsi,r9
    7179:	mov    r9,r12
    717c:	mov    r12,QWORD PTR [rsp+0xe8]
    7184:	shr    r9,0x6
    7188:	xor    rsi,r9
    718b:	add    rax,rsi
    718e:	movabs rsi,0xa4506cebde82bde9
    7198:	mov    r9,rax
    719b:	mov    rax,rdx
    719e:	xor    rax,r8
    71a1:	add    rsi,r9
    71a4:	mov    QWORD PTR [rsp+0x38],r9
    71a9:	mov    r9,rcx
    71ac:	and    rax,rcx
    71af:	add    rdi,rsi
    71b2:	ror    r9,0x12
    71b6:	xor    rax,rdx
    71b9:	mov    r14,r9
    71bc:	mov    r9,QWORD PTR [rsp+0x80]
    71c4:	add    rdi,rax
    71c7:	mov    rax,rcx
    71ca:	ror    rax,0xe
    71ce:	xor    r14,rax
    71d1:	mov    rax,rcx
    71d4:	rol    rax,0x17
    71d8:	xor    rax,r14
    71db:	add    rax,rdi
    71de:	mov    rdi,r13
    71e1:	ror    rdi,0x1c
    71e5:	add    r11,rax
    71e8:	mov    r14,rdi
    71eb:	mov    rdi,r13
    71ee:	rol    rdi,0x1e
    71f2:	mov    rsi,rdi
    71f5:	mov    rdi,r13
    71f8:	xor    rsi,r14
    71fb:	rol    rdi,0x19
    71ff:	xor    rsi,rdi
    7202:	mov    rdi,rbx
    7205:	or     rdi,r13
    7208:	mov    r14,rdi
    720b:	mov    rdi,rbx
    720e:	and    rdi,r13
    7211:	and    r14,r10
    7214:	or     r14,rdi
    7217:	mov    rdi,r9
    721a:	add    r14,rsi
    721d:	mov    rsi,r12
    7220:	ror    rdi,0x13
    7224:	add    r14,rax
    7227:	mov    rax,r12
    722a:	ror    rsi,1
    722d:	ror    rax,0x8
    7231:	xor    rax,rsi
    7234:	mov    rsi,r12
    7237:	shr    rsi,0x7
    723b:	xor    rax,rsi
    723e:	add    rax,rbp
    7241:	mov    rbp,r9
    7244:	add    rax,QWORD PTR [rsp+0x10]
    7249:	rol    rbp,0x3
    724d:	mov    rsi,rbp
    7250:	xor    rsi,rdi
    7253:	mov    rdi,r9
    7256:	mov    r9,r13
    7259:	shr    rdi,0x6
    725d:	and    r9,r14
    7260:	xor    rsi,rdi
    7263:	mov    rdi,r8
    7266:	add    rax,rsi
    7269:	xor    rdi,rcx
    726c:	mov    rbp,rax
    726f:	mov    rax,rdi
    7272:	movabs rdi,0xbef9a3f7b2c67915
    727c:	add    rdi,rbp
    727f:	and    rax,r11
    7282:	mov    QWORD PTR [rsp+0x40],rbp
    7287:	xor    rax,r8
    728a:	add    rdx,rdi
    728d:	mov    rdi,r11
    7290:	lea    rsi,[rax+rdx*1]
    7294:	mov    rdx,r11
    7297:	rol    rdi,0x17
    729b:	ror    rdx,0xe
    729f:	mov    rax,rdx
    72a2:	mov    rdx,r11
    72a5:	ror    rdx,0x12
    72a9:	xor    rdx,rax
    72ac:	mov    rax,rdi
    72af:	mov    rdi,r14
    72b2:	xor    rax,rdx
    72b5:	mov    rdx,r14
    72b8:	rol    rdi,0x1e
    72bc:	ror    rdx,0x1c
    72c0:	add    rax,rsi
    72c3:	xor    rdi,rdx
    72c6:	mov    rdx,r14
    72c9:	lea    rsi,[r10+rax*1]
    72cd:	rol    rdx,0x19
    72d1:	xor    rdi,rdx
    72d4:	mov    rdx,r13
    72d7:	or     rdx,r14
    72da:	and    rdx,rbx
    72dd:	or     rdx,r9
    72e0:	add    rdx,rdi
    72e3:	mov    rdi,r15
    72e6:	add    rdx,rax
    72e9:	mov    rax,r15
    72ec:	ror    rdi,1
    72ef:	ror    rax,0x8
    72f3:	xor    rax,rdi
    72f6:	mov    rdi,r15
    72f9:	shr    rdi,0x7
    72fd:	xor    rax,rdi
    7300:	add    rax,r12
    7303:	mov    r12,QWORD PTR [rsp+0x38]
    7308:	add    rax,QWORD PTR [rsp+0x18]
    730d:	mov    r9,r12
    7310:	mov    rdi,r12
    7313:	ror    r9,0x13
    7317:	rol    rdi,0x3
    731b:	xor    rdi,r9
    731e:	mov    r9,r12
    7321:	shr    r9,0x6
    7325:	xor    rdi,r9
    7328:	add    rax,rdi
    732b:	mov    rdi,rcx
    732e:	xor    rdi,r11
    7331:	mov    r10,rax
    7334:	mov    rax,rdi
    7337:	mov    QWORD PTR [rsp+0x48],r10
    733c:	and    rax,rsi
    733f:	mov    rdi,rax
    7342:	xor    rdi,rcx
    7345:	mov    r9,rdi
    7348:	movabs rdi,0xc67178f2e372532b
    7352:	add    rdi,r10
    7355:	mov    r10,r14
    7358:	add    r8,rdi
    735b:	mov    rdi,rsi
    735e:	and    r10,rdx
    7361:	lea    rax,[r9+r8*1]
    7365:	mov    r8,rsi
    7368:	ror    rdi,0x12
    736c:	mov    r9,rdx
    736f:	ror    r8,0xe
    7373:	rol    r9,0x1e
    7377:	xor    rdi,r8
    737a:	mov    r8,rsi
    737d:	rol    r8,0x17
    7381:	xor    r8,rdi
    7384:	mov    rdi,rdx
    7387:	ror    rdi,0x1c
    738b:	add    r8,rax
    738e:	xor    r9,rdi
    7391:	mov    rdi,rdx
    7394:	lea    rax,[rbx+r8*1]
    7398:	mov    rbx,QWORD PTR [rsp+0x88]
    73a0:	rol    rdi,0x19
    73a4:	xor    r9,rdi
    73a7:	mov    rdi,r14
    73aa:	or     rdi,rdx
    73ad:	and    rdi,r13
    73b0:	or     rdi,r10
    73b3:	add    rdi,r9
    73b6:	mov    r9,rbx
    73b9:	add    rdi,r8
    73bc:	mov    r8,rbx
    73bf:	ror    r9,1
    73c2:	ror    r8,0x8
    73c6:	xor    r8,r9
    73c9:	mov    r9,rbx
    73cc:	shr    r9,0x7
    73d0:	xor    r8,r9
    73d3:	add    r15,r8
    73d6:	mov    r8,rbp
    73d9:	ror    rbp,0x13
    73dd:	add    r15,QWORD PTR [rsp+0x20]
    73e2:	mov    r9,rbp
    73e5:	mov    rbp,r8
    73e8:	rol    r8,0x3
    73ec:	mov    r10,rbp
    73ef:	xor    r8,r9
    73f2:	movabs r9,0xca273eceea26619c
    73fc:	shr    r10,0x6
    7400:	xor    r8,r10
    7403:	add    r8,r15
    7406:	mov    r15,QWORD PTR [rsp+0xc0]
    740e:	mov    rbp,r8
    7411:	mov    QWORD PTR [rsp+0x110],r8
    7419:	mov    r8,r11
    741c:	xor    r8,rsi
    741f:	add    r9,rbp
    7422:	mov    r12,r15
    7425:	mov    QWORD PTR [rsp+0x88],rbp
    742d:	and    r8,rax
    7430:	add    rcx,r9
    7433:	mov    r9,rax
    7436:	xor    r8,r11
    7439:	ror    r9,0x12
    743d:	lea    r8,[r8+rcx*1]
    7441:	mov    rcx,rax
    7444:	mov    r10,r9
    7447:	mov    r9,rdi
    744a:	ror    rcx,0xe
    744e:	ror    r9,0x1c
    7452:	xor    r10,rcx
    7455:	mov    rcx,rax
    7458:	rol    rcx,0x17
    745c:	xor    rcx,r10
    745f:	mov    r10,r9
    7462:	mov    r9,rdi
    7465:	rol    r9,0x1e
    7469:	add    rcx,r8
    746c:	mov    r8,r9
    746f:	mov    r9,rdi
    7472:	add    r13,rcx
    7475:	xor    r8,r10
    7478:	rol    r9,0x19
    747c:	xor    r8,r9
    747f:	mov    r9,rdx
    7482:	or     r9,rdi
    7485:	mov    r10,r9
    7488:	mov    r9,rdx
    748b:	and    r9,rdi
    748e:	and    r10,r14
    7491:	or     r10,r9
    7494:	mov    r9,r13
    7497:	add    r10,r8
    749a:	ror    r12,1
    749d:	add    r10,rcx
    74a0:	mov    rcx,r15
    74a3:	ror    r9,0x12
    74a7:	ror    rcx,0x8
    74ab:	xor    rcx,r12
    74ae:	mov    r12,r15
    74b1:	shr    r12,0x7
    74b5:	xor    rcx,r12
    74b8:	add    rcx,rbx
    74bb:	mov    rbx,QWORD PTR [rsp+0x48]
    74c0:	add    rcx,QWORD PTR [rsp+0x28]
    74c5:	mov    rbp,rbx
    74c8:	mov    r8,rbx
    74cb:	rol    rbp,0x3
    74cf:	ror    r8,0x13
    74d3:	mov    r12,rbp
    74d6:	mov    rbp,r10
    74d9:	xor    r12,r8
    74dc:	mov    r8,rbx
    74df:	rol    rbp,0x1e
    74e3:	mov    rbx,QWORD PTR [rsp]
    74e7:	shr    r8,0x6
    74eb:	xor    r12,r8
    74ee:	movabs r8,0xd186b8c721c0c207
    74f8:	add    r12,rcx
    74fb:	mov    rcx,rsi
    74fe:	xor    rcx,rax
    7501:	add    r8,r12
    7504:	mov    QWORD PTR [rsp+0x118],r12
    750c:	and    rcx,r13
    750f:	add    r11,r8
    7512:	mov    r8,rbp
    7515:	mov    rbp,rbx
    7518:	xor    rcx,rsi
    751b:	add    r11,rcx
    751e:	mov    rcx,r13
    7521:	ror    rcx,0xe
    7525:	xor    r9,rcx
    7528:	mov    rcx,r13
    752b:	rol    rcx,0x17
    752f:	xor    rcx,r9
    7532:	mov    r9,r10
    7535:	ror    r9,0x1c
    7539:	add    rcx,r11
    753c:	mov    r11,rdi
    753f:	xor    r8,r9
    7542:	mov    r9,r10
    7545:	add    r14,rcx
    7548:	rol    r9,0x19
    754c:	xor    r8,r9
    754f:	mov    r9,rdi
    7552:	and    r11,r10
    7555:	ror    rbp,1
    7558:	or     r9,r10
    755b:	and    r9,rdx
    755e:	or     r9,r11
    7561:	mov    r11,rbx
    7564:	ror    r11,0x8
    7568:	add    r9,r8
    756b:	mov    r8,QWORD PTR [rsp+0x88]
    7573:	xor    r11,rbp
    7576:	mov    rbp,rbx
    7579:	add    r9,rcx
    757c:	mov    rbx,r12
    757f:	shr    rbp,0x7
    7583:	mov    rcx,r8
    7586:	xor    r11,rbp
    7589:	mov    rbp,r8
    758c:	ror    rcx,0x13
    7590:	rol    rbp,0x3
    7594:	add    r11,r15
    7597:	add    r11,QWORD PTR [rsp+0x30]
    759c:	mov    r15,QWORD PTR [rsp+0xc8]
    75a4:	xor    rbp,rcx
    75a7:	mov    rcx,r8
    75aa:	movabs r8,0xeada7dd6cde0eb1e
    75b4:	shr    rcx,0x6
    75b8:	xor    rbp,rcx
    75bb:	mov    rcx,rax
    75be:	add    rbp,r11
    75c1:	xor    rcx,r13
    75c4:	mov    r11,r14
    75c7:	add    r8,rbp
    75ca:	and    rcx,r14
    75cd:	ror    r11,0x12
    75d1:	mov    QWORD PTR [rsp+0x120],rbp
    75d9:	xor    rcx,rax
    75dc:	add    rsi,r8
    75df:	mov    r8,r11
    75e2:	mov    r11,r9
    75e5:	add    rsi,rcx
    75e8:	mov    rcx,r14
    75eb:	ror    rcx,0xe
    75ef:	xor    r8,rcx
    75f2:	mov    rcx,r14
    75f5:	rol    rcx,0x17
    75f9:	xor    rcx,r8
    75fc:	add    rcx,rsi
    75ff:	add    rdx,rcx
    7602:	ror    r11,0x1c
    7606:	mov    r8,r11
    7609:	mov    r11,r9
    760c:	rol    rbx,0x3
    7610:	rol    r11,0x1e
    7614:	mov    rsi,r11
    7617:	mov    r11,r9
    761a:	xor    rsi,r8
    761d:	rol    r11,0x19
    7621:	xor    rsi,r11
    7624:	mov    r11,r10
    7627:	or     r11,r9
    762a:	mov    r8,r11
    762d:	mov    r11,r10
    7630:	and    r11,r9
    7633:	and    r8,rdi
    7636:	or     r8,r11
    7639:	mov    r11,r15
    763c:	add    r8,rsi
    763f:	mov    rsi,r15
    7642:	ror    r11,0x8
    7646:	add    r8,rcx
    7649:	mov    rcx,r12
    764c:	ror    rsi,1
    764f:	ror    rcx,0x13
    7653:	xor    r11,rsi
    7656:	mov    rsi,r15
    7659:	xor    rbx,rcx
    765c:	mov    rcx,r12
    765f:	shr    rsi,0x7
    7663:	shr    rcx,0x6
    7667:	xor    r11,rsi
    766a:	add    r11,QWORD PTR [rsp]
    766e:	add    r11,QWORD PTR [rsp+0x80]
    7676:	xor    rbx,rcx
    7679:	mov    rcx,r13
    767c:	add    rbx,r11
    767f:	xor    rcx,r14
    7682:	movabs r11,0xf57d4f7fee6ed178
    768c:	add    r11,rbx
    768f:	and    rcx,rdx
    7692:	mov    QWORD PTR [rsp+0x128],rbx
    769a:	xor    rcx,r13
    769d:	add    rax,r11
    76a0:	mov    r11,rdx
    76a3:	lea    rsi,[rcx+rax*1]
    76a7:	ror    r11,0x12
    76ab:	mov    rcx,rdx
    76ae:	ror    rcx,0xe
    76b2:	mov    rax,r11
    76b5:	mov    r11,r8
    76b8:	xor    rax,rcx
    76bb:	mov    rcx,rdx
    76be:	ror    r11,0x1c
    76c2:	rol    rcx,0x17
    76c6:	xor    rcx,rax
    76c9:	mov    rax,r11
    76cc:	mov    r11,r8
    76cf:	rol    r11,0x1e
    76d3:	add    rcx,rsi
    76d6:	mov    rsi,r11
    76d9:	mov    r11,r8
    76dc:	add    rdi,rcx
    76df:	xor    rsi,rax
    76e2:	rol    r11,0x19
    76e6:	xor    rsi,r11
    76e9:	mov    r11,r9
    76ec:	or     r11,r8
    76ef:	mov    rax,r11
    76f2:	mov    r11,r9
    76f5:	and    r11,r8
    76f8:	and    rax,r10
    76fb:	or     rax,r11
    76fe:	add    rax,rsi
    7701:	mov    rsi,QWORD PTR [rsp+0x8]
    7706:	add    rax,rcx
    7709:	mov    r11,rsi
    770c:	mov    rcx,rsi
    770f:	ror    r11,1
    7712:	ror    rcx,0x8
    7716:	xor    rcx,r11
    7719:	mov    r11,rsi
    771c:	mov    rsi,QWORD PTR [rsp+0x38]
    7721:	shr    r11,0x7
    7725:	xor    rcx,r11
    7728:	lea    r11,[rcx+r15*1]
    772c:	mov    r15,rbp
    772f:	ror    r15,0x13
    7733:	lea    rcx,[r11+rsi*1]
    7737:	mov    rsi,r15
    773a:	mov    r15,rbp
    773d:	rol    r15,0x3
    7741:	mov    r11,r15
    7744:	mov    r15,rbp
    7747:	xor    r11,rsi
    774a:	shr    r15,0x6
    774e:	movabs rsi,0x6f067aa72176fba
    7758:	xor    r11,r15
    775b:	mov    r15,rdi
    775e:	add    r11,rcx
    7761:	mov    rcx,r14
    7764:	xor    rcx,rdx
    7767:	add    rsi,r11
    776a:	mov    QWORD PTR [rsp+0x130],r11
    7772:	and    rcx,rdi
    7775:	add    r13,rsi
    7778:	xor    rcx,r14
    777b:	add    r13,rcx
    777e:	ror    r15,0x12
    7782:	mov    rcx,rdi
    7785:	ror    rcx,0xe
    7789:	mov    rsi,r15
    778c:	mov    r15,rax
    778f:	xor    rsi,rcx
    7792:	mov    rcx,rdi
    7795:	ror    r15,0x1c
    7799:	rol    rcx,0x17
    779d:	xor    rcx,rsi
    77a0:	add    rcx,r13
    77a3:	mov    r13,rax
    77a6:	rol    r13,0x1e
    77aa:	add    r10,rcx
    77ad:	xor    r13,r15
    77b0:	mov    r15,rax
    77b3:	rol    r15,0x19
    77b7:	xor    r13,r15
    77ba:	mov    r15,r8
    77bd:	or     r15,rax
    77c0:	mov    rsi,r15
    77c3:	mov    r15,r8
    77c6:	and    r15,rax
    77c9:	and    rsi,r9
    77cc:	or     rsi,r15
    77cf:	mov    r15,QWORD PTR [rsp+0x50]
    77d4:	add    rsi,r13
    77d7:	add    rsi,rcx
    77da:	mov    r13,r15
    77dd:	mov    rcx,r15
    77e0:	ror    r13,1
    77e3:	ror    rcx,0x8
    77e7:	xor    rcx,r13
    77ea:	mov    r13,r15
    77ed:	mov    r15,rbx
    77f0:	shr    r13,0x7
    77f4:	ror    r15,0x13
    77f8:	xor    rcx,r13
    77fb:	mov    r13,rbx
    77fe:	add    rcx,QWORD PTR [rsp+0x8]
    7803:	add    rcx,QWORD PTR [rsp+0x40]
    7808:	rol    r13,0x3
    780c:	xor    r13,r15
    780f:	mov    r15,rbx
    7812:	shr    r15,0x6
    7816:	xor    r13,r15
    7819:	add    rcx,r13
    781c:	mov    r15,rcx
    781f:	mov    QWORD PTR [rsp+0x138],rcx
    7827:	mov    rcx,rdx
    782a:	xor    rcx,rdi
    782d:	mov    QWORD PTR [rsp],r15
    7831:	mov    r13,rcx
    7834:	movabs rcx,0xa637dc5a2c898a6
    783e:	add    rcx,r15
    7841:	and    r13,r10
    7844:	mov    r15,rax
    7847:	add    r14,rcx
    784a:	mov    rcx,r10
    784d:	xor    r13,rdx
    7850:	and    r15,rsi
    7853:	ror    rcx,0xe
    7857:	add    r14,r13
    785a:	mov    r13,rcx
    785d:	mov    rcx,r10
    7860:	ror    rcx,0x12
    7864:	xor    rcx,r13
    7867:	mov    r13,r10
    786a:	rol    r13,0x17
    786e:	xor    r13,rcx
    7871:	mov    rcx,rsi
    7874:	add    r13,r14
    7877:	mov    r14,rsi
    787a:	ror    rcx,0x1c
    787e:	rol    r14,0x1e
    7882:	add    r9,r13
    7885:	xor    r14,rcx
    7888:	mov    rcx,rsi
    788b:	rol    rcx,0x19
    788f:	xor    r14,rcx
    7892:	mov    rcx,rax
    7895:	or     rcx,rsi
    7898:	and    rcx,r8
    789b:	or     rcx,r15
    789e:	add    rcx,r14
    78a1:	add    rcx,r13
    78a4:	mov    r13,QWORD PTR [rsp+0x10]
    78a9:	mov    r15,r13
    78ac:	ror    r15,1
    78af:	mov    r14,r15
    78b2:	mov    r15,r13
    78b5:	ror    r13,0x8
    78b9:	xor    r13,r14
    78bc:	mov    r14,r11
    78bf:	shr    r15,0x7
    78c3:	ror    r14,0x13
    78c7:	xor    r13,r15
    78ca:	add    r13,QWORD PTR [rsp+0x50]
    78cf:	add    r13,QWORD PTR [rsp+0x48]
    78d4:	mov    r15,r14
    78d7:	mov    r14,r11
    78da:	rol    r14,0x3
    78de:	xor    r14,r15
    78e1:	mov    r15,r11
    78e4:	shr    r15,0x6
    78e8:	xor    r14,r15
    78eb:	movabs r15,0x113f9804bef90dae
    78f5:	add    r13,r14
    78f8:	mov    r14,r13
    78fb:	mov    QWORD PTR [rsp+0x140],r13
    7903:	mov    r13,rdi
    7906:	xor    r13,r10
    7909:	add    r15,r14
    790c:	mov    QWORD PTR [rsp+0x8],r14
    7911:	and    r13,r9
    7914:	add    rdx,r15
    7917:	mov    r15,rsi
    791a:	xor    r13,rdi
    791d:	and    r15,rcx
    7920:	lea    r14,[r13+rdx*1+0x0]
    7925:	mov    rdx,r9
    7928:	ror    rdx,0xe
    792c:	mov    r13,rdx
    792f:	mov    rdx,r9
    7932:	ror    rdx,0x12
    7936:	xor    rdx,r13
    7939:	mov    r13,r9
    793c:	rol    r13,0x17
    7940:	xor    r13,rdx
    7943:	mov    rdx,rcx
    7946:	add    r13,r14
    7949:	mov    r14,rcx
    794c:	ror    rdx,0x1c
    7950:	rol    r14,0x1e
    7954:	add    r8,r13
    7957:	xor    r14,rdx
    795a:	mov    rdx,rcx
    795d:	rol    rdx,0x19
    7961:	xor    r14,rdx
    7964:	mov    rdx,rsi
    7967:	or     rdx,rcx
    796a:	and    rdx,rax
    796d:	or     rdx,r15
    7970:	mov    r15,QWORD PTR [rsp+0x18]
    7975:	add    rdx,r14
    7978:	add    rdx,r13
    797b:	mov    r14,r15
    797e:	mov    r13,r15
    7981:	ror    r14,1
    7984:	ror    r13,0x8
    7988:	xor    r13,r14
    798b:	mov    r14,r15
    798e:	shr    r14,0x7
    7992:	xor    r13,r14
    7995:	add    r13,QWORD PTR [rsp+0x10]
    799a:	add    r13,QWORD PTR [rsp+0x88]
    79a2:	mov    r14,QWORD PTR [rsp]
    79a6:	mov    r15,r14
    79a9:	rol    r14,0x3
    79ad:	ror    r15,0x13
    79b1:	xor    r14,r15
    79b4:	mov    r15,QWORD PTR [rsp]
    79b8:	shr    r15,0x6
    79bc:	xor    r14,r15
    79bf:	add    r13,r14
    79c2:	movabs r14,0x1b710b35131c471b
    79cc:	mov    r15,r13
    79cf:	mov    QWORD PTR [rsp+0x148],r13
    79d7:	mov    r13,r10
    79da:	xor    r13,r9
    79dd:	add    r14,r15
    79e0:	mov    QWORD PTR [rsp+0x10],r15
    79e5:	mov    r15,rdx
    79e8:	and    r13,r8
    79eb:	add    rdi,r14
    79ee:	rol    r15,0x1e
    79f2:	xor    r13,r10
    79f5:	add    rdi,r13
    79f8:	mov    r13,r8
    79fb:	ror    r13,0xe
    79ff:	mov    r14,r13
    7a02:	mov    r13,r8
    7a05:	ror    r13,0x12
    7a09:	xor    r13,r14
    7a0c:	mov    r14,r8
    7a0f:	rol    r14,0x17
    7a13:	xor    r13,r14
    7a16:	mov    r14,rdx
    7a19:	add    r13,rdi
    7a1c:	ror    r14,0x1c
    7a20:	lea    rdi,[rax+r13*1]
    7a24:	mov    rax,r15
    7a27:	mov    r15,rcx
    7a2a:	xor    rax,r14
    7a2d:	mov    r14,rdx
    7a30:	and    r15,rdx
    7a33:	rol    r14,0x19
    7a37:	xor    rax,r14
    7a3a:	mov    r14,rcx
    7a3d:	or     r14,rdx
    7a40:	and    r14,rsi
    7a43:	or     r14,r15
    7a46:	add    r14,rax
    7a49:	mov    rax,QWORD PTR [rsp+0x20]
    7a4e:	add    r13,r14
    7a51:	mov    r15,rax
    7a54:	ror    r15,1
    7a57:	mov    r14,r15
    7a5a:	mov    r15,rax
    7a5d:	ror    rax,0x8
    7a61:	xor    rax,r14
    7a64:	shr    r15,0x7
    7a68:	xor    rax,r15
    7a6b:	mov    r15,QWORD PTR [rsp+0x8]
    7a70:	add    rax,QWORD PTR [rsp+0x18]
    7a75:	add    r12,rax
    7a78:	mov    r14,r15
    7a7b:	mov    rax,r15
    7a7e:	ror    r14,0x13
    7a82:	rol    rax,0x3
    7a86:	xor    rax,r14
    7a89:	mov    r14,r15
    7a8c:	shr    r14,0x6
    7a90:	xor    rax,r14
    7a93:	movabs r14,0x28db77f523047d84
    7a9d:	lea    r15,[r12+rax*1]
    7aa1:	mov    rax,r9
    7aa4:	xor    rax,r8
    7aa7:	add    r14,r15
    7aaa:	mov    QWORD PTR [rsp+0x150],r15
    7ab2:	and    rax,rdi
    7ab5:	add    r10,r14
    7ab8:	mov    r14,r13
    7abb:	xor    rax,r9
    7abe:	rol    r14,0x1e
    7ac2:	lea    r12,[rax+r10*1]
    7ac6:	mov    r10,rdi
    7ac9:	ror    r10,0xe
    7acd:	mov    rax,r10
    7ad0:	mov    r10,rdi
    7ad3:	ror    r10,0x12
    7ad7:	xor    r10,rax
    7ada:	mov    rax,rdi
    7add:	rol    rax,0x17
    7ae1:	xor    rax,r10
    7ae4:	mov    r10,r13
    7ae7:	add    rax,r12
    7aea:	ror    r10,0x1c
    7aee:	mov    r12,r14
    7af1:	mov    r14,rdx
    7af4:	xor    r12,r10
    7af7:	mov    r10,r13
    7afa:	and    r14,r13
    7afd:	add    rsi,rax
    7b00:	rol    r10,0x19
    7b04:	xor    r12,r10
    7b07:	mov    r10,rdx
    7b0a:	or     r10,r13
    7b0d:	and    r10,rcx
    7b10:	or     r10,r14
    7b13:	mov    r14,QWORD PTR [rsp+0x28]
    7b18:	add    r10,r12
    7b1b:	add    r10,rax
    7b1e:	mov    r12,r14
    7b21:	mov    rax,r14
    7b24:	ror    r12,1
    7b27:	ror    rax,0x8
    7b2b:	xor    rax,r12
    7b2e:	mov    r12,r14
    7b31:	mov    r14,QWORD PTR [rsp+0x10]
    7b36:	shr    r12,0x7
    7b3a:	xor    rax,r12
    7b3d:	add    rax,QWORD PTR [rsp+0x20]
    7b42:	mov    r12,r14
    7b45:	add    rax,rbp
    7b48:	mov    rbp,r14
    7b4b:	ror    r12,0x13
    7b4f:	rol    rbp,0x3
    7b53:	xor    rbp,r12
    7b56:	mov    r12,r14
    7b59:	movabs r14,0x32caab7b40c72493
    7b63:	shr    r12,0x6
    7b67:	xor    rbp,r12
    7b6a:	add    rbp,rax
    7b6d:	mov    rax,r8
    7b70:	xor    rax,rdi
    7b73:	add    r14,rbp
    7b76:	mov    QWORD PTR [rsp+0x158],rbp
    7b7e:	and    rax,rsi
    7b81:	add    r9,r14
    7b84:	mov    r14,r10
    7b87:	xor    rax,r8
    7b8a:	rol    r14,0x1e
    7b8e:	lea    r12,[rax+r9*1]
    7b92:	mov    r9,rsi
    7b95:	ror    r9,0xe
    7b99:	mov    rax,r9
    7b9c:	mov    r9,rsi
    7b9f:	ror    r9,0x12
    7ba3:	xor    r9,rax
    7ba6:	mov    rax,rsi
    7ba9:	rol    rax,0x17
    7bad:	xor    rax,r9
    7bb0:	mov    r9,r10
    7bb3:	add    rax,r12
    7bb6:	ror    r9,0x1c
    7bba:	mov    r12,r14
    7bbd:	mov    r14,r13
    7bc0:	xor    r12,r9
    7bc3:	mov    r9,r10
    7bc6:	add    rcx,rax
    7bc9:	rol    r9,0x19
    7bcd:	xor    r12,r9
    7bd0:	mov    r9,r13
    7bd3:	and    r14,r10
    7bd6:	or     r9,r10
    7bd9:	and    r9,rdx
    7bdc:	or     r9,r14
    7bdf:	mov    r14,QWORD PTR [rsp+0x30]
    7be4:	add    r9,r12
    7be7:	add    r9,rax
    7bea:	mov    r12,r14
    7bed:	mov    rax,r14
    7bf0:	ror    r12,1
    7bf3:	ror    rax,0x8
    7bf7:	xor    rax,r12
    7bfa:	mov    r12,r14
    7bfd:	mov    r14,r15
    7c00:	shr    r12,0x7
    7c04:	shr    r14,0x6
    7c08:	xor    rax,r12
    7c0b:	add    rax,QWORD PTR [rsp+0x28]
    7c10:	add    rax,rbx
    7c13:	mov    rbx,r15
    7c16:	ror    rbx,0x13
    7c1a:	mov    r12,rbx
    7c1d:	mov    rbx,r15
    7c20:	rol    rbx,0x3
    7c24:	xor    rbx,r12
    7c27:	movabs r12,0x3c9ebe0a15c9bebc
    7c31:	xor    rbx,r14
    7c34:	mov    r14,rcx
    7c37:	add    rbx,rax
    7c3a:	mov    rax,rdi
    7c3d:	rol    r14,0x17
    7c41:	xor    rax,rsi
    7c44:	add    r12,rbx
    7c47:	mov    QWORD PTR [rsp+0x160],rbx
    7c4f:	and    rax,rcx
    7c52:	add    r8,r12
    7c55:	xor    rax,rdi
    7c58:	lea    rax,[rax+r8*1]
    7c5c:	mov    r8,rcx
    7c5f:	ror    r8,0xe
    7c63:	mov    r12,r8
    7c66:	mov    r8,rcx
    7c69:	ror    r8,0x12
    7c6d:	xor    r8,r12
    7c70:	xor    r8,r14
    7c73:	mov    r14,r9
    7c76:	add    r8,rax
    7c79:	mov    rax,r9
    7c7c:	add    rdx,r8
    7c7f:	ror    rax,0x1c
    7c83:	mov    r12,rax
    7c86:	mov    rax,r9
    7c89:	rol    r14,0x19
    7c8d:	rol    rax,0x1e
    7c91:	xor    rax,r12
    7c94:	xor    rax,r14
    7c97:	mov    r14,r10
    7c9a:	or     r14,r9
    7c9d:	mov    r12,r14
    7ca0:	mov    r14,r10
    7ca3:	and    r14,r9
    7ca6:	and    r12,r13
    7ca9:	or     r12,r14
    7cac:	mov    r14,QWORD PTR [rsp+0x80]
    7cb4:	add    r12,rax
    7cb7:	add    r8,r12
    7cba:	mov    rax,r14
    7cbd:	mov    r12,r14
    7cc0:	ror    r12,1
    7cc3:	ror    rax,0x8
    7cc7:	xor    rax,r12
    7cca:	mov    r12,r14
    7ccd:	shr    r12,0x7
    7cd1:	xor    rax,r12
    7cd4:	add    rax,QWORD PTR [rsp+0x30]
    7cd9:	add    rax,r11
    7cdc:	mov    r11,rbp
    7cdf:	ror    r11,0x13
    7ce3:	mov    r12,r11
    7ce6:	mov    r11,rbp
    7ce9:	shr    rbp,0x6
    7ced:	rol    r11,0x3
    7cf1:	xor    r11,r12
    7cf4:	mov    r12,r9
    7cf7:	xor    r11,rbp
    7cfa:	mov    rbp,rsi
    7cfd:	xor    rbp,rcx
    7d00:	add    r11,rax
    7d03:	mov    rax,rbp
    7d06:	mov    QWORD PTR [rsp+0x168],r11
    7d0e:	movabs rbp,0x431d67c49c100d4c
    7d18:	add    rbp,r11
    7d1b:	and    rax,rdx
    7d1e:	xor    rax,rsi
    7d21:	add    rdi,rbp
    7d24:	mov    rbp,rdx
    7d27:	add    rdi,rax
    7d2a:	mov    rax,rdx
    7d2d:	ror    rbp,0xe
    7d31:	ror    rax,0x12
    7d35:	xor    rax,rbp
    7d38:	mov    rbp,rdx
    7d3b:	and    r12,r8
    7d3e:	rol    rbp,0x17
    7d42:	xor    rax,rbp
    7d45:	mov    rbp,r8
    7d48:	add    rax,rdi
    7d4b:	mov    rdi,r8
    7d4e:	ror    rbp,0x1c
    7d52:	rol    rdi,0x1e
    7d56:	add    r13,rax
    7d59:	xor    rdi,rbp
    7d5c:	mov    rbp,r8
    7d5f:	rol    rbp,0x19
    7d63:	xor    rdi,rbp
    7d66:	mov    rbp,r9
    7d69:	or     rbp,r8
    7d6c:	and    rbp,r10
    7d6f:	or     rbp,r12
    7d72:	mov    r12,QWORD PTR [rsp+0x38]
    7d77:	add    rbp,rdi
    7d7a:	add    rax,rbp
    7d7d:	mov    rdi,r12
    7d80:	mov    rbp,r12
    7d83:	ror    rbp,1
    7d86:	ror    rdi,0x8
    7d8a:	xor    rdi,rbp
    7d8d:	mov    rbp,r12
    7d90:	shr    rbp,0x7
    7d94:	xor    rdi,rbp
    7d97:	mov    rbp,QWORD PTR [rsp]
    7d9b:	add    rdi,r14
    7d9e:	mov    r14,r8
    7da1:	add    rbp,rdi
    7da4:	mov    rdi,rbx
    7da7:	ror    rdi,0x13
    7dab:	mov    r12,rdi
    7dae:	mov    rdi,rbx
    7db1:	shr    rbx,0x6
    7db5:	rol    rdi,0x3
    7db9:	xor    rdi,r12
    7dbc:	mov    r12,QWORD PTR [rsp+0x40]
    7dc1:	xor    rdi,rbx
    7dc4:	mov    rbx,rcx
    7dc7:	xor    rbx,rdx
    7dca:	add    rdi,rbp
    7dcd:	movabs rbp,0x4cc5d4becb3e42b6
    7dd7:	and    rbx,r13
    7dda:	mov    QWORD PTR [rsp+0x170],rdi
    7de2:	xor    rbx,rcx
    7de5:	add    rbp,rdi
    7de8:	and    r14,rax
    7deb:	add    rsi,rbp
    7dee:	add    rsi,rbx
    7df1:	mov    rbx,r13
    7df4:	ror    rbx,0xe
    7df8:	mov    rbp,rbx
    7dfb:	mov    rbx,r13
    7dfe:	ror    rbx,0x12
    7e02:	xor    rbx,rbp
    7e05:	mov    rbp,r13
    7e08:	rol    rbp,0x17
    7e0c:	xor    rbx,rbp
    7e0f:	mov    rbp,rax
    7e12:	add    rbx,rsi
    7e15:	mov    rsi,rax
    7e18:	ror    rbp,0x1c
    7e1c:	rol    rsi,0x1e
    7e20:	add    r10,rbx
    7e23:	xor    rsi,rbp
    7e26:	mov    rbp,rax
    7e29:	rol    rbp,0x19
    7e2d:	xor    rsi,rbp
    7e30:	mov    rbp,r8
    7e33:	or     rbp,rax
    7e36:	and    rbp,r9
    7e39:	or     rbp,r14
    7e3c:	add    rbp,rsi
    7e3f:	mov    rsi,r12
    7e42:	add    rbx,rbp
    7e45:	mov    rbp,r12
    7e48:	ror    rsi,1
    7e4b:	ror    rbp,0x8
    7e4f:	mov    r14,rbp
    7e52:	mov    rbp,r11
    7e55:	xor    r14,rsi
    7e58:	mov    rsi,r12
    7e5b:	ror    rbp,0x13
    7e5f:	mov    r12,QWORD PTR [rsp+0x48]
    7e64:	shr    rsi,0x7
    7e68:	xor    r14,rsi
    7e6b:	mov    rsi,r11
    7e6e:	shr    r11,0x6
    7e72:	add    r14,QWORD PTR [rsp+0x38]
    7e77:	rol    rsi,0x3
    7e7b:	add    r14,QWORD PTR [rsp+0x8]
    7e80:	xor    rsi,rbp
    7e83:	mov    rbp,rdx
    7e86:	xor    r11,rsi
    7e89:	xor    rbp,r13
    7e8c:	add    r11,r14
    7e8f:	mov    rsi,rbp
    7e92:	mov    r14,rax
    7e95:	movabs rbp,0x597f299cfc657e2a
    7e9f:	add    rbp,r11
    7ea2:	and    rsi,r10
    7ea5:	and    r14,rbx
    7ea8:	mov    QWORD PTR [rsp+0x178],r11
    7eb0:	xor    rsi,rdx
    7eb3:	add    rcx,rbp
    7eb6:	mov    rbp,r10
    7eb9:	add    rcx,rsi
    7ebc:	mov    rsi,r10
    7ebf:	ror    rbp,0xe
    7ec3:	ror    rsi,0x12
    7ec7:	xor    rsi,rbp
    7eca:	mov    rbp,r10
    7ecd:	rol    rbp,0x17
    7ed1:	xor    rsi,rbp
    7ed4:	mov    rbp,rbx
    7ed7:	add    rsi,rcx
    7eda:	mov    rcx,rbx
    7edd:	ror    rbp,0x1c
    7ee1:	rol    rcx,0x1e
    7ee5:	add    r9,rsi
    7ee8:	xor    rcx,rbp
    7eeb:	mov    rbp,rbx
    7eee:	rol    rbp,0x19
    7ef2:	xor    rcx,rbp
    7ef5:	mov    rbp,rax
    7ef8:	or     rbp,rbx
    7efb:	and    rbp,r8
    7efe:	or     rbp,r14
    7f01:	add    rbp,rcx
    7f04:	mov    rcx,r12
    7f07:	add    rsi,rbp
    7f0a:	mov    rbp,r12
    7f0d:	ror    rcx,0x8
    7f11:	ror    rbp,1
    7f14:	xor    rcx,rbp
    7f17:	mov    rbp,r12
    7f1a:	mov    r12,QWORD PTR [rsp+0x88]
    7f22:	shr    rbp,0x7
    7f26:	xor    rcx,rbp
    7f29:	mov    rbp,QWORD PTR [rsp+0x10]
    7f2e:	add    rcx,QWORD PTR [rsp+0x40]
    7f33:	lea    r14,[rcx+rbp*1]
    7f37:	mov    rcx,rdi
    7f3a:	ror    rcx,0x13
    7f3e:	mov    rbp,rcx
    7f41:	mov    rcx,rdi
    7f44:	shr    rdi,0x6
    7f48:	rol    rcx,0x3
    7f4c:	xor    rcx,rbp
    7f4f:	mov    rbp,rbx
    7f52:	xor    rcx,rdi
    7f55:	and    rbp,rsi
    7f58:	movabs rdi,0x5fcb6fab3ad6faec
    7f62:	add    r14,rcx
    7f65:	mov    rcx,r13
    7f68:	xor    rcx,r10
    7f6b:	mov    QWORD PTR [rsp+0x180],r14
    7f73:	add    r14,rdi
    7f76:	and    rcx,r9
    7f79:	add    rdx,r14
    7f7c:	xor    rcx,r13
    7f7f:	add    rcx,rdx
    7f82:	mov    rdx,r9
    7f85:	ror    rdx,0xe
    7f89:	mov    rdi,rdx
    7f8c:	mov    rdx,r9
    7f8f:	ror    rdx,0x12
    7f93:	xor    rdx,rdi
    7f96:	mov    rdi,r9
    7f99:	rol    rdi,0x17
    7f9d:	xor    rdx,rdi
    7fa0:	add    rdx,rcx
    7fa3:	mov    rcx,rsi
    7fa6:	ror    rcx,0x1c
    7faa:	add    r8,rdx
    7fad:	mov    rdi,rcx
    7fb0:	mov    rcx,rsi
    7fb3:	rol    rcx,0x1e
    7fb7:	xor    rcx,rdi
    7fba:	mov    rdi,rsi
    7fbd:	rol    rdi,0x19
    7fc1:	xor    rcx,rdi
    7fc4:	mov    rdi,rbx
    7fc7:	or     rdi,rsi
    7fca:	and    rdi,rax
    7fcd:	or     rdi,rbp
    7fd0:	mov    rbp,r8
    7fd3:	add    rdi,rcx
    7fd6:	mov    rcx,r12
    7fd9:	add    rdx,rdi
    7fdc:	mov    rdi,r12
    7fdf:	ror    rcx,1
    7fe2:	ror    rdi,0x8
    7fe6:	xor    rdi,rcx
    7fe9:	mov    rcx,r12
    7fec:	rol    rbp,0x17
    7ff0:	shr    rcx,0x7
    7ff4:	xor    rdi,rcx
    7ff7:	mov    rcx,r11
    7ffa:	add    rdi,QWORD PTR [rsp+0x48]
    7fff:	ror    rcx,0x13
    8003:	lea    r12,[rdi+r15*1]
    8007:	movabs rdi,0x6c44198c4a475817
    8011:	mov    r15,rcx
    8014:	mov    rcx,r11
    8017:	shr    r11,0x6
    801b:	rol    rcx,0x3
    801f:	xor    rcx,r15
    8022:	xor    rcx,r11
    8025:	add    r12,rcx
    8028:	mov    rcx,r10
    802b:	xor    rcx,r9
    802e:	mov    QWORD PTR [rsp+0x188],r12
    8036:	add    r12,rdi
    8039:	and    rcx,r8
    803c:	add    r13,r12
    803f:	xor    rcx,r10
    8042:	add    r13,rcx
    8045:	mov    rcx,r8
    8048:	ror    rcx,0xe
    804c:	mov    rdi,rcx
    804f:	mov    rcx,r8
    8052:	ror    rcx,0x12
    8056:	xor    rcx,rdi
    8059:	xor    rcx,rbp
    805c:	mov    rbp,rdx
    805f:	ror    rbp,0x1c
    8063:	add    rcx,r13
    8066:	mov    r11,rbp
    8069:	mov    rbp,rdx
    806c:	rol    rbp,0x1e
    8070:	mov    rdi,rbp
    8073:	mov    rbp,rdx
    8076:	xor    rdi,r11
    8079:	rol    rbp,0x19
    807d:	xor    rdi,rbp
    8080:	mov    rbp,rsi
    8083:	or     rbp,rdx
    8086:	mov    r11,rbp
    8089:	mov    rbp,rsi
    808c:	and    rbp,rdx
    808f:	and    r11,rbx
    8092:	or     r11,rbp
    8095:	add    r11,rdi
    8098:	add    r11,QWORD PTR [rsp+0xd0]
    80a0:	add    QWORD PTR [rsp+0x60],rsi
    80a5:	add    rax,rcx
    80a8:	mov    rsi,QWORD PTR [rsp+0x60]
    80ad:	add    QWORD PTR [rsp+0x68],rax
    80b2:	lea    rbp,[r11+rcx*1]
    80b6:	mov    r15,QWORD PTR [rsp+0x100]
    80be:	add    QWORD PTR [rsp+0x78],r9
    80c3:	mov    rax,QWORD PTR [rsp+0x78]
    80c8:	add    QWORD PTR [rsp+0x58],rdx
    80cd:	add    QWORD PTR [rsp+0xd8],rbx
    80d5:	mov    r12,QWORD PTR [rsp+0x58]
    80da:	add    QWORD PTR [rsp+0x70],r8
    80df:	mov    r14,QWORD PTR [rsp+0x68]
    80e4:	add    QWORD PTR [rsp+0xe0],r10
    80ec:	mov    r11,QWORD PTR [rsp+0x70]
    80f1:	mov    QWORD PTR [r15+0x10],rsi
    80f5:	mov    rsi,QWORD PTR [rsp+0xd8]
    80fd:	mov    QWORD PTR [r15+0x30],rax
    8101:	mov    rax,QWORD PTR [rsp+0xe0]
    8109:	mov    QWORD PTR [rsp+0xd0],rbp
    8111:	mov    QWORD PTR [r15],rbp
    8114:	mov    QWORD PTR [r15+0x8],r12
    8118:	mov    QWORD PTR [r15+0x18],rsi
    811c:	mov    QWORD PTR [r15+0x20],r14
    8120:	mov    QWORD PTR [r15+0x28],r11
    8124:	mov    QWORD PTR [r15+0x38],rax
    8128:	mov    rax,QWORD PTR [rsp+0xf0]
    8130:	cmp    QWORD PTR [rsp+0xf8],rax
    8138:	ja     42f0 <__ctype_b_loc@plt+0x1c20>
    813e:	mov    rax,QWORD PTR [rsp+0x198]
    8146:	xor    rax,QWORD PTR fs:0x28
    814f:	jne    8163 <__ctype_b_loc@plt+0x5a93>
    8151:	add    rsp,0x1a8
    8158:	pop    rbx
    8159:	pop    rbp
    815a:	pop    r12
    815c:	pop    r13
    815e:	pop    r14
    8160:	pop    r15
    8162:	ret    
    8163:	call   2470 <__stack_chk_fail@plt>
    8168:	nop    DWORD PTR [rax+rax*1+0x0]
    8170:	push   r13
    8172:	push   r12
    8174:	mov    r12,rdi
    8177:	push   rbp
    8178:	mov    rax,QWORD PTR [rdi+0x50]
    817c:	mov    rcx,QWORD PTR [r12+0x48]
    8181:	cmp    rax,0x70
    8185:	mov    rsi,rax
    8188:	sbb    rbp,rbp
    818b:	and    rbp,0xffffffffffffff80
    818f:	add    rbp,0x100
    8196:	cmp    rax,0x70
    819a:	sbb    rdx,rdx
    819d:	and    rdx,0xffffffffffffff80
    81a1:	add    rdx,0xf0
    81a8:	cmp    rax,0x70
    81ac:	sbb    rdi,rdi
    81af:	and    rdi,0xfffffffffffffff0
    81b3:	add    rdi,0x1f
    81b7:	cmp    rax,0x70
    81bb:	sbb    r8,r8
    81be:	and    r8,0xfffffffffffffff0
    81c2:	add    r8,0x1e
    81c6:	add    rsi,QWORD PTR [r12+0x40]
    81cb:	mov    QWORD PTR [r12+0x40],rsi
    81d0:	jae    81db <__ctype_b_loc@plt+0x5b0b>
    81d2:	add    rcx,0x1
    81d6:	mov    QWORD PTR [r12+0x48],rcx
    81db:	mov    r9,rsi
    81de:	shl    rcx,0x3
    81e2:	lea    r13,[r12+0x58]
    81e7:	sub    rdx,rax
    81ea:	shr    r9,0x3d
    81ee:	shl    rsi,0x3
    81f2:	or     rcx,r9
    81f5:	bswap  rsi
    81f8:	bswap  rcx
    81fb:	mov    QWORD PTR [r12+r8*8+0x58],rcx
    8200:	mov    QWORD PTR [r12+rdi*8+0x58],rsi
    8205:	lea    rdi,[r13+rax*1+0x0]
    820a:	lea    rsi,[rip+0x4a6f]        # cc80 <_IO_stdin_used@@Base+0xc80>
    8211:	call   2560 <memcpy@plt>
    8216:	mov    rdx,r12
    8219:	mov    rsi,rbp
    821c:	mov    rdi,r13
    821f:	pop    rbp
    8220:	pop    r12
    8222:	pop    r13
    8224:	jmp    4220 <__ctype_b_loc@plt+0x1b50>
    8229:	nop    DWORD PTR [rax+0x0]
    8230:	endbr64 
    8234:	push   r12
    8236:	mov    r12,rsi
    8239:	push   rbp
    823a:	mov    rbp,rdi
    823d:	sub    rsp,0x8
    8241:	call   8170 <__ctype_b_loc@plt+0x5aa0>
    8246:	add    rsp,0x8
    824a:	mov    rsi,r12
    824d:	mov    rdi,rbp
    8250:	pop    rbp
    8251:	pop    r12
    8253:	jmp    41c0 <__ctype_b_loc@plt+0x1af0>
    8258:	nop    DWORD PTR [rax+rax*1+0x0]
    8260:	endbr64 
    8264:	push   r12
    8266:	mov    r12,rsi
    8269:	push   rbp
    826a:	mov    rbp,rdi
    826d:	sub    rsp,0x8
    8271:	call   8170 <__ctype_b_loc@plt+0x5aa0>
    8276:	add    rsp,0x8
    827a:	mov    rsi,r12
    827d:	mov    rdi,rbp
    8280:	pop    rbp
    8281:	pop    r12
    8283:	jmp    41f0 <__ctype_b_loc@plt+0x1b20>
    8288:	nop    DWORD PTR [rax+rax*1+0x0]
    8290:	endbr64 
    8294:	push   r15
    8296:	push   r14
    8298:	push   r13
    829a:	mov    r13,rsi
    829d:	push   r12
    829f:	mov    r12,rdx
    82a2:	push   rbp
    82a3:	push   rbx
    82a4:	mov    rbx,rdi
    82a7:	sub    rsp,0x8
    82ab:	mov    rbp,QWORD PTR [rdx+0x50]
    82af:	test   rbp,rbp
    82b2:	jne    83f8 <__ctype_b_loc@plt+0x5d28>
    82b8:	cmp    r13,0x7f
    82bc:	jbe    83dc <__ctype_b_loc@plt+0x5d0c>
    82c2:	test   bl,0x7
    82c5:	je     83c0 <__ctype_b_loc@plt+0x5cf0>
    82cb:	lea    rbp,[r12+0x58]
    82d0:	cmp    r13,0x80
    82d7:	je     8560 <__ctype_b_loc@plt+0x5e90>
    82dd:	lea    r15,[r13-0x81]
    82e4:	shr    r15,0x7
    82e8:	lea    r14,[r15+0x1]
    82ec:	shl    r14,0x7
    82f0:	add    r14,rbx
    82f3:	nop    DWORD PTR [rax+rax*1+0x0]
    82f8:	movdqu xmm0,XMMWORD PTR [rbx]
    82fc:	mov    rdx,r12
    82ff:	mov    esi,0x80
    8304:	mov    rdi,rbp
    8307:	sub    rbx,0xffffffffffffff80
    830b:	movups XMMWORD PTR [rbp+0x0],xmm0
    830f:	movdqu xmm1,XMMWORD PTR [rbx-0x70]
    8314:	movups XMMWORD PTR [rbp+0x10],xmm1
    8318:	movdqu xmm2,XMMWORD PTR [rbx-0x60]
    831d:	movups XMMWORD PTR [rbp+0x20],xmm2
    8321:	movdqu xmm3,XMMWORD PTR [rbx-0x50]
    8326:	movups XMMWORD PTR [rbp+0x30],xmm3
    832a:	movdqu xmm4,XMMWORD PTR [rbx-0x40]
    832f:	movups XMMWORD PTR [rbp+0x40],xmm4
    8333:	movdqu xmm5,XMMWORD PTR [rbx-0x30]
    8338:	movups XMMWORD PTR [rbp+0x50],xmm5
    833c:	movdqu xmm6,XMMWORD PTR [rbx-0x20]
    8341:	movups XMMWORD PTR [rbp+0x60],xmm6
    8345:	movdqu xmm7,XMMWORD PTR [rbx-0x10]
    834a:	movups XMMWORD PTR [rbp+0x70],xmm7
    834e:	call   4220 <__ctype_b_loc@plt+0x1b50>
    8353:	cmp    rbx,r14
    8356:	jne    82f8 <__ctype_b_loc@plt+0x5c28>
    8358:	neg    r15
    835b:	shl    r15,0x7
    835f:	lea    r13,[r13+r15*1-0x80]
    8364:	mov    rdx,QWORD PTR [r12+0x50]
    8369:	lea    rsi,[rbp+rdx*1+0x0]
    836e:	cmp    r13d,0x8
    8372:	jae    8440 <__ctype_b_loc@plt+0x5d70>
    8378:	test   r13b,0x4
    837c:	jne    8568 <__ctype_b_loc@plt+0x5e98>
    8382:	test   r13d,r13d
    8385:	je     8397 <__ctype_b_loc@plt+0x5cc7>
    8387:	movzx  eax,BYTE PTR [r14]
    838b:	mov    BYTE PTR [rsi],al
    838d:	test   r13b,0x2
    8391:	jne    857e <__ctype_b_loc@plt+0x5eae>
    8397:	add    r13,rdx
    839a:	cmp    r13,0x7f
    839e:	ja     847d <__ctype_b_loc@plt+0x5dad>
    83a4:	mov    QWORD PTR [r12+0x50],r13
    83a9:	add    rsp,0x8
    83ad:	pop    rbx
    83ae:	pop    rbp
    83af:	pop    r12
    83b1:	pop    r13
    83b3:	pop    r14
    83b5:	pop    r15
    83b7:	ret    
    83b8:	nop    DWORD PTR [rax+rax*1+0x0]
    83c0:	mov    rbp,r13
    83c3:	mov    rdi,rbx
    83c6:	mov    rdx,r12
    83c9:	and    r13d,0x7f
    83cd:	and    rbp,0xffffffffffffff80
    83d1:	mov    rsi,rbp
    83d4:	add    rbx,rbp
    83d7:	call   4220 <__ctype_b_loc@plt+0x1b50>
    83dc:	test   r13,r13
    83df:	jne    8591 <__ctype_b_loc@plt+0x5ec1>
    83e5:	add    rsp,0x8
    83e9:	pop    rbx
    83ea:	pop    rbp
    83eb:	pop    r12
    83ed:	pop    r13
    83ef:	pop    r14
    83f1:	pop    r15
    83f3:	ret    
    83f4:	nop    DWORD PTR [rax+0x0]
    83f8:	mov    r14d,0x100
    83fe:	lea    r15,[rdx+0x58]
    8402:	sub    r14,rbp
    8405:	lea    rdi,[r15+rbp*1]
    8409:	cmp    r14,rsi
    840c:	cmova  r14,rsi
    8410:	mov    rsi,rbx
    8413:	mov    rdx,r14
    8416:	call   2560 <memcpy@plt>
    841b:	mov    rsi,QWORD PTR [r12+0x50]
    8420:	add    rsi,r14
    8423:	mov    QWORD PTR [r12+0x50],rsi
    8428:	cmp    rsi,0x80
    842f:	ja     84b0 <__ctype_b_loc@plt+0x5de0>
    8431:	add    rbx,r14
    8434:	sub    r13,r14
    8437:	jmp    82b8 <__ctype_b_loc@plt+0x5be8>
    843c:	nop    DWORD PTR [rax+0x0]
    8440:	mov    rax,QWORD PTR [r14]
    8443:	lea    rdi,[rsi+0x8]
    8447:	and    rdi,0xfffffffffffffff8
    844b:	mov    QWORD PTR [rsi],rax
    844e:	mov    eax,r13d
    8451:	mov    rcx,QWORD PTR [r14+rax*1-0x8]
    8456:	mov    QWORD PTR [rsi+rax*1-0x8],rcx
    845b:	mov    rcx,rsi
    845e:	mov    rsi,r14
    8461:	sub    rcx,rdi
    8464:	sub    rsi,rcx
    8467:	add    ecx,r13d
    846a:	add    r13,rdx
    846d:	shr    ecx,0x3
    8470:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    8473:	cmp    r13,0x7f
    8477:	jbe    83a4 <__ctype_b_loc@plt+0x5cd4>
    847d:	mov    rdx,r12
    8480:	mov    rdi,rbp
    8483:	mov    esi,0x80
    8488:	add    r13,0xffffffffffffff80
    848c:	call   4220 <__ctype_b_loc@plt+0x1b50>
    8491:	lea    rsi,[r12+0xd8]
    8499:	mov    rdx,r13
    849c:	mov    rdi,rbp
    849f:	call   2560 <memcpy@plt>
    84a4:	jmp    83a4 <__ctype_b_loc@plt+0x5cd4>
    84a9:	nop    DWORD PTR [rax+0x0]
    84b0:	and    rsi,0xffffffffffffff80
    84b4:	mov    rdx,r12
    84b7:	mov    rdi,r15
    84ba:	add    rbp,r14
    84bd:	call   4220 <__ctype_b_loc@plt+0x1b50>
    84c2:	mov    rax,QWORD PTR [r12+0x50]
    84c7:	and    rbp,0xffffffffffffff80
    84cb:	lea    rsi,[r15+rbp*1]
    84cf:	and    eax,0x7f
    84d2:	mov    QWORD PTR [r12+0x50],rax
    84d7:	cmp    eax,0x8
    84da:	jae    8510 <__ctype_b_loc@plt+0x5e40>
    84dc:	test   al,0x4
    84de:	jne    8544 <__ctype_b_loc@plt+0x5e74>
    84e0:	test   eax,eax
    84e2:	je     8431 <__ctype_b_loc@plt+0x5d61>
    84e8:	movzx  edx,BYTE PTR [rsi]
    84eb:	mov    BYTE PTR [r12+0x58],dl
    84f0:	test   al,0x2
    84f2:	je     8431 <__ctype_b_loc@plt+0x5d61>
    84f8:	movzx  edx,WORD PTR [rax+rsi*1-0x2]
    84fd:	mov    WORD PTR [r15+rax*1-0x2],dx
    8503:	jmp    8431 <__ctype_b_loc@plt+0x5d61>
    8508:	nop    DWORD PTR [rax+rax*1+0x0]
    8510:	mov    rdx,QWORD PTR [rsi]
    8513:	lea    rdi,[r12+0x60]
    8518:	and    rdi,0xfffffffffffffff8
    851c:	mov    QWORD PTR [r12+0x58],rdx
    8521:	mov    rdx,QWORD PTR [rax+rsi*1-0x8]
    8526:	mov    QWORD PTR [r15+rax*1-0x8],rdx
    852b:	sub    r15,rdi
    852e:	lea    ecx,[rax+r15*1]
    8532:	sub    rsi,r15
    8535:	mov    eax,ecx
    8537:	shr    eax,0x3
    853a:	mov    ecx,eax
    853c:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    853f:	jmp    8431 <__ctype_b_loc@plt+0x5d61>
    8544:	mov    edx,DWORD PTR [rsi]
    8546:	mov    DWORD PTR [r12+0x58],edx
    854b:	mov    edx,DWORD PTR [rax+rsi*1-0x4]
    854f:	mov    DWORD PTR [r15+rax*1-0x4],edx
    8554:	jmp    8431 <__ctype_b_loc@plt+0x5d61>
    8559:	nop    DWORD PTR [rax+0x0]
    8560:	mov    r14,rbx
    8563:	jmp    8364 <__ctype_b_loc@plt+0x5c94>
    8568:	mov    eax,DWORD PTR [r14]
    856b:	mov    DWORD PTR [rsi],eax
    856d:	mov    eax,r13d
    8570:	mov    ecx,DWORD PTR [r14+rax*1-0x4]
    8575:	mov    DWORD PTR [rsi+rax*1-0x4],ecx
    8579:	jmp    8397 <__ctype_b_loc@plt+0x5cc7>
    857e:	mov    eax,r13d
    8581:	movzx  ecx,WORD PTR [r14+rax*1-0x2]
    8587:	mov    WORD PTR [rsi+rax*1-0x2],cx
    858c:	jmp    8397 <__ctype_b_loc@plt+0x5cc7>
    8591:	lea    rbp,[r12+0x58]
    8596:	mov    r14,rbx
    8599:	jmp    8364 <__ctype_b_loc@plt+0x5c94>
    859e:	xchg   ax,ax
    85a0:	endbr64 
    85a4:	push   r12
    85a6:	mov    r12,rdx
    85a9:	push   rbp
    85aa:	sub    rsp,0x168
    85b1:	mov    rax,QWORD PTR fs:0x28
    85ba:	mov    QWORD PTR [rsp+0x158],rax
    85c2:	xor    eax,eax
    85c4:	mov    rbp,rsp
    85c7:	movabs rax,0x6a09e667f3bcc908
    85d1:	mov    QWORD PTR [rsp+0x48],0x0
    85da:	mov    QWORD PTR [rsp],rax
    85de:	mov    rdx,rbp
    85e1:	movabs rax,0xbb67ae8584caa73b
    85eb:	mov    QWORD PTR [rsp+0x8],rax
    85f0:	movabs rax,0x3c6ef372fe94f82b
    85fa:	mov    QWORD PTR [rsp+0x10],rax
    85ff:	movabs rax,0xa54ff53a5f1d36f1
    8609:	mov    QWORD PTR [rsp+0x18],rax
    860e:	movabs rax,0x510e527fade682d1
    8618:	mov    QWORD PTR [rsp+0x20],rax
    861d:	movabs rax,0x9b05688c2b3e6c1f
    8627:	mov    QWORD PTR [rsp+0x28],rax
    862c:	movabs rax,0x1f83d9abfb41bd6b
    8636:	mov    QWORD PTR [rsp+0x30],rax
    863b:	movabs rax,0x5be0cd19137e2179
    8645:	mov    QWORD PTR [rsp+0x38],rax
    864a:	mov    QWORD PTR [rsp+0x40],0x0
    8653:	mov    QWORD PTR [rsp+0x50],0x0
    865c:	call   8290 <__ctype_b_loc@plt+0x5bc0>
    8661:	mov    rdi,rbp
    8664:	call   8170 <__ctype_b_loc@plt+0x5aa0>
    8669:	mov    rsi,r12
    866c:	mov    rdi,rbp
    866f:	call   41c0 <__ctype_b_loc@plt+0x1af0>
    8674:	mov    rcx,QWORD PTR [rsp+0x158]
    867c:	xor    rcx,QWORD PTR fs:0x28
    8685:	jne    8692 <__ctype_b_loc@plt+0x5fc2>
    8687:	add    rsp,0x168
    868e:	pop    rbp
    868f:	pop    r12
    8691:	ret    
    8692:	call   2470 <__stack_chk_fail@plt>
    8697:	nop    WORD PTR [rax+rax*1+0x0]
    86a0:	endbr64 
    86a4:	push   r12
    86a6:	mov    r12,rdx
    86a9:	push   rbp
    86aa:	sub    rsp,0x168
    86b1:	mov    rax,QWORD PTR fs:0x28
    86ba:	mov    QWORD PTR [rsp+0x158],rax
    86c2:	xor    eax,eax
    86c4:	mov    rbp,rsp
    86c7:	movabs rax,0xcbbb9d5dc1059ed8
    86d1:	mov    QWORD PTR [rsp+0x48],0x0
    86da:	mov    QWORD PTR [rsp],rax
    86de:	mov    rdx,rbp
    86e1:	movabs rax,0x629a292a367cd507
    86eb:	mov    QWORD PTR [rsp+0x8],rax
    86f0:	movabs rax,0x9159015a3070dd17
    86fa:	mov    QWORD PTR [rsp+0x10],rax
    86ff:	movabs rax,0x152fecd8f70e5939
    8709:	mov    QWORD PTR [rsp+0x18],rax
    870e:	movabs rax,0x67332667ffc00b31
    8718:	mov    QWORD PTR [rsp+0x20],rax
    871d:	movabs rax,0x8eb44a8768581511
    8727:	mov    QWORD PTR [rsp+0x28],rax
    872c:	movabs rax,0xdb0c2e0d64f98fa7
    8736:	mov    QWORD PTR [rsp+0x30],rax
    873b:	movabs rax,0x47b5481dbefa4fa4
    8745:	mov    QWORD PTR [rsp+0x38],rax
    874a:	mov    QWORD PTR [rsp+0x40],0x0
    8753:	mov    QWORD PTR [rsp+0x50],0x0
    875c:	call   8290 <__ctype_b_loc@plt+0x5bc0>
    8761:	mov    rdi,rbp
    8764:	call   8170 <__ctype_b_loc@plt+0x5aa0>
    8769:	mov    rsi,r12
    876c:	mov    rdi,rbp
    876f:	call   41f0 <__ctype_b_loc@plt+0x1b20>
    8774:	mov    rcx,QWORD PTR [rsp+0x158]
    877c:	xor    rcx,QWORD PTR fs:0x28
    8785:	jne    8792 <__ctype_b_loc@plt+0x60c2>
    8787:	add    rsp,0x168
    878e:	pop    rbp
    878f:	pop    r12
    8791:	ret    
    8792:	call   2470 <__stack_chk_fail@plt>
    8797:	nop    WORD PTR [rax+rax*1+0x0]
    87a0:	push   r15
    87a2:	push   r14
    87a4:	mov    r14,rsi
    87a7:	push   r13
    87a9:	mov    r13,rdi
    87ac:	mov    edi,0x8048
    87b1:	push   r12
    87b3:	push   rbp
    87b4:	push   rbx
    87b5:	mov    rbx,rdx
    87b8:	sub    rsp,0x178
    87bf:	mov    QWORD PTR [rsp+0x8],rcx
    87c4:	mov    rax,QWORD PTR fs:0x28
    87cd:	mov    QWORD PTR [rsp+0x168],rax
    87d5:	xor    eax,eax
    87d7:	call   2580 <malloc@plt>
    87dc:	test   rax,rax
    87df:	je     88b5 <__ctype_b_loc@plt+0x61e5>
    87e5:	lea    r15,[rsp+0x10]
    87ea:	mov    r12,rax
    87ed:	mov    rdi,r15
    87f0:	call   rbx
    87f2:	mov    ebx,0x8000
    87f7:	xor    ebp,ebp
    87f9:	jmp    8828 <__ctype_b_loc@plt+0x6158>
    87fb:	nop    DWORD PTR [rax+rax*1+0x0]
    8800:	mov    rdx,rbx
    8803:	lea    rdi,[r12+rbp*1]
    8807:	mov    rcx,r13
    880a:	mov    esi,0x1
    880f:	sub    rdx,rbp
    8812:	call   2400 <fread_unlocked@plt>
    8817:	add    rbp,rax
    881a:	cmp    rbp,0x8000
    8821:	je     8870 <__ctype_b_loc@plt+0x61a0>
    8823:	test   rax,rax
    8826:	je     8885 <__ctype_b_loc@plt+0x61b5>
    8828:	test   BYTE PTR [r13+0x0],0x10
    882d:	je     8800 <__ctype_b_loc@plt+0x6130>
    882f:	test   rbp,rbp
    8832:	jne    88a0 <__ctype_b_loc@plt+0x61d0>
    8834:	mov    rsi,r14
    8837:	mov    rdi,r15
    883a:	mov    rax,QWORD PTR [rsp+0x8]
    883f:	call   rax
    8841:	mov    rdi,r12
    8844:	call   2390 <free@plt>
    8849:	xor    eax,eax
    884b:	mov    rcx,QWORD PTR [rsp+0x168]
    8853:	xor    rcx,QWORD PTR fs:0x28
    885c:	jne    88b0 <__ctype_b_loc@plt+0x61e0>
    885e:	add    rsp,0x178
    8865:	pop    rbx
    8866:	pop    rbp
    8867:	pop    r12
    8869:	pop    r13
    886b:	pop    r14
    886d:	pop    r15
    886f:	ret    
    8870:	mov    rdx,r15
    8873:	mov    esi,0x8000
    8878:	mov    rdi,r12
    887b:	call   4220 <__ctype_b_loc@plt+0x1b50>
    8880:	jmp    87f7 <__ctype_b_loc@plt+0x6127>
    8885:	test   BYTE PTR [r13+0x0],0x20
    888a:	je     882f <__ctype_b_loc@plt+0x615f>
    888c:	mov    rdi,r12
    888f:	call   2390 <free@plt>
    8894:	mov    eax,0x1
    8899:	jmp    884b <__ctype_b_loc@plt+0x617b>
    889b:	nop    DWORD PTR [rax+rax*1+0x0]
    88a0:	mov    rdx,r15
    88a3:	mov    rsi,rbp
    88a6:	mov    rdi,r12
    88a9:	call   8290 <__ctype_b_loc@plt+0x5bc0>
    88ae:	jmp    8834 <__ctype_b_loc@plt+0x6164>
    88b0:	call   2470 <__stack_chk_fail@plt>
    88b5:	mov    eax,0x1
    88ba:	jmp    884b <__ctype_b_loc@plt+0x617b>
    88bc:	nop    DWORD PTR [rax+0x0]
    88c0:	endbr64 
    88c4:	lea    rcx,[rip+0xfffffffffffff965]        # 8230 <__ctype_b_loc@plt+0x5b60>
    88cb:	lea    rdx,[rip+0xffffffffffffb7ce]        # 40a0 <__ctype_b_loc@plt+0x19d0>
    88d2:	jmp    87a0 <__ctype_b_loc@plt+0x60d0>
    88d7:	nop    WORD PTR [rax+rax*1+0x0]
    88e0:	endbr64 
    88e4:	lea    rcx,[rip+0xfffffffffffff975]        # 8260 <__ctype_b_loc@plt+0x5b90>
    88eb:	lea    rdx,[rip+0xffffffffffffb83e]        # 4130 <__ctype_b_loc@plt+0x1a60>
    88f2:	jmp    87a0 <__ctype_b_loc@plt+0x60d0>
    88f7:	nop    WORD PTR [rax+rax*1+0x0]
    8900:	endbr64 
    8904:	jmp    2500 <posix_fadvise@plt>
    8909:	nop    DWORD PTR [rax+0x0]
    8910:	endbr64 
    8914:	test   rdi,rdi
    8917:	je     8938 <__ctype_b_loc@plt+0x6268>
    8919:	push   r12
    891b:	mov    r12d,esi
    891e:	call   2570 <fileno@plt>
    8923:	mov    ecx,r12d
    8926:	xor    edx,edx
    8928:	xor    esi,esi
    892a:	mov    edi,eax
    892c:	pop    r12
    892e:	jmp    2500 <posix_fadvise@plt>
    8933:	nop    DWORD PTR [rax+rax*1+0x0]
    8938:	ret    
    8939:	nop    DWORD PTR [rax+0x0]
    8940:	endbr64 
    8944:	push   r13
    8946:	push   r12
    8948:	push   rbp
    8949:	mov    rbp,rsi
    894c:	call   2640 <fopen@plt>
    8951:	mov    r12,rax
    8954:	test   rax,rax
    8957:	je     8966 <__ctype_b_loc@plt+0x6296>
    8959:	mov    rdi,rax
    895c:	call   2570 <fileno@plt>
    8961:	cmp    eax,0x2
    8964:	jbe    8970 <__ctype_b_loc@plt+0x62a0>
    8966:	mov    rax,r12
    8969:	pop    rbp
    896a:	pop    r12
    896c:	pop    r13
    896e:	ret    
    896f:	nop
    8970:	mov    edi,eax
    8972:	call   a770 <__ctype_b_loc@plt+0x80a0>
    8977:	mov    r13d,eax
    897a:	test   eax,eax
    897c:	js     89c0 <__ctype_b_loc@plt+0x62f0>
    897e:	mov    rdi,r12
    8981:	call   b0b0 <__ctype_b_loc@plt+0x89e0>
    8986:	test   eax,eax
    8988:	jne    899d <__ctype_b_loc@plt+0x62cd>
    898a:	mov    rsi,rbp
    898d:	mov    edi,r13d
    8990:	call   25e0 <fdopen@plt>
    8995:	mov    r12,rax
    8998:	test   rax,rax
    899b:	jne    8966 <__ctype_b_loc@plt+0x6296>
    899d:	call   23b0 <__errno_location@plt>
    89a2:	mov    edi,r13d
    89a5:	mov    r12d,DWORD PTR [rax]
    89a8:	mov    rbp,rax
    89ab:	call   24f0 <close@plt>
    89b0:	mov    DWORD PTR [rbp+0x0],r12d
    89b4:	xor    r12d,r12d
    89b7:	jmp    8966 <__ctype_b_loc@plt+0x6296>
    89b9:	nop    DWORD PTR [rax+0x0]
    89c0:	call   23b0 <__errno_location@plt>
    89c5:	mov    rdi,r12
    89c8:	xor    r12d,r12d
    89cb:	mov    r13d,DWORD PTR [rax]
    89ce:	mov    rbp,rax
    89d1:	call   b0b0 <__ctype_b_loc@plt+0x89e0>
    89d6:	mov    DWORD PTR [rbp+0x0],r13d
    89da:	jmp    8966 <__ctype_b_loc@plt+0x6296>
    89dc:	nop    DWORD PTR [rax+0x0]
    89e0:	endbr64 
    89e4:	push   rbx
    89e5:	test   rdi,rdi
    89e8:	je     8a73 <__ctype_b_loc@plt+0x63a3>
    89ee:	mov    esi,0x2f
    89f3:	mov    rbx,rdi
    89f6:	call   24c0 <strrchr@plt>
    89fb:	test   rax,rax
    89fe:	je     8a4b <__ctype_b_loc@plt+0x637b>
    8a00:	lea    r8,[rax+0x1]
    8a04:	mov    rdx,r8
    8a07:	sub    rdx,rbx
    8a0a:	cmp    rdx,0x6
    8a0e:	jle    8a4b <__ctype_b_loc@plt+0x637b>
    8a10:	lea    rsi,[rax-0x6]
    8a14:	mov    ecx,0x7
    8a19:	lea    rdi,[rip+0x4318]        # cd38 <_IO_stdin_used@@Base+0xd38>
    8a20:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    8a22:	seta   dl
    8a25:	sbb    dl,0x0
    8a28:	test   dl,dl
    8a2a:	jne    8a4b <__ctype_b_loc@plt+0x637b>
    8a2c:	cmp    BYTE PTR [rax+0x1],0x6c
    8a30:	jne    8a60 <__ctype_b_loc@plt+0x6390>
    8a32:	cmp    BYTE PTR [r8+0x1],0x74
    8a37:	jne    8a60 <__ctype_b_loc@plt+0x6390>
    8a39:	cmp    BYTE PTR [r8+0x2],0x2d
    8a3e:	jne    8a60 <__ctype_b_loc@plt+0x6390>
    8a40:	lea    rbx,[rax+0x4]
    8a44:	mov    QWORD PTR [rip+0x8655],rbx        # 110a0 <__progname@@GLIBC_2.2.5>
    8a4b:	mov    QWORD PTR [rip+0x86ce],rbx        # 11120 <program_name@@Base>
    8a52:	mov    QWORD PTR [rip+0x8667],rbx        # 110c0 <__progname_full@@GLIBC_2.2.5>
    8a59:	pop    rbx
    8a5a:	ret    
    8a5b:	nop    DWORD PTR [rax+rax*1+0x0]
    8a60:	mov    rbx,r8
    8a63:	mov    QWORD PTR [rip+0x86b6],rbx        # 11120 <program_name@@Base>
    8a6a:	mov    QWORD PTR [rip+0x864f],rbx        # 110c0 <__progname_full@@GLIBC_2.2.5>
    8a71:	pop    rbx
    8a72:	ret    
    8a73:	mov    rcx,QWORD PTR [rip+0x8666]        # 110e0 <stderr@@GLIBC_2.2.5>
    8a7a:	mov    edx,0x37
    8a7f:	mov    esi,0x1
    8a84:	lea    rdi,[rip+0x4275]        # cd00 <_IO_stdin_used@@Base+0xd00>
    8a8b:	call   2680 <fwrite@plt>
    8a90:	call   23a0 <abort@plt>
    8a95:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8a9f:	nop
    8aa0:	push   rbp
    8aa1:	mov    rbp,rdi
    8aa4:	push   rbx
    8aa5:	mov    ebx,esi
    8aa7:	sub    rsp,0x8
    8aab:	call   b4d0 <__ctype_b_loc@plt+0x8e00>
    8ab0:	movzx  edx,BYTE PTR [rax]
    8ab3:	and    edx,0xffffffdf
    8ab6:	cmp    dl,0x55
    8ab9:	jne    8b08 <__ctype_b_loc@plt+0x6438>
    8abb:	movzx  edx,BYTE PTR [rax+0x1]
    8abf:	and    edx,0xffffffdf
    8ac2:	cmp    dl,0x54
    8ac5:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8ac7:	movzx  edx,BYTE PTR [rax+0x2]
    8acb:	and    edx,0xffffffdf
    8ace:	cmp    dl,0x46
    8ad1:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8ad3:	cmp    BYTE PTR [rax+0x3],0x2d
    8ad7:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8ad9:	cmp    BYTE PTR [rax+0x4],0x38
    8add:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8adf:	cmp    BYTE PTR [rax+0x5],0x0
    8ae3:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8ae5:	cmp    BYTE PTR [rbp+0x0],0x60
    8ae9:	lea    rax,[rip+0x425d]        # cd4d <_IO_stdin_used@@Base+0xd4d>
    8af0:	lea    rdx,[rip+0x424b]        # cd42 <_IO_stdin_used@@Base+0xd42>
    8af7:	cmovne rax,rdx
    8afb:	add    rsp,0x8
    8aff:	pop    rbx
    8b00:	pop    rbp
    8b01:	ret    
    8b02:	nop    WORD PTR [rax+rax*1+0x0]
    8b08:	cmp    dl,0x47
    8b0b:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8b0d:	movzx  edx,BYTE PTR [rax+0x1]
    8b11:	and    edx,0xffffffdf
    8b14:	cmp    dl,0x42
    8b17:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8b19:	cmp    BYTE PTR [rax+0x2],0x31
    8b1d:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8b1f:	cmp    BYTE PTR [rax+0x3],0x38
    8b23:	je     8b48 <__ctype_b_loc@plt+0x6478>
    8b25:	cmp    ebx,0x9
    8b28:	lea    rax,[rip+0x4211]        # cd40 <_IO_stdin_used@@Base+0xd40>
    8b2f:	lea    rdx,[rip+0x421b]        # cd51 <_IO_stdin_used@@Base+0xd51>
    8b36:	cmovne rax,rdx
    8b3a:	add    rsp,0x8
    8b3e:	pop    rbx
    8b3f:	pop    rbp
    8b40:	ret    
    8b41:	nop    DWORD PTR [rax+0x0]
    8b48:	cmp    BYTE PTR [rax+0x4],0x30
    8b4c:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8b4e:	cmp    BYTE PTR [rax+0x5],0x33
    8b52:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8b54:	cmp    BYTE PTR [rax+0x6],0x30
    8b58:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8b5a:	cmp    BYTE PTR [rax+0x7],0x0
    8b5e:	jne    8b25 <__ctype_b_loc@plt+0x6455>
    8b60:	cmp    BYTE PTR [rbp+0x0],0x60
    8b64:	lea    rax,[rip+0x41db]        # cd46 <_IO_stdin_used@@Base+0xd46>
    8b6b:	lea    rdx,[rip+0x41d8]        # cd4a <_IO_stdin_used@@Base+0xd4a>
    8b72:	cmovne rax,rdx
    8b76:	add    rsp,0x8
    8b7a:	pop    rbx
    8b7b:	pop    rbp
    8b7c:	ret    
    8b7d:	nop    DWORD PTR [rax]
    8b80:	push   r15
    8b82:	mov    r15,rdi
    8b85:	push   r14
    8b87:	mov    r14,rsi
    8b8a:	push   r13
    8b8c:	push   r12
    8b8e:	push   rbp
    8b8f:	push   rbx
    8b90:	mov    ebx,r9d
    8b93:	sub    rsp,0xb8
    8b9a:	mov    rax,QWORD PTR [rsp+0xf0]
    8ba2:	mov    QWORD PTR [rsp+0x18],rdx
    8ba7:	mov    QWORD PTR [rsp+0x10],rcx
    8bac:	mov    QWORD PTR [rsp+0x28],rax
    8bb1:	mov    rax,QWORD PTR [rsp+0xf8]
    8bb9:	mov    DWORD PTR [rsp+0x8],r8d
    8bbe:	mov    QWORD PTR [rsp+0x78],rax
    8bc3:	mov    rax,QWORD PTR [rsp+0x100]
    8bcb:	mov    DWORD PTR [rsp+0x64],r9d
    8bd0:	mov    QWORD PTR [rsp+0x70],rax
    8bd5:	mov    rax,QWORD PTR fs:0x28
    8bde:	mov    QWORD PTR [rsp+0xa8],rax
    8be6:	xor    eax,eax
    8be8:	call   2450 <__ctype_get_mb_cur_max@plt>
    8bed:	mov    r10d,DWORD PTR [rsp+0x8]
    8bf2:	and    ebx,0x2
    8bf5:	mov    QWORD PTR [rsp+0x68],rax
    8bfa:	setne  BYTE PTR [rsp+0x63]
    8bff:	cmp    r10d,0xa
    8c03:	ja     26e0 <__ctype_b_loc@plt+0x10>
    8c09:	lea    rcx,[rip+0x41b0]        # cdc0 <_IO_stdin_used@@Base+0xdc0>
    8c10:	mov    edx,r10d
    8c13:	mov    r11,QWORD PTR [rsp+0x10]
    8c18:	movsxd rax,DWORD PTR [rcx+rdx*4]
    8c1c:	add    rax,rcx
    8c1f:	notrack jmp rax
    8c22:	nop    WORD PTR [rax+rax*1+0x0]
    8c28:	cmp    r10d,0xa
    8c2c:	je     8cac <__ctype_b_loc@plt+0x65dc>
    8c2e:	xor    edi,edi
    8c30:	mov    edx,0x5
    8c35:	mov    DWORD PTR [rsp+0x10],r10d
    8c3a:	lea    rsi,[rip+0x4112]        # cd53 <_IO_stdin_used@@Base+0xd53>
    8c41:	mov    QWORD PTR [rsp+0x8],r11
    8c46:	call   2440 <dcgettext@plt>
    8c4b:	mov    r11,QWORD PTR [rsp+0x8]
    8c50:	mov    r10d,DWORD PTR [rsp+0x10]
    8c55:	mov    rdi,rax
    8c58:	mov    QWORD PTR [rsp+0x78],rax
    8c5d:	lea    rax,[rip+0x40ef]        # cd53 <_IO_stdin_used@@Base+0xd53>
    8c64:	cmp    rdi,rax
    8c67:	je     9cdc <__ctype_b_loc@plt+0x760c>
    8c6d:	xor    edi,edi
    8c6f:	mov    edx,0x5
    8c74:	mov    DWORD PTR [rsp+0x10],r10d
    8c79:	lea    rsi,[rip+0x40d1]        # cd51 <_IO_stdin_used@@Base+0xd51>
    8c80:	mov    QWORD PTR [rsp+0x8],r11
    8c85:	call   2440 <dcgettext@plt>
    8c8a:	mov    r11,QWORD PTR [rsp+0x8]
    8c8f:	mov    r10d,DWORD PTR [rsp+0x10]
    8c94:	mov    rdi,rax
    8c97:	mov    QWORD PTR [rsp+0x70],rax
    8c9c:	lea    rax,[rip+0x40ae]        # cd51 <_IO_stdin_used@@Base+0xd51>
    8ca3:	cmp    rdi,rax
    8ca6:	je     9cb6 <__ctype_b_loc@plt+0x75e6>
    8cac:	xor    r12d,r12d
    8caf:	test   ebx,ebx
    8cb1:	je     9ada <__ctype_b_loc@plt+0x740a>
    8cb7:	mov    rbx,QWORD PTR [rsp+0x70]
    8cbc:	mov    DWORD PTR [rsp+0x38],r10d
    8cc1:	xor    r13d,r13d
    8cc4:	mov    QWORD PTR [rsp+0x30],r11
    8cc9:	mov    rdi,rbx
    8ccc:	call   2460 <strlen@plt>
    8cd1:	mov    QWORD PTR [rsp+0x50],rbx
    8cd6:	mov    r11,QWORD PTR [rsp+0x30]
    8cdb:	mov    QWORD PTR [rsp+0x20],rax
    8ce0:	mov    r10d,DWORD PTR [rsp+0x38]
    8ce5:	mov    BYTE PTR [rsp+0x8],0x1
    8cea:	mov    BYTE PTR [rsp+0x84],0x0
    8cf2:	mov    QWORD PTR [rsp+0x58],0x0
    8cfb:	mov    BYTE PTR [rsp+0x10],0x1
    8d00:	xor    ebx,ebx
    8d02:	mov    r8d,r13d
    8d05:	nop    DWORD PTR [rax]
    8d08:	cmp    r11,rbx
    8d0b:	setne  r13b
    8d0f:	cmp    r11,0xffffffffffffffff
    8d13:	jne    8d22 <__ctype_b_loc@plt+0x6652>
    8d15:	mov    rax,QWORD PTR [rsp+0x18]
    8d1a:	cmp    BYTE PTR [rax+rbx*1],0x0
    8d1e:	setne  r13b
    8d22:	test   r13b,r13b
    8d25:	je     95a8 <__ctype_b_loc@plt+0x6ed8>
    8d2b:	cmp    r10d,0x2
    8d2f:	mov    rdi,QWORD PTR [rsp+0x18]
    8d34:	setne  al
    8d37:	and    al,BYTE PTR [rsp+0x10]
    8d3b:	lea    rbp,[rdi+rbx*1]
    8d3f:	mov    r9d,eax
    8d42:	je     9400 <__ctype_b_loc@plt+0x6d30>
    8d48:	mov    rax,QWORD PTR [rsp+0x20]
    8d4d:	test   rax,rax
    8d50:	je     9550 <__ctype_b_loc@plt+0x6e80>
    8d56:	lea    rdx,[rbx+rax*1]
    8d5a:	cmp    r11,0xffffffffffffffff
    8d5e:	jne    8d98 <__ctype_b_loc@plt+0x66c8>
    8d60:	cmp    rax,0x1
    8d64:	jbe    8d98 <__ctype_b_loc@plt+0x66c8>
    8d66:	mov    DWORD PTR [rsp+0x48],r10d
    8d6b:	mov    BYTE PTR [rsp+0x40],r8b
    8d70:	mov    BYTE PTR [rsp+0x38],r9b
    8d75:	mov    QWORD PTR [rsp+0x30],rdx
    8d7a:	call   2460 <strlen@plt>
    8d7f:	mov    r10d,DWORD PTR [rsp+0x48]
    8d84:	movzx  r8d,BYTE PTR [rsp+0x40]
    8d8a:	movzx  r9d,BYTE PTR [rsp+0x38]
    8d90:	mov    rdx,QWORD PTR [rsp+0x30]
    8d95:	mov    r11,rax
    8d98:	cmp    rdx,r11
    8d9b:	ja     9550 <__ctype_b_loc@plt+0x6e80>
    8da1:	mov    rdx,QWORD PTR [rsp+0x20]
    8da6:	mov    rsi,QWORD PTR [rsp+0x50]
    8dab:	mov    rdi,rbp
    8dae:	mov    DWORD PTR [rsp+0x48],r10d
    8db3:	mov    QWORD PTR [rsp+0x40],r11
    8db8:	mov    BYTE PTR [rsp+0x38],r8b
    8dbd:	mov    BYTE PTR [rsp+0x30],r9b
    8dc2:	call   2510 <memcmp@plt>
    8dc7:	movzx  r9d,BYTE PTR [rsp+0x30]
    8dcd:	movzx  r8d,BYTE PTR [rsp+0x38]
    8dd3:	test   eax,eax
    8dd5:	mov    r11,QWORD PTR [rsp+0x40]
    8dda:	mov    r10d,DWORD PTR [rsp+0x48]
    8ddf:	jne    9550 <__ctype_b_loc@plt+0x6e80>
    8de5:	cmp    BYTE PTR [rsp+0x63],0x0
    8dea:	jne    91ee <__ctype_b_loc@plt+0x6b1e>
    8df0:	movzx  ebp,BYTE PTR [rbp+0x0]
    8df4:	cmp    bpl,0x7e
    8df8:	ja     8f23 <__ctype_b_loc@plt+0x6853>
    8dfe:	lea    rcx,[rip+0x3fe7]        # cdec <_IO_stdin_used@@Base+0xdec>
    8e05:	movzx  edx,bpl
    8e09:	movsxd rax,DWORD PTR [rcx+rdx*4]
    8e0d:	add    rax,rcx
    8e10:	notrack jmp rax
    8e13:	nop    DWORD PTR [rax+rax*1+0x0]
    8e18:	mov    eax,r9d
    8e1b:	nop    DWORD PTR [rax+rax*1+0x0]
    8e20:	mov    r13d,r9d
    8e23:	mov    r9d,eax
    8e26:	xor    eax,eax
    8e28:	nop    DWORD PTR [rax+rax*1+0x0]
    8e30:	mov    rsi,QWORD PTR [rsp+0x28]
    8e35:	test   rsi,rsi
    8e38:	je     8e4e <__ctype_b_loc@plt+0x677e>
    8e3a:	mov    edx,ebp
    8e3c:	mov    ecx,ebp
    8e3e:	shr    dl,0x5
    8e41:	movzx  edx,dl
    8e44:	mov    edx,DWORD PTR [rsi+rdx*4]
    8e47:	shr    edx,cl
    8e49:	and    edx,0x1
    8e4c:	jne    8e57 <__ctype_b_loc@plt+0x6787>
    8e4e:	test   r9b,r9b
    8e51:	je     8f11 <__ctype_b_loc@plt+0x6841>
    8e57:	cmp    r10d,0x2
    8e5b:	sete   dl
    8e5e:	cmp    BYTE PTR [rsp+0x63],0x0
    8e63:	mov    eax,edx
    8e65:	jne    9350 <__ctype_b_loc@plt+0x6c80>
    8e6b:	mov    eax,r8d
    8e6e:	xor    eax,0x1
    8e71:	and    al,dl
    8e73:	je     8ea6 <__ctype_b_loc@plt+0x67d6>
    8e75:	cmp    r14,r12
    8e78:	jbe    8e7f <__ctype_b_loc@plt+0x67af>
    8e7a:	mov    BYTE PTR [r15+r12*1],0x27
    8e7f:	lea    rdx,[r12+0x1]
    8e84:	cmp    r14,rdx
    8e87:	jbe    8e8f <__ctype_b_loc@plt+0x67bf>
    8e89:	mov    BYTE PTR [r15+r12*1+0x1],0x24
    8e8f:	lea    rdx,[r12+0x2]
    8e94:	cmp    r14,rdx
    8e97:	jbe    8e9f <__ctype_b_loc@plt+0x67cf>
    8e99:	mov    BYTE PTR [r15+r12*1+0x2],0x27
    8e9f:	add    r12,0x3
    8ea3:	mov    r8d,eax
    8ea6:	cmp    r14,r12
    8ea9:	jbe    8eb0 <__ctype_b_loc@plt+0x67e0>
    8eab:	mov    BYTE PTR [r15+r12*1],0x5c
    8eb0:	add    r12,0x1
    8eb4:	add    rbx,0x1
    8eb8:	cmp    r12,r14
    8ebb:	jae    8ec1 <__ctype_b_loc@plt+0x67f1>
    8ebd:	mov    BYTE PTR [r15+r12*1],bpl
    8ec1:	movzx  edi,BYTE PTR [rsp+0x8]
    8ec6:	add    r12,0x1
    8eca:	mov    eax,0x0
    8ecf:	test   r13b,r13b
    8ed2:	cmove  edi,eax
    8ed5:	mov    BYTE PTR [rsp+0x8],dil
    8eda:	jmp    8d08 <__ctype_b_loc@plt+0x6638>
    8edf:	nop
    8ee0:	xor    r9d,r9d
    8ee3:	xor    eax,eax
    8ee5:	xor    r13d,r13d
    8ee8:	movzx  edx,BYTE PTR [rsp+0x10]
    8eed:	xor    edx,0x1
    8ef0:	or     al,dl
    8ef2:	je     8e30 <__ctype_b_loc@plt+0x6760>
    8ef8:	xor    eax,eax
    8efa:	cmp    BYTE PTR [rsp+0x63],0x0
    8eff:	jne    8e30 <__ctype_b_loc@plt+0x6760>
    8f05:	nop    DWORD PTR [rax]
    8f08:	test   r9b,r9b
    8f0b:	jne    8e57 <__ctype_b_loc@plt+0x6787>
    8f11:	xor    eax,0x1
    8f14:	add    rbx,0x1
    8f18:	and    eax,r8d
    8f1b:	jmp    9470 <__ctype_b_loc@plt+0x6da0>
    8f20:	xor    r9d,r9d
    8f23:	cmp    QWORD PTR [rsp+0x68],0x1
    8f29:	jne    9688 <__ctype_b_loc@plt+0x6fb8>
    8f2f:	mov    DWORD PTR [rsp+0x48],r10d
    8f34:	mov    QWORD PTR [rsp+0x40],r11
    8f39:	mov    BYTE PTR [rsp+0x38],r8b
    8f3e:	mov    BYTE PTR [rsp+0x30],r9b
    8f43:	call   26d0 <__ctype_b_loc@plt>
    8f48:	movzx  r9d,BYTE PTR [rsp+0x30]
    8f4e:	movzx  r8d,BYTE PTR [rsp+0x38]
    8f54:	mov    edi,0x1
    8f59:	mov    r13,rax
    8f5c:	movzx  eax,bpl
    8f60:	mov    r11,QWORD PTR [rsp+0x40]
    8f65:	mov    r10d,DWORD PTR [rsp+0x48]
    8f6a:	mov    rdx,QWORD PTR [r13+0x0]
    8f6e:	movzx  eax,WORD PTR [rdx+rax*2]
    8f72:	and    ax,0x4000
    8f76:	setne  r13b
    8f7a:	sete   dl
    8f7d:	and    dl,BYTE PTR [rsp+0x10]
    8f81:	test   dl,dl
    8f83:	jne    9a41 <__ctype_b_loc@plt+0x7371>
    8f89:	nop    DWORD PTR [rax+0x0]
    8f90:	cmp    r10d,0x2
    8f94:	sete   al
    8f97:	jmp    8ee8 <__ctype_b_loc@plt+0x6818>
    8f9c:	mov    BYTE PTR [rsp+0x8],0x1
    8fa1:	xor    r13d,r13d
    8fa4:	mov    BYTE PTR [rsp+0x84],0x0
    8fac:	mov    QWORD PTR [rsp+0x58],0x0
    8fb5:	mov    BYTE PTR [rsp+0x63],0x1
    8fba:	mov    BYTE PTR [rsp+0x10],0x0
    8fbf:	lea    rax,[rip+0x3d8b]        # cd51 <_IO_stdin_used@@Base+0xd51>
    8fc6:	xor    r12d,r12d
    8fc9:	mov    r10d,0x2
    8fcf:	mov    QWORD PTR [rsp+0x20],0x1
    8fd8:	mov    QWORD PTR [rsp+0x50],rax
    8fdd:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    8fe2:	test   ebx,ebx
    8fe4:	jne    9c33 <__ctype_b_loc@plt+0x7563>
    8fea:	test   r14,r14
    8fed:	je     9a75 <__ctype_b_loc@plt+0x73a5>
    8ff3:	mov    BYTE PTR [r15],0x22
    8ff7:	xor    r13d,r13d
    8ffa:	mov    BYTE PTR [rsp+0x8],0x1
    8fff:	mov    BYTE PTR [rsp+0x84],0x0
    9007:	mov    QWORD PTR [rsp+0x58],0x0
    9010:	lea    rax,[rip+0x3d29]        # cd40 <_IO_stdin_used@@Base+0xd40>
    9017:	mov    BYTE PTR [rsp+0x63],0x0
    901c:	mov    r12d,0x1
    9022:	mov    BYTE PTR [rsp+0x10],0x1
    9027:	mov    QWORD PTR [rsp+0x20],0x1
    9030:	mov    QWORD PTR [rsp+0x50],rax
    9035:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    903a:	test   ebx,ebx
    903c:	jne    8f9c <__ctype_b_loc@plt+0x68cc>
    9042:	mov    BYTE PTR [rsp+0x10],0x1
    9047:	test   r14,r14
    904a:	jne    9d71 <__ctype_b_loc@plt+0x76a1>
    9050:	mov    QWORD PTR [rsp+0x58],0x0
    9059:	xor    r13d,r13d
    905c:	mov    BYTE PTR [rsp+0x8],0x1
    9061:	mov    BYTE PTR [rsp+0x84],0x0
    9069:	lea    rax,[rip+0x3ce1]        # cd51 <_IO_stdin_used@@Base+0xd51>
    9070:	mov    BYTE PTR [rsp+0x63],0x0
    9075:	mov    r12d,0x1
    907b:	mov    r10d,0x2
    9081:	mov    QWORD PTR [rsp+0x20],0x1
    908a:	mov    QWORD PTR [rsp+0x50],rax
    908f:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    9094:	lea    rax,[rip+0x3ca5]        # cd40 <_IO_stdin_used@@Base+0xd40>
    909b:	xor    r13d,r13d
    909e:	xor    r12d,r12d
    90a1:	mov    BYTE PTR [rsp+0x8],0x1
    90a6:	mov    BYTE PTR [rsp+0x84],0x0
    90ae:	mov    r10d,0x5
    90b4:	mov    QWORD PTR [rsp+0x58],0x0
    90bd:	mov    BYTE PTR [rsp+0x63],0x1
    90c2:	mov    BYTE PTR [rsp+0x10],0x1
    90c7:	mov    QWORD PTR [rsp+0x20],0x1
    90d0:	mov    QWORD PTR [rsp+0x50],rax
    90d5:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    90da:	mov    BYTE PTR [rsp+0x8],0x1
    90df:	xor    r13d,r13d
    90e2:	xor    r12d,r12d
    90e5:	mov    BYTE PTR [rsp+0x84],0x0
    90ed:	mov    QWORD PTR [rsp+0x58],0x0
    90f6:	mov    BYTE PTR [rsp+0x63],0x0
    90fb:	mov    BYTE PTR [rsp+0x10],0x1
    9100:	mov    QWORD PTR [rsp+0x20],0x0
    9109:	mov    QWORD PTR [rsp+0x50],0x0
    9112:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    9117:	mov    BYTE PTR [rsp+0x8],0x1
    911c:	xor    r13d,r13d
    911f:	xor    r12d,r12d
    9122:	mov    BYTE PTR [rsp+0x84],0x0
    912a:	mov    QWORD PTR [rsp+0x58],0x0
    9133:	mov    BYTE PTR [rsp+0x63],0x0
    9138:	mov    BYTE PTR [rsp+0x10],0x0
    913d:	mov    QWORD PTR [rsp+0x20],0x0
    9146:	mov    QWORD PTR [rsp+0x50],0x0
    914f:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    9154:	mov    BYTE PTR [rsp+0x8],0x1
    9159:	xor    r13d,r13d
    915c:	mov    BYTE PTR [rsp+0x84],0x0
    9164:	mov    QWORD PTR [rsp+0x58],0x0
    916d:	mov    BYTE PTR [rsp+0x63],0x1
    9172:	mov    BYTE PTR [rsp+0x10],0x1
    9177:	jmp    8fbf <__ctype_b_loc@plt+0x68ef>
    917c:	test   ebx,ebx
    917e:	jne    9d8e <__ctype_b_loc@plt+0x76be>
    9184:	mov    BYTE PTR [rsp+0x10],0x0
    9189:	jmp    9047 <__ctype_b_loc@plt+0x6977>
    918e:	xchg   ax,ax
    9190:	xor    r9d,r9d
    9193:	cmp    r11,0x1
    9197:	setne  dl
    919a:	cmp    r11,0xffffffffffffffff
    919e:	jne    91ac <__ctype_b_loc@plt+0x6adc>
    91a0:	mov    rax,QWORD PTR [rsp+0x18]
    91a5:	cmp    BYTE PTR [rax+0x1],0x0
    91a9:	setne  dl
    91ac:	cmp    r10d,0x2
    91b0:	sete   al
    91b3:	test   dl,dl
    91b5:	jne    8ee5 <__ctype_b_loc@plt+0x6815>
    91bb:	test   rbx,rbx
    91be:	jne    8ee5 <__ctype_b_loc@plt+0x6815>
    91c4:	cmp    BYTE PTR [rsp+0x63],0x0
    91c9:	je     8ee8 <__ctype_b_loc@plt+0x6818>
    91cf:	test   al,al
    91d1:	je     8ee8 <__ctype_b_loc@plt+0x6818>
    91d7:	mov    r10d,0x2
    91dd:	nop    DWORD PTR [rax]
    91e0:	cmp    BYTE PTR [rsp+0x10],0x0
    91e5:	mov    eax,0x4
    91ea:	cmovne r10d,eax
    91ee:	sub    rsp,0x8
    91f2:	mov    r8d,r10d
    91f5:	mov    rcx,r11
    91f8:	push   QWORD PTR [rsp+0x78]
    91fc:	mov    rsi,r14
    91ff:	mov    rdi,r15
    9202:	push   QWORD PTR [rsp+0x88]
    9209:	push   0x0
    920b:	mov    r9d,DWORD PTR [rsp+0x84]
    9213:	mov    rdx,QWORD PTR [rsp+0x38]
    9218:	and    r9d,0xfffffffd
    921c:	call   8b80 <__ctype_b_loc@plt+0x64b0>
    9221:	add    rsp,0x20
    9225:	mov    r12,rax
    9228:	mov    rax,QWORD PTR [rsp+0xa8]
    9230:	xor    rax,QWORD PTR fs:0x28
    9239:	jne    9d6c <__ctype_b_loc@plt+0x769c>
    923f:	add    rsp,0xb8
    9246:	mov    rax,r12
    9249:	pop    rbx
    924a:	pop    rbp
    924b:	pop    r12
    924d:	pop    r13
    924f:	pop    r14
    9251:	pop    r15
    9253:	ret    
    9254:	xor    r9d,r9d
    9257:	cmp    r10d,0x2
    925b:	je     9668 <__ctype_b_loc@plt+0x6f98>
    9261:	cmp    r10d,0x5
    9265:	jne    9290 <__ctype_b_loc@plt+0x6bc0>
    9267:	test   BYTE PTR [rsp+0x64],0x4
    926c:	je     9290 <__ctype_b_loc@plt+0x6bc0>
    926e:	lea    rax,[rbx+0x2]
    9272:	cmp    rax,r11
    9275:	jae    9290 <__ctype_b_loc@plt+0x6bc0>
    9277:	mov    rdi,QWORD PTR [rsp+0x18]
    927c:	cmp    BYTE PTR [rdi+rbx*1+0x1],0x3f
    9281:	je     9b4d <__ctype_b_loc@plt+0x747d>
    9287:	nop    WORD PTR [rax+rax*1+0x0]
    9290:	xor    eax,eax
    9292:	xor    r13d,r13d
    9295:	mov    ebp,0x3f
    929a:	jmp    8ee8 <__ctype_b_loc@plt+0x6818>
    929f:	xor    r9d,r9d
    92a2:	cmp    r10d,0x2
    92a6:	je     9620 <__ctype_b_loc@plt+0x6f50>
    92ac:	mov    BYTE PTR [rsp+0x84],r13b
    92b4:	xor    eax,eax
    92b6:	mov    ebp,0x27
    92bb:	jmp    8ee8 <__ctype_b_loc@plt+0x6818>
    92c0:	xor    r9d,r9d
    92c3:	nop    DWORD PTR [rax+rax*1+0x0]
    92c8:	movzx  ecx,BYTE PTR [rsp+0x63]
    92cd:	test   BYTE PTR [rsp+0x10],cl
    92d1:	je     92df <__ctype_b_loc@plt+0x6c0f>
    92d3:	cmp    QWORD PTR [rsp+0x20],0x0
    92d9:	jne    9458 <__ctype_b_loc@plt+0x6d88>
    92df:	mov    ebp,0x5c
    92e4:	mov    edx,0x5c
    92e9:	nop    DWORD PTR [rax+0x0]
    92f0:	cmp    BYTE PTR [rsp+0x10],0x0
    92f5:	jne    9d87 <__ctype_b_loc@plt+0x76b7>
    92fb:	xor    r13d,r13d
    92fe:	xor    eax,eax
    9300:	cmp    BYTE PTR [rsp+0x63],0x0
    9305:	jne    8e30 <__ctype_b_loc@plt+0x6760>
    930b:	jmp    8f08 <__ctype_b_loc@plt+0x6838>
    9310:	mov    ebp,0x61
    9315:	cmp    r10d,0x2
    9319:	sete   al
    931c:	cmp    BYTE PTR [rsp+0x63],0x0
    9321:	jne    9350 <__ctype_b_loc@plt+0x6c80>
    9323:	xor    r13d,r13d
    9326:	jmp    8ea6 <__ctype_b_loc@plt+0x67d6>
    932b:	mov    ebp,0x72
    9330:	xor    r13d,r13d
    9333:	cmp    r10d,0x2
    9337:	sete   dl
    933a:	cmp    BYTE PTR [rsp+0x63],0x0
    933f:	mov    eax,edx
    9341:	je     8e6b <__ctype_b_loc@plt+0x679b>
    9347:	nop    WORD PTR [rax+rax*1+0x0]
    9350:	and    BYTE PTR [rsp+0x10],al
    9354:	jmp    91e0 <__ctype_b_loc@plt+0x6b10>
    9359:	mov    ebp,0x66
    935e:	jmp    9315 <__ctype_b_loc@plt+0x6c45>
    9360:	mov    ebp,0x6e
    9365:	jmp    9330 <__ctype_b_loc@plt+0x6c60>
    9367:	mov    ebp,0x62
    936c:	jmp    9315 <__ctype_b_loc@plt+0x6c45>
    936e:	cmp    BYTE PTR [rsp+0x63],0x0
    9373:	jne    9d02 <__ctype_b_loc@plt+0x7632>
    9379:	xor    r9d,r9d
    937c:	cmp    r10d,0x2
    9380:	mov    eax,r8d
    9383:	sete   dl
    9386:	xor    eax,0x1
    9389:	and    al,dl
    938b:	je     99a0 <__ctype_b_loc@plt+0x72d0>
    9391:	cmp    r14,r12
    9394:	jbe    939b <__ctype_b_loc@plt+0x6ccb>
    9396:	mov    BYTE PTR [r15+r12*1],0x27
    939b:	lea    rcx,[r12+0x1]
    93a0:	cmp    r14,rcx
    93a3:	jbe    93ab <__ctype_b_loc@plt+0x6cdb>
    93a5:	mov    BYTE PTR [r15+r12*1+0x1],0x24
    93ab:	lea    rcx,[r12+0x2]
    93b0:	cmp    r14,rcx
    93b3:	jbe    93bb <__ctype_b_loc@plt+0x6ceb>
    93b5:	mov    BYTE PTR [r15+r12*1+0x2],0x27
    93bb:	lea    rcx,[r12+0x3]
    93c0:	cmp    r14,rcx
    93c3:	ja     99ab <__ctype_b_loc@plt+0x72db>
    93c9:	add    r12,0x4
    93cd:	mov    r8d,eax
    93d0:	xor    r13d,r13d
    93d3:	mov    ebp,0x30
    93d8:	jmp    8e4e <__ctype_b_loc@plt+0x677e>
    93dd:	xor    r9d,r9d
    93e0:	mov    ebp,0x9
    93e5:	mov    edx,0x74
    93ea:	jmp    92f0 <__ctype_b_loc@plt+0x6c20>
    93ef:	mov    ebp,0x76
    93f4:	jmp    9330 <__ctype_b_loc@plt+0x6c60>
    93f9:	nop    DWORD PTR [rax+0x0]
    9400:	movzx  ebp,BYTE PTR [rbp+0x0]
    9404:	cmp    bpl,0x7e
    9408:	ja     8f23 <__ctype_b_loc@plt+0x6853>
    940e:	lea    rcx,[rip+0x3bd3]        # cfe8 <_IO_stdin_used@@Base+0xfe8>
    9415:	movzx  edx,bpl
    9419:	movsxd rax,DWORD PTR [rcx+rdx*4]
    941d:	add    rax,rcx
    9420:	notrack jmp rax
    9423:	nop    DWORD PTR [rax+rax*1+0x0]
    9428:	cmp    r10d,0x2
    942c:	sete   al
    942f:	xor    r13d,r13d
    9432:	jmp    91c4 <__ctype_b_loc@plt+0x6af4>
    9437:	cmp    r10d,0x2
    943b:	sete   al
    943e:	jmp    91bb <__ctype_b_loc@plt+0x6aeb>
    9443:	cmp    r10d,0x2
    9447:	jne    92c8 <__ctype_b_loc@plt+0x6bf8>
    944d:	cmp    BYTE PTR [rsp+0x63],0x0
    9452:	jne    91e0 <__ctype_b_loc@plt+0x6b10>
    9458:	add    rbx,0x1
    945c:	mov    eax,r8d
    945f:	xor    r13d,r13d
    9462:	mov    ebp,0x5c
    9467:	nop    WORD PTR [rax+rax*1+0x0]
    9470:	test   al,al
    9472:	je     8eb8 <__ctype_b_loc@plt+0x67e8>
    9478:	cmp    r14,r12
    947b:	jbe    9482 <__ctype_b_loc@plt+0x6db2>
    947d:	mov    BYTE PTR [r15+r12*1],0x27
    9482:	lea    rax,[r12+0x1]
    9487:	cmp    r14,rax
    948a:	jbe    9492 <__ctype_b_loc@plt+0x6dc2>
    948c:	mov    BYTE PTR [r15+r12*1+0x1],0x27
    9492:	add    r12,0x2
    9496:	xor    r8d,r8d
    9499:	jmp    8eb8 <__ctype_b_loc@plt+0x67e8>
    949e:	cmp    r10d,0x2
    94a2:	mov    ebp,0x20
    94a7:	sete   al
    94aa:	jmp    91c4 <__ctype_b_loc@plt+0x6af4>
    94af:	mov    ebp,0xc
    94b4:	mov    edx,0x66
    94b9:	jmp    92f0 <__ctype_b_loc@plt+0x6c20>
    94be:	mov    ebp,0x9
    94c3:	mov    edx,0x74
    94c8:	cmp    r10d,0x2
    94cc:	sete   al
    94cf:	and    al,BYTE PTR [rsp+0x63]
    94d3:	mov    r9d,eax
    94d6:	je     92f0 <__ctype_b_loc@plt+0x6c20>
    94dc:	jmp    91d7 <__ctype_b_loc@plt+0x6b07>
    94e1:	mov    ebp,0x8
    94e6:	mov    edx,0x62
    94eb:	jmp    92f0 <__ctype_b_loc@plt+0x6c20>
    94f0:	cmp    BYTE PTR [rsp+0x10],0x0
    94f5:	jne    936e <__ctype_b_loc@plt+0x6c9e>
    94fb:	xor    r9d,r9d
    94fe:	xor    ebp,ebp
    9500:	test   BYTE PTR [rsp+0x64],0x1
    9505:	je     92fb <__ctype_b_loc@plt+0x6c2b>
    950b:	add    rbx,0x1
    950f:	jmp    8d08 <__ctype_b_loc@plt+0x6638>
    9514:	mov    ebp,0xd
    9519:	mov    edx,0x72
    951e:	jmp    94c8 <__ctype_b_loc@plt+0x6df8>
    9520:	mov    ebp,0xb
    9525:	mov    edx,0x76
    952a:	jmp    92f0 <__ctype_b_loc@plt+0x6c20>
    952f:	mov    ebp,0xa
    9534:	mov    edx,0x6e
    9539:	jmp    94c8 <__ctype_b_loc@plt+0x6df8>
    953b:	mov    ebp,0x7
    9540:	mov    edx,0x61
    9545:	jmp    92f0 <__ctype_b_loc@plt+0x6c20>
    954a:	nop    WORD PTR [rax+rax*1+0x0]
    9550:	movzx  ebp,BYTE PTR [rbp+0x0]
    9554:	cmp    bpl,0x7e
    9558:	ja     8f20 <__ctype_b_loc@plt+0x6850>
    955e:	lea    rcx,[rip+0x3c7f]        # d1e4 <_IO_stdin_used@@Base+0x11e4>
    9565:	movzx  edx,bpl
    9569:	movsxd rax,DWORD PTR [rcx+rdx*4]
    956d:	add    rax,rcx
    9570:	notrack jmp rax
    9573:	nop    DWORD PTR [rax+rax*1+0x0]
    9578:	xor    eax,eax
    957a:	jmp    8e20 <__ctype_b_loc@plt+0x6750>
    957f:	xor    eax,eax
    9581:	test   rbx,rbx
    9584:	jne    9990 <__ctype_b_loc@plt+0x72c0>
    958a:	mov    r13d,r9d
    958d:	mov    r9d,eax
    9590:	xor    eax,eax
    9592:	jmp    8ee8 <__ctype_b_loc@plt+0x6818>
    9597:	xor    eax,eax
    9599:	mov    ebp,0x20
    959e:	jmp    8e20 <__ctype_b_loc@plt+0x6750>
    95a3:	nop    DWORD PTR [rax+rax*1+0x0]
    95a8:	cmp    r10d,0x2
    95ac:	mov    r13d,r8d
    95af:	sete   dl
    95b2:	test   r12,r12
    95b5:	jne    95c1 <__ctype_b_loc@plt+0x6ef1>
    95b7:	test   BYTE PTR [rsp+0x63],dl
    95bb:	jne    91d7 <__ctype_b_loc@plt+0x6b07>
    95c1:	movzx  eax,BYTE PTR [rsp+0x63]
    95c6:	xor    eax,0x1
    95c9:	and    dl,al
    95cb:	je     9c73 <__ctype_b_loc@plt+0x75a3>
    95d1:	cmp    BYTE PTR [rsp+0x84],0x0
    95d9:	je     9c75 <__ctype_b_loc@plt+0x75a5>
    95df:	cmp    BYTE PTR [rsp+0x8],0x0
    95e4:	jne    9d1d <__ctype_b_loc@plt+0x764d>
    95ea:	test   r14,r14
    95ed:	sete   al
    95f0:	cmp    QWORD PTR [rsp+0x58],0x0
    95f6:	setne  dl
    95f9:	and    al,dl
    95fb:	je     9d10 <__ctype_b_loc@plt+0x7640>
    9601:	mov    rdx,QWORD PTR [rsp+0x58]
    9606:	mov    r14,QWORD PTR [rsp+0x58]
    960b:	mov    BYTE PTR [r15],0x27
    960f:	mov    BYTE PTR [rsp+0x84],al
    9616:	mov    QWORD PTR [rsp+0x58],rdx
    961b:	jmp    9069 <__ctype_b_loc@plt+0x6999>
    9620:	cmp    BYTE PTR [rsp+0x63],0x0
    9625:	jne    91e0 <__ctype_b_loc@plt+0x6b10>
    962b:	test   r14,r14
    962e:	je     9a06 <__ctype_b_loc@plt+0x7336>
    9634:	xor    edx,edx
    9636:	cmp    QWORD PTR [rsp+0x58],0x0
    963c:	jne    9a06 <__ctype_b_loc@plt+0x7336>
    9642:	mov    QWORD PTR [rsp+0x58],r14
    9647:	add    r12,0x3
    964b:	xor    eax,eax
    964d:	xor    r8d,r8d
    9650:	mov    BYTE PTR [rsp+0x84],r13b
    9658:	mov    r14,rdx
    965b:	mov    ebp,0x27
    9660:	jmp    8e4e <__ctype_b_loc@plt+0x677e>
    9665:	nop    DWORD PTR [rax]
    9668:	cmp    BYTE PTR [rsp+0x63],0x0
    966d:	jne    91e0 <__ctype_b_loc@plt+0x6b10>
    9673:	xor    r13d,r13d
    9676:	xor    eax,eax
    9678:	mov    ebp,0x3f
    967d:	jmp    8e4e <__ctype_b_loc@plt+0x677e>
    9682:	nop    WORD PTR [rax+rax*1+0x0]
    9688:	lea    rax,[rsp+0xa0]
    9690:	mov    QWORD PTR [rsp+0xa0],0x0
    969c:	mov    QWORD PTR [rsp+0x38],rax
    96a1:	cmp    r11,0xffffffffffffffff
    96a5:	jne    96d4 <__ctype_b_loc@plt+0x7004>
    96a7:	mov    rdi,QWORD PTR [rsp+0x18]
    96ac:	mov    DWORD PTR [rsp+0x48],r10d
    96b1:	mov    BYTE PTR [rsp+0x40],r8b
    96b6:	mov    BYTE PTR [rsp+0x30],r9b
    96bb:	call   2460 <strlen@plt>
    96c0:	mov    r10d,DWORD PTR [rsp+0x48]
    96c5:	movzx  r8d,BYTE PTR [rsp+0x40]
    96cb:	movzx  r9d,BYTE PTR [rsp+0x30]
    96d1:	mov    r11,rax
    96d4:	lea    rax,[rsp+0x9c]
    96dc:	mov    BYTE PTR [rsp+0x30],r13b
    96e1:	xor    edi,edi
    96e3:	mov    QWORD PTR [rsp+0x48],rax
    96e8:	mov    BYTE PTR [rsp+0x85],r8b
    96f0:	mov    BYTE PTR [rsp+0x87],r9b
    96f8:	mov    DWORD PTR [rsp+0x80],r10d
    9700:	mov    QWORD PTR [rsp+0x88],r12
    9708:	mov    r12,QWORD PTR [rsp+0x38]
    970d:	mov    QWORD PTR [rsp+0x40],rbx
    9712:	mov    rbx,r11
    9715:	mov    BYTE PTR [rsp+0x86],bpl
    971d:	mov    rbp,rdi
    9720:	mov    rax,QWORD PTR [rsp+0x40]
    9725:	mov    rdi,QWORD PTR [rsp+0x48]
    972a:	mov    rdx,rbx
    972d:	mov    rcx,r12
    9730:	lea    r13,[rax+rbp*1]
    9734:	mov    rax,QWORD PTR [rsp+0x18]
    9739:	sub    rdx,r13
    973c:	lea    rsi,[rax+r13*1]
    9740:	call   b380 <__ctype_b_loc@plt+0x8cb0>
    9745:	mov    rdx,rax
    9748:	test   rax,rax
    974b:	je     97b3 <__ctype_b_loc@plt+0x70e3>
    974d:	cmp    rax,0xffffffffffffffff
    9751:	je     9b0b <__ctype_b_loc@plt+0x743b>
    9757:	cmp    rax,0xfffffffffffffffe
    975b:	je     9bc7 <__ctype_b_loc@plt+0x74f7>
    9761:	cmp    DWORD PTR [rsp+0x80],0x2
    9769:	jne    9776 <__ctype_b_loc@plt+0x70a6>
    976b:	cmp    BYTE PTR [rsp+0x63],0x0
    9770:	jne    9930 <__ctype_b_loc@plt+0x7260>
    9776:	mov    edi,DWORD PTR [rsp+0x9c]
    977d:	mov    QWORD PTR [rsp+0x38],rdx
    9782:	call   26b0 <iswprint@plt>
    9787:	movzx  edi,BYTE PTR [rsp+0x30]
    978c:	mov    rdx,QWORD PTR [rsp+0x38]
    9791:	test   eax,eax
    9793:	mov    eax,0x0
    9798:	cmove  edi,eax
    979b:	add    rbp,rdx
    979e:	mov    BYTE PTR [rsp+0x30],dil
    97a3:	mov    rdi,r12
    97a6:	call   26a0 <mbsinit@plt>
    97ab:	test   eax,eax
    97ad:	je     9720 <__ctype_b_loc@plt+0x7050>
    97b3:	movzx  r13d,BYTE PTR [rsp+0x30]
    97b9:	mov    rdi,rbp
    97bc:	mov    r11,rbx
    97bf:	movzx  r8d,BYTE PTR [rsp+0x85]
    97c8:	movzx  ebp,BYTE PTR [rsp+0x86]
    97d0:	mov    r12,QWORD PTR [rsp+0x88]
    97d8:	mov    edx,r13d
    97db:	mov    rbx,QWORD PTR [rsp+0x40]
    97e0:	movzx  r9d,BYTE PTR [rsp+0x87]
    97e9:	mov    r10d,DWORD PTR [rsp+0x80]
    97f1:	xor    edx,0x1
    97f4:	and    dl,BYTE PTR [rsp+0x10]
    97f8:	cmp    rdi,0x1
    97fc:	jbe    8f81 <__ctype_b_loc@plt+0x68b1>
    9802:	mov    rcx,rdi
    9805:	mov    BYTE PTR [rsp+0x30],r13b
    980a:	mov    rdi,QWORD PTR [rsp+0x18]
    980f:	xor    esi,esi
    9811:	movzx  r13d,BYTE PTR [rsp+0x63]
    9817:	add    rcx,rbx
    981a:	jmp    98d1 <__ctype_b_loc@plt+0x7201>
    981f:	nop
    9820:	cmp    r10d,0x2
    9824:	sete   al
    9827:	test   r13b,r13b
    982a:	jne    9a59 <__ctype_b_loc@plt+0x7389>
    9830:	mov    esi,r8d
    9833:	xor    esi,0x1
    9836:	and    al,sil
    9839:	je     986c <__ctype_b_loc@plt+0x719c>
    983b:	cmp    r14,r12
    983e:	jbe    9845 <__ctype_b_loc@plt+0x7175>
    9840:	mov    BYTE PTR [r15+r12*1],0x27
    9845:	lea    rsi,[r12+0x1]
    984a:	cmp    r14,rsi
    984d:	jbe    9855 <__ctype_b_loc@plt+0x7185>
    984f:	mov    BYTE PTR [r15+r12*1+0x1],0x24
    9855:	lea    rsi,[r12+0x2]
    985a:	cmp    r14,rsi
    985d:	jbe    9865 <__ctype_b_loc@plt+0x7195>
    985f:	mov    BYTE PTR [r15+r12*1+0x2],0x27
    9865:	add    r12,0x3
    9869:	mov    r8d,eax
    986c:	cmp    r14,r12
    986f:	jbe    9876 <__ctype_b_loc@plt+0x71a6>
    9871:	mov    BYTE PTR [r15+r12*1],0x5c
    9876:	lea    rax,[r12+0x1]
    987b:	cmp    r14,rax
    987e:	jbe    988d <__ctype_b_loc@plt+0x71bd>
    9880:	mov    eax,ebp
    9882:	shr    al,0x6
    9885:	add    eax,0x30
    9888:	mov    BYTE PTR [r15+r12*1+0x1],al
    988d:	lea    rax,[r12+0x2]
    9892:	cmp    r14,rax
    9895:	jbe    98a7 <__ctype_b_loc@plt+0x71d7>
    9897:	mov    eax,ebp
    9899:	shr    al,0x3
    989c:	and    eax,0x7
    989f:	add    eax,0x30
    98a2:	mov    BYTE PTR [r15+r12*1+0x2],al
    98a7:	and    ebp,0x7
    98aa:	add    rbx,0x1
    98ae:	add    r12,0x3
    98b2:	add    ebp,0x30
    98b5:	cmp    rbx,rcx
    98b8:	jae    9a62 <__ctype_b_loc@plt+0x7392>
    98be:	mov    esi,edx
    98c0:	cmp    r14,r12
    98c3:	jbe    98c9 <__ctype_b_loc@plt+0x71f9>
    98c5:	mov    BYTE PTR [r15+r12*1],bpl
    98c9:	movzx  ebp,BYTE PTR [rdi+rbx*1]
    98cd:	add    r12,0x1
    98d1:	test   dl,dl
    98d3:	jne    9820 <__ctype_b_loc@plt+0x7150>
    98d9:	mov    eax,esi
    98db:	xor    eax,0x1
    98de:	and    eax,r8d
    98e1:	test   r9b,r9b
    98e4:	je     98f4 <__ctype_b_loc@plt+0x7224>
    98e6:	cmp    r14,r12
    98e9:	jbe    98f0 <__ctype_b_loc@plt+0x7220>
    98eb:	mov    BYTE PTR [r15+r12*1],0x5c
    98f0:	add    r12,0x1
    98f4:	add    rbx,0x1
    98f8:	cmp    rbx,rcx
    98fb:	jae    9a4e <__ctype_b_loc@plt+0x737e>
    9901:	test   al,al
    9903:	je     9a6d <__ctype_b_loc@plt+0x739d>
    9909:	cmp    r14,r12
    990c:	jbe    9913 <__ctype_b_loc@plt+0x7243>
    990e:	mov    BYTE PTR [r15+r12*1],0x27
    9913:	lea    rax,[r12+0x1]
    9918:	cmp    r14,rax
    991b:	jbe    9923 <__ctype_b_loc@plt+0x7253>
    991d:	mov    BYTE PTR [r15+r12*1+0x1],0x27
    9923:	add    r12,0x2
    9927:	xor    r9d,r9d
    992a:	xor    r8d,r8d
    992d:	jmp    98c0 <__ctype_b_loc@plt+0x71f0>
    992f:	nop
    9930:	cmp    rax,0x1
    9934:	je     9776 <__ctype_b_loc@plt+0x70a6>
    993a:	mov    rax,QWORD PTR [rsp+0x18]
    993f:	lea    rsi,[rax+r13*1+0x1]
    9944:	add    rax,rdx
    9947:	lea    r8,[rax+r13*1]
    994b:	jmp    995a <__ctype_b_loc@plt+0x728a>
    994d:	add    rsi,0x1
    9951:	cmp    r8,rsi
    9954:	je     9776 <__ctype_b_loc@plt+0x70a6>
    995a:	movzx  eax,BYTE PTR [rsi]
    995d:	lea    ecx,[rax-0x5b]
    9960:	cmp    cl,0x21
    9963:	ja     994d <__ctype_b_loc@plt+0x727d>
    9965:	mov    eax,0x1
    996a:	shl    rax,cl
    996d:	movabs rcx,0x20000002b
    9977:	test   rax,rcx
    997a:	je     994d <__ctype_b_loc@plt+0x727d>
    997c:	mov    r11,rbx
    997f:	mov    r10d,0x2
    9985:	jmp    91e0 <__ctype_b_loc@plt+0x6b10>
    998a:	nop    WORD PTR [rax+rax*1+0x0]
    9990:	mov    r9d,eax
    9993:	xor    r13d,r13d
    9996:	xor    eax,eax
    9998:	jmp    8e30 <__ctype_b_loc@plt+0x6760>
    999d:	nop    DWORD PTR [rax]
    99a0:	mov    rcx,r12
    99a3:	cmp    r14,r12
    99a6:	jbe    99b3 <__ctype_b_loc@plt+0x72e3>
    99a8:	mov    eax,r8d
    99ab:	mov    BYTE PTR [r15+rcx*1],0x5c
    99b0:	mov    r8d,eax
    99b3:	lea    r12,[rcx+0x1]
    99b7:	cmp    r10d,0x2
    99bb:	je     9a93 <__ctype_b_loc@plt+0x73c3>
    99c1:	lea    rax,[rbx+0x1]
    99c5:	mov    ebp,0x30
    99ca:	cmp    rax,r11
    99cd:	jae    99e8 <__ctype_b_loc@plt+0x7318>
    99cf:	mov    rax,QWORD PTR [rsp+0x18]
    99d4:	movzx  eax,BYTE PTR [rax+rbx*1+0x1]
    99d9:	mov    BYTE PTR [rsp+0x30],al
    99dd:	sub    eax,0x30
    99e0:	cmp    al,0x9
    99e2:	jbe    9aa3 <__ctype_b_loc@plt+0x73d3>
    99e8:	movzx  eax,BYTE PTR [rsp+0x10]
    99ed:	xor    eax,0x1
    99f0:	or     al,dl
    99f2:	mov    eax,r13d
    99f5:	mov    r13d,0x0
    99fb:	je     8e30 <__ctype_b_loc@plt+0x6760>
    9a01:	jmp    8e4e <__ctype_b_loc@plt+0x677e>
    9a06:	cmp    r14,r12
    9a09:	jbe    9a10 <__ctype_b_loc@plt+0x7340>
    9a0b:	mov    BYTE PTR [r15+r12*1],0x27
    9a10:	lea    rax,[r12+0x1]
    9a15:	cmp    r14,rax
    9a18:	jbe    9a20 <__ctype_b_loc@plt+0x7350>
    9a1a:	mov    BYTE PTR [r15+r12*1+0x1],0x5c
    9a20:	lea    rax,[r12+0x2]
    9a25:	cmp    r14,rax
    9a28:	jbe    9d5f <__ctype_b_loc@plt+0x768f>
    9a2e:	mov    rdx,r14
    9a31:	mov    BYTE PTR [r15+r12*1+0x2],0x27
    9a37:	mov    r14,QWORD PTR [rsp+0x58]
    9a3c:	jmp    9642 <__ctype_b_loc@plt+0x6f72>
    9a41:	movzx  edx,BYTE PTR [rsp+0x10]
    9a46:	xor    r13d,r13d
    9a49:	jmp    9802 <__ctype_b_loc@plt+0x7132>
    9a4e:	movzx  r13d,BYTE PTR [rsp+0x30]
    9a54:	jmp    9470 <__ctype_b_loc@plt+0x6da0>
    9a59:	mov    BYTE PTR [rsp+0x10],al
    9a5d:	jmp    91e0 <__ctype_b_loc@plt+0x6b10>
    9a62:	movzx  r13d,BYTE PTR [rsp+0x30]
    9a68:	jmp    8eb8 <__ctype_b_loc@plt+0x67e8>
    9a6d:	xor    r9d,r9d
    9a70:	jmp    98c0 <__ctype_b_loc@plt+0x71f0>
    9a75:	mov    QWORD PTR [rsp+0x58],0x0
    9a7e:	xor    r13d,r13d
    9a81:	mov    BYTE PTR [rsp+0x8],0x1
    9a86:	mov    BYTE PTR [rsp+0x84],0x0
    9a8e:	jmp    9010 <__ctype_b_loc@plt+0x6940>
    9a93:	mov    eax,r13d
    9a96:	mov    ebp,0x30
    9a9b:	xor    r13d,r13d
    9a9e:	jmp    8e4e <__ctype_b_loc@plt+0x677e>
    9aa3:	cmp    r14,r12
    9aa6:	jbe    9aad <__ctype_b_loc@plt+0x73dd>
    9aa8:	mov    BYTE PTR [r15+r12*1],0x30
    9aad:	lea    rax,[rcx+0x2]
    9ab1:	cmp    r14,rax
    9ab4:	jbe    9abc <__ctype_b_loc@plt+0x73ec>
    9ab6:	mov    BYTE PTR [r15+rcx*1+0x2],0x30
    9abc:	lea    r12,[rcx+0x3]
    9ac0:	mov    ebp,0x30
    9ac5:	jmp    99e8 <__ctype_b_loc@plt+0x7318>
    9aca:	mov    eax,r9d
    9acd:	jmp    9581 <__ctype_b_loc@plt+0x6eb1>
    9ad2:	mov    eax,r9d
    9ad5:	jmp    9599 <__ctype_b_loc@plt+0x6ec9>
    9ada:	mov    rdx,QWORD PTR [rsp+0x78]
    9adf:	movzx  eax,BYTE PTR [rdx]
    9ae2:	test   al,al
    9ae4:	je     8cb7 <__ctype_b_loc@plt+0x65e7>
    9aea:	nop    WORD PTR [rax+rax*1+0x0]
    9af0:	cmp    r14,r12
    9af3:	jbe    9af9 <__ctype_b_loc@plt+0x7429>
    9af5:	mov    BYTE PTR [r15+r12*1],al
    9af9:	add    r12,0x1
    9afd:	movzx  eax,BYTE PTR [rdx+r12*1]
    9b02:	test   al,al
    9b04:	jne    9af0 <__ctype_b_loc@plt+0x7420>
    9b06:	jmp    8cb7 <__ctype_b_loc@plt+0x65e7>
    9b0b:	mov    rdi,rbp
    9b0e:	mov    r11,rbx
    9b11:	movzx  edx,BYTE PTR [rsp+0x10]
    9b16:	mov    rbx,QWORD PTR [rsp+0x40]
    9b1b:	movzx  r8d,BYTE PTR [rsp+0x85]
    9b24:	movzx  ebp,BYTE PTR [rsp+0x86]
    9b2c:	xor    r13d,r13d
    9b2f:	mov    r12,QWORD PTR [rsp+0x88]
    9b37:	mov    r10d,DWORD PTR [rsp+0x80]
    9b3f:	movzx  r9d,BYTE PTR [rsp+0x87]
    9b48:	jmp    97f8 <__ctype_b_loc@plt+0x7128>
    9b4d:	movzx  ebp,BYTE PTR [rdi+rax*1]
    9b51:	lea    edx,[rbp-0x21]
    9b54:	cmp    dl,0x1d
    9b57:	ja     9290 <__ctype_b_loc@plt+0x6bc0>
    9b5d:	lea    rdi,[rip+0x387c]        # d3e0 <_IO_stdin_used@@Base+0x13e0>
    9b64:	movzx  edx,dl
    9b67:	movsxd rdx,DWORD PTR [rdi+rdx*4]
    9b6b:	add    rdx,rdi
    9b6e:	notrack jmp rdx
    9b71:	cmp    BYTE PTR [rsp+0x63],0x0
    9b76:	jne    91ee <__ctype_b_loc@plt+0x6b1e>
    9b7c:	cmp    r14,r12
    9b7f:	jbe    9b86 <__ctype_b_loc@plt+0x74b6>
    9b81:	mov    BYTE PTR [r15+r12*1],0x3f
    9b86:	lea    rdx,[r12+0x1]
    9b8b:	cmp    r14,rdx
    9b8e:	jbe    9b96 <__ctype_b_loc@plt+0x74c6>
    9b90:	mov    BYTE PTR [r15+r12*1+0x1],0x22
    9b96:	lea    rdx,[r12+0x2]
    9b9b:	cmp    r14,rdx
    9b9e:	jbe    9ba6 <__ctype_b_loc@plt+0x74d6>
    9ba0:	mov    BYTE PTR [r15+r12*1+0x2],0x22
    9ba6:	lea    rdx,[r12+0x3]
    9bab:	cmp    r14,rdx
    9bae:	jbe    9bb6 <__ctype_b_loc@plt+0x74e6>
    9bb0:	mov    BYTE PTR [r15+r12*1+0x3],0x3f
    9bb6:	add    r12,0x4
    9bba:	xor    edx,edx
    9bbc:	xor    r13d,r13d
    9bbf:	mov    rbx,rax
    9bc2:	jmp    99e8 <__ctype_b_loc@plt+0x7318>
    9bc7:	mov    rdi,rbp
    9bca:	mov    r11,rbx
    9bcd:	mov    rcx,QWORD PTR [rsp+0x18]
    9bd2:	mov    rbx,QWORD PTR [rsp+0x40]
    9bd7:	movzx  r8d,BYTE PTR [rsp+0x85]
    9be0:	mov    rax,r13
    9be3:	mov    rdx,rdi
    9be6:	movzx  ebp,BYTE PTR [rsp+0x86]
    9bee:	mov    r12,QWORD PTR [rsp+0x88]
    9bf6:	mov    r10d,DWORD PTR [rsp+0x80]
    9bfe:	movzx  r9d,BYTE PTR [rsp+0x87]
    9c07:	cmp    r13,r11
    9c0a:	jb     9c1d <__ctype_b_loc@plt+0x754d>
    9c0c:	jmp    9c26 <__ctype_b_loc@plt+0x7556>
    9c0e:	xchg   ax,ax
    9c10:	add    rdx,0x1
    9c14:	lea    rax,[rbx+rdx*1]
    9c18:	cmp    r11,rax
    9c1b:	jbe    9c23 <__ctype_b_loc@plt+0x7553>
    9c1d:	cmp    BYTE PTR [rcx+rax*1],0x0
    9c21:	jne    9c10 <__ctype_b_loc@plt+0x7540>
    9c23:	mov    rdi,rdx
    9c26:	movzx  edx,BYTE PTR [rsp+0x10]
    9c2b:	xor    r13d,r13d
    9c2e:	jmp    97f8 <__ctype_b_loc@plt+0x7128>
    9c33:	lea    rax,[rip+0x3106]        # cd40 <_IO_stdin_used@@Base+0xd40>
    9c3a:	xor    r13d,r13d
    9c3d:	xor    r12d,r12d
    9c40:	mov    BYTE PTR [rsp+0x8],0x1
    9c45:	mov    BYTE PTR [rsp+0x84],0x0
    9c4d:	mov    QWORD PTR [rsp+0x58],0x0
    9c56:	mov    BYTE PTR [rsp+0x63],0x1
    9c5b:	mov    BYTE PTR [rsp+0x10],0x1
    9c60:	mov    QWORD PTR [rsp+0x20],0x1
    9c69:	mov    QWORD PTR [rsp+0x50],rax
    9c6e:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    9c73:	mov    edx,eax
    9c75:	mov    rax,QWORD PTR [rsp+0x50]
    9c7a:	test   rax,rax
    9c7d:	je     9ca3 <__ctype_b_loc@plt+0x75d3>
    9c7f:	test   dl,dl
    9c81:	je     9ca3 <__ctype_b_loc@plt+0x75d3>
    9c83:	movzx  edx,BYTE PTR [rax]
    9c86:	test   dl,dl
    9c88:	je     9ca3 <__ctype_b_loc@plt+0x75d3>
    9c8a:	sub    rax,r12
    9c8d:	cmp    r14,r12
    9c90:	jbe    9c96 <__ctype_b_loc@plt+0x75c6>
    9c92:	mov    BYTE PTR [r15+r12*1],dl
    9c96:	add    r12,0x1
    9c9a:	movzx  edx,BYTE PTR [rax+r12*1]
    9c9f:	test   dl,dl
    9ca1:	jne    9c8d <__ctype_b_loc@plt+0x75bd>
    9ca3:	cmp    r14,r12
    9ca6:	jbe    9228 <__ctype_b_loc@plt+0x6b58>
    9cac:	mov    BYTE PTR [r15+r12*1],0x0
    9cb1:	jmp    9228 <__ctype_b_loc@plt+0x6b58>
    9cb6:	mov    esi,r10d
    9cb9:	mov    QWORD PTR [rsp+0x10],r11
    9cbe:	mov    DWORD PTR [rsp+0x8],r10d
    9cc3:	call   8aa0 <__ctype_b_loc@plt+0x63d0>
    9cc8:	mov    r11,QWORD PTR [rsp+0x10]
    9ccd:	mov    r10d,DWORD PTR [rsp+0x8]
    9cd2:	mov    QWORD PTR [rsp+0x70],rax
    9cd7:	jmp    8cac <__ctype_b_loc@plt+0x65dc>
    9cdc:	mov    esi,r10d
    9cdf:	mov    QWORD PTR [rsp+0x10],r11
    9ce4:	mov    DWORD PTR [rsp+0x8],r10d
    9ce9:	call   8aa0 <__ctype_b_loc@plt+0x63d0>
    9cee:	mov    r11,QWORD PTR [rsp+0x10]
    9cf3:	mov    r10d,DWORD PTR [rsp+0x8]
    9cf8:	mov    QWORD PTR [rsp+0x78],rax
    9cfd:	jmp    8c6d <__ctype_b_loc@plt+0x659d>
    9d02:	cmp    r10d,0x2
    9d06:	sete   BYTE PTR [rsp+0x10]
    9d0b:	jmp    91e0 <__ctype_b_loc@plt+0x6b10>
    9d10:	movzx  edx,BYTE PTR [rsp+0x84]
    9d18:	jmp    9c75 <__ctype_b_loc@plt+0x75a5>
    9d1d:	sub    rsp,0x8
    9d21:	mov    r8d,0x5
    9d27:	mov    rcx,r11
    9d2a:	mov    rdi,r15
    9d2d:	push   QWORD PTR [rsp+0x78]
    9d31:	push   QWORD PTR [rsp+0x88]
    9d38:	push   QWORD PTR [rsp+0x40]
    9d3c:	mov    r9d,DWORD PTR [rsp+0x84]
    9d44:	mov    rdx,QWORD PTR [rsp+0x38]
    9d49:	mov    rsi,QWORD PTR [rsp+0x78]
    9d4e:	call   8b80 <__ctype_b_loc@plt+0x64b0>
    9d53:	add    rsp,0x20
    9d57:	mov    r12,rax
    9d5a:	jmp    9228 <__ctype_b_loc@plt+0x6b58>
    9d5f:	mov    rdx,r14
    9d62:	mov    r14,QWORD PTR [rsp+0x58]
    9d67:	jmp    9642 <__ctype_b_loc@plt+0x6f72>
    9d6c:	call   2470 <__stack_chk_fail@plt>
    9d71:	mov    QWORD PTR [rsp+0x58],r14
    9d76:	xor    edx,edx
    9d78:	xor    r13d,r13d
    9d7b:	xor    eax,eax
    9d7d:	mov    BYTE PTR [rsp+0x8],0x1
    9d82:	jmp    9606 <__ctype_b_loc@plt+0x6f36>
    9d87:	mov    ebp,edx
    9d89:	jmp    9330 <__ctype_b_loc@plt+0x6c60>
    9d8e:	lea    rax,[rip+0x2fbc]        # cd51 <_IO_stdin_used@@Base+0xd51>
    9d95:	xor    r13d,r13d
    9d98:	xor    r12d,r12d
    9d9b:	mov    BYTE PTR [rsp+0x8],0x1
    9da0:	mov    BYTE PTR [rsp+0x84],0x0
    9da8:	mov    QWORD PTR [rsp+0x58],0x0
    9db1:	mov    BYTE PTR [rsp+0x63],0x1
    9db6:	mov    BYTE PTR [rsp+0x10],0x0
    9dbb:	mov    QWORD PTR [rsp+0x20],0x1
    9dc4:	mov    QWORD PTR [rsp+0x50],rax
    9dc9:	jmp    8d00 <__ctype_b_loc@plt+0x6630>
    9dce:	xchg   ax,ax
    9dd0:	push   r15
    9dd2:	push   r14
    9dd4:	push   r13
    9dd6:	mov    r13,rdx
    9dd9:	push   r12
    9ddb:	mov    r12,rsi
    9dde:	push   rbp
    9ddf:	mov    rbp,rcx
    9de2:	push   rbx
    9de3:	movsxd rbx,edi
    9de6:	sub    rsp,0x28
    9dea:	call   23b0 <__errno_location@plt>
    9def:	mov    r15,QWORD PTR [rip+0x728a]        # 11080 <quote_quoting_options@@Base+0x40>
    9df6:	mov    QWORD PTR [rsp],rax
    9dfa:	mov    eax,DWORD PTR [rax]
    9dfc:	mov    DWORD PTR [rsp+0xc],eax
    9e00:	test   ebx,ebx
    9e02:	js     26e5 <__ctype_b_loc@plt+0x15>
    9e08:	cmp    DWORD PTR [rip+0x726a],ebx        # 11078 <quote_quoting_options@@Base+0x38>
    9e0e:	jg     9e71 <__ctype_b_loc@plt+0x77a1>
    9e10:	cmp    ebx,0x7fffffff
    9e16:	je     9f69 <__ctype_b_loc@plt+0x7899>
    9e1c:	lea    r14d,[rbx+0x1]
    9e20:	lea    rax,[rip+0x7269]        # 11090 <quote_quoting_options@@Base+0x50>
    9e27:	movsxd rsi,r14d
    9e2a:	shl    rsi,0x4
    9e2e:	cmp    r15,rax
    9e31:	je     9f48 <__ctype_b_loc@plt+0x7878>
    9e37:	mov    rdi,r15
    9e3a:	call   ae60 <__ctype_b_loc@plt+0x8790>
    9e3f:	mov    QWORD PTR [rip+0x723a],rax        # 11080 <quote_quoting_options@@Base+0x40>
    9e46:	mov    r15,rax
    9e49:	movsxd rdi,DWORD PTR [rip+0x7228]        # 11078 <quote_quoting_options@@Base+0x38>
    9e50:	mov    edx,r14d
    9e53:	xor    esi,esi
    9e55:	sub    edx,edi
    9e57:	shl    rdi,0x4
    9e5b:	movsxd rdx,edx
    9e5e:	add    rdi,r15
    9e61:	shl    rdx,0x4
    9e65:	call   24e0 <memset@plt>
    9e6a:	mov    DWORD PTR [rip+0x7207],r14d        # 11078 <quote_quoting_options@@Base+0x38>
    9e71:	lea    rax,[rbp+0x8]
    9e75:	shl    rbx,0x4
    9e79:	sub    rsp,0x8
    9e7d:	mov    r14d,DWORD PTR [rbp+0x4]
    9e81:	add    rbx,r15
    9e84:	mov    QWORD PTR [rsp+0x20],rax
    9e89:	mov    r8d,DWORD PTR [rbp+0x0]
    9e8d:	mov    rcx,r13
    9e90:	mov    rsi,QWORD PTR [rbx]
    9e93:	mov    r15,QWORD PTR [rbx+0x8]
    9e97:	push   QWORD PTR [rbp+0x30]
    9e9a:	or     r14d,0x1
    9e9e:	push   QWORD PTR [rbp+0x28]
    9ea1:	mov    r9d,r14d
    9ea4:	mov    rdx,r12
    9ea7:	push   rax
    9ea8:	mov    rdi,r15
    9eab:	mov    QWORD PTR [rsp+0x30],rsi
    9eb0:	call   8b80 <__ctype_b_loc@plt+0x64b0>
    9eb5:	mov    rsi,QWORD PTR [rsp+0x30]
    9eba:	add    rsp,0x20
    9ebe:	cmp    rsi,rax
    9ec1:	ja     9f28 <__ctype_b_loc@plt+0x7858>
    9ec3:	lea    rsi,[rax+0x1]
    9ec7:	lea    rax,[rip+0x7272]        # 11140 <program_name@@Base+0x20>
    9ece:	mov    QWORD PTR [rbx],rsi
    9ed1:	cmp    r15,rax
    9ed4:	je     9ee8 <__ctype_b_loc@plt+0x7818>
    9ed6:	mov    rdi,r15
    9ed9:	mov    QWORD PTR [rsp+0x10],rsi
    9ede:	call   2390 <free@plt>
    9ee3:	mov    rsi,QWORD PTR [rsp+0x10]
    9ee8:	mov    rdi,rsi
    9eeb:	mov    QWORD PTR [rsp+0x10],rsi
    9ef0:	call   ae00 <__ctype_b_loc@plt+0x8730>
    9ef5:	sub    rsp,0x8
    9ef9:	mov    r8d,DWORD PTR [rbp+0x0]
    9efd:	mov    r9d,r14d
    9f00:	mov    QWORD PTR [rbx+0x8],rax
    9f04:	mov    rcx,r13
    9f07:	mov    rdx,r12
    9f0a:	mov    rdi,rax
    9f0d:	push   QWORD PTR [rbp+0x30]
    9f10:	mov    r15,rax
    9f13:	push   QWORD PTR [rbp+0x28]
    9f16:	push   QWORD PTR [rsp+0x30]
    9f1a:	mov    rsi,QWORD PTR [rsp+0x30]
    9f1f:	call   8b80 <__ctype_b_loc@plt+0x64b0>
    9f24:	add    rsp,0x20
    9f28:	mov    rax,QWORD PTR [rsp]
    9f2c:	mov    ecx,DWORD PTR [rsp+0xc]
    9f30:	mov    DWORD PTR [rax],ecx
    9f32:	add    rsp,0x28
    9f36:	mov    rax,r15
    9f39:	pop    rbx
    9f3a:	pop    rbp
    9f3b:	pop    r12
    9f3d:	pop    r13
    9f3f:	pop    r14
    9f41:	pop    r15
    9f43:	ret    
    9f44:	nop    DWORD PTR [rax+0x0]
    9f48:	xor    edi,edi
    9f4a:	call   ae60 <__ctype_b_loc@plt+0x8790>
    9f4f:	movdqa xmm0,XMMWORD PTR [rip+0x7139]        # 11090 <quote_quoting_options@@Base+0x50>
    9f57:	mov    QWORD PTR [rip+0x7122],rax        # 11080 <quote_quoting_options@@Base+0x40>
    9f5e:	mov    r15,rax
    9f61:	movups XMMWORD PTR [rax],xmm0
    9f64:	jmp    9e49 <__ctype_b_loc@plt+0x7779>
    9f69:	call   b070 <__ctype_b_loc@plt+0x89a0>
    9f6e:	xchg   ax,ax
    9f70:	endbr64 
    9f74:	push   r12
    9f76:	push   rbp
    9f77:	mov    rbp,rdi
    9f7a:	push   rbx
    9f7b:	call   23b0 <__errno_location@plt>
    9f80:	test   rbp,rbp
    9f83:	mov    esi,0x38
    9f88:	mov    r12d,DWORD PTR [rax]
    9f8b:	mov    rbx,rax
    9f8e:	lea    rax,[rip+0x72ab]        # 11240 <program_name@@Base+0x120>
    9f95:	cmove  rbp,rax
    9f99:	mov    rdi,rbp
    9f9c:	call   b020 <__ctype_b_loc@plt+0x8950>
    9fa1:	mov    DWORD PTR [rbx],r12d
    9fa4:	pop    rbx
    9fa5:	pop    rbp
    9fa6:	pop    r12
    9fa8:	ret    
    9fa9:	nop    DWORD PTR [rax+0x0]
    9fb0:	endbr64 
    9fb4:	test   rdi,rdi
    9fb7:	lea    rax,[rip+0x7282]        # 11240 <program_name@@Base+0x120>
    9fbe:	cmove  rdi,rax
    9fc2:	mov    eax,DWORD PTR [rdi]
    9fc4:	ret    
    9fc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    9fd0:	endbr64 
    9fd4:	test   rdi,rdi
    9fd7:	lea    rax,[rip+0x7262]        # 11240 <program_name@@Base+0x120>
    9fde:	cmove  rdi,rax
    9fe2:	mov    DWORD PTR [rdi],esi
    9fe4:	ret    
    9fe5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    9ff0:	endbr64 
    9ff4:	test   rdi,rdi
    9ff7:	lea    rax,[rip+0x7242]        # 11240 <program_name@@Base+0x120>
    9ffe:	mov    ecx,esi
    a000:	cmove  rdi,rax
    a004:	mov    eax,esi
    a006:	and    ecx,0x1f
    a009:	shr    al,0x5
    a00c:	movzx  eax,al
    a00f:	lea    rsi,[rdi+rax*4+0x8]
    a014:	mov    edi,DWORD PTR [rsi]
    a016:	mov    eax,edi
    a018:	shr    eax,cl
    a01a:	xor    edx,eax
    a01c:	and    eax,0x1
    a01f:	and    edx,0x1
    a022:	shl    edx,cl
    a024:	xor    edx,edi
    a026:	mov    DWORD PTR [rsi],edx
    a028:	ret    
    a029:	nop    DWORD PTR [rax+0x0]
    a030:	endbr64 
    a034:	test   rdi,rdi
    a037:	lea    rax,[rip+0x7202]        # 11240 <program_name@@Base+0x120>
    a03e:	cmove  rdi,rax
    a042:	mov    eax,DWORD PTR [rdi+0x4]
    a045:	mov    DWORD PTR [rdi+0x4],esi
    a048:	ret    
    a049:	nop    DWORD PTR [rax+0x0]
    a050:	endbr64 
    a054:	sub    rsp,0x8
    a058:	lea    rax,[rip+0x71e1]        # 11240 <program_name@@Base+0x120>
    a05f:	test   rdi,rdi
    a062:	cmove  rdi,rax
    a066:	mov    DWORD PTR [rdi],0xa
    a06c:	test   rsi,rsi
    a06f:	je     26ea <__ctype_b_loc@plt+0x1a>
    a075:	test   rdx,rdx
    a078:	je     26ea <__ctype_b_loc@plt+0x1a>
    a07e:	mov    QWORD PTR [rdi+0x28],rsi
    a082:	mov    QWORD PTR [rdi+0x30],rdx
    a086:	add    rsp,0x8
    a08a:	ret    
    a08b:	nop    DWORD PTR [rax+rax*1+0x0]
    a090:	endbr64 
    a094:	push   r15
    a096:	lea    rax,[rip+0x71a3]        # 11240 <program_name@@Base+0x120>
    a09d:	push   r14
    a09f:	mov    r14,rdx
    a0a2:	push   r13
    a0a4:	mov    r13,rsi
    a0a7:	push   r12
    a0a9:	mov    r12,rdi
    a0ac:	push   rbp
    a0ad:	push   rbx
    a0ae:	mov    rbx,r8
    a0b1:	sub    rsp,0x18
    a0b5:	test   r8,r8
    a0b8:	cmove  rbx,rax
    a0bc:	mov    QWORD PTR [rsp+0x8],rcx
    a0c1:	call   23b0 <__errno_location@plt>
    a0c6:	sub    rsp,0x8
    a0ca:	mov    rdx,r14
    a0cd:	mov    rsi,r13
    a0d0:	mov    r15d,DWORD PTR [rax]
    a0d3:	mov    rbp,rax
    a0d6:	lea    rax,[rbx+0x8]
    a0da:	mov    r9d,DWORD PTR [rbx+0x4]
    a0de:	push   QWORD PTR [rbx+0x30]
    a0e1:	mov    r8d,DWORD PTR [rbx]
    a0e4:	mov    rdi,r12
    a0e7:	push   QWORD PTR [rbx+0x28]
    a0ea:	push   rax
    a0eb:	mov    rcx,QWORD PTR [rsp+0x28]
    a0f0:	call   8b80 <__ctype_b_loc@plt+0x64b0>
    a0f5:	mov    DWORD PTR [rbp+0x0],r15d
    a0f9:	add    rsp,0x38
    a0fd:	pop    rbx
    a0fe:	pop    rbp
    a0ff:	pop    r12
    a101:	pop    r13
    a103:	pop    r14
    a105:	pop    r15
    a107:	ret    
    a108:	nop    DWORD PTR [rax+rax*1+0x0]
    a110:	endbr64 
    a114:	push   r15
    a116:	lea    rax,[rip+0x7123]        # 11240 <program_name@@Base+0x120>
    a11d:	push   r14
    a11f:	mov    r14,rsi
    a122:	push   r13
    a124:	mov    r13,rdi
    a127:	push   r12
    a129:	push   rbp
    a12a:	mov    rbp,rdx
    a12d:	push   rbx
    a12e:	mov    rbx,rcx
    a131:	sub    rsp,0x28
    a135:	test   rcx,rcx
    a138:	cmove  rbx,rax
    a13c:	call   23b0 <__errno_location@plt>
    a141:	xor    r9d,r9d
    a144:	test   rbp,rbp
    a147:	mov    rcx,r14
    a14a:	mov    r12,rax
    a14d:	mov    eax,DWORD PTR [rax]
    a14f:	sete   r9b
    a153:	lea    r10,[rbx+0x8]
    a157:	sub    rsp,0x8
    a15b:	or     r9d,DWORD PTR [rbx+0x4]
    a15f:	mov    r8d,DWORD PTR [rbx]
    a162:	mov    rdx,r13
    a165:	mov    DWORD PTR [rsp+0x18],eax
    a169:	xor    esi,esi
    a16b:	xor    edi,edi
    a16d:	push   QWORD PTR [rbx+0x30]
    a170:	push   QWORD PTR [rbx+0x28]
    a173:	push   r10
    a175:	mov    QWORD PTR [rsp+0x38],r10
    a17a:	mov    DWORD PTR [rsp+0x34],r9d
    a17f:	call   8b80 <__ctype_b_loc@plt+0x64b0>
    a184:	add    rsp,0x20
    a188:	lea    rsi,[rax+0x1]
    a18c:	mov    r15,rax
    a18f:	mov    rdi,rsi
    a192:	mov    QWORD PTR [rsp+0x8],rsi
    a197:	call   ae00 <__ctype_b_loc@plt+0x8730>
    a19c:	sub    rsp,0x8
    a1a0:	push   QWORD PTR [rbx+0x30]
    a1a3:	mov    r8d,DWORD PTR [rbx]
    a1a6:	push   QWORD PTR [rbx+0x28]
    a1a9:	mov    rcx,r14
    a1ac:	mov    rdx,r13
    a1af:	mov    rdi,rax
    a1b2:	mov    r10,QWORD PTR [rsp+0x30]
    a1b7:	push   r10
    a1b9:	mov    rsi,QWORD PTR [rsp+0x28]
    a1be:	mov    r9d,DWORD PTR [rsp+0x34]
    a1c3:	mov    QWORD PTR [rsp+0x28],rax
    a1c8:	call   8b80 <__ctype_b_loc@plt+0x64b0>
    a1cd:	mov    eax,DWORD PTR [rsp+0x30]
    a1d1:	add    rsp,0x20
    a1d5:	test   rbp,rbp
    a1d8:	mov    r11,QWORD PTR [rsp+0x8]
    a1dd:	mov    DWORD PTR [r12],eax
    a1e1:	je     a1e7 <__ctype_b_loc@plt+0x7b17>
    a1e3:	mov    QWORD PTR [rbp+0x0],r15
    a1e7:	add    rsp,0x28
    a1eb:	mov    rax,r11
    a1ee:	pop    rbx
    a1ef:	pop    rbp
    a1f0:	pop    r12
    a1f2:	pop    r13
    a1f4:	pop    r14
    a1f6:	pop    r15
    a1f8:	ret    
    a1f9:	nop    DWORD PTR [rax+0x0]
    a200:	endbr64 
    a204:	mov    rcx,rdx
    a207:	xor    edx,edx
    a209:	jmp    a110 <__ctype_b_loc@plt+0x7a40>
    a20e:	xchg   ax,ax
    a210:	endbr64 
    a214:	mov    eax,DWORD PTR [rip+0x6e5e]        # 11078 <quote_quoting_options@@Base+0x38>
    a21a:	push   r12
    a21c:	mov    r12,QWORD PTR [rip+0x6e5d]        # 11080 <quote_quoting_options@@Base+0x40>
    a223:	push   rbp
    a224:	push   rbx
    a225:	cmp    eax,0x1
    a228:	jle    a251 <__ctype_b_loc@plt+0x7b81>
    a22a:	sub    eax,0x2
    a22d:	lea    rbx,[r12+0x18]
    a232:	shl    rax,0x4
    a236:	lea    rbp,[r12+rax*1+0x28]
    a23b:	nop    DWORD PTR [rax+rax*1+0x0]
    a240:	mov    rdi,QWORD PTR [rbx]
    a243:	add    rbx,0x10
    a247:	call   2390 <free@plt>
    a24c:	cmp    rbx,rbp
    a24f:	jne    a240 <__ctype_b_loc@plt+0x7b70>
    a251:	mov    rdi,QWORD PTR [r12+0x8]
    a256:	lea    rbx,[rip+0x6ee3]        # 11140 <program_name@@Base+0x20>
    a25d:	cmp    rdi,rbx
    a260:	je     a279 <__ctype_b_loc@plt+0x7ba9>
    a262:	call   2390 <free@plt>
    a267:	mov    QWORD PTR [rip+0x6e2a],rbx        # 11098 <quote_quoting_options@@Base+0x58>
    a26e:	mov    QWORD PTR [rip+0x6e17],0x100        # 11090 <quote_quoting_options@@Base+0x50>
    a279:	lea    rbx,[rip+0x6e10]        # 11090 <quote_quoting_options@@Base+0x50>
    a280:	cmp    r12,rbx
    a283:	je     a294 <__ctype_b_loc@plt+0x7bc4>
    a285:	mov    rdi,r12
    a288:	call   2390 <free@plt>
    a28d:	mov    QWORD PTR [rip+0x6dec],rbx        # 11080 <quote_quoting_options@@Base+0x40>
    a294:	mov    DWORD PTR [rip+0x6dda],0x1        # 11078 <quote_quoting_options@@Base+0x38>
    a29e:	pop    rbx
    a29f:	pop    rbp
    a2a0:	pop    r12
    a2a2:	ret    
    a2a3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    a2ae:	xchg   ax,ax
    a2b0:	endbr64 
    a2b4:	lea    rcx,[rip+0x6f85]        # 11240 <program_name@@Base+0x120>
    a2bb:	mov    rdx,0xffffffffffffffff
    a2c2:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a2c7:	nop    WORD PTR [rax+rax*1+0x0]
    a2d0:	endbr64 
    a2d4:	lea    rcx,[rip+0x6f65]        # 11240 <program_name@@Base+0x120>
    a2db:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a2e0:	endbr64 
    a2e4:	mov    rsi,rdi
    a2e7:	lea    rcx,[rip+0x6f52]        # 11240 <program_name@@Base+0x120>
    a2ee:	mov    rdx,0xffffffffffffffff
    a2f5:	xor    edi,edi
    a2f7:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a2fc:	nop    DWORD PTR [rax+0x0]
    a300:	endbr64 
    a304:	mov    rdx,rsi
    a307:	lea    rcx,[rip+0x6f32]        # 11240 <program_name@@Base+0x120>
    a30e:	mov    rsi,rdi
    a311:	xor    edi,edi
    a313:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a318:	nop    DWORD PTR [rax+rax*1+0x0]
    a320:	endbr64 
    a324:	sub    rsp,0x48
    a328:	mov    rax,QWORD PTR fs:0x28
    a331:	mov    QWORD PTR [rsp+0x38],rax
    a336:	xor    eax,eax
    a338:	cmp    esi,0xa
    a33b:	je     26ef <__ctype_b_loc@plt+0x1f>
    a341:	mov    r8,rdx
    a344:	mov    DWORD PTR [rsp],esi
    a347:	mov    rcx,rsp
    a34a:	mov    rdx,0xffffffffffffffff
    a351:	mov    rsi,r8
    a354:	mov    DWORD PTR [rsp+0x4],0x0
    a35c:	mov    QWORD PTR [rsp+0x8],0x0
    a365:	mov    QWORD PTR [rsp+0x10],0x0
    a36e:	mov    QWORD PTR [rsp+0x18],0x0
    a377:	mov    QWORD PTR [rsp+0x20],0x0
    a380:	mov    QWORD PTR [rsp+0x28],0x0
    a389:	mov    QWORD PTR [rsp+0x30],0x0
    a392:	call   9dd0 <__ctype_b_loc@plt+0x7700>
    a397:	mov    rcx,QWORD PTR [rsp+0x38]
    a39c:	xor    rcx,QWORD PTR fs:0x28
    a3a5:	jne    a3ac <__ctype_b_loc@plt+0x7cdc>
    a3a7:	add    rsp,0x48
    a3ab:	ret    
    a3ac:	call   2470 <__stack_chk_fail@plt>
    a3b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    a3bc:	nop    DWORD PTR [rax+0x0]
    a3c0:	endbr64 
    a3c4:	sub    rsp,0x48
    a3c8:	mov    rax,QWORD PTR fs:0x28
    a3d1:	mov    QWORD PTR [rsp+0x38],rax
    a3d6:	xor    eax,eax
    a3d8:	cmp    esi,0xa
    a3db:	je     26f4 <__ctype_b_loc@plt+0x24>
    a3e1:	mov    r8,rdx
    a3e4:	mov    DWORD PTR [rsp],esi
    a3e7:	mov    rdx,rcx
    a3ea:	mov    rcx,rsp
    a3ed:	mov    rsi,r8
    a3f0:	mov    DWORD PTR [rsp+0x4],0x0
    a3f8:	mov    QWORD PTR [rsp+0x8],0x0
    a401:	mov    QWORD PTR [rsp+0x10],0x0
    a40a:	mov    QWORD PTR [rsp+0x18],0x0
    a413:	mov    QWORD PTR [rsp+0x20],0x0
    a41c:	mov    QWORD PTR [rsp+0x28],0x0
    a425:	mov    QWORD PTR [rsp+0x30],0x0
    a42e:	call   9dd0 <__ctype_b_loc@plt+0x7700>
    a433:	mov    rdx,QWORD PTR [rsp+0x38]
    a438:	xor    rdx,QWORD PTR fs:0x28
    a441:	jne    a448 <__ctype_b_loc@plt+0x7d78>
    a443:	add    rsp,0x48
    a447:	ret    
    a448:	call   2470 <__stack_chk_fail@plt>
    a44d:	nop    DWORD PTR [rax]
    a450:	endbr64 
    a454:	mov    rdx,rsi
    a457:	mov    esi,edi
    a459:	xor    edi,edi
    a45b:	jmp    a320 <__ctype_b_loc@plt+0x7c50>
    a460:	endbr64 
    a464:	mov    rcx,rdx
    a467:	mov    rdx,rsi
    a46a:	mov    esi,edi
    a46c:	xor    edi,edi
    a46e:	jmp    a3c0 <__ctype_b_loc@plt+0x7cf0>
    a473:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    a47e:	xchg   ax,ax
    a480:	endbr64 
    a484:	sub    rsp,0x48
    a488:	movdqa xmm0,XMMWORD PTR [rip+0x6db0]        # 11240 <program_name@@Base+0x120>
    a490:	movdqa xmm1,XMMWORD PTR [rip+0x6db8]        # 11250 <program_name@@Base+0x130>
    a498:	mov    ecx,edx
    a49a:	mov    rax,QWORD PTR fs:0x28
    a4a3:	mov    QWORD PTR [rsp+0x38],rax
    a4a8:	xor    eax,eax
    a4aa:	mov    rax,QWORD PTR [rip+0x6dbf]        # 11270 <program_name@@Base+0x150>
    a4b1:	mov    r9,rsi
    a4b4:	and    ecx,0x1f
    a4b7:	movdqa xmm2,XMMWORD PTR [rip+0x6da1]        # 11260 <program_name@@Base+0x140>
    a4bf:	movaps XMMWORD PTR [rsp],xmm0
    a4c3:	mov    r10,rsp
    a4c6:	mov    QWORD PTR [rsp+0x30],rax
    a4cb:	mov    eax,edx
    a4cd:	shr    al,0x5
    a4d0:	movaps XMMWORD PTR [rsp+0x10],xmm1
    a4d5:	movzx  eax,al
    a4d8:	movaps XMMWORD PTR [rsp+0x20],xmm2
    a4dd:	lea    rdx,[rsp+rax*4+0x8]
    a4e2:	mov    esi,DWORD PTR [rdx]
    a4e4:	mov    eax,esi
    a4e6:	shr    eax,cl
    a4e8:	not    eax
    a4ea:	and    eax,0x1
    a4ed:	shl    eax,cl
    a4ef:	mov    rcx,r10
    a4f2:	xor    eax,esi
    a4f4:	mov    rsi,rdi
    a4f7:	xor    edi,edi
    a4f9:	mov    DWORD PTR [rdx],eax
    a4fb:	mov    rdx,r9
    a4fe:	call   9dd0 <__ctype_b_loc@plt+0x7700>
    a503:	mov    rdi,QWORD PTR [rsp+0x38]
    a508:	xor    rdi,QWORD PTR fs:0x28
    a511:	jne    a518 <__ctype_b_loc@plt+0x7e48>
    a513:	add    rsp,0x48
    a517:	ret    
    a518:	call   2470 <__stack_chk_fail@plt>
    a51d:	nop    DWORD PTR [rax]
    a520:	endbr64 
    a524:	movsx  edx,sil
    a528:	mov    rsi,0xffffffffffffffff
    a52f:	jmp    a480 <__ctype_b_loc@plt+0x7db0>
    a534:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    a53f:	nop
    a540:	endbr64 
    a544:	mov    edx,0x3a
    a549:	mov    rsi,0xffffffffffffffff
    a550:	jmp    a480 <__ctype_b_loc@plt+0x7db0>
    a555:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    a560:	endbr64 
    a564:	mov    edx,0x3a
    a569:	jmp    a480 <__ctype_b_loc@plt+0x7db0>
    a56e:	xchg   ax,ax
    a570:	endbr64 
    a574:	sub    rsp,0x48
    a578:	mov    rax,QWORD PTR fs:0x28
    a581:	mov    QWORD PTR [rsp+0x38],rax
    a586:	xor    eax,eax
    a588:	cmp    esi,0xa
    a58b:	je     26f9 <__ctype_b_loc@plt+0x29>
    a591:	mov    r8,rdx
    a594:	mov    DWORD PTR [rsp],esi
    a597:	mov    rcx,rsp
    a59a:	mov    rdx,0xffffffffffffffff
    a5a1:	movabs rax,0x400000000000000
    a5ab:	mov    rsi,r8
    a5ae:	mov    DWORD PTR [rsp+0x4],0x0
    a5b6:	mov    QWORD PTR [rsp+0x8],rax
    a5bb:	mov    QWORD PTR [rsp+0x10],0x0
    a5c4:	mov    QWORD PTR [rsp+0x18],0x0
    a5cd:	mov    QWORD PTR [rsp+0x20],0x0
    a5d6:	mov    QWORD PTR [rsp+0x28],0x0
    a5df:	mov    QWORD PTR [rsp+0x30],0x0
    a5e8:	call   9dd0 <__ctype_b_loc@plt+0x7700>
    a5ed:	mov    rcx,QWORD PTR [rsp+0x38]
    a5f2:	xor    rcx,QWORD PTR fs:0x28
    a5fb:	jne    a602 <__ctype_b_loc@plt+0x7f32>
    a5fd:	add    rsp,0x48
    a601:	ret    
    a602:	call   2470 <__stack_chk_fail@plt>
    a607:	nop    WORD PTR [rax+rax*1+0x0]
    a610:	endbr64 
    a614:	sub    rsp,0x48
    a618:	movdqa xmm0,XMMWORD PTR [rip+0x6c20]        # 11240 <program_name@@Base+0x120>
    a620:	movdqa xmm1,XMMWORD PTR [rip+0x6c28]        # 11250 <program_name@@Base+0x130>
    a628:	mov    rax,QWORD PTR fs:0x28
    a631:	mov    QWORD PTR [rsp+0x38],rax
    a636:	xor    eax,eax
    a638:	movdqa xmm2,XMMWORD PTR [rip+0x6c20]        # 11260 <program_name@@Base+0x140>
    a640:	mov    rax,QWORD PTR [rip+0x6c29]        # 11270 <program_name@@Base+0x150>
    a647:	movaps XMMWORD PTR [rsp],xmm0
    a64b:	mov    QWORD PTR [rsp+0x30],rax
    a650:	mov    DWORD PTR [rsp],0xa
    a657:	movaps XMMWORD PTR [rsp+0x10],xmm1
    a65c:	movaps XMMWORD PTR [rsp+0x20],xmm2
    a661:	test   rsi,rsi
    a664:	je     26fe <__ctype_b_loc@plt+0x2e>
    a66a:	test   rdx,rdx
    a66d:	je     26fe <__ctype_b_loc@plt+0x2e>
    a673:	mov    r9,rcx
    a676:	mov    QWORD PTR [rsp+0x28],rsi
    a67b:	mov    rcx,rsp
    a67e:	mov    QWORD PTR [rsp+0x30],rdx
    a683:	mov    rsi,r9
    a686:	mov    rdx,r8
    a689:	call   9dd0 <__ctype_b_loc@plt+0x7700>
    a68e:	mov    rcx,QWORD PTR [rsp+0x38]
    a693:	xor    rcx,QWORD PTR fs:0x28
    a69c:	jne    a6a3 <__ctype_b_loc@plt+0x7fd3>
    a69e:	add    rsp,0x48
    a6a2:	ret    
    a6a3:	call   2470 <__stack_chk_fail@plt>
    a6a8:	nop    DWORD PTR [rax+rax*1+0x0]
    a6b0:	endbr64 
    a6b4:	mov    r8,0xffffffffffffffff
    a6bb:	jmp    a610 <__ctype_b_loc@plt+0x7f40>
    a6c0:	endbr64 
    a6c4:	mov    rcx,rdx
    a6c7:	mov    r8,0xffffffffffffffff
    a6ce:	mov    rdx,rsi
    a6d1:	mov    rsi,rdi
    a6d4:	xor    edi,edi
    a6d6:	jmp    a610 <__ctype_b_loc@plt+0x7f40>
    a6db:	nop    DWORD PTR [rax+rax*1+0x0]
    a6e0:	endbr64 
    a6e4:	mov    r8,rcx
    a6e7:	mov    rcx,rdx
    a6ea:	mov    rdx,rsi
    a6ed:	mov    rsi,rdi
    a6f0:	xor    edi,edi
    a6f2:	jmp    a610 <__ctype_b_loc@plt+0x7f40>
    a6f7:	nop    WORD PTR [rax+rax*1+0x0]
    a700:	endbr64 
    a704:	lea    rcx,[rip+0x6935]        # 11040 <quote_quoting_options@@Base>
    a70b:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a710:	endbr64 
    a714:	mov    rdx,rsi
    a717:	lea    rcx,[rip+0x6922]        # 11040 <quote_quoting_options@@Base>
    a71e:	mov    rsi,rdi
    a721:	xor    edi,edi
    a723:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a728:	nop    DWORD PTR [rax+rax*1+0x0]
    a730:	endbr64 
    a734:	lea    rcx,[rip+0x6905]        # 11040 <quote_quoting_options@@Base>
    a73b:	mov    rdx,0xffffffffffffffff
    a742:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a747:	nop    WORD PTR [rax+rax*1+0x0]
    a750:	endbr64 
    a754:	mov    rsi,rdi
    a757:	lea    rcx,[rip+0x68e2]        # 11040 <quote_quoting_options@@Base>
    a75e:	mov    rdx,0xffffffffffffffff
    a765:	xor    edi,edi
    a767:	jmp    9dd0 <__ctype_b_loc@plt+0x7700>
    a76c:	nop    DWORD PTR [rax+0x0]
    a770:	endbr64 
    a774:	mov    edx,0x3
    a779:	xor    esi,esi
    a77b:	xor    eax,eax
    a77d:	jmp    b140 <__ctype_b_loc@plt+0x8a70>
    a782:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a78c:	nop    DWORD PTR [rax+0x0]
    a790:	endbr64 
    a794:	push   r15
    a796:	push   r14
    a798:	push   r13
    a79a:	push   r12
    a79c:	mov    r12,r9
    a79f:	push   rbp
    a7a0:	mov    rbp,rdi
    a7a3:	push   rbx
    a7a4:	mov    rbx,r8
    a7a7:	sub    rsp,0x38
    a7ab:	test   rsi,rsi
    a7ae:	je     a840 <__ctype_b_loc@plt+0x8170>
    a7b4:	mov    r9,rcx
    a7b7:	mov    r8,rdx
    a7ba:	mov    rcx,rsi
    a7bd:	xor    eax,eax
    a7bf:	lea    rdx,[rip+0x2cc2]        # d488 <quoting_style_vals@@Base+0x28>
    a7c6:	mov    esi,0x1
    a7cb:	call   2690 <__fprintf_chk@plt>
    a7d0:	xor    edi,edi
    a7d2:	mov    edx,0x5
    a7d7:	lea    rsi,[rip+0x2cbd]        # d49b <quoting_style_vals@@Base+0x3b>
    a7de:	call   2440 <dcgettext@plt>
    a7e3:	mov    r8d,0x7e2
    a7e9:	mov    esi,0x1
    a7ee:	mov    rdi,rbp
    a7f1:	mov    rcx,rax
    a7f4:	lea    rdx,[rip+0x2fc5]        # d7c0 <version_etc_copyright@@Base>
    a7fb:	xor    eax,eax
    a7fd:	call   2690 <__fprintf_chk@plt>
    a802:	xor    edi,edi
    a804:	mov    edx,0x5
    a809:	lea    rsi,[rip+0x2d18]        # d528 <quoting_style_vals@@Base+0xc8>
    a810:	call   2440 <dcgettext@plt>
    a815:	mov    rsi,rbp
    a818:	mov    rdi,rax
    a81b:	call   2520 <fputs_unlocked@plt>
    a820:	cmp    r12,0x9
    a824:	ja     ab84 <__ctype_b_loc@plt+0x84b4>
    a82a:	lea    rdx,[rip+0x2f53]        # d784 <quoting_style_vals@@Base+0x324>
    a831:	movsxd rax,DWORD PTR [rdx+r12*4]
    a835:	add    rax,rdx
    a838:	notrack jmp rax
    a83b:	nop    DWORD PTR [rax+rax*1+0x0]
    a840:	mov    r8,rcx
    a843:	mov    esi,0x1
    a848:	mov    rcx,rdx
    a84b:	xor    eax,eax
    a84d:	lea    rdx,[rip+0x2c40]        # d494 <quoting_style_vals@@Base+0x34>
    a854:	call   2690 <__fprintf_chk@plt>
    a859:	jmp    a7d0 <__ctype_b_loc@plt+0x8100>
    a85e:	xchg   ax,ax
    a860:	mov    r10,QWORD PTR [rbx+0x38]
    a864:	mov    r9,QWORD PTR [rbx+0x30]
    a868:	mov    edx,0x5
    a86d:	xor    edi,edi
    a86f:	mov    r8,QWORD PTR [rbx+0x28]
    a873:	mov    rcx,QWORD PTR [rbx+0x20]
    a877:	lea    rsi,[rip+0x2e1a]        # d698 <quoting_style_vals@@Base+0x238>
    a87e:	mov    r15,QWORD PTR [rbx+0x18]
    a882:	mov    r14,QWORD PTR [rbx+0x10]
    a886:	mov    QWORD PTR [rsp+0x20],r10
    a88b:	mov    r13,QWORD PTR [rbx+0x8]
    a88f:	mov    r12,QWORD PTR [rbx]
    a892:	mov    QWORD PTR [rsp+0x18],r9
    a897:	mov    QWORD PTR [rsp+0x10],r8
    a89c:	mov    QWORD PTR [rsp+0x8],rcx
    a8a1:	call   2440 <dcgettext@plt>
    a8a6:	sub    rsp,0x8
    a8aa:	mov    rdx,rax
    a8ad:	mov    r10,QWORD PTR [rsp+0x28]
    a8b2:	mov    rdi,rbp
    a8b5:	mov    esi,0x1
    a8ba:	xor    eax,eax
    a8bc:	push   r10
    a8be:	mov    r9,QWORD PTR [rsp+0x28]
    a8c3:	push   r9
    a8c5:	mov    r8,QWORD PTR [rsp+0x28]
    a8ca:	mov    r9,r14
    a8cd:	push   r8
    a8cf:	mov    rcx,QWORD PTR [rsp+0x28]
    a8d4:	mov    r8,r13
    a8d7:	push   rcx
    a8d8:	mov    rcx,r12
    a8db:	push   r15
    a8dd:	call   2690 <__fprintf_chk@plt>
    a8e2:	add    rsp,0x30
    a8e6:	add    rsp,0x38
    a8ea:	pop    rbx
    a8eb:	pop    rbp
    a8ec:	pop    r12
    a8ee:	pop    r13
    a8f0:	pop    r14
    a8f2:	pop    r15
    a8f4:	ret    
    a8f5:	nop    DWORD PTR [rax]
    a8f8:	mov    r11,QWORD PTR [rbx+0x40]
    a8fc:	mov    r10,QWORD PTR [rbx+0x38]
    a900:	mov    edx,0x5
    a905:	lea    rsi,[rip+0x2dbc]        # d6c8 <quoting_style_vals@@Base+0x268>
    a90c:	mov    r9,QWORD PTR [rbx+0x30]
    a910:	mov    r8,QWORD PTR [rbx+0x28]
    a914:	mov    rcx,QWORD PTR [rbx+0x20]
    a918:	mov    r15,QWORD PTR [rbx+0x18]
    a91c:	mov    QWORD PTR [rsp+0x28],r11
    a921:	mov    r14,QWORD PTR [rbx+0x10]
    a925:	mov    r13,QWORD PTR [rbx+0x8]
    a929:	mov    QWORD PTR [rsp+0x20],r10
    a92e:	mov    QWORD PTR [rsp+0x18],r9
    a933:	mov    r12,QWORD PTR [rbx]
    a936:	mov    QWORD PTR [rsp+0x10],r8
    a93b:	mov    QWORD PTR [rsp+0x8],rcx
    a940:	xor    edi,edi
    a942:	call   2440 <dcgettext@plt>
    a947:	mov    r11,QWORD PTR [rsp+0x28]
    a94c:	mov    rdx,rax
    a94f:	push   r11
    a951:	jmp    a8ad <__ctype_b_loc@plt+0x81dd>
    a956:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a960:	mov    r12,QWORD PTR [rbx]
    a963:	mov    edx,0x5
    a968:	lea    rsi,[rip+0x2b30]        # d49f <quoting_style_vals@@Base+0x3f>
    a96f:	xor    edi,edi
    a971:	call   2440 <dcgettext@plt>
    a976:	add    rsp,0x38
    a97a:	mov    rdi,rbp
    a97d:	mov    esi,0x1
    a982:	pop    rbx
    a983:	mov    rdx,rax
    a986:	pop    rbp
    a987:	mov    rcx,r12
    a98a:	xor    eax,eax
    a98c:	pop    r12
    a98e:	pop    r13
    a990:	pop    r14
    a992:	pop    r15
    a994:	jmp    2690 <__fprintf_chk@plt>
    a999:	nop    DWORD PTR [rax+0x0]
    a9a0:	mov    r13,QWORD PTR [rbx+0x8]
    a9a4:	mov    r12,QWORD PTR [rbx]
    a9a7:	mov    edx,0x5
    a9ac:	xor    edi,edi
    a9ae:	lea    rsi,[rip+0x2afa]        # d4af <quoting_style_vals@@Base+0x4f>
    a9b5:	call   2440 <dcgettext@plt>
    a9ba:	add    rsp,0x38
    a9be:	mov    r8,r13
    a9c1:	mov    rcx,r12
    a9c4:	pop    rbx
    a9c5:	mov    rdx,rax
    a9c8:	mov    rdi,rbp
    a9cb:	mov    esi,0x1
    a9d0:	pop    rbp
    a9d1:	xor    eax,eax
    a9d3:	pop    r12
    a9d5:	pop    r13
    a9d7:	pop    r14
    a9d9:	pop    r15
    a9db:	jmp    2690 <__fprintf_chk@plt>
    a9e0:	mov    r14,QWORD PTR [rbx+0x10]
    a9e4:	mov    r13,QWORD PTR [rbx+0x8]
    a9e8:	mov    edx,0x5
    a9ed:	xor    edi,edi
    a9ef:	mov    r12,QWORD PTR [rbx]
    a9f2:	lea    rsi,[rip+0x2acd]        # d4c6 <quoting_style_vals@@Base+0x66>
    a9f9:	call   2440 <dcgettext@plt>
    a9fe:	add    rsp,0x38
    aa02:	mov    r9,r14
    aa05:	mov    r8,r13
    aa08:	pop    rbx
    aa09:	mov    rdx,rax
    aa0c:	mov    rcx,r12
    aa0f:	mov    rdi,rbp
    aa12:	mov    esi,0x1
    aa17:	pop    rbp
    aa18:	xor    eax,eax
    aa1a:	pop    r12
    aa1c:	pop    r13
    aa1e:	pop    r14
    aa20:	pop    r15
    aa22:	jmp    2690 <__fprintf_chk@plt>
    aa27:	nop    WORD PTR [rax+rax*1+0x0]
    aa30:	mov    edx,0x5
    aa35:	xor    edi,edi
    aa37:	mov    r15,QWORD PTR [rbx+0x18]
    aa3b:	mov    r14,QWORD PTR [rbx+0x10]
    aa3f:	lea    rsi,[rip+0x2bb2]        # d5f8 <quoting_style_vals@@Base+0x198>
    aa46:	mov    r13,QWORD PTR [rbx+0x8]
    aa4a:	mov    r12,QWORD PTR [rbx]
    aa4d:	call   2440 <dcgettext@plt>
    aa52:	sub    rsp,0x8
    aa56:	mov    rdx,rax
    aa59:	push   r15
    aa5b:	mov    r9,r14
    aa5e:	mov    r8,r13
    aa61:	mov    rcx,r12
    aa64:	mov    rdi,rbp
    aa67:	mov    esi,0x1
    aa6c:	xor    eax,eax
    aa6e:	call   2690 <__fprintf_chk@plt>
    aa73:	pop    rax
    aa74:	pop    rdx
    aa75:	add    rsp,0x38
    aa79:	pop    rbx
    aa7a:	pop    rbp
    aa7b:	pop    r12
    aa7d:	pop    r13
    aa7f:	pop    r14
    aa81:	pop    r15
    aa83:	ret    
    aa84:	nop    DWORD PTR [rax+0x0]
    aa88:	mov    rcx,QWORD PTR [rbx+0x20]
    aa8c:	mov    edx,0x5
    aa91:	xor    edi,edi
    aa93:	mov    r15,QWORD PTR [rbx+0x18]
    aa97:	lea    rsi,[rip+0x2b7a]        # d618 <quoting_style_vals@@Base+0x1b8>
    aa9e:	mov    r14,QWORD PTR [rbx+0x10]
    aaa2:	mov    r13,QWORD PTR [rbx+0x8]
    aaa6:	mov    QWORD PTR [rsp+0x8],rcx
    aaab:	mov    r12,QWORD PTR [rbx]
    aaae:	call   2440 <dcgettext@plt>
    aab3:	mov    rcx,QWORD PTR [rsp+0x8]
    aab8:	mov    rdx,rax
    aabb:	push   rcx
    aabc:	jmp    aa59 <__ctype_b_loc@plt+0x8389>
    aabe:	xchg   ax,ax
    aac0:	mov    r8,QWORD PTR [rbx+0x28]
    aac4:	mov    rcx,QWORD PTR [rbx+0x20]
    aac8:	mov    edx,0x5
    aacd:	xor    edi,edi
    aacf:	lea    rsi,[rip+0x2b6a]        # d640 <quoting_style_vals@@Base+0x1e0>
    aad6:	mov    r15,QWORD PTR [rbx+0x18]
    aada:	mov    r14,QWORD PTR [rbx+0x10]
    aade:	mov    r13,QWORD PTR [rbx+0x8]
    aae2:	mov    r12,QWORD PTR [rbx]
    aae5:	mov    QWORD PTR [rsp+0x10],r8
    aaea:	mov    QWORD PTR [rsp+0x8],rcx
    aaef:	call   2440 <dcgettext@plt>
    aaf4:	sub    rsp,0x8
    aaf8:	mov    rdx,rax
    aafb:	mov    r8,QWORD PTR [rsp+0x18]
    ab00:	mov    r9,r14
    ab03:	mov    rdi,rbp
    ab06:	mov    esi,0x1
    ab0b:	xor    eax,eax
    ab0d:	push   r8
    ab0f:	mov    rcx,QWORD PTR [rsp+0x18]
    ab14:	mov    r8,r13
    ab17:	push   rcx
    ab18:	mov    rcx,r12
    ab1b:	push   r15
    ab1d:	call   2690 <__fprintf_chk@plt>
    ab22:	add    rsp,0x20
    ab26:	add    rsp,0x38
    ab2a:	pop    rbx
    ab2b:	pop    rbp
    ab2c:	pop    r12
    ab2e:	pop    r13
    ab30:	pop    r14
    ab32:	pop    r15
    ab34:	ret    
    ab35:	nop    DWORD PTR [rax]
    ab38:	mov    r9,QWORD PTR [rbx+0x30]
    ab3c:	mov    r8,QWORD PTR [rbx+0x28]
    ab40:	mov    edx,0x5
    ab45:	xor    edi,edi
    ab47:	mov    rcx,QWORD PTR [rbx+0x20]
    ab4b:	lea    rsi,[rip+0x2b16]        # d668 <quoting_style_vals@@Base+0x208>
    ab52:	mov    r15,QWORD PTR [rbx+0x18]
    ab56:	mov    r14,QWORD PTR [rbx+0x10]
    ab5a:	mov    r13,QWORD PTR [rbx+0x8]
    ab5e:	mov    QWORD PTR [rsp+0x18],r9
    ab63:	mov    QWORD PTR [rsp+0x10],r8
    ab68:	mov    r12,QWORD PTR [rbx]
    ab6b:	mov    QWORD PTR [rsp+0x8],rcx
    ab70:	call   2440 <dcgettext@plt>
    ab75:	mov    r9,QWORD PTR [rsp+0x18]
    ab7a:	mov    rdx,rax
    ab7d:	push   r9
    ab7f:	jmp    aafb <__ctype_b_loc@plt+0x842b>
    ab84:	mov    r11,QWORD PTR [rbx+0x40]
    ab88:	mov    r10,QWORD PTR [rbx+0x38]
    ab8c:	mov    edx,0x5
    ab91:	lea    rsi,[rip+0x2b68]        # d700 <quoting_style_vals@@Base+0x2a0>
    ab98:	mov    r9,QWORD PTR [rbx+0x30]
    ab9c:	mov    r8,QWORD PTR [rbx+0x28]
    aba0:	mov    rcx,QWORD PTR [rbx+0x20]
    aba4:	mov    r15,QWORD PTR [rbx+0x18]
    aba8:	mov    QWORD PTR [rsp+0x28],r11
    abad:	mov    r14,QWORD PTR [rbx+0x10]
    abb1:	mov    r13,QWORD PTR [rbx+0x8]
    abb5:	mov    QWORD PTR [rsp+0x20],r10
    abba:	mov    QWORD PTR [rsp+0x18],r9
    abbf:	mov    r12,QWORD PTR [rbx]
    abc2:	mov    QWORD PTR [rsp+0x10],r8
    abc7:	mov    QWORD PTR [rsp+0x8],rcx
    abcc:	jmp    a940 <__ctype_b_loc@plt+0x8270>
    abd1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    abdc:	nop    DWORD PTR [rax+0x0]
    abe0:	endbr64 
    abe4:	xor    r9d,r9d
    abe7:	cmp    QWORD PTR [r8],0x0
    abeb:	je     abfb <__ctype_b_loc@plt+0x852b>
    abed:	nop    DWORD PTR [rax]
    abf0:	add    r9,0x1
    abf4:	cmp    QWORD PTR [r8+r9*8],0x0
    abf9:	jne    abf0 <__ctype_b_loc@plt+0x8520>
    abfb:	jmp    a790 <__ctype_b_loc@plt+0x80c0>
    ac00:	endbr64 
    ac04:	sub    rsp,0x68
    ac08:	mov    r11,r8
    ac0b:	xor    r9d,r9d
    ac0e:	mov    rax,QWORD PTR fs:0x28
    ac17:	mov    QWORD PTR [rsp+0x58],rax
    ac1c:	xor    eax,eax
    ac1e:	mov    r8,rsp
    ac21:	jmp    ac4b <__ctype_b_loc@plt+0x857b>
    ac23:	nop    DWORD PTR [rax+rax*1+0x0]
    ac28:	mov    r10d,eax
    ac2b:	add    eax,0x8
    ac2e:	add    r10,QWORD PTR [r11+0x10]
    ac32:	mov    DWORD PTR [r11],eax
    ac35:	mov    rax,QWORD PTR [r10]
    ac38:	mov    QWORD PTR [r8+r9*8],rax
    ac3c:	test   rax,rax
    ac3f:	je     ac70 <__ctype_b_loc@plt+0x85a0>
    ac41:	add    r9,0x1
    ac45:	cmp    r9,0xa
    ac49:	je     ac70 <__ctype_b_loc@plt+0x85a0>
    ac4b:	mov    eax,DWORD PTR [r11]
    ac4e:	cmp    eax,0x2f
    ac51:	jbe    ac28 <__ctype_b_loc@plt+0x8558>
    ac53:	mov    r10,QWORD PTR [r11+0x8]
    ac57:	lea    rax,[r10+0x8]
    ac5b:	mov    QWORD PTR [r11+0x8],rax
    ac5f:	mov    rax,QWORD PTR [r10]
    ac62:	mov    QWORD PTR [r8+r9*8],rax
    ac66:	test   rax,rax
    ac69:	jne    ac41 <__ctype_b_loc@plt+0x8571>
    ac6b:	nop    DWORD PTR [rax+rax*1+0x0]
    ac70:	call   a790 <__ctype_b_loc@plt+0x80c0>
    ac75:	mov    rax,QWORD PTR [rsp+0x58]
    ac7a:	xor    rax,QWORD PTR fs:0x28
    ac83:	jne    ac8a <__ctype_b_loc@plt+0x85ba>
    ac85:	add    rsp,0x68
    ac89:	ret    
    ac8a:	call   2470 <__stack_chk_fail@plt>
    ac8f:	nop
    ac90:	endbr64 
    ac94:	push   rbx
    ac95:	mov    r10d,0x20
    ac9b:	sub    rsp,0xb0
    aca2:	mov    QWORD PTR [rsp+0xa0],r8
    acaa:	lea    r11,[rsp+0xc0]
    acb2:	lea    r8,[rsp+0x20]
    acb7:	mov    QWORD PTR [rsp+0xa8],r9
    acbf:	xor    r9d,r9d
    acc2:	mov    rax,QWORD PTR fs:0x28
    accb:	mov    QWORD PTR [rsp+0x78],rax
    acd0:	xor    eax,eax
    acd2:	lea    rax,[rsp+0xc0]
    acda:	mov    DWORD PTR [rsp+0x8],0x20
    ace2:	mov    QWORD PTR [rsp+0x10],rax
    ace7:	lea    rax,[rsp+0x80]
    acef:	mov    QWORD PTR [rsp+0x18],rax
    acf4:	mov    rbx,rax
    acf7:	jmp    ad20 <__ctype_b_loc@plt+0x8650>
    acf9:	nop    DWORD PTR [rax+0x0]
    ad00:	mov    eax,r10d
    ad03:	add    r10d,0x8
    ad07:	add    rax,rbx
    ad0a:	mov    rax,QWORD PTR [rax]
    ad0d:	mov    QWORD PTR [r8+r9*8],rax
    ad11:	test   rax,rax
    ad14:	je     ad40 <__ctype_b_loc@plt+0x8670>
    ad16:	add    r9,0x1
    ad1a:	cmp    r9,0xa
    ad1e:	je     ad40 <__ctype_b_loc@plt+0x8670>
    ad20:	cmp    r10d,0x2f
    ad24:	jbe    ad00 <__ctype_b_loc@plt+0x8630>
    ad26:	mov    rax,r11
    ad29:	add    r11,0x8
    ad2d:	mov    rax,QWORD PTR [rax]
    ad30:	mov    QWORD PTR [r8+r9*8],rax
    ad34:	test   rax,rax
    ad37:	jne    ad16 <__ctype_b_loc@plt+0x8646>
    ad39:	nop    DWORD PTR [rax+0x0]
    ad40:	call   a790 <__ctype_b_loc@plt+0x80c0>
    ad45:	mov    rax,QWORD PTR [rsp+0x78]
    ad4a:	xor    rax,QWORD PTR fs:0x28
    ad53:	jne    ad5e <__ctype_b_loc@plt+0x868e>
    ad55:	add    rsp,0xb0
    ad5c:	pop    rbx
    ad5d:	ret    
    ad5e:	call   2470 <__stack_chk_fail@plt>
    ad63:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    ad6e:	xchg   ax,ax
    ad70:	endbr64 
    ad74:	push   rbp
    ad75:	mov    edx,0x5
    ad7a:	lea    rsi,[rip+0x2761]        # d4e2 <quoting_style_vals@@Base+0x82>
    ad81:	xor    edi,edi
    ad83:	call   2440 <dcgettext@plt>
    ad88:	lea    rdx,[rip+0x2768]        # d4f7 <quoting_style_vals@@Base+0x97>
    ad8f:	mov    edi,0x1
    ad94:	mov    rsi,rax
    ad97:	xor    eax,eax
    ad99:	call   2600 <__printf_chk@plt>
    ad9e:	mov    edx,0x5
    ada3:	lea    rsi,[rip+0x2763]        # d50d <quoting_style_vals@@Base+0xad>
    adaa:	xor    edi,edi
    adac:	call   2440 <dcgettext@plt>
    adb1:	lea    rcx,[rip+0x1960]        # c718 <_IO_stdin_used@@Base+0x718>
    adb8:	mov    edi,0x1
    adbd:	lea    rdx,[rip+0x12ce]        # c092 <_IO_stdin_used@@Base+0x92>
    adc4:	mov    rsi,rax
    adc7:	xor    eax,eax
    adc9:	call   2600 <__printf_chk@plt>
    adce:	mov    rbp,QWORD PTR [rip+0x62d3]        # 110a8 <stdout@@GLIBC_2.2.5>
    add5:	xor    edi,edi
    add7:	lea    rsi,[rip+0x2962]        # d740 <quoting_style_vals@@Base+0x2e0>
    adde:	mov    edx,0x5
    ade3:	call   2440 <dcgettext@plt>
    ade8:	mov    rsi,rbp
    adeb:	pop    rbp
    adec:	mov    rdi,rax
    adef:	jmp    2520 <fputs_unlocked@plt>
    adf4:	nop    WORD PTR cs:[rax+rax*1+0x0]
    adfe:	xchg   ax,ax
    ae00:	endbr64 
    ae04:	push   rbx
    ae05:	mov    rbx,rdi
    ae08:	call   2580 <malloc@plt>
    ae0d:	test   rax,rax
    ae10:	jne    ae17 <__ctype_b_loc@plt+0x8747>
    ae12:	test   rbx,rbx
    ae15:	jne    ae19 <__ctype_b_loc@plt+0x8749>
    ae17:	pop    rbx
    ae18:	ret    
    ae19:	call   b070 <__ctype_b_loc@plt+0x89a0>
    ae1e:	xchg   ax,ax
    ae20:	endbr64 
    ae24:	mov    rax,rdi
    ae27:	mul    rsi
    ae2a:	mov    rdi,rax
    ae2d:	seto   al
    ae30:	test   rdi,rdi
    ae33:	js     ae3f <__ctype_b_loc@plt+0x876f>
    ae35:	movzx  eax,al
    ae38:	test   rax,rax
    ae3b:	jne    ae3f <__ctype_b_loc@plt+0x876f>
    ae3d:	jmp    ae00 <__ctype_b_loc@plt+0x8730>
    ae3f:	push   rax
    ae40:	call   b070 <__ctype_b_loc@plt+0x89a0>
    ae45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    ae50:	endbr64 
    ae54:	jmp    ae00 <__ctype_b_loc@plt+0x8730>
    ae56:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ae60:	endbr64 
    ae64:	push   rbx
    ae65:	mov    rbx,rsi
    ae68:	test   rsi,rsi
    ae6b:	jne    ae72 <__ctype_b_loc@plt+0x87a2>
    ae6d:	test   rdi,rdi
    ae70:	jne    ae90 <__ctype_b_loc@plt+0x87c0>
    ae72:	mov    rsi,rbx
    ae75:	call   25d0 <realloc@plt>
    ae7a:	test   rax,rax
    ae7d:	jne    ae84 <__ctype_b_loc@plt+0x87b4>
    ae7f:	test   rbx,rbx
    ae82:	jne    ae99 <__ctype_b_loc@plt+0x87c9>
    ae84:	pop    rbx
    ae85:	ret    
    ae86:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ae90:	call   2390 <free@plt>
    ae95:	xor    eax,eax
    ae97:	pop    rbx
    ae98:	ret    
    ae99:	call   b070 <__ctype_b_loc@plt+0x89a0>
    ae9e:	xchg   ax,ax
    aea0:	endbr64 
    aea4:	mov    rax,rsi
    aea7:	mul    rdx
    aeaa:	mov    rsi,rax
    aead:	seto   al
    aeb0:	test   rsi,rsi
    aeb3:	js     aebf <__ctype_b_loc@plt+0x87ef>
    aeb5:	movzx  eax,al
    aeb8:	test   rax,rax
    aebb:	jne    aebf <__ctype_b_loc@plt+0x87ef>
    aebd:	jmp    ae60 <__ctype_b_loc@plt+0x8790>
    aebf:	push   rax
    aec0:	call   b070 <__ctype_b_loc@plt+0x89a0>
    aec5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    aed0:	endbr64 
    aed4:	mov    r9,rsi
    aed7:	mov    r8,rdx
    aeda:	mov    rsi,QWORD PTR [rsi]
    aedd:	test   rdi,rdi
    aee0:	je     af10 <__ctype_b_loc@plt+0x8840>
    aee2:	movabs rax,0x5555555555555554
    aeec:	xor    edx,edx
    aeee:	div    r8
    aef1:	cmp    rax,rsi
    aef4:	jbe    af2b <__ctype_b_loc@plt+0x885b>
    aef6:	mov    rax,rsi
    aef9:	shr    rax,1
    aefc:	lea    rsi,[rax+rsi*1+0x1]
    af01:	mov    QWORD PTR [r9],rsi
    af04:	imul   rsi,r8
    af08:	jmp    ae60 <__ctype_b_loc@plt+0x8790>
    af0d:	nop    DWORD PTR [rax]
    af10:	test   rsi,rsi
    af13:	je     af38 <__ctype_b_loc@plt+0x8868>
    af15:	mov    rax,rsi
    af18:	mul    r8
    af1b:	seto   dl
    af1e:	movzx  edx,dl
    af21:	test   rax,rax
    af24:	js     af2b <__ctype_b_loc@plt+0x885b>
    af26:	test   rdx,rdx
    af29:	je     af01 <__ctype_b_loc@plt+0x8831>
    af2b:	push   rax
    af2c:	call   b070 <__ctype_b_loc@plt+0x89a0>
    af31:	nop    DWORD PTR [rax+0x0]
    af38:	xor    edx,edx
    af3a:	mov    eax,0x80
    af3f:	xor    ecx,ecx
    af41:	div    r8
    af44:	cmp    r8,0x80
    af4b:	seta   cl
    af4e:	lea    rsi,[rcx+rax*1]
    af52:	jmp    af15 <__ctype_b_loc@plt+0x8845>
    af54:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    af5f:	nop
    af60:	endbr64 
    af64:	mov    rax,rsi
    af67:	mov    rsi,QWORD PTR [rsi]
    af6a:	test   rdi,rdi
    af6d:	je     af98 <__ctype_b_loc@plt+0x88c8>
    af6f:	movabs rdx,0x5555555555555553
    af79:	cmp    rsi,rdx
    af7c:	ja     afb2 <__ctype_b_loc@plt+0x88e2>
    af7e:	mov    rdx,rsi
    af81:	shr    rdx,1
    af84:	lea    rsi,[rdx+rsi*1+0x1]
    af89:	mov    QWORD PTR [rax],rsi
    af8c:	jmp    ae60 <__ctype_b_loc@plt+0x8790>
    af91:	nop    DWORD PTR [rax+0x0]
    af98:	test   rsi,rsi
    af9b:	jne    afb0 <__ctype_b_loc@plt+0x88e0>
    af9d:	mov    esi,0x80
    afa2:	mov    QWORD PTR [rax],rsi
    afa5:	jmp    ae60 <__ctype_b_loc@plt+0x8790>
    afaa:	nop    WORD PTR [rax+rax*1+0x0]
    afb0:	jns    af89 <__ctype_b_loc@plt+0x88b9>
    afb2:	push   rax
    afb3:	call   b070 <__ctype_b_loc@plt+0x89a0>
    afb8:	nop    DWORD PTR [rax+rax*1+0x0]
    afc0:	endbr64 
    afc4:	push   r12
    afc6:	mov    r12,rdi
    afc9:	call   ae00 <__ctype_b_loc@plt+0x8730>
    afce:	mov    rdx,r12
    afd1:	xor    esi,esi
    afd3:	pop    r12
    afd5:	mov    rdi,rax
    afd8:	jmp    24e0 <memset@plt>
    afdd:	nop    DWORD PTR [rax]
    afe0:	endbr64 
    afe4:	mov    rax,rdi
    afe7:	sub    rsp,0x8
    afeb:	mul    rsi
    afee:	seto   dl
    aff1:	test   rax,rax
    aff4:	js     b00d <__ctype_b_loc@plt+0x893d>
    aff6:	movzx  edx,dl
    aff9:	test   rdx,rdx
    affc:	jne    b00d <__ctype_b_loc@plt+0x893d>
    affe:	call   2530 <calloc@plt>
    b003:	test   rax,rax
    b006:	je     b00d <__ctype_b_loc@plt+0x893d>
    b008:	add    rsp,0x8
    b00c:	ret    
    b00d:	call   b070 <__ctype_b_loc@plt+0x89a0>
    b012:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    b01d:	nop    DWORD PTR [rax]
    b020:	endbr64 
    b024:	push   r12
    b026:	mov    r12,rsi
    b029:	push   rbp
    b02a:	mov    rbp,rdi
    b02d:	mov    rdi,rsi
    b030:	sub    rsp,0x8
    b034:	call   ae00 <__ctype_b_loc@plt+0x8730>
    b039:	add    rsp,0x8
    b03d:	mov    rdx,r12
    b040:	mov    rsi,rbp
    b043:	mov    rdi,rax
    b046:	pop    rbp
    b047:	pop    r12
    b049:	jmp    2560 <memcpy@plt>
    b04e:	xchg   ax,ax
    b050:	endbr64 
    b054:	push   rbp
    b055:	mov    rbp,rdi
    b058:	call   2460 <strlen@plt>
    b05d:	mov    rdi,rbp
    b060:	pop    rbp
    b061:	lea    rsi,[rax+0x1]
    b065:	jmp    b020 <__ctype_b_loc@plt+0x8950>
    b067:	nop    WORD PTR [rax+rax*1+0x0]
    b070:	endbr64 
    b074:	push   rax
    b075:	pop    rax
    b076:	mov    edx,0x5
    b07b:	lea    rsi,[rip+0x276d]        # d7ef <version_etc_copyright@@Base+0x2f>
    b082:	xor    edi,edi
    b084:	sub    rsp,0x8
    b088:	call   2440 <dcgettext@plt>
    b08d:	mov    edi,DWORD PTR [rip+0x5f8d]        # 11020 <exit_failure@@Base>
    b093:	lea    rdx,[rip+0x1bcb]        # cc65 <_IO_stdin_used@@Base+0xc65>
    b09a:	xor    esi,esi
    b09c:	mov    rcx,rax
    b09f:	xor    eax,eax
    b0a1:	call   2620 <error@plt>
    b0a6:	call   23a0 <abort@plt>
    b0ab:	nop    DWORD PTR [rax+rax*1+0x0]
    b0b0:	endbr64 
    b0b4:	push   r12
    b0b6:	push   rbp
    b0b7:	mov    rbp,rdi
    b0ba:	push   rbx
    b0bb:	call   2570 <fileno@plt>
    b0c0:	mov    rdi,rbp
    b0c3:	test   eax,eax
    b0c5:	js     b11f <__ctype_b_loc@plt+0x8a4f>
    b0c7:	call   25b0 <__freading@plt>
    b0cc:	test   eax,eax
    b0ce:	jne    b100 <__ctype_b_loc@plt+0x8a30>
    b0d0:	mov    rdi,rbp
    b0d3:	call   b2b0 <__ctype_b_loc@plt+0x8be0>
    b0d8:	test   eax,eax
    b0da:	je     b11c <__ctype_b_loc@plt+0x8a4c>
    b0dc:	call   23b0 <__errno_location@plt>
    b0e1:	mov    rdi,rbp
    b0e4:	mov    r12d,DWORD PTR [rax]
    b0e7:	mov    rbx,rax
    b0ea:	call   2420 <fclose@plt>
    b0ef:	test   r12d,r12d
    b0f2:	jne    b130 <__ctype_b_loc@plt+0x8a60>
    b0f4:	pop    rbx
    b0f5:	pop    rbp
    b0f6:	pop    r12
    b0f8:	ret    
    b0f9:	nop    DWORD PTR [rax+0x0]
    b100:	mov    rdi,rbp
    b103:	call   2570 <fileno@plt>
    b108:	xor    esi,esi
    b10a:	mov    edx,0x1
    b10f:	mov    edi,eax
    b111:	call   24d0 <lseek@plt>
    b116:	cmp    rax,0xffffffffffffffff
    b11a:	jne    b0d0 <__ctype_b_loc@plt+0x8a00>
    b11c:	mov    rdi,rbp
    b11f:	pop    rbx
    b120:	pop    rbp
    b121:	pop    r12
    b123:	jmp    2420 <fclose@plt>
    b128:	nop    DWORD PTR [rax+rax*1+0x0]
    b130:	mov    DWORD PTR [rbx],r12d
    b133:	mov    eax,0xffffffff
    b138:	jmp    b0f4 <__ctype_b_loc@plt+0x8a24>
    b13a:	nop    WORD PTR [rax+rax*1+0x0]
    b140:	endbr64 
    b144:	push   r13
    b146:	push   r12
    b148:	push   rbp
    b149:	mov    ebp,edi
    b14b:	sub    rsp,0x50
    b14f:	mov    QWORD PTR [rsp+0x30],rdx
    b154:	mov    QWORD PTR [rsp+0x38],rcx
    b159:	mov    rax,QWORD PTR fs:0x28
    b162:	mov    QWORD PTR [rsp+0x18],rax
    b167:	xor    eax,eax
    b169:	lea    rax,[rsp+0x70]
    b16e:	mov    DWORD PTR [rsp],0x10
    b175:	mov    QWORD PTR [rsp+0x8],rax
    b17a:	lea    rax,[rsp+0x20]
    b17f:	mov    QWORD PTR [rsp+0x10],rax
    b184:	cmp    esi,0x406
    b18a:	jne    b250 <__ctype_b_loc@plt+0x8b80>
    b190:	mov    r13d,DWORD PTR [rax+0x10]
    b194:	mov    eax,DWORD PTR [rip+0x60de]        # 11278 <program_name@@Base+0x158>
    b19a:	mov    DWORD PTR [rsp],0x18
    b1a1:	mov    edx,r13d
    b1a4:	test   eax,eax
    b1a6:	js     b1e8 <__ctype_b_loc@plt+0x8b18>
    b1a8:	xor    eax,eax
    b1aa:	call   23f0 <fcntl@plt>
    b1af:	mov    r12d,eax
    b1b2:	test   eax,eax
    b1b4:	js     b270 <__ctype_b_loc@plt+0x8ba0>
    b1ba:	mov    DWORD PTR [rip+0x60b4],0x1        # 11278 <program_name@@Base+0x158>
    b1c4:	mov    rax,QWORD PTR [rsp+0x18]
    b1c9:	xor    rax,QWORD PTR fs:0x28
    b1d2:	jne    b2a6 <__ctype_b_loc@plt+0x8bd6>
    b1d8:	add    rsp,0x50
    b1dc:	mov    eax,r12d
    b1df:	pop    rbp
    b1e0:	pop    r12
    b1e2:	pop    r13
    b1e4:	ret    
    b1e5:	nop    DWORD PTR [rax]
    b1e8:	xor    esi,esi
    b1ea:	xor    eax,eax
    b1ec:	call   b140 <__ctype_b_loc@plt+0x8a70>
    b1f1:	mov    r12d,eax
    b1f4:	test   eax,eax
    b1f6:	js     b1c4 <__ctype_b_loc@plt+0x8af4>
    b1f8:	cmp    DWORD PTR [rip+0x6079],0xffffffff        # 11278 <program_name@@Base+0x158>
    b1ff:	jne    b1c4 <__ctype_b_loc@plt+0x8af4>
    b201:	xor    eax,eax
    b203:	mov    esi,0x1
    b208:	mov    edi,r12d
    b20b:	call   23f0 <fcntl@plt>
    b210:	test   eax,eax
    b212:	js     b22d <__ctype_b_loc@plt+0x8b5d>
    b214:	or     eax,0x1
    b217:	mov    esi,0x2
    b21c:	mov    edi,r12d
    b21f:	mov    edx,eax
    b221:	xor    eax,eax
    b223:	call   23f0 <fcntl@plt>
    b228:	cmp    eax,0xffffffff
    b22b:	jne    b1c4 <__ctype_b_loc@plt+0x8af4>
    b22d:	call   23b0 <__errno_location@plt>
    b232:	mov    edi,r12d
    b235:	mov    r12d,0xffffffff
    b23b:	mov    r13d,DWORD PTR [rax]
    b23e:	mov    rbp,rax
    b241:	call   24f0 <close@plt>
    b246:	mov    DWORD PTR [rbp+0x0],r13d
    b24a:	jmp    b1c4 <__ctype_b_loc@plt+0x8af4>
    b24f:	nop
    b250:	mov    rax,QWORD PTR [rsp+0x10]
    b255:	mov    rdx,QWORD PTR [rax+0x10]
    b259:	xor    eax,eax
    b25b:	call   23f0 <fcntl@plt>
    b260:	mov    r12d,eax
    b263:	jmp    b1c4 <__ctype_b_loc@plt+0x8af4>
    b268:	nop    DWORD PTR [rax+rax*1+0x0]
    b270:	call   23b0 <__errno_location@plt>
    b275:	cmp    DWORD PTR [rax],0x16
    b278:	jne    b1ba <__ctype_b_loc@plt+0x8aea>
    b27e:	mov    edx,r13d
    b281:	xor    esi,esi
    b283:	mov    edi,ebp
    b285:	xor    eax,eax
    b287:	call   b140 <__ctype_b_loc@plt+0x8a70>
    b28c:	mov    r12d,eax
    b28f:	test   eax,eax
    b291:	js     b1c4 <__ctype_b_loc@plt+0x8af4>
    b297:	mov    DWORD PTR [rip+0x5fd7],0xffffffff        # 11278 <program_name@@Base+0x158>
    b2a1:	jmp    b201 <__ctype_b_loc@plt+0x8b31>
    b2a6:	call   2470 <__stack_chk_fail@plt>
    b2ab:	nop    DWORD PTR [rax+rax*1+0x0]
    b2b0:	endbr64 
    b2b4:	push   rbp
    b2b5:	mov    rbp,rdi
    b2b8:	test   rdi,rdi
    b2bb:	je     b2cf <__ctype_b_loc@plt+0x8bff>
    b2bd:	call   25b0 <__freading@plt>
    b2c2:	test   eax,eax
    b2c4:	je     b2cf <__ctype_b_loc@plt+0x8bff>
    b2c6:	test   DWORD PTR [rbp+0x0],0x100
    b2cd:	jne    b2e0 <__ctype_b_loc@plt+0x8c10>
    b2cf:	mov    rdi,rbp
    b2d2:	pop    rbp
    b2d3:	jmp    2590 <fflush@plt>
    b2d8:	nop    DWORD PTR [rax+rax*1+0x0]
    b2e0:	mov    rdi,rbp
    b2e3:	mov    edx,0x1
    b2e8:	xor    esi,esi
    b2ea:	call   b300 <__ctype_b_loc@plt+0x8c30>
    b2ef:	mov    rdi,rbp
    b2f2:	pop    rbp
    b2f3:	jmp    2590 <fflush@plt>
    b2f8:	nop    DWORD PTR [rax+rax*1+0x0]
    b300:	endbr64 
    b304:	push   rbp
    b305:	mov    rbp,rdi
    b308:	sub    rsp,0x10
    b30c:	mov    rax,QWORD PTR [rdi+0x8]
    b310:	cmp    QWORD PTR [rdi+0x10],rax
    b314:	je     b328 <__ctype_b_loc@plt+0x8c58>
    b316:	add    rsp,0x10
    b31a:	mov    rdi,rbp
    b31d:	pop    rbp
    b31e:	jmp    2630 <fseeko@plt>
    b323:	nop    DWORD PTR [rax+rax*1+0x0]
    b328:	mov    rax,QWORD PTR [rdi+0x20]
    b32c:	cmp    QWORD PTR [rdi+0x28],rax
    b330:	jne    b316 <__ctype_b_loc@plt+0x8c46>
    b332:	cmp    QWORD PTR [rdi+0x48],0x0
    b337:	jne    b316 <__ctype_b_loc@plt+0x8c46>
    b339:	mov    DWORD PTR [rsp+0xc],edx
    b33d:	mov    QWORD PTR [rsp],rsi
    b341:	call   2570 <fileno@plt>
    b346:	mov    edx,DWORD PTR [rsp+0xc]
    b34a:	mov    rsi,QWORD PTR [rsp]
    b34e:	mov    edi,eax
    b350:	call   24d0 <lseek@plt>
    b355:	cmp    rax,0xffffffffffffffff
    b359:	je     b36e <__ctype_b_loc@plt+0x8c9e>
    b35b:	and    DWORD PTR [rbp+0x0],0xffffffef
    b35f:	mov    QWORD PTR [rbp+0x90],rax
    b366:	xor    eax,eax
    b368:	add    rsp,0x10
    b36c:	pop    rbp
    b36d:	ret    
    b36e:	or     eax,0xffffffff
    b371:	jmp    b368 <__ctype_b_loc@plt+0x8c98>
    b373:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b37d:	nop    DWORD PTR [rax]
    b380:	endbr64 
    b384:	push   r13
    b386:	mov    r13,rsi
    b389:	push   r12
    b38b:	push   rbp
    b38c:	mov    rbp,rdx
    b38f:	push   rbx
    b390:	mov    rbx,rdi
    b393:	sub    rsp,0x18
    b397:	mov    rax,QWORD PTR fs:0x28
    b3a0:	mov    QWORD PTR [rsp+0x8],rax
    b3a5:	xor    eax,eax
    b3a7:	test   rdi,rdi
    b3aa:	lea    rax,[rsp+0x4]
    b3af:	cmove  rbx,rax
    b3b3:	mov    rdi,rbx
    b3b6:	call   2490 <mbrtowc@plt>
    b3bb:	mov    r12,rax
    b3be:	cmp    rax,0xfffffffffffffffd
    b3c2:	jbe    b3c9 <__ctype_b_loc@plt+0x8cf9>
    b3c4:	test   rbp,rbp
    b3c7:	jne    b3f0 <__ctype_b_loc@plt+0x8d20>
    b3c9:	mov    rax,QWORD PTR [rsp+0x8]
    b3ce:	xor    rax,QWORD PTR fs:0x28
    b3d7:	jne    b40a <__ctype_b_loc@plt+0x8d3a>
    b3d9:	add    rsp,0x18
    b3dd:	mov    rax,r12
    b3e0:	pop    rbx
    b3e1:	pop    rbp
    b3e2:	pop    r12
    b3e4:	pop    r13
    b3e6:	ret    
    b3e7:	nop    WORD PTR [rax+rax*1+0x0]
    b3f0:	xor    edi,edi
    b3f2:	call   b480 <__ctype_b_loc@plt+0x8db0>
    b3f7:	test   al,al
    b3f9:	jne    b3c9 <__ctype_b_loc@plt+0x8cf9>
    b3fb:	movzx  eax,BYTE PTR [r13+0x0]
    b400:	mov    r12d,0x1
    b406:	mov    DWORD PTR [rbx],eax
    b408:	jmp    b3c9 <__ctype_b_loc@plt+0x8cf9>
    b40a:	call   2470 <__stack_chk_fail@plt>
    b40f:	nop
    b410:	endbr64 
    b414:	push   r12
    b416:	push   rbp
    b417:	mov    rbp,rdi
    b41a:	push   rbx
    b41b:	call   23e0 <__fpending@plt>
    b420:	mov    ebx,DWORD PTR [rbp+0x0]
    b423:	mov    rdi,rbp
    b426:	mov    r12,rax
    b429:	and    ebx,0x20
    b42c:	call   b0b0 <__ctype_b_loc@plt+0x89e0>
    b431:	test   ebx,ebx
    b433:	jne    b458 <__ctype_b_loc@plt+0x8d88>
    b435:	test   eax,eax
    b437:	je     b44e <__ctype_b_loc@plt+0x8d7e>
    b439:	test   r12,r12
    b43c:	jne    b46e <__ctype_b_loc@plt+0x8d9e>
    b43e:	call   23b0 <__errno_location@plt>
    b443:	cmp    DWORD PTR [rax],0x9
    b446:	setne  al
    b449:	movzx  eax,al
    b44c:	neg    eax
    b44e:	pop    rbx
    b44f:	pop    rbp
    b450:	pop    r12
    b452:	ret    
    b453:	nop    DWORD PTR [rax+rax*1+0x0]
    b458:	test   eax,eax
    b45a:	jne    b46e <__ctype_b_loc@plt+0x8d9e>
    b45c:	call   23b0 <__errno_location@plt>
    b461:	mov    DWORD PTR [rax],0x0
    b467:	mov    eax,0xffffffff
    b46c:	jmp    b44e <__ctype_b_loc@plt+0x8d7e>
    b46e:	mov    eax,0xffffffff
    b473:	jmp    b44e <__ctype_b_loc@plt+0x8d7e>
    b475:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b47f:	nop
    b480:	endbr64 
    b484:	xor    esi,esi
    b486:	sub    rsp,0x8
    b48a:	call   25f0 <setlocale@plt>
    b48f:	mov    rsi,rax
    b492:	mov    eax,0x1
    b497:	test   rsi,rsi
    b49a:	je     b4b9 <__ctype_b_loc@plt+0x8de9>
    b49c:	cmp    BYTE PTR [rsi],0x43
    b49f:	je     b4c0 <__ctype_b_loc@plt+0x8df0>
    b4a1:	mov    ecx,0x6
    b4a6:	lea    rdi,[rip+0x2353]        # d800 <version_etc_copyright@@Base+0x40>
    b4ad:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    b4af:	seta   al
    b4b2:	sbb    al,0x0
    b4b4:	test   al,al
    b4b6:	setne  al
    b4b9:	add    rsp,0x8
    b4bd:	ret    
    b4be:	xchg   ax,ax
    b4c0:	xor    eax,eax
    b4c2:	cmp    BYTE PTR [rsi+0x1],0x0
    b4c6:	jne    b4a1 <__ctype_b_loc@plt+0x8dd1>
    b4c8:	add    rsp,0x8
    b4cc:	ret    
    b4cd:	nop    DWORD PTR [rax]
    b4d0:	endbr64 
    b4d4:	sub    rsp,0x8
    b4d8:	mov    edi,0xe
    b4dd:	call   25a0 <nl_langinfo@plt>
    b4e2:	test   rax,rax
    b4e5:	je     b500 <__ctype_b_loc@plt+0x8e30>
    b4e7:	cmp    BYTE PTR [rax],0x0
    b4ea:	lea    rdx,[rip+0x2315]        # d806 <version_etc_copyright@@Base+0x46>
    b4f1:	cmove  rax,rdx
    b4f5:	add    rsp,0x8
    b4f9:	ret    
    b4fa:	nop    WORD PTR [rax+rax*1+0x0]
    b500:	lea    rax,[rip+0x22ff]        # d806 <version_etc_copyright@@Base+0x46>
    b507:	add    rsp,0x8
    b50b:	ret    
    b50c:	nop    DWORD PTR [rax+0x0]
    b510:	endbr64 
    b514:	push   r15
    b516:	lea    r15,[rip+0x54f3]        # 10a10 <version_etc_copyright@@Base+0x3250>
    b51d:	push   r14
    b51f:	mov    r14,rdx
    b522:	push   r13
    b524:	mov    r13,rsi
    b527:	push   r12
    b529:	mov    r12d,edi
    b52c:	push   rbp
    b52d:	lea    rbp,[rip+0x54e4]        # 10a18 <version_etc_copyright@@Base+0x3258>
    b534:	push   rbx
    b535:	sub    rbp,r15
    b538:	sub    rsp,0x8
    b53c:	call   2000 <__cxa_finalize@plt-0x380>
    b541:	sar    rbp,0x3
    b545:	je     b566 <__ctype_b_loc@plt+0x8e96>
    b547:	xor    ebx,ebx
    b549:	nop    DWORD PTR [rax+0x0]
    b550:	mov    rdx,r14
    b553:	mov    rsi,r13
    b556:	mov    edi,r12d
    b559:	call   QWORD PTR [r15+rbx*8]
    b55d:	add    rbx,0x1
    b561:	cmp    rbp,rbx
    b564:	jne    b550 <__ctype_b_loc@plt+0x8e80>
    b566:	add    rsp,0x8
    b56a:	pop    rbx
    b56b:	pop    rbp
    b56c:	pop    r12
    b56e:	pop    r13
    b570:	pop    r14
    b572:	pop    r15
    b574:	ret    
    b575:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    b580:	endbr64 
    b584:	ret    
    b585:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b58f:	nop
    b590:	endbr64 
    b594:	mov    rdx,QWORD PTR [rip+0x5a6d]        # 11008 <quoting_style_args@@Base+0x448>
    b59b:	xor    esi,esi
    b59d:	jmp    2660 <__cxa_atexit@plt>

Disassembly of section .fini:

000000000000b5a4 <.fini>:
    b5a4:	endbr64 
    b5a8:	sub    rsp,0x8
    b5ac:	add    rsp,0x8
    b5b0:	ret    
