
sort:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	endbr64 
    3004:	sub    rsp,0x8
    3008:	mov    rax,QWORD PTR [rip+0x1afd1]        # 1dfe0 <__gmon_start__>
    300f:	test   rax,rax
    3012:	je     3016 <_init+0x16>
    3014:	call   rax
    3016:	add    rsp,0x8
    301a:	ret    

Disassembly of section .plt:

0000000000003020 <.plt>:
    3020:	push   QWORD PTR [rip+0x1abfa]        # 1dc20 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	bnd jmp QWORD PTR [rip+0x1abfb]        # 1dc28 <_GLOBAL_OFFSET_TABLE_+0x10>
    302d:	nop    DWORD PTR [rax]
    3030:	endbr64 
    3034:	push   0x0
    3039:	bnd jmp 3020 <.plt>
    303f:	nop
    3040:	endbr64 
    3044:	push   0x1
    3049:	bnd jmp 3020 <.plt>
    304f:	nop
    3050:	endbr64 
    3054:	push   0x2
    3059:	bnd jmp 3020 <.plt>
    305f:	nop
    3060:	endbr64 
    3064:	push   0x3
    3069:	bnd jmp 3020 <.plt>
    306f:	nop
    3070:	endbr64 
    3074:	push   0x4
    3079:	bnd jmp 3020 <.plt>
    307f:	nop
    3080:	endbr64 
    3084:	push   0x5
    3089:	bnd jmp 3020 <.plt>
    308f:	nop
    3090:	endbr64 
    3094:	push   0x6
    3099:	bnd jmp 3020 <.plt>
    309f:	nop
    30a0:	endbr64 
    30a4:	push   0x7
    30a9:	bnd jmp 3020 <.plt>
    30af:	nop
    30b0:	endbr64 
    30b4:	push   0x8
    30b9:	bnd jmp 3020 <.plt>
    30bf:	nop
    30c0:	endbr64 
    30c4:	push   0x9
    30c9:	bnd jmp 3020 <.plt>
    30cf:	nop
    30d0:	endbr64 
    30d4:	push   0xa
    30d9:	bnd jmp 3020 <.plt>
    30df:	nop
    30e0:	endbr64 
    30e4:	push   0xb
    30e9:	bnd jmp 3020 <.plt>
    30ef:	nop
    30f0:	endbr64 
    30f4:	push   0xc
    30f9:	bnd jmp 3020 <.plt>
    30ff:	nop
    3100:	endbr64 
    3104:	push   0xd
    3109:	bnd jmp 3020 <.plt>
    310f:	nop
    3110:	endbr64 
    3114:	push   0xe
    3119:	bnd jmp 3020 <.plt>
    311f:	nop
    3120:	endbr64 
    3124:	push   0xf
    3129:	bnd jmp 3020 <.plt>
    312f:	nop
    3130:	endbr64 
    3134:	push   0x10
    3139:	bnd jmp 3020 <.plt>
    313f:	nop
    3140:	endbr64 
    3144:	push   0x11
    3149:	bnd jmp 3020 <.plt>
    314f:	nop
    3150:	endbr64 
    3154:	push   0x12
    3159:	bnd jmp 3020 <.plt>
    315f:	nop
    3160:	endbr64 
    3164:	push   0x13
    3169:	bnd jmp 3020 <.plt>
    316f:	nop
    3170:	endbr64 
    3174:	push   0x14
    3179:	bnd jmp 3020 <.plt>
    317f:	nop
    3180:	endbr64 
    3184:	push   0x15
    3189:	bnd jmp 3020 <.plt>
    318f:	nop
    3190:	endbr64 
    3194:	push   0x16
    3199:	bnd jmp 3020 <.plt>
    319f:	nop
    31a0:	endbr64 
    31a4:	push   0x17
    31a9:	bnd jmp 3020 <.plt>
    31af:	nop
    31b0:	endbr64 
    31b4:	push   0x18
    31b9:	bnd jmp 3020 <.plt>
    31bf:	nop
    31c0:	endbr64 
    31c4:	push   0x19
    31c9:	bnd jmp 3020 <.plt>
    31cf:	nop
    31d0:	endbr64 
    31d4:	push   0x1a
    31d9:	bnd jmp 3020 <.plt>
    31df:	nop
    31e0:	endbr64 
    31e4:	push   0x1b
    31e9:	bnd jmp 3020 <.plt>
    31ef:	nop
    31f0:	endbr64 
    31f4:	push   0x1c
    31f9:	bnd jmp 3020 <.plt>
    31ff:	nop
    3200:	endbr64 
    3204:	push   0x1d
    3209:	bnd jmp 3020 <.plt>
    320f:	nop
    3210:	endbr64 
    3214:	push   0x1e
    3219:	bnd jmp 3020 <.plt>
    321f:	nop
    3220:	endbr64 
    3224:	push   0x1f
    3229:	bnd jmp 3020 <.plt>
    322f:	nop
    3230:	endbr64 
    3234:	push   0x20
    3239:	bnd jmp 3020 <.plt>
    323f:	nop
    3240:	endbr64 
    3244:	push   0x21
    3249:	bnd jmp 3020 <.plt>
    324f:	nop
    3250:	endbr64 
    3254:	push   0x22
    3259:	bnd jmp 3020 <.plt>
    325f:	nop
    3260:	endbr64 
    3264:	push   0x23
    3269:	bnd jmp 3020 <.plt>
    326f:	nop
    3270:	endbr64 
    3274:	push   0x24
    3279:	bnd jmp 3020 <.plt>
    327f:	nop
    3280:	endbr64 
    3284:	push   0x25
    3289:	bnd jmp 3020 <.plt>
    328f:	nop
    3290:	endbr64 
    3294:	push   0x26
    3299:	bnd jmp 3020 <.plt>
    329f:	nop
    32a0:	endbr64 
    32a4:	push   0x27
    32a9:	bnd jmp 3020 <.plt>
    32af:	nop
    32b0:	endbr64 
    32b4:	push   0x28
    32b9:	bnd jmp 3020 <.plt>
    32bf:	nop
    32c0:	endbr64 
    32c4:	push   0x29
    32c9:	bnd jmp 3020 <.plt>
    32cf:	nop
    32d0:	endbr64 
    32d4:	push   0x2a
    32d9:	bnd jmp 3020 <.plt>
    32df:	nop
    32e0:	endbr64 
    32e4:	push   0x2b
    32e9:	bnd jmp 3020 <.plt>
    32ef:	nop
    32f0:	endbr64 
    32f4:	push   0x2c
    32f9:	bnd jmp 3020 <.plt>
    32ff:	nop
    3300:	endbr64 
    3304:	push   0x2d
    3309:	bnd jmp 3020 <.plt>
    330f:	nop
    3310:	endbr64 
    3314:	push   0x2e
    3319:	bnd jmp 3020 <.plt>
    331f:	nop
    3320:	endbr64 
    3324:	push   0x2f
    3329:	bnd jmp 3020 <.plt>
    332f:	nop
    3330:	endbr64 
    3334:	push   0x30
    3339:	bnd jmp 3020 <.plt>
    333f:	nop
    3340:	endbr64 
    3344:	push   0x31
    3349:	bnd jmp 3020 <.plt>
    334f:	nop
    3350:	endbr64 
    3354:	push   0x32
    3359:	bnd jmp 3020 <.plt>
    335f:	nop
    3360:	endbr64 
    3364:	push   0x33
    3369:	bnd jmp 3020 <.plt>
    336f:	nop
    3370:	endbr64 
    3374:	push   0x34
    3379:	bnd jmp 3020 <.plt>
    337f:	nop
    3380:	endbr64 
    3384:	push   0x35
    3389:	bnd jmp 3020 <.plt>
    338f:	nop
    3390:	endbr64 
    3394:	push   0x36
    3399:	bnd jmp 3020 <.plt>
    339f:	nop
    33a0:	endbr64 
    33a4:	push   0x37
    33a9:	bnd jmp 3020 <.plt>
    33af:	nop
    33b0:	endbr64 
    33b4:	push   0x38
    33b9:	bnd jmp 3020 <.plt>
    33bf:	nop
    33c0:	endbr64 
    33c4:	push   0x39
    33c9:	bnd jmp 3020 <.plt>
    33cf:	nop
    33d0:	endbr64 
    33d4:	push   0x3a
    33d9:	bnd jmp 3020 <.plt>
    33df:	nop
    33e0:	endbr64 
    33e4:	push   0x3b
    33e9:	bnd jmp 3020 <.plt>
    33ef:	nop
    33f0:	endbr64 
    33f4:	push   0x3c
    33f9:	bnd jmp 3020 <.plt>
    33ff:	nop
    3400:	endbr64 
    3404:	push   0x3d
    3409:	bnd jmp 3020 <.plt>
    340f:	nop
    3410:	endbr64 
    3414:	push   0x3e
    3419:	bnd jmp 3020 <.plt>
    341f:	nop
    3420:	endbr64 
    3424:	push   0x3f
    3429:	bnd jmp 3020 <.plt>
    342f:	nop
    3430:	endbr64 
    3434:	push   0x40
    3439:	bnd jmp 3020 <.plt>
    343f:	nop
    3440:	endbr64 
    3444:	push   0x41
    3449:	bnd jmp 3020 <.plt>
    344f:	nop
    3450:	endbr64 
    3454:	push   0x42
    3459:	bnd jmp 3020 <.plt>
    345f:	nop
    3460:	endbr64 
    3464:	push   0x43
    3469:	bnd jmp 3020 <.plt>
    346f:	nop
    3470:	endbr64 
    3474:	push   0x44
    3479:	bnd jmp 3020 <.plt>
    347f:	nop
    3480:	endbr64 
    3484:	push   0x45
    3489:	bnd jmp 3020 <.plt>
    348f:	nop
    3490:	endbr64 
    3494:	push   0x46
    3499:	bnd jmp 3020 <.plt>
    349f:	nop
    34a0:	endbr64 
    34a4:	push   0x47
    34a9:	bnd jmp 3020 <.plt>
    34af:	nop
    34b0:	endbr64 
    34b4:	push   0x48
    34b9:	bnd jmp 3020 <.plt>
    34bf:	nop
    34c0:	endbr64 
    34c4:	push   0x49
    34c9:	bnd jmp 3020 <.plt>
    34cf:	nop
    34d0:	endbr64 
    34d4:	push   0x4a
    34d9:	bnd jmp 3020 <.plt>
    34df:	nop
    34e0:	endbr64 
    34e4:	push   0x4b
    34e9:	bnd jmp 3020 <.plt>
    34ef:	nop
    34f0:	endbr64 
    34f4:	push   0x4c
    34f9:	bnd jmp 3020 <.plt>
    34ff:	nop
    3500:	endbr64 
    3504:	push   0x4d
    3509:	bnd jmp 3020 <.plt>
    350f:	nop
    3510:	endbr64 
    3514:	push   0x4e
    3519:	bnd jmp 3020 <.plt>
    351f:	nop
    3520:	endbr64 
    3524:	push   0x4f
    3529:	bnd jmp 3020 <.plt>
    352f:	nop
    3530:	endbr64 
    3534:	push   0x50
    3539:	bnd jmp 3020 <.plt>
    353f:	nop
    3540:	endbr64 
    3544:	push   0x51
    3549:	bnd jmp 3020 <.plt>
    354f:	nop
    3550:	endbr64 
    3554:	push   0x52
    3559:	bnd jmp 3020 <.plt>
    355f:	nop
    3560:	endbr64 
    3564:	push   0x53
    3569:	bnd jmp 3020 <.plt>
    356f:	nop
    3570:	endbr64 
    3574:	push   0x54
    3579:	bnd jmp 3020 <.plt>
    357f:	nop
    3580:	endbr64 
    3584:	push   0x55
    3589:	bnd jmp 3020 <.plt>
    358f:	nop
    3590:	endbr64 
    3594:	push   0x56
    3599:	bnd jmp 3020 <.plt>
    359f:	nop
    35a0:	endbr64 
    35a4:	push   0x57
    35a9:	bnd jmp 3020 <.plt>
    35af:	nop
    35b0:	endbr64 
    35b4:	push   0x58
    35b9:	bnd jmp 3020 <.plt>
    35bf:	nop
    35c0:	endbr64 
    35c4:	push   0x59
    35c9:	bnd jmp 3020 <.plt>
    35cf:	nop
    35d0:	endbr64 
    35d4:	push   0x5a
    35d9:	bnd jmp 3020 <.plt>
    35df:	nop
    35e0:	endbr64 
    35e4:	push   0x5b
    35e9:	bnd jmp 3020 <.plt>
    35ef:	nop
    35f0:	endbr64 
    35f4:	push   0x5c
    35f9:	bnd jmp 3020 <.plt>
    35ff:	nop
    3600:	endbr64 
    3604:	push   0x5d
    3609:	bnd jmp 3020 <.plt>
    360f:	nop
    3610:	endbr64 
    3614:	push   0x5e
    3619:	bnd jmp 3020 <.plt>
    361f:	nop
    3620:	endbr64 
    3624:	push   0x5f
    3629:	bnd jmp 3020 <.plt>
    362f:	nop
    3630:	endbr64 
    3634:	push   0x60
    3639:	bnd jmp 3020 <.plt>
    363f:	nop
    3640:	endbr64 
    3644:	push   0x61
    3649:	bnd jmp 3020 <.plt>
    364f:	nop
    3650:	endbr64 
    3654:	push   0x62
    3659:	bnd jmp 3020 <.plt>
    365f:	nop
    3660:	endbr64 
    3664:	push   0x63
    3669:	bnd jmp 3020 <.plt>
    366f:	nop
    3670:	endbr64 
    3674:	push   0x64
    3679:	bnd jmp 3020 <.plt>
    367f:	nop
    3680:	endbr64 
    3684:	push   0x65
    3689:	bnd jmp 3020 <.plt>
    368f:	nop
    3690:	endbr64 
    3694:	push   0x66
    3699:	bnd jmp 3020 <.plt>
    369f:	nop
    36a0:	endbr64 
    36a4:	push   0x67
    36a9:	bnd jmp 3020 <.plt>
    36af:	nop
    36b0:	endbr64 
    36b4:	push   0x68
    36b9:	bnd jmp 3020 <.plt>
    36bf:	nop
    36c0:	endbr64 
    36c4:	push   0x69
    36c9:	bnd jmp 3020 <.plt>
    36cf:	nop
    36d0:	endbr64 
    36d4:	push   0x6a
    36d9:	bnd jmp 3020 <.plt>
    36df:	nop
    36e0:	endbr64 
    36e4:	push   0x6b
    36e9:	bnd jmp 3020 <.plt>
    36ef:	nop
    36f0:	endbr64 
    36f4:	push   0x6c
    36f9:	bnd jmp 3020 <.plt>
    36ff:	nop
    3700:	endbr64 
    3704:	push   0x6d
    3709:	bnd jmp 3020 <.plt>
    370f:	nop
    3710:	endbr64 
    3714:	push   0x6e
    3719:	bnd jmp 3020 <.plt>
    371f:	nop
    3720:	endbr64 
    3724:	push   0x6f
    3729:	bnd jmp 3020 <.plt>
    372f:	nop
    3730:	endbr64 
    3734:	push   0x70
    3739:	bnd jmp 3020 <.plt>
    373f:	nop
    3740:	endbr64 
    3744:	push   0x71
    3749:	bnd jmp 3020 <.plt>
    374f:	nop
    3750:	endbr64 
    3754:	push   0x72
    3759:	bnd jmp 3020 <.plt>
    375f:	nop
    3760:	endbr64 
    3764:	push   0x73
    3769:	bnd jmp 3020 <.plt>
    376f:	nop

Disassembly of section .plt.got:

0000000000003770 <malloc@plt>:
    3770:	endbr64 
    3774:	bnd jmp QWORD PTR [rip+0x1a86d]        # 1dfe8 <malloc@GLIBC_2.2.5>
    377b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003780 <__cxa_finalize@plt>:
    3780:	endbr64 
    3784:	bnd jmp QWORD PTR [rip+0x1a86d]        # 1dff8 <__cxa_finalize@GLIBC_2.2.5>
    378b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

0000000000003790 <__ctype_toupper_loc@plt>:
    3790:	endbr64 
    3794:	bnd jmp QWORD PTR [rip+0x1a495]        # 1dc30 <__ctype_toupper_loc@GLIBC_2.3>
    379b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037a0 <getenv@plt>:
    37a0:	endbr64 
    37a4:	bnd jmp QWORD PTR [rip+0x1a48d]        # 1dc38 <getenv@GLIBC_2.2.5>
    37ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037b0 <__snprintf_chk@plt>:
    37b0:	endbr64 
    37b4:	bnd jmp QWORD PTR [rip+0x1a485]        # 1dc40 <__snprintf_chk@GLIBC_2.3.4>
    37bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037c0 <raise@plt>:
    37c0:	endbr64 
    37c4:	bnd jmp QWORD PTR [rip+0x1a47d]        # 1dc48 <raise@GLIBC_2.2.5>
    37cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037d0 <free@plt>:
    37d0:	endbr64 
    37d4:	bnd jmp QWORD PTR [rip+0x1a475]        # 1dc50 <free@GLIBC_2.2.5>
    37db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037e0 <pthread_create@plt>:
    37e0:	endbr64 
    37e4:	bnd jmp QWORD PTR [rip+0x1a46d]        # 1dc58 <pthread_create@GLIBC_2.2.5>
    37eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037f0 <pthread_sigmask@plt>:
    37f0:	endbr64 
    37f4:	bnd jmp QWORD PTR [rip+0x1a465]        # 1dc60 <pthread_sigmask@GLIBC_2.2.5>
    37fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003800 <abort@plt>:
    3800:	endbr64 
    3804:	bnd jmp QWORD PTR [rip+0x1a45d]        # 1dc68 <abort@GLIBC_2.2.5>
    380b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003810 <__errno_location@plt>:
    3810:	endbr64 
    3814:	bnd jmp QWORD PTR [rip+0x1a455]        # 1dc70 <__errno_location@GLIBC_2.2.5>
    381b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003820 <unlink@plt>:
    3820:	endbr64 
    3824:	bnd jmp QWORD PTR [rip+0x1a44d]        # 1dc78 <unlink@GLIBC_2.2.5>
    382b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003830 <strncmp@plt>:
    3830:	endbr64 
    3834:	bnd jmp QWORD PTR [rip+0x1a445]        # 1dc80 <strncmp@GLIBC_2.2.5>
    383b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003840 <_exit@plt>:
    3840:	endbr64 
    3844:	bnd jmp QWORD PTR [rip+0x1a43d]        # 1dc88 <_exit@GLIBC_2.2.5>
    384b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003850 <strcpy@plt>:
    3850:	endbr64 
    3854:	bnd jmp QWORD PTR [rip+0x1a435]        # 1dc90 <strcpy@GLIBC_2.2.5>
    385b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003860 <__fpending@plt>:
    3860:	endbr64 
    3864:	bnd jmp QWORD PTR [rip+0x1a42d]        # 1dc98 <__fpending@GLIBC_2.2.5>
    386b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003870 <ferror@plt>:
    3870:	endbr64 
    3874:	bnd jmp QWORD PTR [rip+0x1a425]        # 1dca0 <ferror@GLIBC_2.2.5>
    387b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003880 <qsort@plt>:
    3880:	endbr64 
    3884:	bnd jmp QWORD PTR [rip+0x1a41d]        # 1dca8 <qsort@GLIBC_2.2.5>
    388b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003890 <sigaction@plt>:
    3890:	endbr64 
    3894:	bnd jmp QWORD PTR [rip+0x1a415]        # 1dcb0 <sigaction@GLIBC_2.2.5>
    389b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038a0 <iswcntrl@plt>:
    38a0:	endbr64 
    38a4:	bnd jmp QWORD PTR [rip+0x1a40d]        # 1dcb8 <iswcntrl@GLIBC_2.2.5>
    38ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038b0 <reallocarray@plt>:
    38b0:	endbr64 
    38b4:	bnd jmp QWORD PTR [rip+0x1a405]        # 1dcc0 <reallocarray@GLIBC_2.26>
    38bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038c0 <localeconv@plt>:
    38c0:	endbr64 
    38c4:	bnd jmp QWORD PTR [rip+0x1a3fd]        # 1dcc8 <localeconv@GLIBC_2.2.5>
    38cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038d0 <fcntl@plt>:
    38d0:	endbr64 
    38d4:	bnd jmp QWORD PTR [rip+0x1a3f5]        # 1dcd0 <fcntl@GLIBC_2.2.5>
    38db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038e0 <clearerr_unlocked@plt>:
    38e0:	endbr64 
    38e4:	bnd jmp QWORD PTR [rip+0x1a3ed]        # 1dcd8 <clearerr_unlocked@GLIBC_2.2.5>
    38eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038f0 <write@plt>:
    38f0:	endbr64 
    38f4:	bnd jmp QWORD PTR [rip+0x1a3e5]        # 1dce0 <write@GLIBC_2.2.5>
    38fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003900 <fread_unlocked@plt>:
    3900:	endbr64 
    3904:	bnd jmp QWORD PTR [rip+0x1a3dd]        # 1dce8 <fread_unlocked@GLIBC_2.2.5>
    390b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003910 <textdomain@plt>:
    3910:	endbr64 
    3914:	bnd jmp QWORD PTR [rip+0x1a3d5]        # 1dcf0 <textdomain@GLIBC_2.2.5>
    391b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003920 <pthread_cond_wait@plt>:
    3920:	endbr64 
    3924:	bnd jmp QWORD PTR [rip+0x1a3cd]        # 1dcf8 <pthread_cond_wait@GLIBC_2.3.2>
    392b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003930 <fclose@plt>:
    3930:	endbr64 
    3934:	bnd jmp QWORD PTR [rip+0x1a3c5]        # 1dd00 <fclose@GLIBC_2.2.5>
    393b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003940 <__sched_cpucount@plt>:
    3940:	endbr64 
    3944:	bnd jmp QWORD PTR [rip+0x1a3bd]        # 1dd08 <__sched_cpucount@GLIBC_2.6>
    394b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003950 <bindtextdomain@plt>:
    3950:	endbr64 
    3954:	bnd jmp QWORD PTR [rip+0x1a3b5]        # 1dd10 <bindtextdomain@GLIBC_2.2.5>
    395b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003960 <dcgettext@plt>:
    3960:	endbr64 
    3964:	bnd jmp QWORD PTR [rip+0x1a3ad]        # 1dd18 <dcgettext@GLIBC_2.2.5>
    396b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003970 <__ctype_get_mb_cur_max@plt>:
    3970:	endbr64 
    3974:	bnd jmp QWORD PTR [rip+0x1a3a5]        # 1dd20 <__ctype_get_mb_cur_max@GLIBC_2.2.5>
    397b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003980 <strlen@plt>:
    3980:	endbr64 
    3984:	bnd jmp QWORD PTR [rip+0x1a39d]        # 1dd28 <strlen@GLIBC_2.2.5>
    398b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003990 <__stack_chk_fail@plt>:
    3990:	endbr64 
    3994:	bnd jmp QWORD PTR [rip+0x1a395]        # 1dd30 <__stack_chk_fail@GLIBC_2.4>
    399b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039a0 <getopt_long@plt>:
    39a0:	endbr64 
    39a4:	bnd jmp QWORD PTR [rip+0x1a38d]        # 1dd38 <getopt_long@GLIBC_2.2.5>
    39ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039b0 <dup2@plt>:
    39b0:	endbr64 
    39b4:	bnd jmp QWORD PTR [rip+0x1a385]        # 1dd40 <dup2@GLIBC_2.2.5>
    39bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039c0 <strchr@plt>:
    39c0:	endbr64 
    39c4:	bnd jmp QWORD PTR [rip+0x1a37d]        # 1dd48 <strchr@GLIBC_2.2.5>
    39cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039d0 <pthread_mutex_destroy@plt>:
    39d0:	endbr64 
    39d4:	bnd jmp QWORD PTR [rip+0x1a375]        # 1dd50 <pthread_mutex_destroy@GLIBC_2.2.5>
    39db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039e0 <nanosleep@plt>:
    39e0:	endbr64 
    39e4:	bnd jmp QWORD PTR [rip+0x1a36d]        # 1dd58 <nanosleep@GLIBC_2.2.5>
    39eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039f0 <__overflow@plt>:
    39f0:	endbr64 
    39f4:	bnd jmp QWORD PTR [rip+0x1a365]        # 1dd60 <__overflow@GLIBC_2.2.5>
    39fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a00 <strrchr@plt>:
    3a00:	endbr64 
    3a04:	bnd jmp QWORD PTR [rip+0x1a35d]        # 1dd68 <strrchr@GLIBC_2.2.5>
    3a0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a10 <ftruncate@plt>:
    3a10:	endbr64 
    3a14:	bnd jmp QWORD PTR [rip+0x1a355]        # 1dd70 <ftruncate@GLIBC_2.2.5>
    3a1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a20 <mkostemp@plt>:
    3a20:	endbr64 
    3a24:	bnd jmp QWORD PTR [rip+0x1a34d]        # 1dd78 <mkostemp@GLIBC_2.7>
    3a2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a30 <lseek@plt>:
    3a30:	endbr64 
    3a34:	bnd jmp QWORD PTR [rip+0x1a345]        # 1dd80 <lseek@GLIBC_2.2.5>
    3a3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a40 <__assert_fail@plt>:
    3a40:	endbr64 
    3a44:	bnd jmp QWORD PTR [rip+0x1a33d]        # 1dd88 <__assert_fail@GLIBC_2.2.5>
    3a4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a50 <__strtoul_internal@plt>:
    3a50:	endbr64 
    3a54:	bnd jmp QWORD PTR [rip+0x1a335]        # 1dd90 <__strtoul_internal@GLIBC_2.2.5>
    3a5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a60 <memset@plt>:
    3a60:	endbr64 
    3a64:	bnd jmp QWORD PTR [rip+0x1a32d]        # 1dd98 <memset@GLIBC_2.2.5>
    3a6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a70 <fgetc@plt>:
    3a70:	endbr64 
    3a74:	bnd jmp QWORD PTR [rip+0x1a325]        # 1dda0 <fgetc@GLIBC_2.2.5>
    3a7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a80 <close@plt>:
    3a80:	endbr64 
    3a84:	bnd jmp QWORD PTR [rip+0x1a31d]        # 1dda8 <close@GLIBC_2.2.5>
    3a8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a90 <mbrtoc32@plt>:
    3a90:	endbr64 
    3a94:	bnd jmp QWORD PTR [rip+0x1a315]        # 1ddb0 <mbrtoc32@GLIBC_2.16>
    3a9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003aa0 <pipe@plt>:
    3aa0:	endbr64 
    3aa4:	bnd jmp QWORD PTR [rip+0x1a30d]        # 1ddb8 <pipe@GLIBC_2.2.5>
    3aab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ab0 <posix_fadvise@plt>:
    3ab0:	endbr64 
    3ab4:	bnd jmp QWORD PTR [rip+0x1a305]        # 1ddc0 <posix_fadvise@GLIBC_2.2.5>
    3abb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ac0 <memchr@plt>:
    3ac0:	endbr64 
    3ac4:	bnd jmp QWORD PTR [rip+0x1a2fd]        # 1ddc8 <memchr@GLIBC_2.2.5>
    3acb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ad0 <memcmp@plt>:
    3ad0:	endbr64 
    3ad4:	bnd jmp QWORD PTR [rip+0x1a2f5]        # 1ddd0 <memcmp@GLIBC_2.2.5>
    3adb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ae0 <pthread_cond_signal@plt>:
    3ae0:	endbr64 
    3ae4:	bnd jmp QWORD PTR [rip+0x1a2ed]        # 1ddd8 <pthread_cond_signal@GLIBC_2.3.2>
    3aeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003af0 <fputs_unlocked@plt>:
    3af0:	endbr64 
    3af4:	bnd jmp QWORD PTR [rip+0x1a2e5]        # 1dde0 <fputs_unlocked@GLIBC_2.2.5>
    3afb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b00 <calloc@plt>:
    3b00:	endbr64 
    3b04:	bnd jmp QWORD PTR [rip+0x1a2dd]        # 1dde8 <calloc@GLIBC_2.2.5>
    3b0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b10 <strxfrm@plt>:
    3b10:	endbr64 
    3b14:	bnd jmp QWORD PTR [rip+0x1a2d5]        # 1ddf0 <strxfrm@GLIBC_2.2.5>
    3b1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b20 <strcmp@plt>:
    3b20:	endbr64 
    3b24:	bnd jmp QWORD PTR [rip+0x1a2cd]        # 1ddf8 <strcmp@GLIBC_2.2.5>
    3b2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b30 <signal@plt>:
    3b30:	endbr64 
    3b34:	bnd jmp QWORD PTR [rip+0x1a2c5]        # 1de00 <signal@GLIBC_2.2.5>
    3b3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b40 <fputc_unlocked@plt>:
    3b40:	endbr64 
    3b44:	bnd jmp QWORD PTR [rip+0x1a2bd]        # 1de08 <fputc_unlocked@GLIBC_2.2.5>
    3b4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b50 <__memcpy_chk@plt>:
    3b50:	endbr64 
    3b54:	bnd jmp QWORD PTR [rip+0x1a2b5]        # 1de10 <__memcpy_chk@GLIBC_2.3.4>
    3b5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b60 <sigemptyset@plt>:
    3b60:	endbr64 
    3b64:	bnd jmp QWORD PTR [rip+0x1a2ad]        # 1de18 <sigemptyset@GLIBC_2.2.5>
    3b6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b70 <strtol@plt>:
    3b70:	endbr64 
    3b74:	bnd jmp QWORD PTR [rip+0x1a2a5]        # 1de20 <strtol@GLIBC_2.2.5>
    3b7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b80 <memcpy@plt>:
    3b80:	endbr64 
    3b84:	bnd jmp QWORD PTR [rip+0x1a29d]        # 1de28 <memcpy@GLIBC_2.14>
    3b8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b90 <fileno@plt>:
    3b90:	endbr64 
    3b94:	bnd jmp QWORD PTR [rip+0x1a295]        # 1de30 <fileno@GLIBC_2.2.5>
    3b9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ba0 <__stpcpy_chk@plt>:
    3ba0:	endbr64 
    3ba4:	bnd jmp QWORD PTR [rip+0x1a28d]        # 1de38 <__stpcpy_chk@GLIBC_2.3.4>
    3bab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bb0 <__xstat@plt>:
    3bb0:	endbr64 
    3bb4:	bnd jmp QWORD PTR [rip+0x1a285]        # 1de40 <__xstat@GLIBC_2.2.5>
    3bbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bc0 <pthread_cond_init@plt>:
    3bc0:	endbr64 
    3bc4:	bnd jmp QWORD PTR [rip+0x1a27d]        # 1de48 <pthread_cond_init@GLIBC_2.3.2>
    3bcb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bd0 <wcwidth@plt>:
    3bd0:	endbr64 
    3bd4:	bnd jmp QWORD PTR [rip+0x1a275]        # 1de50 <wcwidth@GLIBC_2.2.5>
    3bdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003be0 <pthread_mutex_unlock@plt>:
    3be0:	endbr64 
    3be4:	bnd jmp QWORD PTR [rip+0x1a26d]        # 1de58 <pthread_mutex_unlock@GLIBC_2.2.5>
    3beb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bf0 <pause@plt>:
    3bf0:	endbr64 
    3bf4:	bnd jmp QWORD PTR [rip+0x1a265]        # 1de60 <pause@GLIBC_2.2.5>
    3bfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c00 <fflush@plt>:
    3c00:	endbr64 
    3c04:	bnd jmp QWORD PTR [rip+0x1a25d]        # 1de68 <fflush@GLIBC_2.2.5>
    3c0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c10 <nl_langinfo@plt>:
    3c10:	endbr64 
    3c14:	bnd jmp QWORD PTR [rip+0x1a255]        # 1de70 <nl_langinfo@GLIBC_2.2.5>
    3c1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c20 <__fxstat@plt>:
    3c20:	endbr64 
    3c24:	bnd jmp QWORD PTR [rip+0x1a24d]        # 1de78 <__fxstat@GLIBC_2.2.5>
    3c2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c30 <strcoll@plt>:
    3c30:	endbr64 
    3c34:	bnd jmp QWORD PTR [rip+0x1a245]        # 1de80 <strcoll@GLIBC_2.2.5>
    3c3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c40 <mkstemp@plt>:
    3c40:	endbr64 
    3c44:	bnd jmp QWORD PTR [rip+0x1a23d]        # 1de88 <mkstemp@GLIBC_2.2.5>
    3c4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c50 <__freading@plt>:
    3c50:	endbr64 
    3c54:	bnd jmp QWORD PTR [rip+0x1a235]        # 1de90 <__freading@GLIBC_2.2.5>
    3c5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c60 <fwrite_unlocked@plt>:
    3c60:	endbr64 
    3c64:	bnd jmp QWORD PTR [rip+0x1a22d]        # 1de98 <fwrite_unlocked@GLIBC_2.2.5>
    3c6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c70 <realloc@plt>:
    3c70:	endbr64 
    3c74:	bnd jmp QWORD PTR [rip+0x1a225]        # 1dea0 <realloc@GLIBC_2.2.5>
    3c7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c80 <fdopen@plt>:
    3c80:	endbr64 
    3c84:	bnd jmp QWORD PTR [rip+0x1a21d]        # 1dea8 <fdopen@GLIBC_2.2.5>
    3c8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c90 <setlocale@plt>:
    3c90:	endbr64 
    3c94:	bnd jmp QWORD PTR [rip+0x1a215]        # 1deb0 <setlocale@GLIBC_2.2.5>
    3c9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ca0 <__printf_chk@plt>:
    3ca0:	endbr64 
    3ca4:	bnd jmp QWORD PTR [rip+0x1a20d]        # 1deb8 <__printf_chk@GLIBC_2.3.4>
    3cab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003cb0 <setvbuf@plt>:
    3cb0:	endbr64 
    3cb4:	bnd jmp QWORD PTR [rip+0x1a205]        # 1dec0 <setvbuf@GLIBC_2.2.5>
    3cbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003cc0 <memmove@plt>:
    3cc0:	endbr64 
    3cc4:	bnd jmp QWORD PTR [rip+0x1a1fd]        # 1dec8 <memmove@GLIBC_2.2.5>
    3ccb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003cd0 <strtold@plt>:
    3cd0:	endbr64 
    3cd4:	bnd jmp QWORD PTR [rip+0x1a1f5]        # 1ded0 <strtold@GLIBC_2.2.5>
    3cdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ce0 <error@plt>:
    3ce0:	endbr64 
    3ce4:	bnd jmp QWORD PTR [rip+0x1a1ed]        # 1ded8 <error@GLIBC_2.2.5>
    3ceb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003cf0 <waitpid@plt>:
    3cf0:	endbr64 
    3cf4:	bnd jmp QWORD PTR [rip+0x1a1e5]        # 1dee0 <waitpid@GLIBC_2.2.5>
    3cfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d00 <__explicit_bzero_chk@plt>:
    3d00:	endbr64 
    3d04:	bnd jmp QWORD PTR [rip+0x1a1dd]        # 1dee8 <__explicit_bzero_chk@GLIBC_2.25>
    3d0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d10 <pthread_cond_destroy@plt>:
    3d10:	endbr64 
    3d14:	bnd jmp QWORD PTR [rip+0x1a1d5]        # 1def0 <pthread_cond_destroy@GLIBC_2.3.2>
    3d1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d20 <open@plt>:
    3d20:	endbr64 
    3d24:	bnd jmp QWORD PTR [rip+0x1a1cd]        # 1def8 <open@GLIBC_2.2.5>
    3d2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d30 <fseeko@plt>:
    3d30:	endbr64 
    3d34:	bnd jmp QWORD PTR [rip+0x1a1c5]        # 1df00 <fseeko@GLIBC_2.2.5>
    3d3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d40 <fopen@plt>:
    3d40:	endbr64 
    3d44:	bnd jmp QWORD PTR [rip+0x1a1bd]        # 1df08 <fopen@GLIBC_2.2.5>
    3d4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d50 <dcngettext@plt>:
    3d50:	endbr64 
    3d54:	bnd jmp QWORD PTR [rip+0x1a1b5]        # 1df10 <dcngettext@GLIBC_2.2.5>
    3d5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d60 <sysconf@plt>:
    3d60:	endbr64 
    3d64:	bnd jmp QWORD PTR [rip+0x1a1ad]        # 1df18 <sysconf@GLIBC_2.2.5>
    3d6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d70 <pthread_join@plt>:
    3d70:	endbr64 
    3d74:	bnd jmp QWORD PTR [rip+0x1a1a5]        # 1df20 <pthread_join@GLIBC_2.2.5>
    3d7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d80 <euidaccess@plt>:
    3d80:	endbr64 
    3d84:	bnd jmp QWORD PTR [rip+0x1a19d]        # 1df28 <euidaccess@GLIBC_2.2.5>
    3d8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003d90 <strtoul@plt>:
    3d90:	endbr64 
    3d94:	bnd jmp QWORD PTR [rip+0x1a195]        # 1df30 <strtoul@GLIBC_2.2.5>
    3d9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003da0 <__cxa_atexit@plt>:
    3da0:	endbr64 
    3da4:	bnd jmp QWORD PTR [rip+0x1a18d]        # 1df38 <__cxa_atexit@GLIBC_2.2.5>
    3dab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003db0 <sysinfo@plt>:
    3db0:	endbr64 
    3db4:	bnd jmp QWORD PTR [rip+0x1a185]        # 1df40 <sysinfo@GLIBC_2.2.5>
    3dbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003dc0 <pipe2@plt>:
    3dc0:	endbr64 
    3dc4:	bnd jmp QWORD PTR [rip+0x1a17d]        # 1df48 <pipe2@GLIBC_2.9>
    3dcb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003dd0 <sigismember@plt>:
    3dd0:	endbr64 
    3dd4:	bnd jmp QWORD PTR [rip+0x1a175]        # 1df50 <sigismember@GLIBC_2.2.5>
    3ddb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003de0 <exit@plt>:
    3de0:	endbr64 
    3de4:	bnd jmp QWORD PTR [rip+0x1a16d]        # 1df58 <exit@GLIBC_2.2.5>
    3deb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003df0 <fwrite@plt>:
    3df0:	endbr64 
    3df4:	bnd jmp QWORD PTR [rip+0x1a165]        # 1df60 <fwrite@GLIBC_2.2.5>
    3dfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e00 <__fprintf_chk@plt>:
    3e00:	endbr64 
    3e04:	bnd jmp QWORD PTR [rip+0x1a15d]        # 1df68 <__fprintf_chk@GLIBC_2.3.4>
    3e0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e10 <getrlimit@plt>:
    3e10:	endbr64 
    3e14:	bnd jmp QWORD PTR [rip+0x1a155]        # 1df70 <getrlimit@GLIBC_2.2.5>
    3e1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e20 <getrandom@plt>:
    3e20:	endbr64 
    3e24:	bnd jmp QWORD PTR [rip+0x1a14d]        # 1df78 <getrandom@GLIBC_2.25>
    3e2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e30 <sched_getaffinity@plt>:
    3e30:	endbr64 
    3e34:	bnd jmp QWORD PTR [rip+0x1a145]        # 1df80 <sched_getaffinity@GLIBC_2.3.4>
    3e3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e40 <fflush_unlocked@plt>:
    3e40:	endbr64 
    3e44:	bnd jmp QWORD PTR [rip+0x1a13d]        # 1df88 <fflush_unlocked@GLIBC_2.2.5>
    3e4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e50 <mbsinit@plt>:
    3e50:	endbr64 
    3e54:	bnd jmp QWORD PTR [rip+0x1a135]        # 1df90 <mbsinit@GLIBC_2.2.5>
    3e5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e60 <execlp@plt>:
    3e60:	endbr64 
    3e64:	bnd jmp QWORD PTR [rip+0x1a12d]        # 1df98 <execlp@GLIBC_2.2.5>
    3e6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e70 <iswprint@plt>:
    3e70:	endbr64 
    3e74:	bnd jmp QWORD PTR [rip+0x1a125]        # 1dfa0 <iswprint@GLIBC_2.2.5>
    3e7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e80 <pthread_mutex_init@plt>:
    3e80:	endbr64 
    3e84:	bnd jmp QWORD PTR [rip+0x1a11d]        # 1dfa8 <pthread_mutex_init@GLIBC_2.2.5>
    3e8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003e90 <sigaddset@plt>:
    3e90:	endbr64 
    3e94:	bnd jmp QWORD PTR [rip+0x1a115]        # 1dfb0 <sigaddset@GLIBC_2.2.5>
    3e9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ea0 <fork@plt>:
    3ea0:	endbr64 
    3ea4:	bnd jmp QWORD PTR [rip+0x1a10d]        # 1dfb8 <fork@GLIBC_2.2.5>
    3eab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003eb0 <pthread_mutex_lock@plt>:
    3eb0:	endbr64 
    3eb4:	bnd jmp QWORD PTR [rip+0x1a105]        # 1dfc0 <pthread_mutex_lock@GLIBC_2.2.5>
    3ebb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ec0 <__ctype_b_loc@plt>:
    3ec0:	endbr64 
    3ec4:	bnd jmp QWORD PTR [rip+0x1a0fd]        # 1dfc8 <__ctype_b_loc@GLIBC_2.3>
    3ecb:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000003ed0 <safe_hasher.cold>:
    3ed0:	call   3800 <abort@plt>

0000000000003ed5 <hash_get_first.cold>:
    3ed5:	call   3800 <abort@plt>

0000000000003eda <hash_rehash.cold>:
    3eda:	call   3800 <abort@plt>

0000000000003edf <hash_insert_if_absent.cold>:
    3edf:	call   3800 <abort@plt>

0000000000003ee4 <quotearg_buffer_restyled.cold>:
    3ee4:	call   3800 <abort@plt>

0000000000003ee9 <quotearg_n_options.cold>:
    3ee9:	call   3800 <abort@plt>

0000000000003eee <set_custom_quoting.cold>:
    3eee:	call   3800 <abort@plt>

0000000000003ef3 <quotearg_n_style.cold>:
    3ef3:	call   3800 <abort@plt>

0000000000003ef8 <quotearg_n_style_mem.cold>:
    3ef8:	call   3800 <abort@plt>

0000000000003efd <quotearg_n_style_colon.cold>:
    3efd:	call   3800 <abort@plt>

0000000000003f02 <quotearg_n_custom_mem.cold>:
    3f02:	call   3800 <abort@plt>

0000000000003f07 <xstrtol_fatal.cold>:
    3f07:	call   3800 <abort@plt>

0000000000003f0c <rpl_mbrtoc32.cold>:
    3f0c:	call   3800 <abort@plt>

0000000000003f11 <_obstack_free.cold>:
    3f11:	call   3800 <abort@plt>
    3f16:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000003f20 <main>:
    3f20:	endbr64 
    3f24:	push   r15
    3f26:	push   r14
    3f28:	push   r13
    3f2a:	mov    r13,rsi
    3f2d:	push   r12
    3f2f:	mov    r12d,edi
    3f32:	lea    rdi,[rip+0x12df3]        # 16d2c <short_options+0x18bc>
    3f39:	push   rbp
    3f3a:	push   rbx
    3f3b:	sub    rsp,0x3f8
    3f42:	mov    rax,QWORD PTR fs:0x28
    3f4b:	mov    QWORD PTR [rsp+0x3e8],rax
    3f53:	xor    eax,eax
    3f55:	call   37a0 <getenv@plt>
    3f5a:	test   rax,rax
    3f5d:	mov    QWORD PTR [rsp+0x50],rax
    3f62:	setne  BYTE PTR [rsp+0x10]
    3f67:	call   f7b0 <posix2_version>
    3f6c:	mov    rdi,QWORD PTR [r13+0x0]
    3f70:	sub    eax,0x30db0
    3f75:	cmp    eax,0x2b8
    3f7a:	seta   BYTE PTR [rsp+0x18]
    3f7f:	call   f840 <set_program_name>
    3f84:	lea    rsi,[rip+0x12cdd]        # 16c68 <short_options+0x17f8>
    3f8b:	mov    edi,0x6
    3f90:	call   3c90 <setlocale@plt>
    3f95:	lea    rsi,[rip+0x12da0]        # 16d3c <short_options+0x18cc>
    3f9c:	lea    rdi,[rip+0x12d56]        # 16cf9 <short_options+0x1889>
    3fa3:	mov    QWORD PTR [rsp+0x58],rax
    3fa8:	call   3950 <bindtextdomain@plt>
    3fad:	lea    rdi,[rip+0x12d45]        # 16cf9 <short_options+0x1889>
    3fb4:	call   3910 <textdomain@plt>
    3fb9:	mov    edi,0x3
    3fbe:	mov    DWORD PTR [rip+0x1a168],0x2        # 1e130 <exit_failure>
    3fc8:	call   d840 <hard_locale>
    3fcd:	mov    edi,0x2
    3fd2:	mov    BYTE PTR [rip+0x1a8a9],al        # 1e881 <hard_LC_COLLATE>
    3fd8:	call   d840 <hard_locale>
    3fdd:	mov    BYTE PTR [rip+0x1a89d],al        # 1e880 <hard_LC_TIME>
    3fe3:	mov    ebp,eax
    3fe5:	call   38c0 <localeconv@plt>
    3fea:	mov    rcx,QWORD PTR [rax]
    3fed:	movzx  edx,BYTE PTR [rcx]
    3ff0:	mov    BYTE PTR [rip+0x1a892],dl        # 1e888 <decimal_point>
    3ff6:	test   dl,dl
    3ff8:	je     40d0 <main+0x1b0>
    3ffe:	cmp    BYTE PTR [rcx+0x1],0x0
    4002:	jne    40d0 <main+0x1b0>
    4008:	mov    rdx,QWORD PTR [rax+0x8]
    400c:	movsx  eax,BYTE PTR [rdx]
    400f:	mov    DWORD PTR [rip+0x1a86f],eax        # 1e884 <thousands_sep>
    4015:	test   eax,eax
    4017:	je     4a81 <main+0xb61>
    401d:	cmp    BYTE PTR [rdx+0x1],0x0
    4021:	jne    4a7a <main+0xb5a>
    4027:	mov    BYTE PTR [rip+0x1a40a],0x0        # 1e438 <have_read_stdin>
    402e:	lea    rbx,[rip+0x1a42b]        # 1e460 <fold_toupper>
    4035:	call   3ec0 <__ctype_b_loc@plt>
    403a:	mov    QWORD PTR [rsp+0x8],rax
    403f:	call   3790 <__ctype_toupper_loc@plt>
    4044:	xor    ecx,ecx
    4046:	xor    r9d,r9d
    4049:	lea    r8,[rip+0x1a510]        # 1e560 <nondictionary>
    4050:	lea    rdi,[rip+0x1a709]        # 1e760 <blanks>
    4057:	lea    rsi,[rip+0x1a602]        # 1e660 <nonprinting>
    405e:	jmp    40a2 <main+0x182>
    4060:	cmp    rcx,0xa
    4064:	je     40e0 <main+0x1c0>
    4066:	mov    r10d,edx
    4069:	mov    BYTE PTR [rdi+rcx*1],0x0
    406d:	shr    dx,0x3
    4071:	shr    r10w,0xe
    4076:	xor    edx,0x1
    4079:	xor    r10d,0x1
    407d:	and    edx,0x1
    4080:	and    r10d,0x1
    4084:	mov    BYTE PTR [rsi+rcx*1],r10b
    4088:	mov    BYTE PTR [r8+rcx*1],dl
    408c:	mov    rdx,QWORD PTR [rax]
    408f:	mov    edx,DWORD PTR [rdx+rcx*4]
    4092:	mov    BYTE PTR [rbx+rcx*1],dl
    4095:	add    rcx,0x1
    4099:	cmp    rcx,0x100
    40a0:	je     4120 <main+0x200>
    40a2:	mov    rdx,QWORD PTR [rsp+0x8]
    40a7:	mov    r10,QWORD PTR [rdx]
    40aa:	movzx  edx,WORD PTR [r10+rcx*2]
    40af:	test   dl,0x1
    40b2:	je     4060 <main+0x140>
    40b4:	shr    dx,0xe
    40b8:	mov    BYTE PTR [rdi+rcx*1],0x1
    40bc:	xor    edx,0x1
    40bf:	and    edx,0x1
    40c2:	mov    BYTE PTR [rsi+rcx*1],dl
    40c5:	xor    edx,edx
    40c7:	jmp    4088 <main+0x168>
    40c9:	nop    DWORD PTR [rax+0x0]
    40d0:	mov    BYTE PTR [rip+0x1a7b1],0x2e        # 1e888 <decimal_point>
    40d7:	jmp    4008 <main+0xe8>
    40dc:	nop    DWORD PTR [rax+0x0]
    40e0:	movzx  edx,WORD PTR [r10+0x14]
    40e5:	mov    BYTE PTR [rip+0x1a67e],0x1        # 1e76a <blanks+0xa>
    40ec:	mov    ecx,0xb
    40f1:	mov    BYTE PTR [rip+0x1a472],r9b        # 1e56a <nondictionary+0xa>
    40f8:	shr    dx,0xe
    40fc:	xor    edx,0x1
    40ff:	and    edx,0x1
    4102:	mov    BYTE PTR [rip+0x1a562],dl        # 1e66a <nonprinting+0xa>
    4108:	mov    rdx,QWORD PTR [rax]
    410b:	mov    edx,DWORD PTR [rdx+0x28]
    410e:	mov    BYTE PTR [rip+0x1a356],dl        # 1e46a <fold_toupper+0xa>
    4114:	jmp    40a2 <main+0x182>
    4116:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4120:	test   bpl,bpl
    4123:	je     41f6 <main+0x2d6>
    4129:	mov    DWORD PTR [rsp+0x20],r12d
    412e:	mov    r15,QWORD PTR [rsp+0x8]
    4133:	lea    r14,[rip+0x19f26]        # 1e060 <monthtab>
    413a:	mov    ebp,0x1
    413f:	mov    QWORD PTR [rsp+0x28],r13
    4144:	nop    DWORD PTR [rax+0x0]
    4148:	lea    edi,[rbp+0x2000d]
    414e:	call   3c10 <nl_langinfo@plt>
    4153:	mov    rdi,rax
    4156:	mov    r13,rax
    4159:	call   3980 <strlen@plt>
    415e:	lea    rdi,[rax+0x1]
    4162:	mov    r12,rax
    4165:	call   13000 <xmalloc>
    416a:	mov    DWORD PTR [r14+0x8],ebp
    416e:	mov    QWORD PTR [r14],rax
    4171:	test   r12,r12
    4174:	je     4a90 <main+0xb70>
    417a:	mov    r10,QWORD PTR [r15]
    417d:	mov    rdx,r13
    4180:	lea    r8,[r13+r12*1+0x0]
    4185:	xor    edi,edi
    4187:	mov    rsi,rax
    418a:	nop    WORD PTR [rax+rax*1+0x0]
    4190:	movzx  r11d,BYTE PTR [rdx]
    4194:	mov    r9,rsi
    4197:	test   BYTE PTR [r10+r11*2],0x1
    419c:	jne    41b0 <main+0x290>
    419e:	movzx  ecx,BYTE PTR [rbx+r11*1]
    41a3:	add    rdi,0x1
    41a7:	mov    BYTE PTR [rsi],cl
    41a9:	lea    rsi,[rax+rdi*1]
    41ad:	mov    r9,rsi
    41b0:	add    rdx,0x1
    41b4:	cmp    r8,rdx
    41b7:	jne    4190 <main+0x270>
    41b9:	add    rbp,0x1
    41bd:	mov    BYTE PTR [r9],0x0
    41c1:	add    r14,0x10
    41c5:	cmp    rbp,0xd
    41c9:	jne    4148 <main+0x228>
    41cf:	mov    edx,0x10
    41d4:	lea    rcx,[rip+0x3095]        # 7270 <struct_month_cmp>
    41db:	mov    esi,0xc
    41e0:	mov    r12d,DWORD PTR [rsp+0x20]
    41e5:	lea    rdi,[rip+0x19e74]        # 1e060 <monthtab>
    41ec:	mov    r13,QWORD PTR [rsp+0x28]
    41f1:	call   3880 <qsort@plt>
    41f6:	lea    rdi,[rip+0x1a1a3]        # 1e3a0 <caught_signals>
    41fd:	lea    rbp,[rip+0x11120]        # 15324 <sig.10007+0x4>
    4204:	mov    r14d,0xe
    420a:	call   3b60 <sigemptyset@plt>
    420f:	lea    rax,[rsp+0x2c0]
    4217:	mov    QWORD PTR [rsp+0x20],rbp
    421c:	mov    rbx,rbp
    421f:	mov    QWORD PTR [rsp+0x30],rax
    4224:	mov    ebp,r14d
    4227:	lea    r15,[rip+0x1a172]        # 1e3a0 <caught_signals>
    422e:	mov    r14,rax
    4231:	jmp    423e <main+0x31e>
    4233:	nop    DWORD PTR [rax+rax*1+0x0]
    4238:	mov    ebp,DWORD PTR [rbx]
    423a:	add    rbx,0x4
    423e:	xor    esi,esi
    4240:	mov    rdx,r14
    4243:	mov    edi,ebp
    4245:	call   3890 <sigaction@plt>
    424a:	cmp    QWORD PTR [rsp+0x2c0],0x1
    4253:	je     425f <main+0x33f>
    4255:	mov    esi,ebp
    4257:	mov    rdi,r15
    425a:	call   3e90 <sigaddset@plt>
    425f:	lea    rax,[rip+0x110e6]        # 1534c <sig.10007+0x2c>
    4266:	cmp    rax,rbx
    4269:	jne    4238 <main+0x318>
    426b:	movdqa xmm3,XMMWORD PTR [rip+0x1a12d]        # 1e3a0 <caught_signals>
    4273:	movdqa xmm4,XMMWORD PTR [rip+0x1a135]        # 1e3b0 <caught_signals+0x10>
    427b:	mov    r15d,0xe
    4281:	lea    rax,[rip+0x2ff8]        # 7280 <sighandler>
    4288:	movdqa xmm5,XMMWORD PTR [rip+0x1a130]        # 1e3c0 <caught_signals+0x20>
    4290:	movdqa xmm6,XMMWORD PTR [rip+0x1a138]        # 1e3d0 <caught_signals+0x30>
    4298:	mov    QWORD PTR [rsp+0x2c0],rax
    42a0:	lea    r14,[rip+0x1a0f9]        # 1e3a0 <caught_signals>
    42a7:	movdqa xmm7,XMMWORD PTR [rip+0x1a131]        # 1e3e0 <caught_signals+0x40>
    42af:	movdqa xmm2,XMMWORD PTR [rip+0x1a139]        # 1e3f0 <caught_signals+0x50>
    42b7:	movups XMMWORD PTR [rsp+0x2c8],xmm3
    42bf:	movdqa xmm1,XMMWORD PTR [rip+0x1a139]        # 1e400 <caught_signals+0x60>
    42c7:	mov    rbp,QWORD PTR [rsp+0x20]
    42cc:	mov    DWORD PTR [rsp+0x348],0x0
    42d7:	movdqa xmm3,XMMWORD PTR [rip+0x1a131]        # 1e410 <caught_signals+0x70>
    42df:	mov    DWORD PTR [rsp+0x20],r12d
    42e4:	mov    r12d,r15d
    42e7:	movups XMMWORD PTR [rsp+0x2d8],xmm4
    42ef:	mov    r15,QWORD PTR [rsp+0x30]
    42f4:	movups XMMWORD PTR [rsp+0x2e8],xmm5
    42fc:	movups XMMWORD PTR [rsp+0x2f8],xmm6
    4304:	movups XMMWORD PTR [rsp+0x308],xmm7
    430c:	movups XMMWORD PTR [rsp+0x318],xmm2
    4314:	movups XMMWORD PTR [rsp+0x328],xmm1
    431c:	movups XMMWORD PTR [rsp+0x338],xmm3
    4324:	jmp    433d <main+0x41d>
    4326:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4330:	cmp    rbx,rbp
    4333:	je     435e <main+0x43e>
    4335:	mov    r12d,DWORD PTR [rbp+0x0]
    4339:	add    rbp,0x4
    433d:	mov    esi,r12d
    4340:	mov    rdi,r14
    4343:	call   3dd0 <sigismember@plt>
    4348:	test   eax,eax
    434a:	je     4330 <main+0x410>
    434c:	xor    edx,edx
    434e:	mov    rsi,r15
    4351:	mov    edi,r12d
    4354:	call   3890 <sigaction@plt>
    4359:	cmp    rbx,rbp
    435c:	jne    4335 <main+0x415>
    435e:	xor    esi,esi
    4360:	mov    r12d,DWORD PTR [rsp+0x20]
    4365:	mov    edi,0x11
    436a:	xor    ebx,ebx
    436c:	call   3b30 <signal@plt>
    4371:	lea    rdi,[rip+0x4ce8]        # 9060 <exit_cleanup>
    4378:	xor    r14d,r14d
    437b:	lea    r15,[rip+0x10d4a]        # 150cc <_IO_stdin_used+0xcc>
    4382:	call   14ae0 <atexit>
    4387:	pxor   xmm0,xmm0
    438b:	movsxd rdi,r12d
    438e:	mov    esi,0x8
    4393:	movups XMMWORD PTR [rsp+0x108],xmm0
    439b:	mov    QWORD PTR [rsp+0x100],0xffffffffffffffff
    43a7:	mov    QWORD PTR [rsp+0x110],0xffffffffffffffff
    43b3:	movups XMMWORD PTR [rsp+0x118],xmm0
    43bb:	movups XMMWORD PTR [rsp+0x128],xmm0
    43c3:	movups XMMWORD PTR [rsp+0x138],xmm0
    43cb:	call   13150 <xnmalloc>
    43d0:	mov    BYTE PTR [rsp+0x20],0x0
    43d5:	xor    r9d,r9d
    43d8:	mov    QWORD PTR [rsp+0x38],0x0
    43e1:	mov    rbp,rax
    43e4:	mov    QWORD PTR [rsp+0x28],0x0
    43ed:	mov    QWORD PTR [rsp+0x48],0x0
    43f6:	mov    QWORD PTR [rsp+0x40],0x0
    43ff:	jmp    4470 <main+0x550>
    4401:	nop    DWORD PTR [rax+0x0]
    4408:	test   rbx,rbx
    440b:	je     44a8 <main+0x588>
    4411:	cmp    BYTE PTR [rsp+0x10],0x0
    4416:	je     44a8 <main+0x588>
    441c:	cmp    BYTE PTR [rsp+0x18],0x1
    4421:	movsxd rax,DWORD PTR [rip+0x19db0]        # 1e1d8 <optind@@GLIBC_2.2.5>
    4428:	jne    4450 <main+0x530>
    442a:	cmp    BYTE PTR [rsp+0x20],0x0
    442f:	jne    4450 <main+0x530>
    4431:	cmp    r12d,eax
    4434:	je     4528 <main+0x608>
    443a:	movsxd rdx,eax
    443d:	mov    rdx,QWORD PTR [r13+rdx*8+0x0]
    4442:	cmp    BYTE PTR [rdx],0x2d
    4445:	je     4490 <main+0x570>
    4447:	nop    WORD PTR [rax+rax*1+0x0]
    4450:	cmp    r12d,eax
    4453:	jle    69f6 <main+0x2ad6>
    4459:	lea    edx,[rax+0x1]
    445c:	mov    rax,QWORD PTR [r13+rax*8+0x0]
    4461:	mov    DWORD PTR [rip+0x19d71],edx        # 1e1d8 <optind@@GLIBC_2.2.5>
    4467:	mov    QWORD PTR [rbp+rbx*8+0x0],rax
    446c:	add    rbx,0x1
    4470:	mov    DWORD PTR [rsp+0x90],0xffffffff
    447b:	cmp    r9d,0xffffffff
    447f:	jne    4408 <main+0x4e8>
    4481:	movsxd rax,DWORD PTR [rip+0x19d50]        # 1e1d8 <optind@@GLIBC_2.2.5>
    4488:	jmp    4450 <main+0x530>
    448a:	nop    WORD PTR [rax+rax*1+0x0]
    4490:	cmp    BYTE PTR [rdx+0x1],0x6f
    4494:	jne    4450 <main+0x530>
    4496:	cmp    BYTE PTR [rdx+0x2],0x0
    449a:	jne    44a8 <main+0x588>
    449c:	lea    edx,[rax+0x1]
    449f:	cmp    edx,r12d
    44a2:	je     4450 <main+0x530>
    44a4:	nop    DWORD PTR [rax+0x0]
    44a8:	lea    r8,[rsp+0x90]
    44b0:	lea    rcx,[rip+0x19129]        # 1d5e0 <long_options>
    44b7:	mov    rsi,r13
    44ba:	mov    edi,r12d
    44bd:	lea    rdx,[rip+0x10fac]        # 15470 <short_options>
    44c4:	call   39a0 <getopt_long@plt>
    44c9:	mov    r9d,eax
    44cc:	cmp    eax,0xffffffff
    44cf:	je     4481 <main+0x561>
    44d1:	cmp    eax,0x87
    44d6:	jg     4bde <main+0xcbe>
    44dc:	test   eax,eax
    44de:	jle    4508 <main+0x5e8>
    44e0:	cmp    eax,0x87
    44e5:	ja     4bde <main+0xcbe>
    44eb:	mov    eax,eax
    44ed:	movsxd rax,DWORD PTR [r15+rax*4]
    44f1:	add    rax,r15
    44f4:	notrack jmp rax
    44f7:	mov    r14d,0x1
    44fd:	jmp    4470 <main+0x550>
    4502:	nop    WORD PTR [rax+rax*1+0x0]
    4508:	cmp    eax,0xffffff7d
    450d:	je     5142 <main+0x1222>
    4513:	cmp    eax,0xffffff7e
    4518:	jne    4bde <main+0xcbe>
    451e:	xor    edi,edi
    4520:	call   b950 <usage>
    4525:	nop    DWORD PTR [rax]
    4528:	cmp    QWORD PTR [rsp+0x28],0x0
    452e:	jne    4b79 <main+0xc59>
    4534:	mov    BYTE PTR [rsp+0x20],0x0
    4539:	mov    r8,QWORD PTR [rip+0x19ef0]        # 1e430 <keylist>
    4540:	test   r8,r8
    4543:	je     565b <main+0x173b>
    4549:	mov    rcx,r8
    454c:	xor    r15d,r15d
    454f:	nop
    4550:	mov    rdi,rcx
    4553:	call   7040 <default_key_compare>
    4558:	test   al,al
    455a:	je     45e1 <main+0x6c1>
    4560:	cmp    BYTE PTR [rcx+0x37],0x0
    4564:	jne    45e1 <main+0x6c1>
    4566:	mov    rax,QWORD PTR [rsp+0x120]
    456e:	mov    QWORD PTR [rcx+0x20],rax
    4572:	mov    rax,QWORD PTR [rsp+0x128]
    457a:	mov    QWORD PTR [rcx+0x28],rax
    457e:	movzx  eax,BYTE PTR [rsp+0x130]
    4586:	mov    BYTE PTR [rcx+0x30],al
    4589:	movzx  eax,BYTE PTR [rsp+0x131]
    4591:	mov    BYTE PTR [rcx+0x31],al
    4594:	movzx  eax,BYTE PTR [rsp+0x136]
    459c:	mov    BYTE PTR [rcx+0x36],al
    459f:	movzx  eax,BYTE PTR [rsp+0x132]
    45a7:	mov    BYTE PTR [rcx+0x32],al
    45aa:	movzx  eax,BYTE PTR [rsp+0x134]
    45b2:	mov    BYTE PTR [rcx+0x34],al
    45b5:	movzx  eax,BYTE PTR [rsp+0x135]
    45bd:	mov    BYTE PTR [rcx+0x35],al
    45c0:	movzx  eax,BYTE PTR [rsp+0x138]
    45c8:	mov    BYTE PTR [rcx+0x38],al
    45cb:	movzx  eax,BYTE PTR [rsp+0x133]
    45d3:	mov    BYTE PTR [rcx+0x33],al
    45d6:	movzx  eax,BYTE PTR [rsp+0x137]
    45de:	mov    BYTE PTR [rcx+0x37],al
    45e1:	or     r15b,BYTE PTR [rcx+0x33]
    45e5:	mov    rcx,QWORD PTR [rcx+0x40]
    45e9:	test   rcx,rcx
    45ec:	jne    4550 <main+0x630>
    45f2:	xor    r13d,r13d
    45f5:	nop    DWORD PTR [rax]
    45f8:	movzx  edx,BYTE PTR [r8+0x34]
    45fd:	movzx  eax,BYTE PTR [r8+0x32]
    4602:	add    eax,edx
    4604:	movzx  edx,BYTE PTR [r8+0x35]
    4609:	add    eax,edx
    460b:	movzx  edx,BYTE PTR [r8+0x36]
    4610:	add    edx,eax
    4612:	movzx  eax,BYTE PTR [r8+0x38]
    4617:	or     al,BYTE PTR [r8+0x33]
    461b:	cmp    QWORD PTR [r8+0x20],0x0
    4620:	setne  cl
    4623:	or     eax,ecx
    4625:	movzx  eax,al
    4628:	add    eax,edx
    462a:	cmp    eax,0x1
    462d:	jg     6c9d <main+0x2d7d>
    4633:	mov    r8,QWORD PTR [r8+0x40]
    4637:	test   r8,r8
    463a:	jne    45f8 <main+0x6d8>
    463c:	cmp    BYTE PTR [rip+0x19ddd],0x0        # 1e420 <debug>
    4643:	je     5327 <main+0x1407>
    4649:	movzx  esi,BYTE PTR [rsp+0x20]
    464e:	test   sil,sil
    4651:	setne  dl
    4654:	cmp    QWORD PTR [rsp+0x38],0x0
    465a:	setne  al
    465d:	or     dl,al
    465f:	jne    55f1 <main+0x16d1>
    4665:	cmp    QWORD PTR [rsp+0x58],0x0
    466b:	je     5d53 <main+0x1e33>
    4671:	lea    rsi,[rip+0x125f0]        # 16c68 <short_options+0x17f8>
    4678:	mov    edi,0x3
    467d:	call   3c90 <setlocale@plt>
    4682:	test   rax,rax
    4685:	je     5d53 <main+0x1e33>
    468b:	cmp    BYTE PTR [rip+0x1a1ef],0x0        # 1e881 <hard_LC_COLLATE>
    4692:	je     5e12 <main+0x1ef2>
    4698:	xor    esi,esi
    469a:	mov    edi,0x3
    469f:	call   3c90 <setlocale@plt>
    46a4:	mov    rdi,rax
    46a7:	call   11570 <quote>
    46ac:	mov    edx,0x5
    46b1:	lea    rsi,[rip+0x12168]        # 16820 <short_options+0x13b0>
    46b8:	xor    edi,edi
    46ba:	mov    r12,rax
    46bd:	call   3960 <dcgettext@plt>
    46c2:	mov    rcx,r12
    46c5:	xor    esi,esi
    46c7:	xor    edi,edi
    46c9:	mov    rdx,rax
    46cc:	xor    eax,eax
    46ce:	call   3ce0 <error@plt>
    46d3:	mov    eax,0x1
    46d8:	mov    BYTE PTR [rsp+0x70],r15b
    46dd:	mov    r12,QWORD PTR [rip+0x19d4c]        # 1e430 <keylist>
    46e4:	lea    rdi,[rsp+0x150]
    46ec:	mov    QWORD PTR [rsp+0x58],rdi
    46f1:	lea    rsi,[rsp+0x100]
    46f9:	mov    ecx,0x12
    46fe:	mov    QWORD PTR [rsp+0x80],rbx
    4706:	mov    r15,r12
    4709:	mov    rbx,rax
    470c:	rep movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
    470e:	mov    BYTE PTR [rsp+0x68],0x0
    4713:	mov    BYTE PTR [rsp+0x28],0x0
    4718:	mov    BYTE PTR [rsp+0x18],0x0
    471d:	mov    BYTE PTR [rsp+0x10],0x0
    4722:	mov    BYTE PTR [rsp+0x78],r14b
    4727:	mov    QWORD PTR [rsp+0x88],rbp
    472f:	jmp    4809 <main+0x8e9>
    4734:	cmp    QWORD PTR [r15+0x18],0x0
    4739:	je     49d7 <main+0xab7>
    473f:	test   al,al
    4741:	je     474c <main+0x82c>
    4743:	test   r13b,r13b
    4746:	je     49ef <main+0xacf>
    474c:	movzx  eax,BYTE PTR [r15+0x34]
    4751:	mov    rdx,QWORD PTR [rsp+0x170]
    4759:	test   rdx,rdx
    475c:	je     4768 <main+0x848>
    475e:	cmp    rdx,QWORD PTR [r15+0x20]
    4762:	je     56ac <main+0x178c>
    4768:	mov    rdx,QWORD PTR [rsp+0x178]
    4770:	test   rdx,rdx
    4773:	je     477f <main+0x85f>
    4775:	cmp    rdx,QWORD PTR [r15+0x28]
    4779:	je     569b <main+0x177b>
    477f:	movzx  edx,BYTE PTR [r15+0x30]
    4784:	xor    eax,0x1
    4787:	add    rbx,0x1
    478b:	xor    edx,0x1
    478e:	and    BYTE PTR [rsp+0x180],dl
    4795:	movzx  edx,BYTE PTR [r15+0x31]
    479a:	xor    edx,0x1
    479d:	and    BYTE PTR [rsp+0x181],dl
    47a4:	movzx  edx,BYTE PTR [r15+0x36]
    47a9:	xor    edx,0x1
    47ac:	and    BYTE PTR [rsp+0x186],dl
    47b3:	movzx  edx,BYTE PTR [r15+0x32]
    47b8:	and    BYTE PTR [rsp+0x184],al
    47bf:	movzx  eax,BYTE PTR [r15+0x35]
    47c4:	xor    edx,0x1
    47c7:	and    BYTE PTR [rsp+0x182],dl
    47ce:	xor    eax,0x1
    47d1:	and    BYTE PTR [rsp+0x185],al
    47d8:	movzx  eax,BYTE PTR [r15+0x33]
    47dd:	xor    eax,0x1
    47e0:	and    BYTE PTR [rsp+0x183],al
    47e7:	movzx  eax,BYTE PTR [r15+0x38]
    47ec:	xor    eax,0x1
    47ef:	and    BYTE PTR [rsp+0x188],al
    47f6:	movzx  eax,BYTE PTR [r15+0x37]
    47fb:	mov    r15,QWORD PTR [r15+0x40]
    47ff:	xor    eax,0x1
    4802:	and    BYTE PTR [rsp+0x187],al
    4809:	test   r15,r15
    480c:	je     51a6 <main+0x1286>
    4812:	mov    eax,0xffff00ff
    4817:	shl    rax,0x10
    481b:	test   QWORD PTR [r15+0x30],rax
    481f:	je     4847 <main+0x927>
    4821:	movzx  eax,BYTE PTR [r15+0x34]
    4826:	movzx  esi,BYTE PTR [rsp+0x10]
    482b:	mov    edx,0x1
    4830:	test   al,al
    4832:	cmove  esi,edx
    4835:	mov    BYTE PTR [rsp+0x10],sil
    483a:	movzx  esi,BYTE PTR [rsp+0x18]
    483f:	cmovne esi,eax
    4842:	mov    BYTE PTR [rsp+0x18],sil
    4847:	cmp    BYTE PTR [r15+0x39],0x0
    484c:	je     4970 <main+0xa50>
    4852:	mov    r12,QWORD PTR [r15]
    4855:	cmp    r12,0xffffffffffffffff
    4859:	jne    485e <main+0x93e>
    485b:	xor    r12d,r12d
    485e:	lea    rbp,[rsp+0x360]
    4866:	mov    rdi,r12
    4869:	mov    r14,QWORD PTR [r15+0x10]
    486d:	mov    rsi,rbp
    4870:	call   eef0 <umaxtostr>
    4875:	mov    edx,0x2d
    487a:	lea    rdi,[rsp+0x381]
    4882:	mov    BYTE PTR [rsp+0x380],0x2b
    488a:	mov    rsi,rax
    488d:	call   3ba0 <__stpcpy_chk@plt>
    4892:	lea    rdi,[r12+0x1]
    4897:	mov    rsi,rbp
    489a:	lea    r12,[rsp+0x3b0]
    48a2:	mov    QWORD PTR [rsp+0x50],rax
    48a7:	call   eef0 <umaxtostr>
    48ac:	lea    rdi,[rsp+0x3b3]
    48b4:	mov    edx,0x2c
    48b9:	mov    DWORD PTR [rsp+0x3b0],0x206b2d
    48c4:	mov    rsi,rax
    48c7:	call   3ba0 <__stpcpy_chk@plt>
    48cc:	cmp    QWORD PTR [r15+0x10],0xffffffffffffffff
    48d1:	mov    QWORD PTR [rsp+0x60],rax
    48d6:	je     4927 <main+0xa07>
    48d8:	add    r14,0x1
    48dc:	mov    rsi,rbp
    48df:	mov    rdi,r14
    48e2:	call   eef0 <umaxtostr>
    48e7:	mov    rsi,rax
    48ea:	mov    rax,QWORD PTR [rsp+0x50]
    48ef:	mov    WORD PTR [rax],0x2d20
    48f4:	lea    rdi,[rax+0x2]
    48f8:	call   3850 <strcpy@plt>
    48fd:	xor    edi,edi
    48ff:	cmp    QWORD PTR [r15+0x18],0xffffffffffffffff
    4904:	mov    rsi,rbp
    4907:	sete   dil
    490b:	add    rdi,r14
    490e:	call   eef0 <umaxtostr>
    4913:	mov    rdx,QWORD PTR [rsp+0x60]
    4918:	mov    rsi,rax
    491b:	mov    BYTE PTR [rdx],0x2c
    491e:	lea    rdi,[rdx+0x1]
    4922:	call   3850 <strcpy@plt>
    4927:	mov    rsi,r12
    492a:	mov    edi,0x1
    492f:	call   11550 <quote_n>
    4934:	lea    rsi,[rsp+0x380]
    493c:	xor    edi,edi
    493e:	mov    rbp,rax
    4941:	call   11550 <quote_n>
    4946:	mov    edx,0x5
    494b:	lea    rsi,[rip+0x11f36]        # 16888 <short_options+0x1418>
    4952:	xor    edi,edi
    4954:	mov    r12,rax
    4957:	call   3960 <dcgettext@plt>
    495c:	mov    r8,rbp
    495f:	mov    rcx,r12
    4962:	xor    esi,esi
    4964:	mov    rdx,rax
    4967:	xor    edi,edi
    4969:	xor    eax,eax
    496b:	call   3ce0 <error@plt>
    4970:	mov    rax,QWORD PTR [r15]
    4973:	cmp    rax,0xffffffffffffffff
    4977:	je     5694 <main+0x1774>
    497d:	cmp    rax,QWORD PTR [r15+0x10]
    4981:	jbe    5694 <main+0x1774>
    4987:	mov    edx,0x5
    498c:	lea    rsi,[rip+0x12175]        # 16b08 <short_options+0x1698>
    4993:	xor    edi,edi
    4995:	call   3960 <dcgettext@plt>
    499a:	mov    rcx,rbx
    499d:	xor    esi,esi
    499f:	xor    edi,edi
    49a1:	mov    rdx,rax
    49a4:	xor    eax,eax
    49a6:	call   3ce0 <error@plt>
    49ab:	mov    eax,0x1
    49b0:	mov    esi,0xffff00ff
    49b5:	mov    edx,0x1
    49ba:	shl    rsi,0x10
    49be:	test   QWORD PTR [r15+0x30],rsi
    49c2:	jne    49c9 <main+0xaa9>
    49c4:	movzx  edx,BYTE PTR [r15+0x36]
    49c9:	or     eax,r13d
    49cc:	cmp    QWORD PTR [r15+0x10],0x0
    49d1:	je     4734 <main+0x814>
    49d7:	test   al,al
    49d9:	jne    4743 <main+0x823>
    49df:	cmp    DWORD PTR [rip+0x1963f],0x80        # 1e028 <tab>
    49e9:	je     5cac <main+0x1d8c>
    49ef:	mov    eax,0xffff00ff
    49f4:	shl    rax,0x10
    49f8:	test   QWORD PTR [r15+0x30],rax
    49fc:	je     474c <main+0x82c>
    4a02:	mov    rax,QWORD PTR [r15+0x10]
    4a06:	mov    ecx,0x1
    4a0b:	lea    rdx,[rax+0x1]
    4a0f:	mov    rax,QWORD PTR [r15]
    4a12:	add    rax,0x1
    4a16:	cmove  rax,rcx
    4a1a:	cmp    rdx,rax
    4a1d:	seta   al
    4a20:	test   rdx,rdx
    4a23:	sete   bpl
    4a27:	or     bpl,al
    4a2a:	je     474c <main+0x82c>
    4a30:	xor    edi,edi
    4a32:	mov    edx,0x5
    4a37:	lea    rsi,[rip+0x11ec2]        # 16900 <short_options+0x1490>
    4a3e:	call   3960 <dcgettext@plt>
    4a43:	xor    esi,esi
    4a45:	xor    edi,edi
    4a47:	mov    rcx,rbx
    4a4a:	mov    rdx,rax
    4a4d:	xor    eax,eax
    4a4f:	call   3ce0 <error@plt>
    4a54:	movzx  eax,BYTE PTR [r15+0x34]
    4a59:	movzx  esi,BYTE PTR [rsp+0x28]
    4a5e:	test   al,al
    4a60:	cmove  esi,ebp
    4a63:	mov    BYTE PTR [rsp+0x28],sil
    4a68:	movzx  esi,BYTE PTR [rsp+0x68]
    4a6d:	cmovne esi,eax
    4a70:	mov    BYTE PTR [rsp+0x68],sil
    4a75:	jmp    4751 <main+0x831>
    4a7a:	mov    BYTE PTR [rip+0x19e01],0x1        # 1e882 <thousands_sep_ignored>
    4a81:	mov    DWORD PTR [rip+0x19df9],0x80        # 1e884 <thousands_sep>
    4a8b:	jmp    4027 <main+0x107>
    4a90:	mov    r9,rax
    4a93:	jmp    41b9 <main+0x299>
    4a98:	push   r11
    4a9a:	mov    r9,QWORD PTR [rip+0x19687]        # 1e128 <argmatch_die>
    4aa1:	lea    rdx,[rip+0x18ad8]        # 1d580 <sort_args>
    4aa8:	mov    r8d,0x1
    4aae:	push   0x1
    4ab0:	mov    rsi,QWORD PTR [rip+0x19729]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4ab7:	lea    rcx,[rip+0x109a2]        # 15460 <sort_types>
    4abe:	lea    rdi,[rip+0x122df]        # 16da4 <short_options+0x1934>
    4ac5:	call   c280 <__xargmatch_internal>
    4aca:	lea    rdx,[rip+0x1098f]        # 15460 <sort_types>
    4ad1:	movsx  r9d,BYTE PTR [rdx+rax*1]
    4ad6:	pop    rax
    4ad7:	pop    rdx
    4ad8:	lea    rsi,[rsp+0x100]
    4ae0:	lea    rdi,[rsp+0x3b0]
    4ae8:	mov    edx,0x2
    4aed:	mov    BYTE PTR [rsp+0x3b0],r9b
    4af5:	mov    DWORD PTR [rsp+0x60],r9d
    4afa:	mov    BYTE PTR [rsp+0x3b1],0x0
    4b02:	call   7150 <set_ordering>
    4b07:	mov    r9d,DWORD PTR [rsp+0x60]
    4b0c:	jmp    4470 <main+0x550>
    4b11:	mov    rsi,QWORD PTR [rip+0x196c8]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4b18:	mov    r9d,0x63
    4b1e:	test   rsi,rsi
    4b21:	je     4b5d <main+0xc3d>
    4b23:	push   rdi
    4b24:	mov    r9,QWORD PTR [rip+0x195fd]        # 1e128 <argmatch_die>
    4b2b:	mov    r8d,0x1
    4b31:	lea    rdx,[rip+0x18a88]        # 1d5c0 <check_args>
    4b38:	push   0x1
    4b3a:	lea    rcx,[rip+0x10925]        # 15466 <check_types>
    4b41:	lea    rdi,[rip+0x12263]        # 16dab <short_options+0x193b>
    4b48:	call   c280 <__xargmatch_internal>
    4b4d:	lea    rdx,[rip+0x10912]        # 15466 <check_types>
    4b54:	pop    r8
    4b56:	pop    r10
    4b58:	movsx  r9d,BYTE PTR [rdx+rax*1]
    4b5d:	movsx  eax,BYTE PTR [rsp+0x20]
    4b62:	test   al,al
    4b64:	je     4b6f <main+0xc4f>
    4b66:	cmp    eax,r9d
    4b69:	jne    5688 <main+0x1768>
    4b6f:	mov    BYTE PTR [rsp+0x20],r9b
    4b74:	jmp    4470 <main+0x550>
    4b79:	mov    rsi,QWORD PTR [rbp+0x0]
    4b7d:	mov    edi,0x4
    4b82:	call   11270 <quotearg_style>
    4b87:	mov    edx,0x5
    4b8c:	lea    rsi,[rip+0x12338]        # 16ecb <short_options+0x1a5b>
    4b93:	xor    edi,edi
    4b95:	mov    r12,rax
    4b98:	call   3960 <dcgettext@plt>
    4b9d:	mov    rcx,r12
    4ba0:	xor    esi,esi
    4ba2:	xor    edi,edi
    4ba4:	mov    rdx,rax
    4ba7:	xor    eax,eax
    4ba9:	call   3ce0 <error@plt>
    4bae:	mov    edx,0x5
    4bb3:	lea    rsi,[rip+0x11ba6]        # 16760 <short_options+0x12f0>
    4bba:	xor    edi,edi
    4bbc:	call   3960 <dcgettext@plt>
    4bc1:	mov    rdi,QWORD PTR [rip+0x19638]        # 1e200 <stderr@@GLIBC_2.2.5>
    4bc8:	mov    esi,0x1
    4bcd:	lea    rdx,[rip+0x12f0b]        # 17adf <__PRETTY_FUNCTION__.5018+0x17>
    4bd4:	mov    rcx,rax
    4bd7:	xor    eax,eax
    4bd9:	call   3e00 <__fprintf_chk@plt>
    4bde:	mov    edi,0x2
    4be3:	call   b950 <usage>
    4be8:	mov    rdx,QWORD PTR [rip+0x195f1]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4bef:	cmp    BYTE PTR [rdx],0x2b
    4bf2:	je     5414 <main+0x14f4>
    4bf8:	mov    QWORD PTR [rbp+rbx*8+0x0],rdx
    4bfd:	add    rbx,0x1
    4c01:	jmp    4470 <main+0x550>
    4c06:	mov    rdi,QWORD PTR [rip+0x195d3]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4c0d:	mov    eax,DWORD PTR [rsp+0x90]
    4c14:	lea    rcx,[rsp+0x150]
    4c1c:	lea    rsi,[rsp+0x1a0]
    4c24:	lea    r8,[rip+0x12242]        # 16e6d <short_options+0x19fd>
    4c2b:	mov    edx,0xa
    4c30:	mov    DWORD PTR [rsp+0x68],r9d
    4c35:	mov    QWORD PTR [rsp+0x60],rdi
    4c3a:	mov    DWORD PTR [rsp+0x70],eax
    4c3e:	call   137c0 <xstrtoumax>
    4c43:	mov    rdi,QWORD PTR [rsp+0x60]
    4c48:	mov    r9d,DWORD PTR [rsp+0x68]
    4c4d:	test   eax,eax
    4c4f:	mov    r10d,eax
    4c52:	jne    53b5 <main+0x1495>
    4c58:	mov    rax,QWORD PTR [rsp+0x1a0]
    4c60:	movsx  eax,BYTE PTR [rax-0x1]
    4c64:	sub    eax,0x30
    4c67:	cmp    eax,0x9
    4c6a:	ja     4c93 <main+0xd73>
    4c6c:	mov    rax,QWORD PTR [rsp+0x150]
    4c74:	movabs rdx,0x3fffffffffffff
    4c7e:	cmp    rax,rdx
    4c81:	ja     5d3a <main+0x1e1a>
    4c87:	shl    rax,0xa
    4c8b:	mov    QWORD PTR [rsp+0x150],rax
    4c93:	mov    rdx,QWORD PTR [rsp+0x150]
    4c9b:	cmp    rdx,QWORD PTR [rip+0x197b6]        # 1e458 <sort_size>
    4ca2:	jb     4470 <main+0x550>
    4ca8:	mov    eax,DWORD PTR [rip+0x19376]        # 1e024 <nmerge>
    4cae:	imul   rax,rax,0x22
    4cb2:	cmp    rax,rdx
    4cb5:	cmovb  rax,rdx
    4cb9:	mov    QWORD PTR [rip+0x19798],rax        # 1e458 <sort_size>
    4cc0:	jmp    4470 <main+0x550>
    4cc5:	mov    rdi,QWORD PTR [rip+0x19514]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4ccc:	mov    DWORD PTR [rsp+0x60],r9d
    4cd1:	call   7360 <add_temp_dir>
    4cd6:	mov    r9d,DWORD PTR [rsp+0x60]
    4cdb:	jmp    4470 <main+0x550>
    4ce0:	lea    r8,[rsp+0xb0]
    4ce8:	xor    eax,eax
    4cea:	mov    ecx,0x12
    4cef:	mov    DWORD PTR [rsp+0x68],r9d
    4cf4:	mov    rdi,r8
    4cf7:	lea    rdx,[rip+0x120b8]        # 16db6 <short_options+0x1946>
    4cfe:	mov    rsi,r8
    4d01:	mov    QWORD PTR [rsp+0x60],r8
    4d06:	rep stos DWORD PTR es:[rdi],eax
    4d08:	mov    rdi,QWORD PTR [rip+0x194d1]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4d0f:	mov    QWORD PTR [rsp+0xc0],0xffffffffffffffff
    4d1b:	call   9490 <parse_field_count>
    4d20:	mov    r8,QWORD PTR [rsp+0x60]
    4d25:	mov    r9d,DWORD PTR [rsp+0x68]
    4d2a:	mov    rdi,rax
    4d2d:	mov    rax,QWORD PTR [rsp+0xb0]
    4d35:	lea    rdx,[rax-0x1]
    4d39:	test   rax,rax
    4d3c:	mov    QWORD PTR [rsp+0xb0],rdx
    4d44:	je     6815 <main+0x28f5>
    4d4a:	cmp    BYTE PTR [rdi],0x2e
    4d4d:	je     5c4d <main+0x1d2d>
    4d53:	mov    rax,QWORD PTR [rsp+0xb0]
    4d5b:	or     rax,QWORD PTR [rsp+0xb8]
    4d63:	jne    4d71 <main+0xe51>
    4d65:	mov    QWORD PTR [rsp+0xb0],0xffffffffffffffff
    4d71:	xor    edx,edx
    4d73:	mov    rsi,r8
    4d76:	mov    DWORD PTR [rsp+0x68],r9d
    4d7b:	mov    QWORD PTR [rsp+0x60],r8
    4d80:	call   7150 <set_ordering>
    4d85:	mov    r8,QWORD PTR [rsp+0x60]
    4d8a:	mov    r9d,DWORD PTR [rsp+0x68]
    4d8f:	cmp    BYTE PTR [rax],0x2c
    4d92:	je     5bd2 <main+0x1cb2>
    4d98:	mov    QWORD PTR [rsp+0xc0],0xffffffffffffffff
    4da4:	mov    QWORD PTR [rsp+0xc8],0x0
    4db0:	cmp    BYTE PTR [rax],0x0
    4db3:	jne    6802 <main+0x28e2>
    4db9:	mov    esi,0x48
    4dbe:	mov    rdi,r8
    4dc1:	mov    DWORD PTR [rsp+0x60],r9d
    4dc6:	call   13370 <xmemdup>
    4dcb:	mov    r9d,DWORD PTR [rsp+0x60]
    4dd0:	lea    rcx,[rip+0x19659]        # 1e430 <keylist>
    4dd7:	mov    rdx,rax
    4dda:	mov    rax,QWORD PTR [rip+0x1964f]        # 1e430 <keylist>
    4de1:	test   rax,rax
    4de4:	je     5196 <main+0x1276>
    4dea:	lea    rcx,[rax+0x40]
    4dee:	mov    rax,QWORD PTR [rax+0x40]
    4df2:	jmp    4de1 <main+0xec1>
    4df4:	mov    rdi,QWORD PTR [rip+0x193e5]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4dfb:	movsx  eax,BYTE PTR [rdi]
    4dfe:	test   al,al
    4e00:	je     6992 <main+0x2a72>
    4e06:	cmp    BYTE PTR [rdi+0x1],0x0
    4e0a:	je     4e36 <main+0xf16>
    4e0c:	lea    rsi,[rip+0x12073]        # 16e86 <short_options+0x1a16>
    4e13:	mov    DWORD PTR [rsp+0x68],r9d
    4e18:	mov    QWORD PTR [rsp+0x60],rdi
    4e1d:	call   3b20 <strcmp@plt>
    4e22:	mov    rdi,QWORD PTR [rsp+0x60]
    4e27:	mov    r9d,DWORD PTR [rsp+0x68]
    4e2c:	test   eax,eax
    4e2e:	jne    6963 <main+0x2a43>
    4e34:	xor    eax,eax
    4e36:	mov    edx,DWORD PTR [rip+0x191ec]        # 1e028 <tab>
    4e3c:	cmp    edx,0x80
    4e42:	je     4e4c <main+0xf2c>
    4e44:	cmp    edx,eax
    4e46:	jne    67f1 <main+0x28d1>
    4e4c:	mov    DWORD PTR [rip+0x191d6],eax        # 1e028 <tab>
    4e52:	jmp    4470 <main+0x550>
    4e57:	mov    BYTE PTR [rip+0x195db],0x1        # 1e439 <unique>
    4e5e:	jmp    4470 <main+0x550>
    4e63:	movsxd rcx,DWORD PTR [rip+0x1936e]        # 1e1d8 <optind@@GLIBC_2.2.5>
    4e6a:	mov    rdx,QWORD PTR [rip+0x1936f]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4e71:	mov    rax,rcx
    4e74:	cmp    QWORD PTR [r13+rcx*8-0x8],rdx
    4e79:	jne    4470 <main+0x550>
    4e7f:	movsx  ecx,BYTE PTR [rdx]
    4e82:	mov    esi,ecx
    4e84:	sub    ecx,0x30
    4e87:	cmp    ecx,0x9
    4e8a:	jbe    64a3 <main+0x2583>
    4e90:	xor    edx,edx
    4e92:	test   sil,sil
    4e95:	setne  dl
    4e98:	sub    eax,edx
    4e9a:	mov    DWORD PTR [rip+0x19338],eax        # 1e1d8 <optind@@GLIBC_2.2.5>
    4ea0:	jmp    4470 <main+0x550>
    4ea5:	mov    BYTE PTR [rip+0x1918c],0x0        # 1e038 <eolchar>
    4eac:	jmp    4470 <main+0x550>
    4eb1:	mov    rdi,QWORD PTR [rsp+0x38]
    4eb6:	mov    rdx,QWORD PTR [rip+0x19323]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4ebd:	test   rdi,rdi
    4ec0:	je     4ee6 <main+0xfc6>
    4ec2:	mov    rsi,rdx
    4ec5:	mov    DWORD PTR [rsp+0x60],r9d
    4eca:	mov    QWORD PTR [rsp+0x38],rdx
    4ecf:	call   3b20 <strcmp@plt>
    4ed4:	mov    rdx,QWORD PTR [rsp+0x38]
    4ed9:	mov    r9d,DWORD PTR [rsp+0x60]
    4ede:	test   eax,eax
    4ee0:	jne    675a <main+0x283a>
    4ee6:	mov    QWORD PTR [rsp+0x38],rdx
    4eeb:	jmp    4470 <main+0x550>
    4ef0:	mov    BYTE PTR [rip+0x19543],0x1        # 1e43a <stable>
    4ef7:	jmp    4470 <main+0x550>
    4efc:	mov    r11,QWORD PTR [rip+0x192dd]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    4f03:	xor    esi,esi
    4f05:	mov    eax,DWORD PTR [rsp+0x90]
    4f0c:	lea    rcx,[rsp+0x150]
    4f14:	lea    r8,[rip+0x11d4d]        # 16c68 <short_options+0x17f8>
    4f1b:	mov    edx,0xa
    4f20:	mov    DWORD PTR [rsp+0x70],r9d
    4f25:	mov    rdi,r11
    4f28:	mov    QWORD PTR [rsp+0x68],r11
    4f2d:	mov    DWORD PTR [rsp+0x78],eax
    4f31:	call   137c0 <xstrtoumax>
    4f36:	lea    rsi,[rsp+0x1a0]
    4f3e:	mov    edi,0x7
    4f43:	mov    DWORD PTR [rsp+0x60],eax
    4f47:	call   3e10 <getrlimit@plt>
    4f4c:	mov    r11,QWORD PTR [rsp+0x68]
    4f51:	mov    r9d,DWORD PTR [rsp+0x70]
    4f56:	mov    r10d,0x11
    4f5c:	test   eax,eax
    4f5e:	jne    4f6b <main+0x104b>
    4f60:	mov    eax,DWORD PTR [rsp+0x1a0]
    4f67:	lea    r10d,[rax-0x3]
    4f6b:	cmp    DWORD PTR [rsp+0x60],0x0
    4f70:	jne    53ed <main+0x14cd>
    4f76:	mov    rax,QWORD PTR [rsp+0x150]
    4f7e:	mov    edx,eax
    4f80:	mov    DWORD PTR [rip+0x1909e],eax        # 1e024 <nmerge>
    4f86:	cmp    rax,rdx
    4f89:	jne    4f9d <main+0x107d>
    4f8b:	cmp    eax,0x1
    4f8e:	jbe    6bea <main+0x2cca>
    4f94:	cmp    eax,r10d
    4f97:	jbe    4470 <main+0x550>
    4f9d:	mov    rdi,r11
    4fa0:	mov    DWORD PTR [rsp+0x8],r10d
    4fa5:	call   11570 <quote>
    4faa:	lea    rdx,[rip+0x1862f]        # 1d5e0 <long_options>
    4fb1:	lea    rsi,[rip+0x11e63]        # 16e1b <short_options+0x19ab>
    4fb8:	xor    edi,edi
    4fba:	mov    rbx,rax
    4fbd:	movsxd rax,DWORD PTR [rsp+0x78]
    4fc2:	shl    rax,0x5
    4fc6:	mov    r12,QWORD PTR [rdx+rax*1]
    4fca:	mov    edx,0x5
    4fcf:	call   3960 <dcgettext@plt>
    4fd4:	mov    r8,rbx
    4fd7:	xor    esi,esi
    4fd9:	xor    edi,edi
    4fdb:	mov    rdx,rax
    4fde:	mov    rcx,r12
    4fe1:	xor    eax,eax
    4fe3:	call   3ce0 <error@plt>
    4fe8:	mov    r10d,DWORD PTR [rsp+0x8]
    4fed:	lea    rsi,[rsp+0x3b0]
    4ff5:	mov    edi,r10d
    4ff8:	call   eea0 <uinttostr>
    4ffd:	mov    edx,0x5
    5002:	lea    rsi,[rip+0x116b7]        # 166c0 <short_options+0x1250>
    5009:	mov    rbx,rax
    500c:	xor    edi,edi
    500e:	call   3960 <dcgettext@plt>
    5013:	mov    r8,rbx
    5016:	mov    rcx,r12
    5019:	xor    esi,esi
    501b:	mov    rdx,rax
    501e:	mov    edi,0x2
    5023:	xor    eax,eax
    5025:	call   3ce0 <error@plt>
    502a:	mov    rdi,QWORD PTR [rsp+0x40]
    502f:	mov    rdx,QWORD PTR [rip+0x191aa]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    5036:	test   rdi,rdi
    5039:	je     505f <main+0x113f>
    503b:	mov    rsi,rdx
    503e:	mov    DWORD PTR [rsp+0x60],r9d
    5043:	mov    QWORD PTR [rsp+0x40],rdx
    5048:	call   3b20 <strcmp@plt>
    504d:	mov    rdx,QWORD PTR [rsp+0x40]
    5052:	mov    r9d,DWORD PTR [rsp+0x60]
    5057:	test   eax,eax
    5059:	jne    677e <main+0x285e>
    505f:	mov    QWORD PTR [rsp+0x40],rdx
    5064:	jmp    4470 <main+0x550>
    5069:	mov    BYTE PTR [rip+0x193b0],0x1        # 1e420 <debug>
    5070:	jmp    4470 <main+0x550>
    5075:	mov    rax,QWORD PTR [rip+0x19164]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    507c:	mov    QWORD PTR [rsp+0x28],rax
    5081:	jmp    4470 <main+0x550>
    5086:	mov    rdi,QWORD PTR [rip+0x1939b]        # 1e428 <compress_program>
    508d:	mov    rdx,QWORD PTR [rip+0x1914c]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    5094:	test   rdi,rdi
    5097:	je     50bd <main+0x119d>
    5099:	mov    rsi,rdx
    509c:	mov    DWORD PTR [rsp+0x68],r9d
    50a1:	mov    QWORD PTR [rsp+0x60],rdx
    50a6:	call   3b20 <strcmp@plt>
    50ab:	mov    rdx,QWORD PTR [rsp+0x60]
    50b0:	mov    r9d,DWORD PTR [rsp+0x68]
    50b5:	test   eax,eax
    50b7:	jne    69a3 <main+0x2a83>
    50bd:	mov    QWORD PTR [rip+0x19364],rdx        # 1e428 <compress_program>
    50c4:	jmp    4470 <main+0x550>
    50c9:	mov    rdi,QWORD PTR [rip+0x19110]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    50d0:	xor    esi,esi
    50d2:	mov    eax,DWORD PTR [rsp+0x90]
    50d9:	lea    rcx,[rsp+0x1a0]
    50e1:	lea    r8,[rip+0x11b80]        # 16c68 <short_options+0x17f8>
    50e8:	mov    edx,0xa
    50ed:	mov    DWORD PTR [rsp+0x60],r9d
    50f2:	mov    DWORD PTR [rsp+0x68],eax
    50f6:	mov    QWORD PTR [rsp+0x48],rdi
    50fb:	call   137c0 <xstrtoumax>
    5100:	mov    r9d,DWORD PTR [rsp+0x60]
    5105:	cmp    eax,0x1
    5108:	je     5d45 <main+0x1e25>
    510e:	test   eax,eax
    5110:	mov    rdi,QWORD PTR [rsp+0x48]
    5115:	jne    6b39 <main+0x2c19>
    511b:	mov    rax,QWORD PTR [rsp+0x1a0]
    5123:	mov    QWORD PTR [rsp+0x48],rax
    5128:	test   rax,rax
    512b:	jne    4470 <main+0x550>
    5131:	mov    edx,0x5
    5136:	lea    rsi,[rip+0x115fb]        # 16738 <short_options+0x12c8>
    513d:	jmp    6766 <main+0x2846>
    5142:	lea    rsi,[rip+0x11d69]        # 16eb2 <short_options+0x1a42>
    5149:	mov    rdi,rsi
    514c:	call   f900 <proper_name_lite>
    5151:	lea    rsi,[rip+0x11d66]        # 16ebe <short_options+0x1a4e>
    5158:	mov    rdi,rsi
    515b:	mov    rbx,rax
    515e:	call   f900 <proper_name_lite>
    5163:	mov    rdi,QWORD PTR [rip+0x1905e]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    516a:	mov    r9,rbx
    516d:	mov    rcx,QWORD PTR [rip+0x18fac]        # 1e120 <Version>
    5174:	push   rsi
    5175:	mov    r8,rax
    5178:	lea    rdx,[rip+0x11b76]        # 16cf5 <short_options+0x1885>
    517f:	xor    eax,eax
    5181:	push   0x0
    5183:	lea    rsi,[rip+0x11c1c]        # 16da6 <short_options+0x1936>
    518a:	call   12e80 <version_etc>
    518f:	xor    edi,edi
    5191:	call   3de0 <exit@plt>
    5196:	mov    QWORD PTR [rcx],rdx
    5199:	mov    QWORD PTR [rdx+0x40],0x0
    51a1:	jmp    4470 <main+0x550>
    51a6:	movzx  r13d,BYTE PTR [rsp+0x18]
    51ac:	or     r13d,DWORD PTR [rsp+0x10]
    51b1:	cmp    BYTE PTR [rsp+0x28],0x0
    51b6:	movzx  r15d,BYTE PTR [rsp+0x70]
    51bc:	movzx  r14d,BYTE PTR [rsp+0x78]
    51c2:	mov    rbx,QWORD PTR [rsp+0x80]
    51ca:	mov    rbp,QWORD PTR [rsp+0x88]
    51d2:	je     5d80 <main+0x1e60>
    51d8:	mov    eax,DWORD PTR [rip+0x18e4a]        # 1e028 <tab>
    51de:	mov    edx,DWORD PTR [rip+0x196a0]        # 1e884 <thousands_sep>
    51e4:	cmp    eax,0x80
    51e9:	je     6717 <main+0x27f7>
    51ef:	cmp    eax,edx
    51f1:	je     661c <main+0x26fc>
    51f7:	mov    BYTE PTR [rsp+0x28],0x0
    51fc:	movsx  edx,BYTE PTR [rip+0x19685]        # 1e888 <decimal_point>
    5203:	cmp    edx,eax
    5205:	je     6699 <main+0x2779>
    520b:	cmp    eax,0x2d
    520e:	je     678c <main+0x286c>
    5214:	cmp    eax,0x2b
    5217:	jne    5224 <main+0x1304>
    5219:	cmp    BYTE PTR [rsp+0x68],0x0
    521e:	jne    6bbf <main+0x2c9f>
    5224:	test   r13b,r13b
    5227:	je     5248 <main+0x1328>
    5229:	cmp    BYTE PTR [rsp+0x28],0x0
    522e:	je     5d94 <main+0x1e74>
    5234:	cmp    BYTE PTR [rsp+0x10],0x0
    5239:	je     5248 <main+0x1328>
    523b:	cmp    BYTE PTR [rip+0x19640],0x0        # 1e882 <thousands_sep_ignored>
    5242:	jne    66f1 <main+0x27d1>
    5248:	mov    rdi,QWORD PTR [rsp+0x58]
    524d:	call   7040 <default_key_compare>
    5252:	movzx  r13d,BYTE PTR [rsp+0x187]
    525b:	test   al,al
    525d:	je     6112 <main+0x21f2>
    5263:	test   r13b,r13b
    5266:	je     5327 <main+0x1407>
    526c:	cmp    BYTE PTR [rip+0x191c7],0x0        # 1e43a <stable>
    5273:	jne    659b <main+0x267b>
    5279:	cmp    BYTE PTR [rip+0x191b9],0x0        # 1e439 <unique>
    5280:	je     52f3 <main+0x13d3>
    5282:	cmp    QWORD PTR [rip+0x191a6],0x0        # 1e430 <keylist>
    528a:	je     52f3 <main+0x13d3>
    528c:	lea    r12,[rsp+0x3b0]
    5294:	mov    rdi,QWORD PTR [rsp+0x58]
    5299:	mov    rsi,r12
    529c:	call   70a0 <key_to_opts>
    52a1:	xor    eax,eax
    52a3:	mov    rdi,r12
    52a6:	or     rcx,0xffffffffffffffff
    52aa:	repnz scas al,BYTE PTR es:[rdi]
    52ac:	mov    r8d,0x5
    52b2:	lea    rdx,[rip+0x11c4f]        # 16f08 <short_options+0x1a98>
    52b9:	xor    edi,edi
    52bb:	lea    rsi,[rip+0x11c60]        # 16f22 <short_options+0x1ab2>
    52c2:	mov    rax,rcx
    52c5:	not    rax
    52c8:	lea    rcx,[rax-0x1]
    52cc:	call   3d50 <dcngettext@plt>
    52d1:	mov    rcx,r12
    52d4:	xor    esi,esi
    52d6:	xor    edi,edi
    52d8:	mov    rdx,rax
    52db:	xor    eax,eax
    52dd:	call   3ce0 <error@plt>
    52e2:	mov    BYTE PTR [rsp+0x187],r13b
    52ea:	cmp    BYTE PTR [rip+0x19149],0x0        # 1e43a <stable>
    52f1:	jne    5327 <main+0x1407>
    52f3:	cmp    BYTE PTR [rip+0x1913f],0x0        # 1e439 <unique>
    52fa:	jne    5327 <main+0x1407>
    52fc:	cmp    QWORD PTR [rip+0x1912c],0x0        # 1e430 <keylist>
    5304:	je     5327 <main+0x1407>
    5306:	mov    edx,0x5
    530b:	lea    rsi,[rip+0x11796]        # 16aa8 <short_options+0x1638>
    5312:	xor    edi,edi
    5314:	call   3960 <dcgettext@plt>
    5319:	xor    esi,esi
    531b:	xor    edi,edi
    531d:	mov    rdx,rax
    5320:	xor    eax,eax
    5322:	call   3ce0 <error@plt>
    5327:	movzx  eax,BYTE PTR [rsp+0x137]
    532f:	mov    BYTE PTR [rip+0x19106],al        # 1e43b <reverse>
    5335:	test   r15b,r15b
    5338:	jne    56bd <main+0x179d>
    533e:	cmp    QWORD PTR [rip+0x19102],0x0        # 1e448 <temp_dir_count>
    5346:	je     5bb0 <main+0x1c90>
    534c:	test   rbx,rbx
    534f:	je     5b86 <main+0x1c66>
    5355:	mov    rax,QWORD PTR [rip+0x190fc]        # 1e458 <sort_size>
    535c:	test   rax,rax
    535f:	je     5379 <main+0x1459>
    5361:	mov    edx,DWORD PTR [rip+0x18cbd]        # 1e024 <nmerge>
    5367:	imul   rdx,rdx,0x22
    536b:	cmp    rdx,rax
    536e:	cmovae rax,rdx
    5372:	mov    QWORD PTR [rip+0x190df],rax        # 1e458 <sort_size>
    5379:	movzx  r15d,BYTE PTR [rsp+0x20]
    537f:	test   r15b,r15b
    5382:	je     5725 <main+0x1805>
    5388:	cmp    rbx,0x1
    538c:	ja     5612 <main+0x16f2>
    5392:	cmp    QWORD PTR [rsp+0x38],0x0
    5398:	je     61b9 <main+0x2299>
    539e:	movzx  eax,BYTE PTR [rsp+0x20]
    53a3:	lea    rdi,[rip+0x18c66]        # 1e010 <opts.10091>
    53aa:	mov    BYTE PTR [rip+0x18c60],al        # 1e010 <opts.10091>
    53b0:	call   73c0 <incompatible_options>
    53b5:	cmp    eax,0x2
    53b8:	jne    53d2 <main+0x14b2>
    53ba:	mov    rax,QWORD PTR [rsp+0x1a0]
    53c2:	movsx  edx,BYTE PTR [rax-0x1]
    53c6:	sub    edx,0x30
    53c9:	cmp    edx,0x9
    53cc:	jbe    5cef <main+0x1dcf>
    53d2:	mov    esi,DWORD PTR [rsp+0x70]
    53d6:	mov    r8,rdi
    53d9:	mov    edx,0x53
    53de:	mov    edi,r10d
    53e1:	lea    rcx,[rip+0x181f8]        # 1d5e0 <long_options>
    53e8:	call   136e0 <xstrtol_fatal>
    53ed:	mov    eax,DWORD PTR [rsp+0x60]
    53f1:	cmp    eax,0x1
    53f4:	je     4f9d <main+0x107d>
    53fa:	mov    esi,DWORD PTR [rsp+0x78]
    53fe:	mov    r8,r11
    5401:	lea    rcx,[rip+0x181d8]        # 1d5e0 <long_options>
    5408:	mov    edi,eax
    540a:	mov    edx,0xffffff84
    540f:	call   136e0 <xstrtol_fatal>
    5414:	movsxd rax,DWORD PTR [rip+0x18dbd]        # 1e1d8 <optind@@GLIBC_2.2.5>
    541b:	cmp    eax,r12d
    541e:	je     564e <main+0x172e>
    5424:	mov    rax,QWORD PTR [r13+rax*8+0x0]
    5429:	mov    DWORD PTR [rsp+0x60],0x0
    5431:	cmp    BYTE PTR [rax],0x2d
    5434:	jne    544a <main+0x152a>
    5436:	movsx  eax,BYTE PTR [rax+0x1]
    543a:	sub    eax,0x30
    543d:	cmp    eax,0x9
    5440:	setbe  al
    5443:	movzx  eax,al
    5446:	mov    DWORD PTR [rsp+0x60],eax
    544a:	cmp    QWORD PTR [rsp+0x50],0x0
    5450:	sete   al
    5453:	and    eax,DWORD PTR [rsp+0x60]
    5457:	or     BYTE PTR [rsp+0x18],al
    545b:	je     4bf8 <main+0xcd8>
    5461:	lea    r8,[rsp+0xb0]
    5469:	xor    eax,eax
    546b:	mov    ecx,0x12
    5470:	mov    DWORD PTR [rsp+0x70],r9d
    5475:	mov    rdi,r8
    5478:	mov    rsi,r8
    547b:	mov    QWORD PTR [rsp+0x68],r8
    5480:	rep stos DWORD PTR es:[rdi],eax
    5482:	lea    rdi,[rdx+0x1]
    5486:	xor    edx,edx
    5488:	mov    QWORD PTR [rsp+0xc0],0xffffffffffffffff
    5494:	call   9490 <parse_field_count>
    5499:	mov    r9d,DWORD PTR [rsp+0x70]
    549e:	test   rax,rax
    54a1:	mov    rdi,rax
    54a4:	je     6479 <main+0x2559>
    54aa:	cmp    BYTE PTR [rax],0x2e
    54ad:	mov    r8,QWORD PTR [rsp+0x68]
    54b2:	je     68b7 <main+0x2997>
    54b8:	mov    rax,QWORD PTR [rsp+0xb8]
    54c0:	or     rax,QWORD PTR [rsp+0xb0]
    54c8:	jne    54df <main+0x15bf>
    54ca:	mov    QWORD PTR [rsp+0xb0],0xffffffffffffffff
    54d6:	test   rdi,rdi
    54d9:	je     6497 <main+0x2577>
    54df:	xor    edx,edx
    54e1:	mov    rsi,r8
    54e4:	mov    DWORD PTR [rsp+0x70],r9d
    54e9:	mov    QWORD PTR [rsp+0x68],r8
    54ee:	call   7150 <set_ordering>
    54f3:	mov    r8,QWORD PTR [rsp+0x68]
    54f8:	mov    r9d,DWORD PTR [rsp+0x70]
    54fd:	cmp    BYTE PTR [rax],0x0
    5500:	jne    6497 <main+0x2577>
    5506:	cmp    DWORD PTR [rsp+0x60],0x0
    550b:	je     55b1 <main+0x1691>
    5511:	movsxd rax,DWORD PTR [rip+0x18cc0]        # 1e1d8 <optind@@GLIBC_2.2.5>
    5518:	lea    rsi,[rsp+0xc0]
    5520:	mov    DWORD PTR [rsp+0x70],r9d
    5525:	mov    QWORD PTR [rsp+0x68],r8
    552a:	lea    edx,[rax+0x1]
    552d:	mov    rax,QWORD PTR [r13+rax*8+0x0]
    5532:	mov    DWORD PTR [rip+0x18ca0],edx        # 1e1d8 <optind@@GLIBC_2.2.5>
    5538:	lea    rdx,[rip+0x11815]        # 16d54 <short_options+0x18e4>
    553f:	lea    rdi,[rax+0x1]
    5543:	mov    QWORD PTR [rsp+0x60],rax
    5548:	call   9490 <parse_field_count>
    554d:	mov    r8,QWORD PTR [rsp+0x68]
    5552:	mov    r9d,DWORD PTR [rsp+0x70]
    5557:	cmp    BYTE PTR [rax],0x2e
    555a:	mov    rdi,rax
    555d:	je     6b95 <main+0x2c75>
    5563:	cmp    QWORD PTR [rsp+0xc8],0x0
    556c:	jne    5587 <main+0x1667>
    556e:	mov    rax,QWORD PTR [rsp+0xc0]
    5576:	test   rax,rax
    5579:	je     5587 <main+0x1667>
    557b:	sub    rax,0x1
    557f:	mov    QWORD PTR [rsp+0xc0],rax
    5587:	mov    rsi,r8
    558a:	mov    edx,0x1
    558f:	mov    DWORD PTR [rsp+0x70],r9d
    5594:	mov    QWORD PTR [rsp+0x68],r8
    5599:	call   7150 <set_ordering>
    559e:	mov    r8,QWORD PTR [rsp+0x68]
    55a3:	mov    r9d,DWORD PTR [rsp+0x70]
    55a8:	cmp    BYTE PTR [rax],0x0
    55ab:	jne    6c61 <main+0x2d41>
    55b1:	mov    esi,0x48
    55b6:	mov    rdi,r8
    55b9:	mov    DWORD PTR [rsp+0x60],r9d
    55be:	mov    BYTE PTR [rsp+0xe9],0x1
    55c6:	call   13370 <xmemdup>
    55cb:	mov    rdx,QWORD PTR [rip+0x18e5e]        # 1e430 <keylist>
    55d2:	mov    r9d,DWORD PTR [rsp+0x60]
    55d7:	lea    rcx,[rip+0x18e52]        # 1e430 <keylist>
    55de:	test   rdx,rdx
    55e1:	je     660c <main+0x26ec>
    55e7:	lea    rcx,[rdx+0x40]
    55eb:	mov    rdx,QWORD PTR [rdx+0x40]
    55ef:	jmp    55de <main+0x16be>
    55f1:	test   sil,sil
    55f4:	jne    55fb <main+0x16db>
    55f6:	mov    BYTE PTR [rsp+0x20],0x6f
    55fb:	movzx  eax,BYTE PTR [rsp+0x20]
    5600:	lea    rdi,[rip+0x18a11]        # 1e018 <opts.10085>
    5607:	mov    BYTE PTR [rip+0x18a0b],al        # 1e018 <opts.10085>
    560d:	call   73c0 <incompatible_options>
    5612:	mov    rsi,QWORD PTR [rbp+0x8]
    5616:	mov    edi,0x4
    561b:	call   11270 <quotearg_style>
    5620:	mov    edx,0x5
    5625:	lea    rsi,[rip+0x114b4]        # 16ae0 <short_options+0x1670>
    562c:	xor    edi,edi
    562e:	mov    r12,rax
    5631:	call   3960 <dcgettext@plt>
    5636:	movsx  r8d,r15b
    563a:	mov    rcx,r12
    563d:	xor    esi,esi
    563f:	mov    rdx,rax
    5642:	mov    edi,0x2
    5647:	xor    eax,eax
    5649:	call   3ce0 <error@plt>
    564e:	mov    DWORD PTR [rsp+0x60],0x0
    5656:	jmp    544a <main+0x152a>
    565b:	lea    rdi,[rsp+0x100]
    5663:	call   7040 <default_key_compare>
    5668:	test   al,al
    566a:	je     637f <main+0x245f>
    5670:	cmp    BYTE PTR [rip+0x18da9],0x0        # 1e420 <debug>
    5677:	je     636c <main+0x244c>
    567d:	xor    r15d,r15d
    5680:	xor    r13d,r13d
    5683:	jmp    4649 <main+0x729>
    5688:	lea    rdi,[rip+0x11724]        # 16db3 <short_options+0x1943>
    568f:	call   73c0 <incompatible_options>
    5694:	xor    eax,eax
    5696:	jmp    49b0 <main+0xa90>
    569b:	mov    QWORD PTR [rsp+0x178],0x0
    56a7:	jmp    477f <main+0x85f>
    56ac:	mov    QWORD PTR [rsp+0x170],0x0
    56b8:	jmp    4768 <main+0x848>
    56bd:	mov    rdi,QWORD PTR [rsp+0x40]
    56c2:	mov    esi,0x10
    56c7:	call   11680 <randread_new>
    56cc:	mov    r13,rax
    56cf:	test   rax,rax
    56d2:	je     6b73 <main+0x2c53>
    56d8:	lea    r12,[rsp+0x3b0]
    56e0:	mov    rdi,rax
    56e3:	mov    edx,0x10
    56e8:	mov    rsi,r12
    56eb:	call   11810 <randread>
    56f0:	mov    rdi,r13
    56f3:	call   119b0 <randread_free>
    56f8:	test   eax,eax
    56fa:	jne    6b53 <main+0x2c33>
    5700:	lea    rdi,[rip+0x18bd9]        # 1e2e0 <random_md5_state>
    5707:	call   c440 <md5_init_ctx>
    570c:	lea    rdx,[rip+0x18bcd]        # 1e2e0 <random_md5_state>
    5713:	mov    esi,0x10
    5718:	mov    rdi,r12
    571b:	call   cd30 <md5_process_bytes>
    5720:	jmp    533e <main+0x141e>
    5725:	mov    BYTE PTR [rsp+0x8],r14b
    572a:	xor    r13d,r13d
    572d:	lea    r12,[rip+0x127e2]        # 17f16 <version_etc_copyright+0x116>
    5734:	jmp    5739 <main+0x1819>
    5736:	mov    r13,rax
    5739:	mov    r14,QWORD PTR [rbp+r13*8+0x0]
    573e:	mov    rsi,r12
    5741:	lea    r15,[rbp+r13*8+0x0]
    5746:	mov    rdi,r14
    5749:	call   3b20 <strcmp@plt>
    574e:	test   eax,eax
    5750:	je     5767 <main+0x1847>
    5752:	mov    esi,0x4
    5757:	mov    rdi,r14
    575a:	call   3d80 <euidaccess@plt>
    575f:	test   eax,eax
    5761:	jne    6c7c <main+0x2d5c>
    5767:	lea    rax,[r13+0x1]
    576b:	cmp    rbx,rax
    576e:	jne    5736 <main+0x1816>
    5770:	mov    QWORD PTR [rsp+0x68],rax
    5775:	mov    rax,QWORD PTR [rsp+0x38]
    577a:	movzx  r14d,BYTE PTR [rsp+0x8]
    5780:	test   rax,rax
    5783:	je     57b2 <main+0x1892>
    5785:	mov    rdi,rax
    5788:	mov    edx,0x1b6
    578d:	mov    esi,0x80041
    5792:	xor    eax,eax
    5794:	call   3d20 <open@plt>
    5799:	mov    edi,eax
    579b:	test   eax,eax
    579d:	js     6cce <main+0x2dae>
    57a3:	cmp    eax,0x1
    57a6:	je     57b2 <main+0x1892>
    57a8:	mov    esi,0x1
    57ad:	call   a6c0 <move_fd.part.0>
    57b2:	test   r14b,r14b
    57b5:	jne    6433 <main+0x2513>
    57bb:	cmp    QWORD PTR [rsp+0x48],0x0
    57c1:	je     6546 <main+0x2626>
    57c7:	mov    rbx,QWORD PTR [rsp+0x48]
    57cc:	movabs rax,0xffffffffffffff
    57d6:	mov    QWORD PTR [rsp+0x168],0x0
    57e2:	mov    QWORD PTR [rsp+0x8],0x0
    57eb:	cmp    rbx,rax
    57ee:	mov    QWORD PTR [rsp+0x88],rbp
    57f6:	cmovbe rax,rbx
    57fa:	mov    rbx,rax
    57fd:	mov    rsi,rax
    5800:	mov    QWORD PTR [rsp+0x20],rax
    5805:	add    rbx,rax
    5808:	mov    rax,rbx
    580b:	mov    QWORD PTR [rsp+0x28],rbx
    5810:	mov    rbx,rsi
    5813:	shl    rbx,0x8
    5817:	sub    rax,0x1
    581b:	mov    QWORD PTR [rsp+0x78],rbx
    5820:	mov    QWORD PTR [rsp+0x70],rax
    5825:	mov    rax,QWORD PTR [rsp+0x88]
    582d:	lea    rsi,[rip+0x117ce]        # 17002 <short_options+0x1b92>
    5834:	mov    rax,QWORD PTR [rax]
    5837:	mov    rdi,rax
    583a:	mov    QWORD PTR [rsp+0x18],rax
    583f:	call   9580 <stream_open>
    5844:	mov    QWORD PTR [rsp+0x10],rax
    5849:	test   rax,rax
    584c:	je     6cc4 <main+0x2da4>
    5852:	cmp    QWORD PTR [rsp+0x48],0x1
    5858:	ja     60bc <main+0x219c>
    585e:	mov    QWORD PTR [rsp+0x80],0x30
    586a:	mov    r13,QWORD PTR [rsp+0x168]
    5872:	lea    rax,[rsp+0x150]
    587a:	mov    QWORD PTR [rsp+0x58],rax
    587f:	test   r13,r13
    5882:	je     5e3f <main+0x1f1f>
    5888:	lea    rax,[rsp+0x90]
    5890:	sub    QWORD PTR [rsp+0x68],0x1
    5896:	mov    BYTE PTR [rsp+0x180],0x0
    589e:	mov    QWORD PTR [rsp+0x60],rax
    58a3:	nop    DWORD PTR [rax+rax*1+0x0]
    58a8:	mov    rdx,QWORD PTR [rsp+0x18]
    58ad:	mov    rsi,QWORD PTR [rsp+0x10]
    58b2:	mov    rdi,QWORD PTR [rsp+0x58]
    58b7:	call   8c50 <fillbuf>
    58bc:	test   al,al
    58be:	je     5d11 <main+0x1df1>
    58c4:	movzx  ebx,BYTE PTR [rsp+0x180]
    58cc:	mov    r12,QWORD PTR [rsp+0x168]
    58d4:	test   bl,bl
    58d6:	je     5913 <main+0x19f3>
    58d8:	cmp    QWORD PTR [rsp+0x68],0x0
    58de:	je     5b02 <main+0x1be2>
    58e4:	mov    rbx,QWORD PTR [rsp+0x80]
    58ec:	mov    rdx,QWORD PTR [rsp+0x158]
    58f4:	mov    rax,r12
    58f7:	lea    rcx,[rbx+0x1]
    58fb:	sub    rax,rdx
    58fe:	imul   rbx,QWORD PTR [rsp+0x160]
    5907:	sub    rax,rbx
    590a:	cmp    rcx,rax
    590d:	jb     673e <main+0x281e>
    5913:	mov    QWORD PTR [rip+0x18f42],0x0        # 1e860 <saved_line>
    591e:	add    r12,QWORD PTR [rsp+0x150]
    5926:	mov    rdi,QWORD PTR [rsp+0x60]
    592b:	xor    esi,esi
    592d:	add    QWORD PTR [rsp+0x8],0x1
    5933:	xor    ebx,ebx
    5935:	call   a9b0 <maybe_create_temp>
    593a:	lea    r13,[rax+0xd]
    593e:	cmp    QWORD PTR [rsp+0x160],0x1
    5947:	jbe    5b6c <main+0x1c4c>
    594d:	mov    rsi,QWORD PTR [rsp+0x28]
    5952:	lea    rdi,[rip+0x36b7]        # 9010 <compare_nodes>
    5959:	lea    r15,[rsp+0x2f0]
    5961:	call   eba0 <heap_alloc>
    5966:	xor    esi,esi
    5968:	mov    QWORD PTR [rsp+0x2c0],rax
    5970:	lea    rax,[rsp+0x2c8]
    5978:	mov    rdi,rax
    597b:	mov    QWORD PTR [rsp+0x40],rax
    5980:	call   3e80 <pthread_mutex_init@plt>
    5985:	xor    esi,esi
    5987:	mov    rdi,r15
    598a:	call   3bc0 <pthread_cond_init@plt>
    598f:	mov    r8,QWORD PTR [rsp+0x160]
    5997:	mov    rdi,QWORD PTR [rsp+0x78]
    599c:	mov    QWORD PTR [rsp+0x50],r8
    59a1:	call   13000 <xmalloc>
    59a6:	mov    r8,QWORD PTR [rsp+0x50]
    59ab:	xor    esi,esi
    59ad:	mov    QWORD PTR [rax+0x18],0x0
    59b5:	lea    r14,[rax+0x58]
    59b9:	mov    rbp,rax
    59bc:	mov    QWORD PTR [rax+0x30],r8
    59c0:	mov    rdi,r14
    59c3:	mov    QWORD PTR [rax+0x28],r8
    59c7:	mov    QWORD PTR [rax+0x10],0x0
    59cf:	mov    QWORD PTR [rax+0x8],0x0
    59d7:	mov    QWORD PTR [rax],0x0
    59de:	mov    QWORD PTR [rax+0x20],0x0
    59e6:	mov    QWORD PTR [rax+0x38],0x0
    59ee:	mov    DWORD PTR [rax+0x50],0x0
    59f5:	mov    BYTE PTR [rax+0x54],0x0
    59f9:	call   3e80 <pthread_mutex_init@plt>
    59fe:	mov    r8,QWORD PTR [rsp+0x50]
    5a03:	xor    r9d,r9d
    5a06:	mov    rdx,r12
    5a09:	mov    rcx,QWORD PTR [rsp+0x20]
    5a0e:	lea    r11,[rbp+0x80]
    5a15:	mov    rdi,rbp
    5a18:	mov    rsi,r11
    5a1b:	mov    QWORD PTR [rsp+0x50],r11
    5a20:	call   78d0 <init_node>
    5a25:	mov    rdi,r12
    5a28:	mov    r12,r14
    5a2b:	push   rax
    5a2c:	push   r13
    5a2e:	mov    r11,QWORD PTR [rsp+0x60]
    5a33:	mov    r9,QWORD PTR [rsp+0xa0]
    5a3b:	mov    r8,QWORD PTR [rsp+0x40]
    5a40:	mov    rdx,QWORD PTR [rsp+0x170]
    5a48:	mov    rsi,QWORD PTR [rsp+0x30]
    5a4d:	mov    rcx,r11
    5a50:	call   b180 <sortlines>
    5a55:	pop    rdx
    5a56:	pop    rcx
    5a57:	cmp    QWORD PTR [rsp+0x28],0x0
    5a5d:	mov    r14,QWORD PTR [rsp+0x70]
    5a62:	je     5a7e <main+0x1b5e>
    5a64:	nop    DWORD PTR [rax+0x0]
    5a68:	mov    rdi,r12
    5a6b:	sub    r14,0x1
    5a6f:	sub    r12,0xffffffffffffff80
    5a73:	call   39d0 <pthread_mutex_destroy@plt>
    5a78:	cmp    r14,0xffffffffffffffff
    5a7c:	jne    5a68 <main+0x1b48>
    5a7e:	mov    rdi,rbp
    5a81:	call   d750 <rpl_free>
    5a86:	mov    rdi,QWORD PTR [rsp+0x2c0]
    5a8e:	call   ec10 <heap_free>
    5a93:	mov    rdi,r15
    5a96:	call   3d10 <pthread_cond_destroy@plt>
    5a9b:	mov    rdi,QWORD PTR [rsp+0x40]
    5aa0:	call   39d0 <pthread_mutex_destroy@plt>
    5aa5:	mov    rdi,QWORD PTR [rsp+0x90]
    5aad:	mov    rsi,r13
    5ab0:	call   96d0 <xfclose>
    5ab5:	test   bl,bl
    5ab7:	je     58a8 <main+0x1988>
    5abd:	mov    rdi,QWORD PTR [rsp+0x150]
    5ac5:	call   d750 <rpl_free>
    5aca:	jmp    5ad4 <main+0x1bb4>
    5acc:	or     edi,0xffffffff
    5acf:	call   7610 <reap>
    5ad4:	cmp    DWORD PTR [rip+0x188a1],0x0        # 1e37c <nprocs>
    5adb:	jg     5acc <main+0x1bac>
    5add:	cmp    BYTE PTR [rip+0x18954],0x0        # 1e438 <have_read_stdin>
    5ae4:	je     5afb <main+0x1bdb>
    5ae6:	mov    rdi,QWORD PTR [rip+0x186e3]        # 1e1d0 <stdin@@GLIBC_2.2.5>
    5aed:	call   d110 <rpl_fclose>
    5af2:	add    eax,0x1
    5af5:	je     67cf <main+0x28af>
    5afb:	xor    edi,edi
    5afd:	call   3de0 <exit@plt>
    5b02:	mov    rax,QWORD PTR [rsp+0x8]
    5b07:	add    r12,QWORD PTR [rsp+0x150]
    5b0f:	mov    QWORD PTR [rip+0x18d46],0x0        # 1e860 <saved_line>
    5b1a:	or     rax,QWORD PTR [rsp+0x170]
    5b22:	jne    5926 <main+0x1a06>
    5b28:	mov    rsi,QWORD PTR [rsp+0x18]
    5b2d:	mov    rdi,QWORD PTR [rsp+0x10]
    5b32:	call   96d0 <xfclose>
    5b37:	mov    rdi,QWORD PTR [rsp+0x38]
    5b3c:	lea    rsi,[rip+0x11110]        # 16c53 <short_options+0x17e3>
    5b43:	call   9580 <stream_open>
    5b48:	test   rax,rax
    5b4b:	je     6c72 <main+0x2d52>
    5b51:	mov    QWORD PTR [rsp+0x90],rax
    5b59:	mov    r13,QWORD PTR [rsp+0x38]
    5b5e:	mov    QWORD PTR [rsp+0x8],0x0
    5b67:	jmp    593e <main+0x1a1e>
    5b6c:	mov    rsi,QWORD PTR [rsp+0x90]
    5b74:	lea    rdi,[r12-0x20]
    5b79:	mov    rdx,r13
    5b7c:	call   9ef0 <write_unique>
    5b81:	jmp    5aa5 <main+0x1b85>
    5b86:	mov    rdi,rbp
    5b89:	mov    ebx,0x1
    5b8e:	call   d750 <rpl_free>
    5b93:	mov    edi,0x8
    5b98:	call   13000 <xmalloc>
    5b9d:	mov    rbp,rax
    5ba0:	lea    rax,[rip+0x1236f]        # 17f16 <version_etc_copyright+0x116>
    5ba7:	mov    QWORD PTR [rbp+0x0],rax
    5bab:	jmp    5355 <main+0x1435>
    5bb0:	lea    rdi,[rip+0x11383]        # 16f3a <short_options+0x1aca>
    5bb7:	call   37a0 <getenv@plt>
    5bbc:	mov    rdi,rax
    5bbf:	test   rax,rax
    5bc2:	je     63d5 <main+0x24b5>
    5bc8:	call   7360 <add_temp_dir>
    5bcd:	jmp    534c <main+0x142c>
    5bd2:	lea    rdi,[rax+0x1]
    5bd6:	lea    rdx,[rip+0x11225]        # 16e02 <short_options+0x1992>
    5bdd:	mov    DWORD PTR [rsp+0x68],r9d
    5be2:	lea    rsi,[rsp+0xc0]
    5bea:	mov    QWORD PTR [rsp+0x60],r8
    5bef:	call   9490 <parse_field_count>
    5bf4:	mov    r8,QWORD PTR [rsp+0x60]
    5bf9:	mov    r9d,DWORD PTR [rsp+0x68]
    5bfe:	mov    rdi,rax
    5c01:	mov    rax,QWORD PTR [rsp+0xc0]
    5c09:	lea    rdx,[rax-0x1]
    5c0d:	test   rax,rax
    5c10:	mov    QWORD PTR [rsp+0xc0],rdx
    5c18:	je     6815 <main+0x28f5>
    5c1e:	cmp    BYTE PTR [rdi],0x2e
    5c21:	je     6567 <main+0x2647>
    5c27:	mov    rsi,r8
    5c2a:	mov    edx,0x1
    5c2f:	mov    DWORD PTR [rsp+0x68],r9d
    5c34:	mov    QWORD PTR [rsp+0x60],r8
    5c39:	call   7150 <set_ordering>
    5c3e:	mov    r9d,DWORD PTR [rsp+0x68]
    5c43:	mov    r8,QWORD PTR [rsp+0x60]
    5c48:	jmp    4db0 <main+0xe90>
    5c4d:	add    rdi,0x1
    5c51:	lea    rdx,[rip+0x11115]        # 16d6d <short_options+0x18fd>
    5c58:	mov    DWORD PTR [rsp+0x68],r9d
    5c5d:	lea    rsi,[rsp+0xb8]
    5c65:	mov    QWORD PTR [rsp+0x60],r8
    5c6a:	call   9490 <parse_field_count>
    5c6f:	mov    r8,QWORD PTR [rsp+0x60]
    5c74:	mov    r9d,DWORD PTR [rsp+0x68]
    5c79:	mov    rdi,rax
    5c7c:	mov    rax,QWORD PTR [rsp+0xb8]
    5c84:	lea    rdx,[rax-0x1]
    5c88:	test   rax,rax
    5c8b:	mov    QWORD PTR [rsp+0xb8],rdx
    5c93:	jne    4d53 <main+0xe33>
    5c99:	mov    rdi,QWORD PTR [rip+0x18540]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    5ca0:	lea    rsi,[rip+0x11142]        # 16de9 <short_options+0x1979>
    5ca7:	call   73f0 <badfieldspec>
    5cac:	cmp    BYTE PTR [r15+0x30],0x0
    5cb1:	jne    6351 <main+0x2431>
    5cb7:	test   edx,edx
    5cb9:	je     5cc6 <main+0x1da6>
    5cbb:	cmp    QWORD PTR [r15+0x8],0x0
    5cc0:	je     6351 <main+0x2431>
    5cc6:	xor    edi,edi
    5cc8:	mov    edx,0x5
    5ccd:	lea    rsi,[rip+0x10be4]        # 168b8 <short_options+0x1448>
    5cd4:	call   3960 <dcgettext@plt>
    5cd9:	mov    rcx,rbx
    5cdc:	xor    esi,esi
    5cde:	xor    edi,edi
    5ce0:	mov    rdx,rax
    5ce3:	xor    eax,eax
    5ce5:	call   3ce0 <error@plt>
    5cea:	jmp    49ef <main+0xacf>
    5cef:	cmp    BYTE PTR [rax+0x1],0x0
    5cf3:	jne    53d2 <main+0x14b2>
    5cf9:	movzx  eax,BYTE PTR [rax]
    5cfc:	cmp    al,0x25
    5cfe:	je     68f2 <main+0x29d2>
    5d04:	cmp    al,0x62
    5d06:	je     4c93 <main+0xd73>
    5d0c:	jmp    53d2 <main+0x14b2>
    5d11:	mov    rsi,QWORD PTR [rsp+0x18]
    5d16:	mov    rdi,QWORD PTR [rsp+0x10]
    5d1b:	call   96d0 <xfclose>
    5d20:	cmp    QWORD PTR [rsp+0x68],0x0
    5d26:	je     64ac <main+0x258c>
    5d2c:	add    QWORD PTR [rsp+0x88],0x8
    5d35:	jmp    5825 <main+0x1905>
    5d3a:	mov    r10d,0x1
    5d40:	jmp    53d2 <main+0x14b2>
    5d45:	mov    QWORD PTR [rsp+0x48],0xffffffffffffffff
    5d4e:	jmp    4470 <main+0x550>
    5d53:	xor    edi,edi
    5d55:	mov    edx,0x5
    5d5a:	lea    rsi,[rip+0x1118c]        # 16eed <short_options+0x1a7d>
    5d61:	call   3960 <dcgettext@plt>
    5d66:	lea    rdx,[rip+0x1145a]        # 171c7 <short_options+0x1d57>
    5d6d:	xor    esi,esi
    5d6f:	xor    edi,edi
    5d71:	mov    rcx,rax
    5d74:	xor    eax,eax
    5d76:	call   3ce0 <error@plt>
    5d7b:	jmp    468b <main+0x76b>
    5d80:	cmp    BYTE PTR [rsp+0x68],0x0
    5d85:	jne    665f <main+0x273f>
    5d8b:	test   r13b,r13b
    5d8e:	je     5248 <main+0x1328>
    5d94:	movzx  eax,BYTE PTR [rip+0x18aed]        # 1e888 <decimal_point>
    5d9b:	lea    rdi,[rsp+0x3b0]
    5da3:	mov    BYTE PTR [rsp+0x3b1],0x0
    5dab:	lea    r12,[rip+0x10eb6]        # 16c68 <short_options+0x17f8>
    5db2:	mov    BYTE PTR [rsp+0x3b0],al
    5db9:	call   11570 <quote>
    5dbe:	mov    r13,rax
    5dc1:	movsx  eax,BYTE PTR [rip+0x18ac0]        # 1e888 <decimal_point>
    5dc8:	cmp    eax,DWORD PTR [rip+0x1825a]        # 1e028 <tab>
    5dce:	je     5de6 <main+0x1ec6>
    5dd0:	mov    edx,0x5
    5dd5:	lea    rsi,[rip+0x11126]        # 16f02 <short_options+0x1a92>
    5ddc:	xor    edi,edi
    5dde:	call   3960 <dcgettext@plt>
    5de3:	mov    r12,rax
    5de6:	xor    edi,edi
    5de8:	mov    edx,0x5
    5ded:	lea    rsi,[rip+0x10c34]        # 16a28 <short_options+0x15b8>
    5df4:	call   3960 <dcgettext@plt>
    5df9:	mov    r8,r13
    5dfc:	mov    rcx,r12
    5dff:	xor    esi,esi
    5e01:	mov    rdx,rax
    5e04:	xor    edi,edi
    5e06:	xor    eax,eax
    5e08:	call   3ce0 <error@plt>
    5e0d:	jmp    5234 <main+0x1314>
    5e12:	xor    edi,edi
    5e14:	mov    edx,0x5
    5e19:	lea    rsi,[rip+0x10a30]        # 16850 <short_options+0x13e0>
    5e20:	call   3960 <dcgettext@plt>
    5e25:	lea    rdx,[rip+0x1139b]        # 171c7 <short_options+0x1d57>
    5e2c:	xor    esi,esi
    5e2e:	xor    edi,edi
    5e30:	mov    rcx,rax
    5e33:	xor    eax,eax
    5e35:	call   3ce0 <error@plt>
    5e3a:	jmp    46d3 <main+0x7b3>
    5e3f:	mov    rax,QWORD PTR [rsp+0x80]
    5e47:	mov    rbp,QWORD PTR [rsp+0x68]
    5e4c:	mov    r14,QWORD PTR [rsp+0x30]
    5e51:	lea    rbx,[rax+0x1]
    5e55:	lea    r12,[rax+0x2]
    5e59:	jmp    5ec1 <main+0x1fa1>
    5e5b:	mov    rsi,QWORD PTR [rip+0x185f6]        # 1e458 <sort_size>
    5e62:	test   rsi,rsi
    5e65:	jne    60ea <main+0x21ca>
    5e6b:	cmp    QWORD PTR [rip+0x183ad],0x0        # 1e220 <size_bound.9125>
    5e73:	mov    r15d,0x20000
    5e79:	je     5f4d <main+0x202d>
    5e7f:	mov    rcx,rbx
    5e82:	xor    edx,edx
    5e84:	mov    rsi,QWORD PTR [rip+0x18395]        # 1e220 <size_bound.9125>
    5e8b:	imul   rcx,r15
    5e8f:	add    rcx,0x1
    5e93:	mov    rax,rcx
    5e96:	div    rbx
    5e99:	cmp    r15,rax
    5e9c:	jne    60ea <main+0x21ca>
    5ea2:	mov    rax,rsi
    5ea5:	sub    rax,r12
    5ea8:	cmp    rcx,rax
    5eab:	jae    60ea <main+0x21ca>
    5eb1:	add    r13,0x1
    5eb5:	add    r12,rcx
    5eb8:	cmp    r13,rbp
    5ebb:	jae    60ed <main+0x21cd>
    5ec1:	test   r13,r13
    5ec4:	je     6099 <main+0x2179>
    5eca:	mov    rax,QWORD PTR [rsp+0x88]
    5ed2:	lea    rsi,[rip+0x1203d]        # 17f16 <version_etc_copyright+0x116>
    5ed9:	mov    r15,QWORD PTR [rax+r13*8]
    5edd:	mov    rdi,r15
    5ee0:	call   3b20 <strcmp@plt>
    5ee5:	mov    rdx,r14
    5ee8:	test   eax,eax
    5eea:	jne    6082 <main+0x2162>
    5ef0:	xor    esi,esi
    5ef2:	mov    edi,0x1
    5ef7:	call   3c20 <__fxstat@plt>
    5efc:	test   eax,eax
    5efe:	setne  al
    5f01:	test   al,al
    5f03:	jne    6cf8 <main+0x2dd8>
    5f09:	mov    eax,DWORD PTR [rsp+0x2d8]
    5f10:	and    eax,0xf000
    5f15:	cmp    eax,0x8000
    5f1a:	jne    5e5b <main+0x1f3b>
    5f20:	cmp    QWORD PTR [rip+0x182f8],0x0        # 1e220 <size_bound.9125>
    5f28:	mov    r15,QWORD PTR [rsp+0x2f0]
    5f30:	jne    5e7f <main+0x1f5f>
    5f36:	mov    rax,QWORD PTR [rip+0x1851b]        # 1e458 <sort_size>
    5f3d:	mov    QWORD PTR [rip+0x182dc],rax        # 1e220 <size_bound.9125>
    5f44:	test   rax,rax
    5f47:	jne    5e7f <main+0x1f5f>
    5f4d:	lea    rsi,[rsp+0x90]
    5f55:	mov    edi,0x2
    5f5a:	mov    QWORD PTR [rsp+0x40],rsi
    5f5f:	call   3e10 <getrlimit@plt>
    5f64:	or     rdx,0xffffffffffffffff
    5f68:	mov    rsi,QWORD PTR [rsp+0x40]
    5f6d:	test   eax,eax
    5f6f:	jne    5f79 <main+0x2059>
    5f71:	mov    rdx,QWORD PTR [rsp+0x90]
    5f79:	mov    edi,0x9
    5f7e:	mov    QWORD PTR [rsp+0x50],rdx
    5f83:	mov    QWORD PTR [rsp+0x40],rsi
    5f88:	call   3e10 <getrlimit@plt>
    5f8d:	mov    rsi,QWORD PTR [rsp+0x40]
    5f92:	mov    rdx,QWORD PTR [rsp+0x50]
    5f97:	test   eax,eax
    5f99:	jne    5faa <main+0x208a>
    5f9b:	mov    rax,QWORD PTR [rsp+0x90]
    5fa3:	cmp    rdx,rax
    5fa6:	cmova  rdx,rax
    5faa:	shr    rdx,1
    5fad:	mov    edi,0x5
    5fb2:	mov    QWORD PTR [rsp+0x40],rdx
    5fb7:	call   3e10 <getrlimit@plt>
    5fbc:	mov    rdx,QWORD PTR [rsp+0x40]
    5fc1:	test   eax,eax
    5fc3:	jne    5fdc <main+0x20bc>
    5fc5:	mov    rax,QWORD PTR [rsp+0x90]
    5fcd:	shr    rax,0x4
    5fd1:	imul   rax,rax,0xf
    5fd5:	cmp    rdx,rax
    5fd8:	cmova  rdx,rax
    5fdc:	mov    QWORD PTR [rsp+0x50],rdx
    5fe1:	call   f4a0 <physmem_available>
    5fe6:	movsd  QWORD PTR [rsp+0x40],xmm0
    5fec:	call   f3c0 <physmem_total>
    5ff1:	movsd  xmm1,QWORD PTR [rsp+0x40]
    5ff7:	mov    rdx,QWORD PTR [rsp+0x50]
    5ffc:	movsd  xmm2,QWORD PTR [rip+0x11154]        # 17158 <short_options+0x1ce8>
    6004:	mulsd  xmm2,xmm0
    6008:	mulsd  xmm0,QWORD PTR [rip+0x11150]        # 17160 <short_options+0x1cf0>
    6010:	maxsd  xmm1,xmm2
    6014:	pxor   xmm2,xmm2
    6018:	cvtsi2sd xmm2,rdx
    601d:	comisd xmm2,xmm0
    6021:	jbe    603a <main+0x211a>
    6023:	movsd  xmm2,QWORD PTR [rip+0x11125]        # 17150 <short_options+0x1ce0>
    602b:	comisd xmm0,xmm2
    602f:	jae    650e <main+0x25ee>
    6035:	cvttsd2si rdx,xmm0
    603a:	test   rdx,rdx
    603d:	js     6198 <main+0x2278>
    6043:	pxor   xmm0,xmm0
    6047:	cvtsi2sd xmm0,rdx
    604c:	comisd xmm0,xmm1
    6050:	jbe    6065 <main+0x2145>
    6052:	comisd xmm1,QWORD PTR [rip+0x110f6]        # 17150 <short_options+0x1ce0>
    605a:	jae    6528 <main+0x2608>
    6060:	cvttsd2si rdx,xmm1
    6065:	mov    eax,DWORD PTR [rip+0x17fb9]        # 1e024 <nmerge>
    606b:	imul   rax,rax,0x22
    606f:	cmp    rax,rdx
    6072:	cmovb  rax,rdx
    6076:	mov    QWORD PTR [rip+0x181a3],rax        # 1e220 <size_bound.9125>
    607d:	jmp    5e7f <main+0x1f5f>
    6082:	mov    rsi,r15
    6085:	mov    edi,0x1
    608a:	call   3bb0 <__xstat@plt>
    608f:	test   eax,eax
    6091:	setne  al
    6094:	jmp    5f01 <main+0x1fe1>
    6099:	mov    rdi,QWORD PTR [rsp+0x10]
    609e:	call   3b90 <fileno@plt>
    60a3:	mov    rdx,r14
    60a6:	mov    edi,0x1
    60ab:	mov    esi,eax
    60ad:	call   3c20 <__fxstat@plt>
    60b2:	test   eax,eax
    60b4:	setne  al
    60b7:	jmp    5f01 <main+0x1fe1>
    60bc:	mov    rcx,QWORD PTR [rsp+0x20]
    60c1:	mov    edx,0x1
    60c6:	mov    eax,0x1
    60cb:	jmp    60d4 <main+0x21b4>
    60cd:	add    rax,rax
    60d0:	add    rdx,0x1
    60d4:	cmp    rcx,rax
    60d7:	ja     60cd <main+0x21ad>
    60d9:	shl    rdx,0x5
    60dd:	mov    QWORD PTR [rsp+0x80],rdx
    60e5:	jmp    586a <main+0x194a>
    60ea:	mov    r12,rsi
    60ed:	lea    rax,[rsp+0x150]
    60f5:	mov    rsi,QWORD PTR [rsp+0x80]
    60fd:	mov    rdx,r12
    6100:	mov    rdi,rax
    6103:	mov    QWORD PTR [rsp+0x58],rax
    6108:	call   74a0 <initbuf>
    610d:	jmp    5888 <main+0x1968>
    6112:	cmp    BYTE PTR [rip+0x18321],0x0        # 1e43a <stable>
    6119:	jne    612c <main+0x220c>
    611b:	cmp    BYTE PTR [rip+0x18317],0x0        # 1e439 <unique>
    6122:	jne    612c <main+0x220c>
    6124:	mov    BYTE PTR [rsp+0x187],0x0
    612c:	lea    r12,[rsp+0x3b0]
    6134:	mov    rdi,QWORD PTR [rsp+0x58]
    6139:	mov    rsi,r12
    613c:	call   70a0 <key_to_opts>
    6141:	xor    eax,eax
    6143:	mov    rdi,r12
    6146:	or     rcx,0xffffffffffffffff
    614a:	repnz scas al,BYTE PTR es:[rdi]
    614c:	mov    r8d,0x5
    6152:	lea    rdx,[rip+0x10daf]        # 16f08 <short_options+0x1a98>
    6159:	xor    edi,edi
    615b:	lea    rsi,[rip+0x10dc0]        # 16f22 <short_options+0x1ab2>
    6162:	mov    rax,rcx
    6165:	not    rax
    6168:	lea    rcx,[rax-0x1]
    616c:	call   3d50 <dcngettext@plt>
    6171:	mov    rcx,r12
    6174:	xor    esi,esi
    6176:	xor    edi,edi
    6178:	mov    rdx,rax
    617b:	xor    eax,eax
    617d:	call   3ce0 <error@plt>
    6182:	mov    BYTE PTR [rsp+0x187],r13b
    618a:	test   r13b,r13b
    618d:	jne    52ea <main+0x13ca>
    6193:	jmp    5327 <main+0x1407>
    6198:	mov    rax,rdx
    619b:	mov    rcx,rdx
    619e:	pxor   xmm0,xmm0
    61a2:	shr    rax,1
    61a5:	and    ecx,0x1
    61a8:	or     rax,rcx
    61ab:	cvtsi2sd xmm0,rax
    61b0:	addsd  xmm0,xmm0
    61b4:	jmp    604c <main+0x212c>
    61b9:	mov    r14,QWORD PTR [rbp+0x0]
    61bd:	lea    rsi,[rip+0x10e3e]        # 17002 <short_options+0x1b92>
    61c4:	mov    rdi,r14
    61c7:	call   9580 <stream_open>
    61cc:	mov    r13,rax
    61cf:	test   rax,rax
    61d2:	je     6b8d <main+0x2c6d>
    61d8:	mov    rax,QWORD PTR [rip+0x18251]        # 1e430 <keylist>
    61df:	movzx  ebx,BYTE PTR [rip+0x18253]        # 1e439 <unique>
    61e6:	mov    esi,0x20
    61eb:	mov    QWORD PTR [rsp+0x10],rax
    61f0:	xor    ebx,0x1
    61f3:	mov    rax,QWORD PTR [rip+0x17e36]        # 1e030 <merge_buffer_size>
    61fa:	cmp    QWORD PTR [rip+0x18257],rax        # 1e458 <sort_size>
    6201:	cmovae rax,QWORD PTR [rip+0x1824f]        # 1e458 <sort_size>
    6209:	movzx  ebx,bl
    620c:	xor    r15d,r15d
    620f:	mov    rdx,rax
    6212:	lea    rax,[rsp+0x150]
    621a:	mov    rdi,rax
    621d:	mov    QWORD PTR [rsp+0x58],rax
    6222:	call   74a0 <initbuf>
    6227:	lea    rax,[rsp+0x90]
    622f:	mov    QWORD PTR [rsp+0x90],0x0
    623b:	mov    QWORD PTR [rsp+0x8],0x0
    6244:	mov    QWORD PTR [rsp+0x18],rax
    6249:	mov    rdi,QWORD PTR [rsp+0x58]
    624e:	mov    rdx,r14
    6251:	mov    rsi,r13
    6254:	call   8c50 <fillbuf>
    6259:	test   al,al
    625b:	je     6cee <main+0x2dce>
    6261:	mov    rax,QWORD PTR [rsp+0x160]
    6269:	mov    rdi,QWORD PTR [rsp+0x168]
    6271:	add    rdi,QWORD PTR [rsp+0x150]
    6279:	shl    rax,0x5
    627d:	mov    r12,rdi
    6280:	lea    rbp,[rdi-0x20]
    6284:	sub    r12,rax
    6287:	test   r15,r15
    628a:	je     62a5 <main+0x2385>
    628c:	jmp    63e1 <main+0x24c1>
    6291:	sub    rbp,0x20
    6295:	mov    rsi,rbp
    6298:	call   9bc0 <compare>
    629d:	cmp    ebx,eax
    629f:	jle    63f6 <main+0x24d6>
    62a5:	mov    rdi,rbp
    62a8:	cmp    r12,rbp
    62ab:	jb     6291 <main+0x2371>
    62ad:	mov    rdx,QWORD PTR [rbp+0x8]
    62b1:	mov    rsi,QWORD PTR [rsp+0x160]
    62b9:	add    QWORD PTR [rsp+0x8],rsi
    62be:	cmp    r15,rdx
    62c1:	jb     6323 <main+0x2403>
    62c3:	mov    rsi,QWORD PTR [rbp+0x0]
    62c7:	mov    rdi,QWORD PTR [rsp+0x90]
    62cf:	call   3b80 <memcpy@plt>
    62d4:	mov    rax,QWORD PTR [rbp+0x8]
    62d8:	cmp    QWORD PTR [rsp+0x10],0x0
    62de:	mov    QWORD PTR [rsp+0x98],rax
    62e6:	je     6249 <main+0x2329>
    62ec:	mov    rdx,QWORD PTR [rbp+0x10]
    62f0:	mov    rax,QWORD PTR [rsp+0x90]
    62f8:	mov    rcx,QWORD PTR [rbp+0x0]
    62fc:	add    rdx,rax
    62ff:	add    rax,QWORD PTR [rbp+0x18]
    6303:	sub    rdx,rcx
    6306:	sub    rax,rcx
    6309:	mov    QWORD PTR [rsp+0xa0],rdx
    6311:	mov    QWORD PTR [rsp+0xa8],rax
    6319:	jmp    6249 <main+0x2329>
    631e:	cmp    rdx,r15
    6321:	jbe    632b <main+0x240b>
    6323:	add    r15,r15
    6326:	jne    631e <main+0x23fe>
    6328:	mov    r15,rdx
    632b:	mov    rdi,QWORD PTR [rsp+0x90]
    6333:	call   d750 <rpl_free>
    6338:	mov    rdi,r15
    633b:	call   13000 <xmalloc>
    6340:	mov    rdx,QWORD PTR [rbp+0x8]
    6344:	mov    QWORD PTR [rsp+0x90],rax
    634c:	jmp    62c3 <main+0x23a3>
    6351:	cmp    BYTE PTR [r15+0x31],0x0
    6356:	jne    49ef <main+0xacf>
    635c:	cmp    QWORD PTR [r15+0x18],0x0
    6361:	je     49ef <main+0xacf>
    6367:	jmp    5cc6 <main+0x1da6>
    636c:	movzx  eax,BYTE PTR [rsp+0x137]
    6374:	mov    BYTE PTR [rip+0x180c1],al        # 1e43b <reverse>
    637a:	jmp    533e <main+0x141e>
    637f:	mov    esi,0x48
    6384:	call   13370 <xmemdup>
    6389:	mov    rdx,QWORD PTR [rip+0x180a0]        # 1e430 <keylist>
    6390:	lea    rcx,[rip+0x18099]        # 1e430 <keylist>
    6397:	test   rdx,rdx
    639a:	je     63a6 <main+0x2486>
    639c:	lea    rcx,[rdx+0x40]
    63a0:	mov    rdx,QWORD PTR [rdx+0x40]
    63a4:	jmp    6397 <main+0x2477>
    63a6:	mov    QWORD PTR [rcx],rax
    63a9:	mov    r8,QWORD PTR [rip+0x18080]        # 1e430 <keylist>
    63b0:	mov    r13d,0x1
    63b6:	mov    QWORD PTR [rax+0x40],0x0
    63be:	movzx  r15d,BYTE PTR [rsp+0x133]
    63c7:	test   r8,r8
    63ca:	jne    45f8 <main+0x6d8>
    63d0:	jmp    463c <main+0x71c>
    63d5:	lea    rdi,[rip+0x1089e]        # 16c7a <short_options+0x180a>
    63dc:	jmp    5bc8 <main+0x1ca8>
    63e1:	mov    rdi,QWORD PTR [rsp+0x18]
    63e6:	mov    rsi,rbp
    63e9:	call   9bc0 <compare>
    63ee:	cmp    ebx,eax
    63f0:	jg     62a5 <main+0x2385>
    63f6:	xor    ebx,ebx
    63f8:	cmp    BYTE PTR [rsp+0x20],0x63
    63fd:	je     6828 <main+0x2908>
    6403:	mov    rsi,r14
    6406:	mov    rdi,r13
    6409:	xor    ebx,0x1
    640c:	call   96d0 <xfclose>
    6411:	mov    rdi,QWORD PTR [rsp+0x150]
    6419:	call   d750 <rpl_free>
    641e:	mov    rdi,QWORD PTR [rsp+0x90]
    6426:	call   d750 <rpl_free>
    642b:	movzx  edi,bl
    642e:	call   3de0 <exit@plt>
    6433:	mov    rdi,QWORD PTR [rsp+0x68]
    6438:	mov    esi,0x10
    643d:	call   13330 <xcalloc>
    6442:	mov    rdi,rax
    6445:	xor    eax,eax
    6447:	mov    rcx,QWORD PTR [rbp+rax*8+0x0]
    644c:	mov    rdx,rax
    644f:	shl    rdx,0x4
    6453:	mov    QWORD PTR [rdi+rdx*1],rcx
    6457:	mov    rdx,rax
    645a:	add    rax,0x1
    645e:	cmp    rdx,r13
    6461:	jne    6447 <main+0x2527>
    6463:	mov    rcx,QWORD PTR [rsp+0x38]
    6468:	mov    rdx,QWORD PTR [rsp+0x68]
    646d:	xor    esi,esi
    646f:	call   ac50 <merge>
    6474:	jmp    5add <main+0x1bbd>
    6479:	mov    rax,QWORD PTR [rsp+0xb8]
    6481:	or     rax,QWORD PTR [rsp+0xb0]
    6489:	jne    6497 <main+0x2577>
    648b:	mov    QWORD PTR [rsp+0xb0],0xffffffffffffffff
    6497:	mov    rdx,QWORD PTR [rip+0x17d42]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    649e:	jmp    4bf8 <main+0xcd8>
    64a3:	add    rdx,0x1
    64a7:	jmp    4e7f <main+0xf5f>
    64ac:	mov    rdi,QWORD PTR [rsp+0x150]
    64b4:	call   d750 <rpl_free>
    64b9:	mov    rdi,QWORD PTR [rsp+0x8]
    64be:	mov    esi,0x10
    64c3:	mov    rbx,QWORD PTR [rip+0x17ebe]        # 1e388 <temphead>
    64ca:	call   13150 <xnmalloc>
    64cf:	mov    rbp,rax
    64d2:	jmp    64e7 <main+0x25c7>
    64d4:	mov    QWORD PTR [rax+0x8],rbx
    64d8:	lea    rdx,[rbx+0xd]
    64dc:	mov    rbx,QWORD PTR [rbx]
    64df:	add    rax,0x10
    64e3:	mov    QWORD PTR [rax-0x10],rdx
    64e7:	test   rbx,rbx
    64ea:	jne    64d4 <main+0x25b4>
    64ec:	mov    rsi,QWORD PTR [rsp+0x8]
    64f1:	mov    rcx,QWORD PTR [rsp+0x38]
    64f6:	mov    rdi,rbp
    64f9:	mov    rdx,rsi
    64fc:	call   ac50 <merge>
    6501:	mov    rdi,rbp
    6504:	call   d750 <rpl_free>
    6509:	jmp    5ad4 <main+0x1bb4>
    650e:	subsd  xmm0,xmm2
    6512:	mov    eax,0x1
    6517:	shl    rax,0x3f
    651b:	cvttsd2si rdx,xmm0
    6520:	xor    rdx,rax
    6523:	jmp    603a <main+0x211a>
    6528:	subsd  xmm1,QWORD PTR [rip+0x10c20]        # 17150 <short_options+0x1ce0>
    6530:	mov    eax,0x1
    6535:	shl    rax,0x3f
    6539:	cvttsd2si rdx,xmm1
    653e:	xor    rdx,rax
    6541:	jmp    6065 <main+0x2145>
    6546:	mov    edi,0x2
    654b:	call   f260 <num_processors>
    6550:	mov    edx,0x8
    6555:	cmp    rax,0x8
    6559:	cmovbe rdx,rax
    655d:	mov    QWORD PTR [rsp+0x48],rdx
    6562:	jmp    57c7 <main+0x18a7>
    6567:	add    rdi,0x1
    656b:	lea    rsi,[rsp+0xc8]
    6573:	mov    DWORD PTR [rsp+0x68],r9d
    6578:	lea    rdx,[rip+0x107ee]        # 16d6d <short_options+0x18fd>
    657f:	mov    QWORD PTR [rsp+0x60],r8
    6584:	call   9490 <parse_field_count>
    6589:	mov    r9d,DWORD PTR [rsp+0x68]
    658e:	mov    r8,QWORD PTR [rsp+0x60]
    6593:	mov    rdi,rax
    6596:	jmp    5c27 <main+0x1d07>
    659b:	cmp    QWORD PTR [rip+0x17e8d],0x0        # 1e430 <keylist>
    65a3:	je     5327 <main+0x1407>
    65a9:	lea    r12,[rsp+0x3b0]
    65b1:	mov    rdi,QWORD PTR [rsp+0x58]
    65b6:	mov    rsi,r12
    65b9:	call   70a0 <key_to_opts>
    65be:	xor    eax,eax
    65c0:	mov    rdi,r12
    65c3:	or     rcx,0xffffffffffffffff
    65c7:	repnz scas al,BYTE PTR es:[rdi]
    65c9:	mov    r8d,0x5
    65cf:	lea    rdx,[rip+0x10932]        # 16f08 <short_options+0x1a98>
    65d6:	xor    edi,edi
    65d8:	lea    rsi,[rip+0x10943]        # 16f22 <short_options+0x1ab2>
    65df:	mov    rax,rcx
    65e2:	not    rax
    65e5:	lea    rcx,[rax-0x1]
    65e9:	call   3d50 <dcngettext@plt>
    65ee:	mov    rcx,r12
    65f1:	xor    esi,esi
    65f3:	xor    edi,edi
    65f5:	mov    rdx,rax
    65f8:	xor    eax,eax
    65fa:	call   3ce0 <error@plt>
    65ff:	mov    BYTE PTR [rsp+0x187],0x1
    6607:	jmp    52ea <main+0x13ca>
    660c:	mov    QWORD PTR [rcx],rax
    660f:	mov    QWORD PTR [rax+0x40],0x0
    6617:	jmp    4470 <main+0x550>
    661c:	lea    rdi,[rsp+0x3b0]
    6624:	mov    BYTE PTR [rsp+0x3b0],dl
    662b:	mov    BYTE PTR [rsp+0x3b1],0x0
    6633:	call   11570 <quote>
    6638:	mov    edx,0x5
    663d:	lea    rsi,[rip+0x102ec]        # 16930 <short_options+0x14c0>
    6644:	xor    edi,edi
    6646:	mov    r12,rax
    6649:	call   3960 <dcgettext@plt>
    664e:	mov    rcx,r12
    6651:	xor    esi,esi
    6653:	xor    edi,edi
    6655:	mov    rdx,rax
    6658:	xor    eax,eax
    665a:	call   3ce0 <error@plt>
    665f:	mov    eax,DWORD PTR [rip+0x179c3]        # 1e028 <tab>
    6665:	cmp    eax,0x80
    666a:	jne    51fc <main+0x12dc>
    6670:	cmp    DWORD PTR [rip+0x1820a],0x80        # 1e884 <thousands_sep>
    667a:	je     5224 <main+0x1304>
    6680:	mov    rax,QWORD PTR [rsp+0x8]
    6685:	movzx  edx,BYTE PTR [rip+0x181fc]        # 1e888 <decimal_point>
    668c:	mov    rax,QWORD PTR [rax]
    668f:	test   BYTE PTR [rax+rdx*2],0x1
    6693:	je     5224 <main+0x1304>
    6699:	movzx  eax,BYTE PTR [rip+0x181e8]        # 1e888 <decimal_point>
    66a0:	lea    rdi,[rsp+0x3b0]
    66a8:	mov    BYTE PTR [rsp+0x3b1],0x0
    66b0:	mov    BYTE PTR [rsp+0x3b0],al
    66b7:	call   11570 <quote>
    66bc:	xor    edi,edi
    66be:	mov    edx,0x5
    66c3:	lea    rsi,[rip+0x102a6]        # 16970 <short_options+0x1500>
    66ca:	mov    r12,rax
    66cd:	call   3960 <dcgettext@plt>
    66d2:	xor    esi,esi
    66d4:	xor    edi,edi
    66d6:	mov    rcx,r12
    66d9:	mov    rdx,rax
    66dc:	xor    eax,eax
    66de:	call   3ce0 <error@plt>
    66e3:	test   r13b,r13b
    66e6:	jne    5234 <main+0x1314>
    66ec:	jmp    5248 <main+0x1328>
    66f1:	xor    edi,edi
    66f3:	mov    edx,0x5
    66f8:	lea    rsi,[rip+0x10361]        # 16a60 <short_options+0x15f0>
    66ff:	call   3960 <dcgettext@plt>
    6704:	xor    esi,esi
    6706:	xor    edi,edi
    6708:	mov    rdx,rax
    670b:	xor    eax,eax
    670d:	call   3ce0 <error@plt>
    6712:	jmp    5248 <main+0x1328>
    6717:	cmp    edx,0x80
    671d:	je     6734 <main+0x2814>
    671f:	mov    rsi,QWORD PTR [rsp+0x8]
    6724:	movzx  eax,dl
    6727:	mov    rcx,QWORD PTR [rsi]
    672a:	test   BYTE PTR [rcx+rax*2],0x1
    672e:	jne    661c <main+0x26fc>
    6734:	mov    BYTE PTR [rsp+0x28],0x0
    6739:	jmp    6670 <main+0x2750>
    673e:	mov    rsi,QWORD PTR [rsp+0x18]
    6743:	mov    rdi,QWORD PTR [rsp+0x10]
    6748:	mov    QWORD PTR [rsp+0x170],rdx
    6750:	call   96d0 <xfclose>
    6755:	jmp    5d2c <main+0x1e0c>
    675a:	mov    edx,0x5
    675f:	lea    rsi,[rip+0xff8a]        # 166f0 <short_options+0x1280>
    6766:	xor    edi,edi
    6768:	call   3960 <dcgettext@plt>
    676d:	xor    esi,esi
    676f:	mov    edi,0x2
    6774:	mov    rdx,rax
    6777:	xor    eax,eax
    6779:	call   3ce0 <error@plt>
    677e:	mov    edx,0x5
    6783:	lea    rsi,[rip+0xff86]        # 16710 <short_options+0x12a0>
    678a:	jmp    6766 <main+0x2846>
    678c:	lea    rdi,[rsp+0x3b0]
    6794:	mov    WORD PTR [rsp+0x3b0],0x2d
    679e:	call   11570 <quote>
    67a3:	mov    edx,0x5
    67a8:	lea    rsi,[rip+0x10201]        # 169b0 <short_options+0x1540>
    67af:	mov    r12,rax
    67b2:	xor    edi,edi
    67b4:	call   3960 <dcgettext@plt>
    67b9:	mov    rcx,r12
    67bc:	xor    esi,esi
    67be:	xor    edi,edi
    67c0:	mov    rdx,rax
    67c3:	xor    eax,eax
    67c5:	call   3ce0 <error@plt>
    67ca:	jmp    5224 <main+0x1304>
    67cf:	lea    rsi,[rip+0x1044c]        # 16c22 <short_options+0x17b2>
    67d6:	xor    edi,edi
    67d8:	mov    edx,0x5
    67dd:	call   3960 <dcgettext@plt>
    67e2:	lea    rsi,[rip+0x1172d]        # 17f16 <version_etc_copyright+0x116>
    67e9:	mov    rdi,rax
    67ec:	call   7440 <sort_die>
    67f1:	mov    edx,0x5
    67f6:	lea    rsi,[rip+0x106a3]        # 16ea0 <short_options+0x1a30>
    67fd:	jmp    6766 <main+0x2846>
    6802:	mov    rdi,QWORD PTR [rip+0x179d7]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    6809:	lea    rsi,[rip+0x10576]        # 16d86 <short_options+0x1916>
    6810:	call   73f0 <badfieldspec>
    6815:	mov    rdi,QWORD PTR [rip+0x179c4]        # 1e1e0 <optarg@@GLIBC_2.2.5>
    681c:	lea    rsi,[rip+0x105b1]        # 16dd4 <short_options+0x1964>
    6823:	call   73f0 <badfieldspec>
    6828:	mov    rdi,QWORD PTR [rsp+0x168]
    6830:	add    rdi,QWORD PTR [rsp+0x150]
    6838:	lea    rsi,[rsp+0x3b0]
    6840:	sub    rdi,rbp
    6843:	sar    rdi,0x5
    6847:	add    rdi,QWORD PTR [rsp+0x8]
    684c:	call   eef0 <umaxtostr>
    6851:	mov    r12,QWORD PTR [rip+0x18050]        # 1e8a8 <program_name>
    6858:	xor    edi,edi
    685a:	mov    edx,0x5
    685f:	lea    rsi,[rip+0x106db]        # 16f41 <short_options+0x1ad1>
    6866:	mov    r15,rax
    6869:	call   3960 <dcgettext@plt>
    686e:	mov    r9,r15
    6871:	mov    r8,r14
    6874:	mov    rcx,r12
    6877:	mov    rdi,QWORD PTR [rip+0x17982]        # 1e200 <stderr@@GLIBC_2.2.5>
    687e:	mov    rdx,rax
    6881:	mov    esi,0x1
    6886:	xor    eax,eax
    6888:	call   3e00 <__fprintf_chk@plt>
    688d:	xor    edi,edi
    688f:	mov    edx,0x5
    6894:	lea    rsi,[rip+0x106bc]        # 16f57 <short_options+0x1ae7>
    689b:	call   3960 <dcgettext@plt>
    68a0:	mov    rsi,QWORD PTR [rip+0x17959]        # 1e200 <stderr@@GLIBC_2.2.5>
    68a7:	mov    rdi,rbp
    68aa:	mov    rdx,rax
    68ad:	call   9750 <write_line>
    68b2:	jmp    6403 <main+0x24e3>
    68b7:	add    rdi,0x1
    68bb:	xor    edx,edx
    68bd:	lea    rsi,[rsp+0xb8]
    68c5:	call   9490 <parse_field_count>
    68ca:	mov    r8,QWORD PTR [rsp+0x68]
    68cf:	mov    r9d,DWORD PTR [rsp+0x70]
    68d4:	mov    rdi,rax
    68d7:	mov    rax,QWORD PTR [rsp+0xb0]
    68df:	or     rax,QWORD PTR [rsp+0xb8]
    68e7:	jne    54d6 <main+0x15b6>
    68ed:	jmp    54ca <main+0x15aa>
    68f2:	mov    QWORD PTR [rsp+0x68],rdi
    68f7:	mov    DWORD PTR [rsp+0x60],r9d
    68fc:	call   f3c0 <physmem_total>
    6901:	mov    r9d,DWORD PTR [rsp+0x60]
    6906:	mov    rdi,QWORD PTR [rsp+0x68]
    690b:	mov    rax,QWORD PTR [rsp+0x150]
    6913:	movapd xmm1,xmm0
    6917:	test   rax,rax
    691a:	js     69d8 <main+0x2ab8>
    6920:	pxor   xmm0,xmm0
    6924:	cvtsi2sd xmm0,rax
    6929:	movsd  xmm4,QWORD PTR [rip+0x10817]        # 17148 <short_options+0x1cd8>
    6931:	mulsd  xmm0,xmm1
    6935:	divsd  xmm0,QWORD PTR [rip+0x10803]        # 17140 <short_options+0x1cd0>
    693d:	comisd xmm4,xmm0
    6941:	jbe    5d3a <main+0x1e1a>
    6947:	comisd xmm0,QWORD PTR [rip+0x10801]        # 17150 <short_options+0x1ce0>
    694f:	jae    69b4 <main+0x2a94>
    6951:	cvttsd2si rax,xmm0
    6956:	mov    QWORD PTR [rsp+0x150],rax
    695e:	jmp    4c93 <main+0xd73>
    6963:	call   11570 <quote>
    6968:	mov    edx,0x5
    696d:	lea    rsi,[rip+0x10515]        # 16e89 <short_options+0x1a19>
    6974:	mov    r12,rax
    6977:	xor    edi,edi
    6979:	call   3960 <dcgettext@plt>
    697e:	mov    rcx,r12
    6981:	xor    esi,esi
    6983:	mov    edi,0x2
    6988:	mov    rdx,rax
    698b:	xor    eax,eax
    698d:	call   3ce0 <error@plt>
    6992:	mov    edx,0x5
    6997:	lea    rsi,[rip+0x104de]        # 16e7c <short_options+0x1a0c>
    699e:	jmp    6766 <main+0x2846>
    69a3:	mov    edx,0x5
    69a8:	lea    rsi,[rip+0xfce9]        # 16698 <short_options+0x1228>
    69af:	jmp    6766 <main+0x2846>
    69b4:	subsd  xmm0,QWORD PTR [rip+0x10794]        # 17150 <short_options+0x1ce0>
    69bc:	cvttsd2si rax,xmm0
    69c1:	mov    QWORD PTR [rsp+0x150],rax
    69c9:	btc    QWORD PTR [rsp+0x150],0x3f
    69d3:	jmp    4c93 <main+0xd73>
    69d8:	mov    rdx,rax
    69db:	and    eax,0x1
    69de:	pxor   xmm0,xmm0
    69e2:	shr    rdx,1
    69e5:	or     rdx,rax
    69e8:	cvtsi2sd xmm0,rdx
    69ed:	addsd  xmm0,xmm0
    69f1:	jmp    6929 <main+0x2a09>
    69f6:	cmp    QWORD PTR [rsp+0x28],0x0
    69fc:	je     4539 <main+0x619>
    6a02:	test   rbx,rbx
    6a05:	jne    4b79 <main+0xc59>
    6a0b:	mov    rdi,QWORD PTR [rsp+0x28]
    6a10:	lea    rsi,[rip+0x105eb]        # 17002 <short_options+0x1b92>
    6a17:	call   9580 <stream_open>
    6a1c:	mov    r13,rax
    6a1f:	test   rax,rax
    6a22:	je     6b2f <main+0x2c0f>
    6a28:	lea    r12,[rsp+0x1a0]
    6a30:	mov    rdi,r12
    6a33:	call   11fb0 <readtokens0_init>
    6a38:	mov    rsi,r12
    6a3b:	mov    rdi,r13
    6a3e:	call   12060 <readtokens0>
    6a43:	mov    rsi,QWORD PTR [rsp+0x28]
    6a48:	test   al,al
    6a4a:	jne    6a6a <main+0x2b4a>
    6a4c:	mov    edi,0x4
    6a51:	call   11270 <quotearg_style>
    6a56:	mov    edx,0x5
    6a5b:	lea    rsi,[rip+0xfd36]        # 16798 <short_options+0x1328>
    6a62:	mov    r12,rax
    6a65:	jmp    6977 <main+0x2a57>
    6a6a:	mov    rdi,r13
    6a6d:	call   96d0 <xfclose>
    6a72:	cmp    QWORD PTR [rsp+0x1a0],0x0
    6a7b:	je     6ae7 <main+0x2bc7>
    6a7d:	mov    rdi,rbp
    6a80:	lea    r15,[rip+0x1148f]        # 17f16 <version_etc_copyright+0x116>
    6a87:	call   d750 <rpl_free>
    6a8c:	mov    rbp,QWORD PTR [rsp+0x1a8]
    6a94:	mov    r12,QWORD PTR [rsp+0x1a0]
    6a9c:	jmp    6aa9 <main+0x2b89>
    6a9e:	add    rbx,0x1
    6aa2:	cmp    BYTE PTR [r13+0x0],0x0
    6aa7:	je     6b0a <main+0x2bea>
    6aa9:	cmp    rbx,r12
    6aac:	je     4539 <main+0x619>
    6ab2:	mov    r13,QWORD PTR [rbp+rbx*8+0x0]
    6ab7:	mov    rsi,r15
    6aba:	mov    rdi,r13
    6abd:	call   3b20 <strcmp@plt>
    6ac2:	test   eax,eax
    6ac4:	jne    6a9e <main+0x2b7e>
    6ac6:	mov    rsi,r13
    6ac9:	mov    edi,0x4
    6ace:	call   11270 <quotearg_style>
    6ad3:	mov    edx,0x5
    6ad8:	lea    rsi,[rip+0xfcd9]        # 167b8 <short_options+0x1348>
    6adf:	mov    r12,rax
    6ae2:	jmp    6977 <main+0x2a57>
    6ae7:	mov    rsi,QWORD PTR [rsp+0x28]
    6aec:	mov    edi,0x4
    6af1:	call   11270 <quotearg_style>
    6af6:	mov    edx,0x5
    6afb:	lea    rsi,[rip+0x103da]        # 16edc <short_options+0x1a6c>
    6b02:	mov    r12,rax
    6b05:	jmp    6977 <main+0x2a57>
    6b0a:	mov    rdx,QWORD PTR [rsp+0x28]
    6b0f:	mov    esi,0x3
    6b14:	xor    edi,edi
    6b16:	call   11390 <quotearg_n_style_colon>
    6b1b:	mov    edx,0x5
    6b20:	lea    rsi,[rip+0xfcd1]        # 167f8 <short_options+0x1388>
    6b27:	mov    r12,rax
    6b2a:	jmp    500c <main+0x10ec>
    6b2f:	mov    rdi,QWORD PTR [rsp+0x28]
    6b34:	call   96a0 <xfopen.part.0>
    6b39:	mov    esi,DWORD PTR [rsp+0x68]
    6b3d:	mov    r8,rdi
    6b40:	mov    edx,0xffffff87
    6b45:	mov    edi,eax
    6b47:	lea    rcx,[rip+0x16a92]        # 1d5e0 <long_options>
    6b4e:	call   136e0 <xstrtol_fatal>
    6b53:	mov    edx,0x5
    6b58:	lea    rsi,[rip+0x100c3]        # 16c22 <short_options+0x17b2>
    6b5f:	xor    edi,edi
    6b61:	call   3960 <dcgettext@plt>
    6b66:	mov    rsi,QWORD PTR [rsp+0x40]
    6b6b:	mov    rdi,rax
    6b6e:	call   7440 <sort_die>
    6b73:	cmp    QWORD PTR [rsp+0x40],0x0
    6b79:	je     6c50 <main+0x2d30>
    6b7f:	mov    edx,0x5
    6b84:	lea    rsi,[rip+0x1007d]        # 16c08 <short_options+0x1798>
    6b8b:	jmp    6b5f <main+0x2c3f>
    6b8d:	mov    rdi,r14
    6b90:	call   96a0 <xfopen.part.0>
    6b95:	add    rdi,0x1
    6b99:	lea    rsi,[rsp+0xc8]
    6ba1:	lea    rdx,[rip+0x101c5]        # 16d6d <short_options+0x18fd>
    6ba8:	call   9490 <parse_field_count>
    6bad:	mov    r9d,DWORD PTR [rsp+0x70]
    6bb2:	mov    r8,QWORD PTR [rsp+0x68]
    6bb7:	mov    rdi,rax
    6bba:	jmp    5563 <main+0x1643>
    6bbf:	lea    rdi,[rsp+0x3b0]
    6bc7:	mov    WORD PTR [rsp+0x3b0],0x2b
    6bd1:	call   11570 <quote>
    6bd6:	mov    edx,0x5
    6bdb:	lea    rsi,[rip+0xfe0e]        # 169f0 <short_options+0x1580>
    6be2:	mov    r12,rax
    6be5:	jmp    67b2 <main+0x2892>
    6bea:	mov    rdi,r11
    6bed:	call   11570 <quote>
    6bf2:	lea    rdx,[rip+0x169e7]        # 1d5e0 <long_options>
    6bf9:	lea    rsi,[rip+0x10236]        # 16e36 <short_options+0x19c6>
    6c00:	xor    edi,edi
    6c02:	mov    rbx,rax
    6c05:	movsxd rax,DWORD PTR [rsp+0x78]
    6c0a:	shl    rax,0x5
    6c0e:	mov    r12,QWORD PTR [rdx+rax*1]
    6c12:	mov    edx,0x5
    6c17:	call   3960 <dcgettext@plt>
    6c1c:	mov    r8,rbx
    6c1f:	xor    esi,esi
    6c21:	xor    edi,edi
    6c23:	mov    rdx,rax
    6c26:	mov    rcx,r12
    6c29:	xor    eax,eax
    6c2b:	call   3ce0 <error@plt>
    6c30:	lea    rdi,[rip+0x10218]        # 16e4f <short_options+0x19df>
    6c37:	call   11570 <quote>
    6c3c:	mov    edx,0x5
    6c41:	lea    rsi,[rip+0x10209]        # 16e51 <short_options+0x19e1>
    6c48:	mov    rbx,rax
    6c4b:	jmp    500c <main+0x10ec>
    6c50:	lea    rax,[rip+0x100cb]        # 16d22 <short_options+0x18b2>
    6c57:	mov    QWORD PTR [rsp+0x40],rax
    6c5c:	jmp    6b7f <main+0x2c5f>
    6c61:	mov    rdi,QWORD PTR [rsp+0x60]
    6c66:	lea    rsi,[rip+0x10119]        # 16d86 <short_options+0x1916>
    6c6d:	call   73f0 <badfieldspec>
    6c72:	mov    rdi,QWORD PTR [rsp+0x38]
    6c77:	call   96a0 <xfopen.part.0>
    6c7c:	mov    rbp,QWORD PTR [r15]
    6c7f:	mov    edx,0x5
    6c84:	lea    rsi,[rip+0x102db]        # 16f66 <short_options+0x1af6>
    6c8b:	xor    edi,edi
    6c8d:	call   3960 <dcgettext@plt>
    6c92:	mov    rsi,rbp
    6c95:	mov    rdi,rax
    6c98:	call   7440 <sort_die>
    6c9d:	mov    BYTE PTR [r8+0x37],0x0
    6ca2:	lea    r9,[rsp+0x3b0]
    6caa:	mov    rdi,r8
    6cad:	mov    WORD PTR [r8+0x30],0x0
    6cb4:	mov    rsi,r9
    6cb7:	call   70a0 <key_to_opts>
    6cbc:	mov    rdi,r9
    6cbf:	call   73c0 <incompatible_options>
    6cc4:	mov    rdi,QWORD PTR [rsp+0x18]
    6cc9:	call   96a0 <xfopen.part.0>
    6cce:	lea    rsi,[rip+0xff33]        # 16c08 <short_options+0x1798>
    6cd5:	xor    edi,edi
    6cd7:	mov    edx,0x5
    6cdc:	call   3960 <dcgettext@plt>
    6ce1:	mov    rsi,QWORD PTR [rsp+0x38]
    6ce6:	mov    rdi,rax
    6ce9:	call   7440 <sort_die>
    6cee:	mov    ebx,0x1
    6cf3:	jmp    6403 <main+0x24e3>
    6cf8:	mov    rbp,QWORD PTR [rsp+0x88]
    6d00:	mov    edx,0x5
    6d05:	lea    rsi,[rip+0x10266]        # 16f72 <short_options+0x1b02>
    6d0c:	mov    rbp,QWORD PTR [rbp+r13*8+0x0]
    6d11:	jmp    6c8b <main+0x2d6b>
    6d16:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006d20 <_start>:
    6d20:	endbr64 
    6d24:	xor    ebp,ebp
    6d26:	mov    r9,rdx
    6d29:	pop    rsi
    6d2a:	mov    rdx,rsp
    6d2d:	and    rsp,0xfffffffffffffff0
    6d31:	push   rax
    6d32:	push   rsp
    6d33:	lea    r8,[rip+0xdd96]        # 14ad0 <__libc_csu_fini>
    6d3a:	lea    rcx,[rip+0xdd1f]        # 14a60 <__libc_csu_init>
    6d41:	lea    rdi,[rip+0xffffffffffffd1d8]        # 3f20 <main>
    6d48:	call   QWORD PTR [rip+0x1728a]        # 1dfd8 <__libc_start_main@GLIBC_2.2.5>
    6d4e:	hlt    
    6d4f:	nop

0000000000006d50 <deregister_tm_clones>:
    6d50:	lea    rdi,[rip+0x17451]        # 1e1a8 <__TMC_END__>
    6d57:	lea    rax,[rip+0x1744a]        # 1e1a8 <__TMC_END__>
    6d5e:	cmp    rax,rdi
    6d61:	je     6d78 <deregister_tm_clones+0x28>
    6d63:	mov    rax,QWORD PTR [rip+0x17266]        # 1dfd0 <_ITM_deregisterTMCloneTable>
    6d6a:	test   rax,rax
    6d6d:	je     6d78 <deregister_tm_clones+0x28>
    6d6f:	jmp    rax
    6d71:	nop    DWORD PTR [rax+0x0]
    6d78:	ret    
    6d79:	nop    DWORD PTR [rax+0x0]

0000000000006d80 <register_tm_clones>:
    6d80:	lea    rdi,[rip+0x17421]        # 1e1a8 <__TMC_END__>
    6d87:	lea    rsi,[rip+0x1741a]        # 1e1a8 <__TMC_END__>
    6d8e:	sub    rsi,rdi
    6d91:	mov    rax,rsi
    6d94:	shr    rsi,0x3f
    6d98:	sar    rax,0x3
    6d9c:	add    rsi,rax
    6d9f:	sar    rsi,1
    6da2:	je     6db8 <register_tm_clones+0x38>
    6da4:	mov    rax,QWORD PTR [rip+0x17245]        # 1dff0 <_ITM_registerTMCloneTable>
    6dab:	test   rax,rax
    6dae:	je     6db8 <register_tm_clones+0x38>
    6db0:	jmp    rax
    6db2:	nop    WORD PTR [rax+rax*1+0x0]
    6db8:	ret    
    6db9:	nop    DWORD PTR [rax+0x0]

0000000000006dc0 <__do_global_dtors_aux>:
    6dc0:	endbr64 
    6dc4:	cmp    BYTE PTR [rip+0x1743d],0x0        # 1e208 <completed.8061>
    6dcb:	jne    6df8 <__do_global_dtors_aux+0x38>
    6dcd:	push   rbp
    6dce:	cmp    QWORD PTR [rip+0x17222],0x0        # 1dff8 <__cxa_finalize@GLIBC_2.2.5>
    6dd6:	mov    rbp,rsp
    6dd9:	je     6de7 <__do_global_dtors_aux+0x27>
    6ddb:	mov    rdi,QWORD PTR [rip+0x17226]        # 1e008 <__dso_handle>
    6de2:	call   3780 <__cxa_finalize@plt>
    6de7:	call   6d50 <deregister_tm_clones>
    6dec:	mov    BYTE PTR [rip+0x17415],0x1        # 1e208 <completed.8061>
    6df3:	pop    rbp
    6df4:	ret    
    6df5:	nop    DWORD PTR [rax]
    6df8:	ret    
    6df9:	nop    DWORD PTR [rax+0x0]

0000000000006e00 <frame_dummy>:
    6e00:	endbr64 
    6e04:	jmp    6d80 <register_tm_clones>
    6e09:	nop    DWORD PTR [rax+0x0]

0000000000006e10 <proctab_hasher>:
    6e10:	endbr64 
    6e14:	movsxd rax,DWORD PTR [rdi+0x8]
    6e18:	xor    edx,edx
    6e1a:	div    rsi
    6e1d:	mov    rax,rdx
    6e20:	ret    
    6e21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    6e2c:	nop    DWORD PTR [rax+0x0]

0000000000006e30 <proctab_comparator>:
    6e30:	endbr64 
    6e34:	mov    eax,DWORD PTR [rsi+0x8]
    6e37:	cmp    DWORD PTR [rdi+0x8],eax
    6e3a:	sete   al
    6e3d:	ret    
    6e3e:	xchg   ax,ax

0000000000006e40 <traverse_raw_number>:
    6e40:	mov    rax,QWORD PTR [rdi]
    6e43:	movsx  ecx,BYTE PTR [rax]
    6e46:	lea    rsi,[rax+0x1]
    6e4a:	mov    edx,ecx
    6e4c:	sub    ecx,0x30
    6e4f:	cmp    ecx,0x9
    6e52:	ja     6f00 <traverse_raw_number+0xc0>
    6e58:	mov    r9d,DWORD PTR [rip+0x17a25]        # 1e884 <thousands_sep>
    6e5f:	xor    r8d,r8d
    6e62:	nop    WORD PTR [rax+rax*1+0x0]
    6e68:	cmp    r8b,dl
    6e6b:	mov    r10d,0x1
    6e71:	cmovl  r8d,edx
    6e75:	movsx  edx,BYTE PTR [rax+0x1]
    6e79:	add    rax,0x2
    6e7d:	cmp    edx,r9d
    6e80:	je     6e88 <traverse_raw_number+0x48>
    6e82:	mov    rax,rsi
    6e85:	xor    r10d,r10d
    6e88:	movsx  ecx,BYTE PTR [rax]
    6e8b:	lea    rsi,[rax+0x1]
    6e8f:	mov    edx,ecx
    6e91:	sub    ecx,0x30
    6e94:	cmp    ecx,0x9
    6e97:	jbe    6e68 <traverse_raw_number+0x28>
    6e99:	test   r10b,r10b
    6e9c:	jne    6ef0 <traverse_raw_number+0xb0>
    6e9e:	cmp    BYTE PTR [rip+0x179e4],dl        # 1e888 <decimal_point>
    6ea4:	je     6eb8 <traverse_raw_number+0x78>
    6ea6:	sub    rsi,0x1
    6eaa:	mov    QWORD PTR [rdi],rsi
    6ead:	mov    eax,r8d
    6eb0:	ret    
    6eb1:	nop    DWORD PTR [rax+0x0]
    6eb8:	movsx  ecx,BYTE PTR [rsi]
    6ebb:	lea    rdx,[rsi+0x1]
    6ebf:	mov    eax,ecx
    6ec1:	sub    ecx,0x30
    6ec4:	cmp    ecx,0x9
    6ec7:	ja     6eaa <traverse_raw_number+0x6a>
    6ec9:	nop    DWORD PTR [rax+0x0]
    6ed0:	cmp    r8b,al
    6ed3:	mov    rsi,rdx
    6ed6:	cmovl  r8d,eax
    6eda:	movsx  ecx,BYTE PTR [rdx]
    6edd:	add    rdx,0x1
    6ee1:	mov    eax,ecx
    6ee3:	sub    ecx,0x30
    6ee6:	cmp    ecx,0x9
    6ee9:	jbe    6ed0 <traverse_raw_number+0x90>
    6eeb:	jmp    6eaa <traverse_raw_number+0x6a>
    6eed:	nop    DWORD PTR [rax]
    6ef0:	sub    rax,0x1
    6ef4:	mov    QWORD PTR [rdi],rax
    6ef7:	mov    eax,r8d
    6efa:	ret    
    6efb:	nop    DWORD PTR [rax+rax*1+0x0]
    6f00:	xor    r8d,r8d
    6f03:	jmp    6e9e <traverse_raw_number+0x5e>
    6f05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000006f10 <find_unit_order>:
    6f10:	sub    rsp,0x18
    6f14:	movzx  r11d,BYTE PTR [rdi]
    6f18:	mov    rax,QWORD PTR fs:0x28
    6f21:	mov    QWORD PTR [rsp+0x8],rax
    6f26:	xor    eax,eax
    6f28:	xor    eax,eax
    6f2a:	cmp    r11b,0x2d
    6f2e:	sete   al
    6f31:	add    rdi,rax
    6f34:	mov    QWORD PTR [rsp],rdi
    6f38:	mov    rdi,rsp
    6f3b:	call   6e40 <traverse_raw_number>
    6f40:	mov    r8d,eax
    6f43:	xor    eax,eax
    6f45:	cmp    r8b,0x30
    6f49:	jle    6f68 <find_unit_order+0x58>
    6f4b:	mov    rax,QWORD PTR [rsp]
    6f4f:	lea    rdx,[rip+0xe40a]        # 15360 <unit_order>
    6f56:	movzx  eax,BYTE PTR [rax]
    6f59:	movsx  eax,BYTE PTR [rdx+rax*1]
    6f5d:	mov    edx,eax
    6f5f:	neg    edx
    6f61:	cmp    r11b,0x2d
    6f65:	cmove  eax,edx
    6f68:	mov    rcx,QWORD PTR [rsp+0x8]
    6f6d:	xor    rcx,QWORD PTR fs:0x28
    6f76:	jne    6f7d <find_unit_order+0x6d>
    6f78:	add    rsp,0x18
    6f7c:	ret    
    6f7d:	call   3990 <__stack_chk_fail@plt>
    6f82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    6f8d:	nop    DWORD PTR [rax]

0000000000006f90 <getmonth>:
    6f90:	movzx  eax,BYTE PTR [rdi]
    6f93:	lea    rdx,[rip+0x177c6]        # 1e760 <blanks>
    6f9a:	push   rbp
    6f9b:	push   rbx
    6f9c:	mov    rbx,rsi
    6f9f:	cmp    BYTE PTR [rdx+rax*1],0x0
    6fa3:	je     6fb6 <getmonth+0x26>
    6fa5:	nop    DWORD PTR [rax]
    6fa8:	movzx  eax,BYTE PTR [rdi+0x1]
    6fac:	add    rdi,0x1
    6fb0:	cmp    BYTE PTR [rdx+rax*1],0x0
    6fb4:	jne    6fa8 <getmonth+0x18>
    6fb6:	mov    r11d,0xc
    6fbc:	xor    esi,esi
    6fbe:	lea    rbp,[rip+0x1709b]        # 1e060 <monthtab>
    6fc5:	lea    r9,[rip+0x17494]        # 1e460 <fold_toupper>
    6fcc:	lea    r10,[rsi+r11*1]
    6fd0:	mov    rcx,rdi
    6fd3:	shr    r10,1
    6fd6:	mov    rax,r10
    6fd9:	shl    rax,0x4
    6fdd:	mov    rdx,QWORD PTR [rbp+rax*1+0x0]
    6fe2:	movzx  eax,BYTE PTR [rdx]
    6fe5:	test   al,al
    6fe7:	jne    7002 <getmonth+0x72>
    6fe9:	jmp    7020 <getmonth+0x90>
    6feb:	nop    DWORD PTR [rax+rax*1+0x0]
    6ff0:	ja     7038 <getmonth+0xa8>
    6ff2:	movzx  eax,BYTE PTR [rdx+0x1]
    6ff6:	add    rdx,0x1
    6ffa:	add    rcx,0x1
    6ffe:	test   al,al
    7000:	je     7020 <getmonth+0x90>
    7002:	movzx  r8d,BYTE PTR [rcx]
    7006:	cmp    BYTE PTR [r9+r8*1],al
    700a:	jae    6ff0 <getmonth+0x60>
    700c:	mov    r11,r10
    700f:	cmp    rsi,r11
    7012:	jb     6fcc <getmonth+0x3c>
    7014:	xor    eax,eax
    7016:	jmp    7031 <getmonth+0xa1>
    7018:	nop    DWORD PTR [rax+rax*1+0x0]
    7020:	test   rbx,rbx
    7023:	je     7028 <getmonth+0x98>
    7025:	mov    QWORD PTR [rbx],rcx
    7028:	shl    r10,0x4
    702c:	mov    eax,DWORD PTR [rbp+r10*1+0x8]
    7031:	pop    rbx
    7032:	pop    rbp
    7033:	ret    
    7034:	nop    DWORD PTR [rax+0x0]
    7038:	lea    rsi,[r10+0x1]
    703c:	jmp    700f <getmonth+0x7f>
    703e:	xchg   ax,ax

0000000000007040 <default_key_compare>:
    7040:	xor    eax,eax
    7042:	cmp    QWORD PTR [rdi+0x20],0x0
    7047:	je     7050 <default_key_compare+0x10>
    7049:	ret    
    704a:	nop    WORD PTR [rax+rax*1+0x0]
    7050:	cmp    QWORD PTR [rdi+0x28],0x0
    7055:	jne    7049 <default_key_compare+0x9>
    7057:	movzx  eax,BYTE PTR [rdi+0x30]
    705b:	test   al,al
    705d:	jne    7090 <default_key_compare+0x50>
    705f:	cmp    BYTE PTR [rdi+0x31],0x0
    7063:	jne    7049 <default_key_compare+0x9>
    7065:	movabs rdx,0xffff00ff0000
    706f:	test   QWORD PTR [rdi+0x30],rdx
    7073:	jne    7049 <default_key_compare+0x9>
    7075:	movzx  eax,BYTE PTR [rdi+0x36]
    7079:	test   al,al
    707b:	jne    7090 <default_key_compare+0x50>
    707d:	cmp    BYTE PTR [rdi+0x38],0x0
    7081:	jne    7049 <default_key_compare+0x9>
    7083:	movzx  eax,BYTE PTR [rdi+0x33]
    7087:	xor    eax,0x1
    708a:	ret    
    708b:	nop    DWORD PTR [rax+rax*1+0x0]
    7090:	xor    eax,eax
    7092:	ret    
    7093:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    709e:	xchg   ax,ax

00000000000070a0 <key_to_opts>:
    70a0:	cmp    WORD PTR [rdi+0x30],0x0
    70a5:	je     70ae <key_to_opts+0xe>
    70a7:	mov    BYTE PTR [rsi],0x62
    70aa:	add    rsi,0x1
    70ae:	lea    rax,[rip+0x174ab]        # 1e560 <nondictionary>
    70b5:	cmp    QWORD PTR [rdi+0x20],rax
    70b9:	je     7138 <key_to_opts+0x98>
    70bb:	cmp    QWORD PTR [rdi+0x28],0x0
    70c0:	mov    rax,rsi
    70c3:	je     70cc <key_to_opts+0x2c>
    70c5:	mov    BYTE PTR [rsi],0x66
    70c8:	add    rax,0x1
    70cc:	cmp    BYTE PTR [rdi+0x34],0x0
    70d0:	je     70d9 <key_to_opts+0x39>
    70d2:	mov    BYTE PTR [rax],0x67
    70d5:	add    rax,0x1
    70d9:	cmp    BYTE PTR [rdi+0x35],0x0
    70dd:	je     70e6 <key_to_opts+0x46>
    70df:	mov    BYTE PTR [rax],0x68
    70e2:	add    rax,0x1
    70e6:	lea    rdx,[rip+0x17573]        # 1e660 <nonprinting>
    70ed:	cmp    QWORD PTR [rdi+0x20],rdx
    70f1:	je     7144 <key_to_opts+0xa4>
    70f3:	cmp    BYTE PTR [rdi+0x36],0x0
    70f7:	je     7100 <key_to_opts+0x60>
    70f9:	mov    BYTE PTR [rax],0x4d
    70fc:	add    rax,0x1
    7100:	cmp    BYTE PTR [rdi+0x32],0x0
    7104:	je     710d <key_to_opts+0x6d>
    7106:	mov    BYTE PTR [rax],0x6e
    7109:	add    rax,0x1
    710d:	cmp    BYTE PTR [rdi+0x33],0x0
    7111:	je     711a <key_to_opts+0x7a>
    7113:	mov    BYTE PTR [rax],0x52
    7116:	add    rax,0x1
    711a:	cmp    BYTE PTR [rdi+0x37],0x0
    711e:	je     7127 <key_to_opts+0x87>
    7120:	mov    BYTE PTR [rax],0x72
    7123:	add    rax,0x1
    7127:	cmp    BYTE PTR [rdi+0x38],0x0
    712b:	je     7134 <key_to_opts+0x94>
    712d:	mov    BYTE PTR [rax],0x56
    7130:	add    rax,0x1
    7134:	mov    BYTE PTR [rax],0x0
    7137:	ret    
    7138:	mov    BYTE PTR [rsi],0x64
    713b:	add    rsi,0x1
    713f:	jmp    70bb <key_to_opts+0x1b>
    7144:	mov    BYTE PTR [rax],0x69
    7147:	add    rax,0x1
    714b:	jmp    70f3 <key_to_opts+0x53>
    714d:	nop    DWORD PTR [rax]

0000000000007150 <set_ordering>:
    7150:	movzx  ecx,BYTE PTR [rdi]
    7153:	mov    rax,rdi
    7156:	test   cl,cl
    7158:	je     7269 <set_ordering+0x119>
    715e:	mov    r9d,edx
    7161:	push   rbx
    7162:	lea    rdi,[rip+0xdeb7]        # 15020 <_IO_stdin_used+0x20>
    7169:	lea    r8d,[rdx-0x1]
    716d:	lea    rbx,[rip+0x174ec]        # 1e660 <nonprinting>
    7174:	lea    r11,[rip+0x172e5]        # 1e460 <fold_toupper>
    717b:	and    r9d,0xfffffffd
    717f:	lea    r10,[rip+0x173da]        # 1e560 <nondictionary>
    7186:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7190:	sub    ecx,0x4d
    7193:	cmp    cl,0x25
    7196:	ja     71bc <set_ordering+0x6c>
    7198:	movzx  ecx,cl
    719b:	movsxd rdx,DWORD PTR [rdi+rcx*4]
    719f:	add    rdx,rdi
    71a2:	notrack jmp rdx
    71a5:	nop    DWORD PTR [rax]
    71a8:	mov    BYTE PTR [rsi+0x37],0x1
    71ac:	nop    DWORD PTR [rax+0x0]
    71b0:	movzx  ecx,BYTE PTR [rax+0x1]
    71b4:	add    rax,0x1
    71b8:	test   cl,cl
    71ba:	jne    7190 <set_ordering+0x40>
    71bc:	pop    rbx
    71bd:	ret    
    71be:	xchg   ax,ax
    71c0:	mov    BYTE PTR [rsi+0x32],0x1
    71c4:	jmp    71b0 <set_ordering+0x60>
    71c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    71d0:	cmp    QWORD PTR [rsi+0x20],0x0
    71d5:	jne    71b0 <set_ordering+0x60>
    71d7:	mov    QWORD PTR [rsi+0x20],rbx
    71db:	jmp    71b0 <set_ordering+0x60>
    71dd:	nop    DWORD PTR [rax]
    71e0:	mov    BYTE PTR [rsi+0x35],0x1
    71e4:	jmp    71b0 <set_ordering+0x60>
    71e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    71f0:	mov    BYTE PTR [rsi+0x34],0x1
    71f4:	jmp    71b0 <set_ordering+0x60>
    71f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7200:	mov    QWORD PTR [rsi+0x28],r11
    7204:	jmp    71b0 <set_ordering+0x60>
    7206:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7210:	mov    QWORD PTR [rsi+0x20],r10
    7214:	jmp    71b0 <set_ordering+0x60>
    7216:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7220:	test   r9d,r9d
    7223:	jne    7229 <set_ordering+0xd9>
    7225:	mov    BYTE PTR [rsi+0x30],0x1
    7229:	cmp    r8d,0x1
    722d:	ja     71b0 <set_ordering+0x60>
    722f:	mov    BYTE PTR [rsi+0x31],0x1
    7233:	jmp    71b0 <set_ordering+0x60>
    7238:	nop    DWORD PTR [rax+rax*1+0x0]
    7240:	mov    BYTE PTR [rsi+0x38],0x1
    7244:	jmp    71b0 <set_ordering+0x60>
    7249:	nop    DWORD PTR [rax+0x0]
    7250:	mov    BYTE PTR [rsi+0x33],0x1
    7254:	jmp    71b0 <set_ordering+0x60>
    7259:	nop    DWORD PTR [rax+0x0]
    7260:	mov    BYTE PTR [rsi+0x36],0x1
    7264:	jmp    71b0 <set_ordering+0x60>
    7269:	ret    
    726a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007270 <struct_month_cmp>:
    7270:	endbr64 
    7274:	mov    rsi,QWORD PTR [rsi]
    7277:	mov    rdi,QWORD PTR [rdi]
    727a:	jmp    3b20 <strcmp@plt>
    727f:	nop

0000000000007280 <sighandler>:
    7280:	endbr64 
    7284:	push   rbp
    7285:	mov    ebp,edi
    7287:	push   rbx
    7288:	sub    rsp,0x8
    728c:	mov    rbx,QWORD PTR [rip+0x170f5]        # 1e388 <temphead>
    7293:	test   rbx,rbx
    7296:	je     72b1 <sighandler+0x31>
    7298:	nop    DWORD PTR [rax+rax*1+0x0]
    72a0:	lea    rdi,[rbx+0xd]
    72a4:	call   3820 <unlink@plt>
    72a9:	mov    rbx,QWORD PTR [rbx]
    72ac:	test   rbx,rbx
    72af:	jne    72a0 <sighandler+0x20>
    72b1:	mov    QWORD PTR [rip+0x170cc],0x0        # 1e388 <temphead>
    72bc:	mov    edi,ebp
    72be:	xor    esi,esi
    72c0:	call   3b30 <signal@plt>
    72c5:	add    rsp,0x8
    72c9:	mov    edi,ebp
    72cb:	pop    rbx
    72cc:	pop    rbp
    72cd:	jmp    37c0 <raise@plt>
    72d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    72dd:	nop    DWORD PTR [rax]

00000000000072e0 <get_outstatus>:
    72e0:	mov    eax,DWORD PTR [rip+0x16fea]        # 1e2d0 <outstat_errno.8964>
    72e6:	test   eax,eax
    72e8:	je     7300 <get_outstatus+0x20>
    72ea:	xor    r8d,r8d
    72ed:	test   eax,eax
    72ef:	jns    72f8 <get_outstatus+0x18>
    72f1:	lea    r8,[rip+0x16f48]        # 1e240 <outstat.8965>
    72f8:	mov    rax,r8
    72fb:	ret    
    72fc:	nop    DWORD PTR [rax+0x0]
    7300:	sub    rsp,0x8
    7304:	mov    esi,0x1
    7309:	mov    edi,0x1
    730e:	lea    rdx,[rip+0x16f2b]        # 1e240 <outstat.8965>
    7315:	call   3c20 <__fxstat@plt>
    731a:	test   eax,eax
    731c:	jne    7340 <get_outstatus+0x60>
    731e:	mov    DWORD PTR [rip+0x16fa8],0xffffffff        # 1e2d0 <outstat_errno.8964>
    7328:	lea    r8,[rip+0x16f11]        # 1e240 <outstat.8965>
    732f:	mov    rax,r8
    7332:	add    rsp,0x8
    7336:	ret    
    7337:	nop    WORD PTR [rax+rax*1+0x0]
    7340:	call   3810 <__errno_location@plt>
    7345:	xor    r8d,r8d
    7348:	mov    eax,DWORD PTR [rax]
    734a:	mov    DWORD PTR [rip+0x16f80],eax        # 1e2d0 <outstat_errno.8964>
    7350:	test   eax,eax
    7352:	js     7328 <get_outstatus+0x48>
    7354:	jmp    732f <get_outstatus+0x4f>
    7356:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000007360 <add_temp_dir>:
    7360:	mov    rdx,QWORD PTR [rip+0x170e1]        # 1e448 <temp_dir_count>
    7367:	cmp    rdx,QWORD PTR [rip+0x170d2]        # 1e440 <temp_dir_alloc>
    736e:	push   rbx
    736f:	mov    rbx,rdi
    7372:	mov    rdi,QWORD PTR [rip+0x170d7]        # 1e450 <temp_dirs>
    7379:	je     7390 <add_temp_dir+0x30>
    737b:	lea    rax,[rdx+0x1]
    737f:	mov    QWORD PTR [rdi+rdx*8],rbx
    7383:	pop    rbx
    7384:	mov    QWORD PTR [rip+0x170bd],rax        # 1e448 <temp_dir_count>
    738b:	ret    
    738c:	nop    DWORD PTR [rax+0x0]
    7390:	mov    edx,0x8
    7395:	lea    rsi,[rip+0x170a4]        # 1e440 <temp_dir_alloc>
    739c:	call   13180 <x2nrealloc>
    73a1:	mov    rdx,QWORD PTR [rip+0x170a0]        # 1e448 <temp_dir_count>
    73a8:	mov    QWORD PTR [rip+0x170a1],rax        # 1e450 <temp_dirs>
    73af:	mov    rdi,rax
    73b2:	jmp    737b <add_temp_dir+0x1b>
    73b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    73bf:	nop

00000000000073c0 <incompatible_options>:
    73c0:	push   r12
    73c2:	mov    edx,0x5
    73c7:	mov    r12,rdi
    73ca:	lea    rsi,[rip+0xe0bf]        # 15490 <short_options+0x20>
    73d1:	xor    edi,edi
    73d3:	call   3960 <dcgettext@plt>
    73d8:	mov    rcx,r12
    73db:	xor    esi,esi
    73dd:	mov    edi,0x2
    73e2:	mov    rdx,rax
    73e5:	xor    eax,eax
    73e7:	call   3ce0 <error@plt>
    73ec:	nop    DWORD PTR [rax+0x0]

00000000000073f0 <badfieldspec>:
    73f0:	push   r12
    73f2:	mov    r12,rsi
    73f5:	push   rbx
    73f6:	sub    rsp,0x8
    73fa:	call   11570 <quote>
    73ff:	mov    rsi,r12
    7402:	mov    edx,0x5
    7407:	xor    edi,edi
    7409:	mov    rbx,rax
    740c:	call   3960 <dcgettext@plt>
    7411:	mov    edx,0x5
    7416:	lea    rsi,[rip+0xe093]        # 154b0 <short_options+0x40>
    741d:	xor    edi,edi
    741f:	mov    r12,rax
    7422:	call   3960 <dcgettext@plt>
    7427:	mov    r8,rbx
    742a:	mov    rcx,r12
    742d:	xor    esi,esi
    742f:	mov    rdx,rax
    7432:	mov    edi,0x2
    7437:	xor    eax,eax
    7439:	call   3ce0 <error@plt>
    743e:	xchg   ax,ax

0000000000007440 <sort_die>:
    7440:	push   r12
    7442:	mov    rdx,rsi
    7445:	mov    r12,rdi
    7448:	push   rbx
    7449:	sub    rsp,0x8
    744d:	test   rsi,rsi
    7450:	je     7481 <sort_die+0x41>
    7452:	mov    esi,0x3
    7457:	xor    edi,edi
    7459:	call   11390 <quotearg_n_style_colon>
    745e:	mov    rbx,rax
    7461:	call   3810 <__errno_location@plt>
    7466:	mov    r8,rbx
    7469:	mov    rcx,r12
    746c:	mov    edi,0x2
    7471:	mov    esi,DWORD PTR [rax]
    7473:	lea    rdx,[rip+0xf6c9]        # 16b43 <short_options+0x16d3>
    747a:	xor    eax,eax
    747c:	call   3ce0 <error@plt>
    7481:	mov    edx,0x5
    7486:	lea    rsi,[rip+0xf6a6]        # 16b33 <short_options+0x16c3>
    748d:	xor    edi,edi
    748f:	call   3960 <dcgettext@plt>
    7494:	mov    rdx,rax
    7497:	jmp    7452 <sort_die+0x12>
    7499:	nop    DWORD PTR [rax+0x0]

00000000000074a0 <initbuf>:
    74a0:	push   r13
    74a2:	mov    r13,rsi
    74a5:	push   r12
    74a7:	lea    r12,[rsi+0x1]
    74ab:	push   rbp
    74ac:	mov    rbp,rdx
    74af:	push   rbx
    74b0:	mov    rbx,rdi
    74b3:	sub    rsp,0x8
    74b7:	and    rbp,0xffffffffffffffe0
    74bb:	add    rbp,0x20
    74bf:	mov    rdi,rbp
    74c2:	call   3770 <malloc@plt>
    74c7:	mov    QWORD PTR [rbx],rax
    74ca:	test   rax,rax
    74cd:	je     74fe <initbuf+0x5e>
    74cf:	mov    QWORD PTR [rbx+0x28],r13
    74d3:	mov    QWORD PTR [rbx+0x18],rbp
    74d7:	mov    QWORD PTR [rbx+0x10],0x0
    74df:	mov    QWORD PTR [rbx+0x20],0x0
    74e7:	mov    QWORD PTR [rbx+0x8],0x0
    74ef:	mov    BYTE PTR [rbx+0x30],0x0
    74f3:	add    rsp,0x8
    74f7:	pop    rbx
    74f8:	pop    rbp
    74f9:	pop    r12
    74fb:	pop    r13
    74fd:	ret    
    74fe:	shr    rbp,1
    7501:	cmp    r12,rbp
    7504:	jb     74b7 <initbuf+0x17>
    7506:	call   13450 <xalloc_die>
    750b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000007510 <debug_width>:
    7510:	push   rbp
    7511:	xor    edx,edx
    7513:	mov    rbp,rsi
    7516:	sub    rsi,rdi
    7519:	push   rbx
    751a:	mov    rbx,rdi
    751d:	sub    rsp,0x8
    7521:	call   ef50 <mbsnwidth>
    7526:	cdqe   
    7528:	cmp    rbp,rbx
    752b:	jbe    7545 <debug_width+0x35>
    752d:	nop    DWORD PTR [rax]
    7530:	add    rbx,0x1
    7534:	xor    edx,edx
    7536:	cmp    BYTE PTR [rbx-0x1],0x9
    753a:	sete   dl
    753d:	add    rax,rdx
    7540:	cmp    rbp,rbx
    7543:	jne    7530 <debug_width+0x20>
    7545:	add    rsp,0x8
    7549:	pop    rbx
    754a:	pop    rbp
    754b:	ret    
    754c:	nop    DWORD PTR [rax+0x0]

0000000000007550 <xstrxfrm>:
    7550:	push   r13
    7552:	mov    r13,rdx
    7555:	push   r12
    7557:	mov    r12,rsi
    755a:	push   rbp
    755b:	mov    rbp,rdi
    755e:	push   rbx
    755f:	sub    rsp,0x8
    7563:	call   3810 <__errno_location@plt>
    7568:	mov    rdx,r13
    756b:	mov    rsi,r12
    756e:	mov    rdi,rbp
    7571:	mov    DWORD PTR [rax],0x0
    7577:	mov    rbx,rax
    757a:	call   3b10 <strxfrm@plt>
    757f:	mov    edx,DWORD PTR [rbx]
    7581:	test   edx,edx
    7583:	jne    7590 <xstrxfrm+0x40>
    7585:	add    rsp,0x8
    7589:	pop    rbx
    758a:	pop    rbp
    758b:	pop    r12
    758d:	pop    r13
    758f:	ret    
    7590:	mov    edx,0x5
    7595:	lea    rsi,[rip+0xf5ae]        # 16b4a <short_options+0x16da>
    759c:	xor    edi,edi
    759e:	call   3960 <dcgettext@plt>
    75a3:	mov    esi,DWORD PTR [rbx]
    75a5:	xor    edi,edi
    75a7:	mov    rdx,rax
    75aa:	xor    eax,eax
    75ac:	call   3ce0 <error@plt>
    75b1:	mov    edx,0x5
    75b6:	lea    rsi,[rip+0xdf1b]        # 154d8 <short_options+0x68>
    75bd:	xor    edi,edi
    75bf:	call   3960 <dcgettext@plt>
    75c4:	xor    esi,esi
    75c6:	xor    edi,edi
    75c8:	mov    rdx,rax
    75cb:	xor    eax,eax
    75cd:	call   3ce0 <error@plt>
    75d2:	mov    rdx,r12
    75d5:	mov    esi,0x8
    75da:	xor    edi,edi
    75dc:	call   11140 <quotearg_n_style>
    75e1:	mov    edx,0x5
    75e6:	lea    rsi,[rip+0xf57a]        # 16b67 <short_options+0x16f7>
    75ed:	xor    edi,edi
    75ef:	mov    r12,rax
    75f2:	call   3960 <dcgettext@plt>
    75f7:	mov    rcx,r12
    75fa:	xor    esi,esi
    75fc:	mov    edi,0x2
    7601:	mov    rdx,rax
    7604:	xor    eax,eax
    7606:	call   3ce0 <error@plt>
    760b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000007610 <reap>:
    7610:	push   r13
    7612:	xor    edx,edx
    7614:	push   r12
    7616:	push   rbx
    7617:	mov    ebx,edi
    7619:	sub    rsp,0x30
    761d:	mov    rax,QWORD PTR fs:0x28
    7626:	mov    QWORD PTR [rsp+0x28],rax
    762b:	xor    eax,eax
    762d:	test   edi,edi
    762f:	mov    edi,0xffffffff
    7634:	lea    rsi,[rsp+0xc]
    7639:	cmovne edi,ebx
    763c:	sete   dl
    763f:	call   3cf0 <waitpid@plt>
    7644:	test   eax,eax
    7646:	js     76f0 <reap+0xe0>
    764c:	mov    r12d,eax
    764f:	je     766a <reap+0x5a>
    7651:	test   ebx,ebx
    7653:	jle    7690 <reap+0x80>
    7655:	mov    eax,DWORD PTR [rsp+0xc]
    7659:	movzx  edx,ah
    765c:	and    eax,0x7f
    765f:	or     edx,eax
    7661:	jne    76b5 <reap+0xa5>
    7663:	sub    DWORD PTR [rip+0x16d12],0x1        # 1e37c <nprocs>
    766a:	mov    rax,QWORD PTR [rsp+0x28]
    766f:	xor    rax,QWORD PTR fs:0x28
    7678:	jne    76b0 <reap+0xa0>
    767a:	add    rsp,0x30
    767e:	mov    eax,r12d
    7681:	pop    rbx
    7682:	pop    r12
    7684:	pop    r13
    7686:	ret    
    7687:	nop    WORD PTR [rax+rax*1+0x0]
    7690:	mov    rdi,QWORD PTR [rip+0x16ce9]        # 1e380 <proctab>
    7697:	lea    rsi,[rsp+0x10]
    769c:	mov    DWORD PTR [rsp+0x18],eax
    76a0:	call   e980 <hash_remove>
    76a5:	test   rax,rax
    76a8:	je     766a <reap+0x5a>
    76aa:	mov    BYTE PTR [rax+0xc],0x2
    76ae:	jmp    7655 <reap+0x45>
    76b0:	call   3990 <__stack_chk_fail@plt>
    76b5:	mov    rsi,QWORD PTR [rip+0x16d6c]        # 1e428 <compress_program>
    76bc:	mov    edi,0x4
    76c1:	call   11270 <quotearg_style>
    76c6:	mov    edx,0x5
    76cb:	lea    rsi,[rip+0xf4c4]        # 16b96 <short_options+0x1726>
    76d2:	xor    edi,edi
    76d4:	mov    r12,rax
    76d7:	call   3960 <dcgettext@plt>
    76dc:	mov    rcx,r12
    76df:	xor    esi,esi
    76e1:	mov    edi,0x2
    76e6:	mov    rdx,rax
    76e9:	xor    eax,eax
    76eb:	call   3ce0 <error@plt>
    76f0:	mov    rsi,QWORD PTR [rip+0x16d31]        # 1e428 <compress_program>
    76f7:	mov    edi,0x4
    76fc:	call   11270 <quotearg_style>
    7701:	mov    edx,0x5
    7706:	lea    rsi,[rip+0xf475]        # 16b82 <short_options+0x1712>
    770d:	xor    edi,edi
    770f:	mov    r13,rax
    7712:	call   3960 <dcgettext@plt>
    7717:	mov    r12,rax
    771a:	call   3810 <__errno_location@plt>
    771f:	mov    rcx,r13
    7722:	mov    rdx,r12
    7725:	mov    edi,0x2
    772a:	mov    esi,DWORD PTR [rax]
    772c:	xor    eax,eax
    772e:	call   3ce0 <error@plt>
    7733:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    773e:	xchg   ax,ax

0000000000007740 <wait_proc>:
    7740:	push   rbp
    7741:	mov    ebp,edi
    7743:	sub    rsp,0x20
    7747:	mov    rax,QWORD PTR fs:0x28
    7750:	mov    QWORD PTR [rsp+0x18],rax
    7755:	xor    eax,eax
    7757:	mov    DWORD PTR [rsp+0x8],edi
    775b:	mov    rdi,QWORD PTR [rip+0x16c1e]        # 1e380 <proctab>
    7762:	mov    rsi,rsp
    7765:	call   e980 <hash_remove>
    776a:	test   rax,rax
    776d:	je     777a <wait_proc+0x3a>
    776f:	mov    BYTE PTR [rax+0xc],0x2
    7773:	mov    edi,ebp
    7775:	call   7610 <reap>
    777a:	mov    rax,QWORD PTR [rsp+0x18]
    777f:	xor    rax,QWORD PTR fs:0x28
    7788:	jne    7790 <wait_proc+0x50>
    778a:	add    rsp,0x20
    778e:	pop    rbp
    778f:	ret    
    7790:	call   3990 <__stack_chk_fail@plt>
    7795:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000077a0 <async_safe_die>:
    77a0:	push   rbp
    77a1:	mov    rdx,rsi
    77a4:	mov    ebp,edi
    77a6:	sub    rsp,0x20
    77aa:	mov    rax,QWORD PTR fs:0x28
    77b3:	mov    QWORD PTR [rsp+0x18],rax
    77b8:	xor    eax,eax
    77ba:	mov    ecx,DWORD PTR [rdx]
    77bc:	add    rdx,0x4
    77c0:	lea    eax,[rcx-0x1010101]
    77c6:	not    ecx
    77c8:	and    eax,ecx
    77ca:	and    eax,0x80808080
    77cf:	je     77ba <async_safe_die+0x1a>
    77d1:	mov    ecx,eax
    77d3:	shr    ecx,0x10
    77d6:	test   eax,0x8080
    77db:	cmove  eax,ecx
    77de:	lea    rcx,[rdx+0x2]
    77e2:	cmove  rdx,rcx
    77e6:	mov    edi,eax
    77e8:	add    dil,al
    77eb:	mov    edi,0x2
    77f0:	sbb    rdx,0x3
    77f4:	sub    rdx,rsi
    77f7:	call   38f0 <write@plt>
    77fc:	test   ebp,ebp
    77fe:	jne    7820 <async_safe_die+0x80>
    7800:	mov    edi,0x2
    7805:	mov    edx,0x1
    780a:	lea    rsi,[rip+0xf456]        # 16c67 <short_options+0x17f7>
    7811:	call   38f0 <write@plt>
    7816:	mov    edi,0x2
    781b:	call   3840 <_exit@plt>
    7820:	lea    rsi,[rsp+0xc]
    7825:	mov    edi,ebp
    7827:	call   ee10 <inttostr>
    782c:	mov    edx,0x8
    7831:	mov    edi,0x2
    7836:	lea    rsi,[rip+0xf377]        # 16bb4 <short_options+0x1744>
    783d:	mov    rbp,rax
    7840:	call   38f0 <write@plt>
    7845:	mov    rdi,rbp
    7848:	or     rcx,0xffffffffffffffff
    784c:	xor    eax,eax
    784e:	repnz scas al,BYTE PTR es:[rdi]
    7850:	mov    rsi,rbp
    7853:	mov    edi,0x2
    7858:	not    rcx
    785b:	lea    rdx,[rcx-0x1]
    785f:	call   38f0 <write@plt>
    7864:	jmp    7800 <async_safe_die+0x60>
    7866:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000007870 <register_proc>:
    7870:	push   rbp
    7871:	mov    rbp,rdi
    7874:	mov    rdi,QWORD PTR [rip+0x16b05]        # 1e380 <proctab>
    787b:	test   rdi,rdi
    787e:	je     7898 <register_proc+0x28>
    7880:	mov    BYTE PTR [rbp+0xc],0x1
    7884:	mov    rsi,rbp
    7887:	call   e920 <hash_insert>
    788c:	test   rax,rax
    788f:	je     78c4 <register_proc+0x54>
    7891:	pop    rbp
    7892:	ret    
    7893:	nop    DWORD PTR [rax+rax*1+0x0]
    7898:	mov    edi,0x2f
    789d:	xor    r8d,r8d
    78a0:	lea    rcx,[rip+0xfffffffffffff589]        # 6e30 <proctab_comparator>
    78a7:	xor    esi,esi
    78a9:	lea    rdx,[rip+0xfffffffffffff560]        # 6e10 <proctab_hasher>
    78b0:	call   e1f0 <hash_initialize>
    78b5:	mov    QWORD PTR [rip+0x16ac4],rax        # 1e380 <proctab>
    78bc:	mov    rdi,rax
    78bf:	test   rax,rax
    78c2:	jne    7880 <register_proc+0x10>
    78c4:	call   13450 <xalloc_die>
    78c9:	nop    DWORD PTR [rax+0x0]

00000000000078d0 <init_node>:
    78d0:	push   r15
    78d2:	mov    rax,r8
    78d5:	push   r14
    78d7:	shl    rax,0x5
    78db:	push   r13
    78dd:	sub    rdx,rax
    78e0:	mov    r13,r8
    78e3:	push   r12
    78e5:	mov    r12,rdx
    78e8:	push   rbp
    78e9:	mov    rbp,rsi
    78ec:	push   rbx
    78ed:	mov    rbx,rcx
    78f0:	sub    rsp,0x8
    78f4:	test   r9b,r9b
    78f7:	je     7988 <init_node+0xb8>
    78fd:	mov    rax,QWORD PTR [rdi+0x28]
    7901:	mov    r14,r12
    7904:	mov    rdx,rax
    7907:	shr    rdx,1
    790a:	mov    rcx,rdx
    790d:	sub    rax,rdx
    7910:	shl    rcx,0x5
    7914:	sub    r14,rcx
    7917:	lea    rcx,[rdi+0x10]
    791b:	mov    QWORD PTR [rbp+0x30],rax
    791f:	mov    eax,DWORD PTR [rdi+0x50]
    7922:	xor    esi,esi
    7924:	lea    r15,[rbp+0x80]
    792b:	mov    QWORD PTR [rbp+0x38],rdi
    792f:	lea    rdi,[rbp+0x58]
    7933:	add    eax,0x1
    7936:	mov    QWORD PTR [rbp+0x10],r12
    793a:	mov    QWORD PTR [rbp+0x0],r12
    793e:	mov    QWORD PTR [rbp+0x18],r14
    7942:	mov    QWORD PTR [rbp+0x8],r14
    7946:	mov    QWORD PTR [rbp+0x20],rcx
    794a:	mov    QWORD PTR [rbp+0x28],rdx
    794e:	mov    DWORD PTR [rbp+0x50],eax
    7951:	mov    BYTE PTR [rbp+0x54],0x0
    7955:	call   3e80 <pthread_mutex_init@plt>
    795a:	cmp    rbx,0x1
    795e:	ja     79b0 <init_node+0xe0>
    7960:	mov    QWORD PTR [rbp+0x40],0x0
    7968:	mov    rax,r15
    796b:	mov    QWORD PTR [rbp+0x48],0x0
    7973:	add    rsp,0x8
    7977:	pop    rbx
    7978:	pop    rbp
    7979:	pop    r12
    797b:	pop    r13
    797d:	pop    r14
    797f:	pop    r15
    7981:	ret    
    7982:	nop    WORD PTR [rax+rax*1+0x0]
    7988:	mov    rax,QWORD PTR [rdi+0x30]
    798c:	mov    r14,r12
    798f:	mov    rdx,rax
    7992:	shr    rdx,1
    7995:	mov    rcx,rdx
    7998:	sub    rax,rdx
    799b:	shl    rcx,0x5
    799f:	sub    r14,rcx
    79a2:	lea    rcx,[rdi+0x18]
    79a6:	jmp    791b <init_node+0x4b>
    79ab:	nop    DWORD PTR [rax+rax*1+0x0]
    79b0:	mov    QWORD PTR [rbp+0x40],r15
    79b4:	mov    rcx,rbx
    79b7:	mov    r8,r13
    79ba:	mov    rdx,r12
    79bd:	shr    rcx,1
    79c0:	mov    rsi,r15
    79c3:	mov    rdi,rbp
    79c6:	mov    r9d,0x1
    79cc:	sub    rbx,rcx
    79cf:	call   78d0 <init_node>
    79d4:	mov    r8,r13
    79d7:	mov    rcx,rbx
    79da:	mov    rdx,r14
    79dd:	mov    QWORD PTR [rbp+0x48],rax
    79e1:	add    rsp,0x8
    79e5:	mov    rdi,rbp
    79e8:	mov    rsi,rax
    79eb:	pop    rbx
    79ec:	xor    r9d,r9d
    79ef:	pop    rbp
    79f0:	pop    r12
    79f2:	pop    r13
    79f4:	pop    r14
    79f6:	pop    r15
    79f8:	jmp    78d0 <init_node>
    79fd:	nop    DWORD PTR [rax]

0000000000007a00 <queue_insert>:
    7a00:	push   r12
    7a02:	lea    r12,[rdi+0x8]
    7a06:	push   rbp
    7a07:	mov    rbp,rsi
    7a0a:	push   rbx
    7a0b:	mov    rbx,rdi
    7a0e:	mov    rdi,r12
    7a11:	call   3eb0 <pthread_mutex_lock@plt>
    7a16:	mov    rdi,QWORD PTR [rbx]
    7a19:	mov    rsi,rbp
    7a1c:	call   ec30 <heap_insert>
    7a21:	mov    BYTE PTR [rbp+0x54],0x1
    7a25:	lea    rdi,[rbx+0x30]
    7a29:	call   3ae0 <pthread_cond_signal@plt>
    7a2e:	pop    rbx
    7a2f:	mov    rdi,r12
    7a32:	pop    rbp
    7a33:	pop    r12
    7a35:	jmp    3be0 <pthread_mutex_unlock@plt>
    7a3a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007a40 <begfield.isra.0>:
    7a40:	lea    rax,[rdi+rsi*1-0x1]
    7a45:	mov    esi,DWORD PTR [rip+0x165dd]        # 1e028 <tab>
    7a4b:	mov    rcx,QWORD PTR [rdx]
    7a4e:	mov    r9,QWORD PTR [rdx+0x8]
    7a52:	cmp    esi,0x80
    7a58:	je     7add <begfield.isra.0+0x9d>
    7a5e:	cmp    rax,rdi
    7a61:	jbe    7a80 <begfield.isra.0+0x40>
    7a63:	lea    r8,[rcx-0x1]
    7a67:	test   rcx,rcx
    7a6a:	je     7aa8 <begfield.isra.0+0x68>
    7a6c:	nop    DWORD PTR [rax+0x0]
    7a70:	movsx  ecx,BYTE PTR [rdi]
    7a73:	cmp    esi,ecx
    7a75:	je     7a90 <begfield.isra.0+0x50>
    7a77:	add    rdi,0x1
    7a7b:	cmp    rax,rdi
    7a7e:	ja     7a70 <begfield.isra.0+0x30>
    7a80:	add    rdi,r9
    7a83:	cmp    rax,rdi
    7a86:	cmova  rax,rdi
    7a8a:	ret    
    7a8b:	nop    DWORD PTR [rax+rax*1+0x0]
    7a90:	cmp    rax,rdi
    7a93:	jbe    7a80 <begfield.isra.0+0x40>
    7a95:	add    rdi,0x1
    7a99:	cmp    rax,rdi
    7a9c:	jbe    7a80 <begfield.isra.0+0x40>
    7a9e:	sub    r8,0x1
    7aa2:	cmp    r8,0xffffffffffffffff
    7aa6:	jne    7a70 <begfield.isra.0+0x30>
    7aa8:	cmp    BYTE PTR [rdx+0x30],0x0
    7aac:	lea    rsi,[rip+0x16cad]        # 1e760 <blanks>
    7ab3:	jne    7ac9 <begfield.isra.0+0x89>
    7ab5:	jmp    7a80 <begfield.isra.0+0x40>
    7ab7:	nop    WORD PTR [rax+rax*1+0x0]
    7ac0:	add    rdi,0x1
    7ac4:	cmp    rax,rdi
    7ac7:	jbe    7a80 <begfield.isra.0+0x40>
    7ac9:	movzx  edx,BYTE PTR [rdi]
    7acc:	cmp    BYTE PTR [rsi+rdx*1],0x0
    7ad0:	jne    7ac0 <begfield.isra.0+0x80>
    7ad2:	add    rdi,r9
    7ad5:	cmp    rax,rdi
    7ad8:	cmova  rax,rdi
    7adc:	ret    
    7add:	cmp    rax,rdi
    7ae0:	jbe    7a80 <begfield.isra.0+0x40>
    7ae2:	lea    r8,[rcx-0x1]
    7ae6:	lea    rsi,[rip+0x16c73]        # 1e760 <blanks>
    7aed:	test   rcx,rcx
    7af0:	je     7aa8 <begfield.isra.0+0x68>
    7af2:	nop    WORD PTR [rax+rax*1+0x0]
    7af8:	movzx  ecx,BYTE PTR [rdi]
    7afb:	movzx  ecx,BYTE PTR [rsi+rcx*1]
    7aff:	test   cl,cl
    7b01:	je     7b20 <begfield.isra.0+0xe0>
    7b03:	add    rdi,0x1
    7b07:	cmp    rax,rdi
    7b0a:	ja     7af8 <begfield.isra.0+0xb8>
    7b0c:	add    rdi,r9
    7b0f:	cmp    rax,rdi
    7b12:	cmova  rax,rdi
    7b16:	ret    
    7b17:	nop    WORD PTR [rax+rax*1+0x0]
    7b20:	cmp    rax,rdi
    7b23:	jbe    7a80 <begfield.isra.0+0x40>
    7b29:	nop    DWORD PTR [rax+0x0]
    7b30:	add    rdi,0x1
    7b34:	cmp    rax,rdi
    7b37:	je     7b60 <begfield.isra.0+0x120>
    7b39:	movzx  ecx,BYTE PTR [rdi]
    7b3c:	movzx  ecx,BYTE PTR [rsi+rcx*1]
    7b40:	test   cl,cl
    7b42:	je     7b30 <begfield.isra.0+0xf0>
    7b44:	cmp    rax,rdi
    7b47:	jbe    7a80 <begfield.isra.0+0x40>
    7b4d:	sub    r8,0x1
    7b51:	cmp    r8,0xffffffffffffffff
    7b55:	jne    7aff <begfield.isra.0+0xbf>
    7b57:	jmp    7aa8 <begfield.isra.0+0x68>
    7b5c:	nop    DWORD PTR [rax+0x0]
    7b60:	mov    rdi,rax
    7b63:	jmp    7a80 <begfield.isra.0+0x40>
    7b68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000007b70 <limfield.isra.0>:
    7b70:	mov    r9,QWORD PTR [rdx+0x18]
    7b74:	lea    rcx,[rdi+rsi*1-0x1]
    7b79:	mov    rax,rdi
    7b7c:	mov    rsi,QWORD PTR [rdx+0x10]
    7b80:	mov    edi,DWORD PTR [rip+0x164a2]        # 1e028 <tab>
    7b86:	cmp    r9,0x1
    7b8a:	adc    rsi,0x0
    7b8e:	cmp    edi,0x80
    7b94:	je     7c31 <limfield.isra.0+0xc1>
    7b9a:	cmp    rcx,rax
    7b9d:	jbe    7bc0 <limfield.isra.0+0x50>
    7b9f:	lea    r8,[rsi-0x1]
    7ba3:	test   rsi,rsi
    7ba6:	je     7bc0 <limfield.isra.0+0x50>
    7ba8:	nop    DWORD PTR [rax+rax*1+0x0]
    7bb0:	movsx  esi,BYTE PTR [rax]
    7bb3:	cmp    edi,esi
    7bb5:	je     7c08 <limfield.isra.0+0x98>
    7bb7:	add    rax,0x1
    7bbb:	cmp    rcx,rax
    7bbe:	ja     7bb0 <limfield.isra.0+0x40>
    7bc0:	test   r9,r9
    7bc3:	je     7c30 <limfield.isra.0+0xc0>
    7bc5:	cmp    BYTE PTR [rdx+0x31],0x0
    7bc9:	je     7bf6 <limfield.isra.0+0x86>
    7bcb:	lea    rdi,[rip+0x16b8e]        # 1e760 <blanks>
    7bd2:	cmp    rcx,rax
    7bd5:	ja     7bed <limfield.isra.0+0x7d>
    7bd7:	jmp    7bf6 <limfield.isra.0+0x86>
    7bd9:	nop    DWORD PTR [rax+0x0]
    7be0:	add    rax,0x1
    7be4:	cmp    rcx,rax
    7be7:	je     7cb8 <limfield.isra.0+0x148>
    7bed:	movzx  edx,BYTE PTR [rax]
    7bf0:	cmp    BYTE PTR [rdi+rdx*1],0x0
    7bf4:	jne    7be0 <limfield.isra.0+0x70>
    7bf6:	add    rax,r9
    7bf9:	cmp    rcx,rax
    7bfc:	cmovbe rax,rcx
    7c00:	ret    
    7c01:	nop    DWORD PTR [rax+0x0]
    7c08:	cmp    rcx,rax
    7c0b:	jbe    7bc0 <limfield.isra.0+0x50>
    7c0d:	mov    rsi,r9
    7c10:	or     rsi,r8
    7c13:	je     7c30 <limfield.isra.0+0xc0>
    7c15:	add    rax,0x1
    7c19:	cmp    rcx,rax
    7c1c:	jbe    7bc0 <limfield.isra.0+0x50>
    7c1e:	sub    r8,0x1
    7c22:	cmp    r8,0xffffffffffffffff
    7c26:	jne    7bb0 <limfield.isra.0+0x40>
    7c28:	jmp    7bc0 <limfield.isra.0+0x50>
    7c2a:	nop    WORD PTR [rax+rax*1+0x0]
    7c30:	ret    
    7c31:	cmp    rcx,rax
    7c34:	jbe    7bc0 <limfield.isra.0+0x50>
    7c36:	lea    r8,[rsi-0x1]
    7c3a:	lea    rdi,[rip+0x16b1f]        # 1e760 <blanks>
    7c41:	test   rsi,rsi
    7c44:	je     7bc0 <limfield.isra.0+0x50>
    7c4a:	nop    WORD PTR [rax+rax*1+0x0]
    7c50:	movzx  esi,BYTE PTR [rax]
    7c53:	movzx  esi,BYTE PTR [rdi+rsi*1]
    7c57:	test   sil,sil
    7c5a:	je     7c70 <limfield.isra.0+0x100>
    7c5c:	add    rax,0x1
    7c60:	cmp    rcx,rax
    7c63:	ja     7c50 <limfield.isra.0+0xe0>
    7c65:	jmp    7bc0 <limfield.isra.0+0x50>
    7c6a:	nop    WORD PTR [rax+rax*1+0x0]
    7c70:	cmp    rcx,rax
    7c73:	jbe    7bc0 <limfield.isra.0+0x50>
    7c79:	nop    DWORD PTR [rax+0x0]
    7c80:	add    rax,0x1
    7c84:	cmp    rcx,rax
    7c87:	je     7cb0 <limfield.isra.0+0x140>
    7c89:	movzx  esi,BYTE PTR [rax]
    7c8c:	movzx  esi,BYTE PTR [rdi+rsi*1]
    7c90:	test   sil,sil
    7c93:	je     7c80 <limfield.isra.0+0x110>
    7c95:	cmp    rcx,rax
    7c98:	jbe    7bc0 <limfield.isra.0+0x50>
    7c9e:	sub    r8,0x1
    7ca2:	cmp    r8,0xffffffffffffffff
    7ca6:	jne    7c57 <limfield.isra.0+0xe7>
    7ca8:	jmp    7bc0 <limfield.isra.0+0x50>
    7cad:	nop    DWORD PTR [rax]
    7cb0:	mov    rax,rcx
    7cb3:	jmp    7bc0 <limfield.isra.0+0x50>
    7cb8:	mov    rax,rcx
    7cbb:	add    rax,r9
    7cbe:	cmp    rcx,rax
    7cc1:	cmovbe rax,rcx
    7cc5:	ret    
    7cc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000007cd0 <keycompare>:
    7cd0:	push   r15
    7cd2:	push   r14
    7cd4:	push   r13
    7cd6:	push   r12
    7cd8:	push   rbp
    7cd9:	push   rbx
    7cda:	sub    rsp,0x1000
    7ce1:	or     QWORD PTR [rsp],0x0
    7ce6:	sub    rsp,0x1000
    7ced:	or     QWORD PTR [rsp],0x0
    7cf2:	sub    rsp,0x168
    7cf9:	mov    r14,QWORD PTR [rip+0x16730]        # 1e430 <keylist>
    7d00:	lea    r15,[rip+0x16a59]        # 1e760 <blanks>
    7d07:	mov    r13,QWORD PTR [rsi+0x10]
    7d0b:	mov    r11,QWORD PTR [rsi+0x18]
    7d0f:	mov    r8,r13
    7d12:	mov    QWORD PTR [rsp+0x38],rdi
    7d17:	mov    rax,rdi
    7d1a:	mov    rbx,QWORD PTR [rax+0x18]
    7d1e:	mov    r9,QWORD PTR [rax+0x10]
    7d22:	mov    QWORD PTR [rsp+0x20],rsi
    7d27:	lea    rax,[rsp+0x11b0]
    7d2f:	mov    r10,rbx
    7d32:	mov    r12,r9
    7d35:	mov    rbx,r11
    7d38:	mov    rdi,QWORD PTR fs:0x28
    7d41:	mov    QWORD PTR [rsp+0x2158],rdi
    7d49:	xor    edi,edi
    7d4b:	mov    QWORD PTR [rsp+0x90],rax
    7d53:	nop    DWORD PTR [rax+rax*1+0x0]
    7d58:	cmp    r12,r10
    7d5b:	mov    rdx,QWORD PTR [r14+0x28]
    7d5f:	mov    r13,QWORD PTR [r14+0x20]
    7d63:	cmovae r10,r12
    7d67:	cmp    r8,rbx
    7d6a:	cmovae rbx,r8
    7d6e:	mov    r11,r10
    7d71:	mov    rbp,r10
    7d74:	mov    rcx,rbx
    7d77:	sub    r11,r12
    7d7a:	sub    rcx,r8
    7d7d:	cmp    BYTE PTR [rip+0x16afd],0x0        # 1e881 <hard_LC_COLLATE>
    7d84:	jne    7d9a <keycompare+0xca>
    7d86:	movabs rax,0xffffffffff0000
    7d90:	and    rax,QWORD PTR [r14+0x30]
    7d94:	je     81e0 <keycompare+0x510>
    7d9a:	movzx  eax,BYTE PTR [rbp+0x0]
    7d9e:	mov    BYTE PTR [rsp+0x28],al
    7da2:	movzx  eax,BYTE PTR [rbx]
    7da5:	mov    BYTE PTR [rsp+0x37],al
    7da9:	mov    rax,rdx
    7dac:	or     rax,r13
    7daf:	mov    QWORD PTR [rsp+0x18],rax
    7db4:	jne    8020 <keycompare+0x350>
    7dba:	mov    BYTE PTR [rbp+0x0],0x0
    7dbe:	mov    BYTE PTR [rbx],0x0
    7dc1:	cmp    BYTE PTR [r14+0x32],0x0
    7dc6:	jne    7e1c <keycompare+0x14c>
    7dc8:	cmp    BYTE PTR [r14+0x34],0x0
    7dcd:	jne    80e8 <keycompare+0x418>
    7dd3:	cmp    BYTE PTR [r14+0x35],0x0
    7dd8:	jne    7f14 <keycompare+0x244>
    7dde:	cmp    BYTE PTR [r14+0x36],0x0
    7de3:	jne    83d0 <keycompare+0x700>
    7de9:	cmp    BYTE PTR [r14+0x33],0x0
    7dee:	jne    8410 <keycompare+0x740>
    7df4:	cmp    BYTE PTR [r14+0x38],0x0
    7df9:	je     8340 <keycompare+0x670>
    7dff:	mov    rdx,r8
    7e02:	mov    rsi,r11
    7e05:	mov    rdi,r12
    7e08:	call   d580 <filenvercmp>
    7e0d:	mov    DWORD PTR [rsp],eax
    7e10:	jmp    7e63 <keycompare+0x193>
    7e12:	nop    WORD PTR [rax+rax*1+0x0]
    7e18:	add    r12,0x1
    7e1c:	movzx  eax,BYTE PTR [r12]
    7e21:	cmp    BYTE PTR [r15+rax*1],0x0
    7e26:	jne    7e18 <keycompare+0x148>
    7e28:	movzx  eax,BYTE PTR [r8]
    7e2c:	cmp    BYTE PTR [r15+rax*1],0x0
    7e31:	je     7e48 <keycompare+0x178>
    7e33:	nop    DWORD PTR [rax+rax*1+0x0]
    7e38:	movzx  eax,BYTE PTR [r8+0x1]
    7e3d:	add    r8,0x1
    7e41:	cmp    BYTE PTR [r15+rax*1],0x0
    7e46:	jne    7e38 <keycompare+0x168>
    7e48:	movsx  edx,BYTE PTR [rip+0x16a39]        # 1e888 <decimal_point>
    7e4f:	mov    ecx,DWORD PTR [rip+0x16a2f]        # 1e884 <thousands_sep>
    7e55:	mov    rsi,r8
    7e58:	mov    rdi,r12
    7e5b:	call   12370 <strnumcmp>
    7e60:	mov    DWORD PTR [rsp],eax
    7e63:	movzx  eax,BYTE PTR [rsp+0x28]
    7e68:	mov    rdi,QWORD PTR [rsp+0x18]
    7e6d:	mov    BYTE PTR [rbp+0x0],al
    7e70:	movzx  eax,BYTE PTR [rsp+0x37]
    7e75:	mov    BYTE PTR [rbx],al
    7e77:	call   d750 <rpl_free>
    7e7c:	mov    eax,DWORD PTR [rsp]
    7e7f:	test   eax,eax
    7e81:	jne    81a4 <keycompare+0x4d4>
    7e87:	mov    r14,QWORD PTR [r14+0x40]
    7e8b:	test   r14,r14
    7e8e:	je     8400 <keycompare+0x730>
    7e94:	mov    rax,QWORD PTR [rsp+0x38]
    7e99:	cmp    QWORD PTR [r14+0x10],0xffffffffffffffff
    7e9e:	mov    r12,QWORD PTR [rax]
    7ea1:	mov    rbp,QWORD PTR [rax+0x8]
    7ea5:	je     8000 <keycompare+0x330>
    7eab:	mov    rdx,r14
    7eae:	mov    rsi,rbp
    7eb1:	mov    rdi,r12
    7eb4:	call   7b70 <limfield.isra.0>
    7eb9:	mov    rdx,r14
    7ebc:	mov    r10,rax
    7ebf:	mov    rax,QWORD PTR [rsp+0x20]
    7ec4:	mov    rsi,QWORD PTR [rax+0x8]
    7ec8:	mov    rdi,QWORD PTR [rax]
    7ecb:	call   7b70 <limfield.isra.0>
    7ed0:	mov    rbx,rax
    7ed3:	cmp    QWORD PTR [r14],0xffffffffffffffff
    7ed7:	je     7f98 <keycompare+0x2c8>
    7edd:	mov    rdi,r12
    7ee0:	mov    rdx,r14
    7ee3:	mov    rsi,rbp
    7ee6:	call   7a40 <begfield.isra.0>
    7eeb:	mov    rdx,r14
    7eee:	mov    r12,rax
    7ef1:	mov    rax,QWORD PTR [rsp+0x20]
    7ef6:	mov    rsi,QWORD PTR [rax+0x8]
    7efa:	mov    rdi,QWORD PTR [rax]
    7efd:	call   7a40 <begfield.isra.0>
    7f02:	mov    r8,rax
    7f05:	jmp    7d58 <keycompare+0x88>
    7f0a:	nop    WORD PTR [rax+rax*1+0x0]
    7f10:	add    r12,0x1
    7f14:	movzx  eax,BYTE PTR [r12]
    7f19:	cmp    BYTE PTR [r15+rax*1],0x0
    7f1e:	jne    7f10 <keycompare+0x240>
    7f20:	movzx  eax,BYTE PTR [r8]
    7f24:	cmp    BYTE PTR [r15+rax*1],0x0
    7f29:	je     7f40 <keycompare+0x270>
    7f2b:	nop    DWORD PTR [rax+rax*1+0x0]
    7f30:	movzx  eax,BYTE PTR [r8+0x1]
    7f35:	add    r8,0x1
    7f39:	cmp    BYTE PTR [r15+rax*1],0x0
    7f3e:	jne    7f30 <keycompare+0x260>
    7f40:	mov    rdi,r12
    7f43:	mov    QWORD PTR [rsp],r8
    7f47:	call   6f10 <find_unit_order>
    7f4c:	mov    r8,QWORD PTR [rsp]
    7f50:	mov    r13d,eax
    7f53:	mov    rdi,r8
    7f56:	mov    QWORD PTR [rsp+0x40],r8
    7f5b:	call   6f10 <find_unit_order>
    7f60:	sub    r13d,eax
    7f63:	mov    DWORD PTR [rsp],r13d
    7f67:	jne    7e63 <keycompare+0x193>
    7f6d:	mov    r8,QWORD PTR [rsp+0x40]
    7f72:	movsx  edx,BYTE PTR [rip+0x1690f]        # 1e888 <decimal_point>
    7f79:	mov    rdi,r12
    7f7c:	mov    ecx,DWORD PTR [rip+0x16902]        # 1e884 <thousands_sep>
    7f82:	mov    rsi,r8
    7f85:	call   12370 <strnumcmp>
    7f8a:	mov    DWORD PTR [rsp],eax
    7f8d:	jmp    7e63 <keycompare+0x193>
    7f92:	nop    WORD PTR [rax+rax*1+0x0]
    7f98:	mov    rax,QWORD PTR [rsp+0x20]
    7f9d:	cmp    BYTE PTR [r14+0x30],0x0
    7fa2:	mov    r8,QWORD PTR [rax]
    7fa5:	je     7d58 <keycompare+0x88>
    7fab:	cmp    r10,r12
    7fae:	ja     7fc1 <keycompare+0x2f1>
    7fb0:	jmp    7fcd <keycompare+0x2fd>
    7fb2:	nop    WORD PTR [rax+rax*1+0x0]
    7fb8:	add    r12,0x1
    7fbc:	cmp    r10,r12
    7fbf:	je     7fcd <keycompare+0x2fd>
    7fc1:	movzx  eax,BYTE PTR [r12]
    7fc6:	cmp    BYTE PTR [r15+rax*1],0x0
    7fcb:	jne    7fb8 <keycompare+0x2e8>
    7fcd:	cmp    rbx,r8
    7fd0:	ja     7fed <keycompare+0x31d>
    7fd2:	jmp    7d58 <keycompare+0x88>
    7fd7:	nop    WORD PTR [rax+rax*1+0x0]
    7fe0:	add    r8,0x1
    7fe4:	cmp    rbx,r8
    7fe7:	je     7d58 <keycompare+0x88>
    7fed:	movzx  eax,BYTE PTR [r8]
    7ff1:	cmp    BYTE PTR [r15+rax*1],0x0
    7ff6:	jne    7fe0 <keycompare+0x310>
    7ff8:	jmp    7d58 <keycompare+0x88>
    7ffd:	nop    DWORD PTR [rax]
    8000:	mov    rdi,QWORD PTR [rsp+0x20]
    8005:	lea    r10,[r12+rbp*1-0x1]
    800a:	mov    rax,QWORD PTR [rdi+0x8]
    800e:	mov    rdx,QWORD PTR [rdi]
    8011:	lea    rbx,[rdx+rax*1-0x1]
    8016:	jmp    7ed3 <keycompare+0x203>
    801b:	nop    DWORD PTR [rax+rax*1+0x0]
    8020:	lea    rdi,[r11+rcx*1+0x2]
    8025:	lea    rsi,[rsp+0x210]
    802d:	mov    QWORD PTR [rsp+0x18],0x0
    8036:	cmp    rdi,0xfa0
    803d:	ja     8270 <keycompare+0x5a0>
    8043:	lea    rdi,[rsi+r11*1+0x1]
    8048:	test   r11,r11
    804b:	je     82b1 <keycompare+0x5e1>
    8051:	lea    rbx,[r12+r11*1]
    8055:	mov    r9,r12
    8058:	xor    r11d,r11d
    805b:	nop    DWORD PTR [rax+rax*1+0x0]
    8060:	movzx  eax,BYTE PTR [r9]
    8064:	test   r13,r13
    8067:	je     8075 <keycompare+0x3a5>
    8069:	movzx  r10d,al
    806d:	cmp    BYTE PTR [r13+r10*1+0x0],0x0
    8073:	jne    8086 <keycompare+0x3b6>
    8075:	test   rdx,rdx
    8078:	je     807e <keycompare+0x3ae>
    807a:	movzx  eax,BYTE PTR [rdx+rax*1]
    807e:	mov    BYTE PTR [rsi+r11*1],al
    8082:	add    r11,0x1
    8086:	add    r9,0x1
    808a:	cmp    rbx,r9
    808d:	jne    8060 <keycompare+0x390>
    808f:	lea    rbp,[rsi+r11*1]
    8093:	test   rcx,rcx
    8096:	je     82c0 <keycompare+0x5f0>
    809c:	lea    rbx,[r8+rcx*1]
    80a0:	xor    ecx,ecx
    80a2:	nop    WORD PTR [rax+rax*1+0x0]
    80a8:	movzx  eax,BYTE PTR [r8]
    80ac:	test   r13,r13
    80af:	je     80bd <keycompare+0x3ed>
    80b1:	movzx  r9d,al
    80b5:	cmp    BYTE PTR [r13+r9*1+0x0],0x0
    80bb:	jne    80cd <keycompare+0x3fd>
    80bd:	test   rdx,rdx
    80c0:	je     80c6 <keycompare+0x3f6>
    80c2:	movzx  eax,BYTE PTR [rdx+rax*1]
    80c6:	mov    BYTE PTR [rdi+rcx*1],al
    80c9:	add    rcx,0x1
    80cd:	add    r8,0x1
    80d1:	cmp    rbx,r8
    80d4:	jne    80a8 <keycompare+0x3d8>
    80d6:	lea    rbx,[rdi+rcx*1]
    80da:	mov    r8,rdi
    80dd:	mov    r12,rsi
    80e0:	jmp    7dba <keycompare+0xea>
    80e5:	nop    DWORD PTR [rax]
    80e8:	lea    rsi,[rsp+0xa0]
    80f0:	mov    rdi,r12
    80f3:	mov    QWORD PTR [rsp],r8
    80f7:	call   3cd0 <strtold@plt>
    80fc:	mov    r8,QWORD PTR [rsp]
    8100:	lea    rsi,[rsp+0xa8]
    8108:	fstp   TBYTE PTR [rsp+0x40]
    810c:	mov    rdi,r8
    810f:	call   3cd0 <strtold@plt>
    8114:	mov    r8,QWORD PTR [rsp]
    8118:	fld    TBYTE PTR [rsp+0x40]
    811c:	cmp    r12,QWORD PTR [rsp+0xa0]
    8124:	je     8830 <keycompare+0xb60>
    812a:	cmp    r8,QWORD PTR [rsp+0xa8]
    8132:	je     8178 <keycompare+0x4a8>
    8134:	fxch   st(1)
    8136:	fcomi  st,st(1)
    8138:	ja     8862 <keycompare+0xb92>
    813e:	fxch   st(1)
    8140:	fcomi  st,st(1)
    8142:	ja     8180 <keycompare+0x4b0>
    8144:	fucomi st,st(1)
    8146:	jp     8152 <keycompare+0x482>
    8148:	je     8840 <keycompare+0xb70>
    814e:	fxch   st(1)
    8150:	jmp    8154 <keycompare+0x484>
    8152:	fxch   st(1)
    8154:	fucomi st,st(0)
    8156:	jp     8162 <keycompare+0x492>
    8158:	je     8868 <keycompare+0xb98>
    815e:	fxch   st(1)
    8160:	jmp    8164 <keycompare+0x494>
    8162:	fxch   st(1)
    8164:	fucomi st,st(0)
    8166:	jp     8a2f <keycompare+0xd5f>
    816c:	jne    8a38 <keycompare+0xd68>
    8172:	fstp   st(0)
    8174:	fstp   st(0)
    8176:	jmp    8184 <keycompare+0x4b4>
    8178:	fstp   st(0)
    817a:	fstp   st(0)
    817c:	jmp    8184 <keycompare+0x4b4>
    817e:	xchg   ax,ax
    8180:	fstp   st(0)
    8182:	fstp   st(0)
    8184:	movzx  eax,BYTE PTR [rsp+0x28]
    8189:	mov    rdi,QWORD PTR [rsp+0x18]
    818e:	mov    BYTE PTR [rbp+0x0],al
    8191:	movzx  eax,BYTE PTR [rsp+0x37]
    8196:	mov    BYTE PTR [rbx],al
    8198:	call   d750 <rpl_free>
    819d:	mov    DWORD PTR [rsp],0x1
    81a4:	cmp    BYTE PTR [r14+0x37],0x0
    81a9:	jne    837e <keycompare+0x6ae>
    81af:	mov    rax,QWORD PTR [rsp+0x2158]
    81b7:	xor    rax,QWORD PTR fs:0x28
    81c0:	jne    8bef <keycompare+0xf1f>
    81c6:	mov    eax,DWORD PTR [rsp]
    81c9:	add    rsp,0x2168
    81d0:	pop    rbx
    81d1:	pop    rbp
    81d2:	pop    r12
    81d4:	pop    r13
    81d6:	pop    r14
    81d8:	pop    r15
    81da:	ret    
    81db:	nop    DWORD PTR [rax+rax*1+0x0]
    81e0:	cmp    BYTE PTR [r14+0x38],0x0
    81e5:	jne    7d9a <keycompare+0xca>
    81eb:	test   r13,r13
    81ee:	je     8891 <keycompare+0xbc1>
    81f4:	mov    rsi,r12
    81f7:	mov    r9,r12
    81fa:	test   rdx,rdx
    81fd:	je     82f6 <keycompare+0x626>
    8203:	nop    DWORD PTR [rax+rax*1+0x0]
    8208:	cmp    rsi,rbp
    820b:	jae    8218 <keycompare+0x548>
    820d:	movzx  eax,BYTE PTR [rsi]
    8210:	cmp    BYTE PTR [r13+rax*1+0x0],0x0
    8216:	jne    826a <keycompare+0x59a>
    8218:	cmp    r8,rbx
    821b:	jb     8235 <keycompare+0x565>
    821d:	jmp    83a3 <keycompare+0x6d3>
    8222:	nop    WORD PTR [rax+rax*1+0x0]
    8228:	add    r8,0x1
    822c:	cmp    rbx,r8
    822f:	je     83a0 <keycompare+0x6d0>
    8235:	movzx  eax,BYTE PTR [r8]
    8239:	cmp    BYTE PTR [r13+rax*1+0x0],0x0
    823f:	jne    8228 <keycompare+0x558>
    8241:	cmp    rbp,rsi
    8244:	jbe    83a3 <keycompare+0x6d3>
    824a:	cmp    rbx,r8
    824d:	jbe    83a3 <keycompare+0x6d3>
    8253:	movzx  ecx,BYTE PTR [rsi]
    8256:	movzx  eax,BYTE PTR [rdx+rax*1]
    825a:	movzx  ecx,BYTE PTR [rdx+rcx*1]
    825e:	sub    ecx,eax
    8260:	jne    8b75 <keycompare+0xea5>
    8266:	add    r8,0x1
    826a:	add    rsi,0x1
    826e:	jmp    8208 <keycompare+0x538>
    8270:	mov    QWORD PTR [rsp+0x58],r8
    8275:	mov    QWORD PTR [rsp+0x50],rcx
    827a:	mov    QWORD PTR [rsp+0x40],rdx
    827f:	mov    QWORD PTR [rsp],r11
    8283:	call   13000 <xmalloc>
    8288:	mov    r11,QWORD PTR [rsp]
    828c:	mov    r8,QWORD PTR [rsp+0x58]
    8291:	mov    rsi,rax
    8294:	mov    QWORD PTR [rsp+0x18],rax
    8299:	mov    rcx,QWORD PTR [rsp+0x50]
    829e:	mov    rdx,QWORD PTR [rsp+0x40]
    82a3:	lea    rdi,[rsi+r11*1+0x1]
    82a8:	test   r11,r11
    82ab:	jne    8051 <keycompare+0x381>
    82b1:	mov    rbp,rsi
    82b4:	test   rcx,rcx
    82b7:	jne    809c <keycompare+0x3cc>
    82bd:	nop    DWORD PTR [rax]
    82c0:	mov    r8,rdi
    82c3:	mov    rbx,rdi
    82c6:	mov    r12,rsi
    82c9:	jmp    7dba <keycompare+0xea>
    82ce:	xchg   ax,ax
    82d0:	cmp    rbp,r9
    82d3:	jbe    83c3 <keycompare+0x6f3>
    82d9:	cmp    rbx,r8
    82dc:	jbe    83c3 <keycompare+0x6f3>
    82e2:	movzx  edx,BYTE PTR [r9]
    82e6:	sub    edx,eax
    82e8:	jne    8bcc <keycompare+0xefc>
    82ee:	add    r8,0x1
    82f2:	add    r9,0x1
    82f6:	cmp    r9,rbp
    82f9:	jae    8307 <keycompare+0x637>
    82fb:	movzx  eax,BYTE PTR [r9]
    82ff:	cmp    BYTE PTR [r13+rax*1+0x0],0x0
    8305:	jne    82f2 <keycompare+0x622>
    8307:	cmp    r8,rbx
    830a:	jb     8325 <keycompare+0x655>
    830c:	jmp    83c3 <keycompare+0x6f3>
    8311:	nop    DWORD PTR [rax+0x0]
    8318:	add    r8,0x1
    831c:	cmp    rbx,r8
    831f:	je     83c0 <keycompare+0x6f0>
    8325:	movzx  edx,BYTE PTR [r8]
    8329:	cmp    BYTE PTR [r13+rdx*1+0x0],0x0
    832f:	mov    rax,rdx
    8332:	jne    8318 <keycompare+0x648>
    8334:	jmp    82d0 <keycompare+0x600>
    8336:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8340:	test   r11,r11
    8343:	je     890f <keycompare+0xc3f>
    8349:	test   rcx,rcx
    834c:	jne    8bd4 <keycompare+0xf04>
    8352:	movzx  eax,BYTE PTR [rsp+0x28]
    8357:	mov    rdi,QWORD PTR [rsp+0x18]
    835c:	mov    BYTE PTR [rbp+0x0],al
    835f:	movzx  eax,BYTE PTR [rsp+0x37]
    8364:	mov    BYTE PTR [r8],al
    8367:	call   d750 <rpl_free>
    836c:	cmp    BYTE PTR [r14+0x37],0x0
    8371:	mov    DWORD PTR [rsp],0x1
    8378:	je     81af <keycompare+0x4df>
    837e:	mov    eax,DWORD PTR [rsp]
    8381:	mov    edx,eax
    8383:	shr    edx,0x1f
    8386:	test   eax,eax
    8388:	setg   al
    838b:	movzx  eax,al
    838e:	sub    edx,eax
    8390:	mov    DWORD PTR [rsp],edx
    8393:	jmp    81af <keycompare+0x4df>
    8398:	nop    DWORD PTR [rax+rax*1+0x0]
    83a0:	mov    r8,rbx
    83a3:	cmp    rsi,rbp
    83a6:	setb   al
    83a9:	xor    edx,edx
    83ab:	cmp    rbx,r8
    83ae:	movzx  eax,al
    83b1:	seta   dl
    83b4:	sub    eax,edx
    83b6:	mov    DWORD PTR [rsp],eax
    83b9:	jmp    7e7c <keycompare+0x1ac>
    83be:	xchg   ax,ax
    83c0:	mov    r8,rbx
    83c3:	cmp    r9,rbp
    83c6:	jmp    83a6 <keycompare+0x6d6>
    83c8:	nop    DWORD PTR [rax+rax*1+0x0]
    83d0:	mov    rdi,r12
    83d3:	xor    esi,esi
    83d5:	mov    QWORD PTR [rsp],r8
    83d9:	call   6f90 <getmonth>
    83de:	mov    r8,QWORD PTR [rsp]
    83e2:	xor    esi,esi
    83e4:	mov    r12d,eax
    83e7:	mov    rdi,r8
    83ea:	call   6f90 <getmonth>
    83ef:	sub    r12d,eax
    83f2:	mov    DWORD PTR [rsp],r12d
    83f6:	jmp    7e63 <keycompare+0x193>
    83fb:	nop    DWORD PTR [rax+rax*1+0x0]
    8400:	mov    DWORD PTR [rsp],0x0
    8407:	jmp    81af <keycompare+0x4df>
    840c:	nop    DWORD PTR [rax+0x0]
    8410:	movdqa xmm8,XMMWORD PTR [rip+0x15ec7]        # 1e2e0 <random_md5_state>
    8419:	movdqa xmm7,XMMWORD PTR [rip+0x15ecf]        # 1e2f0 <random_md5_state+0x10>
    8421:	movdqa xmm6,XMMWORD PTR [rip+0x15ed7]        # 1e300 <random_md5_state+0x20>
    8429:	movdqa xmm5,XMMWORD PTR [rip+0x15edf]        # 1e310 <random_md5_state+0x30>
    8431:	movdqa xmm4,XMMWORD PTR [rip+0x15ee7]        # 1e320 <random_md5_state+0x40>
    8439:	movdqa xmm3,XMMWORD PTR [rip+0x15eef]        # 1e330 <random_md5_state+0x50>
    8441:	movups XMMWORD PTR [rsp+0x16c],xmm8
    844a:	movdqa xmm2,XMMWORD PTR [rip+0x15eee]        # 1e340 <random_md5_state+0x60>
    8452:	movdqa xmm1,XMMWORD PTR [rip+0x15ef6]        # 1e350 <random_md5_state+0x70>
    845a:	movups XMMWORD PTR [rsp+0x17c],xmm7
    8462:	movdqa xmm0,XMMWORD PTR [rip+0x15ef6]        # 1e360 <random_md5_state+0x80>
    846a:	mov    rdx,QWORD PTR [rip+0x15eff]        # 1e370 <random_md5_state+0x90>
    8471:	movups XMMWORD PTR [rsp+0x18c],xmm6
    8479:	mov    eax,DWORD PTR [rip+0x15ef9]        # 1e378 <random_md5_state+0x98>
    847f:	movups XMMWORD PTR [rsp+0x19c],xmm5
    8487:	mov    QWORD PTR [rsp+0x1fc],rdx
    848f:	mov    DWORD PTR [rsp+0x204],eax
    8496:	mov    QWORD PTR [rsp+0x160],rdx
    849e:	movups XMMWORD PTR [rsp+0x1ac],xmm4
    84a6:	movups XMMWORD PTR [rsp+0x1bc],xmm3
    84ae:	movups XMMWORD PTR [rsp+0x1cc],xmm2
    84b6:	movups XMMWORD PTR [rsp+0x1dc],xmm1
    84be:	movups XMMWORD PTR [rsp+0x1ec],xmm0
    84c6:	movaps XMMWORD PTR [rsp+0xd0],xmm8
    84cf:	movaps XMMWORD PTR [rsp+0xe0],xmm7
    84d7:	movaps XMMWORD PTR [rsp+0xf0],xmm6
    84df:	movaps XMMWORD PTR [rsp+0x100],xmm5
    84e7:	movaps XMMWORD PTR [rsp+0x110],xmm4
    84ef:	movaps XMMWORD PTR [rsp+0x120],xmm3
    84f7:	movaps XMMWORD PTR [rsp+0x130],xmm2
    84ff:	movaps XMMWORD PTR [rsp+0x140],xmm1
    8507:	movaps XMMWORD PTR [rsp+0x150],xmm0
    850f:	mov    DWORD PTR [rsp+0x168],eax
    8516:	cmp    BYTE PTR [rip+0x16364],0x0        # 1e881 <hard_LC_COLLATE>
    851d:	je     8921 <keycompare+0xc51>
    8523:	add    rcx,r11
    8526:	mov    DWORD PTR [rsp],0x0
    852d:	mov    r13,QWORD PTR [rsp+0x90]
    8535:	lea    rax,[rcx+rcx*2+0x2]
    853a:	mov    QWORD PTR [rsp+0x50],rbp
    853f:	mov    QWORD PTR [rsp+0x78],rax
    8544:	lea    rax,[rsp+0xd0]
    854c:	mov    QWORD PTR [rsp+0x88],rax
    8554:	lea    rax,[rsp+0x16c]
    855c:	mov    QWORD PTR [rsp+0x70],0x0
    8565:	mov    QWORD PTR [rsp+0x40],0xfa0
    856e:	mov    QWORD PTR [rsp+0x80],rax
    8576:	mov    QWORD PTR [rsp+0x68],rbx
    857b:	mov    QWORD PTR [rsp+0x98],r14
    8583:	mov    r14,r13
    8586:	mov    r13,r8
    8589:	nop    DWORD PTR [rax+0x0]
    8590:	mov    rdi,QWORD PTR [rsp+0x40]
    8595:	cmp    QWORD PTR [rsp+0x78],rdi
    859a:	ja     865c <keycompare+0x98c>
    85a0:	cmp    r12,QWORD PTR [rsp+0x50]
    85a5:	jb     86a7 <keycompare+0x9d7>
    85ab:	cmp    r13,QWORD PTR [rsp+0x68]
    85b0:	jb     8ae8 <keycompare+0xe18>
    85b6:	mov    QWORD PTR [rsp+0x60],r14
    85bb:	xor    ebp,ebp
    85bd:	xor    ebx,ebx
    85bf:	cmp    r13,QWORD PTR [rsp+0x68]
    85c4:	jae    8c28 <keycompare+0xf58>
    85ca:	mov    rdi,r13
    85cd:	call   3980 <strlen@plt>
    85d2:	lea    r13,[r13+rax*1+0x1]
    85d7:	cmp    r12,QWORD PTR [rsp+0x50]
    85dc:	jb     85e9 <keycompare+0x919>
    85de:	cmp    r13,QWORD PTR [rsp+0x68]
    85e3:	jae    8c28 <keycompare+0xf58>
    85e9:	mov    rdx,QWORD PTR [rsp+0x88]
    85f1:	mov    rsi,rbx
    85f4:	mov    rdi,r14
    85f7:	call   cd30 <md5_process_bytes>
    85fc:	mov    rdx,QWORD PTR [rsp+0x80]
    8604:	mov    rdi,QWORD PTR [rsp+0x60]
    8609:	mov    rsi,rbp
    860c:	call   cd30 <md5_process_bytes>
    8611:	mov    ecx,DWORD PTR [rsp]
    8614:	test   ecx,ecx
    8616:	jne    8590 <keycompare+0x8c0>
    861c:	cmp    rbx,rbp
    861f:	mov    rdx,rbp
    8622:	mov    rsi,QWORD PTR [rsp+0x60]
    8627:	mov    rdi,r14
    862a:	cmovbe rdx,rbx
    862e:	call   3ad0 <memcmp@plt>
    8633:	mov    DWORD PTR [rsp],eax
    8636:	test   eax,eax
    8638:	jne    8590 <keycompare+0x8c0>
    863e:	xor    eax,eax
    8640:	cmp    rbx,rbp
    8643:	mov    rdi,QWORD PTR [rsp+0x40]
    8648:	seta   al
    864b:	sbb    eax,0x0
    864e:	mov    DWORD PTR [rsp],eax
    8651:	cmp    QWORD PTR [rsp+0x78],rdi
    8656:	jbe    85a0 <keycompare+0x8d0>
    865c:	mov    rcx,QWORD PTR [rsp+0x78]
    8661:	lea    rax,[rdi+rdi*2]
    8665:	mov    rdi,QWORD PTR [rsp+0x70]
    866a:	shr    rax,1
    866d:	cmp    rcx,rax
    8670:	cmovae rax,rcx
    8674:	mov    rbx,rax
    8677:	mov    QWORD PTR [rsp+0x40],rax
    867c:	call   d750 <rpl_free>
    8681:	mov    rdi,rbx
    8684:	call   3770 <malloc@plt>
    8689:	mov    QWORD PTR [rsp+0x70],rax
    868e:	test   rax,rax
    8691:	je     8c12 <keycompare+0xf42>
    8697:	mov    r14,QWORD PTR [rsp+0x70]
    869c:	cmp    r12,QWORD PTR [rsp+0x50]
    86a1:	jae    85ab <keycompare+0x8db>
    86a7:	mov    rbp,QWORD PTR [rsp+0x40]
    86ac:	mov    rsi,r12
    86af:	mov    rdi,r14
    86b2:	mov    rdx,rbp
    86b5:	call   7550 <xstrxfrm>
    86ba:	lea    rbx,[rax+0x1]
    86be:	cmp    r13,QWORD PTR [rsp+0x68]
    86c3:	jae    8bc0 <keycompare+0xef0>
    86c9:	cmp    rbp,rbx
    86cc:	jae    8c01 <keycompare+0xf31>
    86d2:	xor    edx,edx
    86d4:	xor    edi,edi
    86d6:	mov    rsi,r13
    86d9:	call   7550 <xstrxfrm>
    86de:	lea    rbp,[rax+0x1]
    86e2:	lea    rax,[rbp+rbx*1+0x0]
    86e7:	mov    QWORD PTR [rsp+0x58],rax
    86ec:	cmp    QWORD PTR [rsp+0x40],rbx
    86f1:	jae    8b7d <keycompare+0xead>
    86f7:	movabs rcx,0x5555555555555554
    8701:	cmp    QWORD PTR [rsp+0x58],rcx
    8706:	ja     8719 <keycompare+0xa49>
    8708:	mov    rax,QWORD PTR [rsp+0x58]
    870d:	lea    r14,[rax+rax*2]
    8711:	shr    r14,1
    8714:	mov    QWORD PTR [rsp+0x58],r14
    8719:	mov    rdi,QWORD PTR [rsp+0x70]
    871e:	call   d750 <rpl_free>
    8723:	mov    rdi,QWORD PTR [rsp+0x58]
    8728:	call   13000 <xmalloc>
    872d:	mov    r14,rax
    8730:	cmp    r12,QWORD PTR [rsp+0x50]
    8735:	jb     8b00 <keycompare+0xe30>
    873b:	lea    rax,[rax+rbx*1]
    873f:	mov    QWORD PTR [rsp+0x60],rax
    8744:	cmp    r13,QWORD PTR [rsp+0x68]
    8749:	jb     8b53 <keycompare+0xe83>
    874f:	mov    rax,QWORD PTR [rsp+0x50]
    8754:	cmp    r12,rax
    8757:	jb     8ac0 <keycompare+0xdf0>
    875d:	mov    r13,r14
    8760:	mov    r11,rbx
    8763:	mov    rbx,QWORD PTR [rsp+0x68]
    8768:	mov    rcx,rbp
    876b:	mov    QWORD PTR [rsp+0x70],r13
    8770:	mov    r14,QWORD PTR [rsp+0x98]
    8778:	mov    rbp,rax
    877b:	mov    rdx,QWORD PTR [rsp+0x88]
    8783:	mov    rsi,r11
    8786:	mov    rdi,r13
    8789:	mov    QWORD PTR [rsp+0x58],r11
    878e:	mov    QWORD PTR [rsp+0x40],rcx
    8793:	lea    r12,[rsp+0xb0]
    879b:	call   cd30 <md5_process_bytes>
    87a0:	mov    rdi,QWORD PTR [rsp+0x88]
    87a8:	mov    rsi,r12
    87ab:	call   cc10 <md5_finish_ctx>
    87b0:	mov    rcx,QWORD PTR [rsp+0x40]
    87b5:	mov    rdi,QWORD PTR [rsp+0x60]
    87ba:	mov    rdx,QWORD PTR [rsp+0x80]
    87c2:	mov    rsi,rcx
    87c5:	mov    QWORD PTR [rsp+0x50],rcx
    87ca:	call   cd30 <md5_process_bytes>
    87cf:	mov    rdi,QWORD PTR [rsp+0x80]
    87d7:	lea    rsi,[rsp+0xc0]
    87df:	mov    QWORD PTR [rsp+0x40],rsi
    87e4:	call   cc10 <md5_finish_ctx>
    87e9:	mov    rsi,QWORD PTR [rsp+0x40]
    87ee:	mov    edx,0x10
    87f3:	mov    rdi,r12
    87f6:	call   3ad0 <memcmp@plt>
    87fb:	mov    rcx,QWORD PTR [rsp+0x50]
    8800:	mov    r11,QWORD PTR [rsp+0x58]
    8805:	test   eax,eax
    8807:	jne    8a1d <keycompare+0xd4d>
    880d:	mov    edx,DWORD PTR [rsp]
    8810:	test   edx,edx
    8812:	je     8bf4 <keycompare+0xf24>
    8818:	mov    rdi,QWORD PTR [rsp+0x70]
    881d:	call   d750 <rpl_free>
    8822:	jmp    7e63 <keycompare+0x193>
    8827:	nop    WORD PTR [rax+rax*1+0x0]
    8830:	fstp   st(0)
    8832:	fstp   st(0)
    8834:	cmp    r8,QWORD PTR [rsp+0xa8]
    883c:	jne    886c <keycompare+0xb9c>
    883e:	jmp    8844 <keycompare+0xb74>
    8840:	fstp   st(0)
    8842:	fstp   st(0)
    8844:	movzx  eax,BYTE PTR [rsp+0x28]
    8849:	mov    rdi,QWORD PTR [rsp+0x18]
    884e:	mov    BYTE PTR [rbp+0x0],al
    8851:	movzx  eax,BYTE PTR [rsp+0x37]
    8856:	mov    BYTE PTR [rbx],al
    8858:	call   d750 <rpl_free>
    885d:	jmp    7e87 <keycompare+0x1b7>
    8862:	fstp   st(0)
    8864:	fstp   st(0)
    8866:	jmp    886c <keycompare+0xb9c>
    8868:	fstp   st(0)
    886a:	fstp   st(0)
    886c:	movzx  eax,BYTE PTR [rsp+0x28]
    8871:	mov    rdi,QWORD PTR [rsp+0x18]
    8876:	mov    BYTE PTR [rbp+0x0],al
    8879:	movzx  eax,BYTE PTR [rsp+0x37]
    887e:	mov    BYTE PTR [rbx],al
    8880:	call   d750 <rpl_free>
    8885:	mov    DWORD PTR [rsp],0xffffffff
    888c:	jmp    81a4 <keycompare+0x4d4>
    8891:	cmp    r11,rcx
    8894:	mov    r10,rcx
    8897:	cmovbe r10,r11
    889b:	test   r10,r10
    889e:	je     88d2 <keycompare+0xc02>
    88a0:	test   rdx,rdx
    88a3:	jne    88f1 <keycompare+0xc21>
    88a5:	mov    rdx,r10
    88a8:	mov    rsi,r8
    88ab:	mov    rdi,r12
    88ae:	mov    QWORD PTR [rsp+0x28],rcx
    88b3:	mov    QWORD PTR [rsp+0x18],r11
    88b8:	call   3ad0 <memcmp@plt>
    88bd:	mov    r11,QWORD PTR [rsp+0x18]
    88c2:	mov    rcx,QWORD PTR [rsp+0x28]
    88c7:	test   eax,eax
    88c9:	mov    DWORD PTR [rsp],eax
    88cc:	jne    81a4 <keycompare+0x4d4>
    88d2:	xor    eax,eax
    88d4:	cmp    r11,rcx
    88d7:	seta   al
    88da:	sbb    eax,0x0
    88dd:	mov    DWORD PTR [rsp],eax
    88e0:	jmp    7e7c <keycompare+0x1ac>
    88e5:	nop    DWORD PTR [rax]
    88e8:	add    rax,0x1
    88ec:	cmp    r10,rax
    88ef:	je     88d2 <keycompare+0xc02>
    88f1:	movzx  esi,BYTE PTR [r12+rax*1]
    88f6:	movzx  edi,BYTE PTR [r8+rax*1]
    88fb:	movzx  esi,BYTE PTR [rdx+rsi*1]
    88ff:	movzx  edi,BYTE PTR [rdx+rdi*1]
    8903:	sub    esi,edi
    8905:	je     88e8 <keycompare+0xc18>
    8907:	mov    DWORD PTR [rsp],esi
    890a:	jmp    81a4 <keycompare+0x4d4>
    890f:	xor    eax,eax
    8911:	test   rcx,rcx
    8914:	setne  al
    8917:	neg    eax
    8919:	mov    DWORD PTR [rsp],eax
    891c:	jmp    7e63 <keycompare+0x193>
    8921:	lea    r13,[rsp+0xd0]
    8929:	mov    rsi,r11
    892c:	mov    rdi,r12
    892f:	mov    QWORD PTR [rsp+0x58],r11
    8934:	mov    rdx,r13
    8937:	mov    QWORD PTR [rsp+0x60],r8
    893c:	mov    QWORD PTR [rsp+0x40],rcx
    8941:	call   cd30 <md5_process_bytes>
    8946:	lea    r9,[rsp+0xb0]
    894e:	mov    rdi,r13
    8951:	lea    r13,[rsp+0xc0]
    8959:	mov    rsi,r9
    895c:	mov    QWORD PTR [rsp],r9
    8960:	call   cc10 <md5_finish_ctx>
    8965:	mov    rcx,QWORD PTR [rsp+0x40]
    896a:	mov    r8,QWORD PTR [rsp+0x60]
    896f:	lea    rax,[rsp+0x16c]
    8977:	mov    rdx,rax
    897a:	mov    QWORD PTR [rsp+0x80],rax
    8982:	mov    rsi,rcx
    8985:	mov    rdi,r8
    8988:	mov    QWORD PTR [rsp+0x50],rcx
    898d:	mov    QWORD PTR [rsp+0x40],r8
    8992:	call   cd30 <md5_process_bytes>
    8997:	mov    rdi,QWORD PTR [rsp+0x80]
    899f:	mov    rsi,r13
    89a2:	call   cc10 <md5_finish_ctx>
    89a7:	mov    r9,QWORD PTR [rsp]
    89ab:	mov    edx,0x10
    89b0:	mov    rsi,r13
    89b3:	mov    rdi,r9
    89b6:	call   3ad0 <memcmp@plt>
    89bb:	mov    r8,QWORD PTR [rsp+0x40]
    89c0:	mov    rcx,QWORD PTR [rsp+0x50]
    89c5:	mov    QWORD PTR [rsp+0x70],0x0
    89ce:	test   eax,eax
    89d0:	mov    DWORD PTR [rsp],eax
    89d3:	mov    r11,QWORD PTR [rsp+0x58]
    89d8:	jne    8818 <keycompare+0xb48>
    89de:	cmp    r11,rcx
    89e1:	mov    rdx,rcx
    89e4:	mov    rsi,r8
    89e7:	mov    rdi,r12
    89ea:	cmovbe rdx,r11
    89ee:	mov    QWORD PTR [rsp+0x50],rcx
    89f3:	mov    QWORD PTR [rsp+0x40],r11
    89f8:	call   3ad0 <memcmp@plt>
    89fd:	mov    DWORD PTR [rsp],eax
    8a00:	test   eax,eax
    8a02:	jne    8818 <keycompare+0xb48>
    8a08:	mov    r11,QWORD PTR [rsp+0x40]
    8a0d:	mov    rcx,QWORD PTR [rsp+0x50]
    8a12:	xor    eax,eax
    8a14:	cmp    r11,rcx
    8a17:	seta   al
    8a1a:	sbb    eax,0x0
    8a1d:	mov    rdi,QWORD PTR [rsp+0x70]
    8a22:	mov    DWORD PTR [rsp],eax
    8a25:	call   d750 <rpl_free>
    8a2a:	jmp    7e63 <keycompare+0x193>
    8a2f:	fxch   st(1)
    8a31:	jmp    8a3a <keycompare+0xd6a>
    8a33:	nop    DWORD PTR [rax+rax*1+0x0]
    8a38:	fxch   st(1)
    8a3a:	fstp   TBYTE PTR [rsp]
    8a3d:	mov    ecx,0x10e
    8a42:	mov    edx,0x1
    8a47:	xor    eax,eax
    8a49:	lea    r13,[rsp+0xd0]
    8a51:	lea    r8,[rip+0xe165]        # 16bbd <short_options+0x174d>
    8a58:	sub    rsp,0x10
    8a5c:	mov    esi,0x87
    8a61:	mov    rdi,r13
    8a64:	lea    r12,[rsp+0x167]
    8a6c:	fstp   TBYTE PTR [rsp]
    8a6f:	call   37b0 <__snprintf_chk@plt>
    8a74:	fld    TBYTE PTR [rsp+0x10]
    8a78:	mov    ecx,0x87
    8a7d:	xor    eax,eax
    8a7f:	sub    rsp,0x10
    8a83:	lea    r8,[rip+0xe133]        # 16bbd <short_options+0x174d>
    8a8a:	mov    edx,0x1
    8a8f:	mov    esi,0x87
    8a94:	mov    rdi,r12
    8a97:	fstp   TBYTE PTR [rsp]
    8a9a:	call   37b0 <__snprintf_chk@plt>
    8a9f:	add    rsp,0x20
    8aa3:	mov    rsi,r12
    8aa6:	mov    rdi,r13
    8aa9:	call   3b20 <strcmp@plt>
    8aae:	mov    DWORD PTR [rsp],eax
    8ab1:	jmp    7e63 <keycompare+0x193>
    8ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8ac0:	mov    rdi,r12
    8ac3:	call   3980 <strlen@plt>
    8ac8:	mov    QWORD PTR [rsp+0x70],r14
    8acd:	lea    r12,[r12+rax*1+0x1]
    8ad2:	mov    rax,QWORD PTR [rsp+0x58]
    8ad7:	mov    QWORD PTR [rsp+0x40],rax
    8adc:	jmp    85d7 <keycompare+0x907>
    8ae1:	nop    DWORD PTR [rax+0x0]
    8ae8:	mov    rdx,QWORD PTR [rsp+0x40]
    8aed:	mov    rdi,r14
    8af0:	xor    ebx,ebx
    8af2:	jmp    86d6 <keycompare+0xa06>
    8af7:	nop    WORD PTR [rax+rax*1+0x0]
    8b00:	mov    rdx,rbx
    8b03:	mov    rsi,r12
    8b06:	mov    rdi,rax
    8b09:	call   3b10 <strxfrm@plt>
    8b0e:	lea    rax,[r14+rbx*1]
    8b12:	mov    QWORD PTR [rsp+0x60],rax
    8b17:	cmp    r13,QWORD PTR [rsp+0x68]
    8b1c:	jae    874f <keycompare+0xa7f>
    8b22:	mov    rdi,QWORD PTR [rsp+0x60]
    8b27:	mov    rdx,rbp
    8b2a:	mov    rsi,r13
    8b2d:	call   3b10 <strxfrm@plt>
    8b32:	mov    rdi,r12
    8b35:	call   3980 <strlen@plt>
    8b3a:	mov    QWORD PTR [rsp+0x70],r14
    8b3f:	lea    r12,[r12+rax*1+0x1]
    8b44:	mov    rax,QWORD PTR [rsp+0x58]
    8b49:	mov    QWORD PTR [rsp+0x40],rax
    8b4e:	jmp    85ca <keycompare+0x8fa>
    8b53:	mov    rdx,rbp
    8b56:	mov    rsi,r13
    8b59:	mov    rdi,rax
    8b5c:	call   3b10 <strxfrm@plt>
    8b61:	mov    rax,QWORD PTR [rsp+0x58]
    8b66:	mov    QWORD PTR [rsp+0x70],r14
    8b6b:	mov    QWORD PTR [rsp+0x40],rax
    8b70:	jmp    85ca <keycompare+0x8fa>
    8b75:	mov    DWORD PTR [rsp],ecx
    8b78:	jmp    81a4 <keycompare+0x4d4>
    8b7d:	mov    rdi,QWORD PTR [rsp+0x58]
    8b82:	cmp    QWORD PTR [rsp+0x40],rdi
    8b87:	jb     86f7 <keycompare+0xa27>
    8b8d:	lea    rax,[r14+rbx*1]
    8b91:	mov    QWORD PTR [rsp+0x60],rax
    8b96:	cmp    r12,QWORD PTR [rsp+0x50]
    8b9b:	jae    85bf <keycompare+0x8ef>
    8ba1:	mov    rdi,r12
    8ba4:	call   3980 <strlen@plt>
    8ba9:	lea    r12,[r12+rax*1+0x1]
    8bae:	cmp    r13,QWORD PTR [rsp+0x68]
    8bb3:	jae    85d7 <keycompare+0x907>
    8bb9:	jmp    85ca <keycompare+0x8fa>
    8bbe:	xchg   ax,ax
    8bc0:	mov    QWORD PTR [rsp+0x58],rbx
    8bc5:	xor    ebp,ebp
    8bc7:	jmp    86ec <keycompare+0xa1c>
    8bcc:	mov    DWORD PTR [rsp],edx
    8bcf:	jmp    81a4 <keycompare+0x4d4>
    8bd4:	add    rcx,0x1
    8bd8:	lea    rsi,[r11+0x1]
    8bdc:	mov    rdx,r8
    8bdf:	mov    rdi,r12
    8be2:	call   135c0 <xmemcoll0>
    8be7:	mov    DWORD PTR [rsp],eax
    8bea:	jmp    7e63 <keycompare+0x193>
    8bef:	call   3990 <__stack_chk_fail@plt>
    8bf4:	mov    r8,QWORD PTR [rsp+0x60]
    8bf9:	mov    r12,r13
    8bfc:	jmp    89de <keycompare+0xd0e>
    8c01:	mov    rdx,QWORD PTR [rsp+0x40]
    8c06:	lea    rdi,[r14+rbx*1]
    8c0a:	sub    rdx,rbx
    8c0d:	jmp    86d6 <keycompare+0xa06>
    8c12:	mov    QWORD PTR [rsp+0x40],0xfa0
    8c1b:	mov    r14,QWORD PTR [rsp+0x90]
    8c23:	jmp    85a0 <keycompare+0x8d0>
    8c28:	mov    r11,rbx
    8c2b:	mov    rcx,rbp
    8c2e:	mov    r13,r14
    8c31:	mov    rbx,QWORD PTR [rsp+0x68]
    8c36:	mov    rbp,QWORD PTR [rsp+0x50]
    8c3b:	mov    r14,QWORD PTR [rsp+0x98]
    8c43:	jmp    877b <keycompare+0xaab>
    8c48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000008c50 <fillbuf>:
    8c50:	push   r15
    8c52:	push   r14
    8c54:	push   r13
    8c56:	push   r12
    8c58:	push   rbp
    8c59:	push   rbx
    8c5a:	sub    rsp,0x58
    8c5e:	mov    QWORD PTR [rsp+0x28],rdi
    8c63:	mov    QWORD PTR [rsp+0x20],rsi
    8c68:	mov    QWORD PTR [rsp+0x38],rdx
    8c6d:	mov    rbx,QWORD PTR fs:0x28
    8c76:	mov    QWORD PTR [rsp+0x48],rbx
    8c7b:	xor    ebx,ebx
    8c7d:	cmp    BYTE PTR [rdi+0x30],0x0
    8c81:	jne    8e79 <fillbuf+0x229>
    8c87:	mov    rax,rdi
    8c8a:	movzx  edi,BYTE PTR [rip+0x153a7]        # 1e038 <eolchar>
    8c91:	mov    rbx,QWORD PTR [rip+0x15798]        # 1e430 <keylist>
    8c98:	mov    r10,QWORD PTR [rax+0x8]
    8c9c:	mov    rdx,QWORD PTR [rax+0x20]
    8ca0:	mov    rbp,QWORD PTR [rip+0x15389]        # 1e030 <merge_buffer_size>
    8ca7:	mov    r15,QWORD PTR [rax]
    8caa:	mov    BYTE PTR [rsp+0x37],dil
    8caf:	mov    rdi,QWORD PTR [rax+0x28]
    8cb3:	mov    QWORD PTR [rsp+0x8],rdi
    8cb8:	cmp    r10,rdx
    8cbb:	jne    8e9e <fillbuf+0x24e>
    8cc1:	mov    rax,QWORD PTR [rax+0x10]
    8cc5:	mov    rdi,QWORD PTR [rsp+0x8]
    8cca:	sub    rbp,0x22
    8cce:	add    rdi,0x1
    8cd2:	mov    QWORD PTR [rsp+0x18],rdi
    8cd7:	mov    rdi,QWORD PTR [rsp+0x28]
    8cdc:	mov    r12,QWORD PTR [rdi+0x18]
    8ce0:	lea    rcx,[r15+r12*1]
    8ce4:	mov    rdx,rax
    8ce7:	lea    r14,[r15+r10*1]
    8ceb:	shl    rdx,0x5
    8cef:	mov    r12,rcx
    8cf2:	sub    r12,rdx
    8cf5:	mov    rdx,QWORD PTR [rsp+0x8]
    8cfa:	imul   rdx,rax
    8cfe:	sub    rcx,rdx
    8d01:	mov    rdx,rcx
    8d04:	sub    rdx,r14
    8d07:	mov    QWORD PTR [rsp+0x10],rdx
    8d0c:	test   rax,rax
    8d0f:	je     8fab <fillbuf+0x35b>
    8d15:	mov    r8,QWORD PTR [r12+0x8]
    8d1a:	add    r8,QWORD PTR [r12]
    8d1e:	mov    r15,r14
    8d21:	mov    r14,r12
    8d24:	mov    r13,r8
    8d27:	mov    rdi,QWORD PTR [rsp+0x18]
    8d2c:	cmp    QWORD PTR [rsp+0x10],rdi
    8d31:	jbe    8f04 <fillbuf+0x2b4>
    8d37:	nop    WORD PTR [rax+rax*1+0x0]
    8d40:	mov    rax,QWORD PTR [rsp+0x10]
    8d45:	xor    edx,edx
    8d47:	mov    rcx,QWORD PTR [rsp+0x20]
    8d4c:	mov    rdi,r15
    8d4f:	mov    esi,0x1
    8d54:	sub    rax,0x1
    8d58:	div    QWORD PTR [rsp+0x18]
    8d5d:	mov    rdx,rax
    8d60:	mov    r12,rax
    8d63:	call   3900 <fread_unlocked@plt>
    8d68:	sub    QWORD PTR [rsp+0x10],rax
    8d6d:	lea    rdi,[r15+rax*1]
    8d71:	mov    QWORD PTR [rsp],rdi
    8d75:	cmp    r12,rax
    8d78:	je     8dc8 <fillbuf+0x178>
    8d7a:	mov    rax,QWORD PTR [rsp+0x20]
    8d7f:	mov    eax,DWORD PTR [rax]
    8d81:	test   al,0x20
    8d83:	jne    8fe7 <fillbuf+0x397>
    8d89:	test   al,0x10
    8d8b:	je     8dc8 <fillbuf+0x178>
    8d8d:	mov    rax,QWORD PTR [rsp+0x28]
    8d92:	mov    rsi,rax
    8d95:	mov    BYTE PTR [rax+0x30],0x1
    8d99:	mov    rax,QWORD PTR [rsp]
    8d9d:	cmp    QWORD PTR [rsi],rax
    8da0:	je     8e79 <fillbuf+0x229>
    8da6:	cmp    r13,rax
    8da9:	je     8dc8 <fillbuf+0x178>
    8dab:	movzx  esi,BYTE PTR [rsp+0x37]
    8db0:	cmp    BYTE PTR [rax-0x1],sil
    8db4:	je     8dc8 <fillbuf+0x178>
    8db6:	mov    BYTE PTR [rax],sil
    8db9:	add    rax,0x1
    8dbd:	mov    QWORD PTR [rsp],rax
    8dc1:	nop    DWORD PTR [rax+0x0]
    8dc8:	movsx  r12d,BYTE PTR [rsp+0x37]
    8dce:	mov    rax,r13
    8dd1:	mov    r10,r15
    8dd4:	mov    r13,r14
    8dd7:	mov    r15,rbx
    8dda:	mov    r14,rax
    8ddd:	mov    ebx,r12d
    8de0:	mov    r12,QWORD PTR [rsp+0x10]
    8de5:	jmp    8e05 <fillbuf+0x1b5>
    8de7:	nop    WORD PTR [rax+rax*1+0x0]
    8df0:	mov    rdx,r15
    8df3:	mov    rsi,r11
    8df6:	mov    rdi,r14
    8df9:	call   7a40 <begfield.isra.0>
    8dfe:	mov    QWORD PTR [r13+0x10],rax
    8e02:	mov    r14,r10
    8e05:	mov    rdx,QWORD PTR [rsp]
    8e09:	mov    esi,ebx
    8e0b:	mov    rdi,r10
    8e0e:	sub    rdx,r10
    8e11:	call   3ac0 <memchr@plt>
    8e16:	test   rax,rax
    8e19:	je     8ed0 <fillbuf+0x280>
    8e1f:	lea    r10,[rax+0x1]
    8e23:	sub    r13,0x20
    8e27:	mov    BYTE PTR [rax],0x0
    8e2a:	mov    r11,r10
    8e2d:	mov    QWORD PTR [r13+0x0],r14
    8e31:	sub    r11,r14
    8e34:	cmp    rbp,r11
    8e37:	mov    QWORD PTR [r13+0x8],r11
    8e3b:	cmovb  rbp,r11
    8e3f:	sub    r12,QWORD PTR [rsp+0x8]
    8e44:	test   r15,r15
    8e47:	je     8e02 <fillbuf+0x1b2>
    8e49:	cmp    QWORD PTR [r15+0x10],0xffffffffffffffff
    8e4e:	je     8e5e <fillbuf+0x20e>
    8e50:	mov    rdx,r15
    8e53:	mov    rsi,r11
    8e56:	mov    rdi,r14
    8e59:	call   7b70 <limfield.isra.0>
    8e5e:	cmp    QWORD PTR [r15],0xffffffffffffffff
    8e62:	mov    QWORD PTR [r13+0x18],rax
    8e66:	jne    8df0 <fillbuf+0x1a0>
    8e68:	cmp    BYTE PTR [r15+0x30],0x0
    8e6d:	jne    8f78 <fillbuf+0x328>
    8e73:	mov    QWORD PTR [r13+0x10],r14
    8e77:	jmp    8e02 <fillbuf+0x1b2>
    8e79:	xor    eax,eax
    8e7b:	mov    rbx,QWORD PTR [rsp+0x48]
    8e80:	xor    rbx,QWORD PTR fs:0x28
    8e89:	jne    9007 <fillbuf+0x3b7>
    8e8f:	add    rsp,0x58
    8e93:	pop    rbx
    8e94:	pop    rbp
    8e95:	pop    r12
    8e97:	pop    r13
    8e99:	pop    r14
    8e9b:	pop    r15
    8e9d:	ret    
    8e9e:	sub    r10,rdx
    8ea1:	mov    rdi,r15
    8ea4:	lea    rsi,[r15+r10*1]
    8ea8:	call   3cc0 <memmove@plt>
    8ead:	mov    rax,QWORD PTR [rsp+0x28]
    8eb2:	mov    r10,QWORD PTR [rax+0x20]
    8eb6:	mov    r15,QWORD PTR [rax]
    8eb9:	mov    QWORD PTR [rax+0x10],0x0
    8ec1:	mov    QWORD PTR [rax+0x8],r10
    8ec5:	xor    eax,eax
    8ec7:	jmp    8cc5 <fillbuf+0x75>
    8ecc:	nop    DWORD PTR [rax+0x0]
    8ed0:	mov    rax,r14
    8ed3:	mov    r14,r13
    8ed6:	mov    QWORD PTR [rsp+0x10],r12
    8edb:	mov    rbx,r15
    8ede:	mov    r13,rax
    8ee1:	mov    rax,QWORD PTR [rsp+0x28]
    8ee6:	cmp    BYTE PTR [rax+0x30],0x0
    8eea:	jne    8fb9 <fillbuf+0x369>
    8ef0:	mov    r15,QWORD PTR [rsp]
    8ef4:	mov    rdi,QWORD PTR [rsp+0x18]
    8ef9:	cmp    QWORD PTR [rsp+0x10],rdi
    8efe:	ja     8d40 <fillbuf+0xf0>
    8f04:	mov    r12,r14
    8f07:	mov    r14,r15
    8f0a:	mov    r15,r13
    8f0d:	mov    rsi,QWORD PTR [rsp+0x28]
    8f12:	mov    rax,r14
    8f15:	mov    rdi,QWORD PTR [rsi]
    8f18:	mov    rdx,QWORD PTR [rsi+0x18]
    8f1c:	sub    rax,rdi
    8f1f:	mov    QWORD PTR [rsi+0x8],rax
    8f23:	lea    rax,[rdi+rdx*1]
    8f27:	sub    rax,r12
    8f2a:	sar    rax,0x5
    8f2e:	mov    QWORD PTR [rsi+0x10],rax
    8f32:	jne    8fc8 <fillbuf+0x378>
    8f38:	shr    rdx,0x5
    8f3c:	lea    rsi,[rsp+0x40]
    8f41:	mov    QWORD PTR [rsp+0x40],rdx
    8f46:	mov    edx,0x20
    8f4b:	call   13180 <x2nrealloc>
    8f50:	mov    r12,QWORD PTR [rsp+0x40]
    8f55:	mov    r15,rax
    8f58:	mov    rax,QWORD PTR [rsp+0x28]
    8f5d:	shl    r12,0x5
    8f61:	mov    QWORD PTR [rax],r15
    8f64:	mov    r10,QWORD PTR [rax+0x8]
    8f68:	mov    QWORD PTR [rax+0x18],r12
    8f6c:	mov    rax,QWORD PTR [rax+0x10]
    8f70:	jmp    8ce0 <fillbuf+0x90>
    8f75:	nop    DWORD PTR [rax]
    8f78:	movzx  eax,BYTE PTR [r14]
    8f7c:	lea    rsi,[rip+0x157dd]        # 1e760 <blanks>
    8f83:	cmp    BYTE PTR [rsi+rax*1],0x0
    8f87:	je     8e73 <fillbuf+0x223>
    8f8d:	nop    DWORD PTR [rax]
    8f90:	movzx  eax,BYTE PTR [r14+0x1]
    8f95:	lea    rcx,[rip+0x157c4]        # 1e760 <blanks>
    8f9c:	add    r14,0x1
    8fa0:	cmp    BYTE PTR [rcx+rax*1],0x0
    8fa4:	jne    8f90 <fillbuf+0x340>
    8fa6:	jmp    8e73 <fillbuf+0x223>
    8fab:	mov    r13,r15
    8fae:	mov    r15,r14
    8fb1:	mov    r14,r12
    8fb4:	jmp    8d27 <fillbuf+0xd7>
    8fb9:	mov    r12,r14
    8fbc:	mov    r15,r13
    8fbf:	mov    r14,QWORD PTR [rsp]
    8fc3:	jmp    8f0d <fillbuf+0x2bd>
    8fc8:	mov    r10,r14
    8fcb:	add    rbp,0x22
    8fcf:	mov    eax,0x1
    8fd4:	sub    r10,r15
    8fd7:	mov    QWORD PTR [rip+0x15052],rbp        # 1e030 <merge_buffer_size>
    8fde:	mov    QWORD PTR [rsi+0x20],r10
    8fe2:	jmp    8e7b <fillbuf+0x22b>
    8fe7:	lea    rsi,[rip+0xdbd3]        # 16bc1 <short_options+0x1751>
    8fee:	xor    edi,edi
    8ff0:	mov    edx,0x5
    8ff5:	call   3960 <dcgettext@plt>
    8ffa:	mov    rsi,QWORD PTR [rsp+0x38]
    8fff:	mov    rdi,rax
    9002:	call   7440 <sort_die>
    9007:	call   3990 <__stack_chk_fail@plt>
    900c:	nop    DWORD PTR [rax+0x0]

0000000000009010 <compare_nodes>:
    9010:	endbr64 
    9014:	mov    eax,DWORD PTR [rsi+0x50]
    9017:	cmp    DWORD PTR [rdi+0x50],eax
    901a:	je     9028 <compare_nodes+0x18>
    901c:	setb   al
    901f:	movzx  eax,al
    9022:	ret    
    9023:	nop    DWORD PTR [rax+rax*1+0x0]
    9028:	mov    rdx,QWORD PTR [rdi+0x30]
    902c:	mov    rax,QWORD PTR [rsi+0x30]
    9030:	add    rdx,QWORD PTR [rdi+0x28]
    9034:	add    rax,QWORD PTR [rsi+0x28]
    9038:	cmp    rdx,rax
    903b:	setb   al
    903e:	movzx  eax,al
    9041:	ret    
    9042:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    904d:	nop    DWORD PTR [rax]

0000000000009050 <cs_leave.part.0>:
    9050:	lea    rsi,[rdi+0x8]
    9054:	xor    edx,edx
    9056:	mov    edi,0x2
    905b:	jmp    37f0 <pthread_sigmask@plt>

0000000000009060 <exit_cleanup>:
    9060:	endbr64 
    9064:	push   rbx
    9065:	sub    rsp,0x90
    906c:	mov    rax,QWORD PTR fs:0x28
    9075:	mov    QWORD PTR [rsp+0x88],rax
    907d:	xor    eax,eax
    907f:	mov    rax,QWORD PTR [rip+0x15302]        # 1e388 <temphead>
    9086:	test   rax,rax
    9089:	je     90dc <exit_cleanup+0x7c>
    908b:	xor    edi,edi
    908d:	lea    rdx,[rsp+0x8]
    9092:	lea    rsi,[rip+0x15307]        # 1e3a0 <caught_signals>
    9099:	call   37f0 <pthread_sigmask@plt>
    909e:	mov    rbx,QWORD PTR [rip+0x152e3]        # 1e388 <temphead>
    90a5:	test   eax,eax
    90a7:	sete   al
    90aa:	mov    BYTE PTR [rsp],al
    90ad:	test   rbx,rbx
    90b0:	je     90cd <exit_cleanup+0x6d>
    90b2:	nop    WORD PTR [rax+rax*1+0x0]
    90b8:	lea    rdi,[rbx+0xd]
    90bc:	call   3820 <unlink@plt>
    90c1:	mov    rbx,QWORD PTR [rbx]
    90c4:	test   rbx,rbx
    90c7:	jne    90b8 <exit_cleanup+0x58>
    90c9:	movzx  eax,BYTE PTR [rsp]
    90cd:	mov    QWORD PTR [rip+0x152b0],0x0        # 1e388 <temphead>
    90d8:	test   al,al
    90da:	jne    9100 <exit_cleanup+0xa0>
    90dc:	call   c390 <close_stdout>
    90e1:	mov    rax,QWORD PTR [rsp+0x88]
    90e9:	xor    rax,QWORD PTR fs:0x28
    90f2:	jne    910a <exit_cleanup+0xaa>
    90f4:	add    rsp,0x90
    90fb:	pop    rbx
    90fc:	ret    
    90fd:	nop    DWORD PTR [rax]
    9100:	mov    rdi,rsp
    9103:	call   9050 <cs_leave.part.0>
    9108:	jmp    90dc <exit_cleanup+0x7c>
    910a:	call   3990 <__stack_chk_fail@plt>
    910f:	nop

0000000000009110 <zaptemp>:
    9110:	push   r15
    9112:	push   r14
    9114:	push   r13
    9116:	push   r12
    9118:	mov    r12,rdi
    911b:	push   rbp
    911c:	push   rbx
    911d:	lea    rbx,[rip+0x15264]        # 1e388 <temphead>
    9124:	sub    rsp,0xa8
    912b:	mov    rax,QWORD PTR fs:0x28
    9134:	mov    QWORD PTR [rsp+0x98],rax
    913c:	xor    eax,eax
    913e:	mov    rbp,QWORD PTR [rip+0x15243]        # 1e388 <temphead>
    9145:	lea    rax,[rbp+0xd]
    9149:	cmp    rdi,rax
    914c:	je     915e <zaptemp+0x4e>
    914e:	mov    rbx,rbp
    9151:	mov    rbp,QWORD PTR [rbp+0x0]
    9155:	lea    rax,[rbp+0xd]
    9159:	cmp    r12,rax
    915c:	jne    914e <zaptemp+0x3e>
    915e:	cmp    BYTE PTR [rbp+0xc],0x1
    9162:	je     9260 <zaptemp+0x150>
    9168:	lea    rdx,[rsp+0x18]
    916d:	xor    edi,edi
    916f:	mov    r14,QWORD PTR [rbp+0x0]
    9173:	lea    r15,[rsp+0x10]
    9178:	lea    rsi,[rip+0x15221]        # 1e3a0 <caught_signals>
    917f:	call   37f0 <pthread_sigmask@plt>
    9184:	mov    rdi,r12
    9187:	test   eax,eax
    9189:	sete   BYTE PTR [rsp+0x10]
    918e:	call   3820 <unlink@plt>
    9193:	mov    r13d,eax
    9196:	call   3810 <__errno_location@plt>
    919b:	cmp    BYTE PTR [rsp+0x10],0x0
    91a0:	mov    r8d,DWORD PTR [rax]
    91a3:	mov    QWORD PTR [rbx],r14
    91a6:	jne    91f0 <zaptemp+0xe0>
    91a8:	test   r13d,r13d
    91ab:	jne    9207 <zaptemp+0xf7>
    91ad:	test   r14,r14
    91b0:	je     9251 <zaptemp+0x141>
    91b6:	mov    rdi,rbp
    91b9:	call   d750 <rpl_free>
    91be:	mov    rax,QWORD PTR [rsp+0x98]
    91c6:	xor    rax,QWORD PTR fs:0x28
    91cf:	jne    926d <zaptemp+0x15d>
    91d5:	add    rsp,0xa8
    91dc:	pop    rbx
    91dd:	pop    rbp
    91de:	pop    r12
    91e0:	pop    r13
    91e2:	pop    r14
    91e4:	pop    r15
    91e6:	ret    
    91e7:	nop    WORD PTR [rax+rax*1+0x0]
    91f0:	mov    rdi,r15
    91f3:	mov    DWORD PTR [rsp+0xc],r8d
    91f8:	call   9050 <cs_leave.part.0>
    91fd:	mov    r8d,DWORD PTR [rsp+0xc]
    9202:	test   r13d,r13d
    9205:	je     91ad <zaptemp+0x9d>
    9207:	mov    rdx,r12
    920a:	xor    edi,edi
    920c:	mov    esi,0x3
    9211:	mov    DWORD PTR [rsp+0xc],r8d
    9216:	call   11390 <quotearg_n_style_colon>
    921b:	xor    edi,edi
    921d:	mov    edx,0x5
    9222:	lea    rsi,[rip+0xd9a4]        # 16bcd <short_options+0x175d>
    9229:	mov    r12,rax
    922c:	call   3960 <dcgettext@plt>
    9231:	mov    r8d,DWORD PTR [rsp+0xc]
    9236:	xor    edi,edi
    9238:	mov    rcx,r12
    923b:	mov    rdx,rax
    923e:	xor    eax,eax
    9240:	mov    esi,r8d
    9243:	call   3ce0 <error@plt>
    9248:	test   r14,r14
    924b:	jne    91b6 <zaptemp+0xa6>
    9251:	mov    QWORD PTR [rip+0x14de8],rbx        # 1e040 <temptail>
    9258:	jmp    91b6 <zaptemp+0xa6>
    925d:	nop    DWORD PTR [rax]
    9260:	mov    edi,DWORD PTR [rbp+0x8]
    9263:	call   7740 <wait_proc>
    9268:	jmp    9168 <zaptemp+0x58>
    926d:	call   3990 <__stack_chk_fail@plt>
    9272:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    927d:	nop    DWORD PTR [rax]

0000000000009280 <pipe_fork>:
    9280:	push   r15
    9282:	push   r14
    9284:	push   r13
    9286:	push   r12
    9288:	push   rbp
    9289:	push   rbx
    928a:	mov    rbx,rsi
    928d:	mov    esi,0x80000
    9292:	sub    rsp,0xb8
    9299:	mov    QWORD PTR [rsp+0x18],rdi
    929e:	mov    rax,QWORD PTR fs:0x28
    92a7:	mov    QWORD PTR [rsp+0xa8],rax
    92af:	xor    eax,eax
    92b1:	call   f5d0 <rpl_pipe2>
    92b6:	test   eax,eax
    92b8:	js     9471 <pipe_fork+0x1f1>
    92be:	mov    eax,DWORD PTR [rip+0x14d60]        # 1e024 <nmerge>
    92c4:	add    eax,0x1
    92c7:	cmp    eax,DWORD PTR [rip+0x150af]        # 1e37c <nprocs>
    92cd:	jb     9420 <pipe_fork+0x1a0>
    92d3:	call   3810 <__errno_location@plt>
    92d8:	sub    rbx,0x1
    92dc:	lea    r14,[rsp+0x28]
    92e1:	movsd  xmm3,QWORD PTR [rip+0xde4f]        # 17138 <short_options+0x1cc8>
    92e9:	mov    rbp,rax
    92ec:	lea    rax,[rsp+0x20]
    92f1:	mov    QWORD PTR [rsp+0x10],rax
    92f6:	movsd  QWORD PTR [rsp],xmm3
    92fb:	jmp    9367 <pipe_fork+0xe7>
    92fd:	nop    DWORD PTR [rax]
    9300:	cmp    BYTE PTR [rsp+0x20],0x0
    9305:	mov    QWORD PTR [rip+0x1507c],r12        # 1e388 <temphead>
    930c:	jne    93ac <pipe_fork+0x12c>
    9312:	mov    DWORD PTR [rbp+0x0],r15d
    9316:	test   eax,eax
    9318:	jns    93c3 <pipe_fork+0x143>
    931e:	cmp    r15d,0xb
    9322:	jne    9454 <pipe_fork+0x1d4>
    9328:	movsd  xmm0,QWORD PTR [rsp]
    932d:	call   13620 <xnanosleep>
    9332:	movsd  xmm2,QWORD PTR [rsp]
    9337:	movapd xmm1,xmm2
    933b:	addsd  xmm1,xmm2
    933f:	movsd  QWORD PTR [rsp],xmm1
    9344:	mov    eax,DWORD PTR [rip+0x15032]        # 1e37c <nprocs>
    934a:	test   eax,eax
    934c:	jle    9359 <pipe_fork+0xd9>
    934e:	xor    edi,edi
    9350:	call   7610 <reap>
    9355:	test   eax,eax
    9357:	jne    9344 <pipe_fork+0xc4>
    9359:	sub    rbx,0x1
    935d:	cmp    rbx,0xffffffffffffffff
    9361:	je     9450 <pipe_fork+0x1d0>
    9367:	xor    edi,edi
    9369:	mov    rdx,r14
    936c:	lea    rsi,[rip+0x1502d]        # 1e3a0 <caught_signals>
    9373:	call   37f0 <pthread_sigmask@plt>
    9378:	mov    r12,QWORD PTR [rip+0x15009]        # 1e388 <temphead>
    937f:	mov    QWORD PTR [rip+0x14ffe],0x0        # 1e388 <temphead>
    938a:	test   eax,eax
    938c:	sete   BYTE PTR [rsp+0x20]
    9391:	call   3ea0 <fork@plt>
    9396:	mov    r15d,DWORD PTR [rbp+0x0]
    939a:	mov    r13d,eax
    939d:	test   eax,eax
    939f:	jne    9300 <pipe_fork+0x80>
    93a5:	cmp    BYTE PTR [rsp+0x20],0x0
    93aa:	je     9400 <pipe_fork+0x180>
    93ac:	mov    rdi,QWORD PTR [rsp+0x10]
    93b1:	mov    DWORD PTR [rsp+0xc],eax
    93b5:	call   9050 <cs_leave.part.0>
    93ba:	mov    eax,DWORD PTR [rsp+0xc]
    93be:	jmp    9312 <pipe_fork+0x92>
    93c3:	je     9400 <pipe_fork+0x180>
    93c5:	add    DWORD PTR [rip+0x14fb0],0x1        # 1e37c <nprocs>
    93cc:	mov    rax,QWORD PTR [rsp+0xa8]
    93d4:	xor    rax,QWORD PTR fs:0x28
    93dd:	jne    947c <pipe_fork+0x1fc>
    93e3:	add    rsp,0xb8
    93ea:	mov    eax,r13d
    93ed:	pop    rbx
    93ee:	pop    rbp
    93ef:	pop    r12
    93f1:	pop    r13
    93f3:	pop    r14
    93f5:	pop    r15
    93f7:	ret    
    93f8:	nop    DWORD PTR [rax+rax*1+0x0]
    9400:	xor    edi,edi
    9402:	xor    r13d,r13d
    9405:	call   3a80 <close@plt>
    940a:	mov    edi,0x1
    940f:	call   3a80 <close@plt>
    9414:	jmp    93cc <pipe_fork+0x14c>
    9416:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9420:	mov    edi,0xffffffff
    9425:	call   7610 <reap>
    942a:	mov    edx,DWORD PTR [rip+0x14f4c]        # 1e37c <nprocs>
    9430:	test   edx,edx
    9432:	jle    92d3 <pipe_fork+0x53>
    9438:	xor    edi,edi
    943a:	call   7610 <reap>
    943f:	test   eax,eax
    9441:	je     92d3 <pipe_fork+0x53>
    9447:	jmp    942a <pipe_fork+0x1aa>
    9449:	nop    DWORD PTR [rax+0x0]
    9450:	mov    r15d,DWORD PTR [rbp+0x0]
    9454:	mov    rbx,QWORD PTR [rsp+0x18]
    9459:	mov    edi,DWORD PTR [rbx]
    945b:	call   3a80 <close@plt>
    9460:	mov    edi,DWORD PTR [rbx+0x4]
    9463:	call   3a80 <close@plt>
    9468:	mov    DWORD PTR [rbp+0x0],r15d
    946c:	jmp    93cc <pipe_fork+0x14c>
    9471:	mov    r13d,0xffffffff
    9477:	jmp    93cc <pipe_fork+0x14c>
    947c:	call   3990 <__stack_chk_fail@plt>
    9481:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    948c:	nop    DWORD PTR [rax+0x0]

0000000000009490 <parse_field_count>:
    9490:	push   r12
    9492:	lea    r8,[rip+0xd7cf]        # 16c68 <short_options+0x17f8>
    9499:	mov    r12,rdx
    949c:	mov    edx,0xa
    94a1:	push   rbp
    94a2:	mov    rbp,rdi
    94a5:	push   rbx
    94a6:	mov    rbx,rsi
    94a9:	sub    rsp,0x20
    94ad:	mov    rax,QWORD PTR fs:0x28
    94b6:	mov    QWORD PTR [rsp+0x18],rax
    94bb:	xor    eax,eax
    94bd:	lea    rcx,[rsp+0x10]
    94c2:	lea    rsi,[rsp+0x8]
    94c7:	call   137c0 <xstrtoumax>
    94cc:	cmp    eax,0x4
    94cf:	ja     94f0 <parse_field_count+0x60>
    94d1:	lea    rdx,[rip+0xbbe0]        # 150b8 <_IO_stdin_used+0xb8>
    94d8:	mov    eax,eax
    94da:	movsxd rax,DWORD PTR [rdx+rax*4]
    94de:	add    rax,rdx
    94e1:	notrack jmp rax
    94e4:	nop    DWORD PTR [rax+0x0]
    94e8:	mov    rax,QWORD PTR [rsp+0x10]
    94ed:	mov    QWORD PTR [rbx],rax
    94f0:	mov    rax,QWORD PTR [rsp+0x8]
    94f5:	mov    rbx,QWORD PTR [rsp+0x18]
    94fa:	xor    rbx,QWORD PTR fs:0x28
    9503:	jne    9529 <parse_field_count+0x99>
    9505:	add    rsp,0x20
    9509:	pop    rbx
    950a:	pop    rbp
    950b:	pop    r12
    950d:	ret    
    950e:	xchg   ax,ax
    9510:	mov    QWORD PTR [rbx],0xffffffffffffffff
    9517:	jmp    94f0 <parse_field_count+0x60>
    9519:	nop    DWORD PTR [rax+0x0]
    9520:	test   r12,r12
    9523:	jne    952e <parse_field_count+0x9e>
    9525:	xor    eax,eax
    9527:	jmp    94f5 <parse_field_count+0x65>
    9529:	call   3990 <__stack_chk_fail@plt>
    952e:	mov    rdi,rbp
    9531:	call   11570 <quote>
    9536:	mov    rsi,r12
    9539:	mov    edx,0x5
    953e:	xor    edi,edi
    9540:	mov    rbx,rax
    9543:	call   3960 <dcgettext@plt>
    9548:	mov    edx,0x5
    954d:	lea    rsi,[rip+0xbfb4]        # 15508 <short_options+0x98>
    9554:	xor    edi,edi
    9556:	mov    r12,rax
    9559:	call   3960 <dcgettext@plt>
    955e:	mov    r8,rbx
    9561:	mov    rcx,r12
    9564:	xor    esi,esi
    9566:	mov    rdx,rax
    9569:	mov    edi,0x2
    956e:	xor    eax,eax
    9570:	call   3ce0 <error@plt>
    9575:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000009580 <stream_open>:
    9580:	push   r13
    9582:	push   r12
    9584:	push   rbp
    9585:	movzx  eax,BYTE PTR [rsi]
    9588:	mov    rbp,rdi
    958b:	cmp    al,0x72
    958d:	je     95c0 <stream_open+0x40>
    958f:	cmp    al,0x77
    9591:	jne    967f <stream_open+0xff>
    9597:	test   rdi,rdi
    959a:	je     95ac <stream_open+0x2c>
    959c:	xor    esi,esi
    959e:	mov    edi,0x1
    95a3:	call   3a10 <ftruncate@plt>
    95a8:	test   eax,eax
    95aa:	jne    9620 <stream_open+0xa0>
    95ac:	mov    r13,QWORD PTR [rip+0x14c15]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    95b3:	pop    rbp
    95b4:	pop    r12
    95b6:	mov    rax,r13
    95b9:	pop    r13
    95bb:	ret    
    95bc:	nop    DWORD PTR [rax+0x0]
    95c0:	cmp    BYTE PTR [rdi],0x2d
    95c3:	mov    r12,rsi
    95c6:	jne    95f8 <stream_open+0x78>
    95c8:	cmp    BYTE PTR [rdi+0x1],0x0
    95cc:	jne    95f8 <stream_open+0x78>
    95ce:	mov    BYTE PTR [rip+0x14e63],0x1        # 1e438 <have_read_stdin>
    95d5:	mov    r13,QWORD PTR [rip+0x14bf4]        # 1e1d0 <stdin@@GLIBC_2.2.5>
    95dc:	mov    rdi,r13
    95df:	mov    esi,0x2
    95e4:	call   d0e0 <fadvise>
    95e9:	mov    rax,r13
    95ec:	pop    rbp
    95ed:	pop    r12
    95ef:	pop    r13
    95f1:	ret    
    95f2:	nop    WORD PTR [rax+rax*1+0x0]
    95f8:	mov    rdi,rbp
    95fb:	mov    esi,0x80000
    9600:	xor    eax,eax
    9602:	xor    r13d,r13d
    9605:	call   3d20 <open@plt>
    960a:	mov    edi,eax
    960c:	test   eax,eax
    960e:	js     95dc <stream_open+0x5c>
    9610:	mov    rsi,r12
    9613:	call   3c80 <fdopen@plt>
    9618:	mov    r13,rax
    961b:	jmp    95dc <stream_open+0x5c>
    961d:	nop    DWORD PTR [rax]
    9620:	call   3810 <__errno_location@plt>
    9625:	mov    r12d,DWORD PTR [rax]
    9628:	call   72e0 <get_outstatus>
    962d:	test   rax,rax
    9630:	je     9645 <stream_open+0xc5>
    9632:	mov    eax,DWORD PTR [rax+0x18]
    9635:	and    eax,0xf000
    963a:	cmp    eax,0x8000
    963f:	jne    95ac <stream_open+0x2c>
    9645:	mov    rdx,rbp
    9648:	mov    esi,0x3
    964d:	xor    edi,edi
    964f:	call   11390 <quotearg_n_style_colon>
    9654:	mov    edx,0x5
    9659:	lea    rsi,[rip+0xd588]        # 16be8 <short_options+0x1778>
    9660:	xor    edi,edi
    9662:	mov    r13,rax
    9665:	call   3960 <dcgettext@plt>
    966a:	mov    rcx,r13
    966d:	mov    esi,r12d
    9670:	mov    edi,0x2
    9675:	mov    rdx,rax
    9678:	xor    eax,eax
    967a:	call   3ce0 <error@plt>
    967f:	lea    rcx,[rip+0xbc7a]        # 15300 <__PRETTY_FUNCTION__.8975>
    9686:	mov    edx,0x3d4
    968b:	lea    rsi,[rip+0xd56b]        # 16bfd <short_options+0x178d>
    9692:	lea    rdi,[rip+0xbe97]        # 15530 <short_options+0xc0>
    9699:	call   3a40 <__assert_fail@plt>
    969e:	xchg   ax,ax

00000000000096a0 <xfopen.part.0>:
    96a0:	push   rbp
    96a1:	lea    rsi,[rip+0xd560]        # 16c08 <short_options+0x1798>
    96a8:	mov    rbp,rdi
    96ab:	mov    edx,0x5
    96b0:	xor    edi,edi
    96b2:	call   3960 <dcgettext@plt>
    96b7:	mov    rsi,rbp
    96ba:	mov    rdi,rax
    96bd:	call   7440 <sort_die>
    96c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    96cd:	nop    DWORD PTR [rax]

00000000000096d0 <xfclose>:
    96d0:	push   r12
    96d2:	mov    r12,rsi
    96d5:	push   rbp
    96d6:	mov    rbp,rdi
    96d9:	sub    rsp,0x8
    96dd:	call   3b90 <fileno@plt>
    96e2:	test   eax,eax
    96e4:	je     9700 <xfclose+0x30>
    96e6:	cmp    eax,0x1
    96e9:	je     9710 <xfclose+0x40>
    96eb:	mov    rdi,rbp
    96ee:	call   d110 <rpl_fclose>
    96f3:	test   eax,eax
    96f5:	jne    973a <xfclose+0x6a>
    96f7:	add    rsp,0x8
    96fb:	pop    rbp
    96fc:	pop    r12
    96fe:	ret    
    96ff:	nop
    9700:	add    rsp,0x8
    9704:	mov    rdi,rbp
    9707:	pop    rbp
    9708:	pop    r12
    970a:	jmp    38e0 <clearerr_unlocked@plt>
    970f:	nop
    9710:	mov    rdi,rbp
    9713:	call   3e40 <fflush_unlocked@plt>
    9718:	test   eax,eax
    971a:	je     96f7 <xfclose+0x27>
    971c:	mov    edx,0x5
    9721:	lea    rsi,[rip+0xd4ec]        # 16c14 <short_options+0x17a4>
    9728:	xor    edi,edi
    972a:	call   3960 <dcgettext@plt>
    972f:	mov    rsi,r12
    9732:	mov    rdi,rax
    9735:	call   7440 <sort_die>
    973a:	mov    edx,0x5
    973f:	lea    rsi,[rip+0xd4dc]        # 16c22 <short_options+0x17b2>
    9746:	jmp    9728 <xfclose+0x58>
    9748:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000009750 <write_line>:
    9750:	push   r15
    9752:	mov    r15,rdx
    9755:	push   r14
    9757:	push   r13
    9759:	push   r12
    975b:	mov    r12,rsi
    975e:	push   rbp
    975f:	push   rbx
    9760:	sub    rsp,0x28
    9764:	mov    rbp,QWORD PTR [rdi]
    9767:	mov    r13,QWORD PTR [rdi+0x8]
    976b:	mov    rax,QWORD PTR fs:0x28
    9774:	mov    QWORD PTR [rsp+0x18],rax
    9779:	xor    eax,eax
    977b:	lea    r14,[rbp+r13*1+0x0]
    9780:	test   rdx,rdx
    9783:	je     97d8 <write_line+0x88>
    9785:	movzx  eax,BYTE PTR [rip+0x148ac]        # 1e038 <eolchar>
    978c:	mov    rcx,r12
    978f:	mov    rdx,r13
    9792:	mov    rdi,rbp
    9795:	mov    esi,0x1
    979a:	mov    BYTE PTR [r14-0x1],al
    979e:	call   3c60 <fwrite_unlocked@plt>
    97a3:	cmp    r13,rax
    97a6:	jne    9b94 <write_line+0x444>
    97ac:	mov    BYTE PTR [r14-0x1],0x0
    97b1:	mov    rax,QWORD PTR [rsp+0x18]
    97b6:	xor    rax,QWORD PTR fs:0x28
    97bf:	jne    9b8f <write_line+0x43f>
    97c5:	add    rsp,0x28
    97c9:	pop    rbx
    97ca:	pop    rbp
    97cb:	pop    r12
    97cd:	pop    r13
    97cf:	pop    r14
    97d1:	pop    r15
    97d3:	ret    
    97d4:	nop    DWORD PTR [rax+0x0]
    97d8:	cmp    BYTE PTR [rip+0x14c41],0x0        # 1e420 <debug>
    97df:	je     9785 <write_line+0x35>
    97e1:	mov    rbx,rdi
    97e4:	cmp    rbp,r14
    97e7:	jb     9814 <write_line+0xc4>
    97e9:	jmp    987f <write_line+0x12f>
    97ee:	xchg   ax,ax
    97f0:	movsx  esi,al
    97f3:	cmp    r14,rbp
    97f6:	je     9868 <write_line+0x118>
    97f8:	mov    rdx,QWORD PTR [r12+0x28]
    97fd:	cmp    rdx,QWORD PTR [r12+0x30]
    9802:	jae    9836 <write_line+0xe6>
    9804:	lea    rcx,[rdx+0x1]
    9808:	mov    QWORD PTR [r12+0x28],rcx
    980d:	mov    BYTE PTR [rdx],al
    980f:	cmp    r14,rbp
    9812:	je     9878 <write_line+0x128>
    9814:	movzx  eax,BYTE PTR [rbp+0x0]
    9818:	add    rbp,0x1
    981c:	cmp    al,0x9
    981e:	jne    97f0 <write_line+0xa0>
    9820:	mov    rdx,QWORD PTR [r12+0x28]
    9825:	mov    esi,0x3e
    982a:	mov    eax,0x3e
    982f:	cmp    rdx,QWORD PTR [r12+0x30]
    9834:	jb     9804 <write_line+0xb4>
    9836:	movzx  esi,sil
    983a:	mov    rdi,r12
    983d:	call   39f0 <__overflow@plt>
    9842:	cmp    eax,0xffffffff
    9845:	jne    980f <write_line+0xbf>
    9847:	lea    rsi,[rip+0xd3e1]        # 16c2f <short_options+0x17bf>
    984e:	xor    edi,edi
    9850:	mov    edx,0x5
    9855:	call   3960 <dcgettext@plt>
    985a:	xor    esi,esi
    985c:	mov    rdi,rax
    985f:	call   7440 <sort_die>
    9864:	nop    DWORD PTR [rax+0x0]
    9868:	mov    esi,0xa
    986d:	mov    eax,0xa
    9872:	jmp    97f8 <write_line+0xa8>
    9874:	nop    DWORD PTR [rax+0x0]
    9878:	mov    rbp,QWORD PTR [rbx]
    987b:	mov    r13,QWORD PTR [rbx+0x8]
    987f:	mov    r15,QWORD PTR [rip+0x14baa]        # 1e430 <keylist>
    9886:	lea    r12,[rbp+r13*1-0x1]
    988b:	test   r15,r15
    988e:	je     9a85 <write_line+0x335>
    9894:	nop    DWORD PTR [rax+0x0]
    9898:	mov    r10,QWORD PTR [r15]
    989b:	cmp    r10,0xffffffffffffffff
    989f:	je     9b20 <write_line+0x3d0>
    98a5:	mov    rdx,r15
    98a8:	mov    rsi,r13
    98ab:	mov    rdi,rbp
    98ae:	call   7a40 <begfield.isra.0>
    98b3:	cmp    QWORD PTR [r15+0x10],0xffffffffffffffff
    98b8:	mov    r14,rax
    98bb:	je     98db <write_line+0x18b>
    98bd:	mov    rdx,r15
    98c0:	mov    rsi,r13
    98c3:	mov    rdi,rbp
    98c6:	call   7b70 <limfield.isra.0>
    98cb:	mov    r12,rax
    98ce:	cmp    BYTE PTR [r15+0x30],0x0
    98d3:	je     98db <write_line+0x18b>
    98d5:	cmp    r10,0xffffffffffffffff
    98d9:	je     98f6 <write_line+0x1a6>
    98db:	cmp    BYTE PTR [r15+0x36],0x0
    98e0:	jne    98f6 <write_line+0x1a6>
    98e2:	movabs rax,0xffff00ff0000
    98ec:	test   QWORD PTR [r15+0x30],rax
    98f0:	je     99b1 <write_line+0x261>
    98f6:	movzx  r13d,BYTE PTR [r12]
    98fb:	mov    BYTE PTR [r12],0x0
    9900:	lea    rcx,[rip+0x14e59]        # 1e760 <blanks>
    9907:	movzx  eax,BYTE PTR [r14]
    990b:	cmp    BYTE PTR [rcx+rax*1],0x0
    990f:	je     992e <write_line+0x1de>
    9911:	nop    DWORD PTR [rax+0x0]
    9918:	movzx  eax,BYTE PTR [r14+0x1]
    991d:	lea    rcx,[rip+0x14e3c]        # 1e760 <blanks>
    9924:	add    r14,0x1
    9928:	cmp    BYTE PTR [rcx+rax*1],0x0
    992c:	jne    9918 <write_line+0x1c8>
    992e:	mov    QWORD PTR [rsp+0x8],r14
    9933:	cmp    r14,r12
    9936:	ja     9ab0 <write_line+0x360>
    993c:	cmp    BYTE PTR [r15+0x36],0x0
    9941:	jne    9b38 <write_line+0x3e8>
    9947:	cmp    BYTE PTR [r15+0x34],0x0
    994c:	jne    9b60 <write_line+0x410>
    9952:	movabs rax,0xff0000ff0000
    995c:	test   QWORD PTR [r15+0x30],rax
    9960:	je     9ab0 <write_line+0x360>
    9966:	mov    rax,r14
    9969:	cmp    r14,r12
    996c:	jae    997a <write_line+0x22a>
    996e:	xor    eax,eax
    9970:	cmp    BYTE PTR [r14],0x2d
    9974:	sete   al
    9977:	add    rax,r14
    997a:	lea    rdi,[rsp+0x10]
    997f:	mov    QWORD PTR [rsp+0x10],rax
    9984:	call   6e40 <traverse_raw_number>
    9989:	cmp    al,0x2f
    998b:	jle    99a8 <write_line+0x258>
    998d:	cmp    BYTE PTR [r15+0x35],0x0
    9992:	mov    rax,QWORD PTR [rsp+0x10]
    9997:	jne    9b78 <write_line+0x428>
    999d:	mov    QWORD PTR [rsp+0x8],rax
    99a2:	nop    WORD PTR [rax+rax*1+0x0]
    99a8:	mov    BYTE PTR [r12],r13b
    99ac:	mov    r12,QWORD PTR [rsp+0x8]
    99b1:	mov    rdi,rbp
    99b4:	mov    rsi,r14
    99b7:	call   7510 <debug_width>
    99bc:	mov    rsi,r12
    99bf:	mov    rdi,r14
    99c2:	mov    r13,rax
    99c5:	call   7510 <debug_width>
    99ca:	lea    r12,[r13-0x1]
    99ce:	mov    rbp,rax
    99d1:	test   r13,r13
    99d4:	je     9a0a <write_line+0x2ba>
    99d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    99e0:	mov    rdi,QWORD PTR [rip+0x147e1]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    99e7:	mov    rax,QWORD PTR [rdi+0x28]
    99eb:	cmp    rax,QWORD PTR [rdi+0x30]
    99ef:	jae    9a90 <write_line+0x340>
    99f5:	lea    rdx,[rax+0x1]
    99f9:	mov    QWORD PTR [rdi+0x28],rdx
    99fd:	mov    BYTE PTR [rax],0x20
    9a00:	sub    r12,0x1
    9a04:	cmp    r12,0xffffffffffffffff
    9a08:	jne    99e0 <write_line+0x290>
    9a0a:	test   rbp,rbp
    9a0d:	je     9ac0 <write_line+0x370>
    9a13:	nop    DWORD PTR [rax+rax*1+0x0]
    9a18:	mov    rdi,QWORD PTR [rip+0x147a9]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    9a1f:	mov    rax,QWORD PTR [rdi+0x28]
    9a23:	cmp    rax,QWORD PTR [rdi+0x30]
    9a27:	jae    9aa0 <write_line+0x350>
    9a29:	lea    rdx,[rax+0x1]
    9a2d:	mov    QWORD PTR [rdi+0x28],rdx
    9a31:	mov    BYTE PTR [rax],0x5f
    9a34:	sub    rbp,0x1
    9a38:	jne    9a18 <write_line+0x2c8>
    9a3a:	mov    rdi,QWORD PTR [rip+0x14787]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    9a41:	mov    rax,QWORD PTR [rdi+0x28]
    9a45:	cmp    rax,QWORD PTR [rdi+0x30]
    9a49:	jae    9b50 <write_line+0x400>
    9a4f:	lea    rdx,[rax+0x1]
    9a53:	mov    QWORD PTR [rdi+0x28],rdx
    9a57:	mov    BYTE PTR [rax],0xa
    9a5a:	test   r15,r15
    9a5d:	je     97b1 <write_line+0x61>
    9a63:	mov    r15,QWORD PTR [r15+0x40]
    9a67:	test   r15,r15
    9a6a:	je     9af0 <write_line+0x3a0>
    9a70:	mov    rbp,QWORD PTR [rbx]
    9a73:	mov    r13,QWORD PTR [rbx+0x8]
    9a77:	lea    r12,[rbp+r13*1-0x1]
    9a7c:	test   r15,r15
    9a7f:	jne    9898 <write_line+0x148>
    9a85:	mov    r14,rbp
    9a88:	jmp    99b1 <write_line+0x261>
    9a8d:	nop    DWORD PTR [rax]
    9a90:	mov    esi,0x20
    9a95:	call   39f0 <__overflow@plt>
    9a9a:	jmp    9a00 <write_line+0x2b0>
    9a9f:	nop
    9aa0:	mov    esi,0x5f
    9aa5:	call   39f0 <__overflow@plt>
    9aaa:	jmp    9a34 <write_line+0x2e4>
    9aac:	nop    DWORD PTR [rax+0x0]
    9ab0:	mov    QWORD PTR [rsp+0x8],r12
    9ab5:	jmp    99a8 <write_line+0x258>
    9aba:	nop    WORD PTR [rax+rax*1+0x0]
    9ac0:	xor    edi,edi
    9ac2:	mov    edx,0x5
    9ac7:	lea    rsi,[rip+0xd16e]        # 16c3c <short_options+0x17cc>
    9ace:	call   3960 <dcgettext@plt>
    9ad3:	mov    edi,0x1
    9ad8:	mov    rsi,rax
    9adb:	xor    eax,eax
    9add:	call   3ca0 <__printf_chk@plt>
    9ae2:	jmp    9a5a <write_line+0x30a>
    9ae7:	nop    WORD PTR [rax+rax*1+0x0]
    9af0:	cmp    BYTE PTR [rip+0x14942],0x0        # 1e439 <unique>
    9af7:	jne    97b1 <write_line+0x61>
    9afd:	cmp    BYTE PTR [rip+0x14936],0x0        # 1e43a <stable>
    9b04:	jne    97b1 <write_line+0x61>
    9b0a:	mov    r14,QWORD PTR [rbx]
    9b0d:	mov    rax,QWORD PTR [rbx+0x8]
    9b11:	mov    rbp,r14
    9b14:	lea    r12,[r14+rax*1-0x1]
    9b19:	jmp    99b1 <write_line+0x261>
    9b1e:	xchg   ax,ax
    9b20:	cmp    QWORD PTR [r15+0x10],0xffffffffffffffff
    9b25:	mov    r14,rbp
    9b28:	jne    98bd <write_line+0x16d>
    9b2e:	jmp    98ce <write_line+0x17e>
    9b33:	nop    DWORD PTR [rax+rax*1+0x0]
    9b38:	lea    rsi,[rsp+0x8]
    9b3d:	mov    rdi,r14
    9b40:	call   6f90 <getmonth>
    9b45:	jmp    99a8 <write_line+0x258>
    9b4a:	nop    WORD PTR [rax+rax*1+0x0]
    9b50:	mov    esi,0xa
    9b55:	call   39f0 <__overflow@plt>
    9b5a:	jmp    9a5a <write_line+0x30a>
    9b5f:	nop
    9b60:	lea    rsi,[rsp+0x8]
    9b65:	mov    rdi,r14
    9b68:	call   3cd0 <strtold@plt>
    9b6d:	fstp   st(0)
    9b6f:	jmp    99a8 <write_line+0x258>
    9b74:	nop    DWORD PTR [rax+0x0]
    9b78:	movzx  edx,BYTE PTR [rax]
    9b7b:	lea    rcx,[rip+0xb7de]        # 15360 <unit_order>
    9b82:	cmp    BYTE PTR [rcx+rdx*1],0x1
    9b86:	sbb    rax,0xffffffffffffffff
    9b8a:	jmp    999d <write_line+0x24d>
    9b8f:	call   3990 <__stack_chk_fail@plt>
    9b94:	lea    rsi,[rip+0xd094]        # 16c2f <short_options+0x17bf>
    9b9b:	xor    edi,edi
    9b9d:	mov    edx,0x5
    9ba2:	call   3960 <dcgettext@plt>
    9ba7:	mov    rsi,r15
    9baa:	mov    rdi,rax
    9bad:	call   7440 <sort_die>
    9bb2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    9bbd:	nop    DWORD PTR [rax]

0000000000009bc0 <compare>:
    9bc0:	push   r13
    9bc2:	push   r12
    9bc4:	push   rbp
    9bc5:	mov    rbp,rsi
    9bc8:	push   rbx
    9bc9:	mov    rbx,rdi
    9bcc:	sub    rsp,0x8
    9bd0:	cmp    QWORD PTR [rip+0x14858],0x0        # 1e430 <keylist>
    9bd8:	je     9bf5 <compare+0x35>
    9bda:	call   7cd0 <keycompare>
    9bdf:	test   eax,eax
    9be1:	jne    9c2e <compare+0x6e>
    9be3:	cmp    BYTE PTR [rip+0x1484f],0x0        # 1e439 <unique>
    9bea:	jne    9c2e <compare+0x6e>
    9bec:	cmp    BYTE PTR [rip+0x14847],0x0        # 1e43a <stable>
    9bf3:	jne    9c2e <compare+0x6e>
    9bf5:	mov    rsi,QWORD PTR [rbx+0x8]
    9bf9:	mov    rcx,QWORD PTR [rbp+0x8]
    9bfd:	mov    r13,rsi
    9c00:	lea    r12,[rcx-0x1]
    9c04:	sub    r13,0x1
    9c08:	jne    9c40 <compare+0x80>
    9c0a:	xor    eax,eax
    9c0c:	test   r12,r12
    9c0f:	setne  al
    9c12:	neg    eax
    9c14:	cmp    BYTE PTR [rip+0x14820],0x0        # 1e43b <reverse>
    9c1b:	je     9c2e <compare+0x6e>
    9c1d:	mov    edx,eax
    9c1f:	shr    edx,0x1f
    9c22:	test   eax,eax
    9c24:	setg   al
    9c27:	movzx  eax,al
    9c2a:	sub    edx,eax
    9c2c:	mov    eax,edx
    9c2e:	add    rsp,0x8
    9c32:	pop    rbx
    9c33:	pop    rbp
    9c34:	pop    r12
    9c36:	pop    r13
    9c38:	ret    
    9c39:	nop    DWORD PTR [rax+0x0]
    9c40:	mov    eax,0x1
    9c45:	test   r12,r12
    9c48:	je     9c14 <compare+0x54>
    9c4a:	cmp    BYTE PTR [rip+0x14c30],0x0        # 1e881 <hard_LC_COLLATE>
    9c51:	mov    r8,QWORD PTR [rbp+0x0]
    9c55:	mov    rdi,QWORD PTR [rbx]
    9c58:	jne    9c80 <compare+0xc0>
    9c5a:	cmp    r13,r12
    9c5d:	mov    rdx,r12
    9c60:	mov    rsi,r8
    9c63:	cmovbe rdx,r13
    9c67:	call   3ad0 <memcmp@plt>
    9c6c:	test   eax,eax
    9c6e:	jne    9c14 <compare+0x54>
    9c70:	xor    eax,eax
    9c72:	cmp    r13,r12
    9c75:	seta   al
    9c78:	sbb    eax,0x0
    9c7b:	jmp    9c14 <compare+0x54>
    9c7d:	nop    DWORD PTR [rax]
    9c80:	mov    rdx,r8
    9c83:	call   135c0 <xmemcoll0>
    9c88:	jmp    9c14 <compare+0x54>
    9c8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000009c90 <sequential_sort>:
    9c90:	push   r15
    9c92:	push   r14
    9c94:	push   r13
    9c96:	push   r12
    9c98:	push   rbp
    9c99:	mov    rbp,rdi
    9c9c:	push   rbx
    9c9d:	mov    rbx,rdx
    9ca0:	sub    rsp,0x18
    9ca4:	cmp    rsi,0x2
    9ca8:	je     9dc8 <sequential_sort+0x138>
    9cae:	mov    r12,rsi
    9cb1:	mov    r15,rsi
    9cb4:	mov    r8,rdi
    9cb7:	mov    r13,rsi
    9cba:	shr    r12,1
    9cbd:	mov    rax,r12
    9cc0:	sub    r15,r12
    9cc3:	shl    rax,0x5
    9cc7:	mov    r14,rax
    9cca:	sub    r8,rax
    9ccd:	neg    r14
    9cd0:	test   cl,cl
    9cd2:	jne    9d68 <sequential_sort+0xd8>
    9cd8:	xor    ecx,ecx
    9cda:	mov    rdi,r8
    9cdd:	mov    rsi,r15
    9ce0:	mov    QWORD PTR [rsp+0x8],r8
    9ce5:	call   9c90 <sequential_sort>
    9cea:	cmp    r13,0x3
    9cee:	mov    r8,QWORD PTR [rsp+0x8]
    9cf3:	ja     9eb8 <sequential_sort+0x228>
    9cf9:	movdqu xmm0,XMMWORD PTR [rbp-0x20]
    9cfe:	movdqu xmm1,XMMWORD PTR [rbp-0x10]
    9d03:	mov    rax,rbx
    9d06:	mov    r14,r8
    9d09:	movups XMMWORD PTR [rbx-0x20],xmm0
    9d0d:	movups XMMWORD PTR [rbx-0x10],xmm1
    9d11:	mov    rbx,rbp
    9d14:	mov    rbp,rax
    9d17:	lea    rdx,[rbp-0x20]
    9d1b:	lea    r13,[r14-0x20]
    9d1f:	nop
    9d20:	mov    rdi,rdx
    9d23:	mov    rsi,r13
    9d26:	mov    QWORD PTR [rsp+0x8],rdx
    9d2b:	sub    rbx,0x20
    9d2f:	call   9bc0 <compare>
    9d34:	mov    rdx,QWORD PTR [rsp+0x8]
    9d39:	test   eax,eax
    9d3b:	jle    9da0 <sequential_sort+0x110>
    9d3d:	movdqu xmm4,XMMWORD PTR [r14-0x20]
    9d43:	movups XMMWORD PTR [rbx],xmm4
    9d46:	movdqu xmm5,XMMWORD PTR [r14-0x10]
    9d4c:	movups XMMWORD PTR [rbx+0x10],xmm5
    9d50:	sub    r15,0x1
    9d54:	je     9e20 <sequential_sort+0x190>
    9d5a:	mov    r14,r13
    9d5d:	sub    r13,0x20
    9d61:	jmp    9d20 <sequential_sort+0x90>
    9d63:	nop    DWORD PTR [rax+rax*1+0x0]
    9d68:	add    r14,rdx
    9d6b:	mov    ecx,0x1
    9d70:	mov    rsi,r15
    9d73:	mov    rdi,r8
    9d76:	mov    rdx,r14
    9d79:	call   9c90 <sequential_sort>
    9d7e:	cmp    r13,0x3
    9d82:	jbe    9d17 <sequential_sort+0x87>
    9d84:	xor    ecx,ecx
    9d86:	mov    rdx,rbx
    9d89:	mov    rsi,r12
    9d8c:	mov    rdi,rbp
    9d8f:	call   9c90 <sequential_sort>
    9d94:	jmp    9d17 <sequential_sort+0x87>
    9d99:	nop    DWORD PTR [rax+0x0]
    9da0:	movdqu xmm2,XMMWORD PTR [rbp-0x20]
    9da5:	movups XMMWORD PTR [rbx],xmm2
    9da8:	movdqu xmm3,XMMWORD PTR [rbp-0x10]
    9dad:	movups XMMWORD PTR [rbx+0x10],xmm3
    9db1:	sub    r12,0x1
    9db5:	je     9e11 <sequential_sort+0x181>
    9db7:	mov    rbp,rdx
    9dba:	sub    rdx,0x20
    9dbe:	jmp    9d20 <sequential_sort+0x90>
    9dc3:	nop    DWORD PTR [rax+rax*1+0x0]
    9dc8:	lea    rsi,[rdi-0x40]
    9dcc:	lea    rdi,[rdi-0x20]
    9dd0:	mov    DWORD PTR [rsp+0x8],ecx
    9dd4:	call   9bc0 <compare>
    9dd9:	mov    ecx,DWORD PTR [rsp+0x8]
    9ddd:	test   cl,cl
    9ddf:	jne    9e60 <sequential_sort+0x1d0>
    9de1:	test   eax,eax
    9de3:	jle    9e11 <sequential_sort+0x181>
    9de5:	movdqu xmm1,XMMWORD PTR [rbp-0x20]
    9dea:	movdqu xmm0,XMMWORD PTR [rbp-0x10]
    9def:	movdqu xmm2,XMMWORD PTR [rbp-0x40]
    9df4:	movdqu xmm3,XMMWORD PTR [rbp-0x30]
    9df9:	movups XMMWORD PTR [rbx-0x20],xmm1
    9dfd:	movups XMMWORD PTR [rbx-0x10],xmm0
    9e01:	movups XMMWORD PTR [rbp-0x20],xmm2
    9e05:	movups XMMWORD PTR [rbp-0x10],xmm3
    9e09:	movups XMMWORD PTR [rbp-0x40],xmm1
    9e0d:	movups XMMWORD PTR [rbp-0x30],xmm0
    9e11:	add    rsp,0x18
    9e15:	pop    rbx
    9e16:	pop    rbp
    9e17:	pop    r12
    9e19:	pop    r13
    9e1b:	pop    r14
    9e1d:	pop    r15
    9e1f:	ret    
    9e20:	mov    rax,0xffffffffffffffe0
    9e27:	nop    WORD PTR [rax+rax*1+0x0]
    9e30:	movdqu xmm6,XMMWORD PTR [rbp+rax*1+0x0]
    9e36:	movups XMMWORD PTR [rbx+rax*1],xmm6
    9e3a:	movdqu xmm7,XMMWORD PTR [rbp+rax*1+0x10]
    9e40:	movups XMMWORD PTR [rbx+rax*1+0x10],xmm7
    9e45:	sub    rax,0x20
    9e49:	sub    r12,0x1
    9e4d:	jne    9e30 <sequential_sort+0x1a0>
    9e4f:	add    rsp,0x18
    9e53:	pop    rbx
    9e54:	pop    rbp
    9e55:	pop    r12
    9e57:	pop    r13
    9e59:	pop    r14
    9e5b:	pop    r15
    9e5d:	ret    
    9e5e:	xchg   ax,ax
    9e60:	test   eax,eax
    9e62:	setg   al
    9e65:	movzx  eax,al
    9e68:	mov    edx,eax
    9e6a:	sub    eax,0x2
    9e6d:	not    edx
    9e6f:	cdqe   
    9e71:	movsxd rdx,edx
    9e74:	shl    rax,0x5
    9e78:	shl    rdx,0x5
    9e7c:	add    rdx,rbp
    9e7f:	add    rbp,rax
    9e82:	movdqu xmm0,XMMWORD PTR [rdx]
    9e86:	movdqu xmm1,XMMWORD PTR [rdx+0x10]
    9e8b:	movups XMMWORD PTR [rbx-0x20],xmm0
    9e8f:	movdqu xmm0,XMMWORD PTR [rbp+0x0]
    9e94:	movups XMMWORD PTR [rbx-0x10],xmm1
    9e98:	movdqu xmm1,XMMWORD PTR [rbp+0x10]
    9e9d:	movups XMMWORD PTR [rbx-0x40],xmm0
    9ea1:	movups XMMWORD PTR [rbx-0x30],xmm1
    9ea5:	add    rsp,0x18
    9ea9:	pop    rbx
    9eaa:	pop    rbp
    9eab:	pop    r12
    9ead:	pop    r13
    9eaf:	pop    r14
    9eb1:	pop    r15
    9eb3:	ret    
    9eb4:	nop    DWORD PTR [rax+0x0]
    9eb8:	mov    rdx,rbx
    9ebb:	mov    rdi,rbp
    9ebe:	mov    ecx,0x1
    9ec3:	mov    rsi,r12
    9ec6:	mov    QWORD PTR [rsp+0x8],r8
    9ecb:	call   9c90 <sequential_sort>
    9ed0:	mov    r8,QWORD PTR [rsp+0x8]
    9ed5:	mov    rax,rbx
    9ed8:	mov    rbx,rbp
    9edb:	mov    rbp,rax
    9ede:	mov    r14,r8
    9ee1:	jmp    9d17 <sequential_sort+0x87>
    9ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000009ef0 <write_unique>:
    9ef0:	push   r12
    9ef2:	mov    r12,rsi
    9ef5:	sub    rsp,0x10
    9ef9:	cmp    BYTE PTR [rip+0x14539],0x0        # 1e439 <unique>
    9f00:	je     9f45 <write_unique+0x55>
    9f02:	cmp    QWORD PTR [rip+0x14956],0x0        # 1e860 <saved_line>
    9f0a:	je     9f2e <write_unique+0x3e>
    9f0c:	lea    rsi,[rip+0x1494d]        # 1e860 <saved_line>
    9f13:	mov    QWORD PTR [rsp+0x8],rdx
    9f18:	mov    QWORD PTR [rsp],rdi
    9f1c:	call   9bc0 <compare>
    9f21:	mov    rdi,QWORD PTR [rsp]
    9f25:	mov    rdx,QWORD PTR [rsp+0x8]
    9f2a:	test   eax,eax
    9f2c:	je     9f58 <write_unique+0x68>
    9f2e:	movdqu xmm0,XMMWORD PTR [rdi]
    9f32:	movaps XMMWORD PTR [rip+0x14927],xmm0        # 1e860 <saved_line>
    9f39:	movdqu xmm1,XMMWORD PTR [rdi+0x10]
    9f3e:	movaps XMMWORD PTR [rip+0x1492b],xmm1        # 1e870 <saved_line+0x10>
    9f45:	add    rsp,0x10
    9f49:	mov    rsi,r12
    9f4c:	pop    r12
    9f4e:	jmp    9750 <write_line>
    9f53:	nop    DWORD PTR [rax+rax*1+0x0]
    9f58:	add    rsp,0x10
    9f5c:	pop    r12
    9f5e:	ret    
    9f5f:	nop

0000000000009f60 <mergefps>:
    9f60:	push   r15
    9f62:	mov    r15,r9
    9f65:	push   r14
    9f67:	push   r13
    9f69:	push   r12
    9f6b:	push   rbp
    9f6c:	push   rbx
    9f6d:	mov    rbx,rdx
    9f70:	sub    rsp,0xa8
    9f77:	mov    QWORD PTR [rsp+0x10],rdx
    9f7c:	mov    QWORD PTR [rsp+0x40],rcx
    9f81:	mov    QWORD PTR [rsp+0x48],r8
    9f86:	mov    QWORD PTR [rsp+0x38],r9
    9f8b:	mov    QWORD PTR [rsp+0x28],rdi
    9f90:	mov    rdi,rdx
    9f93:	mov    QWORD PTR [rsp+0x50],rsi
    9f98:	mov    esi,0x38
    9f9d:	mov    rax,QWORD PTR fs:0x28
    9fa6:	mov    QWORD PTR [rsp+0x98],rax
    9fae:	xor    eax,eax
    9fb0:	call   13150 <xnmalloc>
    9fb5:	mov    esi,0x8
    9fba:	mov    rdi,rbx
    9fbd:	mov    QWORD PTR [rsp+0x20],rax
    9fc2:	call   13150 <xnmalloc>
    9fc7:	mov    esi,0x8
    9fcc:	mov    rdi,rbx
    9fcf:	mov    r12,rax
    9fd2:	call   13150 <xnmalloc>
    9fd7:	mov    esi,0x8
    9fdc:	mov    rdi,rbx
    9fdf:	mov    QWORD PTR [rsp+0x18],rax
    9fe4:	call   13150 <xnmalloc>
    9fe9:	mov    QWORD PTR [rsp+0x70],0x0
    9ff2:	mov    rbp,rax
    9ff5:	mov    rax,QWORD PTR [rip+0x14434]        # 1e430 <keylist>
    9ffc:	mov    QWORD PTR [rsp+0x68],rax
    a001:	test   rbx,rbx
    a004:	je     a5b7 <mergefps+0x657>
    a00a:	mov    QWORD PTR [rsp+0x8],r12
    a00f:	xor    ebx,ebx
    a011:	mov    QWORD PTR [rsp+0x30],rbp
    a016:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a020:	mov    rcx,QWORD PTR [rsp+0x20]
    a025:	mov    r14,QWORD PTR [rsp+0x10]
    a02a:	xor    edx,edx
    a02c:	mov    r13,rbx
    a02f:	lea    rbp,[rbx*8+0x0]
    a037:	mov    esi,0x20
    a03c:	mov    rax,rbp
    a03f:	sub    rax,rbx
    a042:	lea    r12,[rcx+rax*8]
    a046:	mov    rax,QWORD PTR [rip+0x1440b]        # 1e458 <sort_size>
    a04d:	mov    rdi,r12
    a050:	div    r14
    a053:	mov    rdx,QWORD PTR [rip+0x13fd6]        # 1e030 <merge_buffer_size>
    a05a:	cmp    rax,rdx
    a05d:	cmovae rdx,rax
    a061:	shl    r13,0x4
    a065:	call   74a0 <initbuf>
    a06a:	lea    r10,[r15+rbp*1]
    a06e:	add    r13,QWORD PTR [rsp+0x28]
    a073:	mov    rdi,r12
    a076:	mov    rsi,QWORD PTR [r10]
    a079:	mov    rdx,QWORD PTR [r13+0x0]
    a07d:	mov    QWORD PTR [rsp],r10
    a081:	call   8c50 <fillbuf>
    a086:	mov    r10,QWORD PTR [rsp]
    a08a:	test   al,al
    a08c:	je     a520 <mergefps+0x5c0>
    a092:	mov    rax,QWORD PTR [r12+0x18]
    a097:	mov    rdi,QWORD PTR [rsp+0x8]
    a09c:	add    rax,QWORD PTR [r12]
    a0a0:	mov    rcx,QWORD PTR [rsp+0x18]
    a0a5:	lea    rdx,[rax-0x20]
    a0a9:	mov    QWORD PTR [rdi+rbx*8],rdx
    a0ad:	mov    rdx,QWORD PTR [r12+0x10]
    a0b2:	shl    rdx,0x5
    a0b6:	sub    rax,rdx
    a0b9:	mov    QWORD PTR [rcx+rbx*8],rax
    a0bd:	add    rbx,0x1
    a0c1:	cmp    rbx,r14
    a0c4:	jb     a020 <mergefps+0xc0>
    a0ca:	mov    rbp,QWORD PTR [rsp+0x30]
    a0cf:	mov    r12,rdi
    a0d2:	mov    rdx,QWORD PTR [rsp+0x10]
    a0d7:	test   rdx,rdx
    a0da:	je     a5b7 <mergefps+0x657>
    a0e0:	xor    eax,eax
    a0e2:	nop    WORD PTR [rax+rax*1+0x0]
    a0e8:	mov    QWORD PTR [rbp+rax*8+0x0],rax
    a0ed:	add    rax,0x1
    a0f1:	cmp    rax,rdx
    a0f4:	jne    a0e8 <mergefps+0x188>
    a0f6:	cmp    QWORD PTR [rsp+0x10],0x1
    a0fc:	je     a15b <mergefps+0x1fb>
    a0fe:	mov    edx,0x1
    a103:	mov    r14,rdx
    a106:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a110:	lea    rax,[r14*8+0x0]
    a118:	lea    rbx,[rbp+rax*1+0x0]
    a11d:	lea    r13,[rbp+rax*1-0x8]
    a122:	mov    rax,QWORD PTR [rbx]
    a125:	mov    rsi,QWORD PTR [r12+rax*8]
    a129:	mov    rax,QWORD PTR [r13+0x0]
    a12d:	mov    rdi,QWORD PTR [r12+rax*8]
    a131:	call   9bc0 <compare>
    a136:	test   eax,eax
    a138:	jle    a150 <mergefps+0x1f0>
    a13a:	mov    rax,QWORD PTR [r13+0x0]
    a13e:	mov    rdx,QWORD PTR [rbx]
    a141:	mov    r14d,0x1
    a147:	mov    QWORD PTR [r13+0x0],rdx
    a14b:	mov    QWORD PTR [rbx],rax
    a14e:	jmp    a110 <mergefps+0x1b0>
    a150:	add    r14,0x1
    a154:	cmp    r14,QWORD PTR [rsp+0x10]
    a159:	jb     a110 <mergefps+0x1b0>
    a15b:	mov    QWORD PTR [rsp+0x58],0x0
    a164:	lea    rax,[rsp+0x70]
    a169:	mov    QWORD PTR [rsp+0x30],0x0
    a172:	mov    QWORD PTR [rsp+0x60],rax
    a177:	nop    WORD PTR [rax+rax*1+0x0]
    a180:	mov    rax,QWORD PTR [rbp+0x0]
    a184:	cmp    BYTE PTR [rip+0x142ae],0x0        # 1e439 <unique>
    a18b:	mov    r13,QWORD PTR [r12+rax*8]
    a18f:	je     a328 <mergefps+0x3c8>
    a195:	mov    rax,QWORD PTR [rsp+0x30]
    a19a:	test   rax,rax
    a19d:	je     a354 <mergefps+0x3f4>
    a1a3:	mov    rsi,r13
    a1a6:	mov    rdi,rax
    a1a9:	call   9bc0 <compare>
    a1ae:	test   eax,eax
    a1b0:	jne    a340 <mergefps+0x3e0>
    a1b6:	mov    rcx,QWORD PTR [rbp+0x0]
    a1ba:	mov    rbx,QWORD PTR [rsp+0x18]
    a1bf:	mov    QWORD PTR [rsp+0x8],rcx
    a1c4:	lea    rax,[rcx*8+0x0]
    a1cc:	cmp    QWORD PTR [rbx+rcx*8],r13
    a1d0:	jb     a300 <mergefps+0x3a0>
    a1d6:	mov    rdi,QWORD PTR [rsp+0x8]
    a1db:	mov    rbx,QWORD PTR [rsp+0x38]
    a1e0:	mov    rsi,QWORD PTR [rbx+rdi*8]
    a1e4:	mov    rbx,QWORD PTR [rsp+0x20]
    a1e9:	sub    rax,rdi
    a1ec:	mov    rdx,rdi
    a1ef:	shl    rdx,0x4
    a1f3:	lea    rdi,[rbx+rax*8]
    a1f7:	mov    rax,QWORD PTR [rsp+0x28]
    a1fc:	mov    rdx,QWORD PTR [rax+rdx*1]
    a200:	call   8c50 <fillbuf>
    a205:	test   al,al
    a207:	je     a3c0 <mergefps+0x460>
    a20d:	mov    rdi,QWORD PTR [rbp+0x0]
    a211:	mov    rbx,QWORD PTR [rsp+0x20]
    a216:	mov    r13,QWORD PTR [rsp+0x10]
    a21b:	lea    rax,[rdi*8+0x0]
    a223:	mov    QWORD PTR [rsp+0x8],rdi
    a228:	sub    rax,rdi
    a22b:	lea    rdx,[rbx+rax*8]
    a22f:	mov    rbx,QWORD PTR [rsp+0x18]
    a234:	mov    rax,QWORD PTR [rdx+0x18]
    a238:	add    rax,QWORD PTR [rdx]
    a23b:	mov    rdx,QWORD PTR [rdx+0x10]
    a23f:	lea    rcx,[rax-0x20]
    a243:	mov    QWORD PTR [r12+rdi*8],rcx
    a247:	shl    rdx,0x5
    a24b:	sub    rax,rdx
    a24e:	mov    QWORD PTR [rbx+rdi*8],rax
    a252:	mov    rax,QWORD PTR [rsp+0x8]
    a257:	cmp    r13,0x1
    a25b:	je     a31c <mergefps+0x3bc>
    a261:	lea    rax,[r12+rax*8]
    a265:	mov    r15d,0x1
    a26b:	mov    r14d,0x1
    a271:	mov    QWORD PTR [rsp],rax
    a275:	mov    rax,r13
    a278:	mov    r13,r15
    a27b:	mov    r15,rax
    a27e:	jmp    a29d <mergefps+0x33d>
    a280:	jne    a28c <mergefps+0x32c>
    a282:	mov    rax,QWORD PTR [rsp+0x8]
    a287:	cmp    QWORD PTR [rbx],rax
    a28a:	ja     a2b9 <mergefps+0x359>
    a28c:	lea    r13,[r14+0x1]
    a290:	lea    r14,[r13+r15*1+0x0]
    a295:	shr    r14,1
    a298:	cmp    r13,r15
    a29b:	jae    a2c9 <mergefps+0x369>
    a29d:	lea    rbx,[rbp+r14*8+0x0]
    a2a2:	mov    rax,QWORD PTR [rbx]
    a2a5:	mov    rsi,QWORD PTR [r12+rax*8]
    a2a9:	mov    rax,QWORD PTR [rsp]
    a2ad:	mov    rdi,QWORD PTR [rax]
    a2b0:	call   9bc0 <compare>
    a2b5:	test   eax,eax
    a2b7:	jns    a280 <mergefps+0x320>
    a2b9:	mov    r15,r14
    a2bc:	lea    r14,[r13+r15*1+0x0]
    a2c1:	shr    r14,1
    a2c4:	cmp    r13,r15
    a2c7:	jb     a29d <mergefps+0x33d>
    a2c9:	lea    rax,[r13-0x1]
    a2cd:	lea    rsi,[rbp+rax*8+0x0]
    a2d2:	test   rax,rax
    a2d5:	je     a2f1 <mergefps+0x391>
    a2d7:	mov    rax,rbp
    a2da:	lea    rcx,[rbp+r13*8-0x8]
    a2df:	nop
    a2e0:	mov    rdx,QWORD PTR [rax+0x8]
    a2e4:	add    rax,0x8
    a2e8:	mov    QWORD PTR [rax-0x8],rdx
    a2ec:	cmp    rax,rcx
    a2ef:	jne    a2e0 <mergefps+0x380>
    a2f1:	mov    rax,QWORD PTR [rsp+0x8]
    a2f6:	mov    QWORD PTR [rsi],rax
    a2f9:	jmp    a180 <mergefps+0x220>
    a2fe:	xchg   ax,ax
    a300:	sub    r13,0x20
    a304:	mov    rax,QWORD PTR [rsp+0x8]
    a309:	mov    QWORD PTR [r12+rcx*8],r13
    a30d:	mov    r13,QWORD PTR [rsp+0x10]
    a312:	cmp    r13,0x1
    a316:	jne    a261 <mergefps+0x301>
    a31c:	mov    QWORD PTR [rbp+0x0],rax
    a320:	jmp    a180 <mergefps+0x220>
    a325:	nop    DWORD PTR [rax]
    a328:	mov    rdx,QWORD PTR [rsp+0x48]
    a32d:	mov    rsi,QWORD PTR [rsp+0x40]
    a332:	mov    rdi,r13
    a335:	call   9750 <write_line>
    a33a:	jmp    a1b6 <mergefps+0x256>
    a33f:	nop
    a340:	mov    rdx,QWORD PTR [rsp+0x48]
    a345:	mov    rsi,QWORD PTR [rsp+0x40]
    a34a:	mov    rdi,QWORD PTR [rsp+0x60]
    a34f:	call   9750 <write_line>
    a354:	mov    r14,QWORD PTR [r13+0x8]
    a358:	mov    rdi,QWORD PTR [rsp+0x70]
    a35d:	cmp    r14,QWORD PTR [rsp+0x58]
    a362:	ja     a620 <mergefps+0x6c0>
    a368:	mov    rsi,QWORD PTR [r13+0x0]
    a36c:	mov    rdx,r14
    a36f:	mov    QWORD PTR [rsp+0x78],r14
    a374:	call   3b80 <memcpy@plt>
    a379:	mov    rbx,QWORD PTR [rsp+0x60]
    a37e:	cmp    QWORD PTR [rsp+0x68],0x0
    a384:	mov    QWORD PTR [rsp+0x30],rbx
    a389:	je     a1b6 <mergefps+0x256>
    a38f:	mov    rdx,QWORD PTR [r13+0x10]
    a393:	mov    rax,QWORD PTR [rsp+0x70]
    a398:	mov    rcx,QWORD PTR [r13+0x0]
    a39c:	add    rdx,rax
    a39f:	add    rax,QWORD PTR [r13+0x18]
    a3a3:	sub    rdx,rcx
    a3a6:	sub    rax,rcx
    a3a9:	mov    QWORD PTR [rsp+0x80],rdx
    a3b1:	mov    QWORD PTR [rsp+0x88],rax
    a3b9:	jmp    a1b6 <mergefps+0x256>
    a3be:	xchg   ax,ax
    a3c0:	mov    rbx,QWORD PTR [rsp+0x10]
    a3c5:	mov    rcx,QWORD PTR [rbp+0x0]
    a3c9:	lea    rax,[rbp+0x8]
    a3cd:	lea    rsi,[rbp+rbx*8+0x0]
    a3d2:	cmp    rbx,0x1
    a3d6:	je     a3fc <mergefps+0x49c>
    a3d8:	nop    DWORD PTR [rax+rax*1+0x0]
    a3e0:	mov    rdx,QWORD PTR [rax]
    a3e3:	cmp    rdx,rcx
    a3e6:	jbe    a3f3 <mergefps+0x493>
    a3e8:	sub    rdx,0x1
    a3ec:	mov    QWORD PTR [rax],rdx
    a3ef:	mov    rcx,QWORD PTR [rbp+0x0]
    a3f3:	add    rax,0x8
    a3f7:	cmp    rsi,rax
    a3fa:	jne    a3e0 <mergefps+0x480>
    a3fc:	mov    rax,QWORD PTR [rsp+0x10]
    a401:	mov    rdi,QWORD PTR [rsp+0x38]
    a406:	lea    rbx,[rax-0x1]
    a40a:	mov    rdi,QWORD PTR [rdi+rcx*8]
    a40e:	mov    rax,rcx
    a411:	mov    rcx,QWORD PTR [rsp+0x28]
    a416:	shl    rax,0x4
    a41a:	mov    rsi,QWORD PTR [rcx+rax*1]
    a41e:	call   96d0 <xfclose>
    a423:	mov    rax,QWORD PTR [rbp+0x0]
    a427:	cmp    rax,QWORD PTR [rsp+0x50]
    a42c:	jb     a660 <mergefps+0x700>
    a432:	mov    rcx,QWORD PTR [rsp+0x20]
    a437:	lea    rdx,[rax*8+0x0]
    a43f:	sub    rdx,rax
    a442:	mov    rdi,QWORD PTR [rcx+rdx*8]
    a446:	call   d750 <rpl_free>
    a44b:	mov    rdx,QWORD PTR [rbp+0x0]
    a44f:	cmp    rbx,rdx
    a452:	jbe    a4e4 <mergefps+0x584>
    a458:	lea    rax,[rdx*8+0x0]
    a460:	mov    rsi,QWORD PTR [rsp+0x10]
    a465:	mov    rcx,QWORD PTR [rsp+0x18]
    a46a:	mov    rdi,rax
    a46d:	mov    r8,QWORD PTR [rsp+0x38]
    a472:	sub    rdi,rdx
    a475:	lea    rsi,[rsi*8-0x8]
    a47d:	mov    rdx,rdi
    a480:	mov    rdi,QWORD PTR [rsp+0x20]
    a485:	lea    rdx,[rdi+rdx*8]
    a489:	mov    rdi,QWORD PTR [rsp+0x28]
    a48e:	xchg   ax,ax
    a490:	mov    r9,QWORD PTR [r8+rax*1+0x8]
    a495:	movdqu xmm0,XMMWORD PTR [rdi+rax*2+0x10]
    a49b:	add    rdx,0x38
    a49f:	movdqu xmm1,XMMWORD PTR [rdx]
    a4a3:	movdqu xmm2,XMMWORD PTR [rdx+0x10]
    a4a8:	mov    QWORD PTR [r8+rax*1],r9
    a4ac:	mov    r9,QWORD PTR [rdx+0x30]
    a4b0:	movdqu xmm3,XMMWORD PTR [rdx+0x20]
    a4b5:	movups XMMWORD PTR [rdi+rax*2],xmm0
    a4b9:	mov    QWORD PTR [rdx-0x8],r9
    a4bd:	mov    r9,QWORD PTR [r12+rax*1+0x8]
    a4c2:	movups XMMWORD PTR [rdx-0x38],xmm1
    a4c6:	mov    QWORD PTR [r12+rax*1],r9
    a4ca:	mov    r9,QWORD PTR [rcx+rax*1+0x8]
    a4cf:	movups XMMWORD PTR [rdx-0x28],xmm2
    a4d3:	mov    QWORD PTR [rcx+rax*1],r9
    a4d7:	add    rax,0x8
    a4db:	movups XMMWORD PTR [rdx-0x18],xmm3
    a4df:	cmp    rsi,rax
    a4e2:	jne    a490 <mergefps+0x530>
    a4e4:	test   rbx,rbx
    a4e7:	je     a588 <mergefps+0x628>
    a4ed:	mov    rcx,QWORD PTR [rsp+0x10]
    a4f2:	mov    rax,rbp
    a4f5:	lea    rcx,[rbp+rcx*8-0x8]
    a4fa:	nop    WORD PTR [rax+rax*1+0x0]
    a500:	mov    rdx,QWORD PTR [rax+0x8]
    a504:	add    rax,0x8
    a508:	mov    QWORD PTR [rax-0x8],rdx
    a50c:	cmp    rcx,rax
    a50f:	jne    a500 <mergefps+0x5a0>
    a511:	mov    QWORD PTR [rsp+0x10],rbx
    a516:	jmp    a180 <mergefps+0x220>
    a51b:	nop    DWORD PTR [rax+rax*1+0x0]
    a520:	mov    rsi,QWORD PTR [r13+0x0]
    a524:	mov    rdi,QWORD PTR [r10]
    a527:	call   96d0 <xfclose>
    a52c:	cmp    rbx,QWORD PTR [rsp+0x50]
    a531:	jb     a681 <mergefps+0x721>
    a537:	mov    rdi,QWORD PTR [r12]
    a53b:	call   d750 <rpl_free>
    a540:	mov    rax,QWORD PTR [rsp+0x10]
    a545:	lea    rsi,[rax-0x1]
    a549:	cmp    rsi,rbx
    a54c:	jbe    a69a <mergefps+0x73a>
    a552:	mov    r14,QWORD PTR [rsp+0x28]
    a557:	lea    rdx,[rax*8-0x8]
    a55f:	nop
    a560:	movdqu xmm4,XMMWORD PTR [r14+rbp*2+0x10]
    a567:	mov    rax,QWORD PTR [r15+rbp*1+0x8]
    a56c:	movups XMMWORD PTR [r14+rbp*2],xmm4
    a571:	mov    QWORD PTR [r15+rbp*1],rax
    a575:	add    rbp,0x8
    a579:	cmp    rdx,rbp
    a57c:	jne    a560 <mergefps+0x600>
    a57e:	mov    QWORD PTR [rsp+0x10],rsi
    a583:	jmp    a020 <mergefps+0xc0>
    a588:	cmp    QWORD PTR [rsp+0x30],0x0
    a58e:	je     a5b7 <mergefps+0x657>
    a590:	cmp    BYTE PTR [rip+0x13ea2],0x0        # 1e439 <unique>
    a597:	je     a5b7 <mergefps+0x657>
    a599:	mov    rdx,QWORD PTR [rsp+0x48]
    a59e:	mov    rsi,QWORD PTR [rsp+0x40]
    a5a3:	lea    rdi,[rsp+0x70]
    a5a8:	call   9750 <write_line>
    a5ad:	mov    rdi,QWORD PTR [rsp+0x70]
    a5b2:	call   d750 <rpl_free>
    a5b7:	mov    rsi,QWORD PTR [rsp+0x48]
    a5bc:	mov    rdi,QWORD PTR [rsp+0x40]
    a5c1:	call   96d0 <xfclose>
    a5c6:	mov    rdi,QWORD PTR [rsp+0x38]
    a5cb:	call   d750 <rpl_free>
    a5d0:	mov    rdi,QWORD PTR [rsp+0x20]
    a5d5:	call   d750 <rpl_free>
    a5da:	mov    rdi,rbp
    a5dd:	call   d750 <rpl_free>
    a5e2:	mov    rdi,QWORD PTR [rsp+0x18]
    a5e7:	call   d750 <rpl_free>
    a5ec:	mov    rdi,r12
    a5ef:	call   d750 <rpl_free>
    a5f4:	mov    rax,QWORD PTR [rsp+0x98]
    a5fc:	xor    rax,QWORD PTR fs:0x28
    a605:	jne    a6ae <mergefps+0x74e>
    a60b:	add    rsp,0xa8
    a612:	pop    rbx
    a613:	pop    rbp
    a614:	pop    r12
    a616:	pop    r13
    a618:	pop    r14
    a61a:	pop    r15
    a61c:	ret    
    a61d:	nop    DWORD PTR [rax]
    a620:	mov    rax,QWORD PTR [rsp+0x58]
    a625:	jmp    a638 <mergefps+0x6d8>
    a627:	nop    WORD PTR [rax+rax*1+0x0]
    a630:	add    rax,rax
    a633:	cmp    r14,rax
    a636:	jbe    a695 <mergefps+0x735>
    a638:	test   rax,rax
    a63b:	jne    a630 <mergefps+0x6d0>
    a63d:	call   d750 <rpl_free>
    a642:	mov    rdi,r14
    a645:	call   13000 <xmalloc>
    a64a:	mov    QWORD PTR [rsp+0x58],r14
    a64f:	mov    r14,QWORD PTR [r13+0x8]
    a653:	mov    QWORD PTR [rsp+0x70],rax
    a658:	mov    rdi,rax
    a65b:	jmp    a368 <mergefps+0x408>
    a660:	mov    rdi,QWORD PTR [rsp+0x28]
    a665:	shl    rax,0x4
    a669:	sub    QWORD PTR [rsp+0x50],0x1
    a66f:	mov    rdi,QWORD PTR [rdi+rax*1]
    a673:	call   9110 <zaptemp>
    a678:	mov    rax,QWORD PTR [rbp+0x0]
    a67c:	jmp    a432 <mergefps+0x4d2>
    a681:	mov    rdi,QWORD PTR [r13+0x0]
    a685:	sub    QWORD PTR [rsp+0x50],0x1
    a68b:	call   9110 <zaptemp>
    a690:	jmp    a537 <mergefps+0x5d7>
    a695:	mov    r14,rax
    a698:	jmp    a63d <mergefps+0x6dd>
    a69a:	mov    r12,QWORD PTR [rsp+0x8]
    a69f:	mov    rbp,QWORD PTR [rsp+0x30]
    a6a4:	mov    QWORD PTR [rsp+0x10],rsi
    a6a9:	jmp    a0d2 <mergefps+0x172>
    a6ae:	call   3990 <__stack_chk_fail@plt>
    a6b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    a6be:	xchg   ax,ax

000000000000a6c0 <move_fd.part.0>:
    a6c0:	push   rbp
    a6c1:	mov    ebp,edi
    a6c3:	call   39b0 <dup2@plt>
    a6c8:	mov    edi,ebp
    a6ca:	pop    rbp
    a6cb:	jmp    3a80 <close@plt>

000000000000a6d0 <open_input_files>:
    a6d0:	push   r15
    a6d2:	push   r14
    a6d4:	push   r13
    a6d6:	mov    r13,rsi
    a6d9:	mov    esi,0x8
    a6de:	push   r12
    a6e0:	mov    r12,rdx
    a6e3:	push   rbp
    a6e4:	push   rbx
    a6e5:	mov    rbx,rdi
    a6e8:	mov    rdi,r13
    a6eb:	sub    rsp,0x28
    a6ef:	mov    rax,QWORD PTR fs:0x28
    a6f8:	mov    QWORD PTR [rsp+0x18],rax
    a6fd:	xor    eax,eax
    a6ff:	call   13150 <xnmalloc>
    a704:	mov    QWORD PTR [r12],rax
    a708:	test   r13,r13
    a70b:	je     a857 <open_input_files+0x187>
    a711:	mov    rbp,rax
    a714:	lea    rax,[rsp+0x10]
    a719:	xor    r12d,r12d
    a71c:	mov    QWORD PTR [rsp+0x8],rax
    a721:	jmp    a74e <open_input_files+0x7e>
    a723:	nop    DWORD PTR [rax+rax*1+0x0]
    a728:	mov    rdi,QWORD PTR [rbx]
    a72b:	lea    rsi,[rip+0xc8d0]        # 17002 <short_options+0x1b92>
    a732:	call   9580 <stream_open>
    a737:	mov    QWORD PTR [rbp+r12*8+0x0],rax
    a73c:	test   rax,rax
    a73f:	je     a7b8 <open_input_files+0xe8>
    a741:	add    r12,0x1
    a745:	add    rbx,0x10
    a749:	cmp    r12,r13
    a74c:	je     a7b8 <open_input_files+0xe8>
    a74e:	mov    r15,QWORD PTR [rbx+0x8]
    a752:	test   r15,r15
    a755:	je     a728 <open_input_files+0x58>
    a757:	movzx  eax,BYTE PTR [r15+0xc]
    a75c:	test   al,al
    a75e:	je     a728 <open_input_files+0x58>
    a760:	cmp    al,0x1
    a762:	je     a828 <open_input_files+0x158>
    a768:	lea    rdi,[r15+0xd]
    a76c:	xor    esi,esi
    a76e:	xor    eax,eax
    a770:	call   3d20 <open@plt>
    a775:	mov    r14d,eax
    a778:	test   eax,eax
    a77a:	js     a7af <open_input_files+0xdf>
    a77c:	mov    rdi,QWORD PTR [rsp+0x8]
    a781:	mov    esi,0x9
    a786:	call   9280 <pipe_fork>
    a78b:	cmp    eax,0xffffffff
    a78e:	jne    a7e0 <open_input_files+0x110>
    a790:	call   3810 <__errno_location@plt>
    a795:	cmp    DWORD PTR [rax],0x18
    a798:	mov    rbx,rax
    a79b:	jne    a8bc <open_input_files+0x1ec>
    a7a1:	mov    edi,r14d
    a7a4:	call   3a80 <close@plt>
    a7a9:	mov    DWORD PTR [rbx],0x18
    a7af:	mov    QWORD PTR [rbp+r12*8+0x0],0x0
    a7b8:	mov    rax,QWORD PTR [rsp+0x18]
    a7bd:	xor    rax,QWORD PTR fs:0x28
    a7c6:	jne    a8b7 <open_input_files+0x1e7>
    a7cc:	add    rsp,0x28
    a7d0:	mov    rax,r12
    a7d3:	pop    rbx
    a7d4:	pop    rbp
    a7d5:	pop    r12
    a7d7:	pop    r13
    a7d9:	pop    r14
    a7db:	pop    r15
    a7dd:	ret    
    a7de:	xchg   ax,ax
    a7e0:	test   eax,eax
    a7e2:	je     a85f <open_input_files+0x18f>
    a7e4:	mov    DWORD PTR [r15+0x8],eax
    a7e8:	mov    rdi,r15
    a7eb:	lea    r15,[rbp+r12*8+0x0]
    a7f0:	call   7870 <register_proc>
    a7f5:	mov    edi,r14d
    a7f8:	call   3a80 <close@plt>
    a7fd:	mov    edi,DWORD PTR [rsp+0x14]
    a801:	call   3a80 <close@plt>
    a806:	mov    edi,DWORD PTR [rsp+0x10]
    a80a:	lea    rsi,[rip+0xc7f1]        # 17002 <short_options+0x1b92>
    a811:	call   3c80 <fdopen@plt>
    a816:	test   rax,rax
    a819:	je     a836 <open_input_files+0x166>
    a81b:	mov    QWORD PTR [rbp+r12*8+0x0],rax
    a820:	jmp    a741 <open_input_files+0x71>
    a825:	nop    DWORD PTR [rax]
    a828:	mov    edi,DWORD PTR [r15+0x8]
    a82c:	call   7740 <wait_proc>
    a831:	jmp    a768 <open_input_files+0x98>
    a836:	call   3810 <__errno_location@plt>
    a83b:	mov    edi,DWORD PTR [rsp+0x10]
    a83f:	mov    ebp,DWORD PTR [rax]
    a841:	mov    rbx,rax
    a844:	call   3a80 <close@plt>
    a849:	mov    QWORD PTR [r15],0x0
    a850:	mov    DWORD PTR [rbx],ebp
    a852:	jmp    a7b8 <open_input_files+0xe8>
    a857:	xor    r12d,r12d
    a85a:	jmp    a7b8 <open_input_files+0xe8>
    a85f:	mov    edi,DWORD PTR [rsp+0x10]
    a863:	call   3a80 <close@plt>
    a868:	test   r14d,r14d
    a86b:	je     a877 <open_input_files+0x1a7>
    a86d:	xor    esi,esi
    a86f:	mov    edi,r14d
    a872:	call   a6c0 <move_fd.part.0>
    a877:	mov    edi,DWORD PTR [rsp+0x14]
    a87b:	cmp    edi,0x1
    a87e:	je     a88a <open_input_files+0x1ba>
    a880:	mov    esi,0x1
    a885:	call   a6c0 <move_fd.part.0>
    a88a:	mov    rdi,QWORD PTR [rip+0x13b97]        # 1e428 <compress_program>
    a891:	xor    ecx,ecx
    a893:	lea    rdx,[rip+0xc3b6]        # 16c50 <short_options+0x17e0>
    a89a:	xor    eax,eax
    a89c:	mov    rsi,rdi
    a89f:	call   3e60 <execlp@plt>
    a8a4:	call   3810 <__errno_location@plt>
    a8a9:	lea    rsi,[rip+0xacd8]        # 15588 <short_options+0x118>
    a8b0:	mov    edi,DWORD PTR [rax]
    a8b2:	call   77a0 <async_safe_die>
    a8b7:	call   3990 <__stack_chk_fail@plt>
    a8bc:	mov    rsi,QWORD PTR [rip+0x13b65]        # 1e428 <compress_program>
    a8c3:	mov    edi,0x4
    a8c8:	call   11270 <quotearg_style>
    a8cd:	mov    edx,0x5
    a8d2:	lea    rsi,[rip+0xac87]        # 15560 <short_options+0xf0>
    a8d9:	xor    edi,edi
    a8db:	mov    r12,rax
    a8de:	call   3960 <dcgettext@plt>
    a8e3:	mov    esi,DWORD PTR [rbx]
    a8e5:	mov    rcx,r12
    a8e8:	mov    edi,0x2
    a8ed:	mov    rdx,rax
    a8f0:	xor    eax,eax
    a8f2:	call   3ce0 <error@plt>
    a8f7:	nop    WORD PTR [rax+rax*1+0x0]

000000000000a900 <mergefiles>:
    a900:	push   r15
    a902:	mov    r15,r8
    a905:	push   r14
    a907:	mov    r14,rcx
    a90a:	push   r13
    a90c:	mov    r13,rsi
    a90f:	push   r12
    a911:	push   rbp
    a912:	mov    rbp,rdi
    a915:	push   rbx
    a916:	mov    rbx,rdx
    a919:	mov    rsi,rbx
    a91c:	sub    rsp,0x18
    a920:	mov    rax,QWORD PTR fs:0x28
    a929:	mov    QWORD PTR [rsp+0x8],rax
    a92e:	xor    eax,eax
    a930:	mov    rdx,rsp
    a933:	call   a6d0 <open_input_files>
    a938:	mov    r12,rax
    a93b:	cmp    rbx,rax
    a93e:	jbe    a946 <mergefiles+0x46>
    a940:	cmp    rax,0x1
    a944:	jbe    a980 <mergefiles+0x80>
    a946:	mov    r9,QWORD PTR [rsp]
    a94a:	mov    r8,r15
    a94d:	mov    rcx,r14
    a950:	mov    rdx,r12
    a953:	mov    rsi,r13
    a956:	mov    rdi,rbp
    a959:	call   9f60 <mergefps>
    a95e:	mov    rax,QWORD PTR [rsp+0x8]
    a963:	xor    rax,QWORD PTR fs:0x28
    a96c:	jne    a9a7 <mergefiles+0xa7>
    a96e:	add    rsp,0x18
    a972:	mov    rax,r12
    a975:	pop    rbx
    a976:	pop    rbp
    a977:	pop    r12
    a979:	pop    r13
    a97b:	pop    r14
    a97d:	pop    r15
    a97f:	ret    
    a980:	shl    r12,0x4
    a984:	lea    rsi,[rip+0xc27d]        # 16c08 <short_options+0x1798>
    a98b:	xor    edi,edi
    a98d:	mov    edx,0x5
    a992:	mov    rbp,QWORD PTR [rbp+r12*1+0x0]
    a997:	call   3960 <dcgettext@plt>
    a99c:	mov    rdi,rax
    a99f:	mov    rsi,rbp
    a9a2:	call   7440 <sort_die>
    a9a7:	call   3990 <__stack_chk_fail@plt>
    a9ac:	nop    DWORD PTR [rax+0x0]

000000000000a9b0 <maybe_create_temp>:
    a9b0:	push   r15
    a9b2:	push   r14
    a9b4:	push   r13
    a9b6:	push   r12
    a9b8:	push   rbp
    a9b9:	push   rbx
    a9ba:	sub    rsp,0xa8
    a9c1:	mov    rdx,QWORD PTR [rip+0x13860]        # 1e228 <temp_dir_index.8952>
    a9c8:	mov    DWORD PTR [rsp+0xc],esi
    a9cc:	mov    QWORD PTR [rsp],rdi
    a9d0:	mov    rax,QWORD PTR fs:0x28
    a9d9:	mov    QWORD PTR [rsp+0x98],rax
    a9e1:	xor    eax,eax
    a9e3:	mov    rax,QWORD PTR [rip+0x13a66]        # 1e450 <temp_dirs>
    a9ea:	mov    r14,QWORD PTR [rax+rdx*8]
    a9ee:	mov    rdi,r14
    a9f1:	call   3980 <strlen@plt>
    a9f6:	lea    rdi,[rax+0x20]
    a9fa:	mov    rbx,rax
    a9fd:	and    rdi,0xfffffffffffffff8
    aa01:	call   13000 <xmalloc>
    aa06:	mov    rdx,rbx
    aa09:	mov    rsi,r14
    aa0c:	lea    r15,[rax+0xd]
    aa10:	mov    r12,rax
    aa13:	mov    rdi,r15
    aa16:	call   3b80 <memcpy@plt>
    aa1b:	mov    rax,QWORD PTR [rip+0xa8ce]        # 152f0 <slashbase.8951>
    aa22:	mov    QWORD PTR [r12+rbx*1+0xd],rax
    aa27:	mov    eax,DWORD PTR [rip+0xa8cb]        # 152f8 <slashbase.8951+0x8>
    aa2d:	mov    DWORD PTR [r15+rbx*1+0x8],eax
    aa32:	mov    rax,QWORD PTR [rip+0x137ef]        # 1e228 <temp_dir_index.8952>
    aa39:	mov    QWORD PTR [r12],0x0
    aa41:	add    rax,0x1
    aa45:	cmp    rax,QWORD PTR [rip+0x139fc]        # 1e448 <temp_dir_count>
    aa4c:	mov    QWORD PTR [rip+0x137d5],rax        # 1e228 <temp_dir_index.8952>
    aa53:	jne    aa60 <maybe_create_temp+0xb0>
    aa55:	mov    QWORD PTR [rip+0x137c8],0x0        # 1e228 <temp_dir_index.8952>
    aa60:	lea    rdx,[rsp+0x18]
    aa65:	xor    edi,edi
    aa67:	lea    r13,[rsp+0x10]
    aa6c:	lea    rsi,[rip+0x1392d]        # 1e3a0 <caught_signals>
    aa73:	call   37f0 <pthread_sigmask@plt>
    aa78:	mov    esi,0x80000
    aa7d:	mov    rdi,r15
    aa80:	test   eax,eax
    aa82:	sete   BYTE PTR [rsp+0x10]
    aa87:	call   12350 <mkostemp_safer>
    aa8c:	mov    ebp,eax
    aa8e:	call   3810 <__errno_location@plt>
    aa93:	mov    rbx,rax
    aa96:	test   ebp,ebp
    aa98:	js     ab50 <maybe_create_temp+0x1a0>
    aa9e:	mov    rax,QWORD PTR [rip+0x1359b]        # 1e040 <temptail>
    aaa5:	cmp    BYTE PTR [rsp+0x10],0x0
    aaaa:	mov    QWORD PTR [rip+0x1358f],r12        # 1e040 <temptail>
    aab1:	mov    QWORD PTR [rax],r12
    aab4:	jne    ab80 <maybe_create_temp+0x1d0>
    aaba:	cmp    QWORD PTR [rip+0x13966],0x0        # 1e428 <compress_program>
    aac2:	mov    BYTE PTR [r12+0xc],0x0
    aac8:	je     aae6 <maybe_create_temp+0x136>
    aaca:	mov    esi,0x4
    aacf:	mov    rdi,r13
    aad2:	call   9280 <pipe_fork>
    aad7:	mov    DWORD PTR [r12+0x8],eax
    aadc:	test   eax,eax
    aade:	jg     ab30 <maybe_create_temp+0x180>
    aae0:	je     aba4 <maybe_create_temp+0x1f4>
    aae6:	lea    rsi,[rip+0xc166]        # 16c53 <short_options+0x17e3>
    aaed:	mov    edi,ebp
    aaef:	call   3c80 <fdopen@plt>
    aaf4:	mov    rcx,QWORD PTR [rsp]
    aaf8:	mov    QWORD PTR [rcx],rax
    aafb:	test   rax,rax
    aafe:	je     abf3 <maybe_create_temp+0x243>
    ab04:	mov    rax,QWORD PTR [rsp+0x98]
    ab0c:	xor    rax,QWORD PTR fs:0x28
    ab15:	jne    abee <maybe_create_temp+0x23e>
    ab1b:	add    rsp,0xa8
    ab22:	mov    rax,r12
    ab25:	pop    rbx
    ab26:	pop    rbp
    ab27:	pop    r12
    ab29:	pop    r13
    ab2b:	pop    r14
    ab2d:	pop    r15
    ab2f:	ret    
    ab30:	mov    edi,ebp
    ab32:	call   3a80 <close@plt>
    ab37:	mov    edi,DWORD PTR [rsp+0x10]
    ab3b:	call   3a80 <close@plt>
    ab40:	mov    rdi,r12
    ab43:	mov    ebp,DWORD PTR [rsp+0x14]
    ab47:	call   7870 <register_proc>
    ab4c:	jmp    aae6 <maybe_create_temp+0x136>
    ab4e:	xchg   ax,ax
    ab50:	cmp    BYTE PTR [rsp+0x10],0x0
    ab55:	mov    ebp,DWORD PTR [rax]
    ab57:	jne    ab98 <maybe_create_temp+0x1e8>
    ab59:	cmp    ebp,0x18
    ab5c:	jne    ac11 <maybe_create_temp+0x261>
    ab62:	cmp    BYTE PTR [rsp+0xc],0x1
    ab67:	jne    ac11 <maybe_create_temp+0x261>
    ab6d:	mov    rdi,r12
    ab70:	xor    r12d,r12d
    ab73:	call   d750 <rpl_free>
    ab78:	jmp    ab04 <maybe_create_temp+0x154>
    ab7a:	nop    WORD PTR [rax+rax*1+0x0]
    ab80:	mov    r14d,DWORD PTR [rbx]
    ab83:	mov    rdi,r13
    ab86:	call   9050 <cs_leave.part.0>
    ab8b:	mov    DWORD PTR [rbx],r14d
    ab8e:	jmp    aaba <maybe_create_temp+0x10a>
    ab93:	nop    DWORD PTR [rax+rax*1+0x0]
    ab98:	mov    rdi,r13
    ab9b:	call   9050 <cs_leave.part.0>
    aba0:	mov    DWORD PTR [rbx],ebp
    aba2:	jmp    ab59 <maybe_create_temp+0x1a9>
    aba4:	mov    edi,DWORD PTR [rsp+0x14]
    aba8:	call   3a80 <close@plt>
    abad:	cmp    ebp,0x1
    abb0:	je     abbe <maybe_create_temp+0x20e>
    abb2:	mov    esi,0x1
    abb7:	mov    edi,ebp
    abb9:	call   a6c0 <move_fd.part.0>
    abbe:	mov    edi,DWORD PTR [rsp+0x10]
    abc2:	test   edi,edi
    abc4:	je     abcd <maybe_create_temp+0x21d>
    abc6:	xor    esi,esi
    abc8:	call   a6c0 <move_fd.part.0>
    abcd:	mov    rdi,QWORD PTR [rip+0x13854]        # 1e428 <compress_program>
    abd4:	xor    edx,edx
    abd6:	xor    eax,eax
    abd8:	mov    rsi,rdi
    abdb:	call   3e60 <execlp@plt>
    abe0:	mov    edi,DWORD PTR [rbx]
    abe2:	lea    rsi,[rip+0xa9f7]        # 155e0 <short_options+0x170>
    abe9:	call   77a0 <async_safe_die>
    abee:	call   3990 <__stack_chk_fail@plt>
    abf3:	lea    rsi,[rip+0xaa0e]        # 15608 <short_options+0x198>
    abfa:	xor    edi,edi
    abfc:	mov    edx,0x5
    ac01:	call   3960 <dcgettext@plt>
    ac06:	mov    rsi,r15
    ac09:	mov    rdi,rax
    ac0c:	call   7440 <sort_die>
    ac11:	mov    rsi,r14
    ac14:	mov    edi,0x4
    ac19:	call   11270 <quotearg_style>
    ac1e:	mov    edx,0x5
    ac23:	lea    rsi,[rip+0xa98e]        # 155b8 <short_options+0x148>
    ac2a:	xor    edi,edi
    ac2c:	mov    r12,rax
    ac2f:	call   3960 <dcgettext@plt>
    ac34:	mov    esi,DWORD PTR [rbx]
    ac36:	mov    rcx,r12
    ac39:	mov    edi,0x2
    ac3e:	mov    rdx,rax
    ac41:	xor    eax,eax
    ac43:	call   3ce0 <error@plt>
    ac48:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ac50 <merge>:
    ac50:	push   r15
    ac52:	push   r14
    ac54:	mov    r14,rdi
    ac57:	push   r13
    ac59:	push   r12
    ac5b:	mov    r12,rsi
    ac5e:	push   rbp
    ac5f:	push   rbx
    ac60:	sub    rsp,0xe8
    ac67:	mov    QWORD PTR [rsp+0x28],rcx
    ac6c:	mov    ecx,DWORD PTR [rip+0x133b2]        # 1e024 <nmerge>
    ac72:	lea    rbp,[rsp+0x38]
    ac77:	mov    QWORD PTR [rsp+0x10],rdx
    ac7c:	mov    rax,QWORD PTR fs:0x28
    ac85:	mov    QWORD PTR [rsp+0xd8],rax
    ac8d:	xor    eax,eax
    ac8f:	cmp    rcx,rdx
    ac92:	jae    ad8a <merge+0x13a>
    ac98:	xor    r13d,r13d
    ac9b:	xor    ebx,ebx
    ac9d:	cmp    QWORD PTR [rsp+0x10],rcx
    aca2:	jb     b0a7 <merge+0x457>
    aca8:	nop    DWORD PTR [rax+rax*1+0x0]
    acb0:	xor    esi,esi
    acb2:	mov    rdi,rbp
    acb5:	call   a9b0 <maybe_create_temp>
    acba:	mov    rsi,r12
    acbd:	mov    rdi,rbx
    acc0:	mov    rcx,QWORD PTR [rsp+0x38]
    acc5:	mov    edx,DWORD PTR [rip+0x13359]        # 1e024 <nmerge>
    accb:	lea    r8,[rax+0xd]
    accf:	mov    r15,rax
    acd2:	mov    QWORD PTR [rsp+0x8],r8
    acd7:	cmp    rdx,r12
    acda:	cmovbe rsi,rdx
    acde:	shl    rdi,0x4
    ace2:	add    rdi,r14
    ace5:	call   a900 <mergefiles>
    acea:	mov    rdx,r12
    aced:	mov    rsi,QWORD PTR [rsp+0x10]
    acf2:	mov    r8,QWORD PTR [rsp+0x8]
    acf7:	cmp    rax,r12
    acfa:	mov    ecx,DWORD PTR [rip+0x13324]        # 1e024 <nmerge>
    ad00:	cmovbe rdx,rax
    ad04:	add    rbx,rax
    ad07:	sub    rsi,rbx
    ad0a:	sub    r12,rdx
    ad0d:	mov    rdx,r13
    ad10:	add    r13,0x1
    ad14:	shl    rdx,0x4
    ad18:	mov    QWORD PTR [r14+rdx*1],r8
    ad1c:	mov    QWORD PTR [r14+rdx*1+0x8],r15
    ad21:	cmp    rcx,rsi
    ad24:	jbe    acb0 <merge+0x60>
    ad26:	mov    rax,r13
    ad29:	xor    edx,edx
    ad2b:	mov    r15,r13
    ad2e:	mov    r10,rbx
    ad31:	div    rcx
    ad34:	shl    r15,0x4
    ad38:	shl    r10,0x4
    ad3c:	mov    rax,rcx
    ad3f:	add    r15,r14
    ad42:	add    r10,r14
    ad45:	sub    rax,rdx
    ad48:	cmp    rsi,rax
    ad4b:	ja     af9a <merge+0x34a>
    ad51:	mov    rdx,QWORD PTR [rsp+0x10]
    ad56:	mov    rsi,r10
    ad59:	mov    rdi,r15
    ad5c:	add    r12,r13
    ad5f:	sub    rdx,rbx
    ad62:	shl    rdx,0x4
    ad66:	call   3cc0 <memmove@plt>
    ad6b:	mov    r9,r13
    ad6e:	mov    ecx,DWORD PTR [rip+0x132b0]        # 1e024 <nmerge>
    ad74:	sub    r9,rbx
    ad77:	add    QWORD PTR [rsp+0x10],r9
    ad7c:	mov    rdx,QWORD PTR [rsp+0x10]
    ad81:	cmp    rcx,rdx
    ad84:	jb     ac98 <merge+0x48>
    ad8a:	cmp    QWORD PTR [rsp+0x10],r12
    ad8f:	jbe    ae94 <merge+0x244>
    ad95:	mov    rbp,r12
    ad98:	lea    rax,[rsp+0x40]
    ad9d:	mov    QWORD PTR [rsp+0x18],r14
    ada2:	mov    r15,r12
    ada5:	shl    rbp,0x4
    ada9:	mov    QWORD PTR [rsp+0x8],rax
    adae:	xor    r13d,r13d
    adb1:	add    rbp,r14
    adb4:	mov    QWORD PTR [rsp+0x20],r12
    adb9:	mov    r14,QWORD PTR [rsp+0x28]
    adbe:	jmp    ae26 <merge+0x1d6>
    adc0:	test   ebx,ebx
    adc2:	jne    ae02 <merge+0x1b2>
    adc4:	call   72e0 <get_outstatus>
    adc9:	mov    r12,rax
    adcc:	test   rax,rax
    adcf:	je     ae8a <merge+0x23a>
    add5:	mov    rdx,QWORD PTR [rsp+0x8]
    adda:	xor    esi,esi
    addc:	mov    edi,0x1
    ade1:	call   3c20 <__fxstat@plt>
    ade6:	test   eax,eax
    ade8:	jne    ae17 <merge+0x1c7>
    adea:	mov    rdx,QWORD PTR [rsp+0x40]
    adef:	mov    rax,QWORD PTR [rsp+0x48]
    adf4:	xor    rdx,QWORD PTR [r12]
    adf8:	xor    rax,QWORD PTR [r12+0x8]
    adfd:	or     rdx,rax
    ae00:	jne    ae17 <merge+0x1c7>
    ae02:	lea    rbx,[r13+0xd]
    ae06:	test   r13,r13
    ae09:	je     b078 <merge+0x428>
    ae0f:	mov    QWORD PTR [rbp+0x0],rbx
    ae13:	mov    QWORD PTR [rbp+0x8],r13
    ae17:	add    r15,0x1
    ae1b:	add    rbp,0x10
    ae1f:	cmp    QWORD PTR [rsp+0x10],r15
    ae24:	je     ae8a <merge+0x23a>
    ae26:	mov    rsi,QWORD PTR [rbp+0x0]
    ae2a:	movzx  ebx,BYTE PTR [rsi]
    ae2d:	sub    ebx,0x2d
    ae30:	jne    ae36 <merge+0x1e6>
    ae32:	movzx  ebx,BYTE PTR [rsi+0x1]
    ae36:	test   r14,r14
    ae39:	je     ae4b <merge+0x1fb>
    ae3b:	mov    rdi,r14
    ae3e:	call   3b20 <strcmp@plt>
    ae43:	test   eax,eax
    ae45:	je     adc0 <merge+0x170>
    ae4b:	call   72e0 <get_outstatus>
    ae50:	mov    r12,rax
    ae53:	test   rax,rax
    ae56:	je     ae8a <merge+0x23a>
    ae58:	test   ebx,ebx
    ae5a:	je     add5 <merge+0x185>
    ae60:	mov    rdx,QWORD PTR [rsp+0x8]
    ae65:	mov    rsi,QWORD PTR [rbp+0x0]
    ae69:	mov    edi,0x1
    ae6e:	call   3bb0 <__xstat@plt>
    ae73:	test   eax,eax
    ae75:	je     adea <merge+0x19a>
    ae7b:	add    r15,0x1
    ae7f:	add    rbp,0x10
    ae83:	cmp    QWORD PTR [rsp+0x10],r15
    ae88:	jne    ae26 <merge+0x1d6>
    ae8a:	mov    r14,QWORD PTR [rsp+0x18]
    ae8f:	mov    r12,QWORD PTR [rsp+0x20]
    ae94:	lea    rax,[rsp+0x30]
    ae99:	mov    QWORD PTR [rsp+0x8],r12
    ae9e:	mov    r13,QWORD PTR [rsp+0x10]
    aea3:	lea    rbx,[rsp+0x38]
    aea8:	mov    QWORD PTR [rsp+0x20],rax
    aead:	nop    DWORD PTR [rax]
    aeb0:	mov    rdx,QWORD PTR [rsp+0x20]
    aeb5:	mov    rsi,r13
    aeb8:	mov    rdi,r14
    aebb:	call   a6d0 <open_input_files>
    aec0:	mov    rbp,rax
    aec3:	cmp    r13,rax
    aec6:	je     b028 <merge+0x3d8>
    aecc:	cmp    rax,0x2
    aed0:	jbe    b101 <merge+0x4b1>
    aed6:	lea    r15,[rbp-0x1]
    aeda:	mov    rcx,r15
    aedd:	shl    rcx,0x4
    aee1:	lea    r12,[r14+rcx*1]
    aee5:	jmp    aef4 <merge+0x2a4>
    aee7:	nop    WORD PTR [rax+rax*1+0x0]
    aef0:	sub    r15,0x1
    aef4:	mov    rax,QWORD PTR [rsp+0x30]
    aef9:	mov    rsi,QWORD PTR [r12]
    aefd:	mov    rbp,r12
    af00:	mov    rdi,QWORD PTR [rax+r15*8]
    af04:	call   96d0 <xfclose>
    af09:	xor    esi,esi
    af0b:	cmp    r15,0x2
    af0f:	mov    rdi,rbx
    af12:	seta   sil
    af16:	sub    r12,0x10
    af1a:	call   a9b0 <maybe_create_temp>
    af1f:	test   rax,rax
    af22:	je     aef0 <merge+0x2a0>
    af24:	lea    r8,[rax+0xd]
    af28:	mov    QWORD PTR [rsp+0x18],rax
    af2d:	mov    rdx,r15
    af30:	mov    rdi,r14
    af33:	mov    rax,QWORD PTR [rsp+0x8]
    af38:	mov    r9,QWORD PTR [rsp+0x30]
    af3d:	mov    QWORD PTR [rsp+0x10],r8
    af42:	mov    rcx,QWORD PTR [rsp+0x38]
    af47:	cmp    rax,r15
    af4a:	mov    r12,rax
    af4d:	cmova  r12,r15
    af51:	sub    r13,r15
    af54:	mov    rsi,r12
    af57:	call   9f60 <mergefps>
    af5c:	mov    r8,QWORD PTR [rsp+0x10]
    af61:	mov    rdx,r13
    af64:	mov    rsi,rbp
    af67:	mov    rax,QWORD PTR [rsp+0x18]
    af6c:	shl    rdx,0x4
    af70:	lea    rdi,[r14+0x10]
    af74:	add    r13,0x1
    af78:	mov    QWORD PTR [r14],r8
    af7b:	mov    QWORD PTR [r14+0x8],rax
    af7f:	call   3cc0 <memmove@plt>
    af84:	mov    rax,QWORD PTR [rsp+0x8]
    af89:	sub    rax,r12
    af8c:	lea    rax,[rax+0x1]
    af90:	mov    QWORD PTR [rsp+0x8],rax
    af95:	jmp    aeb0 <merge+0x260>
    af9a:	lea    rdx,[rsi+rdx*1+0x1]
    af9f:	mov    rdi,rbp
    afa2:	xor    esi,esi
    afa4:	mov    QWORD PTR [rsp+0x20],r10
    afa9:	sub    rdx,rcx
    afac:	mov    QWORD PTR [rsp+0x8],rdx
    afb1:	call   a9b0 <maybe_create_temp>
    afb6:	mov    rdx,QWORD PTR [rsp+0x8]
    afbb:	mov    r10,QWORD PTR [rsp+0x20]
    afc0:	mov    rsi,r12
    afc3:	mov    rcx,QWORD PTR [rsp+0x38]
    afc8:	lea    r8,[rax+0xd]
    afcc:	mov    QWORD PTR [rsp+0x18],rax
    afd1:	cmp    rdx,r12
    afd4:	mov    rdi,r10
    afd7:	mov    QWORD PTR [rsp+0x8],r8
    afdc:	cmovbe rsi,rdx
    afe0:	call   a900 <mergefiles>
    afe5:	mov    rdx,r12
    afe8:	mov    r8,QWORD PTR [rsp+0x8]
    afed:	mov    r11,QWORD PTR [rsp+0x18]
    aff2:	cmp    rax,r12
    aff5:	cmovbe rdx,rax
    aff9:	add    r13,0x1
    affd:	add    rbx,rax
    b000:	mov    QWORD PTR [r15],r8
    b003:	mov    QWORD PTR [r15+0x8],r11
    b007:	mov    r10,rbx
    b00a:	mov    r15,r13
    b00d:	shl    r10,0x4
    b011:	shl    r15,0x4
    b015:	sub    r12,rdx
    b018:	add    r10,r14
    b01b:	add    r15,r14
    b01e:	jmp    ad51 <merge+0x101>
    b023:	nop    DWORD PTR [rax+rax*1+0x0]
    b028:	mov    rdi,QWORD PTR [rsp+0x28]
    b02d:	lea    rsi,[rip+0xbc1f]        # 16c53 <short_options+0x17e3>
    b034:	call   9580 <stream_open>
    b039:	test   rax,rax
    b03c:	jne    b0bc <merge+0x46c>
    b03e:	call   3810 <__errno_location@plt>
    b043:	cmp    DWORD PTR [rax],0x18
    b046:	jne    b052 <merge+0x402>
    b048:	cmp    r13,0x2
    b04c:	ja     aed6 <merge+0x286>
    b052:	lea    rsi,[rip+0xbbaf]        # 16c08 <short_options+0x1798>
    b059:	xor    edi,edi
    b05b:	mov    edx,0x5
    b060:	call   3960 <dcgettext@plt>
    b065:	mov    rsi,QWORD PTR [rsp+0x28]
    b06a:	mov    rdi,rax
    b06d:	call   7440 <sort_die>
    b072:	nop    WORD PTR [rax+rax*1+0x0]
    b078:	lea    rdi,[rsp+0x38]
    b07d:	xor    esi,esi
    b07f:	call   a9b0 <maybe_create_temp>
    b084:	mov    rcx,QWORD PTR [rsp+0x38]
    b089:	xor    esi,esi
    b08b:	mov    rdi,rbp
    b08e:	lea    rbx,[rax+0xd]
    b092:	mov    edx,0x1
    b097:	mov    r13,rax
    b09a:	mov    r8,rbx
    b09d:	call   a900 <mergefiles>
    b0a2:	jmp    ae0f <merge+0x1bf>
    b0a7:	mov    rsi,QWORD PTR [rsp+0x10]
    b0ac:	mov    rax,rcx
    b0af:	mov    r15,r14
    b0b2:	mov    r10,r14
    b0b5:	xor    edx,edx
    b0b7:	jmp    ad48 <merge+0xf8>
    b0bc:	mov    r12,QWORD PTR [rsp+0x8]
    b0c1:	mov    r9,QWORD PTR [rsp+0x30]
    b0c6:	mov    rcx,rax
    b0c9:	mov    rdx,r13
    b0cc:	mov    r8,QWORD PTR [rsp+0x28]
    b0d1:	mov    rdi,r14
    b0d4:	mov    rsi,r12
    b0d7:	call   9f60 <mergefps>
    b0dc:	mov    rax,QWORD PTR [rsp+0xd8]
    b0e4:	xor    rax,QWORD PTR fs:0x28
    b0ed:	jne    b12a <merge+0x4da>
    b0ef:	add    rsp,0xe8
    b0f6:	pop    rbx
    b0f7:	pop    rbp
    b0f8:	pop    r12
    b0fa:	pop    r13
    b0fc:	pop    r14
    b0fe:	pop    r15
    b100:	ret    
    b101:	mov    rdx,rax
    b104:	lea    rsi,[rip+0xbafd]        # 16c08 <short_options+0x1798>
    b10b:	xor    edi,edi
    b10d:	shl    rdx,0x4
    b111:	mov    rbp,QWORD PTR [r14+rdx*1]
    b115:	mov    edx,0x5
    b11a:	call   3960 <dcgettext@plt>
    b11f:	mov    rdi,rax
    b122:	mov    rsi,rbp
    b125:	call   7440 <sort_die>
    b12a:	call   3990 <__stack_chk_fail@plt>
    b12f:	nop

000000000000b130 <queue_check_insert.part.0>:
    b130:	mov    rdx,QWORD PTR [rsi+0x8]
    b134:	mov    rax,QWORD PTR [rsi+0x18]
    b138:	mov    rcx,QWORD PTR [rsi+0x10]
    b13c:	cmp    QWORD PTR [rsi],rcx
    b13f:	je     b160 <queue_check_insert.part.0+0x30>
    b141:	cmp    rdx,rax
    b144:	je     b150 <queue_check_insert.part.0+0x20>
    b146:	jmp    7a00 <queue_insert>
    b14b:	nop    DWORD PTR [rax+rax*1+0x0]
    b150:	cmp    QWORD PTR [rsi+0x30],0x0
    b155:	je     b146 <queue_check_insert.part.0+0x16>
    b157:	ret    
    b158:	nop    DWORD PTR [rax+rax*1+0x0]
    b160:	cmp    rdx,rax
    b163:	je     b157 <queue_check_insert.part.0+0x27>
    b165:	cmp    QWORD PTR [rsi+0x28],0x0
    b16a:	jne    b157 <queue_check_insert.part.0+0x27>
    b16c:	jmp    7a00 <queue_insert>
    b171:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    b17c:	nop    DWORD PTR [rax+0x0]

000000000000b180 <sortlines>:
    b180:	push   r15
    b182:	mov    r15,r8
    b185:	mov    r8,rsi
    b188:	push   r14
    b18a:	shr    r8,1
    b18d:	push   r13
    b18f:	push   r12
    b191:	push   rbp
    b192:	mov    rbp,rcx
    b195:	push   rbx
    b196:	mov    rbx,rdi
    b199:	sub    rsp,0x98
    b1a0:	mov    r14,QWORD PTR [rcx+0x28]
    b1a4:	mov    r12,QWORD PTR [rcx+0x30]
    b1a8:	mov    rdi,QWORD PTR [rsp+0xd0]
    b1b0:	mov    QWORD PTR [rsp+0x20],rdx
    b1b5:	mov    QWORD PTR [rsp+0x8],r9
    b1ba:	mov    QWORD PTR [rsp+0x10],rdi
    b1bf:	mov    rax,QWORD PTR fs:0x28
    b1c8:	mov    QWORD PTR [rsp+0x88],rax
    b1d0:	xor    eax,eax
    b1d2:	mov    rax,QWORD PTR [rcx+0x40]
    b1d6:	mov    QWORD PTR [rsp+0x50],rbx
    b1db:	mov    QWORD PTR [rsp+0x58],r8
    b1e0:	mov    QWORD PTR [rsp+0x68],rax
    b1e5:	lea    rax,[r14+r12*1]
    b1e9:	mov    QWORD PTR [rsp+0x18],r8
    b1ee:	mov    QWORD PTR [rsp+0x60],rdx
    b1f3:	mov    QWORD PTR [rsp+0x70],r15
    b1f8:	mov    QWORD PTR [rsp+0x78],r9
    b1fd:	mov    QWORD PTR [rsp+0x80],rdi
    b205:	cmp    rax,0x1ffff
    b20b:	jbe    b21a <sortlines+0x9a>
    b20d:	mov    r13,rsi
    b210:	cmp    rsi,0x1
    b214:	ja     b830 <sortlines+0x6b0>
    b21a:	mov    rax,QWORD PTR [rsp+0x20]
    b21f:	mov    r8,rbx
    b222:	mov    r9,rbx
    b225:	shl    rax,0x5
    b229:	sub    r8,rax
    b22c:	mov    rax,r14
    b22f:	shl    rax,0x5
    b233:	mov    r13,rax
    b236:	sub    r9,rax
    b239:	neg    r13
    b23c:	cmp    r12,0x1
    b240:	jbe    b273 <sortlines+0xf3>
    b242:	mov    rax,r14
    b245:	mov    rdx,r8
    b248:	mov    rdi,r9
    b24b:	xor    ecx,ecx
    b24d:	shr    rax,1
    b250:	mov    rsi,r12
    b253:	mov    QWORD PTR [rsp+0x28],r8
    b258:	shl    rax,0x5
    b25c:	mov    QWORD PTR [rsp+0x18],r9
    b261:	sub    rdx,rax
    b264:	call   9c90 <sequential_sort>
    b269:	mov    r8,QWORD PTR [rsp+0x28]
    b26e:	mov    r9,QWORD PTR [rsp+0x18]
    b273:	cmp    r14,0x1
    b277:	jbe    b293 <sortlines+0x113>
    b279:	xor    ecx,ecx
    b27b:	mov    rdx,r8
    b27e:	mov    rsi,r14
    b281:	mov    rdi,rbx
    b284:	mov    QWORD PTR [rsp+0x18],r9
    b289:	call   9c90 <sequential_sort>
    b28e:	mov    r9,QWORD PTR [rsp+0x18]
    b293:	shl    r12,0x5
    b297:	mov    QWORD PTR [rbp+0x0],rbx
    b29b:	mov    rsi,rbp
    b29e:	mov    rdi,r15
    b2a1:	sub    r13,r12
    b2a4:	mov    QWORD PTR [rbp+0x8],r9
    b2a8:	add    rbx,r13
    b2ab:	mov    QWORD PTR [rbp+0x10],r9
    b2af:	mov    QWORD PTR [rbp+0x18],rbx
    b2b3:	call   7a00 <queue_insert>
    b2b8:	lea    rax,[r15+0x8]
    b2bc:	mov    QWORD PTR [rsp+0x18],rax
    b2c1:	lea    rax,[r15+0x30]
    b2c5:	mov    QWORD PTR [rsp+0x38],rax
    b2ca:	nop    WORD PTR [rax+rax*1+0x0]
    b2d0:	mov    rdi,QWORD PTR [rsp+0x18]
    b2d5:	call   3eb0 <pthread_mutex_lock@plt>
    b2da:	jmp    b2ef <sortlines+0x16f>
    b2dc:	nop    DWORD PTR [rax+0x0]
    b2e0:	mov    rsi,QWORD PTR [rsp+0x18]
    b2e5:	mov    rdi,QWORD PTR [rsp+0x38]
    b2ea:	call   3920 <pthread_cond_wait@plt>
    b2ef:	mov    rdi,QWORD PTR [r15]
    b2f2:	call   ecf0 <heap_remove_top>
    b2f7:	mov    rbp,rax
    b2fa:	test   rax,rax
    b2fd:	je     b2e0 <sortlines+0x160>
    b2ff:	mov    rdi,QWORD PTR [rsp+0x18]
    b304:	call   3be0 <pthread_mutex_unlock@plt>
    b309:	lea    rax,[rbp+0x58]
    b30d:	mov    rdi,rax
    b310:	mov    QWORD PTR [rsp+0x28],rax
    b315:	call   3eb0 <pthread_mutex_lock@plt>
    b31a:	mov    eax,DWORD PTR [rbp+0x50]
    b31d:	mov    BYTE PTR [rbp+0x54],0x0
    b321:	test   eax,eax
    b323:	je     b7f0 <sortlines+0x670>
    b329:	mov    rsi,QWORD PTR [rsp+0x20]
    b32e:	mov    r14,QWORD PTR [rbp+0x0]
    b332:	lea    ecx,[rax+rax*1+0x2]
    b336:	mov    r12,QWORD PTR [rbp+0x8]
    b33a:	mov    r8,QWORD PTR [rbp+0x10]
    b33e:	shr    rsi,cl
    b341:	mov    rbx,r14
    b344:	add    rsi,0x1
    b348:	cmp    eax,0x1
    b34b:	jbe    b5f0 <sortlines+0x470>
    b351:	mov    r10,QWORD PTR [rbp+0x20]
    b355:	mov    rcx,r12
    b358:	mov    rdx,r14
    b35b:	mov    r9,r14
    b35e:	mov    r13,QWORD PTR [r10]
    b361:	cmp    r14,r8
    b364:	jne    b3a0 <sortlines+0x220>
    b366:	jmp    b890 <sortlines+0x710>
    b36b:	nop    DWORD PTR [rax+rax*1+0x0]
    b370:	mov    rax,QWORD PTR [rbp+0x8]
    b374:	mov    rdx,QWORD PTR [rbp+0x0]
    b378:	mov    r8,QWORD PTR [rbp+0x10]
    b37c:	movdqu xmm2,XMMWORD PTR [rax-0x20]
    b381:	lea    rcx,[rax-0x20]
    b385:	mov    QWORD PTR [rbp+0x8],rcx
    b389:	movups XMMWORD PTR [r13+0x0],xmm2
    b38e:	movdqu xmm3,XMMWORD PTR [rax-0x10]
    b393:	movups XMMWORD PTR [r13+0x10],xmm3
    b398:	cmp    r8,rdx
    b39b:	je     b403 <sortlines+0x283>
    b39d:	mov    rsi,rbx
    b3a0:	cmp    QWORD PTR [rbp+0x18],rcx
    b3a4:	je     b5c0 <sortlines+0x440>
    b3aa:	lea    rbx,[rsi-0x1]
    b3ae:	test   rsi,rsi
    b3b1:	je     b4a8 <sortlines+0x328>
    b3b7:	lea    rsi,[rcx-0x20]
    b3bb:	lea    rdi,[rdx-0x20]
    b3bf:	mov    QWORD PTR [rsp+0x30],r9
    b3c4:	sub    r13,0x20
    b3c8:	call   9bc0 <compare>
    b3cd:	mov    r9,QWORD PTR [rsp+0x30]
    b3d2:	test   eax,eax
    b3d4:	jg     b370 <sortlines+0x1f0>
    b3d6:	mov    rax,QWORD PTR [rbp+0x0]
    b3da:	mov    r8,QWORD PTR [rbp+0x10]
    b3de:	mov    rcx,QWORD PTR [rbp+0x8]
    b3e2:	movdqu xmm0,XMMWORD PTR [rax-0x20]
    b3e7:	lea    rdx,[rax-0x20]
    b3eb:	mov    QWORD PTR [rbp+0x0],rdx
    b3ef:	movups XMMWORD PTR [r13+0x0],xmm0
    b3f4:	movdqu xmm1,XMMWORD PTR [rax-0x10]
    b3f9:	movups XMMWORD PTR [r13+0x10],xmm1
    b3fe:	cmp    r8,rdx
    b401:	jne    b39d <sortlines+0x21d>
    b403:	mov    r11,rbx
    b406:	mov    rax,r12
    b409:	mov    rbx,r9
    b40c:	mov    r10,QWORD PTR [rbp+0x20]
    b410:	sub    rbx,rdx
    b413:	sub    rax,rcx
    b416:	movzx  r9d,BYTE PTR [rbp+0x54]
    b41b:	mov    rsi,r11
    b41e:	sar    rbx,0x5
    b422:	sar    rax,0x5
    b426:	mov    r11,QWORD PTR [rbp+0x30]
    b42a:	mov    rdi,QWORD PTR [rbp+0x28]
    b42e:	cmp    r11,rax
    b431:	je     b530 <sortlines+0x3b0>
    b437:	cmp    rdi,rbx
    b43a:	jne    b530 <sortlines+0x3b0>
    b440:	mov    rbx,QWORD PTR [rbp+0x18]
    b444:	cmp    rbx,rcx
    b447:	je     b530 <sortlines+0x3b0>
    b44d:	lea    r8,[rsi-0x1]
    b451:	test   rsi,rsi
    b454:	je     b530 <sortlines+0x3b0>
    b45a:	sub    rcx,0x20
    b45e:	jmp    b472 <sortlines+0x2f2>
    b460:	sub    r8,0x1
    b464:	sub    rcx,0x20
    b468:	cmp    r8,0xffffffffffffffff
    b46c:	je     b880 <sortlines+0x700>
    b472:	movdqu xmm6,XMMWORD PTR [rcx]
    b476:	sub    r13,0x20
    b47a:	mov    QWORD PTR [rbp+0x8],rcx
    b47e:	mov    rax,rcx
    b481:	movups XMMWORD PTR [r13+0x0],xmm6
    b486:	movdqu xmm7,XMMWORD PTR [rcx+0x10]
    b48b:	movups XMMWORD PTR [r13+0x10],xmm7
    b490:	cmp    rcx,rbx
    b493:	jne    b460 <sortlines+0x2e0>
    b495:	mov    rax,r12
    b498:	sub    rax,rcx
    b49b:	sar    rax,0x5
    b49f:	jmp    b530 <sortlines+0x3b0>
    b4a4:	nop    DWORD PTR [rax+0x0]
    b4a8:	mov    rbx,r9
    b4ab:	mov    rax,r12
    b4ae:	mov    r10,QWORD PTR [rbp+0x20]
    b4b2:	movzx  r9d,BYTE PTR [rbp+0x54]
    b4b7:	sub    rbx,rdx
    b4ba:	sub    rax,rcx
    b4bd:	mov    rdx,QWORD PTR [rbp+0x0]
    b4c1:	mov    rsi,0xffffffffffffffff
    b4c8:	sar    rbx,0x5
    b4cc:	sar    rax,0x5
    b4d0:	mov    r11,QWORD PTR [rbp+0x30]
    b4d4:	mov    rdi,QWORD PTR [rbp+0x28]
    b4d8:	cmp    r11,rax
    b4db:	jne    b437 <sortlines+0x2b7>
    b4e1:	cmp    r8,rdx
    b4e4:	je     b530 <sortlines+0x3b0>
    b4e6:	lea    rcx,[rsi-0x1]
    b4ea:	test   rsi,rsi
    b4ed:	je     b530 <sortlines+0x3b0>
    b4ef:	lea    rsi,[rdx-0x20]
    b4f3:	jmp    b506 <sortlines+0x386>
    b4f5:	nop    DWORD PTR [rax]
    b4f8:	sub    rcx,0x1
    b4fc:	sub    rsi,0x20
    b500:	cmp    rcx,0xffffffffffffffff
    b504:	je     b530 <sortlines+0x3b0>
    b506:	movdqu xmm4,XMMWORD PTR [rsi]
    b50a:	sub    r13,0x20
    b50e:	mov    QWORD PTR [rbp+0x0],rsi
    b512:	mov    rdx,rsi
    b515:	movups XMMWORD PTR [r13+0x0],xmm4
    b51a:	movdqu xmm5,XMMWORD PTR [rsi+0x10]
    b51f:	movups XMMWORD PTR [r13+0x10],xmm5
    b524:	cmp    rsi,r8
    b527:	jne    b4f8 <sortlines+0x378>
    b529:	mov    rdx,r8
    b52c:	nop    DWORD PTR [rax+0x0]
    b530:	mov    QWORD PTR [r10],r13
    b533:	sub    r14,rdx
    b536:	sub    r11,rax
    b539:	mov    rdx,r14
    b53c:	mov    QWORD PTR [rbp+0x30],r11
    b540:	sar    rdx,0x5
    b544:	sub    rdi,rdx
    b547:	mov    QWORD PTR [rbp+0x28],rdi
    b54b:	test   r9b,r9b
    b54e:	jne    b55b <sortlines+0x3db>
    b550:	mov    rsi,rbp
    b553:	mov    rdi,r15
    b556:	call   b130 <queue_check_insert.part.0>
    b55b:	cmp    DWORD PTR [rbp+0x50],0x1
    b55f:	ja     b590 <sortlines+0x410>
    b561:	mov    rax,QWORD PTR [rbp+0x30]
    b565:	add    rax,QWORD PTR [rbp+0x28]
    b569:	je     b580 <sortlines+0x400>
    b56b:	mov    rdi,QWORD PTR [rsp+0x28]
    b570:	call   3be0 <pthread_mutex_unlock@plt>
    b575:	jmp    b2d0 <sortlines+0x150>
    b57a:	nop    WORD PTR [rax+rax*1+0x0]
    b580:	mov    rsi,QWORD PTR [rbp+0x38]
    b584:	mov    rdi,r15
    b587:	call   7a00 <queue_insert>
    b58c:	jmp    b56b <sortlines+0x3eb>
    b58e:	xchg   ax,ax
    b590:	mov    rax,QWORD PTR [rbp+0x38]
    b594:	lea    rdi,[rax+0x58]
    b598:	call   3eb0 <pthread_mutex_lock@plt>
    b59d:	mov    rsi,QWORD PTR [rbp+0x38]
    b5a1:	cmp    BYTE PTR [rsi+0x54],0x0
    b5a5:	jne    b5b3 <sortlines+0x433>
    b5a7:	mov    rdi,r15
    b5aa:	call   b130 <queue_check_insert.part.0>
    b5af:	mov    rsi,QWORD PTR [rbp+0x38]
    b5b3:	lea    rdi,[rsi+0x58]
    b5b7:	call   3be0 <pthread_mutex_unlock@plt>
    b5bc:	jmp    b56b <sortlines+0x3eb>
    b5be:	xchg   ax,ax
    b5c0:	mov    rbx,r9
    b5c3:	mov    rax,r12
    b5c6:	mov    r10,QWORD PTR [rbp+0x20]
    b5ca:	movzx  r9d,BYTE PTR [rbp+0x54]
    b5cf:	sub    rbx,rdx
    b5d2:	sub    rax,rcx
    b5d5:	mov    rdx,QWORD PTR [rbp+0x0]
    b5d9:	sar    rbx,0x5
    b5dd:	sar    rax,0x5
    b5e1:	jmp    b4d0 <sortlines+0x350>
    b5e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b5f0:	mov    rcx,r12
    b5f3:	xor    eax,eax
    b5f5:	xor    edx,edx
    b5f7:	cmp    r14,r8
    b5fa:	jne    b634 <sortlines+0x4b4>
    b5fc:	jmp    b69c <sortlines+0x51c>
    b601:	nop    DWORD PTR [rax+0x0]
    b608:	mov    rax,QWORD PTR [rbp+0x8]
    b60c:	mov    rdx,QWORD PTR [rsp+0x10]
    b611:	mov    rsi,QWORD PTR [rsp+0x8]
    b616:	lea    rdi,[rax-0x20]
    b61a:	mov    QWORD PTR [rbp+0x8],rdi
    b61e:	call   9ef0 <write_unique>
    b623:	mov    rbx,QWORD PTR [rbp+0x0]
    b627:	mov    rcx,QWORD PTR [rbp+0x8]
    b62b:	cmp    rbx,QWORD PTR [rbp+0x10]
    b62f:	je     b685 <sortlines+0x505>
    b631:	mov    rsi,r13
    b634:	cmp    QWORD PTR [rbp+0x18],rcx
    b638:	je     b6d7 <sortlines+0x557>
    b63e:	lea    r13,[rsi-0x1]
    b642:	test   rsi,rsi
    b645:	je     b6d0 <sortlines+0x550>
    b64b:	lea    rsi,[rcx-0x20]
    b64f:	lea    rdi,[rbx-0x20]
    b653:	call   9bc0 <compare>
    b658:	test   eax,eax
    b65a:	jg     b608 <sortlines+0x488>
    b65c:	mov    rax,QWORD PTR [rbp+0x0]
    b660:	mov    rdx,QWORD PTR [rsp+0x10]
    b665:	mov    rsi,QWORD PTR [rsp+0x8]
    b66a:	lea    rdi,[rax-0x20]
    b66e:	mov    QWORD PTR [rbp+0x0],rdi
    b672:	call   9ef0 <write_unique>
    b677:	mov    rbx,QWORD PTR [rbp+0x0]
    b67b:	mov    rcx,QWORD PTR [rbp+0x8]
    b67f:	cmp    rbx,QWORD PTR [rbp+0x10]
    b683:	jne    b631 <sortlines+0x4b1>
    b685:	mov    rdx,r14
    b688:	mov    rax,r12
    b68b:	mov    rsi,r13
    b68e:	sub    rdx,rbx
    b691:	sub    rax,rcx
    b694:	sar    rdx,0x5
    b698:	sar    rax,0x5
    b69c:	mov    rdi,QWORD PTR [rbp+0x28]
    b6a0:	cmp    QWORD PTR [rbp+0x30],rax
    b6a4:	je     b8e8 <sortlines+0x768>
    b6aa:	cmp    rdx,rdi
    b6ad:	je     b777 <sortlines+0x5f7>
    b6b3:	mov    rax,r12
    b6b6:	sub    rax,QWORD PTR [rbp+0x8]
    b6ba:	mov    r11,QWORD PTR [rbp+0x30]
    b6be:	mov    rdx,rbx
    b6c1:	movzx  r9d,BYTE PTR [rbp+0x54]
    b6c6:	sar    rax,0x5
    b6ca:	jmp    b533 <sortlines+0x3b3>
    b6cf:	nop
    b6d0:	mov    rsi,0xffffffffffffffff
    b6d7:	mov    rdx,r12
    b6da:	mov    rax,QWORD PTR [rbp+0x30]
    b6de:	sub    rdx,rcx
    b6e1:	sar    rdx,0x5
    b6e5:	cmp    rdx,rax
    b6e8:	jne    b760 <sortlines+0x5e0>
    b6ea:	mov    rcx,rbx
    b6ed:	cmp    rbx,QWORD PTR [rbp+0x10]
    b6f1:	je     b900 <sortlines+0x780>
    b6f7:	lea    r13,[rsi-0x1]
    b6fb:	test   rsi,rsi
    b6fe:	jne    b716 <sortlines+0x596>
    b700:	jmp    b900 <sortlines+0x780>
    b705:	nop    DWORD PTR [rax]
    b708:	sub    r13,0x1
    b70c:	cmp    r13,0xffffffffffffffff
    b710:	je     b860 <sortlines+0x6e0>
    b716:	lea    rdi,[rcx-0x20]
    b71a:	mov    rdx,QWORD PTR [rsp+0x10]
    b71f:	mov    rsi,QWORD PTR [rsp+0x8]
    b724:	mov    QWORD PTR [rbp+0x0],rdi
    b728:	call   9ef0 <write_unique>
    b72d:	mov    rcx,QWORD PTR [rbp+0x0]
    b731:	mov    rdx,QWORD PTR [rbp+0x10]
    b735:	cmp    rcx,rdx
    b738:	jne    b708 <sortlines+0x588>
    b73a:	mov    rax,r12
    b73d:	sub    rax,QWORD PTR [rbp+0x8]
    b741:	mov    rdi,QWORD PTR [rbp+0x28]
    b745:	mov    r11,QWORD PTR [rbp+0x30]
    b749:	movzx  r9d,BYTE PTR [rbp+0x54]
    b74e:	sar    rax,0x5
    b752:	jmp    b533 <sortlines+0x3b3>
    b757:	nop    WORD PTR [rax+rax*1+0x0]
    b760:	mov    rdx,r14
    b763:	mov    rdi,QWORD PTR [rbp+0x28]
    b767:	sub    rdx,rbx
    b76a:	sar    rdx,0x5
    b76e:	cmp    rdx,rdi
    b771:	jne    b6b3 <sortlines+0x533>
    b777:	cmp    QWORD PTR [rbp+0x18],rcx
    b77b:	je     b6b3 <sortlines+0x533>
    b781:	lea    r13,[rsi-0x1]
    b785:	test   rsi,rsi
    b788:	je     b6b3 <sortlines+0x533>
    b78e:	mov    rbx,rbp
    b791:	mov    rbp,r13
    b794:	mov    r13,QWORD PTR [rsp+0x10]
    b799:	jmp    b7aa <sortlines+0x62a>
    b79b:	nop    DWORD PTR [rax+rax*1+0x0]
    b7a0:	sub    rbp,0x1
    b7a4:	cmp    rbp,0xffffffffffffffff
    b7a8:	je     b7c9 <sortlines+0x649>
    b7aa:	lea    rdi,[rcx-0x20]
    b7ae:	mov    rsi,QWORD PTR [rsp+0x8]
    b7b3:	mov    rdx,r13
    b7b6:	mov    QWORD PTR [rbx+0x8],rdi
    b7ba:	call   9ef0 <write_unique>
    b7bf:	mov    rcx,QWORD PTR [rbx+0x8]
    b7c3:	cmp    rcx,QWORD PTR [rbx+0x18]
    b7c7:	jne    b7a0 <sortlines+0x620>
    b7c9:	mov    rax,r12
    b7cc:	mov    rdx,QWORD PTR [rbx]
    b7cf:	mov    rdi,QWORD PTR [rbx+0x28]
    b7d3:	mov    rbp,rbx
    b7d6:	sub    rax,rcx
    b7d9:	mov    r11,QWORD PTR [rbx+0x30]
    b7dd:	movzx  r9d,BYTE PTR [rbx+0x54]
    b7e2:	sar    rax,0x5
    b7e6:	jmp    b533 <sortlines+0x3b3>
    b7eb:	nop    DWORD PTR [rax+rax*1+0x0]
    b7f0:	mov    rdi,QWORD PTR [rsp+0x28]
    b7f5:	call   3be0 <pthread_mutex_unlock@plt>
    b7fa:	mov    rsi,rbp
    b7fd:	mov    rdi,r15
    b800:	call   7a00 <queue_insert>
    b805:	mov    rax,QWORD PTR [rsp+0x88]
    b80d:	xor    rax,QWORD PTR fs:0x28
    b816:	jne    b914 <sortlines+0x794>
    b81c:	add    rsp,0x98
    b823:	pop    rbx
    b824:	pop    rbp
    b825:	pop    r12
    b827:	pop    r13
    b829:	pop    r14
    b82b:	pop    r15
    b82d:	ret    
    b82e:	xchg   ax,ax
    b830:	xor    esi,esi
    b832:	lea    rcx,[rsp+0x50]
    b837:	lea    rdi,[rsp+0x48]
    b83c:	lea    rdx,[rip+0xdd]        # b920 <sortlines_thread>
    b843:	call   37e0 <pthread_create@plt>
    b848:	mov    r8,QWORD PTR [rsp+0x18]
    b84d:	test   eax,eax
    b84f:	je     b8a0 <sortlines+0x720>
    b851:	mov    r14,QWORD PTR [rbp+0x28]
    b855:	mov    r12,QWORD PTR [rbp+0x30]
    b859:	jmp    b21a <sortlines+0x9a>
    b85e:	xchg   ax,ax
    b860:	mov    rax,r12
    b863:	sub    rax,QWORD PTR [rbp+0x8]
    b867:	mov    rdi,QWORD PTR [rbp+0x28]
    b86b:	mov    rdx,rcx
    b86e:	mov    r11,QWORD PTR [rbp+0x30]
    b872:	movzx  r9d,BYTE PTR [rbp+0x54]
    b877:	sar    rax,0x5
    b87b:	jmp    b533 <sortlines+0x3b3>
    b880:	sub    r12,rax
    b883:	mov    rax,r12
    b886:	sar    rax,0x5
    b88a:	jmp    b530 <sortlines+0x3b0>
    b88f:	nop
    b890:	xor    r9d,r9d
    b893:	xor    eax,eax
    b895:	xor    ebx,ebx
    b897:	jmp    b426 <sortlines+0x2a6>
    b89c:	nop    DWORD PTR [rax+0x0]
    b8a0:	mov    rax,QWORD PTR [rbp+0x28]
    b8a4:	sub    rsp,0x8
    b8a8:	mov    rcx,QWORD PTR [rbp+0x48]
    b8ac:	mov    rsi,r13
    b8af:	push   QWORD PTR [rsp+0x18]
    b8b3:	mov    r9,QWORD PTR [rsp+0x18]
    b8b8:	sub    rsi,r8
    b8bb:	mov    r8,r15
    b8be:	shl    rax,0x5
    b8c2:	mov    rdx,QWORD PTR [rsp+0x30]
    b8c7:	sub    rbx,rax
    b8ca:	mov    rdi,rbx
    b8cd:	call   b180 <sortlines>
    b8d2:	mov    rdi,QWORD PTR [rsp+0x58]
    b8d7:	xor    esi,esi
    b8d9:	call   3d70 <pthread_join@plt>
    b8de:	pop    rax
    b8df:	pop    rdx
    b8e0:	jmp    b805 <sortlines+0x685>
    b8e5:	nop    DWORD PTR [rax]
    b8e8:	movzx  r9d,BYTE PTR [rbp+0x54]
    b8ed:	mov    rdx,rbx
    b8f0:	mov    r11,rax
    b8f3:	jmp    b533 <sortlines+0x3b3>
    b8f8:	nop    DWORD PTR [rax+rax*1+0x0]
    b900:	mov    rdi,QWORD PTR [rbp+0x28]
    b904:	movzx  r9d,BYTE PTR [rbp+0x54]
    b909:	mov    r11,rax
    b90c:	mov    rdx,rbx
    b90f:	jmp    b533 <sortlines+0x3b3>
    b914:	call   3990 <__stack_chk_fail@plt>
    b919:	nop    DWORD PTR [rax+0x0]

000000000000b920 <sortlines_thread>:
    b920:	endbr64 
    b924:	sub    rsp,0x10
    b928:	mov    rcx,QWORD PTR [rdi+0x18]
    b92c:	mov    rdx,QWORD PTR [rdi+0x10]
    b930:	mov    rsi,QWORD PTR [rdi+0x8]
    b934:	mov    r9,QWORD PTR [rdi+0x28]
    b938:	push   QWORD PTR [rdi+0x30]
    b93b:	mov    r8,QWORD PTR [rdi+0x20]
    b93f:	mov    rdi,QWORD PTR [rdi]
    b942:	call   b180 <sortlines>
    b947:	xor    eax,eax
    b949:	add    rsp,0x18
    b94d:	ret    
    b94e:	xchg   ax,ax

000000000000b950 <usage>:
    b950:	endbr64 
    b954:	push   r13
    b956:	mov    edx,0x5
    b95b:	push   r12
    b95d:	push   rbp
    b95e:	mov    ebp,edi
    b960:	push   rbx
    b961:	sub    rsp,0x88
    b968:	mov    r12,QWORD PTR [rip+0x12f39]        # 1e8a8 <program_name>
    b96f:	mov    rax,QWORD PTR fs:0x28
    b978:	mov    QWORD PTR [rsp+0x78],rax
    b97d:	xor    eax,eax
    b97f:	test   edi,edi
    b981:	je     b9b1 <usage+0x61>
    b983:	lea    rsi,[rip+0x9c9e]        # 15628 <short_options+0x1b8>
    b98a:	xor    edi,edi
    b98c:	call   3960 <dcgettext@plt>
    b991:	mov    rdi,QWORD PTR [rip+0x12868]        # 1e200 <stderr@@GLIBC_2.2.5>
    b998:	mov    rcx,r12
    b99b:	mov    esi,0x1
    b9a0:	mov    rdx,rax
    b9a3:	xor    eax,eax
    b9a5:	call   3e00 <__fprintf_chk@plt>
    b9aa:	mov    edi,ebp
    b9ac:	call   3de0 <exit@plt>
    b9b1:	xor    edi,edi
    b9b3:	lea    rsi,[rip+0x9c96]        # 15650 <short_options+0x1e0>
    b9ba:	lea    rbx,[rip+0xb2ff]        # 16cc0 <short_options+0x1850>
    b9c1:	call   3960 <dcgettext@plt>
    b9c6:	mov    rcx,r12
    b9c9:	mov    rdx,r12
    b9cc:	mov    edi,0x1
    b9d1:	mov    rsi,rax
    b9d4:	xor    eax,eax
    b9d6:	call   3ca0 <__printf_chk@plt>
    b9db:	mov    r12,QWORD PTR [rip+0x127e6]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    b9e2:	xor    edi,edi
    b9e4:	mov    edx,0x5
    b9e9:	lea    rsi,[rip+0x9ca8]        # 15698 <short_options+0x228>
    b9f0:	call   3960 <dcgettext@plt>
    b9f5:	mov    rsi,r12
    b9f8:	mov    rdi,rax
    b9fb:	call   3af0 <fputs_unlocked@plt>
    ba00:	mov    r12,QWORD PTR [rip+0x127c1]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    ba07:	xor    edi,edi
    ba09:	mov    edx,0x5
    ba0e:	lea    rsi,[rip+0x9cc3]        # 156d8 <short_options+0x268>
    ba15:	call   3960 <dcgettext@plt>
    ba1a:	mov    rsi,r12
    ba1d:	mov    rdi,rax
    ba20:	call   3af0 <fputs_unlocked@plt>
    ba25:	mov    r12,QWORD PTR [rip+0x1279c]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    ba2c:	xor    edi,edi
    ba2e:	mov    edx,0x5
    ba33:	lea    rsi,[rip+0x9cd6]        # 15710 <short_options+0x2a0>
    ba3a:	call   3960 <dcgettext@plt>
    ba3f:	mov    rsi,r12
    ba42:	mov    rdi,rax
    ba45:	call   3af0 <fputs_unlocked@plt>
    ba4a:	mov    r12,QWORD PTR [rip+0x12777]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    ba51:	xor    edi,edi
    ba53:	mov    edx,0x5
    ba58:	lea    rsi,[rip+0xb1f6]        # 16c55 <short_options+0x17e5>
    ba5f:	call   3960 <dcgettext@plt>
    ba64:	mov    rsi,r12
    ba67:	mov    rdi,rax
    ba6a:	call   3af0 <fputs_unlocked@plt>
    ba6f:	mov    r12,QWORD PTR [rip+0x12752]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    ba76:	xor    edi,edi
    ba78:	mov    edx,0x5
    ba7d:	lea    rsi,[rip+0x9cdc]        # 15760 <short_options+0x2f0>
    ba84:	call   3960 <dcgettext@plt>
    ba89:	mov    rsi,r12
    ba8c:	mov    rdi,rax
    ba8f:	call   3af0 <fputs_unlocked@plt>
    ba94:	mov    r12,QWORD PTR [rip+0x1272d]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    ba9b:	xor    edi,edi
    ba9d:	mov    edx,0x5
    baa2:	lea    rsi,[rip+0x9d87]        # 15830 <short_options+0x3c0>
    baa9:	call   3960 <dcgettext@plt>
    baae:	mov    rsi,r12
    bab1:	mov    rdi,rax
    bab4:	call   3af0 <fputs_unlocked@plt>
    bab9:	mov    r12,QWORD PTR [rip+0x12708]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bac0:	xor    edi,edi
    bac2:	mov    edx,0x5
    bac7:	lea    rsi,[rip+0x9e3a]        # 15908 <short_options+0x498>
    bace:	call   3960 <dcgettext@plt>
    bad3:	mov    rsi,r12
    bad6:	mov    rdi,rax
    bad9:	call   3af0 <fputs_unlocked@plt>
    bade:	mov    r12,QWORD PTR [rip+0x126e3]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bae5:	xor    edi,edi
    bae7:	mov    edx,0x5
    baec:	lea    rsi,[rip+0x9e65]        # 15958 <short_options+0x4e8>
    baf3:	call   3960 <dcgettext@plt>
    baf8:	mov    rsi,r12
    bafb:	mov    rdi,rax
    bafe:	call   3af0 <fputs_unlocked@plt>
    bb03:	mov    r12,QWORD PTR [rip+0x126be]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bb0a:	xor    edi,edi
    bb0c:	mov    edx,0x5
    bb11:	lea    rsi,[rip+0x9fa0]        # 15ab8 <short_options+0x648>
    bb18:	call   3960 <dcgettext@plt>
    bb1d:	mov    rsi,r12
    bb20:	mov    rdi,rax
    bb23:	call   3af0 <fputs_unlocked@plt>
    bb28:	mov    r12,QWORD PTR [rip+0x12699]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bb2f:	mov    edx,0x5
    bb34:	xor    edi,edi
    bb36:	lea    rsi,[rip+0xb12c]        # 16c69 <short_options+0x17f9>
    bb3d:	call   3960 <dcgettext@plt>
    bb42:	mov    rsi,r12
    bb45:	mov    rdi,rax
    bb48:	call   3af0 <fputs_unlocked@plt>
    bb4d:	mov    r12,QWORD PTR [rip+0x12674]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bb54:	xor    edi,edi
    bb56:	mov    edx,0x5
    bb5b:	lea    rsi,[rip+0xa06e]        # 15bd0 <short_options+0x760>
    bb62:	call   3960 <dcgettext@plt>
    bb67:	mov    rsi,r12
    bb6a:	mov    rdi,rax
    bb6d:	call   3af0 <fputs_unlocked@plt>
    bb72:	mov    r12,QWORD PTR [rip+0x1264f]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bb79:	xor    edi,edi
    bb7b:	mov    edx,0x5
    bb80:	lea    rsi,[rip+0xa0c1]        # 15c48 <short_options+0x7d8>
    bb87:	call   3960 <dcgettext@plt>
    bb8c:	mov    rsi,r12
    bb8f:	mov    rdi,rax
    bb92:	call   3af0 <fputs_unlocked@plt>
    bb97:	mov    r12,QWORD PTR [rip+0x1262a]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bb9e:	xor    edi,edi
    bba0:	mov    edx,0x5
    bba5:	lea    rsi,[rip+0xa1b4]        # 15d60 <short_options+0x8f0>
    bbac:	call   3960 <dcgettext@plt>
    bbb1:	mov    rsi,r12
    bbb4:	mov    rdi,rax
    bbb7:	call   3af0 <fputs_unlocked@plt>
    bbbc:	mov    r12,QWORD PTR [rip+0x12605]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bbc3:	xor    edi,edi
    bbc5:	mov    edx,0x5
    bbca:	lea    rsi,[rip+0xa2ef]        # 15ec0 <short_options+0xa50>
    bbd1:	call   3960 <dcgettext@plt>
    bbd6:	mov    rsi,r12
    bbd9:	mov    rdi,rax
    bbdc:	call   3af0 <fputs_unlocked@plt>
    bbe1:	mov    r12,QWORD PTR [rip+0x125e0]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bbe8:	xor    edi,edi
    bbea:	mov    edx,0x5
    bbef:	lea    rsi,[rip+0xa35a]        # 15f50 <short_options+0xae0>
    bbf6:	call   3960 <dcgettext@plt>
    bbfb:	mov    rsi,r12
    bbfe:	mov    rdi,rax
    bc01:	call   3af0 <fputs_unlocked@plt>
    bc06:	xor    edi,edi
    bc08:	mov    edx,0x5
    bc0d:	lea    rsi,[rip+0xa414]        # 16028 <short_options+0xbb8>
    bc14:	call   3960 <dcgettext@plt>
    bc19:	lea    rdx,[rip+0xb05a]        # 16c7a <short_options+0x180a>
    bc20:	mov    edi,0x1
    bc25:	mov    rsi,rax
    bc28:	xor    eax,eax
    bc2a:	call   3ca0 <__printf_chk@plt>
    bc2f:	mov    r12,QWORD PTR [rip+0x12592]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bc36:	xor    edi,edi
    bc38:	mov    edx,0x5
    bc3d:	lea    rsi,[rip+0xa5ac]        # 161f0 <short_options+0xd80>
    bc44:	call   3960 <dcgettext@plt>
    bc49:	mov    rsi,r12
    bc4c:	mov    rdi,rax
    bc4f:	call   3af0 <fputs_unlocked@plt>
    bc54:	mov    r12,QWORD PTR [rip+0x1256d]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bc5b:	xor    edi,edi
    bc5d:	mov    edx,0x5
    bc62:	lea    rsi,[rip+0xa5c7]        # 16230 <short_options+0xdc0>
    bc69:	call   3960 <dcgettext@plt>
    bc6e:	mov    rsi,r12
    bc71:	mov    rdi,rax
    bc74:	call   3af0 <fputs_unlocked@plt>
    bc79:	mov    r12,QWORD PTR [rip+0x12548]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bc80:	xor    edi,edi
    bc82:	mov    edx,0x5
    bc87:	lea    rsi,[rip+0xa5d2]        # 16260 <short_options+0xdf0>
    bc8e:	call   3960 <dcgettext@plt>
    bc93:	mov    rsi,r12
    bc96:	mov    rdi,rax
    bc99:	call   3af0 <fputs_unlocked@plt>
    bc9e:	mov    r12,QWORD PTR [rip+0x12523]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bca5:	xor    edi,edi
    bca7:	mov    edx,0x5
    bcac:	lea    rsi,[rip+0xa5ed]        # 162a0 <short_options+0xe30>
    bcb3:	call   3960 <dcgettext@plt>
    bcb8:	mov    rsi,r12
    bcbb:	mov    rdi,rax
    bcbe:	call   3af0 <fputs_unlocked@plt>
    bcc3:	mov    r12,QWORD PTR [rip+0x124fe]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bcca:	mov    edx,0x5
    bccf:	xor    edi,edi
    bcd1:	lea    rsi,[rip+0xa828]        # 16500 <short_options+0x1090>
    bcd8:	call   3960 <dcgettext@plt>
    bcdd:	mov    rsi,r12
    bce0:	mov    rdi,rax
    bce3:	call   3af0 <fputs_unlocked@plt>
    bce8:	lea    rax,[rip+0xaf90]        # 16c7f <short_options+0x180f>
    bcef:	mov    QWORD PTR [rsp+0x30],rbx
    bcf4:	lea    rbx,[rip+0xafcf]        # 16cca <short_options+0x185a>
    bcfb:	mov    QWORD PTR [rsp],rax
    bcff:	lea    rax,[rip+0xaf7b]        # 16c81 <short_options+0x1811>
    bd06:	mov    QWORD PTR [rsp+0x8],rax
    bd0b:	lea    rax,[rip+0xafe7]        # 16cf9 <short_options+0x1889>
    bd12:	mov    QWORD PTR [rsp+0x10],rax
    bd17:	lea    rax,[rip+0xaf73]        # 16c91 <short_options+0x1821>
    bd1e:	mov    QWORD PTR [rsp+0x18],rax
    bd23:	lea    rax,[rip+0xaf7d]        # 16ca7 <short_options+0x1837>
    bd2a:	mov    QWORD PTR [rsp+0x60],0x0
    bd33:	mov    QWORD PTR [rsp+0x68],0x0
    bd3c:	mov    QWORD PTR [rsp+0x20],rax
    bd41:	lea    rax,[rip+0xaf69]        # 16cb1 <short_options+0x1841>
    bd48:	mov    QWORD PTR [rsp+0x40],rbx
    bd4d:	lea    rbx,[rip+0xaf80]        # 16cd4 <short_options+0x1864>
    bd54:	mov    QWORD PTR [rsp+0x28],rax
    bd59:	mov    QWORD PTR [rsp+0x38],rax
    bd5e:	mov    QWORD PTR [rsp+0x48],rax
    bd63:	mov    QWORD PTR [rsp+0x50],rbx
    bd68:	lea    rbx,[rip+0xb037]        # 16da6 <short_options+0x1936>
    bd6f:	mov    QWORD PTR [rsp+0x58],rax
    bd74:	mov    rax,rsp
    bd77:	nop    WORD PTR [rax+rax*1+0x0]
    bd80:	mov    rdi,QWORD PTR [rax+0x10]
    bd84:	add    rax,0x10
    bd88:	test   rdi,rdi
    bd8b:	je     bda1 <usage+0x451>
    bd8d:	mov    ecx,0x5
    bd92:	mov    rsi,rbx
    bd95:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    bd97:	seta   dl
    bd9a:	sbb    dl,0x0
    bd9d:	test   dl,dl
    bd9f:	jne    bd80 <usage+0x430>
    bda1:	mov    r12,QWORD PTR [rax+0x8]
    bda5:	mov    edx,0x5
    bdaa:	lea    rsi,[rip+0xaf2d]        # 16cde <short_options+0x186e>
    bdb1:	xor    edi,edi
    bdb3:	test   r12,r12
    bdb6:	je     be7d <usage+0x52d>
    bdbc:	call   3960 <dcgettext@plt>
    bdc1:	lea    rcx,[rip+0xa828]        # 165f0 <short_options+0x1180>
    bdc8:	mov    edi,0x1
    bdcd:	lea    rdx,[rip+0xaf21]        # 16cf5 <short_options+0x1885>
    bdd4:	mov    rsi,rax
    bdd7:	xor    eax,eax
    bdd9:	call   3ca0 <__printf_chk@plt>
    bdde:	mov    edi,0x5
    bde3:	xor    esi,esi
    bde5:	call   3c90 <setlocale@plt>
    bdea:	mov    rdi,rax
    bded:	test   rax,rax
    bdf0:	je     be0b <usage+0x4bb>
    bdf2:	mov    edx,0x3
    bdf7:	lea    rsi,[rip+0xaf05]        # 16d03 <short_options+0x1893>
    bdfe:	call   3830 <strncmp@plt>
    be03:	test   eax,eax
    be05:	jne    bf12 <usage+0x5c2>
    be0b:	xor    edi,edi
    be0d:	mov    edx,0x5
    be12:	lea    rsi,[rip+0xaeee]        # 16d07 <short_options+0x1897>
    be19:	call   3960 <dcgettext@plt>
    be1e:	lea    rcx,[rip+0xaf81]        # 16da6 <short_options+0x1936>
    be25:	lea    rdx,[rip+0xa7c4]        # 165f0 <short_options+0x1180>
    be2c:	mov    edi,0x1
    be31:	mov    rsi,rax
    be34:	xor    eax,eax
    be36:	lea    r13,[rip+0xae5e]        # 16c9b <short_options+0x182b>
    be3d:	call   3ca0 <__printf_chk@plt>
    be42:	cmp    r12,rbx
    be45:	lea    rcx,[rip+0xae1c]        # 16c68 <short_options+0x17f8>
    be4c:	cmovne r13,rcx
    be50:	xor    edi,edi
    be52:	lea    rsi,[rip+0xa807]        # 16660 <short_options+0x11f0>
    be59:	mov    edx,0x5
    be5e:	call   3960 <dcgettext@plt>
    be63:	mov    rcx,r13
    be66:	mov    rdx,r12
    be69:	mov    edi,0x1
    be6e:	mov    rsi,rax
    be71:	xor    eax,eax
    be73:	call   3ca0 <__printf_chk@plt>
    be78:	jmp    b9aa <usage+0x5a>
    be7d:	call   3960 <dcgettext@plt>
    be82:	lea    rcx,[rip+0xa767]        # 165f0 <short_options+0x1180>
    be89:	mov    edi,0x1
    be8e:	lea    rdx,[rip+0xae60]        # 16cf5 <short_options+0x1885>
    be95:	mov    rsi,rax
    be98:	xor    eax,eax
    be9a:	call   3ca0 <__printf_chk@plt>
    be9f:	mov    edi,0x5
    bea4:	xor    esi,esi
    bea6:	call   3c90 <setlocale@plt>
    beab:	mov    rdi,rax
    beae:	test   rax,rax
    beb1:	je     bec8 <usage+0x578>
    beb3:	mov    edx,0x3
    beb8:	lea    rsi,[rip+0xae44]        # 16d03 <short_options+0x1893>
    bebf:	call   3830 <strncmp@plt>
    bec4:	test   eax,eax
    bec6:	jne    bf0b <usage+0x5bb>
    bec8:	mov    edx,0x5
    becd:	lea    rsi,[rip+0xae33]        # 16d07 <short_options+0x1897>
    bed4:	xor    edi,edi
    bed6:	call   3960 <dcgettext@plt>
    bedb:	lea    rcx,[rip+0xaec4]        # 16da6 <short_options+0x1936>
    bee2:	lea    rdx,[rip+0xa707]        # 165f0 <short_options+0x1180>
    bee9:	mov    edi,0x1
    beee:	mov    rsi,rax
    bef1:	xor    eax,eax
    bef3:	lea    r12,[rip+0xaeac]        # 16da6 <short_options+0x1936>
    befa:	call   3ca0 <__printf_chk@plt>
    beff:	lea    r13,[rip+0xad95]        # 16c9b <short_options+0x182b>
    bf06:	jmp    be50 <usage+0x500>
    bf0b:	lea    r12,[rip+0xae94]        # 16da6 <short_options+0x1936>
    bf12:	mov    r13,QWORD PTR [rip+0x122af]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    bf19:	xor    edi,edi
    bf1b:	mov    edx,0x5
    bf20:	lea    rsi,[rip+0xa6f1]        # 16618 <short_options+0x11a8>
    bf27:	call   3960 <dcgettext@plt>
    bf2c:	mov    rdi,rax
    bf2f:	mov    rsi,r13
    bf32:	call   3af0 <fputs_unlocked@plt>
    bf37:	jmp    be0b <usage+0x4bb>
    bf3c:	nop    DWORD PTR [rax+0x0]

000000000000bf40 <__argmatch_die>:
    bf40:	endbr64 
    bf44:	mov    edi,0x1
    bf49:	jmp    b950 <usage>
    bf4e:	xchg   ax,ax

000000000000bf50 <argmatch>:
    bf50:	endbr64 
    bf54:	push   r15
    bf56:	push   r14
    bf58:	mov    r14,rdi
    bf5b:	push   r13
    bf5d:	mov    r13,rcx
    bf60:	push   r12
    bf62:	push   rbp
    bf63:	mov    rbp,rdx
    bf66:	push   rbx
    bf67:	mov    rbx,rsi
    bf6a:	sub    rsp,0x28
    bf6e:	mov    QWORD PTR [rsp+0x8],rsi
    bf73:	mov    QWORD PTR [rsp+0x18],rdx
    bf78:	call   3980 <strlen@plt>
    bf7d:	mov    r15,QWORD PTR [rbx]
    bf80:	test   r15,r15
    bf83:	je     c056 <argmatch+0x106>
    bf89:	mov    BYTE PTR [rsp+0x17],0x0
    bf8e:	mov    r12,rax
    bf91:	xor    ebx,ebx
    bf93:	mov    QWORD PTR [rsp],0xffffffffffffffff
    bf9b:	jmp    bfe8 <argmatch+0x98>
    bf9d:	nop    DWORD PTR [rax]
    bfa0:	mov    rax,QWORD PTR [rsp+0x18]
    bfa5:	test   rax,rax
    bfa8:	je     c018 <argmatch+0xc8>
    bfaa:	mov    rdi,QWORD PTR [rsp]
    bfae:	mov    rdx,r13
    bfb1:	mov    rsi,rbp
    bfb4:	imul   rdi,r13
    bfb8:	add    rdi,rax
    bfbb:	call   3ad0 <memcmp@plt>
    bfc0:	mov    ecx,0x1
    bfc5:	test   eax,eax
    bfc7:	movzx  eax,BYTE PTR [rsp+0x17]
    bfcc:	cmovne eax,ecx
    bfcf:	mov    BYTE PTR [rsp+0x17],al
    bfd3:	mov    rax,QWORD PTR [rsp+0x8]
    bfd8:	add    rbx,0x1
    bfdc:	add    rbp,r13
    bfdf:	mov    r15,QWORD PTR [rax+rbx*8]
    bfe3:	test   r15,r15
    bfe6:	je     c020 <argmatch+0xd0>
    bfe8:	mov    rdx,r12
    bfeb:	mov    rsi,r14
    bfee:	mov    rdi,r15
    bff1:	call   3830 <strncmp@plt>
    bff6:	test   eax,eax
    bff8:	jne    bfd3 <argmatch+0x83>
    bffa:	mov    rdi,r15
    bffd:	call   3980 <strlen@plt>
    c002:	cmp    rax,r12
    c005:	je     c050 <argmatch+0x100>
    c007:	cmp    QWORD PTR [rsp],0xffffffffffffffff
    c00c:	jne    bfa0 <argmatch+0x50>
    c00e:	mov    QWORD PTR [rsp],rbx
    c012:	jmp    bfd3 <argmatch+0x83>
    c014:	nop    DWORD PTR [rax+0x0]
    c018:	mov    BYTE PTR [rsp+0x17],0x1
    c01d:	jmp    bfd3 <argmatch+0x83>
    c01f:	nop
    c020:	cmp    BYTE PTR [rsp+0x17],0x0
    c025:	mov    rax,0xfffffffffffffffe
    c02c:	cmove  rax,QWORD PTR [rsp]
    c031:	mov    QWORD PTR [rsp],rax
    c035:	mov    rax,QWORD PTR [rsp]
    c039:	add    rsp,0x28
    c03d:	pop    rbx
    c03e:	pop    rbp
    c03f:	pop    r12
    c041:	pop    r13
    c043:	pop    r14
    c045:	pop    r15
    c047:	ret    
    c048:	nop    DWORD PTR [rax+rax*1+0x0]
    c050:	mov    QWORD PTR [rsp],rbx
    c054:	jmp    c035 <argmatch+0xe5>
    c056:	mov    QWORD PTR [rsp],0xffffffffffffffff
    c05e:	jmp    c035 <argmatch+0xe5>

000000000000c060 <argmatch_exact>:
    c060:	endbr64 
    c064:	push   r12
    c066:	mov    r12,rdi
    c069:	push   rbp
    c06a:	push   rbx
    c06b:	mov    rdi,QWORD PTR [rsi]
    c06e:	test   rdi,rdi
    c071:	je     c0a8 <argmatch_exact+0x48>
    c073:	mov    rbp,rsi
    c076:	xor    ebx,ebx
    c078:	jmp    c08e <argmatch_exact+0x2e>
    c07a:	nop    WORD PTR [rax+rax*1+0x0]
    c080:	add    rbx,0x1
    c084:	mov    rdi,QWORD PTR [rbp+rbx*8+0x0]
    c089:	test   rdi,rdi
    c08c:	je     c0a8 <argmatch_exact+0x48>
    c08e:	mov    rsi,r12
    c091:	call   3b20 <strcmp@plt>
    c096:	test   eax,eax
    c098:	jne    c080 <argmatch_exact+0x20>
    c09a:	mov    rax,rbx
    c09d:	pop    rbx
    c09e:	pop    rbp
    c09f:	pop    r12
    c0a1:	ret    
    c0a2:	nop    WORD PTR [rax+rax*1+0x0]
    c0a8:	pop    rbx
    c0a9:	mov    rax,0xffffffffffffffff
    c0b0:	pop    rbp
    c0b1:	pop    r12
    c0b3:	ret    
    c0b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    c0bf:	nop

000000000000c0c0 <argmatch_invalid>:
    c0c0:	endbr64 
    c0c4:	push   r13
    c0c6:	mov    r13,rsi
    c0c9:	push   r12
    c0cb:	push   rbp
    c0cc:	mov    rbp,rdi
    c0cf:	push   rbx
    c0d0:	sub    rsp,0x8
    c0d4:	cmp    rdx,0xffffffffffffffff
    c0d8:	mov    edx,0x5
    c0dd:	je     c130 <argmatch_invalid+0x70>
    c0df:	lea    rsi,[rip+0xb0a5]        # 1718b <short_options+0x1d1b>
    c0e6:	xor    edi,edi
    c0e8:	call   3960 <dcgettext@plt>
    c0ed:	mov    r12,rax
    c0f0:	mov    rsi,rbp
    c0f3:	mov    edi,0x1
    c0f8:	call   11550 <quote_n>
    c0fd:	mov    rdx,r13
    c100:	mov    esi,0x8
    c105:	xor    edi,edi
    c107:	mov    rbx,rax
    c10a:	call   11140 <quotearg_n_style>
    c10f:	add    rsp,0x8
    c113:	mov    r8,rbx
    c116:	mov    rdx,r12
    c119:	pop    rbx
    c11a:	mov    rcx,rax
    c11d:	pop    rbp
    c11e:	xor    esi,esi
    c120:	pop    r12
    c122:	xor    edi,edi
    c124:	xor    eax,eax
    c126:	pop    r13
    c128:	jmp    3ce0 <error@plt>
    c12d:	nop    DWORD PTR [rax]
    c130:	lea    rsi,[rip+0xb039]        # 17170 <short_options+0x1d00>
    c137:	xor    edi,edi
    c139:	call   3960 <dcgettext@plt>
    c13e:	mov    r12,rax
    c141:	jmp    c0f0 <argmatch_invalid+0x30>
    c143:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    c14e:	xchg   ax,ax

000000000000c150 <argmatch_valid>:
    c150:	endbr64 
    c154:	push   r15
    c156:	lea    r15,[rip+0xb060]        # 171bd <short_options+0x1d4d>
    c15d:	push   r14
    c15f:	xor    r14d,r14d
    c162:	push   r13
    c164:	mov    r13,rdx
    c167:	mov    edx,0x5
    c16c:	push   r12
    c16e:	push   rbp
    c16f:	mov    rbp,rsi
    c172:	lea    rsi,[rip+0xb02f]        # 171a8 <short_options+0x1d38>
    c179:	push   rbx
    c17a:	mov    rbx,rdi
    c17d:	sub    rsp,0x18
    c181:	mov    r12,QWORD PTR [rip+0x12078]        # 1e200 <stderr@@GLIBC_2.2.5>
    c188:	mov    QWORD PTR [rsp+0x8],rdi
    c18d:	xor    edi,edi
    c18f:	call   3960 <dcgettext@plt>
    c194:	mov    rsi,r12
    c197:	mov    rdi,rax
    c19a:	call   3af0 <fputs_unlocked@plt>
    c19f:	mov    r12,QWORD PTR [rbx]
    c1a2:	xor    ebx,ebx
    c1a4:	test   r12,r12
    c1a7:	jne    c1e9 <argmatch_valid+0x99>
    c1a9:	jmp    c230 <argmatch_valid+0xe0>
    c1ae:	xchg   ax,ax
    c1b0:	mov    rdi,r12
    c1b3:	mov    r14,rbp
    c1b6:	call   11570 <quote>
    c1bb:	mov    rdi,QWORD PTR [rip+0x1203e]        # 1e200 <stderr@@GLIBC_2.2.5>
    c1c2:	mov    rdx,r15
    c1c5:	mov    esi,0x1
    c1ca:	mov    rcx,rax
    c1cd:	xor    eax,eax
    c1cf:	call   3e00 <__fprintf_chk@plt>
    c1d4:	mov    rax,QWORD PTR [rsp+0x8]
    c1d9:	add    rbx,0x1
    c1dd:	add    rbp,r13
    c1e0:	mov    r12,QWORD PTR [rax+rbx*8]
    c1e4:	test   r12,r12
    c1e7:	je     c230 <argmatch_valid+0xe0>
    c1e9:	test   rbx,rbx
    c1ec:	je     c1b0 <argmatch_valid+0x60>
    c1ee:	mov    rdx,r13
    c1f1:	mov    rsi,rbp
    c1f4:	mov    rdi,r14
    c1f7:	call   3ad0 <memcmp@plt>
    c1fc:	test   eax,eax
    c1fe:	jne    c1b0 <argmatch_valid+0x60>
    c200:	mov    rdi,r12
    c203:	call   11570 <quote>
    c208:	mov    rdi,QWORD PTR [rip+0x11ff1]        # 1e200 <stderr@@GLIBC_2.2.5>
    c20f:	mov    esi,0x1
    c214:	lea    rdx,[rip+0xafaa]        # 171c5 <short_options+0x1d55>
    c21b:	mov    rcx,rax
    c21e:	xor    eax,eax
    c220:	call   3e00 <__fprintf_chk@plt>
    c225:	jmp    c1d4 <argmatch_valid+0x84>
    c227:	nop    WORD PTR [rax+rax*1+0x0]
    c230:	mov    rdi,QWORD PTR [rip+0x11fc9]        # 1e200 <stderr@@GLIBC_2.2.5>
    c237:	mov    rax,QWORD PTR [rdi+0x28]
    c23b:	cmp    rax,QWORD PTR [rdi+0x30]
    c23f:	jae    c260 <argmatch_valid+0x110>
    c241:	lea    rdx,[rax+0x1]
    c245:	mov    QWORD PTR [rdi+0x28],rdx
    c249:	mov    BYTE PTR [rax],0xa
    c24c:	add    rsp,0x18
    c250:	pop    rbx
    c251:	pop    rbp
    c252:	pop    r12
    c254:	pop    r13
    c256:	pop    r14
    c258:	pop    r15
    c25a:	ret    
    c25b:	nop    DWORD PTR [rax+rax*1+0x0]
    c260:	add    rsp,0x18
    c264:	mov    esi,0xa
    c269:	pop    rbx
    c26a:	pop    rbp
    c26b:	pop    r12
    c26d:	pop    r13
    c26f:	pop    r14
    c271:	pop    r15
    c273:	jmp    39f0 <__overflow@plt>
    c278:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c280 <__xargmatch_internal>:
    c280:	endbr64 
    c284:	push   r15
    c286:	mov    r15,rsi
    c289:	push   r14
    c28b:	mov    r14,rdx
    c28e:	push   r13
    c290:	mov    r13,rdi
    c293:	push   r12
    c295:	mov    r12,r8
    c298:	push   rbp
    c299:	mov    rbp,rcx
    c29c:	push   rbx
    c29d:	mov    rbx,r9
    c2a0:	sub    rsp,0x8
    c2a4:	cmp    BYTE PTR [rsp+0x40],0x0
    c2a9:	je     c2d0 <__xargmatch_internal+0x50>
    c2ab:	mov    rcx,r8
    c2ae:	mov    rdx,rbp
    c2b1:	mov    rsi,r14
    c2b4:	mov    rdi,r15
    c2b7:	call   bf50 <argmatch>
    c2bc:	test   rax,rax
    c2bf:	js     c2e0 <__xargmatch_internal+0x60>
    c2c1:	add    rsp,0x8
    c2c5:	pop    rbx
    c2c6:	pop    rbp
    c2c7:	pop    r12
    c2c9:	pop    r13
    c2cb:	pop    r14
    c2cd:	pop    r15
    c2cf:	ret    
    c2d0:	mov    rsi,rdx
    c2d3:	mov    rdi,r15
    c2d6:	call   c060 <argmatch_exact>
    c2db:	jmp    c2bc <__xargmatch_internal+0x3c>
    c2dd:	nop    DWORD PTR [rax]
    c2e0:	mov    rdx,rax
    c2e3:	mov    rsi,r15
    c2e6:	mov    rdi,r13
    c2e9:	call   c0c0 <argmatch_invalid>
    c2ee:	mov    rdx,r12
    c2f1:	mov    rsi,rbp
    c2f4:	mov    rdi,r14
    c2f7:	call   c150 <argmatch_valid>
    c2fc:	call   rbx
    c2fe:	mov    rax,0xffffffffffffffff
    c305:	jmp    c2c1 <__xargmatch_internal+0x41>
    c307:	nop    WORD PTR [rax+rax*1+0x0]

000000000000c310 <argmatch_to_argument>:
    c310:	endbr64 
    c314:	push   r14
    c316:	push   r13
    c318:	push   r12
    c31a:	push   rbp
    c31b:	push   rbx
    c31c:	mov    r14,QWORD PTR [rsi]
    c31f:	test   r14,r14
    c322:	je     c359 <argmatch_to_argument+0x49>
    c324:	mov    r12,rdi
    c327:	mov    r13,rcx
    c32a:	lea    rbx,[rsi+0x8]
    c32e:	mov    rbp,rdx
    c331:	jmp    c347 <argmatch_to_argument+0x37>
    c333:	nop    DWORD PTR [rax+rax*1+0x0]
    c338:	mov    r14,QWORD PTR [rbx]
    c33b:	add    rbp,r13
    c33e:	add    rbx,0x8
    c342:	test   r14,r14
    c345:	je     c359 <argmatch_to_argument+0x49>
    c347:	mov    rdx,r13
    c34a:	mov    rsi,rbp
    c34d:	mov    rdi,r12
    c350:	call   3ad0 <memcmp@plt>
    c355:	test   eax,eax
    c357:	jne    c338 <argmatch_to_argument+0x28>
    c359:	pop    rbx
    c35a:	mov    rax,r14
    c35d:	pop    rbp
    c35e:	pop    r12
    c360:	pop    r13
    c362:	pop    r14
    c364:	ret    
    c365:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c36f:	nop

000000000000c370 <close_stdout_set_file_name>:
    c370:	endbr64 
    c374:	mov    QWORD PTR [rip+0x1251d],rdi        # 1e898 <file_name>
    c37b:	ret    
    c37c:	nop    DWORD PTR [rax+0x0]

000000000000c380 <close_stdout_set_ignore_EPIPE>:
    c380:	endbr64 
    c384:	mov    BYTE PTR [rip+0x12505],dil        # 1e890 <ignore_EPIPE>
    c38b:	ret    
    c38c:	nop    DWORD PTR [rax+0x0]

000000000000c390 <close_stdout>:
    c390:	endbr64 
    c394:	push   r12
    c396:	push   rbx
    c397:	sub    rsp,0x8
    c39b:	mov    rdi,QWORD PTR [rip+0x11e26]        # 1e1c8 <stdout@@GLIBC_2.2.5>
    c3a2:	call   13cd0 <close_stream>
    c3a7:	test   eax,eax
    c3a9:	je     c3c1 <close_stdout+0x31>
    c3ab:	call   3810 <__errno_location@plt>
    c3b0:	cmp    BYTE PTR [rip+0x124d9],0x0        # 1e890 <ignore_EPIPE>
    c3b7:	mov    rbx,rax
    c3ba:	je     c3d9 <close_stdout+0x49>
    c3bc:	cmp    DWORD PTR [rax],0x20
    c3bf:	jne    c3d9 <close_stdout+0x49>
    c3c1:	mov    rdi,QWORD PTR [rip+0x11e38]        # 1e200 <stderr@@GLIBC_2.2.5>
    c3c8:	call   13cd0 <close_stream>
    c3cd:	test   eax,eax
    c3cf:	jne    c418 <close_stdout+0x88>
    c3d1:	add    rsp,0x8
    c3d5:	pop    rbx
    c3d6:	pop    r12
    c3d8:	ret    
    c3d9:	xor    edi,edi
    c3db:	mov    edx,0x5
    c3e0:	lea    rsi,[rip+0xade3]        # 171ca <short_options+0x1d5a>
    c3e7:	call   3960 <dcgettext@plt>
    c3ec:	mov    rdi,QWORD PTR [rip+0x124a5]        # 1e898 <file_name>
    c3f3:	mov    r12,rax
    c3f6:	test   rdi,rdi
    c3f9:	je     c423 <close_stdout+0x93>
    c3fb:	call   11360 <quotearg_colon>
    c400:	mov    esi,DWORD PTR [rbx]
    c402:	mov    r8,r12
    c405:	xor    edi,edi
    c407:	mov    rcx,rax
    c40a:	lea    rdx,[rip+0xa732]        # 16b43 <short_options+0x16d3>
    c411:	xor    eax,eax
    c413:	call   3ce0 <error@plt>
    c418:	mov    edi,DWORD PTR [rip+0x11d12]        # 1e130 <exit_failure>
    c41e:	call   3840 <_exit@plt>
    c423:	mov    esi,DWORD PTR [rbx]
    c425:	mov    rcx,rax
    c428:	lea    rdx,[rip+0xad98]        # 171c7 <short_options+0x1d57>
    c42f:	xor    edi,edi
    c431:	xor    eax,eax
    c433:	call   3ce0 <error@plt>
    c438:	jmp    c418 <close_stdout+0x88>
    c43a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000c440 <md5_init_ctx>:
    c440:	endbr64 
    c444:	movabs rax,0xefcdab8967452301
    c44e:	mov    QWORD PTR [rdi+0x10],0x0
    c456:	mov    QWORD PTR [rdi],rax
    c459:	movabs rax,0x1032547698badcfe
    c463:	mov    QWORD PTR [rdi+0x8],rax
    c467:	mov    DWORD PTR [rdi+0x18],0x0
    c46e:	ret    
    c46f:	nop

000000000000c470 <md5_read_ctx>:
    c470:	endbr64 
    c474:	mov    edx,DWORD PTR [rdi]
    c476:	mov    rax,rsi
    c479:	mov    DWORD PTR [rsi],edx
    c47b:	mov    edx,DWORD PTR [rdi+0x4]
    c47e:	mov    DWORD PTR [rsi+0x4],edx
    c481:	mov    edx,DWORD PTR [rdi+0x8]
    c484:	mov    DWORD PTR [rsi+0x8],edx
    c487:	mov    edx,DWORD PTR [rdi+0xc]
    c48a:	mov    DWORD PTR [rsi+0xc],edx
    c48d:	ret    
    c48e:	xchg   ax,ax

000000000000c490 <md5_process_block>:
    c490:	endbr64 
    c494:	mov    rax,rsi
    c497:	push   r15
    c499:	and    rax,0xfffffffffffffffc
    c49d:	push   r14
    c49f:	push   r13
    c4a1:	push   r12
    c4a3:	push   rbp
    c4a4:	push   rbx
    c4a5:	mov    rbx,rdi
    c4a8:	mov    rdi,rdx
    c4ab:	mov    r11d,DWORD PTR [rdx+0x4]
    c4af:	lea    rcx,[rbx+rax*1]
    c4b3:	mov    eax,DWORD PTR [rdx]
    c4b5:	mov    r10d,DWORD PTR [rdx+0x8]
    c4b9:	mov    DWORD PTR [rsp-0x18],eax
    c4bd:	mov    eax,DWORD PTR [rdx+0xc]
    c4c0:	mov    QWORD PTR [rsp-0x8],rdx
    c4c5:	mov    edx,esi
    c4c7:	mov    DWORD PTR [rsp-0x20],eax
    c4cb:	xor    eax,eax
    c4cd:	add    edx,DWORD PTR [rdi+0x10]
    c4d0:	setb   al
    c4d3:	shr    rsi,0x20
    c4d7:	add    esi,DWORD PTR [rdi+0x14]
    c4da:	mov    QWORD PTR [rsp-0x10],rcx
    c4df:	add    esi,eax
    c4e1:	mov    DWORD PTR [rdi+0x10],edx
    c4e4:	mov    DWORD PTR [rdi+0x14],esi
    c4e7:	cmp    rbx,rcx
    c4ea:	jae    cbe2 <md5_process_block+0x752>
    c4f0:	mov    r15d,r10d
    c4f3:	nop    DWORD PTR [rax+rax*1+0x0]
    c4f8:	mov    r14d,DWORD PTR [rbx]
    c4fb:	mov    edi,DWORD PTR [rsp-0x20]
    c4ff:	mov    eax,DWORD PTR [rsp-0x18]
    c503:	mov    esi,DWORD PTR [rbx+0x4]
    c506:	mov    r8d,DWORD PTR [rbx+0xc]
    c50a:	mov    r10d,DWORD PTR [rbx+0x14]
    c50e:	lea    edx,[r14+rax*1-0x28955b88]
    c516:	mov    eax,edi
    c518:	lea    ecx,[rsi+rdi*1-0x173848aa]
    c51f:	mov    DWORD PTR [rsp-0x44],esi
    c523:	xor    eax,r15d
    c526:	mov    ebp,DWORD PTR [rbx+0x18]
    c529:	mov    r13d,DWORD PTR [rbx+0x1c]
    c52d:	mov    DWORD PTR [rsp-0x34],r10d
    c532:	and    eax,r11d
    c535:	mov    r12d,DWORD PTR [rbx+0x24]
    c539:	mov    DWORD PTR [rsp-0x3c],r8d
    c53e:	xor    eax,edi
    c540:	lea    edi,[r8+r11*1-0x3e423112]
    c548:	mov    r8d,DWORD PTR [rbx+0x2c]
    c54c:	add    eax,edx
    c54e:	mov    edx,r11d
    c551:	mov    DWORD PTR [rsp-0x2c],r12d
    c556:	rol    eax,0x7
    c559:	xor    edx,r15d
    c55c:	mov    DWORD PTR [rsp-0x24],r8d
    c561:	add    eax,r11d
    c564:	and    edx,eax
    c566:	mov    r9d,eax
    c569:	xor    edx,r15d
    c56c:	xor    r9d,r11d
    c56f:	add    edx,ecx
    c571:	mov    ecx,DWORD PTR [rbx+0x8]
    c574:	rol    edx,0xc
    c577:	add    edx,eax
    c579:	lea    esi,[rcx+r15*1+0x242070db]
    c581:	mov    DWORD PTR [rsp-0x40],ecx
    c585:	mov    ecx,r9d
    c588:	and    ecx,edx
    c58a:	mov    r9d,eax
    c58d:	xor    ecx,r11d
    c590:	xor    r9d,edx
    c593:	add    ecx,esi
    c595:	mov    esi,r9d
    c598:	mov    r9d,DWORD PTR [rbx+0x10]
    c59c:	ror    ecx,0xf
    c59f:	add    ecx,edx
    c5a1:	mov    DWORD PTR [rsp-0x38],r9d
    c5a6:	and    esi,ecx
    c5a8:	xor    esi,eax
    c5aa:	add    esi,edi
    c5ac:	lea    edi,[r9+rax*1-0xa83f051]
    c5b4:	mov    eax,edx
    c5b6:	mov    r9d,DWORD PTR [rbx+0x3c]
    c5ba:	ror    esi,0xa
    c5bd:	xor    eax,ecx
    c5bf:	add    esi,ecx
    c5c1:	and    eax,esi
    c5c3:	xor    eax,edx
    c5c5:	add    eax,edi
    c5c7:	lea    edi,[r10+rdx*1+0x4787c62a]
    c5cf:	mov    edx,ecx
    c5d1:	mov    r10d,ebp
    c5d4:	rol    eax,0x7
    c5d7:	xor    edx,esi
    c5d9:	mov    DWORD PTR [rsp-0x1c],r10d
    c5de:	add    eax,esi
    c5e0:	and    edx,eax
    c5e2:	xor    edx,ecx
    c5e4:	add    edx,edi
    c5e6:	lea    edi,[rbp+rcx*1-0x57cfb9ed]
    c5ed:	mov    ebp,esi
    c5ef:	xor    ebp,eax
    c5f1:	rol    edx,0xc
    c5f4:	add    edx,eax
    c5f6:	mov    ecx,ebp
    c5f8:	mov    ebp,eax
    c5fa:	and    ecx,edx
    c5fc:	xor    ebp,edx
    c5fe:	xor    ecx,esi
    c600:	add    ecx,edi
    c602:	lea    edi,[r13+rsi*1-0x2b96aff]
    c60a:	mov    esi,ebp
    c60c:	mov    ebp,DWORD PTR [rbx+0x20]
    c60f:	ror    ecx,0xf
    c612:	add    ecx,edx
    c614:	mov    DWORD PTR [rsp-0x30],ebp
    c618:	and    esi,ecx
    c61a:	xor    esi,eax
    c61c:	add    esi,edi
    c61e:	lea    edi,[rbp+rax*1+0x698098d8]
    c625:	mov    eax,edx
    c627:	mov    ebp,DWORD PTR [rbx+0x30]
    c62a:	ror    esi,0xa
    c62d:	xor    eax,ecx
    c62f:	add    esi,ecx
    c631:	and    eax,esi
    c633:	xor    eax,edx
    c635:	add    eax,edi
    c637:	lea    edi,[r12+rdx*1-0x74bb0851]
    c63f:	mov    edx,ecx
    c641:	mov    r12d,DWORD PTR [rbx+0x38]
    c645:	rol    eax,0x7
    c648:	xor    edx,esi
    c64a:	add    eax,esi
    c64c:	and    edx,eax
    c64e:	xor    edx,ecx
    c650:	add    edx,edi
    c652:	mov    edi,DWORD PTR [rbx+0x28]
    c655:	rol    edx,0xc
    c658:	mov    DWORD PTR [rsp-0x28],edi
    c65c:	lea    edi,[rdi+rcx*1-0xa44f]
    c663:	mov    ecx,esi
    c665:	add    edx,eax
    c667:	xor    ecx,eax
    c669:	and    ecx,edx
    c66b:	xor    ecx,esi
    c66d:	add    ecx,edi
    c66f:	lea    edi,[r8+rsi*1-0x76a32842]
    c677:	mov    esi,eax
    c679:	mov    r8d,DWORD PTR [rbx+0x34]
    c67d:	ror    ecx,0xf
    c680:	xor    esi,edx
    c682:	add    rbx,0x40
    c686:	add    ecx,edx
    c688:	and    esi,ecx
    c68a:	xor    esi,eax
    c68c:	add    esi,edi
    c68e:	lea    edi,[rbp+rax*1+0x6b901122]
    c695:	mov    eax,edx
    c697:	ror    esi,0xa
    c69a:	xor    eax,ecx
    c69c:	add    esi,ecx
    c69e:	and    eax,esi
    c6a0:	xor    eax,edx
    c6a2:	add    eax,edi
    c6a4:	lea    edi,[r8+rdx*1-0x2678e6d]
    c6ac:	mov    edx,ecx
    c6ae:	rol    eax,0x7
    c6b1:	xor    edx,esi
    c6b3:	add    eax,esi
    c6b5:	and    edx,eax
    c6b7:	xor    edx,ecx
    c6b9:	add    edx,edi
    c6bb:	lea    edi,[r12+rcx*1-0x5986bc72]
    c6c3:	mov    ecx,esi
    c6c5:	rol    edx,0xc
    c6c8:	xor    ecx,eax
    c6ca:	add    edx,eax
    c6cc:	and    ecx,edx
    c6ce:	xor    ecx,esi
    c6d0:	add    ecx,edi
    c6d2:	lea    edi,[r9+rsi*1+0x49b40821]
    c6da:	mov    esi,eax
    c6dc:	ror    ecx,0xf
    c6df:	xor    esi,edx
    c6e1:	add    ecx,edx
    c6e3:	and    esi,ecx
    c6e5:	xor    esi,eax
    c6e7:	add    esi,edi
    c6e9:	mov    edi,DWORD PTR [rsp-0x44]
    c6ed:	ror    esi,0xa
    c6f0:	add    esi,ecx
    c6f2:	lea    edi,[rdi+rax*1-0x9e1da9e]
    c6f9:	mov    eax,ecx
    c6fb:	xor    eax,esi
    c6fd:	and    eax,edx
    c6ff:	xor    eax,ecx
    c701:	add    eax,edi
    c703:	lea    edi,[r10+rdx*1-0x3fbf4cc0]
    c70b:	mov    edx,esi
    c70d:	rol    eax,0x5
    c710:	add    eax,esi
    c712:	xor    edx,eax
    c714:	and    edx,ecx
    c716:	xor    edx,esi
    c718:	add    edx,edi
    c71a:	mov    edi,DWORD PTR [rsp-0x24]
    c71e:	rol    edx,0x9
    c721:	add    edx,eax
    c723:	lea    edi,[rdi+rcx*1+0x265e5a51]
    c72a:	mov    ecx,eax
    c72c:	xor    ecx,edx
    c72e:	and    ecx,esi
    c730:	xor    ecx,eax
    c732:	add    ecx,edi
    c734:	lea    edi,[r14+rsi*1-0x16493856]
    c73c:	mov    esi,edx
    c73e:	rol    ecx,0xe
    c741:	add    ecx,edx
    c743:	xor    esi,ecx
    c745:	and    esi,eax
    c747:	xor    esi,edx
    c749:	add    esi,edi
    c74b:	mov    edi,DWORD PTR [rsp-0x34]
    c74f:	ror    esi,0xc
    c752:	add    esi,ecx
    c754:	lea    edi,[rdi+rax*1-0x29d0efa3]
    c75b:	mov    eax,ecx
    c75d:	xor    eax,esi
    c75f:	and    eax,edx
    c761:	xor    eax,ecx
    c763:	add    eax,edi
    c765:	mov    edi,DWORD PTR [rsp-0x28]
    c769:	rol    eax,0x5
    c76c:	add    eax,esi
    c76e:	lea    edi,[rdi+rdx*1+0x2441453]
    c775:	mov    edx,esi
    c777:	xor    edx,eax
    c779:	and    edx,ecx
    c77b:	xor    edx,esi
    c77d:	add    edx,edi
    c77f:	lea    edi,[r9+rcx*1-0x275e197f]
    c787:	mov    ecx,eax
    c789:	rol    edx,0x9
    c78c:	add    edx,eax
    c78e:	xor    ecx,edx
    c790:	and    ecx,esi
    c792:	xor    ecx,eax
    c794:	add    ecx,edi
    c796:	mov    edi,DWORD PTR [rsp-0x38]
    c79a:	mov    r10d,DWORD PTR [rsp-0x2c]
    c79f:	rol    ecx,0xe
    c7a2:	add    ecx,edx
    c7a4:	lea    edi,[rdi+rsi*1-0x182c0438]
    c7ab:	mov    esi,edx
    c7ad:	xor    esi,ecx
    c7af:	and    esi,eax
    c7b1:	xor    esi,edx
    c7b3:	add    esi,edi
    c7b5:	lea    edi,[r10+rax*1+0x21e1cde6]
    c7bd:	mov    eax,ecx
    c7bf:	mov    r10d,DWORD PTR [rsp-0x30]
    c7c4:	ror    esi,0xc
    c7c7:	add    esi,ecx
    c7c9:	xor    eax,esi
    c7cb:	and    eax,edx
    c7cd:	xor    eax,ecx
    c7cf:	add    eax,edi
    c7d1:	lea    edi,[r12+rdx*1-0x3cc8f82a]
    c7d9:	mov    edx,esi
    c7db:	rol    eax,0x5
    c7de:	add    eax,esi
    c7e0:	xor    edx,eax
    c7e2:	and    edx,ecx
    c7e4:	xor    edx,esi
    c7e6:	add    edx,edi
    c7e8:	mov    edi,DWORD PTR [rsp-0x3c]
    c7ec:	rol    edx,0x9
    c7ef:	add    edx,eax
    c7f1:	lea    edi,[rdi+rcx*1-0xb2af279]
    c7f8:	mov    ecx,eax
    c7fa:	xor    ecx,edx
    c7fc:	and    ecx,esi
    c7fe:	lea    esi,[r10+rsi*1+0x455a14ed]
    c806:	mov    r10d,edx
    c809:	xor    ecx,eax
    c80b:	add    ecx,edi
    c80d:	rol    ecx,0xe
    c810:	add    ecx,edx
    c812:	xor    r10d,ecx
    c815:	mov    edi,r10d
    c818:	and    edi,eax
    c81a:	xor    edi,edx
    c81c:	add    edi,esi
    c81e:	lea    esi,[r8+rax*1-0x561c16fb]
    c826:	mov    eax,ecx
    c828:	ror    edi,0xc
    c82b:	add    edi,ecx
    c82d:	xor    eax,edi
    c82f:	lea    r10d,[rbp+rdi*1-0x72d5b376]
    c837:	and    eax,edx
    c839:	mov    DWORD PTR [rsp-0x14],r10d
    c83e:	xor    eax,ecx
    c840:	add    eax,esi
    c842:	mov    esi,DWORD PTR [rsp-0x40]
    c846:	rol    eax,0x5
    c849:	add    eax,edi
    c84b:	lea    esi,[rsi+rdx*1-0x3105c08]
    c852:	mov    edx,edi
    c854:	xor    edx,eax
    c856:	and    edx,ecx
    c858:	lea    ecx,[r13+rcx*1+0x676f02d9]
    c860:	xor    edx,edi
    c862:	add    edx,esi
    c864:	mov    esi,eax
    c866:	rol    edx,0x9
    c869:	add    edx,eax
    c86b:	xor    esi,edx
    c86d:	and    esi,edi
    c86f:	xor    esi,eax
    c871:	add    esi,ecx
    c873:	mov    ecx,edx
    c875:	rol    esi,0xe
    c878:	add    esi,edx
    c87a:	xor    ecx,esi
    c87c:	mov    r10d,ecx
    c87f:	and    r10d,eax
    c882:	mov    edi,r10d
    c885:	mov    r10d,DWORD PTR [rsp-0x34]
    c88a:	xor    edi,edx
    c88c:	add    edi,DWORD PTR [rsp-0x14]
    c890:	ror    edi,0xc
    c893:	lea    eax,[r10+rax*1-0x5c6be]
    c89b:	add    edi,esi
    c89d:	xor    ecx,edi
    c89f:	add    ecx,eax
    c8a1:	mov    eax,DWORD PTR [rsp-0x30]
    c8a5:	rol    ecx,0x4
    c8a8:	lea    eax,[rax+rdx*1-0x788e097f]
    c8af:	mov    edx,esi
    c8b1:	add    ecx,edi
    c8b3:	xor    edx,edi
    c8b5:	xor    edx,ecx
    c8b7:	add    edx,eax
    c8b9:	mov    eax,DWORD PTR [rsp-0x24]
    c8bd:	rol    edx,0xb
    c8c0:	lea    eax,[rax+rsi*1+0x6d9d6122]
    c8c7:	mov    esi,edi
    c8c9:	add    edx,ecx
    c8cb:	xor    esi,ecx
    c8cd:	lea    edi,[r12+rdi*1-0x21ac7f4]
    c8d5:	xor    esi,edx
    c8d7:	add    esi,eax
    c8d9:	mov    eax,ecx
    c8db:	rol    esi,0x10
    c8de:	xor    eax,edx
    c8e0:	add    esi,edx
    c8e2:	xor    eax,esi
    c8e4:	mov    r10d,esi
    c8e7:	add    eax,edi
    c8e9:	mov    edi,DWORD PTR [rsp-0x44]
    c8ed:	ror    eax,0x9
    c8f0:	lea    edi,[rdi+rcx*1-0x5b4115bc]
    c8f7:	mov    ecx,edx
    c8f9:	add    eax,esi
    c8fb:	xor    ecx,esi
    c8fd:	xor    r10d,eax
    c900:	lea    esi,[r13+rsi*1-0x944b4a0]
    c908:	xor    ecx,eax
    c90a:	add    ecx,edi
    c90c:	mov    edi,DWORD PTR [rsp-0x38]
    c910:	rol    ecx,0x4
    c913:	add    ecx,eax
    c915:	lea    edx,[rdi+rdx*1+0x4bdecfa9]
    c91c:	mov    edi,r10d
    c91f:	xor    edi,ecx
    c921:	add    edi,edx
    c923:	mov    edx,eax
    c925:	rol    edi,0xb
    c928:	xor    edx,ecx
    c92a:	add    edi,ecx
    c92c:	xor    edx,edi
    c92e:	add    edx,esi
    c930:	mov    esi,DWORD PTR [rsp-0x28]
    c934:	rol    edx,0x10
    c937:	lea    eax,[rsi+rax*1-0x41404390]
    c93e:	mov    esi,ecx
    c940:	add    edx,edi
    c942:	xor    esi,edi
    c944:	xor    esi,edx
    c946:	add    esi,eax
    c948:	lea    eax,[r8+rcx*1+0x289b7ec6]
    c950:	mov    ecx,edi
    c952:	ror    esi,0x9
    c955:	xor    ecx,edx
    c957:	lea    edi,[r14+rdi*1-0x155ed806]
    c95f:	add    esi,edx
    c961:	xor    ecx,esi
    c963:	mov    r10d,esi
    c966:	add    ecx,eax
    c968:	mov    eax,edx
    c96a:	rol    ecx,0x4
    c96d:	xor    eax,esi
    c96f:	add    ecx,esi
    c971:	xor    eax,ecx
    c973:	xor    r10d,ecx
    c976:	add    eax,edi
    c978:	mov    edi,DWORD PTR [rsp-0x3c]
    c97c:	rol    eax,0xb
    c97f:	add    eax,ecx
    c981:	lea    edx,[rdi+rdx*1-0x2b10cf7b]
    c988:	mov    edi,r10d
    c98b:	xor    edi,eax
    c98d:	add    edi,edx
    c98f:	mov    edx,DWORD PTR [rsp-0x1c]
    c993:	rol    edi,0x10
    c996:	lea    edx,[rdx+rsi*1+0x4881d05]
    c99d:	mov    esi,ecx
    c99f:	add    edi,eax
    c9a1:	xor    esi,eax
    c9a3:	xor    esi,edi
    c9a5:	add    esi,edx
    c9a7:	mov    edx,DWORD PTR [rsp-0x2c]
    c9ab:	ror    esi,0x9
    c9ae:	lea    ecx,[rdx+rcx*1-0x262b2fc7]
    c9b5:	mov    edx,eax
    c9b7:	add    esi,edi
    c9b9:	xor    edx,edi
    c9bb:	lea    eax,[rbp+rax*1-0x1924661b]
    c9c2:	mov    r10d,esi
    c9c5:	xor    edx,esi
    c9c7:	add    edx,ecx
    c9c9:	mov    ecx,edi
    c9cb:	rol    edx,0x4
    c9ce:	add    edx,esi
    c9d0:	xor    ecx,esi
    c9d2:	xor    ecx,edx
    c9d4:	xor    r10d,edx
    c9d7:	add    ecx,eax
    c9d9:	lea    eax,[r9+rdi*1+0x1fa27cf8]
    c9e1:	mov    edi,r10d
    c9e4:	mov    r10d,DWORD PTR [rsp-0x34]
    c9e9:	rol    ecx,0xb
    c9ec:	add    ecx,edx
    c9ee:	xor    edi,ecx
    c9f0:	add    edi,eax
    c9f2:	mov    eax,DWORD PTR [rsp-0x40]
    c9f6:	rol    edi,0x10
    c9f9:	lea    esi,[rax+rsi*1-0x3b53a99b]
    ca00:	mov    eax,edx
    ca02:	add    edi,ecx
    ca04:	xor    eax,ecx
    ca06:	xor    eax,edi
    ca08:	add    eax,esi
    ca0a:	lea    esi,[r14+rdx*1-0xbd6ddbc]
    ca12:	mov    edx,ecx
    ca14:	mov    r14d,DWORD PTR [rsp-0x44]
    ca19:	ror    eax,0x9
    ca1c:	not    edx
    ca1e:	add    eax,edi
    ca20:	or     edx,eax
    ca22:	xor    edx,edi
    ca24:	add    edx,esi
    ca26:	lea    esi,[r13+rcx*1+0x432aff97]
    ca2e:	mov    r13d,edi
    ca31:	rol    edx,0x6
    ca34:	not    r13d
    ca37:	lea    edi,[r12+rdi*1-0x546bdc59]
    ca3f:	add    edx,eax
    ca41:	mov    ecx,r13d
    ca44:	or     ecx,edx
    ca46:	mov    r13d,edx
    ca49:	xor    ecx,eax
    ca4b:	not    r13d
    ca4e:	add    ecx,esi
    ca50:	mov    esi,eax
    ca52:	rol    ecx,0xa
    ca55:	not    esi
    ca57:	add    ecx,edx
    ca59:	or     esi,ecx
    ca5b:	mov    r12d,ecx
    ca5e:	xor    esi,edx
    ca60:	not    r12d
    ca63:	add    esi,edi
    ca65:	lea    edi,[r10+rax*1-0x36c5fc7]
    ca6d:	mov    eax,r13d
    ca70:	mov    r10d,DWORD PTR [rsp-0x1c]
    ca75:	rol    esi,0xf
    ca78:	add    esi,ecx
    ca7a:	or     eax,esi
    ca7c:	xor    eax,ecx
    ca7e:	add    eax,edi
    ca80:	lea    edi,[rbp+rdx*1+0x655b59c3]
    ca87:	mov    edx,r12d
    ca8a:	mov    ebp,DWORD PTR [rsp-0x3c]
    ca8e:	ror    eax,0xb
    ca91:	add    eax,esi
    ca93:	or     edx,eax
    ca95:	xor    edx,esi
    ca97:	add    edx,edi
    ca99:	lea    edi,[rbp+rcx*1-0x70f3336e]
    caa0:	mov    ebp,esi
    caa2:	rol    edx,0x6
    caa5:	not    ebp
    caa7:	add    edx,eax
    caa9:	mov    ecx,ebp
    caab:	or     ecx,edx
    caad:	mov    ebp,edx
    caaf:	xor    ecx,eax
    cab1:	not    ebp
    cab3:	add    ecx,edi
    cab5:	mov    edi,DWORD PTR [rsp-0x28]
    cab9:	rol    ecx,0xa
    cabc:	lea    edi,[rdi+rsi*1-0x100b83]
    cac3:	mov    esi,eax
    cac5:	add    ecx,edx
    cac7:	not    esi
    cac9:	or     esi,ecx
    cacb:	xor    esi,edx
    cacd:	add    esi,edi
    cacf:	lea    edi,[r14+rax*1-0x7a7ba22f]
    cad7:	mov    eax,ebp
    cad9:	mov    r14d,DWORD PTR [rsp-0x30]
    cade:	rol    esi,0xf
    cae1:	mov    ebp,ecx
    cae3:	add    esi,ecx
    cae5:	not    ebp
    cae7:	or     eax,esi
    cae9:	xor    eax,ecx
    caeb:	add    eax,edi
    caed:	lea    edi,[r14+rdx*1+0x6fa87e4f]
    caf5:	mov    edx,ebp
    caf7:	mov    ebp,esi
    caf9:	ror    eax,0xb
    cafc:	not    ebp
    cafe:	mov    r14d,DWORD PTR [rsp-0x24]
    cb03:	add    eax,esi
    cb05:	or     edx,eax
    cb07:	xor    edx,esi
    cb09:	add    edx,edi
    cb0b:	lea    edi,[r9+rcx*1-0x1d31920]
    cb13:	mov    ecx,ebp
    cb15:	mov    r9d,DWORD PTR [rsp-0x38]
    cb1a:	rol    edx,0x6
    cb1d:	add    edx,eax
    cb1f:	or     ecx,edx
    cb21:	xor    ecx,eax
    cb23:	add    ecx,edi
    cb25:	lea    edi,[r10+rsi*1-0x5cfebcec]
    cb2d:	mov    esi,eax
    cb2f:	mov    r10d,DWORD PTR [rsp-0x2c]
    cb34:	rol    ecx,0xa
    cb37:	not    esi
    cb39:	lea    eax,[r8+rax*1+0x4e0811a1]
    cb41:	mov    r8d,edx
    cb44:	add    ecx,edx
    cb46:	not    r8d
    cb49:	or     esi,ecx
    cb4b:	xor    esi,edx
    cb4d:	lea    edx,[r9+rdx*1-0x8ac817e]
    cb55:	mov    r9d,ecx
    cb58:	add    esi,edi
    cb5a:	mov    edi,r8d
    cb5d:	not    r9d
    cb60:	rol    esi,0xf
    cb63:	add    esi,ecx
    cb65:	or     edi,esi
    cb67:	xor    edi,ecx
    cb69:	lea    ecx,[r14+rcx*1-0x42c50dcb]
    cb71:	add    edi,eax
    cb73:	mov    eax,r9d
    cb76:	ror    edi,0xb
    cb79:	add    edi,esi
    cb7b:	or     eax,edi
    cb7d:	xor    eax,esi
    cb7f:	add    eax,edx
    cb81:	mov    edx,esi
    cb83:	rol    eax,0x6
    cb86:	not    edx
    cb88:	add    eax,edi
    cb8a:	or     edx,eax
    cb8c:	xor    edx,edi
    cb8e:	add    edx,ecx
    cb90:	mov    ecx,DWORD PTR [rsp-0x40]
    cb94:	rol    edx,0xa
    cb97:	lea    esi,[rcx+rsi*1+0x2ad7d2bb]
    cb9e:	mov    ecx,edi
    cba0:	add    edx,eax
    cba2:	not    ecx
    cba4:	lea    edi,[r10+rdi*1-0x14792c6f]
    cbac:	or     ecx,edx
    cbae:	xor    ecx,eax
    cbb0:	add    ecx,esi
    cbb2:	mov    esi,eax
    cbb4:	rol    ecx,0xf
    cbb7:	not    esi
    cbb9:	add    ecx,edx
    cbbb:	or     esi,ecx
    cbbd:	xor    esi,edx
    cbbf:	add    esi,edi
    cbc1:	ror    esi,0xb
    cbc4:	add    esi,ecx
    cbc6:	add    DWORD PTR [rsp-0x18],eax
    cbca:	add    r15d,ecx
    cbcd:	add    DWORD PTR [rsp-0x20],edx
    cbd1:	add    r11d,esi
    cbd4:	cmp    QWORD PTR [rsp-0x10],rbx
    cbd9:	ja     c4f8 <md5_process_block+0x68>
    cbdf:	mov    r10d,r15d
    cbe2:	mov    rax,QWORD PTR [rsp-0x8]
    cbe7:	mov    ebx,DWORD PTR [rsp-0x18]
    cbeb:	mov    DWORD PTR [rax],ebx
    cbed:	mov    ebx,DWORD PTR [rsp-0x20]
    cbf1:	mov    DWORD PTR [rax+0x4],r11d
    cbf5:	mov    DWORD PTR [rax+0x8],r10d
    cbf9:	mov    DWORD PTR [rax+0xc],ebx
    cbfc:	pop    rbx
    cbfd:	pop    rbp
    cbfe:	pop    r12
    cc00:	pop    r13
    cc02:	pop    r14
    cc04:	pop    r15
    cc06:	ret    
    cc07:	nop    WORD PTR [rax+rax*1+0x0]

000000000000cc10 <md5_finish_ctx>:
    cc10:	endbr64 
    cc14:	push   r12
    cc16:	mov    r12,rsi
    cc19:	push   rbp
    cc1a:	mov    eax,DWORD PTR [rdi+0x18]
    cc1d:	mov    rbp,rdi
    cc20:	mov    edx,DWORD PTR [rbp+0x14]
    cc23:	cmp    eax,0x38
    cc26:	mov    edi,eax
    cc28:	sbb    r8,r8
    cc2b:	and    r8,0xffffffffffffffc0
    cc2f:	sub    r8,0xffffffffffffff80
    cc33:	cmp    eax,0x38
    cc36:	sbb    rcx,rcx
    cc39:	and    rcx,0xffffffffffffffc0
    cc3d:	add    rcx,0x78
    cc41:	cmp    eax,0x38
    cc44:	sbb    rsi,rsi
    cc47:	and    rsi,0xfffffffffffffff0
    cc4b:	add    rsi,0x1f
    cc4f:	cmp    eax,0x38
    cc52:	sbb    r9,r9
    cc55:	and    r9,0xfffffffffffffff0
    cc59:	add    r9,0x1e
    cc5d:	add    edi,DWORD PTR [rbp+0x10]
    cc60:	mov    DWORD PTR [rbp+0x10],edi
    cc63:	jae    cc6b <md5_finish_ctx+0x5b>
    cc65:	add    edx,0x1
    cc68:	mov    DWORD PTR [rbp+0x14],edx
    cc6b:	lea    r10d,[rdi*8+0x0]
    cc73:	shl    edx,0x3
    cc76:	shr    edi,0x1d
    cc79:	sub    rcx,rax
    cc7c:	mov    DWORD PTR [rbp+r9*4+0x1c],r10d
    cc81:	or     edx,edi
    cc83:	lea    r9,[rbp+0x1c]
    cc87:	mov    DWORD PTR [rbp+rsi*4+0x1c],edx
    cc8b:	lea    rdx,[r9+rax*1]
    cc8f:	lea    rsi,[rip+0xa54a]        # 171e0 <fillbuf>
    cc96:	cmp    rcx,0x8
    cc9a:	jae    ccc0 <md5_finish_ctx+0xb0>
    cc9c:	test   cl,0x4
    cc9f:	jne    cd10 <md5_finish_ctx+0x100>
    cca1:	test   rcx,rcx
    cca4:	je     ccec <md5_finish_ctx+0xdc>
    cca6:	movzx  eax,BYTE PTR [rip+0xa533]        # 171e0 <fillbuf>
    ccad:	mov    BYTE PTR [rdx],al
    ccaf:	test   cl,0x2
    ccb2:	je     ccec <md5_finish_ctx+0xdc>
    ccb4:	movzx  eax,WORD PTR [rsi+rcx*1-0x2]
    ccb9:	mov    WORD PTR [rdx+rcx*1-0x2],ax
    ccbe:	jmp    ccec <md5_finish_ctx+0xdc>
    ccc0:	mov    rax,QWORD PTR [rip+0xa519]        # 171e0 <fillbuf>
    ccc7:	lea    rdi,[rdx+0x8]
    cccb:	and    rdi,0xfffffffffffffff8
    cccf:	mov    QWORD PTR [rdx],rax
    ccd2:	mov    rax,QWORD PTR [rsi+rcx*1-0x8]
    ccd7:	mov    QWORD PTR [rdx+rcx*1-0x8],rax
    ccdc:	sub    rdx,rdi
    ccdf:	add    rcx,rdx
    cce2:	sub    rsi,rdx
    cce5:	shr    rcx,0x3
    cce9:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    ccec:	mov    rdx,rbp
    ccef:	mov    rsi,r8
    ccf2:	mov    rdi,r9
    ccf5:	call   c490 <md5_process_block>
    ccfa:	mov    rsi,r12
    ccfd:	mov    rdi,rbp
    cd00:	pop    rbp
    cd01:	pop    r12
    cd03:	jmp    c470 <md5_read_ctx>
    cd08:	nop    DWORD PTR [rax+rax*1+0x0]
    cd10:	mov    eax,DWORD PTR [rip+0xa4ca]        # 171e0 <fillbuf>
    cd16:	mov    DWORD PTR [rdx],eax
    cd18:	mov    eax,DWORD PTR [rsi+rcx*1-0x4]
    cd1c:	mov    DWORD PTR [rdx+rcx*1-0x4],eax
    cd20:	jmp    ccec <md5_finish_ctx+0xdc>
    cd22:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    cd2d:	nop    DWORD PTR [rax]

000000000000cd30 <md5_process_bytes>:
    cd30:	endbr64 
    cd34:	push   r15
    cd36:	push   r14
    cd38:	mov    r14,rdx
    cd3b:	push   r13
    cd3d:	push   r12
    cd3f:	push   rbp
    cd40:	mov    rbp,rsi
    cd43:	push   rbx
    cd44:	mov    rbx,rdi
    cd47:	sub    rsp,0x8
    cd4b:	mov    eax,DWORD PTR [rdx+0x18]
    cd4e:	test   eax,eax
    cd50:	jne    ce90 <md5_process_bytes+0x160>
    cd56:	cmp    rbp,0x3f
    cd5a:	jbe    ce73 <md5_process_bytes+0x143>
    cd60:	test   bl,0x3
    cd63:	je     ce58 <md5_process_bytes+0x128>
    cd69:	lea    r12,[r14+0x1c]
    cd6d:	cmp    rbp,0x40
    cd71:	je     cff8 <md5_process_bytes+0x2c8>
    cd77:	lea    rax,[rbp-0x41]
    cd7b:	shr    rax,0x6
    cd7f:	mov    r15,rax
    cd82:	lea    rax,[rax+0x1]
    cd86:	shl    rax,0x6
    cd8a:	lea    r13,[rbx+rax*1]
    cd8e:	xchg   ax,ax
    cd90:	movdqu xmm0,XMMWORD PTR [rbx]
    cd94:	mov    rdx,r14
    cd97:	mov    esi,0x40
    cd9c:	mov    rdi,r12
    cd9f:	add    rbx,0x40
    cda3:	movups XMMWORD PTR [r12],xmm0
    cda8:	movdqu xmm1,XMMWORD PTR [rbx-0x30]
    cdad:	movups XMMWORD PTR [r12+0x10],xmm1
    cdb3:	movdqu xmm2,XMMWORD PTR [rbx-0x20]
    cdb8:	movups XMMWORD PTR [r12+0x20],xmm2
    cdbe:	movdqu xmm3,XMMWORD PTR [rbx-0x10]
    cdc3:	movups XMMWORD PTR [r12+0x30],xmm3
    cdc9:	call   c490 <md5_process_block>
    cdce:	cmp    rbx,r13
    cdd1:	jne    cd90 <md5_process_bytes+0x60>
    cdd3:	mov    rax,r15
    cdd6:	neg    rax
    cdd9:	shl    rax,0x6
    cddd:	lea    rbp,[rbp+rax*1-0x40]
    cde2:	mov    esi,DWORD PTR [r14+0x18]
    cde6:	lea    rcx,[r12+rsi*1]
    cdea:	cmp    ebp,0x8
    cded:	jae    ced8 <md5_process_bytes+0x1a8>
    cdf3:	test   bpl,0x4
    cdf7:	jne    d000 <md5_process_bytes+0x2d0>
    cdfd:	test   ebp,ebp
    cdff:	je     ce12 <md5_process_bytes+0xe2>
    ce01:	movzx  eax,BYTE PTR [r13+0x0]
    ce06:	mov    BYTE PTR [rcx],al
    ce08:	test   bpl,0x2
    ce0c:	jne    d016 <md5_process_bytes+0x2e6>
    ce12:	add    rbp,rsi
    ce15:	cmp    rbp,0x3f
    ce19:	jbe    ce3e <md5_process_bytes+0x10e>
    ce1b:	mov    rdx,r14
    ce1e:	mov    esi,0x40
    ce23:	mov    rdi,r12
    ce26:	sub    rbp,0x40
    ce2a:	call   c490 <md5_process_block>
    ce2f:	lea    rsi,[r14+0x5c]
    ce33:	mov    rdx,rbp
    ce36:	mov    rdi,r12
    ce39:	call   3b80 <memcpy@plt>
    ce3e:	mov    DWORD PTR [r14+0x18],ebp
    ce42:	add    rsp,0x8
    ce46:	pop    rbx
    ce47:	pop    rbp
    ce48:	pop    r12
    ce4a:	pop    r13
    ce4c:	pop    r14
    ce4e:	pop    r15
    ce50:	ret    
    ce51:	nop    DWORD PTR [rax+0x0]
    ce58:	mov    r12,rbp
    ce5b:	mov    rdi,rbx
    ce5e:	mov    rdx,r14
    ce61:	and    ebp,0x3f
    ce64:	and    r12,0xffffffffffffffc0
    ce68:	mov    rsi,r12
    ce6b:	add    rbx,r12
    ce6e:	call   c490 <md5_process_block>
    ce73:	test   rbp,rbp
    ce76:	jne    d028 <md5_process_bytes+0x2f8>
    ce7c:	add    rsp,0x8
    ce80:	pop    rbx
    ce81:	pop    rbp
    ce82:	pop    r12
    ce84:	pop    r13
    ce86:	pop    r14
    ce88:	pop    r15
    ce8a:	ret    
    ce8b:	nop    DWORD PTR [rax+rax*1+0x0]
    ce90:	mov    r12d,eax
    ce93:	mov    eax,0x80
    ce98:	lea    r15,[rdx+0x1c]
    ce9c:	sub    rax,r12
    ce9f:	lea    rdi,[r15+r12*1]
    cea3:	cmp    rax,rsi
    cea6:	cmova  rax,rsi
    ceaa:	mov    rsi,rbx
    cead:	mov    rdx,rax
    ceb0:	mov    r13,rax
    ceb3:	call   3b80 <memcpy@plt>
    ceb8:	mov    esi,DWORD PTR [r14+0x18]
    cebc:	add    esi,r13d
    cebf:	mov    DWORD PTR [r14+0x18],esi
    cec3:	cmp    esi,0x40
    cec6:	ja     cf30 <md5_process_bytes+0x200>
    cec8:	add    rbx,r13
    cecb:	sub    rbp,r13
    cece:	jmp    cd56 <md5_process_bytes+0x26>
    ced3:	nop    DWORD PTR [rax+rax*1+0x0]
    ced8:	mov    rax,QWORD PTR [r13+0x0]
    cedc:	lea    r8,[rcx+0x8]
    cee0:	and    r8,0xfffffffffffffff8
    cee4:	mov    QWORD PTR [rcx],rax
    cee7:	mov    eax,ebp
    cee9:	mov    rdx,QWORD PTR [r13+rax*1-0x8]
    ceee:	mov    QWORD PTR [rcx+rax*1-0x8],rdx
    cef3:	sub    rcx,r8
    cef6:	mov    rax,r13
    cef9:	mov    rdx,rcx
    cefc:	sub    rax,rcx
    ceff:	add    edx,ebp
    cf01:	and    edx,0xfffffff8
    cf04:	cmp    edx,0x8
    cf07:	jb     ce12 <md5_process_bytes+0xe2>
    cf0d:	and    edx,0xfffffff8
    cf10:	xor    ecx,ecx
    cf12:	mov    edi,ecx
    cf14:	add    ecx,0x8
    cf17:	mov    r9,QWORD PTR [rax+rdi*1]
    cf1b:	mov    QWORD PTR [r8+rdi*1],r9
    cf1f:	cmp    ecx,edx
    cf21:	jb     cf12 <md5_process_bytes+0x1e2>
    cf23:	jmp    ce12 <md5_process_bytes+0xe2>
    cf28:	nop    DWORD PTR [rax+rax*1+0x0]
    cf30:	mov    rdx,r14
    cf33:	and    esi,0xffffffc0
    cf36:	mov    rdi,r15
    cf39:	call   c490 <md5_process_block>
    cf3e:	mov    ecx,DWORD PTR [r14+0x18]
    cf42:	lea    rax,[r12+r13*1]
    cf46:	and    rax,0xffffffffffffffc0
    cf4a:	mov    edx,ecx
    cf4c:	add    rax,r15
    cf4f:	and    edx,0x3f
    cf52:	mov    DWORD PTR [r14+0x18],edx
    cf56:	cmp    edx,0x8
    cf59:	jae    cf90 <md5_process_bytes+0x260>
    cf5b:	test   cl,0x4
    cf5e:	jne    cfdf <md5_process_bytes+0x2af>
    cf60:	test   edx,edx
    cf62:	je     cec8 <md5_process_bytes+0x198>
    cf68:	movzx  esi,BYTE PTR [rax]
    cf6b:	and    ecx,0x2
    cf6e:	mov    BYTE PTR [r14+0x1c],sil
    cf72:	je     cec8 <md5_process_bytes+0x198>
    cf78:	movzx  eax,WORD PTR [rax+rdx*1-0x2]
    cf7d:	mov    WORD PTR [r15+rdx*1-0x2],ax
    cf83:	jmp    cec8 <md5_process_bytes+0x198>
    cf88:	nop    DWORD PTR [rax+rax*1+0x0]
    cf90:	mov    rcx,QWORD PTR [rax]
    cf93:	mov    QWORD PTR [r14+0x1c],rcx
    cf97:	mov    ecx,edx
    cf99:	mov    rsi,QWORD PTR [rax+rcx*1-0x8]
    cf9e:	mov    QWORD PTR [r15+rcx*1-0x8],rsi
    cfa3:	lea    rsi,[r14+0x24]
    cfa7:	and    rsi,0xfffffffffffffff8
    cfab:	sub    r15,rsi
    cfae:	sub    rax,r15
    cfb1:	add    r15d,edx
    cfb4:	and    r15d,0xfffffff8
    cfb8:	cmp    r15d,0x8
    cfbc:	jb     cec8 <md5_process_bytes+0x198>
    cfc2:	and    r15d,0xfffffff8
    cfc6:	xor    edx,edx
    cfc8:	mov    ecx,edx
    cfca:	add    edx,0x8
    cfcd:	mov    rdi,QWORD PTR [rax+rcx*1]
    cfd1:	mov    QWORD PTR [rsi+rcx*1],rdi
    cfd5:	cmp    edx,r15d
    cfd8:	jb     cfc8 <md5_process_bytes+0x298>
    cfda:	jmp    cec8 <md5_process_bytes+0x198>
    cfdf:	mov    ecx,DWORD PTR [rax]
    cfe1:	mov    DWORD PTR [r14+0x1c],ecx
    cfe5:	mov    eax,DWORD PTR [rax+rdx*1-0x4]
    cfe9:	mov    DWORD PTR [r15+rdx*1-0x4],eax
    cfee:	jmp    cec8 <md5_process_bytes+0x198>
    cff3:	nop    DWORD PTR [rax+rax*1+0x0]
    cff8:	mov    r13,rbx
    cffb:	jmp    cde2 <md5_process_bytes+0xb2>
    d000:	mov    eax,DWORD PTR [r13+0x0]
    d004:	mov    DWORD PTR [rcx],eax
    d006:	mov    eax,ebp
    d008:	mov    edx,DWORD PTR [r13+rax*1-0x4]
    d00d:	mov    DWORD PTR [rcx+rax*1-0x4],edx
    d011:	jmp    ce12 <md5_process_bytes+0xe2>
    d016:	mov    eax,ebp
    d018:	movzx  edx,WORD PTR [r13+rax*1-0x2]
    d01e:	mov    WORD PTR [rcx+rax*1-0x2],dx
    d023:	jmp    ce12 <md5_process_bytes+0xe2>
    d028:	lea    r12,[r14+0x1c]
    d02c:	mov    r13,rbx
    d02f:	jmp    cde2 <md5_process_bytes+0xb2>
    d034:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    d03f:	nop

000000000000d040 <md5_buffer>:
    d040:	endbr64 
    d044:	push   r12
    d046:	push   rbp
    d047:	mov    rbp,rdx
    d04a:	sub    rsp,0xb8
    d051:	mov    rax,QWORD PTR fs:0x28
    d05a:	mov    QWORD PTR [rsp+0xa8],rax
    d062:	xor    eax,eax
    d064:	mov    r12,rsp
    d067:	mov    DWORD PTR [rsp+0x18],0x0
    d06f:	movabs rax,0xefcdab8967452301
    d079:	mov    QWORD PTR [rsp],rax
    d07d:	mov    rdx,r12
    d080:	movabs rax,0x1032547698badcfe
    d08a:	mov    QWORD PTR [rsp+0x8],rax
    d08f:	mov    QWORD PTR [rsp+0x10],0x0
    d098:	call   cd30 <md5_process_bytes>
    d09d:	mov    rsi,rbp
    d0a0:	mov    rdi,r12
    d0a3:	call   cc10 <md5_finish_ctx>
    d0a8:	mov    rcx,QWORD PTR [rsp+0xa8]
    d0b0:	xor    rcx,QWORD PTR fs:0x28
    d0b9:	jne    d0c6 <md5_buffer+0x86>
    d0bb:	add    rsp,0xb8
    d0c2:	pop    rbp
    d0c3:	pop    r12
    d0c5:	ret    
    d0c6:	call   3990 <__stack_chk_fail@plt>
    d0cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d0d0 <fdadvise>:
    d0d0:	endbr64 
    d0d4:	jmp    3ab0 <posix_fadvise@plt>
    d0d9:	nop    DWORD PTR [rax+0x0]

000000000000d0e0 <fadvise>:
    d0e0:	endbr64 
    d0e4:	test   rdi,rdi
    d0e7:	je     d108 <fadvise+0x28>
    d0e9:	push   r12
    d0eb:	mov    r12d,esi
    d0ee:	call   3b90 <fileno@plt>
    d0f3:	mov    ecx,r12d
    d0f6:	xor    edx,edx
    d0f8:	xor    esi,esi
    d0fa:	mov    edi,eax
    d0fc:	pop    r12
    d0fe:	jmp    3ab0 <posix_fadvise@plt>
    d103:	nop    DWORD PTR [rax+rax*1+0x0]
    d108:	ret    
    d109:	nop    DWORD PTR [rax+0x0]

000000000000d110 <rpl_fclose>:
    d110:	endbr64 
    d114:	push   r12
    d116:	push   rbp
    d117:	mov    rbp,rdi
    d11a:	push   rbx
    d11b:	call   3b90 <fileno@plt>
    d120:	mov    rdi,rbp
    d123:	test   eax,eax
    d125:	js     d17f <rpl_fclose+0x6f>
    d127:	call   3c50 <__freading@plt>
    d12c:	test   eax,eax
    d12e:	jne    d160 <rpl_fclose+0x50>
    d130:	mov    rdi,rbp
    d133:	call   d1a0 <rpl_fflush>
    d138:	test   eax,eax
    d13a:	je     d17c <rpl_fclose+0x6c>
    d13c:	call   3810 <__errno_location@plt>
    d141:	mov    rdi,rbp
    d144:	mov    r12d,DWORD PTR [rax]
    d147:	mov    rbx,rax
    d14a:	call   3930 <fclose@plt>
    d14f:	test   r12d,r12d
    d152:	jne    d190 <rpl_fclose+0x80>
    d154:	pop    rbx
    d155:	pop    rbp
    d156:	pop    r12
    d158:	ret    
    d159:	nop    DWORD PTR [rax+0x0]
    d160:	mov    rdi,rbp
    d163:	call   3b90 <fileno@plt>
    d168:	xor    esi,esi
    d16a:	mov    edx,0x1
    d16f:	mov    edi,eax
    d171:	call   3a30 <lseek@plt>
    d176:	cmp    rax,0xffffffffffffffff
    d17a:	jne    d130 <rpl_fclose+0x20>
    d17c:	mov    rdi,rbp
    d17f:	pop    rbx
    d180:	pop    rbp
    d181:	pop    r12
    d183:	jmp    3930 <fclose@plt>
    d188:	nop    DWORD PTR [rax+rax*1+0x0]
    d190:	mov    DWORD PTR [rbx],r12d
    d193:	mov    eax,0xffffffff
    d198:	jmp    d154 <rpl_fclose+0x44>
    d19a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000d1a0 <rpl_fflush>:
    d1a0:	endbr64 
    d1a4:	push   rbp
    d1a5:	mov    rbp,rdi
    d1a8:	test   rdi,rdi
    d1ab:	je     d1bf <rpl_fflush+0x1f>
    d1ad:	call   3c50 <__freading@plt>
    d1b2:	test   eax,eax
    d1b4:	je     d1bf <rpl_fflush+0x1f>
    d1b6:	test   DWORD PTR [rbp+0x0],0x100
    d1bd:	jne    d1d0 <rpl_fflush+0x30>
    d1bf:	mov    rdi,rbp
    d1c2:	pop    rbp
    d1c3:	jmp    3c00 <fflush@plt>
    d1c8:	nop    DWORD PTR [rax+rax*1+0x0]
    d1d0:	mov    rdi,rbp
    d1d3:	mov    edx,0x1
    d1d8:	xor    esi,esi
    d1da:	call   d7c0 <rpl_fseeko>
    d1df:	mov    rdi,rbp
    d1e2:	pop    rbp
    d1e3:	jmp    3c00 <fflush@plt>
    d1e8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d1f0 <file_prefixlen>:
    d1f0:	mov    r9,rsi
    d1f3:	xor    edx,edx
    d1f5:	mov    rsi,QWORD PTR [rsi]
    d1f8:	xor    r8d,r8d
    d1fb:	jmp    d204 <file_prefixlen+0x14>
    d1fd:	nop    DWORD PTR [rax]
    d200:	cmp    al,0x40
    d202:	jg     d24b <file_prefixlen+0x5b>
    d204:	cmp    rsi,rdx
    d207:	sete   al
    d20a:	test   rsi,rsi
    d20d:	jns    d216 <file_prefixlen+0x26>
    d20f:	cmp    BYTE PTR [rdi+rdx*1],0x0
    d213:	sete   al
    d216:	test   al,al
    d218:	jne    d293 <file_prefixlen+0xa3>
    d21a:	lea    r8,[rdx+0x1]
    d21e:	lea    rax,[rdx+0x2]
    d222:	mov    rdx,r8
    d225:	cmp    rsi,rax
    d228:	jbe    d204 <file_prefixlen+0x14>
    d22a:	nop    WORD PTR [rax+rax*1+0x0]
    d230:	cmp    BYTE PTR [rdi+rdx*1],0x2e
    d234:	jne    d204 <file_prefixlen+0x14>
    d236:	movzx  eax,BYTE PTR [rdi+rdx*1+0x1]
    d23b:	cmp    al,0x5a
    d23d:	jle    d200 <file_prefixlen+0x10>
    d23f:	lea    ecx,[rax-0x61]
    d242:	cmp    cl,0x19
    d245:	jbe    d24b <file_prefixlen+0x5b>
    d247:	cmp    al,0x7e
    d249:	jne    d204 <file_prefixlen+0x14>
    d24b:	add    rdx,0x2
    d24f:	cmp    rsi,rdx
    d252:	jbe    d267 <file_prefixlen+0x77>
    d254:	movzx  eax,BYTE PTR [rdi+rdx*1]
    d258:	cmp    al,0x5a
    d25a:	jg     d278 <file_prefixlen+0x88>
    d25c:	cmp    al,0x40
    d25e:	jg     d288 <file_prefixlen+0x98>
    d260:	sub    eax,0x30
    d263:	cmp    al,0x9
    d265:	jbe    d288 <file_prefixlen+0x98>
    d267:	lea    rax,[rdx+0x1]
    d26b:	cmp    rax,rsi
    d26e:	jb     d230 <file_prefixlen+0x40>
    d270:	jmp    d204 <file_prefixlen+0x14>
    d272:	nop    WORD PTR [rax+rax*1+0x0]
    d278:	lea    ecx,[rax-0x61]
    d27b:	cmp    cl,0x19
    d27e:	jbe    d288 <file_prefixlen+0x98>
    d280:	cmp    al,0x7e
    d282:	jne    d267 <file_prefixlen+0x77>
    d284:	nop    DWORD PTR [rax+0x0]
    d288:	add    rdx,0x1
    d28c:	cmp    rdx,rsi
    d28f:	jb     d254 <file_prefixlen+0x64>
    d291:	jmp    d267 <file_prefixlen+0x77>
    d293:	mov    QWORD PTR [r9],rdx
    d296:	mov    rax,r8
    d299:	ret    
    d29a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000d2a0 <verrevcmp>:
    d2a0:	xor    eax,eax
    d2a2:	xor    r8d,r8d
    d2a5:	cmp    rax,rsi
    d2a8:	jl     d2b3 <verrevcmp+0x13>
    d2aa:	cmp    r8,rcx
    d2ad:	jge    d52e <verrevcmp+0x28e>
    d2b3:	push   r12
    d2b5:	push   rbp
    d2b6:	push   rbx
    d2b7:	mov    rbx,r8
    d2ba:	sub    rbx,rax
    d2bd:	cmp    rax,rsi
    d2c0:	jge    d34b <verrevcmp+0xab>
    d2c6:	movzx  r9d,BYTE PTR [rdi+rax*1]
    d2cb:	movsx  r10d,r9b
    d2cf:	sub    r10d,0x30
    d2d3:	cmp    r10d,0x9
    d2d7:	jbe    d34b <verrevcmp+0xab>
    d2d9:	movzx  r11d,r9b
    d2dd:	lea    r10d,[r11-0x30]
    d2e1:	cmp    r10d,0x9
    d2e5:	ja     d383 <verrevcmp+0xe3>
    d2eb:	xor    r10d,r10d
    d2ee:	cmp    r8,rcx
    d2f1:	je     d493 <verrevcmp+0x1f3>
    d2f7:	movzx  r9d,BYTE PTR [rdx+r8*1]
    d2fc:	xor    r11d,r11d
    d2ff:	movzx  ebp,r9b
    d303:	lea    r12d,[rbp-0x30]
    d307:	cmp    r12d,0x9
    d30b:	jbe    d331 <verrevcmp+0x91>
    d30d:	mov    r11d,ebp
    d310:	cmp    r9b,0x5a
    d314:	jg     d460 <verrevcmp+0x1c0>
    d31a:	cmp    r9b,0x40
    d31e:	jg     d331 <verrevcmp+0x91>
    d320:	cmp    r9b,0x7e
    d324:	je     d560 <verrevcmp+0x2c0>
    d32a:	lea    r11d,[rbp+0x100]
    d331:	cmp    r11d,r10d
    d334:	jne    d499 <verrevcmp+0x1f9>
    d33a:	add    rax,0x1
    d33e:	add    r8,0x1
    d342:	cmp    rax,rsi
    d345:	jl     d2c6 <verrevcmp+0x26>
    d34b:	cmp    r8,rcx
    d34e:	jge    d3b0 <verrevcmp+0x110>
    d350:	movsx  r10d,BYTE PTR [rdx+r8*1]
    d355:	mov    r9d,r10d
    d358:	sub    r10d,0x30
    d35c:	cmp    r10d,0x9
    d360:	jbe    d3b0 <verrevcmp+0x110>
    d362:	cmp    rax,rsi
    d365:	je     d535 <verrevcmp+0x295>
    d36b:	movzx  r11d,BYTE PTR [rdi+rax*1]
    d370:	xor    r10d,r10d
    d373:	lea    ebp,[r11-0x30]
    d377:	mov    r9d,r11d
    d37a:	cmp    ebp,0x9
    d37d:	jbe    d2f7 <verrevcmp+0x57>
    d383:	mov    r10d,r11d
    d386:	cmp    r9b,0x5a
    d38a:	jg     d478 <verrevcmp+0x1d8>
    d390:	cmp    r9b,0x40
    d394:	jg     d486 <verrevcmp+0x1e6>
    d39a:	cmp    r9b,0x7e
    d39e:	je     d555 <verrevcmp+0x2b5>
    d3a4:	lea    r10d,[r11+0x100]
    d3ab:	jmp    d2ee <verrevcmp+0x4e>
    d3b0:	cmp    rax,rsi
    d3b3:	jl     d3cd <verrevcmp+0x12d>
    d3b5:	jmp    d4e0 <verrevcmp+0x240>
    d3ba:	nop    WORD PTR [rax+rax*1+0x0]
    d3c0:	add    rax,0x1
    d3c4:	cmp    rsi,rax
    d3c7:	je     d4e0 <verrevcmp+0x240>
    d3cd:	cmp    BYTE PTR [rdi+rax*1],0x30
    d3d1:	je     d3c0 <verrevcmp+0x120>
    d3d3:	cmp    r8,rcx
    d3d6:	jl     d3ed <verrevcmp+0x14d>
    d3d8:	jmp    d4f0 <verrevcmp+0x250>
    d3dd:	nop    DWORD PTR [rax]
    d3e0:	add    r8,0x1
    d3e4:	cmp    rcx,r8
    d3e7:	je     d4f0 <verrevcmp+0x250>
    d3ed:	cmp    BYTE PTR [rdx+r8*1],0x30
    d3f2:	je     d3e0 <verrevcmp+0x140>
    d3f4:	xor    r10d,r10d
    d3f7:	cmp    rsi,rax
    d3fa:	jle    d56b <verrevcmp+0x2cb>
    d400:	cmp    rcx,r8
    d403:	jle    d56b <verrevcmp+0x2cb>
    d409:	movsx  r9d,BYTE PTR [rdi+rax*1]
    d40e:	lea    r11d,[r9-0x30]
    d412:	cmp    r11d,0x9
    d416:	jbe    d4a8 <verrevcmp+0x208>
    d41c:	cmp    rcx,r8
    d41f:	jle    d434 <verrevcmp+0x194>
    d421:	movsx  r9d,BYTE PTR [rdx+r8*1]
    d426:	sub    r9d,0x30
    d42a:	cmp    r9d,0x9
    d42e:	jbe    d520 <verrevcmp+0x280>
    d434:	test   r10d,r10d
    d437:	jne    d516 <verrevcmp+0x276>
    d43d:	cmp    rax,rsi
    d440:	jl     d2b7 <verrevcmp+0x17>
    d446:	cmp    r8,rcx
    d449:	jl     d2b7 <verrevcmp+0x17>
    d44f:	xor    r10d,r10d
    d452:	jmp    d516 <verrevcmp+0x276>
    d457:	nop    WORD PTR [rax+rax*1+0x0]
    d460:	lea    r12d,[r9-0x61]
    d464:	cmp    r12b,0x19
    d468:	jbe    d331 <verrevcmp+0x91>
    d46e:	jmp    d320 <verrevcmp+0x80>
    d473:	nop    DWORD PTR [rax+rax*1+0x0]
    d478:	lea    ebp,[r9-0x61]
    d47c:	cmp    bpl,0x19
    d480:	ja     d39a <verrevcmp+0xfa>
    d486:	lea    r9,[rbx+rax*1]
    d48a:	cmp    rcx,r9
    d48d:	jne    d2f7 <verrevcmp+0x57>
    d493:	mov    r11d,0xffffffff
    d499:	sub    r10d,r11d
    d49c:	pop    rbx
    d49d:	pop    rbp
    d49e:	mov    eax,r10d
    d4a1:	pop    r12
    d4a3:	ret    
    d4a4:	nop    DWORD PTR [rax+0x0]
    d4a8:	movsx  r11d,BYTE PTR [rdx+r8*1]
    d4ad:	lea    ebx,[r11-0x30]
    d4b1:	cmp    ebx,0x9
    d4b4:	ja     d510 <verrevcmp+0x270>
    d4b6:	sub    r9d,r11d
    d4b9:	test   r10d,r10d
    d4bc:	cmove  r10d,r9d
    d4c0:	add    rax,0x1
    d4c4:	add    r8,0x1
    d4c8:	cmp    rsi,rax
    d4cb:	jg     d400 <verrevcmp+0x160>
    d4d1:	jmp    d41c <verrevcmp+0x17c>
    d4d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d4e0:	cmp    r8,rcx
    d4e3:	jl     d3ed <verrevcmp+0x14d>
    d4e9:	jmp    d43d <verrevcmp+0x19d>
    d4ee:	xchg   ax,ax
    d4f0:	cmp    rsi,rax
    d4f3:	jle    d43d <verrevcmp+0x19d>
    d4f9:	xor    r10d,r10d
    d4fc:	movsx  r9d,BYTE PTR [rdi+rax*1]
    d501:	sub    r9d,0x30
    d505:	cmp    r9d,0x9
    d509:	ja     d41c <verrevcmp+0x17c>
    d50f:	nop
    d510:	mov    r10d,0x1
    d516:	pop    rbx
    d517:	mov    eax,r10d
    d51a:	pop    rbp
    d51b:	pop    r12
    d51d:	ret    
    d51e:	xchg   ax,ax
    d520:	mov    r10d,0xffffffff
    d526:	pop    rbx
    d527:	pop    rbp
    d528:	mov    eax,r10d
    d52b:	pop    r12
    d52d:	ret    
    d52e:	xor    r10d,r10d
    d531:	mov    eax,r10d
    d534:	ret    
    d535:	movzx  ebp,r9b
    d539:	lea    r10d,[rbp-0x30]
    d53d:	cmp    r10d,0x9
    d541:	mov    r10d,0xffffffff
    d547:	ja     d30d <verrevcmp+0x6d>
    d54d:	xor    r11d,r11d
    d550:	jmp    d499 <verrevcmp+0x1f9>
    d555:	mov    r10d,0xfffffffe
    d55b:	jmp    d2ee <verrevcmp+0x4e>
    d560:	mov    r11d,0xfffffffe
    d566:	jmp    d331 <verrevcmp+0x91>
    d56b:	cmp    rsi,rax
    d56e:	jle    d41c <verrevcmp+0x17c>
    d574:	jmp    d4fc <verrevcmp+0x25c>
    d576:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000d580 <filenvercmp>:
    d580:	endbr64 
    d584:	push   r13
    d586:	push   r12
    d588:	mov    r12,rdx
    d58b:	push   rbp
    d58c:	mov    rbp,rdi
    d58f:	sub    rsp,0x10
    d593:	mov    QWORD PTR [rsp],rcx
    d597:	mov    rcx,rsi
    d59a:	mov    QWORD PTR [rsp+0x8],rsi
    d59f:	test   rsi,rsi
    d5a2:	js     d640 <filenvercmp+0xc0>
    d5a8:	sete   al
    d5ab:	mov    rdx,QWORD PTR [rsp]
    d5af:	test   rdx,rdx
    d5b2:	sete   sil
    d5b6:	jns    d5c1 <filenvercmp+0x41>
    d5b8:	cmp    BYTE PTR [r12],0x0
    d5bd:	sete   sil
    d5c1:	test   al,al
    d5c3:	jne    d650 <filenvercmp+0xd0>
    d5c9:	mov    eax,0x1
    d5ce:	test   sil,sil
    d5d1:	jne    d634 <filenvercmp+0xb4>
    d5d3:	cmp    BYTE PTR [rbp+0x0],0x2e
    d5d7:	movzx  esi,BYTE PTR [r12]
    d5dc:	je     d680 <filenvercmp+0x100>
    d5e2:	cmp    sil,0x2e
    d5e6:	je     d634 <filenvercmp+0xb4>
    d5e8:	lea    rsi,[rsp+0x8]
    d5ed:	mov    rdi,rbp
    d5f0:	call   d1f0 <file_prefixlen>
    d5f5:	mov    rsi,rsp
    d5f8:	mov    rdi,r12
    d5fb:	mov    r10,rax
    d5fe:	call   d1f0 <file_prefixlen>
    d603:	mov    r13,QWORD PTR [rsp+0x8]
    d608:	mov    rdx,r12
    d60b:	mov    rcx,rax
    d60e:	cmp    r13,r10
    d611:	je     d668 <filenvercmp+0xe8>
    d613:	mov    rsi,r10
    d616:	mov    rdi,rbp
    d619:	call   d2a0 <verrevcmp>
    d61e:	test   eax,eax
    d620:	jne    d634 <filenvercmp+0xb4>
    d622:	mov    rcx,QWORD PTR [rsp]
    d626:	mov    rdx,r12
    d629:	mov    rsi,r13
    d62c:	mov    rdi,rbp
    d62f:	call   d2a0 <verrevcmp>
    d634:	add    rsp,0x10
    d638:	pop    rbp
    d639:	pop    r12
    d63b:	pop    r13
    d63d:	ret    
    d63e:	xchg   ax,ax
    d640:	cmp    BYTE PTR [rdi],0x0
    d643:	sete   al
    d646:	jmp    d5ab <filenvercmp+0x2b>
    d64b:	nop    DWORD PTR [rax+rax*1+0x0]
    d650:	xor    esi,0x1
    d653:	add    rsp,0x10
    d657:	movzx  eax,sil
    d65b:	pop    rbp
    d65c:	pop    r12
    d65e:	neg    eax
    d660:	pop    r13
    d662:	ret    
    d663:	nop    DWORD PTR [rax+rax*1+0x0]
    d668:	mov    rsi,r13
    d66b:	mov    rdi,rbp
    d66e:	call   d2a0 <verrevcmp>
    d673:	cmp    QWORD PTR [rsp],rcx
    d677:	jne    d61e <filenvercmp+0x9e>
    d679:	jmp    d634 <filenvercmp+0xb4>
    d67b:	nop    DWORD PTR [rax+rax*1+0x0]
    d680:	cmp    sil,0x2e
    d684:	jne    d6e9 <filenvercmp+0x169>
    d686:	cmp    rcx,0x1
    d68a:	sete   al
    d68d:	test   rcx,rcx
    d690:	jns    d699 <filenvercmp+0x119>
    d692:	cmp    BYTE PTR [rbp+0x1],0x0
    d696:	sete   al
    d699:	cmp    rdx,0x1
    d69d:	sete   sil
    d6a1:	test   rdx,rdx
    d6a4:	jns    d6b0 <filenvercmp+0x130>
    d6a6:	cmp    BYTE PTR [r12+0x1],0x0
    d6ac:	sete   sil
    d6b0:	test   al,al
    d6b2:	jne    d650 <filenvercmp+0xd0>
    d6b4:	mov    eax,0x1
    d6b9:	test   sil,sil
    d6bc:	jne    d634 <filenvercmp+0xb4>
    d6c2:	cmp    BYTE PTR [rbp+0x1],0x2e
    d6c6:	je     d6f8 <filenvercmp+0x178>
    d6c8:	cmp    BYTE PTR [r12+0x1],0x2e
    d6ce:	jne    d5e8 <filenvercmp+0x68>
    d6d4:	xor    eax,eax
    d6d6:	test   rdx,rdx
    d6d9:	js     d718 <filenvercmp+0x198>
    d6db:	cmp    rdx,0x2
    d6df:	je     d720 <filenvercmp+0x1a0>
    d6e1:	test   eax,eax
    d6e3:	je     d5e8 <filenvercmp+0x68>
    d6e9:	mov    eax,0xffffffff
    d6ee:	jmp    d634 <filenvercmp+0xb4>
    d6f3:	nop    DWORD PTR [rax+rax*1+0x0]
    d6f8:	test   rcx,rcx
    d6fb:	js     d728 <filenvercmp+0x1a8>
    d6fd:	cmp    rcx,0x2
    d701:	jne    d6c8 <filenvercmp+0x148>
    d703:	cmp    BYTE PTR [r12+0x1],0x2e
    d709:	jne    d6e9 <filenvercmp+0x169>
    d70b:	mov    eax,0x1
    d710:	jmp    d6d6 <filenvercmp+0x156>
    d712:	nop    WORD PTR [rax+rax*1+0x0]
    d718:	cmp    BYTE PTR [r12+0x2],0x0
    d71e:	jne    d6e1 <filenvercmp+0x161>
    d720:	xor    eax,0x1
    d723:	jmp    d634 <filenvercmp+0xb4>
    d728:	cmp    BYTE PTR [rbp+0x2],0x0
    d72c:	je     d703 <filenvercmp+0x183>
    d72e:	jmp    d6c8 <filenvercmp+0x148>

000000000000d730 <filevercmp>:
    d730:	endbr64 
    d734:	mov    rdx,rsi
    d737:	mov    rcx,0xffffffffffffffff
    d73e:	mov    rsi,0xffffffffffffffff
    d745:	jmp    d580 <filenvercmp>
    d74a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000d750 <rpl_free>:
    d750:	endbr64 
    d754:	push   rbp
    d755:	mov    rbp,rdi
    d758:	push   rbx
    d759:	sub    rsp,0x18
    d75d:	mov    rax,QWORD PTR fs:0x28
    d766:	mov    QWORD PTR [rsp+0x8],rax
    d76b:	xor    eax,eax
    d76d:	call   3810 <__errno_location@plt>
    d772:	mov    rdi,rbp
    d775:	mov    rbx,rax
    d778:	mov    eax,DWORD PTR [rax]
    d77a:	mov    DWORD PTR [rbx],0x0
    d780:	mov    DWORD PTR [rsp],eax
    d783:	mov    DWORD PTR [rsp+0x4],eax
    d787:	call   37d0 <free@plt>
    d78c:	mov    edx,DWORD PTR [rbx]
    d78e:	xor    eax,eax
    d790:	test   edx,edx
    d792:	sete   al
    d795:	mov    eax,DWORD PTR [rsp+rax*4]
    d798:	mov    DWORD PTR [rbx],eax
    d79a:	mov    rax,QWORD PTR [rsp+0x8]
    d79f:	xor    rax,QWORD PTR fs:0x28
    d7a8:	jne    d7b1 <rpl_free+0x61>
    d7aa:	add    rsp,0x18
    d7ae:	pop    rbx
    d7af:	pop    rbp
    d7b0:	ret    
    d7b1:	call   3990 <__stack_chk_fail@plt>
    d7b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000d7c0 <rpl_fseeko>:
    d7c0:	endbr64 
    d7c4:	push   rbp
    d7c5:	mov    rbp,rdi
    d7c8:	sub    rsp,0x10
    d7cc:	mov    rax,QWORD PTR [rdi+0x8]
    d7d0:	cmp    QWORD PTR [rdi+0x10],rax
    d7d4:	je     d7e8 <rpl_fseeko+0x28>
    d7d6:	add    rsp,0x10
    d7da:	mov    rdi,rbp
    d7dd:	pop    rbp
    d7de:	jmp    3d30 <fseeko@plt>
    d7e3:	nop    DWORD PTR [rax+rax*1+0x0]
    d7e8:	mov    rax,QWORD PTR [rdi+0x20]
    d7ec:	cmp    QWORD PTR [rdi+0x28],rax
    d7f0:	jne    d7d6 <rpl_fseeko+0x16>
    d7f2:	cmp    QWORD PTR [rdi+0x48],0x0
    d7f7:	jne    d7d6 <rpl_fseeko+0x16>
    d7f9:	mov    DWORD PTR [rsp+0xc],edx
    d7fd:	mov    QWORD PTR [rsp],rsi
    d801:	call   3b90 <fileno@plt>
    d806:	mov    edx,DWORD PTR [rsp+0xc]
    d80a:	mov    rsi,QWORD PTR [rsp]
    d80e:	mov    edi,eax
    d810:	call   3a30 <lseek@plt>
    d815:	cmp    rax,0xffffffffffffffff
    d819:	je     d82e <rpl_fseeko+0x6e>
    d81b:	and    DWORD PTR [rbp+0x0],0xffffffef
    d81f:	mov    QWORD PTR [rbp+0x90],rax
    d826:	xor    eax,eax
    d828:	add    rsp,0x10
    d82c:	pop    rbp
    d82d:	ret    
    d82e:	or     eax,0xffffffff
    d831:	jmp    d828 <rpl_fseeko+0x68>
    d833:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d83d:	nop    DWORD PTR [rax]

000000000000d840 <hard_locale>:
    d840:	endbr64 
    d844:	sub    rsp,0x118
    d84b:	mov    edx,0x101
    d850:	mov    rax,QWORD PTR fs:0x28
    d859:	mov    QWORD PTR [rsp+0x108],rax
    d861:	xor    eax,eax
    d863:	mov    rsi,rsp
    d866:	call   12270 <setlocale_null_r>
    d86b:	mov    r8d,eax
    d86e:	xor    eax,eax
    d870:	test   r8d,r8d
    d873:	jne    d88a <hard_locale+0x4a>
    d875:	cmp    WORD PTR [rsp],0x43
    d87a:	je     d88a <hard_locale+0x4a>
    d87c:	cmp    DWORD PTR [rsp],0x49534f50
    d883:	je     d8a8 <hard_locale+0x68>
    d885:	mov    eax,0x1
    d88a:	mov    rcx,QWORD PTR [rsp+0x108]
    d892:	xor    rcx,QWORD PTR fs:0x28
    d89b:	jne    d8b4 <hard_locale+0x74>
    d89d:	add    rsp,0x118
    d8a4:	ret    
    d8a5:	nop    DWORD PTR [rax]
    d8a8:	xor    eax,eax
    d8aa:	cmp    WORD PTR [rsp+0x4],0x58
    d8b0:	jne    d885 <hard_locale+0x45>
    d8b2:	jmp    d88a <hard_locale+0x4a>
    d8b4:	call   3990 <__stack_chk_fail@plt>
    d8b9:	nop    DWORD PTR [rax+0x0]

000000000000d8c0 <raw_hasher>:
    d8c0:	endbr64 
    d8c4:	mov    rax,rdi
    d8c7:	xor    edx,edx
    d8c9:	ror    rax,0x3
    d8cd:	div    rsi
    d8d0:	mov    rax,rdx
    d8d3:	ret    
    d8d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    d8df:	nop

000000000000d8e0 <raw_comparator>:
    d8e0:	endbr64 
    d8e4:	cmp    rsi,rdi
    d8e7:	sete   al
    d8ea:	ret    
    d8eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d8f0 <safe_hasher>:
    d8f0:	push   rbx
    d8f1:	mov    rbx,rdi
    d8f4:	mov    rdi,rsi
    d8f7:	mov    rsi,QWORD PTR [rbx+0x10]
    d8fb:	call   QWORD PTR [rbx+0x30]
    d8fe:	cmp    QWORD PTR [rbx+0x10],rax
    d902:	jbe    3ed0 <safe_hasher.cold>
    d908:	shl    rax,0x4
    d90c:	add    rax,QWORD PTR [rbx]
    d90f:	pop    rbx
    d910:	ret    
    d911:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    d91c:	nop    DWORD PTR [rax+0x0]

000000000000d920 <hash_find_entry>:
    d920:	push   r14
    d922:	mov    r14,rdx
    d925:	push   r13
    d927:	mov    r13d,ecx
    d92a:	push   r12
    d92c:	mov    r12,rdi
    d92f:	push   rbp
    d930:	mov    rbp,rsi
    d933:	push   rbx
    d934:	call   d8f0 <safe_hasher>
    d939:	mov    QWORD PTR [r14],rax
    d93c:	mov    rsi,QWORD PTR [rax]
    d93f:	test   rsi,rsi
    d942:	je     d9c1 <hash_find_entry+0xa1>
    d944:	mov    rbx,rax
    d947:	cmp    rsi,rbp
    d94a:	je     da18 <hash_find_entry+0xf8>
    d950:	mov    rdi,rbp
    d953:	call   QWORD PTR [r12+0x38]
    d958:	test   al,al
    d95a:	je     d9b8 <hash_find_entry+0x98>
    d95c:	mov    rax,QWORD PTR [rbx]
    d95f:	test   r13b,r13b
    d962:	je     d9c3 <hash_find_entry+0xa3>
    d964:	mov    rdx,QWORD PTR [rbx+0x8]
    d968:	test   rdx,rdx
    d96b:	je     da08 <hash_find_entry+0xe8>
    d971:	movdqu xmm0,XMMWORD PTR [rdx]
    d975:	movups XMMWORD PTR [rbx],xmm0
    d978:	mov    QWORD PTR [rdx],0x0
    d97f:	mov    rcx,QWORD PTR [r12+0x48]
    d984:	mov    QWORD PTR [rdx+0x8],rcx
    d988:	pop    rbx
    d989:	mov    QWORD PTR [r12+0x48],rdx
    d98e:	pop    rbp
    d98f:	pop    r12
    d991:	pop    r13
    d993:	pop    r14
    d995:	ret    
    d996:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d9a0:	mov    rsi,QWORD PTR [rax]
    d9a3:	cmp    rsi,rbp
    d9a6:	je     d9d0 <hash_find_entry+0xb0>
    d9a8:	mov    rdi,rbp
    d9ab:	call   QWORD PTR [r12+0x38]
    d9b0:	test   al,al
    d9b2:	jne    d9d0 <hash_find_entry+0xb0>
    d9b4:	mov    rbx,QWORD PTR [rbx+0x8]
    d9b8:	mov    rax,QWORD PTR [rbx+0x8]
    d9bc:	test   rax,rax
    d9bf:	jne    d9a0 <hash_find_entry+0x80>
    d9c1:	xor    eax,eax
    d9c3:	pop    rbx
    d9c4:	pop    rbp
    d9c5:	pop    r12
    d9c7:	pop    r13
    d9c9:	pop    r14
    d9cb:	ret    
    d9cc:	nop    DWORD PTR [rax+0x0]
    d9d0:	mov    rdx,QWORD PTR [rbx+0x8]
    d9d4:	mov    rax,QWORD PTR [rdx]
    d9d7:	test   r13b,r13b
    d9da:	je     d9c3 <hash_find_entry+0xa3>
    d9dc:	mov    rcx,QWORD PTR [rdx+0x8]
    d9e0:	mov    QWORD PTR [rbx+0x8],rcx
    d9e4:	mov    QWORD PTR [rdx],0x0
    d9eb:	mov    rcx,QWORD PTR [r12+0x48]
    d9f0:	mov    QWORD PTR [rdx+0x8],rcx
    d9f4:	pop    rbx
    d9f5:	mov    QWORD PTR [r12+0x48],rdx
    d9fa:	pop    rbp
    d9fb:	pop    r12
    d9fd:	pop    r13
    d9ff:	pop    r14
    da01:	ret    
    da02:	nop    WORD PTR [rax+rax*1+0x0]
    da08:	mov    QWORD PTR [rbx],0x0
    da0f:	jmp    d9c3 <hash_find_entry+0xa3>
    da11:	nop    DWORD PTR [rax+0x0]
    da18:	mov    rax,rsi
    da1b:	jmp    d95f <hash_find_entry+0x3f>

000000000000da20 <check_tuning.isra.0>:
    da20:	mov    rax,QWORD PTR [rdi]
    da23:	lea    rdx,[rip+0x9876]        # 172a0 <default_tuning>
    da2a:	cmp    rax,rdx
    da2d:	je     da98 <check_tuning.isra.0+0x78>
    da2f:	movss  xmm0,DWORD PTR [rax+0x8]
    da34:	comiss xmm0,DWORD PTR [rip+0x9879]        # 172b4 <default_tuning+0x14>
    da3b:	jbe    da8e <check_tuning.isra.0+0x6e>
    da3d:	movss  xmm1,DWORD PTR [rip+0x9873]        # 172b8 <default_tuning+0x18>
    da45:	comiss xmm1,xmm0
    da48:	jbe    da8e <check_tuning.isra.0+0x6e>
    da4a:	movss  xmm1,DWORD PTR [rax+0xc]
    da4f:	comiss xmm1,DWORD PTR [rip+0x9866]        # 172bc <default_tuning+0x1c>
    da56:	jbe    da8e <check_tuning.isra.0+0x6e>
    da58:	movss  xmm1,DWORD PTR [rax]
    da5c:	comiss xmm1,DWORD PTR [rip+0x985d]        # 172c0 <default_tuning+0x20>
    da63:	jb     da8e <check_tuning.isra.0+0x6e>
    da65:	addss  xmm1,DWORD PTR [rip+0x9847]        # 172b4 <default_tuning+0x14>
    da6d:	movss  xmm2,DWORD PTR [rax+0x4]
    da72:	comiss xmm2,xmm1
    da75:	jbe    da8e <check_tuning.isra.0+0x6e>
    da77:	movss  xmm3,DWORD PTR [rip+0x9845]        # 172c4 <default_tuning+0x24>
    da7f:	comiss xmm3,xmm2
    da82:	jb     da8e <check_tuning.isra.0+0x6e>
    da84:	comiss xmm0,xmm1
    da87:	mov    eax,0x1
    da8c:	ja     da9d <check_tuning.isra.0+0x7d>
    da8e:	mov    QWORD PTR [rdi],rdx
    da91:	xor    eax,eax
    da93:	ret    
    da94:	nop    DWORD PTR [rax+0x0]
    da98:	mov    eax,0x1
    da9d:	ret    
    da9e:	xchg   ax,ax

000000000000daa0 <compute_bucket_size.isra.0>:
    daa0:	test   sil,sil
    daa3:	jne    daf0 <compute_bucket_size.isra.0+0x50>
    daa5:	movaps xmm1,xmm0
    daa8:	test   rdi,rdi
    daab:	js     dbb6 <compute_bucket_size.isra.0+0x116>
    dab1:	pxor   xmm0,xmm0
    dab5:	cvtsi2ss xmm0,rdi
    daba:	divss  xmm0,xmm1
    dabe:	comiss xmm0,DWORD PTR [rip+0x9803]        # 172c8 <default_tuning+0x28>
    dac5:	jae    db7f <compute_bucket_size.isra.0+0xdf>
    dacb:	comiss xmm0,DWORD PTR [rip+0x97fa]        # 172cc <default_tuning+0x2c>
    dad2:	jb     dbd4 <compute_bucket_size.isra.0+0x134>
    dad8:	subss  xmm0,DWORD PTR [rip+0x97ec]        # 172cc <default_tuning+0x2c>
    dae0:	cvttss2si rdi,xmm0
    dae5:	btc    rdi,0x3f
    daea:	nop    WORD PTR [rax+rax*1+0x0]
    daf0:	cmp    rdi,0xa
    daf4:	mov    r8d,0xa
    dafa:	movabs r9,0xaaaaaaaaaaaaaaab
    db04:	cmovae r8,rdi
    db08:	or     r8,0x1
    db0c:	cmp    r8,0xffffffffffffffff
    db10:	je     db7f <compute_bucket_size.isra.0+0xdf>
    db12:	nop    WORD PTR [rax+rax*1+0x0]
    db18:	mov    rax,r8
    db1b:	mov    rcx,r8
    db1e:	mul    r9
    db21:	mov    rax,rdx
    db24:	and    rdx,0xfffffffffffffffe
    db28:	shr    rax,1
    db2b:	add    rax,rdx
    db2e:	sub    rcx,rax
    db31:	mov    rax,rcx
    db34:	cmp    r8,0x9
    db38:	jbe    db70 <compute_bucket_size.isra.0+0xd0>
    db3a:	test   rcx,rcx
    db3d:	je     db75 <compute_bucket_size.isra.0+0xd5>
    db3f:	mov    edi,0x10
    db44:	mov    esi,0x9
    db49:	mov    ecx,0x3
    db4e:	jmp    db59 <compute_bucket_size.isra.0+0xb9>
    db50:	add    rdi,0x8
    db54:	test   rdx,rdx
    db57:	je     db75 <compute_bucket_size.isra.0+0xd5>
    db59:	add    rcx,0x2
    db5d:	mov    rax,r8
    db60:	xor    edx,edx
    db62:	add    rsi,rdi
    db65:	div    rcx
    db68:	mov    rax,rdx
    db6b:	cmp    r8,rsi
    db6e:	ja     db50 <compute_bucket_size.isra.0+0xb0>
    db70:	test   rax,rax
    db73:	jne    db99 <compute_bucket_size.isra.0+0xf9>
    db75:	add    r8,0x2
    db79:	cmp    r8,0xffffffffffffffff
    db7d:	jne    db18 <compute_bucket_size.isra.0+0x78>
    db7f:	sub    rsp,0x8
    db83:	call   3810 <__errno_location@plt>
    db88:	xor    r8d,r8d
    db8b:	mov    DWORD PTR [rax],0xc
    db91:	mov    rax,r8
    db94:	add    rsp,0x8
    db98:	ret    
    db99:	mov    rax,r8
    db9c:	shr    rax,0x3d
    dba0:	setne  al
    dba3:	bt     r8,0x3c
    dba8:	movzx  eax,al
    dbab:	jb     db7f <compute_bucket_size.isra.0+0xdf>
    dbad:	test   rax,rax
    dbb0:	jne    db7f <compute_bucket_size.isra.0+0xdf>
    dbb2:	mov    rax,r8
    dbb5:	ret    
    dbb6:	mov    rax,rdi
    dbb9:	and    edi,0x1
    dbbc:	pxor   xmm0,xmm0
    dbc0:	shr    rax,1
    dbc3:	or     rax,rdi
    dbc6:	cvtsi2ss xmm0,rax
    dbcb:	addss  xmm0,xmm0
    dbcf:	jmp    daba <compute_bucket_size.isra.0+0x1a>
    dbd4:	cvttss2si rdi,xmm0
    dbd9:	jmp    daf0 <compute_bucket_size.isra.0+0x50>
    dbde:	xchg   ax,ax

000000000000dbe0 <transfer_entries>:
    dbe0:	push   r15
    dbe2:	push   r14
    dbe4:	mov    r14,rdi
    dbe7:	push   r13
    dbe9:	mov    r13d,edx
    dbec:	push   r12
    dbee:	mov    r12,rsi
    dbf1:	push   rbp
    dbf2:	push   rbx
    dbf3:	sub    rsp,0x8
    dbf7:	mov    rbp,QWORD PTR [rsi]
    dbfa:	cmp    rbp,QWORD PTR [rsi+0x8]
    dbfe:	jb     dc17 <transfer_entries+0x37>
    dc00:	jmp    dce2 <transfer_entries+0x102>
    dc05:	nop    DWORD PTR [rax]
    dc08:	add    rbp,0x10
    dc0c:	cmp    QWORD PTR [r12+0x8],rbp
    dc11:	jbe    dce2 <transfer_entries+0x102>
    dc17:	mov    r15,QWORD PTR [rbp+0x0]
    dc1b:	test   r15,r15
    dc1e:	je     dc08 <transfer_entries+0x28>
    dc20:	mov    rbx,QWORD PTR [rbp+0x8]
    dc24:	test   rbx,rbx
    dc27:	jne    dc41 <transfer_entries+0x61>
    dc29:	jmp    dc80 <transfer_entries+0xa0>
    dc2b:	nop    DWORD PTR [rax+rax*1+0x0]
    dc30:	mov    rcx,QWORD PTR [rax+0x8]
    dc34:	mov    QWORD PTR [rdx+0x8],rcx
    dc38:	mov    QWORD PTR [rax+0x8],rdx
    dc3c:	test   rbx,rbx
    dc3f:	je     dc7c <transfer_entries+0x9c>
    dc41:	mov    r15,QWORD PTR [rbx]
    dc44:	mov    rdi,r14
    dc47:	mov    rsi,r15
    dc4a:	call   d8f0 <safe_hasher>
    dc4f:	mov    rdx,rbx
    dc52:	mov    rbx,QWORD PTR [rbx+0x8]
    dc56:	cmp    QWORD PTR [rax],0x0
    dc5a:	jne    dc30 <transfer_entries+0x50>
    dc5c:	mov    QWORD PTR [rax],r15
    dc5f:	add    QWORD PTR [r14+0x18],0x1
    dc64:	mov    QWORD PTR [rdx],0x0
    dc6b:	mov    rax,QWORD PTR [r14+0x48]
    dc6f:	mov    QWORD PTR [rdx+0x8],rax
    dc73:	mov    QWORD PTR [r14+0x48],rdx
    dc77:	test   rbx,rbx
    dc7a:	jne    dc41 <transfer_entries+0x61>
    dc7c:	mov    r15,QWORD PTR [rbp+0x0]
    dc80:	mov    QWORD PTR [rbp+0x8],0x0
    dc88:	test   r13b,r13b
    dc8b:	jne    dc08 <transfer_entries+0x28>
    dc91:	mov    rsi,r15
    dc94:	mov    rdi,r14
    dc97:	call   d8f0 <safe_hasher>
    dc9c:	cmp    QWORD PTR [rax],0x0
    dca0:	mov    rbx,rax
    dca3:	je     dd00 <transfer_entries+0x120>
    dca5:	mov    rax,QWORD PTR [r14+0x48]
    dca9:	test   rax,rax
    dcac:	je     dd0a <transfer_entries+0x12a>
    dcae:	mov    rdx,QWORD PTR [rax+0x8]
    dcb2:	mov    QWORD PTR [r14+0x48],rdx
    dcb6:	mov    rdx,QWORD PTR [rbx+0x8]
    dcba:	mov    QWORD PTR [rax],r15
    dcbd:	mov    QWORD PTR [rax+0x8],rdx
    dcc1:	mov    QWORD PTR [rbx+0x8],rax
    dcc5:	mov    QWORD PTR [rbp+0x0],0x0
    dccd:	add    rbp,0x10
    dcd1:	sub    QWORD PTR [r12+0x18],0x1
    dcd7:	cmp    QWORD PTR [r12+0x8],rbp
    dcdc:	ja     dc17 <transfer_entries+0x37>
    dce2:	add    rsp,0x8
    dce6:	mov    eax,0x1
    dceb:	pop    rbx
    dcec:	pop    rbp
    dced:	pop    r12
    dcef:	pop    r13
    dcf1:	pop    r14
    dcf3:	pop    r15
    dcf5:	ret    
    dcf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dd00:	mov    QWORD PTR [rax],r15
    dd03:	add    QWORD PTR [r14+0x18],0x1
    dd08:	jmp    dcc5 <transfer_entries+0xe5>
    dd0a:	mov    edi,0x10
    dd0f:	call   3770 <malloc@plt>
    dd14:	test   rax,rax
    dd17:	jne    dcb6 <transfer_entries+0xd6>
    dd19:	add    rsp,0x8
    dd1d:	xor    eax,eax
    dd1f:	pop    rbx
    dd20:	pop    rbp
    dd21:	pop    r12
    dd23:	pop    r13
    dd25:	pop    r14
    dd27:	pop    r15
    dd29:	ret    
    dd2a:	nop    WORD PTR [rax+rax*1+0x0]

000000000000dd30 <hash_get_n_buckets>:
    dd30:	endbr64 
    dd34:	mov    rax,QWORD PTR [rdi+0x10]
    dd38:	ret    
    dd39:	nop    DWORD PTR [rax+0x0]

000000000000dd40 <hash_get_n_buckets_used>:
    dd40:	endbr64 
    dd44:	mov    rax,QWORD PTR [rdi+0x18]
    dd48:	ret    
    dd49:	nop    DWORD PTR [rax+0x0]

000000000000dd50 <hash_get_n_entries>:
    dd50:	endbr64 
    dd54:	mov    rax,QWORD PTR [rdi+0x20]
    dd58:	ret    
    dd59:	nop    DWORD PTR [rax+0x0]

000000000000dd60 <hash_get_max_bucket_length>:
    dd60:	endbr64 
    dd64:	mov    rcx,QWORD PTR [rdi]
    dd67:	mov    rsi,QWORD PTR [rdi+0x8]
    dd6b:	xor    r8d,r8d
    dd6e:	cmp    rcx,rsi
    dd71:	jb     dd81 <hash_get_max_bucket_length+0x21>
    dd73:	jmp    ddb5 <hash_get_max_bucket_length+0x55>
    dd75:	nop    DWORD PTR [rax]
    dd78:	add    rcx,0x10
    dd7c:	cmp    rcx,rsi
    dd7f:	jae    ddb5 <hash_get_max_bucket_length+0x55>
    dd81:	cmp    QWORD PTR [rcx],0x0
    dd85:	je     dd78 <hash_get_max_bucket_length+0x18>
    dd87:	mov    rax,QWORD PTR [rcx+0x8]
    dd8b:	mov    edx,0x1
    dd90:	test   rax,rax
    dd93:	je     dda5 <hash_get_max_bucket_length+0x45>
    dd95:	nop    DWORD PTR [rax]
    dd98:	mov    rax,QWORD PTR [rax+0x8]
    dd9c:	add    rdx,0x1
    dda0:	test   rax,rax
    dda3:	jne    dd98 <hash_get_max_bucket_length+0x38>
    dda5:	cmp    r8,rdx
    dda8:	cmovb  r8,rdx
    ddac:	add    rcx,0x10
    ddb0:	cmp    rcx,rsi
    ddb3:	jb     dd81 <hash_get_max_bucket_length+0x21>
    ddb5:	mov    rax,r8
    ddb8:	ret    
    ddb9:	nop    DWORD PTR [rax+0x0]

000000000000ddc0 <hash_table_ok>:
    ddc0:	endbr64 
    ddc4:	mov    rcx,QWORD PTR [rdi]
    ddc7:	mov    rsi,QWORD PTR [rdi+0x8]
    ddcb:	xor    edx,edx
    ddcd:	xor    r8d,r8d
    ddd0:	cmp    rcx,rsi
    ddd3:	jb     dde9 <hash_table_ok+0x29>
    ddd5:	jmp    de16 <hash_table_ok+0x56>
    ddd7:	nop    WORD PTR [rax+rax*1+0x0]
    dde0:	add    rcx,0x10
    dde4:	cmp    rcx,rsi
    dde7:	jae    de16 <hash_table_ok+0x56>
    dde9:	cmp    QWORD PTR [rcx],0x0
    dded:	je     dde0 <hash_table_ok+0x20>
    ddef:	mov    rax,QWORD PTR [rcx+0x8]
    ddf3:	add    r8,0x1
    ddf7:	add    rdx,0x1
    ddfb:	test   rax,rax
    ddfe:	je     dde0 <hash_table_ok+0x20>
    de00:	mov    rax,QWORD PTR [rax+0x8]
    de04:	add    rdx,0x1
    de08:	test   rax,rax
    de0b:	jne    de00 <hash_table_ok+0x40>
    de0d:	add    rcx,0x10
    de11:	cmp    rcx,rsi
    de14:	jb     dde9 <hash_table_ok+0x29>
    de16:	xor    eax,eax
    de18:	cmp    QWORD PTR [rdi+0x18],r8
    de1c:	je     de1f <hash_table_ok+0x5f>
    de1e:	ret    
    de1f:	cmp    QWORD PTR [rdi+0x20],rdx
    de23:	sete   al
    de26:	ret    
    de27:	nop    WORD PTR [rax+rax*1+0x0]

000000000000de30 <hash_print_statistics>:
    de30:	endbr64 
    de34:	push   r13
    de36:	push   r12
    de38:	xor    r12d,r12d
    de3b:	push   rbp
    de3c:	mov    rbp,rsi
    de3f:	push   rbx
    de40:	sub    rsp,0x8
    de44:	mov    rcx,QWORD PTR [rdi]
    de47:	mov    rsi,QWORD PTR [rdi+0x8]
    de4b:	mov    r8,QWORD PTR [rdi+0x20]
    de4f:	mov    rbx,QWORD PTR [rdi+0x10]
    de53:	mov    r13,QWORD PTR [rdi+0x18]
    de57:	cmp    rcx,rsi
    de5a:	jb     de69 <hash_print_statistics+0x39>
    de5c:	jmp    de9d <hash_print_statistics+0x6d>
    de5e:	xchg   ax,ax
    de60:	add    rcx,0x10
    de64:	cmp    rcx,rsi
    de67:	jae    de9d <hash_print_statistics+0x6d>
    de69:	cmp    QWORD PTR [rcx],0x0
    de6d:	je     de60 <hash_print_statistics+0x30>
    de6f:	mov    rax,QWORD PTR [rcx+0x8]
    de73:	mov    edx,0x1
    de78:	test   rax,rax
    de7b:	je     de8d <hash_print_statistics+0x5d>
    de7d:	nop    DWORD PTR [rax]
    de80:	mov    rax,QWORD PTR [rax+0x8]
    de84:	add    rdx,0x1
    de88:	test   rax,rax
    de8b:	jne    de80 <hash_print_statistics+0x50>
    de8d:	cmp    r12,rdx
    de90:	cmovb  r12,rdx
    de94:	add    rcx,0x10
    de98:	cmp    rcx,rsi
    de9b:	jb     de69 <hash_print_statistics+0x39>
    de9d:	mov    rcx,r8
    dea0:	lea    rdx,[rip+0x937f]        # 17226 <fillbuf+0x46>
    dea7:	mov    rdi,rbp
    deaa:	xor    eax,eax
    deac:	mov    esi,0x1
    deb1:	call   3e00 <__fprintf_chk@plt>
    deb6:	xor    eax,eax
    deb8:	mov    rcx,rbx
    debb:	mov    esi,0x1
    dec0:	lea    rdx,[rip+0x9377]        # 1723e <fillbuf+0x5e>
    dec7:	mov    rdi,rbp
    deca:	call   3e00 <__fprintf_chk@plt>
    decf:	test   r13,r13
    ded2:	js     df40 <hash_print_statistics+0x110>
    ded4:	pxor   xmm0,xmm0
    ded8:	cvtsi2sd xmm0,r13
    dedd:	mulsd  xmm0,QWORD PTR [rip+0x925b]        # 17140 <short_options+0x1cd0>
    dee5:	test   rbx,rbx
    dee8:	js     df69 <hash_print_statistics+0x139>
    deea:	pxor   xmm1,xmm1
    deee:	cvtsi2sd xmm1,rbx
    def3:	divsd  xmm0,xmm1
    def7:	mov    rcx,r13
    defa:	mov    rdi,rbp
    defd:	mov    esi,0x1
    df02:	lea    rdx,[rip+0x9367]        # 17270 <fillbuf+0x90>
    df09:	mov    eax,0x1
    df0e:	call   3e00 <__fprintf_chk@plt>
    df13:	add    rsp,0x8
    df17:	mov    rcx,r12
    df1a:	mov    rdi,rbp
    df1d:	pop    rbx
    df1e:	lea    rdx,[rip+0x9331]        # 17256 <fillbuf+0x76>
    df25:	pop    rbp
    df26:	mov    esi,0x1
    df2b:	pop    r12
    df2d:	xor    eax,eax
    df2f:	pop    r13
    df31:	jmp    3e00 <__fprintf_chk@plt>
    df36:	nop    WORD PTR cs:[rax+rax*1+0x0]
    df40:	mov    rax,r13
    df43:	mov    rdx,r13
    df46:	pxor   xmm0,xmm0
    df4a:	shr    rax,1
    df4d:	and    edx,0x1
    df50:	or     rax,rdx
    df53:	cvtsi2sd xmm0,rax
    df58:	addsd  xmm0,xmm0
    df5c:	mulsd  xmm0,QWORD PTR [rip+0x91dc]        # 17140 <short_options+0x1cd0>
    df64:	test   rbx,rbx
    df67:	jns    deea <hash_print_statistics+0xba>
    df69:	mov    rax,rbx
    df6c:	and    ebx,0x1
    df6f:	pxor   xmm1,xmm1
    df73:	shr    rax,1
    df76:	or     rax,rbx
    df79:	cvtsi2sd xmm1,rax
    df7e:	addsd  xmm1,xmm1
    df82:	jmp    def3 <hash_print_statistics+0xc3>
    df87:	nop    WORD PTR [rax+rax*1+0x0]

000000000000df90 <hash_lookup>:
    df90:	endbr64 
    df94:	push   r12
    df96:	mov    r12,rdi
    df99:	push   rbp
    df9a:	mov    rbp,rsi
    df9d:	push   rbx
    df9e:	call   d8f0 <safe_hasher>
    dfa3:	mov    rsi,QWORD PTR [rax]
    dfa6:	test   rsi,rsi
    dfa9:	je     dfcd <hash_lookup+0x3d>
    dfab:	mov    rbx,rax
    dfae:	jmp    dfb3 <hash_lookup+0x23>
    dfb0:	mov    rsi,QWORD PTR [rbx]
    dfb3:	cmp    rsi,rbp
    dfb6:	je     dfdb <hash_lookup+0x4b>
    dfb8:	mov    rdi,rbp
    dfbb:	call   QWORD PTR [r12+0x38]
    dfc0:	test   al,al
    dfc2:	jne    dfd8 <hash_lookup+0x48>
    dfc4:	mov    rbx,QWORD PTR [rbx+0x8]
    dfc8:	test   rbx,rbx
    dfcb:	jne    dfb0 <hash_lookup+0x20>
    dfcd:	pop    rbx
    dfce:	xor    eax,eax
    dfd0:	pop    rbp
    dfd1:	pop    r12
    dfd3:	ret    
    dfd4:	nop    DWORD PTR [rax+0x0]
    dfd8:	mov    rbp,QWORD PTR [rbx]
    dfdb:	mov    rax,rbp
    dfde:	pop    rbx
    dfdf:	pop    rbp
    dfe0:	pop    r12
    dfe2:	ret    
    dfe3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    dfee:	xchg   ax,ax

000000000000dff0 <hash_get_first>:
    dff0:	endbr64 
    dff4:	cmp    QWORD PTR [rdi+0x20],0x0
    dff9:	je     e030 <hash_get_first+0x40>
    dffb:	sub    rsp,0x8
    dfff:	mov    rax,QWORD PTR [rdi]
    e002:	mov    rdx,QWORD PTR [rdi+0x8]
    e006:	cmp    rax,rdx
    e009:	jb     e019 <hash_get_first+0x29>
    e00b:	jmp    3ed5 <hash_get_first.cold>
    e010:	add    rax,0x10
    e014:	cmp    rax,rdx
    e017:	jae    e037 <hash_get_first+0x47>
    e019:	mov    r8,QWORD PTR [rax]
    e01c:	test   r8,r8
    e01f:	je     e010 <hash_get_first+0x20>
    e021:	mov    rax,r8
    e024:	add    rsp,0x8
    e028:	ret    
    e029:	nop    DWORD PTR [rax+0x0]
    e030:	xor    r8d,r8d
    e033:	mov    rax,r8
    e036:	ret    
    e037:	jmp    3ed5 <hash_get_first.cold>
    e03c:	nop    DWORD PTR [rax+0x0]

000000000000e040 <hash_get_next>:
    e040:	endbr64 
    e044:	push   rbp
    e045:	mov    rbp,rdi
    e048:	push   rbx
    e049:	mov    rbx,rsi
    e04c:	sub    rsp,0x8
    e050:	call   d8f0 <safe_hasher>
    e055:	mov    rdx,rax
    e058:	jmp    e065 <hash_get_next+0x25>
    e05a:	nop    WORD PTR [rax+rax*1+0x0]
    e060:	test   rdx,rdx
    e063:	je     e076 <hash_get_next+0x36>
    e065:	mov    rcx,QWORD PTR [rdx]
    e068:	mov    rdx,QWORD PTR [rdx+0x8]
    e06c:	cmp    rcx,rbx
    e06f:	jne    e060 <hash_get_next+0x20>
    e071:	test   rdx,rdx
    e074:	jne    e0a0 <hash_get_next+0x60>
    e076:	mov    rdx,QWORD PTR [rbp+0x8]
    e07a:	jmp    e088 <hash_get_next+0x48>
    e07c:	nop    DWORD PTR [rax+0x0]
    e080:	mov    r8,QWORD PTR [rax]
    e083:	test   r8,r8
    e086:	jne    e094 <hash_get_next+0x54>
    e088:	add    rax,0x10
    e08c:	cmp    rdx,rax
    e08f:	ja     e080 <hash_get_next+0x40>
    e091:	xor    r8d,r8d
    e094:	add    rsp,0x8
    e098:	mov    rax,r8
    e09b:	pop    rbx
    e09c:	pop    rbp
    e09d:	ret    
    e09e:	xchg   ax,ax
    e0a0:	mov    r8,QWORD PTR [rdx]
    e0a3:	add    rsp,0x8
    e0a7:	pop    rbx
    e0a8:	pop    rbp
    e0a9:	mov    rax,r8
    e0ac:	ret    
    e0ad:	nop    DWORD PTR [rax]

000000000000e0b0 <hash_get_entries>:
    e0b0:	endbr64 
    e0b4:	mov    r9,QWORD PTR [rdi]
    e0b7:	xor    eax,eax
    e0b9:	cmp    QWORD PTR [rdi+0x8],r9
    e0bd:	jbe    e0f2 <hash_get_entries+0x42>
    e0bf:	cmp    QWORD PTR [r9],0x0
    e0c3:	jne    e0d0 <hash_get_entries+0x20>
    e0c5:	add    r9,0x10
    e0c9:	cmp    QWORD PTR [rdi+0x8],r9
    e0cd:	ja     e0bf <hash_get_entries+0xf>
    e0cf:	ret    
    e0d0:	mov    rcx,r9
    e0d3:	jmp    e0ed <hash_get_entries+0x3d>
    e0d5:	nop    DWORD PTR [rax]
    e0d8:	mov    r8,QWORD PTR [rcx]
    e0db:	add    rax,0x1
    e0df:	mov    QWORD PTR [rsi+rax*8-0x8],r8
    e0e4:	mov    rcx,QWORD PTR [rcx+0x8]
    e0e8:	test   rcx,rcx
    e0eb:	je     e0c5 <hash_get_entries+0x15>
    e0ed:	cmp    rdx,rax
    e0f0:	ja     e0d8 <hash_get_entries+0x28>
    e0f2:	ret    
    e0f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    e0fe:	xchg   ax,ax

000000000000e100 <hash_do_for_each>:
    e100:	endbr64 
    e104:	push   r15
    e106:	push   r14
    e108:	push   r13
    e10a:	push   r12
    e10c:	push   rbp
    e10d:	push   rbx
    e10e:	sub    rsp,0x8
    e112:	mov    r14,QWORD PTR [rdi]
    e115:	cmp    QWORD PTR [rdi+0x8],r14
    e119:	jbe    e173 <hash_do_for_each+0x73>
    e11b:	mov    r15,rdi
    e11e:	mov    rbp,rsi
    e121:	mov    r13,rdx
    e124:	xor    r12d,r12d
    e127:	mov    rdi,QWORD PTR [r14]
    e12a:	test   rdi,rdi
    e12d:	jne    e150 <hash_do_for_each+0x50>
    e12f:	add    r14,0x10
    e133:	cmp    QWORD PTR [r15+0x8],r14
    e137:	ja     e127 <hash_do_for_each+0x27>
    e139:	add    rsp,0x8
    e13d:	mov    rax,r12
    e140:	pop    rbx
    e141:	pop    rbp
    e142:	pop    r12
    e144:	pop    r13
    e146:	pop    r14
    e148:	pop    r15
    e14a:	ret    
    e14b:	nop    DWORD PTR [rax+rax*1+0x0]
    e150:	mov    rbx,r14
    e153:	jmp    e168 <hash_do_for_each+0x68>
    e155:	nop    DWORD PTR [rax]
    e158:	mov    rbx,QWORD PTR [rbx+0x8]
    e15c:	add    r12,0x1
    e160:	test   rbx,rbx
    e163:	je     e12f <hash_do_for_each+0x2f>
    e165:	mov    rdi,QWORD PTR [rbx]
    e168:	mov    rsi,r13
    e16b:	call   rbp
    e16d:	test   al,al
    e16f:	jne    e158 <hash_do_for_each+0x58>
    e171:	jmp    e139 <hash_do_for_each+0x39>
    e173:	xor    r12d,r12d
    e176:	jmp    e139 <hash_do_for_each+0x39>
    e178:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000e180 <hash_string>:
    e180:	endbr64 
    e184:	movzx  ecx,BYTE PTR [rdi]
    e187:	xor    edx,edx
    e189:	test   cl,cl
    e18b:	je     e1b0 <hash_string+0x30>
    e18d:	nop    DWORD PTR [rax]
    e190:	mov    rax,rdx
    e193:	movzx  ecx,cl
    e196:	add    rdi,0x1
    e19a:	shl    rax,0x5
    e19e:	sub    rax,rdx
    e1a1:	xor    edx,edx
    e1a3:	add    rax,rcx
    e1a6:	movzx  ecx,BYTE PTR [rdi]
    e1a9:	div    rsi
    e1ac:	test   cl,cl
    e1ae:	jne    e190 <hash_string+0x10>
    e1b0:	mov    rax,rdx
    e1b3:	ret    
    e1b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    e1bf:	nop

000000000000e1c0 <hash_reset_tuning>:
    e1c0:	endbr64 
    e1c4:	movabs rax,0x3f80000000000000
    e1ce:	mov    BYTE PTR [rdi+0x10],0x0
    e1d2:	mov    QWORD PTR [rdi],rax
    e1d5:	movabs rax,0x3fb4fdf43f4ccccd
    e1df:	mov    QWORD PTR [rdi+0x8],rax
    e1e3:	ret    
    e1e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    e1ef:	nop

000000000000e1f0 <hash_initialize>:
    e1f0:	endbr64 
    e1f4:	push   r15
    e1f6:	lea    rax,[rip+0xfffffffffffff6c3]        # d8c0 <raw_hasher>
    e1fd:	mov    r15,rsi
    e200:	push   r14
    e202:	mov    r14,r8
    e205:	push   r13
    e207:	mov    r13,rdi
    e20a:	mov    edi,0x50
    e20f:	push   r12
    e211:	push   rbp
    e212:	mov    rbp,rdx
    e215:	push   rbx
    e216:	mov    rbx,rcx
    e219:	sub    rsp,0x8
    e21d:	test   rdx,rdx
    e220:	cmove  rbp,rax
    e224:	test   rcx,rcx
    e227:	lea    rax,[rip+0xfffffffffffff6b2]        # d8e0 <raw_comparator>
    e22e:	cmove  rbx,rax
    e232:	call   3770 <malloc@plt>
    e237:	mov    r12,rax
    e23a:	test   rax,rax
    e23d:	je     e2d4 <hash_initialize+0xe4>
    e243:	test   r15,r15
    e246:	lea    rax,[rip+0x9053]        # 172a0 <default_tuning>
    e24d:	lea    rdi,[r12+0x28]
    e252:	cmove  r15,rax
    e256:	mov    QWORD PTR [r12+0x28],r15
    e25b:	call   da20 <check_tuning.isra.0>
    e260:	test   al,al
    e262:	je     e2f0 <hash_initialize+0x100>
    e268:	movzx  esi,BYTE PTR [r15+0x10]
    e26d:	movss  xmm0,DWORD PTR [r15+0x8]
    e273:	mov    rdi,r13
    e276:	call   daa0 <compute_bucket_size.isra.0>
    e27b:	mov    QWORD PTR [r12+0x10],rax
    e280:	mov    r13,rax
    e283:	test   rax,rax
    e286:	je     e2fb <hash_initialize+0x10b>
    e288:	mov    esi,0x10
    e28d:	mov    rdi,rax
    e290:	call   3b00 <calloc@plt>
    e295:	mov    QWORD PTR [r12],rax
    e299:	test   rax,rax
    e29c:	je     e2fb <hash_initialize+0x10b>
    e29e:	shl    r13,0x4
    e2a2:	mov    QWORD PTR [r12+0x30],rbp
    e2a7:	add    r13,rax
    e2aa:	mov    QWORD PTR [r12+0x38],rbx
    e2af:	mov    QWORD PTR [r12+0x8],r13
    e2b4:	mov    QWORD PTR [r12+0x18],0x0
    e2bd:	mov    QWORD PTR [r12+0x20],0x0
    e2c6:	mov    QWORD PTR [r12+0x40],r14
    e2cb:	mov    QWORD PTR [r12+0x48],0x0
    e2d4:	add    rsp,0x8
    e2d8:	mov    rax,r12
    e2db:	pop    rbx
    e2dc:	pop    rbp
    e2dd:	pop    r12
    e2df:	pop    r13
    e2e1:	pop    r14
    e2e3:	pop    r15
    e2e5:	ret    
    e2e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e2f0:	call   3810 <__errno_location@plt>
    e2f5:	mov    DWORD PTR [rax],0x16
    e2fb:	mov    rdi,r12
    e2fe:	xor    r12d,r12d
    e301:	call   d750 <rpl_free>
    e306:	jmp    e2d4 <hash_initialize+0xe4>
    e308:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000e310 <hash_clear>:
    e310:	endbr64 
    e314:	push   r12
    e316:	push   rbp
    e317:	mov    rbp,rdi
    e31a:	push   rbx
    e31b:	mov    r12,QWORD PTR [rdi]
    e31e:	cmp    r12,QWORD PTR [rdi+0x8]
    e322:	jb     e33a <hash_clear+0x2a>
    e324:	jmp    e3ab <hash_clear+0x9b>
    e329:	nop    DWORD PTR [rax+0x0]
    e330:	add    r12,0x10
    e334:	cmp    QWORD PTR [rbp+0x8],r12
    e338:	jbe    e3ab <hash_clear+0x9b>
    e33a:	cmp    QWORD PTR [r12],0x0
    e33f:	je     e330 <hash_clear+0x20>
    e341:	mov    rbx,QWORD PTR [r12+0x8]
    e346:	mov    rdx,QWORD PTR [rbp+0x40]
    e34a:	test   rbx,rbx
    e34d:	jne    e35b <hash_clear+0x4b>
    e34f:	jmp    e385 <hash_clear+0x75>
    e351:	nop    DWORD PTR [rax+0x0]
    e358:	mov    rbx,rax
    e35b:	test   rdx,rdx
    e35e:	je     e369 <hash_clear+0x59>
    e360:	mov    rdi,QWORD PTR [rbx]
    e363:	call   rdx
    e365:	mov    rdx,QWORD PTR [rbp+0x40]
    e369:	mov    rax,QWORD PTR [rbx+0x8]
    e36d:	mov    rcx,QWORD PTR [rbp+0x48]
    e371:	mov    QWORD PTR [rbx],0x0
    e378:	mov    QWORD PTR [rbx+0x8],rcx
    e37c:	mov    QWORD PTR [rbp+0x48],rbx
    e380:	test   rax,rax
    e383:	jne    e358 <hash_clear+0x48>
    e385:	test   rdx,rdx
    e388:	je     e390 <hash_clear+0x80>
    e38a:	mov    rdi,QWORD PTR [r12]
    e38e:	call   rdx
    e390:	mov    QWORD PTR [r12],0x0
    e398:	add    r12,0x10
    e39c:	mov    QWORD PTR [r12-0x8],0x0
    e3a5:	cmp    QWORD PTR [rbp+0x8],r12
    e3a9:	ja     e33a <hash_clear+0x2a>
    e3ab:	pop    rbx
    e3ac:	mov    QWORD PTR [rbp+0x18],0x0
    e3b4:	mov    QWORD PTR [rbp+0x20],0x0
    e3bc:	pop    rbp
    e3bd:	pop    r12
    e3bf:	ret    

000000000000e3c0 <hash_free>:
    e3c0:	endbr64 
    e3c4:	push   r14
    e3c6:	push   r13
    e3c8:	push   r12
    e3ca:	mov    r12,rdi
    e3cd:	push   rbp
    e3ce:	push   rbx
    e3cf:	call   3810 <__errno_location@plt>
    e3d4:	cmp    QWORD PTR [r12+0x40],0x0
    e3da:	mov    rbp,QWORD PTR [r12]
    e3de:	mov    r14d,DWORD PTR [rax]
    e3e1:	mov    r13,rax
    e3e4:	mov    rax,QWORD PTR [r12+0x8]
    e3e9:	je     e443 <hash_free+0x83>
    e3eb:	cmp    QWORD PTR [r12+0x20],0x0
    e3f1:	je     e443 <hash_free+0x83>
    e3f3:	cmp    rbp,rax
    e3f6:	jb     e409 <hash_free+0x49>
    e3f8:	jmp    e47c <hash_free+0xbc>
    e3fd:	nop    DWORD PTR [rax]
    e400:	add    rbp,0x10
    e404:	cmp    rax,rbp
    e407:	jbe    e43f <hash_free+0x7f>
    e409:	mov    rdi,QWORD PTR [rbp+0x0]
    e40d:	test   rdi,rdi
    e410:	je     e400 <hash_free+0x40>
    e412:	mov    rbx,rbp
    e415:	jmp    e423 <hash_free+0x63>
    e417:	nop    WORD PTR [rax+rax*1+0x0]
    e420:	mov    rdi,QWORD PTR [rbx]
    e423:	call   QWORD PTR [r12+0x40]
    e428:	mov    rbx,QWORD PTR [rbx+0x8]
    e42c:	test   rbx,rbx
    e42f:	jne    e420 <hash_free+0x60>
    e431:	mov    rax,QWORD PTR [r12+0x8]
    e436:	add    rbp,0x10
    e43a:	cmp    rax,rbp
    e43d:	ja     e409 <hash_free+0x49>
    e43f:	mov    rbp,QWORD PTR [r12]
    e443:	cmp    rbp,rax
    e446:	jae    e47c <hash_free+0xbc>
    e448:	nop    DWORD PTR [rax+rax*1+0x0]
    e450:	mov    rbx,QWORD PTR [rbp+0x8]
    e454:	test   rbx,rbx
    e457:	je     e471 <hash_free+0xb1>
    e459:	nop    DWORD PTR [rax+0x0]
    e460:	mov    rdi,rbx
    e463:	mov    rbx,QWORD PTR [rbx+0x8]
    e467:	call   d750 <rpl_free>
    e46c:	test   rbx,rbx
    e46f:	jne    e460 <hash_free+0xa0>
    e471:	add    rbp,0x10
    e475:	cmp    QWORD PTR [r12+0x8],rbp
    e47a:	ja     e450 <hash_free+0x90>
    e47c:	mov    rbx,QWORD PTR [r12+0x48]
    e481:	test   rbx,rbx
    e484:	je     e4a1 <hash_free+0xe1>
    e486:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e490:	mov    rdi,rbx
    e493:	mov    rbx,QWORD PTR [rbx+0x8]
    e497:	call   d750 <rpl_free>
    e49c:	test   rbx,rbx
    e49f:	jne    e490 <hash_free+0xd0>
    e4a1:	mov    rdi,QWORD PTR [r12]
    e4a5:	call   d750 <rpl_free>
    e4aa:	mov    rdi,r12
    e4ad:	call   d750 <rpl_free>
    e4b2:	mov    DWORD PTR [r13+0x0],r14d
    e4b6:	pop    rbx
    e4b7:	pop    rbp
    e4b8:	pop    r12
    e4ba:	pop    r13
    e4bc:	pop    r14
    e4be:	ret    
    e4bf:	nop

000000000000e4c0 <hash_rehash>:
    e4c0:	endbr64 
    e4c4:	push   r14
    e4c6:	push   r13
    e4c8:	push   r12
    e4ca:	push   rbp
    e4cb:	mov    rbp,rdi
    e4ce:	mov    rdi,rsi
    e4d1:	push   rbx
    e4d2:	sub    rsp,0x60
    e4d6:	mov    r12,QWORD PTR [rbp+0x28]
    e4da:	mov    rax,QWORD PTR fs:0x28
    e4e3:	mov    QWORD PTR [rsp+0x58],rax
    e4e8:	xor    eax,eax
    e4ea:	movzx  esi,BYTE PTR [r12+0x10]
    e4f0:	movss  xmm0,DWORD PTR [r12+0x8]
    e4f7:	call   daa0 <compute_bucket_size.isra.0>
    e4fc:	test   rax,rax
    e4ff:	je     e610 <hash_rehash+0x150>
    e505:	mov    rbx,rax
    e508:	cmp    QWORD PTR [rbp+0x10],rax
    e50c:	je     e600 <hash_rehash+0x140>
    e512:	mov    esi,0x10
    e517:	mov    rdi,rax
    e51a:	call   3b00 <calloc@plt>
    e51f:	mov    QWORD PTR [rsp],rax
    e523:	test   rax,rax
    e526:	je     e610 <hash_rehash+0x150>
    e52c:	mov    QWORD PTR [rsp+0x10],rbx
    e531:	shl    rbx,0x4
    e535:	mov    r13,rsp
    e538:	xor    edx,edx
    e53a:	add    rbx,rax
    e53d:	mov    rax,QWORD PTR [rbp+0x30]
    e541:	mov    rsi,rbp
    e544:	mov    rdi,r13
    e547:	mov    QWORD PTR [rsp+0x28],r12
    e54c:	mov    QWORD PTR [rsp+0x30],rax
    e551:	mov    rax,QWORD PTR [rbp+0x38]
    e555:	mov    QWORD PTR [rsp+0x8],rbx
    e55a:	mov    QWORD PTR [rsp+0x38],rax
    e55f:	mov    rax,QWORD PTR [rbp+0x40]
    e563:	mov    QWORD PTR [rsp+0x18],0x0
    e56c:	mov    QWORD PTR [rsp+0x40],rax
    e571:	mov    rax,QWORD PTR [rbp+0x48]
    e575:	mov    QWORD PTR [rsp+0x20],0x0
    e57e:	mov    QWORD PTR [rsp+0x48],rax
    e583:	call   dbe0 <transfer_entries>
    e588:	mov    r12d,eax
    e58b:	test   al,al
    e58d:	jne    e618 <hash_rehash+0x158>
    e593:	call   3810 <__errno_location@plt>
    e598:	mov    edx,0x1
    e59d:	mov    rsi,r13
    e5a0:	mov    rdi,rbp
    e5a3:	mov    r14d,DWORD PTR [rax]
    e5a6:	mov    rbx,rax
    e5a9:	mov    rax,QWORD PTR [rsp+0x48]
    e5ae:	mov    QWORD PTR [rbp+0x48],rax
    e5b2:	call   dbe0 <transfer_entries>
    e5b7:	test   al,al
    e5b9:	je     3eda <hash_rehash.cold>
    e5bf:	xor    edx,edx
    e5c1:	mov    rsi,r13
    e5c4:	mov    rdi,rbp
    e5c7:	call   dbe0 <transfer_entries>
    e5cc:	test   al,al
    e5ce:	je     3eda <hash_rehash.cold>
    e5d4:	mov    rdi,QWORD PTR [rsp]
    e5d8:	call   d750 <rpl_free>
    e5dd:	mov    DWORD PTR [rbx],r14d
    e5e0:	mov    rax,QWORD PTR [rsp+0x58]
    e5e5:	xor    rax,QWORD PTR fs:0x28
    e5ee:	jne    e64f <hash_rehash+0x18f>
    e5f0:	add    rsp,0x60
    e5f4:	mov    eax,r12d
    e5f7:	pop    rbx
    e5f8:	pop    rbp
    e5f9:	pop    r12
    e5fb:	pop    r13
    e5fd:	pop    r14
    e5ff:	ret    
    e600:	mov    r12d,0x1
    e606:	jmp    e5e0 <hash_rehash+0x120>
    e608:	nop    DWORD PTR [rax+rax*1+0x0]
    e610:	xor    r12d,r12d
    e613:	jmp    e5e0 <hash_rehash+0x120>
    e615:	nop    DWORD PTR [rax]
    e618:	mov    rdi,QWORD PTR [rbp+0x0]
    e61c:	call   d750 <rpl_free>
    e621:	mov    rax,QWORD PTR [rsp]
    e625:	mov    QWORD PTR [rbp+0x0],rax
    e629:	mov    rax,QWORD PTR [rsp+0x8]
    e62e:	mov    QWORD PTR [rbp+0x8],rax
    e632:	mov    rax,QWORD PTR [rsp+0x10]
    e637:	mov    QWORD PTR [rbp+0x10],rax
    e63b:	mov    rax,QWORD PTR [rsp+0x18]
    e640:	mov    QWORD PTR [rbp+0x18],rax
    e644:	mov    rax,QWORD PTR [rsp+0x48]
    e649:	mov    QWORD PTR [rbp+0x48],rax
    e64d:	jmp    e5e0 <hash_rehash+0x120>
    e64f:	call   3990 <__stack_chk_fail@plt>
    e654:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    e65f:	nop

000000000000e660 <hash_insert_if_absent>:
    e660:	endbr64 
    e664:	push   r13
    e666:	push   r12
    e668:	push   rbp
    e669:	push   rbx
    e66a:	sub    rsp,0x18
    e66e:	mov    rax,QWORD PTR fs:0x28
    e677:	mov    QWORD PTR [rsp+0x8],rax
    e67c:	xor    eax,eax
    e67e:	test   rsi,rsi
    e681:	je     3edf <hash_insert_if_absent.cold>
    e687:	mov    r12,rsp
    e68a:	mov    r13,rdx
    e68d:	xor    ecx,ecx
    e68f:	mov    rbx,rdi
    e692:	mov    rdx,r12
    e695:	mov    rbp,rsi
    e698:	call   d920 <hash_find_entry>
    e69d:	test   rax,rax
    e6a0:	je     e6d0 <hash_insert_if_absent+0x70>
    e6a2:	xor    r8d,r8d
    e6a5:	test   r13,r13
    e6a8:	je     e6ae <hash_insert_if_absent+0x4e>
    e6aa:	mov    QWORD PTR [r13+0x0],rax
    e6ae:	mov    rax,QWORD PTR [rsp+0x8]
    e6b3:	xor    rax,QWORD PTR fs:0x28
    e6bc:	jne    e914 <hash_insert_if_absent+0x2b4>
    e6c2:	add    rsp,0x18
    e6c6:	mov    eax,r8d
    e6c9:	pop    rbx
    e6ca:	pop    rbp
    e6cb:	pop    r12
    e6cd:	pop    r13
    e6cf:	ret    
    e6d0:	mov    rax,QWORD PTR [rbx+0x18]
    e6d4:	test   rax,rax
    e6d7:	js     e750 <hash_insert_if_absent+0xf0>
    e6d9:	pxor   xmm1,xmm1
    e6dd:	mov    rdx,QWORD PTR [rbx+0x28]
    e6e1:	cvtsi2ss xmm1,rax
    e6e6:	mov    rax,QWORD PTR [rbx+0x10]
    e6ea:	test   rax,rax
    e6ed:	js     e77a <hash_insert_if_absent+0x11a>
    e6f3:	pxor   xmm0,xmm0
    e6f7:	cvtsi2ss xmm0,rax
    e6fc:	mulss  xmm0,DWORD PTR [rdx+0x8]
    e701:	comiss xmm1,xmm0
    e704:	ja     e7a1 <hash_insert_if_absent+0x141>
    e70a:	mov    r12,QWORD PTR [rsp]
    e70e:	cmp    QWORD PTR [r12],0x0
    e713:	je     e828 <hash_insert_if_absent+0x1c8>
    e719:	mov    rax,QWORD PTR [rbx+0x48]
    e71d:	test   rax,rax
    e720:	je     e848 <hash_insert_if_absent+0x1e8>
    e726:	mov    rdx,QWORD PTR [rax+0x8]
    e72a:	mov    QWORD PTR [rbx+0x48],rdx
    e72e:	mov    rdx,QWORD PTR [r12+0x8]
    e733:	mov    QWORD PTR [rax],rbp
    e736:	mov    r8d,0x1
    e73c:	mov    QWORD PTR [rax+0x8],rdx
    e740:	mov    QWORD PTR [r12+0x8],rax
    e745:	add    QWORD PTR [rbx+0x20],0x1
    e74a:	jmp    e6ae <hash_insert_if_absent+0x4e>
    e74f:	nop
    e750:	mov    rdx,rax
    e753:	and    eax,0x1
    e756:	pxor   xmm1,xmm1
    e75a:	shr    rdx,1
    e75d:	or     rdx,rax
    e760:	mov    rax,QWORD PTR [rbx+0x10]
    e764:	cvtsi2ss xmm1,rdx
    e769:	mov    rdx,QWORD PTR [rbx+0x28]
    e76d:	addss  xmm1,xmm1
    e771:	test   rax,rax
    e774:	jns    e6f3 <hash_insert_if_absent+0x93>
    e77a:	mov    rcx,rax
    e77d:	and    eax,0x1
    e780:	pxor   xmm0,xmm0
    e784:	shr    rcx,1
    e787:	or     rcx,rax
    e78a:	cvtsi2ss xmm0,rcx
    e78f:	addss  xmm0,xmm0
    e793:	mulss  xmm0,DWORD PTR [rdx+0x8]
    e798:	comiss xmm1,xmm0
    e79b:	jbe    e70a <hash_insert_if_absent+0xaa>
    e7a1:	lea    rdi,[rbx+0x28]
    e7a5:	call   da20 <check_tuning.isra.0>
    e7aa:	mov    rdx,QWORD PTR [rbx+0x28]
    e7ae:	mov    rax,QWORD PTR [rbx+0x10]
    e7b2:	movss  xmm2,DWORD PTR [rdx+0x8]
    e7b7:	test   rax,rax
    e7ba:	js     e890 <hash_insert_if_absent+0x230>
    e7c0:	pxor   xmm0,xmm0
    e7c4:	cvtsi2ss xmm0,rax
    e7c9:	mov    rax,QWORD PTR [rbx+0x18]
    e7cd:	test   rax,rax
    e7d0:	js     e870 <hash_insert_if_absent+0x210>
    e7d6:	pxor   xmm1,xmm1
    e7da:	cvtsi2ss xmm1,rax
    e7df:	movaps xmm3,xmm2
    e7e2:	mulss  xmm3,xmm0
    e7e6:	comiss xmm1,xmm3
    e7e9:	jbe    e70a <hash_insert_if_absent+0xaa>
    e7ef:	mulss  xmm0,DWORD PTR [rdx+0xc]
    e7f4:	cmp    BYTE PTR [rdx+0x10],0x0
    e7f8:	je     e8b0 <hash_insert_if_absent+0x250>
    e7fe:	comiss xmm0,DWORD PTR [rip+0x8ac3]        # 172c8 <default_tuning+0x28>
    e805:	jb     e8c0 <hash_insert_if_absent+0x260>
    e80b:	call   3810 <__errno_location@plt>
    e810:	mov    r8d,0xffffffff
    e816:	mov    DWORD PTR [rax],0xc
    e81c:	jmp    e6ae <hash_insert_if_absent+0x4e>
    e821:	nop    DWORD PTR [rax+0x0]
    e828:	mov    QWORD PTR [r12],rbp
    e82c:	mov    r8d,0x1
    e832:	add    QWORD PTR [rbx+0x20],0x1
    e837:	add    QWORD PTR [rbx+0x18],0x1
    e83c:	jmp    e6ae <hash_insert_if_absent+0x4e>
    e841:	nop    DWORD PTR [rax+0x0]
    e848:	mov    edi,0x10
    e84d:	call   3770 <malloc@plt>
    e852:	test   rax,rax
    e855:	jne    e72e <hash_insert_if_absent+0xce>
    e85b:	mov    r8d,0xffffffff
    e861:	jmp    e6ae <hash_insert_if_absent+0x4e>
    e866:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e870:	mov    rcx,rax
    e873:	and    eax,0x1
    e876:	pxor   xmm1,xmm1
    e87a:	shr    rcx,1
    e87d:	or     rcx,rax
    e880:	cvtsi2ss xmm1,rcx
    e885:	addss  xmm1,xmm1
    e889:	jmp    e7df <hash_insert_if_absent+0x17f>
    e88e:	xchg   ax,ax
    e890:	mov    rcx,rax
    e893:	and    eax,0x1
    e896:	pxor   xmm0,xmm0
    e89a:	shr    rcx,1
    e89d:	or     rcx,rax
    e8a0:	cvtsi2ss xmm0,rcx
    e8a5:	addss  xmm0,xmm0
    e8a9:	jmp    e7c9 <hash_insert_if_absent+0x169>
    e8ae:	xchg   ax,ax
    e8b0:	mulss  xmm0,xmm2
    e8b4:	jmp    e7fe <hash_insert_if_absent+0x19e>
    e8b9:	nop    DWORD PTR [rax+0x0]
    e8c0:	comiss xmm0,DWORD PTR [rip+0x8a05]        # 172cc <default_tuning+0x2c>
    e8c7:	jae    e900 <hash_insert_if_absent+0x2a0>
    e8c9:	cvttss2si rsi,xmm0
    e8ce:	mov    rdi,rbx
    e8d1:	call   e4c0 <hash_rehash>
    e8d6:	test   al,al
    e8d8:	je     e85b <hash_insert_if_absent+0x1fb>
    e8da:	xor    ecx,ecx
    e8dc:	mov    rdx,r12
    e8df:	mov    rsi,rbp
    e8e2:	mov    rdi,rbx
    e8e5:	call   d920 <hash_find_entry>
    e8ea:	test   rax,rax
    e8ed:	je     e70a <hash_insert_if_absent+0xaa>
    e8f3:	jmp    3edf <hash_insert_if_absent.cold>
    e8f8:	nop    DWORD PTR [rax+rax*1+0x0]
    e900:	subss  xmm0,DWORD PTR [rip+0x89c4]        # 172cc <default_tuning+0x2c>
    e908:	cvttss2si rsi,xmm0
    e90d:	btc    rsi,0x3f
    e912:	jmp    e8ce <hash_insert_if_absent+0x26e>
    e914:	call   3990 <__stack_chk_fail@plt>
    e919:	nop    DWORD PTR [rax+0x0]

000000000000e920 <hash_insert>:
    e920:	endbr64 
    e924:	push   rbx
    e925:	mov    rbx,rsi
    e928:	sub    rsp,0x10
    e92c:	mov    rax,QWORD PTR fs:0x28
    e935:	mov    QWORD PTR [rsp+0x8],rax
    e93a:	xor    eax,eax
    e93c:	mov    rdx,rsp
    e93f:	call   e660 <hash_insert_if_absent>
    e944:	cmp    eax,0xffffffff
    e947:	je     e970 <hash_insert+0x50>
    e949:	test   eax,eax
    e94b:	mov    rax,rbx
    e94e:	cmove  rax,QWORD PTR [rsp]
    e953:	mov    rcx,QWORD PTR [rsp+0x8]
    e958:	xor    rcx,QWORD PTR fs:0x28
    e961:	jne    e974 <hash_insert+0x54>
    e963:	add    rsp,0x10
    e967:	pop    rbx
    e968:	ret    
    e969:	nop    DWORD PTR [rax+0x0]
    e970:	xor    eax,eax
    e972:	jmp    e953 <hash_insert+0x33>
    e974:	call   3990 <__stack_chk_fail@plt>
    e979:	nop    DWORD PTR [rax+0x0]

000000000000e980 <hash_remove>:
    e980:	endbr64 
    e984:	push   r12
    e986:	mov    ecx,0x1
    e98b:	push   rbp
    e98c:	push   rbx
    e98d:	mov    rbx,rdi
    e990:	sub    rsp,0x10
    e994:	mov    rax,QWORD PTR fs:0x28
    e99d:	mov    QWORD PTR [rsp+0x8],rax
    e9a2:	xor    eax,eax
    e9a4:	mov    rdx,rsp
    e9a7:	call   d920 <hash_find_entry>
    e9ac:	mov    r12,rax
    e9af:	test   rax,rax
    e9b2:	je     e9c3 <hash_remove+0x43>
    e9b4:	mov    rax,QWORD PTR [rsp]
    e9b8:	sub    QWORD PTR [rbx+0x20],0x1
    e9bd:	cmp    QWORD PTR [rax],0x0
    e9c1:	je     e9e8 <hash_remove+0x68>
    e9c3:	mov    rax,QWORD PTR [rsp+0x8]
    e9c8:	xor    rax,QWORD PTR fs:0x28
    e9d1:	jne    eb77 <hash_remove+0x1f7>
    e9d7:	add    rsp,0x10
    e9db:	mov    rax,r12
    e9de:	pop    rbx
    e9df:	pop    rbp
    e9e0:	pop    r12
    e9e2:	ret    
    e9e3:	nop    DWORD PTR [rax+rax*1+0x0]
    e9e8:	mov    rax,QWORD PTR [rbx+0x18]
    e9ec:	sub    rax,0x1
    e9f0:	mov    QWORD PTR [rbx+0x18],rax
    e9f4:	js     ead0 <hash_remove+0x150>
    e9fa:	pxor   xmm0,xmm0
    e9fe:	mov    rdx,QWORD PTR [rbx+0x28]
    ea02:	cvtsi2ss xmm0,rax
    ea07:	mov    rax,QWORD PTR [rbx+0x10]
    ea0b:	test   rax,rax
    ea0e:	js     eafa <hash_remove+0x17a>
    ea14:	pxor   xmm1,xmm1
    ea18:	cvtsi2ss xmm1,rax
    ea1d:	mulss  xmm1,DWORD PTR [rdx]
    ea21:	comiss xmm1,xmm0
    ea24:	jbe    e9c3 <hash_remove+0x43>
    ea26:	lea    rdi,[rbx+0x28]
    ea2a:	call   da20 <check_tuning.isra.0>
    ea2f:	mov    rax,QWORD PTR [rbx+0x10]
    ea33:	mov    rdx,QWORD PTR [rbx+0x28]
    ea37:	test   rax,rax
    ea3a:	js     eb40 <hash_remove+0x1c0>
    ea40:	pxor   xmm0,xmm0
    ea44:	cvtsi2ss xmm0,rax
    ea49:	mov    rax,QWORD PTR [rbx+0x18]
    ea4d:	test   rax,rax
    ea50:	js     eb20 <hash_remove+0x1a0>
    ea56:	pxor   xmm1,xmm1
    ea5a:	cvtsi2ss xmm1,rax
    ea5f:	movss  xmm2,DWORD PTR [rdx]
    ea63:	mulss  xmm2,xmm0
    ea67:	comiss xmm2,xmm1
    ea6a:	jbe    e9c3 <hash_remove+0x43>
    ea70:	mulss  xmm0,DWORD PTR [rdx+0x4]
    ea75:	cmp    BYTE PTR [rdx+0x10],0x0
    ea79:	jne    ea80 <hash_remove+0x100>
    ea7b:	mulss  xmm0,DWORD PTR [rdx+0x8]
    ea80:	comiss xmm0,DWORD PTR [rip+0x8845]        # 172cc <default_tuning+0x2c>
    ea87:	jae    eb60 <hash_remove+0x1e0>
    ea8d:	cvttss2si rsi,xmm0
    ea92:	mov    rdi,rbx
    ea95:	call   e4c0 <hash_rehash>
    ea9a:	test   al,al
    ea9c:	jne    e9c3 <hash_remove+0x43>
    eaa2:	mov    rbp,QWORD PTR [rbx+0x48]
    eaa6:	test   rbp,rbp
    eaa9:	je     eac1 <hash_remove+0x141>
    eaab:	nop    DWORD PTR [rax+rax*1+0x0]
    eab0:	mov    rdi,rbp
    eab3:	mov    rbp,QWORD PTR [rbp+0x8]
    eab7:	call   d750 <rpl_free>
    eabc:	test   rbp,rbp
    eabf:	jne    eab0 <hash_remove+0x130>
    eac1:	mov    QWORD PTR [rbx+0x48],0x0
    eac9:	jmp    e9c3 <hash_remove+0x43>
    eace:	xchg   ax,ax
    ead0:	mov    rdx,rax
    ead3:	and    eax,0x1
    ead6:	pxor   xmm0,xmm0
    eada:	shr    rdx,1
    eadd:	or     rdx,rax
    eae0:	mov    rax,QWORD PTR [rbx+0x10]
    eae4:	cvtsi2ss xmm0,rdx
    eae9:	mov    rdx,QWORD PTR [rbx+0x28]
    eaed:	addss  xmm0,xmm0
    eaf1:	test   rax,rax
    eaf4:	jns    ea14 <hash_remove+0x94>
    eafa:	mov    rcx,rax
    eafd:	and    eax,0x1
    eb00:	pxor   xmm1,xmm1
    eb04:	shr    rcx,1
    eb07:	or     rcx,rax
    eb0a:	cvtsi2ss xmm1,rcx
    eb0f:	addss  xmm1,xmm1
    eb13:	jmp    ea1d <hash_remove+0x9d>
    eb18:	nop    DWORD PTR [rax+rax*1+0x0]
    eb20:	mov    rcx,rax
    eb23:	and    eax,0x1
    eb26:	pxor   xmm1,xmm1
    eb2a:	shr    rcx,1
    eb2d:	or     rcx,rax
    eb30:	cvtsi2ss xmm1,rcx
    eb35:	addss  xmm1,xmm1
    eb39:	jmp    ea5f <hash_remove+0xdf>
    eb3e:	xchg   ax,ax
    eb40:	mov    rcx,rax
    eb43:	and    eax,0x1
    eb46:	pxor   xmm0,xmm0
    eb4a:	shr    rcx,1
    eb4d:	or     rcx,rax
    eb50:	cvtsi2ss xmm0,rcx
    eb55:	addss  xmm0,xmm0
    eb59:	jmp    ea49 <hash_remove+0xc9>
    eb5e:	xchg   ax,ax
    eb60:	subss  xmm0,DWORD PTR [rip+0x8764]        # 172cc <default_tuning+0x2c>
    eb68:	cvttss2si rsi,xmm0
    eb6d:	btc    rsi,0x3f
    eb72:	jmp    ea92 <hash_remove+0x112>
    eb77:	call   3990 <__stack_chk_fail@plt>
    eb7c:	nop    DWORD PTR [rax+0x0]

000000000000eb80 <hash_delete>:
    eb80:	endbr64 
    eb84:	jmp    e980 <hash_remove>
    eb89:	nop    DWORD PTR [rax+0x0]

000000000000eb90 <heap_default_compare>:
    eb90:	endbr64 
    eb94:	xor    eax,eax
    eb96:	ret    
    eb97:	nop    WORD PTR [rax+rax*1+0x0]

000000000000eba0 <heap_alloc>:
    eba0:	endbr64 
    eba4:	push   r12
    eba6:	push   rbp
    eba7:	mov    rbp,rdi
    ebaa:	mov    edi,0x20
    ebaf:	push   rbx
    ebb0:	mov    rbx,rsi
    ebb3:	call   13000 <xmalloc>
    ebb8:	test   rbx,rbx
    ebbb:	mov    esi,0x1
    ebc0:	cmove  rbx,rsi
    ebc4:	mov    esi,0x8
    ebc9:	mov    r12,rax
    ebcc:	mov    rdi,rbx
    ebcf:	call   13150 <xnmalloc>
    ebd4:	test   rbp,rbp
    ebd7:	mov    QWORD PTR [r12+0x8],rbx
    ebdc:	mov    QWORD PTR [rax],0x0
    ebe3:	pop    rbx
    ebe4:	mov    QWORD PTR [r12],rax
    ebe8:	lea    rax,[rip+0xffffffffffffffa1]        # eb90 <heap_default_compare>
    ebef:	mov    QWORD PTR [r12+0x10],0x0
    ebf8:	cmove  rbp,rax
    ebfc:	mov    rax,r12
    ebff:	mov    QWORD PTR [r12+0x18],rbp
    ec04:	pop    rbp
    ec05:	pop    r12
    ec07:	ret    
    ec08:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ec10 <heap_free>:
    ec10:	endbr64 
    ec14:	push   rbp
    ec15:	mov    rbp,rdi
    ec18:	mov    rdi,QWORD PTR [rdi]
    ec1b:	call   d750 <rpl_free>
    ec20:	mov    rdi,rbp
    ec23:	pop    rbp
    ec24:	jmp    d750 <rpl_free>
    ec29:	nop    DWORD PTR [rax+0x0]

000000000000ec30 <heap_insert>:
    ec30:	endbr64 
    ec34:	push   r15
    ec36:	push   r14
    ec38:	push   r13
    ec3a:	push   r12
    ec3c:	mov    r12,rsi
    ec3f:	push   rbp
    ec40:	mov    rbp,rdi
    ec43:	push   rbx
    ec44:	sub    rsp,0x8
    ec48:	mov    rax,QWORD PTR [rbp+0x8]
    ec4c:	mov    rbx,QWORD PTR [rdi+0x10]
    ec50:	mov    rdi,QWORD PTR [rdi]
    ec53:	lea    rdx,[rax-0x1]
    ec57:	cmp    rdx,rbx
    ec5a:	jbe    ecd0 <heap_insert+0xa0>
    ec5c:	add    rbx,0x1
    ec60:	mov    QWORD PTR [rbp+0x10],rbx
    ec64:	mov    QWORD PTR [rdi+rbx*8],r12
    ec68:	mov    r14,QWORD PTR [rbp+0x18]
    ec6c:	mov    rbp,QWORD PTR [rbp+0x0]
    ec70:	mov    r12,QWORD PTR [rbp+rbx*8+0x0]
    ec75:	cmp    rbx,0x1
    ec79:	jne    ec8d <heap_insert+0x5d>
    ec7b:	jmp    ecc8 <heap_insert+0x98>
    ec7d:	nop    DWORD PTR [rax]
    ec80:	mov    rdx,QWORD PTR [r13+0x0]
    ec84:	mov    QWORD PTR [rax],rdx
    ec87:	cmp    rbx,0x1
    ec8b:	je     ecc8 <heap_insert+0x98>
    ec8d:	mov    r15,rbx
    ec90:	shr    rbx,1
    ec93:	mov    rsi,r12
    ec96:	lea    r13,[rbp+rbx*8+0x0]
    ec9b:	mov    rdi,QWORD PTR [r13+0x0]
    ec9f:	call   r14
    eca2:	mov    r8d,eax
    eca5:	lea    rax,[rbp+r15*8+0x0]
    ecaa:	test   r8d,r8d
    ecad:	jle    ec80 <heap_insert+0x50>
    ecaf:	mov    QWORD PTR [rax],r12
    ecb2:	add    rsp,0x8
    ecb6:	xor    eax,eax
    ecb8:	pop    rbx
    ecb9:	pop    rbp
    ecba:	pop    r12
    ecbc:	pop    r13
    ecbe:	pop    r14
    ecc0:	pop    r15
    ecc2:	ret    
    ecc3:	nop    DWORD PTR [rax+rax*1+0x0]
    ecc8:	lea    rax,[rbp+0x8]
    eccc:	jmp    ecaf <heap_insert+0x7f>
    ecce:	xchg   ax,ax
    ecd0:	lea    rsi,[rbp+0x8]
    ecd4:	mov    edx,0x8
    ecd9:	call   13180 <x2nrealloc>
    ecde:	mov    rbx,QWORD PTR [rbp+0x10]
    ece2:	mov    QWORD PTR [rbp+0x0],rax
    ece6:	mov    rdi,rax
    ece9:	jmp    ec5c <heap_insert+0x2c>
    ecee:	xchg   ax,ax

000000000000ecf0 <heap_remove_top>:
    ecf0:	endbr64 
    ecf4:	push   r15
    ecf6:	push   r14
    ecf8:	push   r13
    ecfa:	push   r12
    ecfc:	xor    r12d,r12d
    ecff:	push   rbp
    ed00:	push   rbx
    ed01:	sub    rsp,0x38
    ed05:	mov    rax,QWORD PTR [rdi+0x10]
    ed09:	test   rax,rax
    ed0c:	je     edeb <heap_remove_top+0xfb>
    ed12:	mov    rdx,QWORD PTR [rdi]
    ed15:	lea    rcx,[rax-0x1]
    ed19:	mov    QWORD PTR [rsp+0x20],rcx
    ed1e:	mov    rax,QWORD PTR [rdx+rax*8]
    ed22:	mov    r12,QWORD PTR [rdx+0x8]
    ed26:	mov    QWORD PTR [rdi+0x10],rcx
    ed2a:	shr    rcx,1
    ed2d:	mov    QWORD PTR [rsp+0x28],rcx
    ed32:	mov    QWORD PTR [rdx+0x8],rax
    ed36:	mov    rax,QWORD PTR [rdi+0x18]
    ed3a:	mov    r15,QWORD PTR [rdi]
    ed3d:	mov    QWORD PTR [rsp+0x8],rax
    ed42:	mov    r14,QWORD PTR [r15+0x8]
    ed46:	je     ede0 <heap_remove_top+0xf0>
    ed4c:	mov    r13d,0x1
    ed52:	jmp    ed8b <heap_remove_top+0x9b>
    ed54:	nop    DWORD PTR [rax+0x0]
    ed58:	mov    rbx,r13
    ed5b:	shl    rbx,0x4
    ed5f:	add    rbx,r15
    ed62:	mov    rdi,QWORD PTR [rbx]
    ed65:	mov    rax,QWORD PTR [rsp+0x8]
    ed6a:	mov    rsi,r14
    ed6d:	call   rax
    ed6f:	mov    r9d,eax
    ed72:	lea    rax,[r15+r13*8]
    ed76:	test   r9d,r9d
    ed79:	jle    ede8 <heap_remove_top+0xf8>
    ed7b:	mov    rcx,QWORD PTR [rbx]
    ed7e:	mov    QWORD PTR [rax],rcx
    ed81:	cmp    rbp,QWORD PTR [rsp+0x28]
    ed86:	ja     ee00 <heap_remove_top+0x110>
    ed88:	mov    r13,rbp
    ed8b:	lea    rbp,[r13+r13*1+0x0]
    ed90:	cmp    QWORD PTR [rsp+0x20],rbp
    ed95:	jbe    ed58 <heap_remove_top+0x68>
    ed97:	mov    rbx,r13
    ed9a:	lea    r9,[rbp+0x1]
    ed9e:	mov    rax,QWORD PTR [rsp+0x8]
    eda3:	shl    rbx,0x4
    eda7:	lea    r10,[r15+r9*8]
    edab:	mov    QWORD PTR [rsp+0x18],r9
    edb0:	add    rbx,r15
    edb3:	mov    QWORD PTR [rsp+0x10],r10
    edb8:	mov    rsi,QWORD PTR [r10]
    edbb:	mov    rdi,QWORD PTR [rbx]
    edbe:	call   rax
    edc0:	mov    r10,QWORD PTR [rsp+0x10]
    edc5:	mov    r9,QWORD PTR [rsp+0x18]
    edca:	test   eax,eax
    edcc:	cmovs  rbx,r10
    edd0:	cmovs  rbp,r9
    edd4:	jmp    ed62 <heap_remove_top+0x72>
    edd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ede0:	lea    rax,[r15+0x8]
    ede4:	nop    DWORD PTR [rax+0x0]
    ede8:	mov    QWORD PTR [rax],r14
    edeb:	add    rsp,0x38
    edef:	mov    rax,r12
    edf2:	pop    rbx
    edf3:	pop    rbp
    edf4:	pop    r12
    edf6:	pop    r13
    edf8:	pop    r14
    edfa:	pop    r15
    edfc:	ret    
    edfd:	nop    DWORD PTR [rax]
    ee00:	mov    rax,rbx
    ee03:	mov    QWORD PTR [rax],r14
    ee06:	jmp    edeb <heap_remove_top+0xfb>
    ee08:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ee10 <inttostr>:
    ee10:	endbr64 
    ee14:	mov    BYTE PTR [rsi+0xb],0x0
    ee18:	lea    r8,[rsi+0xb]
    ee1c:	mov    ecx,0xcccccccd
    ee21:	test   edi,edi
    ee23:	js     ee50 <inttostr+0x40>
    ee25:	nop    DWORD PTR [rax]
    ee28:	mov    eax,edi
    ee2a:	sub    r8,0x1
    ee2e:	imul   rax,rcx
    ee32:	shr    rax,0x23
    ee36:	lea    edx,[rax+rax*4]
    ee39:	add    edx,edx
    ee3b:	sub    edi,edx
    ee3d:	add    edi,0x30
    ee40:	mov    BYTE PTR [r8],dil
    ee43:	mov    edi,eax
    ee45:	test   eax,eax
    ee47:	jne    ee28 <inttostr+0x18>
    ee49:	mov    rax,r8
    ee4c:	ret    
    ee4d:	nop    DWORD PTR [rax]
    ee50:	mov    esi,0x30
    ee55:	nop    DWORD PTR [rax]
    ee58:	movsxd rax,edi
    ee5b:	mov    edx,edi
    ee5d:	mov    rcx,r8
    ee60:	sub    r8,0x1
    ee64:	imul   rax,rax,0x66666667
    ee6b:	sar    edx,0x1f
    ee6e:	sar    rax,0x22
    ee72:	sub    eax,edx
    ee74:	lea    edx,[rax+rax*4]
    ee77:	lea    edx,[rsi+rdx*2]
    ee7a:	sub    edx,edi
    ee7c:	mov    edi,eax
    ee7e:	mov    BYTE PTR [r8],dl
    ee81:	test   eax,eax
    ee83:	jne    ee58 <inttostr+0x48>
    ee85:	mov    BYTE PTR [r8-0x1],0x2d
    ee8a:	lea    r8,[rcx-0x2]
    ee8e:	mov    rax,r8
    ee91:	ret    
    ee92:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ee9c:	nop    DWORD PTR [rax+0x0]

000000000000eea0 <uinttostr>:
    eea0:	endbr64 
    eea4:	mov    BYTE PTR [rsi+0xa],0x0
    eea8:	lea    r8,[rsi+0xa]
    eeac:	mov    ecx,0xcccccccd
    eeb1:	nop    DWORD PTR [rax+0x0]
    eeb8:	mov    eax,edi
    eeba:	mov    esi,edi
    eebc:	sub    r8,0x1
    eec0:	imul   rax,rcx
    eec4:	shr    rax,0x23
    eec8:	lea    edx,[rax+rax*4]
    eecb:	add    edx,edx
    eecd:	sub    esi,edx
    eecf:	mov    edx,esi
    eed1:	add    edx,0x30
    eed4:	mov    BYTE PTR [r8],dl
    eed7:	mov    edx,edi
    eed9:	mov    edi,eax
    eedb:	cmp    edx,0x9
    eede:	ja     eeb8 <uinttostr+0x18>
    eee0:	mov    rax,r8
    eee3:	ret    
    eee4:	nop    WORD PTR cs:[rax+rax*1+0x0]
    eeee:	xchg   ax,ax

000000000000eef0 <umaxtostr>:
    eef0:	endbr64 
    eef4:	mov    BYTE PTR [rsi+0x14],0x0
    eef8:	lea    r8,[rsi+0x14]
    eefc:	movabs rcx,0xcccccccccccccccd
    ef06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ef10:	mov    rax,rdi
    ef13:	mov    rsi,rdi
    ef16:	sub    r8,0x1
    ef1a:	mul    rcx
    ef1d:	shr    rdx,0x3
    ef21:	lea    rax,[rdx+rdx*4]
    ef25:	add    rax,rax
    ef28:	sub    rsi,rax
    ef2b:	mov    rax,rsi
    ef2e:	add    eax,0x30
    ef31:	mov    BYTE PTR [r8],al
    ef34:	mov    rax,rdi
    ef37:	mov    rdi,rdx
    ef3a:	cmp    rax,0x9
    ef3e:	ja     ef10 <umaxtostr+0x20>
    ef40:	mov    rax,r8
    ef43:	ret    
    ef44:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ef4e:	xchg   ax,ax

000000000000ef50 <mbsnwidth>:
    ef50:	endbr64 
    ef54:	push   r15
    ef56:	lea    r15,[rdi+rsi*1]
    ef5a:	push   r14
    ef5c:	push   r13
    ef5e:	mov    r13d,edx
    ef61:	push   r12
    ef63:	push   rbp
    ef64:	push   rbx
    ef65:	mov    rbx,rdi
    ef68:	sub    rsp,0x28
    ef6c:	mov    rax,QWORD PTR fs:0x28
    ef75:	mov    QWORD PTR [rsp+0x18],rax
    ef7a:	xor    eax,eax
    ef7c:	call   3970 <__ctype_get_mb_cur_max@plt>
    ef81:	cmp    rax,0x1
    ef85:	jbe    f098 <mbsnwidth+0x148>
    ef8b:	xor    r12d,r12d
    ef8e:	cmp    rbx,r15
    ef91:	jae    eff8 <mbsnwidth+0xa8>
    ef93:	lea    rbp,[rsp+0x10]
    ef98:	jmp    efad <mbsnwidth+0x5d>
    ef9a:	nop    WORD PTR [rax+rax*1+0x0]
    efa0:	add    rbx,0x1
    efa4:	add    r12d,0x1
    efa8:	cmp    rbx,r15
    efab:	jae    eff8 <mbsnwidth+0xa8>
    efad:	movsx  eax,BYTE PTR [rbx]
    efb0:	sub    eax,0x20
    efb3:	cmp    eax,0x5e
    efb6:	jbe    efa0 <mbsnwidth+0x50>
    efb8:	mov    rdx,r15
    efbb:	lea    rdi,[rsp+0xc]
    efc0:	mov    rcx,rbp
    efc3:	mov    rsi,rbx
    efc6:	sub    rdx,rbx
    efc9:	mov    QWORD PTR [rbp+0x0],0x0
    efd1:	call   141b0 <rpl_mbrtoc32>
    efd6:	cmp    rax,0xffffffffffffffff
    efda:	je     f020 <mbsnwidth+0xd0>
    efdc:	cmp    rax,0xfffffffffffffffe
    efe0:	jne    f038 <mbsnwidth+0xe8>
    efe2:	test   r13b,0x1
    efe6:	jne    f02a <mbsnwidth+0xda>
    efe8:	mov    rbx,r15
    efeb:	add    r12d,0x1
    efef:	cmp    rbx,r15
    eff2:	jb     efad <mbsnwidth+0x5d>
    eff4:	nop    DWORD PTR [rax+0x0]
    eff8:	mov    rax,QWORD PTR [rsp+0x18]
    effd:	xor    rax,QWORD PTR fs:0x28
    f006:	jne    f0fb <mbsnwidth+0x1ab>
    f00c:	add    rsp,0x28
    f010:	mov    eax,r12d
    f013:	pop    rbx
    f014:	pop    rbp
    f015:	pop    r12
    f017:	pop    r13
    f019:	pop    r14
    f01b:	pop    r15
    f01d:	ret    
    f01e:	xchg   ax,ax
    f020:	test   r13b,0x1
    f024:	je     efa0 <mbsnwidth+0x50>
    f02a:	mov    r12d,0xffffffff
    f030:	jmp    eff8 <mbsnwidth+0xa8>
    f032:	nop    WORD PTR [rax+rax*1+0x0]
    f038:	mov    edi,DWORD PTR [rsp+0xc]
    f03c:	test   rax,rax
    f03f:	mov    r14d,0x1
    f045:	cmovne r14,rax
    f049:	call   3bd0 <wcwidth@plt>
    f04e:	test   eax,eax
    f050:	js     f070 <mbsnwidth+0x120>
    f052:	mov    edx,0x7fffffff
    f057:	sub    edx,r12d
    f05a:	cmp    edx,eax
    f05c:	jl     f0f0 <mbsnwidth+0x1a0>
    f062:	add    r12d,eax
    f065:	add    rbx,r14
    f068:	jmp    efa8 <mbsnwidth+0x58>
    f06d:	nop    DWORD PTR [rax]
    f070:	test   r13b,0x2
    f074:	jne    f02a <mbsnwidth+0xda>
    f076:	mov    edi,DWORD PTR [rsp+0xc]
    f07a:	call   38a0 <iswcntrl@plt>
    f07f:	test   eax,eax
    f081:	jne    f065 <mbsnwidth+0x115>
    f083:	cmp    r12d,0x7fffffff
    f08a:	je     f0f0 <mbsnwidth+0x1a0>
    f08c:	add    r12d,0x1
    f090:	jmp    f065 <mbsnwidth+0x115>
    f092:	nop    WORD PTR [rax+rax*1+0x0]
    f098:	xor    r12d,r12d
    f09b:	cmp    rbx,r15
    f09e:	jae    eff8 <mbsnwidth+0xa8>
    f0a4:	call   3ec0 <__ctype_b_loc@plt>
    f0a9:	xor    r12d,r12d
    f0ac:	and    r13d,0x2
    f0b0:	mov    rdx,QWORD PTR [rax]
    f0b3:	nop    DWORD PTR [rax+rax*1+0x0]
    f0b8:	movzx  eax,BYTE PTR [rbx]
    f0bb:	add    rbx,0x1
    f0bf:	movzx  eax,WORD PTR [rdx+rax*2]
    f0c3:	test   ah,0x40
    f0c6:	jne    f0d5 <mbsnwidth+0x185>
    f0c8:	test   r13d,r13d
    f0cb:	jne    f02a <mbsnwidth+0xda>
    f0d1:	test   al,0x2
    f0d3:	jne    f0e6 <mbsnwidth+0x196>
    f0d5:	cmp    r12d,0x7fffffff
    f0dc:	je     eff8 <mbsnwidth+0xa8>
    f0e2:	add    r12d,0x1
    f0e6:	cmp    r15,rbx
    f0e9:	jne    f0b8 <mbsnwidth+0x168>
    f0eb:	jmp    eff8 <mbsnwidth+0xa8>
    f0f0:	mov    r12d,0x7fffffff
    f0f6:	jmp    eff8 <mbsnwidth+0xa8>
    f0fb:	call   3990 <__stack_chk_fail@plt>

000000000000f100 <gnu_mbswidth>:
    f100:	endbr64 
    f104:	push   r12
    f106:	mov    r12d,esi
    f109:	push   rbp
    f10a:	mov    rbp,rdi
    f10d:	sub    rsp,0x8
    f111:	call   3980 <strlen@plt>
    f116:	add    rsp,0x8
    f11a:	mov    edx,r12d
    f11d:	mov    rdi,rbp
    f120:	mov    rsi,rax
    f123:	pop    rbp
    f124:	pop    r12
    f126:	jmp    ef50 <mbsnwidth>
    f12b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000f130 <num_processors_via_affinity_mask>:
    f130:	push   rbp
    f131:	xor    edi,edi
    f133:	mov    esi,0x80
    f138:	sub    rsp,0x90
    f13f:	mov    rax,QWORD PTR fs:0x28
    f148:	mov    QWORD PTR [rsp+0x88],rax
    f150:	xor    eax,eax
    f152:	mov    rbp,rsp
    f155:	mov    rdx,rbp
    f158:	call   3e30 <sched_getaffinity@plt>
    f15d:	test   eax,eax
    f15f:	je     f180 <num_processors_via_affinity_mask+0x50>
    f161:	xor    eax,eax
    f163:	mov    rcx,QWORD PTR [rsp+0x88]
    f16b:	xor    rcx,QWORD PTR fs:0x28
    f174:	jne    f196 <num_processors_via_affinity_mask+0x66>
    f176:	add    rsp,0x90
    f17d:	pop    rbp
    f17e:	ret    
    f17f:	nop
    f180:	mov    rsi,rbp
    f183:	mov    edi,0x80
    f188:	call   3940 <__sched_cpucount@plt>
    f18d:	cdqe   
    f18f:	test   rax,rax
    f192:	je     f161 <num_processors_via_affinity_mask+0x31>
    f194:	jmp    f163 <num_processors_via_affinity_mask+0x33>
    f196:	call   3990 <__stack_chk_fail@plt>
    f19b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000f1a0 <parse_omp_threads.part.0>:
    f1a0:	sub    rsp,0x18
    f1a4:	mov    rax,QWORD PTR fs:0x28
    f1ad:	mov    QWORD PTR [rsp+0x8],rax
    f1b2:	xor    eax,eax
    f1b4:	movsx  eax,BYTE PTR [rdi]
    f1b7:	test   al,al
    f1b9:	je     f1c3 <parse_omp_threads.part.0+0x23>
    f1bb:	cmp    al,0xd
    f1bd:	jg     f1f0 <parse_omp_threads.part.0+0x50>
    f1bf:	cmp    al,0x8
    f1c1:	jg     f1e0 <parse_omp_threads.part.0+0x40>
    f1c3:	xor    eax,eax
    f1c5:	mov    rsi,QWORD PTR [rsp+0x8]
    f1ca:	xor    rsi,QWORD PTR fs:0x28
    f1d3:	jne    f256 <parse_omp_threads.part.0+0xb6>
    f1d9:	add    rsp,0x18
    f1dd:	ret    
    f1de:	xchg   ax,ax
    f1e0:	movsx  eax,BYTE PTR [rdi+0x1]
    f1e4:	add    rdi,0x1
    f1e8:	test   al,al
    f1ea:	je     f1c3 <parse_omp_threads.part.0+0x23>
    f1ec:	cmp    al,0xd
    f1ee:	jle    f1bf <parse_omp_threads.part.0+0x1f>
    f1f0:	cmp    al,0x20
    f1f2:	je     f1e0 <parse_omp_threads.part.0+0x40>
    f1f4:	sub    eax,0x30
    f1f7:	cmp    eax,0x9
    f1fa:	ja     f1c3 <parse_omp_threads.part.0+0x23>
    f1fc:	mov    edx,0xa
    f201:	mov    rsi,rsp
    f204:	mov    QWORD PTR [rsp],0x0
    f20c:	call   3d90 <strtoul@plt>
    f211:	mov    rdx,QWORD PTR [rsp]
    f215:	test   rdx,rdx
    f218:	je     f1c3 <parse_omp_threads.part.0+0x23>
    f21a:	movzx  ecx,BYTE PTR [rdx]
    f21d:	test   cl,cl
    f21f:	je     f1c5 <parse_omp_threads.part.0+0x25>
    f221:	add    rdx,0x1
    f225:	cmp    cl,0xd
    f228:	jg     f243 <parse_omp_threads.part.0+0xa3>
    f22a:	cmp    cl,0x8
    f22d:	jle    f1c3 <parse_omp_threads.part.0+0x23>
    f22f:	mov    QWORD PTR [rsp],rdx
    f233:	movzx  ecx,BYTE PTR [rdx]
    f236:	add    rdx,0x1
    f23a:	test   cl,cl
    f23c:	je     f1c5 <parse_omp_threads.part.0+0x25>
    f23e:	cmp    cl,0xd
    f241:	jle    f22a <parse_omp_threads.part.0+0x8a>
    f243:	cmp    cl,0x20
    f246:	je     f22f <parse_omp_threads.part.0+0x8f>
    f248:	cmp    cl,0x2c
    f24b:	je     f1c5 <parse_omp_threads.part.0+0x25>
    f251:	jmp    f1c3 <parse_omp_threads.part.0+0x23>
    f256:	call   3990 <__stack_chk_fail@plt>
    f25b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000f260 <num_processors>:
    f260:	endbr64 
    f264:	push   r12
    f266:	push   rbx
    f267:	sub    rsp,0x8
    f26b:	cmp    edi,0x2
    f26e:	je     f2b0 <num_processors+0x50>
    f270:	cmp    edi,0x1
    f273:	je     f39d <num_processors+0x13d>
    f279:	mov    edi,0x53
    f27e:	call   3d60 <sysconf@plt>
    f283:	mov    rbx,rax
    f286:	mov    r12,rax
    f289:	lea    rax,[rax-0x1]
    f28d:	cmp    rax,0x1
    f291:	jbe    f328 <num_processors+0xc8>
    f297:	test   rbx,rbx
    f29a:	mov    r12d,0x1
    f2a0:	cmovg  r12,rbx
    f2a4:	add    rsp,0x8
    f2a8:	mov    rax,r12
    f2ab:	pop    rbx
    f2ac:	pop    r12
    f2ae:	ret    
    f2af:	nop
    f2b0:	lea    rdi,[rip+0x8019]        # 172d0 <default_tuning+0x30>
    f2b7:	call   37a0 <getenv@plt>
    f2bc:	mov    rdi,rax
    f2bf:	test   rax,rax
    f2c2:	je     f378 <num_processors+0x118>
    f2c8:	call   f1a0 <parse_omp_threads.part.0>
    f2cd:	lea    rdi,[rip+0x800c]        # 172e0 <default_tuning+0x40>
    f2d4:	mov    r12,rax
    f2d7:	call   37a0 <getenv@plt>
    f2dc:	mov    rdi,rax
    f2df:	test   rax,rax
    f2e2:	je     f3b0 <num_processors+0x150>
    f2e8:	call   f1a0 <parse_omp_threads.part.0>
    f2ed:	mov    rbx,rax
    f2f0:	test   rax,rax
    f2f3:	mov    rax,0xffffffffffffffff
    f2fa:	cmove  rbx,rax
    f2fe:	test   r12,r12
    f301:	jne    f360 <num_processors+0x100>
    f303:	call   f130 <num_processors_via_affinity_mask>
    f308:	test   rax,rax
    f30b:	je     f340 <num_processors+0xe0>
    f30d:	cmp    rax,rbx
    f310:	cmovbe rbx,rax
    f314:	add    rsp,0x8
    f318:	mov    r12,rbx
    f31b:	pop    rbx
    f31c:	mov    rax,r12
    f31f:	pop    r12
    f321:	ret    
    f322:	nop    WORD PTR [rax+rax*1+0x0]
    f328:	call   f130 <num_processors_via_affinity_mask>
    f32d:	cmp    rbx,rax
    f330:	jae    f2a4 <num_processors+0x44>
    f336:	mov    rbx,rax
    f339:	jmp    f297 <num_processors+0x37>
    f33e:	xchg   ax,ax
    f340:	mov    edi,0x54
    f345:	mov    r12d,0x1
    f34b:	call   3d60 <sysconf@plt>
    f350:	test   rax,rax
    f353:	jle    f2a4 <num_processors+0x44>
    f359:	jmp    f30d <num_processors+0xad>
    f35b:	nop    DWORD PTR [rax+rax*1+0x0]
    f360:	cmp    rbx,r12
    f363:	cmovbe r12,rbx
    f367:	add    rsp,0x8
    f36b:	pop    rbx
    f36c:	mov    rax,r12
    f36f:	pop    r12
    f371:	ret    
    f372:	nop    WORD PTR [rax+rax*1+0x0]
    f378:	lea    rdi,[rip+0x7f61]        # 172e0 <default_tuning+0x40>
    f37f:	call   37a0 <getenv@plt>
    f384:	mov    rdi,rax
    f387:	test   rax,rax
    f38a:	je     f39d <num_processors+0x13d>
    f38c:	call   f1a0 <parse_omp_threads.part.0>
    f391:	mov    rbx,rax
    f394:	test   rax,rax
    f397:	jne    f303 <num_processors+0xa3>
    f39d:	mov    rbx,0xffffffffffffffff
    f3a4:	jmp    f303 <num_processors+0xa3>
    f3a9:	nop    DWORD PTR [rax+0x0]
    f3b0:	mov    rbx,0xffffffffffffffff
    f3b7:	jmp    f2fe <num_processors+0x9e>
    f3bc:	nop    DWORD PTR [rax+0x0]

000000000000f3c0 <physmem_total>:
    f3c0:	endbr64 
    f3c4:	sub    rsp,0x98
    f3cb:	mov    edi,0x55
    f3d0:	mov    rax,QWORD PTR fs:0x28
    f3d9:	mov    QWORD PTR [rsp+0x88],rax
    f3e1:	xor    eax,eax
    f3e3:	call   3d60 <sysconf@plt>
    f3e8:	pxor   xmm0,xmm0
    f3ec:	mov    edi,0x1e
    f3f1:	cvtsi2sd xmm0,rax
    f3f6:	movsd  QWORD PTR [rsp+0x8],xmm0
    f3fc:	call   3d60 <sysconf@plt>
    f401:	movsd  xmm0,QWORD PTR [rsp+0x8]
    f407:	pxor   xmm2,xmm2
    f40b:	comisd xmm0,xmm2
    f40f:	jb     f420 <physmem_total+0x60>
    f411:	pxor   xmm1,xmm1
    f415:	cvtsi2sd xmm1,rax
    f41a:	comisd xmm1,xmm2
    f41e:	jae    f478 <physmem_total+0xb8>
    f420:	lea    rdi,[rsp+0x10]
    f425:	call   3db0 <sysinfo@plt>
    f42a:	movsd  xmm0,QWORD PTR [rip+0x7ec6]        # 172f8 <default_tuning+0x58>
    f432:	test   eax,eax
    f434:	je     f458 <physmem_total+0x98>
    f436:	mov    rax,QWORD PTR [rsp+0x88]
    f43e:	xor    rax,QWORD PTR fs:0x28
    f447:	jne    f49b <physmem_total+0xdb>
    f449:	add    rsp,0x98
    f450:	ret    
    f451:	nop    DWORD PTR [rax+0x0]
    f458:	mov    rax,QWORD PTR [rsp+0x30]
    f45d:	test   rax,rax
    f460:	js     f480 <physmem_total+0xc0>
    f462:	pxor   xmm0,xmm0
    f466:	cvtsi2sd xmm0,rax
    f46b:	mov    eax,DWORD PTR [rsp+0x78]
    f46f:	pxor   xmm1,xmm1
    f473:	cvtsi2sd xmm1,rax
    f478:	mulsd  xmm0,xmm1
    f47c:	jmp    f436 <physmem_total+0x76>
    f47e:	xchg   ax,ax
    f480:	mov    rdx,rax
    f483:	and    eax,0x1
    f486:	pxor   xmm0,xmm0
    f48a:	shr    rdx,1
    f48d:	or     rdx,rax
    f490:	cvtsi2sd xmm0,rdx
    f495:	addsd  xmm0,xmm0
    f499:	jmp    f46b <physmem_total+0xab>
    f49b:	call   3990 <__stack_chk_fail@plt>

000000000000f4a0 <physmem_available>:
    f4a0:	endbr64 
    f4a4:	sub    rsp,0x98
    f4ab:	mov    edi,0x56
    f4b0:	mov    rax,QWORD PTR fs:0x28
    f4b9:	mov    QWORD PTR [rsp+0x88],rax
    f4c1:	xor    eax,eax
    f4c3:	call   3d60 <sysconf@plt>
    f4c8:	pxor   xmm0,xmm0
    f4cc:	mov    edi,0x1e
    f4d1:	cvtsi2sd xmm0,rax
    f4d6:	movsd  QWORD PTR [rsp+0x8],xmm0
    f4dc:	call   3d60 <sysconf@plt>
    f4e1:	movsd  xmm0,QWORD PTR [rsp+0x8]
    f4e7:	pxor   xmm2,xmm2
    f4eb:	comisd xmm0,xmm2
    f4ef:	jb     f500 <physmem_available+0x60>
    f4f1:	pxor   xmm1,xmm1
    f4f5:	cvtsi2sd xmm1,rax
    f4fa:	comisd xmm1,xmm2
    f4fe:	jae    f545 <physmem_available+0xa5>
    f500:	lea    rdi,[rsp+0x10]
    f505:	call   3db0 <sysinfo@plt>
    f50a:	test   eax,eax
    f50c:	jne    f568 <physmem_available+0xc8>
    f50e:	mov    rax,QWORD PTR [rsp+0x38]
    f513:	test   rax,rax
    f516:	js     f580 <physmem_available+0xe0>
    f518:	pxor   xmm0,xmm0
    f51c:	cvtsi2sd xmm0,rax
    f521:	mov    rax,QWORD PTR [rsp+0x48]
    f526:	test   rax,rax
    f529:	js     f5a3 <physmem_available+0x103>
    f52b:	pxor   xmm1,xmm1
    f52f:	cvtsi2sd xmm1,rax
    f534:	mov    eax,DWORD PTR [rsp+0x78]
    f538:	addsd  xmm0,xmm1
    f53c:	pxor   xmm1,xmm1
    f540:	cvtsi2sd xmm1,rax
    f545:	mulsd  xmm0,xmm1
    f549:	mov    rax,QWORD PTR [rsp+0x88]
    f551:	xor    rax,QWORD PTR fs:0x28
    f55a:	jne    f5c1 <physmem_available+0x121>
    f55c:	add    rsp,0x98
    f563:	ret    
    f564:	nop    DWORD PTR [rax+0x0]
    f568:	call   f3c0 <physmem_total>
    f56d:	mulsd  xmm0,QWORD PTR [rip+0x7bc3]        # 17138 <short_options+0x1cc8>
    f575:	jmp    f549 <physmem_available+0xa9>
    f577:	nop    WORD PTR [rax+rax*1+0x0]
    f580:	mov    rdx,rax
    f583:	and    eax,0x1
    f586:	pxor   xmm0,xmm0
    f58a:	shr    rdx,1
    f58d:	or     rdx,rax
    f590:	mov    rax,QWORD PTR [rsp+0x48]
    f595:	cvtsi2sd xmm0,rdx
    f59a:	addsd  xmm0,xmm0
    f59e:	test   rax,rax
    f5a1:	jns    f52b <physmem_available+0x8b>
    f5a3:	mov    rdx,rax
    f5a6:	and    eax,0x1
    f5a9:	pxor   xmm1,xmm1
    f5ad:	shr    rdx,1
    f5b0:	or     rdx,rax
    f5b3:	cvtsi2sd xmm1,rdx
    f5b8:	addsd  xmm1,xmm1
    f5bc:	jmp    f534 <physmem_available+0x94>
    f5c1:	call   3990 <__stack_chk_fail@plt>
    f5c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000f5d0 <rpl_pipe2>:
    f5d0:	endbr64 
    f5d4:	push   r13
    f5d6:	push   r12
    f5d8:	push   rbp
    f5d9:	mov    ebp,esi
    f5db:	push   rbx
    f5dc:	mov    rbx,rdi
    f5df:	sub    rsp,0x8
    f5e3:	mov    eax,DWORD PTR [rip+0xf2b7]        # 1e8a0 <have_pipe2_really.4232>
    f5e9:	mov    r13,QWORD PTR [rdi]
    f5ec:	test   eax,eax
    f5ee:	jns    f740 <rpl_pipe2+0x170>
    f5f4:	mov    r12d,ebp
    f5f7:	and    r12d,0xfff7f7ff
    f5fe:	jne    f780 <rpl_pipe2+0x1b0>
    f604:	mov    rdi,rbx
    f607:	call   3aa0 <pipe@plt>
    f60c:	test   eax,eax
    f60e:	js     f796 <rpl_pipe2+0x1c6>
    f614:	test   ebp,0x800
    f61a:	jne    f640 <rpl_pipe2+0x70>
    f61c:	and    ebp,0x80000
    f622:	jne    f6d0 <rpl_pipe2+0x100>
    f628:	add    rsp,0x8
    f62c:	mov    eax,r12d
    f62f:	pop    rbx
    f630:	pop    rbp
    f631:	pop    r12
    f633:	pop    r13
    f635:	ret    
    f636:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f640:	mov    edi,DWORD PTR [rbx+0x4]
    f643:	xor    edx,edx
    f645:	xor    eax,eax
    f647:	mov    esi,0x3
    f64c:	call   13e00 <rpl_fcntl>
    f651:	test   eax,eax
    f653:	js     f6a0 <rpl_pipe2+0xd0>
    f655:	or     ah,0x8
    f658:	mov    edi,DWORD PTR [rbx+0x4]
    f65b:	mov    esi,0x4
    f660:	mov    edx,eax
    f662:	xor    eax,eax
    f664:	call   13e00 <rpl_fcntl>
    f669:	cmp    eax,0xffffffff
    f66c:	je     f6a0 <rpl_pipe2+0xd0>
    f66e:	mov    edi,DWORD PTR [rbx]
    f670:	xor    edx,edx
    f672:	xor    eax,eax
    f674:	mov    esi,0x3
    f679:	call   13e00 <rpl_fcntl>
    f67e:	test   eax,eax
    f680:	js     f6a0 <rpl_pipe2+0xd0>
    f682:	or     ah,0x8
    f685:	mov    edi,DWORD PTR [rbx]
    f687:	mov    esi,0x4
    f68c:	mov    edx,eax
    f68e:	xor    eax,eax
    f690:	call   13e00 <rpl_fcntl>
    f695:	cmp    eax,0xffffffff
    f698:	jne    f61c <rpl_pipe2+0x4c>
    f69a:	nop    WORD PTR [rax+rax*1+0x0]
    f6a0:	call   3810 <__errno_location@plt>
    f6a5:	mov    edi,DWORD PTR [rbx]
    f6a7:	mov    r12d,DWORD PTR [rax]
    f6aa:	mov    rbp,rax
    f6ad:	call   3a80 <close@plt>
    f6b2:	mov    edi,DWORD PTR [rbx+0x4]
    f6b5:	call   3a80 <close@plt>
    f6ba:	mov    QWORD PTR [rbx],r13
    f6bd:	mov    DWORD PTR [rbp+0x0],r12d
    f6c1:	mov    r12d,0xffffffff
    f6c7:	jmp    f628 <rpl_pipe2+0x58>
    f6cc:	nop    DWORD PTR [rax+0x0]
    f6d0:	mov    edi,DWORD PTR [rbx+0x4]
    f6d3:	xor    edx,edx
    f6d5:	xor    eax,eax
    f6d7:	mov    esi,0x1
    f6dc:	call   13e00 <rpl_fcntl>
    f6e1:	test   eax,eax
    f6e3:	js     f6a0 <rpl_pipe2+0xd0>
    f6e5:	or     eax,0x1
    f6e8:	mov    edi,DWORD PTR [rbx+0x4]
    f6eb:	mov    esi,0x2
    f6f0:	mov    edx,eax
    f6f2:	xor    eax,eax
    f6f4:	call   13e00 <rpl_fcntl>
    f6f9:	cmp    eax,0xffffffff
    f6fc:	je     f6a0 <rpl_pipe2+0xd0>
    f6fe:	mov    edi,DWORD PTR [rbx]
    f700:	xor    edx,edx
    f702:	xor    eax,eax
    f704:	mov    esi,0x1
    f709:	call   13e00 <rpl_fcntl>
    f70e:	test   eax,eax
    f710:	js     f6a0 <rpl_pipe2+0xd0>
    f712:	or     eax,0x1
    f715:	mov    edi,DWORD PTR [rbx]
    f717:	mov    esi,0x2
    f71c:	mov    edx,eax
    f71e:	xor    eax,eax
    f720:	call   13e00 <rpl_fcntl>
    f725:	cmp    eax,0xffffffff
    f728:	je     f6a0 <rpl_pipe2+0xd0>
    f72e:	add    rsp,0x8
    f732:	mov    eax,r12d
    f735:	pop    rbx
    f736:	pop    rbp
    f737:	pop    r12
    f739:	pop    r13
    f73b:	ret    
    f73c:	nop    DWORD PTR [rax+0x0]
    f740:	call   3dc0 <pipe2@plt>
    f745:	mov    r12d,eax
    f748:	test   eax,eax
    f74a:	jns    f756 <rpl_pipe2+0x186>
    f74c:	call   3810 <__errno_location@plt>
    f751:	cmp    DWORD PTR [rax],0x26
    f754:	je     f770 <rpl_pipe2+0x1a0>
    f756:	mov    DWORD PTR [rip+0xf140],0x1        # 1e8a0 <have_pipe2_really.4232>
    f760:	add    rsp,0x8
    f764:	mov    eax,r12d
    f767:	pop    rbx
    f768:	pop    rbp
    f769:	pop    r12
    f76b:	pop    r13
    f76d:	ret    
    f76e:	xchg   ax,ax
    f770:	mov    DWORD PTR [rip+0xf126],0xffffffff        # 1e8a0 <have_pipe2_really.4232>
    f77a:	jmp    f5f4 <rpl_pipe2+0x24>
    f77f:	nop
    f780:	call   3810 <__errno_location@plt>
    f785:	mov    r12d,0xffffffff
    f78b:	mov    DWORD PTR [rax],0x16
    f791:	jmp    f628 <rpl_pipe2+0x58>
    f796:	mov    r12d,0xffffffff
    f79c:	jmp    f628 <rpl_pipe2+0x58>
    f7a1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f7ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000f7b0 <posix2_version>:
    f7b0:	endbr64 
    f7b4:	push   r12
    f7b6:	lea    rdi,[rip+0x7b43]        # 17300 <default_tuning+0x60>
    f7bd:	mov    r12d,0x31069
    f7c3:	sub    rsp,0x10
    f7c7:	mov    rax,QWORD PTR fs:0x28
    f7d0:	mov    QWORD PTR [rsp+0x8],rax
    f7d5:	xor    eax,eax
    f7d7:	call   37a0 <getenv@plt>
    f7dc:	test   rax,rax
    f7df:	je     f7e6 <posix2_version+0x36>
    f7e1:	cmp    BYTE PTR [rax],0x0
    f7e4:	jne    f800 <posix2_version+0x50>
    f7e6:	mov    rax,QWORD PTR [rsp+0x8]
    f7eb:	xor    rax,QWORD PTR fs:0x28
    f7f4:	jne    f83b <posix2_version+0x8b>
    f7f6:	add    rsp,0x10
    f7fa:	mov    eax,r12d
    f7fd:	pop    r12
    f7ff:	ret    
    f800:	mov    edx,0xa
    f805:	mov    rsi,rsp
    f808:	mov    rdi,rax
    f80b:	call   3b70 <strtol@plt>
    f810:	mov    rdx,QWORD PTR [rsp]
    f814:	cmp    BYTE PTR [rdx],0x0
    f817:	jne    f7e6 <posix2_version+0x36>
    f819:	cmp    rax,0xffffffff80000000
    f81f:	jl     f833 <posix2_version+0x83>
    f821:	cmp    rax,0x7fffffff
    f827:	mov    r12d,0x7fffffff
    f82d:	cmovle r12,rax
    f831:	jmp    f7e6 <posix2_version+0x36>
    f833:	mov    r12d,0x80000000
    f839:	jmp    f7e6 <posix2_version+0x36>
    f83b:	call   3990 <__stack_chk_fail@plt>

000000000000f840 <set_program_name>:
    f840:	endbr64 
    f844:	push   rbx
    f845:	test   rdi,rdi
    f848:	je     f8d3 <set_program_name+0x93>
    f84e:	mov    esi,0x2f
    f853:	mov    rbx,rdi
    f856:	call   3a00 <strrchr@plt>
    f85b:	test   rax,rax
    f85e:	je     f8ab <set_program_name+0x6b>
    f860:	lea    r8,[rax+0x1]
    f864:	mov    rdx,r8
    f867:	sub    rdx,rbx
    f86a:	cmp    rdx,0x6
    f86e:	jle    f8ab <set_program_name+0x6b>
    f870:	lea    rsi,[rax-0x6]
    f874:	mov    ecx,0x7
    f879:	lea    rdi,[rip+0x7ac8]        # 17348 <default_tuning+0xa8>
    f880:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    f882:	seta   dl
    f885:	sbb    dl,0x0
    f888:	test   dl,dl
    f88a:	jne    f8ab <set_program_name+0x6b>
    f88c:	cmp    BYTE PTR [rax+0x1],0x6c
    f890:	jne    f8c0 <set_program_name+0x80>
    f892:	cmp    BYTE PTR [r8+0x1],0x74
    f897:	jne    f8c0 <set_program_name+0x80>
    f899:	cmp    BYTE PTR [r8+0x2],0x2d
    f89e:	jne    f8c0 <set_program_name+0x80>
    f8a0:	lea    rbx,[rax+0x4]
    f8a4:	mov    QWORD PTR [rip+0xe915],rbx        # 1e1c0 <__progname@@GLIBC_2.2.5>
    f8ab:	mov    QWORD PTR [rip+0xeff6],rbx        # 1e8a8 <program_name>
    f8b2:	mov    QWORD PTR [rip+0xe92f],rbx        # 1e1e8 <__progname_full@@GLIBC_2.2.5>
    f8b9:	pop    rbx
    f8ba:	ret    
    f8bb:	nop    DWORD PTR [rax+rax*1+0x0]
    f8c0:	mov    rbx,r8
    f8c3:	mov    QWORD PTR [rip+0xefde],rbx        # 1e8a8 <program_name>
    f8ca:	mov    QWORD PTR [rip+0xe917],rbx        # 1e1e8 <__progname_full@@GLIBC_2.2.5>
    f8d1:	pop    rbx
    f8d2:	ret    
    f8d3:	mov    rcx,QWORD PTR [rip+0xe926]        # 1e200 <stderr@@GLIBC_2.2.5>
    f8da:	mov    edx,0x37
    f8df:	mov    esi,0x1
    f8e4:	lea    rdi,[rip+0x7a25]        # 17310 <default_tuning+0x70>
    f8eb:	call   3df0 <fwrite@plt>
    f8f0:	call   3800 <abort@plt>
    f8f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f8ff:	nop

000000000000f900 <proper_name_lite>:
    f900:	endbr64 
    f904:	push   r12
    f906:	mov    edx,0x5
    f90b:	push   rbp
    f90c:	mov    rbp,rsi
    f90f:	mov    rsi,rdi
    f912:	push   rbx
    f913:	mov    rbx,rdi
    f916:	xor    edi,edi
    f918:	call   3960 <dcgettext@plt>
    f91d:	mov    r12,rax
    f920:	cmp    rbx,rax
    f923:	je     f930 <proper_name_lite+0x30>
    f925:	mov    rax,r12
    f928:	pop    rbx
    f929:	pop    rbp
    f92a:	pop    r12
    f92c:	ret    
    f92d:	nop    DWORD PTR [rax]
    f930:	call   14170 <locale_charset>
    f935:	lea    rsi,[rip+0x7a14]        # 17350 <default_tuning+0xb0>
    f93c:	mov    rdi,rax
    f93f:	call   13c60 <c_strcasecmp>
    f944:	pop    rbx
    f945:	test   eax,eax
    f947:	cmove  r12,rbp
    f94b:	pop    rbp
    f94c:	mov    rax,r12
    f94f:	pop    r12
    f951:	ret    
    f952:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f95c:	nop    DWORD PTR [rax+0x0]

000000000000f960 <gettext_quote.part.0>:
    f960:	push   rbp
    f961:	mov    rbp,rdi
    f964:	push   rbx
    f965:	mov    ebx,esi
    f967:	sub    rsp,0x8
    f96b:	call   14170 <locale_charset>
    f970:	movzx  edx,BYTE PTR [rax]
    f973:	and    edx,0xffffffdf
    f976:	cmp    dl,0x55
    f979:	jne    f9c8 <gettext_quote.part.0+0x68>
    f97b:	movzx  edx,BYTE PTR [rax+0x1]
    f97f:	and    edx,0xffffffdf
    f982:	cmp    dl,0x54
    f985:	jne    f9e5 <gettext_quote.part.0+0x85>
    f987:	movzx  edx,BYTE PTR [rax+0x2]
    f98b:	and    edx,0xffffffdf
    f98e:	cmp    dl,0x46
    f991:	jne    f9e5 <gettext_quote.part.0+0x85>
    f993:	cmp    BYTE PTR [rax+0x3],0x2d
    f997:	jne    f9e5 <gettext_quote.part.0+0x85>
    f999:	cmp    BYTE PTR [rax+0x4],0x38
    f99d:	jne    f9e5 <gettext_quote.part.0+0x85>
    f99f:	cmp    BYTE PTR [rax+0x5],0x0
    f9a3:	jne    f9e5 <gettext_quote.part.0+0x85>
    f9a5:	cmp    BYTE PTR [rbp+0x0],0x60
    f9a9:	lea    rax,[rip+0x79b3]        # 17363 <default_tuning+0xc3>
    f9b0:	lea    rdx,[rip+0x79a1]        # 17358 <default_tuning+0xb8>
    f9b7:	cmovne rax,rdx
    f9bb:	add    rsp,0x8
    f9bf:	pop    rbx
    f9c0:	pop    rbp
    f9c1:	ret    
    f9c2:	nop    WORD PTR [rax+rax*1+0x0]
    f9c8:	cmp    dl,0x47
    f9cb:	jne    f9e5 <gettext_quote.part.0+0x85>
    f9cd:	movzx  edx,BYTE PTR [rax+0x1]
    f9d1:	and    edx,0xffffffdf
    f9d4:	cmp    dl,0x42
    f9d7:	jne    f9e5 <gettext_quote.part.0+0x85>
    f9d9:	cmp    BYTE PTR [rax+0x2],0x31
    f9dd:	jne    f9e5 <gettext_quote.part.0+0x85>
    f9df:	cmp    BYTE PTR [rax+0x3],0x38
    f9e3:	je     fa08 <gettext_quote.part.0+0xa8>
    f9e5:	cmp    ebx,0x9
    f9e8:	lea    rax,[rip+0x7967]        # 17356 <default_tuning+0xb6>
    f9ef:	lea    rdx,[rip+0x7423]        # 16e19 <short_options+0x19a9>
    f9f6:	cmovne rax,rdx
    f9fa:	add    rsp,0x8
    f9fe:	pop    rbx
    f9ff:	pop    rbp
    fa00:	ret    
    fa01:	nop    DWORD PTR [rax+0x0]
    fa08:	cmp    BYTE PTR [rax+0x4],0x30
    fa0c:	jne    f9e5 <gettext_quote.part.0+0x85>
    fa0e:	cmp    BYTE PTR [rax+0x5],0x33
    fa12:	jne    f9e5 <gettext_quote.part.0+0x85>
    fa14:	cmp    BYTE PTR [rax+0x6],0x30
    fa18:	jne    f9e5 <gettext_quote.part.0+0x85>
    fa1a:	cmp    BYTE PTR [rax+0x7],0x0
    fa1e:	jne    f9e5 <gettext_quote.part.0+0x85>
    fa20:	cmp    BYTE PTR [rbp+0x0],0x60
    fa24:	lea    rax,[rip+0x7931]        # 1735c <default_tuning+0xbc>
    fa2b:	lea    rdx,[rip+0x792e]        # 17360 <default_tuning+0xc0>
    fa32:	cmovne rax,rdx
    fa36:	add    rsp,0x8
    fa3a:	pop    rbx
    fa3b:	pop    rbp
    fa3c:	ret    
    fa3d:	nop    DWORD PTR [rax]

000000000000fa40 <quotearg_buffer_restyled>:
    fa40:	push   r15
    fa42:	mov    r15d,r8d
    fa45:	push   r14
    fa47:	mov    r14,rsi
    fa4a:	push   r13
    fa4c:	push   r12
    fa4e:	push   rbp
    fa4f:	push   rbx
    fa50:	mov    ebx,r9d
    fa53:	sub    rsp,0xb8
    fa5a:	mov    rax,QWORD PTR [rsp+0xf0]
    fa62:	mov    QWORD PTR [rsp+0x18],rdi
    fa67:	mov    QWORD PTR [rsp+0x20],rdx
    fa6c:	mov    QWORD PTR [rsp+0x30],rax
    fa71:	mov    rax,QWORD PTR [rsp+0xf8]
    fa79:	mov    QWORD PTR [rsp+0x10],rcx
    fa7e:	mov    QWORD PTR [rsp+0x80],rax
    fa86:	mov    rax,QWORD PTR [rsp+0x100]
    fa8e:	mov    DWORD PTR [rsp+0xc],r8d
    fa93:	mov    DWORD PTR [rsp+0x6c],r9d
    fa98:	mov    QWORD PTR [rsp+0x78],rax
    fa9d:	mov    rax,QWORD PTR fs:0x28
    faa6:	mov    QWORD PTR [rsp+0xa8],rax
    faae:	xor    eax,eax
    fab0:	call   3970 <__ctype_get_mb_cur_max@plt>
    fab5:	and    ebx,0x2
    fab8:	mov    QWORD PTR [rsp+0x70],rax
    fabd:	setne  BYTE PTR [rsp+0x6a]
    fac2:	cmp    r15d,0xa
    fac6:	ja     3ee4 <quotearg_buffer_restyled.cold>
    facc:	lea    rcx,[rip+0x78ed]        # 173c0 <default_tuning+0x120>
    fad3:	mov    edx,r15d
    fad6:	mov    r10,QWORD PTR [rsp+0x10]
    fadb:	mov    r11,QWORD PTR [rsp+0x18]
    fae0:	movsxd rax,DWORD PTR [rcx+rdx*4]
    fae4:	add    rax,rcx
    fae7:	notrack jmp rax
    faea:	nop    WORD PTR [rax+rax*1+0x0]
    faf0:	cmp    DWORD PTR [rsp+0xc],0xa
    faf5:	je     fb7c <quotearg_buffer_restyled+0x13c>
    fafb:	lea    rsi,[rip+0x7865]        # 17367 <default_tuning+0xc7>
    fb02:	xor    edi,edi
    fb04:	mov    edx,0x5
    fb09:	mov    QWORD PTR [rsp+0x18],r10
    fb0e:	mov    QWORD PTR [rsp+0x10],r11
    fb13:	call   3960 <dcgettext@plt>
    fb18:	mov    r11,QWORD PTR [rsp+0x10]
    fb1d:	mov    r10,QWORD PTR [rsp+0x18]
    fb22:	mov    rsi,rax
    fb25:	mov    QWORD PTR [rsp+0x80],rax
    fb2d:	lea    rax,[rip+0x7833]        # 17367 <default_tuning+0xc7>
    fb34:	cmp    rsi,rax
    fb37:	je     10aa7 <quotearg_buffer_restyled+0x1067>
    fb3d:	xor    edi,edi
    fb3f:	mov    edx,0x5
    fb44:	mov    QWORD PTR [rsp+0x18],r10
    fb49:	lea    rsi,[rip+0x72c9]        # 16e19 <short_options+0x19a9>
    fb50:	mov    QWORD PTR [rsp+0x10],r11
    fb55:	call   3960 <dcgettext@plt>
    fb5a:	mov    r11,QWORD PTR [rsp+0x10]
    fb5f:	mov    r10,QWORD PTR [rsp+0x18]
    fb64:	mov    rcx,rax
    fb67:	mov    QWORD PTR [rsp+0x78],rax
    fb6c:	lea    rax,[rip+0x72a6]        # 16e19 <short_options+0x19a9>
    fb73:	cmp    rcx,rax
    fb76:	je     10a87 <quotearg_buffer_restyled+0x1047>
    fb7c:	xor    r12d,r12d
    fb7f:	test   ebx,ebx
    fb81:	je     1091a <quotearg_buffer_restyled+0xeda>
    fb87:	mov    rbx,QWORD PTR [rsp+0x78]
    fb8c:	mov    QWORD PTR [rsp+0x40],r10
    fb91:	mov    QWORD PTR [rsp+0x38],r11
    fb96:	mov    rdi,rbx
    fb99:	call   3980 <strlen@plt>
    fb9e:	mov    QWORD PTR [rsp+0x58],rbx
    fba3:	mov    r11,QWORD PTR [rsp+0x38]
    fba8:	xor    r8d,r8d
    fbab:	mov    QWORD PTR [rsp+0x28],rax
    fbb0:	mov    r10,QWORD PTR [rsp+0x40]
    fbb5:	mov    BYTE PTR [rsp+0x10],0x1
    fbba:	mov    BYTE PTR [rsp+0x6b],0x0
    fbbf:	mov    QWORD PTR [rsp+0x60],0x0
    fbc8:	mov    BYTE PTR [rsp+0x18],0x1
    fbcd:	nop    DWORD PTR [rax]
    fbd0:	xor    ebx,ebx
    fbd2:	nop    WORD PTR [rax+rax*1+0x0]
    fbd8:	cmp    r10,rbx
    fbdb:	setne  r15b
    fbdf:	cmp    r10,0xffffffffffffffff
    fbe3:	jne    fbf2 <quotearg_buffer_restyled+0x1b2>
    fbe5:	mov    rax,QWORD PTR [rsp+0x20]
    fbea:	cmp    BYTE PTR [rax+rbx*1],0x0
    fbee:	setne  r15b
    fbf2:	test   r15b,r15b
    fbf5:	je     10690 <quotearg_buffer_restyled+0xc50>
    fbfb:	mov    rdi,QWORD PTR [rsp+0x20]
    fc00:	cmp    DWORD PTR [rsp+0xc],0x2
    fc05:	setne  r13b
    fc09:	lea    r9,[rdi+rbx*1]
    fc0d:	and    r13b,BYTE PTR [rsp+0x18]
    fc12:	je     10290 <quotearg_buffer_restyled+0x850>
    fc18:	mov    rax,QWORD PTR [rsp+0x28]
    fc1d:	test   rax,rax
    fc20:	je     103e0 <quotearg_buffer_restyled+0x9a0>
    fc26:	lea    rbp,[rbx+rax*1]
    fc2a:	cmp    r10,0xffffffffffffffff
    fc2e:	jne    fc5d <quotearg_buffer_restyled+0x21d>
    fc30:	cmp    rax,0x1
    fc34:	jbe    fc5d <quotearg_buffer_restyled+0x21d>
    fc36:	mov    QWORD PTR [rsp+0x48],r11
    fc3b:	mov    BYTE PTR [rsp+0x40],r8b
    fc40:	mov    QWORD PTR [rsp+0x38],r9
    fc45:	call   3980 <strlen@plt>
    fc4a:	mov    r11,QWORD PTR [rsp+0x48]
    fc4f:	movzx  r8d,BYTE PTR [rsp+0x40]
    fc55:	mov    r9,QWORD PTR [rsp+0x38]
    fc5a:	mov    r10,rax
    fc5d:	cmp    rbp,r10
    fc60:	ja     103e0 <quotearg_buffer_restyled+0x9a0>
    fc66:	mov    rdx,QWORD PTR [rsp+0x28]
    fc6b:	mov    rsi,QWORD PTR [rsp+0x58]
    fc70:	mov    rdi,r9
    fc73:	mov    QWORD PTR [rsp+0x50],r10
    fc78:	mov    QWORD PTR [rsp+0x48],r11
    fc7d:	mov    BYTE PTR [rsp+0x40],r8b
    fc82:	mov    QWORD PTR [rsp+0x38],r9
    fc87:	call   3ad0 <memcmp@plt>
    fc8c:	mov    r9,QWORD PTR [rsp+0x38]
    fc91:	movzx  r8d,BYTE PTR [rsp+0x40]
    fc97:	test   eax,eax
    fc99:	mov    r11,QWORD PTR [rsp+0x48]
    fc9e:	mov    r10,QWORD PTR [rsp+0x50]
    fca3:	jne    103e0 <quotearg_buffer_restyled+0x9a0>
    fca9:	cmp    BYTE PTR [rsp+0x6a],0x0
    fcae:	jne    10095 <quotearg_buffer_restyled+0x655>
    fcb4:	movzx  ebp,BYTE PTR [r9]
    fcb8:	cmp    bpl,0x7e
    fcbc:	ja     fde3 <quotearg_buffer_restyled+0x3a3>
    fcc2:	lea    rcx,[rip+0x7723]        # 173ec <default_tuning+0x14c>
    fcc9:	movzx  edx,bpl
    fccd:	movsxd rax,DWORD PTR [rcx+rdx*4]
    fcd1:	add    rax,rcx
    fcd4:	notrack jmp rax
    fcd7:	nop    WORD PTR [rax+rax*1+0x0]
    fce0:	mov    eax,r13d
    fce3:	nop    DWORD PTR [rax+rax*1+0x0]
    fce8:	mov    r15d,r13d
    fceb:	mov    r13d,eax
    fcee:	xor    eax,eax
    fcf0:	mov    rsi,QWORD PTR [rsp+0x30]
    fcf5:	test   rsi,rsi
    fcf8:	je     fd0e <quotearg_buffer_restyled+0x2ce>
    fcfa:	mov    edx,ebp
    fcfc:	mov    ecx,ebp
    fcfe:	shr    dl,0x5
    fd01:	movzx  edx,dl
    fd04:	mov    edx,DWORD PTR [rsi+rdx*4]
    fd07:	shr    edx,cl
    fd09:	and    edx,0x1
    fd0c:	jne    fd17 <quotearg_buffer_restyled+0x2d7>
    fd0e:	test   r13b,r13b
    fd11:	je     fdd1 <quotearg_buffer_restyled+0x391>
    fd17:	cmp    DWORD PTR [rsp+0xc],0x2
    fd1c:	sete   dl
    fd1f:	cmp    BYTE PTR [rsp+0x6a],0x0
    fd24:	mov    eax,edx
    fd26:	jne    10778 <quotearg_buffer_restyled+0xd38>
    fd2c:	mov    eax,r8d
    fd2f:	xor    eax,0x1
    fd32:	and    al,dl
    fd34:	je     fd67 <quotearg_buffer_restyled+0x327>
    fd36:	cmp    r14,r12
    fd39:	jbe    fd40 <quotearg_buffer_restyled+0x300>
    fd3b:	mov    BYTE PTR [r11+r12*1],0x27
    fd40:	lea    rdx,[r12+0x1]
    fd45:	cmp    r14,rdx
    fd48:	jbe    fd50 <quotearg_buffer_restyled+0x310>
    fd4a:	mov    BYTE PTR [r11+r12*1+0x1],0x24
    fd50:	lea    rdx,[r12+0x2]
    fd55:	cmp    r14,rdx
    fd58:	jbe    fd60 <quotearg_buffer_restyled+0x320>
    fd5a:	mov    BYTE PTR [r11+r12*1+0x2],0x27
    fd60:	add    r12,0x3
    fd64:	mov    r8d,eax
    fd67:	cmp    r14,r12
    fd6a:	jbe    fd71 <quotearg_buffer_restyled+0x331>
    fd6c:	mov    BYTE PTR [r11+r12*1],0x5c
    fd71:	add    r12,0x1
    fd75:	add    rbx,0x1
    fd79:	cmp    r12,r14
    fd7c:	jae    fd82 <quotearg_buffer_restyled+0x342>
    fd7e:	mov    BYTE PTR [r11+r12*1],bpl
    fd82:	movzx  eax,BYTE PTR [rsp+0x10]
    fd87:	add    r12,0x1
    fd8b:	mov    esi,0x0
    fd90:	test   r15b,r15b
    fd93:	cmove  eax,esi
    fd96:	mov    BYTE PTR [rsp+0x10],al
    fd9a:	jmp    fbd8 <quotearg_buffer_restyled+0x198>
    fd9f:	nop
    fda0:	xor    r13d,r13d
    fda3:	xor    eax,eax
    fda5:	xor    r15d,r15d
    fda8:	movzx  edx,BYTE PTR [rsp+0x18]
    fdad:	xor    edx,0x1
    fdb0:	or     al,dl
    fdb2:	je     fcf0 <quotearg_buffer_restyled+0x2b0>
    fdb8:	xor    eax,eax
    fdba:	cmp    BYTE PTR [rsp+0x6a],0x0
    fdbf:	jne    fcf0 <quotearg_buffer_restyled+0x2b0>
    fdc5:	nop    DWORD PTR [rax]
    fdc8:	test   r13b,r13b
    fdcb:	jne    fd17 <quotearg_buffer_restyled+0x2d7>
    fdd1:	xor    eax,0x1
    fdd4:	add    rbx,0x1
    fdd8:	and    eax,r8d
    fddb:	jmp    10300 <quotearg_buffer_restyled+0x8c0>
    fde0:	xor    r13d,r13d
    fde3:	cmp    QWORD PTR [rsp+0x70],0x1
    fde9:	jne    10438 <quotearg_buffer_restyled+0x9f8>
    fdef:	mov    QWORD PTR [rsp+0x48],r10
    fdf4:	mov    QWORD PTR [rsp+0x40],r11
    fdf9:	mov    BYTE PTR [rsp+0x38],r8b
    fdfe:	call   3ec0 <__ctype_b_loc@plt>
    fe03:	movzx  r8d,BYTE PTR [rsp+0x38]
    fe09:	mov    r11,QWORD PTR [rsp+0x40]
    fe0e:	mov    esi,0x1
    fe13:	mov    r9,rax
    fe16:	movzx  eax,bpl
    fe1a:	mov    r10,QWORD PTR [rsp+0x48]
    fe1f:	mov    rdx,QWORD PTR [r9]
    fe22:	movzx  eax,WORD PTR [rdx+rax*2]
    fe26:	and    ax,0x4000
    fe2a:	setne  r15b
    fe2e:	sete   cl
    fe31:	and    cl,BYTE PTR [rsp+0x18]
    fe35:	test   cl,cl
    fe37:	jne    107fb <quotearg_buffer_restyled+0xdbb>
    fe3d:	nop    DWORD PTR [rax]
    fe40:	cmp    DWORD PTR [rsp+0xc],0x2
    fe45:	sete   al
    fe48:	jmp    fda8 <quotearg_buffer_restyled+0x368>
    fe4d:	mov    BYTE PTR [rsp+0x10],0x1
    fe52:	xor    r8d,r8d
    fe55:	mov    BYTE PTR [rsp+0x6b],0x0
    fe5a:	mov    QWORD PTR [rsp+0x60],0x0
    fe63:	mov    BYTE PTR [rsp+0x6a],0x1
    fe68:	mov    BYTE PTR [rsp+0x18],0x0
    fe6d:	lea    rax,[rip+0x6fa5]        # 16e19 <short_options+0x19a9>
    fe74:	mov    DWORD PTR [rsp+0xc],0x2
    fe7c:	xor    r12d,r12d
    fe7f:	mov    QWORD PTR [rsp+0x28],0x1
    fe88:	mov    QWORD PTR [rsp+0x58],rax
    fe8d:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
    fe92:	test   ebx,ebx
    fe94:	jne    10a07 <quotearg_buffer_restyled+0xfc7>
    fe9a:	test   r14,r14
    fe9d:	je     10865 <quotearg_buffer_restyled+0xe25>
    fea3:	mov    BYTE PTR [r11],0x22
    fea7:	xor    r8d,r8d
    feaa:	mov    BYTE PTR [rsp+0x10],0x1
    feaf:	mov    BYTE PTR [rsp+0x6b],0x0
    feb4:	mov    QWORD PTR [rsp+0x60],0x0
    febd:	lea    rax,[rip+0x7492]        # 17356 <default_tuning+0xb6>
    fec4:	mov    BYTE PTR [rsp+0x6a],0x0
    fec9:	mov    r12d,0x1
    fecf:	mov    BYTE PTR [rsp+0x18],0x1
    fed4:	mov    QWORD PTR [rsp+0x28],0x1
    fedd:	mov    QWORD PTR [rsp+0x58],rax
    fee2:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
    fee7:	test   ebx,ebx
    fee9:	jne    fe4d <quotearg_buffer_restyled+0x40d>
    feef:	mov    BYTE PTR [rsp+0x18],0x1
    fef4:	test   r14,r14
    fef7:	jne    10b47 <quotearg_buffer_restyled+0x1107>
    fefd:	mov    QWORD PTR [rsp+0x60],0x0
    ff06:	xor    r8d,r8d
    ff09:	mov    BYTE PTR [rsp+0x10],0x1
    ff0e:	mov    BYTE PTR [rsp+0x6b],0x0
    ff13:	lea    rax,[rip+0x6eff]        # 16e19 <short_options+0x19a9>
    ff1a:	mov    BYTE PTR [rsp+0x6a],0x0
    ff1f:	mov    r12d,0x1
    ff25:	mov    QWORD PTR [rsp+0x28],0x1
    ff2e:	mov    QWORD PTR [rsp+0x58],rax
    ff33:	mov    DWORD PTR [rsp+0xc],0x2
    ff3b:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
    ff40:	lea    rax,[rip+0x740f]        # 17356 <default_tuning+0xb6>
    ff47:	mov    BYTE PTR [rsp+0x10],0x1
    ff4c:	xor    r8d,r8d
    ff4f:	xor    r12d,r12d
    ff52:	mov    BYTE PTR [rsp+0x6b],0x0
    ff57:	mov    QWORD PTR [rsp+0x60],0x0
    ff60:	mov    BYTE PTR [rsp+0x6a],0x1
    ff65:	mov    BYTE PTR [rsp+0x18],0x1
    ff6a:	mov    QWORD PTR [rsp+0x28],0x1
    ff73:	mov    QWORD PTR [rsp+0x58],rax
    ff78:	mov    DWORD PTR [rsp+0xc],0x5
    ff80:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
    ff85:	mov    BYTE PTR [rsp+0x10],0x1
    ff8a:	xor    r8d,r8d
    ff8d:	xor    r12d,r12d
    ff90:	mov    BYTE PTR [rsp+0x6b],0x0
    ff95:	mov    QWORD PTR [rsp+0x60],0x0
    ff9e:	mov    BYTE PTR [rsp+0x6a],0x0
    ffa3:	mov    BYTE PTR [rsp+0x18],0x1
    ffa8:	mov    QWORD PTR [rsp+0x28],0x0
    ffb1:	mov    QWORD PTR [rsp+0x58],0x0
    ffba:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
    ffbf:	mov    BYTE PTR [rsp+0x10],0x1
    ffc4:	xor    r8d,r8d
    ffc7:	xor    r12d,r12d
    ffca:	mov    BYTE PTR [rsp+0x6b],0x0
    ffcf:	mov    QWORD PTR [rsp+0x60],0x0
    ffd8:	mov    BYTE PTR [rsp+0x6a],0x0
    ffdd:	mov    BYTE PTR [rsp+0x18],0x0
    ffe2:	mov    QWORD PTR [rsp+0x28],0x0
    ffeb:	mov    QWORD PTR [rsp+0x58],0x0
    fff4:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
    fff9:	mov    BYTE PTR [rsp+0x10],0x1
    fffe:	xor    r8d,r8d
   10001:	mov    BYTE PTR [rsp+0x6b],0x0
   10006:	mov    QWORD PTR [rsp+0x60],0x0
   1000f:	mov    BYTE PTR [rsp+0x6a],0x1
   10014:	mov    BYTE PTR [rsp+0x18],0x1
   10019:	jmp    fe6d <quotearg_buffer_restyled+0x42d>
   1001e:	test   ebx,ebx
   10020:	jne    10b5f <quotearg_buffer_restyled+0x111f>
   10026:	mov    BYTE PTR [rsp+0x18],0x0
   1002b:	jmp    fef4 <quotearg_buffer_restyled+0x4b4>
   10030:	xor    r13d,r13d
   10033:	cmp    r10,0x1
   10037:	setne  dl
   1003a:	cmp    r10,0xffffffffffffffff
   1003e:	jne    1004c <quotearg_buffer_restyled+0x60c>
   10040:	mov    rax,QWORD PTR [rsp+0x20]
   10045:	cmp    BYTE PTR [rax+0x1],0x0
   10049:	setne  dl
   1004c:	cmp    DWORD PTR [rsp+0xc],0x2
   10051:	sete   al
   10054:	test   dl,dl
   10056:	jne    fda5 <quotearg_buffer_restyled+0x365>
   1005c:	test   rbx,rbx
   1005f:	jne    fda5 <quotearg_buffer_restyled+0x365>
   10065:	cmp    BYTE PTR [rsp+0x6a],0x0
   1006a:	je     fda8 <quotearg_buffer_restyled+0x368>
   10070:	test   al,al
   10072:	je     fda8 <quotearg_buffer_restyled+0x368>
   10078:	mov    DWORD PTR [rsp+0xc],0x2
   10080:	movzx  eax,BYTE PTR [rsp+0x18]
   10085:	test   al,al
   10087:	mov    eax,0x4
   1008c:	cmove  eax,DWORD PTR [rsp+0xc]
   10091:	mov    DWORD PTR [rsp+0xc],eax
   10095:	sub    rsp,0x8
   10099:	mov    rcx,r10
   1009c:	mov    rsi,r14
   1009f:	mov    rdi,r11
   100a2:	push   QWORD PTR [rsp+0x80]
   100a9:	push   QWORD PTR [rsp+0x90]
   100b0:	push   0x0
   100b2:	mov    r9d,DWORD PTR [rsp+0x8c]
   100ba:	mov    r8d,DWORD PTR [rsp+0x2c]
   100bf:	mov    rdx,QWORD PTR [rsp+0x40]
   100c4:	and    r9d,0xfffffffd
   100c8:	call   fa40 <quotearg_buffer_restyled>
   100cd:	add    rsp,0x20
   100d1:	mov    r12,rax
   100d4:	mov    rax,QWORD PTR [rsp+0xa8]
   100dc:	xor    rax,QWORD PTR fs:0x28
   100e5:	jne    10b3b <quotearg_buffer_restyled+0x10fb>
   100eb:	add    rsp,0xb8
   100f2:	mov    rax,r12
   100f5:	pop    rbx
   100f6:	pop    rbp
   100f7:	pop    r12
   100f9:	pop    r13
   100fb:	pop    r14
   100fd:	pop    r15
   100ff:	ret    
   10100:	xor    r13d,r13d
   10103:	mov    eax,DWORD PTR [rsp+0xc]
   10107:	cmp    eax,0x2
   1010a:	je     10748 <quotearg_buffer_restyled+0xd08>
   10110:	cmp    eax,0x5
   10113:	jne    10138 <quotearg_buffer_restyled+0x6f8>
   10115:	test   BYTE PTR [rsp+0x6c],0x4
   1011a:	je     10138 <quotearg_buffer_restyled+0x6f8>
   1011c:	lea    rax,[rbx+0x2]
   10120:	cmp    rax,r10
   10123:	jae    10138 <quotearg_buffer_restyled+0x6f8>
   10125:	mov    rsi,QWORD PTR [rsp+0x20]
   1012a:	cmp    BYTE PTR [rsi+rbx*1+0x1],0x3f
   1012f:	je     1094b <quotearg_buffer_restyled+0xf0b>
   10135:	nop    DWORD PTR [rax]
   10138:	xor    eax,eax
   1013a:	xor    r15d,r15d
   1013d:	mov    ebp,0x3f
   10142:	jmp    fda8 <quotearg_buffer_restyled+0x368>
   10147:	xor    r13d,r13d
   1014a:	cmp    DWORD PTR [rsp+0xc],0x2
   1014f:	je     10700 <quotearg_buffer_restyled+0xcc0>
   10155:	mov    BYTE PTR [rsp+0x6b],r15b
   1015a:	xor    eax,eax
   1015c:	mov    ebp,0x27
   10161:	jmp    fda8 <quotearg_buffer_restyled+0x368>
   10166:	xor    r13d,r13d
   10169:	nop    DWORD PTR [rax+0x0]
   10170:	movzx  esi,BYTE PTR [rsp+0x6a]
   10175:	test   BYTE PTR [rsp+0x18],sil
   1017a:	je     10188 <quotearg_buffer_restyled+0x748>
   1017c:	cmp    QWORD PTR [rsp+0x28],0x0
   10182:	jne    102eb <quotearg_buffer_restyled+0x8ab>
   10188:	mov    ebp,0x5c
   1018d:	mov    eax,0x5c
   10192:	nop    WORD PTR [rax+rax*1+0x0]
   10198:	cmp    BYTE PTR [rsp+0x18],0x0
   1019d:	jne    10b40 <quotearg_buffer_restyled+0x1100>
   101a3:	xor    r15d,r15d
   101a6:	xor    eax,eax
   101a8:	cmp    BYTE PTR [rsp+0x6a],0x0
   101ad:	jne    fcf0 <quotearg_buffer_restyled+0x2b0>
   101b3:	jmp    fdc8 <quotearg_buffer_restyled+0x388>
   101b8:	mov    ebp,0x61
   101bd:	cmp    DWORD PTR [rsp+0xc],0x2
   101c2:	sete   al
   101c5:	cmp    BYTE PTR [rsp+0x6a],0x0
   101ca:	jne    10778 <quotearg_buffer_restyled+0xd38>
   101d0:	xor    r15d,r15d
   101d3:	jmp    fd67 <quotearg_buffer_restyled+0x327>
   101d8:	mov    ebp,0x72
   101dd:	xor    r15d,r15d
   101e0:	jmp    fd17 <quotearg_buffer_restyled+0x2d7>
   101e5:	mov    ebp,0x66
   101ea:	jmp    101bd <quotearg_buffer_restyled+0x77d>
   101ec:	mov    ebp,0x6e
   101f1:	jmp    101dd <quotearg_buffer_restyled+0x79d>
   101f3:	mov    ebp,0x62
   101f8:	jmp    101bd <quotearg_buffer_restyled+0x77d>
   101fa:	cmp    BYTE PTR [rsp+0x6a],0x0
   101ff:	jne    10acf <quotearg_buffer_restyled+0x108f>
   10205:	xor    r13d,r13d
   10208:	cmp    DWORD PTR [rsp+0xc],0x2
   1020d:	mov    eax,r8d
   10210:	sete   dl
   10213:	xor    eax,0x1
   10216:	and    al,dl
   10218:	je     10788 <quotearg_buffer_restyled+0xd48>
   1021e:	cmp    r14,r12
   10221:	jbe    10228 <quotearg_buffer_restyled+0x7e8>
   10223:	mov    BYTE PTR [r11+r12*1],0x27
   10228:	lea    rcx,[r12+0x1]
   1022d:	cmp    r14,rcx
   10230:	jbe    10238 <quotearg_buffer_restyled+0x7f8>
   10232:	mov    BYTE PTR [r11+r12*1+0x1],0x24
   10238:	lea    rcx,[r12+0x2]
   1023d:	cmp    r14,rcx
   10240:	jbe    10248 <quotearg_buffer_restyled+0x808>
   10242:	mov    BYTE PTR [r11+r12*1+0x2],0x27
   10248:	lea    rcx,[r12+0x3]
   1024d:	cmp    r14,rcx
   10250:	ja     10793 <quotearg_buffer_restyled+0xd53>
   10256:	add    r12,0x4
   1025a:	mov    r8d,eax
   1025d:	xor    r15d,r15d
   10260:	mov    ebp,0x30
   10265:	jmp    fd0e <quotearg_buffer_restyled+0x2ce>
   1026a:	xor    r13d,r13d
   1026d:	mov    ebp,0x9
   10272:	mov    eax,0x74
   10277:	jmp    10198 <quotearg_buffer_restyled+0x758>
   1027c:	mov    ebp,0x76
   10281:	jmp    101dd <quotearg_buffer_restyled+0x79d>
   10286:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10290:	movzx  ebp,BYTE PTR [r9]
   10294:	cmp    bpl,0x7e
   10298:	ja     fde3 <quotearg_buffer_restyled+0x3a3>
   1029e:	lea    rcx,[rip+0x7343]        # 175e8 <default_tuning+0x348>
   102a5:	movzx  edx,bpl
   102a9:	movsxd rax,DWORD PTR [rcx+rdx*4]
   102ad:	add    rax,rcx
   102b0:	notrack jmp rax
   102b3:	nop    DWORD PTR [rax+rax*1+0x0]
   102b8:	cmp    DWORD PTR [rsp+0xc],0x2
   102bd:	sete   al
   102c0:	xor    r15d,r15d
   102c3:	jmp    10065 <quotearg_buffer_restyled+0x625>
   102c8:	cmp    DWORD PTR [rsp+0xc],0x2
   102cd:	sete   al
   102d0:	jmp    1005c <quotearg_buffer_restyled+0x61c>
   102d5:	cmp    DWORD PTR [rsp+0xc],0x2
   102da:	jne    10170 <quotearg_buffer_restyled+0x730>
   102e0:	cmp    BYTE PTR [rsp+0x6a],0x0
   102e5:	jne    109fd <quotearg_buffer_restyled+0xfbd>
   102eb:	add    rbx,0x1
   102ef:	mov    eax,r8d
   102f2:	xor    r15d,r15d
   102f5:	mov    ebp,0x5c
   102fa:	nop    WORD PTR [rax+rax*1+0x0]
   10300:	test   al,al
   10302:	je     fd79 <quotearg_buffer_restyled+0x339>
   10308:	cmp    r14,r12
   1030b:	jbe    10312 <quotearg_buffer_restyled+0x8d2>
   1030d:	mov    BYTE PTR [r11+r12*1],0x27
   10312:	lea    rax,[r12+0x1]
   10317:	cmp    r14,rax
   1031a:	jbe    10322 <quotearg_buffer_restyled+0x8e2>
   1031c:	mov    BYTE PTR [r11+r12*1+0x1],0x27
   10322:	add    r12,0x2
   10326:	xor    r8d,r8d
   10329:	jmp    fd79 <quotearg_buffer_restyled+0x339>
   1032e:	cmp    DWORD PTR [rsp+0xc],0x2
   10333:	mov    ebp,0x20
   10338:	sete   al
   1033b:	jmp    10065 <quotearg_buffer_restyled+0x625>
   10340:	mov    ebp,0xc
   10345:	mov    eax,0x66
   1034a:	jmp    10198 <quotearg_buffer_restyled+0x758>
   1034f:	mov    ebp,0x9
   10354:	mov    eax,0x74
   10359:	cmp    DWORD PTR [rsp+0xc],0x2
   1035e:	sete   r13b
   10362:	and    r13b,BYTE PTR [rsp+0x6a]
   10367:	je     10198 <quotearg_buffer_restyled+0x758>
   1036d:	jmp    10078 <quotearg_buffer_restyled+0x638>
   10372:	mov    ebp,0x8
   10377:	mov    eax,0x62
   1037c:	jmp    10198 <quotearg_buffer_restyled+0x758>
   10381:	cmp    BYTE PTR [rsp+0x18],0x0
   10386:	jne    101fa <quotearg_buffer_restyled+0x7ba>
   1038c:	xor    r13d,r13d
   1038f:	xor    ebp,ebp
   10391:	test   BYTE PTR [rsp+0x6c],0x1
   10396:	je     101a3 <quotearg_buffer_restyled+0x763>
   1039c:	add    rbx,0x1
   103a0:	jmp    fbd8 <quotearg_buffer_restyled+0x198>
   103a5:	mov    ebp,0xd
   103aa:	mov    eax,0x72
   103af:	jmp    10359 <quotearg_buffer_restyled+0x919>
   103b1:	mov    ebp,0xb
   103b6:	mov    eax,0x76
   103bb:	jmp    10198 <quotearg_buffer_restyled+0x758>
   103c0:	mov    ebp,0xa
   103c5:	mov    eax,0x6e
   103ca:	jmp    10359 <quotearg_buffer_restyled+0x919>
   103cc:	mov    ebp,0x7
   103d1:	mov    eax,0x61
   103d6:	jmp    10198 <quotearg_buffer_restyled+0x758>
   103db:	nop    DWORD PTR [rax+rax*1+0x0]
   103e0:	movzx  ebp,BYTE PTR [r9]
   103e4:	cmp    bpl,0x7e
   103e8:	ja     fde0 <quotearg_buffer_restyled+0x3a0>
   103ee:	lea    rcx,[rip+0x73ef]        # 177e4 <default_tuning+0x544>
   103f5:	movzx  edx,bpl
   103f9:	movsxd rax,DWORD PTR [rcx+rdx*4]
   103fd:	add    rax,rcx
   10400:	notrack jmp rax
   10403:	nop    DWORD PTR [rax+rax*1+0x0]
   10408:	xor    eax,eax
   1040a:	jmp    fce8 <quotearg_buffer_restyled+0x2a8>
   1040f:	xor    eax,eax
   10411:	test   rbx,rbx
   10414:	jne    10768 <quotearg_buffer_restyled+0xd28>
   1041a:	mov    r15d,r13d
   1041d:	mov    r13d,eax
   10420:	xor    eax,eax
   10422:	jmp    fda8 <quotearg_buffer_restyled+0x368>
   10427:	xor    eax,eax
   10429:	mov    ebp,0x20
   1042e:	jmp    fce8 <quotearg_buffer_restyled+0x2a8>
   10433:	nop    DWORD PTR [rax+rax*1+0x0]
   10438:	mov    QWORD PTR [rsp+0xa0],0x0
   10444:	lea    rcx,[rsp+0xa0]
   1044c:	cmp    r10,0xffffffffffffffff
   10450:	jne    10488 <quotearg_buffer_restyled+0xa48>
   10452:	mov    rdi,QWORD PTR [rsp+0x20]
   10457:	mov    QWORD PTR [rsp+0x50],r11
   1045c:	mov    BYTE PTR [rsp+0x48],r8b
   10461:	mov    QWORD PTR [rsp+0x40],rcx
   10466:	mov    QWORD PTR [rsp+0x38],r9
   1046b:	call   3980 <strlen@plt>
   10470:	mov    r11,QWORD PTR [rsp+0x50]
   10475:	movzx  r8d,BYTE PTR [rsp+0x48]
   1047b:	mov    rcx,QWORD PTR [rsp+0x40]
   10480:	mov    r9,QWORD PTR [rsp+0x38]
   10485:	mov    r10,rax
   10488:	mov    rdx,r10
   1048b:	mov    rsi,r9
   1048e:	lea    rdi,[rsp+0x9c]
   10496:	mov    QWORD PTR [rsp+0x88],r11
   1049e:	sub    rdx,rbx
   104a1:	mov    BYTE PTR [rsp+0x50],r8b
   104a6:	mov    QWORD PTR [rsp+0x48],r10
   104ab:	mov    QWORD PTR [rsp+0x40],rdx
   104b0:	mov    QWORD PTR [rsp+0x38],r9
   104b5:	call   141b0 <rpl_mbrtoc32>
   104ba:	mov    r9,QWORD PTR [rsp+0x38]
   104bf:	mov    rdx,QWORD PTR [rsp+0x40]
   104c4:	test   rax,rax
   104c7:	mov    r10,QWORD PTR [rsp+0x48]
   104cc:	mov    rsi,rax
   104cf:	movzx  r8d,BYTE PTR [rsp+0x50]
   104d5:	mov    r11,QWORD PTR [rsp+0x88]
   104dd:	je     fe40 <quotearg_buffer_restyled+0x400>
   104e3:	cmp    rax,0xffffffffffffffff
   104e7:	je     1084e <quotearg_buffer_restyled+0xe0e>
   104ed:	cmp    rax,0xfffffffffffffffe
   104f1:	je     109c5 <quotearg_buffer_restyled+0xf85>
   104f7:	cmp    DWORD PTR [rsp+0xc],0x2
   104fc:	jne    10509 <quotearg_buffer_restyled+0xac9>
   104fe:	cmp    BYTE PTR [rsp+0x6a],0x0
   10503:	jne    108b7 <quotearg_buffer_restyled+0xe77>
   10509:	mov    edi,DWORD PTR [rsp+0x9c]
   10510:	mov    QWORD PTR [rsp+0x50],r10
   10515:	mov    QWORD PTR [rsp+0x48],r11
   1051a:	mov    BYTE PTR [rsp+0x40],r8b
   1051f:	mov    QWORD PTR [rsp+0x38],rsi
   10524:	call   3e70 <iswprint@plt>
   10529:	mov    rsi,QWORD PTR [rsp+0x38]
   1052e:	movzx  r8d,BYTE PTR [rsp+0x40]
   10534:	test   eax,eax
   10536:	mov    r11,QWORD PTR [rsp+0x48]
   1053b:	mov    r10,QWORD PTR [rsp+0x50]
   10540:	setne  r15b
   10544:	sete   cl
   10547:	and    cl,BYTE PTR [rsp+0x18]
   1054b:	cmp    rsi,0x1
   1054f:	jbe    fe35 <quotearg_buffer_restyled+0x3f5>
   10555:	mov    BYTE PTR [rsp+0x38],r15b
   1055a:	movzx  r9d,BYTE PTR [rsp+0x6a]
   10560:	add    rsi,rbx
   10563:	xor    edx,edx
   10565:	mov    rdi,QWORD PTR [rsp+0x20]
   1056a:	mov    r15d,DWORD PTR [rsp+0xc]
   1056f:	jmp    1062a <quotearg_buffer_restyled+0xbea>
   10574:	nop    DWORD PTR [rax+0x0]
   10578:	cmp    r15d,0x2
   1057c:	sete   dl
   1057f:	mov    eax,edx
   10581:	test   r9b,r9b
   10584:	jne    10085 <quotearg_buffer_restyled+0x645>
   1058a:	mov    eax,r8d
   1058d:	xor    eax,0x1
   10590:	and    al,dl
   10592:	je     105c5 <quotearg_buffer_restyled+0xb85>
   10594:	cmp    r14,r12
   10597:	jbe    1059e <quotearg_buffer_restyled+0xb5e>
   10599:	mov    BYTE PTR [r11+r12*1],0x27
   1059e:	lea    rdx,[r12+0x1]
   105a3:	cmp    r14,rdx
   105a6:	jbe    105ae <quotearg_buffer_restyled+0xb6e>
   105a8:	mov    BYTE PTR [r11+r12*1+0x1],0x24
   105ae:	lea    rdx,[r12+0x2]
   105b3:	cmp    r14,rdx
   105b6:	jbe    105be <quotearg_buffer_restyled+0xb7e>
   105b8:	mov    BYTE PTR [r11+r12*1+0x2],0x27
   105be:	add    r12,0x3
   105c2:	mov    r8d,eax
   105c5:	cmp    r14,r12
   105c8:	jbe    105cf <quotearg_buffer_restyled+0xb8f>
   105ca:	mov    BYTE PTR [r11+r12*1],0x5c
   105cf:	lea    rax,[r12+0x1]
   105d4:	cmp    r14,rax
   105d7:	jbe    105e6 <quotearg_buffer_restyled+0xba6>
   105d9:	mov    eax,ebp
   105db:	shr    al,0x6
   105de:	add    eax,0x30
   105e1:	mov    BYTE PTR [r11+r12*1+0x1],al
   105e6:	lea    rax,[r12+0x2]
   105eb:	cmp    r14,rax
   105ee:	jbe    10600 <quotearg_buffer_restyled+0xbc0>
   105f0:	mov    eax,ebp
   105f2:	shr    al,0x3
   105f5:	and    eax,0x7
   105f8:	add    eax,0x30
   105fb:	mov    BYTE PTR [r11+r12*1+0x2],al
   10600:	and    ebp,0x7
   10603:	add    rbx,0x1
   10607:	add    r12,0x3
   1060b:	add    ebp,0x30
   1060e:	cmp    rsi,rbx
   10611:	jbe    10843 <quotearg_buffer_restyled+0xe03>
   10617:	mov    edx,ecx
   10619:	cmp    r14,r12
   1061c:	jbe    10622 <quotearg_buffer_restyled+0xbe2>
   1061e:	mov    BYTE PTR [r11+r12*1],bpl
   10622:	movzx  ebp,BYTE PTR [rdi+rbx*1]
   10626:	add    r12,0x1
   1062a:	test   cl,cl
   1062c:	jne    10578 <quotearg_buffer_restyled+0xb38>
   10632:	mov    eax,edx
   10634:	xor    eax,0x1
   10637:	and    eax,r8d
   1063a:	test   r13b,r13b
   1063d:	je     1064d <quotearg_buffer_restyled+0xc0d>
   1063f:	cmp    r14,r12
   10642:	jbe    10649 <quotearg_buffer_restyled+0xc09>
   10644:	mov    BYTE PTR [r11+r12*1],0x5c
   10649:	add    r12,0x1
   1064d:	add    rbx,0x1
   10651:	cmp    rbx,rsi
   10654:	jae    107f0 <quotearg_buffer_restyled+0xdb0>
   1065a:	test   al,al
   1065c:	je     1085d <quotearg_buffer_restyled+0xe1d>
   10662:	cmp    r14,r12
   10665:	jbe    1066c <quotearg_buffer_restyled+0xc2c>
   10667:	mov    BYTE PTR [r11+r12*1],0x27
   1066c:	lea    rax,[r12+0x1]
   10671:	cmp    r14,rax
   10674:	jbe    1067c <quotearg_buffer_restyled+0xc3c>
   10676:	mov    BYTE PTR [r11+r12*1+0x1],0x27
   1067c:	add    r12,0x2
   10680:	xor    r13d,r13d
   10683:	xor    r8d,r8d
   10686:	jmp    10619 <quotearg_buffer_restyled+0xbd9>
   10688:	nop    DWORD PTR [rax+rax*1+0x0]
   10690:	cmp    DWORD PTR [rsp+0xc],0x2
   10695:	sete   dl
   10698:	test   r12,r12
   1069b:	jne    106a7 <quotearg_buffer_restyled+0xc67>
   1069d:	test   BYTE PTR [rsp+0x6a],dl
   106a1:	jne    10078 <quotearg_buffer_restyled+0x638>
   106a7:	movzx  eax,BYTE PTR [rsp+0x6a]
   106ac:	xor    eax,0x1
   106af:	and    dl,al
   106b1:	je     10a44 <quotearg_buffer_restyled+0x1004>
   106b7:	cmp    BYTE PTR [rsp+0x6b],0x0
   106bc:	je     10a46 <quotearg_buffer_restyled+0x1006>
   106c2:	cmp    BYTE PTR [rsp+0x10],0x0
   106c7:	jne    10ae6 <quotearg_buffer_restyled+0x10a6>
   106cd:	test   r14,r14
   106d0:	sete   al
   106d3:	cmp    QWORD PTR [rsp+0x60],0x0
   106d9:	setne  dl
   106dc:	and    al,dl
   106de:	je     10adc <quotearg_buffer_restyled+0x109c>
   106e4:	mov    r14,QWORD PTR [rsp+0x60]
   106e9:	mov    BYTE PTR [r11],0x27
   106ed:	mov    BYTE PTR [rsp+0x6b],al
   106f1:	jmp    ff13 <quotearg_buffer_restyled+0x4d3>
   106f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10700:	cmp    BYTE PTR [rsp+0x6a],0x0
   10705:	jne    109fd <quotearg_buffer_restyled+0xfbd>
   1070b:	test   r14,r14
   1070e:	je     10808 <quotearg_buffer_restyled+0xdc8>
   10714:	xor    edx,edx
   10716:	cmp    QWORD PTR [rsp+0x60],0x0
   1071c:	jne    10808 <quotearg_buffer_restyled+0xdc8>
   10722:	mov    QWORD PTR [rsp+0x60],r14
   10727:	add    r12,0x3
   1072b:	xor    eax,eax
   1072d:	xor    r8d,r8d
   10730:	mov    BYTE PTR [rsp+0x6b],r15b
   10735:	mov    r14,rdx
   10738:	mov    ebp,0x27
   1073d:	jmp    fd0e <quotearg_buffer_restyled+0x2ce>
   10742:	nop    WORD PTR [rax+rax*1+0x0]
   10748:	cmp    BYTE PTR [rsp+0x6a],0x0
   1074d:	jne    109fd <quotearg_buffer_restyled+0xfbd>
   10753:	xor    r15d,r15d
   10756:	xor    eax,eax
   10758:	mov    ebp,0x3f
   1075d:	jmp    fd0e <quotearg_buffer_restyled+0x2ce>
   10762:	nop    WORD PTR [rax+rax*1+0x0]
   10768:	mov    r13d,eax
   1076b:	xor    r15d,r15d
   1076e:	xor    eax,eax
   10770:	jmp    fcf0 <quotearg_buffer_restyled+0x2b0>
   10775:	nop    DWORD PTR [rax]
   10778:	and    al,BYTE PTR [rsp+0x18]
   1077c:	jmp    10085 <quotearg_buffer_restyled+0x645>
   10781:	nop    DWORD PTR [rax+0x0]
   10788:	mov    rcx,r12
   1078b:	cmp    r14,r12
   1078e:	jbe    1079b <quotearg_buffer_restyled+0xd5b>
   10790:	mov    eax,r8d
   10793:	mov    BYTE PTR [r11+rcx*1],0x5c
   10798:	mov    r8d,eax
   1079b:	cmp    DWORD PTR [rsp+0xc],0x2
   107a0:	lea    r12,[rcx+0x1]
   107a4:	je     10880 <quotearg_buffer_restyled+0xe40>
   107aa:	lea    rax,[rbx+0x1]
   107ae:	mov    ebp,0x30
   107b3:	cmp    rax,r10
   107b6:	jae    107d1 <quotearg_buffer_restyled+0xd91>
   107b8:	mov    rax,QWORD PTR [rsp+0x20]
   107bd:	movzx  eax,BYTE PTR [rax+rbx*1+0x1]
   107c2:	mov    BYTE PTR [rsp+0x38],al
   107c6:	sub    eax,0x30
   107c9:	cmp    al,0x9
   107cb:	jbe    10890 <quotearg_buffer_restyled+0xe50>
   107d1:	movzx  eax,BYTE PTR [rsp+0x18]
   107d6:	xor    eax,0x1
   107d9:	or     al,dl
   107db:	mov    eax,r15d
   107de:	mov    r15d,0x0
   107e4:	je     fcf0 <quotearg_buffer_restyled+0x2b0>
   107ea:	jmp    fd0e <quotearg_buffer_restyled+0x2ce>
   107ef:	nop
   107f0:	movzx  r15d,BYTE PTR [rsp+0x38]
   107f6:	jmp    10300 <quotearg_buffer_restyled+0x8c0>
   107fb:	movzx  ecx,BYTE PTR [rsp+0x18]
   10800:	xor    r15d,r15d
   10803:	jmp    10555 <quotearg_buffer_restyled+0xb15>
   10808:	cmp    r14,r12
   1080b:	jbe    10812 <quotearg_buffer_restyled+0xdd2>
   1080d:	mov    BYTE PTR [r11+r12*1],0x27
   10812:	lea    rax,[r12+0x1]
   10817:	cmp    r14,rax
   1081a:	jbe    10822 <quotearg_buffer_restyled+0xde2>
   1081c:	mov    BYTE PTR [r11+r12*1+0x1],0x5c
   10822:	lea    rax,[r12+0x2]
   10827:	cmp    r14,rax
   1082a:	jbe    10b2e <quotearg_buffer_restyled+0x10ee>
   10830:	mov    rdx,r14
   10833:	mov    BYTE PTR [r11+r12*1+0x2],0x27
   10839:	mov    r14,QWORD PTR [rsp+0x60]
   1083e:	jmp    10722 <quotearg_buffer_restyled+0xce2>
   10843:	movzx  r15d,BYTE PTR [rsp+0x38]
   10849:	jmp    fd79 <quotearg_buffer_restyled+0x339>
   1084e:	movzx  ecx,BYTE PTR [rsp+0x18]
   10853:	xor    r15d,r15d
   10856:	xor    esi,esi
   10858:	jmp    fe35 <quotearg_buffer_restyled+0x3f5>
   1085d:	xor    r13d,r13d
   10860:	jmp    10619 <quotearg_buffer_restyled+0xbd9>
   10865:	mov    QWORD PTR [rsp+0x60],0x0
   1086e:	xor    r8d,r8d
   10871:	mov    BYTE PTR [rsp+0x10],0x1
   10876:	mov    BYTE PTR [rsp+0x6b],0x0
   1087b:	jmp    febd <quotearg_buffer_restyled+0x47d>
   10880:	mov    eax,r15d
   10883:	mov    ebp,0x30
   10888:	xor    r15d,r15d
   1088b:	jmp    fd0e <quotearg_buffer_restyled+0x2ce>
   10890:	cmp    r14,r12
   10893:	jbe    1089a <quotearg_buffer_restyled+0xe5a>
   10895:	mov    BYTE PTR [r11+r12*1],0x30
   1089a:	lea    rax,[rcx+0x2]
   1089e:	cmp    r14,rax
   108a1:	jbe    108a9 <quotearg_buffer_restyled+0xe69>
   108a3:	mov    BYTE PTR [r11+rcx*1+0x2],0x30
   108a9:	lea    r12,[rcx+0x3]
   108ad:	mov    ebp,0x30
   108b2:	jmp    107d1 <quotearg_buffer_restyled+0xd91>
   108b7:	cmp    rax,0x1
   108bb:	je     10509 <quotearg_buffer_restyled+0xac9>
   108c1:	mov    rax,QWORD PTR [rsp+0x20]
   108c6:	add    r9,rsi
   108c9:	lea    rdx,[rax+rbx*1+0x1]
   108ce:	mov    eax,0x1
   108d3:	jmp    108e2 <quotearg_buffer_restyled+0xea2>
   108d5:	add    rdx,0x1
   108d9:	cmp    r9,rdx
   108dc:	je     10509 <quotearg_buffer_restyled+0xac9>
   108e2:	movzx  ecx,BYTE PTR [rdx]
   108e5:	sub    ecx,0x5b
   108e8:	cmp    cl,0x21
   108eb:	ja     108d5 <quotearg_buffer_restyled+0xe95>
   108ed:	mov    rdi,rax
   108f0:	shl    rdi,cl
   108f3:	mov    rcx,rdi
   108f6:	movabs rdi,0x20000002b
   10900:	test   rcx,rdi
   10903:	je     108d5 <quotearg_buffer_restyled+0xe95>
   10905:	jmp    10078 <quotearg_buffer_restyled+0x638>
   1090a:	mov    eax,r13d
   1090d:	jmp    10411 <quotearg_buffer_restyled+0x9d1>
   10912:	mov    eax,r13d
   10915:	jmp    10429 <quotearg_buffer_restyled+0x9e9>
   1091a:	mov    rdx,QWORD PTR [rsp+0x80]
   10922:	movzx  eax,BYTE PTR [rdx]
   10925:	test   al,al
   10927:	je     fb87 <quotearg_buffer_restyled+0x147>
   1092d:	nop    DWORD PTR [rax]
   10930:	cmp    r14,r12
   10933:	jbe    10939 <quotearg_buffer_restyled+0xef9>
   10935:	mov    BYTE PTR [r11+r12*1],al
   10939:	add    r12,0x1
   1093d:	movzx  eax,BYTE PTR [rdx+r12*1]
   10942:	test   al,al
   10944:	jne    10930 <quotearg_buffer_restyled+0xef0>
   10946:	jmp    fb87 <quotearg_buffer_restyled+0x147>
   1094b:	movzx  ebp,BYTE PTR [rsi+rax*1]
   1094f:	lea    edx,[rbp-0x21]
   10952:	cmp    dl,0x1d
   10955:	ja     10138 <quotearg_buffer_restyled+0x6f8>
   1095b:	lea    rcx,[rip+0x707e]        # 179e0 <default_tuning+0x740>
   10962:	movzx  edx,dl
   10965:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   10969:	add    rdx,rcx
   1096c:	notrack jmp rdx
   1096f:	cmp    BYTE PTR [rsp+0x6a],0x0
   10974:	jne    10095 <quotearg_buffer_restyled+0x655>
   1097a:	cmp    r14,r12
   1097d:	jbe    10984 <quotearg_buffer_restyled+0xf44>
   1097f:	mov    BYTE PTR [r11+r12*1],0x3f
   10984:	lea    rdx,[r12+0x1]
   10989:	cmp    r14,rdx
   1098c:	jbe    10994 <quotearg_buffer_restyled+0xf54>
   1098e:	mov    BYTE PTR [r11+r12*1+0x1],0x22
   10994:	lea    rdx,[r12+0x2]
   10999:	cmp    r14,rdx
   1099c:	jbe    109a4 <quotearg_buffer_restyled+0xf64>
   1099e:	mov    BYTE PTR [r11+r12*1+0x2],0x22
   109a4:	lea    rdx,[r12+0x3]
   109a9:	cmp    r14,rdx
   109ac:	jbe    109b4 <quotearg_buffer_restyled+0xf74>
   109ae:	mov    BYTE PTR [r11+r12*1+0x3],0x3f
   109b4:	add    r12,0x4
   109b8:	xor    edx,edx
   109ba:	xor    r15d,r15d
   109bd:	mov    rbx,rax
   109c0:	jmp    107d1 <quotearg_buffer_restyled+0xd91>
   109c5:	movzx  ecx,BYTE PTR [rsp+0x18]
   109ca:	xor    esi,esi
   109cc:	xor    r15d,r15d
   109cf:	cmp    r10,rbx
   109d2:	ja     109e9 <quotearg_buffer_restyled+0xfa9>
   109d4:	jmp    fe35 <quotearg_buffer_restyled+0x3f5>
   109d9:	nop    DWORD PTR [rax+0x0]
   109e0:	add    rsi,0x1
   109e4:	cmp    rdx,rsi
   109e7:	je     109f0 <quotearg_buffer_restyled+0xfb0>
   109e9:	cmp    BYTE PTR [r9+rsi*1],0x0
   109ee:	jne    109e0 <quotearg_buffer_restyled+0xfa0>
   109f0:	movzx  ecx,BYTE PTR [rsp+0x18]
   109f5:	xor    r15d,r15d
   109f8:	jmp    1054b <quotearg_buffer_restyled+0xb0b>
   109fd:	movzx  eax,BYTE PTR [rsp+0x18]
   10a02:	jmp    10085 <quotearg_buffer_restyled+0x645>
   10a07:	lea    rax,[rip+0x6948]        # 17356 <default_tuning+0xb6>
   10a0e:	mov    BYTE PTR [rsp+0x10],0x1
   10a13:	xor    r8d,r8d
   10a16:	xor    r12d,r12d
   10a19:	mov    BYTE PTR [rsp+0x6b],0x0
   10a1e:	mov    QWORD PTR [rsp+0x60],0x0
   10a27:	mov    BYTE PTR [rsp+0x6a],0x1
   10a2c:	mov    BYTE PTR [rsp+0x18],0x1
   10a31:	mov    QWORD PTR [rsp+0x28],0x1
   10a3a:	mov    QWORD PTR [rsp+0x58],rax
   10a3f:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
   10a44:	mov    edx,eax
   10a46:	mov    rax,QWORD PTR [rsp+0x58]
   10a4b:	test   rax,rax
   10a4e:	je     10a74 <quotearg_buffer_restyled+0x1034>
   10a50:	test   dl,dl
   10a52:	je     10a74 <quotearg_buffer_restyled+0x1034>
   10a54:	movzx  edx,BYTE PTR [rax]
   10a57:	test   dl,dl
   10a59:	je     10a74 <quotearg_buffer_restyled+0x1034>
   10a5b:	sub    rax,r12
   10a5e:	cmp    r14,r12
   10a61:	jbe    10a67 <quotearg_buffer_restyled+0x1027>
   10a63:	mov    BYTE PTR [r11+r12*1],dl
   10a67:	add    r12,0x1
   10a6b:	movzx  edx,BYTE PTR [rax+r12*1]
   10a70:	test   dl,dl
   10a72:	jne    10a5e <quotearg_buffer_restyled+0x101e>
   10a74:	cmp    r14,r12
   10a77:	jbe    100d4 <quotearg_buffer_restyled+0x694>
   10a7d:	mov    BYTE PTR [r11+r12*1],0x0
   10a82:	jmp    100d4 <quotearg_buffer_restyled+0x694>
   10a87:	mov    esi,DWORD PTR [rsp+0xc]
   10a8b:	mov    rdi,rcx
   10a8e:	call   f960 <gettext_quote.part.0>
   10a93:	mov    r10,QWORD PTR [rsp+0x18]
   10a98:	mov    r11,QWORD PTR [rsp+0x10]
   10a9d:	mov    QWORD PTR [rsp+0x78],rax
   10aa2:	jmp    fb7c <quotearg_buffer_restyled+0x13c>
   10aa7:	mov    esi,DWORD PTR [rsp+0xc]
   10aab:	mov    rdi,QWORD PTR [rsp+0x80]
   10ab3:	call   f960 <gettext_quote.part.0>
   10ab8:	mov    r10,QWORD PTR [rsp+0x18]
   10abd:	mov    r11,QWORD PTR [rsp+0x10]
   10ac2:	mov    QWORD PTR [rsp+0x80],rax
   10aca:	jmp    fb3d <quotearg_buffer_restyled+0xfd>
   10acf:	cmp    DWORD PTR [rsp+0xc],0x2
   10ad4:	sete   al
   10ad7:	jmp    10085 <quotearg_buffer_restyled+0x645>
   10adc:	movzx  edx,BYTE PTR [rsp+0x6b]
   10ae1:	jmp    10a46 <quotearg_buffer_restyled+0x1006>
   10ae6:	sub    rsp,0x8
   10aea:	mov    r8d,0x5
   10af0:	mov    rcx,r10
   10af3:	mov    rdi,r11
   10af6:	push   QWORD PTR [rsp+0x80]
   10afd:	push   QWORD PTR [rsp+0x90]
   10b04:	push   QWORD PTR [rsp+0x48]
   10b08:	mov    r9d,DWORD PTR [rsp+0x8c]
   10b10:	mov    rdx,QWORD PTR [rsp+0x40]
   10b15:	mov    rsi,QWORD PTR [rsp+0x80]
   10b1d:	call   fa40 <quotearg_buffer_restyled>
   10b22:	add    rsp,0x20
   10b26:	mov    r12,rax
   10b29:	jmp    100d4 <quotearg_buffer_restyled+0x694>
   10b2e:	mov    rdx,r14
   10b31:	mov    r14,QWORD PTR [rsp+0x60]
   10b36:	jmp    10722 <quotearg_buffer_restyled+0xce2>
   10b3b:	call   3990 <__stack_chk_fail@plt>
   10b40:	mov    ebp,eax
   10b42:	jmp    101dd <quotearg_buffer_restyled+0x79d>
   10b47:	mov    BYTE PTR [rsp+0x10],0x1
   10b4c:	xor    r8d,r8d
   10b4f:	xor    eax,eax
   10b51:	mov    QWORD PTR [rsp+0x60],0x0
   10b5a:	jmp    106e9 <quotearg_buffer_restyled+0xca9>
   10b5f:	lea    rax,[rip+0x62b3]        # 16e19 <short_options+0x19a9>
   10b66:	mov    BYTE PTR [rsp+0x10],0x1
   10b6b:	xor    r8d,r8d
   10b6e:	xor    r12d,r12d
   10b71:	mov    BYTE PTR [rsp+0x6b],0x0
   10b76:	mov    QWORD PTR [rsp+0x60],0x0
   10b7f:	mov    BYTE PTR [rsp+0x6a],0x1
   10b84:	mov    BYTE PTR [rsp+0x18],0x0
   10b89:	mov    QWORD PTR [rsp+0x28],0x1
   10b92:	mov    QWORD PTR [rsp+0x58],rax
   10b97:	jmp    fbd0 <quotearg_buffer_restyled+0x190>
   10b9c:	nop    DWORD PTR [rax+0x0]

0000000000010ba0 <quotearg_n_options>:
   10ba0:	push   r15
   10ba2:	push   r14
   10ba4:	push   r13
   10ba6:	mov    r13,rdx
   10ba9:	push   r12
   10bab:	mov    r12,rsi
   10bae:	push   rbp
   10baf:	mov    rbp,rcx
   10bb2:	push   rbx
   10bb3:	movsxd rbx,edi
   10bb6:	sub    rsp,0x38
   10bba:	mov    rax,QWORD PTR fs:0x28
   10bc3:	mov    QWORD PTR [rsp+0x28],rax
   10bc8:	xor    eax,eax
   10bca:	call   3810 <__errno_location@plt>
   10bcf:	mov    r15,QWORD PTR [rip+0xd5aa]        # 1e180 <slotvec>
   10bd6:	mov    QWORD PTR [rsp],rax
   10bda:	mov    eax,DWORD PTR [rax]
   10bdc:	mov    DWORD PTR [rsp+0xc],eax
   10be0:	cmp    ebx,0x7ffffffe
   10be6:	ja     3ee9 <quotearg_n_options.cold>
   10bec:	mov    eax,DWORD PTR [rip+0xd586]        # 1e178 <nslots>
   10bf2:	cmp    eax,ebx
   10bf4:	jg     10c66 <quotearg_n_options+0xc6>
   10bf6:	movsxd rdx,eax
   10bf9:	mov    QWORD PTR [rsp+0x20],rdx
   10bfe:	mov    edx,ebx
   10c00:	sub    edx,eax
   10c02:	lea    rax,[rip+0xd587]        # 1e190 <slotvec0>
   10c09:	add    edx,0x1
   10c0c:	movsxd rdx,edx
   10c0f:	cmp    r15,rax
   10c12:	je     10d50 <quotearg_n_options+0x1b0>
   10c18:	mov    rdi,r15
   10c1b:	lea    rsi,[rsp+0x20]
   10c20:	mov    r8d,0x10
   10c26:	mov    ecx,0x7fffffff
   10c2b:	call   13200 <xpalloc>
   10c30:	mov    QWORD PTR [rip+0xd549],rax        # 1e180 <slotvec>
   10c37:	mov    r15,rax
   10c3a:	movsxd rdi,DWORD PTR [rip+0xd537]        # 1e178 <nslots>
   10c41:	mov    rdx,QWORD PTR [rsp+0x20]
   10c46:	xor    esi,esi
   10c48:	sub    rdx,rdi
   10c4b:	shl    rdi,0x4
   10c4f:	shl    rdx,0x4
   10c53:	add    rdi,r15
   10c56:	call   3a60 <memset@plt>
   10c5b:	mov    rax,QWORD PTR [rsp+0x20]
   10c60:	mov    DWORD PTR [rip+0xd512],eax        # 1e178 <nslots>
   10c66:	lea    rax,[rbp+0x8]
   10c6a:	shl    rbx,0x4
   10c6e:	sub    rsp,0x8
   10c72:	mov    r8d,DWORD PTR [rbp+0x0]
   10c76:	add    rbx,r15
   10c79:	mov    r15d,DWORD PTR [rbp+0x4]
   10c7d:	mov    QWORD PTR [rsp+0x20],rax
   10c82:	mov    rcx,r13
   10c85:	mov    rsi,QWORD PTR [rbx]
   10c88:	mov    r14,QWORD PTR [rbx+0x8]
   10c8c:	push   QWORD PTR [rbp+0x30]
   10c8f:	mov    rdx,r12
   10c92:	push   QWORD PTR [rbp+0x28]
   10c95:	or     r15d,0x1
   10c99:	push   rax
   10c9a:	mov    r9d,r15d
   10c9d:	mov    rdi,r14
   10ca0:	mov    QWORD PTR [rsp+0x30],rsi
   10ca5:	call   fa40 <quotearg_buffer_restyled>
   10caa:	mov    rsi,QWORD PTR [rsp+0x30]
   10caf:	add    rsp,0x20
   10cb3:	cmp    rsi,rax
   10cb6:	ja     10d1d <quotearg_n_options+0x17d>
   10cb8:	lea    rsi,[rax+0x1]
   10cbc:	lea    rax,[rip+0xdbfd]        # 1e8c0 <slot0>
   10cc3:	mov    QWORD PTR [rbx],rsi
   10cc6:	cmp    r14,rax
   10cc9:	je     10cdd <quotearg_n_options+0x13d>
   10ccb:	mov    rdi,r14
   10cce:	mov    QWORD PTR [rsp+0x10],rsi
   10cd3:	call   d750 <rpl_free>
   10cd8:	mov    rsi,QWORD PTR [rsp+0x10]
   10cdd:	mov    rdi,rsi
   10ce0:	mov    QWORD PTR [rsp+0x10],rsi
   10ce5:	call   13040 <xcharalloc>
   10cea:	sub    rsp,0x8
   10cee:	mov    r8d,DWORD PTR [rbp+0x0]
   10cf2:	mov    r9d,r15d
   10cf5:	mov    QWORD PTR [rbx+0x8],rax
   10cf9:	mov    rcx,r13
   10cfc:	mov    rdx,r12
   10cff:	mov    rdi,rax
   10d02:	push   QWORD PTR [rbp+0x30]
   10d05:	mov    r14,rax
   10d08:	push   QWORD PTR [rbp+0x28]
   10d0b:	push   QWORD PTR [rsp+0x30]
   10d0f:	mov    rsi,QWORD PTR [rsp+0x30]
   10d14:	call   fa40 <quotearg_buffer_restyled>
   10d19:	add    rsp,0x20
   10d1d:	mov    rax,QWORD PTR [rsp]
   10d21:	mov    ecx,DWORD PTR [rsp+0xc]
   10d25:	mov    DWORD PTR [rax],ecx
   10d27:	mov    rax,QWORD PTR [rsp+0x28]
   10d2c:	xor    rax,QWORD PTR fs:0x28
   10d35:	jne    10d81 <quotearg_n_options+0x1e1>
   10d37:	add    rsp,0x38
   10d3b:	mov    rax,r14
   10d3e:	pop    rbx
   10d3f:	pop    rbp
   10d40:	pop    r12
   10d42:	pop    r13
   10d44:	pop    r14
   10d46:	pop    r15
   10d48:	ret    
   10d49:	nop    DWORD PTR [rax+0x0]
   10d50:	lea    rsi,[rsp+0x20]
   10d55:	mov    r8d,0x10
   10d5b:	mov    ecx,0x7fffffff
   10d60:	xor    edi,edi
   10d62:	call   13200 <xpalloc>
   10d67:	movdqa xmm0,XMMWORD PTR [rip+0xd421]        # 1e190 <slotvec0>
   10d6f:	mov    QWORD PTR [rip+0xd40a],rax        # 1e180 <slotvec>
   10d76:	mov    r15,rax
   10d79:	movups XMMWORD PTR [rax],xmm0
   10d7c:	jmp    10c3a <quotearg_n_options+0x9a>
   10d81:	call   3990 <__stack_chk_fail@plt>
   10d86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000010d90 <clone_quoting_options>:
   10d90:	endbr64 
   10d94:	push   r12
   10d96:	push   rbp
   10d97:	mov    rbp,rdi
   10d9a:	push   rbx
   10d9b:	call   3810 <__errno_location@plt>
   10da0:	test   rbp,rbp
   10da3:	mov    esi,0x38
   10da8:	mov    r12d,DWORD PTR [rax]
   10dab:	mov    rbx,rax
   10dae:	lea    rax,[rip+0xdc0b]        # 1e9c0 <default_quoting_options>
   10db5:	cmove  rbp,rax
   10db9:	mov    rdi,rbp
   10dbc:	call   13370 <xmemdup>
   10dc1:	mov    DWORD PTR [rbx],r12d
   10dc4:	pop    rbx
   10dc5:	pop    rbp
   10dc6:	pop    r12
   10dc8:	ret    
   10dc9:	nop    DWORD PTR [rax+0x0]

0000000000010dd0 <get_quoting_style>:
   10dd0:	endbr64 
   10dd4:	test   rdi,rdi
   10dd7:	lea    rax,[rip+0xdbe2]        # 1e9c0 <default_quoting_options>
   10dde:	cmove  rdi,rax
   10de2:	mov    eax,DWORD PTR [rdi]
   10de4:	ret    
   10de5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000010df0 <set_quoting_style>:
   10df0:	endbr64 
   10df4:	test   rdi,rdi
   10df7:	lea    rax,[rip+0xdbc2]        # 1e9c0 <default_quoting_options>
   10dfe:	cmove  rdi,rax
   10e02:	mov    DWORD PTR [rdi],esi
   10e04:	ret    
   10e05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000010e10 <set_char_quoting>:
   10e10:	endbr64 
   10e14:	test   rdi,rdi
   10e17:	lea    rax,[rip+0xdba2]        # 1e9c0 <default_quoting_options>
   10e1e:	mov    ecx,esi
   10e20:	cmove  rdi,rax
   10e24:	mov    eax,esi
   10e26:	and    ecx,0x1f
   10e29:	shr    al,0x5
   10e2c:	movzx  eax,al
   10e2f:	lea    rsi,[rdi+rax*4+0x8]
   10e34:	mov    edi,DWORD PTR [rsi]
   10e36:	mov    eax,edi
   10e38:	shr    eax,cl
   10e3a:	xor    edx,eax
   10e3c:	and    eax,0x1
   10e3f:	and    edx,0x1
   10e42:	shl    edx,cl
   10e44:	xor    edx,edi
   10e46:	mov    DWORD PTR [rsi],edx
   10e48:	ret    
   10e49:	nop    DWORD PTR [rax+0x0]

0000000000010e50 <set_quoting_flags>:
   10e50:	endbr64 
   10e54:	test   rdi,rdi
   10e57:	lea    rax,[rip+0xdb62]        # 1e9c0 <default_quoting_options>
   10e5e:	cmove  rdi,rax
   10e62:	mov    eax,DWORD PTR [rdi+0x4]
   10e65:	mov    DWORD PTR [rdi+0x4],esi
   10e68:	ret    
   10e69:	nop    DWORD PTR [rax+0x0]

0000000000010e70 <set_custom_quoting>:
   10e70:	endbr64 
   10e74:	sub    rsp,0x8
   10e78:	lea    rax,[rip+0xdb41]        # 1e9c0 <default_quoting_options>
   10e7f:	test   rdi,rdi
   10e82:	cmove  rdi,rax
   10e86:	mov    DWORD PTR [rdi],0xa
   10e8c:	test   rsi,rsi
   10e8f:	je     3eee <set_custom_quoting.cold>
   10e95:	test   rdx,rdx
   10e98:	je     3eee <set_custom_quoting.cold>
   10e9e:	mov    QWORD PTR [rdi+0x28],rsi
   10ea2:	mov    QWORD PTR [rdi+0x30],rdx
   10ea6:	add    rsp,0x8
   10eaa:	ret    
   10eab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000010eb0 <quotearg_buffer>:
   10eb0:	endbr64 
   10eb4:	push   r15
   10eb6:	lea    rax,[rip+0xdb03]        # 1e9c0 <default_quoting_options>
   10ebd:	push   r14
   10ebf:	mov    r14,rdx
   10ec2:	push   r13
   10ec4:	mov    r13,rsi
   10ec7:	push   r12
   10ec9:	mov    r12,rdi
   10ecc:	push   rbp
   10ecd:	push   rbx
   10ece:	mov    rbx,r8
   10ed1:	sub    rsp,0x18
   10ed5:	test   r8,r8
   10ed8:	cmove  rbx,rax
   10edc:	mov    QWORD PTR [rsp+0x8],rcx
   10ee1:	call   3810 <__errno_location@plt>
   10ee6:	sub    rsp,0x8
   10eea:	mov    rdx,r14
   10eed:	mov    rsi,r13
   10ef0:	mov    r15d,DWORD PTR [rax]
   10ef3:	mov    rbp,rax
   10ef6:	lea    rax,[rbx+0x8]
   10efa:	mov    r9d,DWORD PTR [rbx+0x4]
   10efe:	push   QWORD PTR [rbx+0x30]
   10f01:	mov    r8d,DWORD PTR [rbx]
   10f04:	mov    rdi,r12
   10f07:	push   QWORD PTR [rbx+0x28]
   10f0a:	push   rax
   10f0b:	mov    rcx,QWORD PTR [rsp+0x28]
   10f10:	call   fa40 <quotearg_buffer_restyled>
   10f15:	mov    DWORD PTR [rbp+0x0],r15d
   10f19:	add    rsp,0x38
   10f1d:	pop    rbx
   10f1e:	pop    rbp
   10f1f:	pop    r12
   10f21:	pop    r13
   10f23:	pop    r14
   10f25:	pop    r15
   10f27:	ret    
   10f28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000010f30 <quotearg_alloc_mem>:
   10f30:	endbr64 
   10f34:	push   r15
   10f36:	lea    rax,[rip+0xda83]        # 1e9c0 <default_quoting_options>
   10f3d:	push   r14
   10f3f:	mov    r14,rsi
   10f42:	push   r13
   10f44:	mov    r13,rdi
   10f47:	push   r12
   10f49:	push   rbp
   10f4a:	mov    rbp,rdx
   10f4d:	push   rbx
   10f4e:	mov    rbx,rcx
   10f51:	sub    rsp,0x28
   10f55:	test   rcx,rcx
   10f58:	cmove  rbx,rax
   10f5c:	call   3810 <__errno_location@plt>
   10f61:	xor    r9d,r9d
   10f64:	test   rbp,rbp
   10f67:	mov    rcx,r14
   10f6a:	mov    r12,rax
   10f6d:	mov    eax,DWORD PTR [rax]
   10f6f:	sete   r9b
   10f73:	lea    r10,[rbx+0x8]
   10f77:	sub    rsp,0x8
   10f7b:	or     r9d,DWORD PTR [rbx+0x4]
   10f7f:	mov    r8d,DWORD PTR [rbx]
   10f82:	mov    rdx,r13
   10f85:	mov    DWORD PTR [rsp+0x18],eax
   10f89:	xor    esi,esi
   10f8b:	xor    edi,edi
   10f8d:	push   QWORD PTR [rbx+0x30]
   10f90:	push   QWORD PTR [rbx+0x28]
   10f93:	push   r10
   10f95:	mov    QWORD PTR [rsp+0x38],r10
   10f9a:	mov    DWORD PTR [rsp+0x34],r9d
   10f9f:	call   fa40 <quotearg_buffer_restyled>
   10fa4:	add    rsp,0x20
   10fa8:	lea    rsi,[rax+0x1]
   10fac:	mov    r15,rax
   10faf:	mov    rdi,rsi
   10fb2:	mov    QWORD PTR [rsp+0x8],rsi
   10fb7:	call   13040 <xcharalloc>
   10fbc:	sub    rsp,0x8
   10fc0:	push   QWORD PTR [rbx+0x30]
   10fc3:	mov    r8d,DWORD PTR [rbx]
   10fc6:	push   QWORD PTR [rbx+0x28]
   10fc9:	mov    rcx,r14
   10fcc:	mov    rdx,r13
   10fcf:	mov    rdi,rax
   10fd2:	mov    r10,QWORD PTR [rsp+0x30]
   10fd7:	push   r10
   10fd9:	mov    rsi,QWORD PTR [rsp+0x28]
   10fde:	mov    r9d,DWORD PTR [rsp+0x34]
   10fe3:	mov    QWORD PTR [rsp+0x28],rax
   10fe8:	call   fa40 <quotearg_buffer_restyled>
   10fed:	mov    eax,DWORD PTR [rsp+0x30]
   10ff1:	add    rsp,0x20
   10ff5:	test   rbp,rbp
   10ff8:	mov    r11,QWORD PTR [rsp+0x8]
   10ffd:	mov    DWORD PTR [r12],eax
   11001:	je     11007 <quotearg_alloc_mem+0xd7>
   11003:	mov    QWORD PTR [rbp+0x0],r15
   11007:	add    rsp,0x28
   1100b:	mov    rax,r11
   1100e:	pop    rbx
   1100f:	pop    rbp
   11010:	pop    r12
   11012:	pop    r13
   11014:	pop    r14
   11016:	pop    r15
   11018:	ret    
   11019:	nop    DWORD PTR [rax+0x0]

0000000000011020 <quotearg_alloc>:
   11020:	endbr64 
   11024:	mov    rcx,rdx
   11027:	xor    edx,edx
   11029:	jmp    10f30 <quotearg_alloc_mem>
   1102e:	xchg   ax,ax

0000000000011030 <quotearg_free>:
   11030:	endbr64 
   11034:	cmp    DWORD PTR [rip+0xd13d],0x1        # 1e178 <nslots>
   1103b:	push   r12
   1103d:	mov    r12,QWORD PTR [rip+0xd13c]        # 1e180 <slotvec>
   11044:	push   rbp
   11045:	push   rbx
   11046:	jle    11070 <quotearg_free+0x40>
   11048:	lea    rbp,[r12+0x18]
   1104d:	mov    ebx,0x1
   11052:	nop    WORD PTR [rax+rax*1+0x0]
   11058:	mov    rdi,QWORD PTR [rbp+0x0]
   1105c:	add    ebx,0x1
   1105f:	add    rbp,0x10
   11063:	call   d750 <rpl_free>
   11068:	cmp    DWORD PTR [rip+0xd10a],ebx        # 1e178 <nslots>
   1106e:	jg     11058 <quotearg_free+0x28>
   11070:	mov    rdi,QWORD PTR [r12+0x8]
   11075:	lea    rbx,[rip+0xd844]        # 1e8c0 <slot0>
   1107c:	cmp    rdi,rbx
   1107f:	je     11098 <quotearg_free+0x68>
   11081:	call   d750 <rpl_free>
   11086:	mov    QWORD PTR [rip+0xd10b],rbx        # 1e198 <slotvec0+0x8>
   1108d:	mov    QWORD PTR [rip+0xd0f8],0x100        # 1e190 <slotvec0>
   11098:	lea    rbx,[rip+0xd0f1]        # 1e190 <slotvec0>
   1109f:	cmp    r12,rbx
   110a2:	je     110b3 <quotearg_free+0x83>
   110a4:	mov    rdi,r12
   110a7:	call   d750 <rpl_free>
   110ac:	mov    QWORD PTR [rip+0xd0cd],rbx        # 1e180 <slotvec>
   110b3:	mov    DWORD PTR [rip+0xd0bb],0x1        # 1e178 <nslots>
   110bd:	pop    rbx
   110be:	pop    rbp
   110bf:	pop    r12
   110c1:	ret    
   110c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   110cd:	nop    DWORD PTR [rax]

00000000000110d0 <quotearg_n>:
   110d0:	endbr64 
   110d4:	lea    rcx,[rip+0xd8e5]        # 1e9c0 <default_quoting_options>
   110db:	mov    rdx,0xffffffffffffffff
   110e2:	jmp    10ba0 <quotearg_n_options>
   110e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000110f0 <quotearg_n_mem>:
   110f0:	endbr64 
   110f4:	lea    rcx,[rip+0xd8c5]        # 1e9c0 <default_quoting_options>
   110fb:	jmp    10ba0 <quotearg_n_options>

0000000000011100 <quotearg>:
   11100:	endbr64 
   11104:	mov    rsi,rdi
   11107:	lea    rcx,[rip+0xd8b2]        # 1e9c0 <default_quoting_options>
   1110e:	mov    rdx,0xffffffffffffffff
   11115:	xor    edi,edi
   11117:	jmp    10ba0 <quotearg_n_options>
   1111c:	nop    DWORD PTR [rax+0x0]

0000000000011120 <quotearg_mem>:
   11120:	endbr64 
   11124:	mov    rdx,rsi
   11127:	lea    rcx,[rip+0xd892]        # 1e9c0 <default_quoting_options>
   1112e:	mov    rsi,rdi
   11131:	xor    edi,edi
   11133:	jmp    10ba0 <quotearg_n_options>
   11138:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011140 <quotearg_n_style>:
   11140:	endbr64 
   11144:	sub    rsp,0x48
   11148:	mov    rax,QWORD PTR fs:0x28
   11151:	mov    QWORD PTR [rsp+0x38],rax
   11156:	xor    eax,eax
   11158:	cmp    esi,0xa
   1115b:	je     3ef3 <quotearg_n_style.cold>
   11161:	mov    r8,rdx
   11164:	mov    DWORD PTR [rsp],esi
   11167:	mov    rcx,rsp
   1116a:	mov    rdx,0xffffffffffffffff
   11171:	mov    rsi,r8
   11174:	mov    DWORD PTR [rsp+0x4],0x0
   1117c:	mov    QWORD PTR [rsp+0x8],0x0
   11185:	mov    QWORD PTR [rsp+0x10],0x0
   1118e:	mov    QWORD PTR [rsp+0x18],0x0
   11197:	mov    QWORD PTR [rsp+0x20],0x0
   111a0:	mov    QWORD PTR [rsp+0x28],0x0
   111a9:	mov    QWORD PTR [rsp+0x30],0x0
   111b2:	call   10ba0 <quotearg_n_options>
   111b7:	mov    rcx,QWORD PTR [rsp+0x38]
   111bc:	xor    rcx,QWORD PTR fs:0x28
   111c5:	jne    111cc <quotearg_n_style+0x8c>
   111c7:	add    rsp,0x48
   111cb:	ret    
   111cc:	call   3990 <__stack_chk_fail@plt>
   111d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   111dc:	nop    DWORD PTR [rax+0x0]

00000000000111e0 <quotearg_n_style_mem>:
   111e0:	endbr64 
   111e4:	sub    rsp,0x48
   111e8:	mov    rax,QWORD PTR fs:0x28
   111f1:	mov    QWORD PTR [rsp+0x38],rax
   111f6:	xor    eax,eax
   111f8:	cmp    esi,0xa
   111fb:	je     3ef8 <quotearg_n_style_mem.cold>
   11201:	mov    r8,rdx
   11204:	mov    DWORD PTR [rsp],esi
   11207:	mov    rdx,rcx
   1120a:	mov    rcx,rsp
   1120d:	mov    rsi,r8
   11210:	mov    DWORD PTR [rsp+0x4],0x0
   11218:	mov    QWORD PTR [rsp+0x8],0x0
   11221:	mov    QWORD PTR [rsp+0x10],0x0
   1122a:	mov    QWORD PTR [rsp+0x18],0x0
   11233:	mov    QWORD PTR [rsp+0x20],0x0
   1123c:	mov    QWORD PTR [rsp+0x28],0x0
   11245:	mov    QWORD PTR [rsp+0x30],0x0
   1124e:	call   10ba0 <quotearg_n_options>
   11253:	mov    rdx,QWORD PTR [rsp+0x38]
   11258:	xor    rdx,QWORD PTR fs:0x28
   11261:	jne    11268 <quotearg_n_style_mem+0x88>
   11263:	add    rsp,0x48
   11267:	ret    
   11268:	call   3990 <__stack_chk_fail@plt>
   1126d:	nop    DWORD PTR [rax]

0000000000011270 <quotearg_style>:
   11270:	endbr64 
   11274:	mov    rdx,rsi
   11277:	mov    esi,edi
   11279:	xor    edi,edi
   1127b:	jmp    11140 <quotearg_n_style>

0000000000011280 <quotearg_style_mem>:
   11280:	endbr64 
   11284:	mov    rcx,rdx
   11287:	mov    rdx,rsi
   1128a:	mov    esi,edi
   1128c:	xor    edi,edi
   1128e:	jmp    111e0 <quotearg_n_style_mem>
   11293:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1129e:	xchg   ax,ax

00000000000112a0 <quotearg_char_mem>:
   112a0:	endbr64 
   112a4:	sub    rsp,0x48
   112a8:	movdqa xmm0,XMMWORD PTR [rip+0xd710]        # 1e9c0 <default_quoting_options>
   112b0:	movdqa xmm1,XMMWORD PTR [rip+0xd718]        # 1e9d0 <default_quoting_options+0x10>
   112b8:	mov    ecx,edx
   112ba:	mov    rax,QWORD PTR fs:0x28
   112c3:	mov    QWORD PTR [rsp+0x38],rax
   112c8:	xor    eax,eax
   112ca:	mov    rax,QWORD PTR [rip+0xd71f]        # 1e9f0 <default_quoting_options+0x30>
   112d1:	mov    r9,rsi
   112d4:	and    ecx,0x1f
   112d7:	movdqa xmm2,XMMWORD PTR [rip+0xd701]        # 1e9e0 <default_quoting_options+0x20>
   112df:	movaps XMMWORD PTR [rsp],xmm0
   112e3:	mov    r10,rsp
   112e6:	mov    QWORD PTR [rsp+0x30],rax
   112eb:	mov    eax,edx
   112ed:	shr    al,0x5
   112f0:	movaps XMMWORD PTR [rsp+0x10],xmm1
   112f5:	movzx  eax,al
   112f8:	movaps XMMWORD PTR [rsp+0x20],xmm2
   112fd:	lea    rdx,[rsp+rax*4+0x8]
   11302:	mov    esi,DWORD PTR [rdx]
   11304:	mov    eax,esi
   11306:	shr    eax,cl
   11308:	not    eax
   1130a:	and    eax,0x1
   1130d:	shl    eax,cl
   1130f:	mov    rcx,r10
   11312:	xor    eax,esi
   11314:	mov    rsi,rdi
   11317:	xor    edi,edi
   11319:	mov    DWORD PTR [rdx],eax
   1131b:	mov    rdx,r9
   1131e:	call   10ba0 <quotearg_n_options>
   11323:	mov    rdi,QWORD PTR [rsp+0x38]
   11328:	xor    rdi,QWORD PTR fs:0x28
   11331:	jne    11338 <quotearg_char_mem+0x98>
   11333:	add    rsp,0x48
   11337:	ret    
   11338:	call   3990 <__stack_chk_fail@plt>
   1133d:	nop    DWORD PTR [rax]

0000000000011340 <quotearg_char>:
   11340:	endbr64 
   11344:	movsx  edx,sil
   11348:	mov    rsi,0xffffffffffffffff
   1134f:	jmp    112a0 <quotearg_char_mem>
   11354:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1135f:	nop

0000000000011360 <quotearg_colon>:
   11360:	endbr64 
   11364:	mov    edx,0x3a
   11369:	mov    rsi,0xffffffffffffffff
   11370:	jmp    112a0 <quotearg_char_mem>
   11375:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000011380 <quotearg_colon_mem>:
   11380:	endbr64 
   11384:	mov    edx,0x3a
   11389:	jmp    112a0 <quotearg_char_mem>
   1138e:	xchg   ax,ax

0000000000011390 <quotearg_n_style_colon>:
   11390:	endbr64 
   11394:	sub    rsp,0x48
   11398:	mov    rax,QWORD PTR fs:0x28
   113a1:	mov    QWORD PTR [rsp+0x38],rax
   113a6:	xor    eax,eax
   113a8:	cmp    esi,0xa
   113ab:	je     3efd <quotearg_n_style_colon.cold>
   113b1:	mov    r8,rdx
   113b4:	mov    DWORD PTR [rsp],esi
   113b7:	mov    rcx,rsp
   113ba:	mov    rdx,0xffffffffffffffff
   113c1:	movabs rax,0x400000000000000
   113cb:	mov    rsi,r8
   113ce:	mov    DWORD PTR [rsp+0x4],0x0
   113d6:	mov    QWORD PTR [rsp+0x8],rax
   113db:	mov    QWORD PTR [rsp+0x10],0x0
   113e4:	mov    QWORD PTR [rsp+0x18],0x0
   113ed:	mov    QWORD PTR [rsp+0x20],0x0
   113f6:	mov    QWORD PTR [rsp+0x28],0x0
   113ff:	mov    QWORD PTR [rsp+0x30],0x0
   11408:	call   10ba0 <quotearg_n_options>
   1140d:	mov    rcx,QWORD PTR [rsp+0x38]
   11412:	xor    rcx,QWORD PTR fs:0x28
   1141b:	jne    11422 <quotearg_n_style_colon+0x92>
   1141d:	add    rsp,0x48
   11421:	ret    
   11422:	call   3990 <__stack_chk_fail@plt>
   11427:	nop    WORD PTR [rax+rax*1+0x0]

0000000000011430 <quotearg_n_custom_mem>:
   11430:	endbr64 
   11434:	sub    rsp,0x48
   11438:	movdqa xmm0,XMMWORD PTR [rip+0xd580]        # 1e9c0 <default_quoting_options>
   11440:	movdqa xmm1,XMMWORD PTR [rip+0xd588]        # 1e9d0 <default_quoting_options+0x10>
   11448:	mov    rax,QWORD PTR fs:0x28
   11451:	mov    QWORD PTR [rsp+0x38],rax
   11456:	xor    eax,eax
   11458:	movdqa xmm2,XMMWORD PTR [rip+0xd580]        # 1e9e0 <default_quoting_options+0x20>
   11460:	mov    rax,QWORD PTR [rip+0xd589]        # 1e9f0 <default_quoting_options+0x30>
   11467:	movaps XMMWORD PTR [rsp],xmm0
   1146b:	mov    QWORD PTR [rsp+0x30],rax
   11470:	mov    DWORD PTR [rsp],0xa
   11477:	movaps XMMWORD PTR [rsp+0x10],xmm1
   1147c:	movaps XMMWORD PTR [rsp+0x20],xmm2
   11481:	test   rsi,rsi
   11484:	je     3f02 <quotearg_n_custom_mem.cold>
   1148a:	test   rdx,rdx
   1148d:	je     3f02 <quotearg_n_custom_mem.cold>
   11493:	mov    r9,rcx
   11496:	mov    QWORD PTR [rsp+0x28],rsi
   1149b:	mov    rcx,rsp
   1149e:	mov    QWORD PTR [rsp+0x30],rdx
   114a3:	mov    rsi,r9
   114a6:	mov    rdx,r8
   114a9:	call   10ba0 <quotearg_n_options>
   114ae:	mov    rcx,QWORD PTR [rsp+0x38]
   114b3:	xor    rcx,QWORD PTR fs:0x28
   114bc:	jne    114c3 <quotearg_n_custom_mem+0x93>
   114be:	add    rsp,0x48
   114c2:	ret    
   114c3:	call   3990 <__stack_chk_fail@plt>
   114c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000114d0 <quotearg_n_custom>:
   114d0:	endbr64 
   114d4:	mov    r8,0xffffffffffffffff
   114db:	jmp    11430 <quotearg_n_custom_mem>

00000000000114e0 <quotearg_custom>:
   114e0:	endbr64 
   114e4:	mov    rcx,rdx
   114e7:	mov    r8,0xffffffffffffffff
   114ee:	mov    rdx,rsi
   114f1:	mov    rsi,rdi
   114f4:	xor    edi,edi
   114f6:	jmp    11430 <quotearg_n_custom_mem>
   114fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011500 <quotearg_custom_mem>:
   11500:	endbr64 
   11504:	mov    r8,rcx
   11507:	mov    rcx,rdx
   1150a:	mov    rdx,rsi
   1150d:	mov    rsi,rdi
   11510:	xor    edi,edi
   11512:	jmp    11430 <quotearg_n_custom_mem>
   11517:	nop    WORD PTR [rax+rax*1+0x0]

0000000000011520 <quote_n_mem>:
   11520:	endbr64 
   11524:	lea    rcx,[rip+0xcc15]        # 1e140 <quote_quoting_options>
   1152b:	jmp    10ba0 <quotearg_n_options>

0000000000011530 <quote_mem>:
   11530:	endbr64 
   11534:	mov    rdx,rsi
   11537:	lea    rcx,[rip+0xcc02]        # 1e140 <quote_quoting_options>
   1153e:	mov    rsi,rdi
   11541:	xor    edi,edi
   11543:	jmp    10ba0 <quotearg_n_options>
   11548:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011550 <quote_n>:
   11550:	endbr64 
   11554:	lea    rcx,[rip+0xcbe5]        # 1e140 <quote_quoting_options>
   1155b:	mov    rdx,0xffffffffffffffff
   11562:	jmp    10ba0 <quotearg_n_options>
   11567:	nop    WORD PTR [rax+rax*1+0x0]

0000000000011570 <quote>:
   11570:	endbr64 
   11574:	mov    rsi,rdi
   11577:	lea    rcx,[rip+0xcbc2]        # 1e140 <quote_quoting_options>
   1157e:	mov    rdx,0xffffffffffffffff
   11585:	xor    edi,edi
   11587:	jmp    10ba0 <quotearg_n_options>
   1158c:	nop    DWORD PTR [rax+0x0]

0000000000011590 <randread_error>:
   11590:	endbr64 
   11594:	mov    eax,DWORD PTR [rip+0xcb96]        # 1e130 <exit_failure>
   1159a:	push   r12
   1159c:	push   rbp
   1159d:	push   rbx
   1159e:	test   eax,eax
   115a0:	je     11603 <randread_error+0x73>
   115a2:	mov    ebp,DWORD PTR [rip+0xcb88]        # 1e130 <exit_failure>
   115a8:	call   11570 <quote>
   115ad:	mov    r12,rax
   115b0:	call   3810 <__errno_location@plt>
   115b5:	mov    edx,0x5
   115ba:	mov    rbx,rax
   115bd:	mov    eax,DWORD PTR [rax]
   115bf:	test   eax,eax
   115c1:	je     115f0 <randread_error+0x60>
   115c3:	lea    rsi,[rip+0x64ea]        # 17ab4 <quoting_style_vals+0x54>
   115ca:	xor    edi,edi
   115cc:	call   3960 <dcgettext@plt>
   115d1:	mov    rdx,rax
   115d4:	mov    esi,DWORD PTR [rbx]
   115d6:	mov    rcx,r12
   115d9:	pop    rbx
   115da:	mov    edi,ebp
   115dc:	xor    eax,eax
   115de:	pop    rbp
   115df:	pop    r12
   115e1:	jmp    3ce0 <error@plt>
   115e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   115f0:	lea    rsi,[rip+0x64ad]        # 17aa4 <quoting_style_vals+0x44>
   115f7:	xor    edi,edi
   115f9:	call   3960 <dcgettext@plt>
   115fe:	mov    rdx,rax
   11601:	jmp    115d4 <randread_error+0x44>
   11603:	lea    rcx,[rip+0x64be]        # 17ac8 <__PRETTY_FUNCTION__.5018>
   1160a:	mov    edx,0x6b
   1160f:	lea    rsi,[rip+0x6472]        # 17a88 <quoting_style_vals+0x28>
   11616:	lea    rdi,[rip+0x647a]        # 17a97 <quoting_style_vals+0x37>
   1161d:	call   3a40 <__assert_fail@plt>
   11622:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1162d:	nop    DWORD PTR [rax]

0000000000011630 <randread_free_body>:
   11630:	push   r12
   11632:	mov    rdx,0xffffffffffffffff
   11639:	mov    esi,0x1038
   1163e:	push   rbp
   1163f:	mov    rbp,rdi
   11642:	sub    rsp,0x8
   11646:	mov    r12,QWORD PTR [rdi]
   11649:	call   3d00 <__explicit_bzero_chk@plt>
   1164e:	mov    rdi,rbp
   11651:	call   d750 <rpl_free>
   11656:	test   r12,r12
   11659:	je     11670 <randread_free_body+0x40>
   1165b:	add    rsp,0x8
   1165f:	mov    rdi,r12
   11662:	pop    rbp
   11663:	pop    r12
   11665:	jmp    d110 <rpl_fclose>
   1166a:	nop    WORD PTR [rax+rax*1+0x0]
   11670:	add    rsp,0x8
   11674:	xor    eax,eax
   11676:	pop    rbp
   11677:	pop    r12
   11679:	ret    
   1167a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000011680 <randread_new>:
   11680:	endbr64 
   11684:	push   r15
   11686:	push   r14
   11688:	push   r13
   1168a:	push   r12
   1168c:	push   rbp
   1168d:	push   rbx
   1168e:	sub    rsp,0x8
   11692:	test   rsi,rsi
   11695:	je     117c0 <randread_new+0x140>
   1169b:	mov    rbp,rdi
   1169e:	mov    rbx,rsi
   116a1:	test   rdi,rdi
   116a4:	je     11710 <randread_new+0x90>
   116a6:	lea    rsi,[rip+0x6416]        # 17ac3 <quoting_style_vals+0x63>
   116ad:	call   140d0 <fopen_safer>
   116b2:	mov    r13,rax
   116b5:	test   rax,rax
   116b8:	je     117a1 <randread_new+0x121>
   116be:	mov    edi,0x1038
   116c3:	call   13000 <xmalloc>
   116c8:	cmp    rbx,0x1000
   116cf:	mov    ecx,0x1000
   116d4:	mov    rdi,r13
   116d7:	mov    r12,rax
   116da:	mov    QWORD PTR [rax],r13
   116dd:	lea    rax,[rip+0xfffffffffffffeac]        # 11590 <randread_error>
   116e4:	cmovbe rcx,rbx
   116e8:	mov    QWORD PTR [r12+0x8],rax
   116ed:	lea    rsi,[r12+0x18]
   116f2:	xor    edx,edx
   116f4:	mov    QWORD PTR [r12+0x10],rbp
   116f9:	call   3cb0 <setvbuf@plt>
   116fe:	add    rsp,0x8
   11702:	mov    rax,r12
   11705:	pop    rbx
   11706:	pop    rbp
   11707:	pop    r12
   11709:	pop    r13
   1170b:	pop    r14
   1170d:	pop    r15
   1170f:	ret    
   11710:	mov    edi,0x1038
   11715:	call   13000 <xmalloc>
   1171a:	cmp    rbx,0x800
   11721:	mov    esi,0x800
   11726:	mov    r12,rax
   11729:	cmova  rbx,rsi
   1172d:	mov    QWORD PTR [rax],0x0
   11734:	lea    rax,[rip+0xfffffffffffffe55]        # 11590 <randread_error>
   1173b:	lea    r13,[r12+0x20]
   11740:	mov    QWORD PTR [r12+0x8],rax
   11745:	mov    QWORD PTR [r12+0x10],0x0
   1174e:	add    rbx,r13
   11751:	mov    rbp,r13
   11754:	mov    QWORD PTR [r12+0x18],0x0
   1175d:	cmp    r13,rbx
   11760:	jb     11770 <randread_new+0xf0>
   11762:	jmp    117b0 <randread_new+0x130>
   11764:	nop    DWORD PTR [rax+0x0]
   11768:	add    rbp,rax
   1176b:	cmp    rbx,rbp
   1176e:	jbe    117b0 <randread_new+0x130>
   11770:	mov    rsi,rbx
   11773:	xor    edx,edx
   11775:	mov    rdi,rbp
   11778:	sub    rsi,rbp
   1177b:	call   3e20 <getrandom@plt>
   11780:	test   rax,rax
   11783:	jns    11768 <randread_new+0xe8>
   11785:	call   3810 <__errno_location@plt>
   1178a:	mov    r15d,DWORD PTR [rax]
   1178d:	mov    r14,rax
   11790:	cmp    r15d,0x4
   11794:	je     1176b <randread_new+0xeb>
   11796:	mov    rdi,r12
   11799:	call   11630 <randread_free_body>
   1179e:	mov    DWORD PTR [r14],r15d
   117a1:	xor    r12d,r12d
   117a4:	jmp    116fe <randread_new+0x7e>
   117a9:	nop    DWORD PTR [rax+0x0]
   117b0:	mov    rdi,r13
   117b3:	call   11c70 <isaac_seed>
   117b8:	jmp    116fe <randread_new+0x7e>
   117bd:	nop    DWORD PTR [rax]
   117c0:	mov    edi,0x1038
   117c5:	call   13000 <xmalloc>
   117ca:	mov    QWORD PTR [rax],0x0
   117d1:	mov    r12,rax
   117d4:	lea    rax,[rip+0xfffffffffffffdb5]        # 11590 <randread_error>
   117db:	mov    QWORD PTR [r12+0x8],rax
   117e0:	mov    QWORD PTR [r12+0x10],0x0
   117e9:	jmp    116fe <randread_new+0x7e>
   117ee:	xchg   ax,ax

00000000000117f0 <randread_set_handler>:
   117f0:	endbr64 
   117f4:	mov    QWORD PTR [rdi+0x8],rsi
   117f8:	ret    
   117f9:	nop    DWORD PTR [rax+0x0]

0000000000011800 <randread_set_handler_arg>:
   11800:	endbr64 
   11804:	mov    QWORD PTR [rdi+0x10],rsi
   11808:	ret    
   11809:	nop    DWORD PTR [rax+0x0]

0000000000011810 <randread>:
   11810:	endbr64 
   11814:	push   r15
   11816:	push   r14
   11818:	push   r13
   1181a:	push   r12
   1181c:	mov    r12,rdi
   1181f:	push   rbp
   11820:	mov    rbp,rsi
   11823:	push   rbx
   11824:	mov    rbx,rdx
   11827:	sub    rsp,0x18
   1182b:	mov    r15,QWORD PTR [rdi]
   1182e:	test   r15,r15
   11831:	je     11890 <randread+0x80>
   11833:	call   3810 <__errno_location@plt>
   11838:	xor    r14d,r14d
   1183b:	mov    r13,rax
   1183e:	jmp    1185d <randread+0x4d>
   11840:	mov    rax,QWORD PTR [r12]
   11844:	mov    rdi,QWORD PTR [r12+0x10]
   11849:	test   BYTE PTR [rax],0x20
   1184c:	cmove  edx,r14d
   11850:	mov    DWORD PTR [r13+0x0],edx
   11854:	call   QWORD PTR [r12+0x8]
   11859:	mov    r15,QWORD PTR [r12]
   1185d:	mov    rdx,rbx
   11860:	mov    rdi,rbp
   11863:	mov    rcx,r15
   11866:	mov    esi,0x1
   1186b:	call   3900 <fread_unlocked@plt>
   11870:	mov    edx,DWORD PTR [r13+0x0]
   11874:	add    rbp,rax
   11877:	sub    rbx,rax
   1187a:	jne    11840 <randread+0x30>
   1187c:	add    rsp,0x18
   11880:	pop    rbx
   11881:	pop    rbp
   11882:	pop    r12
   11884:	pop    r13
   11886:	pop    r14
   11888:	pop    r15
   1188a:	ret    
   1188b:	nop    DWORD PTR [rax+rax*1+0x0]
   11890:	mov    rcx,QWORD PTR [rdi+0x18]
   11894:	lea    r14,[rdi+0x20]
   11898:	lea    r13,[rdi+0x838]
   1189f:	mov    r15d,0x800
   118a5:	cmp    rdx,rcx
   118a8:	jbe    119a0 <randread+0x190>
   118ae:	mov    rsi,r15
   118b1:	mov    rdx,rcx
   118b4:	mov    rdi,rbp
   118b7:	mov    QWORD PTR [rsp+0x8],rcx
   118bc:	sub    rsi,rcx
   118bf:	add    rsi,r13
   118c2:	call   3b80 <memcpy@plt>
   118c7:	mov    rcx,QWORD PTR [rsp+0x8]
   118cc:	add    rbp,rcx
   118cf:	sub    rbx,rcx
   118d2:	test   bpl,0x7
   118d6:	je     11900 <randread+0xf0>
   118d8:	mov    rsi,r13
   118db:	mov    rdi,r14
   118de:	call   119c0 <isaac_refill>
   118e3:	mov    ecx,0x800
   118e8:	cmp    rbx,0x800
   118ef:	ja     118ae <randread+0x9e>
   118f1:	mov    r15,rbx
   118f4:	jmp    1194c <randread+0x13c>
   118f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11900:	mov    r15,rbx
   11903:	lea    rax,[rbp+rbx*1+0x0]
   11908:	mov    QWORD PTR [rsp+0x8],rax
   1190d:	and    r15d,0x7ff
   11914:	jmp    11934 <randread+0x124>
   11916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11920:	mov    rsi,rbp
   11923:	mov    rdi,r14
   11926:	call   119c0 <isaac_refill>
   1192b:	sub    rbx,0x800
   11932:	je     11980 <randread+0x170>
   11934:	mov    rbp,QWORD PTR [rsp+0x8]
   11939:	sub    rbp,rbx
   1193c:	cmp    rbx,r15
   1193f:	jne    11920 <randread+0x110>
   11941:	mov    rsi,r13
   11944:	mov    rdi,r14
   11947:	call   119c0 <isaac_refill>
   1194c:	mov    ecx,0x800
   11951:	mov    rdx,r15
   11954:	mov    rsi,r13
   11957:	mov    rdi,rbp
   1195a:	mov    QWORD PTR [rsp+0x8],rcx
   1195f:	call   3b80 <memcpy@plt>
   11964:	mov    rcx,QWORD PTR [rsp+0x8]
   11969:	sub    rcx,r15
   1196c:	mov    QWORD PTR [r12+0x18],rcx
   11971:	jmp    1187c <randread+0x6c>
   11976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11980:	mov    QWORD PTR [r12+0x18],0x0
   11989:	add    rsp,0x18
   1198d:	pop    rbx
   1198e:	pop    rbp
   1198f:	pop    r12
   11991:	pop    r13
   11993:	pop    r14
   11995:	pop    r15
   11997:	ret    
   11998:	nop    DWORD PTR [rax+rax*1+0x0]
   119a0:	sub    r13,rcx
   119a3:	mov    r15,rdx
   119a6:	add    r13,0x800
   119ad:	jmp    11951 <randread+0x141>
   119af:	nop

00000000000119b0 <randread_free>:
   119b0:	endbr64 
   119b4:	jmp    11630 <randread_free_body>
   119b9:	nop    DWORD PTR [rax+0x0]

00000000000119c0 <isaac_refill>:
   119c0:	endbr64 
   119c4:	mov    rax,QWORD PTR [rdi+0x810]
   119cb:	mov    r11,QWORD PTR [rdi+0x808]
   119d2:	push   rbx
   119d3:	lea    r10,[rdi+0x400]
   119da:	mov    rdx,QWORD PTR [rdi+0x800]
   119e1:	mov    r9,rsi
   119e4:	lea    r8,[rax+0x1]
   119e8:	mov    rax,rdi
   119eb:	mov    QWORD PTR [rdi+0x810],r8
   119f2:	add    r11,r8
   119f5:	nop    DWORD PTR [rax]
   119f8:	mov    rcx,rdx
   119fb:	shl    rcx,0x15
   119ff:	xor    rdx,rcx
   11a02:	mov    rcx,QWORD PTR [rax]
   11a05:	not    rdx
   11a08:	add    rdx,QWORD PTR [rax+0x400]
   11a0f:	mov    r8,rcx
   11a12:	and    r8d,0x7f8
   11a19:	mov    rbx,QWORD PTR [rdi+r8*1]
   11a1d:	add    rbx,rdx
   11a20:	mov    r8,rbx
   11a23:	add    r8,r11
   11a26:	mov    r11,rdx
   11a29:	mov    QWORD PTR [rax],r8
   11a2c:	shr    r8,0x8
   11a30:	shr    r11,0x5
   11a34:	and    r8d,0x7f8
   11a3b:	xor    rdx,r11
   11a3e:	mov    rbx,QWORD PTR [rdi+r8*1]
   11a42:	add    rbx,rcx
   11a45:	mov    QWORD PTR [r9],rbx
   11a48:	mov    r8,QWORD PTR [rax+0x8]
   11a4c:	add    rdx,QWORD PTR [rax+0x408]
   11a53:	mov    r11,rdx
   11a56:	mov    rdx,r8
   11a59:	and    edx,0x7f8
   11a5f:	mov    rcx,QWORD PTR [rdi+rdx*1]
   11a63:	mov    rdx,r11
   11a66:	shl    rdx,0xc
   11a6a:	add    rcx,r11
   11a6d:	xor    rdx,r11
   11a70:	add    rcx,rbx
   11a73:	mov    QWORD PTR [rax+0x8],rcx
   11a77:	shr    rcx,0x8
   11a7b:	and    ecx,0x7f8
   11a81:	mov    rbx,QWORD PTR [rdi+rcx*1]
   11a85:	add    rbx,r8
   11a88:	mov    QWORD PTR [r9+0x8],rbx
   11a8c:	mov    rcx,QWORD PTR [rax+0x10]
   11a90:	add    rdx,QWORD PTR [rax+0x410]
   11a97:	mov    r8,rcx
   11a9a:	and    r8d,0x7f8
   11aa1:	mov    r11,QWORD PTR [rdi+r8*1]
   11aa5:	add    r11,rdx
   11aa8:	mov    r8,r11
   11aab:	add    r8,rbx
   11aae:	mov    QWORD PTR [rax+0x10],r8
   11ab2:	shr    r8,0x8
   11ab6:	and    r8d,0x7f8
   11abd:	add    rcx,QWORD PTR [rdi+r8*1]
   11ac1:	mov    QWORD PTR [r9+0x10],rcx
   11ac5:	mov    r11,rcx
   11ac8:	mov    r8,QWORD PTR [rax+0x18]
   11acc:	mov    rcx,rdx
   11acf:	shr    rcx,0x21
   11ad3:	xor    rdx,rcx
   11ad6:	mov    rcx,r8
   11ad9:	add    rdx,QWORD PTR [rax+0x418]
   11ae0:	and    ecx,0x7f8
   11ae6:	mov    rbx,QWORD PTR [rdi+rcx*1]
   11aea:	add    rbx,rdx
   11aed:	mov    rcx,rbx
   11af0:	add    rcx,r11
   11af3:	add    rax,0x20
   11af7:	add    r9,0x20
   11afb:	mov    QWORD PTR [rax-0x8],rcx
   11aff:	shr    rcx,0x8
   11b03:	and    ecx,0x7f8
   11b09:	mov    r11,QWORD PTR [rdi+rcx*1]
   11b0d:	add    r11,r8
   11b10:	mov    QWORD PTR [r9-0x8],r11
   11b14:	cmp    rax,r10
   11b17:	jne    119f8 <isaac_refill+0x38>
   11b1d:	add    rsi,0x400
   11b24:	lea    r9,[rdi+0x800]
   11b2b:	nop    DWORD PTR [rax+rax*1+0x0]
   11b30:	mov    rcx,rdx
   11b33:	shl    rcx,0x15
   11b37:	xor    rdx,rcx
   11b3a:	mov    rcx,QWORD PTR [rax]
   11b3d:	not    rdx
   11b40:	add    rdx,QWORD PTR [rax-0x400]
   11b47:	mov    r8,rcx
   11b4a:	mov    r10,rdx
   11b4d:	and    r8d,0x7f8
   11b54:	shr    r10,0x5
   11b58:	mov    rbx,QWORD PTR [rdi+r8*1]
   11b5c:	add    rbx,rdx
   11b5f:	xor    rdx,r10
   11b62:	mov    r8,rbx
   11b65:	add    r8,r11
   11b68:	mov    QWORD PTR [rax],r8
   11b6b:	shr    r8,0x8
   11b6f:	and    r8d,0x7f8
   11b76:	add    rcx,QWORD PTR [rdi+r8*1]
   11b7a:	mov    QWORD PTR [rsi],rcx
   11b7d:	mov    r8,QWORD PTR [rax+0x8]
   11b81:	mov    r11,rcx
   11b84:	add    rdx,QWORD PTR [rax-0x3f8]
   11b8b:	mov    r10,rdx
   11b8e:	mov    rdx,r8
   11b91:	and    edx,0x7f8
   11b97:	mov    rcx,QWORD PTR [rdi+rdx*1]
   11b9b:	mov    rdx,r10
   11b9e:	shl    rdx,0xc
   11ba2:	add    rcx,r10
   11ba5:	xor    rdx,r10
   11ba8:	add    rcx,r11
   11bab:	mov    QWORD PTR [rax+0x8],rcx
   11baf:	shr    rcx,0x8
   11bb3:	and    ecx,0x7f8
   11bb9:	mov    r11,QWORD PTR [rdi+rcx*1]
   11bbd:	add    r11,r8
   11bc0:	mov    QWORD PTR [rsi+0x8],r11
   11bc4:	mov    rcx,QWORD PTR [rax+0x10]
   11bc8:	add    rdx,QWORD PTR [rax-0x3f0]
   11bcf:	mov    r8,rcx
   11bd2:	and    r8d,0x7f8
   11bd9:	mov    rbx,QWORD PTR [rdi+r8*1]
   11bdd:	add    rbx,rdx
   11be0:	mov    r8,rbx
   11be3:	add    r8,r11
   11be6:	mov    QWORD PTR [rax+0x10],r8
   11bea:	shr    r8,0x8
   11bee:	and    r8d,0x7f8
   11bf5:	add    rcx,QWORD PTR [rdi+r8*1]
   11bf9:	mov    QWORD PTR [rsi+0x10],rcx
   11bfd:	mov    r10,rcx
   11c00:	mov    r8,QWORD PTR [rax+0x18]
   11c04:	mov    rcx,rdx
   11c07:	shr    rcx,0x21
   11c0b:	xor    rdx,rcx
   11c0e:	mov    rcx,r8
   11c11:	add    rdx,QWORD PTR [rax-0x3e8]
   11c18:	and    ecx,0x7f8
   11c1e:	mov    rbx,QWORD PTR [rdi+rcx*1]
   11c22:	add    rbx,rdx
   11c25:	mov    rcx,rbx
   11c28:	add    rcx,r10
   11c2b:	add    rax,0x20
   11c2f:	add    rsi,0x20
   11c33:	mov    QWORD PTR [rax-0x8],rcx
   11c37:	shr    rcx,0x8
   11c3b:	and    ecx,0x7f8
   11c41:	mov    r11,QWORD PTR [rdi+rcx*1]
   11c45:	add    r11,r8
   11c48:	mov    QWORD PTR [rsi-0x8],r11
   11c4c:	cmp    rax,r9
   11c4f:	jne    11b30 <isaac_refill+0x170>
   11c55:	mov    QWORD PTR [rdi+0x800],rdx
   11c5c:	pop    rbx
   11c5d:	mov    QWORD PTR [rdi+0x808],r11
   11c64:	ret    
   11c65:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000011c70 <isaac_seed>:
   11c70:	endbr64 
   11c74:	push   r13
   11c76:	mov    rdx,rdi
   11c79:	mov    rax,rdi
   11c7c:	movabs rcx,0x98f5704f6c44c0ab
   11c86:	movabs rsi,0x82f053db8355e0ce
   11c90:	push   r12
   11c92:	movabs r11,0xb29b2e824a595524
   11c9c:	movabs r12,0xae985bf2cbfc89ed
   11ca6:	movabs r10,0x8c0ea5053d4712a0
   11cb0:	push   rbp
   11cb1:	mov    rbp,rdi
   11cb4:	movabs r9,0xb9f8b322c73ac862
   11cbe:	movabs r8,0x647c4677a2884b7c
   11cc8:	push   rbx
   11cc9:	lea    rbx,[rdi+0x800]
   11cd0:	movabs rdi,0x48fe4a0fa5a09315
   11cda:	nop    WORD PTR [rax+rax*1+0x0]
   11ce0:	mov    r13,QWORD PTR [rax]
   11ce3:	add    rsi,QWORD PTR [rax+0x20]
   11ce7:	add    rcx,QWORD PTR [rax+0x38]
   11ceb:	add    rdi,QWORD PTR [rax+0x28]
   11cef:	sub    r13,rsi
   11cf2:	add    r12,QWORD PTR [rax+0x30]
   11cf6:	add    r8,r13
   11cf9:	mov    r13,rcx
   11cfc:	shr    r13,0x9
   11d00:	add    rcx,r8
   11d03:	xor    rdi,r13
   11d06:	mov    r13,QWORD PTR [rax+0x8]
   11d0a:	sub    r13,rdi
   11d0d:	add    r9,r13
   11d10:	mov    r13,r8
   11d13:	shl    r13,0x9
   11d17:	add    r8,r9
   11d1a:	xor    r12,r13
   11d1d:	mov    r13,QWORD PTR [rax+0x10]
   11d21:	sub    r13,r12
   11d24:	add    r10,r13
   11d27:	mov    r13,r9
   11d2a:	shr    r13,0x17
   11d2e:	add    r9,r10
   11d31:	xor    rcx,r13
   11d34:	mov    r13,QWORD PTR [rax+0x18]
   11d38:	sub    r13,rcx
   11d3b:	add    r11,r13
   11d3e:	mov    r13,r10
   11d41:	shl    r13,0xf
   11d45:	add    r10,r11
   11d48:	xor    r8,r13
   11d4b:	mov    r13,r11
   11d4e:	sub    rsi,r8
   11d51:	shr    r13,0xe
   11d55:	mov    QWORD PTR [rax],r8
   11d58:	xor    r9,r13
   11d5b:	mov    r13,rsi
   11d5e:	add    r11,rsi
   11d61:	sub    rdi,r9
   11d64:	shl    r13,0x14
   11d68:	mov    QWORD PTR [rax+0x8],r9
   11d6c:	xor    r10,r13
   11d6f:	lea    r13,[rsi+rdi*1]
   11d73:	mov    rsi,rdi
   11d76:	sub    r12,r10
   11d79:	shr    rsi,0x11
   11d7d:	mov    QWORD PTR [rax+0x10],r10
   11d81:	add    rax,0x40
   11d85:	xor    r11,rsi
   11d88:	mov    rsi,r12
   11d8b:	add    rdi,r12
   11d8e:	sub    rcx,r11
   11d91:	shl    rsi,0xe
   11d95:	mov    QWORD PTR [rax-0x28],r11
   11d99:	xor    rsi,r13
   11d9c:	add    r12,rcx
   11d9f:	mov    QWORD PTR [rax-0x18],rdi
   11da3:	mov    QWORD PTR [rax-0x20],rsi
   11da7:	mov    QWORD PTR [rax-0x10],r12
   11dab:	mov    QWORD PTR [rax-0x8],rcx
   11daf:	cmp    rbx,rax
   11db2:	jne    11ce0 <isaac_seed+0x70>
   11db8:	nop    DWORD PTR [rax+rax*1+0x0]
   11dc0:	mov    rax,QWORD PTR [rdx]
   11dc3:	add    rsi,QWORD PTR [rdx+0x20]
   11dc7:	add    rcx,QWORD PTR [rdx+0x38]
   11dcb:	add    rdi,QWORD PTR [rdx+0x28]
   11dcf:	sub    rax,rsi
   11dd2:	add    r12,QWORD PTR [rdx+0x30]
   11dd6:	add    r8,rax
   11dd9:	mov    rax,rcx
   11ddc:	shr    rax,0x9
   11de0:	add    rcx,r8
   11de3:	xor    rdi,rax
   11de6:	mov    rax,QWORD PTR [rdx+0x8]
   11dea:	sub    rax,rdi
   11ded:	add    r9,rax
   11df0:	mov    rax,r8
   11df3:	shl    rax,0x9
   11df7:	add    r8,r9
   11dfa:	xor    r12,rax
   11dfd:	mov    rax,QWORD PTR [rdx+0x10]
   11e01:	sub    rax,r12
   11e04:	add    r10,rax
   11e07:	mov    rax,r9
   11e0a:	shr    rax,0x17
   11e0e:	add    r9,r10
   11e11:	xor    rcx,rax
   11e14:	mov    rax,QWORD PTR [rdx+0x18]
   11e18:	sub    rax,rcx
   11e1b:	add    r11,rax
   11e1e:	mov    rax,r10
   11e21:	shl    rax,0xf
   11e25:	add    r10,r11
   11e28:	xor    r8,rax
   11e2b:	mov    rax,r11
   11e2e:	sub    rsi,r8
   11e31:	shr    rax,0xe
   11e35:	mov    QWORD PTR [rdx],r8
   11e38:	xor    r9,rax
   11e3b:	mov    rax,rsi
   11e3e:	add    r11,rsi
   11e41:	sub    rdi,r9
   11e44:	shl    rax,0x14
   11e48:	mov    QWORD PTR [rdx+0x8],r9
   11e4c:	xor    r10,rax
   11e4f:	lea    rax,[rsi+rdi*1]
   11e53:	mov    rsi,rdi
   11e56:	sub    r12,r10
   11e59:	shr    rsi,0x11
   11e5d:	mov    QWORD PTR [rdx+0x10],r10
   11e61:	add    rdx,0x40
   11e65:	xor    r11,rsi
   11e68:	mov    rsi,r12
   11e6b:	add    rdi,r12
   11e6e:	sub    rcx,r11
   11e71:	shl    rsi,0xe
   11e75:	mov    QWORD PTR [rdx-0x28],r11
   11e79:	xor    rsi,rax
   11e7c:	add    r12,rcx
   11e7f:	mov    QWORD PTR [rdx-0x18],rdi
   11e83:	mov    QWORD PTR [rdx-0x20],rsi
   11e87:	mov    QWORD PTR [rdx-0x10],r12
   11e8b:	mov    QWORD PTR [rdx-0x8],rcx
   11e8f:	cmp    rbx,rdx
   11e92:	jne    11dc0 <isaac_seed+0x150>
   11e98:	mov    QWORD PTR [rbp+0x810],0x0
   11ea3:	pop    rbx
   11ea4:	mov    QWORD PTR [rbp+0x808],0x0
   11eaf:	mov    QWORD PTR [rbp+0x800],0x0
   11eba:	pop    rbp
   11ebb:	pop    r12
   11ebd:	pop    r13
   11ebf:	ret    

0000000000011ec0 <save_token>:
   11ec0:	push   r12
   11ec2:	push   rbp
   11ec3:	push   rbx
   11ec4:	mov    rdx,QWORD PTR [rdi+0x30]
   11ec8:	mov    rbx,rdi
   11ecb:	mov    r12,QWORD PTR [rdi+0x28]
   11ecf:	mov    rbp,rdx
   11ed2:	sub    rbp,r12
   11ed5:	sub    rbp,0x1
   11ed9:	cmp    rdx,r12
   11edc:	je     11fa0 <save_token+0xe0>
   11ee2:	mov    rcx,QWORD PTR [rbx+0x48]
   11ee6:	lea    rax,[rdx+rcx*1]
   11eea:	not    rcx
   11eed:	mov    rdx,QWORD PTR [rbx+0x38]
   11ef1:	and    rax,rcx
   11ef4:	mov    rcx,QWORD PTR [rbx+0x20]
   11ef8:	mov    rsi,rax
   11efb:	mov    rdi,rdx
   11efe:	mov    QWORD PTR [rbx+0x30],rax
   11f02:	sub    rsi,rcx
   11f05:	sub    rdi,rcx
   11f08:	cmp    rsi,rdi
   11f0b:	jbe    11f14 <save_token+0x54>
   11f0d:	mov    QWORD PTR [rbx+0x30],rdx
   11f11:	mov    rax,rdx
   11f14:	mov    QWORD PTR [rbx+0x28],rax
   11f18:	mov    rdx,QWORD PTR [rbx+0x88]
   11f1f:	mov    rax,QWORD PTR [rbx+0x90]
   11f26:	sub    rax,rdx
   11f29:	cmp    rax,0x7
   11f2d:	jbe    11f68 <save_token+0xa8>
   11f2f:	mov    QWORD PTR [rdx],r12
   11f32:	mov    rdx,QWORD PTR [rbx+0xe0]
   11f39:	mov    rax,QWORD PTR [rbx+0xe8]
   11f40:	add    QWORD PTR [rbx+0x88],0x8
   11f48:	sub    rax,rdx
   11f4b:	cmp    rax,0x7
   11f4f:	jbe    11f80 <save_token+0xc0>
   11f51:	mov    QWORD PTR [rdx],rbp
   11f54:	add    QWORD PTR [rbx+0xe0],0x8
   11f5c:	add    QWORD PTR [rbx],0x1
   11f60:	pop    rbx
   11f61:	pop    rbp
   11f62:	pop    r12
   11f64:	ret    
   11f65:	nop    DWORD PTR [rax]
   11f68:	lea    rdi,[rbx+0x70]
   11f6c:	mov    esi,0x8
   11f71:	call   14680 <_obstack_newchunk>
   11f76:	mov    rdx,QWORD PTR [rbx+0x88]
   11f7d:	jmp    11f2f <save_token+0x6f>
   11f7f:	nop
   11f80:	lea    rdi,[rbx+0xc8]
   11f87:	mov    esi,0x8
   11f8c:	call   14680 <_obstack_newchunk>
   11f91:	mov    rdx,QWORD PTR [rbx+0xe0]
   11f98:	jmp    11f51 <save_token+0x91>
   11f9a:	nop    WORD PTR [rax+rax*1+0x0]
   11fa0:	or     BYTE PTR [rdi+0x68],0x2
   11fa4:	jmp    11ee2 <save_token+0x22>
   11fa9:	nop    DWORD PTR [rax+0x0]

0000000000011fb0 <readtokens0_init>:
   11fb0:	endbr64 
   11fb4:	push   r12
   11fb6:	mov    r12,QWORD PTR [rip+0xc02b]        # 1dfe8 <malloc@GLIBC_2.2.5>
   11fbd:	xor    edx,edx
   11fbf:	xor    esi,esi
   11fc1:	push   rbp
   11fc2:	lea    rbp,[rip+0xffffffffffffb787]        # d750 <rpl_free>
   11fc9:	push   rbx
   11fca:	mov    rcx,r12
   11fcd:	mov    rbx,rdi
   11fd0:	lea    rdi,[rdi+0x18]
   11fd4:	mov    QWORD PTR [rdi-0x18],0x0
   11fdc:	mov    r8,rbp
   11fdf:	mov    QWORD PTR [rdi-0x10],0x0
   11fe7:	mov    QWORD PTR [rdi-0x8],0x0
   11fef:	call   14640 <_obstack_begin>
   11ff4:	lea    rdi,[rbx+0x70]
   11ff8:	mov    r8,rbp
   11ffb:	mov    rcx,r12
   11ffe:	xor    edx,edx
   12000:	xor    esi,esi
   12002:	call   14640 <_obstack_begin>
   12007:	lea    rdi,[rbx+0xc8]
   1200e:	mov    r8,rbp
   12011:	pop    rbx
   12012:	mov    rcx,r12
   12015:	pop    rbp
   12016:	xor    edx,edx
   12018:	xor    esi,esi
   1201a:	pop    r12
   1201c:	jmp    14640 <_obstack_begin>
   12021:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1202c:	nop    DWORD PTR [rax+0x0]

0000000000012030 <readtokens0_free>:
   12030:	endbr64 
   12034:	push   rbx
   12035:	xor    esi,esi
   12037:	mov    rbx,rdi
   1203a:	lea    rdi,[rdi+0x18]
   1203e:	call   147b0 <_obstack_free>
   12043:	lea    rdi,[rbx+0x70]
   12047:	xor    esi,esi
   12049:	call   147b0 <_obstack_free>
   1204e:	lea    rdi,[rbx+0xc8]
   12055:	xor    esi,esi
   12057:	pop    rbx
   12058:	jmp    147b0 <_obstack_free>
   1205d:	nop    DWORD PTR [rax]

0000000000012060 <readtokens0>:
   12060:	endbr64 
   12064:	push   r13
   12066:	lea    r13,[rsi+0x18]
   1206a:	push   r12
   1206c:	mov    r12,rdi
   1206f:	push   rbp
   12070:	mov    rbp,rsi
   12073:	push   rbx
   12074:	sub    rsp,0x8
   12078:	jmp    1208e <readtokens0+0x2e>
   1207a:	nop    WORD PTR [rax+rax*1+0x0]
   12080:	lea    rdx,[rax+0x1]
   12084:	mov    QWORD PTR [rbp+0x30],rdx
   12088:	mov    BYTE PTR [rax],bl
   1208a:	test   ebx,ebx
   1208c:	je     120d0 <readtokens0+0x70>
   1208e:	mov    rdi,r12
   12091:	call   3a70 <fgetc@plt>
   12096:	mov    ebx,eax
   12098:	mov    rax,QWORD PTR [rbp+0x30]
   1209c:	cmp    ebx,0xffffffff
   1209f:	je     120e0 <readtokens0+0x80>
   120a1:	cmp    QWORD PTR [rbp+0x38],rax
   120a5:	jne    12080 <readtokens0+0x20>
   120a7:	mov    esi,0x1
   120ac:	mov    rdi,r13
   120af:	call   14680 <_obstack_newchunk>
   120b4:	mov    rax,QWORD PTR [rbp+0x30]
   120b8:	lea    rdx,[rax+0x1]
   120bc:	mov    QWORD PTR [rbp+0x30],rdx
   120c0:	mov    BYTE PTR [rax],bl
   120c2:	test   ebx,ebx
   120c4:	jne    1208e <readtokens0+0x2e>
   120c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   120d0:	mov    rdi,rbp
   120d3:	call   11ec0 <save_token>
   120d8:	jmp    1208e <readtokens0+0x2e>
   120da:	nop    WORD PTR [rax+rax*1+0x0]
   120e0:	cmp    rax,QWORD PTR [rbp+0x28]
   120e4:	je     12103 <readtokens0+0xa3>
   120e6:	cmp    rax,QWORD PTR [rbp+0x38]
   120ea:	je     1224c <readtokens0+0x1ec>
   120f0:	lea    rdx,[rax+0x1]
   120f4:	mov    rdi,rbp
   120f7:	mov    QWORD PTR [rbp+0x30],rdx
   120fb:	mov    BYTE PTR [rax],0x0
   120fe:	call   11ec0 <save_token>
   12103:	mov    rdx,QWORD PTR [rbp+0x88]
   1210a:	mov    rax,QWORD PTR [rbp+0x90]
   12111:	sub    rax,rdx
   12114:	cmp    rax,0x7
   12118:	jbe    12210 <readtokens0+0x1b0>
   1211e:	mov    QWORD PTR [rdx],0x0
   12125:	mov    rax,QWORD PTR [rbp+0x88]
   1212c:	mov    rsi,QWORD PTR [rbp+0x80]
   12133:	lea    rdx,[rax+0x8]
   12137:	cmp    rdx,rsi
   1213a:	je     12240 <readtokens0+0x1e0>
   12140:	mov    rcx,QWORD PTR [rbp+0xa0]
   12147:	lea    rax,[rdx+rcx*1]
   1214b:	not    rcx
   1214e:	mov    rdx,QWORD PTR [rbp+0x78]
   12152:	and    rax,rcx
   12155:	mov    rcx,QWORD PTR [rbp+0x90]
   1215c:	mov    rdi,rax
   1215f:	mov    QWORD PTR [rbp+0x88],rax
   12166:	mov    rbx,rcx
   12169:	sub    rdi,rdx
   1216c:	sub    rbx,rdx
   1216f:	cmp    rdi,rbx
   12172:	ja     12200 <readtokens0+0x1a0>
   12178:	mov    QWORD PTR [rbp+0x8],rsi
   1217c:	mov    rdx,QWORD PTR [rbp+0xe0]
   12183:	mov    rsi,QWORD PTR [rbp+0xd8]
   1218a:	mov    QWORD PTR [rbp+0x80],rax
   12191:	cmp    rdx,rsi
   12194:	je     12230 <readtokens0+0x1d0>
   1219a:	mov    rcx,QWORD PTR [rbp+0xf8]
   121a1:	lea    rax,[rdx+rcx*1]
   121a5:	not    rcx
   121a8:	mov    rdx,QWORD PTR [rbp+0xd0]
   121af:	and    rax,rcx
   121b2:	mov    rcx,QWORD PTR [rbp+0xe8]
   121b9:	mov    rdi,rax
   121bc:	mov    QWORD PTR [rbp+0xe0],rax
   121c3:	mov    rbx,rcx
   121c6:	sub    rdi,rdx
   121c9:	sub    rbx,rdx
   121cc:	cmp    rdi,rbx
   121cf:	jbe    121db <readtokens0+0x17b>
   121d1:	mov    QWORD PTR [rbp+0xe0],rcx
   121d8:	mov    rax,rcx
   121db:	mov    QWORD PTR [rbp+0xd8],rax
   121e2:	mov    rdi,r12
   121e5:	mov    QWORD PTR [rbp+0x10],rsi
   121e9:	call   3870 <ferror@plt>
   121ee:	test   eax,eax
   121f0:	sete   al
   121f3:	add    rsp,0x8
   121f7:	pop    rbx
   121f8:	pop    rbp
   121f9:	pop    r12
   121fb:	pop    r13
   121fd:	ret    
   121fe:	xchg   ax,ax
   12200:	mov    QWORD PTR [rbp+0x88],rcx
   12207:	mov    rax,rcx
   1220a:	jmp    12178 <readtokens0+0x118>
   1220f:	nop
   12210:	lea    rdi,[rbp+0x70]
   12214:	mov    esi,0x8
   12219:	call   14680 <_obstack_newchunk>
   1221e:	mov    rdx,QWORD PTR [rbp+0x88]
   12225:	jmp    1211e <readtokens0+0xbe>
   1222a:	nop    WORD PTR [rax+rax*1+0x0]
   12230:	or     BYTE PTR [rbp+0x118],0x2
   12237:	jmp    1219a <readtokens0+0x13a>
   1223c:	nop    DWORD PTR [rax+0x0]
   12240:	or     BYTE PTR [rbp+0xc0],0x2
   12247:	jmp    12140 <readtokens0+0xe0>
   1224c:	lea    rdi,[rbp+0x18]
   12250:	mov    esi,0x1
   12255:	call   14680 <_obstack_newchunk>
   1225a:	mov    rax,QWORD PTR [rbp+0x30]
   1225e:	jmp    120f0 <readtokens0+0x90>
   12263:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1226d:	nop    DWORD PTR [rax]

0000000000012270 <setlocale_null_r>:
   12270:	endbr64 
   12274:	push   r13
   12276:	push   r12
   12278:	mov    r12,rsi
   1227b:	xor    esi,esi
   1227d:	push   rbp
   1227e:	push   rbx
   1227f:	mov    rbx,rdx
   12282:	sub    rsp,0x8
   12286:	call   3c90 <setlocale@plt>
   1228b:	test   rax,rax
   1228e:	je     12308 <setlocale_null_r+0x98>
   12290:	mov    rdi,rax
   12293:	mov    rbp,rax
   12296:	call   3980 <strlen@plt>
   1229b:	cmp    rbx,rax
   1229e:	ja     122c0 <setlocale_null_r+0x50>
   122a0:	mov    r13d,0x22
   122a6:	test   rbx,rbx
   122a9:	jne    122e0 <setlocale_null_r+0x70>
   122ab:	add    rsp,0x8
   122af:	mov    eax,r13d
   122b2:	pop    rbx
   122b3:	pop    rbp
   122b4:	pop    r12
   122b6:	pop    r13
   122b8:	ret    
   122b9:	nop    DWORD PTR [rax+0x0]
   122c0:	mov    rsi,rbp
   122c3:	mov    rdi,r12
   122c6:	lea    rdx,[rax+0x1]
   122ca:	xor    r13d,r13d
   122cd:	call   3b80 <memcpy@plt>
   122d2:	add    rsp,0x8
   122d6:	mov    eax,r13d
   122d9:	pop    rbx
   122da:	pop    rbp
   122db:	pop    r12
   122dd:	pop    r13
   122df:	ret    
   122e0:	lea    rdx,[rbx-0x1]
   122e4:	mov    rsi,rbp
   122e7:	mov    rdi,r12
   122ea:	call   3b80 <memcpy@plt>
   122ef:	mov    BYTE PTR [r12+rbx*1-0x1],0x0
   122f5:	add    rsp,0x8
   122f9:	mov    eax,r13d
   122fc:	pop    rbx
   122fd:	pop    rbp
   122fe:	pop    r12
   12300:	pop    r13
   12302:	ret    
   12303:	nop    DWORD PTR [rax+rax*1+0x0]
   12308:	mov    r13d,0x16
   1230e:	test   rbx,rbx
   12311:	je     122ab <setlocale_null_r+0x3b>
   12313:	mov    BYTE PTR [r12],0x0
   12318:	jmp    122ab <setlocale_null_r+0x3b>
   1231a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000012320 <setlocale_null>:
   12320:	endbr64 
   12324:	xor    esi,esi
   12326:	jmp    3c90 <setlocale@plt>
   1232b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000012330 <mkstemp_safer>:
   12330:	endbr64 
   12334:	sub    rsp,0x8
   12338:	call   3c40 <mkstemp@plt>
   1233d:	add    rsp,0x8
   12341:	mov    edi,eax
   12343:	jmp    12900 <fd_safer>
   12348:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000012350 <mkostemp_safer>:
   12350:	endbr64 
   12354:	push   rbp
   12355:	mov    ebp,esi
   12357:	call   3a20 <mkostemp@plt>
   1235c:	mov    esi,ebp
   1235e:	pop    rbp
   1235f:	mov    edi,eax
   12361:	jmp    14050 <fd_safer_flag>
   12366:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000012370 <strnumcmp>:
   12370:	endbr64 
   12374:	movzx  r9d,BYTE PTR [rdi]
   12378:	movzx  r8d,BYTE PTR [rsi]
   1237c:	cmp    r9b,0x2d
   12380:	je     123c0 <strnumcmp+0x50>
   12382:	cmp    r8b,0x2d
   12386:	jne    12439 <strnumcmp+0xc9>
   1238c:	nop    DWORD PTR [rax+0x0]
   12390:	movzx  eax,BYTE PTR [rsi+0x1]
   12394:	add    rsi,0x1
   12398:	cmp    al,0x30
   1239a:	je     12390 <strnumcmp+0x20>
   1239c:	cmp    ecx,eax
   1239e:	je     12390 <strnumcmp+0x20>
   123a0:	cmp    edx,eax
   123a2:	je     12558 <strnumcmp+0x1e8>
   123a8:	lea    esi,[rax-0x30]
   123ab:	mov    eax,0x1
   123b0:	cmp    esi,0x9
   123b3:	ja     12589 <strnumcmp+0x219>
   123b9:	ret    
   123ba:	nop    WORD PTR [rax+rax*1+0x0]
   123c0:	movzx  eax,BYTE PTR [rdi+0x1]
   123c4:	add    rdi,0x1
   123c8:	cmp    al,0x30
   123ca:	je     123c0 <strnumcmp+0x50>
   123cc:	movzx  r10d,al
   123d0:	cmp    ecx,r10d
   123d3:	je     123c0 <strnumcmp+0x50>
   123d5:	cmp    r8b,0x2d
   123d9:	je     124c8 <strnumcmp+0x158>
   123df:	cmp    edx,r10d
   123e2:	je     12540 <strnumcmp+0x1d0>
   123e8:	sub    r10d,0x30
   123ec:	cmp    r10d,0x9
   123f0:	ja     12409 <strnumcmp+0x99>
   123f2:	jmp    128d8 <strnumcmp+0x568>
   123f7:	nop    WORD PTR [rax+rax*1+0x0]
   12400:	movzx  r8d,BYTE PTR [rsi+0x1]
   12405:	add    rsi,0x1
   12409:	cmp    r8b,0x30
   1240d:	je     12400 <strnumcmp+0x90>
   1240f:	movzx  r10d,r8b
   12413:	cmp    ecx,r10d
   12416:	je     12400 <strnumcmp+0x90>
   12418:	cmp    edx,r10d
   1241b:	je     125b0 <strnumcmp+0x240>
   12421:	sub    r10d,0x30
   12425:	cmp    r10d,0xa
   12429:	sbb    eax,eax
   1242b:	ret    
   1242c:	nop    DWORD PTR [rax+0x0]
   12430:	movzx  r9d,BYTE PTR [rdi+0x1]
   12435:	add    rdi,0x1
   12439:	cmp    r9b,0x30
   1243d:	je     12430 <strnumcmp+0xc0>
   1243f:	movzx  eax,r9b
   12443:	cmp    ecx,eax
   12445:	je     12430 <strnumcmp+0xc0>
   12447:	cmp    r8b,0x30
   1244b:	jne    1245f <strnumcmp+0xef>
   1244d:	nop    DWORD PTR [rax]
   12450:	movzx  r8d,BYTE PTR [rsi+0x1]
   12455:	add    rsi,0x1
   12459:	cmp    r8b,0x30
   1245d:	je     12450 <strnumcmp+0xe0>
   1245f:	movzx  r10d,r8b
   12463:	cmp    ecx,r10d
   12466:	je     12450 <strnumcmp+0xe0>
   12468:	nop    DWORD PTR [rax+rax*1+0x0]
   12470:	cmp    r9b,r8b
   12473:	jne    125d0 <strnumcmp+0x260>
   12479:	lea    r8d,[r10-0x30]
   1247d:	cmp    r8d,0x9
   12481:	ja     125d0 <strnumcmp+0x260>
   12487:	nop    WORD PTR [rax+rax*1+0x0]
   12490:	movzx  eax,BYTE PTR [rdi+0x1]
   12494:	add    rdi,0x1
   12498:	mov    r9d,eax
   1249b:	cmp    ecx,eax
   1249d:	je     12490 <strnumcmp+0x120>
   1249f:	nop
   124a0:	movzx  r10d,BYTE PTR [rsi+0x1]
   124a5:	add    rsi,0x1
   124a9:	mov    r8d,r10d
   124ac:	cmp    ecx,r10d
   124af:	jne    12470 <strnumcmp+0x100>
   124b1:	movzx  r10d,BYTE PTR [rsi+0x1]
   124b6:	add    rsi,0x1
   124ba:	mov    r8d,r10d
   124bd:	cmp    ecx,r10d
   124c0:	je     124a0 <strnumcmp+0x130>
   124c2:	jmp    12470 <strnumcmp+0x100>
   124c4:	nop    DWORD PTR [rax+0x0]
   124c8:	movzx  r8d,BYTE PTR [rsi+0x1]
   124cd:	add    rsi,0x1
   124d1:	cmp    r8b,0x30
   124d5:	je     124c8 <strnumcmp+0x158>
   124d7:	movzx  r9d,r8b
   124db:	cmp    ecx,r9d
   124de:	je     124c8 <strnumcmp+0x158>
   124e0:	cmp    al,r8b
   124e3:	jne    126e8 <strnumcmp+0x378>
   124e9:	lea    eax,[r9-0x30]
   124ed:	cmp    eax,0x9
   124f0:	ja     126e8 <strnumcmp+0x378>
   124f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12500:	movzx  r10d,BYTE PTR [rdi+0x1]
   12505:	add    rdi,0x1
   12509:	mov    eax,r10d
   1250c:	cmp    ecx,r10d
   1250f:	je     12500 <strnumcmp+0x190>
   12511:	nop    DWORD PTR [rax+0x0]
   12518:	movzx  r9d,BYTE PTR [rsi+0x1]
   1251d:	add    rsi,0x1
   12521:	mov    r8d,r9d
   12524:	cmp    ecx,r9d
   12527:	jne    124e0 <strnumcmp+0x170>
   12529:	movzx  r9d,BYTE PTR [rsi+0x1]
   1252e:	add    rsi,0x1
   12532:	mov    r8d,r9d
   12535:	cmp    ecx,r9d
   12538:	je     12518 <strnumcmp+0x1a8>
   1253a:	jmp    124e0 <strnumcmp+0x170>
   1253c:	nop    DWORD PTR [rax+0x0]
   12540:	movzx  eax,BYTE PTR [rdi+0x1]
   12544:	add    rdi,0x1
   12548:	cmp    al,0x30
   1254a:	je     12540 <strnumcmp+0x1d0>
   1254c:	movzx  r10d,al
   12550:	jmp    123e8 <strnumcmp+0x78>
   12555:	nop    DWORD PTR [rax]
   12558:	movzx  eax,BYTE PTR [rsi+0x1]
   1255c:	add    rsi,0x1
   12560:	cmp    al,0x30
   12562:	jne    123a8 <strnumcmp+0x38>
   12568:	movzx  eax,BYTE PTR [rsi+0x1]
   1256c:	add    rsi,0x1
   12570:	cmp    al,0x30
   12572:	je     12558 <strnumcmp+0x1e8>
   12574:	jmp    123a8 <strnumcmp+0x38>
   12579:	nop    DWORD PTR [rax+0x0]
   12580:	movzx  r9d,BYTE PTR [rdi+0x1]
   12585:	add    rdi,0x1
   12589:	cmp    r9b,0x30
   1258d:	je     12580 <strnumcmp+0x210>
   1258f:	movzx  eax,r9b
   12593:	cmp    ecx,eax
   12595:	je     12580 <strnumcmp+0x210>
   12597:	cmp    edx,eax
   12599:	je     12660 <strnumcmp+0x2f0>
   1259f:	sub    eax,0x30
   125a2:	cmp    eax,0x9
   125a5:	setbe  al
   125a8:	movzx  eax,al
   125ab:	ret    
   125ac:	nop    DWORD PTR [rax+0x0]
   125b0:	movzx  r8d,BYTE PTR [rsi+0x1]
   125b5:	add    rsi,0x1
   125b9:	cmp    r8b,0x30
   125bd:	je     125b0 <strnumcmp+0x240>
   125bf:	movzx  r10d,r8b
   125c3:	jmp    12421 <strnumcmp+0xb1>
   125c8:	nop    DWORD PTR [rax+rax*1+0x0]
   125d0:	cmp    edx,eax
   125d2:	je     12680 <strnumcmp+0x310>
   125d8:	lea    r8d,[rax-0x30]
   125dc:	cmp    edx,r10d
   125df:	je     126d0 <strnumcmp+0x360>
   125e5:	sub    eax,r10d
   125e8:	sub    r10d,0x30
   125ec:	cmp    r8d,0x9
   125f0:	ja     127d0 <strnumcmp+0x460>
   125f6:	xor    r8d,r8d
   125f9:	nop    DWORD PTR [rax+0x0]
   12600:	movzx  edx,BYTE PTR [rdi+0x1]
   12604:	add    rdi,0x1
   12608:	cmp    ecx,edx
   1260a:	je     12600 <strnumcmp+0x290>
   1260c:	sub    edx,0x30
   1260f:	add    r8,0x1
   12613:	cmp    edx,0x9
   12616:	jbe    12600 <strnumcmp+0x290>
   12618:	cmp    r10d,0x9
   1261c:	ja     12780 <strnumcmp+0x410>
   12622:	xor    edi,edi
   12624:	nop    DWORD PTR [rax+0x0]
   12628:	movzx  edx,BYTE PTR [rsi+0x1]
   1262c:	add    rsi,0x1
   12630:	cmp    ecx,edx
   12632:	je     12628 <strnumcmp+0x2b8>
   12634:	sub    edx,0x30
   12637:	add    rdi,0x1
   1263b:	cmp    edx,0x9
   1263e:	jbe    12628 <strnumcmp+0x2b8>
   12640:	cmp    r8,rdi
   12643:	je     12650 <strnumcmp+0x2e0>
   12645:	sbb    eax,eax
   12647:	or     eax,0x1
   1264a:	ret    
   1264b:	nop    DWORD PTR [rax+rax*1+0x0]
   12650:	test   r8,r8
   12653:	mov    edx,0x0
   12658:	cmove  eax,edx
   1265b:	ret    
   1265c:	nop    DWORD PTR [rax+0x0]
   12660:	movzx  r9d,BYTE PTR [rdi+0x1]
   12665:	add    rdi,0x1
   12669:	cmp    r9b,0x30
   1266d:	je     12660 <strnumcmp+0x2f0>
   1266f:	movzx  eax,r9b
   12673:	jmp    1259f <strnumcmp+0x22f>
   12678:	nop    DWORD PTR [rax+rax*1+0x0]
   12680:	lea    r8d,[r10-0x30]
   12684:	cmp    r8d,0x9
   12688:	jbe    125d8 <strnumcmp+0x268>
   1268e:	movzx  r8d,BYTE PTR [rsi]
   12692:	cmp    dl,BYTE PTR [rdi]
   12694:	je     127f8 <strnumcmp+0x488>
   1269a:	xor    eax,eax
   1269c:	cmp    dl,r8b
   1269f:	jne    123b9 <strnumcmp+0x49>
   126a5:	movzx  edx,BYTE PTR [rsi+0x1]
   126a9:	lea    rax,[rsi+0x1]
   126ad:	jmp    126b8 <strnumcmp+0x348>
   126af:	nop
   126b0:	movzx  edx,BYTE PTR [rax+0x1]
   126b4:	add    rax,0x1
   126b8:	cmp    dl,0x30
   126bb:	je     126b0 <strnumcmp+0x340>
   126bd:	movsx  eax,dl
   126c0:	sub    eax,0x30
   126c3:	cmp    eax,0xa
   126c6:	sbb    eax,eax
   126c8:	ret    
   126c9:	nop    DWORD PTR [rax+0x0]
   126d0:	sub    eax,edx
   126d2:	lea    r10d,[rdx-0x30]
   126d6:	cmp    r8d,0x9
   126da:	jbe    125f6 <strnumcmp+0x286>
   126e0:	jmp    1268e <strnumcmp+0x31e>
   126e2:	nop    WORD PTR [rax+rax*1+0x0]
   126e8:	cmp    edx,r10d
   126eb:	je     12798 <strnumcmp+0x428>
   126f1:	lea    r8d,[r10-0x30]
   126f5:	cmp    edx,r9d
   126f8:	je     127e0 <strnumcmp+0x470>
   126fe:	mov    eax,r9d
   12701:	sub    r9d,0x30
   12705:	sub    eax,r10d
   12708:	cmp    r8d,0x9
   1270c:	ja     12870 <strnumcmp+0x500>
   12712:	xor    r8d,r8d
   12715:	nop    DWORD PTR [rax]
   12718:	movzx  edx,BYTE PTR [rdi+0x1]
   1271c:	add    rdi,0x1
   12720:	cmp    ecx,edx
   12722:	je     12718 <strnumcmp+0x3a8>
   12724:	sub    edx,0x30
   12727:	add    r8,0x1
   1272b:	cmp    edx,0x9
   1272e:	jbe    12718 <strnumcmp+0x3a8>
   12730:	cmp    r9d,0x9
   12734:	ja     12789 <strnumcmp+0x419>
   12736:	xor    edi,edi
   12738:	nop    DWORD PTR [rax+rax*1+0x0]
   12740:	movzx  edx,BYTE PTR [rsi+0x1]
   12744:	add    rsi,0x1
   12748:	cmp    ecx,edx
   1274a:	je     12740 <strnumcmp+0x3d0>
   1274c:	sub    edx,0x30
   1274f:	add    rdi,0x1
   12753:	cmp    edx,0x9
   12756:	jbe    12740 <strnumcmp+0x3d0>
   12758:	cmp    rdi,r8
   1275b:	je     12770 <strnumcmp+0x400>
   1275d:	cmp    r8,rdi
   12760:	sbb    eax,eax
   12762:	and    eax,0x2
   12765:	sub    eax,0x1
   12768:	ret    
   12769:	nop    DWORD PTR [rax+0x0]
   12770:	test   rdi,rdi
   12773:	mov    edx,0x0
   12778:	cmove  eax,edx
   1277b:	ret    
   1277c:	nop    DWORD PTR [rax+0x0]
   12780:	xor    eax,eax
   12782:	test   r8,r8
   12785:	setne  al
   12788:	ret    
   12789:	xor    eax,eax
   1278b:	test   r8,r8
   1278e:	setne  al
   12791:	neg    eax
   12793:	ret    
   12794:	nop    DWORD PTR [rax+0x0]
   12798:	lea    eax,[r9-0x30]
   1279c:	cmp    eax,0x9
   1279f:	jbe    126f1 <strnumcmp+0x381>
   127a5:	movzx  ecx,BYTE PTR [rdi]
   127a8:	cmp    dl,BYTE PTR [rsi]
   127aa:	je     12882 <strnumcmp+0x512>
   127b0:	xor    eax,eax
   127b2:	cmp    dl,cl
   127b4:	jne    123b9 <strnumcmp+0x49>
   127ba:	nop    WORD PTR [rax+rax*1+0x0]
   127c0:	add    rdi,0x1
   127c4:	movsx  eax,BYTE PTR [rdi]
   127c7:	cmp    al,0x30
   127c9:	je     127c0 <strnumcmp+0x450>
   127cb:	jmp    126c0 <strnumcmp+0x350>
   127d0:	xor    r8d,r8d
   127d3:	cmp    r10d,0x9
   127d7:	jbe    12622 <strnumcmp+0x2b2>
   127dd:	xor    eax,eax
   127df:	ret    
   127e0:	mov    eax,edx
   127e2:	lea    r9d,[rdx-0x30]
   127e6:	sub    eax,r10d
   127e9:	cmp    r8d,0x9
   127ed:	jbe    12712 <strnumcmp+0x3a2>
   127f3:	jmp    127a5 <strnumcmp+0x435>
   127f5:	nop    DWORD PTR [rax]
   127f8:	movsx  ecx,BYTE PTR [rdi+0x1]
   127fc:	cmp    dl,r8b
   127ff:	je     1283a <strnumcmp+0x4ca>
   12801:	add    rdi,0x1
   12805:	jmp    12818 <strnumcmp+0x4a8>
   12807:	nop    WORD PTR [rax+rax*1+0x0]
   12810:	movsx  ecx,BYTE PTR [rdi+0x1]
   12814:	add    rdi,0x1
   12818:	cmp    cl,0x30
   1281b:	je     12810 <strnumcmp+0x4a0>
   1281d:	sub    ecx,0x30
   12820:	xor    eax,eax
   12822:	cmp    ecx,0x9
   12825:	setbe  al
   12828:	ret    
   12829:	nop    DWORD PTR [rax+0x0]
   12830:	cmp    r8d,0x9
   12834:	ja     127dd <strnumcmp+0x46d>
   12836:	movsx  ecx,BYTE PTR [rdi+0x1]
   1283a:	movzx  edx,BYTE PTR [rsi+0x1]
   1283e:	movsx  eax,cl
   12841:	add    rsi,0x1
   12845:	add    rdi,0x1
   12849:	lea    r8d,[rax-0x30]
   1284d:	cmp    dl,cl
   1284f:	je     12830 <strnumcmp+0x4c0>
   12851:	movsx  r9d,dl
   12855:	lea    r10d,[r9-0x30]
   12859:	cmp    r8d,0x9
   1285d:	ja     128de <strnumcmp+0x56e>
   1285f:	cmp    r10d,0x9
   12863:	ja     12818 <strnumcmp+0x4a8>
   12865:	sub    eax,r9d
   12868:	ret    
   12869:	nop    DWORD PTR [rax+0x0]
   12870:	xor    r8d,r8d
   12873:	cmp    r9d,0x9
   12877:	jbe    12736 <strnumcmp+0x3c6>
   1287d:	jmp    127dd <strnumcmp+0x46d>
   12882:	cmp    dl,cl
   12884:	je     128aa <strnumcmp+0x53a>
   12886:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12890:	add    rsi,0x1
   12894:	movsx  eax,BYTE PTR [rsi]
   12897:	cmp    al,0x30
   12899:	je     12890 <strnumcmp+0x520>
   1289b:	jmp    1259f <strnumcmp+0x22f>
   128a0:	cmp    r8d,0x9
   128a4:	ja     127dd <strnumcmp+0x46d>
   128aa:	movsx  eax,BYTE PTR [rsi+0x1]
   128ae:	movsx  ecx,BYTE PTR [rdi+0x1]
   128b2:	add    rsi,0x1
   128b6:	add    rdi,0x1
   128ba:	lea    r8d,[rax-0x30]
   128be:	cmp    al,cl
   128c0:	je     128a0 <strnumcmp+0x530>
   128c2:	lea    edx,[rcx-0x30]
   128c5:	cmp    r8d,0x9
   128c9:	ja     128f2 <strnumcmp+0x582>
   128cb:	cmp    edx,0x9
   128ce:	ja     12894 <strnumcmp+0x524>
   128d0:	sub    eax,ecx
   128d2:	ret    
   128d3:	nop    DWORD PTR [rax+rax*1+0x0]
   128d8:	mov    eax,0xffffffff
   128dd:	ret    
   128de:	xor    eax,eax
   128e0:	cmp    r10d,0x9
   128e4:	ja     123b9 <strnumcmp+0x49>
   128ea:	mov    rax,rsi
   128ed:	jmp    126b8 <strnumcmp+0x348>
   128f2:	xor    eax,eax
   128f4:	cmp    edx,0x9
   128f7:	jbe    127c4 <strnumcmp+0x454>
   128fd:	ret    
   128fe:	xchg   ax,ax

0000000000012900 <fd_safer>:
   12900:	endbr64 
   12904:	push   r13
   12906:	push   r12
   12908:	mov    r12d,edi
   1290b:	push   rbp
   1290c:	push   rbx
   1290d:	sub    rsp,0x8
   12911:	cmp    edi,0x2
   12914:	jbe    12928 <fd_safer+0x28>
   12916:	add    rsp,0x8
   1291a:	mov    eax,r12d
   1291d:	pop    rbx
   1291e:	pop    rbp
   1291f:	pop    r12
   12921:	pop    r13
   12923:	ret    
   12924:	nop    DWORD PTR [rax+0x0]
   12928:	call   14850 <dup_safer>
   1292d:	mov    ebp,eax
   1292f:	call   3810 <__errno_location@plt>
   12934:	mov    edi,r12d
   12937:	mov    r12d,ebp
   1293a:	mov    r13d,DWORD PTR [rax]
   1293d:	mov    rbx,rax
   12940:	call   3a80 <close@plt>
   12945:	mov    eax,r12d
   12948:	mov    DWORD PTR [rbx],r13d
   1294b:	add    rsp,0x8
   1294f:	pop    rbx
   12950:	pop    rbp
   12951:	pop    r12
   12953:	pop    r13
   12955:	ret    
   12956:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000012960 <version_etc_arn>:
   12960:	endbr64 
   12964:	push   r15
   12966:	push   r14
   12968:	push   r13
   1296a:	push   r12
   1296c:	mov    r12,r9
   1296f:	push   rbp
   12970:	mov    rbp,rdi
   12973:	push   rbx
   12974:	mov    rbx,r8
   12977:	sub    rsp,0x38
   1297b:	test   rsi,rsi
   1297e:	je     12ad0 <version_etc_arn+0x170>
   12984:	mov    r9,rcx
   12987:	mov    r8,rdx
   1298a:	mov    rcx,rsi
   1298d:	xor    eax,eax
   1298f:	lea    rdx,[rip+0x5141]        # 17ad7 <__PRETTY_FUNCTION__.5018+0xf>
   12996:	mov    esi,0x1
   1299b:	call   3e00 <__fprintf_chk@plt>
   129a0:	xor    edi,edi
   129a2:	mov    edx,0x5
   129a7:	lea    rsi,[rip+0x513c]        # 17aea <__PRETTY_FUNCTION__.5018+0x22>
   129ae:	call   3960 <dcgettext@plt>
   129b3:	mov    r8d,0x7e7
   129b9:	mov    esi,0x1
   129be:	mov    rdi,rbp
   129c1:	mov    rcx,rax
   129c4:	lea    rdx,[rip+0x5435]        # 17e00 <version_etc_copyright>
   129cb:	xor    eax,eax
   129cd:	call   3e00 <__fprintf_chk@plt>
   129d2:	mov    rsi,rbp
   129d5:	mov    edi,0xa
   129da:	call   3b40 <fputc_unlocked@plt>
   129df:	xor    edi,edi
   129e1:	mov    edx,0x5
   129e6:	lea    rsi,[rip+0x51a3]        # 17b90 <__PRETTY_FUNCTION__.5018+0xc8>
   129ed:	call   3960 <dcgettext@plt>
   129f2:	mov    esi,0x1
   129f7:	mov    rdi,rbp
   129fa:	lea    rcx,[rip+0x523f]        # 17c40 <__PRETTY_FUNCTION__.5018+0x178>
   12a01:	mov    rdx,rax
   12a04:	xor    eax,eax
   12a06:	call   3e00 <__fprintf_chk@plt>
   12a0b:	mov    rsi,rbp
   12a0e:	mov    edi,0xa
   12a13:	call   3b40 <fputc_unlocked@plt>
   12a18:	cmp    r12,0x9
   12a1c:	ja     12d74 <version_etc_arn+0x414>
   12a22:	lea    rdx,[rip+0x53af]        # 17dd8 <__PRETTY_FUNCTION__.5018+0x310>
   12a29:	movsxd rax,DWORD PTR [rdx+r12*4]
   12a2d:	add    rax,rdx
   12a30:	notrack jmp rax
   12a33:	nop    DWORD PTR [rax+rax*1+0x0]
   12a38:	mov    r10,QWORD PTR [rbx+0x38]
   12a3c:	mov    r9,QWORD PTR [rbx+0x30]
   12a40:	mov    edx,0x5
   12a45:	xor    edi,edi
   12a47:	mov    r8,QWORD PTR [rbx+0x28]
   12a4b:	mov    rcx,QWORD PTR [rbx+0x20]
   12a4f:	lea    rsi,[rip+0x52b2]        # 17d08 <__PRETTY_FUNCTION__.5018+0x240>
   12a56:	mov    r15,QWORD PTR [rbx+0x18]
   12a5a:	mov    r14,QWORD PTR [rbx+0x10]
   12a5e:	mov    QWORD PTR [rsp+0x20],r10
   12a63:	mov    r13,QWORD PTR [rbx+0x8]
   12a67:	mov    r12,QWORD PTR [rbx]
   12a6a:	mov    QWORD PTR [rsp+0x18],r9
   12a6f:	mov    QWORD PTR [rsp+0x10],r8
   12a74:	mov    QWORD PTR [rsp+0x8],rcx
   12a79:	call   3960 <dcgettext@plt>
   12a7e:	sub    rsp,0x8
   12a82:	mov    rdx,rax
   12a85:	mov    r10,QWORD PTR [rsp+0x28]
   12a8a:	mov    esi,0x1
   12a8f:	mov    rdi,rbp
   12a92:	xor    eax,eax
   12a94:	push   r10
   12a96:	mov    r9,QWORD PTR [rsp+0x28]
   12a9b:	push   r9
   12a9d:	mov    r8,QWORD PTR [rsp+0x28]
   12aa2:	mov    r9,r14
   12aa5:	push   r8
   12aa7:	mov    rcx,QWORD PTR [rsp+0x28]
   12aac:	mov    r8,r13
   12aaf:	push   rcx
   12ab0:	mov    rcx,r12
   12ab3:	push   r15
   12ab5:	call   3e00 <__fprintf_chk@plt>
   12aba:	add    rsp,0x30
   12abe:	add    rsp,0x38
   12ac2:	pop    rbx
   12ac3:	pop    rbp
   12ac4:	pop    r12
   12ac6:	pop    r13
   12ac8:	pop    r14
   12aca:	pop    r15
   12acc:	ret    
   12acd:	nop    DWORD PTR [rax]
   12ad0:	mov    r8,rcx
   12ad3:	mov    esi,0x1
   12ad8:	mov    rcx,rdx
   12adb:	xor    eax,eax
   12add:	lea    rdx,[rip+0x4fff]        # 17ae3 <__PRETTY_FUNCTION__.5018+0x1b>
   12ae4:	call   3e00 <__fprintf_chk@plt>
   12ae9:	jmp    129a0 <version_etc_arn+0x40>
   12aee:	xchg   ax,ax
   12af0:	mov    r11,QWORD PTR [rbx+0x40]
   12af4:	mov    r10,QWORD PTR [rbx+0x38]
   12af8:	mov    edx,0x5
   12afd:	lea    rsi,[rip+0x5234]        # 17d38 <__PRETTY_FUNCTION__.5018+0x270>
   12b04:	mov    r9,QWORD PTR [rbx+0x30]
   12b08:	mov    r8,QWORD PTR [rbx+0x28]
   12b0c:	mov    rcx,QWORD PTR [rbx+0x20]
   12b10:	mov    r15,QWORD PTR [rbx+0x18]
   12b14:	mov    QWORD PTR [rsp+0x28],r11
   12b19:	mov    r14,QWORD PTR [rbx+0x10]
   12b1d:	mov    r13,QWORD PTR [rbx+0x8]
   12b21:	mov    QWORD PTR [rsp+0x20],r10
   12b26:	mov    QWORD PTR [rsp+0x18],r9
   12b2b:	mov    r12,QWORD PTR [rbx]
   12b2e:	mov    QWORD PTR [rsp+0x10],r8
   12b33:	mov    QWORD PTR [rsp+0x8],rcx
   12b38:	xor    edi,edi
   12b3a:	call   3960 <dcgettext@plt>
   12b3f:	mov    r11,QWORD PTR [rsp+0x28]
   12b44:	mov    rdx,rax
   12b47:	push   r11
   12b49:	jmp    12a85 <version_etc_arn+0x125>
   12b4e:	xchg   ax,ax
   12b50:	mov    r12,QWORD PTR [rbx]
   12b53:	mov    edx,0x5
   12b58:	lea    rsi,[rip+0x4f8f]        # 17aee <__PRETTY_FUNCTION__.5018+0x26>
   12b5f:	xor    edi,edi
   12b61:	call   3960 <dcgettext@plt>
   12b66:	add    rsp,0x38
   12b6a:	mov    rdi,rbp
   12b6d:	mov    esi,0x1
   12b72:	pop    rbx
   12b73:	mov    rdx,rax
   12b76:	pop    rbp
   12b77:	mov    rcx,r12
   12b7a:	xor    eax,eax
   12b7c:	pop    r12
   12b7e:	pop    r13
   12b80:	pop    r14
   12b82:	pop    r15
   12b84:	jmp    3e00 <__fprintf_chk@plt>
   12b89:	nop    DWORD PTR [rax+0x0]
   12b90:	mov    r13,QWORD PTR [rbx+0x8]
   12b94:	mov    r12,QWORD PTR [rbx]
   12b97:	mov    edx,0x5
   12b9c:	xor    edi,edi
   12b9e:	lea    rsi,[rip+0x4f59]        # 17afe <__PRETTY_FUNCTION__.5018+0x36>
   12ba5:	call   3960 <dcgettext@plt>
   12baa:	add    rsp,0x38
   12bae:	mov    r8,r13
   12bb1:	mov    rcx,r12
   12bb4:	pop    rbx
   12bb5:	mov    rdx,rax
   12bb8:	mov    rdi,rbp
   12bbb:	mov    esi,0x1
   12bc0:	pop    rbp
   12bc1:	xor    eax,eax
   12bc3:	pop    r12
   12bc5:	pop    r13
   12bc7:	pop    r14
   12bc9:	pop    r15
   12bcb:	jmp    3e00 <__fprintf_chk@plt>
   12bd0:	mov    r14,QWORD PTR [rbx+0x10]
   12bd4:	mov    r13,QWORD PTR [rbx+0x8]
   12bd8:	mov    edx,0x5
   12bdd:	xor    edi,edi
   12bdf:	mov    r12,QWORD PTR [rbx]
   12be2:	lea    rsi,[rip+0x4f2c]        # 17b15 <__PRETTY_FUNCTION__.5018+0x4d>
   12be9:	call   3960 <dcgettext@plt>
   12bee:	add    rsp,0x38
   12bf2:	mov    r9,r14
   12bf5:	mov    r8,r13
   12bf8:	pop    rbx
   12bf9:	mov    rdx,rax
   12bfc:	mov    rcx,r12
   12bff:	mov    rdi,rbp
   12c02:	mov    esi,0x1
   12c07:	pop    rbp
   12c08:	xor    eax,eax
   12c0a:	pop    r12
   12c0c:	pop    r13
   12c0e:	pop    r14
   12c10:	pop    r15
   12c12:	jmp    3e00 <__fprintf_chk@plt>
   12c17:	nop    WORD PTR [rax+rax*1+0x0]
   12c20:	mov    edx,0x5
   12c25:	xor    edi,edi
   12c27:	mov    r15,QWORD PTR [rbx+0x18]
   12c2b:	mov    r14,QWORD PTR [rbx+0x10]
   12c2f:	lea    rsi,[rip+0x5032]        # 17c68 <__PRETTY_FUNCTION__.5018+0x1a0>
   12c36:	mov    r13,QWORD PTR [rbx+0x8]
   12c3a:	mov    r12,QWORD PTR [rbx]
   12c3d:	call   3960 <dcgettext@plt>
   12c42:	sub    rsp,0x8
   12c46:	mov    rdx,rax
   12c49:	push   r15
   12c4b:	mov    r9,r14
   12c4e:	mov    r8,r13
   12c51:	mov    rcx,r12
   12c54:	mov    rdi,rbp
   12c57:	mov    esi,0x1
   12c5c:	xor    eax,eax
   12c5e:	call   3e00 <__fprintf_chk@plt>
   12c63:	pop    rax
   12c64:	pop    rdx
   12c65:	add    rsp,0x38
   12c69:	pop    rbx
   12c6a:	pop    rbp
   12c6b:	pop    r12
   12c6d:	pop    r13
   12c6f:	pop    r14
   12c71:	pop    r15
   12c73:	ret    
   12c74:	nop    DWORD PTR [rax+0x0]
   12c78:	mov    rcx,QWORD PTR [rbx+0x20]
   12c7c:	mov    edx,0x5
   12c81:	xor    edi,edi
   12c83:	mov    r15,QWORD PTR [rbx+0x18]
   12c87:	lea    rsi,[rip+0x4ffa]        # 17c88 <__PRETTY_FUNCTION__.5018+0x1c0>
   12c8e:	mov    r14,QWORD PTR [rbx+0x10]
   12c92:	mov    r13,QWORD PTR [rbx+0x8]
   12c96:	mov    QWORD PTR [rsp+0x8],rcx
   12c9b:	mov    r12,QWORD PTR [rbx]
   12c9e:	call   3960 <dcgettext@plt>
   12ca3:	mov    rcx,QWORD PTR [rsp+0x8]
   12ca8:	mov    rdx,rax
   12cab:	push   rcx
   12cac:	jmp    12c49 <version_etc_arn+0x2e9>
   12cae:	xchg   ax,ax
   12cb0:	mov    r8,QWORD PTR [rbx+0x28]
   12cb4:	mov    rcx,QWORD PTR [rbx+0x20]
   12cb8:	mov    edx,0x5
   12cbd:	xor    edi,edi
   12cbf:	lea    rsi,[rip+0x4fea]        # 17cb0 <__PRETTY_FUNCTION__.5018+0x1e8>
   12cc6:	mov    r15,QWORD PTR [rbx+0x18]
   12cca:	mov    r14,QWORD PTR [rbx+0x10]
   12cce:	mov    r13,QWORD PTR [rbx+0x8]
   12cd2:	mov    r12,QWORD PTR [rbx]
   12cd5:	mov    QWORD PTR [rsp+0x10],r8
   12cda:	mov    QWORD PTR [rsp+0x8],rcx
   12cdf:	call   3960 <dcgettext@plt>
   12ce4:	sub    rsp,0x8
   12ce8:	mov    rdx,rax
   12ceb:	mov    r8,QWORD PTR [rsp+0x18]
   12cf0:	mov    r9,r14
   12cf3:	mov    rdi,rbp
   12cf6:	mov    esi,0x1
   12cfb:	xor    eax,eax
   12cfd:	push   r8
   12cff:	mov    rcx,QWORD PTR [rsp+0x18]
   12d04:	mov    r8,r13
   12d07:	push   rcx
   12d08:	mov    rcx,r12
   12d0b:	push   r15
   12d0d:	call   3e00 <__fprintf_chk@plt>
   12d12:	add    rsp,0x20
   12d16:	add    rsp,0x38
   12d1a:	pop    rbx
   12d1b:	pop    rbp
   12d1c:	pop    r12
   12d1e:	pop    r13
   12d20:	pop    r14
   12d22:	pop    r15
   12d24:	ret    
   12d25:	nop    DWORD PTR [rax]
   12d28:	mov    r9,QWORD PTR [rbx+0x30]
   12d2c:	mov    r8,QWORD PTR [rbx+0x28]
   12d30:	mov    edx,0x5
   12d35:	xor    edi,edi
   12d37:	mov    rcx,QWORD PTR [rbx+0x20]
   12d3b:	lea    rsi,[rip+0x4f96]        # 17cd8 <__PRETTY_FUNCTION__.5018+0x210>
   12d42:	mov    r15,QWORD PTR [rbx+0x18]
   12d46:	mov    r14,QWORD PTR [rbx+0x10]
   12d4a:	mov    r13,QWORD PTR [rbx+0x8]
   12d4e:	mov    QWORD PTR [rsp+0x18],r9
   12d53:	mov    QWORD PTR [rsp+0x10],r8
   12d58:	mov    r12,QWORD PTR [rbx]
   12d5b:	mov    QWORD PTR [rsp+0x8],rcx
   12d60:	call   3960 <dcgettext@plt>
   12d65:	mov    r9,QWORD PTR [rsp+0x18]
   12d6a:	mov    rdx,rax
   12d6d:	push   r9
   12d6f:	jmp    12ceb <version_etc_arn+0x38b>
   12d74:	mov    r11,QWORD PTR [rbx+0x40]
   12d78:	mov    r10,QWORD PTR [rbx+0x38]
   12d7c:	mov    edx,0x5
   12d81:	lea    rsi,[rip+0x4fe8]        # 17d70 <__PRETTY_FUNCTION__.5018+0x2a8>
   12d88:	mov    r9,QWORD PTR [rbx+0x30]
   12d8c:	mov    r8,QWORD PTR [rbx+0x28]
   12d90:	mov    rcx,QWORD PTR [rbx+0x20]
   12d94:	mov    r15,QWORD PTR [rbx+0x18]
   12d98:	mov    QWORD PTR [rsp+0x28],r11
   12d9d:	mov    r14,QWORD PTR [rbx+0x10]
   12da1:	mov    r13,QWORD PTR [rbx+0x8]
   12da5:	mov    QWORD PTR [rsp+0x20],r10
   12daa:	mov    QWORD PTR [rsp+0x18],r9
   12daf:	mov    r12,QWORD PTR [rbx]
   12db2:	mov    QWORD PTR [rsp+0x10],r8
   12db7:	mov    QWORD PTR [rsp+0x8],rcx
   12dbc:	jmp    12b38 <version_etc_arn+0x1d8>
   12dc1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   12dcc:	nop    DWORD PTR [rax+0x0]

0000000000012dd0 <version_etc_ar>:
   12dd0:	endbr64 
   12dd4:	xor    r9d,r9d
   12dd7:	cmp    QWORD PTR [r8],0x0
   12ddb:	je     12deb <version_etc_ar+0x1b>
   12ddd:	nop    DWORD PTR [rax]
   12de0:	add    r9,0x1
   12de4:	cmp    QWORD PTR [r8+r9*8],0x0
   12de9:	jne    12de0 <version_etc_ar+0x10>
   12deb:	jmp    12960 <version_etc_arn>

0000000000012df0 <version_etc_va>:
   12df0:	endbr64 
   12df4:	sub    rsp,0x68
   12df8:	mov    r11,r8
   12dfb:	xor    r9d,r9d
   12dfe:	mov    rax,QWORD PTR fs:0x28
   12e07:	mov    QWORD PTR [rsp+0x58],rax
   12e0c:	xor    eax,eax
   12e0e:	mov    r8,rsp
   12e11:	jmp    12e3b <version_etc_va+0x4b>
   12e13:	nop    DWORD PTR [rax+rax*1+0x0]
   12e18:	mov    r10d,eax
   12e1b:	add    eax,0x8
   12e1e:	add    r10,QWORD PTR [r11+0x10]
   12e22:	mov    DWORD PTR [r11],eax
   12e25:	mov    rax,QWORD PTR [r10]
   12e28:	mov    QWORD PTR [r8+r9*8],rax
   12e2c:	test   rax,rax
   12e2f:	je     12e60 <version_etc_va+0x70>
   12e31:	add    r9,0x1
   12e35:	cmp    r9,0xa
   12e39:	je     12e60 <version_etc_va+0x70>
   12e3b:	mov    eax,DWORD PTR [r11]
   12e3e:	cmp    eax,0x2f
   12e41:	jbe    12e18 <version_etc_va+0x28>
   12e43:	mov    r10,QWORD PTR [r11+0x8]
   12e47:	lea    rax,[r10+0x8]
   12e4b:	mov    QWORD PTR [r11+0x8],rax
   12e4f:	mov    rax,QWORD PTR [r10]
   12e52:	mov    QWORD PTR [r8+r9*8],rax
   12e56:	test   rax,rax
   12e59:	jne    12e31 <version_etc_va+0x41>
   12e5b:	nop    DWORD PTR [rax+rax*1+0x0]
   12e60:	call   12960 <version_etc_arn>
   12e65:	mov    rax,QWORD PTR [rsp+0x58]
   12e6a:	xor    rax,QWORD PTR fs:0x28
   12e73:	jne    12e7a <version_etc_va+0x8a>
   12e75:	add    rsp,0x68
   12e79:	ret    
   12e7a:	call   3990 <__stack_chk_fail@plt>
   12e7f:	nop

0000000000012e80 <version_etc>:
   12e80:	endbr64 
   12e84:	push   rbx
   12e85:	mov    r10d,0x20
   12e8b:	sub    rsp,0xb0
   12e92:	mov    QWORD PTR [rsp+0xa0],r8
   12e9a:	lea    r11,[rsp+0xc0]
   12ea2:	lea    r8,[rsp+0x20]
   12ea7:	mov    QWORD PTR [rsp+0xa8],r9
   12eaf:	xor    r9d,r9d
   12eb2:	mov    rax,QWORD PTR fs:0x28
   12ebb:	mov    QWORD PTR [rsp+0x78],rax
   12ec0:	xor    eax,eax
   12ec2:	lea    rax,[rsp+0xc0]
   12eca:	mov    DWORD PTR [rsp+0x8],0x20
   12ed2:	mov    QWORD PTR [rsp+0x10],rax
   12ed7:	lea    rax,[rsp+0x80]
   12edf:	mov    QWORD PTR [rsp+0x18],rax
   12ee4:	mov    rbx,rax
   12ee7:	jmp    12f10 <version_etc+0x90>
   12ee9:	nop    DWORD PTR [rax+0x0]
   12ef0:	mov    eax,r10d
   12ef3:	add    r10d,0x8
   12ef7:	add    rax,rbx
   12efa:	mov    rax,QWORD PTR [rax]
   12efd:	mov    QWORD PTR [r8+r9*8],rax
   12f01:	test   rax,rax
   12f04:	je     12f30 <version_etc+0xb0>
   12f06:	add    r9,0x1
   12f0a:	cmp    r9,0xa
   12f0e:	je     12f30 <version_etc+0xb0>
   12f10:	cmp    r10d,0x2f
   12f14:	jbe    12ef0 <version_etc+0x70>
   12f16:	mov    rax,r11
   12f19:	add    r11,0x8
   12f1d:	mov    rax,QWORD PTR [rax]
   12f20:	mov    QWORD PTR [r8+r9*8],rax
   12f24:	test   rax,rax
   12f27:	jne    12f06 <version_etc+0x86>
   12f29:	nop    DWORD PTR [rax+0x0]
   12f30:	call   12960 <version_etc_arn>
   12f35:	mov    rax,QWORD PTR [rsp+0x78]
   12f3a:	xor    rax,QWORD PTR fs:0x28
   12f43:	jne    12f4e <version_etc+0xce>
   12f45:	add    rsp,0xb0
   12f4c:	pop    rbx
   12f4d:	ret    
   12f4e:	call   3990 <__stack_chk_fail@plt>
   12f53:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   12f5e:	xchg   ax,ax

0000000000012f60 <emit_bug_reporting_address>:
   12f60:	endbr64 
   12f64:	sub    rsp,0x8
   12f68:	mov    rsi,QWORD PTR [rip+0xb259]        # 1e1c8 <stdout@@GLIBC_2.2.5>
   12f6f:	mov    edi,0xa
   12f74:	call   3b40 <fputc_unlocked@plt>
   12f79:	mov    edx,0x5
   12f7e:	lea    rsi,[rip+0x4bac]        # 17b31 <__PRETTY_FUNCTION__.5018+0x69>
   12f85:	xor    edi,edi
   12f87:	call   3960 <dcgettext@plt>
   12f8c:	lea    rdx,[rip+0x4bb2]        # 17b45 <__PRETTY_FUNCTION__.5018+0x7d>
   12f93:	mov    edi,0x1
   12f98:	mov    rsi,rax
   12f9b:	xor    eax,eax
   12f9d:	call   3ca0 <__printf_chk@plt>
   12fa2:	mov    edx,0x5
   12fa7:	lea    rsi,[rip+0x4bad]        # 17b5b <__PRETTY_FUNCTION__.5018+0x93>
   12fae:	xor    edi,edi
   12fb0:	call   3960 <dcgettext@plt>
   12fb5:	lea    rcx,[rip+0x3634]        # 165f0 <short_options+0x1180>
   12fbc:	mov    edi,0x1
   12fc1:	lea    rdx,[rip+0x3d2d]        # 16cf5 <short_options+0x1885>
   12fc8:	mov    rsi,rax
   12fcb:	xor    eax,eax
   12fcd:	call   3ca0 <__printf_chk@plt>
   12fd2:	mov    edx,0x5
   12fd7:	lea    rsi,[rip+0x4dd2]        # 17db0 <__PRETTY_FUNCTION__.5018+0x2e8>
   12fde:	xor    edi,edi
   12fe0:	call   3960 <dcgettext@plt>
   12fe5:	lea    rdx,[rip+0x4b83]        # 17b6f <__PRETTY_FUNCTION__.5018+0xa7>
   12fec:	mov    edi,0x1
   12ff1:	add    rsp,0x8
   12ff5:	mov    rsi,rax
   12ff8:	xor    eax,eax
   12ffa:	jmp    3ca0 <__printf_chk@plt>
   12fff:	nop

0000000000013000 <xmalloc>:
   13000:	endbr64 
   13004:	sub    rsp,0x8
   13008:	call   3770 <malloc@plt>
   1300d:	test   rax,rax
   13010:	je     13017 <xmalloc+0x17>
   13012:	add    rsp,0x8
   13016:	ret    
   13017:	call   13450 <xalloc_die>
   1301c:	nop    DWORD PTR [rax+0x0]

0000000000013020 <ximalloc>:
   13020:	endbr64 
   13024:	sub    rsp,0x8
   13028:	call   3770 <malloc@plt>
   1302d:	test   rax,rax
   13030:	je     13037 <ximalloc+0x17>
   13032:	add    rsp,0x8
   13036:	ret    
   13037:	call   13450 <xalloc_die>
   1303c:	nop    DWORD PTR [rax+0x0]

0000000000013040 <xcharalloc>:
   13040:	endbr64 
   13044:	sub    rsp,0x8
   13048:	call   3770 <malloc@plt>
   1304d:	test   rax,rax
   13050:	je     13057 <xcharalloc+0x17>
   13052:	add    rsp,0x8
   13056:	ret    
   13057:	call   13450 <xalloc_die>
   1305c:	nop    DWORD PTR [rax+0x0]

0000000000013060 <xrealloc>:
   13060:	endbr64 
   13064:	push   rbp
   13065:	mov    rbp,rdi
   13068:	push   rbx
   13069:	mov    rbx,rsi
   1306c:	sub    rsp,0x8
   13070:	call   3c70 <realloc@plt>
   13075:	test   rax,rax
   13078:	je     13081 <xrealloc+0x21>
   1307a:	add    rsp,0x8
   1307e:	pop    rbx
   1307f:	pop    rbp
   13080:	ret    
   13081:	test   rbp,rbp
   13084:	je     1308b <xrealloc+0x2b>
   13086:	test   rbx,rbx
   13089:	je     1307a <xrealloc+0x1a>
   1308b:	call   13450 <xalloc_die>

0000000000013090 <xirealloc>:
   13090:	endbr64 
   13094:	sub    rsp,0x8
   13098:	xor    eax,eax
   1309a:	test   rsi,rsi
   1309d:	sete   al
   130a0:	or     rsi,rax
   130a3:	call   3c70 <realloc@plt>
   130a8:	test   rax,rax
   130ab:	je     130b2 <xirealloc+0x22>
   130ad:	add    rsp,0x8
   130b1:	ret    
   130b2:	call   13450 <xalloc_die>
   130b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000130c0 <xreallocarray>:
   130c0:	endbr64 
   130c4:	push   r12
   130c6:	mov    r12,rdx
   130c9:	push   rbp
   130ca:	mov    rbp,rsi
   130cd:	push   rbx
   130ce:	mov    rbx,rdi
   130d1:	call   38b0 <reallocarray@plt>
   130d6:	test   rax,rax
   130d9:	je     130e0 <xreallocarray+0x20>
   130db:	pop    rbx
   130dc:	pop    rbp
   130dd:	pop    r12
   130df:	ret    
   130e0:	test   rbx,rbx
   130e3:	je     130ef <xreallocarray+0x2f>
   130e5:	test   rbp,rbp
   130e8:	je     130db <xreallocarray+0x1b>
   130ea:	test   r12,r12
   130ed:	je     130db <xreallocarray+0x1b>
   130ef:	call   13450 <xalloc_die>
   130f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   130ff:	nop

0000000000013100 <xnrealloc>:
   13100:	endbr64 
   13104:	jmp    130c0 <xreallocarray>
   13106:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000013110 <xireallocarray>:
   13110:	endbr64 
   13114:	sub    rsp,0x8
   13118:	test   rsi,rsi
   1311b:	je     13138 <xireallocarray+0x28>
   1311d:	test   rdx,rdx
   13120:	je     13138 <xireallocarray+0x28>
   13122:	call   38b0 <reallocarray@plt>
   13127:	test   rax,rax
   1312a:	je     13144 <xireallocarray+0x34>
   1312c:	add    rsp,0x8
   13130:	ret    
   13131:	nop    DWORD PTR [rax+0x0]
   13138:	mov    esi,0x1
   1313d:	mov    edx,0x1
   13142:	jmp    13122 <xireallocarray+0x12>
   13144:	call   13450 <xalloc_die>
   13149:	nop    DWORD PTR [rax+0x0]

0000000000013150 <xnmalloc>:
   13150:	endbr64 
   13154:	mov    rdx,rsi
   13157:	mov    rsi,rdi
   1315a:	xor    edi,edi
   1315c:	jmp    130c0 <xreallocarray>
   13161:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1316c:	nop    DWORD PTR [rax+0x0]

0000000000013170 <xinmalloc>:
   13170:	endbr64 
   13174:	mov    rdx,rsi
   13177:	mov    rsi,rdi
   1317a:	xor    edi,edi
   1317c:	jmp    13110 <xireallocarray>
   1317e:	xchg   ax,ax

0000000000013180 <x2nrealloc>:
   13180:	endbr64 
   13184:	push   rbp
   13185:	mov    r8,rdx
   13188:	mov    rbp,rsi
   1318b:	push   rbx
   1318c:	sub    rsp,0x8
   13190:	mov    rbx,QWORD PTR [rsi]
   13193:	test   rdi,rdi
   13196:	je     131c0 <x2nrealloc+0x40>
   13198:	mov    rax,rbx
   1319b:	shr    rax,1
   1319e:	add    rax,0x1
   131a2:	add    rbx,rax
   131a5:	jb     131e0 <x2nrealloc+0x60>
   131a7:	mov    rsi,rbx
   131aa:	mov    rdx,r8
   131ad:	call   130c0 <xreallocarray>
   131b2:	mov    QWORD PTR [rbp+0x0],rbx
   131b6:	add    rsp,0x8
   131ba:	pop    rbx
   131bb:	pop    rbp
   131bc:	ret    
   131bd:	nop    DWORD PTR [rax]
   131c0:	test   rbx,rbx
   131c3:	jne    131a7 <x2nrealloc+0x27>
   131c5:	xor    edx,edx
   131c7:	mov    eax,0x80
   131cc:	xor    ebx,ebx
   131ce:	div    r8
   131d1:	cmp    r8,0x80
   131d8:	seta   bl
   131db:	add    rbx,rax
   131de:	jmp    131a7 <x2nrealloc+0x27>
   131e0:	call   13450 <xalloc_die>
   131e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000131f0 <x2realloc>:
   131f0:	endbr64 
   131f4:	mov    edx,0x1
   131f9:	jmp    13180 <x2nrealloc>
   131fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000013200 <xpalloc>:
   13200:	endbr64 
   13204:	push   rbp
   13205:	mov    r10,rdx
   13208:	mov    rbp,rsi
   1320b:	push   rbx
   1320c:	sub    rsp,0x8
   13210:	mov    r9,QWORD PTR [rsi]
   13213:	mov    rbx,r9
   13216:	sar    rbx,1
   13219:	add    rbx,r9
   1321c:	jo     132b3 <xpalloc+0xb3>
   13222:	test   rcx,rcx
   13225:	js     1322e <xpalloc+0x2e>
   13227:	cmp    rbx,rcx
   1322a:	cmovg  rbx,rcx
   1322e:	mov    rsi,rbx
   13231:	imul   rsi,r8
   13235:	jo     132a7 <xpalloc+0xa7>
   13237:	cmp    rsi,0x7f
   1323b:	jle    13280 <xpalloc+0x80>
   1323d:	test   rdi,rdi
   13240:	je     13298 <xpalloc+0x98>
   13242:	nop    WORD PTR [rax+rax*1+0x0]
   13248:	mov    rax,rbx
   1324b:	sub    rax,r9
   1324e:	cmp    rax,r10
   13251:	jge    1326e <xpalloc+0x6e>
   13253:	add    r9,r10
   13256:	mov    rbx,r9
   13259:	jo     132a2 <xpalloc+0xa2>
   1325b:	cmp    r9,rcx
   1325e:	jle    13265 <xpalloc+0x65>
   13260:	test   rcx,rcx
   13263:	jns    132a2 <xpalloc+0xa2>
   13265:	imul   r9,r8
   13269:	mov    rsi,r9
   1326c:	jo     132a2 <xpalloc+0xa2>
   1326e:	call   13060 <xrealloc>
   13273:	mov    QWORD PTR [rbp+0x0],rbx
   13277:	add    rsp,0x8
   1327b:	pop    rbx
   1327c:	pop    rbp
   1327d:	ret    
   1327e:	xchg   ax,ax
   13280:	mov    esi,0x80
   13285:	mov    rax,rsi
   13288:	cqo    
   1328a:	idiv   r8
   1328d:	mov    rbx,rax
   13290:	sub    rsi,rdx
   13293:	test   rdi,rdi
   13296:	jne    13248 <xpalloc+0x48>
   13298:	mov    QWORD PTR [rbp+0x0],0x0
   132a0:	jmp    13248 <xpalloc+0x48>
   132a2:	call   13450 <xalloc_die>
   132a7:	movabs rsi,0x7fffffffffffffff
   132b1:	jmp    13285 <xpalloc+0x85>
   132b3:	movabs rbx,0x7fffffffffffffff
   132bd:	jmp    13222 <xpalloc+0x22>
   132c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   132cd:	nop    DWORD PTR [rax]

00000000000132d0 <xzalloc>:
   132d0:	endbr64 
   132d4:	sub    rsp,0x8
   132d8:	mov    esi,0x1
   132dd:	call   3b00 <calloc@plt>
   132e2:	test   rax,rax
   132e5:	je     132ec <xzalloc+0x1c>
   132e7:	add    rsp,0x8
   132eb:	ret    
   132ec:	call   13450 <xalloc_die>
   132f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   132fc:	nop    DWORD PTR [rax+0x0]

0000000000013300 <xizalloc>:
   13300:	endbr64 
   13304:	sub    rsp,0x8
   13308:	mov    esi,0x1
   1330d:	call   3b00 <calloc@plt>
   13312:	test   rax,rax
   13315:	je     1331c <xizalloc+0x1c>
   13317:	add    rsp,0x8
   1331b:	ret    
   1331c:	call   13450 <xalloc_die>
   13321:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1332c:	nop    DWORD PTR [rax+0x0]

0000000000013330 <xcalloc>:
   13330:	endbr64 
   13334:	sub    rsp,0x8
   13338:	call   3b00 <calloc@plt>
   1333d:	test   rax,rax
   13340:	je     13347 <xcalloc+0x17>
   13342:	add    rsp,0x8
   13346:	ret    
   13347:	call   13450 <xalloc_die>
   1334c:	nop    DWORD PTR [rax+0x0]

0000000000013350 <xicalloc>:
   13350:	endbr64 
   13354:	sub    rsp,0x8
   13358:	call   3b00 <calloc@plt>
   1335d:	test   rax,rax
   13360:	je     13367 <xicalloc+0x17>
   13362:	add    rsp,0x8
   13366:	ret    
   13367:	call   13450 <xalloc_die>
   1336c:	nop    DWORD PTR [rax+0x0]

0000000000013370 <xmemdup>:
   13370:	endbr64 
   13374:	push   r12
   13376:	mov    r12,rsi
   13379:	push   rbp
   1337a:	mov    rbp,rdi
   1337d:	mov    rdi,rsi
   13380:	sub    rsp,0x8
   13384:	call   3770 <malloc@plt>
   13389:	test   rax,rax
   1338c:	je     133a3 <xmemdup+0x33>
   1338e:	add    rsp,0x8
   13392:	mov    rdx,r12
   13395:	mov    rsi,rbp
   13398:	mov    rdi,rax
   1339b:	pop    rbp
   1339c:	pop    r12
   1339e:	jmp    3b80 <memcpy@plt>
   133a3:	call   13450 <xalloc_die>
   133a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000133b0 <ximemdup>:
   133b0:	endbr64 
   133b4:	push   r12
   133b6:	mov    r12,rsi
   133b9:	push   rbp
   133ba:	mov    rbp,rdi
   133bd:	mov    rdi,rsi
   133c0:	sub    rsp,0x8
   133c4:	call   3770 <malloc@plt>
   133c9:	test   rax,rax
   133cc:	je     133e3 <ximemdup+0x33>
   133ce:	add    rsp,0x8
   133d2:	mov    rdx,r12
   133d5:	mov    rsi,rbp
   133d8:	mov    rdi,rax
   133db:	pop    rbp
   133dc:	pop    r12
   133de:	jmp    3b80 <memcpy@plt>
   133e3:	call   13450 <xalloc_die>
   133e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000133f0 <ximemdup0>:
   133f0:	endbr64 
   133f4:	push   r12
   133f6:	mov    r12,rsi
   133f9:	push   rbp
   133fa:	mov    rbp,rdi
   133fd:	lea    rdi,[rsi+0x1]
   13401:	sub    rsp,0x8
   13405:	call   3770 <malloc@plt>
   1340a:	test   rax,rax
   1340d:	je     13429 <ximemdup0+0x39>
   1340f:	mov    BYTE PTR [rax+r12*1],0x0
   13414:	add    rsp,0x8
   13418:	mov    rdx,r12
   1341b:	mov    rsi,rbp
   1341e:	mov    rdi,rax
   13421:	pop    rbp
   13422:	pop    r12
   13424:	jmp    3b80 <memcpy@plt>
   13429:	call   13450 <xalloc_die>
   1342e:	xchg   ax,ax

0000000000013430 <xstrdup>:
   13430:	endbr64 
   13434:	push   rbp
   13435:	mov    rbp,rdi
   13438:	call   3980 <strlen@plt>
   1343d:	mov    rdi,rbp
   13440:	pop    rbp
   13441:	lea    rsi,[rax+0x1]
   13445:	jmp    13370 <xmemdup>
   1344a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000013450 <xalloc_die>:
   13450:	endbr64 
   13454:	push   rbp
   13455:	mov    edx,0x5
   1345a:	mov    ebp,DWORD PTR [rip+0xacd0]        # 1e130 <exit_failure>
   13460:	xor    edi,edi
   13462:	lea    rsi,[rip+0x49c6]        # 17e2f <version_etc_copyright+0x2f>
   13469:	call   3960 <dcgettext@plt>
   1346e:	lea    rdx,[rip+0x3d52]        # 171c7 <short_options+0x1d57>
   13475:	xor    esi,esi
   13477:	mov    edi,ebp
   13479:	mov    rcx,rax
   1347c:	xor    eax,eax
   1347e:	call   3ce0 <error@plt>
   13483:	call   3800 <abort@plt>
   13488:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000013490 <collate_error>:
   13490:	push   r15
   13492:	mov    r15,r8
   13495:	push   r14
   13497:	mov    r14,rcx
   1349a:	push   r13
   1349c:	mov    r13,rdx
   1349f:	mov    edx,0x5
   134a4:	push   r12
   134a6:	mov    r12,rsi
   134a9:	lea    rsi,[rip+0x4990]        # 17e40 <version_etc_copyright+0x40>
   134b0:	push   rbp
   134b1:	mov    ebp,edi
   134b3:	xor    edi,edi
   134b5:	push   rbx
   134b6:	sub    rsp,0x8
   134ba:	call   3960 <dcgettext@plt>
   134bf:	mov    esi,ebp
   134c1:	xor    edi,edi
   134c3:	mov    rdx,rax
   134c6:	xor    eax,eax
   134c8:	call   3ce0 <error@plt>
   134cd:	mov    edx,0x5
   134d2:	lea    rsi,[rip+0x4987]        # 17e60 <version_etc_copyright+0x60>
   134d9:	xor    edi,edi
   134db:	call   3960 <dcgettext@plt>
   134e0:	xor    esi,esi
   134e2:	xor    edi,edi
   134e4:	mov    rdx,rax
   134e7:	xor    eax,eax
   134e9:	call   3ce0 <error@plt>
   134ee:	mov    rcx,r15
   134f1:	mov    rdx,r14
   134f4:	mov    esi,0x8
   134f9:	mov    edi,0x1
   134fe:	mov    ebp,DWORD PTR [rip+0xac2c]        # 1e130 <exit_failure>
   13504:	call   111e0 <quotearg_n_style_mem>
   13509:	mov    rcx,r13
   1350c:	mov    rdx,r12
   1350f:	mov    esi,0x8
   13514:	xor    edi,edi
   13516:	mov    rbx,rax
   13519:	call   111e0 <quotearg_n_style_mem>
   1351e:	mov    edx,0x5
   13523:	lea    rsi,[rip+0x4966]        # 17e90 <version_etc_copyright+0x90>
   1352a:	xor    edi,edi
   1352c:	mov    r12,rax
   1352f:	call   3960 <dcgettext@plt>
   13534:	add    rsp,0x8
   13538:	mov    r8,rbx
   1353b:	mov    rcx,r12
   1353e:	pop    rbx
   1353f:	mov    rdx,rax
   13542:	mov    edi,ebp
   13544:	xor    esi,esi
   13546:	pop    rbp
   13547:	xor    eax,eax
   13549:	pop    r12
   1354b:	pop    r13
   1354d:	pop    r14
   1354f:	pop    r15
   13551:	jmp    3ce0 <error@plt>
   13556:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000013560 <xmemcoll>:
   13560:	endbr64 
   13564:	push   r14
   13566:	push   r13
   13568:	mov    r13,rdx
   1356b:	push   r12
   1356d:	mov    r12,rsi
   13570:	push   rbp
   13571:	mov    rbp,rdi
   13574:	push   rbx
   13575:	mov    rbx,rcx
   13578:	call   14330 <memcoll>
   1357d:	mov    r14d,eax
   13580:	call   3810 <__errno_location@plt>
   13585:	mov    edi,DWORD PTR [rax]
   13587:	test   edi,edi
   13589:	jne    135a0 <xmemcoll+0x40>
   1358b:	pop    rbx
   1358c:	mov    eax,r14d
   1358f:	pop    rbp
   13590:	pop    r12
   13592:	pop    r13
   13594:	pop    r14
   13596:	ret    
   13597:	nop    WORD PTR [rax+rax*1+0x0]
   135a0:	mov    r8,rbx
   135a3:	mov    rcx,r13
   135a6:	mov    rdx,r12
   135a9:	mov    rsi,rbp
   135ac:	call   13490 <collate_error>
   135b1:	pop    rbx
   135b2:	mov    eax,r14d
   135b5:	pop    rbp
   135b6:	pop    r12
   135b8:	pop    r13
   135ba:	pop    r14
   135bc:	ret    
   135bd:	nop    DWORD PTR [rax]

00000000000135c0 <xmemcoll0>:
   135c0:	endbr64 
   135c4:	push   r14
   135c6:	push   r13
   135c8:	mov    r13,rcx
   135cb:	push   r12
   135cd:	mov    r12,rdx
   135d0:	push   rbp
   135d1:	mov    rbp,rdi
   135d4:	push   rbx
   135d5:	mov    rbx,rsi
   135d8:	call   143e0 <memcoll0>
   135dd:	mov    r14d,eax
   135e0:	call   3810 <__errno_location@plt>
   135e5:	mov    edi,DWORD PTR [rax]
   135e7:	test   edi,edi
   135e9:	jne    13600 <xmemcoll0+0x40>
   135eb:	pop    rbx
   135ec:	mov    eax,r14d
   135ef:	pop    rbp
   135f0:	pop    r12
   135f2:	pop    r13
   135f4:	pop    r14
   135f6:	ret    
   135f7:	nop    WORD PTR [rax+rax*1+0x0]
   13600:	lea    rdx,[rbx-0x1]
   13604:	lea    r8,[r13-0x1]
   13608:	mov    rcx,r12
   1360b:	mov    rsi,rbp
   1360e:	call   13490 <collate_error>
   13613:	pop    rbx
   13614:	mov    eax,r14d
   13617:	pop    rbp
   13618:	pop    r12
   1361a:	pop    r13
   1361c:	pop    r14
   1361e:	ret    
   1361f:	nop

0000000000013620 <xnanosleep>:
   13620:	endbr64 
   13624:	push   rbp
   13625:	push   rbx
   13626:	sub    rsp,0x38
   1362a:	movsd  QWORD PTR [rsp+0x8],xmm0
   13630:	mov    rax,QWORD PTR fs:0x28
   13639:	mov    QWORD PTR [rsp+0x28],rax
   1363e:	xor    eax,eax
   13640:	call   3810 <__errno_location@plt>
   13645:	movsd  xmm1,QWORD PTR [rsp+0x8]
   1364b:	comisd xmm1,QWORD PTR [rip+0x3afd]        # 17150 <short_options+0x1ce0>
   13653:	mov    rbx,rax
   13656:	jae    136b0 <xnanosleep+0x90>
   13658:	movsd  xmm0,QWORD PTR [rsp+0x8]
   1365e:	lea    rbp,[rsp+0x10]
   13663:	call   13d40 <dtotimespec>
   13668:	mov    QWORD PTR [rsp+0x10],rax
   1366d:	mov    QWORD PTR [rsp+0x18],rdx
   13672:	jmp    13680 <xnanosleep+0x60>
   13674:	nop    DWORD PTR [rax+0x0]
   13678:	test   DWORD PTR [rbx],0xfffffffb
   1367e:	jne    136d0 <xnanosleep+0xb0>
   13680:	mov    DWORD PTR [rbx],0x0
   13686:	mov    rsi,rbp
   13689:	mov    rdi,rbp
   1368c:	call   14450 <rpl_nanosleep>
   13691:	test   eax,eax
   13693:	jne    13678 <xnanosleep+0x58>
   13695:	mov    rdx,QWORD PTR [rsp+0x28]
   1369a:	xor    rdx,QWORD PTR fs:0x28
   136a3:	jne    136d7 <xnanosleep+0xb7>
   136a5:	add    rsp,0x38
   136a9:	pop    rbx
   136aa:	pop    rbp
   136ab:	ret    
   136ac:	nop    DWORD PTR [rax+0x0]
   136b0:	call   3bf0 <pause@plt>
   136b5:	cmp    DWORD PTR [rbx],0x4
   136b8:	jne    13658 <xnanosleep+0x38>
   136ba:	call   3bf0 <pause@plt>
   136bf:	cmp    DWORD PTR [rbx],0x4
   136c2:	je     136b0 <xnanosleep+0x90>
   136c4:	jmp    13658 <xnanosleep+0x38>
   136c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   136d0:	mov    eax,0xffffffff
   136d5:	jmp    13695 <xnanosleep+0x75>
   136d7:	call   3990 <__stack_chk_fail@plt>
   136dc:	nop    DWORD PTR [rax+0x0]

00000000000136e0 <xstrtol_fatal>:
   136e0:	endbr64 
   136e4:	push   rbp
   136e5:	push   rbx
   136e6:	sub    rsp,0x28
   136ea:	mov    rax,QWORD PTR fs:0x28
   136f3:	mov    QWORD PTR [rsp+0x18],rax
   136f8:	xor    eax,eax
   136fa:	mov    ebp,DWORD PTR [rip+0xaa30]        # 1e130 <exit_failure>
   13700:	cmp    edi,0x3
   13703:	ja     13770 <xstrtol_fatal+0x90>
   13705:	cmp    edi,0x1
   13708:	ja     137a1 <xstrtol_fatal+0xc1>
   1370e:	jne    137ad <xstrtol_fatal+0xcd>
   13714:	lea    r10,[rip+0x47c2]        # 17edd <version_etc_copyright+0xdd>
   1371b:	movsxd rax,esi
   1371e:	test   esi,esi
   13720:	js     13787 <xstrtol_fatal+0xa7>
   13722:	shl    rax,0x5
   13726:	mov    rbx,QWORD PTR [rcx+rax*1]
   1372a:	lea    rcx,[rip+0x47e4]        # 17f15 <version_etc_copyright+0x115>
   13731:	mov    rsi,r10
   13734:	mov    edx,0x5
   13739:	xor    edi,edi
   1373b:	mov    QWORD PTR [rsp+0x8],r8
   13740:	mov    QWORD PTR [rsp],rcx
   13744:	call   3960 <dcgettext@plt>
   13749:	mov    r8,QWORD PTR [rsp+0x8]
   1374e:	mov    rcx,QWORD PTR [rsp]
   13752:	xor    esi,esi
   13754:	mov    rdx,rax
   13757:	mov    edi,ebp
   13759:	xor    eax,eax
   1375b:	mov    r9,r8
   1375e:	mov    r8,rbx
   13761:	call   3ce0 <error@plt>
   13766:	call   3800 <abort@plt>
   1376b:	nop    DWORD PTR [rax+rax*1+0x0]
   13770:	cmp    edi,0x4
   13773:	jne    3f07 <xstrtol_fatal.cold>
   13779:	lea    r10,[rip+0x477a]        # 17efa <version_etc_copyright+0xfa>
   13780:	movsxd rax,esi
   13783:	test   esi,esi
   13785:	jns    13722 <xstrtol_fatal+0x42>
   13787:	lea    rcx,[rip+0x4787]        # 17f15 <version_etc_copyright+0x115>
   1378e:	mov    BYTE PTR [rsp+0x16],dl
   13792:	lea    rbx,[rsp+0x16]
   13797:	mov    BYTE PTR [rsp+0x17],0x0
   1379c:	sub    rcx,rax
   1379f:	jmp    13731 <xstrtol_fatal+0x51>
   137a1:	lea    r10,[rip+0x4710]        # 17eb8 <version_etc_copyright+0xb8>
   137a8:	jmp    1371b <xstrtol_fatal+0x3b>
   137ad:	jmp    3f07 <xstrtol_fatal.cold>
   137b2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   137bc:	nop    DWORD PTR [rax+0x0]

00000000000137c0 <xstrtoumax>:
   137c0:	endbr64 
   137c4:	push   r15
   137c6:	push   r14
   137c8:	push   r13
   137ca:	push   r12
   137cc:	push   rbp
   137cd:	push   rbx
   137ce:	sub    rsp,0x28
   137d2:	mov    rax,QWORD PTR fs:0x28
   137db:	mov    QWORD PTR [rsp+0x18],rax
   137e0:	xor    eax,eax
   137e2:	cmp    edx,0x24
   137e5:	ja     13bdd <xstrtoumax+0x41d>
   137eb:	mov    r12,rsi
   137ee:	test   rsi,rsi
   137f1:	lea    rax,[rsp+0x10]
   137f6:	mov    r13,rdi
   137f9:	mov    DWORD PTR [rsp+0x8],edx
   137fd:	cmove  r12,rax
   13801:	mov    rbx,rcx
   13804:	mov    rbp,r8
   13807:	call   3810 <__errno_location@plt>
   1380c:	mov    DWORD PTR [rax],0x0
   13812:	mov    r14,rax
   13815:	movzx  r15d,BYTE PTR [r13+0x0]
   1381a:	call   3ec0 <__ctype_b_loc@plt>
   1381f:	mov    edx,DWORD PTR [rsp+0x8]
   13823:	mov    rsi,QWORD PTR [rax]
   13826:	mov    rax,r13
   13829:	jmp    13839 <xstrtoumax+0x79>
   1382b:	nop    DWORD PTR [rax+rax*1+0x0]
   13830:	movzx  r15d,BYTE PTR [rax+0x1]
   13835:	add    rax,0x1
   13839:	movzx  ecx,r15b
   1383d:	test   BYTE PTR [rsi+rcx*2+0x1],0x20
   13842:	jne    13830 <xstrtoumax+0x70>
   13844:	cmp    r15b,0x2d
   13848:	je     138bb <xstrtoumax+0xfb>
   1384a:	xor    ecx,ecx
   1384c:	mov    rsi,r12
   1384f:	mov    rdi,r13
   13852:	call   3a50 <__strtoul_internal@plt>
   13857:	mov    r15,QWORD PTR [r12]
   1385b:	mov    r8,rax
   1385e:	cmp    r15,r13
   13861:	je     138c8 <xstrtoumax+0x108>
   13863:	mov    eax,DWORD PTR [r14]
   13866:	test   eax,eax
   13868:	jne    138b0 <xstrtoumax+0xf0>
   1386a:	xor    r13d,r13d
   1386d:	test   rbp,rbp
   13870:	je     1387f <xstrtoumax+0xbf>
   13872:	movzx  r14d,BYTE PTR [r15]
   13876:	test   r14b,r14b
   13879:	jne    13980 <xstrtoumax+0x1c0>
   1387f:	mov    QWORD PTR [rbx],r8
   13882:	mov    rax,QWORD PTR [rsp+0x18]
   13887:	xor    rax,QWORD PTR fs:0x28
   13890:	jne    13bd8 <xstrtoumax+0x418>
   13896:	add    rsp,0x28
   1389a:	mov    eax,r13d
   1389d:	pop    rbx
   1389e:	pop    rbp
   1389f:	pop    r12
   138a1:	pop    r13
   138a3:	pop    r14
   138a5:	pop    r15
   138a7:	ret    
   138a8:	nop    DWORD PTR [rax+rax*1+0x0]
   138b0:	mov    r13d,0x1
   138b6:	cmp    eax,0x22
   138b9:	je     1386d <xstrtoumax+0xad>
   138bb:	mov    r13d,0x4
   138c1:	jmp    13882 <xstrtoumax+0xc2>
   138c3:	nop    DWORD PTR [rax+rax*1+0x0]
   138c8:	test   rbp,rbp
   138cb:	je     138bb <xstrtoumax+0xfb>
   138cd:	movzx  r14d,BYTE PTR [r13+0x0]
   138d2:	test   r14b,r14b
   138d5:	je     138bb <xstrtoumax+0xfb>
   138d7:	movsx  esi,r14b
   138db:	mov    rdi,rbp
   138de:	xor    r13d,r13d
   138e1:	call   39c0 <strchr@plt>
   138e6:	mov    r8d,0x1
   138ec:	test   rax,rax
   138ef:	je     138bb <xstrtoumax+0xfb>
   138f1:	lea    edx,[r14-0x45]
   138f5:	cmp    dl,0x2f
   138f8:	ja     1390e <xstrtoumax+0x14e>
   138fa:	lea    rcx,[rip+0x464f]        # 17f50 <version_etc_copyright+0x150>
   13901:	movzx  edx,dl
   13904:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   13908:	add    rdx,rcx
   1390b:	notrack jmp rdx
   1390e:	mov    esi,0x1
   13913:	mov    eax,0x400
   13918:	sub    r14d,0x42
   1391c:	cmp    r14b,0x35
   13920:	ja     1399f <xstrtoumax+0x1df>
   13922:	lea    rcx,[rip+0x46e7]        # 18010 <version_etc_copyright+0x210>
   13929:	movzx  r14d,r14b
   1392d:	movsxd rdx,DWORD PTR [rcx+r14*4]
   13931:	add    rdx,rcx
   13934:	notrack jmp rdx
   13937:	mov    esi,0x30
   1393c:	mov    rdi,rbp
   1393f:	mov    QWORD PTR [rsp+0x8],r8
   13944:	call   39c0 <strchr@plt>
   13949:	mov    r8,QWORD PTR [rsp+0x8]
   1394e:	test   rax,rax
   13951:	je     1390e <xstrtoumax+0x14e>
   13953:	movzx  eax,BYTE PTR [r15+0x1]
   13958:	cmp    al,0x44
   1395a:	je     13bbd <xstrtoumax+0x3fd>
   13960:	cmp    al,0x69
   13962:	je     139d6 <xstrtoumax+0x216>
   13964:	xor    esi,esi
   13966:	cmp    al,0x42
   13968:	mov    edx,0x400
   1396d:	sete   sil
   13971:	add    esi,0x1
   13974:	cmp    al,0x42
   13976:	mov    eax,0x3e8
   1397b:	cmovne eax,edx
   1397e:	jmp    13918 <xstrtoumax+0x158>
   13980:	movsx  esi,r14b
   13984:	mov    rdi,rbp
   13987:	mov    QWORD PTR [rsp+0x8],r8
   1398c:	call   39c0 <strchr@plt>
   13991:	mov    r8,QWORD PTR [rsp+0x8]
   13996:	test   rax,rax
   13999:	jne    138f1 <xstrtoumax+0x131>
   1399f:	mov    QWORD PTR [rbx],r8
   139a2:	or     r13d,0x2
   139a6:	jmp    13882 <xstrtoumax+0xc2>
   139ab:	movsxd rdx,eax
   139ae:	mov    rax,r8
   139b1:	mul    rdx
   139b4:	mov    r8,rax
   139b7:	jo     13a2c <xstrtoumax+0x26c>
   139b9:	movsxd rax,esi
   139bc:	add    r15,rax
   139bf:	mov    eax,r13d
   139c2:	or     eax,0x2
   139c5:	mov    QWORD PTR [r12],r15
   139c9:	cmp    BYTE PTR [r15],0x0
   139cd:	cmovne r13d,eax
   139d1:	jmp    1387f <xstrtoumax+0xbf>
   139d6:	xor    esi,esi
   139d8:	cmp    BYTE PTR [r15+0x2],0x42
   139dd:	mov    eax,0x400
   139e2:	sete   sil
   139e6:	lea    esi,[rsi+rsi*1+0x1]
   139ea:	jmp    13918 <xstrtoumax+0x158>
   139ef:	movsxd rcx,eax
   139f2:	mov    rax,r8
   139f5:	mul    rcx
   139f8:	jo     13a2c <xstrtoumax+0x26c>
   139fa:	mul    rcx
   139fd:	mov    r8,0xffffffffffffffff
   13a04:	mov    ecx,0x1
   13a09:	seto   dl
   13a0c:	movzx  edx,dl
   13a0f:	test   rdx,rdx
   13a12:	cmovne r13d,ecx
   13a16:	cmove  r8,rax
   13a1a:	jmp    139b9 <xstrtoumax+0x1f9>
   13a1c:	movsxd rcx,eax
   13a1f:	mov    rax,r8
   13a22:	mul    rcx
   13a25:	jo     13a2c <xstrtoumax+0x26c>
   13a27:	mul    rcx
   13a2a:	jno    139fa <xstrtoumax+0x23a>
   13a2c:	mov    r13d,0x1
   13a32:	or     r8,0xffffffffffffffff
   13a36:	jmp    139b9 <xstrtoumax+0x1f9>
   13a38:	nop    DWORD PTR [rax+rax*1+0x0]
   13a40:	mov    edi,0x4
   13a45:	xor    r9d,r9d
   13a48:	movsxd rcx,eax
   13a4b:	nop    DWORD PTR [rax+rax*1+0x0]
   13a50:	mov    rax,r8
   13a53:	mul    rcx
   13a56:	mov    r8,rax
   13a59:	jo     13bfc <xstrtoumax+0x43c>
   13a5f:	sub    edi,0x1
   13a62:	jne    13a50 <xstrtoumax+0x290>
   13a64:	or     r13d,r9d
   13a67:	jmp    139b9 <xstrtoumax+0x1f9>
   13a6c:	mov    rax,r8
   13a6f:	mov    edx,0x1
   13a74:	shl    rax,0xa
   13a78:	shr    r8,0x36
   13a7c:	mov    r8,0xffffffffffffffff
   13a83:	cmovne r13d,edx
   13a87:	cmove  r8,rax
   13a8b:	jmp    139b9 <xstrtoumax+0x1f9>
   13a90:	lea    rax,[r8+r8*1]
   13a94:	mov    edx,0x1
   13a99:	shr    r8,0x3f
   13a9d:	mov    r8,0xffffffffffffffff
   13aa4:	cmovne r13d,edx
   13aa8:	cmove  r8,rax
   13aac:	jmp    139b9 <xstrtoumax+0x1f9>
   13ab1:	mov    rax,r8
   13ab4:	mov    edx,0x1
   13ab9:	shl    rax,0x9
   13abd:	shr    r8,0x37
   13ac1:	mov    r8,0xffffffffffffffff
   13ac8:	cmovne r13d,edx
   13acc:	cmove  r8,rax
   13ad0:	jmp    139b9 <xstrtoumax+0x1f9>
   13ad5:	mov    edi,0x7
   13ada:	xor    r9d,r9d
   13add:	movsxd rcx,eax
   13ae0:	mov    rax,r8
   13ae3:	mul    rcx
   13ae6:	mov    r8,rax
   13ae9:	jo     13c0b <xstrtoumax+0x44b>
   13aef:	sub    edi,0x1
   13af2:	jne    13ae0 <xstrtoumax+0x320>
   13af4:	jmp    13a64 <xstrtoumax+0x2a4>
   13af9:	mov    edi,0x8
   13afe:	xor    r9d,r9d
   13b01:	movsxd rcx,eax
   13b04:	nop    DWORD PTR [rax+0x0]
   13b08:	mov    rax,r8
   13b0b:	mul    rcx
   13b0e:	mov    r8,rax
   13b11:	jo     13c1a <xstrtoumax+0x45a>
   13b17:	sub    edi,0x1
   13b1a:	jne    13b08 <xstrtoumax+0x348>
   13b1c:	jmp    13a64 <xstrtoumax+0x2a4>
   13b21:	mov    edi,0x5
   13b26:	xor    r9d,r9d
   13b29:	movsxd rcx,eax
   13b2c:	nop    DWORD PTR [rax+0x0]
   13b30:	mov    rax,r8
   13b33:	mul    rcx
   13b36:	mov    r8,rax
   13b39:	jo     13c38 <xstrtoumax+0x478>
   13b3f:	sub    edi,0x1
   13b42:	jne    13b30 <xstrtoumax+0x370>
   13b44:	jmp    13a64 <xstrtoumax+0x2a4>
   13b49:	mov    edi,0x9
   13b4e:	xor    r9d,r9d
   13b51:	movsxd rcx,eax
   13b54:	nop    DWORD PTR [rax+0x0]
   13b58:	mov    rax,r8
   13b5b:	mul    rcx
   13b5e:	mov    r8,rax
   13b61:	jo     13c29 <xstrtoumax+0x469>
   13b67:	sub    edi,0x1
   13b6a:	jne    13b58 <xstrtoumax+0x398>
   13b6c:	jmp    13a64 <xstrtoumax+0x2a4>
   13b71:	mov    edi,0x6
   13b76:	xor    r9d,r9d
   13b79:	movsxd rcx,eax
   13b7c:	nop    DWORD PTR [rax+0x0]
   13b80:	mov    rax,r8
   13b83:	mul    rcx
   13b86:	mov    r8,rax
   13b89:	jo     13c47 <xstrtoumax+0x487>
   13b8f:	sub    edi,0x1
   13b92:	jne    13b80 <xstrtoumax+0x3c0>
   13b94:	jmp    13a64 <xstrtoumax+0x2a4>
   13b99:	mov    edi,0xa
   13b9e:	xor    r9d,r9d
   13ba1:	movsxd rcx,eax
   13ba4:	nop    DWORD PTR [rax+0x0]
   13ba8:	mov    rax,r8
   13bab:	mul    rcx
   13bae:	mov    r8,rax
   13bb1:	jo     13bcc <xstrtoumax+0x40c>
   13bb3:	sub    edi,0x1
   13bb6:	jne    13ba8 <xstrtoumax+0x3e8>
   13bb8:	jmp    13a64 <xstrtoumax+0x2a4>
   13bbd:	mov    esi,0x2
   13bc2:	mov    eax,0x3e8
   13bc7:	jmp    13918 <xstrtoumax+0x158>
   13bcc:	mov    r9d,0x1
   13bd2:	or     r8,0xffffffffffffffff
   13bd6:	jmp    13bb3 <xstrtoumax+0x3f3>
   13bd8:	call   3990 <__stack_chk_fail@plt>
   13bdd:	lea    rcx,[rip+0x4504]        # 180e8 <__PRETTY_FUNCTION__.4260>
   13be4:	mov    edx,0x56
   13be9:	lea    rsi,[rip+0x4328]        # 17f18 <version_etc_copyright+0x118>
   13bf0:	lea    rdi,[rip+0x4331]        # 17f28 <version_etc_copyright+0x128>
   13bf7:	call   3a40 <__assert_fail@plt>
   13bfc:	mov    r9d,0x1
   13c02:	or     r8,0xffffffffffffffff
   13c06:	jmp    13a5f <xstrtoumax+0x29f>
   13c0b:	mov    r9d,0x1
   13c11:	or     r8,0xffffffffffffffff
   13c15:	jmp    13aef <xstrtoumax+0x32f>
   13c1a:	mov    r9d,0x1
   13c20:	or     r8,0xffffffffffffffff
   13c24:	jmp    13b17 <xstrtoumax+0x357>
   13c29:	mov    r9d,0x1
   13c2f:	or     r8,0xffffffffffffffff
   13c33:	jmp    13b67 <xstrtoumax+0x3a7>
   13c38:	mov    r9d,0x1
   13c3e:	or     r8,0xffffffffffffffff
   13c42:	jmp    13b3f <xstrtoumax+0x37f>
   13c47:	mov    r9d,0x1
   13c4d:	or     r8,0xffffffffffffffff
   13c51:	jmp    13b8f <xstrtoumax+0x3cf>
   13c56:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000013c60 <c_strcasecmp>:
   13c60:	endbr64 
   13c64:	cmp    rdi,rsi
   13c67:	je     13cc0 <c_strcasecmp+0x60>
   13c69:	push   rbx
   13c6a:	xor    edx,edx
   13c6c:	jmp    13c91 <c_strcasecmp+0x31>
   13c6e:	xchg   ax,ax
   13c70:	add    eax,0x20
   13c73:	add    r8d,0x20
   13c77:	cmp    r10d,0x19
   13c7b:	ja     13c88 <c_strcasecmp+0x28>
   13c7d:	lea    ebx,[r9+0x20]
   13c81:	add    ecx,0x20
   13c84:	test   eax,eax
   13c86:	je     13cbb <c_strcasecmp+0x5b>
   13c88:	add    rdx,0x1
   13c8c:	cmp    r8b,cl
   13c8f:	jne    13cbb <c_strcasecmp+0x5b>
   13c91:	movzx  eax,BYTE PTR [rdi+rdx*1]
   13c95:	movzx  r9d,BYTE PTR [rsi+rdx*1]
   13c9a:	lea    r11d,[rax-0x41]
   13c9e:	mov    r8d,eax
   13ca1:	mov    ecx,r9d
   13ca4:	mov    ebx,r9d
   13ca7:	lea    r10d,[r9-0x41]
   13cab:	cmp    r11d,0x19
   13caf:	jbe    13c70 <c_strcasecmp+0x10>
   13cb1:	cmp    r10d,0x19
   13cb5:	jbe    13c7d <c_strcasecmp+0x1d>
   13cb7:	test   eax,eax
   13cb9:	jne    13c88 <c_strcasecmp+0x28>
   13cbb:	sub    eax,ebx
   13cbd:	pop    rbx
   13cbe:	ret    
   13cbf:	nop
   13cc0:	xor    eax,eax
   13cc2:	ret    
   13cc3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13ccd:	nop    DWORD PTR [rax]

0000000000013cd0 <close_stream>:
   13cd0:	endbr64 
   13cd4:	push   r12
   13cd6:	push   rbp
   13cd7:	mov    rbp,rdi
   13cda:	push   rbx
   13cdb:	call   3860 <__fpending@plt>
   13ce0:	mov    ebx,DWORD PTR [rbp+0x0]
   13ce3:	mov    rdi,rbp
   13ce6:	mov    r12,rax
   13ce9:	and    ebx,0x20
   13cec:	call   d110 <rpl_fclose>
   13cf1:	test   ebx,ebx
   13cf3:	jne    13d18 <close_stream+0x48>
   13cf5:	test   eax,eax
   13cf7:	je     13d0e <close_stream+0x3e>
   13cf9:	test   r12,r12
   13cfc:	jne    13d2e <close_stream+0x5e>
   13cfe:	call   3810 <__errno_location@plt>
   13d03:	cmp    DWORD PTR [rax],0x9
   13d06:	setne  al
   13d09:	movzx  eax,al
   13d0c:	neg    eax
   13d0e:	pop    rbx
   13d0f:	pop    rbp
   13d10:	pop    r12
   13d12:	ret    
   13d13:	nop    DWORD PTR [rax+rax*1+0x0]
   13d18:	test   eax,eax
   13d1a:	jne    13d2e <close_stream+0x5e>
   13d1c:	call   3810 <__errno_location@plt>
   13d21:	mov    DWORD PTR [rax],0x0
   13d27:	mov    eax,0xffffffff
   13d2c:	jmp    13d0e <close_stream+0x3e>
   13d2e:	mov    eax,0xffffffff
   13d33:	jmp    13d0e <close_stream+0x3e>
   13d35:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13d3f:	nop

0000000000013d40 <dtotimespec>:
   13d40:	endbr64 
   13d44:	comisd xmm0,QWORD PTR [rip+0x43ac]        # 180f8 <__PRETTY_FUNCTION__.4260+0x10>
   13d4c:	jbe    13de0 <dtotimespec+0xa0>
   13d52:	movsd  xmm1,QWORD PTR [rip+0x33f6]        # 17150 <short_options+0x1ce0>
   13d5a:	comisd xmm1,xmm0
   13d5e:	ja     13d70 <dtotimespec+0x30>
   13d60:	movabs rax,0x7fffffffffffffff
   13d6a:	mov    edx,0x3b9ac9ff
   13d6f:	ret    
   13d70:	cvttsd2si rsi,xmm0
   13d75:	pxor   xmm1,xmm1
   13d79:	xor    ecx,ecx
   13d7b:	cvtsi2sd xmm1,rsi
   13d80:	subsd  xmm0,xmm1
   13d84:	mulsd  xmm0,QWORD PTR [rip+0x4374]        # 18100 <__PRETTY_FUNCTION__.4260+0x18>
   13d8c:	pxor   xmm1,xmm1
   13d90:	cvttsd2si rdx,xmm0
   13d95:	cvtsi2sd xmm1,rdx
   13d9a:	comisd xmm0,xmm1
   13d9e:	seta   cl
   13da1:	add    rcx,rdx
   13da4:	movabs rdx,0x112e0be826d694b3
   13dae:	mov    rax,rcx
   13db1:	imul   rdx
   13db4:	mov    rax,rcx
   13db7:	sar    rax,0x3f
   13dbb:	sar    rdx,0x1a
   13dbf:	sub    rdx,rax
   13dc2:	lea    rax,[rdx+rsi*1]
   13dc6:	imul   rdx,rdx,0x3b9aca00
   13dcd:	sub    rcx,rdx
   13dd0:	mov    rdx,rcx
   13dd3:	js     13df0 <dtotimespec+0xb0>
   13dd5:	ret    
   13dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13de0:	movabs rax,0x8000000000000000
   13dea:	xor    edx,edx
   13dec:	ret    
   13ded:	nop    DWORD PTR [rax]
   13df0:	sub    rax,0x1
   13df4:	add    rdx,0x3b9aca00
   13dfb:	ret    
   13dfc:	nop    DWORD PTR [rax+0x0]

0000000000013e00 <rpl_fcntl>:
   13e00:	endbr64 
   13e04:	push   r13
   13e06:	push   r12
   13e08:	push   rbp
   13e09:	sub    rsp,0x60
   13e0d:	mov    QWORD PTR [rsp+0x40],rdx
   13e12:	mov    QWORD PTR [rsp+0x48],rcx
   13e17:	mov    QWORD PTR [rsp+0x50],r8
   13e1c:	mov    QWORD PTR [rsp+0x58],r9
   13e21:	mov    rax,QWORD PTR fs:0x28
   13e2a:	mov    QWORD PTR [rsp+0x28],rax
   13e2f:	xor    eax,eax
   13e31:	lea    rax,[rsp+0x80]
   13e39:	mov    DWORD PTR [rsp+0x10],0x10
   13e41:	mov    QWORD PTR [rsp+0x18],rax
   13e46:	lea    rax,[rsp+0x30]
   13e4b:	mov    QWORD PTR [rsp+0x20],rax
   13e50:	test   esi,esi
   13e52:	je     13ed0 <rpl_fcntl+0xd0>
   13e54:	cmp    esi,0x406
   13e5a:	je     13f08 <rpl_fcntl+0x108>
   13e60:	cmp    esi,0xb
   13e63:	jg     13e90 <rpl_fcntl+0x90>
   13e65:	test   esi,esi
   13e67:	jg     13eb0 <rpl_fcntl+0xb0>
   13e69:	mov    eax,DWORD PTR [rsp+0x10]
   13e6d:	cmp    eax,0x2f
   13e70:	ja     14040 <rpl_fcntl+0x240>
   13e76:	add    rax,QWORD PTR [rsp+0x20]
   13e7b:	mov    rdx,QWORD PTR [rax]
   13e7e:	xor    eax,eax
   13e80:	call   38d0 <fcntl@plt>
   13e85:	mov    r12d,eax
   13e88:	jmp    13ee4 <rpl_fcntl+0xe4>
   13e8a:	nop    WORD PTR [rax+rax*1+0x0]
   13e90:	lea    edx,[rsi-0x400]
   13e96:	cmp    edx,0xa
   13e99:	ja     13e69 <rpl_fcntl+0x69>
   13e9b:	lea    rcx,[rip+0x4266]        # 18108 <__PRETTY_FUNCTION__.4260+0x20>
   13ea2:	movsxd rax,DWORD PTR [rcx+rdx*4]
   13ea6:	add    rax,rcx
   13ea9:	notrack jmp rax
   13eac:	nop    DWORD PTR [rax+0x0]
   13eb0:	cmp    esi,0xb
   13eb3:	ja     13e69 <rpl_fcntl+0x69>
   13eb5:	lea    rcx,[rip+0x4278]        # 18134 <__PRETTY_FUNCTION__.4260+0x4c>
   13ebc:	mov    edx,esi
   13ebe:	movsxd rax,DWORD PTR [rcx+rdx*4]
   13ec2:	add    rax,rcx
   13ec5:	notrack jmp rax
   13ec8:	nop    DWORD PTR [rax+rax*1+0x0]
   13ed0:	mov    rax,QWORD PTR [rsp+0x20]
   13ed5:	xor    esi,esi
   13ed7:	mov    edx,DWORD PTR [rax+0x10]
   13eda:	xor    eax,eax
   13edc:	call   38d0 <fcntl@plt>
   13ee1:	mov    r12d,eax
   13ee4:	mov    rax,QWORD PTR [rsp+0x28]
   13ee9:	xor    rax,QWORD PTR fs:0x28
   13ef2:	jne    1404a <rpl_fcntl+0x24a>
   13ef8:	add    rsp,0x60
   13efc:	mov    eax,r12d
   13eff:	pop    rbp
   13f00:	pop    r12
   13f02:	pop    r13
   13f04:	ret    
   13f05:	nop    DWORD PTR [rax]
   13f08:	mov    rax,QWORD PTR [rsp+0x20]
   13f0d:	mov    DWORD PTR [rsp+0x10],0x18
   13f15:	mov    r13d,DWORD PTR [rax+0x10]
   13f19:	mov    eax,DWORD PTR [rip+0xaad9]        # 1e9f8 <have_dupfd_cloexec.4151>
   13f1f:	mov    edx,r13d
   13f22:	test   eax,eax
   13f24:	js     13f80 <rpl_fcntl+0x180>
   13f26:	mov    esi,0x406
   13f2b:	xor    eax,eax
   13f2d:	mov    DWORD PTR [rsp+0xc],edi
   13f31:	call   38d0 <fcntl@plt>
   13f36:	mov    r12d,eax
   13f39:	test   eax,eax
   13f3b:	js     13ff8 <rpl_fcntl+0x1f8>
   13f41:	mov    DWORD PTR [rip+0xaaad],0x1        # 1e9f8 <have_dupfd_cloexec.4151>
   13f4b:	jmp    13ee4 <rpl_fcntl+0xe4>
   13f4d:	xor    eax,eax
   13f4f:	call   38d0 <fcntl@plt>
   13f54:	mov    r12d,eax
   13f57:	jmp    13ee4 <rpl_fcntl+0xe4>
   13f59:	mov    eax,DWORD PTR [rsp+0x10]
   13f5d:	cmp    eax,0x2f
   13f60:	ja     14030 <rpl_fcntl+0x230>
   13f66:	add    rax,QWORD PTR [rsp+0x20]
   13f6b:	mov    edx,DWORD PTR [rax]
   13f6d:	xor    eax,eax
   13f6f:	call   38d0 <fcntl@plt>
   13f74:	mov    r12d,eax
   13f77:	jmp    13ee4 <rpl_fcntl+0xe4>
   13f7c:	nop    DWORD PTR [rax+0x0]
   13f80:	xor    esi,esi
   13f82:	xor    eax,eax
   13f84:	call   38d0 <fcntl@plt>
   13f89:	mov    r12d,eax
   13f8c:	test   eax,eax
   13f8e:	js     13ee4 <rpl_fcntl+0xe4>
   13f94:	cmp    DWORD PTR [rip+0xaa5d],0xffffffff        # 1e9f8 <have_dupfd_cloexec.4151>
   13f9b:	jne    13ee4 <rpl_fcntl+0xe4>
   13fa1:	xor    eax,eax
   13fa3:	mov    esi,0x1
   13fa8:	mov    edi,r12d
   13fab:	call   38d0 <fcntl@plt>
   13fb0:	test   eax,eax
   13fb2:	js     13fd1 <rpl_fcntl+0x1d1>
   13fb4:	or     eax,0x1
   13fb7:	mov    esi,0x2
   13fbc:	mov    edi,r12d
   13fbf:	mov    edx,eax
   13fc1:	xor    eax,eax
   13fc3:	call   38d0 <fcntl@plt>
   13fc8:	cmp    eax,0xffffffff
   13fcb:	jne    13ee4 <rpl_fcntl+0xe4>
   13fd1:	call   3810 <__errno_location@plt>
   13fd6:	mov    edi,r12d
   13fd9:	or     r12d,0xffffffff
   13fdd:	mov    r13d,DWORD PTR [rax]
   13fe0:	mov    rbp,rax
   13fe3:	call   3a80 <close@plt>
   13fe8:	mov    DWORD PTR [rbp+0x0],r13d
   13fec:	jmp    13ee4 <rpl_fcntl+0xe4>
   13ff1:	nop    DWORD PTR [rax+0x0]
   13ff8:	call   3810 <__errno_location@plt>
   13ffd:	mov    edi,DWORD PTR [rsp+0xc]
   14001:	cmp    DWORD PTR [rax],0x16
   14004:	jne    13f41 <rpl_fcntl+0x141>
   1400a:	mov    edx,r13d
   1400d:	xor    esi,esi
   1400f:	xor    eax,eax
   14011:	call   38d0 <fcntl@plt>
   14016:	mov    r12d,eax
   14019:	test   eax,eax
   1401b:	js     13ee4 <rpl_fcntl+0xe4>
   14021:	mov    DWORD PTR [rip+0xa9cd],0xffffffff        # 1e9f8 <have_dupfd_cloexec.4151>
   1402b:	jmp    13fa1 <rpl_fcntl+0x1a1>
   14030:	mov    rax,QWORD PTR [rsp+0x18]
   14035:	jmp    13f6b <rpl_fcntl+0x16b>
   1403a:	nop    WORD PTR [rax+rax*1+0x0]
   14040:	mov    rax,QWORD PTR [rsp+0x18]
   14045:	jmp    13e7b <rpl_fcntl+0x7b>
   1404a:	call   3990 <__stack_chk_fail@plt>
   1404f:	nop

0000000000014050 <fd_safer_flag>:
   14050:	endbr64 
   14054:	push   r13
   14056:	push   r12
   14058:	mov    r12d,edi
   1405b:	push   rbp
   1405c:	push   rbx
   1405d:	sub    rsp,0x8
   14061:	cmp    edi,0x2
   14064:	jbe    14078 <fd_safer_flag+0x28>
   14066:	add    rsp,0x8
   1406a:	mov    eax,r12d
   1406d:	pop    rbx
   1406e:	pop    rbp
   1406f:	pop    r12
   14071:	pop    r13
   14073:	ret    
   14074:	nop    DWORD PTR [rax+0x0]
   14078:	call   140b0 <dup_safer_flag>
   1407d:	mov    ebp,eax
   1407f:	call   3810 <__errno_location@plt>
   14084:	mov    edi,r12d
   14087:	mov    r12d,ebp
   1408a:	mov    r13d,DWORD PTR [rax]
   1408d:	mov    rbx,rax
   14090:	call   3a80 <close@plt>
   14095:	mov    eax,r12d
   14098:	mov    DWORD PTR [rbx],r13d
   1409b:	add    rsp,0x8
   1409f:	pop    rbx
   140a0:	pop    rbp
   140a1:	pop    r12
   140a3:	pop    r13
   140a5:	ret    
   140a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000140b0 <dup_safer_flag>:
   140b0:	endbr64 
   140b4:	and    esi,0x80000
   140ba:	mov    eax,0x406
   140bf:	mov    edx,0x3
   140c4:	cmovne esi,eax
   140c7:	xor    eax,eax
   140c9:	jmp    13e00 <rpl_fcntl>
   140ce:	xchg   ax,ax

00000000000140d0 <fopen_safer>:
   140d0:	endbr64 
   140d4:	push   r13
   140d6:	push   r12
   140d8:	push   rbp
   140d9:	mov    rbp,rsi
   140dc:	call   14870 <rpl_fopen>
   140e1:	mov    r12,rax
   140e4:	test   rax,rax
   140e7:	je     140f6 <fopen_safer+0x26>
   140e9:	mov    rdi,rax
   140ec:	call   3b90 <fileno@plt>
   140f1:	cmp    eax,0x2
   140f4:	jbe    14100 <fopen_safer+0x30>
   140f6:	mov    rax,r12
   140f9:	pop    rbp
   140fa:	pop    r12
   140fc:	pop    r13
   140fe:	ret    
   140ff:	nop
   14100:	mov    edi,eax
   14102:	call   14850 <dup_safer>
   14107:	mov    r13d,eax
   1410a:	test   eax,eax
   1410c:	js     14150 <fopen_safer+0x80>
   1410e:	mov    rdi,r12
   14111:	call   d110 <rpl_fclose>
   14116:	test   eax,eax
   14118:	jne    1412d <fopen_safer+0x5d>
   1411a:	mov    rsi,rbp
   1411d:	mov    edi,r13d
   14120:	call   3c80 <fdopen@plt>
   14125:	mov    r12,rax
   14128:	test   rax,rax
   1412b:	jne    140f6 <fopen_safer+0x26>
   1412d:	call   3810 <__errno_location@plt>
   14132:	mov    edi,r13d
   14135:	mov    r12d,DWORD PTR [rax]
   14138:	mov    rbp,rax
   1413b:	call   3a80 <close@plt>
   14140:	mov    DWORD PTR [rbp+0x0],r12d
   14144:	xor    r12d,r12d
   14147:	jmp    140f6 <fopen_safer+0x26>
   14149:	nop    DWORD PTR [rax+0x0]
   14150:	call   3810 <__errno_location@plt>
   14155:	mov    rdi,r12
   14158:	xor    r12d,r12d
   1415b:	mov    r13d,DWORD PTR [rax]
   1415e:	mov    rbp,rax
   14161:	call   d110 <rpl_fclose>
   14166:	mov    DWORD PTR [rbp+0x0],r13d
   1416a:	jmp    140f6 <fopen_safer+0x26>
   1416c:	nop    DWORD PTR [rax+0x0]

0000000000014170 <locale_charset>:
   14170:	endbr64 
   14174:	sub    rsp,0x8
   14178:	mov    edi,0xe
   1417d:	call   3c10 <nl_langinfo@plt>
   14182:	test   rax,rax
   14185:	je     141a0 <locale_charset+0x30>
   14187:	cmp    BYTE PTR [rax],0x0
   1418a:	lea    rdx,[rip+0x3fd3]        # 18164 <__PRETTY_FUNCTION__.4260+0x7c>
   14191:	cmove  rax,rdx
   14195:	add    rsp,0x8
   14199:	ret    
   1419a:	nop    WORD PTR [rax+rax*1+0x0]
   141a0:	lea    rax,[rip+0x3fbd]        # 18164 <__PRETTY_FUNCTION__.4260+0x7c>
   141a7:	add    rsp,0x8
   141ab:	ret    
   141ac:	nop    DWORD PTR [rax+0x0]

00000000000141b0 <rpl_mbrtoc32>:
   141b0:	endbr64 
   141b4:	push   r14
   141b6:	xor    r14d,r14d
   141b9:	push   r13
   141bb:	mov    r13d,0x1
   141c1:	push   r12
   141c3:	push   rbp
   141c4:	lea    rbp,[rip+0x2a9d]        # 16c68 <short_options+0x17f8>
   141cb:	push   rbx
   141cc:	mov    rbx,rcx
   141cf:	test   rsi,rsi
   141d2:	je     141dd <rpl_mbrtoc32+0x2d>
   141d4:	mov    r14,rdi
   141d7:	mov    rbp,rsi
   141da:	mov    r13,rdx
   141dd:	test   rbx,rbx
   141e0:	lea    rax,[rip+0xa819]        # 1ea00 <internal_state>
   141e7:	mov    rdx,r13
   141ea:	mov    rsi,rbp
   141ed:	cmove  rbx,rax
   141f1:	mov    rdi,r14
   141f4:	mov    rcx,rbx
   141f7:	call   3a90 <mbrtoc32@plt>
   141fc:	mov    r12,rax
   141ff:	cmp    rax,0xfffffffffffffffc
   14203:	ja     14220 <rpl_mbrtoc32+0x70>
   14205:	mov    rdi,rbx
   14208:	call   3e50 <mbsinit@plt>
   1420d:	test   eax,eax
   1420f:	je     14250 <rpl_mbrtoc32+0xa0>
   14211:	pop    rbx
   14212:	mov    rax,r12
   14215:	pop    rbp
   14216:	pop    r12
   14218:	pop    r13
   1421a:	pop    r14
   1421c:	ret    
   1421d:	nop    DWORD PTR [rax]
   14220:	cmp    rax,0xfffffffffffffffd
   14224:	je     3f0c <rpl_mbrtoc32.cold>
   1422a:	test   r13,r13
   1422d:	je     14211 <rpl_mbrtoc32+0x61>
   1422f:	xor    edi,edi
   14231:	call   d840 <hard_locale>
   14236:	test   al,al
   14238:	jne    14211 <rpl_mbrtoc32+0x61>
   1423a:	mov    r12d,0x1
   14240:	test   r14,r14
   14243:	je     14211 <rpl_mbrtoc32+0x61>
   14245:	movzx  eax,BYTE PTR [rbp+0x0]
   14249:	mov    DWORD PTR [r14],eax
   1424c:	jmp    14211 <rpl_mbrtoc32+0x61>
   1424e:	xchg   ax,ax
   14250:	mov    QWORD PTR [rbx],0x0
   14257:	mov    rax,r12
   1425a:	pop    rbx
   1425b:	pop    rbp
   1425c:	pop    r12
   1425e:	pop    r13
   14260:	pop    r14
   14262:	ret    
   14263:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1426d:	nop    DWORD PTR [rax]

0000000000014270 <strcoll_loop>:
   14270:	push   r15
   14272:	mov    r15,rdi
   14275:	push   r14
   14277:	push   r13
   14279:	mov    r13,rsi
   1427c:	push   r12
   1427e:	mov    r12,rcx
   14281:	push   rbp
   14282:	mov    rbp,rdx
   14285:	push   rbx
   14286:	sub    rsp,0x8
   1428a:	call   3810 <__errno_location@plt>
   1428f:	mov    r14,rax
   14292:	jmp    142c3 <strcoll_loop+0x53>
   14294:	nop    DWORD PTR [rax+0x0]
   14298:	mov    rdi,r15
   1429b:	call   3980 <strlen@plt>
   142a0:	mov    rdi,rbp
   142a3:	lea    rbx,[rax+0x1]
   142a7:	call   3980 <strlen@plt>
   142ac:	add    r15,rbx
   142af:	add    rax,0x1
   142b3:	add    rbp,rax
   142b6:	sub    r12,rax
   142b9:	sub    r13,rbx
   142bc:	je     142f0 <strcoll_loop+0x80>
   142be:	test   r12,r12
   142c1:	je     14310 <strcoll_loop+0xa0>
   142c3:	mov    DWORD PTR [r14],0x0
   142ca:	mov    rsi,rbp
   142cd:	mov    rdi,r15
   142d0:	call   3c30 <strcoll@plt>
   142d5:	test   eax,eax
   142d7:	je     14298 <strcoll_loop+0x28>
   142d9:	add    rsp,0x8
   142dd:	pop    rbx
   142de:	pop    rbp
   142df:	pop    r12
   142e1:	pop    r13
   142e3:	pop    r14
   142e5:	pop    r15
   142e7:	ret    
   142e8:	nop    DWORD PTR [rax+rax*1+0x0]
   142f0:	xor    eax,eax
   142f2:	test   r12,r12
   142f5:	setne  al
   142f8:	add    rsp,0x8
   142fc:	pop    rbx
   142fd:	neg    eax
   142ff:	pop    rbp
   14300:	pop    r12
   14302:	pop    r13
   14304:	pop    r14
   14306:	pop    r15
   14308:	ret    
   14309:	nop    DWORD PTR [rax+0x0]
   14310:	add    rsp,0x8
   14314:	mov    eax,0x1
   14319:	pop    rbx
   1431a:	pop    rbp
   1431b:	pop    r12
   1431d:	pop    r13
   1431f:	pop    r14
   14321:	pop    r15
   14323:	ret    
   14324:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1432f:	nop

0000000000014330 <memcoll>:
   14330:	endbr64 
   14334:	push   r15
   14336:	push   r14
   14338:	push   r13
   1433a:	mov    r13,rdx
   1433d:	push   r12
   1433f:	mov    r12,rdi
   14342:	push   rbp
   14343:	mov    rbp,rcx
   14346:	push   rbx
   14347:	mov    rbx,rsi
   1434a:	sub    rsp,0x18
   1434e:	cmp    rsi,rcx
   14351:	jne    14366 <memcoll+0x36>
   14353:	mov    rdx,rsi
   14356:	mov    rsi,r13
   14359:	call   3ad0 <memcmp@plt>
   1435e:	test   eax,eax
   14360:	mov    DWORD PTR [rsp+0x8],eax
   14364:	je     143c8 <memcoll+0x98>
   14366:	lea    r15,[r12+rbx*1]
   1436a:	lea    r14,[r13+rbp*1+0x0]
   1436f:	mov    rdx,r13
   14372:	mov    rdi,r12
   14375:	movzx  r9d,BYTE PTR [r15]
   14379:	movzx  r8d,BYTE PTR [r14]
   1437d:	mov    BYTE PTR [r15],0x0
   14381:	lea    rcx,[rbp+0x1]
   14385:	mov    BYTE PTR [r14],0x0
   14389:	lea    rsi,[rbx+0x1]
   1438d:	mov    BYTE PTR [rsp+0xf],r9b
   14392:	mov    BYTE PTR [rsp+0x8],r8b
   14397:	call   14270 <strcoll_loop>
   1439c:	movzx  r9d,BYTE PTR [rsp+0xf]
   143a2:	movzx  r8d,BYTE PTR [rsp+0x8]
   143a8:	mov    r10d,eax
   143ab:	mov    BYTE PTR [r15],r9b
   143ae:	mov    BYTE PTR [r14],r8b
   143b1:	add    rsp,0x18
   143b5:	mov    eax,r10d
   143b8:	pop    rbx
   143b9:	pop    rbp
   143ba:	pop    r12
   143bc:	pop    r13
   143be:	pop    r14
   143c0:	pop    r15
   143c2:	ret    
   143c3:	nop    DWORD PTR [rax+rax*1+0x0]
   143c8:	call   3810 <__errno_location@plt>
   143cd:	mov    r10d,DWORD PTR [rsp+0x8]
   143d2:	mov    DWORD PTR [rax],0x0
   143d8:	jmp    143b1 <memcoll+0x81>
   143da:	nop    WORD PTR [rax+rax*1+0x0]

00000000000143e0 <memcoll0>:
   143e0:	endbr64 
   143e4:	push   r14
   143e6:	mov    r14,rdx
   143e9:	push   r13
   143eb:	mov    r13,rdi
   143ee:	push   r12
   143f0:	mov    r12,rcx
   143f3:	push   rbp
   143f4:	mov    rbp,rsi
   143f7:	sub    rsp,0x8
   143fb:	cmp    rsi,rcx
   143fe:	jne    14430 <memcoll0+0x50>
   14400:	mov    rdx,rsi
   14403:	mov    rsi,r14
   14406:	call   3ad0 <memcmp@plt>
   1440b:	test   eax,eax
   1440d:	jne    14430 <memcoll0+0x50>
   1440f:	call   3810 <__errno_location@plt>
   14414:	mov    DWORD PTR [rax],0x0
   1441a:	add    rsp,0x8
   1441e:	xor    eax,eax
   14420:	pop    rbp
   14421:	pop    r12
   14423:	pop    r13
   14425:	pop    r14
   14427:	ret    
   14428:	nop    DWORD PTR [rax+rax*1+0x0]
   14430:	add    rsp,0x8
   14434:	mov    rcx,r12
   14437:	mov    rdx,r14
   1443a:	mov    rsi,rbp
   1443d:	mov    rdi,r13
   14440:	pop    rbp
   14441:	pop    r12
   14443:	pop    r13
   14445:	pop    r14
   14447:	jmp    14270 <strcoll_loop>
   1444c:	nop    DWORD PTR [rax+0x0]

0000000000014450 <rpl_nanosleep>:
   14450:	endbr64 
   14454:	push   r12
   14456:	push   rbp
   14457:	push   rbx
   14458:	sub    rsp,0x20
   1445c:	mov    rax,QWORD PTR fs:0x28
   14465:	mov    QWORD PTR [rsp+0x18],rax
   1446a:	xor    eax,eax
   1446c:	cmp    QWORD PTR [rdi+0x8],0x3b9ac9ff
   14474:	ja     14508 <rpl_nanosleep+0xb8>
   1447a:	movdqu xmm0,XMMWORD PTR [rdi]
   1447e:	mov    rbx,QWORD PTR [rdi]
   14481:	mov    rbp,rsi
   14484:	mov    r12,rsp
   14487:	movaps XMMWORD PTR [rsp],xmm0
   1448b:	cmp    rbx,0x1fa400
   14492:	jg     144b2 <rpl_nanosleep+0x62>
   14494:	jmp    144e0 <rpl_nanosleep+0x90>
   14496:	nop    WORD PTR cs:[rax+rax*1+0x0]
   144a0:	mov    QWORD PTR [rsp+0x8],0x0
   144a9:	cmp    rbx,0x1fa400
   144b0:	jle    144e0 <rpl_nanosleep+0x90>
   144b2:	mov    rsi,rbp
   144b5:	mov    rdi,r12
   144b8:	mov    QWORD PTR [rsp],0x1fa400
   144c0:	sub    rbx,0x1fa400
   144c7:	call   39e0 <nanosleep@plt>
   144cc:	test   eax,eax
   144ce:	je     144a0 <rpl_nanosleep+0x50>
   144d0:	test   rbp,rbp
   144d3:	je     144ef <rpl_nanosleep+0x9f>
   144d5:	add    QWORD PTR [rbp+0x0],rbx
   144d9:	jmp    144ef <rpl_nanosleep+0x9f>
   144db:	nop    DWORD PTR [rax+rax*1+0x0]
   144e0:	mov    rsi,rbp
   144e3:	mov    rdi,r12
   144e6:	mov    QWORD PTR [rsp],rbx
   144ea:	call   39e0 <nanosleep@plt>
   144ef:	mov    rdx,QWORD PTR [rsp+0x18]
   144f4:	xor    rdx,QWORD PTR fs:0x28
   144fd:	jne    1451a <rpl_nanosleep+0xca>
   144ff:	add    rsp,0x20
   14503:	pop    rbx
   14504:	pop    rbp
   14505:	pop    r12
   14507:	ret    
   14508:	call   3810 <__errno_location@plt>
   1450d:	mov    DWORD PTR [rax],0x16
   14513:	mov    eax,0xffffffff
   14518:	jmp    144ef <rpl_nanosleep+0x9f>
   1451a:	call   3990 <__stack_chk_fail@plt>
   1451f:	nop

0000000000014520 <print_and_abort>:
   14520:	endbr64 
   14524:	push   rax
   14525:	pop    rax
   14526:	mov    edx,0x5
   1452b:	lea    rsi,[rip+0x38fd]        # 17e2f <version_etc_copyright+0x2f>
   14532:	xor    edi,edi
   14534:	sub    rsp,0x8
   14538:	call   3960 <dcgettext@plt>
   1453d:	mov    rdi,QWORD PTR [rip+0x9cbc]        # 1e200 <stderr@@GLIBC_2.2.5>
   14544:	mov    esi,0x1
   14549:	lea    rdx,[rip+0x358f]        # 17adf <__PRETTY_FUNCTION__.5018+0x17>
   14550:	mov    rcx,rax
   14553:	xor    eax,eax
   14555:	call   3e00 <__fprintf_chk@plt>
   1455a:	mov    edi,DWORD PTR [rip+0x9bd0]        # 1e130 <exit_failure>
   14560:	call   3de0 <exit@plt>
   14565:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000014570 <call_chunkfun>:
   14570:	mov    rax,QWORD PTR [rdi+0x38]
   14574:	test   BYTE PTR [rdi+0x50],0x1
   14578:	je     14580 <call_chunkfun+0x10>
   1457a:	mov    rdi,QWORD PTR [rdi+0x48]
   1457e:	jmp    rax
   14580:	mov    rdi,rsi
   14583:	jmp    rax
   14585:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000014590 <call_freefun>:
   14590:	mov    rax,QWORD PTR [rdi+0x40]
   14594:	test   BYTE PTR [rdi+0x50],0x1
   14598:	je     145a0 <call_freefun+0x10>
   1459a:	mov    rdi,QWORD PTR [rdi+0x48]
   1459e:	jmp    rax
   145a0:	mov    rdi,rsi
   145a3:	jmp    rax
   145a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000145b0 <_obstack_begin_worker>:
   145b0:	push   r12
   145b2:	push   rbp
   145b3:	push   rbx
   145b4:	mov    rbx,rdi
   145b7:	test   rdx,rdx
   145ba:	je     14620 <_obstack_begin_worker+0x70>
   145bc:	mov    rbp,rdx
   145bf:	lea    r12,[rdx-0x1]
   145c3:	test   rsi,rsi
   145c6:	mov    eax,0xfe0
   145cb:	mov    QWORD PTR [rbx+0x30],r12
   145cf:	mov    rdi,rbx
   145d2:	cmove  rsi,rax
   145d6:	mov    QWORD PTR [rbx],rsi
   145d9:	call   14570 <call_chunkfun>
   145de:	mov    QWORD PTR [rbx+0x8],rax
   145e2:	test   rax,rax
   145e5:	je     1462d <_obstack_begin_worker+0x7d>
   145e7:	lea    rdx,[rax+r12*1+0x10]
   145ec:	neg    rbp
   145ef:	and    rbp,rdx
   145f2:	mov    rdx,QWORD PTR [rbx]
   145f5:	mov    QWORD PTR [rbx+0x10],rbp
   145f9:	add    rdx,rax
   145fc:	mov    QWORD PTR [rbx+0x18],rbp
   14600:	mov    QWORD PTR [rax],rdx
   14603:	mov    QWORD PTR [rbx+0x20],rdx
   14607:	mov    QWORD PTR [rax+0x8],0x0
   1460f:	mov    eax,0x1
   14614:	and    BYTE PTR [rbx+0x50],0xf9
   14618:	pop    rbx
   14619:	pop    rbp
   1461a:	pop    r12
   1461c:	ret    
   1461d:	nop    DWORD PTR [rax]
   14620:	mov    r12d,0xf
   14626:	mov    ebp,0x10
   1462b:	jmp    145c3 <_obstack_begin_worker+0x13>
   1462d:	call   QWORD PTR [rip+0x9b6d]        # 1e1a0 <obstack_alloc_failed_handler>
   14633:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1463e:	xchg   ax,ax

0000000000014640 <_obstack_begin>:
   14640:	endbr64 
   14644:	and    BYTE PTR [rdi+0x50],0xfe
   14648:	mov    QWORD PTR [rdi+0x38],rcx
   1464c:	mov    QWORD PTR [rdi+0x40],r8
   14650:	jmp    145b0 <_obstack_begin_worker>
   14655:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000014660 <_obstack_begin_1>:
   14660:	endbr64 
   14664:	or     BYTE PTR [rdi+0x50],0x1
   14668:	mov    QWORD PTR [rdi+0x38],rcx
   1466c:	mov    QWORD PTR [rdi+0x40],r8
   14670:	mov    QWORD PTR [rdi+0x48],r9
   14674:	jmp    145b0 <_obstack_begin_worker>
   14679:	nop    DWORD PTR [rax+0x0]

0000000000014680 <_obstack_newchunk>:
   14680:	endbr64 
   14684:	push   r14
   14686:	xor    eax,eax
   14688:	push   r13
   1468a:	push   r12
   1468c:	push   rbp
   1468d:	push   rbx
   1468e:	mov    r14,QWORD PTR [rdi+0x18]
   14692:	sub    r14,QWORD PTR [rdi+0x10]
   14696:	mov    rbp,QWORD PTR [rdi+0x8]
   1469a:	add    rsi,r14
   1469d:	mov    rdx,r14
   146a0:	setb   al
   146a3:	add    rsi,QWORD PTR [rdi+0x30]
   146a7:	setb   cl
   146aa:	shr    rdx,0x3
   146ae:	cmp    QWORD PTR [rdi],rsi
   146b1:	lea    r12,[rsi+rdx*1+0x64]
   146b6:	cmovae rsi,QWORD PTR [rdi]
   146ba:	cmp    rsi,r12
   146bd:	cmovae r12,rsi
   146c1:	test   rax,rax
   146c4:	jne    14765 <_obstack_newchunk+0xe5>
   146ca:	movzx  ecx,cl
   146cd:	test   rcx,rcx
   146d0:	jne    14765 <_obstack_newchunk+0xe5>
   146d6:	mov    rsi,r12
   146d9:	mov    rbx,rdi
   146dc:	call   14570 <call_chunkfun>
   146e1:	mov    r13,rax
   146e4:	test   rax,rax
   146e7:	je     14765 <_obstack_newchunk+0xe5>
   146e9:	lea    rsi,[rax+r12*1]
   146ed:	mov    QWORD PTR [rbx+0x8],rax
   146f1:	mov    rdx,r14
   146f4:	mov    QWORD PTR [rax+0x8],rbp
   146f8:	mov    QWORD PTR [rbx+0x20],rsi
   146fc:	mov    QWORD PTR [rax],rsi
   146ff:	mov    rax,QWORD PTR [rbx+0x30]
   14703:	mov    rsi,QWORD PTR [rbx+0x10]
   14707:	lea    r12,[r13+rax*1+0x10]
   1470c:	not    rax
   1470f:	and    r12,rax
   14712:	mov    rdi,r12
   14715:	call   3b80 <memcpy@plt>
   1471a:	test   BYTE PTR [rbx+0x50],0x2
   1471e:	jne    14735 <_obstack_newchunk+0xb5>
   14720:	mov    rax,QWORD PTR [rbx+0x30]
   14724:	lea    rdx,[rbp+rax*1+0x10]
   14729:	not    rax
   1472c:	and    rax,rdx
   1472f:	cmp    QWORD PTR [rbx+0x10],rax
   14733:	je     14750 <_obstack_newchunk+0xd0>
   14735:	add    r14,r12
   14738:	and    BYTE PTR [rbx+0x50],0xfd
   1473c:	mov    QWORD PTR [rbx+0x10],r12
   14740:	mov    QWORD PTR [rbx+0x18],r14
   14744:	pop    rbx
   14745:	pop    rbp
   14746:	pop    r12
   14748:	pop    r13
   1474a:	pop    r14
   1474c:	ret    
   1474d:	nop    DWORD PTR [rax]
   14750:	mov    rax,QWORD PTR [rbp+0x8]
   14754:	mov    rsi,rbp
   14757:	mov    rdi,rbx
   1475a:	mov    QWORD PTR [r13+0x8],rax
   1475e:	call   14590 <call_freefun>
   14763:	jmp    14735 <_obstack_newchunk+0xb5>
   14765:	call   QWORD PTR [rip+0x9a35]        # 1e1a0 <obstack_alloc_failed_handler>
   1476b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000014770 <_obstack_allocated_p>:
   14770:	endbr64 
   14774:	mov    rax,QWORD PTR [rdi+0x8]
   14778:	test   rax,rax
   1477b:	je     147a6 <_obstack_allocated_p+0x36>
   1477d:	nop    DWORD PTR [rax]
   14780:	cmp    rsi,rax
   14783:	jbe    1478a <_obstack_allocated_p+0x1a>
   14785:	cmp    QWORD PTR [rax],rsi
   14788:	jae    147a0 <_obstack_allocated_p+0x30>
   1478a:	mov    rax,QWORD PTR [rax+0x8]
   1478e:	test   rax,rax
   14791:	jne    14780 <_obstack_allocated_p+0x10>
   14793:	xor    eax,eax
   14795:	ret    
   14796:	nop    WORD PTR cs:[rax+rax*1+0x0]
   147a0:	mov    eax,0x1
   147a5:	ret    
   147a6:	ret    
   147a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000147b0 <_obstack_free>:
   147b0:	endbr64 
   147b4:	push   r12
   147b6:	mov    r12,rsi
   147b9:	push   rbp
   147ba:	push   rbx
   147bb:	mov    rsi,QWORD PTR [rdi+0x8]
   147bf:	mov    rbx,rdi
   147c2:	test   rsi,rsi
   147c5:	jne    147d3 <_obstack_free+0x23>
   147c7:	jmp    147f5 <_obstack_free+0x45>
   147c9:	nop    DWORD PTR [rax+0x0]
   147d0:	mov    rsi,rbp
   147d3:	cmp    rsi,r12
   147d6:	jae    147e0 <_obstack_free+0x30>
   147d8:	mov    rax,QWORD PTR [rsi]
   147db:	cmp    rax,r12
   147de:	jae    14808 <_obstack_free+0x58>
   147e0:	mov    rbp,QWORD PTR [rsi+0x8]
   147e4:	mov    rdi,rbx
   147e7:	call   14590 <call_freefun>
   147ec:	or     BYTE PTR [rbx+0x50],0x2
   147f0:	test   rbp,rbp
   147f3:	jne    147d0 <_obstack_free+0x20>
   147f5:	test   r12,r12
   147f8:	jne    3f11 <_obstack_free.cold>
   147fe:	pop    rbx
   147ff:	pop    rbp
   14800:	pop    r12
   14802:	ret    
   14803:	nop    DWORD PTR [rax+rax*1+0x0]
   14808:	mov    QWORD PTR [rbx+0x18],r12
   1480c:	mov    QWORD PTR [rbx+0x10],r12
   14810:	mov    QWORD PTR [rbx+0x20],rax
   14814:	mov    QWORD PTR [rbx+0x8],rsi
   14818:	pop    rbx
   14819:	pop    rbp
   1481a:	pop    r12
   1481c:	ret    
   1481d:	nop    DWORD PTR [rax]

0000000000014820 <_obstack_memory_used>:
   14820:	endbr64 
   14824:	mov    rax,QWORD PTR [rdi+0x8]
   14828:	xor    r8d,r8d
   1482b:	test   rax,rax
   1482e:	je     14842 <_obstack_memory_used+0x22>
   14830:	mov    rdx,QWORD PTR [rax]
   14833:	sub    rdx,rax
   14836:	mov    rax,QWORD PTR [rax+0x8]
   1483a:	add    r8,rdx
   1483d:	test   rax,rax
   14840:	jne    14830 <_obstack_memory_used+0x10>
   14842:	mov    rax,r8
   14845:	ret    
   14846:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000014850 <dup_safer>:
   14850:	endbr64 
   14854:	mov    edx,0x3
   14859:	xor    esi,esi
   1485b:	xor    eax,eax
   1485d:	jmp    13e00 <rpl_fcntl>
   14862:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1486c:	nop    DWORD PTR [rax+0x0]

0000000000014870 <rpl_fopen>:
   14870:	endbr64 
   14874:	push   r15
   14876:	mov    r15,rdi
   14879:	push   r14
   1487b:	mov    r14,rsi
   1487e:	push   r13
   14880:	push   r12
   14882:	push   rbp
   14883:	push   rbx
   14884:	sub    rsp,0x88
   1488b:	mov    rax,QWORD PTR fs:0x28
   14894:	mov    QWORD PTR [rsp+0x78],rax
   14899:	xor    eax,eax
   1489b:	movzx  eax,BYTE PTR [rsi]
   1489e:	test   al,al
   148a0:	je     14a26 <rpl_fopen+0x1b6>
   148a6:	lea    r12,[rsp+0x20]
   148ab:	xor    r8d,r8d
   148ae:	xor    ebp,ebp
   148b0:	xor    r13d,r13d
   148b3:	mov    rbx,r12
   148b6:	lea    rcx,[rsp+0x70]
   148bb:	lea    rdx,[rip+0x38aa]        # 1816c <__PRETTY_FUNCTION__.4260+0x84>
   148c2:	cmp    al,0x2b
   148c4:	je     1490c <rpl_fopen+0x9c>
   148c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   148d0:	sub    eax,0x61
   148d3:	cmp    al,0x17
   148d5:	ja     14984 <rpl_fopen+0x114>
   148db:	movzx  eax,al
   148de:	movsxd rax,DWORD PTR [rdx+rax*4]
   148e2:	add    rax,rdx
   148e5:	notrack jmp rax
   148e8:	or     bpl,0x80
   148ec:	mov    r8d,0x1
   148f2:	nop    WORD PTR [rax+rax*1+0x0]
   148f8:	movzx  eax,BYTE PTR [rsi+0x1]
   148fc:	add    rsi,0x1
   14900:	test   al,al
   14902:	je     149ca <rpl_fopen+0x15a>
   14908:	cmp    al,0x2b
   1490a:	jne    148d0 <rpl_fopen+0x60>
   1490c:	mov    r13d,0x2
   14912:	cmp    rbx,rcx
   14915:	jae    148f8 <rpl_fopen+0x88>
   14917:	mov    BYTE PTR [rbx],0x2b
   1491a:	add    rbx,0x1
   1491e:	jmp    148f8 <rpl_fopen+0x88>
   14920:	or     ebp,0x240
   14926:	mov    r13d,0x1
   1492c:	cmp    rbx,rcx
   1492f:	jae    148f8 <rpl_fopen+0x88>
   14931:	mov    BYTE PTR [rbx],0x77
   14934:	add    rbx,0x1
   14938:	jmp    148f8 <rpl_fopen+0x88>
   1493a:	xor    r13d,r13d
   1493d:	cmp    rbx,rcx
   14940:	jae    148f8 <rpl_fopen+0x88>
   14942:	mov    BYTE PTR [rbx],0x72
   14945:	add    rbx,0x1
   14949:	jmp    148f8 <rpl_fopen+0x88>
   1494b:	or     ebp,0x80000
   14951:	mov    r8d,0x1
   14957:	jmp    148f8 <rpl_fopen+0x88>
   14959:	cmp    rbx,rcx
   1495c:	jae    148f8 <rpl_fopen+0x88>
   1495e:	mov    BYTE PTR [rbx],0x62
   14961:	add    rbx,0x1
   14965:	jmp    148f8 <rpl_fopen+0x88>
   14967:	or     ebp,0x440
   1496d:	mov    r13d,0x1
   14973:	cmp    rbx,rcx
   14976:	jae    148f8 <rpl_fopen+0x88>
   14978:	mov    BYTE PTR [rbx],0x61
   1497b:	add    rbx,0x1
   1497f:	jmp    148f8 <rpl_fopen+0x88>
   14984:	mov    rdi,rsi
   14987:	mov    BYTE PTR [rsp+0x1f],r8b
   1498c:	mov    QWORD PTR [rsp+0x10],rsi
   14991:	call   3980 <strlen@plt>
   14996:	lea    rdx,[rsp+0x70]
   1499b:	mov    rsi,QWORD PTR [rsp+0x10]
   149a0:	mov    rdi,rbx
   149a3:	sub    rdx,rbx
   149a6:	mov    ecx,0x51
   149ab:	cmp    rdx,rax
   149ae:	cmova  rdx,rax
   149b2:	mov    QWORD PTR [rsp+0x8],rdx
   149b7:	call   3b50 <__memcpy_chk@plt>
   149bc:	mov    rdx,QWORD PTR [rsp+0x8]
   149c1:	movzx  r8d,BYTE PTR [rsp+0x1f]
   149c7:	add    rbx,rdx
   149ca:	mov    BYTE PTR [rbx],0x0
   149cd:	test   r8b,r8b
   149d0:	je     14a30 <rpl_fopen+0x1c0>
   149d2:	mov    esi,r13d
   149d5:	mov    edx,0x1b6
   149da:	mov    rdi,r15
   149dd:	xor    eax,eax
   149df:	or     esi,ebp
   149e1:	xor    r13d,r13d
   149e4:	call   3d20 <open@plt>
   149e9:	mov    ebp,eax
   149eb:	test   eax,eax
   149ed:	js     14a01 <rpl_fopen+0x191>
   149ef:	mov    rsi,r12
   149f2:	mov    edi,eax
   149f4:	call   3c80 <fdopen@plt>
   149f9:	mov    r13,rax
   149fc:	test   rax,rax
   149ff:	je     14a40 <rpl_fopen+0x1d0>
   14a01:	mov    rax,QWORD PTR [rsp+0x78]
   14a06:	xor    rax,QWORD PTR fs:0x28
   14a0f:	jne    14a57 <rpl_fopen+0x1e7>
   14a11:	add    rsp,0x88
   14a18:	mov    rax,r13
   14a1b:	pop    rbx
   14a1c:	pop    rbp
   14a1d:	pop    r12
   14a1f:	pop    r13
   14a21:	pop    r14
   14a23:	pop    r15
   14a25:	ret    
   14a26:	mov    BYTE PTR [rsp+0x20],0x0
   14a2b:	nop    DWORD PTR [rax+rax*1+0x0]
   14a30:	mov    rsi,r14
   14a33:	mov    rdi,r15
   14a36:	call   3d40 <fopen@plt>
   14a3b:	mov    r13,rax
   14a3e:	jmp    14a01 <rpl_fopen+0x191>
   14a40:	call   3810 <__errno_location@plt>
   14a45:	mov    edi,ebp
   14a47:	mov    r12d,DWORD PTR [rax]
   14a4a:	mov    rbx,rax
   14a4d:	call   3a80 <close@plt>
   14a52:	mov    DWORD PTR [rbx],r12d
   14a55:	jmp    14a01 <rpl_fopen+0x191>
   14a57:	call   3990 <__stack_chk_fail@plt>
   14a5c:	nop    DWORD PTR [rax+0x0]

0000000000014a60 <__libc_csu_init>:
   14a60:	endbr64 
   14a64:	push   r15
   14a66:	lea    r15,[rip+0x8b03]        # 1d570 <__frame_dummy_init_array_entry>
   14a6d:	push   r14
   14a6f:	mov    r14,rdx
   14a72:	push   r13
   14a74:	mov    r13,rsi
   14a77:	push   r12
   14a79:	mov    r12d,edi
   14a7c:	push   rbp
   14a7d:	lea    rbp,[rip+0x8af4]        # 1d578 <__do_global_dtors_aux_fini_array_entry>
   14a84:	push   rbx
   14a85:	sub    rbp,r15
   14a88:	sub    rsp,0x8
   14a8c:	call   3000 <_init>
   14a91:	sar    rbp,0x3
   14a95:	je     14ab6 <__libc_csu_init+0x56>
   14a97:	xor    ebx,ebx
   14a99:	nop    DWORD PTR [rax+0x0]
   14aa0:	mov    rdx,r14
   14aa3:	mov    rsi,r13
   14aa6:	mov    edi,r12d
   14aa9:	call   QWORD PTR [r15+rbx*8]
   14aad:	add    rbx,0x1
   14ab1:	cmp    rbp,rbx
   14ab4:	jne    14aa0 <__libc_csu_init+0x40>
   14ab6:	add    rsp,0x8
   14aba:	pop    rbx
   14abb:	pop    rbp
   14abc:	pop    r12
   14abe:	pop    r13
   14ac0:	pop    r14
   14ac2:	pop    r15
   14ac4:	ret    
   14ac5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000014ad0 <__libc_csu_fini>:
   14ad0:	endbr64 
   14ad4:	ret    
   14ad5:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14adf:	nop

0000000000014ae0 <atexit>:
   14ae0:	endbr64 
   14ae4:	mov    rdx,QWORD PTR [rip+0x951d]        # 1e008 <__dso_handle>
   14aeb:	xor    esi,esi
   14aed:	jmp    3da0 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000014af4 <_fini>:
   14af4:	endbr64 
   14af8:	sub    rsp,0x8
   14afc:	add    rsp,0x8
   14b00:	ret    
